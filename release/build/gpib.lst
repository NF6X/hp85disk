
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001640  00800100  0001cb08  0001cb9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001cb08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a60  00801740  00801740  0001e1dc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e1dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e1f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016d0  00000000  00000000  0001e230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002851d  00000000  00000000  0001f900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000609b  00000000  00000000  00047e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000120ad  00000000  00000000  0004deb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005044  00000000  00000000  0005ff68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047e5  00000000  00000000  00064fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023aea  00000000  00000000  00069791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016d0  00000000  00000000  0008d27b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 79 23 	jmp	0x46f2	; 0x46f2 <__ctors_end>
       4:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
       8:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
       c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      10:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      14:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      18:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      1c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      20:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      24:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      28:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      2c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      30:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      34:	0c 94 26 31 	jmp	0x624c	; 0x624c <__vector_13>
      38:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      3c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      40:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      44:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      48:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      4c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      50:	0c 94 47 27 	jmp	0x4e8e	; 0x4e8e <__vector_20>
      54:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      58:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      5c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      60:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      64:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      68:	0c 94 49 2b 	jmp	0x5692	; 0x5692 <__vector_26>
      6c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      70:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      74:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      78:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      7c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      80:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      84:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      88:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__bad_interrupt>
      8c:	56 41       	sbci	r21, 0x16	; 22
      8e:	a6 42       	sbci	r26, 0x26	; 38
      90:	8e 41       	sbci	r24, 0x1E	; 30
      92:	79 42       	sbci	r23, 0x29	; 41
      94:	79 42       	sbci	r23, 0x29	; 41
      96:	a6 42       	sbci	r26, 0x26	; 38
      98:	a6 42       	sbci	r26, 0x26	; 38
      9a:	a6 42       	sbci	r26, 0x26	; 38
      9c:	a6 42       	sbci	r26, 0x26	; 38
      9e:	a6 42       	sbci	r26, 0x26	; 38
      a0:	a6 42       	sbci	r26, 0x26	; 38
      a2:	a6 42       	sbci	r26, 0x26	; 38
      a4:	a6 42       	sbci	r26, 0x26	; 38
      a6:	56 41       	sbci	r21, 0x16	; 22
      a8:	53 41       	sbci	r21, 0x13	; 19
      aa:	a6 42       	sbci	r26, 0x26	; 38
      ac:	a6 42       	sbci	r26, 0x26	; 38
      ae:	9c 42       	sbci	r25, 0x2C	; 44
      b0:	a6 42       	sbci	r26, 0x26	; 38
      b2:	88 41       	sbci	r24, 0x18	; 24
      b4:	a6 42       	sbci	r26, 0x26	; 38
      b6:	a6 42       	sbci	r26, 0x26	; 38
      b8:	56 41       	sbci	r21, 0x16	; 22
      ba:	a6 42       	sbci	r26, 0x26	; 38
      bc:	a6 42       	sbci	r26, 0x26	; 38
      be:	a6 42       	sbci	r26, 0x26	; 38
      c0:	a6 42       	sbci	r26, 0x26	; 38
      c2:	a6 42       	sbci	r26, 0x26	; 38
      c4:	a6 42       	sbci	r26, 0x26	; 38
      c6:	a6 42       	sbci	r26, 0x26	; 38
      c8:	a6 42       	sbci	r26, 0x26	; 38
      ca:	a6 42       	sbci	r26, 0x26	; 38
      cc:	56 41       	sbci	r21, 0x16	; 22
      ce:	a1 42       	sbci	r26, 0x21	; 33
      d0:	8e 41       	sbci	r24, 0x1E	; 30
      d2:	79 42       	sbci	r23, 0x29	; 41
      d4:	79 42       	sbci	r23, 0x29	; 41
      d6:	a6 42       	sbci	r26, 0x26	; 38
      d8:	a6 42       	sbci	r26, 0x26	; 38
      da:	a6 42       	sbci	r26, 0x26	; 38
      dc:	a6 42       	sbci	r26, 0x26	; 38
      de:	a6 42       	sbci	r26, 0x26	; 38
      e0:	a6 42       	sbci	r26, 0x26	; 38
      e2:	a6 42       	sbci	r26, 0x26	; 38
      e4:	a6 42       	sbci	r26, 0x26	; 38
      e6:	56 41       	sbci	r21, 0x16	; 22
      e8:	53 41       	sbci	r21, 0x13	; 19
      ea:	a6 42       	sbci	r26, 0x26	; 38
      ec:	a6 42       	sbci	r26, 0x26	; 38
      ee:	97 42       	sbci	r25, 0x27	; 39
      f0:	a6 42       	sbci	r26, 0x26	; 38
      f2:	88 41       	sbci	r24, 0x18	; 24
      f4:	a6 42       	sbci	r26, 0x26	; 38
      f6:	a6 42       	sbci	r26, 0x26	; 38
      f8:	56 41       	sbci	r21, 0x16	; 22
      fa:	cb 42       	sbci	r28, 0x2B	; 43
      fc:	0c 44       	sbci	r16, 0x4C	; 76
      fe:	be 42       	sbci	r27, 0x2E	; 46
     100:	26 43       	sbci	r18, 0x36	; 54
     102:	0a 43       	sbci	r16, 0x3A	; 58
     104:	0c 44       	sbci	r16, 0x4C	; 76
     106:	0c 44       	sbci	r16, 0x4C	; 76
     108:	0c 44       	sbci	r16, 0x4C	; 76
     10a:	0c 44       	sbci	r16, 0x4C	; 76
     10c:	0c 44       	sbci	r16, 0x4C	; 76
     10e:	0c 44       	sbci	r16, 0x4C	; 76
     110:	0c 44       	sbci	r16, 0x4C	; 76
     112:	0c 44       	sbci	r16, 0x4C	; 76
     114:	d8 42       	sbci	r29, 0x28	; 40
     116:	ec 42       	sbci	r30, 0x2C	; 44
     118:	0c 44       	sbci	r16, 0x4C	; 76
     11a:	0c 44       	sbci	r16, 0x4C	; 76
     11c:	b2 43       	sbci	r27, 0x32	; 50
     11e:	0c 44       	sbci	r16, 0x4C	; 76
     120:	ba 42       	sbci	r27, 0x2A	; 42
     122:	0c 44       	sbci	r16, 0x4C	; 76
     124:	0c 44       	sbci	r16, 0x4C	; 76
     126:	ec 42       	sbci	r30, 0x2C	; 44
     128:	0c 44       	sbci	r16, 0x4C	; 76
     12a:	0c 44       	sbci	r16, 0x4C	; 76
     12c:	0c 44       	sbci	r16, 0x4C	; 76
     12e:	0c 44       	sbci	r16, 0x4C	; 76
     130:	0c 44       	sbci	r16, 0x4C	; 76
     132:	0c 44       	sbci	r16, 0x4C	; 76
     134:	0c 44       	sbci	r16, 0x4C	; 76
     136:	0c 44       	sbci	r16, 0x4C	; 76
     138:	0c 44       	sbci	r16, 0x4C	; 76
     13a:	cb 42       	sbci	r28, 0x2B	; 43
     13c:	5a 43       	sbci	r21, 0x3A	; 58
     13e:	be 42       	sbci	r27, 0x2E	; 46
     140:	26 43       	sbci	r18, 0x36	; 54
     142:	0a 43       	sbci	r16, 0x3A	; 58
     144:	0c 44       	sbci	r16, 0x4C	; 76
     146:	0c 44       	sbci	r16, 0x4C	; 76
     148:	0c 44       	sbci	r16, 0x4C	; 76
     14a:	0c 44       	sbci	r16, 0x4C	; 76
     14c:	0c 44       	sbci	r16, 0x4C	; 76
     14e:	0c 44       	sbci	r16, 0x4C	; 76
     150:	0c 44       	sbci	r16, 0x4C	; 76
     152:	0c 44       	sbci	r16, 0x4C	; 76
     154:	d8 42       	sbci	r29, 0x28	; 40
     156:	ec 42       	sbci	r30, 0x2C	; 44
     158:	0c 44       	sbci	r16, 0x4C	; 76
     15a:	0c 44       	sbci	r16, 0x4C	; 76
     15c:	5a 43       	sbci	r21, 0x3A	; 58
     15e:	0c 44       	sbci	r16, 0x4C	; 76
     160:	ba 42       	sbci	r27, 0x2A	; 42
     162:	0c 44       	sbci	r16, 0x4C	; 76
     164:	0c 44       	sbci	r16, 0x4C	; 76
     166:	ec 42       	sbci	r30, 0x2C	; 44
     168:	1b 68       	ori	r17, 0x8B	; 139
     16a:	25 68       	ori	r18, 0x85	; 133
     16c:	2d 68       	ori	r18, 0x8D	; 141
     16e:	30 68       	ori	r19, 0x80	; 128
     170:	33 68       	ori	r19, 0x83	; 131
     172:	36 68       	ori	r19, 0x86	; 134
     174:	39 68       	ori	r19, 0x89	; 137
     176:	3c 68       	ori	r19, 0x8C	; 140
     178:	3f 68       	ori	r19, 0x8F	; 143
     17a:	eb 85       	ldd	r30, Y+11	; 0x0b
     17c:	f4 85       	ldd	r31, Z+12	; 0x0c
     17e:	25 86       	std	Z+13, r2	; 0x0d
     180:	3e 86       	std	Y+14, r3	; 0x0e
     182:	5a 86       	std	Y+10, r5	; 0x0a
     184:	67 86       	std	Z+15, r6	; 0x0f
     186:	83 86       	std	Z+11, r8	; 0x0b
     188:	ad 86       	std	Y+13, r10	; 0x0d
     18a:	90 86       	std	Z+8, r9	; 0x08
     18c:	b1 9a       	sbi	0x16, 1	; 22
     18e:	83 9b       	sbis	0x10, 3	; 16
     190:	bf 9b       	sbis	0x17, 7	; 23
     192:	ee 9b       	sbis	0x1d, 6	; 29
     194:	fe 9b       	sbis	0x1f, 6	; 31
     196:	1b 9c       	mul	r1, r11
     198:	7b 9c       	mul	r7, r11
     19a:	8a 9d       	mul	r24, r10
     19c:	8a 9d       	mul	r24, r10
     19e:	8a 9d       	mul	r24, r10
     1a0:	af 9c       	mul	r10, r15
     1a2:	db 9c       	mul	r13, r11
     1a4:	29 9d       	mul	r18, r9
     1a6:	45 9d       	mul	r20, r5
     1a8:	4e 9b       	sbis	0x09, 6	; 9
     1aa:	61 9b       	sbis	0x0c, 1	; 12
     1ac:	7e b9       	out	0x0e, r23	; 14
     1ae:	3d b9       	out	0x0d, r19	; 13
     1b0:	3d b9       	out	0x0d, r19	; 13
     1b2:	3d b9       	out	0x0d, r19	; 13
     1b4:	3d b9       	out	0x0d, r19	; 13
     1b6:	01 b9       	out	0x01, r16	; 1
     1b8:	08 b9       	out	0x08, r16	; 8
     1ba:	0f b9       	out	0x0f, r16	; 15
     1bc:	1f b9       	out	0x0f, r17	; 15
     1be:	2d b9       	out	0x0d, r18	; 13
     1c0:	26 b9       	out	0x06, r18	; 6

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3666>:
     843:	0a 00                                               ..

00000845 <__c.3664>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3662>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3656>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3654>:
     8cf:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8df:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     8ef:	30 34 58 0a 00                                      04X..

000008f4 <__c.3652>:
     8f4:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     904:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000912 <__c.3650>:
     912:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     922:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000931 <__c.3648>:
     931:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     941:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000950 <__c.3646>:
     950:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     960:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000096f <__c.3644>:
     96f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     97f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

0000098e <__c.3642>:
     98e:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     99e:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009ad <__c.3640>:
     9ad:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9bd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009cb <__c.3638>:
     9cb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9db:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009e9 <__c.3636>:
     9e9:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     9f9:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a08 <__c.3634>:
     a08:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a18:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a26 <__c.3632>:
     a26:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a37 <__c.3596>:
     a37:	72 63 3d 25 75 0a 00                                rc=%u..

00000a3e <__c.3634>:
     a3e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a4e:	72 65 65 0a 00                                      ree..

00000a53 <__c.3632>:
     a53:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a63:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a73:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a7c <__c.3628>:
     a7c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a8a <__c.3615>:
     a8a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a9a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aaa <__c.3613>:
     aaa:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ab8 <__c.3611>:
     ab8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ac8:	73 74 0a 00                                         st..

00000acc <__c.3609>:
     acc:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000adc <__c.3607>:
     adc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000afc <__c.3599>:
     afc:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b0c <__c.3589>:
     b0c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b1c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b2c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b3c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b4c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b5c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b6c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b7c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b88 <__c.3587>:
     b88:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b94 <__c.3919>:
     b94:	25 73 0a 00                                         %s..

00000b98 <__c.3917>:
     b98:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000ba0 <__c.3672>:
     ba0:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bac <__c.3601>:
     bac:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bbc:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bc4 <__c.3594>:
     bc4:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bd4:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bdc <__c.3758>:
     bdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000be7 <__c.3754>:
     be7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     bf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c07:	68 0a 00                                            h..

00000c0a <__c.3751>:
     c0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c1a <__c.3746>:
     c1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c2a:	5b 25 73 5d 0a 00                                   [%s]..

00000c30 <__c.3744>:
     c30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c3e <__c.3742>:
     c3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c5f <__c.3729>:
     c5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c79 <__c.3724>:
     c79:	25 73 0a 00                                         %s..

00000c7d <__c.3722>:
     c7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c8d:	0a 00                                               ..

00000c8f <__c.3710>:
     c8f:	0d 00                                               ..

00000c91 <__c.3708>:
     c91:	4d 6f 72 65 2e 2e 00                                More...

00000c98 <__c.3698>:
     c98:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     ca8:	2e 0a 00                                            ...

00000cab <__c.3694>:
     cab:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cba <__c.3691>:
     cba:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cc7 <__c.3689>:
     cc7:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cd4 <__c.3687>:
     cd4:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ce4 <__c.3685>:
     ce4:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cf1 <__c.3683>:
     cf1:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d01 <__c.3681>:
     d01:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d0d <__c.3670>:
     d0d:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d18 <__c.3668>:
     d18:	0a 00                                               ..

00000d1a <__c.3663>:
     d1a:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d2a <__c.3653>:
     d2a:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d3b <__c.3651>:
     d3b:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d49 <__c.3649>:
     d49:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d5a <__c.3647>:
     d5a:	25 73 0a 00                                         %s..

00000d5e <__c.3644>:
     d5e:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d6f <__c.3636>:
     d6f:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d80 <__c.3620>:
     d80:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d90:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     da0:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     db0:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dc0:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dd0:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     de0:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     df0:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e00:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e10:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e20:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e30:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e40:	6e 65 77 0a 0a 00                                   new...

00000e46 <__c.3618>:
     e46:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e52 <__c.3809>:
     e52:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e60 <__c.3803>:
     e60:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e6d <__c.3796>:
     e6d:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e7b <__c.3787>:
     e7b:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e88 <__c.3778>:
     e88:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e99 <__c.3764>:
     e99:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ea9:	5d 0a 00                                            ]..

00000eac <__c.3746>:
     eac:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ebc:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ec9 <__c.4403>:
     ec9:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     ed9:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     ee9:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000ef1 <__c.4395>:
     ef1:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f01:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f0b <__c.4390>:
     f0b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f1b:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f2b:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f39 <__c.4388>:
     f39:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f49:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f53 <__c.4378>:
     f53:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f63:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f73:	28 25 64 29 5d 0a 00                                (%d)]..

00000f7a <__c.4374>:
     f7a:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f8a:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f9a:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fa7 <__c.4371>:
     fa7:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fb7:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fc0 <__c.4355>:
     fc0:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fcb <__c.4353>:
     fcb:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fd6 <__c.4351>:
     fd6:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fe1 <__c.4347>:
     fe1:	20 20 20 20 20 00                                        .

00000fe7 <__c.4345>:
     fe7:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000ff0 <__c.4319>:
     ff0:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1000:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000100e <__c.4316>:
    100e:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    101e:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

00001028 <__c.4301>:
    1028:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1038:	3e 0a 00                                            >..

0000103b <__c.4296>:
    103b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    104b:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    105b:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000106a <__c.4292>:
    106a:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    107a:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    108a:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    109a:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010a6 <__c.4288>:
    10a6:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10b6:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10c6:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10d6:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010e2 <__c.4286>:
    10e2:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10f2:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1102:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1112:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001121 <__c.4281>:
    1121:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1131:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001140 <__c.4278>:
    1140:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1150:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

0000115f <__c.4263>:
    115f:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    116f:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    117f:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

0000118d <__c.4245>:
    118d:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    119d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011a8 <__c.4243>:
    11a8:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11b8:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11c8:	72 61 6e 67 65 0a 00                                range..

000011cf <__c.4238>:
    11cf:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11df:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ea <__c.4236>:
    11ea:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11fa:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    120a:	61 6e 67 65 0a 00                                   ange..

00001210 <__c.4231>:
    1210:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1220:	5d 0a 00                                            ]..

00001223 <__c.4218>:
    1223:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001234 <__c.4395>:
    1234:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001245 <__c.4390>:
    1245:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1255:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1265:	32 58 48 5d 0a 00                                   2XH]..

0000126b <__c.4388>:
    126b:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    127b:	0a 00                                               ..

0000127d <__c.4386>:
    127d:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000128e <__c.4381>:
    128e:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000129a <__c.4379>:
    129a:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012aa <__c.4377>:
    12aa:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12ba:	52 5d 0a 00                                         R]..

000012be <__c.4375>:
    12be:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12ce:	0a 00                                               ..

000012d0 <__c.4373>:
    12d0:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012e1 <__c.4371>:
    12e1:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012e8 <__c.4366>:
    12e8:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012f4 <__c.4364>:
    12f4:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1304:	52 5d 0a 00                                         R]..

00001308 <__c.4362>:
    1308:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

00001319 <__c.4360>:
    1319:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    1329:	0a 00                                               ..

0000132b <__c.4358>:
    132b:	0a 00                                               ..

0000132d <__c.4356>:
    132d:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001334 <__c.4351>:
    1334:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1344:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001355 <__c.4349>:
    1355:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000135c <__c.4347>:
    135c:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001369 <__c.4345>:
    1369:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001375 <__c.4343>:
    1375:	5b 53 44 43 5d 0a 00                                [SDC]..

0000137c <__c.4341>:
    137c:	5b 53 50 44 5d 0a 00                                [SPD]..

00001383 <__c.4339>:
    1383:	5b 53 50 45 5d 0a 00                                [SPE]..

0000138a <__c.4337>:
    138a:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    139a:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013a2 <__c.4335>:
    13a2:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13b2:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013ba <__c.4330>:
    13ba:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13ca:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013d4 <__c.4328>:
    13d4:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13e4:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013f5 <__c.4301>:
    13f5:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001406 <__c.4299>:
    1406:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001413 <__c.4297>:
    1413:	3c 42 55 53 3e 0a 00                                <BUS>..

0000141a <__c.4295>:
    141a:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001425 <__c.4293>:
    1425:	3c 49 46 43 3e 0a 00                                <IFC>..

0000142c <__c.4288>:
    142c:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    143c:	0a 00                                               ..

0000143e <__c.4286>:
    143e:	44 6f 6e 65 0a 00                                   Done..

00001444 <__c.4282>:
    1444:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001450 <__c.4280>:
    1450:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1460:	20 65 78 69 74 0a 00                                 exit..

00001467 <__c.4278>:
    1467:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1477:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1487:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001492 <__c.4276>:
    1492:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14a2:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014ac <__c.4230>:
    14ac:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14bc:	6f 74 65 63 74 65 64 0a 00                          otected..

000014c5 <__c.4228>:
    14c5:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014d6 <__c.4226>:
    14d6:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14e6:	0a 00                                               ..

000014e8 <__c.4421>:
    14e8:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014f5 <__c.4413>:
    14f5:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1505:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1515:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1525:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1535:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1545:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1555:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1565:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1575:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1585:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1595:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15a5:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15b5:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15c5:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15d5:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15e5:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15f5:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1605:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1615:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1625:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1635:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1645:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1655:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1665:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1675:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1685:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1695:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16a5:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16b5:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016be <__c.4411>:
    16be:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

000016c9 <__c.4801>:
    16c9:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000016d1 <__c.4799>:
    16d1:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    16e1:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000016eb <__c.4797>:
    16eb:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    16fb:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    170b:	0a 00                                               ..

0000170d <__c.4795>:
    170d:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001715 <__c.4793>:
    1715:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1725:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000172f <__c.4791>:
    172f:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    173f:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    174f:	0a 00                                               ..

00001751 <__c.4774>:
    1751:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1761:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1771:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1781:	6f 20 32 35 36 0a 00                                o 256..

00001788 <__c.4772>:
    1788:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1798:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    17a8:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    17b8:	20 32 35 36 0a 00                                    256..

000017be <__c.4759>:
    17be:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    17ce:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

000017dd <__c.4723>:
    17dd:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    17ed:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    17fd:	0a 00                                               ..

000017ff <__c.4715>:
    17ff:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    180f:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    181f:	6c 6c 0a 00                                         ll..

00001823 <__c.4702>:
    1823:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1833:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1843:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000184e <__c.4700>:
    184e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    185e:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    186e:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    187e:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001886 <__c.4698>:
    1886:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1896:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    18a6:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    18b6:	3a 25 73 0a 00                                      :%s..

000018bb <__c.4696>:
    18bb:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18cb:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    18db:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    18eb:	55 4c 4c 0a 00                                      ULL..

000018f0 <__c.4694>:
    18f0:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1900:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1910:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1920:	66 20 72 61 6e 67 65 0a 00                          f range..

00001929 <__c.4692>:
    1929:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1939:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1949:	6e 67 65 0a 00                                      nge..

0000194e <__c.4653>:
    194e:	0a 00                                               ..

00001950 <__c.4648>:
    1950:	0a 00                                               ..

00001952 <__c.4646>:
    1952:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1962:	6c 64 0a 00                                         ld..

00001966 <__c.4644>:
    1966:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1976:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001985 <__c.4642>:
    1985:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

0000198f <__c.4640>:
    198f:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    199f:	6c 64 0a 00                                         ld..

000019a3 <__c.4638>:
    19a3:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19b3:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019c2 <__c.4636>:
    19c2:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

000019cb <__c.4633>:
    19cb:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    19db:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

000019eb <__c.4624>:
    19eb:	0a 00                                               ..

000019ed <__c.4619>:
    19ed:	0a 00                                               ..

000019ef <__c.4617>:
    19ef:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000019f8 <__c.4615>:
    19f8:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a02 <__c.4613>:
    1a02:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a0b <__c.4610>:
    1a0b:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1a1b:	0a 00                                               ..

00001a1d <__c.4604>:
    1a1d:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1a2d:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1a3d:	2a 2a 2a 2a 2a 0a 00                                *****..

00001a44 <__c.4602>:
    1a44:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1a54:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001a61 <__c.4600>:
    1a61:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1a71:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1a81:	0a 00                                               ..

00001a83 <__c.4596>:
    1a83:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1a93:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1aa3:	0a 00                                               ..

00001aa5 <__c.4593>:
    1aa5:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ab5:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1ac5:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ad5 <__c.4584>:
    1ad5:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ae5:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1af5:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b04 <__c.4581>:
    1b04:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b14:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1b24:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b34 <__c.4572>:
    1b34:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b44:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1b54:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b62 <__c.4564>:
    1b62:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b72:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b82:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b90 <__c.4554>:
    1b90:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ba0:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bb0:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001bbc <__c.4537>:
    1bbc:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bcc:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1bdc:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1bec:	0a 00                                               ..

00001bee <__c.4529>:
    1bee:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bfe:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c0e:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c1c <__c.4526>:
    1c1c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c2c:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c3c:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c4a <__c.4518>:
    1c4a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c5a:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1c6a:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c77 <__c.4508>:
    1c77:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c87:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c97:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001ca8 <__c.4505>:
    1ca8:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cb8:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1cc8:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001cd2 <__c.4501>:
    1cd2:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1ce2:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1cf2:	0a 00                                               ..

00001cf4 <__c.4490>:
    1cf4:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d04:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d14:	0a 00                                               ..

00001d16 <__c.4487>:
    1d16:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d26:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d34 <__c.4485>:
    1d34:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d41 <__c.4466>:
    1d41:	25 73 0a 00                                         %s..

00001d45 <__c.4456>:
    1d45:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d51 <__c.4445>:
    1d51:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1d61:	6c 64 29 0a 00                                      ld)..

00001d66 <__c.3643>:
    1d66:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001d77 <__c.3641>:
    1d77:	25 73 20 25 73 0a 00                                %s %s..

00001d7e <__c.3637>:
    1d7e:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1d8e:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001d9b <__c.4538>:
    1d9b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1dab:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1dbb:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1dcb:	48 5d 0a 00                                         H]..

00001dcf <__c.4536>:
    1dcf:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1ddf:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1def:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1dff:	48 5d 0a 00                                         H]..

00001e03 <__c.4534>:
    1e03:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e13:	74 5d 0a 00                                         t]..

00001e17 <__c.4532>:
    1e17:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e26 <__c.4530>:
    1e26:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1e36:	74 65 5d 0a 00                                      te]..

00001e3b <__c.4528>:
    1e3b:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1e4b:	61 74 65 5d 0a 00                                   ate]..

00001e51 <__c.4526>:
    1e51:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1e61:	61 74 65 5d 0a 00                                   ate]..

00001e67 <__c.4521>:
    1e67:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1e77:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1e87:	5d 0a 00                                            ]..

00001e8a <__c.4507>:
    1e8a:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e99 <__c.4505>:
    1e99:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1ea9:	5d 0a 00                                            ]..

00001eac <__c.4498>:
    1eac:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001eb8 <__c.4484>:
    1eb8:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1ec8:	5d 0a 00                                            ]..

00001ecb <__c.4482>:
    1ecb:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1edb:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001ee5 <__c.4475>:
    1ee5:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1ef5:	48 5d 0a 00                                         H]..

00001ef9 <__c.4473>:
    1ef9:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f09:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f19 <__c.4468>:
    1f19:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1f29:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1f39:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1f49:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001f55 <__c.4465>:
    1f55:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1f65:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001f75 <__c.4463>:
    1f75:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1f85:	29 5d 0a 00                                         )]..

00001f89 <__c.4461>:
    1f89:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1f99:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1fa9:	28 25 64 29 5d 0a 00                                (%d)]..

00001fb0 <__c.4459>:
    1fb0:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1fc0:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001fce <__c.4457>:
    1fce:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1fde:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001feb <__c.4454>:
    1feb:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1ffb:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    200b:	44 4f 5d 0a 00                                      DO]..

00002010 <__c.4451>:
    2010:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2020:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002029 <__c.4449>:
    2029:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2039:	5d 0a 00                                            ]..

0000203c <__c.4440>:
    203c:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    204c:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    205c:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    206c:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002074 <__c.4437>:
    2074:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2084:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002094 <__c.4435>:
    2094:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    20a4:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    20b4:	5d 0a 00                                            ]..

000020b7 <__c.4433>:
    20b7:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    20c7:	61 74 75 73 5d 0a 00                                atus]..

000020ce <__c.4431>:
    20ce:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    20de:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000020e7 <__c.4429>:
    20e7:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    20f7:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002102 <__c.4427>:
    2102:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2112:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002121 <__c.4425>:
    2121:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2131:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000213f <__c.4423>:
    213f:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002150 <__c.4421>:
    2150:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2160:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

0000216c <__c.4419>:
    216c:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    217c:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002189 <__c.4417>:
    2189:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2199:	2d 4f 50 5d 0a 00                                   -OP]..

0000219f <__c.4415>:
    219f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21af:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000021c0 <__c.4413>:
    21c0:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    21d0:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    21e0:	44 4f 5d 0a 00                                      DO]..

000021e5 <__c.4411>:
    21e5:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    21f5:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000021ff <__c.4409>:
    21ff:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    220f:	2d 4f 50 5d 0a 00                                   -OP]..

00002215 <__c.4407>:
    2215:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002223 <__c.4405>:
    2223:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2233:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000223f <__c.4403>:
    223f:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    224f:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000225c <__c.4401>:
    225c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    226c:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002275 <__c.4398>:
    2275:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2285:	20 52 65 61 64 5d 0a 00                              Read]..

0000228d <__c.4396>:
    228d:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    229d:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000022a6 <__c.4393>:
    22a6:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    22b6:	25 64 29 5d 0a 00                                   %d)]..

000022bc <__c.4391>:
    22bc:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    22cc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000022d5 <__c.4389>:
    22d5:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    22e5:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    22f5:	52 4f 52 5d 0a 00                                   ROR]..

000022fb <__c.4380>:
    22fb:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    230b:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002315 <__c.4375>:
    2315:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2325:	76 61 6c 69 64 5d 0a 00                             valid]..

0000232d <__c.4370>:
    232d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    233d:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000234c <__c.4368>:
    234c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    235c:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002369 <__c.4366>:
    2369:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2379:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2389:	5d 0a 00                                            ]..

0000238c <__c.4364>:
    238c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000239d <__c.4356>:
    239d:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23ad:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000023b8 <__c.4354>:
    23b8:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23c8:	73 5d 0a 00                                         s]..

000023cc <__c.4344>:
    23cc:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000023d7 <__c.4342>:
    23d7:	25 73 3a 0a 00                                      %s:..

000023dc <__c.4317>:
    23dc:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    23ec:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    23fc:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002407 <__c.4315>:
    2407:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2417:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2427:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000242f <__c.4311>:
    242f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    243f:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    244f:	58 48 29 5d 0a 00                                   XH)]..

00002455 <__c.4309>:
    2455:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2465:	72 5d 0a 00                                         r]..

00002469 <__c.4305>:
    2469:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2479:	5d 0a 00                                            ]..

0000247c <__c.4303>:
    247c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    248c:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    249c:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000024a5 <__c.4291>:
    24a5:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    24b5:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    24c5:	62 79 74 65 73 5d 0a 00                             bytes]..

000024cd <__c.4289>:
    24cd:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    24dd:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    24ed:	53 48 5d 0a 00                                      SH]..

000024f2 <__c.4284>:
    24f2:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2502:	20 45 72 72 6f 72 5d 0a 00                           Error]..

0000250b <__c.4282>:
    250b:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    251b:	45 72 72 6f 72 5d 0a 00                             Error]..

00002523 <__c.4280>:
    2523:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2533:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002541 <__c.4278>:
    2541:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2551:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2561:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002569 <__c.4261>:
    2569:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2579:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002585 <__c.4245>:
    2585:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2595:	5d 0a 00                                            ]..

00002598 <__c.4361>:
    2598:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25a8:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    25b8:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000025c1 <__c.4358>:
    25c1:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    25d1:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    25e1:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000025ec <__c.4355>:
    25ec:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25fc:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    260c:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002615 <__c.4350>:
    2615:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2625:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002635 <__c.4347>:
    2635:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2645:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002651 <__c.4344>:
    2651:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2661:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2671:	0a 00                                               ..

00002673 <__c.4341>:
    2673:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2683:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002692 <__c.4338>:
    2692:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26a2:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000026b3 <__c.4335>:
    26b3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    26c3:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000026d3 <__c.4331>:
    26d3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    26e3:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    26f3:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2703:	0a 00                                               ..

00002705 <__c.4326>:
    2705:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002715 <__c.4323>:
    2715:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2725:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002734 <__c.4321>:
    2734:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2744:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2754:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

0000275f <__c.4319>:
    275f:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    276f:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000277f <__c.4317>:
    277f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    278f:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    279f:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027a8 <__c.4315>:
    27a8:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    27b8:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000027c4 <__c.4313>:
    27c4:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    27d4:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    27e4:	0a 00                                               ..

000027e6 <__c.4311>:
    27e6:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000027f6 <__c.4308>:
    27f6:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2806:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002817 <__c.4306>:
    2817:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2827:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2837:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002840 <__c.4304>:
    2840:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2850:	36 5d 0a 00                                         6]..

00002854 <__c.4301>:
    2854:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2864:	35 5d 0a 00                                         5]..

00002868 <__c.4298>:
    2868:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2878:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002888 <__c.4295>:
    2888:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2898:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    28a8:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

000028b7 <__c.4293>:
    28b7:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    28c7:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000028d8 <__c.4291>:
    28d8:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    28e8:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000028f9 <__c.4289>:
    28f9:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2909:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2919:	0a 00                                               ..

0000291b <__c.4287>:
    291b:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    292b:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    293b:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    294b:	0a 00                                               ..

0000294d <__c.4275>:
    294d:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    295d:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    296d:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    297d:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    298d:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

0000299e <__c.4273>:
    299e:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29ae:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29be:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    29ce:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    29de:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000029ee <__c.4271>:
    29ee:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    29fe:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a0e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a1e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a2e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a3e <__c.4269>:
    2a3e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a4e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a5e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a6e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a7e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a8e <__c.4264>:
    2a8e:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2a9e:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2aae:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2abe:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2ace:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2ade:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2aee:	58 48 5d 0a 00                                      XH]..

00002af3 <__c.4262>:
    2af3:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b03:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b13:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b23:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b33:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b43:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b53:	30 32 58 48 5d 0a 00                                02XH]..

00002b5a <__c.4260>:
    2b5a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2b6a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b7a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b8a:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b9a:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2baa:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bba:	30 32 58 48 5d 0a 00                                02XH]..

00002bc1 <__c.4258>:
    2bc1:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2bd1:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2be1:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2bf1:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c01:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c11:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c21:	30 32 58 48 5d 0a 00                                02XH]..

00002c28 <__c.4251>:
    2c28:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002c37 <__c.4238>:
    2c37:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002c44 <__c.4236>:
    2c44:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2c54:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002c5e <__c.4229>:
    2c5e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2c6e:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002c7e <__c.4227>:
    2c7e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2c8e:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002c9d <__c.4225>:
    2c9d:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2cad:	0a 00                                               ..

00002caf <__c.4218>:
    2caf:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2cbf:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002cc9 <__c.4212>:
    2cc9:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2cd9:	0a 00                                               ..

00002cdb <__c.4206>:
    2cdb:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2ceb:	6e 65 5d 0a 00                                      ne]..

00002cf0 <__c.4202>:
    2cf0:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d00 <__c.4161>:
    2d00:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d10:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d20:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d2b <__c.4191>:
    2d2b:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2d3b:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2d4b:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002d53 <__c.4168>:
    2d53:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2d63:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002d6c <__c.4154>:
    2d6c:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d7c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d86 <__c.4152>:
    2d86:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2d96:	75 73 5d 0a 00                                      us]..

00002d9b <__c.4146>:
    2d9b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2dab:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002db5 <__c.4144>:
    2db5:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2dc5:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002dd3 <__c.4138>:
    2dd3:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2de3:	74 61 74 75 73 5d 0a 00                             tatus]..

00002deb <__c.4123>:
    2deb:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2dfb:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e05 <__c.4121>:
    2e05:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e15:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e21 <__c.4116>:
    2e21:	25 30 38 6c 64 0d 00                                %08ld..

00002e28 <__c.4110>:
    2e28:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e38:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002e49 <__c.4104>:
    2e49:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002e57 <__c.4102>:
    2e57:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2e67:	69 74 65 0a 00                                      ite..

00002e6c <__c.4096>:
    2e6c:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002e78 <__c.4094>:
    2e78:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2e88:	6f 3a 25 73 0a 00                                   o:%s..

00002e8e <__c.4092>:
    2e8e:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2e9e:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2eae:	74 00                                               t.

00002eb0 <__c.4553>:
    2eb0:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2ec0:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002ed0 <__c.4551>:
    2ed0:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2ee0:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002ef0 <__c.4549>:
    2ef0:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f00:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f10:	30 0a 00                                            0..

00002f13 <__c.4547>:
    2f13:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f23:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f33:	70 74 79 0a 00                                      pty..

00002f38 <__c.4545>:
    2f38:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f48:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2f58:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002f61 <__c.4532>:
    2f61:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2f71:	20 25 31 30 73 0a 00                                 %10s..

00002f78 <__c.4530>:
    2f78:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2f88:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2f98:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002fa1 <__c.4528>:
    2fa1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2fb1:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2fc1:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    2fd1:	74 65 72 73 0a 00                                   ters..

00002fd7 <__c.4526>:
    2fd7:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2fe7:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    2ff7:	65 6d 70 74 79 0a 00                                empty..

00002ffe <__c.4524>:
    2ffe:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    300e:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    301e:	65 6d 70 74 79 0a 00                                empty..

00003025 <__c.4522>:
    3025:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3035:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3045:	20 65 6d 70 74 79 0a 00                              empty..

0000304d <__c.4513>:
    304d:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000305c <__c.4511>:
    305c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    306c:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    307c:	20 66 6f 75 6e 64 0a 00                              found..

00003084 <__c.4509>:
    3084:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3094:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000030a3 <__c.4507>:
    30a3:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    30b3:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000030c3 <__c.4505>:
    30c3:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    30d3:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    30e3:	70 74 79 0a 00                                      pty..

000030e8 <__c.4497>:
    30e8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000030f6 <__c.4492>:
    30f6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003104 <__c.4490>:
    3104:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3114:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3124:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003134 <__c.4488>:
    3134:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3144:	73 0a 00                                            s..

00003147 <__c.4486>:
    3147:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3157:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3167:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003176 <__c.4484>:
    3176:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3186:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003192 <__c.4482>:
    3192:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    31a2:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000031ad <__c.4480>:
    31ad:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    31bd:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000031cd <__c.4463>:
    31cd:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000031db <__c.4458>:
    31db:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000031e9 <__c.4456>:
    31e9:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    31f9:	73 0a 00                                            s..

000031fc <__c.4454>:
    31fc:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    320c:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003214 <__c.4437>:
    3214:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003222 <__c.4434>:
    3222:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3232:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3242:	20 65 72 72 6f 72 0a 00                              error..

0000324a <__c.4426>:
    324a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003258 <__c.4424>:
    3258:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3268:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3278:	20 65 72 72 6f 72 0a 00                              error..

00003280 <__c.4421>:
    3280:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3290:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    32a0:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    32b0:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    32c0:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    32d0:	30 32 58 48 0a 00                                   02XH..

000032d6 <__c.4419>:
    32d6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32e6:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    32f6:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3306:	20 25 64 0a 00                                       %d..

0000330b <__c.4415>:
    330b:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

0000331b <__c.4413>:
    331b:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    332b:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    333b:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    334b:	30 78 45 30 31 33 0a 00                             0xE013..

00003353 <__c.4411>:
    3353:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3363:	6e 64 3a 25 73 0a 00                                nd:%s..

0000336a <__c.4409>:
    336a:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    337a:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003382 <__c.4385>:
    3382:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003390 <__c.4383>:
    3390:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    33a0:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033a9 <__c.4381>:
    33a9:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    33b9:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033c2 <__c.4379>:
    33c2:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    33d2:	20 20 25 34 64 0a 00                                  %4d..

000033d9 <__c.4377>:
    33d9:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    33e9:	20 20 20 25 73 0a 00                                   %s..

000033f0 <__c.4375>:
    33f0:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3400:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3410:	77 72 69 74 65 0a 00                                write..

00003417 <__c.4373>:
    3417:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3427:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3437:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003447 <__c.4371>:
    3447:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3457:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3467:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003476 <__c.4369>:
    3476:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3486:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3496:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000034a6 <__c.4367>:
    34a6:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34b6:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34c6:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000034d5 <__c.4365>:
    34d5:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34e5:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    34f5:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003503 <__c.4363>:
    3503:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3513:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3523:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3533:	79 0a 00                                            y..

00003536 <__c.4349>:
    3536:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003544 <__c.4347>:
    3544:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003552 <__c.4342>:
    3552:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003560 <__c.4325>:
    3560:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3570:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3580:	25 64 0a 00                                         %d..

00003584 <__c.4308>:
    3584:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3594:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    35a4:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    35b4:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000035bd <__c.4294>:
    35bd:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    35cd:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    35dd:	62 69 67 0a 00                                      big..

000035e2 <__c.4292>:
    35e2:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    35f2:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3602:	63 74 65 72 73 0a 00                                cters..

00003609 <__c.4285>:
    3609:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3619:	73 0a 00                                            s..

0000361c <__c.4283>:
    361c:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    362c:	73 0a 00                                            s..

0000362f <__c.4281>:
    362f:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    363f:	73 0a 00                                            s..

00003642 <__c.4279>:
    3642:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003653 <__c.4277>:
    3653:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003660 <__c.4275>:
    3660:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

0000366c <__c.4273>:
    366c:	0a 00                                               ..

0000366e <__c.4270>:
    366e:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    367e:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    368e:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

0000369e <__c.4268>:
    369e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    36ae:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    36be:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    36ce:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    36de:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

000036ea <__c.4265>:
    36ea:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    36fa:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    370a:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    371a:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

0000372a <__c.4263>:
    372a:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    373a:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003741 <__c.4253>:
    3741:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3751:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3761:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3771:	64 0a 00                                            d..

00003774 <__c.4251>:
    3774:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3784:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3794:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    37a4:	64 0a 00                                            d..

000037a7 <__c.4249>:
    37a7:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37b7:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    37c7:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    37d7:	69 6c 65 64 0a 00                                   iled..

000037dd <__c.4247>:
    37dd:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37ed:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37fd:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    380d:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

0000381c <__c.4234>:
    381c:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    382c:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    383c:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    384c:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    385c:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

0000386d <__c.4231>:
    386d:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    387d:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    388d:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003896 <__c.4229>:
    3896:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38a6:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38b6:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    38c6:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

000038ce <__c.4217>:
    38ce:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    38de:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    38ee:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    38fe:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    390e:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

0000391b <__c.4192>:
    391b:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    392b:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

0000393b <__c.4183>:
    393b:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    394b:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    395b:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    396b:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003975 <__c.4164>:
    3975:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003982 <__c.4159>:
    3982:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000398f <__c.4154>:
    398f:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000399c <__c.4146>:
    399c:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039a9 <__c.4144>:
    39a9:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    39b9:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    39c9:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    39d9:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    39e9:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    39f9:	25 6c 64 0a 00                                      %ld..

000039fe <__c.4128>:
    39fe:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a0e:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a1e:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a2a <__c.4126>:
    3a2a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a3a:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a4a:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003a55 <__c.4124>:
    3a55:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a65:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a75:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a85:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3a95:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003aa0 <__c.4122>:
    3aa0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ab0:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ac0:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ad0:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3ae0:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003aeb <__c.4120>:
    3aeb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3afb:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b0b:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b19 <__c.4118>:
    3b19:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b29:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b39:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3b49:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003b5a <__c.4116>:
    3b5a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b6a:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3b7a:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3b8a:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3b9a:	58 68 0a 00                                         Xh..

00003b9e <__c.4114>:
    3b9e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bae:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003bbf <__c.4108>:
    3bbf:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bcf:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3bdf:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003beb <__c.4106>:
    3beb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bfb:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c0b:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c1a <__c.4104>:
    3c1a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c2a:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3c3a:	25 6c 64 0a 00                                      %ld..

00003c3f <__c.4102>:
    3c3f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c4f:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3c5f:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3c6f:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003c78 <__c.4100>:
    3c78:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c88:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3c98:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ca8:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cb1 <__c.4098>:
    3cb1:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3cc1:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003cc9 <__c.4096>:
    3cc9:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cd9:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3ce9:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3cf9:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d02 <__c.4094>:
    3d02:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d12:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d21 <__c.4087>:
    3d21:	0a 00                                               ..

00003d23 <__c.4085>:
    3d23:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d33:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d3d <__c.4083>:
    3d3d:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3d4d:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003d59 <__c.4081>:
    3d59:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3d69:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d76 <__c.4079>:
    3d76:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3d86:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003d93 <__c.4077>:
    3d93:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3da3:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003db0 <__c.4075>:
    3db0:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3dc0:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003dcc <__c.4073>:
    3dcc:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3ddc:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003de8 <__c.4071>:
    3de8:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3df8:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e02 <__c.4069>:
    3e02:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e12:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e1c <__c.4067>:
    3e1c:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e2c:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e38 <__c.4065>:
    3e38:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3e48:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e54 <__c.4063>:
    3e54:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3e64:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e71 <__c.4061>:
    3e71:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3e81:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e8e <__c.4059>:
    3e8e:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3e9e:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003eaa <__c.4057>:
    3eaa:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3eba:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ec4 <__c.4055>:
    3ec4:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3ed4:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ee1 <__c.4053>:
    3ee1:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3ef1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003efe <__c.4051>:
    3efe:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f0e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f1b <__c.4049>:
    3f1b:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f2b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f38 <__c.4047>:
    3f38:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3f48:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003f55 <__c.4045>:
    3f55:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3f65:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f72 <__c.4043>:
    3f72:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3f82:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f8f <__c.4041>:
    3f8f:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3f9f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fac <__c.4039>:
    3fac:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3fbc:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003fc6 <__c.4037>:
    3fc6:	0a 25 73 0a 00                                      .%s..

00003fcb <__c.3914>:
    3fcb:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    3fdb:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    3feb:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    3ffb:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004008 <__c.3905>:
    4008:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4018:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4028:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4038:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004044 <__c.3896>:
    4044:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4054:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004065 <__c.3889>:
    4065:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4075:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000407e <__c.3883>:
    407e:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    408e:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    409e:	25 73 5d 0a 00                                      %s]..

000040a3 <__c.3871>:
    40a3:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    40b3:	6f 69 6e 74 65 72 0a 00                             ointer..

000040bb <__c.3866>:
    40bb:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    40cb:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    40db:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000040e4 <__c.3860>:
    40e4:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    40f4:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004105 <__c.3847>:
    4105:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4115:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4125:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4135:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4145:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4155:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4165:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4175:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4185:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4195:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    41a5:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    41b5:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    41c5:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    41d5:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    41e5:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    41f5:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4205:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4215:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4225:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4235:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4245:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4255:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4265:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4275:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4285:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    4295:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    42a5:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    42b5:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    42c5:	67 0a 0a 00                                         g...

000042c9 <__c.3845>:
    42c9:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

000042d3 <__c.4586>:
    42d3:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    42e3:	53 4b 0a 00                                         SK..

000042e7 <__c.4584>:
    42e7:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    42f7:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004301 <__c.4582>:
    4301:	25 2d 31 36 73 00                                   %-16s.

00004307 <__c.4580>:
    4307:	25 2d 31 36 73 00                                   %-16s.

0000430d <__c.4578>:
    430d:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

0000431e <__c.4576>:
    431e:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    432e:	30 34 78 48 0a 00                                   04xH..

00004334 <__c.4574>:
    4334:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4344:	64 6f 6e 65 0a 00                                   done..

0000434a <__c.4572>:
    434a:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    435a:	6f 6e 65 0a 00                                      one..

0000435f <__c.4570>:
    435f:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    436f:	61 6c 69 7a 65 64 0a 00                             alized..

00004377 <__c.4568>:
    4377:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4387:	0a 00                                               ..

00004389 <__c.4566>:
    4389:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4399:	7a 65 64 0a 00                                      zed..

0000439e <__c.4564>:
    439e:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    43ae:	69 7a 65 64 0a 00                                   ized..

000043b4 <__c.4562>:
    43b4:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000043c5 <__c.4560>:
    43c5:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    43d5:	20 73 74 61 72 74 0a 00                              start..

000043dd <__c.4558>:
    43dd:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    43ed:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    43fd:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000440b <__c.4556>:
    440b:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000441a <__c.4554>:
    441a:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    442a:	0a 00                                               ..

0000442c <__c.4552>:
    442c:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    443c:	20 62 75 73 0a 00                                    bus..

00004442 <__c.4550>:
    4442:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    4452:	20 62 75 73 0a 00                                    bus..

00004458 <__c.4548>:
    4458:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4468:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004472 <__c.4546>:
    4472:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4482:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000448c <__c.4544>:
    448c:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    449c:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    44ac:	35 64 69 73 6b 0a 00                                5disk..

000044b3 <__c.4542>:
    44b3:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000044c3 <__c.4540>:
    44c3:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    44d3:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000044e0 <__c.4538>:
    44e0:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    44f0:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000044ff <__c.4536>:
    44ff:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    450f:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    451f:	3a 20 25 6c 64 0a 00                                : %ld..

00004526 <__c.4534>:
    4526:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004537 <__c.4532>:
    4537:	53 74 61 72 74 0a 00                                Start..

0000453e <__c.4523>:
    453e:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

0000454a <__c.4521>:
    454a:	4f 4b 0a 00                                         OK..

0000454e <__c.4518>:
    454e:	0a 3e 00                                            .>.

00004551 <__c.4507>:
    4551:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4561:	42 42 0a 68 65 6c 70 0a 6d 65 6d 0a 72 65 73 65     BB.help.mem.rese
    4571:	74 0a 73 65 74 64 61 74 65 0a 74 69 6d 65 0a 0a     t.setdate.time..
	...

00004582 <__c.4500>:
    4582:	25 2d 31 36 73 00                                   %-16s.

00004588 <__c.4498>:
    4588:	25 2d 31 36 73 00                                   %-16s.

0000458e <__c.4491>:
    458e:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    459e:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000045a8 <__c.4489>:
    45a8:	25 2d 31 36 73 00                                   %-16s.

000045ae <__c.4487>:
    45ae:	25 2d 31 36 73 00                                   %-16s.

000045b4 <__c.4485>:
    45b4:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    45c4:	69 6c 65 64 0a 00                                   iled..

000045ca <__c.4483>:
    45ca:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    45da:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000045e8 <__c.4477>:
    45e8:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45f8:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004602 <__c.4471>:
    4602:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4612:	3a 25 30 32 64 00                                   :%02d.

00004618 <__c.4457>:
    4618:	0a 00                                               ..

0000461a <__c.4455>:
    461a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    462a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004634 <__c.4453>:
    4634:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4644:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000464e <__c.4451>:
    464e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    465e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    466e:	35 64 69 73 6b 0a 00                                5disk..

00004675 <__c.4449>:
    4675:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004685 <__c.4447>:
    4685:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4695:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000046a2 <__c.4445>:
    46a2:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    46b2:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000046c1 <__c.4443>:
    46c1:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    46d1:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    46e1:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000046f2 <__ctors_end>:
    46f2:	11 24       	eor	r1, r1
    46f4:	1f be       	out	0x3f, r1	; 63
    46f6:	cf ef       	ldi	r28, 0xFF	; 255
    46f8:	d0 e4       	ldi	r29, 0x40	; 64
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	cd bf       	out	0x3d, r28	; 61

000046fe <__do_copy_data>:
    46fe:	17 e1       	ldi	r17, 0x17	; 23
    4700:	a0 e0       	ldi	r26, 0x00	; 0
    4702:	b1 e0       	ldi	r27, 0x01	; 1
    4704:	e8 e0       	ldi	r30, 0x08	; 8
    4706:	fb ec       	ldi	r31, 0xCB	; 203
    4708:	01 e0       	ldi	r16, 0x01	; 1
    470a:	0b bf       	out	0x3b, r16	; 59
    470c:	02 c0       	rjmp	.+4      	; 0x4712 <__do_copy_data+0x14>
    470e:	07 90       	elpm	r0, Z+
    4710:	0d 92       	st	X+, r0
    4712:	a0 34       	cpi	r26, 0x40	; 64
    4714:	b1 07       	cpc	r27, r17
    4716:	d9 f7       	brne	.-10     	; 0x470e <__do_copy_data+0x10>

00004718 <__do_clear_bss>:
    4718:	21 e2       	ldi	r18, 0x21	; 33
    471a:	a0 e4       	ldi	r26, 0x40	; 64
    471c:	b7 e1       	ldi	r27, 0x17	; 23
    471e:	01 c0       	rjmp	.+2      	; 0x4722 <.do_clear_bss_start>

00004720 <.do_clear_bss_loop>:
    4720:	1d 92       	st	X+, r1

00004722 <.do_clear_bss_start>:
    4722:	a0 3a       	cpi	r26, 0xA0	; 160
    4724:	b2 07       	cpc	r27, r18
    4726:	e1 f7       	brne	.-8      	; 0x4720 <.do_clear_bss_loop>
    4728:	0e 94 f9 de 	call	0x1bdf2	; 0x1bdf2 <main>
    472c:	0c 94 82 e5 	jmp	0x1cb04	; 0x1cb04 <_exit>

00004730 <__bad_interrupt>:
    4730:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004734 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4734:	e8 2f       	mov	r30, r24
    4736:	e6 95       	lsr	r30
    4738:	e6 95       	lsr	r30
    473a:	e6 95       	lsr	r30
    473c:	93 e0       	ldi	r25, 0x03	; 3
    473e:	e9 9f       	mul	r30, r25
    4740:	f0 01       	movw	r30, r0
    4742:	11 24       	eor	r1, r1
    4744:	32 a1       	ldd	r19, Z+34	; 0x22
    4746:	28 2f       	mov	r18, r24
    4748:	27 70       	andi	r18, 0x07	; 7
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	01 c0       	rjmp	.+2      	; 0x4752 <chip_select+0x1e>
    4750:	88 0f       	add	r24, r24
    4752:	2a 95       	dec	r18
    4754:	ea f7       	brpl	.-6      	; 0x4750 <chip_select+0x1c>
    4756:	98 2f       	mov	r25, r24
    4758:	90 95       	com	r25
    475a:	93 23       	and	r25, r19
    475c:	92 a3       	std	Z+34, r25	; 0x22
    475e:	91 a1       	ldd	r25, Z+33	; 0x21
    4760:	89 2b       	or	r24, r25
    4762:	81 a3       	std	Z+33, r24	; 0x21
    4764:	08 95       	ret

00004766 <chip_deselect>:
    4766:	e8 2f       	mov	r30, r24
    4768:	e6 95       	lsr	r30
    476a:	e6 95       	lsr	r30
    476c:	e6 95       	lsr	r30
    476e:	93 e0       	ldi	r25, 0x03	; 3
    4770:	e9 9f       	mul	r30, r25
    4772:	f0 01       	movw	r30, r0
    4774:	11 24       	eor	r1, r1
    4776:	32 a1       	ldd	r19, Z+34	; 0x22
    4778:	28 2f       	mov	r18, r24
    477a:	27 70       	andi	r18, 0x07	; 7
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	01 c0       	rjmp	.+2      	; 0x4784 <chip_deselect+0x1e>
    4782:	88 0f       	add	r24, r24
    4784:	2a 95       	dec	r18
    4786:	ea f7       	brpl	.-6      	; 0x4782 <chip_deselect+0x1c>
    4788:	93 2f       	mov	r25, r19
    478a:	98 2b       	or	r25, r24
    478c:	92 a3       	std	Z+34, r25	; 0x22
    478e:	91 a1       	ldd	r25, Z+33	; 0x21
    4790:	89 2b       	or	r24, r25
    4792:	81 a3       	std	Z+33, r24	; 0x21
    4794:	08 95       	ret

00004796 <chip_select_init>:
    4796:	e7 cf       	rjmp	.-50     	; 0x4766 <chip_deselect>
    4798:	08 95       	ret

0000479a <spi_end>:
    479a:	cf 93       	push	r28
    479c:	ad b7       	in	r26, 0x3d	; 61
    479e:	be b7       	in	r27, 0x3e	; 62
    47a0:	17 97       	sbiw	r26, 0x07	; 7
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	be bf       	out	0x3e, r27	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	ad bf       	out	0x3d, r26	; 61
    47ac:	c8 2f       	mov	r28, r24
    47ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    47b2:	8c 17       	cp	r24, r28
    47b4:	99 f0       	breq	.+38     	; 0x47dc <spi_end+0x42>
    47b6:	8f 3f       	cpi	r24, 0xFF	; 255
    47b8:	89 f0       	breq	.+34     	; 0x47dc <spi_end+0x42>
    47ba:	2c 2f       	mov	r18, r28
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	ed b7       	in	r30, 0x3d	; 61
    47c0:	fe b7       	in	r31, 0x3e	; 62
    47c2:	37 83       	std	Z+7, r19	; 0x07
    47c4:	26 83       	std	Z+6, r18	; 0x06
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	95 83       	std	Z+5, r25	; 0x05
    47ca:	84 83       	std	Z+4, r24	; 0x04
    47cc:	82 ec       	ldi	r24, 0xC2	; 194
    47ce:	91 e0       	ldi	r25, 0x01	; 1
    47d0:	a0 e0       	ldi	r26, 0x00	; 0
    47d2:	81 83       	std	Z+1, r24	; 0x01
    47d4:	92 83       	std	Z+2, r25	; 0x02
    47d6:	a3 83       	std	Z+3, r26	; 0x03
    47d8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    47dc:	8c 2f       	mov	r24, r28
    47de:	c3 df       	rcall	.-122    	; 0x4766 <chip_deselect>
    47e0:	8f ef       	ldi	r24, 0xFF	; 255
    47e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    47e6:	ad b7       	in	r26, 0x3d	; 61
    47e8:	be b7       	in	r27, 0x3e	; 62
    47ea:	17 96       	adiw	r26, 0x07	; 7
    47ec:	0f b6       	in	r0, 0x3f	; 63
    47ee:	f8 94       	cli
    47f0:	be bf       	out	0x3e, r27	; 62
    47f2:	0f be       	out	0x3f, r0	; 63
    47f4:	ad bf       	out	0x3d, r26	; 61
    47f6:	cf 91       	pop	r28
    47f8:	08 95       	ret

000047fa <spi_TX_buffer>:
    47fa:	cc c4       	rjmp	.+2456   	; 0x5194 <SPI0_TX>
    47fc:	08 95       	ret

000047fe <spi_RX_buffer>:
    47fe:	f4 c4       	rjmp	.+2536   	; 0x51e8 <SPI0_RX>
    4800:	08 95       	ret

00004802 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4802:	a1 e0       	ldi	r26, 0x01	; 1
    4804:	b0 e0       	ldi	r27, 0x00	; 0
    4806:	e7 e0       	ldi	r30, 0x07	; 7
    4808:	f4 e2       	ldi	r31, 0x24	; 36
    480a:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    480e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4810:	61 e0       	ldi	r22, 0x01	; 1
    4812:	70 e0       	ldi	r23, 0x00	; 0
    4814:	ce 01       	movw	r24, r28
    4816:	01 96       	adiw	r24, 0x01	; 1
    4818:	bd d4       	rcall	.+2426   	; 0x5194 <SPI0_TX>
#endif
}
    481a:	21 96       	adiw	r28, 0x01	; 1
    481c:	e2 e0       	ldi	r30, 0x02	; 2
    481e:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00004822 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4822:	cf 92       	push	r12
    4824:	df 92       	push	r13
    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	6b 01       	movw	r12, r22
    482c:	7c 01       	movw	r14, r24
    482e:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4830:	9a df       	rcall	.-204    	; 0x4766 <chip_deselect>
    _cs_pin = 0xff;
    4832:	8f ef       	ldi	r24, 0xFF	; 255
    4834:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4838:	c7 01       	movw	r24, r14
    483a:	b6 01       	movw	r22, r12
    483c:	7e d4       	rcall	.+2300   	; 0x513a <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    483e:	80 e0       	ldi	r24, 0x00	; 0
    4840:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4842:	3b d4       	rcall	.+2166   	; 0x50ba <SPI0_Mode>
    4844:	8f ef       	ldi	r24, 0xFF	; 255
    4846:	dd df       	rcall	.-70     	; 0x4802 <spi_TX>
    _spi_clock = clock;
    4848:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    484c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4850:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4854:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4858:	ff 90       	pop	r15
    485a:	ef 90       	pop	r14
    485c:	df 90       	pop	r13
    485e:	cf 90       	pop	r12
    4860:	08 95       	ret

00004862 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4862:	cf 92       	push	r12
    4864:	df 92       	push	r13
    4866:	ef 92       	push	r14
    4868:	ff 92       	push	r15
    486a:	cf 93       	push	r28
    486c:	df 93       	push	r29
    486e:	ad b7       	in	r26, 0x3d	; 61
    4870:	be b7       	in	r27, 0x3e	; 62
    4872:	17 97       	sbiw	r26, 0x07	; 7
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	be bf       	out	0x3e, r27	; 62
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	ad bf       	out	0x3d, r26	; 61
    487e:	6b 01       	movw	r12, r22
    4880:	7c 01       	movw	r14, r24
    4882:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4884:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4888:	8f 3f       	cpi	r24, 0xFF	; 255
    488a:	79 f0       	breq	.+30     	; 0x48aa <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    488c:	ed b7       	in	r30, 0x3d	; 61
    488e:	fe b7       	in	r31, 0x3e	; 62
    4890:	46 83       	std	Z+6, r20	; 0x06
    4892:	d7 83       	std	Z+7, r29	; 0x07
    4894:	90 e0       	ldi	r25, 0x00	; 0
    4896:	95 83       	std	Z+5, r25	; 0x05
    4898:	84 83       	std	Z+4, r24	; 0x04
    489a:	80 ee       	ldi	r24, 0xE0	; 224
    489c:	91 e0       	ldi	r25, 0x01	; 1
    489e:	a0 e0       	ldi	r26, 0x00	; 0
    48a0:	81 83       	std	Z+1, r24	; 0x01
    48a2:	92 83       	std	Z+2, r25	; 0x02
    48a4:	a3 83       	std	Z+3, r26	; 0x03
    48a6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    48aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    48ae:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    48b2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    48b6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    48ba:	8c 15       	cp	r24, r12
    48bc:	9d 05       	cpc	r25, r13
    48be:	ae 05       	cpc	r26, r14
    48c0:	bf 05       	cpc	r27, r15
    48c2:	21 f0       	breq	.+8      	; 0x48cc <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    48c4:	ae 01       	movw	r20, r28
    48c6:	c7 01       	movw	r24, r14
    48c8:	b6 01       	movw	r22, r12
    48ca:	ab df       	rcall	.-170    	; 0x4822 <spi_init>
    }

    chip_select(pin);
    48cc:	8c 2f       	mov	r24, r28
    48ce:	32 df       	rcall	.-412    	; 0x4734 <chip_select>
    _cs_pin = pin;
    48d0:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    48d4:	ad b7       	in	r26, 0x3d	; 61
    48d6:	be b7       	in	r27, 0x3e	; 62
    48d8:	17 96       	adiw	r26, 0x07	; 7
    48da:	0f b6       	in	r0, 0x3f	; 63
    48dc:	f8 94       	cli
    48de:	be bf       	out	0x3e, r27	; 62
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	ad bf       	out	0x3d, r26	; 61
    48e4:	df 91       	pop	r29
    48e6:	cf 91       	pop	r28
    48e8:	ff 90       	pop	r15
    48ea:	ef 90       	pop	r14
    48ec:	df 90       	pop	r13
    48ee:	cf 90       	pop	r12
    48f0:	08 95       	ret

000048f2 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    48f2:	a1 e0       	ldi	r26, 0x01	; 1
    48f4:	b0 e0       	ldi	r27, 0x00	; 0
    48f6:	ef e7       	ldi	r30, 0x7F	; 127
    48f8:	f4 e2       	ldi	r31, 0x24	; 36
    48fa:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    48fe:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4900:	61 e0       	ldi	r22, 0x01	; 1
    4902:	70 e0       	ldi	r23, 0x00	; 0
    4904:	ce 01       	movw	r24, r28
    4906:	01 96       	adiw	r24, 0x01	; 1
    4908:	59 d4       	rcall	.+2226   	; 0x51bc <SPI0_TXRX>
#endif
    return(data);
}
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	21 96       	adiw	r28, 0x01	; 1
    490e:	e2 e0       	ldi	r30, 0x02	; 2
    4910:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00004914 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4914:	80 93 40 17 	sts	0x1740, r24	; 0x801740 <__data_end>
    GPIO_PIN_HI(LED2);
    4918:	2c 9a       	sbi	0x05, 4	; 5
    491a:	24 9a       	sbi	0x04, 4	; 4
    491c:	08 95       	ret

0000491e <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    491e:	10 92 40 17 	sts	0x1740, r1	; 0x801740 <__data_end>
    GPIO_PIN_LOW(LED2);
    4922:	2c 98       	cbi	0x05, 4	; 5
    4924:	24 9a       	sbi	0x04, 4	; 4
    4926:	08 95       	ret

00004928 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4928:	a2 e0       	ldi	r26, 0x02	; 2
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	ea e9       	ldi	r30, 0x9A	; 154
    492e:	f4 e2       	ldi	r31, 0x24	; 36
    4930:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4934:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <__brkval>
    4938:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <__brkval+0x1>
    493c:	21 15       	cp	r18, r1
    493e:	31 05       	cpc	r19, r1
    4940:	11 f4       	brne	.+4      	; 0x4946 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4942:	20 ea       	ldi	r18, 0xA0	; 160
    4944:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4946:	ce 01       	movw	r24, r28
    4948:	01 96       	adiw	r24, 0x01	; 1
    494a:	82 1b       	sub	r24, r18
    494c:	93 0b       	sbc	r25, r19
    494e:	22 96       	adiw	r28, 0x02	; 2
    4950:	e2 e0       	ldi	r30, 0x02	; 2
    4952:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00004956 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4956:	a9 e0       	ldi	r26, 0x09	; 9
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	e1 eb       	ldi	r30, 0xB1	; 177
    495c:	f4 e2       	ldi	r31, 0x24	; 36
    495e:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4962:	e2 df       	rcall	.-60     	; 0x4928 <freeRam>
    4964:	99 87       	std	Y+9, r25	; 0x09
    4966:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4968:	ed b7       	in	r30, 0x3d	; 61
    496a:	fe b7       	in	r31, 0x3e	; 62
    496c:	95 83       	std	Z+5, r25	; 0x05
    496e:	84 83       	std	Z+4, r24	; 0x04
    4970:	87 e0       	ldi	r24, 0x07	; 7
    4972:	93 e0       	ldi	r25, 0x03	; 3
    4974:	a0 e0       	ldi	r26, 0x00	; 0
    4976:	81 83       	std	Z+1, r24	; 0x01
    4978:	92 83       	std	Z+2, r25	; 0x02
    497a:	a3 83       	std	Z+3, r26	; 0x03
    497c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4980:	8f ef       	ldi	r24, 0xFF	; 255
    4982:	90 e4       	ldi	r25, 0x40	; 64
    4984:	ed b7       	in	r30, 0x3d	; 61
    4986:	fe b7       	in	r31, 0x3e	; 62
    4988:	95 83       	std	Z+5, r25	; 0x05
    498a:	84 83       	std	Z+4, r24	; 0x04
    498c:	84 ef       	ldi	r24, 0xF4	; 244
    498e:	92 e0       	ldi	r25, 0x02	; 2
    4990:	a0 e0       	ldi	r26, 0x00	; 0
    4992:	81 83       	std	Z+1, r24	; 0x01
    4994:	92 83       	std	Z+2, r25	; 0x02
    4996:	a3 83       	std	Z+3, r26	; 0x03
    4998:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    499c:	ce 01       	movw	r24, r28
    499e:	08 96       	adiw	r24, 0x08	; 8
    49a0:	ed b7       	in	r30, 0x3d	; 61
    49a2:	fe b7       	in	r31, 0x3e	; 62
    49a4:	95 83       	std	Z+5, r25	; 0x05
    49a6:	84 83       	std	Z+4, r24	; 0x04
    49a8:	81 ee       	ldi	r24, 0xE1	; 225
    49aa:	92 e0       	ldi	r25, 0x02	; 2
    49ac:	a0 e0       	ldi	r26, 0x00	; 0
    49ae:	81 83       	std	Z+1, r24	; 0x01
    49b0:	92 83       	std	Z+2, r25	; 0x02
    49b2:	a3 83       	std	Z+3, r26	; 0x03
    49b4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    49b8:	80 ea       	ldi	r24, 0xA0	; 160
    49ba:	91 e2       	ldi	r25, 0x21	; 33
    49bc:	ed b7       	in	r30, 0x3d	; 61
    49be:	fe b7       	in	r31, 0x3e	; 62
    49c0:	97 83       	std	Z+7, r25	; 0x07
    49c2:	86 83       	std	Z+6, r24	; 0x06
    49c4:	80 e4       	ldi	r24, 0x40	; 64
    49c6:	97 e1       	ldi	r25, 0x17	; 23
    49c8:	95 83       	std	Z+5, r25	; 0x05
    49ca:	84 83       	std	Z+4, r24	; 0x04
    49cc:	83 ec       	ldi	r24, 0xC3	; 195
    49ce:	92 e0       	ldi	r25, 0x02	; 2
    49d0:	a0 e0       	ldi	r26, 0x00	; 0
    49d2:	81 83       	std	Z+1, r24	; 0x01
    49d4:	92 83       	std	Z+2, r25	; 0x02
    49d6:	a3 83       	std	Z+3, r26	; 0x03
    49d8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    49dc:	80 e4       	ldi	r24, 0x40	; 64
    49de:	97 e1       	ldi	r25, 0x17	; 23
    49e0:	ed b7       	in	r30, 0x3d	; 61
    49e2:	fe b7       	in	r31, 0x3e	; 62
    49e4:	97 83       	std	Z+7, r25	; 0x07
    49e6:	86 83       	std	Z+6, r24	; 0x06
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	91 e0       	ldi	r25, 0x01	; 1
    49ec:	95 83       	std	Z+5, r25	; 0x05
    49ee:	84 83       	std	Z+4, r24	; 0x04
    49f0:	85 ea       	ldi	r24, 0xA5	; 165
    49f2:	92 e0       	ldi	r25, 0x02	; 2
    49f4:	a0 e0       	ldi	r26, 0x00	; 0
    49f6:	81 83       	std	Z+1, r24	; 0x01
    49f8:	92 83       	std	Z+2, r25	; 0x02
    49fa:	a3 83       	std	Z+3, r26	; 0x03
    49fc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4a00:	80 e0       	ldi	r24, 0x00	; 0
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	ed b7       	in	r30, 0x3d	; 61
    4a06:	fe b7       	in	r31, 0x3e	; 62
    4a08:	97 83       	std	Z+7, r25	; 0x07
    4a0a:	86 83       	std	Z+6, r24	; 0x06
    4a0c:	80 ea       	ldi	r24, 0xA0	; 160
    4a0e:	91 e2       	ldi	r25, 0x21	; 33
    4a10:	95 83       	std	Z+5, r25	; 0x05
    4a12:	84 83       	std	Z+4, r24	; 0x04
    4a14:	87 e8       	ldi	r24, 0x87	; 135
    4a16:	92 e0       	ldi	r25, 0x02	; 2
    4a18:	a0 e0       	ldi	r26, 0x00	; 0
    4a1a:	81 83       	std	Z+1, r24	; 0x01
    4a1c:	92 83       	std	Z+2, r25	; 0x02
    4a1e:	a3 83       	std	Z+3, r26	; 0x03
    4a20:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4a24:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4a28:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4a2c:	ed b7       	in	r30, 0x3d	; 61
    4a2e:	fe b7       	in	r31, 0x3e	; 62
    4a30:	97 83       	std	Z+7, r25	; 0x07
    4a32:	86 83       	std	Z+6, r24	; 0x06
    4a34:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4a38:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4a3c:	95 83       	std	Z+5, r25	; 0x05
    4a3e:	84 83       	std	Z+4, r24	; 0x04
    4a40:	89 e6       	ldi	r24, 0x69	; 105
    4a42:	92 e0       	ldi	r25, 0x02	; 2
    4a44:	a0 e0       	ldi	r26, 0x00	; 0
    4a46:	81 83       	std	Z+1, r24	; 0x01
    4a48:	92 83       	std	Z+2, r25	; 0x02
    4a4a:	a3 83       	std	Z+3, r26	; 0x03
    4a4c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4a50:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <__brkval>
    4a54:	90 91 9d 21 	lds	r25, 0x219D	; 0x80219d <__brkval+0x1>
    4a58:	ed b7       	in	r30, 0x3d	; 61
    4a5a:	fe b7       	in	r31, 0x3e	; 62
    4a5c:	95 83       	std	Z+5, r25	; 0x05
    4a5e:	84 83       	std	Z+4, r24	; 0x04
    4a60:	85 e5       	ldi	r24, 0x55	; 85
    4a62:	92 e0       	ldi	r25, 0x02	; 2
    4a64:	a0 e0       	ldi	r26, 0x00	; 0
    4a66:	81 83       	std	Z+1, r24	; 0x01
    4a68:	92 83       	std	Z+2, r25	; 0x02
    4a6a:	a3 83       	std	Z+3, r26	; 0x03
    4a6c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

}
    4a70:	29 96       	adiw	r28, 0x09	; 9
    4a72:	e2 e0       	ldi	r30, 0x02	; 2
    4a74:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00004a78 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4a78:	ef 92       	push	r14
    4a7a:	ff 92       	push	r15
    4a7c:	0f 93       	push	r16
    4a7e:	1f 93       	push	r17
    4a80:	cf 93       	push	r28
    4a82:	df 93       	push	r29
    4a84:	ad b7       	in	r26, 0x3d	; 61
    4a86:	be b7       	in	r27, 0x3e	; 62
    4a88:	17 97       	sbiw	r26, 0x07	; 7
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	f8 94       	cli
    4a8e:	be bf       	out	0x3e, r27	; 62
    4a90:	0f be       	out	0x3f, r0	; 63
    4a92:	ad bf       	out	0x3d, r26	; 61
    4a94:	8c 01       	movw	r16, r24
    4a96:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4a98:	0e 94 40 e4 	call	0x1c880	; 0x1c880 <calloc>
    4a9c:	ec 01       	movw	r28, r24
    if(!p)
    4a9e:	89 2b       	or	r24, r25
    4aa0:	71 f4       	brne	.+28     	; 0x4abe <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4aa2:	ed b7       	in	r30, 0x3d	; 61
    4aa4:	fe b7       	in	r31, 0x3e	; 62
    4aa6:	f7 82       	std	Z+7, r15	; 0x07
    4aa8:	e6 82       	std	Z+6, r14	; 0x06
    4aaa:	15 83       	std	Z+5, r17	; 0x05
    4aac:	04 83       	std	Z+4, r16	; 0x04
    4aae:	8a e3       	ldi	r24, 0x3A	; 58
    4ab0:	92 e0       	ldi	r25, 0x02	; 2
    4ab2:	a0 e0       	ldi	r26, 0x00	; 0
    4ab4:	81 83       	std	Z+1, r24	; 0x01
    4ab6:	92 83       	std	Z+2, r25	; 0x02
    4ab8:	a3 83       	std	Z+3, r26	; 0x03
    4aba:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
    return(p);
}
    4abe:	ce 01       	movw	r24, r28
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
    4ac4:	27 96       	adiw	r28, 0x07	; 7
    4ac6:	e6 e0       	ldi	r30, 0x06	; 6
    4ac8:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00004acc <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4acc:	0f 93       	push	r16
    4ace:	1f 93       	push	r17
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    4ad4:	00 d0       	rcall	.+0      	; 0x4ad6 <safemalloc+0xa>
    4ad6:	00 d0       	rcall	.+0      	; 0x4ad8 <safemalloc+0xc>
    4ad8:	1f 92       	push	r1
    4ada:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4adc:	61 e0       	ldi	r22, 0x01	; 1
    4ade:	70 e0       	ldi	r23, 0x00	; 0
    4ae0:	0e 94 40 e4 	call	0x1c880	; 0x1c880 <calloc>
    4ae4:	ec 01       	movw	r28, r24
    if(!p)
    4ae6:	89 2b       	or	r24, r25
    4ae8:	61 f4       	brne	.+24     	; 0x4b02 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4aea:	ed b7       	in	r30, 0x3d	; 61
    4aec:	fe b7       	in	r31, 0x3e	; 62
    4aee:	15 83       	std	Z+5, r17	; 0x05
    4af0:	04 83       	std	Z+4, r16	; 0x04
    4af2:	82 e2       	ldi	r24, 0x22	; 34
    4af4:	92 e0       	ldi	r25, 0x02	; 2
    4af6:	a0 e0       	ldi	r26, 0x00	; 0
    4af8:	81 83       	std	Z+1, r24	; 0x01
    4afa:	92 83       	std	Z+2, r25	; 0x02
    4afc:	a3 83       	std	Z+3, r26	; 0x03
    4afe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
    return(p);
}
    4b02:	ce 01       	movw	r24, r28
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	25 96       	adiw	r28, 0x05	; 5
    4b0a:	e4 e0       	ldi	r30, 0x04	; 4
    4b0c:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00004b10 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4b10:	ad b7       	in	r26, 0x3d	; 61
    4b12:	be b7       	in	r27, 0x3e	; 62
    4b14:	17 97       	sbiw	r26, 0x07	; 7
    4b16:	0f b6       	in	r0, 0x3f	; 63
    4b18:	f8 94       	cli
    4b1a:	be bf       	out	0x3e, r27	; 62
    4b1c:	0f be       	out	0x3f, r0	; 63
    4b1e:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4b20:	00 97       	sbiw	r24, 0x00	; 0
    4b22:	11 f1       	breq	.+68     	; 0x4b68 <safefree+0x58>
        return;

    if(__brkval)
    4b24:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <__brkval>
    4b28:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <__brkval+0x1>
    4b2c:	21 15       	cp	r18, r1
    4b2e:	31 05       	cpc	r19, r1
    4b30:	11 f4       	brne	.+4      	; 0x4b36 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4b32:	20 ea       	ldi	r18, 0xA0	; 160
    4b34:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4b36:	41 e2       	ldi	r20, 0x21	; 33
    4b38:	80 3a       	cpi	r24, 0xA0	; 160
    4b3a:	94 07       	cpc	r25, r20
    4b3c:	30 f0       	brcs	.+12     	; 0x4b4a <safefree+0x3a>
    4b3e:	28 17       	cp	r18, r24
    4b40:	39 07       	cpc	r19, r25
    4b42:	18 f0       	brcs	.+6      	; 0x4b4a <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4b44:	0e 94 f2 e4 	call	0x1c9e4	; 0x1c9e4 <free>
        return;
    4b48:	0f c0       	rjmp	.+30     	; 0x4b68 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4b4a:	ed b7       	in	r30, 0x3d	; 61
    4b4c:	fe b7       	in	r31, 0x3e	; 62
    4b4e:	37 83       	std	Z+7, r19	; 0x07
    4b50:	26 83       	std	Z+6, r18	; 0x06
    4b52:	95 83       	std	Z+5, r25	; 0x05
    4b54:	84 83       	std	Z+4, r24	; 0x04
    4b56:	8d ef       	ldi	r24, 0xFD	; 253
    4b58:	91 e0       	ldi	r25, 0x01	; 1
    4b5a:	a0 e0       	ldi	r26, 0x00	; 0
    4b5c:	81 83       	std	Z+1, r24	; 0x01
    4b5e:	92 83       	std	Z+2, r25	; 0x02
    4b60:	a3 83       	std	Z+3, r26	; 0x03
    4b62:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    PrintFree();
    4b66:	f7 de       	rcall	.-530    	; 0x4956 <PrintFree>
}
    4b68:	ad b7       	in	r26, 0x3d	; 61
    4b6a:	be b7       	in	r27, 0x3e	; 62
    4b6c:	17 96       	adiw	r26, 0x07	; 7
    4b6e:	0f b6       	in	r0, 0x3f	; 63
    4b70:	f8 94       	cli
    4b72:	be bf       	out	0x3e, r27	; 62
    4b74:	0f be       	out	0x3f, r0	; 63
    4b76:	ad bf       	out	0x3d, r26	; 61
    4b78:	08 95       	ret

00004b7a <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4b7a:	64 36       	cpi	r22, 0x64	; 100
    4b7c:	71 05       	cpc	r23, r1
    4b7e:	81 05       	cpc	r24, r1
    4b80:	91 05       	cpc	r25, r1
    4b82:	58 f0       	brcs	.+22     	; 0x4b9a <delayus+0x20>
    {
        us -= 100U;
    4b84:	64 56       	subi	r22, 0x64	; 100
    4b86:	71 09       	sbc	r23, r1
    4b88:	81 09       	sbc	r24, r1
    4b8a:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4b8c:	e3 ef       	ldi	r30, 0xF3	; 243
    4b8e:	f1 e0       	ldi	r31, 0x01	; 1
    4b90:	31 97       	sbiw	r30, 0x01	; 1
    4b92:	f1 f7       	brne	.-4      	; 0x4b90 <delayus+0x16>
    4b94:	00 c0       	rjmp	.+0      	; 0x4b96 <delayus+0x1c>
    4b96:	00 00       	nop
    4b98:	f0 cf       	rjmp	.-32     	; 0x4b7a <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4b9a:	6a 30       	cpi	r22, 0x0A	; 10
    4b9c:	71 05       	cpc	r23, r1
    4b9e:	81 05       	cpc	r24, r1
    4ba0:	91 05       	cpc	r25, r1
    4ba2:	48 f0       	brcs	.+18     	; 0x4bb6 <delayus+0x3c>
    {
        us -= 10U;
    4ba4:	6a 50       	subi	r22, 0x0A	; 10
    4ba6:	71 09       	sbc	r23, r1
    4ba8:	81 09       	sbc	r24, r1
    4baa:	91 09       	sbc	r25, r1
    4bac:	f2 e4       	ldi	r31, 0x42	; 66
    4bae:	fa 95       	dec	r31
    4bb0:	f1 f7       	brne	.-4      	; 0x4bae <delayus+0x34>
    4bb2:	00 c0       	rjmp	.+0      	; 0x4bb4 <delayus+0x3a>
    4bb4:	f2 cf       	rjmp	.-28     	; 0x4b9a <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4bb6:	61 15       	cp	r22, r1
    4bb8:	71 05       	cpc	r23, r1
    4bba:	81 05       	cpc	r24, r1
    4bbc:	91 05       	cpc	r25, r1
    4bbe:	49 f0       	breq	.+18     	; 0x4bd2 <delayus+0x58>
    {
        --us;
    4bc0:	61 50       	subi	r22, 0x01	; 1
    4bc2:	71 09       	sbc	r23, r1
    4bc4:	81 09       	sbc	r24, r1
    4bc6:	91 09       	sbc	r25, r1
    4bc8:	26 e0       	ldi	r18, 0x06	; 6
    4bca:	2a 95       	dec	r18
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <delayus+0x50>
    4bce:	00 c0       	rjmp	.+0      	; 0x4bd0 <delayus+0x56>
    4bd0:	f2 cf       	rjmp	.-28     	; 0x4bb6 <delayus+0x3c>
        _delay_us(1);
    }
}
    4bd2:	08 95       	ret

00004bd4 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4bd4:	61 15       	cp	r22, r1
    4bd6:	71 05       	cpc	r23, r1
    4bd8:	81 05       	cpc	r24, r1
    4bda:	91 05       	cpc	r25, r1
    4bdc:	09 f4       	brne	.+2      	; 0x4be0 <delayms+0xc>
    4bde:	41 c0       	rjmp	.+130    	; 0x4c62 <delayms+0x8e>
    4be0:	e3 ef       	ldi	r30, 0xF3	; 243
    4be2:	f1 e0       	ldi	r31, 0x01	; 1
    4be4:	31 97       	sbiw	r30, 0x01	; 1
    4be6:	f1 f7       	brne	.-4      	; 0x4be4 <delayms+0x10>
    4be8:	00 c0       	rjmp	.+0      	; 0x4bea <delayms+0x16>
    4bea:	00 00       	nop
    4bec:	e3 ef       	ldi	r30, 0xF3	; 243
    4bee:	f1 e0       	ldi	r31, 0x01	; 1
    4bf0:	31 97       	sbiw	r30, 0x01	; 1
    4bf2:	f1 f7       	brne	.-4      	; 0x4bf0 <delayms+0x1c>
    4bf4:	00 c0       	rjmp	.+0      	; 0x4bf6 <delayms+0x22>
    4bf6:	00 00       	nop
    4bf8:	e3 ef       	ldi	r30, 0xF3	; 243
    4bfa:	f1 e0       	ldi	r31, 0x01	; 1
    4bfc:	31 97       	sbiw	r30, 0x01	; 1
    4bfe:	f1 f7       	brne	.-4      	; 0x4bfc <delayms+0x28>
    4c00:	00 c0       	rjmp	.+0      	; 0x4c02 <delayms+0x2e>
    4c02:	00 00       	nop
    4c04:	e3 ef       	ldi	r30, 0xF3	; 243
    4c06:	f1 e0       	ldi	r31, 0x01	; 1
    4c08:	31 97       	sbiw	r30, 0x01	; 1
    4c0a:	f1 f7       	brne	.-4      	; 0x4c08 <delayms+0x34>
    4c0c:	00 c0       	rjmp	.+0      	; 0x4c0e <delayms+0x3a>
    4c0e:	00 00       	nop
    4c10:	e3 ef       	ldi	r30, 0xF3	; 243
    4c12:	f1 e0       	ldi	r31, 0x01	; 1
    4c14:	31 97       	sbiw	r30, 0x01	; 1
    4c16:	f1 f7       	brne	.-4      	; 0x4c14 <delayms+0x40>
    4c18:	00 c0       	rjmp	.+0      	; 0x4c1a <delayms+0x46>
    4c1a:	00 00       	nop
    4c1c:	e3 ef       	ldi	r30, 0xF3	; 243
    4c1e:	f1 e0       	ldi	r31, 0x01	; 1
    4c20:	31 97       	sbiw	r30, 0x01	; 1
    4c22:	f1 f7       	brne	.-4      	; 0x4c20 <delayms+0x4c>
    4c24:	00 c0       	rjmp	.+0      	; 0x4c26 <delayms+0x52>
    4c26:	00 00       	nop
    4c28:	e3 ef       	ldi	r30, 0xF3	; 243
    4c2a:	f1 e0       	ldi	r31, 0x01	; 1
    4c2c:	31 97       	sbiw	r30, 0x01	; 1
    4c2e:	f1 f7       	brne	.-4      	; 0x4c2c <delayms+0x58>
    4c30:	00 c0       	rjmp	.+0      	; 0x4c32 <delayms+0x5e>
    4c32:	00 00       	nop
    4c34:	e3 ef       	ldi	r30, 0xF3	; 243
    4c36:	f1 e0       	ldi	r31, 0x01	; 1
    4c38:	31 97       	sbiw	r30, 0x01	; 1
    4c3a:	f1 f7       	brne	.-4      	; 0x4c38 <delayms+0x64>
    4c3c:	00 c0       	rjmp	.+0      	; 0x4c3e <delayms+0x6a>
    4c3e:	00 00       	nop
    4c40:	e3 ef       	ldi	r30, 0xF3	; 243
    4c42:	f1 e0       	ldi	r31, 0x01	; 1
    4c44:	31 97       	sbiw	r30, 0x01	; 1
    4c46:	f1 f7       	brne	.-4      	; 0x4c44 <delayms+0x70>
    4c48:	00 c0       	rjmp	.+0      	; 0x4c4a <delayms+0x76>
    4c4a:	00 00       	nop
    4c4c:	e3 ef       	ldi	r30, 0xF3	; 243
    4c4e:	f1 e0       	ldi	r31, 0x01	; 1
    4c50:	31 97       	sbiw	r30, 0x01	; 1
    4c52:	f1 f7       	brne	.-4      	; 0x4c50 <delayms+0x7c>
    4c54:	00 c0       	rjmp	.+0      	; 0x4c56 <delayms+0x82>
    4c56:	00 00       	nop
    4c58:	61 50       	subi	r22, 0x01	; 1
    4c5a:	71 09       	sbc	r23, r1
    4c5c:	81 09       	sbc	r24, r1
    4c5e:	91 09       	sbc	r25, r1
    4c60:	b9 cf       	rjmp	.-142    	; 0x4bd4 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4c62:	08 95       	ret

00004c64 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4c64:	81 11       	cpse	r24, r1
    4c66:	0e c0       	rjmp	.+28     	; 0x4c84 <uart_rx_flush+0x20>
    4c68:	f8 94       	cli
    4c6a:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <uarts+0x4>
    4c6e:	10 92 e2 19 	sts	0x19E2, r1	; 0x8019e2 <uarts+0x3>
    4c72:	10 92 df 19 	sts	0x19DF, r1	; 0x8019df <uarts>
    4c76:	10 92 e0 19 	sts	0x19E0, r1	; 0x8019e0 <uarts+0x1>
    4c7a:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <uarts+0x2>
    4c7e:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <uarts+0x5>
    4c82:	78 94       	sei
    4c84:	08 95       	ret

00004c86 <uart_ubr>:
    4c86:	4f 92       	push	r4
    4c88:	5f 92       	push	r5
    4c8a:	6f 92       	push	r6
    4c8c:	7f 92       	push	r7
    4c8e:	8f 92       	push	r8
    4c90:	9f 92       	push	r9
    4c92:	af 92       	push	r10
    4c94:	bf 92       	push	r11
    4c96:	cf 92       	push	r12
    4c98:	df 92       	push	r13
    4c9a:	ef 92       	push	r14
    4c9c:	ff 92       	push	r15
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	5a 01       	movw	r10, r20
    4ca4:	e9 01       	movw	r28, r18
    4ca6:	0e 94 de e2 	call	0x1c5bc	; 0x1c5bc <__floatunsisf>
    4caa:	2b 01       	movw	r4, r22
    4cac:	3c 01       	movw	r6, r24
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	40 e0       	ldi	r20, 0x00	; 0
    4cb4:	51 e4       	ldi	r21, 0x41	; 65
    4cb6:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    4cba:	9b 01       	movw	r18, r22
    4cbc:	ac 01       	movw	r20, r24
    4cbe:	60 e8       	ldi	r22, 0x80	; 128
    4cc0:	76 e9       	ldi	r23, 0x96	; 150
    4cc2:	88 e9       	ldi	r24, 0x98	; 152
    4cc4:	9b e4       	ldi	r25, 0x4B	; 75
    4cc6:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	40 e8       	ldi	r20, 0x80	; 128
    4cd0:	5f e3       	ldi	r21, 0x3F	; 63
    4cd2:	0e 94 dc e1 	call	0x1c3b8	; 0x1c3b8 <__subsf3>
    4cd6:	0e 94 f7 e3 	call	0x1c7ee	; 0x1c7ee <round>
    4cda:	0e 94 b2 e2 	call	0x1c564	; 0x1c564 <__fixunssfsi>
    4cde:	6b 01       	movw	r12, r22
    4ce0:	7c 01       	movw	r14, r24
    4ce2:	c1 14       	cp	r12, r1
    4ce4:	80 e1       	ldi	r24, 0x10	; 16
    4ce6:	d8 06       	cpc	r13, r24
    4ce8:	e1 04       	cpc	r14, r1
    4cea:	f1 04       	cpc	r15, r1
    4cec:	58 f4       	brcc	.+22     	; 0x4d04 <uart_ubr+0x7e>
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	f5 01       	movw	r30, r10
    4cf4:	91 83       	std	Z+1, r25	; 0x01
    4cf6:	80 83       	st	Z, r24
    4cf8:	81 2c       	mov	r8, r1
    4cfa:	91 2c       	mov	r9, r1
    4cfc:	a1 2c       	mov	r10, r1
    4cfe:	21 e4       	ldi	r18, 0x41	; 65
    4d00:	b2 2e       	mov	r11, r18
    4d02:	31 c0       	rjmp	.+98     	; 0x4d66 <uart_ubr+0xe0>
    4d04:	f5 01       	movw	r30, r10
    4d06:	11 82       	std	Z+1, r1	; 0x01
    4d08:	10 82       	st	Z, r1
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	40 e8       	ldi	r20, 0x80	; 128
    4d10:	51 e4       	ldi	r21, 0x41	; 65
    4d12:	c3 01       	movw	r24, r6
    4d14:	b2 01       	movw	r22, r4
    4d16:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    4d1a:	9b 01       	movw	r18, r22
    4d1c:	ac 01       	movw	r20, r24
    4d1e:	60 e8       	ldi	r22, 0x80	; 128
    4d20:	76 e9       	ldi	r23, 0x96	; 150
    4d22:	88 e9       	ldi	r24, 0x98	; 152
    4d24:	9b e4       	ldi	r25, 0x4B	; 75
    4d26:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	40 e8       	ldi	r20, 0x80	; 128
    4d30:	5f e3       	ldi	r21, 0x3F	; 63
    4d32:	0e 94 dc e1 	call	0x1c3b8	; 0x1c3b8 <__subsf3>
    4d36:	0e 94 f7 e3 	call	0x1c7ee	; 0x1c7ee <round>
    4d3a:	0e 94 b2 e2 	call	0x1c564	; 0x1c564 <__fixunssfsi>
    4d3e:	6b 01       	movw	r12, r22
    4d40:	7c 01       	movw	r14, r24
    4d42:	81 2c       	mov	r8, r1
    4d44:	91 2c       	mov	r9, r1
    4d46:	90 e8       	ldi	r25, 0x80	; 128
    4d48:	a9 2e       	mov	r10, r25
    4d4a:	91 e4       	ldi	r25, 0x41	; 65
    4d4c:	b9 2e       	mov	r11, r25
    4d4e:	c1 14       	cp	r12, r1
    4d50:	f0 e1       	ldi	r31, 0x10	; 16
    4d52:	df 06       	cpc	r13, r31
    4d54:	e1 04       	cpc	r14, r1
    4d56:	f1 04       	cpc	r15, r1
    4d58:	30 f0       	brcs	.+12     	; 0x4d66 <uart_ubr+0xe0>
    4d5a:	cc 24       	eor	r12, r12
    4d5c:	ca 94       	dec	r12
    4d5e:	8f e0       	ldi	r24, 0x0F	; 15
    4d60:	d8 2e       	mov	r13, r24
    4d62:	e1 2c       	mov	r14, r1
    4d64:	f1 2c       	mov	r15, r1
    4d66:	c7 01       	movw	r24, r14
    4d68:	b6 01       	movw	r22, r12
    4d6a:	6f 5f       	subi	r22, 0xFF	; 255
    4d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d70:	9f 4f       	sbci	r25, 0xFF	; 255
    4d72:	0e 94 de e2 	call	0x1c5bc	; 0x1c5bc <__floatunsisf>
    4d76:	a5 01       	movw	r20, r10
    4d78:	94 01       	movw	r18, r8
    4d7a:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	60 e8       	ldi	r22, 0x80	; 128
    4d84:	76 e9       	ldi	r23, 0x96	; 150
    4d86:	88 e9       	ldi	r24, 0x98	; 152
    4d88:	9b e4       	ldi	r25, 0x4B	; 75
    4d8a:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    4d8e:	0e 94 b2 e2 	call	0x1c564	; 0x1c564 <__fixunssfsi>
    4d92:	68 83       	st	Y, r22
    4d94:	79 83       	std	Y+1, r23	; 0x01
    4d96:	8a 83       	std	Y+2, r24	; 0x02
    4d98:	9b 83       	std	Y+3, r25	; 0x03
    4d9a:	c6 01       	movw	r24, r12
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	ff 90       	pop	r15
    4da2:	ef 90       	pop	r14
    4da4:	df 90       	pop	r13
    4da6:	cf 90       	pop	r12
    4da8:	bf 90       	pop	r11
    4daa:	af 90       	pop	r10
    4dac:	9f 90       	pop	r9
    4dae:	8f 90       	pop	r8
    4db0:	7f 90       	pop	r7
    4db2:	6f 90       	pop	r6
    4db4:	5f 90       	pop	r5
    4db6:	4f 90       	pop	r4
    4db8:	08 95       	ret

00004dba <uart_init>:
    4dba:	a6 e0       	ldi	r26, 0x06	; 6
    4dbc:	b0 e0       	ldi	r27, 0x00	; 0
    4dbe:	e3 ee       	ldi	r30, 0xE3	; 227
    4dc0:	f6 e2       	ldi	r31, 0x26	; 38
    4dc2:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    4dc6:	1e 82       	std	Y+6, r1	; 0x06
    4dc8:	1d 82       	std	Y+5, r1	; 0x05
    4dca:	81 11       	cpse	r24, r1
    4dcc:	36 c0       	rjmp	.+108    	; 0x4e3a <uart_init+0x80>
    4dce:	cb 01       	movw	r24, r22
    4dd0:	ba 01       	movw	r22, r20
    4dd2:	9e 01       	movw	r18, r28
    4dd4:	2f 5f       	subi	r18, 0xFF	; 255
    4dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4dd8:	ae 01       	movw	r20, r28
    4dda:	4b 5f       	subi	r20, 0xFB	; 251
    4ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    4dde:	53 df       	rcall	.-346    	; 0x4c86 <uart_ubr>
    4de0:	f8 94       	cli
    4de2:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <uarts+0x4>
    4de6:	10 92 e2 19 	sts	0x19E2, r1	; 0x8019e2 <uarts+0x3>
    4dea:	10 92 df 19 	sts	0x19DF, r1	; 0x8019df <uarts>
    4dee:	10 92 e0 19 	sts	0x19E0, r1	; 0x8019e0 <uarts+0x1>
    4df2:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <uarts+0x2>
    4df6:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <uarts+0x5>
    4dfa:	78 94       	sei
    4dfc:	f8 94       	cli
    4dfe:	58 9a       	sbi	0x0b, 0	; 11
    4e00:	59 9a       	sbi	0x0b, 1	; 11
    4e02:	50 98       	cbi	0x0a, 0	; 10
    4e04:	51 9a       	sbi	0x0a, 1	; 10
    4e06:	28 e9       	ldi	r18, 0x98	; 152
    4e08:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4e0c:	2d 81       	ldd	r18, Y+5	; 0x05
    4e0e:	3e 81       	ldd	r19, Y+6	; 0x06
    4e10:	23 2b       	or	r18, r19
    4e12:	19 f0       	breq	.+6      	; 0x4e1a <uart_init+0x60>
    4e14:	22 e0       	ldi	r18, 0x02	; 2
    4e16:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4e1a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4e1e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4e22:	78 94       	sei
    4e24:	65 ed       	ldi	r22, 0xD5	; 213
    4e26:	77 e2       	ldi	r23, 0x27	; 39
    4e28:	8a ee       	ldi	r24, 0xEA	; 234
    4e2a:	97 e2       	ldi	r25, 0x27	; 39
    4e2c:	0e 94 49 77 	call	0xee92	; 0xee92 <fdevopen>
    4e30:	69 81       	ldd	r22, Y+1	; 0x01
    4e32:	7a 81       	ldd	r23, Y+2	; 0x02
    4e34:	8b 81       	ldd	r24, Y+3	; 0x03
    4e36:	9c 81       	ldd	r25, Y+4	; 0x04
    4e38:	03 c0       	rjmp	.+6      	; 0x4e40 <uart_init+0x86>
    4e3a:	60 e0       	ldi	r22, 0x00	; 0
    4e3c:	70 e0       	ldi	r23, 0x00	; 0
    4e3e:	cb 01       	movw	r24, r22
    4e40:	26 96       	adiw	r28, 0x06	; 6
    4e42:	e2 e0       	ldi	r30, 0x02	; 2
    4e44:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00004e48 <uart_rx_interrupt>:
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
    4e4c:	27 e5       	ldi	r18, 0x57	; 87
    4e4e:	82 9f       	mul	r24, r18
    4e50:	c0 01       	movw	r24, r0
    4e52:	11 24       	eor	r1, r1
    4e54:	fc 01       	movw	r30, r24
    4e56:	e1 52       	subi	r30, 0x21	; 33
    4e58:	f6 4e       	sbci	r31, 0xE6	; 230
    4e5a:	83 81       	ldd	r24, Z+3	; 0x03
    4e5c:	94 81       	ldd	r25, Z+4	; 0x04
    4e5e:	80 35       	cpi	r24, 0x50	; 80
    4e60:	91 05       	cpc	r25, r1
    4e62:	7c f4       	brge	.+30     	; 0x4e82 <uart_rx_interrupt+0x3a>
    4e64:	30 81       	ld	r19, Z
    4e66:	21 e0       	ldi	r18, 0x01	; 1
    4e68:	23 0f       	add	r18, r19
    4e6a:	20 83       	st	Z, r18
    4e6c:	ef 01       	movw	r28, r30
    4e6e:	c3 0f       	add	r28, r19
    4e70:	d1 1d       	adc	r29, r1
    4e72:	6e 83       	std	Y+6, r22	; 0x06
    4e74:	01 96       	adiw	r24, 0x01	; 1
    4e76:	94 83       	std	Z+4, r25	; 0x04
    4e78:	83 83       	std	Z+3, r24	; 0x03
    4e7a:	20 35       	cpi	r18, 0x50	; 80
    4e7c:	28 f0       	brcs	.+10     	; 0x4e88 <uart_rx_interrupt+0x40>
    4e7e:	10 82       	st	Z, r1
    4e80:	03 c0       	rjmp	.+6      	; 0x4e88 <uart_rx_interrupt+0x40>
    4e82:	85 81       	ldd	r24, Z+5	; 0x05
    4e84:	81 60       	ori	r24, 0x01	; 1
    4e86:	85 83       	std	Z+5, r24	; 0x05
    4e88:	df 91       	pop	r29
    4e8a:	cf 91       	pop	r28
    4e8c:	08 95       	ret

00004e8e <__vector_20>:
    4e8e:	1f 92       	push	r1
    4e90:	0f 92       	push	r0
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	0f 92       	push	r0
    4e96:	11 24       	eor	r1, r1
    4e98:	0b b6       	in	r0, 0x3b	; 59
    4e9a:	0f 92       	push	r0
    4e9c:	2f 93       	push	r18
    4e9e:	3f 93       	push	r19
    4ea0:	4f 93       	push	r20
    4ea2:	5f 93       	push	r21
    4ea4:	6f 93       	push	r22
    4ea6:	7f 93       	push	r23
    4ea8:	8f 93       	push	r24
    4eaa:	9f 93       	push	r25
    4eac:	af 93       	push	r26
    4eae:	bf 93       	push	r27
    4eb0:	ef 93       	push	r30
    4eb2:	ff 93       	push	r31
    4eb4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4eb8:	80 e0       	ldi	r24, 0x00	; 0
    4eba:	c6 df       	rcall	.-116    	; 0x4e48 <uart_rx_interrupt>
    4ebc:	ff 91       	pop	r31
    4ebe:	ef 91       	pop	r30
    4ec0:	bf 91       	pop	r27
    4ec2:	af 91       	pop	r26
    4ec4:	9f 91       	pop	r25
    4ec6:	8f 91       	pop	r24
    4ec8:	7f 91       	pop	r23
    4eca:	6f 91       	pop	r22
    4ecc:	5f 91       	pop	r21
    4ece:	4f 91       	pop	r20
    4ed0:	3f 91       	pop	r19
    4ed2:	2f 91       	pop	r18
    4ed4:	0f 90       	pop	r0
    4ed6:	0b be       	out	0x3b, r0	; 59
    4ed8:	0f 90       	pop	r0
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	0f 90       	pop	r0
    4ede:	1f 90       	pop	r1
    4ee0:	18 95       	reti

00004ee2 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4ee2:	81 11       	cpse	r24, r1
    4ee4:	07 c0       	rjmp	.+14     	; 0x4ef4 <uart_rx_count+0x12>
        return(EOF);

    cli();
    4ee6:	f8 94       	cli

    count = uarts[uart].rx_count;
    4ee8:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <uarts+0x3>
    4eec:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <uarts+0x4>

    sei();
    4ef0:	78 94       	sei

    return (count );
    4ef2:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    4ef4:	8f ef       	ldi	r24, 0xFF	; 255
    4ef6:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    4ef8:	08 95       	ret

00004efa <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    4efa:	81 11       	cpse	r24, r1
    4efc:	21 c0       	rjmp	.+66     	; 0x4f40 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	f0 df       	rcall	.-32     	; 0x4ee2 <uart_rx_count>
    4f02:	18 16       	cp	r1, r24
    4f04:	19 06       	cpc	r1, r25
    4f06:	dc f7       	brge	.-10     	; 0x4efe <uart_get_tail+0x4>
        ;

    cli();
    4f08:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    4f0a:	e0 91 e0 19 	lds	r30, 0x19E0	; 0x8019e0 <uarts+0x1>
    4f0e:	91 e0       	ldi	r25, 0x01	; 1
    4f10:	9e 0f       	add	r25, r30
    4f12:	90 93 e0 19 	sts	0x19E0, r25	; 0x8019e0 <uarts+0x1>
    4f16:	f0 e0       	ldi	r31, 0x00	; 0
    4f18:	e1 52       	subi	r30, 0x21	; 33
    4f1a:	f6 4e       	sbci	r31, 0xE6	; 230
    4f1c:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    4f1e:	90 35       	cpi	r25, 0x50	; 80
    4f20:	10 f0       	brcs	.+4      	; 0x4f26 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    4f22:	10 92 e0 19 	sts	0x19E0, r1	; 0x8019e0 <uarts+0x1>
    uarts[uart].rx_count--;
    4f26:	20 91 e2 19 	lds	r18, 0x19E2	; 0x8019e2 <uarts+0x3>
    4f2a:	30 91 e3 19 	lds	r19, 0x19E3	; 0x8019e3 <uarts+0x4>
    4f2e:	21 50       	subi	r18, 0x01	; 1
    4f30:	31 09       	sbc	r19, r1
    4f32:	30 93 e3 19 	sts	0x19E3, r19	; 0x8019e3 <uarts+0x4>
    4f36:	20 93 e2 19 	sts	0x19E2, r18	; 0x8019e2 <uarts+0x3>
    sei();
    4f3a:	78 94       	sei

    return (c & 0xff);
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    4f40:	8f ef       	ldi	r24, 0xFF	; 255
    4f42:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    4f44:	08 95       	ret

00004f46 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    4f46:	d9 df       	rcall	.-78     	; 0x4efa <uart_get_tail>
}
    4f48:	99 27       	eor	r25, r25
    4f4a:	08 95       	ret

00004f4c <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    4f4c:	61 11       	cpse	r22, r1
    4f4e:	09 c0       	rjmp	.+18     	; 0x4f62 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    4f50:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f54:	25 ff       	sbrs	r18, 5
    4f56:	fc cf       	rjmp	.-8      	; 0x4f50 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    4f58:	28 2f       	mov	r18, r24
    4f5a:	2f 77       	andi	r18, 0x7F	; 127
    4f5c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    4f60:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    4f62:	61 30       	cpi	r22, 0x01	; 1
    4f64:	49 f4       	brne	.+18     	; 0x4f78 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    4f66:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4f6a:	25 ff       	sbrs	r18, 5
    4f6c:	fc cf       	rjmp	.-8      	; 0x4f66 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    4f6e:	28 2f       	mov	r18, r24
    4f70:	2f 77       	andi	r18, 0x7F	; 127
    4f72:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4f76:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    4f78:	8f ef       	ldi	r24, 0xFF	; 255
    4f7a:	9f ef       	ldi	r25, 0xFF	; 255
}
    4f7c:	08 95       	ret

00004f7e <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    4f7e:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    4f80:	81 11       	cpse	r24, r1
    4f82:	0f c0       	rjmp	.+30     	; 0x4fa2 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    4f84:	e0 df       	rcall	.-64     	; 0x4f46 <uart_rx_byte>
    4f86:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    4f88:	60 e0       	ldi	r22, 0x00	; 0
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
    4f8c:	df df       	rcall	.-66     	; 0x4f4c <uart_tx_byte>
    if(c == '\r')
    4f8e:	cd 30       	cpi	r28, 0x0D	; 13
    4f90:	29 f4       	brne	.+10     	; 0x4f9c <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    4f92:	60 e0       	ldi	r22, 0x00	; 0
    4f94:	8a e0       	ldi	r24, 0x0A	; 10
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	d9 df       	rcall	.-78     	; 0x4f4c <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    4f9a:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    4f9c:	8c 2f       	mov	r24, r28
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    4fa2:	8f ef       	ldi	r24, 0xFF	; 255
    4fa4:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    4fa6:	cf 91       	pop	r28
    4fa8:	08 95       	ret

00004faa <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    4faa:	80 e0       	ldi	r24, 0x00	; 0
    4fac:	e8 cf       	rjmp	.-48     	; 0x4f7e <uart_getchar>
}
    4fae:	08 95       	ret

00004fb0 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    4fb0:	1f 93       	push	r17
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	ec 01       	movw	r28, r24
    4fb8:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    4fba:	c8 df       	rcall	.-112    	; 0x4f4c <uart_tx_byte>

    if( c == '\n' )
    4fbc:	ca 30       	cpi	r28, 0x0A	; 10
    4fbe:	d1 05       	cpc	r29, r1
    4fc0:	21 f4       	brne	.+8      	; 0x4fca <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    4fc2:	61 2f       	mov	r22, r17
    4fc4:	8d e0       	ldi	r24, 0x0D	; 13
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	c1 df       	rcall	.-126    	; 0x4f4c <uart_tx_byte>

    return(c);
}
    4fca:	ce 01       	movw	r24, r28
    4fcc:	df 91       	pop	r29
    4fce:	cf 91       	pop	r28
    4fd0:	1f 91       	pop	r17
    4fd2:	08 95       	ret

00004fd4 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    4fd4:	cf 93       	push	r28
    4fd6:	df 93       	push	r29
    4fd8:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    4fda:	60 e0       	ldi	r22, 0x00	; 0
    4fdc:	70 e0       	ldi	r23, 0x00	; 0
    4fde:	e8 df       	rcall	.-48     	; 0x4fb0 <uart_putchar>
    return(c);
}
    4fe0:	ce 01       	movw	r24, r28
    4fe2:	df 91       	pop	r29
    4fe4:	cf 91       	pop	r28
    4fe6:	08 95       	ret

00004fe8 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    4fe8:	7c cf       	rjmp	.-264    	; 0x4ee2 <uart_rx_count>
}
    4fea:	08 95       	ret

00004fec <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    4fec:	cf 92       	push	r12
    4fee:	df 92       	push	r13
    4ff0:	ef 92       	push	r14
    4ff2:	ff 92       	push	r15
    4ff4:	6b 01       	movw	r12, r22
    4ff6:	7c 01       	movw	r14, r24
    4ff8:	80 91 43 17 	lds	r24, 0x1743	; 0x801743 <SPI0_Speed_value>
    4ffc:	90 91 44 17 	lds	r25, 0x1744	; 0x801744 <SPI0_Speed_value+0x1>
    5000:	a0 91 45 17 	lds	r26, 0x1745	; 0x801745 <SPI0_Speed_value+0x2>
    5004:	b0 91 46 17 	lds	r27, 0x1746	; 0x801746 <SPI0_Speed_value+0x3>
    5008:	8c 15       	cp	r24, r12
    500a:	9d 05       	cpc	r25, r13
    500c:	ae 05       	cpc	r26, r14
    500e:	bf 05       	cpc	r27, r15
    5010:	09 f4       	brne	.+2      	; 0x5014 <SPI0_Speed+0x28>
    5012:	4e c0       	rjmp	.+156    	; 0x50b0 <SPI0_Speed+0xc4>
    5014:	60 e0       	ldi	r22, 0x00	; 0
    5016:	7d e2       	ldi	r23, 0x2D	; 45
    5018:	81 e3       	ldi	r24, 0x31	; 49
    501a:	91 e0       	ldi	r25, 0x01	; 1
    501c:	a7 01       	movw	r20, r14
    501e:	96 01       	movw	r18, r12
    5020:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    5024:	20 38       	cpi	r18, 0x80	; 128
    5026:	31 05       	cpc	r19, r1
    5028:	41 05       	cpc	r20, r1
    502a:	51 05       	cpc	r21, r1
    502c:	28 f4       	brcc	.+10     	; 0x5038 <SPI0_Speed+0x4c>
    502e:	20 34       	cpi	r18, 0x40	; 64
    5030:	31 05       	cpc	r19, r1
    5032:	41 05       	cpc	r20, r1
    5034:	51 05       	cpc	r21, r1
    5036:	30 f0       	brcs	.+12     	; 0x5044 <SPI0_Speed+0x58>
    5038:	8d b5       	in	r24, 0x2d	; 45
    503a:	8e 7f       	andi	r24, 0xFE	; 254
    503c:	8d bd       	out	0x2d, r24	; 45
    503e:	8c b5       	in	r24, 0x2c	; 44
    5040:	82 60       	ori	r24, 0x02	; 2
    5042:	1b c0       	rjmp	.+54     	; 0x507a <SPI0_Speed+0x8e>
    5044:	8d b5       	in	r24, 0x2d	; 45
    5046:	20 32       	cpi	r18, 0x20	; 32
    5048:	31 05       	cpc	r19, r1
    504a:	41 05       	cpc	r20, r1
    504c:	51 05       	cpc	r21, r1
    504e:	28 f0       	brcs	.+10     	; 0x505a <SPI0_Speed+0x6e>
    5050:	81 60       	ori	r24, 0x01	; 1
    5052:	8d bd       	out	0x2d, r24	; 45
    5054:	8c b5       	in	r24, 0x2c	; 44
    5056:	82 60       	ori	r24, 0x02	; 2
    5058:	1f c0       	rjmp	.+62     	; 0x5098 <SPI0_Speed+0xac>
    505a:	20 31       	cpi	r18, 0x10	; 16
    505c:	31 05       	cpc	r19, r1
    505e:	41 05       	cpc	r20, r1
    5060:	51 05       	cpc	r21, r1
    5062:	10 f0       	brcs	.+4      	; 0x5068 <SPI0_Speed+0x7c>
    5064:	8e 7f       	andi	r24, 0xFE	; 254
    5066:	06 c0       	rjmp	.+12     	; 0x5074 <SPI0_Speed+0x88>
    5068:	28 30       	cpi	r18, 0x08	; 8
    506a:	31 05       	cpc	r19, r1
    506c:	41 05       	cpc	r20, r1
    506e:	51 05       	cpc	r21, r1
    5070:	40 f0       	brcs	.+16     	; 0x5082 <SPI0_Speed+0x96>
    5072:	81 60       	ori	r24, 0x01	; 1
    5074:	8d bd       	out	0x2d, r24	; 45
    5076:	8c b5       	in	r24, 0x2c	; 44
    5078:	8d 7f       	andi	r24, 0xFD	; 253
    507a:	8c bd       	out	0x2c, r24	; 44
    507c:	8c b5       	in	r24, 0x2c	; 44
    507e:	81 60       	ori	r24, 0x01	; 1
    5080:	0e c0       	rjmp	.+28     	; 0x509e <SPI0_Speed+0xb2>
    5082:	24 30       	cpi	r18, 0x04	; 4
    5084:	31 05       	cpc	r19, r1
    5086:	41 05       	cpc	r20, r1
    5088:	51 05       	cpc	r21, r1
    508a:	10 f0       	brcs	.+4      	; 0x5090 <SPI0_Speed+0xa4>
    508c:	8e 7f       	andi	r24, 0xFE	; 254
    508e:	01 c0       	rjmp	.+2      	; 0x5092 <SPI0_Speed+0xa6>
    5090:	81 60       	ori	r24, 0x01	; 1
    5092:	8d bd       	out	0x2d, r24	; 45
    5094:	8c b5       	in	r24, 0x2c	; 44
    5096:	8d 7f       	andi	r24, 0xFD	; 253
    5098:	8c bd       	out	0x2c, r24	; 44
    509a:	8c b5       	in	r24, 0x2c	; 44
    509c:	8e 7f       	andi	r24, 0xFE	; 254
    509e:	8c bd       	out	0x2c, r24	; 44
    50a0:	c0 92 43 17 	sts	0x1743, r12	; 0x801743 <SPI0_Speed_value>
    50a4:	d0 92 44 17 	sts	0x1744, r13	; 0x801744 <SPI0_Speed_value+0x1>
    50a8:	e0 92 45 17 	sts	0x1745, r14	; 0x801745 <SPI0_Speed_value+0x2>
    50ac:	f0 92 46 17 	sts	0x1746, r15	; 0x801746 <SPI0_Speed_value+0x3>
    50b0:	ff 90       	pop	r15
    50b2:	ef 90       	pop	r14
    50b4:	df 90       	pop	r13
    50b6:	cf 90       	pop	r12
    50b8:	08 95       	ret

000050ba <SPI0_Mode>:
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	00 d0       	rcall	.+0      	; 0x50c0 <SPI0_Mode+0x6>
    50c0:	00 d0       	rcall	.+0      	; 0x50c2 <SPI0_Mode+0x8>
    50c2:	1f 92       	push	r1
    50c4:	ec 01       	movw	r28, r24
    50c6:	81 30       	cpi	r24, 0x01	; 1
    50c8:	91 05       	cpc	r25, r1
    50ca:	71 f0       	breq	.+28     	; 0x50e8 <SPI0_Mode+0x2e>
    50cc:	2c f4       	brge	.+10     	; 0x50d8 <SPI0_Mode+0x1e>
    50ce:	89 2b       	or	r24, r25
    50d0:	c1 f4       	brne	.+48     	; 0x5102 <SPI0_Mode+0x48>
    50d2:	8c b5       	in	r24, 0x2c	; 44
    50d4:	87 7f       	andi	r24, 0xF7	; 247
    50d6:	11 c0       	rjmp	.+34     	; 0x50fa <SPI0_Mode+0x40>
    50d8:	82 30       	cpi	r24, 0x02	; 2
    50da:	91 05       	cpc	r25, r1
    50dc:	61 f0       	breq	.+24     	; 0x50f6 <SPI0_Mode+0x3c>
    50de:	03 97       	sbiw	r24, 0x03	; 3
    50e0:	81 f4       	brne	.+32     	; 0x5102 <SPI0_Mode+0x48>
    50e2:	8c b5       	in	r24, 0x2c	; 44
    50e4:	88 60       	ori	r24, 0x08	; 8
    50e6:	02 c0       	rjmp	.+4      	; 0x50ec <SPI0_Mode+0x32>
    50e8:	8c b5       	in	r24, 0x2c	; 44
    50ea:	87 7f       	andi	r24, 0xF7	; 247
    50ec:	8c bd       	out	0x2c, r24	; 44
    50ee:	8c b5       	in	r24, 0x2c	; 44
    50f0:	84 60       	ori	r24, 0x04	; 4
    50f2:	8c bd       	out	0x2c, r24	; 44
    50f4:	12 c0       	rjmp	.+36     	; 0x511a <SPI0_Mode+0x60>
    50f6:	8c b5       	in	r24, 0x2c	; 44
    50f8:	88 60       	ori	r24, 0x08	; 8
    50fa:	8c bd       	out	0x2c, r24	; 44
    50fc:	8c b5       	in	r24, 0x2c	; 44
    50fe:	8b 7f       	andi	r24, 0xFB	; 251
    5100:	f8 cf       	rjmp	.-16     	; 0x50f2 <SPI0_Mode+0x38>
    5102:	ed b7       	in	r30, 0x3d	; 61
    5104:	fe b7       	in	r31, 0x3e	; 62
    5106:	d5 83       	std	Z+5, r29	; 0x05
    5108:	c4 83       	std	Z+4, r28	; 0x04
    510a:	84 e1       	ldi	r24, 0x14	; 20
    510c:	93 e0       	ldi	r25, 0x03	; 3
    510e:	a0 e0       	ldi	r26, 0x00	; 0
    5110:	81 83       	std	Z+1, r24	; 0x01
    5112:	92 83       	std	Z+2, r25	; 0x02
    5114:	a3 83       	std	Z+3, r26	; 0x03
    5116:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    511a:	d0 93 42 17 	sts	0x1742, r29	; 0x801742 <SPI0_Mode_value+0x1>
    511e:	c0 93 41 17 	sts	0x1741, r28	; 0x801741 <SPI0_Mode_value>
    5122:	cd b7       	in	r28, 0x3d	; 61
    5124:	de b7       	in	r29, 0x3e	; 62
    5126:	25 96       	adiw	r28, 0x05	; 5
    5128:	e2 e0       	ldi	r30, 0x02	; 2
    512a:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000512e <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    512e:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5130:	0d b4       	in	r0, 0x2d	; 45
    5132:	07 fe       	sbrs	r0, 7
    5134:	fd cf       	rjmp	.-6      	; 0x5130 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5136:	8e b5       	in	r24, 0x2e	; 46
}
    5138:	08 95       	ret

0000513a <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    513a:	cf 92       	push	r12
    513c:	df 92       	push	r13
    513e:	ef 92       	push	r14
    5140:	ff 92       	push	r15
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	1f 92       	push	r1
    5148:	cd b7       	in	r28, 0x3d	; 61
    514a:	de b7       	in	r29, 0x3e	; 62
    514c:	6b 01       	movw	r12, r22
    514e:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5150:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5152:	2f 9a       	sbi	0x05, 7	; 5
    5154:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5156:	2d 9a       	sbi	0x05, 5	; 5
    5158:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    515a:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    515c:	2c 98       	cbi	0x05, 4	; 5
    515e:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5160:	8c b5       	in	r24, 0x2c	; 44
    5162:	80 61       	ori	r24, 0x10	; 16
    5164:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5166:	8c b5       	in	r24, 0x2c	; 44
    5168:	80 64       	ori	r24, 0x40	; 64
    516a:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    516c:	8d b5       	in	r24, 0x2d	; 45
    516e:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5170:	8e b5       	in	r24, 0x2e	; 46
    5172:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	a0 df       	rcall	.-192    	; 0x50ba <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    517a:	c7 01       	movw	r24, r14
    517c:	b6 01       	movw	r22, r12
    517e:	36 df       	rcall	.-404    	; 0x4fec <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5180:	8f ef       	ldi	r24, 0xFF	; 255
    5182:	d5 df       	rcall	.-86     	; 0x512e <SPI0_TXRX_Byte>
    5184:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    5186:	df 91       	pop	r29
    5188:	cf 91       	pop	r28
    518a:	ff 90       	pop	r15
    518c:	ef 90       	pop	r14
    518e:	df 90       	pop	r13
    5190:	cf 90       	pop	r12
    5192:	08 95       	ret

00005194 <SPI0_TX>:
    5194:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5196:	1f 93       	push	r17
    5198:	cf 93       	push	r28
    519a:	df 93       	push	r29
    519c:	8c 01       	movw	r16, r24
    519e:	eb 01       	movw	r28, r22

    while(count > 0)
    51a0:	1c 16       	cp	r1, r28
    51a2:	1d 06       	cpc	r1, r29
    51a4:	34 f4       	brge	.+12     	; 0x51b2 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    51a6:	f8 01       	movw	r30, r16
    51a8:	81 91       	ld	r24, Z+
    51aa:	8f 01       	movw	r16, r30
    51ac:	c0 df       	rcall	.-128    	; 0x512e <SPI0_TXRX_Byte>
        ++data;
        --count;
    51ae:	21 97       	sbiw	r28, 0x01	; 1
    51b0:	f7 cf       	rjmp	.-18     	; 0x51a0 <SPI0_TX+0xc>
    }
}
    51b2:	df 91       	pop	r29
    51b4:	cf 91       	pop	r28
    51b6:	1f 91       	pop	r17
    51b8:	0f 91       	pop	r16
    51ba:	08 95       	ret

000051bc <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    51bc:	0f 93       	push	r16
    51be:	1f 93       	push	r17
    51c0:	cf 93       	push	r28
    51c2:	df 93       	push	r29
    51c4:	8c 01       	movw	r16, r24
    51c6:	eb 01       	movw	r28, r22

    while(count > 0)
    51c8:	1c 16       	cp	r1, r28
    51ca:	1d 06       	cpc	r1, r29
    51cc:	44 f4       	brge	.+16     	; 0x51de <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    51ce:	f8 01       	movw	r30, r16
    51d0:	80 81       	ld	r24, Z
    51d2:	ad df       	rcall	.-166    	; 0x512e <SPI0_TXRX_Byte>
    51d4:	f8 01       	movw	r30, r16
    51d6:	81 93       	st	Z+, r24
    51d8:	8f 01       	movw	r16, r30
        ++data;
        --count;
    51da:	21 97       	sbiw	r28, 0x01	; 1
    51dc:	f5 cf       	rjmp	.-22     	; 0x51c8 <SPI0_TXRX+0xc>
    }
}
    51de:	df 91       	pop	r29
    51e0:	cf 91       	pop	r28
    51e2:	1f 91       	pop	r17
    51e4:	0f 91       	pop	r16
    51e6:	08 95       	ret

000051e8 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    51e8:	0f 93       	push	r16
    51ea:	1f 93       	push	r17
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
    51f0:	8c 01       	movw	r16, r24
    51f2:	eb 01       	movw	r28, r22

    while(count > 0)
    51f4:	1c 16       	cp	r1, r28
    51f6:	1d 06       	cpc	r1, r29
    51f8:	3c f4       	brge	.+14     	; 0x5208 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    51fa:	8f ef       	ldi	r24, 0xFF	; 255
    51fc:	98 df       	rcall	.-208    	; 0x512e <SPI0_TXRX_Byte>
    51fe:	f8 01       	movw	r30, r16
    5200:	81 93       	st	Z+, r24
    5202:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5204:	21 97       	sbiw	r28, 0x01	; 1
    5206:	f6 cf       	rjmp	.-20     	; 0x51f4 <SPI0_RX+0xc>
    }
}
    5208:	df 91       	pop	r29
    520a:	cf 91       	pop	r28
    520c:	1f 91       	pop	r17
    520e:	0f 91       	pop	r16
    5210:	08 95       	ret

00005212 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5212:	2f b7       	in	r18, 0x3f	; 63
    5214:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <i2c+0x1>
    5218:	81 11       	cpse	r24, r1
    521a:	04 c0       	rjmp	.+8      	; 0x5224 <i2c_timer+0x12>
    521c:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <i2c+0x2>
    5220:	81 11       	cpse	r24, r1
    5222:	0b c0       	rjmp	.+22     	; 0x523a <i2c_timer+0x28>
    5224:	80 91 3a 1a 	lds	r24, 0x1A3A	; 0x801a3a <i2c+0x4>
    5228:	90 91 3b 1a 	lds	r25, 0x1A3B	; 0x801a3b <i2c+0x5>
    522c:	00 97       	sbiw	r24, 0x00	; 0
    522e:	29 f0       	breq	.+10     	; 0x523a <i2c_timer+0x28>
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	90 93 3b 1a 	sts	0x1A3B, r25	; 0x801a3b <i2c+0x5>
    5236:	80 93 3a 1a 	sts	0x1A3A, r24	; 0x801a3a <i2c+0x4>
    523a:	2f bf       	out	0x3f, r18	; 63
    523c:	08 95       	ret

0000523e <i2c_check_op>:
    523e:	ad b7       	in	r26, 0x3d	; 61
    5240:	be b7       	in	r27, 0x3e	; 62
    5242:	17 97       	sbiw	r26, 0x07	; 7
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	be bf       	out	0x3e, r27	; 62
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	ad bf       	out	0x3d, r26	; 61
    524e:	28 2f       	mov	r18, r24
    5250:	08 2e       	mov	r0, r24
    5252:	00 0c       	add	r0, r0
    5254:	33 0b       	sbc	r19, r19
    5256:	80 31       	cpi	r24, 0x10	; 16
    5258:	88 f0       	brcs	.+34     	; 0x527c <i2c_check_op+0x3e>
    525a:	80 e1       	ldi	r24, 0x10	; 16
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	ed b7       	in	r30, 0x3d	; 61
    5260:	fe b7       	in	r31, 0x3e	; 62
    5262:	97 83       	std	Z+7, r25	; 0x07
    5264:	86 83       	std	Z+6, r24	; 0x06
    5266:	35 83       	std	Z+5, r19	; 0x05
    5268:	24 83       	std	Z+4, r18	; 0x04
    526a:	89 e2       	ldi	r24, 0x29	; 41
    526c:	94 e0       	ldi	r25, 0x04	; 4
    526e:	a0 e0       	ldi	r26, 0x00	; 0
    5270:	81 83       	std	Z+1, r24	; 0x01
    5272:	92 83       	std	Z+2, r25	; 0x02
    5274:	a3 83       	std	Z+3, r26	; 0x03
    5276:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    527a:	24 c0       	rjmp	.+72     	; 0x52c4 <i2c_check_op+0x86>
    527c:	f9 01       	movw	r30, r18
    527e:	ee 0f       	add	r30, r30
    5280:	ff 1f       	adc	r31, r31
    5282:	e8 5b       	subi	r30, 0xB8	; 184
    5284:	f8 4e       	sbci	r31, 0xE8	; 232
    5286:	01 90       	ld	r0, Z+
    5288:	f0 81       	ld	r31, Z
    528a:	e0 2d       	mov	r30, r0
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	d1 f0       	breq	.+52     	; 0x52c4 <i2c_check_op+0x86>
    5290:	80 85       	ldd	r24, Z+8	; 0x08
    5292:	91 85       	ldd	r25, Z+9	; 0x09
    5294:	89 2b       	or	r24, r25
    5296:	39 f4       	brne	.+14     	; 0x52a6 <i2c_check_op+0x68>
    5298:	ed b7       	in	r30, 0x3d	; 61
    529a:	fe b7       	in	r31, 0x3e	; 62
    529c:	35 83       	std	Z+5, r19	; 0x05
    529e:	24 83       	std	Z+4, r18	; 0x04
    52a0:	80 e1       	ldi	r24, 0x10	; 16
    52a2:	94 e0       	ldi	r25, 0x04	; 4
    52a4:	09 c0       	rjmp	.+18     	; 0x52b8 <i2c_check_op+0x7a>
    52a6:	86 81       	ldd	r24, Z+6	; 0x06
    52a8:	81 11       	cpse	r24, r1
    52aa:	0e c0       	rjmp	.+28     	; 0x52c8 <i2c_check_op+0x8a>
    52ac:	ed b7       	in	r30, 0x3d	; 61
    52ae:	fe b7       	in	r31, 0x3e	; 62
    52b0:	35 83       	std	Z+5, r19	; 0x05
    52b2:	24 83       	std	Z+4, r18	; 0x04
    52b4:	8a ef       	ldi	r24, 0xFA	; 250
    52b6:	93 e0       	ldi	r25, 0x03	; 3
    52b8:	a0 e0       	ldi	r26, 0x00	; 0
    52ba:	81 83       	std	Z+1, r24	; 0x01
    52bc:	92 83       	std	Z+2, r25	; 0x02
    52be:	a3 83       	std	Z+3, r26	; 0x03
    52c0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    52c4:	80 e0       	ldi	r24, 0x00	; 0
    52c6:	01 c0       	rjmp	.+2      	; 0x52ca <i2c_check_op+0x8c>
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	ad b7       	in	r26, 0x3d	; 61
    52cc:	be b7       	in	r27, 0x3e	; 62
    52ce:	17 96       	adiw	r26, 0x07	; 7
    52d0:	0f b6       	in	r0, 0x3f	; 63
    52d2:	f8 94       	cli
    52d4:	be bf       	out	0x3e, r27	; 62
    52d6:	0f be       	out	0x3f, r0	; 63
    52d8:	ad bf       	out	0x3d, r26	; 61
    52da:	08 95       	ret

000052dc <i2c_task_init>:
    52dc:	8f b7       	in	r24, 0x3f	; 63
    52de:	f8 94       	cli
    52e0:	e8 e4       	ldi	r30, 0x48	; 72
    52e2:	f7 e1       	ldi	r31, 0x17	; 23
    52e4:	11 92       	st	Z+, r1
    52e6:	11 92       	st	Z+, r1
    52e8:	97 e1       	ldi	r25, 0x17	; 23
    52ea:	e8 36       	cpi	r30, 0x68	; 104
    52ec:	f9 07       	cpc	r31, r25
    52ee:	d1 f7       	brne	.-12     	; 0x52e4 <i2c_task_init+0x8>
    52f0:	10 92 68 17 	sts	0x1768, r1	; 0x801768 <i2c_task>
    52f4:	91 e0       	ldi	r25, 0x01	; 1
    52f6:	90 93 6a 17 	sts	0x176A, r25	; 0x80176a <i2c_task+0x2>
    52fa:	10 92 69 17 	sts	0x1769, r1	; 0x801769 <i2c_task+0x1>
    52fe:	10 92 6b 17 	sts	0x176B, r1	; 0x80176b <i2c_task+0x3>
    5302:	8f bf       	out	0x3f, r24	; 63
    5304:	08 95       	ret

00005306 <i2c_task_op_add>:
    5306:	ef 92       	push	r14
    5308:	ff 92       	push	r15
    530a:	0f 93       	push	r16
    530c:	1f 93       	push	r17
    530e:	cf 93       	push	r28
    5310:	df 93       	push	r29
    5312:	d8 2f       	mov	r29, r24
    5314:	c6 2f       	mov	r28, r22
    5316:	7a 01       	movw	r14, r20
    5318:	02 2f       	mov	r16, r18
    531a:	1f b7       	in	r17, 0x3f	; 63
    531c:	6a e0       	ldi	r22, 0x0A	; 10
    531e:	70 e0       	ldi	r23, 0x00	; 0
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	a9 db       	rcall	.-2222   	; 0x4a78 <safecalloc>
    5326:	fc 01       	movw	r30, r24
    5328:	89 2b       	or	r24, r25
    532a:	89 f0       	breq	.+34     	; 0x534e <i2c_task_op_add+0x48>
    532c:	f8 94       	cli
    532e:	11 82       	std	Z+1, r1	; 0x01
    5330:	12 82       	std	Z+2, r1	; 0x02
    5332:	dd 0f       	add	r29, r29
    5334:	c1 70       	andi	r28, 0x01	; 1
    5336:	cd 2b       	or	r28, r29
    5338:	c0 83       	st	Z, r28
    533a:	8a e0       	ldi	r24, 0x0A	; 10
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	95 83       	std	Z+5, r25	; 0x05
    5340:	84 83       	std	Z+4, r24	; 0x04
    5342:	13 82       	std	Z+3, r1	; 0x03
    5344:	06 83       	std	Z+6, r16	; 0x06
    5346:	17 82       	std	Z+7, r1	; 0x07
    5348:	f1 86       	std	Z+9, r15	; 0x09
    534a:	e0 86       	std	Z+8, r14	; 0x08
    534c:	1f bf       	out	0x3f, r17	; 63
    534e:	cf 01       	movw	r24, r30
    5350:	cd b7       	in	r28, 0x3d	; 61
    5352:	de b7       	in	r29, 0x3e	; 62
    5354:	e6 e0       	ldi	r30, 0x06	; 6
    5356:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0000535a <i2c_init>:
    535a:	cf 93       	push	r28
    535c:	00 d0       	rcall	.+0      	; 0x535e <i2c_init+0x4>
    535e:	1f 92       	push	r1
    5360:	9b 01       	movw	r18, r22
    5362:	ac 01       	movw	r20, r24
    5364:	cf b7       	in	r28, 0x3f	; 63
    5366:	60 e0       	ldi	r22, 0x00	; 0
    5368:	7d e2       	ldi	r23, 0x2D	; 45
    536a:	81 e3       	ldi	r24, 0x31	; 49
    536c:	91 e0       	ldi	r25, 0x01	; 1
    536e:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    5372:	da 01       	movw	r26, r20
    5374:	c9 01       	movw	r24, r18
    5376:	40 97       	sbiw	r24, 0x10	; 16
    5378:	a1 09       	sbc	r26, r1
    537a:	b1 09       	sbc	r27, r1
    537c:	ac 01       	movw	r20, r24
    537e:	bd 01       	movw	r22, r26
    5380:	76 95       	lsr	r23
    5382:	67 95       	ror	r22
    5384:	57 95       	ror	r21
    5386:	47 95       	ror	r20
    5388:	ca 01       	movw	r24, r20
    538a:	88 27       	eor	r24, r24
    538c:	89 2b       	or	r24, r25
    538e:	59 f0       	breq	.+22     	; 0x53a6 <i2c_init+0x4c>
    5390:	8e ed       	ldi	r24, 0xDE	; 222
    5392:	93 e0       	ldi	r25, 0x03	; 3
    5394:	a0 e0       	ldi	r26, 0x00	; 0
    5396:	ed b7       	in	r30, 0x3d	; 61
    5398:	fe b7       	in	r31, 0x3e	; 62
    539a:	81 83       	std	Z+1, r24	; 0x01
    539c:	92 83       	std	Z+2, r25	; 0x02
    539e:	a3 83       	std	Z+3, r26	; 0x03
    53a0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    53a4:	3a c0       	rjmp	.+116    	; 0x541a <i2c_init+0xc0>
    53a6:	f8 94       	cli
    53a8:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    53ac:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
    53b6:	10 92 68 17 	sts	0x1768, r1	; 0x801768 <i2c_task>
    53ba:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <i2c_task+0x2>
    53be:	40 9a       	sbi	0x08, 0	; 8
    53c0:	41 9a       	sbi	0x08, 1	; 8
    53c2:	84 e8       	ldi	r24, 0x84	; 132
    53c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    53c8:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    53cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    53d0:	8c 7f       	andi	r24, 0xFC	; 252
    53d2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    53d6:	80 91 47 17 	lds	r24, 0x1747	; 0x801747 <i2c_init_status>
    53da:	81 11       	cpse	r24, r1
    53dc:	1d c0       	rjmp	.+58     	; 0x5418 <i2c_init+0xbe>
    53de:	e8 e4       	ldi	r30, 0x48	; 72
    53e0:	f7 e1       	ldi	r31, 0x17	; 23
    53e2:	11 92       	st	Z+, r1
    53e4:	11 92       	st	Z+, r1
    53e6:	27 e1       	ldi	r18, 0x17	; 23
    53e8:	e8 36       	cpi	r30, 0x68	; 104
    53ea:	f2 07       	cpc	r31, r18
    53ec:	d1 f7       	brne	.-12     	; 0x53e2 <i2c_init+0x88>
    53ee:	61 e0       	ldi	r22, 0x01	; 1
    53f0:	70 e0       	ldi	r23, 0x00	; 0
    53f2:	89 e0       	ldi	r24, 0x09	; 9
    53f4:	99 e2       	ldi	r25, 0x29	; 41
    53f6:	0e 94 3d 32 	call	0x647a	; 0x647a <set_timers>
    53fa:	01 96       	adiw	r24, 0x01	; 1
    53fc:	51 f4       	brne	.+20     	; 0x5412 <i2c_init+0xb8>
    53fe:	87 ec       	ldi	r24, 0xC7	; 199
    5400:	93 e0       	ldi	r25, 0x03	; 3
    5402:	a0 e0       	ldi	r26, 0x00	; 0
    5404:	ed b7       	in	r30, 0x3d	; 61
    5406:	fe b7       	in	r31, 0x3e	; 62
    5408:	81 83       	std	Z+1, r24	; 0x01
    540a:	92 83       	std	Z+2, r25	; 0x02
    540c:	a3 83       	std	Z+3, r26	; 0x03
    540e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	80 93 47 17 	sts	0x1747, r24	; 0x801747 <i2c_init_status>
    5418:	cf bf       	out	0x3f, r28	; 63
    541a:	0f 90       	pop	r0
    541c:	0f 90       	pop	r0
    541e:	0f 90       	pop	r0
    5420:	cf 91       	pop	r28
    5422:	08 95       	ret

00005424 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5424:	61 e0       	ldi	r22, 0x01	; 1
    5426:	70 e0       	ldi	r23, 0x00	; 0
    5428:	80 e0       	ldi	r24, 0x00	; 0
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	a6 db       	rcall	.-2228   	; 0x4b7a <delayus>
	if(!i2c.enable || i2c.done )
    542e:	80 91 37 1a 	lds	r24, 0x1A37	; 0x801a37 <i2c+0x1>
    5432:	88 23       	and	r24, r24
    5434:	39 f0       	breq	.+14     	; 0x5444 <i2c_done+0x20>
		return(1);
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <i2c+0x2>
    543c:	91 11       	cpse	r25, r1
    543e:	03 c0       	rjmp	.+6      	; 0x5446 <i2c_done+0x22>
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	08 95       	ret
    5444:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5446:	08 95       	ret

00005448 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5448:	61 e0       	ldi	r22, 0x01	; 1
    544a:	70 e0       	ldi	r23, 0x00	; 0
    544c:	80 e0       	ldi	r24, 0x00	; 0
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	94 db       	rcall	.-2264   	; 0x4b7a <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5452:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <i2c_task>
    5456:	88 23       	and	r24, r24
    5458:	39 f0       	breq	.+14     	; 0x5468 <i2c_task_done+0x20>
		return(1);
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	90 91 6a 17 	lds	r25, 0x176A	; 0x80176a <i2c_task+0x2>
    5460:	91 11       	cpse	r25, r1
    5462:	03 c0       	rjmp	.+6      	; 0x546a <i2c_task_done+0x22>
    5464:	80 e0       	ldi	r24, 0x00	; 0
    5466:	08 95       	ret
    5468:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    546a:	08 95       	ret

0000546c <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    546c:	e6 e3       	ldi	r30, 0x36	; 54
    546e:	fa e1       	ldi	r31, 0x1A	; 26
    5470:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5476:	8a e0       	ldi	r24, 0x0A	; 10
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	95 83       	std	Z+5, r25	; 0x05
    547c:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    547e:	85 ea       	ldi	r24, 0xA5	; 165
    5480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5484:	08 95       	ret

00005486 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5486:	ef 92       	push	r14
    5488:	ff 92       	push	r15
    548a:	0f 93       	push	r16
    548c:	1f 93       	push	r17
    548e:	cf 93       	push	r28
    5490:	df 93       	push	r29
	uint8_t sreg = SREG;
    5492:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    5494:	f8 94       	cli
	i2c_task.done = 0;
    5496:	10 92 6a 17 	sts	0x176A, r1	; 0x80176a <i2c_task+0x2>
	i2c_task.error = 0;
    549a:	10 92 6b 17 	sts	0x176B, r1	; 0x80176b <i2c_task+0x3>
	i2c_task.ind = 0;
    549e:	10 92 69 17 	sts	0x1769, r1	; 0x801769 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    54a2:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    54a4:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    54a6:	ee 24       	eor	r14, r14
    54a8:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    54aa:	0a e0       	ldi	r16, 0x0A	; 10
    54ac:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    54ae:	8c 2f       	mov	r24, r28
    54b0:	c6 de       	rcall	.-628    	; 0x523e <i2c_check_op>
    54b2:	88 23       	and	r24, r24
    54b4:	d1 f0       	breq	.+52     	; 0x54ea <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    54b6:	ec 2f       	mov	r30, r28
    54b8:	ee 0f       	add	r30, r30
    54ba:	ff 0b       	sbc	r31, r31
    54bc:	e8 5b       	subi	r30, 0xB8	; 184
    54be:	f8 4e       	sbci	r31, 0xE8	; 232
    54c0:	01 90       	ld	r0, Z+
    54c2:	f0 81       	ld	r31, Z
    54c4:	e0 2d       	mov	r30, r0
		o->enable = 1;
    54c6:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    54c8:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    54ca:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    54cc:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    54ce:	15 83       	std	Z+5, r17	; 0x05
    54d0:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    54d2:	d1 11       	cpse	r29, r1
    54d4:	07 c0       	rjmp	.+14     	; 0x54e4 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    54d6:	8a e0       	ldi	r24, 0x0A	; 10
    54d8:	a6 e3       	ldi	r26, 0x36	; 54
    54da:	ba e1       	ldi	r27, 0x1A	; 26
    54dc:	01 90       	ld	r0, Z+
    54de:	0d 92       	st	X+, r0
    54e0:	8a 95       	dec	r24
    54e2:	e1 f7       	brne	.-8      	; 0x54dc <i2c_task_run+0x56>
    54e4:	cf 5f       	subi	r28, 0xFF	; 255
    54e6:	d1 e0       	ldi	r29, 0x01	; 1
    54e8:	e2 cf       	rjmp	.-60     	; 0x54ae <i2c_task_run+0x28>
		}
	}

	if(run)
    54ea:	dd 23       	and	r29, r29
    54ec:	91 f0       	breq	.+36     	; 0x5512 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    54ee:	80 ee       	ldi	r24, 0xE0	; 224
    54f0:	9a e2       	ldi	r25, 0x2A	; 42
    54f2:	90 93 6d 17 	sts	0x176D, r25	; 0x80176d <i2c_callback+0x1>
    54f6:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <i2c_callback>

		i2c_task.enable = 1;
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <i2c_task>
		i2c_task.done = 0;
    5500:	10 92 6a 17 	sts	0x176A, r1	; 0x80176a <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5504:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5508:	8c 7f       	andi	r24, 0xFC	; 252
    550a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    550e:	ae df       	rcall	.-164    	; 0x546c <i2c_send_start>
    5510:	15 c0       	rjmp	.+42     	; 0x553c <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5512:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <i2c_callback+0x1>
    5516:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    551a:	10 92 68 17 	sts	0x1768, r1	; 0x801768 <i2c_task>
		i2c_task.done = 1;
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5524:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
        i2c.enable = 0;
    5528:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    552c:	84 e8       	ldi	r24, 0x84	; 132
    552e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5532:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5536:	8c 7f       	andi	r24, 0xFC	; 252
    5538:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    553c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5540:	ff be       	out	0x3f, r15	; 63

}
    5542:	cd b7       	in	r28, 0x3d	; 61
    5544:	de b7       	in	r29, 0x3e	; 62
    5546:	e6 e0       	ldi	r30, 0x06	; 6
    5548:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0000554c <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    554c:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    554e:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5550:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <i2c_callback+0x1>
    5554:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_callback>

	i2c.enable = 1; // Enabled
    5558:	31 e0       	ldi	r19, 0x01	; 1
    555a:	30 93 37 1a 	sts	0x1A37, r19	; 0x801a37 <i2c+0x1>
	i2c.done = 0;
    555e:	10 92 38 1a 	sts	0x1A38, r1	; 0x801a38 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5562:	88 0f       	add	r24, r24
    5564:	61 70       	andi	r22, 0x01	; 1
    5566:	68 2b       	or	r22, r24
    5568:	60 93 36 1a 	sts	0x1A36, r22	; 0x801a36 <i2c>
	i2c.flags = 0;
    556c:	10 92 39 1a 	sts	0x1A39, r1	; 0x801a39 <i2c+0x3>
    i2c.len = len;
    5570:	20 93 3c 1a 	sts	0x1A3C, r18	; 0x801a3c <i2c+0x6>
    i2c.ind = 0;
    5574:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x7>
    i2c.buf = buf;
    5578:	50 93 3f 1a 	sts	0x1A3F, r21	; 0x801a3f <i2c+0x9>
    557c:	40 93 3e 1a 	sts	0x1A3E, r20	; 0x801a3e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5580:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5584:	8c 7f       	andi	r24, 0xFC	; 252
    5586:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    558a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    558e:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5590:	6d df       	rcall	.-294    	; 0x546c <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5592:	48 df       	rcall	.-368    	; 0x5424 <i2c_done>
    5594:	88 23       	and	r24, r24
    5596:	e9 f3       	breq	.-6      	; 0x5592 <i2c_fn+0x46>
    5598:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    559a:	90 91 39 1a 	lds	r25, 0x1A39	; 0x801a39 <i2c+0x3>
    559e:	91 11       	cpse	r25, r1
    55a0:	80 e0       	ldi	r24, 0x00	; 0
    55a2:	08 95       	ret

000055a4 <i2c_send_stop>:
}
    55a4:	e6 e3       	ldi	r30, 0x36	; 54
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    55a6:	fa e1       	ldi	r31, 0x1A	; 26
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    55ac:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    55ae:	84 e9       	ldi	r24, 0x94	; 148
    55b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    55b4:	6a e0       	ldi	r22, 0x0A	; 10
    55b6:	70 e0       	ldi	r23, 0x00	; 0
    55b8:	80 e0       	ldi	r24, 0x00	; 0
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	de ca       	rjmp	.-2628   	; 0x4b7a <delayus>
    55be:	08 95       	ret

000055c0 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    55c0:	cf 93       	push	r28
    55c2:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    55c4:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <i2c_task>
    55c8:	88 23       	and	r24, r24
    55ca:	09 f4       	brne	.+2      	; 0x55ce <i2c_task_next_op+0xe>
    55cc:	46 c0       	rjmp	.+140    	; 0x565a <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    55ce:	80 91 69 17 	lds	r24, 0x1769	; 0x801769 <i2c_task+0x1>
    55d2:	35 de       	rcall	.-918    	; 0x523e <i2c_check_op>
    55d4:	88 23       	and	r24, r24
    55d6:	b1 f0       	breq	.+44     	; 0x5604 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    55d8:	e0 91 69 17 	lds	r30, 0x1769	; 0x801769 <i2c_task+0x1>
    55dc:	ee 0f       	add	r30, r30
    55de:	ff 0b       	sbc	r31, r31
    55e0:	e8 5b       	subi	r30, 0xB8	; 184
    55e2:	f8 4e       	sbci	r31, 0xE8	; 232
    55e4:	c0 81       	ld	r28, Z
    55e6:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    55e8:	8a e0       	ldi	r24, 0x0A	; 10
    55ea:	e6 e3       	ldi	r30, 0x36	; 54
    55ec:	fa e1       	ldi	r31, 0x1A	; 26
    55ee:	de 01       	movw	r26, r28
    55f0:	01 90       	ld	r0, Z+
    55f2:	0d 92       	st	X+, r0
    55f4:	8a 95       	dec	r24
    55f6:	e1 f7       	brne	.-8      	; 0x55f0 <i2c_task_next_op+0x30>
			if(o->flags)
    55f8:	8b 81       	ldd	r24, Y+3	; 0x03
    55fa:	88 23       	and	r24, r24
    55fc:	19 f0       	breq	.+6      	; 0x5604 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	80 93 6b 17 	sts	0x176B, r24	; 0x80176b <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5604:	80 91 69 17 	lds	r24, 0x1769	; 0x801769 <i2c_task+0x1>
    5608:	8f 5f       	subi	r24, 0xFF	; 255
    560a:	19 de       	rcall	.-974    	; 0x523e <i2c_check_op>
    560c:	88 23       	and	r24, r24
    560e:	29 f1       	breq	.+74     	; 0x565a <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5610:	e0 91 69 17 	lds	r30, 0x1769	; 0x801769 <i2c_task+0x1>
    5614:	ef 5f       	subi	r30, 0xFF	; 255
    5616:	e0 93 69 17 	sts	0x1769, r30	; 0x801769 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    561a:	ee 0f       	add	r30, r30
    561c:	ff 0b       	sbc	r31, r31
    561e:	e8 5b       	subi	r30, 0xB8	; 184
    5620:	f8 4e       	sbci	r31, 0xE8	; 232
    5622:	01 90       	ld	r0, Z+
    5624:	f0 81       	ld	r31, Z
    5626:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5628:	81 81       	ldd	r24, Z+1	; 0x01
    562a:	81 30       	cpi	r24, 0x01	; 1
    562c:	19 f0       	breq	.+6      	; 0x5634 <i2c_task_next_op+0x74>
    562e:	82 81       	ldd	r24, Z+2	; 0x02
    5630:	81 11       	cpse	r24, r1
    5632:	13 c0       	rjmp	.+38     	; 0x565a <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5634:	8a e0       	ldi	r24, 0x0A	; 10
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	95 83       	std	Z+5, r25	; 0x05
    563a:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    563c:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    563e:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5644:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5646:	8a e0       	ldi	r24, 0x0A	; 10
    5648:	a6 e3       	ldi	r26, 0x36	; 54
    564a:	ba e1       	ldi	r27, 0x1A	; 26
    564c:	01 90       	ld	r0, Z+
    564e:	0d 92       	st	X+, r0
    5650:	8a 95       	dec	r24

				i2c_send_start();
    5652:	e1 f7       	brne	.-8      	; 0x564c <i2c_task_next_op+0x8c>
    5654:	0b df       	rcall	.-490    	; 0x546c <i2c_send_start>

				return(1);
    5656:	81 e0       	ldi	r24, 0x01	; 1
    5658:	0f c0       	rjmp	.+30     	; 0x5678 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    565a:	10 92 68 17 	sts	0x1768, r1	; 0x801768 <i2c_task>
	i2c_task.done = 1;
    565e:	81 e0       	ldi	r24, 0x01	; 1
    5660:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5664:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
	i2c.enable = 0;
    5668:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
	i2c.flags = 0;
    566c:	10 92 39 1a 	sts	0x1A39, r1	; 0x801a39 <i2c+0x3>
	i2c.ind = 0;
    5670:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x7>

	i2c_send_stop();
    5674:	97 df       	rcall	.-210    	; 0x55a4 <i2c_send_stop>

	return(0);
    5676:	80 e0       	ldi	r24, 0x00	; 0
}
    5678:	df 91       	pop	r29
    567a:	cf 91       	pop	r28
    567c:	08 95       	ret

0000567e <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    567e:	e0 91 6c 17 	lds	r30, 0x176C	; 0x80176c <i2c_callback>
    5682:	f0 91 6d 17 	lds	r31, 0x176D	; 0x80176d <i2c_callback+0x1>
    5686:	30 97       	sbiw	r30, 0x00	; 0
    5688:	11 f0       	breq	.+4      	; 0x568e <i2c_next+0x10>
	    i2c_callback();
    568a:	09 95       	icall
    568c:	08 95       	ret
	else
		i2c_send_stop();
    568e:	8a cf       	rjmp	.-236    	; 0x55a4 <i2c_send_stop>
    5690:	08 95       	ret

00005692 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5692:	1f 92       	push	r1
    5694:	0f 92       	push	r0
    5696:	0f b6       	in	r0, 0x3f	; 63
    5698:	0f 92       	push	r0
    569a:	11 24       	eor	r1, r1
    569c:	0b b6       	in	r0, 0x3b	; 59
    569e:	0f 92       	push	r0
    56a0:	2f 93       	push	r18
    56a2:	3f 93       	push	r19
    56a4:	4f 93       	push	r20
    56a6:	5f 93       	push	r21
    56a8:	6f 93       	push	r22
    56aa:	7f 93       	push	r23
    56ac:	8f 93       	push	r24
    56ae:	9f 93       	push	r25
    56b0:	af 93       	push	r26
    56b2:	bf 93       	push	r27
    56b4:	ef 93       	push	r30
    56b6:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    56b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    56bc:	90 91 37 1a 	lds	r25, 0x1A37	; 0x801a37 <i2c+0x1>
    56c0:	99 23       	and	r25, r25
    56c2:	09 f1       	breq	.+66     	; 0x5706 <__vector_26+0x74>
    56c4:	90 91 38 1a 	lds	r25, 0x1A38	; 0x801a38 <i2c+0x2>
    56c8:	91 11       	cpse	r25, r1
    56ca:	1d c0       	rjmp	.+58     	; 0x5706 <__vector_26+0x74>
    56cc:	20 91 3e 1a 	lds	r18, 0x1A3E	; 0x801a3e <i2c+0x8>
    56d0:	30 91 3f 1a 	lds	r19, 0x1A3F	; 0x801a3f <i2c+0x9>
    56d4:	21 15       	cp	r18, r1
    56d6:	31 05       	cpc	r19, r1
    56d8:	b1 f0       	breq	.+44     	; 0x5706 <__vector_26+0x74>
    56da:	90 91 3c 1a 	lds	r25, 0x1A3C	; 0x801a3c <i2c+0x6>
    56de:	99 23       	and	r25, r25
    56e0:	91 f0       	breq	.+36     	; 0x5706 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    56e2:	40 91 3a 1a 	lds	r20, 0x1A3A	; 0x801a3a <i2c+0x4>
    56e6:	50 91 3b 1a 	lds	r21, 0x1A3B	; 0x801a3b <i2c+0x5>
    56ea:	45 2b       	or	r20, r21
    56ec:	71 f4       	brne	.+28     	; 0x570a <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    56ee:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <i2c+0x3>
    56f2:	81 60       	ori	r24, 0x01	; 1
    56f4:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <i2c+0x3>
		i2c_task.enable = 0;
    56f8:	10 92 68 17 	sts	0x1768, r1	; 0x801768 <i2c_task>
		i2c_task.done = 1;
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <i2c_task+0x2>
		i2c_task.error = 1;
    5702:	80 93 6b 17 	sts	0x176B, r24	; 0x80176b <i2c_task+0x3>
		i2c_send_stop();
    5706:	4e df       	rcall	.-356    	; 0x55a4 <i2c_send_stop>
		return;
    5708:	9b c0       	rjmp	.+310    	; 0x5840 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    570a:	88 7f       	andi	r24, 0xF8	; 248
    570c:	80 33       	cpi	r24, 0x30	; 48
    570e:	09 f4       	brne	.+2      	; 0x5712 <__vector_26+0x80>
    5710:	83 c0       	rjmp	.+262    	; 0x5818 <__vector_26+0x186>
    5712:	70 f4       	brcc	.+28     	; 0x5730 <__vector_26+0x9e>
    5714:	88 31       	cpi	r24, 0x18	; 24
    5716:	09 f1       	breq	.+66     	; 0x575a <__vector_26+0xc8>
    5718:	28 f4       	brcc	.+10     	; 0x5724 <__vector_26+0x92>
    571a:	88 30       	cpi	r24, 0x08	; 8
    571c:	c9 f0       	breq	.+50     	; 0x5750 <__vector_26+0xbe>
    571e:	80 31       	cpi	r24, 0x10	; 16
    5720:	b9 f0       	breq	.+46     	; 0x5750 <__vector_26+0xbe>
    5722:	83 c0       	rjmp	.+262    	; 0x582a <__vector_26+0x198>
    5724:	80 32       	cpi	r24, 0x20	; 32
    5726:	09 f4       	brne	.+2      	; 0x572a <__vector_26+0x98>
    5728:	65 c0       	rjmp	.+202    	; 0x57f4 <__vector_26+0x162>
    572a:	88 32       	cpi	r24, 0x28	; 40
    572c:	b1 f0       	breq	.+44     	; 0x575a <__vector_26+0xc8>
    572e:	7d c0       	rjmp	.+250    	; 0x582a <__vector_26+0x198>
    5730:	88 34       	cpi	r24, 0x48	; 72
    5732:	09 f4       	brne	.+2      	; 0x5736 <__vector_26+0xa4>
    5734:	68 c0       	rjmp	.+208    	; 0x5806 <__vector_26+0x174>
    5736:	38 f4       	brcc	.+14     	; 0x5746 <__vector_26+0xb4>
    5738:	88 33       	cpi	r24, 0x38	; 56
    573a:	09 f4       	brne	.+2      	; 0x573e <__vector_26+0xac>
    573c:	57 c0       	rjmp	.+174    	; 0x57ec <__vector_26+0x15a>
    573e:	80 34       	cpi	r24, 0x40	; 64
    5740:	09 f4       	brne	.+2      	; 0x5744 <__vector_26+0xb2>
    5742:	42 c0       	rjmp	.+132    	; 0x57c8 <__vector_26+0x136>
    5744:	72 c0       	rjmp	.+228    	; 0x582a <__vector_26+0x198>
    5746:	80 35       	cpi	r24, 0x50	; 80
    5748:	79 f1       	breq	.+94     	; 0x57a8 <__vector_26+0x116>
    574a:	88 35       	cpi	r24, 0x58	; 88
    574c:	b9 f0       	breq	.+46     	; 0x577c <__vector_26+0xea>
    574e:	6d c0       	rjmp	.+218    	; 0x582a <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5750:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x7>
			TWDR = i2c.address;
    5754:	80 91 36 1a 	lds	r24, 0x1A36	; 0x801a36 <i2c>
    5758:	0e c0       	rjmp	.+28     	; 0x5776 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    575a:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x7>
    575e:	89 17       	cp	r24, r25
    5760:	ec f4       	brge	.+58     	; 0x579c <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5762:	91 e0       	ldi	r25, 0x01	; 1
    5764:	98 0f       	add	r25, r24
    5766:	90 93 3d 1a 	sts	0x1A3D, r25	; 0x801a3d <i2c+0x7>
    576a:	f9 01       	movw	r30, r18
    576c:	e8 0f       	add	r30, r24
    576e:	f1 1d       	adc	r31, r1
    5770:	87 fd       	sbrc	r24, 7
    5772:	fa 95       	dec	r31
    5774:	80 81       	ld	r24, Z
    5776:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    577a:	36 c0       	rjmp	.+108    	; 0x57e8 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    577c:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x7>
    5780:	89 17       	cp	r24, r25
    5782:	64 f4       	brge	.+24     	; 0x579c <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5784:	91 e0       	ldi	r25, 0x01	; 1
    5786:	98 0f       	add	r25, r24
    5788:	90 93 3d 1a 	sts	0x1A3D, r25	; 0x801a3d <i2c+0x7>
    578c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5790:	f9 01       	movw	r30, r18
    5792:	e8 0f       	add	r30, r24
    5794:	f1 1d       	adc	r31, r1
    5796:	87 fd       	sbrc	r24, 7
    5798:	fa 95       	dec	r31
    579a:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
				i2c.enable = 0;
    57a2:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
    57a6:	4b c0       	rjmp	.+150    	; 0x583e <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    57a8:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x7>
    57ac:	89 17       	cp	r24, r25
    57ae:	64 f4       	brge	.+24     	; 0x57c8 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    57b0:	91 e0       	ldi	r25, 0x01	; 1
    57b2:	98 0f       	add	r25, r24
    57b4:	90 93 3d 1a 	sts	0x1A3D, r25	; 0x801a3d <i2c+0x7>
    57b8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    57bc:	f9 01       	movw	r30, r18
    57be:	e8 0f       	add	r30, r24
    57c0:	f1 1d       	adc	r31, r1
    57c2:	87 fd       	sbrc	r24, 7
    57c4:	fa 95       	dec	r31
    57c6:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    57c8:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x7>
    57cc:	08 2e       	mov	r0, r24
    57ce:	00 0c       	add	r0, r0
    57d0:	99 0b       	sbc	r25, r25
    57d2:	01 96       	adiw	r24, 0x01	; 1
    57d4:	20 91 3c 1a 	lds	r18, 0x1A3C	; 0x801a3c <i2c+0x6>
    57d8:	02 2e       	mov	r0, r18
    57da:	00 0c       	add	r0, r0
    57dc:	33 0b       	sbc	r19, r19
    57de:	82 17       	cp	r24, r18
    57e0:	93 07       	cpc	r25, r19
    57e2:	14 f4       	brge	.+4      	; 0x57e8 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    57e4:	85 ec       	ldi	r24, 0xC5	; 197
    57e6:	03 c0       	rjmp	.+6      	; 0x57ee <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    57e8:	85 e8       	ldi	r24, 0x85	; 133
    57ea:	01 c0       	rjmp	.+2      	; 0x57ee <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    57ec:	85 ea       	ldi	r24, 0xA5	; 165
    57ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    57f2:	26 c0       	rjmp	.+76     	; 0x5840 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
			i2c.enable = 0;
    57fa:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    57fe:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <i2c+0x3>
    5802:	88 60       	ori	r24, 0x08	; 8
    5804:	1a c0       	rjmp	.+52     	; 0x583a <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5806:	81 e0       	ldi	r24, 0x01	; 1
    5808:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
			i2c.enable = 0;
    580c:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5810:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <i2c+0x3>
    5814:	80 61       	ori	r24, 0x10	; 16
    5816:	11 c0       	rjmp	.+34     	; 0x583a <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
			i2c.enable = 0;
    581e:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5822:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <i2c+0x3>
    5826:	80 62       	ori	r24, 0x20	; 32
    5828:	08 c0       	rjmp	.+16     	; 0x583a <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	80 93 38 1a 	sts	0x1A38, r24	; 0x801a38 <i2c+0x2>
			i2c.enable = 0;
    5830:	10 92 37 1a 	sts	0x1A37, r1	; 0x801a37 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5834:	80 91 39 1a 	lds	r24, 0x1A39	; 0x801a39 <i2c+0x3>
    5838:	80 64       	ori	r24, 0x40	; 64
    583a:	80 93 39 1a 	sts	0x1A39, r24	; 0x801a39 <i2c+0x3>
			i2c_next();
    583e:	1f df       	rcall	.-450    	; 0x567e <i2c_next>
			break;
	}
}
    5840:	ff 91       	pop	r31
    5842:	ef 91       	pop	r30
    5844:	bf 91       	pop	r27
    5846:	af 91       	pop	r26
    5848:	9f 91       	pop	r25
    584a:	8f 91       	pop	r24
    584c:	7f 91       	pop	r23
    584e:	6f 91       	pop	r22
    5850:	5f 91       	pop	r21
    5852:	4f 91       	pop	r20
    5854:	3f 91       	pop	r19
    5856:	2f 91       	pop	r18
    5858:	0f 90       	pop	r0
    585a:	0b be       	out	0x3b, r0	; 59
    585c:	0f 90       	pop	r0
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	0f 90       	pop	r0
    5862:	1f 90       	pop	r1
    5864:	18 95       	reti

00005866 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5866:	cf 93       	push	r28
    5868:	00 d0       	rcall	.+0      	; 0x586a <i2c_print_error+0x4>
    586a:	00 d0       	rcall	.+0      	; 0x586c <i2c_print_error+0x6>
    586c:	1f 92       	push	r1
    int flags = o->flags;
    586e:	fc 01       	movw	r30, r24
    5870:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5872:	cc 23       	and	r28, r28
    5874:	09 f4       	brne	.+2      	; 0x5878 <i2c_print_error+0x12>
    5876:	67 c0       	rjmp	.+206    	; 0x5946 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5878:	80 91 38 1a 	lds	r24, 0x1A38	; 0x801a38 <i2c+0x2>
    587c:	81 11       	cpse	r24, r1
    587e:	03 c0       	rjmp	.+6      	; 0x5886 <i2c_print_error+0x20>
    5880:	88 e2       	ldi	r24, 0x28	; 40
    5882:	93 e0       	ldi	r25, 0x03	; 3
    5884:	02 c0       	rjmp	.+4      	; 0x588a <i2c_print_error+0x24>
    5886:	83 e2       	ldi	r24, 0x23	; 35
    5888:	93 e0       	ldi	r25, 0x03	; 3
    588a:	ed b7       	in	r30, 0x3d	; 61
    588c:	fe b7       	in	r31, 0x3e	; 62
    588e:	95 83       	std	Z+5, r25	; 0x05
    5890:	84 83       	std	Z+4, r24	; 0x04
    5892:	81 ec       	ldi	r24, 0xC1	; 193
    5894:	93 e0       	ldi	r25, 0x03	; 3
    5896:	a0 e0       	ldi	r26, 0x00	; 0
    5898:	81 83       	std	Z+1, r24	; 0x01
    589a:	92 83       	std	Z+2, r25	; 0x02
    589c:	a3 83       	std	Z+3, r26	; 0x03
    589e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    58a2:	c0 ff       	sbrs	r28, 0
    58a4:	0a c0       	rjmp	.+20     	; 0x58ba <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    58a6:	83 eb       	ldi	r24, 0xB3	; 179
    58a8:	93 e0       	ldi	r25, 0x03	; 3
    58aa:	a0 e0       	ldi	r26, 0x00	; 0
    58ac:	ed b7       	in	r30, 0x3d	; 61
    58ae:	fe b7       	in	r31, 0x3e	; 62
    58b0:	81 83       	std	Z+1, r24	; 0x01
    58b2:	92 83       	std	Z+2, r25	; 0x02
    58b4:	a3 83       	std	Z+3, r26	; 0x03
    58b6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		if(flags & I2C_OP_LEN)
    58ba:	c1 ff       	sbrs	r28, 1
    58bc:	0a c0       	rjmp	.+20     	; 0x58d2 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    58be:	89 ea       	ldi	r24, 0xA9	; 169
    58c0:	93 e0       	ldi	r25, 0x03	; 3
    58c2:	a0 e0       	ldi	r26, 0x00	; 0
    58c4:	ed b7       	in	r30, 0x3d	; 61
    58c6:	fe b7       	in	r31, 0x3e	; 62
    58c8:	81 83       	std	Z+1, r24	; 0x01
    58ca:	92 83       	std	Z+2, r25	; 0x02
    58cc:	a3 83       	std	Z+3, r26	; 0x03
    58ce:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		if(flags & I2C_OP_ERROR)
    58d2:	c2 ff       	sbrs	r28, 2
    58d4:	0a c0       	rjmp	.+20     	; 0x58ea <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    58d6:	8d e9       	ldi	r24, 0x9D	; 157
    58d8:	93 e0       	ldi	r25, 0x03	; 3
    58da:	a0 e0       	ldi	r26, 0x00	; 0
    58dc:	ed b7       	in	r30, 0x3d	; 61
    58de:	fe b7       	in	r31, 0x3e	; 62
    58e0:	81 83       	std	Z+1, r24	; 0x01
    58e2:	92 83       	std	Z+2, r25	; 0x02
    58e4:	a3 83       	std	Z+3, r26	; 0x03
    58e6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    58ea:	c4 ff       	sbrs	r28, 4
    58ec:	0a c0       	rjmp	.+20     	; 0x5902 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    58ee:	8b e8       	ldi	r24, 0x8B	; 139
    58f0:	93 e0       	ldi	r25, 0x03	; 3
    58f2:	a0 e0       	ldi	r26, 0x00	; 0
    58f4:	ed b7       	in	r30, 0x3d	; 61
    58f6:	fe b7       	in	r31, 0x3e	; 62
    58f8:	81 83       	std	Z+1, r24	; 0x01
    58fa:	92 83       	std	Z+2, r25	; 0x02
    58fc:	a3 83       	std	Z+3, r26	; 0x03
    58fe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5902:	c3 ff       	sbrs	r28, 3
    5904:	0a c0       	rjmp	.+20     	; 0x591a <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5906:	89 e7       	ldi	r24, 0x79	; 121
    5908:	93 e0       	ldi	r25, 0x03	; 3
    590a:	a0 e0       	ldi	r26, 0x00	; 0
    590c:	ed b7       	in	r30, 0x3d	; 61
    590e:	fe b7       	in	r31, 0x3e	; 62
    5910:	81 83       	std	Z+1, r24	; 0x01
    5912:	92 83       	std	Z+2, r25	; 0x02
    5914:	a3 83       	std	Z+3, r26	; 0x03
    5916:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    591a:	c5 ff       	sbrs	r28, 5
    591c:	0a c0       	rjmp	.+20     	; 0x5932 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    591e:	86 e6       	ldi	r24, 0x66	; 102
    5920:	93 e0       	ldi	r25, 0x03	; 3
    5922:	a0 e0       	ldi	r26, 0x00	; 0
    5924:	ed b7       	in	r30, 0x3d	; 61
    5926:	fe b7       	in	r31, 0x3e	; 62
    5928:	81 83       	std	Z+1, r24	; 0x01
    592a:	92 83       	std	Z+2, r25	; 0x02
    592c:	a3 83       	std	Z+3, r26	; 0x03
    592e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		printf("\n");
    5932:	84 e6       	ldi	r24, 0x64	; 100
    5934:	93 e0       	ldi	r25, 0x03	; 3
    5936:	a0 e0       	ldi	r26, 0x00	; 0
    5938:	ed b7       	in	r30, 0x3d	; 61
    593a:	fe b7       	in	r31, 0x3e	; 62
    593c:	81 83       	std	Z+1, r24	; 0x01
    593e:	92 83       	std	Z+2, r25	; 0x02
    5940:	a3 83       	std	Z+3, r26	; 0x03
    5942:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
	}
}
    5946:	0f 90       	pop	r0
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	0f 90       	pop	r0
    594e:	0f 90       	pop	r0
    5950:	cf 91       	pop	r28
    5952:	08 95       	ret

00005954 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5954:	6f 92       	push	r6
    5956:	7f 92       	push	r7
    5958:	8f 92       	push	r8
    595a:	af 92       	push	r10
    595c:	bf 92       	push	r11
    595e:	cf 92       	push	r12
    5960:	df 92       	push	r13
    5962:	ef 92       	push	r14
    5964:	0f 93       	push	r16
    5966:	1f 93       	push	r17
    5968:	cf 93       	push	r28
    596a:	df 93       	push	r29
    596c:	00 d0       	rcall	.+0      	; 0x596e <i2c_display_task_errors+0x1a>
    596e:	00 d0       	rcall	.+0      	; 0x5970 <i2c_display_task_errors+0x1c>
    5970:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5972:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <i2c_task+0x2>
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	ed b7       	in	r30, 0x3d	; 61
    597a:	fe b7       	in	r31, 0x3e	; 62
    597c:	95 83       	std	Z+5, r25	; 0x05
    597e:	84 83       	std	Z+4, r24	; 0x04
    5980:	81 e5       	ldi	r24, 0x51	; 81
    5982:	93 e0       	ldi	r25, 0x03	; 3
    5984:	a0 e0       	ldi	r26, 0x00	; 0
    5986:	81 83       	std	Z+1, r24	; 0x01
    5988:	92 83       	std	Z+2, r25	; 0x02
    598a:	a3 83       	std	Z+3, r26	; 0x03
    598c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5990:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <i2c_task+0x3>
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	ed b7       	in	r30, 0x3d	; 61
    5998:	fe b7       	in	r31, 0x3e	; 62
    599a:	95 83       	std	Z+5, r25	; 0x05
    599c:	84 83       	std	Z+4, r24	; 0x04
    599e:	8d e3       	ldi	r24, 0x3D	; 61
    59a0:	93 e0       	ldi	r25, 0x03	; 3
    59a2:	a0 e0       	ldi	r26, 0x00	; 0
    59a4:	81 83       	std	Z+1, r24	; 0x01
    59a6:	92 83       	std	Z+2, r25	; 0x02
    59a8:	a3 83       	std	Z+3, r26	; 0x03
    59aa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    59ae:	c8 e4       	ldi	r28, 0x48	; 72
    59b0:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    59b2:	00 e0       	ldi	r16, 0x00	; 0
    59b4:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    59b6:	83 e3       	ldi	r24, 0x33	; 51
    59b8:	93 e0       	ldi	r25, 0x03	; 3
    59ba:	6c 01       	movw	r12, r24
    59bc:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    59be:	81 e3       	ldi	r24, 0x31	; 49
    59c0:	93 e0       	ldi	r25, 0x03	; 3
    59c2:	3c 01       	movw	r6, r24
    59c4:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    59c6:	30 2f       	mov	r19, r16
    59c8:	21 2f       	mov	r18, r17
    59ca:	5e 01       	movw	r10, r28
    59cc:	0f 5f       	subi	r16, 0xFF	; 255
    59ce:	1f 4f       	sbci	r17, 0xFF	; 255
    59d0:	88 81       	ld	r24, Y
    59d2:	99 81       	ldd	r25, Y+1	; 0x01
    59d4:	89 2b       	or	r24, r25
    59d6:	b1 f0       	breq	.+44     	; 0x5a04 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    59d8:	ed b7       	in	r30, 0x3d	; 61
    59da:	fe b7       	in	r31, 0x3e	; 62
    59dc:	34 83       	std	Z+4, r19	; 0x04
    59de:	25 83       	std	Z+5, r18	; 0x05
    59e0:	c1 82       	std	Z+1, r12	; 0x01
    59e2:	d2 82       	std	Z+2, r13	; 0x02
    59e4:	e3 82       	std	Z+3, r14	; 0x03
    59e6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    59ea:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    59ec:	f5 01       	movw	r30, r10
    59ee:	80 81       	ld	r24, Z
    59f0:	91 81       	ldd	r25, Z+1	; 0x01
    59f2:	39 df       	rcall	.-398    	; 0x5866 <i2c_print_error>
		printf("\n");
    59f4:	ed b7       	in	r30, 0x3d	; 61
    59f6:	fe b7       	in	r31, 0x3e	; 62
    59f8:	61 82       	std	Z+1, r6	; 0x01
    59fa:	72 82       	std	Z+2, r7	; 0x02
    59fc:	83 82       	std	Z+3, r8	; 0x03
    59fe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5a02:	e1 cf       	rjmp	.-62     	; 0x59c6 <i2c_display_task_errors+0x72>
	}
}
    5a04:	0f 90       	pop	r0
    5a06:	0f 90       	pop	r0
    5a08:	0f 90       	pop	r0
    5a0a:	0f 90       	pop	r0
    5a0c:	0f 90       	pop	r0
    5a0e:	df 91       	pop	r29
    5a10:	cf 91       	pop	r28
    5a12:	1f 91       	pop	r17
    5a14:	0f 91       	pop	r16
    5a16:	ef 90       	pop	r14
    5a18:	df 90       	pop	r13
    5a1a:	cf 90       	pop	r12
    5a1c:	bf 90       	pop	r11
    5a1e:	af 90       	pop	r10
    5a20:	8f 90       	pop	r8
    5a22:	7f 90       	pop	r7
    5a24:	6f 90       	pop	r6
    5a26:	08 95       	ret

00005a28 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5a28:	6a e0       	ldi	r22, 0x0A	; 10
    5a2a:	0e 94 e3 e0 	call	0x1c1c6	; 0x1c1c6 <__udivmodqi4>
    5a2e:	82 95       	swap	r24
    5a30:	80 7f       	andi	r24, 0xF0	; 240
    5a32:	89 2b       	or	r24, r25
    5a34:	08 95       	ret

00005a36 <BCDtoBIN>:
    5a36:	98 2f       	mov	r25, r24
    5a38:	92 95       	swap	r25
    5a3a:	9f 70       	andi	r25, 0x0F	; 15
    5a3c:	8f 70       	andi	r24, 0x0F	; 15
    5a3e:	2a e0       	ldi	r18, 0x0A	; 10
    5a40:	92 9f       	mul	r25, r18
    5a42:	80 0d       	add	r24, r0
    5a44:	11 24       	eor	r1, r1
    5a46:	08 95       	ret

00005a48 <i2c_rtc_write>:
    5a48:	ac e0       	ldi	r26, 0x0C	; 12
    5a4a:	b0 e0       	ldi	r27, 0x00	; 0
    5a4c:	ea e2       	ldi	r30, 0x2A	; 42
    5a4e:	fd e2       	ldi	r31, 0x2D	; 45
    5a50:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    5a54:	9f ef       	ldi	r25, 0xFF	; 255
    5a56:	92 0f       	add	r25, r18
    5a58:	98 30       	cpi	r25, 0x08	; 8
    5a5a:	50 f5       	brcc	.+84     	; 0x5ab0 <i2c_rtc_write+0x68>
    5a5c:	6c 83       	std	Y+4, r22	; 0x04
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	02 2f       	mov	r16, r18
    5a62:	10 e0       	ldi	r17, 0x00	; 0
    5a64:	69 2f       	mov	r22, r25
    5a66:	09 2e       	mov	r0, r25
    5a68:	00 0c       	add	r0, r0
    5a6a:	77 0b       	sbc	r23, r23
    5a6c:	60 17       	cp	r22, r16
    5a6e:	71 07       	cpc	r23, r17
    5a70:	6c f4       	brge	.+26     	; 0x5a8c <i2c_rtc_write+0x44>
    5a72:	a5 e0       	ldi	r26, 0x05	; 5
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	ac 0f       	add	r26, r28
    5a78:	bd 1f       	adc	r27, r29
    5a7a:	a6 0f       	add	r26, r22
    5a7c:	b7 1f       	adc	r27, r23
    5a7e:	64 0f       	add	r22, r20
    5a80:	75 1f       	adc	r23, r21
    5a82:	fb 01       	movw	r30, r22
    5a84:	30 81       	ld	r19, Z
    5a86:	3c 93       	st	X, r19
    5a88:	9f 5f       	subi	r25, 0xFF	; 255
    5a8a:	ec cf       	rjmp	.-40     	; 0x5a64 <i2c_rtc_write+0x1c>
    5a8c:	2f 5f       	subi	r18, 0xFF	; 255
    5a8e:	ae 01       	movw	r20, r28
    5a90:	4c 5f       	subi	r20, 0xFC	; 252
    5a92:	5f 4f       	sbci	r21, 0xFF	; 255
    5a94:	60 e0       	ldi	r22, 0x00	; 0
    5a96:	5a dd       	rcall	.-1356   	; 0x554c <i2c_fn>
    5a98:	81 11       	cpse	r24, r1
    5a9a:	0c c0       	rjmp	.+24     	; 0x5ab4 <i2c_rtc_write+0x6c>
    5a9c:	8e ed       	ldi	r24, 0xDE	; 222
    5a9e:	94 e0       	ldi	r25, 0x04	; 4
    5aa0:	a0 e0       	ldi	r26, 0x00	; 0
    5aa2:	ed b7       	in	r30, 0x3d	; 61
    5aa4:	fe b7       	in	r31, 0x3e	; 62
    5aa6:	81 83       	std	Z+1, r24	; 0x01
    5aa8:	92 83       	std	Z+2, r25	; 0x02
    5aaa:	a3 83       	std	Z+3, r26	; 0x03
    5aac:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5ab0:	80 e0       	ldi	r24, 0x00	; 0
    5ab2:	01 c0       	rjmp	.+2      	; 0x5ab6 <i2c_rtc_write+0x6e>
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
    5ab6:	2c 96       	adiw	r28, 0x0c	; 12
    5ab8:	e4 e0       	ldi	r30, 0x04	; 4
    5aba:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00005abe <i2c_rtc_read>:
    5abe:	a4 e0       	ldi	r26, 0x04	; 4
    5ac0:	b0 e0       	ldi	r27, 0x00	; 0
    5ac2:	e5 e6       	ldi	r30, 0x65	; 101
    5ac4:	fd e2       	ldi	r31, 0x2D	; 45
    5ac6:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
    5aca:	6c 83       	std	Y+4, r22	; 0x04
    5acc:	9f ef       	ldi	r25, 0xFF	; 255
    5ace:	92 0f       	add	r25, r18
    5ad0:	98 30       	cpi	r25, 0x08	; 8
    5ad2:	f8 f4       	brcc	.+62     	; 0x5b12 <i2c_rtc_read+0x54>
    5ad4:	02 2f       	mov	r16, r18
    5ad6:	7a 01       	movw	r14, r20
    5ad8:	18 2f       	mov	r17, r24
    5ada:	21 e0       	ldi	r18, 0x01	; 1
    5adc:	ae 01       	movw	r20, r28
    5ade:	4c 5f       	subi	r20, 0xFC	; 252
    5ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae2:	60 e0       	ldi	r22, 0x00	; 0
    5ae4:	33 dd       	rcall	.-1434   	; 0x554c <i2c_fn>
    5ae6:	81 11       	cpse	r24, r1
    5ae8:	03 c0       	rjmp	.+6      	; 0x5af0 <i2c_rtc_read+0x32>
    5aea:	82 ec       	ldi	r24, 0xC2	; 194
    5aec:	94 e0       	ldi	r25, 0x04	; 4
    5aee:	09 c0       	rjmp	.+18     	; 0x5b02 <i2c_rtc_read+0x44>
    5af0:	20 2f       	mov	r18, r16
    5af2:	a7 01       	movw	r20, r14
    5af4:	61 e0       	ldi	r22, 0x01	; 1
    5af6:	81 2f       	mov	r24, r17
    5af8:	29 dd       	rcall	.-1454   	; 0x554c <i2c_fn>
    5afa:	81 11       	cpse	r24, r1
    5afc:	0c c0       	rjmp	.+24     	; 0x5b16 <i2c_rtc_read+0x58>
    5afe:	89 ea       	ldi	r24, 0xA9	; 169
    5b00:	94 e0       	ldi	r25, 0x04	; 4
    5b02:	a0 e0       	ldi	r26, 0x00	; 0
    5b04:	ed b7       	in	r30, 0x3d	; 61
    5b06:	fe b7       	in	r31, 0x3e	; 62
    5b08:	81 83       	std	Z+1, r24	; 0x01
    5b0a:	92 83       	std	Z+2, r25	; 0x02
    5b0c:	a3 83       	std	Z+3, r26	; 0x03
    5b0e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5b12:	80 e0       	ldi	r24, 0x00	; 0
    5b14:	01 c0       	rjmp	.+2      	; 0x5b18 <i2c_rtc_read+0x5a>
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	24 96       	adiw	r28, 0x04	; 4
    5b1a:	e6 e0       	ldi	r30, 0x06	; 6
    5b1c:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00005b20 <i2c_rtc_init>:
    5b20:	60 ea       	ldi	r22, 0xA0	; 160
    5b22:	76 e8       	ldi	r23, 0x86	; 134
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	18 cc       	rjmp	.-2000   	; 0x535a <i2c_init>
    5b2a:	08 95       	ret

00005b2c <rtc_write>:
    5b2c:	ab e0       	ldi	r26, 0x0B	; 11
    5b2e:	b0 e0       	ldi	r27, 0x00	; 0
    5b30:	ec e9       	ldi	r30, 0x9C	; 156
    5b32:	fd e2       	ldi	r31, 0x2D	; 45
    5b34:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    5b38:	8c 01       	movw	r16, r24
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	80 81       	ld	r24, Z
    5b3e:	74 df       	rcall	.-280    	; 0x5a28 <BINtoBCD>
    5b40:	8f 77       	andi	r24, 0x7F	; 127
    5b42:	8c 83       	std	Y+4, r24	; 0x04
    5b44:	f8 01       	movw	r30, r16
    5b46:	82 81       	ldd	r24, Z+2	; 0x02
    5b48:	6f df       	rcall	.-290    	; 0x5a28 <BINtoBCD>
    5b4a:	8f 77       	andi	r24, 0x7F	; 127
    5b4c:	8d 83       	std	Y+5, r24	; 0x05
    5b4e:	f8 01       	movw	r30, r16
    5b50:	84 81       	ldd	r24, Z+4	; 0x04
    5b52:	6a df       	rcall	.-300    	; 0x5a28 <BINtoBCD>
    5b54:	8f 73       	andi	r24, 0x3F	; 63
    5b56:	8e 83       	std	Y+6, r24	; 0x06
    5b58:	f8 01       	movw	r30, r16
    5b5a:	84 85       	ldd	r24, Z+12	; 0x0c
    5b5c:	87 70       	andi	r24, 0x07	; 7
    5b5e:	8f 5f       	subi	r24, 0xFF	; 255
    5b60:	8f 83       	std	Y+7, r24	; 0x07
    5b62:	86 81       	ldd	r24, Z+6	; 0x06
    5b64:	61 df       	rcall	.-318    	; 0x5a28 <BINtoBCD>
    5b66:	8f 73       	andi	r24, 0x3F	; 63
    5b68:	88 87       	std	Y+8, r24	; 0x08
    5b6a:	f8 01       	movw	r30, r16
    5b6c:	80 85       	ldd	r24, Z+8	; 0x08
    5b6e:	8f 5f       	subi	r24, 0xFF	; 255
    5b70:	5b df       	rcall	.-330    	; 0x5a28 <BINtoBCD>
    5b72:	8f 71       	andi	r24, 0x1F	; 31
    5b74:	89 87       	std	Y+9, r24	; 0x09
    5b76:	f8 01       	movw	r30, r16
    5b78:	82 85       	ldd	r24, Z+10	; 0x0a
    5b7a:	84 56       	subi	r24, 0x64	; 100
    5b7c:	55 df       	rcall	.-342    	; 0x5a28 <BINtoBCD>
    5b7e:	8a 87       	std	Y+10, r24	; 0x0a
    5b80:	83 e9       	ldi	r24, 0x93	; 147
    5b82:	8b 87       	std	Y+11, r24	; 0x0b
    5b84:	28 e0       	ldi	r18, 0x08	; 8
    5b86:	ae 01       	movw	r20, r28
    5b88:	4c 5f       	subi	r20, 0xFC	; 252
    5b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b8c:	60 e0       	ldi	r22, 0x00	; 0
    5b8e:	88 e6       	ldi	r24, 0x68	; 104
    5b90:	5b df       	rcall	.-330    	; 0x5a48 <i2c_rtc_write>
    5b92:	81 11       	cpse	r24, r1
    5b94:	0c c0       	rjmp	.+24     	; 0x5bae <rtc_write+0x82>
    5b96:	88 e9       	ldi	r24, 0x98	; 152
    5b98:	94 e0       	ldi	r25, 0x04	; 4
    5b9a:	a0 e0       	ldi	r26, 0x00	; 0
    5b9c:	ed b7       	in	r30, 0x3d	; 61
    5b9e:	fe b7       	in	r31, 0x3e	; 62
    5ba0:	81 83       	std	Z+1, r24	; 0x01
    5ba2:	92 83       	std	Z+2, r25	; 0x02
    5ba4:	a3 83       	std	Z+3, r26	; 0x03
    5ba6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	01 c0       	rjmp	.+2      	; 0x5bb0 <rtc_write+0x84>
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	2b 96       	adiw	r28, 0x0b	; 11
    5bb2:	e4 e0       	ldi	r30, 0x04	; 4
    5bb4:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00005bb8 <rtc_read>:
    5bb8:	ab e0       	ldi	r26, 0x0B	; 11
    5bba:	b0 e0       	ldi	r27, 0x00	; 0
    5bbc:	e2 ee       	ldi	r30, 0xE2	; 226
    5bbe:	fd e2       	ldi	r31, 0x2D	; 45
    5bc0:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    5bc4:	8c 01       	movw	r16, r24
    5bc6:	28 e0       	ldi	r18, 0x08	; 8
    5bc8:	ae 01       	movw	r20, r28
    5bca:	4c 5f       	subi	r20, 0xFC	; 252
    5bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    5bce:	60 e0       	ldi	r22, 0x00	; 0
    5bd0:	88 e6       	ldi	r24, 0x68	; 104
    5bd2:	75 df       	rcall	.-278    	; 0x5abe <i2c_rtc_read>
    5bd4:	81 11       	cpse	r24, r1
    5bd6:	0c c0       	rjmp	.+24     	; 0x5bf0 <rtc_read+0x38>
    5bd8:	88 e8       	ldi	r24, 0x88	; 136
    5bda:	94 e0       	ldi	r25, 0x04	; 4
    5bdc:	a0 e0       	ldi	r26, 0x00	; 0
    5bde:	ed b7       	in	r30, 0x3d	; 61
    5be0:	fe b7       	in	r31, 0x3e	; 62
    5be2:	81 83       	std	Z+1, r24	; 0x01
    5be4:	92 83       	std	Z+2, r25	; 0x02
    5be6:	a3 83       	std	Z+3, r26	; 0x03
    5be8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5bec:	80 e0       	ldi	r24, 0x00	; 0
    5bee:	33 c0       	rjmp	.+102    	; 0x5c56 <rtc_read+0x9e>
    5bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf2:	8f 77       	andi	r24, 0x7F	; 127
    5bf4:	20 df       	rcall	.-448    	; 0x5a36 <BCDtoBIN>
    5bf6:	90 e0       	ldi	r25, 0x00	; 0
    5bf8:	f8 01       	movw	r30, r16
    5bfa:	91 83       	std	Z+1, r25	; 0x01
    5bfc:	80 83       	st	Z, r24
    5bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    5c00:	8f 77       	andi	r24, 0x7F	; 127
    5c02:	19 df       	rcall	.-462    	; 0x5a36 <BCDtoBIN>
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	f8 01       	movw	r30, r16
    5c08:	93 83       	std	Z+3, r25	; 0x03
    5c0a:	82 83       	std	Z+2, r24	; 0x02
    5c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    5c0e:	8f 73       	andi	r24, 0x3F	; 63
    5c10:	12 df       	rcall	.-476    	; 0x5a36 <BCDtoBIN>
    5c12:	90 e0       	ldi	r25, 0x00	; 0
    5c14:	f8 01       	movw	r30, r16
    5c16:	95 83       	std	Z+5, r25	; 0x05
    5c18:	84 83       	std	Z+4, r24	; 0x04
    5c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    5c1c:	87 70       	andi	r24, 0x07	; 7
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	01 97       	sbiw	r24, 0x01	; 1
    5c22:	95 87       	std	Z+13, r25	; 0x0d
    5c24:	84 87       	std	Z+12, r24	; 0x0c
    5c26:	88 85       	ldd	r24, Y+8	; 0x08
    5c28:	8f 73       	andi	r24, 0x3F	; 63
    5c2a:	05 df       	rcall	.-502    	; 0x5a36 <BCDtoBIN>
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	f8 01       	movw	r30, r16
    5c30:	97 83       	std	Z+7, r25	; 0x07
    5c32:	86 83       	std	Z+6, r24	; 0x06
    5c34:	89 85       	ldd	r24, Y+9	; 0x09
    5c36:	8f 71       	andi	r24, 0x1F	; 31
    5c38:	fe de       	rcall	.-516    	; 0x5a36 <BCDtoBIN>
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	01 97       	sbiw	r24, 0x01	; 1
    5c3e:	f8 01       	movw	r30, r16
    5c40:	91 87       	std	Z+9, r25	; 0x09
    5c42:	80 87       	std	Z+8, r24	; 0x08
    5c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c46:	f7 de       	rcall	.-530    	; 0x5a36 <BCDtoBIN>
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	8c 59       	subi	r24, 0x9C	; 156
    5c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4e:	f8 01       	movw	r30, r16
    5c50:	93 87       	std	Z+11, r25	; 0x0b
    5c52:	82 87       	std	Z+10, r24	; 0x0a
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	2b 96       	adiw	r28, 0x0b	; 11
    5c58:	e4 e0       	ldi	r30, 0x04	; 4
    5c5a:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00005c5e <rtc_run>:
    5c5e:	a4 e0       	ldi	r26, 0x04	; 4
    5c60:	b0 e0       	ldi	r27, 0x00	; 0
    5c62:	e5 e3       	ldi	r30, 0x35	; 53
    5c64:	fe e2       	ldi	r31, 0x2E	; 46
    5c66:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    5c6a:	8c 01       	movw	r16, r24
    5c6c:	21 e0       	ldi	r18, 0x01	; 1
    5c6e:	ae 01       	movw	r20, r28
    5c70:	4c 5f       	subi	r20, 0xFC	; 252
    5c72:	5f 4f       	sbci	r21, 0xFF	; 255
    5c74:	60 e0       	ldi	r22, 0x00	; 0
    5c76:	88 e6       	ldi	r24, 0x68	; 104
    5c78:	22 df       	rcall	.-444    	; 0x5abe <i2c_rtc_read>
    5c7a:	81 11       	cpse	r24, r1
    5c7c:	03 c0       	rjmp	.+6      	; 0x5c84 <rtc_run+0x26>
    5c7e:	84 e7       	ldi	r24, 0x74	; 116
    5c80:	94 e0       	ldi	r25, 0x04	; 4
    5c82:	24 c0       	rjmp	.+72     	; 0x5ccc <rtc_run+0x6e>
    5c84:	8c 81       	ldd	r24, Y+4	; 0x04
    5c86:	0f 3f       	cpi	r16, 0xFF	; 255
    5c88:	ff ef       	ldi	r31, 0xFF	; 255
    5c8a:	1f 07       	cpc	r17, r31
    5c8c:	59 f4       	brne	.+22     	; 0x5ca4 <rtc_run+0x46>
    5c8e:	08 2e       	mov	r0, r24
    5c90:	00 0c       	add	r0, r0
    5c92:	99 0b       	sbc	r25, r25
    5c94:	80 95       	com	r24
    5c96:	90 95       	com	r25
    5c98:	89 2f       	mov	r24, r25
    5c9a:	88 1f       	adc	r24, r24
    5c9c:	88 27       	eor	r24, r24
    5c9e:	88 1f       	adc	r24, r24
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	20 c0       	rjmp	.+64     	; 0x5ce4 <rtc_run+0x86>
    5ca4:	8f 77       	andi	r24, 0x7F	; 127
    5ca6:	01 15       	cp	r16, r1
    5ca8:	11 05       	cpc	r17, r1
    5caa:	11 f4       	brne	.+4      	; 0x5cb0 <rtc_run+0x52>
    5cac:	90 e8       	ldi	r25, 0x80	; 128
    5cae:	01 c0       	rjmp	.+2      	; 0x5cb2 <rtc_run+0x54>
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	89 2b       	or	r24, r25
    5cb4:	8c 83       	std	Y+4, r24	; 0x04
    5cb6:	21 e0       	ldi	r18, 0x01	; 1
    5cb8:	ae 01       	movw	r20, r28
    5cba:	4c 5f       	subi	r20, 0xFC	; 252
    5cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cbe:	60 e0       	ldi	r22, 0x00	; 0
    5cc0:	88 e6       	ldi	r24, 0x68	; 104
    5cc2:	c2 de       	rcall	.-636    	; 0x5a48 <i2c_rtc_write>
    5cc4:	81 11       	cpse	r24, r1
    5cc6:	0d c0       	rjmp	.+26     	; 0x5ce2 <rtc_run+0x84>
    5cc8:	8f e5       	ldi	r24, 0x5F	; 95
    5cca:	94 e0       	ldi	r25, 0x04	; 4
    5ccc:	a0 e0       	ldi	r26, 0x00	; 0
    5cce:	ed b7       	in	r30, 0x3d	; 61
    5cd0:	fe b7       	in	r31, 0x3e	; 62
    5cd2:	81 83       	std	Z+1, r24	; 0x01
    5cd4:	92 83       	std	Z+2, r25	; 0x02
    5cd6:	a3 83       	std	Z+3, r26	; 0x03
    5cd8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5cdc:	8f ef       	ldi	r24, 0xFF	; 255
    5cde:	9f ef       	ldi	r25, 0xFF	; 255
    5ce0:	01 c0       	rjmp	.+2      	; 0x5ce4 <rtc_run+0x86>
    5ce2:	c8 01       	movw	r24, r16
    5ce4:	24 96       	adiw	r28, 0x04	; 4
    5ce6:	e4 e0       	ldi	r30, 0x04	; 4
    5ce8:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00005cec <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5cec:	a7 e0       	ldi	r26, 0x07	; 7
    5cee:	b0 e0       	ldi	r27, 0x00	; 0
    5cf0:	ec e7       	ldi	r30, 0x7C	; 124
    5cf2:	fe e2       	ldi	r31, 0x2E	; 46
    5cf4:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    5cf8:	8c 01       	movw	r16, r24
    5cfa:	4c 83       	std	Y+4, r20	; 0x04
    5cfc:	5d 83       	std	Y+5, r21	; 0x05
    5cfe:	6e 83       	std	Y+6, r22	; 0x06
    5d00:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5d02:	0e df       	rcall	.-484    	; 0x5b20 <i2c_rtc_init>

    if(!force)
    5d04:	01 15       	cp	r16, r1
    5d06:	11 05       	cpc	r17, r1
    5d08:	39 f4       	brne	.+14     	; 0x5d18 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5d0a:	8f ef       	ldi	r24, 0xFF	; 255
    5d0c:	9f ef       	ldi	r25, 0xFF	; 255
    5d0e:	a7 df       	rcall	.-178    	; 0x5c5e <rtc_run>
        if(state < 0)
    5d10:	87 fd       	sbrc	r24, 7
    5d12:	16 c0       	rjmp	.+44     	; 0x5d40 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5d14:	81 11       	cpse	r24, r1
    5d16:	22 c0       	rjmp	.+68     	; 0x5d5c <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	a0 df       	rcall	.-192    	; 0x5c5e <rtc_run>
    5d1e:	97 fd       	sbrc	r25, 7
    5d20:	0f c0       	rjmp	.+30     	; 0x5d40 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5d22:	ce 01       	movw	r24, r28
    5d24:	04 96       	adiw	r24, 0x04	; 4
    5d26:	a3 d6       	rcall	.+3398   	; 0x6a6e <gmtime>
    5d28:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5d2a:	81 f4       	brne	.+32     	; 0x5d4c <rtc_init+0x60>
    5d2c:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5d2e:	94 e0       	ldi	r25, 0x04	; 4
    5d30:	a0 e0       	ldi	r26, 0x00	; 0
    5d32:	ed b7       	in	r30, 0x3d	; 61
    5d34:	fe b7       	in	r31, 0x3e	; 62
    5d36:	81 83       	std	Z+1, r24	; 0x01
    5d38:	92 83       	std	Z+2, r25	; 0x02
    5d3a:	a3 83       	std	Z+3, r26	; 0x03
    5d3c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5d40:	10 92 de 19 	sts	0x19DE, r1	; 0x8019de <rtc_ok+0x1>
            rtc_ok = 0;
    5d44:	10 92 dd 19 	sts	0x19DD, r1	; 0x8019dd <rtc_ok>
            return 0;
    5d48:	80 e0       	ldi	r24, 0x00	; 0
    5d4a:	0e c0       	rjmp	.+28     	; 0x5d68 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5d4c:	ef de       	rcall	.-546    	; 0x5b2c <rtc_write>
    5d4e:	88 23       	and	r24, r24
    5d50:	69 f3       	breq	.-38     	; 0x5d2c <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	83 df       	rcall	.-250    	; 0x5c5e <rtc_run>
    5d58:	97 fd       	sbrc	r25, 7
    5d5a:	f2 cf       	rjmp	.-28     	; 0x5d40 <rtc_init+0x54>
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	90 93 de 19 	sts	0x19DE, r25	; 0x8019de <rtc_ok+0x1>
    5d64:	80 93 dd 19 	sts	0x19DD, r24	; 0x8019dd <rtc_ok>
    5d68:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5d6a:	e4 e0       	ldi	r30, 0x04	; 4
    5d6c:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00005d70 <islower>:
    5d70:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5d72:	21 56       	subi	r18, 0x61	; 97
    5d74:	31 09       	sbc	r19, r1
    5d76:	81 e0       	ldi	r24, 0x01	; 1
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	2a 31       	cpi	r18, 0x1A	; 26
    5d7c:	31 05       	cpc	r19, r1
    5d7e:	10 f0       	brcs	.+4      	; 0x5d84 <islower+0x14>
    5d80:	80 e0       	ldi	r24, 0x00	; 0
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	08 95       	ret

00005d86 <toupper>:
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
    5d8a:	ec 01       	movw	r28, r24
    5d8c:	f1 df       	rcall	.-30     	; 0x5d70 <islower>
    5d8e:	89 2b       	or	r24, r25
    5d90:	19 f0       	breq	.+6      	; 0x5d98 <toupper+0x12>
    5d92:	ce 01       	movw	r24, r28
    5d94:	80 97       	sbiw	r24, 0x20	; 32
    5d96:	01 c0       	rjmp	.+2      	; 0x5d9a <toupper+0x14>
    5d98:	ce 01       	movw	r24, r28
    5d9a:	df 91       	pop	r29
    5d9c:	cf 91       	pop	r28
    5d9e:	08 95       	ret

00005da0 <strcpy>:
    5da0:	fc 01       	movw	r30, r24
    5da2:	db 01       	movw	r26, r22
    5da4:	2d 91       	ld	r18, X+
    5da6:	bd 01       	movw	r22, r26
    5da8:	01 96       	adiw	r24, 0x01	; 1
    5daa:	22 23       	and	r18, r18
    5dac:	11 f0       	breq	.+4      	; 0x5db2 <strcpy+0x12>
    5dae:	20 83       	st	Z, r18
    5db0:	f7 cf       	rjmp	.-18     	; 0x5da0 <strcpy>
    5db2:	10 82       	st	Z, r1
    5db4:	08 95       	ret

00005db6 <strncpy>:
    5db6:	db 01       	movw	r26, r22
    5db8:	fc 01       	movw	r30, r24
    5dba:	2d 91       	ld	r18, X+
    5dbc:	21 11       	cpse	r18, r1
    5dbe:	03 c0       	rjmp	.+6      	; 0x5dc6 <strncpy+0x10>
    5dc0:	4e 0f       	add	r20, r30
    5dc2:	5f 1f       	adc	r21, r31
    5dc4:	08 c0       	rjmp	.+16     	; 0x5dd6 <strncpy+0x20>
    5dc6:	41 15       	cp	r20, r1
    5dc8:	51 05       	cpc	r21, r1
    5dca:	21 f0       	breq	.+8      	; 0x5dd4 <strncpy+0x1e>
    5dcc:	21 93       	st	Z+, r18
    5dce:	41 50       	subi	r20, 0x01	; 1
    5dd0:	51 09       	sbc	r21, r1
    5dd2:	f3 cf       	rjmp	.-26     	; 0x5dba <strncpy+0x4>
    5dd4:	08 95       	ret
    5dd6:	4e 17       	cp	r20, r30
    5dd8:	5f 07       	cpc	r21, r31
    5dda:	11 f0       	breq	.+4      	; 0x5de0 <strncpy+0x2a>
    5ddc:	11 92       	st	Z+, r1
    5dde:	fb cf       	rjmp	.-10     	; 0x5dd6 <strncpy+0x20>
    5de0:	08 95       	ret

00005de2 <strcat>:
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	d8 2f       	mov	r29, r24
    5de8:	c9 2f       	mov	r28, r25
    5dea:	28 2f       	mov	r18, r24
    5dec:	39 2f       	mov	r19, r25
    5dee:	c9 01       	movw	r24, r18
    5df0:	2f 5f       	subi	r18, 0xFF	; 255
    5df2:	3f 4f       	sbci	r19, 0xFF	; 255
    5df4:	fc 01       	movw	r30, r24
    5df6:	40 81       	ld	r20, Z
    5df8:	41 11       	cpse	r20, r1
    5dfa:	f9 cf       	rjmp	.-14     	; 0x5dee <strcat+0xc>
    5dfc:	d1 df       	rcall	.-94     	; 0x5da0 <strcpy>
    5dfe:	8d 2f       	mov	r24, r29
    5e00:	9c 2f       	mov	r25, r28
    5e02:	df 91       	pop	r29
    5e04:	cf 91       	pop	r28
    5e06:	08 95       	ret

00005e08 <reverse>:
    5e08:	fc 01       	movw	r30, r24
    5e0a:	01 90       	ld	r0, Z+
    5e0c:	00 20       	and	r0, r0
    5e0e:	e9 f7       	brne	.-6      	; 0x5e0a <reverse+0x2>
    5e10:	31 97       	sbiw	r30, 0x01	; 1
    5e12:	e8 1b       	sub	r30, r24
    5e14:	f9 0b       	sbc	r31, r25
    5e16:	af 01       	movw	r20, r30
    5e18:	55 95       	asr	r21
    5e1a:	47 95       	ror	r20
    5e1c:	e8 0f       	add	r30, r24
    5e1e:	f9 1f       	adc	r31, r25
    5e20:	dc 01       	movw	r26, r24
    5e22:	9d 01       	movw	r18, r26
    5e24:	28 1b       	sub	r18, r24
    5e26:	39 0b       	sbc	r19, r25
    5e28:	24 17       	cp	r18, r20
    5e2a:	35 07       	cpc	r19, r21
    5e2c:	2c f4       	brge	.+10     	; 0x5e38 <reverse+0x30>
    5e2e:	22 91       	ld	r18, -Z
    5e30:	3c 91       	ld	r19, X
    5e32:	30 83       	st	Z, r19
    5e34:	2d 93       	st	X+, r18
    5e36:	f5 cf       	rjmp	.-22     	; 0x5e22 <reverse+0x1a>
    5e38:	08 95       	ret

00005e3a <strupper>:
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	ec 01       	movw	r28, r24
    5e40:	88 81       	ld	r24, Y
    5e42:	88 23       	and	r24, r24
    5e44:	21 f0       	breq	.+8      	; 0x5e4e <strupper+0x14>
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	9e df       	rcall	.-196    	; 0x5d86 <toupper>
    5e4a:	89 93       	st	Y+, r24
    5e4c:	f9 cf       	rjmp	.-14     	; 0x5e40 <strupper+0x6>
    5e4e:	df 91       	pop	r29
    5e50:	cf 91       	pop	r28
    5e52:	08 95       	ret

00005e54 <strcmp>:
    5e54:	dc 01       	movw	r26, r24
    5e56:	fb 01       	movw	r30, r22
    5e58:	2d 91       	ld	r18, X+
    5e5a:	41 91       	ld	r20, Z+
    5e5c:	50 e0       	ldi	r21, 0x00	; 0
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	c9 01       	movw	r24, r18
    5e62:	84 1b       	sub	r24, r20
    5e64:	95 0b       	sbc	r25, r21
    5e66:	11 f4       	brne	.+4      	; 0x5e6c <strcmp+0x18>
    5e68:	45 2b       	or	r20, r21
    5e6a:	b1 f7       	brne	.-20     	; 0x5e58 <strcmp+0x4>
    5e6c:	08 95       	ret

00005e6e <strcasecmp>:
    5e6e:	ef 92       	push	r14
    5e70:	ff 92       	push	r15
    5e72:	0f 93       	push	r16
    5e74:	1f 93       	push	r17
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	7c 01       	movw	r14, r24
    5e7c:	8b 01       	movw	r16, r22
    5e7e:	f7 01       	movw	r30, r14
    5e80:	81 91       	ld	r24, Z+
    5e82:	7f 01       	movw	r14, r30
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	7f df       	rcall	.-258    	; 0x5d86 <toupper>
    5e88:	ec 01       	movw	r28, r24
    5e8a:	f8 01       	movw	r30, r16
    5e8c:	81 91       	ld	r24, Z+
    5e8e:	8f 01       	movw	r16, r30
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	79 df       	rcall	.-270    	; 0x5d86 <toupper>
    5e94:	9c 01       	movw	r18, r24
    5e96:	ce 01       	movw	r24, r28
    5e98:	82 1b       	sub	r24, r18
    5e9a:	93 0b       	sbc	r25, r19
    5e9c:	11 f4       	brne	.+4      	; 0x5ea2 <strcasecmp+0x34>
    5e9e:	23 2b       	or	r18, r19
    5ea0:	71 f7       	brne	.-36     	; 0x5e7e <strcasecmp+0x10>
    5ea2:	cd b7       	in	r28, 0x3d	; 61
    5ea4:	de b7       	in	r29, 0x3e	; 62
    5ea6:	e6 e0       	ldi	r30, 0x06	; 6
    5ea8:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00005eac <strncasecmp>:
    5eac:	a0 e0       	ldi	r26, 0x00	; 0
    5eae:	b0 e0       	ldi	r27, 0x00	; 0
    5eb0:	ec e5       	ldi	r30, 0x5C	; 92
    5eb2:	ff e2       	ldi	r31, 0x2F	; 47
    5eb4:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    5eb8:	8c 01       	movw	r16, r24
    5eba:	7b 01       	movw	r14, r22
    5ebc:	6c 01       	movw	r12, r24
    5ebe:	c4 0e       	add	r12, r20
    5ec0:	d5 1e       	adc	r13, r21
    5ec2:	0c 15       	cp	r16, r12
    5ec4:	1d 05       	cpc	r17, r13
    5ec6:	99 f0       	breq	.+38     	; 0x5eee <strncasecmp+0x42>
    5ec8:	f8 01       	movw	r30, r16
    5eca:	81 91       	ld	r24, Z+
    5ecc:	8f 01       	movw	r16, r30
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	5a df       	rcall	.-332    	; 0x5d86 <toupper>
    5ed2:	ec 01       	movw	r28, r24
    5ed4:	f7 01       	movw	r30, r14
    5ed6:	81 91       	ld	r24, Z+
    5ed8:	7f 01       	movw	r14, r30
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	54 df       	rcall	.-344    	; 0x5d86 <toupper>
    5ede:	9c 01       	movw	r18, r24
    5ee0:	ce 01       	movw	r24, r28
    5ee2:	82 1b       	sub	r24, r18
    5ee4:	93 0b       	sbc	r25, r19
    5ee6:	29 f4       	brne	.+10     	; 0x5ef2 <strncasecmp+0x46>
    5ee8:	23 2b       	or	r18, r19
    5eea:	59 f7       	brne	.-42     	; 0x5ec2 <strncasecmp+0x16>
    5eec:	02 c0       	rjmp	.+4      	; 0x5ef2 <strncasecmp+0x46>
    5eee:	80 e0       	ldi	r24, 0x00	; 0
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	cd b7       	in	r28, 0x3d	; 61
    5ef4:	de b7       	in	r29, 0x3e	; 62
    5ef6:	e8 e0       	ldi	r30, 0x08	; 8
    5ef8:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00005efc <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    5efc:	0f 93       	push	r16
    5efe:	1f 93       	push	r17
    5f00:	cf 93       	push	r28
    5f02:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    5f04:	00 97       	sbiw	r24, 0x00	; 0
    5f06:	99 f0       	breq	.+38     	; 0x5f2e <stralloc+0x32>
    5f08:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    5f0a:	fc 01       	movw	r30, r24
    5f0c:	01 90       	ld	r0, Z+
    5f0e:	00 20       	and	r0, r0
    5f10:	e9 f7       	brne	.-6      	; 0x5f0c <stralloc+0x10>
    5f12:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    5f14:	61 e0       	ldi	r22, 0x01	; 1
    5f16:	70 e0       	ldi	r23, 0x00	; 0
    5f18:	8c 1b       	sub	r24, r28
    5f1a:	9d 0b       	sbc	r25, r29
    5f1c:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
    5f20:	8c 01       	movw	r16, r24
    if(!ptr)
    5f22:	00 97       	sbiw	r24, 0x00	; 0
    5f24:	21 f0       	breq	.+8      	; 0x5f2e <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    5f26:	be 01       	movw	r22, r28
    5f28:	3b df       	rcall	.-394    	; 0x5da0 <strcpy>
    return(ptr);
    5f2a:	c8 01       	movw	r24, r16
    5f2c:	02 c0       	rjmp	.+4      	; 0x5f32 <stralloc+0x36>
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	90 e0       	ldi	r25, 0x00	; 0
}
    5f32:	df 91       	pop	r29
    5f34:	cf 91       	pop	r28
    5f36:	1f 91       	pop	r17
    5f38:	0f 91       	pop	r16
    5f3a:	08 95       	ret

00005f3c <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    5f3c:	00 d0       	rcall	.+0      	; 0x5f3e <sep+0x2>
    5f3e:	1f 92       	push	r1
    5f40:	8e e1       	ldi	r24, 0x1E	; 30
    5f42:	95 e0       	ldi	r25, 0x05	; 5
    5f44:	a0 e0       	ldi	r26, 0x00	; 0
    5f46:	ed b7       	in	r30, 0x3d	; 61
    5f48:	fe b7       	in	r31, 0x3e	; 62
    5f4a:	81 83       	std	Z+1, r24	; 0x01
    5f4c:	92 83       	std	Z+2, r25	; 0x02
    5f4e:	a3 83       	std	Z+3, r26	; 0x03
    5f50:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    5f54:	0f 90       	pop	r0
    5f56:	0f 90       	pop	r0
    5f58:	0f 90       	pop	r0
    5f5a:	08 95       	ret

00005f5c <trim_tail>:
    5f5c:	00 97       	sbiw	r24, 0x00	; 0
    5f5e:	69 f0       	breq	.+26     	; 0x5f7a <trim_tail+0x1e>
    5f60:	fc 01       	movw	r30, r24
    5f62:	01 90       	ld	r0, Z+
    5f64:	00 20       	and	r0, r0
    5f66:	e9 f7       	brne	.-6      	; 0x5f62 <trim_tail+0x6>
    5f68:	31 97       	sbiw	r30, 0x01	; 1
    5f6a:	e8 17       	cp	r30, r24
    5f6c:	f9 07       	cpc	r31, r25
    5f6e:	29 f0       	breq	.+10     	; 0x5f7a <trim_tail+0x1e>
    5f70:	22 91       	ld	r18, -Z
    5f72:	21 32       	cpi	r18, 0x21	; 33
    5f74:	10 f4       	brcc	.+4      	; 0x5f7a <trim_tail+0x1e>
    5f76:	10 82       	st	Z, r1
    5f78:	f8 cf       	rjmp	.-16     	; 0x5f6a <trim_tail+0xe>
    5f7a:	08 95       	ret

00005f7c <skipspaces>:
    5f7c:	00 97       	sbiw	r24, 0x00	; 0
    5f7e:	39 f0       	breq	.+14     	; 0x5f8e <skipspaces+0x12>
    5f80:	fc 01       	movw	r30, r24
    5f82:	cf 01       	movw	r24, r30
    5f84:	21 91       	ld	r18, Z+
    5f86:	20 32       	cpi	r18, 0x20	; 32
    5f88:	e1 f3       	breq	.-8      	; 0x5f82 <skipspaces+0x6>
    5f8a:	29 30       	cpi	r18, 0x09	; 9
    5f8c:	d1 f3       	breq	.-12     	; 0x5f82 <skipspaces+0x6>
    5f8e:	08 95       	ret

00005f90 <MATCH>:
    5f90:	cf 93       	push	r28
    5f92:	df 93       	push	r29
    5f94:	fb 01       	movw	r30, r22
    5f96:	01 90       	ld	r0, Z+
    5f98:	00 20       	and	r0, r0
    5f9a:	e9 f7       	brne	.-6      	; 0x5f96 <MATCH+0x6>
    5f9c:	31 97       	sbiw	r30, 0x01	; 1
    5f9e:	ef 01       	movw	r28, r30
    5fa0:	c6 1b       	sub	r28, r22
    5fa2:	d7 0b       	sbc	r29, r23
    5fa4:	57 df       	rcall	.-338    	; 0x5e54 <strcmp>
    5fa6:	89 2b       	or	r24, r25
    5fa8:	11 f4       	brne	.+4      	; 0x5fae <MATCH+0x1e>
    5faa:	ce 01       	movw	r24, r28
    5fac:	02 c0       	rjmp	.+4      	; 0x5fb2 <MATCH+0x22>
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	df 91       	pop	r29
    5fb4:	cf 91       	pop	r28
    5fb6:	08 95       	ret

00005fb8 <MATCHI>:
    5fb8:	cf 93       	push	r28
    5fba:	df 93       	push	r29
    5fbc:	fb 01       	movw	r30, r22
    5fbe:	01 90       	ld	r0, Z+
    5fc0:	00 20       	and	r0, r0
    5fc2:	e9 f7       	brne	.-6      	; 0x5fbe <MATCHI+0x6>
    5fc4:	31 97       	sbiw	r30, 0x01	; 1
    5fc6:	ef 01       	movw	r28, r30
    5fc8:	c6 1b       	sub	r28, r22
    5fca:	d7 0b       	sbc	r29, r23
    5fcc:	50 df       	rcall	.-352    	; 0x5e6e <strcasecmp>
    5fce:	89 2b       	or	r24, r25
    5fd0:	11 f4       	brne	.+4      	; 0x5fd6 <MATCHI+0x1e>
    5fd2:	ce 01       	movw	r24, r28
    5fd4:	02 c0       	rjmp	.+4      	; 0x5fda <MATCHI+0x22>
    5fd6:	80 e0       	ldi	r24, 0x00	; 0
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	08 95       	ret

00005fe0 <MATCHARGS>:
    5fe0:	a9 e0       	ldi	r26, 0x09	; 9
    5fe2:	b0 e0       	ldi	r27, 0x00	; 0
    5fe4:	e6 ef       	ldi	r30, 0xF6	; 246
    5fe6:	ff e2       	ldi	r31, 0x2F	; 47
    5fe8:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
    5fec:	eb 01       	movw	r28, r22
    5fee:	8a 01       	movw	r16, r20
    5ff0:	79 01       	movw	r14, r18
    5ff2:	e2 df       	rcall	.-60     	; 0x5fb8 <MATCHI>
    5ff4:	00 97       	sbiw	r24, 0x00	; 0
    5ff6:	c1 f0       	breq	.+48     	; 0x6028 <MATCHARGS+0x48>
    5ff8:	e0 16       	cp	r14, r16
    5ffa:	f1 06       	cpc	r15, r17
    5ffc:	9c f4       	brge	.+38     	; 0x6024 <MATCHARGS+0x44>
    5ffe:	ed b7       	in	r30, 0x3d	; 61
    6000:	fe b7       	in	r31, 0x3e	; 62
    6002:	f1 86       	std	Z+9, r15	; 0x09
    6004:	e0 86       	std	Z+8, r14	; 0x08
    6006:	17 83       	std	Z+7, r17	; 0x07
    6008:	06 83       	std	Z+6, r16	; 0x06
    600a:	d5 83       	std	Z+5, r29	; 0x05
    600c:	c4 83       	std	Z+4, r28	; 0x04
    600e:	88 ef       	ldi	r24, 0xF8	; 248
    6010:	94 e0       	ldi	r25, 0x04	; 4
    6012:	a0 e0       	ldi	r26, 0x00	; 0
    6014:	81 83       	std	Z+1, r24	; 0x01
    6016:	92 83       	std	Z+2, r25	; 0x02
    6018:	a3 83       	std	Z+3, r26	; 0x03
    601a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    601e:	80 e0       	ldi	r24, 0x00	; 0
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	02 c0       	rjmp	.+4      	; 0x6028 <MATCHARGS+0x48>
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	29 96       	adiw	r28, 0x09	; 9
    602e:	e6 e0       	ldi	r30, 0x06	; 6
    6030:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00006034 <MATCHI_LEN>:
    6034:	cf 93       	push	r28
    6036:	df 93       	push	r29
    6038:	00 97       	sbiw	r24, 0x00	; 0
    603a:	89 f0       	breq	.+34     	; 0x605e <MATCHI_LEN+0x2a>
    603c:	61 15       	cp	r22, r1
    603e:	71 05       	cpc	r23, r1
    6040:	71 f0       	breq	.+28     	; 0x605e <MATCHI_LEN+0x2a>
    6042:	eb 01       	movw	r28, r22
    6044:	09 90       	ld	r0, Y+
    6046:	00 20       	and	r0, r0
    6048:	e9 f7       	brne	.-6      	; 0x6044 <MATCHI_LEN+0x10>
    604a:	21 97       	sbiw	r28, 0x01	; 1
    604c:	c6 1b       	sub	r28, r22
    604e:	d7 0b       	sbc	r29, r23
    6050:	31 f0       	breq	.+12     	; 0x605e <MATCHI_LEN+0x2a>
    6052:	ae 01       	movw	r20, r28
    6054:	2b df       	rcall	.-426    	; 0x5eac <strncasecmp>
    6056:	89 2b       	or	r24, r25
    6058:	11 f4       	brne	.+4      	; 0x605e <MATCHI_LEN+0x2a>
    605a:	ce 01       	movw	r24, r28
    605c:	02 c0       	rjmp	.+4      	; 0x6062 <MATCHI_LEN+0x2e>
    605e:	80 e0       	ldi	r24, 0x00	; 0
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	df 91       	pop	r29
    6064:	cf 91       	pop	r28
    6066:	08 95       	ret

00006068 <split_args>:
    6068:	a0 e0       	ldi	r26, 0x00	; 0
    606a:	b0 e0       	ldi	r27, 0x00	; 0
    606c:	ea e3       	ldi	r30, 0x3A	; 58
    606e:	f0 e3       	ldi	r31, 0x30	; 48
    6070:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    6074:	dc 01       	movw	r26, r24
    6076:	6a 01       	movw	r12, r20
    6078:	8b 01       	movw	r16, r22
    607a:	fb 01       	movw	r30, r22
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	8c 15       	cp	r24, r12
    6082:	9d 05       	cpc	r25, r13
    6084:	24 f4       	brge	.+8      	; 0x608e <split_args+0x26>
    6086:	11 92       	st	Z+, r1
    6088:	11 92       	st	Z+, r1
    608a:	01 96       	adiw	r24, 0x01	; 1
    608c:	f9 cf       	rjmp	.-14     	; 0x6080 <split_args+0x18>
    608e:	c1 14       	cp	r12, r1
    6090:	d1 04       	cpc	r13, r1
    6092:	d9 f1       	breq	.+118    	; 0x610a <split_args+0xa2>
    6094:	10 97       	sbiw	r26, 0x00	; 0
    6096:	c9 f1       	breq	.+114    	; 0x610a <split_args+0xa2>
    6098:	ee 24       	eor	r14, r14
    609a:	e3 94       	inc	r14
    609c:	f1 2c       	mov	r15, r1
    609e:	c0 e0       	ldi	r28, 0x00	; 0
    60a0:	d0 e0       	ldi	r29, 0x00	; 0
    60a2:	8c 91       	ld	r24, X
    60a4:	88 23       	and	r24, r24
    60a6:	b1 f1       	breq	.+108    	; 0x6114 <split_args+0xac>
    60a8:	cc 15       	cp	r28, r12
    60aa:	dd 05       	cpc	r29, r13
    60ac:	9c f5       	brge	.+102    	; 0x6114 <split_args+0xac>
    60ae:	cd 01       	movw	r24, r26
    60b0:	65 df       	rcall	.-310    	; 0x5f7c <skipspaces>
    60b2:	dc 01       	movw	r26, r24
    60b4:	2c 91       	ld	r18, X
    60b6:	22 23       	and	r18, r18
    60b8:	69 f1       	breq	.+90     	; 0x6114 <split_args+0xac>
    60ba:	22 32       	cpi	r18, 0x22	; 34
    60bc:	79 f4       	brne	.+30     	; 0x60dc <split_args+0x74>
    60be:	fc 01       	movw	r30, r24
    60c0:	31 96       	adiw	r30, 0x01	; 1
    60c2:	d8 01       	movw	r26, r16
    60c4:	ed 93       	st	X+, r30
    60c6:	fc 93       	st	X, r31
    60c8:	df 01       	movw	r26, r30
    60ca:	80 81       	ld	r24, Z
    60cc:	31 96       	adiw	r30, 0x01	; 1
    60ce:	88 23       	and	r24, r24
    60d0:	a9 f0       	breq	.+42     	; 0x60fc <split_args+0x94>
    60d2:	82 32       	cpi	r24, 0x22	; 34
    60d4:	c9 f7       	brne	.-14     	; 0x60c8 <split_args+0x60>
    60d6:	1c 92       	st	X, r1
    60d8:	df 01       	movw	r26, r30
    60da:	10 c0       	rjmp	.+32     	; 0x60fc <split_args+0x94>
    60dc:	f8 01       	movw	r30, r16
    60de:	91 83       	std	Z+1, r25	; 0x01
    60e0:	80 83       	st	Z, r24
    60e2:	fc 01       	movw	r30, r24
    60e4:	2e 2f       	mov	r18, r30
    60e6:	9f 2f       	mov	r25, r31
    60e8:	81 91       	ld	r24, Z+
    60ea:	3f ed       	ldi	r19, 0xDF	; 223
    60ec:	38 0f       	add	r19, r24
    60ee:	3e 35       	cpi	r19, 0x5E	; 94
    60f0:	c8 f3       	brcs	.-14     	; 0x60e4 <split_args+0x7c>
    60f2:	88 23       	and	r24, r24
    60f4:	69 f0       	breq	.+26     	; 0x6110 <split_args+0xa8>
    60f6:	a2 2f       	mov	r26, r18
    60f8:	b9 2f       	mov	r27, r25
    60fa:	1d 92       	st	X+, r1
    60fc:	21 96       	adiw	r28, 0x01	; 1
    60fe:	ff ef       	ldi	r31, 0xFF	; 255
    6100:	ef 1a       	sub	r14, r31
    6102:	ff 0a       	sbc	r15, r31
    6104:	0e 5f       	subi	r16, 0xFE	; 254
    6106:	1f 4f       	sbci	r17, 0xFF	; 255
    6108:	cc cf       	rjmp	.-104    	; 0x60a2 <split_args+0x3a>
    610a:	80 e0       	ldi	r24, 0x00	; 0
    610c:	90 e0       	ldi	r25, 0x00	; 0
    610e:	03 c0       	rjmp	.+6      	; 0x6116 <split_args+0xae>
    6110:	c7 01       	movw	r24, r14
    6112:	01 c0       	rjmp	.+2      	; 0x6116 <split_args+0xae>
    6114:	ce 01       	movw	r24, r28
    6116:	cd b7       	in	r28, 0x3d	; 61
    6118:	de b7       	in	r29, 0x3e	; 62
    611a:	e8 e0       	ldi	r30, 0x08	; 8
    611c:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00006120 <get_token>:
    6120:	ef 92       	push	r14
    6122:	ff 92       	push	r15
    6124:	0f 93       	push	r16
    6126:	1f 93       	push	r17
    6128:	cf 93       	push	r28
    612a:	df 93       	push	r29
    612c:	eb 01       	movw	r28, r22
    612e:	8a 01       	movw	r16, r20
    6130:	18 82       	st	Y, r1
    6132:	00 97       	sbiw	r24, 0x00	; 0
    6134:	89 f1       	breq	.+98     	; 0x6198 <get_token+0x78>
    6136:	fc 01       	movw	r30, r24
    6138:	20 81       	ld	r18, Z
    613a:	22 23       	and	r18, r18
    613c:	79 f1       	breq	.+94     	; 0x619c <get_token+0x7c>
    613e:	1e df       	rcall	.-452    	; 0x5f7c <skipspaces>
    6140:	7c 01       	movw	r14, r24
    6142:	0c df       	rcall	.-488    	; 0x5f5c <trim_tail>
    6144:	f7 01       	movw	r30, r14
    6146:	cf 01       	movw	r24, r30
    6148:	21 91       	ld	r18, Z+
    614a:	21 32       	cpi	r18, 0x21	; 33
    614c:	e0 f0       	brcs	.+56     	; 0x6186 <get_token+0x66>
    614e:	10 16       	cp	r1, r16
    6150:	11 06       	cpc	r1, r17
    6152:	cc f4       	brge	.+50     	; 0x6186 <get_token+0x66>
    6154:	22 32       	cpi	r18, 0x22	; 34
    6156:	79 f4       	brne	.+30     	; 0x6176 <get_token+0x56>
    6158:	fc 01       	movw	r30, r24
    615a:	31 96       	adiw	r30, 0x01	; 1
    615c:	0c 0f       	add	r16, r28
    615e:	1d 1f       	adc	r17, r29
    6160:	cf 01       	movw	r24, r30
    6162:	21 91       	ld	r18, Z+
    6164:	22 23       	and	r18, r18
    6166:	79 f0       	breq	.+30     	; 0x6186 <get_token+0x66>
    6168:	22 32       	cpi	r18, 0x22	; 34
    616a:	59 f0       	breq	.+22     	; 0x6182 <get_token+0x62>
    616c:	c0 17       	cp	r28, r16
    616e:	d1 07       	cpc	r29, r17
    6170:	51 f0       	breq	.+20     	; 0x6186 <get_token+0x66>
    6172:	29 93       	st	Y+, r18
    6174:	f5 cf       	rjmp	.-22     	; 0x6160 <get_token+0x40>
    6176:	2c 32       	cpi	r18, 0x2C	; 44
    6178:	31 f0       	breq	.+12     	; 0x6186 <get_token+0x66>
    617a:	29 93       	st	Y+, r18
    617c:	01 50       	subi	r16, 0x01	; 1
    617e:	11 09       	sbc	r17, r1
    6180:	e2 cf       	rjmp	.-60     	; 0x6146 <get_token+0x26>
    6182:	cf 01       	movw	r24, r30
    6184:	18 82       	st	Y, r1
    6186:	fa de       	rcall	.-524    	; 0x5f7c <skipspaces>
    6188:	fc 01       	movw	r30, r24
    618a:	80 81       	ld	r24, Z
    618c:	8c 32       	cpi	r24, 0x2C	; 44
    618e:	09 f4       	brne	.+2      	; 0x6192 <get_token+0x72>
    6190:	31 96       	adiw	r30, 0x01	; 1
    6192:	18 82       	st	Y, r1
    6194:	cf 01       	movw	r24, r30
    6196:	02 c0       	rjmp	.+4      	; 0x619c <get_token+0x7c>
    6198:	80 e0       	ldi	r24, 0x00	; 0
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	cd b7       	in	r28, 0x3d	; 61
    619e:	de b7       	in	r29, 0x3e	; 62
    61a0:	e6 e0       	ldi	r30, 0x06	; 6
    61a2:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

000061a6 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    61a6:	a2 e0       	ldi	r26, 0x02	; 2
    61a8:	b0 e0       	ldi	r27, 0x00	; 0
    61aa:	e9 ed       	ldi	r30, 0xD9	; 217
    61ac:	f0 e3       	ldi	r31, 0x30	; 48
    61ae:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    61b2:	00 97       	sbiw	r24, 0x00	; 0
    61b4:	79 f1       	breq	.+94     	; 0x6214 <get_value+0x6e>
    61b6:	fc 01       	movw	r30, r24
    61b8:	20 81       	ld	r18, Z
    61ba:	22 23       	and	r18, r18
    61bc:	59 f1       	breq	.+86     	; 0x6214 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    61be:	de de       	rcall	.-580    	; 0x5f7c <skipspaces>
    61c0:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    61c2:	6f e2       	ldi	r22, 0x2F	; 47
    61c4:	73 e0       	ldi	r23, 0x03	; 3
    61c6:	36 df       	rcall	.-404    	; 0x6034 <MATCHI_LEN>
    61c8:	00 97       	sbiw	r24, 0x00	; 0
    61ca:	29 f0       	breq	.+10     	; 0x61d6 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    61cc:	08 0f       	add	r16, r24
    61ce:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    61d0:	40 e1       	ldi	r20, 0x10	; 16
    61d2:	50 e0       	ldi	r21, 0x00	; 0
    61d4:	18 c0       	rjmp	.+48     	; 0x6206 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    61d6:	62 e3       	ldi	r22, 0x32	; 50
    61d8:	73 e0       	ldi	r23, 0x03	; 3
    61da:	c8 01       	movw	r24, r16
    61dc:	2b df       	rcall	.-426    	; 0x6034 <MATCHI_LEN>
    61de:	00 97       	sbiw	r24, 0x00	; 0
    61e0:	29 f0       	breq	.+10     	; 0x61ec <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    61e2:	08 0f       	add	r16, r24
    61e4:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    61e6:	48 e0       	ldi	r20, 0x08	; 8
    61e8:	50 e0       	ldi	r21, 0x00	; 0
    61ea:	0d c0       	rjmp	.+26     	; 0x6206 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    61ec:	65 e3       	ldi	r22, 0x35	; 53
    61ee:	73 e0       	ldi	r23, 0x03	; 3
    61f0:	c8 01       	movw	r24, r16
    61f2:	20 df       	rcall	.-448    	; 0x6034 <MATCHI_LEN>
    61f4:	00 97       	sbiw	r24, 0x00	; 0
    61f6:	29 f0       	breq	.+10     	; 0x6202 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    61f8:	08 0f       	add	r16, r24
    61fa:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    61fc:	42 e0       	ldi	r20, 0x02	; 2
    61fe:	50 e0       	ldi	r21, 0x00	; 0
    6200:	02 c0       	rjmp	.+4      	; 0x6206 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6202:	4a e0       	ldi	r20, 0x0A	; 10
    6204:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6206:	be 01       	movw	r22, r28
    6208:	6f 5f       	subi	r22, 0xFF	; 255
    620a:	7f 4f       	sbci	r23, 0xFF	; 255
    620c:	c8 01       	movw	r24, r16
    620e:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    6212:	03 c0       	rjmp	.+6      	; 0x621a <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6214:	60 e0       	ldi	r22, 0x00	; 0
    6216:	70 e0       	ldi	r23, 0x00	; 0
    6218:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    621a:	22 96       	adiw	r28, 0x02	; 2
    621c:	e4 e0       	ldi	r30, 0x04	; 4
    621e:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00006222 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6222:	78 94       	sei
    6224:	08 95       	ret

00006226 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6226:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6228:	89 e0       	ldi	r24, 0x09	; 9
    622a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    622e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6232:	8f e1       	ldi	r24, 0x1F	; 31
    6234:	9e e4       	ldi	r25, 0x4E	; 78
    6236:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    623a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    623e:	ef e6       	ldi	r30, 0x6F	; 111
    6240:	f0 e0       	ldi	r31, 0x00	; 0
    6242:	80 81       	ld	r24, Z
    6244:	82 60       	ori	r24, 0x02	; 2
    6246:	80 83       	st	Z, r24
    sei();
    6248:	78 94       	sei
    624a:	08 95       	ret

0000624c <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    624c:	1f 92       	push	r1
    624e:	0f 92       	push	r0
    6250:	0f b6       	in	r0, 0x3f	; 63
    6252:	0f 92       	push	r0
    6254:	11 24       	eor	r1, r1
    6256:	0b b6       	in	r0, 0x3b	; 59
    6258:	0f 92       	push	r0
    625a:	2f 93       	push	r18
    625c:	3f 93       	push	r19
    625e:	4f 93       	push	r20
    6260:	5f 93       	push	r21
    6262:	6f 93       	push	r22
    6264:	7f 93       	push	r23
    6266:	8f 93       	push	r24
    6268:	9f 93       	push	r25
    626a:	af 93       	push	r26
    626c:	bf 93       	push	r27
    626e:	ef 93       	push	r30
    6270:	ff 93       	push	r31
    execute_timers();
    6272:	36 d2       	rcall	.+1132   	; 0x66e0 <execute_timers>
}
    6274:	ff 91       	pop	r31
    6276:	ef 91       	pop	r30
    6278:	bf 91       	pop	r27
    627a:	af 91       	pop	r26
    627c:	9f 91       	pop	r25
    627e:	8f 91       	pop	r24
    6280:	7f 91       	pop	r23
    6282:	6f 91       	pop	r22
    6284:	5f 91       	pop	r21
    6286:	4f 91       	pop	r20
    6288:	3f 91       	pop	r19
    628a:	2f 91       	pop	r18
    628c:	0f 90       	pop	r0
    628e:	0b be       	out	0x3b, r0	; 59
    6290:	0f 90       	pop	r0
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	0f 90       	pop	r0
    6296:	1f 90       	pop	r1
    6298:	18 95       	reti

0000629a <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    629a:	0f 93       	push	r16
    629c:	1f 93       	push	r17
    629e:	cf 93       	push	r28
    62a0:	df 93       	push	r29
    62a2:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    62a4:	f8 94       	cli

    count1 = TCNT1;
    62a6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    62aa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    62ae:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <__clock>
    62b2:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <__clock+0x1>
    62b6:	a0 91 42 1a 	lds	r26, 0x1A42	; 0x801a42 <__clock+0x2>
    62ba:	b0 91 43 1a 	lds	r27, 0x1A43	; 0x801a43 <__clock+0x3>
    62be:	80 83       	st	Z, r24
    62c0:	91 83       	std	Z+1, r25	; 0x01
    62c2:	a2 83       	std	Z+2, r26	; 0x02
    62c4:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    62c6:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <__clock+0x4>
    62ca:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <__clock+0x5>
    62ce:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <__clock+0x6>
    62d2:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <__clock+0x7>
    62d6:	84 83       	std	Z+4, r24	; 0x04
    62d8:	95 83       	std	Z+5, r25	; 0x05
    62da:	a6 83       	std	Z+6, r26	; 0x06
    62dc:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    62de:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    62e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    62e6:	b1 9b       	sbis	0x16, 1	; 22
    62e8:	03 c0       	rjmp	.+6      	; 0x62f0 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    62ea:	c0 e0       	ldi	r28, 0x00	; 0
    62ec:	d0 e0       	ldi	r29, 0x00	; 0
    62ee:	3f c0       	rjmp	.+126    	; 0x636e <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    62f0:	82 17       	cp	r24, r18
    62f2:	93 07       	cpc	r25, r19
    62f4:	d0 f1       	brcs	.+116    	; 0x636a <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    62f6:	c0 e0       	ldi	r28, 0x00	; 0
    62f8:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    62fa:	40 e0       	ldi	r20, 0x00	; 0
    62fc:	50 e0       	ldi	r21, 0x00	; 0
    62fe:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6300:	9a 01       	movw	r18, r20
    6302:	ab 01       	movw	r20, r22
    6304:	28 0f       	add	r18, r24
    6306:	39 1f       	adc	r19, r25
    6308:	41 1d       	adc	r20, r1
    630a:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    630c:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    630e:	a2 e3       	ldi	r26, 0x32	; 50
    6310:	b0 e0       	ldi	r27, 0x00	; 0
    6312:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    6316:	04 81       	ldd	r16, Z+4	; 0x04
    6318:	15 81       	ldd	r17, Z+5	; 0x05
    631a:	26 81       	ldd	r18, Z+6	; 0x06
    631c:	37 81       	ldd	r19, Z+7	; 0x07
    631e:	dc 01       	movw	r26, r24
    6320:	cb 01       	movw	r24, r22
    6322:	80 0f       	add	r24, r16
    6324:	91 1f       	adc	r25, r17
    6326:	a2 1f       	adc	r26, r18
    6328:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    632a:	81 15       	cp	r24, r1
    632c:	2a ec       	ldi	r18, 0xCA	; 202
    632e:	92 07       	cpc	r25, r18
    6330:	2a e9       	ldi	r18, 0x9A	; 154
    6332:	a2 07       	cpc	r26, r18
    6334:	2b e3       	ldi	r18, 0x3B	; 59
    6336:	b2 07       	cpc	r27, r18
    6338:	2c f4       	brge	.+10     	; 0x6344 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    633a:	84 83       	std	Z+4, r24	; 0x04
    633c:	95 83       	std	Z+5, r25	; 0x05
    633e:	a6 83       	std	Z+6, r26	; 0x06
    6340:	b7 83       	std	Z+7, r27	; 0x07
    6342:	1a c0       	rjmp	.+52     	; 0x6378 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6344:	9a 5c       	subi	r25, 0xCA	; 202
    6346:	aa 49       	sbci	r26, 0x9A	; 154
    6348:	bb 43       	sbci	r27, 0x3B	; 59
    634a:	84 83       	std	Z+4, r24	; 0x04
    634c:	95 83       	std	Z+5, r25	; 0x05
    634e:	a6 83       	std	Z+6, r26	; 0x06
    6350:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6352:	80 81       	ld	r24, Z
    6354:	91 81       	ldd	r25, Z+1	; 0x01
    6356:	a2 81       	ldd	r26, Z+2	; 0x02
    6358:	b3 81       	ldd	r27, Z+3	; 0x03
    635a:	01 96       	adiw	r24, 0x01	; 1
    635c:	a1 1d       	adc	r26, r1
    635e:	b1 1d       	adc	r27, r1
    6360:	80 83       	st	Z, r24
    6362:	91 83       	std	Z+1, r25	; 0x01
    6364:	a2 83       	std	Z+2, r26	; 0x02
    6366:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6368:	07 c0       	rjmp	.+14     	; 0x6378 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    636a:	cf ef       	ldi	r28, 0xFF	; 255
    636c:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    636e:	40 e2       	ldi	r20, 0x20	; 32
    6370:	5e e4       	ldi	r21, 0x4E	; 78
    6372:	60 e0       	ldi	r22, 0x00	; 0
    6374:	70 e0       	ldi	r23, 0x00	; 0
    6376:	c4 cf       	rjmp	.-120    	; 0x6300 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6378:	ce 01       	movw	r24, r28
    637a:	df 91       	pop	r29
    637c:	cf 91       	pop	r28
    637e:	1f 91       	pop	r17
    6380:	0f 91       	pop	r16
    6382:	08 95       	ret

00006384 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6384:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <__clock+0x4>
    6388:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <__clock+0x5>
    638c:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <__clock+0x6>
    6390:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <__clock+0x7>
    6394:	80 5c       	subi	r24, 0xC0	; 192
    6396:	9d 4b       	sbci	r25, 0xBD	; 189
    6398:	a0 4f       	sbci	r26, 0xF0	; 240
    639a:	bf 4f       	sbci	r27, 0xFF	; 255
    639c:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <__clock+0x4>
    63a0:	90 93 45 1a 	sts	0x1A45, r25	; 0x801a45 <__clock+0x5>
    63a4:	a0 93 46 1a 	sts	0x1A46, r26	; 0x801a46 <__clock+0x6>
    63a8:	b0 93 47 1a 	sts	0x1A47, r27	; 0x801a47 <__clock+0x7>
    63ac:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <__clock+0x4>
    63b0:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <__clock+0x5>
    63b4:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <__clock+0x6>
    63b8:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <__clock+0x7>
    63bc:	81 15       	cp	r24, r1
    63be:	9a 4c       	sbci	r25, 0xCA	; 202
    63c0:	aa 49       	sbci	r26, 0x9A	; 154
    63c2:	bb 43       	sbci	r27, 0x3B	; 59
    63c4:	dc f0       	brlt	.+54     	; 0x63fc <clock_task+0x78>
    63c6:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <__clock>
    63ca:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <__clock+0x1>
    63ce:	a0 91 42 1a 	lds	r26, 0x1A42	; 0x801a42 <__clock+0x2>
    63d2:	b0 91 43 1a 	lds	r27, 0x1A43	; 0x801a43 <__clock+0x3>
    63d6:	01 96       	adiw	r24, 0x01	; 1
    63d8:	a1 1d       	adc	r26, r1
    63da:	b1 1d       	adc	r27, r1
    63dc:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <__clock>
    63e0:	90 93 41 1a 	sts	0x1A41, r25	; 0x801a41 <__clock+0x1>
    63e4:	a0 93 42 1a 	sts	0x1A42, r26	; 0x801a42 <__clock+0x2>
    63e8:	b0 93 43 1a 	sts	0x1A43, r27	; 0x801a43 <__clock+0x3>
    63ec:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <__clock+0x4>
    63f0:	10 92 45 1a 	sts	0x1A45, r1	; 0x801a45 <__clock+0x5>
    63f4:	10 92 46 1a 	sts	0x1A46, r1	; 0x801a46 <__clock+0x6>
    63f8:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <__clock+0x7>
    63fc:	08 95       	ret

000063fe <clock_settime.part.2>:
    63fe:	fc 01       	movw	r30, r24
    6400:	84 81       	ldd	r24, Z+4	; 0x04
    6402:	95 81       	ldd	r25, Z+5	; 0x05
    6404:	a6 81       	ldd	r26, Z+6	; 0x06
    6406:	b7 81       	ldd	r27, Z+7	; 0x07
    6408:	80 93 44 1a 	sts	0x1A44, r24	; 0x801a44 <__clock+0x4>
    640c:	90 93 45 1a 	sts	0x1A45, r25	; 0x801a45 <__clock+0x5>
    6410:	a0 93 46 1a 	sts	0x1A46, r26	; 0x801a46 <__clock+0x6>
    6414:	b0 93 47 1a 	sts	0x1A47, r27	; 0x801a47 <__clock+0x7>
    6418:	80 81       	ld	r24, Z
    641a:	91 81       	ldd	r25, Z+1	; 0x01
    641c:	a2 81       	ldd	r26, Z+2	; 0x02
    641e:	b3 81       	ldd	r27, Z+3	; 0x03
    6420:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <__clock>
    6424:	90 93 41 1a 	sts	0x1A41, r25	; 0x801a41 <__clock+0x1>
    6428:	a0 93 42 1a 	sts	0x1A42, r26	; 0x801a42 <__clock+0x2>
    642c:	b0 93 43 1a 	sts	0x1A43, r27	; 0x801a43 <__clock+0x3>
    6430:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <__clock+0x4>
    6434:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <__clock+0x5>
    6438:	a0 91 46 1a 	lds	r26, 0x1A46	; 0x801a46 <__clock+0x6>
    643c:	b0 91 47 1a 	lds	r27, 0x1A47	; 0x801a47 <__clock+0x7>
    6440:	44 81       	ldd	r20, Z+4	; 0x04
    6442:	55 81       	ldd	r21, Z+5	; 0x05
    6444:	66 81       	ldd	r22, Z+6	; 0x06
    6446:	77 81       	ldd	r23, Z+7	; 0x07
    6448:	48 17       	cp	r20, r24
    644a:	59 07       	cpc	r21, r25
    644c:	6a 07       	cpc	r22, r26
    644e:	7b 07       	cpc	r23, r27
    6450:	b9 f6       	brne	.-82     	; 0x6400 <clock_settime.part.2+0x2>
    6452:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <__clock>
    6456:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <__clock+0x1>
    645a:	a0 91 42 1a 	lds	r26, 0x1A42	; 0x801a42 <__clock+0x2>
    645e:	b0 91 43 1a 	lds	r27, 0x1A43	; 0x801a43 <__clock+0x3>
    6462:	40 81       	ld	r20, Z
    6464:	51 81       	ldd	r21, Z+1	; 0x01
    6466:	62 81       	ldd	r22, Z+2	; 0x02
    6468:	73 81       	ldd	r23, Z+3	; 0x03
    646a:	48 17       	cp	r20, r24
    646c:	59 07       	cpc	r21, r25
    646e:	6a 07       	cpc	r22, r26
    6470:	7b 07       	cpc	r23, r27
    6472:	31 f6       	brne	.-116    	; 0x6400 <clock_settime.part.2+0x2>
    6474:	80 e0       	ldi	r24, 0x00	; 0
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	08 95       	ret

0000647a <set_timers>:
    647a:	00 d0       	rcall	.+0      	; 0x647c <set_timers+0x2>
    647c:	1f 92       	push	r1
    647e:	00 97       	sbiw	r24, 0x00	; 0
    6480:	79 f1       	breq	.+94     	; 0x64e0 <set_timers+0x66>
    6482:	e8 e4       	ldi	r30, 0x48	; 72
    6484:	fa e1       	ldi	r31, 0x1A	; 26
    6486:	4f ef       	ldi	r20, 0xFF	; 255
    6488:	5f ef       	ldi	r21, 0xFF	; 255
    648a:	20 e0       	ldi	r18, 0x00	; 0
    648c:	30 e0       	ldi	r19, 0x00	; 0
    648e:	60 81       	ld	r22, Z
    6490:	71 81       	ldd	r23, Z+1	; 0x01
    6492:	86 17       	cp	r24, r22
    6494:	97 07       	cpc	r25, r23
    6496:	79 f0       	breq	.+30     	; 0x64b6 <set_timers+0x3c>
    6498:	67 2b       	or	r22, r23
    649a:	71 f4       	brne	.+28     	; 0x64b8 <set_timers+0x3e>
    649c:	f9 01       	movw	r30, r18
    649e:	ee 0f       	add	r30, r30
    64a0:	ff 1f       	adc	r31, r31
    64a2:	e2 0f       	add	r30, r18
    64a4:	f3 1f       	adc	r31, r19
    64a6:	e8 5b       	subi	r30, 0xB8	; 184
    64a8:	f5 4e       	sbci	r31, 0xE5	; 229
    64aa:	91 83       	std	Z+1, r25	; 0x01
    64ac:	80 83       	st	Z, r24
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	82 83       	std	Z+2, r24	; 0x02
    64b2:	c9 01       	movw	r24, r18
    64b4:	19 c0       	rjmp	.+50     	; 0x64e8 <set_timers+0x6e>
    64b6:	a9 01       	movw	r20, r18
    64b8:	2f 5f       	subi	r18, 0xFF	; 255
    64ba:	3f 4f       	sbci	r19, 0xFF	; 255
    64bc:	33 96       	adiw	r30, 0x03	; 3
    64be:	28 30       	cpi	r18, 0x08	; 8
    64c0:	31 05       	cpc	r19, r1
    64c2:	29 f7       	brne	.-54     	; 0x648e <set_timers+0x14>
    64c4:	4f 3f       	cpi	r20, 0xFF	; 255
    64c6:	8f ef       	ldi	r24, 0xFF	; 255
    64c8:	58 07       	cpc	r21, r24
    64ca:	69 f4       	brne	.+26     	; 0x64e6 <set_timers+0x6c>
    64cc:	8d ec       	ldi	r24, 0xCD	; 205
    64ce:	95 e0       	ldi	r25, 0x05	; 5
    64d0:	a0 e0       	ldi	r26, 0x00	; 0
    64d2:	ed b7       	in	r30, 0x3d	; 61
    64d4:	fe b7       	in	r31, 0x3e	; 62
    64d6:	81 83       	std	Z+1, r24	; 0x01
    64d8:	92 83       	std	Z+2, r25	; 0x02
    64da:	a3 83       	std	Z+3, r26	; 0x03
    64dc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    64e0:	8f ef       	ldi	r24, 0xFF	; 255
    64e2:	9f ef       	ldi	r25, 0xFF	; 255
    64e4:	01 c0       	rjmp	.+2      	; 0x64e8 <set_timers+0x6e>
    64e6:	ca 01       	movw	r24, r20
    64e8:	0f 90       	pop	r0
    64ea:	0f 90       	pop	r0
    64ec:	0f 90       	pop	r0
    64ee:	08 95       	ret

000064f0 <delete_all_timers>:
    64f0:	e8 e4       	ldi	r30, 0x48	; 72
    64f2:	fa e1       	ldi	r31, 0x1A	; 26
    64f4:	12 82       	std	Z+2, r1	; 0x02
    64f6:	11 82       	std	Z+1, r1	; 0x01
    64f8:	10 82       	st	Z, r1
    64fa:	33 96       	adiw	r30, 0x03	; 3
    64fc:	8a e1       	ldi	r24, 0x1A	; 26
    64fe:	e0 36       	cpi	r30, 0x60	; 96
    6500:	f8 07       	cpc	r31, r24
    6502:	c1 f7       	brne	.-16     	; 0x64f4 <delete_all_timers+0x4>
    6504:	08 95       	ret

00006506 <subtract_timespec>:
    6506:	0f 93       	push	r16
    6508:	1f 93       	push	r17
    650a:	cf 93       	push	r28
    650c:	df 93       	push	r29
    650e:	fc 01       	movw	r30, r24
    6510:	84 81       	ldd	r24, Z+4	; 0x04
    6512:	95 81       	ldd	r25, Z+5	; 0x05
    6514:	a6 81       	ldd	r26, Z+6	; 0x06
    6516:	b7 81       	ldd	r27, Z+7	; 0x07
    6518:	eb 01       	movw	r28, r22
    651a:	0c 81       	ldd	r16, Y+4	; 0x04
    651c:	1d 81       	ldd	r17, Y+5	; 0x05
    651e:	2e 81       	ldd	r18, Y+6	; 0x06
    6520:	3f 81       	ldd	r19, Y+7	; 0x07
    6522:	80 1b       	sub	r24, r16
    6524:	91 0b       	sbc	r25, r17
    6526:	a2 0b       	sbc	r26, r18
    6528:	b3 0b       	sbc	r27, r19
    652a:	b7 fd       	sbrc	r27, 7
    652c:	05 c0       	rjmp	.+10     	; 0x6538 <subtract_timespec+0x32>
    652e:	84 83       	std	Z+4, r24	; 0x04
    6530:	95 83       	std	Z+5, r25	; 0x05
    6532:	a6 83       	std	Z+6, r26	; 0x06
    6534:	b7 83       	std	Z+7, r27	; 0x07
    6536:	12 c0       	rjmp	.+36     	; 0x655c <subtract_timespec+0x56>
    6538:	96 53       	subi	r25, 0x36	; 54
    653a:	a5 46       	sbci	r26, 0x65	; 101
    653c:	b4 4c       	sbci	r27, 0xC4	; 196
    653e:	84 83       	std	Z+4, r24	; 0x04
    6540:	95 83       	std	Z+5, r25	; 0x05
    6542:	a6 83       	std	Z+6, r26	; 0x06
    6544:	b7 83       	std	Z+7, r27	; 0x07
    6546:	80 81       	ld	r24, Z
    6548:	91 81       	ldd	r25, Z+1	; 0x01
    654a:	a2 81       	ldd	r26, Z+2	; 0x02
    654c:	b3 81       	ldd	r27, Z+3	; 0x03
    654e:	01 97       	sbiw	r24, 0x01	; 1
    6550:	a1 09       	sbc	r26, r1
    6552:	b1 09       	sbc	r27, r1
    6554:	80 83       	st	Z, r24
    6556:	91 83       	std	Z+1, r25	; 0x01
    6558:	a2 83       	std	Z+2, r26	; 0x02
    655a:	b3 83       	std	Z+3, r27	; 0x03
    655c:	80 81       	ld	r24, Z
    655e:	91 81       	ldd	r25, Z+1	; 0x01
    6560:	a2 81       	ldd	r26, Z+2	; 0x02
    6562:	b3 81       	ldd	r27, Z+3	; 0x03
    6564:	eb 01       	movw	r28, r22
    6566:	48 81       	ld	r20, Y
    6568:	59 81       	ldd	r21, Y+1	; 0x01
    656a:	6a 81       	ldd	r22, Y+2	; 0x02
    656c:	7b 81       	ldd	r23, Y+3	; 0x03
    656e:	84 1b       	sub	r24, r20
    6570:	95 0b       	sbc	r25, r21
    6572:	a6 0b       	sbc	r26, r22
    6574:	b7 0b       	sbc	r27, r23
    6576:	80 83       	st	Z, r24
    6578:	91 83       	std	Z+1, r25	; 0x01
    657a:	a2 83       	std	Z+2, r26	; 0x02
    657c:	b3 83       	std	Z+3, r27	; 0x03
    657e:	df 91       	pop	r29
    6580:	cf 91       	pop	r28
    6582:	1f 91       	pop	r17
    6584:	0f 91       	pop	r16
    6586:	08 95       	ret

00006588 <ts_to_str>:
    6588:	ad b7       	in	r26, 0x3d	; 61
    658a:	be b7       	in	r27, 0x3e	; 62
    658c:	1f 97       	sbiw	r26, 0x0f	; 15
    658e:	0f b6       	in	r0, 0x3f	; 63
    6590:	f8 94       	cli
    6592:	be bf       	out	0x3e, r27	; 62
    6594:	0f be       	out	0x3f, r0	; 63
    6596:	ad bf       	out	0x3d, r26	; 61
    6598:	fc 01       	movw	r30, r24
    659a:	44 81       	ldd	r20, Z+4	; 0x04
    659c:	55 81       	ldd	r21, Z+5	; 0x05
    659e:	66 81       	ldd	r22, Z+6	; 0x06
    65a0:	77 81       	ldd	r23, Z+7	; 0x07
    65a2:	ed b7       	in	r30, 0x3d	; 61
    65a4:	fe b7       	in	r31, 0x3e	; 62
    65a6:	44 87       	std	Z+12, r20	; 0x0c
    65a8:	55 87       	std	Z+13, r21	; 0x0d
    65aa:	66 87       	std	Z+14, r22	; 0x0e
    65ac:	77 87       	std	Z+15, r23	; 0x0f
    65ae:	fc 01       	movw	r30, r24
    65b0:	80 81       	ld	r24, Z
    65b2:	91 81       	ldd	r25, Z+1	; 0x01
    65b4:	a2 81       	ldd	r26, Z+2	; 0x02
    65b6:	b3 81       	ldd	r27, Z+3	; 0x03
    65b8:	ed b7       	in	r30, 0x3d	; 61
    65ba:	fe b7       	in	r31, 0x3e	; 62
    65bc:	80 87       	std	Z+8, r24	; 0x08
    65be:	91 87       	std	Z+9, r25	; 0x09
    65c0:	a2 87       	std	Z+10, r26	; 0x0a
    65c2:	b3 87       	std	Z+11, r27	; 0x0b
    65c4:	83 ec       	ldi	r24, 0xC3	; 195
    65c6:	95 e0       	ldi	r25, 0x05	; 5
    65c8:	a0 e0       	ldi	r26, 0x00	; 0
    65ca:	85 83       	std	Z+5, r24	; 0x05
    65cc:	96 83       	std	Z+6, r25	; 0x06
    65ce:	a7 83       	std	Z+7, r26	; 0x07
    65d0:	8f e1       	ldi	r24, 0x1F	; 31
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	94 83       	std	Z+4, r25	; 0x04
    65d6:	83 83       	std	Z+3, r24	; 0x03
    65d8:	86 e7       	ldi	r24, 0x76	; 118
    65da:	97 e1       	ldi	r25, 0x17	; 23
    65dc:	92 83       	std	Z+2, r25	; 0x02
    65de:	81 83       	std	Z+1, r24	; 0x01
    65e0:	0e 94 67 44 	call	0x88ce	; 0x88ce <snprintf_P>
    65e4:	86 e7       	ldi	r24, 0x76	; 118
    65e6:	97 e1       	ldi	r25, 0x17	; 23
    65e8:	ad b7       	in	r26, 0x3d	; 61
    65ea:	be b7       	in	r27, 0x3e	; 62
    65ec:	1f 96       	adiw	r26, 0x0f	; 15
    65ee:	0f b6       	in	r0, 0x3f	; 63
    65f0:	f8 94       	cli
    65f2:	be bf       	out	0x3e, r27	; 62
    65f4:	0f be       	out	0x3f, r0	; 63
    65f6:	ad bf       	out	0x3d, r26	; 61
    65f8:	08 95       	ret

000065fa <clock_elapsed_begin>:
    65fa:	6e e6       	ldi	r22, 0x6E	; 110
    65fc:	77 e1       	ldi	r23, 0x17	; 23
    65fe:	80 e0       	ldi	r24, 0x00	; 0
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	4b ce       	rjmp	.-874    	; 0x629a <clock_gettime>
    6604:	08 95       	ret

00006606 <clock_elapsed_end>:
    6606:	af e0       	ldi	r26, 0x0F	; 15
    6608:	b0 e0       	ldi	r27, 0x00	; 0
    660a:	e9 e0       	ldi	r30, 0x09	; 9
    660c:	f3 e3       	ldi	r31, 0x33	; 51
    660e:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    6612:	8c 01       	movw	r16, r24
    6614:	be 01       	movw	r22, r28
    6616:	68 5f       	subi	r22, 0xF8	; 248
    6618:	7f 4f       	sbci	r23, 0xFF	; 255
    661a:	80 e0       	ldi	r24, 0x00	; 0
    661c:	90 e0       	ldi	r25, 0x00	; 0
    661e:	3d de       	rcall	.-902    	; 0x629a <clock_gettime>
    6620:	6e e6       	ldi	r22, 0x6E	; 110
    6622:	77 e1       	ldi	r23, 0x17	; 23
    6624:	ce 01       	movw	r24, r28
    6626:	08 96       	adiw	r24, 0x08	; 8
    6628:	6e df       	rcall	.-292    	; 0x6506 <subtract_timespec>
    662a:	01 15       	cp	r16, r1
    662c:	11 05       	cpc	r17, r1
    662e:	b1 f0       	breq	.+44     	; 0x665c <clock_elapsed_end+0x56>
    6630:	f8 01       	movw	r30, r16
    6632:	80 81       	ld	r24, Z
    6634:	88 23       	and	r24, r24
    6636:	91 f0       	breq	.+36     	; 0x665c <clock_elapsed_end+0x56>
    6638:	ce 01       	movw	r24, r28
    663a:	08 96       	adiw	r24, 0x08	; 8
    663c:	a5 df       	rcall	.-182    	; 0x6588 <ts_to_str>
    663e:	ed b7       	in	r30, 0x3d	; 61
    6640:	fe b7       	in	r31, 0x3e	; 62
    6642:	97 83       	std	Z+7, r25	; 0x07
    6644:	86 83       	std	Z+6, r24	; 0x06
    6646:	15 83       	std	Z+5, r17	; 0x05
    6648:	04 83       	std	Z+4, r16	; 0x04
    664a:	85 eb       	ldi	r24, 0xB5	; 181
    664c:	95 e0       	ldi	r25, 0x05	; 5
    664e:	a0 e0       	ldi	r26, 0x00	; 0
    6650:	81 83       	std	Z+1, r24	; 0x01
    6652:	92 83       	std	Z+2, r25	; 0x02
    6654:	a3 83       	std	Z+3, r26	; 0x03
    6656:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    665a:	0f c0       	rjmp	.+30     	; 0x667a <clock_elapsed_end+0x74>
    665c:	ce 01       	movw	r24, r28
    665e:	08 96       	adiw	r24, 0x08	; 8
    6660:	93 df       	rcall	.-218    	; 0x6588 <ts_to_str>
    6662:	ed b7       	in	r30, 0x3d	; 61
    6664:	fe b7       	in	r31, 0x3e	; 62
    6666:	95 83       	std	Z+5, r25	; 0x05
    6668:	84 83       	std	Z+4, r24	; 0x04
    666a:	8a ea       	ldi	r24, 0xAA	; 170
    666c:	95 e0       	ldi	r25, 0x05	; 5
    666e:	a0 e0       	ldi	r26, 0x00	; 0
    6670:	81 83       	std	Z+1, r24	; 0x01
    6672:	92 83       	std	Z+2, r25	; 0x02
    6674:	a3 83       	std	Z+3, r26	; 0x03
    6676:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    667a:	2f 96       	adiw	r28, 0x0f	; 15
    667c:	e4 e0       	ldi	r30, 0x04	; 4
    667e:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00006682 <clock_clear>:
    6682:	a8 e0       	ldi	r26, 0x08	; 8
    6684:	b0 e0       	ldi	r27, 0x00	; 0
    6686:	e7 e4       	ldi	r30, 0x47	; 71
    6688:	f3 e3       	ldi	r31, 0x33	; 51
    668a:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    668e:	1d 82       	std	Y+5, r1	; 0x05
    6690:	1e 82       	std	Y+6, r1	; 0x06
    6692:	1f 82       	std	Y+7, r1	; 0x07
    6694:	18 86       	std	Y+8, r1	; 0x08
    6696:	19 82       	std	Y+1, r1	; 0x01
    6698:	1a 82       	std	Y+2, r1	; 0x02
    669a:	1b 82       	std	Y+3, r1	; 0x03
    669c:	1c 82       	std	Y+4, r1	; 0x04
    669e:	ce 01       	movw	r24, r28
    66a0:	01 96       	adiw	r24, 0x01	; 1
    66a2:	ad de       	rcall	.-678    	; 0x63fe <clock_settime.part.2>
    66a4:	e0 e6       	ldi	r30, 0x60	; 96
    66a6:	fa e1       	ldi	r31, 0x1A	; 26
    66a8:	11 82       	std	Z+1, r1	; 0x01
    66aa:	10 82       	st	Z, r1
    66ac:	13 82       	std	Z+3, r1	; 0x03
    66ae:	12 82       	std	Z+2, r1	; 0x02
    66b0:	28 96       	adiw	r28, 0x08	; 8
    66b2:	e2 e0       	ldi	r30, 0x02	; 2
    66b4:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000066b8 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    66b8:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <timers_configured>
    66bc:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <timers_configured+0x1>
    66c0:	89 2b       	or	r24, r25
    66c2:	69 f0       	breq	.+26     	; 0x66de <enable_timers+0x26>
    66c4:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <timers_enabled>
    66c8:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <timers_enabled+0x1>
    66cc:	89 2b       	or	r24, r25
    66ce:	39 f4       	brne	.+14     	; 0x66de <enable_timers+0x26>
    {
        enable_system_task();
    66d0:	a8 dd       	rcall	.-1200   	; 0x6222 <enable_system_task>
        timers_enabled = 1;
    66d2:	81 e0       	ldi	r24, 0x01	; 1
    66d4:	90 e0       	ldi	r25, 0x00	; 0
    66d6:	90 93 99 17 	sts	0x1799, r25	; 0x801799 <timers_enabled+0x1>
    66da:	80 93 98 17 	sts	0x1798, r24	; 0x801798 <timers_enabled>
    66de:	08 95       	ret

000066e0 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    66e0:	cf 93       	push	r28
    66e2:	df 93       	push	r29
    66e4:	c8 e4       	ldi	r28, 0x48	; 72
    66e6:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    66e8:	8a 81       	ldd	r24, Y+2	; 0x02
    66ea:	88 23       	and	r24, r24
    66ec:	29 f0       	breq	.+10     	; 0x66f8 <execute_timers+0x18>
    66ee:	e8 81       	ld	r30, Y
    66f0:	f9 81       	ldd	r31, Y+1	; 0x01
    66f2:	30 97       	sbiw	r30, 0x00	; 0
    66f4:	09 f0       	breq	.+2      	; 0x66f8 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    66f6:	09 95       	icall
    66f8:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    66fa:	8a e1       	ldi	r24, 0x1A	; 26
    66fc:	c0 36       	cpi	r28, 0x60	; 96
    66fe:	d8 07       	cpc	r29, r24
    6700:	99 f7       	brne	.-26     	; 0x66e8 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6702:	df 91       	pop	r29
    6704:	cf 91       	pop	r28
    6706:	08 95       	ret

00006708 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6708:	00 d0       	rcall	.+0      	; 0x670a <init_timers+0x2>
    670a:	1f 92       	push	r1
    printf("Timers init called\n");
    670c:	86 e9       	ldi	r24, 0x96	; 150
    670e:	95 e0       	ldi	r25, 0x05	; 5
    6710:	a0 e0       	ldi	r26, 0x00	; 0
    6712:	ed b7       	in	r30, 0x3d	; 61
    6714:	fe b7       	in	r31, 0x3e	; 62
    6716:	81 83       	std	Z+1, r24	; 0x01
    6718:	92 83       	std	Z+2, r25	; 0x02
    671a:	a3 83       	std	Z+3, r26	; 0x03
    671c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    if(!timers_configured)
    6720:	80 91 96 17 	lds	r24, 0x1796	; 0x801796 <timers_configured>
    6724:	90 91 97 17 	lds	r25, 0x1797	; 0x801797 <timers_configured+0x1>
    6728:	89 2b       	or	r24, r25
    672a:	a9 f4       	brne	.+42     	; 0x6756 <init_timers+0x4e>
    {
        install_timers_isr();
    672c:	7c dd       	rcall	.-1288   	; 0x6226 <install_timers_isr>
        timers_configured = 1;
    672e:	81 e0       	ldi	r24, 0x01	; 1
    6730:	90 e0       	ldi	r25, 0x00	; 0
    6732:	90 93 97 17 	sts	0x1797, r25	; 0x801797 <timers_configured+0x1>
    6736:	80 93 96 17 	sts	0x1796, r24	; 0x801796 <timers_configured>
        timers_enabled = 0;
    673a:	10 92 99 17 	sts	0x1799, r1	; 0x801799 <timers_enabled+0x1>
    673e:	10 92 98 17 	sts	0x1798, r1	; 0x801798 <timers_enabled>
        printf("Timers configured\n");
    6742:	83 e8       	ldi	r24, 0x83	; 131
    6744:	95 e0       	ldi	r25, 0x05	; 5
    6746:	a0 e0       	ldi	r26, 0x00	; 0
    6748:	ed b7       	in	r30, 0x3d	; 61
    674a:	fe b7       	in	r31, 0x3e	; 62
    674c:	81 83       	std	Z+1, r24	; 0x01
    674e:	92 83       	std	Z+2, r25	; 0x02
    6750:	a3 83       	std	Z+3, r26	; 0x03
    6752:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6756:	cc de       	rcall	.-616    	; 0x64f0 <delete_all_timers>
    6758:	94 df       	rcall	.-216    	; 0x6682 <clock_clear>
    printf("Clock Init\n");
    675a:	87 e7       	ldi	r24, 0x77	; 119
    675c:	95 e0       	ldi	r25, 0x05	; 5
    675e:	a0 e0       	ldi	r26, 0x00	; 0
    6760:	ed b7       	in	r30, 0x3d	; 61
    6762:	fe b7       	in	r31, 0x3e	; 62
    6764:	81 83       	std	Z+1, r24	; 0x01
    6766:	92 83       	std	Z+2, r25	; 0x02
    6768:	a3 83       	std	Z+3, r26	; 0x03
    676a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    676e:	61 e0       	ldi	r22, 0x01	; 1
    6770:	70 e0       	ldi	r23, 0x00	; 0
    6772:	82 ec       	ldi	r24, 0xC2	; 194
    6774:	91 e3       	ldi	r25, 0x31	; 49
    6776:	81 de       	rcall	.-766    	; 0x647a <set_timers>
    6778:	01 96       	adiw	r24, 0x01	; 1
    677a:	51 f4       	brne	.+20     	; 0x6790 <init_timers+0x88>
        printf("Clock task init failed\n");
    677c:	8f e5       	ldi	r24, 0x5F	; 95
    677e:	95 e0       	ldi	r25, 0x05	; 5
    6780:	a0 e0       	ldi	r26, 0x00	; 0
    6782:	ed b7       	in	r30, 0x3d	; 61
    6784:	fe b7       	in	r31, 0x3e	; 62
    6786:	81 83       	std	Z+1, r24	; 0x01
    6788:	92 83       	std	Z+2, r25	; 0x02
    678a:	a3 83       	std	Z+3, r26	; 0x03
    678c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Clock Installed\n");
    6790:	8e e4       	ldi	r24, 0x4E	; 78
    6792:	95 e0       	ldi	r25, 0x05	; 5
    6794:	a0 e0       	ldi	r26, 0x00	; 0
    6796:	ed b7       	in	r30, 0x3d	; 61
    6798:	fe b7       	in	r31, 0x3e	; 62
    679a:	81 83       	std	Z+1, r24	; 0x01
    679c:	92 83       	std	Z+2, r25	; 0x02
    679e:	a3 83       	std	Z+3, r26	; 0x03
    67a0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    enable_timers();
    67a4:	89 df       	rcall	.-238    	; 0x66b8 <enable_timers>

    printf("Timers enabled\n");
    67a6:	8e e3       	ldi	r24, 0x3E	; 62
    67a8:	95 e0       	ldi	r25, 0x05	; 5
    67aa:	a0 e0       	ldi	r26, 0x00	; 0
    67ac:	ed b7       	in	r30, 0x3d	; 61
    67ae:	fe b7       	in	r31, 0x3e	; 62
    67b0:	81 83       	std	Z+1, r24	; 0x01
    67b2:	92 83       	std	Z+2, r25	; 0x02
    67b4:	a3 83       	std	Z+3, r26	; 0x03
    67b6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
}
    67ba:	0f 90       	pop	r0
    67bc:	0f 90       	pop	r0
    67be:	0f 90       	pop	r0
    67c0:	08 95       	ret

000067c2 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    67c2:	89 2b       	or	r24, r25
    67c4:	81 f4       	brne	.+32     	; 0x67e6 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    67c6:	fb 01       	movw	r30, r22
    67c8:	10 82       	st	Z, r1
    67ca:	11 82       	std	Z+1, r1	; 0x01
    67cc:	12 82       	std	Z+2, r1	; 0x02
    67ce:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    67d0:	80 e4       	ldi	r24, 0x40	; 64
    67d2:	92 e4       	ldi	r25, 0x42	; 66
    67d4:	af e0       	ldi	r26, 0x0F	; 15
    67d6:	b0 e0       	ldi	r27, 0x00	; 0
    67d8:	84 83       	std	Z+4, r24	; 0x04
    67da:	95 83       	std	Z+5, r25	; 0x05
    67dc:	a6 83       	std	Z+6, r26	; 0x06
    67de:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    67e0:	80 e0       	ldi	r24, 0x00	; 0
    67e2:	90 e0       	ldi	r25, 0x00	; 0
    67e4:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    67e6:	8f ef       	ldi	r24, 0xFF	; 255
    67e8:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    67ea:	08 95       	ret

000067ec <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    67ec:	89 2b       	or	r24, r25
    67ee:	19 f4       	brne	.+6      	; 0x67f6 <clock_settime+0xa>
    67f0:	cb 01       	movw	r24, r22
    67f2:	05 ce       	rjmp	.-1014   	; 0x63fe <clock_settime.part.2>
    67f4:	08 95       	ret
        return(-1);
    67f6:	8f ef       	ldi	r24, 0xFF	; 255
    67f8:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    67fa:	08 95       	ret

000067fc <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    67fc:	9c 01       	movw	r18, r24
    67fe:	83 70       	andi	r24, 0x03	; 3
    6800:	99 27       	eor	r25, r25
    6802:	00 97       	sbiw	r24, 0x00	; 0
    6804:	69 f4       	brne	.+26     	; 0x6820 <IS_Leap+0x24>
    6806:	2c 36       	cpi	r18, 0x6C	; 108
    6808:	47 e0       	ldi	r20, 0x07	; 7
    680a:	34 07       	cpc	r19, r20
    680c:	59 f0       	breq	.+22     	; 0x6824 <IS_Leap+0x28>
    680e:	51 e0       	ldi	r21, 0x01	; 1
    6810:	40 e0       	ldi	r20, 0x00	; 0
    6812:	24 33       	cpi	r18, 0x34	; 52
    6814:	38 40       	sbci	r19, 0x08	; 8
    6816:	09 f4       	brne	.+2      	; 0x681a <IS_Leap+0x1e>
    6818:	50 e0       	ldi	r21, 0x00	; 0
    681a:	85 2f       	mov	r24, r21
    681c:	94 2f       	mov	r25, r20
    681e:	08 95       	ret
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	08 95       	ret

00006826 <tm_mon_to_ascii>:
    6826:	8c 30       	cpi	r24, 0x0C	; 12
    6828:	91 05       	cpc	r25, r1
    682a:	40 f4       	brcc	.+16     	; 0x683c <tm_mon_to_ascii+0x16>
    682c:	88 0f       	add	r24, r24
    682e:	99 1f       	adc	r25, r25
    6830:	fc 01       	movw	r30, r24
    6832:	e5 5f       	subi	r30, 0xF5	; 245
    6834:	fe 4f       	sbci	r31, 0xFE	; 254
    6836:	80 81       	ld	r24, Z
    6838:	91 81       	ldd	r25, Z+1	; 0x01
    683a:	08 95       	ret
    683c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6840:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6844:	08 95       	ret

00006846 <Days_Per_Month>:
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
    684a:	8c 30       	cpi	r24, 0x0C	; 12
    684c:	91 05       	cpc	r25, r1
    684e:	24 f0       	brlt	.+8      	; 0x6858 <Days_Per_Month+0x12>
    6850:	6f 5f       	subi	r22, 0xFF	; 255
    6852:	7f 4f       	sbci	r23, 0xFF	; 255
    6854:	0c 97       	sbiw	r24, 0x0c	; 12
    6856:	f9 cf       	rjmp	.-14     	; 0x684a <Days_Per_Month+0x4>
    6858:	97 ff       	sbrs	r25, 7
    685a:	04 c0       	rjmp	.+8      	; 0x6864 <Days_Per_Month+0x1e>
    685c:	61 50       	subi	r22, 0x01	; 1
    685e:	71 09       	sbc	r23, r1
    6860:	0c 96       	adiw	r24, 0x0c	; 12
    6862:	fa cf       	rjmp	.-12     	; 0x6858 <Days_Per_Month+0x12>
    6864:	fc 01       	movw	r30, r24
    6866:	ee 0f       	add	r30, r30
    6868:	ff 1f       	adc	r31, r31
    686a:	e8 57       	subi	r30, 0x78	; 120
    686c:	fc 4f       	sbci	r31, 0xFC	; 252
    686e:	c0 81       	ld	r28, Z
    6870:	d1 81       	ldd	r29, Z+1	; 0x01
    6872:	01 97       	sbiw	r24, 0x01	; 1
    6874:	29 f4       	brne	.+10     	; 0x6880 <Days_Per_Month+0x3a>
    6876:	cb 01       	movw	r24, r22
    6878:	c1 df       	rcall	.-126    	; 0x67fc <IS_Leap>
    687a:	89 2b       	or	r24, r25
    687c:	09 f0       	breq	.+2      	; 0x6880 <Days_Per_Month+0x3a>
    687e:	21 96       	adiw	r28, 0x01	; 1
    6880:	ce 01       	movw	r24, r28
    6882:	df 91       	pop	r29
    6884:	cf 91       	pop	r28
    6886:	08 95       	ret

00006888 <time_to_tm>:
    6888:	a0 e0       	ldi	r26, 0x00	; 0
    688a:	b0 e0       	ldi	r27, 0x00	; 0
    688c:	ea e4       	ldi	r30, 0x4A	; 74
    688e:	f4 e3       	ldi	r31, 0x34	; 52
    6890:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
    6894:	e8 01       	movw	r28, r16
    6896:	e6 e1       	ldi	r30, 0x16	; 22
    6898:	d8 01       	movw	r26, r16
    689a:	1d 92       	st	X+, r1
    689c:	ea 95       	dec	r30
    689e:	e9 f7       	brne	.-6      	; 0x689a <time_to_tm+0x12>
    68a0:	61 15       	cp	r22, r1
    68a2:	bd e5       	ldi	r27, 0x5D	; 93
    68a4:	7b 07       	cpc	r23, r27
    68a6:	bd ef       	ldi	r27, 0xFD	; 253
    68a8:	8b 07       	cpc	r24, r27
    68aa:	bf ef       	ldi	r27, 0xFF	; 255
    68ac:	9b 07       	cpc	r25, r27
    68ae:	08 f0       	brcs	.+2      	; 0x68b2 <time_to_tm+0x2a>
    68b0:	c0 c0       	rjmp	.+384    	; 0x6a32 <time_to_tm+0x1aa>
    68b2:	6b 01       	movw	r12, r22
    68b4:	7c 01       	movw	r14, r24
    68b6:	c2 1a       	sub	r12, r18
    68b8:	d3 0a       	sbc	r13, r19
    68ba:	e4 0a       	sbc	r14, r20
    68bc:	f5 0a       	sbc	r15, r21
    68be:	46 01       	movw	r8, r12
    68c0:	57 01       	movw	r10, r14
    68c2:	e0 e8       	ldi	r30, 0x80	; 128
    68c4:	ce 16       	cp	r12, r30
    68c6:	ee ea       	ldi	r30, 0xAE	; 174
    68c8:	de 06       	cpc	r13, r30
    68ca:	ee ef       	ldi	r30, 0xFE	; 254
    68cc:	ee 06       	cpc	r14, r30
    68ce:	ef ef       	ldi	r30, 0xFF	; 255
    68d0:	fe 06       	cpc	r15, r30
    68d2:	50 f0       	brcs	.+20     	; 0x68e8 <time_to_tm+0x60>
    68d4:	80 e8       	ldi	r24, 0x80	; 128
    68d6:	88 0e       	add	r8, r24
    68d8:	81 e5       	ldi	r24, 0x51	; 81
    68da:	98 1e       	adc	r9, r24
    68dc:	81 e0       	ldi	r24, 0x01	; 1
    68de:	a8 1e       	adc	r10, r24
    68e0:	b1 1c       	adc	r11, r1
    68e2:	01 e0       	ldi	r16, 0x01	; 1
    68e4:	10 e0       	ldi	r17, 0x00	; 0
    68e6:	02 c0       	rjmp	.+4      	; 0x68ec <time_to_tm+0x64>
    68e8:	00 e0       	ldi	r16, 0x00	; 0
    68ea:	10 e0       	ldi	r17, 0x00	; 0
    68ec:	8c e3       	ldi	r24, 0x3C	; 60
    68ee:	48 2e       	mov	r4, r24
    68f0:	51 2c       	mov	r5, r1
    68f2:	61 2c       	mov	r6, r1
    68f4:	71 2c       	mov	r7, r1
    68f6:	c5 01       	movw	r24, r10
    68f8:	b4 01       	movw	r22, r8
    68fa:	a3 01       	movw	r20, r6
    68fc:	92 01       	movw	r18, r4
    68fe:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    6902:	79 83       	std	Y+1, r23	; 0x01
    6904:	68 83       	st	Y, r22
    6906:	ca 01       	movw	r24, r20
    6908:	b9 01       	movw	r22, r18
    690a:	a3 01       	movw	r20, r6
    690c:	92 01       	movw	r18, r4
    690e:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    6912:	7b 83       	std	Y+3, r23	; 0x03
    6914:	6a 83       	std	Y+2, r22	; 0x02
    6916:	c5 01       	movw	r24, r10
    6918:	b4 01       	movw	r22, r8
    691a:	20 e1       	ldi	r18, 0x10	; 16
    691c:	3e e0       	ldi	r19, 0x0E	; 14
    691e:	40 e0       	ldi	r20, 0x00	; 0
    6920:	50 e0       	ldi	r21, 0x00	; 0
    6922:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    6926:	ca 01       	movw	r24, r20
    6928:	b9 01       	movw	r22, r18
    692a:	28 e1       	ldi	r18, 0x18	; 24
    692c:	30 e0       	ldi	r19, 0x00	; 0
    692e:	40 e0       	ldi	r20, 0x00	; 0
    6930:	50 e0       	ldi	r21, 0x00	; 0
    6932:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    6936:	7d 83       	std	Y+5, r23	; 0x05
    6938:	6c 83       	std	Y+4, r22	; 0x04
    693a:	01 15       	cp	r16, r1
    693c:	11 05       	cpc	r17, r1
    693e:	89 f0       	breq	.+34     	; 0x6962 <time_to_tm+0xda>
    6940:	85 e4       	ldi	r24, 0x45	; 69
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	9b 87       	std	Y+11, r25	; 0x0b
    6946:	8a 87       	std	Y+10, r24	; 0x0a
    6948:	8b e0       	ldi	r24, 0x0B	; 11
    694a:	90 e0       	ldi	r25, 0x00	; 0
    694c:	99 87       	std	Y+9, r25	; 0x09
    694e:	88 87       	std	Y+8, r24	; 0x08
    6950:	8f e1       	ldi	r24, 0x1F	; 31
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	9f 83       	std	Y+7, r25	; 0x07
    6956:	8e 83       	std	Y+6, r24	; 0x06
    6958:	83 e0       	ldi	r24, 0x03	; 3
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	9d 87       	std	Y+13, r25	; 0x0d
    695e:	8c 87       	std	Y+12, r24	; 0x0c
    6960:	65 c0       	rjmp	.+202    	; 0x6a2c <time_to_tm+0x1a4>
    6962:	c5 01       	movw	r24, r10
    6964:	b4 01       	movw	r22, r8
    6966:	20 e8       	ldi	r18, 0x80	; 128
    6968:	31 e5       	ldi	r19, 0x51	; 81
    696a:	41 e0       	ldi	r20, 0x01	; 1
    696c:	50 e0       	ldi	r21, 0x00	; 0
    696e:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    6972:	49 01       	movw	r8, r18
    6974:	5a 01       	movw	r10, r20
    6976:	ca 01       	movw	r24, r20
    6978:	b9 01       	movw	r22, r18
    697a:	6c 5f       	subi	r22, 0xFC	; 252
    697c:	7f 4f       	sbci	r23, 0xFF	; 255
    697e:	8f 4f       	sbci	r24, 0xFF	; 255
    6980:	9f 4f       	sbci	r25, 0xFF	; 255
    6982:	27 e0       	ldi	r18, 0x07	; 7
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	40 e0       	ldi	r20, 0x00	; 0
    6988:	50 e0       	ldi	r21, 0x00	; 0
    698a:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
    698e:	7d 87       	std	Y+13, r23	; 0x0d
    6990:	6c 87       	std	Y+12, r22	; 0x0c
    6992:	02 eb       	ldi	r16, 0xB2	; 178
    6994:	17 e0       	ldi	r17, 0x07	; 7
    6996:	c8 01       	movw	r24, r16
    6998:	31 df       	rcall	.-414    	; 0x67fc <IS_Leap>
    699a:	00 97       	sbiw	r24, 0x00	; 0
    699c:	19 f4       	brne	.+6      	; 0x69a4 <time_to_tm+0x11c>
    699e:	4d e6       	ldi	r20, 0x6D	; 109
    69a0:	51 e0       	ldi	r21, 0x01	; 1
    69a2:	02 c0       	rjmp	.+4      	; 0x69a8 <time_to_tm+0x120>
    69a4:	4e e6       	ldi	r20, 0x6E	; 110
    69a6:	51 e0       	ldi	r21, 0x01	; 1
    69a8:	05 2e       	mov	r0, r21
    69aa:	00 0c       	add	r0, r0
    69ac:	66 0b       	sbc	r22, r22
    69ae:	77 0b       	sbc	r23, r23
    69b0:	84 16       	cp	r8, r20
    69b2:	95 06       	cpc	r9, r21
    69b4:	a6 06       	cpc	r10, r22
    69b6:	b7 06       	cpc	r11, r23
    69b8:	3c f0       	brlt	.+14     	; 0x69c8 <time_to_tm+0x140>
    69ba:	0f 5f       	subi	r16, 0xFF	; 255
    69bc:	1f 4f       	sbci	r17, 0xFF	; 255
    69be:	84 1a       	sub	r8, r20
    69c0:	95 0a       	sbc	r9, r21
    69c2:	a6 0a       	sbc	r10, r22
    69c4:	b7 0a       	sbc	r11, r23
    69c6:	e7 cf       	rjmp	.-50     	; 0x6996 <time_to_tm+0x10e>
    69c8:	0c 56       	subi	r16, 0x6C	; 108
    69ca:	17 40       	sbci	r17, 0x07	; 7
    69cc:	1b 87       	std	Y+11, r17	; 0x0b
    69ce:	0a 87       	std	Y+10, r16	; 0x0a
    69d0:	9f 86       	std	Y+15, r9	; 0x0f
    69d2:	8e 86       	std	Y+14, r8	; 0x0e
    69d4:	e8 e8       	ldi	r30, 0x88	; 136
    69d6:	f3 e0       	ldi	r31, 0x03	; 3
    69d8:	20 e0       	ldi	r18, 0x00	; 0
    69da:	30 e0       	ldi	r19, 0x00	; 0
    69dc:	18 14       	cp	r1, r8
    69de:	19 04       	cpc	r1, r9
    69e0:	1a 04       	cpc	r1, r10
    69e2:	1b 04       	cpc	r1, r11
    69e4:	e4 f4       	brge	.+56     	; 0x6a1e <time_to_tm+0x196>
    69e6:	2c 30       	cpi	r18, 0x0C	; 12
    69e8:	31 05       	cpc	r19, r1
    69ea:	c9 f0       	breq	.+50     	; 0x6a1e <time_to_tm+0x196>
    69ec:	41 91       	ld	r20, Z+
    69ee:	51 91       	ld	r21, Z+
    69f0:	21 30       	cpi	r18, 0x01	; 1
    69f2:	31 05       	cpc	r19, r1
    69f4:	21 f4       	brne	.+8      	; 0x69fe <time_to_tm+0x176>
    69f6:	00 97       	sbiw	r24, 0x00	; 0
    69f8:	11 f0       	breq	.+4      	; 0x69fe <time_to_tm+0x176>
    69fa:	4f 5f       	subi	r20, 0xFF	; 255
    69fc:	5f 4f       	sbci	r21, 0xFF	; 255
    69fe:	05 2e       	mov	r0, r21
    6a00:	00 0c       	add	r0, r0
    6a02:	66 0b       	sbc	r22, r22
    6a04:	77 0b       	sbc	r23, r23
    6a06:	84 16       	cp	r8, r20
    6a08:	95 06       	cpc	r9, r21
    6a0a:	a6 06       	cpc	r10, r22
    6a0c:	b7 06       	cpc	r11, r23
    6a0e:	3c f0       	brlt	.+14     	; 0x6a1e <time_to_tm+0x196>
    6a10:	84 1a       	sub	r8, r20
    6a12:	95 0a       	sbc	r9, r21
    6a14:	a6 0a       	sbc	r10, r22
    6a16:	b7 0a       	sbc	r11, r23
    6a18:	2f 5f       	subi	r18, 0xFF	; 255
    6a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a1c:	df cf       	rjmp	.-66     	; 0x69dc <time_to_tm+0x154>
    6a1e:	39 87       	std	Y+9, r19	; 0x09
    6a20:	28 87       	std	Y+8, r18	; 0x08
    6a22:	af ef       	ldi	r26, 0xFF	; 255
    6a24:	8a 1a       	sub	r8, r26
    6a26:	9a 0a       	sbc	r9, r26
    6a28:	9f 82       	std	Y+7, r9	; 0x07
    6a2a:	8e 82       	std	Y+6, r8	; 0x06
    6a2c:	b6 01       	movw	r22, r12
    6a2e:	c7 01       	movw	r24, r14
    6a30:	04 c0       	rjmp	.+8      	; 0x6a3a <time_to_tm+0x1b2>
    6a32:	6f ef       	ldi	r22, 0xFF	; 255
    6a34:	7f ef       	ldi	r23, 0xFF	; 255
    6a36:	8f ef       	ldi	r24, 0xFF	; 255
    6a38:	9f ef       	ldi	r25, 0xFF	; 255
    6a3a:	cd b7       	in	r28, 0x3d	; 61
    6a3c:	de b7       	in	r29, 0x3e	; 62
    6a3e:	e0 e1       	ldi	r30, 0x10	; 16
    6a40:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

00006a44 <gmtime_r>:
    6a44:	0f 93       	push	r16
    6a46:	1f 93       	push	r17
    6a48:	cf 93       	push	r28
    6a4a:	df 93       	push	r29
    6a4c:	eb 01       	movw	r28, r22
    6a4e:	fc 01       	movw	r30, r24
    6a50:	60 81       	ld	r22, Z
    6a52:	71 81       	ldd	r23, Z+1	; 0x01
    6a54:	82 81       	ldd	r24, Z+2	; 0x02
    6a56:	93 81       	ldd	r25, Z+3	; 0x03
    6a58:	8e 01       	movw	r16, r28
    6a5a:	20 e0       	ldi	r18, 0x00	; 0
    6a5c:	30 e0       	ldi	r19, 0x00	; 0
    6a5e:	a9 01       	movw	r20, r18
    6a60:	13 df       	rcall	.-474    	; 0x6888 <time_to_tm>
    6a62:	ce 01       	movw	r24, r28
    6a64:	df 91       	pop	r29
    6a66:	cf 91       	pop	r28
    6a68:	1f 91       	pop	r17
    6a6a:	0f 91       	pop	r16
    6a6c:	08 95       	ret

00006a6e <gmtime>:
    6a6e:	28 eb       	ldi	r18, 0xB8	; 184
    6a70:	37 e1       	ldi	r19, 0x17	; 23
    6a72:	30 93 cf 17 	sts	0x17CF, r19	; 0x8017cf <p.3677+0x1>
    6a76:	20 93 ce 17 	sts	0x17CE, r18	; 0x8017ce <p.3677>
    6a7a:	b9 01       	movw	r22, r18
    6a7c:	e3 df       	rcall	.-58     	; 0x6a44 <gmtime_r>
    6a7e:	88 eb       	ldi	r24, 0xB8	; 184
    6a80:	97 e1       	ldi	r25, 0x17	; 23
    6a82:	08 95       	ret

00006a84 <gettimezone>:
    6a84:	e0 e6       	ldi	r30, 0x60	; 96
    6a86:	fa e1       	ldi	r31, 0x1A	; 26
    6a88:	20 81       	ld	r18, Z
    6a8a:	31 81       	ldd	r19, Z+1	; 0x01
    6a8c:	dc 01       	movw	r26, r24
    6a8e:	2d 93       	st	X+, r18
    6a90:	3c 93       	st	X, r19
    6a92:	22 81       	ldd	r18, Z+2	; 0x02
    6a94:	33 81       	ldd	r19, Z+3	; 0x03
    6a96:	fc 01       	movw	r30, r24
    6a98:	33 83       	std	Z+3, r19	; 0x03
    6a9a:	22 83       	std	Z+2, r18	; 0x02
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	08 95       	ret

00006aa2 <settimezone>:
    6aa2:	cf 93       	push	r28
    6aa4:	df 93       	push	r29
    6aa6:	ec 01       	movw	r28, r24
    6aa8:	28 81       	ld	r18, Y
    6aaa:	39 81       	ldd	r19, Y+1	; 0x01
    6aac:	e0 e6       	ldi	r30, 0x60	; 96
    6aae:	fa e1       	ldi	r31, 0x1A	; 26
    6ab0:	31 83       	std	Z+1, r19	; 0x01
    6ab2:	20 83       	st	Z, r18
    6ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    6ab8:	93 83       	std	Z+3, r25	; 0x03
    6aba:	82 83       	std	Z+2, r24	; 0x02
    6abc:	80 e0       	ldi	r24, 0x00	; 0
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	df 91       	pop	r29
    6ac2:	cf 91       	pop	r28
    6ac4:	08 95       	ret

00006ac6 <gettimeofday>:
    6ac6:	a8 e0       	ldi	r26, 0x08	; 8
    6ac8:	b0 e0       	ldi	r27, 0x00	; 0
    6aca:	e9 e6       	ldi	r30, 0x69	; 105
    6acc:	f5 e3       	ldi	r31, 0x35	; 53
    6ace:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
    6ad2:	8c 01       	movw	r16, r24
    6ad4:	7b 01       	movw	r14, r22
    6ad6:	be 01       	movw	r22, r28
    6ad8:	6f 5f       	subi	r22, 0xFF	; 255
    6ada:	7f 4f       	sbci	r23, 0xFF	; 255
    6adc:	80 e0       	ldi	r24, 0x00	; 0
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	dc db       	rcall	.-2120   	; 0x629a <clock_gettime>
    6ae2:	89 81       	ldd	r24, Y+1	; 0x01
    6ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae6:	ab 81       	ldd	r26, Y+3	; 0x03
    6ae8:	bc 81       	ldd	r27, Y+4	; 0x04
    6aea:	f8 01       	movw	r30, r16
    6aec:	80 83       	st	Z, r24
    6aee:	91 83       	std	Z+1, r25	; 0x01
    6af0:	a2 83       	std	Z+2, r26	; 0x02
    6af2:	b3 83       	std	Z+3, r27	; 0x03
    6af4:	6d 81       	ldd	r22, Y+5	; 0x05
    6af6:	7e 81       	ldd	r23, Y+6	; 0x06
    6af8:	8f 81       	ldd	r24, Y+7	; 0x07
    6afa:	98 85       	ldd	r25, Y+8	; 0x08
    6afc:	28 ee       	ldi	r18, 0xE8	; 232
    6afe:	33 e0       	ldi	r19, 0x03	; 3
    6b00:	40 e0       	ldi	r20, 0x00	; 0
    6b02:	50 e0       	ldi	r21, 0x00	; 0
    6b04:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
    6b08:	f8 01       	movw	r30, r16
    6b0a:	24 83       	std	Z+4, r18	; 0x04
    6b0c:	35 83       	std	Z+5, r19	; 0x05
    6b0e:	46 83       	std	Z+6, r20	; 0x06
    6b10:	57 83       	std	Z+7, r21	; 0x07
    6b12:	c7 01       	movw	r24, r14
    6b14:	b7 df       	rcall	.-146    	; 0x6a84 <gettimezone>
    6b16:	80 e0       	ldi	r24, 0x00	; 0
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	28 96       	adiw	r28, 0x08	; 8
    6b1c:	e6 e0       	ldi	r30, 0x06	; 6
    6b1e:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00006b22 <time>:
    6b22:	cf 93       	push	r28
    6b24:	df 93       	push	r29
    6b26:	ec 01       	movw	r28, r24
    6b28:	6a e9       	ldi	r22, 0x9A	; 154
    6b2a:	77 e1       	ldi	r23, 0x17	; 23
    6b2c:	80 e0       	ldi	r24, 0x00	; 0
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
    6b30:	b4 db       	rcall	.-2200   	; 0x629a <clock_gettime>
    6b32:	20 97       	sbiw	r28, 0x00	; 0
    6b34:	61 f0       	breq	.+24     	; 0x6b4e <time+0x2c>
    6b36:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <ts.3755>
    6b3a:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <ts.3755+0x1>
    6b3e:	a0 91 9c 17 	lds	r26, 0x179C	; 0x80179c <ts.3755+0x2>
    6b42:	b0 91 9d 17 	lds	r27, 0x179D	; 0x80179d <ts.3755+0x3>
    6b46:	88 83       	st	Y, r24
    6b48:	99 83       	std	Y+1, r25	; 0x01
    6b4a:	aa 83       	std	Y+2, r26	; 0x02
    6b4c:	bb 83       	std	Y+3, r27	; 0x03
    6b4e:	60 91 9a 17 	lds	r22, 0x179A	; 0x80179a <ts.3755>
    6b52:	70 91 9b 17 	lds	r23, 0x179B	; 0x80179b <ts.3755+0x1>
    6b56:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <ts.3755+0x2>
    6b5a:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <ts.3755+0x3>
    6b5e:	df 91       	pop	r29
    6b60:	cf 91       	pop	r28
    6b62:	08 95       	ret

00006b64 <is_dst>:
    6b64:	cf 92       	push	r12
    6b66:	df 92       	push	r13
    6b68:	ef 92       	push	r14
    6b6a:	ff 92       	push	r15
    6b6c:	6b 01       	movw	r12, r22
    6b6e:	7c 01       	movw	r14, r24
    6b70:	05 d4       	rcall	.+2058   	; 0x737c <set_dst>
    6b72:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <dst>
    6b76:	90 91 65 1a 	lds	r25, 0x1A65	; 0x801a65 <dst+0x1>
    6b7a:	a0 91 66 1a 	lds	r26, 0x1A66	; 0x801a66 <dst+0x2>
    6b7e:	b0 91 67 1a 	lds	r27, 0x1A67	; 0x801a67 <dst+0x3>
    6b82:	c8 16       	cp	r12, r24
    6b84:	d9 06       	cpc	r13, r25
    6b86:	ea 06       	cpc	r14, r26
    6b88:	fb 06       	cpc	r15, r27
    6b8a:	88 f0       	brcs	.+34     	; 0x6bae <is_dst+0x4a>
    6b8c:	81 e0       	ldi	r24, 0x01	; 1
    6b8e:	90 e0       	ldi	r25, 0x00	; 0
    6b90:	40 91 68 1a 	lds	r20, 0x1A68	; 0x801a68 <dst+0x4>
    6b94:	50 91 69 1a 	lds	r21, 0x1A69	; 0x801a69 <dst+0x5>
    6b98:	60 91 6a 1a 	lds	r22, 0x1A6A	; 0x801a6a <dst+0x6>
    6b9c:	70 91 6b 1a 	lds	r23, 0x1A6B	; 0x801a6b <dst+0x7>
    6ba0:	4c 15       	cp	r20, r12
    6ba2:	5d 05       	cpc	r21, r13
    6ba4:	6e 05       	cpc	r22, r14
    6ba6:	7f 05       	cpc	r23, r15
    6ba8:	20 f4       	brcc	.+8      	; 0x6bb2 <is_dst+0x4e>
    6baa:	80 e0       	ldi	r24, 0x00	; 0
    6bac:	02 c0       	rjmp	.+4      	; 0x6bb2 <is_dst+0x4e>
    6bae:	80 e0       	ldi	r24, 0x00	; 0
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	ff 90       	pop	r15
    6bb4:	ef 90       	pop	r14
    6bb6:	df 90       	pop	r13
    6bb8:	cf 90       	pop	r12
    6bba:	08 95       	ret

00006bbc <localtime_r>:
    6bbc:	4f 92       	push	r4
    6bbe:	5f 92       	push	r5
    6bc0:	6f 92       	push	r6
    6bc2:	7f 92       	push	r7
    6bc4:	af 92       	push	r10
    6bc6:	bf 92       	push	r11
    6bc8:	cf 92       	push	r12
    6bca:	df 92       	push	r13
    6bcc:	ef 92       	push	r14
    6bce:	ff 92       	push	r15
    6bd0:	0f 93       	push	r16
    6bd2:	1f 93       	push	r17
    6bd4:	cf 93       	push	r28
    6bd6:	df 93       	push	r29
    6bd8:	00 d0       	rcall	.+0      	; 0x6bda <localtime_r+0x1e>
    6bda:	00 d0       	rcall	.+0      	; 0x6bdc <localtime_r+0x20>
    6bdc:	cd b7       	in	r28, 0x3d	; 61
    6bde:	de b7       	in	r29, 0x3e	; 62
    6be0:	5b 01       	movw	r10, r22
    6be2:	fc 01       	movw	r30, r24
    6be4:	40 80       	ld	r4, Z
    6be6:	51 80       	ldd	r5, Z+1	; 0x01
    6be8:	62 80       	ldd	r6, Z+2	; 0x02
    6bea:	73 80       	ldd	r7, Z+3	; 0x03
    6bec:	ce 01       	movw	r24, r28
    6bee:	01 96       	adiw	r24, 0x01	; 1
    6bf0:	49 df       	rcall	.-366    	; 0x6a84 <gettimezone>
    6bf2:	a9 81       	ldd	r26, Y+1	; 0x01
    6bf4:	ba 81       	ldd	r27, Y+2	; 0x02
    6bf6:	2c e3       	ldi	r18, 0x3C	; 60
    6bf8:	30 e0       	ldi	r19, 0x00	; 0
    6bfa:	0e 94 5d e1 	call	0x1c2ba	; 0x1c2ba <__usmulhisi3>
    6bfe:	6b 01       	movw	r12, r22
    6c00:	7c 01       	movw	r14, r24
    6c02:	c3 01       	movw	r24, r6
    6c04:	b2 01       	movw	r22, r4
    6c06:	6c 19       	sub	r22, r12
    6c08:	7d 09       	sbc	r23, r13
    6c0a:	8e 09       	sbc	r24, r14
    6c0c:	9f 09       	sbc	r25, r15
    6c0e:	aa df       	rcall	.-172    	; 0x6b64 <is_dst>
    6c10:	89 2b       	or	r24, r25
    6c12:	31 f0       	breq	.+12     	; 0x6c20 <localtime_r+0x64>
    6c14:	f0 e1       	ldi	r31, 0x10	; 16
    6c16:	cf 1a       	sub	r12, r31
    6c18:	fe e0       	ldi	r31, 0x0E	; 14
    6c1a:	df 0a       	sbc	r13, r31
    6c1c:	e1 08       	sbc	r14, r1
    6c1e:	f1 08       	sbc	r15, r1
    6c20:	85 01       	movw	r16, r10
    6c22:	a7 01       	movw	r20, r14
    6c24:	96 01       	movw	r18, r12
    6c26:	c3 01       	movw	r24, r6
    6c28:	b2 01       	movw	r22, r4
    6c2a:	2e de       	rcall	.-932    	; 0x6888 <time_to_tm>
    6c2c:	c5 01       	movw	r24, r10
    6c2e:	0f 90       	pop	r0
    6c30:	0f 90       	pop	r0
    6c32:	0f 90       	pop	r0
    6c34:	0f 90       	pop	r0
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	1f 91       	pop	r17
    6c3c:	0f 91       	pop	r16
    6c3e:	ff 90       	pop	r15
    6c40:	ef 90       	pop	r14
    6c42:	df 90       	pop	r13
    6c44:	cf 90       	pop	r12
    6c46:	bf 90       	pop	r11
    6c48:	af 90       	pop	r10
    6c4a:	7f 90       	pop	r7
    6c4c:	6f 90       	pop	r6
    6c4e:	5f 90       	pop	r5
    6c50:	4f 90       	pop	r4
    6c52:	08 95       	ret

00006c54 <localtime>:
    6c54:	62 ea       	ldi	r22, 0xA2	; 162
    6c56:	77 e1       	ldi	r23, 0x17	; 23
    6c58:	b1 cf       	rjmp	.-158    	; 0x6bbc <localtime_r>
    6c5a:	08 95       	ret

00006c5c <normalize>:
    6c5c:	aa e0       	ldi	r26, 0x0A	; 10
    6c5e:	b0 e0       	ldi	r27, 0x00	; 0
    6c60:	e4 e3       	ldi	r30, 0x34	; 52
    6c62:	f6 e3       	ldi	r31, 0x36	; 54
    6c64:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    6c68:	7c 01       	movw	r14, r24
    6c6a:	7a 87       	std	Y+10, r23	; 0x0a
    6c6c:	69 87       	std	Y+9, r22	; 0x09
    6c6e:	f7 01       	movw	r30, r14
    6c70:	80 81       	ld	r24, Z
    6c72:	91 81       	ldd	r25, Z+1	; 0x01
    6c74:	8c 33       	cpi	r24, 0x3C	; 60
    6c76:	91 05       	cpc	r25, r1
    6c78:	5c f0       	brlt	.+22     	; 0x6c90 <normalize+0x34>
    6c7a:	f7 01       	movw	r30, r14
    6c7c:	22 81       	ldd	r18, Z+2	; 0x02
    6c7e:	33 81       	ldd	r19, Z+3	; 0x03
    6c80:	2f 5f       	subi	r18, 0xFF	; 255
    6c82:	3f 4f       	sbci	r19, 0xFF	; 255
    6c84:	33 83       	std	Z+3, r19	; 0x03
    6c86:	22 83       	std	Z+2, r18	; 0x02
    6c88:	cc 97       	sbiw	r24, 0x3c	; 60
    6c8a:	91 83       	std	Z+1, r25	; 0x01
    6c8c:	80 83       	st	Z, r24
    6c8e:	ef cf       	rjmp	.-34     	; 0x6c6e <normalize+0x12>
    6c90:	f7 01       	movw	r30, r14
    6c92:	01 90       	ld	r0, Z+
    6c94:	f0 81       	ld	r31, Z
    6c96:	e0 2d       	mov	r30, r0
    6c98:	fe 83       	std	Y+6, r31	; 0x06
    6c9a:	ed 83       	std	Y+5, r30	; 0x05
    6c9c:	f7 ff       	sbrs	r31, 7
    6c9e:	0d c0       	rjmp	.+26     	; 0x6cba <normalize+0x5e>
    6ca0:	f7 01       	movw	r30, r14
    6ca2:	82 81       	ldd	r24, Z+2	; 0x02
    6ca4:	93 81       	ldd	r25, Z+3	; 0x03
    6ca6:	01 97       	sbiw	r24, 0x01	; 1
    6ca8:	93 83       	std	Z+3, r25	; 0x03
    6caa:	82 83       	std	Z+2, r24	; 0x02
    6cac:	6d 81       	ldd	r22, Y+5	; 0x05
    6cae:	7e 81       	ldd	r23, Y+6	; 0x06
    6cb0:	64 5c       	subi	r22, 0xC4	; 196
    6cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb4:	71 83       	std	Z+1, r23	; 0x01
    6cb6:	60 83       	st	Z, r22
    6cb8:	eb cf       	rjmp	.-42     	; 0x6c90 <normalize+0x34>
    6cba:	f7 01       	movw	r30, r14
    6cbc:	82 81       	ldd	r24, Z+2	; 0x02
    6cbe:	93 81       	ldd	r25, Z+3	; 0x03
    6cc0:	8c 33       	cpi	r24, 0x3C	; 60
    6cc2:	91 05       	cpc	r25, r1
    6cc4:	5c f0       	brlt	.+22     	; 0x6cdc <normalize+0x80>
    6cc6:	f7 01       	movw	r30, r14
    6cc8:	24 81       	ldd	r18, Z+4	; 0x04
    6cca:	35 81       	ldd	r19, Z+5	; 0x05
    6ccc:	2f 5f       	subi	r18, 0xFF	; 255
    6cce:	3f 4f       	sbci	r19, 0xFF	; 255
    6cd0:	35 83       	std	Z+5, r19	; 0x05
    6cd2:	24 83       	std	Z+4, r18	; 0x04
    6cd4:	cc 97       	sbiw	r24, 0x3c	; 60
    6cd6:	93 83       	std	Z+3, r25	; 0x03
    6cd8:	82 83       	std	Z+2, r24	; 0x02
    6cda:	ef cf       	rjmp	.-34     	; 0x6cba <normalize+0x5e>
    6cdc:	f7 01       	movw	r30, r14
    6cde:	22 80       	ldd	r2, Z+2	; 0x02
    6ce0:	33 80       	ldd	r3, Z+3	; 0x03
    6ce2:	37 fe       	sbrs	r3, 7
    6ce4:	0d c0       	rjmp	.+26     	; 0x6d00 <normalize+0xa4>
    6ce6:	f7 01       	movw	r30, r14
    6ce8:	84 81       	ldd	r24, Z+4	; 0x04
    6cea:	95 81       	ldd	r25, Z+5	; 0x05
    6cec:	01 97       	sbiw	r24, 0x01	; 1
    6cee:	95 83       	std	Z+5, r25	; 0x05
    6cf0:	84 83       	std	Z+4, r24	; 0x04
    6cf2:	fc e3       	ldi	r31, 0x3C	; 60
    6cf4:	2f 0e       	add	r2, r31
    6cf6:	31 1c       	adc	r3, r1
    6cf8:	f7 01       	movw	r30, r14
    6cfa:	33 82       	std	Z+3, r3	; 0x03
    6cfc:	22 82       	std	Z+2, r2	; 0x02
    6cfe:	ee cf       	rjmp	.-36     	; 0x6cdc <normalize+0x80>
    6d00:	f7 01       	movw	r30, r14
    6d02:	84 81       	ldd	r24, Z+4	; 0x04
    6d04:	95 81       	ldd	r25, Z+5	; 0x05
    6d06:	88 31       	cpi	r24, 0x18	; 24
    6d08:	91 05       	cpc	r25, r1
    6d0a:	5c f0       	brlt	.+22     	; 0x6d22 <normalize+0xc6>
    6d0c:	f7 01       	movw	r30, r14
    6d0e:	26 81       	ldd	r18, Z+6	; 0x06
    6d10:	37 81       	ldd	r19, Z+7	; 0x07
    6d12:	2f 5f       	subi	r18, 0xFF	; 255
    6d14:	3f 4f       	sbci	r19, 0xFF	; 255
    6d16:	37 83       	std	Z+7, r19	; 0x07
    6d18:	26 83       	std	Z+6, r18	; 0x06
    6d1a:	48 97       	sbiw	r24, 0x18	; 24
    6d1c:	95 83       	std	Z+5, r25	; 0x05
    6d1e:	84 83       	std	Z+4, r24	; 0x04
    6d20:	ef cf       	rjmp	.-34     	; 0x6d00 <normalize+0xa4>
    6d22:	f7 01       	movw	r30, r14
    6d24:	04 81       	ldd	r16, Z+4	; 0x04
    6d26:	15 81       	ldd	r17, Z+5	; 0x05
    6d28:	17 ff       	sbrs	r17, 7
    6d2a:	0b c0       	rjmp	.+22     	; 0x6d42 <normalize+0xe6>
    6d2c:	f7 01       	movw	r30, r14
    6d2e:	86 81       	ldd	r24, Z+6	; 0x06
    6d30:	97 81       	ldd	r25, Z+7	; 0x07
    6d32:	01 97       	sbiw	r24, 0x01	; 1
    6d34:	97 83       	std	Z+7, r25	; 0x07
    6d36:	86 83       	std	Z+6, r24	; 0x06
    6d38:	08 5e       	subi	r16, 0xE8	; 232
    6d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    6d3c:	15 83       	std	Z+5, r17	; 0x05
    6d3e:	04 83       	std	Z+4, r16	; 0x04
    6d40:	f0 cf       	rjmp	.-32     	; 0x6d22 <normalize+0xc6>
    6d42:	f7 01       	movw	r30, r14
    6d44:	80 85       	ldd	r24, Z+8	; 0x08
    6d46:	91 85       	ldd	r25, Z+9	; 0x09
    6d48:	8c 30       	cpi	r24, 0x0C	; 12
    6d4a:	91 05       	cpc	r25, r1
    6d4c:	5c f0       	brlt	.+22     	; 0x6d64 <normalize+0x108>
    6d4e:	f7 01       	movw	r30, r14
    6d50:	22 85       	ldd	r18, Z+10	; 0x0a
    6d52:	33 85       	ldd	r19, Z+11	; 0x0b
    6d54:	2f 5f       	subi	r18, 0xFF	; 255
    6d56:	3f 4f       	sbci	r19, 0xFF	; 255
    6d58:	33 87       	std	Z+11, r19	; 0x0b
    6d5a:	22 87       	std	Z+10, r18	; 0x0a
    6d5c:	0c 97       	sbiw	r24, 0x0c	; 12
    6d5e:	91 87       	std	Z+9, r25	; 0x09
    6d60:	80 87       	std	Z+8, r24	; 0x08
    6d62:	ef cf       	rjmp	.-34     	; 0x6d42 <normalize+0xe6>
    6d64:	f7 01       	movw	r30, r14
    6d66:	80 85       	ldd	r24, Z+8	; 0x08
    6d68:	91 85       	ldd	r25, Z+9	; 0x09
    6d6a:	97 ff       	sbrs	r25, 7
    6d6c:	2d c0       	rjmp	.+90     	; 0x6dc8 <normalize+0x16c>
    6d6e:	f7 01       	movw	r30, r14
    6d70:	22 85       	ldd	r18, Z+10	; 0x0a
    6d72:	33 85       	ldd	r19, Z+11	; 0x0b
    6d74:	21 50       	subi	r18, 0x01	; 1
    6d76:	31 09       	sbc	r19, r1
    6d78:	33 87       	std	Z+11, r19	; 0x0b
    6d7a:	22 87       	std	Z+10, r18	; 0x0a
    6d7c:	0c 96       	adiw	r24, 0x0c	; 12
    6d7e:	91 87       	std	Z+9, r25	; 0x09
    6d80:	80 87       	std	Z+8, r24	; 0x08
    6d82:	f0 cf       	rjmp	.-32     	; 0x6d64 <normalize+0x108>
    6d84:	f7 01       	movw	r30, r14
    6d86:	c6 80       	ldd	r12, Z+6	; 0x06
    6d88:	d7 80       	ldd	r13, Z+7	; 0x07
    6d8a:	a0 84       	ldd	r10, Z+8	; 0x08
    6d8c:	b1 84       	ldd	r11, Z+9	; 0x09
    6d8e:	b4 01       	movw	r22, r8
    6d90:	c5 01       	movw	r24, r10
    6d92:	59 dd       	rcall	.-1358   	; 0x6846 <Days_Per_Month>
    6d94:	8c 15       	cp	r24, r12
    6d96:	9d 05       	cpc	r25, r13
    6d98:	84 f5       	brge	.+96     	; 0x6dfa <normalize+0x19e>
    6d9a:	c8 1a       	sub	r12, r24
    6d9c:	d9 0a       	sbc	r13, r25
    6d9e:	f7 01       	movw	r30, r14
    6da0:	d7 82       	std	Z+7, r13	; 0x07
    6da2:	c6 82       	std	Z+6, r12	; 0x06
    6da4:	c5 01       	movw	r24, r10
    6da6:	01 96       	adiw	r24, 0x01	; 1
    6da8:	91 87       	std	Z+9, r25	; 0x09
    6daa:	80 87       	std	Z+8, r24	; 0x08
    6dac:	0c 97       	sbiw	r24, 0x0c	; 12
    6dae:	54 f3       	brlt	.-44     	; 0x6d84 <normalize+0x128>
    6db0:	fb e0       	ldi	r31, 0x0B	; 11
    6db2:	af 1a       	sub	r10, r31
    6db4:	b1 08       	sbc	r11, r1
    6db6:	f7 01       	movw	r30, r14
    6db8:	b1 86       	std	Z+9, r11	; 0x09
    6dba:	a0 86       	std	Z+8, r10	; 0x08
    6dbc:	ff ef       	ldi	r31, 0xFF	; 255
    6dbe:	8f 1a       	sub	r8, r31
    6dc0:	9f 0a       	sbc	r9, r31
    6dc2:	f7 01       	movw	r30, r14
    6dc4:	93 86       	std	Z+11, r9	; 0x0b
    6dc6:	82 86       	std	Z+10, r8	; 0x0a
    6dc8:	f7 01       	movw	r30, r14
    6dca:	82 84       	ldd	r8, Z+10	; 0x0a
    6dcc:	93 84       	ldd	r9, Z+11	; 0x0b
    6dce:	da cf       	rjmp	.-76     	; 0x6d84 <normalize+0x128>
    6dd0:	f7 01       	movw	r30, r14
    6dd2:	80 85       	ldd	r24, Z+8	; 0x08
    6dd4:	91 85       	ldd	r25, Z+9	; 0x09
    6dd6:	9c 01       	movw	r18, r24
    6dd8:	21 50       	subi	r18, 0x01	; 1
    6dda:	31 09       	sbc	r19, r1
    6ddc:	37 fd       	sbrc	r19, 7
    6dde:	16 c0       	rjmp	.+44     	; 0x6e0c <normalize+0x1b0>
    6de0:	31 87       	std	Z+9, r19	; 0x09
    6de2:	20 87       	std	Z+8, r18	; 0x08
    6de4:	f7 01       	movw	r30, r14
    6de6:	62 85       	ldd	r22, Z+10	; 0x0a
    6de8:	73 85       	ldd	r23, Z+11	; 0x0b
    6dea:	80 85       	ldd	r24, Z+8	; 0x08
    6dec:	91 85       	ldd	r25, Z+9	; 0x09
    6dee:	2b dd       	rcall	.-1450   	; 0x6846 <Days_Per_Month>
    6df0:	88 0d       	add	r24, r8
    6df2:	99 1d       	adc	r25, r9
    6df4:	f7 01       	movw	r30, r14
    6df6:	97 83       	std	Z+7, r25	; 0x07
    6df8:	86 83       	std	Z+6, r24	; 0x06
    6dfa:	f7 01       	movw	r30, r14
    6dfc:	86 80       	ldd	r8, Z+6	; 0x06
    6dfe:	97 80       	ldd	r9, Z+7	; 0x07
    6e00:	a2 84       	ldd	r10, Z+10	; 0x0a
    6e02:	b3 84       	ldd	r11, Z+11	; 0x0b
    6e04:	18 14       	cp	r1, r8
    6e06:	19 04       	cpc	r1, r9
    6e08:	1c f7       	brge	.-58     	; 0x6dd0 <normalize+0x174>
    6e0a:	0b c0       	rjmp	.+22     	; 0x6e22 <normalize+0x1c6>
    6e0c:	0b 96       	adiw	r24, 0x0b	; 11
    6e0e:	f7 01       	movw	r30, r14
    6e10:	91 87       	std	Z+9, r25	; 0x09
    6e12:	80 87       	std	Z+8, r24	; 0x08
    6e14:	f1 e0       	ldi	r31, 0x01	; 1
    6e16:	af 1a       	sub	r10, r31
    6e18:	b1 08       	sbc	r11, r1
    6e1a:	f7 01       	movw	r30, r14
    6e1c:	b3 86       	std	Z+11, r11	; 0x0b
    6e1e:	a2 86       	std	Z+10, r10	; 0x0a
    6e20:	e1 cf       	rjmp	.-62     	; 0x6de4 <normalize+0x188>
    6e22:	a5 01       	movw	r20, r10
    6e24:	44 59       	subi	r20, 0x94	; 148
    6e26:	58 4f       	sbci	r21, 0xF8	; 248
    6e28:	58 87       	std	Y+8, r21	; 0x08
    6e2a:	4f 83       	std	Y+7, r20	; 0x07
    6e2c:	35 01       	movw	r6, r10
    6e2e:	56 e4       	ldi	r21, 0x46	; 70
    6e30:	65 1a       	sub	r6, r21
    6e32:	71 08       	sbc	r7, r1
    6e34:	89 e8       	ldi	r24, 0x89	; 137
    6e36:	68 16       	cp	r6, r24
    6e38:	71 04       	cpc	r7, r1
    6e3a:	08 f0       	brcs	.+2      	; 0x6e3e <normalize+0x1e2>
    6e3c:	9b c0       	rjmp	.+310    	; 0x6f74 <normalize+0x318>
    6e3e:	c0 84       	ldd	r12, Z+8	; 0x08
    6e40:	d1 84       	ldd	r13, Z+9	; 0x09
    6e42:	9c e0       	ldi	r25, 0x0C	; 12
    6e44:	c9 16       	cp	r12, r25
    6e46:	d1 04       	cpc	r13, r1
    6e48:	08 f0       	brcs	.+2      	; 0x6e4c <normalize+0x1f0>
    6e4a:	94 c0       	rjmp	.+296    	; 0x6f74 <normalize+0x318>
    6e4c:	24 01       	movw	r4, r8
    6e4e:	e1 e0       	ldi	r30, 0x01	; 1
    6e50:	4e 1a       	sub	r4, r30
    6e52:	51 08       	sbc	r5, r1
    6e54:	6f 81       	ldd	r22, Y+7	; 0x07
    6e56:	78 85       	ldd	r23, Y+8	; 0x08
    6e58:	c6 01       	movw	r24, r12
    6e5a:	f5 dc       	rcall	.-1558   	; 0x6846 <Days_Per_Month>
    6e5c:	48 16       	cp	r4, r24
    6e5e:	59 06       	cpc	r5, r25
    6e60:	0c f0       	brlt	.+2      	; 0x6e64 <normalize+0x208>
    6e62:	88 c0       	rjmp	.+272    	; 0x6f74 <normalize+0x318>
    6e64:	08 31       	cpi	r16, 0x18	; 24
    6e66:	11 05       	cpc	r17, r1
    6e68:	0c f0       	brlt	.+2      	; 0x6e6c <normalize+0x210>
    6e6a:	84 c0       	rjmp	.+264    	; 0x6f74 <normalize+0x318>
    6e6c:	fc e3       	ldi	r31, 0x3C	; 60
    6e6e:	2f 16       	cp	r2, r31
    6e70:	31 04       	cpc	r3, r1
    6e72:	0c f0       	brlt	.+2      	; 0x6e76 <normalize+0x21a>
    6e74:	7f c0       	rjmp	.+254    	; 0x6f74 <normalize+0x318>
    6e76:	4d 81       	ldd	r20, Y+5	; 0x05
    6e78:	5e 81       	ldd	r21, Y+6	; 0x06
    6e7a:	4c 33       	cpi	r20, 0x3C	; 60
    6e7c:	51 05       	cpc	r21, r1
    6e7e:	0c f0       	brlt	.+2      	; 0x6e82 <normalize+0x226>
    6e80:	79 c0       	rjmp	.+242    	; 0x6f74 <normalize+0x318>
    6e82:	2d e6       	ldi	r18, 0x6D	; 109
    6e84:	31 e0       	ldi	r19, 0x01	; 1
    6e86:	d3 01       	movw	r26, r6
    6e88:	0e 94 5d e1 	call	0x1c2ba	; 0x1c2ba <__usmulhisi3>
    6e8c:	f6 01       	movw	r30, r12
    6e8e:	ee 0f       	add	r30, r30
    6e90:	ff 1f       	adc	r31, r31
    6e92:	e0 56       	subi	r30, 0x60	; 96
    6e94:	fc 4f       	sbci	r31, 0xFC	; 252
    6e96:	20 81       	ld	r18, Z
    6e98:	31 81       	ldd	r19, Z+1	; 0x01
    6e9a:	dc 01       	movw	r26, r24
    6e9c:	cb 01       	movw	r24, r22
    6e9e:	82 0f       	add	r24, r18
    6ea0:	93 1f       	adc	r25, r19
    6ea2:	a1 1d       	adc	r26, r1
    6ea4:	b1 1d       	adc	r27, r1
    6ea6:	05 2c       	mov	r0, r5
    6ea8:	00 0c       	add	r0, r0
    6eaa:	66 08       	sbc	r6, r6
    6eac:	77 08       	sbc	r7, r7
    6eae:	48 0e       	add	r4, r24
    6eb0:	59 1e       	adc	r5, r25
    6eb2:	6a 1e       	adc	r6, r26
    6eb4:	7b 1e       	adc	r7, r27
    6eb6:	1a 14       	cp	r1, r10
    6eb8:	1b 04       	cpc	r1, r11
    6eba:	1c f4       	brge	.+6      	; 0x6ec2 <normalize+0x266>
    6ebc:	51 e0       	ldi	r21, 0x01	; 1
    6ebe:	a5 1a       	sub	r10, r21
    6ec0:	b1 08       	sbc	r11, r1
    6ec2:	45 01       	movw	r8, r10
    6ec4:	95 94       	asr	r9
    6ec6:	87 94       	ror	r8
    6ec8:	95 94       	asr	r9
    6eca:	87 94       	ror	r8
    6ecc:	88 ec       	ldi	r24, 0xC8	; 200
    6ece:	a8 16       	cp	r10, r24
    6ed0:	b1 04       	cpc	r11, r1
    6ed2:	1c f0       	brlt	.+6      	; 0x6eda <normalize+0x27e>
    6ed4:	91 e0       	ldi	r25, 0x01	; 1
    6ed6:	89 1a       	sub	r8, r25
    6ed8:	91 08       	sbc	r9, r1
    6eda:	09 2c       	mov	r0, r9
    6edc:	00 0c       	add	r0, r0
    6ede:	aa 08       	sbc	r10, r10
    6ee0:	bb 08       	sbc	r11, r11
    6ee2:	84 0c       	add	r8, r4
    6ee4:	95 1c       	adc	r9, r5
    6ee6:	a6 1c       	adc	r10, r6
    6ee8:	b7 1c       	adc	r11, r7
    6eea:	24 01       	movw	r4, r8
    6eec:	35 01       	movw	r6, r10
    6eee:	e1 e1       	ldi	r30, 0x11	; 17
    6ef0:	4e 1a       	sub	r4, r30
    6ef2:	51 08       	sbc	r5, r1
    6ef4:	61 08       	sbc	r6, r1
    6ef6:	71 08       	sbc	r7, r1
    6ef8:	f2 e0       	ldi	r31, 0x02	; 2
    6efa:	cf 16       	cp	r12, r31
    6efc:	d1 04       	cpc	r13, r1
    6efe:	64 f0       	brlt	.+24     	; 0x6f18 <normalize+0x2bc>
    6f00:	8f 81       	ldd	r24, Y+7	; 0x07
    6f02:	98 85       	ldd	r25, Y+8	; 0x08
    6f04:	7b dc       	rcall	.-1802   	; 0x67fc <IS_Leap>
    6f06:	89 2b       	or	r24, r25
    6f08:	39 f0       	breq	.+14     	; 0x6f18 <normalize+0x2bc>
    6f0a:	24 01       	movw	r4, r8
    6f0c:	35 01       	movw	r6, r10
    6f0e:	40 e1       	ldi	r20, 0x10	; 16
    6f10:	44 1a       	sub	r4, r20
    6f12:	51 08       	sbc	r5, r1
    6f14:	61 08       	sbc	r6, r1
    6f16:	71 08       	sbc	r7, r1
    6f18:	a8 e1       	ldi	r26, 0x18	; 24
    6f1a:	b0 e0       	ldi	r27, 0x00	; 0
    6f1c:	a3 01       	movw	r20, r6
    6f1e:	92 01       	movw	r18, r4
    6f20:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    6f24:	01 2e       	mov	r0, r17
    6f26:	00 0c       	add	r0, r0
    6f28:	22 0b       	sbc	r18, r18
    6f2a:	33 0b       	sbc	r19, r19
    6f2c:	a9 01       	movw	r20, r18
    6f2e:	98 01       	movw	r18, r16
    6f30:	26 0f       	add	r18, r22
    6f32:	37 1f       	adc	r19, r23
    6f34:	48 1f       	adc	r20, r24
    6f36:	59 1f       	adc	r21, r25
    6f38:	ac e3       	ldi	r26, 0x3C	; 60
    6f3a:	b0 e0       	ldi	r27, 0x00	; 0
    6f3c:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    6f40:	81 01       	movw	r16, r2
    6f42:	03 2c       	mov	r0, r3
    6f44:	00 0c       	add	r0, r0
    6f46:	22 0b       	sbc	r18, r18
    6f48:	33 0b       	sbc	r19, r19
    6f4a:	a9 01       	movw	r20, r18
    6f4c:	98 01       	movw	r18, r16
    6f4e:	26 0f       	add	r18, r22
    6f50:	37 1f       	adc	r19, r23
    6f52:	48 1f       	adc	r20, r24
    6f54:	59 1f       	adc	r21, r25
    6f56:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    6f5a:	ed 81       	ldd	r30, Y+5	; 0x05
    6f5c:	fe 81       	ldd	r31, Y+6	; 0x06
    6f5e:	8f 01       	movw	r16, r30
    6f60:	ff 0f       	add	r31, r31
    6f62:	22 0b       	sbc	r18, r18
    6f64:	33 0b       	sbc	r19, r19
    6f66:	48 01       	movw	r8, r16
    6f68:	59 01       	movw	r10, r18
    6f6a:	86 0e       	add	r8, r22
    6f6c:	97 1e       	adc	r9, r23
    6f6e:	a8 1e       	adc	r10, r24
    6f70:	b9 1e       	adc	r11, r25
    6f72:	04 c0       	rjmp	.+8      	; 0x6f7c <normalize+0x320>
    6f74:	88 24       	eor	r8, r8
    6f76:	8a 94       	dec	r8
    6f78:	98 2c       	mov	r9, r8
    6f7a:	54 01       	movw	r10, r8
    6f7c:	49 85       	ldd	r20, Y+9	; 0x09
    6f7e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6f80:	45 2b       	or	r20, r21
    6f82:	e9 f0       	breq	.+58     	; 0x6fbe <normalize+0x362>
    6f84:	ce 01       	movw	r24, r28
    6f86:	01 96       	adiw	r24, 0x01	; 1
    6f88:	7d dd       	rcall	.-1286   	; 0x6a84 <gettimezone>
    6f8a:	a9 81       	ldd	r26, Y+1	; 0x01
    6f8c:	ba 81       	ldd	r27, Y+2	; 0x02
    6f8e:	2c e3       	ldi	r18, 0x3C	; 60
    6f90:	30 e0       	ldi	r19, 0x00	; 0
    6f92:	0e 94 5d e1 	call	0x1c2ba	; 0x1c2ba <__usmulhisi3>
    6f96:	2b 01       	movw	r4, r22
    6f98:	3c 01       	movw	r6, r24
    6f9a:	c5 01       	movw	r24, r10
    6f9c:	b4 01       	movw	r22, r8
    6f9e:	e2 dd       	rcall	.-1084   	; 0x6b64 <is_dst>
    6fa0:	89 2b       	or	r24, r25
    6fa2:	51 f0       	breq	.+20     	; 0x6fb8 <normalize+0x35c>
    6fa4:	50 e1       	ldi	r21, 0x10	; 16
    6fa6:	45 1a       	sub	r4, r21
    6fa8:	5e e0       	ldi	r21, 0x0E	; 14
    6faa:	55 0a       	sbc	r5, r21
    6fac:	61 08       	sbc	r6, r1
    6fae:	71 08       	sbc	r7, r1
    6fb0:	cc 24       	eor	r12, r12
    6fb2:	c3 94       	inc	r12
    6fb4:	d1 2c       	mov	r13, r1
    6fb6:	08 c0       	rjmp	.+16     	; 0x6fc8 <normalize+0x36c>
    6fb8:	c1 2c       	mov	r12, r1
    6fba:	d1 2c       	mov	r13, r1
    6fbc:	05 c0       	rjmp	.+10     	; 0x6fc8 <normalize+0x36c>
    6fbe:	c1 2c       	mov	r12, r1
    6fc0:	d1 2c       	mov	r13, r1
    6fc2:	41 2c       	mov	r4, r1
    6fc4:	51 2c       	mov	r5, r1
    6fc6:	32 01       	movw	r6, r4
    6fc8:	87 01       	movw	r16, r14
    6fca:	a3 01       	movw	r20, r6
    6fcc:	92 01       	movw	r18, r4
    6fce:	c5 01       	movw	r24, r10
    6fd0:	b4 01       	movw	r22, r8
    6fd2:	5a dc       	rcall	.-1868   	; 0x6888 <time_to_tm>
    6fd4:	c1 14       	cp	r12, r1
    6fd6:	d1 04       	cpc	r13, r1
    6fd8:	29 f0       	breq	.+10     	; 0x6fe4 <normalize+0x388>
    6fda:	21 e0       	ldi	r18, 0x01	; 1
    6fdc:	30 e0       	ldi	r19, 0x00	; 0
    6fde:	f7 01       	movw	r30, r14
    6fe0:	31 8b       	std	Z+17, r19	; 0x11
    6fe2:	20 8b       	std	Z+16, r18	; 0x10
    6fe4:	2a 96       	adiw	r28, 0x0a	; 10
    6fe6:	e2 e1       	ldi	r30, 0x12	; 18
    6fe8:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00006fec <timegm>:
    6fec:	60 e0       	ldi	r22, 0x00	; 0
    6fee:	70 e0       	ldi	r23, 0x00	; 0
    6ff0:	35 ce       	rjmp	.-918    	; 0x6c5c <normalize>
    6ff2:	08 95       	ret

00006ff4 <setdate_r>:
    6ff4:	cf 92       	push	r12
    6ff6:	df 92       	push	r13
    6ff8:	ef 92       	push	r14
    6ffa:	ff 92       	push	r15
    6ffc:	cf 93       	push	r28
    6ffe:	df 93       	push	r29
    7000:	cd b7       	in	r28, 0x3d	; 61
    7002:	de b7       	in	r29, 0x3e	; 62
    7004:	a5 97       	sbiw	r28, 0x25	; 37
    7006:	0f b6       	in	r0, 0x3f	; 63
    7008:	f8 94       	cli
    700a:	de bf       	out	0x3e, r29	; 62
    700c:	0f be       	out	0x3f, r0	; 63
    700e:	cd bf       	out	0x3d, r28	; 61
    7010:	9d a3       	std	Y+37, r25	; 0x25
    7012:	8c a3       	std	Y+36, r24	; 0x24
    7014:	1f 82       	std	Y+7, r1	; 0x07
    7016:	1e 82       	std	Y+6, r1	; 0x06
    7018:	19 86       	std	Y+9, r1	; 0x09
    701a:	18 86       	std	Y+8, r1	; 0x08
    701c:	1b 86       	std	Y+11, r1	; 0x0b
    701e:	1a 86       	std	Y+10, r1	; 0x0a
    7020:	1d 86       	std	Y+13, r1	; 0x0d
    7022:	1c 86       	std	Y+12, r1	; 0x0c
    7024:	1f 86       	std	Y+15, r1	; 0x0f
    7026:	1e 86       	std	Y+14, r1	; 0x0e
    7028:	19 8a       	std	Y+17, r1	; 0x11
    702a:	18 8a       	std	Y+16, r1	; 0x10
    702c:	8c a1       	ldd	r24, Y+36	; 0x24
    702e:	9d a1       	ldd	r25, Y+37	; 0x25
    7030:	fc 01       	movw	r30, r24
    7032:	20 81       	ld	r18, Z
    7034:	20 32       	cpi	r18, 0x20	; 32
    7036:	21 f4       	brne	.+8      	; 0x7040 <setdate_r+0x4c>
    7038:	01 96       	adiw	r24, 0x01	; 1
    703a:	9d a3       	std	Y+37, r25	; 0x25
    703c:	8c a3       	std	Y+36, r24	; 0x24
    703e:	f6 cf       	rjmp	.-20     	; 0x702c <setdate_r+0x38>
    7040:	4a e0       	ldi	r20, 0x0A	; 10
    7042:	50 e0       	ldi	r21, 0x00	; 0
    7044:	be 01       	movw	r22, r28
    7046:	6c 5d       	subi	r22, 0xDC	; 220
    7048:	7f 4f       	sbci	r23, 0xFF	; 255
    704a:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    704e:	79 8b       	std	Y+17, r23	; 0x11
    7050:	68 8b       	std	Y+16, r22	; 0x10
    7052:	8c a1       	ldd	r24, Y+36	; 0x24
    7054:	9d a1       	ldd	r25, Y+37	; 0x25
    7056:	fc 01       	movw	r30, r24
    7058:	20 81       	ld	r18, Z
    705a:	20 32       	cpi	r18, 0x20	; 32
    705c:	21 f4       	brne	.+8      	; 0x7066 <setdate_r+0x72>
    705e:	01 96       	adiw	r24, 0x01	; 1
    7060:	9d a3       	std	Y+37, r25	; 0x25
    7062:	8c a3       	std	Y+36, r24	; 0x24
    7064:	f6 cf       	rjmp	.-20     	; 0x7052 <setdate_r+0x5e>
    7066:	4a e0       	ldi	r20, 0x0A	; 10
    7068:	50 e0       	ldi	r21, 0x00	; 0
    706a:	be 01       	movw	r22, r28
    706c:	6c 5d       	subi	r22, 0xDC	; 220
    706e:	7f 4f       	sbci	r23, 0xFF	; 255
    7070:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    7074:	7f 87       	std	Y+15, r23	; 0x0f
    7076:	6e 87       	std	Y+14, r22	; 0x0e
    7078:	8c a1       	ldd	r24, Y+36	; 0x24
    707a:	9d a1       	ldd	r25, Y+37	; 0x25
    707c:	fc 01       	movw	r30, r24
    707e:	20 81       	ld	r18, Z
    7080:	20 32       	cpi	r18, 0x20	; 32
    7082:	21 f4       	brne	.+8      	; 0x708c <setdate_r+0x98>
    7084:	01 96       	adiw	r24, 0x01	; 1
    7086:	9d a3       	std	Y+37, r25	; 0x25
    7088:	8c a3       	std	Y+36, r24	; 0x24
    708a:	f6 cf       	rjmp	.-20     	; 0x7078 <setdate_r+0x84>
    708c:	4a e0       	ldi	r20, 0x0A	; 10
    708e:	50 e0       	ldi	r21, 0x00	; 0
    7090:	be 01       	movw	r22, r28
    7092:	6c 5d       	subi	r22, 0xDC	; 220
    7094:	7f 4f       	sbci	r23, 0xFF	; 255
    7096:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    709a:	7d 87       	std	Y+13, r23	; 0x0d
    709c:	6c 87       	std	Y+12, r22	; 0x0c
    709e:	8c a1       	ldd	r24, Y+36	; 0x24
    70a0:	9d a1       	ldd	r25, Y+37	; 0x25
    70a2:	fc 01       	movw	r30, r24
    70a4:	20 81       	ld	r18, Z
    70a6:	20 32       	cpi	r18, 0x20	; 32
    70a8:	21 f4       	brne	.+8      	; 0x70b2 <setdate_r+0xbe>
    70aa:	01 96       	adiw	r24, 0x01	; 1
    70ac:	9d a3       	std	Y+37, r25	; 0x25
    70ae:	8c a3       	std	Y+36, r24	; 0x24
    70b0:	f6 cf       	rjmp	.-20     	; 0x709e <setdate_r+0xaa>
    70b2:	4a e0       	ldi	r20, 0x0A	; 10
    70b4:	50 e0       	ldi	r21, 0x00	; 0
    70b6:	be 01       	movw	r22, r28
    70b8:	6c 5d       	subi	r22, 0xDC	; 220
    70ba:	7f 4f       	sbci	r23, 0xFF	; 255
    70bc:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    70c0:	7b 87       	std	Y+11, r23	; 0x0b
    70c2:	6a 87       	std	Y+10, r22	; 0x0a
    70c4:	ec a1       	ldd	r30, Y+36	; 0x24
    70c6:	fd a1       	ldd	r31, Y+37	; 0x25
    70c8:	80 81       	ld	r24, Z
    70ca:	88 23       	and	r24, r24
    70cc:	39 f0       	breq	.+14     	; 0x70dc <setdate_r+0xe8>
    70ce:	80 32       	cpi	r24, 0x20	; 32
    70d0:	11 f0       	breq	.+4      	; 0x70d6 <setdate_r+0xe2>
    70d2:	8a 33       	cpi	r24, 0x3A	; 58
    70d4:	19 f4       	brne	.+6      	; 0x70dc <setdate_r+0xe8>
    70d6:	31 96       	adiw	r30, 0x01	; 1
    70d8:	fd a3       	std	Y+37, r31	; 0x25
    70da:	ec a3       	std	Y+36, r30	; 0x24
    70dc:	4a e0       	ldi	r20, 0x0A	; 10
    70de:	50 e0       	ldi	r21, 0x00	; 0
    70e0:	be 01       	movw	r22, r28
    70e2:	6c 5d       	subi	r22, 0xDC	; 220
    70e4:	7f 4f       	sbci	r23, 0xFF	; 255
    70e6:	8c a1       	ldd	r24, Y+36	; 0x24
    70e8:	9d a1       	ldd	r25, Y+37	; 0x25
    70ea:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    70ee:	79 87       	std	Y+9, r23	; 0x09
    70f0:	68 87       	std	Y+8, r22	; 0x08
    70f2:	ec a1       	ldd	r30, Y+36	; 0x24
    70f4:	fd a1       	ldd	r31, Y+37	; 0x25
    70f6:	80 81       	ld	r24, Z
    70f8:	88 23       	and	r24, r24
    70fa:	39 f0       	breq	.+14     	; 0x710a <setdate_r+0x116>
    70fc:	80 32       	cpi	r24, 0x20	; 32
    70fe:	11 f0       	breq	.+4      	; 0x7104 <setdate_r+0x110>
    7100:	8a 33       	cpi	r24, 0x3A	; 58
    7102:	19 f4       	brne	.+6      	; 0x710a <setdate_r+0x116>
    7104:	31 96       	adiw	r30, 0x01	; 1
    7106:	fd a3       	std	Y+37, r31	; 0x25
    7108:	ec a3       	std	Y+36, r30	; 0x24
    710a:	4a e0       	ldi	r20, 0x0A	; 10
    710c:	50 e0       	ldi	r21, 0x00	; 0
    710e:	be 01       	movw	r22, r28
    7110:	6c 5d       	subi	r22, 0xDC	; 220
    7112:	7f 4f       	sbci	r23, 0xFF	; 255
    7114:	8c a1       	ldd	r24, Y+36	; 0x24
    7116:	9d a1       	ldd	r25, Y+37	; 0x25
    7118:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
    711c:	7f 83       	std	Y+7, r23	; 0x07
    711e:	6e 83       	std	Y+6, r22	; 0x06
    7120:	2e 85       	ldd	r18, Y+14	; 0x0e
    7122:	3f 85       	ldd	r19, Y+15	; 0x0f
    7124:	21 50       	subi	r18, 0x01	; 1
    7126:	31 09       	sbc	r19, r1
    7128:	3f 87       	std	Y+15, r19	; 0x0f
    712a:	2e 87       	std	Y+14, r18	; 0x0e
    712c:	88 89       	ldd	r24, Y+16	; 0x10
    712e:	99 89       	ldd	r25, Y+17	; 0x11
    7130:	ac 01       	movw	r20, r24
    7132:	42 5b       	subi	r20, 0xB2	; 178
    7134:	57 40       	sbci	r21, 0x07	; 7
    7136:	45 34       	cpi	r20, 0x45	; 69
    7138:	51 05       	cpc	r21, r1
    713a:	38 f0       	brcs	.+14     	; 0x714a <setdate_r+0x156>
    713c:	ed b7       	in	r30, 0x3d	; 61
    713e:	fe b7       	in	r31, 0x3e	; 62
    7140:	95 83       	std	Z+5, r25	; 0x05
    7142:	84 83       	std	Z+4, r24	; 0x04
    7144:	89 e1       	ldi	r24, 0x19	; 25
    7146:	97 e0       	ldi	r25, 0x07	; 7
    7148:	34 c0       	rjmp	.+104    	; 0x71b2 <setdate_r+0x1be>
    714a:	8c 56       	subi	r24, 0x6C	; 108
    714c:	97 40       	sbci	r25, 0x07	; 7
    714e:	99 8b       	std	Y+17, r25	; 0x11
    7150:	88 8b       	std	Y+16, r24	; 0x10
    7152:	2c 30       	cpi	r18, 0x0C	; 12
    7154:	31 05       	cpc	r19, r1
    7156:	38 f0       	brcs	.+14     	; 0x7166 <setdate_r+0x172>
    7158:	ed b7       	in	r30, 0x3d	; 61
    715a:	fe b7       	in	r31, 0x3e	; 62
    715c:	95 83       	std	Z+5, r25	; 0x05
    715e:	84 83       	std	Z+4, r24	; 0x04
    7160:	88 e0       	ldi	r24, 0x08	; 8
    7162:	97 e0       	ldi	r25, 0x07	; 7
    7164:	26 c0       	rjmp	.+76     	; 0x71b2 <setdate_r+0x1be>
    7166:	8c 85       	ldd	r24, Y+12	; 0x0c
    7168:	9d 85       	ldd	r25, Y+13	; 0x0d
    716a:	9c 01       	movw	r18, r24
    716c:	21 50       	subi	r18, 0x01	; 1
    716e:	31 09       	sbc	r19, r1
    7170:	2f 31       	cpi	r18, 0x1F	; 31
    7172:	31 05       	cpc	r19, r1
    7174:	38 f0       	brcs	.+14     	; 0x7184 <setdate_r+0x190>
    7176:	ed b7       	in	r30, 0x3d	; 61
    7178:	fe b7       	in	r31, 0x3e	; 62
    717a:	95 83       	std	Z+5, r25	; 0x05
    717c:	84 83       	std	Z+4, r24	; 0x04
    717e:	87 ef       	ldi	r24, 0xF7	; 247
    7180:	96 e0       	ldi	r25, 0x06	; 6
    7182:	17 c0       	rjmp	.+46     	; 0x71b2 <setdate_r+0x1be>
    7184:	8a 85       	ldd	r24, Y+10	; 0x0a
    7186:	9b 85       	ldd	r25, Y+11	; 0x0b
    7188:	88 31       	cpi	r24, 0x18	; 24
    718a:	91 05       	cpc	r25, r1
    718c:	38 f0       	brcs	.+14     	; 0x719c <setdate_r+0x1a8>
    718e:	ed b7       	in	r30, 0x3d	; 61
    7190:	fe b7       	in	r31, 0x3e	; 62
    7192:	95 83       	std	Z+5, r25	; 0x05
    7194:	84 83       	std	Z+4, r24	; 0x04
    7196:	85 ee       	ldi	r24, 0xE5	; 229
    7198:	96 e0       	ldi	r25, 0x06	; 6
    719a:	0b c0       	rjmp	.+22     	; 0x71b2 <setdate_r+0x1be>
    719c:	88 85       	ldd	r24, Y+8	; 0x08
    719e:	99 85       	ldd	r25, Y+9	; 0x09
    71a0:	8c 33       	cpi	r24, 0x3C	; 60
    71a2:	91 05       	cpc	r25, r1
    71a4:	68 f0       	brcs	.+26     	; 0x71c0 <setdate_r+0x1cc>
    71a6:	ed b7       	in	r30, 0x3d	; 61
    71a8:	fe b7       	in	r31, 0x3e	; 62
    71aa:	95 83       	std	Z+5, r25	; 0x05
    71ac:	84 83       	std	Z+4, r24	; 0x04
    71ae:	84 ed       	ldi	r24, 0xD4	; 212
    71b0:	96 e0       	ldi	r25, 0x06	; 6
    71b2:	a0 e0       	ldi	r26, 0x00	; 0
    71b4:	81 83       	std	Z+1, r24	; 0x01
    71b6:	92 83       	std	Z+2, r25	; 0x02
    71b8:	a3 83       	std	Z+3, r26	; 0x03
    71ba:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    71be:	25 c0       	rjmp	.+74     	; 0x720a <setdate_r+0x216>
    71c0:	ce 01       	movw	r24, r28
    71c2:	06 96       	adiw	r24, 0x06	; 6
    71c4:	13 df       	rcall	.-474    	; 0x6fec <timegm>
    71c6:	6b 01       	movw	r12, r22
    71c8:	7c 01       	movw	r14, r24
    71ca:	6c 8f       	std	Y+28, r22	; 0x1c
    71cc:	7d 8f       	std	Y+29, r23	; 0x1d
    71ce:	8e 8f       	std	Y+30, r24	; 0x1e
    71d0:	9f 8f       	std	Y+31, r25	; 0x1f
    71d2:	18 a2       	std	Y+32, r1	; 0x20
    71d4:	19 a2       	std	Y+33, r1	; 0x21
    71d6:	1a a2       	std	Y+34, r1	; 0x22
    71d8:	1b a2       	std	Y+35, r1	; 0x23
    71da:	be 01       	movw	r22, r28
    71dc:	64 5e       	subi	r22, 0xE4	; 228
    71de:	7f 4f       	sbci	r23, 0xFF	; 255
    71e0:	80 e0       	ldi	r24, 0x00	; 0
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	03 db       	rcall	.-2554   	; 0x67ec <clock_settime>
    71e6:	b7 01       	movw	r22, r14
    71e8:	a6 01       	movw	r20, r12
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	0e 94 76 2e 	call	0x5cec	; 0x5cec <rtc_init>
    71f2:	81 11       	cpse	r24, r1
    71f4:	0d c0       	rjmp	.+26     	; 0x7210 <setdate_r+0x21c>
    71f6:	8d eb       	ldi	r24, 0xBD	; 189
    71f8:	96 e0       	ldi	r25, 0x06	; 6
    71fa:	a0 e0       	ldi	r26, 0x00	; 0
    71fc:	ed b7       	in	r30, 0x3d	; 61
    71fe:	fe b7       	in	r31, 0x3e	; 62
    7200:	81 83       	std	Z+1, r24	; 0x01
    7202:	92 83       	std	Z+2, r25	; 0x02
    7204:	a3 83       	std	Z+3, r26	; 0x03
    7206:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    720a:	8f ef       	ldi	r24, 0xFF	; 255
    720c:	9f ef       	ldi	r25, 0xFF	; 255
    720e:	02 c0       	rjmp	.+4      	; 0x7214 <setdate_r+0x220>
    7210:	80 e0       	ldi	r24, 0x00	; 0
    7212:	90 e0       	ldi	r25, 0x00	; 0
    7214:	a5 96       	adiw	r28, 0x25	; 37
    7216:	0f b6       	in	r0, 0x3f	; 63
    7218:	f8 94       	cli
    721a:	de bf       	out	0x3e, r29	; 62
    721c:	0f be       	out	0x3f, r0	; 63
    721e:	cd bf       	out	0x3d, r28	; 61
    7220:	df 91       	pop	r29
    7222:	cf 91       	pop	r28
    7224:	ff 90       	pop	r15
    7226:	ef 90       	pop	r14
    7228:	df 90       	pop	r13
    722a:	cf 90       	pop	r12
    722c:	08 95       	ret

0000722e <setdate>:
    722e:	ab e2       	ldi	r26, 0x2B	; 43
    7230:	b0 e0       	ldi	r27, 0x00	; 0
    7232:	ed e1       	ldi	r30, 0x1D	; 29
    7234:	f9 e3       	ldi	r31, 0x39	; 57
    7236:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    723a:	8b e2       	ldi	r24, 0x2B	; 43
    723c:	97 e0       	ldi	r25, 0x07	; 7
    723e:	a0 e0       	ldi	r26, 0x00	; 0
    7240:	ed b7       	in	r30, 0x3d	; 61
    7242:	fe b7       	in	r31, 0x3e	; 62
    7244:	81 83       	std	Z+1, r24	; 0x01
    7246:	92 83       	std	Z+2, r25	; 0x02
    7248:	a3 83       	std	Z+3, r26	; 0x03
    724a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    724e:	40 91 af 1c 	lds	r20, 0x1CAF	; 0x801caf <__iob>
    7252:	50 91 b0 1c 	lds	r21, 0x1CB0	; 0x801cb0 <__iob+0x1>
    7256:	66 e2       	ldi	r22, 0x26	; 38
    7258:	70 e0       	ldi	r23, 0x00	; 0
    725a:	ce 01       	movw	r24, r28
    725c:	04 96       	adiw	r24, 0x04	; 4
    725e:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <fgets>
    7262:	ce 01       	movw	r24, r28
    7264:	04 96       	adiw	r24, 0x04	; 4
    7266:	c6 de       	rcall	.-628    	; 0x6ff4 <setdate_r>
    7268:	ab 96       	adiw	r28, 0x2b	; 43
    726a:	e2 e0       	ldi	r30, 0x02	; 2
    726c:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00007270 <find_dst>:
    7270:	a8 e2       	ldi	r26, 0x28	; 40
    7272:	b0 e0       	ldi	r27, 0x00	; 0
    7274:	ee e3       	ldi	r30, 0x3E	; 62
    7276:	f9 e3       	ldi	r31, 0x39	; 57
    7278:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    727c:	3c 01       	movw	r6, r24
    727e:	1a 01       	movw	r2, r20
    7280:	2b 01       	movw	r4, r22
    7282:	49 01       	movw	r8, r18
    7284:	1c a3       	std	Y+36, r17	; 0x24
    7286:	0b a3       	std	Y+35, r16	; 0x23
    7288:	de a2       	std	Y+38, r13	; 0x26
    728a:	cd a2       	std	Y+37, r12	; 0x25
    728c:	b8 a6       	std	Y+40, r11	; 0x28
    728e:	af a2       	std	Y+39, r10	; 0x27
    7290:	be 01       	movw	r22, r28
    7292:	61 5e       	subi	r22, 0xE1	; 225
    7294:	7f 4f       	sbci	r23, 0xFF	; 255
    7296:	ce 01       	movw	r24, r28
    7298:	47 96       	adiw	r24, 0x17	; 23
    729a:	15 dc       	rcall	.-2006   	; 0x6ac6 <gettimeofday>
    729c:	af 8d       	ldd	r26, Y+31	; 0x1f
    729e:	b8 a1       	ldd	r27, Y+32	; 0x20
    72a0:	2c e3       	ldi	r18, 0x3C	; 60
    72a2:	30 e0       	ldi	r19, 0x00	; 0
    72a4:	0e 94 5d e1 	call	0x1c2ba	; 0x1c2ba <__usmulhisi3>
    72a8:	5b 01       	movw	r10, r22
    72aa:	6c 01       	movw	r12, r24
    72ac:	61 14       	cp	r6, r1
    72ae:	71 04       	cpc	r7, r1
    72b0:	31 f0       	breq	.+12     	; 0x72be <find_dst+0x4e>
    72b2:	20 e1       	ldi	r18, 0x10	; 16
    72b4:	a2 1a       	sub	r10, r18
    72b6:	2e e0       	ldi	r18, 0x0E	; 14
    72b8:	b2 0a       	sbc	r11, r18
    72ba:	c1 08       	sbc	r12, r1
    72bc:	d1 08       	sbc	r13, r1
    72be:	81 14       	cp	r8, r1
    72c0:	91 04       	cpc	r9, r1
    72c2:	39 f0       	breq	.+14     	; 0x72d2 <find_dst+0x62>
    72c4:	4c e6       	ldi	r20, 0x6C	; 108
    72c6:	84 1a       	sub	r8, r20
    72c8:	47 e0       	ldi	r20, 0x07	; 7
    72ca:	94 0a       	sbc	r9, r20
    72cc:	9c 86       	std	Y+12, r9	; 0x0c
    72ce:	8b 86       	std	Y+11, r8	; 0x0b
    72d0:	11 c0       	rjmp	.+34     	; 0x72f4 <find_dst+0x84>
    72d2:	21 14       	cp	r2, r1
    72d4:	31 04       	cpc	r3, r1
    72d6:	41 04       	cpc	r4, r1
    72d8:	51 04       	cpc	r5, r1
    72da:	21 f4       	brne	.+8      	; 0x72e4 <find_dst+0x74>
    72dc:	2f 88       	ldd	r2, Y+23	; 0x17
    72de:	38 8c       	ldd	r3, Y+24	; 0x18
    72e0:	49 8c       	ldd	r4, Y+25	; 0x19
    72e2:	5a 8c       	ldd	r5, Y+26	; 0x1a
    72e4:	8e 01       	movw	r16, r28
    72e6:	0f 5f       	subi	r16, 0xFF	; 255
    72e8:	1f 4f       	sbci	r17, 0xFF	; 255
    72ea:	a6 01       	movw	r20, r12
    72ec:	95 01       	movw	r18, r10
    72ee:	c2 01       	movw	r24, r4
    72f0:	b1 01       	movw	r22, r2
    72f2:	ca da       	rcall	.-2668   	; 0x6888 <time_to_tm>
    72f4:	8b a1       	ldd	r24, Y+35	; 0x23
    72f6:	9c a1       	ldd	r25, Y+36	; 0x24
    72f8:	01 97       	sbiw	r24, 0x01	; 1
    72fa:	9a 87       	std	Y+10, r25	; 0x0a
    72fc:	89 87       	std	Y+9, r24	; 0x09
    72fe:	81 e0       	ldi	r24, 0x01	; 1
    7300:	90 e0       	ldi	r25, 0x00	; 0
    7302:	98 87       	std	Y+8, r25	; 0x08
    7304:	8f 83       	std	Y+7, r24	; 0x07
    7306:	8f a1       	ldd	r24, Y+39	; 0x27
    7308:	98 a5       	ldd	r25, Y+40	; 0x28
    730a:	9e 83       	std	Y+6, r25	; 0x06
    730c:	8d 83       	std	Y+5, r24	; 0x05
    730e:	1c 82       	std	Y+4, r1	; 0x04
    7310:	1b 82       	std	Y+3, r1	; 0x03
    7312:	1a 82       	std	Y+2, r1	; 0x02
    7314:	19 82       	std	Y+1, r1	; 0x01
    7316:	ce 01       	movw	r24, r28
    7318:	01 96       	adiw	r24, 0x01	; 1
    731a:	68 de       	rcall	.-816    	; 0x6fec <timegm>
    731c:	45 01       	movw	r8, r10
    731e:	56 01       	movw	r10, r12
    7320:	86 0e       	add	r8, r22
    7322:	97 1e       	adc	r9, r23
    7324:	a8 1e       	adc	r10, r24
    7326:	b9 1e       	adc	r11, r25
    7328:	8e 01       	movw	r16, r28
    732a:	0f 5f       	subi	r16, 0xFF	; 255
    732c:	1f 4f       	sbci	r17, 0xFF	; 255
    732e:	20 e0       	ldi	r18, 0x00	; 0
    7330:	30 e0       	ldi	r19, 0x00	; 0
    7332:	a9 01       	movw	r20, r18
    7334:	c5 01       	movw	r24, r10
    7336:	b4 01       	movw	r22, r8
    7338:	a7 da       	rcall	.-2738   	; 0x6888 <time_to_tm>
    733a:	2d 85       	ldd	r18, Y+13	; 0x0d
    733c:	3e 85       	ldd	r19, Y+14	; 0x0e
    733e:	e7 e0       	ldi	r30, 0x07	; 7
    7340:	f0 e0       	ldi	r31, 0x00	; 0
    7342:	c9 01       	movw	r24, r18
    7344:	bf 01       	movw	r22, r30
    7346:	0e 94 03 e1 	call	0x1c206	; 0x1c206 <__divmodhi4>
    734a:	4d a1       	ldd	r20, Y+37	; 0x25
    734c:	5e a1       	ldd	r21, Y+38	; 0x26
    734e:	48 17       	cp	r20, r24
    7350:	59 07       	cpc	r21, r25
    7352:	21 f4       	brne	.+8      	; 0x735c <find_dst+0xec>
    7354:	51 e0       	ldi	r21, 0x01	; 1
    7356:	e5 1a       	sub	r14, r21
    7358:	f1 08       	sbc	r15, r1
    735a:	51 f0       	breq	.+20     	; 0x7370 <find_dst+0x100>
    735c:	80 e8       	ldi	r24, 0x80	; 128
    735e:	88 0e       	add	r8, r24
    7360:	81 e5       	ldi	r24, 0x51	; 81
    7362:	98 1e       	adc	r9, r24
    7364:	81 e0       	ldi	r24, 0x01	; 1
    7366:	a8 1e       	adc	r10, r24
    7368:	b1 1c       	adc	r11, r1
    736a:	2f 5f       	subi	r18, 0xFF	; 255
    736c:	3f 4f       	sbci	r19, 0xFF	; 255
    736e:	e9 cf       	rjmp	.-46     	; 0x7342 <find_dst+0xd2>
    7370:	c5 01       	movw	r24, r10
    7372:	b4 01       	movw	r22, r8
    7374:	a8 96       	adiw	r28, 0x28	; 40
    7376:	e2 e1       	ldi	r30, 0x12	; 18
    7378:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000737c <set_dst>:
    737c:	4f 92       	push	r4
    737e:	5f 92       	push	r5
    7380:	6f 92       	push	r6
    7382:	7f 92       	push	r7
    7384:	af 92       	push	r10
    7386:	bf 92       	push	r11
    7388:	cf 92       	push	r12
    738a:	df 92       	push	r13
    738c:	ef 92       	push	r14
    738e:	ff 92       	push	r15
    7390:	0f 93       	push	r16
    7392:	1f 93       	push	r17
    7394:	cf 93       	push	r28
    7396:	df 93       	push	r29
    7398:	cd b7       	in	r28, 0x3d	; 61
    739a:	de b7       	in	r29, 0x3e	; 62
    739c:	2c 97       	sbiw	r28, 0x0c	; 12
    739e:	0f b6       	in	r0, 0x3f	; 63
    73a0:	f8 94       	cli
    73a2:	de bf       	out	0x3e, r29	; 62
    73a4:	0f be       	out	0x3f, r0	; 63
    73a6:	cd bf       	out	0x3d, r28	; 61
    73a8:	2b 01       	movw	r4, r22
    73aa:	3c 01       	movw	r6, r24
    73ac:	67 2b       	or	r22, r23
    73ae:	68 2b       	or	r22, r24
    73b0:	69 2b       	or	r22, r25
    73b2:	51 f4       	brne	.+20     	; 0x73c8 <set_dst+0x4c>
    73b4:	be 01       	movw	r22, r28
    73b6:	67 5f       	subi	r22, 0xF7	; 247
    73b8:	7f 4f       	sbci	r23, 0xFF	; 255
    73ba:	ce 01       	movw	r24, r28
    73bc:	01 96       	adiw	r24, 0x01	; 1
    73be:	83 db       	rcall	.-2298   	; 0x6ac6 <gettimeofday>
    73c0:	49 80       	ldd	r4, Y+1	; 0x01
    73c2:	5a 80       	ldd	r5, Y+2	; 0x02
    73c4:	6b 80       	ldd	r6, Y+3	; 0x03
    73c6:	7c 80       	ldd	r7, Y+4	; 0x04
    73c8:	80 91 6c 1a 	lds	r24, 0x1A6C	; 0x801a6c <dst+0x8>
    73cc:	90 91 6d 1a 	lds	r25, 0x1A6D	; 0x801a6d <dst+0x9>
    73d0:	a0 91 6e 1a 	lds	r26, 0x1A6E	; 0x801a6e <dst+0xa>
    73d4:	b0 91 6f 1a 	lds	r27, 0x1A6F	; 0x801a6f <dst+0xb>
    73d8:	84 15       	cp	r24, r4
    73da:	95 05       	cpc	r25, r5
    73dc:	a6 05       	cpc	r26, r6
    73de:	b7 05       	cpc	r27, r7
    73e0:	50 f0       	brcs	.+20     	; 0x73f6 <set_dst+0x7a>
    73e2:	84 19       	sub	r24, r4
    73e4:	95 09       	sbc	r25, r5
    73e6:	a6 09       	sbc	r26, r6
    73e8:	b7 09       	sbc	r27, r7
    73ea:	80 38       	cpi	r24, 0x80	; 128
    73ec:	91 45       	sbci	r25, 0x51	; 81
    73ee:	a1 40       	sbci	r26, 0x01	; 1
    73f0:	b1 05       	cpc	r27, r1
    73f2:	70 f4       	brcc	.+28     	; 0x7410 <set_dst+0x94>
    73f4:	42 c0       	rjmp	.+132    	; 0x747a <set_dst+0xfe>
    73f6:	a3 01       	movw	r20, r6
    73f8:	92 01       	movw	r18, r4
    73fa:	28 1b       	sub	r18, r24
    73fc:	39 0b       	sbc	r19, r25
    73fe:	4a 0b       	sbc	r20, r26
    7400:	5b 0b       	sbc	r21, r27
    7402:	da 01       	movw	r26, r20
    7404:	c9 01       	movw	r24, r18
    7406:	80 38       	cpi	r24, 0x80	; 128
    7408:	91 45       	sbci	r25, 0x51	; 81
    740a:	a1 40       	sbci	r26, 0x01	; 1
    740c:	b1 05       	cpc	r27, r1
    740e:	a8 f1       	brcs	.+106    	; 0x747a <set_dst+0xfe>
    7410:	40 92 6c 1a 	sts	0x1A6C, r4	; 0x801a6c <dst+0x8>
    7414:	50 92 6d 1a 	sts	0x1A6D, r5	; 0x801a6d <dst+0x9>
    7418:	60 92 6e 1a 	sts	0x1A6E, r6	; 0x801a6e <dst+0xa>
    741c:	70 92 6f 1a 	sts	0x1A6F, r7	; 0x801a6f <dst+0xb>
    7420:	82 e0       	ldi	r24, 0x02	; 2
    7422:	a8 2e       	mov	r10, r24
    7424:	b1 2c       	mov	r11, r1
    7426:	c1 2c       	mov	r12, r1
    7428:	d1 2c       	mov	r13, r1
    742a:	92 e0       	ldi	r25, 0x02	; 2
    742c:	e9 2e       	mov	r14, r25
    742e:	f1 2c       	mov	r15, r1
    7430:	03 e0       	ldi	r16, 0x03	; 3
    7432:	10 e0       	ldi	r17, 0x00	; 0
    7434:	20 e0       	ldi	r18, 0x00	; 0
    7436:	30 e0       	ldi	r19, 0x00	; 0
    7438:	b3 01       	movw	r22, r6
    743a:	a2 01       	movw	r20, r4
    743c:	80 e0       	ldi	r24, 0x00	; 0
    743e:	90 e0       	ldi	r25, 0x00	; 0
    7440:	17 df       	rcall	.-466    	; 0x7270 <find_dst>
    7442:	60 93 64 1a 	sts	0x1A64, r22	; 0x801a64 <dst>
    7446:	70 93 65 1a 	sts	0x1A65, r23	; 0x801a65 <dst+0x1>
    744a:	80 93 66 1a 	sts	0x1A66, r24	; 0x801a66 <dst+0x2>
    744e:	90 93 67 1a 	sts	0x1A67, r25	; 0x801a67 <dst+0x3>
    7452:	ee 24       	eor	r14, r14
    7454:	e3 94       	inc	r14
    7456:	f1 2c       	mov	r15, r1
    7458:	0b e0       	ldi	r16, 0x0B	; 11
    745a:	10 e0       	ldi	r17, 0x00	; 0
    745c:	20 e0       	ldi	r18, 0x00	; 0
    745e:	30 e0       	ldi	r19, 0x00	; 0
    7460:	b3 01       	movw	r22, r6
    7462:	a2 01       	movw	r20, r4
    7464:	81 e0       	ldi	r24, 0x01	; 1
    7466:	90 e0       	ldi	r25, 0x00	; 0
    7468:	03 df       	rcall	.-506    	; 0x7270 <find_dst>
    746a:	60 93 68 1a 	sts	0x1A68, r22	; 0x801a68 <dst+0x4>
    746e:	70 93 69 1a 	sts	0x1A69, r23	; 0x801a69 <dst+0x5>
    7472:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <dst+0x6>
    7476:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <dst+0x7>
    747a:	2c 96       	adiw	r28, 0x0c	; 12
    747c:	0f b6       	in	r0, 0x3f	; 63
    747e:	f8 94       	cli
    7480:	de bf       	out	0x3e, r29	; 62
    7482:	0f be       	out	0x3f, r0	; 63
    7484:	cd bf       	out	0x3d, r28	; 61
    7486:	df 91       	pop	r29
    7488:	cf 91       	pop	r28
    748a:	1f 91       	pop	r17
    748c:	0f 91       	pop	r16
    748e:	ff 90       	pop	r15
    7490:	ef 90       	pop	r14
    7492:	df 90       	pop	r13
    7494:	cf 90       	pop	r12
    7496:	bf 90       	pop	r11
    7498:	af 90       	pop	r10
    749a:	7f 90       	pop	r7
    749c:	6f 90       	pop	r6
    749e:	5f 90       	pop	r5
    74a0:	4f 90       	pop	r4
    74a2:	08 95       	ret

000074a4 <asctime_r>:
    74a4:	a5 e1       	ldi	r26, 0x15	; 21
    74a6:	b0 e0       	ldi	r27, 0x00	; 0
    74a8:	e8 e5       	ldi	r30, 0x58	; 88
    74aa:	fa e3       	ldi	r31, 0x3A	; 58
    74ac:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    74b0:	ec 01       	movw	r28, r24
    74b2:	8b 01       	movw	r16, r22
    74b4:	60 e0       	ldi	r22, 0x00	; 0
    74b6:	70 e0       	ldi	r23, 0x00	; 0
    74b8:	d1 db       	rcall	.-2142   	; 0x6c5c <normalize>
    74ba:	80 e2       	ldi	r24, 0x20	; 32
    74bc:	f8 01       	movw	r30, r16
    74be:	11 92       	st	Z+, r1
    74c0:	8a 95       	dec	r24
    74c2:	e9 f7       	brne	.-6      	; 0x74be <asctime_r+0x1a>
    74c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    74c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    74c8:	84 59       	subi	r24, 0x94	; 148
    74ca:	98 4f       	sbci	r25, 0xF8	; 248
    74cc:	ed b7       	in	r30, 0x3d	; 61
    74ce:	fe b7       	in	r31, 0x3e	; 62
    74d0:	95 8b       	std	Z+21, r25	; 0x15
    74d2:	84 8b       	std	Z+20, r24	; 0x14
    74d4:	88 81       	ld	r24, Y
    74d6:	99 81       	ldd	r25, Y+1	; 0x01
    74d8:	93 8b       	std	Z+19, r25	; 0x13
    74da:	82 8b       	std	Z+18, r24	; 0x12
    74dc:	8a 81       	ldd	r24, Y+2	; 0x02
    74de:	9b 81       	ldd	r25, Y+3	; 0x03
    74e0:	91 8b       	std	Z+17, r25	; 0x11
    74e2:	80 8b       	std	Z+16, r24	; 0x10
    74e4:	8c 81       	ldd	r24, Y+4	; 0x04
    74e6:	9d 81       	ldd	r25, Y+5	; 0x05
    74e8:	97 87       	std	Z+15, r25	; 0x0f
    74ea:	86 87       	std	Z+14, r24	; 0x0e
    74ec:	8e 81       	ldd	r24, Y+6	; 0x06
    74ee:	9f 81       	ldd	r25, Y+7	; 0x07
    74f0:	95 87       	std	Z+13, r25	; 0x0d
    74f2:	84 87       	std	Z+12, r24	; 0x0c
    74f4:	e8 85       	ldd	r30, Y+8	; 0x08
    74f6:	f9 85       	ldd	r31, Y+9	; 0x09
    74f8:	ee 0f       	add	r30, r30
    74fa:	ff 1f       	adc	r31, r31
    74fc:	e5 5f       	subi	r30, 0xF5	; 245
    74fe:	fe 4f       	sbci	r31, 0xFE	; 254
    7500:	80 81       	ld	r24, Z
    7502:	91 81       	ldd	r25, Z+1	; 0x01
    7504:	ed b7       	in	r30, 0x3d	; 61
    7506:	fe b7       	in	r31, 0x3e	; 62
    7508:	93 87       	std	Z+11, r25	; 0x0b
    750a:	82 87       	std	Z+10, r24	; 0x0a
    750c:	ec 85       	ldd	r30, Y+12	; 0x0c
    750e:	fd 85       	ldd	r31, Y+13	; 0x0d
    7510:	ee 0f       	add	r30, r30
    7512:	ff 1f       	adc	r31, r31
    7514:	eb 5d       	subi	r30, 0xDB	; 219
    7516:	fe 4f       	sbci	r31, 0xFE	; 254
    7518:	80 81       	ld	r24, Z
    751a:	91 81       	ldd	r25, Z+1	; 0x01
    751c:	ed b7       	in	r30, 0x3d	; 61
    751e:	fe b7       	in	r31, 0x3e	; 62
    7520:	91 87       	std	Z+9, r25	; 0x09
    7522:	80 87       	std	Z+8, r24	; 0x08
    7524:	8c e4       	ldi	r24, 0x4C	; 76
    7526:	97 e0       	ldi	r25, 0x07	; 7
    7528:	a0 e0       	ldi	r26, 0x00	; 0
    752a:	85 83       	std	Z+5, r24	; 0x05
    752c:	96 83       	std	Z+6, r25	; 0x06
    752e:	a7 83       	std	Z+7, r26	; 0x07
    7530:	80 e2       	ldi	r24, 0x20	; 32
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	94 83       	std	Z+4, r25	; 0x04
    7536:	83 83       	std	Z+3, r24	; 0x03
    7538:	12 83       	std	Z+2, r17	; 0x02
    753a:	01 83       	std	Z+1, r16	; 0x01
    753c:	0e 94 67 44 	call	0x88ce	; 0x88ce <snprintf_P>
    7540:	c8 01       	movw	r24, r16
    7542:	cd b7       	in	r28, 0x3d	; 61
    7544:	de b7       	in	r29, 0x3e	; 62
    7546:	65 96       	adiw	r28, 0x15	; 21
    7548:	e4 e0       	ldi	r30, 0x04	; 4
    754a:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000754e <asctime>:
    754e:	60 ef       	ldi	r22, 0xF0	; 240
    7550:	77 e1       	ldi	r23, 0x17	; 23
    7552:	a8 cf       	rjmp	.-176    	; 0x74a4 <asctime_r>
    7554:	08 95       	ret

00007556 <ctime_gm>:
    7556:	a6 e1       	ldi	r26, 0x16	; 22
    7558:	b0 e0       	ldi	r27, 0x00	; 0
    755a:	e1 eb       	ldi	r30, 0xB1	; 177
    755c:	fa e3       	ldi	r31, 0x3A	; 58
    755e:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    7562:	be 01       	movw	r22, r28
    7564:	6f 5f       	subi	r22, 0xFF	; 255
    7566:	7f 4f       	sbci	r23, 0xFF	; 255
    7568:	6d da       	rcall	.-2854   	; 0x6a44 <gmtime_r>
    756a:	60 ed       	ldi	r22, 0xD0	; 208
    756c:	77 e1       	ldi	r23, 0x17	; 23
    756e:	9a df       	rcall	.-204    	; 0x74a4 <asctime_r>
    7570:	66 96       	adiw	r28, 0x16	; 22
    7572:	e2 e0       	ldi	r30, 0x02	; 2
    7574:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00007578 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7578:	a5 e2       	ldi	r26, 0x25	; 37
    757a:	b0 e0       	ldi	r27, 0x00	; 0
    757c:	e2 ec       	ldi	r30, 0xC2	; 194
    757e:	fa e3       	ldi	r31, 0x3A	; 58
    7580:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    7584:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7586:	40 e0       	ldi	r20, 0x00	; 0
    7588:	50 e0       	ldi	r21, 0x00	; 0
    758a:	ba 01       	movw	r22, r20
    758c:	80 e0       	ldi	r24, 0x00	; 0
    758e:	90 e0       	ldi	r25, 0x00	; 0
    7590:	0e 94 76 2e 	call	0x5cec	; 0x5cec <rtc_init>
    7594:	81 11       	cpse	r24, r1
    7596:	27 c0       	rjmp	.+78     	; 0x75e6 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7598:	8b ea       	ldi	r24, 0xAB	; 171
    759a:	96 e0       	ldi	r25, 0x06	; 6
    759c:	a0 e0       	ldi	r26, 0x00	; 0
    759e:	ed b7       	in	r30, 0x3d	; 61
    75a0:	fe b7       	in	r31, 0x3e	; 62
    75a2:	81 83       	std	Z+1, r24	; 0x01
    75a4:	92 83       	std	Z+2, r25	; 0x02
    75a6:	a3 83       	std	Z+3, r26	; 0x03
    75a8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("attempting rtc init\n");
    75ac:	86 e9       	ldi	r24, 0x96	; 150
    75ae:	96 e0       	ldi	r25, 0x06	; 6
    75b0:	a0 e0       	ldi	r26, 0x00	; 0
    75b2:	ed b7       	in	r30, 0x3d	; 61
    75b4:	fe b7       	in	r31, 0x3e	; 62
    75b6:	81 83       	std	Z+1, r24	; 0x01
    75b8:	92 83       	std	Z+2, r25	; 0x02
    75ba:	a3 83       	std	Z+3, r26	; 0x03
    75bc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    75c0:	40 e0       	ldi	r20, 0x00	; 0
    75c2:	50 e0       	ldi	r21, 0x00	; 0
    75c4:	ba 01       	movw	r22, r20
    75c6:	81 e0       	ldi	r24, 0x01	; 1
    75c8:	90 e0       	ldi	r25, 0x00	; 0
    75ca:	0e 94 76 2e 	call	0x5cec	; 0x5cec <rtc_init>
    75ce:	81 11       	cpse	r24, r1
    75d0:	0a c0       	rjmp	.+20     	; 0x75e6 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    75d2:	8f e7       	ldi	r24, 0x7F	; 127
    75d4:	96 e0       	ldi	r25, 0x06	; 6
    75d6:	a0 e0       	ldi	r26, 0x00	; 0
    75d8:	ed b7       	in	r30, 0x3d	; 61
    75da:	fe b7       	in	r31, 0x3e	; 62
    75dc:	81 83       	std	Z+1, r24	; 0x01
    75de:	92 83       	std	Z+2, r25	; 0x02
    75e0:	a3 83       	std	Z+3, r26	; 0x03
    75e2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        }
    }

    if(rtc_read(&tc))
    75e6:	ce 01       	movw	r24, r28
    75e8:	04 96       	adiw	r24, 0x04	; 4
    75ea:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <rtc_read>
    75ee:	88 23       	and	r24, r24
    75f0:	51 f0       	breq	.+20     	; 0x7606 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    75f2:	ce 01       	movw	r24, r28
    75f4:	04 96       	adiw	r24, 0x04	; 4
    75f6:	fa dc       	rcall	.-1548   	; 0x6fec <timegm>
    75f8:	6b 01       	movw	r12, r22
    75fa:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    75fc:	67 2b       	or	r22, r23
    75fe:	68 2b       	or	r22, r24
    7600:	69 2b       	or	r22, r25
    7602:	c1 f4       	brne	.+48     	; 0x7634 <initialize_clock+0xbc>
    7604:	0a c0       	rjmp	.+20     	; 0x761a <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7606:	85 e6       	ldi	r24, 0x65	; 101
    7608:	96 e0       	ldi	r25, 0x06	; 6
    760a:	a0 e0       	ldi	r26, 0x00	; 0
    760c:	ed b7       	in	r30, 0x3d	; 61
    760e:	fe b7       	in	r31, 0x3e	; 62
    7610:	81 83       	std	Z+1, r24	; 0x01
    7612:	92 83       	std	Z+2, r25	; 0x02
    7614:	a3 83       	std	Z+3, r26	; 0x03
    7616:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    761a:	81 e4       	ldi	r24, 0x41	; 65
    761c:	96 e0       	ldi	r25, 0x06	; 6
    761e:	a0 e0       	ldi	r26, 0x00	; 0
    7620:	ed b7       	in	r30, 0x3d	; 61
    7622:	fe b7       	in	r31, 0x3e	; 62
    7624:	81 83       	std	Z+1, r24	; 0x01
    7626:	92 83       	std	Z+2, r25	; 0x02
    7628:	a3 83       	std	Z+3, r26	; 0x03
    762a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    762e:	c1 2c       	mov	r12, r1
    7630:	d1 2c       	mov	r13, r1
    7632:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7634:	1b a3       	std	Y+35, r17	; 0x23
    7636:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7638:	1d a2       	std	Y+37, r1	; 0x25
    763a:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    763c:	ce 01       	movw	r24, r28
    763e:	82 96       	adiw	r24, 0x22	; 34
    7640:	30 da       	rcall	.-2976   	; 0x6aa2 <settimezone>

    ts.tv_sec = seconds;
    7642:	ca 8e       	std	Y+26, r12	; 0x1a
    7644:	db 8e       	std	Y+27, r13	; 0x1b
    7646:	ec 8e       	std	Y+28, r14	; 0x1c
    7648:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    764a:	1e 8e       	std	Y+30, r1	; 0x1e
    764c:	1f 8e       	std	Y+31, r1	; 0x1f
    764e:	18 a2       	std	Y+32, r1	; 0x20
    7650:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7652:	be 01       	movw	r22, r28
    7654:	66 5e       	subi	r22, 0xE6	; 230
    7656:	7f 4f       	sbci	r23, 0xFF	; 255
    7658:	80 e0       	ldi	r24, 0x00	; 0
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	c7 d8       	rcall	.-3698   	; 0x67ec <clock_settime>
}
    765e:	a5 96       	adiw	r28, 0x25	; 37
    7660:	e8 e0       	ldi	r30, 0x08	; 8
    7662:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00007666 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7666:	a9 e2       	ldi	r26, 0x29	; 41
    7668:	b0 e0       	ldi	r27, 0x00	; 0
    766a:	e9 e3       	ldi	r30, 0x39	; 57
    766c:	fb e3       	ldi	r31, 0x3B	; 59
    766e:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7672:	ce 01       	movw	r24, r28
    7674:	08 96       	adiw	r24, 0x08	; 8
    7676:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <rtc_read>
    767a:	88 23       	and	r24, r24
    767c:	29 f1       	breq	.+74     	; 0x76c8 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    767e:	ce 01       	movw	r24, r28
    7680:	08 96       	adiw	r24, 0x08	; 8
    7682:	b4 dc       	rcall	.-1688   	; 0x6fec <timegm>
    7684:	6e a3       	std	Y+38, r22	; 0x26
    7686:	7f a3       	std	Y+39, r23	; 0x27
    7688:	88 a7       	std	Y+40, r24	; 0x28
    768a:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    768c:	ed b7       	in	r30, 0x3d	; 61
    768e:	fe b7       	in	r31, 0x3e	; 62
    7690:	64 83       	std	Z+4, r22	; 0x04
    7692:	75 83       	std	Z+5, r23	; 0x05
    7694:	86 83       	std	Z+6, r24	; 0x06
    7696:	97 83       	std	Z+7, r25	; 0x07
    7698:	8f e2       	ldi	r24, 0x2F	; 47
    769a:	96 e0       	ldi	r25, 0x06	; 6
    769c:	a0 e0       	ldi	r26, 0x00	; 0
    769e:	81 83       	std	Z+1, r24	; 0x01
    76a0:	92 83       	std	Z+2, r25	; 0x02
    76a2:	a3 83       	std	Z+3, r26	; 0x03
    76a4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    76a8:	ce 01       	movw	r24, r28
    76aa:	08 96       	adiw	r24, 0x08	; 8
    76ac:	50 df       	rcall	.-352    	; 0x754e <asctime>
    76ae:	ed b7       	in	r30, 0x3d	; 61
    76b0:	fe b7       	in	r31, 0x3e	; 62
    76b2:	95 83       	std	Z+5, r25	; 0x05
    76b4:	84 83       	std	Z+4, r24	; 0x04
    76b6:	8e e1       	ldi	r24, 0x1E	; 30
    76b8:	96 e0       	ldi	r25, 0x06	; 6
    76ba:	a0 e0       	ldi	r26, 0x00	; 0
    76bc:	81 83       	std	Z+1, r24	; 0x01
    76be:	92 83       	std	Z+2, r25	; 0x02
    76c0:	a3 83       	std	Z+3, r26	; 0x03
    76c2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    76c6:	0a c0       	rjmp	.+20     	; 0x76dc <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    76c8:	8d e0       	ldi	r24, 0x0D	; 13
    76ca:	96 e0       	ldi	r25, 0x06	; 6
    76cc:	a0 e0       	ldi	r26, 0x00	; 0
    76ce:	ed b7       	in	r30, 0x3d	; 61
    76d0:	fe b7       	in	r31, 0x3e	; 62
    76d2:	81 83       	std	Z+1, r24	; 0x01
    76d4:	92 83       	std	Z+2, r25	; 0x02
    76d6:	a3 83       	std	Z+3, r26	; 0x03
    76d8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    76dc:	be 01       	movw	r22, r28
    76de:	62 5e       	subi	r22, 0xE2	; 226
    76e0:	7f 4f       	sbci	r23, 0xFF	; 255
    76e2:	80 e0       	ldi	r24, 0x00	; 0
    76e4:	90 e0       	ldi	r25, 0x00	; 0
    76e6:	0e 94 4d 31 	call	0x629a	; 0x629a <clock_gettime>
    seconds = ts.tv_sec;
    76ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    76ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    76ee:	a8 a1       	ldd	r26, Y+32	; 0x20
    76f0:	b9 a1       	ldd	r27, Y+33	; 0x21
    76f2:	8e a3       	std	Y+38, r24	; 0x26
    76f4:	9f a3       	std	Y+39, r25	; 0x27
    76f6:	a8 a7       	std	Y+40, r26	; 0x28
    76f8:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    76fa:	ed b7       	in	r30, 0x3d	; 61
    76fc:	fe b7       	in	r31, 0x3e	; 62
    76fe:	84 83       	std	Z+4, r24	; 0x04
    7700:	95 83       	std	Z+5, r25	; 0x05
    7702:	a6 83       	std	Z+6, r26	; 0x06
    7704:	b7 83       	std	Z+7, r27	; 0x07
    7706:	8b ef       	ldi	r24, 0xFB	; 251
    7708:	95 e0       	ldi	r25, 0x05	; 5
    770a:	a0 e0       	ldi	r26, 0x00	; 0
    770c:	81 83       	std	Z+1, r24	; 0x01
    770e:	92 83       	std	Z+2, r25	; 0x02
    7710:	a3 83       	std	Z+3, r26	; 0x03
    7712:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7716:	ce 01       	movw	r24, r28
    7718:	86 96       	adiw	r24, 0x26	; 38
    771a:	a9 d9       	rcall	.-3246   	; 0x6a6e <gmtime>
    771c:	18 df       	rcall	.-464    	; 0x754e <asctime>
    771e:	ed b7       	in	r30, 0x3d	; 61
    7720:	fe b7       	in	r31, 0x3e	; 62
    7722:	95 83       	std	Z+5, r25	; 0x05
    7724:	84 83       	std	Z+4, r24	; 0x04
    7726:	8a ee       	ldi	r24, 0xEA	; 234
    7728:	95 e0       	ldi	r25, 0x05	; 5
    772a:	a0 e0       	ldi	r26, 0x00	; 0
    772c:	81 83       	std	Z+1, r24	; 0x01
    772e:	92 83       	std	Z+2, r25	; 0x02
    7730:	a3 83       	std	Z+3, r26	; 0x03
    7732:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
}
    7736:	a9 96       	adiw	r28, 0x29	; 41
    7738:	e2 e0       	ldi	r30, 0x02	; 2
    773a:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000773e <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    773e:	fc 01       	movw	r30, r24
    7740:	84 81       	ldd	r24, Z+4	; 0x04
    7742:	95 81       	ldd	r25, Z+5	; 0x05
    7744:	00 97       	sbiw	r24, 0x00	; 0
    7746:	79 f0       	breq	.+30     	; 0x7766 <_putc_buffer_fn+0x28>
    7748:	66 23       	and	r22, r22
    774a:	69 f0       	breq	.+26     	; 0x7766 <_putc_buffer_fn+0x28>
    774c:	01 97       	sbiw	r24, 0x01	; 1
    774e:	95 83       	std	Z+5, r25	; 0x05
    7750:	84 83       	std	Z+4, r24	; 0x04
    7752:	86 81       	ldd	r24, Z+6	; 0x06
    7754:	97 81       	ldd	r25, Z+7	; 0x07
    7756:	01 96       	adiw	r24, 0x01	; 1
    7758:	97 83       	std	Z+7, r25	; 0x07
    775a:	86 83       	std	Z+6, r24	; 0x06
    775c:	a2 81       	ldd	r26, Z+2	; 0x02
    775e:	b3 81       	ldd	r27, Z+3	; 0x03
    7760:	6d 93       	st	X+, r22
    7762:	b3 83       	std	Z+3, r27	; 0x03
    7764:	a2 83       	std	Z+2, r26	; 0x02
    7766:	02 80       	ldd	r0, Z+2	; 0x02
    7768:	f3 81       	ldd	r31, Z+3	; 0x03
    776a:	e0 2d       	mov	r30, r0
    776c:	10 82       	st	Z, r1
    776e:	08 95       	ret

00007770 <_putc_fn>:
    7770:	fc 01       	movw	r30, r24
    7772:	26 81       	ldd	r18, Z+6	; 0x06
    7774:	37 81       	ldd	r19, Z+7	; 0x07
    7776:	2f 5f       	subi	r18, 0xFF	; 255
    7778:	3f 4f       	sbci	r19, 0xFF	; 255
    777a:	37 83       	std	Z+7, r19	; 0x07
    777c:	26 83       	std	Z+6, r18	; 0x06
    777e:	86 2f       	mov	r24, r22
    7780:	90 e0       	ldi	r25, 0x00	; 0
    7782:	0c 94 e5 74 	jmp	0xe9ca	; 0xe9ca <putchar>
    7786:	08 95       	ret

00007788 <bin2num>:
    7788:	a0 e0       	ldi	r26, 0x00	; 0
    778a:	b0 e0       	ldi	r27, 0x00	; 0
    778c:	ea ec       	ldi	r30, 0xCA	; 202
    778e:	fb e3       	ldi	r31, 0x3B	; 59
    7790:	0c 94 8a e1 	jmp	0x1c314	; 0x1c314 <__prologue_saves__+0xe>
    7794:	ea 01       	movw	r28, r20
    7796:	53 e0       	ldi	r21, 0x03	; 3
    7798:	ee 0c       	add	r14, r14
    779a:	ff 1c       	adc	r15, r15
    779c:	5a 95       	dec	r21
    779e:	e1 f7       	brne	.-8      	; 0x7798 <bin2num+0x10>
    77a0:	fc 01       	movw	r30, r24
    77a2:	af 01       	movw	r20, r30
    77a4:	48 1b       	sub	r20, r24
    77a6:	59 0b       	sbc	r21, r25
    77a8:	c4 17       	cp	r28, r20
    77aa:	d5 07       	cpc	r29, r21
    77ac:	14 f0       	brlt	.+4      	; 0x77b2 <bin2num+0x2a>
    77ae:	11 92       	st	Z+, r1
    77b0:	f8 cf       	rjmp	.-16     	; 0x77a2 <bin2num+0x1a>
    77b2:	41 e0       	ldi	r20, 0x01	; 1
    77b4:	e4 1a       	sub	r14, r20
    77b6:	f1 08       	sbc	r15, r1
    77b8:	5b 01       	movw	r10, r22
    77ba:	42 e0       	ldi	r20, 0x02	; 2
    77bc:	a4 1a       	sub	r10, r20
    77be:	b1 08       	sbc	r11, r1
    77c0:	f7 fc       	sbrc	r15, 7
    77c2:	3b c0       	rjmp	.+118    	; 0x783a <bin2num+0xb2>
    77c4:	f7 01       	movw	r30, r14
    77c6:	43 e0       	ldi	r20, 0x03	; 3
    77c8:	f5 95       	asr	r31
    77ca:	e7 95       	ror	r30
    77cc:	4a 95       	dec	r20
    77ce:	e1 f7       	brne	.-8      	; 0x77c8 <bin2num+0x40>
    77d0:	e0 0f       	add	r30, r16
    77d2:	f1 1f       	adc	r31, r17
    77d4:	40 81       	ld	r20, Z
    77d6:	50 e0       	ldi	r21, 0x00	; 0
    77d8:	f7 01       	movw	r30, r14
    77da:	e7 70       	andi	r30, 0x07	; 7
    77dc:	ff 27       	eor	r31, r31
    77de:	02 c0       	rjmp	.+4      	; 0x77e4 <bin2num+0x5c>
    77e0:	55 95       	asr	r21
    77e2:	47 95       	ror	r20
    77e4:	ea 95       	dec	r30
    77e6:	e2 f7       	brpl	.-8      	; 0x77e0 <bin2num+0x58>
    77e8:	41 70       	andi	r20, 0x01	; 1
    77ea:	55 27       	eor	r21, r21
    77ec:	dc 01       	movw	r26, r24
    77ee:	e0 e0       	ldi	r30, 0x00	; 0
    77f0:	f0 e0       	ldi	r31, 0x00	; 0
    77f2:	ec 17       	cp	r30, r28
    77f4:	fd 07       	cpc	r31, r29
    77f6:	ec f4       	brge	.+58     	; 0x7832 <bin2num+0xaa>
    77f8:	ea 15       	cp	r30, r10
    77fa:	fb 05       	cpc	r31, r11
    77fc:	4c f0       	brlt	.+18     	; 0x7810 <bin2num+0x88>
    77fe:	dc 01       	movw	r26, r24
    7800:	ae 0f       	add	r26, r30
    7802:	bf 1f       	adc	r27, r31
    7804:	1c 92       	st	X, r1
    7806:	41 e0       	ldi	r20, 0x01	; 1
    7808:	e4 1a       	sub	r14, r20
    780a:	f1 08       	sbc	r15, r1
    780c:	ef 01       	movw	r28, r30
    780e:	d8 cf       	rjmp	.-80     	; 0x77c0 <bin2num+0x38>
    7810:	9c 90       	ld	r9, X
    7812:	99 0c       	add	r9, r9
    7814:	94 2a       	or	r9, r20
    7816:	49 2d       	mov	r20, r9
    7818:	50 e0       	ldi	r21, 0x00	; 0
    781a:	42 17       	cp	r20, r18
    781c:	53 07       	cpc	r21, r19
    781e:	24 f0       	brlt	.+8      	; 0x7828 <bin2num+0xa0>
    7820:	92 1a       	sub	r9, r18
    7822:	41 e0       	ldi	r20, 0x01	; 1
    7824:	50 e0       	ldi	r21, 0x00	; 0
    7826:	02 c0       	rjmp	.+4      	; 0x782c <bin2num+0xa4>
    7828:	40 e0       	ldi	r20, 0x00	; 0
    782a:	50 e0       	ldi	r21, 0x00	; 0
    782c:	9d 92       	st	X+, r9
    782e:	31 96       	adiw	r30, 0x01	; 1
    7830:	e0 cf       	rjmp	.-64     	; 0x77f2 <bin2num+0x6a>
    7832:	41 15       	cp	r20, r1
    7834:	51 05       	cpc	r21, r1
    7836:	01 f7       	brne	.-64     	; 0x77f8 <bin2num+0x70>
    7838:	e2 cf       	rjmp	.-60     	; 0x77fe <bin2num+0x76>
    783a:	fc 01       	movw	r30, r24
    783c:	9f 01       	movw	r18, r30
    783e:	28 1b       	sub	r18, r24
    7840:	39 0b       	sbc	r19, r25
    7842:	2c 17       	cp	r18, r28
    7844:	3d 07       	cpc	r19, r29
    7846:	4c f4       	brge	.+18     	; 0x785a <bin2num+0xd2>
    7848:	20 81       	ld	r18, Z
    784a:	2a 30       	cpi	r18, 0x0A	; 10
    784c:	10 f4       	brcc	.+4      	; 0x7852 <bin2num+0xca>
    784e:	20 5d       	subi	r18, 0xD0	; 208
    7850:	01 c0       	rjmp	.+2      	; 0x7854 <bin2num+0xcc>
    7852:	29 5a       	subi	r18, 0xA9	; 169
    7854:	20 83       	st	Z, r18
    7856:	31 96       	adiw	r30, 0x01	; 1
    7858:	f1 cf       	rjmp	.-30     	; 0x783c <bin2num+0xb4>
    785a:	9e 01       	movw	r18, r28
    785c:	d7 ff       	sbrs	r29, 7
    785e:	02 c0       	rjmp	.+4      	; 0x7864 <bin2num+0xdc>
    7860:	20 e0       	ldi	r18, 0x00	; 0
    7862:	30 e0       	ldi	r19, 0x00	; 0
    7864:	c1 14       	cp	r12, r1
    7866:	d1 04       	cpc	r13, r1
    7868:	61 f0       	breq	.+24     	; 0x7882 <bin2num+0xfa>
    786a:	61 50       	subi	r22, 0x01	; 1
    786c:	71 09       	sbc	r23, r1
    786e:	26 17       	cp	r18, r22
    7870:	37 07       	cpc	r19, r23
    7872:	3c f4       	brge	.+14     	; 0x7882 <bin2num+0xfa>
    7874:	fc 01       	movw	r30, r24
    7876:	e2 0f       	add	r30, r18
    7878:	f3 1f       	adc	r31, r19
    787a:	c0 82       	st	Z, r12
    787c:	21 96       	adiw	r28, 0x01	; 1
    787e:	2f 5f       	subi	r18, 0xFF	; 255
    7880:	3f 4f       	sbci	r19, 0xFF	; 255
    7882:	fc 01       	movw	r30, r24
    7884:	e2 0f       	add	r30, r18
    7886:	f3 1f       	adc	r31, r19
    7888:	10 82       	st	Z, r1
    788a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <reverse>
    788e:	ce 01       	movw	r24, r28
    7890:	cd b7       	in	r28, 0x3d	; 61
    7892:	de b7       	in	r29, 0x3e	; 62
    7894:	eb e0       	ldi	r30, 0x0B	; 11
    7896:	0c 94 a6 e1 	jmp	0x1c34c	; 0x1c34c <__epilogue_restores__+0xe>

0000789a <pch>:
    789a:	fc 01       	movw	r30, r24
    789c:	22 81       	ldd	r18, Z+2	; 0x02
    789e:	33 81       	ldd	r19, Z+3	; 0x03
    78a0:	44 81       	ldd	r20, Z+4	; 0x04
    78a2:	55 81       	ldd	r21, Z+5	; 0x05
    78a4:	80 81       	ld	r24, Z
    78a6:	91 81       	ldd	r25, Z+1	; 0x01
    78a8:	24 17       	cp	r18, r20
    78aa:	35 07       	cpc	r19, r21
    78ac:	54 f4       	brge	.+20     	; 0x78c2 <pch+0x28>
    78ae:	a9 01       	movw	r20, r18
    78b0:	4f 5f       	subi	r20, 0xFF	; 255
    78b2:	5f 4f       	sbci	r21, 0xFF	; 255
    78b4:	53 83       	std	Z+3, r21	; 0x03
    78b6:	42 83       	std	Z+2, r20	; 0x02
    78b8:	dc 01       	movw	r26, r24
    78ba:	a2 0f       	add	r26, r18
    78bc:	b3 1f       	adc	r27, r19
    78be:	6c 93       	st	X, r22
    78c0:	04 c0       	rjmp	.+8      	; 0x78ca <pch+0x30>
    78c2:	dc 01       	movw	r26, r24
    78c4:	a2 0f       	add	r26, r18
    78c6:	b3 1f       	adc	r27, r19
    78c8:	1c 92       	st	X, r1
    78ca:	82 81       	ldd	r24, Z+2	; 0x02
    78cc:	93 81       	ldd	r25, Z+3	; 0x03
    78ce:	08 95       	ret

000078d0 <p_ntoa>:
    78d0:	af 92       	push	r10
    78d2:	cf 92       	push	r12
    78d4:	df 92       	push	r13
    78d6:	ef 92       	push	r14
    78d8:	ff 92       	push	r15
    78da:	0f 93       	push	r16
    78dc:	1f 93       	push	r17
    78de:	cf 93       	push	r28
    78e0:	df 93       	push	r29
    78e2:	dc 01       	movw	r26, r24
    78e4:	eb 01       	movw	r28, r22
    78e6:	fa 01       	movw	r30, r20
    78e8:	b9 01       	movw	r22, r18
    78ea:	98 01       	movw	r18, r16
    78ec:	a6 01       	movw	r20, r12
    78ee:	9a 2d       	mov	r25, r10
    78f0:	a5 fa       	bst	r10, 5
    78f2:	cc 24       	eor	r12, r12
    78f4:	c0 f8       	bld	r12, 0
    78f6:	a6 fc       	sbrc	r10, 6
    78f8:	07 c0       	rjmp	.+14     	; 0x7908 <p_ntoa+0x38>
    78fa:	a2 fc       	sbrc	r10, 2
    78fc:	08 c0       	rjmp	.+16     	; 0x790e <p_ntoa+0x3e>
    78fe:	a4 fe       	sbrs	r10, 4
    7900:	09 c0       	rjmp	.+18     	; 0x7914 <p_ntoa+0x44>
    7902:	00 e2       	ldi	r16, 0x20	; 32
    7904:	10 e0       	ldi	r17, 0x00	; 0
    7906:	08 c0       	rjmp	.+16     	; 0x7918 <p_ntoa+0x48>
    7908:	0d e2       	ldi	r16, 0x2D	; 45
    790a:	10 e0       	ldi	r17, 0x00	; 0
    790c:	05 c0       	rjmp	.+10     	; 0x7918 <p_ntoa+0x48>
    790e:	0b e2       	ldi	r16, 0x2B	; 43
    7910:	10 e0       	ldi	r17, 0x00	; 0
    7912:	02 c0       	rjmp	.+4      	; 0x7918 <p_ntoa+0x48>
    7914:	00 e0       	ldi	r16, 0x00	; 0
    7916:	10 e0       	ldi	r17, 0x00	; 0
    7918:	95 ff       	sbrs	r25, 5
    791a:	04 c0       	rjmp	.+8      	; 0x7924 <p_ntoa+0x54>
    791c:	89 2f       	mov	r24, r25
    791e:	8a 70       	andi	r24, 0x0A	; 10
    7920:	09 f0       	breq	.+2      	; 0x7924 <p_ntoa+0x54>
    7922:	c1 2c       	mov	r12, r1
    7924:	c0 fa       	bst	r12, 0
    7926:	95 f9       	bld	r25, 5
    7928:	89 2f       	mov	r24, r25
    792a:	82 70       	andi	r24, 0x02	; 2
    792c:	c8 2e       	mov	r12, r24
    792e:	91 fd       	sbrc	r25, 1
    7930:	02 c0       	rjmp	.+4      	; 0x7936 <p_ntoa+0x66>
    7932:	40 e0       	ldi	r20, 0x00	; 0
    7934:	50 e0       	ldi	r21, 0x00	; 0
    7936:	89 2f       	mov	r24, r25
    7938:	83 70       	andi	r24, 0x03	; 3
    793a:	11 f4       	brne	.+4      	; 0x7940 <p_ntoa+0x70>
    793c:	41 e0       	ldi	r20, 0x01	; 1
    793e:	50 e0       	ldi	r21, 0x00	; 0
    7940:	90 ff       	sbrs	r25, 0
    7942:	0c c0       	rjmp	.+24     	; 0x795c <p_ntoa+0x8c>
    7944:	95 fd       	sbrc	r25, 5
    7946:	05 c0       	rjmp	.+10     	; 0x7952 <p_ntoa+0x82>
    7948:	c1 10       	cpse	r12, r1
    794a:	08 c0       	rjmp	.+16     	; 0x795c <p_ntoa+0x8c>
    794c:	41 e0       	ldi	r20, 0x01	; 1
    794e:	50 e0       	ldi	r21, 0x00	; 0
    7950:	05 c0       	rjmp	.+10     	; 0x795c <p_ntoa+0x8c>
    7952:	94 75       	andi	r25, 0x54	; 84
    7954:	a7 01       	movw	r20, r14
    7956:	11 f0       	breq	.+4      	; 0x795c <p_ntoa+0x8c>
    7958:	41 50       	subi	r20, 0x01	; 1
    795a:	51 09       	sbc	r21, r1
    795c:	68 01       	movw	r12, r16
    795e:	7e 01       	movw	r14, r28
    7960:	8d 01       	movw	r16, r26
    7962:	cf 01       	movw	r24, r30
    7964:	11 df       	rcall	.-478    	; 0x7788 <bin2num>
    7966:	df 91       	pop	r29
    7968:	cf 91       	pop	r28
    796a:	1f 91       	pop	r17
    796c:	0f 91       	pop	r16
    796e:	ff 90       	pop	r15
    7970:	ef 90       	pop	r14
    7972:	df 90       	pop	r13
    7974:	cf 90       	pop	r12
    7976:	af 90       	pop	r10
    7978:	08 95       	ret

0000797a <p_ftoa>:
    797a:	aa e0       	ldi	r26, 0x0A	; 10
    797c:	b0 e0       	ldi	r27, 0x00	; 0
    797e:	e3 ec       	ldi	r30, 0xC3	; 195
    7980:	fc e3       	ldi	r31, 0x3C	; 60
    7982:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    7986:	4b 01       	movw	r8, r22
    7988:	5c 01       	movw	r10, r24
    798a:	1a 01       	movw	r2, r20
    798c:	28 01       	movw	r4, r16
    798e:	c6 fa       	bst	r12, 6
    7990:	11 27       	eor	r17, r17
    7992:	10 f9       	bld	r17, 0
    7994:	5a 83       	std	Y+2, r21	; 0x02
    7996:	49 83       	std	Y+1, r20	; 0x01
    7998:	1c 82       	std	Y+4, r1	; 0x04
    799a:	1b 82       	std	Y+3, r1	; 0x03
    799c:	21 50       	subi	r18, 0x01	; 1
    799e:	31 09       	sbc	r19, r1
    79a0:	3e 83       	std	Y+6, r19	; 0x06
    79a2:	2d 83       	std	Y+5, r18	; 0x05
    79a4:	fa 01       	movw	r30, r20
    79a6:	10 82       	st	Z, r1
    79a8:	20 e0       	ldi	r18, 0x00	; 0
    79aa:	30 e0       	ldi	r19, 0x00	; 0
    79ac:	a9 01       	movw	r20, r18
    79ae:	0e 94 41 e2 	call	0x1c482	; 0x1c482 <__cmpsf2>
    79b2:	87 ff       	sbrs	r24, 7
    79b4:	05 c0       	rjmp	.+10     	; 0x79c0 <p_ftoa+0x46>
    79b6:	b7 fa       	bst	r11, 7
    79b8:	b0 94       	com	r11
    79ba:	b7 f8       	bld	r11, 7
    79bc:	b0 94       	com	r11
    79be:	11 e0       	ldi	r17, 0x01	; 1
    79c0:	10 fb       	bst	r17, 0
    79c2:	c6 f8       	bld	r12, 6
    79c4:	c6 fe       	sbrs	r12, 6
    79c6:	02 c0       	rjmp	.+4      	; 0x79cc <p_ftoa+0x52>
    79c8:	6d e2       	ldi	r22, 0x2D	; 45
    79ca:	07 c0       	rjmp	.+14     	; 0x79da <p_ftoa+0x60>
    79cc:	c2 fe       	sbrs	r12, 2
    79ce:	02 c0       	rjmp	.+4      	; 0x79d4 <p_ftoa+0x5a>
    79d0:	6b e2       	ldi	r22, 0x2B	; 43
    79d2:	03 c0       	rjmp	.+6      	; 0x79da <p_ftoa+0x60>
    79d4:	c4 fe       	sbrs	r12, 4
    79d6:	04 c0       	rjmp	.+8      	; 0x79e0 <p_ftoa+0x66>
    79d8:	60 e2       	ldi	r22, 0x20	; 32
    79da:	ce 01       	movw	r24, r28
    79dc:	01 96       	adiw	r24, 0x01	; 1
    79de:	5d df       	rcall	.-326    	; 0x789a <pch>
    79e0:	37 01       	movw	r6, r14
    79e2:	f7 fe       	sbrs	r15, 7
    79e4:	02 c0       	rjmp	.+4      	; 0x79ea <p_ftoa+0x70>
    79e6:	61 2c       	mov	r6, r1
    79e8:	71 2c       	mov	r7, r1
    79ea:	20 e0       	ldi	r18, 0x00	; 0
    79ec:	30 e0       	ldi	r19, 0x00	; 0
    79ee:	a9 01       	movw	r20, r18
    79f0:	c5 01       	movw	r24, r10
    79f2:	b4 01       	movw	r22, r8
    79f4:	0e 94 41 e2 	call	0x1c482	; 0x1c482 <__cmpsf2>
    79f8:	88 23       	and	r24, r24
    79fa:	d1 f1       	breq	.+116    	; 0x7a70 <p_ftoa+0xf6>
    79fc:	c1 fe       	sbrs	r12, 1
    79fe:	11 c0       	rjmp	.+34     	; 0x7a22 <p_ftoa+0xa8>
    7a00:	83 01       	movw	r16, r6
    7a02:	60 e0       	ldi	r22, 0x00	; 0
    7a04:	70 e0       	ldi	r23, 0x00	; 0
    7a06:	80 e0       	ldi	r24, 0x00	; 0
    7a08:	9f e3       	ldi	r25, 0x3F	; 63
    7a0a:	01 15       	cp	r16, r1
    7a0c:	11 05       	cpc	r17, r1
    7a0e:	69 f0       	breq	.+26     	; 0x7a2a <p_ftoa+0xb0>
    7a10:	20 e0       	ldi	r18, 0x00	; 0
    7a12:	30 e0       	ldi	r19, 0x00	; 0
    7a14:	40 e2       	ldi	r20, 0x20	; 32
    7a16:	51 e4       	ldi	r21, 0x41	; 65
    7a18:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    7a1c:	01 50       	subi	r16, 0x01	; 1
    7a1e:	11 09       	sbc	r17, r1
    7a20:	f4 cf       	rjmp	.-24     	; 0x7a0a <p_ftoa+0x90>
    7a22:	60 e0       	ldi	r22, 0x00	; 0
    7a24:	70 e0       	ldi	r23, 0x00	; 0
    7a26:	80 e0       	ldi	r24, 0x00	; 0
    7a28:	9f e3       	ldi	r25, 0x3F	; 63
    7a2a:	9b 01       	movw	r18, r22
    7a2c:	ac 01       	movw	r20, r24
    7a2e:	c5 01       	movw	r24, r10
    7a30:	b4 01       	movw	r22, r8
    7a32:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <__addsf3>
    7a36:	4b 01       	movw	r8, r22
    7a38:	5c 01       	movw	r10, r24
    7a3a:	ee 24       	eor	r14, r14
    7a3c:	e3 94       	inc	r14
    7a3e:	f1 2c       	mov	r15, r1
    7a40:	20 e0       	ldi	r18, 0x00	; 0
    7a42:	30 e0       	ldi	r19, 0x00	; 0
    7a44:	40 e2       	ldi	r20, 0x20	; 32
    7a46:	51 e4       	ldi	r21, 0x41	; 65
    7a48:	c5 01       	movw	r24, r10
    7a4a:	b4 01       	movw	r22, r8
    7a4c:	0e 94 90 e3 	call	0x1c720	; 0x1c720 <__gesf2>
    7a50:	87 fd       	sbrc	r24, 7
    7a52:	11 c0       	rjmp	.+34     	; 0x7a76 <p_ftoa+0xfc>
    7a54:	ff ef       	ldi	r31, 0xFF	; 255
    7a56:	ef 1a       	sub	r14, r31
    7a58:	ff 0a       	sbc	r15, r31
    7a5a:	20 e0       	ldi	r18, 0x00	; 0
    7a5c:	30 e0       	ldi	r19, 0x00	; 0
    7a5e:	40 e2       	ldi	r20, 0x20	; 32
    7a60:	51 e4       	ldi	r21, 0x41	; 65
    7a62:	c5 01       	movw	r24, r10
    7a64:	b4 01       	movw	r22, r8
    7a66:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    7a6a:	4b 01       	movw	r8, r22
    7a6c:	5c 01       	movw	r10, r24
    7a6e:	e8 cf       	rjmp	.-48     	; 0x7a40 <p_ftoa+0xc6>
    7a70:	ee 24       	eor	r14, r14
    7a72:	e3 94       	inc	r14
    7a74:	f1 2c       	mov	r15, r1
    7a76:	8c 2d       	mov	r24, r12
    7a78:	88 72       	andi	r24, 0x28	; 40
    7a7a:	80 32       	cpi	r24, 0x20	; 32
    7a7c:	c1 f4       	brne	.+48     	; 0x7aae <p_ftoa+0x134>
    7a7e:	82 01       	movw	r16, r4
    7a80:	0e 19       	sub	r16, r14
    7a82:	1f 09       	sbc	r17, r15
    7a84:	8b 81       	ldd	r24, Y+3	; 0x03
    7a86:	9c 81       	ldd	r25, Y+4	; 0x04
    7a88:	08 1b       	sub	r16, r24
    7a8a:	19 0b       	sbc	r17, r25
    7a8c:	c1 fe       	sbrs	r12, 1
    7a8e:	07 c0       	rjmp	.+14     	; 0x7a9e <p_ftoa+0x124>
    7a90:	61 14       	cp	r6, r1
    7a92:	71 04       	cpc	r7, r1
    7a94:	21 f0       	breq	.+8      	; 0x7a9e <p_ftoa+0x124>
    7a96:	06 19       	sub	r16, r6
    7a98:	17 09       	sbc	r17, r7
    7a9a:	01 50       	subi	r16, 0x01	; 1
    7a9c:	11 09       	sbc	r17, r1
    7a9e:	10 16       	cp	r1, r16
    7aa0:	11 06       	cpc	r1, r17
    7aa2:	2c f4       	brge	.+10     	; 0x7aae <p_ftoa+0x134>
    7aa4:	60 e3       	ldi	r22, 0x30	; 48
    7aa6:	ce 01       	movw	r24, r28
    7aa8:	01 96       	adiw	r24, 0x01	; 1
    7aaa:	f7 de       	rcall	.-530    	; 0x789a <pch>
    7aac:	f6 cf       	rjmp	.-20     	; 0x7a9a <p_ftoa+0x120>
    7aae:	c5 01       	movw	r24, r10
    7ab0:	b4 01       	movw	r22, r8
    7ab2:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__fixsfsi>
    7ab6:	6f 83       	std	Y+7, r22	; 0x07
    7ab8:	78 87       	std	Y+8, r23	; 0x08
    7aba:	89 87       	std	Y+9, r24	; 0x09
    7abc:	9a 87       	std	Y+10, r25	; 0x0a
    7abe:	6f 81       	ldd	r22, Y+7	; 0x07
    7ac0:	60 5d       	subi	r22, 0xD0	; 208
    7ac2:	ce 01       	movw	r24, r28
    7ac4:	01 96       	adiw	r24, 0x01	; 1
    7ac6:	e9 de       	rcall	.-558    	; 0x789a <pch>
    7ac8:	2f 81       	ldd	r18, Y+7	; 0x07
    7aca:	38 85       	ldd	r19, Y+8	; 0x08
    7acc:	b9 01       	movw	r22, r18
    7ace:	33 0f       	add	r19, r19
    7ad0:	88 0b       	sbc	r24, r24
    7ad2:	99 0b       	sbc	r25, r25
    7ad4:	0e 94 e0 e2 	call	0x1c5c0	; 0x1c5c0 <__floatsisf>
    7ad8:	9b 01       	movw	r18, r22
    7ada:	ac 01       	movw	r20, r24
    7adc:	c5 01       	movw	r24, r10
    7ade:	b4 01       	movw	r22, r8
    7ae0:	0e 94 dc e1 	call	0x1c3b8	; 0x1c3b8 <__subsf3>
    7ae4:	31 e0       	ldi	r19, 0x01	; 1
    7ae6:	e3 1a       	sub	r14, r19
    7ae8:	f1 08       	sbc	r15, r1
    7aea:	20 e0       	ldi	r18, 0x00	; 0
    7aec:	30 e0       	ldi	r19, 0x00	; 0
    7aee:	40 e2       	ldi	r20, 0x20	; 32
    7af0:	51 e4       	ldi	r21, 0x41	; 65
    7af2:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    7af6:	4b 01       	movw	r8, r22
    7af8:	5c 01       	movw	r10, r24
    7afa:	e1 14       	cp	r14, r1
    7afc:	f1 04       	cpc	r15, r1
    7afe:	b9 f6       	brne	.-82     	; 0x7aae <p_ftoa+0x134>
    7b00:	c1 fc       	sbrc	r12, 1
    7b02:	10 c0       	rjmp	.+32     	; 0x7b24 <p_ftoa+0x1aa>
    7b04:	60 e0       	ldi	r22, 0x00	; 0
    7b06:	ce 01       	movw	r24, r28
    7b08:	01 96       	adiw	r24, 0x01	; 1
    7b0a:	c7 de       	rcall	.-626    	; 0x789a <pch>
    7b0c:	f1 01       	movw	r30, r2
    7b0e:	01 90       	ld	r0, Z+
    7b10:	00 20       	and	r0, r0
    7b12:	e9 f7       	brne	.-6      	; 0x7b0e <p_ftoa+0x194>
    7b14:	31 97       	sbiw	r30, 0x01	; 1
    7b16:	cf 01       	movw	r24, r30
    7b18:	82 19       	sub	r24, r2
    7b1a:	93 09       	sbc	r25, r3
    7b1c:	2a 96       	adiw	r28, 0x0a	; 10
    7b1e:	e2 e1       	ldi	r30, 0x12	; 18
    7b20:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>
    7b24:	61 14       	cp	r6, r1
    7b26:	71 04       	cpc	r7, r1
    7b28:	69 f3       	breq	.-38     	; 0x7b04 <p_ftoa+0x18a>
    7b2a:	6e e2       	ldi	r22, 0x2E	; 46
    7b2c:	ce 01       	movw	r24, r28
    7b2e:	01 96       	adiw	r24, 0x01	; 1
    7b30:	b4 de       	rcall	.-664    	; 0x789a <pch>
    7b32:	c5 01       	movw	r24, r10
    7b34:	b4 01       	movw	r22, r8
    7b36:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__fixsfsi>
    7b3a:	6b 01       	movw	r12, r22
    7b3c:	7c 01       	movw	r14, r24
    7b3e:	07 2e       	mov	r0, r23
    7b40:	00 0c       	add	r0, r0
    7b42:	88 0b       	sbc	r24, r24
    7b44:	99 0b       	sbc	r25, r25
    7b46:	0e 94 e0 e2 	call	0x1c5c0	; 0x1c5c0 <__floatsisf>
    7b4a:	9b 01       	movw	r18, r22
    7b4c:	ac 01       	movw	r20, r24
    7b4e:	c5 01       	movw	r24, r10
    7b50:	b4 01       	movw	r22, r8
    7b52:	0e 94 dc e1 	call	0x1c3b8	; 0x1c3b8 <__subsf3>
    7b56:	4b 01       	movw	r8, r22
    7b58:	5c 01       	movw	r10, r24
    7b5a:	b6 01       	movw	r22, r12
    7b5c:	60 5d       	subi	r22, 0xD0	; 208
    7b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b60:	ce 01       	movw	r24, r28
    7b62:	01 96       	adiw	r24, 0x01	; 1
    7b64:	9a de       	rcall	.-716    	; 0x789a <pch>
    7b66:	81 e0       	ldi	r24, 0x01	; 1
    7b68:	68 1a       	sub	r6, r24
    7b6a:	71 08       	sbc	r7, r1
    7b6c:	20 e0       	ldi	r18, 0x00	; 0
    7b6e:	30 e0       	ldi	r19, 0x00	; 0
    7b70:	40 e2       	ldi	r20, 0x20	; 32
    7b72:	51 e4       	ldi	r21, 0x41	; 65
    7b74:	c5 01       	movw	r24, r10
    7b76:	b4 01       	movw	r22, r8
    7b78:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    7b7c:	4b 01       	movw	r8, r22
    7b7e:	5c 01       	movw	r10, r24
    7b80:	61 14       	cp	r6, r1
    7b82:	71 04       	cpc	r7, r1
    7b84:	b1 f6       	brne	.-84     	; 0x7b32 <p_ftoa+0x1b8>
    7b86:	be cf       	rjmp	.-132    	; 0x7b04 <p_ftoa+0x18a>

00007b88 <p_etoa>:
    7b88:	a3 e1       	ldi	r26, 0x13	; 19
    7b8a:	b0 e0       	ldi	r27, 0x00	; 0
    7b8c:	ea ec       	ldi	r30, 0xCA	; 202
    7b8e:	fd e3       	ldi	r31, 0x3D	; 61
    7b90:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    7b94:	4b 01       	movw	r8, r22
    7b96:	5c 01       	movw	r10, r24
    7b98:	59 8b       	std	Y+17, r21	; 0x11
    7b9a:	48 8b       	std	Y+16, r20	; 0x10
    7b9c:	1b 8b       	std	Y+19, r17	; 0x13
    7b9e:	0a 8b       	std	Y+18, r16	; 0x12
    7ba0:	3c 2c       	mov	r3, r12
    7ba2:	c6 fa       	bst	r12, 6
    7ba4:	11 27       	eor	r17, r17
    7ba6:	10 f9       	bld	r17, 0
    7ba8:	59 87       	std	Y+9, r21	; 0x09
    7baa:	48 87       	std	Y+8, r20	; 0x08
    7bac:	1b 86       	std	Y+11, r1	; 0x0b
    7bae:	1a 86       	std	Y+10, r1	; 0x0a
    7bb0:	21 50       	subi	r18, 0x01	; 1
    7bb2:	31 09       	sbc	r19, r1
    7bb4:	3d 87       	std	Y+13, r19	; 0x0d
    7bb6:	2c 87       	std	Y+12, r18	; 0x0c
    7bb8:	fa 01       	movw	r30, r20
    7bba:	10 82       	st	Z, r1
    7bbc:	20 e0       	ldi	r18, 0x00	; 0
    7bbe:	30 e0       	ldi	r19, 0x00	; 0
    7bc0:	a9 01       	movw	r20, r18
    7bc2:	0e 94 41 e2 	call	0x1c482	; 0x1c482 <__cmpsf2>
    7bc6:	87 ff       	sbrs	r24, 7
    7bc8:	05 c0       	rjmp	.+10     	; 0x7bd4 <p_etoa+0x4c>
    7bca:	b7 fa       	bst	r11, 7
    7bcc:	b0 94       	com	r11
    7bce:	b7 f8       	bld	r11, 7
    7bd0:	b0 94       	com	r11
    7bd2:	11 e0       	ldi	r17, 0x01	; 1
    7bd4:	10 fb       	bst	r17, 0
    7bd6:	36 f8       	bld	r3, 6
    7bd8:	36 fe       	sbrs	r3, 6
    7bda:	02 c0       	rjmp	.+4      	; 0x7be0 <p_etoa+0x58>
    7bdc:	6d e2       	ldi	r22, 0x2D	; 45
    7bde:	07 c0       	rjmp	.+14     	; 0x7bee <p_etoa+0x66>
    7be0:	32 fe       	sbrs	r3, 2
    7be2:	02 c0       	rjmp	.+4      	; 0x7be8 <p_etoa+0x60>
    7be4:	6b e2       	ldi	r22, 0x2B	; 43
    7be6:	03 c0       	rjmp	.+6      	; 0x7bee <p_etoa+0x66>
    7be8:	34 fe       	sbrs	r3, 4
    7bea:	04 c0       	rjmp	.+8      	; 0x7bf4 <p_etoa+0x6c>
    7bec:	60 e2       	ldi	r22, 0x20	; 32
    7bee:	ce 01       	movw	r24, r28
    7bf0:	08 96       	adiw	r24, 0x08	; 8
    7bf2:	53 de       	rcall	.-858    	; 0x789a <pch>
    7bf4:	37 01       	movw	r6, r14
    7bf6:	f7 fe       	sbrs	r15, 7
    7bf8:	02 c0       	rjmp	.+4      	; 0x7bfe <p_etoa+0x76>
    7bfa:	61 2c       	mov	r6, r1
    7bfc:	71 2c       	mov	r7, r1
    7bfe:	1f 86       	std	Y+15, r1	; 0x0f
    7c00:	1e 86       	std	Y+14, r1	; 0x0e
    7c02:	20 e0       	ldi	r18, 0x00	; 0
    7c04:	30 e0       	ldi	r19, 0x00	; 0
    7c06:	a9 01       	movw	r20, r18
    7c08:	c5 01       	movw	r24, r10
    7c0a:	b4 01       	movw	r22, r8
    7c0c:	0e 94 41 e2 	call	0x1c482	; 0x1c482 <__cmpsf2>
    7c10:	f3 2d       	mov	r31, r3
    7c12:	f2 70       	andi	r31, 0x02	; 2
    7c14:	2f 2e       	mov	r2, r31
    7c16:	88 23       	and	r24, r24
    7c18:	09 f4       	brne	.+2      	; 0x7c1c <p_etoa+0x94>
    7c1a:	70 c0       	rjmp	.+224    	; 0x7cfc <p_etoa+0x174>
    7c1c:	ff 23       	and	r31, r31
    7c1e:	b1 f0       	breq	.+44     	; 0x7c4c <p_etoa+0xc4>
    7c20:	83 01       	movw	r16, r6
    7c22:	c1 2c       	mov	r12, r1
    7c24:	d1 2c       	mov	r13, r1
    7c26:	e1 2c       	mov	r14, r1
    7c28:	2f e3       	ldi	r18, 0x3F	; 63
    7c2a:	f2 2e       	mov	r15, r18
    7c2c:	01 15       	cp	r16, r1
    7c2e:	11 05       	cpc	r17, r1
    7c30:	91 f0       	breq	.+36     	; 0x7c56 <p_etoa+0xce>
    7c32:	20 e0       	ldi	r18, 0x00	; 0
    7c34:	30 e0       	ldi	r19, 0x00	; 0
    7c36:	40 e2       	ldi	r20, 0x20	; 32
    7c38:	51 e4       	ldi	r21, 0x41	; 65
    7c3a:	c7 01       	movw	r24, r14
    7c3c:	b6 01       	movw	r22, r12
    7c3e:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    7c42:	6b 01       	movw	r12, r22
    7c44:	7c 01       	movw	r14, r24
    7c46:	01 50       	subi	r16, 0x01	; 1
    7c48:	11 09       	sbc	r17, r1
    7c4a:	f0 cf       	rjmp	.-32     	; 0x7c2c <p_etoa+0xa4>
    7c4c:	c1 2c       	mov	r12, r1
    7c4e:	d1 2c       	mov	r13, r1
    7c50:	e1 2c       	mov	r14, r1
    7c52:	9f e3       	ldi	r25, 0x3F	; 63
    7c54:	f9 2e       	mov	r15, r25
    7c56:	41 2c       	mov	r4, r1
    7c58:	51 2c       	mov	r5, r1
    7c5a:	82 01       	movw	r16, r4
    7c5c:	01 50       	subi	r16, 0x01	; 1
    7c5e:	11 09       	sbc	r17, r1
    7c60:	20 e0       	ldi	r18, 0x00	; 0
    7c62:	30 e0       	ldi	r19, 0x00	; 0
    7c64:	40 e8       	ldi	r20, 0x80	; 128
    7c66:	5f e3       	ldi	r21, 0x3F	; 63
    7c68:	c5 01       	movw	r24, r10
    7c6a:	b4 01       	movw	r22, r8
    7c6c:	0e 94 41 e2 	call	0x1c482	; 0x1c482 <__cmpsf2>
    7c70:	87 ff       	sbrs	r24, 7
    7c72:	0c c0       	rjmp	.+24     	; 0x7c8c <p_etoa+0x104>
    7c74:	20 e0       	ldi	r18, 0x00	; 0
    7c76:	30 e0       	ldi	r19, 0x00	; 0
    7c78:	40 e2       	ldi	r20, 0x20	; 32
    7c7a:	51 e4       	ldi	r21, 0x41	; 65
    7c7c:	c5 01       	movw	r24, r10
    7c7e:	b4 01       	movw	r22, r8
    7c80:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    7c84:	4b 01       	movw	r8, r22
    7c86:	5c 01       	movw	r10, r24
    7c88:	28 01       	movw	r4, r16
    7c8a:	e7 cf       	rjmp	.-50     	; 0x7c5a <p_etoa+0xd2>
    7c8c:	82 01       	movw	r16, r4
    7c8e:	0f 5f       	subi	r16, 0xFF	; 255
    7c90:	1f 4f       	sbci	r17, 0xFF	; 255
    7c92:	20 e0       	ldi	r18, 0x00	; 0
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	40 e2       	ldi	r20, 0x20	; 32
    7c98:	51 e4       	ldi	r21, 0x41	; 65
    7c9a:	c5 01       	movw	r24, r10
    7c9c:	b4 01       	movw	r22, r8
    7c9e:	0e 94 90 e3 	call	0x1c720	; 0x1c720 <__gesf2>
    7ca2:	87 fd       	sbrc	r24, 7
    7ca4:	0c c0       	rjmp	.+24     	; 0x7cbe <p_etoa+0x136>
    7ca6:	20 e0       	ldi	r18, 0x00	; 0
    7ca8:	30 e0       	ldi	r19, 0x00	; 0
    7caa:	40 e2       	ldi	r20, 0x20	; 32
    7cac:	51 e4       	ldi	r21, 0x41	; 65
    7cae:	c5 01       	movw	r24, r10
    7cb0:	b4 01       	movw	r22, r8
    7cb2:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    7cb6:	4b 01       	movw	r8, r22
    7cb8:	5c 01       	movw	r10, r24
    7cba:	28 01       	movw	r4, r16
    7cbc:	e7 cf       	rjmp	.-50     	; 0x7c8c <p_etoa+0x104>
    7cbe:	a7 01       	movw	r20, r14
    7cc0:	96 01       	movw	r18, r12
    7cc2:	c5 01       	movw	r24, r10
    7cc4:	b4 01       	movw	r22, r8
    7cc6:	0e 94 dd e1 	call	0x1c3ba	; 0x1c3ba <__addsf3>
    7cca:	4b 01       	movw	r8, r22
    7ccc:	5c 01       	movw	r10, r24
    7cce:	82 01       	movw	r16, r4
    7cd0:	2f ef       	ldi	r18, 0xFF	; 255
    7cd2:	42 1a       	sub	r4, r18
    7cd4:	52 0a       	sbc	r5, r18
    7cd6:	20 e0       	ldi	r18, 0x00	; 0
    7cd8:	30 e0       	ldi	r19, 0x00	; 0
    7cda:	40 e2       	ldi	r20, 0x20	; 32
    7cdc:	51 e4       	ldi	r21, 0x41	; 65
    7cde:	0e 94 90 e3 	call	0x1c720	; 0x1c720 <__gesf2>
    7ce2:	87 fd       	sbrc	r24, 7
    7ce4:	09 c0       	rjmp	.+18     	; 0x7cf8 <p_etoa+0x170>
    7ce6:	20 e0       	ldi	r18, 0x00	; 0
    7ce8:	30 e0       	ldi	r19, 0x00	; 0
    7cea:	40 e2       	ldi	r20, 0x20	; 32
    7cec:	51 e4       	ldi	r21, 0x41	; 65
    7cee:	c5 01       	movw	r24, r10
    7cf0:	b4 01       	movw	r22, r8
    7cf2:	0e 94 45 e2 	call	0x1c48a	; 0x1c48a <__divsf3>
    7cf6:	e9 cf       	rjmp	.-46     	; 0x7cca <p_etoa+0x142>
    7cf8:	0e 87       	std	Y+14, r16	; 0x0e
    7cfa:	1f 87       	std	Y+15, r17	; 0x0f
    7cfc:	85 e6       	ldi	r24, 0x65	; 101
    7cfe:	89 83       	std	Y+1, r24	; 0x01
    7d00:	8e 85       	ldd	r24, Y+14	; 0x0e
    7d02:	9f 85       	ldd	r25, Y+15	; 0x0f
    7d04:	97 ff       	sbrs	r25, 7
    7d06:	08 c0       	rjmp	.+16     	; 0x7d18 <p_etoa+0x190>
    7d08:	91 95       	neg	r25
    7d0a:	81 95       	neg	r24
    7d0c:	91 09       	sbc	r25, r1
    7d0e:	9f 87       	std	Y+15, r25	; 0x0f
    7d10:	8e 87       	std	Y+14, r24	; 0x0e
    7d12:	8d e2       	ldi	r24, 0x2D	; 45
    7d14:	90 e0       	ldi	r25, 0x00	; 0
    7d16:	02 c0       	rjmp	.+4      	; 0x7d1c <p_etoa+0x194>
    7d18:	8b e2       	ldi	r24, 0x2B	; 43
    7d1a:	90 e0       	ldi	r25, 0x00	; 0
    7d1c:	6c 01       	movw	r12, r24
    7d1e:	82 e0       	ldi	r24, 0x02	; 2
    7d20:	e8 2e       	mov	r14, r24
    7d22:	f1 2c       	mov	r15, r1
    7d24:	8e 01       	movw	r16, r28
    7d26:	02 5f       	subi	r16, 0xF2	; 242
    7d28:	1f 4f       	sbci	r17, 0xFF	; 255
    7d2a:	2a e0       	ldi	r18, 0x0A	; 10
    7d2c:	30 e0       	ldi	r19, 0x00	; 0
    7d2e:	42 e0       	ldi	r20, 0x02	; 2
    7d30:	50 e0       	ldi	r21, 0x00	; 0
    7d32:	65 e0       	ldi	r22, 0x05	; 5
    7d34:	70 e0       	ldi	r23, 0x00	; 0
    7d36:	ce 01       	movw	r24, r28
    7d38:	02 96       	adiw	r24, 0x02	; 2
    7d3a:	26 dd       	rcall	.-1460   	; 0x7788 <bin2num>
    7d3c:	9c 01       	movw	r18, r24
    7d3e:	93 2d       	mov	r25, r3
    7d40:	98 72       	andi	r25, 0x28	; 40
    7d42:	90 32       	cpi	r25, 0x20	; 32
    7d44:	71 f0       	breq	.+28     	; 0x7d62 <p_etoa+0x1da>
    7d46:	c5 01       	movw	r24, r10
    7d48:	b4 01       	movw	r22, r8
    7d4a:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__fixsfsi>
    7d4e:	6b 01       	movw	r12, r22
    7d50:	7c 01       	movw	r14, r24
    7d52:	60 e3       	ldi	r22, 0x30	; 48
    7d54:	6c 0d       	add	r22, r12
    7d56:	ce 01       	movw	r24, r28
    7d58:	08 96       	adiw	r24, 0x08	; 8
    7d5a:	9f dd       	rcall	.-1218   	; 0x789a <pch>
    7d5c:	21 10       	cpse	r2, r1
    7d5e:	20 c0       	rjmp	.+64     	; 0x7da0 <p_etoa+0x218>
    7d60:	63 c0       	rjmp	.+198    	; 0x7e28 <p_etoa+0x2a0>
    7d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d64:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d66:	0a 89       	ldd	r16, Y+18	; 0x12
    7d68:	1b 89       	ldd	r17, Y+19	; 0x13
    7d6a:	08 1b       	sub	r16, r24
    7d6c:	19 0b       	sbc	r17, r25
    7d6e:	22 20       	and	r2, r2
    7d70:	41 f0       	breq	.+16     	; 0x7d82 <p_etoa+0x1fa>
    7d72:	61 14       	cp	r6, r1
    7d74:	71 04       	cpc	r7, r1
    7d76:	29 f0       	breq	.+10     	; 0x7d82 <p_etoa+0x1fa>
    7d78:	06 19       	sub	r16, r6
    7d7a:	17 09       	sbc	r17, r7
    7d7c:	06 50       	subi	r16, 0x06	; 6
    7d7e:	11 09       	sbc	r17, r1
    7d80:	02 c0       	rjmp	.+4      	; 0x7d86 <p_etoa+0x1fe>
    7d82:	05 50       	subi	r16, 0x05	; 5
    7d84:	11 09       	sbc	r17, r1
    7d86:	24 30       	cpi	r18, 0x04	; 4
    7d88:	31 05       	cpc	r19, r1
    7d8a:	14 f0       	brlt	.+4      	; 0x7d90 <p_etoa+0x208>
    7d8c:	01 50       	subi	r16, 0x01	; 1
    7d8e:	11 09       	sbc	r17, r1
    7d90:	10 16       	cp	r1, r16
    7d92:	11 06       	cpc	r1, r17
    7d94:	c4 f6       	brge	.-80     	; 0x7d46 <p_etoa+0x1be>
    7d96:	60 e3       	ldi	r22, 0x30	; 48
    7d98:	ce 01       	movw	r24, r28
    7d9a:	08 96       	adiw	r24, 0x08	; 8
    7d9c:	7e dd       	rcall	.-1284   	; 0x789a <pch>
    7d9e:	f6 cf       	rjmp	.-20     	; 0x7d8c <p_etoa+0x204>
    7da0:	61 14       	cp	r6, r1
    7da2:	71 04       	cpc	r7, r1
    7da4:	09 f4       	brne	.+2      	; 0x7da8 <p_etoa+0x220>
    7da6:	40 c0       	rjmp	.+128    	; 0x7e28 <p_etoa+0x2a0>
    7da8:	b6 01       	movw	r22, r12
    7daa:	dd 0c       	add	r13, r13
    7dac:	88 0b       	sbc	r24, r24
    7dae:	99 0b       	sbc	r25, r25
    7db0:	0e 94 e0 e2 	call	0x1c5c0	; 0x1c5c0 <__floatsisf>
    7db4:	9b 01       	movw	r18, r22
    7db6:	ac 01       	movw	r20, r24
    7db8:	c5 01       	movw	r24, r10
    7dba:	b4 01       	movw	r22, r8
    7dbc:	0e 94 dc e1 	call	0x1c3b8	; 0x1c3b8 <__subsf3>
    7dc0:	20 e0       	ldi	r18, 0x00	; 0
    7dc2:	30 e0       	ldi	r19, 0x00	; 0
    7dc4:	40 e2       	ldi	r20, 0x20	; 32
    7dc6:	51 e4       	ldi	r21, 0x41	; 65
    7dc8:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    7dcc:	4b 01       	movw	r8, r22
    7dce:	5c 01       	movw	r10, r24
    7dd0:	6e e2       	ldi	r22, 0x2E	; 46
    7dd2:	ce 01       	movw	r24, r28
    7dd4:	08 96       	adiw	r24, 0x08	; 8
    7dd6:	61 dd       	rcall	.-1342   	; 0x789a <pch>
    7dd8:	c5 01       	movw	r24, r10
    7dda:	b4 01       	movw	r22, r8
    7ddc:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__fixsfsi>
    7de0:	6b 01       	movw	r12, r22
    7de2:	7c 01       	movw	r14, r24
    7de4:	07 2e       	mov	r0, r23
    7de6:	00 0c       	add	r0, r0
    7de8:	88 0b       	sbc	r24, r24
    7dea:	99 0b       	sbc	r25, r25
    7dec:	0e 94 e0 e2 	call	0x1c5c0	; 0x1c5c0 <__floatsisf>
    7df0:	9b 01       	movw	r18, r22
    7df2:	ac 01       	movw	r20, r24
    7df4:	c5 01       	movw	r24, r10
    7df6:	b4 01       	movw	r22, r8
    7df8:	0e 94 dc e1 	call	0x1c3b8	; 0x1c3b8 <__subsf3>
    7dfc:	4b 01       	movw	r8, r22
    7dfe:	5c 01       	movw	r10, r24
    7e00:	b6 01       	movw	r22, r12
    7e02:	60 5d       	subi	r22, 0xD0	; 208
    7e04:	7f 4f       	sbci	r23, 0xFF	; 255
    7e06:	ce 01       	movw	r24, r28
    7e08:	08 96       	adiw	r24, 0x08	; 8
    7e0a:	47 dd       	rcall	.-1394   	; 0x789a <pch>
    7e0c:	20 e0       	ldi	r18, 0x00	; 0
    7e0e:	30 e0       	ldi	r19, 0x00	; 0
    7e10:	40 e2       	ldi	r20, 0x20	; 32
    7e12:	51 e4       	ldi	r21, 0x41	; 65
    7e14:	c5 01       	movw	r24, r10
    7e16:	b4 01       	movw	r22, r8
    7e18:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__mulsf3>
    7e1c:	4b 01       	movw	r8, r22
    7e1e:	5c 01       	movw	r10, r24
    7e20:	31 e0       	ldi	r19, 0x01	; 1
    7e22:	63 1a       	sub	r6, r19
    7e24:	71 08       	sbc	r7, r1
    7e26:	c1 f6       	brne	.-80     	; 0x7dd8 <p_etoa+0x250>
    7e28:	8e 01       	movw	r16, r28
    7e2a:	0f 5f       	subi	r16, 0xFF	; 255
    7e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    7e2e:	f8 01       	movw	r30, r16
    7e30:	61 91       	ld	r22, Z+
    7e32:	8f 01       	movw	r16, r30
    7e34:	ce 01       	movw	r24, r28
    7e36:	08 96       	adiw	r24, 0x08	; 8
    7e38:	66 23       	and	r22, r22
    7e3a:	11 f0       	breq	.+4      	; 0x7e40 <p_etoa+0x2b8>
    7e3c:	2e dd       	rcall	.-1444   	; 0x789a <pch>
    7e3e:	f7 cf       	rjmp	.-18     	; 0x7e2e <p_etoa+0x2a6>
    7e40:	2c dd       	rcall	.-1448   	; 0x789a <pch>
    7e42:	e8 89       	ldd	r30, Y+16	; 0x10
    7e44:	f9 89       	ldd	r31, Y+17	; 0x11
    7e46:	01 90       	ld	r0, Z+
    7e48:	00 20       	and	r0, r0
    7e4a:	e9 f7       	brne	.-6      	; 0x7e46 <p_etoa+0x2be>
    7e4c:	cf 01       	movw	r24, r30
    7e4e:	01 97       	sbiw	r24, 0x01	; 1
    7e50:	28 89       	ldd	r18, Y+16	; 0x10
    7e52:	39 89       	ldd	r19, Y+17	; 0x11
    7e54:	82 1b       	sub	r24, r18
    7e56:	93 0b       	sbc	r25, r19
    7e58:	63 96       	adiw	r28, 0x13	; 19
    7e5a:	e2 e1       	ldi	r30, 0x12	; 18
    7e5c:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00007e60 <_puts_pad>:
    7e60:	a0 e0       	ldi	r26, 0x00	; 0
    7e62:	b0 e0       	ldi	r27, 0x00	; 0
    7e64:	e6 e3       	ldi	r30, 0x36	; 54
    7e66:	ff e3       	ldi	r31, 0x3F	; 63
    7e68:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
    7e6c:	6c 01       	movw	r12, r24
    7e6e:	4b 01       	movw	r8, r22
    7e70:	79 01       	movw	r14, r18
    7e72:	24 17       	cp	r18, r20
    7e74:	35 07       	cpc	r19, r21
    7e76:	24 f4       	brge	.+8      	; 0x7e80 <_puts_pad+0x20>
    7e78:	ea 01       	movw	r28, r20
    7e7a:	c2 1b       	sub	r28, r18
    7e7c:	d3 0b       	sbc	r29, r19
    7e7e:	02 c0       	rjmp	.+4      	; 0x7e84 <_puts_pad+0x24>
    7e80:	c0 e0       	ldi	r28, 0x00	; 0
    7e82:	d0 e0       	ldi	r29, 0x00	; 0
    7e84:	01 15       	cp	r16, r1
    7e86:	11 05       	cpc	r17, r1
    7e88:	49 f4       	brne	.+18     	; 0x7e9c <_puts_pad+0x3c>
    7e8a:	21 97       	sbiw	r28, 0x01	; 1
    7e8c:	38 f0       	brcs	.+14     	; 0x7e9c <_puts_pad+0x3c>
    7e8e:	d6 01       	movw	r26, r12
    7e90:	ed 91       	ld	r30, X+
    7e92:	fc 91       	ld	r31, X
    7e94:	60 e2       	ldi	r22, 0x20	; 32
    7e96:	c6 01       	movw	r24, r12
    7e98:	09 95       	icall
    7e9a:	f7 cf       	rjmp	.-18     	; 0x7e8a <_puts_pad+0x2a>
    7e9c:	54 01       	movw	r10, r8
    7e9e:	f5 01       	movw	r30, r10
    7ea0:	61 91       	ld	r22, Z+
    7ea2:	5f 01       	movw	r10, r30
    7ea4:	66 23       	and	r22, r22
    7ea6:	61 f0       	breq	.+24     	; 0x7ec0 <_puts_pad+0x60>
    7ea8:	e1 14       	cp	r14, r1
    7eaa:	f1 04       	cpc	r15, r1
    7eac:	49 f0       	breq	.+18     	; 0x7ec0 <_puts_pad+0x60>
    7eae:	d6 01       	movw	r26, r12
    7eb0:	ed 91       	ld	r30, X+
    7eb2:	fc 91       	ld	r31, X
    7eb4:	c6 01       	movw	r24, r12
    7eb6:	09 95       	icall
    7eb8:	b1 e0       	ldi	r27, 0x01	; 1
    7eba:	eb 1a       	sub	r14, r27
    7ebc:	f1 08       	sbc	r15, r1
    7ebe:	ef cf       	rjmp	.-34     	; 0x7e9e <_puts_pad+0x3e>
    7ec0:	01 15       	cp	r16, r1
    7ec2:	11 05       	cpc	r17, r1
    7ec4:	51 f0       	breq	.+20     	; 0x7eda <_puts_pad+0x7a>
    7ec6:	20 97       	sbiw	r28, 0x00	; 0
    7ec8:	41 f0       	breq	.+16     	; 0x7eda <_puts_pad+0x7a>
    7eca:	d6 01       	movw	r26, r12
    7ecc:	ed 91       	ld	r30, X+
    7ece:	fc 91       	ld	r31, X
    7ed0:	60 e2       	ldi	r22, 0x20	; 32
    7ed2:	c6 01       	movw	r24, r12
    7ed4:	09 95       	icall
    7ed6:	21 97       	sbiw	r28, 0x01	; 1
    7ed8:	f6 cf       	rjmp	.-20     	; 0x7ec6 <_puts_pad+0x66>
    7eda:	cd b7       	in	r28, 0x3d	; 61
    7edc:	de b7       	in	r29, 0x3e	; 62
    7ede:	ec e0       	ldi	r30, 0x0C	; 12
    7ee0:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

00007ee4 <_puts_pad_X>:
    7ee4:	2f 92       	push	r2
    7ee6:	3f 92       	push	r3
    7ee8:	4f 92       	push	r4
    7eea:	6f 92       	push	r6
    7eec:	7f 92       	push	r7
    7eee:	8f 92       	push	r8
    7ef0:	cf 92       	push	r12
    7ef2:	df 92       	push	r13
    7ef4:	ef 92       	push	r14
    7ef6:	ff 92       	push	r15
    7ef8:	0f 93       	push	r16
    7efa:	1f 93       	push	r17
    7efc:	cf 93       	push	r28
    7efe:	df 93       	push	r29
    7f00:	6c 01       	movw	r12, r24
    7f02:	3a 01       	movw	r6, r20
    7f04:	86 2e       	mov	r8, r22
    7f06:	02 17       	cp	r16, r18
    7f08:	13 07       	cpc	r17, r19
    7f0a:	24 f4       	brge	.+8      	; 0x7f14 <_puts_pad_X+0x30>
    7f0c:	e9 01       	movw	r28, r18
    7f0e:	c0 1b       	sub	r28, r16
    7f10:	d1 0b       	sbc	r29, r17
    7f12:	02 c0       	rjmp	.+4      	; 0x7f18 <_puts_pad_X+0x34>
    7f14:	c0 e0       	ldi	r28, 0x00	; 0
    7f16:	d0 e0       	ldi	r29, 0x00	; 0
    7f18:	e1 14       	cp	r14, r1
    7f1a:	f1 04       	cpc	r15, r1
    7f1c:	49 f4       	brne	.+18     	; 0x7f30 <_puts_pad_X+0x4c>
    7f1e:	21 97       	sbiw	r28, 0x01	; 1
    7f20:	38 f0       	brcs	.+14     	; 0x7f30 <_puts_pad_X+0x4c>
    7f22:	d6 01       	movw	r26, r12
    7f24:	ed 91       	ld	r30, X+
    7f26:	fc 91       	ld	r31, X
    7f28:	60 e2       	ldi	r22, 0x20	; 32
    7f2a:	c6 01       	movw	r24, r12
    7f2c:	09 95       	icall
    7f2e:	f7 cf       	rjmp	.-18     	; 0x7f1e <_puts_pad_X+0x3a>
    7f30:	13 01       	movw	r2, r6
    7f32:	48 2c       	mov	r4, r8
    7f34:	20 0e       	add	r2, r16
    7f36:	31 1e       	adc	r3, r17
    7f38:	41 1c       	adc	r4, r1
    7f3a:	17 fd       	sbrc	r17, 7
    7f3c:	4a 94       	dec	r4
    7f3e:	f3 01       	movw	r30, r6
    7f40:	58 2d       	mov	r21, r8
    7f42:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    7f46:	66 23       	and	r22, r22
    7f48:	71 f0       	breq	.+28     	; 0x7f66 <_puts_pad_X+0x82>
    7f4a:	62 14       	cp	r6, r2
    7f4c:	73 04       	cpc	r7, r3
    7f4e:	84 04       	cpc	r8, r4
    7f50:	51 f0       	breq	.+20     	; 0x7f66 <_puts_pad_X+0x82>
    7f52:	d6 01       	movw	r26, r12
    7f54:	ed 91       	ld	r30, X+
    7f56:	fc 91       	ld	r31, X
    7f58:	c6 01       	movw	r24, r12
    7f5a:	09 95       	icall
    7f5c:	bf ef       	ldi	r27, 0xFF	; 255
    7f5e:	6b 1a       	sub	r6, r27
    7f60:	7b 0a       	sbc	r7, r27
    7f62:	8b 0a       	sbc	r8, r27
    7f64:	ec cf       	rjmp	.-40     	; 0x7f3e <_puts_pad_X+0x5a>
    7f66:	ef 28       	or	r14, r15
    7f68:	51 f0       	breq	.+20     	; 0x7f7e <_puts_pad_X+0x9a>
    7f6a:	20 97       	sbiw	r28, 0x00	; 0
    7f6c:	41 f0       	breq	.+16     	; 0x7f7e <_puts_pad_X+0x9a>
    7f6e:	d6 01       	movw	r26, r12
    7f70:	ed 91       	ld	r30, X+
    7f72:	fc 91       	ld	r31, X
    7f74:	60 e2       	ldi	r22, 0x20	; 32
    7f76:	c6 01       	movw	r24, r12
    7f78:	09 95       	icall
    7f7a:	21 97       	sbiw	r28, 0x01	; 1
    7f7c:	f6 cf       	rjmp	.-20     	; 0x7f6a <_puts_pad_X+0x86>
    7f7e:	df 91       	pop	r29
    7f80:	cf 91       	pop	r28
    7f82:	1f 91       	pop	r17
    7f84:	0f 91       	pop	r16
    7f86:	ff 90       	pop	r15
    7f88:	ef 90       	pop	r14
    7f8a:	df 90       	pop	r13
    7f8c:	cf 90       	pop	r12
    7f8e:	8f 90       	pop	r8
    7f90:	7f 90       	pop	r7
    7f92:	6f 90       	pop	r6
    7f94:	4f 90       	pop	r4
    7f96:	3f 90       	pop	r3
    7f98:	2f 90       	pop	r2
    7f9a:	08 95       	ret

00007f9c <strlen_X>:
    7f9c:	cf 92       	push	r12
    7f9e:	df 92       	push	r13
    7fa0:	ef 92       	push	r14
    7fa2:	9b 01       	movw	r18, r22
    7fa4:	48 2f       	mov	r20, r24
    7fa6:	80 e0       	ldi	r24, 0x00	; 0
    7fa8:	90 e0       	ldi	r25, 0x00	; 0
    7faa:	2f 5f       	subi	r18, 0xFF	; 255
    7fac:	3f 4f       	sbci	r19, 0xFF	; 255
    7fae:	4f 4f       	sbci	r20, 0xFF	; 255
    7fb0:	69 01       	movw	r12, r18
    7fb2:	e4 2e       	mov	r14, r20
    7fb4:	51 e0       	ldi	r21, 0x01	; 1
    7fb6:	c5 1a       	sub	r12, r21
    7fb8:	d1 08       	sbc	r13, r1
    7fba:	e1 08       	sbc	r14, r1
    7fbc:	f6 01       	movw	r30, r12
    7fbe:	5e 2d       	mov	r21, r14
    7fc0:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    7fc4:	66 23       	and	r22, r22
    7fc6:	11 f0       	breq	.+4      	; 0x7fcc <strlen_X+0x30>
    7fc8:	01 96       	adiw	r24, 0x01	; 1
    7fca:	ef cf       	rjmp	.-34     	; 0x7faa <strlen_X+0xe>
    7fcc:	ef 90       	pop	r14
    7fce:	df 90       	pop	r13
    7fd0:	cf 90       	pop	r12
    7fd2:	08 95       	ret

00007fd4 <_printf_fn>:
    7fd4:	ae e6       	ldi	r26, 0x6E	; 110
    7fd6:	b0 e0       	ldi	r27, 0x00	; 0
    7fd8:	e0 ef       	ldi	r30, 0xF0	; 240
    7fda:	ff e3       	ldi	r31, 0x3F	; 63
    7fdc:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    7fe0:	a5 96       	adiw	r28, 0x25	; 37
    7fe2:	9f af       	std	Y+63, r25	; 0x3f
    7fe4:	8e af       	std	Y+62, r24	; 0x3e
    7fe6:	a5 97       	sbiw	r28, 0x25	; 37
    7fe8:	6a 01       	movw	r12, r20
    7fea:	e6 2e       	mov	r14, r22
    7fec:	19 01       	movw	r2, r18
    7fee:	a9 96       	adiw	r28, 0x29	; 41
    7ff0:	1c ae       	std	Y+60, r1	; 0x3c
    7ff2:	1d ae       	std	Y+61, r1	; 0x3d
    7ff4:	1e ae       	std	Y+62, r1	; 0x3e
    7ff6:	1f ae       	std	Y+63, r1	; 0x3f
    7ff8:	a9 97       	sbiw	r28, 0x29	; 41
    7ffa:	8a e1       	ldi	r24, 0x1A	; 26
    7ffc:	94 e0       	ldi	r25, 0x04	; 4
    7ffe:	9c 01       	movw	r18, r24
    8000:	40 e8       	ldi	r20, 0x80	; 128
    8002:	ae 96       	adiw	r28, 0x2e	; 46
    8004:	2d af       	std	Y+61, r18	; 0x3d
    8006:	3e af       	std	Y+62, r19	; 0x3e
    8008:	4f af       	std	Y+63, r20	; 0x3f
    800a:	ae 97       	sbiw	r28, 0x2e	; 46
    800c:	ae 01       	movw	r20, r28
    800e:	4f 5a       	subi	r20, 0xAF	; 175
    8010:	5f 4f       	sbci	r21, 0xFF	; 255
    8012:	67 96       	adiw	r28, 0x17	; 23
    8014:	5f af       	std	Y+63, r21	; 0x3f
    8016:	4e af       	std	Y+62, r20	; 0x3e
    8018:	67 97       	sbiw	r28, 0x17	; 23
    801a:	ce 01       	movw	r24, r28
    801c:	8d 5b       	subi	r24, 0xBD	; 189
    801e:	9f 4f       	sbci	r25, 0xFF	; 255
    8020:	69 96       	adiw	r28, 0x19	; 25
    8022:	9f af       	std	Y+63, r25	; 0x3f
    8024:	8e af       	std	Y+62, r24	; 0x3e
    8026:	69 97       	sbiw	r28, 0x19	; 25
    8028:	de 01       	movw	r26, r28
    802a:	a5 5b       	subi	r26, 0xB5	; 181
    802c:	bf 4f       	sbci	r27, 0xFF	; 255
    802e:	6b 96       	adiw	r28, 0x1b	; 27
    8030:	bf af       	std	Y+63, r27	; 0x3f
    8032:	ae af       	std	Y+62, r26	; 0x3e
    8034:	6b 97       	sbiw	r28, 0x1b	; 27
    8036:	fe 01       	movw	r30, r28
    8038:	ed 5a       	subi	r30, 0xAD	; 173
    803a:	ff 4f       	sbci	r31, 0xFF	; 255
    803c:	6d 96       	adiw	r28, 0x1d	; 29
    803e:	ff af       	std	Y+63, r31	; 0x3f
    8040:	ee af       	std	Y+62, r30	; 0x3e
    8042:	6d 97       	sbiw	r28, 0x1d	; 29
    8044:	f6 01       	movw	r30, r12
    8046:	5e 2d       	mov	r21, r14
    8048:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    804c:	66 23       	and	r22, r22
    804e:	09 f4       	brne	.+2      	; 0x8052 <_printf_fn+0x7e>
    8050:	13 c4       	rjmp	.+2086   	; 0x8878 <_printf_fn+0x8a4>
    8052:	ae 2d       	mov	r26, r14
    8054:	c6 01       	movw	r24, r12
    8056:	01 96       	adiw	r24, 0x01	; 1
    8058:	a1 1d       	adc	r26, r1
    805a:	3c 01       	movw	r6, r24
    805c:	8a 2e       	mov	r8, r26
    805e:	65 32       	cpi	r22, 0x25	; 37
    8060:	51 f0       	breq	.+20     	; 0x8076 <_printf_fn+0xa2>
    8062:	a5 96       	adiw	r28, 0x25	; 37
    8064:	ae ad       	ldd	r26, Y+62	; 0x3e
    8066:	bf ad       	ldd	r27, Y+63	; 0x3f
    8068:	a5 97       	sbiw	r28, 0x25	; 37
    806a:	ed 91       	ld	r30, X+
    806c:	fc 91       	ld	r31, X
    806e:	11 97       	sbiw	r26, 0x01	; 1
    8070:	cd 01       	movw	r24, r26
    8072:	09 95       	icall
    8074:	d5 c3       	rjmp	.+1962   	; 0x8820 <_printf_fn+0x84c>
    8076:	91 2c       	mov	r9, r1
    8078:	f3 01       	movw	r30, r6
    807a:	58 2d       	mov	r21, r8
    807c:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    8080:	63 32       	cpi	r22, 0x23	; 35
    8082:	19 f4       	brne	.+6      	; 0x808a <_printf_fn+0xb6>
    8084:	68 94       	set
    8086:	97 f8       	bld	r9, 7
    8088:	04 c0       	rjmp	.+8      	; 0x8092 <_printf_fn+0xbe>
    808a:	6b 32       	cpi	r22, 0x2B	; 43
    808c:	39 f4       	brne	.+14     	; 0x809c <_printf_fn+0xc8>
    808e:	68 94       	set
    8090:	92 f8       	bld	r9, 2
    8092:	bf ef       	ldi	r27, 0xFF	; 255
    8094:	6b 1a       	sub	r6, r27
    8096:	7b 0a       	sbc	r7, r27
    8098:	8b 0a       	sbc	r8, r27
    809a:	ee cf       	rjmp	.-36     	; 0x8078 <_printf_fn+0xa4>
    809c:	6d 32       	cpi	r22, 0x2D	; 45
    809e:	a9 f4       	brne	.+42     	; 0x80ca <_printf_fn+0xf6>
    80a0:	93 fc       	sbrc	r9, 3
    80a2:	05 c0       	rjmp	.+10     	; 0x80ae <_printf_fn+0xda>
    80a4:	6d 32       	cpi	r22, 0x2D	; 45
    80a6:	19 f4       	brne	.+6      	; 0x80ae <_printf_fn+0xda>
    80a8:	68 94       	set
    80aa:	93 f8       	bld	r9, 3
    80ac:	f2 cf       	rjmp	.-28     	; 0x8092 <_printf_fn+0xbe>
    80ae:	94 fc       	sbrc	r9, 4
    80b0:	05 c0       	rjmp	.+10     	; 0x80bc <_printf_fn+0xe8>
    80b2:	60 32       	cpi	r22, 0x20	; 32
    80b4:	19 f4       	brne	.+6      	; 0x80bc <_printf_fn+0xe8>
    80b6:	68 94       	set
    80b8:	94 f8       	bld	r9, 4
    80ba:	eb cf       	rjmp	.-42     	; 0x8092 <_printf_fn+0xbe>
    80bc:	95 fc       	sbrc	r9, 5
    80be:	e9 cf       	rjmp	.-46     	; 0x8092 <_printf_fn+0xbe>
    80c0:	60 33       	cpi	r22, 0x30	; 48
    80c2:	39 f7       	brne	.-50     	; 0x8092 <_printf_fn+0xbe>
    80c4:	68 94       	set
    80c6:	95 f8       	bld	r9, 5
    80c8:	e4 cf       	rjmp	.-56     	; 0x8092 <_printf_fn+0xbe>
    80ca:	86 2f       	mov	r24, r22
    80cc:	8f 7e       	andi	r24, 0xEF	; 239
    80ce:	80 32       	cpi	r24, 0x20	; 32
    80d0:	39 f3       	breq	.-50     	; 0x80a0 <_printf_fn+0xcc>
    80d2:	70 e0       	ldi	r23, 0x00	; 0
    80d4:	60 53       	subi	r22, 0x30	; 48
    80d6:	71 09       	sbc	r23, r1
    80d8:	6f 96       	adiw	r28, 0x1f	; 31
    80da:	1f ae       	std	Y+63, r1	; 0x3f
    80dc:	1e ae       	std	Y+62, r1	; 0x3e
    80de:	6f 97       	sbiw	r28, 0x1f	; 31
    80e0:	6a 30       	cpi	r22, 0x0A	; 10
    80e2:	71 05       	cpc	r23, r1
    80e4:	10 f5       	brcc	.+68     	; 0x812a <_printf_fn+0x156>
    80e6:	2a e0       	ldi	r18, 0x0A	; 10
    80e8:	f3 01       	movw	r30, r6
    80ea:	58 2d       	mov	r21, r8
    80ec:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    80f0:	70 e0       	ldi	r23, 0x00	; 0
    80f2:	cb 01       	movw	r24, r22
    80f4:	c0 97       	sbiw	r24, 0x30	; 48
    80f6:	0a 97       	sbiw	r24, 0x0a	; 10
    80f8:	b0 f4       	brcc	.+44     	; 0x8126 <_printf_fn+0x152>
    80fa:	ef ef       	ldi	r30, 0xFF	; 255
    80fc:	6e 1a       	sub	r6, r30
    80fe:	7e 0a       	sbc	r7, r30
    8100:	8e 0a       	sbc	r8, r30
    8102:	6f 96       	adiw	r28, 0x1f	; 31
    8104:	4e ad       	ldd	r20, Y+62	; 0x3e
    8106:	5f ad       	ldd	r21, Y+63	; 0x3f
    8108:	6f 97       	sbiw	r28, 0x1f	; 31
    810a:	24 9f       	mul	r18, r20
    810c:	c0 01       	movw	r24, r0
    810e:	25 9f       	mul	r18, r21
    8110:	90 0d       	add	r25, r0
    8112:	11 24       	eor	r1, r1
    8114:	68 0f       	add	r22, r24
    8116:	79 1f       	adc	r23, r25
    8118:	cb 01       	movw	r24, r22
    811a:	c0 97       	sbiw	r24, 0x30	; 48
    811c:	6f 96       	adiw	r28, 0x1f	; 31
    811e:	9f af       	std	Y+63, r25	; 0x3f
    8120:	8e af       	std	Y+62, r24	; 0x3e
    8122:	6f 97       	sbiw	r28, 0x1f	; 31
    8124:	e1 cf       	rjmp	.-62     	; 0x80e8 <_printf_fn+0x114>
    8126:	68 94       	set
    8128:	90 f8       	bld	r9, 0
    812a:	f3 01       	movw	r30, r6
    812c:	58 2d       	mov	r21, r8
    812e:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    8132:	6e 32       	cpi	r22, 0x2E	; 46
    8134:	61 f5       	brne	.+88     	; 0x818e <_printf_fn+0x1ba>
    8136:	9f ef       	ldi	r25, 0xFF	; 255
    8138:	69 1a       	sub	r6, r25
    813a:	79 0a       	sbc	r7, r25
    813c:	89 0a       	sbc	r8, r25
    813e:	a1 96       	adiw	r28, 0x21	; 33
    8140:	1f ae       	std	Y+63, r1	; 0x3f
    8142:	1e ae       	std	Y+62, r1	; 0x3e
    8144:	a1 97       	sbiw	r28, 0x21	; 33
    8146:	2a e0       	ldi	r18, 0x0A	; 10
    8148:	f3 01       	movw	r30, r6
    814a:	58 2d       	mov	r21, r8
    814c:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    8150:	70 e0       	ldi	r23, 0x00	; 0
    8152:	cb 01       	movw	r24, r22
    8154:	c0 97       	sbiw	r24, 0x30	; 48
    8156:	0a 97       	sbiw	r24, 0x0a	; 10
    8158:	b8 f4       	brcc	.+46     	; 0x8188 <_printf_fn+0x1b4>
    815a:	af ef       	ldi	r26, 0xFF	; 255
    815c:	6a 1a       	sub	r6, r26
    815e:	7a 0a       	sbc	r7, r26
    8160:	8a 0a       	sbc	r8, r26
    8162:	a1 96       	adiw	r28, 0x21	; 33
    8164:	ee ad       	ldd	r30, Y+62	; 0x3e
    8166:	ff ad       	ldd	r31, Y+63	; 0x3f
    8168:	a1 97       	sbiw	r28, 0x21	; 33
    816a:	2e 9f       	mul	r18, r30
    816c:	c0 01       	movw	r24, r0
    816e:	2f 9f       	mul	r18, r31
    8170:	90 0d       	add	r25, r0
    8172:	11 24       	eor	r1, r1
    8174:	68 0f       	add	r22, r24
    8176:	79 1f       	adc	r23, r25
    8178:	ab 01       	movw	r20, r22
    817a:	40 53       	subi	r20, 0x30	; 48
    817c:	51 09       	sbc	r21, r1
    817e:	a1 96       	adiw	r28, 0x21	; 33
    8180:	5f af       	std	Y+63, r21	; 0x3f
    8182:	4e af       	std	Y+62, r20	; 0x3e
    8184:	a1 97       	sbiw	r28, 0x21	; 33
    8186:	e0 cf       	rjmp	.-64     	; 0x8148 <_printf_fn+0x174>
    8188:	68 94       	set
    818a:	91 f8       	bld	r9, 1
    818c:	04 c0       	rjmp	.+8      	; 0x8196 <_printf_fn+0x1c2>
    818e:	a1 96       	adiw	r28, 0x21	; 33
    8190:	1f ae       	std	Y+63, r1	; 0x3f
    8192:	1e ae       	std	Y+62, r1	; 0x3e
    8194:	a1 97       	sbiw	r28, 0x21	; 33
    8196:	f3 01       	movw	r30, r6
    8198:	58 2d       	mov	r21, r8
    819a:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    819e:	69 34       	cpi	r22, 0x49	; 73
    81a0:	91 f5       	brne	.+100    	; 0x8206 <_printf_fn+0x232>
    81a2:	5f ef       	ldi	r21, 0xFF	; 255
    81a4:	65 1a       	sub	r6, r21
    81a6:	75 0a       	sbc	r7, r21
    81a8:	85 0a       	sbc	r8, r21
    81aa:	41 2c       	mov	r4, r1
    81ac:	51 2c       	mov	r5, r1
    81ae:	2a e0       	ldi	r18, 0x0A	; 10
    81b0:	f3 01       	movw	r30, r6
    81b2:	58 2d       	mov	r21, r8
    81b4:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    81b8:	70 e0       	ldi	r23, 0x00	; 0
    81ba:	cb 01       	movw	r24, r22
    81bc:	c0 97       	sbiw	r24, 0x30	; 48
    81be:	0a 97       	sbiw	r24, 0x0a	; 10
    81c0:	80 f4       	brcc	.+32     	; 0x81e2 <_printf_fn+0x20e>
    81c2:	8f ef       	ldi	r24, 0xFF	; 255
    81c4:	68 1a       	sub	r6, r24
    81c6:	78 0a       	sbc	r7, r24
    81c8:	88 0a       	sbc	r8, r24
    81ca:	24 9d       	mul	r18, r4
    81cc:	c0 01       	movw	r24, r0
    81ce:	25 9d       	mul	r18, r5
    81d0:	90 0d       	add	r25, r0
    81d2:	11 24       	eor	r1, r1
    81d4:	68 0f       	add	r22, r24
    81d6:	79 1f       	adc	r23, r25
    81d8:	2b 01       	movw	r4, r22
    81da:	90 e3       	ldi	r25, 0x30	; 48
    81dc:	49 1a       	sub	r4, r25
    81de:	51 08       	sbc	r5, r1
    81e0:	e7 cf       	rjmp	.-50     	; 0x81b0 <_printf_fn+0x1dc>
    81e2:	41 14       	cp	r4, r1
    81e4:	51 04       	cpc	r5, r1
    81e6:	09 f4       	brne	.+2      	; 0x81ea <_printf_fn+0x216>
    81e8:	40 c0       	rjmp	.+128    	; 0x826a <_printf_fn+0x296>
    81ea:	c2 01       	movw	r24, r4
    81ec:	87 70       	andi	r24, 0x07	; 7
    81ee:	99 27       	eor	r25, r25
    81f0:	89 2b       	or	r24, r25
    81f2:	c9 f5       	brne	.+114    	; 0x8266 <_printf_fn+0x292>
    81f4:	63 e0       	ldi	r22, 0x03	; 3
    81f6:	55 94       	asr	r5
    81f8:	47 94       	ror	r4
    81fa:	6a 95       	dec	r22
    81fc:	e1 f7       	brne	.-8      	; 0x81f6 <_printf_fn+0x222>
    81fe:	41 14       	cp	r4, r1
    8200:	51 04       	cpc	r5, r1
    8202:	99 f1       	breq	.+102    	; 0x826a <_printf_fn+0x296>
    8204:	21 c0       	rjmp	.+66     	; 0x8248 <_printf_fn+0x274>
    8206:	68 36       	cpi	r22, 0x68	; 104
    8208:	29 f4       	brne	.+10     	; 0x8214 <_printf_fn+0x240>
    820a:	af ef       	ldi	r26, 0xFF	; 255
    820c:	6a 1a       	sub	r6, r26
    820e:	7a 0a       	sbc	r7, r26
    8210:	8a 0a       	sbc	r8, r26
    8212:	09 c3       	rjmp	.+1554   	; 0x8826 <_printf_fn+0x852>
    8214:	6c 36       	cpi	r22, 0x6C	; 108
    8216:	09 f0       	breq	.+2      	; 0x821a <_printf_fn+0x246>
    8218:	06 c3       	rjmp	.+1548   	; 0x8826 <_printf_fn+0x852>
    821a:	a8 2d       	mov	r26, r8
    821c:	c3 01       	movw	r24, r6
    821e:	01 96       	adiw	r24, 0x01	; 1
    8220:	a1 1d       	adc	r26, r1
    8222:	fc 01       	movw	r30, r24
    8224:	5a 2f       	mov	r21, r26
    8226:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    822a:	6c 36       	cpi	r22, 0x6C	; 108
    822c:	31 f0       	breq	.+12     	; 0x823a <_printf_fn+0x266>
    822e:	3c 01       	movw	r6, r24
    8230:	8a 2e       	mov	r8, r26
    8232:	54 e0       	ldi	r21, 0x04	; 4
    8234:	45 2e       	mov	r4, r21
    8236:	51 2c       	mov	r5, r1
    8238:	07 c0       	rjmp	.+14     	; 0x8248 <_printf_fn+0x274>
    823a:	b2 e0       	ldi	r27, 0x02	; 2
    823c:	6b 0e       	add	r6, r27
    823e:	71 1c       	adc	r7, r1
    8240:	81 1c       	adc	r8, r1
    8242:	48 e0       	ldi	r20, 0x08	; 8
    8244:	44 2e       	mov	r4, r20
    8246:	51 2c       	mov	r5, r1
    8248:	f3 01       	movw	r30, r6
    824a:	58 2d       	mov	r21, r8
    824c:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    8250:	e6 2f       	mov	r30, r22
    8252:	f0 e0       	ldi	r31, 0x00	; 0
    8254:	a3 96       	adiw	r28, 0x23	; 35
    8256:	ff af       	std	Y+63, r31	; 0x3f
    8258:	ee af       	std	Y+62, r30	; 0x3e
    825a:	a3 97       	sbiw	r28, 0x23	; 35
    825c:	e4 36       	cpi	r30, 0x64	; 100
    825e:	f1 05       	cpc	r31, r1
    8260:	09 f4       	brne	.+2      	; 0x8264 <_printf_fn+0x290>
    8262:	e5 c2       	rjmp	.+1482   	; 0x882e <_printf_fn+0x85a>
    8264:	06 c0       	rjmp	.+12     	; 0x8272 <_printf_fn+0x29e>
    8266:	41 2c       	mov	r4, r1
    8268:	51 2c       	mov	r5, r1
    826a:	a3 96       	adiw	r28, 0x23	; 35
    826c:	1f ae       	std	Y+63, r1	; 0x3f
    826e:	1e ae       	std	Y+62, r1	; 0x3e
    8270:	a3 97       	sbiw	r28, 0x23	; 35
    8272:	31 e0       	ldi	r19, 0x01	; 1
    8274:	20 e0       	ldi	r18, 0x00	; 0
    8276:	a3 96       	adiw	r28, 0x23	; 35
    8278:	4e ad       	ldd	r20, Y+62	; 0x3e
    827a:	5f ad       	ldd	r21, Y+63	; 0x3f
    827c:	a3 97       	sbiw	r28, 0x23	; 35
    827e:	44 34       	cpi	r20, 0x44	; 68
    8280:	51 05       	cpc	r21, r1
    8282:	09 f0       	breq	.+2      	; 0x8286 <_printf_fn+0x2b2>
    8284:	30 e0       	ldi	r19, 0x00	; 0
    8286:	83 2f       	mov	r24, r19
    8288:	92 2f       	mov	r25, r18
    828a:	a3 96       	adiw	r28, 0x23	; 35
    828c:	ee ad       	ldd	r30, Y+62	; 0x3e
    828e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8290:	a3 97       	sbiw	r28, 0x23	; 35
    8292:	e2 54       	subi	r30, 0x42	; 66
    8294:	f1 09       	sbc	r31, r1
    8296:	e7 33       	cpi	r30, 0x37	; 55
    8298:	f1 05       	cpc	r31, r1
    829a:	08 f0       	brcs	.+2      	; 0x829e <_printf_fn+0x2ca>
    829c:	57 c1       	rjmp	.+686    	; 0x854c <_printf_fn+0x578>
    829e:	ea 5b       	subi	r30, 0xBA	; 186
    82a0:	ff 4f       	sbci	r31, 0xFF	; 255
    82a2:	0c 94 54 e1 	jmp	0x1c2a8	; 0x1c2a8 <__tablejump2__>
    82a6:	32 e0       	ldi	r19, 0x02	; 2
    82a8:	43 2e       	mov	r4, r19
    82aa:	51 2c       	mov	r5, r1
    82ac:	29 2d       	mov	r18, r9
    82ae:	28 72       	andi	r18, 0x28	; 40
    82b0:	28 32       	cpi	r18, 0x28	; 40
    82b2:	11 f4       	brne	.+4      	; 0x82b8 <_printf_fn+0x2e4>
    82b4:	e8 94       	clt
    82b6:	95 f8       	bld	r9, 5
    82b8:	29 2d       	mov	r18, r9
    82ba:	22 72       	andi	r18, 0x22	; 34
    82bc:	22 32       	cpi	r18, 0x22	; 34
    82be:	11 f4       	brne	.+4      	; 0x82c4 <_printf_fn+0x2f0>
    82c0:	e8 94       	clt
    82c2:	95 f8       	bld	r9, 5
    82c4:	29 2d       	mov	r18, r9
    82c6:	21 72       	andi	r18, 0x21	; 33
    82c8:	21 32       	cpi	r18, 0x21	; 33
    82ca:	79 f4       	brne	.+30     	; 0x82ea <_printf_fn+0x316>
    82cc:	a1 96       	adiw	r28, 0x21	; 33
    82ce:	ae ad       	ldd	r26, Y+62	; 0x3e
    82d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    82d2:	a1 97       	sbiw	r28, 0x21	; 33
    82d4:	6f 96       	adiw	r28, 0x1f	; 31
    82d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    82d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    82da:	6f 97       	sbiw	r28, 0x1f	; 31
    82dc:	ae 17       	cp	r26, r30
    82de:	bf 07       	cpc	r27, r31
    82e0:	24 f4       	brge	.+8      	; 0x82ea <_printf_fn+0x316>
    82e2:	a1 96       	adiw	r28, 0x21	; 33
    82e4:	ff af       	std	Y+63, r31	; 0x3f
    82e6:	ee af       	std	Y+62, r30	; 0x3e
    82e8:	a1 97       	sbiw	r28, 0x21	; 33
    82ea:	29 2d       	mov	r18, r9
    82ec:	23 72       	andi	r18, 0x23	; 35
    82ee:	23 32       	cpi	r18, 0x23	; 35
    82f0:	79 f4       	brne	.+30     	; 0x8310 <_printf_fn+0x33c>
    82f2:	a1 96       	adiw	r28, 0x21	; 33
    82f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    82f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    82f8:	a1 97       	sbiw	r28, 0x21	; 33
    82fa:	6f 96       	adiw	r28, 0x1f	; 31
    82fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    82fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    8300:	6f 97       	sbiw	r28, 0x1f	; 31
    8302:	24 17       	cp	r18, r20
    8304:	35 07       	cpc	r19, r21
    8306:	24 f4       	brge	.+8      	; 0x8310 <_printf_fn+0x33c>
    8308:	a1 96       	adiw	r28, 0x21	; 33
    830a:	5f af       	std	Y+63, r21	; 0x3f
    830c:	4e af       	std	Y+62, r20	; 0x3e
    830e:	a1 97       	sbiw	r28, 0x21	; 33
    8310:	e8 94       	clt
    8312:	94 f8       	bld	r9, 4
    8314:	e8 94       	clt
    8316:	92 f8       	bld	r9, 2
    8318:	e8 94       	clt
    831a:	96 f8       	bld	r9, 6
    831c:	52 e0       	ldi	r21, 0x02	; 2
    831e:	45 16       	cp	r4, r21
    8320:	51 04       	cpc	r5, r1
    8322:	f9 f4       	brne	.+62     	; 0x8362 <_printf_fn+0x38e>
    8324:	51 01       	movw	r10, r2
    8326:	82 e0       	ldi	r24, 0x02	; 2
    8328:	a8 0e       	add	r10, r24
    832a:	b1 1c       	adc	r11, r1
    832c:	d1 01       	movw	r26, r2
    832e:	8d 91       	ld	r24, X+
    8330:	9c 91       	ld	r25, X
    8332:	65 96       	adiw	r28, 0x15	; 21
    8334:	9f af       	std	Y+63, r25	; 0x3f
    8336:	8e af       	std	Y+62, r24	; 0x3e
    8338:	65 97       	sbiw	r28, 0x15	; 21
    833a:	a3 96       	adiw	r28, 0x23	; 35
    833c:	ee ad       	ldd	r30, Y+62	; 0x3e
    833e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8340:	a3 97       	sbiw	r28, 0x23	; 35
    8342:	e4 34       	cpi	r30, 0x44	; 68
    8344:	f1 05       	cpc	r31, r1
    8346:	09 f0       	breq	.+2      	; 0x834a <_printf_fn+0x376>
    8348:	ac c0       	rjmp	.+344    	; 0x84a2 <_printf_fn+0x4ce>
    834a:	97 ff       	sbrs	r25, 7
    834c:	a7 c0       	rjmp	.+334    	; 0x849c <_printf_fn+0x4c8>
    834e:	68 94       	set
    8350:	96 f8       	bld	r9, 6
    8352:	91 95       	neg	r25
    8354:	81 95       	neg	r24
    8356:	91 09       	sbc	r25, r1
    8358:	65 96       	adiw	r28, 0x15	; 21
    835a:	9f af       	std	Y+63, r25	; 0x3f
    835c:	8e af       	std	Y+62, r24	; 0x3e
    835e:	65 97       	sbiw	r28, 0x15	; 21
    8360:	9d c0       	rjmp	.+314    	; 0x849c <_printf_fn+0x4c8>
    8362:	f4 e0       	ldi	r31, 0x04	; 4
    8364:	4f 16       	cp	r4, r31
    8366:	51 04       	cpc	r5, r1
    8368:	59 f5       	brne	.+86     	; 0x83c0 <_printf_fn+0x3ec>
    836a:	51 01       	movw	r10, r2
    836c:	24 e0       	ldi	r18, 0x04	; 4
    836e:	a2 0e       	add	r10, r18
    8370:	b1 1c       	adc	r11, r1
    8372:	f1 01       	movw	r30, r2
    8374:	80 81       	ld	r24, Z
    8376:	91 81       	ldd	r25, Z+1	; 0x01
    8378:	a2 81       	ldd	r26, Z+2	; 0x02
    837a:	b3 81       	ldd	r27, Z+3	; 0x03
    837c:	2f 96       	adiw	r28, 0x0f	; 15
    837e:	8c af       	std	Y+60, r24	; 0x3c
    8380:	9d af       	std	Y+61, r25	; 0x3d
    8382:	ae af       	std	Y+62, r26	; 0x3e
    8384:	bf af       	std	Y+63, r27	; 0x3f
    8386:	2f 97       	sbiw	r28, 0x0f	; 15
    8388:	a3 96       	adiw	r28, 0x23	; 35
    838a:	2e ad       	ldd	r18, Y+62	; 0x3e
    838c:	3f ad       	ldd	r19, Y+63	; 0x3f
    838e:	a3 97       	sbiw	r28, 0x23	; 35
    8390:	24 34       	cpi	r18, 0x44	; 68
    8392:	31 05       	cpc	r19, r1
    8394:	09 f0       	breq	.+2      	; 0x8398 <_printf_fn+0x3c4>
    8396:	8f c0       	rjmp	.+286    	; 0x84b6 <_printf_fn+0x4e2>
    8398:	b7 ff       	sbrs	r27, 7
    839a:	8a c0       	rjmp	.+276    	; 0x84b0 <_printf_fn+0x4dc>
    839c:	68 94       	set
    839e:	96 f8       	bld	r9, 6
    83a0:	b0 95       	com	r27
    83a2:	a0 95       	com	r26
    83a4:	90 95       	com	r25
    83a6:	81 95       	neg	r24
    83a8:	9f 4f       	sbci	r25, 0xFF	; 255
    83aa:	af 4f       	sbci	r26, 0xFF	; 255
    83ac:	bf 4f       	sbci	r27, 0xFF	; 255
    83ae:	2f 96       	adiw	r28, 0x0f	; 15
    83b0:	8c af       	std	Y+60, r24	; 0x3c
    83b2:	9d af       	std	Y+61, r25	; 0x3d
    83b4:	ae af       	std	Y+62, r26	; 0x3e
    83b6:	bf af       	std	Y+63, r27	; 0x3f
    83b8:	2f 97       	sbiw	r28, 0x0f	; 15
    83ba:	7a c0       	rjmp	.+244    	; 0x84b0 <_printf_fn+0x4dc>
    83bc:	81 e0       	ldi	r24, 0x01	; 1
    83be:	90 e0       	ldi	r25, 0x00	; 0
    83c0:	51 01       	movw	r10, r2
    83c2:	38 e0       	ldi	r19, 0x08	; 8
    83c4:	43 16       	cp	r4, r19
    83c6:	51 04       	cpc	r5, r1
    83c8:	09 f0       	breq	.+2      	; 0x83cc <_printf_fn+0x3f8>
    83ca:	7c c0       	rjmp	.+248    	; 0x84c4 <_printf_fn+0x4f0>
    83cc:	48 e0       	ldi	r20, 0x08	; 8
    83ce:	a4 0e       	add	r10, r20
    83d0:	b1 1c       	adc	r11, r1
    83d2:	d1 01       	movw	r26, r2
    83d4:	fc 90       	ld	r15, X
    83d6:	f1 01       	movw	r30, r2
    83d8:	01 81       	ldd	r16, Z+1	; 0x01
    83da:	12 81       	ldd	r17, Z+2	; 0x02
    83dc:	f3 81       	ldd	r31, Z+3	; 0x03
    83de:	aa 96       	adiw	r28, 0x2a	; 42
    83e0:	ff af       	std	Y+63, r31	; 0x3f
    83e2:	aa 97       	sbiw	r28, 0x2a	; 42
    83e4:	f1 01       	movw	r30, r2
    83e6:	f4 81       	ldd	r31, Z+4	; 0x04
    83e8:	ab 96       	adiw	r28, 0x2b	; 43
    83ea:	ff af       	std	Y+63, r31	; 0x3f
    83ec:	ab 97       	sbiw	r28, 0x2b	; 43
    83ee:	f1 01       	movw	r30, r2
    83f0:	b5 81       	ldd	r27, Z+5	; 0x05
    83f2:	f6 81       	ldd	r31, Z+6	; 0x06
    83f4:	af 96       	adiw	r28, 0x2f	; 47
    83f6:	ff af       	std	Y+63, r31	; 0x3f
    83f8:	af 97       	sbiw	r28, 0x2f	; 47
    83fa:	f1 01       	movw	r30, r2
    83fc:	37 80       	ldd	r3, Z+7	; 0x07
    83fe:	24 96       	adiw	r28, 0x04	; 4
    8400:	ff ae       	std	Y+63, r15	; 0x3f
    8402:	24 97       	sbiw	r28, 0x04	; 4
    8404:	25 96       	adiw	r28, 0x05	; 5
    8406:	0f af       	std	Y+63, r16	; 0x3f
    8408:	25 97       	sbiw	r28, 0x05	; 5
    840a:	26 96       	adiw	r28, 0x06	; 6
    840c:	1f af       	std	Y+63, r17	; 0x3f
    840e:	26 97       	sbiw	r28, 0x06	; 6
    8410:	aa 96       	adiw	r28, 0x2a	; 42
    8412:	ff ad       	ldd	r31, Y+63	; 0x3f
    8414:	aa 97       	sbiw	r28, 0x2a	; 42
    8416:	27 96       	adiw	r28, 0x07	; 7
    8418:	ff af       	std	Y+63, r31	; 0x3f
    841a:	27 97       	sbiw	r28, 0x07	; 7
    841c:	ab 96       	adiw	r28, 0x2b	; 43
    841e:	ef ad       	ldd	r30, Y+63	; 0x3f
    8420:	ab 97       	sbiw	r28, 0x2b	; 43
    8422:	28 96       	adiw	r28, 0x08	; 8
    8424:	ef af       	std	Y+63, r30	; 0x3f
    8426:	28 97       	sbiw	r28, 0x08	; 8
    8428:	29 96       	adiw	r28, 0x09	; 9
    842a:	bf af       	std	Y+63, r27	; 0x3f
    842c:	29 97       	sbiw	r28, 0x09	; 9
    842e:	af 96       	adiw	r28, 0x2f	; 47
    8430:	ff ad       	ldd	r31, Y+63	; 0x3f
    8432:	af 97       	sbiw	r28, 0x2f	; 47
    8434:	2a 96       	adiw	r28, 0x0a	; 10
    8436:	ff af       	std	Y+63, r31	; 0x3f
    8438:	2a 97       	sbiw	r28, 0x0a	; 10
    843a:	2b 96       	adiw	r28, 0x0b	; 11
    843c:	3f ae       	std	Y+63, r3	; 0x3f
    843e:	2b 97       	sbiw	r28, 0x0b	; 11
    8440:	89 2b       	or	r24, r25
    8442:	09 f4       	brne	.+2      	; 0x8446 <_printf_fn+0x472>
    8444:	4a c0       	rjmp	.+148    	; 0x84da <_printf_fn+0x506>
    8446:	2f 2d       	mov	r18, r15
    8448:	30 2f       	mov	r19, r16
    844a:	41 2f       	mov	r20, r17
    844c:	aa 96       	adiw	r28, 0x2a	; 42
    844e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8450:	aa 97       	sbiw	r28, 0x2a	; 42
    8452:	6e 2f       	mov	r22, r30
    8454:	7b 2f       	mov	r23, r27
    8456:	8f 2f       	mov	r24, r31
    8458:	93 2d       	mov	r25, r3
    845a:	a0 e0       	ldi	r26, 0x00	; 0
    845c:	0e 94 c1 e1 	call	0x1c382	; 0x1c382 <__cmpdi2_s8>
    8460:	e4 f5       	brge	.+120    	; 0x84da <_printf_fn+0x506>
    8462:	68 94       	set
    8464:	96 f8       	bld	r9, 6
    8466:	0e 94 73 e1 	call	0x1c2e6	; 0x1c2e6 <__negdi2>
    846a:	24 96       	adiw	r28, 0x04	; 4
    846c:	2f af       	std	Y+63, r18	; 0x3f
    846e:	24 97       	sbiw	r28, 0x04	; 4
    8470:	25 96       	adiw	r28, 0x05	; 5
    8472:	3f af       	std	Y+63, r19	; 0x3f
    8474:	25 97       	sbiw	r28, 0x05	; 5
    8476:	26 96       	adiw	r28, 0x06	; 6
    8478:	4f af       	std	Y+63, r20	; 0x3f
    847a:	26 97       	sbiw	r28, 0x06	; 6
    847c:	27 96       	adiw	r28, 0x07	; 7
    847e:	5f af       	std	Y+63, r21	; 0x3f
    8480:	27 97       	sbiw	r28, 0x07	; 7
    8482:	28 96       	adiw	r28, 0x08	; 8
    8484:	6f af       	std	Y+63, r22	; 0x3f
    8486:	28 97       	sbiw	r28, 0x08	; 8
    8488:	29 96       	adiw	r28, 0x09	; 9
    848a:	7f af       	std	Y+63, r23	; 0x3f
    848c:	29 97       	sbiw	r28, 0x09	; 9
    848e:	2a 96       	adiw	r28, 0x0a	; 10
    8490:	8f af       	std	Y+63, r24	; 0x3f
    8492:	2a 97       	sbiw	r28, 0x0a	; 10
    8494:	2b 96       	adiw	r28, 0x0b	; 11
    8496:	9f af       	std	Y+63, r25	; 0x3f
    8498:	2b 97       	sbiw	r28, 0x0b	; 11
    849a:	1f c0       	rjmp	.+62     	; 0x84da <_printf_fn+0x506>
    849c:	22 e0       	ldi	r18, 0x02	; 2
    849e:	42 2e       	mov	r4, r18
    84a0:	51 2c       	mov	r5, r1
    84a2:	6c 96       	adiw	r28, 0x1c	; 28
    84a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    84a6:	6c 97       	sbiw	r28, 0x1c	; 28
    84a8:	6d 96       	adiw	r28, 0x1d	; 29
    84aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    84ac:	6d 97       	sbiw	r28, 0x1d	; 29
    84ae:	1b c0       	rjmp	.+54     	; 0x84e6 <_printf_fn+0x512>
    84b0:	94 e0       	ldi	r25, 0x04	; 4
    84b2:	49 2e       	mov	r4, r25
    84b4:	51 2c       	mov	r5, r1
    84b6:	6a 96       	adiw	r28, 0x1a	; 26
    84b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    84ba:	6a 97       	sbiw	r28, 0x1a	; 26
    84bc:	6b 96       	adiw	r28, 0x1b	; 27
    84be:	9f ad       	ldd	r25, Y+63	; 0x3f
    84c0:	6b 97       	sbiw	r28, 0x1b	; 27
    84c2:	11 c0       	rjmp	.+34     	; 0x84e6 <_printf_fn+0x512>
    84c4:	66 96       	adiw	r28, 0x16	; 22
    84c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    84c8:	66 97       	sbiw	r28, 0x16	; 22
    84ca:	67 96       	adiw	r28, 0x17	; 23
    84cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    84ce:	67 97       	sbiw	r28, 0x17	; 23
    84d0:	a3 96       	adiw	r28, 0x23	; 35
    84d2:	1f ae       	std	Y+63, r1	; 0x3f
    84d4:	1e ae       	std	Y+62, r1	; 0x3e
    84d6:	a3 97       	sbiw	r28, 0x23	; 35
    84d8:	06 c0       	rjmp	.+12     	; 0x84e6 <_printf_fn+0x512>
    84da:	68 96       	adiw	r28, 0x18	; 24
    84dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    84de:	68 97       	sbiw	r28, 0x18	; 24
    84e0:	69 96       	adiw	r28, 0x19	; 25
    84e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    84e4:	69 97       	sbiw	r28, 0x19	; 25
    84e6:	2f ef       	ldi	r18, 0xFF	; 255
    84e8:	62 1a       	sub	r6, r18
    84ea:	72 0a       	sbc	r7, r18
    84ec:	82 0a       	sbc	r8, r18
    84ee:	15 01       	movw	r2, r10
    84f0:	33 c0       	rjmp	.+102    	; 0x8558 <_printf_fn+0x584>
    84f2:	91 fc       	sbrc	r9, 1
    84f4:	08 c0       	rjmp	.+16     	; 0x8506 <_printf_fn+0x532>
    84f6:	68 94       	set
    84f8:	91 f8       	bld	r9, 1
    84fa:	46 e0       	ldi	r20, 0x06	; 6
    84fc:	50 e0       	ldi	r21, 0x00	; 0
    84fe:	a1 96       	adiw	r28, 0x21	; 33
    8500:	5f af       	std	Y+63, r21	; 0x3f
    8502:	4e af       	std	Y+62, r20	; 0x3e
    8504:	a1 97       	sbiw	r28, 0x21	; 33
    8506:	d1 01       	movw	r26, r2
    8508:	8d 91       	ld	r24, X+
    850a:	9d 91       	ld	r25, X+
    850c:	0d 90       	ld	r0, X+
    850e:	bc 91       	ld	r27, X
    8510:	a0 2d       	mov	r26, r0
    8512:	a9 96       	adiw	r28, 0x29	; 41
    8514:	8c af       	std	Y+60, r24	; 0x3c
    8516:	9d af       	std	Y+61, r25	; 0x3d
    8518:	ae af       	std	Y+62, r26	; 0x3e
    851a:	bf af       	std	Y+63, r27	; 0x3f
    851c:	a9 97       	sbiw	r28, 0x29	; 41
    851e:	bf ef       	ldi	r27, 0xFF	; 255
    8520:	6b 1a       	sub	r6, r27
    8522:	7b 0a       	sbc	r7, r27
    8524:	8b 0a       	sbc	r8, r27
    8526:	f1 01       	movw	r30, r2
    8528:	34 96       	adiw	r30, 0x04	; 4
    852a:	1f 01       	movw	r2, r30
    852c:	0f c0       	rjmp	.+30     	; 0x854c <_printf_fn+0x578>
    852e:	ff ef       	ldi	r31, 0xFF	; 255
    8530:	6f 1a       	sub	r6, r31
    8532:	7f 0a       	sbc	r7, r31
    8534:	8f 0a       	sbc	r8, r31
    8536:	c5 c0       	rjmp	.+394    	; 0x86c2 <_printf_fn+0x6ee>
    8538:	2f ef       	ldi	r18, 0xFF	; 255
    853a:	62 1a       	sub	r6, r18
    853c:	72 0a       	sbc	r7, r18
    853e:	82 0a       	sbc	r8, r18
    8540:	11 c1       	rjmp	.+546    	; 0x8764 <_printf_fn+0x790>
    8542:	3f ef       	ldi	r19, 0xFF	; 255
    8544:	63 1a       	sub	r6, r19
    8546:	73 0a       	sbc	r7, r19
    8548:	83 0a       	sbc	r8, r19
    854a:	c8 c0       	rjmp	.+400    	; 0x86dc <_printf_fn+0x708>
    854c:	66 96       	adiw	r28, 0x16	; 22
    854e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8550:	66 97       	sbiw	r28, 0x16	; 22
    8552:	67 96       	adiw	r28, 0x17	; 23
    8554:	9f ad       	ldd	r25, Y+63	; 0x3f
    8556:	67 97       	sbiw	r28, 0x17	; 23
    8558:	a3 96       	adiw	r28, 0x23	; 35
    855a:	ee ad       	ldd	r30, Y+62	; 0x3e
    855c:	ff ad       	ldd	r31, Y+63	; 0x3f
    855e:	a3 97       	sbiw	r28, 0x23	; 35
    8560:	e2 54       	subi	r30, 0x42	; 66
    8562:	f1 09       	sbc	r31, r1
    8564:	e7 33       	cpi	r30, 0x37	; 55
    8566:	f1 05       	cpc	r31, r1
    8568:	08 f0       	brcs	.+2      	; 0x856c <_printf_fn+0x598>
    856a:	56 c1       	rjmp	.+684    	; 0x8818 <_printf_fn+0x844>
    856c:	e3 58       	subi	r30, 0x83	; 131
    856e:	ff 4f       	sbci	r31, 0xFF	; 255
    8570:	0c 94 54 e1 	jmp	0x1c2a8	; 0x1c2a8 <__tablejump2__>
    8574:	e8 94       	clt
    8576:	94 f8       	bld	r9, 4
    8578:	e8 94       	clt
    857a:	92 f8       	bld	r9, 2
    857c:	a9 2c       	mov	r10, r9
    857e:	b1 2c       	mov	r11, r1
    8580:	a1 96       	adiw	r28, 0x21	; 33
    8582:	ce ac       	ldd	r12, Y+62	; 0x3e
    8584:	df ac       	ldd	r13, Y+63	; 0x3f
    8586:	a1 97       	sbiw	r28, 0x21	; 33
    8588:	6f 96       	adiw	r28, 0x1f	; 31
    858a:	ee ac       	ldd	r14, Y+62	; 0x3e
    858c:	ff ac       	ldd	r15, Y+63	; 0x3f
    858e:	6f 97       	sbiw	r28, 0x1f	; 31
    8590:	0a e0       	ldi	r16, 0x0A	; 10
    8592:	10 e0       	ldi	r17, 0x00	; 0
    8594:	19 c0       	rjmp	.+50     	; 0x85c8 <_printf_fn+0x5f4>
    8596:	a9 2c       	mov	r10, r9
    8598:	b1 2c       	mov	r11, r1
    859a:	a1 96       	adiw	r28, 0x21	; 33
    859c:	ce ac       	ldd	r12, Y+62	; 0x3e
    859e:	df ac       	ldd	r13, Y+63	; 0x3f
    85a0:	a1 97       	sbiw	r28, 0x21	; 33
    85a2:	6f 96       	adiw	r28, 0x1f	; 31
    85a4:	ee ac       	ldd	r14, Y+62	; 0x3e
    85a6:	ff ac       	ldd	r15, Y+63	; 0x3f
    85a8:	6f 97       	sbiw	r28, 0x1f	; 31
    85aa:	02 e0       	ldi	r16, 0x02	; 2
    85ac:	10 e0       	ldi	r17, 0x00	; 0
    85ae:	0c c0       	rjmp	.+24     	; 0x85c8 <_printf_fn+0x5f4>
    85b0:	a9 2c       	mov	r10, r9
    85b2:	b1 2c       	mov	r11, r1
    85b4:	a1 96       	adiw	r28, 0x21	; 33
    85b6:	ce ac       	ldd	r12, Y+62	; 0x3e
    85b8:	df ac       	ldd	r13, Y+63	; 0x3f
    85ba:	a1 97       	sbiw	r28, 0x21	; 33
    85bc:	6f 96       	adiw	r28, 0x1f	; 31
    85be:	ee ac       	ldd	r14, Y+62	; 0x3e
    85c0:	ff ac       	ldd	r15, Y+63	; 0x3f
    85c2:	6f 97       	sbiw	r28, 0x1f	; 31
    85c4:	08 e0       	ldi	r16, 0x08	; 8
    85c6:	10 e0       	ldi	r17, 0x00	; 0
    85c8:	22 e4       	ldi	r18, 0x42	; 66
    85ca:	30 e0       	ldi	r19, 0x00	; 0
    85cc:	ae 01       	movw	r20, r28
    85ce:	4f 5f       	subi	r20, 0xFF	; 255
    85d0:	5f 4f       	sbci	r21, 0xFF	; 255
    85d2:	b2 01       	movw	r22, r4
    85d4:	7d d9       	rcall	.-3334   	; 0x78d0 <p_ntoa>
    85d6:	34 c0       	rjmp	.+104    	; 0x8640 <_printf_fn+0x66c>
    85d8:	a9 2c       	mov	r10, r9
    85da:	b1 2c       	mov	r11, r1
    85dc:	a1 96       	adiw	r28, 0x21	; 33
    85de:	ce ac       	ldd	r12, Y+62	; 0x3e
    85e0:	df ac       	ldd	r13, Y+63	; 0x3f
    85e2:	a1 97       	sbiw	r28, 0x21	; 33
    85e4:	6f 96       	adiw	r28, 0x1f	; 31
    85e6:	ee ac       	ldd	r14, Y+62	; 0x3e
    85e8:	ff ac       	ldd	r15, Y+63	; 0x3f
    85ea:	6f 97       	sbiw	r28, 0x1f	; 31
    85ec:	00 e1       	ldi	r16, 0x10	; 16
    85ee:	10 e0       	ldi	r17, 0x00	; 0
    85f0:	22 e4       	ldi	r18, 0x42	; 66
    85f2:	30 e0       	ldi	r19, 0x00	; 0
    85f4:	ae 01       	movw	r20, r28
    85f6:	4f 5f       	subi	r20, 0xFF	; 255
    85f8:	5f 4f       	sbci	r21, 0xFF	; 255
    85fa:	b2 01       	movw	r22, r4
    85fc:	69 d9       	rcall	.-3374   	; 0x78d0 <p_ntoa>
    85fe:	6c 01       	movw	r12, r24
    8600:	a3 96       	adiw	r28, 0x23	; 35
    8602:	6e ad       	ldd	r22, Y+62	; 0x3e
    8604:	7f ad       	ldd	r23, Y+63	; 0x3f
    8606:	a3 97       	sbiw	r28, 0x23	; 35
    8608:	67 7f       	andi	r22, 0xF7	; 247
    860a:	60 35       	cpi	r22, 0x50	; 80
    860c:	71 05       	cpc	r23, r1
    860e:	09 f0       	breq	.+2      	; 0x8612 <_printf_fn+0x63e>
    8610:	3f c0       	rjmp	.+126    	; 0x8690 <_printf_fn+0x6bc>
    8612:	3a c0       	rjmp	.+116    	; 0x8688 <_printf_fn+0x6b4>
    8614:	c9 2c       	mov	r12, r9
    8616:	d1 2c       	mov	r13, r1
    8618:	a1 96       	adiw	r28, 0x21	; 33
    861a:	ee ac       	ldd	r14, Y+62	; 0x3e
    861c:	ff ac       	ldd	r15, Y+63	; 0x3f
    861e:	a1 97       	sbiw	r28, 0x21	; 33
    8620:	6f 96       	adiw	r28, 0x1f	; 31
    8622:	0e ad       	ldd	r16, Y+62	; 0x3e
    8624:	1f ad       	ldd	r17, Y+63	; 0x3f
    8626:	6f 97       	sbiw	r28, 0x1f	; 31
    8628:	22 e4       	ldi	r18, 0x42	; 66
    862a:	30 e0       	ldi	r19, 0x00	; 0
    862c:	ae 01       	movw	r20, r28
    862e:	4f 5f       	subi	r20, 0xFF	; 255
    8630:	5f 4f       	sbci	r21, 0xFF	; 255
    8632:	a9 96       	adiw	r28, 0x29	; 41
    8634:	6c ad       	ldd	r22, Y+60	; 0x3c
    8636:	7d ad       	ldd	r23, Y+61	; 0x3d
    8638:	8e ad       	ldd	r24, Y+62	; 0x3e
    863a:	9f ad       	ldd	r25, Y+63	; 0x3f
    863c:	a9 97       	sbiw	r28, 0x29	; 41
    863e:	9d d9       	rcall	.-3270   	; 0x797a <p_ftoa>
    8640:	93 fa       	bst	r9, 3
    8642:	00 27       	eor	r16, r16
    8644:	00 f9       	bld	r16, 0
    8646:	10 e0       	ldi	r17, 0x00	; 0
    8648:	9c 01       	movw	r18, r24
    864a:	27 c0       	rjmp	.+78     	; 0x869a <_printf_fn+0x6c6>
    864c:	c9 2c       	mov	r12, r9
    864e:	d1 2c       	mov	r13, r1
    8650:	a1 96       	adiw	r28, 0x21	; 33
    8652:	ee ac       	ldd	r14, Y+62	; 0x3e
    8654:	ff ac       	ldd	r15, Y+63	; 0x3f
    8656:	a1 97       	sbiw	r28, 0x21	; 33
    8658:	6f 96       	adiw	r28, 0x1f	; 31
    865a:	0e ad       	ldd	r16, Y+62	; 0x3e
    865c:	1f ad       	ldd	r17, Y+63	; 0x3f
    865e:	6f 97       	sbiw	r28, 0x1f	; 31
    8660:	22 e4       	ldi	r18, 0x42	; 66
    8662:	30 e0       	ldi	r19, 0x00	; 0
    8664:	ae 01       	movw	r20, r28
    8666:	4f 5f       	subi	r20, 0xFF	; 255
    8668:	5f 4f       	sbci	r21, 0xFF	; 255
    866a:	a9 96       	adiw	r28, 0x29	; 41
    866c:	6c ad       	ldd	r22, Y+60	; 0x3c
    866e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8670:	8e ad       	ldd	r24, Y+62	; 0x3e
    8672:	9f ad       	ldd	r25, Y+63	; 0x3f
    8674:	a9 97       	sbiw	r28, 0x29	; 41
    8676:	88 da       	rcall	.-2800   	; 0x7b88 <p_etoa>
    8678:	6c 01       	movw	r12, r24
    867a:	a3 96       	adiw	r28, 0x23	; 35
    867c:	4e ad       	ldd	r20, Y+62	; 0x3e
    867e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8680:	a3 97       	sbiw	r28, 0x23	; 35
    8682:	45 34       	cpi	r20, 0x45	; 69
    8684:	51 05       	cpc	r21, r1
    8686:	21 f4       	brne	.+8      	; 0x8690 <_printf_fn+0x6bc>
    8688:	ce 01       	movw	r24, r28
    868a:	01 96       	adiw	r24, 0x01	; 1
    868c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <strupper>
    8690:	93 fa       	bst	r9, 3
    8692:	00 27       	eor	r16, r16
    8694:	00 f9       	bld	r16, 0
    8696:	10 e0       	ldi	r17, 0x00	; 0
    8698:	96 01       	movw	r18, r12
    869a:	6f 96       	adiw	r28, 0x1f	; 31
    869c:	4e ad       	ldd	r20, Y+62	; 0x3e
    869e:	5f ad       	ldd	r21, Y+63	; 0x3f
    86a0:	6f 97       	sbiw	r28, 0x1f	; 31
    86a2:	be 01       	movw	r22, r28
    86a4:	6f 5f       	subi	r22, 0xFF	; 255
    86a6:	7f 4f       	sbci	r23, 0xFF	; 255
    86a8:	a5 96       	adiw	r28, 0x25	; 37
    86aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    86ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    86ae:	a5 97       	sbiw	r28, 0x25	; 37
    86b0:	d7 db       	rcall	.-2130   	; 0x7e60 <_puts_pad>
    86b2:	b6 c0       	rjmp	.+364    	; 0x8820 <_printf_fn+0x84c>
    86b4:	a3 96       	adiw	r28, 0x23	; 35
    86b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    86b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    86ba:	a3 97       	sbiw	r28, 0x23	; 35
    86bc:	83 37       	cpi	r24, 0x73	; 115
    86be:	91 05       	cpc	r25, r1
    86c0:	69 f4       	brne	.+26     	; 0x86dc <_printf_fn+0x708>
    86c2:	61 01       	movw	r12, r2
    86c4:	92 e0       	ldi	r25, 0x02	; 2
    86c6:	c9 0e       	add	r12, r25
    86c8:	d1 1c       	adc	r13, r1
    86ca:	d1 01       	movw	r26, r2
    86cc:	6d 91       	ld	r22, X+
    86ce:	7c 91       	ld	r23, X
    86d0:	61 15       	cp	r22, r1
    86d2:	71 05       	cpc	r23, r1
    86d4:	91 f4       	brne	.+36     	; 0x86fa <_printf_fn+0x726>
    86d6:	6a e1       	ldi	r22, 0x1A	; 26
    86d8:	74 e0       	ldi	r23, 0x04	; 4
    86da:	0f c0       	rjmp	.+30     	; 0x86fa <_printf_fn+0x726>
    86dc:	61 01       	movw	r12, r2
    86de:	b2 e0       	ldi	r27, 0x02	; 2
    86e0:	cb 0e       	add	r12, r27
    86e2:	d1 1c       	adc	r13, r1
    86e4:	f1 01       	movw	r30, r2
    86e6:	80 81       	ld	r24, Z
    86e8:	60 96       	adiw	r28, 0x10	; 16
    86ea:	8f af       	std	Y+63, r24	; 0x3f
    86ec:	60 97       	sbiw	r28, 0x10	; 16
    86ee:	61 96       	adiw	r28, 0x11	; 17
    86f0:	1f ae       	std	Y+63, r1	; 0x3f
    86f2:	61 97       	sbiw	r28, 0x11	; 17
    86f4:	be 01       	movw	r22, r28
    86f6:	61 5b       	subi	r22, 0xB1	; 177
    86f8:	7f 4f       	sbci	r23, 0xFF	; 255
    86fa:	fb 01       	movw	r30, r22
    86fc:	01 90       	ld	r0, Z+
    86fe:	00 20       	and	r0, r0
    8700:	e9 f7       	brne	.-6      	; 0x86fc <_printf_fn+0x728>
    8702:	31 97       	sbiw	r30, 0x01	; 1
    8704:	e6 1b       	sub	r30, r22
    8706:	f7 0b       	sbc	r31, r23
    8708:	a1 96       	adiw	r28, 0x21	; 33
    870a:	2e ad       	ldd	r18, Y+62	; 0x3e
    870c:	3f ad       	ldd	r19, Y+63	; 0x3f
    870e:	a1 97       	sbiw	r28, 0x21	; 33
    8710:	23 2b       	or	r18, r19
    8712:	21 f4       	brne	.+8      	; 0x871c <_printf_fn+0x748>
    8714:	a1 96       	adiw	r28, 0x21	; 33
    8716:	ff af       	std	Y+63, r31	; 0x3f
    8718:	ee af       	std	Y+62, r30	; 0x3e
    871a:	a1 97       	sbiw	r28, 0x21	; 33
    871c:	6f 96       	adiw	r28, 0x1f	; 31
    871e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8720:	5f ad       	ldd	r21, Y+63	; 0x3f
    8722:	6f 97       	sbiw	r28, 0x1f	; 31
    8724:	a1 96       	adiw	r28, 0x21	; 33
    8726:	8e ad       	ldd	r24, Y+62	; 0x3e
    8728:	9f ad       	ldd	r25, Y+63	; 0x3f
    872a:	a1 97       	sbiw	r28, 0x21	; 33
    872c:	48 17       	cp	r20, r24
    872e:	59 07       	cpc	r21, r25
    8730:	3c f4       	brge	.+14     	; 0x8740 <_printf_fn+0x76c>
    8732:	41 15       	cp	r20, r1
    8734:	51 05       	cpc	r21, r1
    8736:	21 f0       	breq	.+8      	; 0x8740 <_printf_fn+0x76c>
    8738:	a1 96       	adiw	r28, 0x21	; 33
    873a:	5f af       	std	Y+63, r21	; 0x3f
    873c:	4e af       	std	Y+62, r20	; 0x3e
    873e:	a1 97       	sbiw	r28, 0x21	; 33
    8740:	93 fa       	bst	r9, 3
    8742:	00 27       	eor	r16, r16
    8744:	00 f9       	bld	r16, 0
    8746:	10 e0       	ldi	r17, 0x00	; 0
    8748:	a1 96       	adiw	r28, 0x21	; 33
    874a:	2e ad       	ldd	r18, Y+62	; 0x3e
    874c:	3f ad       	ldd	r19, Y+63	; 0x3f
    874e:	a1 97       	sbiw	r28, 0x21	; 33
    8750:	6f 96       	adiw	r28, 0x1f	; 31
    8752:	4e ad       	ldd	r20, Y+62	; 0x3e
    8754:	5f ad       	ldd	r21, Y+63	; 0x3f
    8756:	6f 97       	sbiw	r28, 0x1f	; 31
    8758:	a5 96       	adiw	r28, 0x25	; 37
    875a:	8e ad       	ldd	r24, Y+62	; 0x3e
    875c:	9f ad       	ldd	r25, Y+63	; 0x3f
    875e:	a5 97       	sbiw	r28, 0x25	; 37
    8760:	7f db       	rcall	.-2306   	; 0x7e60 <_puts_pad>
    8762:	45 c0       	rjmp	.+138    	; 0x87ee <_printf_fn+0x81a>
    8764:	61 01       	movw	r12, r2
    8766:	92 e0       	ldi	r25, 0x02	; 2
    8768:	c9 0e       	add	r12, r25
    876a:	d1 1c       	adc	r13, r1
    876c:	d1 01       	movw	r26, r2
    876e:	2d 90       	ld	r2, X+
    8770:	3c 90       	ld	r3, X
    8772:	41 2c       	mov	r4, r1
    8774:	21 14       	cp	r2, r1
    8776:	31 04       	cpc	r3, r1
    8778:	41 04       	cpc	r4, r1
    877a:	29 f4       	brne	.+10     	; 0x8786 <_printf_fn+0x7b2>
    877c:	ae 96       	adiw	r28, 0x2e	; 46
    877e:	2d ac       	ldd	r2, Y+61	; 0x3d
    8780:	3e ac       	ldd	r3, Y+62	; 0x3e
    8782:	4f ac       	ldd	r4, Y+63	; 0x3f
    8784:	ae 97       	sbiw	r28, 0x2e	; 46
    8786:	84 2d       	mov	r24, r4
    8788:	b1 01       	movw	r22, r2
    878a:	08 dc       	rcall	.-2032   	; 0x7f9c <strlen_X>
    878c:	a1 96       	adiw	r28, 0x21	; 33
    878e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8790:	ff ad       	ldd	r31, Y+63	; 0x3f
    8792:	a1 97       	sbiw	r28, 0x21	; 33
    8794:	ef 2b       	or	r30, r31
    8796:	31 f4       	brne	.+12     	; 0x87a4 <_printf_fn+0x7d0>
    8798:	a0 96       	adiw	r28, 0x20	; 32
    879a:	8f af       	std	Y+63, r24	; 0x3f
    879c:	a0 97       	sbiw	r28, 0x20	; 32
    879e:	a1 96       	adiw	r28, 0x21	; 33
    87a0:	9f af       	std	Y+63, r25	; 0x3f
    87a2:	a1 97       	sbiw	r28, 0x21	; 33
    87a4:	6f 96       	adiw	r28, 0x1f	; 31
    87a6:	2e ad       	ldd	r18, Y+62	; 0x3e
    87a8:	3f ad       	ldd	r19, Y+63	; 0x3f
    87aa:	6f 97       	sbiw	r28, 0x1f	; 31
    87ac:	a1 96       	adiw	r28, 0x21	; 33
    87ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    87b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87b2:	a1 97       	sbiw	r28, 0x21	; 33
    87b4:	24 17       	cp	r18, r20
    87b6:	35 07       	cpc	r19, r21
    87b8:	3c f4       	brge	.+14     	; 0x87c8 <_printf_fn+0x7f4>
    87ba:	21 15       	cp	r18, r1
    87bc:	31 05       	cpc	r19, r1
    87be:	21 f0       	breq	.+8      	; 0x87c8 <_printf_fn+0x7f4>
    87c0:	a1 96       	adiw	r28, 0x21	; 33
    87c2:	3f af       	std	Y+63, r19	; 0x3f
    87c4:	2e af       	std	Y+62, r18	; 0x3e
    87c6:	a1 97       	sbiw	r28, 0x21	; 33
    87c8:	93 fa       	bst	r9, 3
    87ca:	ee 24       	eor	r14, r14
    87cc:	e0 f8       	bld	r14, 0
    87ce:	f1 2c       	mov	r15, r1
    87d0:	a1 96       	adiw	r28, 0x21	; 33
    87d2:	0e ad       	ldd	r16, Y+62	; 0x3e
    87d4:	1f ad       	ldd	r17, Y+63	; 0x3f
    87d6:	a1 97       	sbiw	r28, 0x21	; 33
    87d8:	6f 96       	adiw	r28, 0x1f	; 31
    87da:	2e ad       	ldd	r18, Y+62	; 0x3e
    87dc:	3f ad       	ldd	r19, Y+63	; 0x3f
    87de:	6f 97       	sbiw	r28, 0x1f	; 31
    87e0:	64 2d       	mov	r22, r4
    87e2:	a1 01       	movw	r20, r2
    87e4:	a5 96       	adiw	r28, 0x25	; 37
    87e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    87e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    87ea:	a5 97       	sbiw	r28, 0x25	; 37
    87ec:	7b db       	rcall	.-2314   	; 0x7ee4 <_puts_pad_X>
    87ee:	16 01       	movw	r2, r12
    87f0:	17 c0       	rjmp	.+46     	; 0x8820 <_printf_fn+0x84c>
    87f2:	f6 01       	movw	r30, r12
    87f4:	5e 2d       	mov	r21, r14
    87f6:	0e 94 ba e1 	call	0x1c374	; 0x1c374 <__xload_1>
    87fa:	66 23       	and	r22, r22
    87fc:	89 f0       	breq	.+34     	; 0x8820 <_printf_fn+0x84c>
    87fe:	5f ef       	ldi	r21, 0xFF	; 255
    8800:	c5 1a       	sub	r12, r21
    8802:	d5 0a       	sbc	r13, r21
    8804:	e5 0a       	sbc	r14, r21
    8806:	a5 96       	adiw	r28, 0x25	; 37
    8808:	ae ad       	ldd	r26, Y+62	; 0x3e
    880a:	bf ad       	ldd	r27, Y+63	; 0x3f
    880c:	a5 97       	sbiw	r28, 0x25	; 37
    880e:	ed 91       	ld	r30, X+
    8810:	fc 91       	ld	r31, X
    8812:	11 97       	sbiw	r26, 0x01	; 1
    8814:	cd 01       	movw	r24, r26
    8816:	09 95       	icall
    8818:	6c 14       	cp	r6, r12
    881a:	7d 04       	cpc	r7, r13
    881c:	8e 04       	cpc	r8, r14
    881e:	48 f7       	brcc	.-46     	; 0x87f2 <_printf_fn+0x81e>
    8820:	e8 2c       	mov	r14, r8
    8822:	63 01       	movw	r12, r6
    8824:	0f cc       	rjmp	.-2018   	; 0x8044 <_printf_fn+0x70>
    8826:	82 e0       	ldi	r24, 0x02	; 2
    8828:	48 2e       	mov	r4, r24
    882a:	51 2c       	mov	r5, r1
    882c:	0d cd       	rjmp	.-1510   	; 0x8248 <_printf_fn+0x274>
    882e:	f2 e0       	ldi	r31, 0x02	; 2
    8830:	4f 16       	cp	r4, r31
    8832:	51 04       	cpc	r5, r1
    8834:	61 f4       	brne	.+24     	; 0x884e <_printf_fn+0x87a>
    8836:	51 01       	movw	r10, r2
    8838:	b2 e0       	ldi	r27, 0x02	; 2
    883a:	ab 0e       	add	r10, r27
    883c:	b1 1c       	adc	r11, r1
    883e:	f1 01       	movw	r30, r2
    8840:	80 81       	ld	r24, Z
    8842:	91 81       	ldd	r25, Z+1	; 0x01
    8844:	65 96       	adiw	r28, 0x15	; 21
    8846:	9f af       	std	Y+63, r25	; 0x3f
    8848:	8e af       	std	Y+62, r24	; 0x3e
    884a:	65 97       	sbiw	r28, 0x15	; 21
    884c:	7e cd       	rjmp	.-1284   	; 0x834a <_printf_fn+0x376>
    884e:	f4 e0       	ldi	r31, 0x04	; 4
    8850:	4f 16       	cp	r4, r31
    8852:	51 04       	cpc	r5, r1
    8854:	09 f0       	breq	.+2      	; 0x8858 <_printf_fn+0x884>
    8856:	b2 cd       	rjmp	.-1180   	; 0x83bc <_printf_fn+0x3e8>
    8858:	51 01       	movw	r10, r2
    885a:	24 e0       	ldi	r18, 0x04	; 4
    885c:	a2 0e       	add	r10, r18
    885e:	b1 1c       	adc	r11, r1
    8860:	f1 01       	movw	r30, r2
    8862:	80 81       	ld	r24, Z
    8864:	91 81       	ldd	r25, Z+1	; 0x01
    8866:	a2 81       	ldd	r26, Z+2	; 0x02
    8868:	b3 81       	ldd	r27, Z+3	; 0x03
    886a:	2f 96       	adiw	r28, 0x0f	; 15
    886c:	8c af       	std	Y+60, r24	; 0x3c
    886e:	9d af       	std	Y+61, r25	; 0x3d
    8870:	ae af       	std	Y+62, r26	; 0x3e
    8872:	bf af       	std	Y+63, r27	; 0x3f
    8874:	2f 97       	sbiw	r28, 0x0f	; 15
    8876:	90 cd       	rjmp	.-1248   	; 0x8398 <_printf_fn+0x3c4>
    8878:	c2 59       	subi	r28, 0x92	; 146
    887a:	df 4f       	sbci	r29, 0xFF	; 255
    887c:	e2 e1       	ldi	r30, 0x12	; 18
    887e:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00008882 <vsnprintf_P>:
    8882:	a8 e0       	ldi	r26, 0x08	; 8
    8884:	b0 e0       	ldi	r27, 0x00	; 0
    8886:	e7 e4       	ldi	r30, 0x47	; 71
    8888:	f4 e4       	ldi	r31, 0x44	; 68
    888a:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
    888e:	7c 01       	movw	r14, r24
    8890:	cb 01       	movw	r24, r22
    8892:	64 2f       	mov	r22, r20
    8894:	a9 01       	movw	r20, r18
    8896:	98 01       	movw	r18, r16
    8898:	f7 01       	movw	r30, r14
    889a:	10 82       	st	Z, r1
    889c:	ef e9       	ldi	r30, 0x9F	; 159
    889e:	fb e3       	ldi	r31, 0x3B	; 59
    88a0:	fa 83       	std	Y+2, r31	; 0x02
    88a2:	e9 83       	std	Y+1, r30	; 0x01
    88a4:	9e 83       	std	Y+6, r25	; 0x06
    88a6:	8d 83       	std	Y+5, r24	; 0x05
    88a8:	18 86       	std	Y+8, r1	; 0x08
    88aa:	1f 82       	std	Y+7, r1	; 0x07
    88ac:	fc 82       	std	Y+4, r15	; 0x04
    88ae:	eb 82       	std	Y+3, r14	; 0x03
    88b0:	ce 01       	movw	r24, r28
    88b2:	01 96       	adiw	r24, 0x01	; 1
    88b4:	8f db       	rcall	.-2274   	; 0x7fd4 <_printf_fn>
    88b6:	f7 01       	movw	r30, r14
    88b8:	01 90       	ld	r0, Z+
    88ba:	00 20       	and	r0, r0
    88bc:	e9 f7       	brne	.-6      	; 0x88b8 <vsnprintf_P+0x36>
    88be:	cf 01       	movw	r24, r30
    88c0:	01 97       	sbiw	r24, 0x01	; 1
    88c2:	8e 19       	sub	r24, r14
    88c4:	9f 09       	sbc	r25, r15
    88c6:	28 96       	adiw	r28, 0x08	; 8
    88c8:	e6 e0       	ldi	r30, 0x06	; 6
    88ca:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

000088ce <snprintf_P>:
    88ce:	a0 e0       	ldi	r26, 0x00	; 0
    88d0:	b0 e0       	ldi	r27, 0x00	; 0
    88d2:	ed e6       	ldi	r30, 0x6D	; 109
    88d4:	f4 e4       	ldi	r31, 0x44	; 68
    88d6:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    88da:	8e 01       	movw	r16, r28
    88dc:	02 5f       	subi	r16, 0xF2	; 242
    88de:	1f 4f       	sbci	r17, 0xFF	; 255
    88e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    88e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    88e4:	4d 85       	ldd	r20, Y+13	; 0x0d
    88e6:	69 85       	ldd	r22, Y+9	; 0x09
    88e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    88ea:	8f 81       	ldd	r24, Y+7	; 0x07
    88ec:	98 85       	ldd	r25, Y+8	; 0x08
    88ee:	c9 df       	rcall	.-110    	; 0x8882 <vsnprintf_P>
    88f0:	e4 e0       	ldi	r30, 0x04	; 4
    88f2:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

000088f6 <sprintf_P>:
    88f6:	a0 e0       	ldi	r26, 0x00	; 0
    88f8:	b0 e0       	ldi	r27, 0x00	; 0
    88fa:	e1 e8       	ldi	r30, 0x81	; 129
    88fc:	f4 e4       	ldi	r31, 0x44	; 68
    88fe:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    8902:	8e 01       	movw	r16, r28
    8904:	04 5f       	subi	r16, 0xF4	; 244
    8906:	1f 4f       	sbci	r17, 0xFF	; 255
    8908:	29 85       	ldd	r18, Y+9	; 0x09
    890a:	3a 85       	ldd	r19, Y+10	; 0x0a
    890c:	4b 85       	ldd	r20, Y+11	; 0x0b
    890e:	60 e0       	ldi	r22, 0x00	; 0
    8910:	74 e0       	ldi	r23, 0x04	; 4
    8912:	8f 81       	ldd	r24, Y+7	; 0x07
    8914:	98 85       	ldd	r25, Y+8	; 0x08
    8916:	b5 df       	rcall	.-150    	; 0x8882 <vsnprintf_P>
    8918:	e4 e0       	ldi	r30, 0x04	; 4
    891a:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000891e <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    891e:	a8 e0       	ldi	r26, 0x08	; 8
    8920:	b0 e0       	ldi	r27, 0x00	; 0
    8922:	e5 e9       	ldi	r30, 0x95	; 149
    8924:	f4 e4       	ldi	r31, 0x44	; 68
    8926:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    892a:	9e 01       	movw	r18, r28
    892c:	23 5f       	subi	r18, 0xF3	; 243
    892e:	3f 4f       	sbci	r19, 0xFF	; 255
    8930:	f9 01       	movw	r30, r18
    8932:	41 91       	ld	r20, Z+
    8934:	51 91       	ld	r21, Z+
    8936:	61 91       	ld	r22, Z+
    8938:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    893a:	88 eb       	ldi	r24, 0xB8	; 184
    893c:	9b e3       	ldi	r25, 0x3B	; 59
    893e:	9a 83       	std	Y+2, r25	; 0x02
    8940:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8942:	18 86       	std	Y+8, r1	; 0x08
    8944:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8946:	ce 01       	movw	r24, r28
    8948:	01 96       	adiw	r24, 0x01	; 1
    894a:	44 db       	rcall	.-2424   	; 0x7fd4 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    894c:	8f 81       	ldd	r24, Y+7	; 0x07
    894e:	98 85       	ldd	r25, Y+8	; 0x08
    8950:	28 96       	adiw	r28, 0x08	; 8
    8952:	e2 e0       	ldi	r30, 0x02	; 2
    8954:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00008958 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8958:	9c 01       	movw	r18, r24
    895a:	20 53       	subi	r18, 0x30	; 48
    895c:	31 09       	sbc	r19, r1
    895e:	2a 30       	cpi	r18, 0x0A	; 10
    8960:	31 05       	cpc	r19, r1
    8962:	10 f4       	brcc	.+4      	; 0x8968 <atodigit+0x10>
    8964:	c9 01       	movw	r24, r18
    8966:	10 c0       	rjmp	.+32     	; 0x8988 <atodigit+0x30>
    8968:	9c 01       	movw	r18, r24
    896a:	21 54       	subi	r18, 0x41	; 65
    896c:	31 09       	sbc	r19, r1
    896e:	26 30       	cpi	r18, 0x06	; 6
    8970:	31 05       	cpc	r19, r1
    8972:	10 f4       	brcc	.+4      	; 0x8978 <atodigit+0x20>
    8974:	c7 97       	sbiw	r24, 0x37	; 55
    8976:	08 c0       	rjmp	.+16     	; 0x8988 <atodigit+0x30>
    8978:	9c 01       	movw	r18, r24
    897a:	21 56       	subi	r18, 0x61	; 97
    897c:	31 09       	sbc	r19, r1
    897e:	26 30       	cpi	r18, 0x06	; 6
    8980:	31 05       	cpc	r19, r1
    8982:	28 f4       	brcc	.+10     	; 0x898e <atodigit+0x36>
    8984:	87 55       	subi	r24, 0x57	; 87
    8986:	91 09       	sbc	r25, r1
    8988:	86 17       	cp	r24, r22
    898a:	97 07       	cpc	r25, r23
    898c:	14 f0       	brlt	.+4      	; 0x8992 <atodigit+0x3a>
    898e:	8f ef       	ldi	r24, 0xFF	; 255
    8990:	9f ef       	ldi	r25, 0xFF	; 255
    8992:	08 95       	ret

00008994 <strtol>:
    8994:	a0 e0       	ldi	r26, 0x00	; 0
    8996:	b0 e0       	ldi	r27, 0x00	; 0
    8998:	e0 ed       	ldi	r30, 0xD0	; 208
    899a:	f4 e4       	ldi	r31, 0x44	; 68
    899c:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    89a0:	2b 01       	movw	r4, r22
    89a2:	8a 01       	movw	r16, r20
    89a4:	ec 01       	movw	r28, r24
    89a6:	28 81       	ld	r18, Y
    89a8:	01 96       	adiw	r24, 0x01	; 1
    89aa:	20 32       	cpi	r18, 0x20	; 32
    89ac:	d9 f3       	breq	.-10     	; 0x89a4 <strtol+0x10>
    89ae:	29 30       	cpi	r18, 0x09	; 9
    89b0:	c9 f3       	breq	.-14     	; 0x89a4 <strtol+0x10>
    89b2:	2d 32       	cpi	r18, 0x2D	; 45
    89b4:	29 f4       	brne	.+10     	; 0x89c0 <strtol+0x2c>
    89b6:	ec 01       	movw	r28, r24
    89b8:	66 24       	eor	r6, r6
    89ba:	63 94       	inc	r6
    89bc:	71 2c       	mov	r7, r1
    89be:	05 c0       	rjmp	.+10     	; 0x89ca <strtol+0x36>
    89c0:	2b 32       	cpi	r18, 0x2B	; 43
    89c2:	09 f4       	brne	.+2      	; 0x89c6 <strtol+0x32>
    89c4:	ec 01       	movw	r28, r24
    89c6:	61 2c       	mov	r6, r1
    89c8:	71 2c       	mov	r7, r1
    89ca:	9e 01       	movw	r18, r28
    89cc:	2f 5f       	subi	r18, 0xFF	; 255
    89ce:	3f 4f       	sbci	r19, 0xFF	; 255
    89d0:	88 81       	ld	r24, Y
    89d2:	80 33       	cpi	r24, 0x30	; 48
    89d4:	11 f4       	brne	.+4      	; 0x89da <strtol+0x46>
    89d6:	e9 01       	movw	r28, r18
    89d8:	f8 cf       	rjmp	.-16     	; 0x89ca <strtol+0x36>
    89da:	c1 2c       	mov	r12, r1
    89dc:	d1 2c       	mov	r13, r1
    89de:	76 01       	movw	r14, r12
    89e0:	48 01       	movw	r8, r16
    89e2:	01 2e       	mov	r0, r17
    89e4:	00 0c       	add	r0, r0
    89e6:	aa 08       	sbc	r10, r10
    89e8:	bb 08       	sbc	r11, r11
    89ea:	3c 2e       	mov	r3, r28
    89ec:	2d 2e       	mov	r2, r29
    89ee:	89 91       	ld	r24, Y+
    89f0:	88 23       	and	r24, r24
    89f2:	31 f0       	breq	.+12     	; 0x8a00 <strtol+0x6c>
    89f4:	b8 01       	movw	r22, r16
    89f6:	90 e0       	ldi	r25, 0x00	; 0
    89f8:	af df       	rcall	.-162    	; 0x8958 <atodigit>
    89fa:	fc 01       	movw	r30, r24
    89fc:	97 ff       	sbrs	r25, 7
    89fe:	0c c0       	rjmp	.+24     	; 0x8a18 <strtol+0x84>
    8a00:	61 14       	cp	r6, r1
    8a02:	71 04       	cpc	r7, r1
    8a04:	c1 f0       	breq	.+48     	; 0x8a36 <strtol+0xa2>
    8a06:	f0 94       	com	r15
    8a08:	e0 94       	com	r14
    8a0a:	d0 94       	com	r13
    8a0c:	c0 94       	com	r12
    8a0e:	c1 1c       	adc	r12, r1
    8a10:	d1 1c       	adc	r13, r1
    8a12:	e1 1c       	adc	r14, r1
    8a14:	f1 1c       	adc	r15, r1
    8a16:	0f c0       	rjmp	.+30     	; 0x8a36 <strtol+0xa2>
    8a18:	a5 01       	movw	r20, r10
    8a1a:	94 01       	movw	r18, r8
    8a1c:	c7 01       	movw	r24, r14
    8a1e:	b6 01       	movw	r22, r12
    8a20:	0e 94 d4 e0 	call	0x1c1a8	; 0x1c1a8 <__mulsi3>
    8a24:	6f 01       	movw	r12, r30
    8a26:	ff 0f       	add	r31, r31
    8a28:	ee 08       	sbc	r14, r14
    8a2a:	ff 08       	sbc	r15, r15
    8a2c:	c6 0e       	add	r12, r22
    8a2e:	d7 1e       	adc	r13, r23
    8a30:	e8 1e       	adc	r14, r24
    8a32:	f9 1e       	adc	r15, r25
    8a34:	da cf       	rjmp	.-76     	; 0x89ea <strtol+0x56>
    8a36:	41 14       	cp	r4, r1
    8a38:	51 04       	cpc	r5, r1
    8a3a:	19 f0       	breq	.+6      	; 0x8a42 <strtol+0xae>
    8a3c:	f2 01       	movw	r30, r4
    8a3e:	30 82       	st	Z, r3
    8a40:	21 82       	std	Z+1, r2	; 0x01
    8a42:	c7 01       	movw	r24, r14
    8a44:	b6 01       	movw	r22, r12
    8a46:	cd b7       	in	r28, 0x3d	; 61
    8a48:	de b7       	in	r29, 0x3e	; 62
    8a4a:	e2 e1       	ldi	r30, 0x12	; 18
    8a4c:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00008a50 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8a50:	4a e0       	ldi	r20, 0x0A	; 10
    8a52:	50 e0       	ldi	r21, 0x00	; 0
    8a54:	60 e0       	ldi	r22, 0x00	; 0
    8a56:	70 e0       	ldi	r23, 0x00	; 0
    8a58:	9d df       	rcall	.-198    	; 0x8994 <strtol>
    return((int)num);
}
    8a5a:	cb 01       	movw	r24, r22
    8a5c:	08 95       	ret

00008a5e <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8a5e:	4a e0       	ldi	r20, 0x0A	; 10
    8a60:	50 e0       	ldi	r21, 0x00	; 0
    8a62:	60 e0       	ldi	r22, 0x00	; 0
    8a64:	70 e0       	ldi	r23, 0x00	; 0
    8a66:	96 cf       	rjmp	.-212    	; 0x8994 <strtol>
    return(num);
}
    8a68:	08 95       	ret

00008a6a <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8a6a:	fc 01       	movw	r30, r24
    8a6c:	62 81       	ldd	r22, Z+2	; 0x02
    8a6e:	73 81       	ldd	r23, Z+3	; 0x03
    8a70:	cb 01       	movw	r24, r22
    8a72:	a0 e0       	ldi	r26, 0x00	; 0
    8a74:	b0 e0       	ldi	r27, 0x00	; 0
    8a76:	ba 2f       	mov	r27, r26
    8a78:	a9 2f       	mov	r26, r25
    8a7a:	98 2f       	mov	r25, r24
    8a7c:	88 27       	eor	r24, r24
    8a7e:	21 81       	ldd	r18, Z+1	; 0x01
    8a80:	82 2b       	or	r24, r18
    8a82:	ba 2f       	mov	r27, r26
    8a84:	a9 2f       	mov	r26, r25
    8a86:	98 2f       	mov	r25, r24
    8a88:	88 27       	eor	r24, r24
    8a8a:	20 81       	ld	r18, Z
    8a8c:	bc 01       	movw	r22, r24
    8a8e:	cd 01       	movw	r24, r26
    8a90:	62 2b       	or	r22, r18
    8a92:	08 95       	ret

00008a94 <st_dword>:
    8a94:	fc 01       	movw	r30, r24
    8a96:	40 83       	st	Z, r20
    8a98:	51 83       	std	Z+1, r21	; 0x01
    8a9a:	62 83       	std	Z+2, r22	; 0x02
    8a9c:	73 83       	std	Z+3, r23	; 0x03
    8a9e:	08 95       	ret

00008aa0 <mem_set>:
    8aa0:	48 0f       	add	r20, r24
    8aa2:	59 1f       	adc	r21, r25
    8aa4:	fc 01       	movw	r30, r24
    8aa6:	61 93       	st	Z+, r22
    8aa8:	cf 01       	movw	r24, r30
    8aaa:	e4 17       	cp	r30, r20
    8aac:	f5 07       	cpc	r31, r21
    8aae:	d1 f7       	brne	.-12     	; 0x8aa4 <mem_set+0x4>
    8ab0:	08 95       	ret

00008ab2 <mem_cmp>:
    8ab2:	dc 01       	movw	r26, r24
    8ab4:	fb 01       	movw	r30, r22
    8ab6:	2d 91       	ld	r18, X+
    8ab8:	81 91       	ld	r24, Z+
    8aba:	30 e0       	ldi	r19, 0x00	; 0
    8abc:	b9 01       	movw	r22, r18
    8abe:	68 1b       	sub	r22, r24
    8ac0:	71 09       	sbc	r23, r1
    8ac2:	cb 01       	movw	r24, r22
    8ac4:	41 50       	subi	r20, 0x01	; 1
    8ac6:	51 09       	sbc	r21, r1
    8ac8:	11 f0       	breq	.+4      	; 0x8ace <mem_cmp+0x1c>
    8aca:	00 97       	sbiw	r24, 0x00	; 0
    8acc:	a1 f3       	breq	.-24     	; 0x8ab6 <mem_cmp+0x4>
    8ace:	08 95       	ret

00008ad0 <tchar2uni>:
    8ad0:	0f 93       	push	r16
    8ad2:	1f 93       	push	r17
    8ad4:	fc 01       	movw	r30, r24
    8ad6:	a0 81       	ld	r26, Z
    8ad8:	b1 81       	ldd	r27, Z+1	; 0x01
    8ada:	fd 01       	movw	r30, r26
    8adc:	31 96       	adiw	r30, 0x01	; 1
    8ade:	4c 91       	ld	r20, X
    8ae0:	47 fd       	sbrc	r20, 7
    8ae2:	04 c0       	rjmp	.+8      	; 0x8aec <tchar2uni+0x1c>
    8ae4:	50 e0       	ldi	r21, 0x00	; 0
    8ae6:	60 e0       	ldi	r22, 0x00	; 0
    8ae8:	70 e0       	ldi	r23, 0x00	; 0
    8aea:	68 c0       	rjmp	.+208    	; 0x8bbc <tchar2uni+0xec>
    8aec:	24 2f       	mov	r18, r20
    8aee:	20 7e       	andi	r18, 0xE0	; 224
    8af0:	20 3c       	cpi	r18, 0xC0	; 192
    8af2:	39 f4       	brne	.+14     	; 0x8b02 <tchar2uni+0x32>
    8af4:	4f 71       	andi	r20, 0x1F	; 31
    8af6:	50 e0       	ldi	r21, 0x00	; 0
    8af8:	60 e0       	ldi	r22, 0x00	; 0
    8afa:	70 e0       	ldi	r23, 0x00	; 0
    8afc:	21 e0       	ldi	r18, 0x01	; 1
    8afe:	30 e0       	ldi	r19, 0x00	; 0
    8b00:	16 c0       	rjmp	.+44     	; 0x8b2e <tchar2uni+0x5e>
    8b02:	24 2f       	mov	r18, r20
    8b04:	20 7f       	andi	r18, 0xF0	; 240
    8b06:	20 3e       	cpi	r18, 0xE0	; 224
    8b08:	39 f4       	brne	.+14     	; 0x8b18 <tchar2uni+0x48>
    8b0a:	4f 70       	andi	r20, 0x0F	; 15
    8b0c:	50 e0       	ldi	r21, 0x00	; 0
    8b0e:	60 e0       	ldi	r22, 0x00	; 0
    8b10:	70 e0       	ldi	r23, 0x00	; 0
    8b12:	22 e0       	ldi	r18, 0x02	; 2
    8b14:	30 e0       	ldi	r19, 0x00	; 0
    8b16:	0b c0       	rjmp	.+22     	; 0x8b2e <tchar2uni+0x5e>
    8b18:	24 2f       	mov	r18, r20
    8b1a:	28 7f       	andi	r18, 0xF8	; 248
    8b1c:	20 3f       	cpi	r18, 0xF0	; 240
    8b1e:	09 f0       	breq	.+2      	; 0x8b22 <tchar2uni+0x52>
    8b20:	54 c0       	rjmp	.+168    	; 0x8bca <tchar2uni+0xfa>
    8b22:	47 70       	andi	r20, 0x07	; 7
    8b24:	50 e0       	ldi	r21, 0x00	; 0
    8b26:	60 e0       	ldi	r22, 0x00	; 0
    8b28:	70 e0       	ldi	r23, 0x00	; 0
    8b2a:	23 e0       	ldi	r18, 0x03	; 3
    8b2c:	30 e0       	ldi	r19, 0x00	; 0
    8b2e:	31 96       	adiw	r30, 0x01	; 1
    8b30:	df 01       	movw	r26, r30
    8b32:	11 97       	sbiw	r26, 0x01	; 1
    8b34:	ac 91       	ld	r26, X
    8b36:	ba 2f       	mov	r27, r26
    8b38:	b0 7c       	andi	r27, 0xC0	; 192
    8b3a:	b0 38       	cpi	r27, 0x80	; 128
    8b3c:	09 f0       	breq	.+2      	; 0x8b40 <tchar2uni+0x70>
    8b3e:	45 c0       	rjmp	.+138    	; 0x8bca <tchar2uni+0xfa>
    8b40:	b6 e0       	ldi	r27, 0x06	; 6
    8b42:	44 0f       	add	r20, r20
    8b44:	55 1f       	adc	r21, r21
    8b46:	66 1f       	adc	r22, r22
    8b48:	77 1f       	adc	r23, r23
    8b4a:	ba 95       	dec	r27
    8b4c:	d1 f7       	brne	.-12     	; 0x8b42 <tchar2uni+0x72>
    8b4e:	af 73       	andi	r26, 0x3F	; 63
    8b50:	4a 2b       	or	r20, r26
    8b52:	21 50       	subi	r18, 0x01	; 1
    8b54:	31 09       	sbc	r19, r1
    8b56:	59 f7       	brne	.-42     	; 0x8b2e <tchar2uni+0x5e>
    8b58:	8a 01       	movw	r16, r20
    8b5a:	9b 01       	movw	r18, r22
    8b5c:	00 58       	subi	r16, 0x80	; 128
    8b5e:	11 09       	sbc	r17, r1
    8b60:	21 09       	sbc	r18, r1
    8b62:	31 09       	sbc	r19, r1
    8b64:	00 38       	cpi	r16, 0x80	; 128
    8b66:	1f 4f       	sbci	r17, 0xFF	; 255
    8b68:	20 41       	sbci	r18, 0x10	; 16
    8b6a:	31 05       	cpc	r19, r1
    8b6c:	70 f5       	brcc	.+92     	; 0x8bca <tchar2uni+0xfa>
    8b6e:	8a 01       	movw	r16, r20
    8b70:	9b 01       	movw	r18, r22
    8b72:	18 5d       	subi	r17, 0xD8	; 216
    8b74:	21 09       	sbc	r18, r1
    8b76:	31 09       	sbc	r19, r1
    8b78:	01 15       	cp	r16, r1
    8b7a:	18 40       	sbci	r17, 0x08	; 8
    8b7c:	21 05       	cpc	r18, r1
    8b7e:	31 05       	cpc	r19, r1
    8b80:	20 f1       	brcs	.+72     	; 0x8bca <tchar2uni+0xfa>
    8b82:	41 15       	cp	r20, r1
    8b84:	51 05       	cpc	r21, r1
    8b86:	21 e0       	ldi	r18, 0x01	; 1
    8b88:	62 07       	cpc	r22, r18
    8b8a:	71 05       	cpc	r23, r1
    8b8c:	b8 f0       	brcs	.+46     	; 0x8bbc <tchar2uni+0xec>
    8b8e:	8a 01       	movw	r16, r20
    8b90:	9b 01       	movw	r18, r22
    8b92:	21 50       	subi	r18, 0x01	; 1
    8b94:	31 09       	sbc	r19, r1
    8b96:	a6 e0       	ldi	r26, 0x06	; 6
    8b98:	00 0f       	add	r16, r16
    8b9a:	11 1f       	adc	r17, r17
    8b9c:	22 1f       	adc	r18, r18
    8b9e:	33 1f       	adc	r19, r19
    8ba0:	aa 95       	dec	r26
    8ba2:	d1 f7       	brne	.-12     	; 0x8b98 <tchar2uni+0xc8>
    8ba4:	00 27       	eor	r16, r16
    8ba6:	11 27       	eor	r17, r17
    8ba8:	33 70       	andi	r19, 0x03	; 3
    8baa:	53 70       	andi	r21, 0x03	; 3
    8bac:	66 27       	eor	r22, r22
    8bae:	77 27       	eor	r23, r23
    8bb0:	5c 6d       	ori	r21, 0xDC	; 220
    8bb2:	78 6d       	ori	r23, 0xD8	; 216
    8bb4:	40 2b       	or	r20, r16
    8bb6:	51 2b       	or	r21, r17
    8bb8:	62 2b       	or	r22, r18
    8bba:	73 2b       	or	r23, r19
    8bbc:	dc 01       	movw	r26, r24
    8bbe:	ed 93       	st	X+, r30
    8bc0:	fc 93       	st	X, r31
    8bc2:	34 2f       	mov	r19, r20
    8bc4:	25 2f       	mov	r18, r21
    8bc6:	cb 01       	movw	r24, r22
    8bc8:	04 c0       	rjmp	.+8      	; 0x8bd2 <tchar2uni+0x102>
    8bca:	3f ef       	ldi	r19, 0xFF	; 255
    8bcc:	2f ef       	ldi	r18, 0xFF	; 255
    8bce:	8f ef       	ldi	r24, 0xFF	; 255
    8bd0:	9f ef       	ldi	r25, 0xFF	; 255
    8bd2:	63 2f       	mov	r22, r19
    8bd4:	72 2f       	mov	r23, r18
    8bd6:	1f 91       	pop	r17
    8bd8:	0f 91       	pop	r16
    8bda:	08 95       	ret

00008bdc <clst2sect>:
    8bdc:	0f 93       	push	r16
    8bde:	1f 93       	push	r17
    8be0:	fc 01       	movw	r30, r24
    8be2:	9a 01       	movw	r18, r20
    8be4:	ab 01       	movw	r20, r22
    8be6:	22 50       	subi	r18, 0x02	; 2
    8be8:	31 09       	sbc	r19, r1
    8bea:	41 09       	sbc	r20, r1
    8bec:	51 09       	sbc	r21, r1
    8bee:	81 8d       	ldd	r24, Z+25	; 0x19
    8bf0:	92 8d       	ldd	r25, Z+26	; 0x1a
    8bf2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8bf4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8bf6:	02 97       	sbiw	r24, 0x02	; 2
    8bf8:	a1 09       	sbc	r26, r1
    8bfa:	b1 09       	sbc	r27, r1
    8bfc:	28 17       	cp	r18, r24
    8bfe:	39 07       	cpc	r19, r25
    8c00:	4a 07       	cpc	r20, r26
    8c02:	5b 07       	cpc	r21, r27
    8c04:	68 f4       	brcc	.+26     	; 0x8c20 <clst2sect+0x44>
    8c06:	a1 85       	ldd	r26, Z+9	; 0x09
    8c08:	b2 85       	ldd	r27, Z+10	; 0x0a
    8c0a:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    8c0e:	05 a5       	ldd	r16, Z+45	; 0x2d
    8c10:	16 a5       	ldd	r17, Z+46	; 0x2e
    8c12:	27 a5       	ldd	r18, Z+47	; 0x2f
    8c14:	30 a9       	ldd	r19, Z+48	; 0x30
    8c16:	60 0f       	add	r22, r16
    8c18:	71 1f       	adc	r23, r17
    8c1a:	82 1f       	adc	r24, r18
    8c1c:	93 1f       	adc	r25, r19
    8c1e:	03 c0       	rjmp	.+6      	; 0x8c26 <clst2sect+0x4a>
    8c20:	60 e0       	ldi	r22, 0x00	; 0
    8c22:	70 e0       	ldi	r23, 0x00	; 0
    8c24:	cb 01       	movw	r24, r22
    8c26:	1f 91       	pop	r17
    8c28:	0f 91       	pop	r16
    8c2a:	08 95       	ret

00008c2c <clmt_clust>:
    8c2c:	cf 93       	push	r28
    8c2e:	df 93       	push	r29
    8c30:	fc 01       	movw	r30, r24
    8c32:	c2 a1       	ldd	r28, Z+34	; 0x22
    8c34:	d3 a1       	ldd	r29, Z+35	; 0x23
    8c36:	24 96       	adiw	r28, 0x04	; 4
    8c38:	cb 01       	movw	r24, r22
    8c3a:	ba 01       	movw	r22, r20
    8c3c:	29 e0       	ldi	r18, 0x09	; 9
    8c3e:	96 95       	lsr	r25
    8c40:	87 95       	ror	r24
    8c42:	77 95       	ror	r23
    8c44:	67 95       	ror	r22
    8c46:	2a 95       	dec	r18
    8c48:	d1 f7       	brne	.-12     	; 0x8c3e <clmt_clust+0x12>
    8c4a:	01 90       	ld	r0, Z+
    8c4c:	f0 81       	ld	r31, Z
    8c4e:	e0 2d       	mov	r30, r0
    8c50:	21 85       	ldd	r18, Z+9	; 0x09
    8c52:	32 85       	ldd	r19, Z+10	; 0x0a
    8c54:	40 e0       	ldi	r20, 0x00	; 0
    8c56:	50 e0       	ldi	r21, 0x00	; 0
    8c58:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    8c5c:	88 81       	ld	r24, Y
    8c5e:	99 81       	ldd	r25, Y+1	; 0x01
    8c60:	aa 81       	ldd	r26, Y+2	; 0x02
    8c62:	bb 81       	ldd	r27, Y+3	; 0x03
    8c64:	00 97       	sbiw	r24, 0x00	; 0
    8c66:	a1 05       	cpc	r26, r1
    8c68:	b1 05       	cpc	r27, r1
    8c6a:	b1 f0       	breq	.+44     	; 0x8c98 <clmt_clust+0x6c>
    8c6c:	28 17       	cp	r18, r24
    8c6e:	39 07       	cpc	r19, r25
    8c70:	4a 07       	cpc	r20, r26
    8c72:	5b 07       	cpc	r21, r27
    8c74:	30 f0       	brcs	.+12     	; 0x8c82 <clmt_clust+0x56>
    8c76:	28 1b       	sub	r18, r24
    8c78:	39 0b       	sbc	r19, r25
    8c7a:	4a 0b       	sbc	r20, r26
    8c7c:	5b 0b       	sbc	r21, r27
    8c7e:	28 96       	adiw	r28, 0x08	; 8
    8c80:	ed cf       	rjmp	.-38     	; 0x8c5c <clmt_clust+0x30>
    8c82:	8c 81       	ldd	r24, Y+4	; 0x04
    8c84:	9d 81       	ldd	r25, Y+5	; 0x05
    8c86:	ae 81       	ldd	r26, Y+6	; 0x06
    8c88:	bf 81       	ldd	r27, Y+7	; 0x07
    8c8a:	bc 01       	movw	r22, r24
    8c8c:	cd 01       	movw	r24, r26
    8c8e:	62 0f       	add	r22, r18
    8c90:	73 1f       	adc	r23, r19
    8c92:	84 1f       	adc	r24, r20
    8c94:	95 1f       	adc	r25, r21
    8c96:	03 c0       	rjmp	.+6      	; 0x8c9e <clmt_clust+0x72>
    8c98:	60 e0       	ldi	r22, 0x00	; 0
    8c9a:	70 e0       	ldi	r23, 0x00	; 0
    8c9c:	cb 01       	movw	r24, r22
    8c9e:	df 91       	pop	r29
    8ca0:	cf 91       	pop	r28
    8ca2:	08 95       	ret

00008ca4 <sum_sfn>:
    8ca4:	fc 01       	movw	r30, r24
    8ca6:	9c 01       	movw	r18, r24
    8ca8:	25 5f       	subi	r18, 0xF5	; 245
    8caa:	3f 4f       	sbci	r19, 0xFF	; 255
    8cac:	80 e0       	ldi	r24, 0x00	; 0
    8cae:	98 2f       	mov	r25, r24
    8cb0:	90 fb       	bst	r25, 0
    8cb2:	97 95       	ror	r25
    8cb4:	97 f9       	bld	r25, 7
    8cb6:	81 91       	ld	r24, Z+
    8cb8:	89 0f       	add	r24, r25
    8cba:	e2 17       	cp	r30, r18
    8cbc:	f3 07       	cpc	r31, r19
    8cbe:	b9 f7       	brne	.-18     	; 0x8cae <sum_sfn+0xa>
    8cc0:	08 95       	ret

00008cc2 <get_ldnumber>:
    8cc2:	cf 93       	push	r28
    8cc4:	df 93       	push	r29
    8cc6:	dc 01       	movw	r26, r24
    8cc8:	ed 91       	ld	r30, X+
    8cca:	fc 91       	ld	r31, X
    8ccc:	11 97       	sbiw	r26, 0x01	; 1
    8cce:	30 97       	sbiw	r30, 0x00	; 0
    8cd0:	f9 f0       	breq	.+62     	; 0x8d10 <get_ldnumber+0x4e>
    8cd2:	9f 01       	movw	r18, r30
    8cd4:	2f 5f       	subi	r18, 0xFF	; 255
    8cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    8cd8:	e9 01       	movw	r28, r18
    8cda:	21 97       	sbiw	r28, 0x01	; 1
    8cdc:	88 81       	ld	r24, Y
    8cde:	80 32       	cpi	r24, 0x20	; 32
    8ce0:	18 f0       	brcs	.+6      	; 0x8ce8 <get_ldnumber+0x26>
    8ce2:	8a 33       	cpi	r24, 0x3A	; 58
    8ce4:	b9 f7       	brne	.-18     	; 0x8cd4 <get_ldnumber+0x12>
    8ce6:	04 c0       	rjmp	.+8      	; 0x8cf0 <get_ldnumber+0x2e>
    8ce8:	80 91 10 18 	lds	r24, 0x1810	; 0x801810 <CurrVol>
    8cec:	90 e0       	ldi	r25, 0x00	; 0
    8cee:	12 c0       	rjmp	.+36     	; 0x8d14 <get_ldnumber+0x52>
    8cf0:	90 81       	ld	r25, Z
    8cf2:	80 ed       	ldi	r24, 0xD0	; 208
    8cf4:	89 0f       	add	r24, r25
    8cf6:	8a 30       	cpi	r24, 0x0A	; 10
    8cf8:	58 f4       	brcc	.+22     	; 0x8d10 <get_ldnumber+0x4e>
    8cfa:	32 96       	adiw	r30, 0x02	; 2
    8cfc:	2e 17       	cp	r18, r30
    8cfe:	3f 07       	cpc	r19, r31
    8d00:	39 f4       	brne	.+14     	; 0x8d10 <get_ldnumber+0x4e>
    8d02:	90 33       	cpi	r25, 0x30	; 48
    8d04:	29 f4       	brne	.+10     	; 0x8d10 <get_ldnumber+0x4e>
    8d06:	2d 93       	st	X+, r18
    8d08:	3c 93       	st	X, r19
    8d0a:	80 e0       	ldi	r24, 0x00	; 0
    8d0c:	90 e0       	ldi	r25, 0x00	; 0
    8d0e:	02 c0       	rjmp	.+4      	; 0x8d14 <get_ldnumber+0x52>
    8d10:	8f ef       	ldi	r24, 0xFF	; 255
    8d12:	9f ef       	ldi	r25, 0xFF	; 255
    8d14:	df 91       	pop	r29
    8d16:	cf 91       	pop	r28
    8d18:	08 95       	ret

00008d1a <validate>:
    8d1a:	0f 93       	push	r16
    8d1c:	1f 93       	push	r17
    8d1e:	cf 93       	push	r28
    8d20:	df 93       	push	r29
    8d22:	ec 01       	movw	r28, r24
    8d24:	8b 01       	movw	r16, r22
    8d26:	89 2b       	or	r24, r25
    8d28:	f9 f0       	breq	.+62     	; 0x8d68 <validate+0x4e>
    8d2a:	e8 81       	ld	r30, Y
    8d2c:	f9 81       	ldd	r31, Y+1	; 0x01
    8d2e:	30 97       	sbiw	r30, 0x00	; 0
    8d30:	d9 f0       	breq	.+54     	; 0x8d68 <validate+0x4e>
    8d32:	80 81       	ld	r24, Z
    8d34:	88 23       	and	r24, r24
    8d36:	c1 f0       	breq	.+48     	; 0x8d68 <validate+0x4e>
    8d38:	2a 81       	ldd	r18, Y+2	; 0x02
    8d3a:	3b 81       	ldd	r19, Y+3	; 0x03
    8d3c:	85 81       	ldd	r24, Z+5	; 0x05
    8d3e:	96 81       	ldd	r25, Z+6	; 0x06
    8d40:	28 17       	cp	r18, r24
    8d42:	39 07       	cpc	r19, r25
    8d44:	89 f4       	brne	.+34     	; 0x8d68 <validate+0x4e>
    8d46:	81 81       	ldd	r24, Z+1	; 0x01
    8d48:	0e 94 4d 68 	call	0xd09a	; 0xd09a <disk_status>
    8d4c:	80 fd       	sbrc	r24, 0
    8d4e:	0c c0       	rjmp	.+24     	; 0x8d68 <validate+0x4e>
    8d50:	28 81       	ld	r18, Y
    8d52:	39 81       	ldd	r19, Y+1	; 0x01
    8d54:	80 e0       	ldi	r24, 0x00	; 0
    8d56:	90 e0       	ldi	r25, 0x00	; 0
    8d58:	f8 01       	movw	r30, r16
    8d5a:	31 83       	std	Z+1, r19	; 0x01
    8d5c:	20 83       	st	Z, r18
    8d5e:	df 91       	pop	r29
    8d60:	cf 91       	pop	r28
    8d62:	1f 91       	pop	r17
    8d64:	0f 91       	pop	r16
    8d66:	08 95       	ret
    8d68:	89 e0       	ldi	r24, 0x09	; 9
    8d6a:	90 e0       	ldi	r25, 0x00	; 0
    8d6c:	20 e0       	ldi	r18, 0x00	; 0
    8d6e:	30 e0       	ldi	r19, 0x00	; 0
    8d70:	f3 cf       	rjmp	.-26     	; 0x8d58 <validate+0x3e>

00008d72 <mem_cpy.part.0>:
    8d72:	fb 01       	movw	r30, r22
    8d74:	48 0f       	add	r20, r24
    8d76:	59 1f       	adc	r21, r25
    8d78:	21 91       	ld	r18, Z+
    8d7a:	dc 01       	movw	r26, r24
    8d7c:	2d 93       	st	X+, r18
    8d7e:	cd 01       	movw	r24, r26
    8d80:	a4 17       	cp	r26, r20
    8d82:	b5 07       	cpc	r27, r21
    8d84:	c9 f7       	brne	.-14     	; 0x8d78 <mem_cpy.part.0+0x6>
    8d86:	08 95       	ret

00008d88 <put_utf>:
    8d88:	0f 93       	push	r16
    8d8a:	1f 93       	push	r17
    8d8c:	fa 01       	movw	r30, r20
    8d8e:	60 38       	cpi	r22, 0x80	; 128
    8d90:	71 05       	cpc	r23, r1
    8d92:	81 05       	cpc	r24, r1
    8d94:	91 05       	cpc	r25, r1
    8d96:	30 f4       	brcc	.+12     	; 0x8da4 <put_utf+0x1c>
    8d98:	23 2b       	or	r18, r19
    8d9a:	09 f4       	brne	.+2      	; 0x8d9e <put_utf+0x16>
    8d9c:	9e c0       	rjmp	.+316    	; 0x8eda <put_utf+0x152>
    8d9e:	60 83       	st	Z, r22
    8da0:	81 e0       	ldi	r24, 0x01	; 1
    8da2:	9c c0       	rjmp	.+312    	; 0x8edc <put_utf+0x154>
    8da4:	61 15       	cp	r22, r1
    8da6:	48 e0       	ldi	r20, 0x08	; 8
    8da8:	74 07       	cpc	r23, r20
    8daa:	81 05       	cpc	r24, r1
    8dac:	91 05       	cpc	r25, r1
    8dae:	a0 f4       	brcc	.+40     	; 0x8dd8 <put_utf+0x50>
    8db0:	22 30       	cpi	r18, 0x02	; 2
    8db2:	31 05       	cpc	r19, r1
    8db4:	08 f4       	brcc	.+2      	; 0x8db8 <put_utf+0x30>
    8db6:	91 c0       	rjmp	.+290    	; 0x8eda <put_utf+0x152>
    8db8:	8b 01       	movw	r16, r22
    8dba:	9c 01       	movw	r18, r24
    8dbc:	76 e0       	ldi	r23, 0x06	; 6
    8dbe:	36 95       	lsr	r19
    8dc0:	27 95       	ror	r18
    8dc2:	17 95       	ror	r17
    8dc4:	07 95       	ror	r16
    8dc6:	7a 95       	dec	r23
    8dc8:	d1 f7       	brne	.-12     	; 0x8dbe <put_utf+0x36>
    8dca:	00 6c       	ori	r16, 0xC0	; 192
    8dcc:	00 83       	st	Z, r16
    8dce:	6f 73       	andi	r22, 0x3F	; 63
    8dd0:	60 68       	ori	r22, 0x80	; 128
    8dd2:	61 83       	std	Z+1, r22	; 0x01
    8dd4:	82 e0       	ldi	r24, 0x02	; 2
    8dd6:	82 c0       	rjmp	.+260    	; 0x8edc <put_utf+0x154>
    8dd8:	61 15       	cp	r22, r1
    8dda:	71 05       	cpc	r23, r1
    8ddc:	41 e0       	ldi	r20, 0x01	; 1
    8dde:	84 07       	cpc	r24, r20
    8de0:	91 05       	cpc	r25, r1
    8de2:	58 f5       	brcc	.+86     	; 0x8e3a <put_utf+0xb2>
    8de4:	23 30       	cpi	r18, 0x03	; 3
    8de6:	31 05       	cpc	r19, r1
    8de8:	08 f4       	brcc	.+2      	; 0x8dec <put_utf+0x64>
    8dea:	77 c0       	rjmp	.+238    	; 0x8eda <put_utf+0x152>
    8dec:	8b 01       	movw	r16, r22
    8dee:	9c 01       	movw	r18, r24
    8df0:	18 5d       	subi	r17, 0xD8	; 216
    8df2:	21 09       	sbc	r18, r1
    8df4:	31 09       	sbc	r19, r1
    8df6:	01 15       	cp	r16, r1
    8df8:	18 40       	sbci	r17, 0x08	; 8
    8dfa:	21 05       	cpc	r18, r1
    8dfc:	31 05       	cpc	r19, r1
    8dfe:	08 f4       	brcc	.+2      	; 0x8e02 <put_utf+0x7a>
    8e00:	6c c0       	rjmp	.+216    	; 0x8eda <put_utf+0x152>
    8e02:	8b 01       	movw	r16, r22
    8e04:	9c 01       	movw	r18, r24
    8e06:	4c e0       	ldi	r20, 0x0C	; 12
    8e08:	36 95       	lsr	r19
    8e0a:	27 95       	ror	r18
    8e0c:	17 95       	ror	r17
    8e0e:	07 95       	ror	r16
    8e10:	4a 95       	dec	r20
    8e12:	d1 f7       	brne	.-12     	; 0x8e08 <put_utf+0x80>
    8e14:	00 6e       	ori	r16, 0xE0	; 224
    8e16:	00 83       	st	Z, r16
    8e18:	8b 01       	movw	r16, r22
    8e1a:	9c 01       	movw	r18, r24
    8e1c:	56 e0       	ldi	r21, 0x06	; 6
    8e1e:	36 95       	lsr	r19
    8e20:	27 95       	ror	r18
    8e22:	17 95       	ror	r17
    8e24:	07 95       	ror	r16
    8e26:	5a 95       	dec	r21
    8e28:	d1 f7       	brne	.-12     	; 0x8e1e <put_utf+0x96>
    8e2a:	0f 73       	andi	r16, 0x3F	; 63
    8e2c:	00 68       	ori	r16, 0x80	; 128
    8e2e:	01 83       	std	Z+1, r16	; 0x01
    8e30:	6f 73       	andi	r22, 0x3F	; 63
    8e32:	60 68       	ori	r22, 0x80	; 128
    8e34:	62 83       	std	Z+2, r22	; 0x02
    8e36:	83 e0       	ldi	r24, 0x03	; 3
    8e38:	51 c0       	rjmp	.+162    	; 0x8edc <put_utf+0x154>
    8e3a:	24 30       	cpi	r18, 0x04	; 4
    8e3c:	31 05       	cpc	r19, r1
    8e3e:	08 f4       	brcc	.+2      	; 0x8e42 <put_utf+0xba>
    8e40:	4c c0       	rjmp	.+152    	; 0x8eda <put_utf+0x152>
    8e42:	8b 01       	movw	r16, r22
    8e44:	9c 01       	movw	r18, r24
    8e46:	00 27       	eor	r16, r16
    8e48:	11 27       	eor	r17, r17
    8e4a:	38 5d       	subi	r19, 0xD8	; 216
    8e4c:	b6 e0       	ldi	r27, 0x06	; 6
    8e4e:	36 95       	lsr	r19
    8e50:	27 95       	ror	r18
    8e52:	17 95       	ror	r17
    8e54:	07 95       	ror	r16
    8e56:	ba 95       	dec	r27
    8e58:	d1 f7       	brne	.-12     	; 0x8e4e <put_utf+0xc6>
    8e5a:	01 15       	cp	r16, r1
    8e5c:	11 05       	cpc	r17, r1
    8e5e:	40 e1       	ldi	r20, 0x10	; 16
    8e60:	24 07       	cpc	r18, r20
    8e62:	31 05       	cpc	r19, r1
    8e64:	d0 f5       	brcc	.+116    	; 0x8eda <put_utf+0x152>
    8e66:	dc 01       	movw	r26, r24
    8e68:	cb 01       	movw	r24, r22
    8e6a:	aa 27       	eor	r26, r26
    8e6c:	bb 27       	eor	r27, r27
    8e6e:	9c 5d       	subi	r25, 0xDC	; 220
    8e70:	a1 09       	sbc	r26, r1
    8e72:	b1 09       	sbc	r27, r1
    8e74:	81 15       	cp	r24, r1
    8e76:	44 e0       	ldi	r20, 0x04	; 4
    8e78:	94 07       	cpc	r25, r20
    8e7a:	a1 05       	cpc	r26, r1
    8e7c:	b1 05       	cpc	r27, r1
    8e7e:	68 f5       	brcc	.+90     	; 0x8eda <put_utf+0x152>
    8e80:	80 2b       	or	r24, r16
    8e82:	91 2b       	or	r25, r17
    8e84:	a2 2b       	or	r26, r18
    8e86:	b3 2b       	or	r27, r19
    8e88:	11 96       	adiw	r26, 0x01	; 1
    8e8a:	ac 01       	movw	r20, r24
    8e8c:	bd 01       	movw	r22, r26
    8e8e:	22 e1       	ldi	r18, 0x12	; 18
    8e90:	76 95       	lsr	r23
    8e92:	67 95       	ror	r22
    8e94:	57 95       	ror	r21
    8e96:	47 95       	ror	r20
    8e98:	2a 95       	dec	r18
    8e9a:	d1 f7       	brne	.-12     	; 0x8e90 <put_utf+0x108>
    8e9c:	40 6f       	ori	r20, 0xF0	; 240
    8e9e:	40 83       	st	Z, r20
    8ea0:	ac 01       	movw	r20, r24
    8ea2:	bd 01       	movw	r22, r26
    8ea4:	3c e0       	ldi	r19, 0x0C	; 12
    8ea6:	76 95       	lsr	r23
    8ea8:	67 95       	ror	r22
    8eaa:	57 95       	ror	r21
    8eac:	47 95       	ror	r20
    8eae:	3a 95       	dec	r19
    8eb0:	d1 f7       	brne	.-12     	; 0x8ea6 <put_utf+0x11e>
    8eb2:	4f 73       	andi	r20, 0x3F	; 63
    8eb4:	40 68       	ori	r20, 0x80	; 128
    8eb6:	41 83       	std	Z+1, r20	; 0x01
    8eb8:	ac 01       	movw	r20, r24
    8eba:	bd 01       	movw	r22, r26
    8ebc:	a6 e0       	ldi	r26, 0x06	; 6
    8ebe:	76 95       	lsr	r23
    8ec0:	67 95       	ror	r22
    8ec2:	57 95       	ror	r21
    8ec4:	47 95       	ror	r20
    8ec6:	aa 95       	dec	r26
    8ec8:	d1 f7       	brne	.-12     	; 0x8ebe <put_utf+0x136>
    8eca:	4f 73       	andi	r20, 0x3F	; 63
    8ecc:	40 68       	ori	r20, 0x80	; 128
    8ece:	42 83       	std	Z+2, r20	; 0x02
    8ed0:	8f 73       	andi	r24, 0x3F	; 63
    8ed2:	80 68       	ori	r24, 0x80	; 128
    8ed4:	83 83       	std	Z+3, r24	; 0x03
    8ed6:	84 e0       	ldi	r24, 0x04	; 4
    8ed8:	01 c0       	rjmp	.+2      	; 0x8edc <put_utf+0x154>
    8eda:	80 e0       	ldi	r24, 0x00	; 0
    8edc:	1f 91       	pop	r17
    8ede:	0f 91       	pop	r16
    8ee0:	08 95       	ret

00008ee2 <get_fileinfo>:
    8ee2:	a0 e0       	ldi	r26, 0x00	; 0
    8ee4:	b0 e0       	ldi	r27, 0x00	; 0
    8ee6:	e7 e7       	ldi	r30, 0x77	; 119
    8ee8:	f7 e4       	ldi	r31, 0x47	; 71
    8eea:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    8eee:	fc 01       	movw	r30, r24
    8ef0:	60 80       	ld	r6, Z
    8ef2:	71 80       	ldd	r7, Z+1	; 0x01
    8ef4:	fb 01       	movw	r30, r22
    8ef6:	16 8a       	std	Z+22, r1	; 0x16
    8ef8:	fc 01       	movw	r30, r24
    8efa:	06 89       	ldd	r16, Z+22	; 0x16
    8efc:	17 89       	ldd	r17, Z+23	; 0x17
    8efe:	20 8d       	ldd	r18, Z+24	; 0x18
    8f00:	31 8d       	ldd	r19, Z+25	; 0x19
    8f02:	01 15       	cp	r16, r1
    8f04:	11 05       	cpc	r17, r1
    8f06:	21 05       	cpc	r18, r1
    8f08:	31 05       	cpc	r19, r1
    8f0a:	09 f4       	brne	.+2      	; 0x8f0e <get_fileinfo+0x2c>
    8f0c:	f5 c0       	rjmp	.+490    	; 0x90f8 <get_fileinfo+0x216>
    8f0e:	eb 01       	movw	r28, r22
    8f10:	8c 01       	movw	r16, r24
    8f12:	80 a5       	ldd	r24, Z+40	; 0x28
    8f14:	91 a5       	ldd	r25, Z+41	; 0x29
    8f16:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8f18:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8f1a:	8f 3f       	cpi	r24, 0xFF	; 255
    8f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    8f1e:	af 4f       	sbci	r26, 0xFF	; 255
    8f20:	bf 4f       	sbci	r27, 0xFF	; 255
    8f22:	09 f4       	brne	.+2      	; 0x8f26 <get_fileinfo+0x44>
    8f24:	48 c0       	rjmp	.+144    	; 0x8fb6 <get_fileinfo+0xd4>
    8f26:	a1 2c       	mov	r10, r1
    8f28:	b1 2c       	mov	r11, r1
    8f2a:	c1 2c       	mov	r12, r1
    8f2c:	d1 2c       	mov	r13, r1
    8f2e:	e1 2c       	mov	r14, r1
    8f30:	f1 2c       	mov	r15, r1
    8f32:	88 24       	eor	r8, r8
    8f34:	8a 94       	dec	r8
    8f36:	91 2c       	mov	r9, r1
    8f38:	f3 01       	movw	r30, r6
    8f3a:	83 85       	ldd	r24, Z+11	; 0x0b
    8f3c:	94 85       	ldd	r25, Z+12	; 0x0c
    8f3e:	fc 01       	movw	r30, r24
    8f40:	ea 0d       	add	r30, r10
    8f42:	fb 1d       	adc	r31, r11
    8f44:	80 81       	ld	r24, Z
    8f46:	91 81       	ldd	r25, Z+1	; 0x01
    8f48:	00 97       	sbiw	r24, 0x00	; 0
    8f4a:	69 f1       	breq	.+90     	; 0x8fa6 <get_fileinfo+0xc4>
    8f4c:	c1 14       	cp	r12, r1
    8f4e:	d1 04       	cpc	r13, r1
    8f50:	29 f4       	brne	.+10     	; 0x8f5c <get_fileinfo+0x7a>
    8f52:	9c 01       	movw	r18, r24
    8f54:	38 5d       	subi	r19, 0xD8	; 216
    8f56:	21 15       	cp	r18, r1
    8f58:	38 40       	sbci	r19, 0x08	; 8
    8f5a:	f0 f0       	brcs	.+60     	; 0x8f98 <get_fileinfo+0xb6>
    8f5c:	a7 01       	movw	r20, r14
    8f5e:	4a 5e       	subi	r20, 0xEA	; 234
    8f60:	5f 4f       	sbci	r21, 0xFF	; 255
    8f62:	4c 0f       	add	r20, r28
    8f64:	5d 1f       	adc	r21, r29
    8f66:	16 01       	movw	r2, r12
    8f68:	41 2c       	mov	r4, r1
    8f6a:	51 2c       	mov	r5, r1
    8f6c:	21 01       	movw	r4, r2
    8f6e:	33 24       	eor	r3, r3
    8f70:	22 24       	eor	r2, r2
    8f72:	a0 e0       	ldi	r26, 0x00	; 0
    8f74:	b0 e0       	ldi	r27, 0x00	; 0
    8f76:	bc 01       	movw	r22, r24
    8f78:	cd 01       	movw	r24, r26
    8f7a:	62 29       	or	r22, r2
    8f7c:	73 29       	or	r23, r3
    8f7e:	84 29       	or	r24, r4
    8f80:	95 29       	or	r25, r5
    8f82:	94 01       	movw	r18, r8
    8f84:	2e 19       	sub	r18, r14
    8f86:	3f 09       	sbc	r19, r15
    8f88:	ff de       	rcall	.-514    	; 0x8d88 <put_utf>
    8f8a:	90 e0       	ldi	r25, 0x00	; 0
    8f8c:	00 97       	sbiw	r24, 0x00	; 0
    8f8e:	49 f0       	breq	.+18     	; 0x8fa2 <get_fileinfo+0xc0>
    8f90:	e8 0e       	add	r14, r24
    8f92:	f9 1e       	adc	r15, r25
    8f94:	80 e0       	ldi	r24, 0x00	; 0
    8f96:	90 e0       	ldi	r25, 0x00	; 0
    8f98:	e2 e0       	ldi	r30, 0x02	; 2
    8f9a:	ae 0e       	add	r10, r30
    8f9c:	b1 1c       	adc	r11, r1
    8f9e:	6c 01       	movw	r12, r24
    8fa0:	cb cf       	rjmp	.-106    	; 0x8f38 <get_fileinfo+0x56>
    8fa2:	e1 2c       	mov	r14, r1
    8fa4:	f1 2c       	mov	r15, r1
    8fa6:	cd 28       	or	r12, r13
    8fa8:	11 f0       	breq	.+4      	; 0x8fae <get_fileinfo+0xcc>
    8faa:	e1 2c       	mov	r14, r1
    8fac:	f1 2c       	mov	r15, r1
    8fae:	fe 01       	movw	r30, r28
    8fb0:	ee 0d       	add	r30, r14
    8fb2:	ff 1d       	adc	r31, r15
    8fb4:	16 8a       	std	Z+22, r1	; 0x16
    8fb6:	e1 2c       	mov	r14, r1
    8fb8:	f1 2c       	mov	r15, r1
    8fba:	80 e0       	ldi	r24, 0x00	; 0
    8fbc:	90 e0       	ldi	r25, 0x00	; 0
    8fbe:	2c e0       	ldi	r18, 0x0C	; 12
    8fc0:	a2 2e       	mov	r10, r18
    8fc2:	b1 2c       	mov	r11, r1
    8fc4:	3e e2       	ldi	r19, 0x2E	; 46
    8fc6:	93 2e       	mov	r9, r19
    8fc8:	6c 01       	movw	r12, r24
    8fca:	ff ef       	ldi	r31, 0xFF	; 255
    8fcc:	cf 1a       	sub	r12, r31
    8fce:	df 0a       	sbc	r13, r31
    8fd0:	f8 01       	movw	r30, r16
    8fd2:	22 8d       	ldd	r18, Z+26	; 0x1a
    8fd4:	33 8d       	ldd	r19, Z+27	; 0x1b
    8fd6:	f9 01       	movw	r30, r18
    8fd8:	e8 0f       	add	r30, r24
    8fda:	f9 1f       	adc	r31, r25
    8fdc:	80 81       	ld	r24, Z
    8fde:	90 e0       	ldi	r25, 0x00	; 0
    8fe0:	80 32       	cpi	r24, 0x20	; 32
    8fe2:	91 05       	cpc	r25, r1
    8fe4:	71 f1       	breq	.+92     	; 0x9042 <get_fileinfo+0x160>
    8fe6:	85 30       	cpi	r24, 0x05	; 5
    8fe8:	91 05       	cpc	r25, r1
    8fea:	11 f4       	brne	.+4      	; 0x8ff0 <get_fileinfo+0x10e>
    8fec:	85 ee       	ldi	r24, 0xE5	; 229
    8fee:	90 e0       	ldi	r25, 0x00	; 0
    8ff0:	f9 e0       	ldi	r31, 0x09	; 9
    8ff2:	cf 16       	cp	r12, r31
    8ff4:	d1 04       	cpc	r13, r1
    8ff6:	59 f4       	brne	.+22     	; 0x900e <get_fileinfo+0x12c>
    8ff8:	2c e0       	ldi	r18, 0x0C	; 12
    8ffa:	e2 16       	cp	r14, r18
    8ffc:	f1 04       	cpc	r15, r1
    8ffe:	38 f4       	brcc	.+14     	; 0x900e <get_fileinfo+0x12c>
    9000:	fe 01       	movw	r30, r28
    9002:	ee 0d       	add	r30, r14
    9004:	ff 1d       	adc	r31, r15
    9006:	91 86       	std	Z+9, r9	; 0x09
    9008:	f7 01       	movw	r30, r14
    900a:	31 96       	adiw	r30, 0x01	; 1
    900c:	7f 01       	movw	r14, r30
    900e:	65 eb       	ldi	r22, 0xB5	; 181
    9010:	71 e0       	ldi	r23, 0x01	; 1
    9012:	0e 94 d6 67 	call	0xcfac	; 0xcfac <ff_oem2uni>
    9016:	00 97       	sbiw	r24, 0x00	; 0
    9018:	19 f4       	brne	.+6      	; 0x9020 <get_fileinfo+0x13e>
    901a:	e1 2c       	mov	r14, r1
    901c:	f1 2c       	mov	r15, r1
    901e:	16 c0       	rjmp	.+44     	; 0x904c <get_fileinfo+0x16a>
    9020:	a7 01       	movw	r20, r14
    9022:	47 5f       	subi	r20, 0xF7	; 247
    9024:	5f 4f       	sbci	r21, 0xFF	; 255
    9026:	4c 0f       	add	r20, r28
    9028:	5d 1f       	adc	r21, r29
    902a:	bc 01       	movw	r22, r24
    902c:	80 e0       	ldi	r24, 0x00	; 0
    902e:	90 e0       	ldi	r25, 0x00	; 0
    9030:	95 01       	movw	r18, r10
    9032:	2e 19       	sub	r18, r14
    9034:	3f 09       	sbc	r19, r15
    9036:	a8 de       	rcall	.-688    	; 0x8d88 <put_utf>
    9038:	90 e0       	ldi	r25, 0x00	; 0
    903a:	00 97       	sbiw	r24, 0x00	; 0
    903c:	71 f3       	breq	.-36     	; 0x901a <get_fileinfo+0x138>
    903e:	e8 0e       	add	r14, r24
    9040:	f9 1e       	adc	r15, r25
    9042:	c6 01       	movw	r24, r12
    9044:	8b 30       	cpi	r24, 0x0B	; 11
    9046:	91 05       	cpc	r25, r1
    9048:	09 f0       	breq	.+2      	; 0x904c <get_fileinfo+0x16a>
    904a:	be cf       	rjmp	.-132    	; 0x8fc8 <get_fileinfo+0xe6>
    904c:	fe 01       	movw	r30, r28
    904e:	ee 0d       	add	r30, r14
    9050:	ff 1d       	adc	r31, r15
    9052:	11 86       	std	Z+9, r1	; 0x09
    9054:	8e 89       	ldd	r24, Y+22	; 0x16
    9056:	81 11       	cpse	r24, r1
    9058:	36 c0       	rjmp	.+108    	; 0x90c6 <get_fileinfo+0x1e4>
    905a:	e1 14       	cp	r14, r1
    905c:	f1 04       	cpc	r15, r1
    905e:	31 f0       	breq	.+12     	; 0x906c <get_fileinfo+0x18a>
    9060:	de 01       	movw	r26, r28
    9062:	19 96       	adiw	r26, 0x09	; 9
    9064:	58 e0       	ldi	r21, 0x08	; 8
    9066:	20 e0       	ldi	r18, 0x00	; 0
    9068:	30 e0       	ldi	r19, 0x00	; 0
    906a:	14 c0       	rjmp	.+40     	; 0x9094 <get_fileinfo+0x1b2>
    906c:	8f e3       	ldi	r24, 0x3F	; 63
    906e:	8e 8b       	std	Y+22, r24	; 0x16
    9070:	21 e0       	ldi	r18, 0x01	; 1
    9072:	30 e0       	ldi	r19, 0x00	; 0
    9074:	1c c0       	rjmp	.+56     	; 0x90ae <get_fileinfo+0x1cc>
    9076:	90 e0       	ldi	r25, 0x00	; 0
    9078:	8e 32       	cpi	r24, 0x2E	; 46
    907a:	91 05       	cpc	r25, r1
    907c:	09 f4       	brne	.+2      	; 0x9080 <get_fileinfo+0x19e>
    907e:	50 e1       	ldi	r21, 0x10	; 16
    9080:	bc 01       	movw	r22, r24
    9082:	61 54       	subi	r22, 0x41	; 65
    9084:	71 09       	sbc	r23, r1
    9086:	6a 31       	cpi	r22, 0x1A	; 26
    9088:	71 05       	cpc	r23, r1
    908a:	40 f0       	brcs	.+16     	; 0x909c <get_fileinfo+0x1ba>
    908c:	fd 01       	movw	r30, r26
    908e:	84 87       	std	Z+12, r24	; 0x0c
    9090:	2f 5f       	subi	r18, 0xFF	; 255
    9092:	3f 4f       	sbci	r19, 0xFF	; 255
    9094:	8d 91       	ld	r24, X+
    9096:	81 11       	cpse	r24, r1
    9098:	ee cf       	rjmp	.-36     	; 0x9076 <get_fileinfo+0x194>
    909a:	09 c0       	rjmp	.+18     	; 0x90ae <get_fileinfo+0x1cc>
    909c:	f8 01       	movw	r30, r16
    909e:	62 8d       	ldd	r22, Z+26	; 0x1a
    90a0:	73 8d       	ldd	r23, Z+27	; 0x1b
    90a2:	fb 01       	movw	r30, r22
    90a4:	44 85       	ldd	r20, Z+12	; 0x0c
    90a6:	45 23       	and	r20, r21
    90a8:	89 f3       	breq	.-30     	; 0x908c <get_fileinfo+0x1aa>
    90aa:	80 96       	adiw	r24, 0x20	; 32
    90ac:	ef cf       	rjmp	.-34     	; 0x908c <get_fileinfo+0x1aa>
    90ae:	fe 01       	movw	r30, r28
    90b0:	e2 0f       	add	r30, r18
    90b2:	f3 1f       	adc	r31, r19
    90b4:	16 8a       	std	Z+22, r1	; 0x16
    90b6:	f8 01       	movw	r30, r16
    90b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    90ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    90bc:	fc 01       	movw	r30, r24
    90be:	84 85       	ldd	r24, Z+12	; 0x0c
    90c0:	81 11       	cpse	r24, r1
    90c2:	01 c0       	rjmp	.+2      	; 0x90c6 <get_fileinfo+0x1e4>
    90c4:	19 86       	std	Y+9, r1	; 0x09
    90c6:	f8 01       	movw	r30, r16
    90c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    90ca:	93 8d       	ldd	r25, Z+27	; 0x1b
    90cc:	fc 01       	movw	r30, r24
    90ce:	83 85       	ldd	r24, Z+11	; 0x0b
    90d0:	88 87       	std	Y+8, r24	; 0x08
    90d2:	f8 01       	movw	r30, r16
    90d4:	02 8d       	ldd	r16, Z+26	; 0x1a
    90d6:	13 8d       	ldd	r17, Z+27	; 0x1b
    90d8:	c8 01       	movw	r24, r16
    90da:	4c 96       	adiw	r24, 0x1c	; 28
    90dc:	c6 dc       	rcall	.-1652   	; 0x8a6a <ld_dword>
    90de:	68 83       	st	Y, r22
    90e0:	79 83       	std	Y+1, r23	; 0x01
    90e2:	8a 83       	std	Y+2, r24	; 0x02
    90e4:	9b 83       	std	Y+3, r25	; 0x03
    90e6:	f8 01       	movw	r30, r16
    90e8:	86 89       	ldd	r24, Z+22	; 0x16
    90ea:	97 89       	ldd	r25, Z+23	; 0x17
    90ec:	9f 83       	std	Y+7, r25	; 0x07
    90ee:	8e 83       	std	Y+6, r24	; 0x06
    90f0:	80 8d       	ldd	r24, Z+24	; 0x18
    90f2:	91 8d       	ldd	r25, Z+25	; 0x19
    90f4:	9d 83       	std	Y+5, r25	; 0x05
    90f6:	8c 83       	std	Y+4, r24	; 0x04
    90f8:	cd b7       	in	r28, 0x3d	; 61
    90fa:	de b7       	in	r29, 0x3e	; 62
    90fc:	e2 e1       	ldi	r30, 0x12	; 18
    90fe:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00009102 <ld_clust.isra.4>:
    9102:	fb 01       	movw	r30, r22
    9104:	42 8d       	ldd	r20, Z+26	; 0x1a
    9106:	53 8d       	ldd	r21, Z+27	; 0x1b
    9108:	60 e0       	ldi	r22, 0x00	; 0
    910a:	70 e0       	ldi	r23, 0x00	; 0
    910c:	83 30       	cpi	r24, 0x03	; 3
    910e:	59 f4       	brne	.+22     	; 0x9126 <ld_clust.isra.4+0x24>
    9110:	84 89       	ldd	r24, Z+20	; 0x14
    9112:	95 89       	ldd	r25, Z+21	; 0x15
    9114:	a0 e0       	ldi	r26, 0x00	; 0
    9116:	b0 e0       	ldi	r27, 0x00	; 0
    9118:	dc 01       	movw	r26, r24
    911a:	99 27       	eor	r25, r25
    911c:	88 27       	eor	r24, r24
    911e:	48 2b       	or	r20, r24
    9120:	59 2b       	or	r21, r25
    9122:	6a 2b       	or	r22, r26
    9124:	7b 2b       	or	r23, r27
    9126:	cb 01       	movw	r24, r22
    9128:	ba 01       	movw	r22, r20
    912a:	08 95       	ret

0000912c <st_clust.isra.5>:
    912c:	fb 01       	movw	r30, r22
    912e:	22 8f       	std	Z+26, r18	; 0x1a
    9130:	33 8f       	std	Z+27, r19	; 0x1b
    9132:	dc 01       	movw	r26, r24
    9134:	8c 91       	ld	r24, X
    9136:	83 30       	cpi	r24, 0x03	; 3
    9138:	29 f4       	brne	.+10     	; 0x9144 <st_clust.isra.5+0x18>
    913a:	ca 01       	movw	r24, r20
    913c:	aa 27       	eor	r26, r26
    913e:	bb 27       	eor	r27, r27
    9140:	84 8b       	std	Z+20, r24	; 0x14
    9142:	95 8b       	std	Z+21, r25	; 0x15
    9144:	08 95       	ret

00009146 <sync_window.part.6>:
    9146:	8f 92       	push	r8
    9148:	9f 92       	push	r9
    914a:	af 92       	push	r10
    914c:	bf 92       	push	r11
    914e:	ef 92       	push	r14
    9150:	ff 92       	push	r15
    9152:	0f 93       	push	r16
    9154:	1f 93       	push	r17
    9156:	cf 93       	push	r28
    9158:	df 93       	push	r29
    915a:	ec 01       	movw	r28, r24
    915c:	7c 01       	movw	r14, r24
    915e:	45 e3       	ldi	r20, 0x35	; 53
    9160:	e4 0e       	add	r14, r20
    9162:	f1 1c       	adc	r15, r1
    9164:	29 a9       	ldd	r18, Y+49	; 0x31
    9166:	3a a9       	ldd	r19, Y+50	; 0x32
    9168:	4b a9       	ldd	r20, Y+51	; 0x33
    916a:	5c a9       	ldd	r21, Y+52	; 0x34
    916c:	01 e0       	ldi	r16, 0x01	; 1
    916e:	10 e0       	ldi	r17, 0x00	; 0
    9170:	b7 01       	movw	r22, r14
    9172:	89 81       	ldd	r24, Y+1	; 0x01
    9174:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    9178:	89 2b       	or	r24, r25
    917a:	41 f5       	brne	.+80     	; 0x91cc <sync_window.part.6+0x86>
    917c:	1b 82       	std	Y+3, r1	; 0x03
    917e:	09 a9       	ldd	r16, Y+49	; 0x31
    9180:	1a a9       	ldd	r17, Y+50	; 0x32
    9182:	2b a9       	ldd	r18, Y+51	; 0x33
    9184:	3c a9       	ldd	r19, Y+52	; 0x34
    9186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9188:	9e 8d       	ldd	r25, Y+30	; 0x1e
    918a:	af 8d       	ldd	r26, Y+31	; 0x1f
    918c:	b8 a1       	ldd	r27, Y+32	; 0x20
    918e:	8d a0       	ldd	r8, Y+37	; 0x25
    9190:	9e a0       	ldd	r9, Y+38	; 0x26
    9192:	af a0       	ldd	r10, Y+39	; 0x27
    9194:	b8 a4       	ldd	r11, Y+40	; 0x28
    9196:	b9 01       	movw	r22, r18
    9198:	a8 01       	movw	r20, r16
    919a:	48 19       	sub	r20, r8
    919c:	59 09       	sbc	r21, r9
    919e:	6a 09       	sbc	r22, r10
    91a0:	7b 09       	sbc	r23, r11
    91a2:	48 17       	cp	r20, r24
    91a4:	59 07       	cpc	r21, r25
    91a6:	6a 07       	cpc	r22, r26
    91a8:	7b 07       	cpc	r23, r27
    91aa:	98 f4       	brcc	.+38     	; 0x91d2 <sync_window.part.6+0x8c>
    91ac:	6a 81       	ldd	r22, Y+2	; 0x02
    91ae:	62 30       	cpi	r22, 0x02	; 2
    91b0:	81 f4       	brne	.+32     	; 0x91d2 <sync_window.part.6+0x8c>
    91b2:	a9 01       	movw	r20, r18
    91b4:	98 01       	movw	r18, r16
    91b6:	28 0f       	add	r18, r24
    91b8:	39 1f       	adc	r19, r25
    91ba:	4a 1f       	adc	r20, r26
    91bc:	5b 1f       	adc	r21, r27
    91be:	01 e0       	ldi	r16, 0x01	; 1
    91c0:	10 e0       	ldi	r17, 0x00	; 0
    91c2:	b7 01       	movw	r22, r14
    91c4:	89 81       	ldd	r24, Y+1	; 0x01
    91c6:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    91ca:	03 c0       	rjmp	.+6      	; 0x91d2 <sync_window.part.6+0x8c>
    91cc:	81 e0       	ldi	r24, 0x01	; 1
    91ce:	90 e0       	ldi	r25, 0x00	; 0
    91d0:	02 c0       	rjmp	.+4      	; 0x91d6 <sync_window.part.6+0x90>
    91d2:	80 e0       	ldi	r24, 0x00	; 0
    91d4:	90 e0       	ldi	r25, 0x00	; 0
    91d6:	df 91       	pop	r29
    91d8:	cf 91       	pop	r28
    91da:	1f 91       	pop	r17
    91dc:	0f 91       	pop	r16
    91de:	ff 90       	pop	r15
    91e0:	ef 90       	pop	r14
    91e2:	bf 90       	pop	r11
    91e4:	af 90       	pop	r10
    91e6:	9f 90       	pop	r9
    91e8:	8f 90       	pop	r8
    91ea:	08 95       	ret

000091ec <sync_fs>:
    91ec:	ef 92       	push	r14
    91ee:	ff 92       	push	r15
    91f0:	0f 93       	push	r16
    91f2:	1f 93       	push	r17
    91f4:	cf 93       	push	r28
    91f6:	df 93       	push	r29
    91f8:	ec 01       	movw	r28, r24
    91fa:	8b 81       	ldd	r24, Y+3	; 0x03
    91fc:	81 11       	cpse	r24, r1
    91fe:	05 c0       	rjmp	.+10     	; 0x920a <sync_fs+0x1e>
    9200:	88 81       	ld	r24, Y
    9202:	83 30       	cpi	r24, 0x03	; 3
    9204:	09 f0       	breq	.+2      	; 0x9208 <sync_fs+0x1c>
    9206:	52 c0       	rjmp	.+164    	; 0x92ac <sync_fs+0xc0>
    9208:	06 c0       	rjmp	.+12     	; 0x9216 <sync_fs+0x2a>
    920a:	ce 01       	movw	r24, r28
    920c:	9c df       	rcall	.-200    	; 0x9146 <sync_window.part.6>
    920e:	00 97       	sbiw	r24, 0x00	; 0
    9210:	09 f0       	breq	.+2      	; 0x9214 <sync_fs+0x28>
    9212:	59 c0       	rjmp	.+178    	; 0x92c6 <sync_fs+0xda>
    9214:	f5 cf       	rjmp	.-22     	; 0x9200 <sync_fs+0x14>
    9216:	8c 81       	ldd	r24, Y+4	; 0x04
    9218:	81 30       	cpi	r24, 0x01	; 1
    921a:	09 f0       	breq	.+2      	; 0x921e <sync_fs+0x32>
    921c:	47 c0       	rjmp	.+142    	; 0x92ac <sync_fs+0xc0>
    921e:	40 e0       	ldi	r20, 0x00	; 0
    9220:	52 e0       	ldi	r21, 0x02	; 2
    9222:	60 e0       	ldi	r22, 0x00	; 0
    9224:	70 e0       	ldi	r23, 0x00	; 0
    9226:	7e 01       	movw	r14, r28
    9228:	85 e3       	ldi	r24, 0x35	; 53
    922a:	e8 0e       	add	r14, r24
    922c:	f1 1c       	adc	r15, r1
    922e:	c7 01       	movw	r24, r14
    9230:	37 dc       	rcall	.-1938   	; 0x8aa0 <mem_set>
    9232:	85 e5       	ldi	r24, 0x55	; 85
    9234:	fe 01       	movw	r30, r28
    9236:	ed 5c       	subi	r30, 0xCD	; 205
    9238:	fd 4f       	sbci	r31, 0xFD	; 253
    923a:	80 83       	st	Z, r24
    923c:	8a ea       	ldi	r24, 0xAA	; 170
    923e:	31 96       	adiw	r30, 0x01	; 1
    9240:	80 83       	st	Z, r24
    9242:	82 e5       	ldi	r24, 0x52	; 82
    9244:	8d ab       	std	Y+53, r24	; 0x35
    9246:	8e ab       	std	Y+54, r24	; 0x36
    9248:	81 e6       	ldi	r24, 0x61	; 97
    924a:	8f ab       	std	Y+55, r24	; 0x37
    924c:	91 e4       	ldi	r25, 0x41	; 65
    924e:	98 af       	std	Y+56, r25	; 0x38
    9250:	22 e7       	ldi	r18, 0x72	; 114
    9252:	7b 97       	sbiw	r30, 0x1b	; 27
    9254:	20 83       	st	Z, r18
    9256:	31 96       	adiw	r30, 0x01	; 1
    9258:	20 83       	st	Z, r18
    925a:	31 96       	adiw	r30, 0x01	; 1
    925c:	90 83       	st	Z, r25
    925e:	31 96       	adiw	r30, 0x01	; 1
    9260:	80 83       	st	Z, r24
    9262:	49 89       	ldd	r20, Y+17	; 0x11
    9264:	5a 89       	ldd	r21, Y+18	; 0x12
    9266:	6b 89       	ldd	r22, Y+19	; 0x13
    9268:	7c 89       	ldd	r23, Y+20	; 0x14
    926a:	ce 01       	movw	r24, r28
    926c:	83 5e       	subi	r24, 0xE3	; 227
    926e:	9d 4f       	sbci	r25, 0xFD	; 253
    9270:	11 dc       	rcall	.-2014   	; 0x8a94 <st_dword>
    9272:	4d 85       	ldd	r20, Y+13	; 0x0d
    9274:	5e 85       	ldd	r21, Y+14	; 0x0e
    9276:	6f 85       	ldd	r22, Y+15	; 0x0f
    9278:	78 89       	ldd	r23, Y+16	; 0x10
    927a:	ce 01       	movw	r24, r28
    927c:	8f 5d       	subi	r24, 0xDF	; 223
    927e:	9d 4f       	sbci	r25, 0xFD	; 253
    9280:	09 dc       	rcall	.-2030   	; 0x8a94 <st_dword>
    9282:	89 a1       	ldd	r24, Y+33	; 0x21
    9284:	9a a1       	ldd	r25, Y+34	; 0x22
    9286:	ab a1       	ldd	r26, Y+35	; 0x23
    9288:	bc a1       	ldd	r27, Y+36	; 0x24
    928a:	9c 01       	movw	r18, r24
    928c:	ad 01       	movw	r20, r26
    928e:	2f 5f       	subi	r18, 0xFF	; 255
    9290:	3f 4f       	sbci	r19, 0xFF	; 255
    9292:	4f 4f       	sbci	r20, 0xFF	; 255
    9294:	5f 4f       	sbci	r21, 0xFF	; 255
    9296:	29 ab       	std	Y+49, r18	; 0x31
    9298:	3a ab       	std	Y+50, r19	; 0x32
    929a:	4b ab       	std	Y+51, r20	; 0x33
    929c:	5c ab       	std	Y+52, r21	; 0x34
    929e:	01 e0       	ldi	r16, 0x01	; 1
    92a0:	10 e0       	ldi	r17, 0x00	; 0
    92a2:	b7 01       	movw	r22, r14
    92a4:	89 81       	ldd	r24, Y+1	; 0x01
    92a6:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    92aa:	1c 82       	std	Y+4, r1	; 0x04
    92ac:	40 e0       	ldi	r20, 0x00	; 0
    92ae:	50 e0       	ldi	r21, 0x00	; 0
    92b0:	60 e0       	ldi	r22, 0x00	; 0
    92b2:	89 81       	ldd	r24, Y+1	; 0x01
    92b4:	0e 94 79 68 	call	0xd0f2	; 0xd0f2 <disk_ioctl>
    92b8:	31 e0       	ldi	r19, 0x01	; 1
    92ba:	20 e0       	ldi	r18, 0x00	; 0
    92bc:	89 2b       	or	r24, r25
    92be:	09 f4       	brne	.+2      	; 0x92c2 <sync_fs+0xd6>
    92c0:	30 e0       	ldi	r19, 0x00	; 0
    92c2:	83 2f       	mov	r24, r19
    92c4:	92 2f       	mov	r25, r18
    92c6:	cd b7       	in	r28, 0x3d	; 61
    92c8:	de b7       	in	r29, 0x3e	; 62
    92ca:	e6 e0       	ldi	r30, 0x06	; 6
    92cc:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

000092d0 <dir_clear>:
    92d0:	4f 92       	push	r4
    92d2:	5f 92       	push	r5
    92d4:	6f 92       	push	r6
    92d6:	7f 92       	push	r7
    92d8:	af 92       	push	r10
    92da:	bf 92       	push	r11
    92dc:	cf 92       	push	r12
    92de:	df 92       	push	r13
    92e0:	ef 92       	push	r14
    92e2:	ff 92       	push	r15
    92e4:	0f 93       	push	r16
    92e6:	1f 93       	push	r17
    92e8:	cf 93       	push	r28
    92ea:	df 93       	push	r29
    92ec:	ec 01       	movw	r28, r24
    92ee:	6a 01       	movw	r12, r20
    92f0:	7b 01       	movw	r14, r22
    92f2:	8b 81       	ldd	r24, Y+3	; 0x03
    92f4:	81 11       	cpse	r24, r1
    92f6:	28 c0       	rjmp	.+80     	; 0x9348 <dir_clear+0x78>
    92f8:	b7 01       	movw	r22, r14
    92fa:	a6 01       	movw	r20, r12
    92fc:	ce 01       	movw	r24, r28
    92fe:	6e dc       	rcall	.-1828   	; 0x8bdc <clst2sect>
    9300:	2b 01       	movw	r4, r22
    9302:	3c 01       	movw	r6, r24
    9304:	69 ab       	std	Y+49, r22	; 0x31
    9306:	7a ab       	std	Y+50, r23	; 0x32
    9308:	8b ab       	std	Y+51, r24	; 0x33
    930a:	9c ab       	std	Y+52, r25	; 0x34
    930c:	5e 01       	movw	r10, r28
    930e:	25 e3       	ldi	r18, 0x35	; 53
    9310:	a2 0e       	add	r10, r18
    9312:	b1 1c       	adc	r11, r1
    9314:	40 e0       	ldi	r20, 0x00	; 0
    9316:	52 e0       	ldi	r21, 0x02	; 2
    9318:	60 e0       	ldi	r22, 0x00	; 0
    931a:	70 e0       	ldi	r23, 0x00	; 0
    931c:	c5 01       	movw	r24, r10
    931e:	c0 db       	rcall	.-2176   	; 0x8aa0 <mem_set>
    9320:	09 85       	ldd	r16, Y+9	; 0x09
    9322:	1a 85       	ldd	r17, Y+10	; 0x0a
    9324:	c8 01       	movw	r24, r16
    9326:	a0 e0       	ldi	r26, 0x00	; 0
    9328:	b0 e0       	ldi	r27, 0x00	; 0
    932a:	39 e0       	ldi	r19, 0x09	; 9
    932c:	88 0f       	add	r24, r24
    932e:	99 1f       	adc	r25, r25
    9330:	aa 1f       	adc	r26, r26
    9332:	bb 1f       	adc	r27, r27
    9334:	3a 95       	dec	r19
    9336:	d1 f7       	brne	.-12     	; 0x932c <dir_clear+0x5c>
    9338:	81 15       	cp	r24, r1
    933a:	90 48       	sbci	r25, 0x80	; 128
    933c:	a1 05       	cpc	r26, r1
    933e:	b1 05       	cpc	r27, r1
    9340:	50 f0       	brcs	.+20     	; 0x9356 <dir_clear+0x86>
    9342:	00 e0       	ldi	r16, 0x00	; 0
    9344:	10 e8       	ldi	r17, 0x80	; 128
    9346:	14 c0       	rjmp	.+40     	; 0x9370 <dir_clear+0xa0>
    9348:	ce 01       	movw	r24, r28
    934a:	fd de       	rcall	.-518    	; 0x9146 <sync_window.part.6>
    934c:	89 2b       	or	r24, r25
    934e:	a1 f2       	breq	.-88     	; 0x92f8 <dir_clear+0x28>
    9350:	81 e0       	ldi	r24, 0x01	; 1
    9352:	90 e0       	ldi	r25, 0x00	; 0
    9354:	56 c0       	rjmp	.+172    	; 0x9402 <dir_clear+0x132>
    9356:	10 2f       	mov	r17, r16
    9358:	00 27       	eor	r16, r16
    935a:	11 0f       	add	r17, r17
    935c:	09 c0       	rjmp	.+18     	; 0x9370 <dir_clear+0xa0>
    935e:	c8 01       	movw	r24, r16
    9360:	0e 94 9d 67 	call	0xcf3a	; 0xcf3a <ff_memalloc>
    9364:	6c 01       	movw	r12, r24
    9366:	00 97       	sbiw	r24, 0x00	; 0
    9368:	09 f0       	breq	.+2      	; 0x936c <dir_clear+0x9c>
    936a:	40 c0       	rjmp	.+128    	; 0x93ec <dir_clear+0x11c>
    936c:	16 95       	lsr	r17
    936e:	07 95       	ror	r16
    9370:	01 30       	cpi	r16, 0x01	; 1
    9372:	82 e0       	ldi	r24, 0x02	; 2
    9374:	18 07       	cpc	r17, r24
    9376:	98 f7       	brcc	.-26     	; 0x935e <dir_clear+0x8e>
    9378:	e1 2c       	mov	r14, r1
    937a:	f1 2c       	mov	r15, r1
    937c:	11 c0       	rjmp	.+34     	; 0x93a0 <dir_clear+0xd0>
    937e:	01 e0       	ldi	r16, 0x01	; 1
    9380:	10 e0       	ldi	r17, 0x00	; 0
    9382:	a3 01       	movw	r20, r6
    9384:	92 01       	movw	r18, r4
    9386:	2e 0d       	add	r18, r14
    9388:	3f 1d       	adc	r19, r15
    938a:	41 1d       	adc	r20, r1
    938c:	51 1d       	adc	r21, r1
    938e:	b5 01       	movw	r22, r10
    9390:	89 81       	ldd	r24, Y+1	; 0x01
    9392:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    9396:	89 2b       	or	r24, r25
    9398:	01 f5       	brne	.+64     	; 0x93da <dir_clear+0x10a>
    939a:	2f ef       	ldi	r18, 0xFF	; 255
    939c:	e2 1a       	sub	r14, r18
    939e:	f2 0a       	sbc	r15, r18
    93a0:	89 85       	ldd	r24, Y+9	; 0x09
    93a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    93a4:	e8 16       	cp	r14, r24
    93a6:	f9 06       	cpc	r15, r25
    93a8:	50 f3       	brcs	.-44     	; 0x937e <dir_clear+0xae>
    93aa:	17 c0       	rjmp	.+46     	; 0x93da <dir_clear+0x10a>
    93ac:	85 01       	movw	r16, r10
    93ae:	a3 01       	movw	r20, r6
    93b0:	92 01       	movw	r18, r4
    93b2:	2e 0d       	add	r18, r14
    93b4:	3f 1d       	adc	r19, r15
    93b6:	41 1d       	adc	r20, r1
    93b8:	51 1d       	adc	r21, r1
    93ba:	b6 01       	movw	r22, r12
    93bc:	89 81       	ldd	r24, Y+1	; 0x01
    93be:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    93c2:	89 2b       	or	r24, r25
    93c4:	39 f4       	brne	.+14     	; 0x93d4 <dir_clear+0x104>
    93c6:	ea 0c       	add	r14, r10
    93c8:	fb 1c       	adc	r15, r11
    93ca:	89 85       	ldd	r24, Y+9	; 0x09
    93cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    93ce:	e8 16       	cp	r14, r24
    93d0:	f9 06       	cpc	r15, r25
    93d2:	60 f3       	brcs	.-40     	; 0x93ac <dir_clear+0xdc>
    93d4:	c6 01       	movw	r24, r12
    93d6:	0e 94 a0 67 	call	0xcf40	; 0xcf40 <ff_memfree>
    93da:	81 e0       	ldi	r24, 0x01	; 1
    93dc:	90 e0       	ldi	r25, 0x00	; 0
    93de:	29 85       	ldd	r18, Y+9	; 0x09
    93e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    93e2:	2e 15       	cp	r18, r14
    93e4:	3f 05       	cpc	r19, r15
    93e6:	69 f4       	brne	.+26     	; 0x9402 <dir_clear+0x132>
    93e8:	80 e0       	ldi	r24, 0x00	; 0
    93ea:	0b c0       	rjmp	.+22     	; 0x9402 <dir_clear+0x132>
    93ec:	a8 01       	movw	r20, r16
    93ee:	60 e0       	ldi	r22, 0x00	; 0
    93f0:	70 e0       	ldi	r23, 0x00	; 0
    93f2:	56 db       	rcall	.-2388   	; 0x8aa0 <mem_set>
    93f4:	58 01       	movw	r10, r16
    93f6:	ab 2c       	mov	r10, r11
    93f8:	bb 24       	eor	r11, r11
    93fa:	a6 94       	lsr	r10
    93fc:	e1 2c       	mov	r14, r1
    93fe:	f1 2c       	mov	r15, r1
    9400:	e4 cf       	rjmp	.-56     	; 0x93ca <dir_clear+0xfa>
    9402:	df 91       	pop	r29
    9404:	cf 91       	pop	r28
    9406:	1f 91       	pop	r17
    9408:	0f 91       	pop	r16
    940a:	ff 90       	pop	r15
    940c:	ef 90       	pop	r14
    940e:	df 90       	pop	r13
    9410:	cf 90       	pop	r12
    9412:	bf 90       	pop	r11
    9414:	af 90       	pop	r10
    9416:	7f 90       	pop	r7
    9418:	6f 90       	pop	r6
    941a:	5f 90       	pop	r5
    941c:	4f 90       	pop	r4
    941e:	08 95       	ret

00009420 <move_window>:
    9420:	a0 e0       	ldi	r26, 0x00	; 0
    9422:	b0 e0       	ldi	r27, 0x00	; 0
    9424:	e6 e1       	ldi	r30, 0x16	; 22
    9426:	fa e4       	ldi	r31, 0x4A	; 74
    9428:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    942c:	ec 01       	movw	r28, r24
    942e:	6a 01       	movw	r12, r20
    9430:	7b 01       	movw	r14, r22
    9432:	89 a9       	ldd	r24, Y+49	; 0x31
    9434:	9a a9       	ldd	r25, Y+50	; 0x32
    9436:	ab a9       	ldd	r26, Y+51	; 0x33
    9438:	bc a9       	ldd	r27, Y+52	; 0x34
    943a:	84 17       	cp	r24, r20
    943c:	95 07       	cpc	r25, r21
    943e:	a6 07       	cpc	r26, r22
    9440:	b7 07       	cpc	r27, r23
    9442:	11 f1       	breq	.+68     	; 0x9488 <move_window+0x68>
    9444:	8b 81       	ldd	r24, Y+3	; 0x03
    9446:	81 11       	cpse	r24, r1
    9448:	13 c0       	rjmp	.+38     	; 0x9470 <move_window+0x50>
    944a:	01 e0       	ldi	r16, 0x01	; 1
    944c:	10 e0       	ldi	r17, 0x00	; 0
    944e:	a7 01       	movw	r20, r14
    9450:	96 01       	movw	r18, r12
    9452:	be 01       	movw	r22, r28
    9454:	6b 5c       	subi	r22, 0xCB	; 203
    9456:	7f 4f       	sbci	r23, 0xFF	; 255
    9458:	89 81       	ldd	r24, Y+1	; 0x01
    945a:	0e 94 59 68 	call	0xd0b2	; 0xd0b2 <disk_read>
    945e:	89 2b       	or	r24, r25
    9460:	61 f0       	breq	.+24     	; 0x947a <move_window+0x5a>
    9462:	81 e0       	ldi	r24, 0x01	; 1
    9464:	90 e0       	ldi	r25, 0x00	; 0
    9466:	cc 24       	eor	r12, r12
    9468:	ca 94       	dec	r12
    946a:	dc 2c       	mov	r13, r12
    946c:	76 01       	movw	r14, r12
    946e:	07 c0       	rjmp	.+14     	; 0x947e <move_window+0x5e>
    9470:	ce 01       	movw	r24, r28
    9472:	69 de       	rcall	.-814    	; 0x9146 <sync_window.part.6>
    9474:	00 97       	sbiw	r24, 0x00	; 0
    9476:	51 f4       	brne	.+20     	; 0x948c <move_window+0x6c>
    9478:	e8 cf       	rjmp	.-48     	; 0x944a <move_window+0x2a>
    947a:	80 e0       	ldi	r24, 0x00	; 0
    947c:	90 e0       	ldi	r25, 0x00	; 0
    947e:	c9 aa       	std	Y+49, r12	; 0x31
    9480:	da aa       	std	Y+50, r13	; 0x32
    9482:	eb aa       	std	Y+51, r14	; 0x33
    9484:	fc aa       	std	Y+52, r15	; 0x34
    9486:	02 c0       	rjmp	.+4      	; 0x948c <move_window+0x6c>
    9488:	80 e0       	ldi	r24, 0x00	; 0
    948a:	90 e0       	ldi	r25, 0x00	; 0
    948c:	cd b7       	in	r28, 0x3d	; 61
    948e:	de b7       	in	r29, 0x3e	; 62
    9490:	e8 e0       	ldi	r30, 0x08	; 8
    9492:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00009496 <check_fs>:
    9496:	cf 93       	push	r28
    9498:	df 93       	push	r29
    949a:	ec 01       	movw	r28, r24
    949c:	1b 82       	std	Y+3, r1	; 0x03
    949e:	8f ef       	ldi	r24, 0xFF	; 255
    94a0:	9f ef       	ldi	r25, 0xFF	; 255
    94a2:	dc 01       	movw	r26, r24
    94a4:	89 ab       	std	Y+49, r24	; 0x31
    94a6:	9a ab       	std	Y+50, r25	; 0x32
    94a8:	ab ab       	std	Y+51, r26	; 0x33
    94aa:	bc ab       	std	Y+52, r27	; 0x34
    94ac:	ce 01       	movw	r24, r28
    94ae:	b8 df       	rcall	.-144    	; 0x9420 <move_window>
    94b0:	89 2b       	or	r24, r25
    94b2:	19 f5       	brne	.+70     	; 0x94fa <check_fs+0x64>
    94b4:	fe 01       	movw	r30, r28
    94b6:	ed 5c       	subi	r30, 0xCD	; 205
    94b8:	fd 4f       	sbci	r31, 0xFD	; 253
    94ba:	80 81       	ld	r24, Z
    94bc:	91 81       	ldd	r25, Z+1	; 0x01
    94be:	85 35       	cpi	r24, 0x55	; 85
    94c0:	9a 4a       	sbci	r25, 0xAA	; 170
    94c2:	f1 f4       	brne	.+60     	; 0x9500 <check_fs+0x6a>
    94c4:	8d a9       	ldd	r24, Y+53	; 0x35
    94c6:	8b 3e       	cpi	r24, 0xEB	; 235
    94c8:	19 f0       	breq	.+6      	; 0x94d0 <check_fs+0x3a>
    94ca:	88 5e       	subi	r24, 0xE8	; 232
    94cc:	82 30       	cpi	r24, 0x02	; 2
    94ce:	f0 f4       	brcc	.+60     	; 0x950c <check_fs+0x76>
    94d0:	43 e0       	ldi	r20, 0x03	; 3
    94d2:	50 e0       	ldi	r21, 0x00	; 0
    94d4:	66 ec       	ldi	r22, 0xC6	; 198
    94d6:	78 e0       	ldi	r23, 0x08	; 8
    94d8:	ce 01       	movw	r24, r28
    94da:	85 59       	subi	r24, 0x95	; 149
    94dc:	9f 4f       	sbci	r25, 0xFF	; 255
    94de:	e9 da       	rcall	.-2606   	; 0x8ab2 <mem_cmp>
    94e0:	89 2b       	or	r24, r25
    94e2:	89 f0       	breq	.+34     	; 0x9506 <check_fs+0x70>
    94e4:	45 e0       	ldi	r20, 0x05	; 5
    94e6:	50 e0       	ldi	r21, 0x00	; 0
    94e8:	61 e2       	ldi	r22, 0x21	; 33
    94ea:	74 e0       	ldi	r23, 0x04	; 4
    94ec:	ce 01       	movw	r24, r28
    94ee:	89 57       	subi	r24, 0x79	; 121
    94f0:	9f 4f       	sbci	r25, 0xFF	; 255
    94f2:	df da       	rcall	.-2626   	; 0x8ab2 <mem_cmp>
    94f4:	89 2b       	or	r24, r25
    94f6:	51 f4       	brne	.+20     	; 0x950c <check_fs+0x76>
    94f8:	06 c0       	rjmp	.+12     	; 0x9506 <check_fs+0x70>
    94fa:	84 e0       	ldi	r24, 0x04	; 4
    94fc:	90 e0       	ldi	r25, 0x00	; 0
    94fe:	08 c0       	rjmp	.+16     	; 0x9510 <check_fs+0x7a>
    9500:	83 e0       	ldi	r24, 0x03	; 3
    9502:	90 e0       	ldi	r25, 0x00	; 0
    9504:	05 c0       	rjmp	.+10     	; 0x9510 <check_fs+0x7a>
    9506:	80 e0       	ldi	r24, 0x00	; 0
    9508:	90 e0       	ldi	r25, 0x00	; 0
    950a:	02 c0       	rjmp	.+4      	; 0x9510 <check_fs+0x7a>
    950c:	82 e0       	ldi	r24, 0x02	; 2
    950e:	90 e0       	ldi	r25, 0x00	; 0
    9510:	df 91       	pop	r29
    9512:	cf 91       	pop	r28
    9514:	08 95       	ret

00009516 <mount_volume>:
    9516:	a0 e2       	ldi	r26, 0x20	; 32
    9518:	b0 e0       	ldi	r27, 0x00	; 0
    951a:	e1 e9       	ldi	r30, 0x91	; 145
    951c:	fa e4       	ldi	r31, 0x4A	; 74
    951e:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
    9522:	5b 01       	movw	r10, r22
    9524:	f4 2e       	mov	r15, r20
    9526:	db 01       	movw	r26, r22
    9528:	1d 92       	st	X+, r1
    952a:	1c 92       	st	X, r1
    952c:	ca db       	rcall	.-2156   	; 0x8cc2 <get_ldnumber>
    952e:	6c 01       	movw	r12, r24
    9530:	97 fd       	sbrc	r25, 7
    9532:	39 c2       	rjmp	.+1138   	; 0x99a6 <mount_volume+0x490>
    9534:	fc 01       	movw	r30, r24
    9536:	ee 0f       	add	r30, r30
    9538:	ff 1f       	adc	r31, r31
    953a:	ed 5e       	subi	r30, 0xED	; 237
    953c:	f7 4e       	sbci	r31, 0xE7	; 231
    953e:	00 81       	ld	r16, Z
    9540:	11 81       	ldd	r17, Z+1	; 0x01
    9542:	01 15       	cp	r16, r1
    9544:	11 05       	cpc	r17, r1
    9546:	09 f4       	brne	.+2      	; 0x954a <mount_volume+0x34>
    9548:	31 c2       	rjmp	.+1122   	; 0x99ac <mount_volume+0x496>
    954a:	f5 01       	movw	r30, r10
    954c:	11 83       	std	Z+1, r17	; 0x01
    954e:	00 83       	st	Z, r16
    9550:	ff 2d       	mov	r31, r15
    9552:	fe 7f       	andi	r31, 0xFE	; 254
    9554:	ff 2e       	mov	r15, r31
    9556:	d8 01       	movw	r26, r16
    9558:	8c 91       	ld	r24, X
    955a:	88 23       	and	r24, r24
    955c:	71 f0       	breq	.+28     	; 0x957a <mount_volume+0x64>
    955e:	f8 01       	movw	r30, r16
    9560:	81 81       	ldd	r24, Z+1	; 0x01
    9562:	0e 94 4d 68 	call	0xd09a	; 0xd09a <disk_status>
    9566:	80 fd       	sbrc	r24, 0
    9568:	08 c0       	rjmp	.+16     	; 0x957a <mount_volume+0x64>
    956a:	ff 20       	and	r15, r15
    956c:	09 f4       	brne	.+2      	; 0x9570 <mount_volume+0x5a>
    956e:	21 c2       	rjmp	.+1090   	; 0x99b2 <mount_volume+0x49c>
    9570:	82 ff       	sbrs	r24, 2
    9572:	1f c2       	rjmp	.+1086   	; 0x99b2 <mount_volume+0x49c>
    9574:	8a e0       	ldi	r24, 0x0A	; 10
    9576:	90 e0       	ldi	r25, 0x00	; 0
    9578:	24 c2       	rjmp	.+1096   	; 0x99c2 <mount_volume+0x4ac>
    957a:	d8 01       	movw	r26, r16
    957c:	1c 92       	st	X, r1
    957e:	f8 01       	movw	r30, r16
    9580:	c1 82       	std	Z+1, r12	; 0x01
    9582:	8c 2d       	mov	r24, r12
    9584:	0e 94 53 68 	call	0xd0a6	; 0xd0a6 <disk_initialize>
    9588:	80 fd       	sbrc	r24, 0
    958a:	16 c2       	rjmp	.+1068   	; 0x99b8 <mount_volume+0x4a2>
    958c:	ff 20       	and	r15, r15
    958e:	11 f0       	breq	.+4      	; 0x9594 <mount_volume+0x7e>
    9590:	82 fd       	sbrc	r24, 2
    9592:	f0 cf       	rjmp	.-32     	; 0x9574 <mount_volume+0x5e>
    9594:	40 e0       	ldi	r20, 0x00	; 0
    9596:	50 e0       	ldi	r21, 0x00	; 0
    9598:	ba 01       	movw	r22, r20
    959a:	c8 01       	movw	r24, r16
    959c:	7c df       	rcall	.-264    	; 0x9496 <check_fs>
    959e:	82 30       	cpi	r24, 0x02	; 2
    95a0:	91 05       	cpc	r25, r1
    95a2:	b9 f5       	brne	.+110    	; 0x9612 <mount_volume+0xfc>
    95a4:	68 01       	movw	r12, r16
    95a6:	f5 e0       	ldi	r31, 0x05	; 5
    95a8:	cf 1a       	sub	r12, r31
    95aa:	fe ef       	ldi	r31, 0xFE	; 254
    95ac:	df 0a       	sbc	r13, r31
    95ae:	9e 01       	movw	r18, r28
    95b0:	2f 5f       	subi	r18, 0xFF	; 255
    95b2:	3f 4f       	sbci	r19, 0xFF	; 255
    95b4:	79 01       	movw	r14, r18
    95b6:	48 01       	movw	r8, r16
    95b8:	35 ec       	ldi	r19, 0xC5	; 197
    95ba:	83 1a       	sub	r8, r19
    95bc:	3d ef       	ldi	r19, 0xFD	; 253
    95be:	93 0a       	sbc	r9, r19
    95c0:	57 01       	movw	r10, r14
    95c2:	c6 01       	movw	r24, r12
    95c4:	52 da       	rcall	.-2908   	; 0x8a6a <ld_dword>
    95c6:	d5 01       	movw	r26, r10
    95c8:	6d 93       	st	X+, r22
    95ca:	7d 93       	st	X+, r23
    95cc:	8d 93       	st	X+, r24
    95ce:	9d 93       	st	X+, r25
    95d0:	5d 01       	movw	r10, r26
    95d2:	b0 e1       	ldi	r27, 0x10	; 16
    95d4:	cb 0e       	add	r12, r27
    95d6:	d1 1c       	adc	r13, r1
    95d8:	c8 14       	cp	r12, r8
    95da:	d9 04       	cpc	r13, r9
    95dc:	91 f7       	brne	.-28     	; 0x95c2 <mount_volume+0xac>
    95de:	6e 01       	movw	r12, r28
    95e0:	e1 e1       	ldi	r30, 0x11	; 17
    95e2:	ce 0e       	add	r12, r30
    95e4:	d1 1c       	adc	r13, r1
    95e6:	d7 01       	movw	r26, r14
    95e8:	4d 91       	ld	r20, X+
    95ea:	5d 91       	ld	r21, X+
    95ec:	6d 91       	ld	r22, X+
    95ee:	7d 91       	ld	r23, X+
    95f0:	7d 01       	movw	r14, r26
    95f2:	41 15       	cp	r20, r1
    95f4:	51 05       	cpc	r21, r1
    95f6:	61 05       	cpc	r22, r1
    95f8:	71 05       	cpc	r23, r1
    95fa:	31 f0       	breq	.+12     	; 0x9608 <mount_volume+0xf2>
    95fc:	c8 01       	movw	r24, r16
    95fe:	4b df       	rcall	.-362    	; 0x9496 <check_fs>
    9600:	82 30       	cpi	r24, 0x02	; 2
    9602:	91 05       	cpc	r25, r1
    9604:	18 f4       	brcc	.+6      	; 0x960c <mount_volume+0xf6>
    9606:	05 c0       	rjmp	.+10     	; 0x9612 <mount_volume+0xfc>
    9608:	83 e0       	ldi	r24, 0x03	; 3
    960a:	90 e0       	ldi	r25, 0x00	; 0
    960c:	ce 14       	cp	r12, r14
    960e:	df 04       	cpc	r13, r15
    9610:	51 f7       	brne	.-44     	; 0x95e6 <mount_volume+0xd0>
    9612:	84 30       	cpi	r24, 0x04	; 4
    9614:	91 05       	cpc	r25, r1
    9616:	09 f4       	brne	.+2      	; 0x961a <mount_volume+0x104>
    9618:	d2 c1       	rjmp	.+932    	; 0x99be <mount_volume+0x4a8>
    961a:	02 97       	sbiw	r24, 0x02	; 2
    961c:	18 f0       	brcs	.+6      	; 0x9624 <mount_volume+0x10e>
    961e:	8d e0       	ldi	r24, 0x0D	; 13
    9620:	90 e0       	ldi	r25, 0x00	; 0
    9622:	cf c1       	rjmp	.+926    	; 0x99c2 <mount_volume+0x4ac>
    9624:	f8 01       	movw	r30, r16
    9626:	e0 5c       	subi	r30, 0xC0	; 192
    9628:	ff 4f       	sbci	r31, 0xFF	; 255
    962a:	80 81       	ld	r24, Z
    962c:	91 81       	ldd	r25, Z+1	; 0x01
    962e:	81 15       	cp	r24, r1
    9630:	92 40       	sbci	r25, 0x02	; 2
    9632:	a9 f7       	brne	.-22     	; 0x961e <mount_volume+0x108>
    9634:	3b 96       	adiw	r30, 0x0b	; 11
    9636:	40 80       	ld	r4, Z
    9638:	51 80       	ldd	r5, Z+1	; 0x01
    963a:	41 14       	cp	r4, r1
    963c:	51 04       	cpc	r5, r1
    963e:	19 f0       	breq	.+6      	; 0x9646 <mount_volume+0x130>
    9640:	61 2c       	mov	r6, r1
    9642:	71 2c       	mov	r7, r1
    9644:	06 c0       	rjmp	.+12     	; 0x9652 <mount_volume+0x13c>
    9646:	c8 01       	movw	r24, r16
    9648:	87 5a       	subi	r24, 0xA7	; 167
    964a:	9f 4f       	sbci	r25, 0xFF	; 255
    964c:	0e da       	rcall	.-3044   	; 0x8a6a <ld_dword>
    964e:	2b 01       	movw	r4, r22
    9650:	3c 01       	movw	r6, r24
    9652:	f8 01       	movw	r30, r16
    9654:	21 a9       	ldd	r18, Z+49	; 0x31
    9656:	32 a9       	ldd	r19, Z+50	; 0x32
    9658:	43 a9       	ldd	r20, Z+51	; 0x33
    965a:	54 a9       	ldd	r21, Z+52	; 0x34
    965c:	29 8b       	std	Y+17, r18	; 0x11
    965e:	3a 8b       	std	Y+18, r19	; 0x12
    9660:	4b 8b       	std	Y+19, r20	; 0x13
    9662:	5c 8b       	std	Y+20, r21	; 0x14
    9664:	45 8e       	std	Z+29, r4	; 0x1d
    9666:	56 8e       	std	Z+30, r5	; 0x1e
    9668:	67 8e       	std	Z+31, r6	; 0x1f
    966a:	70 a2       	std	Z+32, r7	; 0x20
    966c:	eb 5b       	subi	r30, 0xBB	; 187
    966e:	ff 4f       	sbci	r31, 0xFF	; 255
    9670:	a0 80       	ld	r10, Z
    9672:	f8 01       	movw	r30, r16
    9674:	a2 82       	std	Z+2, r10	; 0x02
    9676:	8f ef       	ldi	r24, 0xFF	; 255
    9678:	8a 0d       	add	r24, r10
    967a:	82 30       	cpi	r24, 0x02	; 2
    967c:	80 f6       	brcc	.-96     	; 0x961e <mount_volume+0x108>
    967e:	ee 5b       	subi	r30, 0xBE	; 190
    9680:	ff 4f       	sbci	r31, 0xFF	; 255
    9682:	b0 80       	ld	r11, Z
    9684:	8b 2d       	mov	r24, r11
    9686:	90 e0       	ldi	r25, 0x00	; 0
    9688:	f8 01       	movw	r30, r16
    968a:	92 87       	std	Z+10, r25	; 0x0a
    968c:	81 87       	std	Z+9, r24	; 0x09
    968e:	00 97       	sbiw	r24, 0x00	; 0
    9690:	31 f2       	breq	.-116    	; 0x961e <mount_volume+0x108>
    9692:	9c 01       	movw	r18, r24
    9694:	21 50       	subi	r18, 0x01	; 1
    9696:	31 09       	sbc	r19, r1
    9698:	82 23       	and	r24, r18
    969a:	93 23       	and	r25, r19
    969c:	89 2b       	or	r24, r25
    969e:	09 f0       	breq	.+2      	; 0x96a2 <mount_volume+0x18c>
    96a0:	be cf       	rjmp	.-132    	; 0x961e <mount_volume+0x108>
    96a2:	ea 5b       	subi	r30, 0xBA	; 186
    96a4:	ff 4f       	sbci	r31, 0xFF	; 255
    96a6:	80 80       	ld	r8, Z
    96a8:	91 80       	ldd	r9, Z+1	; 0x01
    96aa:	f8 01       	movw	r30, r16
    96ac:	90 86       	std	Z+8, r9	; 0x08
    96ae:	87 82       	std	Z+7, r8	; 0x07
    96b0:	c4 01       	movw	r24, r8
    96b2:	8f 70       	andi	r24, 0x0F	; 15
    96b4:	99 27       	eor	r25, r25
    96b6:	89 2b       	or	r24, r25
    96b8:	09 f0       	breq	.+2      	; 0x96bc <mount_volume+0x1a6>
    96ba:	b1 cf       	rjmp	.-158    	; 0x961e <mount_volume+0x108>
    96bc:	e8 5b       	subi	r30, 0xB8	; 184
    96be:	ff 4f       	sbci	r31, 0xFF	; 255
    96c0:	80 81       	ld	r24, Z
    96c2:	91 81       	ldd	r25, Z+1	; 0x01
    96c4:	6c 01       	movw	r12, r24
    96c6:	e1 2c       	mov	r14, r1
    96c8:	f1 2c       	mov	r15, r1
    96ca:	89 2b       	or	r24, r25
    96cc:	31 f4       	brne	.+12     	; 0x96da <mount_volume+0x1c4>
    96ce:	c8 01       	movw	r24, r16
    96d0:	8b 5a       	subi	r24, 0xAB	; 171
    96d2:	9f 4f       	sbci	r25, 0xFF	; 255
    96d4:	ca d9       	rcall	.-3180   	; 0x8a6a <ld_dword>
    96d6:	6b 01       	movw	r12, r22
    96d8:	7c 01       	movw	r14, r24
    96da:	f8 01       	movw	r30, r16
    96dc:	ed 5b       	subi	r30, 0xBD	; 189
    96de:	ff 4f       	sbci	r31, 0xFF	; 255
    96e0:	01 90       	ld	r0, Z+
    96e2:	f0 81       	ld	r31, Z
    96e4:	e0 2d       	mov	r30, r0
    96e6:	30 97       	sbiw	r30, 0x00	; 0
    96e8:	09 f4       	brne	.+2      	; 0x96ec <mount_volume+0x1d6>
    96ea:	99 cf       	rjmp	.-206    	; 0x961e <mount_volume+0x108>
    96ec:	aa 2d       	mov	r26, r10
    96ee:	b0 e0       	ldi	r27, 0x00	; 0
    96f0:	a3 01       	movw	r20, r6
    96f2:	92 01       	movw	r18, r4
    96f4:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    96f8:	69 8f       	std	Y+25, r22	; 0x19
    96fa:	7a 8f       	std	Y+26, r23	; 0x1a
    96fc:	8b 8f       	std	Y+27, r24	; 0x1b
    96fe:	9c 8f       	std	Y+28, r25	; 0x1c
    9700:	9f 01       	movw	r18, r30
    9702:	40 e0       	ldi	r20, 0x00	; 0
    9704:	50 e0       	ldi	r21, 0x00	; 0
    9706:	2d 8f       	std	Y+29, r18	; 0x1d
    9708:	3e 8f       	std	Y+30, r19	; 0x1e
    970a:	4f 8f       	std	Y+31, r20	; 0x1f
    970c:	58 a3       	std	Y+32, r21	; 0x20
    970e:	c4 01       	movw	r24, r8
    9710:	f4 e0       	ldi	r31, 0x04	; 4
    9712:	96 95       	lsr	r25
    9714:	87 95       	ror	r24
    9716:	fa 95       	dec	r31
    9718:	e1 f7       	brne	.-8      	; 0x9712 <mount_volume+0x1fc>
    971a:	28 0f       	add	r18, r24
    971c:	39 1f       	adc	r19, r25
    971e:	41 1d       	adc	r20, r1
    9720:	51 1d       	adc	r21, r1
    9722:	da 01       	movw	r26, r20
    9724:	c9 01       	movw	r24, r18
    9726:	29 8d       	ldd	r18, Y+25	; 0x19
    9728:	3a 8d       	ldd	r19, Y+26	; 0x1a
    972a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    972c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    972e:	28 0f       	add	r18, r24
    9730:	39 1f       	adc	r19, r25
    9732:	4a 1f       	adc	r20, r26
    9734:	5b 1f       	adc	r21, r27
    9736:	2d 8b       	std	Y+21, r18	; 0x15
    9738:	3e 8b       	std	Y+22, r19	; 0x16
    973a:	4f 8b       	std	Y+23, r20	; 0x17
    973c:	58 8f       	std	Y+24, r21	; 0x18
    973e:	c2 16       	cp	r12, r18
    9740:	d3 06       	cpc	r13, r19
    9742:	e4 06       	cpc	r14, r20
    9744:	f5 06       	cpc	r15, r21
    9746:	08 f4       	brcc	.+2      	; 0x974a <mount_volume+0x234>
    9748:	6a cf       	rjmp	.-300    	; 0x961e <mount_volume+0x108>
    974a:	c7 01       	movw	r24, r14
    974c:	b6 01       	movw	r22, r12
    974e:	62 1b       	sub	r22, r18
    9750:	73 0b       	sbc	r23, r19
    9752:	84 0b       	sbc	r24, r20
    9754:	95 0b       	sbc	r25, r21
    9756:	2b 2d       	mov	r18, r11
    9758:	30 e0       	ldi	r19, 0x00	; 0
    975a:	40 e0       	ldi	r20, 0x00	; 0
    975c:	50 e0       	ldi	r21, 0x00	; 0
    975e:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    9762:	da 01       	movw	r26, r20
    9764:	c9 01       	movw	r24, r18
    9766:	01 97       	sbiw	r24, 0x01	; 1
    9768:	a1 09       	sbc	r26, r1
    976a:	b1 09       	sbc	r27, r1
    976c:	85 3f       	cpi	r24, 0xF5	; 245
    976e:	9f 4f       	sbci	r25, 0xFF	; 255
    9770:	af 4f       	sbci	r26, 0xFF	; 255
    9772:	bf 40       	sbci	r27, 0x0F	; 15
    9774:	08 f0       	brcs	.+2      	; 0x9778 <mount_volume+0x262>
    9776:	53 cf       	rjmp	.-346    	; 0x961e <mount_volume+0x108>
    9778:	26 3f       	cpi	r18, 0xF6	; 246
    977a:	8f ef       	ldi	r24, 0xFF	; 255
    977c:	38 07       	cpc	r19, r24
    977e:	41 05       	cpc	r20, r1
    9780:	51 05       	cpc	r21, r1
    9782:	50 f4       	brcc	.+20     	; 0x9798 <mount_volume+0x282>
    9784:	26 3f       	cpi	r18, 0xF6	; 246
    9786:	9f e0       	ldi	r25, 0x0F	; 15
    9788:	39 07       	cpc	r19, r25
    978a:	41 05       	cpc	r20, r1
    978c:	51 05       	cpc	r21, r1
    978e:	40 f4       	brcc	.+16     	; 0x97a0 <mount_volume+0x28a>
    9790:	aa 24       	eor	r10, r10
    9792:	a3 94       	inc	r10
    9794:	b1 2c       	mov	r11, r1
    9796:	07 c0       	rjmp	.+14     	; 0x97a6 <mount_volume+0x290>
    9798:	73 e0       	ldi	r23, 0x03	; 3
    979a:	a7 2e       	mov	r10, r23
    979c:	b1 2c       	mov	r11, r1
    979e:	03 c0       	rjmp	.+6      	; 0x97a6 <mount_volume+0x290>
    97a0:	62 e0       	ldi	r22, 0x02	; 2
    97a2:	a6 2e       	mov	r10, r22
    97a4:	b1 2c       	mov	r11, r1
    97a6:	69 01       	movw	r12, r18
    97a8:	7a 01       	movw	r14, r20
    97aa:	a2 e0       	ldi	r26, 0x02	; 2
    97ac:	ca 0e       	add	r12, r26
    97ae:	d1 1c       	adc	r13, r1
    97b0:	e1 1c       	adc	r14, r1
    97b2:	f1 1c       	adc	r15, r1
    97b4:	f8 01       	movw	r30, r16
    97b6:	c1 8e       	std	Z+25, r12	; 0x19
    97b8:	d2 8e       	std	Z+26, r13	; 0x1a
    97ba:	e3 8e       	std	Z+27, r14	; 0x1b
    97bc:	f4 8e       	std	Z+28, r15	; 0x1c
    97be:	29 89       	ldd	r18, Y+17	; 0x11
    97c0:	3a 89       	ldd	r19, Y+18	; 0x12
    97c2:	4b 89       	ldd	r20, Y+19	; 0x13
    97c4:	5c 89       	ldd	r21, Y+20	; 0x14
    97c6:	21 a3       	std	Z+33, r18	; 0x21
    97c8:	32 a3       	std	Z+34, r19	; 0x22
    97ca:	43 a3       	std	Z+35, r20	; 0x23
    97cc:	54 a3       	std	Z+36, r21	; 0x24
    97ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    97d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    97d2:	af 8d       	ldd	r26, Y+31	; 0x1f
    97d4:	b8 a1       	ldd	r27, Y+32	; 0x20
    97d6:	28 0f       	add	r18, r24
    97d8:	39 1f       	adc	r19, r25
    97da:	4a 1f       	adc	r20, r26
    97dc:	5b 1f       	adc	r21, r27
    97de:	2d 8f       	std	Y+29, r18	; 0x1d
    97e0:	3e 8f       	std	Y+30, r19	; 0x1e
    97e2:	4f 8f       	std	Y+31, r20	; 0x1f
    97e4:	58 a3       	std	Y+32, r21	; 0x20
    97e6:	25 a3       	std	Z+37, r18	; 0x25
    97e8:	36 a3       	std	Z+38, r19	; 0x26
    97ea:	47 a3       	std	Z+39, r20	; 0x27
    97ec:	50 a7       	std	Z+40, r21	; 0x28
    97ee:	49 89       	ldd	r20, Y+17	; 0x11
    97f0:	5a 89       	ldd	r21, Y+18	; 0x12
    97f2:	6b 89       	ldd	r22, Y+19	; 0x13
    97f4:	7c 89       	ldd	r23, Y+20	; 0x14
    97f6:	8d 89       	ldd	r24, Y+21	; 0x15
    97f8:	9e 89       	ldd	r25, Y+22	; 0x16
    97fa:	af 89       	ldd	r26, Y+23	; 0x17
    97fc:	b8 8d       	ldd	r27, Y+24	; 0x18
    97fe:	48 0f       	add	r20, r24
    9800:	59 1f       	adc	r21, r25
    9802:	6a 1f       	adc	r22, r26
    9804:	7b 1f       	adc	r23, r27
    9806:	45 a7       	std	Z+45, r20	; 0x2d
    9808:	56 a7       	std	Z+46, r21	; 0x2e
    980a:	67 a7       	std	Z+47, r22	; 0x2f
    980c:	70 ab       	std	Z+48, r23	; 0x30
    980e:	f3 e0       	ldi	r31, 0x03	; 3
    9810:	af 16       	cp	r10, r31
    9812:	b1 04       	cpc	r11, r1
    9814:	e9 f4       	brne	.+58     	; 0x9850 <mount_volume+0x33a>
    9816:	f8 01       	movw	r30, r16
    9818:	e1 5a       	subi	r30, 0xA1	; 161
    981a:	ff 4f       	sbci	r31, 0xFF	; 255
    981c:	80 81       	ld	r24, Z
    981e:	91 81       	ldd	r25, Z+1	; 0x01
    9820:	89 2b       	or	r24, r25
    9822:	09 f0       	breq	.+2      	; 0x9826 <mount_volume+0x310>
    9824:	fc ce       	rjmp	.-520    	; 0x961e <mount_volume+0x108>
    9826:	81 14       	cp	r8, r1
    9828:	91 04       	cpc	r9, r1
    982a:	09 f0       	breq	.+2      	; 0x982e <mount_volume+0x318>
    982c:	f8 ce       	rjmp	.-528    	; 0x961e <mount_volume+0x108>
    982e:	c8 01       	movw	r24, r16
    9830:	8f 59       	subi	r24, 0x9F	; 159
    9832:	9f 4f       	sbci	r25, 0xFF	; 255
    9834:	1a d9       	rcall	.-3532   	; 0x8a6a <ld_dword>
    9836:	f8 01       	movw	r30, r16
    9838:	61 a7       	std	Z+41, r22	; 0x29
    983a:	72 a7       	std	Z+42, r23	; 0x2a
    983c:	83 a7       	std	Z+43, r24	; 0x2b
    983e:	94 a7       	std	Z+44, r25	; 0x2c
    9840:	42 e0       	ldi	r20, 0x02	; 2
    9842:	cc 0c       	add	r12, r12
    9844:	dd 1c       	adc	r13, r13
    9846:	ee 1c       	adc	r14, r14
    9848:	ff 1c       	adc	r15, r15
    984a:	4a 95       	dec	r20
    984c:	d1 f7       	brne	.-12     	; 0x9842 <mount_volume+0x32c>
    984e:	33 c0       	rjmp	.+102    	; 0x98b6 <mount_volume+0x3a0>
    9850:	81 14       	cp	r8, r1
    9852:	91 04       	cpc	r9, r1
    9854:	09 f4       	brne	.+2      	; 0x9858 <mount_volume+0x342>
    9856:	e3 ce       	rjmp	.-570    	; 0x961e <mount_volume+0x108>
    9858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    985a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    985c:	af 8d       	ldd	r26, Y+31	; 0x1f
    985e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9860:	29 8d       	ldd	r18, Y+25	; 0x19
    9862:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9864:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9866:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9868:	82 0f       	add	r24, r18
    986a:	93 1f       	adc	r25, r19
    986c:	a4 1f       	adc	r26, r20
    986e:	b5 1f       	adc	r27, r21
    9870:	f8 01       	movw	r30, r16
    9872:	81 a7       	std	Z+41, r24	; 0x29
    9874:	92 a7       	std	Z+42, r25	; 0x2a
    9876:	a3 a7       	std	Z+43, r26	; 0x2b
    9878:	b4 a7       	std	Z+44, r27	; 0x2c
    987a:	f2 e0       	ldi	r31, 0x02	; 2
    987c:	af 16       	cp	r10, r31
    987e:	b1 04       	cpc	r11, r1
    9880:	29 f4       	brne	.+10     	; 0x988c <mount_volume+0x376>
    9882:	cc 0c       	add	r12, r12
    9884:	dd 1c       	adc	r13, r13
    9886:	ee 1c       	adc	r14, r14
    9888:	ff 1c       	adc	r15, r15
    988a:	15 c0       	rjmp	.+42     	; 0x98b6 <mount_volume+0x3a0>
    988c:	a3 e0       	ldi	r26, 0x03	; 3
    988e:	b0 e0       	ldi	r27, 0x00	; 0
    9890:	a7 01       	movw	r20, r14
    9892:	96 01       	movw	r18, r12
    9894:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    9898:	dc 01       	movw	r26, r24
    989a:	cb 01       	movw	r24, r22
    989c:	b6 95       	lsr	r27
    989e:	a7 95       	ror	r26
    98a0:	97 95       	ror	r25
    98a2:	87 95       	ror	r24
    98a4:	21 e0       	ldi	r18, 0x01	; 1
    98a6:	c2 22       	and	r12, r18
    98a8:	dd 24       	eor	r13, r13
    98aa:	ee 24       	eor	r14, r14
    98ac:	ff 24       	eor	r15, r15
    98ae:	c8 0e       	add	r12, r24
    98b0:	d9 1e       	adc	r13, r25
    98b2:	ea 1e       	adc	r14, r26
    98b4:	fb 1e       	adc	r15, r27
    98b6:	3f ef       	ldi	r19, 0xFF	; 255
    98b8:	c3 0e       	add	r12, r19
    98ba:	31 e0       	ldi	r19, 0x01	; 1
    98bc:	d3 1e       	adc	r13, r19
    98be:	e1 1c       	adc	r14, r1
    98c0:	f1 1c       	adc	r15, r1
    98c2:	89 e0       	ldi	r24, 0x09	; 9
    98c4:	f6 94       	lsr	r15
    98c6:	e7 94       	ror	r14
    98c8:	d7 94       	ror	r13
    98ca:	c7 94       	ror	r12
    98cc:	8a 95       	dec	r24
    98ce:	d1 f7       	brne	.-12     	; 0x98c4 <mount_volume+0x3ae>
    98d0:	4c 14       	cp	r4, r12
    98d2:	5d 04       	cpc	r5, r13
    98d4:	6e 04       	cpc	r6, r14
    98d6:	7f 04       	cpc	r7, r15
    98d8:	08 f4       	brcc	.+2      	; 0x98dc <mount_volume+0x3c6>
    98da:	a1 ce       	rjmp	.-702    	; 0x961e <mount_volume+0x108>
    98dc:	8f ef       	ldi	r24, 0xFF	; 255
    98de:	9f ef       	ldi	r25, 0xFF	; 255
    98e0:	dc 01       	movw	r26, r24
    98e2:	f8 01       	movw	r30, r16
    98e4:	81 8b       	std	Z+17, r24	; 0x11
    98e6:	92 8b       	std	Z+18, r25	; 0x12
    98e8:	a3 8b       	std	Z+19, r26	; 0x13
    98ea:	b4 8b       	std	Z+20, r27	; 0x14
    98ec:	85 87       	std	Z+13, r24	; 0x0d
    98ee:	96 87       	std	Z+14, r25	; 0x0e
    98f0:	a7 87       	std	Z+15, r26	; 0x0f
    98f2:	b0 8b       	std	Z+16, r27	; 0x10
    98f4:	80 e8       	ldi	r24, 0x80	; 128
    98f6:	84 83       	std	Z+4, r24	; 0x04
    98f8:	f3 e0       	ldi	r31, 0x03	; 3
    98fa:	af 16       	cp	r10, r31
    98fc:	b1 04       	cpc	r11, r1
    98fe:	09 f0       	breq	.+2      	; 0x9902 <mount_volume+0x3ec>
    9900:	3f c0       	rjmp	.+126    	; 0x9980 <mount_volume+0x46a>
    9902:	f8 01       	movw	r30, r16
    9904:	eb 59       	subi	r30, 0x9B	; 155
    9906:	ff 4f       	sbci	r31, 0xFF	; 255
    9908:	80 81       	ld	r24, Z
    990a:	91 81       	ldd	r25, Z+1	; 0x01
    990c:	01 97       	sbiw	r24, 0x01	; 1
    990e:	c1 f5       	brne	.+112    	; 0x9980 <mount_volume+0x46a>
    9910:	49 89       	ldd	r20, Y+17	; 0x11
    9912:	5a 89       	ldd	r21, Y+18	; 0x12
    9914:	6b 89       	ldd	r22, Y+19	; 0x13
    9916:	7c 89       	ldd	r23, Y+20	; 0x14
    9918:	4f 5f       	subi	r20, 0xFF	; 255
    991a:	5f 4f       	sbci	r21, 0xFF	; 255
    991c:	6f 4f       	sbci	r22, 0xFF	; 255
    991e:	7f 4f       	sbci	r23, 0xFF	; 255
    9920:	c8 01       	movw	r24, r16
    9922:	7e dd       	rcall	.-1284   	; 0x9420 <move_window>
    9924:	89 2b       	or	r24, r25
    9926:	61 f5       	brne	.+88     	; 0x9980 <mount_volume+0x46a>
    9928:	f8 01       	movw	r30, r16
    992a:	14 82       	std	Z+4, r1	; 0x04
    992c:	ed 5c       	subi	r30, 0xCD	; 205
    992e:	fd 4f       	sbci	r31, 0xFD	; 253
    9930:	80 81       	ld	r24, Z
    9932:	91 81       	ldd	r25, Z+1	; 0x01
    9934:	85 35       	cpi	r24, 0x55	; 85
    9936:	9a 4a       	sbci	r25, 0xAA	; 170
    9938:	19 f5       	brne	.+70     	; 0x9980 <mount_volume+0x46a>
    993a:	c8 01       	movw	r24, r16
    993c:	c5 96       	adiw	r24, 0x35	; 53
    993e:	95 d8       	rcall	.-3798   	; 0x8a6a <ld_dword>
    9940:	62 35       	cpi	r22, 0x52	; 82
    9942:	72 45       	sbci	r23, 0x52	; 82
    9944:	81 46       	sbci	r24, 0x61	; 97
    9946:	91 44       	sbci	r25, 0x41	; 65
    9948:	d9 f4       	brne	.+54     	; 0x9980 <mount_volume+0x46a>
    994a:	c8 01       	movw	r24, r16
    994c:	87 5e       	subi	r24, 0xE7	; 231
    994e:	9d 4f       	sbci	r25, 0xFD	; 253
    9950:	8c d8       	rcall	.-3816   	; 0x8a6a <ld_dword>
    9952:	62 37       	cpi	r22, 0x72	; 114
    9954:	72 47       	sbci	r23, 0x72	; 114
    9956:	81 44       	sbci	r24, 0x41	; 65
    9958:	91 46       	sbci	r25, 0x61	; 97
    995a:	91 f4       	brne	.+36     	; 0x9980 <mount_volume+0x46a>
    995c:	c8 01       	movw	r24, r16
    995e:	83 5e       	subi	r24, 0xE3	; 227
    9960:	9d 4f       	sbci	r25, 0xFD	; 253
    9962:	83 d8       	rcall	.-3834   	; 0x8a6a <ld_dword>
    9964:	f8 01       	movw	r30, r16
    9966:	61 8b       	std	Z+17, r22	; 0x11
    9968:	72 8b       	std	Z+18, r23	; 0x12
    996a:	83 8b       	std	Z+19, r24	; 0x13
    996c:	94 8b       	std	Z+20, r25	; 0x14
    996e:	c8 01       	movw	r24, r16
    9970:	8f 5d       	subi	r24, 0xDF	; 223
    9972:	9d 4f       	sbci	r25, 0xFD	; 253
    9974:	7a d8       	rcall	.-3852   	; 0x8a6a <ld_dword>
    9976:	f8 01       	movw	r30, r16
    9978:	65 87       	std	Z+13, r22	; 0x0d
    997a:	76 87       	std	Z+14, r23	; 0x0e
    997c:	87 87       	std	Z+15, r24	; 0x0f
    997e:	90 8b       	std	Z+16, r25	; 0x10
    9980:	d8 01       	movw	r26, r16
    9982:	ac 92       	st	X, r10
    9984:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <Fsid>
    9988:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <Fsid+0x1>
    998c:	01 96       	adiw	r24, 0x01	; 1
    998e:	90 93 12 18 	sts	0x1812, r25	; 0x801812 <Fsid+0x1>
    9992:	80 93 11 18 	sts	0x1811, r24	; 0x801811 <Fsid>
    9996:	f8 01       	movw	r30, r16
    9998:	96 83       	std	Z+6, r25	; 0x06
    999a:	85 83       	std	Z+5, r24	; 0x05
    999c:	15 8a       	std	Z+21, r1	; 0x15
    999e:	16 8a       	std	Z+22, r1	; 0x16
    99a0:	17 8a       	std	Z+23, r1	; 0x17
    99a2:	10 8e       	std	Z+24, r1	; 0x18
    99a4:	06 c0       	rjmp	.+12     	; 0x99b2 <mount_volume+0x49c>
    99a6:	8b e0       	ldi	r24, 0x0B	; 11
    99a8:	90 e0       	ldi	r25, 0x00	; 0
    99aa:	0b c0       	rjmp	.+22     	; 0x99c2 <mount_volume+0x4ac>
    99ac:	8c e0       	ldi	r24, 0x0C	; 12
    99ae:	90 e0       	ldi	r25, 0x00	; 0
    99b0:	08 c0       	rjmp	.+16     	; 0x99c2 <mount_volume+0x4ac>
    99b2:	80 e0       	ldi	r24, 0x00	; 0
    99b4:	90 e0       	ldi	r25, 0x00	; 0
    99b6:	05 c0       	rjmp	.+10     	; 0x99c2 <mount_volume+0x4ac>
    99b8:	83 e0       	ldi	r24, 0x03	; 3
    99ba:	90 e0       	ldi	r25, 0x00	; 0
    99bc:	02 c0       	rjmp	.+4      	; 0x99c2 <mount_volume+0x4ac>
    99be:	81 e0       	ldi	r24, 0x01	; 1
    99c0:	90 e0       	ldi	r25, 0x00	; 0
    99c2:	a0 96       	adiw	r28, 0x20	; 32
    99c4:	e0 e1       	ldi	r30, 0x10	; 16
    99c6:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

000099ca <put_fat>:
    99ca:	a6 e0       	ldi	r26, 0x06	; 6
    99cc:	b0 e0       	ldi	r27, 0x00	; 0
    99ce:	eb ee       	ldi	r30, 0xEB	; 235
    99d0:	fc e4       	ldi	r31, 0x4C	; 76
    99d2:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    99d6:	42 30       	cpi	r20, 0x02	; 2
    99d8:	51 05       	cpc	r21, r1
    99da:	61 05       	cpc	r22, r1
    99dc:	71 05       	cpc	r23, r1
    99de:	08 f4       	brcc	.+2      	; 0x99e2 <put_fat+0x18>
    99e0:	e7 c0       	rjmp	.+462    	; 0x9bb0 <put_fat+0x1e6>
    99e2:	fc 01       	movw	r30, r24
    99e4:	c1 8c       	ldd	r12, Z+25	; 0x19
    99e6:	d2 8c       	ldd	r13, Z+26	; 0x1a
    99e8:	e3 8c       	ldd	r14, Z+27	; 0x1b
    99ea:	f4 8c       	ldd	r15, Z+28	; 0x1c
    99ec:	4c 15       	cp	r20, r12
    99ee:	5d 05       	cpc	r21, r13
    99f0:	6e 05       	cpc	r22, r14
    99f2:	7f 05       	cpc	r23, r15
    99f4:	08 f0       	brcs	.+2      	; 0x99f8 <put_fat+0x2e>
    99f6:	dc c0       	rjmp	.+440    	; 0x9bb0 <put_fat+0x1e6>
    99f8:	28 01       	movw	r4, r16
    99fa:	39 01       	movw	r6, r18
    99fc:	6a 01       	movw	r12, r20
    99fe:	7b 01       	movw	r14, r22
    9a00:	9e 83       	std	Y+6, r25	; 0x06
    9a02:	8d 83       	std	Y+5, r24	; 0x05
    9a04:	80 81       	ld	r24, Z
    9a06:	82 30       	cpi	r24, 0x02	; 2
    9a08:	09 f4       	brne	.+2      	; 0x9a0c <put_fat+0x42>
    9a0a:	73 c0       	rjmp	.+230    	; 0x9af2 <put_fat+0x128>
    9a0c:	83 30       	cpi	r24, 0x03	; 3
    9a0e:	09 f4       	brne	.+2      	; 0x9a12 <put_fat+0x48>
    9a10:	92 c0       	rjmp	.+292    	; 0x9b36 <put_fat+0x16c>
    9a12:	81 30       	cpi	r24, 0x01	; 1
    9a14:	09 f0       	breq	.+2      	; 0x9a18 <put_fat+0x4e>
    9a16:	cc c0       	rjmp	.+408    	; 0x9bb0 <put_fat+0x1e6>
    9a18:	4a 01       	movw	r8, r20
    9a1a:	96 94       	lsr	r9
    9a1c:	87 94       	ror	r8
    9a1e:	84 0e       	add	r8, r20
    9a20:	95 1e       	adc	r9, r21
    9a22:	c4 01       	movw	r24, r8
    9a24:	89 2f       	mov	r24, r25
    9a26:	99 27       	eor	r25, r25
    9a28:	86 95       	lsr	r24
    9a2a:	45 a1       	ldd	r20, Z+37	; 0x25
    9a2c:	56 a1       	ldd	r21, Z+38	; 0x26
    9a2e:	67 a1       	ldd	r22, Z+39	; 0x27
    9a30:	70 a5       	ldd	r23, Z+40	; 0x28
    9a32:	48 0f       	add	r20, r24
    9a34:	59 1f       	adc	r21, r25
    9a36:	61 1d       	adc	r22, r1
    9a38:	71 1d       	adc	r23, r1
    9a3a:	cf 01       	movw	r24, r30
    9a3c:	f1 dc       	rcall	.-1566   	; 0x9420 <move_window>
    9a3e:	5c 01       	movw	r10, r24
    9a40:	89 2b       	or	r24, r25
    9a42:	09 f0       	breq	.+2      	; 0x9a46 <put_fat+0x7c>
    9a44:	b8 c0       	rjmp	.+368    	; 0x9bb6 <put_fat+0x1ec>
    9a46:	2d 80       	ldd	r2, Y+5	; 0x05
    9a48:	3e 80       	ldd	r3, Y+6	; 0x06
    9a4a:	f5 e3       	ldi	r31, 0x35	; 53
    9a4c:	2f 0e       	add	r2, r31
    9a4e:	31 1c       	adc	r3, r1
    9a50:	84 01       	movw	r16, r8
    9a52:	0f 5f       	subi	r16, 0xFF	; 255
    9a54:	1f 4f       	sbci	r17, 0xFF	; 255
    9a56:	21 e0       	ldi	r18, 0x01	; 1
    9a58:	92 22       	and	r9, r18
    9a5a:	f1 01       	movw	r30, r2
    9a5c:	e8 0d       	add	r30, r8
    9a5e:	f9 1d       	adc	r31, r9
    9a60:	d7 01       	movw	r26, r14
    9a62:	c6 01       	movw	r24, r12
    9a64:	81 70       	andi	r24, 0x01	; 1
    9a66:	99 27       	eor	r25, r25
    9a68:	aa 27       	eor	r26, r26
    9a6a:	bb 27       	eor	r27, r27
    9a6c:	89 83       	std	Y+1, r24	; 0x01
    9a6e:	9a 83       	std	Y+2, r25	; 0x02
    9a70:	ab 83       	std	Y+3, r26	; 0x03
    9a72:	bc 83       	std	Y+4, r27	; 0x04
    9a74:	c0 fe       	sbrs	r12, 0
    9a76:	09 c0       	rjmp	.+18     	; 0x9a8a <put_fat+0xc0>
    9a78:	80 81       	ld	r24, Z
    9a7a:	28 2f       	mov	r18, r24
    9a7c:	2f 70       	andi	r18, 0x0F	; 15
    9a7e:	a0 e1       	ldi	r26, 0x10	; 16
    9a80:	4a 9e       	mul	r4, r26
    9a82:	c0 01       	movw	r24, r0
    9a84:	11 24       	eor	r1, r1
    9a86:	82 2b       	or	r24, r18
    9a88:	01 c0       	rjmp	.+2      	; 0x9a8c <put_fat+0xc2>
    9a8a:	84 2d       	mov	r24, r4
    9a8c:	80 83       	st	Z, r24
    9a8e:	81 e0       	ldi	r24, 0x01	; 1
    9a90:	ed 81       	ldd	r30, Y+5	; 0x05
    9a92:	fe 81       	ldd	r31, Y+6	; 0x06
    9a94:	83 83       	std	Z+3, r24	; 0x03
    9a96:	45 a1       	ldd	r20, Z+37	; 0x25
    9a98:	56 a1       	ldd	r21, Z+38	; 0x26
    9a9a:	67 a1       	ldd	r22, Z+39	; 0x27
    9a9c:	70 a5       	ldd	r23, Z+40	; 0x28
    9a9e:	c8 01       	movw	r24, r16
    9aa0:	89 2f       	mov	r24, r25
    9aa2:	99 27       	eor	r25, r25
    9aa4:	86 95       	lsr	r24
    9aa6:	48 0f       	add	r20, r24
    9aa8:	59 1f       	adc	r21, r25
    9aaa:	61 1d       	adc	r22, r1
    9aac:	71 1d       	adc	r23, r1
    9aae:	cf 01       	movw	r24, r30
    9ab0:	b7 dc       	rcall	.-1682   	; 0x9420 <move_window>
    9ab2:	5c 01       	movw	r10, r24
    9ab4:	89 2b       	or	r24, r25
    9ab6:	09 f0       	breq	.+2      	; 0x9aba <put_fat+0xf0>
    9ab8:	7e c0       	rjmp	.+252    	; 0x9bb6 <put_fat+0x1ec>
    9aba:	11 70       	andi	r17, 0x01	; 1
    9abc:	f1 01       	movw	r30, r2
    9abe:	e0 0f       	add	r30, r16
    9ac0:	f1 1f       	adc	r31, r17
    9ac2:	89 81       	ldd	r24, Y+1	; 0x01
    9ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    9ac6:	ab 81       	ldd	r26, Y+3	; 0x03
    9ac8:	bc 81       	ldd	r27, Y+4	; 0x04
    9aca:	89 2b       	or	r24, r25
    9acc:	8a 2b       	or	r24, r26
    9ace:	8b 2b       	or	r24, r27
    9ad0:	41 f0       	breq	.+16     	; 0x9ae2 <put_fat+0x118>
    9ad2:	54 e0       	ldi	r21, 0x04	; 4
    9ad4:	76 94       	lsr	r7
    9ad6:	67 94       	ror	r6
    9ad8:	57 94       	ror	r5
    9ada:	47 94       	ror	r4
    9adc:	5a 95       	dec	r21
    9ade:	d1 f7       	brne	.-12     	; 0x9ad4 <put_fat+0x10a>
    9ae0:	06 c0       	rjmp	.+12     	; 0x9aee <put_fat+0x124>
    9ae2:	00 81       	ld	r16, Z
    9ae4:	00 7f       	andi	r16, 0xF0	; 240
    9ae6:	85 2d       	mov	r24, r5
    9ae8:	8f 70       	andi	r24, 0x0F	; 15
    9aea:	40 2e       	mov	r4, r16
    9aec:	48 2a       	or	r4, r24
    9aee:	40 82       	st	Z, r4
    9af0:	5a c0       	rjmp	.+180    	; 0x9ba6 <put_fat+0x1dc>
    9af2:	77 27       	eor	r23, r23
    9af4:	6f 2d       	mov	r22, r15
    9af6:	5e 2d       	mov	r21, r14
    9af8:	4d 2d       	mov	r20, r13
    9afa:	ed 81       	ldd	r30, Y+5	; 0x05
    9afc:	fe 81       	ldd	r31, Y+6	; 0x06
    9afe:	85 a1       	ldd	r24, Z+37	; 0x25
    9b00:	96 a1       	ldd	r25, Z+38	; 0x26
    9b02:	a7 a1       	ldd	r26, Z+39	; 0x27
    9b04:	b0 a5       	ldd	r27, Z+40	; 0x28
    9b06:	48 0f       	add	r20, r24
    9b08:	59 1f       	adc	r21, r25
    9b0a:	6a 1f       	adc	r22, r26
    9b0c:	7b 1f       	adc	r23, r27
    9b0e:	cf 01       	movw	r24, r30
    9b10:	87 dc       	rcall	.-1778   	; 0x9420 <move_window>
    9b12:	5c 01       	movw	r10, r24
    9b14:	89 2b       	or	r24, r25
    9b16:	09 f0       	breq	.+2      	; 0x9b1a <put_fat+0x150>
    9b18:	4e c0       	rjmp	.+156    	; 0x9bb6 <put_fat+0x1ec>
    9b1a:	ed 81       	ldd	r30, Y+5	; 0x05
    9b1c:	fe 81       	ldd	r31, Y+6	; 0x06
    9b1e:	f5 96       	adiw	r30, 0x35	; 53
    9b20:	cc 0c       	add	r12, r12
    9b22:	dd 1c       	adc	r13, r13
    9b24:	e8 94       	clt
    9b26:	c0 f8       	bld	r12, 0
    9b28:	21 e0       	ldi	r18, 0x01	; 1
    9b2a:	d2 22       	and	r13, r18
    9b2c:	ec 0d       	add	r30, r12
    9b2e:	fd 1d       	adc	r31, r13
    9b30:	40 82       	st	Z, r4
    9b32:	51 82       	std	Z+1, r5	; 0x01
    9b34:	38 c0       	rjmp	.+112    	; 0x9ba6 <put_fat+0x1dc>
    9b36:	ed 81       	ldd	r30, Y+5	; 0x05
    9b38:	fe 81       	ldd	r31, Y+6	; 0x06
    9b3a:	85 a1       	ldd	r24, Z+37	; 0x25
    9b3c:	96 a1       	ldd	r25, Z+38	; 0x26
    9b3e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9b40:	b0 a5       	ldd	r27, Z+40	; 0x28
    9b42:	27 e0       	ldi	r18, 0x07	; 7
    9b44:	76 95       	lsr	r23
    9b46:	67 95       	ror	r22
    9b48:	57 95       	ror	r21
    9b4a:	47 95       	ror	r20
    9b4c:	2a 95       	dec	r18
    9b4e:	d1 f7       	brne	.-12     	; 0x9b44 <put_fat+0x17a>
    9b50:	48 0f       	add	r20, r24
    9b52:	59 1f       	adc	r21, r25
    9b54:	6a 1f       	adc	r22, r26
    9b56:	7b 1f       	adc	r23, r27
    9b58:	cf 01       	movw	r24, r30
    9b5a:	62 dc       	rcall	.-1852   	; 0x9420 <move_window>
    9b5c:	5c 01       	movw	r10, r24
    9b5e:	89 2b       	or	r24, r25
    9b60:	51 f5       	brne	.+84     	; 0x9bb6 <put_fat+0x1ec>
    9b62:	4d 81       	ldd	r20, Y+5	; 0x05
    9b64:	5e 81       	ldd	r21, Y+6	; 0x06
    9b66:	4b 5c       	subi	r20, 0xCB	; 203
    9b68:	5f 4f       	sbci	r21, 0xFF	; 255
    9b6a:	cc 0c       	add	r12, r12
    9b6c:	dd 1c       	adc	r13, r13
    9b6e:	cc 0c       	add	r12, r12
    9b70:	dd 1c       	adc	r13, r13
    9b72:	fc ef       	ldi	r31, 0xFC	; 252
    9b74:	cf 22       	and	r12, r31
    9b76:	f1 e0       	ldi	r31, 0x01	; 1
    9b78:	df 22       	and	r13, r31
    9b7a:	c4 0e       	add	r12, r20
    9b7c:	d5 1e       	adc	r13, r21
    9b7e:	c6 01       	movw	r24, r12
    9b80:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <ld_dword>
    9b84:	2f e0       	ldi	r18, 0x0F	; 15
    9b86:	72 22       	and	r7, r18
    9b88:	dc 01       	movw	r26, r24
    9b8a:	cb 01       	movw	r24, r22
    9b8c:	88 27       	eor	r24, r24
    9b8e:	99 27       	eor	r25, r25
    9b90:	aa 27       	eor	r26, r26
    9b92:	b0 7f       	andi	r27, 0xF0	; 240
    9b94:	b3 01       	movw	r22, r6
    9b96:	a2 01       	movw	r20, r4
    9b98:	48 2b       	or	r20, r24
    9b9a:	59 2b       	or	r21, r25
    9b9c:	6a 2b       	or	r22, r26
    9b9e:	7b 2b       	or	r23, r27
    9ba0:	c6 01       	movw	r24, r12
    9ba2:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
    9ba6:	81 e0       	ldi	r24, 0x01	; 1
    9ba8:	ed 81       	ldd	r30, Y+5	; 0x05
    9baa:	fe 81       	ldd	r31, Y+6	; 0x06
    9bac:	83 83       	std	Z+3, r24	; 0x03
    9bae:	03 c0       	rjmp	.+6      	; 0x9bb6 <put_fat+0x1ec>
    9bb0:	82 e0       	ldi	r24, 0x02	; 2
    9bb2:	a8 2e       	mov	r10, r24
    9bb4:	b1 2c       	mov	r11, r1
    9bb6:	c5 01       	movw	r24, r10
    9bb8:	26 96       	adiw	r28, 0x06	; 6
    9bba:	e2 e1       	ldi	r30, 0x12	; 18
    9bbc:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00009bc0 <get_fat.isra.10>:
    9bc0:	a0 e0       	ldi	r26, 0x00	; 0
    9bc2:	b0 e0       	ldi	r27, 0x00	; 0
    9bc4:	e6 ee       	ldi	r30, 0xE6	; 230
    9bc6:	fd e4       	ldi	r31, 0x4D	; 77
    9bc8:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
    9bcc:	42 30       	cpi	r20, 0x02	; 2
    9bce:	51 05       	cpc	r21, r1
    9bd0:	61 05       	cpc	r22, r1
    9bd2:	71 05       	cpc	r23, r1
    9bd4:	08 f4       	brcc	.+2      	; 0x9bd8 <get_fat.isra.10+0x18>
    9bd6:	9f c0       	rjmp	.+318    	; 0x9d16 <get_fat.isra.10+0x156>
    9bd8:	fc 01       	movw	r30, r24
    9bda:	01 8d       	ldd	r16, Z+25	; 0x19
    9bdc:	12 8d       	ldd	r17, Z+26	; 0x1a
    9bde:	23 8d       	ldd	r18, Z+27	; 0x1b
    9be0:	34 8d       	ldd	r19, Z+28	; 0x1c
    9be2:	40 17       	cp	r20, r16
    9be4:	51 07       	cpc	r21, r17
    9be6:	62 07       	cpc	r22, r18
    9be8:	73 07       	cpc	r23, r19
    9bea:	08 f0       	brcs	.+2      	; 0x9bee <get_fat.isra.10+0x2e>
    9bec:	94 c0       	rjmp	.+296    	; 0x9d16 <get_fat.isra.10+0x156>
    9bee:	6a 01       	movw	r12, r20
    9bf0:	7b 01       	movw	r14, r22
    9bf2:	8c 01       	movw	r16, r24
    9bf4:	80 81       	ld	r24, Z
    9bf6:	82 30       	cpi	r24, 0x02	; 2
    9bf8:	09 f4       	brne	.+2      	; 0x9bfc <get_fat.isra.10+0x3c>
    9bfa:	4b c0       	rjmp	.+150    	; 0x9c92 <get_fat.isra.10+0xd2>
    9bfc:	83 30       	cpi	r24, 0x03	; 3
    9bfe:	09 f4       	brne	.+2      	; 0x9c02 <get_fat.isra.10+0x42>
    9c00:	67 c0       	rjmp	.+206    	; 0x9cd0 <get_fat.isra.10+0x110>
    9c02:	81 30       	cpi	r24, 0x01	; 1
    9c04:	09 f0       	breq	.+2      	; 0x9c08 <get_fat.isra.10+0x48>
    9c06:	87 c0       	rjmp	.+270    	; 0x9d16 <get_fat.isra.10+0x156>
    9c08:	ea 01       	movw	r28, r20
    9c0a:	d6 95       	lsr	r29
    9c0c:	c7 95       	ror	r28
    9c0e:	cc 0d       	add	r28, r12
    9c10:	dd 1d       	adc	r29, r13
    9c12:	ce 01       	movw	r24, r28
    9c14:	89 2f       	mov	r24, r25
    9c16:	99 27       	eor	r25, r25
    9c18:	86 95       	lsr	r24
    9c1a:	45 a1       	ldd	r20, Z+37	; 0x25
    9c1c:	56 a1       	ldd	r21, Z+38	; 0x26
    9c1e:	67 a1       	ldd	r22, Z+39	; 0x27
    9c20:	70 a5       	ldd	r23, Z+40	; 0x28
    9c22:	48 0f       	add	r20, r24
    9c24:	59 1f       	adc	r21, r25
    9c26:	61 1d       	adc	r22, r1
    9c28:	71 1d       	adc	r23, r1
    9c2a:	cf 01       	movw	r24, r30
    9c2c:	f9 db       	rcall	.-2062   	; 0x9420 <move_window>
    9c2e:	89 2b       	or	r24, r25
    9c30:	21 f0       	breq	.+8      	; 0x9c3a <get_fat.isra.10+0x7a>
    9c32:	6f ef       	ldi	r22, 0xFF	; 255
    9c34:	7f ef       	ldi	r23, 0xFF	; 255
    9c36:	cb 01       	movw	r24, r22
    9c38:	72 c0       	rjmp	.+228    	; 0x9d1e <get_fat.isra.10+0x15e>
    9c3a:	5e 01       	movw	r10, r28
    9c3c:	ff ef       	ldi	r31, 0xFF	; 255
    9c3e:	af 1a       	sub	r10, r31
    9c40:	bf 0a       	sbc	r11, r31
    9c42:	d1 70       	andi	r29, 0x01	; 1
    9c44:	c0 0f       	add	r28, r16
    9c46:	d1 1f       	adc	r29, r17
    9c48:	cd a9       	ldd	r28, Y+53	; 0x35
    9c4a:	c5 01       	movw	r24, r10
    9c4c:	89 2f       	mov	r24, r25
    9c4e:	99 27       	eor	r25, r25
    9c50:	86 95       	lsr	r24
    9c52:	f8 01       	movw	r30, r16
    9c54:	45 a1       	ldd	r20, Z+37	; 0x25
    9c56:	56 a1       	ldd	r21, Z+38	; 0x26
    9c58:	67 a1       	ldd	r22, Z+39	; 0x27
    9c5a:	70 a5       	ldd	r23, Z+40	; 0x28
    9c5c:	48 0f       	add	r20, r24
    9c5e:	59 1f       	adc	r21, r25
    9c60:	61 1d       	adc	r22, r1
    9c62:	71 1d       	adc	r23, r1
    9c64:	c8 01       	movw	r24, r16
    9c66:	dc db       	rcall	.-2120   	; 0x9420 <move_window>
    9c68:	89 2b       	or	r24, r25
    9c6a:	19 f7       	brne	.-58     	; 0x9c32 <get_fat.isra.10+0x72>
    9c6c:	f1 e0       	ldi	r31, 0x01	; 1
    9c6e:	bf 22       	and	r11, r31
    9c70:	f8 01       	movw	r30, r16
    9c72:	ea 0d       	add	r30, r10
    9c74:	fb 1d       	adc	r31, r11
    9c76:	85 a9       	ldd	r24, Z+53	; 0x35
    9c78:	6c 2f       	mov	r22, r28
    9c7a:	70 e0       	ldi	r23, 0x00	; 0
    9c7c:	78 2b       	or	r23, r24
    9c7e:	c0 fe       	sbrs	r12, 0
    9c80:	06 c0       	rjmp	.+12     	; 0x9c8e <get_fat.isra.10+0xce>
    9c82:	54 e0       	ldi	r21, 0x04	; 4
    9c84:	76 95       	lsr	r23
    9c86:	67 95       	ror	r22
    9c88:	5a 95       	dec	r21
    9c8a:	e1 f7       	brne	.-8      	; 0x9c84 <get_fat.isra.10+0xc4>
    9c8c:	1e c0       	rjmp	.+60     	; 0x9cca <get_fat.isra.10+0x10a>
    9c8e:	7f 70       	andi	r23, 0x0F	; 15
    9c90:	1c c0       	rjmp	.+56     	; 0x9cca <get_fat.isra.10+0x10a>
    9c92:	77 27       	eor	r23, r23
    9c94:	6f 2d       	mov	r22, r15
    9c96:	5e 2d       	mov	r21, r14
    9c98:	4d 2d       	mov	r20, r13
    9c9a:	85 a1       	ldd	r24, Z+37	; 0x25
    9c9c:	96 a1       	ldd	r25, Z+38	; 0x26
    9c9e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ca0:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ca2:	48 0f       	add	r20, r24
    9ca4:	59 1f       	adc	r21, r25
    9ca6:	6a 1f       	adc	r22, r26
    9ca8:	7b 1f       	adc	r23, r27
    9caa:	cf 01       	movw	r24, r30
    9cac:	b9 db       	rcall	.-2190   	; 0x9420 <move_window>
    9cae:	89 2b       	or	r24, r25
    9cb0:	09 f0       	breq	.+2      	; 0x9cb4 <get_fat.isra.10+0xf4>
    9cb2:	bf cf       	rjmp	.-130    	; 0x9c32 <get_fat.isra.10+0x72>
    9cb4:	cc 0c       	add	r12, r12
    9cb6:	dd 1c       	adc	r13, r13
    9cb8:	e8 94       	clt
    9cba:	c0 f8       	bld	r12, 0
    9cbc:	f1 e0       	ldi	r31, 0x01	; 1
    9cbe:	df 22       	and	r13, r31
    9cc0:	f8 01       	movw	r30, r16
    9cc2:	ec 0d       	add	r30, r12
    9cc4:	fd 1d       	adc	r31, r13
    9cc6:	65 a9       	ldd	r22, Z+53	; 0x35
    9cc8:	76 a9       	ldd	r23, Z+54	; 0x36
    9cca:	80 e0       	ldi	r24, 0x00	; 0
    9ccc:	90 e0       	ldi	r25, 0x00	; 0
    9cce:	27 c0       	rjmp	.+78     	; 0x9d1e <get_fat.isra.10+0x15e>
    9cd0:	85 a1       	ldd	r24, Z+37	; 0x25
    9cd2:	96 a1       	ldd	r25, Z+38	; 0x26
    9cd4:	a7 a1       	ldd	r26, Z+39	; 0x27
    9cd6:	b0 a5       	ldd	r27, Z+40	; 0x28
    9cd8:	27 e0       	ldi	r18, 0x07	; 7
    9cda:	76 95       	lsr	r23
    9cdc:	67 95       	ror	r22
    9cde:	57 95       	ror	r21
    9ce0:	47 95       	ror	r20
    9ce2:	2a 95       	dec	r18
    9ce4:	d1 f7       	brne	.-12     	; 0x9cda <get_fat.isra.10+0x11a>
    9ce6:	48 0f       	add	r20, r24
    9ce8:	59 1f       	adc	r21, r25
    9cea:	6a 1f       	adc	r22, r26
    9cec:	7b 1f       	adc	r23, r27
    9cee:	cf 01       	movw	r24, r30
    9cf0:	97 db       	rcall	.-2258   	; 0x9420 <move_window>
    9cf2:	89 2b       	or	r24, r25
    9cf4:	09 f0       	breq	.+2      	; 0x9cf8 <get_fat.isra.10+0x138>
    9cf6:	9d cf       	rjmp	.-198    	; 0x9c32 <get_fat.isra.10+0x72>
    9cf8:	0b 5c       	subi	r16, 0xCB	; 203
    9cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    9cfc:	cc 0c       	add	r12, r12
    9cfe:	dd 1c       	adc	r13, r13
    9d00:	cc 0c       	add	r12, r12
    9d02:	dd 1c       	adc	r13, r13
    9d04:	c6 01       	movw	r24, r12
    9d06:	8c 7f       	andi	r24, 0xFC	; 252
    9d08:	91 70       	andi	r25, 0x01	; 1
    9d0a:	80 0f       	add	r24, r16
    9d0c:	91 1f       	adc	r25, r17
    9d0e:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <ld_dword>
    9d12:	9f 70       	andi	r25, 0x0F	; 15
    9d14:	04 c0       	rjmp	.+8      	; 0x9d1e <get_fat.isra.10+0x15e>
    9d16:	61 e0       	ldi	r22, 0x01	; 1
    9d18:	70 e0       	ldi	r23, 0x00	; 0
    9d1a:	80 e0       	ldi	r24, 0x00	; 0
    9d1c:	90 e0       	ldi	r25, 0x00	; 0
    9d1e:	cd b7       	in	r28, 0x3d	; 61
    9d20:	de b7       	in	r29, 0x3e	; 62
    9d22:	ea e0       	ldi	r30, 0x0A	; 10
    9d24:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

00009d28 <dir_sdi>:
    9d28:	a0 e0       	ldi	r26, 0x00	; 0
    9d2a:	b0 e0       	ldi	r27, 0x00	; 0
    9d2c:	ea e9       	ldi	r30, 0x9A	; 154
    9d2e:	fe e4       	ldi	r31, 0x4E	; 78
    9d30:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
    9d34:	ec 01       	movw	r28, r24
    9d36:	6a 01       	movw	r12, r20
    9d38:	7b 01       	movw	r14, r22
    9d3a:	41 15       	cp	r20, r1
    9d3c:	51 05       	cpc	r21, r1
    9d3e:	80 e2       	ldi	r24, 0x20	; 32
    9d40:	68 07       	cpc	r22, r24
    9d42:	71 05       	cpc	r23, r1
    9d44:	18 f0       	brcs	.+6      	; 0x9d4c <dir_sdi+0x24>
    9d46:	82 e0       	ldi	r24, 0x02	; 2
    9d48:	90 e0       	ldi	r25, 0x00	; 0
    9d4a:	aa c0       	rjmp	.+340    	; 0x9ea0 <dir_sdi+0x178>
    9d4c:	db 01       	movw	r26, r22
    9d4e:	ca 01       	movw	r24, r20
    9d50:	8f 71       	andi	r24, 0x1F	; 31
    9d52:	99 27       	eor	r25, r25
    9d54:	aa 27       	eor	r26, r26
    9d56:	bb 27       	eor	r27, r27
    9d58:	89 2b       	or	r24, r25
    9d5a:	8a 2b       	or	r24, r26
    9d5c:	8b 2b       	or	r24, r27
    9d5e:	99 f7       	brne	.-26     	; 0x9d46 <dir_sdi+0x1e>
    9d60:	08 81       	ld	r16, Y
    9d62:	19 81       	ldd	r17, Y+1	; 0x01
    9d64:	4e 87       	std	Y+14, r20	; 0x0e
    9d66:	5f 87       	std	Y+15, r21	; 0x0f
    9d68:	68 8b       	std	Y+16, r22	; 0x10
    9d6a:	79 8b       	std	Y+17, r23	; 0x11
    9d6c:	8e 80       	ldd	r8, Y+6	; 0x06
    9d6e:	9f 80       	ldd	r9, Y+7	; 0x07
    9d70:	a8 84       	ldd	r10, Y+8	; 0x08
    9d72:	b9 84       	ldd	r11, Y+9	; 0x09
    9d74:	81 14       	cp	r8, r1
    9d76:	91 04       	cpc	r9, r1
    9d78:	a1 04       	cpc	r10, r1
    9d7a:	b1 04       	cpc	r11, r1
    9d7c:	51 f5       	brne	.+84     	; 0x9dd2 <dir_sdi+0xaa>
    9d7e:	f8 01       	movw	r30, r16
    9d80:	80 81       	ld	r24, Z
    9d82:	83 30       	cpi	r24, 0x03	; 3
    9d84:	40 f0       	brcs	.+16     	; 0x9d96 <dir_sdi+0x6e>
    9d86:	81 a5       	ldd	r24, Z+41	; 0x29
    9d88:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d8a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d8c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d8e:	00 97       	sbiw	r24, 0x00	; 0
    9d90:	a1 05       	cpc	r26, r1
    9d92:	b1 05       	cpc	r27, r1
    9d94:	e1 f4       	brne	.+56     	; 0x9dce <dir_sdi+0xa6>
    9d96:	f8 01       	movw	r30, r16
    9d98:	87 81       	ldd	r24, Z+7	; 0x07
    9d9a:	90 85       	ldd	r25, Z+8	; 0x08
    9d9c:	a0 e0       	ldi	r26, 0x00	; 0
    9d9e:	b0 e0       	ldi	r27, 0x00	; 0
    9da0:	b7 01       	movw	r22, r14
    9da2:	a6 01       	movw	r20, r12
    9da4:	25 e0       	ldi	r18, 0x05	; 5
    9da6:	76 95       	lsr	r23
    9da8:	67 95       	ror	r22
    9daa:	57 95       	ror	r21
    9dac:	47 95       	ror	r20
    9dae:	2a 95       	dec	r18
    9db0:	d1 f7       	brne	.-12     	; 0x9da6 <dir_sdi+0x7e>
    9db2:	48 17       	cp	r20, r24
    9db4:	59 07       	cpc	r21, r25
    9db6:	6a 07       	cpc	r22, r26
    9db8:	7b 07       	cpc	r23, r27
    9dba:	28 f6       	brcc	.-118    	; 0x9d46 <dir_sdi+0x1e>
    9dbc:	81 a5       	ldd	r24, Z+41	; 0x29
    9dbe:	92 a5       	ldd	r25, Z+42	; 0x2a
    9dc0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9dc2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9dc4:	8e 8b       	std	Y+22, r24	; 0x16
    9dc6:	9f 8b       	std	Y+23, r25	; 0x17
    9dc8:	a8 8f       	std	Y+24, r26	; 0x18
    9dca:	b9 8f       	std	Y+25, r27	; 0x19
    9dcc:	3e c0       	rjmp	.+124    	; 0x9e4a <dir_sdi+0x122>
    9dce:	4c 01       	movw	r8, r24
    9dd0:	5d 01       	movw	r10, r26
    9dd2:	f8 01       	movw	r30, r16
    9dd4:	41 84       	ldd	r4, Z+9	; 0x09
    9dd6:	52 84       	ldd	r5, Z+10	; 0x0a
    9dd8:	61 2c       	mov	r6, r1
    9dda:	71 2c       	mov	r7, r1
    9ddc:	39 e0       	ldi	r19, 0x09	; 9
    9dde:	44 0c       	add	r4, r4
    9de0:	55 1c       	adc	r5, r5
    9de2:	66 1c       	adc	r6, r6
    9de4:	77 1c       	adc	r7, r7
    9de6:	3a 95       	dec	r19
    9de8:	d1 f7       	brne	.-12     	; 0x9dde <dir_sdi+0xb6>
    9dea:	b5 01       	movw	r22, r10
    9dec:	a4 01       	movw	r20, r8
    9dee:	c4 14       	cp	r12, r4
    9df0:	d5 04       	cpc	r13, r5
    9df2:	e6 04       	cpc	r14, r6
    9df4:	f7 04       	cpc	r15, r7
    9df6:	10 f1       	brcs	.+68     	; 0x9e3c <dir_sdi+0x114>
    9df8:	88 81       	ld	r24, Y
    9dfa:	99 81       	ldd	r25, Y+1	; 0x01
    9dfc:	e1 de       	rcall	.-574    	; 0x9bc0 <get_fat.isra.10>
    9dfe:	4b 01       	movw	r8, r22
    9e00:	5c 01       	movw	r10, r24
    9e02:	6f 3f       	cpi	r22, 0xFF	; 255
    9e04:	7f 4f       	sbci	r23, 0xFF	; 255
    9e06:	8f 4f       	sbci	r24, 0xFF	; 255
    9e08:	9f 4f       	sbci	r25, 0xFF	; 255
    9e0a:	09 f4       	brne	.+2      	; 0x9e0e <dir_sdi+0xe6>
    9e0c:	47 c0       	rjmp	.+142    	; 0x9e9c <dir_sdi+0x174>
    9e0e:	82 e0       	ldi	r24, 0x02	; 2
    9e10:	88 16       	cp	r8, r24
    9e12:	91 04       	cpc	r9, r1
    9e14:	a1 04       	cpc	r10, r1
    9e16:	b1 04       	cpc	r11, r1
    9e18:	08 f4       	brcc	.+2      	; 0x9e1c <dir_sdi+0xf4>
    9e1a:	95 cf       	rjmp	.-214    	; 0x9d46 <dir_sdi+0x1e>
    9e1c:	f8 01       	movw	r30, r16
    9e1e:	81 8d       	ldd	r24, Z+25	; 0x19
    9e20:	92 8d       	ldd	r25, Z+26	; 0x1a
    9e22:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9e24:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9e26:	88 16       	cp	r8, r24
    9e28:	99 06       	cpc	r9, r25
    9e2a:	aa 06       	cpc	r10, r26
    9e2c:	bb 06       	cpc	r11, r27
    9e2e:	08 f0       	brcs	.+2      	; 0x9e32 <dir_sdi+0x10a>
    9e30:	8a cf       	rjmp	.-236    	; 0x9d46 <dir_sdi+0x1e>
    9e32:	c4 18       	sub	r12, r4
    9e34:	d5 08       	sbc	r13, r5
    9e36:	e6 08       	sbc	r14, r6
    9e38:	f7 08       	sbc	r15, r7
    9e3a:	d7 cf       	rjmp	.-82     	; 0x9dea <dir_sdi+0xc2>
    9e3c:	c8 01       	movw	r24, r16
    9e3e:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    9e42:	6e 8b       	std	Y+22, r22	; 0x16
    9e44:	7f 8b       	std	Y+23, r23	; 0x17
    9e46:	88 8f       	std	Y+24, r24	; 0x18
    9e48:	99 8f       	std	Y+25, r25	; 0x19
    9e4a:	8a 8a       	std	Y+18, r8	; 0x12
    9e4c:	9b 8a       	std	Y+19, r9	; 0x13
    9e4e:	ac 8a       	std	Y+20, r10	; 0x14
    9e50:	bd 8a       	std	Y+21, r11	; 0x15
    9e52:	8e 89       	ldd	r24, Y+22	; 0x16
    9e54:	9f 89       	ldd	r25, Y+23	; 0x17
    9e56:	a8 8d       	ldd	r26, Y+24	; 0x18
    9e58:	b9 8d       	ldd	r27, Y+25	; 0x19
    9e5a:	00 97       	sbiw	r24, 0x00	; 0
    9e5c:	a1 05       	cpc	r26, r1
    9e5e:	b1 05       	cpc	r27, r1
    9e60:	09 f4       	brne	.+2      	; 0x9e64 <dir_sdi+0x13c>
    9e62:	71 cf       	rjmp	.-286    	; 0x9d46 <dir_sdi+0x1e>
    9e64:	b7 01       	movw	r22, r14
    9e66:	a6 01       	movw	r20, r12
    9e68:	29 e0       	ldi	r18, 0x09	; 9
    9e6a:	76 95       	lsr	r23
    9e6c:	67 95       	ror	r22
    9e6e:	57 95       	ror	r21
    9e70:	47 95       	ror	r20
    9e72:	2a 95       	dec	r18
    9e74:	d1 f7       	brne	.-12     	; 0x9e6a <dir_sdi+0x142>
    9e76:	84 0f       	add	r24, r20
    9e78:	95 1f       	adc	r25, r21
    9e7a:	a6 1f       	adc	r26, r22
    9e7c:	b7 1f       	adc	r27, r23
    9e7e:	8e 8b       	std	Y+22, r24	; 0x16
    9e80:	9f 8b       	std	Y+23, r25	; 0x17
    9e82:	a8 8f       	std	Y+24, r26	; 0x18
    9e84:	b9 8f       	std	Y+25, r27	; 0x19
    9e86:	0b 5c       	subi	r16, 0xCB	; 203
    9e88:	1f 4f       	sbci	r17, 0xFF	; 255
    9e8a:	f1 e0       	ldi	r31, 0x01	; 1
    9e8c:	df 22       	and	r13, r31
    9e8e:	c0 0e       	add	r12, r16
    9e90:	d1 1e       	adc	r13, r17
    9e92:	db 8e       	std	Y+27, r13	; 0x1b
    9e94:	ca 8e       	std	Y+26, r12	; 0x1a
    9e96:	80 e0       	ldi	r24, 0x00	; 0
    9e98:	90 e0       	ldi	r25, 0x00	; 0
    9e9a:	02 c0       	rjmp	.+4      	; 0x9ea0 <dir_sdi+0x178>
    9e9c:	81 e0       	ldi	r24, 0x01	; 1
    9e9e:	90 e0       	ldi	r25, 0x00	; 0
    9ea0:	cd b7       	in	r28, 0x3d	; 61
    9ea2:	de b7       	in	r29, 0x3e	; 62
    9ea4:	e0 e1       	ldi	r30, 0x10	; 16
    9ea6:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

00009eaa <create_chain>:
    9eaa:	a0 e0       	ldi	r26, 0x00	; 0
    9eac:	b0 e0       	ldi	r27, 0x00	; 0
    9eae:	eb e5       	ldi	r30, 0x5B	; 91
    9eb0:	ff e4       	ldi	r31, 0x4F	; 79
    9eb2:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
    9eb6:	8c 01       	movw	r16, r24
    9eb8:	2a 01       	movw	r4, r20
    9eba:	3b 01       	movw	r6, r22
    9ebc:	fc 01       	movw	r30, r24
    9ebe:	c0 81       	ld	r28, Z
    9ec0:	d1 81       	ldd	r29, Z+1	; 0x01
    9ec2:	41 15       	cp	r20, r1
    9ec4:	51 05       	cpc	r21, r1
    9ec6:	61 05       	cpc	r22, r1
    9ec8:	71 05       	cpc	r23, r1
    9eca:	99 f4       	brne	.+38     	; 0x9ef2 <create_chain+0x48>
    9ecc:	8d 84       	ldd	r8, Y+13	; 0x0d
    9ece:	9e 84       	ldd	r9, Y+14	; 0x0e
    9ed0:	af 84       	ldd	r10, Y+15	; 0x0f
    9ed2:	b8 88       	ldd	r11, Y+16	; 0x10
    9ed4:	81 14       	cp	r8, r1
    9ed6:	91 04       	cpc	r9, r1
    9ed8:	a1 04       	cpc	r10, r1
    9eda:	b1 04       	cpc	r11, r1
    9edc:	51 f1       	breq	.+84     	; 0x9f32 <create_chain+0x88>
    9ede:	89 8d       	ldd	r24, Y+25	; 0x19
    9ee0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ee2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ee4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ee6:	88 16       	cp	r8, r24
    9ee8:	99 06       	cpc	r9, r25
    9eea:	aa 06       	cpc	r10, r26
    9eec:	bb 06       	cpc	r11, r27
    9eee:	28 f1       	brcs	.+74     	; 0x9f3a <create_chain+0x90>
    9ef0:	20 c0       	rjmp	.+64     	; 0x9f32 <create_chain+0x88>
    9ef2:	ce 01       	movw	r24, r28
    9ef4:	65 de       	rcall	.-822    	; 0x9bc0 <get_fat.isra.10>
    9ef6:	62 30       	cpi	r22, 0x02	; 2
    9ef8:	71 05       	cpc	r23, r1
    9efa:	81 05       	cpc	r24, r1
    9efc:	91 05       	cpc	r25, r1
    9efe:	08 f4       	brcc	.+2      	; 0x9f02 <create_chain+0x58>
    9f00:	ea c0       	rjmp	.+468    	; 0xa0d6 <create_chain+0x22c>
    9f02:	6f 3f       	cpi	r22, 0xFF	; 255
    9f04:	ff ef       	ldi	r31, 0xFF	; 255
    9f06:	7f 07       	cpc	r23, r31
    9f08:	8f 07       	cpc	r24, r31
    9f0a:	9f 07       	cpc	r25, r31
    9f0c:	29 f4       	brne	.+10     	; 0x9f18 <create_chain+0x6e>
    9f0e:	4f ef       	ldi	r20, 0xFF	; 255
    9f10:	3f ef       	ldi	r19, 0xFF	; 255
    9f12:	2f ef       	ldi	r18, 0xFF	; 255
    9f14:	9f ef       	ldi	r25, 0xFF	; 255
    9f16:	e7 c0       	rjmp	.+462    	; 0xa0e6 <create_chain+0x23c>
    9f18:	c9 8c       	ldd	r12, Y+25	; 0x19
    9f1a:	da 8c       	ldd	r13, Y+26	; 0x1a
    9f1c:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9f1e:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9f20:	6c 15       	cp	r22, r12
    9f22:	7d 05       	cpc	r23, r13
    9f24:	8e 05       	cpc	r24, r14
    9f26:	9f 05       	cpc	r25, r15
    9f28:	08 f4       	brcc	.+2      	; 0x9f2c <create_chain+0x82>
    9f2a:	da c0       	rjmp	.+436    	; 0xa0e0 <create_chain+0x236>
    9f2c:	53 01       	movw	r10, r6
    9f2e:	42 01       	movw	r8, r4
    9f30:	04 c0       	rjmp	.+8      	; 0x9f3a <create_chain+0x90>
    9f32:	81 2c       	mov	r8, r1
    9f34:	91 2c       	mov	r9, r1
    9f36:	54 01       	movw	r10, r8
    9f38:	83 94       	inc	r8
    9f3a:	89 89       	ldd	r24, Y+17	; 0x11
    9f3c:	9a 89       	ldd	r25, Y+18	; 0x12
    9f3e:	ab 89       	ldd	r26, Y+19	; 0x13
    9f40:	bc 89       	ldd	r27, Y+20	; 0x14
    9f42:	89 2b       	or	r24, r25
    9f44:	8a 2b       	or	r24, r26
    9f46:	8b 2b       	or	r24, r27
    9f48:	11 f4       	brne	.+4      	; 0x9f4e <create_chain+0xa4>
    9f4a:	40 e0       	ldi	r20, 0x00	; 0
    9f4c:	c5 c0       	rjmp	.+394    	; 0xa0d8 <create_chain+0x22e>
    9f4e:	84 14       	cp	r8, r4
    9f50:	95 04       	cpc	r9, r5
    9f52:	a6 04       	cpc	r10, r6
    9f54:	b7 04       	cpc	r11, r7
    9f56:	09 f0       	breq	.+2      	; 0x9f5a <create_chain+0xb0>
    9f58:	46 c0       	rjmp	.+140    	; 0x9fe6 <create_chain+0x13c>
    9f5a:	75 01       	movw	r14, r10
    9f5c:	64 01       	movw	r12, r8
    9f5e:	2f ef       	ldi	r18, 0xFF	; 255
    9f60:	c2 1a       	sub	r12, r18
    9f62:	d2 0a       	sbc	r13, r18
    9f64:	e2 0a       	sbc	r14, r18
    9f66:	f2 0a       	sbc	r15, r18
    9f68:	89 8d       	ldd	r24, Y+25	; 0x19
    9f6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f6c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f6e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f70:	c8 16       	cp	r12, r24
    9f72:	d9 06       	cpc	r13, r25
    9f74:	ea 06       	cpc	r14, r26
    9f76:	fb 06       	cpc	r15, r27
    9f78:	28 f0       	brcs	.+10     	; 0x9f84 <create_chain+0xda>
    9f7a:	92 e0       	ldi	r25, 0x02	; 2
    9f7c:	c9 2e       	mov	r12, r25
    9f7e:	d1 2c       	mov	r13, r1
    9f80:	e1 2c       	mov	r14, r1
    9f82:	f1 2c       	mov	r15, r1
    9f84:	b7 01       	movw	r22, r14
    9f86:	a6 01       	movw	r20, r12
    9f88:	f8 01       	movw	r30, r16
    9f8a:	80 81       	ld	r24, Z
    9f8c:	91 81       	ldd	r25, Z+1	; 0x01
    9f8e:	18 de       	rcall	.-976    	; 0x9bc0 <get_fat.isra.10>
    9f90:	61 30       	cpi	r22, 0x01	; 1
    9f92:	71 05       	cpc	r23, r1
    9f94:	81 05       	cpc	r24, r1
    9f96:	91 05       	cpc	r25, r1
    9f98:	09 f4       	brne	.+2      	; 0x9f9c <create_chain+0xf2>
    9f9a:	9d c0       	rjmp	.+314    	; 0xa0d6 <create_chain+0x22c>
    9f9c:	6f 3f       	cpi	r22, 0xFF	; 255
    9f9e:	ff ef       	ldi	r31, 0xFF	; 255
    9fa0:	7f 07       	cpc	r23, r31
    9fa2:	8f 07       	cpc	r24, r31
    9fa4:	9f 07       	cpc	r25, r31
    9fa6:	09 f4       	brne	.+2      	; 0x9faa <create_chain+0x100>
    9fa8:	b2 cf       	rjmp	.-156    	; 0x9f0e <create_chain+0x64>
    9faa:	67 2b       	or	r22, r23
    9fac:	68 2b       	or	r22, r24
    9fae:	69 2b       	or	r22, r25
    9fb0:	a9 f0       	breq	.+42     	; 0x9fdc <create_chain+0x132>
    9fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    9fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    9fb6:	af 85       	ldd	r26, Y+15	; 0x0f
    9fb8:	b8 89       	ldd	r27, Y+16	; 0x10
    9fba:	82 30       	cpi	r24, 0x02	; 2
    9fbc:	91 05       	cpc	r25, r1
    9fbe:	a1 05       	cpc	r26, r1
    9fc0:	b1 05       	cpc	r27, r1
    9fc2:	88 f0       	brcs	.+34     	; 0x9fe6 <create_chain+0x13c>
    9fc4:	49 8d       	ldd	r20, Y+25	; 0x19
    9fc6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9fc8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9fca:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9fcc:	84 17       	cp	r24, r20
    9fce:	95 07       	cpc	r25, r21
    9fd0:	a6 07       	cpc	r26, r22
    9fd2:	b7 07       	cpc	r27, r23
    9fd4:	40 f4       	brcc	.+16     	; 0x9fe6 <create_chain+0x13c>
    9fd6:	4c 01       	movw	r8, r24
    9fd8:	5d 01       	movw	r10, r26
    9fda:	05 c0       	rjmp	.+10     	; 0x9fe6 <create_chain+0x13c>
    9fdc:	c1 14       	cp	r12, r1
    9fde:	d1 04       	cpc	r13, r1
    9fe0:	e1 04       	cpc	r14, r1
    9fe2:	f1 04       	cpc	r15, r1
    9fe4:	c9 f5       	brne	.+114    	; 0xa058 <create_chain+0x1ae>
    9fe6:	75 01       	movw	r14, r10
    9fe8:	64 01       	movw	r12, r8
    9fea:	2f ef       	ldi	r18, 0xFF	; 255
    9fec:	c2 1a       	sub	r12, r18
    9fee:	d2 0a       	sbc	r13, r18
    9ff0:	e2 0a       	sbc	r14, r18
    9ff2:	f2 0a       	sbc	r15, r18
    9ff4:	89 8d       	ldd	r24, Y+25	; 0x19
    9ff6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ff8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ffa:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ffc:	c8 16       	cp	r12, r24
    9ffe:	d9 06       	cpc	r13, r25
    a000:	ea 06       	cpc	r14, r26
    a002:	fb 06       	cpc	r15, r27
    a004:	60 f0       	brcs	.+24     	; 0xa01e <create_chain+0x174>
    a006:	82 e0       	ldi	r24, 0x02	; 2
    a008:	88 16       	cp	r8, r24
    a00a:	91 04       	cpc	r9, r1
    a00c:	a1 04       	cpc	r10, r1
    a00e:	b1 04       	cpc	r11, r1
    a010:	08 f4       	brcc	.+2      	; 0xa014 <create_chain+0x16a>
    a012:	9b cf       	rjmp	.-202    	; 0x9f4a <create_chain+0xa0>
    a014:	82 e0       	ldi	r24, 0x02	; 2
    a016:	c8 2e       	mov	r12, r24
    a018:	d1 2c       	mov	r13, r1
    a01a:	e1 2c       	mov	r14, r1
    a01c:	f1 2c       	mov	r15, r1
    a01e:	b7 01       	movw	r22, r14
    a020:	a6 01       	movw	r20, r12
    a022:	f8 01       	movw	r30, r16
    a024:	80 81       	ld	r24, Z
    a026:	91 81       	ldd	r25, Z+1	; 0x01
    a028:	cb dd       	rcall	.-1130   	; 0x9bc0 <get_fat.isra.10>
    a02a:	61 15       	cp	r22, r1
    a02c:	71 05       	cpc	r23, r1
    a02e:	81 05       	cpc	r24, r1
    a030:	91 05       	cpc	r25, r1
    a032:	91 f0       	breq	.+36     	; 0xa058 <create_chain+0x1ae>
    a034:	61 30       	cpi	r22, 0x01	; 1
    a036:	71 05       	cpc	r23, r1
    a038:	81 05       	cpc	r24, r1
    a03a:	91 05       	cpc	r25, r1
    a03c:	09 f4       	brne	.+2      	; 0xa040 <create_chain+0x196>
    a03e:	4b c0       	rjmp	.+150    	; 0xa0d6 <create_chain+0x22c>
    a040:	6f 3f       	cpi	r22, 0xFF	; 255
    a042:	7f 4f       	sbci	r23, 0xFF	; 255
    a044:	8f 4f       	sbci	r24, 0xFF	; 255
    a046:	9f 4f       	sbci	r25, 0xFF	; 255
    a048:	09 f4       	brne	.+2      	; 0xa04c <create_chain+0x1a2>
    a04a:	61 cf       	rjmp	.-318    	; 0x9f0e <create_chain+0x64>
    a04c:	c8 14       	cp	r12, r8
    a04e:	d9 04       	cpc	r13, r9
    a050:	ea 04       	cpc	r14, r10
    a052:	fb 04       	cpc	r15, r11
    a054:	51 f6       	brne	.-108    	; 0x9fea <create_chain+0x140>
    a056:	79 cf       	rjmp	.-270    	; 0x9f4a <create_chain+0xa0>
    a058:	0f ef       	ldi	r16, 0xFF	; 255
    a05a:	1f ef       	ldi	r17, 0xFF	; 255
    a05c:	98 01       	movw	r18, r16
    a05e:	b7 01       	movw	r22, r14
    a060:	a6 01       	movw	r20, r12
    a062:	ce 01       	movw	r24, r28
    a064:	b2 dc       	rcall	.-1692   	; 0x99ca <put_fat>
    a066:	00 97       	sbiw	r24, 0x00	; 0
    a068:	99 f5       	brne	.+102    	; 0xa0d0 <create_chain+0x226>
    a06a:	41 14       	cp	r4, r1
    a06c:	51 04       	cpc	r5, r1
    a06e:	61 04       	cpc	r6, r1
    a070:	71 04       	cpc	r7, r1
    a072:	e9 f4       	brne	.+58     	; 0xa0ae <create_chain+0x204>
    a074:	cd 86       	std	Y+13, r12	; 0x0d
    a076:	de 86       	std	Y+14, r13	; 0x0e
    a078:	ef 86       	std	Y+15, r14	; 0x0f
    a07a:	f8 8a       	std	Y+16, r15	; 0x10
    a07c:	89 89       	ldd	r24, Y+17	; 0x11
    a07e:	9a 89       	ldd	r25, Y+18	; 0x12
    a080:	ab 89       	ldd	r26, Y+19	; 0x13
    a082:	bc 89       	ldd	r27, Y+20	; 0x14
    a084:	49 8d       	ldd	r20, Y+25	; 0x19
    a086:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a088:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a08a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a08c:	42 50       	subi	r20, 0x02	; 2
    a08e:	51 09       	sbc	r21, r1
    a090:	61 09       	sbc	r22, r1
    a092:	71 09       	sbc	r23, r1
    a094:	48 17       	cp	r20, r24
    a096:	59 07       	cpc	r21, r25
    a098:	6a 07       	cpc	r22, r26
    a09a:	7b 07       	cpc	r23, r27
    a09c:	88 f0       	brcs	.+34     	; 0xa0c0 <create_chain+0x216>
    a09e:	01 97       	sbiw	r24, 0x01	; 1
    a0a0:	a1 09       	sbc	r26, r1
    a0a2:	b1 09       	sbc	r27, r1
    a0a4:	89 8b       	std	Y+17, r24	; 0x11
    a0a6:	9a 8b       	std	Y+18, r25	; 0x12
    a0a8:	ab 8b       	std	Y+19, r26	; 0x13
    a0aa:	bc 8b       	std	Y+20, r27	; 0x14
    a0ac:	09 c0       	rjmp	.+18     	; 0xa0c0 <create_chain+0x216>
    a0ae:	97 01       	movw	r18, r14
    a0b0:	86 01       	movw	r16, r12
    a0b2:	b3 01       	movw	r22, r6
    a0b4:	a2 01       	movw	r20, r4
    a0b6:	ce 01       	movw	r24, r28
    a0b8:	88 dc       	rcall	.-1776   	; 0x99ca <put_fat>
    a0ba:	00 97       	sbiw	r24, 0x00	; 0
    a0bc:	d9 f2       	breq	.-74     	; 0xa074 <create_chain+0x1ca>
    a0be:	08 c0       	rjmp	.+16     	; 0xa0d0 <create_chain+0x226>
    a0c0:	8c 81       	ldd	r24, Y+4	; 0x04
    a0c2:	81 60       	ori	r24, 0x01	; 1
    a0c4:	8c 83       	std	Y+4, r24	; 0x04
    a0c6:	4c 2d       	mov	r20, r12
    a0c8:	3d 2d       	mov	r19, r13
    a0ca:	2e 2d       	mov	r18, r14
    a0cc:	9f 2d       	mov	r25, r15
    a0ce:	0b c0       	rjmp	.+22     	; 0xa0e6 <create_chain+0x23c>
    a0d0:	01 97       	sbiw	r24, 0x01	; 1
    a0d2:	09 f4       	brne	.+2      	; 0xa0d6 <create_chain+0x22c>
    a0d4:	1c cf       	rjmp	.-456    	; 0x9f0e <create_chain+0x64>
    a0d6:	41 e0       	ldi	r20, 0x01	; 1
    a0d8:	30 e0       	ldi	r19, 0x00	; 0
    a0da:	20 e0       	ldi	r18, 0x00	; 0
    a0dc:	90 e0       	ldi	r25, 0x00	; 0
    a0de:	03 c0       	rjmp	.+6      	; 0xa0e6 <create_chain+0x23c>
    a0e0:	46 2f       	mov	r20, r22
    a0e2:	37 2f       	mov	r19, r23
    a0e4:	28 2f       	mov	r18, r24
    a0e6:	64 2f       	mov	r22, r20
    a0e8:	73 2f       	mov	r23, r19
    a0ea:	82 2f       	mov	r24, r18
    a0ec:	cd b7       	in	r28, 0x3d	; 61
    a0ee:	de b7       	in	r29, 0x3e	; 62
    a0f0:	e0 e1       	ldi	r30, 0x10	; 16
    a0f2:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

0000a0f6 <remove_chain>:
    a0f6:	4f 92       	push	r4
    a0f8:	5f 92       	push	r5
    a0fa:	6f 92       	push	r6
    a0fc:	7f 92       	push	r7
    a0fe:	af 92       	push	r10
    a100:	bf 92       	push	r11
    a102:	cf 92       	push	r12
    a104:	df 92       	push	r13
    a106:	ef 92       	push	r14
    a108:	ff 92       	push	r15
    a10a:	0f 93       	push	r16
    a10c:	1f 93       	push	r17
    a10e:	cf 93       	push	r28
    a110:	df 93       	push	r29
    a112:	5c 01       	movw	r10, r24
    a114:	6a 01       	movw	r12, r20
    a116:	7b 01       	movw	r14, r22
    a118:	b9 01       	movw	r22, r18
    a11a:	a8 01       	movw	r20, r16
    a11c:	22 e0       	ldi	r18, 0x02	; 2
    a11e:	c2 16       	cp	r12, r18
    a120:	d1 04       	cpc	r13, r1
    a122:	e1 04       	cpc	r14, r1
    a124:	f1 04       	cpc	r15, r1
    a126:	10 f4       	brcc	.+4      	; 0xa12c <remove_chain+0x36>
    a128:	22 e0       	ldi	r18, 0x02	; 2
    a12a:	27 c0       	rjmp	.+78     	; 0xa17a <remove_chain+0x84>
    a12c:	fc 01       	movw	r30, r24
    a12e:	c0 81       	ld	r28, Z
    a130:	d1 81       	ldd	r29, Z+1	; 0x01
    a132:	89 8d       	ldd	r24, Y+25	; 0x19
    a134:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a136:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a138:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a13a:	c8 16       	cp	r12, r24
    a13c:	d9 06       	cpc	r13, r25
    a13e:	ea 06       	cpc	r14, r26
    a140:	fb 06       	cpc	r15, r27
    a142:	90 f7       	brcc	.-28     	; 0xa128 <remove_chain+0x32>
    a144:	41 15       	cp	r20, r1
    a146:	51 05       	cpc	r21, r1
    a148:	61 05       	cpc	r22, r1
    a14a:	71 05       	cpc	r23, r1
    a14c:	41 f0       	breq	.+16     	; 0xa15e <remove_chain+0x68>
    a14e:	0f ef       	ldi	r16, 0xFF	; 255
    a150:	1f ef       	ldi	r17, 0xFF	; 255
    a152:	98 01       	movw	r18, r16
    a154:	ce 01       	movw	r24, r28
    a156:	39 dc       	rcall	.-1934   	; 0x99ca <put_fat>
    a158:	00 97       	sbiw	r24, 0x00	; 0
    a15a:	09 f0       	breq	.+2      	; 0xa15e <remove_chain+0x68>
    a15c:	4c c0       	rjmp	.+152    	; 0xa1f6 <remove_chain+0x100>
    a15e:	b7 01       	movw	r22, r14
    a160:	a6 01       	movw	r20, r12
    a162:	f5 01       	movw	r30, r10
    a164:	80 81       	ld	r24, Z
    a166:	91 81       	ldd	r25, Z+1	; 0x01
    a168:	2b dd       	rcall	.-1450   	; 0x9bc0 <get_fat.isra.10>
    a16a:	2b 01       	movw	r4, r22
    a16c:	3c 01       	movw	r6, r24
    a16e:	61 15       	cp	r22, r1
    a170:	71 05       	cpc	r23, r1
    a172:	81 05       	cpc	r24, r1
    a174:	91 05       	cpc	r25, r1
    a176:	19 f4       	brne	.+6      	; 0xa17e <remove_chain+0x88>
    a178:	20 e0       	ldi	r18, 0x00	; 0
    a17a:	90 e0       	ldi	r25, 0x00	; 0
    a17c:	3d c0       	rjmp	.+122    	; 0xa1f8 <remove_chain+0x102>
    a17e:	61 30       	cpi	r22, 0x01	; 1
    a180:	71 05       	cpc	r23, r1
    a182:	81 05       	cpc	r24, r1
    a184:	91 05       	cpc	r25, r1
    a186:	81 f2       	breq	.-96     	; 0xa128 <remove_chain+0x32>
    a188:	6f 3f       	cpi	r22, 0xFF	; 255
    a18a:	7f 4f       	sbci	r23, 0xFF	; 255
    a18c:	8f 4f       	sbci	r24, 0xFF	; 255
    a18e:	9f 4f       	sbci	r25, 0xFF	; 255
    a190:	81 f1       	breq	.+96     	; 0xa1f2 <remove_chain+0xfc>
    a192:	00 e0       	ldi	r16, 0x00	; 0
    a194:	10 e0       	ldi	r17, 0x00	; 0
    a196:	98 01       	movw	r18, r16
    a198:	b7 01       	movw	r22, r14
    a19a:	a6 01       	movw	r20, r12
    a19c:	ce 01       	movw	r24, r28
    a19e:	15 dc       	rcall	.-2006   	; 0x99ca <put_fat>
    a1a0:	00 97       	sbiw	r24, 0x00	; 0
    a1a2:	49 f5       	brne	.+82     	; 0xa1f6 <remove_chain+0x100>
    a1a4:	89 89       	ldd	r24, Y+17	; 0x11
    a1a6:	9a 89       	ldd	r25, Y+18	; 0x12
    a1a8:	ab 89       	ldd	r26, Y+19	; 0x13
    a1aa:	bc 89       	ldd	r27, Y+20	; 0x14
    a1ac:	49 8d       	ldd	r20, Y+25	; 0x19
    a1ae:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a1b0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a1b2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a1b4:	6a 01       	movw	r12, r20
    a1b6:	7b 01       	movw	r14, r22
    a1b8:	e2 e0       	ldi	r30, 0x02	; 2
    a1ba:	ce 1a       	sub	r12, r30
    a1bc:	d1 08       	sbc	r13, r1
    a1be:	e1 08       	sbc	r14, r1
    a1c0:	f1 08       	sbc	r15, r1
    a1c2:	8c 15       	cp	r24, r12
    a1c4:	9d 05       	cpc	r25, r13
    a1c6:	ae 05       	cpc	r26, r14
    a1c8:	bf 05       	cpc	r27, r15
    a1ca:	50 f4       	brcc	.+20     	; 0xa1e0 <remove_chain+0xea>
    a1cc:	01 96       	adiw	r24, 0x01	; 1
    a1ce:	a1 1d       	adc	r26, r1
    a1d0:	b1 1d       	adc	r27, r1
    a1d2:	89 8b       	std	Y+17, r24	; 0x11
    a1d4:	9a 8b       	std	Y+18, r25	; 0x12
    a1d6:	ab 8b       	std	Y+19, r26	; 0x13
    a1d8:	bc 8b       	std	Y+20, r27	; 0x14
    a1da:	8c 81       	ldd	r24, Y+4	; 0x04
    a1dc:	81 60       	ori	r24, 0x01	; 1
    a1de:	8c 83       	std	Y+4, r24	; 0x04
    a1e0:	73 01       	movw	r14, r6
    a1e2:	62 01       	movw	r12, r4
    a1e4:	44 16       	cp	r4, r20
    a1e6:	55 06       	cpc	r5, r21
    a1e8:	66 06       	cpc	r6, r22
    a1ea:	77 06       	cpc	r7, r23
    a1ec:	08 f4       	brcc	.+2      	; 0xa1f0 <remove_chain+0xfa>
    a1ee:	b7 cf       	rjmp	.-146    	; 0xa15e <remove_chain+0x68>
    a1f0:	c3 cf       	rjmp	.-122    	; 0xa178 <remove_chain+0x82>
    a1f2:	21 e0       	ldi	r18, 0x01	; 1
    a1f4:	c2 cf       	rjmp	.-124    	; 0xa17a <remove_chain+0x84>
    a1f6:	28 2f       	mov	r18, r24
    a1f8:	82 2f       	mov	r24, r18
    a1fa:	df 91       	pop	r29
    a1fc:	cf 91       	pop	r28
    a1fe:	1f 91       	pop	r17
    a200:	0f 91       	pop	r16
    a202:	ff 90       	pop	r15
    a204:	ef 90       	pop	r14
    a206:	df 90       	pop	r13
    a208:	cf 90       	pop	r12
    a20a:	bf 90       	pop	r11
    a20c:	af 90       	pop	r10
    a20e:	7f 90       	pop	r7
    a210:	6f 90       	pop	r6
    a212:	5f 90       	pop	r5
    a214:	4f 90       	pop	r4
    a216:	08 95       	ret

0000a218 <dir_next>:
    a218:	4f 92       	push	r4
    a21a:	5f 92       	push	r5
    a21c:	6f 92       	push	r6
    a21e:	7f 92       	push	r7
    a220:	af 92       	push	r10
    a222:	bf 92       	push	r11
    a224:	cf 92       	push	r12
    a226:	df 92       	push	r13
    a228:	ef 92       	push	r14
    a22a:	ff 92       	push	r15
    a22c:	0f 93       	push	r16
    a22e:	1f 93       	push	r17
    a230:	cf 93       	push	r28
    a232:	df 93       	push	r29
    a234:	ec 01       	movw	r28, r24
    a236:	08 81       	ld	r16, Y
    a238:	19 81       	ldd	r17, Y+1	; 0x01
    a23a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a23c:	df 84       	ldd	r13, Y+15	; 0x0f
    a23e:	e8 88       	ldd	r14, Y+16	; 0x10
    a240:	f9 88       	ldd	r15, Y+17	; 0x11
    a242:	80 e2       	ldi	r24, 0x20	; 32
    a244:	c8 0e       	add	r12, r24
    a246:	d1 1c       	adc	r13, r1
    a248:	e1 1c       	adc	r14, r1
    a24a:	f1 1c       	adc	r15, r1
    a24c:	c1 14       	cp	r12, r1
    a24e:	d1 04       	cpc	r13, r1
    a250:	e0 e2       	ldi	r30, 0x20	; 32
    a252:	ee 06       	cpc	r14, r30
    a254:	f1 04       	cpc	r15, r1
    a256:	20 f0       	brcs	.+8      	; 0xa260 <dir_next+0x48>
    a258:	1e 8a       	std	Y+22, r1	; 0x16
    a25a:	1f 8a       	std	Y+23, r1	; 0x17
    a25c:	18 8e       	std	Y+24, r1	; 0x18
    a25e:	19 8e       	std	Y+25, r1	; 0x19
    a260:	8e 89       	ldd	r24, Y+22	; 0x16
    a262:	9f 89       	ldd	r25, Y+23	; 0x17
    a264:	a8 8d       	ldd	r26, Y+24	; 0x18
    a266:	b9 8d       	ldd	r27, Y+25	; 0x19
    a268:	00 97       	sbiw	r24, 0x00	; 0
    a26a:	a1 05       	cpc	r26, r1
    a26c:	b1 05       	cpc	r27, r1
    a26e:	09 f4       	brne	.+2      	; 0xa272 <dir_next+0x5a>
    a270:	a7 c0       	rjmp	.+334    	; 0xa3c0 <dir_next+0x1a8>
    a272:	5b 01       	movw	r10, r22
    a274:	b7 01       	movw	r22, r14
    a276:	a6 01       	movw	r20, r12
    a278:	51 70       	andi	r21, 0x01	; 1
    a27a:	66 27       	eor	r22, r22
    a27c:	77 27       	eor	r23, r23
    a27e:	45 2b       	or	r20, r21
    a280:	46 2b       	or	r20, r22
    a282:	47 2b       	or	r20, r23
    a284:	09 f0       	breq	.+2      	; 0xa288 <dir_next+0x70>
    a286:	8d c0       	rjmp	.+282    	; 0xa3a2 <dir_next+0x18a>
    a288:	01 96       	adiw	r24, 0x01	; 1
    a28a:	a1 1d       	adc	r26, r1
    a28c:	b1 1d       	adc	r27, r1
    a28e:	8e 8b       	std	Y+22, r24	; 0x16
    a290:	9f 8b       	std	Y+23, r25	; 0x17
    a292:	a8 8f       	std	Y+24, r26	; 0x18
    a294:	b9 8f       	std	Y+25, r27	; 0x19
    a296:	4a 89       	ldd	r20, Y+18	; 0x12
    a298:	5b 89       	ldd	r21, Y+19	; 0x13
    a29a:	6c 89       	ldd	r22, Y+20	; 0x14
    a29c:	7d 89       	ldd	r23, Y+21	; 0x15
    a29e:	f8 01       	movw	r30, r16
    a2a0:	41 15       	cp	r20, r1
    a2a2:	51 05       	cpc	r21, r1
    a2a4:	61 05       	cpc	r22, r1
    a2a6:	71 05       	cpc	r23, r1
    a2a8:	c1 f4       	brne	.+48     	; 0xa2da <dir_next+0xc2>
    a2aa:	87 81       	ldd	r24, Z+7	; 0x07
    a2ac:	90 85       	ldd	r25, Z+8	; 0x08
    a2ae:	a0 e0       	ldi	r26, 0x00	; 0
    a2b0:	b0 e0       	ldi	r27, 0x00	; 0
    a2b2:	b7 01       	movw	r22, r14
    a2b4:	a6 01       	movw	r20, r12
    a2b6:	35 e0       	ldi	r19, 0x05	; 5
    a2b8:	76 95       	lsr	r23
    a2ba:	67 95       	ror	r22
    a2bc:	57 95       	ror	r21
    a2be:	47 95       	ror	r20
    a2c0:	3a 95       	dec	r19
    a2c2:	d1 f7       	brne	.-12     	; 0xa2b8 <dir_next+0xa0>
    a2c4:	48 17       	cp	r20, r24
    a2c6:	59 07       	cpc	r21, r25
    a2c8:	6a 07       	cpc	r22, r26
    a2ca:	7b 07       	cpc	r23, r27
    a2cc:	08 f4       	brcc	.+2      	; 0xa2d0 <dir_next+0xb8>
    a2ce:	69 c0       	rjmp	.+210    	; 0xa3a2 <dir_next+0x18a>
    a2d0:	1e 8a       	std	Y+22, r1	; 0x16
    a2d2:	1f 8a       	std	Y+23, r1	; 0x17
    a2d4:	18 8e       	std	Y+24, r1	; 0x18
    a2d6:	19 8e       	std	Y+25, r1	; 0x19
    a2d8:	73 c0       	rjmp	.+230    	; 0xa3c0 <dir_next+0x1a8>
    a2da:	81 85       	ldd	r24, Z+9	; 0x09
    a2dc:	92 85       	ldd	r25, Z+10	; 0x0a
    a2de:	01 97       	sbiw	r24, 0x01	; 1
    a2e0:	a0 e0       	ldi	r26, 0x00	; 0
    a2e2:	b0 e0       	ldi	r27, 0x00	; 0
    a2e4:	26 01       	movw	r4, r12
    a2e6:	37 01       	movw	r6, r14
    a2e8:	29 e0       	ldi	r18, 0x09	; 9
    a2ea:	76 94       	lsr	r7
    a2ec:	67 94       	ror	r6
    a2ee:	57 94       	ror	r5
    a2f0:	47 94       	ror	r4
    a2f2:	2a 95       	dec	r18
    a2f4:	d1 f7       	brne	.-12     	; 0xa2ea <dir_next+0xd2>
    a2f6:	84 21       	and	r24, r4
    a2f8:	95 21       	and	r25, r5
    a2fa:	a6 21       	and	r26, r6
    a2fc:	b7 21       	and	r27, r7
    a2fe:	89 2b       	or	r24, r25
    a300:	8a 2b       	or	r24, r26
    a302:	8b 2b       	or	r24, r27
    a304:	09 f0       	breq	.+2      	; 0xa308 <dir_next+0xf0>
    a306:	4d c0       	rjmp	.+154    	; 0xa3a2 <dir_next+0x18a>
    a308:	c8 01       	movw	r24, r16
    a30a:	5a dc       	rcall	.-1868   	; 0x9bc0 <get_fat.isra.10>
    a30c:	2b 01       	movw	r4, r22
    a30e:	3c 01       	movw	r6, r24
    a310:	62 30       	cpi	r22, 0x02	; 2
    a312:	71 05       	cpc	r23, r1
    a314:	81 05       	cpc	r24, r1
    a316:	91 05       	cpc	r25, r1
    a318:	18 f4       	brcc	.+6      	; 0xa320 <dir_next+0x108>
    a31a:	82 e0       	ldi	r24, 0x02	; 2
    a31c:	90 e0       	ldi	r25, 0x00	; 0
    a31e:	55 c0       	rjmp	.+170    	; 0xa3ca <dir_next+0x1b2>
    a320:	8f ef       	ldi	r24, 0xFF	; 255
    a322:	48 16       	cp	r4, r24
    a324:	58 06       	cpc	r5, r24
    a326:	68 06       	cpc	r6, r24
    a328:	78 06       	cpc	r7, r24
    a32a:	19 f4       	brne	.+6      	; 0xa332 <dir_next+0x11a>
    a32c:	81 e0       	ldi	r24, 0x01	; 1
    a32e:	90 e0       	ldi	r25, 0x00	; 0
    a330:	4c c0       	rjmp	.+152    	; 0xa3ca <dir_next+0x1b2>
    a332:	f8 01       	movw	r30, r16
    a334:	81 8d       	ldd	r24, Z+25	; 0x19
    a336:	92 8d       	ldd	r25, Z+26	; 0x1a
    a338:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a33a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a33c:	48 16       	cp	r4, r24
    a33e:	59 06       	cpc	r5, r25
    a340:	6a 06       	cpc	r6, r26
    a342:	7b 06       	cpc	r7, r27
    a344:	08 f1       	brcs	.+66     	; 0xa388 <dir_next+0x170>
    a346:	ab 28       	or	r10, r11
    a348:	19 f2       	breq	.-122    	; 0xa2d0 <dir_next+0xb8>
    a34a:	4a 89       	ldd	r20, Y+18	; 0x12
    a34c:	5b 89       	ldd	r21, Y+19	; 0x13
    a34e:	6c 89       	ldd	r22, Y+20	; 0x14
    a350:	7d 89       	ldd	r23, Y+21	; 0x15
    a352:	ce 01       	movw	r24, r28
    a354:	aa dd       	rcall	.-1196   	; 0x9eaa <create_chain>
    a356:	2b 01       	movw	r4, r22
    a358:	3c 01       	movw	r6, r24
    a35a:	61 15       	cp	r22, r1
    a35c:	71 05       	cpc	r23, r1
    a35e:	81 05       	cpc	r24, r1
    a360:	91 05       	cpc	r25, r1
    a362:	89 f1       	breq	.+98     	; 0xa3c6 <dir_next+0x1ae>
    a364:	61 30       	cpi	r22, 0x01	; 1
    a366:	71 05       	cpc	r23, r1
    a368:	81 05       	cpc	r24, r1
    a36a:	91 05       	cpc	r25, r1
    a36c:	b1 f2       	breq	.-84     	; 0xa31a <dir_next+0x102>
    a36e:	8f ef       	ldi	r24, 0xFF	; 255
    a370:	48 16       	cp	r4, r24
    a372:	58 06       	cpc	r5, r24
    a374:	68 06       	cpc	r6, r24
    a376:	78 06       	cpc	r7, r24
    a378:	c9 f2       	breq	.-78     	; 0xa32c <dir_next+0x114>
    a37a:	b3 01       	movw	r22, r6
    a37c:	a2 01       	movw	r20, r4
    a37e:	c8 01       	movw	r24, r16
    a380:	0e 94 68 49 	call	0x92d0	; 0x92d0 <dir_clear>
    a384:	89 2b       	or	r24, r25
    a386:	91 f6       	brne	.-92     	; 0xa32c <dir_next+0x114>
    a388:	4a 8a       	std	Y+18, r4	; 0x12
    a38a:	5b 8a       	std	Y+19, r5	; 0x13
    a38c:	6c 8a       	std	Y+20, r6	; 0x14
    a38e:	7d 8a       	std	Y+21, r7	; 0x15
    a390:	b3 01       	movw	r22, r6
    a392:	a2 01       	movw	r20, r4
    a394:	c8 01       	movw	r24, r16
    a396:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    a39a:	6e 8b       	std	Y+22, r22	; 0x16
    a39c:	7f 8b       	std	Y+23, r23	; 0x17
    a39e:	88 8f       	std	Y+24, r24	; 0x18
    a3a0:	99 8f       	std	Y+25, r25	; 0x19
    a3a2:	ce 86       	std	Y+14, r12	; 0x0e
    a3a4:	df 86       	std	Y+15, r13	; 0x0f
    a3a6:	e8 8a       	std	Y+16, r14	; 0x10
    a3a8:	f9 8a       	std	Y+17, r15	; 0x11
    a3aa:	0b 5c       	subi	r16, 0xCB	; 203
    a3ac:	1f 4f       	sbci	r17, 0xFF	; 255
    a3ae:	e1 e0       	ldi	r30, 0x01	; 1
    a3b0:	de 22       	and	r13, r30
    a3b2:	c0 0e       	add	r12, r16
    a3b4:	d1 1e       	adc	r13, r17
    a3b6:	db 8e       	std	Y+27, r13	; 0x1b
    a3b8:	ca 8e       	std	Y+26, r12	; 0x1a
    a3ba:	80 e0       	ldi	r24, 0x00	; 0
    a3bc:	90 e0       	ldi	r25, 0x00	; 0
    a3be:	05 c0       	rjmp	.+10     	; 0xa3ca <dir_next+0x1b2>
    a3c0:	84 e0       	ldi	r24, 0x04	; 4
    a3c2:	90 e0       	ldi	r25, 0x00	; 0
    a3c4:	02 c0       	rjmp	.+4      	; 0xa3ca <dir_next+0x1b2>
    a3c6:	87 e0       	ldi	r24, 0x07	; 7
    a3c8:	90 e0       	ldi	r25, 0x00	; 0
    a3ca:	df 91       	pop	r29
    a3cc:	cf 91       	pop	r28
    a3ce:	1f 91       	pop	r17
    a3d0:	0f 91       	pop	r16
    a3d2:	ff 90       	pop	r15
    a3d4:	ef 90       	pop	r14
    a3d6:	df 90       	pop	r13
    a3d8:	cf 90       	pop	r12
    a3da:	bf 90       	pop	r11
    a3dc:	af 90       	pop	r10
    a3de:	7f 90       	pop	r7
    a3e0:	6f 90       	pop	r6
    a3e2:	5f 90       	pop	r5
    a3e4:	4f 90       	pop	r4
    a3e6:	08 95       	ret

0000a3e8 <dir_alloc>:
    a3e8:	a0 e0       	ldi	r26, 0x00	; 0
    a3ea:	b0 e0       	ldi	r27, 0x00	; 0
    a3ec:	ea ef       	ldi	r30, 0xFA	; 250
    a3ee:	f1 e5       	ldi	r31, 0x51	; 81
    a3f0:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    a3f4:	ec 01       	movw	r28, r24
    a3f6:	6b 01       	movw	r12, r22
    a3f8:	e8 80       	ld	r14, Y
    a3fa:	f9 80       	ldd	r15, Y+1	; 0x01
    a3fc:	40 e0       	ldi	r20, 0x00	; 0
    a3fe:	50 e0       	ldi	r21, 0x00	; 0
    a400:	ba 01       	movw	r22, r20
    a402:	92 dc       	rcall	.-1756   	; 0x9d28 <dir_sdi>
    a404:	00 97       	sbiw	r24, 0x00	; 0
    a406:	f9 f4       	brne	.+62     	; 0xa446 <dir_alloc+0x5e>
    a408:	00 e0       	ldi	r16, 0x00	; 0
    a40a:	10 e0       	ldi	r17, 0x00	; 0
    a40c:	4e 89       	ldd	r20, Y+22	; 0x16
    a40e:	5f 89       	ldd	r21, Y+23	; 0x17
    a410:	68 8d       	ldd	r22, Y+24	; 0x18
    a412:	79 8d       	ldd	r23, Y+25	; 0x19
    a414:	c7 01       	movw	r24, r14
    a416:	04 d8       	rcall	.-4088   	; 0x9420 <move_window>
    a418:	00 97       	sbiw	r24, 0x00	; 0
    a41a:	a9 f4       	brne	.+42     	; 0xa446 <dir_alloc+0x5e>
    a41c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a41e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a420:	20 81       	ld	r18, Z
    a422:	25 3e       	cpi	r18, 0xE5	; 229
    a424:	11 f0       	breq	.+4      	; 0xa42a <dir_alloc+0x42>
    a426:	21 11       	cpse	r18, r1
    a428:	06 c0       	rjmp	.+12     	; 0xa436 <dir_alloc+0x4e>
    a42a:	0f 5f       	subi	r16, 0xFF	; 255
    a42c:	1f 4f       	sbci	r17, 0xFF	; 255
    a42e:	0c 15       	cp	r16, r12
    a430:	1d 05       	cpc	r17, r13
    a432:	19 f4       	brne	.+6      	; 0xa43a <dir_alloc+0x52>
    a434:	0d c0       	rjmp	.+26     	; 0xa450 <dir_alloc+0x68>
    a436:	00 e0       	ldi	r16, 0x00	; 0
    a438:	10 e0       	ldi	r17, 0x00	; 0
    a43a:	61 e0       	ldi	r22, 0x01	; 1
    a43c:	70 e0       	ldi	r23, 0x00	; 0
    a43e:	ce 01       	movw	r24, r28
    a440:	eb de       	rcall	.-554    	; 0xa218 <dir_next>
    a442:	00 97       	sbiw	r24, 0x00	; 0
    a444:	19 f3       	breq	.-58     	; 0xa40c <dir_alloc+0x24>
    a446:	84 30       	cpi	r24, 0x04	; 4
    a448:	91 05       	cpc	r25, r1
    a44a:	11 f4       	brne	.+4      	; 0xa450 <dir_alloc+0x68>
    a44c:	87 e0       	ldi	r24, 0x07	; 7
    a44e:	90 e0       	ldi	r25, 0x00	; 0
    a450:	cd b7       	in	r28, 0x3d	; 61
    a452:	de b7       	in	r29, 0x3e	; 62
    a454:	e8 e0       	ldi	r30, 0x08	; 8
    a456:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000a45a <dir_read>:
    a45a:	a0 e0       	ldi	r26, 0x00	; 0
    a45c:	b0 e0       	ldi	r27, 0x00	; 0
    a45e:	e3 e3       	ldi	r30, 0x33	; 51
    a460:	f2 e5       	ldi	r31, 0x52	; 82
    a462:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
    a466:	ec 01       	movw	r28, r24
    a468:	7b 01       	movw	r14, r22
    a46a:	a8 80       	ld	r10, Y
    a46c:	b9 80       	ldd	r11, Y+1	; 0x01
    a46e:	dd 24       	eor	r13, r13
    a470:	da 94       	dec	r13
    a472:	1f ef       	ldi	r17, 0xFF	; 255
    a474:	84 e0       	ldi	r24, 0x04	; 4
    a476:	90 e0       	ldi	r25, 0x00	; 0
    a478:	fd e0       	ldi	r31, 0x0D	; 13
    a47a:	cf 2e       	mov	r12, r31
    a47c:	4e 89       	ldd	r20, Y+22	; 0x16
    a47e:	5f 89       	ldd	r21, Y+23	; 0x17
    a480:	68 8d       	ldd	r22, Y+24	; 0x18
    a482:	79 8d       	ldd	r23, Y+25	; 0x19
    a484:	41 15       	cp	r20, r1
    a486:	51 05       	cpc	r21, r1
    a488:	61 05       	cpc	r22, r1
    a48a:	71 05       	cpc	r23, r1
    a48c:	09 f4       	brne	.+2      	; 0xa490 <dir_read+0x36>
    a48e:	9a c0       	rjmp	.+308    	; 0xa5c4 <dir_read+0x16a>
    a490:	c5 01       	movw	r24, r10
    a492:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    a496:	00 97       	sbiw	r24, 0x00	; 0
    a498:	09 f0       	breq	.+2      	; 0xa49c <dir_read+0x42>
    a49a:	96 c0       	rjmp	.+300    	; 0xa5c8 <dir_read+0x16e>
    a49c:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a49e:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a4a0:	f4 01       	movw	r30, r8
    a4a2:	00 81       	ld	r16, Z
    a4a4:	00 23       	and	r16, r16
    a4a6:	09 f4       	brne	.+2      	; 0xa4aa <dir_read+0x50>
    a4a8:	97 c0       	rjmp	.+302    	; 0xa5d8 <dir_read+0x17e>
    a4aa:	83 85       	ldd	r24, Z+11	; 0x0b
    a4ac:	8f 73       	andi	r24, 0x3F	; 63
    a4ae:	8c 83       	std	Y+4, r24	; 0x04
    a4b0:	05 3e       	cpi	r16, 0xE5	; 229
    a4b2:	09 f4       	brne	.+2      	; 0xa4b6 <dir_read+0x5c>
    a4b4:	7e c0       	rjmp	.+252    	; 0xa5b2 <dir_read+0x158>
    a4b6:	0e 32       	cpi	r16, 0x2E	; 46
    a4b8:	09 f4       	brne	.+2      	; 0xa4bc <dir_read+0x62>
    a4ba:	7b c0       	rjmp	.+246    	; 0xa5b2 <dir_read+0x158>
    a4bc:	21 e0       	ldi	r18, 0x01	; 1
    a4be:	30 e0       	ldi	r19, 0x00	; 0
    a4c0:	98 2f       	mov	r25, r24
    a4c2:	9f 71       	andi	r25, 0x1F	; 31
    a4c4:	98 30       	cpi	r25, 0x08	; 8
    a4c6:	11 f0       	breq	.+4      	; 0xa4cc <dir_read+0x72>
    a4c8:	20 e0       	ldi	r18, 0x00	; 0
    a4ca:	30 e0       	ldi	r19, 0x00	; 0
    a4cc:	2e 15       	cp	r18, r14
    a4ce:	3f 05       	cpc	r19, r15
    a4d0:	09 f0       	breq	.+2      	; 0xa4d4 <dir_read+0x7a>
    a4d2:	6f c0       	rjmp	.+222    	; 0xa5b2 <dir_read+0x158>
    a4d4:	8f 30       	cpi	r24, 0x0F	; 15
    a4d6:	09 f0       	breq	.+2      	; 0xa4da <dir_read+0x80>
    a4d8:	5c c0       	rjmp	.+184    	; 0xa592 <dir_read+0x138>
    a4da:	06 ff       	sbrs	r16, 6
    a4dc:	0c c0       	rjmp	.+24     	; 0xa4f6 <dir_read+0x9c>
    a4de:	f4 01       	movw	r30, r8
    a4e0:	85 85       	ldd	r24, Z+13	; 0x0d
    a4e2:	0f 7b       	andi	r16, 0xBF	; 191
    a4e4:	4e 85       	ldd	r20, Y+14	; 0x0e
    a4e6:	5f 85       	ldd	r21, Y+15	; 0x0f
    a4e8:	68 89       	ldd	r22, Y+16	; 0x10
    a4ea:	79 89       	ldd	r23, Y+17	; 0x11
    a4ec:	48 a7       	std	Y+40, r20	; 0x28
    a4ee:	59 a7       	std	Y+41, r21	; 0x29
    a4f0:	6a a7       	std	Y+42, r22	; 0x2a
    a4f2:	7b a7       	std	Y+43, r23	; 0x2b
    a4f4:	03 c0       	rjmp	.+6      	; 0xa4fc <dir_read+0xa2>
    a4f6:	10 13       	cpse	r17, r16
    a4f8:	5c c0       	rjmp	.+184    	; 0xa5b2 <dir_read+0x158>
    a4fa:	8d 2d       	mov	r24, r13
    a4fc:	f4 01       	movw	r30, r8
    a4fe:	d5 84       	ldd	r13, Z+13	; 0x0d
    a500:	d8 12       	cpse	r13, r24
    a502:	56 c0       	rjmp	.+172    	; 0xa5b0 <dir_read+0x156>
    a504:	82 8d       	ldd	r24, Z+26	; 0x1a
    a506:	93 8d       	ldd	r25, Z+27	; 0x1b
    a508:	89 2b       	or	r24, r25
    a50a:	09 f0       	breq	.+2      	; 0xa50e <dir_read+0xb4>
    a50c:	52 c0       	rjmp	.+164    	; 0xa5b2 <dir_read+0x158>
    a50e:	f5 01       	movw	r30, r10
    a510:	63 85       	ldd	r22, Z+11	; 0x0b
    a512:	74 85       	ldd	r23, Z+12	; 0x0c
    a514:	f4 01       	movw	r30, r8
    a516:	80 81       	ld	r24, Z
    a518:	90 e0       	ldi	r25, 0x00	; 0
    a51a:	8f 7b       	andi	r24, 0xBF	; 191
    a51c:	01 97       	sbiw	r24, 0x01	; 1
    a51e:	c8 9e       	mul	r12, r24
    a520:	90 01       	movw	r18, r0
    a522:	c9 9e       	mul	r12, r25
    a524:	30 0d       	add	r19, r0
    a526:	11 24       	eor	r1, r1
    a528:	ab ee       	ldi	r26, 0xEB	; 235
    a52a:	b4 e0       	ldi	r27, 0x04	; 4
    a52c:	81 e0       	ldi	r24, 0x01	; 1
    a52e:	90 e0       	ldi	r25, 0x00	; 0
    a530:	4d 91       	ld	r20, X+
    a532:	f4 01       	movw	r30, r8
    a534:	e4 0f       	add	r30, r20
    a536:	f1 1d       	adc	r31, r1
    a538:	40 81       	ld	r20, Z
    a53a:	51 81       	ldd	r21, Z+1	; 0x01
    a53c:	00 97       	sbiw	r24, 0x00	; 0
    a53e:	81 f0       	breq	.+32     	; 0xa560 <dir_read+0x106>
    a540:	2f 3f       	cpi	r18, 0xFF	; 255
    a542:	31 05       	cpc	r19, r1
    a544:	09 f0       	breq	.+2      	; 0xa548 <dir_read+0xee>
    a546:	a8 f5       	brcc	.+106    	; 0xa5b2 <dir_read+0x158>
    a548:	c9 01       	movw	r24, r18
    a54a:	88 0f       	add	r24, r24
    a54c:	99 1f       	adc	r25, r25
    a54e:	86 0f       	add	r24, r22
    a550:	97 1f       	adc	r25, r23
    a552:	fc 01       	movw	r30, r24
    a554:	51 83       	std	Z+1, r21	; 0x01
    a556:	40 83       	st	Z, r20
    a558:	ca 01       	movw	r24, r20
    a55a:	2f 5f       	subi	r18, 0xFF	; 255
    a55c:	3f 4f       	sbci	r19, 0xFF	; 255
    a55e:	03 c0       	rjmp	.+6      	; 0xa566 <dir_read+0x10c>
    a560:	4f 3f       	cpi	r20, 0xFF	; 255
    a562:	5f 4f       	sbci	r21, 0xFF	; 255
    a564:	31 f5       	brne	.+76     	; 0xa5b2 <dir_read+0x158>
    a566:	44 e0       	ldi	r20, 0x04	; 4
    a568:	a8 3f       	cpi	r26, 0xF8	; 248
    a56a:	b4 07       	cpc	r27, r20
    a56c:	09 f7       	brne	.-62     	; 0xa530 <dir_read+0xd6>
    a56e:	f4 01       	movw	r30, r8
    a570:	40 81       	ld	r20, Z
    a572:	46 ff       	sbrs	r20, 6
    a574:	2e c0       	rjmp	.+92     	; 0xa5d2 <dir_read+0x178>
    a576:	89 2b       	or	r24, r25
    a578:	61 f1       	breq	.+88     	; 0xa5d2 <dir_read+0x178>
    a57a:	2f 3f       	cpi	r18, 0xFF	; 255
    a57c:	31 05       	cpc	r19, r1
    a57e:	09 f0       	breq	.+2      	; 0xa582 <dir_read+0x128>
    a580:	c0 f4       	brcc	.+48     	; 0xa5b2 <dir_read+0x158>
    a582:	22 0f       	add	r18, r18
    a584:	33 1f       	adc	r19, r19
    a586:	fb 01       	movw	r30, r22
    a588:	e2 0f       	add	r30, r18
    a58a:	f3 1f       	adc	r31, r19
    a58c:	11 82       	std	Z+1, r1	; 0x01
    a58e:	10 82       	st	Z, r1
    a590:	20 c0       	rjmp	.+64     	; 0xa5d2 <dir_read+0x178>
    a592:	11 11       	cpse	r17, r1
    a594:	05 c0       	rjmp	.+10     	; 0xa5a0 <dir_read+0x146>
    a596:	c4 01       	movw	r24, r8
    a598:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <sum_sfn>
    a59c:	d8 16       	cp	r13, r24
    a59e:	f9 f0       	breq	.+62     	; 0xa5de <dir_read+0x184>
    a5a0:	8f ef       	ldi	r24, 0xFF	; 255
    a5a2:	9f ef       	ldi	r25, 0xFF	; 255
    a5a4:	dc 01       	movw	r26, r24
    a5a6:	88 a7       	std	Y+40, r24	; 0x28
    a5a8:	99 a7       	std	Y+41, r25	; 0x29
    a5aa:	aa a7       	std	Y+42, r26	; 0x2a
    a5ac:	bb a7       	std	Y+43, r27	; 0x2b
    a5ae:	17 c0       	rjmp	.+46     	; 0xa5de <dir_read+0x184>
    a5b0:	d8 2e       	mov	r13, r24
    a5b2:	1f ef       	ldi	r17, 0xFF	; 255
    a5b4:	60 e0       	ldi	r22, 0x00	; 0
    a5b6:	70 e0       	ldi	r23, 0x00	; 0
    a5b8:	ce 01       	movw	r24, r28
    a5ba:	2e de       	rcall	.-932    	; 0xa218 <dir_next>
    a5bc:	00 97       	sbiw	r24, 0x00	; 0
    a5be:	09 f4       	brne	.+2      	; 0xa5c2 <dir_read+0x168>
    a5c0:	5d cf       	rjmp	.-326    	; 0xa47c <dir_read+0x22>
    a5c2:	02 c0       	rjmp	.+4      	; 0xa5c8 <dir_read+0x16e>
    a5c4:	00 97       	sbiw	r24, 0x00	; 0
    a5c6:	59 f0       	breq	.+22     	; 0xa5de <dir_read+0x184>
    a5c8:	1e 8a       	std	Y+22, r1	; 0x16
    a5ca:	1f 8a       	std	Y+23, r1	; 0x17
    a5cc:	18 8e       	std	Y+24, r1	; 0x18
    a5ce:	19 8e       	std	Y+25, r1	; 0x19
    a5d0:	08 c0       	rjmp	.+16     	; 0xa5e2 <dir_read+0x188>
    a5d2:	1f ef       	ldi	r17, 0xFF	; 255
    a5d4:	10 0f       	add	r17, r16
    a5d6:	ee cf       	rjmp	.-36     	; 0xa5b4 <dir_read+0x15a>
    a5d8:	84 e0       	ldi	r24, 0x04	; 4
    a5da:	90 e0       	ldi	r25, 0x00	; 0
    a5dc:	f5 cf       	rjmp	.-22     	; 0xa5c8 <dir_read+0x16e>
    a5de:	80 e0       	ldi	r24, 0x00	; 0
    a5e0:	90 e0       	ldi	r25, 0x00	; 0
    a5e2:	cd b7       	in	r28, 0x3d	; 61
    a5e4:	de b7       	in	r29, 0x3e	; 62
    a5e6:	ec e0       	ldi	r30, 0x0C	; 12
    a5e8:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

0000a5ec <dir_remove>:
    a5ec:	a0 e0       	ldi	r26, 0x00	; 0
    a5ee:	b0 e0       	ldi	r27, 0x00	; 0
    a5f0:	ec ef       	ldi	r30, 0xFC	; 252
    a5f2:	f2 e5       	ldi	r31, 0x52	; 82
    a5f4:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
    a5f8:	ec 01       	movw	r28, r24
    a5fa:	08 81       	ld	r16, Y
    a5fc:	19 81       	ldd	r17, Y+1	; 0x01
    a5fe:	ce 84       	ldd	r12, Y+14	; 0x0e
    a600:	df 84       	ldd	r13, Y+15	; 0x0f
    a602:	e8 88       	ldd	r14, Y+16	; 0x10
    a604:	f9 88       	ldd	r15, Y+17	; 0x11
    a606:	48 a5       	ldd	r20, Y+40	; 0x28
    a608:	59 a5       	ldd	r21, Y+41	; 0x29
    a60a:	6a a5       	ldd	r22, Y+42	; 0x2a
    a60c:	7b a5       	ldd	r23, Y+43	; 0x2b
    a60e:	4f 3f       	cpi	r20, 0xFF	; 255
    a610:	8f ef       	ldi	r24, 0xFF	; 255
    a612:	58 07       	cpc	r21, r24
    a614:	68 07       	cpc	r22, r24
    a616:	78 07       	cpc	r23, r24
    a618:	29 f4       	brne	.+10     	; 0xa624 <dir_remove+0x38>
    a61a:	85 ee       	ldi	r24, 0xE5	; 229
    a61c:	b8 2e       	mov	r11, r24
    a61e:	aa 24       	eor	r10, r10
    a620:	a3 94       	inc	r10
    a622:	19 c0       	rjmp	.+50     	; 0xa656 <dir_remove+0x6a>
    a624:	ce 01       	movw	r24, r28
    a626:	80 db       	rcall	.-2304   	; 0x9d28 <dir_sdi>
    a628:	00 97       	sbiw	r24, 0x00	; 0
    a62a:	19 f5       	brne	.+70     	; 0xa672 <dir_remove+0x86>
    a62c:	f6 cf       	rjmp	.-20     	; 0xa61a <dir_remove+0x2e>
    a62e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a630:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a632:	b0 82       	st	Z, r11
    a634:	f8 01       	movw	r30, r16
    a636:	a3 82       	std	Z+3, r10	; 0x03
    a638:	4e 85       	ldd	r20, Y+14	; 0x0e
    a63a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a63c:	68 89       	ldd	r22, Y+16	; 0x10
    a63e:	79 89       	ldd	r23, Y+17	; 0x11
    a640:	4c 15       	cp	r20, r12
    a642:	5d 05       	cpc	r21, r13
    a644:	6e 05       	cpc	r22, r14
    a646:	7f 05       	cpc	r23, r15
    a648:	a0 f4       	brcc	.+40     	; 0xa672 <dir_remove+0x86>
    a64a:	60 e0       	ldi	r22, 0x00	; 0
    a64c:	70 e0       	ldi	r23, 0x00	; 0
    a64e:	ce 01       	movw	r24, r28
    a650:	e3 dd       	rcall	.-1082   	; 0xa218 <dir_next>
    a652:	00 97       	sbiw	r24, 0x00	; 0
    a654:	49 f4       	brne	.+18     	; 0xa668 <dir_remove+0x7c>
    a656:	4e 89       	ldd	r20, Y+22	; 0x16
    a658:	5f 89       	ldd	r21, Y+23	; 0x17
    a65a:	68 8d       	ldd	r22, Y+24	; 0x18
    a65c:	79 8d       	ldd	r23, Y+25	; 0x19
    a65e:	c8 01       	movw	r24, r16
    a660:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    a664:	00 97       	sbiw	r24, 0x00	; 0
    a666:	19 f3       	breq	.-58     	; 0xa62e <dir_remove+0x42>
    a668:	84 30       	cpi	r24, 0x04	; 4
    a66a:	91 05       	cpc	r25, r1
    a66c:	11 f4       	brne	.+4      	; 0xa672 <dir_remove+0x86>
    a66e:	82 e0       	ldi	r24, 0x02	; 2
    a670:	90 e0       	ldi	r25, 0x00	; 0
    a672:	cd b7       	in	r28, 0x3d	; 61
    a674:	de b7       	in	r29, 0x3e	; 62
    a676:	ea e0       	ldi	r30, 0x0A	; 10
    a678:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0000a67c <dir_find>:
    a67c:	ac e0       	ldi	r26, 0x0C	; 12
    a67e:	b0 e0       	ldi	r27, 0x00	; 0
    a680:	e4 e4       	ldi	r30, 0x44	; 68
    a682:	f3 e5       	ldi	r31, 0x53	; 83
    a684:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    a688:	9c 87       	std	Y+12, r25	; 0x0c
    a68a:	8b 87       	std	Y+11, r24	; 0x0b
    a68c:	fc 01       	movw	r30, r24
    a68e:	01 90       	ld	r0, Z+
    a690:	f0 81       	ld	r31, Z
    a692:	e0 2d       	mov	r30, r0
    a694:	fc 83       	std	Y+4, r31	; 0x04
    a696:	eb 83       	std	Y+3, r30	; 0x03
    a698:	40 e0       	ldi	r20, 0x00	; 0
    a69a:	50 e0       	ldi	r21, 0x00	; 0
    a69c:	ba 01       	movw	r22, r20
    a69e:	44 db       	rcall	.-2424   	; 0x9d28 <dir_sdi>
    a6a0:	00 97       	sbiw	r24, 0x00	; 0
    a6a2:	09 f0       	breq	.+2      	; 0xa6a6 <dir_find+0x2a>
    a6a4:	e7 c0       	rjmp	.+462    	; 0xa874 <dir_find+0x1f8>
    a6a6:	8f ef       	ldi	r24, 0xFF	; 255
    a6a8:	9f ef       	ldi	r25, 0xFF	; 255
    a6aa:	dc 01       	movw	r26, r24
    a6ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    a6ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    a6b0:	80 a7       	std	Z+40, r24	; 0x28
    a6b2:	91 a7       	std	Z+41, r25	; 0x29
    a6b4:	a2 a7       	std	Z+42, r26	; 0x2a
    a6b6:	b3 a7       	std	Z+43, r27	; 0x2b
    a6b8:	0f ef       	ldi	r16, 0xFF	; 255
    a6ba:	1f ef       	ldi	r17, 0xFF	; 255
    a6bc:	44 24       	eor	r4, r4
    a6be:	4a 94       	dec	r4
    a6c0:	54 2c       	mov	r5, r4
    a6c2:	32 01       	movw	r6, r4
    a6c4:	7c 96       	adiw	r30, 0x1c	; 28
    a6c6:	fa 87       	std	Y+10, r31	; 0x0a
    a6c8:	e9 87       	std	Y+9, r30	; 0x09
    a6ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    a6cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    a6ce:	46 89       	ldd	r20, Z+22	; 0x16
    a6d0:	57 89       	ldd	r21, Z+23	; 0x17
    a6d2:	60 8d       	ldd	r22, Z+24	; 0x18
    a6d4:	71 8d       	ldd	r23, Z+25	; 0x19
    a6d6:	8b 81       	ldd	r24, Y+3	; 0x03
    a6d8:	9c 81       	ldd	r25, Y+4	; 0x04
    a6da:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    a6de:	00 97       	sbiw	r24, 0x00	; 0
    a6e0:	09 f0       	breq	.+2      	; 0xa6e4 <dir_find+0x68>
    a6e2:	c8 c0       	rjmp	.+400    	; 0xa874 <dir_find+0x1f8>
    a6e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    a6e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    a6e8:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a6ea:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a6ec:	f7 01       	movw	r30, r14
    a6ee:	d0 80       	ld	r13, Z
    a6f0:	dd 20       	and	r13, r13
    a6f2:	09 f4       	brne	.+2      	; 0xa6f6 <dir_find+0x7a>
    a6f4:	c1 c0       	rjmp	.+386    	; 0xa878 <dir_find+0x1fc>
    a6f6:	93 85       	ldd	r25, Z+11	; 0x0b
    a6f8:	89 2f       	mov	r24, r25
    a6fa:	8f 73       	andi	r24, 0x3F	; 63
    a6fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    a6fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    a700:	84 83       	std	Z+4, r24	; 0x04
    a702:	f5 ee       	ldi	r31, 0xE5	; 229
    a704:	df 16       	cp	r13, r31
    a706:	09 f4       	brne	.+2      	; 0xa70a <dir_find+0x8e>
    a708:	a6 c0       	rjmp	.+332    	; 0xa856 <dir_find+0x1da>
    a70a:	93 ff       	sbrs	r25, 3
    a70c:	04 c0       	rjmp	.+8      	; 0xa716 <dir_find+0x9a>
    a70e:	8f 30       	cpi	r24, 0x0F	; 15
    a710:	09 f0       	breq	.+2      	; 0xa714 <dir_find+0x98>
    a712:	a1 c0       	rjmp	.+322    	; 0xa856 <dir_find+0x1da>
    a714:	03 c0       	rjmp	.+6      	; 0xa71c <dir_find+0xa0>
    a716:	8f 30       	cpi	r24, 0x0F	; 15
    a718:	09 f0       	breq	.+2      	; 0xa71c <dir_find+0xa0>
    a71a:	88 c0       	rjmp	.+272    	; 0xa82c <dir_find+0x1b0>
    a71c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a71e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a720:	87 a1       	ldd	r24, Z+39	; 0x27
    a722:	86 fd       	sbrc	r24, 6
    a724:	9f c0       	rjmp	.+318    	; 0xa864 <dir_find+0x1e8>
    a726:	d6 fe       	sbrs	r13, 6
    a728:	10 c0       	rjmp	.+32     	; 0xa74a <dir_find+0xce>
    a72a:	f7 01       	movw	r30, r14
    a72c:	05 85       	ldd	r16, Z+13	; 0x0d
    a72e:	fd 2d       	mov	r31, r13
    a730:	ff 7b       	andi	r31, 0xBF	; 191
    a732:	df 2e       	mov	r13, r31
    a734:	eb 85       	ldd	r30, Y+11	; 0x0b
    a736:	fc 85       	ldd	r31, Y+12	; 0x0c
    a738:	86 85       	ldd	r24, Z+14	; 0x0e
    a73a:	97 85       	ldd	r25, Z+15	; 0x0f
    a73c:	a0 89       	ldd	r26, Z+16	; 0x10
    a73e:	b1 89       	ldd	r27, Z+17	; 0x11
    a740:	80 a7       	std	Z+40, r24	; 0x28
    a742:	91 a7       	std	Z+41, r25	; 0x29
    a744:	a2 a7       	std	Z+42, r26	; 0x2a
    a746:	b3 a7       	std	Z+43, r27	; 0x2b
    a748:	02 c0       	rjmp	.+4      	; 0xa74e <dir_find+0xd2>
    a74a:	1d 11       	cpse	r17, r13
    a74c:	8a c0       	rjmp	.+276    	; 0xa862 <dir_find+0x1e6>
    a74e:	f7 01       	movw	r30, r14
    a750:	c5 84       	ldd	r12, Z+13	; 0x0d
    a752:	c0 12       	cpse	r12, r16
    a754:	86 c0       	rjmp	.+268    	; 0xa862 <dir_find+0x1e6>
    a756:	82 8d       	ldd	r24, Z+26	; 0x1a
    a758:	93 8d       	ldd	r25, Z+27	; 0x1b
    a75a:	89 2b       	or	r24, r25
    a75c:	09 f0       	breq	.+2      	; 0xa760 <dir_find+0xe4>
    a75e:	91 c0       	rjmp	.+290    	; 0xa882 <dir_find+0x206>
    a760:	eb 81       	ldd	r30, Y+3	; 0x03
    a762:	fc 81       	ldd	r31, Y+4	; 0x04
    a764:	03 84       	ldd	r0, Z+11	; 0x0b
    a766:	f4 85       	ldd	r31, Z+12	; 0x0c
    a768:	e0 2d       	mov	r30, r0
    a76a:	fe 83       	std	Y+6, r31	; 0x06
    a76c:	ed 83       	std	Y+5, r30	; 0x05
    a76e:	f7 01       	movw	r30, r14
    a770:	80 81       	ld	r24, Z
    a772:	8f 73       	andi	r24, 0x3F	; 63
    a774:	90 e0       	ldi	r25, 0x00	; 0
    a776:	01 97       	sbiw	r24, 0x01	; 1
    a778:	fd e0       	ldi	r31, 0x0D	; 13
    a77a:	f8 9f       	mul	r31, r24
    a77c:	80 01       	movw	r16, r0
    a77e:	f9 9f       	mul	r31, r25
    a780:	10 0d       	add	r17, r0
    a782:	11 24       	eor	r1, r1
    a784:	2b ee       	ldi	r18, 0xEB	; 235
    a786:	34 e0       	ldi	r19, 0x04	; 4
    a788:	3a 83       	std	Y+2, r19	; 0x02
    a78a:	29 83       	std	Y+1, r18	; 0x01
    a78c:	81 e0       	ldi	r24, 0x01	; 1
    a78e:	90 e0       	ldi	r25, 0x00	; 0
    a790:	e9 81       	ldd	r30, Y+1	; 0x01
    a792:	fa 81       	ldd	r31, Y+2	; 0x02
    a794:	21 91       	ld	r18, Z+
    a796:	fa 83       	std	Y+2, r31	; 0x02
    a798:	e9 83       	std	Y+1, r30	; 0x01
    a79a:	f7 01       	movw	r30, r14
    a79c:	e2 0f       	add	r30, r18
    a79e:	f1 1d       	adc	r31, r1
    a7a0:	20 80       	ld	r2, Z
    a7a2:	31 80       	ldd	r3, Z+1	; 0x01
    a7a4:	00 97       	sbiw	r24, 0x00	; 0
    a7a6:	39 f1       	breq	.+78     	; 0xa7f6 <dir_find+0x17a>
    a7a8:	0f 3f       	cpi	r16, 0xFF	; 255
    a7aa:	11 05       	cpc	r17, r1
    a7ac:	11 f0       	breq	.+4      	; 0xa7b2 <dir_find+0x136>
    a7ae:	08 f0       	brcs	.+2      	; 0xa7b2 <dir_find+0x136>
    a7b0:	68 c0       	rjmp	.+208    	; 0xa882 <dir_find+0x206>
    a7b2:	b1 01       	movw	r22, r2
    a7b4:	80 e0       	ldi	r24, 0x00	; 0
    a7b6:	90 e0       	ldi	r25, 0x00	; 0
    a7b8:	0e 94 eb 67 	call	0xcfd6	; 0xcfd6 <ff_wtoupper>
    a7bc:	4b 01       	movw	r8, r22
    a7be:	5c 01       	movw	r10, r24
    a7c0:	98 01       	movw	r18, r16
    a7c2:	2f 5f       	subi	r18, 0xFF	; 255
    a7c4:	3f 4f       	sbci	r19, 0xFF	; 255
    a7c6:	38 87       	std	Y+8, r19	; 0x08
    a7c8:	2f 83       	std	Y+7, r18	; 0x07
    a7ca:	00 0f       	add	r16, r16
    a7cc:	11 1f       	adc	r17, r17
    a7ce:	ed 81       	ldd	r30, Y+5	; 0x05
    a7d0:	fe 81       	ldd	r31, Y+6	; 0x06
    a7d2:	e0 0f       	add	r30, r16
    a7d4:	f1 1f       	adc	r31, r17
    a7d6:	60 81       	ld	r22, Z
    a7d8:	71 81       	ldd	r23, Z+1	; 0x01
    a7da:	80 e0       	ldi	r24, 0x00	; 0
    a7dc:	90 e0       	ldi	r25, 0x00	; 0
    a7de:	0e 94 eb 67 	call	0xcfd6	; 0xcfd6 <ff_wtoupper>
    a7e2:	86 16       	cp	r8, r22
    a7e4:	97 06       	cpc	r9, r23
    a7e6:	a8 06       	cpc	r10, r24
    a7e8:	b9 06       	cpc	r11, r25
    a7ea:	09 f0       	breq	.+2      	; 0xa7ee <dir_find+0x172>
    a7ec:	4a c0       	rjmp	.+148    	; 0xa882 <dir_find+0x206>
    a7ee:	c1 01       	movw	r24, r2
    a7f0:	0f 81       	ldd	r16, Y+7	; 0x07
    a7f2:	18 85       	ldd	r17, Y+8	; 0x08
    a7f4:	05 c0       	rjmp	.+10     	; 0xa800 <dir_find+0x184>
    a7f6:	3f ef       	ldi	r19, 0xFF	; 255
    a7f8:	23 16       	cp	r2, r19
    a7fa:	33 06       	cpc	r3, r19
    a7fc:	09 f0       	breq	.+2      	; 0xa800 <dir_find+0x184>
    a7fe:	41 c0       	rjmp	.+130    	; 0xa882 <dir_find+0x206>
    a800:	e9 81       	ldd	r30, Y+1	; 0x01
    a802:	fa 81       	ldd	r31, Y+2	; 0x02
    a804:	e8 5f       	subi	r30, 0xF8	; 248
    a806:	f4 40       	sbci	r31, 0x04	; 4
    a808:	19 f6       	brne	.-122    	; 0xa790 <dir_find+0x114>
    a80a:	f7 01       	movw	r30, r14
    a80c:	20 81       	ld	r18, Z
    a80e:	26 ff       	sbrs	r18, 6
    a810:	3a c0       	rjmp	.+116    	; 0xa886 <dir_find+0x20a>
    a812:	89 2b       	or	r24, r25
    a814:	c1 f1       	breq	.+112    	; 0xa886 <dir_find+0x20a>
    a816:	00 0f       	add	r16, r16
    a818:	11 1f       	adc	r17, r17
    a81a:	ed 81       	ldd	r30, Y+5	; 0x05
    a81c:	fe 81       	ldd	r31, Y+6	; 0x06
    a81e:	e0 0f       	add	r30, r16
    a820:	f1 1f       	adc	r31, r17
    a822:	80 81       	ld	r24, Z
    a824:	91 81       	ldd	r25, Z+1	; 0x01
    a826:	89 2b       	or	r24, r25
    a828:	71 f1       	breq	.+92     	; 0xa886 <dir_find+0x20a>
    a82a:	2b c0       	rjmp	.+86     	; 0xa882 <dir_find+0x206>
    a82c:	11 11       	cpse	r17, r1
    a82e:	05 c0       	rjmp	.+10     	; 0xa83a <dir_find+0x1be>
    a830:	c7 01       	movw	r24, r14
    a832:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <sum_sfn>
    a836:	08 17       	cp	r16, r24
    a838:	09 f1       	breq	.+66     	; 0xa87c <dir_find+0x200>
    a83a:	eb 85       	ldd	r30, Y+11	; 0x0b
    a83c:	fc 85       	ldd	r31, Y+12	; 0x0c
    a83e:	87 a1       	ldd	r24, Z+39	; 0x27
    a840:	80 fd       	sbrc	r24, 0
    a842:	09 c0       	rjmp	.+18     	; 0xa856 <dir_find+0x1da>
    a844:	4b e0       	ldi	r20, 0x0B	; 11
    a846:	50 e0       	ldi	r21, 0x00	; 0
    a848:	69 85       	ldd	r22, Y+9	; 0x09
    a84a:	7a 85       	ldd	r23, Y+10	; 0x0a
    a84c:	c7 01       	movw	r24, r14
    a84e:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <mem_cmp>
    a852:	89 2b       	or	r24, r25
    a854:	99 f0       	breq	.+38     	; 0xa87c <dir_find+0x200>
    a856:	eb 85       	ldd	r30, Y+11	; 0x0b
    a858:	fc 85       	ldd	r31, Y+12	; 0x0c
    a85a:	40 a6       	std	Z+40, r4	; 0x28
    a85c:	51 a6       	std	Z+41, r5	; 0x29
    a85e:	62 a6       	std	Z+42, r6	; 0x2a
    a860:	73 a6       	std	Z+43, r7	; 0x2b
    a862:	1f ef       	ldi	r17, 0xFF	; 255
    a864:	60 e0       	ldi	r22, 0x00	; 0
    a866:	70 e0       	ldi	r23, 0x00	; 0
    a868:	8b 85       	ldd	r24, Y+11	; 0x0b
    a86a:	9c 85       	ldd	r25, Y+12	; 0x0c
    a86c:	d5 dc       	rcall	.-1622   	; 0xa218 <dir_next>
    a86e:	00 97       	sbiw	r24, 0x00	; 0
    a870:	09 f4       	brne	.+2      	; 0xa874 <dir_find+0x1f8>
    a872:	2b cf       	rjmp	.-426    	; 0xa6ca <dir_find+0x4e>
    a874:	28 2f       	mov	r18, r24
    a876:	0b c0       	rjmp	.+22     	; 0xa88e <dir_find+0x212>
    a878:	24 e0       	ldi	r18, 0x04	; 4
    a87a:	01 c0       	rjmp	.+2      	; 0xa87e <dir_find+0x202>
    a87c:	20 e0       	ldi	r18, 0x00	; 0
    a87e:	90 e0       	ldi	r25, 0x00	; 0
    a880:	06 c0       	rjmp	.+12     	; 0xa88e <dir_find+0x212>
    a882:	0c 2d       	mov	r16, r12
    a884:	ee cf       	rjmp	.-36     	; 0xa862 <dir_find+0x1e6>
    a886:	1f ef       	ldi	r17, 0xFF	; 255
    a888:	1d 0d       	add	r17, r13
    a88a:	0c 2d       	mov	r16, r12
    a88c:	eb cf       	rjmp	.-42     	; 0xa864 <dir_find+0x1e8>
    a88e:	82 2f       	mov	r24, r18
    a890:	2c 96       	adiw	r28, 0x0c	; 12
    a892:	e2 e1       	ldi	r30, 0x12	; 18
    a894:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000a898 <dir_register>:
    a898:	a6 e1       	ldi	r26, 0x16	; 22
    a89a:	b0 e0       	ldi	r27, 0x00	; 0
    a89c:	e2 e5       	ldi	r30, 0x52	; 82
    a89e:	f4 e5       	ldi	r31, 0x54	; 84
    a8a0:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    a8a4:	fc 01       	movw	r30, r24
    a8a6:	27 a1       	ldd	r18, Z+39	; 0x27
    a8a8:	20 7a       	andi	r18, 0xA0	; 160
    a8aa:	09 f0       	breq	.+2      	; 0xa8ae <dir_register+0x16>
    a8ac:	53 c1       	rjmp	.+678    	; 0xab54 <dir_register+0x2bc>
    a8ae:	c0 80       	ld	r12, Z
    a8b0:	d1 80       	ldd	r13, Z+1	; 0x01
    a8b2:	f6 01       	movw	r30, r12
    a8b4:	a3 85       	ldd	r26, Z+11	; 0x0b
    a8b6:	b4 85       	ldd	r27, Z+12	; 0x0c
    a8b8:	81 2c       	mov	r8, r1
    a8ba:	91 2c       	mov	r9, r1
    a8bc:	2d 91       	ld	r18, X+
    a8be:	3d 91       	ld	r19, X+
    a8c0:	23 2b       	or	r18, r19
    a8c2:	21 f0       	breq	.+8      	; 0xa8cc <dir_register+0x34>
    a8c4:	ff ef       	ldi	r31, 0xFF	; 255
    a8c6:	8f 1a       	sub	r8, r31
    a8c8:	9f 0a       	sbc	r9, r31
    a8ca:	f8 cf       	rjmp	.-16     	; 0xa8bc <dir_register+0x24>
    a8cc:	8c 01       	movw	r16, r24
    a8ce:	5c 01       	movw	r10, r24
    a8d0:	2c e1       	ldi	r18, 0x1C	; 28
    a8d2:	a2 0e       	add	r10, r18
    a8d4:	b1 1c       	adc	r11, r1
    a8d6:	4c e0       	ldi	r20, 0x0C	; 12
    a8d8:	50 e0       	ldi	r21, 0x00	; 0
    a8da:	b5 01       	movw	r22, r10
    a8dc:	ce 01       	movw	r24, r28
    a8de:	01 96       	adiw	r24, 0x01	; 1
    a8e0:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    a8e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a8e6:	80 ff       	sbrs	r24, 0
    a8e8:	94 c0       	rjmp	.+296    	; 0xaa12 <dir_register+0x17a>
    a8ea:	80 e4       	ldi	r24, 0x40	; 64
    a8ec:	f8 01       	movw	r30, r16
    a8ee:	87 a3       	std	Z+39, r24	; 0x27
    a8f0:	41 2c       	mov	r4, r1
    a8f2:	51 2c       	mov	r5, r1
    a8f4:	32 01       	movw	r6, r4
    a8f6:	43 94       	inc	r4
    a8f8:	72 01       	movw	r14, r4
    a8fa:	f6 01       	movw	r30, r12
    a8fc:	23 84       	ldd	r2, Z+11	; 0x0b
    a8fe:	34 84       	ldd	r3, Z+12	; 0x0c
    a900:	4b e0       	ldi	r20, 0x0B	; 11
    a902:	50 e0       	ldi	r21, 0x00	; 0
    a904:	be 01       	movw	r22, r28
    a906:	6f 5f       	subi	r22, 0xFF	; 255
    a908:	7f 4f       	sbci	r23, 0xFF	; 255
    a90a:	c5 01       	movw	r24, r10
    a90c:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    a910:	f6 e0       	ldi	r31, 0x06	; 6
    a912:	4f 16       	cp	r4, r31
    a914:	51 04       	cpc	r5, r1
    a916:	18 f1       	brcs	.+70     	; 0xa95e <dir_register+0xc6>
    a918:	f1 01       	movw	r30, r2
    a91a:	b3 01       	movw	r22, r6
    a91c:	a2 01       	movw	r20, r4
    a91e:	81 91       	ld	r24, Z+
    a920:	91 91       	ld	r25, Z+
    a922:	00 97       	sbiw	r24, 0x00	; 0
    a924:	d9 f0       	breq	.+54     	; 0xa95c <dir_register+0xc4>
    a926:	20 e1       	ldi	r18, 0x10	; 16
    a928:	30 e0       	ldi	r19, 0x00	; 0
    a92a:	44 0f       	add	r20, r20
    a92c:	55 1f       	adc	r21, r21
    a92e:	66 1f       	adc	r22, r22
    a930:	77 1f       	adc	r23, r23
    a932:	dc 01       	movw	r26, r24
    a934:	a1 70       	andi	r26, 0x01	; 1
    a936:	bb 27       	eor	r27, r27
    a938:	4a 0f       	add	r20, r26
    a93a:	5b 1f       	adc	r21, r27
    a93c:	61 1d       	adc	r22, r1
    a93e:	71 1d       	adc	r23, r1
    a940:	96 95       	lsr	r25
    a942:	87 95       	ror	r24
    a944:	60 ff       	sbrs	r22, 0
    a946:	06 c0       	rjmp	.+12     	; 0xa954 <dir_register+0xbc>
    a948:	a1 e2       	ldi	r26, 0x21	; 33
    a94a:	4a 27       	eor	r20, r26
    a94c:	a0 e1       	ldi	r26, 0x10	; 16
    a94e:	5a 27       	eor	r21, r26
    a950:	a1 e0       	ldi	r26, 0x01	; 1
    a952:	6a 27       	eor	r22, r26
    a954:	21 50       	subi	r18, 0x01	; 1
    a956:	31 09       	sbc	r19, r1
    a958:	41 f7       	brne	.-48     	; 0xa92a <dir_register+0x92>
    a95a:	e1 cf       	rjmp	.-62     	; 0xa91e <dir_register+0x86>
    a95c:	7a 01       	movw	r14, r20
    a95e:	fe 01       	movw	r30, r28
    a960:	75 96       	adiw	r30, 0x15	; 21
    a962:	27 e0       	ldi	r18, 0x07	; 7
    a964:	30 e0       	ldi	r19, 0x00	; 0
    a966:	9e 2d       	mov	r25, r14
    a968:	9f 70       	andi	r25, 0x0F	; 15
    a96a:	80 e3       	ldi	r24, 0x30	; 48
    a96c:	89 0f       	add	r24, r25
    a96e:	8a 33       	cpi	r24, 0x3A	; 58
    a970:	10 f0       	brcs	.+4      	; 0xa976 <dir_register+0xde>
    a972:	87 e3       	ldi	r24, 0x37	; 55
    a974:	89 0f       	add	r24, r25
    a976:	21 50       	subi	r18, 0x01	; 1
    a978:	31 09       	sbc	r19, r1
    a97a:	82 93       	st	-Z, r24
    a97c:	a4 e0       	ldi	r26, 0x04	; 4
    a97e:	f6 94       	lsr	r15
    a980:	e7 94       	ror	r14
    a982:	aa 95       	dec	r26
    a984:	e1 f7       	brne	.-8      	; 0xa97e <dir_register+0xe6>
    a986:	e1 14       	cp	r14, r1
    a988:	f1 04       	cpc	r15, r1
    a98a:	69 f7       	brne	.-38     	; 0xa966 <dir_register+0xce>
    a98c:	ed e0       	ldi	r30, 0x0D	; 13
    a98e:	f0 e0       	ldi	r31, 0x00	; 0
    a990:	ec 0f       	add	r30, r28
    a992:	fd 1f       	adc	r31, r29
    a994:	e2 0f       	add	r30, r18
    a996:	f3 1f       	adc	r31, r19
    a998:	4e e7       	ldi	r20, 0x7E	; 126
    a99a:	40 83       	st	Z, r20
    a99c:	f5 01       	movw	r30, r10
    a99e:	80 e0       	ldi	r24, 0x00	; 0
    a9a0:	90 e0       	ldi	r25, 0x00	; 0
    a9a2:	28 17       	cp	r18, r24
    a9a4:	39 07       	cpc	r19, r25
    a9a6:	29 f0       	breq	.+10     	; 0xa9b2 <dir_register+0x11a>
    a9a8:	41 91       	ld	r20, Z+
    a9aa:	40 32       	cpi	r20, 0x20	; 32
    a9ac:	11 f0       	breq	.+4      	; 0xa9b2 <dir_register+0x11a>
    a9ae:	01 96       	adiw	r24, 0x01	; 1
    a9b0:	f8 cf       	rjmp	.-16     	; 0xa9a2 <dir_register+0x10a>
    a9b2:	f5 01       	movw	r30, r10
    a9b4:	e8 0f       	add	r30, r24
    a9b6:	f9 1f       	adc	r31, r25
    a9b8:	28 30       	cpi	r18, 0x08	; 8
    a9ba:	31 05       	cpc	r19, r1
    a9bc:	50 f4       	brcc	.+20     	; 0xa9d2 <dir_register+0x13a>
    a9be:	ad e0       	ldi	r26, 0x0D	; 13
    a9c0:	b0 e0       	ldi	r27, 0x00	; 0
    a9c2:	ac 0f       	add	r26, r28
    a9c4:	bd 1f       	adc	r27, r29
    a9c6:	a2 0f       	add	r26, r18
    a9c8:	b3 1f       	adc	r27, r19
    a9ca:	8c 91       	ld	r24, X
    a9cc:	2f 5f       	subi	r18, 0xFF	; 255
    a9ce:	3f 4f       	sbci	r19, 0xFF	; 255
    a9d0:	01 c0       	rjmp	.+2      	; 0xa9d4 <dir_register+0x13c>
    a9d2:	80 e2       	ldi	r24, 0x20	; 32
    a9d4:	81 93       	st	Z+, r24
    a9d6:	cf 01       	movw	r24, r30
    a9d8:	8a 19       	sub	r24, r10
    a9da:	9b 09       	sbc	r25, r11
    a9dc:	08 97       	sbiw	r24, 0x08	; 8
    a9de:	60 f3       	brcs	.-40     	; 0xa9b8 <dir_register+0x120>
    a9e0:	c8 01       	movw	r24, r16
    a9e2:	4c de       	rcall	.-872    	; 0xa67c <dir_find>
    a9e4:	00 97       	sbiw	r24, 0x00	; 0
    a9e6:	71 f4       	brne	.+28     	; 0xaa04 <dir_register+0x16c>
    a9e8:	8f ef       	ldi	r24, 0xFF	; 255
    a9ea:	48 1a       	sub	r4, r24
    a9ec:	58 0a       	sbc	r5, r24
    a9ee:	68 0a       	sbc	r6, r24
    a9f0:	78 0a       	sbc	r7, r24
    a9f2:	94 e6       	ldi	r25, 0x64	; 100
    a9f4:	49 16       	cp	r4, r25
    a9f6:	51 04       	cpc	r5, r1
    a9f8:	61 04       	cpc	r6, r1
    a9fa:	71 04       	cpc	r7, r1
    a9fc:	09 f0       	breq	.+2      	; 0xaa00 <dir_register+0x168>
    a9fe:	7c cf       	rjmp	.-264    	; 0xa8f8 <dir_register+0x60>
    aa00:	27 e0       	ldi	r18, 0x07	; 7
    aa02:	a9 c0       	rjmp	.+338    	; 0xab56 <dir_register+0x2be>
    aa04:	84 30       	cpi	r24, 0x04	; 4
    aa06:	91 05       	cpc	r25, r1
    aa08:	09 f0       	breq	.+2      	; 0xaa0c <dir_register+0x174>
    aa0a:	ce c0       	rjmp	.+412    	; 0xaba8 <dir_register+0x310>
    aa0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa0e:	f8 01       	movw	r30, r16
    aa10:	87 a3       	std	Z+39, r24	; 0x27
    aa12:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa14:	81 ff       	sbrs	r24, 1
    aa16:	0b c0       	rjmp	.+22     	; 0xaa2e <dir_register+0x196>
    aa18:	c4 01       	movw	r24, r8
    aa1a:	0c 96       	adiw	r24, 0x0c	; 12
    aa1c:	6d e0       	ldi	r22, 0x0D	; 13
    aa1e:	70 e0       	ldi	r23, 0x00	; 0
    aa20:	0e 94 ef e0 	call	0x1c1de	; 0x1c1de <__udivmodhi4>
    aa24:	7b 01       	movw	r14, r22
    aa26:	ff ef       	ldi	r31, 0xFF	; 255
    aa28:	ef 1a       	sub	r14, r31
    aa2a:	ff 0a       	sbc	r15, r31
    aa2c:	03 c0       	rjmp	.+6      	; 0xaa34 <dir_register+0x19c>
    aa2e:	ee 24       	eor	r14, r14
    aa30:	e3 94       	inc	r14
    aa32:	f1 2c       	mov	r15, r1
    aa34:	b7 01       	movw	r22, r14
    aa36:	c8 01       	movw	r24, r16
    aa38:	d7 dc       	rcall	.-1618   	; 0xa3e8 <dir_alloc>
    aa3a:	00 97       	sbiw	r24, 0x00	; 0
    aa3c:	09 f0       	breq	.+2      	; 0xaa40 <dir_register+0x1a8>
    aa3e:	b4 c0       	rjmp	.+360    	; 0xaba8 <dir_register+0x310>
    aa40:	21 e0       	ldi	r18, 0x01	; 1
    aa42:	e2 1a       	sub	r14, r18
    aa44:	f1 08       	sbc	r15, r1
    aa46:	09 f4       	brne	.+2      	; 0xaa4a <dir_register+0x1b2>
    aa48:	88 c0       	rjmp	.+272    	; 0xab5a <dir_register+0x2c2>
    aa4a:	f8 01       	movw	r30, r16
    aa4c:	46 85       	ldd	r20, Z+14	; 0x0e
    aa4e:	57 85       	ldd	r21, Z+15	; 0x0f
    aa50:	60 89       	ldd	r22, Z+16	; 0x10
    aa52:	71 89       	ldd	r23, Z+17	; 0x11
    aa54:	c7 01       	movw	r24, r14
    aa56:	e5 e0       	ldi	r30, 0x05	; 5
    aa58:	88 0f       	add	r24, r24
    aa5a:	99 1f       	adc	r25, r25
    aa5c:	ea 95       	dec	r30
    aa5e:	e1 f7       	brne	.-8      	; 0xaa58 <dir_register+0x1c0>
    aa60:	48 1b       	sub	r20, r24
    aa62:	59 0b       	sbc	r21, r25
    aa64:	61 09       	sbc	r22, r1
    aa66:	71 09       	sbc	r23, r1
    aa68:	c8 01       	movw	r24, r16
    aa6a:	5e d9       	rcall	.-3396   	; 0x9d28 <dir_sdi>
    aa6c:	00 97       	sbiw	r24, 0x00	; 0
    aa6e:	09 f0       	breq	.+2      	; 0xaa72 <dir_register+0x1da>
    aa70:	9b c0       	rjmp	.+310    	; 0xaba8 <dir_register+0x310>
    aa72:	c5 01       	movw	r24, r10
    aa74:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <sum_sfn>
    aa78:	68 2e       	mov	r6, r24
    aa7a:	5f e0       	ldi	r21, 0x0F	; 15
    aa7c:	35 2e       	mov	r3, r21
    aa7e:	6d e0       	ldi	r22, 0x0D	; 13
    aa80:	46 2e       	mov	r4, r22
    aa82:	78 ef       	ldi	r23, 0xF8	; 248
    aa84:	87 2e       	mov	r8, r23
    aa86:	74 e0       	ldi	r23, 0x04	; 4
    aa88:	97 2e       	mov	r9, r23
    aa8a:	55 24       	eor	r5, r5
    aa8c:	53 94       	inc	r5
    aa8e:	f8 01       	movw	r30, r16
    aa90:	46 89       	ldd	r20, Z+22	; 0x16
    aa92:	57 89       	ldd	r21, Z+23	; 0x17
    aa94:	60 8d       	ldd	r22, Z+24	; 0x18
    aa96:	71 8d       	ldd	r23, Z+25	; 0x19
    aa98:	c6 01       	movw	r24, r12
    aa9a:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    aa9e:	00 97       	sbiw	r24, 0x00	; 0
    aaa0:	09 f0       	breq	.+2      	; 0xaaa4 <dir_register+0x20c>
    aaa2:	82 c0       	rjmp	.+260    	; 0xaba8 <dir_register+0x310>
    aaa4:	f6 01       	movw	r30, r12
    aaa6:	63 85       	ldd	r22, Z+11	; 0x0b
    aaa8:	74 85       	ldd	r23, Z+12	; 0x0c
    aaaa:	f8 01       	movw	r30, r16
    aaac:	02 8c       	ldd	r0, Z+26	; 0x1a
    aaae:	f3 8d       	ldd	r31, Z+27	; 0x1b
    aab0:	e0 2d       	mov	r30, r0
    aab2:	fe 8b       	std	Y+22, r31	; 0x16
    aab4:	ed 8b       	std	Y+21, r30	; 0x15
    aab6:	7e 2c       	mov	r7, r14
    aab8:	65 86       	std	Z+13, r6	; 0x0d
    aaba:	33 86       	std	Z+11, r3	; 0x0b
    aabc:	14 86       	std	Z+12, r1	; 0x0c
    aabe:	12 8e       	std	Z+26, r1	; 0x1a
    aac0:	13 8e       	std	Z+27, r1	; 0x1b
    aac2:	97 01       	movw	r18, r14
    aac4:	33 27       	eor	r19, r19
    aac6:	21 50       	subi	r18, 0x01	; 1
    aac8:	31 09       	sbc	r19, r1
    aaca:	42 9e       	mul	r4, r18
    aacc:	c0 01       	movw	r24, r0
    aace:	43 9e       	mul	r4, r19
    aad0:	90 0d       	add	r25, r0
    aad2:	11 24       	eor	r1, r1
    aad4:	ab ee       	ldi	r26, 0xEB	; 235
    aad6:	b4 e0       	ldi	r27, 0x04	; 4
    aad8:	20 e0       	ldi	r18, 0x00	; 0
    aada:	30 e0       	ldi	r19, 0x00	; 0
    aadc:	2f 3f       	cpi	r18, 0xFF	; 255
    aade:	ff ef       	ldi	r31, 0xFF	; 255
    aae0:	3f 07       	cpc	r19, r31
    aae2:	49 f0       	breq	.+18     	; 0xaaf6 <dir_register+0x25e>
    aae4:	9c 01       	movw	r18, r24
    aae6:	22 0f       	add	r18, r18
    aae8:	33 1f       	adc	r19, r19
    aaea:	26 0f       	add	r18, r22
    aaec:	37 1f       	adc	r19, r23
    aaee:	f9 01       	movw	r30, r18
    aaf0:	20 81       	ld	r18, Z
    aaf2:	31 81       	ldd	r19, Z+1	; 0x01
    aaf4:	01 96       	adiw	r24, 0x01	; 1
    aaf6:	4d 91       	ld	r20, X+
    aaf8:	ed 89       	ldd	r30, Y+21	; 0x15
    aafa:	fe 89       	ldd	r31, Y+22	; 0x16
    aafc:	e4 0f       	add	r30, r20
    aafe:	f1 1d       	adc	r31, r1
    ab00:	20 83       	st	Z, r18
    ab02:	31 83       	std	Z+1, r19	; 0x01
    ab04:	21 15       	cp	r18, r1
    ab06:	31 05       	cpc	r19, r1
    ab08:	11 f4       	brne	.+4      	; 0xab0e <dir_register+0x276>
    ab0a:	2f ef       	ldi	r18, 0xFF	; 255
    ab0c:	3f ef       	ldi	r19, 0xFF	; 255
    ab0e:	8a 16       	cp	r8, r26
    ab10:	9b 06       	cpc	r9, r27
    ab12:	21 f7       	brne	.-56     	; 0xaadc <dir_register+0x244>
    ab14:	2f 3f       	cpi	r18, 0xFF	; 255
    ab16:	3f 4f       	sbci	r19, 0xFF	; 255
    ab18:	49 f0       	breq	.+18     	; 0xab2c <dir_register+0x294>
    ab1a:	88 0f       	add	r24, r24
    ab1c:	99 1f       	adc	r25, r25
    ab1e:	db 01       	movw	r26, r22
    ab20:	a8 0f       	add	r26, r24
    ab22:	b9 1f       	adc	r27, r25
    ab24:	8d 91       	ld	r24, X+
    ab26:	9c 91       	ld	r25, X
    ab28:	89 2b       	or	r24, r25
    ab2a:	19 f4       	brne	.+6      	; 0xab32 <dir_register+0x29a>
    ab2c:	27 2d       	mov	r18, r7
    ab2e:	20 64       	ori	r18, 0x40	; 64
    ab30:	72 2e       	mov	r7, r18
    ab32:	ed 89       	ldd	r30, Y+21	; 0x15
    ab34:	fe 89       	ldd	r31, Y+22	; 0x16
    ab36:	70 82       	st	Z, r7
    ab38:	f6 01       	movw	r30, r12
    ab3a:	53 82       	std	Z+3, r5	; 0x03
    ab3c:	60 e0       	ldi	r22, 0x00	; 0
    ab3e:	70 e0       	ldi	r23, 0x00	; 0
    ab40:	c8 01       	movw	r24, r16
    ab42:	6a db       	rcall	.-2348   	; 0xa218 <dir_next>
    ab44:	00 97       	sbiw	r24, 0x00	; 0
    ab46:	81 f5       	brne	.+96     	; 0xaba8 <dir_register+0x310>
    ab48:	f1 e0       	ldi	r31, 0x01	; 1
    ab4a:	ef 1a       	sub	r14, r31
    ab4c:	f1 08       	sbc	r15, r1
    ab4e:	09 f0       	breq	.+2      	; 0xab52 <dir_register+0x2ba>
    ab50:	9e cf       	rjmp	.-196    	; 0xaa8e <dir_register+0x1f6>
    ab52:	03 c0       	rjmp	.+6      	; 0xab5a <dir_register+0x2c2>
    ab54:	26 e0       	ldi	r18, 0x06	; 6
    ab56:	90 e0       	ldi	r25, 0x00	; 0
    ab58:	28 c0       	rjmp	.+80     	; 0xabaa <dir_register+0x312>
    ab5a:	f8 01       	movw	r30, r16
    ab5c:	46 89       	ldd	r20, Z+22	; 0x16
    ab5e:	57 89       	ldd	r21, Z+23	; 0x17
    ab60:	60 8d       	ldd	r22, Z+24	; 0x18
    ab62:	71 8d       	ldd	r23, Z+25	; 0x19
    ab64:	c6 01       	movw	r24, r12
    ab66:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    ab6a:	00 97       	sbiw	r24, 0x00	; 0
    ab6c:	e9 f4       	brne	.+58     	; 0xaba8 <dir_register+0x310>
    ab6e:	40 e2       	ldi	r20, 0x20	; 32
    ab70:	50 e0       	ldi	r21, 0x00	; 0
    ab72:	60 e0       	ldi	r22, 0x00	; 0
    ab74:	70 e0       	ldi	r23, 0x00	; 0
    ab76:	f8 01       	movw	r30, r16
    ab78:	82 8d       	ldd	r24, Z+26	; 0x1a
    ab7a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ab7c:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <mem_set>
    ab80:	4b e0       	ldi	r20, 0x0B	; 11
    ab82:	50 e0       	ldi	r21, 0x00	; 0
    ab84:	b5 01       	movw	r22, r10
    ab86:	f8 01       	movw	r30, r16
    ab88:	82 8d       	ldd	r24, Z+26	; 0x1a
    ab8a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ab8c:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    ab90:	f8 01       	movw	r30, r16
    ab92:	22 8d       	ldd	r18, Z+26	; 0x1a
    ab94:	33 8d       	ldd	r19, Z+27	; 0x1b
    ab96:	87 a1       	ldd	r24, Z+39	; 0x27
    ab98:	88 71       	andi	r24, 0x18	; 24
    ab9a:	f9 01       	movw	r30, r18
    ab9c:	84 87       	std	Z+12, r24	; 0x0c
    ab9e:	81 e0       	ldi	r24, 0x01	; 1
    aba0:	f6 01       	movw	r30, r12
    aba2:	83 83       	std	Z+3, r24	; 0x03
    aba4:	20 e0       	ldi	r18, 0x00	; 0
    aba6:	d7 cf       	rjmp	.-82     	; 0xab56 <dir_register+0x2be>
    aba8:	28 2f       	mov	r18, r24
    abaa:	82 2f       	mov	r24, r18
    abac:	66 96       	adiw	r28, 0x16	; 22
    abae:	e2 e1       	ldi	r30, 0x12	; 18
    abb0:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000abb4 <follow_path>:
    abb4:	aa e0       	ldi	r26, 0x0A	; 10
    abb6:	b0 e0       	ldi	r27, 0x00	; 0
    abb8:	e0 ee       	ldi	r30, 0xE0	; 224
    abba:	f5 e5       	ldi	r31, 0x55	; 85
    abbc:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    abc0:	7c 01       	movw	r14, r24
    abc2:	3b 01       	movw	r6, r22
    abc4:	dc 01       	movw	r26, r24
    abc6:	0d 90       	ld	r0, X+
    abc8:	bc 91       	ld	r27, X
    abca:	a0 2d       	mov	r26, r0
    abcc:	be 83       	std	Y+6, r27	; 0x06
    abce:	ad 83       	std	Y+5, r26	; 0x05
    abd0:	fb 01       	movw	r30, r22
    abd2:	80 81       	ld	r24, Z
    abd4:	8f 32       	cpi	r24, 0x2F	; 47
    abd6:	11 f0       	breq	.+4      	; 0xabdc <follow_path+0x28>
    abd8:	8c 35       	cpi	r24, 0x5C	; 92
    abda:	11 f4       	brne	.+4      	; 0xabe0 <follow_path+0x2c>
    abdc:	93 01       	movw	r18, r6
    abde:	0c c0       	rjmp	.+24     	; 0xabf8 <follow_path+0x44>
    abe0:	ed 81       	ldd	r30, Y+5	; 0x05
    abe2:	fe 81       	ldd	r31, Y+6	; 0x06
    abe4:	85 89       	ldd	r24, Z+21	; 0x15
    abe6:	96 89       	ldd	r25, Z+22	; 0x16
    abe8:	a7 89       	ldd	r26, Z+23	; 0x17
    abea:	b0 8d       	ldd	r27, Z+24	; 0x18
    abec:	f7 01       	movw	r30, r14
    abee:	86 83       	std	Z+6, r24	; 0x06
    abf0:	97 83       	std	Z+7, r25	; 0x07
    abf2:	a0 87       	std	Z+8, r26	; 0x08
    abf4:	b1 87       	std	Z+9, r27	; 0x09
    abf6:	0e c0       	rjmp	.+28     	; 0xac14 <follow_path+0x60>
    abf8:	39 01       	movw	r6, r18
    abfa:	d9 01       	movw	r26, r18
    abfc:	8c 91       	ld	r24, X
    abfe:	2f 5f       	subi	r18, 0xFF	; 255
    ac00:	3f 4f       	sbci	r19, 0xFF	; 255
    ac02:	8f 32       	cpi	r24, 0x2F	; 47
    ac04:	c9 f3       	breq	.-14     	; 0xabf8 <follow_path+0x44>
    ac06:	8c 35       	cpi	r24, 0x5C	; 92
    ac08:	b9 f3       	breq	.-18     	; 0xabf8 <follow_path+0x44>
    ac0a:	f7 01       	movw	r30, r14
    ac0c:	16 82       	std	Z+6, r1	; 0x06
    ac0e:	17 82       	std	Z+7, r1	; 0x07
    ac10:	10 86       	std	Z+8, r1	; 0x08
    ac12:	11 86       	std	Z+9, r1	; 0x09
    ac14:	d3 01       	movw	r26, r6
    ac16:	8c 91       	ld	r24, X
    ac18:	80 32       	cpi	r24, 0x20	; 32
    ac1a:	58 f0       	brcs	.+22     	; 0xac32 <follow_path+0x7e>
    ac1c:	f7 01       	movw	r30, r14
    ac1e:	7c 96       	adiw	r30, 0x1c	; 28
    ac20:	f8 87       	std	Y+8, r31	; 0x08
    ac22:	ef 83       	std	Y+7, r30	; 0x07
    ac24:	2d 81       	ldd	r18, Y+5	; 0x05
    ac26:	3e 81       	ldd	r19, Y+6	; 0x06
    ac28:	2b 5c       	subi	r18, 0xCB	; 203
    ac2a:	3f 4f       	sbci	r19, 0xFF	; 255
    ac2c:	3a 87       	std	Y+10, r19	; 0x0a
    ac2e:	29 87       	std	Y+9, r18	; 0x09
    ac30:	96 c0       	rjmp	.+300    	; 0xad5e <follow_path+0x1aa>
    ac32:	80 e8       	ldi	r24, 0x80	; 128
    ac34:	f7 01       	movw	r30, r14
    ac36:	87 a3       	std	Z+39, r24	; 0x27
    ac38:	40 e0       	ldi	r20, 0x00	; 0
    ac3a:	50 e0       	ldi	r21, 0x00	; 0
    ac3c:	ba 01       	movw	r22, r20
    ac3e:	c7 01       	movw	r24, r14
    ac40:	73 d8       	rcall	.-3866   	; 0x9d28 <dir_sdi>
    ac42:	e5 c1       	rjmp	.+970    	; 0xb00e <follow_path+0x45a>
    ac44:	6c 35       	cpi	r22, 0x5C	; 92
    ac46:	71 05       	cpc	r23, r1
    ac48:	b9 f1       	breq	.+110    	; 0xacb8 <follow_path+0x104>
    ac4a:	60 38       	cpi	r22, 0x80	; 128
    ac4c:	71 05       	cpc	r23, r1
    ac4e:	28 f4       	brcc	.+10     	; 0xac5a <follow_path+0xa6>
    ac50:	e7 e2       	ldi	r30, 0x27	; 39
    ac52:	f4 e0       	ldi	r31, 0x04	; 4
    ac54:	41 91       	ld	r20, Z+
    ac56:	41 11       	cpse	r20, r1
    ac58:	8c c0       	rjmp	.+280    	; 0xad72 <follow_path+0x1be>
    ac5a:	0f 3f       	cpi	r16, 0xFF	; 255
    ac5c:	11 05       	cpc	r17, r1
    ac5e:	08 f0       	brcs	.+2      	; 0xac62 <follow_path+0xae>
    ac60:	b9 c1       	rjmp	.+882    	; 0xafd4 <follow_path+0x420>
    ac62:	f8 01       	movw	r30, r16
    ac64:	ee 0f       	add	r30, r30
    ac66:	ff 1f       	adc	r31, r31
    ac68:	ea 0d       	add	r30, r10
    ac6a:	fb 1d       	adc	r31, r11
    ac6c:	71 83       	std	Z+1, r23	; 0x01
    ac6e:	60 83       	st	Z, r22
    ac70:	0f 5f       	subi	r16, 0xFF	; 255
    ac72:	1f 4f       	sbci	r17, 0xFF	; 255
    ac74:	ce 01       	movw	r24, r28
    ac76:	01 96       	adiw	r24, 0x01	; 1
    ac78:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <tchar2uni>
    ac7c:	6f 3f       	cpi	r22, 0xFF	; 255
    ac7e:	bf ef       	ldi	r27, 0xFF	; 255
    ac80:	7b 07       	cpc	r23, r27
    ac82:	8b 07       	cpc	r24, r27
    ac84:	9b 07       	cpc	r25, r27
    ac86:	09 f4       	brne	.+2      	; 0xac8a <follow_path+0xd6>
    ac88:	a5 c1       	rjmp	.+842    	; 0xafd4 <follow_path+0x420>
    ac8a:	61 15       	cp	r22, r1
    ac8c:	71 05       	cpc	r23, r1
    ac8e:	e1 e0       	ldi	r30, 0x01	; 1
    ac90:	8e 07       	cpc	r24, r30
    ac92:	91 05       	cpc	r25, r1
    ac94:	48 f0       	brcs	.+18     	; 0xaca8 <follow_path+0xf4>
    ac96:	f8 01       	movw	r30, r16
    ac98:	ee 0f       	add	r30, r30
    ac9a:	ff 1f       	adc	r31, r31
    ac9c:	ea 0d       	add	r30, r10
    ac9e:	fb 1d       	adc	r31, r11
    aca0:	91 83       	std	Z+1, r25	; 0x01
    aca2:	80 83       	st	Z, r24
    aca4:	0f 5f       	subi	r16, 0xFF	; 255
    aca6:	1f 4f       	sbci	r17, 0xFF	; 255
    aca8:	9b 01       	movw	r18, r22
    acaa:	60 32       	cpi	r22, 0x20	; 32
    acac:	71 05       	cpc	r23, r1
    acae:	08 f4       	brcc	.+2      	; 0xacb2 <follow_path+0xfe>
    acb0:	6a c0       	rjmp	.+212    	; 0xad86 <follow_path+0x1d2>
    acb2:	6f 32       	cpi	r22, 0x2F	; 47
    acb4:	71 05       	cpc	r23, r1
    acb6:	31 f6       	brne	.-116    	; 0xac44 <follow_path+0x90>
    acb8:	e9 81       	ldd	r30, Y+1	; 0x01
    acba:	fa 81       	ldd	r31, Y+2	; 0x02
    acbc:	80 81       	ld	r24, Z
    acbe:	8f 32       	cpi	r24, 0x2F	; 47
    acc0:	09 f4       	brne	.+2      	; 0xacc4 <follow_path+0x110>
    acc2:	5d c0       	rjmp	.+186    	; 0xad7e <follow_path+0x1ca>
    acc4:	8c 35       	cpi	r24, 0x5C	; 92
    acc6:	09 f4       	brne	.+2      	; 0xacca <follow_path+0x116>
    acc8:	5a c0       	rjmp	.+180    	; 0xad7e <follow_path+0x1ca>
    acca:	1b 82       	std	Y+3, r1	; 0x03
    accc:	69 80       	ldd	r6, Y+1	; 0x01
    acce:	7a 80       	ldd	r7, Y+2	; 0x02
    acd0:	98 01       	movw	r18, r16
    acd2:	22 0f       	add	r18, r18
    acd4:	33 1f       	adc	r19, r19
    acd6:	01 30       	cpi	r16, 0x01	; 1
    acd8:	11 05       	cpc	r17, r1
    acda:	09 f0       	breq	.+2      	; 0xacde <follow_path+0x12a>
    acdc:	57 c0       	rjmp	.+174    	; 0xad8c <follow_path+0x1d8>
    acde:	d5 01       	movw	r26, r10
    ace0:	8d 91       	ld	r24, X+
    ace2:	9c 91       	ld	r25, X
    ace4:	8e 97       	sbiw	r24, 0x2e	; 46
    ace6:	09 f0       	breq	.+2      	; 0xacea <follow_path+0x136>
    ace8:	5c c0       	rjmp	.+184    	; 0xada2 <follow_path+0x1ee>
    acea:	f9 01       	movw	r30, r18
    acec:	ea 0d       	add	r30, r10
    acee:	fb 1d       	adc	r31, r11
    acf0:	11 82       	std	Z+1, r1	; 0x01
    acf2:	10 82       	st	Z, r1
    acf4:	f7 01       	movw	r30, r14
    acf6:	7c 96       	adiw	r30, 0x1c	; 28
    acf8:	80 e0       	ldi	r24, 0x00	; 0
    acfa:	90 e0       	ldi	r25, 0x00	; 0
    acfc:	80 17       	cp	r24, r16
    acfe:	91 07       	cpc	r25, r17
    ad00:	08 f0       	brcs	.+2      	; 0xad04 <follow_path+0x150>
    ad02:	53 c0       	rjmp	.+166    	; 0xadaa <follow_path+0x1f6>
    ad04:	2e e2       	ldi	r18, 0x2E	; 46
    ad06:	21 93       	st	Z+, r18
    ad08:	01 96       	adiw	r24, 0x01	; 1
    ad0a:	8b 30       	cpi	r24, 0x0B	; 11
    ad0c:	91 05       	cpc	r25, r1
    ad0e:	b1 f7       	brne	.-20     	; 0xacfc <follow_path+0x148>
    ad10:	8b 81       	ldd	r24, Y+3	; 0x03
    ad12:	80 62       	ori	r24, 0x20	; 32
    ad14:	f7 01       	movw	r30, r14
    ad16:	87 a3       	std	Z+39, r24	; 0x27
    ad18:	80 e0       	ldi	r24, 0x00	; 0
    ad1a:	90 e0       	ldi	r25, 0x00	; 0
    ad1c:	00 97       	sbiw	r24, 0x00	; 0
    ad1e:	09 f0       	breq	.+2      	; 0xad22 <follow_path+0x16e>
    ad20:	76 c1       	rjmp	.+748    	; 0xb00e <follow_path+0x45a>
    ad22:	c7 01       	movw	r24, r14
    ad24:	ab dc       	rcall	.-1706   	; 0xa67c <dir_find>
    ad26:	f7 01       	movw	r30, r14
    ad28:	27 a1       	ldd	r18, Z+39	; 0x27
    ad2a:	00 97       	sbiw	r24, 0x00	; 0
    ad2c:	09 f0       	breq	.+2      	; 0xad30 <follow_path+0x17c>
    ad2e:	55 c1       	rjmp	.+682    	; 0xafda <follow_path+0x426>
    ad30:	22 fd       	sbrc	r18, 2
    ad32:	6d c1       	rjmp	.+730    	; 0xb00e <follow_path+0x45a>
    ad34:	f7 01       	movw	r30, r14
    ad36:	84 81       	ldd	r24, Z+4	; 0x04
    ad38:	84 ff       	sbrs	r24, 4
    ad3a:	60 c1       	rjmp	.+704    	; 0xaffc <follow_path+0x448>
    ad3c:	66 85       	ldd	r22, Z+14	; 0x0e
    ad3e:	77 85       	ldd	r23, Z+15	; 0x0f
    ad40:	71 70       	andi	r23, 0x01	; 1
    ad42:	29 85       	ldd	r18, Y+9	; 0x09
    ad44:	3a 85       	ldd	r19, Y+10	; 0x0a
    ad46:	62 0f       	add	r22, r18
    ad48:	73 1f       	adc	r23, r19
    ad4a:	ad 81       	ldd	r26, Y+5	; 0x05
    ad4c:	be 81       	ldd	r27, Y+6	; 0x06
    ad4e:	8c 91       	ld	r24, X
    ad50:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    ad54:	f7 01       	movw	r30, r14
    ad56:	66 83       	std	Z+6, r22	; 0x06
    ad58:	77 83       	std	Z+7, r23	; 0x07
    ad5a:	80 87       	std	Z+8, r24	; 0x08
    ad5c:	91 87       	std	Z+9, r25	; 0x09
    ad5e:	7a 82       	std	Y+2, r7	; 0x02
    ad60:	69 82       	std	Y+1, r6	; 0x01
    ad62:	d7 01       	movw	r26, r14
    ad64:	ed 91       	ld	r30, X+
    ad66:	fc 91       	ld	r31, X
    ad68:	a3 84       	ldd	r10, Z+11	; 0x0b
    ad6a:	b4 84       	ldd	r11, Z+12	; 0x0c
    ad6c:	00 e0       	ldi	r16, 0x00	; 0
    ad6e:	10 e0       	ldi	r17, 0x00	; 0
    ad70:	81 cf       	rjmp	.-254    	; 0xac74 <follow_path+0xc0>
    ad72:	50 e0       	ldi	r21, 0x00	; 0
    ad74:	24 17       	cp	r18, r20
    ad76:	35 07       	cpc	r19, r21
    ad78:	09 f0       	breq	.+2      	; 0xad7c <follow_path+0x1c8>
    ad7a:	6c cf       	rjmp	.-296    	; 0xac54 <follow_path+0xa0>
    ad7c:	2b c1       	rjmp	.+598    	; 0xafd4 <follow_path+0x420>
    ad7e:	31 96       	adiw	r30, 0x01	; 1
    ad80:	fa 83       	std	Y+2, r31	; 0x02
    ad82:	e9 83       	std	Y+1, r30	; 0x01
    ad84:	99 cf       	rjmp	.-206    	; 0xacb8 <follow_path+0x104>
    ad86:	f4 e0       	ldi	r31, 0x04	; 4
    ad88:	fb 83       	std	Y+3, r31	; 0x03
    ad8a:	a0 cf       	rjmp	.-192    	; 0xaccc <follow_path+0x118>
    ad8c:	02 30       	cpi	r16, 0x02	; 2
    ad8e:	11 05       	cpc	r17, r1
    ad90:	41 f4       	brne	.+16     	; 0xada2 <follow_path+0x1ee>
    ad92:	f5 01       	movw	r30, r10
    ad94:	82 81       	ldd	r24, Z+2	; 0x02
    ad96:	93 81       	ldd	r25, Z+3	; 0x03
    ad98:	8e 97       	sbiw	r24, 0x2e	; 46
    ad9a:	19 f4       	brne	.+6      	; 0xada2 <follow_path+0x1ee>
    ad9c:	80 81       	ld	r24, Z
    ad9e:	91 81       	ldd	r25, Z+1	; 0x01
    ada0:	a1 cf       	rjmp	.-190    	; 0xace4 <follow_path+0x130>
    ada2:	f9 01       	movw	r30, r18
    ada4:	ea 0d       	add	r30, r10
    ada6:	fb 1d       	adc	r31, r11
    ada8:	09 c0       	rjmp	.+18     	; 0xadbc <follow_path+0x208>
    adaa:	20 e2       	ldi	r18, 0x20	; 32
    adac:	ac cf       	rjmp	.-168    	; 0xad06 <follow_path+0x152>
    adae:	92 91       	ld	r25, -Z
    adb0:	82 91       	ld	r24, -Z
    adb2:	80 32       	cpi	r24, 0x20	; 32
    adb4:	91 05       	cpc	r25, r1
    adb6:	31 f4       	brne	.+12     	; 0xadc4 <follow_path+0x210>
    adb8:	01 50       	subi	r16, 0x01	; 1
    adba:	11 09       	sbc	r17, r1
    adbc:	01 15       	cp	r16, r1
    adbe:	11 05       	cpc	r17, r1
    adc0:	b1 f7       	brne	.-20     	; 0xadae <follow_path+0x1fa>
    adc2:	02 c0       	rjmp	.+4      	; 0xadc8 <follow_path+0x214>
    adc4:	8e 97       	sbiw	r24, 0x2e	; 46
    adc6:	c1 f3       	breq	.-16     	; 0xadb8 <follow_path+0x204>
    adc8:	f8 01       	movw	r30, r16
    adca:	ee 0f       	add	r30, r30
    adcc:	ff 1f       	adc	r31, r31
    adce:	ea 0d       	add	r30, r10
    add0:	fb 1d       	adc	r31, r11
    add2:	11 82       	std	Z+1, r1	; 0x01
    add4:	10 82       	st	Z, r1
    add6:	01 15       	cp	r16, r1
    add8:	11 05       	cpc	r17, r1
    adda:	09 f4       	brne	.+2      	; 0xadde <follow_path+0x22a>
    addc:	fb c0       	rjmp	.+502    	; 0xafd4 <follow_path+0x420>
    adde:	d5 01       	movw	r26, r10
    ade0:	41 2c       	mov	r4, r1
    ade2:	51 2c       	mov	r5, r1
    ade4:	8d 91       	ld	r24, X+
    ade6:	9d 91       	ld	r25, X+
    ade8:	80 32       	cpi	r24, 0x20	; 32
    adea:	91 05       	cpc	r25, r1
    adec:	21 f4       	brne	.+8      	; 0xadf6 <follow_path+0x242>
    adee:	2f ef       	ldi	r18, 0xFF	; 255
    adf0:	42 1a       	sub	r4, r18
    adf2:	52 0a       	sbc	r5, r18
    adf4:	f7 cf       	rjmp	.-18     	; 0xade4 <follow_path+0x230>
    adf6:	41 14       	cp	r4, r1
    adf8:	51 04       	cpc	r5, r1
    adfa:	11 f4       	brne	.+4      	; 0xae00 <follow_path+0x24c>
    adfc:	8e 97       	sbiw	r24, 0x2e	; 46
    adfe:	39 f4       	brne	.+14     	; 0xae0e <follow_path+0x25a>
    ae00:	3b 81       	ldd	r19, Y+3	; 0x03
    ae02:	33 60       	ori	r19, 0x03	; 3
    ae04:	3b 83       	std	Y+3, r19	; 0x03
    ae06:	03 c0       	rjmp	.+6      	; 0xae0e <follow_path+0x25a>
    ae08:	01 50       	subi	r16, 0x01	; 1
    ae0a:	11 09       	sbc	r17, r1
    ae0c:	21 f0       	breq	.+8      	; 0xae16 <follow_path+0x262>
    ae0e:	92 91       	ld	r25, -Z
    ae10:	82 91       	ld	r24, -Z
    ae12:	8e 97       	sbiw	r24, 0x2e	; 46
    ae14:	c9 f7       	brne	.-14     	; 0xae08 <follow_path+0x254>
    ae16:	4b e0       	ldi	r20, 0x0B	; 11
    ae18:	50 e0       	ldi	r21, 0x00	; 0
    ae1a:	60 e2       	ldi	r22, 0x20	; 32
    ae1c:	70 e0       	ldi	r23, 0x00	; 0
    ae1e:	8f 81       	ldd	r24, Y+7	; 0x07
    ae20:	98 85       	ldd	r25, Y+8	; 0x08
    ae22:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <mem_set>
    ae26:	48 e0       	ldi	r20, 0x08	; 8
    ae28:	84 2e       	mov	r8, r20
    ae2a:	91 2c       	mov	r9, r1
    ae2c:	c1 2c       	mov	r12, r1
    ae2e:	d1 2c       	mov	r13, r1
    ae30:	1c 82       	std	Y+4, r1	; 0x04
    ae32:	12 01       	movw	r2, r4
    ae34:	8f ef       	ldi	r24, 0xFF	; 255
    ae36:	28 1a       	sub	r2, r24
    ae38:	38 0a       	sbc	r3, r24
    ae3a:	44 0c       	add	r4, r4
    ae3c:	55 1c       	adc	r5, r5
    ae3e:	f5 01       	movw	r30, r10
    ae40:	e4 0d       	add	r30, r4
    ae42:	f5 1d       	adc	r31, r5
    ae44:	80 81       	ld	r24, Z
    ae46:	91 81       	ldd	r25, Z+1	; 0x01
    ae48:	00 97       	sbiw	r24, 0x00	; 0
    ae4a:	09 f4       	brne	.+2      	; 0xae4e <follow_path+0x29a>
    ae4c:	98 c0       	rjmp	.+304    	; 0xaf7e <follow_path+0x3ca>
    ae4e:	80 32       	cpi	r24, 0x20	; 32
    ae50:	91 05       	cpc	r25, r1
    ae52:	31 f0       	breq	.+12     	; 0xae60 <follow_path+0x2ac>
    ae54:	8e 32       	cpi	r24, 0x2E	; 46
    ae56:	91 05       	cpc	r25, r1
    ae58:	41 f4       	brne	.+16     	; 0xae6a <follow_path+0x2b6>
    ae5a:	20 16       	cp	r2, r16
    ae5c:	31 06       	cpc	r3, r17
    ae5e:	61 f0       	breq	.+24     	; 0xae78 <follow_path+0x2c4>
    ae60:	9b 81       	ldd	r25, Y+3	; 0x03
    ae62:	93 60       	ori	r25, 0x03	; 3
    ae64:	9b 83       	std	Y+3, r25	; 0x03
    ae66:	21 01       	movw	r4, r2
    ae68:	e4 cf       	rjmp	.-56     	; 0xae32 <follow_path+0x27e>
    ae6a:	c8 14       	cp	r12, r8
    ae6c:	d9 04       	cpc	r13, r9
    ae6e:	40 f4       	brcc	.+16     	; 0xae80 <follow_path+0x2cc>
    ae70:	20 16       	cp	r2, r16
    ae72:	31 06       	cpc	r3, r17
    ae74:	31 f5       	brne	.+76     	; 0xaec2 <follow_path+0x30e>
    ae76:	c5 c0       	rjmp	.+394    	; 0xb002 <follow_path+0x44e>
    ae78:	c8 14       	cp	r12, r8
    ae7a:	d9 04       	cpc	r13, r9
    ae7c:	08 f4       	brcc	.+2      	; 0xae80 <follow_path+0x2cc>
    ae7e:	c1 c0       	rjmp	.+386    	; 0xb002 <follow_path+0x44e>
    ae80:	ab e0       	ldi	r26, 0x0B	; 11
    ae82:	8a 16       	cp	r8, r26
    ae84:	91 04       	cpc	r9, r1
    ae86:	39 f4       	brne	.+14     	; 0xae96 <follow_path+0x2e2>
    ae88:	bb 81       	ldd	r27, Y+3	; 0x03
    ae8a:	b3 60       	ori	r27, 0x03	; 3
    ae8c:	bb 83       	std	Y+3, r27	; 0x03
    ae8e:	2b e0       	ldi	r18, 0x0B	; 11
    ae90:	82 2e       	mov	r8, r18
    ae92:	91 2c       	mov	r9, r1
    ae94:	74 c0       	rjmp	.+232    	; 0xaf7e <follow_path+0x3ca>
    ae96:	20 16       	cp	r2, r16
    ae98:	31 06       	cpc	r3, r17
    ae9a:	39 f0       	breq	.+14     	; 0xaeaa <follow_path+0x2f6>
    ae9c:	eb 81       	ldd	r30, Y+3	; 0x03
    ae9e:	e3 60       	ori	r30, 0x03	; 3
    aea0:	eb 83       	std	Y+3, r30	; 0x03
    aea2:	02 15       	cp	r16, r2
    aea4:	13 05       	cpc	r17, r3
    aea6:	08 f4       	brcc	.+2      	; 0xaeaa <follow_path+0x2f6>
    aea8:	6a c0       	rjmp	.+212    	; 0xaf7e <follow_path+0x3ca>
    aeaa:	fc 81       	ldd	r31, Y+4	; 0x04
    aeac:	ff 0f       	add	r31, r31
    aeae:	ff 0f       	add	r31, r31
    aeb0:	fc 83       	std	Y+4, r31	; 0x04
    aeb2:	18 01       	movw	r2, r16
    aeb4:	8b e0       	ldi	r24, 0x0B	; 11
    aeb6:	88 2e       	mov	r8, r24
    aeb8:	91 2c       	mov	r9, r1
    aeba:	98 e0       	ldi	r25, 0x08	; 8
    aebc:	c9 2e       	mov	r12, r25
    aebe:	d1 2c       	mov	r13, r1
    aec0:	d2 cf       	rjmp	.-92     	; 0xae66 <follow_path+0x2b2>
    aec2:	80 38       	cpi	r24, 0x80	; 128
    aec4:	91 05       	cpc	r25, r1
    aec6:	78 f1       	brcs	.+94     	; 0xaf26 <follow_path+0x372>
    aec8:	2b 81       	ldd	r18, Y+3	; 0x03
    aeca:	22 60       	ori	r18, 0x02	; 2
    aecc:	52 2e       	mov	r5, r18
    aece:	bc 01       	movw	r22, r24
    aed0:	80 e0       	ldi	r24, 0x00	; 0
    aed2:	90 e0       	ldi	r25, 0x00	; 0
    aed4:	45 eb       	ldi	r20, 0xB5	; 181
    aed6:	51 e0       	ldi	r21, 0x01	; 1
    aed8:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <ff_uni2oem>
    aedc:	87 ff       	sbrs	r24, 7
    aede:	08 c0       	rjmp	.+16     	; 0xaef0 <follow_path+0x33c>
    aee0:	8f 77       	andi	r24, 0x7F	; 127
    aee2:	99 27       	eor	r25, r25
    aee4:	fc 01       	movw	r30, r24
    aee6:	e5 59       	subi	r30, 0x95	; 149
    aee8:	fb 4f       	sbci	r31, 0xFB	; 251
    aeea:	80 81       	ld	r24, Z
    aeec:	90 e0       	ldi	r25, 0x00	; 0
    aeee:	18 c0       	rjmp	.+48     	; 0xaf20 <follow_path+0x36c>
    aef0:	8f 3f       	cpi	r24, 0xFF	; 255
    aef2:	91 05       	cpc	r25, r1
    aef4:	a9 f0       	breq	.+42     	; 0xaf20 <follow_path+0x36c>
    aef6:	a0 f0       	brcs	.+40     	; 0xaf20 <follow_path+0x36c>
    aef8:	94 01       	movw	r18, r8
    aefa:	21 50       	subi	r18, 0x01	; 1
    aefc:	31 09       	sbc	r19, r1
    aefe:	c2 16       	cp	r12, r18
    af00:	d3 06       	cpc	r13, r19
    af02:	28 f0       	brcs	.+10     	; 0xaf0e <follow_path+0x35a>
    af04:	3b 81       	ldd	r19, Y+3	; 0x03
    af06:	33 60       	ori	r19, 0x03	; 3
    af08:	3b 83       	std	Y+3, r19	; 0x03
    af0a:	64 01       	movw	r12, r8
    af0c:	ac cf       	rjmp	.-168    	; 0xae66 <follow_path+0x2b2>
    af0e:	f7 01       	movw	r30, r14
    af10:	ec 0d       	add	r30, r12
    af12:	fd 1d       	adc	r31, r13
    af14:	94 8f       	std	Z+28, r25	; 0x1c
    af16:	d6 01       	movw	r26, r12
    af18:	11 96       	adiw	r26, 0x01	; 1
    af1a:	6d 01       	movw	r12, r26
    af1c:	5b 82       	std	Y+3, r5	; 0x03
    af1e:	26 c0       	rjmp	.+76     	; 0xaf6c <follow_path+0x3b8>
    af20:	00 97       	sbiw	r24, 0x00	; 0
    af22:	59 f0       	breq	.+22     	; 0xaf3a <follow_path+0x386>
    af24:	5b 82       	std	Y+3, r5	; 0x03
    af26:	e0 e3       	ldi	r30, 0x30	; 48
    af28:	f4 e0       	ldi	r31, 0x04	; 4
    af2a:	21 91       	ld	r18, Z+
    af2c:	22 23       	and	r18, r18
    af2e:	59 f0       	breq	.+22     	; 0xaf46 <follow_path+0x392>
    af30:	30 e0       	ldi	r19, 0x00	; 0
    af32:	82 17       	cp	r24, r18
    af34:	93 07       	cpc	r25, r19
    af36:	c9 f7       	brne	.-14     	; 0xaf2a <follow_path+0x376>
    af38:	5b 80       	ldd	r5, Y+3	; 0x03
    af3a:	b5 2d       	mov	r27, r5
    af3c:	b3 60       	ori	r27, 0x03	; 3
    af3e:	bb 83       	std	Y+3, r27	; 0x03
    af40:	8f e5       	ldi	r24, 0x5F	; 95
    af42:	90 e0       	ldi	r25, 0x00	; 0
    af44:	13 c0       	rjmp	.+38     	; 0xaf6c <follow_path+0x3b8>
    af46:	9c 01       	movw	r18, r24
    af48:	21 54       	subi	r18, 0x41	; 65
    af4a:	31 09       	sbc	r19, r1
    af4c:	2a 31       	cpi	r18, 0x1A	; 26
    af4e:	31 05       	cpc	r19, r1
    af50:	18 f4       	brcc	.+6      	; 0xaf58 <follow_path+0x3a4>
    af52:	ec 81       	ldd	r30, Y+4	; 0x04
    af54:	e2 60       	ori	r30, 0x02	; 2
    af56:	ec 83       	std	Y+4, r30	; 0x04
    af58:	9c 01       	movw	r18, r24
    af5a:	21 56       	subi	r18, 0x61	; 97
    af5c:	31 09       	sbc	r19, r1
    af5e:	2a 31       	cpi	r18, 0x1A	; 26
    af60:	31 05       	cpc	r19, r1
    af62:	20 f4       	brcc	.+8      	; 0xaf6c <follow_path+0x3b8>
    af64:	fc 81       	ldd	r31, Y+4	; 0x04
    af66:	f1 60       	ori	r31, 0x01	; 1
    af68:	fc 83       	std	Y+4, r31	; 0x04
    af6a:	80 97       	sbiw	r24, 0x20	; 32
    af6c:	f7 01       	movw	r30, r14
    af6e:	ec 0d       	add	r30, r12
    af70:	fd 1d       	adc	r31, r13
    af72:	84 8f       	std	Z+28, r24	; 0x1c
    af74:	96 01       	movw	r18, r12
    af76:	2f 5f       	subi	r18, 0xFF	; 255
    af78:	3f 4f       	sbci	r19, 0xFF	; 255
    af7a:	69 01       	movw	r12, r18
    af7c:	74 cf       	rjmp	.-280    	; 0xae66 <follow_path+0x2b2>
    af7e:	f7 01       	movw	r30, r14
    af80:	84 8d       	ldd	r24, Z+28	; 0x1c
    af82:	85 3e       	cpi	r24, 0xE5	; 229
    af84:	11 f4       	brne	.+4      	; 0xaf8a <follow_path+0x3d6>
    af86:	25 e0       	ldi	r18, 0x05	; 5
    af88:	24 8f       	std	Z+28, r18	; 0x1c
    af8a:	38 e0       	ldi	r19, 0x08	; 8
    af8c:	83 16       	cp	r8, r19
    af8e:	91 04       	cpc	r9, r1
    af90:	21 f4       	brne	.+8      	; 0xaf9a <follow_path+0x3e6>
    af92:	8c 81       	ldd	r24, Y+4	; 0x04
    af94:	88 0f       	add	r24, r24
    af96:	88 0f       	add	r24, r24
    af98:	8c 83       	std	Y+4, r24	; 0x04
    af9a:	8c 81       	ldd	r24, Y+4	; 0x04
    af9c:	8c 70       	andi	r24, 0x0C	; 12
    af9e:	8c 30       	cpi	r24, 0x0C	; 12
    afa0:	21 f0       	breq	.+8      	; 0xafaa <follow_path+0x3f6>
    afa2:	8c 81       	ldd	r24, Y+4	; 0x04
    afa4:	83 70       	andi	r24, 0x03	; 3
    afa6:	83 30       	cpi	r24, 0x03	; 3
    afa8:	19 f4       	brne	.+6      	; 0xafb0 <follow_path+0x3fc>
    afaa:	9b 81       	ldd	r25, Y+3	; 0x03
    afac:	92 60       	ori	r25, 0x02	; 2
    afae:	9b 83       	std	Y+3, r25	; 0x03
    afb0:	ab 81       	ldd	r26, Y+3	; 0x03
    afb2:	a1 fd       	sbrc	r26, 1
    afb4:	0b c0       	rjmp	.+22     	; 0xafcc <follow_path+0x418>
    afb6:	bc 81       	ldd	r27, Y+4	; 0x04
    afb8:	b0 ff       	sbrs	r27, 0
    afba:	02 c0       	rjmp	.+4      	; 0xafc0 <follow_path+0x40c>
    afbc:	a0 61       	ori	r26, 0x10	; 16
    afbe:	ab 83       	std	Y+3, r26	; 0x03
    afc0:	ec 81       	ldd	r30, Y+4	; 0x04
    afc2:	e2 ff       	sbrs	r30, 2
    afc4:	03 c0       	rjmp	.+6      	; 0xafcc <follow_path+0x418>
    afc6:	fb 81       	ldd	r31, Y+3	; 0x03
    afc8:	f8 60       	ori	r31, 0x08	; 8
    afca:	fb 83       	std	Y+3, r31	; 0x03
    afcc:	2b 81       	ldd	r18, Y+3	; 0x03
    afce:	f7 01       	movw	r30, r14
    afd0:	27 a3       	std	Z+39, r18	; 0x27
    afd2:	a2 ce       	rjmp	.-700    	; 0xad18 <follow_path+0x164>
    afd4:	86 e0       	ldi	r24, 0x06	; 6
    afd6:	90 e0       	ldi	r25, 0x00	; 0
    afd8:	a1 ce       	rjmp	.-702    	; 0xad1c <follow_path+0x168>
    afda:	84 30       	cpi	r24, 0x04	; 4
    afdc:	91 05       	cpc	r25, r1
    afde:	b9 f4       	brne	.+46     	; 0xb00e <follow_path+0x45a>
    afe0:	32 2f       	mov	r19, r18
    afe2:	34 70       	andi	r19, 0x04	; 4
    afe4:	25 ff       	sbrs	r18, 5
    afe6:	08 c0       	rjmp	.+16     	; 0xaff8 <follow_path+0x444>
    afe8:	33 23       	and	r19, r19
    afea:	09 f4       	brne	.+2      	; 0xafee <follow_path+0x43a>
    afec:	b8 ce       	rjmp	.-656    	; 0xad5e <follow_path+0x1aa>
    afee:	80 e8       	ldi	r24, 0x80	; 128
    aff0:	87 a3       	std	Z+39, r24	; 0x27
    aff2:	80 e0       	ldi	r24, 0x00	; 0
    aff4:	90 e0       	ldi	r25, 0x00	; 0
    aff6:	0b c0       	rjmp	.+22     	; 0xb00e <follow_path+0x45a>
    aff8:	31 11       	cpse	r19, r1
    affa:	09 c0       	rjmp	.+18     	; 0xb00e <follow_path+0x45a>
    affc:	85 e0       	ldi	r24, 0x05	; 5
    affe:	90 e0       	ldi	r25, 0x00	; 0
    b000:	06 c0       	rjmp	.+12     	; 0xb00e <follow_path+0x45a>
    b002:	fb e0       	ldi	r31, 0x0B	; 11
    b004:	8f 16       	cp	r8, r31
    b006:	91 04       	cpc	r9, r1
    b008:	09 f0       	breq	.+2      	; 0xb00c <follow_path+0x458>
    b00a:	4f cf       	rjmp	.-354    	; 0xaeaa <follow_path+0x2f6>
    b00c:	3d cf       	rjmp	.-390    	; 0xae88 <follow_path+0x2d4>
    b00e:	2a 96       	adiw	r28, 0x0a	; 10
    b010:	e2 e1       	ldi	r30, 0x12	; 18
    b012:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000b016 <f_mount>:
    b016:	a6 e0       	ldi	r26, 0x06	; 6
    b018:	b0 e0       	ldi	r27, 0x00	; 0
    b01a:	e1 e1       	ldi	r30, 0x11	; 17
    b01c:	f8 e5       	ldi	r31, 0x58	; 88
    b01e:	0c 94 92 e1 	jmp	0x1c324	; 0x1c324 <__prologue_saves__+0x1e>
    b022:	9c 83       	std	Y+4, r25	; 0x04
    b024:	8b 83       	std	Y+3, r24	; 0x03
    b026:	7e 83       	std	Y+6, r23	; 0x06
    b028:	6d 83       	std	Y+5, r22	; 0x05
    b02a:	14 2f       	mov	r17, r20
    b02c:	7a 83       	std	Y+2, r23	; 0x02
    b02e:	69 83       	std	Y+1, r22	; 0x01
    b030:	ce 01       	movw	r24, r28
    b032:	01 96       	adiw	r24, 0x01	; 1
    b034:	0e 94 61 46 	call	0x8cc2	; 0x8cc2 <get_ldnumber>
    b038:	97 fd       	sbrc	r25, 7
    b03a:	20 c0       	rjmp	.+64     	; 0xb07c <f_mount+0x66>
    b03c:	88 0f       	add	r24, r24
    b03e:	99 1f       	adc	r25, r25
    b040:	fc 01       	movw	r30, r24
    b042:	ed 5e       	subi	r30, 0xED	; 237
    b044:	f7 4e       	sbci	r31, 0xE7	; 231
    b046:	01 90       	ld	r0, Z+
    b048:	f0 81       	ld	r31, Z
    b04a:	e0 2d       	mov	r30, r0
    b04c:	30 97       	sbiw	r30, 0x00	; 0
    b04e:	09 f0       	breq	.+2      	; 0xb052 <f_mount+0x3c>
    b050:	10 82       	st	Z, r1
    b052:	eb 81       	ldd	r30, Y+3	; 0x03
    b054:	fc 81       	ldd	r31, Y+4	; 0x04
    b056:	30 97       	sbiw	r30, 0x00	; 0
    b058:	09 f0       	breq	.+2      	; 0xb05c <f_mount+0x46>
    b05a:	10 82       	st	Z, r1
    b05c:	dc 01       	movw	r26, r24
    b05e:	ad 5e       	subi	r26, 0xED	; 237
    b060:	b7 4e       	sbci	r27, 0xE7	; 231
    b062:	ed 93       	st	X+, r30
    b064:	fc 93       	st	X, r31
    b066:	11 23       	and	r17, r17
    b068:	61 f0       	breq	.+24     	; 0xb082 <f_mount+0x6c>
    b06a:	40 e0       	ldi	r20, 0x00	; 0
    b06c:	be 01       	movw	r22, r28
    b06e:	6d 5f       	subi	r22, 0xFD	; 253
    b070:	7f 4f       	sbci	r23, 0xFF	; 255
    b072:	ce 01       	movw	r24, r28
    b074:	05 96       	adiw	r24, 0x05	; 5
    b076:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    b07a:	05 c0       	rjmp	.+10     	; 0xb086 <f_mount+0x70>
    b07c:	8b e0       	ldi	r24, 0x0B	; 11
    b07e:	90 e0       	ldi	r25, 0x00	; 0
    b080:	02 c0       	rjmp	.+4      	; 0xb086 <f_mount+0x70>
    b082:	80 e0       	ldi	r24, 0x00	; 0
    b084:	90 e0       	ldi	r25, 0x00	; 0
    b086:	26 96       	adiw	r28, 0x06	; 6
    b088:	e3 e0       	ldi	r30, 0x03	; 3
    b08a:	0c 94 ae e1 	jmp	0x1c35c	; 0x1c35c <__epilogue_restores__+0x1e>

0000b08e <f_open>:
    b08e:	a6 e3       	ldi	r26, 0x36	; 54
    b090:	b0 e0       	ldi	r27, 0x00	; 0
    b092:	ed e4       	ldi	r30, 0x4D	; 77
    b094:	f8 e5       	ldi	r31, 0x58	; 88
    b096:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    b09a:	7a ab       	std	Y+50, r23	; 0x32
    b09c:	69 ab       	std	Y+49, r22	; 0x31
    b09e:	00 97       	sbiw	r24, 0x00	; 0
    b0a0:	09 f4       	brne	.+2      	; 0xb0a4 <f_open+0x16>
    b0a2:	93 c1       	rjmp	.+806    	; 0xb3ca <f_open+0x33c>
    b0a4:	74 2e       	mov	r7, r20
    b0a6:	7c 01       	movw	r14, r24
    b0a8:	24 2f       	mov	r18, r20
    b0aa:	2f 73       	andi	r18, 0x3F	; 63
    b0ac:	32 2e       	mov	r3, r18
    b0ae:	42 2f       	mov	r20, r18
    b0b0:	be 01       	movw	r22, r28
    b0b2:	61 5d       	subi	r22, 0xD1	; 209
    b0b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b0b6:	ce 01       	movw	r24, r28
    b0b8:	c1 96       	adiw	r24, 0x31	; 49
    b0ba:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    b0be:	00 97       	sbiw	r24, 0x00	; 0
    b0c0:	09 f0       	breq	.+2      	; 0xb0c4 <f_open+0x36>
    b0c2:	7d c1       	rjmp	.+762    	; 0xb3be <f_open+0x330>
    b0c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    b0c6:	98 a9       	ldd	r25, Y+48	; 0x30
    b0c8:	9a 83       	std	Y+2, r25	; 0x02
    b0ca:	89 83       	std	Y+1, r24	; 0x01
    b0cc:	80 e0       	ldi	r24, 0x00	; 0
    b0ce:	92 e0       	ldi	r25, 0x02	; 2
    b0d0:	0e 94 9d 67 	call	0xcf3a	; 0xcf3a <ff_memalloc>
    b0d4:	5c 01       	movw	r10, r24
    b0d6:	00 97       	sbiw	r24, 0x00	; 0
    b0d8:	09 f4       	brne	.+2      	; 0xb0dc <f_open+0x4e>
    b0da:	79 c1       	rjmp	.+754    	; 0xb3ce <f_open+0x340>
    b0dc:	ef a5       	ldd	r30, Y+47	; 0x2f
    b0de:	f8 a9       	ldd	r31, Y+48	; 0x30
    b0e0:	94 87       	std	Z+12, r25	; 0x0c
    b0e2:	83 87       	std	Z+11, r24	; 0x0b
    b0e4:	69 a9       	ldd	r22, Y+49	; 0x31
    b0e6:	7a a9       	ldd	r23, Y+50	; 0x32
    b0e8:	ce 01       	movw	r24, r28
    b0ea:	01 96       	adiw	r24, 0x01	; 1
    b0ec:	63 dd       	rcall	.-1338   	; 0xabb4 <follow_path>
    b0ee:	8c 01       	movw	r16, r24
    b0f0:	89 2b       	or	r24, r25
    b0f2:	29 f4       	brne	.+10     	; 0xb0fe <f_open+0x70>
    b0f4:	88 a5       	ldd	r24, Y+40	; 0x28
    b0f6:	87 ff       	sbrs	r24, 7
    b0f8:	02 c0       	rjmp	.+4      	; 0xb0fe <f_open+0x70>
    b0fa:	06 e0       	ldi	r16, 0x06	; 6
    b0fc:	10 e0       	ldi	r17, 0x00	; 0
    b0fe:	87 2d       	mov	r24, r7
    b100:	8c 71       	andi	r24, 0x1C	; 28
    b102:	09 f4       	brne	.+2      	; 0xb106 <f_open+0x78>
    b104:	75 c0       	rjmp	.+234    	; 0xb1f0 <f_open+0x162>
    b106:	01 15       	cp	r16, r1
    b108:	11 05       	cpc	r17, r1
    b10a:	79 f0       	breq	.+30     	; 0xb12a <f_open+0x9c>
    b10c:	04 30       	cpi	r16, 0x04	; 4
    b10e:	11 05       	cpc	r17, r1
    b110:	09 f0       	breq	.+2      	; 0xb114 <f_open+0x86>
    b112:	6d c1       	rjmp	.+730    	; 0xb3ee <f_open+0x360>
    b114:	ce 01       	movw	r24, r28
    b116:	01 96       	adiw	r24, 0x01	; 1
    b118:	bf db       	rcall	.-2178   	; 0xa898 <dir_register>
    b11a:	8c 01       	movw	r16, r24
    b11c:	89 2b       	or	r24, r25
    b11e:	09 f0       	breq	.+2      	; 0xb122 <f_open+0x94>
    b120:	66 c1       	rjmp	.+716    	; 0xb3ee <f_open+0x360>
    b122:	33 2d       	mov	r19, r3
    b124:	38 60       	ori	r19, 0x08	; 8
    b126:	33 2e       	mov	r3, r19
    b128:	06 c0       	rjmp	.+12     	; 0xb136 <f_open+0xa8>
    b12a:	8d 81       	ldd	r24, Y+5	; 0x05
    b12c:	81 71       	andi	r24, 0x11	; 17
    b12e:	09 f0       	breq	.+2      	; 0xb132 <f_open+0xa4>
    b130:	5c c1       	rjmp	.+696    	; 0xb3ea <f_open+0x35c>
    b132:	72 fc       	sbrc	r7, 2
    b134:	51 c1       	rjmp	.+674    	; 0xb3d8 <f_open+0x34a>
    b136:	33 fe       	sbrs	r3, 3
    b138:	6b c0       	rjmp	.+214    	; 0xb210 <f_open+0x182>
    b13a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b13c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b13e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b140:	f8 a9       	ldd	r31, Y+48	; 0x30
    b142:	b8 01       	movw	r22, r16
    b144:	80 81       	ld	r24, Z
    b146:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    b14a:	2b 01       	movw	r4, r22
    b14c:	3c 01       	movw	r6, r24
    b14e:	0e 94 0e 6f 	call	0xde1c	; 0xde1c <get_fattime>
    b152:	ab 01       	movw	r20, r22
    b154:	bc 01       	movw	r22, r24
    b156:	c8 01       	movw	r24, r16
    b158:	0e 96       	adiw	r24, 0x0e	; 14
    b15a:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
    b15e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b160:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b162:	80 e2       	ldi	r24, 0x20	; 32
    b164:	83 87       	std	Z+11, r24	; 0x0b
    b166:	af a5       	ldd	r26, Y+47	; 0x2f
    b168:	b8 a9       	ldd	r27, Y+48	; 0x30
    b16a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b16c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b16e:	12 8e       	std	Z+26, r1	; 0x1a
    b170:	13 8e       	std	Z+27, r1	; 0x1b
    b172:	8c 91       	ld	r24, X
    b174:	83 30       	cpi	r24, 0x03	; 3
    b176:	11 f4       	brne	.+4      	; 0xb17c <f_open+0xee>
    b178:	14 8a       	std	Z+20, r1	; 0x14
    b17a:	15 8a       	std	Z+21, r1	; 0x15
    b17c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b17e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b180:	14 8e       	std	Z+28, r1	; 0x1c
    b182:	15 8e       	std	Z+29, r1	; 0x1d
    b184:	16 8e       	std	Z+30, r1	; 0x1e
    b186:	17 8e       	std	Z+31, r1	; 0x1f
    b188:	81 e0       	ldi	r24, 0x01	; 1
    b18a:	fd 01       	movw	r30, r26
    b18c:	83 83       	std	Z+3, r24	; 0x03
    b18e:	41 14       	cp	r4, r1
    b190:	51 04       	cpc	r5, r1
    b192:	61 04       	cpc	r6, r1
    b194:	71 04       	cpc	r7, r1
    b196:	c9 f1       	breq	.+114    	; 0xb20a <f_open+0x17c>
    b198:	21 a9       	ldd	r18, Z+49	; 0x31
    b19a:	32 a9       	ldd	r19, Z+50	; 0x32
    b19c:	43 a9       	ldd	r20, Z+51	; 0x33
    b19e:	54 a9       	ldd	r21, Z+52	; 0x34
    b1a0:	2b ab       	std	Y+51, r18	; 0x33
    b1a2:	3c ab       	std	Y+52, r19	; 0x34
    b1a4:	4d ab       	std	Y+53, r20	; 0x35
    b1a6:	5e ab       	std	Y+54, r21	; 0x36
    b1a8:	00 e0       	ldi	r16, 0x00	; 0
    b1aa:	10 e0       	ldi	r17, 0x00	; 0
    b1ac:	98 01       	movw	r18, r16
    b1ae:	b3 01       	movw	r22, r6
    b1b0:	a2 01       	movw	r20, r4
    b1b2:	ce 01       	movw	r24, r28
    b1b4:	01 96       	adiw	r24, 0x01	; 1
    b1b6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <remove_chain>
    b1ba:	8c 01       	movw	r16, r24
    b1bc:	89 2b       	or	r24, r25
    b1be:	09 f0       	breq	.+2      	; 0xb1c2 <f_open+0x134>
    b1c0:	16 c1       	rjmp	.+556    	; 0xb3ee <f_open+0x360>
    b1c2:	4b a9       	ldd	r20, Y+51	; 0x33
    b1c4:	5c a9       	ldd	r21, Y+52	; 0x34
    b1c6:	6d a9       	ldd	r22, Y+53	; 0x35
    b1c8:	7e a9       	ldd	r23, Y+54	; 0x36
    b1ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    b1cc:	98 a9       	ldd	r25, Y+48	; 0x30
    b1ce:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    b1d2:	8c 01       	movw	r16, r24
    b1d4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b1d6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b1d8:	21 e0       	ldi	r18, 0x01	; 1
    b1da:	42 1a       	sub	r4, r18
    b1dc:	51 08       	sbc	r5, r1
    b1de:	61 08       	sbc	r6, r1
    b1e0:	71 08       	sbc	r7, r1
    b1e2:	45 86       	std	Z+13, r4	; 0x0d
    b1e4:	56 86       	std	Z+14, r5	; 0x0e
    b1e6:	67 86       	std	Z+15, r6	; 0x0f
    b1e8:	70 8a       	std	Z+16, r7	; 0x10
    b1ea:	89 2b       	or	r24, r25
    b1ec:	61 f0       	breq	.+24     	; 0xb206 <f_open+0x178>
    b1ee:	ff c0       	rjmp	.+510    	; 0xb3ee <f_open+0x360>
    b1f0:	01 15       	cp	r16, r1
    b1f2:	11 05       	cpc	r17, r1
    b1f4:	09 f0       	breq	.+2      	; 0xb1f8 <f_open+0x16a>
    b1f6:	fb c0       	rjmp	.+502    	; 0xb3ee <f_open+0x360>
    b1f8:	8d 81       	ldd	r24, Y+5	; 0x05
    b1fa:	84 fd       	sbrc	r24, 4
    b1fc:	f3 c0       	rjmp	.+486    	; 0xb3e4 <f_open+0x356>
    b1fe:	71 fe       	sbrs	r7, 1
    b200:	02 c0       	rjmp	.+4      	; 0xb206 <f_open+0x178>
    b202:	80 fd       	sbrc	r24, 0
    b204:	f2 c0       	rjmp	.+484    	; 0xb3ea <f_open+0x35c>
    b206:	33 fe       	sbrs	r3, 3
    b208:	03 c0       	rjmp	.+6      	; 0xb210 <f_open+0x182>
    b20a:	33 2d       	mov	r19, r3
    b20c:	30 64       	ori	r19, 0x40	; 64
    b20e:	33 2e       	mov	r3, r19
    b210:	0f a5       	ldd	r16, Y+47	; 0x2f
    b212:	18 a9       	ldd	r17, Y+48	; 0x30
    b214:	f8 01       	movw	r30, r16
    b216:	81 a9       	ldd	r24, Z+49	; 0x31
    b218:	92 a9       	ldd	r25, Z+50	; 0x32
    b21a:	a3 a9       	ldd	r26, Z+51	; 0x33
    b21c:	b4 a9       	ldd	r27, Z+52	; 0x34
    b21e:	f7 01       	movw	r30, r14
    b220:	84 8f       	std	Z+28, r24	; 0x1c
    b222:	95 8f       	std	Z+29, r25	; 0x1d
    b224:	a6 8f       	std	Z+30, r26	; 0x1e
    b226:	b7 8f       	std	Z+31, r27	; 0x1f
    b228:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b22a:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b22c:	71 a2       	std	Z+33, r7	; 0x21
    b22e:	60 a2       	std	Z+32, r6	; 0x20
    b230:	b3 01       	movw	r22, r6
    b232:	f8 01       	movw	r30, r16
    b234:	80 81       	ld	r24, Z
    b236:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    b23a:	f7 01       	movw	r30, r14
    b23c:	66 83       	std	Z+6, r22	; 0x06
    b23e:	77 83       	std	Z+7, r23	; 0x07
    b240:	80 87       	std	Z+8, r24	; 0x08
    b242:	91 87       	std	Z+9, r25	; 0x09
    b244:	c3 01       	movw	r24, r6
    b246:	4c 96       	adiw	r24, 0x1c	; 28
    b248:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <ld_dword>
    b24c:	f7 01       	movw	r30, r14
    b24e:	62 87       	std	Z+10, r22	; 0x0a
    b250:	73 87       	std	Z+11, r23	; 0x0b
    b252:	84 87       	std	Z+12, r24	; 0x0c
    b254:	95 87       	std	Z+13, r25	; 0x0d
    b256:	13 a2       	std	Z+35, r1	; 0x23
    b258:	12 a2       	std	Z+34, r1	; 0x22
    b25a:	11 83       	std	Z+1, r17	; 0x01
    b25c:	00 83       	st	Z, r16
    b25e:	f8 01       	movw	r30, r16
    b260:	85 81       	ldd	r24, Z+5	; 0x05
    b262:	96 81       	ldd	r25, Z+6	; 0x06
    b264:	f7 01       	movw	r30, r14
    b266:	93 83       	std	Z+3, r25	; 0x03
    b268:	82 83       	std	Z+2, r24	; 0x02
    b26a:	36 86       	std	Z+14, r3	; 0x0e
    b26c:	17 86       	std	Z+15, r1	; 0x0f
    b26e:	10 8e       	std	Z+24, r1	; 0x18
    b270:	11 8e       	std	Z+25, r1	; 0x19
    b272:	12 8e       	std	Z+26, r1	; 0x1a
    b274:	13 8e       	std	Z+27, r1	; 0x1b
    b276:	10 8a       	std	Z+16, r1	; 0x10
    b278:	11 8a       	std	Z+17, r1	; 0x11
    b27a:	12 8a       	std	Z+18, r1	; 0x12
    b27c:	13 8a       	std	Z+19, r1	; 0x13
    b27e:	67 01       	movw	r12, r14
    b280:	f4 e2       	ldi	r31, 0x24	; 36
    b282:	cf 0e       	add	r12, r31
    b284:	d1 1c       	adc	r13, r1
    b286:	40 e0       	ldi	r20, 0x00	; 0
    b288:	52 e0       	ldi	r21, 0x02	; 2
    b28a:	60 e0       	ldi	r22, 0x00	; 0
    b28c:	70 e0       	ldi	r23, 0x00	; 0
    b28e:	c6 01       	movw	r24, r12
    b290:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <mem_set>
    b294:	35 fc       	sbrc	r3, 5
    b296:	03 c0       	rjmp	.+6      	; 0xb29e <f_open+0x210>
    b298:	00 e0       	ldi	r16, 0x00	; 0
    b29a:	10 e0       	ldi	r17, 0x00	; 0
    b29c:	89 c0       	rjmp	.+274    	; 0xb3b0 <f_open+0x322>
    b29e:	f7 01       	movw	r30, r14
    b2a0:	62 84       	ldd	r6, Z+10	; 0x0a
    b2a2:	73 84       	ldd	r7, Z+11	; 0x0b
    b2a4:	84 84       	ldd	r8, Z+12	; 0x0c
    b2a6:	95 84       	ldd	r9, Z+13	; 0x0d
    b2a8:	61 14       	cp	r6, r1
    b2aa:	71 04       	cpc	r7, r1
    b2ac:	81 04       	cpc	r8, r1
    b2ae:	91 04       	cpc	r9, r1
    b2b0:	99 f3       	breq	.-26     	; 0xb298 <f_open+0x20a>
    b2b2:	60 8a       	std	Z+16, r6	; 0x10
    b2b4:	71 8a       	std	Z+17, r7	; 0x11
    b2b6:	82 8a       	std	Z+18, r8	; 0x12
    b2b8:	93 8a       	std	Z+19, r9	; 0x13
    b2ba:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2bc:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2be:	21 84       	ldd	r2, Z+9	; 0x09
    b2c0:	32 84       	ldd	r3, Z+10	; 0x0a
    b2c2:	c1 01       	movw	r24, r2
    b2c4:	a0 e0       	ldi	r26, 0x00	; 0
    b2c6:	b0 e0       	ldi	r27, 0x00	; 0
    b2c8:	1c 01       	movw	r2, r24
    b2ca:	2d 01       	movw	r4, r26
    b2cc:	59 e0       	ldi	r21, 0x09	; 9
    b2ce:	22 0c       	add	r2, r2
    b2d0:	33 1c       	adc	r3, r3
    b2d2:	44 1c       	adc	r4, r4
    b2d4:	55 1c       	adc	r5, r5
    b2d6:	5a 95       	dec	r21
    b2d8:	d1 f7       	brne	.-12     	; 0xb2ce <f_open+0x240>
    b2da:	f7 01       	movw	r30, r14
    b2dc:	46 81       	ldd	r20, Z+6	; 0x06
    b2de:	57 81       	ldd	r21, Z+7	; 0x07
    b2e0:	60 85       	ldd	r22, Z+8	; 0x08
    b2e2:	71 85       	ldd	r23, Z+9	; 0x09
    b2e4:	26 14       	cp	r2, r6
    b2e6:	37 04       	cpc	r3, r7
    b2e8:	48 04       	cpc	r4, r8
    b2ea:	59 04       	cpc	r5, r9
    b2ec:	f0 f4       	brcc	.+60     	; 0xb32a <f_open+0x29c>
    b2ee:	f7 01       	movw	r30, r14
    b2f0:	80 81       	ld	r24, Z
    b2f2:	91 81       	ldd	r25, Z+1	; 0x01
    b2f4:	0e 94 e0 4d 	call	0x9bc0	; 0x9bc0 <get_fat.isra.10>
    b2f8:	ab 01       	movw	r20, r22
    b2fa:	bc 01       	movw	r22, r24
    b2fc:	d4 01       	movw	r26, r8
    b2fe:	c3 01       	movw	r24, r6
    b300:	82 19       	sub	r24, r2
    b302:	93 09       	sbc	r25, r3
    b304:	a4 09       	sbc	r26, r4
    b306:	b5 09       	sbc	r27, r5
    b308:	3c 01       	movw	r6, r24
    b30a:	4d 01       	movw	r8, r26
    b30c:	42 30       	cpi	r20, 0x02	; 2
    b30e:	51 05       	cpc	r21, r1
    b310:	61 05       	cpc	r22, r1
    b312:	71 05       	cpc	r23, r1
    b314:	08 f4       	brcc	.+2      	; 0xb318 <f_open+0x28a>
    b316:	63 c0       	rjmp	.+198    	; 0xb3de <f_open+0x350>
    b318:	4f 3f       	cpi	r20, 0xFF	; 255
    b31a:	ff ef       	ldi	r31, 0xFF	; 255
    b31c:	5f 07       	cpc	r21, r31
    b31e:	6f 07       	cpc	r22, r31
    b320:	7f 07       	cpc	r23, r31
    b322:	01 f7       	brne	.-64     	; 0xb2e4 <f_open+0x256>
    b324:	01 e0       	ldi	r16, 0x01	; 1
    b326:	10 e0       	ldi	r17, 0x00	; 0
    b328:	02 c0       	rjmp	.+4      	; 0xb32e <f_open+0x2a0>
    b32a:	00 e0       	ldi	r16, 0x00	; 0
    b32c:	10 e0       	ldi	r17, 0x00	; 0
    b32e:	f7 01       	movw	r30, r14
    b330:	44 8b       	std	Z+20, r20	; 0x14
    b332:	55 8b       	std	Z+21, r21	; 0x15
    b334:	66 8b       	std	Z+22, r22	; 0x16
    b336:	77 8b       	std	Z+23, r23	; 0x17
    b338:	01 15       	cp	r16, r1
    b33a:	11 05       	cpc	r17, r1
    b33c:	c9 f5       	brne	.+114    	; 0xb3b0 <f_open+0x322>
    b33e:	d4 01       	movw	r26, r8
    b340:	c3 01       	movw	r24, r6
    b342:	91 70       	andi	r25, 0x01	; 1
    b344:	aa 27       	eor	r26, r26
    b346:	bb 27       	eor	r27, r27
    b348:	89 2b       	or	r24, r25
    b34a:	8a 2b       	or	r24, r26
    b34c:	8b 2b       	or	r24, r27
    b34e:	09 f4       	brne	.+2      	; 0xb352 <f_open+0x2c4>
    b350:	a3 cf       	rjmp	.-186    	; 0xb298 <f_open+0x20a>
    b352:	4f a4       	ldd	r4, Y+47	; 0x2f
    b354:	58 a8       	ldd	r5, Y+48	; 0x30
    b356:	c2 01       	movw	r24, r4
    b358:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    b35c:	61 15       	cp	r22, r1
    b35e:	71 05       	cpc	r23, r1
    b360:	81 05       	cpc	r24, r1
    b362:	91 05       	cpc	r25, r1
    b364:	19 f1       	breq	.+70     	; 0xb3ac <f_open+0x31e>
    b366:	94 01       	movw	r18, r8
    b368:	83 01       	movw	r16, r6
    b36a:	49 e0       	ldi	r20, 0x09	; 9
    b36c:	36 95       	lsr	r19
    b36e:	27 95       	ror	r18
    b370:	17 95       	ror	r17
    b372:	07 95       	ror	r16
    b374:	4a 95       	dec	r20
    b376:	d1 f7       	brne	.-12     	; 0xb36c <f_open+0x2de>
    b378:	a9 01       	movw	r20, r18
    b37a:	98 01       	movw	r18, r16
    b37c:	26 0f       	add	r18, r22
    b37e:	37 1f       	adc	r19, r23
    b380:	48 1f       	adc	r20, r24
    b382:	59 1f       	adc	r21, r25
    b384:	f7 01       	movw	r30, r14
    b386:	20 8f       	std	Z+24, r18	; 0x18
    b388:	31 8f       	std	Z+25, r19	; 0x19
    b38a:	42 8f       	std	Z+26, r20	; 0x1a
    b38c:	53 8f       	std	Z+27, r21	; 0x1b
    b38e:	01 e0       	ldi	r16, 0x01	; 1
    b390:	10 e0       	ldi	r17, 0x00	; 0
    b392:	b6 01       	movw	r22, r12
    b394:	f2 01       	movw	r30, r4
    b396:	81 81       	ldd	r24, Z+1	; 0x01
    b398:	0e 94 59 68 	call	0xd0b2	; 0xd0b2 <disk_read>
    b39c:	31 e0       	ldi	r19, 0x01	; 1
    b39e:	20 e0       	ldi	r18, 0x00	; 0
    b3a0:	89 2b       	or	r24, r25
    b3a2:	09 f4       	brne	.+2      	; 0xb3a6 <f_open+0x318>
    b3a4:	30 e0       	ldi	r19, 0x00	; 0
    b3a6:	03 2f       	mov	r16, r19
    b3a8:	12 2f       	mov	r17, r18
    b3aa:	02 c0       	rjmp	.+4      	; 0xb3b0 <f_open+0x322>
    b3ac:	02 e0       	ldi	r16, 0x02	; 2
    b3ae:	10 e0       	ldi	r17, 0x00	; 0
    b3b0:	c5 01       	movw	r24, r10
    b3b2:	0e 94 a0 67 	call	0xcf40	; 0xcf40 <ff_memfree>
    b3b6:	01 15       	cp	r16, r1
    b3b8:	11 05       	cpc	r17, r1
    b3ba:	59 f0       	breq	.+22     	; 0xb3d2 <f_open+0x344>
    b3bc:	01 c0       	rjmp	.+2      	; 0xb3c0 <f_open+0x332>
    b3be:	8c 01       	movw	r16, r24
    b3c0:	f7 01       	movw	r30, r14
    b3c2:	11 82       	std	Z+1, r1	; 0x01
    b3c4:	10 82       	st	Z, r1
    b3c6:	c8 01       	movw	r24, r16
    b3c8:	16 c0       	rjmp	.+44     	; 0xb3f6 <f_open+0x368>
    b3ca:	89 e0       	ldi	r24, 0x09	; 9
    b3cc:	03 c0       	rjmp	.+6      	; 0xb3d4 <f_open+0x346>
    b3ce:	81 e1       	ldi	r24, 0x11	; 17
    b3d0:	01 c0       	rjmp	.+2      	; 0xb3d4 <f_open+0x346>
    b3d2:	80 e0       	ldi	r24, 0x00	; 0
    b3d4:	90 e0       	ldi	r25, 0x00	; 0
    b3d6:	0f c0       	rjmp	.+30     	; 0xb3f6 <f_open+0x368>
    b3d8:	08 e0       	ldi	r16, 0x08	; 8
    b3da:	10 e0       	ldi	r17, 0x00	; 0
    b3dc:	08 c0       	rjmp	.+16     	; 0xb3ee <f_open+0x360>
    b3de:	02 e0       	ldi	r16, 0x02	; 2
    b3e0:	10 e0       	ldi	r17, 0x00	; 0
    b3e2:	a5 cf       	rjmp	.-182    	; 0xb32e <f_open+0x2a0>
    b3e4:	04 e0       	ldi	r16, 0x04	; 4
    b3e6:	10 e0       	ldi	r17, 0x00	; 0
    b3e8:	02 c0       	rjmp	.+4      	; 0xb3ee <f_open+0x360>
    b3ea:	07 e0       	ldi	r16, 0x07	; 7
    b3ec:	10 e0       	ldi	r17, 0x00	; 0
    b3ee:	c5 01       	movw	r24, r10
    b3f0:	0e 94 a0 67 	call	0xcf40	; 0xcf40 <ff_memfree>
    b3f4:	e5 cf       	rjmp	.-54     	; 0xb3c0 <f_open+0x332>
    b3f6:	e6 96       	adiw	r28, 0x36	; 54
    b3f8:	e2 e1       	ldi	r30, 0x12	; 18
    b3fa:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000b3fe <f_read>:
    b3fe:	a6 e0       	ldi	r26, 0x06	; 6
    b400:	b0 e0       	ldi	r27, 0x00	; 0
    b402:	e5 e0       	ldi	r30, 0x05	; 5
    b404:	fa e5       	ldi	r31, 0x5A	; 90
    b406:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    b40a:	7c 01       	movw	r14, r24
    b40c:	4b 01       	movw	r8, r22
    b40e:	5a 01       	movw	r10, r20
    b410:	3e 83       	std	Y+6, r19	; 0x06
    b412:	2d 83       	std	Y+5, r18	; 0x05
    b414:	f9 01       	movw	r30, r18
    b416:	11 82       	std	Z+1, r1	; 0x01
    b418:	10 82       	st	Z, r1
    b41a:	be 01       	movw	r22, r28
    b41c:	6f 5f       	subi	r22, 0xFF	; 255
    b41e:	7f 4f       	sbci	r23, 0xFF	; 255
    b420:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    b424:	00 97       	sbiw	r24, 0x00	; 0
    b426:	09 f0       	breq	.+2      	; 0xb42a <f_read+0x2c>
    b428:	31 c1       	rjmp	.+610    	; 0xb68c <f_read+0x28e>
    b42a:	f7 01       	movw	r30, r14
    b42c:	87 85       	ldd	r24, Z+15	; 0x0f
    b42e:	90 e0       	ldi	r25, 0x00	; 0
    b430:	00 97       	sbiw	r24, 0x00	; 0
    b432:	09 f0       	breq	.+2      	; 0xb436 <f_read+0x38>
    b434:	2b c1       	rjmp	.+598    	; 0xb68c <f_read+0x28e>
    b436:	86 85       	ldd	r24, Z+14	; 0x0e
    b438:	80 ff       	sbrs	r24, 0
    b43a:	26 c1       	rjmp	.+588    	; 0xb688 <f_read+0x28a>
    b43c:	82 85       	ldd	r24, Z+10	; 0x0a
    b43e:	93 85       	ldd	r25, Z+11	; 0x0b
    b440:	a4 85       	ldd	r26, Z+12	; 0x0c
    b442:	b5 85       	ldd	r27, Z+13	; 0x0d
    b444:	40 89       	ldd	r20, Z+16	; 0x10
    b446:	51 89       	ldd	r21, Z+17	; 0x11
    b448:	62 89       	ldd	r22, Z+18	; 0x12
    b44a:	73 89       	ldd	r23, Z+19	; 0x13
    b44c:	84 1b       	sub	r24, r20
    b44e:	95 0b       	sbc	r25, r21
    b450:	a6 0b       	sbc	r26, r22
    b452:	b7 0b       	sbc	r27, r23
    b454:	a5 01       	movw	r20, r10
    b456:	60 e0       	ldi	r22, 0x00	; 0
    b458:	70 e0       	ldi	r23, 0x00	; 0
    b45a:	84 17       	cp	r24, r20
    b45c:	95 07       	cpc	r25, r21
    b45e:	a6 07       	cpc	r26, r22
    b460:	b7 07       	cpc	r27, r23
    b462:	08 f4       	brcc	.+2      	; 0xb466 <f_read+0x68>
    b464:	5c 01       	movw	r10, r24
    b466:	17 01       	movw	r2, r14
    b468:	f4 e2       	ldi	r31, 0x24	; 36
    b46a:	2f 0e       	add	r2, r31
    b46c:	31 1c       	adc	r3, r1
    b46e:	a1 14       	cp	r10, r1
    b470:	b1 04       	cpc	r11, r1
    b472:	09 f4       	brne	.+2      	; 0xb476 <f_read+0x78>
    b474:	07 c1       	rjmp	.+526    	; 0xb684 <f_read+0x286>
    b476:	f7 01       	movw	r30, r14
    b478:	40 89       	ldd	r20, Z+16	; 0x10
    b47a:	51 89       	ldd	r21, Z+17	; 0x11
    b47c:	62 89       	ldd	r22, Z+18	; 0x12
    b47e:	73 89       	ldd	r23, Z+19	; 0x13
    b480:	db 01       	movw	r26, r22
    b482:	ca 01       	movw	r24, r20
    b484:	91 70       	andi	r25, 0x01	; 1
    b486:	aa 27       	eor	r26, r26
    b488:	bb 27       	eor	r27, r27
    b48a:	89 2b       	or	r24, r25
    b48c:	8a 2b       	or	r24, r26
    b48e:	8b 2b       	or	r24, r27
    b490:	09 f0       	breq	.+2      	; 0xb494 <f_read+0x96>
    b492:	cb c0       	rjmp	.+406    	; 0xb62a <f_read+0x22c>
    b494:	e9 81       	ldd	r30, Y+1	; 0x01
    b496:	fa 81       	ldd	r31, Y+2	; 0x02
    b498:	01 85       	ldd	r16, Z+9	; 0x09
    b49a:	12 85       	ldd	r17, Z+10	; 0x0a
    b49c:	01 50       	subi	r16, 0x01	; 1
    b49e:	11 09       	sbc	r17, r1
    b4a0:	db 01       	movw	r26, r22
    b4a2:	ca 01       	movw	r24, r20
    b4a4:	e9 e0       	ldi	r30, 0x09	; 9
    b4a6:	b6 95       	lsr	r27
    b4a8:	a7 95       	ror	r26
    b4aa:	97 95       	ror	r25
    b4ac:	87 95       	ror	r24
    b4ae:	ea 95       	dec	r30
    b4b0:	d1 f7       	brne	.-12     	; 0xb4a6 <f_read+0xa8>
    b4b2:	08 23       	and	r16, r24
    b4b4:	19 23       	and	r17, r25
    b4b6:	01 15       	cp	r16, r1
    b4b8:	11 05       	cpc	r17, r1
    b4ba:	91 f5       	brne	.+100    	; 0xb520 <f_read+0x122>
    b4bc:	f7 01       	movw	r30, r14
    b4be:	41 15       	cp	r20, r1
    b4c0:	51 05       	cpc	r21, r1
    b4c2:	61 05       	cpc	r22, r1
    b4c4:	71 05       	cpc	r23, r1
    b4c6:	29 f4       	brne	.+10     	; 0xb4d2 <f_read+0xd4>
    b4c8:	66 81       	ldd	r22, Z+6	; 0x06
    b4ca:	77 81       	ldd	r23, Z+7	; 0x07
    b4cc:	80 85       	ldd	r24, Z+8	; 0x08
    b4ce:	91 85       	ldd	r25, Z+9	; 0x09
    b4d0:	11 c0       	rjmp	.+34     	; 0xb4f4 <f_read+0xf6>
    b4d2:	82 a1       	ldd	r24, Z+34	; 0x22
    b4d4:	93 a1       	ldd	r25, Z+35	; 0x23
    b4d6:	89 2b       	or	r24, r25
    b4d8:	21 f0       	breq	.+8      	; 0xb4e2 <f_read+0xe4>
    b4da:	c7 01       	movw	r24, r14
    b4dc:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <clmt_clust>
    b4e0:	09 c0       	rjmp	.+18     	; 0xb4f4 <f_read+0xf6>
    b4e2:	f7 01       	movw	r30, r14
    b4e4:	44 89       	ldd	r20, Z+20	; 0x14
    b4e6:	55 89       	ldd	r21, Z+21	; 0x15
    b4e8:	66 89       	ldd	r22, Z+22	; 0x16
    b4ea:	77 89       	ldd	r23, Z+23	; 0x17
    b4ec:	80 81       	ld	r24, Z
    b4ee:	91 81       	ldd	r25, Z+1	; 0x01
    b4f0:	0e 94 e0 4d 	call	0x9bc0	; 0x9bc0 <get_fat.isra.10>
    b4f4:	62 30       	cpi	r22, 0x02	; 2
    b4f6:	71 05       	cpc	r23, r1
    b4f8:	81 05       	cpc	r24, r1
    b4fa:	91 05       	cpc	r25, r1
    b4fc:	10 f4       	brcc	.+4      	; 0xb502 <f_read+0x104>
    b4fe:	82 e0       	ldi	r24, 0x02	; 2
    b500:	07 c0       	rjmp	.+14     	; 0xb510 <f_read+0x112>
    b502:	6f 3f       	cpi	r22, 0xFF	; 255
    b504:	ff ef       	ldi	r31, 0xFF	; 255
    b506:	7f 07       	cpc	r23, r31
    b508:	8f 07       	cpc	r24, r31
    b50a:	9f 07       	cpc	r25, r31
    b50c:	21 f4       	brne	.+8      	; 0xb516 <f_read+0x118>
    b50e:	81 e0       	ldi	r24, 0x01	; 1
    b510:	f7 01       	movw	r30, r14
    b512:	87 87       	std	Z+15, r24	; 0x0f
    b514:	ba c0       	rjmp	.+372    	; 0xb68a <f_read+0x28c>
    b516:	f7 01       	movw	r30, r14
    b518:	64 8b       	std	Z+20, r22	; 0x14
    b51a:	75 8b       	std	Z+21, r23	; 0x15
    b51c:	86 8b       	std	Z+22, r24	; 0x16
    b51e:	97 8b       	std	Z+23, r25	; 0x17
    b520:	89 81       	ldd	r24, Y+1	; 0x01
    b522:	9a 81       	ldd	r25, Y+2	; 0x02
    b524:	9c 83       	std	Y+4, r25	; 0x04
    b526:	8b 83       	std	Y+3, r24	; 0x03
    b528:	f7 01       	movw	r30, r14
    b52a:	44 89       	ldd	r20, Z+20	; 0x14
    b52c:	55 89       	ldd	r21, Z+21	; 0x15
    b52e:	66 89       	ldd	r22, Z+22	; 0x16
    b530:	77 89       	ldd	r23, Z+23	; 0x17
    b532:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    b536:	61 15       	cp	r22, r1
    b538:	71 05       	cpc	r23, r1
    b53a:	81 05       	cpc	r24, r1
    b53c:	91 05       	cpc	r25, r1
    b53e:	f9 f2       	breq	.-66     	; 0xb4fe <f_read+0x100>
    b540:	2b 01       	movw	r4, r22
    b542:	3c 01       	movw	r6, r24
    b544:	40 0e       	add	r4, r16
    b546:	51 1e       	adc	r5, r17
    b548:	61 1c       	adc	r6, r1
    b54a:	71 1c       	adc	r7, r1
    b54c:	65 01       	movw	r12, r10
    b54e:	cd 2c       	mov	r12, r13
    b550:	dd 24       	eor	r13, r13
    b552:	c6 94       	lsr	r12
    b554:	c1 14       	cp	r12, r1
    b556:	d1 04       	cpc	r13, r1
    b558:	d1 f1       	breq	.+116    	; 0xb5ce <f_read+0x1d0>
    b55a:	eb 81       	ldd	r30, Y+3	; 0x03
    b55c:	fc 81       	ldd	r31, Y+4	; 0x04
    b55e:	81 85       	ldd	r24, Z+9	; 0x09
    b560:	92 85       	ldd	r25, Z+10	; 0x0a
    b562:	98 01       	movw	r18, r16
    b564:	2c 0d       	add	r18, r12
    b566:	3d 1d       	adc	r19, r13
    b568:	82 17       	cp	r24, r18
    b56a:	93 07       	cpc	r25, r19
    b56c:	18 f4       	brcc	.+6      	; 0xb574 <f_read+0x176>
    b56e:	6c 01       	movw	r12, r24
    b570:	c0 1a       	sub	r12, r16
    b572:	d1 0a       	sbc	r13, r17
    b574:	86 01       	movw	r16, r12
    b576:	a3 01       	movw	r20, r6
    b578:	92 01       	movw	r18, r4
    b57a:	b4 01       	movw	r22, r8
    b57c:	eb 81       	ldd	r30, Y+3	; 0x03
    b57e:	fc 81       	ldd	r31, Y+4	; 0x04
    b580:	81 81       	ldd	r24, Z+1	; 0x01
    b582:	0e 94 59 68 	call	0xd0b2	; 0xd0b2 <disk_read>
    b586:	89 2b       	or	r24, r25
    b588:	11 f6       	brne	.-124    	; 0xb50e <f_read+0x110>
    b58a:	f7 01       	movw	r30, r14
    b58c:	86 85       	ldd	r24, Z+14	; 0x0e
    b58e:	87 ff       	sbrs	r24, 7
    b590:	1a c0       	rjmp	.+52     	; 0xb5c6 <f_read+0x1c8>
    b592:	80 8d       	ldd	r24, Z+24	; 0x18
    b594:	91 8d       	ldd	r25, Z+25	; 0x19
    b596:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b598:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b59a:	84 19       	sub	r24, r4
    b59c:	95 09       	sbc	r25, r5
    b59e:	a6 09       	sbc	r26, r6
    b5a0:	b7 09       	sbc	r27, r7
    b5a2:	a6 01       	movw	r20, r12
    b5a4:	60 e0       	ldi	r22, 0x00	; 0
    b5a6:	70 e0       	ldi	r23, 0x00	; 0
    b5a8:	84 17       	cp	r24, r20
    b5aa:	95 07       	cpc	r25, r21
    b5ac:	a6 07       	cpc	r26, r22
    b5ae:	b7 07       	cpc	r27, r23
    b5b0:	50 f4       	brcc	.+20     	; 0xb5c6 <f_read+0x1c8>
    b5b2:	98 2f       	mov	r25, r24
    b5b4:	88 27       	eor	r24, r24
    b5b6:	99 0f       	add	r25, r25
    b5b8:	40 e0       	ldi	r20, 0x00	; 0
    b5ba:	52 e0       	ldi	r21, 0x02	; 2
    b5bc:	b1 01       	movw	r22, r2
    b5be:	88 0d       	add	r24, r8
    b5c0:	99 1d       	adc	r25, r9
    b5c2:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    b5c6:	dc 2c       	mov	r13, r12
    b5c8:	cc 24       	eor	r12, r12
    b5ca:	dd 0c       	add	r13, r13
    b5cc:	41 c0       	rjmp	.+130    	; 0xb650 <f_read+0x252>
    b5ce:	f7 01       	movw	r30, r14
    b5d0:	20 8d       	ldd	r18, Z+24	; 0x18
    b5d2:	31 8d       	ldd	r19, Z+25	; 0x19
    b5d4:	42 8d       	ldd	r20, Z+26	; 0x1a
    b5d6:	53 8d       	ldd	r21, Z+27	; 0x1b
    b5d8:	42 16       	cp	r4, r18
    b5da:	53 06       	cpc	r5, r19
    b5dc:	64 06       	cpc	r6, r20
    b5de:	75 06       	cpc	r7, r21
    b5e0:	f9 f0       	breq	.+62     	; 0xb620 <f_read+0x222>
    b5e2:	86 85       	ldd	r24, Z+14	; 0x0e
    b5e4:	87 ff       	sbrs	r24, 7
    b5e6:	0f c0       	rjmp	.+30     	; 0xb606 <f_read+0x208>
    b5e8:	01 e0       	ldi	r16, 0x01	; 1
    b5ea:	10 e0       	ldi	r17, 0x00	; 0
    b5ec:	b1 01       	movw	r22, r2
    b5ee:	eb 81       	ldd	r30, Y+3	; 0x03
    b5f0:	fc 81       	ldd	r31, Y+4	; 0x04
    b5f2:	81 81       	ldd	r24, Z+1	; 0x01
    b5f4:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    b5f8:	89 2b       	or	r24, r25
    b5fa:	09 f0       	breq	.+2      	; 0xb5fe <f_read+0x200>
    b5fc:	88 cf       	rjmp	.-240    	; 0xb50e <f_read+0x110>
    b5fe:	f7 01       	movw	r30, r14
    b600:	86 85       	ldd	r24, Z+14	; 0x0e
    b602:	8f 77       	andi	r24, 0x7F	; 127
    b604:	86 87       	std	Z+14, r24	; 0x0e
    b606:	e9 81       	ldd	r30, Y+1	; 0x01
    b608:	fa 81       	ldd	r31, Y+2	; 0x02
    b60a:	01 e0       	ldi	r16, 0x01	; 1
    b60c:	10 e0       	ldi	r17, 0x00	; 0
    b60e:	a3 01       	movw	r20, r6
    b610:	92 01       	movw	r18, r4
    b612:	b1 01       	movw	r22, r2
    b614:	81 81       	ldd	r24, Z+1	; 0x01
    b616:	0e 94 59 68 	call	0xd0b2	; 0xd0b2 <disk_read>
    b61a:	89 2b       	or	r24, r25
    b61c:	09 f0       	breq	.+2      	; 0xb620 <f_read+0x222>
    b61e:	77 cf       	rjmp	.-274    	; 0xb50e <f_read+0x110>
    b620:	f7 01       	movw	r30, r14
    b622:	40 8e       	std	Z+24, r4	; 0x18
    b624:	51 8e       	std	Z+25, r5	; 0x19
    b626:	62 8e       	std	Z+26, r6	; 0x1a
    b628:	73 8e       	std	Z+27, r7	; 0x1b
    b62a:	f7 01       	movw	r30, r14
    b62c:	60 89       	ldd	r22, Z+16	; 0x10
    b62e:	71 89       	ldd	r23, Z+17	; 0x11
    b630:	71 70       	andi	r23, 0x01	; 1
    b632:	80 e0       	ldi	r24, 0x00	; 0
    b634:	92 e0       	ldi	r25, 0x02	; 2
    b636:	86 1b       	sub	r24, r22
    b638:	97 0b       	sbc	r25, r23
    b63a:	65 01       	movw	r12, r10
    b63c:	8a 15       	cp	r24, r10
    b63e:	9b 05       	cpc	r25, r11
    b640:	08 f4       	brcc	.+2      	; 0xb644 <f_read+0x246>
    b642:	6c 01       	movw	r12, r24
    b644:	62 0d       	add	r22, r2
    b646:	73 1d       	adc	r23, r3
    b648:	a6 01       	movw	r20, r12
    b64a:	c4 01       	movw	r24, r8
    b64c:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    b650:	ac 18       	sub	r10, r12
    b652:	bd 08       	sbc	r11, r13
    b654:	ed 81       	ldd	r30, Y+5	; 0x05
    b656:	fe 81       	ldd	r31, Y+6	; 0x06
    b658:	80 81       	ld	r24, Z
    b65a:	91 81       	ldd	r25, Z+1	; 0x01
    b65c:	8c 0d       	add	r24, r12
    b65e:	9d 1d       	adc	r25, r13
    b660:	91 83       	std	Z+1, r25	; 0x01
    b662:	80 83       	st	Z, r24
    b664:	8c 0c       	add	r8, r12
    b666:	9d 1c       	adc	r9, r13
    b668:	f7 01       	movw	r30, r14
    b66a:	80 89       	ldd	r24, Z+16	; 0x10
    b66c:	91 89       	ldd	r25, Z+17	; 0x11
    b66e:	a2 89       	ldd	r26, Z+18	; 0x12
    b670:	b3 89       	ldd	r27, Z+19	; 0x13
    b672:	8c 0d       	add	r24, r12
    b674:	9d 1d       	adc	r25, r13
    b676:	a1 1d       	adc	r26, r1
    b678:	b1 1d       	adc	r27, r1
    b67a:	80 8b       	std	Z+16, r24	; 0x10
    b67c:	91 8b       	std	Z+17, r25	; 0x11
    b67e:	a2 8b       	std	Z+18, r26	; 0x12
    b680:	b3 8b       	std	Z+19, r27	; 0x13
    b682:	f5 ce       	rjmp	.-534    	; 0xb46e <f_read+0x70>
    b684:	80 e0       	ldi	r24, 0x00	; 0
    b686:	01 c0       	rjmp	.+2      	; 0xb68a <f_read+0x28c>
    b688:	87 e0       	ldi	r24, 0x07	; 7
    b68a:	90 e0       	ldi	r25, 0x00	; 0
    b68c:	26 96       	adiw	r28, 0x06	; 6
    b68e:	e2 e1       	ldi	r30, 0x12	; 18
    b690:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000b694 <f_write>:
    b694:	a8 e0       	ldi	r26, 0x08	; 8
    b696:	b0 e0       	ldi	r27, 0x00	; 0
    b698:	e0 e5       	ldi	r30, 0x50	; 80
    b69a:	fb e5       	ldi	r31, 0x5B	; 91
    b69c:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    b6a0:	7c 01       	movw	r14, r24
    b6a2:	3b 01       	movw	r6, r22
    b6a4:	5a 01       	movw	r10, r20
    b6a6:	38 87       	std	Y+8, r19	; 0x08
    b6a8:	2f 83       	std	Y+7, r18	; 0x07
    b6aa:	f9 01       	movw	r30, r18
    b6ac:	11 82       	std	Z+1, r1	; 0x01
    b6ae:	10 82       	st	Z, r1
    b6b0:	be 01       	movw	r22, r28
    b6b2:	6f 5f       	subi	r22, 0xFF	; 255
    b6b4:	7f 4f       	sbci	r23, 0xFF	; 255
    b6b6:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    b6ba:	00 97       	sbiw	r24, 0x00	; 0
    b6bc:	09 f0       	breq	.+2      	; 0xb6c0 <f_write+0x2c>
    b6be:	7d c1       	rjmp	.+762    	; 0xb9ba <f_write+0x326>
    b6c0:	f7 01       	movw	r30, r14
    b6c2:	87 85       	ldd	r24, Z+15	; 0x0f
    b6c4:	90 e0       	ldi	r25, 0x00	; 0
    b6c6:	00 97       	sbiw	r24, 0x00	; 0
    b6c8:	09 f0       	breq	.+2      	; 0xb6cc <f_write+0x38>
    b6ca:	77 c1       	rjmp	.+750    	; 0xb9ba <f_write+0x326>
    b6cc:	86 85       	ldd	r24, Z+14	; 0x0e
    b6ce:	81 ff       	sbrs	r24, 1
    b6d0:	72 c1       	rjmp	.+740    	; 0xb9b6 <f_write+0x322>
    b6d2:	80 89       	ldd	r24, Z+16	; 0x10
    b6d4:	91 89       	ldd	r25, Z+17	; 0x11
    b6d6:	a2 89       	ldd	r26, Z+18	; 0x12
    b6d8:	b3 89       	ldd	r27, Z+19	; 0x13
    b6da:	ac 01       	movw	r20, r24
    b6dc:	bd 01       	movw	r22, r26
    b6de:	4a 0d       	add	r20, r10
    b6e0:	5b 1d       	adc	r21, r11
    b6e2:	61 1d       	adc	r22, r1
    b6e4:	71 1d       	adc	r23, r1
    b6e6:	48 17       	cp	r20, r24
    b6e8:	59 07       	cpc	r21, r25
    b6ea:	6a 07       	cpc	r22, r26
    b6ec:	7b 07       	cpc	r23, r27
    b6ee:	18 f4       	brcc	.+6      	; 0xb6f6 <f_write+0x62>
    b6f0:	5c 01       	movw	r10, r24
    b6f2:	a0 94       	com	r10
    b6f4:	b0 94       	com	r11
    b6f6:	97 01       	movw	r18, r14
    b6f8:	2c 5d       	subi	r18, 0xDC	; 220
    b6fa:	3f 4f       	sbci	r19, 0xFF	; 255
    b6fc:	3e 83       	std	Y+6, r19	; 0x06
    b6fe:	2d 83       	std	Y+5, r18	; 0x05
    b700:	a1 14       	cp	r10, r1
    b702:	b1 04       	cpc	r11, r1
    b704:	09 f4       	brne	.+2      	; 0xb708 <f_write+0x74>
    b706:	4d c0       	rjmp	.+154    	; 0xb7a2 <f_write+0x10e>
    b708:	f7 01       	movw	r30, r14
    b70a:	40 89       	ldd	r20, Z+16	; 0x10
    b70c:	51 89       	ldd	r21, Z+17	; 0x11
    b70e:	62 89       	ldd	r22, Z+18	; 0x12
    b710:	73 89       	ldd	r23, Z+19	; 0x13
    b712:	db 01       	movw	r26, r22
    b714:	ca 01       	movw	r24, r20
    b716:	91 70       	andi	r25, 0x01	; 1
    b718:	aa 27       	eor	r26, r26
    b71a:	bb 27       	eor	r27, r27
    b71c:	89 2b       	or	r24, r25
    b71e:	8a 2b       	or	r24, r26
    b720:	8b 2b       	or	r24, r27
    b722:	09 f0       	breq	.+2      	; 0xb726 <f_write+0x92>
    b724:	05 c1       	rjmp	.+522    	; 0xb930 <f_write+0x29c>
    b726:	e9 81       	ldd	r30, Y+1	; 0x01
    b728:	fa 81       	ldd	r31, Y+2	; 0x02
    b72a:	81 84       	ldd	r8, Z+9	; 0x09
    b72c:	92 84       	ldd	r9, Z+10	; 0x0a
    b72e:	f1 e0       	ldi	r31, 0x01	; 1
    b730:	8f 1a       	sub	r8, r31
    b732:	91 08       	sbc	r9, r1
    b734:	db 01       	movw	r26, r22
    b736:	ca 01       	movw	r24, r20
    b738:	e9 e0       	ldi	r30, 0x09	; 9
    b73a:	b6 95       	lsr	r27
    b73c:	a7 95       	ror	r26
    b73e:	97 95       	ror	r25
    b740:	87 95       	ror	r24
    b742:	ea 95       	dec	r30
    b744:	d1 f7       	brne	.-12     	; 0xb73a <f_write+0xa6>
    b746:	88 22       	and	r8, r24
    b748:	99 22       	and	r9, r25
    b74a:	81 14       	cp	r8, r1
    b74c:	91 04       	cpc	r9, r1
    b74e:	09 f0       	breq	.+2      	; 0xb752 <f_write+0xbe>
    b750:	51 c0       	rjmp	.+162    	; 0xb7f4 <f_write+0x160>
    b752:	f7 01       	movw	r30, r14
    b754:	41 15       	cp	r20, r1
    b756:	51 05       	cpc	r21, r1
    b758:	61 05       	cpc	r22, r1
    b75a:	71 05       	cpc	r23, r1
    b75c:	69 f4       	brne	.+26     	; 0xb778 <f_write+0xe4>
    b75e:	66 81       	ldd	r22, Z+6	; 0x06
    b760:	77 81       	ldd	r23, Z+7	; 0x07
    b762:	80 85       	ldd	r24, Z+8	; 0x08
    b764:	91 85       	ldd	r25, Z+9	; 0x09
    b766:	61 15       	cp	r22, r1
    b768:	71 05       	cpc	r23, r1
    b76a:	81 05       	cpc	r24, r1
    b76c:	91 05       	cpc	r25, r1
    b76e:	f9 f4       	brne	.+62     	; 0xb7ae <f_write+0x11a>
    b770:	40 e0       	ldi	r20, 0x00	; 0
    b772:	50 e0       	ldi	r21, 0x00	; 0
    b774:	ba 01       	movw	r22, r20
    b776:	0d c0       	rjmp	.+26     	; 0xb792 <f_write+0xfe>
    b778:	82 a1       	ldd	r24, Z+34	; 0x22
    b77a:	93 a1       	ldd	r25, Z+35	; 0x23
    b77c:	89 2b       	or	r24, r25
    b77e:	21 f0       	breq	.+8      	; 0xb788 <f_write+0xf4>
    b780:	c7 01       	movw	r24, r14
    b782:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <clmt_clust>
    b786:	08 c0       	rjmp	.+16     	; 0xb798 <f_write+0x104>
    b788:	f7 01       	movw	r30, r14
    b78a:	44 89       	ldd	r20, Z+20	; 0x14
    b78c:	55 89       	ldd	r21, Z+21	; 0x15
    b78e:	66 89       	ldd	r22, Z+22	; 0x16
    b790:	77 89       	ldd	r23, Z+23	; 0x17
    b792:	c7 01       	movw	r24, r14
    b794:	0e 94 55 4f 	call	0x9eaa	; 0x9eaa <create_chain>
    b798:	61 15       	cp	r22, r1
    b79a:	71 05       	cpc	r23, r1
    b79c:	81 05       	cpc	r24, r1
    b79e:	91 05       	cpc	r25, r1
    b7a0:	31 f4       	brne	.+12     	; 0xb7ae <f_write+0x11a>
    b7a2:	f7 01       	movw	r30, r14
    b7a4:	86 85       	ldd	r24, Z+14	; 0x0e
    b7a6:	80 64       	ori	r24, 0x40	; 64
    b7a8:	86 87       	std	Z+14, r24	; 0x0e
    b7aa:	80 e0       	ldi	r24, 0x00	; 0
    b7ac:	05 c1       	rjmp	.+522    	; 0xb9b8 <f_write+0x324>
    b7ae:	61 30       	cpi	r22, 0x01	; 1
    b7b0:	71 05       	cpc	r23, r1
    b7b2:	81 05       	cpc	r24, r1
    b7b4:	91 05       	cpc	r25, r1
    b7b6:	11 f4       	brne	.+4      	; 0xb7bc <f_write+0x128>
    b7b8:	82 e0       	ldi	r24, 0x02	; 2
    b7ba:	07 c0       	rjmp	.+14     	; 0xb7ca <f_write+0x136>
    b7bc:	6f 3f       	cpi	r22, 0xFF	; 255
    b7be:	ff ef       	ldi	r31, 0xFF	; 255
    b7c0:	7f 07       	cpc	r23, r31
    b7c2:	8f 07       	cpc	r24, r31
    b7c4:	9f 07       	cpc	r25, r31
    b7c6:	21 f4       	brne	.+8      	; 0xb7d0 <f_write+0x13c>
    b7c8:	81 e0       	ldi	r24, 0x01	; 1
    b7ca:	f7 01       	movw	r30, r14
    b7cc:	87 87       	std	Z+15, r24	; 0x0f
    b7ce:	f4 c0       	rjmp	.+488    	; 0xb9b8 <f_write+0x324>
    b7d0:	f7 01       	movw	r30, r14
    b7d2:	64 8b       	std	Z+20, r22	; 0x14
    b7d4:	75 8b       	std	Z+21, r23	; 0x15
    b7d6:	86 8b       	std	Z+22, r24	; 0x16
    b7d8:	97 8b       	std	Z+23, r25	; 0x17
    b7da:	06 81       	ldd	r16, Z+6	; 0x06
    b7dc:	17 81       	ldd	r17, Z+7	; 0x07
    b7de:	20 85       	ldd	r18, Z+8	; 0x08
    b7e0:	31 85       	ldd	r19, Z+9	; 0x09
    b7e2:	01 15       	cp	r16, r1
    b7e4:	11 05       	cpc	r17, r1
    b7e6:	21 05       	cpc	r18, r1
    b7e8:	31 05       	cpc	r19, r1
    b7ea:	21 f4       	brne	.+8      	; 0xb7f4 <f_write+0x160>
    b7ec:	66 83       	std	Z+6, r22	; 0x06
    b7ee:	77 83       	std	Z+7, r23	; 0x07
    b7f0:	80 87       	std	Z+8, r24	; 0x08
    b7f2:	91 87       	std	Z+9, r25	; 0x09
    b7f4:	f7 01       	movw	r30, r14
    b7f6:	86 85       	ldd	r24, Z+14	; 0x0e
    b7f8:	87 ff       	sbrs	r24, 7
    b7fa:	13 c0       	rjmp	.+38     	; 0xb822 <f_write+0x18e>
    b7fc:	20 8d       	ldd	r18, Z+24	; 0x18
    b7fe:	31 8d       	ldd	r19, Z+25	; 0x19
    b800:	42 8d       	ldd	r20, Z+26	; 0x1a
    b802:	53 8d       	ldd	r21, Z+27	; 0x1b
    b804:	e9 81       	ldd	r30, Y+1	; 0x01
    b806:	fa 81       	ldd	r31, Y+2	; 0x02
    b808:	01 e0       	ldi	r16, 0x01	; 1
    b80a:	10 e0       	ldi	r17, 0x00	; 0
    b80c:	6d 81       	ldd	r22, Y+5	; 0x05
    b80e:	7e 81       	ldd	r23, Y+6	; 0x06
    b810:	81 81       	ldd	r24, Z+1	; 0x01
    b812:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    b816:	89 2b       	or	r24, r25
    b818:	b9 f6       	brne	.-82     	; 0xb7c8 <f_write+0x134>
    b81a:	f7 01       	movw	r30, r14
    b81c:	86 85       	ldd	r24, Z+14	; 0x0e
    b81e:	8f 77       	andi	r24, 0x7F	; 127
    b820:	86 87       	std	Z+14, r24	; 0x0e
    b822:	29 81       	ldd	r18, Y+1	; 0x01
    b824:	3a 81       	ldd	r19, Y+2	; 0x02
    b826:	3c 83       	std	Y+4, r19	; 0x04
    b828:	2b 83       	std	Y+3, r18	; 0x03
    b82a:	f7 01       	movw	r30, r14
    b82c:	44 89       	ldd	r20, Z+20	; 0x14
    b82e:	55 89       	ldd	r21, Z+21	; 0x15
    b830:	66 89       	ldd	r22, Z+22	; 0x16
    b832:	77 89       	ldd	r23, Z+23	; 0x17
    b834:	c9 01       	movw	r24, r18
    b836:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    b83a:	61 15       	cp	r22, r1
    b83c:	71 05       	cpc	r23, r1
    b83e:	81 05       	cpc	r24, r1
    b840:	91 05       	cpc	r25, r1
    b842:	09 f4       	brne	.+2      	; 0xb846 <f_write+0x1b2>
    b844:	b9 cf       	rjmp	.-142    	; 0xb7b8 <f_write+0x124>
    b846:	1b 01       	movw	r2, r22
    b848:	2c 01       	movw	r4, r24
    b84a:	28 0c       	add	r2, r8
    b84c:	39 1c       	adc	r3, r9
    b84e:	41 1c       	adc	r4, r1
    b850:	51 1c       	adc	r5, r1
    b852:	65 01       	movw	r12, r10
    b854:	cd 2c       	mov	r12, r13
    b856:	dd 24       	eor	r13, r13
    b858:	c6 94       	lsr	r12
    b85a:	c1 14       	cp	r12, r1
    b85c:	d1 04       	cpc	r13, r1
    b85e:	f1 f1       	breq	.+124    	; 0xb8dc <f_write+0x248>
    b860:	eb 81       	ldd	r30, Y+3	; 0x03
    b862:	fc 81       	ldd	r31, Y+4	; 0x04
    b864:	81 85       	ldd	r24, Z+9	; 0x09
    b866:	92 85       	ldd	r25, Z+10	; 0x0a
    b868:	94 01       	movw	r18, r8
    b86a:	2c 0d       	add	r18, r12
    b86c:	3d 1d       	adc	r19, r13
    b86e:	82 17       	cp	r24, r18
    b870:	93 07       	cpc	r25, r19
    b872:	18 f4       	brcc	.+6      	; 0xb87a <f_write+0x1e6>
    b874:	6c 01       	movw	r12, r24
    b876:	c8 18       	sub	r12, r8
    b878:	d9 08       	sbc	r13, r9
    b87a:	86 01       	movw	r16, r12
    b87c:	a2 01       	movw	r20, r4
    b87e:	91 01       	movw	r18, r2
    b880:	b3 01       	movw	r22, r6
    b882:	eb 81       	ldd	r30, Y+3	; 0x03
    b884:	fc 81       	ldd	r31, Y+4	; 0x04
    b886:	81 81       	ldd	r24, Z+1	; 0x01
    b888:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    b88c:	89 2b       	or	r24, r25
    b88e:	09 f0       	breq	.+2      	; 0xb892 <f_write+0x1fe>
    b890:	9b cf       	rjmp	.-202    	; 0xb7c8 <f_write+0x134>
    b892:	f7 01       	movw	r30, r14
    b894:	80 8d       	ldd	r24, Z+24	; 0x18
    b896:	91 8d       	ldd	r25, Z+25	; 0x19
    b898:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b89a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b89c:	82 19       	sub	r24, r2
    b89e:	93 09       	sbc	r25, r3
    b8a0:	a4 09       	sbc	r26, r4
    b8a2:	b5 09       	sbc	r27, r5
    b8a4:	a6 01       	movw	r20, r12
    b8a6:	60 e0       	ldi	r22, 0x00	; 0
    b8a8:	70 e0       	ldi	r23, 0x00	; 0
    b8aa:	84 17       	cp	r24, r20
    b8ac:	95 07       	cpc	r25, r21
    b8ae:	a6 07       	cpc	r26, r22
    b8b0:	b7 07       	cpc	r27, r23
    b8b2:	80 f4       	brcc	.+32     	; 0xb8d4 <f_write+0x240>
    b8b4:	98 2f       	mov	r25, r24
    b8b6:	88 27       	eor	r24, r24
    b8b8:	99 0f       	add	r25, r25
    b8ba:	b3 01       	movw	r22, r6
    b8bc:	68 0f       	add	r22, r24
    b8be:	79 1f       	adc	r23, r25
    b8c0:	40 e0       	ldi	r20, 0x00	; 0
    b8c2:	52 e0       	ldi	r21, 0x02	; 2
    b8c4:	8d 81       	ldd	r24, Y+5	; 0x05
    b8c6:	9e 81       	ldd	r25, Y+6	; 0x06
    b8c8:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    b8cc:	f7 01       	movw	r30, r14
    b8ce:	86 85       	ldd	r24, Z+14	; 0x0e
    b8d0:	8f 77       	andi	r24, 0x7F	; 127
    b8d2:	86 87       	std	Z+14, r24	; 0x0e
    b8d4:	dc 2c       	mov	r13, r12
    b8d6:	cc 24       	eor	r12, r12
    b8d8:	dd 0c       	add	r13, r13
    b8da:	43 c0       	rjmp	.+134    	; 0xb962 <f_write+0x2ce>
    b8dc:	f7 01       	movw	r30, r14
    b8de:	80 8d       	ldd	r24, Z+24	; 0x18
    b8e0:	91 8d       	ldd	r25, Z+25	; 0x19
    b8e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b8e4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b8e6:	28 16       	cp	r2, r24
    b8e8:	39 06       	cpc	r3, r25
    b8ea:	4a 06       	cpc	r4, r26
    b8ec:	5b 06       	cpc	r5, r27
    b8ee:	d9 f0       	breq	.+54     	; 0xb926 <f_write+0x292>
    b8f0:	40 89       	ldd	r20, Z+16	; 0x10
    b8f2:	51 89       	ldd	r21, Z+17	; 0x11
    b8f4:	62 89       	ldd	r22, Z+18	; 0x12
    b8f6:	73 89       	ldd	r23, Z+19	; 0x13
    b8f8:	82 85       	ldd	r24, Z+10	; 0x0a
    b8fa:	93 85       	ldd	r25, Z+11	; 0x0b
    b8fc:	a4 85       	ldd	r26, Z+12	; 0x0c
    b8fe:	b5 85       	ldd	r27, Z+13	; 0x0d
    b900:	48 17       	cp	r20, r24
    b902:	59 07       	cpc	r21, r25
    b904:	6a 07       	cpc	r22, r26
    b906:	7b 07       	cpc	r23, r27
    b908:	70 f4       	brcc	.+28     	; 0xb926 <f_write+0x292>
    b90a:	01 e0       	ldi	r16, 0x01	; 1
    b90c:	10 e0       	ldi	r17, 0x00	; 0
    b90e:	a2 01       	movw	r20, r4
    b910:	91 01       	movw	r18, r2
    b912:	6d 81       	ldd	r22, Y+5	; 0x05
    b914:	7e 81       	ldd	r23, Y+6	; 0x06
    b916:	eb 81       	ldd	r30, Y+3	; 0x03
    b918:	fc 81       	ldd	r31, Y+4	; 0x04
    b91a:	81 81       	ldd	r24, Z+1	; 0x01
    b91c:	0e 94 59 68 	call	0xd0b2	; 0xd0b2 <disk_read>
    b920:	89 2b       	or	r24, r25
    b922:	09 f0       	breq	.+2      	; 0xb926 <f_write+0x292>
    b924:	51 cf       	rjmp	.-350    	; 0xb7c8 <f_write+0x134>
    b926:	f7 01       	movw	r30, r14
    b928:	20 8e       	std	Z+24, r2	; 0x18
    b92a:	31 8e       	std	Z+25, r3	; 0x19
    b92c:	42 8e       	std	Z+26, r4	; 0x1a
    b92e:	53 8e       	std	Z+27, r5	; 0x1b
    b930:	f7 01       	movw	r30, r14
    b932:	80 89       	ldd	r24, Z+16	; 0x10
    b934:	91 89       	ldd	r25, Z+17	; 0x11
    b936:	91 70       	andi	r25, 0x01	; 1
    b938:	20 e0       	ldi	r18, 0x00	; 0
    b93a:	32 e0       	ldi	r19, 0x02	; 2
    b93c:	28 1b       	sub	r18, r24
    b93e:	39 0b       	sbc	r19, r25
    b940:	65 01       	movw	r12, r10
    b942:	2a 15       	cp	r18, r10
    b944:	3b 05       	cpc	r19, r11
    b946:	08 f4       	brcc	.+2      	; 0xb94a <f_write+0x2b6>
    b948:	69 01       	movw	r12, r18
    b94a:	a6 01       	movw	r20, r12
    b94c:	b3 01       	movw	r22, r6
    b94e:	2d 81       	ldd	r18, Y+5	; 0x05
    b950:	3e 81       	ldd	r19, Y+6	; 0x06
    b952:	82 0f       	add	r24, r18
    b954:	93 1f       	adc	r25, r19
    b956:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    b95a:	f7 01       	movw	r30, r14
    b95c:	86 85       	ldd	r24, Z+14	; 0x0e
    b95e:	80 68       	ori	r24, 0x80	; 128
    b960:	86 87       	std	Z+14, r24	; 0x0e
    b962:	ac 18       	sub	r10, r12
    b964:	bd 08       	sbc	r11, r13
    b966:	ef 81       	ldd	r30, Y+7	; 0x07
    b968:	f8 85       	ldd	r31, Y+8	; 0x08
    b96a:	80 81       	ld	r24, Z
    b96c:	91 81       	ldd	r25, Z+1	; 0x01
    b96e:	8c 0d       	add	r24, r12
    b970:	9d 1d       	adc	r25, r13
    b972:	91 83       	std	Z+1, r25	; 0x01
    b974:	80 83       	st	Z, r24
    b976:	6c 0c       	add	r6, r12
    b978:	7d 1c       	adc	r7, r13
    b97a:	f7 01       	movw	r30, r14
    b97c:	80 89       	ldd	r24, Z+16	; 0x10
    b97e:	91 89       	ldd	r25, Z+17	; 0x11
    b980:	a2 89       	ldd	r26, Z+18	; 0x12
    b982:	b3 89       	ldd	r27, Z+19	; 0x13
    b984:	8c 0d       	add	r24, r12
    b986:	9d 1d       	adc	r25, r13
    b988:	a1 1d       	adc	r26, r1
    b98a:	b1 1d       	adc	r27, r1
    b98c:	80 8b       	std	Z+16, r24	; 0x10
    b98e:	91 8b       	std	Z+17, r25	; 0x11
    b990:	a2 8b       	std	Z+18, r26	; 0x12
    b992:	b3 8b       	std	Z+19, r27	; 0x13
    b994:	42 85       	ldd	r20, Z+10	; 0x0a
    b996:	53 85       	ldd	r21, Z+11	; 0x0b
    b998:	64 85       	ldd	r22, Z+12	; 0x0c
    b99a:	75 85       	ldd	r23, Z+13	; 0x0d
    b99c:	48 17       	cp	r20, r24
    b99e:	59 07       	cpc	r21, r25
    b9a0:	6a 07       	cpc	r22, r26
    b9a2:	7b 07       	cpc	r23, r27
    b9a4:	10 f4       	brcc	.+4      	; 0xb9aa <f_write+0x316>
    b9a6:	ac 01       	movw	r20, r24
    b9a8:	bd 01       	movw	r22, r26
    b9aa:	f7 01       	movw	r30, r14
    b9ac:	42 87       	std	Z+10, r20	; 0x0a
    b9ae:	53 87       	std	Z+11, r21	; 0x0b
    b9b0:	64 87       	std	Z+12, r22	; 0x0c
    b9b2:	75 87       	std	Z+13, r23	; 0x0d
    b9b4:	a5 ce       	rjmp	.-694    	; 0xb700 <f_write+0x6c>
    b9b6:	87 e0       	ldi	r24, 0x07	; 7
    b9b8:	90 e0       	ldi	r25, 0x00	; 0
    b9ba:	28 96       	adiw	r28, 0x08	; 8
    b9bc:	e2 e1       	ldi	r30, 0x12	; 18
    b9be:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000b9c2 <f_sync>:
    b9c2:	8f 92       	push	r8
    b9c4:	9f 92       	push	r9
    b9c6:	af 92       	push	r10
    b9c8:	bf 92       	push	r11
    b9ca:	ef 92       	push	r14
    b9cc:	ff 92       	push	r15
    b9ce:	0f 93       	push	r16
    b9d0:	1f 93       	push	r17
    b9d2:	cf 93       	push	r28
    b9d4:	df 93       	push	r29
    b9d6:	00 d0       	rcall	.+0      	; 0xb9d8 <f_sync+0x16>
    b9d8:	cd b7       	in	r28, 0x3d	; 61
    b9da:	de b7       	in	r29, 0x3e	; 62
    b9dc:	7c 01       	movw	r14, r24
    b9de:	be 01       	movw	r22, r28
    b9e0:	6f 5f       	subi	r22, 0xFF	; 255
    b9e2:	7f 4f       	sbci	r23, 0xFF	; 255
    b9e4:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    b9e8:	00 97       	sbiw	r24, 0x00	; 0
    b9ea:	09 f0       	breq	.+2      	; 0xb9ee <f_sync+0x2c>
    b9ec:	5d c0       	rjmp	.+186    	; 0xbaa8 <f_sync+0xe6>
    b9ee:	f7 01       	movw	r30, r14
    b9f0:	86 85       	ldd	r24, Z+14	; 0x0e
    b9f2:	86 ff       	sbrs	r24, 6
    b9f4:	55 c0       	rjmp	.+170    	; 0xbaa0 <f_sync+0xde>
    b9f6:	87 ff       	sbrs	r24, 7
    b9f8:	15 c0       	rjmp	.+42     	; 0xba24 <f_sync+0x62>
    b9fa:	20 8d       	ldd	r18, Z+24	; 0x18
    b9fc:	31 8d       	ldd	r19, Z+25	; 0x19
    b9fe:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba00:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba02:	e9 81       	ldd	r30, Y+1	; 0x01
    ba04:	fa 81       	ldd	r31, Y+2	; 0x02
    ba06:	01 e0       	ldi	r16, 0x01	; 1
    ba08:	10 e0       	ldi	r17, 0x00	; 0
    ba0a:	b7 01       	movw	r22, r14
    ba0c:	6c 5d       	subi	r22, 0xDC	; 220
    ba0e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba10:	81 81       	ldd	r24, Z+1	; 0x01
    ba12:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    ba16:	89 2b       	or	r24, r25
    ba18:	09 f0       	breq	.+2      	; 0xba1c <f_sync+0x5a>
    ba1a:	44 c0       	rjmp	.+136    	; 0xbaa4 <f_sync+0xe2>
    ba1c:	f7 01       	movw	r30, r14
    ba1e:	86 85       	ldd	r24, Z+14	; 0x0e
    ba20:	8f 77       	andi	r24, 0x7F	; 127
    ba22:	86 87       	std	Z+14, r24	; 0x0e
    ba24:	0e 94 0e 6f 	call	0xde1c	; 0xde1c <get_fattime>
    ba28:	4b 01       	movw	r8, r22
    ba2a:	5c 01       	movw	r10, r24
    ba2c:	f7 01       	movw	r30, r14
    ba2e:	44 8d       	ldd	r20, Z+28	; 0x1c
    ba30:	55 8d       	ldd	r21, Z+29	; 0x1d
    ba32:	66 8d       	ldd	r22, Z+30	; 0x1e
    ba34:	77 8d       	ldd	r23, Z+31	; 0x1f
    ba36:	89 81       	ldd	r24, Y+1	; 0x01
    ba38:	9a 81       	ldd	r25, Y+2	; 0x02
    ba3a:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    ba3e:	00 97       	sbiw	r24, 0x00	; 0
    ba40:	99 f5       	brne	.+102    	; 0xbaa8 <f_sync+0xe6>
    ba42:	f7 01       	movw	r30, r14
    ba44:	00 a1       	ldd	r16, Z+32	; 0x20
    ba46:	11 a1       	ldd	r17, Z+33	; 0x21
    ba48:	f8 01       	movw	r30, r16
    ba4a:	83 85       	ldd	r24, Z+11	; 0x0b
    ba4c:	80 62       	ori	r24, 0x20	; 32
    ba4e:	83 87       	std	Z+11, r24	; 0x0b
    ba50:	f7 01       	movw	r30, r14
    ba52:	26 81       	ldd	r18, Z+6	; 0x06
    ba54:	37 81       	ldd	r19, Z+7	; 0x07
    ba56:	40 85       	ldd	r20, Z+8	; 0x08
    ba58:	51 85       	ldd	r21, Z+9	; 0x09
    ba5a:	b8 01       	movw	r22, r16
    ba5c:	80 81       	ld	r24, Z
    ba5e:	91 81       	ldd	r25, Z+1	; 0x01
    ba60:	0e 94 96 48 	call	0x912c	; 0x912c <st_clust.isra.5>
    ba64:	f7 01       	movw	r30, r14
    ba66:	42 85       	ldd	r20, Z+10	; 0x0a
    ba68:	53 85       	ldd	r21, Z+11	; 0x0b
    ba6a:	64 85       	ldd	r22, Z+12	; 0x0c
    ba6c:	75 85       	ldd	r23, Z+13	; 0x0d
    ba6e:	c8 01       	movw	r24, r16
    ba70:	4c 96       	adiw	r24, 0x1c	; 28
    ba72:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
    ba76:	b5 01       	movw	r22, r10
    ba78:	a4 01       	movw	r20, r8
    ba7a:	c8 01       	movw	r24, r16
    ba7c:	46 96       	adiw	r24, 0x16	; 22
    ba7e:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
    ba82:	f8 01       	movw	r30, r16
    ba84:	12 8a       	std	Z+18, r1	; 0x12
    ba86:	13 8a       	std	Z+19, r1	; 0x13
    ba88:	89 81       	ldd	r24, Y+1	; 0x01
    ba8a:	9a 81       	ldd	r25, Y+2	; 0x02
    ba8c:	21 e0       	ldi	r18, 0x01	; 1
    ba8e:	fc 01       	movw	r30, r24
    ba90:	23 83       	std	Z+3, r18	; 0x03
    ba92:	0e 94 f6 48 	call	0x91ec	; 0x91ec <sync_fs>
    ba96:	f7 01       	movw	r30, r14
    ba98:	26 85       	ldd	r18, Z+14	; 0x0e
    ba9a:	2f 7b       	andi	r18, 0xBF	; 191
    ba9c:	26 87       	std	Z+14, r18	; 0x0e
    ba9e:	04 c0       	rjmp	.+8      	; 0xbaa8 <f_sync+0xe6>
    baa0:	80 e0       	ldi	r24, 0x00	; 0
    baa2:	01 c0       	rjmp	.+2      	; 0xbaa6 <f_sync+0xe4>
    baa4:	81 e0       	ldi	r24, 0x01	; 1
    baa6:	90 e0       	ldi	r25, 0x00	; 0
    baa8:	0f 90       	pop	r0
    baaa:	0f 90       	pop	r0
    baac:	df 91       	pop	r29
    baae:	cf 91       	pop	r28
    bab0:	1f 91       	pop	r17
    bab2:	0f 91       	pop	r16
    bab4:	ff 90       	pop	r15
    bab6:	ef 90       	pop	r14
    bab8:	bf 90       	pop	r11
    baba:	af 90       	pop	r10
    babc:	9f 90       	pop	r9
    babe:	8f 90       	pop	r8
    bac0:	08 95       	ret

0000bac2 <f_close>:
    bac2:	a2 e0       	ldi	r26, 0x02	; 2
    bac4:	b0 e0       	ldi	r27, 0x00	; 0
    bac6:	e7 e6       	ldi	r30, 0x67	; 103
    bac8:	fd e5       	ldi	r31, 0x5D	; 93
    baca:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    bace:	8c 01       	movw	r16, r24
    bad0:	78 df       	rcall	.-272    	; 0xb9c2 <f_sync>
    bad2:	00 97       	sbiw	r24, 0x00	; 0
    bad4:	59 f4       	brne	.+22     	; 0xbaec <f_close+0x2a>
    bad6:	be 01       	movw	r22, r28
    bad8:	6f 5f       	subi	r22, 0xFF	; 255
    bada:	7f 4f       	sbci	r23, 0xFF	; 255
    badc:	c8 01       	movw	r24, r16
    bade:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    bae2:	00 97       	sbiw	r24, 0x00	; 0
    bae4:	19 f4       	brne	.+6      	; 0xbaec <f_close+0x2a>
    bae6:	f8 01       	movw	r30, r16
    bae8:	11 82       	std	Z+1, r1	; 0x01
    baea:	10 82       	st	Z, r1
    baec:	22 96       	adiw	r28, 0x02	; 2
    baee:	e4 e0       	ldi	r30, 0x04	; 4
    baf0:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000baf4 <f_chdir>:
    baf4:	a2 e3       	ldi	r26, 0x32	; 50
    baf6:	b0 e0       	ldi	r27, 0x00	; 0
    baf8:	e0 e8       	ldi	r30, 0x80	; 128
    bafa:	fd e5       	ldi	r31, 0x5D	; 93
    bafc:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    bb00:	9a ab       	std	Y+50, r25	; 0x32
    bb02:	89 ab       	std	Y+49, r24	; 0x31
    bb04:	40 e0       	ldi	r20, 0x00	; 0
    bb06:	be 01       	movw	r22, r28
    bb08:	61 5d       	subi	r22, 0xD1	; 209
    bb0a:	7f 4f       	sbci	r23, 0xFF	; 255
    bb0c:	ce 01       	movw	r24, r28
    bb0e:	c1 96       	adiw	r24, 0x31	; 49
    bb10:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    bb14:	00 97       	sbiw	r24, 0x00	; 0
    bb16:	09 f0       	breq	.+2      	; 0xbb1a <f_chdir+0x26>
    bb18:	44 c0       	rjmp	.+136    	; 0xbba2 <f_chdir+0xae>
    bb1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    bb1c:	98 a9       	ldd	r25, Y+48	; 0x30
    bb1e:	9a 83       	std	Y+2, r25	; 0x02
    bb20:	89 83       	std	Y+1, r24	; 0x01
    bb22:	80 e0       	ldi	r24, 0x00	; 0
    bb24:	92 e0       	ldi	r25, 0x02	; 2
    bb26:	0e 94 9d 67 	call	0xcf3a	; 0xcf3a <ff_memalloc>
    bb2a:	7c 01       	movw	r14, r24
    bb2c:	00 97       	sbiw	r24, 0x00	; 0
    bb2e:	a9 f1       	breq	.+106    	; 0xbb9a <f_chdir+0xa6>
    bb30:	ef a5       	ldd	r30, Y+47	; 0x2f
    bb32:	f8 a9       	ldd	r31, Y+48	; 0x30
    bb34:	94 87       	std	Z+12, r25	; 0x0c
    bb36:	83 87       	std	Z+11, r24	; 0x0b
    bb38:	69 a9       	ldd	r22, Y+49	; 0x31
    bb3a:	7a a9       	ldd	r23, Y+50	; 0x32
    bb3c:	ce 01       	movw	r24, r28
    bb3e:	01 96       	adiw	r24, 0x01	; 1
    bb40:	39 d8       	rcall	.-3982   	; 0xabb4 <follow_path>
    bb42:	8c 01       	movw	r16, r24
    bb44:	89 2b       	or	r24, r25
    bb46:	09 f5       	brne	.+66     	; 0xbb8a <f_chdir+0x96>
    bb48:	88 a5       	ldd	r24, Y+40	; 0x28
    bb4a:	87 ff       	sbrs	r24, 7
    bb4c:	0b c0       	rjmp	.+22     	; 0xbb64 <f_chdir+0x70>
    bb4e:	ef a5       	ldd	r30, Y+47	; 0x2f
    bb50:	f8 a9       	ldd	r31, Y+48	; 0x30
    bb52:	8f 81       	ldd	r24, Y+7	; 0x07
    bb54:	98 85       	ldd	r25, Y+8	; 0x08
    bb56:	a9 85       	ldd	r26, Y+9	; 0x09
    bb58:	ba 85       	ldd	r27, Y+10	; 0x0a
    bb5a:	85 8b       	std	Z+21, r24	; 0x15
    bb5c:	96 8b       	std	Z+22, r25	; 0x16
    bb5e:	a7 8b       	std	Z+23, r26	; 0x17
    bb60:	b0 8f       	std	Z+24, r27	; 0x18
    bb62:	13 c0       	rjmp	.+38     	; 0xbb8a <f_chdir+0x96>
    bb64:	8d 81       	ldd	r24, Y+5	; 0x05
    bb66:	84 ff       	sbrs	r24, 4
    bb68:	0e c0       	rjmp	.+28     	; 0xbb86 <f_chdir+0x92>
    bb6a:	cf a4       	ldd	r12, Y+47	; 0x2f
    bb6c:	d8 a8       	ldd	r13, Y+48	; 0x30
    bb6e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bb70:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bb72:	f6 01       	movw	r30, r12
    bb74:	80 81       	ld	r24, Z
    bb76:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    bb7a:	f6 01       	movw	r30, r12
    bb7c:	65 8b       	std	Z+21, r22	; 0x15
    bb7e:	76 8b       	std	Z+22, r23	; 0x16
    bb80:	87 8b       	std	Z+23, r24	; 0x17
    bb82:	90 8f       	std	Z+24, r25	; 0x18
    bb84:	02 c0       	rjmp	.+4      	; 0xbb8a <f_chdir+0x96>
    bb86:	05 e0       	ldi	r16, 0x05	; 5
    bb88:	10 e0       	ldi	r17, 0x00	; 0
    bb8a:	c7 01       	movw	r24, r14
    bb8c:	0e 94 a0 67 	call	0xcf40	; 0xcf40 <ff_memfree>
    bb90:	04 30       	cpi	r16, 0x04	; 4
    bb92:	11 05       	cpc	r17, r1
    bb94:	29 f4       	brne	.+10     	; 0xbba0 <f_chdir+0xac>
    bb96:	85 e0       	ldi	r24, 0x05	; 5
    bb98:	01 c0       	rjmp	.+2      	; 0xbb9c <f_chdir+0xa8>
    bb9a:	81 e1       	ldi	r24, 0x11	; 17
    bb9c:	90 e0       	ldi	r25, 0x00	; 0
    bb9e:	01 c0       	rjmp	.+2      	; 0xbba2 <f_chdir+0xae>
    bba0:	c8 01       	movw	r24, r16
    bba2:	e2 96       	adiw	r28, 0x32	; 50
    bba4:	e8 e0       	ldi	r30, 0x08	; 8
    bba6:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000bbaa <f_getcwd>:
    bbaa:	a8 e4       	ldi	r26, 0x48	; 72
    bbac:	b1 e0       	ldi	r27, 0x01	; 1
    bbae:	eb ed       	ldi	r30, 0xDB	; 219
    bbb0:	fd e5       	ldi	r31, 0x5D	; 93
    bbb2:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    bbb6:	c9 5b       	subi	r28, 0xB9	; 185
    bbb8:	de 4f       	sbci	r29, 0xFE	; 254
    bbba:	99 83       	std	Y+1, r25	; 0x01
    bbbc:	88 83       	st	Y, r24
    bbbe:	c7 54       	subi	r28, 0x47	; 71
    bbc0:	d1 40       	sbci	r29, 0x01	; 1
    bbc2:	4b 01       	movw	r8, r22
    bbc4:	7c 01       	movw	r14, r24
    bbc6:	fc 01       	movw	r30, r24
    bbc8:	10 82       	st	Z, r1
    bbca:	40 e0       	ldi	r20, 0x00	; 0
    bbcc:	be 01       	movw	r22, r28
    bbce:	6b 5b       	subi	r22, 0xBB	; 187
    bbd0:	7e 4f       	sbci	r23, 0xFE	; 254
    bbd2:	ce 01       	movw	r24, r28
    bbd4:	89 5b       	subi	r24, 0xB9	; 185
    bbd6:	9e 4f       	sbci	r25, 0xFE	; 254
    bbd8:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    bbdc:	1c 01       	movw	r2, r24
    bbde:	89 2b       	or	r24, r25
    bbe0:	09 f0       	breq	.+2      	; 0xbbe4 <f_getcwd+0x3a>
    bbe2:	03 c1       	rjmp	.+518    	; 0xbdea <f_getcwd+0x240>
    bbe4:	cb 5b       	subi	r28, 0xBB	; 187
    bbe6:	de 4f       	sbci	r29, 0xFE	; 254
    bbe8:	88 81       	ld	r24, Y
    bbea:	99 81       	ldd	r25, Y+1	; 0x01
    bbec:	c5 54       	subi	r28, 0x45	; 69
    bbee:	d1 40       	sbci	r29, 0x01	; 1
    bbf0:	c9 5e       	subi	r28, 0xE9	; 233
    bbf2:	de 4f       	sbci	r29, 0xFE	; 254
    bbf4:	99 83       	std	Y+1, r25	; 0x01
    bbf6:	88 83       	st	Y, r24
    bbf8:	c7 51       	subi	r28, 0x17	; 23
    bbfa:	d1 40       	sbci	r29, 0x01	; 1
    bbfc:	80 e0       	ldi	r24, 0x00	; 0
    bbfe:	92 e0       	ldi	r25, 0x02	; 2
    bc00:	0e 94 9d 67 	call	0xcf3a	; 0xcf3a <ff_memalloc>
    bc04:	5c 01       	movw	r10, r24
    bc06:	00 97       	sbiw	r24, 0x00	; 0
    bc08:	09 f4       	brne	.+2      	; 0xbc0c <f_getcwd+0x62>
    bc0a:	f3 c0       	rjmp	.+486    	; 0xbdf2 <f_getcwd+0x248>
    bc0c:	cb 5b       	subi	r28, 0xBB	; 187
    bc0e:	de 4f       	sbci	r29, 0xFE	; 254
    bc10:	e8 81       	ld	r30, Y
    bc12:	f9 81       	ldd	r31, Y+1	; 0x01
    bc14:	c5 54       	subi	r28, 0x45	; 69
    bc16:	d1 40       	sbci	r29, 0x01	; 1
    bc18:	94 87       	std	Z+12, r25	; 0x0c
    bc1a:	83 87       	std	Z+11, r24	; 0x0b
    bc1c:	85 89       	ldd	r24, Z+21	; 0x15
    bc1e:	96 89       	ldd	r25, Z+22	; 0x16
    bc20:	a7 89       	ldd	r26, Z+23	; 0x17
    bc22:	b0 8d       	ldd	r27, Z+24	; 0x18
    bc24:	c3 5e       	subi	r28, 0xE3	; 227
    bc26:	de 4f       	sbci	r29, 0xFE	; 254
    bc28:	88 83       	st	Y, r24
    bc2a:	99 83       	std	Y+1, r25	; 0x01
    bc2c:	aa 83       	std	Y+2, r26	; 0x02
    bc2e:	bb 83       	std	Y+3, r27	; 0x03
    bc30:	cd 51       	subi	r28, 0x1D	; 29
    bc32:	d1 40       	sbci	r29, 0x01	; 1
    bc34:	84 01       	movw	r16, r8
    bc36:	ce 01       	movw	r24, r28
    bc38:	01 96       	adiw	r24, 0x01	; 1
    bc3a:	6c 01       	movw	r12, r24
    bc3c:	c3 5e       	subi	r28, 0xE3	; 227
    bc3e:	de 4f       	sbci	r29, 0xFE	; 254
    bc40:	48 80       	ld	r4, Y
    bc42:	59 80       	ldd	r5, Y+1	; 0x01
    bc44:	6a 80       	ldd	r6, Y+2	; 0x02
    bc46:	7b 80       	ldd	r7, Y+3	; 0x03
    bc48:	cd 51       	subi	r28, 0x1D	; 29
    bc4a:	d1 40       	sbci	r29, 0x01	; 1
    bc4c:	41 14       	cp	r4, r1
    bc4e:	51 04       	cpc	r5, r1
    bc50:	61 04       	cpc	r6, r1
    bc52:	71 04       	cpc	r7, r1
    bc54:	09 f4       	brne	.+2      	; 0xbc58 <f_getcwd+0xae>
    bc56:	a3 c0       	rjmp	.+326    	; 0xbd9e <f_getcwd+0x1f4>
    bc58:	40 e2       	ldi	r20, 0x20	; 32
    bc5a:	50 e0       	ldi	r21, 0x00	; 0
    bc5c:	60 e0       	ldi	r22, 0x00	; 0
    bc5e:	70 e0       	ldi	r23, 0x00	; 0
    bc60:	ce 01       	movw	r24, r28
    bc62:	89 5e       	subi	r24, 0xE9	; 233
    bc64:	9e 4f       	sbci	r25, 0xFE	; 254
    bc66:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <dir_sdi>
    bc6a:	00 97       	sbiw	r24, 0x00	; 0
    bc6c:	09 f0       	breq	.+2      	; 0xbc70 <f_getcwd+0xc6>
    bc6e:	c6 c0       	rjmp	.+396    	; 0xbdfc <f_getcwd+0x252>
    bc70:	c3 5d       	subi	r28, 0xD3	; 211
    bc72:	de 4f       	sbci	r29, 0xFE	; 254
    bc74:	48 81       	ld	r20, Y
    bc76:	59 81       	ldd	r21, Y+1	; 0x01
    bc78:	6a 81       	ldd	r22, Y+2	; 0x02
    bc7a:	7b 81       	ldd	r23, Y+3	; 0x03
    bc7c:	cd 52       	subi	r28, 0x2D	; 45
    bc7e:	d1 40       	sbci	r29, 0x01	; 1
    bc80:	cb 5b       	subi	r28, 0xBB	; 187
    bc82:	de 4f       	sbci	r29, 0xFE	; 254
    bc84:	88 81       	ld	r24, Y
    bc86:	99 81       	ldd	r25, Y+1	; 0x01
    bc88:	c5 54       	subi	r28, 0x45	; 69
    bc8a:	d1 40       	sbci	r29, 0x01	; 1
    bc8c:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    bc90:	00 97       	sbiw	r24, 0x00	; 0
    bc92:	09 f0       	breq	.+2      	; 0xbc96 <f_getcwd+0xec>
    bc94:	b3 c0       	rjmp	.+358    	; 0xbdfc <f_getcwd+0x252>
    bc96:	cf 5c       	subi	r28, 0xCF	; 207
    bc98:	de 4f       	sbci	r29, 0xFE	; 254
    bc9a:	68 81       	ld	r22, Y
    bc9c:	79 81       	ldd	r23, Y+1	; 0x01
    bc9e:	c1 53       	subi	r28, 0x31	; 49
    bca0:	d1 40       	sbci	r29, 0x01	; 1
    bca2:	cb 5b       	subi	r28, 0xBB	; 187
    bca4:	de 4f       	sbci	r29, 0xFE	; 254
    bca6:	e8 81       	ld	r30, Y
    bca8:	f9 81       	ldd	r31, Y+1	; 0x01
    bcaa:	c5 54       	subi	r28, 0x45	; 69
    bcac:	d1 40       	sbci	r29, 0x01	; 1
    bcae:	80 81       	ld	r24, Z
    bcb0:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    bcb4:	c3 5e       	subi	r28, 0xE3	; 227
    bcb6:	de 4f       	sbci	r29, 0xFE	; 254
    bcb8:	68 83       	st	Y, r22
    bcba:	79 83       	std	Y+1, r23	; 0x01
    bcbc:	8a 83       	std	Y+2, r24	; 0x02
    bcbe:	9b 83       	std	Y+3, r25	; 0x03
    bcc0:	cd 51       	subi	r28, 0x1D	; 29
    bcc2:	d1 40       	sbci	r29, 0x01	; 1
    bcc4:	40 e0       	ldi	r20, 0x00	; 0
    bcc6:	50 e0       	ldi	r21, 0x00	; 0
    bcc8:	ba 01       	movw	r22, r20
    bcca:	ce 01       	movw	r24, r28
    bccc:	89 5e       	subi	r24, 0xE9	; 233
    bcce:	9e 4f       	sbci	r25, 0xFE	; 254
    bcd0:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <dir_sdi>
    bcd4:	00 97       	sbiw	r24, 0x00	; 0
    bcd6:	09 f0       	breq	.+2      	; 0xbcda <f_getcwd+0x130>
    bcd8:	91 c0       	rjmp	.+290    	; 0xbdfc <f_getcwd+0x252>
    bcda:	60 e0       	ldi	r22, 0x00	; 0
    bcdc:	70 e0       	ldi	r23, 0x00	; 0
    bcde:	ce 01       	movw	r24, r28
    bce0:	89 5e       	subi	r24, 0xE9	; 233
    bce2:	9e 4f       	sbci	r25, 0xFE	; 254
    bce4:	0e 94 2d 52 	call	0xa45a	; 0xa45a <dir_read>
    bce8:	00 97       	sbiw	r24, 0x00	; 0
    bcea:	09 f0       	breq	.+2      	; 0xbcee <f_getcwd+0x144>
    bcec:	89 c0       	rjmp	.+274    	; 0xbe00 <f_getcwd+0x256>
    bcee:	cf 5c       	subi	r28, 0xCF	; 207
    bcf0:	de 4f       	sbci	r29, 0xFE	; 254
    bcf2:	68 81       	ld	r22, Y
    bcf4:	79 81       	ldd	r23, Y+1	; 0x01
    bcf6:	c1 53       	subi	r28, 0x31	; 49
    bcf8:	d1 40       	sbci	r29, 0x01	; 1
    bcfa:	cb 5b       	subi	r28, 0xBB	; 187
    bcfc:	de 4f       	sbci	r29, 0xFE	; 254
    bcfe:	e8 81       	ld	r30, Y
    bd00:	f9 81       	ldd	r31, Y+1	; 0x01
    bd02:	c5 54       	subi	r28, 0x45	; 69
    bd04:	d1 40       	sbci	r29, 0x01	; 1
    bd06:	80 81       	ld	r24, Z
    bd08:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    bd0c:	46 16       	cp	r4, r22
    bd0e:	57 06       	cpc	r5, r23
    bd10:	68 06       	cpc	r6, r24
    bd12:	79 06       	cpc	r7, r25
    bd14:	41 f4       	brne	.+16     	; 0xbd26 <f_getcwd+0x17c>
    bd16:	b6 01       	movw	r22, r12
    bd18:	ce 01       	movw	r24, r28
    bd1a:	89 5e       	subi	r24, 0xE9	; 233
    bd1c:	9e 4f       	sbci	r25, 0xFE	; 254
    bd1e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <get_fileinfo>
    bd22:	f6 01       	movw	r30, r12
    bd24:	0a c0       	rjmp	.+20     	; 0xbd3a <f_getcwd+0x190>
    bd26:	60 e0       	ldi	r22, 0x00	; 0
    bd28:	70 e0       	ldi	r23, 0x00	; 0
    bd2a:	ce 01       	movw	r24, r28
    bd2c:	89 5e       	subi	r24, 0xE9	; 233
    bd2e:	9e 4f       	sbci	r25, 0xFE	; 254
    bd30:	0e 94 0c 51 	call	0xa218	; 0xa218 <dir_next>
    bd34:	00 97       	sbiw	r24, 0x00	; 0
    bd36:	89 f2       	breq	.-94     	; 0xbcda <f_getcwd+0x130>
    bd38:	63 c0       	rjmp	.+198    	; 0xbe00 <f_getcwd+0x256>
    bd3a:	cf 01       	movw	r24, r30
    bd3c:	8c 19       	sub	r24, r12
    bd3e:	9d 09       	sbc	r25, r13
    bd40:	31 96       	adiw	r30, 0x01	; 1
    bd42:	25 89       	ldd	r18, Z+21	; 0x15
    bd44:	21 11       	cpse	r18, r1
    bd46:	f9 cf       	rjmp	.-14     	; 0xbd3a <f_getcwd+0x190>
    bd48:	9c 01       	movw	r18, r24
    bd4a:	2f 5f       	subi	r18, 0xFF	; 255
    bd4c:	3f 4f       	sbci	r19, 0xFF	; 255
    bd4e:	02 17       	cp	r16, r18
    bd50:	13 07       	cpc	r17, r19
    bd52:	08 f4       	brcc	.+2      	; 0xbd56 <f_getcwd+0x1ac>
    bd54:	51 c0       	rjmp	.+162    	; 0xbdf8 <f_getcwd+0x24e>
    bd56:	f6 01       	movw	r30, r12
    bd58:	e8 0f       	add	r30, r24
    bd5a:	f9 1f       	adc	r31, r25
    bd5c:	98 01       	movw	r18, r16
    bd5e:	ce 16       	cp	r12, r30
    bd60:	df 06       	cpc	r13, r31
    bd62:	71 f0       	breq	.+28     	; 0xbd80 <f_getcwd+0x1d6>
    bd64:	21 50       	subi	r18, 0x01	; 1
    bd66:	31 09       	sbc	r19, r1
    bd68:	45 89       	ldd	r20, Z+21	; 0x15
    bd6a:	c9 5b       	subi	r28, 0xB9	; 185
    bd6c:	de 4f       	sbci	r29, 0xFE	; 254
    bd6e:	a8 81       	ld	r26, Y
    bd70:	b9 81       	ldd	r27, Y+1	; 0x01
    bd72:	c7 54       	subi	r28, 0x47	; 71
    bd74:	d1 40       	sbci	r29, 0x01	; 1
    bd76:	a2 0f       	add	r26, r18
    bd78:	b3 1f       	adc	r27, r19
    bd7a:	4c 93       	st	X, r20
    bd7c:	31 97       	sbiw	r30, 0x01	; 1
    bd7e:	ef cf       	rjmp	.-34     	; 0xbd5e <f_getcwd+0x1b4>
    bd80:	80 95       	com	r24
    bd82:	90 95       	com	r25
    bd84:	08 0f       	add	r16, r24
    bd86:	19 1f       	adc	r17, r25
    bd88:	c9 5b       	subi	r28, 0xB9	; 185
    bd8a:	de 4f       	sbci	r29, 0xFE	; 254
    bd8c:	e8 81       	ld	r30, Y
    bd8e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd90:	c7 54       	subi	r28, 0x47	; 71
    bd92:	d1 40       	sbci	r29, 0x01	; 1
    bd94:	e0 0f       	add	r30, r16
    bd96:	f1 1f       	adc	r31, r17
    bd98:	9f e2       	ldi	r25, 0x2F	; 47
    bd9a:	90 83       	st	Z, r25
    bd9c:	4f cf       	rjmp	.-354    	; 0xbc3c <f_getcwd+0x92>
    bd9e:	08 15       	cp	r16, r8
    bda0:	19 05       	cpc	r17, r9
    bda2:	61 f4       	brne	.+24     	; 0xbdbc <f_getcwd+0x212>
    bda4:	01 50       	subi	r16, 0x01	; 1
    bda6:	11 09       	sbc	r17, r1
    bda8:	c9 5b       	subi	r28, 0xB9	; 185
    bdaa:	de 4f       	sbci	r29, 0xFE	; 254
    bdac:	e8 81       	ld	r30, Y
    bdae:	f9 81       	ldd	r31, Y+1	; 0x01
    bdb0:	c7 54       	subi	r28, 0x47	; 71
    bdb2:	d1 40       	sbci	r29, 0x01	; 1
    bdb4:	e0 0f       	add	r30, r16
    bdb6:	f1 1f       	adc	r31, r17
    bdb8:	8f e2       	ldi	r24, 0x2F	; 47
    bdba:	80 83       	st	Z, r24
    bdbc:	ef ef       	ldi	r30, 0xFF	; 255
    bdbe:	ee 1a       	sub	r14, r30
    bdc0:	fe 0a       	sbc	r15, r30
    bdc2:	c9 5b       	subi	r28, 0xB9	; 185
    bdc4:	de 4f       	sbci	r29, 0xFE	; 254
    bdc6:	e8 81       	ld	r30, Y
    bdc8:	f9 81       	ldd	r31, Y+1	; 0x01
    bdca:	c7 54       	subi	r28, 0x47	; 71
    bdcc:	d1 40       	sbci	r29, 0x01	; 1
    bdce:	e0 0f       	add	r30, r16
    bdd0:	f1 1f       	adc	r31, r17
    bdd2:	80 81       	ld	r24, Z
    bdd4:	f7 01       	movw	r30, r14
    bdd6:	31 97       	sbiw	r30, 0x01	; 1
    bdd8:	80 83       	st	Z, r24
    bdda:	0f 5f       	subi	r16, 0xFF	; 255
    bddc:	1f 4f       	sbci	r17, 0xFF	; 255
    bdde:	08 15       	cp	r16, r8
    bde0:	19 05       	cpc	r17, r9
    bde2:	60 f3       	brcs	.-40     	; 0xbdbc <f_getcwd+0x212>
    bde4:	c5 01       	movw	r24, r10
    bde6:	0e 94 a0 67 	call	0xcf40	; 0xcf40 <ff_memfree>
    bdea:	f7 01       	movw	r30, r14
    bdec:	10 82       	st	Z, r1
    bdee:	c1 01       	movw	r24, r2
    bdf0:	0d c0       	rjmp	.+26     	; 0xbe0c <f_getcwd+0x262>
    bdf2:	81 e1       	ldi	r24, 0x11	; 17
    bdf4:	90 e0       	ldi	r25, 0x00	; 0
    bdf6:	0a c0       	rjmp	.+20     	; 0xbe0c <f_getcwd+0x262>
    bdf8:	81 e1       	ldi	r24, 0x11	; 17
    bdfa:	90 e0       	ldi	r25, 0x00	; 0
    bdfc:	1c 01       	movw	r2, r24
    bdfe:	f2 cf       	rjmp	.-28     	; 0xbde4 <f_getcwd+0x23a>
    be00:	84 30       	cpi	r24, 0x04	; 4
    be02:	91 05       	cpc	r25, r1
    be04:	d9 f7       	brne	.-10     	; 0xbdfc <f_getcwd+0x252>
    be06:	82 e0       	ldi	r24, 0x02	; 2
    be08:	90 e0       	ldi	r25, 0x00	; 0
    be0a:	f8 cf       	rjmp	.-16     	; 0xbdfc <f_getcwd+0x252>
    be0c:	c8 5b       	subi	r28, 0xB8	; 184
    be0e:	de 4f       	sbci	r29, 0xFE	; 254
    be10:	e2 e1       	ldi	r30, 0x12	; 18
    be12:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000be16 <f_lseek>:
    be16:	aa e0       	ldi	r26, 0x0A	; 10
    be18:	b0 e0       	ldi	r27, 0x00	; 0
    be1a:	e1 e1       	ldi	r30, 0x11	; 17
    be1c:	ff e5       	ldi	r31, 0x5F	; 95
    be1e:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    be22:	1c 01       	movw	r2, r24
    be24:	6a 01       	movw	r12, r20
    be26:	7b 01       	movw	r14, r22
    be28:	be 01       	movw	r22, r28
    be2a:	6f 5f       	subi	r22, 0xFF	; 255
    be2c:	7f 4f       	sbci	r23, 0xFF	; 255
    be2e:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    be32:	00 97       	sbiw	r24, 0x00	; 0
    be34:	09 f0       	breq	.+2      	; 0xbe38 <f_lseek+0x22>
    be36:	a7 c2       	rjmp	.+1358   	; 0xc386 <f_lseek+0x570>
    be38:	f1 01       	movw	r30, r2
    be3a:	87 85       	ldd	r24, Z+15	; 0x0f
    be3c:	90 e0       	ldi	r25, 0x00	; 0
    be3e:	00 97       	sbiw	r24, 0x00	; 0
    be40:	09 f0       	breq	.+2      	; 0xbe44 <f_lseek+0x2e>
    be42:	a1 c2       	rjmp	.+1346   	; 0xc386 <f_lseek+0x570>
    be44:	22 a1       	ldd	r18, Z+34	; 0x22
    be46:	33 a1       	ldd	r19, Z+35	; 0x23
    be48:	21 15       	cp	r18, r1
    be4a:	31 05       	cpc	r19, r1
    be4c:	09 f4       	brne	.+2      	; 0xbe50 <f_lseek+0x3a>
    be4e:	2e c1       	rjmp	.+604    	; 0xc0ac <f_lseek+0x296>
    be50:	ff ef       	ldi	r31, 0xFF	; 255
    be52:	cf 16       	cp	r12, r31
    be54:	df 06       	cpc	r13, r31
    be56:	ef 06       	cpc	r14, r31
    be58:	ff 06       	cpc	r15, r31
    be5a:	09 f0       	breq	.+2      	; 0xbe5e <f_lseek+0x48>
    be5c:	9a c0       	rjmp	.+308    	; 0xbf92 <f_lseek+0x17c>
    be5e:	89 01       	movw	r16, r18
    be60:	0c 5f       	subi	r16, 0xFC	; 252
    be62:	1f 4f       	sbci	r17, 0xFF	; 255
    be64:	d9 01       	movw	r26, r18
    be66:	4d 91       	ld	r20, X+
    be68:	5d 91       	ld	r21, X+
    be6a:	6d 91       	ld	r22, X+
    be6c:	7c 91       	ld	r23, X
    be6e:	4f 83       	std	Y+7, r20	; 0x07
    be70:	58 87       	std	Y+8, r21	; 0x08
    be72:	69 87       	std	Y+9, r22	; 0x09
    be74:	7a 87       	std	Y+10, r23	; 0x0a
    be76:	f1 01       	movw	r30, r2
    be78:	86 80       	ldd	r8, Z+6	; 0x06
    be7a:	97 80       	ldd	r9, Z+7	; 0x07
    be7c:	a0 84       	ldd	r10, Z+8	; 0x08
    be7e:	b1 84       	ldd	r11, Z+9	; 0x09
    be80:	52 e0       	ldi	r21, 0x02	; 2
    be82:	c5 2e       	mov	r12, r21
    be84:	d1 2c       	mov	r13, r1
    be86:	e1 2c       	mov	r14, r1
    be88:	f1 2c       	mov	r15, r1
    be8a:	81 14       	cp	r8, r1
    be8c:	91 04       	cpc	r9, r1
    be8e:	a1 04       	cpc	r10, r1
    be90:	b1 04       	cpc	r11, r1
    be92:	09 f4       	brne	.+2      	; 0xbe96 <f_lseek+0x80>
    be94:	65 c0       	rjmp	.+202    	; 0xbf60 <f_lseek+0x14a>
    be96:	24 01       	movw	r4, r8
    be98:	35 01       	movw	r6, r10
    be9a:	1b 82       	std	Y+3, r1	; 0x03
    be9c:	1c 82       	std	Y+4, r1	; 0x04
    be9e:	1d 82       	std	Y+5, r1	; 0x05
    bea0:	1e 82       	std	Y+6, r1	; 0x06
    bea2:	2b 81       	ldd	r18, Y+3	; 0x03
    bea4:	3c 81       	ldd	r19, Y+4	; 0x04
    bea6:	4d 81       	ldd	r20, Y+5	; 0x05
    bea8:	5e 81       	ldd	r21, Y+6	; 0x06
    beaa:	2f 5f       	subi	r18, 0xFF	; 255
    beac:	3f 4f       	sbci	r19, 0xFF	; 255
    beae:	4f 4f       	sbci	r20, 0xFF	; 255
    beb0:	5f 4f       	sbci	r21, 0xFF	; 255
    beb2:	2b 83       	std	Y+3, r18	; 0x03
    beb4:	3c 83       	std	Y+4, r19	; 0x04
    beb6:	4d 83       	std	Y+5, r20	; 0x05
    beb8:	5e 83       	std	Y+6, r21	; 0x06
    beba:	b3 01       	movw	r22, r6
    bebc:	a2 01       	movw	r20, r4
    bebe:	d1 01       	movw	r26, r2
    bec0:	8d 91       	ld	r24, X+
    bec2:	9c 91       	ld	r25, X
    bec4:	0e 94 e0 4d 	call	0x9bc0	; 0x9bc0 <get_fat.isra.10>
    bec8:	62 30       	cpi	r22, 0x02	; 2
    beca:	71 05       	cpc	r23, r1
    becc:	81 05       	cpc	r24, r1
    bece:	91 05       	cpc	r25, r1
    bed0:	10 f4       	brcc	.+4      	; 0xbed6 <f_lseek+0xc0>
    bed2:	82 e0       	ldi	r24, 0x02	; 2
    bed4:	07 c0       	rjmp	.+14     	; 0xbee4 <f_lseek+0xce>
    bed6:	6f 3f       	cpi	r22, 0xFF	; 255
    bed8:	ff ef       	ldi	r31, 0xFF	; 255
    beda:	7f 07       	cpc	r23, r31
    bedc:	8f 07       	cpc	r24, r31
    bede:	9f 07       	cpc	r25, r31
    bee0:	29 f4       	brne	.+10     	; 0xbeec <f_lseek+0xd6>
    bee2:	81 e0       	ldi	r24, 0x01	; 1
    bee4:	f1 01       	movw	r30, r2
    bee6:	87 87       	std	Z+15, r24	; 0x0f
    bee8:	90 e0       	ldi	r25, 0x00	; 0
    beea:	4d c2       	rjmp	.+1178   	; 0xc386 <f_lseek+0x570>
    beec:	a3 01       	movw	r20, r6
    beee:	92 01       	movw	r18, r4
    bef0:	2f 5f       	subi	r18, 0xFF	; 255
    bef2:	3f 4f       	sbci	r19, 0xFF	; 255
    bef4:	4f 4f       	sbci	r20, 0xFF	; 255
    bef6:	5f 4f       	sbci	r21, 0xFF	; 255
    bef8:	2b 01       	movw	r4, r22
    befa:	3c 01       	movw	r6, r24
    befc:	62 17       	cp	r22, r18
    befe:	73 07       	cpc	r23, r19
    bf00:	84 07       	cpc	r24, r20
    bf02:	95 07       	cpc	r25, r21
    bf04:	71 f2       	breq	.-100    	; 0xbea2 <f_lseek+0x8c>
    bf06:	f2 e0       	ldi	r31, 0x02	; 2
    bf08:	cf 0e       	add	r12, r31
    bf0a:	d1 1c       	adc	r13, r1
    bf0c:	e1 1c       	adc	r14, r1
    bf0e:	f1 1c       	adc	r15, r1
    bf10:	2f 81       	ldd	r18, Y+7	; 0x07
    bf12:	38 85       	ldd	r19, Y+8	; 0x08
    bf14:	49 85       	ldd	r20, Y+9	; 0x09
    bf16:	5a 85       	ldd	r21, Y+10	; 0x0a
    bf18:	2c 15       	cp	r18, r12
    bf1a:	3d 05       	cpc	r19, r13
    bf1c:	4e 05       	cpc	r20, r14
    bf1e:	5f 05       	cpc	r21, r15
    bf20:	88 f0       	brcs	.+34     	; 0xbf44 <f_lseek+0x12e>
    bf22:	2b 81       	ldd	r18, Y+3	; 0x03
    bf24:	3c 81       	ldd	r19, Y+4	; 0x04
    bf26:	4d 81       	ldd	r20, Y+5	; 0x05
    bf28:	5e 81       	ldd	r21, Y+6	; 0x06
    bf2a:	d8 01       	movw	r26, r16
    bf2c:	2d 93       	st	X+, r18
    bf2e:	3d 93       	st	X+, r19
    bf30:	4d 93       	st	X+, r20
    bf32:	5c 93       	st	X, r21
    bf34:	13 97       	sbiw	r26, 0x03	; 3
    bf36:	f8 01       	movw	r30, r16
    bf38:	84 82       	std	Z+4, r8	; 0x04
    bf3a:	95 82       	std	Z+5, r9	; 0x05
    bf3c:	a6 82       	std	Z+6, r10	; 0x06
    bf3e:	b7 82       	std	Z+7, r11	; 0x07
    bf40:	08 5f       	subi	r16, 0xF8	; 248
    bf42:	1f 4f       	sbci	r17, 0xFF	; 255
    bf44:	e9 81       	ldd	r30, Y+1	; 0x01
    bf46:	fa 81       	ldd	r31, Y+2	; 0x02
    bf48:	81 8c       	ldd	r8, Z+25	; 0x19
    bf4a:	92 8c       	ldd	r9, Z+26	; 0x1a
    bf4c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    bf4e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    bf50:	68 15       	cp	r22, r8
    bf52:	79 05       	cpc	r23, r9
    bf54:	8a 05       	cpc	r24, r10
    bf56:	9b 05       	cpc	r25, r11
    bf58:	18 f4       	brcc	.+6      	; 0xbf60 <f_lseek+0x14a>
    bf5a:	4b 01       	movw	r8, r22
    bf5c:	5c 01       	movw	r10, r24
    bf5e:	9b cf       	rjmp	.-202    	; 0xbe96 <f_lseek+0x80>
    bf60:	f1 01       	movw	r30, r2
    bf62:	a2 a1       	ldd	r26, Z+34	; 0x22
    bf64:	b3 a1       	ldd	r27, Z+35	; 0x23
    bf66:	cd 92       	st	X+, r12
    bf68:	dd 92       	st	X+, r13
    bf6a:	ed 92       	st	X+, r14
    bf6c:	fc 92       	st	X, r15
    bf6e:	13 97       	sbiw	r26, 0x03	; 3
    bf70:	2f 81       	ldd	r18, Y+7	; 0x07
    bf72:	38 85       	ldd	r19, Y+8	; 0x08
    bf74:	49 85       	ldd	r20, Y+9	; 0x09
    bf76:	5a 85       	ldd	r21, Y+10	; 0x0a
    bf78:	2c 15       	cp	r18, r12
    bf7a:	3d 05       	cpc	r19, r13
    bf7c:	4e 05       	cpc	r20, r14
    bf7e:	5f 05       	cpc	r21, r15
    bf80:	08 f4       	brcc	.+2      	; 0xbf84 <f_lseek+0x16e>
    bf82:	f8 c1       	rjmp	.+1008   	; 0xc374 <f_lseek+0x55e>
    bf84:	d8 01       	movw	r26, r16
    bf86:	1d 92       	st	X+, r1
    bf88:	1d 92       	st	X+, r1
    bf8a:	1d 92       	st	X+, r1
    bf8c:	1c 92       	st	X, r1
    bf8e:	13 97       	sbiw	r26, 0x03	; 3
    bf90:	ef c1       	rjmp	.+990    	; 0xc370 <f_lseek+0x55a>
    bf92:	f1 01       	movw	r30, r2
    bf94:	82 85       	ldd	r24, Z+10	; 0x0a
    bf96:	93 85       	ldd	r25, Z+11	; 0x0b
    bf98:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf9a:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf9c:	46 01       	movw	r8, r12
    bf9e:	57 01       	movw	r10, r14
    bfa0:	8c 15       	cp	r24, r12
    bfa2:	9d 05       	cpc	r25, r13
    bfa4:	ae 05       	cpc	r26, r14
    bfa6:	bf 05       	cpc	r27, r15
    bfa8:	10 f4       	brcc	.+4      	; 0xbfae <f_lseek+0x198>
    bfaa:	4c 01       	movw	r8, r24
    bfac:	5d 01       	movw	r10, r26
    bfae:	f1 01       	movw	r30, r2
    bfb0:	80 8a       	std	Z+16, r8	; 0x10
    bfb2:	91 8a       	std	Z+17, r9	; 0x11
    bfb4:	a2 8a       	std	Z+18, r10	; 0x12
    bfb6:	b3 8a       	std	Z+19, r11	; 0x13
    bfb8:	81 14       	cp	r8, r1
    bfba:	91 04       	cpc	r9, r1
    bfbc:	a1 04       	cpc	r10, r1
    bfbe:	b1 04       	cpc	r11, r1
    bfc0:	09 f4       	brne	.+2      	; 0xbfc4 <f_lseek+0x1ae>
    bfc2:	d6 c1       	rjmp	.+940    	; 0xc370 <f_lseek+0x55a>
    bfc4:	24 01       	movw	r4, r8
    bfc6:	35 01       	movw	r6, r10
    bfc8:	f1 e0       	ldi	r31, 0x01	; 1
    bfca:	4f 1a       	sub	r4, r31
    bfcc:	51 08       	sbc	r5, r1
    bfce:	61 08       	sbc	r6, r1
    bfd0:	71 08       	sbc	r7, r1
    bfd2:	b3 01       	movw	r22, r6
    bfd4:	a2 01       	movw	r20, r4
    bfd6:	c1 01       	movw	r24, r2
    bfd8:	0e 94 16 46 	call	0x8c2c	; 0x8c2c <clmt_clust>
    bfdc:	ab 01       	movw	r20, r22
    bfde:	bc 01       	movw	r22, r24
    bfe0:	f1 01       	movw	r30, r2
    bfe2:	44 8b       	std	Z+20, r20	; 0x14
    bfe4:	55 8b       	std	Z+21, r21	; 0x15
    bfe6:	66 8b       	std	Z+22, r22	; 0x16
    bfe8:	77 8b       	std	Z+23, r23	; 0x17
    bfea:	e9 80       	ldd	r14, Y+1	; 0x01
    bfec:	fa 80       	ldd	r15, Y+2	; 0x02
    bfee:	c7 01       	movw	r24, r14
    bff0:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    bff4:	61 15       	cp	r22, r1
    bff6:	71 05       	cpc	r23, r1
    bff8:	81 05       	cpc	r24, r1
    bffa:	91 05       	cpc	r25, r1
    bffc:	09 f4       	brne	.+2      	; 0xc000 <f_lseek+0x1ea>
    bffe:	69 cf       	rjmp	.-302    	; 0xbed2 <f_lseek+0xbc>
    c000:	95 01       	movw	r18, r10
    c002:	84 01       	movw	r16, r8
    c004:	11 70       	andi	r17, 0x01	; 1
    c006:	22 27       	eor	r18, r18
    c008:	33 27       	eor	r19, r19
    c00a:	01 15       	cp	r16, r1
    c00c:	11 05       	cpc	r17, r1
    c00e:	21 05       	cpc	r18, r1
    c010:	31 05       	cpc	r19, r1
    c012:	09 f4       	brne	.+2      	; 0xc016 <f_lseek+0x200>
    c014:	ad c1       	rjmp	.+858    	; 0xc370 <f_lseek+0x55a>
    c016:	f7 01       	movw	r30, r14
    c018:	81 84       	ldd	r8, Z+9	; 0x09
    c01a:	92 84       	ldd	r9, Z+10	; 0x0a
    c01c:	f1 e0       	ldi	r31, 0x01	; 1
    c01e:	8f 1a       	sub	r8, r31
    c020:	91 08       	sbc	r9, r1
    c022:	a1 2c       	mov	r10, r1
    c024:	b1 2c       	mov	r11, r1
    c026:	49 e0       	ldi	r20, 0x09	; 9
    c028:	76 94       	lsr	r7
    c02a:	67 94       	ror	r6
    c02c:	57 94       	ror	r5
    c02e:	47 94       	ror	r4
    c030:	4a 95       	dec	r20
    c032:	d1 f7       	brne	.-12     	; 0xc028 <f_lseek+0x212>
    c034:	48 20       	and	r4, r8
    c036:	59 20       	and	r5, r9
    c038:	6a 20       	and	r6, r10
    c03a:	7b 20       	and	r7, r11
    c03c:	53 01       	movw	r10, r6
    c03e:	42 01       	movw	r8, r4
    c040:	86 0e       	add	r8, r22
    c042:	97 1e       	adc	r9, r23
    c044:	a8 1e       	adc	r10, r24
    c046:	b9 1e       	adc	r11, r25
    c048:	f1 01       	movw	r30, r2
    c04a:	20 8d       	ldd	r18, Z+24	; 0x18
    c04c:	31 8d       	ldd	r19, Z+25	; 0x19
    c04e:	42 8d       	ldd	r20, Z+26	; 0x1a
    c050:	53 8d       	ldd	r21, Z+27	; 0x1b
    c052:	82 16       	cp	r8, r18
    c054:	93 06       	cpc	r9, r19
    c056:	a4 06       	cpc	r10, r20
    c058:	b5 06       	cpc	r11, r21
    c05a:	09 f4       	brne	.+2      	; 0xc05e <f_lseek+0x248>
    c05c:	89 c1       	rjmp	.+786    	; 0xc370 <f_lseek+0x55a>
    c05e:	86 85       	ldd	r24, Z+14	; 0x0e
    c060:	b1 01       	movw	r22, r2
    c062:	6c 5d       	subi	r22, 0xDC	; 220
    c064:	7f 4f       	sbci	r23, 0xFF	; 255
    c066:	6b 01       	movw	r12, r22
    c068:	87 ff       	sbrs	r24, 7
    c06a:	0d c0       	rjmp	.+26     	; 0xc086 <f_lseek+0x270>
    c06c:	01 e0       	ldi	r16, 0x01	; 1
    c06e:	10 e0       	ldi	r17, 0x00	; 0
    c070:	f7 01       	movw	r30, r14
    c072:	81 81       	ldd	r24, Z+1	; 0x01
    c074:	0e 94 69 68 	call	0xd0d2	; 0xd0d2 <disk_write>
    c078:	89 2b       	or	r24, r25
    c07a:	09 f0       	breq	.+2      	; 0xc07e <f_lseek+0x268>
    c07c:	32 cf       	rjmp	.-412    	; 0xbee2 <f_lseek+0xcc>
    c07e:	f1 01       	movw	r30, r2
    c080:	86 85       	ldd	r24, Z+14	; 0x0e
    c082:	8f 77       	andi	r24, 0x7F	; 127
    c084:	86 87       	std	Z+14, r24	; 0x0e
    c086:	e9 81       	ldd	r30, Y+1	; 0x01
    c088:	fa 81       	ldd	r31, Y+2	; 0x02
    c08a:	01 e0       	ldi	r16, 0x01	; 1
    c08c:	10 e0       	ldi	r17, 0x00	; 0
    c08e:	a5 01       	movw	r20, r10
    c090:	94 01       	movw	r18, r8
    c092:	b6 01       	movw	r22, r12
    c094:	81 81       	ldd	r24, Z+1	; 0x01
    c096:	0e 94 59 68 	call	0xd0b2	; 0xd0b2 <disk_read>
    c09a:	89 2b       	or	r24, r25
    c09c:	09 f0       	breq	.+2      	; 0xc0a0 <f_lseek+0x28a>
    c09e:	21 cf       	rjmp	.-446    	; 0xbee2 <f_lseek+0xcc>
    c0a0:	f1 01       	movw	r30, r2
    c0a2:	80 8e       	std	Z+24, r8	; 0x18
    c0a4:	91 8e       	std	Z+25, r9	; 0x19
    c0a6:	a2 8e       	std	Z+26, r10	; 0x1a
    c0a8:	b3 8e       	std	Z+27, r11	; 0x1b
    c0aa:	62 c1       	rjmp	.+708    	; 0xc370 <f_lseek+0x55a>
    c0ac:	f1 01       	movw	r30, r2
    c0ae:	82 85       	ldd	r24, Z+10	; 0x0a
    c0b0:	93 85       	ldd	r25, Z+11	; 0x0b
    c0b2:	a4 85       	ldd	r26, Z+12	; 0x0c
    c0b4:	b5 85       	ldd	r27, Z+13	; 0x0d
    c0b6:	8c 15       	cp	r24, r12
    c0b8:	9d 05       	cpc	r25, r13
    c0ba:	ae 05       	cpc	r26, r14
    c0bc:	bf 05       	cpc	r27, r15
    c0be:	28 f4       	brcc	.+10     	; 0xc0ca <f_lseek+0x2b4>
    c0c0:	26 85       	ldd	r18, Z+14	; 0x0e
    c0c2:	21 fd       	sbrc	r18, 1
    c0c4:	02 c0       	rjmp	.+4      	; 0xc0ca <f_lseek+0x2b4>
    c0c6:	6c 01       	movw	r12, r24
    c0c8:	7d 01       	movw	r14, r26
    c0ca:	f1 01       	movw	r30, r2
    c0cc:	40 88       	ldd	r4, Z+16	; 0x10
    c0ce:	51 88       	ldd	r5, Z+17	; 0x11
    c0d0:	62 88       	ldd	r6, Z+18	; 0x12
    c0d2:	73 88       	ldd	r7, Z+19	; 0x13
    c0d4:	10 8a       	std	Z+16, r1	; 0x10
    c0d6:	11 8a       	std	Z+17, r1	; 0x11
    c0d8:	12 8a       	std	Z+18, r1	; 0x12
    c0da:	13 8a       	std	Z+19, r1	; 0x13
    c0dc:	c1 14       	cp	r12, r1
    c0de:	d1 04       	cpc	r13, r1
    c0e0:	e1 04       	cpc	r14, r1
    c0e2:	f1 04       	cpc	r15, r1
    c0e4:	09 f4       	brne	.+2      	; 0xc0e8 <f_lseek+0x2d2>
    c0e6:	48 c1       	rjmp	.+656    	; 0xc378 <f_lseek+0x562>
    c0e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c0ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c0ec:	81 84       	ldd	r8, Z+9	; 0x09
    c0ee:	92 84       	ldd	r9, Z+10	; 0x0a
    c0f0:	a1 2c       	mov	r10, r1
    c0f2:	b1 2c       	mov	r11, r1
    c0f4:	39 e0       	ldi	r19, 0x09	; 9
    c0f6:	88 0c       	add	r8, r8
    c0f8:	99 1c       	adc	r9, r9
    c0fa:	aa 1c       	adc	r10, r10
    c0fc:	bb 1c       	adc	r11, r11
    c0fe:	3a 95       	dec	r19
    c100:	d1 f7       	brne	.-12     	; 0xc0f6 <f_lseek+0x2e0>
    c102:	41 14       	cp	r4, r1
    c104:	51 04       	cpc	r5, r1
    c106:	61 04       	cpc	r6, r1
    c108:	71 04       	cpc	r7, r1
    c10a:	d9 f1       	breq	.+118    	; 0xc182 <f_lseek+0x36c>
    c10c:	f1 e0       	ldi	r31, 0x01	; 1
    c10e:	4f 1a       	sub	r4, r31
    c110:	51 08       	sbc	r5, r1
    c112:	61 08       	sbc	r6, r1
    c114:	71 08       	sbc	r7, r1
    c116:	c7 01       	movw	r24, r14
    c118:	b6 01       	movw	r22, r12
    c11a:	61 50       	subi	r22, 0x01	; 1
    c11c:	71 09       	sbc	r23, r1
    c11e:	81 09       	sbc	r24, r1
    c120:	91 09       	sbc	r25, r1
    c122:	a5 01       	movw	r20, r10
    c124:	94 01       	movw	r18, r8
    c126:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    c12a:	2b 83       	std	Y+3, r18	; 0x03
    c12c:	3c 83       	std	Y+4, r19	; 0x04
    c12e:	4d 83       	std	Y+5, r20	; 0x05
    c130:	5e 83       	std	Y+6, r21	; 0x06
    c132:	c3 01       	movw	r24, r6
    c134:	b2 01       	movw	r22, r4
    c136:	a5 01       	movw	r20, r10
    c138:	94 01       	movw	r18, r8
    c13a:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
    c13e:	6b 81       	ldd	r22, Y+3	; 0x03
    c140:	7c 81       	ldd	r23, Y+4	; 0x04
    c142:	8d 81       	ldd	r24, Y+5	; 0x05
    c144:	9e 81       	ldd	r25, Y+6	; 0x06
    c146:	62 17       	cp	r22, r18
    c148:	73 07       	cpc	r23, r19
    c14a:	84 07       	cpc	r24, r20
    c14c:	95 07       	cpc	r25, r21
    c14e:	c8 f0       	brcs	.+50     	; 0xc182 <f_lseek+0x36c>
    c150:	88 27       	eor	r24, r24
    c152:	99 27       	eor	r25, r25
    c154:	dc 01       	movw	r26, r24
    c156:	88 19       	sub	r24, r8
    c158:	99 09       	sbc	r25, r9
    c15a:	aa 09       	sbc	r26, r10
    c15c:	bb 09       	sbc	r27, r11
    c15e:	48 22       	and	r4, r24
    c160:	59 22       	and	r5, r25
    c162:	6a 22       	and	r6, r26
    c164:	7b 22       	and	r7, r27
    c166:	f1 01       	movw	r30, r2
    c168:	40 8a       	std	Z+16, r4	; 0x10
    c16a:	51 8a       	std	Z+17, r5	; 0x11
    c16c:	62 8a       	std	Z+18, r6	; 0x12
    c16e:	73 8a       	std	Z+19, r7	; 0x13
    c170:	c4 18       	sub	r12, r4
    c172:	d5 08       	sbc	r13, r5
    c174:	e6 08       	sbc	r14, r6
    c176:	f7 08       	sbc	r15, r7
    c178:	44 89       	ldd	r20, Z+20	; 0x14
    c17a:	55 89       	ldd	r21, Z+21	; 0x15
    c17c:	66 89       	ldd	r22, Z+22	; 0x16
    c17e:	77 89       	ldd	r23, Z+23	; 0x17
    c180:	29 c0       	rjmp	.+82     	; 0xc1d4 <f_lseek+0x3be>
    c182:	f1 01       	movw	r30, r2
    c184:	46 81       	ldd	r20, Z+6	; 0x06
    c186:	57 81       	ldd	r21, Z+7	; 0x07
    c188:	60 85       	ldd	r22, Z+8	; 0x08
    c18a:	71 85       	ldd	r23, Z+9	; 0x09
    c18c:	41 15       	cp	r20, r1
    c18e:	51 05       	cpc	r21, r1
    c190:	61 05       	cpc	r22, r1
    c192:	71 05       	cpc	r23, r1
    c194:	d1 f4       	brne	.+52     	; 0xc1ca <f_lseek+0x3b4>
    c196:	40 e0       	ldi	r20, 0x00	; 0
    c198:	50 e0       	ldi	r21, 0x00	; 0
    c19a:	ba 01       	movw	r22, r20
    c19c:	c1 01       	movw	r24, r2
    c19e:	0e 94 55 4f 	call	0x9eaa	; 0x9eaa <create_chain>
    c1a2:	ab 01       	movw	r20, r22
    c1a4:	bc 01       	movw	r22, r24
    c1a6:	41 30       	cpi	r20, 0x01	; 1
    c1a8:	51 05       	cpc	r21, r1
    c1aa:	61 05       	cpc	r22, r1
    c1ac:	71 05       	cpc	r23, r1
    c1ae:	09 f4       	brne	.+2      	; 0xc1b2 <f_lseek+0x39c>
    c1b0:	90 ce       	rjmp	.-736    	; 0xbed2 <f_lseek+0xbc>
    c1b2:	4f 3f       	cpi	r20, 0xFF	; 255
    c1b4:	ff ef       	ldi	r31, 0xFF	; 255
    c1b6:	5f 07       	cpc	r21, r31
    c1b8:	6f 07       	cpc	r22, r31
    c1ba:	7f 07       	cpc	r23, r31
    c1bc:	09 f4       	brne	.+2      	; 0xc1c0 <f_lseek+0x3aa>
    c1be:	91 ce       	rjmp	.-734    	; 0xbee2 <f_lseek+0xcc>
    c1c0:	f1 01       	movw	r30, r2
    c1c2:	46 83       	std	Z+6, r20	; 0x06
    c1c4:	57 83       	std	Z+7, r21	; 0x07
    c1c6:	60 87       	std	Z+8, r22	; 0x08
    c1c8:	71 87       	std	Z+9, r23	; 0x09
    c1ca:	f1 01       	movw	r30, r2
    c1cc:	44 8b       	std	Z+20, r20	; 0x14
    c1ce:	55 8b       	std	Z+21, r21	; 0x15
    c1d0:	66 8b       	std	Z+22, r22	; 0x16
    c1d2:	77 8b       	std	Z+23, r23	; 0x17
    c1d4:	41 15       	cp	r20, r1
    c1d6:	51 05       	cpc	r21, r1
    c1d8:	61 05       	cpc	r22, r1
    c1da:	71 05       	cpc	r23, r1
    c1dc:	09 f0       	breq	.+2      	; 0xc1e0 <f_lseek+0x3ca>
    c1de:	40 c0       	rjmp	.+128    	; 0xc260 <f_lseek+0x44a>
    c1e0:	c1 2c       	mov	r12, r1
    c1e2:	d1 2c       	mov	r13, r1
    c1e4:	76 01       	movw	r14, r12
    c1e6:	79 c0       	rjmp	.+242    	; 0xc2da <f_lseek+0x4c4>
    c1e8:	c8 18       	sub	r12, r8
    c1ea:	d9 08       	sbc	r13, r9
    c1ec:	ea 08       	sbc	r14, r10
    c1ee:	fb 08       	sbc	r15, r11
    c1f0:	f1 01       	movw	r30, r2
    c1f2:	80 89       	ldd	r24, Z+16	; 0x10
    c1f4:	91 89       	ldd	r25, Z+17	; 0x11
    c1f6:	a2 89       	ldd	r26, Z+18	; 0x12
    c1f8:	b3 89       	ldd	r27, Z+19	; 0x13
    c1fa:	88 0d       	add	r24, r8
    c1fc:	99 1d       	adc	r25, r9
    c1fe:	aa 1d       	adc	r26, r10
    c200:	bb 1d       	adc	r27, r11
    c202:	80 8b       	std	Z+16, r24	; 0x10
    c204:	91 8b       	std	Z+17, r25	; 0x11
    c206:	a2 8b       	std	Z+18, r26	; 0x12
    c208:	b3 8b       	std	Z+19, r27	; 0x13
    c20a:	86 85       	ldd	r24, Z+14	; 0x0e
    c20c:	81 ff       	sbrs	r24, 1
    c20e:	2f c0       	rjmp	.+94     	; 0xc26e <f_lseek+0x458>
    c210:	c1 01       	movw	r24, r2
    c212:	0e 94 55 4f 	call	0x9eaa	; 0x9eaa <create_chain>
    c216:	ab 01       	movw	r20, r22
    c218:	bc 01       	movw	r22, r24
    c21a:	41 15       	cp	r20, r1
    c21c:	51 05       	cpc	r21, r1
    c21e:	61 05       	cpc	r22, r1
    c220:	71 05       	cpc	r23, r1
    c222:	61 f1       	breq	.+88     	; 0xc27c <f_lseek+0x466>
    c224:	4f 3f       	cpi	r20, 0xFF	; 255
    c226:	bf ef       	ldi	r27, 0xFF	; 255
    c228:	5b 07       	cpc	r21, r27
    c22a:	6b 07       	cpc	r22, r27
    c22c:	7b 07       	cpc	r23, r27
    c22e:	09 f4       	brne	.+2      	; 0xc232 <f_lseek+0x41c>
    c230:	58 ce       	rjmp	.-848    	; 0xbee2 <f_lseek+0xcc>
    c232:	42 30       	cpi	r20, 0x02	; 2
    c234:	51 05       	cpc	r21, r1
    c236:	61 05       	cpc	r22, r1
    c238:	71 05       	cpc	r23, r1
    c23a:	08 f4       	brcc	.+2      	; 0xc23e <f_lseek+0x428>
    c23c:	4a ce       	rjmp	.-876    	; 0xbed2 <f_lseek+0xbc>
    c23e:	e9 81       	ldd	r30, Y+1	; 0x01
    c240:	fa 81       	ldd	r31, Y+2	; 0x02
    c242:	81 8d       	ldd	r24, Z+25	; 0x19
    c244:	92 8d       	ldd	r25, Z+26	; 0x1a
    c246:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c248:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c24a:	48 17       	cp	r20, r24
    c24c:	59 07       	cpc	r21, r25
    c24e:	6a 07       	cpc	r22, r26
    c250:	7b 07       	cpc	r23, r27
    c252:	08 f0       	brcs	.+2      	; 0xc256 <f_lseek+0x440>
    c254:	3e ce       	rjmp	.-900    	; 0xbed2 <f_lseek+0xbc>
    c256:	f1 01       	movw	r30, r2
    c258:	44 8b       	std	Z+20, r20	; 0x14
    c25a:	55 8b       	std	Z+21, r21	; 0x15
    c25c:	66 8b       	std	Z+22, r22	; 0x16
    c25e:	77 8b       	std	Z+23, r23	; 0x17
    c260:	8c 14       	cp	r8, r12
    c262:	9d 04       	cpc	r9, r13
    c264:	ae 04       	cpc	r10, r14
    c266:	bf 04       	cpc	r11, r15
    c268:	08 f4       	brcc	.+2      	; 0xc26c <f_lseek+0x456>
    c26a:	be cf       	rjmp	.-132    	; 0xc1e8 <f_lseek+0x3d2>
    c26c:	0a c0       	rjmp	.+20     	; 0xc282 <f_lseek+0x46c>
    c26e:	80 81       	ld	r24, Z
    c270:	91 81       	ldd	r25, Z+1	; 0x01
    c272:	0e 94 e0 4d 	call	0x9bc0	; 0x9bc0 <get_fat.isra.10>
    c276:	ab 01       	movw	r20, r22
    c278:	bc 01       	movw	r22, r24
    c27a:	d4 cf       	rjmp	.-88     	; 0xc224 <f_lseek+0x40e>
    c27c:	c1 2c       	mov	r12, r1
    c27e:	d1 2c       	mov	r13, r1
    c280:	76 01       	movw	r14, r12
    c282:	f1 01       	movw	r30, r2
    c284:	80 89       	ldd	r24, Z+16	; 0x10
    c286:	91 89       	ldd	r25, Z+17	; 0x11
    c288:	a2 89       	ldd	r26, Z+18	; 0x12
    c28a:	b3 89       	ldd	r27, Z+19	; 0x13
    c28c:	8c 0d       	add	r24, r12
    c28e:	9d 1d       	adc	r25, r13
    c290:	ae 1d       	adc	r26, r14
    c292:	bf 1d       	adc	r27, r15
    c294:	80 8b       	std	Z+16, r24	; 0x10
    c296:	91 8b       	std	Z+17, r25	; 0x11
    c298:	a2 8b       	std	Z+18, r26	; 0x12
    c29a:	b3 8b       	std	Z+19, r27	; 0x13
    c29c:	d7 01       	movw	r26, r14
    c29e:	c6 01       	movw	r24, r12
    c2a0:	91 70       	andi	r25, 0x01	; 1
    c2a2:	aa 27       	eor	r26, r26
    c2a4:	bb 27       	eor	r27, r27
    c2a6:	89 2b       	or	r24, r25
    c2a8:	8a 2b       	or	r24, r26
    c2aa:	8b 2b       	or	r24, r27
    c2ac:	09 f4       	brne	.+2      	; 0xc2b0 <f_lseek+0x49a>
    c2ae:	98 cf       	rjmp	.-208    	; 0xc1e0 <f_lseek+0x3ca>
    c2b0:	89 81       	ldd	r24, Y+1	; 0x01
    c2b2:	9a 81       	ldd	r25, Y+2	; 0x02
    c2b4:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    c2b8:	61 15       	cp	r22, r1
    c2ba:	71 05       	cpc	r23, r1
    c2bc:	81 05       	cpc	r24, r1
    c2be:	91 05       	cpc	r25, r1
    c2c0:	09 f4       	brne	.+2      	; 0xc2c4 <f_lseek+0x4ae>
    c2c2:	07 ce       	rjmp	.-1010   	; 0xbed2 <f_lseek+0xbc>
    c2c4:	29 e0       	ldi	r18, 0x09	; 9
    c2c6:	f6 94       	lsr	r15
    c2c8:	e7 94       	ror	r14
    c2ca:	d7 94       	ror	r13
    c2cc:	c7 94       	ror	r12
    c2ce:	2a 95       	dec	r18
    c2d0:	d1 f7       	brne	.-12     	; 0xc2c6 <f_lseek+0x4b0>
    c2d2:	c6 0e       	add	r12, r22
    c2d4:	d7 1e       	adc	r13, r23
    c2d6:	e8 1e       	adc	r14, r24
    c2d8:	f9 1e       	adc	r15, r25
    c2da:	f1 01       	movw	r30, r2
    c2dc:	80 89       	ldd	r24, Z+16	; 0x10
    c2de:	91 89       	ldd	r25, Z+17	; 0x11
    c2e0:	a2 89       	ldd	r26, Z+18	; 0x12
    c2e2:	b3 89       	ldd	r27, Z+19	; 0x13
    c2e4:	42 85       	ldd	r20, Z+10	; 0x0a
    c2e6:	53 85       	ldd	r21, Z+11	; 0x0b
    c2e8:	64 85       	ldd	r22, Z+12	; 0x0c
    c2ea:	75 85       	ldd	r23, Z+13	; 0x0d
    c2ec:	48 17       	cp	r20, r24
    c2ee:	59 07       	cpc	r21, r25
    c2f0:	6a 07       	cpc	r22, r26
    c2f2:	7b 07       	cpc	r23, r27
    c2f4:	38 f4       	brcc	.+14     	; 0xc304 <f_lseek+0x4ee>
    c2f6:	82 87       	std	Z+10, r24	; 0x0a
    c2f8:	93 87       	std	Z+11, r25	; 0x0b
    c2fa:	a4 87       	std	Z+12, r26	; 0x0c
    c2fc:	b5 87       	std	Z+13, r27	; 0x0d
    c2fe:	26 85       	ldd	r18, Z+14	; 0x0e
    c300:	20 64       	ori	r18, 0x40	; 64
    c302:	26 87       	std	Z+14, r18	; 0x0e
    c304:	91 70       	andi	r25, 0x01	; 1
    c306:	aa 27       	eor	r26, r26
    c308:	bb 27       	eor	r27, r27
    c30a:	89 2b       	or	r24, r25
    c30c:	8a 2b       	or	r24, r26
    c30e:	8b 2b       	or	r24, r27
    c310:	79 f1       	breq	.+94     	; 0xc370 <f_lseek+0x55a>
    c312:	f1 01       	movw	r30, r2
    c314:	20 8d       	ldd	r18, Z+24	; 0x18
    c316:	31 8d       	ldd	r19, Z+25	; 0x19
    c318:	42 8d       	ldd	r20, Z+26	; 0x1a
    c31a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c31c:	2c 15       	cp	r18, r12
    c31e:	3d 05       	cpc	r19, r13
    c320:	4e 05       	cpc	r20, r14
    c322:	5f 05       	cpc	r21, r15
    c324:	29 f1       	breq	.+74     	; 0xc370 <f_lseek+0x55a>
    c326:	86 85       	ldd	r24, Z+14	; 0x0e
    c328:	b1 01       	movw	r22, r2
    c32a:	6c 5d       	subi	r22, 0xDC	; 220
    c32c:	7f 4f       	sbci	r23, 0xFF	; 255
    c32e:	5b 01       	movw	r10, r22
    c330:	87 ff       	sbrs	r24, 7
    c332:	0d c0       	rjmp	.+26     	; 0xc34e <f_lseek+0x538>
    c334:	e9 81       	ldd	r30, Y+1	; 0x01
    c336:	fa 81       	ldd	r31, Y+2	; 0x02
    c338:	01 e0       	ldi	r16, 0x01	; 1
    c33a:	10 e0       	ldi	r17, 0x00	; 0
    c33c:	81 81       	ldd	r24, Z+1	; 0x01
    c33e:	c9 d6       	rcall	.+3474   	; 0xd0d2 <disk_write>
    c340:	89 2b       	or	r24, r25
    c342:	09 f0       	breq	.+2      	; 0xc346 <f_lseek+0x530>
    c344:	ce cd       	rjmp	.-1124   	; 0xbee2 <f_lseek+0xcc>
    c346:	f1 01       	movw	r30, r2
    c348:	86 85       	ldd	r24, Z+14	; 0x0e
    c34a:	8f 77       	andi	r24, 0x7F	; 127
    c34c:	86 87       	std	Z+14, r24	; 0x0e
    c34e:	e9 81       	ldd	r30, Y+1	; 0x01
    c350:	fa 81       	ldd	r31, Y+2	; 0x02
    c352:	01 e0       	ldi	r16, 0x01	; 1
    c354:	10 e0       	ldi	r17, 0x00	; 0
    c356:	a7 01       	movw	r20, r14
    c358:	96 01       	movw	r18, r12
    c35a:	b5 01       	movw	r22, r10
    c35c:	81 81       	ldd	r24, Z+1	; 0x01
    c35e:	a9 d6       	rcall	.+3410   	; 0xd0b2 <disk_read>
    c360:	89 2b       	or	r24, r25
    c362:	09 f0       	breq	.+2      	; 0xc366 <f_lseek+0x550>
    c364:	be cd       	rjmp	.-1156   	; 0xbee2 <f_lseek+0xcc>
    c366:	f1 01       	movw	r30, r2
    c368:	c0 8e       	std	Z+24, r12	; 0x18
    c36a:	d1 8e       	std	Z+25, r13	; 0x19
    c36c:	e2 8e       	std	Z+26, r14	; 0x1a
    c36e:	f3 8e       	std	Z+27, r15	; 0x1b
    c370:	80 e0       	ldi	r24, 0x00	; 0
    c372:	ba cd       	rjmp	.-1164   	; 0xbee8 <f_lseek+0xd2>
    c374:	81 e1       	ldi	r24, 0x11	; 17
    c376:	b8 cd       	rjmp	.-1168   	; 0xbee8 <f_lseek+0xd2>
    c378:	80 e0       	ldi	r24, 0x00	; 0
    c37a:	90 e0       	ldi	r25, 0x00	; 0
    c37c:	dc 01       	movw	r26, r24
    c37e:	c1 2c       	mov	r12, r1
    c380:	d1 2c       	mov	r13, r1
    c382:	76 01       	movw	r14, r12
    c384:	bf cf       	rjmp	.-130    	; 0xc304 <f_lseek+0x4ee>
    c386:	2a 96       	adiw	r28, 0x0a	; 10
    c388:	e2 e1       	ldi	r30, 0x12	; 18
    c38a:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000c38e <f_opendir>:
    c38e:	a4 e0       	ldi	r26, 0x04	; 4
    c390:	b0 e0       	ldi	r27, 0x00	; 0
    c392:	ed ec       	ldi	r30, 0xCD	; 205
    c394:	f1 e6       	ldi	r31, 0x61	; 97
    c396:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    c39a:	7c 83       	std	Y+4, r23	; 0x04
    c39c:	6b 83       	std	Y+3, r22	; 0x03
    c39e:	00 97       	sbiw	r24, 0x00	; 0
    c3a0:	09 f4       	brne	.+2      	; 0xc3a4 <f_opendir+0x16>
    c3a2:	48 c0       	rjmp	.+144    	; 0xc434 <f_opendir+0xa6>
    c3a4:	8c 01       	movw	r16, r24
    c3a6:	40 e0       	ldi	r20, 0x00	; 0
    c3a8:	be 01       	movw	r22, r28
    c3aa:	6f 5f       	subi	r22, 0xFF	; 255
    c3ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ae:	ce 01       	movw	r24, r28
    c3b0:	03 96       	adiw	r24, 0x03	; 3
    c3b2:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    c3b6:	7c 01       	movw	r14, r24
    c3b8:	89 2b       	or	r24, r25
    c3ba:	b9 f5       	brne	.+110    	; 0xc42a <f_opendir+0x9c>
    c3bc:	89 81       	ldd	r24, Y+1	; 0x01
    c3be:	9a 81       	ldd	r25, Y+2	; 0x02
    c3c0:	f8 01       	movw	r30, r16
    c3c2:	91 83       	std	Z+1, r25	; 0x01
    c3c4:	80 83       	st	Z, r24
    c3c6:	80 e0       	ldi	r24, 0x00	; 0
    c3c8:	92 e0       	ldi	r25, 0x02	; 2
    c3ca:	b7 d5       	rcall	.+2926   	; 0xcf3a <ff_memalloc>
    c3cc:	6c 01       	movw	r12, r24
    c3ce:	00 97       	sbiw	r24, 0x00	; 0
    c3d0:	99 f1       	breq	.+102    	; 0xc438 <f_opendir+0xaa>
    c3d2:	e9 81       	ldd	r30, Y+1	; 0x01
    c3d4:	fa 81       	ldd	r31, Y+2	; 0x02
    c3d6:	94 87       	std	Z+12, r25	; 0x0c
    c3d8:	83 87       	std	Z+11, r24	; 0x0b
    c3da:	6b 81       	ldd	r22, Y+3	; 0x03
    c3dc:	7c 81       	ldd	r23, Y+4	; 0x04
    c3de:	c8 01       	movw	r24, r16
    c3e0:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    c3e4:	7c 01       	movw	r14, r24
    c3e6:	89 2b       	or	r24, r25
    c3e8:	b9 f4       	brne	.+46     	; 0xc418 <f_opendir+0x8a>
    c3ea:	f8 01       	movw	r30, r16
    c3ec:	87 a1       	ldd	r24, Z+39	; 0x27
    c3ee:	87 fd       	sbrc	r24, 7
    c3f0:	28 c0       	rjmp	.+80     	; 0xc442 <f_opendir+0xb4>
    c3f2:	84 81       	ldd	r24, Z+4	; 0x04
    c3f4:	84 ff       	sbrs	r24, 4
    c3f6:	0d c0       	rjmp	.+26     	; 0xc412 <f_opendir+0x84>
    c3f8:	62 8d       	ldd	r22, Z+26	; 0x1a
    c3fa:	73 8d       	ldd	r23, Z+27	; 0x1b
    c3fc:	e9 81       	ldd	r30, Y+1	; 0x01
    c3fe:	fa 81       	ldd	r31, Y+2	; 0x02
    c400:	80 81       	ld	r24, Z
    c402:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    c406:	f8 01       	movw	r30, r16
    c408:	66 83       	std	Z+6, r22	; 0x06
    c40a:	77 83       	std	Z+7, r23	; 0x07
    c40c:	80 87       	std	Z+8, r24	; 0x08
    c40e:	91 87       	std	Z+9, r25	; 0x09
    c410:	18 c0       	rjmp	.+48     	; 0xc442 <f_opendir+0xb4>
    c412:	95 e0       	ldi	r25, 0x05	; 5
    c414:	e9 2e       	mov	r14, r25
    c416:	f1 2c       	mov	r15, r1
    c418:	c6 01       	movw	r24, r12
    c41a:	92 d5       	rcall	.+2852   	; 0xcf40 <ff_memfree>
    c41c:	f4 e0       	ldi	r31, 0x04	; 4
    c41e:	ef 16       	cp	r14, r31
    c420:	f1 04       	cpc	r15, r1
    c422:	f1 f0       	breq	.+60     	; 0xc460 <f_opendir+0xd2>
    c424:	e1 14       	cp	r14, r1
    c426:	f1 04       	cpc	r15, r1
    c428:	49 f0       	breq	.+18     	; 0xc43c <f_opendir+0xae>
    c42a:	f8 01       	movw	r30, r16
    c42c:	11 82       	std	Z+1, r1	; 0x01
    c42e:	10 82       	st	Z, r1
    c430:	c7 01       	movw	r24, r14
    c432:	1a c0       	rjmp	.+52     	; 0xc468 <f_opendir+0xda>
    c434:	89 e0       	ldi	r24, 0x09	; 9
    c436:	03 c0       	rjmp	.+6      	; 0xc43e <f_opendir+0xb0>
    c438:	81 e1       	ldi	r24, 0x11	; 17
    c43a:	01 c0       	rjmp	.+2      	; 0xc43e <f_opendir+0xb0>
    c43c:	80 e0       	ldi	r24, 0x00	; 0
    c43e:	90 e0       	ldi	r25, 0x00	; 0
    c440:	13 c0       	rjmp	.+38     	; 0xc468 <f_opendir+0xda>
    c442:	e9 81       	ldd	r30, Y+1	; 0x01
    c444:	fa 81       	ldd	r31, Y+2	; 0x02
    c446:	85 81       	ldd	r24, Z+5	; 0x05
    c448:	96 81       	ldd	r25, Z+6	; 0x06
    c44a:	f8 01       	movw	r30, r16
    c44c:	93 83       	std	Z+3, r25	; 0x03
    c44e:	82 83       	std	Z+2, r24	; 0x02
    c450:	40 e0       	ldi	r20, 0x00	; 0
    c452:	50 e0       	ldi	r21, 0x00	; 0
    c454:	ba 01       	movw	r22, r20
    c456:	c8 01       	movw	r24, r16
    c458:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <dir_sdi>
    c45c:	7c 01       	movw	r14, r24
    c45e:	dc cf       	rjmp	.-72     	; 0xc418 <f_opendir+0x8a>
    c460:	85 e0       	ldi	r24, 0x05	; 5
    c462:	e8 2e       	mov	r14, r24
    c464:	f1 2c       	mov	r15, r1
    c466:	e1 cf       	rjmp	.-62     	; 0xc42a <f_opendir+0x9c>
    c468:	24 96       	adiw	r28, 0x04	; 4
    c46a:	e8 e0       	ldi	r30, 0x08	; 8
    c46c:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000c470 <f_closedir>:
    c470:	a2 e0       	ldi	r26, 0x02	; 2
    c472:	b0 e0       	ldi	r27, 0x00	; 0
    c474:	ee e3       	ldi	r30, 0x3E	; 62
    c476:	f2 e6       	ldi	r31, 0x62	; 98
    c478:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    c47c:	8c 01       	movw	r16, r24
    c47e:	be 01       	movw	r22, r28
    c480:	6f 5f       	subi	r22, 0xFF	; 255
    c482:	7f 4f       	sbci	r23, 0xFF	; 255
    c484:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    c488:	00 97       	sbiw	r24, 0x00	; 0
    c48a:	19 f4       	brne	.+6      	; 0xc492 <f_closedir+0x22>
    c48c:	f8 01       	movw	r30, r16
    c48e:	11 82       	std	Z+1, r1	; 0x01
    c490:	10 82       	st	Z, r1
    c492:	22 96       	adiw	r28, 0x02	; 2
    c494:	e4 e0       	ldi	r30, 0x04	; 4
    c496:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000c49a <f_readdir>:
    c49a:	a2 e0       	ldi	r26, 0x02	; 2
    c49c:	b0 e0       	ldi	r27, 0x00	; 0
    c49e:	e3 e5       	ldi	r30, 0x53	; 83
    c4a0:	f2 e6       	ldi	r31, 0x62	; 98
    c4a2:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
    c4a6:	7c 01       	movw	r14, r24
    c4a8:	5b 01       	movw	r10, r22
    c4aa:	be 01       	movw	r22, r28
    c4ac:	6f 5f       	subi	r22, 0xFF	; 255
    c4ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c4b0:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <validate>
    c4b4:	00 97       	sbiw	r24, 0x00	; 0
    c4b6:	89 f5       	brne	.+98     	; 0xc51a <f_readdir+0x80>
    c4b8:	a1 14       	cp	r10, r1
    c4ba:	b1 04       	cpc	r11, r1
    c4bc:	39 f4       	brne	.+14     	; 0xc4cc <f_readdir+0x32>
    c4be:	40 e0       	ldi	r20, 0x00	; 0
    c4c0:	50 e0       	ldi	r21, 0x00	; 0
    c4c2:	ba 01       	movw	r22, r20
    c4c4:	c7 01       	movw	r24, r14
    c4c6:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <dir_sdi>
    c4ca:	27 c0       	rjmp	.+78     	; 0xc51a <f_readdir+0x80>
    c4cc:	80 e0       	ldi	r24, 0x00	; 0
    c4ce:	92 e0       	ldi	r25, 0x02	; 2
    c4d0:	34 d5       	rcall	.+2664   	; 0xcf3a <ff_memalloc>
    c4d2:	6c 01       	movw	r12, r24
    c4d4:	00 97       	sbiw	r24, 0x00	; 0
    c4d6:	f9 f0       	breq	.+62     	; 0xc516 <f_readdir+0x7c>
    c4d8:	e9 81       	ldd	r30, Y+1	; 0x01
    c4da:	fa 81       	ldd	r31, Y+2	; 0x02
    c4dc:	94 87       	std	Z+12, r25	; 0x0c
    c4de:	83 87       	std	Z+11, r24	; 0x0b
    c4e0:	60 e0       	ldi	r22, 0x00	; 0
    c4e2:	70 e0       	ldi	r23, 0x00	; 0
    c4e4:	c7 01       	movw	r24, r14
    c4e6:	0e 94 2d 52 	call	0xa45a	; 0xa45a <dir_read>
    c4ea:	8c 01       	movw	r16, r24
    c4ec:	8b 7f       	andi	r24, 0xFB	; 251
    c4ee:	89 2b       	or	r24, r25
    c4f0:	71 f4       	brne	.+28     	; 0xc50e <f_readdir+0x74>
    c4f2:	b5 01       	movw	r22, r10
    c4f4:	c7 01       	movw	r24, r14
    c4f6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <get_fileinfo>
    c4fa:	60 e0       	ldi	r22, 0x00	; 0
    c4fc:	70 e0       	ldi	r23, 0x00	; 0
    c4fe:	c7 01       	movw	r24, r14
    c500:	0e 94 0c 51 	call	0xa218	; 0xa218 <dir_next>
    c504:	8c 01       	movw	r16, r24
    c506:	04 97       	sbiw	r24, 0x04	; 4
    c508:	11 f4       	brne	.+4      	; 0xc50e <f_readdir+0x74>
    c50a:	00 e0       	ldi	r16, 0x00	; 0
    c50c:	10 e0       	ldi	r17, 0x00	; 0
    c50e:	c6 01       	movw	r24, r12
    c510:	17 d5       	rcall	.+2606   	; 0xcf40 <ff_memfree>
    c512:	c8 01       	movw	r24, r16
    c514:	02 c0       	rjmp	.+4      	; 0xc51a <f_readdir+0x80>
    c516:	81 e1       	ldi	r24, 0x11	; 17
    c518:	90 e0       	ldi	r25, 0x00	; 0
    c51a:	22 96       	adiw	r28, 0x02	; 2
    c51c:	ea e0       	ldi	r30, 0x0A	; 10
    c51e:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0000c522 <f_stat>:
    c522:	a0 e3       	ldi	r26, 0x30	; 48
    c524:	b0 e0       	ldi	r27, 0x00	; 0
    c526:	e7 e9       	ldi	r30, 0x97	; 151
    c528:	f2 e6       	ldi	r31, 0x62	; 98
    c52a:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    c52e:	98 ab       	std	Y+48, r25	; 0x30
    c530:	8f a7       	std	Y+47, r24	; 0x2f
    c532:	6b 01       	movw	r12, r22
    c534:	40 e0       	ldi	r20, 0x00	; 0
    c536:	be 01       	movw	r22, r28
    c538:	6f 5f       	subi	r22, 0xFF	; 255
    c53a:	7f 4f       	sbci	r23, 0xFF	; 255
    c53c:	ce 01       	movw	r24, r28
    c53e:	8f 96       	adiw	r24, 0x2f	; 47
    c540:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    c544:	00 97       	sbiw	r24, 0x00	; 0
    c546:	39 f5       	brne	.+78     	; 0xc596 <f_stat+0x74>
    c548:	80 e0       	ldi	r24, 0x00	; 0
    c54a:	92 e0       	ldi	r25, 0x02	; 2
    c54c:	f6 d4       	rcall	.+2540   	; 0xcf3a <ff_memalloc>
    c54e:	7c 01       	movw	r14, r24
    c550:	00 97       	sbiw	r24, 0x00	; 0
    c552:	f9 f0       	breq	.+62     	; 0xc592 <f_stat+0x70>
    c554:	e9 81       	ldd	r30, Y+1	; 0x01
    c556:	fa 81       	ldd	r31, Y+2	; 0x02
    c558:	94 87       	std	Z+12, r25	; 0x0c
    c55a:	83 87       	std	Z+11, r24	; 0x0b
    c55c:	6f a5       	ldd	r22, Y+47	; 0x2f
    c55e:	78 a9       	ldd	r23, Y+48	; 0x30
    c560:	ce 01       	movw	r24, r28
    c562:	01 96       	adiw	r24, 0x01	; 1
    c564:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    c568:	8c 01       	movw	r16, r24
    c56a:	89 2b       	or	r24, r25
    c56c:	71 f4       	brne	.+28     	; 0xc58a <f_stat+0x68>
    c56e:	88 a5       	ldd	r24, Y+40	; 0x28
    c570:	87 fd       	sbrc	r24, 7
    c572:	09 c0       	rjmp	.+18     	; 0xc586 <f_stat+0x64>
    c574:	c1 14       	cp	r12, r1
    c576:	d1 04       	cpc	r13, r1
    c578:	41 f0       	breq	.+16     	; 0xc58a <f_stat+0x68>
    c57a:	b6 01       	movw	r22, r12
    c57c:	ce 01       	movw	r24, r28
    c57e:	01 96       	adiw	r24, 0x01	; 1
    c580:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <get_fileinfo>
    c584:	02 c0       	rjmp	.+4      	; 0xc58a <f_stat+0x68>
    c586:	06 e0       	ldi	r16, 0x06	; 6
    c588:	10 e0       	ldi	r17, 0x00	; 0
    c58a:	c7 01       	movw	r24, r14
    c58c:	d9 d4       	rcall	.+2482   	; 0xcf40 <ff_memfree>
    c58e:	c8 01       	movw	r24, r16
    c590:	02 c0       	rjmp	.+4      	; 0xc596 <f_stat+0x74>
    c592:	81 e1       	ldi	r24, 0x11	; 17
    c594:	90 e0       	ldi	r25, 0x00	; 0
    c596:	e0 96       	adiw	r28, 0x30	; 48
    c598:	e8 e0       	ldi	r30, 0x08	; 8
    c59a:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000c59e <f_getfree>:
    c59e:	aa e0       	ldi	r26, 0x0A	; 10
    c5a0:	b0 e0       	ldi	r27, 0x00	; 0
    c5a2:	e5 ed       	ldi	r30, 0xD5	; 213
    c5a4:	f2 e6       	ldi	r31, 0x62	; 98
    c5a6:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
    c5aa:	9c 83       	std	Y+4, r25	; 0x04
    c5ac:	8b 83       	std	Y+3, r24	; 0x03
    c5ae:	7e 83       	std	Y+6, r23	; 0x06
    c5b0:	6d 83       	std	Y+5, r22	; 0x05
    c5b2:	7a 01       	movw	r14, r20
    c5b4:	40 e0       	ldi	r20, 0x00	; 0
    c5b6:	be 01       	movw	r22, r28
    c5b8:	6f 5f       	subi	r22, 0xFF	; 255
    c5ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c5bc:	ce 01       	movw	r24, r28
    c5be:	03 96       	adiw	r24, 0x03	; 3
    c5c0:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    c5c4:	8c 01       	movw	r16, r24
    c5c6:	89 2b       	or	r24, r25
    c5c8:	09 f0       	breq	.+2      	; 0xc5cc <f_getfree+0x2e>
    c5ca:	c4 c0       	rjmp	.+392    	; 0xc754 <f_getfree+0x1b6>
    c5cc:	69 80       	ldd	r6, Y+1	; 0x01
    c5ce:	7a 80       	ldd	r7, Y+2	; 0x02
    c5d0:	d7 01       	movw	r26, r14
    c5d2:	6d 92       	st	X+, r6
    c5d4:	7c 92       	st	X, r7
    c5d6:	f3 01       	movw	r30, r6
    c5d8:	81 89       	ldd	r24, Z+17	; 0x11
    c5da:	92 89       	ldd	r25, Z+18	; 0x12
    c5dc:	a3 89       	ldd	r26, Z+19	; 0x13
    c5de:	b4 89       	ldd	r27, Z+20	; 0x14
    c5e0:	81 8c       	ldd	r8, Z+25	; 0x19
    c5e2:	92 8c       	ldd	r9, Z+26	; 0x1a
    c5e4:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c5e6:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c5e8:	b5 01       	movw	r22, r10
    c5ea:	a4 01       	movw	r20, r8
    c5ec:	42 50       	subi	r20, 0x02	; 2
    c5ee:	51 09       	sbc	r21, r1
    c5f0:	61 09       	sbc	r22, r1
    c5f2:	71 09       	sbc	r23, r1
    c5f4:	48 17       	cp	r20, r24
    c5f6:	59 07       	cpc	r21, r25
    c5f8:	6a 07       	cpc	r22, r26
    c5fa:	7b 07       	cpc	r23, r27
    c5fc:	38 f0       	brcs	.+14     	; 0xc60c <f_getfree+0x6e>
    c5fe:	ed 81       	ldd	r30, Y+5	; 0x05
    c600:	fe 81       	ldd	r31, Y+6	; 0x06
    c602:	80 83       	st	Z, r24
    c604:	91 83       	std	Z+1, r25	; 0x01
    c606:	a2 83       	std	Z+2, r26	; 0x02
    c608:	b3 83       	std	Z+3, r27	; 0x03
    c60a:	a4 c0       	rjmp	.+328    	; 0xc754 <f_getfree+0x1b6>
    c60c:	80 81       	ld	r24, Z
    c60e:	81 30       	cpi	r24, 0x01	; 1
    c610:	a1 f5       	brne	.+104    	; 0xc67a <f_getfree+0xdc>
    c612:	82 e0       	ldi	r24, 0x02	; 2
    c614:	88 2e       	mov	r8, r24
    c616:	91 2c       	mov	r9, r1
    c618:	a1 2c       	mov	r10, r1
    c61a:	b1 2c       	mov	r11, r1
    c61c:	c1 2c       	mov	r12, r1
    c61e:	d1 2c       	mov	r13, r1
    c620:	76 01       	movw	r14, r12
    c622:	b5 01       	movw	r22, r10
    c624:	a4 01       	movw	r20, r8
    c626:	c3 01       	movw	r24, r6
    c628:	0e 94 e0 4d 	call	0x9bc0	; 0x9bc0 <get_fat.isra.10>
    c62c:	6f 3f       	cpi	r22, 0xFF	; 255
    c62e:	bf ef       	ldi	r27, 0xFF	; 255
    c630:	7b 07       	cpc	r23, r27
    c632:	8b 07       	cpc	r24, r27
    c634:	9b 07       	cpc	r25, r27
    c636:	09 f4       	brne	.+2      	; 0xc63a <f_getfree+0x9c>
    c638:	76 c0       	rjmp	.+236    	; 0xc726 <f_getfree+0x188>
    c63a:	61 30       	cpi	r22, 0x01	; 1
    c63c:	71 05       	cpc	r23, r1
    c63e:	81 05       	cpc	r24, r1
    c640:	91 05       	cpc	r25, r1
    c642:	09 f4       	brne	.+2      	; 0xc646 <f_getfree+0xa8>
    c644:	73 c0       	rjmp	.+230    	; 0xc72c <f_getfree+0x18e>
    c646:	67 2b       	or	r22, r23
    c648:	68 2b       	or	r22, r24
    c64a:	69 2b       	or	r22, r25
    c64c:	29 f4       	brne	.+10     	; 0xc658 <f_getfree+0xba>
    c64e:	ef ef       	ldi	r30, 0xFF	; 255
    c650:	ce 1a       	sub	r12, r30
    c652:	de 0a       	sbc	r13, r30
    c654:	ee 0a       	sbc	r14, r30
    c656:	fe 0a       	sbc	r15, r30
    c658:	ff ef       	ldi	r31, 0xFF	; 255
    c65a:	8f 1a       	sub	r8, r31
    c65c:	9f 0a       	sbc	r9, r31
    c65e:	af 0a       	sbc	r10, r31
    c660:	bf 0a       	sbc	r11, r31
    c662:	e9 81       	ldd	r30, Y+1	; 0x01
    c664:	fa 81       	ldd	r31, Y+2	; 0x02
    c666:	81 8d       	ldd	r24, Z+25	; 0x19
    c668:	92 8d       	ldd	r25, Z+26	; 0x1a
    c66a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c66c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c66e:	88 16       	cp	r8, r24
    c670:	99 06       	cpc	r9, r25
    c672:	aa 06       	cpc	r10, r26
    c674:	bb 06       	cpc	r11, r27
    c676:	a8 f2       	brcs	.-86     	; 0xc622 <f_getfree+0x84>
    c678:	5d c0       	rjmp	.+186    	; 0xc734 <f_getfree+0x196>
    c67a:	f3 01       	movw	r30, r6
    c67c:	45 a0       	ldd	r4, Z+37	; 0x25
    c67e:	56 a0       	ldd	r5, Z+38	; 0x26
    c680:	67 a0       	ldd	r6, Z+39	; 0x27
    c682:	70 a4       	ldd	r7, Z+40	; 0x28
    c684:	21 2c       	mov	r2, r1
    c686:	31 2c       	mov	r3, r1
    c688:	c1 2c       	mov	r12, r1
    c68a:	d1 2c       	mov	r13, r1
    c68c:	76 01       	movw	r14, r12
    c68e:	21 14       	cp	r2, r1
    c690:	31 04       	cpc	r3, r1
    c692:	b1 f4       	brne	.+44     	; 0xc6c0 <f_getfree+0x122>
    c694:	d3 01       	movw	r26, r6
    c696:	c2 01       	movw	r24, r4
    c698:	01 96       	adiw	r24, 0x01	; 1
    c69a:	a1 1d       	adc	r26, r1
    c69c:	b1 1d       	adc	r27, r1
    c69e:	8f 83       	std	Y+7, r24	; 0x07
    c6a0:	98 87       	std	Y+8, r25	; 0x08
    c6a2:	a9 87       	std	Y+9, r26	; 0x09
    c6a4:	ba 87       	std	Y+10, r27	; 0x0a
    c6a6:	b3 01       	movw	r22, r6
    c6a8:	a2 01       	movw	r20, r4
    c6aa:	89 81       	ldd	r24, Y+1	; 0x01
    c6ac:	9a 81       	ldd	r25, Y+2	; 0x02
    c6ae:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    c6b2:	00 97       	sbiw	r24, 0x00	; 0
    c6b4:	09 f0       	breq	.+2      	; 0xc6b8 <f_getfree+0x11a>
    c6b6:	3d c0       	rjmp	.+122    	; 0xc732 <f_getfree+0x194>
    c6b8:	4f 80       	ldd	r4, Y+7	; 0x07
    c6ba:	58 84       	ldd	r5, Y+8	; 0x08
    c6bc:	69 84       	ldd	r6, Y+9	; 0x09
    c6be:	7a 84       	ldd	r7, Y+10	; 0x0a
    c6c0:	e9 81       	ldd	r30, Y+1	; 0x01
    c6c2:	fa 81       	ldd	r31, Y+2	; 0x02
    c6c4:	80 81       	ld	r24, Z
    c6c6:	82 30       	cpi	r24, 0x02	; 2
    c6c8:	79 f4       	brne	.+30     	; 0xc6e8 <f_getfree+0x14a>
    c6ca:	e2 0d       	add	r30, r2
    c6cc:	f3 1d       	adc	r31, r3
    c6ce:	85 a9       	ldd	r24, Z+53	; 0x35
    c6d0:	96 a9       	ldd	r25, Z+54	; 0x36
    c6d2:	89 2b       	or	r24, r25
    c6d4:	29 f4       	brne	.+10     	; 0xc6e0 <f_getfree+0x142>
    c6d6:	9f ef       	ldi	r25, 0xFF	; 255
    c6d8:	c9 1a       	sub	r12, r25
    c6da:	d9 0a       	sbc	r13, r25
    c6dc:	e9 0a       	sbc	r14, r25
    c6de:	f9 0a       	sbc	r15, r25
    c6e0:	a2 e0       	ldi	r26, 0x02	; 2
    c6e2:	2a 0e       	add	r2, r26
    c6e4:	31 1c       	adc	r3, r1
    c6e6:	15 c0       	rjmp	.+42     	; 0xc712 <f_getfree+0x174>
    c6e8:	cf 01       	movw	r24, r30
    c6ea:	c5 96       	adiw	r24, 0x35	; 53
    c6ec:	82 0d       	add	r24, r2
    c6ee:	93 1d       	adc	r25, r3
    c6f0:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <ld_dword>
    c6f4:	dc 01       	movw	r26, r24
    c6f6:	cb 01       	movw	r24, r22
    c6f8:	bf 70       	andi	r27, 0x0F	; 15
    c6fa:	89 2b       	or	r24, r25
    c6fc:	8a 2b       	or	r24, r26
    c6fe:	8b 2b       	or	r24, r27
    c700:	29 f4       	brne	.+10     	; 0xc70c <f_getfree+0x16e>
    c702:	bf ef       	ldi	r27, 0xFF	; 255
    c704:	cb 1a       	sub	r12, r27
    c706:	db 0a       	sbc	r13, r27
    c708:	eb 0a       	sbc	r14, r27
    c70a:	fb 0a       	sbc	r15, r27
    c70c:	e4 e0       	ldi	r30, 0x04	; 4
    c70e:	2e 0e       	add	r2, r30
    c710:	31 1c       	adc	r3, r1
    c712:	f1 e0       	ldi	r31, 0x01	; 1
    c714:	3f 22       	and	r3, r31
    c716:	21 e0       	ldi	r18, 0x01	; 1
    c718:	82 1a       	sub	r8, r18
    c71a:	91 08       	sbc	r9, r1
    c71c:	a1 08       	sbc	r10, r1
    c71e:	b1 08       	sbc	r11, r1
    c720:	09 f0       	breq	.+2      	; 0xc724 <f_getfree+0x186>
    c722:	b5 cf       	rjmp	.-150    	; 0xc68e <f_getfree+0xf0>
    c724:	07 c0       	rjmp	.+14     	; 0xc734 <f_getfree+0x196>
    c726:	01 e0       	ldi	r16, 0x01	; 1
    c728:	10 e0       	ldi	r17, 0x00	; 0
    c72a:	04 c0       	rjmp	.+8      	; 0xc734 <f_getfree+0x196>
    c72c:	02 e0       	ldi	r16, 0x02	; 2
    c72e:	10 e0       	ldi	r17, 0x00	; 0
    c730:	01 c0       	rjmp	.+2      	; 0xc734 <f_getfree+0x196>
    c732:	8c 01       	movw	r16, r24
    c734:	ad 81       	ldd	r26, Y+5	; 0x05
    c736:	be 81       	ldd	r27, Y+6	; 0x06
    c738:	cd 92       	st	X+, r12
    c73a:	dd 92       	st	X+, r13
    c73c:	ed 92       	st	X+, r14
    c73e:	fc 92       	st	X, r15
    c740:	13 97       	sbiw	r26, 0x03	; 3
    c742:	e9 81       	ldd	r30, Y+1	; 0x01
    c744:	fa 81       	ldd	r31, Y+2	; 0x02
    c746:	c1 8a       	std	Z+17, r12	; 0x11
    c748:	d2 8a       	std	Z+18, r13	; 0x12
    c74a:	e3 8a       	std	Z+19, r14	; 0x13
    c74c:	f4 8a       	std	Z+20, r15	; 0x14
    c74e:	84 81       	ldd	r24, Z+4	; 0x04
    c750:	81 60       	ori	r24, 0x01	; 1
    c752:	84 83       	std	Z+4, r24	; 0x04
    c754:	c8 01       	movw	r24, r16
    c756:	2a 96       	adiw	r28, 0x0a	; 10
    c758:	e2 e1       	ldi	r30, 0x12	; 18
    c75a:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0000c75e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c75e:	a0 e6       	ldi	r26, 0x60	; 96
    c760:	b0 e0       	ldi	r27, 0x00	; 0
    c762:	e5 eb       	ldi	r30, 0xB5	; 181
    c764:	f3 e6       	ldi	r31, 0x63	; 99
    c766:	0c 94 8a e1 	jmp	0x1c314	; 0x1c314 <__prologue_saves__+0xe>
    c76a:	a1 96       	adiw	r28, 0x21	; 33
    c76c:	9f af       	std	Y+63, r25	; 0x3f
    c76e:	8e af       	std	Y+62, r24	; 0x3e
    c770:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c772:	42 e0       	ldi	r20, 0x02	; 2
    c774:	be 01       	movw	r22, r28
    c776:	63 5a       	subi	r22, 0xA3	; 163
    c778:	7f 4f       	sbci	r23, 0xFF	; 255
    c77a:	ce 01       	movw	r24, r28
    c77c:	81 5a       	subi	r24, 0xA1	; 161
    c77e:	9f 4f       	sbci	r25, 0xFF	; 255
    c780:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
	if (res == FR_OK) {
    c784:	00 97       	sbiw	r24, 0x00	; 0
    c786:	09 f0       	breq	.+2      	; 0xc78a <f_unlink+0x2c>
    c788:	8c c0       	rjmp	.+280    	; 0xc8a2 <f_unlink+0x144>
		dj.obj.fs = fs;
    c78a:	6f 96       	adiw	r28, 0x1f	; 31
    c78c:	8e ad       	ldd	r24, Y+62	; 0x3e
    c78e:	9f ad       	ldd	r25, Y+63	; 0x3f
    c790:	6f 97       	sbiw	r28, 0x1f	; 31
    c792:	98 ab       	std	Y+48, r25	; 0x30
    c794:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c796:	80 e0       	ldi	r24, 0x00	; 0
    c798:	92 e0       	ldi	r25, 0x02	; 2
    c79a:	cf d3       	rcall	.+1950   	; 0xcf3a <ff_memalloc>
    c79c:	5c 01       	movw	r10, r24
    c79e:	00 97       	sbiw	r24, 0x00	; 0
    c7a0:	09 f4       	brne	.+2      	; 0xc7a4 <f_unlink+0x46>
    c7a2:	49 c0       	rjmp	.+146    	; 0xc836 <f_unlink+0xd8>
    c7a4:	6f 96       	adiw	r28, 0x1f	; 31
    c7a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    c7a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    c7aa:	6f 97       	sbiw	r28, 0x1f	; 31
    c7ac:	94 87       	std	Z+12, r25	; 0x0c
    c7ae:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c7b0:	a1 96       	adiw	r28, 0x21	; 33
    c7b2:	6e ad       	ldd	r22, Y+62	; 0x3e
    c7b4:	7f ad       	ldd	r23, Y+63	; 0x3f
    c7b6:	a1 97       	sbiw	r28, 0x21	; 33
    c7b8:	ce 01       	movw	r24, r28
    c7ba:	8f 96       	adiw	r24, 0x2f	; 47
    c7bc:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    c7c0:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c7c2:	89 2b       	or	r24, r25
    c7c4:	a1 f5       	brne	.+104    	; 0xc82e <f_unlink+0xd0>
    c7c6:	67 96       	adiw	r28, 0x17	; 23
    c7c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    c7ca:	67 97       	sbiw	r28, 0x17	; 23
    c7cc:	85 fd       	sbrc	r24, 5
    c7ce:	36 c0       	rjmp	.+108    	; 0xc83c <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c7d0:	87 fd       	sbrc	r24, 7
    c7d2:	34 c0       	rjmp	.+104    	; 0xc83c <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c7d4:	9b a8       	ldd	r9, Y+51	; 0x33
    c7d6:	90 fc       	sbrc	r9, 0
    c7d8:	40 c0       	rjmp	.+128    	; 0xc85a <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c7da:	6f 96       	adiw	r28, 0x1f	; 31
    c7dc:	0e ad       	ldd	r16, Y+62	; 0x3e
    c7de:	1f ad       	ldd	r17, Y+63	; 0x3f
    c7e0:	6f 97       	sbiw	r28, 0x1f	; 31
    c7e2:	2b 96       	adiw	r28, 0x0b	; 11
    c7e4:	6e ad       	ldd	r22, Y+62	; 0x3e
    c7e6:	7f ad       	ldd	r23, Y+63	; 0x3f
    c7e8:	2b 97       	sbiw	r28, 0x0b	; 11
    c7ea:	f8 01       	movw	r30, r16
    c7ec:	80 81       	ld	r24, Z
    c7ee:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    c7f2:	6b 01       	movw	r12, r22
    c7f4:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c7f6:	94 fe       	sbrs	r9, 4
    c7f8:	33 c0       	rjmp	.+102    	; 0xc860 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c7fa:	f8 01       	movw	r30, r16
    c7fc:	85 89       	ldd	r24, Z+21	; 0x15
    c7fe:	96 89       	ldd	r25, Z+22	; 0x16
    c800:	a7 89       	ldd	r26, Z+23	; 0x17
    c802:	b0 8d       	ldd	r27, Z+24	; 0x18
    c804:	c8 16       	cp	r12, r24
    c806:	d9 06       	cpc	r13, r25
    c808:	ea 06       	cpc	r14, r26
    c80a:	fb 06       	cpc	r15, r27
    c80c:	31 f1       	breq	.+76     	; 0xc85a <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c80e:	1a 83       	std	Y+2, r17	; 0x02
    c810:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c812:	cf 82       	std	Y+7, r12	; 0x07
    c814:	d8 86       	std	Y+8, r13	; 0x08
    c816:	e9 86       	std	Y+9, r14	; 0x09
    c818:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c81a:	40 e0       	ldi	r20, 0x00	; 0
    c81c:	50 e0       	ldi	r21, 0x00	; 0
    c81e:	ba 01       	movw	r22, r20
    c820:	ce 01       	movw	r24, r28
    c822:	01 96       	adiw	r24, 0x01	; 1
    c824:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <dir_sdi>
    c828:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c82a:	89 2b       	or	r24, r25
    c82c:	51 f0       	breq	.+20     	; 0xc842 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c82e:	c5 01       	movw	r24, r10
    c830:	87 d3       	rcall	.+1806   	; 0xcf40 <ff_memfree>
    c832:	c8 01       	movw	r24, r16
    c834:	36 c0       	rjmp	.+108    	; 0xc8a2 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c836:	81 e1       	ldi	r24, 0x11	; 17
    c838:	90 e0       	ldi	r25, 0x00	; 0
    c83a:	33 c0       	rjmp	.+102    	; 0xc8a2 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c83c:	06 e0       	ldi	r16, 0x06	; 6
    c83e:	10 e0       	ldi	r17, 0x00	; 0
    c840:	f6 cf       	rjmp	.-20     	; 0xc82e <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c842:	60 e0       	ldi	r22, 0x00	; 0
    c844:	70 e0       	ldi	r23, 0x00	; 0
    c846:	ce 01       	movw	r24, r28
    c848:	01 96       	adiw	r24, 0x01	; 1
    c84a:	0e 94 2d 52 	call	0xa45a	; 0xa45a <dir_read>
    c84e:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c850:	00 97       	sbiw	r24, 0x00	; 0
    c852:	19 f0       	breq	.+6      	; 0xc85a <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c854:	04 97       	sbiw	r24, 0x04	; 4
    c856:	21 f0       	breq	.+8      	; 0xc860 <f_unlink+0x102>
    c858:	ea cf       	rjmp	.-44     	; 0xc82e <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c85a:	07 e0       	ldi	r16, 0x07	; 7
    c85c:	10 e0       	ldi	r17, 0x00	; 0
    c85e:	e7 cf       	rjmp	.-50     	; 0xc82e <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c860:	ce 01       	movw	r24, r28
    c862:	8f 96       	adiw	r24, 0x2f	; 47
    c864:	0e 94 f6 52 	call	0xa5ec	; 0xa5ec <dir_remove>
    c868:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c86a:	89 2b       	or	r24, r25
    c86c:	01 f7       	brne	.-64     	; 0xc82e <f_unlink+0xd0>
    c86e:	c1 14       	cp	r12, r1
    c870:	d1 04       	cpc	r13, r1
    c872:	e1 04       	cpc	r14, r1
    c874:	f1 04       	cpc	r15, r1
    c876:	41 f4       	brne	.+16     	; 0xc888 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c878:	6f 96       	adiw	r28, 0x1f	; 31
    c87a:	8e ad       	ldd	r24, Y+62	; 0x3e
    c87c:	9f ad       	ldd	r25, Y+63	; 0x3f
    c87e:	6f 97       	sbiw	r28, 0x1f	; 31
    c880:	0e 94 f6 48 	call	0x91ec	; 0x91ec <sync_fs>
    c884:	8c 01       	movw	r16, r24
    c886:	d3 cf       	rjmp	.-90     	; 0xc82e <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c888:	00 e0       	ldi	r16, 0x00	; 0
    c88a:	10 e0       	ldi	r17, 0x00	; 0
    c88c:	98 01       	movw	r18, r16
    c88e:	b7 01       	movw	r22, r14
    c890:	a6 01       	movw	r20, r12
    c892:	ce 01       	movw	r24, r28
    c894:	8f 96       	adiw	r24, 0x2f	; 47
    c896:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <remove_chain>
    c89a:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c89c:	89 2b       	or	r24, r25
    c89e:	39 f6       	brne	.-114    	; 0xc82e <f_unlink+0xd0>
    c8a0:	eb cf       	rjmp	.-42     	; 0xc878 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c8a2:	c0 5a       	subi	r28, 0xA0	; 160
    c8a4:	df 4f       	sbci	r29, 0xFF	; 255
    c8a6:	eb e0       	ldi	r30, 0x0B	; 11
    c8a8:	0c 94 a6 e1 	jmp	0x1c34c	; 0x1c34c <__epilogue_restores__+0xe>

0000c8ac <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c8ac:	a0 e4       	ldi	r26, 0x40	; 64
    c8ae:	b0 e0       	ldi	r27, 0x00	; 0
    c8b0:	ec e5       	ldi	r30, 0x5C	; 92
    c8b2:	f4 e6       	ldi	r31, 0x64	; 100
    c8b4:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
    c8b8:	21 96       	adiw	r28, 0x01	; 1
    c8ba:	9f af       	std	Y+63, r25	; 0x3f
    c8bc:	8e af       	std	Y+62, r24	; 0x3e
    c8be:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c8c0:	42 e0       	ldi	r20, 0x02	; 2
    c8c2:	be 01       	movw	r22, r28
    c8c4:	63 5c       	subi	r22, 0xC3	; 195
    c8c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8c8:	ce 01       	movw	r24, r28
    c8ca:	cf 96       	adiw	r24, 0x3f	; 63
    c8cc:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
	if (res == FR_OK) {
    c8d0:	00 97       	sbiw	r24, 0x00	; 0
    c8d2:	09 f0       	breq	.+2      	; 0xc8d6 <f_mkdir+0x2a>
    c8d4:	d6 c0       	rjmp	.+428    	; 0xca82 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c8d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    c8d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    c8da:	9a 83       	std	Y+2, r25	; 0x02
    c8dc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c8de:	80 e0       	ldi	r24, 0x00	; 0
    c8e0:	92 e0       	ldi	r25, 0x02	; 2
    c8e2:	2b d3       	rcall	.+1622   	; 0xcf3a <ff_memalloc>
    c8e4:	6c 01       	movw	r12, r24
    c8e6:	00 97       	sbiw	r24, 0x00	; 0
    c8e8:	e9 f0       	breq	.+58     	; 0xc924 <f_mkdir+0x78>
    c8ea:	ed ad       	ldd	r30, Y+61	; 0x3d
    c8ec:	fe ad       	ldd	r31, Y+62	; 0x3e
    c8ee:	94 87       	std	Z+12, r25	; 0x0c
    c8f0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c8f2:	21 96       	adiw	r28, 0x01	; 1
    c8f4:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8f8:	21 97       	sbiw	r28, 0x01	; 1
    c8fa:	ce 01       	movw	r24, r28
    c8fc:	01 96       	adiw	r24, 0x01	; 1
    c8fe:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    c902:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c904:	89 2b       	or	r24, r25
    c906:	89 f0       	breq	.+34     	; 0xc92a <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c908:	84 e0       	ldi	r24, 0x04	; 4
    c90a:	e8 16       	cp	r14, r24
    c90c:	f1 04       	cpc	r15, r1
    c90e:	31 f4       	brne	.+12     	; 0xc91c <f_mkdir+0x70>
    c910:	88 a5       	ldd	r24, Y+40	; 0x28
    c912:	85 ff       	sbrs	r24, 5
    c914:	0e c0       	rjmp	.+28     	; 0xc932 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c916:	26 e0       	ldi	r18, 0x06	; 6
    c918:	e2 2e       	mov	r14, r18
    c91a:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c91c:	c6 01       	movw	r24, r12
    c91e:	10 d3       	rcall	.+1568   	; 0xcf40 <ff_memfree>
    c920:	c7 01       	movw	r24, r14
    c922:	af c0       	rjmp	.+350    	; 0xca82 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c924:	81 e1       	ldi	r24, 0x11	; 17
    c926:	90 e0       	ldi	r25, 0x00	; 0
    c928:	ac c0       	rjmp	.+344    	; 0xca82 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c92a:	38 e0       	ldi	r19, 0x08	; 8
    c92c:	e3 2e       	mov	r14, r19
    c92e:	f1 2c       	mov	r15, r1
    c930:	f5 cf       	rjmp	.-22     	; 0xc91c <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c932:	8d ad       	ldd	r24, Y+61	; 0x3d
    c934:	9e ad       	ldd	r25, Y+62	; 0x3e
    c936:	98 ab       	std	Y+48, r25	; 0x30
    c938:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c93a:	40 e0       	ldi	r20, 0x00	; 0
    c93c:	50 e0       	ldi	r21, 0x00	; 0
    c93e:	ba 01       	movw	r22, r20
    c940:	ce 01       	movw	r24, r28
    c942:	8f 96       	adiw	r24, 0x2f	; 47
    c944:	0e 94 55 4f 	call	0x9eaa	; 0x9eaa <create_chain>
    c948:	4b 01       	movw	r8, r22
    c94a:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c94c:	67 2b       	or	r22, r23
    c94e:	68 2b       	or	r22, r24
    c950:	69 2b       	or	r22, r25
    c952:	09 f1       	breq	.+66     	; 0xc996 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c954:	e1 e0       	ldi	r30, 0x01	; 1
    c956:	8e 16       	cp	r8, r30
    c958:	91 04       	cpc	r9, r1
    c95a:	a1 04       	cpc	r10, r1
    c95c:	b1 04       	cpc	r11, r1
    c95e:	61 f0       	breq	.+24     	; 0xc978 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c960:	ff ef       	ldi	r31, 0xFF	; 255
    c962:	8f 16       	cp	r8, r31
    c964:	9f 06       	cpc	r9, r31
    c966:	af 06       	cpc	r10, r31
    c968:	bf 06       	cpc	r11, r31
    c96a:	d9 f4       	brne	.+54     	; 0xc9a2 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    c96c:	0e 94 0e 6f 	call	0xde1c	; 0xde1c <get_fattime>
    c970:	ee 24       	eor	r14, r14
    c972:	e3 94       	inc	r14
    c974:	f1 2c       	mov	r15, r1
    c976:	05 c0       	rjmp	.+10     	; 0xc982 <f_mkdir+0xd6>
    c978:	0e 94 0e 6f 	call	0xde1c	; 0xde1c <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c97c:	92 e0       	ldi	r25, 0x02	; 2
    c97e:	e9 2e       	mov	r14, r25
    c980:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c982:	00 e0       	ldi	r16, 0x00	; 0
    c984:	10 e0       	ldi	r17, 0x00	; 0
    c986:	98 01       	movw	r18, r16
    c988:	b5 01       	movw	r22, r10
    c98a:	a4 01       	movw	r20, r8
    c98c:	ce 01       	movw	r24, r28
    c98e:	8f 96       	adiw	r24, 0x2f	; 47
    c990:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <remove_chain>
    c994:	c3 cf       	rjmp	.-122    	; 0xc91c <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c996:	0e 94 0e 6f 	call	0xde1c	; 0xde1c <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c99a:	87 e0       	ldi	r24, 0x07	; 7
    c99c:	e8 2e       	mov	r14, r24
    c99e:	f1 2c       	mov	r15, r1
    c9a0:	f0 cf       	rjmp	.-32     	; 0xc982 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c9a2:	0e 94 0e 6f 	call	0xde1c	; 0xde1c <get_fattime>
    c9a6:	2b 01       	movw	r4, r22
    c9a8:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c9aa:	b5 01       	movw	r22, r10
    c9ac:	a4 01       	movw	r20, r8
    c9ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9b2:	0e 94 68 49 	call	0x92d0	; 0x92d0 <dir_clear>
    c9b6:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    c9b8:	89 2b       	or	r24, r25
    c9ba:	19 f7       	brne	.-58     	; 0xc982 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c9bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9be:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9c0:	4b e0       	ldi	r20, 0x0B	; 11
    c9c2:	50 e0       	ldi	r21, 0x00	; 0
    c9c4:	60 e2       	ldi	r22, 0x20	; 32
    c9c6:	70 e0       	ldi	r23, 0x00	; 0
    c9c8:	c5 96       	adiw	r24, 0x35	; 53
    c9ca:	0e 94 50 45 	call	0x8aa0	; 0x8aa0 <mem_set>
						fs->win[DIR_Name] = '.';
    c9ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9d2:	1e e2       	ldi	r17, 0x2E	; 46
    c9d4:	fc 01       	movw	r30, r24
    c9d6:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    c9d8:	e0 5c       	subi	r30, 0xC0	; 192
    c9da:	ff 4f       	sbci	r31, 0xFF	; 255
    c9dc:	20 e1       	ldi	r18, 0x10	; 16
    c9de:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    c9e0:	b3 01       	movw	r22, r6
    c9e2:	a2 01       	movw	r20, r4
    c9e4:	85 5b       	subi	r24, 0xB5	; 181
    c9e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c9e8:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
						st_clust(fs, fs->win, dcl);
    c9ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9f0:	bc 01       	movw	r22, r24
    c9f2:	6b 5c       	subi	r22, 0xCB	; 203
    c9f4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9f6:	a5 01       	movw	r20, r10
    c9f8:	94 01       	movw	r18, r8
    c9fa:	0e 94 96 48 	call	0x912c	; 0x912c <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    c9fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca00:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca02:	bc 01       	movw	r22, r24
    ca04:	6b 5c       	subi	r22, 0xCB	; 203
    ca06:	7f 4f       	sbci	r23, 0xFF	; 255
    ca08:	40 e2       	ldi	r20, 0x20	; 32
    ca0a:	50 e0       	ldi	r21, 0x00	; 0
    ca0c:	8b 5a       	subi	r24, 0xAB	; 171
    ca0e:	9f 4f       	sbci	r25, 0xFF	; 255
    ca10:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    ca14:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca16:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca18:	fc 01       	movw	r30, r24
    ca1a:	ea 5a       	subi	r30, 0xAA	; 170
    ca1c:	ff 4f       	sbci	r31, 0xFF	; 255
    ca1e:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    ca20:	2f 81       	ldd	r18, Y+7	; 0x07
    ca22:	38 85       	ldd	r19, Y+8	; 0x08
    ca24:	49 85       	ldd	r20, Y+9	; 0x09
    ca26:	5a 85       	ldd	r21, Y+10	; 0x0a
    ca28:	bc 01       	movw	r22, r24
    ca2a:	6b 5a       	subi	r22, 0xAB	; 171
    ca2c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca2e:	0e 94 96 48 	call	0x912c	; 0x912c <st_clust.isra.5>
						fs->wflag = 1;
    ca32:	ed ad       	ldd	r30, Y+61	; 0x3d
    ca34:	fe ad       	ldd	r31, Y+62	; 0x3e
    ca36:	81 e0       	ldi	r24, 0x01	; 1
    ca38:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    ca3a:	ce 01       	movw	r24, r28
    ca3c:	01 96       	adiw	r24, 0x01	; 1
    ca3e:	0e 94 4c 54 	call	0xa898	; 0xa898 <dir_register>
    ca42:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    ca44:	89 2b       	or	r24, r25
    ca46:	09 f0       	breq	.+2      	; 0xca4a <f_mkdir+0x19e>
    ca48:	9c cf       	rjmp	.-200    	; 0xc982 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    ca4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ca4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ca4e:	b3 01       	movw	r22, r6
    ca50:	a2 01       	movw	r20, r4
    ca52:	46 96       	adiw	r24, 0x16	; 22
    ca54:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    ca58:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ca5a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ca5c:	a5 01       	movw	r20, r10
    ca5e:	94 01       	movw	r18, r8
    ca60:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca62:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca64:	0e 94 96 48 	call	0x912c	; 0x912c <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    ca68:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ca6a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ca6c:	80 e1       	ldi	r24, 0x10	; 16
    ca6e:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    ca70:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca72:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca74:	21 e0       	ldi	r18, 0x01	; 1
    ca76:	fc 01       	movw	r30, r24
    ca78:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    ca7a:	0e 94 f6 48 	call	0x91ec	; 0x91ec <sync_fs>
    ca7e:	7c 01       	movw	r14, r24
    ca80:	4d cf       	rjmp	.-358    	; 0xc91c <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ca82:	c0 5c       	subi	r28, 0xC0	; 192
    ca84:	df 4f       	sbci	r29, 0xFF	; 255
    ca86:	e0 e1       	ldi	r30, 0x10	; 16
    ca88:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

0000ca8c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    ca8c:	a2 e8       	ldi	r26, 0x82	; 130
    ca8e:	b0 e0       	ldi	r27, 0x00	; 0
    ca90:	ec e4       	ldi	r30, 0x4C	; 76
    ca92:	f5 e6       	ldi	r31, 0x65	; 101
    ca94:	0c 94 8c e1 	jmp	0x1c318	; 0x1c318 <__prologue_saves__+0x12>
    ca98:	c1 58       	subi	r28, 0x81	; 129
    ca9a:	df 4f       	sbci	r29, 0xFF	; 255
    ca9c:	99 83       	std	Y+1, r25	; 0x01
    ca9e:	88 83       	st	Y, r24
    caa0:	cf 57       	subi	r28, 0x7F	; 127
    caa2:	d0 40       	sbci	r29, 0x00	; 0
    caa4:	cf 57       	subi	r28, 0x7F	; 127
    caa6:	df 4f       	sbci	r29, 0xFF	; 255
    caa8:	79 83       	std	Y+1, r23	; 0x01
    caaa:	68 83       	st	Y, r22
    caac:	c1 58       	subi	r28, 0x81	; 129
    caae:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cab0:	ce 01       	movw	r24, r28
    cab2:	8f 57       	subi	r24, 0x7F	; 127
    cab4:	9f 4f       	sbci	r25, 0xFF	; 255
    cab6:	0e 94 61 46 	call	0x8cc2	; 0x8cc2 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    caba:	42 e0       	ldi	r20, 0x02	; 2
    cabc:	be 01       	movw	r22, r28
    cabe:	63 58       	subi	r22, 0x83	; 131
    cac0:	7f 4f       	sbci	r23, 0xFF	; 255
    cac2:	ce 01       	movw	r24, r28
    cac4:	81 58       	subi	r24, 0x81	; 129
    cac6:	9f 4f       	sbci	r25, 0xFF	; 255
    cac8:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
	if (res == FR_OK) {
    cacc:	00 97       	sbiw	r24, 0x00	; 0
    cace:	09 f0       	breq	.+2      	; 0xcad2 <f_rename+0x46>
    cad0:	ed c0       	rjmp	.+474    	; 0xccac <f_rename+0x220>
		djo.obj.fs = fs;
    cad2:	ef 96       	adiw	r28, 0x3f	; 63
    cad4:	8e ad       	ldd	r24, Y+62	; 0x3e
    cad6:	9f ad       	ldd	r25, Y+63	; 0x3f
    cad8:	ef 97       	sbiw	r28, 0x3f	; 63
    cada:	98 ab       	std	Y+48, r25	; 0x30
    cadc:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cade:	80 e0       	ldi	r24, 0x00	; 0
    cae0:	92 e0       	ldi	r25, 0x02	; 2
    cae2:	2b d2       	rcall	.+1110   	; 0xcf3a <ff_memalloc>
    cae4:	6c 01       	movw	r12, r24
    cae6:	00 97       	sbiw	r24, 0x00	; 0
    cae8:	f1 f0       	breq	.+60     	; 0xcb26 <f_rename+0x9a>
    caea:	ef 96       	adiw	r28, 0x3f	; 63
    caec:	ee ad       	ldd	r30, Y+62	; 0x3e
    caee:	ff ad       	ldd	r31, Y+63	; 0x3f
    caf0:	ef 97       	sbiw	r28, 0x3f	; 63
    caf2:	94 87       	std	Z+12, r25	; 0x0c
    caf4:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    caf6:	c1 58       	subi	r28, 0x81	; 129
    caf8:	df 4f       	sbci	r29, 0xFF	; 255
    cafa:	68 81       	ld	r22, Y
    cafc:	79 81       	ldd	r23, Y+1	; 0x01
    cafe:	cf 57       	subi	r28, 0x7F	; 127
    cb00:	d0 40       	sbci	r29, 0x00	; 0
    cb02:	ce 01       	movw	r24, r28
    cb04:	8f 96       	adiw	r24, 0x2f	; 47
    cb06:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    cb0a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cb0c:	89 2b       	or	r24, r25
    cb0e:	39 f4       	brne	.+14     	; 0xcb1e <f_rename+0x92>
    cb10:	67 96       	adiw	r28, 0x17	; 23
    cb12:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb14:	67 97       	sbiw	r28, 0x17	; 23
    cb16:	80 7a       	andi	r24, 0xA0	; 160
    cb18:	49 f0       	breq	.+18     	; 0xcb2c <f_rename+0xa0>
    cb1a:	06 e0       	ldi	r16, 0x06	; 6
    cb1c:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cb1e:	c6 01       	movw	r24, r12
    cb20:	0f d2       	rcall	.+1054   	; 0xcf40 <ff_memfree>
    cb22:	c8 01       	movw	r24, r16
    cb24:	c3 c0       	rjmp	.+390    	; 0xccac <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb26:	81 e1       	ldi	r24, 0x11	; 17
    cb28:	90 e0       	ldi	r25, 0x00	; 0
    cb2a:	c0 c0       	rjmp	.+384    	; 0xccac <f_rename+0x220>
    cb2c:	2b 96       	adiw	r28, 0x0b	; 11
    cb2e:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb30:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb32:	2b 97       	sbiw	r28, 0x0b	; 11
    cb34:	40 e2       	ldi	r20, 0x20	; 32
    cb36:	50 e0       	ldi	r21, 0x00	; 0
    cb38:	ce 01       	movw	r24, r28
    cb3a:	83 5a       	subi	r24, 0xA3	; 163
    cb3c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb3e:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
    cb42:	4e e2       	ldi	r20, 0x2E	; 46
    cb44:	50 e0       	ldi	r21, 0x00	; 0
    cb46:	be 01       	movw	r22, r28
    cb48:	61 5d       	subi	r22, 0xD1	; 209
    cb4a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb4c:	ce 01       	movw	r24, r28
    cb4e:	01 96       	adiw	r24, 0x01	; 1
    cb50:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cb54:	cf 57       	subi	r28, 0x7F	; 127
    cb56:	df 4f       	sbci	r29, 0xFF	; 255
    cb58:	68 81       	ld	r22, Y
    cb5a:	79 81       	ldd	r23, Y+1	; 0x01
    cb5c:	c1 58       	subi	r28, 0x81	; 129
    cb5e:	d0 40       	sbci	r29, 0x00	; 0
    cb60:	ce 01       	movw	r24, r28
    cb62:	01 96       	adiw	r24, 0x01	; 1
    cb64:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    cb68:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cb6a:	89 2b       	or	r24, r25
    cb6c:	f9 f4       	brne	.+62     	; 0xcbac <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cb6e:	4f 81       	ldd	r20, Y+7	; 0x07
    cb70:	58 85       	ldd	r21, Y+8	; 0x08
    cb72:	69 85       	ldd	r22, Y+9	; 0x09
    cb74:	7a 85       	ldd	r23, Y+10	; 0x0a
    cb76:	8d a9       	ldd	r24, Y+53	; 0x35
    cb78:	9e a9       	ldd	r25, Y+54	; 0x36
    cb7a:	af a9       	ldd	r26, Y+55	; 0x37
    cb7c:	b8 ad       	ldd	r27, Y+56	; 0x38
    cb7e:	48 17       	cp	r20, r24
    cb80:	59 07       	cpc	r21, r25
    cb82:	6a 07       	cpc	r22, r26
    cb84:	7b 07       	cpc	r23, r27
    cb86:	09 f0       	breq	.+2      	; 0xcb8a <f_rename+0xfe>
    cb88:	8b c0       	rjmp	.+278    	; 0xcca0 <f_rename+0x214>
    cb8a:	4f 85       	ldd	r20, Y+15	; 0x0f
    cb8c:	58 89       	ldd	r21, Y+16	; 0x10
    cb8e:	69 89       	ldd	r22, Y+17	; 0x11
    cb90:	7a 89       	ldd	r23, Y+18	; 0x12
    cb92:	21 96       	adiw	r28, 0x01	; 1
    cb94:	8c ad       	ldd	r24, Y+60	; 0x3c
    cb96:	9d ad       	ldd	r25, Y+61	; 0x3d
    cb98:	ae ad       	ldd	r26, Y+62	; 0x3e
    cb9a:	bf ad       	ldd	r27, Y+63	; 0x3f
    cb9c:	21 97       	sbiw	r28, 0x01	; 1
    cb9e:	48 17       	cp	r20, r24
    cba0:	59 07       	cpc	r21, r25
    cba2:	6a 07       	cpc	r22, r26
    cba4:	7b 07       	cpc	r23, r27
    cba6:	09 f0       	breq	.+2      	; 0xcbaa <f_rename+0x11e>
    cba8:	7b c0       	rjmp	.+246    	; 0xcca0 <f_rename+0x214>
    cbaa:	04 c0       	rjmp	.+8      	; 0xcbb4 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cbac:	04 30       	cpi	r16, 0x04	; 4
    cbae:	11 05       	cpc	r17, r1
    cbb0:	09 f0       	breq	.+2      	; 0xcbb4 <f_rename+0x128>
    cbb2:	b5 cf       	rjmp	.-150    	; 0xcb1e <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cbb4:	ce 01       	movw	r24, r28
    cbb6:	01 96       	adiw	r24, 0x01	; 1
    cbb8:	0e 94 4c 54 	call	0xa898	; 0xa898 <dir_register>
    cbbc:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cbbe:	89 2b       	or	r24, r25
    cbc0:	09 f0       	breq	.+2      	; 0xcbc4 <f_rename+0x138>
    cbc2:	ad cf       	rjmp	.-166    	; 0xcb1e <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cbc4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cbc6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cbc8:	6d e5       	ldi	r22, 0x5D	; 93
    cbca:	70 e0       	ldi	r23, 0x00	; 0
    cbcc:	6c 0f       	add	r22, r28
    cbce:	7d 1f       	adc	r23, r29
    cbd0:	63 5f       	subi	r22, 0xF3	; 243
    cbd2:	7f 4f       	sbci	r23, 0xFF	; 255
    cbd4:	43 e1       	ldi	r20, 0x13	; 19
    cbd6:	50 e0       	ldi	r21, 0x00	; 0
    cbd8:	c8 01       	movw	r24, r16
    cbda:	0d 96       	adiw	r24, 0x0d	; 13
    cbdc:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cbe0:	a9 96       	adiw	r28, 0x29	; 41
    cbe2:	8f ad       	ldd	r24, Y+63	; 0x3f
    cbe4:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cbe6:	84 ff       	sbrs	r24, 4
    cbe8:	80 62       	ori	r24, 0x20	; 32
    cbea:	f8 01       	movw	r30, r16
    cbec:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cbee:	ef 96       	adiw	r28, 0x3f	; 63
    cbf0:	ee ac       	ldd	r14, Y+62	; 0x3e
    cbf2:	ff ac       	ldd	r15, Y+63	; 0x3f
    cbf4:	ef 97       	sbiw	r28, 0x3f	; 63
    cbf6:	bb 24       	eor	r11, r11
    cbf8:	b3 94       	inc	r11
    cbfa:	f7 01       	movw	r30, r14
    cbfc:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cbfe:	f8 01       	movw	r30, r16
    cc00:	83 85       	ldd	r24, Z+11	; 0x0b
    cc02:	84 ff       	sbrs	r24, 4
    cc04:	3d c0       	rjmp	.+122    	; 0xcc80 <f_rename+0x1f4>
    cc06:	4d a9       	ldd	r20, Y+53	; 0x35
    cc08:	5e a9       	ldd	r21, Y+54	; 0x36
    cc0a:	6f a9       	ldd	r22, Y+55	; 0x37
    cc0c:	78 ad       	ldd	r23, Y+56	; 0x38
    cc0e:	8f 81       	ldd	r24, Y+7	; 0x07
    cc10:	98 85       	ldd	r25, Y+8	; 0x08
    cc12:	a9 85       	ldd	r26, Y+9	; 0x09
    cc14:	ba 85       	ldd	r27, Y+10	; 0x0a
    cc16:	48 17       	cp	r20, r24
    cc18:	59 07       	cpc	r21, r25
    cc1a:	6a 07       	cpc	r22, r26
    cc1c:	7b 07       	cpc	r23, r27
    cc1e:	81 f1       	breq	.+96     	; 0xcc80 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cc20:	b8 01       	movw	r22, r16
    cc22:	f7 01       	movw	r30, r14
    cc24:	80 81       	ld	r24, Z
    cc26:	0e 94 81 48 	call	0x9102	; 0x9102 <ld_clust.isra.4>
    cc2a:	ab 01       	movw	r20, r22
    cc2c:	bc 01       	movw	r22, r24
    cc2e:	c7 01       	movw	r24, r14
    cc30:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <clst2sect>
    cc34:	ab 01       	movw	r20, r22
    cc36:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cc38:	41 15       	cp	r20, r1
    cc3a:	51 05       	cpc	r21, r1
    cc3c:	61 05       	cpc	r22, r1
    cc3e:	71 05       	cpc	r23, r1
    cc40:	91 f1       	breq	.+100    	; 0xcca6 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cc42:	c7 01       	movw	r24, r14
    cc44:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    cc48:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cc4a:	89 2b       	or	r24, r25
    cc4c:	09 f0       	breq	.+2      	; 0xcc50 <f_rename+0x1c4>
    cc4e:	67 cf       	rjmp	.-306    	; 0xcb1e <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cc50:	ef 96       	adiw	r28, 0x3f	; 63
    cc52:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc54:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc56:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cc58:	fc 01       	movw	r30, r24
    cc5a:	ea 5a       	subi	r30, 0xAA	; 170
    cc5c:	ff 4f       	sbci	r31, 0xFF	; 255
    cc5e:	20 81       	ld	r18, Z
    cc60:	2e 32       	cpi	r18, 0x2E	; 46
    cc62:	71 f4       	brne	.+28     	; 0xcc80 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cc64:	2f 81       	ldd	r18, Y+7	; 0x07
    cc66:	38 85       	ldd	r19, Y+8	; 0x08
    cc68:	49 85       	ldd	r20, Y+9	; 0x09
    cc6a:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cc6c:	bc 01       	movw	r22, r24
    cc6e:	6b 5a       	subi	r22, 0xAB	; 171
    cc70:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cc72:	0e 94 96 48 	call	0x912c	; 0x912c <st_clust.isra.5>
									fs->wflag = 1;
    cc76:	ef 96       	adiw	r28, 0x3f	; 63
    cc78:	ee ad       	ldd	r30, Y+62	; 0x3e
    cc7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    cc7c:	ef 97       	sbiw	r28, 0x3f	; 63
    cc7e:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cc80:	ce 01       	movw	r24, r28
    cc82:	8f 96       	adiw	r24, 0x2f	; 47
    cc84:	0e 94 f6 52 	call	0xa5ec	; 0xa5ec <dir_remove>
    cc88:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cc8a:	89 2b       	or	r24, r25
    cc8c:	09 f0       	breq	.+2      	; 0xcc90 <f_rename+0x204>
    cc8e:	47 cf       	rjmp	.-370    	; 0xcb1e <f_rename+0x92>
					res = sync_fs(fs);
    cc90:	ef 96       	adiw	r28, 0x3f	; 63
    cc92:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc94:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc96:	ef 97       	sbiw	r28, 0x3f	; 63
    cc98:	0e 94 f6 48 	call	0x91ec	; 0x91ec <sync_fs>
    cc9c:	8c 01       	movw	r16, r24
    cc9e:	3f cf       	rjmp	.-386    	; 0xcb1e <f_rename+0x92>
    cca0:	08 e0       	ldi	r16, 0x08	; 8
    cca2:	10 e0       	ldi	r17, 0x00	; 0
    cca4:	3c cf       	rjmp	.-392    	; 0xcb1e <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cca6:	02 e0       	ldi	r16, 0x02	; 2
    cca8:	10 e0       	ldi	r17, 0x00	; 0
    ccaa:	39 cf       	rjmp	.-398    	; 0xcb1e <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ccac:	ce 57       	subi	r28, 0x7E	; 126
    ccae:	df 4f       	sbci	r29, 0xFF	; 255
    ccb0:	e9 e0       	ldi	r30, 0x09	; 9
    ccb2:	0c 94 a8 e1 	jmp	0x1c350	; 0x1c350 <__epilogue_restores__+0x12>

0000ccb6 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    ccb6:	a2 e3       	ldi	r26, 0x32	; 50
    ccb8:	b0 e0       	ldi	r27, 0x00	; 0
    ccba:	e1 e6       	ldi	r30, 0x61	; 97
    ccbc:	f6 e6       	ldi	r31, 0x66	; 102
    ccbe:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    ccc2:	9a ab       	std	Y+50, r25	; 0x32
    ccc4:	89 ab       	std	Y+49, r24	; 0x31
    ccc6:	e6 2e       	mov	r14, r22
    ccc8:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ccca:	42 e0       	ldi	r20, 0x02	; 2
    cccc:	be 01       	movw	r22, r28
    ccce:	61 5d       	subi	r22, 0xD1	; 209
    ccd0:	7f 4f       	sbci	r23, 0xFF	; 255
    ccd2:	ce 01       	movw	r24, r28
    ccd4:	c1 96       	adiw	r24, 0x31	; 49
    ccd6:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
	if (res == FR_OK) {
    ccda:	00 97       	sbiw	r24, 0x00	; 0
    ccdc:	a9 f5       	brne	.+106    	; 0xcd48 <f_chmod+0x92>
		dj.obj.fs = fs;
    ccde:	8f a5       	ldd	r24, Y+47	; 0x2f
    cce0:	98 a9       	ldd	r25, Y+48	; 0x30
    cce2:	9a 83       	std	Y+2, r25	; 0x02
    cce4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cce6:	80 e0       	ldi	r24, 0x00	; 0
    cce8:	92 e0       	ldi	r25, 0x02	; 2
    ccea:	27 d1       	rcall	.+590    	; 0xcf3a <ff_memalloc>
    ccec:	6c 01       	movw	r12, r24
    ccee:	00 97       	sbiw	r24, 0x00	; 0
    ccf0:	b1 f0       	breq	.+44     	; 0xcd1e <f_chmod+0x68>
    ccf2:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccf4:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccf6:	94 87       	std	Z+12, r25	; 0x0c
    ccf8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ccfa:	69 a9       	ldd	r22, Y+49	; 0x31
    ccfc:	7a a9       	ldd	r23, Y+50	; 0x32
    ccfe:	ce 01       	movw	r24, r28
    cd00:	01 96       	adiw	r24, 0x01	; 1
    cd02:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    cd06:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cd08:	89 2b       	or	r24, r25
    cd0a:	29 f4       	brne	.+10     	; 0xcd16 <f_chmod+0x60>
    cd0c:	88 a5       	ldd	r24, Y+40	; 0x28
    cd0e:	80 7a       	andi	r24, 0xA0	; 160
    cd10:	49 f0       	breq	.+18     	; 0xcd24 <f_chmod+0x6e>
    cd12:	06 e0       	ldi	r16, 0x06	; 6
    cd14:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd16:	c6 01       	movw	r24, r12
    cd18:	13 d1       	rcall	.+550    	; 0xcf40 <ff_memfree>
    cd1a:	c8 01       	movw	r24, r16
    cd1c:	15 c0       	rjmp	.+42     	; 0xcd48 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd1e:	81 e1       	ldi	r24, 0x11	; 17
    cd20:	90 e0       	ldi	r25, 0x00	; 0
    cd22:	12 c0       	rjmp	.+36     	; 0xcd48 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cd24:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd26:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd28:	83 85       	ldd	r24, Z+11	; 0x0b
    cd2a:	6e 2d       	mov	r22, r14
    cd2c:	68 27       	eor	r22, r24
    cd2e:	6f 21       	and	r22, r15
    cd30:	67 72       	andi	r22, 0x27	; 39
    cd32:	68 27       	eor	r22, r24
    cd34:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cd36:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd38:	98 a9       	ldd	r25, Y+48	; 0x30
    cd3a:	21 e0       	ldi	r18, 0x01	; 1
    cd3c:	fc 01       	movw	r30, r24
    cd3e:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cd40:	0e 94 f6 48 	call	0x91ec	; 0x91ec <sync_fs>
    cd44:	8c 01       	movw	r16, r24
    cd46:	e7 cf       	rjmp	.-50     	; 0xcd16 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd48:	e2 96       	adiw	r28, 0x32	; 50
    cd4a:	e8 e0       	ldi	r30, 0x08	; 8
    cd4c:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000cd50 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cd50:	a2 e3       	ldi	r26, 0x32	; 50
    cd52:	b0 e0       	ldi	r27, 0x00	; 0
    cd54:	ee ea       	ldi	r30, 0xAE	; 174
    cd56:	f6 e6       	ldi	r31, 0x66	; 102
    cd58:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    cd5c:	9a ab       	std	Y+50, r25	; 0x32
    cd5e:	89 ab       	std	Y+49, r24	; 0x31
    cd60:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cd62:	42 e0       	ldi	r20, 0x02	; 2
    cd64:	be 01       	movw	r22, r28
    cd66:	61 5d       	subi	r22, 0xD1	; 209
    cd68:	7f 4f       	sbci	r23, 0xFF	; 255
    cd6a:	ce 01       	movw	r24, r28
    cd6c:	c1 96       	adiw	r24, 0x31	; 49
    cd6e:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
	if (res == FR_OK) {
    cd72:	00 97       	sbiw	r24, 0x00	; 0
    cd74:	09 f0       	breq	.+2      	; 0xcd78 <f_utime+0x28>
    cd76:	41 c0       	rjmp	.+130    	; 0xcdfa <f_utime+0xaa>
		dj.obj.fs = fs;
    cd78:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd7a:	98 a9       	ldd	r25, Y+48	; 0x30
    cd7c:	9a 83       	std	Y+2, r25	; 0x02
    cd7e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cd80:	80 e0       	ldi	r24, 0x00	; 0
    cd82:	92 e0       	ldi	r25, 0x02	; 2
    cd84:	da d0       	rcall	.+436    	; 0xcf3a <ff_memalloc>
    cd86:	7c 01       	movw	r14, r24
    cd88:	00 97       	sbiw	r24, 0x00	; 0
    cd8a:	b1 f0       	breq	.+44     	; 0xcdb8 <f_utime+0x68>
    cd8c:	ef a5       	ldd	r30, Y+47	; 0x2f
    cd8e:	f8 a9       	ldd	r31, Y+48	; 0x30
    cd90:	94 87       	std	Z+12, r25	; 0x0c
    cd92:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cd94:	69 a9       	ldd	r22, Y+49	; 0x31
    cd96:	7a a9       	ldd	r23, Y+50	; 0x32
    cd98:	ce 01       	movw	r24, r28
    cd9a:	01 96       	adiw	r24, 0x01	; 1
    cd9c:	0e 94 da 55 	call	0xabb4	; 0xabb4 <follow_path>
    cda0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cda2:	89 2b       	or	r24, r25
    cda4:	29 f4       	brne	.+10     	; 0xcdb0 <f_utime+0x60>
    cda6:	88 a5       	ldd	r24, Y+40	; 0x28
    cda8:	80 7a       	andi	r24, 0xA0	; 160
    cdaa:	49 f0       	breq	.+18     	; 0xcdbe <f_utime+0x6e>
    cdac:	06 e0       	ldi	r16, 0x06	; 6
    cdae:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cdb0:	c7 01       	movw	r24, r14
    cdb2:	c6 d0       	rcall	.+396    	; 0xcf40 <ff_memfree>
    cdb4:	c8 01       	movw	r24, r16
    cdb6:	21 c0       	rjmp	.+66     	; 0xcdfa <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cdb8:	81 e1       	ldi	r24, 0x11	; 17
    cdba:	90 e0       	ldi	r25, 0x00	; 0
    cdbc:	1e c0       	rjmp	.+60     	; 0xcdfa <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cdbe:	f6 01       	movw	r30, r12
    cdc0:	44 81       	ldd	r20, Z+4	; 0x04
    cdc2:	55 81       	ldd	r21, Z+5	; 0x05
    cdc4:	60 e0       	ldi	r22, 0x00	; 0
    cdc6:	70 e0       	ldi	r23, 0x00	; 0
    cdc8:	ba 01       	movw	r22, r20
    cdca:	55 27       	eor	r21, r21
    cdcc:	44 27       	eor	r20, r20
    cdce:	86 81       	ldd	r24, Z+6	; 0x06
    cdd0:	97 81       	ldd	r25, Z+7	; 0x07
    cdd2:	a0 e0       	ldi	r26, 0x00	; 0
    cdd4:	b0 e0       	ldi	r27, 0x00	; 0
    cdd6:	48 2b       	or	r20, r24
    cdd8:	59 2b       	or	r21, r25
    cdda:	6a 2b       	or	r22, r26
    cddc:	7b 2b       	or	r23, r27
    cdde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cde0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cde2:	46 96       	adiw	r24, 0x16	; 22
    cde4:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <st_dword>
				fs->wflag = 1;
    cde8:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdea:	98 a9       	ldd	r25, Y+48	; 0x30
    cdec:	21 e0       	ldi	r18, 0x01	; 1
    cdee:	fc 01       	movw	r30, r24
    cdf0:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cdf2:	0e 94 f6 48 	call	0x91ec	; 0x91ec <sync_fs>
    cdf6:	8c 01       	movw	r16, r24
    cdf8:	db cf       	rjmp	.-74     	; 0xcdb0 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cdfa:	e2 96       	adiw	r28, 0x32	; 50
    cdfc:	e8 e0       	ldi	r30, 0x08	; 8
    cdfe:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000ce02 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    ce02:	a2 e3       	ldi	r26, 0x32	; 50
    ce04:	b0 e0       	ldi	r27, 0x00	; 0
    ce06:	e7 e0       	ldi	r30, 0x07	; 7
    ce08:	f7 e6       	ldi	r31, 0x67	; 103
    ce0a:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
    ce0e:	9a ab       	std	Y+50, r25	; 0x32
    ce10:	89 ab       	std	Y+49, r24	; 0x31
    ce12:	6b 01       	movw	r12, r22
    ce14:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    ce16:	40 e0       	ldi	r20, 0x00	; 0
    ce18:	be 01       	movw	r22, r28
    ce1a:	61 5d       	subi	r22, 0xD1	; 209
    ce1c:	7f 4f       	sbci	r23, 0xFF	; 255
    ce1e:	ce 01       	movw	r24, r28
    ce20:	c1 96       	adiw	r24, 0x31	; 49
    ce22:	0e 94 8b 4a 	call	0x9516	; 0x9516 <mount_volume>
    ce26:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    ce28:	89 2b       	or	r24, r25
    ce2a:	09 f0       	breq	.+2      	; 0xce2e <f_getlabel+0x2c>
    ce2c:	81 c0       	rjmp	.+258    	; 0xcf30 <f_getlabel+0x12e>
    ce2e:	c1 14       	cp	r12, r1
    ce30:	d1 04       	cpc	r13, r1
    ce32:	09 f4       	brne	.+2      	; 0xce36 <f_getlabel+0x34>
    ce34:	53 c0       	rjmp	.+166    	; 0xcedc <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    ce36:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce38:	98 a9       	ldd	r25, Y+48	; 0x30
    ce3a:	9a 83       	std	Y+2, r25	; 0x02
    ce3c:	89 83       	std	Y+1, r24	; 0x01
    ce3e:	1f 82       	std	Y+7, r1	; 0x07
    ce40:	18 86       	std	Y+8, r1	; 0x08
    ce42:	19 86       	std	Y+9, r1	; 0x09
    ce44:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    ce46:	40 e0       	ldi	r20, 0x00	; 0
    ce48:	50 e0       	ldi	r21, 0x00	; 0
    ce4a:	ba 01       	movw	r22, r20
    ce4c:	ce 01       	movw	r24, r28
    ce4e:	01 96       	adiw	r24, 0x01	; 1
    ce50:	0e 94 94 4e 	call	0x9d28	; 0x9d28 <dir_sdi>
		if (res == FR_OK) {
    ce54:	00 97       	sbiw	r24, 0x00	; 0
    ce56:	e9 f5       	brne	.+122    	; 0xced2 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    ce58:	61 e0       	ldi	r22, 0x01	; 1
    ce5a:	70 e0       	ldi	r23, 0x00	; 0
    ce5c:	ce 01       	movw	r24, r28
    ce5e:	01 96       	adiw	r24, 0x01	; 1
    ce60:	0e 94 2d 52 	call	0xa45a	; 0xa45a <dir_read>
		 	if (res == FR_OK) {
    ce64:	00 97       	sbiw	r24, 0x00	; 0
    ce66:	a9 f5       	brne	.+106    	; 0xced2 <f_getlabel+0xd0>
    ce68:	00 e0       	ldi	r16, 0x00	; 0
    ce6a:	10 e0       	ldi	r17, 0x00	; 0
    ce6c:	80 e0       	ldi	r24, 0x00	; 0
    ce6e:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    ce70:	4c 01       	movw	r8, r24
    ce72:	2f ef       	ldi	r18, 0xFF	; 255
    ce74:	82 1a       	sub	r8, r18
    ce76:	92 0a       	sbc	r9, r18
    ce78:	2b 8d       	ldd	r18, Y+27	; 0x1b
    ce7a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    ce7c:	f9 01       	movw	r30, r18
    ce7e:	e8 0f       	add	r30, r24
    ce80:	f9 1f       	adc	r31, r25
    ce82:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    ce84:	65 eb       	ldi	r22, 0xB5	; 181
    ce86:	71 e0       	ldi	r23, 0x01	; 1
    ce88:	90 e0       	ldi	r25, 0x00	; 0
    ce8a:	90 d0       	rcall	.+288    	; 0xcfac <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    ce8c:	00 97       	sbiw	r24, 0x00	; 0
    ce8e:	19 f4       	brne	.+6      	; 0xce96 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    ce90:	00 e0       	ldi	r16, 0x00	; 0
    ce92:	10 e0       	ldi	r17, 0x00	; 0
    ce94:	13 c0       	rjmp	.+38     	; 0xcebc <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    ce96:	bc 01       	movw	r22, r24
    ce98:	80 e0       	ldi	r24, 0x00	; 0
    ce9a:	90 e0       	ldi	r25, 0x00	; 0
    ce9c:	24 e0       	ldi	r18, 0x04	; 4
    ce9e:	30 e0       	ldi	r19, 0x00	; 0
    cea0:	a6 01       	movw	r20, r12
    cea2:	40 0f       	add	r20, r16
    cea4:	51 1f       	adc	r21, r17
    cea6:	0e 94 c4 46 	call	0x8d88	; 0x8d88 <put_utf>
    ceaa:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    ceac:	00 97       	sbiw	r24, 0x00	; 0
    ceae:	81 f3       	breq	.-32     	; 0xce90 <f_getlabel+0x8e>
						di += wc;
    ceb0:	08 0f       	add	r16, r24
    ceb2:	19 1f       	adc	r17, r25
    ceb4:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    ceb6:	8b 30       	cpi	r24, 0x0B	; 11
    ceb8:	91 05       	cpc	r25, r1
    ceba:	d1 f6       	brne	.-76     	; 0xce70 <f_getlabel+0x6e>
    cebc:	f6 01       	movw	r30, r12
    cebe:	e0 0f       	add	r30, r16
    cec0:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cec2:	10 82       	st	Z, r1
						if (di == 0) break;
    cec4:	ce 16       	cp	r12, r30
    cec6:	df 06       	cpc	r13, r31
    cec8:	49 f0       	breq	.+18     	; 0xcedc <f_getlabel+0xda>
					} while (label[--di] == ' ');
    ceca:	82 91       	ld	r24, -Z
    cecc:	80 32       	cpi	r24, 0x20	; 32
    cece:	c9 f3       	breq	.-14     	; 0xcec2 <f_getlabel+0xc0>
    ced0:	05 c0       	rjmp	.+10     	; 0xcedc <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ced2:	84 30       	cpi	r24, 0x04	; 4
    ced4:	91 05       	cpc	r25, r1
    ced6:	59 f5       	brne	.+86     	; 0xcf2e <f_getlabel+0x12c>
			label[0] = 0;
    ced8:	f6 01       	movw	r30, r12
    ceda:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cedc:	a1 14       	cp	r10, r1
    cede:	b1 04       	cpc	r11, r1
    cee0:	39 f1       	breq	.+78     	; 0xcf30 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    cee2:	8f a5       	ldd	r24, Y+47	; 0x2f
    cee4:	98 a9       	ldd	r25, Y+48	; 0x30
    cee6:	fc 01       	movw	r30, r24
    cee8:	41 a1       	ldd	r20, Z+33	; 0x21
    ceea:	52 a1       	ldd	r21, Z+34	; 0x22
    ceec:	63 a1       	ldd	r22, Z+35	; 0x23
    ceee:	74 a1       	ldd	r23, Z+36	; 0x24
    cef0:	0e 94 10 4a 	call	0x9420	; 0x9420 <move_window>
    cef4:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    cef6:	89 2b       	or	r24, r25
    cef8:	d9 f4       	brne	.+54     	; 0xcf30 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    cefa:	ef a5       	ldd	r30, Y+47	; 0x2f
    cefc:	f8 a9       	ldd	r31, Y+48	; 0x30
    cefe:	80 81       	ld	r24, Z
    cf00:	83 30       	cpi	r24, 0x03	; 3
    cf02:	29 f0       	breq	.+10     	; 0xcf0e <f_getlabel+0x10c>
    cf04:	84 30       	cpi	r24, 0x04	; 4
    cf06:	31 f0       	breq	.+12     	; 0xcf14 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    cf08:	87 e2       	ldi	r24, 0x27	; 39
    cf0a:	90 e0       	ldi	r25, 0x00	; 0
    cf0c:	05 c0       	rjmp	.+10     	; 0xcf18 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    cf0e:	83 e4       	ldi	r24, 0x43	; 67
    cf10:	90 e0       	ldi	r25, 0x00	; 0
    cf12:	02 c0       	rjmp	.+4      	; 0xcf18 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    cf14:	84 e6       	ldi	r24, 0x64	; 100
    cf16:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    cf18:	f5 96       	adiw	r30, 0x35	; 53
    cf1a:	8e 0f       	add	r24, r30
    cf1c:	9f 1f       	adc	r25, r31
    cf1e:	0e 94 35 45 	call	0x8a6a	; 0x8a6a <ld_dword>
    cf22:	f5 01       	movw	r30, r10
    cf24:	60 83       	st	Z, r22
    cf26:	71 83       	std	Z+1, r23	; 0x01
    cf28:	82 83       	std	Z+2, r24	; 0x02
    cf2a:	93 83       	std	Z+3, r25	; 0x03
    cf2c:	01 c0       	rjmp	.+2      	; 0xcf30 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cf2e:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    cf30:	c7 01       	movw	r24, r14
    cf32:	e2 96       	adiw	r28, 0x32	; 50
    cf34:	ec e0       	ldi	r30, 0x0C	; 12
    cf36:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

0000cf3a <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    cf3a:	0c 94 66 25 	jmp	0x4acc	; 0x4acc <safemalloc>
}
    cf3e:	08 95       	ret

0000cf40 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    cf40:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <safefree>
    cf44:	08 95       	ret

0000cf46 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    cf46:	cf 92       	push	r12
    cf48:	df 92       	push	r13
    cf4a:	ef 92       	push	r14
    cf4c:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    cf4e:	60 38       	cpi	r22, 0x80	; 128
    cf50:	71 05       	cpc	r23, r1
    cf52:	81 05       	cpc	r24, r1
    cf54:	91 05       	cpc	r25, r1
    cf56:	10 f4       	brcc	.+4      	; 0xcf5c <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    cf58:	cb 01       	movw	r24, r22
    cf5a:	23 c0       	rjmp	.+70     	; 0xcfa2 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    cf5c:	61 15       	cp	r22, r1
    cf5e:	71 05       	cpc	r23, r1
    cf60:	21 e0       	ldi	r18, 0x01	; 1
    cf62:	82 07       	cpc	r24, r18
    cf64:	91 05       	cpc	r25, r1
    cf66:	d8 f4       	brcc	.+54     	; 0xcf9e <ff_uni2oem+0x58>
    cf68:	45 3b       	cpi	r20, 0xB5	; 181
    cf6a:	51 40       	sbci	r21, 0x01	; 1
    cf6c:	c1 f4       	brne	.+48     	; 0xcf9e <ff_uni2oem+0x58>
    cf6e:	e6 ea       	ldi	r30, 0xA6	; 166
    cf70:	f7 e0       	ldi	r31, 0x07	; 7
    cf72:	20 e0       	ldi	r18, 0x00	; 0
    cf74:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    cf76:	c1 90       	ld	r12, Z+
    cf78:	d1 90       	ld	r13, Z+
    cf7a:	e1 2c       	mov	r14, r1
    cf7c:	f1 2c       	mov	r15, r1
    cf7e:	6c 15       	cp	r22, r12
    cf80:	7d 05       	cpc	r23, r13
    cf82:	8e 05       	cpc	r24, r14
    cf84:	9f 05       	cpc	r25, r15
    cf86:	29 f0       	breq	.+10     	; 0xcf92 <ff_uni2oem+0x4c>
    cf88:	2f 5f       	subi	r18, 0xFF	; 255
    cf8a:	3f 4f       	sbci	r19, 0xFF	; 255
    cf8c:	20 38       	cpi	r18, 0x80	; 128
    cf8e:	31 05       	cpc	r19, r1
    cf90:	91 f7       	brne	.-28     	; 0xcf76 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    cf92:	b9 01       	movw	r22, r18
    cf94:	60 58       	subi	r22, 0x80	; 128
    cf96:	7f 4f       	sbci	r23, 0xFF	; 255
    cf98:	cb 01       	movw	r24, r22
    cf9a:	99 27       	eor	r25, r25
    cf9c:	02 c0       	rjmp	.+4      	; 0xcfa2 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cf9e:	80 e0       	ldi	r24, 0x00	; 0
    cfa0:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    cfa2:	ff 90       	pop	r15
    cfa4:	ef 90       	pop	r14
    cfa6:	df 90       	pop	r13
    cfa8:	cf 90       	pop	r12
    cfaa:	08 95       	ret

0000cfac <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    cfac:	80 38       	cpi	r24, 0x80	; 128
    cfae:	91 05       	cpc	r25, r1
    cfb0:	88 f0       	brcs	.+34     	; 0xcfd4 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    cfb2:	65 3b       	cpi	r22, 0xB5	; 181
    cfb4:	71 40       	sbci	r23, 0x01	; 1
    cfb6:	61 f4       	brne	.+24     	; 0xcfd0 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    cfb8:	8f 3f       	cpi	r24, 0xFF	; 255
    cfba:	91 05       	cpc	r25, r1
    cfbc:	09 f0       	breq	.+2      	; 0xcfc0 <ff_oem2uni+0x14>
    cfbe:	40 f4       	brcc	.+16     	; 0xcfd0 <ff_oem2uni+0x24>
    cfc0:	88 0f       	add	r24, r24
    cfc2:	99 1f       	adc	r25, r25
    cfc4:	fc 01       	movw	r30, r24
    cfc6:	ea 55       	subi	r30, 0x5A	; 90
    cfc8:	f9 4f       	sbci	r31, 0xF9	; 249
    cfca:	80 81       	ld	r24, Z
    cfcc:	91 81       	ldd	r25, Z+1	; 0x01
    cfce:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cfd0:	80 e0       	ldi	r24, 0x00	; 0
    cfd2:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    cfd4:	08 95       	ret

0000cfd6 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    cfd6:	61 15       	cp	r22, r1
    cfd8:	71 05       	cpc	r23, r1
    cfda:	21 e0       	ldi	r18, 0x01	; 1
    cfdc:	82 07       	cpc	r24, r18
    cfde:	91 05       	cpc	r25, r1
    cfe0:	08 f0       	brcs	.+2      	; 0xcfe4 <ff_wtoupper+0xe>
    cfe2:	5a c0       	rjmp	.+180    	; 0xd098 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    cfe4:	61 15       	cp	r22, r1
    cfe6:	80 e1       	ldi	r24, 0x10	; 16
    cfe8:	78 07       	cpc	r23, r24
    cfea:	18 f0       	brcs	.+6      	; 0xcff2 <ff_wtoupper+0x1c>
    cfec:	a8 ef       	ldi	r26, 0xF8	; 248
    cfee:	b4 e0       	ldi	r27, 0x04	; 4
    cff0:	02 c0       	rjmp	.+4      	; 0xcff6 <ff_wtoupper+0x20>
    cff2:	a4 eb       	ldi	r26, 0xB4	; 180
    cff4:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    cff6:	2d 91       	ld	r18, X+
    cff8:	3c 91       	ld	r19, X
    cffa:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    cffc:	21 15       	cp	r18, r1
    cffe:	31 05       	cpc	r19, r1
    d000:	09 f4       	brne	.+2      	; 0xd004 <ff_wtoupper+0x2e>
    d002:	48 c0       	rjmp	.+144    	; 0xd094 <ff_wtoupper+0xbe>
    d004:	62 17       	cp	r22, r18
    d006:	73 07       	cpc	r23, r19
    d008:	08 f4       	brcc	.+2      	; 0xd00c <ff_wtoupper+0x36>
    d00a:	44 c0       	rjmp	.+136    	; 0xd094 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d00c:	14 96       	adiw	r26, 0x04	; 4
    d00e:	fd 01       	movw	r30, r26
    d010:	32 97       	sbiw	r30, 0x02	; 2
    d012:	80 81       	ld	r24, Z
    d014:	91 81       	ldd	r25, Z+1	; 0x01
    d016:	e9 2f       	mov	r30, r25
    d018:	ff 27       	eor	r31, r31
    d01a:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d01c:	a9 01       	movw	r20, r18
    d01e:	48 0f       	add	r20, r24
    d020:	59 1f       	adc	r21, r25
    d022:	64 17       	cp	r22, r20
    d024:	75 07       	cpc	r23, r21
    d026:	70 f5       	brcc	.+92     	; 0xd084 <ff_wtoupper+0xae>
				switch (cmd) {
    d028:	e9 30       	cpi	r30, 0x09	; 9
    d02a:	f1 05       	cpc	r31, r1
    d02c:	98 f5       	brcc	.+102    	; 0xd094 <ff_wtoupper+0xbe>
    d02e:	ec 54       	subi	r30, 0x4C	; 76
    d030:	ff 4f       	sbci	r31, 0xFF	; 255
    d032:	0c 94 54 e1 	jmp	0x1c2a8	; 0x1c2a8 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d036:	62 1b       	sub	r22, r18
    d038:	73 0b       	sbc	r23, r19
    d03a:	fb 01       	movw	r30, r22
    d03c:	ee 0f       	add	r30, r30
    d03e:	ff 1f       	adc	r31, r31
    d040:	ea 0f       	add	r30, r26
    d042:	fb 1f       	adc	r31, r27
    d044:	60 81       	ld	r22, Z
    d046:	71 81       	ldd	r23, Z+1	; 0x01
    d048:	25 c0       	rjmp	.+74     	; 0xd094 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d04a:	cb 01       	movw	r24, r22
    d04c:	82 1b       	sub	r24, r18
    d04e:	93 0b       	sbc	r25, r19
    d050:	81 70       	andi	r24, 0x01	; 1
    d052:	99 27       	eor	r25, r25
    d054:	68 1b       	sub	r22, r24
    d056:	79 0b       	sbc	r23, r25
    d058:	1d c0       	rjmp	.+58     	; 0xd094 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d05a:	60 51       	subi	r22, 0x10	; 16
    d05c:	71 09       	sbc	r23, r1
    d05e:	1a c0       	rjmp	.+52     	; 0xd094 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d060:	60 52       	subi	r22, 0x20	; 32
    d062:	71 09       	sbc	r23, r1
    d064:	17 c0       	rjmp	.+46     	; 0xd094 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d066:	60 53       	subi	r22, 0x30	; 48
    d068:	71 09       	sbc	r23, r1
    d06a:	14 c0       	rjmp	.+40     	; 0xd094 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d06c:	6a 51       	subi	r22, 0x1A	; 26
    d06e:	71 09       	sbc	r23, r1
    d070:	11 c0       	rjmp	.+34     	; 0xd094 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d072:	68 5f       	subi	r22, 0xF8	; 248
    d074:	7f 4f       	sbci	r23, 0xFF	; 255
    d076:	0e c0       	rjmp	.+28     	; 0xd094 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d078:	60 55       	subi	r22, 0x50	; 80
    d07a:	71 09       	sbc	r23, r1
    d07c:	0b c0       	rjmp	.+22     	; 0xd094 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d07e:	60 56       	subi	r22, 0x60	; 96
    d080:	7c 41       	sbci	r23, 0x1C	; 28
    d082:	08 c0       	rjmp	.+16     	; 0xd094 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d084:	ef 2b       	or	r30, r31
    d086:	09 f0       	breq	.+2      	; 0xd08a <ff_wtoupper+0xb4>
    d088:	b6 cf       	rjmp	.-148    	; 0xcff6 <ff_wtoupper+0x20>
    d08a:	88 0f       	add	r24, r24
    d08c:	99 1f       	adc	r25, r25
    d08e:	a8 0f       	add	r26, r24
    d090:	b9 1f       	adc	r27, r25
    d092:	b1 cf       	rjmp	.-158    	; 0xcff6 <ff_wtoupper+0x20>
		}
		uni = uc;
    d094:	80 e0       	ldi	r24, 0x00	; 0
    d096:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d098:	08 95       	ret

0000d09a <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d09a:	81 11       	cpse	r24, r1
    d09c:	02 c0       	rjmp	.+4      	; 0xd0a2 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d09e:	a1 c1       	rjmp	.+834    	; 0xd3e2 <mmc_disk_status>
    d0a0:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d0a2:	81 e0       	ldi	r24, 0x01	; 1
}
    d0a4:	08 95       	ret

0000d0a6 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d0a6:	81 11       	cpse	r24, r1
    d0a8:	02 c0       	rjmp	.+4      	; 0xd0ae <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d0aa:	f6 c0       	rjmp	.+492    	; 0xd298 <mmc_disk_initialize>
    d0ac:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d0ae:	81 e0       	ldi	r24, 0x01	; 1
}
    d0b0:	08 95       	ret

0000d0b2 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d0b2:	0f 93       	push	r16
    d0b4:	1f 93       	push	r17
    d0b6:	fb 01       	movw	r30, r22
    switch (pdrv)
    d0b8:	81 11       	cpse	r24, r1
    d0ba:	06 c0       	rjmp	.+12     	; 0xd0c8 <disk_read+0x16>
    d0bc:	ba 01       	movw	r22, r20
    d0be:	a9 01       	movw	r20, r18
    d0c0:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d0c2:	98 01       	movw	r18, r16
    d0c4:	91 d1       	rcall	.+802    	; 0xd3e8 <mmc_disk_read>
    d0c6:	02 c0       	rjmp	.+4      	; 0xd0cc <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d0c8:	84 e0       	ldi	r24, 0x04	; 4
    d0ca:	90 e0       	ldi	r25, 0x00	; 0
}
    d0cc:	1f 91       	pop	r17
    d0ce:	0f 91       	pop	r16
    d0d0:	08 95       	ret

0000d0d2 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d0d2:	0f 93       	push	r16
    d0d4:	1f 93       	push	r17
    d0d6:	fb 01       	movw	r30, r22
    switch (pdrv)
    d0d8:	81 11       	cpse	r24, r1
    d0da:	06 c0       	rjmp	.+12     	; 0xd0e8 <disk_write+0x16>
    d0dc:	ba 01       	movw	r22, r20
    d0de:	a9 01       	movw	r20, r18
    d0e0:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d0e2:	98 01       	movw	r18, r16
    d0e4:	e2 d1       	rcall	.+964    	; 0xd4aa <mmc_disk_write>
    d0e6:	02 c0       	rjmp	.+4      	; 0xd0ec <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d0e8:	84 e0       	ldi	r24, 0x04	; 4
    d0ea:	90 e0       	ldi	r25, 0x00	; 0
}
    d0ec:	1f 91       	pop	r17
    d0ee:	0f 91       	pop	r16
    d0f0:	08 95       	ret

0000d0f2 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d0f2:	96 2f       	mov	r25, r22
    switch (pdrv)
    d0f4:	81 11       	cpse	r24, r1
    d0f6:	04 c0       	rjmp	.+8      	; 0xd100 <disk_ioctl+0xe>
    d0f8:	ba 01       	movw	r22, r20
    d0fa:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d0fc:	4a c2       	rjmp	.+1172   	; 0xd592 <mmc_disk_ioctl>
    d0fe:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d100:	84 e0       	ldi	r24, 0x04	; 4
    d102:	90 e0       	ldi	r25, 0x00	; 0
}
    d104:	08 95       	ret

0000d106 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d106:	f9 c4       	rjmp	.+2546   	; 0xdafa <mmc_spi_TXRX>
    return dat;
}
    d108:	08 95       	ret

0000d10a <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d10a:	ce d4       	rcall	.+2460   	; 0xdaa8 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d10c:	8f ef       	ldi	r24, 0xFF	; 255
    d10e:	fb df       	rcall	.-10     	; 0xd106 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d110:	8f ef       	ldi	r24, 0xFF	; 255
    d112:	f9 cf       	rjmp	.-14     	; 0xd106 <xchg_spi>
    d114:	08 95       	ret

0000d116 <rcvr_datablock>:
    d116:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d118:	1f 93       	push	r17
    d11a:	cf 93       	push	r28
    d11c:	df 93       	push	r29
    d11e:	ec 01       	movw	r28, r24
    d120:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d122:	88 ee       	ldi	r24, 0xE8	; 232
    d124:	93 e0       	ldi	r25, 0x03	; 3
    d126:	ec d4       	rcall	.+2520   	; 0xdb00 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d128:	8f ef       	ldi	r24, 0xFF	; 255
    d12a:	e7 d4       	rcall	.+2510   	; 0xdafa <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d12c:	8f 3f       	cpi	r24, 0xFF	; 255
    d12e:	31 f4       	brne	.+12     	; 0xd13c <rcvr_datablock+0x26>
    d130:	ee d4       	rcall	.+2524   	; 0xdb0e <mmc_test_timeout>
    d132:	89 2b       	or	r24, r25
    d134:	c9 f3       	breq	.-14     	; 0xd128 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d136:	80 e0       	ldi	r24, 0x00	; 0
    d138:	90 e0       	ldi	r25, 0x00	; 0
    d13a:	0b c0       	rjmp	.+22     	; 0xd152 <rcvr_datablock+0x3c>
    d13c:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d13e:	d9 f7       	brne	.-10     	; 0xd136 <rcvr_datablock+0x20>
    d140:	b8 01       	movw	r22, r16
    d142:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d144:	d7 d4       	rcall	.+2478   	; 0xdaf4 <mmc_spi_RX_buffer>
    d146:	8f ef       	ldi	r24, 0xFF	; 255
    d148:	de df       	rcall	.-68     	; 0xd106 <xchg_spi>
    xchg_spi(0xFF);
    d14a:	8f ef       	ldi	r24, 0xFF	; 255
    d14c:	dc df       	rcall	.-72     	; 0xd106 <xchg_spi>
    d14e:	81 e0       	ldi	r24, 0x01	; 1
    d150:	90 e0       	ldi	r25, 0x00	; 0
    d152:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d154:	cf 91       	pop	r28
    d156:	1f 91       	pop	r17
    d158:	0f 91       	pop	r16
    d15a:	08 95       	ret

0000d15c <wait_ready>:
    d15c:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d15e:	d0 d4       	rcall	.+2464   	; 0xdb00 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d160:	8f ef       	ldi	r24, 0xFF	; 255
    d162:	cb d4       	rcall	.+2454   	; 0xdafa <mmc_spi_TXRX>
    d164:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d166:	8f 3f       	cpi	r24, 0xFF	; 255
    d168:	19 f0       	breq	.+6      	; 0xd170 <wait_ready+0x14>
    d16a:	d1 d4       	rcall	.+2466   	; 0xdb0e <mmc_test_timeout>
    d16c:	89 2b       	or	r24, r25
    d16e:	c1 f3       	breq	.-16     	; 0xd160 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d170:	81 e0       	ldi	r24, 0x01	; 1
    d172:	90 e0       	ldi	r25, 0x00	; 0
    d174:	cf 3f       	cpi	r28, 0xFF	; 255
    d176:	11 f0       	breq	.+4      	; 0xd17c <wait_ready+0x20>
    d178:	80 e0       	ldi	r24, 0x00	; 0
    d17a:	90 e0       	ldi	r25, 0x00	; 0
}
    d17c:	cf 91       	pop	r28
    d17e:	08 95       	ret

0000d180 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d180:	cf 93       	push	r28
    d182:	df 93       	push	r29
    d184:	00 d0       	rcall	.+0      	; 0xd186 <select+0x6>
    d186:	1f 92       	push	r1
    CS_LOW();
    d188:	82 d4       	rcall	.+2308   	; 0xda8e <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d18a:	8f ef       	ldi	r24, 0xFF	; 255
    d18c:	bc df       	rcall	.-136    	; 0xd106 <xchg_spi>

    if (wait_ready(1000))
    d18e:	88 ee       	ldi	r24, 0xE8	; 232
    d190:	93 e0       	ldi	r25, 0x03	; 3
    d192:	e4 df       	rcall	.-56     	; 0xd15c <wait_ready>
    d194:	ec 01       	movw	r28, r24
    d196:	89 2b       	or	r24, r25
    d198:	61 f4       	brne	.+24     	; 0xd1b2 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d19a:	89 e6       	ldi	r24, 0x69	; 105
    d19c:	97 e0       	ldi	r25, 0x07	; 7
    d19e:	a0 e0       	ldi	r26, 0x00	; 0
    d1a0:	ed b7       	in	r30, 0x3d	; 61
    d1a2:	fe b7       	in	r31, 0x3e	; 62
    d1a4:	81 83       	std	Z+1, r24	; 0x01
    d1a6:	92 83       	std	Z+2, r25	; 0x02
    d1a8:	a3 83       	std	Z+3, r26	; 0x03
    d1aa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    deselect();
    d1ae:	ad df       	rcall	.-166    	; 0xd10a <deselect>
    d1b0:	02 c0       	rjmp	.+4      	; 0xd1b6 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d1b2:	c1 e0       	ldi	r28, 0x01	; 1
    d1b4:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d1b6:	ce 01       	movw	r24, r28
    d1b8:	cd b7       	in	r28, 0x3d	; 61
    d1ba:	de b7       	in	r29, 0x3e	; 62
    d1bc:	23 96       	adiw	r28, 0x03	; 3
    d1be:	e2 e0       	ldi	r30, 0x02	; 2
    d1c0:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000d1c4 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d1c4:	ff 92       	push	r15
    d1c6:	0f 93       	push	r16
    d1c8:	1f 93       	push	r17
    d1ca:	cf 93       	push	r28
    d1cc:	df 93       	push	r29
    d1ce:	c8 2f       	mov	r28, r24
    d1d0:	d4 2f       	mov	r29, r20
    d1d2:	15 2f       	mov	r17, r21
    d1d4:	06 2f       	mov	r16, r22
    d1d6:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d1d8:	87 ff       	sbrs	r24, 7
    d1da:	08 c0       	rjmp	.+16     	; 0xd1ec <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d1dc:	40 e0       	ldi	r20, 0x00	; 0
    d1de:	50 e0       	ldi	r21, 0x00	; 0
    d1e0:	ba 01       	movw	r22, r20
    d1e2:	87 e3       	ldi	r24, 0x37	; 55
    d1e4:	ef df       	rcall	.-34     	; 0xd1c4 <send_cmd>
        if (res > 1) return res;
    d1e6:	82 30       	cpi	r24, 0x02	; 2
    d1e8:	58 f5       	brcc	.+86     	; 0xd240 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d1ea:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d1ec:	cc 30       	cpi	r28, 0x0C	; 12
    d1ee:	71 f4       	brne	.+28     	; 0xd20c <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d1f0:	8c 2f       	mov	r24, r28
    d1f2:	80 64       	ori	r24, 0x40	; 64
    d1f4:	88 df       	rcall	.-240    	; 0xd106 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d1f6:	8f 2d       	mov	r24, r15
    d1f8:	86 df       	rcall	.-244    	; 0xd106 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d1fa:	80 2f       	mov	r24, r16
    d1fc:	84 df       	rcall	.-248    	; 0xd106 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d1fe:	81 2f       	mov	r24, r17
    d200:	82 df       	rcall	.-252    	; 0xd106 <xchg_spi>
    d202:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d204:	80 df       	rcall	.-256    	; 0xd106 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d206:	cc 23       	and	r28, r28
    d208:	c9 f0       	breq	.+50     	; 0xd23c <send_cmd+0x78>
    d20a:	06 c0       	rjmp	.+12     	; 0xd218 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d20c:	7e df       	rcall	.-260    	; 0xd10a <deselect>
    d20e:	b8 df       	rcall	.-144    	; 0xd180 <select>
        if (!select()) return 0xFF;
    d210:	89 2b       	or	r24, r25
    d212:	71 f7       	brne	.-36     	; 0xd1f0 <send_cmd+0x2c>
    d214:	8f ef       	ldi	r24, 0xFF	; 255
    d216:	14 c0       	rjmp	.+40     	; 0xd240 <send_cmd+0x7c>
    d218:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d21a:	11 f4       	brne	.+4      	; 0xd220 <send_cmd+0x5c>
    d21c:	87 e8       	ldi	r24, 0x87	; 135
    d21e:	01 c0       	rjmp	.+2      	; 0xd222 <send_cmd+0x5e>

    xchg_spi(n);
    d220:	81 e0       	ldi	r24, 0x01	; 1
    d222:	71 df       	rcall	.-286    	; 0xd106 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d224:	cc 30       	cpi	r28, 0x0C	; 12
    d226:	11 f4       	brne	.+4      	; 0xd22c <send_cmd+0x68>
    d228:	8f ef       	ldi	r24, 0xFF	; 255
    d22a:	6d df       	rcall	.-294    	; 0xd106 <xchg_spi>
    d22c:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d22e:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d230:	64 d4       	rcall	.+2248   	; 0xdafa <mmc_spi_TXRX>
    d232:	87 ff       	sbrs	r24, 7
    d234:	05 c0       	rjmp	.+10     	; 0xd240 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d236:	c1 50       	subi	r28, 0x01	; 1
    d238:	d1 f7       	brne	.-12     	; 0xd22e <send_cmd+0x6a>
    d23a:	02 c0       	rjmp	.+4      	; 0xd240 <send_cmd+0x7c>
    d23c:	85 e9       	ldi	r24, 0x95	; 149
    d23e:	f5 cf       	rjmp	.-22     	; 0xd22a <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d240:	cd b7       	in	r28, 0x3d	; 61
    d242:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d244:	e5 e0       	ldi	r30, 0x05	; 5
    d246:	0c 94 ac e1 	jmp	0x1c358	; 0x1c358 <__epilogue_restores__+0x1a>

0000d24a <xmit_datablock>:
    d24a:	0f 93       	push	r16
    d24c:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d24e:	cf 93       	push	r28
    d250:	8c 01       	movw	r16, r24
    d252:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d254:	88 ee       	ldi	r24, 0xE8	; 232
    d256:	93 e0       	ldi	r25, 0x03	; 3
    d258:	81 df       	rcall	.-254    	; 0xd15c <wait_ready>
    d25a:	00 97       	sbiw	r24, 0x00	; 0
    d25c:	c9 f0       	breq	.+50     	; 0xd290 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d25e:	8c 2f       	mov	r24, r28
    d260:	52 df       	rcall	.-348    	; 0xd106 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d262:	cd 3f       	cpi	r28, 0xFD	; 253
    d264:	99 f0       	breq	.+38     	; 0xd28c <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d266:	60 e0       	ldi	r22, 0x00	; 0
    d268:	72 e0       	ldi	r23, 0x02	; 2
    d26a:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d26c:	40 d4       	rcall	.+2176   	; 0xdaee <mmc_spi_TX_buffer>
    d26e:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d270:	4a df       	rcall	.-364    	; 0xd106 <xchg_spi>
    d272:	8f ef       	ldi	r24, 0xFF	; 255
    d274:	48 df       	rcall	.-368    	; 0xd106 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d276:	8f ef       	ldi	r24, 0xFF	; 255
    d278:	40 d4       	rcall	.+2176   	; 0xdafa <mmc_spi_TXRX>
    d27a:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d27c:	31 e0       	ldi	r19, 0x01	; 1
    d27e:	20 e0       	ldi	r18, 0x00	; 0
    d280:	85 30       	cpi	r24, 0x05	; 5
    d282:	09 f0       	breq	.+2      	; 0xd286 <xmit_datablock+0x3c>
    d284:	30 e0       	ldi	r19, 0x00	; 0
    d286:	83 2f       	mov	r24, r19
    d288:	92 2f       	mov	r25, r18
    d28a:	02 c0       	rjmp	.+4      	; 0xd290 <xmit_datablock+0x46>
    d28c:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d28e:	90 e0       	ldi	r25, 0x00	; 0
    d290:	cf 91       	pop	r28
}
    d292:	1f 91       	pop	r17
    d294:	0f 91       	pop	r16
    d296:	08 95       	ret

0000d298 <mmc_disk_initialize>:
    d298:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d29a:	b0 e0       	ldi	r27, 0x00	; 0
    d29c:	e2 e5       	ldi	r30, 0x52	; 82
    d29e:	f9 e6       	ldi	r31, 0x69	; 105
    d2a0:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d2a4:	59 d4       	rcall	.+2226   	; 0xdb58 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d2a6:	64 e6       	ldi	r22, 0x64	; 100
    d2a8:	70 e0       	ldi	r23, 0x00	; 0
    d2aa:	80 e0       	ldi	r24, 0x00	; 0
    d2ac:	90 e0       	ldi	r25, 0x00	; 0
    d2ae:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d2b2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2b6:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d2b8:	8e c0       	rjmp	.+284    	; 0xd3d6 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d2ba:	4d d4       	rcall	.+2202   	; 0xdb56 <mmc_power_on>
    d2bc:	f9 d3       	rcall	.+2034   	; 0xdab0 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d2be:	1a e0       	ldi	r17, 0x0A	; 10
    d2c0:	8f ef       	ldi	r24, 0xFF	; 255
    d2c2:	21 df       	rcall	.-446    	; 0xd106 <xchg_spi>
    d2c4:	11 50       	subi	r17, 0x01	; 1
    d2c6:	e1 f7       	brne	.-8      	; 0xd2c0 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d2c8:	40 e0       	ldi	r20, 0x00	; 0
    d2ca:	50 e0       	ldi	r21, 0x00	; 0
    d2cc:	ba 01       	movw	r22, r20
    d2ce:	80 e0       	ldi	r24, 0x00	; 0
    d2d0:	79 df       	rcall	.-270    	; 0xd1c4 <send_cmd>
    d2d2:	81 30       	cpi	r24, 0x01	; 1
    d2d4:	09 f0       	breq	.+2      	; 0xd2d8 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d2d6:	6f c0       	rjmp	.+222    	; 0xd3b6 <mmc_disk_initialize+0x11e>
    d2d8:	80 ed       	ldi	r24, 0xD0	; 208
    d2da:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d2dc:	11 d4       	rcall	.+2082   	; 0xdb00 <mmc_set_ms_timeout>
    d2de:	4a ea       	ldi	r20, 0xAA	; 170
    d2e0:	51 e0       	ldi	r21, 0x01	; 1
    d2e2:	60 e0       	ldi	r22, 0x00	; 0
    d2e4:	70 e0       	ldi	r23, 0x00	; 0
    d2e6:	88 e0       	ldi	r24, 0x08	; 8
    d2e8:	6d df       	rcall	.-294    	; 0xd1c4 <send_cmd>
    d2ea:	81 30       	cpi	r24, 0x01	; 1
    d2ec:	09 f0       	breq	.+2      	; 0xd2f0 <mmc_disk_initialize+0x58>
    d2ee:	3d c0       	rjmp	.+122    	; 0xd36a <mmc_disk_initialize+0xd2>
    d2f0:	8e 01       	movw	r16, r28
    d2f2:	0f 5f       	subi	r16, 0xFF	; 255
    d2f4:	1f 4f       	sbci	r17, 0xFF	; 255
    d2f6:	6e 01       	movw	r12, r28
    d2f8:	85 e0       	ldi	r24, 0x05	; 5
    d2fa:	c8 0e       	add	r12, r24
    d2fc:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d2fe:	78 01       	movw	r14, r16
    d300:	8f ef       	ldi	r24, 0xFF	; 255
    d302:	fb d3       	rcall	.+2038   	; 0xdafa <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d304:	f7 01       	movw	r30, r14
    d306:	81 93       	st	Z+, r24
    d308:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d30a:	ce 16       	cp	r12, r30
    d30c:	df 06       	cpc	r13, r31
    d30e:	c1 f7       	brne	.-16     	; 0xd300 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d310:	8b 81       	ldd	r24, Y+3	; 0x03
    d312:	81 30       	cpi	r24, 0x01	; 1
    d314:	09 f0       	breq	.+2      	; 0xd318 <mmc_disk_initialize+0x80>
    d316:	4f c0       	rjmp	.+158    	; 0xd3b6 <mmc_disk_initialize+0x11e>
    d318:	8c 81       	ldd	r24, Y+4	; 0x04
    d31a:	8a 3a       	cpi	r24, 0xAA	; 170
    d31c:	09 f0       	breq	.+2      	; 0xd320 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d31e:	4b c0       	rjmp	.+150    	; 0xd3b6 <mmc_disk_initialize+0x11e>
    d320:	f6 d3       	rcall	.+2028   	; 0xdb0e <mmc_test_timeout>
    d322:	89 2b       	or	r24, r25
    d324:	29 f0       	breq	.+10     	; 0xd330 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d326:	f3 d3       	rcall	.+2022   	; 0xdb0e <mmc_test_timeout>
    d328:	89 2b       	or	r24, r25
    d32a:	09 f0       	breq	.+2      	; 0xd32e <mmc_disk_initialize+0x96>
    d32c:	44 c0       	rjmp	.+136    	; 0xd3b6 <mmc_disk_initialize+0x11e>
    d32e:	09 c0       	rjmp	.+18     	; 0xd342 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d330:	40 e0       	ldi	r20, 0x00	; 0
    d332:	50 e0       	ldi	r21, 0x00	; 0
    d334:	60 e0       	ldi	r22, 0x00	; 0
    d336:	70 e4       	ldi	r23, 0x40	; 64
    d338:	89 ea       	ldi	r24, 0xA9	; 169
    d33a:	44 df       	rcall	.-376    	; 0xd1c4 <send_cmd>
    d33c:	81 11       	cpse	r24, r1
    d33e:	f0 cf       	rjmp	.-32     	; 0xd320 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d340:	f2 cf       	rjmp	.-28     	; 0xd326 <mmc_disk_initialize+0x8e>
    d342:	40 e0       	ldi	r20, 0x00	; 0
    d344:	50 e0       	ldi	r21, 0x00	; 0
    d346:	ba 01       	movw	r22, r20
    d348:	8a e3       	ldi	r24, 0x3A	; 58
    d34a:	3c df       	rcall	.-392    	; 0xd1c4 <send_cmd>
    d34c:	81 11       	cpse	r24, r1
    d34e:	33 c0       	rjmp	.+102    	; 0xd3b6 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d350:	8f ef       	ldi	r24, 0xFF	; 255
    d352:	d3 d3       	rcall	.+1958   	; 0xdafa <mmc_spi_TXRX>
    d354:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d356:	81 93       	st	Z+, r24
    d358:	8f 01       	movw	r16, r30
    d35a:	ce 16       	cp	r12, r30
    d35c:	df 06       	cpc	r13, r31
    d35e:	c1 f7       	brne	.-16     	; 0xd350 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d360:	89 81       	ldd	r24, Y+1	; 0x01
    d362:	86 fd       	sbrc	r24, 6
    d364:	2a c0       	rjmp	.+84     	; 0xd3ba <mmc_disk_initialize+0x122>
    d366:	14 e0       	ldi	r17, 0x04	; 4
    d368:	29 c0       	rjmp	.+82     	; 0xd3bc <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d36a:	80 ed       	ldi	r24, 0xD0	; 208
    d36c:	97 e0       	ldi	r25, 0x07	; 7
    d36e:	c8 d3       	rcall	.+1936   	; 0xdb00 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d370:	40 e0       	ldi	r20, 0x00	; 0
    d372:	50 e0       	ldi	r21, 0x00	; 0
    d374:	ba 01       	movw	r22, r20
    d376:	89 ea       	ldi	r24, 0xA9	; 169
    d378:	25 df       	rcall	.-438    	; 0xd1c4 <send_cmd>
    d37a:	82 30       	cpi	r24, 0x02	; 2
    d37c:	18 f0       	brcs	.+6      	; 0xd384 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d37e:	11 e0       	ldi	r17, 0x01	; 1
    d380:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d382:	02 c0       	rjmp	.+4      	; 0xd388 <mmc_disk_initialize+0xf0>
    d384:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d386:	09 ea       	ldi	r16, 0xA9	; 169
    d388:	c2 d3       	rcall	.+1924   	; 0xdb0e <mmc_test_timeout>
    d38a:	89 2b       	or	r24, r25
    d38c:	21 f0       	breq	.+8      	; 0xd396 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d38e:	bf d3       	rcall	.+1918   	; 0xdb0e <mmc_test_timeout>
    d390:	89 2b       	or	r24, r25
    d392:	89 f4       	brne	.+34     	; 0xd3b6 <mmc_disk_initialize+0x11e>
    d394:	08 c0       	rjmp	.+16     	; 0xd3a6 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d396:	40 e0       	ldi	r20, 0x00	; 0
    d398:	50 e0       	ldi	r21, 0x00	; 0
    d39a:	ba 01       	movw	r22, r20
    d39c:	80 2f       	mov	r24, r16
    d39e:	12 df       	rcall	.-476    	; 0xd1c4 <send_cmd>
    d3a0:	81 11       	cpse	r24, r1
    d3a2:	f2 cf       	rjmp	.-28     	; 0xd388 <mmc_disk_initialize+0xf0>
    d3a4:	f4 cf       	rjmp	.-24     	; 0xd38e <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d3a6:	40 e0       	ldi	r20, 0x00	; 0
    d3a8:	52 e0       	ldi	r21, 0x02	; 2
    d3aa:	60 e0       	ldi	r22, 0x00	; 0
    d3ac:	70 e0       	ldi	r23, 0x00	; 0
    d3ae:	80 e1       	ldi	r24, 0x10	; 16
    d3b0:	09 df       	rcall	.-494    	; 0xd1c4 <send_cmd>
    d3b2:	88 23       	and	r24, r24
                ty = 0;
    d3b4:	19 f0       	breq	.+6      	; 0xd3bc <mmc_disk_initialize+0x124>
    d3b6:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d3b8:	01 c0       	rjmp	.+2      	; 0xd3bc <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d3ba:	1c e0       	ldi	r17, 0x0C	; 12
    d3bc:	10 93 15 18 	sts	0x1815, r17	; 0x801815 <CardType>
    deselect();
    d3c0:	a4 de       	rcall	.-696    	; 0xd10a <deselect>

    if (ty)                                       /* Initialization succeded */
    d3c2:	11 23       	and	r17, r17
    d3c4:	39 f0       	breq	.+14     	; 0xd3d4 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d3c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3ca:	8e 7f       	andi	r24, 0xFE	; 254
    d3cc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d3d0:	81 d3       	rcall	.+1794   	; 0xdad4 <mmc_fast>
    d3d2:	01 c0       	rjmp	.+2      	; 0xd3d6 <mmc_disk_initialize+0x13e>
    d3d4:	c1 d3       	rcall	.+1922   	; 0xdb58 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d3d6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d3da:	24 96       	adiw	r28, 0x04	; 4
    d3dc:	e8 e0       	ldi	r30, 0x08	; 8
}
    d3de:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000d3e2 <mmc_disk_status>:
    d3e2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d3e6:	08 95       	ret

0000d3e8 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d3e8:	8f 92       	push	r8
    d3ea:	9f 92       	push	r9
    d3ec:	af 92       	push	r10
    d3ee:	bf 92       	push	r11
    d3f0:	ef 92       	push	r14
    d3f2:	ff 92       	push	r15
    d3f4:	1f 93       	push	r17
    d3f6:	cf 93       	push	r28
    d3f8:	df 93       	push	r29
    d3fa:	7c 01       	movw	r14, r24
    d3fc:	4a 01       	movw	r8, r20
    d3fe:	5b 01       	movw	r10, r22
    d400:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d402:	20 97       	sbiw	r28, 0x00	; 0
    d404:	19 f4       	brne	.+6      	; 0xd40c <mmc_disk_read+0x24>
    {
        deselect();
    d406:	81 de       	rcall	.-766    	; 0xd10a <deselect>
        return RES_PARERR;
    d408:	84 e0       	ldi	r24, 0x04	; 4
    d40a:	0d c0       	rjmp	.+26     	; 0xd426 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d40c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d410:	88 23       	and	r24, r24
    d412:	19 f0       	breq	.+6      	; 0xd41a <mmc_disk_read+0x32>
		set_error(1);
    d414:	81 e0       	ldi	r24, 0x01	; 1
    d416:	0e 94 8a 24 	call	0x4914	; 0x4914 <set_error>

    if (Stat & STA_NOINIT)
    d41a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d41e:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d420:	04 c0       	rjmp	.+8      	; 0xd42a <mmc_disk_read+0x42>
    d422:	73 de       	rcall	.-794    	; 0xd10a <deselect>
        return RES_NOTRDY;
    d424:	83 e0       	ldi	r24, 0x03	; 3
    d426:	90 e0       	ldi	r25, 0x00	; 0
    d428:	36 c0       	rjmp	.+108    	; 0xd496 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d42a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d42e:	81 fd       	sbrc	r24, 1
    d430:	f8 cf       	rjmp	.-16     	; 0xd422 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d432:	46 9a       	sbi	0x08, 6	; 8
    d434:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d436:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <CardType>
    d43a:	83 fd       	sbrc	r24, 3
    d43c:	07 c0       	rjmp	.+14     	; 0xd44c <mmc_disk_read+0x64>
    d43e:	89 e0       	ldi	r24, 0x09	; 9
    d440:	88 0c       	add	r8, r8
    d442:	99 1c       	adc	r9, r9
    d444:	aa 1c       	adc	r10, r10
    d446:	bb 1c       	adc	r11, r11
    d448:	8a 95       	dec	r24
    d44a:	d1 f7       	brne	.-12     	; 0xd440 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d44c:	c2 30       	cpi	r28, 0x02	; 2
    d44e:	d1 05       	cpc	r29, r1
    d450:	10 f4       	brcc	.+4      	; 0xd456 <mmc_disk_read+0x6e>
    d452:	11 e1       	ldi	r17, 0x11	; 17
    d454:	01 c0       	rjmp	.+2      	; 0xd458 <mmc_disk_read+0x70>
    d456:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d458:	b5 01       	movw	r22, r10
    d45a:	a4 01       	movw	r20, r8
    d45c:	81 2f       	mov	r24, r17
    d45e:	b2 de       	rcall	.-668    	; 0xd1c4 <send_cmd>
    d460:	81 11       	cpse	r24, r1
    d462:	11 c0       	rjmp	.+34     	; 0xd486 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d464:	60 e0       	ldi	r22, 0x00	; 0
    d466:	72 e0       	ldi	r23, 0x02	; 2
    d468:	c7 01       	movw	r24, r14
    d46a:	55 de       	rcall	.-854    	; 0xd116 <rcvr_datablock>
    d46c:	89 2b       	or	r24, r25
    d46e:	21 f0       	breq	.+8      	; 0xd478 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d470:	8e ef       	ldi	r24, 0xFE	; 254
    d472:	f8 1a       	sub	r15, r24
        } while (--count);
    d474:	21 97       	sbiw	r28, 0x01	; 1
    d476:	b1 f7       	brne	.-20     	; 0xd464 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d478:	12 31       	cpi	r17, 0x12	; 18
    d47a:	29 f4       	brne	.+10     	; 0xd486 <mmc_disk_read+0x9e>
    d47c:	40 e0       	ldi	r20, 0x00	; 0
    d47e:	50 e0       	ldi	r21, 0x00	; 0
    d480:	ba 01       	movw	r22, r20
    d482:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d484:	9f de       	rcall	.-706    	; 0xd1c4 <send_cmd>
    d486:	41 de       	rcall	.-894    	; 0xd10a <deselect>
    GPIO_PIN_LOW(LED1);
    d488:	46 98       	cbi	0x08, 6	; 8
    d48a:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d48c:	81 e0       	ldi	r24, 0x01	; 1
    d48e:	90 e0       	ldi	r25, 0x00	; 0
    d490:	cd 2b       	or	r28, r29
    d492:	09 f4       	brne	.+2      	; 0xd496 <mmc_disk_read+0xae>
    d494:	80 e0       	ldi	r24, 0x00	; 0
}
    d496:	df 91       	pop	r29
    d498:	cf 91       	pop	r28
    d49a:	1f 91       	pop	r17
    d49c:	ff 90       	pop	r15
    d49e:	ef 90       	pop	r14
    d4a0:	bf 90       	pop	r11
    d4a2:	af 90       	pop	r10
    d4a4:	9f 90       	pop	r9
    d4a6:	8f 90       	pop	r8
    d4a8:	08 95       	ret

0000d4aa <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d4aa:	a0 e0       	ldi	r26, 0x00	; 0
    d4ac:	b0 e0       	ldi	r27, 0x00	; 0
    d4ae:	eb e5       	ldi	r30, 0x5B	; 91
    d4b0:	fa e6       	ldi	r31, 0x6A	; 106
    d4b2:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    d4b6:	8c 01       	movw	r16, r24
    d4b8:	6a 01       	movw	r12, r20
    d4ba:	7b 01       	movw	r14, r22
    d4bc:	e9 01       	movw	r28, r18
    if (!count)
    d4be:	20 97       	sbiw	r28, 0x00	; 0
    d4c0:	19 f4       	brne	.+6      	; 0xd4c8 <mmc_disk_write+0x1e>
    {
        deselect();
    d4c2:	23 de       	rcall	.-954    	; 0xd10a <deselect>
        return RES_PARERR;
    d4c4:	84 e0       	ldi	r24, 0x04	; 4
    d4c6:	18 c0       	rjmp	.+48     	; 0xd4f8 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d4c8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4cc:	88 23       	and	r24, r24
    d4ce:	19 f0       	breq	.+6      	; 0xd4d6 <mmc_disk_write+0x2c>
		set_error(1);
    d4d0:	81 e0       	ldi	r24, 0x01	; 1
    d4d2:	0e 94 8a 24 	call	0x4914	; 0x4914 <set_error>

    if (Stat & STA_NOINIT)
    d4d6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4da:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d4dc:	03 c0       	rjmp	.+6      	; 0xd4e4 <mmc_disk_write+0x3a>
    d4de:	15 de       	rcall	.-982    	; 0xd10a <deselect>
        return RES_NOTRDY;
    d4e0:	83 e0       	ldi	r24, 0x03	; 3
    d4e2:	0a c0       	rjmp	.+20     	; 0xd4f8 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d4e4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4e8:	81 fd       	sbrc	r24, 1
    d4ea:	f9 cf       	rjmp	.-14     	; 0xd4de <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d4ec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4f0:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d4f2:	04 c0       	rjmp	.+8      	; 0xd4fc <mmc_disk_write+0x52>
    d4f4:	0a de       	rcall	.-1004   	; 0xd10a <deselect>
        return RES_WRPRT;
    d4f6:	82 e0       	ldi	r24, 0x02	; 2
    d4f8:	90 e0       	ldi	r25, 0x00	; 0
    d4fa:	46 c0       	rjmp	.+140    	; 0xd588 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d4fc:	46 9a       	sbi	0x08, 6	; 8
    d4fe:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d500:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <CardType>
    d504:	83 fd       	sbrc	r24, 3
    d506:	07 c0       	rjmp	.+14     	; 0xd516 <mmc_disk_write+0x6c>
    d508:	99 e0       	ldi	r25, 0x09	; 9
    d50a:	cc 0c       	add	r12, r12
    d50c:	dd 1c       	adc	r13, r13
    d50e:	ee 1c       	adc	r14, r14
    d510:	ff 1c       	adc	r15, r15
    d512:	9a 95       	dec	r25
    d514:	d1 f7       	brne	.-12     	; 0xd50a <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d516:	c1 30       	cpi	r28, 0x01	; 1
    d518:	d1 05       	cpc	r29, r1
    d51a:	89 f4       	brne	.+34     	; 0xd53e <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d51c:	b7 01       	movw	r22, r14
    d51e:	a6 01       	movw	r20, r12
    d520:	88 e1       	ldi	r24, 0x18	; 24
    d522:	50 de       	rcall	.-864    	; 0xd1c4 <send_cmd>
    d524:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d526:	26 c0       	rjmp	.+76     	; 0xd574 <mmc_disk_write+0xca>
    d528:	6e ef       	ldi	r22, 0xFE	; 254
    d52a:	c8 01       	movw	r24, r16
    d52c:	8e de       	rcall	.-740    	; 0xd24a <xmit_datablock>
    d52e:	31 e0       	ldi	r19, 0x01	; 1
    d530:	20 e0       	ldi	r18, 0x00	; 0
    d532:	89 2b       	or	r24, r25
    d534:	09 f0       	breq	.+2      	; 0xd538 <mmc_disk_write+0x8e>
    d536:	30 e0       	ldi	r19, 0x00	; 0
    d538:	c3 2f       	mov	r28, r19
    d53a:	d2 2f       	mov	r29, r18
    d53c:	1d c0       	rjmp	.+58     	; 0xd578 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d53e:	86 70       	andi	r24, 0x06	; 6
    d540:	29 f0       	breq	.+10     	; 0xd54c <mmc_disk_write+0xa2>
    d542:	ae 01       	movw	r20, r28
    d544:	60 e0       	ldi	r22, 0x00	; 0
    d546:	70 e0       	ldi	r23, 0x00	; 0
    d548:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d54a:	3c de       	rcall	.-904    	; 0xd1c4 <send_cmd>
    d54c:	b7 01       	movw	r22, r14
    d54e:	a6 01       	movw	r20, r12
    d550:	89 e1       	ldi	r24, 0x19	; 25
    d552:	38 de       	rcall	.-912    	; 0xd1c4 <send_cmd>
    d554:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d556:	10 c0       	rjmp	.+32     	; 0xd578 <mmc_disk_write+0xce>
    d558:	6c ef       	ldi	r22, 0xFC	; 252
    d55a:	c8 01       	movw	r24, r16
    d55c:	76 de       	rcall	.-788    	; 0xd24a <xmit_datablock>
    d55e:	89 2b       	or	r24, r25
                buff += 512;
    d560:	19 f0       	breq	.+6      	; 0xd568 <mmc_disk_write+0xbe>
            } while (--count);
    d562:	1e 5f       	subi	r17, 0xFE	; 254
    d564:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d566:	c1 f7       	brne	.-16     	; 0xd558 <mmc_disk_write+0xae>
    d568:	6d ef       	ldi	r22, 0xFD	; 253
    d56a:	80 e0       	ldi	r24, 0x00	; 0
    d56c:	90 e0       	ldi	r25, 0x00	; 0
    d56e:	6d de       	rcall	.-806    	; 0xd24a <xmit_datablock>
    d570:	89 2b       	or	r24, r25
                count = 1;
    d572:	11 f4       	brne	.+4      	; 0xd578 <mmc_disk_write+0xce>
    d574:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d576:	d0 e0       	ldi	r29, 0x00	; 0
    d578:	c8 dd       	rcall	.-1136   	; 0xd10a <deselect>
    GPIO_PIN_LOW(LED1);
    d57a:	46 98       	cbi	0x08, 6	; 8
    d57c:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d57e:	81 e0       	ldi	r24, 0x01	; 1
    d580:	90 e0       	ldi	r25, 0x00	; 0
    d582:	cd 2b       	or	r28, r29
    d584:	09 f4       	brne	.+2      	; 0xd588 <mmc_disk_write+0xde>
    d586:	80 e0       	ldi	r24, 0x00	; 0
}
    d588:	cd b7       	in	r28, 0x3d	; 61
    d58a:	de b7       	in	r29, 0x3e	; 62
    d58c:	e8 e0       	ldi	r30, 0x08	; 8
    d58e:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000d592 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d592:	a0 e1       	ldi	r26, 0x10	; 16
    d594:	b0 e0       	ldi	r27, 0x00	; 0
    d596:	ef ec       	ldi	r30, 0xCF	; 207
    d598:	fa e6       	ldi	r31, 0x6A	; 106
    d59a:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d59e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d5a2:	90 fd       	sbrc	r25, 0
    d5a4:	31 c2       	rjmp	.+1122   	; 0xda08 <mmc_disk_ioctl+0x476>
    d5a6:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d5a8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d5ac:	91 ff       	sbrs	r25, 1
    d5ae:	02 c0       	rjmp	.+4      	; 0xd5b4 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d5b0:	ac dd       	rcall	.-1192   	; 0xd10a <deselect>
    d5b2:	2a c2       	rjmp	.+1108   	; 0xda08 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d5b4:	83 33       	cpi	r24, 0x33	; 51
    d5b6:	09 f4       	brne	.+2      	; 0xd5ba <mmc_disk_ioctl+0x28>
    d5b8:	01 c1       	rjmp	.+514    	; 0xd7bc <mmc_disk_ioctl+0x22a>
    d5ba:	a0 f4       	brcc	.+40     	; 0xd5e4 <mmc_disk_ioctl+0x52>
    d5bc:	83 30       	cpi	r24, 0x03	; 3
    d5be:	09 f4       	brne	.+2      	; 0xd5c2 <mmc_disk_ioctl+0x30>
    d5c0:	85 c0       	rjmp	.+266    	; 0xd6cc <mmc_disk_ioctl+0x13a>
    d5c2:	28 f4       	brcc	.+10     	; 0xd5ce <mmc_disk_ioctl+0x3c>
    d5c4:	88 23       	and	r24, r24
    d5c6:	11 f1       	breq	.+68     	; 0xd60c <mmc_disk_ioctl+0x7a>
    d5c8:	81 30       	cpi	r24, 0x01	; 1
    d5ca:	11 f1       	breq	.+68     	; 0xd610 <mmc_disk_ioctl+0x7e>
    d5cc:	1f c2       	rjmp	.+1086   	; 0xda0c <mmc_disk_ioctl+0x47a>
    d5ce:	87 30       	cpi	r24, 0x07	; 7
    d5d0:	09 f4       	brne	.+2      	; 0xd5d4 <mmc_disk_ioctl+0x42>
    d5d2:	2a c1       	rjmp	.+596    	; 0xd828 <mmc_disk_ioctl+0x296>
    d5d4:	82 33       	cpi	r24, 0x32	; 50
    d5d6:	09 f0       	breq	.+2      	; 0xd5da <mmc_disk_ioctl+0x48>
    d5d8:	19 c2       	rjmp	.+1074   	; 0xda0c <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d5da:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <CardType>
    d5de:	fb 01       	movw	r30, r22
    d5e0:	80 83       	st	Z, r24
    d5e2:	28 c1       	rjmp	.+592    	; 0xd834 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d5e4:	86 33       	cpi	r24, 0x36	; 54
    d5e6:	09 f4       	brne	.+2      	; 0xd5ea <mmc_disk_ioctl+0x58>
    d5e8:	0c c1       	rjmp	.+536    	; 0xd802 <mmc_disk_ioctl+0x270>
    d5ea:	38 f4       	brcc	.+14     	; 0xd5fa <mmc_disk_ioctl+0x68>
    d5ec:	84 33       	cpi	r24, 0x34	; 52
    d5ee:	09 f4       	brne	.+2      	; 0xd5f2 <mmc_disk_ioctl+0x60>
    d5f0:	ea c0       	rjmp	.+468    	; 0xd7c6 <mmc_disk_ioctl+0x234>
    d5f2:	85 33       	cpi	r24, 0x35	; 53
    d5f4:	09 f4       	brne	.+2      	; 0xd5f8 <mmc_disk_ioctl+0x66>
    d5f6:	f1 c0       	rjmp	.+482    	; 0xd7da <mmc_disk_ioctl+0x248>
    d5f8:	09 c2       	rjmp	.+1042   	; 0xda0c <mmc_disk_ioctl+0x47a>
    d5fa:	88 33       	cpi	r24, 0x38	; 56
    d5fc:	09 f4       	brne	.+2      	; 0xd600 <mmc_disk_ioctl+0x6e>
    d5fe:	74 c1       	rjmp	.+744    	; 0xd8e8 <mmc_disk_ioctl+0x356>
    d600:	08 f4       	brcc	.+2      	; 0xd604 <mmc_disk_ioctl+0x72>
    d602:	1a c1       	rjmp	.+564    	; 0xd838 <mmc_disk_ioctl+0x2a6>
    d604:	89 33       	cpi	r24, 0x39	; 57
    d606:	09 f4       	brne	.+2      	; 0xd60a <mmc_disk_ioctl+0x78>
    d608:	bc c1       	rjmp	.+888    	; 0xd982 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d60a:	00 c2       	rjmp	.+1024   	; 0xda0c <mmc_disk_ioctl+0x47a>
    d60c:	b9 dd       	rcall	.-1166   	; 0xd180 <select>
    d60e:	06 c1       	rjmp	.+524    	; 0xd81c <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d610:	40 e0       	ldi	r20, 0x00	; 0
    d612:	50 e0       	ldi	r21, 0x00	; 0
    d614:	ba 01       	movw	r22, r20
    d616:	89 e0       	ldi	r24, 0x09	; 9
    d618:	d5 dd       	rcall	.-1110   	; 0xd1c4 <send_cmd>
    d61a:	81 11       	cpse	r24, r1
    d61c:	f1 c1       	rjmp	.+994    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d61e:	60 e1       	ldi	r22, 0x10	; 16
    d620:	70 e0       	ldi	r23, 0x00	; 0
    d622:	ce 01       	movw	r24, r28
    d624:	01 96       	adiw	r24, 0x01	; 1
    d626:	77 dd       	rcall	.-1298   	; 0xd116 <rcvr_datablock>
    d628:	89 2b       	or	r24, r25
    d62a:	09 f4       	brne	.+2      	; 0xd62e <mmc_disk_ioctl+0x9c>
    d62c:	e9 c1       	rjmp	.+978    	; 0xda00 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d62e:	99 81       	ldd	r25, Y+1	; 0x01
    d630:	92 95       	swap	r25
    d632:	96 95       	lsr	r25
    d634:	96 95       	lsr	r25
    d636:	93 70       	andi	r25, 0x03	; 3
    d638:	29 85       	ldd	r18, Y+9	; 0x09
    d63a:	4a 85       	ldd	r20, Y+10	; 0x0a
    d63c:	88 85       	ldd	r24, Y+8	; 0x08
    d63e:	91 30       	cpi	r25, 0x01	; 1
    d640:	d9 f4       	brne	.+54     	; 0xd678 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d642:	30 e0       	ldi	r19, 0x00	; 0
    d644:	32 2f       	mov	r19, r18
    d646:	22 27       	eor	r18, r18
    d648:	24 0f       	add	r18, r20
    d64a:	31 1d       	adc	r19, r1
    d64c:	8f 73       	andi	r24, 0x3F	; 63
    d64e:	90 e0       	ldi	r25, 0x00	; 0
    d650:	a0 e0       	ldi	r26, 0x00	; 0
    d652:	b0 e0       	ldi	r27, 0x00	; 0
    d654:	dc 01       	movw	r26, r24
    d656:	99 27       	eor	r25, r25
    d658:	88 27       	eor	r24, r24
    d65a:	01 96       	adiw	r24, 0x01	; 1
    d65c:	a1 1d       	adc	r26, r1
    d65e:	b1 1d       	adc	r27, r1
    d660:	82 0f       	add	r24, r18
    d662:	93 1f       	adc	r25, r19
    d664:	a1 1d       	adc	r26, r1
    d666:	b1 1d       	adc	r27, r1
    d668:	fa e0       	ldi	r31, 0x0A	; 10
    d66a:	88 0f       	add	r24, r24
    d66c:	99 1f       	adc	r25, r25
    d66e:	aa 1f       	adc	r26, r26
    d670:	bb 1f       	adc	r27, r27
    d672:	fa 95       	dec	r31
    d674:	d1 f7       	brne	.-12     	; 0xd66a <mmc_disk_ioctl+0xd8>
    d676:	9b c0       	rjmp	.+310    	; 0xd7ae <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d678:	22 95       	swap	r18
    d67a:	26 95       	lsr	r18
    d67c:	26 95       	lsr	r18
    d67e:	23 70       	andi	r18, 0x03	; 3
    d680:	f4 e0       	ldi	r31, 0x04	; 4
    d682:	8f 9f       	mul	r24, r31
    d684:	c0 01       	movw	r24, r0
    d686:	11 24       	eor	r1, r1
    d688:	82 0f       	add	r24, r18
    d68a:	91 1d       	adc	r25, r1
    d68c:	01 96       	adiw	r24, 0x01	; 1
    d68e:	2f 81       	ldd	r18, Y+7	; 0x07
    d690:	23 70       	andi	r18, 0x03	; 3
    d692:	30 e0       	ldi	r19, 0x00	; 0
    d694:	32 2f       	mov	r19, r18
    d696:	22 27       	eor	r18, r18
    d698:	33 0f       	add	r19, r19
    d69a:	33 0f       	add	r19, r19
    d69c:	82 0f       	add	r24, r18
    d69e:	93 1f       	adc	r25, r19
    d6a0:	a0 e0       	ldi	r26, 0x00	; 0
    d6a2:	b0 e0       	ldi	r27, 0x00	; 0
    d6a4:	2e 81       	ldd	r18, Y+6	; 0x06
    d6a6:	32 2f       	mov	r19, r18
    d6a8:	3f 70       	andi	r19, 0x0F	; 15
    d6aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    d6ac:	22 1f       	adc	r18, r18
    d6ae:	22 27       	eor	r18, r18
    d6b0:	22 1f       	adc	r18, r18
    d6b2:	23 0f       	add	r18, r19
    d6b4:	43 70       	andi	r20, 0x03	; 3
    d6b6:	44 0f       	add	r20, r20
    d6b8:	42 0f       	add	r20, r18
    d6ba:	47 50       	subi	r20, 0x07	; 7
    d6bc:	04 c0       	rjmp	.+8      	; 0xd6c6 <mmc_disk_ioctl+0x134>
    d6be:	88 0f       	add	r24, r24
    d6c0:	99 1f       	adc	r25, r25
    d6c2:	aa 1f       	adc	r26, r26
    d6c4:	bb 1f       	adc	r27, r27
    d6c6:	4a 95       	dec	r20
    d6c8:	d2 f7       	brpl	.-12     	; 0xd6be <mmc_disk_ioctl+0x12c>
    d6ca:	71 c0       	rjmp	.+226    	; 0xd7ae <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d6cc:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d6d0:	40 e0       	ldi	r20, 0x00	; 0
    d6d2:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d6d4:	ba 01       	movw	r22, r20
    d6d6:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d6d8:	24 c0       	rjmp	.+72     	; 0xd722 <mmc_disk_ioctl+0x190>
    d6da:	8d e8       	ldi	r24, 0x8D	; 141
    d6dc:	73 dd       	rcall	.-1306   	; 0xd1c4 <send_cmd>
    d6de:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d6e0:	8f c1       	rjmp	.+798    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d6e2:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d6e4:	10 dd       	rcall	.-1504   	; 0xd106 <xchg_spi>
    d6e6:	60 e1       	ldi	r22, 0x10	; 16
    d6e8:	70 e0       	ldi	r23, 0x00	; 0
    d6ea:	ce 01       	movw	r24, r28
    d6ec:	01 96       	adiw	r24, 0x01	; 1
    d6ee:	13 dd       	rcall	.-1498   	; 0xd116 <rcvr_datablock>
    d6f0:	89 2b       	or	r24, r25
    d6f2:	09 f4       	brne	.+2      	; 0xd6f6 <mmc_disk_ioctl+0x164>
    d6f4:	85 c1       	rjmp	.+778    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d6f6:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d6f8:	f5 2e       	mov	r15, r21
    d6fa:	8f ef       	ldi	r24, 0xFF	; 255
    d6fc:	04 dd       	rcall	.-1528   	; 0xd106 <xchg_spi>
    d6fe:	fa 94       	dec	r15
    d700:	f1 10       	cpse	r15, r1
    d702:	fb cf       	rjmp	.-10     	; 0xd6fa <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d704:	2b 85       	ldd	r18, Y+11	; 0x0b
    d706:	22 95       	swap	r18
    d708:	2f 70       	andi	r18, 0x0F	; 15
    d70a:	80 e1       	ldi	r24, 0x10	; 16
    d70c:	90 e0       	ldi	r25, 0x00	; 0
    d70e:	a0 e0       	ldi	r26, 0x00	; 0
    d710:	b0 e0       	ldi	r27, 0x00	; 0
    d712:	04 c0       	rjmp	.+8      	; 0xd71c <mmc_disk_ioctl+0x18a>
    d714:	88 0f       	add	r24, r24
    d716:	99 1f       	adc	r25, r25
    d718:	aa 1f       	adc	r26, r26
    d71a:	bb 1f       	adc	r27, r27
    d71c:	2a 95       	dec	r18
    d71e:	d2 f7       	brpl	.-12     	; 0xd714 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d720:	46 c0       	rjmp	.+140    	; 0xd7ae <mmc_disk_ioctl+0x21c>
    d722:	89 e0       	ldi	r24, 0x09	; 9
    d724:	4f dd       	rcall	.-1378   	; 0xd1c4 <send_cmd>
    d726:	81 11       	cpse	r24, r1
    d728:	6b c1       	rjmp	.+726    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d72a:	60 e1       	ldi	r22, 0x10	; 16
    d72c:	70 e0       	ldi	r23, 0x00	; 0
    d72e:	ce 01       	movw	r24, r28
    d730:	01 96       	adiw	r24, 0x01	; 1
    d732:	f1 dc       	rcall	.-1566   	; 0xd116 <rcvr_datablock>
    d734:	89 2b       	or	r24, r25
    d736:	09 f4       	brne	.+2      	; 0xd73a <mmc_disk_ioctl+0x1a8>
    d738:	63 c1       	rjmp	.+710    	; 0xda00 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d73a:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <CardType>
    d73e:	2b 85       	ldd	r18, Y+11	; 0x0b
    d740:	8c 85       	ldd	r24, Y+12	; 0x0c
    d742:	91 ff       	sbrs	r25, 1
    d744:	16 c0       	rjmp	.+44     	; 0xd772 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d746:	2f 73       	andi	r18, 0x3F	; 63
    d748:	88 1f       	adc	r24, r24
    d74a:	88 27       	eor	r24, r24
    d74c:	88 1f       	adc	r24, r24
    d74e:	90 e0       	ldi	r25, 0x00	; 0
    d750:	01 96       	adiw	r24, 0x01	; 1
    d752:	82 0f       	add	r24, r18
    d754:	91 1d       	adc	r25, r1
    d756:	82 0f       	add	r24, r18
    d758:	91 1d       	adc	r25, r1
    d75a:	2e 85       	ldd	r18, Y+14	; 0x0e
    d75c:	22 95       	swap	r18
    d75e:	26 95       	lsr	r18
    d760:	26 95       	lsr	r18
    d762:	23 70       	andi	r18, 0x03	; 3
    d764:	21 50       	subi	r18, 0x01	; 1
    d766:	02 c0       	rjmp	.+4      	; 0xd76c <mmc_disk_ioctl+0x1da>
    d768:	88 0f       	add	r24, r24
    d76a:	99 1f       	adc	r25, r25
    d76c:	2a 95       	dec	r18
    d76e:	e2 f7       	brpl	.-8      	; 0xd768 <mmc_disk_ioctl+0x1d6>
    d770:	1c c0       	rjmp	.+56     	; 0xd7aa <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d772:	38 2f       	mov	r19, r24
    d774:	33 70       	andi	r19, 0x03	; 3
    d776:	82 95       	swap	r24
    d778:	86 95       	lsr	r24
    d77a:	87 70       	andi	r24, 0x07	; 7
    d77c:	90 e0       	ldi	r25, 0x00	; 0
    d77e:	f8 e0       	ldi	r31, 0x08	; 8
    d780:	3f 9f       	mul	r19, r31
    d782:	80 0d       	add	r24, r0
    d784:	91 1d       	adc	r25, r1
    d786:	11 24       	eor	r1, r1
    d788:	01 96       	adiw	r24, 0x01	; 1
    d78a:	2c 77       	andi	r18, 0x7C	; 124
    d78c:	30 e0       	ldi	r19, 0x00	; 0
    d78e:	35 95       	asr	r19
    d790:	27 95       	ror	r18
    d792:	35 95       	asr	r19
    d794:	27 95       	ror	r18
    d796:	2f 5f       	subi	r18, 0xFF	; 255
    d798:	3f 4f       	sbci	r19, 0xFF	; 255
    d79a:	82 9f       	mul	r24, r18
    d79c:	a0 01       	movw	r20, r0
    d79e:	83 9f       	mul	r24, r19
    d7a0:	50 0d       	add	r21, r0
    d7a2:	92 9f       	mul	r25, r18
    d7a4:	50 0d       	add	r21, r0
    d7a6:	11 24       	eor	r1, r1
    d7a8:	ca 01       	movw	r24, r20
    d7aa:	a0 e0       	ldi	r26, 0x00	; 0
    d7ac:	b0 e0       	ldi	r27, 0x00	; 0
    d7ae:	f8 01       	movw	r30, r16
    d7b0:	80 83       	st	Z, r24
    d7b2:	91 83       	std	Z+1, r25	; 0x01
    d7b4:	a2 83       	std	Z+2, r26	; 0x02
    d7b6:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d7b8:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d7ba:	23 c1       	rjmp	.+582    	; 0xda02 <mmc_disk_ioctl+0x470>
    d7bc:	40 e0       	ldi	r20, 0x00	; 0
    d7be:	50 e0       	ldi	r21, 0x00	; 0
    d7c0:	ba 01       	movw	r22, r20
    d7c2:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d7c4:	04 c0       	rjmp	.+8      	; 0xd7ce <mmc_disk_ioctl+0x23c>
    d7c6:	40 e0       	ldi	r20, 0x00	; 0
    d7c8:	50 e0       	ldi	r21, 0x00	; 0
    d7ca:	ba 01       	movw	r22, r20
    d7cc:	8a e0       	ldi	r24, 0x0A	; 10
    d7ce:	fa dc       	rcall	.-1548   	; 0xd1c4 <send_cmd>
    d7d0:	81 11       	cpse	r24, r1
    d7d2:	16 c1       	rjmp	.+556    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d7d4:	60 e1       	ldi	r22, 0x10	; 16
    d7d6:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d7d8:	1f c0       	rjmp	.+62     	; 0xd818 <mmc_disk_ioctl+0x286>
    d7da:	40 e0       	ldi	r20, 0x00	; 0
    d7dc:	50 e0       	ldi	r21, 0x00	; 0
    d7de:	ba 01       	movw	r22, r20
    d7e0:	8a e3       	ldi	r24, 0x3A	; 58
    d7e2:	f0 dc       	rcall	.-1568   	; 0xd1c4 <send_cmd>
    d7e4:	81 11       	cpse	r24, r1
    d7e6:	0c c1       	rjmp	.+536    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d7e8:	78 01       	movw	r14, r16
    d7ea:	f4 e0       	ldi	r31, 0x04	; 4
    d7ec:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7ee:	f1 1c       	adc	r15, r1
    d7f0:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d7f2:	83 d1       	rcall	.+774    	; 0xdafa <mmc_spi_TXRX>
    d7f4:	f8 01       	movw	r30, r16
    d7f6:	81 93       	st	Z+, r24
    d7f8:	8f 01       	movw	r16, r30
    d7fa:	ee 15       	cp	r30, r14
    d7fc:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d7fe:	c1 f7       	brne	.-16     	; 0xd7f0 <mmc_disk_ioctl+0x25e>
    d800:	db cf       	rjmp	.-74     	; 0xd7b8 <mmc_disk_ioctl+0x226>
    d802:	40 e0       	ldi	r20, 0x00	; 0
    d804:	50 e0       	ldi	r21, 0x00	; 0
    d806:	ba 01       	movw	r22, r20
    d808:	8d e8       	ldi	r24, 0x8D	; 141
    d80a:	dc dc       	rcall	.-1608   	; 0xd1c4 <send_cmd>
            {
                xchg_spi(0xFF);
    d80c:	81 11       	cpse	r24, r1
    d80e:	f8 c0       	rjmp	.+496    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d810:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d812:	79 dc       	rcall	.-1806   	; 0xd106 <xchg_spi>
    d814:	60 e4       	ldi	r22, 0x40	; 64
    d816:	70 e0       	ldi	r23, 0x00	; 0
    d818:	c8 01       	movw	r24, r16
    d81a:	7d dc       	rcall	.-1798   	; 0xd116 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d81c:	01 e0       	ldi	r16, 0x01	; 1
    d81e:	10 e0       	ldi	r17, 0x00	; 0
    d820:	89 2b       	or	r24, r25
    d822:	09 f4       	brne	.+2      	; 0xd826 <mmc_disk_ioctl+0x294>
    d824:	ef c0       	rjmp	.+478    	; 0xda04 <mmc_disk_ioctl+0x472>
    d826:	ea c0       	rjmp	.+468    	; 0xd9fc <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d828:	97 d1       	rcall	.+814    	; 0xdb58 <mmc_power_off>
    d82a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d82e:	81 60       	ori	r24, 0x01	; 1
    d830:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d834:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d836:	eb c0       	rjmp	.+470    	; 0xda0e <mmc_disk_ioctl+0x47c>
    d838:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d83a:	43 81       	ldd	r20, Z+3	; 0x03
    d83c:	54 81       	ldd	r21, Z+4	; 0x04
    d83e:	65 81       	ldd	r22, Z+5	; 0x05
    d840:	76 81       	ldd	r23, Z+6	; 0x06
    d842:	39 e0       	ldi	r19, 0x09	; 9
    d844:	44 0f       	add	r20, r20
    d846:	55 1f       	adc	r21, r21
    d848:	66 1f       	adc	r22, r22
    d84a:	77 1f       	adc	r23, r23
    d84c:	3a 95       	dec	r19
    d84e:	d1 f7       	brne	.-12     	; 0xd844 <mmc_disk_ioctl+0x2b2>
    d850:	70 68       	ori	r23, 0x80	; 128
    d852:	80 81       	ld	r24, Z
    d854:	90 e0       	ldi	r25, 0x00	; 0
    d856:	a0 e0       	ldi	r26, 0x00	; 0
    d858:	b0 e0       	ldi	r27, 0x00	; 0
    d85a:	2c e1       	ldi	r18, 0x1C	; 28
    d85c:	88 0f       	add	r24, r24
    d85e:	99 1f       	adc	r25, r25
    d860:	aa 1f       	adc	r26, r26
    d862:	bb 1f       	adc	r27, r27
    d864:	2a 95       	dec	r18
    d866:	d1 f7       	brne	.-12     	; 0xd85c <mmc_disk_ioctl+0x2ca>
    d868:	48 2b       	or	r20, r24
    d86a:	59 2b       	or	r21, r25
    d86c:	6a 2b       	or	r22, r26
    d86e:	7b 2b       	or	r23, r27
    d870:	81 81       	ldd	r24, Z+1	; 0x01
    d872:	92 81       	ldd	r25, Z+2	; 0x02
    d874:	01 97       	sbiw	r24, 0x01	; 1
    d876:	91 70       	andi	r25, 0x01	; 1
    d878:	a0 e0       	ldi	r26, 0x00	; 0
    d87a:	b0 e0       	ldi	r27, 0x00	; 0
    d87c:	48 2b       	or	r20, r24
    d87e:	59 2b       	or	r21, r25
    d880:	6a 2b       	or	r22, r26
    d882:	7b 2b       	or	r23, r27
    d884:	80 e3       	ldi	r24, 0x30	; 48
    d886:	9e dc       	rcall	.-1732   	; 0xd1c4 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d888:	81 11       	cpse	r24, r1
    d88a:	ba c0       	rjmp	.+372    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d88c:	88 ee       	ldi	r24, 0xE8	; 232
    d88e:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d890:	37 d1       	rcall	.+622    	; 0xdb00 <mmc_set_ms_timeout>
    d892:	8f ef       	ldi	r24, 0xFF	; 255
    d894:	32 d1       	rcall	.+612    	; 0xdafa <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d896:	8f 3f       	cpi	r24, 0xFF	; 255
    d898:	21 f4       	brne	.+8      	; 0xd8a2 <mmc_disk_ioctl+0x310>
    d89a:	39 d1       	rcall	.+626    	; 0xdb0e <mmc_test_timeout>
    d89c:	89 2b       	or	r24, r25
    d89e:	c9 f3       	breq	.-14     	; 0xd892 <mmc_disk_ioctl+0x300>
    d8a0:	af c0       	rjmp	.+350    	; 0xda00 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d8a2:	8e 3f       	cpi	r24, 0xFE	; 254
    d8a4:	09 f0       	breq	.+2      	; 0xd8a8 <mmc_disk_ioctl+0x316>
    d8a6:	ac c0       	rjmp	.+344    	; 0xda00 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d8a8:	f8 01       	movw	r30, r16
    d8aa:	e7 80       	ldd	r14, Z+7	; 0x07
    d8ac:	f0 84       	ldd	r15, Z+8	; 0x08
    d8ae:	c1 80       	ldd	r12, Z+1	; 0x01
    d8b0:	d2 80       	ldd	r13, Z+2	; 0x02
    d8b2:	ce 0c       	add	r12, r14
    d8b4:	df 1c       	adc	r13, r15
    d8b6:	ce 14       	cp	r12, r14
    d8b8:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d8ba:	31 f0       	breq	.+12     	; 0xd8c8 <mmc_disk_ioctl+0x336>
    d8bc:	8f ef       	ldi	r24, 0xFF	; 255
    d8be:	1d d1       	rcall	.+570    	; 0xdafa <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d8c0:	f7 01       	movw	r30, r14
    d8c2:	81 93       	st	Z+, r24
    d8c4:	7f 01       	movw	r14, r30
    d8c6:	f7 cf       	rjmp	.-18     	; 0xd8b6 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d8c8:	f8 01       	movw	r30, r16
    d8ca:	81 81       	ldd	r24, Z+1	; 0x01
    d8cc:	92 81       	ldd	r25, Z+2	; 0x02
    d8ce:	02 e0       	ldi	r16, 0x02	; 2
    d8d0:	12 e0       	ldi	r17, 0x02	; 2
    d8d2:	08 1b       	sub	r16, r24
    d8d4:	19 0b       	sbc	r17, r25
    d8d6:	01 15       	cp	r16, r1
    d8d8:	11 05       	cpc	r17, r1
    d8da:	09 f4       	brne	.+2      	; 0xd8de <mmc_disk_ioctl+0x34c>
    d8dc:	6d cf       	rjmp	.-294    	; 0xd7b8 <mmc_disk_ioctl+0x226>
    d8de:	8f ef       	ldi	r24, 0xFF	; 255
    d8e0:	12 dc       	rcall	.-2012   	; 0xd106 <xchg_spi>
    d8e2:	01 50       	subi	r16, 0x01	; 1
    d8e4:	11 09       	sbc	r17, r1
    d8e6:	f7 cf       	rjmp	.-18     	; 0xd8d6 <mmc_disk_ioctl+0x344>
    d8e8:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d8ea:	43 81       	ldd	r20, Z+3	; 0x03
    d8ec:	54 81       	ldd	r21, Z+4	; 0x04
    d8ee:	65 81       	ldd	r22, Z+5	; 0x05
    d8f0:	76 81       	ldd	r23, Z+6	; 0x06
    d8f2:	39 e0       	ldi	r19, 0x09	; 9
    d8f4:	44 0f       	add	r20, r20
    d8f6:	55 1f       	adc	r21, r21
    d8f8:	66 1f       	adc	r22, r22
    d8fa:	77 1f       	adc	r23, r23
    d8fc:	3a 95       	dec	r19
    d8fe:	d1 f7       	brne	.-12     	; 0xd8f4 <mmc_disk_ioctl+0x362>
    d900:	70 68       	ori	r23, 0x80	; 128
    d902:	80 81       	ld	r24, Z
    d904:	90 e0       	ldi	r25, 0x00	; 0
    d906:	a0 e0       	ldi	r26, 0x00	; 0
    d908:	b0 e0       	ldi	r27, 0x00	; 0
    d90a:	2c e1       	ldi	r18, 0x1C	; 28
    d90c:	88 0f       	add	r24, r24
    d90e:	99 1f       	adc	r25, r25
    d910:	aa 1f       	adc	r26, r26
    d912:	bb 1f       	adc	r27, r27
    d914:	2a 95       	dec	r18
    d916:	d1 f7       	brne	.-12     	; 0xd90c <mmc_disk_ioctl+0x37a>
    d918:	48 2b       	or	r20, r24
    d91a:	59 2b       	or	r21, r25
    d91c:	6a 2b       	or	r22, r26
    d91e:	7b 2b       	or	r23, r27
    d920:	81 81       	ldd	r24, Z+1	; 0x01
    d922:	92 81       	ldd	r25, Z+2	; 0x02
    d924:	01 97       	sbiw	r24, 0x01	; 1
    d926:	91 70       	andi	r25, 0x01	; 1
    d928:	a0 e0       	ldi	r26, 0x00	; 0
    d92a:	b0 e0       	ldi	r27, 0x00	; 0
    d92c:	48 2b       	or	r20, r24
    d92e:	59 2b       	or	r21, r25
    d930:	6a 2b       	or	r22, r26
    d932:	7b 2b       	or	r23, r27
    d934:	81 e3       	ldi	r24, 0x31	; 49
    d936:	46 dc       	rcall	.-1908   	; 0xd1c4 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d938:	81 11       	cpse	r24, r1
    d93a:	62 c0       	rjmp	.+196    	; 0xda00 <mmc_disk_ioctl+0x46e>
    d93c:	8f ef       	ldi	r24, 0xFF	; 255
    d93e:	e3 db       	rcall	.-2106   	; 0xd106 <xchg_spi>
    d940:	8e ef       	ldi	r24, 0xFE	; 254
    d942:	e1 db       	rcall	.-2110   	; 0xd106 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    d944:	f8 01       	movw	r30, r16
    d946:	e7 80       	ldd	r14, Z+7	; 0x07
    d948:	f0 84       	ldd	r15, Z+8	; 0x08
    d94a:	c1 80       	ldd	r12, Z+1	; 0x01
    d94c:	d2 80       	ldd	r13, Z+2	; 0x02
    d94e:	ce 0c       	add	r12, r14
    d950:	df 1c       	adc	r13, r15
    d952:	ec 14       	cp	r14, r12
    d954:	fd 04       	cpc	r15, r13
    d956:	29 f0       	breq	.+10     	; 0xd962 <mmc_disk_ioctl+0x3d0>
    d958:	f7 01       	movw	r30, r14
    d95a:	81 91       	ld	r24, Z+
    d95c:	7f 01       	movw	r14, r30
    d95e:	d3 db       	rcall	.-2138   	; 0xd106 <xchg_spi>
    d960:	f8 cf       	rjmp	.-16     	; 0xd952 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d962:	f8 01       	movw	r30, r16
    d964:	81 81       	ldd	r24, Z+1	; 0x01
    d966:	92 81       	ldd	r25, Z+2	; 0x02
    d968:	02 e0       	ldi	r16, 0x02	; 2
    d96a:	12 e0       	ldi	r17, 0x02	; 2
    d96c:	08 1b       	sub	r16, r24
    d96e:	19 0b       	sbc	r17, r25
    d970:	8f ef       	ldi	r24, 0xFF	; 255
    d972:	01 15       	cp	r16, r1
    d974:	11 05       	cpc	r17, r1
    d976:	09 f4       	brne	.+2      	; 0xd97a <mmc_disk_ioctl+0x3e8>
    d978:	3b c0       	rjmp	.+118    	; 0xd9f0 <mmc_disk_ioctl+0x45e>
    d97a:	c5 db       	rcall	.-2166   	; 0xd106 <xchg_spi>
    d97c:	01 50       	subi	r16, 0x01	; 1
    d97e:	11 09       	sbc	r17, r1
    d980:	f7 cf       	rjmp	.-18     	; 0xd970 <mmc_disk_ioctl+0x3de>
    d982:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    d984:	43 81       	ldd	r20, Z+3	; 0x03
    d986:	54 81       	ldd	r21, Z+4	; 0x04
    d988:	65 81       	ldd	r22, Z+5	; 0x05
    d98a:	76 81       	ldd	r23, Z+6	; 0x06
    d98c:	89 e0       	ldi	r24, 0x09	; 9
    d98e:	44 0f       	add	r20, r20
    d990:	55 1f       	adc	r21, r21
    d992:	66 1f       	adc	r22, r22
    d994:	77 1f       	adc	r23, r23
    d996:	8a 95       	dec	r24
    d998:	d1 f7       	brne	.-12     	; 0xd98e <mmc_disk_ioctl+0x3fc>
    d99a:	74 68       	ori	r23, 0x84	; 132
    d99c:	80 81       	ld	r24, Z
    d99e:	90 e0       	ldi	r25, 0x00	; 0
    d9a0:	a0 e0       	ldi	r26, 0x00	; 0
    d9a2:	b0 e0       	ldi	r27, 0x00	; 0
    d9a4:	2c e1       	ldi	r18, 0x1C	; 28
    d9a6:	88 0f       	add	r24, r24
    d9a8:	99 1f       	adc	r25, r25
    d9aa:	aa 1f       	adc	r26, r26
    d9ac:	bb 1f       	adc	r27, r27
    d9ae:	2a 95       	dec	r18
    d9b0:	d1 f7       	brne	.-12     	; 0xd9a6 <mmc_disk_ioctl+0x414>
    d9b2:	48 2b       	or	r20, r24
    d9b4:	59 2b       	or	r21, r25
    d9b6:	6a 2b       	or	r22, r26
    d9b8:	7b 2b       	or	r23, r27
    d9ba:	82 81       	ldd	r24, Z+2	; 0x02
    d9bc:	90 e0       	ldi	r25, 0x00	; 0
    d9be:	a0 e0       	ldi	r26, 0x00	; 0
    d9c0:	b0 e0       	ldi	r27, 0x00	; 0
    d9c2:	48 2b       	or	r20, r24
    d9c4:	59 2b       	or	r21, r25
    d9c6:	6a 2b       	or	r22, r26
    d9c8:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d9ca:	81 e3       	ldi	r24, 0x31	; 49
    d9cc:	fb db       	rcall	.-2058   	; 0xd1c4 <send_cmd>
    d9ce:	81 11       	cpse	r24, r1
    d9d0:	17 c0       	rjmp	.+46     	; 0xda00 <mmc_disk_ioctl+0x46e>
    d9d2:	8f ef       	ldi	r24, 0xFF	; 255
    d9d4:	98 db       	rcall	.-2256   	; 0xd106 <xchg_spi>
                xchg_spi(sdi->ndata);
    d9d6:	8e ef       	ldi	r24, 0xFE	; 254
    d9d8:	96 db       	rcall	.-2260   	; 0xd106 <xchg_spi>
    d9da:	f8 01       	movw	r30, r16
    d9dc:	81 81       	ldd	r24, Z+1	; 0x01
    d9de:	93 db       	rcall	.-2266   	; 0xd106 <xchg_spi>
    d9e0:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    d9e2:	12 e0       	ldi	r17, 0x02	; 2
    d9e4:	8f ef       	ldi	r24, 0xFF	; 255
    d9e6:	8f db       	rcall	.-2274   	; 0xd106 <xchg_spi>
    d9e8:	01 50       	subi	r16, 0x01	; 1
    d9ea:	11 09       	sbc	r17, r1
    d9ec:	d9 f7       	brne	.-10     	; 0xd9e4 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d9ee:	8f ef       	ldi	r24, 0xFF	; 255
    d9f0:	84 d0       	rcall	.+264    	; 0xdafa <mmc_spi_TXRX>
    d9f2:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d9f4:	01 e0       	ldi	r16, 0x01	; 1
    d9f6:	10 e0       	ldi	r17, 0x00	; 0
    d9f8:	85 30       	cpi	r24, 0x05	; 5
    d9fa:	21 f4       	brne	.+8      	; 0xda04 <mmc_disk_ioctl+0x472>
    d9fc:	00 e0       	ldi	r16, 0x00	; 0
    d9fe:	02 c0       	rjmp	.+4      	; 0xda04 <mmc_disk_ioctl+0x472>
    da00:	01 e0       	ldi	r16, 0x01	; 1
    da02:	10 e0       	ldi	r17, 0x00	; 0
    da04:	82 db       	rcall	.-2300   	; 0xd10a <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    da06:	04 c0       	rjmp	.+8      	; 0xda10 <mmc_disk_ioctl+0x47e>
    da08:	03 e0       	ldi	r16, 0x03	; 3
            break;
    da0a:	01 c0       	rjmp	.+2      	; 0xda0e <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    da0c:	04 e0       	ldi	r16, 0x04	; 4
    da0e:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    da10:	c8 01       	movw	r24, r16
    da12:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    da14:	e8 e0       	ldi	r30, 0x08	; 8
    da16:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000da1a <mmc_disk_timerproc>:
    da1a:	cf 93       	push	r28
    da1c:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    da20:	88 23       	and	r24, r24
    da22:	19 f0       	breq	.+6      	; 0xda2a <mmc_disk_timerproc+0x10>
    da24:	81 50       	subi	r24, 0x01	; 1
    da26:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <Timer1>
    n = Timer2;
    da2a:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <Timer2>
    if (n) Timer2 = --n;
    da2e:	88 23       	and	r24, r24
    da30:	19 f0       	breq	.+6      	; 0xda38 <mmc_disk_timerproc+0x1e>
    da32:	81 50       	subi	r24, 0x01	; 1
    da34:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <Timer2>

    s = Stat;
    da38:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    da3c:	8e d0       	rcall	.+284    	; 0xdb5a <mmc_ins_status>
    da3e:	89 2b       	or	r24, r25
    da40:	11 f0       	breq	.+4      	; 0xda46 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    da42:	cd 7f       	andi	r28, 0xFD	; 253
    da44:	04 c0       	rjmp	.+8      	; 0xda4e <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    da46:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    da48:	81 e0       	ldi	r24, 0x01	; 1
    da4a:	0e 94 8a 24 	call	0x4914	; 0x4914 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    da4e:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    da52:	cf 91       	pop	r28
    da54:	08 95       	ret

0000da56 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    da56:	00 d0       	rcall	.+0      	; 0xda58 <mmc_install_timer+0x2>
    da58:	1f 92       	push	r1
    da5a:	10 92 21 18 	sts	0x1821, r1	; 0x801821 <_mmc_timeout+0x1>
    da5e:	10 92 20 18 	sts	0x1820, r1	; 0x801820 <_mmc_timeout>
    da62:	61 e0       	ldi	r22, 0x01	; 1
    da64:	70 e0       	ldi	r23, 0x00	; 0
    da66:	8a eb       	ldi	r24, 0xBA	; 186
    da68:	9d e6       	ldi	r25, 0x6D	; 109
    da6a:	0e 94 3d 32 	call	0x647a	; 0x647a <set_timers>
    da6e:	01 96       	adiw	r24, 0x01	; 1
    da70:	51 f4       	brne	.+20     	; 0xda86 <mmc_install_timer+0x30>
    da72:	87 e2       	ldi	r24, 0x27	; 39
    da74:	98 e0       	ldi	r25, 0x08	; 8
    da76:	a0 e0       	ldi	r26, 0x00	; 0
    da78:	ed b7       	in	r30, 0x3d	; 61
    da7a:	fe b7       	in	r31, 0x3e	; 62
    da7c:	81 83       	std	Z+1, r24	; 0x01
    da7e:	92 83       	std	Z+2, r25	; 0x02
    da80:	a3 83       	std	Z+3, r26	; 0x03
    da82:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    da86:	0f 90       	pop	r0
    da88:	0f 90       	pop	r0
    da8a:	0f 90       	pop	r0
    da8c:	08 95       	ret

0000da8e <mmc_spi_begin>:
    da8e:	60 91 1c 18 	lds	r22, 0x181C	; 0x80181c <_mmc_clock>
    da92:	70 91 1d 18 	lds	r23, 0x181D	; 0x80181d <_mmc_clock+0x1>
    da96:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_mmc_clock+0x2>
    da9a:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <_mmc_clock+0x3>
    da9e:	4b e0       	ldi	r20, 0x0B	; 11
    daa0:	50 e0       	ldi	r21, 0x00	; 0
    daa2:	0c 94 31 24 	jmp	0x4862	; 0x4862 <spi_begin>
    daa6:	08 95       	ret

0000daa8 <mmc_spi_end>:
    daa8:	8b e0       	ldi	r24, 0x0B	; 11
    daaa:	0c 94 cd 23 	jmp	0x479a	; 0x479a <spi_end>
    daae:	08 95       	ret

0000dab0 <mmc_slow>:
    dab0:	80 e2       	ldi	r24, 0x20	; 32
    dab2:	91 ea       	ldi	r25, 0xA1	; 161
    dab4:	a7 e0       	ldi	r26, 0x07	; 7
    dab6:	b0 e0       	ldi	r27, 0x00	; 0
    dab8:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_clock>
    dabc:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_clock+0x1>
    dac0:	a0 93 1e 18 	sts	0x181E, r26	; 0x80181e <_mmc_clock+0x2>
    dac4:	b0 93 1f 18 	sts	0x181F, r27	; 0x80181f <_mmc_clock+0x3>
    dac8:	08 95       	ret

0000daca <mmc_spi_init>:
    daca:	8b e0       	ldi	r24, 0x0B	; 11
    dacc:	0e 94 cb 23 	call	0x4796	; 0x4796 <chip_select_init>
    dad0:	ef cf       	rjmp	.-34     	; 0xdab0 <mmc_slow>
    dad2:	08 95       	ret

0000dad4 <mmc_fast>:
    dad4:	80 ea       	ldi	r24, 0xA0	; 160
    dad6:	95 e2       	ldi	r25, 0x25	; 37
    dad8:	a6 e2       	ldi	r26, 0x26	; 38
    dada:	b0 e0       	ldi	r27, 0x00	; 0
    dadc:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_clock>
    dae0:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_clock+0x1>
    dae4:	a0 93 1e 18 	sts	0x181E, r26	; 0x80181e <_mmc_clock+0x2>
    dae8:	b0 93 1f 18 	sts	0x181F, r27	; 0x80181f <_mmc_clock+0x3>
    daec:	08 95       	ret

0000daee <mmc_spi_TX_buffer>:
    daee:	0c 94 fd 23 	jmp	0x47fa	; 0x47fa <spi_TX_buffer>
    daf2:	08 95       	ret

0000daf4 <mmc_spi_RX_buffer>:
    daf4:	0c 94 ff 23 	jmp	0x47fe	; 0x47fe <spi_RX_buffer>
    daf8:	08 95       	ret

0000dafa <mmc_spi_TXRX>:
    dafa:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <spi_TXRX>
    dafe:	08 95       	ret

0000db00 <mmc_set_ms_timeout>:
    db00:	f8 94       	cli
    db02:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_timeout+0x1>
    db06:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_timeout>
    db0a:	78 94       	sei
    db0c:	08 95       	ret

0000db0e <mmc_test_timeout>:
    db0e:	00 d0       	rcall	.+0      	; 0xdb10 <mmc_test_timeout+0x2>
    db10:	1f 92       	push	r1
    db12:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    db16:	81 fd       	sbrc	r24, 1
    db18:	15 c0       	rjmp	.+42     	; 0xdb44 <mmc_test_timeout+0x36>
    db1a:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_mmc_timeout>
    db1e:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_mmc_timeout+0x1>
    db22:	89 2b       	or	r24, r25
    db24:	91 f4       	brne	.+36     	; 0xdb4a <mmc_test_timeout+0x3c>
    db26:	8a e1       	ldi	r24, 0x1A	; 26
    db28:	98 e0       	ldi	r25, 0x08	; 8
    db2a:	a0 e0       	ldi	r26, 0x00	; 0
    db2c:	ed b7       	in	r30, 0x3d	; 61
    db2e:	fe b7       	in	r31, 0x3e	; 62
    db30:	81 83       	std	Z+1, r24	; 0x01
    db32:	92 83       	std	Z+2, r25	; 0x02
    db34:	a3 83       	std	Z+3, r26	; 0x03
    db36:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    db3a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    db3e:	83 60       	ori	r24, 0x03	; 3
    db40:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    db44:	81 e0       	ldi	r24, 0x01	; 1
    db46:	90 e0       	ldi	r25, 0x00	; 0
    db48:	02 c0       	rjmp	.+4      	; 0xdb4e <mmc_test_timeout+0x40>
    db4a:	80 e0       	ldi	r24, 0x00	; 0
    db4c:	90 e0       	ldi	r25, 0x00	; 0
    db4e:	0f 90       	pop	r0
    db50:	0f 90       	pop	r0
    db52:	0f 90       	pop	r0
    db54:	08 95       	ret

0000db56 <mmc_power_on>:
    db56:	08 95       	ret

0000db58 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    db58:	08 95       	ret

0000db5a <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    db5a:	3f 98       	cbi	0x07, 7	; 7
    db5c:	86 b1       	in	r24, 0x06	; 6
    db5e:	08 2e       	mov	r0, r24
    db60:	00 0c       	add	r0, r0
    db62:	99 0b       	sbc	r25, r25
    db64:	80 95       	com	r24
    db66:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    db68:	89 2f       	mov	r24, r25
    db6a:	88 1f       	adc	r24, r24
    db6c:	88 27       	eor	r24, r24
    db6e:	88 1f       	adc	r24, r24
    db70:	90 e0       	ldi	r25, 0x00	; 0
    db72:	08 95       	ret

0000db74 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    db74:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_mmc_timeout>
    db78:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_mmc_timeout+0x1>
    db7c:	00 97       	sbiw	r24, 0x00	; 0
    db7e:	29 f0       	breq	.+10     	; 0xdb8a <mmc_task+0x16>
        _mmc_timeout--;
    db80:	01 97       	sbiw	r24, 0x01	; 1
    db82:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_timeout+0x1>
    db86:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    db8a:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <_mmc_pre>
    db8e:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <_mmc_pre+0x1>
    db92:	8a 30       	cpi	r24, 0x0A	; 10
    db94:	91 05       	cpc	r25, r1
    db96:	30 f4       	brcc	.+12     	; 0xdba4 <mmc_task+0x30>
    db98:	01 96       	adiw	r24, 0x01	; 1
    db9a:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <_mmc_pre+0x1>
    db9e:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <_mmc_pre>
    dba2:	08 95       	ret
        return;

    _mmc_pre = 0;
    dba4:	10 92 1b 18 	sts	0x181B, r1	; 0x80181b <_mmc_pre+0x1>
    dba8:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <_mmc_pre>

	if(!mmc_ins_status())
    dbac:	d6 df       	rcall	.-84     	; 0xdb5a <mmc_ins_status>
    dbae:	89 2b       	or	r24, r25
    dbb0:	19 f4       	brne	.+6      	; 0xdbb8 <mmc_task+0x44>
		set_error(1);
    dbb2:	81 e0       	ldi	r24, 0x01	; 1
    dbb4:	0e 94 8a 24 	call	0x4914	; 0x4914 <set_error>

    mmc_disk_timerproc();
    dbb8:	30 cf       	rjmp	.-416    	; 0xda1a <mmc_disk_timerproc>
    dbba:	08 95       	ret

0000dbbc <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dbbc:	ab e0       	ldi	r26, 0x0B	; 11
    dbbe:	b0 e0       	ldi	r27, 0x00	; 0
    dbc0:	e4 ee       	ldi	r30, 0xE4	; 228
    dbc2:	fd e6       	ldi	r31, 0x6D	; 109
    dbc4:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
    dbc8:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dbca:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dbce:	0e 94 8f 24 	call	0x491e	; 0x491e <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dbd2:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dbd4:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dbd6:	79 df       	rcall	.-270    	; 0xdaca <mmc_spi_init>

    if( verbose)
    dbd8:	e1 14       	cp	r14, r1
    dbda:	f1 04       	cpc	r15, r1
    dbdc:	51 f0       	breq	.+20     	; 0xdbf2 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dbde:	8a e0       	ldi	r24, 0x0A	; 10
    dbe0:	98 e0       	ldi	r25, 0x08	; 8
    dbe2:	a0 e0       	ldi	r26, 0x00	; 0
    dbe4:	ed b7       	in	r30, 0x3d	; 61
    dbe6:	fe b7       	in	r31, 0x3e	; 62
    dbe8:	81 83       	std	Z+1, r24	; 0x01
    dbea:	92 83       	std	Z+2, r25	; 0x02
    dbec:	a3 83       	std	Z+3, r26	; 0x03
    dbee:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dbf2:	80 91 18 18 	lds	r24, 0x1818	; 0x801818 <mmc_init_flag>
    dbf6:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <mmc_init_flag+0x1>
    dbfa:	89 2b       	or	r24, r25
        mmc_install_timer();
    dbfc:	09 f4       	brne	.+2      	; 0xdc00 <mmc_init+0x44>

	if(!mmc_ins_status())
    dbfe:	2b df       	rcall	.-426    	; 0xda56 <mmc_install_timer>
    dc00:	ac df       	rcall	.-168    	; 0xdb5a <mmc_ins_status>
    dc02:	89 2b       	or	r24, r25
    dc04:	61 f4       	brne	.+24     	; 0xdc1e <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dc06:	8a ee       	ldi	r24, 0xEA	; 234
    dc08:	97 e0       	ldi	r25, 0x07	; 7
    dc0a:	a0 e0       	ldi	r26, 0x00	; 0
    dc0c:	ed b7       	in	r30, 0x3d	; 61
    dc0e:	fe b7       	in	r31, 0x3e	; 62
    dc10:	81 83       	std	Z+1, r24	; 0x01
    dc12:	92 83       	std	Z+2, r25	; 0x02
    dc14:	a3 83       	std	Z+3, r26	; 0x03
    dc16:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
		return(RES_NOTRDY);	
    dc1a:	83 e0       	ldi	r24, 0x03	; 3
    dc1c:	8b c0       	rjmp	.+278    	; 0xdd34 <mmc_init+0x178>
	}


    if( verbose)
    dc1e:	e1 14       	cp	r14, r1
    dc20:	f1 04       	cpc	r15, r1
    dc22:	11 f1       	breq	.+68     	; 0xdc68 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    dc24:	87 ed       	ldi	r24, 0xD7	; 215
    dc26:	97 e0       	ldi	r25, 0x07	; 7
    dc28:	a0 e0       	ldi	r26, 0x00	; 0
    dc2a:	ed b7       	in	r30, 0x3d	; 61
    dc2c:	fe b7       	in	r31, 0x3e	; 62
    dc2e:	81 83       	std	Z+1, r24	; 0x01
    dc30:	92 83       	std	Z+2, r25	; 0x02
    dc32:	a3 83       	std	Z+3, r26	; 0x03
    dc34:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dc38:	8b ec       	ldi	r24, 0xCB	; 203
    dc3a:	97 e0       	ldi	r25, 0x07	; 7
    dc3c:	a0 e0       	ldi	r26, 0x00	; 0
    dc3e:	ed b7       	in	r30, 0x3d	; 61
    dc40:	fe b7       	in	r31, 0x3e	; 62
    dc42:	81 83       	std	Z+1, r24	; 0x01
    dc44:	92 83       	std	Z+2, r25	; 0x02
    dc46:	a3 83       	std	Z+3, r26	; 0x03
    dc48:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dc4c:	85 eb       	ldi	r24, 0xB5	; 181
    dc4e:	91 e0       	ldi	r25, 0x01	; 1
    dc50:	ed b7       	in	r30, 0x3d	; 61
    dc52:	fe b7       	in	r31, 0x3e	; 62
    dc54:	95 83       	std	Z+5, r25	; 0x05
    dc56:	84 83       	std	Z+4, r24	; 0x04
    dc58:	8a eb       	ldi	r24, 0xBA	; 186
    dc5a:	97 e0       	ldi	r25, 0x07	; 7
    dc5c:	a0 e0       	ldi	r26, 0x00	; 0
    dc5e:	81 83       	std	Z+1, r24	; 0x01
    dc60:	92 83       	std	Z+2, r25	; 0x02
    dc62:	a3 83       	std	Z+3, r26	; 0x03
    dc64:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dc68:	80 e0       	ldi	r24, 0x00	; 0
    dc6a:	1d da       	rcall	.-3014   	; 0xd0a6 <disk_initialize>
    dc6c:	08 2f       	mov	r16, r24
    dc6e:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dc70:	01 15       	cp	r16, r1
    dc72:	11 05       	cpc	r17, r1
        put_rc(rc);
    dc74:	19 f0       	breq	.+6      	; 0xdc7c <mmc_init+0xc0>
    dc76:	c8 01       	movw	r24, r16
    dc78:	e4 d0       	rcall	.+456    	; 0xde42 <put_rc>
    dc7a:	0e c0       	rjmp	.+28     	; 0xdc98 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dc7c:	40 e0       	ldi	r20, 0x00	; 0
    dc7e:	66 ea       	ldi	r22, 0xA6	; 166
    dc80:	78 e0       	ldi	r23, 0x08	; 8
    dc82:	80 e7       	ldi	r24, 0x70	; 112
    dc84:	9a e1       	ldi	r25, 0x1A	; 26
    dc86:	0e 94 0b 58 	call	0xb016	; 0xb016 <f_mount>
    dc8a:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dc8c:	89 2b       	or	r24, r25
    dc8e:	21 f4       	brne	.+8      	; 0xdc98 <mmc_init+0xdc>
    dc90:	e1 14       	cp	r14, r1
    dc92:	f1 04       	cpc	r15, r1
    dc94:	09 f4       	brne	.+2      	; 0xdc98 <mmc_init+0xdc>
        put_rc( rc );
    dc96:	40 c0       	rjmp	.+128    	; 0xdd18 <mmc_init+0x15c>
    dc98:	c8 01       	movw	r24, r16
    dc9a:	d3 d0       	rcall	.+422    	; 0xde42 <put_rc>

    if (verbose )
    dc9c:	e1 14       	cp	r14, r1
    dc9e:	f1 04       	cpc	r15, r1
    dca0:	d9 f1       	breq	.+118    	; 0xdd18 <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dca2:	18 86       	std	Y+8, r1	; 0x08
    dca4:	19 86       	std	Y+9, r1	; 0x09
    dca6:	1a 86       	std	Y+10, r1	; 0x0a
    dca8:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dcaa:	01 15       	cp	r16, r1
    dcac:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    dcae:	51 f5       	brne	.+84     	; 0xdd04 <mmc_init+0x148>
    dcb0:	ae 01       	movw	r20, r28
    dcb2:	48 5f       	subi	r20, 0xF8	; 248
    dcb4:	5f 4f       	sbci	r21, 0xFF	; 255
    dcb6:	63 e0       	ldi	r22, 0x03	; 3
    dcb8:	80 e0       	ldi	r24, 0x00	; 0
    dcba:	1b da       	rcall	.-3018   	; 0xd0f2 <disk_ioctl>
            if( rc != RES_OK)
    dcbc:	8c 01       	movw	r16, r24
    dcbe:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dcc0:	61 f0       	breq	.+24     	; 0xdcda <mmc_init+0x11e>
    dcc2:	bf d0       	rcall	.+382    	; 0xde42 <put_rc>
                printf("MMC Block Size - read failed\n");
    dcc4:	8c e9       	ldi	r24, 0x9C	; 156
    dcc6:	97 e0       	ldi	r25, 0x07	; 7
    dcc8:	a0 e0       	ldi	r26, 0x00	; 0
    dcca:	ed b7       	in	r30, 0x3d	; 61
    dccc:	fe b7       	in	r31, 0x3e	; 62
    dcce:	81 83       	std	Z+1, r24	; 0x01
    dcd0:	92 83       	std	Z+2, r25	; 0x02
    dcd2:	a3 83       	std	Z+3, r26	; 0x03
    dcd4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    dcd8:	15 c0       	rjmp	.+42     	; 0xdd04 <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dcda:	88 85       	ldd	r24, Y+8	; 0x08
    dcdc:	99 85       	ldd	r25, Y+9	; 0x09
    dcde:	aa 85       	ldd	r26, Y+10	; 0x0a
    dce0:	bb 85       	ldd	r27, Y+11	; 0x0b
    dce2:	ed b7       	in	r30, 0x3d	; 61
    dce4:	fe b7       	in	r31, 0x3e	; 62
    dce6:	84 83       	std	Z+4, r24	; 0x04
    dce8:	95 83       	std	Z+5, r25	; 0x05
    dcea:	a6 83       	std	Z+6, r26	; 0x06
    dcec:	b7 83       	std	Z+7, r27	; 0x07
    dcee:	87 e8       	ldi	r24, 0x87	; 135
    dcf0:	97 e0       	ldi	r25, 0x07	; 7
    dcf2:	a0 e0       	ldi	r26, 0x00	; 0
    dcf4:	81 83       	std	Z+1, r24	; 0x01
    dcf6:	92 83       	std	Z+2, r25	; 0x02
    dcf8:	a3 83       	std	Z+3, r26	; 0x03
    dcfa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    dcfe:	86 ea       	ldi	r24, 0xA6	; 166
    dd00:	98 e0       	ldi	r25, 0x08	; 8
    dd02:	33 d1       	rcall	.+614    	; 0xdf6a <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dd04:	89 e7       	ldi	r24, 0x79	; 121
    dd06:	97 e0       	ldi	r25, 0x07	; 7
    dd08:	a0 e0       	ldi	r26, 0x00	; 0
    dd0a:	ed b7       	in	r30, 0x3d	; 61
    dd0c:	fe b7       	in	r31, 0x3e	; 62
    dd0e:	81 83       	std	Z+1, r24	; 0x01
    dd10:	92 83       	std	Z+2, r25	; 0x02
    dd12:	a3 83       	std	Z+3, r26	; 0x03
    dd14:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
    mmc_init_flag = 1;
    dd18:	81 e0       	ldi	r24, 0x01	; 1
    dd1a:	90 e0       	ldi	r25, 0x00	; 0
    dd1c:	90 93 19 18 	sts	0x1819, r25	; 0x801819 <mmc_init_flag+0x1>
    dd20:	80 93 18 18 	sts	0x1818, r24	; 0x801818 <mmc_init_flag>

	if(rc != RES_OK)
    dd24:	01 15       	cp	r16, r1
    dd26:	11 05       	cpc	r17, r1
    dd28:	21 f0       	breq	.+8      	; 0xdd32 <mmc_init+0x176>
		set_error(1);
    dd2a:	0e 94 8a 24 	call	0x4914	; 0x4914 <set_error>
    dd2e:	c8 01       	movw	r24, r16
    dd30:	02 c0       	rjmp	.+4      	; 0xdd36 <mmc_init+0x17a>
    dd32:	80 e0       	ldi	r24, 0x00	; 0
    dd34:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dd36:	2b 96       	adiw	r28, 0x0b	; 11
    dd38:	e6 e0       	ldi	r30, 0x06	; 6
    dd3a:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0000dd3e <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dd3e:	80 e0       	ldi	r24, 0x00	; 0
    dd40:	90 e0       	ldi	r25, 0x00	; 0
    dd42:	08 95       	ret

0000dd44 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dd44:	0f 93       	push	r16
    dd46:	1f 93       	push	r17
    dd48:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dd4a:	46 81       	ldd	r20, Z+6	; 0x06
    dd4c:	57 81       	ldd	r21, Z+7	; 0x07
    dd4e:	05 2e       	mov	r0, r21
    dd50:	00 0c       	add	r0, r0
    dd52:	66 0b       	sbc	r22, r22
    dd54:	77 0b       	sbc	r23, r23
    dd56:	ba 01       	movw	r22, r20
    dd58:	55 27       	eor	r21, r21
    dd5a:	44 27       	eor	r20, r20
    dd5c:	84 81       	ldd	r24, Z+4	; 0x04
    dd5e:	95 81       	ldd	r25, Z+5	; 0x05
    dd60:	09 2e       	mov	r0, r25
    dd62:	00 0c       	add	r0, r0
    dd64:	aa 0b       	sbc	r26, r26
    dd66:	bb 0b       	sbc	r27, r27
    dd68:	2b e0       	ldi	r18, 0x0B	; 11
    dd6a:	88 0f       	add	r24, r24
    dd6c:	99 1f       	adc	r25, r25
    dd6e:	aa 1f       	adc	r26, r26
    dd70:	bb 1f       	adc	r27, r27
    dd72:	2a 95       	dec	r18
    dd74:	d1 f7       	brne	.-12     	; 0xdd6a <tm_to_fat+0x26>
    dd76:	48 2b       	or	r20, r24
    dd78:	59 2b       	or	r21, r25
    dd7a:	6a 2b       	or	r22, r26
    dd7c:	7b 2b       	or	r23, r27
    dd7e:	82 81       	ldd	r24, Z+2	; 0x02
    dd80:	93 81       	ldd	r25, Z+3	; 0x03
    dd82:	09 2e       	mov	r0, r25
    dd84:	00 0c       	add	r0, r0
    dd86:	aa 0b       	sbc	r26, r26
    dd88:	bb 0b       	sbc	r27, r27
    dd8a:	35 e0       	ldi	r19, 0x05	; 5
    dd8c:	88 0f       	add	r24, r24
    dd8e:	99 1f       	adc	r25, r25
    dd90:	aa 1f       	adc	r26, r26
    dd92:	bb 1f       	adc	r27, r27
    dd94:	3a 95       	dec	r19
    dd96:	d1 f7       	brne	.-12     	; 0xdd8c <tm_to_fat+0x48>
    dd98:	48 2b       	or	r20, r24
    dd9a:	59 2b       	or	r21, r25
    dd9c:	6a 2b       	or	r22, r26
    dd9e:	7b 2b       	or	r23, r27
    dda0:	80 81       	ld	r24, Z
    dda2:	91 81       	ldd	r25, Z+1	; 0x01
    dda4:	09 2e       	mov	r0, r25
    dda6:	00 0c       	add	r0, r0
    dda8:	aa 0b       	sbc	r26, r26
    ddaa:	bb 0b       	sbc	r27, r27
    ddac:	b6 95       	lsr	r27
    ddae:	a7 95       	ror	r26
    ddb0:	97 95       	ror	r25
    ddb2:	87 95       	ror	r24
    ddb4:	84 2b       	or	r24, r20
    ddb6:	95 2b       	or	r25, r21
    ddb8:	a6 2b       	or	r26, r22
    ddba:	b7 2b       	or	r27, r23
    ddbc:	02 85       	ldd	r16, Z+10	; 0x0a
    ddbe:	13 85       	ldd	r17, Z+11	; 0x0b
    ddc0:	00 55       	subi	r16, 0x50	; 80
    ddc2:	11 09       	sbc	r17, r1
    ddc4:	01 2e       	mov	r0, r17
    ddc6:	00 0c       	add	r0, r0
    ddc8:	22 0b       	sbc	r18, r18
    ddca:	33 0b       	sbc	r19, r19
    ddcc:	49 e1       	ldi	r20, 0x19	; 25
    ddce:	00 0f       	add	r16, r16
    ddd0:	11 1f       	adc	r17, r17
    ddd2:	22 1f       	adc	r18, r18
    ddd4:	33 1f       	adc	r19, r19
    ddd6:	4a 95       	dec	r20
    ddd8:	d1 f7       	brne	.-12     	; 0xddce <tm_to_fat+0x8a>
    ddda:	ac 01       	movw	r20, r24
    dddc:	bd 01       	movw	r22, r26
    ddde:	40 2b       	or	r20, r16
    dde0:	51 2b       	or	r21, r17
    dde2:	62 2b       	or	r22, r18
    dde4:	73 2b       	or	r23, r19
    dde6:	80 85       	ldd	r24, Z+8	; 0x08
    dde8:	91 85       	ldd	r25, Z+9	; 0x09
    ddea:	09 2e       	mov	r0, r25
    ddec:	00 0c       	add	r0, r0
    ddee:	aa 0b       	sbc	r26, r26
    ddf0:	bb 0b       	sbc	r27, r27
    ddf2:	01 96       	adiw	r24, 0x01	; 1
    ddf4:	a1 1d       	adc	r26, r1
    ddf6:	b1 1d       	adc	r27, r1
    ddf8:	e5 e1       	ldi	r30, 0x15	; 21
    ddfa:	88 0f       	add	r24, r24
    ddfc:	99 1f       	adc	r25, r25
    ddfe:	aa 1f       	adc	r26, r26
    de00:	bb 1f       	adc	r27, r27
    de02:	ea 95       	dec	r30
    de04:	d1 f7       	brne	.-12     	; 0xddfa <tm_to_fat+0xb6>
    de06:	8a 01       	movw	r16, r20
    de08:	9b 01       	movw	r18, r22
    de0a:	08 2b       	or	r16, r24
    de0c:	19 2b       	or	r17, r25
    de0e:	2a 2b       	or	r18, r26
    de10:	3b 2b       	or	r19, r27
    de12:	c9 01       	movw	r24, r18
    de14:	b8 01       	movw	r22, r16
}
    de16:	1f 91       	pop	r17
    de18:	0f 91       	pop	r16
    de1a:	08 95       	ret

0000de1c <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    de1c:	a4 e0       	ldi	r26, 0x04	; 4
    de1e:	b0 e0       	ldi	r27, 0x00	; 0
    de20:	e4 e1       	ldi	r30, 0x14	; 20
    de22:	ff e6       	ldi	r31, 0x6F	; 111
    de24:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    de28:	ce 01       	movw	r24, r28
    de2a:	01 96       	adiw	r24, 0x01	; 1
    de2c:	0e 94 91 35 	call	0x6b22	; 0x6b22 <time>
    return( tm_to_fat(localtime(&t)));
    de30:	ce 01       	movw	r24, r28
    de32:	01 96       	adiw	r24, 0x01	; 1
    de34:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <localtime>
    de38:	85 df       	rcall	.-246    	; 0xdd44 <tm_to_fat>
}
    de3a:	24 96       	adiw	r28, 0x04	; 4
    de3c:	e2 e0       	ldi	r30, 0x02	; 2
    de3e:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000de42 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    de42:	00 d0       	rcall	.+0      	; 0xde44 <put_rc+0x2>
    de44:	00 d0       	rcall	.+0      	; 0xde46 <put_rc+0x4>
    de46:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    de48:	ed b7       	in	r30, 0x3d	; 61
    de4a:	fe b7       	in	r31, 0x3e	; 62
    de4c:	95 83       	std	Z+5, r25	; 0x05
    de4e:	84 83       	std	Z+4, r24	; 0x04
    de50:	87 e3       	ldi	r24, 0x37	; 55
    de52:	9a e0       	ldi	r25, 0x0A	; 10
    de54:	a0 e0       	ldi	r26, 0x00	; 0
    de56:	81 83       	std	Z+1, r24	; 0x01
    de58:	92 83       	std	Z+2, r25	; 0x02
    de5a:	a3 83       	std	Z+3, r26	; 0x03
    de5c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
}
    de60:	0f 90       	pop	r0
    de62:	0f 90       	pop	r0
    de64:	0f 90       	pop	r0
    de66:	0f 90       	pop	r0
    de68:	0f 90       	pop	r0
    de6a:	08 95       	ret

0000de6c <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    de6c:	a4 e4       	ldi	r26, 0x44	; 68
    de6e:	b1 e0       	ldi	r27, 0x01	; 1
    de70:	ec e3       	ldi	r30, 0x3C	; 60
    de72:	ff e6       	ldi	r31, 0x6F	; 111
    de74:	0c 94 8e e1 	jmp	0x1c31c	; 0x1c31c <__prologue_saves__+0x16>
    de78:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    de7a:	bc 01       	movw	r22, r24
    de7c:	ce 01       	movw	r24, r28
    de7e:	89 5e       	subi	r24, 0xE9	; 233
    de80:	9e 4f       	sbci	r25, 0xFE	; 254
    de82:	0e 94 c7 61 	call	0xc38e	; 0xc38e <f_opendir>
    if (fr == FR_OK)
    de86:	00 97       	sbiw	r24, 0x00	; 0
    de88:	09 f0       	breq	.+2      	; 0xde8c <fatfs_scan_files+0x20>
    de8a:	5b c0       	rjmp	.+182    	; 0xdf42 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    de8c:	8f e2       	ldi	r24, 0x2F	; 47
    de8e:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    de90:	be 01       	movw	r22, r28
    de92:	6f 5f       	subi	r22, 0xFF	; 255
    de94:	7f 4f       	sbci	r23, 0xFF	; 255
    de96:	ce 01       	movw	r24, r28
    de98:	89 5e       	subi	r24, 0xE9	; 233
    de9a:	9e 4f       	sbci	r25, 0xFE	; 254
    de9c:	0e 94 4d 62 	call	0xc49a	; 0xc49a <f_readdir>
    dea0:	00 97       	sbiw	r24, 0x00	; 0
    dea2:	09 f0       	breq	.+2      	; 0xdea6 <fatfs_scan_files+0x3a>
    dea4:	4e c0       	rjmp	.+156    	; 0xdf42 <fatfs_scan_files+0xd6>
    dea6:	2f 89       	ldd	r18, Y+23	; 0x17
    dea8:	22 23       	and	r18, r18
    deaa:	09 f4       	brne	.+2      	; 0xdeae <fatfs_scan_files+0x42>
    deac:	4a c0       	rjmp	.+148    	; 0xdf42 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    deae:	89 85       	ldd	r24, Y+9	; 0x09
    deb0:	84 ff       	sbrs	r24, 4
    deb2:	25 c0       	rjmp	.+74     	; 0xdefe <fatfs_scan_files+0x92>
            {
                AccDirs++;
    deb4:	80 91 a9 1c 	lds	r24, 0x1CA9	; 0x801ca9 <AccDirs>
    deb8:	90 91 aa 1c 	lds	r25, 0x1CAA	; 0x801caa <AccDirs+0x1>
    debc:	01 96       	adiw	r24, 0x01	; 1
    debe:	90 93 aa 1c 	sts	0x1CAA, r25	; 0x801caa <AccDirs+0x1>
    dec2:	80 93 a9 1c 	sts	0x1CA9, r24	; 0x801ca9 <AccDirs>
                i = strlen(path);
    dec6:	f8 01       	movw	r30, r16
    dec8:	01 90       	ld	r0, Z+
    deca:	00 20       	and	r0, r0
    decc:	e9 f7       	brne	.-6      	; 0xdec8 <fatfs_scan_files+0x5c>
    dece:	31 97       	sbiw	r30, 0x01	; 1
    ded0:	e0 1b       	sub	r30, r16
    ded2:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ded4:	78 01       	movw	r14, r16
    ded6:	ee 0e       	add	r14, r30
    ded8:	ff 1e       	adc	r15, r31
    deda:	d7 01       	movw	r26, r14
    dedc:	dc 92       	st	X, r13
    dede:	cf 01       	movw	r24, r30
    dee0:	01 96       	adiw	r24, 0x01	; 1
    dee2:	be 01       	movw	r22, r28
    dee4:	69 5e       	subi	r22, 0xE9	; 233
    dee6:	7f 4f       	sbci	r23, 0xFF	; 255
    dee8:	80 0f       	add	r24, r16
    deea:	91 1f       	adc	r25, r17
    deec:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <strcpy>
                fr = fatfs_scan_files(path);
    def0:	c8 01       	movw	r24, r16
    def2:	bc df       	rcall	.-136    	; 0xde6c <fatfs_scan_files>
                path[i] = 0;
    def4:	f7 01       	movw	r30, r14
    def6:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    def8:	00 97       	sbiw	r24, 0x00	; 0
    defa:	51 f2       	breq	.-108    	; 0xde90 <fatfs_scan_files+0x24>
    defc:	22 c0       	rjmp	.+68     	; 0xdf42 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    defe:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <AccFiles>
    df02:	90 91 ac 1c 	lds	r25, 0x1CAC	; 0x801cac <AccFiles+0x1>
    df06:	01 96       	adiw	r24, 0x01	; 1
    df08:	90 93 ac 1c 	sts	0x1CAC, r25	; 0x801cac <AccFiles+0x1>
    df0c:	80 93 ab 1c 	sts	0x1CAB, r24	; 0x801cab <AccFiles>
                AccSize += info.fsize;
    df10:	40 91 a5 1c 	lds	r20, 0x1CA5	; 0x801ca5 <AccSize>
    df14:	50 91 a6 1c 	lds	r21, 0x1CA6	; 0x801ca6 <AccSize+0x1>
    df18:	60 91 a7 1c 	lds	r22, 0x1CA7	; 0x801ca7 <AccSize+0x2>
    df1c:	70 91 a8 1c 	lds	r23, 0x1CA8	; 0x801ca8 <AccSize+0x3>
    df20:	89 81       	ldd	r24, Y+1	; 0x01
    df22:	9a 81       	ldd	r25, Y+2	; 0x02
    df24:	ab 81       	ldd	r26, Y+3	; 0x03
    df26:	bc 81       	ldd	r27, Y+4	; 0x04
    df28:	84 0f       	add	r24, r20
    df2a:	95 1f       	adc	r25, r21
    df2c:	a6 1f       	adc	r26, r22
    df2e:	b7 1f       	adc	r27, r23
    df30:	80 93 a5 1c 	sts	0x1CA5, r24	; 0x801ca5 <AccSize>
    df34:	90 93 a6 1c 	sts	0x1CA6, r25	; 0x801ca6 <AccSize+0x1>
    df38:	a0 93 a7 1c 	sts	0x1CA7, r26	; 0x801ca7 <AccSize+0x2>
    df3c:	b0 93 a8 1c 	sts	0x1CA8, r27	; 0x801ca8 <AccSize+0x3>
    df40:	a7 cf       	rjmp	.-178    	; 0xde90 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    df42:	cc 5b       	subi	r28, 0xBC	; 188
    df44:	de 4f       	sbci	r29, 0xFE	; 254
    df46:	e7 e0       	ldi	r30, 0x07	; 7
    df48:	0c 94 aa e1 	jmp	0x1c354	; 0x1c354 <__epilogue_restores__+0x16>

0000df4c <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    df4c:	01 97       	sbiw	r24, 0x01	; 1
    df4e:	84 30       	cpi	r24, 0x04	; 4
    df50:	91 05       	cpc	r25, r1
    df52:	40 f4       	brcc	.+16     	; 0xdf64 <fatfs_fstype+0x18>
    df54:	88 0f       	add	r24, r24
    df56:	99 1f       	adc	r25, r25
    df58:	fc 01       	movw	r30, r24
    df5a:	e6 53       	subi	r30, 0x36	; 54
    df5c:	f7 4f       	sbci	r31, 0xF7	; 247
    df5e:	80 81       	ld	r24, Z
    df60:	91 81       	ldd	r25, Z+1	; 0x01
    df62:	08 95       	ret
    char *ptr;
    switch(type)
    df64:	88 ea       	ldi	r24, 0xA8	; 168
    df66:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    df68:	08 95       	ret

0000df6a <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    df6a:	a7 e3       	ldi	r26, 0x37	; 55
    df6c:	b0 e0       	ldi	r27, 0x00	; 0
    df6e:	eb eb       	ldi	r30, 0xBB	; 187
    df70:	ff e6       	ldi	r31, 0x6F	; 111
    df72:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    df76:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    df78:	fc 01       	movw	r30, r24
    df7a:	21 91       	ld	r18, Z+
    df7c:	cf 01       	movw	r24, r30
    df7e:	20 32       	cpi	r18, 0x20	; 32
    df80:	d1 f3       	breq	.-12     	; 0xdf76 <fatfs_status+0xc>
    df82:	29 30       	cpi	r18, 0x09	; 9
    df84:	c1 f3       	breq	.-16     	; 0xdf76 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    df86:	ed b7       	in	r30, 0x3d	; 61
    df88:	fe b7       	in	r31, 0x3e	; 62
    df8a:	e4 82       	std	Z+4, r14	; 0x04
    df8c:	f5 82       	std	Z+5, r15	; 0x05
    df8e:	86 e2       	ldi	r24, 0x26	; 38
    df90:	9a e0       	ldi	r25, 0x0A	; 10
    df92:	a0 e0       	ldi	r26, 0x00	; 0
    df94:	81 83       	std	Z+1, r24	; 0x01
    df96:	92 83       	std	Z+2, r25	; 0x02
    df98:	a3 83       	std	Z+3, r26	; 0x03
    df9a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    df9e:	ae 01       	movw	r20, r28
    dfa0:	4a 5c       	subi	r20, 0xCA	; 202
    dfa2:	5f 4f       	sbci	r21, 0xFF	; 255
    dfa4:	be 01       	movw	r22, r28
    dfa6:	6e 5c       	subi	r22, 0xCE	; 206
    dfa8:	7f 4f       	sbci	r23, 0xFF	; 255
    dfaa:	c7 01       	movw	r24, r14
    dfac:	0e 94 cf 62 	call	0xc59e	; 0xc59e <f_getfree>
    if (res)
    dfb0:	00 97       	sbiw	r24, 0x00	; 0
    dfb2:	09 f0       	breq	.+2      	; 0xdfb6 <fatfs_status+0x4c>
    dfb4:	f8 c0       	rjmp	.+496    	; 0xe1a6 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    dfb6:	ee a9       	ldd	r30, Y+54	; 0x36
    dfb8:	ff a9       	ldd	r31, Y+55	; 0x37
    dfba:	80 81       	ld	r24, Z
    dfbc:	90 e0       	ldi	r25, 0x00	; 0
    dfbe:	c6 df       	rcall	.-116    	; 0xdf4c <fatfs_fstype>
    dfc0:	ed b7       	in	r30, 0x3d	; 61
    dfc2:	fe b7       	in	r31, 0x3e	; 62
    dfc4:	95 83       	std	Z+5, r25	; 0x05
    dfc6:	84 83       	std	Z+4, r24	; 0x04
    dfc8:	88 e0       	ldi	r24, 0x08	; 8
    dfca:	9a e0       	ldi	r25, 0x0A	; 10
    dfcc:	a0 e0       	ldi	r26, 0x00	; 0
    dfce:	81 83       	std	Z+1, r24	; 0x01
    dfd0:	92 83       	std	Z+2, r25	; 0x02
    dfd2:	a3 83       	std	Z+3, r26	; 0x03
    dfd4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    dfd8:	ee a9       	ldd	r30, Y+54	; 0x36
    dfda:	ff a9       	ldd	r31, Y+55	; 0x37
    dfdc:	81 85       	ldd	r24, Z+9	; 0x09
    dfde:	92 85       	ldd	r25, Z+10	; 0x0a
    dfe0:	a0 e0       	ldi	r26, 0x00	; 0
    dfe2:	b0 e0       	ldi	r27, 0x00	; 0
    dfe4:	39 e0       	ldi	r19, 0x09	; 9
    dfe6:	88 0f       	add	r24, r24
    dfe8:	99 1f       	adc	r25, r25
    dfea:	aa 1f       	adc	r26, r26
    dfec:	bb 1f       	adc	r27, r27
    dfee:	3a 95       	dec	r19
    dff0:	d1 f7       	brne	.-12     	; 0xdfe6 <fatfs_status+0x7c>
    dff2:	ed b7       	in	r30, 0x3d	; 61
    dff4:	fe b7       	in	r31, 0x3e	; 62
    dff6:	84 83       	std	Z+4, r24	; 0x04
    dff8:	95 83       	std	Z+5, r25	; 0x05
    dffa:	a6 83       	std	Z+6, r26	; 0x06
    dffc:	b7 83       	std	Z+7, r27	; 0x07
    dffe:	89 ee       	ldi	r24, 0xE9	; 233
    e000:	99 e0       	ldi	r25, 0x09	; 9
    e002:	a0 e0       	ldi	r26, 0x00	; 0
    e004:	81 83       	std	Z+1, r24	; 0x01
    e006:	92 83       	std	Z+2, r25	; 0x02
    e008:	a3 83       	std	Z+3, r26	; 0x03
    e00a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e00e:	ee a9       	ldd	r30, Y+54	; 0x36
    e010:	ff a9       	ldd	r31, Y+55	; 0x37
    e012:	82 81       	ldd	r24, Z+2	; 0x02
    e014:	90 e0       	ldi	r25, 0x00	; 0
    e016:	ed b7       	in	r30, 0x3d	; 61
    e018:	fe b7       	in	r31, 0x3e	; 62
    e01a:	95 83       	std	Z+5, r25	; 0x05
    e01c:	84 83       	std	Z+4, r24	; 0x04
    e01e:	8b ec       	ldi	r24, 0xCB	; 203
    e020:	99 e0       	ldi	r25, 0x09	; 9
    e022:	a0 e0       	ldi	r26, 0x00	; 0
    e024:	81 83       	std	Z+1, r24	; 0x01
    e026:	92 83       	std	Z+2, r25	; 0x02
    e028:	a3 83       	std	Z+3, r26	; 0x03
    e02a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e02e:	ee a9       	ldd	r30, Y+54	; 0x36
    e030:	ff a9       	ldd	r31, Y+55	; 0x37
    e032:	87 81       	ldd	r24, Z+7	; 0x07
    e034:	90 85       	ldd	r25, Z+8	; 0x08
    e036:	ed b7       	in	r30, 0x3d	; 61
    e038:	fe b7       	in	r31, 0x3e	; 62
    e03a:	95 83       	std	Z+5, r25	; 0x05
    e03c:	84 83       	std	Z+4, r24	; 0x04
    e03e:	8d ea       	ldi	r24, 0xAD	; 173
    e040:	99 e0       	ldi	r25, 0x09	; 9
    e042:	a0 e0       	ldi	r26, 0x00	; 0
    e044:	81 83       	std	Z+1, r24	; 0x01
    e046:	92 83       	std	Z+2, r25	; 0x02
    e048:	a3 83       	std	Z+3, r26	; 0x03
    e04a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e04e:	ee a9       	ldd	r30, Y+54	; 0x36
    e050:	ff a9       	ldd	r31, Y+55	; 0x37
    e052:	85 8d       	ldd	r24, Z+29	; 0x1d
    e054:	96 8d       	ldd	r25, Z+30	; 0x1e
    e056:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e058:	b0 a1       	ldd	r27, Z+32	; 0x20
    e05a:	ed b7       	in	r30, 0x3d	; 61
    e05c:	fe b7       	in	r31, 0x3e	; 62
    e05e:	84 83       	std	Z+4, r24	; 0x04
    e060:	95 83       	std	Z+5, r25	; 0x05
    e062:	a6 83       	std	Z+6, r26	; 0x06
    e064:	b7 83       	std	Z+7, r27	; 0x07
    e066:	8e e8       	ldi	r24, 0x8E	; 142
    e068:	99 e0       	ldi	r25, 0x09	; 9
    e06a:	a0 e0       	ldi	r26, 0x00	; 0
    e06c:	81 83       	std	Z+1, r24	; 0x01
    e06e:	92 83       	std	Z+2, r25	; 0x02
    e070:	a3 83       	std	Z+3, r26	; 0x03
    e072:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e076:	ee a9       	ldd	r30, Y+54	; 0x36
    e078:	ff a9       	ldd	r31, Y+55	; 0x37
    e07a:	81 8d       	ldd	r24, Z+25	; 0x19
    e07c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e07e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e080:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e082:	02 97       	sbiw	r24, 0x02	; 2
    e084:	a1 09       	sbc	r26, r1
    e086:	b1 09       	sbc	r27, r1
    e088:	ed b7       	in	r30, 0x3d	; 61
    e08a:	fe b7       	in	r31, 0x3e	; 62
    e08c:	84 83       	std	Z+4, r24	; 0x04
    e08e:	95 83       	std	Z+5, r25	; 0x05
    e090:	a6 83       	std	Z+6, r26	; 0x06
    e092:	b7 83       	std	Z+7, r27	; 0x07
    e094:	8f e6       	ldi	r24, 0x6F	; 111
    e096:	99 e0       	ldi	r25, 0x09	; 9
    e098:	a0 e0       	ldi	r26, 0x00	; 0
    e09a:	81 83       	std	Z+1, r24	; 0x01
    e09c:	92 83       	std	Z+2, r25	; 0x02
    e09e:	a3 83       	std	Z+3, r26	; 0x03
    e0a0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e0a4:	ee a9       	ldd	r30, Y+54	; 0x36
    e0a6:	ff a9       	ldd	r31, Y+55	; 0x37
    e0a8:	85 a1       	ldd	r24, Z+37	; 0x25
    e0aa:	96 a1       	ldd	r25, Z+38	; 0x26
    e0ac:	a7 a1       	ldd	r26, Z+39	; 0x27
    e0ae:	b0 a5       	ldd	r27, Z+40	; 0x28
    e0b0:	ed b7       	in	r30, 0x3d	; 61
    e0b2:	fe b7       	in	r31, 0x3e	; 62
    e0b4:	84 83       	std	Z+4, r24	; 0x04
    e0b6:	95 83       	std	Z+5, r25	; 0x05
    e0b8:	a6 83       	std	Z+6, r26	; 0x06
    e0ba:	b7 83       	std	Z+7, r27	; 0x07
    e0bc:	80 e5       	ldi	r24, 0x50	; 80
    e0be:	99 e0       	ldi	r25, 0x09	; 9
    e0c0:	a0 e0       	ldi	r26, 0x00	; 0
    e0c2:	81 83       	std	Z+1, r24	; 0x01
    e0c4:	92 83       	std	Z+2, r25	; 0x02
    e0c6:	a3 83       	std	Z+3, r26	; 0x03
    e0c8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e0cc:	ee a9       	ldd	r30, Y+54	; 0x36
    e0ce:	ff a9       	ldd	r31, Y+55	; 0x37
    e0d0:	81 a5       	ldd	r24, Z+41	; 0x29
    e0d2:	92 a5       	ldd	r25, Z+42	; 0x2a
    e0d4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e0d6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e0d8:	ed b7       	in	r30, 0x3d	; 61
    e0da:	fe b7       	in	r31, 0x3e	; 62
    e0dc:	84 83       	std	Z+4, r24	; 0x04
    e0de:	95 83       	std	Z+5, r25	; 0x05
    e0e0:	a6 83       	std	Z+6, r26	; 0x06
    e0e2:	b7 83       	std	Z+7, r27	; 0x07
    e0e4:	81 e3       	ldi	r24, 0x31	; 49
    e0e6:	99 e0       	ldi	r25, 0x09	; 9
    e0e8:	a0 e0       	ldi	r26, 0x00	; 0
    e0ea:	81 83       	std	Z+1, r24	; 0x01
    e0ec:	92 83       	std	Z+2, r25	; 0x02
    e0ee:	a3 83       	std	Z+3, r26	; 0x03
    e0f0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e0f4:	ee a9       	ldd	r30, Y+54	; 0x36
    e0f6:	ff a9       	ldd	r31, Y+55	; 0x37
    e0f8:	85 a5       	ldd	r24, Z+45	; 0x2d
    e0fa:	96 a5       	ldd	r25, Z+46	; 0x2e
    e0fc:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e0fe:	b0 a9       	ldd	r27, Z+48	; 0x30
    e100:	ed b7       	in	r30, 0x3d	; 61
    e102:	fe b7       	in	r31, 0x3e	; 62
    e104:	84 83       	std	Z+4, r24	; 0x04
    e106:	95 83       	std	Z+5, r25	; 0x05
    e108:	a6 83       	std	Z+6, r26	; 0x06
    e10a:	b7 83       	std	Z+7, r27	; 0x07
    e10c:	82 e1       	ldi	r24, 0x12	; 18
    e10e:	99 e0       	ldi	r25, 0x09	; 9
    e110:	a0 e0       	ldi	r26, 0x00	; 0
    e112:	81 83       	std	Z+1, r24	; 0x01
    e114:	92 83       	std	Z+2, r25	; 0x02
    e116:	a3 83       	std	Z+3, r26	; 0x03
    e118:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e11c:	ae 01       	movw	r20, r28
    e11e:	42 5d       	subi	r20, 0xD2	; 210
    e120:	5f 4f       	sbci	r21, 0xFF	; 255
    e122:	be 01       	movw	r22, r28
    e124:	6c 5e       	subi	r22, 0xEC	; 236
    e126:	7f 4f       	sbci	r23, 0xFF	; 255
    e128:	c7 01       	movw	r24, r14
    e12a:	0e 94 01 67 	call	0xce02	; 0xce02 <f_getlabel>
    if (res)
    e12e:	00 97       	sbiw	r24, 0x00	; 0
    e130:	d1 f5       	brne	.+116    	; 0xe1a6 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e132:	8c 89       	ldd	r24, Y+20	; 0x14
    e134:	81 11       	cpse	r24, r1
    e136:	03 c0       	rjmp	.+6      	; 0xe13e <fatfs_status+0x1d4>
    e138:	80 eb       	ldi	r24, 0xB0	; 176
    e13a:	98 e0       	ldi	r25, 0x08	; 8
    e13c:	02 c0       	rjmp	.+4      	; 0xe142 <fatfs_status+0x1d8>
    e13e:	ce 01       	movw	r24, r28
    e140:	44 96       	adiw	r24, 0x14	; 20
    e142:	ed b7       	in	r30, 0x3d	; 61
    e144:	fe b7       	in	r31, 0x3e	; 62
    e146:	95 83       	std	Z+5, r25	; 0x05
    e148:	84 83       	std	Z+4, r24	; 0x04
    e14a:	84 ef       	ldi	r24, 0xF4	; 244
    e14c:	98 e0       	ldi	r25, 0x08	; 8
    e14e:	a0 e0       	ldi	r26, 0x00	; 0
    e150:	81 83       	std	Z+1, r24	; 0x01
    e152:	92 83       	std	Z+2, r25	; 0x02
    e154:	a3 83       	std	Z+3, r26	; 0x03
    e156:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e15a:	8e a5       	ldd	r24, Y+46	; 0x2e
    e15c:	9f a5       	ldd	r25, Y+47	; 0x2f
    e15e:	a8 a9       	ldd	r26, Y+48	; 0x30
    e160:	b9 a9       	ldd	r27, Y+49	; 0x31
    e162:	ed b7       	in	r30, 0x3d	; 61
    e164:	fe b7       	in	r31, 0x3e	; 62
    e166:	97 83       	std	Z+7, r25	; 0x07
    e168:	86 83       	std	Z+6, r24	; 0x06
    e16a:	b5 83       	std	Z+5, r27	; 0x05
    e16c:	a4 83       	std	Z+4, r26	; 0x04
    e16e:	8f ec       	ldi	r24, 0xCF	; 207
    e170:	98 e0       	ldi	r25, 0x08	; 8
    e172:	a0 e0       	ldi	r26, 0x00	; 0
    e174:	81 83       	std	Z+1, r24	; 0x01
    e176:	92 83       	std	Z+2, r25	; 0x02
    e178:	a3 83       	std	Z+3, r26	; 0x03
    e17a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e17e:	10 92 aa 1c 	sts	0x1CAA, r1	; 0x801caa <AccDirs+0x1>
    e182:	10 92 a9 1c 	sts	0x1CA9, r1	; 0x801ca9 <AccDirs>
    e186:	10 92 ac 1c 	sts	0x1CAC, r1	; 0x801cac <AccFiles+0x1>
    e18a:	10 92 ab 1c 	sts	0x1CAB, r1	; 0x801cab <AccFiles>
    e18e:	10 92 a5 1c 	sts	0x1CA5, r1	; 0x801ca5 <AccSize>
    e192:	10 92 a6 1c 	sts	0x1CA6, r1	; 0x801ca6 <AccSize+0x1>
    e196:	10 92 a7 1c 	sts	0x1CA7, r1	; 0x801ca7 <AccSize+0x2>
    e19a:	10 92 a8 1c 	sts	0x1CA8, r1	; 0x801ca8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e19e:	c7 01       	movw	r24, r14
    e1a0:	65 de       	rcall	.-822    	; 0xde6c <fatfs_scan_files>
    if (res)
    e1a2:	00 97       	sbiw	r24, 0x00	; 0
    {
        put_rc(res);
    e1a4:	11 f0       	breq	.+4      	; 0xe1aa <fatfs_status+0x240>
    e1a6:	4d de       	rcall	.-870    	; 0xde42 <put_rc>
        return;
    e1a8:	56 c0       	rjmp	.+172    	; 0xe256 <fatfs_status+0x2ec>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e1aa:	0e a9       	ldd	r16, Y+54	; 0x36
    e1ac:	1f a9       	ldd	r17, Y+55	; 0x37
    e1ae:	f8 01       	movw	r30, r16
    e1b0:	c1 84       	ldd	r12, Z+9	; 0x09
    e1b2:	d2 84       	ldd	r13, Z+10	; 0x0a
    e1b4:	e1 2c       	mov	r14, r1
    e1b6:	f1 2c       	mov	r15, r1
    e1b8:	6a a9       	ldd	r22, Y+50	; 0x32
    e1ba:	7b a9       	ldd	r23, Y+51	; 0x33
    e1bc:	8c a9       	ldd	r24, Y+52	; 0x34
    e1be:	9d a9       	ldd	r25, Y+53	; 0x35
    e1c0:	a7 01       	movw	r20, r14
    e1c2:	96 01       	movw	r18, r12
    e1c4:	0e 94 d4 e0 	call	0x1c1a8	; 0x1c1a8 <__mulsi3>
    e1c8:	22 e0       	ldi	r18, 0x02	; 2
    e1ca:	30 e0       	ldi	r19, 0x00	; 0
    e1cc:	40 e0       	ldi	r20, 0x00	; 0
    e1ce:	50 e0       	ldi	r21, 0x00	; 0
    e1d0:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
    e1d4:	ed b7       	in	r30, 0x3d	; 61
    e1d6:	fe b7       	in	r31, 0x3e	; 62
    e1d8:	20 8b       	std	Z+16, r18	; 0x10
    e1da:	31 8b       	std	Z+17, r19	; 0x11
    e1dc:	42 8b       	std	Z+18, r20	; 0x12
    e1de:	53 8b       	std	Z+19, r21	; 0x13
    e1e0:	f8 01       	movw	r30, r16
    e1e2:	81 8d       	ldd	r24, Z+25	; 0x19
    e1e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    e1e6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e1e8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e1ea:	9c 01       	movw	r18, r24
    e1ec:	ad 01       	movw	r20, r26
    e1ee:	22 50       	subi	r18, 0x02	; 2
    e1f0:	31 09       	sbc	r19, r1
    e1f2:	41 09       	sbc	r20, r1
    e1f4:	51 09       	sbc	r21, r1
    e1f6:	c7 01       	movw	r24, r14
    e1f8:	b6 01       	movw	r22, r12
    e1fa:	0e 94 d4 e0 	call	0x1c1a8	; 0x1c1a8 <__mulsi3>
    e1fe:	dc 01       	movw	r26, r24
    e200:	cb 01       	movw	r24, r22
    e202:	b6 95       	lsr	r27
    e204:	a7 95       	ror	r26
    e206:	97 95       	ror	r25
    e208:	87 95       	ror	r24
    e20a:	ed b7       	in	r30, 0x3d	; 61
    e20c:	fe b7       	in	r31, 0x3e	; 62
    e20e:	84 87       	std	Z+12, r24	; 0x0c
    e210:	95 87       	std	Z+13, r25	; 0x0d
    e212:	a6 87       	std	Z+14, r26	; 0x0e
    e214:	b7 87       	std	Z+15, r27	; 0x0f
    e216:	80 91 a9 1c 	lds	r24, 0x1CA9	; 0x801ca9 <AccDirs>
    e21a:	90 91 aa 1c 	lds	r25, 0x1CAA	; 0x801caa <AccDirs+0x1>
    e21e:	93 87       	std	Z+11, r25	; 0x0b
    e220:	82 87       	std	Z+10, r24	; 0x0a
    e222:	80 91 a5 1c 	lds	r24, 0x1CA5	; 0x801ca5 <AccSize>
    e226:	90 91 a6 1c 	lds	r25, 0x1CA6	; 0x801ca6 <AccSize+0x1>
    e22a:	a0 91 a7 1c 	lds	r26, 0x1CA7	; 0x801ca7 <AccSize+0x2>
    e22e:	b0 91 a8 1c 	lds	r27, 0x1CA8	; 0x801ca8 <AccSize+0x3>
    e232:	86 83       	std	Z+6, r24	; 0x06
    e234:	97 83       	std	Z+7, r25	; 0x07
    e236:	a0 87       	std	Z+8, r26	; 0x08
    e238:	b1 87       	std	Z+9, r27	; 0x09
    e23a:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <AccFiles>
    e23e:	90 91 ac 1c 	lds	r25, 0x1CAC	; 0x801cac <AccFiles+0x1>
    e242:	95 83       	std	Z+5, r25	; 0x05
    e244:	84 83       	std	Z+4, r24	; 0x04
    e246:	82 e8       	ldi	r24, 0x82	; 130
    e248:	98 e0       	ldi	r25, 0x08	; 8
    e24a:	a0 e0       	ldi	r26, 0x00	; 0
    e24c:	81 83       	std	Z+1, r24	; 0x01
    e24e:	92 83       	std	Z+2, r25	; 0x02
    e250:	a3 83       	std	Z+3, r26	; 0x03
    e252:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e256:	e7 96       	adiw	r28, 0x37	; 55
    e258:	e8 e0       	ldi	r30, 0x08	; 8
    e25a:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000e25e <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e25e:	ab e1       	ldi	r26, 0x1B	; 27
    e260:	b0 e0       	ldi	r27, 0x00	; 0
    e262:	e5 e3       	ldi	r30, 0x35	; 53
    e264:	f1 e7       	ldi	r31, 0x71	; 113
    e266:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    e26a:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e26c:	fc 01       	movw	r30, r24
    e26e:	86 89       	ldd	r24, Z+22	; 0x16
    e270:	81 11       	cpse	r24, r1
    e272:	03 c0       	rjmp	.+6      	; 0xe27a <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e274:	87 e6       	ldi	r24, 0x67	; 103
    e276:	98 e0       	ldi	r25, 0x08	; 8
    e278:	69 c0       	rjmp	.+210    	; 0xe34c <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e27a:	fd 01       	movw	r30, r26
    e27c:	80 85       	ldd	r24, Z+8	; 0x08
    e27e:	84 fd       	sbrc	r24, 4
    e280:	02 c0       	rjmp	.+4      	; 0xe286 <fatfs_filinfo_list+0x28>
    e282:	9d e2       	ldi	r25, 0x2D	; 45
    e284:	01 c0       	rjmp	.+2      	; 0xe288 <fatfs_filinfo_list+0x2a>
    e286:	94 e4       	ldi	r25, 0x44	; 68
    e288:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e28a:	80 fd       	sbrc	r24, 0
    e28c:	02 c0       	rjmp	.+4      	; 0xe292 <fatfs_filinfo_list+0x34>
    e28e:	9d e2       	ldi	r25, 0x2D	; 45
    e290:	01 c0       	rjmp	.+2      	; 0xe294 <fatfs_filinfo_list+0x36>
    e292:	92 e5       	ldi	r25, 0x52	; 82
    e294:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e296:	81 fd       	sbrc	r24, 1
    e298:	02 c0       	rjmp	.+4      	; 0xe29e <fatfs_filinfo_list+0x40>
    e29a:	9d e2       	ldi	r25, 0x2D	; 45
    e29c:	01 c0       	rjmp	.+2      	; 0xe2a0 <fatfs_filinfo_list+0x42>
    e29e:	98 e4       	ldi	r25, 0x48	; 72
    e2a0:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e2a2:	82 fd       	sbrc	r24, 2
    e2a4:	02 c0       	rjmp	.+4      	; 0xe2aa <fatfs_filinfo_list+0x4c>
    e2a6:	9d e2       	ldi	r25, 0x2D	; 45
    e2a8:	01 c0       	rjmp	.+2      	; 0xe2ac <fatfs_filinfo_list+0x4e>
    e2aa:	93 e5       	ldi	r25, 0x53	; 83
    e2ac:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e2ae:	85 fd       	sbrc	r24, 5
    e2b0:	02 c0       	rjmp	.+4      	; 0xe2b6 <fatfs_filinfo_list+0x58>
    e2b2:	8d e2       	ldi	r24, 0x2D	; 45
    e2b4:	01 c0       	rjmp	.+2      	; 0xe2b8 <fatfs_filinfo_list+0x5a>
    e2b6:	81 e4       	ldi	r24, 0x41	; 65
    e2b8:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e2ba:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e2bc:	fd 01       	movw	r30, r26
    e2be:	24 81       	ldd	r18, Z+4	; 0x04
    e2c0:	35 81       	ldd	r19, Z+5	; 0x05
    e2c2:	46 81       	ldd	r20, Z+6	; 0x06
    e2c4:	57 81       	ldd	r21, Z+7	; 0x07
    e2c6:	cd 01       	movw	r24, r26
    e2c8:	46 96       	adiw	r24, 0x16	; 22
    e2ca:	ed b7       	in	r30, 0x3d	; 61
    e2cc:	fe b7       	in	r31, 0x3e	; 62
    e2ce:	95 8b       	std	Z+21, r25	; 0x15
    e2d0:	84 8b       	std	Z+20, r24	; 0x14
    e2d2:	8d 91       	ld	r24, X+
    e2d4:	9d 91       	ld	r25, X+
    e2d6:	0d 90       	ld	r0, X+
    e2d8:	bc 91       	ld	r27, X
    e2da:	a0 2d       	mov	r26, r0
    e2dc:	80 8b       	std	Z+16, r24	; 0x10
    e2de:	91 8b       	std	Z+17, r25	; 0x11
    e2e0:	a2 8b       	std	Z+18, r26	; 0x12
    e2e2:	b3 8b       	std	Z+19, r27	; 0x13
    e2e4:	ca 01       	movw	r24, r20
    e2e6:	45 e0       	ldi	r20, 0x05	; 5
    e2e8:	96 95       	lsr	r25
    e2ea:	87 95       	ror	r24
    e2ec:	4a 95       	dec	r20
    e2ee:	e1 f7       	brne	.-8      	; 0xe2e8 <fatfs_filinfo_list+0x8a>
    e2f0:	8f 73       	andi	r24, 0x3F	; 63
    e2f2:	99 27       	eor	r25, r25
    e2f4:	97 87       	std	Z+15, r25	; 0x0f
    e2f6:	86 87       	std	Z+14, r24	; 0x0e
    e2f8:	85 2f       	mov	r24, r21
    e2fa:	86 95       	lsr	r24
    e2fc:	86 95       	lsr	r24
    e2fe:	86 95       	lsr	r24
    e300:	84 87       	std	Z+12, r24	; 0x0c
    e302:	15 86       	std	Z+13, r1	; 0x0d
    e304:	c9 01       	movw	r24, r18
    e306:	8f 71       	andi	r24, 0x1F	; 31
    e308:	99 27       	eor	r25, r25
    e30a:	93 87       	std	Z+11, r25	; 0x0b
    e30c:	82 87       	std	Z+10, r24	; 0x0a
    e30e:	c9 01       	movw	r24, r18
    e310:	55 e0       	ldi	r21, 0x05	; 5
    e312:	96 95       	lsr	r25
    e314:	87 95       	ror	r24
    e316:	5a 95       	dec	r21
    e318:	e1 f7       	brne	.-8      	; 0xe312 <fatfs_filinfo_list+0xb4>
    e31a:	8f 70       	andi	r24, 0x0F	; 15
    e31c:	99 27       	eor	r25, r25
    e31e:	91 87       	std	Z+9, r25	; 0x09
    e320:	80 87       	std	Z+8, r24	; 0x08
    e322:	23 2f       	mov	r18, r19
    e324:	33 27       	eor	r19, r19
    e326:	26 95       	lsr	r18
    e328:	24 54       	subi	r18, 0x44	; 68
    e32a:	38 4f       	sbci	r19, 0xF8	; 248
    e32c:	37 83       	std	Z+7, r19	; 0x07
    e32e:	26 83       	std	Z+6, r18	; 0x06
    e330:	ce 01       	movw	r24, r28
    e332:	46 96       	adiw	r24, 0x16	; 22
    e334:	95 83       	std	Z+5, r25	; 0x05
    e336:	84 83       	std	Z+4, r24	; 0x04
    e338:	85 e4       	ldi	r24, 0x45	; 69
    e33a:	98 e0       	ldi	r25, 0x08	; 8
    e33c:	a0 e0       	ldi	r26, 0x00	; 0
    e33e:	81 83       	std	Z+1, r24	; 0x01
    e340:	92 83       	std	Z+2, r25	; 0x02
    e342:	a3 83       	std	Z+3, r26	; 0x03
    e344:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e348:	83 e4       	ldi	r24, 0x43	; 67
    e34a:	98 e0       	ldi	r25, 0x08	; 8
    e34c:	a0 e0       	ldi	r26, 0x00	; 0
    e34e:	ed b7       	in	r30, 0x3d	; 61
    e350:	fe b7       	in	r31, 0x3e	; 62
    e352:	81 83       	std	Z+1, r24	; 0x01
    e354:	92 83       	std	Z+2, r25	; 0x02
    e356:	a3 83       	std	Z+3, r26	; 0x03
    e358:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
}
    e35c:	6b 96       	adiw	r28, 0x1b	; 27
    e35e:	e2 e0       	ldi	r30, 0x02	; 2
    e360:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000e364 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e364:	cf 93       	push	r28
    e366:	df 93       	push	r29
    e368:	00 d0       	rcall	.+0      	; 0xe36a <fatfs_help+0x6>
    e36a:	1f 92       	push	r1
    e36c:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e36e:	88 e8       	ldi	r24, 0x88	; 136
    e370:	9b e0       	ldi	r25, 0x0B	; 11
    e372:	a0 e0       	ldi	r26, 0x00	; 0
    e374:	ed b7       	in	r30, 0x3d	; 61
    e376:	fe b7       	in	r31, 0x3e	; 62
    e378:	81 83       	std	Z+1, r24	; 0x01
    e37a:	92 83       	std	Z+2, r25	; 0x02
    e37c:	a3 83       	std	Z+3, r26	; 0x03
    e37e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    if(full)
    e382:	cd 2b       	or	r28, r29
    e384:	51 f0       	breq	.+20     	; 0xe39a <fatfs_help+0x36>
    {
        printf(
    e386:	8c e0       	ldi	r24, 0x0C	; 12
    e388:	9b e0       	ldi	r25, 0x0B	; 11
    e38a:	a0 e0       	ldi	r26, 0x00	; 0
    e38c:	ed b7       	in	r30, 0x3d	; 61
    e38e:	fe b7       	in	r31, 0x3e	; 62
    e390:	81 83       	std	Z+1, r24	; 0x01
    e392:	92 83       	std	Z+2, r25	; 0x02
    e394:	a3 83       	std	Z+3, r26	; 0x03
    e396:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    #endif
            "\n"
            );
    }

}
    e39a:	cd b7       	in	r28, 0x3d	; 61
    e39c:	de b7       	in	r29, 0x3e	; 62
    e39e:	23 96       	adiw	r28, 0x03	; 3
    e3a0:	e2 e0       	ldi	r30, 0x02	; 2
    e3a2:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000e3a6 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e3a6:	a5 e5       	ldi	r26, 0x55	; 85
    e3a8:	b2 e0       	ldi	r27, 0x02	; 2
    e3aa:	e9 ed       	ldi	r30, 0xD9	; 217
    e3ac:	f1 e7       	ldi	r31, 0x71	; 113
    e3ae:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    e3b2:	8e 01       	movw	r16, r28
    e3b4:	0e 5d       	subi	r16, 0xDE	; 222
    e3b6:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e3b8:	00 97       	sbiw	r24, 0x00	; 0
    e3ba:	21 f0       	breq	.+8      	; 0xe3c4 <fatfs_ls+0x1e>
    e3bc:	fc 01       	movw	r30, r24
    e3be:	20 81       	ld	r18, Z
    e3c0:	21 11       	cpse	r18, r1
    e3c2:	03 c0       	rjmp	.+6      	; 0xe3ca <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e3c4:	67 ef       	ldi	r22, 0xF7	; 247
    e3c6:	72 e1       	ldi	r23, 0x12	; 18
    e3c8:	01 c0       	rjmp	.+2      	; 0xe3cc <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e3ca:	bc 01       	movw	r22, r24
    e3cc:	c8 01       	movw	r24, r16
    e3ce:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e3d2:	ed b7       	in	r30, 0x3d	; 61
    e3d4:	fe b7       	in	r31, 0x3e	; 62
    e3d6:	15 83       	std	Z+5, r17	; 0x05
    e3d8:	04 83       	std	Z+4, r16	; 0x04
    e3da:	8c e7       	ldi	r24, 0x7C	; 124
    e3dc:	9a e0       	ldi	r25, 0x0A	; 10
    e3de:	a0 e0       	ldi	r26, 0x00	; 0
    e3e0:	81 83       	std	Z+1, r24	; 0x01
    e3e2:	92 83       	std	Z+2, r25	; 0x02
    e3e4:	a3 83       	std	Z+3, r26	; 0x03
    e3e6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    res = f_opendir(&dirs, buff);
    e3ea:	b8 01       	movw	r22, r16
    e3ec:	ce 01       	movw	r24, r28
    e3ee:	8e 5d       	subi	r24, 0xDE	; 222
    e3f0:	9d 4f       	sbci	r25, 0xFD	; 253
    e3f2:	0e 94 c7 61 	call	0xc38e	; 0xc38e <f_opendir>
    if (res) { put_rc(res); return; }
    e3f6:	00 97       	sbiw	r24, 0x00	; 0
    e3f8:	11 f0       	breq	.+4      	; 0xe3fe <fatfs_ls+0x58>
    e3fa:	23 dd       	rcall	.-1466   	; 0xde42 <put_rc>
    e3fc:	8a c0       	rjmp	.+276    	; 0xe512 <fatfs_ls+0x16c>
    p1 = s1 = s2 = 0;
    e3fe:	c0 5b       	subi	r28, 0xB0	; 176
    e400:	dd 4f       	sbci	r29, 0xFD	; 253
    e402:	18 82       	st	Y, r1
    e404:	19 82       	std	Y+1, r1	; 0x01
    e406:	1a 82       	std	Y+2, r1	; 0x02
    e408:	1b 82       	std	Y+3, r1	; 0x03
    e40a:	c0 55       	subi	r28, 0x50	; 80
    e40c:	d2 40       	sbci	r29, 0x02	; 2
    e40e:	c1 2c       	mov	r12, r1
    e410:	d1 2c       	mov	r13, r1
    e412:	e1 2c       	mov	r14, r1
    e414:	f1 2c       	mov	r15, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e416:	be 01       	movw	r22, r28
    e418:	64 5f       	subi	r22, 0xF4	; 244
    e41a:	7f 4f       	sbci	r23, 0xFF	; 255
    e41c:	ce 01       	movw	r24, r28
    e41e:	8e 5d       	subi	r24, 0xDE	; 222
    e420:	9d 4f       	sbci	r25, 0xFD	; 253
    e422:	0e 94 4d 62 	call	0xc49a	; 0xc49a <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e426:	89 2b       	or	r24, r25
    e428:	49 f5       	brne	.+82     	; 0xe47c <fatfs_ls+0xd6>
    e42a:	8a a1       	ldd	r24, Y+34	; 0x22
    e42c:	88 23       	and	r24, r24
    e42e:	31 f1       	breq	.+76     	; 0xe47c <fatfs_ls+0xd6>
        if (fno.fattrib & AM_DIR)
    e430:	8c 89       	ldd	r24, Y+20	; 0x14
    e432:	84 ff       	sbrs	r24, 4
    e434:	04 c0       	rjmp	.+8      	; 0xe43e <fatfs_ls+0x98>
        {
            s2++;
    e436:	ff ef       	ldi	r31, 0xFF	; 255
    e438:	cf 1a       	sub	r12, r31
    e43a:	df 0a       	sbc	r13, r31
    e43c:	1b c0       	rjmp	.+54     	; 0xe474 <fatfs_ls+0xce>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e43e:	8f ef       	ldi	r24, 0xFF	; 255
    e440:	e8 1a       	sub	r14, r24
    e442:	f8 0a       	sbc	r15, r24
    e444:	4c 85       	ldd	r20, Y+12	; 0x0c
    e446:	5d 85       	ldd	r21, Y+13	; 0x0d
    e448:	6e 85       	ldd	r22, Y+14	; 0x0e
    e44a:	7f 85       	ldd	r23, Y+15	; 0x0f
    e44c:	c0 5b       	subi	r28, 0xB0	; 176
    e44e:	dd 4f       	sbci	r29, 0xFD	; 253
    e450:	88 81       	ld	r24, Y
    e452:	99 81       	ldd	r25, Y+1	; 0x01
    e454:	aa 81       	ldd	r26, Y+2	; 0x02
    e456:	bb 81       	ldd	r27, Y+3	; 0x03
    e458:	c0 55       	subi	r28, 0x50	; 80
    e45a:	d2 40       	sbci	r29, 0x02	; 2
    e45c:	84 0f       	add	r24, r20
    e45e:	95 1f       	adc	r25, r21
    e460:	a6 1f       	adc	r26, r22
    e462:	b7 1f       	adc	r27, r23
    e464:	c0 5b       	subi	r28, 0xB0	; 176
    e466:	dd 4f       	sbci	r29, 0xFD	; 253
    e468:	88 83       	st	Y, r24
    e46a:	99 83       	std	Y+1, r25	; 0x01
    e46c:	aa 83       	std	Y+2, r26	; 0x02
    e46e:	bb 83       	std	Y+3, r27	; 0x03
    e470:	c0 55       	subi	r28, 0x50	; 80
    e472:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e474:	ce 01       	movw	r24, r28
    e476:	0c 96       	adiw	r24, 0x0c	; 12
    e478:	f2 de       	rcall	.-540    	; 0xe25e <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e47a:	cd cf       	rjmp	.-102    	; 0xe416 <fatfs_ls+0x70>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e47c:	ed b7       	in	r30, 0x3d	; 61
    e47e:	fe b7       	in	r31, 0x3e	; 62
    e480:	d3 86       	std	Z+11, r13	; 0x0b
    e482:	c2 86       	std	Z+10, r12	; 0x0a
    e484:	c0 5b       	subi	r28, 0xB0	; 176
    e486:	dd 4f       	sbci	r29, 0xFD	; 253
    e488:	88 81       	ld	r24, Y
    e48a:	99 81       	ldd	r25, Y+1	; 0x01
    e48c:	aa 81       	ldd	r26, Y+2	; 0x02
    e48e:	bb 81       	ldd	r27, Y+3	; 0x03
    e490:	c0 55       	subi	r28, 0x50	; 80
    e492:	d2 40       	sbci	r29, 0x02	; 2
    e494:	86 83       	std	Z+6, r24	; 0x06
    e496:	97 83       	std	Z+7, r25	; 0x07
    e498:	a0 87       	std	Z+8, r26	; 0x08
    e49a:	b1 87       	std	Z+9, r27	; 0x09
    e49c:	f5 82       	std	Z+5, r15	; 0x05
    e49e:	e4 82       	std	Z+4, r14	; 0x04
    e4a0:	83 e5       	ldi	r24, 0x53	; 83
    e4a2:	9a e0       	ldi	r25, 0x0A	; 10
    e4a4:	a0 e0       	ldi	r26, 0x00	; 0
    e4a6:	81 83       	std	Z+1, r24	; 0x01
    e4a8:	92 83       	std	Z+2, r25	; 0x02
    e4aa:	a3 83       	std	Z+3, r26	; 0x03
    e4ac:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e4b0:	ae 01       	movw	r20, r28
    e4b2:	4c 5a       	subi	r20, 0xAC	; 172
    e4b4:	5d 4f       	sbci	r21, 0xFD	; 253
    e4b6:	be 01       	movw	r22, r28
    e4b8:	60 5b       	subi	r22, 0xB0	; 176
    e4ba:	7d 4f       	sbci	r23, 0xFD	; 253
    e4bc:	c8 01       	movw	r24, r16
    e4be:	0e 94 cf 62 	call	0xc59e	; 0xc59e <f_getfree>
    e4c2:	89 2b       	or	r24, r25
    e4c4:	31 f5       	brne	.+76     	; 0xe512 <fatfs_ls+0x16c>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e4c6:	cc 5a       	subi	r28, 0xAC	; 172
    e4c8:	dd 4f       	sbci	r29, 0xFD	; 253
    e4ca:	e8 81       	ld	r30, Y
    e4cc:	f9 81       	ldd	r31, Y+1	; 0x01
    e4ce:	c4 55       	subi	r28, 0x54	; 84
    e4d0:	d2 40       	sbci	r29, 0x02	; 2
    e4d2:	a1 85       	ldd	r26, Z+9	; 0x09
    e4d4:	b2 85       	ldd	r27, Z+10	; 0x0a
    e4d6:	c0 5b       	subi	r28, 0xB0	; 176
    e4d8:	dd 4f       	sbci	r29, 0xFD	; 253
    e4da:	28 81       	ld	r18, Y
    e4dc:	39 81       	ldd	r19, Y+1	; 0x01
    e4de:	4a 81       	ldd	r20, Y+2	; 0x02
    e4e0:	5b 81       	ldd	r21, Y+3	; 0x03
    e4e2:	c0 55       	subi	r28, 0x50	; 80
    e4e4:	d2 40       	sbci	r29, 0x02	; 2
    e4e6:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
    e4ea:	22 e0       	ldi	r18, 0x02	; 2
    e4ec:	30 e0       	ldi	r19, 0x00	; 0
    e4ee:	40 e0       	ldi	r20, 0x00	; 0
    e4f0:	50 e0       	ldi	r21, 0x00	; 0
    e4f2:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
    e4f6:	ed b7       	in	r30, 0x3d	; 61
    e4f8:	fe b7       	in	r31, 0x3e	; 62
    e4fa:	24 83       	std	Z+4, r18	; 0x04
    e4fc:	35 83       	std	Z+5, r19	; 0x05
    e4fe:	46 83       	std	Z+6, r20	; 0x06
    e500:	57 83       	std	Z+7, r21	; 0x07
    e502:	8e e3       	ldi	r24, 0x3E	; 62
    e504:	9a e0       	ldi	r25, 0x0A	; 10
    e506:	a0 e0       	ldi	r26, 0x00	; 0
    e508:	81 83       	std	Z+1, r24	; 0x01
    e50a:	92 83       	std	Z+2, r25	; 0x02
    e50c:	a3 83       	std	Z+3, r26	; 0x03
    e50e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
}
    e512:	cb 5a       	subi	r28, 0xAB	; 171
    e514:	dd 4f       	sbci	r29, 0xFD	; 253
    e516:	e8 e0       	ldi	r30, 0x08	; 8
    e518:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000e51c <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e51c:	00 d0       	rcall	.+0      	; 0xe51e <mmc_test+0x2>
    e51e:	1f 92       	push	r1
    printf("==============================\n");
    e520:	8c ed       	ldi	r24, 0xDC	; 220
    e522:	9a e0       	ldi	r25, 0x0A	; 10
    e524:	a0 e0       	ldi	r26, 0x00	; 0
    e526:	ed b7       	in	r30, 0x3d	; 61
    e528:	fe b7       	in	r31, 0x3e	; 62
    e52a:	81 83       	std	Z+1, r24	; 0x01
    e52c:	92 83       	std	Z+2, r25	; 0x02
    e52e:	a3 83       	std	Z+3, r26	; 0x03
    e530:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("START MMC TEST\n");
    e534:	8c ec       	ldi	r24, 0xCC	; 204
    e536:	9a e0       	ldi	r25, 0x0A	; 10
    e538:	a0 e0       	ldi	r26, 0x00	; 0
    e53a:	ed b7       	in	r30, 0x3d	; 61
    e53c:	fe b7       	in	r31, 0x3e	; 62
    e53e:	81 83       	std	Z+1, r24	; 0x01
    e540:	92 83       	std	Z+2, r25	; 0x02
    e542:	a3 83       	std	Z+3, r26	; 0x03
    e544:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fatfs_status("/");
    e548:	86 ea       	ldi	r24, 0xA6	; 166
    e54a:	98 e0       	ldi	r25, 0x08	; 8
    e54c:	0e dd       	rcall	.-1508   	; 0xdf6a <fatfs_status>
    printf("MMC Directory List\n");
    e54e:	88 eb       	ldi	r24, 0xB8	; 184
    e550:	9a e0       	ldi	r25, 0x0A	; 10
    e552:	a0 e0       	ldi	r26, 0x00	; 0
    e554:	ed b7       	in	r30, 0x3d	; 61
    e556:	fe b7       	in	r31, 0x3e	; 62
    e558:	81 83       	std	Z+1, r24	; 0x01
    e55a:	92 83       	std	Z+2, r25	; 0x02
    e55c:	a3 83       	std	Z+3, r26	; 0x03
    e55e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fatfs_ls("/");
    e562:	86 ea       	ldi	r24, 0xA6	; 166
    e564:	98 e0       	ldi	r25, 0x08	; 8
    e566:	1f df       	rcall	.-450    	; 0xe3a6 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e568:	8a ea       	ldi	r24, 0xAA	; 170
    e56a:	9a e0       	ldi	r25, 0x0A	; 10
    e56c:	a0 e0       	ldi	r26, 0x00	; 0
    e56e:	ed b7       	in	r30, 0x3d	; 61
    e570:	fe b7       	in	r31, 0x3e	; 62
    e572:	81 83       	std	Z+1, r24	; 0x01
    e574:	92 83       	std	Z+2, r25	; 0x02
    e576:	a3 83       	std	Z+3, r26	; 0x03
    e578:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("==============================\n");
    e57c:	8a e8       	ldi	r24, 0x8A	; 138
    e57e:	9a e0       	ldi	r25, 0x0A	; 10
    e580:	a0 e0       	ldi	r26, 0x00	; 0
    e582:	ed b7       	in	r30, 0x3d	; 61
    e584:	fe b7       	in	r31, 0x3e	; 62
    e586:	81 83       	std	Z+1, r24	; 0x01
    e588:	92 83       	std	Z+2, r25	; 0x02
    e58a:	a3 83       	std	Z+3, r26	; 0x03
    e58c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
}
    e590:	0f 90       	pop	r0
    e592:	0f 90       	pop	r0
    e594:	0f 90       	pop	r0
    e596:	08 95       	ret

0000e598 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e598:	ef 92       	push	r14
    e59a:	ff 92       	push	r15
    e59c:	0f 93       	push	r16
    e59e:	1f 93       	push	r17
    e5a0:	cf 93       	push	r28
    e5a2:	df 93       	push	r29
    e5a4:	ad b7       	in	r26, 0x3d	; 61
    e5a6:	be b7       	in	r27, 0x3e	; 62
    e5a8:	17 97       	sbiw	r26, 0x07	; 7
    e5aa:	0f b6       	in	r0, 0x3f	; 63
    e5ac:	f8 94       	cli
    e5ae:	be bf       	out	0x3e, r27	; 62
    e5b0:	0f be       	out	0x3f, r0	; 63
    e5b2:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e5b4:	fb 01       	movw	r30, r22
    e5b6:	20 81       	ld	r18, Z
    e5b8:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e5ba:	21 15       	cp	r18, r1
    e5bc:	31 05       	cpc	r19, r1
    e5be:	19 f4       	brne	.+6      	; 0xe5c6 <fatfs_tests+0x2e>
        return(0);
    e5c0:	80 e0       	ldi	r24, 0x00	; 0
    e5c2:	90 e0       	ldi	r25, 0x00	; 0
    e5c4:	73 c0       	rjmp	.+230    	; 0xe6ac <fatfs_tests+0x114>
    e5c6:	eb 01       	movw	r28, r22
    e5c8:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e5ca:	62 ed       	ldi	r22, 0xD2	; 210
    e5cc:	78 e0       	ldi	r23, 0x08	; 8
    e5ce:	c9 01       	movw	r24, r18
    e5d0:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
    e5d4:	89 2b       	or	r24, r25
    e5d6:	a1 f3       	breq	.-24     	; 0xe5c0 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e5d8:	ea 80       	ldd	r14, Y+2	; 0x02
    e5da:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e5dc:	e1 14       	cp	r14, r1
    e5de:	f1 04       	cpc	r15, r1
    e5e0:	21 f4       	brne	.+8      	; 0xe5ea <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e5e2:	81 e0       	ldi	r24, 0x01	; 1
    e5e4:	90 e0       	ldi	r25, 0x00	; 0
    e5e6:	be de       	rcall	.-644    	; 0xe364 <fatfs_help>
    e5e8:	5f c0       	rjmp	.+190    	; 0xe6a8 <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e5ea:	63 e7       	ldi	r22, 0x73	; 115
    e5ec:	76 e1       	ldi	r23, 0x16	; 22
    e5ee:	c7 01       	movw	r24, r14
    e5f0:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
    e5f4:	89 2b       	or	r24, r25
    e5f6:	a9 f7       	brne	.-22     	; 0xe5e2 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e5f8:	98 01       	movw	r18, r16
    e5fa:	42 e0       	ldi	r20, 0x02	; 2
    e5fc:	50 e0       	ldi	r21, 0x00	; 0
    e5fe:	68 ed       	ldi	r22, 0xD8	; 216
    e600:	78 e0       	ldi	r23, 0x08	; 8
    e602:	c7 01       	movw	r24, r14
    e604:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
    e608:	89 2b       	or	r24, r25
    e60a:	31 f1       	breq	.+76     	; 0xe658 <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e60c:	ed b7       	in	r30, 0x3d	; 61
    e60e:	fe b7       	in	r31, 0x3e	; 62
    e610:	17 83       	std	Z+7, r17	; 0x07
    e612:	06 83       	std	Z+6, r16	; 0x06
    e614:	82 e0       	ldi	r24, 0x02	; 2
    e616:	90 e0       	ldi	r25, 0x00	; 0
    e618:	95 83       	std	Z+5, r25	; 0x05
    e61a:	84 83       	std	Z+4, r24	; 0x04
    e61c:	8c ef       	ldi	r24, 0xFC	; 252
    e61e:	9a e0       	ldi	r25, 0x0A	; 10
    e620:	a0 e0       	ldi	r26, 0x00	; 0
    e622:	81 83       	std	Z+1, r24	; 0x01
    e624:	92 83       	std	Z+2, r25	; 0x02
    e626:	a3 83       	std	Z+3, r26	; 0x03
    e628:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    e62c:	7e 01       	movw	r14, r28
    e62e:	f4 e0       	ldi	r31, 0x04	; 4
    e630:	ef 0e       	add	r14, r31
    e632:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e634:	c2 e0       	ldi	r28, 0x02	; 2
    e636:	d0 e0       	ldi	r29, 0x00	; 0
    e638:	c0 17       	cp	r28, r16
    e63a:	d1 07       	cpc	r29, r17
    e63c:	3c f4       	brge	.+14     	; 0xe64c <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e63e:	f7 01       	movw	r30, r14
    e640:	81 91       	ld	r24, Z+
    e642:	91 91       	ld	r25, Z+
    e644:	7f 01       	movw	r14, r30
    e646:	af de       	rcall	.-674    	; 0xe3a6 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e648:	21 96       	adiw	r28, 0x01	; 1
    e64a:	f6 cf       	rjmp	.-20     	; 0xe638 <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e64c:	22 97       	sbiw	r28, 0x02	; 2
    e64e:	61 f5       	brne	.+88     	; 0xe6a8 <fatfs_tests+0x110>
        {
            fatfs_ls("");
    e650:	8d e2       	ldi	r24, 0x2D	; 45
    e652:	9c e0       	ldi	r25, 0x0C	; 12
    e654:	a8 de       	rcall	.-688    	; 0xe3a6 <fatfs_ls>
    e656:	28 c0       	rjmp	.+80     	; 0xe6a8 <fatfs_tests+0x110>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e658:	98 01       	movw	r18, r16
    e65a:	42 e0       	ldi	r20, 0x02	; 2
    e65c:	50 e0       	ldi	r21, 0x00	; 0
    e65e:	6b ed       	ldi	r22, 0xDB	; 219
    e660:	78 e0       	ldi	r23, 0x08	; 8
    e662:	c7 01       	movw	r24, r14
    e664:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
    e668:	89 2b       	or	r24, r25
    {
        mmc_test();
    e66a:	11 f0       	breq	.+4      	; 0xe670 <fatfs_tests+0xd8>
    e66c:	57 df       	rcall	.-338    	; 0xe51c <mmc_test>
    e66e:	1c c0       	rjmp	.+56     	; 0xe6a8 <fatfs_tests+0x110>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e670:	98 01       	movw	r18, r16
    e672:	42 e0       	ldi	r20, 0x02	; 2
    e674:	50 e0       	ldi	r21, 0x00	; 0
    e676:	64 ee       	ldi	r22, 0xE4	; 228
    e678:	78 e0       	ldi	r23, 0x08	; 8
    e67a:	c7 01       	movw	r24, r14
    e67c:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
    e680:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e682:	21 f0       	breq	.+8      	; 0xe68c <fatfs_tests+0xf4>
    e684:	81 e0       	ldi	r24, 0x01	; 1
    e686:	90 e0       	ldi	r25, 0x00	; 0
    e688:	99 da       	rcall	.-2766   	; 0xdbbc <mmc_init>
    e68a:	0e c0       	rjmp	.+28     	; 0xe6a8 <fatfs_tests+0x110>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e68c:	98 01       	movw	r18, r16
    e68e:	43 e0       	ldi	r20, 0x03	; 3
    e690:	50 e0       	ldi	r21, 0x00	; 0
    e692:	6d ee       	ldi	r22, 0xED	; 237
    e694:	78 e0       	ldi	r23, 0x08	; 8
    e696:	c7 01       	movw	r24, r14
    e698:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
    e69c:	89 2b       	or	r24, r25
    e69e:	09 f4       	brne	.+2      	; 0xe6a2 <fatfs_tests+0x10a>
    {
        fatfs_status(argv[ind]);
    e6a0:	8f cf       	rjmp	.-226    	; 0xe5c0 <fatfs_tests+0x28>
    e6a2:	8c 81       	ldd	r24, Y+4	; 0x04
    e6a4:	9d 81       	ldd	r25, Y+5	; 0x05
    e6a6:	61 dc       	rcall	.-1854   	; 0xdf6a <fatfs_status>
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e6a8:	81 e0       	ldi	r24, 0x01	; 1
    e6aa:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif

    return(0);
}
    e6ac:	cd b7       	in	r28, 0x3d	; 61
    e6ae:	de b7       	in	r29, 0x3e	; 62
    e6b0:	27 96       	adiw	r28, 0x07	; 7
    e6b2:	e6 e0       	ldi	r30, 0x06	; 6
    e6b4:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0000e6b8 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e6b8:	8f 92       	push	r8
    e6ba:	9f 92       	push	r9
    e6bc:	af 92       	push	r10
    e6be:	bf 92       	push	r11
    e6c0:	ef 92       	push	r14
    e6c2:	ff 92       	push	r15
    e6c4:	0f 93       	push	r16
    e6c6:	1f 93       	push	r17
    e6c8:	cf 93       	push	r28
    e6ca:	df 93       	push	r29
    e6cc:	00 d0       	rcall	.+0      	; 0xe6ce <fatfs_getc+0x16>
    e6ce:	1f 92       	push	r1
    e6d0:	cd b7       	in	r28, 0x3d	; 61
    e6d2:	de b7       	in	r29, 0x3e	; 62
    e6d4:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    e6d8:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    e6dc:	00 97       	sbiw	r24, 0x00	; 0
    e6de:	39 f4       	brne	.+14     	; 0xe6ee <fatfs_getc+0x36>
    e6e0:	89 e0       	ldi	r24, 0x09	; 9
    e6e2:	90 e0       	ldi	r25, 0x00	; 0
    e6e4:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    e6e8:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    e6ec:	2f c0       	rjmp	.+94     	; 0xe74c <fatfs_getc+0x94>
    e6ee:	fc 01       	movw	r30, r24
    e6f0:	e4 84       	ldd	r14, Z+12	; 0x0c
    e6f2:	f5 84       	ldd	r15, Z+13	; 0x0d
    e6f4:	e1 14       	cp	r14, r1
    e6f6:	f1 04       	cpc	r15, r1
    e6f8:	99 f3       	breq	.-26     	; 0xe6e0 <fatfs_getc+0x28>
    e6fa:	8c 01       	movw	r16, r24
    e6fc:	9e 01       	movw	r18, r28
    e6fe:	2f 5f       	subi	r18, 0xFF	; 255
    e700:	3f 4f       	sbci	r19, 0xFF	; 255
    e702:	41 e0       	ldi	r20, 0x01	; 1
    e704:	50 e0       	ldi	r21, 0x00	; 0
    e706:	be 01       	movw	r22, r28
    e708:	6d 5f       	subi	r22, 0xFD	; 253
    e70a:	7f 4f       	sbci	r23, 0xFF	; 255
    e70c:	c7 01       	movw	r24, r14
    e70e:	0e 94 ff 59 	call	0xb3fe	; 0xb3fe <f_read>
    e712:	00 97       	sbiw	r24, 0x00	; 0
    e714:	31 f4       	brne	.+12     	; 0xe722 <fatfs_getc+0x6a>
    e716:	29 81       	ldd	r18, Y+1	; 0x01
    e718:	3a 81       	ldd	r19, Y+2	; 0x02
    e71a:	21 30       	cpi	r18, 0x01	; 1
    e71c:	31 05       	cpc	r19, r1
    e71e:	c9 f0       	breq	.+50     	; 0xe752 <fatfs_getc+0x9a>
    e720:	03 c0       	rjmp	.+6      	; 0xe728 <fatfs_getc+0x70>
    e722:	84 31       	cpi	r24, 0x14	; 20
    e724:	91 05       	cpc	r25, r1
    e726:	40 f4       	brcc	.+16     	; 0xe738 <fatfs_getc+0x80>
    e728:	fc 01       	movw	r30, r24
    e72a:	ea 55       	subi	r30, 0x5A	; 90
    e72c:	f4 4f       	sbci	r31, 0xF4	; 244
    e72e:	80 81       	ld	r24, Z
    e730:	08 2e       	mov	r0, r24
    e732:	00 0c       	add	r0, r0
    e734:	99 0b       	sbc	r25, r25
    e736:	02 c0       	rjmp	.+4      	; 0xe73c <fatfs_getc+0x84>
    e738:	83 e2       	ldi	r24, 0x23	; 35
    e73a:	90 e0       	ldi	r25, 0x00	; 0
    e73c:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    e740:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    e744:	f8 01       	movw	r30, r16
    e746:	83 81       	ldd	r24, Z+3	; 0x03
    e748:	80 62       	ori	r24, 0x20	; 32
    e74a:	83 83       	std	Z+3, r24	; 0x03
    e74c:	8f ef       	ldi	r24, 0xFF	; 255
    e74e:	9f ef       	ldi	r25, 0xFF	; 255
    e750:	28 c0       	rjmp	.+80     	; 0xe7a2 <fatfs_getc+0xea>
    e752:	8b 81       	ldd	r24, Y+3	; 0x03
    e754:	8d 30       	cpi	r24, 0x0D	; 13
    e756:	01 f5       	brne	.+64     	; 0xe798 <fatfs_getc+0xe0>
    e758:	f7 01       	movw	r30, r14
    e75a:	80 88       	ldd	r8, Z+16	; 0x10
    e75c:	91 88       	ldd	r9, Z+17	; 0x11
    e75e:	a2 88       	ldd	r10, Z+18	; 0x12
    e760:	b3 88       	ldd	r11, Z+19	; 0x13
    e762:	9e 01       	movw	r18, r28
    e764:	2f 5f       	subi	r18, 0xFF	; 255
    e766:	3f 4f       	sbci	r19, 0xFF	; 255
    e768:	41 e0       	ldi	r20, 0x01	; 1
    e76a:	50 e0       	ldi	r21, 0x00	; 0
    e76c:	be 01       	movw	r22, r28
    e76e:	6d 5f       	subi	r22, 0xFD	; 253
    e770:	7f 4f       	sbci	r23, 0xFF	; 255
    e772:	c7 01       	movw	r24, r14
    e774:	0e 94 ff 59 	call	0xb3fe	; 0xb3fe <f_read>
    e778:	89 2b       	or	r24, r25
    e77a:	89 f4       	brne	.+34     	; 0xe79e <fatfs_getc+0xe6>
    e77c:	89 81       	ldd	r24, Y+1	; 0x01
    e77e:	9a 81       	ldd	r25, Y+2	; 0x02
    e780:	01 97       	sbiw	r24, 0x01	; 1
    e782:	69 f4       	brne	.+26     	; 0xe79e <fatfs_getc+0xe6>
    e784:	8b 81       	ldd	r24, Y+3	; 0x03
    e786:	8a 30       	cpi	r24, 0x0A	; 10
    e788:	31 f0       	breq	.+12     	; 0xe796 <fatfs_getc+0xde>
    e78a:	b5 01       	movw	r22, r10
    e78c:	a4 01       	movw	r20, r8
    e78e:	c7 01       	movw	r24, r14
    e790:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <f_lseek>
    e794:	04 c0       	rjmp	.+8      	; 0xe79e <fatfs_getc+0xe6>
    e796:	8b 83       	std	Y+3, r24	; 0x03
    e798:	8b 81       	ldd	r24, Y+3	; 0x03
    e79a:	90 e0       	ldi	r25, 0x00	; 0
    e79c:	02 c0       	rjmp	.+4      	; 0xe7a2 <fatfs_getc+0xea>
    e79e:	8a e0       	ldi	r24, 0x0A	; 10
    e7a0:	90 e0       	ldi	r25, 0x00	; 0
    e7a2:	0f 90       	pop	r0
    e7a4:	0f 90       	pop	r0
    e7a6:	0f 90       	pop	r0
    e7a8:	df 91       	pop	r29
    e7aa:	cf 91       	pop	r28
    e7ac:	1f 91       	pop	r17
    e7ae:	0f 91       	pop	r16
    e7b0:	ff 90       	pop	r15
    e7b2:	ef 90       	pop	r14
    e7b4:	bf 90       	pop	r11
    e7b6:	af 90       	pop	r10
    e7b8:	9f 90       	pop	r9
    e7ba:	8f 90       	pop	r8
    e7bc:	08 95       	ret

0000e7be <fatfs_putc>:
    e7be:	a3 e0       	ldi	r26, 0x03	; 3
    e7c0:	b0 e0       	ldi	r27, 0x00	; 0
    e7c2:	e5 ee       	ldi	r30, 0xE5	; 229
    e7c4:	f3 e7       	ldi	r31, 0x73	; 115
    e7c6:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    e7ca:	8b 83       	std	Y+3, r24	; 0x03
    e7cc:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    e7d0:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    e7d4:	61 15       	cp	r22, r1
    e7d6:	71 05       	cpc	r23, r1
    e7d8:	39 f4       	brne	.+14     	; 0xe7e8 <fatfs_putc+0x2a>
    e7da:	89 e0       	ldi	r24, 0x09	; 9
    e7dc:	90 e0       	ldi	r25, 0x00	; 0
    e7de:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    e7e2:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    e7e6:	2d c0       	rjmp	.+90     	; 0xe842 <fatfs_putc+0x84>
    e7e8:	fb 01       	movw	r30, r22
    e7ea:	84 85       	ldd	r24, Z+12	; 0x0c
    e7ec:	95 85       	ldd	r25, Z+13	; 0x0d
    e7ee:	00 97       	sbiw	r24, 0x00	; 0
    e7f0:	a1 f3       	breq	.-24     	; 0xe7da <fatfs_putc+0x1c>
    e7f2:	8b 01       	movw	r16, r22
    e7f4:	9e 01       	movw	r18, r28
    e7f6:	2f 5f       	subi	r18, 0xFF	; 255
    e7f8:	3f 4f       	sbci	r19, 0xFF	; 255
    e7fa:	41 e0       	ldi	r20, 0x01	; 1
    e7fc:	50 e0       	ldi	r21, 0x00	; 0
    e7fe:	be 01       	movw	r22, r28
    e800:	6d 5f       	subi	r22, 0xFD	; 253
    e802:	7f 4f       	sbci	r23, 0xFF	; 255
    e804:	0e 94 4a 5b 	call	0xb694	; 0xb694 <f_write>
    e808:	00 97       	sbiw	r24, 0x00	; 0
    e80a:	31 f4       	brne	.+12     	; 0xe818 <fatfs_putc+0x5a>
    e80c:	29 81       	ldd	r18, Y+1	; 0x01
    e80e:	3a 81       	ldd	r19, Y+2	; 0x02
    e810:	21 30       	cpi	r18, 0x01	; 1
    e812:	31 05       	cpc	r19, r1
    e814:	c9 f0       	breq	.+50     	; 0xe848 <fatfs_putc+0x8a>
    e816:	03 c0       	rjmp	.+6      	; 0xe81e <fatfs_putc+0x60>
    e818:	84 31       	cpi	r24, 0x14	; 20
    e81a:	91 05       	cpc	r25, r1
    e81c:	40 f4       	brcc	.+16     	; 0xe82e <fatfs_putc+0x70>
    e81e:	fc 01       	movw	r30, r24
    e820:	ea 55       	subi	r30, 0x5A	; 90
    e822:	f4 4f       	sbci	r31, 0xF4	; 244
    e824:	80 81       	ld	r24, Z
    e826:	08 2e       	mov	r0, r24
    e828:	00 0c       	add	r0, r0
    e82a:	99 0b       	sbc	r25, r25
    e82c:	02 c0       	rjmp	.+4      	; 0xe832 <fatfs_putc+0x74>
    e82e:	83 e2       	ldi	r24, 0x23	; 35
    e830:	90 e0       	ldi	r25, 0x00	; 0
    e832:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    e836:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    e83a:	f8 01       	movw	r30, r16
    e83c:	83 81       	ldd	r24, Z+3	; 0x03
    e83e:	80 62       	ori	r24, 0x20	; 32
    e840:	83 83       	std	Z+3, r24	; 0x03
    e842:	8f ef       	ldi	r24, 0xFF	; 255
    e844:	9f ef       	ldi	r25, 0xFF	; 255
    e846:	02 c0       	rjmp	.+4      	; 0xe84c <fatfs_putc+0x8e>
    e848:	8b 81       	ldd	r24, Y+3	; 0x03
    e84a:	90 e0       	ldi	r25, 0x00	; 0
    e84c:	23 96       	adiw	r28, 0x03	; 3
    e84e:	e4 e0       	ldi	r30, 0x04	; 4
    e850:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000e854 <fgetc>:
    e854:	cf 93       	push	r28
    e856:	df 93       	push	r29
    e858:	00 d0       	rcall	.+0      	; 0xe85a <fgetc+0x6>
    e85a:	1f 92       	push	r1
    e85c:	ec 01       	movw	r28, r24
    e85e:	00 97       	sbiw	r24, 0x00	; 0
    e860:	39 f4       	brne	.+14     	; 0xe870 <fgetc+0x1c>
    e862:	89 e0       	ldi	r24, 0x09	; 9
    e864:	90 e0       	ldi	r25, 0x00	; 0
    e866:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    e86a:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    e86e:	40 c0       	rjmp	.+128    	; 0xe8f0 <fgetc+0x9c>
    e870:	2b 81       	ldd	r18, Y+3	; 0x03
    e872:	20 ff       	sbrs	r18, 0
    e874:	3d c0       	rjmp	.+122    	; 0xe8f0 <fgetc+0x9c>
    e876:	26 ff       	sbrs	r18, 6
    e878:	0a c0       	rjmp	.+20     	; 0xe88e <fgetc+0x3a>
    e87a:	2f 7b       	andi	r18, 0xBF	; 191
    e87c:	2b 83       	std	Y+3, r18	; 0x03
    e87e:	8e 81       	ldd	r24, Y+6	; 0x06
    e880:	9f 81       	ldd	r25, Y+7	; 0x07
    e882:	01 96       	adiw	r24, 0x01	; 1
    e884:	9f 83       	std	Y+7, r25	; 0x07
    e886:	8e 83       	std	Y+6, r24	; 0x06
    e888:	8a 81       	ldd	r24, Y+2	; 0x02
    e88a:	90 e0       	ldi	r25, 0x00	; 0
    e88c:	33 c0       	rjmp	.+102    	; 0xe8f4 <fgetc+0xa0>
    e88e:	22 ff       	sbrs	r18, 2
    e890:	0d c0       	rjmp	.+26     	; 0xe8ac <fgetc+0x58>
    e892:	e8 81       	ld	r30, Y
    e894:	f9 81       	ldd	r31, Y+1	; 0x01
    e896:	80 81       	ld	r24, Z
    e898:	90 e0       	ldi	r25, 0x00	; 0
    e89a:	00 97       	sbiw	r24, 0x00	; 0
    e89c:	19 f4       	brne	.+6      	; 0xe8a4 <fgetc+0x50>
    e89e:	20 62       	ori	r18, 0x20	; 32
    e8a0:	2b 83       	std	Y+3, r18	; 0x03
    e8a2:	26 c0       	rjmp	.+76     	; 0xe8f0 <fgetc+0x9c>
    e8a4:	31 96       	adiw	r30, 0x01	; 1
    e8a6:	f9 83       	std	Y+1, r31	; 0x01
    e8a8:	e8 83       	st	Y, r30
    e8aa:	1b c0       	rjmp	.+54     	; 0xe8e2 <fgetc+0x8e>
    e8ac:	ea 85       	ldd	r30, Y+10	; 0x0a
    e8ae:	fb 85       	ldd	r31, Y+11	; 0x0b
    e8b0:	30 97       	sbiw	r30, 0x00	; 0
    e8b2:	59 f4       	brne	.+22     	; 0xe8ca <fgetc+0x76>
    e8b4:	84 ec       	ldi	r24, 0xC4	; 196
    e8b6:	9b e0       	ldi	r25, 0x0B	; 11
    e8b8:	a0 e0       	ldi	r26, 0x00	; 0
    e8ba:	ed b7       	in	r30, 0x3d	; 61
    e8bc:	fe b7       	in	r31, 0x3e	; 62
    e8be:	81 83       	std	Z+1, r24	; 0x01
    e8c0:	92 83       	std	Z+2, r25	; 0x02
    e8c2:	a3 83       	std	Z+3, r26	; 0x03
    e8c4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    e8c8:	13 c0       	rjmp	.+38     	; 0xe8f0 <fgetc+0x9c>
    e8ca:	09 95       	icall
    e8cc:	97 ff       	sbrs	r25, 7
    e8ce:	09 c0       	rjmp	.+18     	; 0xe8e2 <fgetc+0x8e>
    e8d0:	2b 81       	ldd	r18, Y+3	; 0x03
    e8d2:	02 96       	adiw	r24, 0x02	; 2
    e8d4:	11 f0       	breq	.+4      	; 0xe8da <fgetc+0x86>
    e8d6:	80 e2       	ldi	r24, 0x20	; 32
    e8d8:	01 c0       	rjmp	.+2      	; 0xe8dc <fgetc+0x88>
    e8da:	80 e1       	ldi	r24, 0x10	; 16
    e8dc:	82 2b       	or	r24, r18
    e8de:	8b 83       	std	Y+3, r24	; 0x03
    e8e0:	07 c0       	rjmp	.+14     	; 0xe8f0 <fgetc+0x9c>
    e8e2:	2e 81       	ldd	r18, Y+6	; 0x06
    e8e4:	3f 81       	ldd	r19, Y+7	; 0x07
    e8e6:	2f 5f       	subi	r18, 0xFF	; 255
    e8e8:	3f 4f       	sbci	r19, 0xFF	; 255
    e8ea:	3f 83       	std	Y+7, r19	; 0x07
    e8ec:	2e 83       	std	Y+6, r18	; 0x06
    e8ee:	02 c0       	rjmp	.+4      	; 0xe8f4 <fgetc+0xa0>
    e8f0:	8f ef       	ldi	r24, 0xFF	; 255
    e8f2:	9f ef       	ldi	r25, 0xFF	; 255
    e8f4:	cd b7       	in	r28, 0x3d	; 61
    e8f6:	de b7       	in	r29, 0x3e	; 62
    e8f8:	23 96       	adiw	r28, 0x03	; 3
    e8fa:	e2 e0       	ldi	r30, 0x02	; 2
    e8fc:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000e900 <fputc>:
    e900:	cf 93       	push	r28
    e902:	df 93       	push	r29
    e904:	00 d0       	rcall	.+0      	; 0xe906 <fputc+0x6>
    e906:	1f 92       	push	r1
    e908:	eb 01       	movw	r28, r22
    e90a:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    e90e:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    e912:	20 91 b1 1c 	lds	r18, 0x1CB1	; 0x801cb1 <__iob+0x2>
    e916:	30 91 b2 1c 	lds	r19, 0x1CB2	; 0x801cb2 <__iob+0x3>
    e91a:	62 17       	cp	r22, r18
    e91c:	73 07       	cpc	r23, r19
    e91e:	49 f0       	breq	.+18     	; 0xe932 <fputc+0x32>
    e920:	20 91 b3 1c 	lds	r18, 0x1CB3	; 0x801cb3 <__iob+0x4>
    e924:	30 91 b4 1c 	lds	r19, 0x1CB4	; 0x801cb4 <__iob+0x5>
    e928:	62 17       	cp	r22, r18
    e92a:	73 07       	cpc	r23, r19
    e92c:	11 f0       	breq	.+4      	; 0xe932 <fputc+0x32>
    e92e:	47 df       	rcall	.-370    	; 0xe7be <fatfs_putc>
    e930:	33 c0       	rjmp	.+102    	; 0xe998 <fputc+0x98>
    e932:	2b 81       	ldd	r18, Y+3	; 0x03
    e934:	21 ff       	sbrs	r18, 1
    e936:	2e c0       	rjmp	.+92     	; 0xe994 <fputc+0x94>
    e938:	22 ff       	sbrs	r18, 2
    e93a:	10 c0       	rjmp	.+32     	; 0xe95c <fputc+0x5c>
    e93c:	4e 81       	ldd	r20, Y+6	; 0x06
    e93e:	5f 81       	ldd	r21, Y+7	; 0x07
    e940:	2c 81       	ldd	r18, Y+4	; 0x04
    e942:	3d 81       	ldd	r19, Y+5	; 0x05
    e944:	42 17       	cp	r20, r18
    e946:	53 07       	cpc	r21, r19
    e948:	f4 f4       	brge	.+60     	; 0xe986 <fputc+0x86>
    e94a:	e8 81       	ld	r30, Y
    e94c:	f9 81       	ldd	r31, Y+1	; 0x01
    e94e:	9f 01       	movw	r18, r30
    e950:	2f 5f       	subi	r18, 0xFF	; 255
    e952:	3f 4f       	sbci	r19, 0xFF	; 255
    e954:	39 83       	std	Y+1, r19	; 0x01
    e956:	28 83       	st	Y, r18
    e958:	80 83       	st	Z, r24
    e95a:	15 c0       	rjmp	.+42     	; 0xe986 <fputc+0x86>
    e95c:	e8 85       	ldd	r30, Y+8	; 0x08
    e95e:	f9 85       	ldd	r31, Y+9	; 0x09
    e960:	30 97       	sbiw	r30, 0x00	; 0
    e962:	59 f4       	brne	.+22     	; 0xe97a <fputc+0x7a>
    e964:	8c ea       	ldi	r24, 0xAC	; 172
    e966:	9b e0       	ldi	r25, 0x0B	; 11
    e968:	a0 e0       	ldi	r26, 0x00	; 0
    e96a:	ed b7       	in	r30, 0x3d	; 61
    e96c:	fe b7       	in	r31, 0x3e	; 62
    e96e:	81 83       	std	Z+1, r24	; 0x01
    e970:	92 83       	std	Z+2, r25	; 0x02
    e972:	a3 83       	std	Z+3, r26	; 0x03
    e974:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    e978:	0d c0       	rjmp	.+26     	; 0xe994 <fputc+0x94>
    e97a:	be 01       	movw	r22, r28
    e97c:	09 95       	icall
    e97e:	8f 3f       	cpi	r24, 0xFF	; 255
    e980:	ff ef       	ldi	r31, 0xFF	; 255
    e982:	9f 07       	cpc	r25, r31
    e984:	39 f0       	breq	.+14     	; 0xe994 <fputc+0x94>
    e986:	2e 81       	ldd	r18, Y+6	; 0x06
    e988:	3f 81       	ldd	r19, Y+7	; 0x07
    e98a:	2f 5f       	subi	r18, 0xFF	; 255
    e98c:	3f 4f       	sbci	r19, 0xFF	; 255
    e98e:	3f 83       	std	Y+7, r19	; 0x07
    e990:	2e 83       	std	Y+6, r18	; 0x06
    e992:	02 c0       	rjmp	.+4      	; 0xe998 <fputc+0x98>
    e994:	8f ef       	ldi	r24, 0xFF	; 255
    e996:	9f ef       	ldi	r25, 0xFF	; 255
    e998:	cd b7       	in	r28, 0x3d	; 61
    e99a:	de b7       	in	r29, 0x3e	; 62
    e99c:	23 96       	adiw	r28, 0x03	; 3
    e99e:	e2 e0       	ldi	r30, 0x02	; 2
    e9a0:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000e9a4 <_fprintf_putc>:
    e9a4:	fc 01       	movw	r30, r24
    e9a6:	86 2f       	mov	r24, r22
    e9a8:	26 81       	ldd	r18, Z+6	; 0x06
    e9aa:	37 81       	ldd	r19, Z+7	; 0x07
    e9ac:	2f 5f       	subi	r18, 0xFF	; 255
    e9ae:	3f 4f       	sbci	r19, 0xFF	; 255
    e9b0:	37 83       	std	Z+7, r19	; 0x07
    e9b2:	26 83       	std	Z+6, r18	; 0x06
    e9b4:	62 81       	ldd	r22, Z+2	; 0x02
    e9b6:	73 81       	ldd	r23, Z+3	; 0x03
    e9b8:	90 e0       	ldi	r25, 0x00	; 0
    e9ba:	a2 cf       	rjmp	.-188    	; 0xe900 <fputc>
    e9bc:	08 95       	ret

0000e9be <getchar>:
    e9be:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <__iob>
    e9c2:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <__iob+0x1>
    e9c6:	46 cf       	rjmp	.-372    	; 0xe854 <fgetc>
    e9c8:	08 95       	ret

0000e9ca <putchar>:
    e9ca:	60 91 b1 1c 	lds	r22, 0x1CB1	; 0x801cb1 <__iob+0x2>
    e9ce:	70 91 b2 1c 	lds	r23, 0x1CB2	; 0x801cb2 <__iob+0x3>
    e9d2:	96 cf       	rjmp	.-212    	; 0xe900 <fputc>
    e9d4:	08 95       	ret

0000e9d6 <fgets>:
    e9d6:	a0 e0       	ldi	r26, 0x00	; 0
    e9d8:	b0 e0       	ldi	r27, 0x00	; 0
    e9da:	e1 ef       	ldi	r30, 0xF1	; 241
    e9dc:	f4 e7       	ldi	r31, 0x74	; 116
    e9de:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    e9e2:	7c 01       	movw	r14, r24
    e9e4:	6a 01       	movw	r12, r20
    e9e6:	8b 01       	movw	r16, r22
    e9e8:	c0 e0       	ldi	r28, 0x00	; 0
    e9ea:	d0 e0       	ldi	r29, 0x00	; 0
    e9ec:	01 15       	cp	r16, r1
    e9ee:	11 05       	cpc	r17, r1
    e9f0:	41 f0       	breq	.+16     	; 0xea02 <fgets+0x2c>
    e9f2:	c6 01       	movw	r24, r12
    e9f4:	2f df       	rcall	.-418    	; 0xe854 <fgetc>
    e9f6:	8f 3f       	cpi	r24, 0xFF	; 255
    e9f8:	2f ef       	ldi	r18, 0xFF	; 255
    e9fa:	92 07       	cpc	r25, r18
    e9fc:	39 f4       	brne	.+14     	; 0xea0c <fgets+0x36>
    e9fe:	20 97       	sbiw	r28, 0x00	; 0
    ea00:	b9 f0       	breq	.+46     	; 0xea30 <fgets+0x5a>
    ea02:	ce 0d       	add	r28, r14
    ea04:	df 1d       	adc	r29, r15
    ea06:	18 82       	st	Y, r1
    ea08:	c7 01       	movw	r24, r14
    ea0a:	14 c0       	rjmp	.+40     	; 0xea34 <fgets+0x5e>
    ea0c:	8a 30       	cpi	r24, 0x0A	; 10
    ea0e:	91 05       	cpc	r25, r1
    ea10:	c1 f3       	breq	.-16     	; 0xea02 <fgets+0x2c>
    ea12:	88 30       	cpi	r24, 0x08	; 8
    ea14:	91 05       	cpc	r25, r1
    ea16:	21 f4       	brne	.+8      	; 0xea20 <fgets+0x4a>
    ea18:	20 97       	sbiw	r28, 0x00	; 0
    ea1a:	39 f0       	breq	.+14     	; 0xea2a <fgets+0x54>
    ea1c:	21 97       	sbiw	r28, 0x01	; 1
    ea1e:	05 c0       	rjmp	.+10     	; 0xea2a <fgets+0x54>
    ea20:	f7 01       	movw	r30, r14
    ea22:	ec 0f       	add	r30, r28
    ea24:	fd 1f       	adc	r31, r29
    ea26:	80 83       	st	Z, r24
    ea28:	21 96       	adiw	r28, 0x01	; 1
    ea2a:	01 50       	subi	r16, 0x01	; 1
    ea2c:	11 09       	sbc	r17, r1
    ea2e:	de cf       	rjmp	.-68     	; 0xe9ec <fgets+0x16>
    ea30:	80 e0       	ldi	r24, 0x00	; 0
    ea32:	90 e0       	ldi	r25, 0x00	; 0
    ea34:	cd b7       	in	r28, 0x3d	; 61
    ea36:	de b7       	in	r29, 0x3e	; 62
    ea38:	e8 e0       	ldi	r30, 0x08	; 8
    ea3a:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000ea3e <fputs>:
    ea3e:	0f 93       	push	r16
    ea40:	1f 93       	push	r17
    ea42:	cf 93       	push	r28
    ea44:	df 93       	push	r29
    ea46:	8b 01       	movw	r16, r22
    ea48:	ec 01       	movw	r28, r24
    ea4a:	89 91       	ld	r24, Y+
    ea4c:	88 23       	and	r24, r24
    ea4e:	41 f0       	breq	.+16     	; 0xea60 <fputs+0x22>
    ea50:	b8 01       	movw	r22, r16
    ea52:	90 e0       	ldi	r25, 0x00	; 0
    ea54:	55 df       	rcall	.-342    	; 0xe900 <fputc>
    ea56:	8f 3f       	cpi	r24, 0xFF	; 255
    ea58:	2f ef       	ldi	r18, 0xFF	; 255
    ea5a:	92 07       	cpc	r25, r18
    ea5c:	b1 f7       	brne	.-20     	; 0xea4a <fputs+0xc>
    ea5e:	02 c0       	rjmp	.+4      	; 0xea64 <fputs+0x26>
    ea60:	80 e0       	ldi	r24, 0x00	; 0
    ea62:	90 e0       	ldi	r25, 0x00	; 0
    ea64:	df 91       	pop	r29
    ea66:	cf 91       	pop	r28
    ea68:	1f 91       	pop	r17
    ea6a:	0f 91       	pop	r16
    ea6c:	08 95       	ret

0000ea6e <puts>:
    ea6e:	cf 93       	push	r28
    ea70:	df 93       	push	r29
    ea72:	ec 01       	movw	r28, r24
    ea74:	89 91       	ld	r24, Y+
    ea76:	60 91 b1 1c 	lds	r22, 0x1CB1	; 0x801cb1 <__iob+0x2>
    ea7a:	70 91 b2 1c 	lds	r23, 0x1CB2	; 0x801cb2 <__iob+0x3>
    ea7e:	88 23       	and	r24, r24
    ea80:	39 f0       	breq	.+14     	; 0xea90 <puts+0x22>
    ea82:	90 e0       	ldi	r25, 0x00	; 0
    ea84:	3d df       	rcall	.-390    	; 0xe900 <fputc>
    ea86:	8f 3f       	cpi	r24, 0xFF	; 255
    ea88:	2f ef       	ldi	r18, 0xFF	; 255
    ea8a:	92 07       	cpc	r25, r18
    ea8c:	99 f7       	brne	.-26     	; 0xea74 <puts+0x6>
    ea8e:	03 c0       	rjmp	.+6      	; 0xea96 <puts+0x28>
    ea90:	8a e0       	ldi	r24, 0x0A	; 10
    ea92:	90 e0       	ldi	r25, 0x00	; 0
    ea94:	35 df       	rcall	.-406    	; 0xe900 <fputc>
    ea96:	df 91       	pop	r29
    ea98:	cf 91       	pop	r28
    ea9a:	08 95       	ret

0000ea9c <fileno>:
    ea9c:	00 97       	sbiw	r24, 0x00	; 0
    ea9e:	39 f4       	brne	.+14     	; 0xeaae <fileno+0x12>
    eaa0:	89 e0       	ldi	r24, 0x09	; 9
    eaa2:	90 e0       	ldi	r25, 0x00	; 0
    eaa4:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    eaa8:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    eaac:	0e c0       	rjmp	.+28     	; 0xeaca <fileno+0x2e>
    eaae:	ef ea       	ldi	r30, 0xAF	; 175
    eab0:	fc e1       	ldi	r31, 0x1C	; 28
    eab2:	20 e0       	ldi	r18, 0x00	; 0
    eab4:	30 e0       	ldi	r19, 0x00	; 0
    eab6:	41 91       	ld	r20, Z+
    eab8:	51 91       	ld	r21, Z+
    eaba:	84 17       	cp	r24, r20
    eabc:	95 07       	cpc	r25, r21
    eabe:	41 f0       	breq	.+16     	; 0xead0 <fileno+0x34>
    eac0:	2f 5f       	subi	r18, 0xFF	; 255
    eac2:	3f 4f       	sbci	r19, 0xFF	; 255
    eac4:	20 31       	cpi	r18, 0x10	; 16
    eac6:	31 05       	cpc	r19, r1
    eac8:	b1 f7       	brne	.-20     	; 0xeab6 <fileno+0x1a>
    eaca:	8f ef       	ldi	r24, 0xFF	; 255
    eacc:	9f ef       	ldi	r25, 0xFF	; 255
    eace:	08 95       	ret
    ead0:	c9 01       	movw	r24, r18
    ead2:	08 95       	ret

0000ead4 <fileno_to_stream>:
    ead4:	80 31       	cpi	r24, 0x10	; 16
    ead6:	91 05       	cpc	r25, r1
    ead8:	48 f4       	brcc	.+18     	; 0xeaec <fileno_to_stream+0x18>
    eada:	88 0f       	add	r24, r24
    eadc:	99 1f       	adc	r25, r25
    eade:	fc 01       	movw	r30, r24
    eae0:	e1 55       	subi	r30, 0x51	; 81
    eae2:	f3 4e       	sbci	r31, 0xE3	; 227
    eae4:	80 81       	ld	r24, Z
    eae6:	91 81       	ldd	r25, Z+1	; 0x01
    eae8:	00 97       	sbiw	r24, 0x00	; 0
    eaea:	41 f4       	brne	.+16     	; 0xeafc <fileno_to_stream+0x28>
    eaec:	89 e0       	ldi	r24, 0x09	; 9
    eaee:	90 e0       	ldi	r25, 0x00	; 0
    eaf0:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    eaf4:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    eaf8:	80 e0       	ldi	r24, 0x00	; 0
    eafa:	90 e0       	ldi	r25, 0x00	; 0
    eafc:	08 95       	ret

0000eafe <mctime>:
    eafe:	a4 e0       	ldi	r26, 0x04	; 4
    eb00:	b0 e0       	ldi	r27, 0x00	; 0
    eb02:	e5 e8       	ldi	r30, 0x85	; 133
    eb04:	f5 e7       	ldi	r31, 0x75	; 117
    eb06:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    eb0a:	69 83       	std	Y+1, r22	; 0x01
    eb0c:	7a 83       	std	Y+2, r23	; 0x02
    eb0e:	8b 83       	std	Y+3, r24	; 0x03
    eb10:	9c 83       	std	Y+4, r25	; 0x04
    eb12:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    eb16:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    eb1a:	ce 01       	movw	r24, r28
    eb1c:	01 96       	adiw	r24, 0x01	; 1
    eb1e:	0e 94 ab 3a 	call	0x7556	; 0x7556 <ctime_gm>
    eb22:	fc 01       	movw	r30, r24
    eb24:	01 90       	ld	r0, Z+
    eb26:	00 20       	and	r0, r0
    eb28:	e9 f7       	brne	.-6      	; 0xeb24 <mctime+0x26>
    eb2a:	31 97       	sbiw	r30, 0x01	; 1
    eb2c:	e8 1b       	sub	r30, r24
    eb2e:	f9 0b       	sbc	r31, r25
    eb30:	39 f0       	breq	.+14     	; 0xeb40 <mctime+0x42>
    eb32:	31 97       	sbiw	r30, 0x01	; 1
    eb34:	e8 0f       	add	r30, r24
    eb36:	f9 1f       	adc	r31, r25
    eb38:	20 81       	ld	r18, Z
    eb3a:	2a 30       	cpi	r18, 0x0A	; 10
    eb3c:	09 f4       	brne	.+2      	; 0xeb40 <mctime+0x42>
    eb3e:	10 82       	st	Z, r1
    eb40:	24 96       	adiw	r28, 0x04	; 4
    eb42:	e2 e0       	ldi	r30, 0x02	; 2
    eb44:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000eb48 <basename>:
    eb48:	00 97       	sbiw	r24, 0x00	; 0
    eb4a:	49 f0       	breq	.+18     	; 0xeb5e <basename+0x16>
    eb4c:	fc 01       	movw	r30, r24
    eb4e:	21 91       	ld	r18, Z+
    eb50:	22 23       	and	r18, r18
    eb52:	21 f0       	breq	.+8      	; 0xeb5c <basename+0x14>
    eb54:	2f 32       	cpi	r18, 0x2F	; 47
    eb56:	d9 f7       	brne	.-10     	; 0xeb4e <basename+0x6>
    eb58:	cf 01       	movw	r24, r30
    eb5a:	f9 cf       	rjmp	.-14     	; 0xeb4e <basename+0x6>
    eb5c:	08 95       	ret
    eb5e:	8d e2       	ldi	r24, 0x2D	; 45
    eb60:	9c e0       	ldi	r25, 0x0C	; 12
    eb62:	08 95       	ret

0000eb64 <chdir>:
    eb64:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    eb68:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    eb6c:	0e 94 7a 5d 	call	0xbaf4	; 0xbaf4 <f_chdir>
    eb70:	00 97       	sbiw	r24, 0x00	; 0
    eb72:	a1 f0       	breq	.+40     	; 0xeb9c <chdir+0x38>
    eb74:	84 31       	cpi	r24, 0x14	; 20
    eb76:	91 05       	cpc	r25, r1
    eb78:	40 f4       	brcc	.+16     	; 0xeb8a <chdir+0x26>
    eb7a:	fc 01       	movw	r30, r24
    eb7c:	ea 55       	subi	r30, 0x5A	; 90
    eb7e:	f4 4f       	sbci	r31, 0xF4	; 244
    eb80:	80 81       	ld	r24, Z
    eb82:	08 2e       	mov	r0, r24
    eb84:	00 0c       	add	r0, r0
    eb86:	99 0b       	sbc	r25, r25
    eb88:	02 c0       	rjmp	.+4      	; 0xeb8e <chdir+0x2a>
    eb8a:	83 e2       	ldi	r24, 0x23	; 35
    eb8c:	90 e0       	ldi	r25, 0x00	; 0
    eb8e:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    eb92:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    eb96:	8f ef       	ldi	r24, 0xFF	; 255
    eb98:	9f ef       	ldi	r25, 0xFF	; 255
    eb9a:	08 95       	ret
    eb9c:	80 e0       	ldi	r24, 0x00	; 0
    eb9e:	90 e0       	ldi	r25, 0x00	; 0
    eba0:	08 95       	ret

0000eba2 <chmod>:
    eba2:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    eba6:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    ebaa:	42 79       	andi	r20, 0x92	; 146
    ebac:	55 27       	eor	r21, r21
    ebae:	66 27       	eor	r22, r22
    ebb0:	77 27       	eor	r23, r23
    ebb2:	45 2b       	or	r20, r21
    ebb4:	46 2b       	or	r20, r22
    ebb6:	47 2b       	or	r20, r23
    ebb8:	19 f0       	breq	.+6      	; 0xebc0 <chmod+0x1e>
    ebba:	80 e0       	ldi	r24, 0x00	; 0
    ebbc:	90 e0       	ldi	r25, 0x00	; 0
    ebbe:	08 95       	ret
    ebc0:	41 e0       	ldi	r20, 0x01	; 1
    ebc2:	61 e0       	ldi	r22, 0x01	; 1
    ebc4:	0e 94 5b 66 	call	0xccb6	; 0xccb6 <f_chmod>
    ebc8:	00 97       	sbiw	r24, 0x00	; 0
    ebca:	b9 f3       	breq	.-18     	; 0xebba <chmod+0x18>
    ebcc:	84 31       	cpi	r24, 0x14	; 20
    ebce:	91 05       	cpc	r25, r1
    ebd0:	40 f4       	brcc	.+16     	; 0xebe2 <chmod+0x40>
    ebd2:	fc 01       	movw	r30, r24
    ebd4:	ea 55       	subi	r30, 0x5A	; 90
    ebd6:	f4 4f       	sbci	r31, 0xF4	; 244
    ebd8:	80 81       	ld	r24, Z
    ebda:	08 2e       	mov	r0, r24
    ebdc:	00 0c       	add	r0, r0
    ebde:	99 0b       	sbc	r25, r25
    ebe0:	02 c0       	rjmp	.+4      	; 0xebe6 <chmod+0x44>
    ebe2:	83 e2       	ldi	r24, 0x23	; 35
    ebe4:	90 e0       	ldi	r25, 0x00	; 0
    ebe6:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ebea:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    ebee:	8f ef       	ldi	r24, 0xFF	; 255
    ebf0:	9f ef       	ldi	r25, 0xFF	; 255
    ebf2:	08 95       	ret

0000ebf4 <getcwd>:
    ebf4:	cf 93       	push	r28
    ebf6:	df 93       	push	r29
    ebf8:	d8 2f       	mov	r29, r24
    ebfa:	c9 2f       	mov	r28, r25
    ebfc:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    ec00:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    ec04:	0e 94 d5 5d 	call	0xbbaa	; 0xbbaa <f_getcwd>
    ec08:	00 97       	sbiw	r24, 0x00	; 0
    ec0a:	a1 f0       	breq	.+40     	; 0xec34 <getcwd+0x40>
    ec0c:	84 31       	cpi	r24, 0x14	; 20
    ec0e:	91 05       	cpc	r25, r1
    ec10:	40 f4       	brcc	.+16     	; 0xec22 <getcwd+0x2e>
    ec12:	fc 01       	movw	r30, r24
    ec14:	ea 55       	subi	r30, 0x5A	; 90
    ec16:	f4 4f       	sbci	r31, 0xF4	; 244
    ec18:	80 81       	ld	r24, Z
    ec1a:	08 2e       	mov	r0, r24
    ec1c:	00 0c       	add	r0, r0
    ec1e:	99 0b       	sbc	r25, r25
    ec20:	02 c0       	rjmp	.+4      	; 0xec26 <getcwd+0x32>
    ec22:	83 e2       	ldi	r24, 0x23	; 35
    ec24:	90 e0       	ldi	r25, 0x00	; 0
    ec26:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ec2a:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    ec2e:	80 e0       	ldi	r24, 0x00	; 0
    ec30:	90 e0       	ldi	r25, 0x00	; 0
    ec32:	02 c0       	rjmp	.+4      	; 0xec38 <getcwd+0x44>
    ec34:	8d 2f       	mov	r24, r29
    ec36:	9c 2f       	mov	r25, r28
    ec38:	df 91       	pop	r29
    ec3a:	cf 91       	pop	r28
    ec3c:	08 95       	ret

0000ec3e <mkdir>:
    ec3e:	cf 93       	push	r28
    ec40:	df 93       	push	r29
    ec42:	ec 01       	movw	r28, r24
    ec44:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    ec48:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    ec4c:	41 15       	cp	r20, r1
    ec4e:	51 05       	cpc	r21, r1
    ec50:	61 05       	cpc	r22, r1
    ec52:	71 05       	cpc	r23, r1
    ec54:	41 f4       	brne	.+16     	; 0xec66 <mkdir+0x28>
    ec56:	ce 01       	movw	r24, r28
    ec58:	0e 94 56 64 	call	0xc8ac	; 0xc8ac <f_mkdir>
    ec5c:	00 97       	sbiw	r24, 0x00	; 0
    ec5e:	39 f4       	brne	.+14     	; 0xec6e <mkdir+0x30>
    ec60:	80 e0       	ldi	r24, 0x00	; 0
    ec62:	90 e0       	ldi	r25, 0x00	; 0
    ec64:	17 c0       	rjmp	.+46     	; 0xec94 <mkdir+0x56>
    ec66:	9d df       	rcall	.-198    	; 0xeba2 <chmod>
    ec68:	89 2b       	or	r24, r25
    ec6a:	a9 f3       	breq	.-22     	; 0xec56 <mkdir+0x18>
    ec6c:	11 c0       	rjmp	.+34     	; 0xec90 <mkdir+0x52>
    ec6e:	84 31       	cpi	r24, 0x14	; 20
    ec70:	91 05       	cpc	r25, r1
    ec72:	40 f4       	brcc	.+16     	; 0xec84 <mkdir+0x46>
    ec74:	fc 01       	movw	r30, r24
    ec76:	ea 55       	subi	r30, 0x5A	; 90
    ec78:	f4 4f       	sbci	r31, 0xF4	; 244
    ec7a:	80 81       	ld	r24, Z
    ec7c:	08 2e       	mov	r0, r24
    ec7e:	00 0c       	add	r0, r0
    ec80:	99 0b       	sbc	r25, r25
    ec82:	02 c0       	rjmp	.+4      	; 0xec88 <mkdir+0x4a>
    ec84:	83 e2       	ldi	r24, 0x23	; 35
    ec86:	90 e0       	ldi	r25, 0x00	; 0
    ec88:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ec8c:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    ec90:	8f ef       	ldi	r24, 0xFF	; 255
    ec92:	9f ef       	ldi	r25, 0xFF	; 255
    ec94:	df 91       	pop	r29
    ec96:	cf 91       	pop	r28
    ec98:	08 95       	ret

0000ec9a <rename>:
    ec9a:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    ec9e:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    eca2:	0e 94 46 65 	call	0xca8c	; 0xca8c <f_rename>
    eca6:	00 97       	sbiw	r24, 0x00	; 0
    eca8:	a1 f0       	breq	.+40     	; 0xecd2 <rename+0x38>
    ecaa:	84 31       	cpi	r24, 0x14	; 20
    ecac:	91 05       	cpc	r25, r1
    ecae:	40 f4       	brcc	.+16     	; 0xecc0 <rename+0x26>
    ecb0:	fc 01       	movw	r30, r24
    ecb2:	ea 55       	subi	r30, 0x5A	; 90
    ecb4:	f4 4f       	sbci	r31, 0xF4	; 244
    ecb6:	80 81       	ld	r24, Z
    ecb8:	08 2e       	mov	r0, r24
    ecba:	00 0c       	add	r0, r0
    ecbc:	99 0b       	sbc	r25, r25
    ecbe:	02 c0       	rjmp	.+4      	; 0xecc4 <rename+0x2a>
    ecc0:	83 e2       	ldi	r24, 0x23	; 35
    ecc2:	90 e0       	ldi	r25, 0x00	; 0
    ecc4:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ecc8:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    eccc:	8f ef       	ldi	r24, 0xFF	; 255
    ecce:	9f ef       	ldi	r25, 0xFF	; 255
    ecd0:	08 95       	ret
    ecd2:	80 e0       	ldi	r24, 0x00	; 0
    ecd4:	90 e0       	ldi	r25, 0x00	; 0
    ecd6:	08 95       	ret

0000ecd8 <unlink>:
    ecd8:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    ecdc:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    ece0:	0e 94 af 63 	call	0xc75e	; 0xc75e <f_unlink>
    ece4:	00 97       	sbiw	r24, 0x00	; 0
    ece6:	a1 f0       	breq	.+40     	; 0xed10 <unlink+0x38>
    ece8:	84 31       	cpi	r24, 0x14	; 20
    ecea:	91 05       	cpc	r25, r1
    ecec:	40 f4       	brcc	.+16     	; 0xecfe <unlink+0x26>
    ecee:	fc 01       	movw	r30, r24
    ecf0:	ea 55       	subi	r30, 0x5A	; 90
    ecf2:	f4 4f       	sbci	r31, 0xF4	; 244
    ecf4:	80 81       	ld	r24, Z
    ecf6:	08 2e       	mov	r0, r24
    ecf8:	00 0c       	add	r0, r0
    ecfa:	99 0b       	sbc	r25, r25
    ecfc:	02 c0       	rjmp	.+4      	; 0xed02 <unlink+0x2a>
    ecfe:	83 e2       	ldi	r24, 0x23	; 35
    ed00:	90 e0       	ldi	r25, 0x00	; 0
    ed02:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ed06:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    ed0a:	8f ef       	ldi	r24, 0xFF	; 255
    ed0c:	9f ef       	ldi	r25, 0xFF	; 255
    ed0e:	08 95       	ret
    ed10:	80 e0       	ldi	r24, 0x00	; 0
    ed12:	90 e0       	ldi	r25, 0x00	; 0
    ed14:	08 95       	ret

0000ed16 <rmdir>:
    ed16:	e0 cf       	rjmp	.-64     	; 0xecd8 <unlink>
    ed18:	08 95       	ret

0000ed1a <closedir>:
    ed1a:	0e 94 38 62 	call	0xc470	; 0xc470 <f_closedir>
    ed1e:	00 97       	sbiw	r24, 0x00	; 0
    ed20:	a1 f0       	breq	.+40     	; 0xed4a <closedir+0x30>
    ed22:	84 31       	cpi	r24, 0x14	; 20
    ed24:	91 05       	cpc	r25, r1
    ed26:	40 f4       	brcc	.+16     	; 0xed38 <closedir+0x1e>
    ed28:	fc 01       	movw	r30, r24
    ed2a:	ea 55       	subi	r30, 0x5A	; 90
    ed2c:	f4 4f       	sbci	r31, 0xF4	; 244
    ed2e:	80 81       	ld	r24, Z
    ed30:	08 2e       	mov	r0, r24
    ed32:	00 0c       	add	r0, r0
    ed34:	99 0b       	sbc	r25, r25
    ed36:	02 c0       	rjmp	.+4      	; 0xed3c <closedir+0x22>
    ed38:	83 e2       	ldi	r24, 0x23	; 35
    ed3a:	90 e0       	ldi	r25, 0x00	; 0
    ed3c:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ed40:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    ed44:	8f ef       	ldi	r24, 0xFF	; 255
    ed46:	9f ef       	ldi	r25, 0xFF	; 255
    ed48:	08 95       	ret
    ed4a:	80 e0       	ldi	r24, 0x00	; 0
    ed4c:	90 e0       	ldi	r25, 0x00	; 0
    ed4e:	08 95       	ret

0000ed50 <opendir>:
    ed50:	bc 01       	movw	r22, r24
    ed52:	81 e2       	ldi	r24, 0x21	; 33
    ed54:	99 e1       	ldi	r25, 0x19	; 25
    ed56:	0e 94 c7 61 	call	0xc38e	; 0xc38e <f_opendir>
    ed5a:	00 97       	sbiw	r24, 0x00	; 0
    ed5c:	a1 f0       	breq	.+40     	; 0xed86 <opendir+0x36>
    ed5e:	84 31       	cpi	r24, 0x14	; 20
    ed60:	91 05       	cpc	r25, r1
    ed62:	40 f4       	brcc	.+16     	; 0xed74 <opendir+0x24>
    ed64:	fc 01       	movw	r30, r24
    ed66:	ea 55       	subi	r30, 0x5A	; 90
    ed68:	f4 4f       	sbci	r31, 0xF4	; 244
    ed6a:	80 81       	ld	r24, Z
    ed6c:	08 2e       	mov	r0, r24
    ed6e:	00 0c       	add	r0, r0
    ed70:	99 0b       	sbc	r25, r25
    ed72:	02 c0       	rjmp	.+4      	; 0xed78 <opendir+0x28>
    ed74:	83 e2       	ldi	r24, 0x23	; 35
    ed76:	90 e0       	ldi	r25, 0x00	; 0
    ed78:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    ed7c:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    ed80:	80 e0       	ldi	r24, 0x00	; 0
    ed82:	90 e0       	ldi	r25, 0x00	; 0
    ed84:	08 95       	ret
    ed86:	81 e2       	ldi	r24, 0x21	; 33
    ed88:	99 e1       	ldi	r25, 0x19	; 25
    ed8a:	08 95       	ret

0000ed8c <readdir>:
    ed8c:	a6 e1       	ldi	r26, 0x16	; 22
    ed8e:	b1 e0       	ldi	r27, 0x01	; 1
    ed90:	ec ec       	ldi	r30, 0xCC	; 204
    ed92:	f6 e7       	ldi	r31, 0x76	; 118
    ed94:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    ed98:	10 92 22 18 	sts	0x1822, r1	; 0x801822 <_de>
    ed9c:	be 01       	movw	r22, r28
    ed9e:	6f 5f       	subi	r22, 0xFF	; 255
    eda0:	7f 4f       	sbci	r23, 0xFF	; 255
    eda2:	0e 94 4d 62 	call	0xc49a	; 0xc49a <f_readdir>
    eda6:	00 97       	sbiw	r24, 0x00	; 0
    eda8:	a1 f0       	breq	.+40     	; 0xedd2 <readdir+0x46>
    edaa:	84 31       	cpi	r24, 0x14	; 20
    edac:	91 05       	cpc	r25, r1
    edae:	40 f4       	brcc	.+16     	; 0xedc0 <readdir+0x34>
    edb0:	fc 01       	movw	r30, r24
    edb2:	ea 55       	subi	r30, 0x5A	; 90
    edb4:	f4 4f       	sbci	r31, 0xF4	; 244
    edb6:	80 81       	ld	r24, Z
    edb8:	08 2e       	mov	r0, r24
    edba:	00 0c       	add	r0, r0
    edbc:	99 0b       	sbc	r25, r25
    edbe:	02 c0       	rjmp	.+4      	; 0xedc4 <readdir+0x38>
    edc0:	83 e2       	ldi	r24, 0x23	; 35
    edc2:	90 e0       	ldi	r25, 0x00	; 0
    edc4:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    edc8:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    edcc:	80 e0       	ldi	r24, 0x00	; 0
    edce:	90 e0       	ldi	r25, 0x00	; 0
    edd0:	16 c0       	rjmp	.+44     	; 0xedfe <readdir+0x72>
    edd2:	be 01       	movw	r22, r28
    edd4:	69 5e       	subi	r22, 0xE9	; 233
    edd6:	7f 4f       	sbci	r23, 0xFF	; 255
    edd8:	fb 01       	movw	r30, r22
    edda:	01 90       	ld	r0, Z+
    eddc:	00 20       	and	r0, r0
    edde:	e9 f7       	brne	.-6      	; 0xedda <readdir+0x4e>
    ede0:	31 97       	sbiw	r30, 0x01	; 1
    ede2:	8f 01       	movw	r16, r30
    ede4:	06 1b       	sub	r16, r22
    ede6:	17 0b       	sbc	r17, r23
    ede8:	a8 01       	movw	r20, r16
    edea:	82 e2       	ldi	r24, 0x22	; 34
    edec:	98 e1       	ldi	r25, 0x18	; 24
    edee:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <strncpy>
    edf2:	f8 01       	movw	r30, r16
    edf4:	ee 5d       	subi	r30, 0xDE	; 222
    edf6:	f7 4e       	sbci	r31, 0xE7	; 231
    edf8:	10 82       	st	Z, r1
    edfa:	82 e2       	ldi	r24, 0x22	; 34
    edfc:	98 e1       	ldi	r25, 0x18	; 24
    edfe:	ca 5e       	subi	r28, 0xEA	; 234
    ee00:	de 4f       	sbci	r29, 0xFE	; 254
    ee02:	e4 e0       	ldi	r30, 0x04	; 4
    ee04:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000ee08 <perror>:
    ee08:	ad b7       	in	r26, 0x3d	; 61
    ee0a:	be b7       	in	r27, 0x3e	; 62
    ee0c:	17 97       	sbiw	r26, 0x07	; 7
    ee0e:	0f b6       	in	r0, 0x3f	; 63
    ee10:	f8 94       	cli
    ee12:	be bf       	out	0x3e, r27	; 62
    ee14:	0f be       	out	0x3f, r0	; 63
    ee16:	ad bf       	out	0x3d, r26	; 61
    ee18:	20 91 ad 1c 	lds	r18, 0x1CAD	; 0x801cad <errno>
    ee1c:	30 91 ae 1c 	lds	r19, 0x1CAE	; 0x801cae <errno+0x1>
    ee20:	23 32       	cpi	r18, 0x23	; 35
    ee22:	31 05       	cpc	r19, r1
    ee24:	40 f4       	brcc	.+16     	; 0xee36 <perror+0x2e>
    ee26:	22 0f       	add	r18, r18
    ee28:	33 1f       	adc	r19, r19
    ee2a:	f9 01       	movw	r30, r18
    ee2c:	ea 5c       	subi	r30, 0xCA	; 202
    ee2e:	fe 4f       	sbci	r31, 0xFE	; 254
    ee30:	20 81       	ld	r18, Z
    ee32:	31 81       	ldd	r19, Z+1	; 0x01
    ee34:	04 c0       	rjmp	.+8      	; 0xee3e <perror+0x36>
    ee36:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    ee3a:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    ee3e:	00 97       	sbiw	r24, 0x00	; 0
    ee40:	99 f0       	breq	.+38     	; 0xee68 <perror+0x60>
    ee42:	fc 01       	movw	r30, r24
    ee44:	40 81       	ld	r20, Z
    ee46:	44 23       	and	r20, r20
    ee48:	79 f0       	breq	.+30     	; 0xee68 <perror+0x60>
    ee4a:	ed b7       	in	r30, 0x3d	; 61
    ee4c:	fe b7       	in	r31, 0x3e	; 62
    ee4e:	37 83       	std	Z+7, r19	; 0x07
    ee50:	26 83       	std	Z+6, r18	; 0x06
    ee52:	95 83       	std	Z+5, r25	; 0x05
    ee54:	84 83       	std	Z+4, r24	; 0x04
    ee56:	88 e9       	ldi	r24, 0x98	; 152
    ee58:	9b e0       	ldi	r25, 0x0B	; 11
    ee5a:	a0 e0       	ldi	r26, 0x00	; 0
    ee5c:	81 83       	std	Z+1, r24	; 0x01
    ee5e:	92 83       	std	Z+2, r25	; 0x02
    ee60:	a3 83       	std	Z+3, r26	; 0x03
    ee62:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    ee66:	0c c0       	rjmp	.+24     	; 0xee80 <perror+0x78>
    ee68:	ed b7       	in	r30, 0x3d	; 61
    ee6a:	fe b7       	in	r31, 0x3e	; 62
    ee6c:	35 83       	std	Z+5, r19	; 0x05
    ee6e:	24 83       	std	Z+4, r18	; 0x04
    ee70:	84 e9       	ldi	r24, 0x94	; 148
    ee72:	9b e0       	ldi	r25, 0x0B	; 11
    ee74:	a0 e0       	ldi	r26, 0x00	; 0
    ee76:	81 83       	std	Z+1, r24	; 0x01
    ee78:	92 83       	std	Z+2, r25	; 0x02
    ee7a:	a3 83       	std	Z+3, r26	; 0x03
    ee7c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    ee80:	ad b7       	in	r26, 0x3d	; 61
    ee82:	be b7       	in	r27, 0x3e	; 62
    ee84:	17 96       	adiw	r26, 0x07	; 7
    ee86:	0f b6       	in	r0, 0x3f	; 63
    ee88:	f8 94       	cli
    ee8a:	be bf       	out	0x3e, r27	; 62
    ee8c:	0f be       	out	0x3f, r0	; 63
    ee8e:	ad bf       	out	0x3d, r26	; 61
    ee90:	08 95       	ret

0000ee92 <fdevopen>:
    ee92:	0f 93       	push	r16
    ee94:	1f 93       	push	r17
    ee96:	cf 93       	push	r28
    ee98:	df 93       	push	r29
    ee9a:	00 97       	sbiw	r24, 0x00	; 0
    ee9c:	31 f4       	brne	.+12     	; 0xeeaa <fdevopen+0x18>
    ee9e:	61 15       	cp	r22, r1
    eea0:	71 05       	cpc	r23, r1
    eea2:	19 f4       	brne	.+6      	; 0xeeaa <fdevopen+0x18>
    eea4:	80 e0       	ldi	r24, 0x00	; 0
    eea6:	90 e0       	ldi	r25, 0x00	; 0
    eea8:	3a c0       	rjmp	.+116    	; 0xef1e <fdevopen+0x8c>
    eeaa:	8b 01       	movw	r16, r22
    eeac:	ec 01       	movw	r28, r24
    eeae:	6e e0       	ldi	r22, 0x0E	; 14
    eeb0:	70 e0       	ldi	r23, 0x00	; 0
    eeb2:	81 e0       	ldi	r24, 0x01	; 1
    eeb4:	90 e0       	ldi	r25, 0x00	; 0
    eeb6:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
    eeba:	fc 01       	movw	r30, r24
    eebc:	89 2b       	or	r24, r25
    eebe:	91 f3       	breq	.-28     	; 0xeea4 <fdevopen+0x12>
    eec0:	80 e8       	ldi	r24, 0x80	; 128
    eec2:	83 83       	std	Z+3, r24	; 0x03
    eec4:	01 15       	cp	r16, r1
    eec6:	11 05       	cpc	r17, r1
    eec8:	71 f0       	breq	.+28     	; 0xeee6 <fdevopen+0x54>
    eeca:	13 87       	std	Z+11, r17	; 0x0b
    eecc:	02 87       	std	Z+10, r16	; 0x0a
    eece:	81 e8       	ldi	r24, 0x81	; 129
    eed0:	83 83       	std	Z+3, r24	; 0x03
    eed2:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <__iob>
    eed6:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <__iob+0x1>
    eeda:	89 2b       	or	r24, r25
    eedc:	21 f4       	brne	.+8      	; 0xeee6 <fdevopen+0x54>
    eede:	f0 93 b0 1c 	sts	0x1CB0, r31	; 0x801cb0 <__iob+0x1>
    eee2:	e0 93 af 1c 	sts	0x1CAF, r30	; 0x801caf <__iob>
    eee6:	20 97       	sbiw	r28, 0x00	; 0
    eee8:	c9 f0       	breq	.+50     	; 0xef1c <fdevopen+0x8a>
    eeea:	d1 87       	std	Z+9, r29	; 0x09
    eeec:	c0 87       	std	Z+8, r28	; 0x08
    eeee:	83 81       	ldd	r24, Z+3	; 0x03
    eef0:	82 60       	ori	r24, 0x02	; 2
    eef2:	83 83       	std	Z+3, r24	; 0x03
    eef4:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <__iob+0x2>
    eef8:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <__iob+0x3>
    eefc:	89 2b       	or	r24, r25
    eefe:	21 f4       	brne	.+8      	; 0xef08 <fdevopen+0x76>
    ef00:	f0 93 b2 1c 	sts	0x1CB2, r31	; 0x801cb2 <__iob+0x3>
    ef04:	e0 93 b1 1c 	sts	0x1CB1, r30	; 0x801cb1 <__iob+0x2>
    ef08:	80 91 b3 1c 	lds	r24, 0x1CB3	; 0x801cb3 <__iob+0x4>
    ef0c:	90 91 b4 1c 	lds	r25, 0x1CB4	; 0x801cb4 <__iob+0x5>
    ef10:	89 2b       	or	r24, r25
    ef12:	21 f4       	brne	.+8      	; 0xef1c <fdevopen+0x8a>
    ef14:	f0 93 b4 1c 	sts	0x1CB4, r31	; 0x801cb4 <__iob+0x5>
    ef18:	e0 93 b3 1c 	sts	0x1CB3, r30	; 0x801cb3 <__iob+0x4>
    ef1c:	cf 01       	movw	r24, r30
    ef1e:	df 91       	pop	r29
    ef20:	cf 91       	pop	r28
    ef22:	1f 91       	pop	r17
    ef24:	0f 91       	pop	r16
    ef26:	08 95       	ret

0000ef28 <fat_time_to_unix>:
    ef28:	a6 e1       	ldi	r26, 0x16	; 22
    ef2a:	b0 e0       	ldi	r27, 0x00	; 0
    ef2c:	ea e9       	ldi	r30, 0x9A	; 154
    ef2e:	f7 e7       	ldi	r31, 0x77	; 119
    ef30:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    ef34:	fe 01       	movw	r30, r28
    ef36:	31 96       	adiw	r30, 0x01	; 1
    ef38:	26 e1       	ldi	r18, 0x16	; 22
    ef3a:	df 01       	movw	r26, r30
    ef3c:	1d 92       	st	X+, r1
    ef3e:	2a 95       	dec	r18
    ef40:	e9 f7       	brne	.-6      	; 0xef3c <fat_time_to_unix+0x14>
    ef42:	9b 01       	movw	r18, r22
    ef44:	22 0f       	add	r18, r18
    ef46:	33 1f       	adc	r19, r19
    ef48:	2e 73       	andi	r18, 0x3E	; 62
    ef4a:	33 27       	eor	r19, r19
    ef4c:	3a 83       	std	Y+2, r19	; 0x02
    ef4e:	29 83       	std	Y+1, r18	; 0x01
    ef50:	9b 01       	movw	r18, r22
    ef52:	55 e0       	ldi	r21, 0x05	; 5
    ef54:	36 95       	lsr	r19
    ef56:	27 95       	ror	r18
    ef58:	5a 95       	dec	r21
    ef5a:	e1 f7       	brne	.-8      	; 0xef54 <fat_time_to_unix+0x2c>
    ef5c:	2f 73       	andi	r18, 0x3F	; 63
    ef5e:	33 27       	eor	r19, r19
    ef60:	3c 83       	std	Y+4, r19	; 0x04
    ef62:	2b 83       	std	Y+3, r18	; 0x03
    ef64:	27 2f       	mov	r18, r23
    ef66:	26 95       	lsr	r18
    ef68:	26 95       	lsr	r18
    ef6a:	26 95       	lsr	r18
    ef6c:	2d 83       	std	Y+5, r18	; 0x05
    ef6e:	1e 82       	std	Y+6, r1	; 0x06
    ef70:	9c 01       	movw	r18, r24
    ef72:	2f 71       	andi	r18, 0x1F	; 31
    ef74:	33 27       	eor	r19, r19
    ef76:	38 87       	std	Y+8, r19	; 0x08
    ef78:	2f 83       	std	Y+7, r18	; 0x07
    ef7a:	9c 01       	movw	r18, r24
    ef7c:	65 e0       	ldi	r22, 0x05	; 5
    ef7e:	36 95       	lsr	r19
    ef80:	27 95       	ror	r18
    ef82:	6a 95       	dec	r22
    ef84:	e1 f7       	brne	.-8      	; 0xef7e <fat_time_to_unix+0x56>
    ef86:	2f 70       	andi	r18, 0x0F	; 15
    ef88:	33 27       	eor	r19, r19
    ef8a:	21 50       	subi	r18, 0x01	; 1
    ef8c:	31 09       	sbc	r19, r1
    ef8e:	3a 87       	std	Y+10, r19	; 0x0a
    ef90:	29 87       	std	Y+9, r18	; 0x09
    ef92:	9c 01       	movw	r18, r24
    ef94:	23 2f       	mov	r18, r19
    ef96:	33 27       	eor	r19, r19
    ef98:	26 95       	lsr	r18
    ef9a:	20 5b       	subi	r18, 0xB0	; 176
    ef9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ef9e:	3c 87       	std	Y+12, r19	; 0x0c
    efa0:	2b 87       	std	Y+11, r18	; 0x0b
    efa2:	cf 01       	movw	r24, r30
    efa4:	0e 94 f6 37 	call	0x6fec	; 0x6fec <timegm>
    efa8:	66 96       	adiw	r28, 0x16	; 22
    efaa:	e2 e0       	ldi	r30, 0x02	; 2
    efac:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000efb0 <stat>:
    efb0:	a6 e1       	ldi	r26, 0x16	; 22
    efb2:	b1 e0       	ldi	r27, 0x01	; 1
    efb4:	ee ed       	ldi	r30, 0xDE	; 222
    efb6:	f7 e7       	ldi	r31, 0x77	; 119
    efb8:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
    efbc:	6c 01       	movw	r12, r24
    efbe:	8b 01       	movw	r16, r22
    efc0:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    efc4:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    efc8:	6c ef       	ldi	r22, 0xFC	; 252
    efca:	78 e0       	ldi	r23, 0x08	; 8
    efcc:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
    efd0:	89 2b       	or	r24, r25
    efd2:	01 f1       	breq	.+64     	; 0xf014 <stat+0x64>
    efd4:	f8 01       	movw	r30, r16
    efd6:	14 a2       	std	Z+36, r1	; 0x24
    efd8:	15 a2       	std	Z+37, r1	; 0x25
    efda:	16 a2       	std	Z+38, r1	; 0x26
    efdc:	17 a2       	std	Z+39, r1	; 0x27
    efde:	10 a6       	std	Z+40, r1	; 0x28
    efe0:	11 a6       	std	Z+41, r1	; 0x29
    efe2:	12 a6       	std	Z+42, r1	; 0x2a
    efe4:	13 a6       	std	Z+43, r1	; 0x2b
    efe6:	14 a6       	std	Z+44, r1	; 0x2c
    efe8:	15 a6       	std	Z+45, r1	; 0x2d
    efea:	16 a6       	std	Z+46, r1	; 0x2e
    efec:	17 a6       	std	Z+47, r1	; 0x2f
    efee:	11 8a       	std	Z+17, r1	; 0x11
    eff0:	10 8a       	std	Z+16, r1	; 0x10
    eff2:	13 8a       	std	Z+19, r1	; 0x13
    eff4:	12 8a       	std	Z+18, r1	; 0x12
    eff6:	10 8e       	std	Z+24, r1	; 0x18
    eff8:	11 8e       	std	Z+25, r1	; 0x19
    effa:	12 8e       	std	Z+26, r1	; 0x1a
    effc:	13 8e       	std	Z+27, r1	; 0x1b
    effe:	80 e0       	ldi	r24, 0x00	; 0
    f000:	90 e4       	ldi	r25, 0x40	; 64
    f002:	a0 e0       	ldi	r26, 0x00	; 0
    f004:	b0 e0       	ldi	r27, 0x00	; 0
    f006:	80 87       	std	Z+8, r24	; 0x08
    f008:	91 87       	std	Z+9, r25	; 0x09
    f00a:	a2 87       	std	Z+10, r26	; 0x0a
    f00c:	b3 87       	std	Z+11, r27	; 0x0b
    f00e:	e1 2c       	mov	r14, r1
    f010:	f1 2c       	mov	r15, r1
    f012:	62 c0       	rjmp	.+196    	; 0xf0d8 <stat+0x128>
    f014:	66 ea       	ldi	r22, 0xA6	; 166
    f016:	78 e0       	ldi	r23, 0x08	; 8
    f018:	c6 01       	movw	r24, r12
    f01a:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
    f01e:	89 2b       	or	r24, r25
    f020:	c9 f6       	brne	.-78     	; 0xefd4 <stat+0x24>
    f022:	67 ef       	ldi	r22, 0xF7	; 247
    f024:	72 e1       	ldi	r23, 0x12	; 18
    f026:	c6 01       	movw	r24, r12
    f028:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
    f02c:	7c 01       	movw	r14, r24
    f02e:	89 2b       	or	r24, r25
    f030:	89 f6       	brne	.-94     	; 0xefd4 <stat+0x24>
    f032:	be 01       	movw	r22, r28
    f034:	6f 5f       	subi	r22, 0xFF	; 255
    f036:	7f 4f       	sbci	r23, 0xFF	; 255
    f038:	c6 01       	movw	r24, r12
    f03a:	0e 94 91 62 	call	0xc522	; 0xc522 <f_stat>
    f03e:	00 97       	sbiw	r24, 0x00	; 0
    f040:	a9 f0       	breq	.+42     	; 0xf06c <stat+0xbc>
    f042:	84 31       	cpi	r24, 0x14	; 20
    f044:	91 05       	cpc	r25, r1
    f046:	40 f4       	brcc	.+16     	; 0xf058 <stat+0xa8>
    f048:	fc 01       	movw	r30, r24
    f04a:	ea 55       	subi	r30, 0x5A	; 90
    f04c:	f4 4f       	sbci	r31, 0xF4	; 244
    f04e:	80 81       	ld	r24, Z
    f050:	08 2e       	mov	r0, r24
    f052:	00 0c       	add	r0, r0
    f054:	99 0b       	sbc	r25, r25
    f056:	02 c0       	rjmp	.+4      	; 0xf05c <stat+0xac>
    f058:	83 e2       	ldi	r24, 0x23	; 35
    f05a:	90 e0       	ldi	r25, 0x00	; 0
    f05c:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f060:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f064:	ee 24       	eor	r14, r14
    f066:	ea 94       	dec	r14
    f068:	fe 2c       	mov	r15, r14
    f06a:	36 c0       	rjmp	.+108    	; 0xf0d8 <stat+0x128>
    f06c:	89 81       	ldd	r24, Y+1	; 0x01
    f06e:	9a 81       	ldd	r25, Y+2	; 0x02
    f070:	ab 81       	ldd	r26, Y+3	; 0x03
    f072:	bc 81       	ldd	r27, Y+4	; 0x04
    f074:	f8 01       	movw	r30, r16
    f076:	80 8f       	std	Z+24, r24	; 0x18
    f078:	91 8f       	std	Z+25, r25	; 0x19
    f07a:	a2 8f       	std	Z+26, r26	; 0x1a
    f07c:	b3 8f       	std	Z+27, r27	; 0x1b
    f07e:	6f 81       	ldd	r22, Y+7	; 0x07
    f080:	78 85       	ldd	r23, Y+8	; 0x08
    f082:	8d 81       	ldd	r24, Y+5	; 0x05
    f084:	9e 81       	ldd	r25, Y+6	; 0x06
    f086:	50 df       	rcall	.-352    	; 0xef28 <fat_time_to_unix>
    f088:	f8 01       	movw	r30, r16
    f08a:	64 a3       	std	Z+36, r22	; 0x24
    f08c:	75 a3       	std	Z+37, r23	; 0x25
    f08e:	86 a3       	std	Z+38, r24	; 0x26
    f090:	97 a3       	std	Z+39, r25	; 0x27
    f092:	60 a7       	std	Z+40, r22	; 0x28
    f094:	71 a7       	std	Z+41, r23	; 0x29
    f096:	82 a7       	std	Z+42, r24	; 0x2a
    f098:	93 a7       	std	Z+43, r25	; 0x2b
    f09a:	64 a7       	std	Z+44, r22	; 0x2c
    f09c:	75 a7       	std	Z+45, r23	; 0x2d
    f09e:	86 a7       	std	Z+46, r24	; 0x2e
    f0a0:	97 a7       	std	Z+47, r25	; 0x2f
    f0a2:	29 85       	ldd	r18, Y+9	; 0x09
    f0a4:	20 fd       	sbrc	r18, 0
    f0a6:	03 c0       	rjmp	.+6      	; 0xf0ae <stat+0xfe>
    f0a8:	8f ef       	ldi	r24, 0xFF	; 255
    f0aa:	91 e0       	ldi	r25, 0x01	; 1
    f0ac:	02 c0       	rjmp	.+4      	; 0xf0b2 <stat+0x102>
    f0ae:	8d e6       	ldi	r24, 0x6D	; 109
    f0b0:	91 e0       	ldi	r25, 0x01	; 1
    f0b2:	48 ee       	ldi	r20, 0xE8	; 232
    f0b4:	53 e0       	ldi	r21, 0x03	; 3
    f0b6:	f8 01       	movw	r30, r16
    f0b8:	51 8b       	std	Z+17, r21	; 0x11
    f0ba:	40 8b       	std	Z+16, r20	; 0x10
    f0bc:	53 8b       	std	Z+19, r21	; 0x13
    f0be:	42 8b       	std	Z+18, r20	; 0x12
    f0c0:	24 ff       	sbrs	r18, 4
    f0c2:	02 c0       	rjmp	.+4      	; 0xf0c8 <stat+0x118>
    f0c4:	90 64       	ori	r25, 0x40	; 64
    f0c6:	01 c0       	rjmp	.+2      	; 0xf0ca <stat+0x11a>
    f0c8:	90 68       	ori	r25, 0x80	; 128
    f0ca:	a0 e0       	ldi	r26, 0x00	; 0
    f0cc:	b0 e0       	ldi	r27, 0x00	; 0
    f0ce:	f8 01       	movw	r30, r16
    f0d0:	80 87       	std	Z+8, r24	; 0x08
    f0d2:	91 87       	std	Z+9, r25	; 0x09
    f0d4:	a2 87       	std	Z+10, r26	; 0x0a
    f0d6:	b3 87       	std	Z+11, r27	; 0x0b
    f0d8:	c7 01       	movw	r24, r14
    f0da:	ca 5e       	subi	r28, 0xEA	; 234
    f0dc:	de 4f       	sbci	r29, 0xFE	; 254
    f0de:	e8 e0       	ldi	r30, 0x08	; 8
    f0e0:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0000f0e4 <unix_time_to_fat>:
    f0e4:	a4 e0       	ldi	r26, 0x04	; 4
    f0e6:	b0 e0       	ldi	r27, 0x00	; 0
    f0e8:	e8 e7       	ldi	r30, 0x78	; 120
    f0ea:	f8 e7       	ldi	r31, 0x78	; 120
    f0ec:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
    f0f0:	69 83       	std	Y+1, r22	; 0x01
    f0f2:	7a 83       	std	Y+2, r23	; 0x02
    f0f4:	8b 83       	std	Y+3, r24	; 0x03
    f0f6:	9c 83       	std	Y+4, r25	; 0x04
    f0f8:	7a 01       	movw	r14, r20
    f0fa:	89 01       	movw	r16, r18
    f0fc:	ce 01       	movw	r24, r28
    f0fe:	01 96       	adiw	r24, 0x01	; 1
    f100:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <gmtime>
    f104:	fc 01       	movw	r30, r24
    f106:	22 85       	ldd	r18, Z+10	; 0x0a
    f108:	33 85       	ldd	r19, Z+11	; 0x0b
    f10a:	20 55       	subi	r18, 0x50	; 80
    f10c:	31 09       	sbc	r19, r1
    f10e:	c9 01       	movw	r24, r18
    f110:	98 2f       	mov	r25, r24
    f112:	88 27       	eor	r24, r24
    f114:	99 0f       	add	r25, r25
    f116:	20 85       	ldd	r18, Z+8	; 0x08
    f118:	31 85       	ldd	r19, Z+9	; 0x09
    f11a:	2f 5f       	subi	r18, 0xFF	; 255
    f11c:	3f 4f       	sbci	r19, 0xFF	; 255
    f11e:	45 e0       	ldi	r20, 0x05	; 5
    f120:	22 0f       	add	r18, r18
    f122:	33 1f       	adc	r19, r19
    f124:	4a 95       	dec	r20
    f126:	e1 f7       	brne	.-8      	; 0xf120 <unix_time_to_fat+0x3c>
    f128:	28 2b       	or	r18, r24
    f12a:	39 2b       	or	r19, r25
    f12c:	86 81       	ldd	r24, Z+6	; 0x06
    f12e:	97 81       	ldd	r25, Z+7	; 0x07
    f130:	28 2b       	or	r18, r24
    f132:	39 2b       	or	r19, r25
    f134:	d7 01       	movw	r26, r14
    f136:	2d 93       	st	X+, r18
    f138:	3c 93       	st	X, r19
    f13a:	84 81       	ldd	r24, Z+4	; 0x04
    f13c:	20 e0       	ldi	r18, 0x00	; 0
    f13e:	30 e0       	ldi	r19, 0x00	; 0
    f140:	38 2f       	mov	r19, r24
    f142:	33 0f       	add	r19, r19
    f144:	33 0f       	add	r19, r19
    f146:	33 0f       	add	r19, r19
    f148:	82 81       	ldd	r24, Z+2	; 0x02
    f14a:	93 81       	ldd	r25, Z+3	; 0x03
    f14c:	55 e0       	ldi	r21, 0x05	; 5
    f14e:	88 0f       	add	r24, r24
    f150:	99 1f       	adc	r25, r25
    f152:	5a 95       	dec	r21
    f154:	e1 f7       	brne	.-8      	; 0xf14e <unix_time_to_fat+0x6a>
    f156:	82 2b       	or	r24, r18
    f158:	93 2b       	or	r25, r19
    f15a:	20 81       	ld	r18, Z
    f15c:	31 81       	ldd	r19, Z+1	; 0x01
    f15e:	36 95       	lsr	r19
    f160:	27 95       	ror	r18
    f162:	82 2b       	or	r24, r18
    f164:	93 2b       	or	r25, r19
    f166:	f8 01       	movw	r30, r16
    f168:	91 83       	std	Z+1, r25	; 0x01
    f16a:	80 83       	st	Z, r24
    f16c:	24 96       	adiw	r28, 0x04	; 4
    f16e:	e6 e0       	ldi	r30, 0x06	; 6
    f170:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0000f174 <utime>:
    f174:	aa e1       	ldi	r26, 0x1A	; 26
    f176:	b1 e0       	ldi	r27, 0x01	; 1
    f178:	e0 ec       	ldi	r30, 0xC0	; 192
    f17a:	f8 e7       	ldi	r31, 0x78	; 120
    f17c:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
    f180:	8c 01       	movw	r16, r24
    f182:	61 15       	cp	r22, r1
    f184:	71 05       	cpc	r23, r1
    f186:	31 f0       	breq	.+12     	; 0xf194 <utime+0x20>
    f188:	fb 01       	movw	r30, r22
    f18a:	64 81       	ldd	r22, Z+4	; 0x04
    f18c:	75 81       	ldd	r23, Z+5	; 0x05
    f18e:	86 81       	ldd	r24, Z+6	; 0x06
    f190:	97 81       	ldd	r25, Z+7	; 0x07
    f192:	04 c0       	rjmp	.+8      	; 0xf19c <utime+0x28>
    f194:	80 e0       	ldi	r24, 0x00	; 0
    f196:	90 e0       	ldi	r25, 0x00	; 0
    f198:	0e 94 91 35 	call	0x6b22	; 0x6b22 <time>
    f19c:	9e 01       	movw	r18, r28
    f19e:	29 5e       	subi	r18, 0xE9	; 233
    f1a0:	3e 4f       	sbci	r19, 0xFE	; 254
    f1a2:	ae 01       	movw	r20, r28
    f1a4:	47 5e       	subi	r20, 0xE7	; 231
    f1a6:	5e 4f       	sbci	r21, 0xFE	; 254
    f1a8:	9d df       	rcall	.-198    	; 0xf0e4 <unix_time_to_fat>
    f1aa:	c7 5e       	subi	r28, 0xE7	; 231
    f1ac:	de 4f       	sbci	r29, 0xFE	; 254
    f1ae:	88 81       	ld	r24, Y
    f1b0:	99 81       	ldd	r25, Y+1	; 0x01
    f1b2:	c9 51       	subi	r28, 0x19	; 25
    f1b4:	d1 40       	sbci	r29, 0x01	; 1
    f1b6:	9e 83       	std	Y+6, r25	; 0x06
    f1b8:	8d 83       	std	Y+5, r24	; 0x05
    f1ba:	c9 5e       	subi	r28, 0xE9	; 233
    f1bc:	de 4f       	sbci	r29, 0xFE	; 254
    f1be:	88 81       	ld	r24, Y
    f1c0:	99 81       	ldd	r25, Y+1	; 0x01
    f1c2:	c7 51       	subi	r28, 0x17	; 23
    f1c4:	d1 40       	sbci	r29, 0x01	; 1
    f1c6:	98 87       	std	Y+8, r25	; 0x08
    f1c8:	8f 83       	std	Y+7, r24	; 0x07
    f1ca:	be 01       	movw	r22, r28
    f1cc:	6f 5f       	subi	r22, 0xFF	; 255
    f1ce:	7f 4f       	sbci	r23, 0xFF	; 255
    f1d0:	c8 01       	movw	r24, r16
    f1d2:	0e 94 a8 66 	call	0xcd50	; 0xcd50 <f_utime>
    f1d6:	84 31       	cpi	r24, 0x14	; 20
    f1d8:	91 05       	cpc	r25, r1
    f1da:	40 f4       	brcc	.+16     	; 0xf1ec <utime+0x78>
    f1dc:	fc 01       	movw	r30, r24
    f1de:	ea 55       	subi	r30, 0x5A	; 90
    f1e0:	f4 4f       	sbci	r31, 0xF4	; 244
    f1e2:	80 81       	ld	r24, Z
    f1e4:	08 2e       	mov	r0, r24
    f1e6:	00 0c       	add	r0, r0
    f1e8:	99 0b       	sbc	r25, r25
    f1ea:	02 c0       	rjmp	.+4      	; 0xf1f0 <utime+0x7c>
    f1ec:	83 e2       	ldi	r24, 0x23	; 35
    f1ee:	90 e0       	ldi	r25, 0x00	; 0
    f1f0:	c6 5e       	subi	r28, 0xE6	; 230
    f1f2:	de 4f       	sbci	r29, 0xFE	; 254
    f1f4:	e4 e0       	ldi	r30, 0x04	; 4
    f1f6:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0000f1fa <fileno_to_fatfs>:
    f1fa:	83 30       	cpi	r24, 0x03	; 3
    f1fc:	91 05       	cpc	r25, r1
    f1fe:	48 f4       	brcc	.+18     	; 0xf212 <fileno_to_fatfs+0x18>
    f200:	89 e0       	ldi	r24, 0x09	; 9
    f202:	90 e0       	ldi	r25, 0x00	; 0
    f204:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f208:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f20c:	80 e0       	ldi	r24, 0x00	; 0
    f20e:	90 e0       	ldi	r25, 0x00	; 0
    f210:	08 95       	ret
    f212:	60 dc       	rcall	.-1856   	; 0xead4 <fileno_to_stream>
    f214:	00 97       	sbiw	r24, 0x00	; 0
    f216:	d1 f3       	breq	.-12     	; 0xf20c <fileno_to_fatfs+0x12>
    f218:	fc 01       	movw	r30, r24
    f21a:	84 85       	ldd	r24, Z+12	; 0x0c
    f21c:	95 85       	ldd	r25, Z+13	; 0x0d
    f21e:	00 97       	sbiw	r24, 0x00	; 0
    f220:	79 f3       	breq	.-34     	; 0xf200 <fileno_to_fatfs+0x6>
    f222:	08 95       	ret

0000f224 <ftell>:
    f224:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f228:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    f22c:	37 dc       	rcall	.-1938   	; 0xea9c <fileno>
    f22e:	83 30       	cpi	r24, 0x03	; 3
    f230:	91 05       	cpc	r25, r1
    f232:	48 f0       	brcs	.+18     	; 0xf246 <ftell+0x22>
    f234:	e2 df       	rcall	.-60     	; 0xf1fa <fileno_to_fatfs>
    f236:	00 97       	sbiw	r24, 0x00	; 0
    f238:	51 f4       	brne	.+20     	; 0xf24e <ftell+0x2a>
    f23a:	89 e0       	ldi	r24, 0x09	; 9
    f23c:	90 e0       	ldi	r25, 0x00	; 0
    f23e:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f242:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f246:	6f ef       	ldi	r22, 0xFF	; 255
    f248:	7f ef       	ldi	r23, 0xFF	; 255
    f24a:	cb 01       	movw	r24, r22
    f24c:	08 95       	ret
    f24e:	fc 01       	movw	r30, r24
    f250:	60 89       	ldd	r22, Z+16	; 0x10
    f252:	71 89       	ldd	r23, Z+17	; 0x11
    f254:	82 89       	ldd	r24, Z+18	; 0x12
    f256:	93 89       	ldd	r25, Z+19	; 0x13
    f258:	08 95       	ret

0000f25a <lseek>:
    f25a:	a3 e0       	ldi	r26, 0x03	; 3
    f25c:	b0 e0       	ldi	r27, 0x00	; 0
    f25e:	e3 e3       	ldi	r30, 0x33	; 51
    f260:	f9 e7       	ldi	r31, 0x79	; 121
    f262:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
    f266:	5c 01       	movw	r10, r24
    f268:	6a 01       	movw	r12, r20
    f26a:	7b 01       	movw	r14, r22
    f26c:	89 01       	movw	r16, r18
    f26e:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f272:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
    f276:	c1 df       	rcall	.-126    	; 0xf1fa <fileno_to_fatfs>
    f278:	ec 01       	movw	r28, r24
    f27a:	89 2b       	or	r24, r25
    f27c:	19 f4       	brne	.+6      	; 0xf284 <lseek+0x2a>
    f27e:	88 e1       	ldi	r24, 0x18	; 24
    f280:	90 e0       	ldi	r25, 0x00	; 0
    f282:	26 c0       	rjmp	.+76     	; 0xf2d0 <lseek+0x76>
    f284:	83 e0       	ldi	r24, 0x03	; 3
    f286:	a8 16       	cp	r10, r24
    f288:	b1 04       	cpc	r11, r1
    f28a:	d0 f1       	brcs	.+116    	; 0xf300 <lseek+0xa6>
    f28c:	c5 01       	movw	r24, r10
    f28e:	22 dc       	rcall	.-1980   	; 0xead4 <fileno_to_stream>
    f290:	fc 01       	movw	r30, r24
    f292:	93 81       	ldd	r25, Z+3	; 0x03
    f294:	90 64       	ori	r25, 0x40	; 64
    f296:	93 83       	std	Z+3, r25	; 0x03
    f298:	02 30       	cpi	r16, 0x02	; 2
    f29a:	11 05       	cpc	r17, r1
    f29c:	a9 f5       	brne	.+106    	; 0xf308 <lseek+0xae>
    f29e:	8a 85       	ldd	r24, Y+10	; 0x0a
    f2a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    f2a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    f2a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    f2a6:	c8 0e       	add	r12, r24
    f2a8:	d9 1e       	adc	r13, r25
    f2aa:	ea 1e       	adc	r14, r26
    f2ac:	fb 1e       	adc	r15, r27
    f2ae:	b7 01       	movw	r22, r14
    f2b0:	a6 01       	movw	r20, r12
    f2b2:	ce 01       	movw	r24, r28
    f2b4:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <f_lseek>
    f2b8:	00 97       	sbiw	r24, 0x00	; 0
    f2ba:	79 f0       	breq	.+30     	; 0xf2da <lseek+0x80>
    f2bc:	84 31       	cpi	r24, 0x14	; 20
    f2be:	91 05       	cpc	r25, r1
    f2c0:	58 f5       	brcc	.+86     	; 0xf318 <lseek+0xbe>
    f2c2:	fc 01       	movw	r30, r24
    f2c4:	ea 55       	subi	r30, 0x5A	; 90
    f2c6:	f4 4f       	sbci	r31, 0xF4	; 244
    f2c8:	80 81       	ld	r24, Z
    f2ca:	08 2e       	mov	r0, r24
    f2cc:	00 0c       	add	r0, r0
    f2ce:	99 0b       	sbc	r25, r25
    f2d0:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f2d4:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f2d8:	13 c0       	rjmp	.+38     	; 0xf300 <lseek+0xa6>
    f2da:	68 89       	ldd	r22, Y+16	; 0x10
    f2dc:	79 89       	ldd	r23, Y+17	; 0x11
    f2de:	8a 89       	ldd	r24, Y+18	; 0x12
    f2e0:	9b 89       	ldd	r25, Y+19	; 0x13
    f2e2:	c6 16       	cp	r12, r22
    f2e4:	d7 06       	cpc	r13, r23
    f2e6:	e8 06       	cpc	r14, r24
    f2e8:	f9 06       	cpc	r15, r25
    f2ea:	c9 f0       	breq	.+50     	; 0xf31e <lseek+0xc4>
    f2ec:	80 ea       	ldi	r24, 0xA0	; 160
    f2ee:	9b e0       	ldi	r25, 0x0B	; 11
    f2f0:	a0 e0       	ldi	r26, 0x00	; 0
    f2f2:	ed b7       	in	r30, 0x3d	; 61
    f2f4:	fe b7       	in	r31, 0x3e	; 62
    f2f6:	81 83       	std	Z+1, r24	; 0x01
    f2f8:	92 83       	std	Z+2, r25	; 0x02
    f2fa:	a3 83       	std	Z+3, r26	; 0x03
    f2fc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    f300:	6f ef       	ldi	r22, 0xFF	; 255
    f302:	7f ef       	ldi	r23, 0xFF	; 255
    f304:	cb 01       	movw	r24, r22
    f306:	0b c0       	rjmp	.+22     	; 0xf31e <lseek+0xc4>
    f308:	01 30       	cpi	r16, 0x01	; 1
    f30a:	11 05       	cpc	r17, r1
    f30c:	81 f6       	brne	.-96     	; 0xf2ae <lseek+0x54>
    f30e:	88 89       	ldd	r24, Y+16	; 0x10
    f310:	99 89       	ldd	r25, Y+17	; 0x11
    f312:	aa 89       	ldd	r26, Y+18	; 0x12
    f314:	bb 89       	ldd	r27, Y+19	; 0x13
    f316:	c7 cf       	rjmp	.-114    	; 0xf2a6 <lseek+0x4c>
    f318:	83 e2       	ldi	r24, 0x23	; 35
    f31a:	90 e0       	ldi	r25, 0x00	; 0
    f31c:	d9 cf       	rjmp	.-78     	; 0xf2d0 <lseek+0x76>
    f31e:	cd b7       	in	r28, 0x3d	; 61
    f320:	de b7       	in	r29, 0x3e	; 62
    f322:	23 96       	adiw	r28, 0x03	; 3
    f324:	ea e0       	ldi	r30, 0x0A	; 10
    f326:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0000f32a <fseek>:
    f32a:	cf 92       	push	r12
    f32c:	df 92       	push	r13
    f32e:	ef 92       	push	r14
    f330:	ff 92       	push	r15
    f332:	cf 93       	push	r28
    f334:	df 93       	push	r29
    f336:	6a 01       	movw	r12, r20
    f338:	7b 01       	movw	r14, r22
    f33a:	e9 01       	movw	r28, r18
    f33c:	af db       	rcall	.-2210   	; 0xea9c <fileno>
    f33e:	97 fd       	sbrc	r25, 7
    f340:	12 c0       	rjmp	.+36     	; 0xf366 <fseek+0x3c>
    f342:	9e 01       	movw	r18, r28
    f344:	b7 01       	movw	r22, r14
    f346:	a6 01       	movw	r20, r12
    f348:	88 df       	rcall	.-240    	; 0xf25a <lseek>
    f34a:	21 e0       	ldi	r18, 0x01	; 1
    f34c:	30 e0       	ldi	r19, 0x00	; 0
    f34e:	6f 3f       	cpi	r22, 0xFF	; 255
    f350:	7f 4f       	sbci	r23, 0xFF	; 255
    f352:	8f 4f       	sbci	r24, 0xFF	; 255
    f354:	9f 4f       	sbci	r25, 0xFF	; 255
    f356:	11 f0       	breq	.+4      	; 0xf35c <fseek+0x32>
    f358:	20 e0       	ldi	r18, 0x00	; 0
    f35a:	30 e0       	ldi	r19, 0x00	; 0
    f35c:	88 27       	eor	r24, r24
    f35e:	99 27       	eor	r25, r25
    f360:	82 1b       	sub	r24, r18
    f362:	93 0b       	sbc	r25, r19
    f364:	02 c0       	rjmp	.+4      	; 0xf36a <fseek+0x40>
    f366:	8f ef       	ldi	r24, 0xFF	; 255
    f368:	9f ef       	ldi	r25, 0xFF	; 255
    f36a:	df 91       	pop	r29
    f36c:	cf 91       	pop	r28
    f36e:	ff 90       	pop	r15
    f370:	ef 90       	pop	r14
    f372:	df 90       	pop	r13
    f374:	cf 90       	pop	r12
    f376:	08 95       	ret

0000f378 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f378:	a2 e0       	ldi	r26, 0x02	; 2
    f37a:	b0 e0       	ldi	r27, 0x00	; 0
    f37c:	e2 ec       	ldi	r30, 0xC2	; 194
    f37e:	f9 e7       	ldi	r31, 0x79	; 121
    f380:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
    f384:	5c 01       	movw	r10, r24
    f386:	8b 01       	movw	r16, r22
    f388:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f38a:	fb 01       	movw	r30, r22
    f38c:	10 82       	st	Z, r1

    errno = 0;
    f38e:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f392:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f396:	9e db       	rcall	.-2244   	; 0xead4 <fileno_to_stream>
    f398:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f39a:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <__iob>
    f39e:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <__iob+0x1>
    f3a2:	e8 16       	cp	r14, r24
    f3a4:	f9 06       	cpc	r15, r25
    f3a6:	c9 f4       	brne	.+50     	; 0xf3da <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f3a8:	f7 01       	movw	r30, r14
    f3aa:	83 81       	ldd	r24, Z+3	; 0x03
    f3ac:	80 64       	ori	r24, 0x40	; 64
    f3ae:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f3b0:	1a 82       	std	Y+2, r1	; 0x02
    f3b2:	19 82       	std	Y+1, r1	; 0x01
    f3b4:	c0 0e       	add	r12, r16
    f3b6:	d1 1e       	adc	r13, r17
        while(count--)
    f3b8:	0c 15       	cp	r16, r12
    f3ba:	1d 05       	cpc	r17, r13
    f3bc:	09 f4       	brne	.+2      	; 0xf3c0 <read+0x48>
    f3be:	3d c0       	rjmp	.+122    	; 0xf43a <read+0xc2>
        {
            ret = fgetc(stream);
    f3c0:	c7 01       	movw	r24, r14
    f3c2:	48 da       	rcall	.-2928   	; 0xe854 <fgetc>
            if(ret < 0)
    f3c4:	97 fd       	sbrc	r25, 7
    f3c6:	39 c0       	rjmp	.+114    	; 0xf43a <read+0xc2>
                break;

            *ptr++ = ret;
    f3c8:	f8 01       	movw	r30, r16
    f3ca:	81 93       	st	Z+, r24
    f3cc:	8f 01       	movw	r16, r30
            ++size;
    f3ce:	89 81       	ldd	r24, Y+1	; 0x01
    f3d0:	9a 81       	ldd	r25, Y+2	; 0x02
    f3d2:	01 96       	adiw	r24, 0x01	; 1
    f3d4:	9a 83       	std	Y+2, r25	; 0x02
    f3d6:	89 83       	std	Y+1, r24	; 0x01
    f3d8:	ef cf       	rjmp	.-34     	; 0xf3b8 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f3da:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <__iob+0x2>
    f3de:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <__iob+0x3>
    f3e2:	e8 16       	cp	r14, r24
    f3e4:	f9 06       	cpc	r15, r25
    f3e6:	71 f1       	breq	.+92     	; 0xf444 <read+0xcc>
    f3e8:	80 91 b3 1c 	lds	r24, 0x1CB3	; 0x801cb3 <__iob+0x4>
    f3ec:	90 91 b4 1c 	lds	r25, 0x1CB4	; 0x801cb4 <__iob+0x5>
    f3f0:	e8 16       	cp	r14, r24
    f3f2:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f3f4:	39 f1       	breq	.+78     	; 0xf444 <read+0xcc>
    f3f6:	c5 01       	movw	r24, r10
    f3f8:	00 df       	rcall	.-512    	; 0xf1fa <fileno_to_fatfs>
    if ( fh == NULL )
    f3fa:	00 97       	sbiw	r24, 0x00	; 0
    f3fc:	19 f4       	brne	.+6      	; 0xf404 <read+0x8c>
    {
        errno = EBADF;
    f3fe:	89 e0       	ldi	r24, 0x09	; 9
    f400:	90 e0       	ldi	r25, 0x00	; 0
    f402:	16 c0       	rjmp	.+44     	; 0xf430 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f404:	9e 01       	movw	r18, r28
    f406:	2f 5f       	subi	r18, 0xFF	; 255
    f408:	3f 4f       	sbci	r19, 0xFF	; 255
    f40a:	a6 01       	movw	r20, r12
    f40c:	b8 01       	movw	r22, r16
    f40e:	0e 94 ff 59 	call	0xb3fe	; 0xb3fe <f_read>
    if(res != FR_OK)
    f412:	00 97       	sbiw	r24, 0x00	; 0
    f414:	91 f0       	breq	.+36     	; 0xf43a <read+0xc2>
    f416:	84 31       	cpi	r24, 0x14	; 20
    f418:	91 05       	cpc	r25, r1
    f41a:	40 f4       	brcc	.+16     	; 0xf42c <read+0xb4>
    f41c:	fc 01       	movw	r30, r24
    f41e:	ea 55       	subi	r30, 0x5A	; 90
    f420:	f4 4f       	sbci	r31, 0xF4	; 244
    f422:	80 81       	ld	r24, Z
    f424:	08 2e       	mov	r0, r24
    f426:	00 0c       	add	r0, r0
    f428:	99 0b       	sbc	r25, r25
    f42a:	02 c0       	rjmp	.+4      	; 0xf430 <read+0xb8>
    f42c:	83 e2       	ldi	r24, 0x23	; 35
    f42e:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f430:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f434:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f438:	05 c0       	rjmp	.+10     	; 0xf444 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f43a:	69 81       	ldd	r22, Y+1	; 0x01
    f43c:	7a 81       	ldd	r23, Y+2	; 0x02
    f43e:	80 e0       	ldi	r24, 0x00	; 0
    f440:	90 e0       	ldi	r25, 0x00	; 0
    f442:	03 c0       	rjmp	.+6      	; 0xf44a <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f444:	6f ef       	ldi	r22, 0xFF	; 255
    f446:	7f ef       	ldi	r23, 0xFF	; 255
    f448:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f44a:	22 96       	adiw	r28, 0x02	; 2
    f44c:	ea e0       	ldi	r30, 0x0A	; 10
    f44e:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0000f452 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f452:	0f 93       	push	r16
    f454:	1f 93       	push	r17
    f456:	cf 93       	push	r28
    f458:	df 93       	push	r29
    f45a:	ec 01       	movw	r28, r24
    f45c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f45e:	64 9f       	mul	r22, r20
    f460:	80 01       	movw	r16, r0
    f462:	65 9f       	mul	r22, r21
    f464:	10 0d       	add	r17, r0
    f466:	74 9f       	mul	r23, r20
    f468:	10 0d       	add	r17, r0
    f46a:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f46c:	17 db       	rcall	.-2514   	; 0xea9c <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f46e:	a8 01       	movw	r20, r16
    f470:	be 01       	movw	r22, r28
    f472:	82 df       	rcall	.-252    	; 0xf378 <read>
    if(ret < 0)
    f474:	97 fd       	sbrc	r25, 7
    f476:	02 c0       	rjmp	.+4      	; 0xf47c <fread+0x2a>
        return(0);

    return((size_t) ret);
    f478:	cb 01       	movw	r24, r22
    f47a:	02 c0       	rjmp	.+4      	; 0xf480 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f47c:	80 e0       	ldi	r24, 0x00	; 0
    f47e:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f480:	df 91       	pop	r29
    f482:	cf 91       	pop	r28
    f484:	1f 91       	pop	r17
    f486:	0f 91       	pop	r16
    f488:	08 95       	ret

0000f48a <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f48a:	cf 93       	push	r28
    f48c:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f48e:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f492:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f496:	83 30       	cpi	r24, 0x03	; 3
    f498:	91 05       	cpc	r25, r1
    f49a:	18 f4       	brcc	.+6      	; 0xf4a2 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f49c:	89 e0       	ldi	r24, 0x09	; 9
    f49e:	90 e0       	ldi	r25, 0x00	; 0
    f4a0:	18 c0       	rjmp	.+48     	; 0xf4d2 <syncfs+0x48>
    f4a2:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f4a4:	17 db       	rcall	.-2514   	; 0xead4 <fileno_to_stream>
    f4a6:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f4a8:	93 81       	ldd	r25, Z+3	; 0x03
    f4aa:	90 64       	ori	r25, 0x40	; 64
    f4ac:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4ae:	ce 01       	movw	r24, r28
    f4b0:	a4 de       	rcall	.-696    	; 0xf1fa <fileno_to_fatfs>
    if(fh == NULL)
    f4b2:	00 97       	sbiw	r24, 0x00	; 0
    f4b4:	99 f3       	breq	.-26     	; 0xf49c <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f4b6:	0e 94 e1 5c 	call	0xb9c2	; 0xb9c2 <f_sync>
    if (res != FR_OK)
    f4ba:	00 97       	sbiw	r24, 0x00	; 0
    f4bc:	a1 f0       	breq	.+40     	; 0xf4e6 <syncfs+0x5c>
    f4be:	84 31       	cpi	r24, 0x14	; 20
    f4c0:	91 05       	cpc	r25, r1
    f4c2:	70 f4       	brcc	.+28     	; 0xf4e0 <syncfs+0x56>
    f4c4:	fc 01       	movw	r30, r24
    f4c6:	ea 55       	subi	r30, 0x5A	; 90
    f4c8:	f4 4f       	sbci	r31, 0xF4	; 244
    f4ca:	80 81       	ld	r24, Z
    f4cc:	08 2e       	mov	r0, r24
    f4ce:	00 0c       	add	r0, r0
    f4d0:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f4d2:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f4d6:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
        return(-1);
    f4da:	8f ef       	ldi	r24, 0xFF	; 255
    f4dc:	9f ef       	ldi	r25, 0xFF	; 255
    f4de:	05 c0       	rjmp	.+10     	; 0xf4ea <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f4e0:	83 e2       	ldi	r24, 0x23	; 35
    f4e2:	90 e0       	ldi	r25, 0x00	; 0
    f4e4:	f6 cf       	rjmp	.-20     	; 0xf4d2 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f4e6:	80 e0       	ldi	r24, 0x00	; 0
    f4e8:	90 e0       	ldi	r25, 0x00	; 0
}
    f4ea:	df 91       	pop	r29
    f4ec:	cf 91       	pop	r28
    f4ee:	08 95       	ret

0000f4f0 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f4f0:	cf 93       	push	r28
    f4f2:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f4f4:	c0 e0       	ldi	r28, 0x00	; 0
    f4f6:	d0 e0       	ldi	r29, 0x00	; 0
    f4f8:	21 96       	adiw	r28, 0x01	; 1
    f4fa:	c0 31       	cpi	r28, 0x10	; 16
    f4fc:	d1 05       	cpc	r29, r1
    f4fe:	51 f0       	breq	.+20     	; 0xf514 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f500:	c3 30       	cpi	r28, 0x03	; 3
    f502:	d1 05       	cpc	r29, r1
    f504:	cc f3       	brlt	.-14     	; 0xf4f8 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f506:	ce 01       	movw	r24, r28
    f508:	78 de       	rcall	.-784    	; 0xf1fa <fileno_to_fatfs>
        if(fh == NULL)
    f50a:	89 2b       	or	r24, r25
    f50c:	a9 f3       	breq	.-22     	; 0xf4f8 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f50e:	ce 01       	movw	r24, r28
    f510:	bc df       	rcall	.-136    	; 0xf48a <syncfs>
    f512:	f2 cf       	rjmp	.-28     	; 0xf4f8 <sync+0x8>
    }
}
    f514:	df 91       	pop	r29
    f516:	cf 91       	pop	r28
    f518:	08 95       	ret

0000f51a <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f51a:	a2 e0       	ldi	r26, 0x02	; 2
    f51c:	b0 e0       	ldi	r27, 0x00	; 0
    f51e:	e3 e9       	ldi	r30, 0x93	; 147
    f520:	fa e7       	ldi	r31, 0x7A	; 122
    f522:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
    f526:	8c 01       	movw	r16, r24
    f528:	b6 2e       	mov	r11, r22
    f52a:	f7 2e       	mov	r15, r23
    f52c:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f52e:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f532:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f536:	ce da       	rcall	.-2660   	; 0xead4 <fileno_to_stream>
    f538:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f53a:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <__iob+0x2>
    f53e:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <__iob+0x3>
    f542:	c8 16       	cp	r12, r24
    f544:	d9 06       	cpc	r13, r25
    f546:	39 f0       	breq	.+14     	; 0xf556 <write+0x3c>
    f548:	80 91 b3 1c 	lds	r24, 0x1CB3	; 0x801cb3 <__iob+0x4>
    f54c:	90 91 b4 1c 	lds	r25, 0x1CB4	; 0x801cb4 <__iob+0x5>
    f550:	c8 16       	cp	r12, r24
    f552:	d9 06       	cpc	r13, r25
    f554:	d1 f4       	brne	.+52     	; 0xf58a <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f556:	1a 82       	std	Y+2, r1	; 0x02
    f558:	19 82       	std	Y+1, r1	; 0x01
    f55a:	0b 2d       	mov	r16, r11
    f55c:	1f 2d       	mov	r17, r15
    f55e:	78 01       	movw	r14, r16
    f560:	e8 0c       	add	r14, r8
    f562:	f9 1c       	adc	r15, r9
        while(count--)
    f564:	0e 15       	cp	r16, r14
    f566:	1f 05       	cpc	r17, r15
    f568:	d1 f1       	breq	.+116    	; 0xf5de <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f56a:	f8 01       	movw	r30, r16
    f56c:	a1 90       	ld	r10, Z+
    f56e:	8f 01       	movw	r16, r30
    f570:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f572:	b6 01       	movw	r22, r12
    f574:	c5 01       	movw	r24, r10
    f576:	c4 d9       	rcall	.-3192   	; 0xe900 <fputc>
            if(c != ret)
    f578:	a8 16       	cp	r10, r24
    f57a:	b9 06       	cpc	r11, r25
    f57c:	81 f5       	brne	.+96     	; 0xf5de <write+0xc4>
                break;

            ++size;
    f57e:	89 81       	ldd	r24, Y+1	; 0x01
    f580:	9a 81       	ldd	r25, Y+2	; 0x02
    f582:	01 96       	adiw	r24, 0x01	; 1
    f584:	9a 83       	std	Y+2, r25	; 0x02
    f586:	89 83       	std	Y+1, r24	; 0x01
    f588:	ed cf       	rjmp	.-38     	; 0xf564 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f58a:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <__iob>
    f58e:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <__iob+0x1>
    f592:	c8 16       	cp	r12, r24
    f594:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f596:	41 f1       	breq	.+80     	; 0xf5e8 <write+0xce>
    f598:	c8 01       	movw	r24, r16
    f59a:	2f de       	rcall	.-930    	; 0xf1fa <fileno_to_fatfs>
    if ( fh == NULL )
    f59c:	00 97       	sbiw	r24, 0x00	; 0
    f59e:	19 f4       	brne	.+6      	; 0xf5a6 <write+0x8c>
    {
        errno = EBADF;
    f5a0:	89 e0       	ldi	r24, 0x09	; 9
    f5a2:	90 e0       	ldi	r25, 0x00	; 0
    f5a4:	17 c0       	rjmp	.+46     	; 0xf5d4 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f5a6:	9e 01       	movw	r18, r28
    f5a8:	2f 5f       	subi	r18, 0xFF	; 255
    f5aa:	3f 4f       	sbci	r19, 0xFF	; 255
    f5ac:	a4 01       	movw	r20, r8
    f5ae:	6b 2d       	mov	r22, r11
    f5b0:	7f 2d       	mov	r23, r15
    f5b2:	0e 94 4a 5b 	call	0xb694	; 0xb694 <f_write>
    if(res != FR_OK)
    f5b6:	00 97       	sbiw	r24, 0x00	; 0
    f5b8:	91 f0       	breq	.+36     	; 0xf5de <write+0xc4>
    f5ba:	84 31       	cpi	r24, 0x14	; 20
    f5bc:	91 05       	cpc	r25, r1
    f5be:	40 f4       	brcc	.+16     	; 0xf5d0 <write+0xb6>
    f5c0:	fc 01       	movw	r30, r24
    f5c2:	ea 55       	subi	r30, 0x5A	; 90
    f5c4:	f4 4f       	sbci	r31, 0xF4	; 244
    f5c6:	80 81       	ld	r24, Z
    f5c8:	08 2e       	mov	r0, r24
    f5ca:	00 0c       	add	r0, r0
    f5cc:	99 0b       	sbc	r25, r25
    f5ce:	02 c0       	rjmp	.+4      	; 0xf5d4 <write+0xba>
    f5d0:	83 e2       	ldi	r24, 0x23	; 35
    f5d2:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f5d4:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f5d8:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f5dc:	05 c0       	rjmp	.+10     	; 0xf5e8 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f5de:	69 81       	ldd	r22, Y+1	; 0x01
    f5e0:	7a 81       	ldd	r23, Y+2	; 0x02
    f5e2:	80 e0       	ldi	r24, 0x00	; 0
    f5e4:	90 e0       	ldi	r25, 0x00	; 0
    f5e6:	03 c0       	rjmp	.+6      	; 0xf5ee <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f5e8:	6f ef       	ldi	r22, 0xFF	; 255
    f5ea:	7f ef       	ldi	r23, 0xFF	; 255
    f5ec:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f5ee:	22 96       	adiw	r28, 0x02	; 2
    f5f0:	ec e0       	ldi	r30, 0x0C	; 12
    f5f2:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

0000f5f6 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f5f6:	0f 93       	push	r16
    f5f8:	1f 93       	push	r17
    f5fa:	cf 93       	push	r28
    f5fc:	df 93       	push	r29
    f5fe:	ec 01       	movw	r28, r24
    f600:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f602:	64 9f       	mul	r22, r20
    f604:	80 01       	movw	r16, r0
    f606:	65 9f       	mul	r22, r21
    f608:	10 0d       	add	r17, r0
    f60a:	74 9f       	mul	r23, r20
    f60c:	10 0d       	add	r17, r0
    f60e:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f610:	45 da       	rcall	.-2934   	; 0xea9c <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f612:	a8 01       	movw	r20, r16
    f614:	be 01       	movw	r22, r28
    f616:	81 df       	rcall	.-254    	; 0xf51a <write>

    if(ret < 0)
    f618:	97 fd       	sbrc	r25, 7
    f61a:	02 c0       	rjmp	.+4      	; 0xf620 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f61c:	cb 01       	movw	r24, r22
    f61e:	02 c0       	rjmp	.+4      	; 0xf624 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f620:	80 e0       	ldi	r24, 0x00	; 0
    f622:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f624:	df 91       	pop	r29
    f626:	cf 91       	pop	r28
    f628:	1f 91       	pop	r17
    f62a:	0f 91       	pop	r16
    f62c:	08 95       	ret

0000f62e <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f62e:	0f 93       	push	r16
    f630:	1f 93       	push	r17
    f632:	cf 93       	push	r28
    f634:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f636:	83 30       	cpi	r24, 0x03	; 3
    f638:	91 05       	cpc	r25, r1
    f63a:	48 f4       	brcc	.+18     	; 0xf64e <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f63c:	89 e0       	ldi	r24, 0x09	; 9
    f63e:	90 e0       	ldi	r25, 0x00	; 0
    f640:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f644:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
        return(-1);
    f648:	8f ef       	ldi	r24, 0xFF	; 255
    f64a:	9f ef       	ldi	r25, 0xFF	; 255
    f64c:	20 c0       	rjmp	.+64     	; 0xf68e <free_file_descriptor+0x60>
    f64e:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f650:	41 da       	rcall	.-2942   	; 0xead4 <fileno_to_stream>
    f652:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f654:	89 2b       	or	r24, r25
    f656:	c1 f3       	breq	.-16     	; 0xf648 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f658:	f8 01       	movw	r30, r16
    f65a:	84 85       	ldd	r24, Z+12	; 0x0c
    f65c:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f65e:	00 97       	sbiw	r24, 0x00	; 0
    f660:	11 f0       	breq	.+4      	; 0xf666 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f662:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f666:	f8 01       	movw	r30, r16
    f668:	80 81       	ld	r24, Z
    f66a:	91 81       	ldd	r25, Z+1	; 0x01
    f66c:	00 97       	sbiw	r24, 0x00	; 0
    f66e:	21 f0       	breq	.+8      	; 0xf678 <free_file_descriptor+0x4a>
    f670:	23 81       	ldd	r18, Z+3	; 0x03
    f672:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f674:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
    }

    __iob[fileno]  = NULL;
    f678:	fe 01       	movw	r30, r28
    f67a:	ee 0f       	add	r30, r30
    f67c:	ff 1f       	adc	r31, r31
    f67e:	e1 55       	subi	r30, 0x51	; 81
    f680:	f3 4e       	sbci	r31, 0xE3	; 227
    f682:	11 82       	std	Z+1, r1	; 0x01
    f684:	10 82       	st	Z, r1
    safefree(stream);
    f686:	c8 01       	movw	r24, r16
    f688:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
    return(fileno);
    f68c:	ce 01       	movw	r24, r28
}
    f68e:	df 91       	pop	r29
    f690:	cf 91       	pop	r28
    f692:	1f 91       	pop	r17
    f694:	0f 91       	pop	r16
    f696:	08 95       	ret

0000f698 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f698:	0f 93       	push	r16
    f69a:	1f 93       	push	r17
    f69c:	cf 93       	push	r28
    f69e:	df 93       	push	r29
    f6a0:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f6a2:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f6a6:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f6aa:	14 da       	rcall	.-3032   	; 0xead4 <fileno_to_stream>
    if(stream == NULL)
    f6ac:	89 2b       	or	r24, r25
    f6ae:	d9 f0       	breq	.+54     	; 0xf6e6 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f6b0:	c8 01       	movw	r24, r16
    f6b2:	a3 dd       	rcall	.-1210   	; 0xf1fa <fileno_to_fatfs>
    if(fh == NULL)
    f6b4:	00 97       	sbiw	r24, 0x00	; 0
    f6b6:	b9 f0       	breq	.+46     	; 0xf6e6 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f6b8:	0e 94 61 5d 	call	0xbac2	; 0xbac2 <f_close>
    free_file_descriptor(fileno);
    f6bc:	ec 01       	movw	r28, r24
    f6be:	c8 01       	movw	r24, r16
    f6c0:	b6 df       	rcall	.-148    	; 0xf62e <free_file_descriptor>
    if (res != FR_OK)
    f6c2:	20 97       	sbiw	r28, 0x00	; 0
    f6c4:	99 f0       	breq	.+38     	; 0xf6ec <close+0x54>
    f6c6:	c4 31       	cpi	r28, 0x14	; 20
    f6c8:	d1 05       	cpc	r29, r1
    f6ca:	38 f4       	brcc	.+14     	; 0xf6da <close+0x42>
    f6cc:	ca 55       	subi	r28, 0x5A	; 90
    f6ce:	d4 4f       	sbci	r29, 0xF4	; 244
    f6d0:	88 81       	ld	r24, Y
    f6d2:	08 2e       	mov	r0, r24
    f6d4:	00 0c       	add	r0, r0
    f6d6:	99 0b       	sbc	r25, r25
    f6d8:	02 c0       	rjmp	.+4      	; 0xf6de <close+0x46>
    f6da:	83 e2       	ldi	r24, 0x23	; 35
    f6dc:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f6de:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f6e2:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
        return(-1);
    f6e6:	8f ef       	ldi	r24, 0xFF	; 255
    f6e8:	9f ef       	ldi	r25, 0xFF	; 255
    f6ea:	02 c0       	rjmp	.+4      	; 0xf6f0 <close+0x58>
    }
    return(0);
    f6ec:	80 e0       	ldi	r24, 0x00	; 0
    f6ee:	90 e0       	ldi	r25, 0x00	; 0
}
    f6f0:	df 91       	pop	r29
    f6f2:	cf 91       	pop	r28
    f6f4:	1f 91       	pop	r17
    f6f6:	0f 91       	pop	r16
    f6f8:	08 95       	ret

0000f6fa <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f6fa:	d0 d9       	rcall	.-3168   	; 0xea9c <fileno>
    if(fn < 0)
    f6fc:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f6fe:	02 c0       	rjmp	.+4      	; 0xf704 <fclose+0xa>
    f700:	cb cf       	rjmp	.-106    	; 0xf698 <close>
    f702:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f704:	8f ef       	ldi	r24, 0xFF	; 255
    f706:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f708:	08 95       	ret

0000f70a <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f70a:	0f 93       	push	r16
    f70c:	1f 93       	push	r17
    f70e:	cf 93       	push	r28
    f710:	df 93       	push	r29
    f712:	ef ea       	ldi	r30, 0xAF	; 175
    f714:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f716:	c0 e0       	ldi	r28, 0x00	; 0
    f718:	d0 e0       	ldi	r29, 0x00	; 0
    f71a:	21 96       	adiw	r28, 0x01	; 1
    f71c:	c0 31       	cpi	r28, 0x10	; 16
    f71e:	d1 05       	cpc	r29, r1
    f720:	49 f0       	breq	.+18     	; 0xf734 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f722:	c3 30       	cpi	r28, 0x03	; 3
    f724:	d1 05       	cpc	r29, r1
    f726:	24 f0       	brlt	.+8      	; 0xf730 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f728:	82 81       	ldd	r24, Z+2	; 0x02
    f72a:	93 81       	ldd	r25, Z+3	; 0x03
    f72c:	89 2b       	or	r24, r25
    f72e:	59 f0       	breq	.+22     	; 0xf746 <new_file_descriptor+0x3c>
    f730:	32 96       	adiw	r30, 0x02	; 2
    f732:	f3 cf       	rjmp	.-26     	; 0xf71a <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f734:	87 e1       	ldi	r24, 0x17	; 23
    f736:	90 e0       	ldi	r25, 0x00	; 0
    f738:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f73c:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    return(-1);
    f740:	8f ef       	ldi	r24, 0xFF	; 255
    f742:	9f ef       	ldi	r25, 0xFF	; 255
    f744:	22 c0       	rjmp	.+68     	; 0xf78a <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f746:	61 e0       	ldi	r22, 0x01	; 1
    f748:	70 e0       	ldi	r23, 0x00	; 0
    f74a:	8e e0       	ldi	r24, 0x0E	; 14
    f74c:	90 e0       	ldi	r25, 0x00	; 0
    f74e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
    f752:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f754:	89 2b       	or	r24, r25
    f756:	59 f0       	breq	.+22     	; 0xf76e <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f758:	61 e0       	ldi	r22, 0x01	; 1
    f75a:	70 e0       	ldi	r23, 0x00	; 0
    f75c:	84 e2       	ldi	r24, 0x24	; 36
    f75e:	92 e0       	ldi	r25, 0x02	; 2
    f760:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
            if(fh == NULL)
    f764:	00 97       	sbiw	r24, 0x00	; 0
    f766:	31 f4       	brne	.+12     	; 0xf774 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f768:	c8 01       	movw	r24, r16
    f76a:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
                errno = ENOMEM;
    f76e:	8c e0       	ldi	r24, 0x0C	; 12
    f770:	90 e0       	ldi	r25, 0x00	; 0
    f772:	e2 cf       	rjmp	.-60     	; 0xf738 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f774:	fe 01       	movw	r30, r28
    f776:	ee 0f       	add	r30, r30
    f778:	ff 1f       	adc	r31, r31
    f77a:	e1 55       	subi	r30, 0x51	; 81
    f77c:	f3 4e       	sbci	r31, 0xE3	; 227
    f77e:	11 83       	std	Z+1, r17	; 0x01
    f780:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f782:	f8 01       	movw	r30, r16
    f784:	95 87       	std	Z+13, r25	; 0x0d
    f786:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f788:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f78a:	df 91       	pop	r29
    f78c:	cf 91       	pop	r28
    f78e:	1f 91       	pop	r17
    f790:	0f 91       	pop	r16
    f792:	08 95       	ret

0000f794 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f794:	a0 e0       	ldi	r26, 0x00	; 0
    f796:	b0 e0       	ldi	r27, 0x00	; 0
    f798:	e0 ed       	ldi	r30, 0xD0	; 208
    f79a:	fb e7       	ldi	r31, 0x7B	; 123
    f79c:	0c 94 87 e1 	jmp	0x1c30e	; 0x1c30e <__prologue_saves__+0x8>
    f7a0:	5c 01       	movw	r10, r24
    f7a2:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f7a4:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <errno+0x1>
    f7a8:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f7ac:	7b 01       	movw	r14, r22
    f7ae:	83 e0       	ldi	r24, 0x03	; 3
    f7b0:	e8 22       	and	r14, r24
    f7b2:	ff 24       	eor	r15, r15
    f7b4:	e2 e0       	ldi	r30, 0x02	; 2
    f7b6:	ee 16       	cp	r14, r30
    f7b8:	f1 04       	cpc	r15, r1
    f7ba:	31 f0       	breq	.+12     	; 0xf7c8 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f7bc:	e1 14       	cp	r14, r1
    f7be:	f1 04       	cpc	r15, r1
    f7c0:	31 f0       	breq	.+12     	; 0xf7ce <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f7c2:	02 e0       	ldi	r16, 0x02	; 2
    f7c4:	10 e0       	ldi	r17, 0x00	; 0
    f7c6:	05 c0       	rjmp	.+10     	; 0xf7d2 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f7c8:	03 e0       	ldi	r16, 0x03	; 3
    f7ca:	10 e0       	ldi	r17, 0x00	; 0
    f7cc:	02 c0       	rjmp	.+4      	; 0xf7d2 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f7ce:	01 e0       	ldi	r16, 0x01	; 1
    f7d0:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f7d2:	c6 fe       	sbrs	r12, 6
    f7d4:	05 c0       	rjmp	.+10     	; 0xf7e0 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f7d6:	d1 fe       	sbrs	r13, 1
    f7d8:	02 c0       	rjmp	.+4      	; 0xf7de <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f7da:	08 60       	ori	r16, 0x08	; 8
    f7dc:	01 c0       	rjmp	.+2      	; 0xf7e0 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f7de:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f7e0:	94 df       	rcall	.-216    	; 0xf70a <new_file_descriptor>
    f7e2:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f7e4:	77 d9       	rcall	.-3346   	; 0xead4 <fileno_to_stream>
    f7e6:	ec 01       	movw	r28, r24
    f7e8:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f7ea:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f7ec:	09 f4       	brne	.+2      	; 0xf7f0 <open+0x5c>
    f7ee:	48 c0       	rjmp	.+144    	; 0xf880 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f7f0:	04 dd       	rcall	.-1528   	; 0xf1fa <fileno_to_fatfs>
    f7f2:	4c 01       	movw	r8, r24
    f7f4:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f7f6:	59 f4       	brne	.+22     	; 0xf80e <open+0x7a>
    {
        free_file_descriptor(fileno);
    f7f8:	c3 01       	movw	r24, r6
    f7fa:	19 df       	rcall	.-462    	; 0xf62e <free_file_descriptor>
    f7fc:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f7fe:	90 e0       	ldi	r25, 0x00	; 0
    f800:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    f804:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f808:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f80a:	9f ef       	ldi	r25, 0xFF	; 255
    f80c:	5d c0       	rjmp	.+186    	; 0xf8c8 <open+0x134>
    f80e:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f810:	b5 01       	movw	r22, r10
    f812:	0e 94 47 58 	call	0xb08e	; 0xb08e <f_open>
    f816:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f818:	91 f0       	breq	.+36     	; 0xf83e <open+0xaa>
    f81a:	84 31       	cpi	r24, 0x14	; 20
    f81c:	91 05       	cpc	r25, r1
    f81e:	40 f4       	brcc	.+16     	; 0xf830 <open+0x9c>
    f820:	fc 01       	movw	r30, r24
    f822:	ea 55       	subi	r30, 0x5A	; 90
    f824:	f4 4f       	sbci	r31, 0xF4	; 244
    f826:	80 81       	ld	r24, Z
    f828:	08 2e       	mov	r0, r24
    f82a:	00 0c       	add	r0, r0
    f82c:	99 0b       	sbc	r25, r25
    f82e:	02 c0       	rjmp	.+4      	; 0xf834 <open+0xa0>
    f830:	83 e2       	ldi	r24, 0x23	; 35
    f832:	90 e0       	ldi	r25, 0x00	; 0
    f834:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f838:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f83c:	20 c0       	rjmp	.+64     	; 0xf87e <open+0xea>
    f83e:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f840:	21 c0       	rjmp	.+66     	; 0xf884 <open+0xf0>
    f842:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f844:	42 85       	ldd	r20, Z+10	; 0x0a
    f846:	53 85       	ldd	r21, Z+11	; 0x0b
    f848:	64 85       	ldd	r22, Z+12	; 0x0c
    f84a:	75 85       	ldd	r23, Z+13	; 0x0d
    f84c:	c4 01       	movw	r24, r8
    f84e:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <f_lseek>
    f852:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f854:	b9 f0       	breq	.+46     	; 0xf884 <open+0xf0>
    f856:	84 31       	cpi	r24, 0x14	; 20
    f858:	91 05       	cpc	r25, r1
    f85a:	40 f4       	brcc	.+16     	; 0xf86c <open+0xd8>
    f85c:	fc 01       	movw	r30, r24
    f85e:	ea 55       	subi	r30, 0x5A	; 90
    f860:	f4 4f       	sbci	r31, 0xF4	; 244
    f862:	80 81       	ld	r24, Z
    f864:	08 2e       	mov	r0, r24
    f866:	00 0c       	add	r0, r0
    f868:	99 0b       	sbc	r25, r25
    f86a:	02 c0       	rjmp	.+4      	; 0xf870 <open+0xdc>
    f86c:	83 e2       	ldi	r24, 0x23	; 35
    f86e:	90 e0       	ldi	r25, 0x00	; 0
    f870:	90 93 ae 1c 	sts	0x1CAE, r25	; 0x801cae <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f874:	80 93 ad 1c 	sts	0x1CAD, r24	; 0x801cad <errno>
    f878:	c4 01       	movw	r24, r8
            f_close(fh);
    f87a:	0e 94 61 5d 	call	0xbac2	; 0xbac2 <f_close>
            free_file_descriptor(fileno);
    f87e:	c3 01       	movw	r24, r6
    f880:	d6 de       	rcall	.-596    	; 0xf62e <free_file_descriptor>
    f882:	c2 cf       	rjmp	.-124    	; 0xf808 <open+0x74>
    f884:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f886:	ef 16       	cp	r14, r31
    f888:	f1 04       	cpc	r15, r1
    f88a:	51 f4       	brne	.+20     	; 0xf8a0 <open+0x10c>
    f88c:	8f ed       	ldi	r24, 0xDF	; 223
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f88e:	93 e7       	ldi	r25, 0x73	; 115
    f890:	99 87       	std	Y+9, r25	; 0x09
    f892:	88 87       	std	Y+8, r24	; 0x08
    f894:	8c e5       	ldi	r24, 0x5C	; 92
        stream->get = fatfs_getc;
    f896:	93 e7       	ldi	r25, 0x73	; 115
    f898:	9b 87       	std	Y+11, r25	; 0x0b
    f89a:	8a 87       	std	Y+10, r24	; 0x0a
    f89c:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f89e:	12 c0       	rjmp	.+36     	; 0xf8c4 <open+0x130>
    f8a0:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f8a2:	f1 04       	cpc	r15, r1
    f8a4:	41 f4       	brne	.+16     	; 0xf8b6 <open+0x122>
    f8a6:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f8a8:	18 86       	std	Y+8, r1	; 0x08
    f8aa:	8c e5       	ldi	r24, 0x5C	; 92
        stream->get = fatfs_getc;
    f8ac:	93 e7       	ldi	r25, 0x73	; 115
    f8ae:	9b 87       	std	Y+11, r25	; 0x0b
    f8b0:	8a 87       	std	Y+10, r24	; 0x0a
    f8b2:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f8b4:	07 c0       	rjmp	.+14     	; 0xf8c4 <open+0x130>
    f8b6:	8f ed       	ldi	r24, 0xDF	; 223
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f8b8:	93 e7       	ldi	r25, 0x73	; 115
    f8ba:	99 87       	std	Y+9, r25	; 0x09
    f8bc:	88 87       	std	Y+8, r24	; 0x08
    f8be:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f8c0:	1a 86       	std	Y+10, r1	; 0x0a
    f8c2:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f8c4:	8b 83       	std	Y+3, r24	; 0x03
    f8c6:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f8c8:	cd b7       	in	r28, 0x3d	; 61
}
    f8ca:	de b7       	in	r29, 0x3e	; 62
    f8cc:	ee e0       	ldi	r30, 0x0E	; 14
    f8ce:	0c 94 a3 e1 	jmp	0x1c346	; 0x1c346 <__epilogue_restores__+0x8>

0000f8d2 <posix_fopen_modes_to_open>:
    f8d2:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f8d4:	df 93       	push	r29
    f8d6:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f8d8:	62 e4       	ldi	r22, 0x42	; 66
    f8da:	73 e0       	ldi	r23, 0x03	; 3
    f8dc:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f8e0:	00 97       	sbiw	r24, 0x00	; 0
    f8e2:	09 f4       	brne	.+2      	; 0xf8e6 <posix_fopen_modes_to_open+0x14>
    f8e4:	5d c0       	rjmp	.+186    	; 0xf9a0 <posix_fopen_modes_to_open+0xce>
    f8e6:	6e ef       	ldi	r22, 0xFE	; 254
    f8e8:	78 e0       	ldi	r23, 0x08	; 8
    f8ea:	ce 01       	movw	r24, r28
    f8ec:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f8f0:	00 97       	sbiw	r24, 0x00	; 0
    f8f2:	09 f4       	brne	.+2      	; 0xf8f6 <posix_fopen_modes_to_open+0x24>
    f8f4:	55 c0       	rjmp	.+170    	; 0xf9a0 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f8f6:	61 e0       	ldi	r22, 0x01	; 1
    f8f8:	79 e0       	ldi	r23, 0x09	; 9
    f8fa:	ce 01       	movw	r24, r28
    f8fc:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f900:	89 2b       	or	r24, r25
    f902:	09 f4       	brne	.+2      	; 0xf906 <posix_fopen_modes_to_open+0x34>
    f904:	42 c0       	rjmp	.+132    	; 0xf98a <posix_fopen_modes_to_open+0xb8>
    f906:	64 e0       	ldi	r22, 0x04	; 4
    f908:	79 e0       	ldi	r23, 0x09	; 9
    f90a:	ce 01       	movw	r24, r28
    f90c:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f910:	89 2b       	or	r24, r25
    f912:	d9 f1       	breq	.+118    	; 0xf98a <posix_fopen_modes_to_open+0xb8>
    f914:	68 e0       	ldi	r22, 0x08	; 8
    f916:	79 e0       	ldi	r23, 0x09	; 9
    f918:	ce 01       	movw	r24, r28
    f91a:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f91e:	89 2b       	or	r24, r25
    f920:	a1 f1       	breq	.+104    	; 0xf98a <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f922:	6d eb       	ldi	r22, 0xBD	; 189
    f924:	7a e0       	ldi	r23, 0x0A	; 10
    f926:	ce 01       	movw	r24, r28
    f928:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f92c:	89 2b       	or	r24, r25
    f92e:	81 f1       	breq	.+96     	; 0xf990 <posix_fopen_modes_to_open+0xbe>
    f930:	6c e0       	ldi	r22, 0x0C	; 12
    f932:	79 e0       	ldi	r23, 0x09	; 9
    f934:	ce 01       	movw	r24, r28
    f936:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f93a:	89 2b       	or	r24, r25
    f93c:	49 f1       	breq	.+82     	; 0xf990 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f93e:	6f e0       	ldi	r22, 0x0F	; 15
    f940:	79 e0       	ldi	r23, 0x09	; 9
    f942:	ce 01       	movw	r24, r28
    f944:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f948:	89 2b       	or	r24, r25
    f94a:	29 f1       	breq	.+74     	; 0xf996 <posix_fopen_modes_to_open+0xc4>
    f94c:	62 e1       	ldi	r22, 0x12	; 18
    f94e:	79 e0       	ldi	r23, 0x09	; 9
    f950:	ce 01       	movw	r24, r28
    f952:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f956:	89 2b       	or	r24, r25
    f958:	f1 f0       	breq	.+60     	; 0xf996 <posix_fopen_modes_to_open+0xc4>
    f95a:	66 e1       	ldi	r22, 0x16	; 22
    f95c:	79 e0       	ldi	r23, 0x09	; 9
    f95e:	ce 01       	movw	r24, r28
    f960:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f964:	89 2b       	or	r24, r25
    f966:	b9 f0       	breq	.+46     	; 0xf996 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    f968:	68 e2       	ldi	r22, 0x28	; 40
    f96a:	73 e1       	ldi	r23, 0x13	; 19
    f96c:	ce 01       	movw	r24, r28
    f96e:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f972:	89 2b       	or	r24, r25
    f974:	99 f0       	breq	.+38     	; 0xf99c <posix_fopen_modes_to_open+0xca>
    f976:	6a e1       	ldi	r22, 0x1A	; 26
    f978:	79 e0       	ldi	r23, 0x09	; 9
    f97a:	ce 01       	movw	r24, r28
    f97c:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <strcmp>
    f980:	89 2b       	or	r24, r25
    f982:	61 f0       	breq	.+24     	; 0xf99c <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    f984:	8f ef       	ldi	r24, 0xFF	; 255
    f986:	9f ef       	ldi	r25, 0xFF	; 255
    f988:	0b c0       	rjmp	.+22     	; 0xf9a0 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    f98a:	82 e0       	ldi	r24, 0x02	; 2
    f98c:	92 e0       	ldi	r25, 0x02	; 2
    f98e:	08 c0       	rjmp	.+16     	; 0xf9a0 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    f990:	81 e4       	ldi	r24, 0x41	; 65
    f992:	92 e0       	ldi	r25, 0x02	; 2
    f994:	05 c0       	rjmp	.+10     	; 0xf9a0 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    f996:	82 e4       	ldi	r24, 0x42	; 66
    f998:	92 e0       	ldi	r25, 0x02	; 2
    f99a:	02 c0       	rjmp	.+4      	; 0xf9a0 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    f99c:	81 e4       	ldi	r24, 0x41	; 65
    f99e:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    f9a0:	df 91       	pop	r29
    f9a2:	cf 91       	pop	r28
    f9a4:	08 95       	ret

0000f9a6 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    f9a6:	cf 93       	push	r28
    f9a8:	df 93       	push	r29
    f9aa:	ec 01       	movw	r28, r24
    f9ac:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    f9ae:	91 df       	rcall	.-222    	; 0xf8d2 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    f9b0:	bc 01       	movw	r22, r24
    f9b2:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    f9b4:	ef de       	rcall	.-546    	; 0xf794 <open>
    f9b6:	8e d8       	rcall	.-3812   	; 0xead4 <fileno_to_stream>
}
    f9b8:	df 91       	pop	r29
    f9ba:	cf 91       	pop	r28
    f9bc:	08 95       	ret

0000f9be <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    f9be:	a8 e0       	ldi	r26, 0x08	; 8
    f9c0:	b0 e0       	ldi	r27, 0x00	; 0
    f9c2:	e5 ee       	ldi	r30, 0xE5	; 229
    f9c4:	fc e7       	ldi	r31, 0x7C	; 124
    f9c6:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    f9ca:	82 ed       	ldi	r24, 0xD2	; 210
    f9cc:	94 e7       	ldi	r25, 0x74	; 116
    f9ce:	9a 83       	std	Y+2, r25	; 0x02
    f9d0:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    f9d2:	18 86       	std	Y+8, r1	; 0x08
    f9d4:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    f9d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    f9d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    f9da:	9c 83       	std	Y+4, r25	; 0x04
    f9dc:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    f9de:	4f 85       	ldd	r20, Y+15	; 0x0f
    f9e0:	58 89       	ldd	r21, Y+16	; 0x10
    f9e2:	60 e8       	ldi	r22, 0x80	; 128
    f9e4:	9e 01       	movw	r18, r28
    f9e6:	2f 5e       	subi	r18, 0xEF	; 239
    f9e8:	3f 4f       	sbci	r19, 0xFF	; 255
    f9ea:	ce 01       	movw	r24, r28
    f9ec:	01 96       	adiw	r24, 0x01	; 1
    f9ee:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    f9f2:	8f 81       	ldd	r24, Y+7	; 0x07
    f9f4:	98 85       	ldd	r25, Y+8	; 0x08
    f9f6:	28 96       	adiw	r28, 0x08	; 8
    f9f8:	e2 e0       	ldi	r30, 0x02	; 2
    f9fa:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000f9fe <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    f9fe:	cf 93       	push	r28
    fa00:	df 93       	push	r29
    fa02:	00 d0       	rcall	.+0      	; 0xfa04 <posix_help+0x6>
    fa04:	1f 92       	push	r1
    fa06:	ec 01       	movw	r28, r24
    fa08:	86 e4       	ldi	r24, 0x46	; 70
    fa0a:	9e e0       	ldi	r25, 0x0E	; 14
    fa0c:	a0 e0       	ldi	r26, 0x00	; 0
    fa0e:	ed b7       	in	r30, 0x3d	; 61
    fa10:	fe b7       	in	r31, 0x3e	; 62
    fa12:	81 83       	std	Z+1, r24	; 0x01
    fa14:	92 83       	std	Z+2, r25	; 0x02
    fa16:	a3 83       	std	Z+3, r26	; 0x03
    fa18:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fa1c:	cd 2b       	or	r28, r29
    fa1e:	51 f0       	breq	.+20     	; 0xfa34 <posix_help+0x36>
    fa20:	80 e8       	ldi	r24, 0x80	; 128
    fa22:	9d e0       	ldi	r25, 0x0D	; 13
    fa24:	a0 e0       	ldi	r26, 0x00	; 0
    fa26:	ed b7       	in	r30, 0x3d	; 61
    fa28:	fe b7       	in	r31, 0x3e	; 62
    fa2a:	81 83       	std	Z+1, r24	; 0x01
    fa2c:	92 83       	std	Z+2, r25	; 0x02
    fa2e:	a3 83       	std	Z+3, r26	; 0x03
    fa30:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fa34:	cd b7       	in	r28, 0x3d	; 61
    fa36:	de b7       	in	r29, 0x3e	; 62
    fa38:	23 96       	adiw	r28, 0x03	; 3
    fa3a:	e2 e0       	ldi	r30, 0x02	; 2
    fa3c:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000fa40 <copy>:
    fa40:	4f 92       	push	r4
    fa42:	5f 92       	push	r5
    fa44:	6f 92       	push	r6
    fa46:	8f 92       	push	r8
    fa48:	9f 92       	push	r9
    fa4a:	af 92       	push	r10
    fa4c:	bf 92       	push	r11
    fa4e:	cf 92       	push	r12
    fa50:	df 92       	push	r13
    fa52:	ef 92       	push	r14
    fa54:	ff 92       	push	r15
    fa56:	0f 93       	push	r16
    fa58:	1f 93       	push	r17
    fa5a:	cf 93       	push	r28
    fa5c:	df 93       	push	r29
    fa5e:	ad b7       	in	r26, 0x3d	; 61
    fa60:	be b7       	in	r27, 0x3e	; 62
    fa62:	17 97       	sbiw	r26, 0x07	; 7
    fa64:	0f b6       	in	r0, 0x3f	; 63
    fa66:	f8 94       	cli
    fa68:	be bf       	out	0x3e, r27	; 62
    fa6a:	0f be       	out	0x3f, r0	; 63
    fa6c:	ad bf       	out	0x3d, r26	; 61
    fa6e:	8c 01       	movw	r16, r24
    fa70:	eb 01       	movw	r28, r22
    fa72:	ed b7       	in	r30, 0x3d	; 61
    fa74:	fe b7       	in	r31, 0x3e	; 62
    fa76:	95 83       	std	Z+5, r25	; 0x05
    fa78:	84 83       	std	Z+4, r24	; 0x04
    fa7a:	81 e0       	ldi	r24, 0x01	; 1
    fa7c:	9d e0       	ldi	r25, 0x0D	; 13
    fa7e:	a0 e0       	ldi	r26, 0x00	; 0
    fa80:	81 83       	std	Z+1, r24	; 0x01
    fa82:	92 83       	std	Z+2, r25	; 0x02
    fa84:	a3 83       	std	Z+3, r26	; 0x03
    fa86:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fa8a:	6e ef       	ldi	r22, 0xFE	; 254
    fa8c:	78 e0       	ldi	r23, 0x08	; 8
    fa8e:	c8 01       	movw	r24, r16
    fa90:	8a df       	rcall	.-236    	; 0xf9a6 <fopen>
    fa92:	7c 01       	movw	r14, r24
    fa94:	ed b7       	in	r30, 0x3d	; 61
    fa96:	fe b7       	in	r31, 0x3e	; 62
    fa98:	89 2b       	or	r24, r25
    fa9a:	59 f4       	brne	.+22     	; 0xfab2 <copy+0x72>
    fa9c:	15 83       	std	Z+5, r17	; 0x05
    fa9e:	04 83       	std	Z+4, r16	; 0x04
    faa0:	81 ef       	ldi	r24, 0xF1	; 241
    faa2:	9c e0       	ldi	r25, 0x0C	; 12
    faa4:	a0 e0       	ldi	r26, 0x00	; 0
    faa6:	81 83       	std	Z+1, r24	; 0x01
    faa8:	92 83       	std	Z+2, r25	; 0x02
    faaa:	a3 83       	std	Z+3, r26	; 0x03
    faac:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fab0:	20 c0       	rjmp	.+64     	; 0xfaf2 <copy+0xb2>
    fab2:	d5 83       	std	Z+5, r29	; 0x05
    fab4:	c4 83       	std	Z+4, r28	; 0x04
    fab6:	84 ee       	ldi	r24, 0xE4	; 228
    fab8:	9c e0       	ldi	r25, 0x0C	; 12
    faba:	a0 e0       	ldi	r26, 0x00	; 0
    fabc:	81 83       	std	Z+1, r24	; 0x01
    fabe:	92 83       	std	Z+2, r25	; 0x02
    fac0:	a3 83       	std	Z+3, r26	; 0x03
    fac2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fac6:	6c e0       	ldi	r22, 0x0C	; 12
    fac8:	79 e0       	ldi	r23, 0x09	; 9
    faca:	ce 01       	movw	r24, r28
    facc:	6c df       	rcall	.-296    	; 0xf9a6 <fopen>
    face:	8c 01       	movw	r16, r24
    fad0:	89 2b       	or	r24, r25
    fad2:	a1 f4       	brne	.+40     	; 0xfafc <copy+0xbc>
    fad4:	ed b7       	in	r30, 0x3d	; 61
    fad6:	fe b7       	in	r31, 0x3e	; 62
    fad8:	d5 83       	std	Z+5, r29	; 0x05
    fada:	c4 83       	std	Z+4, r28	; 0x04
    fadc:	84 ed       	ldi	r24, 0xD4	; 212
    fade:	9c e0       	ldi	r25, 0x0C	; 12
    fae0:	a0 e0       	ldi	r26, 0x00	; 0
    fae2:	81 83       	std	Z+1, r24	; 0x01
    fae4:	92 83       	std	Z+2, r25	; 0x02
    fae6:	a3 83       	std	Z+3, r26	; 0x03
    fae8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    faec:	80 e0       	ldi	r24, 0x00	; 0
    faee:	90 e0       	ldi	r25, 0x00	; 0
    faf0:	04 de       	rcall	.-1016   	; 0xf6fa <fclose>
    faf2:	60 e0       	ldi	r22, 0x00	; 0
    faf4:	70 e0       	ldi	r23, 0x00	; 0
    faf6:	80 e0       	ldi	r24, 0x00	; 0
    faf8:	90 e0       	ldi	r25, 0x00	; 0
    fafa:	68 c0       	rjmp	.+208    	; 0xfbcc <copy+0x18c>
    fafc:	61 e0       	ldi	r22, 0x01	; 1
    fafe:	70 e0       	ldi	r23, 0x00	; 0
    fb00:	80 e0       	ldi	r24, 0x00	; 0
    fb02:	92 e0       	ldi	r25, 0x02	; 2
    fb04:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
    fb08:	6c 01       	movw	r12, r24
    fb0a:	89 2b       	or	r24, r25
    fb0c:	21 f4       	brne	.+8      	; 0xfb16 <copy+0xd6>
    fb0e:	c7 01       	movw	r24, r14
    fb10:	f4 dd       	rcall	.-1048   	; 0xf6fa <fclose>
    fb12:	c8 01       	movw	r24, r16
    fb14:	ed cf       	rjmp	.-38     	; 0xfaf0 <copy+0xb0>
    fb16:	87 ec       	ldi	r24, 0xC7	; 199
    fb18:	9c e0       	ldi	r25, 0x0C	; 12
    fb1a:	a0 e0       	ldi	r26, 0x00	; 0
    fb1c:	ed b7       	in	r30, 0x3d	; 61
    fb1e:	fe b7       	in	r31, 0x3e	; 62
    fb20:	81 83       	std	Z+1, r24	; 0x01
    fb22:	92 83       	std	Z+2, r25	; 0x02
    fb24:	a3 83       	std	Z+3, r26	; 0x03
    fb26:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fb2a:	81 2c       	mov	r8, r1
    fb2c:	91 2c       	mov	r9, r1
    fb2e:	54 01       	movw	r10, r8
    fb30:	8b ea       	ldi	r24, 0xAB	; 171
    fb32:	9c e0       	ldi	r25, 0x0C	; 12
    fb34:	2c 01       	movw	r4, r24
    fb36:	61 2c       	mov	r6, r1
    fb38:	97 01       	movw	r18, r14
    fb3a:	40 e0       	ldi	r20, 0x00	; 0
    fb3c:	52 e0       	ldi	r21, 0x02	; 2
    fb3e:	61 e0       	ldi	r22, 0x01	; 1
    fb40:	70 e0       	ldi	r23, 0x00	; 0
    fb42:	c6 01       	movw	r24, r12
    fb44:	86 dc       	rcall	.-1780   	; 0xf452 <fread>
    fb46:	ec 01       	movw	r28, r24
    fb48:	18 16       	cp	r1, r24
    fb4a:	19 06       	cpc	r1, r25
    fb4c:	44 f5       	brge	.+80     	; 0xfb9e <copy+0x15e>
    fb4e:	98 01       	movw	r18, r16
    fb50:	ae 01       	movw	r20, r28
    fb52:	61 e0       	ldi	r22, 0x01	; 1
    fb54:	70 e0       	ldi	r23, 0x00	; 0
    fb56:	c6 01       	movw	r24, r12
    fb58:	4e dd       	rcall	.-1380   	; 0xf5f6 <fwrite>
    fb5a:	8c 17       	cp	r24, r28
    fb5c:	9d 07       	cpc	r25, r29
    fb5e:	5c f4       	brge	.+22     	; 0xfb76 <copy+0x136>
    fb60:	8a eb       	ldi	r24, 0xBA	; 186
    fb62:	9c e0       	ldi	r25, 0x0C	; 12
    fb64:	a0 e0       	ldi	r26, 0x00	; 0
    fb66:	ed b7       	in	r30, 0x3d	; 61
    fb68:	fe b7       	in	r31, 0x3e	; 62
    fb6a:	81 83       	std	Z+1, r24	; 0x01
    fb6c:	92 83       	std	Z+2, r25	; 0x02
    fb6e:	a3 83       	std	Z+3, r26	; 0x03
    fb70:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fb74:	14 c0       	rjmp	.+40     	; 0xfb9e <copy+0x15e>
    fb76:	ce 01       	movw	r24, r28
    fb78:	dd 0f       	add	r29, r29
    fb7a:	aa 0b       	sbc	r26, r26
    fb7c:	bb 0b       	sbc	r27, r27
    fb7e:	88 0e       	add	r8, r24
    fb80:	99 1e       	adc	r9, r25
    fb82:	aa 1e       	adc	r10, r26
    fb84:	bb 1e       	adc	r11, r27
    fb86:	ed b7       	in	r30, 0x3d	; 61
    fb88:	fe b7       	in	r31, 0x3e	; 62
    fb8a:	84 82       	std	Z+4, r8	; 0x04
    fb8c:	95 82       	std	Z+5, r9	; 0x05
    fb8e:	a6 82       	std	Z+6, r10	; 0x06
    fb90:	b7 82       	std	Z+7, r11	; 0x07
    fb92:	41 82       	std	Z+1, r4	; 0x01
    fb94:	52 82       	std	Z+2, r5	; 0x02
    fb96:	63 82       	std	Z+3, r6	; 0x03
    fb98:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fb9c:	cd cf       	rjmp	.-102    	; 0xfb38 <copy+0xf8>
    fb9e:	ed b7       	in	r30, 0x3d	; 61
    fba0:	fe b7       	in	r31, 0x3e	; 62
    fba2:	84 82       	std	Z+4, r8	; 0x04
    fba4:	95 82       	std	Z+5, r9	; 0x05
    fba6:	a6 82       	std	Z+6, r10	; 0x06
    fba8:	b7 82       	std	Z+7, r11	; 0x07
    fbaa:	88 e9       	ldi	r24, 0x98	; 152
    fbac:	9c e0       	ldi	r25, 0x0C	; 12
    fbae:	a0 e0       	ldi	r26, 0x00	; 0
    fbb0:	81 83       	std	Z+1, r24	; 0x01
    fbb2:	92 83       	std	Z+2, r25	; 0x02
    fbb4:	a3 83       	std	Z+3, r26	; 0x03
    fbb6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fbba:	c6 01       	movw	r24, r12
    fbbc:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
    fbc0:	c7 01       	movw	r24, r14
    fbc2:	9b dd       	rcall	.-1226   	; 0xf6fa <fclose>
    fbc4:	c8 01       	movw	r24, r16
    fbc6:	99 dd       	rcall	.-1230   	; 0xf6fa <fclose>
    fbc8:	b4 01       	movw	r22, r8
    fbca:	c5 01       	movw	r24, r10
    fbcc:	ad b7       	in	r26, 0x3d	; 61
    fbce:	be b7       	in	r27, 0x3e	; 62
    fbd0:	17 96       	adiw	r26, 0x07	; 7
    fbd2:	0f b6       	in	r0, 0x3f	; 63
    fbd4:	f8 94       	cli
    fbd6:	be bf       	out	0x3e, r27	; 62
    fbd8:	0f be       	out	0x3f, r0	; 63
    fbda:	ad bf       	out	0x3d, r26	; 61
    fbdc:	df 91       	pop	r29
    fbde:	cf 91       	pop	r28
    fbe0:	1f 91       	pop	r17
    fbe2:	0f 91       	pop	r16
    fbe4:	ff 90       	pop	r15
    fbe6:	ef 90       	pop	r14
    fbe8:	df 90       	pop	r13
    fbea:	cf 90       	pop	r12
    fbec:	bf 90       	pop	r11
    fbee:	af 90       	pop	r10
    fbf0:	9f 90       	pop	r9
    fbf2:	8f 90       	pop	r8
    fbf4:	6f 90       	pop	r6
    fbf6:	5f 90       	pop	r5
    fbf8:	4f 90       	pop	r4
    fbfa:	08 95       	ret

0000fbfc <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fbfc:	cf 93       	push	r28
    fbfe:	df 93       	push	r29
    fc00:	00 d0       	rcall	.+0      	; 0xfc02 <testpage+0x6>
    fc02:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fc04:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fc08:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fc0c:	82 17       	cp	r24, r18
    fc0e:	93 07       	cpc	r25, r19
    fc10:	3c f1       	brlt	.+78     	; 0xfc60 <testpage+0x64>
    {
        printf("More..");
    fc12:	81 e9       	ldi	r24, 0x91	; 145
    fc14:	9c e0       	ldi	r25, 0x0C	; 12
    fc16:	a0 e0       	ldi	r26, 0x00	; 0
    fc18:	ed b7       	in	r30, 0x3d	; 61
    fc1a:	fe b7       	in	r31, 0x3e	; 62
    fc1c:	81 83       	std	Z+1, r24	; 0x01
    fc1e:	92 83       	std	Z+2, r25	; 0x02
    fc20:	a3 83       	std	Z+3, r26	; 0x03
    fc22:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fc26:	0e 94 df 74 	call	0xe9be	; 0xe9be <getchar>
    fc2a:	ec 01       	movw	r28, r24
        printf("\r");
    fc2c:	8f e8       	ldi	r24, 0x8F	; 143
    fc2e:	9c e0       	ldi	r25, 0x0C	; 12
    fc30:	a0 e0       	ldi	r26, 0x00	; 0
    fc32:	ed b7       	in	r30, 0x3d	; 61
    fc34:	fe b7       	in	r31, 0x3e	; 62
    fc36:	81 83       	std	Z+1, r24	; 0x01
    fc38:	92 83       	std	Z+2, r25	; 0x02
    fc3a:	a3 83       	std	Z+3, r26	; 0x03
    fc3c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        if(c == 'q')
    fc40:	c1 37       	cpi	r28, 0x71	; 113
    fc42:	d1 05       	cpc	r29, r1
    fc44:	41 f0       	breq	.+16     	; 0xfc56 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fc46:	2a 97       	sbiw	r28, 0x0a	; 10
    fc48:	49 f4       	brne	.+18     	; 0xfc5c <testpage+0x60>
            return(_pagesize-1);                  // single line
    fc4a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fc4e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fc52:	01 97       	sbiw	r24, 0x01	; 1
    fc54:	05 c0       	rjmp	.+10     	; 0xfc60 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fc56:	8f ef       	ldi	r24, 0xFF	; 255
    fc58:	9f ef       	ldi	r25, 0xFF	; 255
    fc5a:	02 c0       	rjmp	.+4      	; 0xfc60 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fc5c:	80 e0       	ldi	r24, 0x00	; 0
    fc5e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fc60:	cd b7       	in	r28, 0x3d	; 61
    fc62:	de b7       	in	r29, 0x3e	; 62
    fc64:	23 96       	adiw	r28, 0x03	; 3
    fc66:	e2 e0       	ldi	r30, 0x02	; 2
    fc68:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0000fc6c <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fc6c:	a7 e0       	ldi	r26, 0x07	; 7
    fc6e:	b1 e0       	ldi	r27, 0x01	; 1
    fc70:	ec e3       	ldi	r30, 0x3C	; 60
    fc72:	fe e7       	ldi	r31, 0x7E	; 126
    fc74:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
    fc78:	8c 01       	movw	r16, r24
    fc7a:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fc7c:	6e ef       	ldi	r22, 0xFE	; 254
    fc7e:	78 e0       	ldi	r23, 0x08	; 8
    fc80:	92 de       	rcall	.-732    	; 0xf9a6 <fopen>
    fc82:	7c 01       	movw	r14, r24
    if (!fp)
    fc84:	89 2b       	or	r24, r25
    fc86:	41 f0       	breq	.+16     	; 0xfc98 <cat+0x2c>
    fc88:	c1 2c       	mov	r12, r1
    fc8a:	d1 2c       	mov	r13, r1
    fc8c:	a1 2c       	mov	r10, r1
    fc8e:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc90:	8e 01       	movw	r16, r28
    fc92:	08 5f       	subi	r16, 0xF8	; 248
    fc94:	1f 4f       	sbci	r17, 0xFF	; 255
    fc96:	22 c0       	rjmp	.+68     	; 0xfcdc <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fc98:	ed b7       	in	r30, 0x3d	; 61
    fc9a:	fe b7       	in	r31, 0x3e	; 62
    fc9c:	15 83       	std	Z+5, r17	; 0x05
    fc9e:	04 83       	std	Z+4, r16	; 0x04
    fca0:	8a e1       	ldi	r24, 0x1A	; 26
    fca2:	9d e0       	ldi	r25, 0x0D	; 13
    fca4:	a0 e0       	ldi	r26, 0x00	; 0
    fca6:	81 83       	std	Z+1, r24	; 0x01
    fca8:	92 83       	std	Z+2, r25	; 0x02
    fcaa:	a3 83       	std	Z+3, r26	; 0x03
    fcac:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(0);
    fcb0:	c1 2c       	mov	r12, r1
    fcb2:	d1 2c       	mov	r13, r1
    fcb4:	76 01       	movw	r14, r12
    fcb6:	3f c0       	rjmp	.+126    	; 0xfd36 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fcb8:	c8 01       	movw	r24, r16
    fcba:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <trim_tail>
        size += strlen(line);
    fcbe:	f8 01       	movw	r30, r16
    fcc0:	01 90       	ld	r0, Z+
    fcc2:	00 20       	and	r0, r0
    fcc4:	e9 f7       	brne	.-6      	; 0xfcc0 <cat+0x54>
    fcc6:	31 97       	sbiw	r30, 0x01	; 1
    fcc8:	e0 1b       	sub	r30, r16
    fcca:	f1 0b       	sbc	r31, r17
    fccc:	ce 0e       	add	r12, r30
    fcce:	df 1e       	adc	r13, r31
        puts(line);
    fcd0:	c8 01       	movw	r24, r16
    fcd2:	0e 94 37 75 	call	0xea6e	; 0xea6e <puts>
        if(dopage)
    fcd6:	81 14       	cp	r8, r1
    fcd8:	91 04       	cpc	r9, r1
    fcda:	49 f4       	brne	.+18     	; 0xfcee <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fcdc:	a7 01       	movw	r20, r14
    fcde:	6e ef       	ldi	r22, 0xFE	; 254
    fce0:	70 e0       	ldi	r23, 0x00	; 0
    fce2:	c8 01       	movw	r24, r16
    fce4:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <fgets>
    fce8:	89 2b       	or	r24, r25
    fcea:	31 f7       	brne	.-52     	; 0xfcb8 <cat+0x4c>
    fcec:	06 c0       	rjmp	.+12     	; 0xfcfa <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fcee:	c5 01       	movw	r24, r10
    fcf0:	01 96       	adiw	r24, 0x01	; 1
    fcf2:	84 df       	rcall	.-248    	; 0xfbfc <testpage>
    fcf4:	5c 01       	movw	r10, r24
            if(count < 0)
    fcf6:	97 ff       	sbrs	r25, 7
    fcf8:	f1 cf       	rjmp	.-30     	; 0xfcdc <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fcfa:	88 e1       	ldi	r24, 0x18	; 24
    fcfc:	9d e0       	ldi	r25, 0x0D	; 13
    fcfe:	a0 e0       	ldi	r26, 0x00	; 0
    fd00:	ed b7       	in	r30, 0x3d	; 61
    fd02:	fe b7       	in	r31, 0x3e	; 62
    fd04:	81 83       	std	Z+1, r24	; 0x01
    fd06:	92 83       	std	Z+2, r25	; 0x02
    fd08:	a3 83       	std	Z+3, r26	; 0x03
    fd0a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fclose(fp);
    fd0e:	c7 01       	movw	r24, r14
    fd10:	f4 dc       	rcall	.-1560   	; 0xf6fa <fclose>
    printf("%ld bytes\n", (long)size);
    fd12:	0d 2c       	mov	r0, r13
    fd14:	00 0c       	add	r0, r0
    fd16:	ee 08       	sbc	r14, r14
    fd18:	ff 08       	sbc	r15, r15
    fd1a:	ed b7       	in	r30, 0x3d	; 61
    fd1c:	fe b7       	in	r31, 0x3e	; 62
    fd1e:	c4 82       	std	Z+4, r12	; 0x04
    fd20:	d5 82       	std	Z+5, r13	; 0x05
    fd22:	e6 82       	std	Z+6, r14	; 0x06
    fd24:	f7 82       	std	Z+7, r15	; 0x07
    fd26:	8d e0       	ldi	r24, 0x0D	; 13
    fd28:	9d e0       	ldi	r25, 0x0D	; 13
    fd2a:	a0 e0       	ldi	r26, 0x00	; 0
    fd2c:	81 83       	std	Z+1, r24	; 0x01
    fd2e:	92 83       	std	Z+2, r25	; 0x02
    fd30:	a3 83       	std	Z+3, r26	; 0x03
    fd32:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(size);
}
    fd36:	c7 01       	movw	r24, r14
    fd38:	b6 01       	movw	r22, r12
    fd3a:	c9 5f       	subi	r28, 0xF9	; 249
    fd3c:	de 4f       	sbci	r29, 0xFE	; 254
    fd3e:	ec e0       	ldi	r30, 0x0C	; 12
    fd40:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

0000fd44 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fd44:	4f 92       	push	r4
    fd46:	5f 92       	push	r5
    fd48:	6f 92       	push	r6
    fd4a:	7f 92       	push	r7
    fd4c:	af 92       	push	r10
    fd4e:	bf 92       	push	r11
    fd50:	cf 92       	push	r12
    fd52:	df 92       	push	r13
    fd54:	ef 92       	push	r14
    fd56:	ff 92       	push	r15
    fd58:	0f 93       	push	r16
    fd5a:	1f 93       	push	r17
    fd5c:	cf 93       	push	r28
    fd5e:	df 93       	push	r29
    fd60:	cd b7       	in	r28, 0x3d	; 61
    fd62:	de b7       	in	r29, 0x3e	; 62
    fd64:	c9 54       	subi	r28, 0x49	; 73
    fd66:	d1 09       	sbc	r29, r1
    fd68:	0f b6       	in	r0, 0x3f	; 63
    fd6a:	f8 94       	cli
    fd6c:	de bf       	out	0x3e, r29	; 62
    fd6e:	0f be       	out	0x3f, r0	; 63
    fd70:	cd bf       	out	0x3d, r28	; 61
    fd72:	8c 01       	movw	r16, r24
    fd74:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fd76:	be 01       	movw	r22, r28
    fd78:	62 5f       	subi	r22, 0xF2	; 242
    fd7a:	7f 4f       	sbci	r23, 0xFF	; 255
    fd7c:	19 d9       	rcall	.-3534   	; 0xefb0 <stat>
    fd7e:	01 96       	adiw	r24, 0x01	; 1
    fd80:	79 f4       	brne	.+30     	; 0xfda0 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fd82:	ed b7       	in	r30, 0x3d	; 61
    fd84:	fe b7       	in	r31, 0x3e	; 62
    fd86:	15 83       	std	Z+5, r17	; 0x05
    fd88:	04 83       	std	Z+4, r16	; 0x04
    fd8a:	8d e7       	ldi	r24, 0x7D	; 125
    fd8c:	9c e0       	ldi	r25, 0x0C	; 12
    fd8e:	a0 e0       	ldi	r26, 0x00	; 0
    fd90:	81 83       	std	Z+1, r24	; 0x01
    fd92:	92 83       	std	Z+2, r25	; 0x02
    fd94:	a3 83       	std	Z+3, r26	; 0x03
    fd96:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(0);
    fd9a:	80 e0       	ldi	r24, 0x00	; 0
    fd9c:	90 e0       	ldi	r25, 0x00	; 0
    fd9e:	77 c0       	rjmp	.+238    	; 0xfe8e <ls_info+0x14a>
    }

    if(!verbose)
    fda0:	ef 28       	or	r14, r15
    fda2:	81 f4       	brne	.+32     	; 0xfdc4 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fda4:	c8 01       	movw	r24, r16
    fda6:	0e 94 a4 75 	call	0xeb48	; 0xeb48 <basename>
    fdaa:	ed b7       	in	r30, 0x3d	; 61
    fdac:	fe b7       	in	r31, 0x3e	; 62
    fdae:	95 83       	std	Z+5, r25	; 0x05
    fdb0:	84 83       	std	Z+4, r24	; 0x04
    fdb2:	89 e7       	ldi	r24, 0x79	; 121
    fdb4:	9c e0       	ldi	r25, 0x0C	; 12
    fdb6:	a0 e0       	ldi	r26, 0x00	; 0
    fdb8:	81 83       	std	Z+1, r24	; 0x01
    fdba:	92 83       	std	Z+2, r25	; 0x02
    fdbc:	a3 83       	std	Z+3, r26	; 0x03
    fdbe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    fdc2:	63 c0       	rjmp	.+198    	; 0xfe8a <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fdc4:	4e 88       	ldd	r4, Y+22	; 0x16
    fdc6:	5f 88       	ldd	r5, Y+23	; 0x17
    fdc8:	68 8c       	ldd	r6, Y+24	; 0x18
    fdca:	79 8c       	ldd	r7, Y+25	; 0x19
    fdcc:	d3 01       	movw	r26, r6
    fdce:	c2 01       	movw	r24, r4
    fdd0:	88 27       	eor	r24, r24
    fdd2:	90 7f       	andi	r25, 0xF0	; 240
    fdd4:	aa 27       	eor	r26, r26
    fdd6:	bb 27       	eor	r27, r27
    fdd8:	81 15       	cp	r24, r1
    fdda:	90 44       	sbci	r25, 0x40	; 64
    fddc:	a1 05       	cpc	r26, r1
    fdde:	b1 05       	cpc	r27, r1
    fde0:	11 f4       	brne	.+4      	; 0xfde6 <ls_info+0xa2>
        *p++ = 'd';
    fde2:	84 e6       	ldi	r24, 0x64	; 100
    fde4:	01 c0       	rjmp	.+2      	; 0xfde8 <ls_info+0xa4>
    else
        *p++ = '-';
    fde6:	8d e2       	ldi	r24, 0x2D	; 45
    fde8:	8e af       	std	Y+62, r24	; 0x3e
    fdea:	fe 01       	movw	r30, r28
    fdec:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fdee:	e1 2c       	mov	r14, r1
    fdf0:	ff 24       	eor	r15, r15
    fdf2:	f3 94       	inc	r15
    fdf4:	20 e0       	ldi	r18, 0x00	; 0
    fdf6:	30 e0       	ldi	r19, 0x00	; 0
    fdf8:	be 2e       	mov	r11, r30
    fdfa:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fdfc:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fdfe:	53 e0       	ldi	r21, 0x03	; 3
    fe00:	c5 2e       	mov	r12, r21
    fe02:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fe04:	c7 01       	movw	r24, r14
    fe06:	a0 e0       	ldi	r26, 0x00	; 0
    fe08:	b0 e0       	ldi	r27, 0x00	; 0
    fe0a:	84 21       	and	r24, r4
    fe0c:	95 21       	and	r25, r5
    fe0e:	a6 21       	and	r26, r6
    fe10:	b7 21       	and	r27, r7
    fe12:	89 2b       	or	r24, r25
    fe14:	8a 2b       	or	r24, r26
    fe16:	8b 2b       	or	r24, r27
    fe18:	51 f0       	breq	.+20     	; 0xfe2e <ls_info+0xea>
            *p++ = cm[ i % 3];
    fe1a:	c9 01       	movw	r24, r18
    fe1c:	b6 01       	movw	r22, r12
    fe1e:	0e 94 03 e1 	call	0x1c206	; 0x1c206 <__divmodhi4>
    fe22:	dc 01       	movw	r26, r24
    fe24:	a6 54       	subi	r26, 0x46	; 70
    fe26:	b4 4f       	sbci	r27, 0xF4	; 244
    fe28:	8c 91       	ld	r24, X
    fe2a:	81 83       	std	Z+1, r24	; 0x01
    fe2c:	01 c0       	rjmp	.+2      	; 0xfe30 <ls_info+0xec>
        else
            *p++ = '-';
    fe2e:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fe30:	f6 94       	lsr	r15
    fe32:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fe34:	2f 5f       	subi	r18, 0xFF	; 255
    fe36:	3f 4f       	sbci	r19, 0xFF	; 255
    fe38:	31 96       	adiw	r30, 0x01	; 1
    fe3a:	29 30       	cpi	r18, 0x09	; 9
    fe3c:	31 05       	cpc	r19, r1
    fe3e:	11 f7       	brne	.-60     	; 0xfe04 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fe40:	29 96       	adiw	r28, 0x09	; 9
    fe42:	1f ae       	std	Y+63, r1	; 0x3f
    fe44:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fe46:	4e a0       	ldd	r4, Y+38	; 0x26
    fe48:	5f a0       	ldd	r5, Y+39	; 0x27
    fe4a:	68 a4       	ldd	r6, Y+40	; 0x28
    fe4c:	79 a4       	ldd	r7, Y+41	; 0x29
    fe4e:	6e a9       	ldd	r22, Y+54	; 0x36
    fe50:	7f a9       	ldd	r23, Y+55	; 0x37
    fe52:	88 ad       	ldd	r24, Y+56	; 0x38
    fe54:	99 ad       	ldd	r25, Y+57	; 0x39
    fe56:	0e 94 7f 75 	call	0xeafe	; 0xeafe <mctime>
    fe5a:	7c 01       	movw	r14, r24
    fe5c:	c8 01       	movw	r24, r16
    fe5e:	0e 94 a4 75 	call	0xeb48	; 0xeb48 <basename>
    fe62:	ed b7       	in	r30, 0x3d	; 61
    fe64:	fe b7       	in	r31, 0x3e	; 62
    fe66:	95 87       	std	Z+13, r25	; 0x0d
    fe68:	84 87       	std	Z+12, r24	; 0x0c
    fe6a:	f3 86       	std	Z+11, r15	; 0x0b
    fe6c:	e2 86       	std	Z+10, r14	; 0x0a
    fe6e:	46 82       	std	Z+6, r4	; 0x06
    fe70:	57 82       	std	Z+7, r5	; 0x07
    fe72:	60 86       	std	Z+8, r6	; 0x08
    fe74:	71 86       	std	Z+9, r7	; 0x09
    fe76:	b4 82       	std	Z+4, r11	; 0x04
    fe78:	a5 82       	std	Z+5, r10	; 0x05
    fe7a:	8f e5       	ldi	r24, 0x5F	; 95
    fe7c:	9c e0       	ldi	r25, 0x0C	; 12
    fe7e:	a0 e0       	ldi	r26, 0x00	; 0
    fe80:	81 83       	std	Z+1, r24	; 0x01
    fe82:	92 83       	std	Z+2, r25	; 0x02
    fe84:	a3 83       	std	Z+3, r26	; 0x03
    fe86:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fe8a:	81 e0       	ldi	r24, 0x01	; 1
    fe8c:	90 e0       	ldi	r25, 0x00	; 0
}
    fe8e:	c7 5b       	subi	r28, 0xB7	; 183
    fe90:	df 4f       	sbci	r29, 0xFF	; 255
    fe92:	0f b6       	in	r0, 0x3f	; 63
    fe94:	f8 94       	cli
    fe96:	de bf       	out	0x3e, r29	; 62
    fe98:	0f be       	out	0x3f, r0	; 63
    fe9a:	cd bf       	out	0x3d, r28	; 61
    fe9c:	df 91       	pop	r29
    fe9e:	cf 91       	pop	r28
    fea0:	1f 91       	pop	r17
    fea2:	0f 91       	pop	r16
    fea4:	ff 90       	pop	r15
    fea6:	ef 90       	pop	r14
    fea8:	df 90       	pop	r13
    feaa:	cf 90       	pop	r12
    feac:	bf 90       	pop	r11
    feae:	af 90       	pop	r10
    feb0:	7f 90       	pop	r7
    feb2:	6f 90       	pop	r6
    feb4:	5f 90       	pop	r5
    feb6:	4f 90       	pop	r4
    feb8:	08 95       	ret

0000feba <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    feba:	2f 92       	push	r2
    febc:	3f 92       	push	r3
    febe:	4f 92       	push	r4
    fec0:	5f 92       	push	r5
    fec2:	6f 92       	push	r6
    fec4:	8f 92       	push	r8
    fec6:	9f 92       	push	r9
    fec8:	af 92       	push	r10
    feca:	bf 92       	push	r11
    fecc:	cf 92       	push	r12
    fece:	df 92       	push	r13
    fed0:	ef 92       	push	r14
    fed2:	ff 92       	push	r15
    fed4:	0f 93       	push	r16
    fed6:	1f 93       	push	r17
    fed8:	cf 93       	push	r28
    feda:	df 93       	push	r29
    fedc:	cd b7       	in	r28, 0x3d	; 61
    fede:	de b7       	in	r29, 0x3e	; 62
    fee0:	c7 53       	subi	r28, 0x37	; 55
    fee2:	d1 40       	sbci	r29, 0x01	; 1
    fee4:	0f b6       	in	r0, 0x3f	; 63
    fee6:	f8 94       	cli
    fee8:	de bf       	out	0x3e, r29	; 62
    feea:	0f be       	out	0x3f, r0	; 63
    feec:	cd bf       	out	0x3d, r28	; 61
    feee:	7c 01       	movw	r14, r24
    fef0:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    fef2:	1e 82       	std	Y+6, r1	; 0x06
    fef4:	8e 01       	movw	r16, r28
    fef6:	0a 5f       	subi	r16, 0xFA	; 250
    fef8:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fefa:	00 97       	sbiw	r24, 0x00	; 0
    fefc:	91 f4       	brne	.+36     	; 0xff22 <__DATA_REGION_LENGTH__+0x22>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fefe:	6e ef       	ldi	r22, 0xFE	; 254
    ff00:	70 e0       	ldi	r23, 0x00	; 0
    ff02:	c8 01       	movw	r24, r16
    ff04:	0e 94 fa 75 	call	0xebf4	; 0xebf4 <getcwd>
    ff08:	89 2b       	or	r24, r25
    ff0a:	d1 f4       	brne	.+52     	; 0xff40 <__DATA_REGION_LENGTH__+0x40>
        {
            printf("ls: Can't get current directory\n");
    ff0c:	8e e3       	ldi	r24, 0x3E	; 62
    ff0e:	9c e0       	ldi	r25, 0x0C	; 12
    ff10:	a0 e0       	ldi	r26, 0x00	; 0
    ff12:	ed b7       	in	r30, 0x3d	; 61
    ff14:	fe b7       	in	r31, 0x3e	; 62
    ff16:	81 83       	std	Z+1, r24	; 0x01
    ff18:	92 83       	std	Z+2, r25	; 0x02
    ff1a:	a3 83       	std	Z+3, r26	; 0x03
    ff1c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    ff20:	37 c0       	rjmp	.+110    	; 0xff90 <__DATA_REGION_LENGTH__+0x90>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    ff22:	fc 01       	movw	r30, r24
    ff24:	80 81       	ld	r24, Z
    ff26:	88 23       	and	r24, r24
    ff28:	51 f3       	breq	.-44     	; 0xfefe <ls+0x44>
    ff2a:	67 ef       	ldi	r22, 0xF7	; 247
    ff2c:	72 e1       	ldi	r23, 0x12	; 18
    ff2e:	c7 01       	movw	r24, r14
    ff30:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
    ff34:	89 2b       	or	r24, r25
    ff36:	19 f7       	brne	.-58     	; 0xfefe <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    ff38:	b7 01       	movw	r22, r14
    ff3a:	c8 01       	movw	r24, r16
    ff3c:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <strcpy>
    }
    len = strlen(fullpath);
    ff40:	f8 01       	movw	r30, r16
    ff42:	01 90       	ld	r0, Z+
    ff44:	00 20       	and	r0, r0
    ff46:	e9 f7       	brne	.-6      	; 0xff42 <__DATA_REGION_LENGTH__+0x42>
    ff48:	31 97       	sbiw	r30, 0x01	; 1
    ff4a:	1f 01       	movw	r2, r30
    ff4c:	20 1a       	sub	r2, r16
    ff4e:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
    ff50:	ed b7       	in	r30, 0x3d	; 61
    ff52:	fe b7       	in	r31, 0x3e	; 62
    ff54:	15 83       	std	Z+5, r17	; 0x05
    ff56:	04 83       	std	Z+4, r16	; 0x04
    ff58:	80 e3       	ldi	r24, 0x30	; 48
    ff5a:	9c e0       	ldi	r25, 0x0C	; 12
    ff5c:	a0 e0       	ldi	r26, 0x00	; 0
    ff5e:	81 83       	std	Z+1, r24	; 0x01
    ff60:	92 83       	std	Z+2, r25	; 0x02
    ff62:	a3 83       	std	Z+3, r26	; 0x03
    ff64:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    if (stat(fullpath, &st))
    ff68:	be 01       	movw	r22, r28
    ff6a:	6a 5f       	subi	r22, 0xFA	; 250
    ff6c:	7e 4f       	sbci	r23, 0xFE	; 254
    ff6e:	c8 01       	movw	r24, r16
    ff70:	1f d8       	rcall	.-4034   	; 0xefb0 <stat>
    ff72:	7c 01       	movw	r14, r24
    ff74:	89 2b       	or	r24, r25
    ff76:	79 f0       	breq	.+30     	; 0xff96 <__DATA_REGION_LENGTH__+0x96>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    ff78:	ed b7       	in	r30, 0x3d	; 61
    ff7a:	fe b7       	in	r31, 0x3e	; 62
    ff7c:	15 83       	std	Z+5, r17	; 0x05
    ff7e:	04 83       	std	Z+4, r16	; 0x04
    ff80:	8a e1       	ldi	r24, 0x1A	; 26
    ff82:	9c e0       	ldi	r25, 0x0C	; 12
    ff84:	a0 e0       	ldi	r26, 0x00	; 0
    ff86:	81 83       	std	Z+1, r24	; 0x01
    ff88:	92 83       	std	Z+2, r25	; 0x02
    ff8a:	a3 83       	std	Z+3, r26	; 0x03
    ff8c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(0);
    ff90:	e1 2c       	mov	r14, r1
    ff92:	f1 2c       	mov	r15, r1
    ff94:	8c c0       	rjmp	.+280    	; 0x100ae <__EEPROM_REGION_LENGTH__+0xae>
    }

    switch (st.st_mode & S_IFMT)
    ff96:	c2 5f       	subi	r28, 0xF2	; 242
    ff98:	de 4f       	sbci	r29, 0xFE	; 254
    ff9a:	88 81       	ld	r24, Y
    ff9c:	99 81       	ldd	r25, Y+1	; 0x01
    ff9e:	aa 81       	ldd	r26, Y+2	; 0x02
    ffa0:	bb 81       	ldd	r27, Y+3	; 0x03
    ffa2:	ce 50       	subi	r28, 0x0E	; 14
    ffa4:	d1 40       	sbci	r29, 0x01	; 1
    ffa6:	88 27       	eor	r24, r24
    ffa8:	90 7f       	andi	r25, 0xF0	; 240
    ffaa:	aa 27       	eor	r26, r26
    ffac:	bb 27       	eor	r27, r27
    ffae:	81 15       	cp	r24, r1
    ffb0:	f0 e4       	ldi	r31, 0x40	; 64
    ffb2:	9f 07       	cpc	r25, r31
    ffb4:	a1 05       	cpc	r26, r1
    ffb6:	b1 05       	cpc	r27, r1
    ffb8:	59 f0       	breq	.+22     	; 0xffd0 <__DATA_REGION_LENGTH__+0xd0>
    ffba:	81 15       	cp	r24, r1
    ffbc:	90 48       	sbci	r25, 0x80	; 128
    ffbe:	a1 05       	cpc	r26, r1
    ffc0:	b1 05       	cpc	r27, r1
    ffc2:	09 f0       	breq	.+2      	; 0xffc6 <__DATA_REGION_LENGTH__+0xc6>
    ffc4:	66 c0       	rjmp	.+204    	; 0x10092 <__EEPROM_REGION_LENGTH__+0x92>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
    ffc6:	b4 01       	movw	r22, r8
    ffc8:	c8 01       	movw	r24, r16
    ffca:	bc de       	rcall	.-648    	; 0xfd44 <ls_info>
    ffcc:	7c 01       	movw	r14, r24
            break;
    ffce:	63 c0       	rjmp	.+198    	; 0x10096 <__EEPROM_REGION_LENGTH__+0x96>
        case S_IFDIR:
            dirp = opendir(fullpath);
    ffd0:	c8 01       	movw	r24, r16
    ffd2:	0e 94 a8 76 	call	0xed50	; 0xed50 <opendir>
    ffd6:	5c 01       	movw	r10, r24
            if(!dirp)
    ffd8:	89 2b       	or	r24, r25
    ffda:	81 f0       	breq	.+32     	; 0xfffc <__DATA_REGION_LENGTH__+0xfc>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
    ffdc:	e1 2c       	mov	r14, r1
    ffde:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
    ffe0:	c8 01       	movw	r24, r16
    ffe2:	82 0d       	add	r24, r2
    ffe4:	93 1d       	adc	r25, r3
    ffe6:	ca 5c       	subi	r28, 0xCA	; 202
    ffe8:	de 4f       	sbci	r29, 0xFE	; 254
    ffea:	99 83       	std	Y+1, r25	; 0x01
    ffec:	88 83       	st	Y, r24
    ffee:	c6 53       	subi	r28, 0x36	; 54
    fff0:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    fff2:	87 ee       	ldi	r24, 0xE7	; 231
    fff4:	9b e0       	ldi	r25, 0x0B	; 11
    fff6:	2c 01       	movw	r4, r24
    fff8:	61 2c       	mov	r6, r1
    fffa:	24 c0       	rjmp	.+72     	; 0x10044 <__EEPROM_REGION_LENGTH__+0x44>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
    fffc:	8a e0       	ldi	r24, 0x0A	; 10
    fffe:	9c e0       	ldi	r25, 0x0C	; 12
   10000:	a0 e0       	ldi	r26, 0x00	; 0
   10002:	ed b7       	in	r30, 0x3d	; 61
   10004:	fe b7       	in	r31, 0x3e	; 62
   10006:	81 83       	std	Z+1, r24	; 0x01
   10008:	92 83       	std	Z+2, r25	; 0x02
   1000a:	a3 83       	std	Z+3, r26	; 0x03
   1000c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                return(0);
   10010:	4e c0       	rjmp	.+156    	; 0x100ae <__EEPROM_REGION_LENGTH__+0xae>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   10012:	f6 01       	movw	r30, r12
   10014:	80 81       	ld	r24, Z
   10016:	88 23       	and	r24, r24
   10018:	d9 f0       	breq	.+54     	; 0x10050 <__EEPROM_REGION_LENGTH__+0x50>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   1001a:	f6 01       	movw	r30, r12
   1001c:	01 90       	ld	r0, Z+
   1001e:	00 20       	and	r0, r0
   10020:	e9 f7       	brne	.-6      	; 0x1001c <__EEPROM_REGION_LENGTH__+0x1c>
   10022:	31 97       	sbiw	r30, 0x01	; 1
   10024:	ec 19       	sub	r30, r12
   10026:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10028:	e2 0d       	add	r30, r2
   1002a:	f3 1d       	adc	r31, r3
   1002c:	ef 3f       	cpi	r30, 0xFF	; 255
   1002e:	f1 05       	cpc	r31, r1
   10030:	9c f0       	brlt	.+38     	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10032:	ed b7       	in	r30, 0x3d	; 61
   10034:	fe b7       	in	r31, 0x3e	; 62
   10036:	d5 82       	std	Z+5, r13	; 0x05
   10038:	c4 82       	std	Z+4, r12	; 0x04
   1003a:	41 82       	std	Z+1, r4	; 0x01
   1003c:	52 82       	std	Z+2, r5	; 0x02
   1003e:	63 82       	std	Z+3, r6	; 0x03
   10040:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   10044:	c5 01       	movw	r24, r10
   10046:	0e 94 c6 76 	call	0xed8c	; 0xed8c <readdir>
   1004a:	6c 01       	movw	r12, r24
   1004c:	89 2b       	or	r24, r25
   1004e:	09 f7       	brne	.-62     	; 0x10012 <__EEPROM_REGION_LENGTH__+0x12>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10050:	c5 01       	movw	r24, r10
   10052:	0e 94 8d 76 	call	0xed1a	; 0xed1a <closedir>
            break;
   10056:	1f c0       	rjmp	.+62     	; 0x10096 <__EEPROM_REGION_LENGTH__+0x96>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10058:	66 ea       	ldi	r22, 0xA6	; 166
   1005a:	78 e0       	ldi	r23, 0x08	; 8
   1005c:	c8 01       	movw	r24, r16
   1005e:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   10062:	89 2b       	or	r24, r25
   10064:	29 f4       	brne	.+10     	; 0x10070 <__EEPROM_REGION_LENGTH__+0x70>
                {
                    strcat(fullpath,"/");
   10066:	66 ea       	ldi	r22, 0xA6	; 166
   10068:	78 e0       	ldi	r23, 0x08	; 8
   1006a:	c8 01       	movw	r24, r16
   1006c:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
                }
                strcat(fullpath,de->d_name);
   10070:	b6 01       	movw	r22, r12
   10072:	c8 01       	movw	r24, r16
   10074:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
                files +=ls_info(fullpath,verbose);
   10078:	b4 01       	movw	r22, r8
   1007a:	c8 01       	movw	r24, r16
   1007c:	63 de       	rcall	.-826    	; 0xfd44 <ls_info>
   1007e:	e8 0e       	add	r14, r24
   10080:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   10082:	ca 5c       	subi	r28, 0xCA	; 202
   10084:	de 4f       	sbci	r29, 0xFE	; 254
   10086:	e8 81       	ld	r30, Y
   10088:	f9 81       	ldd	r31, Y+1	; 0x01
   1008a:	c6 53       	subi	r28, 0x36	; 54
   1008c:	d1 40       	sbci	r29, 0x01	; 1
   1008e:	10 82       	st	Z, r1
   10090:	d9 cf       	rjmp	.-78     	; 0x10044 <__EEPROM_REGION_LENGTH__+0x44>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10092:	e1 2c       	mov	r14, r1
   10094:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   10096:	ed b7       	in	r30, 0x3d	; 61
   10098:	fe b7       	in	r31, 0x3e	; 62
   1009a:	f5 82       	std	Z+5, r15	; 0x05
   1009c:	e4 82       	std	Z+4, r14	; 0x04
   1009e:	8c ed       	ldi	r24, 0xDC	; 220
   100a0:	9b e0       	ldi	r25, 0x0B	; 11
   100a2:	a0 e0       	ldi	r26, 0x00	; 0
   100a4:	81 83       	std	Z+1, r24	; 0x01
   100a6:	92 83       	std	Z+2, r25	; 0x02
   100a8:	a3 83       	std	Z+3, r26	; 0x03
   100aa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(files);
}
   100ae:	c7 01       	movw	r24, r14
   100b0:	c9 5c       	subi	r28, 0xC9	; 201
   100b2:	de 4f       	sbci	r29, 0xFE	; 254
   100b4:	0f b6       	in	r0, 0x3f	; 63
   100b6:	f8 94       	cli
   100b8:	de bf       	out	0x3e, r29	; 62
   100ba:	0f be       	out	0x3f, r0	; 63
   100bc:	cd bf       	out	0x3d, r28	; 61
   100be:	df 91       	pop	r29
   100c0:	cf 91       	pop	r28
   100c2:	1f 91       	pop	r17
   100c4:	0f 91       	pop	r16
   100c6:	ff 90       	pop	r15
   100c8:	ef 90       	pop	r14
   100ca:	df 90       	pop	r13
   100cc:	cf 90       	pop	r12
   100ce:	bf 90       	pop	r11
   100d0:	af 90       	pop	r10
   100d2:	9f 90       	pop	r9
   100d4:	8f 90       	pop	r8
   100d6:	6f 90       	pop	r6
   100d8:	5f 90       	pop	r5
   100da:	4f 90       	pop	r4
   100dc:	3f 90       	pop	r3
   100de:	2f 90       	pop	r2
   100e0:	08 95       	ret

000100e2 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   100e2:	a7 e0       	ldi	r26, 0x07	; 7
   100e4:	b1 e0       	ldi	r27, 0x01	; 1
   100e6:	e7 e7       	ldi	r30, 0x77	; 119
   100e8:	f0 e8       	ldi	r31, 0x80	; 128
   100ea:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   100ee:	fb 01       	movw	r30, r22
   100f0:	c0 80       	ld	r12, Z
   100f2:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   100f4:	c1 14       	cp	r12, r1
   100f6:	d1 04       	cpc	r13, r1
   100f8:	09 f4       	brne	.+2      	; 0x100fc <posix_tests+0x1a>
   100fa:	9a c1       	rjmp	.+820    	; 0x10430 <posix_tests+0x34e>
   100fc:	2b 01       	movw	r4, r22
   100fe:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   10100:	6e eb       	ldi	r22, 0xBE	; 190
   10102:	7b e0       	ldi	r23, 0x0B	; 11
   10104:	c6 01       	movw	r24, r12
   10106:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1010a:	89 2b       	or	r24, r25
   1010c:	a9 f0       	breq	.+42     	; 0x10138 <posix_tests+0x56>
    {
        ptr = argv[ind++];
   1010e:	f2 01       	movw	r30, r4
   10110:	c2 80       	ldd	r12, Z+2	; 0x02
   10112:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10114:	c1 14       	cp	r12, r1
   10116:	d1 04       	cpc	r13, r1
   10118:	21 f4       	brne	.+8      	; 0x10122 <posix_tests+0x40>
        {
            posix_help(1);
   1011a:	81 e0       	ldi	r24, 0x01	; 1
   1011c:	90 e0       	ldi	r25, 0x00	; 0
   1011e:	6f dc       	rcall	.-1826   	; 0xf9fe <posix_help>
   10120:	28 c1       	rjmp	.+592    	; 0x10372 <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10122:	63 e7       	ldi	r22, 0x73	; 115
   10124:	76 e1       	ldi	r23, 0x16	; 22
   10126:	c6 01       	movw	r24, r12
   10128:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1012c:	89 2b       	or	r24, r25
   1012e:	a9 f7       	brne	.-22     	; 0x1011a <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10130:	22 e0       	ldi	r18, 0x02	; 2
   10132:	62 2e       	mov	r6, r18
   10134:	71 2c       	mov	r7, r1
   10136:	03 c0       	rjmp	.+6      	; 0x1013e <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10138:	66 24       	eor	r6, r6
   1013a:	63 94       	inc	r6
   1013c:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1013e:	73 01       	movw	r14, r6
   10140:	ff ef       	ldi	r31, 0xFF	; 255
   10142:	ef 1a       	sub	r14, r31
   10144:	ff 0a       	sbc	r15, r31
   10146:	98 01       	movw	r18, r16
   10148:	a7 01       	movw	r20, r14
   1014a:	64 ec       	ldi	r22, 0xC4	; 196
   1014c:	7b e0       	ldi	r23, 0x0B	; 11
   1014e:	c6 01       	movw	r24, r12
   10150:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   10154:	89 2b       	or	r24, r25
   10156:	a1 f1       	breq	.+104    	; 0x101c0 <posix_tests+0xde>
   10158:	73 01       	movw	r14, r6
   1015a:	ee 0c       	add	r14, r14
   1015c:	ff 1c       	adc	r15, r15
   1015e:	e4 0c       	add	r14, r4
   10160:	f5 1c       	adc	r15, r5
   10162:	57 01       	movw	r10, r14
   10164:	47 01       	movw	r8, r14
   10166:	63 01       	movw	r12, r6
   10168:	41 2c       	mov	r4, r1
   1016a:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1016c:	c0 16       	cp	r12, r16
   1016e:	d1 06       	cpc	r13, r17
   10170:	1c f5       	brge	.+70     	; 0x101b8 <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   10172:	68 ec       	ldi	r22, 0xC8	; 200
   10174:	7b e0       	ldi	r23, 0x0B	; 11
   10176:	f4 01       	movw	r30, r8
   10178:	81 91       	ld	r24, Z+
   1017a:	91 91       	ld	r25, Z+
   1017c:	4f 01       	movw	r8, r30
   1017e:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   10182:	89 2b       	or	r24, r25
   10184:	19 f0       	breq	.+6      	; 0x1018c <posix_tests+0xaa>
                page = 1;
   10186:	44 24       	eor	r4, r4
   10188:	43 94       	inc	r4
   1018a:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1018c:	ff ef       	ldi	r31, 0xFF	; 255
   1018e:	cf 1a       	sub	r12, r31
   10190:	df 0a       	sbc	r13, r31
   10192:	ec cf       	rjmp	.-40     	; 0x1016c <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10194:	68 ec       	ldi	r22, 0xC8	; 200
   10196:	7b e0       	ldi	r23, 0x0B	; 11
   10198:	f5 01       	movw	r30, r10
   1019a:	81 91       	ld	r24, Z+
   1019c:	91 91       	ld	r25, Z+
   1019e:	5f 01       	movw	r10, r30
   101a0:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   101a4:	89 2b       	or	r24, r25
   101a6:	29 f4       	brne	.+10     	; 0x101b2 <posix_tests+0xd0>
                cat(argv[ind], page);
   101a8:	b2 01       	movw	r22, r4
   101aa:	f7 01       	movw	r30, r14
   101ac:	80 81       	ld	r24, Z
   101ae:	91 81       	ldd	r25, Z+1	; 0x01
   101b0:	5d dd       	rcall	.-1350   	; 0xfc6c <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   101b2:	ff ef       	ldi	r31, 0xFF	; 255
   101b4:	6f 1a       	sub	r6, r31
   101b6:	7f 0a       	sbc	r7, r31
   101b8:	60 16       	cp	r6, r16
   101ba:	71 06       	cpc	r7, r17
   101bc:	5c f3       	brlt	.-42     	; 0x10194 <posix_tests+0xb2>
   101be:	d9 c0       	rjmp	.+434    	; 0x10372 <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   101c0:	53 01       	movw	r10, r6
   101c2:	82 e0       	ldi	r24, 0x02	; 2
   101c4:	a8 0e       	add	r10, r24
   101c6:	b1 1c       	adc	r11, r1
   101c8:	98 01       	movw	r18, r16
   101ca:	a5 01       	movw	r20, r10
   101cc:	6b ec       	ldi	r22, 0xCB	; 203
   101ce:	7b e0       	ldi	r23, 0x0B	; 11
   101d0:	c6 01       	movw	r24, r12
   101d2:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   101d6:	89 2b       	or	r24, r25
   101d8:	59 f0       	breq	.+22     	; 0x101f0 <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   101da:	f3 01       	movw	r30, r6
   101dc:	ee 0f       	add	r30, r30
   101de:	ff 1f       	adc	r31, r31
   101e0:	e4 0d       	add	r30, r4
   101e2:	f5 1d       	adc	r31, r5
   101e4:	62 81       	ldd	r22, Z+2	; 0x02
   101e6:	73 81       	ldd	r23, Z+3	; 0x03
   101e8:	80 81       	ld	r24, Z
   101ea:	91 81       	ldd	r25, Z+1	; 0x01
   101ec:	29 dc       	rcall	.-1966   	; 0xfa40 <copy>
   101ee:	c1 c0       	rjmp	.+386    	; 0x10372 <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   101f0:	98 01       	movw	r18, r16
   101f2:	a7 01       	movw	r20, r14
   101f4:	60 ed       	ldi	r22, 0xD0	; 208
   101f6:	7b e0       	ldi	r23, 0x0B	; 11
   101f8:	c6 01       	movw	r24, r12
   101fa:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   101fe:	89 2b       	or	r24, r25
   10200:	b9 f0       	breq	.+46     	; 0x10230 <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   10202:	73 01       	movw	r14, r6
   10204:	ee 0c       	add	r14, r14
   10206:	ff 1c       	adc	r15, r15
   10208:	e4 0c       	add	r14, r4
   1020a:	f5 1c       	adc	r15, r5
   1020c:	f7 01       	movw	r30, r14
   1020e:	80 81       	ld	r24, Z
   10210:	91 81       	ldd	r25, Z+1	; 0x01
   10212:	0e 94 b2 75 	call	0xeb64	; 0xeb64 <chdir>
   10216:	89 2b       	or	r24, r25
   10218:	09 f4       	brne	.+2      	; 0x1021c <posix_tests+0x13a>
   1021a:	ab c0       	rjmp	.+342    	; 0x10372 <posix_tests+0x290>
            printf("chdir %s failed\n", argv[ind]);
   1021c:	f7 01       	movw	r30, r14
   1021e:	80 81       	ld	r24, Z
   10220:	91 81       	ldd	r25, Z+1	; 0x01
   10222:	ed b7       	in	r30, 0x3d	; 61
   10224:	fe b7       	in	r31, 0x3e	; 62
   10226:	95 83       	std	Z+5, r25	; 0x05
   10228:	84 83       	std	Z+4, r24	; 0x04
   1022a:	8f e6       	ldi	r24, 0x6F	; 111
   1022c:	9d e0       	ldi	r25, 0x0D	; 13
   1022e:	9b c0       	rjmp	.+310    	; 0x10366 <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10230:	98 01       	movw	r18, r16
   10232:	a3 01       	movw	r20, r6
   10234:	68 ed       	ldi	r22, 0xD8	; 216
   10236:	78 e0       	ldi	r23, 0x08	; 8
   10238:	c6 01       	movw	r24, r12
   1023a:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1023e:	4c 01       	movw	r8, r24
   10240:	89 2b       	or	r24, r25
   10242:	69 f1       	breq	.+90     	; 0x1029e <posix_tests+0x1bc>
   10244:	73 01       	movw	r14, r6
   10246:	ee 0c       	add	r14, r14
   10248:	ff 1c       	adc	r15, r15
   1024a:	e4 0c       	add	r14, r4
   1024c:	f5 1c       	adc	r15, r5
   1024e:	c1 2c       	mov	r12, r1
   10250:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10252:	c6 01       	movw	r24, r12
   10254:	86 0d       	add	r24, r6
   10256:	97 1d       	adc	r25, r7
   10258:	80 17       	cp	r24, r16
   1025a:	91 07       	cpc	r25, r17
   1025c:	b4 f4       	brge	.+44     	; 0x1028a <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   1025e:	63 ed       	ldi	r22, 0xD3	; 211
   10260:	7b e0       	ldi	r23, 0x0B	; 11
   10262:	f7 01       	movw	r30, r14
   10264:	80 81       	ld	r24, Z
   10266:	91 81       	ldd	r25, Z+1	; 0x01
   10268:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1026c:	89 2b       	or	r24, r25
   1026e:	31 f4       	brne	.+12     	; 0x1027c <posix_tests+0x19a>
                ls(argv[i],1);
   10270:	61 e0       	ldi	r22, 0x01	; 1
   10272:	70 e0       	ldi	r23, 0x00	; 0
   10274:	f7 01       	movw	r30, r14
   10276:	80 81       	ld	r24, Z
   10278:	91 81       	ldd	r25, Z+1	; 0x01
   1027a:	1f de       	rcall	.-962    	; 0xfeba <ls>
            ++args;
   1027c:	ff ef       	ldi	r31, 0xFF	; 255
   1027e:	cf 1a       	sub	r12, r31
   10280:	df 0a       	sbc	r13, r31
   10282:	82 e0       	ldi	r24, 0x02	; 2
   10284:	e8 0e       	add	r14, r24
   10286:	f1 1c       	adc	r15, r1
   10288:	e4 cf       	rjmp	.-56     	; 0x10252 <posix_tests+0x170>
        }
        if(!args)
   1028a:	c1 14       	cp	r12, r1
   1028c:	d1 04       	cpc	r13, r1
   1028e:	09 f0       	breq	.+2      	; 0x10292 <posix_tests+0x1b0>
   10290:	70 c0       	rjmp	.+224    	; 0x10372 <posix_tests+0x290>
        {
            ls("",1);
   10292:	61 e0       	ldi	r22, 0x01	; 1
   10294:	70 e0       	ldi	r23, 0x00	; 0
   10296:	8d e2       	ldi	r24, 0x2D	; 45
   10298:	9c e0       	ldi	r25, 0x0C	; 12
   1029a:	0f de       	rcall	.-994    	; 0xfeba <ls>
   1029c:	6a c0       	rjmp	.+212    	; 0x10372 <posix_tests+0x290>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1029e:	98 01       	movw	r18, r16
   102a0:	a7 01       	movw	r20, r14
   102a2:	66 ed       	ldi	r22, 0xD6	; 214
   102a4:	7b e0       	ldi	r23, 0x0B	; 11
   102a6:	c6 01       	movw	r24, r12
   102a8:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   102ac:	89 2b       	or	r24, r25
   102ae:	71 f1       	breq	.+92     	; 0x1030c <posix_tests+0x22a>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   102b0:	e0 16       	cp	r14, r16
   102b2:	f1 06       	cpc	r15, r17
   102b4:	7c f4       	brge	.+30     	; 0x102d4 <posix_tests+0x1f2>
        {
            mode = strtol(argv[ind+1],NULL,8);
   102b6:	ee 0c       	add	r14, r14
   102b8:	ff 1c       	adc	r15, r15
   102ba:	f2 01       	movw	r30, r4
   102bc:	ee 0d       	add	r30, r14
   102be:	ff 1d       	adc	r31, r15
   102c0:	48 e0       	ldi	r20, 0x08	; 8
   102c2:	50 e0       	ldi	r21, 0x00	; 0
   102c4:	60 e0       	ldi	r22, 0x00	; 0
   102c6:	70 e0       	ldi	r23, 0x00	; 0
   102c8:	80 81       	ld	r24, Z
   102ca:	91 81       	ldd	r25, Z+1	; 0x01
   102cc:	0e 94 ca 44 	call	0x8994	; 0x8994 <strtol>
   102d0:	ab 01       	movw	r20, r22
   102d2:	02 c0       	rjmp	.+4      	; 0x102d8 <posix_tests+0x1f6>
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   102d4:	4f ef       	ldi	r20, 0xFF	; 255
   102d6:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   102d8:	73 01       	movw	r14, r6
   102da:	ee 0c       	add	r14, r14
   102dc:	ff 1c       	adc	r15, r15
   102de:	e4 0c       	add	r14, r4
   102e0:	f5 1c       	adc	r15, r5
   102e2:	05 2e       	mov	r0, r21
   102e4:	00 0c       	add	r0, r0
   102e6:	66 0b       	sbc	r22, r22
   102e8:	77 0b       	sbc	r23, r23
   102ea:	f7 01       	movw	r30, r14
   102ec:	80 81       	ld	r24, Z
   102ee:	91 81       	ldd	r25, Z+1	; 0x01
   102f0:	0e 94 1f 76 	call	0xec3e	; 0xec3e <mkdir>
   102f4:	89 2b       	or	r24, r25
   102f6:	e9 f1       	breq	.+122    	; 0x10372 <posix_tests+0x290>
        {
            printf("mkdir %s failed\n", argv[ind]);
   102f8:	f7 01       	movw	r30, r14
   102fa:	80 81       	ld	r24, Z
   102fc:	91 81       	ldd	r25, Z+1	; 0x01
   102fe:	ed b7       	in	r30, 0x3d	; 61
   10300:	fe b7       	in	r31, 0x3e	; 62
   10302:	95 83       	std	Z+5, r25	; 0x05
   10304:	84 83       	std	Z+4, r24	; 0x04
   10306:	8e e5       	ldi	r24, 0x5E	; 94
   10308:	9d e0       	ldi	r25, 0x0D	; 13
   1030a:	b4 c0       	rjmp	.+360    	; 0x10474 <posix_tests+0x392>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1030c:	98 01       	movw	r18, r16
   1030e:	a7 01       	movw	r20, r14
   10310:	6c ed       	ldi	r22, 0xDC	; 220
   10312:	7b e0       	ldi	r23, 0x0B	; 11
   10314:	c6 01       	movw	r24, r12
   10316:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1031a:	89 2b       	or	r24, r25
   1031c:	71 f0       	breq	.+28     	; 0x1033a <posix_tests+0x258>
    {
        setpage(atoi(argv[ind]));
   1031e:	66 0c       	add	r6, r6
   10320:	77 1c       	adc	r7, r7
   10322:	f2 01       	movw	r30, r4
   10324:	e6 0d       	add	r30, r6
   10326:	f7 1d       	adc	r31, r7
   10328:	80 81       	ld	r24, Z
   1032a:	91 81       	ldd	r25, Z+1	; 0x01
   1032c:	0e 94 28 45 	call	0x8a50	; 0x8a50 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10330:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10334:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10338:	1c c0       	rjmp	.+56     	; 0x10372 <posix_tests+0x290>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1033a:	98 01       	movw	r18, r16
   1033c:	a3 01       	movw	r20, r6
   1033e:	61 ee       	ldi	r22, 0xE1	; 225
   10340:	7b e0       	ldi	r23, 0x0B	; 11
   10342:	c6 01       	movw	r24, r12
   10344:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   10348:	4c 01       	movw	r8, r24
   1034a:	89 2b       	or	r24, r25
   1034c:	b1 f0       	breq	.+44     	; 0x1037a <posix_tests+0x298>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1034e:	6e ef       	ldi	r22, 0xFE	; 254
   10350:	70 e0       	ldi	r23, 0x00	; 0
   10352:	ce 01       	movw	r24, r28
   10354:	08 96       	adiw	r24, 0x08	; 8
   10356:	0e 94 fa 75 	call	0xebf4	; 0xebf4 <getcwd>
   1035a:	ed b7       	in	r30, 0x3d	; 61
   1035c:	fe b7       	in	r31, 0x3e	; 62
   1035e:	95 83       	std	Z+5, r25	; 0x05
   10360:	84 83       	std	Z+4, r24	; 0x04
   10362:	8a e5       	ldi	r24, 0x5A	; 90
   10364:	9d e0       	ldi	r25, 0x0D	; 13
   10366:	a0 e0       	ldi	r26, 0x00	; 0
   10368:	81 83       	std	Z+1, r24	; 0x01
   1036a:	92 83       	std	Z+2, r25	; 0x02
   1036c:	a3 83       	std	Z+3, r26	; 0x03
   1036e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(1);
   10372:	88 24       	eor	r8, r8
   10374:	83 94       	inc	r8
   10376:	91 2c       	mov	r9, r1
   10378:	83 c0       	rjmp	.+262    	; 0x10480 <posix_tests+0x39e>
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1037a:	98 01       	movw	r18, r16
   1037c:	a5 01       	movw	r20, r10
   1037e:	65 ee       	ldi	r22, 0xE5	; 229
   10380:	7b e0       	ldi	r23, 0x0B	; 11
   10382:	c6 01       	movw	r24, r12
   10384:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   10388:	89 2b       	or	r24, r25
   1038a:	61 f1       	breq	.+88     	; 0x103e4 <posix_tests+0x302>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   1038c:	66 0c       	add	r6, r6
   1038e:	77 1c       	adc	r7, r7
   10390:	82 01       	movw	r16, r4
   10392:	06 0d       	add	r16, r6
   10394:	17 1d       	adc	r17, r7
   10396:	f2 e0       	ldi	r31, 0x02	; 2
   10398:	6f 0e       	add	r6, r31
   1039a:	71 1c       	adc	r7, r1
   1039c:	72 01       	movw	r14, r4
   1039e:	e6 0c       	add	r14, r6
   103a0:	f7 1c       	adc	r15, r7
   103a2:	f7 01       	movw	r30, r14
   103a4:	60 81       	ld	r22, Z
   103a6:	71 81       	ldd	r23, Z+1	; 0x01
   103a8:	f8 01       	movw	r30, r16
   103aa:	80 81       	ld	r24, Z
   103ac:	91 81       	ldd	r25, Z+1	; 0x01
   103ae:	0e 94 4d 76 	call	0xec9a	; 0xec9a <rename>
   103b2:	89 2b       	or	r24, r25
   103b4:	f1 f2       	breq	.-68     	; 0x10372 <posix_tests+0x290>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   103b6:	f7 01       	movw	r30, r14
   103b8:	80 81       	ld	r24, Z
   103ba:	91 81       	ldd	r25, Z+1	; 0x01
   103bc:	ed b7       	in	r30, 0x3d	; 61
   103be:	fe b7       	in	r31, 0x3e	; 62
   103c0:	97 83       	std	Z+7, r25	; 0x07
   103c2:	86 83       	std	Z+6, r24	; 0x06
   103c4:	f8 01       	movw	r30, r16
   103c6:	80 81       	ld	r24, Z
   103c8:	91 81       	ldd	r25, Z+1	; 0x01
   103ca:	ed b7       	in	r30, 0x3d	; 61
   103cc:	fe b7       	in	r31, 0x3e	; 62
   103ce:	95 83       	std	Z+5, r25	; 0x05
   103d0:	84 83       	std	Z+4, r24	; 0x04
   103d2:	89 e4       	ldi	r24, 0x49	; 73
   103d4:	9d e0       	ldi	r25, 0x0D	; 13
   103d6:	a0 e0       	ldi	r26, 0x00	; 0
   103d8:	81 83       	std	Z+1, r24	; 0x01
   103da:	92 83       	std	Z+2, r25	; 0x02
   103dc:	a3 83       	std	Z+3, r26	; 0x03
   103de:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            return(0);
   103e2:	4e c0       	rjmp	.+156    	; 0x10480 <posix_tests+0x39e>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   103e4:	98 01       	movw	r18, r16
   103e6:	a7 01       	movw	r20, r14
   103e8:	6c ee       	ldi	r22, 0xEC	; 236
   103ea:	7b e0       	ldi	r23, 0x0B	; 11
   103ec:	c6 01       	movw	r24, r12
   103ee:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   103f2:	4c 01       	movw	r8, r24
   103f4:	89 2b       	or	r24, r25
   103f6:	f9 f0       	breq	.+62     	; 0x10436 <posix_tests+0x354>
    {
        if ( unlink(argv[ind]) != 0)
   103f8:	73 01       	movw	r14, r6
   103fa:	ee 0c       	add	r14, r14
   103fc:	ff 1c       	adc	r15, r15
   103fe:	e4 0c       	add	r14, r4
   10400:	f5 1c       	adc	r15, r5
   10402:	f7 01       	movw	r30, r14
   10404:	80 81       	ld	r24, Z
   10406:	91 81       	ldd	r25, Z+1	; 0x01
   10408:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <unlink>
   1040c:	89 2b       	or	r24, r25
   1040e:	09 f4       	brne	.+2      	; 0x10412 <posix_tests+0x330>
   10410:	b0 cf       	rjmp	.-160    	; 0x10372 <posix_tests+0x290>
        {
            printf("rm %s failed\n", argv[ind]);
   10412:	f7 01       	movw	r30, r14
   10414:	80 81       	ld	r24, Z
   10416:	91 81       	ldd	r25, Z+1	; 0x01
   10418:	ed b7       	in	r30, 0x3d	; 61
   1041a:	fe b7       	in	r31, 0x3e	; 62
   1041c:	95 83       	std	Z+5, r25	; 0x05
   1041e:	84 83       	std	Z+4, r24	; 0x04
   10420:	8b e3       	ldi	r24, 0x3B	; 59
   10422:	9d e0       	ldi	r25, 0x0D	; 13
   10424:	a0 e0       	ldi	r26, 0x00	; 0
   10426:	81 83       	std	Z+1, r24	; 0x01
   10428:	92 83       	std	Z+2, r25	; 0x02
   1042a:	a3 83       	std	Z+3, r26	; 0x03
   1042c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            return(0);
   10430:	81 2c       	mov	r8, r1
   10432:	91 2c       	mov	r9, r1
   10434:	25 c0       	rjmp	.+74     	; 0x10480 <posix_tests+0x39e>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10436:	98 01       	movw	r18, r16
   10438:	a7 01       	movw	r20, r14
   1043a:	6f ee       	ldi	r22, 0xEF	; 239
   1043c:	7b e0       	ldi	r23, 0x0B	; 11
   1043e:	c6 01       	movw	r24, r12
   10440:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   10444:	89 2b       	or	r24, r25
   10446:	a1 f3       	breq	.-24     	; 0x10430 <posix_tests+0x34e>
    {
        if ( rmdir(argv[ind]) != 0)
   10448:	73 01       	movw	r14, r6
   1044a:	ee 0c       	add	r14, r14
   1044c:	ff 1c       	adc	r15, r15
   1044e:	e4 0c       	add	r14, r4
   10450:	f5 1c       	adc	r15, r5
   10452:	f7 01       	movw	r30, r14
   10454:	80 81       	ld	r24, Z
   10456:	91 81       	ldd	r25, Z+1	; 0x01
   10458:	0e 94 8b 76 	call	0xed16	; 0xed16 <rmdir>
   1045c:	89 2b       	or	r24, r25
   1045e:	09 f4       	brne	.+2      	; 0x10462 <posix_tests+0x380>
   10460:	88 cf       	rjmp	.-240    	; 0x10372 <posix_tests+0x290>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10462:	f7 01       	movw	r30, r14
   10464:	80 81       	ld	r24, Z
   10466:	91 81       	ldd	r25, Z+1	; 0x01
   10468:	ed b7       	in	r30, 0x3d	; 61
   1046a:	fe b7       	in	r31, 0x3e	; 62
   1046c:	95 83       	std	Z+5, r25	; 0x05
   1046e:	84 83       	std	Z+4, r24	; 0x04
   10470:	8a e2       	ldi	r24, 0x2A	; 42
   10472:	9d e0       	ldi	r25, 0x0D	; 13
   10474:	a0 e0       	ldi	r26, 0x00	; 0
   10476:	81 83       	std	Z+1, r24	; 0x01
   10478:	92 83       	std	Z+2, r25	; 0x02
   1047a:	a3 83       	std	Z+3, r26	; 0x03
   1047c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(1);
    }
#endif

    return(0);
}
   10480:	c4 01       	movw	r24, r8
   10482:	c9 5f       	subi	r28, 0xF9	; 249
   10484:	de 4f       	sbci	r29, 0xFE	; 254
   10486:	e0 e1       	ldi	r30, 0x10	; 16
   10488:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

0001048c <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   1048c:	00 d0       	rcall	.+0      	; 0x1048e <gpib_timer_init+0x2>
   1048e:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10490:	61 e0       	ldi	r22, 0x01	; 1
   10492:	70 e0       	ldi	r23, 0x00	; 0
   10494:	82 e0       	ldi	r24, 0x02	; 2
   10496:	94 e8       	ldi	r25, 0x84	; 132
   10498:	0e 94 3d 32 	call	0x647a	; 0x647a <set_timers>
   1049c:	01 96       	adiw	r24, 0x01	; 1
   1049e:	51 f4       	brne	.+20     	; 0x104b4 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   104a0:	8c ea       	ldi	r24, 0xAC	; 172
   104a2:	9e e0       	ldi	r25, 0x0E	; 14
   104a4:	a0 e0       	ldi	r26, 0x00	; 0
   104a6:	ed b7       	in	r30, 0x3d	; 61
   104a8:	fe b7       	in	r31, 0x3e	; 62
   104aa:	81 83       	std	Z+1, r24	; 0x01
   104ac:	92 83       	std	Z+2, r25	; 0x02
   104ae:	a3 83       	std	Z+3, r26	; 0x03
   104b0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    gpib_timer_reset();
   104b4:	95 d1       	rcall	.+810    	; 0x107e0 <gpib_timer_reset>
}
   104b6:	0f 90       	pop	r0
   104b8:	0f 90       	pop	r0
   104ba:	0f 90       	pop	r0
   104bc:	08 95       	ret

000104be <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   104be:	28 2f       	mov	r18, r24
   104c0:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   104c2:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   104c4:	88 0f       	add	r24, r24
        if(mask & 1)
   104c6:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   104c8:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   104ca:	26 95       	lsr	r18
   104cc:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   104ce:	d1 f7       	brne	.-12     	; 0x104c4 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   104d0:	08 95       	ret

000104d2 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   104d2:	f5 df       	rcall	.-22     	; 0x104be <reverse_8bits>
   104d4:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   104d8:	0e 94 97 28 	call	0x512e	; 0x512e <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   104dc:	2a 9a       	sbi	0x05, 2	; 5
   104de:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   104e0:	2a 98       	cbi	0x05, 2	; 5
   104e2:	22 9a       	sbi	0x04, 2	; 4
   104e4:	08 95       	ret

000104e6 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   104e6:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <_ppr_reg>
   104ea:	e9 cf       	rjmp	.-46     	; 0x104be <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   104ec:	08 95       	ret

000104ee <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   104ee:	00 d0       	rcall	.+0      	; 0x104f0 <ppr_init+0x2>
   104f0:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   104f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   104f6:	81 ff       	sbrs	r24, 1
   104f8:	0a c0       	rjmp	.+20     	; 0x1050e <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   104fa:	89 e9       	ldi	r24, 0x99	; 153
   104fc:	9e e0       	ldi	r25, 0x0E	; 14
   104fe:	a0 e0       	ldi	r26, 0x00	; 0
   10500:	ed b7       	in	r30, 0x3d	; 61
   10502:	fe b7       	in	r31, 0x3e	; 62
   10504:	81 83       	std	Z+1, r24	; 0x01
   10506:	92 83       	std	Z+2, r25	; 0x02
   10508:	a3 83       	std	Z+3, r26	; 0x03
   1050a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
    ppr_set(0);
   1050e:	80 e0       	ldi	r24, 0x00	; 0
   10510:	e0 df       	rcall	.-64     	; 0x104d2 <ppr_set>
}
   10512:	0f 90       	pop	r0
   10514:	0f 90       	pop	r0
   10516:	0f 90       	pop	r0
   10518:	08 95       	ret

0001051a <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   1051a:	21 e0       	ldi	r18, 0x01	; 1
   1051c:	30 e0       	ldi	r19, 0x00	; 0
   1051e:	01 c0       	rjmp	.+2      	; 0x10522 <ppr_bit_set+0x8>
   10520:	22 0f       	add	r18, r18
   10522:	8a 95       	dec	r24
   10524:	ea f7       	brpl	.-6      	; 0x10520 <ppr_bit_set+0x6>
   10526:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <_ppr_reg>
   1052a:	82 2b       	or	r24, r18
   1052c:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_ppr_reg>
    ppr_set(_ppr_reg);
   10530:	d0 cf       	rjmp	.-96     	; 0x104d2 <ppr_set>
   10532:	08 95       	ret

00010534 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10534:	21 e0       	ldi	r18, 0x01	; 1
   10536:	30 e0       	ldi	r19, 0x00	; 0
   10538:	01 c0       	rjmp	.+2      	; 0x1053c <ppr_bit_clr+0x8>
   1053a:	22 0f       	add	r18, r18
   1053c:	8a 95       	dec	r24
   1053e:	ea f7       	brpl	.-6      	; 0x1053a <ppr_bit_clr+0x6>
   10540:	20 95       	com	r18
   10542:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <_ppr_reg>
   10546:	82 23       	and	r24, r18
   10548:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_ppr_reg>
    ppr_set(_ppr_reg);
   1054c:	c2 cf       	rjmp	.-124    	; 0x104d2 <ppr_set>
   1054e:	08 95       	ret

00010550 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   10550:	0f 93       	push	r16
   10552:	1f 93       	push	r17
   10554:	cf 93       	push	r28
   10556:	df 93       	push	r29
   10558:	00 d0       	rcall	.+0      	; 0x1055a <dbf_open+0xa>
   1055a:	00 d0       	rcall	.+0      	; 0x1055c <dbf_open+0xc>
   1055c:	1f 92       	push	r1
   1055e:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   10560:	0e 94 47 58 	call	0xb08e	; 0xb08e <f_open>
   10564:	ec 01       	movw	r28, r24
    if(rc)
   10566:	89 2b       	or	r24, r25
   10568:	79 f0       	breq	.+30     	; 0x10588 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   1056a:	ed b7       	in	r30, 0x3d	; 61
   1056c:	fe b7       	in	r31, 0x3e	; 62
   1056e:	15 83       	std	Z+5, r17	; 0x05
   10570:	04 83       	std	Z+4, r16	; 0x04
   10572:	88 e8       	ldi	r24, 0x88	; 136
   10574:	9e e0       	ldi	r25, 0x0E	; 14
   10576:	a0 e0       	ldi	r26, 0x00	; 0
   10578:	81 83       	std	Z+1, r24	; 0x01
   1057a:	92 83       	std	Z+2, r25	; 0x02
   1057c:	a3 83       	std	Z+3, r26	; 0x03
   1057e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        put_rc(rc);
   10582:	ce 01       	movw	r24, r28
   10584:	0e 94 21 6f 	call	0xde42	; 0xde42 <put_rc>
        return (rc);
    }
    return(0);
}
   10588:	ce 01       	movw	r24, r28
   1058a:	cd b7       	in	r28, 0x3d	; 61
   1058c:	de b7       	in	r29, 0x3e	; 62
   1058e:	25 96       	adiw	r28, 0x05	; 5
   10590:	e4 e0       	ldi	r30, 0x04	; 4
   10592:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00010596 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   10596:	cf 93       	push	r28
   10598:	df 93       	push	r29
   1059a:	00 d0       	rcall	.+0      	; 0x1059c <dbf_read+0x6>
   1059c:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   1059e:	0e 94 ff 59 	call	0xb3fe	; 0xb3fe <f_read>
   105a2:	ec 01       	movw	r28, r24
    if(rc)
   105a4:	89 2b       	or	r24, r25
   105a6:	69 f0       	breq	.+26     	; 0x105c2 <dbf_read+0x2c>
    {
        printf("Read error: ");
   105a8:	8b e7       	ldi	r24, 0x7B	; 123
   105aa:	9e e0       	ldi	r25, 0x0E	; 14
   105ac:	a0 e0       	ldi	r26, 0x00	; 0
   105ae:	ed b7       	in	r30, 0x3d	; 61
   105b0:	fe b7       	in	r31, 0x3e	; 62
   105b2:	81 83       	std	Z+1, r24	; 0x01
   105b4:	92 83       	std	Z+2, r25	; 0x02
   105b6:	a3 83       	std	Z+3, r26	; 0x03
   105b8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        put_rc(rc);
   105bc:	ce 01       	movw	r24, r28
   105be:	0e 94 21 6f 	call	0xde42	; 0xde42 <put_rc>
        return (rc);
    }
    return(0);
}
   105c2:	ce 01       	movw	r24, r28
   105c4:	cd b7       	in	r28, 0x3d	; 61
   105c6:	de b7       	in	r29, 0x3e	; 62
   105c8:	23 96       	adiw	r28, 0x03	; 3
   105ca:	e2 e0       	ldi	r30, 0x02	; 2
   105cc:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000105d0 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   105d0:	cf 93       	push	r28
   105d2:	df 93       	push	r29
   105d4:	00 d0       	rcall	.+0      	; 0x105d6 <dbf_write+0x6>
   105d6:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   105d8:	0e 94 4a 5b 	call	0xb694	; 0xb694 <f_write>
   105dc:	ec 01       	movw	r28, r24
    if(rc)
   105de:	89 2b       	or	r24, r25
   105e0:	69 f0       	breq	.+26     	; 0x105fc <dbf_write+0x2c>
    {
        printf("Write error: ");
   105e2:	8d e6       	ldi	r24, 0x6D	; 109
   105e4:	9e e0       	ldi	r25, 0x0E	; 14
   105e6:	a0 e0       	ldi	r26, 0x00	; 0
   105e8:	ed b7       	in	r30, 0x3d	; 61
   105ea:	fe b7       	in	r31, 0x3e	; 62
   105ec:	81 83       	std	Z+1, r24	; 0x01
   105ee:	92 83       	std	Z+2, r25	; 0x02
   105f0:	a3 83       	std	Z+3, r26	; 0x03
   105f2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        put_rc(rc);
   105f6:	ce 01       	movw	r24, r28
   105f8:	0e 94 21 6f 	call	0xde42	; 0xde42 <put_rc>
        return (rc);
    }
    return(0);
}
   105fc:	ce 01       	movw	r24, r28
   105fe:	cd b7       	in	r28, 0x3d	; 61
   10600:	de b7       	in	r29, 0x3e	; 62
   10602:	23 96       	adiw	r28, 0x03	; 3
   10604:	e2 e0       	ldi	r30, 0x02	; 2
   10606:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0001060a <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   1060a:	cf 93       	push	r28
   1060c:	df 93       	push	r29
   1060e:	00 d0       	rcall	.+0      	; 0x10610 <dbf_lseek+0x6>
   10610:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10612:	0e 94 0b 5f 	call	0xbe16	; 0xbe16 <f_lseek>
   10616:	ec 01       	movw	r28, r24
    if(rc)
   10618:	89 2b       	or	r24, r25
   1061a:	69 f0       	breq	.+26     	; 0x10636 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   1061c:	80 e6       	ldi	r24, 0x60	; 96
   1061e:	9e e0       	ldi	r25, 0x0E	; 14
   10620:	a0 e0       	ldi	r26, 0x00	; 0
   10622:	ed b7       	in	r30, 0x3d	; 61
   10624:	fe b7       	in	r31, 0x3e	; 62
   10626:	81 83       	std	Z+1, r24	; 0x01
   10628:	92 83       	std	Z+2, r25	; 0x02
   1062a:	a3 83       	std	Z+3, r26	; 0x03
   1062c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        put_rc(rc);
   10630:	ce 01       	movw	r24, r28
   10632:	0e 94 21 6f 	call	0xde42	; 0xde42 <put_rc>
        return (rc);
    }
    return(0);
}
   10636:	ce 01       	movw	r24, r28
   10638:	cd b7       	in	r28, 0x3d	; 61
   1063a:	de b7       	in	r29, 0x3e	; 62
   1063c:	23 96       	adiw	r28, 0x03	; 3
   1063e:	e2 e0       	ldi	r30, 0x02	; 2
   10640:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00010644 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10644:	cf 93       	push	r28
   10646:	df 93       	push	r29
   10648:	00 d0       	rcall	.+0      	; 0x1064a <dbf_close+0x6>
   1064a:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   1064c:	0e 94 61 5d 	call	0xbac2	; 0xbac2 <f_close>
   10650:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   10652:	89 2b       	or	r24, r25
   10654:	69 f0       	breq	.+26     	; 0x10670 <dbf_close+0x2c>
    {
        printf("Close error: ");
   10656:	82 e5       	ldi	r24, 0x52	; 82
   10658:	9e e0       	ldi	r25, 0x0E	; 14
   1065a:	a0 e0       	ldi	r26, 0x00	; 0
   1065c:	ed b7       	in	r30, 0x3d	; 61
   1065e:	fe b7       	in	r31, 0x3e	; 62
   10660:	81 83       	std	Z+1, r24	; 0x01
   10662:	92 83       	std	Z+2, r25	; 0x02
   10664:	a3 83       	std	Z+3, r26	; 0x03
   10666:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        put_rc(rc);
   1066a:	ce 01       	movw	r24, r28
   1066c:	0e 94 21 6f 	call	0xde42	; 0xde42 <put_rc>
        return (rc);
    }
    return(0);
}
   10670:	ce 01       	movw	r24, r28
   10672:	cd b7       	in	r28, 0x3d	; 61
   10674:	de b7       	in	r29, 0x3e	; 62
   10676:	23 96       	adiw	r28, 0x03	; 3
   10678:	e2 e0       	ldi	r30, 0x02	; 2
   1067a:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0001067e <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1067e:	a6 e2       	ldi	r26, 0x26	; 38
   10680:	b2 e0       	ldi	r27, 0x02	; 2
   10682:	e5 e4       	ldi	r30, 0x45	; 69
   10684:	f3 e8       	ldi	r31, 0x83	; 131
   10686:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
   1068a:	4a 01       	movw	r8, r20
   1068c:	5b 01       	movw	r10, r22
   1068e:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10690:	cb 5d       	subi	r28, 0xDB	; 219
   10692:	dd 4f       	sbci	r29, 0xFD	; 253
   10694:	19 82       	std	Y+1, r1	; 0x01
   10696:	18 82       	st	Y, r1
   10698:	c5 52       	subi	r28, 0x25	; 37
   1069a:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1069c:	43 e0       	ldi	r20, 0x03	; 3
   1069e:	bc 01       	movw	r22, r24
   106a0:	ce 01       	movw	r24, r28
   106a2:	01 96       	adiw	r24, 0x01	; 1
   106a4:	55 df       	rcall	.-342    	; 0x10550 <dbf_open>
    if( rc != FR_OK)
   106a6:	89 2b       	or	r24, r25
   106a8:	19 f0       	breq	.+6      	; 0x106b0 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   106aa:	81 e1       	ldi	r24, 0x11	; 17
   106ac:	90 e0       	ldi	r25, 0x00	; 0
   106ae:	2f c0       	rjmp	.+94     	; 0x1070e <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   106b0:	b5 01       	movw	r22, r10
   106b2:	a4 01       	movw	r20, r8
   106b4:	ce 01       	movw	r24, r28
   106b6:	01 96       	adiw	r24, 0x01	; 1
   106b8:	a8 df       	rcall	.-176    	; 0x1060a <dbf_lseek>
    if( rc != FR_OK)
   106ba:	89 2b       	or	r24, r25
   106bc:	59 f0       	breq	.+22     	; 0x106d4 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   106be:	85 e0       	ldi	r24, 0x05	; 5
   106c0:	90 e0       	ldi	r25, 0x00	; 0
   106c2:	f7 01       	movw	r30, r14
   106c4:	91 83       	std	Z+1, r25	; 0x01
   106c6:	80 83       	st	Z, r24
        dbf_close(&fp);
   106c8:	ce 01       	movw	r24, r28
   106ca:	01 96       	adiw	r24, 0x01	; 1
   106cc:	bb df       	rcall	.-138    	; 0x10644 <dbf_close>
        return( -1 );
   106ce:	8f ef       	ldi	r24, 0xFF	; 255
   106d0:	9f ef       	ldi	r25, 0xFF	; 255
   106d2:	27 c0       	rjmp	.+78     	; 0x10722 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   106d4:	9e 01       	movw	r18, r28
   106d6:	2b 5d       	subi	r18, 0xDB	; 219
   106d8:	3d 4f       	sbci	r19, 0xFD	; 253
   106da:	a8 01       	movw	r20, r16
   106dc:	b6 01       	movw	r22, r12
   106de:	ce 01       	movw	r24, r28
   106e0:	01 96       	adiw	r24, 0x01	; 1
   106e2:	59 df       	rcall	.-334    	; 0x10596 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   106e4:	89 2b       	or	r24, r25
   106e6:	49 f4       	brne	.+18     	; 0x106fa <dbf_open_read+0x7c>
   106e8:	cb 5d       	subi	r28, 0xDB	; 219
   106ea:	dd 4f       	sbci	r29, 0xFD	; 253
   106ec:	88 81       	ld	r24, Y
   106ee:	99 81       	ldd	r25, Y+1	; 0x01
   106f0:	c5 52       	subi	r28, 0x25	; 37
   106f2:	d2 40       	sbci	r29, 0x02	; 2
   106f4:	08 17       	cp	r16, r24
   106f6:	19 07       	cpc	r17, r25
   106f8:	19 f0       	breq	.+6      	; 0x10700 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   106fa:	81 e0       	ldi	r24, 0x01	; 1
   106fc:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   106fe:	e1 cf       	rjmp	.-62     	; 0x106c2 <dbf_open_read+0x44>
   10700:	ce 01       	movw	r24, r28
   10702:	01 96       	adiw	r24, 0x01	; 1
   10704:	9f df       	rcall	.-194    	; 0x10644 <dbf_close>
    if( rc != FR_OK)
   10706:	89 2b       	or	r24, r25
   10708:	31 f0       	breq	.+12     	; 0x10716 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   1070a:	80 e1       	ldi	r24, 0x10	; 16
   1070c:	90 e0       	ldi	r25, 0x00	; 0
   1070e:	f7 01       	movw	r30, r14
   10710:	91 83       	std	Z+1, r25	; 0x01
   10712:	80 83       	st	Z, r24
   10714:	dc cf       	rjmp	.-72     	; 0x106ce <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10716:	cb 5d       	subi	r28, 0xDB	; 219
   10718:	dd 4f       	sbci	r29, 0xFD	; 253
   1071a:	88 81       	ld	r24, Y
   1071c:	99 81       	ldd	r25, Y+1	; 0x01
   1071e:	c5 52       	subi	r28, 0x25	; 37
   10720:	d2 40       	sbci	r29, 0x02	; 2
}
   10722:	ca 5d       	subi	r28, 0xDA	; 218
   10724:	dd 4f       	sbci	r29, 0xFD	; 253
   10726:	ec e0       	ldi	r30, 0x0C	; 12
   10728:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

0001072c <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1072c:	a6 e2       	ldi	r26, 0x26	; 38
   1072e:	b2 e0       	ldi	r27, 0x02	; 2
   10730:	ec e9       	ldi	r30, 0x9C	; 156
   10732:	f3 e8       	ldi	r31, 0x83	; 131
   10734:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
   10738:	4a 01       	movw	r8, r20
   1073a:	5b 01       	movw	r10, r22
   1073c:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1073e:	cb 5d       	subi	r28, 0xDB	; 219
   10740:	dd 4f       	sbci	r29, 0xFD	; 253
   10742:	19 82       	std	Y+1, r1	; 0x01
   10744:	18 82       	st	Y, r1
   10746:	c5 52       	subi	r28, 0x25	; 37
   10748:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1074a:	43 e0       	ldi	r20, 0x03	; 3
   1074c:	bc 01       	movw	r22, r24
   1074e:	ce 01       	movw	r24, r28
   10750:	01 96       	adiw	r24, 0x01	; 1
   10752:	fe de       	rcall	.-516    	; 0x10550 <dbf_open>
    if( rc != FR_OK)
   10754:	89 2b       	or	r24, r25
   10756:	19 f0       	breq	.+6      	; 0x1075e <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10758:	82 e1       	ldi	r24, 0x12	; 18
   1075a:	90 e0       	ldi	r25, 0x00	; 0
   1075c:	2f c0       	rjmp	.+94     	; 0x107bc <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1075e:	b5 01       	movw	r22, r10
   10760:	a4 01       	movw	r20, r8
   10762:	ce 01       	movw	r24, r28
   10764:	01 96       	adiw	r24, 0x01	; 1
   10766:	51 df       	rcall	.-350    	; 0x1060a <dbf_lseek>
    if( rc != FR_OK)
   10768:	89 2b       	or	r24, r25
   1076a:	59 f0       	breq	.+22     	; 0x10782 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   1076c:	86 e0       	ldi	r24, 0x06	; 6
   1076e:	90 e0       	ldi	r25, 0x00	; 0
   10770:	f7 01       	movw	r30, r14
   10772:	91 83       	std	Z+1, r25	; 0x01
   10774:	80 83       	st	Z, r24
        dbf_close(&fp);
   10776:	ce 01       	movw	r24, r28
   10778:	01 96       	adiw	r24, 0x01	; 1
   1077a:	64 df       	rcall	.-312    	; 0x10644 <dbf_close>
        return( -1 );
   1077c:	8f ef       	ldi	r24, 0xFF	; 255
   1077e:	9f ef       	ldi	r25, 0xFF	; 255
   10780:	27 c0       	rjmp	.+78     	; 0x107d0 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10782:	9e 01       	movw	r18, r28
   10784:	2b 5d       	subi	r18, 0xDB	; 219
   10786:	3d 4f       	sbci	r19, 0xFD	; 253
   10788:	a8 01       	movw	r20, r16
   1078a:	b6 01       	movw	r22, r12
   1078c:	ce 01       	movw	r24, r28
   1078e:	01 96       	adiw	r24, 0x01	; 1
   10790:	1f df       	rcall	.-450    	; 0x105d0 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10792:	89 2b       	or	r24, r25
   10794:	49 f4       	brne	.+18     	; 0x107a8 <dbf_open_write+0x7c>
   10796:	cb 5d       	subi	r28, 0xDB	; 219
   10798:	dd 4f       	sbci	r29, 0xFD	; 253
   1079a:	88 81       	ld	r24, Y
   1079c:	99 81       	ldd	r25, Y+1	; 0x01
   1079e:	c5 52       	subi	r28, 0x25	; 37
   107a0:	d2 40       	sbci	r29, 0x02	; 2
   107a2:	08 17       	cp	r16, r24
   107a4:	19 07       	cpc	r17, r25
   107a6:	19 f0       	breq	.+6      	; 0x107ae <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   107a8:	82 e0       	ldi	r24, 0x02	; 2
   107aa:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   107ac:	e1 cf       	rjmp	.-62     	; 0x10770 <dbf_open_write+0x44>
   107ae:	ce 01       	movw	r24, r28
   107b0:	01 96       	adiw	r24, 0x01	; 1
   107b2:	48 df       	rcall	.-368    	; 0x10644 <dbf_close>
    if( rc != FR_OK)
   107b4:	89 2b       	or	r24, r25
   107b6:	31 f0       	breq	.+12     	; 0x107c4 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   107b8:	80 e1       	ldi	r24, 0x10	; 16
   107ba:	90 e0       	ldi	r25, 0x00	; 0
   107bc:	f7 01       	movw	r30, r14
   107be:	91 83       	std	Z+1, r25	; 0x01
   107c0:	80 83       	st	Z, r24
   107c2:	dc cf       	rjmp	.-72     	; 0x1077c <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   107c4:	cb 5d       	subi	r28, 0xDB	; 219
   107c6:	dd 4f       	sbci	r29, 0xFD	; 253
   107c8:	88 81       	ld	r24, Y
   107ca:	99 81       	ldd	r25, Y+1	; 0x01
   107cc:	c5 52       	subi	r28, 0x25	; 37
   107ce:	d2 40       	sbci	r29, 0x02	; 2
}
   107d0:	ca 5d       	subi	r28, 0xDA	; 218
   107d2:	dd 4f       	sbci	r29, 0xFD	; 253
   107d4:	ec e0       	ldi	r30, 0x0C	; 12
   107d6:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

000107da <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   107da:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <clock_elapsed_begin>
   107de:	08 95       	ret

000107e0 <gpib_timer_reset>:
   107e0:	f8 94       	cli
   107e2:	ef ec       	ldi	r30, 0xCF	; 207
   107e4:	fc e1       	ldi	r31, 0x1C	; 28
   107e6:	10 82       	st	Z, r1
   107e8:	11 82       	std	Z+1, r1	; 0x01
   107ea:	12 82       	std	Z+2, r1	; 0x02
   107ec:	13 82       	std	Z+3, r1	; 0x03
   107ee:	14 82       	std	Z+4, r1	; 0x04
   107f0:	15 82       	std	Z+5, r1	; 0x05
   107f2:	16 82       	std	Z+6, r1	; 0x06
   107f4:	17 82       	std	Z+7, r1	; 0x07
   107f6:	81 e0       	ldi	r24, 0x01	; 1
   107f8:	80 87       	std	Z+8, r24	; 0x08
   107fa:	78 94       	sei
   107fc:	08 95       	ret

000107fe <gpib_timer_elapsed_end>:
   107fe:	0c 94 03 33 	jmp	0x6606	; 0x6606 <clock_elapsed_end>
   10802:	08 95       	ret

00010804 <gpib_timer_task>:
   10804:	f8 94       	cli
   10806:	80 91 d3 1c 	lds	r24, 0x1CD3	; 0x801cd3 <gpib_timer+0x4>
   1080a:	90 91 d4 1c 	lds	r25, 0x1CD4	; 0x801cd4 <gpib_timer+0x5>
   1080e:	a0 91 d5 1c 	lds	r26, 0x1CD5	; 0x801cd5 <gpib_timer+0x6>
   10812:	b0 91 d6 1c 	lds	r27, 0x1CD6	; 0x801cd6 <gpib_timer+0x7>
   10816:	89 2b       	or	r24, r25
   10818:	8a 2b       	or	r24, r26
   1081a:	8b 2b       	or	r24, r27
   1081c:	a1 f0       	breq	.+40     	; 0x10846 <gpib_timer_task+0x42>
   1081e:	80 91 d3 1c 	lds	r24, 0x1CD3	; 0x801cd3 <gpib_timer+0x4>
   10822:	90 91 d4 1c 	lds	r25, 0x1CD4	; 0x801cd4 <gpib_timer+0x5>
   10826:	a0 91 d5 1c 	lds	r26, 0x1CD5	; 0x801cd5 <gpib_timer+0x6>
   1082a:	b0 91 d6 1c 	lds	r27, 0x1CD6	; 0x801cd6 <gpib_timer+0x7>
   1082e:	01 97       	sbiw	r24, 0x01	; 1
   10830:	a1 09       	sbc	r26, r1
   10832:	b1 09       	sbc	r27, r1
   10834:	80 93 d3 1c 	sts	0x1CD3, r24	; 0x801cd3 <gpib_timer+0x4>
   10838:	90 93 d4 1c 	sts	0x1CD4, r25	; 0x801cd4 <gpib_timer+0x5>
   1083c:	a0 93 d5 1c 	sts	0x1CD5, r26	; 0x801cd5 <gpib_timer+0x6>
   10840:	b0 93 d6 1c 	sts	0x1CD6, r27	; 0x801cd6 <gpib_timer+0x7>
   10844:	03 c0       	rjmp	.+6      	; 0x1084c <gpib_timer_task+0x48>
   10846:	81 e0       	ldi	r24, 0x01	; 1
   10848:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <gpib_timer+0x8>
   1084c:	78 94       	sei
   1084e:	08 95       	ret

00010850 <gpib_timeout_set>:
   10850:	f8 94       	cli
   10852:	ef ec       	ldi	r30, 0xCF	; 207
   10854:	fc e1       	ldi	r31, 0x1C	; 28
   10856:	64 83       	std	Z+4, r22	; 0x04
   10858:	75 83       	std	Z+5, r23	; 0x05
   1085a:	86 83       	std	Z+6, r24	; 0x06
   1085c:	97 83       	std	Z+7, r25	; 0x07
   1085e:	10 86       	std	Z+8, r1	; 0x08
   10860:	78 94       	sei
   10862:	08 95       	ret

00010864 <gpib_bus_init>:
   10864:	00 d0       	rcall	.+0      	; 0x10866 <gpib_bus_init+0x2>
   10866:	1f 92       	push	r1
   10868:	8f b7       	in	r24, 0x3f	; 63
   1086a:	f8 94       	cli
   1086c:	10 92 50 19 	sts	0x1950, r1	; 0x801950 <gpib_unread_f>
   10870:	11 b8       	out	0x01, r1	; 1
   10872:	9f ef       	ldi	r25, 0xFF	; 255
   10874:	92 b9       	out	0x02, r25	; 2
   10876:	21 98       	cbi	0x04, 1	; 4
   10878:	29 9a       	sbi	0x05, 1	; 5
   1087a:	52 98       	cbi	0x0a, 2	; 10
   1087c:	5a 9a       	sbi	0x0b, 2	; 11
   1087e:	53 98       	cbi	0x0a, 3	; 10
   10880:	5b 9a       	sbi	0x0b, 3	; 11
   10882:	56 98       	cbi	0x0a, 6	; 10
   10884:	5e 9a       	sbi	0x0b, 6	; 11
   10886:	54 98       	cbi	0x0a, 4	; 10
   10888:	5c 9a       	sbi	0x0b, 4	; 11
   1088a:	57 98       	cbi	0x0a, 7	; 10
   1088c:	5f 9a       	sbi	0x0b, 7	; 11
   1088e:	55 98       	cbi	0x0a, 5	; 10
   10890:	5d 9a       	sbi	0x0b, 5	; 11
   10892:	20 98       	cbi	0x04, 0	; 4
   10894:	28 9a       	sbi	0x05, 0	; 5
   10896:	45 98       	cbi	0x08, 5	; 8
   10898:	3d 9a       	sbi	0x07, 5	; 7
   1089a:	44 9a       	sbi	0x08, 4	; 8
   1089c:	3c 9a       	sbi	0x07, 4	; 7
   1089e:	43 98       	cbi	0x08, 3	; 8
   108a0:	3b 9a       	sbi	0x07, 3	; 7
   108a2:	42 98       	cbi	0x08, 2	; 8
   108a4:	3a 9a       	sbi	0x07, 2	; 7
   108a6:	9d e0       	ldi	r25, 0x0D	; 13
   108a8:	9a 95       	dec	r25
   108aa:	f1 f7       	brne	.-4      	; 0x108a8 <gpib_bus_init+0x44>
   108ac:	00 00       	nop
   108ae:	8f bf       	out	0x3f, r24	; 63
   108b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   108b4:	82 ff       	sbrs	r24, 2
   108b6:	0a c0       	rjmp	.+20     	; 0x108cc <gpib_bus_init+0x68>
   108b8:	83 e2       	ldi	r24, 0x23	; 35
   108ba:	92 e1       	ldi	r25, 0x12	; 18
   108bc:	a0 e0       	ldi	r26, 0x00	; 0
   108be:	ed b7       	in	r30, 0x3d	; 61
   108c0:	fe b7       	in	r31, 0x3e	; 62
   108c2:	81 83       	std	Z+1, r24	; 0x01
   108c4:	92 83       	std	Z+2, r25	; 0x02
   108c6:	a3 83       	std	Z+3, r26	; 0x03
   108c8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   108cc:	0f 90       	pop	r0
   108ce:	0f 90       	pop	r0
   108d0:	0f 90       	pop	r0
   108d2:	08 95       	ret

000108d4 <gpib_rx_init>:
   108d4:	9f b7       	in	r25, 0x3f	; 63
   108d6:	f8 94       	cli
   108d8:	11 b8       	out	0x01, r1	; 1
   108da:	2f ef       	ldi	r18, 0xFF	; 255
   108dc:	22 b9       	out	0x02, r18	; 2
   108de:	21 98       	cbi	0x04, 1	; 4
   108e0:	29 9a       	sbi	0x05, 1	; 5
   108e2:	20 98       	cbi	0x04, 0	; 4
   108e4:	28 9a       	sbi	0x05, 0	; 5
   108e6:	4e 9b       	sbis	0x09, 6	; 9
   108e8:	09 c0       	rjmp	.+18     	; 0x108fc <gpib_rx_init+0x28>
   108ea:	81 11       	cpse	r24, r1
   108ec:	07 c0       	rjmp	.+14     	; 0x108fc <gpib_rx_init+0x28>
   108ee:	52 98       	cbi	0x0a, 2	; 10
   108f0:	5a 9a       	sbi	0x0b, 2	; 11
   108f2:	53 98       	cbi	0x0a, 3	; 10
   108f4:	5b 9a       	sbi	0x0b, 3	; 11
   108f6:	42 98       	cbi	0x08, 2	; 8
   108f8:	3a 9a       	sbi	0x07, 2	; 7
   108fa:	08 c0       	rjmp	.+16     	; 0x1090c <gpib_rx_init+0x38>
   108fc:	42 98       	cbi	0x08, 2	; 8
   108fe:	3a 9a       	sbi	0x07, 2	; 7
   10900:	5b 98       	cbi	0x0b, 3	; 11
   10902:	53 9a       	sbi	0x0a, 3	; 10
   10904:	5a 98       	cbi	0x0b, 2	; 11
   10906:	52 9a       	sbi	0x0a, 2	; 10
   10908:	88 23       	and	r24, r24
   1090a:	89 f3       	breq	.-30     	; 0x108ee <gpib_rx_init+0x1a>
   1090c:	9f bf       	out	0x3f, r25	; 63
   1090e:	08 95       	ret

00010910 <gpib_tx_init>:
   10910:	9f b7       	in	r25, 0x3f	; 63
   10912:	f8 94       	cli
   10914:	11 b8       	out	0x01, r1	; 1
   10916:	8f ef       	ldi	r24, 0xFF	; 255
   10918:	82 b9       	out	0x02, r24	; 2
   1091a:	21 98       	cbi	0x04, 1	; 4
   1091c:	29 9a       	sbi	0x05, 1	; 5
   1091e:	52 98       	cbi	0x0a, 2	; 10
   10920:	5a 9a       	sbi	0x0b, 2	; 11
   10922:	53 98       	cbi	0x0a, 3	; 10
   10924:	5b 9a       	sbi	0x0b, 3	; 11
   10926:	20 98       	cbi	0x04, 0	; 4
   10928:	28 9a       	sbi	0x05, 0	; 5
   1092a:	42 9a       	sbi	0x08, 2	; 8
   1092c:	3a 9a       	sbi	0x07, 2	; 7
   1092e:	81 b9       	out	0x01, r24	; 1
   10930:	9f bf       	out	0x3f, r25	; 63
   10932:	08 95       	ret

00010934 <gpib_state_init>:
   10934:	00 d0       	rcall	.+0      	; 0x10936 <gpib_state_init+0x2>
   10936:	1f 92       	push	r1
   10938:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1093c:	82 ff       	sbrs	r24, 2
   1093e:	0a c0       	rjmp	.+20     	; 0x10954 <gpib_state_init+0x20>
   10940:	80 e1       	ldi	r24, 0x10	; 16
   10942:	92 e1       	ldi	r25, 0x12	; 18
   10944:	a0 e0       	ldi	r26, 0x00	; 0
   10946:	ed b7       	in	r30, 0x3d	; 61
   10948:	fe b7       	in	r31, 0x3e	; 62
   1094a:	81 83       	std	Z+1, r24	; 0x01
   1094c:	92 83       	std	Z+2, r25	; 0x02
   1094e:	a3 83       	std	Z+3, r26	; 0x03
   10950:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10954:	cc dd       	rcall	.-1128   	; 0x104ee <ppr_init>
   10956:	0e 94 52 8f 	call	0x11ea4	; 0x11ea4 <listen_cleanup>
   1095a:	0e 94 68 90 	call	0x120d0	; 0x120d0 <talk_cleanup>
   1095e:	10 92 db 1e 	sts	0x1EDB, r1	; 0x801edb <spoll>
   10962:	10 92 de 1e 	sts	0x1EDE, r1	; 0x801ede <talking>
   10966:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <talking_last>
   1096a:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <listening>
   1096e:	10 92 da 1e 	sts	0x1EDA, r1	; 0x801eda <listening_last>
   10972:	10 92 d9 1c 	sts	0x1CD9, r1	; 0x801cd9 <lastcmd+0x1>
   10976:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <lastcmd>
   1097a:	10 92 dd 1e 	sts	0x1EDD, r1	; 0x801edd <current+0x1>
   1097e:	10 92 dc 1e 	sts	0x1EDC, r1	; 0x801edc <current>
   10982:	10 92 df 1e 	sts	0x1EDF, r1	; 0x801edf <secondary>
   10986:	0f 90       	pop	r0
   10988:	0f 90       	pop	r0
   1098a:	0f 90       	pop	r0
   1098c:	08 95       	ret

0001098e <gpib_enable_PPR>:
   1098e:	cf 93       	push	r28
   10990:	df 93       	push	r29
   10992:	ad b7       	in	r26, 0x3d	; 61
   10994:	be b7       	in	r27, 0x3e	; 62
   10996:	17 97       	sbiw	r26, 0x07	; 7
   10998:	0f b6       	in	r0, 0x3f	; 63
   1099a:	f8 94       	cli
   1099c:	be bf       	out	0x3e, r27	; 62
   1099e:	0f be       	out	0x3f, r0	; 63
   109a0:	ad bf       	out	0x3d, r26	; 61
   109a2:	ec 01       	movw	r28, r24
   109a4:	88 30       	cpi	r24, 0x08	; 8
   109a6:	91 05       	cpc	r25, r1
   109a8:	68 f0       	brcs	.+26     	; 0x109c4 <gpib_enable_PPR+0x36>
   109aa:	ed b7       	in	r30, 0x3d	; 61
   109ac:	fe b7       	in	r31, 0x3e	; 62
   109ae:	95 83       	std	Z+5, r25	; 0x05
   109b0:	84 83       	std	Z+4, r24	; 0x04
   109b2:	8a ee       	ldi	r24, 0xEA	; 234
   109b4:	91 e1       	ldi	r25, 0x11	; 17
   109b6:	a0 e0       	ldi	r26, 0x00	; 0
   109b8:	81 83       	std	Z+1, r24	; 0x01
   109ba:	92 83       	std	Z+2, r25	; 0x02
   109bc:	a3 83       	std	Z+3, r26	; 0x03
   109be:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   109c2:	15 c0       	rjmp	.+42     	; 0x109ee <gpib_enable_PPR+0x60>
   109c4:	aa dd       	rcall	.-1196   	; 0x1051a <ppr_bit_set>
   109c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109ca:	81 ff       	sbrs	r24, 1
   109cc:	10 c0       	rjmp	.+32     	; 0x109ee <gpib_enable_PPR+0x60>
   109ce:	8b dd       	rcall	.-1258   	; 0x104e6 <ppr_reg>
   109d0:	90 e0       	ldi	r25, 0x00	; 0
   109d2:	ed b7       	in	r30, 0x3d	; 61
   109d4:	fe b7       	in	r31, 0x3e	; 62
   109d6:	97 83       	std	Z+7, r25	; 0x07
   109d8:	86 83       	std	Z+6, r24	; 0x06
   109da:	d5 83       	std	Z+5, r29	; 0x05
   109dc:	c4 83       	std	Z+4, r28	; 0x04
   109de:	8f ec       	ldi	r24, 0xCF	; 207
   109e0:	91 e1       	ldi	r25, 0x11	; 17
   109e2:	a0 e0       	ldi	r26, 0x00	; 0
   109e4:	81 83       	std	Z+1, r24	; 0x01
   109e6:	92 83       	std	Z+2, r25	; 0x02
   109e8:	a3 83       	std	Z+3, r26	; 0x03
   109ea:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   109ee:	cd b7       	in	r28, 0x3d	; 61
   109f0:	de b7       	in	r29, 0x3e	; 62
   109f2:	27 96       	adiw	r28, 0x07	; 7
   109f4:	e2 e0       	ldi	r30, 0x02	; 2
   109f6:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000109fa <gpib_disable_PPR>:
   109fa:	cf 93       	push	r28
   109fc:	df 93       	push	r29
   109fe:	ad b7       	in	r26, 0x3d	; 61
   10a00:	be b7       	in	r27, 0x3e	; 62
   10a02:	17 97       	sbiw	r26, 0x07	; 7
   10a04:	0f b6       	in	r0, 0x3f	; 63
   10a06:	f8 94       	cli
   10a08:	be bf       	out	0x3e, r27	; 62
   10a0a:	0f be       	out	0x3f, r0	; 63
   10a0c:	ad bf       	out	0x3d, r26	; 61
   10a0e:	ec 01       	movw	r28, r24
   10a10:	88 30       	cpi	r24, 0x08	; 8
   10a12:	91 05       	cpc	r25, r1
   10a14:	68 f0       	brcs	.+26     	; 0x10a30 <gpib_disable_PPR+0x36>
   10a16:	ed b7       	in	r30, 0x3d	; 61
   10a18:	fe b7       	in	r31, 0x3e	; 62
   10a1a:	95 83       	std	Z+5, r25	; 0x05
   10a1c:	84 83       	std	Z+4, r24	; 0x04
   10a1e:	88 ea       	ldi	r24, 0xA8	; 168
   10a20:	91 e1       	ldi	r25, 0x11	; 17
   10a22:	a0 e0       	ldi	r26, 0x00	; 0
   10a24:	81 83       	std	Z+1, r24	; 0x01
   10a26:	92 83       	std	Z+2, r25	; 0x02
   10a28:	a3 83       	std	Z+3, r26	; 0x03
   10a2a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10a2e:	15 c0       	rjmp	.+42     	; 0x10a5a <gpib_disable_PPR+0x60>
   10a30:	81 dd       	rcall	.-1278   	; 0x10534 <ppr_bit_clr>
   10a32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a36:	81 ff       	sbrs	r24, 1
   10a38:	10 c0       	rjmp	.+32     	; 0x10a5a <gpib_disable_PPR+0x60>
   10a3a:	55 dd       	rcall	.-1366   	; 0x104e6 <ppr_reg>
   10a3c:	90 e0       	ldi	r25, 0x00	; 0
   10a3e:	ed b7       	in	r30, 0x3d	; 61
   10a40:	fe b7       	in	r31, 0x3e	; 62
   10a42:	97 83       	std	Z+7, r25	; 0x07
   10a44:	86 83       	std	Z+6, r24	; 0x06
   10a46:	d5 83       	std	Z+5, r29	; 0x05
   10a48:	c4 83       	std	Z+4, r28	; 0x04
   10a4a:	8d e8       	ldi	r24, 0x8D	; 141
   10a4c:	91 e1       	ldi	r25, 0x11	; 17
   10a4e:	a0 e0       	ldi	r26, 0x00	; 0
   10a50:	81 83       	std	Z+1, r24	; 0x01
   10a52:	92 83       	std	Z+2, r25	; 0x02
   10a54:	a3 83       	std	Z+3, r26	; 0x03
   10a56:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10a5a:	cd b7       	in	r28, 0x3d	; 61
   10a5c:	de b7       	in	r29, 0x3e	; 62
   10a5e:	27 96       	adiw	r28, 0x07	; 7
   10a60:	e2 e0       	ldi	r30, 0x02	; 2
   10a62:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00010a66 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10a66:	cf 93       	push	r28
   10a68:	df 93       	push	r29
   10a6a:	00 d0       	rcall	.+0      	; 0x10a6c <gpib_unread+0x6>
   10a6c:	1f 92       	push	r1
   10a6e:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10a70:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <gpib_unread_f>
   10a74:	81 11       	cpse	r24, r1
   10a76:	08 c0       	rjmp	.+16     	; 0x10a88 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10a78:	d0 93 e3 1e 	sts	0x1EE3, r29	; 0x801ee3 <gpib_unread_data+0x1>
   10a7c:	c0 93 e2 1e 	sts	0x1EE2, r28	; 0x801ee2 <gpib_unread_data>
        gpib_unread_f = 1;
   10a80:	81 e0       	ldi	r24, 0x01	; 1
   10a82:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <gpib_unread_f>
   10a86:	12 c0       	rjmp	.+36     	; 0x10aac <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10a88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a8c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10a90:	85 70       	andi	r24, 0x05	; 5
   10a92:	99 27       	eor	r25, r25
   10a94:	89 2b       	or	r24, r25
   10a96:	51 f0       	breq	.+20     	; 0x10aac <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10a98:	8f e5       	ldi	r24, 0x5F	; 95
   10a9a:	91 e1       	ldi	r25, 0x11	; 17
   10a9c:	a0 e0       	ldi	r26, 0x00	; 0
   10a9e:	ed b7       	in	r30, 0x3d	; 61
   10aa0:	fe b7       	in	r31, 0x3e	; 62
   10aa2:	81 83       	std	Z+1, r24	; 0x01
   10aa4:	92 83       	std	Z+2, r25	; 0x02
   10aa6:	a3 83       	std	Z+3, r26	; 0x03
   10aa8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
    return(ch);
}
   10aac:	ce 01       	movw	r24, r28
   10aae:	cd b7       	in	r28, 0x3d	; 61
   10ab0:	de b7       	in	r29, 0x3e	; 62
   10ab2:	23 96       	adiw	r28, 0x03	; 3
   10ab4:	e2 e0       	ldi	r30, 0x02	; 2
   10ab6:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00010aba <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10aba:	11 b8       	out	0x01, r1	; 1
   10abc:	80 b1       	in	r24, 0x00	; 0
   10abe:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10ac0:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10ac2:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10ac4:	08 95       	ret

00010ac6 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10ac6:	4e 99       	sbic	0x09, 6	; 9
   10ac8:	03 c0       	rjmp	.+6      	; 0x10ad0 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10aca:	80 e0       	ldi	r24, 0x00	; 0
   10acc:	94 e0       	ldi	r25, 0x04	; 4
   10ace:	02 c0       	rjmp	.+4      	; 0x10ad4 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10ad0:	80 e0       	ldi	r24, 0x00	; 0
   10ad2:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10ad4:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10ad6:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10ad8:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10ada:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10adc:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10ade:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10ae0:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10ae2:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10ae4:	08 95       	ret

00010ae6 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10ae6:	19 99       	sbic	0x03, 1	; 3
   10ae8:	03 c0       	rjmp	.+6      	; 0x10af0 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10aea:	80 e0       	ldi	r24, 0x00	; 0
   10aec:	90 e2       	ldi	r25, 0x20	; 32
   10aee:	02 c0       	rjmp	.+4      	; 0x10af4 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10af0:	80 e0       	ldi	r24, 0x00	; 0
   10af2:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10af4:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10af6:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10af8:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10afa:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10afc:	08 95       	ret

00010afe <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10afe:	2f 92       	push	r2
   10b00:	3f 92       	push	r3
   10b02:	4f 92       	push	r4
   10b04:	6f 92       	push	r6
   10b06:	7f 92       	push	r7
   10b08:	8f 92       	push	r8
   10b0a:	af 92       	push	r10
   10b0c:	bf 92       	push	r11
   10b0e:	cf 92       	push	r12
   10b10:	df 92       	push	r13
   10b12:	ef 92       	push	r14
   10b14:	1f 93       	push	r17
   10b16:	cf 93       	push	r28
   10b18:	df 93       	push	r29
   10b1a:	cd b7       	in	r28, 0x3d	; 61
   10b1c:	de b7       	in	r29, 0x3e	; 62
   10b1e:	2a 97       	sbiw	r28, 0x0a	; 10
   10b20:	0f b6       	in	r0, 0x3f	; 63
   10b22:	f8 94       	cli
   10b24:	de bf       	out	0x3e, r29	; 62
   10b26:	0f be       	out	0x3f, r0	; 63
   10b28:	cd bf       	out	0x3d, r28	; 61
   10b2a:	9a 87       	std	Y+10, r25	; 0x0a
   10b2c:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10b2e:	64 ef       	ldi	r22, 0xF4	; 244
   10b30:	71 e0       	ldi	r23, 0x01	; 1
   10b32:	80 e0       	ldi	r24, 0x00	; 0
   10b34:	90 e0       	ldi	r25, 0x00	; 0
   10b36:	8c de       	rcall	.-744    	; 0x10850 <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10b38:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10b3a:	8b e3       	ldi	r24, 0x3B	; 59
   10b3c:	90 e1       	ldi	r25, 0x10	; 16
   10b3e:	6c 01       	movw	r12, r24
   10b40:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10b42:	8a e6       	ldi	r24, 0x6A	; 106
   10b44:	90 e1       	ldi	r25, 0x10	; 16
   10b46:	3c 01       	movw	r6, r24
   10b48:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10b4a:	aa 24       	eor	r10, r10
   10b4c:	a3 94       	inc	r10
   10b4e:	b1 2c       	mov	r11, r1
   10b50:	82 ee       	ldi	r24, 0xE2	; 226
   10b52:	90 e1       	ldi	r25, 0x10	; 16
   10b54:	1c 01       	movw	r2, r24
   10b56:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10b58:	86 ea       	ldi	r24, 0xA6	; 166
   10b5a:	90 e1       	ldi	r25, 0x10	; 16
   10b5c:	9c 01       	movw	r18, r24
   10b5e:	40 e0       	ldi	r20, 0x00	; 0
   10b60:	2e 83       	std	Y+6, r18	; 0x06
   10b62:	3f 83       	std	Y+7, r19	; 0x07
   10b64:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10b66:	80 e0       	ldi	r24, 0x00	; 0
   10b68:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <uart_keyhit>
   10b6c:	89 2b       	or	r24, r25
   10b6e:	69 f0       	breq	.+26     	; 0x10b8a <gpib_write_byte+0x8c>
		{
			if(debuglevel & GPIB_ERR)
   10b70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b74:	80 ff       	sbrs	r24, 0
   10b76:	f1 c0       	rjmp	.+482    	; 0x10d5a <gpib_write_byte+0x25c>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10b78:	81 2f       	mov	r24, r17
   10b7a:	90 e0       	ldi	r25, 0x00	; 0
   10b7c:	ed b7       	in	r30, 0x3d	; 61
   10b7e:	fe b7       	in	r31, 0x3e	; 62
   10b80:	95 83       	std	Z+5, r25	; 0x05
   10b82:	84 83       	std	Z+4, r24	; 0x04
   10b84:	80 e4       	ldi	r24, 0x40	; 64
   10b86:	91 e1       	ldi	r25, 0x11	; 17
   10b88:	14 c0       	rjmp	.+40     	; 0x10bb2 <gpib_write_byte+0xb4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10b8a:	4c 99       	sbic	0x09, 4	; 9
   10b8c:	19 c0       	rjmp	.+50     	; 0x10bc0 <gpib_write_byte+0xc2>
        {
            ch |= IFC_FLAG;
   10b8e:	29 85       	ldd	r18, Y+9	; 0x09
   10b90:	3a 85       	ldd	r19, Y+10	; 0x0a
   10b92:	30 61       	ori	r19, 0x10	; 16
   10b94:	3a 87       	std	Y+10, r19	; 0x0a
            gpib_bus_init();
   10b96:	29 87       	std	Y+9, r18	; 0x09
   10b98:	65 de       	rcall	.-822    	; 0x10864 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10b9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b9e:	80 ff       	sbrs	r24, 0
   10ba0:	dc c0       	rjmp	.+440    	; 0x10d5a <gpib_write_byte+0x25c>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10ba2:	81 2f       	mov	r24, r17
   10ba4:	90 e0       	ldi	r25, 0x00	; 0
   10ba6:	ed b7       	in	r30, 0x3d	; 61
   10ba8:	fe b7       	in	r31, 0x3e	; 62
   10baa:	95 83       	std	Z+5, r25	; 0x05
   10bac:	84 83       	std	Z+4, r24	; 0x04
   10bae:	81 e2       	ldi	r24, 0x21	; 33
   10bb0:	91 e1       	ldi	r25, 0x11	; 17
   10bb2:	a0 e0       	ldi	r26, 0x00	; 0
   10bb4:	81 83       	std	Z+1, r24	; 0x01
   10bb6:	92 83       	std	Z+2, r25	; 0x02
   10bb8:	a3 83       	std	Z+3, r26	; 0x03
   10bba:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10bbe:	cd c0       	rjmp	.+410    	; 0x10d5a <gpib_write_byte+0x25c>
            break;
        }

        switch(tx_state)
   10bc0:	81 2f       	mov	r24, r17
   10bc2:	90 e0       	ldi	r25, 0x00	; 0
   10bc4:	89 30       	cpi	r24, 0x09	; 9
   10bc6:	91 05       	cpc	r25, r1
   10bc8:	08 f0       	brcs	.+2      	; 0x10bcc <gpib_write_byte+0xce>
   10bca:	bf c0       	rjmp	.+382    	; 0x10d4a <gpib_write_byte+0x24c>
   10bcc:	fc 01       	movw	r30, r24
   10bce:	e3 54       	subi	r30, 0x43	; 67
   10bd0:	ff 4f       	sbci	r31, 0xFF	; 255
   10bd2:	0c 94 54 e1 	jmp	0x1c2a8	; 0x1c2a8 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init(0);
   10bd6:	80 e0       	ldi	r24, 0x00	; 0
   10bd8:	9b de       	rcall	.-714    	; 0x10910 <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10bda:	21 98       	cbi	0x04, 1	; 4
   10bdc:	29 9a       	sbi	0x05, 1	; 5
   10bde:	fd e0       	ldi	r31, 0x0D	; 13
   10be0:	fa 95       	dec	r31
   10be2:	f1 f7       	brne	.-4      	; 0x10be0 <gpib_write_byte+0xe2>
   10be4:	00 00       	nop
   10be6:	06 c0       	rjmp	.+12     	; 0x10bf4 <gpib_write_byte+0xf6>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10be8:	4a 9b       	sbis	0x09, 2	; 9
   10bea:	02 c0       	rjmp	.+4      	; 0x10bf0 <gpib_write_byte+0xf2>
   10bec:	4b 99       	sbic	0x09, 3	; 9
   10bee:	17 c0       	rjmp	.+46     	; 0x10c1e <gpib_write_byte+0x120>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10bf0:	4e 9b       	sbis	0x09, 6	; 9
   10bf2:	07 c0       	rjmp	.+14     	; 0x10c02 <gpib_write_byte+0x104>
					{
						gpib_timeout_set(HTIMEOUT);
   10bf4:	64 ef       	ldi	r22, 0xF4	; 244
   10bf6:	71 e0       	ldi	r23, 0x01	; 1
   10bf8:	80 e0       	ldi	r24, 0x00	; 0
   10bfa:	90 e0       	ldi	r25, 0x00	; 0
   10bfc:	29 de       	rcall	.-942    	; 0x10850 <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10bfe:	12 e0       	ldi	r17, 0x02	; 2
   10c00:	b2 cf       	rjmp	.-156    	; 0x10b66 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10c02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c06:	80 ff       	sbrs	r24, 0
   10c08:	ae cf       	rjmp	.-164    	; 0x10b66 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10c0a:	ed b7       	in	r30, 0x3d	; 61
   10c0c:	fe b7       	in	r31, 0x3e	; 62
   10c0e:	b5 82       	std	Z+5, r11	; 0x05
   10c10:	a4 82       	std	Z+4, r10	; 0x04
   10c12:	21 82       	std	Z+1, r2	; 0x01
   10c14:	32 82       	std	Z+2, r3	; 0x02
   10c16:	43 82       	std	Z+3, r4	; 0x03
   10c18:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10c1c:	a4 cf       	rjmp	.-184    	; 0x10b66 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c1e:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10c22:	88 23       	and	r24, r24
   10c24:	09 f4       	brne	.+2      	; 0x10c28 <gpib_write_byte+0x12a>
   10c26:	9f cf       	rjmp	.-194    	; 0x10b66 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c30:	85 70       	andi	r24, 0x05	; 5
   10c32:	99 27       	eor	r25, r25
   10c34:	89 2b       	or	r24, r25
   10c36:	c1 f1       	breq	.+112    	; 0x10ca8 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c38:	2e 81       	ldd	r18, Y+6	; 0x06
   10c3a:	3f 81       	ldd	r19, Y+7	; 0x07
   10c3c:	48 85       	ldd	r20, Y+8	; 0x08
   10c3e:	ed b7       	in	r30, 0x3d	; 61
   10c40:	fe b7       	in	r31, 0x3e	; 62
   10c42:	21 83       	std	Z+1, r18	; 0x01
   10c44:	32 83       	std	Z+2, r19	; 0x02
   10c46:	43 83       	std	Z+3, r20	; 0x03
   10c48:	2d c0       	rjmp	.+90     	; 0x10ca4 <gpib_write_byte+0x1a6>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10c4a:	89 85       	ldd	r24, Y+9	; 0x09
   10c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c4e:	90 ff       	sbrs	r25, 0
   10c50:	03 c0       	rjmp	.+6      	; 0x10c58 <gpib_write_byte+0x15a>
                    GPIB_IO_LOW(EOI);
   10c52:	28 98       	cbi	0x05, 0	; 5
   10c54:	20 9a       	sbi	0x04, 0	; 4
   10c56:	02 c0       	rjmp	.+4      	; 0x10c5c <gpib_write_byte+0x15e>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10c58:	20 98       	cbi	0x04, 0	; 4
   10c5a:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10c5c:	8f ef       	ldi	r24, 0xFF	; 255
   10c5e:	81 b9       	out	0x01, r24	; 1
   10c60:	89 85       	ldd	r24, Y+9	; 0x09
   10c62:	80 95       	com	r24
   10c64:	82 b9       	out	0x02, r24	; 2
   10c66:	9d e0       	ldi	r25, 0x0D	; 13
   10c68:	9a 95       	dec	r25
   10c6a:	f1 f7       	brne	.-4      	; 0x10c68 <gpib_write_byte+0x16a>
   10c6c:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10c6e:	64 ef       	ldi	r22, 0xF4	; 244
   10c70:	71 e0       	ldi	r23, 0x01	; 1
   10c72:	80 e0       	ldi	r24, 0x00	; 0
   10c74:	90 e0       	ldi	r25, 0x00	; 0
   10c76:	ec dd       	rcall	.-1064   	; 0x10850 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10c78:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10c7a:	75 cf       	rjmp	.-278    	; 0x10b66 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10c7c:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10c7e:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c80:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10c84:	88 23       	and	r24, r24
   10c86:	09 f4       	brne	.+2      	; 0x10c8a <gpib_write_byte+0x18c>
   10c88:	6e cf       	rjmp	.-292    	; 0x10b66 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c8e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c92:	85 70       	andi	r24, 0x05	; 5
   10c94:	99 27       	eor	r25, r25
   10c96:	89 2b       	or	r24, r25
   10c98:	39 f0       	breq	.+14     	; 0x10ca8 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c9a:	ed b7       	in	r30, 0x3d	; 61
   10c9c:	fe b7       	in	r31, 0x3e	; 62
   10c9e:	61 82       	std	Z+1, r6	; 0x01
   10ca0:	72 82       	std	Z+2, r7	; 0x02
   10ca2:	83 82       	std	Z+3, r8	; 0x03
   10ca4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                    ch |= TIMEOUT_FLAG;
   10ca8:	29 85       	ldd	r18, Y+9	; 0x09
   10caa:	3a 85       	ldd	r19, Y+10	; 0x0a
   10cac:	30 64       	ori	r19, 0x40	; 64
   10cae:	3a 87       	std	Y+10, r19	; 0x0a
   10cb0:	29 87       	std	Y+9, r18	; 0x09
   10cb2:	51 c0       	rjmp	.+162    	; 0x10d56 <gpib_write_byte+0x258>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10cb4:	29 98       	cbi	0x05, 1	; 5
   10cb6:	21 9a       	sbi	0x04, 1	; 4
   10cb8:	3d e0       	ldi	r19, 0x0D	; 13
   10cba:	3a 95       	dec	r19
   10cbc:	f1 f7       	brne	.-4      	; 0x10cba <gpib_write_byte+0x1bc>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10cbe:	00 00       	nop
   10cc0:	64 ef       	ldi	r22, 0xF4	; 244
   10cc2:	71 e0       	ldi	r23, 0x01	; 1
   10cc4:	80 e0       	ldi	r24, 0x00	; 0
   10cc6:	90 e0       	ldi	r25, 0x00	; 0
   10cc8:	c3 dd       	rcall	.-1146   	; 0x10850 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10cca:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10ccc:	4c cf       	rjmp	.-360    	; 0x10b66 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10cce:	4b 99       	sbic	0x09, 3	; 9
   10cd0:	40 c0       	rjmp	.+128    	; 0x10d52 <gpib_write_byte+0x254>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10cd2:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10cd6:	88 23       	and	r24, r24
   10cd8:	09 f4       	brne	.+2      	; 0x10cdc <gpib_write_byte+0x1de>
   10cda:	45 cf       	rjmp	.-374    	; 0x10b66 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10cdc:	89 85       	ldd	r24, Y+9	; 0x09
   10cde:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ce0:	90 64       	ori	r25, 0x40	; 64
   10ce2:	9a 87       	std	Y+10, r25	; 0x0a
   10ce4:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ce6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10cee:	85 70       	andi	r24, 0x05	; 5
   10cf0:	99 27       	eor	r25, r25
   10cf2:	89 2b       	or	r24, r25
   10cf4:	81 f1       	breq	.+96     	; 0x10d56 <gpib_write_byte+0x258>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10cf6:	ed b7       	in	r30, 0x3d	; 61
   10cf8:	fe b7       	in	r31, 0x3e	; 62
   10cfa:	c1 82       	std	Z+1, r12	; 0x01
   10cfc:	d2 82       	std	Z+2, r13	; 0x02
   10cfe:	e3 82       	std	Z+3, r14	; 0x03
   10d00:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10d04:	28 c0       	rjmp	.+80     	; 0x10d56 <gpib_write_byte+0x258>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10d06:	21 98       	cbi	0x04, 1	; 4
   10d08:	29 9a       	sbi	0x05, 1	; 5
   10d0a:	fd e0       	ldi	r31, 0x0D	; 13
   10d0c:	fa 95       	dec	r31
   10d0e:	f1 f7       	brne	.-4      	; 0x10d0c <gpib_write_byte+0x20e>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10d10:	00 00       	nop
   10d12:	64 ef       	ldi	r22, 0xF4	; 244
   10d14:	71 e0       	ldi	r23, 0x01	; 1
   10d16:	80 e0       	ldi	r24, 0x00	; 0
   10d18:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10d1a:	9a dd       	rcall	.-1228   	; 0x10850 <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10d1c:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10d1e:	23 cf       	rjmp	.-442    	; 0x10b66 <gpib_write_byte+0x68>
   10d20:	81 e0       	ldi	r24, 0x01	; 1
   10d22:	d8 dd       	rcall	.-1104   	; 0x108d4 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d24:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d28:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d2c:	85 70       	andi	r24, 0x05	; 5
   10d2e:	99 27       	eor	r25, r25
   10d30:	89 2b       	or	r24, r25
   10d32:	99 f0       	breq	.+38     	; 0x10d5a <gpib_write_byte+0x25c>
                    printf("<GPIB TX TIMEOUT>\n");
   10d34:	88 e2       	ldi	r24, 0x28	; 40
   10d36:	90 e1       	ldi	r25, 0x10	; 16
   10d38:	a0 e0       	ldi	r26, 0x00	; 0
   10d3a:	ed b7       	in	r30, 0x3d	; 61
   10d3c:	fe b7       	in	r31, 0x3e	; 62
   10d3e:	81 83       	std	Z+1, r24	; 0x01
   10d40:	92 83       	std	Z+2, r25	; 0x02
   10d42:	a3 83       	std	Z+3, r26	; 0x03
   10d44:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   10d48:	08 c0       	rjmp	.+16     	; 0x10d5a <gpib_write_byte+0x25c>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10d4a:	19 30       	cpi	r17, 0x09	; 9
   10d4c:	09 f0       	breq	.+2      	; 0x10d50 <gpib_write_byte+0x252>
   10d4e:	0b cf       	rjmp	.-490    	; 0x10b66 <gpib_write_byte+0x68>
   10d50:	04 c0       	rjmp	.+8      	; 0x10d5a <gpib_write_byte+0x25c>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10d52:	16 e0       	ldi	r17, 0x06	; 6
   10d54:	08 cf       	rjmp	.-496    	; 0x10b66 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10d56:	18 e0       	ldi	r17, 0x08	; 8
   10d58:	06 cf       	rjmp	.-500    	; 0x10b66 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10d5a:	89 85       	ldd	r24, Y+9	; 0x09
   10d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d5e:	2a 96       	adiw	r28, 0x0a	; 10
   10d60:	0f b6       	in	r0, 0x3f	; 63
   10d62:	f8 94       	cli
   10d64:	de bf       	out	0x3e, r29	; 62
   10d66:	0f be       	out	0x3f, r0	; 63
   10d68:	cd bf       	out	0x3d, r28	; 61
   10d6a:	df 91       	pop	r29
   10d6c:	cf 91       	pop	r28
   10d6e:	1f 91       	pop	r17
   10d70:	ef 90       	pop	r14
   10d72:	df 90       	pop	r13
   10d74:	cf 90       	pop	r12
   10d76:	bf 90       	pop	r11
   10d78:	af 90       	pop	r10
   10d7a:	8f 90       	pop	r8
   10d7c:	7f 90       	pop	r7
   10d7e:	6f 90       	pop	r6
   10d80:	4f 90       	pop	r4
   10d82:	3f 90       	pop	r3
   10d84:	2f 90       	pop	r2
   10d86:	08 95       	ret

00010d88 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10d88:	cf 93       	push	r28
   10d8a:	df 93       	push	r29
   10d8c:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10d8e:	89 2b       	or	r24, r25
   10d90:	21 f4       	brne	.+8      	; 0x10d9a <gpib_decode_header+0x12>
        fo = stdout;
   10d92:	c0 91 b1 1c 	lds	r28, 0x1CB1	; 0x801cb1 <__iob+0x2>
   10d96:	d0 91 b2 1c 	lds	r29, 0x1CB2	; 0x801cb2 <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10d9a:	be 01       	movw	r22, r28
   10d9c:	81 e0       	ldi	r24, 0x01	; 1
   10d9e:	9c e0       	ldi	r25, 0x0C	; 12
   10da0:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"GPIB bus state\n");
   10da4:	be 01       	movw	r22, r28
   10da6:	8e e2       	ldi	r24, 0x2E	; 46
   10da8:	9c e0       	ldi	r25, 0x0C	; 12
   10daa:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10dae:	be 01       	movw	r22, r28
   10db0:	8e e3       	ldi	r24, 0x3E	; 62
   10db2:	9c e0       	ldi	r25, 0x0C	; 12
   10db4:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10db8:	be 01       	movw	r22, r28
   10dba:	82 e5       	ldi	r24, 0x52	; 82
   10dbc:	9c e0       	ldi	r25, 0x0C	; 12
   10dbe:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10dc2:	be 01       	movw	r22, r28
   10dc4:	85 e7       	ldi	r24, 0x75	; 117
   10dc6:	9c e0       	ldi	r25, 0x0C	; 12
   10dc8:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"     A = ATN\n");
   10dcc:	be 01       	movw	r22, r28
   10dce:	8f e9       	ldi	r24, 0x9F	; 159
   10dd0:	9c e0       	ldi	r25, 0x0C	; 12
   10dd2:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"      E = EOI\n");
   10dd6:	be 01       	movw	r22, r28
   10dd8:	8d ea       	ldi	r24, 0xAD	; 173
   10dda:	9c e0       	ldi	r25, 0x0C	; 12
   10ddc:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"       S = SRQ\n");
   10de0:	be 01       	movw	r22, r28
   10de2:	8c eb       	ldi	r24, 0xBC	; 188
   10de4:	9c e0       	ldi	r25, 0x0C	; 12
   10de6:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"        R = REN\n");
   10dea:	be 01       	movw	r22, r28
   10dec:	8c ec       	ldi	r24, 0xCC	; 204
   10dee:	9c e0       	ldi	r25, 0x0C	; 12
   10df0:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"         I = IFC\n");
   10df4:	be 01       	movw	r22, r28
   10df6:	8d ed       	ldi	r24, 0xDD	; 221
   10df8:	9c e0       	ldi	r25, 0x0C	; 12
   10dfa:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10dfe:	be 01       	movw	r22, r28
   10e00:	8f ee       	ldi	r24, 0xEF	; 239
   10e02:	9c e0       	ldi	r25, 0x0C	; 12
   10e04:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10e08:	be 01       	movw	r22, r28
   10e0a:	81 e1       	ldi	r24, 0x11	; 17
   10e0c:	9d e0       	ldi	r25, 0x0D	; 13
   10e0e:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10e12:	be 01       	movw	r22, r28
   10e14:	89 e2       	ldi	r24, 0x29	; 41
   10e16:	9d e0       	ldi	r25, 0x0D	; 13
   10e18:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
    fprintf(fo,"              GPIB commands\n");
   10e1c:	be 01       	movw	r22, r28
   10e1e:	84 e4       	ldi	r24, 0x44	; 68
   10e20:	9d e0       	ldi	r25, 0x0D	; 13
   10e22:	0e 94 1f 75 	call	0xea3e	; 0xea3e <fputs>
}
   10e26:	df 91       	pop	r29
   10e28:	cf 91       	pop	r28
   10e2a:	08 95       	ret

00010e2c <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10e2c:	a9 e8       	ldi	r26, 0x89	; 137
   10e2e:	b0 e0       	ldi	r27, 0x00	; 0
   10e30:	ec e1       	ldi	r30, 0x1C	; 28
   10e32:	f7 e8       	ldi	r31, 0x87	; 135
   10e34:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
   10e38:	8c 01       	movw	r16, r24
   10e3a:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10e3c:	1a 86       	std	Y+10, r1	; 0x0a
   10e3e:	4c 01       	movw	r8, r24
   10e40:	88 24       	eor	r8, r8
   10e42:	44 e0       	ldi	r20, 0x04	; 4
   10e44:	94 22       	and	r9, r20
   10e46:	ce 01       	movw	r24, r28
   10e48:	0a 96       	adiw	r24, 0x0a	; 10
   10e4a:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10e4c:	62 30       	cpi	r22, 0x02	; 2
   10e4e:	71 05       	cpc	r23, r1
   10e50:	e8 f4       	brcc	.+58     	; 0x10e8c <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10e52:	81 14       	cp	r8, r1
   10e54:	91 04       	cpc	r9, r1
   10e56:	29 f4       	brne	.+10     	; 0x10e62 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10e58:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10e5a:	90 ee       	ldi	r25, 0xE0	; 224
   10e5c:	90 0f       	add	r25, r16
   10e5e:	9f 35       	cpi	r25, 0x5F	; 95
   10e60:	08 f0       	brcs	.+2      	; 0x10e64 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10e62:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10e64:	90 e0       	ldi	r25, 0x00	; 0
   10e66:	ed b7       	in	r30, 0x3d	; 61
   10e68:	fe b7       	in	r31, 0x3e	; 62
   10e6a:	91 87       	std	Z+9, r25	; 0x09
   10e6c:	80 87       	std	Z+8, r24	; 0x08
   10e6e:	c8 01       	movw	r24, r16
   10e70:	99 27       	eor	r25, r25
   10e72:	97 83       	std	Z+7, r25	; 0x07
   10e74:	86 83       	std	Z+6, r24	; 0x06
   10e76:	87 ee       	ldi	r24, 0xE7	; 231
   10e78:	9f e0       	ldi	r25, 0x0F	; 15
   10e7a:	a0 e0       	ldi	r26, 0x00	; 0
   10e7c:	83 83       	std	Z+3, r24	; 0x03
   10e7e:	94 83       	std	Z+4, r25	; 0x04
   10e80:	a5 83       	std	Z+5, r26	; 0x05
   10e82:	f2 82       	std	Z+2, r15	; 0x02
   10e84:	e1 82       	std	Z+1, r14	; 0x01
   10e86:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
   10e8a:	0c c0       	rjmp	.+24     	; 0x10ea4 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10e8c:	81 ee       	ldi	r24, 0xE1	; 225
   10e8e:	9f e0       	ldi	r25, 0x0F	; 15
   10e90:	a0 e0       	ldi	r26, 0x00	; 0
   10e92:	ed b7       	in	r30, 0x3d	; 61
   10e94:	fe b7       	in	r31, 0x3e	; 62
   10e96:	83 83       	std	Z+3, r24	; 0x03
   10e98:	94 83       	std	Z+4, r25	; 0x04
   10e9a:	a5 83       	std	Z+5, r26	; 0x05
   10e9c:	f2 82       	std	Z+2, r15	; 0x02
   10e9e:	e1 82       	std	Z+1, r14	; 0x01
   10ea0:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
    }

    tmp = str + strlen(str);
   10ea4:	f7 01       	movw	r30, r14
   10ea6:	01 90       	ld	r0, Z+
   10ea8:	00 20       	and	r0, r0
   10eaa:	e9 f7       	brne	.-6      	; 0x10ea6 <gpib_trace_display+0x7a>
   10eac:	31 97       	sbiw	r30, 0x01	; 1
   10eae:	cf 01       	movw	r24, r30
   10eb0:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10eb2:	81 14       	cp	r8, r1
   10eb4:	91 04       	cpc	r9, r1
   10eb6:	11 f0       	breq	.+4      	; 0x10ebc <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10eb8:	21 e4       	ldi	r18, 0x41	; 65
   10eba:	01 c0       	rjmp	.+2      	; 0x10ebe <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10ebc:	2d e2       	ldi	r18, 0x2D	; 45
   10ebe:	20 83       	st	Z, r18
   10ec0:	dc 01       	movw	r26, r24
   10ec2:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10ec4:	10 ff       	sbrs	r17, 0
   10ec6:	02 c0       	rjmp	.+4      	; 0x10ecc <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10ec8:	25 e4       	ldi	r18, 0x45	; 69
   10eca:	01 c0       	rjmp	.+2      	; 0x10ece <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10ecc:	2d e2       	ldi	r18, 0x2D	; 45
   10ece:	fc 01       	movw	r30, r24
   10ed0:	20 83       	st	Z, r18
   10ed2:	fd 01       	movw	r30, r26
   10ed4:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10ed6:	11 ff       	sbrs	r17, 1
   10ed8:	02 c0       	rjmp	.+4      	; 0x10ede <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10eda:	83 e5       	ldi	r24, 0x53	; 83
   10edc:	01 c0       	rjmp	.+2      	; 0x10ee0 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10ede:	8d e2       	ldi	r24, 0x2D	; 45
   10ee0:	8c 93       	st	X, r24
   10ee2:	df 01       	movw	r26, r30
   10ee4:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10ee6:	13 ff       	sbrs	r17, 3
   10ee8:	02 c0       	rjmp	.+4      	; 0x10eee <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10eea:	82 e5       	ldi	r24, 0x52	; 82
   10eec:	01 c0       	rjmp	.+2      	; 0x10ef0 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10eee:	8d e2       	ldi	r24, 0x2D	; 45
   10ef0:	80 83       	st	Z, r24
   10ef2:	fd 01       	movw	r30, r26
   10ef4:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10ef6:	14 ff       	sbrs	r17, 4
   10ef8:	02 c0       	rjmp	.+4      	; 0x10efe <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10efa:	89 e4       	ldi	r24, 0x49	; 73
   10efc:	01 c0       	rjmp	.+2      	; 0x10f00 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10efe:	8d e2       	ldi	r24, 0x2D	; 45
   10f00:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10f02:	a1 14       	cp	r10, r1
   10f04:	b1 04       	cpc	r11, r1
   10f06:	d1 f4       	brne	.+52     	; 0x10f3c <gpib_trace_display+0x110>
   10f08:	df 01       	movw	r26, r30
   10f0a:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10f0c:	15 ff       	sbrs	r17, 5
   10f0e:	02 c0       	rjmp	.+4      	; 0x10f14 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10f10:	80 e5       	ldi	r24, 0x50	; 80
   10f12:	01 c0       	rjmp	.+2      	; 0x10f16 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10f14:	8d e2       	ldi	r24, 0x2D	; 45
   10f16:	80 83       	st	Z, r24
   10f18:	fd 01       	movw	r30, r26
   10f1a:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10f1c:	16 ff       	sbrs	r17, 6
   10f1e:	02 c0       	rjmp	.+4      	; 0x10f24 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10f20:	84 e5       	ldi	r24, 0x54	; 84
   10f22:	01 c0       	rjmp	.+2      	; 0x10f26 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10f24:	8d e2       	ldi	r24, 0x2D	; 45
   10f26:	8c 93       	st	X, r24
   10f28:	cf 01       	movw	r24, r30
   10f2a:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10f2c:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10f2e:	17 ff       	sbrs	r17, 7
   10f30:	02 c0       	rjmp	.+4      	; 0x10f36 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10f32:	82 e4       	ldi	r24, 0x42	; 66
   10f34:	01 c0       	rjmp	.+2      	; 0x10f38 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10f36:	8d e2       	ldi	r24, 0x2D	; 45
   10f38:	80 83       	st	Z, r24
   10f3a:	08 c0       	rjmp	.+16     	; 0x10f4c <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10f3c:	8d e2       	ldi	r24, 0x2D	; 45
   10f3e:	80 83       	st	Z, r24
        *tmp++ = '-';
   10f40:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10f42:	6f 01       	movw	r12, r30
   10f44:	43 e0       	ldi	r20, 0x03	; 3
   10f46:	c4 0e       	add	r12, r20
   10f48:	d1 1c       	adc	r13, r1
   10f4a:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10f4c:	f6 01       	movw	r30, r12
   10f4e:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10f50:	f1 e0       	ldi	r31, 0x01	; 1
   10f52:	af 1a       	sub	r10, r31
   10f54:	b1 08       	sbc	r11, r1
   10f56:	42 e0       	ldi	r20, 0x02	; 2
   10f58:	a4 16       	cp	r10, r20
   10f5a:	b1 04       	cpc	r11, r1
   10f5c:	f0 f4       	brcc	.+60     	; 0x10f9a <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10f5e:	15 ff       	sbrs	r17, 5
   10f60:	03 c0       	rjmp	.+6      	; 0x10f68 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10f62:	61 e6       	ldi	r22, 0x61	; 97
   10f64:	7d e0       	ldi	r23, 0x0D	; 13
   10f66:	02 c0       	rjmp	.+4      	; 0x10f6c <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10f68:	65 e6       	ldi	r22, 0x65	; 101
   10f6a:	74 e0       	ldi	r23, 0x04	; 4
   10f6c:	c7 01       	movw	r24, r14
   10f6e:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
        if(status & NRFD_FLAG)
   10f72:	16 ff       	sbrs	r17, 6
   10f74:	03 c0       	rjmp	.+6      	; 0x10f7c <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10f76:	67 e6       	ldi	r22, 0x67	; 103
   10f78:	7d e0       	ldi	r23, 0x0D	; 13
   10f7a:	02 c0       	rjmp	.+4      	; 0x10f80 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10f7c:	65 e6       	ldi	r22, 0x65	; 101
   10f7e:	74 e0       	ldi	r23, 0x04	; 4
   10f80:	c7 01       	movw	r24, r14
   10f82:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
        if(status & NDAC_FLAG)
   10f86:	17 ff       	sbrs	r17, 7
   10f88:	03 c0       	rjmp	.+6      	; 0x10f90 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10f8a:	6d e6       	ldi	r22, 0x6D	; 109
   10f8c:	7d e0       	ldi	r23, 0x0D	; 13
   10f8e:	02 c0       	rjmp	.+4      	; 0x10f94 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10f90:	65 e6       	ldi	r22, 0x65	; 101
   10f92:	74 e0       	ldi	r23, 0x04	; 4
   10f94:	c7 01       	movw	r24, r14
   10f96:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
    }

    if( (status & ATN_FLAG) )
   10f9a:	81 14       	cp	r8, r1
   10f9c:	91 04       	cpc	r9, r1
   10f9e:	09 f4       	brne	.+2      	; 0x10fa2 <gpib_trace_display+0x176>
   10fa0:	5a c0       	rjmp	.+180    	; 0x11056 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10fa2:	c8 01       	movw	r24, r16
   10fa4:	8f 77       	andi	r24, 0x7F	; 127
   10fa6:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10fa8:	9c 01       	movw	r18, r24
   10faa:	20 52       	subi	r18, 0x20	; 32
   10fac:	31 09       	sbc	r19, r1
   10fae:	2f 31       	cpi	r18, 0x1F	; 31
   10fb0:	31 05       	cpc	r19, r1
   10fb2:	48 f4       	brcc	.+18     	; 0x10fc6 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10fb4:	0f 71       	andi	r16, 0x1F	; 31
   10fb6:	11 27       	eor	r17, r17
   10fb8:	ed b7       	in	r30, 0x3d	; 61
   10fba:	fe b7       	in	r31, 0x3e	; 62
   10fbc:	17 83       	std	Z+7, r17	; 0x07
   10fbe:	06 83       	std	Z+6, r16	; 0x06
   10fc0:	86 ed       	ldi	r24, 0xD6	; 214
   10fc2:	9f e0       	ldi	r25, 0x0F	; 15
   10fc4:	0e c0       	rjmp	.+28     	; 0x10fe2 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   10fc6:	9c 01       	movw	r18, r24
   10fc8:	20 54       	subi	r18, 0x40	; 64
   10fca:	31 09       	sbc	r19, r1
   10fcc:	2f 30       	cpi	r18, 0x0F	; 15
   10fce:	31 05       	cpc	r19, r1
   10fd0:	88 f4       	brcc	.+34     	; 0x10ff4 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   10fd2:	0f 71       	andi	r16, 0x1F	; 31
   10fd4:	11 27       	eor	r17, r17
   10fd6:	ed b7       	in	r30, 0x3d	; 61
   10fd8:	fe b7       	in	r31, 0x3e	; 62
   10fda:	17 83       	std	Z+7, r17	; 0x07
   10fdc:	06 83       	std	Z+6, r16	; 0x06
   10fde:	8b ec       	ldi	r24, 0xCB	; 203
   10fe0:	9f e0       	ldi	r25, 0x0F	; 15
   10fe2:	a0 e0       	ldi	r26, 0x00	; 0
   10fe4:	83 83       	std	Z+3, r24	; 0x03
   10fe6:	94 83       	std	Z+4, r25	; 0x04
   10fe8:	a5 83       	std	Z+5, r26	; 0x05
   10fea:	d2 82       	std	Z+2, r13	; 0x02
   10fec:	c1 82       	std	Z+1, r12	; 0x01
   10fee:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
   10ff2:	31 c0       	rjmp	.+98     	; 0x11056 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   10ff4:	9c 01       	movw	r18, r24
   10ff6:	20 56       	subi	r18, 0x60	; 96
   10ff8:	31 09       	sbc	r19, r1
   10ffa:	20 31       	cpi	r18, 0x10	; 16
   10ffc:	31 05       	cpc	r19, r1
   10ffe:	28 f0       	brcs	.+10     	; 0x1100a <gpib_trace_display+0x1de>
   11000:	e2 e8       	ldi	r30, 0x82	; 130
   11002:	f1 e0       	ldi	r31, 0x01	; 1
   11004:	00 e0       	ldi	r16, 0x00	; 0
   11006:	10 e0       	ldi	r17, 0x00	; 0
   11008:	0b c0       	rjmp	.+22     	; 0x11020 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1100a:	0f 71       	andi	r16, 0x1F	; 31
   1100c:	11 27       	eor	r17, r17
   1100e:	ed b7       	in	r30, 0x3d	; 61
   11010:	fe b7       	in	r31, 0x3e	; 62
   11012:	17 83       	std	Z+7, r17	; 0x07
   11014:	06 83       	std	Z+6, r16	; 0x06
   11016:	80 ec       	ldi	r24, 0xC0	; 192
   11018:	9f e0       	ldi	r25, 0x0F	; 15
   1101a:	e3 cf       	rjmp	.-58     	; 0x10fe2 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1101c:	0f 5f       	subi	r16, 0xFF	; 255
   1101e:	1f 4f       	sbci	r17, 0xFF	; 255
   11020:	20 81       	ld	r18, Z
   11022:	31 81       	ldd	r19, Z+1	; 0x01
   11024:	2f 3f       	cpi	r18, 0xFF	; 255
   11026:	4f ef       	ldi	r20, 0xFF	; 255
   11028:	34 07       	cpc	r19, r20
   1102a:	a9 f0       	breq	.+42     	; 0x11056 <gpib_trace_display+0x22a>
   1102c:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1102e:	82 17       	cp	r24, r18
   11030:	93 07       	cpc	r25, r19
   11032:	a1 f7       	brne	.-24     	; 0x1101c <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11034:	69 e6       	ldi	r22, 0x69	; 105
   11036:	74 e0       	ldi	r23, 0x04	; 4
   11038:	c6 01       	movw	r24, r12
   1103a:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1103e:	f8 01       	movw	r30, r16
   11040:	ee 0f       	add	r30, r30
   11042:	ff 1f       	adc	r31, r31
   11044:	ee 0f       	add	r30, r30
   11046:	ff 1f       	adc	r31, r31
   11048:	ee 57       	subi	r30, 0x7E	; 126
   1104a:	fe 4f       	sbci	r31, 0xFE	; 254
   1104c:	62 81       	ldd	r22, Z+2	; 0x02
   1104e:	73 81       	ldd	r23, Z+3	; 0x03
   11050:	c6 01       	movw	r24, r12
   11052:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11056:	20 91 51 19 	lds	r18, 0x1951	; 0x801951 <gpib_log_fp>
   1105a:	30 91 52 19 	lds	r19, 0x1952	; 0x801952 <gpib_log_fp+0x1>
   1105e:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <__iob+0x2>
   11062:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <__iob+0x3>
   11066:	23 2b       	or	r18, r19
   11068:	21 f4       	brne	.+8      	; 0x11072 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1106a:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <gpib_log_fp+0x1>
   1106e:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11072:	20 91 51 19 	lds	r18, 0x1951	; 0x801951 <gpib_log_fp>
   11076:	30 91 52 19 	lds	r19, 0x1952	; 0x801952 <gpib_log_fp+0x1>
   1107a:	82 17       	cp	r24, r18
   1107c:	93 07       	cpc	r25, r19
   1107e:	19 f0       	breq	.+6      	; 0x11086 <gpib_trace_display+0x25a>
        puts(str);
   11080:	c7 01       	movw	r24, r14
   11082:	0e 94 37 75 	call	0xea6e	; 0xea6e <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11086:	ed b7       	in	r30, 0x3d	; 61
   11088:	fe b7       	in	r31, 0x3e	; 62
   1108a:	f6 82       	std	Z+6, r15	; 0x06
   1108c:	e5 82       	std	Z+5, r14	; 0x05
   1108e:	83 e7       	ldi	r24, 0x73	; 115
   11090:	9d e0       	ldi	r25, 0x0D	; 13
   11092:	94 83       	std	Z+4, r25	; 0x04
   11094:	83 83       	std	Z+3, r24	; 0x03
   11096:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <gpib_log_fp>
   1109a:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <gpib_log_fp+0x1>
   1109e:	92 83       	std	Z+2, r25	; 0x02
   110a0:	81 83       	std	Z+1, r24	; 0x01
   110a2:	0e 94 df 7c 	call	0xf9be	; 0xf9be <fprintf>
}
   110a6:	c7 57       	subi	r28, 0x77	; 119
   110a8:	df 4f       	sbci	r29, 0xFF	; 255
   110aa:	ec e0       	ldi	r30, 0x0C	; 12
   110ac:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

000110b0 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   110b0:	af 92       	push	r10
   110b2:	bf 92       	push	r11
   110b4:	cf 92       	push	r12
   110b6:	df 92       	push	r13
   110b8:	ef 92       	push	r14
   110ba:	ff 92       	push	r15
   110bc:	0f 93       	push	r16
   110be:	1f 93       	push	r17
   110c0:	cf 93       	push	r28
   110c2:	00 d0       	rcall	.+0      	; 0x110c4 <gpib_read_byte+0x14>
   110c4:	00 d0       	rcall	.+0      	; 0x110c6 <gpib_read_byte+0x16>
   110c6:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   110c8:	20 91 50 19 	lds	r18, 0x1950	; 0x801950 <gpib_unread_f>
   110cc:	22 23       	and	r18, r18
   110ce:	39 f0       	breq	.+14     	; 0x110de <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   110d0:	10 92 50 19 	sts	0x1950, r1	; 0x801950 <gpib_unread_f>
        return(gpib_unread_data);
   110d4:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <gpib_unread_data>
   110d8:	90 91 e3 1e 	lds	r25, 0x1EE3	; 0x801ee3 <gpib_unread_data+0x1>
   110dc:	f2 c0       	rjmp	.+484    	; 0x112c2 <gpib_read_byte+0x212>
   110de:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   110e0:	81 e0       	ldi	r24, 0x01	; 1
   110e2:	f8 db       	rcall	.-2064   	; 0x108d4 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   110e4:	c1 14       	cp	r12, r1
   110e6:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   110e8:	51 f0       	breq	.+20     	; 0x110fe <gpib_read_byte+0x4e>
   110ea:	ed dc       	rcall	.-1574   	; 0x10ac6 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   110ec:	7c 01       	movw	r14, r24
   110ee:	fb dc       	rcall	.-1546   	; 0x10ae6 <gpib_handshake_pin_read>
   110f0:	e8 2a       	or	r14, r24
   110f2:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   110f4:	62 e0       	ldi	r22, 0x02	; 2
   110f6:	70 e0       	ldi	r23, 0x00	; 0
   110f8:	c7 01       	movw	r24, r14
   110fa:	98 de       	rcall	.-720    	; 0x10e2c <gpib_trace_display>
   110fc:	02 c0       	rjmp	.+4      	; 0x11102 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   110fe:	e1 2c       	mov	r14, r1
   11100:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11102:	64 ef       	ldi	r22, 0xF4	; 244
   11104:	71 e0       	ldi	r23, 0x01	; 1
   11106:	80 e0       	ldi	r24, 0x00	; 0
   11108:	90 e0       	ldi	r25, 0x00	; 0
   1110a:	a2 db       	rcall	.-2236   	; 0x10850 <gpib_timeout_set>
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   1110c:	00 e0       	ldi	r16, 0x00	; 0
   1110e:	10 e0       	ldi	r17, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
   11110:	c0 e0       	ldi	r28, 0x00	; 0
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11112:	0e 94 e6 dd 	call	0x1bbcc	; 0x1bbcc <gpib_user_task>

        if(uart_keyhit(0))
   11116:	80 e0       	ldi	r24, 0x00	; 0
   11118:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <uart_keyhit>
   1111c:	89 2b       	or	r24, r25
   1111e:	99 f0       	breq	.+38     	; 0x11146 <gpib_read_byte+0x96>
		{
			if(debuglevel & GPIB_ERR)
   11120:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11124:	80 ff       	sbrs	r24, 0
   11126:	ab c0       	rjmp	.+342    	; 0x1127e <gpib_read_byte+0x1ce>
				printf("gpib_read_byte: state=%d\n", rx_state);
   11128:	8c 2f       	mov	r24, r28
   1112a:	90 e0       	ldi	r25, 0x00	; 0
   1112c:	ed b7       	in	r30, 0x3d	; 61
   1112e:	fe b7       	in	r31, 0x3e	; 62
   11130:	95 83       	std	Z+5, r25	; 0x05
   11132:	84 83       	std	Z+4, r24	; 0x04
   11134:	8e e0       	ldi	r24, 0x0E	; 14
   11136:	90 e1       	ldi	r25, 0x10	; 16
   11138:	a0 e0       	ldi	r26, 0x00	; 0
   1113a:	81 83       	std	Z+1, r24	; 0x01
   1113c:	92 83       	std	Z+2, r25	; 0x02
   1113e:	a3 83       	std	Z+3, r26	; 0x03
   11140:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   11144:	9c c0       	rjmp	.+312    	; 0x1127e <gpib_read_byte+0x1ce>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11146:	4c 99       	sbic	0x09, 4	; 9
   11148:	15 c0       	rjmp	.+42     	; 0x11174 <gpib_read_byte+0xc4>
        {
            ch |= IFC_FLAG;
   1114a:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1114c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11150:	80 ff       	sbrs	r24, 0
   11152:	0e c0       	rjmp	.+28     	; 0x11170 <gpib_read_byte+0xc0>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11154:	8c 2f       	mov	r24, r28
   11156:	90 e0       	ldi	r25, 0x00	; 0
   11158:	ed b7       	in	r30, 0x3d	; 61
   1115a:	fe b7       	in	r31, 0x3e	; 62
   1115c:	95 83       	std	Z+5, r25	; 0x05
   1115e:	84 83       	std	Z+4, r24	; 0x04
   11160:	80 ef       	ldi	r24, 0xF0	; 240
   11162:	9f e0       	ldi	r25, 0x0F	; 15
   11164:	a0 e0       	ldi	r26, 0x00	; 0
   11166:	81 83       	std	Z+1, r24	; 0x01
   11168:	92 83       	std	Z+2, r25	; 0x02
   1116a:	a3 83       	std	Z+3, r26	; 0x03
   1116c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            gpib_bus_init();
   11170:	79 db       	rcall	.-2318   	; 0x10864 <gpib_bus_init>
   11172:	85 c0       	rjmp	.+266    	; 0x1127e <gpib_read_byte+0x1ce>
            break;
        }

        switch(rx_state)
   11174:	c2 30       	cpi	r28, 0x02	; 2
   11176:	31 f1       	breq	.+76     	; 0x111c4 <gpib_read_byte+0x114>
   11178:	28 f4       	brcc	.+10     	; 0x11184 <gpib_read_byte+0xd4>
   1117a:	cc 23       	and	r28, r28
   1117c:	69 f0       	breq	.+26     	; 0x11198 <gpib_read_byte+0xe8>
   1117e:	c1 30       	cpi	r28, 0x01	; 1
   11180:	c9 f0       	breq	.+50     	; 0x111b4 <gpib_read_byte+0x104>
   11182:	63 c0       	rjmp	.+198    	; 0x1124a <gpib_read_byte+0x19a>
   11184:	c5 30       	cpi	r28, 0x05	; 5
   11186:	09 f4       	brne	.+2      	; 0x1118a <gpib_read_byte+0xda>
   11188:	54 c0       	rjmp	.+168    	; 0x11232 <gpib_read_byte+0x182>
   1118a:	c7 30       	cpi	r28, 0x07	; 7
   1118c:	09 f4       	brne	.+2      	; 0x11190 <gpib_read_byte+0xe0>
   1118e:	58 c0       	rjmp	.+176    	; 0x11240 <gpib_read_byte+0x190>
   11190:	c4 30       	cpi	r28, 0x04	; 4
   11192:	09 f0       	breq	.+2      	; 0x11196 <gpib_read_byte+0xe6>
   11194:	5a c0       	rjmp	.+180    	; 0x1124a <gpib_read_byte+0x19a>
   11196:	3e c0       	rjmp	.+124    	; 0x11214 <gpib_read_byte+0x164>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11198:	19 9b       	sbis	0x03, 1	; 3
   1119a:	43 c0       	rjmp	.+134    	; 0x11222 <gpib_read_byte+0x172>
   1119c:	fd e0       	ldi	r31, 0x0D	; 13
   1119e:	fa 95       	dec	r31
   111a0:	f1 f7       	brne	.-4      	; 0x1119e <gpib_read_byte+0xee>
   111a2:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   111a4:	52 98       	cbi	0x0a, 2	; 10
   111a6:	5a 9a       	sbi	0x0b, 2	; 11
   111a8:	8d e0       	ldi	r24, 0x0D	; 13
   111aa:	8a 95       	dec	r24
   111ac:	f1 f7       	brne	.-4      	; 0x111aa <gpib_read_byte+0xfa>
   111ae:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   111b0:	c1 e0       	ldi	r28, 0x01	; 1
   111b2:	37 c0       	rjmp	.+110    	; 0x11222 <gpib_read_byte+0x172>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   111b4:	19 99       	sbic	0x03, 1	; 3
   111b6:	80 c0       	rjmp	.+256    	; 0x112b8 <gpib_read_byte+0x208>
   111b8:	ed e0       	ldi	r30, 0x0D	; 13
   111ba:	ea 95       	dec	r30
   111bc:	f1 f7       	brne	.-4      	; 0x111ba <gpib_read_byte+0x10a>
   111be:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   111c0:	c2 e0       	ldi	r28, 0x02	; 2
   111c2:	7a c0       	rjmp	.+244    	; 0x112b8 <gpib_read_byte+0x208>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   111c4:	5a 98       	cbi	0x0b, 2	; 11
   111c6:	52 9a       	sbi	0x0a, 2	; 10
   111c8:	fd e0       	ldi	r31, 0x0D	; 13
   111ca:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   111cc:	f1 f7       	brne	.-4      	; 0x111ca <gpib_read_byte+0x11a>
   111ce:	00 00       	nop
   111d0:	74 dc       	rcall	.-1816   	; 0x10aba <gpib_bus_read>
   111d2:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   111d4:	b1 2c       	mov	r11, r1
   111d6:	77 dc       	rcall	.-1810   	; 0x10ac6 <gpib_control_pin_read>
   111d8:	7c 01       	movw	r14, r24
   111da:	08 2b       	or	r16, r24
                ch |= control_last;
   111dc:	19 2b       	or	r17, r25
   111de:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   111e0:	1b 29       	or	r17, r11
   111e2:	c1 14       	cp	r12, r1
   111e4:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   111e6:	49 f0       	breq	.+18     	; 0x111fa <gpib_read_byte+0x14a>
   111e8:	7e dc       	rcall	.-1796   	; 0x10ae6 <gpib_handshake_pin_read>
   111ea:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   111ec:	f9 2a       	or	r15, r25
   111ee:	61 e0       	ldi	r22, 0x01	; 1
   111f0:	70 e0       	ldi	r23, 0x00	; 0
   111f2:	c5 01       	movw	r24, r10
   111f4:	8e 29       	or	r24, r14
   111f6:	9f 29       	or	r25, r15
   111f8:	19 de       	rcall	.-974    	; 0x10e2c <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   111fa:	53 98       	cbi	0x0a, 3	; 10
   111fc:	5b 9a       	sbi	0x0b, 3	; 11
   111fe:	8d e0       	ldi	r24, 0x0D	; 13
   11200:	8a 95       	dec	r24
   11202:	f1 f7       	brne	.-4      	; 0x11200 <gpib_read_byte+0x150>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11204:	00 00       	nop
   11206:	64 ef       	ldi	r22, 0xF4	; 244
   11208:	71 e0       	ldi	r23, 0x01	; 1
   1120a:	80 e0       	ldi	r24, 0x00	; 0
   1120c:	90 e0       	ldi	r25, 0x00	; 0
   1120e:	20 db       	rcall	.-2496   	; 0x10850 <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11210:	c4 e0       	ldi	r28, 0x04	; 4
   11212:	52 c0       	rjmp	.+164    	; 0x112b8 <gpib_read_byte+0x208>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11214:	19 9b       	sbis	0x03, 1	; 3
   11216:	05 c0       	rjmp	.+10     	; 0x11222 <gpib_read_byte+0x172>
   11218:	ed e0       	ldi	r30, 0x0D	; 13
   1121a:	ea 95       	dec	r30
   1121c:	f1 f7       	brne	.-4      	; 0x1121a <gpib_read_byte+0x16a>
   1121e:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   11220:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11222:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11226:	88 23       	and	r24, r24
   11228:	09 f4       	brne	.+2      	; 0x1122c <gpib_read_byte+0x17c>
   1122a:	46 c0       	rjmp	.+140    	; 0x112b8 <gpib_read_byte+0x208>
                {
                    ch |= TIMEOUT_FLAG;
   1122c:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1122e:	c7 e0       	ldi	r28, 0x07	; 7
   11230:	43 c0       	rjmp	.+134    	; 0x112b8 <gpib_read_byte+0x208>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11232:	5b 98       	cbi	0x0b, 3	; 11
   11234:	53 9a       	sbi	0x0a, 3	; 10
   11236:	fd e0       	ldi	r31, 0x0D	; 13
   11238:	fa 95       	dec	r31
   1123a:	f1 f7       	brne	.-4      	; 0x11238 <gpib_read_byte+0x188>
   1123c:	00 00       	nop
   1123e:	09 c0       	rjmp	.+18     	; 0x11252 <gpib_read_byte+0x1a2>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11240:	5a 98       	cbi	0x0b, 2	; 11
   11242:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11244:	5b 98       	cbi	0x0b, 3	; 11
   11246:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11248:	04 c0       	rjmp	.+8      	; 0x11252 <gpib_read_byte+0x1a2>
   1124a:	c1 14       	cp	r12, r1
   1124c:	d1 04       	cpc	r13, r1
   1124e:	91 f0       	breq	.+36     	; 0x11274 <gpib_read_byte+0x1c4>
   11250:	04 c0       	rjmp	.+8      	; 0x1125a <gpib_read_byte+0x1aa>
   11252:	c1 14       	cp	r12, r1
   11254:	d1 04       	cpc	r13, r1
   11256:	99 f0       	breq	.+38     	; 0x1127e <gpib_read_byte+0x1ce>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11258:	c8 e0       	ldi	r28, 0x08	; 8
   1125a:	35 dc       	rcall	.-1942   	; 0x10ac6 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   1125c:	5c 01       	movw	r10, r24
   1125e:	43 dc       	rcall	.-1914   	; 0x10ae6 <gpib_handshake_pin_read>
   11260:	a8 2a       	or	r10, r24
   11262:	b9 2a       	or	r11, r25
            if(control_last != control)
   11264:	ae 14       	cp	r10, r14
   11266:	bf 04       	cpc	r11, r15
   11268:	31 f0       	breq	.+12     	; 0x11276 <gpib_read_byte+0x1c6>
            {
                gpib_trace_display(control, TRACE_BUS);
   1126a:	62 e0       	ldi	r22, 0x02	; 2
   1126c:	70 e0       	ldi	r23, 0x00	; 0
   1126e:	c5 01       	movw	r24, r10
   11270:	dd dd       	rcall	.-1094   	; 0x10e2c <gpib_trace_display>
   11272:	01 c0       	rjmp	.+2      	; 0x11276 <gpib_read_byte+0x1c6>
   11274:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11276:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11278:	11 f0       	breq	.+4      	; 0x1127e <gpib_read_byte+0x1ce>
   1127a:	75 01       	movw	r14, r10
   1127c:	4a cf       	rjmp	.-364    	; 0x11112 <gpib_read_byte+0x62>
   1127e:	80 91 dc 1e 	lds	r24, 0x1EDC	; 0x801edc <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11282:	90 91 dd 1e 	lds	r25, 0x1EDD	; 0x801edd <current+0x1>
   11286:	90 93 d9 1c 	sts	0x1CD9, r25	; 0x801cd9 <lastcmd+0x1>
   1128a:	80 93 d8 1c 	sts	0x1CD8, r24	; 0x801cd8 <lastcmd>
   1128e:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11290:	88 27       	eor	r24, r24
   11292:	90 7d       	andi	r25, 0xD0	; 208
   11294:	89 2b       	or	r24, r25
   11296:	11 f4       	brne	.+4      	; 0x1129c <gpib_read_byte+0x1ec>
   11298:	12 fd       	sbrc	r17, 2
   1129a:	05 c0       	rjmp	.+10     	; 0x112a6 <gpib_read_byte+0x1f6>
   1129c:	10 92 dd 1e 	sts	0x1EDD, r1	; 0x801edd <current+0x1>
        current = 0;
   112a0:	10 92 dc 1e 	sts	0x1EDC, r1	; 0x801edc <current>
   112a4:	07 c0       	rjmp	.+14     	; 0x112b4 <gpib_read_byte+0x204>
   112a6:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   112a8:	8f 77       	andi	r24, 0x7F	; 127
   112aa:	99 27       	eor	r25, r25
   112ac:	90 93 dd 1e 	sts	0x1EDD, r25	; 0x801edd <current+0x1>
   112b0:	80 93 dc 1e 	sts	0x1EDC, r24	; 0x801edc <current>
   112b4:	c8 01       	movw	r24, r16
   112b6:	05 c0       	rjmp	.+10     	; 0x112c2 <gpib_read_byte+0x212>
   112b8:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   112ba:	d1 04       	cpc	r13, r1
   112bc:	09 f4       	brne	.+2      	; 0x112c0 <gpib_read_byte+0x210>
   112be:	29 cf       	rjmp	.-430    	; 0x11112 <gpib_read_byte+0x62>
   112c0:	cc cf       	rjmp	.-104    	; 0x1125a <gpib_read_byte+0x1aa>
   112c2:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   112c4:	0f 90       	pop	r0
   112c6:	0f 90       	pop	r0
   112c8:	0f 90       	pop	r0
   112ca:	0f 90       	pop	r0
   112cc:	cf 91       	pop	r28
   112ce:	1f 91       	pop	r17
   112d0:	0f 91       	pop	r16
   112d2:	ff 90       	pop	r15
   112d4:	ef 90       	pop	r14
   112d6:	df 90       	pop	r13
   112d8:	cf 90       	pop	r12
   112da:	bf 90       	pop	r11
   112dc:	af 90       	pop	r10
   112de:	08 95       	ret

000112e0 <gpib_decode>:
   112e0:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   112e2:	70 e0       	ldi	r23, 0x00	; 0
   112e4:	a3 cd       	rjmp	.-1210   	; 0x10e2c <gpib_trace_display>
   112e6:	08 95       	ret

000112e8 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   112e8:	a7 e0       	ldi	r26, 0x07	; 7
   112ea:	b0 e0       	ldi	r27, 0x00	; 0
   112ec:	ea e7       	ldi	r30, 0x7A	; 122
   112ee:	f9 e8       	ldi	r31, 0x89	; 137
   112f0:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
   112f4:	5b 01       	movw	r10, r22
   112f6:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   112f8:	fa 01       	movw	r30, r20
   112fa:	20 81       	ld	r18, Z
   112fc:	31 81       	ldd	r19, Z+1	; 0x01
   112fe:	22 27       	eor	r18, r18
   11300:	31 83       	std	Z+1, r19	; 0x01
   11302:	20 83       	st	Z, r18

    if(!size)
   11304:	67 2b       	or	r22, r23
   11306:	21 f0       	breq	.+8      	; 0x11310 <gpib_read_str+0x28>
   11308:	7c 01       	movw	r14, r24
   1130a:	00 e0       	ldi	r16, 0x00	; 0
   1130c:	10 e0       	ldi	r17, 0x00	; 0
   1130e:	28 c0       	rjmp	.+80     	; 0x11360 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11310:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11314:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11318:	81 72       	andi	r24, 0x21	; 33
   1131a:	91 70       	andi	r25, 0x01	; 1
   1131c:	89 2b       	or	r24, r25
   1131e:	09 f4       	brne	.+2      	; 0x11322 <gpib_read_str+0x3a>
   11320:	7c c0       	rjmp	.+248    	; 0x1141a <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11322:	87 ea       	ldi	r24, 0xA7	; 167
   11324:	9f e0       	ldi	r25, 0x0F	; 15
   11326:	a0 e0       	ldi	r26, 0x00	; 0
   11328:	ed b7       	in	r30, 0x3d	; 61
   1132a:	fe b7       	in	r31, 0x3e	; 62
   1132c:	81 83       	std	Z+1, r24	; 0x01
   1132e:	92 83       	std	Z+2, r25	; 0x02
   11330:	a3 83       	std	Z+3, r26	; 0x03
   11332:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   11336:	71 c0       	rjmp	.+226    	; 0x1141a <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11338:	8c 27       	eor	r24, r28
   1133a:	9d 27       	eor	r25, r29
   1133c:	92 fd       	sbrc	r25, 2
   1133e:	2e c0       	rjmp	.+92     	; 0x1139c <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11340:	ce 01       	movw	r24, r28
   11342:	88 27       	eor	r24, r24
   11344:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11346:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11348:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   1134a:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1134c:	f7 01       	movw	r30, r14
   1134e:	20 83       	st	Z, r18
        ++ind;
   11350:	0f 5f       	subi	r16, 0xFF	; 255
   11352:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11354:	89 2b       	or	r24, r25
   11356:	09 f4       	brne	.+2      	; 0x1135a <gpib_read_str+0x72>
   11358:	3c c0       	rjmp	.+120    	; 0x113d2 <gpib_read_str+0xea>
   1135a:	ff ef       	ldi	r31, 0xFF	; 255
   1135c:	ef 1a       	sub	r14, r31
   1135e:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11360:	0a 15       	cp	r16, r10
   11362:	1b 05       	cpc	r17, r11
   11364:	0c f0       	brlt	.+2      	; 0x11368 <gpib_read_str+0x80>
   11366:	3f c0       	rjmp	.+126    	; 0x113e6 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11368:	80 e0       	ldi	r24, 0x00	; 0
   1136a:	90 e0       	ldi	r25, 0x00	; 0
   1136c:	a1 de       	rcall	.-702    	; 0x110b0 <gpib_read_byte>
   1136e:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11370:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11374:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11378:	90 ff       	sbrs	r25, 0
   1137a:	02 c0       	rjmp	.+4      	; 0x11380 <gpib_read_str+0x98>
            gpib_decode(val);
   1137c:	ce 01       	movw	r24, r28
   1137e:	b0 df       	rcall	.-160    	; 0x112e0 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   11380:	9e 01       	movw	r18, r28
   11382:	22 27       	eor	r18, r18
   11384:	30 7d       	andi	r19, 0xD0	; 208
   11386:	f6 01       	movw	r30, r12
   11388:	80 81       	ld	r24, Z
   1138a:	91 81       	ldd	r25, Z+1	; 0x01
   1138c:	21 15       	cp	r18, r1
   1138e:	31 05       	cpc	r19, r1
   11390:	99 f2       	breq	.-90     	; 0x11338 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   11392:	82 2b       	or	r24, r18
   11394:	93 2b       	or	r25, r19
   11396:	91 83       	std	Z+1, r25	; 0x01
   11398:	80 83       	st	Z, r24
            break;
   1139a:	28 c0       	rjmp	.+80     	; 0x113ec <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1139c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113a4:	81 72       	andi	r24, 0x21	; 33
   113a6:	91 70       	andi	r25, 0x01	; 1
   113a8:	89 2b       	or	r24, r25
   113aa:	81 f0       	breq	.+32     	; 0x113cc <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   113ac:	ce 01       	movw	r24, r28
   113ae:	99 27       	eor	r25, r25
   113b0:	ed b7       	in	r30, 0x3d	; 61
   113b2:	fe b7       	in	r31, 0x3e	; 62
   113b4:	97 83       	std	Z+7, r25	; 0x07
   113b6:	86 83       	std	Z+6, r24	; 0x06
   113b8:	15 83       	std	Z+5, r17	; 0x05
   113ba:	04 83       	std	Z+4, r16	; 0x04
   113bc:	8a e7       	ldi	r24, 0x7A	; 122
   113be:	9f e0       	ldi	r25, 0x0F	; 15
   113c0:	a0 e0       	ldi	r26, 0x00	; 0
   113c2:	81 83       	std	Z+1, r24	; 0x01
   113c4:	92 83       	std	Z+2, r25	; 0x02
   113c6:	a3 83       	std	Z+3, r26	; 0x03
   113c8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            gpib_unread(val);
   113cc:	ce 01       	movw	r24, r28
   113ce:	4b db       	rcall	.-2410   	; 0x10a66 <gpib_unread>
            break;
   113d0:	0d c0       	rjmp	.+26     	; 0x113ec <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   113d2:	d0 ff       	sbrs	r29, 0
   113d4:	c2 cf       	rjmp	.-124    	; 0x1135a <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   113d6:	f6 01       	movw	r30, r12
   113d8:	80 81       	ld	r24, Z
   113da:	91 81       	ldd	r25, Z+1	; 0x01
   113dc:	90 fd       	sbrc	r25, 0
   113de:	1f c0       	rjmp	.+62     	; 0x1141e <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   113e0:	91 60       	ori	r25, 0x01	; 1
   113e2:	91 83       	std	Z+1, r25	; 0x01
   113e4:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   113e6:	0a 15       	cp	r16, r10
   113e8:	1b 05       	cpc	r17, r11
   113ea:	c9 f0       	breq	.+50     	; 0x1141e <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   113ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113f0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113f4:	81 72       	andi	r24, 0x21	; 33
   113f6:	99 27       	eor	r25, r25
   113f8:	89 2b       	or	r24, r25
   113fa:	89 f0       	breq	.+34     	; 0x1141e <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   113fc:	ed b7       	in	r30, 0x3d	; 61
   113fe:	fe b7       	in	r31, 0x3e	; 62
   11400:	b7 82       	std	Z+7, r11	; 0x07
   11402:	a6 82       	std	Z+6, r10	; 0x06
   11404:	15 83       	std	Z+5, r17	; 0x05
   11406:	04 83       	std	Z+4, r16	; 0x04
   11408:	83 e5       	ldi	r24, 0x53	; 83
   1140a:	9f e0       	ldi	r25, 0x0F	; 15
   1140c:	a0 e0       	ldi	r26, 0x00	; 0
   1140e:	81 83       	std	Z+1, r24	; 0x01
   11410:	92 83       	std	Z+2, r25	; 0x02
   11412:	a3 83       	std	Z+3, r26	; 0x03
   11414:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   11418:	02 c0       	rjmp	.+4      	; 0x1141e <gpib_read_str+0x136>
   1141a:	00 e0       	ldi	r16, 0x00	; 0
   1141c:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1141e:	c8 01       	movw	r24, r16
   11420:	cd b7       	in	r28, 0x3d	; 61
   11422:	de b7       	in	r29, 0x3e	; 62
   11424:	27 96       	adiw	r28, 0x07	; 7
   11426:	ea e0       	ldi	r30, 0x0A	; 10
   11428:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0001142c <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1142c:	a7 e0       	ldi	r26, 0x07	; 7
   1142e:	b0 e0       	ldi	r27, 0x00	; 0
   11430:	ec e1       	ldi	r30, 0x1C	; 28
   11432:	fa e8       	ldi	r31, 0x8A	; 138
   11434:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
   11438:	d8 2f       	mov	r29, r24
   1143a:	c9 2f       	mov	r28, r25
   1143c:	7b 01       	movw	r14, r22
   1143e:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11440:	fa 01       	movw	r30, r20
   11442:	80 81       	ld	r24, Z
   11444:	91 81       	ldd	r25, Z+1	; 0x01
   11446:	88 27       	eor	r24, r24
   11448:	91 83       	std	Z+1, r25	; 0x01
   1144a:	80 83       	st	Z, r24

    if(!size)
   1144c:	67 2b       	or	r22, r23
   1144e:	91 f4       	brne	.+36     	; 0x11474 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11450:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11454:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11458:	81 72       	andi	r24, 0x21	; 33
   1145a:	91 70       	andi	r25, 0x01	; 1
   1145c:	89 2b       	or	r24, r25
   1145e:	51 f0       	breq	.+20     	; 0x11474 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   11460:	89 e3       	ldi	r24, 0x39	; 57
   11462:	9f e0       	ldi	r25, 0x0F	; 15
   11464:	a0 e0       	ldi	r26, 0x00	; 0
   11466:	ed b7       	in	r30, 0x3d	; 61
   11468:	fe b7       	in	r31, 0x3e	; 62
   1146a:	81 83       	std	Z+1, r24	; 0x01
   1146c:	92 83       	std	Z+2, r25	; 0x02
   1146e:	a3 83       	std	Z+3, r26	; 0x03
   11470:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11474:	80 e0       	ldi	r24, 0x00	; 0
   11476:	2e da       	rcall	.-2980   	; 0x108d4 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11478:	4e 9b       	sbis	0x09, 6	; 9
   1147a:	06 c0       	rjmp	.+12     	; 0x11488 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   1147c:	64 ef       	ldi	r22, 0xF4	; 244
   1147e:	71 e0       	ldi	r23, 0x01	; 1
   11480:	80 e0       	ldi	r24, 0x00	; 0
   11482:	90 e0       	ldi	r25, 0x00	; 0
   11484:	e5 d9       	rcall	.-3126   	; 0x10850 <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11486:	18 c0       	rjmp	.+48     	; 0x114b8 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11488:	64 ef       	ldi	r22, 0xF4	; 244
   1148a:	71 e0       	ldi	r23, 0x01	; 1
   1148c:	80 e0       	ldi	r24, 0x00	; 0
   1148e:	90 e0       	ldi	r25, 0x00	; 0
   11490:	df d9       	rcall	.-3138   	; 0x10850 <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   11492:	4e 99       	sbic	0x09, 6	; 9
   11494:	f3 cf       	rjmp	.-26     	; 0x1147c <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11496:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   1149a:	88 23       	and	r24, r24
   1149c:	d1 f3       	breq	.-12     	; 0x11492 <gpib_write_str+0x66>
			{
				gpib_rx_init(1);
   1149e:	81 e0       	ldi	r24, 0x01	; 1
   114a0:	19 da       	rcall	.-3022   	; 0x108d4 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   114a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114aa:	85 70       	andi	r24, 0x05	; 5
   114ac:	99 27       	eor	r25, r25
   114ae:	89 2b       	or	r24, r25
   114b0:	d9 f0       	breq	.+54     	; 0x114e8 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   114b2:	8b e0       	ldi	r24, 0x0B	; 11
   114b4:	9f e0       	ldi	r25, 0x0F	; 15
   114b6:	10 c0       	rjmp	.+32     	; 0x114d8 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   114b8:	19 99       	sbic	0x03, 1	; 3
   114ba:	1f c0       	rjmp	.+62     	; 0x114fa <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   114bc:	80 91 d7 1c 	lds	r24, 0x1CD7	; 0x801cd7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   114c0:	88 23       	and	r24, r24
   114c2:	d1 f3       	breq	.-12     	; 0x114b8 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   114c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114c8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114cc:	85 70       	andi	r24, 0x05	; 5
   114ce:	99 27       	eor	r25, r25
   114d0:	89 2b       	or	r24, r25
   114d2:	51 f0       	breq	.+20     	; 0x114e8 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   114d4:	81 ef       	ldi	r24, 0xF1	; 241
   114d6:	9e e0       	ldi	r25, 0x0E	; 14
   114d8:	a0 e0       	ldi	r26, 0x00	; 0
   114da:	ed b7       	in	r30, 0x3d	; 61
   114dc:	fe b7       	in	r31, 0x3e	; 62
   114de:	81 83       	std	Z+1, r24	; 0x01
   114e0:	92 83       	std	Z+2, r25	; 0x02
   114e2:	a3 83       	std	Z+3, r26	; 0x03
   114e4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   114e8:	f8 01       	movw	r30, r16
   114ea:	80 81       	ld	r24, Z
   114ec:	91 81       	ldd	r25, Z+1	; 0x01
   114ee:	90 6c       	ori	r25, 0xC0	; 192
   114f0:	91 83       	std	Z+1, r25	; 0x01
   114f2:	80 83       	st	Z, r24
			return(ind);
   114f4:	c0 e0       	ldi	r28, 0x00	; 0
   114f6:	d0 e0       	ldi	r29, 0x00	; 0
   114f8:	45 c0       	rjmp	.+138    	; 0x11584 <gpib_write_str+0x158>
   114fa:	cd 2e       	mov	r12, r29
   114fc:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   114fe:	c0 e0       	ldi	r28, 0x00	; 0
   11500:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11502:	ce 15       	cp	r28, r14
   11504:	df 05       	cpc	r29, r15
   11506:	1c f5       	brge	.+70     	; 0x1154e <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11508:	21 96       	adiw	r28, 0x01	; 1
   1150a:	f6 01       	movw	r30, r12
   1150c:	81 91       	ld	r24, Z+
   1150e:	6f 01       	movw	r12, r30
   11510:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11512:	f8 01       	movw	r30, r16
   11514:	20 81       	ld	r18, Z
   11516:	31 81       	ldd	r19, Z+1	; 0x01
   11518:	30 ff       	sbrs	r19, 0
   1151a:	04 c0       	rjmp	.+8      	; 0x11524 <gpib_write_str+0xf8>
   1151c:	ec 16       	cp	r14, r28
   1151e:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   11520:	09 f4       	brne	.+2      	; 0x11524 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11522:	91 60       	ori	r25, 0x01	; 1
   11524:	ec da       	rcall	.-2600   	; 0x10afe <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11526:	5c 01       	movw	r10, r24
   11528:	aa 24       	eor	r10, r10
   1152a:	f0 ed       	ldi	r31, 0xD0	; 208
   1152c:	bf 22       	and	r11, r31
   1152e:	f8 01       	movw	r30, r16
   11530:	20 81       	ld	r18, Z
   11532:	31 81       	ldd	r19, Z+1	; 0x01
   11534:	2a 29       	or	r18, r10
   11536:	3b 29       	or	r19, r11
   11538:	31 83       	std	Z+1, r19	; 0x01
   1153a:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1153c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11540:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11544:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11546:	cc de       	rcall	.-616    	; 0x112e0 <gpib_decode>
   11548:	a1 14       	cp	r10, r1
   1154a:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1154c:	d1 f2       	breq	.-76     	; 0x11502 <gpib_write_str+0xd6>
   1154e:	81 e0       	ldi	r24, 0x01	; 1
   11550:	c1 d9       	rcall	.-3198   	; 0x108d4 <gpib_rx_init>

    if ( ind != size )
   11552:	ce 15       	cp	r28, r14
   11554:	df 05       	cpc	r29, r15
   11556:	b1 f0       	breq	.+44     	; 0x11584 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11558:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1155c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11560:	81 72       	andi	r24, 0x21	; 33
   11562:	91 70       	andi	r25, 0x01	; 1
   11564:	89 2b       	or	r24, r25
   11566:	71 f0       	breq	.+28     	; 0x11584 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11568:	ed b7       	in	r30, 0x3d	; 61
   1156a:	fe b7       	in	r31, 0x3e	; 62
   1156c:	f7 82       	std	Z+7, r15	; 0x07
   1156e:	e6 82       	std	Z+6, r14	; 0x06
   11570:	d5 83       	std	Z+5, r29	; 0x05
   11572:	c4 83       	std	Z+4, r28	; 0x04
   11574:	89 ec       	ldi	r24, 0xC9	; 201
   11576:	9e e0       	ldi	r25, 0x0E	; 14
   11578:	a0 e0       	ldi	r26, 0x00	; 0
   1157a:	81 83       	std	Z+1, r24	; 0x01
   1157c:	92 83       	std	Z+2, r25	; 0x02
   1157e:	a3 83       	std	Z+3, r26	; 0x03
   11580:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }
    return(ind);
}
   11584:	ce 01       	movw	r24, r28
   11586:	cd b7       	in	r28, 0x3d	; 61
   11588:	de b7       	in	r29, 0x3e	; 62
   1158a:	27 96       	adiw	r28, 0x07	; 7
   1158c:	ea e0       	ldi	r30, 0x0A	; 10
   1158e:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

00011592 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   11592:	ad b7       	in	r26, 0x3d	; 61
   11594:	be b7       	in	r27, 0x3e	; 62
   11596:	17 97       	sbiw	r26, 0x07	; 7
   11598:	0f b6       	in	r0, 0x3f	; 63
   1159a:	f8 94       	cli
   1159c:	be bf       	out	0x3e, r27	; 62
   1159e:	0f be       	out	0x3f, r0	; 63
   115a0:	ad bf       	out	0x3d, r26	; 61
   115a2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   115a6:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   115aa:	88 eb       	ldi	r24, 0xB8	; 184
   115ac:	91 e0       	ldi	r25, 0x01	; 1
   115ae:	0e 94 bd 99 	call	0x1337a	; 0x1337a <Read_Config>
   115b2:	18 16       	cp	r1, r24
   115b4:	19 06       	cpc	r1, r25
   115b6:	8c f4       	brge	.+34     	; 0x115da <gpib_file_init+0x48>
   115b8:	ed b7       	in	r30, 0x3d	; 61
   115ba:	fe b7       	in	r31, 0x3e	; 62
   115bc:	97 83       	std	Z+7, r25	; 0x07
   115be:	86 83       	std	Z+6, r24	; 0x06
   115c0:	88 eb       	ldi	r24, 0xB8	; 184
   115c2:	91 e0       	ldi	r25, 0x01	; 1
   115c4:	95 83       	std	Z+5, r25	; 0x05
   115c6:	84 83       	std	Z+4, r24	; 0x04
   115c8:	86 ed       	ldi	r24, 0xD6	; 214
   115ca:	94 e1       	ldi	r25, 0x14	; 20
   115cc:	a0 e0       	ldi	r26, 0x00	; 0
   115ce:	81 83       	std	Z+1, r24	; 0x01
   115d0:	92 83       	std	Z+2, r25	; 0x02
   115d2:	a3 83       	std	Z+3, r26	; 0x03
   115d4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   115d8:	10 c0       	rjmp	.+32     	; 0x115fa <gpib_file_init+0x68>
   115da:	89 2b       	or	r24, r25
   115dc:	71 f0       	breq	.+28     	; 0x115fa <gpib_file_init+0x68>
   115de:	88 eb       	ldi	r24, 0xB8	; 184
   115e0:	91 e0       	ldi	r25, 0x01	; 1
   115e2:	ed b7       	in	r30, 0x3d	; 61
   115e4:	fe b7       	in	r31, 0x3e	; 62
   115e6:	95 83       	std	Z+5, r25	; 0x05
   115e8:	84 83       	std	Z+4, r24	; 0x04
   115ea:	85 ec       	ldi	r24, 0xC5	; 197
   115ec:	94 e1       	ldi	r25, 0x14	; 20
   115ee:	a0 e0       	ldi	r26, 0x00	; 0
   115f0:	81 83       	std	Z+1, r24	; 0x01
   115f2:	92 83       	std	Z+2, r25	; 0x02
   115f4:	a3 83       	std	Z+3, r26	; 0x03
   115f6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   115fa:	0e 94 88 98 	call	0x13110	; 0x13110 <set_Config_Defaults>
   115fe:	0e 94 9f 6e 	call	0xdd3e	; 0xdd3e <mmc_wp_status>
   11602:	89 2b       	or	r24, r25
   11604:	51 f0       	breq	.+20     	; 0x1161a <gpib_file_init+0x88>
   11606:	8c ea       	ldi	r24, 0xAC	; 172
   11608:	94 e1       	ldi	r25, 0x14	; 20
   1160a:	a0 e0       	ldi	r26, 0x00	; 0
   1160c:	ed b7       	in	r30, 0x3d	; 61
   1160e:	fe b7       	in	r31, 0x3e	; 62
   11610:	81 83       	std	Z+1, r24	; 0x01
   11612:	92 83       	std	Z+2, r25	; 0x02
   11614:	a3 83       	std	Z+3, r26	; 0x03
   11616:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1161a:	ad b7       	in	r26, 0x3d	; 61
   1161c:	be b7       	in	r27, 0x3e	; 62
   1161e:	17 96       	adiw	r26, 0x07	; 7
   11620:	0f b6       	in	r0, 0x3f	; 63
   11622:	f8 94       	cli
   11624:	be bf       	out	0x3e, r27	; 62
   11626:	0f be       	out	0x3f, r0	; 63
   11628:	ad bf       	out	0x3d, r26	; 61
   1162a:	08 95       	ret

0001162c <SS80_is_MLA>:
   1162c:	40 e2       	ldi	r20, 0x20	; 32
   1162e:	50 e0       	ldi	r21, 0x00	; 0
   11630:	bc 01       	movw	r22, r24
   11632:	83 e0       	ldi	r24, 0x03	; 3
   11634:	90 e0       	ldi	r25, 0x00	; 0
   11636:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   1163a:	8f 3f       	cpi	r24, 0xFF	; 255
   1163c:	2f ef       	ldi	r18, 0xFF	; 255
   1163e:	92 07       	cpc	r25, r18
   11640:	19 f0       	breq	.+6      	; 0x11648 <SS80_is_MLA+0x1c>
   11642:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   11646:	08 95       	ret
   11648:	80 e0       	ldi	r24, 0x00	; 0
   1164a:	90 e0       	ldi	r25, 0x00	; 0
   1164c:	08 95       	ret

0001164e <SS80_is_MTA>:
   1164e:	40 e4       	ldi	r20, 0x40	; 64
   11650:	50 e0       	ldi	r21, 0x00	; 0
   11652:	bc 01       	movw	r22, r24
   11654:	83 e0       	ldi	r24, 0x03	; 3
   11656:	90 e0       	ldi	r25, 0x00	; 0
   11658:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   1165c:	8f 3f       	cpi	r24, 0xFF	; 255
   1165e:	2f ef       	ldi	r18, 0xFF	; 255
   11660:	92 07       	cpc	r25, r18
   11662:	19 f0       	breq	.+6      	; 0x1166a <SS80_is_MTA+0x1c>
   11664:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   11668:	08 95       	ret
   1166a:	80 e0       	ldi	r24, 0x00	; 0
   1166c:	90 e0       	ldi	r25, 0x00	; 0
   1166e:	08 95       	ret

00011670 <SS80_is_MSA>:
   11670:	40 e6       	ldi	r20, 0x60	; 96
   11672:	50 e0       	ldi	r21, 0x00	; 0
   11674:	bc 01       	movw	r22, r24
   11676:	83 e0       	ldi	r24, 0x03	; 3
   11678:	90 e0       	ldi	r25, 0x00	; 0
   1167a:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   1167e:	8f 3f       	cpi	r24, 0xFF	; 255
   11680:	2f ef       	ldi	r18, 0xFF	; 255
   11682:	92 07       	cpc	r25, r18
   11684:	19 f0       	breq	.+6      	; 0x1168c <SS80_is_MSA+0x1c>
   11686:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   1168a:	08 95       	ret
   1168c:	80 e0       	ldi	r24, 0x00	; 0
   1168e:	90 e0       	ldi	r25, 0x00	; 0
   11690:	08 95       	ret

00011692 <AMIGO_is_MLA>:
   11692:	40 e2       	ldi	r20, 0x20	; 32
   11694:	50 e0       	ldi	r21, 0x00	; 0
   11696:	bc 01       	movw	r22, r24
   11698:	81 e0       	ldi	r24, 0x01	; 1
   1169a:	90 e0       	ldi	r25, 0x00	; 0
   1169c:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   116a0:	8f 3f       	cpi	r24, 0xFF	; 255
   116a2:	2f ef       	ldi	r18, 0xFF	; 255
   116a4:	92 07       	cpc	r25, r18
   116a6:	19 f0       	breq	.+6      	; 0x116ae <AMIGO_is_MLA+0x1c>
   116a8:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   116ac:	08 95       	ret
   116ae:	80 e0       	ldi	r24, 0x00	; 0
   116b0:	90 e0       	ldi	r25, 0x00	; 0
   116b2:	08 95       	ret

000116b4 <AMIGO_is_MTA>:
   116b4:	40 e4       	ldi	r20, 0x40	; 64
   116b6:	50 e0       	ldi	r21, 0x00	; 0
   116b8:	bc 01       	movw	r22, r24
   116ba:	81 e0       	ldi	r24, 0x01	; 1
   116bc:	90 e0       	ldi	r25, 0x00	; 0
   116be:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   116c2:	8f 3f       	cpi	r24, 0xFF	; 255
   116c4:	2f ef       	ldi	r18, 0xFF	; 255
   116c6:	92 07       	cpc	r25, r18
   116c8:	19 f0       	breq	.+6      	; 0x116d0 <AMIGO_is_MTA+0x1c>
   116ca:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   116ce:	08 95       	ret
   116d0:	80 e0       	ldi	r24, 0x00	; 0
   116d2:	90 e0       	ldi	r25, 0x00	; 0
   116d4:	08 95       	ret

000116d6 <AMIGO_is_MSA>:
   116d6:	40 e6       	ldi	r20, 0x60	; 96
   116d8:	50 e0       	ldi	r21, 0x00	; 0
   116da:	bc 01       	movw	r22, r24
   116dc:	81 e0       	ldi	r24, 0x01	; 1
   116de:	90 e0       	ldi	r25, 0x00	; 0
   116e0:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   116e4:	8f 3f       	cpi	r24, 0xFF	; 255
   116e6:	2f ef       	ldi	r18, 0xFF	; 255
   116e8:	92 07       	cpc	r25, r18
   116ea:	19 f0       	breq	.+6      	; 0x116f2 <AMIGO_is_MSA+0x1c>
   116ec:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   116f0:	08 95       	ret
   116f2:	80 e0       	ldi	r24, 0x00	; 0
   116f4:	90 e0       	ldi	r25, 0x00	; 0
   116f6:	08 95       	ret

000116f8 <PRINTER_is_MLA>:
   116f8:	40 e2       	ldi	r20, 0x20	; 32
   116fa:	50 e0       	ldi	r21, 0x00	; 0
   116fc:	bc 01       	movw	r22, r24
   116fe:	84 e0       	ldi	r24, 0x04	; 4
   11700:	90 e0       	ldi	r25, 0x00	; 0
   11702:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   11706:	8f 3f       	cpi	r24, 0xFF	; 255
   11708:	2f ef       	ldi	r18, 0xFF	; 255
   1170a:	92 07       	cpc	r25, r18
   1170c:	19 f0       	breq	.+6      	; 0x11714 <PRINTER_is_MLA+0x1c>
   1170e:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   11712:	08 95       	ret
   11714:	80 e0       	ldi	r24, 0x00	; 0
   11716:	90 e0       	ldi	r25, 0x00	; 0
   11718:	08 95       	ret

0001171a <PRINTER_is_MTA>:
   1171a:	40 e4       	ldi	r20, 0x40	; 64
   1171c:	50 e0       	ldi	r21, 0x00	; 0
   1171e:	bc 01       	movw	r22, r24
   11720:	84 e0       	ldi	r24, 0x04	; 4
   11722:	90 e0       	ldi	r25, 0x00	; 0
   11724:	0e 94 ee 95 	call	0x12bdc	; 0x12bdc <find_device>
   11728:	8f 3f       	cpi	r24, 0xFF	; 255
   1172a:	2f ef       	ldi	r18, 0xFF	; 255
   1172c:	92 07       	cpc	r25, r18
   1172e:	19 f0       	breq	.+6      	; 0x11736 <PRINTER_is_MTA+0x1c>
   11730:	0c 94 18 96 	jmp	0x12c30	; 0x12c30 <set_active_device>
   11734:	08 95       	ret
   11736:	80 e0       	ldi	r24, 0x00	; 0
   11738:	90 e0       	ldi	r25, 0x00	; 0
   1173a:	08 95       	ret

0001173c <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   1173c:	93 d8       	rcall	.-3802   	; 0x10864 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   1173e:	fa d8       	rcall	.-3596   	; 0x10934 <gpib_state_init>
   11740:	0e 94 cb a9 	call	0x15396	; 0x15396 <SS80_init>

    SS80_init();                                  // SS80 state init
   11744:	0e 94 5a af 	call	0x15eb4	; 0x15eb4 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11748:	0c 94 8b ba 	jmp	0x17516	; 0x17516 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   1174c:	08 95       	ret

0001174e <gpib_trace_task>:
   1174e:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11750:	1f 93       	push	r17
   11752:	cf 93       	push	r28
   11754:	df 93       	push	r29
   11756:	00 d0       	rcall	.+0      	; 0x11758 <gpib_trace_task+0xa>
   11758:	00 d0       	rcall	.+0      	; 0x1175a <gpib_trace_task+0xc>
   1175a:	1f 92       	push	r1
   1175c:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   1175e:	00 97       	sbiw	r24, 0x00	; 0
   11760:	09 f4       	brne	.+2      	; 0x11764 <gpib_trace_task+0x16>
   11762:	44 c0       	rjmp	.+136    	; 0x117ec <gpib_trace_task+0x9e>
   11764:	fc 01       	movw	r30, r24
   11766:	20 81       	ld	r18, Z
   11768:	22 23       	and	r18, r18
   1176a:	09 f4       	brne	.+2      	; 0x1176e <gpib_trace_task+0x20>
   1176c:	3f c0       	rjmp	.+126    	; 0x117ec <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   1176e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <skipspaces>
   11772:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11774:	ed b7       	in	r30, 0x3d	; 61
   11776:	fe b7       	in	r31, 0x3e	; 62
   11778:	95 83       	std	Z+5, r25	; 0x05
   1177a:	84 83       	std	Z+4, r24	; 0x04
   1177c:	82 e9       	ldi	r24, 0x92	; 146
   1177e:	94 e1       	ldi	r25, 0x14	; 20
   11780:	a0 e0       	ldi	r26, 0x00	; 0
   11782:	81 83       	std	Z+1, r24	; 0x01
   11784:	92 83       	std	Z+2, r25	; 0x02
   11786:	a3 83       	std	Z+3, r26	; 0x03
   11788:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        if(detail)
   1178c:	20 97       	sbiw	r28, 0x00	; 0
   1178e:	51 f0       	breq	.+20     	; 0x117a4 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11790:	87 e6       	ldi	r24, 0x67	; 103
   11792:	94 e1       	ldi	r25, 0x14	; 20
   11794:	a0 e0       	ldi	r26, 0x00	; 0
   11796:	ed b7       	in	r30, 0x3d	; 61
   11798:	fe b7       	in	r31, 0x3e	; 62
   1179a:	81 83       	std	Z+1, r24	; 0x01
   1179c:	92 83       	std	Z+2, r25	; 0x02
   1179e:	a3 83       	std	Z+3, r26	; 0x03
   117a0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("Press ANY key to exit\n");
   117a4:	80 e5       	ldi	r24, 0x50	; 80
   117a6:	94 e1       	ldi	r25, 0x14	; 20
   117a8:	a0 e0       	ldi	r26, 0x00	; 0
   117aa:	ed b7       	in	r30, 0x3d	; 61
   117ac:	fe b7       	in	r31, 0x3e	; 62
   117ae:	81 83       	std	Z+1, r24	; 0x01
   117b0:	92 83       	std	Z+2, r25	; 0x02
   117b2:	a3 83       	std	Z+3, r26	; 0x03
   117b4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

        gpib_log_fp = fopen(name,"wb");
   117b8:	6c e0       	ldi	r22, 0x0C	; 12
   117ba:	79 e0       	ldi	r23, 0x09	; 9
   117bc:	c8 01       	movw	r24, r16
   117be:	0e 94 d3 7c 	call	0xf9a6	; 0xf9a6 <fopen>
   117c2:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <gpib_log_fp+0x1>
   117c6:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   117ca:	89 2b       	or	r24, r25
   117cc:	b9 f4       	brne	.+46     	; 0x117fc <gpib_trace_task+0xae>
        {
            perror("open failed");
   117ce:	87 ea       	ldi	r24, 0xA7	; 167
   117d0:	9d e0       	ldi	r25, 0x0D	; 13
   117d2:	0e 94 04 77 	call	0xee08	; 0xee08 <perror>
            printf("exiting...\n");
   117d6:	84 e4       	ldi	r24, 0x44	; 68
   117d8:	94 e1       	ldi	r25, 0x14	; 20
   117da:	a0 e0       	ldi	r26, 0x00	; 0
   117dc:	ed b7       	in	r30, 0x3d	; 61
   117de:	fe b7       	in	r31, 0x3e	; 62
   117e0:	81 83       	std	Z+1, r24	; 0x01
   117e2:	92 83       	std	Z+2, r25	; 0x02
   117e4:	a3 83       	std	Z+3, r26	; 0x03
   117e6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            return;
   117ea:	3d c0       	rjmp	.+122    	; 0x11866 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   117ec:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <__iob+0x2>
   117f0:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <__iob+0x3>
   117f4:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <gpib_log_fp+0x1>
   117f8:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   117fc:	9f df       	rcall	.-194    	; 0x1173c <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   117fe:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <gpib_log_fp>
   11802:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <gpib_log_fp+0x1>
   11806:	c0 da       	rcall	.-2688   	; 0x10d88 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11808:	80 e0       	ldi	r24, 0x00	; 0
   1180a:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <uart_keyhit>
   1180e:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11810:	31 f4       	brne	.+12     	; 0x1181e <gpib_trace_task+0xd0>
   11812:	ce 01       	movw	r24, r28
        if(!detail)
   11814:	4d dc       	rcall	.-1894   	; 0x110b0 <gpib_read_byte>
   11816:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11818:	b9 f7       	brne	.-18     	; 0x11808 <gpib_trace_task+0xba>
   1181a:	62 dd       	rcall	.-1340   	; 0x112e0 <gpib_decode>
   1181c:	f5 cf       	rjmp	.-22     	; 0x11808 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   1181e:	8e e3       	ldi	r24, 0x3E	; 62
   11820:	94 e1       	ldi	r25, 0x14	; 20
   11822:	a0 e0       	ldi	r26, 0x00	; 0
   11824:	ed b7       	in	r30, 0x3d	; 61
   11826:	fe b7       	in	r31, 0x3e	; 62
   11828:	81 83       	std	Z+1, r24	; 0x01
   1182a:	92 83       	std	Z+2, r25	; 0x02
   1182c:	a3 83       	std	Z+3, r26	; 0x03
   1182e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    if(gpib_log_fp)
   11832:	80 91 51 19 	lds	r24, 0x1951	; 0x801951 <gpib_log_fp>
   11836:	90 91 52 19 	lds	r25, 0x1952	; 0x801952 <gpib_log_fp+0x1>
   1183a:	00 97       	sbiw	r24, 0x00	; 0
   1183c:	a1 f0       	breq	.+40     	; 0x11866 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   1183e:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
        printf("Capturing Closed\n");
   11842:	8c e2       	ldi	r24, 0x2C	; 44
   11844:	94 e1       	ldi	r25, 0x14	; 20
   11846:	a0 e0       	ldi	r26, 0x00	; 0
   11848:	ed b7       	in	r30, 0x3d	; 61
   1184a:	fe b7       	in	r31, 0x3e	; 62
   1184c:	81 83       	std	Z+1, r24	; 0x01
   1184e:	92 83       	std	Z+2, r25	; 0x02
   11850:	a3 83       	std	Z+3, r26	; 0x03
   11852:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        gpib_log_fp = stdout;
   11856:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <__iob+0x2>
   1185a:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <__iob+0x3>
   1185e:	90 93 52 19 	sts	0x1952, r25	; 0x801952 <gpib_log_fp+0x1>
   11862:	80 93 51 19 	sts	0x1951, r24	; 0x801951 <gpib_log_fp>
    }
}
   11866:	cd b7       	in	r28, 0x3d	; 61
   11868:	de b7       	in	r29, 0x3e	; 62
   1186a:	25 96       	adiw	r28, 0x05	; 5
   1186c:	e4 e0       	ldi	r30, 0x04	; 4
   1186e:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00011872 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11872:	ef 92       	push	r14
   11874:	ff 92       	push	r15
   11876:	0f 93       	push	r16
   11878:	1f 93       	push	r17
   1187a:	cf 93       	push	r28
   1187c:	df 93       	push	r29
   1187e:	00 d0       	rcall	.+0      	; 0x11880 <gpib_error_test+0xe>
   11880:	1f 92       	push	r1
   11882:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11884:	ec 01       	movw	r28, r24
   11886:	cc 27       	eor	r28, r28
   11888:	d0 7d       	andi	r29, 0xD0	; 208
   1188a:	20 97       	sbiw	r28, 0x00	; 0
   1188c:	61 f0       	breq	.+24     	; 0x118a6 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   1188e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11892:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11896:	8d 72       	andi	r24, 0x2D	; 45
   11898:	99 27       	eor	r25, r25
   1189a:	87 01       	movw	r16, r14
   1189c:	00 27       	eor	r16, r16
   1189e:	10 71       	andi	r17, 0x10	; 16
   118a0:	89 2b       	or	r24, r25
   118a2:	59 f4       	brne	.+22     	; 0x118ba <gpib_error_test+0x48>
   118a4:	17 c0       	rjmp	.+46     	; 0x118d4 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   118a6:	80 e0       	ldi	r24, 0x00	; 0
   118a8:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <uart_keyhit>
   118ac:	89 2b       	or	r24, r25
   118ae:	79 f7       	brne	.-34     	; 0x1188e <gpib_error_test+0x1c>
   118b0:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <mmc_ins_status>
   118b4:	01 97       	sbiw	r24, 0x01	; 1
   118b6:	59 f7       	brne	.-42     	; 0x1188e <gpib_error_test+0x1c>
   118b8:	62 c0       	rjmp	.+196    	; 0x1197e <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   118ba:	01 15       	cp	r16, r1
   118bc:	11 05       	cpc	r17, r1
   118be:	51 f0       	breq	.+20     	; 0x118d4 <gpib_error_test+0x62>
                printf("<IFC>\n");
   118c0:	85 e2       	ldi	r24, 0x25	; 37
   118c2:	94 e1       	ldi	r25, 0x14	; 20
   118c4:	a0 e0       	ldi	r26, 0x00	; 0
   118c6:	ed b7       	in	r30, 0x3d	; 61
   118c8:	fe b7       	in	r31, 0x3e	; 62
   118ca:	81 83       	std	Z+1, r24	; 0x01
   118cc:	92 83       	std	Z+2, r25	; 0x02
   118ce:	a3 83       	std	Z+3, r26	; 0x03
   118d0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   118d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   118d8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   118dc:	8d 72       	andi	r24, 0x2D	; 45
   118de:	99 27       	eor	r25, r25
   118e0:	89 2b       	or	r24, r25
   118e2:	c1 f0       	breq	.+48     	; 0x11914 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   118e4:	f6 fe       	sbrs	r15, 6
   118e6:	0a c0       	rjmp	.+20     	; 0x118fc <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   118e8:	8a e1       	ldi	r24, 0x1A	; 26
   118ea:	94 e1       	ldi	r25, 0x14	; 20
   118ec:	a0 e0       	ldi	r26, 0x00	; 0
   118ee:	ed b7       	in	r30, 0x3d	; 61
   118f0:	fe b7       	in	r31, 0x3e	; 62
   118f2:	81 83       	std	Z+1, r24	; 0x01
   118f4:	92 83       	std	Z+2, r25	; 0x02
   118f6:	a3 83       	std	Z+3, r26	; 0x03
   118f8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            if(val & BUS_ERROR_FLAG)
   118fc:	d7 ff       	sbrs	r29, 7
   118fe:	0a c0       	rjmp	.+20     	; 0x11914 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11900:	83 e1       	ldi	r24, 0x13	; 19
   11902:	94 e1       	ldi	r25, 0x14	; 20
   11904:	a0 e0       	ldi	r26, 0x00	; 0
   11906:	ed b7       	in	r30, 0x3d	; 61
   11908:	fe b7       	in	r31, 0x3e	; 62
   1190a:	81 83       	std	Z+1, r24	; 0x01
   1190c:	92 83       	std	Z+2, r25	; 0x02
   1190e:	a3 83       	std	Z+3, r26	; 0x03
   11910:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        }

        if(uart_keyhit(0))
   11914:	80 e0       	ldi	r24, 0x00	; 0
   11916:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <uart_keyhit>
   1191a:	89 2b       	or	r24, r25
   1191c:	51 f0       	breq	.+20     	; 0x11932 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   1191e:	86 e0       	ldi	r24, 0x06	; 6
   11920:	94 e1       	ldi	r25, 0x14	; 20
   11922:	a0 e0       	ldi	r26, 0x00	; 0
   11924:	ed b7       	in	r30, 0x3d	; 61
   11926:	fe b7       	in	r31, 0x3e	; 62
   11928:	81 83       	std	Z+1, r24	; 0x01
   1192a:	92 83       	std	Z+2, r25	; 0x02
   1192c:	a3 83       	std	Z+3, r26	; 0x03
   1192e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

        if( mmc_ins_status() != 1 )
   11932:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <mmc_ins_status>
   11936:	01 97       	sbiw	r24, 0x01	; 1
   11938:	51 f0       	breq	.+20     	; 0x1194e <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   1193a:	85 ef       	ldi	r24, 0xF5	; 245
   1193c:	93 e1       	ldi	r25, 0x13	; 19
   1193e:	a0 e0       	ldi	r26, 0x00	; 0
   11940:	ed b7       	in	r30, 0x3d	; 61
   11942:	fe b7       	in	r31, 0x3e	; 62
   11944:	81 83       	std	Z+1, r24	; 0x01
   11946:	92 83       	std	Z+2, r25	; 0x02
   11948:	a3 83       	std	Z+3, r26	; 0x03
   1194a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

        if(val & IFC_FLAG)
   1194e:	01 15       	cp	r16, r1
   11950:	11 05       	cpc	r17, r1
   11952:	09 f0       	breq	.+2      	; 0x11956 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11954:	f3 de       	rcall	.-538    	; 0x1173c <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11956:	80 e0       	ldi	r24, 0x00	; 0
   11958:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <uart_keyhit>
   1195c:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   1195e:	11 f0       	breq	.+4      	; 0x11964 <gpib_error_test+0xf2>
   11960:	ed de       	rcall	.-550    	; 0x1173c <gpib_init_devices>
   11962:	0b c0       	rjmp	.+22     	; 0x1197a <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11964:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <mmc_ins_status>
   11968:	01 97       	sbiw	r24, 0x01	; 1
   1196a:	39 f4       	brne	.+14     	; 0x1197a <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   1196c:	01 15       	cp	r16, r1
   1196e:	11 05       	cpc	r17, r1
   11970:	31 f0       	breq	.+12     	; 0x1197e <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11972:	54 98       	cbi	0x0a, 4	; 10
   11974:	4c 9b       	sbis	0x09, 4	; 9
   11976:	fd cf       	rjmp	.-6      	; 0x11972 <gpib_error_test+0x100>
   11978:	02 c0       	rjmp	.+4      	; 0x1197e <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   1197a:	c1 e0       	ldi	r28, 0x01	; 1
   1197c:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   1197e:	ce 01       	movw	r24, r28
   11980:	cd b7       	in	r28, 0x3d	; 61
   11982:	de b7       	in	r29, 0x3e	; 62
   11984:	23 96       	adiw	r28, 0x03	; 3
   11986:	e6 e0       	ldi	r30, 0x06	; 6
   11988:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0001198c <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   1198c:	1f 93       	push	r17
   1198e:	cf 93       	push	r28
   11990:	df 93       	push	r29
   11992:	ec 01       	movw	r28, r24
   11994:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11996:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   1199a:	8f 35       	cpi	r24, 0x5F	; 95
   1199c:	91 f0       	breq	.+36     	; 0x119c2 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   1199e:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   119a2:	90 e0       	ldi	r25, 0x00	; 0
   119a4:	76 de       	rcall	.-788    	; 0x11692 <AMIGO_is_MLA>
   119a6:	89 2b       	or	r24, r25
   119a8:	c9 f4       	brne	.+50     	; 0x119dc <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   119aa:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   119ae:	90 e0       	ldi	r25, 0x00	; 0
   119b0:	3d de       	rcall	.-902    	; 0x1162c <SS80_is_MLA>
   119b2:	89 2b       	or	r24, r25
   119b4:	11 f5       	brne	.+68     	; 0x119fa <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   119b6:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   119ba:	90 e0       	ldi	r25, 0x00	; 0
   119bc:	9d de       	rcall	.-710    	; 0x116f8 <PRINTER_is_MLA>
   119be:	89 2b       	or	r24, r25
   119c0:	59 f5       	brne	.+86     	; 0x11a18 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   119c2:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   119c6:	8f 33       	cpi	r24, 0x3F	; 63
   119c8:	19 f4       	brne	.+6      	; 0x119d0 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   119ca:	80 e0       	ldi	r24, 0x00	; 0
   119cc:	90 e0       	ldi	r25, 0x00	; 0
   119ce:	2e c0       	rjmp	.+92     	; 0x11a2c <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   119d0:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   119d4:	90 e0       	ldi	r25, 0x00	; 0
   119d6:	6e de       	rcall	.-804    	; 0x116b4 <AMIGO_is_MTA>
   119d8:	89 2b       	or	r24, r25
   119da:	49 f0       	breq	.+18     	; 0x119ee <GPIB_COMMANDS+0x62>
        {
            if(unread)
   119dc:	11 23       	and	r17, r17
   119de:	11 f0       	breq	.+4      	; 0x119e4 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   119e0:	ce 01       	movw	r24, r28
   119e2:	41 d8       	rcall	.-3966   	; 0x10a66 <gpib_unread>
   119e4:	80 91 df 1e 	lds	r24, 0x1EDF	; 0x801edf <secondary>
            status = AMIGO_COMMANDS(secondary);
   119e8:	0e 94 86 b9 	call	0x1730c	; 0x1730c <AMIGO_COMMANDS>
   119ec:	1d c0       	rjmp	.+58     	; 0x11a28 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   119ee:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   119f2:	90 e0       	ldi	r25, 0x00	; 0
   119f4:	2c de       	rcall	.-936    	; 0x1164e <SS80_is_MTA>
   119f6:	89 2b       	or	r24, r25
   119f8:	49 f0       	breq	.+18     	; 0x11a0c <GPIB_COMMANDS+0x80>
        {
            if(unread)
   119fa:	11 23       	and	r17, r17
   119fc:	11 f0       	breq	.+4      	; 0x11a02 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   119fe:	ce 01       	movw	r24, r28
   11a00:	32 d8       	rcall	.-3996   	; 0x10a66 <gpib_unread>
   11a02:	80 91 df 1e 	lds	r24, 0x1EDF	; 0x801edf <secondary>
            status = SS80_COMMANDS(secondary);
   11a06:	0e 94 a6 ad 	call	0x15b4c	; 0x15b4c <SS80_COMMANDS>
   11a0a:	0e c0       	rjmp	.+28     	; 0x11a28 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11a0c:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   11a10:	90 e0       	ldi	r25, 0x00	; 0
   11a12:	83 de       	rcall	.-762    	; 0x1171a <PRINTER_is_MTA>
   11a14:	89 2b       	or	r24, r25
   11a16:	c9 f2       	breq	.-78     	; 0x119ca <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11a18:	11 23       	and	r17, r17
   11a1a:	11 f0       	breq	.+4      	; 0x11a20 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11a1c:	ce 01       	movw	r24, r28
   11a1e:	23 d8       	rcall	.-4026   	; 0x10a66 <gpib_unread>
   11a20:	80 91 df 1e 	lds	r24, 0x1EDF	; 0x801edf <secondary>
            status = PRINTER_COMMANDS(secondary);
   11a24:	0e 94 ff bb 	call	0x177fe	; 0x177fe <PRINTER_COMMANDS>
   11a28:	10 92 df 1e 	sts	0x1EDF, r1	; 0x801edf <secondary>
            secondary = 0;
   11a2c:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11a2e:	cf 91       	pop	r28
   11a30:	1f 91       	pop	r17
   11a32:	08 95       	ret

00011a34 <Send_Identify>:
   11a34:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11a36:	df 92       	push	r13
   11a38:	ff 92       	push	r15
   11a3a:	0f 93       	push	r16
   11a3c:	1f 93       	push	r17
   11a3e:	cf 93       	push	r28
   11a40:	df 93       	push	r29
   11a42:	cd b7       	in	r28, 0x3d	; 61
   11a44:	de b7       	in	r29, 0x3e	; 62
   11a46:	2b 97       	sbiw	r28, 0x0b	; 11
   11a48:	0f b6       	in	r0, 0x3f	; 63
   11a4a:	f8 94       	cli
   11a4c:	de bf       	out	0x3e, r29	; 62
   11a4e:	0f be       	out	0x3f, r0	; 63
   11a50:	cd bf       	out	0x3d, r28	; 61
   11a52:	f8 2e       	mov	r15, r24
   11a54:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11a56:	80 e0       	ldi	r24, 0x00	; 0
   11a58:	91 e0       	ldi	r25, 0x01	; 1
   11a5a:	9b 87       	std	Y+11, r25	; 0x0b
   11a5c:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11a5e:	8b 01       	movw	r16, r22
   11a60:	20 e0       	ldi	r18, 0x00	; 0
   11a62:	30 e0       	ldi	r19, 0x00	; 0
   11a64:	42 e0       	ldi	r20, 0x02	; 2
   11a66:	50 e0       	ldi	r21, 0x00	; 0
   11a68:	60 e0       	ldi	r22, 0x00	; 0
   11a6a:	70 e0       	ldi	r23, 0x00	; 0
   11a6c:	ce 01       	movw	r24, r28
   11a6e:	08 96       	adiw	r24, 0x08	; 8
   11a70:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11a74:	ae 01       	movw	r20, r28
   11a76:	46 5f       	subi	r20, 0xF6	; 246
   11a78:	5f 4f       	sbci	r21, 0xFF	; 255
   11a7a:	62 e0       	ldi	r22, 0x02	; 2
   11a7c:	70 e0       	ldi	r23, 0x00	; 0
   11a7e:	ce 01       	movw	r24, r28
   11a80:	08 96       	adiw	r24, 0x08	; 8
   11a82:	d4 dc       	rcall	.-1624   	; 0x1142c <gpib_write_str>
   11a84:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11a88:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11a8c:	02 97       	sbiw	r24, 0x02	; 2
   11a8e:	79 f0       	breq	.+30     	; 0x11aae <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11a90:	25 72       	andi	r18, 0x25	; 37
   11a92:	33 27       	eor	r19, r19
   11a94:	23 2b       	or	r18, r19
   11a96:	f9 f0       	breq	.+62     	; 0x11ad6 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11a98:	ed b7       	in	r30, 0x3d	; 61
   11a9a:	fe b7       	in	r31, 0x3e	; 62
   11a9c:	d7 82       	std	Z+7, r13	; 0x07
   11a9e:	c6 82       	std	Z+6, r12	; 0x06
   11aa0:	8f 2d       	mov	r24, r15
   11aa2:	90 e0       	ldi	r25, 0x00	; 0
   11aa4:	95 83       	std	Z+5, r25	; 0x05
   11aa6:	84 83       	std	Z+4, r24	; 0x04
   11aa8:	84 ed       	ldi	r24, 0xD4	; 212
   11aaa:	93 e1       	ldi	r25, 0x13	; 19
   11aac:	0e c0       	rjmp	.+28     	; 0x11aca <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11aae:	24 72       	andi	r18, 0x24	; 36
   11ab0:	33 27       	eor	r19, r19
   11ab2:	23 2b       	or	r18, r19
   11ab4:	81 f0       	breq	.+32     	; 0x11ad6 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11ab6:	ed b7       	in	r30, 0x3d	; 61
   11ab8:	fe b7       	in	r31, 0x3e	; 62
   11aba:	d7 82       	std	Z+7, r13	; 0x07
   11abc:	c6 82       	std	Z+6, r12	; 0x06
   11abe:	8f 2d       	mov	r24, r15
   11ac0:	90 e0       	ldi	r25, 0x00	; 0
   11ac2:	95 83       	std	Z+5, r25	; 0x05
   11ac4:	84 83       	std	Z+4, r24	; 0x04
   11ac6:	8a eb       	ldi	r24, 0xBA	; 186
   11ac8:	93 e1       	ldi	r25, 0x13	; 19
   11aca:	a0 e0       	ldi	r26, 0x00	; 0
   11acc:	81 83       	std	Z+1, r24	; 0x01
   11ace:	92 83       	std	Z+2, r25	; 0x02
   11ad0:	a3 83       	std	Z+3, r26	; 0x03
   11ad2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
    return (status & ERROR_MASK);
   11ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11ad8:	9b 85       	ldd	r25, Y+11	; 0x0b
   11ada:	88 27       	eor	r24, r24
   11adc:	90 7d       	andi	r25, 0xD0	; 208
}
   11ade:	2b 96       	adiw	r28, 0x0b	; 11
   11ae0:	0f b6       	in	r0, 0x3f	; 63
   11ae2:	f8 94       	cli
   11ae4:	de bf       	out	0x3e, r29	; 62
   11ae6:	0f be       	out	0x3f, r0	; 63
   11ae8:	cd bf       	out	0x3d, r28	; 61
   11aea:	df 91       	pop	r29
   11aec:	cf 91       	pop	r28
   11aee:	1f 91       	pop	r17
   11af0:	0f 91       	pop	r16
   11af2:	ff 90       	pop	r15
   11af4:	df 90       	pop	r13
   11af6:	cf 90       	pop	r12
   11af8:	08 95       	ret

00011afa <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11afa:	00 d0       	rcall	.+0      	; 0x11afc <GPIB+0x2>
   11afc:	00 d0       	rcall	.+0      	; 0x11afe <GPIB+0x4>
   11afe:	1f 92       	push	r1
   11b00:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11b04:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11b08:	85 30       	cpi	r24, 0x05	; 5
   11b0a:	89 f4       	brne	.+34     	; 0x11b2e <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b0c:	27 71       	andi	r18, 0x17	; 23
   11b0e:	33 27       	eor	r19, r19
   11b10:	23 2b       	or	r18, r19
   11b12:	51 f0       	breq	.+20     	; 0x11b28 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11b14:	82 ea       	ldi	r24, 0xA2	; 162
   11b16:	93 e1       	ldi	r25, 0x13	; 19
   11b18:	a0 e0       	ldi	r26, 0x00	; 0
   11b1a:	ed b7       	in	r30, 0x3d	; 61
   11b1c:	fe b7       	in	r31, 0x3e	; 62
   11b1e:	81 83       	std	Z+1, r24	; 0x01
   11b20:	92 83       	std	Z+2, r25	; 0x02
   11b22:	a3 83       	std	Z+3, r26	; 0x03
   11b24:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        spoll = 0;
   11b28:	10 92 db 1e 	sts	0x1EDB, r1	; 0x801edb <spoll>
   11b2c:	a0 c0       	rjmp	.+320    	; 0x11c6e <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11b2e:	85 31       	cpi	r24, 0x15	; 21
   11b30:	39 f4       	brne	.+14     	; 0x11b40 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b32:	27 71       	andi	r18, 0x17	; 23
   11b34:	33 27       	eor	r19, r19
   11b36:	23 2b       	or	r18, r19
   11b38:	b9 f3       	breq	.-18     	; 0x11b28 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11b3a:	8a e8       	ldi	r24, 0x8A	; 138
   11b3c:	93 e1       	ldi	r25, 0x13	; 19
   11b3e:	ec cf       	rjmp	.-40     	; 0x11b18 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11b40:	88 31       	cpi	r24, 0x18	; 24
   11b42:	d9 f4       	brne	.+54     	; 0x11b7a <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11b44:	26 70       	andi	r18, 0x06	; 6
   11b46:	33 27       	eor	r19, r19
   11b48:	23 2b       	or	r18, r19
   11b4a:	51 f0       	breq	.+20     	; 0x11b60 <GPIB+0x66>
            printf("[SPE]\n");
   11b4c:	83 e8       	ldi	r24, 0x83	; 131
   11b4e:	93 e1       	ldi	r25, 0x13	; 19
   11b50:	a0 e0       	ldi	r26, 0x00	; 0
   11b52:	ed b7       	in	r30, 0x3d	; 61
   11b54:	fe b7       	in	r31, 0x3e	; 62
   11b56:	81 83       	std	Z+1, r24	; 0x01
   11b58:	92 83       	std	Z+2, r25	; 0x02
   11b5a:	a3 83       	std	Z+3, r26	; 0x03
   11b5c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
        spoll = 1;
   11b60:	81 e0       	ldi	r24, 0x01	; 1
   11b62:	80 93 db 1e 	sts	0x1EDB, r24	; 0x801edb <spoll>
        if(SS80_is_MTA(talking))
   11b66:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   11b6a:	90 e0       	ldi	r25, 0x00	; 0
   11b6c:	70 dd       	rcall	.-1312   	; 0x1164e <SS80_is_MTA>
   11b6e:	89 2b       	or	r24, r25
   11b70:	09 f4       	brne	.+2      	; 0x11b74 <GPIB+0x7a>
   11b72:	7d c0       	rjmp	.+250    	; 0x11c6e <GPIB+0x174>
        {
            return( SS80_Report() );
   11b74:	0e 94 5f a9 	call	0x152be	; 0x152be <SS80_Report>
   11b78:	7c c0       	rjmp	.+248    	; 0x11c72 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11b7a:	89 31       	cpi	r24, 0x19	; 25
   11b7c:	39 f4       	brne	.+14     	; 0x11b8c <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11b7e:	26 70       	andi	r18, 0x06	; 6
   11b80:	33 27       	eor	r19, r19
   11b82:	23 2b       	or	r18, r19
   11b84:	89 f2       	breq	.-94     	; 0x11b28 <GPIB+0x2e>
            printf("[SPD]\n");
   11b86:	8c e7       	ldi	r24, 0x7C	; 124
   11b88:	93 e1       	ldi	r25, 0x13	; 19
   11b8a:	c6 cf       	rjmp	.-116    	; 0x11b18 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11b8c:	84 30       	cpi	r24, 0x04	; 4
   11b8e:	09 f0       	breq	.+2      	; 0x11b92 <GPIB+0x98>
   11b90:	48 c0       	rjmp	.+144    	; 0x11c22 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11b92:	22 ff       	sbrs	r18, 2
   11b94:	0a c0       	rjmp	.+20     	; 0x11baa <GPIB+0xb0>
            printf("[SDC]\n");
   11b96:	85 e7       	ldi	r24, 0x75	; 117
   11b98:	93 e1       	ldi	r25, 0x13	; 19
   11b9a:	a0 e0       	ldi	r26, 0x00	; 0
   11b9c:	ed b7       	in	r30, 0x3d	; 61
   11b9e:	fe b7       	in	r31, 0x3e	; 62
   11ba0:	81 83       	std	Z+1, r24	; 0x01
   11ba2:	92 83       	std	Z+2, r25	; 0x02
   11ba4:	a3 83       	std	Z+3, r26	; 0x03
   11ba6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11baa:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   11bae:	90 e0       	ldi	r25, 0x00	; 0
   11bb0:	3d dd       	rcall	.-1414   	; 0x1162c <SS80_is_MLA>
   11bb2:	89 2b       	or	r24, r25
   11bb4:	d9 f0       	breq	.+54     	; 0x11bec <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11bbe:	84 72       	andi	r24, 0x24	; 36
   11bc0:	99 27       	eor	r25, r25
   11bc2:	89 2b       	or	r24, r25
   11bc4:	51 f0       	breq	.+20     	; 0x11bda <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11bc6:	89 e6       	ldi	r24, 0x69	; 105
   11bc8:	93 e1       	ldi	r25, 0x13	; 19
   11bca:	a0 e0       	ldi	r26, 0x00	; 0
   11bcc:	ed b7       	in	r30, 0x3d	; 61
   11bce:	fe b7       	in	r31, 0x3e	; 62
   11bd0:	81 83       	std	Z+1, r24	; 0x01
   11bd2:	92 83       	std	Z+2, r25	; 0x02
   11bd4:	a3 83       	std	Z+3, r26	; 0x03
   11bd6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11bda:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   11bde:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   11be2:	85 81       	ldd	r24, Z+5	; 0x05
   11be4:	90 e0       	ldi	r25, 0x00	; 0
   11be6:	0e 94 2b aa 	call	0x15456	; 0x15456 <SS80_Selected_Device_Clear>
   11bea:	43 c0       	rjmp	.+134    	; 0x11c72 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11bec:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   11bf0:	90 e0       	ldi	r25, 0x00	; 0
   11bf2:	4f dd       	rcall	.-1378   	; 0x11692 <AMIGO_is_MLA>
   11bf4:	89 2b       	or	r24, r25
   11bf6:	d9 f1       	breq	.+118    	; 0x11c6e <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bf8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bfc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c00:	84 72       	andi	r24, 0x24	; 36
   11c02:	99 27       	eor	r25, r25
   11c04:	89 2b       	or	r24, r25
   11c06:	51 f0       	breq	.+20     	; 0x11c1c <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11c08:	8c e5       	ldi	r24, 0x5C	; 92
   11c0a:	93 e1       	ldi	r25, 0x13	; 19
   11c0c:	a0 e0       	ldi	r26, 0x00	; 0
   11c0e:	ed b7       	in	r30, 0x3d	; 61
   11c10:	fe b7       	in	r31, 0x3e	; 62
   11c12:	81 83       	std	Z+1, r24	; 0x01
   11c14:	92 83       	std	Z+2, r25	; 0x02
   11c16:	a3 83       	std	Z+3, r26	; 0x03
   11c18:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
            return( amigo_cmd_clear() );
   11c1c:	0e 94 6c b4 	call	0x168d8	; 0x168d8 <amigo_cmd_clear>
   11c20:	28 c0       	rjmp	.+80     	; 0x11c72 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11c22:	84 31       	cpi	r24, 0x14	; 20
   11c24:	99 f4       	brne	.+38     	; 0x11c4c <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c26:	22 ff       	sbrs	r18, 2
   11c28:	0a c0       	rjmp	.+20     	; 0x11c3e <GPIB+0x144>
            printf("[DCL]\n");
   11c2a:	85 e5       	ldi	r24, 0x55	; 85
   11c2c:	93 e1       	ldi	r25, 0x13	; 19
   11c2e:	a0 e0       	ldi	r26, 0x00	; 0
   11c30:	ed b7       	in	r30, 0x3d	; 61
   11c32:	fe b7       	in	r31, 0x3e	; 62
   11c34:	81 83       	std	Z+1, r24	; 0x01
   11c36:	92 83       	std	Z+2, r25	; 0x02
   11c38:	a3 83       	std	Z+3, r26	; 0x03
   11c3a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11c3e:	0e 94 1d aa 	call	0x1543a	; 0x1543a <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11c42:	0e 94 6c b4 	call	0x168d8	; 0x168d8 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11c46:	0e 94 8b ba 	call	0x17516	; 0x17516 <printer_close>
   11c4a:	11 c0       	rjmp	.+34     	; 0x11c6e <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11c4c:	25 71       	andi	r18, 0x15	; 21
   11c4e:	33 27       	eor	r19, r19
   11c50:	23 2b       	or	r18, r19
   11c52:	69 f0       	breq	.+26     	; 0x11c6e <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11c54:	90 e0       	ldi	r25, 0x00	; 0
   11c56:	ed b7       	in	r30, 0x3d	; 61
   11c58:	fe b7       	in	r31, 0x3e	; 62
   11c5a:	95 83       	std	Z+5, r25	; 0x05
   11c5c:	84 83       	std	Z+4, r24	; 0x04
   11c5e:	84 e3       	ldi	r24, 0x34	; 52
   11c60:	93 e1       	ldi	r25, 0x13	; 19
   11c62:	a0 e0       	ldi	r26, 0x00	; 0
   11c64:	81 83       	std	Z+1, r24	; 0x01
   11c66:	92 83       	std	Z+2, r25	; 0x02
   11c68:	a3 83       	std	Z+3, r26	; 0x03
   11c6a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(0);
   11c6e:	80 e0       	ldi	r24, 0x00	; 0
   11c70:	90 e0       	ldi	r25, 0x00	; 0
}
   11c72:	0f 90       	pop	r0
   11c74:	0f 90       	pop	r0
   11c76:	0f 90       	pop	r0
   11c78:	0f 90       	pop	r0
   11c7a:	0f 90       	pop	r0
   11c7c:	08 95       	ret

00011c7e <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11c7e:	cf 93       	push	r28
   11c80:	df 93       	push	r29
   11c82:	00 d0       	rcall	.+0      	; 0x11c84 <GPIB_TALK+0x6>
   11c84:	00 d0       	rcall	.+0      	; 0x11c86 <GPIB_TALK+0x8>
   11c86:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11c88:	90 91 de 1e 	lds	r25, 0x1EDE	; 0x801ede <talking>
   11c8c:	90 93 e1 1e 	sts	0x1EE1, r25	; 0x801ee1 <talking_last>
    talking = ch;
   11c90:	80 93 de 1e 	sts	0x1EDE, r24	; 0x801ede <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11c94:	8f 35       	cpi	r24, 0x5F	; 95
   11c96:	79 f4       	brne	.+30     	; 0x11cb6 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c9c:	82 ff       	sbrs	r24, 2
   11c9e:	7f c0       	rjmp	.+254    	; 0x11d9e <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11ca0:	81 ee       	ldi	r24, 0xE1	; 225
   11ca2:	92 e1       	ldi	r25, 0x12	; 18
   11ca4:	a0 e0       	ldi	r26, 0x00	; 0
   11ca6:	ed b7       	in	r30, 0x3d	; 61
   11ca8:	fe b7       	in	r31, 0x3e	; 62
   11caa:	81 83       	std	Z+1, r24	; 0x01
   11cac:	92 83       	std	Z+2, r25	; 0x02
   11cae:	a3 83       	std	Z+3, r26	; 0x03
   11cb0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   11cb4:	74 c0       	rjmp	.+232    	; 0x11d9e <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11cb6:	c8 2f       	mov	r28, r24
   11cb8:	d0 e0       	ldi	r29, 0x00	; 0
   11cba:	ce 01       	movw	r24, r28
   11cbc:	c8 dc       	rcall	.-1648   	; 0x1164e <SS80_is_MTA>
   11cbe:	89 2b       	or	r24, r25
   11cc0:	e1 f0       	breq	.+56     	; 0x11cfa <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cc6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11cca:	84 72       	andi	r24, 0x24	; 36
   11ccc:	99 27       	eor	r25, r25
   11cce:	89 2b       	or	r24, r25
   11cd0:	61 f0       	breq	.+24     	; 0x11cea <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11cd2:	ed b7       	in	r30, 0x3d	; 61
   11cd4:	fe b7       	in	r31, 0x3e	; 62
   11cd6:	d5 83       	std	Z+5, r29	; 0x05
   11cd8:	c4 83       	std	Z+4, r28	; 0x04
   11cda:	80 ed       	ldi	r24, 0xD0	; 208
   11cdc:	92 e1       	ldi	r25, 0x12	; 18
   11cde:	a0 e0       	ldi	r26, 0x00	; 0
   11ce0:	81 83       	std	Z+1, r24	; 0x01
   11ce2:	92 83       	std	Z+2, r25	; 0x02
   11ce4:	a3 83       	std	Z+3, r26	; 0x03
   11ce6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif

        if (spoll)
   11cea:	80 91 db 1e 	lds	r24, 0x1EDB	; 0x801edb <spoll>
   11cee:	88 23       	and	r24, r24
   11cf0:	09 f4       	brne	.+2      	; 0x11cf4 <GPIB_TALK+0x76>
   11cf2:	55 c0       	rjmp	.+170    	; 0x11d9e <GPIB_TALK+0x120>
        {
            SS80_Report();
   11cf4:	0e 94 5f a9 	call	0x152be	; 0x152be <SS80_Report>
   11cf8:	52 c0       	rjmp	.+164    	; 0x11d9e <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11cfa:	ce 01       	movw	r24, r28
   11cfc:	db dc       	rcall	.-1610   	; 0x116b4 <AMIGO_is_MTA>
   11cfe:	89 2b       	or	r24, r25
   11d00:	81 f0       	breq	.+32     	; 0x11d22 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d06:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d0a:	84 72       	andi	r24, 0x24	; 36
   11d0c:	99 27       	eor	r25, r25
   11d0e:	89 2b       	or	r24, r25
   11d10:	09 f4       	brne	.+2      	; 0x11d14 <GPIB_TALK+0x96>
   11d12:	45 c0       	rjmp	.+138    	; 0x11d9e <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11d14:	ed b7       	in	r30, 0x3d	; 61
   11d16:	fe b7       	in	r31, 0x3e	; 62
   11d18:	d5 83       	std	Z+5, r29	; 0x05
   11d1a:	c4 83       	std	Z+4, r28	; 0x04
   11d1c:	8e eb       	ldi	r24, 0xBE	; 190
   11d1e:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11d20:	38 c0       	rjmp	.+112    	; 0x11d92 <GPIB_TALK+0x114>
   11d22:	ce 01       	movw	r24, r28
   11d24:	fa dc       	rcall	.-1548   	; 0x1171a <PRINTER_is_MTA>
   11d26:	89 2b       	or	r24, r25
   11d28:	79 f0       	breq	.+30     	; 0x11d48 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d2e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d32:	84 72       	andi	r24, 0x24	; 36
   11d34:	99 27       	eor	r25, r25
   11d36:	89 2b       	or	r24, r25
   11d38:	91 f1       	breq	.+100    	; 0x11d9e <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11d3a:	ed b7       	in	r30, 0x3d	; 61
   11d3c:	fe b7       	in	r31, 0x3e	; 62
   11d3e:	d5 83       	std	Z+5, r29	; 0x05
   11d40:	c4 83       	std	Z+4, r28	; 0x04
   11d42:	8a ea       	ldi	r24, 0xAA	; 170
   11d44:	92 e1       	ldi	r25, 0x12	; 18
   11d46:	25 c0       	rjmp	.+74     	; 0x11d92 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11d48:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   11d4c:	90 e0       	ldi	r25, 0x00	; 0
   11d4e:	d4 dc       	rcall	.-1624   	; 0x116f8 <PRINTER_is_MLA>
   11d50:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d54:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d58:	89 2b       	or	r24, r25
   11d5a:	99 f0       	breq	.+38     	; 0x11d82 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d5c:	24 72       	andi	r18, 0x24	; 36
   11d5e:	33 27       	eor	r19, r19
   11d60:	23 2b       	or	r18, r19
   11d62:	51 f0       	breq	.+20     	; 0x11d78 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11d64:	8a e9       	ldi	r24, 0x9A	; 154
   11d66:	92 e1       	ldi	r25, 0x12	; 18
   11d68:	a0 e0       	ldi	r26, 0x00	; 0
   11d6a:	ed b7       	in	r30, 0x3d	; 61
   11d6c:	fe b7       	in	r31, 0x3e	; 62
   11d6e:	81 83       	std	Z+1, r24	; 0x01
   11d70:	92 83       	std	Z+2, r25	; 0x02
   11d72:	a3 83       	std	Z+3, r26	; 0x03
   11d74:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printer_open(NULL);
   11d78:	80 e0       	ldi	r24, 0x00	; 0
   11d7a:	90 e0       	ldi	r25, 0x00	; 0
   11d7c:	0e 94 e3 ba 	call	0x175c6	; 0x175c6 <printer_open>
   11d80:	0e c0       	rjmp	.+28     	; 0x11d9e <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d82:	22 ff       	sbrs	r18, 2
   11d84:	0c c0       	rjmp	.+24     	; 0x11d9e <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11d86:	ed b7       	in	r30, 0x3d	; 61
   11d88:	fe b7       	in	r31, 0x3e	; 62
   11d8a:	d5 83       	std	Z+5, r29	; 0x05
   11d8c:	c4 83       	std	Z+4, r28	; 0x04
   11d8e:	8e e8       	ldi	r24, 0x8E	; 142
   11d90:	92 e1       	ldi	r25, 0x12	; 18
   11d92:	a0 e0       	ldi	r26, 0x00	; 0
   11d94:	81 83       	std	Z+1, r24	; 0x01
   11d96:	92 83       	std	Z+2, r25	; 0x02
   11d98:	a3 83       	std	Z+3, r26	; 0x03
   11d9a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11d9e:	80 e0       	ldi	r24, 0x00	; 0
   11da0:	90 e0       	ldi	r25, 0x00	; 0
   11da2:	cd b7       	in	r28, 0x3d	; 61
   11da4:	de b7       	in	r29, 0x3e	; 62
   11da6:	25 96       	adiw	r28, 0x05	; 5
   11da8:	e2 e0       	ldi	r30, 0x02	; 2
   11daa:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00011dae <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11dae:	a9 e0       	ldi	r26, 0x09	; 9
   11db0:	b0 e0       	ldi	r27, 0x00	; 0
   11db2:	ed ed       	ldi	r30, 0xDD	; 221
   11db4:	fe e8       	ldi	r31, 0x8E	; 142
   11db6:	0c 94 92 e1 	jmp	0x1c324	; 0x1c324 <__prologue_saves__+0x1e>
   11dba:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11dbc:	c8 2f       	mov	r28, r24
   11dbe:	d0 e0       	ldi	r29, 0x00	; 0
   11dc0:	ce 01       	movw	r24, r28
   11dc2:	56 dc       	rcall	.-1876   	; 0x11670 <SS80_is_MSA>
   11dc4:	89 2b       	or	r24, r25
   11dc6:	09 f1       	breq	.+66     	; 0x11e0a <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11dcc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dd0:	84 72       	andi	r24, 0x24	; 36
   11dd2:	99 27       	eor	r25, r25
   11dd4:	89 2b       	or	r24, r25
   11dd6:	61 f0       	breq	.+24     	; 0x11df0 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11dd8:	ed b7       	in	r30, 0x3d	; 61
   11dda:	fe b7       	in	r31, 0x3e	; 62
   11ddc:	d5 83       	std	Z+5, r29	; 0x05
   11dde:	c4 83       	std	Z+4, r28	; 0x04
   11de0:	8d e7       	ldi	r24, 0x7D	; 125
   11de2:	92 e1       	ldi	r25, 0x12	; 18
   11de4:	a0 e0       	ldi	r26, 0x00	; 0
   11de6:	81 83       	std	Z+1, r24	; 0x01
   11de8:	92 83       	std	Z+2, r25	; 0x02
   11dea:	a3 83       	std	Z+3, r26	; 0x03
   11dec:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11df0:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   11df4:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   11df8:	81 81       	ldd	r24, Z+1	; 0x01
   11dfa:	90 e0       	ldi	r25, 0x00	; 0
   11dfc:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11e00:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   11e04:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   11e08:	25 c0       	rjmp	.+74     	; 0x11e54 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11e0a:	ce 01       	movw	r24, r28
   11e0c:	64 dc       	rcall	.-1848   	; 0x116d6 <AMIGO_is_MSA>
   11e0e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e12:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e16:	89 2b       	or	r24, r25
   11e18:	11 f1       	breq	.+68     	; 0x11e5e <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e1a:	c9 01       	movw	r24, r18
   11e1c:	84 72       	andi	r24, 0x24	; 36
   11e1e:	99 27       	eor	r25, r25
   11e20:	89 2b       	or	r24, r25
   11e22:	61 f0       	breq	.+24     	; 0x11e3c <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11e24:	ed b7       	in	r30, 0x3d	; 61
   11e26:	fe b7       	in	r31, 0x3e	; 62
   11e28:	d5 83       	std	Z+5, r29	; 0x05
   11e2a:	c4 83       	std	Z+4, r28	; 0x04
   11e2c:	8b e6       	ldi	r24, 0x6B	; 107
   11e2e:	92 e1       	ldi	r25, 0x12	; 18
   11e30:	a0 e0       	ldi	r26, 0x00	; 0
   11e32:	81 83       	std	Z+1, r24	; 0x01
   11e34:	92 83       	std	Z+2, r25	; 0x02
   11e36:	a3 83       	std	Z+3, r26	; 0x03
   11e38:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11e3c:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   11e40:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   11e44:	81 81       	ldd	r24, Z+1	; 0x01
   11e46:	90 e0       	ldi	r25, 0x00	; 0
   11e48:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11e4c:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   11e50:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   11e54:	64 81       	ldd	r22, Z+4	; 0x04
   11e56:	75 81       	ldd	r23, Z+5	; 0x05
   11e58:	81 2f       	mov	r24, r17
   11e5a:	ec dd       	rcall	.-1064   	; 0x11a34 <Send_Identify>
   11e5c:	1d c0       	rjmp	.+58     	; 0x11e98 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e5e:	c9 01       	movw	r24, r18
   11e60:	84 72       	andi	r24, 0x24	; 36
   11e62:	99 27       	eor	r25, r25
   11e64:	00 97       	sbiw	r24, 0x00	; 0
   11e66:	c1 f0       	breq	.+48     	; 0x11e98 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11e68:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   11e6c:	90 e0       	ldi	r25, 0x00	; 0
   11e6e:	ed b7       	in	r30, 0x3d	; 61
   11e70:	fe b7       	in	r31, 0x3e	; 62
   11e72:	91 87       	std	Z+9, r25	; 0x09
   11e74:	80 87       	std	Z+8, r24	; 0x08
   11e76:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   11e7a:	90 e0       	ldi	r25, 0x00	; 0
   11e7c:	97 83       	std	Z+7, r25	; 0x07
   11e7e:	86 83       	std	Z+6, r24	; 0x06
   11e80:	d5 83       	std	Z+5, r29	; 0x05
   11e82:	c4 83       	std	Z+4, r28	; 0x04
   11e84:	85 e4       	ldi	r24, 0x45	; 69
   11e86:	92 e1       	ldi	r25, 0x12	; 18
   11e88:	a0 e0       	ldi	r26, 0x00	; 0
   11e8a:	81 83       	std	Z+1, r24	; 0x01
   11e8c:	92 83       	std	Z+2, r25	; 0x02
   11e8e:	a3 83       	std	Z+3, r26	; 0x03
   11e90:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11e94:	80 e0       	ldi	r24, 0x00	; 0
   11e96:	90 e0       	ldi	r25, 0x00	; 0
}
   11e98:	cd b7       	in	r28, 0x3d	; 61
   11e9a:	de b7       	in	r29, 0x3e	; 62
   11e9c:	29 96       	adiw	r28, 0x09	; 9
   11e9e:	e3 e0       	ldi	r30, 0x03	; 3
   11ea0:	0c 94 ae e1 	jmp	0x1c35c	; 0x1c35c <__epilogue_restores__+0x1e>

00011ea4 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11ea4:	00 d0       	rcall	.+0      	; 0x11ea6 <listen_cleanup+0x2>
   11ea6:	1f 92       	push	r1
    if(listening_last)
   11ea8:	60 91 da 1e 	lds	r22, 0x1EDA	; 0x801eda <listening_last>
   11eac:	66 23       	and	r22, r22
   11eae:	e1 f0       	breq	.+56     	; 0x11ee8 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11eb0:	70 e0       	ldi	r23, 0x00	; 0
   11eb2:	40 e2       	ldi	r20, 0x20	; 32
   11eb4:	50 e0       	ldi	r21, 0x00	; 0
   11eb6:	84 e0       	ldi	r24, 0x04	; 4
   11eb8:	90 e0       	ldi	r25, 0x00	; 0
   11eba:	90 d6       	rcall	.+3360   	; 0x12bdc <find_device>
        if(index == -1)
   11ebc:	01 96       	adiw	r24, 0x01	; 1
   11ebe:	a1 f0       	breq	.+40     	; 0x11ee8 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ec0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ec4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ec8:	84 72       	andi	r24, 0x24	; 36
   11eca:	99 27       	eor	r25, r25
   11ecc:	89 2b       	or	r24, r25
   11ece:	51 f0       	breq	.+20     	; 0x11ee4 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11ed0:	84 e3       	ldi	r24, 0x34	; 52
   11ed2:	92 e1       	ldi	r25, 0x12	; 18
   11ed4:	a0 e0       	ldi	r26, 0x00	; 0
   11ed6:	ed b7       	in	r30, 0x3d	; 61
   11ed8:	fe b7       	in	r31, 0x3e	; 62
   11eda:	81 83       	std	Z+1, r24	; 0x01
   11edc:	92 83       	std	Z+2, r25	; 0x02
   11ede:	a3 83       	std	Z+3, r26	; 0x03
   11ee0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printer_close();
   11ee4:	0e 94 8b ba 	call	0x17516	; 0x17516 <printer_close>
    }
}
   11ee8:	0f 90       	pop	r0
   11eea:	0f 90       	pop	r0
   11eec:	0f 90       	pop	r0
   11eee:	08 95       	ret

00011ef0 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11ef0:	cf 93       	push	r28
   11ef2:	df 93       	push	r29
   11ef4:	00 d0       	rcall	.+0      	; 0x11ef6 <GPIB_LISTEN+0x6>
   11ef6:	00 d0       	rcall	.+0      	; 0x11ef8 <GPIB_LISTEN+0x8>
   11ef8:	1f 92       	push	r1
   11efa:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11efc:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   11f00:	80 93 da 1e 	sts	0x1EDA, r24	; 0x801eda <listening_last>
    listening = ch;
   11f04:	c0 93 e0 1e 	sts	0x1EE0, r28	; 0x801ee0 <listening>

    listen_cleanup();
   11f08:	cd df       	rcall	.-102    	; 0x11ea4 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11f0a:	cf 33       	cpi	r28, 0x3F	; 63
   11f0c:	19 f5       	brne	.+70     	; 0x11f54 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11f0e:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f16:	82 ff       	sbrs	r24, 2
   11f18:	74 c0       	rjmp	.+232    	; 0x12002 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11f1a:	8d e2       	ldi	r24, 0x2D	; 45
   11f1c:	93 e1       	ldi	r25, 0x13	; 19
   11f1e:	a0 e0       	ldi	r26, 0x00	; 0
   11f20:	ed b7       	in	r30, 0x3d	; 61
   11f22:	fe b7       	in	r31, 0x3e	; 62
   11f24:	81 83       	std	Z+1, r24	; 0x01
   11f26:	92 83       	std	Z+2, r25	; 0x02
   11f28:	a3 83       	std	Z+3, r26	; 0x03
   11f2a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11f2e:	80 91 d8 1c 	lds	r24, 0x1CD8	; 0x801cd8 <lastcmd>
   11f32:	90 91 d9 1c 	lds	r25, 0x1CD9	; 0x801cd9 <lastcmd+0x1>
   11f36:	8f 35       	cpi	r24, 0x5F	; 95
   11f38:	91 05       	cpc	r25, r1
   11f3a:	09 f0       	breq	.+2      	; 0x11f3e <GPIB_LISTEN+0x4e>
   11f3c:	62 c0       	rjmp	.+196    	; 0x12002 <GPIB_LISTEN+0x112>
                printf("\n");
   11f3e:	8b e2       	ldi	r24, 0x2B	; 43
   11f40:	93 e1       	ldi	r25, 0x13	; 19
   11f42:	a0 e0       	ldi	r26, 0x00	; 0
   11f44:	ed b7       	in	r30, 0x3d	; 61
   11f46:	fe b7       	in	r31, 0x3e	; 62
   11f48:	81 83       	std	Z+1, r24	; 0x01
   11f4a:	92 83       	std	Z+2, r25	; 0x02
   11f4c:	a3 83       	std	Z+3, r26	; 0x03
   11f4e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   11f52:	57 c0       	rjmp	.+174    	; 0x12002 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11f54:	d0 e0       	ldi	r29, 0x00	; 0
   11f56:	ce 01       	movw	r24, r28
   11f58:	9c db       	rcall	.-2248   	; 0x11692 <AMIGO_is_MLA>
   11f5a:	89 2b       	or	r24, r25
   11f5c:	81 f0       	breq	.+32     	; 0x11f7e <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f62:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f66:	84 72       	andi	r24, 0x24	; 36
   11f68:	99 27       	eor	r25, r25
   11f6a:	89 2b       	or	r24, r25
   11f6c:	09 f4       	brne	.+2      	; 0x11f70 <GPIB_LISTEN+0x80>
   11f6e:	49 c0       	rjmp	.+146    	; 0x12002 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11f70:	ed b7       	in	r30, 0x3d	; 61
   11f72:	fe b7       	in	r31, 0x3e	; 62
   11f74:	d5 83       	std	Z+5, r29	; 0x05
   11f76:	c4 83       	std	Z+4, r28	; 0x04
   11f78:	89 e1       	ldi	r24, 0x19	; 25
   11f7a:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11f7c:	3c c0       	rjmp	.+120    	; 0x11ff6 <GPIB_LISTEN+0x106>
   11f7e:	ce 01       	movw	r24, r28
   11f80:	55 db       	rcall	.-2390   	; 0x1162c <SS80_is_MLA>
   11f82:	89 2b       	or	r24, r25
   11f84:	79 f0       	breq	.+30     	; 0x11fa4 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f8a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f8e:	84 72       	andi	r24, 0x24	; 36
   11f90:	99 27       	eor	r25, r25
   11f92:	89 2b       	or	r24, r25
   11f94:	b1 f1       	breq	.+108    	; 0x12002 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11f96:	ed b7       	in	r30, 0x3d	; 61
   11f98:	fe b7       	in	r31, 0x3e	; 62
   11f9a:	d5 83       	std	Z+5, r29	; 0x05
   11f9c:	c4 83       	std	Z+4, r28	; 0x04
   11f9e:	88 e0       	ldi	r24, 0x08	; 8
   11fa0:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11fa2:	29 c0       	rjmp	.+82     	; 0x11ff6 <GPIB_LISTEN+0x106>
   11fa4:	ce 01       	movw	r24, r28
   11fa6:	a8 db       	rcall	.-2224   	; 0x116f8 <PRINTER_is_MLA>
   11fa8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11fac:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fb0:	89 2b       	or	r24, r25
   11fb2:	c9 f0       	breq	.+50     	; 0x11fe6 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fb4:	24 72       	andi	r18, 0x24	; 36
   11fb6:	33 27       	eor	r19, r19
   11fb8:	23 2b       	or	r18, r19
   11fba:	61 f0       	breq	.+24     	; 0x11fd4 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11fbc:	ed b7       	in	r30, 0x3d	; 61
   11fbe:	fe b7       	in	r31, 0x3e	; 62
   11fc0:	d5 83       	std	Z+5, r29	; 0x05
   11fc2:	c4 83       	std	Z+4, r28	; 0x04
   11fc4:	84 ef       	ldi	r24, 0xF4	; 244
   11fc6:	92 e1       	ldi	r25, 0x12	; 18
   11fc8:	a0 e0       	ldi	r26, 0x00	; 0
   11fca:	81 83       	std	Z+1, r24	; 0x01
   11fcc:	92 83       	std	Z+2, r25	; 0x02
   11fce:	a3 83       	std	Z+3, r26	; 0x03
   11fd0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
        if(talking != UNT)
   11fd4:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   11fd8:	8f 35       	cpi	r24, 0x5F	; 95
   11fda:	99 f0       	breq	.+38     	; 0x12002 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   11fdc:	80 e0       	ldi	r24, 0x00	; 0
   11fde:	90 e0       	ldi	r25, 0x00	; 0
   11fe0:	0e 94 e3 ba 	call	0x175c6	; 0x175c6 <printer_open>
   11fe4:	0e c0       	rjmp	.+28     	; 0x12002 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fe6:	22 ff       	sbrs	r18, 2
   11fe8:	0c c0       	rjmp	.+24     	; 0x12002 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   11fea:	ed b7       	in	r30, 0x3d	; 61
   11fec:	fe b7       	in	r31, 0x3e	; 62
   11fee:	d5 83       	std	Z+5, r29	; 0x05
   11ff0:	c4 83       	std	Z+4, r28	; 0x04
   11ff2:	88 ee       	ldi	r24, 0xE8	; 232
   11ff4:	92 e1       	ldi	r25, 0x12	; 18
   11ff6:	a0 e0       	ldi	r26, 0x00	; 0
   11ff8:	81 83       	std	Z+1, r24	; 0x01
   11ffa:	92 83       	std	Z+2, r25	; 0x02
   11ffc:	a3 83       	std	Z+3, r26	; 0x03
   11ffe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   12002:	80 e0       	ldi	r24, 0x00	; 0
   12004:	90 e0       	ldi	r25, 0x00	; 0
   12006:	cd b7       	in	r28, 0x3d	; 61
   12008:	de b7       	in	r29, 0x3e	; 62
   1200a:	25 96       	adiw	r28, 0x05	; 5
   1200c:	e2 e0       	ldi	r30, 0x02	; 2
   1200e:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00012012 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12012:	cf 93       	push	r28
   12014:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12016:	92 db       	rcall	.-2268   	; 0x1173c <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12018:	10 92 52 19 	sts	0x1952, r1	; 0x801952 <gpib_log_fp+0x1>
   1201c:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   12020:	80 e0       	ldi	r24, 0x00	; 0
   12022:	90 e0       	ldi	r25, 0x00	; 0
   12024:	45 d8       	rcall	.-3958   	; 0x110b0 <gpib_read_byte>
   12026:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12028:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1202c:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1202e:	02 c0       	rjmp	.+4      	; 0x12034 <gpib_task+0x22>
   12030:	ce 01       	movw	r24, r28
   12032:	56 d9       	rcall	.-3412   	; 0x112e0 <gpib_decode>
#endif
        status = gpib_error_test(val);
   12034:	ce 01       	movw	r24, r28
   12036:	1d dc       	rcall	.-1990   	; 0x11872 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12038:	9c 01       	movw	r18, r24
   1203a:	23 70       	andi	r18, 0x03	; 3
   1203c:	33 27       	eor	r19, r19
   1203e:	23 2b       	or	r18, r19
   12040:	09 f0       	breq	.+2      	; 0x12044 <gpib_task+0x32>
   12042:	43 c0       	rjmp	.+134    	; 0x120ca <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12044:	89 2b       	or	r24, r25
   12046:	61 f7       	brne	.-40     	; 0x12020 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12048:	d2 ff       	sbrs	r29, 2
   1204a:	26 c0       	rjmp	.+76     	; 0x12098 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   1204c:	8c 2f       	mov	r24, r28
   1204e:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   12050:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12052:	10 f4       	brcc	.+4      	; 0x12058 <gpib_task+0x46>
   12054:	52 dd       	rcall	.-1372   	; 0x11afa <GPIB>
                continue;
   12056:	e4 cf       	rjmp	.-56     	; 0x12020 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12058:	90 ee       	ldi	r25, 0xE0	; 224
   1205a:	98 0f       	add	r25, r24
   1205c:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1205e:	10 f4       	brcc	.+4      	; 0x12064 <gpib_task+0x52>
   12060:	47 df       	rcall	.-370    	; 0x11ef0 <GPIB_LISTEN>
                continue;
   12062:	de cf       	rjmp	.-68     	; 0x12020 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12064:	90 ec       	ldi	r25, 0xC0	; 192
   12066:	98 0f       	add	r25, r24
   12068:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   1206a:	10 f4       	brcc	.+4      	; 0x12070 <gpib_task+0x5e>
   1206c:	08 de       	rcall	.-1008   	; 0x11c7e <GPIB_TALK>
                continue;
   1206e:	d8 cf       	rjmp	.-80     	; 0x12020 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12070:	90 91 e0 1e 	lds	r25, 0x1EE0	; 0x801ee0 <listening>
   12074:	99 23       	and	r25, r25
   12076:	59 f0       	breq	.+22     	; 0x1208e <gpib_task+0x7c>
   12078:	20 91 d8 1c 	lds	r18, 0x1CD8	; 0x801cd8 <lastcmd>
   1207c:	30 91 d9 1c 	lds	r19, 0x1CD9	; 0x801cd9 <lastcmd+0x1>
   12080:	2f 35       	cpi	r18, 0x5F	; 95
   12082:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12084:	21 f4       	brne	.+8      	; 0x1208e <gpib_task+0x7c>
   12086:	10 92 df 1e 	sts	0x1EDF, r1	; 0x801edf <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   1208a:	91 de       	rcall	.-734    	; 0x11dae <GPIB_SECONDARY_ADDRESS>
                continue;
   1208c:	c9 cf       	rjmp	.-110    	; 0x12020 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   1208e:	80 93 df 1e 	sts	0x1EDF, r24	; 0x801edf <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12092:	60 e0       	ldi	r22, 0x00	; 0
   12094:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12096:	12 c0       	rjmp	.+36     	; 0x120bc <gpib_task+0xaa>
   12098:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   1209c:	90 e0       	ldi	r25, 0x00	; 0
   1209e:	2c db       	rcall	.-2472   	; 0x116f8 <PRINTER_is_MLA>
   120a0:	89 2b       	or	r24, r25
   120a2:	29 f0       	breq	.+10     	; 0x120ae <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   120a4:	ce 01       	movw	r24, r28
   120a6:	99 27       	eor	r25, r25
   120a8:	0e 94 86 bb 	call	0x1770c	; 0x1770c <printer_buffer>
                continue;
   120ac:	b9 cf       	rjmp	.-142    	; 0x12020 <gpib_task+0xe>
            }

            if(!secondary)
   120ae:	80 91 df 1e 	lds	r24, 0x1EDF	; 0x801edf <secondary>
   120b2:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   120b4:	09 f4       	brne	.+2      	; 0x120b8 <gpib_task+0xa6>
   120b6:	b4 cf       	rjmp	.-152    	; 0x12020 <gpib_task+0xe>
   120b8:	61 e0       	ldi	r22, 0x01	; 1
   120ba:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   120bc:	67 dc       	rcall	.-1842   	; 0x1198c <GPIB_COMMANDS>
   120be:	d9 db       	rcall	.-2126   	; 0x11872 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   120c0:	83 70       	andi	r24, 0x03	; 3
   120c2:	99 27       	eor	r25, r25
   120c4:	89 2b       	or	r24, r25
   120c6:	09 f4       	brne	.+2      	; 0x120ca <gpib_task+0xb8>
   120c8:	ab cf       	rjmp	.-170    	; 0x12020 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   120ca:	df 91       	pop	r29
   120cc:	cf 91       	pop	r28
   120ce:	08 95       	ret

000120d0 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   120d0:	08 95       	ret

000120d2 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   120d2:	cf 93       	push	r28
   120d4:	df 93       	push	r29
   120d6:	00 d0       	rcall	.+0      	; 0x120d8 <gpib_help+0x6>
   120d8:	1f 92       	push	r1
   120da:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   120dc:	8e eb       	ldi	r24, 0xBE	; 190
   120de:	96 e1       	ldi	r25, 0x16	; 22
   120e0:	a0 e0       	ldi	r26, 0x00	; 0
   120e2:	ed b7       	in	r30, 0x3d	; 61
   120e4:	fe b7       	in	r31, 0x3e	; 62
   120e6:	81 83       	std	Z+1, r24	; 0x01
   120e8:	92 83       	std	Z+2, r25	; 0x02
   120ea:	a3 83       	std	Z+3, r26	; 0x03
   120ec:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    if(full)
   120f0:	cd 2b       	or	r28, r29
   120f2:	51 f0       	breq	.+20     	; 0x12108 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   120f4:	85 ef       	ldi	r24, 0xF5	; 245
   120f6:	94 e1       	ldi	r25, 0x14	; 20
   120f8:	a0 e0       	ldi	r26, 0x00	; 0
   120fa:	ed b7       	in	r30, 0x3d	; 61
   120fc:	fe b7       	in	r31, 0x3e	; 62
   120fe:	81 83       	std	Z+1, r24	; 0x01
   12100:	92 83       	std	Z+2, r25	; 0x02
   12102:	a3 83       	std	Z+3, r26	; 0x03
   12104:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   12108:	cd b7       	in	r28, 0x3d	; 61
   1210a:	de b7       	in	r29, 0x3e	; 62
   1210c:	23 96       	adiw	r28, 0x03	; 3
   1210e:	e2 e0       	ldi	r30, 0x02	; 2
   12110:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00012114 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12114:	a5 e0       	ldi	r26, 0x05	; 5
   12116:	b0 e0       	ldi	r27, 0x00	; 0
   12118:	e0 e9       	ldi	r30, 0x90	; 144
   1211a:	f0 e9       	ldi	r31, 0x90	; 144
   1211c:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12120:	fb 01       	movw	r30, r22
   12122:	e0 80       	ld	r14, Z
   12124:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12126:	e1 14       	cp	r14, r1
   12128:	f1 04       	cpc	r15, r1
   1212a:	19 f4       	brne	.+6      	; 0x12132 <gpib_tests+0x1e>
        return(0);
   1212c:	80 e0       	ldi	r24, 0x00	; 0
   1212e:	90 e0       	ldi	r25, 0x00	; 0
   12130:	d2 c0       	rjmp	.+420    	; 0x122d6 <gpib_tests+0x1c2>
   12132:	6b 01       	movw	r12, r22
   12134:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12136:	63 eb       	ldi	r22, 0xB3	; 179
   12138:	7d e0       	ldi	r23, 0x0D	; 13
   1213a:	c7 01       	movw	r24, r14
   1213c:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   12140:	89 2b       	or	r24, r25
   12142:	a1 f0       	breq	.+40     	; 0x1216c <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12144:	f6 01       	movw	r30, r12
   12146:	e2 80       	ldd	r14, Z+2	; 0x02
   12148:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1214a:	e1 14       	cp	r14, r1
   1214c:	f1 04       	cpc	r15, r1
   1214e:	21 f4       	brne	.+8      	; 0x12158 <gpib_tests+0x44>
        {
            gpib_help(1);
   12150:	81 e0       	ldi	r24, 0x01	; 1
   12152:	90 e0       	ldi	r25, 0x00	; 0
   12154:	be df       	rcall	.-132    	; 0x120d2 <gpib_help>
   12156:	bd c0       	rjmp	.+378    	; 0x122d2 <gpib_tests+0x1be>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12158:	63 e7       	ldi	r22, 0x73	; 115
   1215a:	76 e1       	ldi	r23, 0x16	; 22
   1215c:	c7 01       	movw	r24, r14
   1215e:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   12162:	89 2b       	or	r24, r25
   12164:	a9 f7       	brne	.-22     	; 0x12150 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12166:	c2 e0       	ldi	r28, 0x02	; 2
   12168:	d0 e0       	ldi	r29, 0x00	; 0
   1216a:	02 c0       	rjmp	.+4      	; 0x12170 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1216c:	c1 e0       	ldi	r28, 0x01	; 1
   1216e:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   12170:	68 eb       	ldi	r22, 0xB8	; 184
   12172:	7d e0       	ldi	r23, 0x0D	; 13
   12174:	c7 01       	movw	r24, r14
   12176:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1217a:	89 2b       	or	r24, r25
   1217c:	29 f1       	breq	.+74     	; 0x121c8 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1217e:	fe 01       	movw	r30, r28
   12180:	ee 0f       	add	r30, r30
   12182:	ff 1f       	adc	r31, r31
   12184:	ec 0d       	add	r30, r12
   12186:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12188:	01 90       	ld	r0, Z+
   1218a:	f0 81       	ld	r31, Z
   1218c:	e0 2d       	mov	r30, r0
   1218e:	80 81       	ld	r24, Z
   12190:	8d 33       	cpi	r24, 0x3D	; 61
   12192:	09 f4       	brne	.+2      	; 0x12196 <gpib_tests+0x82>
            ++ind;
   12194:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12196:	cc 0f       	add	r28, r28
   12198:	dd 1f       	adc	r29, r29
   1219a:	cc 0d       	add	r28, r12
   1219c:	dd 1d       	adc	r29, r13
   1219e:	88 81       	ld	r24, Y
   121a0:	99 81       	ldd	r25, Y+1	; 0x01
   121a2:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   121a6:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   121aa:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   121ae:	ed b7       	in	r30, 0x3d	; 61
   121b0:	fe b7       	in	r31, 0x3e	; 62
   121b2:	75 83       	std	Z+5, r23	; 0x05
   121b4:	64 83       	std	Z+4, r22	; 0x04
   121b6:	88 ee       	ldi	r24, 0xE8	; 232
   121b8:	94 e1       	ldi	r25, 0x14	; 20
   121ba:	a0 e0       	ldi	r26, 0x00	; 0
   121bc:	81 83       	std	Z+1, r24	; 0x01
   121be:	92 83       	std	Z+2, r25	; 0x02
   121c0:	a3 83       	std	Z+3, r26	; 0x03
   121c2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   121c6:	85 c0       	rjmp	.+266    	; 0x122d2 <gpib_tests+0x1be>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   121c8:	6e eb       	ldi	r22, 0xBE	; 190
   121ca:	7d e0       	ldi	r23, 0x0D	; 13
   121cc:	c7 01       	movw	r24, r14
   121ce:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   121d2:	89 2b       	or	r24, r25
   121d4:	c9 f0       	breq	.+50     	; 0x12208 <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   121d6:	cc 0f       	add	r28, r28
   121d8:	dd 1f       	adc	r29, r29
   121da:	cc 0d       	add	r28, r12
   121dc:	dd 1d       	adc	r29, r13
   121de:	88 81       	ld	r24, Y
   121e0:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   121e2:	00 97       	sbiw	r24, 0x00	; 0
   121e4:	69 f0       	breq	.+26     	; 0x12200 <gpib_tests+0xec>
   121e6:	fc 01       	movw	r30, r24
   121e8:	20 81       	ld	r18, Z
   121ea:	22 23       	and	r18, r18
   121ec:	49 f0       	breq	.+18     	; 0x12200 <gpib_tests+0xec>
   121ee:	68 ec       	ldi	r22, 0xC8	; 200
   121f0:	7d e0       	ldi	r23, 0x0D	; 13
   121f2:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   121f6:	89 2b       	or	r24, r25
   121f8:	19 f0       	breq	.+6      	; 0x12200 <gpib_tests+0xec>
            display_Addresses(1);
   121fa:	81 e0       	ldi	r24, 0x01	; 1
   121fc:	90 e0       	ldi	r25, 0x00	; 0
   121fe:	02 c0       	rjmp	.+4      	; 0x12204 <gpib_tests+0xf0>
        else
            display_Addresses(0);
   12200:	80 e0       	ldi	r24, 0x00	; 0
   12202:	90 e0       	ldi	r25, 0x00	; 0
   12204:	4a d1       	rcall	.+660    	; 0x1249a <display_Addresses>
   12206:	65 c0       	rjmp	.+202    	; 0x122d2 <gpib_tests+0x1be>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12208:	6b ec       	ldi	r22, 0xCB	; 203
   1220a:	7d e0       	ldi	r23, 0x0D	; 13
   1220c:	c7 01       	movw	r24, r14
   1220e:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   12212:	89 2b       	or	r24, r25
   12214:	c9 f0       	breq	.+50     	; 0x12248 <gpib_tests+0x134>
    {
        ptr = argv[ind];
   12216:	cc 0f       	add	r28, r28
   12218:	dd 1f       	adc	r29, r29
   1221a:	cc 0d       	add	r28, r12
   1221c:	dd 1d       	adc	r29, r13
   1221e:	88 81       	ld	r24, Y
   12220:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12222:	00 97       	sbiw	r24, 0x00	; 0
   12224:	69 f0       	breq	.+26     	; 0x12240 <gpib_tests+0x12c>
   12226:	fc 01       	movw	r30, r24
   12228:	20 81       	ld	r18, Z
   1222a:	22 23       	and	r18, r18
   1222c:	49 f0       	breq	.+18     	; 0x12240 <gpib_tests+0x12c>
   1222e:	68 ec       	ldi	r22, 0xC8	; 200
   12230:	7d e0       	ldi	r23, 0x0D	; 13
   12232:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   12236:	89 2b       	or	r24, r25
   12238:	19 f0       	breq	.+6      	; 0x12240 <gpib_tests+0x12c>
            display_Config(1);
   1223a:	81 e0       	ldi	r24, 0x01	; 1
   1223c:	90 e0       	ldi	r25, 0x00	; 0
   1223e:	02 c0       	rjmp	.+4      	; 0x12244 <gpib_tests+0x130>
        else
            display_Config(0);
   12240:	80 e0       	ldi	r24, 0x00	; 0
   12242:	90 e0       	ldi	r25, 0x00	; 0
   12244:	05 d2       	rcall	.+1034   	; 0x12650 <display_Config>
   12246:	45 c0       	rjmp	.+138    	; 0x122d2 <gpib_tests+0x1be>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12248:	62 ed       	ldi	r22, 0xD2	; 210
   1224a:	7d e0       	ldi	r23, 0x0D	; 13
   1224c:	c7 01       	movw	r24, r14
   1224e:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   12252:	89 2b       	or	r24, r25
   12254:	19 f0       	breq	.+6      	; 0x1225c <gpib_tests+0x148>
    {
        gpib_timer_elapsed_begin();
   12256:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   1225a:	3b c0       	rjmp	.+118    	; 0x122d2 <gpib_tests+0x1be>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   1225c:	60 ee       	ldi	r22, 0xE0	; 224
   1225e:	7d e0       	ldi	r23, 0x0D	; 13
   12260:	c7 01       	movw	r24, r14
   12262:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   12266:	89 2b       	or	r24, r25
   12268:	29 f0       	breq	.+10     	; 0x12274 <gpib_tests+0x160>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1226a:	88 ee       	ldi	r24, 0xE8	; 232
   1226c:	9d e0       	ldi	r25, 0x0D	; 13
   1226e:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   12272:	2f c0       	rjmp	.+94     	; 0x122d2 <gpib_tests+0x1be>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   12274:	66 ef       	ldi	r22, 0xF6	; 246
   12276:	7d e0       	ldi	r23, 0x0D	; 13
   12278:	c7 01       	movw	r24, r14
   1227a:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1227e:	89 2b       	or	r24, r25
    {
        gpib_task();
   12280:	11 f0       	breq	.+4      	; 0x12286 <gpib_tests+0x172>
   12282:	c7 de       	rcall	.-626    	; 0x12012 <gpib_task>
   12284:	26 c0       	rjmp	.+76     	; 0x122d2 <gpib_tests+0x1be>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12286:	8e 01       	movw	r16, r28
   12288:	0f 5f       	subi	r16, 0xFF	; 255
   1228a:	1f 4f       	sbci	r17, 0xFF	; 255
   1228c:	95 01       	movw	r18, r10
   1228e:	a8 01       	movw	r20, r16
   12290:	6b ef       	ldi	r22, 0xFB	; 251
   12292:	7d e0       	ldi	r23, 0x0D	; 13
   12294:	c7 01       	movw	r24, r14
   12296:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1229a:	89 2b       	or	r24, r25
   1229c:	09 f4       	brne	.+2      	; 0x122a0 <gpib_tests+0x18c>
   1229e:	46 cf       	rjmp	.-372    	; 0x1212c <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   122a0:	00 0f       	add	r16, r16
   122a2:	11 1f       	adc	r17, r17
   122a4:	e6 01       	movw	r28, r12
   122a6:	c0 0f       	add	r28, r16
   122a8:	d1 1f       	adc	r29, r17
   122aa:	88 81       	ld	r24, Y
   122ac:	99 81       	ldd	r25, Y+1	; 0x01
   122ae:	00 97       	sbiw	r24, 0x00	; 0
   122b0:	51 f0       	breq	.+20     	; 0x122c6 <gpib_tests+0x1b2>
   122b2:	61 e0       	ldi	r22, 0x01	; 1
   122b4:	7e e0       	ldi	r23, 0x0E	; 14
   122b6:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   122ba:	61 e0       	ldi	r22, 0x01	; 1
   122bc:	70 e0       	ldi	r23, 0x00	; 0
   122be:	89 2b       	or	r24, r25
   122c0:	21 f4       	brne	.+8      	; 0x122ca <gpib_tests+0x1b6>
   122c2:	60 e0       	ldi	r22, 0x00	; 0
   122c4:	02 c0       	rjmp	.+4      	; 0x122ca <gpib_tests+0x1b6>
   122c6:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   122c8:	70 e0       	ldi	r23, 0x00	; 0
   122ca:	22 97       	sbiw	r28, 0x02	; 2
   122cc:	88 81       	ld	r24, Y
   122ce:	99 81       	ldd	r25, Y+1	; 0x01
   122d0:	3e da       	rcall	.-2948   	; 0x1174e <gpib_trace_task>
        return(1);
   122d2:	81 e0       	ldi	r24, 0x01	; 1
   122d4:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   122d6:	cd b7       	in	r28, 0x3d	; 61
   122d8:	de b7       	in	r29, 0x3e	; 62
   122da:	25 96       	adiw	r28, 0x05	; 5
   122dc:	ea e0       	ldi	r30, 0x0A	; 10
   122de:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

000122e2 <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   122e2:	ef 92       	push	r14
   122e4:	ff 92       	push	r15
   122e6:	0f 93       	push	r16
   122e8:	1f 93       	push	r17
   122ea:	cf 93       	push	r28
   122ec:	df 93       	push	r29
   122ee:	7c 01       	movw	r14, r24
   122f0:	c4 ec       	ldi	r28, 0xC4	; 196
   122f2:	d1 e0       	ldi	r29, 0x01	; 1
   122f4:	00 e0       	ldi	r16, 0x00	; 0
   122f6:	10 e0       	ldi	r17, 0x00	; 0
   122f8:	8a 81       	ldd	r24, Y+2	; 0x02
   122fa:	9b 81       	ldd	r25, Y+3	; 0x03
   122fc:	8f 3f       	cpi	r24, 0xFF	; 255
   122fe:	2f ef       	ldi	r18, 0xFF	; 255
   12300:	92 07       	cpc	r25, r18
   12302:	61 f0       	breq	.+24     	; 0x1231c <tok_index+0x3a>
   12304:	68 81       	ld	r22, Y
   12306:	79 81       	ldd	r23, Y+1	; 0x01
   12308:	c7 01       	movw	r24, r14
   1230a:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1230e:	24 96       	adiw	r28, 0x04	; 4
   12310:	89 2b       	or	r24, r25
   12312:	19 f4       	brne	.+6      	; 0x1231a <tok_index+0x38>
   12314:	0f 5f       	subi	r16, 0xFF	; 255
   12316:	1f 4f       	sbci	r17, 0xFF	; 255
   12318:	ef cf       	rjmp	.-34     	; 0x122f8 <tok_index+0x16>
   1231a:	c8 01       	movw	r24, r16
   1231c:	cd b7       	in	r28, 0x3d	; 61
   1231e:	de b7       	in	r29, 0x3e	; 62
   12320:	e6 e0       	ldi	r30, 0x06	; 6
   12322:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00012326 <tok_name>:
   12326:	e4 ec       	ldi	r30, 0xC4	; 196
   12328:	f1 e0       	ldi	r31, 0x01	; 1
   1232a:	20 e0       	ldi	r18, 0x00	; 0
   1232c:	30 e0       	ldi	r19, 0x00	; 0
   1232e:	90 e0       	ldi	r25, 0x00	; 0
   12330:	42 81       	ldd	r20, Z+2	; 0x02
   12332:	53 81       	ldd	r21, Z+3	; 0x03
   12334:	4f 3f       	cpi	r20, 0xFF	; 255
   12336:	6f ef       	ldi	r22, 0xFF	; 255
   12338:	56 07       	cpc	r21, r22
   1233a:	89 f0       	breq	.+34     	; 0x1235e <tok_name+0x38>
   1233c:	34 96       	adiw	r30, 0x04	; 4
   1233e:	48 17       	cp	r20, r24
   12340:	59 07       	cpc	r21, r25
   12342:	51 f4       	brne	.+20     	; 0x12358 <tok_name+0x32>
   12344:	22 0f       	add	r18, r18
   12346:	33 1f       	adc	r19, r19
   12348:	22 0f       	add	r18, r18
   1234a:	33 1f       	adc	r19, r19
   1234c:	f9 01       	movw	r30, r18
   1234e:	ec 53       	subi	r30, 0x3C	; 60
   12350:	fe 4f       	sbci	r31, 0xFE	; 254
   12352:	80 81       	ld	r24, Z
   12354:	91 81       	ldd	r25, Z+1	; 0x01
   12356:	08 95       	ret
   12358:	2f 5f       	subi	r18, 0xFF	; 255
   1235a:	3f 4f       	sbci	r19, 0xFF	; 255
   1235c:	e9 cf       	rjmp	.-46     	; 0x12330 <tok_name+0xa>
   1235e:	8d e2       	ldi	r24, 0x2D	; 45
   12360:	9c e0       	ldi	r25, 0x0C	; 12
   12362:	08 95       	ret

00012364 <print_tok_val>:
   12364:	cf 92       	push	r12
   12366:	df 92       	push	r13
   12368:	ef 92       	push	r14
   1236a:	ff 92       	push	r15
   1236c:	0f 93       	push	r16
   1236e:	1f 93       	push	r17
   12370:	cf 93       	push	r28
   12372:	ad b7       	in	r26, 0x3d	; 61
   12374:	be b7       	in	r27, 0x3e	; 62
   12376:	1d 97       	sbiw	r26, 0x0d	; 13
   12378:	0f b6       	in	r0, 0x3f	; 63
   1237a:	f8 94       	cli
   1237c:	be bf       	out	0x3e, r27	; 62
   1237e:	0f be       	out	0x3f, r0	; 63
   12380:	ad bf       	out	0x3d, r26	; 61
   12382:	c6 2f       	mov	r28, r22
   12384:	69 01       	movw	r12, r18
   12386:	7a 01       	movw	r14, r20
   12388:	ce df       	rcall	.-100    	; 0x12326 <tok_name>
   1238a:	8c 01       	movw	r16, r24
   1238c:	cc 23       	and	r28, r28
   1238e:	31 f0       	breq	.+12     	; 0x1239c <print_tok_val+0x38>
   12390:	80 e2       	ldi	r24, 0x20	; 32
   12392:	90 e0       	ldi	r25, 0x00	; 0
   12394:	0e 94 e5 74 	call	0xe9ca	; 0xe9ca <putchar>
   12398:	c1 50       	subi	r28, 0x01	; 1
   1239a:	f8 cf       	rjmp	.-16     	; 0x1238c <print_tok_val+0x28>
   1239c:	ed b7       	in	r30, 0x3d	; 61
   1239e:	fe b7       	in	r31, 0x3e	; 62
   123a0:	c2 86       	std	Z+10, r12	; 0x0a
   123a2:	d3 86       	std	Z+11, r13	; 0x0b
   123a4:	e4 86       	std	Z+12, r14	; 0x0c
   123a6:	f5 86       	std	Z+13, r15	; 0x0d
   123a8:	c6 82       	std	Z+6, r12	; 0x06
   123aa:	d7 82       	std	Z+7, r13	; 0x07
   123ac:	e0 86       	std	Z+8, r14	; 0x08
   123ae:	f1 86       	std	Z+9, r15	; 0x09
   123b0:	15 83       	std	Z+5, r17	; 0x05
   123b2:	04 83       	std	Z+4, r16	; 0x04
   123b4:	81 e5       	ldi	r24, 0x51	; 81
   123b6:	9d e1       	ldi	r25, 0x1D	; 29
   123b8:	a0 e0       	ldi	r26, 0x00	; 0
   123ba:	81 83       	std	Z+1, r24	; 0x01
   123bc:	92 83       	std	Z+2, r25	; 0x02
   123be:	a3 83       	std	Z+3, r26	; 0x03
   123c0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   123c4:	ad b7       	in	r26, 0x3d	; 61
   123c6:	be b7       	in	r27, 0x3e	; 62
   123c8:	1d 96       	adiw	r26, 0x0d	; 13
   123ca:	0f b6       	in	r0, 0x3f	; 63
   123cc:	f8 94       	cli
   123ce:	be bf       	out	0x3e, r27	; 62
   123d0:	0f be       	out	0x3f, r0	; 63
   123d2:	ad bf       	out	0x3d, r26	; 61
   123d4:	cf 91       	pop	r28
   123d6:	1f 91       	pop	r17
   123d8:	0f 91       	pop	r16
   123da:	ff 90       	pop	r15
   123dc:	ef 90       	pop	r14
   123de:	df 90       	pop	r13
   123e0:	cf 90       	pop	r12
   123e2:	08 95       	ret

000123e4 <print_tok_str>:
   123e4:	ef 92       	push	r14
   123e6:	ff 92       	push	r15
   123e8:	0f 93       	push	r16
   123ea:	1f 93       	push	r17
   123ec:	cf 93       	push	r28
   123ee:	ad b7       	in	r26, 0x3d	; 61
   123f0:	be b7       	in	r27, 0x3e	; 62
   123f2:	17 97       	sbiw	r26, 0x07	; 7
   123f4:	0f b6       	in	r0, 0x3f	; 63
   123f6:	f8 94       	cli
   123f8:	be bf       	out	0x3e, r27	; 62
   123fa:	0f be       	out	0x3f, r0	; 63
   123fc:	ad bf       	out	0x3d, r26	; 61
   123fe:	c6 2f       	mov	r28, r22
   12400:	7a 01       	movw	r14, r20
   12402:	91 df       	rcall	.-222    	; 0x12326 <tok_name>
   12404:	8c 01       	movw	r16, r24
   12406:	cc 23       	and	r28, r28
   12408:	31 f0       	breq	.+12     	; 0x12416 <print_tok_str+0x32>
   1240a:	80 e2       	ldi	r24, 0x20	; 32
   1240c:	90 e0       	ldi	r25, 0x00	; 0
   1240e:	0e 94 e5 74 	call	0xe9ca	; 0xe9ca <putchar>
   12412:	c1 50       	subi	r28, 0x01	; 1
   12414:	f8 cf       	rjmp	.-16     	; 0x12406 <print_tok_str+0x22>
   12416:	ed b7       	in	r30, 0x3d	; 61
   12418:	fe b7       	in	r31, 0x3e	; 62
   1241a:	f7 82       	std	Z+7, r15	; 0x07
   1241c:	e6 82       	std	Z+6, r14	; 0x06
   1241e:	15 83       	std	Z+5, r17	; 0x05
   12420:	04 83       	std	Z+4, r16	; 0x04
   12422:	85 e4       	ldi	r24, 0x45	; 69
   12424:	9d e1       	ldi	r25, 0x1D	; 29
   12426:	a0 e0       	ldi	r26, 0x00	; 0
   12428:	81 83       	std	Z+1, r24	; 0x01
   1242a:	92 83       	std	Z+2, r25	; 0x02
   1242c:	a3 83       	std	Z+3, r26	; 0x03
   1242e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12432:	ad b7       	in	r26, 0x3d	; 61
   12434:	be b7       	in	r27, 0x3e	; 62
   12436:	17 96       	adiw	r26, 0x07	; 7
   12438:	0f b6       	in	r0, 0x3f	; 63
   1243a:	f8 94       	cli
   1243c:	be bf       	out	0x3e, r27	; 62
   1243e:	0f be       	out	0x3f, r0	; 63
   12440:	ad bf       	out	0x3d, r26	; 61
   12442:	cf 91       	pop	r28
   12444:	1f 91       	pop	r17
   12446:	0f 91       	pop	r16
   12448:	ff 90       	pop	r15
   1244a:	ef 90       	pop	r14
   1244c:	08 95       	ret

0001244e <print_tok>:
   1244e:	0f 93       	push	r16
   12450:	1f 93       	push	r17
   12452:	cf 93       	push	r28
   12454:	00 d0       	rcall	.+0      	; 0x12456 <print_tok+0x8>
   12456:	00 d0       	rcall	.+0      	; 0x12458 <print_tok+0xa>
   12458:	1f 92       	push	r1
   1245a:	c6 2f       	mov	r28, r22
   1245c:	64 df       	rcall	.-312    	; 0x12326 <tok_name>
   1245e:	8c 01       	movw	r16, r24
   12460:	cc 23       	and	r28, r28
   12462:	31 f0       	breq	.+12     	; 0x12470 <print_tok+0x22>
   12464:	80 e2       	ldi	r24, 0x20	; 32
   12466:	90 e0       	ldi	r25, 0x00	; 0
   12468:	0e 94 e5 74 	call	0xe9ca	; 0xe9ca <putchar>
   1246c:	c1 50       	subi	r28, 0x01	; 1
   1246e:	f8 cf       	rjmp	.-16     	; 0x12460 <print_tok+0x12>
   12470:	ed b7       	in	r30, 0x3d	; 61
   12472:	fe b7       	in	r31, 0x3e	; 62
   12474:	15 83       	std	Z+5, r17	; 0x05
   12476:	04 83       	std	Z+4, r16	; 0x04
   12478:	81 e4       	ldi	r24, 0x41	; 65
   1247a:	9d e1       	ldi	r25, 0x1D	; 29
   1247c:	a0 e0       	ldi	r26, 0x00	; 0
   1247e:	81 83       	std	Z+1, r24	; 0x01
   12480:	92 83       	std	Z+2, r25	; 0x02
   12482:	a3 83       	std	Z+3, r26	; 0x03
   12484:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12488:	0f 90       	pop	r0
   1248a:	0f 90       	pop	r0
   1248c:	0f 90       	pop	r0
   1248e:	0f 90       	pop	r0
   12490:	0f 90       	pop	r0
   12492:	cf 91       	pop	r28
   12494:	1f 91       	pop	r17
   12496:	0f 91       	pop	r16
   12498:	08 95       	ret

0001249a <display_Addresses>:
   1249a:	2f 92       	push	r2
   1249c:	3f 92       	push	r3
   1249e:	4f 92       	push	r4
   124a0:	6f 92       	push	r6
   124a2:	7f 92       	push	r7
   124a4:	8f 92       	push	r8
   124a6:	cf 92       	push	r12
   124a8:	df 92       	push	r13
   124aa:	ef 92       	push	r14
   124ac:	cf 93       	push	r28
   124ae:	df 93       	push	r29
   124b0:	cd b7       	in	r28, 0x3d	; 61
   124b2:	de b7       	in	r29, 0x3e	; 62
   124b4:	2a 97       	sbiw	r28, 0x0a	; 10
   124b6:	0f b6       	in	r0, 0x3f	; 63
   124b8:	f8 94       	cli
   124ba:	de bf       	out	0x3e, r29	; 62
   124bc:	0f be       	out	0x3f, r0	; 63
   124be:	cd bf       	out	0x3d, r28	; 61
   124c0:	8b e0       	ldi	r24, 0x0B	; 11
   124c2:	9a e1       	ldi	r25, 0x1A	; 26
   124c4:	a0 e0       	ldi	r26, 0x00	; 0
   124c6:	ed b7       	in	r30, 0x3d	; 61
   124c8:	fe b7       	in	r31, 0x3e	; 62
   124ca:	81 83       	std	Z+1, r24	; 0x01
   124cc:	92 83       	std	Z+2, r25	; 0x02
   124ce:	a3 83       	std	Z+3, r26	; 0x03
   124d0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   124d4:	24 ee       	ldi	r18, 0xE4	; 228
   124d6:	3e e1       	ldi	r19, 0x1E	; 30
   124d8:	3a 87       	std	Y+10, r19	; 0x0a
   124da:	29 87       	std	Y+9, r18	; 0x09
   124dc:	8d ee       	ldi	r24, 0xED	; 237
   124de:	99 e1       	ldi	r25, 0x19	; 25
   124e0:	6c 01       	movw	r12, r24
   124e2:	e1 2c       	mov	r14, r1
   124e4:	8f ee       	ldi	r24, 0xEF	; 239
   124e6:	99 e1       	ldi	r25, 0x19	; 25
   124e8:	3c 01       	movw	r6, r24
   124ea:	81 2c       	mov	r8, r1
   124ec:	88 ef       	ldi	r24, 0xF8	; 248
   124ee:	99 e1       	ldi	r25, 0x19	; 25
   124f0:	1c 01       	movw	r2, r24
   124f2:	41 2c       	mov	r4, r1
   124f4:	82 e0       	ldi	r24, 0x02	; 2
   124f6:	9a e1       	ldi	r25, 0x1A	; 26
   124f8:	9c 01       	movw	r18, r24
   124fa:	40 e0       	ldi	r20, 0x00	; 0
   124fc:	2e 83       	std	Y+6, r18	; 0x06
   124fe:	3f 83       	std	Y+7, r19	; 0x07
   12500:	48 87       	std	Y+8, r20	; 0x08
   12502:	e9 85       	ldd	r30, Y+9	; 0x09
   12504:	fa 85       	ldd	r31, Y+10	; 0x0a
   12506:	80 81       	ld	r24, Z
   12508:	88 23       	and	r24, r24
   1250a:	09 f4       	brne	.+2      	; 0x1250e <display_Addresses+0x74>
   1250c:	7b c0       	rjmp	.+246    	; 0x12604 <display_Addresses+0x16a>
   1250e:	83 30       	cpi	r24, 0x03	; 3
   12510:	21 f0       	breq	.+8      	; 0x1251a <display_Addresses+0x80>
   12512:	81 30       	cpi	r24, 0x01	; 1
   12514:	09 f0       	breq	.+2      	; 0x12518 <display_Addresses+0x7e>
   12516:	5a c0       	rjmp	.+180    	; 0x125cc <display_Addresses+0x132>
   12518:	1f c0       	rjmp	.+62     	; 0x12558 <display_Addresses+0xbe>
   1251a:	e9 85       	ldd	r30, Y+9	; 0x09
   1251c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1251e:	87 a1       	ldd	r24, Z+39	; 0x27
   12520:	90 a5       	ldd	r25, Z+40	; 0x28
   12522:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <SS80p+0x1>
   12526:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <SS80p>
   1252a:	cf 01       	movw	r24, r30
   1252c:	07 96       	adiw	r24, 0x07	; 7
   1252e:	ed b7       	in	r30, 0x3d	; 61
   12530:	fe b7       	in	r31, 0x3e	; 62
   12532:	95 83       	std	Z+5, r25	; 0x05
   12534:	84 83       	std	Z+4, r24	; 0x04
   12536:	2e 81       	ldd	r18, Y+6	; 0x06
   12538:	3f 81       	ldd	r19, Y+7	; 0x07
   1253a:	48 85       	ldd	r20, Y+8	; 0x08
   1253c:	21 83       	std	Z+1, r18	; 0x01
   1253e:	32 83       	std	Z+2, r19	; 0x02
   12540:	43 83       	std	Z+3, r20	; 0x03
   12542:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12546:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   1254a:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1254e:	42 81       	ldd	r20, Z+2	; 0x02
   12550:	53 81       	ldd	r21, Z+3	; 0x03
   12552:	64 e0       	ldi	r22, 0x04	; 4
   12554:	82 e1       	ldi	r24, 0x12	; 18
   12556:	46 df       	rcall	.-372    	; 0x123e4 <print_tok_str>
   12558:	e9 85       	ldd	r30, Y+9	; 0x09
   1255a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1255c:	80 81       	ld	r24, Z
   1255e:	81 30       	cpi	r24, 0x01	; 1
   12560:	d1 f4       	brne	.+52     	; 0x12596 <display_Addresses+0xfc>
   12562:	87 a1       	ldd	r24, Z+39	; 0x27
   12564:	90 a5       	ldd	r25, Z+40	; 0x28
   12566:	90 93 56 19 	sts	0x1956, r25	; 0x801956 <AMIGOp+0x1>
   1256a:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <AMIGOp>
   1256e:	cf 01       	movw	r24, r30
   12570:	07 96       	adiw	r24, 0x07	; 7
   12572:	ed b7       	in	r30, 0x3d	; 61
   12574:	fe b7       	in	r31, 0x3e	; 62
   12576:	95 83       	std	Z+5, r25	; 0x05
   12578:	84 83       	std	Z+4, r24	; 0x04
   1257a:	21 82       	std	Z+1, r2	; 0x01
   1257c:	32 82       	std	Z+2, r3	; 0x02
   1257e:	43 82       	std	Z+3, r4	; 0x03
   12580:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12584:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   12588:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   1258c:	42 81       	ldd	r20, Z+2	; 0x02
   1258e:	53 81       	ldd	r21, Z+3	; 0x03
   12590:	64 e0       	ldi	r22, 0x04	; 4
   12592:	82 e1       	ldi	r24, 0x12	; 18
   12594:	27 df       	rcall	.-434    	; 0x123e4 <print_tok_str>
   12596:	e9 85       	ldd	r30, Y+9	; 0x09
   12598:	fa 85       	ldd	r31, Y+10	; 0x0a
   1259a:	21 81       	ldd	r18, Z+1	; 0x01
   1259c:	30 e0       	ldi	r19, 0x00	; 0
   1259e:	40 e0       	ldi	r20, 0x00	; 0
   125a0:	50 e0       	ldi	r21, 0x00	; 0
   125a2:	64 e0       	ldi	r22, 0x04	; 4
   125a4:	81 e0       	ldi	r24, 0x01	; 1
   125a6:	de de       	rcall	.-580    	; 0x12364 <print_tok_val>
   125a8:	e9 85       	ldd	r30, Y+9	; 0x09
   125aa:	fa 85       	ldd	r31, Y+10	; 0x0a
   125ac:	22 81       	ldd	r18, Z+2	; 0x02
   125ae:	30 e0       	ldi	r19, 0x00	; 0
   125b0:	40 e0       	ldi	r20, 0x00	; 0
   125b2:	50 e0       	ldi	r21, 0x00	; 0
   125b4:	64 e0       	ldi	r22, 0x04	; 4
   125b6:	8f e1       	ldi	r24, 0x1F	; 31
   125b8:	d5 de       	rcall	.-598    	; 0x12364 <print_tok_val>
   125ba:	e9 85       	ldd	r30, Y+9	; 0x09
   125bc:	fa 85       	ldd	r31, Y+10	; 0x0a
   125be:	23 81       	ldd	r18, Z+3	; 0x03
   125c0:	34 81       	ldd	r19, Z+4	; 0x04
   125c2:	45 81       	ldd	r20, Z+5	; 0x05
   125c4:	56 81       	ldd	r21, Z+6	; 0x06
   125c6:	64 e0       	ldi	r22, 0x04	; 4
   125c8:	83 e0       	ldi	r24, 0x03	; 3
   125ca:	cc de       	rcall	.-616    	; 0x12364 <print_tok_val>
   125cc:	e9 85       	ldd	r30, Y+9	; 0x09
   125ce:	fa 85       	ldd	r31, Y+10	; 0x0a
   125d0:	80 81       	ld	r24, Z
   125d2:	84 30       	cpi	r24, 0x04	; 4
   125d4:	81 f4       	brne	.+32     	; 0x125f6 <display_Addresses+0x15c>
   125d6:	ed b7       	in	r30, 0x3d	; 61
   125d8:	fe b7       	in	r31, 0x3e	; 62
   125da:	61 82       	std	Z+1, r6	; 0x01
   125dc:	72 82       	std	Z+2, r7	; 0x02
   125de:	83 82       	std	Z+3, r8	; 0x03
   125e0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   125e4:	e9 85       	ldd	r30, Y+9	; 0x09
   125e6:	fa 85       	ldd	r31, Y+10	; 0x0a
   125e8:	21 81       	ldd	r18, Z+1	; 0x01
   125ea:	30 e0       	ldi	r19, 0x00	; 0
   125ec:	40 e0       	ldi	r20, 0x00	; 0
   125ee:	50 e0       	ldi	r21, 0x00	; 0
   125f0:	64 e0       	ldi	r22, 0x04	; 4
   125f2:	81 e0       	ldi	r24, 0x01	; 1
   125f4:	b7 de       	rcall	.-658    	; 0x12364 <print_tok_val>
   125f6:	ed b7       	in	r30, 0x3d	; 61
   125f8:	fe b7       	in	r31, 0x3e	; 62
   125fa:	c1 82       	std	Z+1, r12	; 0x01
   125fc:	d2 82       	std	Z+2, r13	; 0x02
   125fe:	e3 82       	std	Z+3, r14	; 0x03
   12600:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12604:	29 85       	ldd	r18, Y+9	; 0x09
   12606:	3a 85       	ldd	r19, Y+10	; 0x0a
   12608:	25 5d       	subi	r18, 0xD5	; 213
   1260a:	3f 4f       	sbci	r19, 0xFF	; 255
   1260c:	3a 87       	std	Y+10, r19	; 0x0a
   1260e:	29 87       	std	Y+9, r18	; 0x09
   12610:	28 5e       	subi	r18, 0xE8	; 232
   12612:	30 42       	sbci	r19, 0x20	; 32
   12614:	09 f0       	breq	.+2      	; 0x12618 <display_Addresses+0x17e>
   12616:	75 cf       	rjmp	.-278    	; 0x12502 <display_Addresses+0x68>
   12618:	8b ee       	ldi	r24, 0xEB	; 235
   1261a:	99 e1       	ldi	r25, 0x19	; 25
   1261c:	a0 e0       	ldi	r26, 0x00	; 0
   1261e:	ed b7       	in	r30, 0x3d	; 61
   12620:	fe b7       	in	r31, 0x3e	; 62
   12622:	81 83       	std	Z+1, r24	; 0x01
   12624:	92 83       	std	Z+2, r25	; 0x02
   12626:	a3 83       	std	Z+3, r26	; 0x03
   12628:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1262c:	2a 96       	adiw	r28, 0x0a	; 10
   1262e:	0f b6       	in	r0, 0x3f	; 63
   12630:	f8 94       	cli
   12632:	de bf       	out	0x3e, r29	; 62
   12634:	0f be       	out	0x3f, r0	; 63
   12636:	cd bf       	out	0x3d, r28	; 61
   12638:	df 91       	pop	r29
   1263a:	cf 91       	pop	r28
   1263c:	ef 90       	pop	r14
   1263e:	df 90       	pop	r13
   12640:	cf 90       	pop	r12
   12642:	8f 90       	pop	r8
   12644:	7f 90       	pop	r7
   12646:	6f 90       	pop	r6
   12648:	4f 90       	pop	r4
   1264a:	3f 90       	pop	r3
   1264c:	2f 90       	pop	r2
   1264e:	08 95       	ret

00012650 <display_Config>:
   12650:	2f 92       	push	r2
   12652:	3f 92       	push	r3
   12654:	4f 92       	push	r4
   12656:	6f 92       	push	r6
   12658:	7f 92       	push	r7
   1265a:	8f 92       	push	r8
   1265c:	af 92       	push	r10
   1265e:	bf 92       	push	r11
   12660:	cf 92       	push	r12
   12662:	df 92       	push	r13
   12664:	ef 92       	push	r14
   12666:	0f 93       	push	r16
   12668:	1f 93       	push	r17
   1266a:	cf 93       	push	r28
   1266c:	df 93       	push	r29
   1266e:	cd b7       	in	r28, 0x3d	; 61
   12670:	de b7       	in	r29, 0x3e	; 62
   12672:	62 97       	sbiw	r28, 0x12	; 18
   12674:	0f b6       	in	r0, 0x3f	; 63
   12676:	f8 94       	cli
   12678:	de bf       	out	0x3e, r29	; 62
   1267a:	0f be       	out	0x3f, r0	; 63
   1267c:	cd bf       	out	0x3d, r28	; 61
   1267e:	5c 01       	movw	r10, r24
   12680:	8b ec       	ldi	r24, 0xCB	; 203
   12682:	99 e1       	ldi	r25, 0x19	; 25
   12684:	a0 e0       	ldi	r26, 0x00	; 0
   12686:	ed b7       	in	r30, 0x3d	; 61
   12688:	fe b7       	in	r31, 0x3e	; 62
   1268a:	81 83       	std	Z+1, r24	; 0x01
   1268c:	92 83       	std	Z+2, r25	; 0x02
   1268e:	a3 83       	std	Z+3, r26	; 0x03
   12690:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12694:	04 ee       	ldi	r16, 0xE4	; 228
   12696:	1e e1       	ldi	r17, 0x1E	; 30
   12698:	80 e5       	ldi	r24, 0x50	; 80
   1269a:	99 e1       	ldi	r25, 0x19	; 25
   1269c:	9c 01       	movw	r18, r24
   1269e:	40 e0       	ldi	r20, 0x00	; 0
   126a0:	28 87       	std	Y+8, r18	; 0x08
   126a2:	39 87       	std	Y+9, r19	; 0x09
   126a4:	4a 87       	std	Y+10, r20	; 0x0a
   126a6:	85 e8       	ldi	r24, 0x85	; 133
   126a8:	99 e1       	ldi	r25, 0x19	; 25
   126aa:	9c 01       	movw	r18, r24
   126ac:	40 e0       	ldi	r20, 0x00	; 0
   126ae:	2b 87       	std	Y+11, r18	; 0x0b
   126b0:	3c 87       	std	Y+12, r19	; 0x0c
   126b2:	4d 87       	std	Y+13, r20	; 0x0d
   126b4:	86 e6       	ldi	r24, 0x66	; 102
   126b6:	99 e1       	ldi	r25, 0x19	; 25
   126b8:	9c 01       	movw	r18, r24
   126ba:	40 e0       	ldi	r20, 0x00	; 0
   126bc:	2e 87       	std	Y+14, r18	; 0x0e
   126be:	3f 87       	std	Y+15, r19	; 0x0f
   126c0:	48 8b       	std	Y+16, r20	; 0x10
   126c2:	82 e5       	ldi	r24, 0x52	; 82
   126c4:	99 e1       	ldi	r25, 0x19	; 25
   126c6:	1c 01       	movw	r2, r24
   126c8:	41 2c       	mov	r4, r1
   126ca:	82 ec       	ldi	r24, 0xC2	; 194
   126cc:	99 e1       	ldi	r25, 0x19	; 25
   126ce:	6c 01       	movw	r12, r24
   126d0:	e1 2c       	mov	r14, r1
   126d2:	83 ea       	ldi	r24, 0xA3	; 163
   126d4:	99 e1       	ldi	r25, 0x19	; 25
   126d6:	3c 01       	movw	r6, r24
   126d8:	81 2c       	mov	r8, r1
   126da:	f8 01       	movw	r30, r16
   126dc:	80 81       	ld	r24, Z
   126de:	88 23       	and	r24, r24
   126e0:	09 f4       	brne	.+2      	; 0x126e4 <display_Config+0x94>
   126e2:	14 c2       	rjmp	.+1064   	; 0x12b0c <display_Config+0x4bc>
   126e4:	83 30       	cpi	r24, 0x03	; 3
   126e6:	09 f0       	breq	.+2      	; 0x126ea <display_Config+0x9a>
   126e8:	38 c1       	rjmp	.+624    	; 0x1295a <display_Config+0x30a>
   126ea:	27 a1       	ldd	r18, Z+39	; 0x27
   126ec:	30 a5       	ldd	r19, Z+40	; 0x28
   126ee:	3a 8b       	std	Y+18, r19	; 0x12
   126f0:	29 8b       	std	Y+17, r18	; 0x11
   126f2:	c8 01       	movw	r24, r16
   126f4:	07 96       	adiw	r24, 0x07	; 7
   126f6:	ed b7       	in	r30, 0x3d	; 61
   126f8:	fe b7       	in	r31, 0x3e	; 62
   126fa:	95 83       	std	Z+5, r25	; 0x05
   126fc:	84 83       	std	Z+4, r24	; 0x04
   126fe:	c1 82       	std	Z+1, r12	; 0x01
   12700:	d2 82       	std	Z+2, r13	; 0x02
   12702:	e3 82       	std	Z+3, r14	; 0x03
   12704:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12708:	e9 89       	ldd	r30, Y+17	; 0x11
   1270a:	fa 89       	ldd	r31, Y+18	; 0x12
   1270c:	80 81       	ld	r24, Z
   1270e:	90 e0       	ldi	r25, 0x00	; 0
   12710:	ed b7       	in	r30, 0x3d	; 61
   12712:	fe b7       	in	r31, 0x3e	; 62
   12714:	95 83       	std	Z+5, r25	; 0x05
   12716:	84 83       	std	Z+4, r24	; 0x04
   12718:	61 82       	std	Z+1, r6	; 0x01
   1271a:	72 82       	std	Z+2, r7	; 0x02
   1271c:	83 82       	std	Z+3, r8	; 0x03
   1271e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12722:	64 e0       	ldi	r22, 0x04	; 4
   12724:	89 e0       	ldi	r24, 0x09	; 9
   12726:	93 de       	rcall	.-730    	; 0x1244e <print_tok>
   12728:	e9 89       	ldd	r30, Y+17	; 0x11
   1272a:	fa 89       	ldd	r31, Y+18	; 0x12
   1272c:	20 81       	ld	r18, Z
   1272e:	30 e0       	ldi	r19, 0x00	; 0
   12730:	40 e0       	ldi	r20, 0x00	; 0
   12732:	50 e0       	ldi	r21, 0x00	; 0
   12734:	68 e0       	ldi	r22, 0x08	; 8
   12736:	81 e0       	ldi	r24, 0x01	; 1
   12738:	15 de       	rcall	.-982    	; 0x12364 <print_tok_val>
   1273a:	e9 89       	ldd	r30, Y+17	; 0x11
   1273c:	fa 89       	ldd	r31, Y+18	; 0x12
   1273e:	21 81       	ldd	r18, Z+1	; 0x01
   12740:	30 e0       	ldi	r19, 0x00	; 0
   12742:	40 e0       	ldi	r20, 0x00	; 0
   12744:	50 e0       	ldi	r21, 0x00	; 0
   12746:	68 e0       	ldi	r22, 0x08	; 8
   12748:	8f e1       	ldi	r24, 0x1F	; 31
   1274a:	0c de       	rcall	.-1000   	; 0x12364 <print_tok_val>
   1274c:	e9 89       	ldd	r30, Y+17	; 0x11
   1274e:	fa 89       	ldd	r31, Y+18	; 0x12
   12750:	42 81       	ldd	r20, Z+2	; 0x02
   12752:	53 81       	ldd	r21, Z+3	; 0x03
   12754:	68 e0       	ldi	r22, 0x08	; 8
   12756:	82 e1       	ldi	r24, 0x12	; 18
   12758:	45 de       	rcall	.-886    	; 0x123e4 <print_tok_str>
   1275a:	64 e0       	ldi	r22, 0x04	; 4
   1275c:	81 e1       	ldi	r24, 0x11	; 17
   1275e:	77 de       	rcall	.-786    	; 0x1244e <print_tok>
   12760:	64 e0       	ldi	r22, 0x04	; 4
   12762:	85 e1       	ldi	r24, 0x15	; 21
   12764:	74 de       	rcall	.-792    	; 0x1244e <print_tok>
   12766:	e9 89       	ldd	r30, Y+17	; 0x11
   12768:	fa 89       	ldd	r31, Y+18	; 0x12
   1276a:	24 81       	ldd	r18, Z+4	; 0x04
   1276c:	35 81       	ldd	r19, Z+5	; 0x05
   1276e:	40 e0       	ldi	r20, 0x00	; 0
   12770:	50 e0       	ldi	r21, 0x00	; 0
   12772:	68 e0       	ldi	r22, 0x08	; 8
   12774:	87 e1       	ldi	r24, 0x17	; 23
   12776:	f6 dd       	rcall	.-1044   	; 0x12364 <print_tok_val>
   12778:	64 e0       	ldi	r22, 0x04	; 4
   1277a:	81 e1       	ldi	r24, 0x11	; 17
   1277c:	68 de       	rcall	.-816    	; 0x1244e <print_tok>
   1277e:	a1 14       	cp	r10, r1
   12780:	b1 04       	cpc	r11, r1
   12782:	09 f1       	breq	.+66     	; 0x127c6 <display_Config+0x176>
   12784:	64 e0       	ldi	r22, 0x04	; 4
   12786:	8b e0       	ldi	r24, 0x0B	; 11
   12788:	62 de       	rcall	.-828    	; 0x1244e <print_tok>
   1278a:	e9 89       	ldd	r30, Y+17	; 0x11
   1278c:	fa 89       	ldd	r31, Y+18	; 0x12
   1278e:	26 81       	ldd	r18, Z+6	; 0x06
   12790:	37 81       	ldd	r19, Z+7	; 0x07
   12792:	40 e0       	ldi	r20, 0x00	; 0
   12794:	50 e0       	ldi	r21, 0x00	; 0
   12796:	68 e0       	ldi	r22, 0x08	; 8
   12798:	88 e2       	ldi	r24, 0x28	; 40
   1279a:	e4 dd       	rcall	.-1080   	; 0x12364 <print_tok_val>
   1279c:	e9 89       	ldd	r30, Y+17	; 0x11
   1279e:	fa 89       	ldd	r31, Y+18	; 0x12
   127a0:	20 85       	ldd	r18, Z+8	; 0x08
   127a2:	31 85       	ldd	r19, Z+9	; 0x09
   127a4:	40 e0       	ldi	r20, 0x00	; 0
   127a6:	50 e0       	ldi	r21, 0x00	; 0
   127a8:	68 e0       	ldi	r22, 0x08	; 8
   127aa:	85 e2       	ldi	r24, 0x25	; 37
   127ac:	db dd       	rcall	.-1098   	; 0x12364 <print_tok_val>
   127ae:	e9 89       	ldd	r30, Y+17	; 0x11
   127b0:	fa 89       	ldd	r31, Y+18	; 0x12
   127b2:	22 85       	ldd	r18, Z+10	; 0x0a
   127b4:	30 e0       	ldi	r19, 0x00	; 0
   127b6:	40 e0       	ldi	r20, 0x00	; 0
   127b8:	50 e0       	ldi	r21, 0x00	; 0
   127ba:	68 e0       	ldi	r22, 0x08	; 8
   127bc:	86 e2       	ldi	r24, 0x26	; 38
   127be:	d2 dd       	rcall	.-1116   	; 0x12364 <print_tok_val>
   127c0:	64 e0       	ldi	r22, 0x04	; 4
   127c2:	81 e1       	ldi	r24, 0x11	; 17
   127c4:	44 de       	rcall	.-888    	; 0x1244e <print_tok>
   127c6:	64 e0       	ldi	r22, 0x04	; 4
   127c8:	87 e2       	ldi	r24, 0x27	; 39
   127ca:	41 de       	rcall	.-894    	; 0x1244e <print_tok>
   127cc:	a1 14       	cp	r10, r1
   127ce:	b1 04       	cpc	r11, r1
   127d0:	49 f0       	breq	.+18     	; 0x127e4 <display_Config+0x194>
   127d2:	e9 89       	ldd	r30, Y+17	; 0x11
   127d4:	fa 89       	ldd	r31, Y+18	; 0x12
   127d6:	23 85       	ldd	r18, Z+11	; 0x0b
   127d8:	30 e0       	ldi	r19, 0x00	; 0
   127da:	40 e0       	ldi	r20, 0x00	; 0
   127dc:	50 e0       	ldi	r21, 0x00	; 0
   127de:	68 e0       	ldi	r22, 0x08	; 8
   127e0:	89 e2       	ldi	r24, 0x29	; 41
   127e2:	c0 dd       	rcall	.-1152   	; 0x12364 <print_tok_val>
   127e4:	e9 89       	ldd	r30, Y+17	; 0x11
   127e6:	fa 89       	ldd	r31, Y+18	; 0x12
   127e8:	24 85       	ldd	r18, Z+12	; 0x0c
   127ea:	35 85       	ldd	r19, Z+13	; 0x0d
   127ec:	46 85       	ldd	r20, Z+14	; 0x0e
   127ee:	57 85       	ldd	r21, Z+15	; 0x0f
   127f0:	68 e0       	ldi	r22, 0x08	; 8
   127f2:	8f e0       	ldi	r24, 0x0F	; 15
   127f4:	b7 dd       	rcall	.-1170   	; 0x12364 <print_tok_val>
   127f6:	a1 14       	cp	r10, r1
   127f8:	b1 04       	cpc	r11, r1
   127fa:	09 f4       	brne	.+2      	; 0x127fe <display_Config+0x1ae>
   127fc:	5a c0       	rjmp	.+180    	; 0x128b2 <display_Config+0x262>
   127fe:	e9 89       	ldd	r30, Y+17	; 0x11
   12800:	fa 89       	ldd	r31, Y+18	; 0x12
   12802:	20 89       	ldd	r18, Z+16	; 0x10
   12804:	31 89       	ldd	r19, Z+17	; 0x11
   12806:	40 e0       	ldi	r20, 0x00	; 0
   12808:	50 e0       	ldi	r21, 0x00	; 0
   1280a:	68 e0       	ldi	r22, 0x08	; 8
   1280c:	87 e0       	ldi	r24, 0x07	; 7
   1280e:	aa dd       	rcall	.-1196   	; 0x12364 <print_tok_val>
   12810:	e9 89       	ldd	r30, Y+17	; 0x11
   12812:	fa 89       	ldd	r31, Y+18	; 0x12
   12814:	22 89       	ldd	r18, Z+18	; 0x12
   12816:	30 e0       	ldi	r19, 0x00	; 0
   12818:	40 e0       	ldi	r20, 0x00	; 0
   1281a:	50 e0       	ldi	r21, 0x00	; 0
   1281c:	68 e0       	ldi	r22, 0x08	; 8
   1281e:	85 e0       	ldi	r24, 0x05	; 5
   12820:	a1 dd       	rcall	.-1214   	; 0x12364 <print_tok_val>
   12822:	e9 89       	ldd	r30, Y+17	; 0x11
   12824:	fa 89       	ldd	r31, Y+18	; 0x12
   12826:	23 89       	ldd	r18, Z+19	; 0x13
   12828:	30 e0       	ldi	r19, 0x00	; 0
   1282a:	40 e0       	ldi	r20, 0x00	; 0
   1282c:	50 e0       	ldi	r21, 0x00	; 0
   1282e:	68 e0       	ldi	r22, 0x08	; 8
   12830:	86 e0       	ldi	r24, 0x06	; 6
   12832:	98 dd       	rcall	.-1232   	; 0x12364 <print_tok_val>
   12834:	e9 89       	ldd	r30, Y+17	; 0x11
   12836:	fa 89       	ldd	r31, Y+18	; 0x12
   12838:	24 89       	ldd	r18, Z+20	; 0x14
   1283a:	35 89       	ldd	r19, Z+21	; 0x15
   1283c:	40 e0       	ldi	r20, 0x00	; 0
   1283e:	50 e0       	ldi	r21, 0x00	; 0
   12840:	68 e0       	ldi	r22, 0x08	; 8
   12842:	84 e0       	ldi	r24, 0x04	; 4
   12844:	8f dd       	rcall	.-1250   	; 0x12364 <print_tok_val>
   12846:	e9 89       	ldd	r30, Y+17	; 0x11
   12848:	fa 89       	ldd	r31, Y+18	; 0x12
   1284a:	26 89       	ldd	r18, Z+22	; 0x16
   1284c:	37 89       	ldd	r19, Z+23	; 0x17
   1284e:	40 e0       	ldi	r20, 0x00	; 0
   12850:	50 e0       	ldi	r21, 0x00	; 0
   12852:	68 e0       	ldi	r22, 0x08	; 8
   12854:	8a e0       	ldi	r24, 0x0A	; 10
   12856:	86 dd       	rcall	.-1268   	; 0x12364 <print_tok_val>
   12858:	e9 89       	ldd	r30, Y+17	; 0x11
   1285a:	fa 89       	ldd	r31, Y+18	; 0x12
   1285c:	20 8d       	ldd	r18, Z+24	; 0x18
   1285e:	31 8d       	ldd	r19, Z+25	; 0x19
   12860:	40 e0       	ldi	r20, 0x00	; 0
   12862:	50 e0       	ldi	r21, 0x00	; 0
   12864:	68 e0       	ldi	r22, 0x08	; 8
   12866:	8e e1       	ldi	r24, 0x1E	; 30
   12868:	7d dd       	rcall	.-1286   	; 0x12364 <print_tok_val>
   1286a:	e9 89       	ldd	r30, Y+17	; 0x11
   1286c:	fa 89       	ldd	r31, Y+18	; 0x12
   1286e:	22 8d       	ldd	r18, Z+26	; 0x1a
   12870:	33 8d       	ldd	r19, Z+27	; 0x1b
   12872:	40 e0       	ldi	r20, 0x00	; 0
   12874:	50 e0       	ldi	r21, 0x00	; 0
   12876:	68 e0       	ldi	r22, 0x08	; 8
   12878:	80 e0       	ldi	r24, 0x00	; 0
   1287a:	74 dd       	rcall	.-1304   	; 0x12364 <print_tok_val>
   1287c:	e9 89       	ldd	r30, Y+17	; 0x11
   1287e:	fa 89       	ldd	r31, Y+18	; 0x12
   12880:	24 8d       	ldd	r18, Z+28	; 0x1c
   12882:	30 e0       	ldi	r19, 0x00	; 0
   12884:	40 e0       	ldi	r20, 0x00	; 0
   12886:	50 e0       	ldi	r21, 0x00	; 0
   12888:	68 e0       	ldi	r22, 0x08	; 8
   1288a:	8c e1       	ldi	r24, 0x1C	; 28
   1288c:	6b dd       	rcall	.-1322   	; 0x12364 <print_tok_val>
   1288e:	e9 89       	ldd	r30, Y+17	; 0x11
   12890:	fa 89       	ldd	r31, Y+18	; 0x12
   12892:	25 8d       	ldd	r18, Z+29	; 0x1d
   12894:	30 e0       	ldi	r19, 0x00	; 0
   12896:	40 e0       	ldi	r20, 0x00	; 0
   12898:	50 e0       	ldi	r21, 0x00	; 0
   1289a:	68 e0       	ldi	r22, 0x08	; 8
   1289c:	83 e1       	ldi	r24, 0x13	; 19
   1289e:	62 dd       	rcall	.-1340   	; 0x12364 <print_tok_val>
   128a0:	e9 89       	ldd	r30, Y+17	; 0x11
   128a2:	fa 89       	ldd	r31, Y+18	; 0x12
   128a4:	26 8d       	ldd	r18, Z+30	; 0x1e
   128a6:	30 e0       	ldi	r19, 0x00	; 0
   128a8:	40 e0       	ldi	r20, 0x00	; 0
   128aa:	50 e0       	ldi	r21, 0x00	; 0
   128ac:	68 e0       	ldi	r22, 0x08	; 8
   128ae:	81 e2       	ldi	r24, 0x21	; 33
   128b0:	59 dd       	rcall	.-1358   	; 0x12364 <print_tok_val>
   128b2:	64 e0       	ldi	r22, 0x04	; 4
   128b4:	81 e1       	ldi	r24, 0x11	; 17
   128b6:	cb dd       	rcall	.-1130   	; 0x1244e <print_tok>
   128b8:	a1 14       	cp	r10, r1
   128ba:	b1 04       	cpc	r11, r1
   128bc:	99 f1       	breq	.+102    	; 0x12924 <display_Config+0x2d4>
   128be:	64 e0       	ldi	r22, 0x04	; 4
   128c0:	8a e2       	ldi	r24, 0x2A	; 42
   128c2:	c5 dd       	rcall	.-1142   	; 0x1244e <print_tok>
   128c4:	e9 89       	ldd	r30, Y+17	; 0x11
   128c6:	fa 89       	ldd	r31, Y+18	; 0x12
   128c8:	27 8d       	ldd	r18, Z+31	; 0x1f
   128ca:	30 a1       	ldd	r19, Z+32	; 0x20
   128cc:	41 a1       	ldd	r20, Z+33	; 0x21
   128ce:	52 a1       	ldd	r21, Z+34	; 0x22
   128d0:	68 e0       	ldi	r22, 0x08	; 8
   128d2:	8a e1       	ldi	r24, 0x1A	; 26
   128d4:	47 dd       	rcall	.-1394   	; 0x12364 <print_tok_val>
   128d6:	e9 89       	ldd	r30, Y+17	; 0x11
   128d8:	fa 89       	ldd	r31, Y+18	; 0x12
   128da:	23 a1       	ldd	r18, Z+35	; 0x23
   128dc:	30 e0       	ldi	r19, 0x00	; 0
   128de:	40 e0       	ldi	r20, 0x00	; 0
   128e0:	50 e0       	ldi	r21, 0x00	; 0
   128e2:	68 e0       	ldi	r22, 0x08	; 8
   128e4:	8b e1       	ldi	r24, 0x1B	; 27
   128e6:	3e dd       	rcall	.-1412   	; 0x12364 <print_tok_val>
   128e8:	e9 89       	ldd	r30, Y+17	; 0x11
   128ea:	fa 89       	ldd	r31, Y+18	; 0x12
   128ec:	24 a1       	ldd	r18, Z+36	; 0x24
   128ee:	35 a1       	ldd	r19, Z+37	; 0x25
   128f0:	40 e0       	ldi	r20, 0x00	; 0
   128f2:	50 e0       	ldi	r21, 0x00	; 0
   128f4:	68 e0       	ldi	r22, 0x08	; 8
   128f6:	8d e1       	ldi	r24, 0x1D	; 29
   128f8:	35 dd       	rcall	.-1430   	; 0x12364 <print_tok_val>
   128fa:	e9 89       	ldd	r30, Y+17	; 0x11
   128fc:	fa 89       	ldd	r31, Y+18	; 0x12
   128fe:	26 a1       	ldd	r18, Z+38	; 0x26
   12900:	37 a1       	ldd	r19, Z+39	; 0x27
   12902:	40 a5       	ldd	r20, Z+40	; 0x28
   12904:	51 a5       	ldd	r21, Z+41	; 0x29
   12906:	68 e0       	ldi	r22, 0x08	; 8
   12908:	89 e1       	ldi	r24, 0x19	; 25
   1290a:	2c dd       	rcall	.-1448   	; 0x12364 <print_tok_val>
   1290c:	e9 89       	ldd	r30, Y+17	; 0x11
   1290e:	fa 89       	ldd	r31, Y+18	; 0x12
   12910:	22 a5       	ldd	r18, Z+42	; 0x2a
   12912:	30 e0       	ldi	r19, 0x00	; 0
   12914:	40 e0       	ldi	r20, 0x00	; 0
   12916:	50 e0       	ldi	r21, 0x00	; 0
   12918:	68 e0       	ldi	r22, 0x08	; 8
   1291a:	88 e1       	ldi	r24, 0x18	; 24
   1291c:	23 dd       	rcall	.-1466   	; 0x12364 <print_tok_val>
   1291e:	64 e0       	ldi	r22, 0x04	; 4
   12920:	81 e1       	ldi	r24, 0x11	; 17
   12922:	95 dd       	rcall	.-1238   	; 0x1244e <print_tok>
   12924:	e9 89       	ldd	r30, Y+17	; 0x11
   12926:	fa 89       	ldd	r31, Y+18	; 0x12
   12928:	86 a1       	ldd	r24, Z+38	; 0x26
   1292a:	97 a1       	ldd	r25, Z+39	; 0x27
   1292c:	a0 a5       	ldd	r26, Z+40	; 0x28
   1292e:	b1 a5       	ldd	r27, Z+41	; 0x29
   12930:	01 96       	adiw	r24, 0x01	; 1
   12932:	a1 1d       	adc	r26, r1
   12934:	b1 1d       	adc	r27, r1
   12936:	ed b7       	in	r30, 0x3d	; 61
   12938:	fe b7       	in	r31, 0x3e	; 62
   1293a:	84 83       	std	Z+4, r24	; 0x04
   1293c:	95 83       	std	Z+5, r25	; 0x05
   1293e:	a6 83       	std	Z+6, r26	; 0x06
   12940:	b7 83       	std	Z+7, r27	; 0x07
   12942:	2f e8       	ldi	r18, 0x8F	; 143
   12944:	39 e1       	ldi	r19, 0x19	; 25
   12946:	c9 01       	movw	r24, r18
   12948:	a0 e0       	ldi	r26, 0x00	; 0
   1294a:	81 83       	std	Z+1, r24	; 0x01
   1294c:	92 83       	std	Z+2, r25	; 0x02
   1294e:	a3 83       	std	Z+3, r26	; 0x03
   12950:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12954:	60 e0       	ldi	r22, 0x00	; 0
   12956:	81 e1       	ldi	r24, 0x11	; 17
   12958:	7a dd       	rcall	.-1292   	; 0x1244e <print_tok>
   1295a:	f8 01       	movw	r30, r16
   1295c:	80 81       	ld	r24, Z
   1295e:	81 30       	cpi	r24, 0x01	; 1
   12960:	09 f0       	breq	.+2      	; 0x12964 <display_Config+0x314>
   12962:	ad c0       	rjmp	.+346    	; 0x12abe <display_Config+0x46e>
   12964:	27 a1       	ldd	r18, Z+39	; 0x27
   12966:	30 a5       	ldd	r19, Z+40	; 0x28
   12968:	3a 8b       	std	Y+18, r19	; 0x12
   1296a:	29 8b       	std	Y+17, r18	; 0x11
   1296c:	c8 01       	movw	r24, r16
   1296e:	07 96       	adiw	r24, 0x07	; 7
   12970:	ed b7       	in	r30, 0x3d	; 61
   12972:	fe b7       	in	r31, 0x3e	; 62
   12974:	95 83       	std	Z+5, r25	; 0x05
   12976:	84 83       	std	Z+4, r24	; 0x04
   12978:	2b 85       	ldd	r18, Y+11	; 0x0b
   1297a:	3c 85       	ldd	r19, Y+12	; 0x0c
   1297c:	4d 85       	ldd	r20, Y+13	; 0x0d
   1297e:	21 83       	std	Z+1, r18	; 0x01
   12980:	32 83       	std	Z+2, r19	; 0x02
   12982:	43 83       	std	Z+3, r20	; 0x03
   12984:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12988:	e9 89       	ldd	r30, Y+17	; 0x11
   1298a:	fa 89       	ldd	r31, Y+18	; 0x12
   1298c:	80 81       	ld	r24, Z
   1298e:	90 e0       	ldi	r25, 0x00	; 0
   12990:	ed b7       	in	r30, 0x3d	; 61
   12992:	fe b7       	in	r31, 0x3e	; 62
   12994:	95 83       	std	Z+5, r25	; 0x05
   12996:	84 83       	std	Z+4, r24	; 0x04
   12998:	2e 85       	ldd	r18, Y+14	; 0x0e
   1299a:	3f 85       	ldd	r19, Y+15	; 0x0f
   1299c:	48 89       	ldd	r20, Y+16	; 0x10
   1299e:	21 83       	std	Z+1, r18	; 0x01
   129a0:	32 83       	std	Z+2, r19	; 0x02
   129a2:	43 83       	std	Z+3, r20	; 0x03
   129a4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   129a8:	64 e0       	ldi	r22, 0x04	; 4
   129aa:	85 e1       	ldi	r24, 0x15	; 21
   129ac:	50 dd       	rcall	.-1376   	; 0x1244e <print_tok>
   129ae:	e9 89       	ldd	r30, Y+17	; 0x11
   129b0:	fa 89       	ldd	r31, Y+18	; 0x12
   129b2:	20 81       	ld	r18, Z
   129b4:	30 e0       	ldi	r19, 0x00	; 0
   129b6:	40 e0       	ldi	r20, 0x00	; 0
   129b8:	50 e0       	ldi	r21, 0x00	; 0
   129ba:	68 e0       	ldi	r22, 0x08	; 8
   129bc:	81 e0       	ldi	r24, 0x01	; 1
   129be:	d2 dc       	rcall	.-1628   	; 0x12364 <print_tok_val>
   129c0:	e9 89       	ldd	r30, Y+17	; 0x11
   129c2:	fa 89       	ldd	r31, Y+18	; 0x12
   129c4:	21 81       	ldd	r18, Z+1	; 0x01
   129c6:	30 e0       	ldi	r19, 0x00	; 0
   129c8:	40 e0       	ldi	r20, 0x00	; 0
   129ca:	50 e0       	ldi	r21, 0x00	; 0
   129cc:	68 e0       	ldi	r22, 0x08	; 8
   129ce:	8f e1       	ldi	r24, 0x1F	; 31
   129d0:	c9 dc       	rcall	.-1646   	; 0x12364 <print_tok_val>
   129d2:	e9 89       	ldd	r30, Y+17	; 0x11
   129d4:	fa 89       	ldd	r31, Y+18	; 0x12
   129d6:	42 81       	ldd	r20, Z+2	; 0x02
   129d8:	53 81       	ldd	r21, Z+3	; 0x03
   129da:	68 e0       	ldi	r22, 0x08	; 8
   129dc:	82 e1       	ldi	r24, 0x12	; 18
   129de:	02 dd       	rcall	.-1532   	; 0x123e4 <print_tok_str>
   129e0:	64 e0       	ldi	r22, 0x04	; 4
   129e2:	81 e1       	ldi	r24, 0x11	; 17
   129e4:	34 dd       	rcall	.-1432   	; 0x1244e <print_tok>
   129e6:	64 e0       	ldi	r22, 0x04	; 4
   129e8:	89 e0       	ldi	r24, 0x09	; 9
   129ea:	31 dd       	rcall	.-1438   	; 0x1244e <print_tok>
   129ec:	e9 89       	ldd	r30, Y+17	; 0x11
   129ee:	fa 89       	ldd	r31, Y+18	; 0x12
   129f0:	24 81       	ldd	r18, Z+4	; 0x04
   129f2:	35 81       	ldd	r19, Z+5	; 0x05
   129f4:	40 e0       	ldi	r20, 0x00	; 0
   129f6:	50 e0       	ldi	r21, 0x00	; 0
   129f8:	68 e0       	ldi	r22, 0x08	; 8
   129fa:	87 e1       	ldi	r24, 0x17	; 23
   129fc:	b3 dc       	rcall	.-1690   	; 0x12364 <print_tok_val>
   129fe:	64 e0       	ldi	r22, 0x04	; 4
   12a00:	81 e1       	ldi	r24, 0x11	; 17
   12a02:	25 dd       	rcall	.-1462   	; 0x1244e <print_tok>
   12a04:	a1 14       	cp	r10, r1
   12a06:	b1 04       	cpc	r11, r1
   12a08:	91 f1       	breq	.+100    	; 0x12a6e <display_Config+0x41e>
   12a0a:	64 e0       	ldi	r22, 0x04	; 4
   12a0c:	84 e1       	ldi	r24, 0x14	; 20
   12a0e:	1f dd       	rcall	.-1474   	; 0x1244e <print_tok>
   12a10:	e9 89       	ldd	r30, Y+17	; 0x11
   12a12:	fa 89       	ldd	r31, Y+18	; 0x12
   12a14:	26 81       	ldd	r18, Z+6	; 0x06
   12a16:	37 81       	ldd	r19, Z+7	; 0x07
   12a18:	03 2e       	mov	r0, r19
   12a1a:	00 0c       	add	r0, r0
   12a1c:	44 0b       	sbc	r20, r20
   12a1e:	55 0b       	sbc	r21, r21
   12a20:	68 e0       	ldi	r22, 0x08	; 8
   12a22:	88 e0       	ldi	r24, 0x08	; 8
   12a24:	9f dc       	rcall	.-1730   	; 0x12364 <print_tok_val>
   12a26:	e9 89       	ldd	r30, Y+17	; 0x11
   12a28:	fa 89       	ldd	r31, Y+18	; 0x12
   12a2a:	20 85       	ldd	r18, Z+8	; 0x08
   12a2c:	31 85       	ldd	r19, Z+9	; 0x09
   12a2e:	03 2e       	mov	r0, r19
   12a30:	00 0c       	add	r0, r0
   12a32:	44 0b       	sbc	r20, r20
   12a34:	55 0b       	sbc	r21, r21
   12a36:	68 e0       	ldi	r22, 0x08	; 8
   12a38:	82 e2       	ldi	r24, 0x22	; 34
   12a3a:	94 dc       	rcall	.-1752   	; 0x12364 <print_tok_val>
   12a3c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a3e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a40:	22 85       	ldd	r18, Z+10	; 0x0a
   12a42:	33 85       	ldd	r19, Z+11	; 0x0b
   12a44:	03 2e       	mov	r0, r19
   12a46:	00 0c       	add	r0, r0
   12a48:	44 0b       	sbc	r20, r20
   12a4a:	55 0b       	sbc	r21, r21
   12a4c:	68 e0       	ldi	r22, 0x08	; 8
   12a4e:	86 e1       	ldi	r24, 0x16	; 22
   12a50:	89 dc       	rcall	.-1774   	; 0x12364 <print_tok_val>
   12a52:	e9 89       	ldd	r30, Y+17	; 0x11
   12a54:	fa 89       	ldd	r31, Y+18	; 0x12
   12a56:	24 85       	ldd	r18, Z+12	; 0x0c
   12a58:	35 85       	ldd	r19, Z+13	; 0x0d
   12a5a:	03 2e       	mov	r0, r19
   12a5c:	00 0c       	add	r0, r0
   12a5e:	44 0b       	sbc	r20, r20
   12a60:	55 0b       	sbc	r21, r21
   12a62:	68 e0       	ldi	r22, 0x08	; 8
   12a64:	8d e0       	ldi	r24, 0x0D	; 13
   12a66:	7e dc       	rcall	.-1796   	; 0x12364 <print_tok_val>
   12a68:	64 e0       	ldi	r22, 0x04	; 4
   12a6a:	81 e1       	ldi	r24, 0x11	; 17
   12a6c:	f0 dc       	rcall	.-1568   	; 0x1244e <print_tok>
   12a6e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a70:	fa 89       	ldd	r31, Y+18	; 0x12
   12a72:	44 85       	ldd	r20, Z+12	; 0x0c
   12a74:	55 85       	ldd	r21, Z+13	; 0x0d
   12a76:	20 85       	ldd	r18, Z+8	; 0x08
   12a78:	31 85       	ldd	r19, Z+9	; 0x09
   12a7a:	42 9f       	mul	r20, r18
   12a7c:	c0 01       	movw	r24, r0
   12a7e:	43 9f       	mul	r20, r19
   12a80:	90 0d       	add	r25, r0
   12a82:	52 9f       	mul	r21, r18
   12a84:	90 0d       	add	r25, r0
   12a86:	11 24       	eor	r1, r1
   12a88:	42 85       	ldd	r20, Z+10	; 0x0a
   12a8a:	53 85       	ldd	r21, Z+11	; 0x0b
   12a8c:	84 9f       	mul	r24, r20
   12a8e:	90 01       	movw	r18, r0
   12a90:	85 9f       	mul	r24, r21
   12a92:	30 0d       	add	r19, r0
   12a94:	94 9f       	mul	r25, r20
   12a96:	30 0d       	add	r19, r0
   12a98:	11 24       	eor	r1, r1
   12a9a:	c9 01       	movw	r24, r18
   12a9c:	33 0f       	add	r19, r19
   12a9e:	aa 0b       	sbc	r26, r26
   12aa0:	bb 0b       	sbc	r27, r27
   12aa2:	ed b7       	in	r30, 0x3d	; 61
   12aa4:	fe b7       	in	r31, 0x3e	; 62
   12aa6:	84 83       	std	Z+4, r24	; 0x04
   12aa8:	95 83       	std	Z+5, r25	; 0x05
   12aaa:	a6 83       	std	Z+6, r26	; 0x06
   12aac:	b7 83       	std	Z+7, r27	; 0x07
   12aae:	21 82       	std	Z+1, r2	; 0x01
   12ab0:	32 82       	std	Z+2, r3	; 0x02
   12ab2:	43 82       	std	Z+3, r4	; 0x03
   12ab4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12ab8:	60 e0       	ldi	r22, 0x00	; 0
   12aba:	81 e1       	ldi	r24, 0x11	; 17
   12abc:	c8 dc       	rcall	.-1648   	; 0x1244e <print_tok>
   12abe:	f8 01       	movw	r30, r16
   12ac0:	80 81       	ld	r24, Z
   12ac2:	84 30       	cpi	r24, 0x04	; 4
   12ac4:	c9 f4       	brne	.+50     	; 0x12af8 <display_Config+0x4a8>
   12ac6:	27 a1       	ldd	r18, Z+39	; 0x27
   12ac8:	30 a5       	ldd	r19, Z+40	; 0x28
   12aca:	3a 8b       	std	Y+18, r19	; 0x12
   12acc:	29 8b       	std	Y+17, r18	; 0x11
   12ace:	60 e0       	ldi	r22, 0x00	; 0
   12ad0:	80 e2       	ldi	r24, 0x20	; 32
   12ad2:	bd dc       	rcall	.-1670   	; 0x1244e <print_tok>
   12ad4:	64 e0       	ldi	r22, 0x04	; 4
   12ad6:	89 e0       	ldi	r24, 0x09	; 9
   12ad8:	ba dc       	rcall	.-1676   	; 0x1244e <print_tok>
   12ada:	e9 89       	ldd	r30, Y+17	; 0x11
   12adc:	fa 89       	ldd	r31, Y+18	; 0x12
   12ade:	20 81       	ld	r18, Z
   12ae0:	30 e0       	ldi	r19, 0x00	; 0
   12ae2:	40 e0       	ldi	r20, 0x00	; 0
   12ae4:	50 e0       	ldi	r21, 0x00	; 0
   12ae6:	68 e0       	ldi	r22, 0x08	; 8
   12ae8:	81 e0       	ldi	r24, 0x01	; 1
   12aea:	3c dc       	rcall	.-1928   	; 0x12364 <print_tok_val>
   12aec:	64 e0       	ldi	r22, 0x04	; 4
   12aee:	81 e1       	ldi	r24, 0x11	; 17
   12af0:	ae dc       	rcall	.-1700   	; 0x1244e <print_tok>
   12af2:	60 e0       	ldi	r22, 0x00	; 0
   12af4:	81 e1       	ldi	r24, 0x11	; 17
   12af6:	ab dc       	rcall	.-1706   	; 0x1244e <print_tok>
   12af8:	28 85       	ldd	r18, Y+8	; 0x08
   12afa:	39 85       	ldd	r19, Y+9	; 0x09
   12afc:	4a 85       	ldd	r20, Y+10	; 0x0a
   12afe:	ed b7       	in	r30, 0x3d	; 61
   12b00:	fe b7       	in	r31, 0x3e	; 62
   12b02:	21 83       	std	Z+1, r18	; 0x01
   12b04:	32 83       	std	Z+2, r19	; 0x02
   12b06:	43 83       	std	Z+3, r20	; 0x03
   12b08:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12b0c:	05 5d       	subi	r16, 0xD5	; 213
   12b0e:	1f 4f       	sbci	r17, 0xFF	; 255
   12b10:	28 ee       	ldi	r18, 0xE8	; 232
   12b12:	30 e2       	ldi	r19, 0x20	; 32
   12b14:	20 17       	cp	r18, r16
   12b16:	31 07       	cpc	r19, r17
   12b18:	09 f0       	breq	.+2      	; 0x12b1c <display_Config+0x4cc>
   12b1a:	df cd       	rjmp	.-1090   	; 0x126da <display_Config+0x8a>
   12b1c:	8e e4       	ldi	r24, 0x4E	; 78
   12b1e:	99 e1       	ldi	r25, 0x19	; 25
   12b20:	a0 e0       	ldi	r26, 0x00	; 0
   12b22:	ed b7       	in	r30, 0x3d	; 61
   12b24:	fe b7       	in	r31, 0x3e	; 62
   12b26:	81 83       	std	Z+1, r24	; 0x01
   12b28:	92 83       	std	Z+2, r25	; 0x02
   12b2a:	a3 83       	std	Z+3, r26	; 0x03
   12b2c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12b30:	62 96       	adiw	r28, 0x12	; 18
   12b32:	0f b6       	in	r0, 0x3f	; 63
   12b34:	f8 94       	cli
   12b36:	de bf       	out	0x3e, r29	; 62
   12b38:	0f be       	out	0x3f, r0	; 63
   12b3a:	cd bf       	out	0x3d, r28	; 61
   12b3c:	df 91       	pop	r29
   12b3e:	cf 91       	pop	r28
   12b40:	1f 91       	pop	r17
   12b42:	0f 91       	pop	r16
   12b44:	ef 90       	pop	r14
   12b46:	df 90       	pop	r13
   12b48:	cf 90       	pop	r12
   12b4a:	bf 90       	pop	r11
   12b4c:	af 90       	pop	r10
   12b4e:	8f 90       	pop	r8
   12b50:	7f 90       	pop	r7
   12b52:	6f 90       	pop	r6
   12b54:	4f 90       	pop	r4
   12b56:	3f 90       	pop	r3
   12b58:	2f 90       	pop	r2
   12b5a:	08 95       	ret

00012b5c <find_type>:
   12b5c:	e4 ee       	ldi	r30, 0xE4	; 228
   12b5e:	fe e1       	ldi	r31, 0x1E	; 30
   12b60:	20 e0       	ldi	r18, 0x00	; 0
   12b62:	30 e0       	ldi	r19, 0x00	; 0
   12b64:	40 81       	ld	r20, Z
   12b66:	50 e0       	ldi	r21, 0x00	; 0
   12b68:	48 17       	cp	r20, r24
   12b6a:	59 07       	cpc	r21, r25
   12b6c:	49 f0       	breq	.+18     	; 0x12b80 <find_type+0x24>
   12b6e:	2f 5f       	subi	r18, 0xFF	; 255
   12b70:	3f 4f       	sbci	r19, 0xFF	; 255
   12b72:	bb 96       	adiw	r30, 0x2b	; 43
   12b74:	2c 30       	cpi	r18, 0x0C	; 12
   12b76:	31 05       	cpc	r19, r1
   12b78:	a9 f7       	brne	.-22     	; 0x12b64 <find_type+0x8>
   12b7a:	8f ef       	ldi	r24, 0xFF	; 255
   12b7c:	9f ef       	ldi	r25, 0xFF	; 255
   12b7e:	08 95       	ret
   12b80:	c9 01       	movw	r24, r18
   12b82:	08 95       	ret

00012b84 <count_drive_types>:
   12b84:	28 2f       	mov	r18, r24
   12b86:	e4 ee       	ldi	r30, 0xE4	; 228
   12b88:	fe e1       	ldi	r31, 0x1E	; 30
   12b8a:	80 e0       	ldi	r24, 0x00	; 0
   12b8c:	90 e0       	ldi	r25, 0x00	; 0
   12b8e:	30 81       	ld	r19, Z
   12b90:	32 13       	cpse	r19, r18
   12b92:	01 c0       	rjmp	.+2      	; 0x12b96 <count_drive_types+0x12>
   12b94:	01 96       	adiw	r24, 0x01	; 1
   12b96:	bb 96       	adiw	r30, 0x2b	; 43
   12b98:	30 e2       	ldi	r19, 0x20	; 32
   12b9a:	e8 3e       	cpi	r30, 0xE8	; 232
   12b9c:	f3 07       	cpc	r31, r19
   12b9e:	b9 f7       	brne	.-18     	; 0x12b8e <count_drive_types+0xa>
   12ba0:	08 95       	ret

00012ba2 <type_to_str>:
   12ba2:	00 97       	sbiw	r24, 0x00	; 0
   12ba4:	59 f0       	breq	.+22     	; 0x12bbc <type_to_str+0x1a>
   12ba6:	81 30       	cpi	r24, 0x01	; 1
   12ba8:	91 05       	cpc	r25, r1
   12baa:	59 f0       	breq	.+22     	; 0x12bc2 <type_to_str+0x20>
   12bac:	83 30       	cpi	r24, 0x03	; 3
   12bae:	91 05       	cpc	r25, r1
   12bb0:	59 f0       	breq	.+22     	; 0x12bc8 <type_to_str+0x26>
   12bb2:	04 97       	sbiw	r24, 0x04	; 4
   12bb4:	61 f0       	breq	.+24     	; 0x12bce <type_to_str+0x2c>
   12bb6:	8f e2       	ldi	r24, 0x2F	; 47
   12bb8:	9e e0       	ldi	r25, 0x0E	; 14
   12bba:	08 95       	ret
   12bbc:	85 e0       	ldi	r24, 0x05	; 5
   12bbe:	9e e0       	ldi	r25, 0x0E	; 14
   12bc0:	08 95       	ret
   12bc2:	8d e0       	ldi	r24, 0x0D	; 13
   12bc4:	9e e0       	ldi	r25, 0x0E	; 14
   12bc6:	08 95       	ret
   12bc8:	85 e2       	ldi	r24, 0x25	; 37
   12bca:	9e e0       	ldi	r25, 0x0E	; 14
   12bcc:	08 95       	ret
   12bce:	88 e1       	ldi	r24, 0x18	; 24
   12bd0:	9e e0       	ldi	r25, 0x0E	; 14
   12bd2:	08 95       	ret

00012bd4 <find_free>:
   12bd4:	80 e0       	ldi	r24, 0x00	; 0
   12bd6:	90 e0       	ldi	r25, 0x00	; 0
   12bd8:	c1 cf       	rjmp	.-126    	; 0x12b5c <find_type>
   12bda:	08 95       	ret

00012bdc <find_device>:
   12bdc:	9b 01       	movw	r18, r22
   12bde:	20 52       	subi	r18, 0x20	; 32
   12be0:	31 09       	sbc	r19, r1
   12be2:	2f 35       	cpi	r18, 0x5F	; 95
   12be4:	31 05       	cpc	r19, r1
   12be6:	f8 f4       	brcc	.+62     	; 0x12c26 <find_device+0x4a>
   12be8:	64 17       	cp	r22, r20
   12bea:	75 07       	cpc	r23, r21
   12bec:	e4 f0       	brlt	.+56     	; 0x12c26 <find_device+0x4a>
   12bee:	9a 01       	movw	r18, r20
   12bf0:	22 5e       	subi	r18, 0xE2	; 226
   12bf2:	3f 4f       	sbci	r19, 0xFF	; 255
   12bf4:	26 17       	cp	r18, r22
   12bf6:	37 07       	cpc	r19, r23
   12bf8:	b4 f0       	brlt	.+44     	; 0x12c26 <find_device+0x4a>
   12bfa:	64 1b       	sub	r22, r20
   12bfc:	75 0b       	sbc	r23, r21
   12bfe:	e4 ee       	ldi	r30, 0xE4	; 228
   12c00:	fe e1       	ldi	r31, 0x1E	; 30
   12c02:	20 e0       	ldi	r18, 0x00	; 0
   12c04:	30 e0       	ldi	r19, 0x00	; 0
   12c06:	40 81       	ld	r20, Z
   12c08:	50 e0       	ldi	r21, 0x00	; 0
   12c0a:	48 17       	cp	r20, r24
   12c0c:	59 07       	cpc	r21, r25
   12c0e:	29 f4       	brne	.+10     	; 0x12c1a <find_device+0x3e>
   12c10:	41 81       	ldd	r20, Z+1	; 0x01
   12c12:	50 e0       	ldi	r21, 0x00	; 0
   12c14:	64 17       	cp	r22, r20
   12c16:	75 07       	cpc	r23, r21
   12c18:	49 f0       	breq	.+18     	; 0x12c2c <find_device+0x50>
   12c1a:	2f 5f       	subi	r18, 0xFF	; 255
   12c1c:	3f 4f       	sbci	r19, 0xFF	; 255
   12c1e:	bb 96       	adiw	r30, 0x2b	; 43
   12c20:	2c 30       	cpi	r18, 0x0C	; 12
   12c22:	31 05       	cpc	r19, r1
   12c24:	81 f7       	brne	.-32     	; 0x12c06 <find_device+0x2a>
   12c26:	8f ef       	ldi	r24, 0xFF	; 255
   12c28:	9f ef       	ldi	r25, 0xFF	; 255
   12c2a:	08 95       	ret
   12c2c:	c9 01       	movw	r24, r18
   12c2e:	08 95       	ret

00012c30 <set_active_device>:
   12c30:	a9 e0       	ldi	r26, 0x09	; 9
   12c32:	b0 e0       	ldi	r27, 0x00	; 0
   12c34:	ee e1       	ldi	r30, 0x1E	; 30
   12c36:	f6 e9       	ldi	r31, 0x96	; 150
   12c38:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
   12c3c:	8f 3f       	cpi	r24, 0xFF	; 255
   12c3e:	2f ef       	ldi	r18, 0xFF	; 255
   12c40:	92 07       	cpc	r25, r18
   12c42:	09 f4       	brne	.+2      	; 0x12c46 <set_active_device+0x16>
   12c44:	d0 c0       	rjmp	.+416    	; 0x12de6 <set_active_device+0x1b6>
   12c46:	ec 01       	movw	r28, r24
   12c48:	0c 97       	sbiw	r24, 0x0c	; 12
   12c4a:	b0 f0       	brcs	.+44     	; 0x12c78 <set_active_device+0x48>
   12c4c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c50:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c54:	c9 01       	movw	r24, r18
   12c56:	81 70       	andi	r24, 0x01	; 1
   12c58:	99 27       	eor	r25, r25
   12c5a:	20 ff       	sbrs	r18, 0
   12c5c:	c6 c0       	rjmp	.+396    	; 0x12dea <set_active_device+0x1ba>
   12c5e:	ed b7       	in	r30, 0x3d	; 61
   12c60:	fe b7       	in	r31, 0x3e	; 62
   12c62:	d5 83       	std	Z+5, r29	; 0x05
   12c64:	c4 83       	std	Z+4, r28	; 0x04
   12c66:	89 e2       	ldi	r24, 0x29	; 41
   12c68:	99 e1       	ldi	r25, 0x19	; 25
   12c6a:	a0 e0       	ldi	r26, 0x00	; 0
   12c6c:	81 83       	std	Z+1, r24	; 0x01
   12c6e:	92 83       	std	Z+2, r25	; 0x02
   12c70:	a3 83       	std	Z+3, r26	; 0x03
   12c72:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12c76:	b7 c0       	rjmp	.+366    	; 0x12de6 <set_active_device+0x1b6>
   12c78:	8b e2       	ldi	r24, 0x2B	; 43
   12c7a:	8c 9f       	mul	r24, r28
   12c7c:	f0 01       	movw	r30, r0
   12c7e:	8d 9f       	mul	r24, r29
   12c80:	f0 0d       	add	r31, r0
   12c82:	11 24       	eor	r1, r1
   12c84:	ec 51       	subi	r30, 0x1C	; 28
   12c86:	f1 4e       	sbci	r31, 0xE1	; 225
   12c88:	21 81       	ldd	r18, Z+1	; 0x01
   12c8a:	2f 31       	cpi	r18, 0x1F	; 31
   12c8c:	d0 f0       	brcs	.+52     	; 0x12cc2 <set_active_device+0x92>
   12c8e:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12c92:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c96:	ca 01       	movw	r24, r20
   12c98:	81 70       	andi	r24, 0x01	; 1
   12c9a:	99 27       	eor	r25, r25
   12c9c:	40 ff       	sbrs	r20, 0
   12c9e:	a5 c0       	rjmp	.+330    	; 0x12dea <set_active_device+0x1ba>
   12ca0:	82 2f       	mov	r24, r18
   12ca2:	90 e0       	ldi	r25, 0x00	; 0
   12ca4:	ed b7       	in	r30, 0x3d	; 61
   12ca6:	fe b7       	in	r31, 0x3e	; 62
   12ca8:	97 83       	std	Z+7, r25	; 0x07
   12caa:	86 83       	std	Z+6, r24	; 0x06
   12cac:	d5 83       	std	Z+5, r29	; 0x05
   12cae:	c4 83       	std	Z+4, r28	; 0x04
   12cb0:	80 ef       	ldi	r24, 0xF0	; 240
   12cb2:	98 e1       	ldi	r25, 0x18	; 24
   12cb4:	a0 e0       	ldi	r26, 0x00	; 0
   12cb6:	81 83       	std	Z+1, r24	; 0x01
   12cb8:	92 83       	std	Z+2, r25	; 0x02
   12cba:	a3 83       	std	Z+3, r26	; 0x03
   12cbc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12cc0:	92 c0       	rjmp	.+292    	; 0x12de6 <set_active_device+0x1b6>
   12cc2:	20 81       	ld	r18, Z
   12cc4:	02 2f       	mov	r16, r18
   12cc6:	10 e0       	ldi	r17, 0x00	; 0
   12cc8:	87 a1       	ldd	r24, Z+39	; 0x27
   12cca:	90 a5       	ldd	r25, Z+40	; 0x28
   12ccc:	00 97       	sbiw	r24, 0x00	; 0
   12cce:	b1 f4       	brne	.+44     	; 0x12cfc <set_active_device+0xcc>
   12cd0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12cd4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12cd8:	c9 01       	movw	r24, r18
   12cda:	81 70       	andi	r24, 0x01	; 1
   12cdc:	99 27       	eor	r25, r25
   12cde:	20 ff       	sbrs	r18, 0
   12ce0:	84 c0       	rjmp	.+264    	; 0x12dea <set_active_device+0x1ba>
   12ce2:	c8 01       	movw	r24, r16
   12ce4:	5e df       	rcall	.-324    	; 0x12ba2 <type_to_str>
   12ce6:	ed b7       	in	r30, 0x3d	; 61
   12ce8:	fe b7       	in	r31, 0x3e	; 62
   12cea:	91 87       	std	Z+9, r25	; 0x09
   12cec:	80 87       	std	Z+8, r24	; 0x08
   12cee:	17 83       	std	Z+7, r17	; 0x07
   12cf0:	06 83       	std	Z+6, r16	; 0x06
   12cf2:	d5 83       	std	Z+5, r29	; 0x05
   12cf4:	c4 83       	std	Z+4, r28	; 0x04
   12cf6:	8b eb       	ldi	r24, 0xBB	; 187
   12cf8:	98 e1       	ldi	r25, 0x18	; 24
   12cfa:	6f c0       	rjmp	.+222    	; 0x12dda <set_active_device+0x1aa>
   12cfc:	01 15       	cp	r16, r1
   12cfe:	11 05       	cpc	r17, r1
   12d00:	b9 f4       	brne	.+46     	; 0x12d30 <set_active_device+0x100>
   12d02:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d06:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d0a:	c9 01       	movw	r24, r18
   12d0c:	81 70       	andi	r24, 0x01	; 1
   12d0e:	99 27       	eor	r25, r25
   12d10:	20 ff       	sbrs	r18, 0
   12d12:	6b c0       	rjmp	.+214    	; 0x12dea <set_active_device+0x1ba>
   12d14:	80 e0       	ldi	r24, 0x00	; 0
   12d16:	90 e0       	ldi	r25, 0x00	; 0
   12d18:	44 df       	rcall	.-376    	; 0x12ba2 <type_to_str>
   12d1a:	ed b7       	in	r30, 0x3d	; 61
   12d1c:	fe b7       	in	r31, 0x3e	; 62
   12d1e:	91 87       	std	Z+9, r25	; 0x09
   12d20:	80 87       	std	Z+8, r24	; 0x08
   12d22:	17 82       	std	Z+7, r1	; 0x07
   12d24:	16 82       	std	Z+6, r1	; 0x06
   12d26:	d5 83       	std	Z+5, r29	; 0x05
   12d28:	c4 83       	std	Z+4, r28	; 0x04
   12d2a:	86 e8       	ldi	r24, 0x86	; 134
   12d2c:	98 e1       	ldi	r25, 0x18	; 24
   12d2e:	55 c0       	rjmp	.+170    	; 0x12dda <set_active_device+0x1aa>
   12d30:	04 30       	cpi	r16, 0x04	; 4
   12d32:	11 05       	cpc	r17, r1
   12d34:	29 f4       	brne	.+10     	; 0x12d40 <set_active_device+0x110>
   12d36:	90 93 5c 19 	sts	0x195C, r25	; 0x80195c <PRINTERp+0x1>
   12d3a:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <PRINTERp>
   12d3e:	35 c0       	rjmp	.+106    	; 0x12daa <set_active_device+0x17a>
   12d40:	2d 7f       	andi	r18, 0xFD	; 253
   12d42:	21 30       	cpi	r18, 0x01	; 1
   12d44:	a9 f5       	brne	.+106    	; 0x12db0 <set_active_device+0x180>
   12d46:	21 a5       	ldd	r18, Z+41	; 0x29
   12d48:	32 a5       	ldd	r19, Z+42	; 0x2a
   12d4a:	21 15       	cp	r18, r1
   12d4c:	31 05       	cpc	r19, r1
   12d4e:	b1 f4       	brne	.+44     	; 0x12d7c <set_active_device+0x14c>
   12d50:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d54:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d58:	c9 01       	movw	r24, r18
   12d5a:	81 70       	andi	r24, 0x01	; 1
   12d5c:	99 27       	eor	r25, r25
   12d5e:	20 ff       	sbrs	r18, 0
   12d60:	44 c0       	rjmp	.+136    	; 0x12dea <set_active_device+0x1ba>
   12d62:	c8 01       	movw	r24, r16
   12d64:	1e df       	rcall	.-452    	; 0x12ba2 <type_to_str>
   12d66:	ed b7       	in	r30, 0x3d	; 61
   12d68:	fe b7       	in	r31, 0x3e	; 62
   12d6a:	91 87       	std	Z+9, r25	; 0x09
   12d6c:	80 87       	std	Z+8, r24	; 0x08
   12d6e:	17 83       	std	Z+7, r17	; 0x07
   12d70:	06 83       	std	Z+6, r16	; 0x06
   12d72:	d5 83       	std	Z+5, r29	; 0x05
   12d74:	c4 83       	std	Z+4, r28	; 0x04
   12d76:	8e e4       	ldi	r24, 0x4E	; 78
   12d78:	98 e1       	ldi	r25, 0x18	; 24
   12d7a:	2f c0       	rjmp	.+94     	; 0x12dda <set_active_device+0x1aa>
   12d7c:	01 30       	cpi	r16, 0x01	; 1
   12d7e:	11 05       	cpc	r17, r1
   12d80:	49 f4       	brne	.+18     	; 0x12d94 <set_active_device+0x164>
   12d82:	90 93 56 19 	sts	0x1956, r25	; 0x801956 <AMIGOp+0x1>
   12d86:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <AMIGOp>
   12d8a:	30 93 54 19 	sts	0x1954, r19	; 0x801954 <AMIGOs+0x1>
   12d8e:	20 93 53 19 	sts	0x1953, r18	; 0x801953 <AMIGOs>
   12d92:	0b c0       	rjmp	.+22     	; 0x12daa <set_active_device+0x17a>
   12d94:	03 30       	cpi	r16, 0x03	; 3
   12d96:	11 05       	cpc	r17, r1
   12d98:	59 f4       	brne	.+22     	; 0x12db0 <set_active_device+0x180>
   12d9a:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <SS80p+0x1>
   12d9e:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <SS80p>
   12da2:	30 93 58 19 	sts	0x1958, r19	; 0x801958 <SS80s+0x1>
   12da6:	20 93 57 19 	sts	0x1957, r18	; 0x801957 <SS80s>
   12daa:	81 e0       	ldi	r24, 0x01	; 1
   12dac:	90 e0       	ldi	r25, 0x00	; 0
   12dae:	1d c0       	rjmp	.+58     	; 0x12dea <set_active_device+0x1ba>
   12db0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12db4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12db8:	c9 01       	movw	r24, r18
   12dba:	81 70       	andi	r24, 0x01	; 1
   12dbc:	99 27       	eor	r25, r25
   12dbe:	20 ff       	sbrs	r18, 0
   12dc0:	14 c0       	rjmp	.+40     	; 0x12dea <set_active_device+0x1ba>
   12dc2:	c8 01       	movw	r24, r16
   12dc4:	ee de       	rcall	.-548    	; 0x12ba2 <type_to_str>
   12dc6:	ed b7       	in	r30, 0x3d	; 61
   12dc8:	fe b7       	in	r31, 0x3e	; 62
   12dca:	91 87       	std	Z+9, r25	; 0x09
   12dcc:	80 87       	std	Z+8, r24	; 0x08
   12dce:	17 83       	std	Z+7, r17	; 0x07
   12dd0:	06 83       	std	Z+6, r16	; 0x06
   12dd2:	d5 83       	std	Z+5, r29	; 0x05
   12dd4:	c4 83       	std	Z+4, r28	; 0x04
   12dd6:	83 e2       	ldi	r24, 0x23	; 35
   12dd8:	98 e1       	ldi	r25, 0x18	; 24
   12dda:	a0 e0       	ldi	r26, 0x00	; 0
   12ddc:	81 83       	std	Z+1, r24	; 0x01
   12dde:	92 83       	std	Z+2, r25	; 0x02
   12de0:	a3 83       	std	Z+3, r26	; 0x03
   12de2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12de6:	80 e0       	ldi	r24, 0x00	; 0
   12de8:	90 e0       	ldi	r25, 0x00	; 0
   12dea:	cd b7       	in	r28, 0x3d	; 61
   12dec:	de b7       	in	r29, 0x3e	; 62
   12dee:	29 96       	adiw	r28, 0x09	; 9
   12df0:	e4 e0       	ldi	r30, 0x04	; 4
   12df2:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00012df6 <SS80_Set_Defaults>:
   12df6:	0f 93       	push	r16
   12df8:	1f 93       	push	r17
   12dfa:	cf 93       	push	r28
   12dfc:	df 93       	push	r29
   12dfe:	ec 01       	movw	r28, r24
   12e00:	82 e0       	ldi	r24, 0x02	; 2
   12e02:	90 e0       	ldi	r25, 0x00	; 0
   12e04:	ab de       	rcall	.-682    	; 0x12b5c <find_type>
   12e06:	97 fd       	sbrc	r25, 7
   12e08:	6b c0       	rjmp	.+214    	; 0x12ee0 <SS80_Set_Defaults+0xea>
   12e0a:	2b e2       	ldi	r18, 0x2B	; 43
   12e0c:	2c 9f       	mul	r18, r28
   12e0e:	f0 01       	movw	r30, r0
   12e10:	2d 9f       	mul	r18, r29
   12e12:	f0 0d       	add	r31, r0
   12e14:	11 24       	eor	r1, r1
   12e16:	ec 51       	subi	r30, 0x1C	; 28
   12e18:	f1 4e       	sbci	r31, 0xE1	; 225
   12e1a:	c7 a1       	ldd	r28, Z+39	; 0x27
   12e1c:	d0 a5       	ldd	r29, Z+40	; 0x28
   12e1e:	28 9f       	mul	r18, r24
   12e20:	f0 01       	movw	r30, r0
   12e22:	29 9f       	mul	r18, r25
   12e24:	f0 0d       	add	r31, r0
   12e26:	11 24       	eor	r1, r1
   12e28:	ec 51       	subi	r30, 0x1C	; 28
   12e2a:	f1 4e       	sbci	r31, 0xE1	; 225
   12e2c:	07 a1       	ldd	r16, Z+39	; 0x27
   12e2e:	10 a5       	ldd	r17, Z+40	; 0x28
   12e30:	f8 01       	movw	r30, r16
   12e32:	80 81       	ld	r24, Z
   12e34:	88 83       	st	Y, r24
   12e36:	81 81       	ldd	r24, Z+1	; 0x01
   12e38:	89 83       	std	Y+1, r24	; 0x01
   12e3a:	82 81       	ldd	r24, Z+2	; 0x02
   12e3c:	93 81       	ldd	r25, Z+3	; 0x03
   12e3e:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <stralloc>
   12e42:	9b 83       	std	Y+3, r25	; 0x03
   12e44:	8a 83       	std	Y+2, r24	; 0x02
   12e46:	f8 01       	movw	r30, r16
   12e48:	84 81       	ldd	r24, Z+4	; 0x04
   12e4a:	95 81       	ldd	r25, Z+5	; 0x05
   12e4c:	9d 83       	std	Y+5, r25	; 0x05
   12e4e:	8c 83       	std	Y+4, r24	; 0x04
   12e50:	86 81       	ldd	r24, Z+6	; 0x06
   12e52:	97 81       	ldd	r25, Z+7	; 0x07
   12e54:	9f 83       	std	Y+7, r25	; 0x07
   12e56:	8e 83       	std	Y+6, r24	; 0x06
   12e58:	80 85       	ldd	r24, Z+8	; 0x08
   12e5a:	91 85       	ldd	r25, Z+9	; 0x09
   12e5c:	99 87       	std	Y+9, r25	; 0x09
   12e5e:	88 87       	std	Y+8, r24	; 0x08
   12e60:	82 85       	ldd	r24, Z+10	; 0x0a
   12e62:	8a 87       	std	Y+10, r24	; 0x0a
   12e64:	83 85       	ldd	r24, Z+11	; 0x0b
   12e66:	8b 87       	std	Y+11, r24	; 0x0b
   12e68:	84 85       	ldd	r24, Z+12	; 0x0c
   12e6a:	95 85       	ldd	r25, Z+13	; 0x0d
   12e6c:	a6 85       	ldd	r26, Z+14	; 0x0e
   12e6e:	b7 85       	ldd	r27, Z+15	; 0x0f
   12e70:	8c 87       	std	Y+12, r24	; 0x0c
   12e72:	9d 87       	std	Y+13, r25	; 0x0d
   12e74:	ae 87       	std	Y+14, r26	; 0x0e
   12e76:	bf 87       	std	Y+15, r27	; 0x0f
   12e78:	80 89       	ldd	r24, Z+16	; 0x10
   12e7a:	91 89       	ldd	r25, Z+17	; 0x11
   12e7c:	99 8b       	std	Y+17, r25	; 0x11
   12e7e:	88 8b       	std	Y+16, r24	; 0x10
   12e80:	82 89       	ldd	r24, Z+18	; 0x12
   12e82:	8a 8b       	std	Y+18, r24	; 0x12
   12e84:	83 89       	ldd	r24, Z+19	; 0x13
   12e86:	8b 8b       	std	Y+19, r24	; 0x13
   12e88:	84 89       	ldd	r24, Z+20	; 0x14
   12e8a:	95 89       	ldd	r25, Z+21	; 0x15
   12e8c:	9d 8b       	std	Y+21, r25	; 0x15
   12e8e:	8c 8b       	std	Y+20, r24	; 0x14
   12e90:	86 89       	ldd	r24, Z+22	; 0x16
   12e92:	97 89       	ldd	r25, Z+23	; 0x17
   12e94:	9f 8b       	std	Y+23, r25	; 0x17
   12e96:	8e 8b       	std	Y+22, r24	; 0x16
   12e98:	80 8d       	ldd	r24, Z+24	; 0x18
   12e9a:	91 8d       	ldd	r25, Z+25	; 0x19
   12e9c:	99 8f       	std	Y+25, r25	; 0x19
   12e9e:	88 8f       	std	Y+24, r24	; 0x18
   12ea0:	82 8d       	ldd	r24, Z+26	; 0x1a
   12ea2:	93 8d       	ldd	r25, Z+27	; 0x1b
   12ea4:	9b 8f       	std	Y+27, r25	; 0x1b
   12ea6:	8a 8f       	std	Y+26, r24	; 0x1a
   12ea8:	84 8d       	ldd	r24, Z+28	; 0x1c
   12eaa:	8c 8f       	std	Y+28, r24	; 0x1c
   12eac:	85 8d       	ldd	r24, Z+29	; 0x1d
   12eae:	8d 8f       	std	Y+29, r24	; 0x1d
   12eb0:	87 8d       	ldd	r24, Z+31	; 0x1f
   12eb2:	90 a1       	ldd	r25, Z+32	; 0x20
   12eb4:	a1 a1       	ldd	r26, Z+33	; 0x21
   12eb6:	b2 a1       	ldd	r27, Z+34	; 0x22
   12eb8:	8f 8f       	std	Y+31, r24	; 0x1f
   12eba:	98 a3       	std	Y+32, r25	; 0x20
   12ebc:	a9 a3       	std	Y+33, r26	; 0x21
   12ebe:	ba a3       	std	Y+34, r27	; 0x22
   12ec0:	83 a1       	ldd	r24, Z+35	; 0x23
   12ec2:	8b a3       	std	Y+35, r24	; 0x23
   12ec4:	84 a1       	ldd	r24, Z+36	; 0x24
   12ec6:	95 a1       	ldd	r25, Z+37	; 0x25
   12ec8:	9d a3       	std	Y+37, r25	; 0x25
   12eca:	8c a3       	std	Y+36, r24	; 0x24
   12ecc:	86 a1       	ldd	r24, Z+38	; 0x26
   12ece:	97 a1       	ldd	r25, Z+39	; 0x27
   12ed0:	a0 a5       	ldd	r26, Z+40	; 0x28
   12ed2:	b1 a5       	ldd	r27, Z+41	; 0x29
   12ed4:	8e a3       	std	Y+38, r24	; 0x26
   12ed6:	9f a3       	std	Y+39, r25	; 0x27
   12ed8:	a8 a7       	std	Y+40, r26	; 0x28
   12eda:	b9 a7       	std	Y+41, r27	; 0x29
   12edc:	82 a5       	ldd	r24, Z+42	; 0x2a
   12ede:	8a a7       	std	Y+42, r24	; 0x2a
   12ee0:	df 91       	pop	r29
   12ee2:	cf 91       	pop	r28
   12ee4:	1f 91       	pop	r17
   12ee6:	0f 91       	pop	r16
   12ee8:	08 95       	ret

00012eea <alloc_device>:
   12eea:	0f 93       	push	r16
   12eec:	1f 93       	push	r17
   12eee:	cf 93       	push	r28
   12ef0:	df 93       	push	r29
   12ef2:	ad b7       	in	r26, 0x3d	; 61
   12ef4:	be b7       	in	r27, 0x3e	; 62
   12ef6:	17 97       	sbiw	r26, 0x07	; 7
   12ef8:	0f b6       	in	r0, 0x3f	; 63
   12efa:	f8 94       	cli
   12efc:	be bf       	out	0x3e, r27	; 62
   12efe:	0f be       	out	0x3f, r0	; 63
   12f00:	ad bf       	out	0x3d, r26	; 61
   12f02:	8c 01       	movw	r16, r24
   12f04:	67 de       	rcall	.-818    	; 0x12bd4 <find_free>
   12f06:	ec 01       	movw	r28, r24
   12f08:	cf 3f       	cpi	r28, 0xFF	; 255
   12f0a:	8f ef       	ldi	r24, 0xFF	; 255
   12f0c:	d8 07       	cpc	r29, r24
   12f0e:	89 f4       	brne	.+34     	; 0x12f32 <alloc_device+0x48>
   12f10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f14:	80 ff       	sbrs	r24, 0
   12f16:	a1 c0       	rjmp	.+322    	; 0x1305a <alloc_device+0x170>
   12f18:	ed b7       	in	r30, 0x3d	; 61
   12f1a:	fe b7       	in	r31, 0x3e	; 62
   12f1c:	15 83       	std	Z+5, r17	; 0x05
   12f1e:	04 83       	std	Z+4, r16	; 0x04
   12f20:	8f ef       	ldi	r24, 0xFF	; 255
   12f22:	97 e1       	ldi	r25, 0x17	; 23
   12f24:	a0 e0       	ldi	r26, 0x00	; 0
   12f26:	81 83       	std	Z+1, r24	; 0x01
   12f28:	92 83       	std	Z+2, r25	; 0x02
   12f2a:	a3 83       	std	Z+3, r26	; 0x03
   12f2c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   12f30:	94 c0       	rjmp	.+296    	; 0x1305a <alloc_device+0x170>
   12f32:	02 30       	cpi	r16, 0x02	; 2
   12f34:	11 05       	cpc	r17, r1
   12f36:	e1 f1       	breq	.+120    	; 0x12fb0 <alloc_device+0xc6>
   12f38:	ec f4       	brge	.+58     	; 0x12f74 <alloc_device+0x8a>
   12f3a:	01 30       	cpi	r16, 0x01	; 1
   12f3c:	11 05       	cpc	r17, r1
   12f3e:	09 f0       	breq	.+2      	; 0x12f42 <alloc_device+0x58>
   12f40:	76 c0       	rjmp	.+236    	; 0x1302e <alloc_device+0x144>
   12f42:	8b e2       	ldi	r24, 0x2B	; 43
   12f44:	8c 9f       	mul	r24, r28
   12f46:	80 01       	movw	r16, r0
   12f48:	8d 9f       	mul	r24, r29
   12f4a:	10 0d       	add	r17, r0
   12f4c:	11 24       	eor	r1, r1
   12f4e:	0c 51       	subi	r16, 0x1C	; 28
   12f50:	11 4e       	sbci	r17, 0xE1	; 225
   12f52:	81 e0       	ldi	r24, 0x01	; 1
   12f54:	f8 01       	movw	r30, r16
   12f56:	80 83       	st	Z, r24
   12f58:	61 e0       	ldi	r22, 0x01	; 1
   12f5a:	70 e0       	ldi	r23, 0x00	; 0
   12f5c:	85 e1       	ldi	r24, 0x15	; 21
   12f5e:	90 e0       	ldi	r25, 0x00	; 0
   12f60:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   12f64:	f8 01       	movw	r30, r16
   12f66:	90 a7       	std	Z+40, r25	; 0x28
   12f68:	87 a3       	std	Z+39, r24	; 0x27
   12f6a:	61 e0       	ldi	r22, 0x01	; 1
   12f6c:	70 e0       	ldi	r23, 0x00	; 0
   12f6e:	88 e1       	ldi	r24, 0x18	; 24
   12f70:	90 e0       	ldi	r25, 0x00	; 0
   12f72:	57 c0       	rjmp	.+174    	; 0x13022 <alloc_device+0x138>
   12f74:	03 30       	cpi	r16, 0x03	; 3
   12f76:	11 05       	cpc	r17, r1
   12f78:	a1 f1       	breq	.+104    	; 0x12fe2 <alloc_device+0xf8>
   12f7a:	04 30       	cpi	r16, 0x04	; 4
   12f7c:	11 05       	cpc	r17, r1
   12f7e:	09 f0       	breq	.+2      	; 0x12f82 <alloc_device+0x98>
   12f80:	56 c0       	rjmp	.+172    	; 0x1302e <alloc_device+0x144>
   12f82:	8b e2       	ldi	r24, 0x2B	; 43
   12f84:	8c 9f       	mul	r24, r28
   12f86:	80 01       	movw	r16, r0
   12f88:	8d 9f       	mul	r24, r29
   12f8a:	10 0d       	add	r17, r0
   12f8c:	11 24       	eor	r1, r1
   12f8e:	0c 51       	subi	r16, 0x1C	; 28
   12f90:	11 4e       	sbci	r17, 0xE1	; 225
   12f92:	84 e0       	ldi	r24, 0x04	; 4
   12f94:	f8 01       	movw	r30, r16
   12f96:	80 83       	st	Z, r24
   12f98:	61 e0       	ldi	r22, 0x01	; 1
   12f9a:	70 e0       	ldi	r23, 0x00	; 0
   12f9c:	8b e0       	ldi	r24, 0x0B	; 11
   12f9e:	90 e0       	ldi	r25, 0x00	; 0
   12fa0:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   12fa4:	f8 01       	movw	r30, r16
   12fa6:	90 a7       	std	Z+40, r25	; 0x28
   12fa8:	87 a3       	std	Z+39, r24	; 0x27
   12faa:	12 a6       	std	Z+42, r1	; 0x2a
   12fac:	11 a6       	std	Z+41, r1	; 0x29
   12fae:	55 c0       	rjmp	.+170    	; 0x1305a <alloc_device+0x170>
   12fb0:	8b e2       	ldi	r24, 0x2B	; 43
   12fb2:	8c 9f       	mul	r24, r28
   12fb4:	80 01       	movw	r16, r0
   12fb6:	8d 9f       	mul	r24, r29
   12fb8:	10 0d       	add	r17, r0
   12fba:	11 24       	eor	r1, r1
   12fbc:	0c 51       	subi	r16, 0x1C	; 28
   12fbe:	11 4e       	sbci	r17, 0xE1	; 225
   12fc0:	82 e0       	ldi	r24, 0x02	; 2
   12fc2:	f8 01       	movw	r30, r16
   12fc4:	80 83       	st	Z, r24
   12fc6:	61 e0       	ldi	r22, 0x01	; 1
   12fc8:	70 e0       	ldi	r23, 0x00	; 0
   12fca:	82 e3       	ldi	r24, 0x32	; 50
   12fcc:	90 e0       	ldi	r25, 0x00	; 0
   12fce:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   12fd2:	f8 01       	movw	r30, r16
   12fd4:	90 a7       	std	Z+40, r25	; 0x28
   12fd6:	87 a3       	std	Z+39, r24	; 0x27
   12fd8:	61 e0       	ldi	r22, 0x01	; 1
   12fda:	70 e0       	ldi	r23, 0x00	; 0
   12fdc:	86 e1       	ldi	r24, 0x16	; 22
   12fde:	90 e0       	ldi	r25, 0x00	; 0
   12fe0:	20 c0       	rjmp	.+64     	; 0x13022 <alloc_device+0x138>
   12fe2:	8b e2       	ldi	r24, 0x2B	; 43
   12fe4:	8c 9f       	mul	r24, r28
   12fe6:	80 01       	movw	r16, r0
   12fe8:	8d 9f       	mul	r24, r29
   12fea:	10 0d       	add	r17, r0
   12fec:	11 24       	eor	r1, r1
   12fee:	0c 51       	subi	r16, 0x1C	; 28
   12ff0:	11 4e       	sbci	r17, 0xE1	; 225
   12ff2:	83 e0       	ldi	r24, 0x03	; 3
   12ff4:	f8 01       	movw	r30, r16
   12ff6:	80 83       	st	Z, r24
   12ff8:	61 e0       	ldi	r22, 0x01	; 1
   12ffa:	70 e0       	ldi	r23, 0x00	; 0
   12ffc:	82 e3       	ldi	r24, 0x32	; 50
   12ffe:	90 e0       	ldi	r25, 0x00	; 0
   13000:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   13004:	f8 01       	movw	r30, r16
   13006:	90 a7       	std	Z+40, r25	; 0x28
   13008:	87 a3       	std	Z+39, r24	; 0x27
   1300a:	61 e0       	ldi	r22, 0x01	; 1
   1300c:	70 e0       	ldi	r23, 0x00	; 0
   1300e:	86 e1       	ldi	r24, 0x16	; 22
   13010:	90 e0       	ldi	r25, 0x00	; 0
   13012:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   13016:	f8 01       	movw	r30, r16
   13018:	92 a7       	std	Z+42, r25	; 0x2a
   1301a:	81 a7       	std	Z+41, r24	; 0x29
   1301c:	ce 01       	movw	r24, r28
   1301e:	eb de       	rcall	.-554    	; 0x12df6 <SS80_Set_Defaults>
   13020:	1c c0       	rjmp	.+56     	; 0x1305a <alloc_device+0x170>
   13022:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   13026:	f8 01       	movw	r30, r16
   13028:	92 a7       	std	Z+42, r25	; 0x2a
   1302a:	81 a7       	std	Z+41, r24	; 0x29
   1302c:	16 c0       	rjmp	.+44     	; 0x1305a <alloc_device+0x170>
   1302e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13032:	80 ff       	sbrs	r24, 0
   13034:	10 c0       	rjmp	.+32     	; 0x13056 <alloc_device+0x16c>
   13036:	c8 01       	movw	r24, r16
   13038:	b4 dd       	rcall	.-1176   	; 0x12ba2 <type_to_str>
   1303a:	ed b7       	in	r30, 0x3d	; 61
   1303c:	fe b7       	in	r31, 0x3e	; 62
   1303e:	97 83       	std	Z+7, r25	; 0x07
   13040:	86 83       	std	Z+6, r24	; 0x06
   13042:	15 83       	std	Z+5, r17	; 0x05
   13044:	04 83       	std	Z+4, r16	; 0x04
   13046:	8d ed       	ldi	r24, 0xDD	; 221
   13048:	97 e1       	ldi	r25, 0x17	; 23
   1304a:	a0 e0       	ldi	r26, 0x00	; 0
   1304c:	81 83       	std	Z+1, r24	; 0x01
   1304e:	92 83       	std	Z+2, r25	; 0x02
   13050:	a3 83       	std	Z+3, r26	; 0x03
   13052:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   13056:	cf ef       	ldi	r28, 0xFF	; 255
   13058:	df ef       	ldi	r29, 0xFF	; 255
   1305a:	ce 01       	movw	r24, r28
   1305c:	cd b7       	in	r28, 0x3d	; 61
   1305e:	de b7       	in	r29, 0x3e	; 62
   13060:	27 96       	adiw	r28, 0x07	; 7
   13062:	e4 e0       	ldi	r30, 0x04	; 4
   13064:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00013068 <init_Devices>:
   13068:	cf 93       	push	r28
   1306a:	df 93       	push	r29
   1306c:	10 92 68 19 	sts	0x1968, r1	; 0x801968 <stack_ind+0x1>
   13070:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <stack_ind>
   13074:	e4 ee       	ldi	r30, 0xE4	; 228
   13076:	fe e1       	ldi	r31, 0x1E	; 30
   13078:	9f ef       	ldi	r25, 0xFF	; 255
   1307a:	80 e2       	ldi	r24, 0x20	; 32
   1307c:	10 82       	st	Z, r1
   1307e:	11 82       	std	Z+1, r1	; 0x01
   13080:	92 83       	std	Z+2, r25	; 0x02
   13082:	13 82       	std	Z+3, r1	; 0x03
   13084:	14 82       	std	Z+4, r1	; 0x04
   13086:	15 82       	std	Z+5, r1	; 0x05
   13088:	16 82       	std	Z+6, r1	; 0x06
   1308a:	df 01       	movw	r26, r30
   1308c:	17 96       	adiw	r26, 0x07	; 7
   1308e:	ed 01       	movw	r28, r26
   13090:	28 2f       	mov	r18, r24
   13092:	19 92       	st	Y+, r1
   13094:	2a 95       	dec	r18
   13096:	e9 f7       	brne	.-6      	; 0x13092 <init_Devices+0x2a>
   13098:	10 a6       	std	Z+40, r1	; 0x28
   1309a:	17 a2       	std	Z+39, r1	; 0x27
   1309c:	12 a6       	std	Z+42, r1	; 0x2a
   1309e:	11 a6       	std	Z+41, r1	; 0x29
   130a0:	bb 96       	adiw	r30, 0x2b	; 43
   130a2:	c0 e2       	ldi	r28, 0x20	; 32
   130a4:	e8 3e       	cpi	r30, 0xE8	; 232
   130a6:	fc 07       	cpc	r31, r28
   130a8:	49 f7       	brne	.-46     	; 0x1307c <init_Devices+0x14>
   130aa:	df 91       	pop	r29
   130ac:	cf 91       	pop	r28
   130ae:	08 95       	ret

000130b0 <push_state>:
   130b0:	20 91 67 19 	lds	r18, 0x1967	; 0x801967 <stack_ind>
   130b4:	30 91 68 19 	lds	r19, 0x1968	; 0x801968 <stack_ind+0x1>
   130b8:	25 30       	cpi	r18, 0x05	; 5
   130ba:	31 05       	cpc	r19, r1
   130bc:	7c f4       	brge	.+30     	; 0x130dc <push_state+0x2c>
   130be:	a9 01       	movw	r20, r18
   130c0:	4f 5f       	subi	r20, 0xFF	; 255
   130c2:	5f 4f       	sbci	r21, 0xFF	; 255
   130c4:	50 93 68 19 	sts	0x1968, r21	; 0x801968 <stack_ind+0x1>
   130c8:	40 93 67 19 	sts	0x1967, r20	; 0x801967 <stack_ind>
   130cc:	22 0f       	add	r18, r18
   130ce:	33 1f       	adc	r19, r19
   130d0:	f9 01       	movw	r30, r18
   130d2:	e3 5a       	subi	r30, 0xA3	; 163
   130d4:	f6 4e       	sbci	r31, 0xE6	; 230
   130d6:	80 83       	st	Z, r24
   130d8:	91 83       	std	Z+1, r25	; 0x01
   130da:	08 95       	ret
   130dc:	80 e0       	ldi	r24, 0x00	; 0
   130de:	90 e0       	ldi	r25, 0x00	; 0
   130e0:	08 95       	ret

000130e2 <pop_state>:
   130e2:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <stack_ind>
   130e6:	90 91 68 19 	lds	r25, 0x1968	; 0x801968 <stack_ind+0x1>
   130ea:	18 16       	cp	r1, r24
   130ec:	19 06       	cpc	r1, r25
   130ee:	6c f4       	brge	.+26     	; 0x1310a <pop_state+0x28>
   130f0:	01 97       	sbiw	r24, 0x01	; 1
   130f2:	90 93 68 19 	sts	0x1968, r25	; 0x801968 <stack_ind+0x1>
   130f6:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <stack_ind>
   130fa:	88 0f       	add	r24, r24
   130fc:	99 1f       	adc	r25, r25
   130fe:	fc 01       	movw	r30, r24
   13100:	e3 5a       	subi	r30, 0xA3	; 163
   13102:	f6 4e       	sbci	r31, 0xE6	; 230
   13104:	80 81       	ld	r24, Z
   13106:	91 81       	ldd	r25, Z+1	; 0x01
   13108:	08 95       	ret
   1310a:	80 e0       	ldi	r24, 0x00	; 0
   1310c:	90 e0       	ldi	r25, 0x00	; 0
   1310e:	08 95       	ret

00013110 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   13110:	08 95       	ret

00013112 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13112:	0f 93       	push	r16
   13114:	1f 93       	push	r17
   13116:	cf 93       	push	r28
   13118:	df 93       	push	r29
   1311a:	00 d0       	rcall	.+0      	; 0x1311c <hpdir_set_device+0xa>
   1311c:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   1311e:	2b e2       	ldi	r18, 0x2B	; 43
   13120:	ac 01       	movw	r20, r24
   13122:	24 9f       	mul	r18, r20
   13124:	c0 01       	movw	r24, r0
   13126:	25 9f       	mul	r18, r21
   13128:	90 0d       	add	r25, r0
   1312a:	11 24       	eor	r1, r1
   1312c:	ec 01       	movw	r28, r24
   1312e:	cc 51       	subi	r28, 0x1C	; 28
   13130:	d1 4e       	sbci	r29, 0xE1	; 225
   13132:	28 81       	ld	r18, Y
   13134:	23 30       	cpi	r18, 0x03	; 3
   13136:	a1 f5       	brne	.+104    	; 0x131a0 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   13138:	ef a1       	ldd	r30, Y+39	; 0x27
   1313a:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   1313c:	20 91 68 21 	lds	r18, 0x2168	; 0x802168 <hpdir+0x80>
   13140:	30 91 69 21 	lds	r19, 0x2169	; 0x802169 <hpdir+0x81>
   13144:	35 83       	std	Z+5, r19	; 0x05
   13146:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   13148:	40 91 74 21 	lds	r20, 0x2174	; 0x802174 <hpdir+0x8c>
   1314c:	50 91 75 21 	lds	r21, 0x2175	; 0x802175 <hpdir+0x8d>
   13150:	60 91 76 21 	lds	r22, 0x2176	; 0x802176 <hpdir+0x8e>
   13154:	70 91 77 21 	lds	r23, 0x2177	; 0x802177 <hpdir+0x8f>
   13158:	44 87       	std	Z+12, r20	; 0x0c
   1315a:	55 87       	std	Z+13, r21	; 0x0d
   1315c:	66 87       	std	Z+14, r22	; 0x0e
   1315e:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   13160:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <hpdir+0xa0>
   13164:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <hpdir+0xa1>
   13168:	31 8b       	std	Z+17, r19	; 0x11
   1316a:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   1316c:	17 8e       	std	Z+31, r1	; 0x1f
   1316e:	10 a2       	std	Z+32, r1	; 0x20
   13170:	11 a2       	std	Z+33, r1	; 0x21
   13172:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   13174:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   13176:	15 a2       	std	Z+37, r1	; 0x25
   13178:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   1317a:	40 91 94 21 	lds	r20, 0x2194	; 0x802194 <hpdir+0xac>
   1317e:	50 91 95 21 	lds	r21, 0x2195	; 0x802195 <hpdir+0xad>
   13182:	60 91 96 21 	lds	r22, 0x2196	; 0x802196 <hpdir+0xae>
   13186:	70 91 97 21 	lds	r23, 0x2197	; 0x802197 <hpdir+0xaf>
   1318a:	8a 01       	movw	r16, r20
   1318c:	9b 01       	movw	r18, r22
   1318e:	01 50       	subi	r16, 0x01	; 1
   13190:	11 09       	sbc	r17, r1
   13192:	21 09       	sbc	r18, r1
   13194:	31 09       	sbc	r19, r1
   13196:	06 a3       	std	Z+38, r16	; 0x26
   13198:	17 a3       	std	Z+39, r17	; 0x27
   1319a:	20 a7       	std	Z+40, r18	; 0x28
   1319c:	31 a7       	std	Z+41, r19	; 0x29
   1319e:	2a c0       	rjmp	.+84     	; 0x131f4 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   131a0:	21 30       	cpi	r18, 0x01	; 1
   131a2:	a9 f5       	brne	.+106    	; 0x1320e <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   131a4:	ef a1       	ldd	r30, Y+39	; 0x27
   131a6:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   131a8:	20 91 68 21 	lds	r18, 0x2168	; 0x802168 <hpdir+0x80>
   131ac:	30 91 69 21 	lds	r19, 0x2169	; 0x802169 <hpdir+0x81>
   131b0:	35 83       	std	Z+5, r19	; 0x05
   131b2:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   131b4:	20 91 88 21 	lds	r18, 0x2188	; 0x802188 <hpdir+0xa0>
   131b8:	30 91 89 21 	lds	r19, 0x2189	; 0x802189 <hpdir+0xa1>
   131bc:	37 83       	std	Z+7, r19	; 0x07
   131be:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   131c0:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x9c>
   131c4:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x9d>
   131c8:	31 87       	std	Z+9, r19	; 0x09
   131ca:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   131cc:	20 91 80 21 	lds	r18, 0x2180	; 0x802180 <hpdir+0x98>
   131d0:	30 91 81 21 	lds	r19, 0x2181	; 0x802181 <hpdir+0x99>
   131d4:	33 87       	std	Z+11, r19	; 0x0b
   131d6:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   131d8:	20 91 7c 21 	lds	r18, 0x217C	; 0x80217c <hpdir+0x94>
   131dc:	30 91 7d 21 	lds	r19, 0x217D	; 0x80217d <hpdir+0x95>
   131e0:	35 87       	std	Z+13, r19	; 0x0d
   131e2:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   131e4:	40 91 94 21 	lds	r20, 0x2194	; 0x802194 <hpdir+0xac>
   131e8:	50 91 95 21 	lds	r21, 0x2195	; 0x802195 <hpdir+0xad>
   131ec:	60 91 96 21 	lds	r22, 0x2196	; 0x802196 <hpdir+0xae>
   131f0:	70 91 97 21 	lds	r23, 0x2197	; 0x802197 <hpdir+0xaf>
   131f4:	4b 83       	std	Y+3, r20	; 0x03
   131f6:	5c 83       	std	Y+4, r21	; 0x04
   131f8:	6d 83       	std	Y+5, r22	; 0x05
   131fa:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   131fc:	4e e1       	ldi	r20, 0x1E	; 30
   131fe:	50 e0       	ldi	r21, 0x00	; 0
   13200:	68 ee       	ldi	r22, 0xE8	; 232
   13202:	70 e2       	ldi	r23, 0x20	; 32
   13204:	85 51       	subi	r24, 0x15	; 21
   13206:	91 4e       	sbci	r25, 0xE1	; 225
   13208:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <strncpy>
   1320c:	0a c0       	rjmp	.+20     	; 0x13222 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   1320e:	8e eb       	ldi	r24, 0xBE	; 190
   13210:	97 e1       	ldi	r25, 0x17	; 23
   13212:	a0 e0       	ldi	r26, 0x00	; 0
   13214:	ed b7       	in	r30, 0x3d	; 61
   13216:	fe b7       	in	r31, 0x3e	; 62
   13218:	81 83       	std	Z+1, r24	; 0x01
   1321a:	92 83       	std	Z+2, r25	; 0x02
   1321c:	a3 83       	std	Z+3, r26	; 0x03
   1321e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

}
   13222:	cd b7       	in	r28, 0x3d	; 61
   13224:	de b7       	in	r29, 0x3e	; 62
   13226:	23 96       	adiw	r28, 0x03	; 3
   13228:	e4 e0       	ldi	r30, 0x04	; 4
   1322a:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

0001322e <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   1322e:	cf 93       	push	r28
   13230:	df 93       	push	r29
   13232:	ec 01       	movw	r28, r24
   13234:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13236:	41 e0       	ldi	r20, 0x01	; 1
   13238:	50 e0       	ldi	r21, 0x00	; 0
   1323a:	60 e0       	ldi	r22, 0x00	; 0
   1323c:	70 e0       	ldi	r23, 0x00	; 0
   1323e:	d9 d6       	rcall	.+3506   	; 0x13ff2 <hpdir_find_drive>
   13240:	89 2b       	or	r24, r25
   13242:	11 f0       	breq	.+4      	; 0x13248 <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   13244:	ce 01       	movw	r24, r28
   13246:	65 df       	rcall	.-310    	; 0x13112 <hpdir_set_device>
}
   13248:	df 91       	pop	r29
   1324a:	cf 91       	pop	r28
   1324c:	08 95       	ret

0001324e <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   1324e:	4f 92       	push	r4
   13250:	5f 92       	push	r5
   13252:	6f 92       	push	r6
   13254:	7f 92       	push	r7
   13256:	8f 92       	push	r8
   13258:	af 92       	push	r10
   1325a:	bf 92       	push	r11
   1325c:	cf 92       	push	r12
   1325e:	df 92       	push	r13
   13260:	ef 92       	push	r14
   13262:	0f 93       	push	r16
   13264:	1f 93       	push	r17
   13266:	cf 93       	push	r28
   13268:	df 93       	push	r29
   1326a:	00 d0       	rcall	.+0      	; 0x1326c <Post_Config+0x1e>
   1326c:	00 d0       	rcall	.+0      	; 0x1326e <Post_Config+0x20>
   1326e:	1f 92       	push	r1
   13270:	c4 ee       	ldi	r28, 0xE4	; 228
   13272:	de e1       	ldi	r29, 0x1E	; 30
   13274:	88 ee       	ldi	r24, 0xE8	; 232
   13276:	48 2e       	mov	r4, r24
   13278:	80 e2       	ldi	r24, 0x20	; 32
   1327a:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1327c:	a1 2c       	mov	r10, r1
   1327e:	bb 24       	eor	r11, r11
   13280:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13282:	81 e5       	ldi	r24, 0x51	; 81
   13284:	97 e1       	ldi	r25, 0x17	; 23
   13286:	6c 01       	movw	r12, r24
   13288:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   1328a:	88 e8       	ldi	r24, 0x88	; 136
   1328c:	97 e1       	ldi	r25, 0x17	; 23
   1328e:	3c 01       	movw	r6, r24
   13290:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13292:	88 81       	ld	r24, Y
   13294:	88 23       	and	r24, r24
   13296:	09 f4       	brne	.+2      	; 0x1329a <Post_Config+0x4c>
   13298:	57 c0       	rjmp	.+174    	; 0x13348 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   1329a:	83 30       	cpi	r24, 0x03	; 3
   1329c:	f9 f4       	brne	.+62     	; 0x132dc <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1329e:	0f a1       	ldd	r16, Y+39	; 0x27
   132a0:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   132a2:	f8 01       	movw	r30, r16
   132a4:	80 89       	ldd	r24, Z+16	; 0x10
   132a6:	91 89       	ldd	r25, Z+17	; 0x11
   132a8:	81 15       	cp	r24, r1
   132aa:	91 40       	sbci	r25, 0x01	; 1
   132ac:	59 f0       	breq	.+22     	; 0x132c4 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   132ae:	ce 01       	movw	r24, r28
   132b0:	07 96       	adiw	r24, 0x07	; 7
   132b2:	ed b7       	in	r30, 0x3d	; 61
   132b4:	fe b7       	in	r31, 0x3e	; 62
   132b6:	95 83       	std	Z+5, r25	; 0x05
   132b8:	84 83       	std	Z+4, r24	; 0x04
   132ba:	61 82       	std	Z+1, r6	; 0x01
   132bc:	72 82       	std	Z+2, r7	; 0x02
   132be:	83 82       	std	Z+3, r8	; 0x03
   132c0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   132c4:	f8 01       	movw	r30, r16
   132c6:	86 a1       	ldd	r24, Z+38	; 0x26
   132c8:	97 a1       	ldd	r25, Z+39	; 0x27
   132ca:	a0 a5       	ldd	r26, Z+40	; 0x28
   132cc:	b1 a5       	ldd	r27, Z+41	; 0x29
   132ce:	01 96       	adiw	r24, 0x01	; 1
   132d0:	a1 1d       	adc	r26, r1
   132d2:	b1 1d       	adc	r27, r1
   132d4:	8b 83       	std	Y+3, r24	; 0x03
   132d6:	9c 83       	std	Y+4, r25	; 0x04
   132d8:	ad 83       	std	Y+5, r26	; 0x05
   132da:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   132dc:	88 81       	ld	r24, Y
   132de:	81 30       	cpi	r24, 0x01	; 1
   132e0:	99 f5       	brne	.+102    	; 0x13348 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   132e2:	0f a1       	ldd	r16, Y+39	; 0x27
   132e4:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   132e6:	f8 01       	movw	r30, r16
   132e8:	86 81       	ldd	r24, Z+6	; 0x06
   132ea:	97 81       	ldd	r25, Z+7	; 0x07
   132ec:	81 15       	cp	r24, r1
   132ee:	91 40       	sbci	r25, 0x01	; 1
   132f0:	71 f0       	breq	.+28     	; 0x1330e <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   132f2:	f8 01       	movw	r30, r16
   132f4:	b7 82       	std	Z+7, r11	; 0x07
   132f6:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   132f8:	ce 01       	movw	r24, r28
   132fa:	07 96       	adiw	r24, 0x07	; 7
   132fc:	ed b7       	in	r30, 0x3d	; 61
   132fe:	fe b7       	in	r31, 0x3e	; 62
   13300:	95 83       	std	Z+5, r25	; 0x05
   13302:	84 83       	std	Z+4, r24	; 0x04
   13304:	c1 82       	std	Z+1, r12	; 0x01
   13306:	d2 82       	std	Z+2, r13	; 0x02
   13308:	e3 82       	std	Z+3, r14	; 0x03
   1330a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   1330e:	f8 01       	movw	r30, r16
   13310:	20 85       	ldd	r18, Z+8	; 0x08
   13312:	31 85       	ldd	r19, Z+9	; 0x09
   13314:	82 85       	ldd	r24, Z+10	; 0x0a
   13316:	93 85       	ldd	r25, Z+11	; 0x0b
   13318:	28 9f       	mul	r18, r24
   1331a:	a0 01       	movw	r20, r0
   1331c:	29 9f       	mul	r18, r25
   1331e:	50 0d       	add	r21, r0
   13320:	38 9f       	mul	r19, r24
   13322:	50 0d       	add	r21, r0
   13324:	11 24       	eor	r1, r1
   13326:	24 85       	ldd	r18, Z+12	; 0x0c
   13328:	35 85       	ldd	r19, Z+13	; 0x0d
   1332a:	42 9f       	mul	r20, r18
   1332c:	c0 01       	movw	r24, r0
   1332e:	43 9f       	mul	r20, r19
   13330:	90 0d       	add	r25, r0
   13332:	52 9f       	mul	r21, r18
   13334:	90 0d       	add	r25, r0
   13336:	11 24       	eor	r1, r1
   13338:	09 2e       	mov	r0, r25
   1333a:	00 0c       	add	r0, r0
   1333c:	aa 0b       	sbc	r26, r26
   1333e:	bb 0b       	sbc	r27, r27
   13340:	8b 83       	std	Y+3, r24	; 0x03
   13342:	9c 83       	std	Y+4, r25	; 0x04
   13344:	ad 83       	std	Y+5, r26	; 0x05
   13346:	be 83       	std	Y+6, r27	; 0x06
   13348:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1334a:	4c 16       	cp	r4, r28
   1334c:	5d 06       	cpc	r5, r29
   1334e:	09 f0       	breq	.+2      	; 0x13352 <Post_Config+0x104>
   13350:	a0 cf       	rjmp	.-192    	; 0x13292 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13352:	0f 90       	pop	r0
   13354:	0f 90       	pop	r0
   13356:	0f 90       	pop	r0
   13358:	0f 90       	pop	r0
   1335a:	0f 90       	pop	r0
   1335c:	df 91       	pop	r29
   1335e:	cf 91       	pop	r28
   13360:	1f 91       	pop	r17
   13362:	0f 91       	pop	r16
   13364:	ef 90       	pop	r14
   13366:	df 90       	pop	r13
   13368:	cf 90       	pop	r12
   1336a:	bf 90       	pop	r11
   1336c:	af 90       	pop	r10
   1336e:	8f 90       	pop	r8
   13370:	7f 90       	pop	r7
   13372:	6f 90       	pop	r6
   13374:	5f 90       	pop	r5
   13376:	4f 90       	pop	r4
   13378:	08 95       	ret

0001337a <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   1337a:	af e1       	ldi	r26, 0x1F	; 31
   1337c:	b1 e0       	ldi	r27, 0x01	; 1
   1337e:	e3 ec       	ldi	r30, 0xC3	; 195
   13380:	f9 e9       	ldi	r31, 0x99	; 153
   13382:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   13386:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   13388:	6f de       	rcall	.-802    	; 0x13068 <init_Devices>

    printf("Reading: %s\n", name);
   1338a:	ed b7       	in	r30, 0x3d	; 61
   1338c:	fe b7       	in	r31, 0x3e	; 62
   1338e:	15 83       	std	Z+5, r17	; 0x05
   13390:	04 83       	std	Z+4, r16	; 0x04
   13392:	84 e3       	ldi	r24, 0x34	; 52
   13394:	9d e1       	ldi	r25, 0x1D	; 29
   13396:	a0 e0       	ldi	r26, 0x00	; 0
   13398:	81 83       	std	Z+1, r24	; 0x01
   1339a:	92 83       	std	Z+2, r25	; 0x02
   1339c:	a3 83       	std	Z+3, r26	; 0x03
   1339e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    cfg = fopen(name, "rb");
   133a2:	6e ef       	ldi	r22, 0xFE	; 254
   133a4:	78 e0       	ldi	r23, 0x08	; 8
   133a6:	c8 01       	movw	r24, r16
   133a8:	0e 94 d3 7c 	call	0xf9a6	; 0xf9a6 <fopen>
   133ac:	c4 5f       	subi	r28, 0xF4	; 244
   133ae:	de 4f       	sbci	r29, 0xFE	; 254
   133b0:	99 83       	std	Y+1, r25	; 0x01
   133b2:	88 83       	st	Y, r24
   133b4:	cc 50       	subi	r28, 0x0C	; 12
   133b6:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   133b8:	89 2b       	or	r24, r25
   133ba:	09 f4       	brne	.+2      	; 0x133be <Read_Config+0x44>
   133bc:	59 c0       	rjmp	.+178    	; 0x13470 <Read_Config+0xf6>
   133be:	41 2c       	mov	r4, r1
   133c0:	51 2c       	mov	r5, r1
   133c2:	c1 2c       	mov	r12, r1
   133c4:	d1 2c       	mov	r13, r1
   133c6:	c8 5f       	subi	r28, 0xF8	; 248
   133c8:	de 4f       	sbci	r29, 0xFE	; 254
   133ca:	19 82       	std	Y+1, r1	; 0x01
   133cc:	18 82       	st	Y, r1
   133ce:	c8 50       	subi	r28, 0x08	; 8
   133d0:	d1 40       	sbci	r29, 0x01	; 1
   133d2:	61 2c       	mov	r6, r1
   133d4:	71 2c       	mov	r7, r1
   133d6:	c6 5f       	subi	r28, 0xF6	; 246
   133d8:	de 4f       	sbci	r29, 0xFE	; 254
   133da:	19 82       	std	Y+1, r1	; 0x01
   133dc:	18 82       	st	Y, r1
   133de:	ca 50       	subi	r28, 0x0A	; 10
   133e0:	d1 40       	sbci	r29, 0x01	; 1
   133e2:	e1 2c       	mov	r14, r1
   133e4:	f1 2c       	mov	r15, r1
   133e6:	21 2c       	mov	r2, r1
   133e8:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   133ea:	83 e8       	ldi	r24, 0x83	; 131
   133ec:	9a e1       	ldi	r25, 0x1A	; 26
   133ee:	9c 01       	movw	r18, r24
   133f0:	40 e0       	ldi	r20, 0x00	; 0
   133f2:	c2 5f       	subi	r28, 0xF2	; 242
   133f4:	de 4f       	sbci	r29, 0xFE	; 254
   133f6:	28 83       	st	Y, r18
   133f8:	39 83       	std	Y+1, r19	; 0x01
   133fa:	4a 83       	std	Y+2, r20	; 0x02
   133fc:	ce 50       	subi	r28, 0x0E	; 14
   133fe:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13400:	85 ea       	ldi	r24, 0xA5	; 165
   13402:	9a e1       	ldi	r25, 0x1A	; 26
   13404:	9c 01       	movw	r18, r24
   13406:	40 e0       	ldi	r20, 0x00	; 0
   13408:	cf 5e       	subi	r28, 0xEF	; 239
   1340a:	de 4f       	sbci	r29, 0xFE	; 254
   1340c:	28 83       	st	Y, r18
   1340e:	39 83       	std	Y+1, r19	; 0x01
   13410:	4a 83       	std	Y+2, r20	; 0x02
   13412:	c1 51       	subi	r28, 0x11	; 17
   13414:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13416:	85 ed       	ldi	r24, 0xD5	; 213
   13418:	9a e1       	ldi	r25, 0x1A	; 26
   1341a:	9c 01       	movw	r18, r24
   1341c:	40 e0       	ldi	r20, 0x00	; 0
   1341e:	cc 5e       	subi	r28, 0xEC	; 236
   13420:	de 4f       	sbci	r29, 0xFE	; 254
   13422:	28 83       	st	Y, r18
   13424:	39 83       	std	Y+1, r19	; 0x01
   13426:	4a 83       	std	Y+2, r20	; 0x02
   13428:	c4 51       	subi	r28, 0x14	; 20
   1342a:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1342c:	84 e0       	ldi	r24, 0x04	; 4
   1342e:	9b e1       	ldi	r25, 0x1B	; 27
   13430:	9c 01       	movw	r18, r24
   13432:	40 e0       	ldi	r20, 0x00	; 0
   13434:	c9 5e       	subi	r28, 0xE9	; 233
   13436:	de 4f       	sbci	r29, 0xFE	; 254
   13438:	28 83       	st	Y, r18
   1343a:	39 83       	std	Y+1, r19	; 0x01
   1343c:	4a 83       	std	Y+2, r20	; 0x02
   1343e:	c7 51       	subi	r28, 0x17	; 23
   13440:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13442:	84 e3       	ldi	r24, 0x34	; 52
   13444:	9b e1       	ldi	r25, 0x1B	; 27
   13446:	9c 01       	movw	r18, r24
   13448:	40 e0       	ldi	r20, 0x00	; 0
   1344a:	c6 5e       	subi	r28, 0xE6	; 230
   1344c:	de 4f       	sbci	r29, 0xFE	; 254
   1344e:	28 83       	st	Y, r18
   13450:	39 83       	std	Y+1, r19	; 0x01
   13452:	4a 83       	std	Y+2, r20	; 0x02
   13454:	ca 51       	subi	r28, 0x1A	; 26
   13456:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13458:	82 e6       	ldi	r24, 0x62	; 98
   1345a:	9b e1       	ldi	r25, 0x1B	; 27
   1345c:	9c 01       	movw	r18, r24
   1345e:	40 e0       	ldi	r20, 0x00	; 0
   13460:	c3 5e       	subi	r28, 0xE3	; 227
   13462:	de 4f       	sbci	r29, 0xFE	; 254
   13464:	28 83       	st	Y, r18
   13466:	39 83       	std	Y+1, r19	; 0x01
   13468:	4a 83       	std	Y+2, r20	; 0x02
   1346a:	cd 51       	subi	r28, 0x1D	; 29
   1346c:	d1 40       	sbci	r29, 0x01	; 1
   1346e:	26 c0       	rjmp	.+76     	; 0x134bc <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13470:	87 e5       	ldi	r24, 0x57	; 87
   13472:	9e e0       	ldi	r25, 0x0E	; 14
   13474:	0e 94 04 77 	call	0xee08	; 0xee08 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13478:	ed b7       	in	r30, 0x3d	; 61
   1347a:	fe b7       	in	r31, 0x3e	; 62
   1347c:	15 83       	std	Z+5, r17	; 0x05
   1347e:	04 83       	std	Z+4, r16	; 0x04
   13480:	86 e1       	ldi	r24, 0x16	; 22
   13482:	9d e1       	ldi	r25, 0x1D	; 29
   13484:	a0 e0       	ldi	r26, 0x00	; 0
   13486:	81 83       	std	Z+1, r24	; 0x01
   13488:	92 83       	std	Z+2, r25	; 0x02
   1348a:	a3 83       	std	Z+3, r26	; 0x03
   1348c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        set_Config_Defaults();
        return(errors);
   13490:	81 e0       	ldi	r24, 0x01	; 1
   13492:	90 e0       	ldi	r25, 0x00	; 0
   13494:	95 c3       	rjmp	.+1834   	; 0x13bc0 <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13496:	ff ef       	ldi	r31, 0xFF	; 255
   13498:	4f 1a       	sub	r4, r31
   1349a:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   1349c:	4e e7       	ldi	r20, 0x7E	; 126
   1349e:	50 e0       	ldi	r21, 0x00	; 0
   134a0:	9e 01       	movw	r18, r28
   134a2:	28 5f       	subi	r18, 0xF8	; 248
   134a4:	3f 4f       	sbci	r19, 0xFF	; 255
   134a6:	49 01       	movw	r8, r18
   134a8:	b9 01       	movw	r22, r18
   134aa:	ce 01       	movw	r24, r28
   134ac:	88 57       	subi	r24, 0x78	; 120
   134ae:	9f 4f       	sbci	r25, 0xFF	; 255
   134b0:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   134b4:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   134b6:	88 85       	ldd	r24, Y+8	; 0x08
   134b8:	81 11       	cpse	r24, r1
   134ba:	10 c0       	rjmp	.+32     	; 0x134dc <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   134bc:	c4 5f       	subi	r28, 0xF4	; 244
   134be:	de 4f       	sbci	r29, 0xFE	; 254
   134c0:	48 81       	ld	r20, Y
   134c2:	59 81       	ldd	r21, Y+1	; 0x01
   134c4:	cc 50       	subi	r28, 0x0C	; 12
   134c6:	d1 40       	sbci	r29, 0x01	; 1
   134c8:	6e e7       	ldi	r22, 0x7E	; 126
   134ca:	70 e0       	ldi	r23, 0x00	; 0
   134cc:	ce 01       	movw	r24, r28
   134ce:	88 57       	subi	r24, 0x78	; 120
   134d0:	9f 4f       	sbci	r25, 0xFF	; 255
   134d2:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <fgets>
   134d6:	89 2b       	or	r24, r25
   134d8:	f1 f6       	brne	.-68     	; 0x13496 <Read_Config+0x11c>
   134da:	32 c3       	rjmp	.+1636   	; 0x13b40 <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   134dc:	83 32       	cpi	r24, 0x23	; 35
   134de:	71 f3       	breq	.-36     	; 0x134bc <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   134e0:	c4 01       	movw	r24, r8
   134e2:	0e 94 71 91 	call	0x122e2	; 0x122e2 <tok_index>
   134e6:	8f 3f       	cpi	r24, 0xFF	; 255
   134e8:	3f ef       	ldi	r19, 0xFF	; 255
   134ea:	93 07       	cpc	r25, r19
   134ec:	49 f4       	brne	.+18     	; 0x13500 <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   134ee:	ed b7       	in	r30, 0x3d	; 61
   134f0:	fe b7       	in	r31, 0x3e	; 62
   134f2:	57 82       	std	Z+7, r5	; 0x07
   134f4:	46 82       	std	Z+6, r4	; 0x06
   134f6:	95 82       	std	Z+5, r9	; 0x05
   134f8:	84 82       	std	Z+4, r8	; 0x04
   134fa:	84 ef       	ldi	r24, 0xF4	; 244
   134fc:	9c e1       	ldi	r25, 0x1C	; 28
   134fe:	c9 c0       	rjmp	.+402    	; 0x13692 <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13500:	88 0f       	add	r24, r24
   13502:	99 1f       	adc	r25, r25
   13504:	88 0f       	add	r24, r24
   13506:	99 1f       	adc	r25, r25
   13508:	fc 01       	movw	r30, r24
   1350a:	ec 53       	subi	r30, 0x3C	; 60
   1350c:	fe 4f       	sbci	r31, 0xFE	; 254
   1350e:	02 81       	ldd	r16, Z+2	; 0x02
   13510:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13512:	4e e7       	ldi	r20, 0x7E	; 126
   13514:	50 e0       	ldi	r21, 0x00	; 0
   13516:	b4 01       	movw	r22, r8
   13518:	c5 01       	movw	r24, r10
   1351a:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   1351e:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13520:	6a e6       	ldi	r22, 0x6A	; 106
   13522:	7e e0       	ldi	r23, 0x0E	; 14
   13524:	c4 01       	movw	r24, r8
   13526:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1352a:	89 2b       	or	r24, r25
   1352c:	39 f0       	breq	.+14     	; 0x1353c <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   1352e:	4e e7       	ldi	r20, 0x7E	; 126
   13530:	50 e0       	ldi	r21, 0x00	; 0
   13532:	b4 01       	movw	r22, r8
   13534:	c5 01       	movw	r24, r10
   13536:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   1353a:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   1353c:	c4 01       	movw	r24, r8
   1353e:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13542:	01 31       	cpi	r16, 0x11	; 17
   13544:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13546:	19 f4       	brne	.+6      	; 0x1354e <Read_Config+0x1d4>
   13548:	cc dd       	rcall	.-1128   	; 0x130e2 <pop_state>
   1354a:	1c 01       	movw	r2, r24
            continue;
   1354c:	b7 cf       	rjmp	.-146    	; 0x134bc <Read_Config+0x142>
        }

        switch(state)
   1354e:	30 e1       	ldi	r19, 0x10	; 16
   13550:	23 16       	cp	r2, r19
   13552:	31 04       	cpc	r3, r1
   13554:	08 f0       	brcs	.+2      	; 0x13558 <Read_Config+0x1de>
   13556:	de c2       	rjmp	.+1468   	; 0x13b14 <Read_Config+0x79a>
   13558:	f1 01       	movw	r30, r2
   1355a:	ea 53       	subi	r30, 0x3A	; 58
   1355c:	ff 4f       	sbci	r31, 0xFF	; 255
   1355e:	0c 94 54 e1 	jmp	0x1c2a8	; 0x1c2a8 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13562:	0e 30       	cpi	r16, 0x0E	; 14
   13564:	11 05       	cpc	r17, r1
   13566:	09 f4       	brne	.+2      	; 0x1356a <Read_Config+0x1f0>
   13568:	87 c0       	rjmp	.+270    	; 0x13678 <Read_Config+0x2fe>
   1356a:	44 f4       	brge	.+16     	; 0x1357c <Read_Config+0x202>
   1356c:	02 30       	cpi	r16, 0x02	; 2
   1356e:	11 05       	cpc	r17, r1
   13570:	09 f4       	brne	.+2      	; 0x13574 <Read_Config+0x1fa>
   13572:	41 c0       	rjmp	.+130    	; 0x135f6 <Read_Config+0x27c>
   13574:	0c 30       	cpi	r16, 0x0C	; 12
   13576:	11 05       	cpc	r17, r1
   13578:	09 f1       	breq	.+66     	; 0x135bc <Read_Config+0x242>
   1357a:	83 c0       	rjmp	.+262    	; 0x13682 <Read_Config+0x308>
   1357c:	03 32       	cpi	r16, 0x23	; 35
   1357e:	11 05       	cpc	r17, r1
   13580:	e9 f0       	breq	.+58     	; 0x135bc <Read_Config+0x242>
   13582:	04 32       	cpi	r16, 0x24	; 36
   13584:	11 05       	cpc	r17, r1
   13586:	29 f0       	breq	.+10     	; 0x13592 <Read_Config+0x218>
   13588:	00 32       	cpi	r16, 0x20	; 32
   1358a:	11 05       	cpc	r17, r1
   1358c:	09 f0       	breq	.+2      	; 0x13590 <Read_Config+0x216>
   1358e:	79 c0       	rjmp	.+242    	; 0x13682 <Read_Config+0x308>
   13590:	55 c0       	rjmp	.+170    	; 0x1363c <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13592:	80 e0       	ldi	r24, 0x00	; 0
   13594:	90 e0       	ldi	r25, 0x00	; 0
   13596:	8c dd       	rcall	.-1256   	; 0x130b0 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13598:	82 e0       	ldi	r24, 0x02	; 2
   1359a:	90 e0       	ldi	r25, 0x00	; 0
   1359c:	a6 dc       	rcall	.-1716   	; 0x12eea <alloc_device>
   1359e:	6c 01       	movw	r12, r24
   135a0:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   135a2:	09 f4       	brne	.+2      	; 0x135a6 <Read_Config+0x22c>
   135a4:	8b cf       	rjmp	.-234    	; 0x134bc <Read_Config+0x142>
   135a6:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   135a8:	8c 9d       	mul	r24, r12
   135aa:	f0 01       	movw	r30, r0
   135ac:	8d 9d       	mul	r24, r13
   135ae:	f0 0d       	add	r31, r0
   135b0:	11 24       	eor	r1, r1
   135b2:	ec 51       	subi	r30, 0x1C	; 28
   135b4:	f1 4e       	sbci	r31, 0xE1	; 225
   135b6:	67 a0       	ldd	r6, Z+39	; 0x27
   135b8:	70 a4       	ldd	r7, Z+40	; 0x28
   135ba:	19 c0       	rjmp	.+50     	; 0x135ee <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   135bc:	80 e0       	ldi	r24, 0x00	; 0
   135be:	90 e0       	ldi	r25, 0x00	; 0
   135c0:	77 dd       	rcall	.-1298   	; 0x130b0 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   135c2:	83 e0       	ldi	r24, 0x03	; 3
   135c4:	90 e0       	ldi	r25, 0x00	; 0
   135c6:	91 dc       	rcall	.-1758   	; 0x12eea <alloc_device>
   135c8:	6c 01       	movw	r12, r24
   135ca:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   135cc:	c8 16       	cp	r12, r24
   135ce:	d8 06       	cpc	r13, r24
   135d0:	09 f4       	brne	.+2      	; 0x135d4 <Read_Config+0x25a>
   135d2:	74 cf       	rjmp	.-280    	; 0x134bc <Read_Config+0x142>
   135d4:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   135d6:	8c 9d       	mul	r24, r12
   135d8:	f0 01       	movw	r30, r0
   135da:	8d 9d       	mul	r24, r13
   135dc:	f0 0d       	add	r31, r0
   135de:	11 24       	eor	r1, r1
   135e0:	ec 51       	subi	r30, 0x1C	; 28
   135e2:	f1 4e       	sbci	r31, 0xE1	; 225
   135e4:	67 a0       	ldd	r6, Z+39	; 0x27
   135e6:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   135e8:	b4 01       	movw	r22, r8
   135ea:	c6 01       	movw	r24, r12
   135ec:	20 de       	rcall	.-960    	; 0x1322e <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   135ee:	22 24       	eor	r2, r2
   135f0:	23 94       	inc	r2
   135f2:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   135f4:	63 cf       	rjmp	.-314    	; 0x134bc <Read_Config+0x142>
   135f6:	80 e0       	ldi	r24, 0x00	; 0
   135f8:	90 e0       	ldi	r25, 0x00	; 0
   135fa:	5a dd       	rcall	.-1356   	; 0x130b0 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   135fc:	81 e0       	ldi	r24, 0x01	; 1
   135fe:	90 e0       	ldi	r25, 0x00	; 0
   13600:	74 dc       	rcall	.-1816   	; 0x12eea <alloc_device>
   13602:	6c 01       	movw	r12, r24
   13604:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   13606:	c9 16       	cp	r12, r25
   13608:	d9 06       	cpc	r13, r25
   1360a:	09 f4       	brne	.+2      	; 0x1360e <Read_Config+0x294>
   1360c:	57 cf       	rjmp	.-338    	; 0x134bc <Read_Config+0x142>
   1360e:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13610:	8c 9d       	mul	r24, r12
   13612:	f0 01       	movw	r30, r0
   13614:	8d 9d       	mul	r24, r13
   13616:	f0 0d       	add	r31, r0
   13618:	11 24       	eor	r1, r1
   1361a:	ec 51       	subi	r30, 0x1C	; 28
   1361c:	f1 4e       	sbci	r31, 0xE1	; 225
   1361e:	a7 a1       	ldd	r26, Z+39	; 0x27
   13620:	b0 a5       	ldd	r27, Z+40	; 0x28
   13622:	c8 5f       	subi	r28, 0xF8	; 248
   13624:	de 4f       	sbci	r29, 0xFE	; 254
   13626:	b9 83       	std	Y+1, r27	; 0x01
   13628:	a8 83       	st	Y, r26
   1362a:	c8 50       	subi	r28, 0x08	; 8
   1362c:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   1362e:	b4 01       	movw	r22, r8
   13630:	c6 01       	movw	r24, r12
   13632:	fd dd       	rcall	.-1030   	; 0x1322e <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13634:	aa e0       	ldi	r26, 0x0A	; 10
   13636:	2a 2e       	mov	r2, r26
   13638:	31 2c       	mov	r3, r1
   1363a:	40 cf       	rjmp	.-384    	; 0x134bc <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   1363c:	80 e0       	ldi	r24, 0x00	; 0
   1363e:	90 e0       	ldi	r25, 0x00	; 0
   13640:	37 dd       	rcall	.-1426   	; 0x130b0 <push_state>
   13642:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13644:	90 e0       	ldi	r25, 0x00	; 0
   13646:	51 dc       	rcall	.-1886   	; 0x12eea <alloc_device>
   13648:	6c 01       	movw	r12, r24
   1364a:	01 96       	adiw	r24, 0x01	; 1
   1364c:	09 f4       	brne	.+2      	; 0x13650 <Read_Config+0x2d6>
                        if(index == -1)
   1364e:	36 cf       	rjmp	.-404    	; 0x134bc <Read_Config+0x142>
   13650:	8b e2       	ldi	r24, 0x2B	; 43
   13652:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13654:	f0 01       	movw	r30, r0
   13656:	8d 9d       	mul	r24, r13
   13658:	f0 0d       	add	r31, r0
   1365a:	11 24       	eor	r1, r1
   1365c:	ec 51       	subi	r30, 0x1C	; 28
   1365e:	f1 4e       	sbci	r31, 0xE1	; 225
   13660:	27 a1       	ldd	r18, Z+39	; 0x27
   13662:	30 a5       	ldd	r19, Z+40	; 0x28
   13664:	c6 5f       	subi	r28, 0xF6	; 246
   13666:	de 4f       	sbci	r29, 0xFE	; 254
   13668:	39 83       	std	Y+1, r19	; 0x01
   1366a:	28 83       	st	Y, r18
   1366c:	ca 50       	subi	r28, 0x0A	; 10
   1366e:	d1 40       	sbci	r29, 0x01	; 1
   13670:	fe e0       	ldi	r31, 0x0E	; 14
   13672:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13674:	31 2c       	mov	r3, r1
   13676:	22 cf       	rjmp	.-444    	; 0x134bc <Read_Config+0x142>
   13678:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   1367c:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13680:	1d cf       	rjmp	.-454    	; 0x134bc <Read_Config+0x142>
   13682:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13684:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13686:	57 82       	std	Z+7, r5	; 0x07
   13688:	46 82       	std	Z+6, r4	; 0x06
   1368a:	b5 82       	std	Z+5, r11	; 0x05
   1368c:	a4 82       	std	Z+4, r10	; 0x04
   1368e:	82 ed       	ldi	r24, 0xD2	; 210
   13690:	9c e1       	ldi	r25, 0x1C	; 28
   13692:	a0 e0       	ldi	r26, 0x00	; 0
   13694:	81 83       	std	Z+1, r24	; 0x01
   13696:	92 83       	std	Z+2, r25	; 0x02
   13698:	a3 83       	std	Z+3, r26	; 0x03
   1369a:	4c c2       	rjmp	.+1176   	; 0x13b34 <Read_Config+0x7ba>
   1369c:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   1369e:	11 05       	cpc	r17, r1
   136a0:	39 f4       	brne	.+14     	; 0x136b0 <Read_Config+0x336>
   136a2:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   136a4:	90 e0       	ldi	r25, 0x00	; 0
   136a6:	04 dd       	rcall	.-1528   	; 0x130b0 <push_state>
   136a8:	ef e0       	ldi	r30, 0x0F	; 15
   136aa:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   136ac:	31 2c       	mov	r3, r1
   136ae:	06 cf       	rjmp	.-500    	; 0x134bc <Read_Config+0x142>
   136b0:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   136b2:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   136b4:	57 82       	std	Z+7, r5	; 0x07
   136b6:	46 82       	std	Z+6, r4	; 0x06
   136b8:	b5 82       	std	Z+5, r11	; 0x05
   136ba:	a4 82       	std	Z+4, r10	; 0x04
   136bc:	88 ea       	ldi	r24, 0xA8	; 168
   136be:	9c e1       	ldi	r25, 0x1C	; 28
   136c0:	e8 cf       	rjmp	.-48     	; 0x13692 <Read_Config+0x318>
   136c2:	01 30       	cpi	r16, 0x01	; 1
   136c4:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   136c6:	b1 f4       	brne	.+44     	; 0x136f4 <Read_Config+0x37a>
   136c8:	6f 71       	andi	r22, 0x1F	; 31
   136ca:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   136cc:	8c 9d       	mul	r24, r12
   136ce:	f0 01       	movw	r30, r0
   136d0:	8d 9d       	mul	r24, r13
   136d2:	f0 0d       	add	r31, r0
   136d4:	11 24       	eor	r1, r1
   136d6:	ec 51       	subi	r30, 0x1C	; 28
   136d8:	f1 4e       	sbci	r31, 0xE1	; 225
   136da:	61 83       	std	Z+1, r22	; 0x01
   136dc:	c6 5f       	subi	r28, 0xF6	; 246
   136de:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   136e0:	a8 81       	ld	r26, Y
   136e2:	b9 81       	ldd	r27, Y+1	; 0x01
   136e4:	ca 50       	subi	r28, 0x0A	; 10
   136e6:	d1 40       	sbci	r29, 0x01	; 1
   136e8:	6c 93       	st	X, r22
   136ea:	8f ef       	ldi	r24, 0xFF	; 255
   136ec:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   136ee:	fd 01       	movw	r30, r26
   136f0:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   136f2:	e4 ce       	rjmp	.-568    	; 0x134bc <Read_Config+0x142>
   136f4:	ed b7       	in	r30, 0x3d	; 61
   136f6:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   136f8:	57 82       	std	Z+7, r5	; 0x07
   136fa:	46 82       	std	Z+6, r4	; 0x06
   136fc:	b5 82       	std	Z+5, r11	; 0x05
   136fe:	a4 82       	std	Z+4, r10	; 0x04
   13700:	87 e7       	ldi	r24, 0x77	; 119
   13702:	9c e1       	ldi	r25, 0x1C	; 28
   13704:	c6 cf       	rjmp	.-116    	; 0x13692 <Read_Config+0x318>
   13706:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13708:	11 05       	cpc	r17, r1
   1370a:	d9 f0       	breq	.+54     	; 0x13742 <Read_Config+0x3c8>
   1370c:	6c f4       	brge	.+26     	; 0x13728 <Read_Config+0x3ae>
   1370e:	09 30       	cpi	r16, 0x09	; 9
   13710:	11 05       	cpc	r17, r1
   13712:	f1 f0       	breq	.+60     	; 0x13750 <Read_Config+0x3d6>
   13714:	0b 30       	cpi	r16, 0x0B	; 11
   13716:	11 05       	cpc	r17, r1
   13718:	49 f5       	brne	.+82     	; 0x1376c <Read_Config+0x3f2>
   1371a:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   1371c:	90 e0       	ldi	r25, 0x00	; 0
   1371e:	c8 dc       	rcall	.-1648   	; 0x130b0 <push_state>
   13720:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13722:	25 2e       	mov	r2, r21
   13724:	31 2c       	mov	r3, r1
   13726:	ca ce       	rjmp	.-620    	; 0x134bc <Read_Config+0x142>
                        break;
   13728:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1372a:	11 05       	cpc	r17, r1
   1372c:	c1 f0       	breq	.+48     	; 0x1375e <Read_Config+0x3e4>
   1372e:	0a 32       	cpi	r16, 0x2A	; 42
   13730:	11 05       	cpc	r17, r1
   13732:	e1 f4       	brne	.+56     	; 0x1376c <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13734:	81 e0       	ldi	r24, 0x01	; 1
   13736:	90 e0       	ldi	r25, 0x00	; 0
   13738:	bb dc       	rcall	.-1674   	; 0x130b0 <push_state>
                        state = SS80_VOLUME;
   1373a:	36 e0       	ldi	r19, 0x06	; 6
   1373c:	23 2e       	mov	r2, r19
   1373e:	31 2c       	mov	r3, r1
                        break;
   13740:	bd ce       	rjmp	.-646    	; 0x134bc <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13742:	81 e0       	ldi	r24, 0x01	; 1
   13744:	90 e0       	ldi	r25, 0x00	; 0
   13746:	b4 dc       	rcall	.-1688   	; 0x130b0 <push_state>
                        state = SS80_HEADER;
   13748:	72 e0       	ldi	r23, 0x02	; 2
   1374a:	27 2e       	mov	r2, r23
   1374c:	31 2c       	mov	r3, r1
                        break;
   1374e:	b6 ce       	rjmp	.-660    	; 0x134bc <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   13750:	81 e0       	ldi	r24, 0x01	; 1
   13752:	90 e0       	ldi	r25, 0x00	; 0
   13754:	ad dc       	rcall	.-1702   	; 0x130b0 <push_state>
   13756:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   13758:	26 2e       	mov	r2, r22
   1375a:	31 2c       	mov	r3, r1
   1375c:	af ce       	rjmp	.-674    	; 0x134bc <Read_Config+0x142>
                        break;
   1375e:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13760:	90 e0       	ldi	r25, 0x00	; 0
   13762:	a6 dc       	rcall	.-1716   	; 0x130b0 <push_state>
   13764:	45 e0       	ldi	r20, 0x05	; 5
   13766:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   13768:	31 2c       	mov	r3, r1
   1376a:	a8 ce       	rjmp	.-688    	; 0x134bc <Read_Config+0x142>
   1376c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1376e:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13770:	57 82       	std	Z+7, r5	; 0x07
   13772:	46 82       	std	Z+6, r4	; 0x06
   13774:	b5 82       	std	Z+5, r11	; 0x05
   13776:	a4 82       	std	Z+4, r10	; 0x04
   13778:	8a e4       	ldi	r24, 0x4A	; 74
   1377a:	9c e1       	ldi	r25, 0x1C	; 28
   1377c:	8a cf       	rjmp	.-236    	; 0x13692 <Read_Config+0x318>
   1377e:	02 31       	cpi	r16, 0x12	; 18
   13780:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13782:	f1 f0       	breq	.+60     	; 0x137c0 <Read_Config+0x446>
   13784:	0f 31       	cpi	r16, 0x1F	; 31
   13786:	11 05       	cpc	r17, r1
   13788:	79 f0       	breq	.+30     	; 0x137a8 <Read_Config+0x42e>
   1378a:	01 30       	cpi	r16, 0x01	; 1
   1378c:	11 05       	cpc	r17, r1
   1378e:	e9 f4       	brne	.+58     	; 0x137ca <Read_Config+0x450>
   13790:	6f 71       	andi	r22, 0x1F	; 31
   13792:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13794:	8c 9d       	mul	r24, r12
   13796:	f0 01       	movw	r30, r0
   13798:	8d 9d       	mul	r24, r13
   1379a:	f0 0d       	add	r31, r0
   1379c:	11 24       	eor	r1, r1
   1379e:	ec 51       	subi	r30, 0x1C	; 28
   137a0:	f1 4e       	sbci	r31, 0xE1	; 225
   137a2:	61 83       	std	Z+1, r22	; 0x01
   137a4:	d3 01       	movw	r26, r6
   137a6:	37 c1       	rjmp	.+622    	; 0x13a16 <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   137a8:	67 70       	andi	r22, 0x07	; 7
   137aa:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   137ac:	8c 9d       	mul	r24, r12
   137ae:	f0 01       	movw	r30, r0
   137b0:	8d 9d       	mul	r24, r13
   137b2:	f0 0d       	add	r31, r0
   137b4:	11 24       	eor	r1, r1
   137b6:	ec 51       	subi	r30, 0x1C	; 28
   137b8:	f1 4e       	sbci	r31, 0xE1	; 225
   137ba:	62 83       	std	Z+2, r22	; 0x02
   137bc:	f3 01       	movw	r30, r6
   137be:	2d c1       	rjmp	.+602    	; 0x13a1a <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   137c0:	c4 01       	movw	r24, r8
   137c2:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   137c6:	f3 01       	movw	r30, r6
   137c8:	33 c1       	rjmp	.+614    	; 0x13a30 <Read_Config+0x6b6>
   137ca:	ed b7       	in	r30, 0x3d	; 61
   137cc:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   137ce:	57 82       	std	Z+7, r5	; 0x07
   137d0:	46 82       	std	Z+6, r4	; 0x06
   137d2:	b5 82       	std	Z+5, r11	; 0x05
   137d4:	a4 82       	std	Z+4, r10	; 0x04
   137d6:	8c e1       	ldi	r24, 0x1C	; 28
   137d8:	9c e1       	ldi	r25, 0x1C	; 28
   137da:	5b cf       	rjmp	.-330    	; 0x13692 <Read_Config+0x318>
   137dc:	07 31       	cpi	r16, 0x17	; 23
   137de:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   137e0:	21 f4       	brne	.+8      	; 0x137ea <Read_Config+0x470>
   137e2:	96 2f       	mov	r25, r22
   137e4:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   137e6:	f3 01       	movw	r30, r6
   137e8:	3f c1       	rjmp	.+638    	; 0x13a68 <Read_Config+0x6ee>
   137ea:	ed b7       	in	r30, 0x3d	; 61
   137ec:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   137ee:	57 82       	std	Z+7, r5	; 0x07
   137f0:	46 82       	std	Z+6, r4	; 0x06
   137f2:	b5 82       	std	Z+5, r11	; 0x05
   137f4:	a4 82       	std	Z+4, r10	; 0x04
   137f6:	8e ee       	ldi	r24, 0xEE	; 238
   137f8:	9b e1       	ldi	r25, 0x1B	; 27
   137fa:	4b cf       	rjmp	.-362    	; 0x13692 <Read_Config+0x318>
   137fc:	06 32       	cpi	r16, 0x26	; 38
   137fe:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13800:	71 f0       	breq	.+28     	; 0x1381e <Read_Config+0x4a4>
   13802:	08 32       	cpi	r16, 0x28	; 40
   13804:	11 05       	cpc	r17, r1
   13806:	39 f0       	breq	.+14     	; 0x13816 <Read_Config+0x49c>
   13808:	05 32       	cpi	r16, 0x25	; 37
   1380a:	11 05       	cpc	r17, r1
   1380c:	59 f4       	brne	.+22     	; 0x13824 <Read_Config+0x4aa>
   1380e:	96 2f       	mov	r25, r22
   13810:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13812:	f3 01       	movw	r30, r6
   13814:	5c c1       	rjmp	.+696    	; 0x13ace <Read_Config+0x754>
   13816:	96 2f       	mov	r25, r22
   13818:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   1381a:	f3 01       	movw	r30, r6
   1381c:	55 c1       	rjmp	.+682    	; 0x13ac8 <Read_Config+0x74e>
   1381e:	f3 01       	movw	r30, r6
   13820:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13822:	4c ce       	rjmp	.-872    	; 0x134bc <Read_Config+0x142>
   13824:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13826:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13828:	57 82       	std	Z+7, r5	; 0x07
   1382a:	46 82       	std	Z+6, r4	; 0x06
   1382c:	b5 82       	std	Z+5, r11	; 0x05
   1382e:	a4 82       	std	Z+4, r10	; 0x04
   13830:	8c eb       	ldi	r24, 0xBC	; 188
   13832:	9b e1       	ldi	r25, 0x1B	; 27
   13834:	2e cf       	rjmp	.-420    	; 0x13692 <Read_Config+0x318>
   13836:	0a 30       	cpi	r16, 0x0A	; 10
   13838:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1383a:	09 f4       	brne	.+2      	; 0x1383e <Read_Config+0x4c4>
   1383c:	45 c0       	rjmp	.+138    	; 0x138c8 <Read_Config+0x54e>
   1383e:	d4 f4       	brge	.+52     	; 0x13874 <Read_Config+0x4fa>
   13840:	05 30       	cpi	r16, 0x05	; 5
   13842:	11 05       	cpc	r17, r1
   13844:	d1 f1       	breq	.+116    	; 0x138ba <Read_Config+0x540>
   13846:	64 f4       	brge	.+24     	; 0x13860 <Read_Config+0x4e6>
   13848:	01 15       	cp	r16, r1
   1384a:	11 05       	cpc	r17, r1
   1384c:	09 f4       	brne	.+2      	; 0x13850 <Read_Config+0x4d6>
   1384e:	40 c0       	rjmp	.+128    	; 0x138d0 <Read_Config+0x556>
   13850:	04 30       	cpi	r16, 0x04	; 4
   13852:	11 05       	cpc	r17, r1
   13854:	09 f0       	breq	.+2      	; 0x13858 <Read_Config+0x4de>
   13856:	46 c0       	rjmp	.+140    	; 0x138e4 <Read_Config+0x56a>
   13858:	f3 01       	movw	r30, r6
   1385a:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1385c:	75 8b       	std	Z+21, r23	; 0x15
   1385e:	2e ce       	rjmp	.-932    	; 0x134bc <Read_Config+0x142>
   13860:	06 30       	cpi	r16, 0x06	; 6
                        break;
   13862:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13864:	71 f1       	breq	.+92     	; 0x138c2 <Read_Config+0x548>
   13866:	07 30       	cpi	r16, 0x07	; 7
   13868:	11 05       	cpc	r17, r1
   1386a:	e1 f5       	brne	.+120    	; 0x138e4 <Read_Config+0x56a>
   1386c:	f3 01       	movw	r30, r6
   1386e:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13870:	71 8b       	std	Z+17, r23	; 0x11
   13872:	24 ce       	rjmp	.-952    	; 0x134bc <Read_Config+0x142>
   13874:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   13876:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13878:	79 f1       	breq	.+94     	; 0x138d8 <Read_Config+0x55e>
   1387a:	4c f4       	brge	.+18     	; 0x1388e <Read_Config+0x514>
   1387c:	0f 30       	cpi	r16, 0x0F	; 15
   1387e:	11 05       	cpc	r17, r1
   13880:	b1 f0       	breq	.+44     	; 0x138ae <Read_Config+0x534>
   13882:	03 31       	cpi	r16, 0x13	; 19
   13884:	11 05       	cpc	r17, r1
   13886:	71 f5       	brne	.+92     	; 0x138e4 <Read_Config+0x56a>
   13888:	f3 01       	movw	r30, r6
   1388a:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   1388c:	17 ce       	rjmp	.-978    	; 0x134bc <Read_Config+0x142>
   1388e:	01 32       	cpi	r16, 0x21	; 33
                        break;
   13890:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13892:	29 f1       	breq	.+74     	; 0x138de <Read_Config+0x564>
   13894:	09 32       	cpi	r16, 0x29	; 41
   13896:	11 05       	cpc	r17, r1
   13898:	39 f0       	breq	.+14     	; 0x138a8 <Read_Config+0x52e>
   1389a:	0e 31       	cpi	r16, 0x1E	; 30
   1389c:	11 05       	cpc	r17, r1
   1389e:	11 f5       	brne	.+68     	; 0x138e4 <Read_Config+0x56a>
   138a0:	f3 01       	movw	r30, r6
   138a2:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   138a4:	71 8f       	std	Z+25, r23	; 0x19
   138a6:	0a ce       	rjmp	.-1004   	; 0x134bc <Read_Config+0x142>
   138a8:	f3 01       	movw	r30, r6
                        break;
   138aa:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   138ac:	07 ce       	rjmp	.-1010   	; 0x134bc <Read_Config+0x142>
   138ae:	f3 01       	movw	r30, r6
                        break;
   138b0:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   138b2:	75 87       	std	Z+13, r23	; 0x0d
   138b4:	86 87       	std	Z+14, r24	; 0x0e
   138b6:	97 87       	std	Z+15, r25	; 0x0f
   138b8:	01 ce       	rjmp	.-1022   	; 0x134bc <Read_Config+0x142>
   138ba:	61 70       	andi	r22, 0x01	; 1
                        break;
   138bc:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   138be:	62 8b       	std	Z+18, r22	; 0x12
   138c0:	fd cd       	rjmp	.-1030   	; 0x134bc <Read_Config+0x142>
   138c2:	f3 01       	movw	r30, r6
                        break;
   138c4:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   138c6:	fa cd       	rjmp	.-1036   	; 0x134bc <Read_Config+0x142>
   138c8:	f3 01       	movw	r30, r6
                        break;
   138ca:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   138cc:	77 8b       	std	Z+23, r23	; 0x17
   138ce:	f6 cd       	rjmp	.-1044   	; 0x134bc <Read_Config+0x142>
   138d0:	f3 01       	movw	r30, r6
                        break;
   138d2:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   138d4:	73 8f       	std	Z+27, r23	; 0x1b
   138d6:	f2 cd       	rjmp	.-1052   	; 0x134bc <Read_Config+0x142>
   138d8:	f3 01       	movw	r30, r6
                        break;
   138da:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   138dc:	ef cd       	rjmp	.-1058   	; 0x134bc <Read_Config+0x142>
   138de:	f3 01       	movw	r30, r6
                        break;
   138e0:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   138e2:	ec cd       	rjmp	.-1064   	; 0x134bc <Read_Config+0x142>
   138e4:	ed b7       	in	r30, 0x3d	; 61
                        break;
   138e6:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   138e8:	57 82       	std	Z+7, r5	; 0x07
   138ea:	46 82       	std	Z+6, r4	; 0x06
   138ec:	b5 82       	std	Z+5, r11	; 0x05
   138ee:	a4 82       	std	Z+4, r10	; 0x04
   138f0:	80 e9       	ldi	r24, 0x90	; 144
   138f2:	9b e1       	ldi	r25, 0x1B	; 27
   138f4:	ce ce       	rjmp	.-612    	; 0x13692 <Read_Config+0x318>
   138f6:	0a 31       	cpi	r16, 0x1A	; 26
   138f8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   138fa:	b9 f0       	breq	.+46     	; 0x1392a <Read_Config+0x5b0>
   138fc:	64 f4       	brge	.+24     	; 0x13916 <Read_Config+0x59c>
   138fe:	08 31       	cpi	r16, 0x18	; 24
   13900:	11 05       	cpc	r17, r1
   13902:	e1 f0       	breq	.+56     	; 0x1393c <Read_Config+0x5c2>
   13904:	09 31       	cpi	r16, 0x19	; 25
   13906:	11 05       	cpc	r17, r1
   13908:	e1 f4       	brne	.+56     	; 0x13942 <Read_Config+0x5c8>
   1390a:	f3 01       	movw	r30, r6
   1390c:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   1390e:	77 a3       	std	Z+39, r23	; 0x27
   13910:	80 a7       	std	Z+40, r24	; 0x28
   13912:	91 a7       	std	Z+41, r25	; 0x29
   13914:	d3 cd       	rjmp	.-1114   	; 0x134bc <Read_Config+0x142>
   13916:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   13918:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1391a:	69 f0       	breq	.+26     	; 0x13936 <Read_Config+0x5bc>
   1391c:	0d 31       	cpi	r16, 0x1D	; 29
   1391e:	11 05       	cpc	r17, r1
   13920:	81 f4       	brne	.+32     	; 0x13942 <Read_Config+0x5c8>
   13922:	f3 01       	movw	r30, r6
   13924:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13926:	75 a3       	std	Z+37, r23	; 0x25
   13928:	c9 cd       	rjmp	.-1134   	; 0x134bc <Read_Config+0x142>
   1392a:	f3 01       	movw	r30, r6
                        break;
   1392c:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   1392e:	70 a3       	std	Z+32, r23	; 0x20
   13930:	81 a3       	std	Z+33, r24	; 0x21
   13932:	92 a3       	std	Z+34, r25	; 0x22
   13934:	c3 cd       	rjmp	.-1146   	; 0x134bc <Read_Config+0x142>
   13936:	f3 01       	movw	r30, r6
                        break;
   13938:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   1393a:	c0 cd       	rjmp	.-1152   	; 0x134bc <Read_Config+0x142>
   1393c:	f3 01       	movw	r30, r6
                        break;
   1393e:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13940:	bd cd       	rjmp	.-1158   	; 0x134bc <Read_Config+0x142>
   13942:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13944:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13946:	57 82       	std	Z+7, r5	; 0x07
   13948:	46 82       	std	Z+6, r4	; 0x06
   1394a:	b5 82       	std	Z+5, r11	; 0x05
   1394c:	a4 82       	std	Z+4, r10	; 0x04
   1394e:	c3 5e       	subi	r28, 0xE3	; 227
   13950:	de 4f       	sbci	r29, 0xFE	; 254
   13952:	28 81       	ld	r18, Y
   13954:	39 81       	ldd	r19, Y+1	; 0x01
   13956:	4a 81       	ldd	r20, Y+2	; 0x02
   13958:	cd 51       	subi	r28, 0x1D	; 29
   1395a:	d1 40       	sbci	r29, 0x01	; 1
   1395c:	e8 c0       	rjmp	.+464    	; 0x13b2e <Read_Config+0x7b4>
   1395e:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13960:	11 05       	cpc	r17, r1
   13962:	a1 f0       	breq	.+40     	; 0x1398c <Read_Config+0x612>
   13964:	05 31       	cpi	r16, 0x15	; 21
   13966:	11 05       	cpc	r17, r1
   13968:	51 f0       	breq	.+20     	; 0x1397e <Read_Config+0x604>
   1396a:	09 30       	cpi	r16, 0x09	; 9
   1396c:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   1396e:	a9 f4       	brne	.+42     	; 0x1399a <Read_Config+0x620>
   13970:	8a e0       	ldi	r24, 0x0A	; 10
   13972:	90 e0       	ldi	r25, 0x00	; 0
   13974:	9d db       	rcall	.-2246   	; 0x130b0 <push_state>
                        state = AMIGO_CONFIG;
   13976:	9c e0       	ldi	r25, 0x0C	; 12
   13978:	29 2e       	mov	r2, r25
   1397a:	31 2c       	mov	r3, r1
                        break;
   1397c:	9f cd       	rjmp	.-1218   	; 0x134bc <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   1397e:	8a e0       	ldi	r24, 0x0A	; 10
   13980:	90 e0       	ldi	r25, 0x00	; 0
   13982:	96 db       	rcall	.-2260   	; 0x130b0 <push_state>
   13984:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   13986:	22 2e       	mov	r2, r18
   13988:	31 2c       	mov	r3, r1
   1398a:	98 cd       	rjmp	.-1232   	; 0x134bc <Read_Config+0x142>
                        break;
   1398c:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   1398e:	90 e0       	ldi	r25, 0x00	; 0
   13990:	8f db       	rcall	.-2274   	; 0x130b0 <push_state>
   13992:	8d e0       	ldi	r24, 0x0D	; 13
   13994:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   13996:	31 2c       	mov	r3, r1
   13998:	91 cd       	rjmp	.-1246   	; 0x134bc <Read_Config+0x142>
   1399a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1399c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   1399e:	57 82       	std	Z+7, r5	; 0x07
   139a0:	46 82       	std	Z+6, r4	; 0x06
   139a2:	b5 82       	std	Z+5, r11	; 0x05
   139a4:	a4 82       	std	Z+4, r10	; 0x04
   139a6:	c6 5e       	subi	r28, 0xE6	; 230
   139a8:	de 4f       	sbci	r29, 0xFE	; 254
   139aa:	28 81       	ld	r18, Y
   139ac:	39 81       	ldd	r19, Y+1	; 0x01
   139ae:	4a 81       	ldd	r20, Y+2	; 0x02
   139b0:	ca 51       	subi	r28, 0x1A	; 26
   139b2:	d1 40       	sbci	r29, 0x01	; 1
   139b4:	bc c0       	rjmp	.+376    	; 0x13b2e <Read_Config+0x7b4>
   139b6:	00 31       	cpi	r16, 0x10	; 16
   139b8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   139ba:	09 f4       	brne	.+2      	; 0x139be <Read_Config+0x644>
   139bc:	7f cd       	rjmp	.-1282   	; 0x134bc <Read_Config+0x142>
   139be:	a4 f4       	brge	.+40     	; 0x139e8 <Read_Config+0x66e>
   139c0:	01 30       	cpi	r16, 0x01	; 1
   139c2:	11 05       	cpc	r17, r1
   139c4:	c1 f5       	brne	.+112    	; 0x13a36 <Read_Config+0x6bc>
   139c6:	6f 71       	andi	r22, 0x1F	; 31
   139c8:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   139ca:	8c 9d       	mul	r24, r12
   139cc:	f0 01       	movw	r30, r0
   139ce:	8d 9d       	mul	r24, r13
   139d0:	f0 0d       	add	r31, r0
   139d2:	11 24       	eor	r1, r1
   139d4:	ec 51       	subi	r30, 0x1C	; 28
   139d6:	f1 4e       	sbci	r31, 0xE1	; 225
   139d8:	61 83       	std	Z+1, r22	; 0x01
   139da:	c8 5f       	subi	r28, 0xF8	; 248
   139dc:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   139de:	a8 81       	ld	r26, Y
   139e0:	b9 81       	ldd	r27, Y+1	; 0x01
   139e2:	c8 50       	subi	r28, 0x08	; 8
   139e4:	d1 40       	sbci	r29, 0x01	; 1
   139e6:	17 c0       	rjmp	.+46     	; 0x13a16 <Read_Config+0x69c>
   139e8:	02 31       	cpi	r16, 0x12	; 18
   139ea:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   139ec:	c1 f0       	breq	.+48     	; 0x13a1e <Read_Config+0x6a4>
   139ee:	0f 31       	cpi	r16, 0x1F	; 31
   139f0:	11 05       	cpc	r17, r1
   139f2:	09 f5       	brne	.+66     	; 0x13a36 <Read_Config+0x6bc>
   139f4:	67 70       	andi	r22, 0x07	; 7
   139f6:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   139f8:	8c 9d       	mul	r24, r12
   139fa:	f0 01       	movw	r30, r0
   139fc:	8d 9d       	mul	r24, r13
   139fe:	f0 0d       	add	r31, r0
   13a00:	11 24       	eor	r1, r1
   13a02:	ec 51       	subi	r30, 0x1C	; 28
   13a04:	f1 4e       	sbci	r31, 0xE1	; 225
   13a06:	62 83       	std	Z+2, r22	; 0x02
   13a08:	c8 5f       	subi	r28, 0xF8	; 248
   13a0a:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13a0c:	e8 81       	ld	r30, Y
   13a0e:	f9 81       	ldd	r31, Y+1	; 0x01
   13a10:	c8 50       	subi	r28, 0x08	; 8
   13a12:	d1 40       	sbci	r29, 0x01	; 1
   13a14:	02 c0       	rjmp	.+4      	; 0x13a1a <Read_Config+0x6a0>
   13a16:	6c 93       	st	X, r22
   13a18:	51 cd       	rjmp	.-1374   	; 0x134bc <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13a1a:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13a1c:	4f cd       	rjmp	.-1378   	; 0x134bc <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13a1e:	c4 01       	movw	r24, r8
                        break;
   13a20:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13a24:	c8 5f       	subi	r28, 0xF8	; 248
   13a26:	de 4f       	sbci	r29, 0xFE	; 254
   13a28:	e8 81       	ld	r30, Y
   13a2a:	f9 81       	ldd	r31, Y+1	; 0x01
   13a2c:	c8 50       	subi	r28, 0x08	; 8
   13a2e:	d1 40       	sbci	r29, 0x01	; 1
   13a30:	93 83       	std	Z+3, r25	; 0x03
   13a32:	82 83       	std	Z+2, r24	; 0x02
   13a34:	43 cd       	rjmp	.-1402   	; 0x134bc <Read_Config+0x142>
   13a36:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a38:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13a3a:	57 82       	std	Z+7, r5	; 0x07
   13a3c:	46 82       	std	Z+6, r4	; 0x06
   13a3e:	b5 82       	std	Z+5, r11	; 0x05
   13a40:	a4 82       	std	Z+4, r10	; 0x04
   13a42:	c9 5e       	subi	r28, 0xE9	; 233
   13a44:	de 4f       	sbci	r29, 0xFE	; 254
   13a46:	28 81       	ld	r18, Y
   13a48:	39 81       	ldd	r19, Y+1	; 0x01
   13a4a:	4a 81       	ldd	r20, Y+2	; 0x02
   13a4c:	c7 51       	subi	r28, 0x17	; 23
   13a4e:	d1 40       	sbci	r29, 0x01	; 1
   13a50:	6e c0       	rjmp	.+220    	; 0x13b2e <Read_Config+0x7b4>
   13a52:	07 31       	cpi	r16, 0x17	; 23
   13a54:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13a56:	59 f4       	brne	.+22     	; 0x13a6e <Read_Config+0x6f4>
   13a58:	96 2f       	mov	r25, r22
   13a5a:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   13a5c:	c8 5f       	subi	r28, 0xF8	; 248
   13a5e:	de 4f       	sbci	r29, 0xFE	; 254
   13a60:	e8 81       	ld	r30, Y
   13a62:	f9 81       	ldd	r31, Y+1	; 0x01
   13a64:	c8 50       	subi	r28, 0x08	; 8
   13a66:	d1 40       	sbci	r29, 0x01	; 1
   13a68:	94 83       	std	Z+4, r25	; 0x04
   13a6a:	85 83       	std	Z+5, r24	; 0x05
   13a6c:	27 cd       	rjmp	.-1458   	; 0x134bc <Read_Config+0x142>
   13a6e:	ed b7       	in	r30, 0x3d	; 61
   13a70:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13a72:	57 82       	std	Z+7, r5	; 0x07
   13a74:	46 82       	std	Z+6, r4	; 0x06
   13a76:	b5 82       	std	Z+5, r11	; 0x05
   13a78:	a4 82       	std	Z+4, r10	; 0x04
   13a7a:	cc 5e       	subi	r28, 0xEC	; 236
   13a7c:	de 4f       	sbci	r29, 0xFE	; 254
   13a7e:	28 81       	ld	r18, Y
   13a80:	39 81       	ldd	r19, Y+1	; 0x01
   13a82:	4a 81       	ldd	r20, Y+2	; 0x02
   13a84:	c4 51       	subi	r28, 0x14	; 20
   13a86:	d1 40       	sbci	r29, 0x01	; 1
   13a88:	52 c0       	rjmp	.+164    	; 0x13b2e <Read_Config+0x7b4>
   13a8a:	0d 30       	cpi	r16, 0x0D	; 13
   13a8c:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13a8e:	59 f1       	breq	.+86     	; 0x13ae6 <Read_Config+0x76c>
   13a90:	64 f4       	brge	.+24     	; 0x13aaa <Read_Config+0x730>
   13a92:	08 30       	cpi	r16, 0x08	; 8
   13a94:	11 05       	cpc	r17, r1
   13a96:	81 f5       	brne	.+96     	; 0x13af8 <Read_Config+0x77e>
   13a98:	96 2f       	mov	r25, r22
   13a9a:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13a9c:	c8 5f       	subi	r28, 0xF8	; 248
   13a9e:	de 4f       	sbci	r29, 0xFE	; 254
   13aa0:	e8 81       	ld	r30, Y
   13aa2:	f9 81       	ldd	r31, Y+1	; 0x01
   13aa4:	c8 50       	subi	r28, 0x08	; 8
   13aa6:	d1 40       	sbci	r29, 0x01	; 1
   13aa8:	0f c0       	rjmp	.+30     	; 0x13ac8 <Read_Config+0x74e>
   13aaa:	06 31       	cpi	r16, 0x16	; 22
   13aac:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13aae:	91 f0       	breq	.+36     	; 0x13ad4 <Read_Config+0x75a>
   13ab0:	02 32       	cpi	r16, 0x22	; 34
   13ab2:	11 05       	cpc	r17, r1
   13ab4:	09 f5       	brne	.+66     	; 0x13af8 <Read_Config+0x77e>
   13ab6:	96 2f       	mov	r25, r22
   13ab8:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13aba:	c8 5f       	subi	r28, 0xF8	; 248
   13abc:	de 4f       	sbci	r29, 0xFE	; 254
   13abe:	e8 81       	ld	r30, Y
   13ac0:	f9 81       	ldd	r31, Y+1	; 0x01
   13ac2:	c8 50       	subi	r28, 0x08	; 8
   13ac4:	d1 40       	sbci	r29, 0x01	; 1
   13ac6:	03 c0       	rjmp	.+6      	; 0x13ace <Read_Config+0x754>
   13ac8:	96 83       	std	Z+6, r25	; 0x06
   13aca:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13acc:	f7 cc       	rjmp	.-1554   	; 0x134bc <Read_Config+0x142>
   13ace:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13ad0:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13ad2:	f4 cc       	rjmp	.-1560   	; 0x134bc <Read_Config+0x142>
   13ad4:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13ad6:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13ad8:	e8 81       	ld	r30, Y
   13ada:	f9 81       	ldd	r31, Y+1	; 0x01
   13adc:	c8 50       	subi	r28, 0x08	; 8
   13ade:	d1 40       	sbci	r29, 0x01	; 1
   13ae0:	62 87       	std	Z+10, r22	; 0x0a
   13ae2:	73 87       	std	Z+11, r23	; 0x0b
   13ae4:	eb cc       	rjmp	.-1578   	; 0x134bc <Read_Config+0x142>
   13ae6:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13ae8:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13aea:	e8 81       	ld	r30, Y
   13aec:	f9 81       	ldd	r31, Y+1	; 0x01
   13aee:	c8 50       	subi	r28, 0x08	; 8
   13af0:	d1 40       	sbci	r29, 0x01	; 1
   13af2:	64 87       	std	Z+12, r22	; 0x0c
   13af4:	75 87       	std	Z+13, r23	; 0x0d
   13af6:	e2 cc       	rjmp	.-1596   	; 0x134bc <Read_Config+0x142>
   13af8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13afa:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13afc:	57 82       	std	Z+7, r5	; 0x07
   13afe:	46 82       	std	Z+6, r4	; 0x06
   13b00:	b5 82       	std	Z+5, r11	; 0x05
   13b02:	a4 82       	std	Z+4, r10	; 0x04
   13b04:	cf 5e       	subi	r28, 0xEF	; 239
   13b06:	de 4f       	sbci	r29, 0xFE	; 254
   13b08:	28 81       	ld	r18, Y
   13b0a:	39 81       	ldd	r19, Y+1	; 0x01
   13b0c:	4a 81       	ldd	r20, Y+2	; 0x02
   13b0e:	c1 51       	subi	r28, 0x11	; 17
   13b10:	d1 40       	sbci	r29, 0x01	; 1
   13b12:	0d c0       	rjmp	.+26     	; 0x13b2e <Read_Config+0x7b4>
   13b14:	ed b7       	in	r30, 0x3d	; 61
   13b16:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13b18:	57 82       	std	Z+7, r5	; 0x07
   13b1a:	46 82       	std	Z+6, r4	; 0x06
   13b1c:	b5 82       	std	Z+5, r11	; 0x05
   13b1e:	a4 82       	std	Z+4, r10	; 0x04
   13b20:	c2 5f       	subi	r28, 0xF2	; 242
   13b22:	de 4f       	sbci	r29, 0xFE	; 254
   13b24:	28 81       	ld	r18, Y
   13b26:	39 81       	ldd	r19, Y+1	; 0x01
   13b28:	4a 81       	ldd	r20, Y+2	; 0x02
   13b2a:	ce 50       	subi	r28, 0x0E	; 14
   13b2c:	d1 40       	sbci	r29, 0x01	; 1
   13b2e:	21 83       	std	Z+1, r18	; 0x01
   13b30:	32 83       	std	Z+2, r19	; 0x02
   13b32:	43 83       	std	Z+3, r20	; 0x03
   13b34:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   13b38:	ff ef       	ldi	r31, 0xFF	; 255
   13b3a:	ef 1a       	sub	r14, r31
                ++errors;
   13b3c:	ff 0a       	sbc	r15, r31
   13b3e:	be cc       	rjmp	.-1668   	; 0x134bc <Read_Config+0x142>
   13b40:	21 14       	cp	r2, r1
                break;
   13b42:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13b44:	79 f0       	breq	.+30     	; 0x13b64 <Read_Config+0x7ea>
   13b46:	ed b7       	in	r30, 0x3d	; 61
   13b48:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13b4a:	55 82       	std	Z+5, r5	; 0x05
   13b4c:	44 82       	std	Z+4, r4	; 0x04
   13b4e:	81 e6       	ldi	r24, 0x61	; 97
   13b50:	9a e1       	ldi	r25, 0x1A	; 26
   13b52:	a0 e0       	ldi	r26, 0x00	; 0
   13b54:	81 83       	std	Z+1, r24	; 0x01
   13b56:	92 83       	std	Z+2, r25	; 0x02
   13b58:	a3 83       	std	Z+3, r26	; 0x03
   13b5a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   13b5e:	ff ef       	ldi	r31, 0xFF	; 255
   13b60:	ef 1a       	sub	r14, r31
        ++errors;
   13b62:	ff 0a       	sbc	r15, r31
   13b64:	ed b7       	in	r30, 0x3d	; 61
   13b66:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13b68:	55 82       	std	Z+5, r5	; 0x05
   13b6a:	44 82       	std	Z+4, r4	; 0x04
   13b6c:	84 e4       	ldi	r24, 0x44	; 68
   13b6e:	9a e1       	ldi	r25, 0x1A	; 26
   13b70:	a0 e0       	ldi	r26, 0x00	; 0
   13b72:	81 83       	std	Z+1, r24	; 0x01
   13b74:	92 83       	std	Z+2, r25	; 0x02
   13b76:	a3 83       	std	Z+3, r26	; 0x03
   13b78:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   13b7c:	e1 14       	cp	r14, r1
   13b7e:	f1 04       	cpc	r15, r1
    if(errors)
   13b80:	61 f0       	breq	.+24     	; 0x13b9a <Read_Config+0x820>
   13b82:	ed b7       	in	r30, 0x3d	; 61
   13b84:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13b86:	f5 82       	std	Z+5, r15	; 0x05
   13b88:	e4 82       	std	Z+4, r14	; 0x04
   13b8a:	8d e1       	ldi	r24, 0x1D	; 29
   13b8c:	9a e1       	ldi	r25, 0x1A	; 26
   13b8e:	a0 e0       	ldi	r26, 0x00	; 0
   13b90:	81 83       	std	Z+1, r24	; 0x01
   13b92:	92 83       	std	Z+2, r25	; 0x02
   13b94:	a3 83       	std	Z+3, r26	; 0x03
   13b96:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   13b9a:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13b9c:	de 4f       	sbci	r29, 0xFE	; 254
   13b9e:	88 81       	ld	r24, Y
   13ba0:	99 81       	ldd	r25, Y+1	; 0x01
   13ba2:	cc 50       	subi	r28, 0x0C	; 12
   13ba4:	d1 40       	sbci	r29, 0x01	; 1
   13ba6:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
   13baa:	01 96       	adiw	r24, 0x01	; 1
   13bac:	39 f4       	brne	.+14     	; 0x13bbc <Read_Config+0x842>
   13bae:	8c e6       	ldi	r24, 0x6C	; 108
    {
        perror("Read_Config - close error");
   13bb0:	9e e0       	ldi	r25, 0x0E	; 14
   13bb2:	0e 94 04 77 	call	0xee08	; 0xee08 <perror>
   13bb6:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13bb8:	e2 1a       	sub	r14, r18
   13bba:	f2 0a       	sbc	r15, r18
   13bbc:	48 db       	rcall	.-2416   	; 0x1324e <Post_Config>
    }

// Post process device values
    Post_Config();
   13bbe:	c7 01       	movw	r24, r14
   13bc0:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13bc2:	de 4f       	sbci	r29, 0xFE	; 254
}
   13bc4:	e2 e1       	ldi	r30, 0x12	; 18
   13bc6:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00013bca <format_drives>:
   13bca:	2f 92       	push	r2
   13bcc:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13bce:	4f 92       	push	r4
   13bd0:	5f 92       	push	r5
   13bd2:	6f 92       	push	r6
   13bd4:	7f 92       	push	r7
   13bd6:	8f 92       	push	r8
   13bd8:	af 92       	push	r10
   13bda:	bf 92       	push	r11
   13bdc:	cf 92       	push	r12
   13bde:	df 92       	push	r13
   13be0:	ef 92       	push	r14
   13be2:	ff 92       	push	r15
   13be4:	0f 93       	push	r16
   13be6:	1f 93       	push	r17
   13be8:	cf 93       	push	r28
   13bea:	df 93       	push	r29
   13bec:	cd b7       	in	r28, 0x3d	; 61
   13bee:	de b7       	in	r29, 0x3e	; 62
   13bf0:	ce 56       	subi	r28, 0x6E	; 110
   13bf2:	d1 09       	sbc	r29, r1
   13bf4:	0f b6       	in	r0, 0x3f	; 63
   13bf6:	f8 94       	cli
   13bf8:	de bf       	out	0x3e, r29	; 62
   13bfa:	0f be       	out	0x3f, r0	; 63
   13bfc:	cd bf       	out	0x3d, r28	; 61
   13bfe:	84 ee       	ldi	r24, 0xE4	; 228
   13c00:	c8 2e       	mov	r12, r24
   13c02:	8e e1       	ldi	r24, 0x1E	; 30
   13c04:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13c06:	a0 96       	adiw	r28, 0x20	; 32
   13c08:	1f ae       	std	Y+63, r1	; 0x3f
   13c0a:	1e ae       	std	Y+62, r1	; 0x3e
   13c0c:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13c0e:	6e 96       	adiw	r28, 0x1e	; 30
   13c10:	1f ae       	std	Y+63, r1	; 0x3f
   13c12:	1e ae       	std	Y+62, r1	; 0x3e
   13c14:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13c16:	6c 96       	adiw	r28, 0x1c	; 28
   13c18:	1f ae       	std	Y+63, r1	; 0x3f
   13c1a:	1e ae       	std	Y+62, r1	; 0x3e
   13c1c:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13c1e:	81 ed       	ldi	r24, 0xD1	; 209
   13c20:	96 e1       	ldi	r25, 0x16	; 22
   13c22:	9c 01       	movw	r18, r24
   13c24:	40 e0       	ldi	r20, 0x00	; 0
   13c26:	a3 96       	adiw	r28, 0x23	; 35
   13c28:	2d af       	std	Y+61, r18	; 0x3d
   13c2a:	3e af       	std	Y+62, r19	; 0x3e
   13c2c:	4f af       	std	Y+63, r20	; 0x3f
   13c2e:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13c30:	89 ec       	ldi	r24, 0xC9	; 201
   13c32:	96 e1       	ldi	r25, 0x16	; 22
   13c34:	9c 01       	movw	r18, r24
   13c36:	40 e0       	ldi	r20, 0x00	; 0
   13c38:	a6 96       	adiw	r28, 0x26	; 38
   13c3a:	2d af       	std	Y+61, r18	; 0x3d
   13c3c:	3e af       	std	Y+62, r19	; 0x3e
   13c3e:	4f af       	std	Y+63, r20	; 0x3f
   13c40:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13c42:	8b ee       	ldi	r24, 0xEB	; 235
   13c44:	96 e1       	ldi	r25, 0x16	; 22
   13c46:	9c 01       	movw	r18, r24
   13c48:	40 e0       	ldi	r20, 0x00	; 0
   13c4a:	a9 96       	adiw	r28, 0x29	; 41
   13c4c:	2d af       	std	Y+61, r18	; 0x3d
   13c4e:	3e af       	std	Y+62, r19	; 0x3e
   13c50:	4f af       	std	Y+63, r20	; 0x3f
   13c52:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13c54:	85 e1       	ldi	r24, 0x15	; 21
   13c56:	97 e1       	ldi	r25, 0x17	; 23
   13c58:	9c 01       	movw	r18, r24
   13c5a:	40 e0       	ldi	r20, 0x00	; 0
   13c5c:	ac 96       	adiw	r28, 0x2c	; 44
   13c5e:	2d af       	std	Y+61, r18	; 0x3d
   13c60:	3e af       	std	Y+62, r19	; 0x3e
   13c62:	4f af       	std	Y+63, r20	; 0x3f
   13c64:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13c66:	8d e0       	ldi	r24, 0x0D	; 13
   13c68:	97 e1       	ldi	r25, 0x17	; 23
   13c6a:	9c 01       	movw	r18, r24
   13c6c:	40 e0       	ldi	r20, 0x00	; 0
   13c6e:	af 96       	adiw	r28, 0x2f	; 47
   13c70:	2d af       	std	Y+61, r18	; 0x3d
   13c72:	3e af       	std	Y+62, r19	; 0x3e
   13c74:	4f af       	std	Y+63, r20	; 0x3f
   13c76:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13c78:	8f e2       	ldi	r24, 0x2F	; 47
   13c7a:	97 e1       	ldi	r25, 0x17	; 23
   13c7c:	3c 01       	movw	r6, r24
   13c7e:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13c80:	f6 01       	movw	r30, r12
   13c82:	80 81       	ld	r24, Z
   13c84:	88 23       	and	r24, r24
   13c86:	09 f4       	brne	.+2      	; 0x13c8a <format_drives+0xc0>
   13c88:	ef c0       	rjmp	.+478    	; 0x13e68 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13c8a:	83 30       	cpi	r24, 0x03	; 3
   13c8c:	09 f0       	breq	.+2      	; 0x13c90 <format_drives+0xc6>
   13c8e:	70 c0       	rjmp	.+224    	; 0x13d70 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13c90:	a7 a0       	ldd	r10, Z+39	; 0x27
   13c92:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13c94:	be 01       	movw	r22, r28
   13c96:	66 5f       	subi	r22, 0xF6	; 246
   13c98:	7f 4f       	sbci	r23, 0xFF	; 255
   13c9a:	f5 01       	movw	r30, r10
   13c9c:	82 81       	ldd	r24, Z+2	; 0x02
   13c9e:	93 81       	ldd	r25, Z+3	; 0x03
   13ca0:	0e 94 d8 77 	call	0xefb0	; 0xefb0 <stat>
   13ca4:	01 96       	adiw	r24, 0x01	; 1
   13ca6:	09 f0       	breq	.+2      	; 0x13caa <format_drives+0xe0>
   13ca8:	63 c0       	rjmp	.+198    	; 0x13d70 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13caa:	f5 01       	movw	r30, r10
   13cac:	80 89       	ldd	r24, Z+16	; 0x10
   13cae:	91 89       	ldd	r25, Z+17	; 0x11
   13cb0:	81 15       	cp	r24, r1
   13cb2:	91 40       	sbci	r25, 0x01	; 1
   13cb4:	31 f0       	breq	.+12     	; 0x13cc2 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13cb6:	ed b7       	in	r30, 0x3d	; 61
   13cb8:	fe b7       	in	r31, 0x3e	; 62
   13cba:	61 82       	std	Z+1, r6	; 0x01
   13cbc:	72 82       	std	Z+2, r7	; 0x02
   13cbe:	83 82       	std	Z+3, r8	; 0x03
   13cc0:	79 c0       	rjmp	.+242    	; 0x13db4 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13cc2:	f6 01       	movw	r30, r12
   13cc4:	23 80       	ldd	r2, Z+3	; 0x03
   13cc6:	34 80       	ldd	r3, Z+4	; 0x04
   13cc8:	45 80       	ldd	r4, Z+5	; 0x05
   13cca:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13ccc:	ed b7       	in	r30, 0x3d	; 61
   13cce:	fe b7       	in	r31, 0x3e	; 62
   13cd0:	26 82       	std	Z+6, r2	; 0x06
   13cd2:	37 82       	std	Z+7, r3	; 0x07
   13cd4:	40 86       	std	Z+8, r4	; 0x08
   13cd6:	51 86       	std	Z+9, r5	; 0x09
   13cd8:	f5 01       	movw	r30, r10
   13cda:	82 81       	ldd	r24, Z+2	; 0x02
   13cdc:	93 81       	ldd	r25, Z+3	; 0x03
   13cde:	ed b7       	in	r30, 0x3d	; 61
   13ce0:	fe b7       	in	r31, 0x3e	; 62
   13ce2:	95 83       	std	Z+5, r25	; 0x05
   13ce4:	84 83       	std	Z+4, r24	; 0x04
   13ce6:	ac 96       	adiw	r28, 0x2c	; 44
   13ce8:	2d ad       	ldd	r18, Y+61	; 0x3d
   13cea:	3e ad       	ldd	r19, Y+62	; 0x3e
   13cec:	4f ad       	ldd	r20, Y+63	; 0x3f
   13cee:	ac 97       	sbiw	r28, 0x2c	; 44
   13cf0:	21 83       	std	Z+1, r18	; 0x01
   13cf2:	32 83       	std	Z+2, r19	; 0x02
   13cf4:	43 83       	std	Z+3, r20	; 0x03
   13cf6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13cfa:	6e 96       	adiw	r28, 0x1e	; 30
   13cfc:	2e ad       	ldd	r18, Y+62	; 0x3e
   13cfe:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d00:	6e 97       	sbiw	r28, 0x1e	; 30
   13d02:	ed b7       	in	r30, 0x3d	; 61
   13d04:	fe b7       	in	r31, 0x3e	; 62
   13d06:	37 83       	std	Z+7, r19	; 0x07
   13d08:	26 83       	std	Z+6, r18	; 0x06
   13d0a:	af 96       	adiw	r28, 0x2f	; 47
   13d0c:	8d ad       	ldd	r24, Y+61	; 0x3d
   13d0e:	9e ad       	ldd	r25, Y+62	; 0x3e
   13d10:	af ad       	ldd	r26, Y+63	; 0x3f
   13d12:	af 97       	sbiw	r28, 0x2f	; 47
   13d14:	83 83       	std	Z+3, r24	; 0x03
   13d16:	94 83       	std	Z+4, r25	; 0x04
   13d18:	a5 83       	std	Z+5, r26	; 0x05
   13d1a:	2a e3       	ldi	r18, 0x3A	; 58
   13d1c:	30 e0       	ldi	r19, 0x00	; 0
   13d1e:	2c 0f       	add	r18, r28
   13d20:	3d 1f       	adc	r19, r29
   13d22:	32 83       	std	Z+2, r19	; 0x02
   13d24:	21 83       	std	Z+1, r18	; 0x01
   13d26:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13d2a:	f5 01       	movw	r30, r10
   13d2c:	a2 80       	ldd	r10, Z+2	; 0x02
   13d2e:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13d30:	c2 01       	movw	r24, r4
   13d32:	b1 01       	movw	r22, r2
   13d34:	41 d1       	rcall	.+642    	; 0x13fb8 <lif_dir_count>
   13d36:	9b 01       	movw	r18, r22
   13d38:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13d3a:	82 01       	movw	r16, r4
   13d3c:	71 01       	movw	r14, r2
   13d3e:	be 01       	movw	r22, r28
   13d40:	66 5c       	subi	r22, 0xC6	; 198
   13d42:	7f 4f       	sbci	r23, 0xFF	; 255
   13d44:	c5 01       	movw	r24, r10
   13d46:	0e 94 4e da 	call	0x1b49c	; 0x1b49c <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13d4a:	6c 96       	adiw	r28, 0x1c	; 28
   13d4c:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d4e:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d50:	6c 97       	sbiw	r28, 0x1c	; 28
   13d52:	2f 5f       	subi	r18, 0xFF	; 255
   13d54:	3f 4f       	sbci	r19, 0xFF	; 255
   13d56:	6c 96       	adiw	r28, 0x1c	; 28
   13d58:	3f af       	std	Y+63, r19	; 0x3f
   13d5a:	2e af       	std	Y+62, r18	; 0x3e
   13d5c:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13d5e:	6e 96       	adiw	r28, 0x1e	; 30
   13d60:	8e ad       	ldd	r24, Y+62	; 0x3e
   13d62:	9f ad       	ldd	r25, Y+63	; 0x3f
   13d64:	6e 97       	sbiw	r28, 0x1e	; 30
   13d66:	01 96       	adiw	r24, 0x01	; 1
   13d68:	6e 96       	adiw	r28, 0x1e	; 30
   13d6a:	9f af       	std	Y+63, r25	; 0x3f
   13d6c:	8e af       	std	Y+62, r24	; 0x3e
   13d6e:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13d70:	f6 01       	movw	r30, r12
   13d72:	80 81       	ld	r24, Z
   13d74:	81 30       	cpi	r24, 0x01	; 1
   13d76:	09 f0       	breq	.+2      	; 0x13d7a <format_drives+0x1b0>
   13d78:	77 c0       	rjmp	.+238    	; 0x13e68 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13d7a:	a7 a0       	ldd	r10, Z+39	; 0x27
   13d7c:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13d7e:	be 01       	movw	r22, r28
   13d80:	66 5f       	subi	r22, 0xF6	; 246
   13d82:	7f 4f       	sbci	r23, 0xFF	; 255
   13d84:	f5 01       	movw	r30, r10
   13d86:	82 81       	ldd	r24, Z+2	; 0x02
   13d88:	93 81       	ldd	r25, Z+3	; 0x03
   13d8a:	0e 94 d8 77 	call	0xefb0	; 0xefb0 <stat>
   13d8e:	01 96       	adiw	r24, 0x01	; 1
   13d90:	09 f0       	breq	.+2      	; 0x13d94 <format_drives+0x1ca>
   13d92:	6a c0       	rjmp	.+212    	; 0x13e68 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13d94:	f5 01       	movw	r30, r10
   13d96:	86 81       	ldd	r24, Z+6	; 0x06
   13d98:	97 81       	ldd	r25, Z+7	; 0x07
   13d9a:	81 15       	cp	r24, r1
   13d9c:	91 40       	sbci	r25, 0x01	; 1
   13d9e:	69 f0       	breq	.+26     	; 0x13dba <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13da0:	a9 96       	adiw	r28, 0x29	; 41
   13da2:	2d ad       	ldd	r18, Y+61	; 0x3d
   13da4:	3e ad       	ldd	r19, Y+62	; 0x3e
   13da6:	4f ad       	ldd	r20, Y+63	; 0x3f
   13da8:	a9 97       	sbiw	r28, 0x29	; 41
   13daa:	ed b7       	in	r30, 0x3d	; 61
   13dac:	fe b7       	in	r31, 0x3e	; 62
   13dae:	21 83       	std	Z+1, r18	; 0x01
   13db0:	32 83       	std	Z+2, r19	; 0x02
   13db2:	43 83       	std	Z+3, r20	; 0x03
   13db4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                    continue;
   13db8:	57 c0       	rjmp	.+174    	; 0x13e68 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13dba:	f6 01       	movw	r30, r12
   13dbc:	23 80       	ldd	r2, Z+3	; 0x03
   13dbe:	34 80       	ldd	r3, Z+4	; 0x04
   13dc0:	45 80       	ldd	r4, Z+5	; 0x05
   13dc2:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13dc4:	ed b7       	in	r30, 0x3d	; 61
   13dc6:	fe b7       	in	r31, 0x3e	; 62
   13dc8:	26 82       	std	Z+6, r2	; 0x06
   13dca:	37 82       	std	Z+7, r3	; 0x07
   13dcc:	40 86       	std	Z+8, r4	; 0x08
   13dce:	51 86       	std	Z+9, r5	; 0x09
   13dd0:	f5 01       	movw	r30, r10
   13dd2:	82 81       	ldd	r24, Z+2	; 0x02
   13dd4:	93 81       	ldd	r25, Z+3	; 0x03
   13dd6:	ed b7       	in	r30, 0x3d	; 61
   13dd8:	fe b7       	in	r31, 0x3e	; 62
   13dda:	95 83       	std	Z+5, r25	; 0x05
   13ddc:	84 83       	std	Z+4, r24	; 0x04
   13dde:	a3 96       	adiw	r28, 0x23	; 35
   13de0:	2d ad       	ldd	r18, Y+61	; 0x3d
   13de2:	3e ad       	ldd	r19, Y+62	; 0x3e
   13de4:	4f ad       	ldd	r20, Y+63	; 0x3f
   13de6:	a3 97       	sbiw	r28, 0x23	; 35
   13de8:	21 83       	std	Z+1, r18	; 0x01
   13dea:	32 83       	std	Z+2, r19	; 0x02
   13dec:	43 83       	std	Z+3, r20	; 0x03
   13dee:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13df2:	a0 96       	adiw	r28, 0x20	; 32
   13df4:	2e ad       	ldd	r18, Y+62	; 0x3e
   13df6:	3f ad       	ldd	r19, Y+63	; 0x3f
   13df8:	a0 97       	sbiw	r28, 0x20	; 32
   13dfa:	ed b7       	in	r30, 0x3d	; 61
   13dfc:	fe b7       	in	r31, 0x3e	; 62
   13dfe:	37 83       	std	Z+7, r19	; 0x07
   13e00:	26 83       	std	Z+6, r18	; 0x06
   13e02:	a6 96       	adiw	r28, 0x26	; 38
   13e04:	8d ad       	ldd	r24, Y+61	; 0x3d
   13e06:	9e ad       	ldd	r25, Y+62	; 0x3e
   13e08:	af ad       	ldd	r26, Y+63	; 0x3f
   13e0a:	a6 97       	sbiw	r28, 0x26	; 38
   13e0c:	83 83       	std	Z+3, r24	; 0x03
   13e0e:	94 83       	std	Z+4, r25	; 0x04
   13e10:	a5 83       	std	Z+5, r26	; 0x05
   13e12:	2a e3       	ldi	r18, 0x3A	; 58
   13e14:	30 e0       	ldi	r19, 0x00	; 0
   13e16:	2c 0f       	add	r18, r28
   13e18:	3d 1f       	adc	r19, r29
   13e1a:	32 83       	std	Z+2, r19	; 0x02
   13e1c:	21 83       	std	Z+1, r18	; 0x01
   13e1e:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13e22:	f5 01       	movw	r30, r10
   13e24:	a2 80       	ldd	r10, Z+2	; 0x02
   13e26:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13e28:	c2 01       	movw	r24, r4
   13e2a:	b1 01       	movw	r22, r2
   13e2c:	c5 d0       	rcall	.+394    	; 0x13fb8 <lif_dir_count>
   13e2e:	9b 01       	movw	r18, r22
   13e30:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13e32:	82 01       	movw	r16, r4
   13e34:	71 01       	movw	r14, r2
   13e36:	be 01       	movw	r22, r28
   13e38:	66 5c       	subi	r22, 0xC6	; 198
   13e3a:	7f 4f       	sbci	r23, 0xFF	; 255
   13e3c:	c5 01       	movw	r24, r10
   13e3e:	0e 94 4e da 	call	0x1b49c	; 0x1b49c <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13e42:	6c 96       	adiw	r28, 0x1c	; 28
   13e44:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e46:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e48:	6c 97       	sbiw	r28, 0x1c	; 28
   13e4a:	2f 5f       	subi	r18, 0xFF	; 255
   13e4c:	3f 4f       	sbci	r19, 0xFF	; 255
   13e4e:	6c 96       	adiw	r28, 0x1c	; 28
   13e50:	3f af       	std	Y+63, r19	; 0x3f
   13e52:	2e af       	std	Y+62, r18	; 0x3e
   13e54:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13e56:	a0 96       	adiw	r28, 0x20	; 32
   13e58:	8e ad       	ldd	r24, Y+62	; 0x3e
   13e5a:	9f ad       	ldd	r25, Y+63	; 0x3f
   13e5c:	a0 97       	sbiw	r28, 0x20	; 32
   13e5e:	01 96       	adiw	r24, 0x01	; 1
   13e60:	a0 96       	adiw	r28, 0x20	; 32
   13e62:	9f af       	std	Y+63, r25	; 0x3f
   13e64:	8e af       	std	Y+62, r24	; 0x3e
   13e66:	a0 97       	sbiw	r28, 0x20	; 32
   13e68:	9b e2       	ldi	r25, 0x2B	; 43
   13e6a:	c9 0e       	add	r12, r25
   13e6c:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13e6e:	a8 ee       	ldi	r26, 0xE8	; 232
   13e70:	ca 16       	cp	r12, r26
   13e72:	a0 e2       	ldi	r26, 0x20	; 32
   13e74:	da 06       	cpc	r13, r26
   13e76:	09 f0       	breq	.+2      	; 0x13e7a <format_drives+0x2b0>
   13e78:	03 cf       	rjmp	.-506    	; 0x13c80 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13e7a:	6c 96       	adiw	r28, 0x1c	; 28
   13e7c:	ee ad       	ldd	r30, Y+62	; 0x3e
   13e7e:	ff ad       	ldd	r31, Y+63	; 0x3f
   13e80:	6c 97       	sbiw	r28, 0x1c	; 28
   13e82:	ef 2b       	or	r30, r31
   13e84:	11 f0       	breq	.+4      	; 0x13e8a <format_drives+0x2c0>
        sep();
   13e86:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>
}
   13e8a:	c2 59       	subi	r28, 0x92	; 146
   13e8c:	df 4f       	sbci	r29, 0xFF	; 255
   13e8e:	0f b6       	in	r0, 0x3f	; 63
   13e90:	f8 94       	cli
   13e92:	de bf       	out	0x3e, r29	; 62
   13e94:	0f be       	out	0x3f, r0	; 63
   13e96:	cd bf       	out	0x3d, r28	; 61
   13e98:	df 91       	pop	r29
   13e9a:	cf 91       	pop	r28
   13e9c:	1f 91       	pop	r17
   13e9e:	0f 91       	pop	r16
   13ea0:	ff 90       	pop	r15
   13ea2:	ef 90       	pop	r14
   13ea4:	df 90       	pop	r13
   13ea6:	cf 90       	pop	r12
   13ea8:	bf 90       	pop	r11
   13eaa:	af 90       	pop	r10
   13eac:	8f 90       	pop	r8
   13eae:	7f 90       	pop	r7
   13eb0:	6f 90       	pop	r6
   13eb2:	5f 90       	pop	r5
   13eb4:	4f 90       	pop	r4
   13eb6:	3f 90       	pop	r3
   13eb8:	2f 90       	pop	r2
   13eba:	08 95       	ret

00013ebc <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   13ebc:	8f e1       	ldi	r24, 0x1F	; 31
   13ebe:	e8 ee       	ldi	r30, 0xE8	; 232
   13ec0:	f0 e2       	ldi	r31, 0x20	; 32
   13ec2:	df 01       	movw	r26, r30
   13ec4:	98 2f       	mov	r25, r24
   13ec6:	1d 92       	st	X+, r1
   13ec8:	9a 95       	dec	r25
   13eca:	e9 f7       	brne	.-6      	; 0x13ec6 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   13ecc:	9f e3       	ldi	r25, 0x3F	; 63
   13ece:	e8 e0       	ldi	r30, 0x08	; 8
   13ed0:	f1 e2       	ldi	r31, 0x21	; 33
   13ed2:	df 01       	movw	r26, r30
   13ed4:	1d 92       	st	X+, r1
   13ed6:	9a 95       	dec	r25
   13ed8:	e9 f7       	brne	.-6      	; 0x13ed4 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   13eda:	e8 e4       	ldi	r30, 0x48	; 72
   13edc:	f1 e2       	ldi	r31, 0x21	; 33
   13ede:	df 01       	movw	r26, r30
   13ee0:	1d 92       	st	X+, r1
   13ee2:	8a 95       	dec	r24
   13ee4:	e9 f7       	brne	.-6      	; 0x13ee0 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   13ee6:	10 92 68 21 	sts	0x2168, r1	; 0x802168 <hpdir+0x80>
   13eea:	10 92 69 21 	sts	0x2169, r1	; 0x802169 <hpdir+0x81>
   13eee:	10 92 6a 21 	sts	0x216A, r1	; 0x80216a <hpdir+0x82>
   13ef2:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   13ef6:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <hpdir+0x84>
   13efa:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <hpdir+0x85>
   13efe:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <hpdir+0x86>
   13f02:	10 92 6f 21 	sts	0x216F, r1	; 0x80216f <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   13f06:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <hpdir+0x88>
   13f0a:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <hpdir+0x89>
   13f0e:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <hpdir+0x8a>
   13f12:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   13f16:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <hpdir+0x8c>
   13f1a:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <hpdir+0x8d>
   13f1e:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <hpdir+0x8e>
   13f22:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   13f26:	81 e0       	ldi	r24, 0x01	; 1
   13f28:	90 e8       	ldi	r25, 0x80	; 128
   13f2a:	a0 e0       	ldi	r26, 0x00	; 0
   13f2c:	b0 e0       	ldi	r27, 0x00	; 0
   13f2e:	80 93 78 21 	sts	0x2178, r24	; 0x802178 <hpdir+0x90>
   13f32:	90 93 79 21 	sts	0x2179, r25	; 0x802179 <hpdir+0x91>
   13f36:	a0 93 7a 21 	sts	0x217A, r26	; 0x80217a <hpdir+0x92>
   13f3a:	b0 93 7b 21 	sts	0x217B, r27	; 0x80217b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   13f3e:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <hpdir+0x94>
   13f42:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <hpdir+0x95>
   13f46:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <hpdir+0x96>
   13f4a:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   13f4e:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0x98>
   13f52:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <hpdir+0x99>
   13f56:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x9a>
   13f5a:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   13f5e:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x9c>
   13f62:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x9d>
   13f66:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x9e>
   13f6a:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   13f6e:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0xa0>
   13f72:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0xa1>
   13f76:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0xa2>
   13f7a:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   13f7e:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0xa4>
   13f82:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0xa5>
   13f86:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0xa6>
   13f8a:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   13f8e:	81 e0       	ldi	r24, 0x01	; 1
   13f90:	90 e0       	ldi	r25, 0x00	; 0
   13f92:	a0 e0       	ldi	r26, 0x00	; 0
   13f94:	b0 e0       	ldi	r27, 0x00	; 0
   13f96:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <hpdir+0xa8>
   13f9a:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <hpdir+0xa9>
   13f9e:	a0 93 92 21 	sts	0x2192, r26	; 0x802192 <hpdir+0xaa>
   13fa2:	b0 93 93 21 	sts	0x2193, r27	; 0x802193 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   13fa6:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0xac>
   13faa:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0xad>
   13fae:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0xae>
   13fb2:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0xaf>
   13fb6:	08 95       	ret

00013fb8 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   13fb8:	20 e0       	ldi	r18, 0x00	; 0
   13fba:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   13fbc:	61 15       	cp	r22, r1
   13fbe:	71 05       	cpc	r23, r1
   13fc0:	81 05       	cpc	r24, r1
   13fc2:	91 05       	cpc	r25, r1
   13fc4:	39 f0       	breq	.+14     	; 0x13fd4 <lif_dir_count+0x1c>
    {
        scale++;
   13fc6:	2f 5f       	subi	r18, 0xFF	; 255
   13fc8:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   13fca:	95 95       	asr	r25
   13fcc:	87 95       	ror	r24
   13fce:	77 95       	ror	r23
   13fd0:	67 95       	ror	r22
   13fd2:	f4 cf       	rjmp	.-24     	; 0x13fbc <lif_dir_count+0x4>
    }
    scale>>=1;
   13fd4:	35 95       	asr	r19
   13fd6:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   13fd8:	61 e0       	ldi	r22, 0x01	; 1
   13fda:	70 e0       	ldi	r23, 0x00	; 0
   13fdc:	80 e0       	ldi	r24, 0x00	; 0
   13fde:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   13fe0:	21 50       	subi	r18, 0x01	; 1
   13fe2:	31 09       	sbc	r19, r1
   13fe4:	28 f0       	brcs	.+10     	; 0x13ff0 <lif_dir_count+0x38>
        num <<=1;
   13fe6:	66 0f       	add	r22, r22
   13fe8:	77 1f       	adc	r23, r23
   13fea:	88 1f       	adc	r24, r24
   13fec:	99 1f       	adc	r25, r25
   13fee:	f8 cf       	rjmp	.-16     	; 0x13fe0 <lif_dir_count+0x28>
    return(num);
}
   13ff0:	08 95       	ret

00013ff2 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   13ff2:	2f 92       	push	r2
   13ff4:	3f 92       	push	r3
   13ff6:	4f 92       	push	r4
   13ff8:	5f 92       	push	r5
   13ffa:	6f 92       	push	r6
   13ffc:	8f 92       	push	r8
   13ffe:	9f 92       	push	r9
   14000:	af 92       	push	r10
   14002:	bf 92       	push	r11
   14004:	cf 92       	push	r12
   14006:	df 92       	push	r13
   14008:	ef 92       	push	r14
   1400a:	ff 92       	push	r15
   1400c:	0f 93       	push	r16
   1400e:	1f 93       	push	r17
   14010:	cf 93       	push	r28
   14012:	df 93       	push	r29
   14014:	cd b7       	in	r28, 0x3d	; 61
   14016:	de b7       	in	r29, 0x3e	; 62
   14018:	c9 58       	subi	r28, 0x89	; 137
   1401a:	d1 40       	sbci	r29, 0x01	; 1
   1401c:	0f b6       	in	r0, 0x3f	; 63
   1401e:	f8 94       	cli
   14020:	de bf       	out	0x3e, r29	; 62
   14022:	0f be       	out	0x3f, r0	; 63
   14024:	cd bf       	out	0x3d, r28	; 61
   14026:	6c 01       	movw	r12, r24
   14028:	c8 57       	subi	r28, 0x78	; 120
   1402a:	de 4f       	sbci	r29, 0xFE	; 254
   1402c:	79 83       	std	Y+1, r23	; 0x01
   1402e:	68 83       	st	Y, r22
   14030:	c8 58       	subi	r28, 0x88	; 136
   14032:	d1 40       	sbci	r29, 0x01	; 1
   14034:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14036:	42 df       	rcall	.-380    	; 0x13ebc <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14038:	6e ef       	ldi	r22, 0xFE	; 254
   1403a:	78 e0       	ldi	r23, 0x08	; 8
   1403c:	8d e5       	ldi	r24, 0x5D	; 93
   1403e:	90 e1       	ldi	r25, 0x10	; 16
   14040:	0e 94 d3 7c 	call	0xf9a6	; 0xf9a6 <fopen>
   14044:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14046:	89 2b       	or	r24, r25
   14048:	49 f4       	brne	.+18     	; 0x1405c <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   1404a:	6e ef       	ldi	r22, 0xFE	; 254
   1404c:	78 e0       	ldi	r23, 0x08	; 8
   1404e:	8c e5       	ldi	r24, 0x5C	; 92
   14050:	90 e1       	ldi	r25, 0x10	; 16
   14052:	0e 94 d3 7c 	call	0xf9a6	; 0xf9a6 <fopen>
   14056:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14058:	89 2b       	or	r24, r25
   1405a:	51 f0       	breq	.+20     	; 0x14070 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1405c:	21 2c       	mov	r2, r1
   1405e:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14060:	8e 01       	movw	r16, r28
   14062:	08 5f       	subi	r16, 0xF8	; 248
   14064:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14066:	87 e7       	ldi	r24, 0x77	; 119
   14068:	9d e1       	ldi	r25, 0x1D	; 29
   1406a:	2c 01       	movw	r4, r24
   1406c:	61 2c       	mov	r6, r1
   1406e:	1e c0       	rjmp	.+60     	; 0x140ac <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14070:	ab 28       	or	r10, r11
   14072:	09 f4       	brne	.+2      	; 0x14076 <hpdir_find_drive+0x84>
   14074:	69 c1       	rjmp	.+722    	; 0x14348 <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   14076:	8e e7       	ldi	r24, 0x7E	; 126
   14078:	9d e1       	ldi	r25, 0x1D	; 29
   1407a:	a0 e0       	ldi	r26, 0x00	; 0
   1407c:	ed b7       	in	r30, 0x3d	; 61
   1407e:	fe b7       	in	r31, 0x3e	; 62
   14080:	81 83       	std	Z+1, r24	; 0x01
   14082:	92 83       	std	Z+2, r25	; 0x02
   14084:	a3 83       	std	Z+3, r26	; 0x03
   14086:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1408a:	5e c1       	rjmp	.+700    	; 0x14348 <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   1408c:	ce 01       	movw	r24, r28
   1408e:	08 96       	adiw	r24, 0x08	; 8
   14090:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <trim_tail>
        ptr = skipspaces(ptr);
   14094:	ce 01       	movw	r24, r28
   14096:	08 96       	adiw	r24, 0x08	; 8
   14098:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <skipspaces>

        len = strlen(ptr);
   1409c:	fc 01       	movw	r30, r24
   1409e:	01 90       	ld	r0, Z+
   140a0:	00 20       	and	r0, r0
   140a2:	e9 f7       	brne	.-6      	; 0x1409e <hpdir_find_drive+0xac>
   140a4:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   140a6:	8e 17       	cp	r24, r30
   140a8:	9f 07       	cpc	r25, r31
   140aa:	51 f4       	brne	.+20     	; 0x140c0 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   140ac:	a7 01       	movw	r20, r14
   140ae:	6e ef       	ldi	r22, 0xFE	; 254
   140b0:	70 e0       	ldi	r23, 0x00	; 0
   140b2:	ce 01       	movw	r24, r28
   140b4:	08 96       	adiw	r24, 0x08	; 8
   140b6:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <fgets>
   140ba:	89 2b       	or	r24, r25
   140bc:	39 f7       	brne	.-50     	; 0x1408c <hpdir_find_drive+0x9a>
   140be:	0c c0       	rjmp	.+24     	; 0x140d8 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   140c0:	fc 01       	movw	r30, r24
   140c2:	20 81       	ld	r18, Z
   140c4:	2b 33       	cpi	r18, 0x3B	; 59
   140c6:	91 f3       	breq	.-28     	; 0x140ac <hpdir_find_drive+0xba>
   140c8:	23 32       	cpi	r18, 0x23	; 35
   140ca:	81 f3       	breq	.-32     	; 0x140ac <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   140cc:	2b 35       	cpi	r18, 0x5B	; 91
   140ce:	31 f4       	brne	.+12     	; 0x140dc <hpdir_find_drive+0xea>
   140d0:	f1 e0       	ldi	r31, 0x01	; 1
   140d2:	2f 16       	cp	r2, r31
   140d4:	31 04       	cpc	r3, r1
   140d6:	11 f4       	brne	.+4      	; 0x140dc <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   140d8:	00 e0       	ldi	r16, 0x00	; 0
   140da:	30 c1       	rjmp	.+608    	; 0x1433c <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   140dc:	4e e7       	ldi	r20, 0x7E	; 126
   140de:	50 e0       	ldi	r21, 0x00	; 0
   140e0:	b8 01       	movw	r22, r16
   140e2:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   140e6:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   140e8:	67 e6       	ldi	r22, 0x67	; 103
   140ea:	70 e1       	ldi	r23, 0x10	; 16
   140ec:	c8 01       	movw	r24, r16
   140ee:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   140f2:	89 2b       	or	r24, r25
   140f4:	21 f0       	breq	.+8      	; 0x140fe <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   140f6:	22 24       	eor	r2, r2
   140f8:	23 94       	inc	r2
   140fa:	31 2c       	mov	r3, r1
   140fc:	d7 cf       	rjmp	.-82     	; 0x140ac <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   140fe:	21 e0       	ldi	r18, 0x01	; 1
   14100:	22 16       	cp	r2, r18
   14102:	31 04       	cpc	r3, r1
   14104:	99 f6       	brne	.-90     	; 0x140ac <hpdir_find_drive+0xba>
            continue;

        if(list)
   14106:	c8 57       	subi	r28, 0x78	; 120
   14108:	de 4f       	sbci	r29, 0xFE	; 254
   1410a:	88 81       	ld	r24, Y
   1410c:	99 81       	ldd	r25, Y+1	; 0x01
   1410e:	c8 58       	subi	r28, 0x88	; 136
   14110:	d1 40       	sbci	r29, 0x01	; 1
   14112:	89 2b       	or	r24, r25
   14114:	61 f0       	breq	.+24     	; 0x1412e <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   14116:	ed b7       	in	r30, 0x3d	; 61
   14118:	fe b7       	in	r31, 0x3e	; 62
   1411a:	97 82       	std	Z+7, r9	; 0x07
   1411c:	86 82       	std	Z+6, r8	; 0x06
   1411e:	15 83       	std	Z+5, r17	; 0x05
   14120:	04 83       	std	Z+4, r16	; 0x04
   14122:	41 82       	std	Z+1, r4	; 0x01
   14124:	52 82       	std	Z+2, r5	; 0x02
   14126:	63 82       	std	Z+3, r6	; 0x03
   14128:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            continue;
   1412c:	bf cf       	rjmp	.-130    	; 0x140ac <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   1412e:	b8 01       	movw	r22, r16
   14130:	c6 01       	movw	r24, r12
   14132:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   14136:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14138:	f1 f2       	breq	.-68     	; 0x140f6 <hpdir_find_drive+0x104>
   1413a:	c0 de       	rcall	.-640    	; 0x13ebc <hpdir_init>

        if(verbose)
   1413c:	ab 28       	or	r10, r11
   1413e:	61 f0       	breq	.+24     	; 0x14158 <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   14140:	ed b7       	in	r30, 0x3d	; 61
   14142:	fe b7       	in	r31, 0x3e	; 62
   14144:	d5 82       	std	Z+5, r13	; 0x05
   14146:	c4 82       	std	Z+4, r12	; 0x04
   14148:	86 e6       	ldi	r24, 0x66	; 102
   1414a:	9d e1       	ldi	r25, 0x1D	; 29
   1414c:	a0 e0       	ldi	r26, 0x00	; 0
   1414e:	81 83       	std	Z+1, r24	; 0x01
   14150:	92 83       	std	Z+2, r25	; 0x02
   14152:	a3 83       	std	Z+3, r26	; 0x03
   14154:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14158:	4e e1       	ldi	r20, 0x1E	; 30
   1415a:	50 e0       	ldi	r21, 0x00	; 0
   1415c:	b8 01       	movw	r22, r16
   1415e:	88 ee       	ldi	r24, 0xE8	; 232
   14160:	90 e2       	ldi	r25, 0x20	; 32
   14162:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14166:	4e e7       	ldi	r20, 0x7E	; 126
   14168:	50 e0       	ldi	r21, 0x00	; 0
   1416a:	b8 01       	movw	r22, r16
   1416c:	c4 01       	movw	r24, r8
   1416e:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14172:	4e e3       	ldi	r20, 0x3E	; 62
   14174:	50 e0       	ldi	r21, 0x00	; 0
   14176:	68 e0       	ldi	r22, 0x08	; 8
   14178:	71 e2       	ldi	r23, 0x21	; 33
   1417a:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1417e:	4e e1       	ldi	r20, 0x1E	; 30
   14180:	50 e0       	ldi	r21, 0x00	; 0
   14182:	68 e4       	ldi	r22, 0x48	; 72
   14184:	71 e2       	ldi	r23, 0x21	; 33
   14186:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1418a:	4e e7       	ldi	r20, 0x7E	; 126
   1418c:	50 e0       	ldi	r21, 0x00	; 0
   1418e:	b8 01       	movw	r22, r16
   14190:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   14194:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   14196:	c8 01       	movw	r24, r16
   14198:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   1419c:	60 93 68 21 	sts	0x2168, r22	; 0x802168 <hpdir+0x80>
   141a0:	70 93 69 21 	sts	0x2169, r23	; 0x802169 <hpdir+0x81>
   141a4:	80 93 6a 21 	sts	0x216A, r24	; 0x80216a <hpdir+0x82>
   141a8:	90 93 6b 21 	sts	0x216B, r25	; 0x80216b <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   141ac:	4e e7       	ldi	r20, 0x7E	; 126
   141ae:	50 e0       	ldi	r21, 0x00	; 0
   141b0:	b8 01       	movw	r22, r16
   141b2:	c6 01       	movw	r24, r12
   141b4:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   141b8:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   141ba:	c8 01       	movw	r24, r16
   141bc:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   141c0:	60 93 6c 21 	sts	0x216C, r22	; 0x80216c <hpdir+0x84>
   141c4:	70 93 6d 21 	sts	0x216D, r23	; 0x80216d <hpdir+0x85>
   141c8:	80 93 6e 21 	sts	0x216E, r24	; 0x80216e <hpdir+0x86>
   141cc:	90 93 6f 21 	sts	0x216F, r25	; 0x80216f <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   141d0:	4e e7       	ldi	r20, 0x7E	; 126
   141d2:	50 e0       	ldi	r21, 0x00	; 0
   141d4:	b8 01       	movw	r22, r16
   141d6:	c6 01       	movw	r24, r12
   141d8:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   141dc:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   141de:	c8 01       	movw	r24, r16
   141e0:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   141e4:	60 93 70 21 	sts	0x2170, r22	; 0x802170 <hpdir+0x88>
   141e8:	70 93 71 21 	sts	0x2171, r23	; 0x802171 <hpdir+0x89>
   141ec:	80 93 72 21 	sts	0x2172, r24	; 0x802172 <hpdir+0x8a>
   141f0:	90 93 73 21 	sts	0x2173, r25	; 0x802173 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   141f4:	4e e7       	ldi	r20, 0x7E	; 126
   141f6:	50 e0       	ldi	r21, 0x00	; 0
   141f8:	b8 01       	movw	r22, r16
   141fa:	c6 01       	movw	r24, r12
   141fc:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   14200:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14202:	c8 01       	movw	r24, r16
   14204:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   14208:	60 93 74 21 	sts	0x2174, r22	; 0x802174 <hpdir+0x8c>
   1420c:	70 93 75 21 	sts	0x2175, r23	; 0x802175 <hpdir+0x8d>
   14210:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <hpdir+0x8e>
   14214:	90 93 77 21 	sts	0x2177, r25	; 0x802177 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14218:	4e e7       	ldi	r20, 0x7E	; 126
   1421a:	50 e0       	ldi	r21, 0x00	; 0
   1421c:	b8 01       	movw	r22, r16
   1421e:	c6 01       	movw	r24, r12
   14220:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   14224:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14226:	c8 01       	movw	r24, r16
   14228:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   1422c:	60 93 78 21 	sts	0x2178, r22	; 0x802178 <hpdir+0x90>
   14230:	70 93 79 21 	sts	0x2179, r23	; 0x802179 <hpdir+0x91>
   14234:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <hpdir+0x92>
   14238:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1423c:	4e e7       	ldi	r20, 0x7E	; 126
   1423e:	50 e0       	ldi	r21, 0x00	; 0
   14240:	b8 01       	movw	r22, r16
   14242:	c6 01       	movw	r24, r12
   14244:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   14248:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   1424a:	c8 01       	movw	r24, r16
   1424c:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   14250:	60 93 7c 21 	sts	0x217C, r22	; 0x80217c <hpdir+0x94>
   14254:	70 93 7d 21 	sts	0x217D, r23	; 0x80217d <hpdir+0x95>
   14258:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <hpdir+0x96>
   1425c:	90 93 7f 21 	sts	0x217F, r25	; 0x80217f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14260:	4e e7       	ldi	r20, 0x7E	; 126
   14262:	50 e0       	ldi	r21, 0x00	; 0
   14264:	b8 01       	movw	r22, r16
   14266:	c6 01       	movw	r24, r12
   14268:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   1426c:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   1426e:	c8 01       	movw	r24, r16
   14270:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   14274:	60 93 80 21 	sts	0x2180, r22	; 0x802180 <hpdir+0x98>
   14278:	70 93 81 21 	sts	0x2181, r23	; 0x802181 <hpdir+0x99>
   1427c:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <hpdir+0x9a>
   14280:	90 93 83 21 	sts	0x2183, r25	; 0x802183 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14284:	4e e7       	ldi	r20, 0x7E	; 126
   14286:	50 e0       	ldi	r21, 0x00	; 0
   14288:	b8 01       	movw	r22, r16
   1428a:	c6 01       	movw	r24, r12
   1428c:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   14290:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   14292:	c8 01       	movw	r24, r16
   14294:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   14298:	60 93 84 21 	sts	0x2184, r22	; 0x802184 <hpdir+0x9c>
   1429c:	70 93 85 21 	sts	0x2185, r23	; 0x802185 <hpdir+0x9d>
   142a0:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <hpdir+0x9e>
   142a4:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142a8:	4e e7       	ldi	r20, 0x7E	; 126
   142aa:	50 e0       	ldi	r21, 0x00	; 0
   142ac:	b8 01       	movw	r22, r16
   142ae:	c6 01       	movw	r24, r12
   142b0:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
   142b4:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   142b6:	c8 01       	movw	r24, r16
   142b8:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   142bc:	60 93 88 21 	sts	0x2188, r22	; 0x802188 <hpdir+0xa0>
   142c0:	70 93 89 21 	sts	0x2189, r23	; 0x802189 <hpdir+0xa1>
   142c4:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <hpdir+0xa2>
   142c8:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142cc:	4e e7       	ldi	r20, 0x7E	; 126
   142ce:	50 e0       	ldi	r21, 0x00	; 0
   142d0:	b8 01       	movw	r22, r16
   142d2:	c6 01       	movw	r24, r12
   142d4:	0e 94 90 30 	call	0x6120	; 0x6120 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   142d8:	c8 01       	movw	r24, r16
   142da:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
   142de:	60 93 8c 21 	sts	0x218C, r22	; 0x80218c <hpdir+0xa4>
   142e2:	70 93 8d 21 	sts	0x218D, r23	; 0x80218d <hpdir+0xa5>
   142e6:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <hpdir+0xa6>
   142ea:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   142ee:	20 91 7c 21 	lds	r18, 0x217C	; 0x80217c <hpdir+0x94>
   142f2:	30 91 7d 21 	lds	r19, 0x217D	; 0x80217d <hpdir+0x95>
   142f6:	40 91 7e 21 	lds	r20, 0x217E	; 0x80217e <hpdir+0x96>
   142fa:	50 91 7f 21 	lds	r21, 0x217F	; 0x80217f <hpdir+0x97>
   142fe:	60 91 80 21 	lds	r22, 0x2180	; 0x802180 <hpdir+0x98>
   14302:	70 91 81 21 	lds	r23, 0x2181	; 0x802181 <hpdir+0x99>
   14306:	80 91 82 21 	lds	r24, 0x2182	; 0x802182 <hpdir+0x9a>
   1430a:	90 91 83 21 	lds	r25, 0x2183	; 0x802183 <hpdir+0x9b>
   1430e:	0e 94 d4 e0 	call	0x1c1a8	; 0x1c1a8 <__mulsi3>
   14312:	9b 01       	movw	r18, r22
   14314:	ac 01       	movw	r20, r24
   14316:	60 91 84 21 	lds	r22, 0x2184	; 0x802184 <hpdir+0x9c>
   1431a:	70 91 85 21 	lds	r23, 0x2185	; 0x802185 <hpdir+0x9d>
   1431e:	80 91 86 21 	lds	r24, 0x2186	; 0x802186 <hpdir+0x9e>
   14322:	90 91 87 21 	lds	r25, 0x2187	; 0x802187 <hpdir+0x9f>
   14326:	0e 94 d4 e0 	call	0x1c1a8	; 0x1c1a8 <__mulsi3>
   1432a:	60 93 94 21 	sts	0x2194, r22	; 0x802194 <hpdir+0xac>
   1432e:	70 93 95 21 	sts	0x2195, r23	; 0x802195 <hpdir+0xad>
   14332:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0xae>
   14336:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   1433a:	01 e0       	ldi	r16, 0x01	; 1
   1433c:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   1433e:	c7 01       	movw	r24, r14
   14340:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
    return(found);
   14344:	c8 01       	movw	r24, r16
   14346:	02 c0       	rjmp	.+4      	; 0x1434c <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14348:	80 e0       	ldi	r24, 0x00	; 0
   1434a:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   1434c:	c7 57       	subi	r28, 0x77	; 119
   1434e:	de 4f       	sbci	r29, 0xFE	; 254
   14350:	0f b6       	in	r0, 0x3f	; 63
   14352:	f8 94       	cli
   14354:	de bf       	out	0x3e, r29	; 62
   14356:	0f be       	out	0x3f, r0	; 63
   14358:	cd bf       	out	0x3d, r28	; 61
   1435a:	df 91       	pop	r29
   1435c:	cf 91       	pop	r28
   1435e:	1f 91       	pop	r17
   14360:	0f 91       	pop	r16
   14362:	ff 90       	pop	r15
   14364:	ef 90       	pop	r14
   14366:	df 90       	pop	r13
   14368:	cf 90       	pop	r12
   1436a:	bf 90       	pop	r11
   1436c:	af 90       	pop	r10
   1436e:	9f 90       	pop	r9
   14370:	8f 90       	pop	r8
   14372:	6f 90       	pop	r6
   14374:	5f 90       	pop	r5
   14376:	4f 90       	pop	r4
   14378:	3f 90       	pop	r3
   1437a:	2f 90       	pop	r2
   1437c:	08 95       	ret

0001437e <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   1437e:	0f 93       	push	r16
   14380:	1f 93       	push	r17
   14382:	25 e0       	ldi	r18, 0x05	; 5
   14384:	30 e0       	ldi	r19, 0x00	; 0
   14386:	fc 01       	movw	r30, r24
   14388:	31 83       	std	Z+1, r19	; 0x01
   1438a:	20 83       	st	Z, r18
   1438c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14390:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   14394:	06 81       	ldd	r16, Z+6	; 0x06
   14396:	17 81       	ldd	r17, Z+7	; 0x07
   14398:	20 e0       	ldi	r18, 0x00	; 0
   1439a:	30 e0       	ldi	r19, 0x00	; 0
   1439c:	42 e0       	ldi	r20, 0x02	; 2
   1439e:	50 e0       	ldi	r21, 0x00	; 0
   143a0:	60 e0       	ldi	r22, 0x00	; 0
   143a2:	70 e0       	ldi	r23, 0x00	; 0
   143a4:	89 e8       	ldi	r24, 0x89	; 137
   143a6:	99 e1       	ldi	r25, 0x19	; 25
   143a8:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   143ac:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   143b0:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   143b4:	00 85       	ldd	r16, Z+8	; 0x08
   143b6:	11 85       	ldd	r17, Z+9	; 0x09
   143b8:	20 e0       	ldi	r18, 0x00	; 0
   143ba:	30 e0       	ldi	r19, 0x00	; 0
   143bc:	42 e0       	ldi	r20, 0x02	; 2
   143be:	50 e0       	ldi	r21, 0x00	; 0
   143c0:	61 e0       	ldi	r22, 0x01	; 1
   143c2:	70 e0       	ldi	r23, 0x00	; 0
   143c4:	89 e8       	ldi	r24, 0x89	; 137
   143c6:	99 e1       	ldi	r25, 0x19	; 25
   143c8:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   143cc:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   143d0:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   143d4:	02 85       	ldd	r16, Z+10	; 0x0a
   143d6:	10 e0       	ldi	r17, 0x00	; 0
   143d8:	20 e0       	ldi	r18, 0x00	; 0
   143da:	30 e0       	ldi	r19, 0x00	; 0
   143dc:	41 e0       	ldi	r20, 0x01	; 1
   143de:	50 e0       	ldi	r21, 0x00	; 0
   143e0:	64 e0       	ldi	r22, 0x04	; 4
   143e2:	70 e0       	ldi	r23, 0x00	; 0
   143e4:	89 e8       	ldi	r24, 0x89	; 137
   143e6:	99 e1       	ldi	r25, 0x19	; 25
   143e8:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   143ec:	89 e8       	ldi	r24, 0x89	; 137
   143ee:	99 e1       	ldi	r25, 0x19	; 25
   143f0:	1f 91       	pop	r17
   143f2:	0f 91       	pop	r16
   143f4:	08 95       	ret

000143f6 <SS80UnitPack>:
   143f6:	0f 93       	push	r16
   143f8:	1f 93       	push	r17
   143fa:	23 e1       	ldi	r18, 0x13	; 19
   143fc:	30 e0       	ldi	r19, 0x00	; 0
   143fe:	fc 01       	movw	r30, r24
   14400:	31 83       	std	Z+1, r19	; 0x01
   14402:	20 83       	st	Z, r18
   14404:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14408:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1440c:	03 85       	ldd	r16, Z+11	; 0x0b
   1440e:	10 e0       	ldi	r17, 0x00	; 0
   14410:	20 e0       	ldi	r18, 0x00	; 0
   14412:	30 e0       	ldi	r19, 0x00	; 0
   14414:	41 e0       	ldi	r20, 0x01	; 1
   14416:	50 e0       	ldi	r21, 0x00	; 0
   14418:	60 e0       	ldi	r22, 0x00	; 0
   1441a:	70 e0       	ldi	r23, 0x00	; 0
   1441c:	86 e7       	ldi	r24, 0x76	; 118
   1441e:	99 e1       	ldi	r25, 0x19	; 25
   14420:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14424:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14428:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1442c:	04 85       	ldd	r16, Z+12	; 0x0c
   1442e:	15 85       	ldd	r17, Z+13	; 0x0d
   14430:	26 85       	ldd	r18, Z+14	; 0x0e
   14432:	37 85       	ldd	r19, Z+15	; 0x0f
   14434:	43 e0       	ldi	r20, 0x03	; 3
   14436:	50 e0       	ldi	r21, 0x00	; 0
   14438:	61 e0       	ldi	r22, 0x01	; 1
   1443a:	70 e0       	ldi	r23, 0x00	; 0
   1443c:	86 e7       	ldi	r24, 0x76	; 118
   1443e:	99 e1       	ldi	r25, 0x19	; 25
   14440:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14444:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14448:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1444c:	00 89       	ldd	r16, Z+16	; 0x10
   1444e:	11 89       	ldd	r17, Z+17	; 0x11
   14450:	20 e0       	ldi	r18, 0x00	; 0
   14452:	30 e0       	ldi	r19, 0x00	; 0
   14454:	42 e0       	ldi	r20, 0x02	; 2
   14456:	50 e0       	ldi	r21, 0x00	; 0
   14458:	64 e0       	ldi	r22, 0x04	; 4
   1445a:	70 e0       	ldi	r23, 0x00	; 0
   1445c:	86 e7       	ldi	r24, 0x76	; 118
   1445e:	99 e1       	ldi	r25, 0x19	; 25
   14460:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14464:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14468:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1446c:	02 89       	ldd	r16, Z+18	; 0x12
   1446e:	10 e0       	ldi	r17, 0x00	; 0
   14470:	20 e0       	ldi	r18, 0x00	; 0
   14472:	30 e0       	ldi	r19, 0x00	; 0
   14474:	41 e0       	ldi	r20, 0x01	; 1
   14476:	50 e0       	ldi	r21, 0x00	; 0
   14478:	66 e0       	ldi	r22, 0x06	; 6
   1447a:	70 e0       	ldi	r23, 0x00	; 0
   1447c:	86 e7       	ldi	r24, 0x76	; 118
   1447e:	99 e1       	ldi	r25, 0x19	; 25
   14480:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14484:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14488:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1448c:	03 89       	ldd	r16, Z+19	; 0x13
   1448e:	10 e0       	ldi	r17, 0x00	; 0
   14490:	20 e0       	ldi	r18, 0x00	; 0
   14492:	30 e0       	ldi	r19, 0x00	; 0
   14494:	41 e0       	ldi	r20, 0x01	; 1
   14496:	50 e0       	ldi	r21, 0x00	; 0
   14498:	67 e0       	ldi	r22, 0x07	; 7
   1449a:	70 e0       	ldi	r23, 0x00	; 0
   1449c:	86 e7       	ldi	r24, 0x76	; 118
   1449e:	99 e1       	ldi	r25, 0x19	; 25
   144a0:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   144a4:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   144a8:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   144ac:	04 89       	ldd	r16, Z+20	; 0x14
   144ae:	15 89       	ldd	r17, Z+21	; 0x15
   144b0:	20 e0       	ldi	r18, 0x00	; 0
   144b2:	30 e0       	ldi	r19, 0x00	; 0
   144b4:	42 e0       	ldi	r20, 0x02	; 2
   144b6:	50 e0       	ldi	r21, 0x00	; 0
   144b8:	68 e0       	ldi	r22, 0x08	; 8
   144ba:	70 e0       	ldi	r23, 0x00	; 0
   144bc:	86 e7       	ldi	r24, 0x76	; 118
   144be:	99 e1       	ldi	r25, 0x19	; 25
   144c0:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   144c4:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   144c8:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   144cc:	06 89       	ldd	r16, Z+22	; 0x16
   144ce:	17 89       	ldd	r17, Z+23	; 0x17
   144d0:	20 e0       	ldi	r18, 0x00	; 0
   144d2:	30 e0       	ldi	r19, 0x00	; 0
   144d4:	42 e0       	ldi	r20, 0x02	; 2
   144d6:	50 e0       	ldi	r21, 0x00	; 0
   144d8:	6a e0       	ldi	r22, 0x0A	; 10
   144da:	70 e0       	ldi	r23, 0x00	; 0
   144dc:	86 e7       	ldi	r24, 0x76	; 118
   144de:	99 e1       	ldi	r25, 0x19	; 25
   144e0:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   144e4:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   144e8:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   144ec:	00 8d       	ldd	r16, Z+24	; 0x18
   144ee:	11 8d       	ldd	r17, Z+25	; 0x19
   144f0:	20 e0       	ldi	r18, 0x00	; 0
   144f2:	30 e0       	ldi	r19, 0x00	; 0
   144f4:	42 e0       	ldi	r20, 0x02	; 2
   144f6:	50 e0       	ldi	r21, 0x00	; 0
   144f8:	6c e0       	ldi	r22, 0x0C	; 12
   144fa:	70 e0       	ldi	r23, 0x00	; 0
   144fc:	86 e7       	ldi	r24, 0x76	; 118
   144fe:	99 e1       	ldi	r25, 0x19	; 25
   14500:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14504:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14508:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1450c:	02 8d       	ldd	r16, Z+26	; 0x1a
   1450e:	13 8d       	ldd	r17, Z+27	; 0x1b
   14510:	20 e0       	ldi	r18, 0x00	; 0
   14512:	30 e0       	ldi	r19, 0x00	; 0
   14514:	42 e0       	ldi	r20, 0x02	; 2
   14516:	50 e0       	ldi	r21, 0x00	; 0
   14518:	6e e0       	ldi	r22, 0x0E	; 14
   1451a:	70 e0       	ldi	r23, 0x00	; 0
   1451c:	86 e7       	ldi	r24, 0x76	; 118
   1451e:	99 e1       	ldi	r25, 0x19	; 25
   14520:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14524:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14528:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1452c:	04 8d       	ldd	r16, Z+28	; 0x1c
   1452e:	10 e0       	ldi	r17, 0x00	; 0
   14530:	20 e0       	ldi	r18, 0x00	; 0
   14532:	30 e0       	ldi	r19, 0x00	; 0
   14534:	41 e0       	ldi	r20, 0x01	; 1
   14536:	50 e0       	ldi	r21, 0x00	; 0
   14538:	60 e1       	ldi	r22, 0x10	; 16
   1453a:	70 e0       	ldi	r23, 0x00	; 0
   1453c:	86 e7       	ldi	r24, 0x76	; 118
   1453e:	99 e1       	ldi	r25, 0x19	; 25
   14540:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14544:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14548:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1454c:	05 8d       	ldd	r16, Z+29	; 0x1d
   1454e:	10 e0       	ldi	r17, 0x00	; 0
   14550:	20 e0       	ldi	r18, 0x00	; 0
   14552:	30 e0       	ldi	r19, 0x00	; 0
   14554:	41 e0       	ldi	r20, 0x01	; 1
   14556:	50 e0       	ldi	r21, 0x00	; 0
   14558:	61 e1       	ldi	r22, 0x11	; 17
   1455a:	70 e0       	ldi	r23, 0x00	; 0
   1455c:	86 e7       	ldi	r24, 0x76	; 118
   1455e:	99 e1       	ldi	r25, 0x19	; 25
   14560:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14564:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14568:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1456c:	06 8d       	ldd	r16, Z+30	; 0x1e
   1456e:	10 e0       	ldi	r17, 0x00	; 0
   14570:	20 e0       	ldi	r18, 0x00	; 0
   14572:	30 e0       	ldi	r19, 0x00	; 0
   14574:	41 e0       	ldi	r20, 0x01	; 1
   14576:	50 e0       	ldi	r21, 0x00	; 0
   14578:	62 e1       	ldi	r22, 0x12	; 18
   1457a:	70 e0       	ldi	r23, 0x00	; 0
   1457c:	86 e7       	ldi	r24, 0x76	; 118
   1457e:	99 e1       	ldi	r25, 0x19	; 25
   14580:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   14584:	86 e7       	ldi	r24, 0x76	; 118
   14586:	99 e1       	ldi	r25, 0x19	; 25
   14588:	1f 91       	pop	r17
   1458a:	0f 91       	pop	r16
   1458c:	08 95       	ret

0001458e <SS80VolumePack>:
   1458e:	0f 93       	push	r16
   14590:	1f 93       	push	r17
   14592:	2d e0       	ldi	r18, 0x0D	; 13
   14594:	30 e0       	ldi	r19, 0x00	; 0
   14596:	fc 01       	movw	r30, r24
   14598:	31 83       	std	Z+1, r19	; 0x01
   1459a:	20 83       	st	Z, r18
   1459c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   145a0:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   145a4:	07 8d       	ldd	r16, Z+31	; 0x1f
   145a6:	10 a1       	ldd	r17, Z+32	; 0x20
   145a8:	21 a1       	ldd	r18, Z+33	; 0x21
   145aa:	32 a1       	ldd	r19, Z+34	; 0x22
   145ac:	43 e0       	ldi	r20, 0x03	; 3
   145ae:	50 e0       	ldi	r21, 0x00	; 0
   145b0:	60 e0       	ldi	r22, 0x00	; 0
   145b2:	70 e0       	ldi	r23, 0x00	; 0
   145b4:	89 e6       	ldi	r24, 0x69	; 105
   145b6:	99 e1       	ldi	r25, 0x19	; 25
   145b8:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   145bc:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   145c0:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   145c4:	03 a1       	ldd	r16, Z+35	; 0x23
   145c6:	10 e0       	ldi	r17, 0x00	; 0
   145c8:	20 e0       	ldi	r18, 0x00	; 0
   145ca:	30 e0       	ldi	r19, 0x00	; 0
   145cc:	41 e0       	ldi	r20, 0x01	; 1
   145ce:	50 e0       	ldi	r21, 0x00	; 0
   145d0:	63 e0       	ldi	r22, 0x03	; 3
   145d2:	70 e0       	ldi	r23, 0x00	; 0
   145d4:	89 e6       	ldi	r24, 0x69	; 105
   145d6:	99 e1       	ldi	r25, 0x19	; 25
   145d8:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   145dc:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   145e0:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   145e4:	04 a1       	ldd	r16, Z+36	; 0x24
   145e6:	15 a1       	ldd	r17, Z+37	; 0x25
   145e8:	20 e0       	ldi	r18, 0x00	; 0
   145ea:	30 e0       	ldi	r19, 0x00	; 0
   145ec:	42 e0       	ldi	r20, 0x02	; 2
   145ee:	50 e0       	ldi	r21, 0x00	; 0
   145f0:	64 e0       	ldi	r22, 0x04	; 4
   145f2:	70 e0       	ldi	r23, 0x00	; 0
   145f4:	89 e6       	ldi	r24, 0x69	; 105
   145f6:	99 e1       	ldi	r25, 0x19	; 25
   145f8:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   145fc:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14600:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   14604:	06 a1       	ldd	r16, Z+38	; 0x26
   14606:	17 a1       	ldd	r17, Z+39	; 0x27
   14608:	20 a5       	ldd	r18, Z+40	; 0x28
   1460a:	31 a5       	ldd	r19, Z+41	; 0x29
   1460c:	46 e0       	ldi	r20, 0x06	; 6
   1460e:	50 e0       	ldi	r21, 0x00	; 0
   14610:	66 e0       	ldi	r22, 0x06	; 6
   14612:	70 e0       	ldi	r23, 0x00	; 0
   14614:	89 e6       	ldi	r24, 0x69	; 105
   14616:	99 e1       	ldi	r25, 0x19	; 25
   14618:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   1461c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14620:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   14624:	02 a5       	ldd	r16, Z+42	; 0x2a
   14626:	10 e0       	ldi	r17, 0x00	; 0
   14628:	20 e0       	ldi	r18, 0x00	; 0
   1462a:	30 e0       	ldi	r19, 0x00	; 0
   1462c:	41 e0       	ldi	r20, 0x01	; 1
   1462e:	50 e0       	ldi	r21, 0x00	; 0
   14630:	6c e0       	ldi	r22, 0x0C	; 12
   14632:	70 e0       	ldi	r23, 0x00	; 0
   14634:	89 e6       	ldi	r24, 0x69	; 105
   14636:	99 e1       	ldi	r25, 0x19	; 25
   14638:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   1463c:	89 e6       	ldi	r24, 0x69	; 105
   1463e:	99 e1       	ldi	r25, 0x19	; 25
   14640:	1f 91       	pop	r17
   14642:	0f 91       	pop	r16
   14644:	08 95       	ret

00014646 <SS80_test_extended_status>:
   14646:	9b 01       	movw	r18, r22
   14648:	43 e0       	ldi	r20, 0x03	; 3
   1464a:	35 95       	asr	r19
   1464c:	27 95       	ror	r18
   1464e:	4a 95       	dec	r20
   14650:	e1 f7       	brne	.-8      	; 0x1464a <SS80_test_extended_status+0x4>
   14652:	82 0f       	add	r24, r18
   14654:	93 1f       	adc	r25, r19
   14656:	67 70       	andi	r22, 0x07	; 7
   14658:	77 27       	eor	r23, r23
   1465a:	20 e8       	ldi	r18, 0x80	; 128
   1465c:	30 e0       	ldi	r19, 0x00	; 0
   1465e:	02 c0       	rjmp	.+4      	; 0x14664 <SS80_test_extended_status+0x1e>
   14660:	35 95       	asr	r19
   14662:	27 95       	ror	r18
   14664:	6a 95       	dec	r22
   14666:	e2 f7       	brpl	.-8      	; 0x14660 <SS80_test_extended_status+0x1a>
   14668:	fc 01       	movw	r30, r24
   1466a:	80 81       	ld	r24, Z
   1466c:	28 23       	and	r18, r24
   1466e:	81 e0       	ldi	r24, 0x01	; 1
   14670:	90 e0       	ldi	r25, 0x00	; 0
   14672:	11 f4       	brne	.+4      	; 0x14678 <SS80_test_extended_status+0x32>
   14674:	80 e0       	ldi	r24, 0x00	; 0
   14676:	90 e0       	ldi	r25, 0x00	; 0
   14678:	08 95       	ret

0001467a <SS80_display_extended_status>:
   1467a:	6f 92       	push	r6
   1467c:	7f 92       	push	r7
   1467e:	8f 92       	push	r8
   14680:	ef 92       	push	r14
   14682:	ff 92       	push	r15
   14684:	0f 93       	push	r16
   14686:	1f 93       	push	r17
   14688:	cf 93       	push	r28
   1468a:	df 93       	push	r29
   1468c:	ad b7       	in	r26, 0x3d	; 61
   1468e:	be b7       	in	r27, 0x3e	; 62
   14690:	17 97       	sbiw	r26, 0x07	; 7
   14692:	0f b6       	in	r0, 0x3f	; 63
   14694:	f8 94       	cli
   14696:	be bf       	out	0x3e, r27	; 62
   14698:	0f be       	out	0x3f, r0	; 63
   1469a:	ad bf       	out	0x3d, r26	; 61
   1469c:	fc 01       	movw	r30, r24
   1469e:	ac 01       	movw	r20, r24
   146a0:	48 5f       	subi	r20, 0xF8	; 248
   146a2:	5f 4f       	sbci	r21, 0xFF	; 255
   146a4:	20 e0       	ldi	r18, 0x00	; 0
   146a6:	30 e0       	ldi	r19, 0x00	; 0
   146a8:	a1 91       	ld	r26, Z+
   146aa:	aa 23       	and	r26, r26
   146ac:	11 f0       	breq	.+4      	; 0x146b2 <SS80_display_extended_status+0x38>
   146ae:	21 e0       	ldi	r18, 0x01	; 1
   146b0:	30 e0       	ldi	r19, 0x00	; 0
   146b2:	e4 17       	cp	r30, r20
   146b4:	f5 07       	cpc	r31, r21
   146b6:	c1 f7       	brne	.-16     	; 0x146a8 <SS80_display_extended_status+0x2e>
   146b8:	23 2b       	or	r18, r19
   146ba:	81 f1       	breq	.+96     	; 0x1471c <SS80_display_extended_status+0xa2>
   146bc:	ec 01       	movw	r28, r24
   146be:	ed b7       	in	r30, 0x3d	; 61
   146c0:	fe b7       	in	r31, 0x3e	; 62
   146c2:	75 83       	std	Z+5, r23	; 0x05
   146c4:	64 83       	std	Z+4, r22	; 0x04
   146c6:	87 ed       	ldi	r24, 0xD7	; 215
   146c8:	93 e2       	ldi	r25, 0x23	; 35
   146ca:	a0 e0       	ldi	r26, 0x00	; 0
   146cc:	81 83       	std	Z+1, r24	; 0x01
   146ce:	92 83       	std	Z+2, r25	; 0x02
   146d0:	a3 83       	std	Z+3, r26	; 0x03
   146d2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   146d6:	0c e7       	ldi	r16, 0x7C	; 124
   146d8:	12 e0       	ldi	r17, 0x02	; 2
   146da:	8c ec       	ldi	r24, 0xCC	; 204
   146dc:	93 e2       	ldi	r25, 0x23	; 35
   146de:	3c 01       	movw	r6, r24
   146e0:	81 2c       	mov	r8, r1
   146e2:	f8 01       	movw	r30, r16
   146e4:	e0 80       	ld	r14, Z
   146e6:	f1 80       	ldd	r15, Z+1	; 0x01
   146e8:	ff ef       	ldi	r31, 0xFF	; 255
   146ea:	ef 16       	cp	r14, r31
   146ec:	ff 06       	cpc	r15, r31
   146ee:	b1 f0       	breq	.+44     	; 0x1471c <SS80_display_extended_status+0xa2>
   146f0:	b7 01       	movw	r22, r14
   146f2:	ce 01       	movw	r24, r28
   146f4:	a8 df       	rcall	.-176    	; 0x14646 <SS80_test_extended_status>
   146f6:	89 2b       	or	r24, r25
   146f8:	71 f0       	breq	.+28     	; 0x14716 <SS80_display_extended_status+0x9c>
   146fa:	f8 01       	movw	r30, r16
   146fc:	82 81       	ldd	r24, Z+2	; 0x02
   146fe:	93 81       	ldd	r25, Z+3	; 0x03
   14700:	ed b7       	in	r30, 0x3d	; 61
   14702:	fe b7       	in	r31, 0x3e	; 62
   14704:	97 83       	std	Z+7, r25	; 0x07
   14706:	86 83       	std	Z+6, r24	; 0x06
   14708:	f5 82       	std	Z+5, r15	; 0x05
   1470a:	e4 82       	std	Z+4, r14	; 0x04
   1470c:	61 82       	std	Z+1, r6	; 0x01
   1470e:	72 82       	std	Z+2, r7	; 0x02
   14710:	83 82       	std	Z+3, r8	; 0x03
   14712:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14716:	0c 5f       	subi	r16, 0xFC	; 252
   14718:	1f 4f       	sbci	r17, 0xFF	; 255
   1471a:	e3 cf       	rjmp	.-58     	; 0x146e2 <SS80_display_extended_status+0x68>
   1471c:	ad b7       	in	r26, 0x3d	; 61
   1471e:	be b7       	in	r27, 0x3e	; 62
   14720:	17 96       	adiw	r26, 0x07	; 7
   14722:	0f b6       	in	r0, 0x3f	; 63
   14724:	f8 94       	cli
   14726:	be bf       	out	0x3e, r27	; 62
   14728:	0f be       	out	0x3f, r0	; 63
   1472a:	ad bf       	out	0x3d, r26	; 61
   1472c:	df 91       	pop	r29
   1472e:	cf 91       	pop	r28
   14730:	1f 91       	pop	r17
   14732:	0f 91       	pop	r16
   14734:	ff 90       	pop	r15
   14736:	ef 90       	pop	r14
   14738:	8f 90       	pop	r8
   1473a:	7f 90       	pop	r7
   1473c:	6f 90       	pop	r6
   1473e:	08 95       	ret

00014740 <SS80_send_status>:
   14740:	a9 e1       	ldi	r26, 0x19	; 25
   14742:	b0 e0       	ldi	r27, 0x00	; 0
   14744:	e6 ea       	ldi	r30, 0xA6	; 166
   14746:	f3 ea       	ldi	r31, 0xA3	; 163
   14748:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
   1474c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14750:	85 ff       	sbrs	r24, 5
   14752:	0a c0       	rjmp	.+20     	; 0x14768 <SS80_send_status+0x28>
   14754:	88 eb       	ldi	r24, 0xB8	; 184
   14756:	93 e2       	ldi	r25, 0x23	; 35
   14758:	a0 e0       	ldi	r26, 0x00	; 0
   1475a:	ed b7       	in	r30, 0x3d	; 61
   1475c:	fe b7       	in	r31, 0x3e	; 62
   1475e:	81 83       	std	Z+1, r24	; 0x01
   14760:	92 83       	std	Z+2, r25	; 0x02
   14762:	a3 83       	std	Z+3, r26	; 0x03
   14764:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14768:	ce 01       	movw	r24, r28
   1476a:	04 96       	adiw	r24, 0x04	; 4
   1476c:	7c 01       	movw	r14, r24
   1476e:	84 e1       	ldi	r24, 0x14	; 20
   14770:	f7 01       	movw	r30, r14
   14772:	11 92       	st	Z+, r1
   14774:	8a 95       	dec	r24
   14776:	e9 f7       	brne	.-6      	; 0x14772 <SS80_send_status+0x32>
   14778:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1477c:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14780:	86 81       	ldd	r24, Z+6	; 0x06
   14782:	20 e1       	ldi	r18, 0x10	; 16
   14784:	82 9f       	mul	r24, r18
   14786:	c0 01       	movw	r24, r0
   14788:	11 24       	eor	r1, r1
   1478a:	95 81       	ldd	r25, Z+5	; 0x05
   1478c:	9f 70       	andi	r25, 0x0F	; 15
   1478e:	89 2b       	or	r24, r25
   14790:	8c 83       	std	Y+4, r24	; 0x04
   14792:	8f ef       	ldi	r24, 0xFF	; 255
   14794:	8d 83       	std	Y+5, r24	; 0x05
   14796:	83 81       	ldd	r24, Z+3	; 0x03
   14798:	86 ff       	sbrs	r24, 6
   1479a:	02 c0       	rjmp	.+4      	; 0x147a0 <SS80_send_status+0x60>
   1479c:	92 e0       	ldi	r25, 0x02	; 2
   1479e:	9e 83       	std	Y+6, r25	; 0x06
   147a0:	82 ff       	sbrs	r24, 2
   147a2:	03 c0       	rjmp	.+6      	; 0x147aa <SS80_send_status+0x6a>
   147a4:	9e 81       	ldd	r25, Y+6	; 0x06
   147a6:	91 60       	ori	r25, 0x01	; 1
   147a8:	9e 83       	std	Y+6, r25	; 0x06
   147aa:	80 ff       	sbrs	r24, 0
   147ac:	02 c0       	rjmp	.+4      	; 0x147b2 <SS80_send_status+0x72>
   147ae:	82 e0       	ldi	r24, 0x02	; 2
   147b0:	88 87       	std	Y+8, r24	; 0x08
   147b2:	83 81       	ldd	r24, Z+3	; 0x03
   147b4:	81 ff       	sbrs	r24, 1
   147b6:	03 c0       	rjmp	.+6      	; 0x147be <SS80_send_status+0x7e>
   147b8:	88 85       	ldd	r24, Y+8	; 0x08
   147ba:	82 60       	ori	r24, 0x02	; 2
   147bc:	88 87       	std	Y+8, r24	; 0x08
   147be:	83 81       	ldd	r24, Z+3	; 0x03
   147c0:	83 ff       	sbrs	r24, 3
   147c2:	02 c0       	rjmp	.+4      	; 0x147c8 <SS80_send_status+0x88>
   147c4:	88 e0       	ldi	r24, 0x08	; 8
   147c6:	8a 87       	std	Y+10, r24	; 0x0a
   147c8:	83 81       	ldd	r24, Z+3	; 0x03
   147ca:	94 81       	ldd	r25, Z+4	; 0x04
   147cc:	89 2b       	or	r24, r25
   147ce:	59 f4       	brne	.+22     	; 0x147e6 <SS80_send_status+0xa6>
   147d0:	07 81       	ldd	r16, Z+7	; 0x07
   147d2:	10 85       	ldd	r17, Z+8	; 0x08
   147d4:	21 85       	ldd	r18, Z+9	; 0x09
   147d6:	32 85       	ldd	r19, Z+10	; 0x0a
   147d8:	46 e0       	ldi	r20, 0x06	; 6
   147da:	50 e0       	ldi	r21, 0x00	; 0
   147dc:	6a e0       	ldi	r22, 0x0A	; 10
   147de:	70 e0       	ldi	r23, 0x00	; 0
   147e0:	c7 01       	movw	r24, r14
   147e2:	0e 94 3a bc 	call	0x17874	; 0x17874 <V2B_MSB>
   147e6:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   147ea:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   147ee:	83 81       	ldd	r24, Z+3	; 0x03
   147f0:	94 81       	ldd	r25, Z+4	; 0x04
   147f2:	89 2b       	or	r24, r25
   147f4:	11 f0       	breq	.+4      	; 0x147fa <SS80_send_status+0xba>
   147f6:	81 e0       	ldi	r24, 0x01	; 1
   147f8:	82 83       	std	Z+2, r24	; 0x02
   147fa:	80 e0       	ldi	r24, 0x00	; 0
   147fc:	91 e0       	ldi	r25, 0x01	; 1
   147fe:	99 8f       	std	Y+25, r25	; 0x19
   14800:	88 8f       	std	Y+24, r24	; 0x18
   14802:	ae 01       	movw	r20, r28
   14804:	48 5e       	subi	r20, 0xE8	; 232
   14806:	5f 4f       	sbci	r21, 0xFF	; 255
   14808:	64 e1       	ldi	r22, 0x14	; 20
   1480a:	70 e0       	ldi	r23, 0x00	; 0
   1480c:	c7 01       	movw	r24, r14
   1480e:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   14812:	44 97       	sbiw	r24, 0x14	; 20
   14814:	71 f0       	breq	.+28     	; 0x14832 <SS80_send_status+0xf2>
   14816:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1481a:	80 ff       	sbrs	r24, 0
   1481c:	0a c0       	rjmp	.+20     	; 0x14832 <SS80_send_status+0xf2>
   1481e:	8d e9       	ldi	r24, 0x9D	; 157
   14820:	93 e2       	ldi	r25, 0x23	; 35
   14822:	a0 e0       	ldi	r26, 0x00	; 0
   14824:	ed b7       	in	r30, 0x3d	; 61
   14826:	fe b7       	in	r31, 0x3e	; 62
   14828:	81 83       	std	Z+1, r24	; 0x01
   1482a:	92 83       	std	Z+2, r25	; 0x02
   1482c:	a3 83       	std	Z+3, r26	; 0x03
   1482e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14832:	88 8d       	ldd	r24, Y+24	; 0x18
   14834:	99 8d       	ldd	r25, Y+25	; 0x19
   14836:	88 27       	eor	r24, r24
   14838:	90 7d       	andi	r25, 0xD0	; 208
   1483a:	69 96       	adiw	r28, 0x19	; 25
   1483c:	e6 e0       	ldi	r30, 0x06	; 6
   1483e:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00014842 <SS80_describe>:
   14842:	a7 e0       	ldi	r26, 0x07	; 7
   14844:	b0 e0       	ldi	r27, 0x00	; 0
   14846:	e7 e2       	ldi	r30, 0x27	; 39
   14848:	f4 ea       	ldi	r31, 0xA4	; 164
   1484a:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   1484e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14852:	85 ff       	sbrs	r24, 5
   14854:	0a c0       	rjmp	.+20     	; 0x1486a <SS80_describe+0x28>
   14856:	8c e8       	ldi	r24, 0x8C	; 140
   14858:	93 e2       	ldi	r25, 0x23	; 35
   1485a:	a0 e0       	ldi	r26, 0x00	; 0
   1485c:	ed b7       	in	r30, 0x3d	; 61
   1485e:	fe b7       	in	r31, 0x3e	; 62
   14860:	81 83       	std	Z+1, r24	; 0x01
   14862:	92 83       	std	Z+2, r25	; 0x02
   14864:	a3 83       	std	Z+3, r26	; 0x03
   14866:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1486a:	1f 82       	std	Y+7, r1	; 0x07
   1486c:	1e 82       	std	Y+6, r1	; 0x06
   1486e:	ce 01       	movw	r24, r28
   14870:	04 96       	adiw	r24, 0x04	; 4
   14872:	85 dd       	rcall	.-1270   	; 0x1437e <SS80ControllerPack>
   14874:	6c 81       	ldd	r22, Y+4	; 0x04
   14876:	7d 81       	ldd	r23, Y+5	; 0x05
   14878:	ae 01       	movw	r20, r28
   1487a:	4a 5f       	subi	r20, 0xFA	; 250
   1487c:	5f 4f       	sbci	r21, 0xFF	; 255
   1487e:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   14882:	2c 81       	ldd	r18, Y+4	; 0x04
   14884:	3d 81       	ldd	r19, Y+5	; 0x05
   14886:	82 17       	cp	r24, r18
   14888:	93 07       	cpc	r25, r19
   1488a:	39 f0       	breq	.+14     	; 0x1489a <SS80_describe+0x58>
   1488c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14890:	80 ff       	sbrs	r24, 0
   14892:	3c c0       	rjmp	.+120    	; 0x1490c <SS80_describe+0xca>
   14894:	89 e6       	ldi	r24, 0x69	; 105
   14896:	93 e2       	ldi	r25, 0x23	; 35
   14898:	31 c0       	rjmp	.+98     	; 0x148fc <SS80_describe+0xba>
   1489a:	1f 82       	std	Y+7, r1	; 0x07
   1489c:	1e 82       	std	Y+6, r1	; 0x06
   1489e:	ce 01       	movw	r24, r28
   148a0:	04 96       	adiw	r24, 0x04	; 4
   148a2:	a9 dd       	rcall	.-1198   	; 0x143f6 <SS80UnitPack>
   148a4:	6c 81       	ldd	r22, Y+4	; 0x04
   148a6:	7d 81       	ldd	r23, Y+5	; 0x05
   148a8:	ae 01       	movw	r20, r28
   148aa:	4a 5f       	subi	r20, 0xFA	; 250
   148ac:	5f 4f       	sbci	r21, 0xFF	; 255
   148ae:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   148b2:	2c 81       	ldd	r18, Y+4	; 0x04
   148b4:	3d 81       	ldd	r19, Y+5	; 0x05
   148b6:	82 17       	cp	r24, r18
   148b8:	93 07       	cpc	r25, r19
   148ba:	39 f0       	breq	.+14     	; 0x148ca <SS80_describe+0x88>
   148bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   148c0:	80 ff       	sbrs	r24, 0
   148c2:	24 c0       	rjmp	.+72     	; 0x1490c <SS80_describe+0xca>
   148c4:	8c e4       	ldi	r24, 0x4C	; 76
   148c6:	93 e2       	ldi	r25, 0x23	; 35
   148c8:	19 c0       	rjmp	.+50     	; 0x148fc <SS80_describe+0xba>
   148ca:	80 e0       	ldi	r24, 0x00	; 0
   148cc:	91 e0       	ldi	r25, 0x01	; 1
   148ce:	9f 83       	std	Y+7, r25	; 0x07
   148d0:	8e 83       	std	Y+6, r24	; 0x06
   148d2:	ce 01       	movw	r24, r28
   148d4:	04 96       	adiw	r24, 0x04	; 4
   148d6:	5b de       	rcall	.-842    	; 0x1458e <SS80VolumePack>
   148d8:	6c 81       	ldd	r22, Y+4	; 0x04
   148da:	7d 81       	ldd	r23, Y+5	; 0x05
   148dc:	ae 01       	movw	r20, r28
   148de:	4a 5f       	subi	r20, 0xFA	; 250
   148e0:	5f 4f       	sbci	r21, 0xFF	; 255
   148e2:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   148e6:	2c 81       	ldd	r18, Y+4	; 0x04
   148e8:	3d 81       	ldd	r19, Y+5	; 0x05
   148ea:	82 17       	cp	r24, r18
   148ec:	93 07       	cpc	r25, r19
   148ee:	99 f0       	breq	.+38     	; 0x14916 <SS80_describe+0xd4>
   148f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   148f4:	80 ff       	sbrs	r24, 0
   148f6:	0a c0       	rjmp	.+20     	; 0x1490c <SS80_describe+0xca>
   148f8:	8d e2       	ldi	r24, 0x2D	; 45
   148fa:	93 e2       	ldi	r25, 0x23	; 35
   148fc:	a0 e0       	ldi	r26, 0x00	; 0
   148fe:	ed b7       	in	r30, 0x3d	; 61
   14900:	fe b7       	in	r31, 0x3e	; 62
   14902:	81 83       	std	Z+1, r24	; 0x01
   14904:	92 83       	std	Z+2, r25	; 0x02
   14906:	a3 83       	std	Z+3, r26	; 0x03
   14908:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1490c:	8e 81       	ldd	r24, Y+6	; 0x06
   1490e:	9f 81       	ldd	r25, Y+7	; 0x07
   14910:	88 27       	eor	r24, r24
   14912:	90 7d       	andi	r25, 0xD0	; 208
   14914:	02 c0       	rjmp	.+4      	; 0x1491a <SS80_describe+0xd8>
   14916:	80 e0       	ldi	r24, 0x00	; 0
   14918:	90 e0       	ldi	r25, 0x00	; 0
   1491a:	27 96       	adiw	r28, 0x07	; 7
   1491c:	e2 e0       	ldi	r30, 0x02	; 2
   1491e:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00014922 <SS80_Check_Unit>:
   14922:	00 d0       	rcall	.+0      	; 0x14924 <SS80_Check_Unit+0x2>
   14924:	00 d0       	rcall	.+0      	; 0x14926 <SS80_Check_Unit+0x4>
   14926:	1f 92       	push	r1
   14928:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1492c:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14930:	88 23       	and	r24, r24
   14932:	c9 f0       	breq	.+50     	; 0x14966 <SS80_Check_Unit+0x44>
   14934:	8f 30       	cpi	r24, 0x0F	; 15
   14936:	b9 f0       	breq	.+46     	; 0x14966 <SS80_Check_Unit+0x44>
   14938:	23 81       	ldd	r18, Z+3	; 0x03
   1493a:	34 81       	ldd	r19, Z+4	; 0x04
   1493c:	20 64       	ori	r18, 0x40	; 64
   1493e:	34 83       	std	Z+4, r19	; 0x04
   14940:	23 83       	std	Z+3, r18	; 0x03
   14942:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14946:	90 ff       	sbrs	r25, 0
   14948:	0f c0       	rjmp	.+30     	; 0x14968 <SS80_Check_Unit+0x46>
   1494a:	90 e0       	ldi	r25, 0x00	; 0
   1494c:	ed b7       	in	r30, 0x3d	; 61
   1494e:	fe b7       	in	r31, 0x3e	; 62
   14950:	95 83       	std	Z+5, r25	; 0x05
   14952:	84 83       	std	Z+4, r24	; 0x04
   14954:	85 e1       	ldi	r24, 0x15	; 21
   14956:	93 e2       	ldi	r25, 0x23	; 35
   14958:	a0 e0       	ldi	r26, 0x00	; 0
   1495a:	81 83       	std	Z+1, r24	; 0x01
   1495c:	92 83       	std	Z+2, r25	; 0x02
   1495e:	a3 83       	std	Z+3, r26	; 0x03
   14960:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14964:	01 c0       	rjmp	.+2      	; 0x14968 <SS80_Check_Unit+0x46>
   14966:	85 83       	std	Z+5, r24	; 0x05
   14968:	0f 90       	pop	r0
   1496a:	0f 90       	pop	r0
   1496c:	0f 90       	pop	r0
   1496e:	0f 90       	pop	r0
   14970:	0f 90       	pop	r0
   14972:	08 95       	ret

00014974 <SS80_Check_Volume>:
   14974:	00 d0       	rcall	.+0      	; 0x14976 <SS80_Check_Volume+0x2>
   14976:	00 d0       	rcall	.+0      	; 0x14978 <SS80_Check_Volume+0x4>
   14978:	1f 92       	push	r1
   1497a:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1497e:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14982:	88 23       	and	r24, r24
   14984:	b9 f0       	breq	.+46     	; 0x149b4 <SS80_Check_Volume+0x40>
   14986:	23 81       	ldd	r18, Z+3	; 0x03
   14988:	34 81       	ldd	r19, Z+4	; 0x04
   1498a:	20 64       	ori	r18, 0x40	; 64
   1498c:	34 83       	std	Z+4, r19	; 0x04
   1498e:	23 83       	std	Z+3, r18	; 0x03
   14990:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14994:	90 ff       	sbrs	r25, 0
   14996:	0f c0       	rjmp	.+30     	; 0x149b6 <SS80_Check_Volume+0x42>
   14998:	90 e0       	ldi	r25, 0x00	; 0
   1499a:	ed b7       	in	r30, 0x3d	; 61
   1499c:	fe b7       	in	r31, 0x3e	; 62
   1499e:	95 83       	std	Z+5, r25	; 0x05
   149a0:	84 83       	std	Z+4, r24	; 0x04
   149a2:	8b ef       	ldi	r24, 0xFB	; 251
   149a4:	92 e2       	ldi	r25, 0x22	; 34
   149a6:	a0 e0       	ldi	r26, 0x00	; 0
   149a8:	81 83       	std	Z+1, r24	; 0x01
   149aa:	92 83       	std	Z+2, r25	; 0x02
   149ac:	a3 83       	std	Z+3, r26	; 0x03
   149ae:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   149b2:	01 c0       	rjmp	.+2      	; 0x149b6 <SS80_Check_Volume+0x42>
   149b4:	16 82       	std	Z+6, r1	; 0x06
   149b6:	0f 90       	pop	r0
   149b8:	0f 90       	pop	r0
   149ba:	0f 90       	pop	r0
   149bc:	0f 90       	pop	r0
   149be:	0f 90       	pop	r0
   149c0:	08 95       	ret

000149c2 <SS80_Command_State>:
   149c2:	2f 92       	push	r2
   149c4:	3f 92       	push	r3
   149c6:	4f 92       	push	r4
   149c8:	6f 92       	push	r6
   149ca:	7f 92       	push	r7
   149cc:	8f 92       	push	r8
   149ce:	af 92       	push	r10
   149d0:	bf 92       	push	r11
   149d2:	cf 92       	push	r12
   149d4:	ef 92       	push	r14
   149d6:	ff 92       	push	r15
   149d8:	0f 93       	push	r16
   149da:	1f 93       	push	r17
   149dc:	cf 93       	push	r28
   149de:	df 93       	push	r29
   149e0:	cd b7       	in	r28, 0x3d	; 61
   149e2:	de b7       	in	r29, 0x3e	; 62
   149e4:	66 97       	sbiw	r28, 0x16	; 22
   149e6:	0f b6       	in	r0, 0x3f	; 63
   149e8:	f8 94       	cli
   149ea:	de bf       	out	0x3e, r29	; 62
   149ec:	0f be       	out	0x3f, r0	; 63
   149ee:	cd bf       	out	0x3d, r28	; 61
   149f0:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   149f4:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   149f8:	81 81       	ldd	r24, Z+1	; 0x01
   149fa:	90 e0       	ldi	r25, 0x00	; 0
   149fc:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
   14a00:	80 e0       	ldi	r24, 0x00	; 0
   14a02:	91 e0       	ldi	r25, 0x01	; 1
   14a04:	99 87       	std	Y+9, r25	; 0x09
   14a06:	88 87       	std	Y+8, r24	; 0x08
   14a08:	ae 01       	movw	r20, r28
   14a0a:	48 5f       	subi	r20, 0xF8	; 248
   14a0c:	5f 4f       	sbci	r21, 0xFF	; 255
   14a0e:	60 e0       	ldi	r22, 0x00	; 0
   14a10:	72 e0       	ldi	r23, 0x02	; 2
   14a12:	8a ed       	ldi	r24, 0xDA	; 218
   14a14:	9c e1       	ldi	r25, 0x1C	; 28
   14a16:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
   14a1a:	9b 87       	std	Y+11, r25	; 0x0b
   14a1c:	8a 87       	std	Y+10, r24	; 0x0a
   14a1e:	88 85       	ldd	r24, Y+8	; 0x08
   14a20:	99 85       	ldd	r25, Y+9	; 0x09
   14a22:	9c 01       	movw	r18, r24
   14a24:	22 27       	eor	r18, r18
   14a26:	30 7d       	andi	r19, 0xD0	; 208
   14a28:	23 2b       	or	r18, r19
   14a2a:	79 f0       	breq	.+30     	; 0x14a4a <SS80_Command_State+0x88>
   14a2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a30:	80 ff       	sbrs	r24, 0
   14a32:	21 c2       	rjmp	.+1090   	; 0x14e76 <SS80_Command_State+0x4b4>
   14a34:	85 ed       	ldi	r24, 0xD5	; 213
   14a36:	92 e2       	ldi	r25, 0x22	; 34
   14a38:	a0 e0       	ldi	r26, 0x00	; 0
   14a3a:	ed b7       	in	r30, 0x3d	; 61
   14a3c:	fe b7       	in	r31, 0x3e	; 62
   14a3e:	81 83       	std	Z+1, r24	; 0x01
   14a40:	92 83       	std	Z+2, r25	; 0x02
   14a42:	a3 83       	std	Z+3, r26	; 0x03
   14a44:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14a48:	16 c2       	rjmp	.+1068   	; 0x14e76 <SS80_Command_State+0x4b4>
   14a4a:	2a 85       	ldd	r18, Y+10	; 0x0a
   14a4c:	3b 85       	ldd	r19, Y+11	; 0x0b
   14a4e:	23 2b       	or	r18, r19
   14a50:	09 f4       	brne	.+2      	; 0x14a54 <SS80_Command_State+0x92>
   14a52:	16 c2       	rjmp	.+1068   	; 0x14e80 <SS80_Command_State+0x4be>
   14a54:	90 fd       	sbrc	r25, 0
   14a56:	0e c0       	rjmp	.+28     	; 0x14a74 <SS80_Command_State+0xb2>
   14a58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a5c:	80 ff       	sbrs	r24, 0
   14a5e:	0a c0       	rjmp	.+20     	; 0x14a74 <SS80_Command_State+0xb2>
   14a60:	8c eb       	ldi	r24, 0xBC	; 188
   14a62:	92 e2       	ldi	r25, 0x22	; 34
   14a64:	a0 e0       	ldi	r26, 0x00	; 0
   14a66:	ed b7       	in	r30, 0x3d	; 61
   14a68:	fe b7       	in	r31, 0x3e	; 62
   14a6a:	81 83       	std	Z+1, r24	; 0x01
   14a6c:	92 83       	std	Z+2, r25	; 0x02
   14a6e:	a3 83       	std	Z+3, r26	; 0x03
   14a70:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14a74:	e1 2c       	mov	r14, r1
   14a76:	f1 2c       	mov	r15, r1
   14a78:	80 ec       	ldi	r24, 0xC0	; 192
   14a7a:	91 e2       	ldi	r25, 0x21	; 33
   14a7c:	9c 01       	movw	r18, r24
   14a7e:	40 e0       	ldi	r20, 0x00	; 0
   14a80:	2e 87       	std	Y+14, r18	; 0x0e
   14a82:	3f 87       	std	Y+15, r19	; 0x0f
   14a84:	48 8b       	std	Y+16, r20	; 0x10
   14a86:	85 ee       	ldi	r24, 0xE5	; 229
   14a88:	91 e2       	ldi	r25, 0x21	; 33
   14a8a:	9c 01       	movw	r18, r24
   14a8c:	40 e0       	ldi	r20, 0x00	; 0
   14a8e:	29 8b       	std	Y+17, r18	; 0x11
   14a90:	3a 8b       	std	Y+18, r19	; 0x12
   14a92:	4b 8b       	std	Y+19, r20	; 0x13
   14a94:	8f ef       	ldi	r24, 0xFF	; 255
   14a96:	91 e2       	ldi	r25, 0x21	; 33
   14a98:	9c 01       	movw	r18, r24
   14a9a:	40 e0       	ldi	r20, 0x00	; 0
   14a9c:	2c 8b       	std	Y+20, r18	; 0x14
   14a9e:	3d 8b       	std	Y+21, r19	; 0x15
   14aa0:	4e 8b       	std	Y+22, r20	; 0x16
   14aa2:	85 e1       	ldi	r24, 0x15	; 21
   14aa4:	92 e2       	ldi	r25, 0x22	; 34
   14aa6:	3c 01       	movw	r6, r24
   14aa8:	81 2c       	mov	r8, r1
   14aaa:	83 e2       	ldi	r24, 0x23	; 35
   14aac:	92 e2       	ldi	r25, 0x22	; 34
   14aae:	5c 01       	movw	r10, r24
   14ab0:	c1 2c       	mov	r12, r1
   14ab2:	8f e3       	ldi	r24, 0x3F	; 63
   14ab4:	92 e2       	ldi	r25, 0x22	; 34
   14ab6:	1c 01       	movw	r2, r24
   14ab8:	41 2c       	mov	r4, r1
   14aba:	2a 85       	ldd	r18, Y+10	; 0x0a
   14abc:	3b 85       	ldd	r19, Y+11	; 0x0b
   14abe:	87 01       	movw	r16, r14
   14ac0:	e2 16       	cp	r14, r18
   14ac2:	f3 06       	cpc	r15, r19
   14ac4:	0c f0       	brlt	.+2      	; 0x14ac8 <SS80_Command_State+0x106>
   14ac6:	b6 c1       	rjmp	.+876    	; 0x14e34 <SS80_Command_State+0x472>
   14ac8:	0f 5f       	subi	r16, 0xFF	; 255
   14aca:	1f 4f       	sbci	r17, 0xFF	; 255
   14acc:	f7 01       	movw	r30, r14
   14ace:	e6 52       	subi	r30, 0x26	; 38
   14ad0:	f3 4e       	sbci	r31, 0xE3	; 227
   14ad2:	80 81       	ld	r24, Z
   14ad4:	28 2f       	mov	r18, r24
   14ad6:	30 e0       	ldi	r19, 0x00	; 0
   14ad8:	a9 01       	movw	r20, r18
   14ada:	40 52       	subi	r20, 0x20	; 32
   14adc:	51 09       	sbc	r21, r1
   14ade:	40 31       	cpi	r20, 0x10	; 16
   14ae0:	51 05       	cpc	r21, r1
   14ae2:	98 f4       	brcc	.+38     	; 0x14b0a <SS80_Command_State+0x148>
   14ae4:	80 52       	subi	r24, 0x20	; 32
   14ae6:	1d df       	rcall	.-454    	; 0x14922 <SS80_Check_Unit>
   14ae8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14aec:	85 ff       	sbrs	r24, 5
   14aee:	a0 c1       	rjmp	.+832    	; 0x14e30 <SS80_Command_State+0x46e>
   14af0:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14af4:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14af8:	85 81       	ldd	r24, Z+5	; 0x05
   14afa:	90 e0       	ldi	r25, 0x00	; 0
   14afc:	ed b7       	in	r30, 0x3d	; 61
   14afe:	fe b7       	in	r31, 0x3e	; 62
   14b00:	95 83       	std	Z+5, r25	; 0x05
   14b02:	84 83       	std	Z+4, r24	; 0x04
   14b04:	86 ea       	ldi	r24, 0xA6	; 166
   14b06:	92 e2       	ldi	r25, 0x22	; 34
   14b08:	19 c0       	rjmp	.+50     	; 0x14b3c <SS80_Command_State+0x17a>
   14b0a:	a9 01       	movw	r20, r18
   14b0c:	40 54       	subi	r20, 0x40	; 64
   14b0e:	51 09       	sbc	r21, r1
   14b10:	40 31       	cpi	r20, 0x10	; 16
   14b12:	51 05       	cpc	r21, r1
   14b14:	d0 f4       	brcc	.+52     	; 0x14b4a <SS80_Command_State+0x188>
   14b16:	80 54       	subi	r24, 0x40	; 64
   14b18:	2d df       	rcall	.-422    	; 0x14974 <SS80_Check_Volume>
   14b1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b1e:	85 ff       	sbrs	r24, 5
   14b20:	87 c1       	rjmp	.+782    	; 0x14e30 <SS80_Command_State+0x46e>
   14b22:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14b26:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14b2a:	86 81       	ldd	r24, Z+6	; 0x06
   14b2c:	90 e0       	ldi	r25, 0x00	; 0
   14b2e:	ed b7       	in	r30, 0x3d	; 61
   14b30:	fe b7       	in	r31, 0x3e	; 62
   14b32:	95 83       	std	Z+5, r25	; 0x05
   14b34:	84 83       	std	Z+4, r24	; 0x04
   14b36:	2d e8       	ldi	r18, 0x8D	; 141
   14b38:	32 e2       	ldi	r19, 0x22	; 34
   14b3a:	c9 01       	movw	r24, r18
   14b3c:	a0 e0       	ldi	r26, 0x00	; 0
   14b3e:	81 83       	std	Z+1, r24	; 0x01
   14b40:	92 83       	std	Z+2, r25	; 0x02
   14b42:	a3 83       	std	Z+3, r26	; 0x03
   14b44:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14b48:	73 c1       	rjmp	.+742    	; 0x14e30 <SS80_Command_State+0x46e>
   14b4a:	21 15       	cp	r18, r1
   14b4c:	31 05       	cpc	r19, r1
   14b4e:	79 f4       	brne	.+30     	; 0x14b6e <SS80_Command_State+0x1ac>
   14b50:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14b54:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14b58:	81 e0       	ldi	r24, 0x01	; 1
   14b5a:	90 e0       	ldi	r25, 0x00	; 0
   14b5c:	91 83       	std	Z+1, r25	; 0x01
   14b5e:	80 83       	st	Z, r24
   14b60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b64:	85 ff       	sbrs	r24, 5
   14b66:	66 c1       	rjmp	.+716    	; 0x14e34 <SS80_Command_State+0x472>
   14b68:	85 e7       	ldi	r24, 0x75	; 117
   14b6a:	92 e2       	ldi	r25, 0x22	; 34
   14b6c:	0f c0       	rjmp	.+30     	; 0x14b8c <SS80_Command_State+0x1ca>
   14b6e:	22 30       	cpi	r18, 0x02	; 2
   14b70:	31 05       	cpc	r19, r1
   14b72:	a9 f4       	brne	.+42     	; 0x14b9e <SS80_Command_State+0x1dc>
   14b74:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14b78:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14b7c:	31 83       	std	Z+1, r19	; 0x01
   14b7e:	20 83       	st	Z, r18
   14b80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b84:	85 ff       	sbrs	r24, 5
   14b86:	56 c1       	rjmp	.+684    	; 0x14e34 <SS80_Command_State+0x472>
   14b88:	8c e5       	ldi	r24, 0x5C	; 92
   14b8a:	92 e2       	ldi	r25, 0x22	; 34
   14b8c:	a0 e0       	ldi	r26, 0x00	; 0
   14b8e:	ed b7       	in	r30, 0x3d	; 61
   14b90:	fe b7       	in	r31, 0x3e	; 62
   14b92:	81 83       	std	Z+1, r24	; 0x01
   14b94:	92 83       	std	Z+2, r25	; 0x02
   14b96:	a3 83       	std	Z+3, r26	; 0x03
   14b98:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14b9c:	4b c1       	rjmp	.+662    	; 0x14e34 <SS80_Command_State+0x472>
   14b9e:	20 31       	cpi	r18, 0x10	; 16
   14ba0:	31 05       	cpc	r19, r1
   14ba2:	b1 f5       	brne	.+108    	; 0x14c10 <SS80_Command_State+0x24e>
   14ba4:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <SS80s>
   14ba8:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <SS80s+0x1>
   14bac:	3d 87       	std	Y+13, r19	; 0x0d
   14bae:	2c 87       	std	Y+12, r18	; 0x0c
   14bb0:	46 e0       	ldi	r20, 0x06	; 6
   14bb2:	50 e0       	ldi	r21, 0x00	; 0
   14bb4:	b8 01       	movw	r22, r16
   14bb6:	8a ed       	ldi	r24, 0xDA	; 218
   14bb8:	9c e1       	ldi	r25, 0x1C	; 28
   14bba:	0e 94 63 bc 	call	0x178c6	; 0x178c6 <B2V_MSB>
   14bbe:	ec 85       	ldd	r30, Y+12	; 0x0c
   14bc0:	fd 85       	ldd	r31, Y+13	; 0x0d
   14bc2:	67 83       	std	Z+7, r22	; 0x07
   14bc4:	70 87       	std	Z+8, r23	; 0x08
   14bc6:	81 87       	std	Z+9, r24	; 0x09
   14bc8:	92 87       	std	Z+10, r25	; 0x0a
   14bca:	87 01       	movw	r16, r14
   14bcc:	09 5f       	subi	r16, 0xF9	; 249
   14bce:	1f 4f       	sbci	r17, 0xFF	; 255
   14bd0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bd4:	85 ff       	sbrs	r24, 5
   14bd6:	2c c1       	rjmp	.+600    	; 0x14e30 <SS80_Command_State+0x46e>
   14bd8:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <SS80s>
   14bdc:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <SS80s+0x1>
   14be0:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <SS80p>
   14be4:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <SS80p+0x1>
   14be8:	fc 01       	movw	r30, r24
   14bea:	a0 89       	ldd	r26, Z+16	; 0x10
   14bec:	b1 89       	ldd	r27, Z+17	; 0x11
   14bee:	f9 01       	movw	r30, r18
   14bf0:	27 81       	ldd	r18, Z+7	; 0x07
   14bf2:	30 85       	ldd	r19, Z+8	; 0x08
   14bf4:	41 85       	ldd	r20, Z+9	; 0x09
   14bf6:	52 85       	ldd	r21, Z+10	; 0x0a
   14bf8:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
   14bfc:	ed b7       	in	r30, 0x3d	; 61
   14bfe:	fe b7       	in	r31, 0x3e	; 62
   14c00:	64 83       	std	Z+4, r22	; 0x04
   14c02:	75 83       	std	Z+5, r23	; 0x05
   14c04:	86 83       	std	Z+6, r24	; 0x06
   14c06:	97 83       	std	Z+7, r25	; 0x07
   14c08:	21 82       	std	Z+1, r2	; 0x01
   14c0a:	32 82       	std	Z+2, r3	; 0x02
   14c0c:	43 82       	std	Z+3, r4	; 0x03
   14c0e:	2e c0       	rjmp	.+92     	; 0x14c6c <SS80_Command_State+0x2aa>
   14c10:	28 31       	cpi	r18, 0x18	; 24
   14c12:	31 05       	cpc	r19, r1
   14c14:	71 f5       	brne	.+92     	; 0x14c72 <SS80_Command_State+0x2b0>
   14c16:	20 91 57 19 	lds	r18, 0x1957	; 0x801957 <SS80s>
   14c1a:	30 91 58 19 	lds	r19, 0x1958	; 0x801958 <SS80s+0x1>
   14c1e:	3d 87       	std	Y+13, r19	; 0x0d
   14c20:	2c 87       	std	Y+12, r18	; 0x0c
   14c22:	44 e0       	ldi	r20, 0x04	; 4
   14c24:	50 e0       	ldi	r21, 0x00	; 0
   14c26:	b8 01       	movw	r22, r16
   14c28:	8a ed       	ldi	r24, 0xDA	; 218
   14c2a:	9c e1       	ldi	r25, 0x1C	; 28
   14c2c:	0e 94 63 bc 	call	0x178c6	; 0x178c6 <B2V_MSB>
   14c30:	ec 85       	ldd	r30, Y+12	; 0x0c
   14c32:	fd 85       	ldd	r31, Y+13	; 0x0d
   14c34:	63 87       	std	Z+11, r22	; 0x0b
   14c36:	74 87       	std	Z+12, r23	; 0x0c
   14c38:	85 87       	std	Z+13, r24	; 0x0d
   14c3a:	96 87       	std	Z+14, r25	; 0x0e
   14c3c:	87 01       	movw	r16, r14
   14c3e:	0b 5f       	subi	r16, 0xFB	; 251
   14c40:	1f 4f       	sbci	r17, 0xFF	; 255
   14c42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c46:	85 ff       	sbrs	r24, 5
   14c48:	f3 c0       	rjmp	.+486    	; 0x14e30 <SS80_Command_State+0x46e>
   14c4a:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14c4e:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14c52:	83 85       	ldd	r24, Z+11	; 0x0b
   14c54:	94 85       	ldd	r25, Z+12	; 0x0c
   14c56:	a5 85       	ldd	r26, Z+13	; 0x0d
   14c58:	b6 85       	ldd	r27, Z+14	; 0x0e
   14c5a:	ed b7       	in	r30, 0x3d	; 61
   14c5c:	fe b7       	in	r31, 0x3e	; 62
   14c5e:	84 83       	std	Z+4, r24	; 0x04
   14c60:	95 83       	std	Z+5, r25	; 0x05
   14c62:	a6 83       	std	Z+6, r26	; 0x06
   14c64:	b7 83       	std	Z+7, r27	; 0x07
   14c66:	a1 82       	std	Z+1, r10	; 0x01
   14c68:	b2 82       	std	Z+2, r11	; 0x02
   14c6a:	c3 82       	std	Z+3, r12	; 0x03
   14c6c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14c70:	df c0       	rjmp	.+446    	; 0x14e30 <SS80_Command_State+0x46e>
   14c72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c76:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14c7a:	24 33       	cpi	r18, 0x34	; 52
   14c7c:	31 05       	cpc	r19, r1
   14c7e:	41 f4       	brne	.+16     	; 0x14c90 <SS80_Command_State+0x2ce>
   14c80:	85 ff       	sbrs	r24, 5
   14c82:	d6 c0       	rjmp	.+428    	; 0x14e30 <SS80_Command_State+0x46e>
   14c84:	ed b7       	in	r30, 0x3d	; 61
   14c86:	fe b7       	in	r31, 0x3e	; 62
   14c88:	61 82       	std	Z+1, r6	; 0x01
   14c8a:	72 82       	std	Z+2, r7	; 0x02
   14c8c:	83 82       	std	Z+3, r8	; 0x03
   14c8e:	2b c0       	rjmp	.+86     	; 0x14ce6 <SS80_Command_State+0x324>
   14c90:	29 33       	cpi	r18, 0x39	; 57
   14c92:	31 05       	cpc	r19, r1
   14c94:	49 f4       	brne	.+18     	; 0x14ca8 <SS80_Command_State+0x2e6>
   14c96:	87 01       	movw	r16, r14
   14c98:	0d 5f       	subi	r16, 0xFD	; 253
   14c9a:	1f 4f       	sbci	r17, 0xFF	; 255
   14c9c:	85 ff       	sbrs	r24, 5
   14c9e:	c8 c0       	rjmp	.+400    	; 0x14e30 <SS80_Command_State+0x46e>
   14ca0:	2c 89       	ldd	r18, Y+20	; 0x14
   14ca2:	3d 89       	ldd	r19, Y+21	; 0x15
   14ca4:	4e 89       	ldd	r20, Y+22	; 0x16
   14ca6:	1a c0       	rjmp	.+52     	; 0x14cdc <SS80_Command_State+0x31a>
   14ca8:	2b 33       	cpi	r18, 0x3B	; 59
   14caa:	31 05       	cpc	r19, r1
   14cac:	49 f4       	brne	.+18     	; 0x14cc0 <SS80_Command_State+0x2fe>
   14cae:	87 01       	movw	r16, r14
   14cb0:	0e 5f       	subi	r16, 0xFE	; 254
   14cb2:	1f 4f       	sbci	r17, 0xFF	; 255
   14cb4:	85 ff       	sbrs	r24, 5
   14cb6:	bc c0       	rjmp	.+376    	; 0x14e30 <SS80_Command_State+0x46e>
   14cb8:	29 89       	ldd	r18, Y+17	; 0x11
   14cba:	3a 89       	ldd	r19, Y+18	; 0x12
   14cbc:	4b 89       	ldd	r20, Y+19	; 0x13
   14cbe:	0e c0       	rjmp	.+28     	; 0x14cdc <SS80_Command_State+0x31a>
   14cc0:	28 34       	cpi	r18, 0x48	; 72
   14cc2:	31 05       	cpc	r19, r1
   14cc4:	99 f4       	brne	.+38     	; 0x14cec <SS80_Command_State+0x32a>
   14cc6:	87 01       	movw	r16, r14
   14cc8:	0e 5f       	subi	r16, 0xFE	; 254
   14cca:	1f 4f       	sbci	r17, 0xFF	; 255
   14ccc:	80 73       	andi	r24, 0x30	; 48
   14cce:	99 27       	eor	r25, r25
   14cd0:	89 2b       	or	r24, r25
   14cd2:	09 f4       	brne	.+2      	; 0x14cd6 <SS80_Command_State+0x314>
   14cd4:	ad c0       	rjmp	.+346    	; 0x14e30 <SS80_Command_State+0x46e>
   14cd6:	2e 85       	ldd	r18, Y+14	; 0x0e
   14cd8:	3f 85       	ldd	r19, Y+15	; 0x0f
   14cda:	48 89       	ldd	r20, Y+16	; 0x10
   14cdc:	ed b7       	in	r30, 0x3d	; 61
   14cde:	fe b7       	in	r31, 0x3e	; 62
   14ce0:	21 83       	std	Z+1, r18	; 0x01
   14ce2:	32 83       	std	Z+2, r19	; 0x02
   14ce4:	43 83       	std	Z+3, r20	; 0x03
   14ce6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14cea:	a2 c0       	rjmp	.+324    	; 0x14e30 <SS80_Command_State+0x46e>
   14cec:	24 30       	cpi	r18, 0x04	; 4
   14cee:	31 05       	cpc	r19, r1
   14cf0:	41 f4       	brne	.+16     	; 0x14d02 <SS80_Command_State+0x340>
   14cf2:	80 73       	andi	r24, 0x30	; 48
   14cf4:	99 27       	eor	r25, r25
   14cf6:	89 2b       	or	r24, r25
   14cf8:	09 f4       	brne	.+2      	; 0x14cfc <SS80_Command_State+0x33a>
   14cfa:	9c c0       	rjmp	.+312    	; 0x14e34 <SS80_Command_State+0x472>
   14cfc:	8f e9       	ldi	r24, 0x9F	; 159
   14cfe:	91 e2       	ldi	r25, 0x21	; 33
   14d00:	45 cf       	rjmp	.-374    	; 0x14b8c <SS80_Command_State+0x1ca>
   14d02:	2e 30       	cpi	r18, 0x0E	; 14
   14d04:	31 05       	cpc	r19, r1
   14d06:	29 f4       	brne	.+10     	; 0x14d12 <SS80_Command_State+0x350>
   14d08:	85 ff       	sbrs	r24, 5
   14d0a:	94 c0       	rjmp	.+296    	; 0x14e34 <SS80_Command_State+0x472>
   14d0c:	89 e8       	ldi	r24, 0x89	; 137
   14d0e:	91 e2       	ldi	r25, 0x21	; 33
   14d10:	3d cf       	rjmp	.-390    	; 0x14b8c <SS80_Command_State+0x1ca>
   14d12:	2f 30       	cpi	r18, 0x0F	; 15
   14d14:	31 05       	cpc	r19, r1
   14d16:	29 f4       	brne	.+10     	; 0x14d22 <SS80_Command_State+0x360>
   14d18:	85 ff       	sbrs	r24, 5
   14d1a:	8c c0       	rjmp	.+280    	; 0x14e34 <SS80_Command_State+0x472>
   14d1c:	8c e6       	ldi	r24, 0x6C	; 108
   14d1e:	91 e2       	ldi	r25, 0x21	; 33
   14d20:	35 cf       	rjmp	.-406    	; 0x14b8c <SS80_Command_State+0x1ca>
   14d22:	21 33       	cpi	r18, 0x31	; 49
   14d24:	31 05       	cpc	r19, r1
   14d26:	59 f4       	brne	.+22     	; 0x14d3e <SS80_Command_State+0x37c>
   14d28:	87 01       	movw	r16, r14
   14d2a:	0d 5f       	subi	r16, 0xFD	; 253
   14d2c:	1f 4f       	sbci	r17, 0xFF	; 255
   14d2e:	80 73       	andi	r24, 0x30	; 48
   14d30:	99 27       	eor	r25, r25
   14d32:	89 2b       	or	r24, r25
   14d34:	09 f4       	brne	.+2      	; 0x14d38 <SS80_Command_State+0x376>
   14d36:	7e c0       	rjmp	.+252    	; 0x14e34 <SS80_Command_State+0x472>
   14d38:	80 e5       	ldi	r24, 0x50	; 80
   14d3a:	91 e2       	ldi	r25, 0x21	; 33
   14d3c:	27 cf       	rjmp	.-434    	; 0x14b8c <SS80_Command_State+0x1ca>
   14d3e:	25 33       	cpi	r18, 0x35	; 53
   14d40:	31 05       	cpc	r19, r1
   14d42:	69 f4       	brne	.+26     	; 0x14d5e <SS80_Command_State+0x39c>
   14d44:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14d48:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14d4c:	24 e0       	ldi	r18, 0x04	; 4
   14d4e:	30 e0       	ldi	r19, 0x00	; 0
   14d50:	31 83       	std	Z+1, r19	; 0x01
   14d52:	20 83       	st	Z, r18
   14d54:	85 ff       	sbrs	r24, 5
   14d56:	6e c0       	rjmp	.+220    	; 0x14e34 <SS80_Command_State+0x472>
   14d58:	8f e3       	ldi	r24, 0x3F	; 63
   14d5a:	91 e2       	ldi	r25, 0x21	; 33
   14d5c:	17 cf       	rjmp	.-466    	; 0x14b8c <SS80_Command_State+0x1ca>
   14d5e:	27 33       	cpi	r18, 0x37	; 55
   14d60:	31 05       	cpc	r19, r1
   14d62:	59 f4       	brne	.+22     	; 0x14d7a <SS80_Command_State+0x3b8>
   14d64:	87 01       	movw	r16, r14
   14d66:	0d 5f       	subi	r16, 0xFD	; 253
   14d68:	1f 4f       	sbci	r17, 0xFF	; 255
   14d6a:	80 73       	andi	r24, 0x30	; 48
   14d6c:	99 27       	eor	r25, r25
   14d6e:	89 2b       	or	r24, r25
   14d70:	09 f4       	brne	.+2      	; 0x14d74 <SS80_Command_State+0x3b2>
   14d72:	60 c0       	rjmp	.+192    	; 0x14e34 <SS80_Command_State+0x472>
   14d74:	81 e2       	ldi	r24, 0x21	; 33
   14d76:	91 e2       	ldi	r25, 0x21	; 33
   14d78:	09 cf       	rjmp	.-494    	; 0x14b8c <SS80_Command_State+0x1ca>
   14d7a:	2e 33       	cpi	r18, 0x3E	; 62
   14d7c:	31 05       	cpc	r19, r1
   14d7e:	c1 f4       	brne	.+48     	; 0x14db0 <SS80_Command_State+0x3ee>
   14d80:	80 73       	andi	r24, 0x30	; 48
   14d82:	99 27       	eor	r25, r25
   14d84:	89 2b       	or	r24, r25
   14d86:	81 f0       	breq	.+32     	; 0x14da8 <SS80_Command_State+0x3e6>
   14d88:	82 e0       	ldi	r24, 0x02	; 2
   14d8a:	91 e2       	ldi	r25, 0x21	; 33
   14d8c:	a0 e0       	ldi	r26, 0x00	; 0
   14d8e:	ed b7       	in	r30, 0x3d	; 61
   14d90:	fe b7       	in	r31, 0x3e	; 62
   14d92:	81 83       	std	Z+1, r24	; 0x01
   14d94:	92 83       	std	Z+2, r25	; 0x02
   14d96:	a3 83       	std	Z+3, r26	; 0x03
   14d98:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14d9c:	63 e7       	ldi	r22, 0x73	; 115
   14d9e:	70 e1       	ldi	r23, 0x10	; 16
   14da0:	c8 01       	movw	r24, r16
   14da2:	86 52       	subi	r24, 0x26	; 38
   14da4:	93 4e       	sbci	r25, 0xE3	; 227
   14da6:	69 dc       	rcall	.-1838   	; 0x1467a <SS80_display_extended_status>
   14da8:	87 01       	movw	r16, r14
   14daa:	07 5f       	subi	r16, 0xF7	; 247
   14dac:	1f 4f       	sbci	r17, 0xFF	; 255
   14dae:	42 c0       	rjmp	.+132    	; 0x14e34 <SS80_Command_State+0x472>
   14db0:	2c 34       	cpi	r18, 0x4C	; 76
   14db2:	31 05       	cpc	r19, r1
   14db4:	39 f4       	brne	.+14     	; 0x14dc4 <SS80_Command_State+0x402>
   14db6:	80 73       	andi	r24, 0x30	; 48
   14db8:	99 27       	eor	r25, r25
   14dba:	89 2b       	or	r24, r25
   14dbc:	d9 f1       	breq	.+118    	; 0x14e34 <SS80_Command_State+0x472>
   14dbe:	87 ee       	ldi	r24, 0xE7	; 231
   14dc0:	90 e2       	ldi	r25, 0x20	; 32
   14dc2:	e4 ce       	rjmp	.-568    	; 0x14b8c <SS80_Command_State+0x1ca>
   14dc4:	2d 34       	cpi	r18, 0x4D	; 77
   14dc6:	31 05       	cpc	r19, r1
   14dc8:	39 f4       	brne	.+14     	; 0x14dd8 <SS80_Command_State+0x416>
   14dca:	80 73       	andi	r24, 0x30	; 48
   14dcc:	99 27       	eor	r25, r25
   14dce:	89 2b       	or	r24, r25
   14dd0:	89 f1       	breq	.+98     	; 0x14e34 <SS80_Command_State+0x472>
   14dd2:	8e ec       	ldi	r24, 0xCE	; 206
   14dd4:	90 e2       	ldi	r25, 0x20	; 32
   14dd6:	da ce       	rjmp	.-588    	; 0x14b8c <SS80_Command_State+0x1ca>
   14dd8:	2d 30       	cpi	r18, 0x0D	; 13
   14dda:	31 05       	cpc	r19, r1
   14ddc:	69 f4       	brne	.+26     	; 0x14df8 <SS80_Command_State+0x436>
   14dde:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   14de2:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   14de6:	23 e0       	ldi	r18, 0x03	; 3
   14de8:	30 e0       	ldi	r19, 0x00	; 0
   14dea:	31 83       	std	Z+1, r19	; 0x01
   14dec:	20 83       	st	Z, r18
   14dee:	85 ff       	sbrs	r24, 5
   14df0:	21 c0       	rjmp	.+66     	; 0x14e34 <SS80_Command_State+0x472>
   14df2:	87 eb       	ldi	r24, 0xB7	; 183
   14df4:	90 e2       	ldi	r25, 0x20	; 32
   14df6:	ca ce       	rjmp	.-620    	; 0x14b8c <SS80_Command_State+0x1ca>
   14df8:	23 33       	cpi	r18, 0x33	; 51
   14dfa:	31 05       	cpc	r19, r1
   14dfc:	51 f4       	brne	.+20     	; 0x14e12 <SS80_Command_State+0x450>
   14dfe:	87 01       	movw	r16, r14
   14e00:	0c 5f       	subi	r16, 0xFC	; 252
   14e02:	1f 4f       	sbci	r17, 0xFF	; 255
   14e04:	80 73       	andi	r24, 0x30	; 48
   14e06:	99 27       	eor	r25, r25
   14e08:	89 2b       	or	r24, r25
   14e0a:	a1 f0       	breq	.+40     	; 0x14e34 <SS80_Command_State+0x472>
   14e0c:	84 e9       	ldi	r24, 0x94	; 148
   14e0e:	90 e2       	ldi	r25, 0x20	; 32
   14e10:	bd ce       	rjmp	.-646    	; 0x14b8c <SS80_Command_State+0x1ca>
   14e12:	80 ff       	sbrs	r24, 0
   14e14:	28 c0       	rjmp	.+80     	; 0x14e66 <SS80_Command_State+0x4a4>
   14e16:	ed b7       	in	r30, 0x3d	; 61
   14e18:	fe b7       	in	r31, 0x3e	; 62
   14e1a:	35 83       	std	Z+5, r19	; 0x05
   14e1c:	24 83       	std	Z+4, r18	; 0x04
   14e1e:	84 e7       	ldi	r24, 0x74	; 116
   14e20:	90 e2       	ldi	r25, 0x20	; 32
   14e22:	a0 e0       	ldi	r26, 0x00	; 0
   14e24:	81 83       	std	Z+1, r24	; 0x01
   14e26:	92 83       	std	Z+2, r25	; 0x02
   14e28:	a3 83       	std	Z+3, r26	; 0x03
   14e2a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14e2e:	02 c0       	rjmp	.+4      	; 0x14e34 <SS80_Command_State+0x472>
   14e30:	78 01       	movw	r14, r16
   14e32:	43 ce       	rjmp	.-890    	; 0x14aba <SS80_Command_State+0xf8>
   14e34:	8a 85       	ldd	r24, Y+10	; 0x0a
   14e36:	9b 85       	ldd	r25, Y+11	; 0x0b
   14e38:	08 17       	cp	r16, r24
   14e3a:	19 07       	cpc	r17, r25
   14e3c:	a1 f0       	breq	.+40     	; 0x14e66 <SS80_Command_State+0x4a4>
   14e3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e42:	80 ff       	sbrs	r24, 0
   14e44:	10 c0       	rjmp	.+32     	; 0x14e66 <SS80_Command_State+0x4a4>
   14e46:	2a 85       	ldd	r18, Y+10	; 0x0a
   14e48:	3b 85       	ldd	r19, Y+11	; 0x0b
   14e4a:	ed b7       	in	r30, 0x3d	; 61
   14e4c:	fe b7       	in	r31, 0x3e	; 62
   14e4e:	37 83       	std	Z+7, r19	; 0x07
   14e50:	26 83       	std	Z+6, r18	; 0x06
   14e52:	15 83       	std	Z+5, r17	; 0x05
   14e54:	04 83       	std	Z+4, r16	; 0x04
   14e56:	8c e3       	ldi	r24, 0x3C	; 60
   14e58:	90 e2       	ldi	r25, 0x20	; 32
   14e5a:	a0 e0       	ldi	r26, 0x00	; 0
   14e5c:	81 83       	std	Z+1, r24	; 0x01
   14e5e:	92 83       	std	Z+2, r25	; 0x02
   14e60:	a3 83       	std	Z+3, r26	; 0x03
   14e62:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14e66:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   14e6a:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   14e6e:	81 81       	ldd	r24, Z+1	; 0x01
   14e70:	90 e0       	ldi	r25, 0x00	; 0
   14e72:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   14e76:	88 85       	ldd	r24, Y+8	; 0x08
   14e78:	99 85       	ldd	r25, Y+9	; 0x09
   14e7a:	88 27       	eor	r24, r24
   14e7c:	90 7d       	andi	r25, 0xD0	; 208
   14e7e:	02 c0       	rjmp	.+4      	; 0x14e84 <SS80_Command_State+0x4c2>
   14e80:	80 e0       	ldi	r24, 0x00	; 0
   14e82:	90 e0       	ldi	r25, 0x00	; 0
   14e84:	66 96       	adiw	r28, 0x16	; 22
   14e86:	0f b6       	in	r0, 0x3f	; 63
   14e88:	f8 94       	cli
   14e8a:	de bf       	out	0x3e, r29	; 62
   14e8c:	0f be       	out	0x3f, r0	; 63
   14e8e:	cd bf       	out	0x3d, r28	; 61
   14e90:	df 91       	pop	r29
   14e92:	cf 91       	pop	r28
   14e94:	1f 91       	pop	r17
   14e96:	0f 91       	pop	r16
   14e98:	ff 90       	pop	r15
   14e9a:	ef 90       	pop	r14
   14e9c:	cf 90       	pop	r12
   14e9e:	bf 90       	pop	r11
   14ea0:	af 90       	pop	r10
   14ea2:	8f 90       	pop	r8
   14ea4:	7f 90       	pop	r7
   14ea6:	6f 90       	pop	r6
   14ea8:	4f 90       	pop	r4
   14eaa:	3f 90       	pop	r3
   14eac:	2f 90       	pop	r2
   14eae:	08 95       	ret

00014eb0 <SS80_cmd_seek>:
   14eb0:	a7 e0       	ldi	r26, 0x07	; 7
   14eb2:	b0 e0       	ldi	r27, 0x00	; 0
   14eb4:	ee e5       	ldi	r30, 0x5E	; 94
   14eb6:	f7 ea       	ldi	r31, 0xA7	; 167
   14eb8:	0c 94 85 e1 	jmp	0x1c30a	; 0x1c30a <__prologue_saves__+0x4>
   14ebc:	c0 91 57 19 	lds	r28, 0x1957	; 0x801957 <SS80s>
   14ec0:	d0 91 58 19 	lds	r29, 0x1958	; 0x801958 <SS80s+0x1>
   14ec4:	8f 80       	ldd	r8, Y+7	; 0x07
   14ec6:	98 84       	ldd	r9, Y+8	; 0x08
   14ec8:	a9 84       	ldd	r10, Y+9	; 0x09
   14eca:	ba 84       	ldd	r11, Y+10	; 0x0a
   14ecc:	00 91 59 19 	lds	r16, 0x1959	; 0x801959 <SS80p>
   14ed0:	10 91 5a 19 	lds	r17, 0x195A	; 0x80195a <SS80p+0x1>
   14ed4:	f8 01       	movw	r30, r16
   14ed6:	c0 88       	ldd	r12, Z+16	; 0x10
   14ed8:	d1 88       	ldd	r13, Z+17	; 0x11
   14eda:	e1 2c       	mov	r14, r1
   14edc:	f1 2c       	mov	r15, r1
   14ede:	6b 85       	ldd	r22, Y+11	; 0x0b
   14ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
   14ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
   14ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
   14ee6:	a7 01       	movw	r20, r14
   14ee8:	96 01       	movw	r18, r12
   14eea:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
   14eee:	da 01       	movw	r26, r20
   14ef0:	c9 01       	movw	r24, r18
   14ef2:	88 0d       	add	r24, r8
   14ef4:	99 1d       	adc	r25, r9
   14ef6:	aa 1d       	adc	r26, r10
   14ef8:	bb 1d       	adc	r27, r11
   14efa:	f8 01       	movw	r30, r16
   14efc:	46 a0       	ldd	r4, Z+38	; 0x26
   14efe:	57 a0       	ldd	r5, Z+39	; 0x27
   14f00:	60 a4       	ldd	r6, Z+40	; 0x28
   14f02:	71 a4       	ldd	r7, Z+41	; 0x29
   14f04:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   14f08:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14f0c:	48 16       	cp	r4, r24
   14f0e:	59 06       	cpc	r5, r25
   14f10:	6a 06       	cpc	r6, r26
   14f12:	7b 06       	cpc	r7, r27
   14f14:	f0 f4       	brcc	.+60     	; 0x14f52 <SS80_cmd_seek+0xa2>
   14f16:	81 e0       	ldi	r24, 0x01	; 1
   14f18:	8a 83       	std	Y+2, r24	; 0x02
   14f1a:	8b 81       	ldd	r24, Y+3	; 0x03
   14f1c:	9c 81       	ldd	r25, Y+4	; 0x04
   14f1e:	84 60       	ori	r24, 0x04	; 4
   14f20:	9c 83       	std	Y+4, r25	; 0x04
   14f22:	8b 83       	std	Y+3, r24	; 0x03
   14f24:	40 ff       	sbrs	r20, 0
   14f26:	31 c0       	rjmp	.+98     	; 0x14f8a <SS80_cmd_seek+0xda>
   14f28:	a0 89       	ldd	r26, Z+16	; 0x10
   14f2a:	b1 89       	ldd	r27, Z+17	; 0x11
   14f2c:	a5 01       	movw	r20, r10
   14f2e:	94 01       	movw	r18, r8
   14f30:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
   14f34:	ed b7       	in	r30, 0x3d	; 61
   14f36:	fe b7       	in	r31, 0x3e	; 62
   14f38:	64 83       	std	Z+4, r22	; 0x04
   14f3a:	75 83       	std	Z+5, r23	; 0x05
   14f3c:	86 83       	std	Z+6, r24	; 0x06
   14f3e:	97 83       	std	Z+7, r25	; 0x07
   14f40:	89 ef       	ldi	r24, 0xF9	; 249
   14f42:	9e e1       	ldi	r25, 0x1E	; 30
   14f44:	a0 e0       	ldi	r26, 0x00	; 0
   14f46:	81 83       	std	Z+1, r24	; 0x01
   14f48:	92 83       	std	Z+2, r25	; 0x02
   14f4a:	a3 83       	std	Z+3, r26	; 0x03
   14f4c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14f50:	1c c0       	rjmp	.+56     	; 0x14f8a <SS80_cmd_seek+0xda>
   14f52:	ca 01       	movw	r24, r20
   14f54:	80 72       	andi	r24, 0x20	; 32
   14f56:	99 27       	eor	r25, r25
   14f58:	45 ff       	sbrs	r20, 5
   14f5a:	19 c0       	rjmp	.+50     	; 0x14f8e <SS80_cmd_seek+0xde>
   14f5c:	a5 01       	movw	r20, r10
   14f5e:	94 01       	movw	r18, r8
   14f60:	c7 01       	movw	r24, r14
   14f62:	b6 01       	movw	r22, r12
   14f64:	0e 94 d4 e0 	call	0x1c1a8	; 0x1c1a8 <__mulsi3>
   14f68:	ed b7       	in	r30, 0x3d	; 61
   14f6a:	fe b7       	in	r31, 0x3e	; 62
   14f6c:	64 83       	std	Z+4, r22	; 0x04
   14f6e:	75 83       	std	Z+5, r23	; 0x05
   14f70:	86 83       	std	Z+6, r24	; 0x06
   14f72:	97 83       	std	Z+7, r25	; 0x07
   14f74:	85 ee       	ldi	r24, 0xE5	; 229
   14f76:	9e e1       	ldi	r25, 0x1E	; 30
   14f78:	a0 e0       	ldi	r26, 0x00	; 0
   14f7a:	81 83       	std	Z+1, r24	; 0x01
   14f7c:	92 83       	std	Z+2, r25	; 0x02
   14f7e:	a3 83       	std	Z+3, r26	; 0x03
   14f80:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   14f84:	80 e0       	ldi	r24, 0x00	; 0
   14f86:	90 e0       	ldi	r25, 0x00	; 0
   14f88:	02 c0       	rjmp	.+4      	; 0x14f8e <SS80_cmd_seek+0xde>
   14f8a:	81 e0       	ldi	r24, 0x01	; 1
   14f8c:	90 e0       	ldi	r25, 0x00	; 0
   14f8e:	cd b7       	in	r28, 0x3d	; 61
   14f90:	de b7       	in	r29, 0x3e	; 62
   14f92:	27 96       	adiw	r28, 0x07	; 7
   14f94:	e0 e1       	ldi	r30, 0x10	; 16
   14f96:	0c 94 a1 e1 	jmp	0x1c342	; 0x1c342 <__epilogue_restores__+0x4>

00014f9a <SS80_locate_and_write>:
   14f9a:	a3 e1       	ldi	r26, 0x13	; 19
   14f9c:	b0 e0       	ldi	r27, 0x00	; 0
   14f9e:	e3 ed       	ldi	r30, 0xD3	; 211
   14fa0:	f7 ea       	ldi	r31, 0xA7	; 167
   14fa2:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   14fa6:	00 91 57 19 	lds	r16, 0x1957	; 0x801957 <SS80s>
   14faa:	10 91 58 19 	lds	r17, 0x1958	; 0x801958 <SS80s+0x1>
   14fae:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <SS80p>
   14fb2:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <SS80p+0x1>
   14fb6:	fc 01       	movw	r30, r24
   14fb8:	a0 89       	ldd	r26, Z+16	; 0x10
   14fba:	b1 89       	ldd	r27, Z+17	; 0x11
   14fbc:	f8 01       	movw	r30, r16
   14fbe:	27 81       	ldd	r18, Z+7	; 0x07
   14fc0:	30 85       	ldd	r19, Z+8	; 0x08
   14fc2:	41 85       	ldd	r20, Z+9	; 0x09
   14fc4:	52 85       	ldd	r21, Z+10	; 0x0a
   14fc6:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
   14fca:	4b 01       	movw	r8, r22
   14fcc:	5c 01       	movw	r10, r24
   14fce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fd2:	85 ff       	sbrs	r24, 5
   14fd4:	16 c0       	rjmp	.+44     	; 0x15002 <SS80_locate_and_write+0x68>
   14fd6:	83 85       	ldd	r24, Z+11	; 0x0b
   14fd8:	94 85       	ldd	r25, Z+12	; 0x0c
   14fda:	a5 85       	ldd	r26, Z+13	; 0x0d
   14fdc:	b6 85       	ldd	r27, Z+14	; 0x0e
   14fde:	ed b7       	in	r30, 0x3d	; 61
   14fe0:	fe b7       	in	r31, 0x3e	; 62
   14fe2:	80 87       	std	Z+8, r24	; 0x08
   14fe4:	91 87       	std	Z+9, r25	; 0x09
   14fe6:	a2 87       	std	Z+10, r26	; 0x0a
   14fe8:	b3 87       	std	Z+11, r27	; 0x0b
   14fea:	84 82       	std	Z+4, r8	; 0x04
   14fec:	95 82       	std	Z+5, r9	; 0x05
   14fee:	a6 82       	std	Z+6, r10	; 0x06
   14ff0:	b7 82       	std	Z+7, r11	; 0x07
   14ff2:	8c e7       	ldi	r24, 0x7C	; 124
   14ff4:	94 e2       	ldi	r25, 0x24	; 36
   14ff6:	a0 e0       	ldi	r26, 0x00	; 0
   14ff8:	81 83       	std	Z+1, r24	; 0x01
   14ffa:	92 83       	std	Z+2, r25	; 0x02
   14ffc:	a3 83       	std	Z+3, r26	; 0x03
   14ffe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15002:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15006:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   1500a:	12 82       	std	Z+2, r1	; 0x02
   1500c:	54 98       	cbi	0x0a, 4	; 10
   1500e:	4c 99       	sbic	0x09, 4	; 9
   15010:	03 c0       	rjmp	.+6      	; 0x15018 <SS80_locate_and_write+0x7e>
   15012:	80 e0       	ldi	r24, 0x00	; 0
   15014:	90 e1       	ldi	r25, 0x10	; 16
   15016:	4f c1       	rjmp	.+670    	; 0x152b6 <SS80_locate_and_write+0x31c>
   15018:	4b df       	rcall	.-362    	; 0x14eb0 <SS80_cmd_seek>
   1501a:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1501e:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15022:	89 2b       	or	r24, r25
   15024:	41 f0       	breq	.+16     	; 0x15036 <SS80_locate_and_write+0x9c>
   15026:	83 81       	ldd	r24, Z+3	; 0x03
   15028:	94 81       	ldd	r25, Z+4	; 0x04
   1502a:	82 60       	ori	r24, 0x02	; 2
   1502c:	94 83       	std	Z+4, r25	; 0x04
   1502e:	83 83       	std	Z+3, r24	; 0x03
   15030:	01 e0       	ldi	r16, 0x01	; 1
   15032:	10 e0       	ldi	r17, 0x00	; 0
   15034:	02 c0       	rjmp	.+4      	; 0x1503a <SS80_locate_and_write+0xa0>
   15036:	00 e0       	ldi	r16, 0x00	; 0
   15038:	10 e0       	ldi	r17, 0x00	; 0
   1503a:	23 84       	ldd	r2, Z+11	; 0x0b
   1503c:	34 84       	ldd	r3, Z+12	; 0x0c
   1503e:	1d 86       	std	Y+13, r1	; 0x0d
   15040:	1c 86       	std	Y+12, r1	; 0x0c
   15042:	41 2c       	mov	r4, r1
   15044:	51 2c       	mov	r5, r1
   15046:	32 01       	movw	r6, r4
   15048:	8f e2       	ldi	r24, 0x2F	; 47
   1504a:	94 e2       	ldi	r25, 0x24	; 36
   1504c:	9c 01       	movw	r18, r24
   1504e:	40 e0       	ldi	r20, 0x00	; 0
   15050:	2e 87       	std	Y+14, r18	; 0x0e
   15052:	3f 87       	std	Y+15, r19	; 0x0f
   15054:	48 8b       	std	Y+16, r20	; 0x10
   15056:	85 e5       	ldi	r24, 0x55	; 85
   15058:	94 e2       	ldi	r25, 0x24	; 36
   1505a:	9c 01       	movw	r18, r24
   1505c:	40 e0       	ldi	r20, 0x00	; 0
   1505e:	29 8b       	std	Y+17, r18	; 0x11
   15060:	3a 8b       	std	Y+18, r19	; 0x12
   15062:	4b 8b       	std	Y+19, r20	; 0x13
   15064:	12 14       	cp	r1, r2
   15066:	13 04       	cpc	r1, r3
   15068:	0c f0       	brlt	.+2      	; 0x1506c <SS80_locate_and_write+0xd2>
   1506a:	f5 c0       	rjmp	.+490    	; 0x15256 <SS80_locate_and_write+0x2bc>
   1506c:	54 98       	cbi	0x0a, 4	; 10
   1506e:	4c 9b       	sbis	0x09, 4	; 9
   15070:	d0 cf       	rjmp	.-96     	; 0x15012 <SS80_locate_and_write+0x78>
   15072:	71 01       	movw	r14, r2
   15074:	31 e0       	ldi	r19, 0x01	; 1
   15076:	23 16       	cp	r2, r19
   15078:	33 06       	cpc	r3, r19
   1507a:	1c f0       	brlt	.+6      	; 0x15082 <SS80_locate_and_write+0xe8>
   1507c:	e1 2c       	mov	r14, r1
   1507e:	ff 24       	eor	r15, r15
   15080:	f3 94       	inc	r15
   15082:	ea ed       	ldi	r30, 0xDA	; 218
   15084:	fc e1       	ldi	r31, 0x1C	; 28
   15086:	20 e0       	ldi	r18, 0x00	; 0
   15088:	32 e0       	ldi	r19, 0x02	; 2
   1508a:	11 92       	st	Z+, r1
   1508c:	21 50       	subi	r18, 0x01	; 1
   1508e:	30 40       	sbci	r19, 0x00	; 0
   15090:	e1 f7       	brne	.-8      	; 0x1508a <SS80_locate_and_write+0xf0>
   15092:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15096:	87 fd       	sbrc	r24, 7
   15098:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   1509c:	ae 01       	movw	r20, r28
   1509e:	44 5f       	subi	r20, 0xF4	; 244
   150a0:	5f 4f       	sbci	r21, 0xFF	; 255
   150a2:	b7 01       	movw	r22, r14
   150a4:	8a ed       	ldi	r24, 0xDA	; 218
   150a6:	9c e1       	ldi	r25, 0x1C	; 28
   150a8:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
   150ac:	6c 01       	movw	r12, r24
   150ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150b2:	87 ff       	sbrs	r24, 7
   150b4:	04 c0       	rjmp	.+8      	; 0x150be <SS80_locate_and_write+0x124>
   150b6:	8f e8       	ldi	r24, 0x8F	; 143
   150b8:	90 e1       	ldi	r25, 0x10	; 16
   150ba:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   150be:	ce 14       	cp	r12, r14
   150c0:	df 04       	cpc	r13, r15
   150c2:	39 f1       	breq	.+78     	; 0x15112 <SS80_locate_and_write+0x178>
   150c4:	8c 85       	ldd	r24, Y+12	; 0x0c
   150c6:	9d 85       	ldd	r25, Y+13	; 0x0d
   150c8:	9c 01       	movw	r18, r24
   150ca:	22 27       	eor	r18, r18
   150cc:	30 7d       	andi	r19, 0xD0	; 208
   150ce:	23 2b       	or	r18, r19
   150d0:	d1 f0       	breq	.+52     	; 0x15106 <SS80_locate_and_write+0x16c>
   150d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150d6:	80 ff       	sbrs	r24, 0
   150d8:	0a c0       	rjmp	.+20     	; 0x150ee <SS80_locate_and_write+0x154>
   150da:	89 e6       	ldi	r24, 0x69	; 105
   150dc:	94 e2       	ldi	r25, 0x24	; 36
   150de:	a0 e0       	ldi	r26, 0x00	; 0
   150e0:	ed b7       	in	r30, 0x3d	; 61
   150e2:	fe b7       	in	r31, 0x3e	; 62
   150e4:	81 83       	std	Z+1, r24	; 0x01
   150e6:	92 83       	std	Z+2, r25	; 0x02
   150e8:	a3 83       	std	Z+3, r26	; 0x03
   150ea:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   150ee:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   150f2:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   150f6:	83 81       	ldd	r24, Z+3	; 0x03
   150f8:	94 81       	ldd	r25, Z+4	; 0x04
   150fa:	82 60       	ori	r24, 0x02	; 2
   150fc:	94 83       	std	Z+4, r25	; 0x04
   150fe:	83 83       	std	Z+3, r24	; 0x03
   15100:	81 e0       	ldi	r24, 0x01	; 1
   15102:	82 83       	std	Z+2, r24	; 0x02
   15104:	99 c0       	rjmp	.+306    	; 0x15238 <SS80_locate_and_write+0x29e>
   15106:	c1 14       	cp	r12, r1
   15108:	d1 04       	cpc	r13, r1
   1510a:	09 f0       	breq	.+2      	; 0x1510e <SS80_locate_and_write+0x174>
   1510c:	d0 c0       	rjmp	.+416    	; 0x152ae <SS80_locate_and_write+0x314>
   1510e:	90 fd       	sbrc	r25, 0
   15110:	93 c0       	rjmp	.+294    	; 0x15238 <SS80_locate_and_write+0x29e>
   15112:	01 15       	cp	r16, r1
   15114:	11 05       	cpc	r17, r1
   15116:	09 f0       	breq	.+2      	; 0x1511a <SS80_locate_and_write+0x180>
   15118:	84 c0       	rjmp	.+264    	; 0x15222 <SS80_locate_and_write+0x288>
   1511a:	c1 14       	cp	r12, r1
   1511c:	d1 04       	cpc	r13, r1
   1511e:	09 f4       	brne	.+2      	; 0x15122 <SS80_locate_and_write+0x188>
   15120:	82 c0       	rjmp	.+260    	; 0x15226 <SS80_locate_and_write+0x28c>
   15122:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15126:	86 fd       	sbrc	r24, 6
   15128:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   1512c:	e0 90 57 19 	lds	r14, 0x1957	; 0x801957 <SS80s>
   15130:	f0 90 58 19 	lds	r15, 0x1958	; 0x801958 <SS80s+0x1>
   15134:	f3 e0       	ldi	r31, 0x03	; 3
   15136:	ef 0e       	add	r14, r31
   15138:	f1 1c       	adc	r15, r1
   1513a:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   1513e:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15142:	86 01       	movw	r16, r12
   15144:	2a ed       	ldi	r18, 0xDA	; 218
   15146:	3c e1       	ldi	r19, 0x1C	; 28
   15148:	b5 01       	movw	r22, r10
   1514a:	a4 01       	movw	r20, r8
   1514c:	82 81       	ldd	r24, Z+2	; 0x02
   1514e:	93 81       	ldd	r25, Z+3	; 0x03
   15150:	0e 94 96 83 	call	0x1072c	; 0x1072c <dbf_open_write>
   15154:	7c 01       	movw	r14, r24
   15156:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1515a:	86 ff       	sbrs	r24, 6
   1515c:	04 c0       	rjmp	.+8      	; 0x15166 <SS80_locate_and_write+0x1cc>
   1515e:	8a e9       	ldi	r24, 0x9A	; 154
   15160:	90 e1       	ldi	r25, 0x10	; 16
   15162:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   15166:	ce 14       	cp	r12, r14
   15168:	df 04       	cpc	r13, r15
   1516a:	39 f1       	breq	.+78     	; 0x151ba <SS80_locate_and_write+0x220>
   1516c:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15170:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15174:	83 81       	ldd	r24, Z+3	; 0x03
   15176:	94 81       	ldd	r25, Z+4	; 0x04
   15178:	82 60       	ori	r24, 0x02	; 2
   1517a:	94 83       	std	Z+4, r25	; 0x04
   1517c:	83 83       	std	Z+3, r24	; 0x03
   1517e:	0e 94 9f 6e 	call	0xdd3e	; 0xdd3e <mmc_wp_status>
   15182:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15186:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   1518a:	89 2b       	or	r24, r25
   1518c:	29 f0       	breq	.+10     	; 0x15198 <SS80_locate_and_write+0x1fe>
   1518e:	83 81       	ldd	r24, Z+3	; 0x03
   15190:	94 81       	ldd	r25, Z+4	; 0x04
   15192:	88 60       	ori	r24, 0x08	; 8
   15194:	94 83       	std	Z+4, r25	; 0x04
   15196:	83 83       	std	Z+3, r24	; 0x03
   15198:	21 e0       	ldi	r18, 0x01	; 1
   1519a:	22 83       	std	Z+2, r18	; 0x02
   1519c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151a0:	80 ff       	sbrs	r24, 0
   151a2:	27 c0       	rjmp	.+78     	; 0x151f2 <SS80_locate_and_write+0x258>
   151a4:	89 89       	ldd	r24, Y+17	; 0x11
   151a6:	9a 89       	ldd	r25, Y+18	; 0x12
   151a8:	ab 89       	ldd	r26, Y+19	; 0x13
   151aa:	ed b7       	in	r30, 0x3d	; 61
   151ac:	fe b7       	in	r31, 0x3e	; 62
   151ae:	81 83       	std	Z+1, r24	; 0x01
   151b0:	92 83       	std	Z+2, r25	; 0x02
   151b2:	a3 83       	std	Z+3, r26	; 0x03
   151b4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   151b8:	1c c0       	rjmp	.+56     	; 0x151f2 <SS80_locate_and_write+0x258>
   151ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151be:	85 ff       	sbrs	r24, 5
   151c0:	0c c0       	rjmp	.+24     	; 0x151da <SS80_locate_and_write+0x240>
   151c2:	ed b7       	in	r30, 0x3d	; 61
   151c4:	fe b7       	in	r31, 0x3e	; 62
   151c6:	d5 82       	std	Z+5, r13	; 0x05
   151c8:	c4 82       	std	Z+4, r12	; 0x04
   151ca:	2e 85       	ldd	r18, Y+14	; 0x0e
   151cc:	3f 85       	ldd	r19, Y+15	; 0x0f
   151ce:	48 89       	ldd	r20, Y+16	; 0x10
   151d0:	21 83       	std	Z+1, r18	; 0x01
   151d2:	32 83       	std	Z+2, r19	; 0x02
   151d4:	43 83       	std	Z+3, r20	; 0x03
   151d6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   151da:	c6 01       	movw	r24, r12
   151dc:	0d 2c       	mov	r0, r13
   151de:	00 0c       	add	r0, r0
   151e0:	aa 0b       	sbc	r26, r26
   151e2:	bb 0b       	sbc	r27, r27
   151e4:	88 0e       	add	r8, r24
   151e6:	99 1e       	adc	r9, r25
   151e8:	aa 1e       	adc	r10, r26
   151ea:	bb 1e       	adc	r11, r27
   151ec:	00 e0       	ldi	r16, 0x00	; 0
   151ee:	10 e0       	ldi	r17, 0x00	; 0
   151f0:	05 c0       	rjmp	.+10     	; 0x151fc <SS80_locate_and_write+0x262>
   151f2:	ec 14       	cp	r14, r12
   151f4:	fd 04       	cpc	r15, r13
   151f6:	64 f0       	brlt	.+24     	; 0x15210 <SS80_locate_and_write+0x276>
   151f8:	01 e0       	ldi	r16, 0x01	; 1
   151fa:	10 e0       	ldi	r17, 0x00	; 0
   151fc:	c7 01       	movw	r24, r14
   151fe:	0f 2c       	mov	r0, r15
   15200:	00 0c       	add	r0, r0
   15202:	aa 0b       	sbc	r26, r26
   15204:	bb 0b       	sbc	r27, r27
   15206:	48 0e       	add	r4, r24
   15208:	59 1e       	adc	r5, r25
   1520a:	6a 1e       	adc	r6, r26
   1520c:	7b 1e       	adc	r7, r27
   1520e:	0b c0       	rjmp	.+22     	; 0x15226 <SS80_locate_and_write+0x28c>
   15210:	c6 01       	movw	r24, r12
   15212:	0d 2c       	mov	r0, r13
   15214:	00 0c       	add	r0, r0
   15216:	aa 0b       	sbc	r26, r26
   15218:	bb 0b       	sbc	r27, r27
   1521a:	48 0e       	add	r4, r24
   1521c:	59 1e       	adc	r5, r25
   1521e:	6a 1e       	adc	r6, r26
   15220:	7b 1e       	adc	r7, r27
   15222:	01 e0       	ldi	r16, 0x01	; 1
   15224:	10 e0       	ldi	r17, 0x00	; 0
   15226:	2c 18       	sub	r2, r12
   15228:	3d 08       	sbc	r3, r13
   1522a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1522c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1522e:	90 ff       	sbrs	r25, 0
   15230:	19 cf       	rjmp	.-462    	; 0x15064 <SS80_locate_and_write+0xca>
   15232:	12 14       	cp	r1, r2
   15234:	13 04       	cpc	r1, r3
   15236:	7c f4       	brge	.+30     	; 0x15256 <SS80_locate_and_write+0x2bc>
   15238:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1523c:	80 ff       	sbrs	r24, 0
   1523e:	1d c0       	rjmp	.+58     	; 0x1527a <SS80_locate_and_write+0x2e0>
   15240:	87 e0       	ldi	r24, 0x07	; 7
   15242:	94 e2       	ldi	r25, 0x24	; 36
   15244:	a0 e0       	ldi	r26, 0x00	; 0
   15246:	ed b7       	in	r30, 0x3d	; 61
   15248:	fe b7       	in	r31, 0x3e	; 62
   1524a:	81 83       	std	Z+1, r24	; 0x01
   1524c:	92 83       	std	Z+2, r25	; 0x02
   1524e:	a3 83       	std	Z+3, r26	; 0x03
   15250:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15254:	12 c0       	rjmp	.+36     	; 0x1527a <SS80_locate_and_write+0x2e0>
   15256:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1525a:	85 ff       	sbrs	r24, 5
   1525c:	0e c0       	rjmp	.+28     	; 0x1527a <SS80_locate_and_write+0x2e0>
   1525e:	ed b7       	in	r30, 0x3d	; 61
   15260:	fe b7       	in	r31, 0x3e	; 62
   15262:	44 82       	std	Z+4, r4	; 0x04
   15264:	55 82       	std	Z+5, r5	; 0x05
   15266:	66 82       	std	Z+6, r6	; 0x06
   15268:	77 82       	std	Z+7, r7	; 0x07
   1526a:	8c ed       	ldi	r24, 0xDC	; 220
   1526c:	93 e2       	ldi	r25, 0x23	; 35
   1526e:	a0 e0       	ldi	r26, 0x00	; 0
   15270:	81 83       	std	Z+1, r24	; 0x01
   15272:	92 83       	std	Z+2, r25	; 0x02
   15274:	a3 83       	std	Z+3, r26	; 0x03
   15276:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1527a:	00 91 57 19 	lds	r16, 0x1957	; 0x801957 <SS80s>
   1527e:	10 91 58 19 	lds	r17, 0x1958	; 0x801958 <SS80s+0x1>
   15282:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15286:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1528a:	20 89       	ldd	r18, Z+16	; 0x10
   1528c:	31 89       	ldd	r19, Z+17	; 0x11
   1528e:	40 e0       	ldi	r20, 0x00	; 0
   15290:	50 e0       	ldi	r21, 0x00	; 0
   15292:	c5 01       	movw	r24, r10
   15294:	b4 01       	movw	r22, r8
   15296:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
   1529a:	f8 01       	movw	r30, r16
   1529c:	27 83       	std	Z+7, r18	; 0x07
   1529e:	30 87       	std	Z+8, r19	; 0x08
   152a0:	41 87       	std	Z+9, r20	; 0x09
   152a2:	52 87       	std	Z+10, r21	; 0x0a
   152a4:	8c 85       	ldd	r24, Y+12	; 0x0c
   152a6:	9d 85       	ldd	r25, Y+13	; 0x0d
   152a8:	88 27       	eor	r24, r24
   152aa:	90 7d       	andi	r25, 0xD0	; 208
   152ac:	04 c0       	rjmp	.+8      	; 0x152b6 <SS80_locate_and_write+0x31c>
   152ae:	01 2b       	or	r16, r17
   152b0:	09 f4       	brne	.+2      	; 0x152b4 <SS80_locate_and_write+0x31a>
   152b2:	37 cf       	rjmp	.-402    	; 0x15122 <SS80_locate_and_write+0x188>
   152b4:	b6 cf       	rjmp	.-148    	; 0x15222 <SS80_locate_and_write+0x288>
   152b6:	63 96       	adiw	r28, 0x13	; 19
   152b8:	e2 e1       	ldi	r30, 0x12	; 18
   152ba:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

000152be <SS80_Report>:
   152be:	a8 e0       	ldi	r26, 0x08	; 8
   152c0:	b0 e0       	ldi	r27, 0x00	; 0
   152c2:	e5 e6       	ldi	r30, 0x65	; 101
   152c4:	f9 ea       	ldi	r31, 0xA9	; 169
   152c6:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   152ca:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   152ce:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   152d2:	82 81       	ldd	r24, Z+2	; 0x02
   152d4:	88 87       	std	Y+8, r24	; 0x08
   152d6:	80 e0       	ldi	r24, 0x00	; 0
   152d8:	91 e0       	ldi	r25, 0x01	; 1
   152da:	9f 83       	std	Y+7, r25	; 0x07
   152dc:	8e 83       	std	Y+6, r24	; 0x06
   152de:	ae 01       	movw	r20, r28
   152e0:	4a 5f       	subi	r20, 0xFA	; 250
   152e2:	5f 4f       	sbci	r21, 0xFF	; 255
   152e4:	61 e0       	ldi	r22, 0x01	; 1
   152e6:	70 e0       	ldi	r23, 0x00	; 0
   152e8:	ce 01       	movw	r24, r28
   152ea:	08 96       	adiw	r24, 0x08	; 8
   152ec:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   152f0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   152f4:	01 97       	sbiw	r24, 0x01	; 1
   152f6:	89 f0       	breq	.+34     	; 0x1531a <SS80_Report+0x5c>
   152f8:	20 ff       	sbrs	r18, 0
   152fa:	0a c0       	rjmp	.+20     	; 0x15310 <SS80_Report+0x52>
   152fc:	8b ec       	ldi	r24, 0xCB	; 203
   152fe:	9e e1       	ldi	r25, 0x1E	; 30
   15300:	a0 e0       	ldi	r26, 0x00	; 0
   15302:	ed b7       	in	r30, 0x3d	; 61
   15304:	fe b7       	in	r31, 0x3e	; 62
   15306:	81 83       	std	Z+1, r24	; 0x01
   15308:	92 83       	std	Z+2, r25	; 0x02
   1530a:	a3 83       	std	Z+3, r26	; 0x03
   1530c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15310:	8e 81       	ldd	r24, Y+6	; 0x06
   15312:	9f 81       	ldd	r25, Y+7	; 0x07
   15314:	88 27       	eor	r24, r24
   15316:	90 7d       	andi	r25, 0xD0	; 208
   15318:	1b c0       	rjmp	.+54     	; 0x15350 <SS80_Report+0x92>
   1531a:	25 ff       	sbrs	r18, 5
   1531c:	12 c0       	rjmp	.+36     	; 0x15342 <SS80_Report+0x84>
   1531e:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15322:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15326:	82 81       	ldd	r24, Z+2	; 0x02
   15328:	90 e0       	ldi	r25, 0x00	; 0
   1532a:	ed b7       	in	r30, 0x3d	; 61
   1532c:	fe b7       	in	r31, 0x3e	; 62
   1532e:	95 83       	std	Z+5, r25	; 0x05
   15330:	84 83       	std	Z+4, r24	; 0x04
   15332:	88 eb       	ldi	r24, 0xB8	; 184
   15334:	9e e1       	ldi	r25, 0x1E	; 30
   15336:	a0 e0       	ldi	r26, 0x00	; 0
   15338:	81 83       	std	Z+1, r24	; 0x01
   1533a:	92 83       	std	Z+2, r25	; 0x02
   1533c:	a3 83       	std	Z+3, r26	; 0x03
   1533e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15342:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15346:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   1534a:	12 82       	std	Z+2, r1	; 0x02
   1534c:	80 e0       	ldi	r24, 0x00	; 0
   1534e:	90 e0       	ldi	r25, 0x00	; 0
   15350:	28 96       	adiw	r28, 0x08	; 8
   15352:	e2 e0       	ldi	r30, 0x02	; 2
   15354:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00015358 <Clear_Common>:
   15358:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1535c:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15360:	25 81       	ldd	r18, Z+5	; 0x05
   15362:	30 e0       	ldi	r19, 0x00	; 0
   15364:	28 17       	cp	r18, r24
   15366:	39 07       	cpc	r19, r25
   15368:	19 f0       	breq	.+6      	; 0x15370 <Clear_Common+0x18>
   1536a:	0f 97       	sbiw	r24, 0x0f	; 15
   1536c:	99 f4       	brne	.+38     	; 0x15394 <Clear_Common+0x3c>
   1536e:	03 c0       	rjmp	.+6      	; 0x15376 <Clear_Common+0x1e>
   15370:	2f 30       	cpi	r18, 0x0F	; 15
   15372:	31 05       	cpc	r19, r1
   15374:	09 f4       	brne	.+2      	; 0x15378 <Clear_Common+0x20>
   15376:	15 82       	std	Z+5, r1	; 0x05
   15378:	16 82       	std	Z+6, r1	; 0x06
   1537a:	17 82       	std	Z+7, r1	; 0x07
   1537c:	10 86       	std	Z+8, r1	; 0x08
   1537e:	11 86       	std	Z+9, r1	; 0x09
   15380:	12 86       	std	Z+10, r1	; 0x0a
   15382:	13 86       	std	Z+11, r1	; 0x0b
   15384:	14 86       	std	Z+12, r1	; 0x0c
   15386:	15 86       	std	Z+13, r1	; 0x0d
   15388:	16 86       	std	Z+14, r1	; 0x0e
   1538a:	11 82       	std	Z+1, r1	; 0x01
   1538c:	10 82       	st	Z, r1
   1538e:	14 82       	std	Z+4, r1	; 0x04
   15390:	13 82       	std	Z+3, r1	; 0x03
   15392:	12 82       	std	Z+2, r1	; 0x02
   15394:	08 95       	ret

00015396 <SS80_init>:
   15396:	a5 e0       	ldi	r26, 0x05	; 5
   15398:	b0 e0       	ldi	r27, 0x00	; 0
   1539a:	e1 ed       	ldi	r30, 0xD1	; 209
   1539c:	f9 ea       	ldi	r31, 0xA9	; 169
   1539e:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
   153a2:	0d eb       	ldi	r16, 0xBD	; 189
   153a4:	10 e2       	ldi	r17, 0x20	; 32
   153a6:	cb e0       	ldi	r28, 0x0B	; 11
   153a8:	d0 e0       	ldi	r29, 0x00	; 0
   153aa:	82 e0       	ldi	r24, 0x02	; 2
   153ac:	f8 2e       	mov	r15, r24
   153ae:	85 e8       	ldi	r24, 0x85	; 133
   153b0:	95 e2       	ldi	r25, 0x25	; 37
   153b2:	6c 01       	movw	r12, r24
   153b4:	e1 2c       	mov	r14, r1
   153b6:	f8 01       	movw	r30, r16
   153b8:	80 81       	ld	r24, Z
   153ba:	83 30       	cpi	r24, 0x03	; 3
   153bc:	29 f5       	brne	.+74     	; 0x15408 <SS80_init+0x72>
   153be:	ce 01       	movw	r24, r28
   153c0:	0e 94 18 96 	call	0x12c30	; 0x12c30 <set_active_device>
   153c4:	89 2b       	or	r24, r25
   153c6:	01 f1       	breq	.+64     	; 0x15408 <SS80_init+0x72>
   153c8:	8f e0       	ldi	r24, 0x0F	; 15
   153ca:	90 e0       	ldi	r25, 0x00	; 0
   153cc:	c5 df       	rcall	.-118    	; 0x15358 <Clear_Common>
   153ce:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   153d2:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   153d6:	f2 82       	std	Z+2, r15	; 0x02
   153d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153dc:	85 ff       	sbrs	r24, 5
   153de:	0c c0       	rjmp	.+24     	; 0x153f8 <SS80_init+0x62>
   153e0:	f8 01       	movw	r30, r16
   153e2:	81 81       	ldd	r24, Z+1	; 0x01
   153e4:	90 e0       	ldi	r25, 0x00	; 0
   153e6:	ed b7       	in	r30, 0x3d	; 61
   153e8:	fe b7       	in	r31, 0x3e	; 62
   153ea:	95 83       	std	Z+5, r25	; 0x05
   153ec:	84 83       	std	Z+4, r24	; 0x04
   153ee:	c1 82       	std	Z+1, r12	; 0x01
   153f0:	d2 82       	std	Z+2, r13	; 0x02
   153f2:	e3 82       	std	Z+3, r14	; 0x03
   153f4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   153f8:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   153fc:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15400:	81 81       	ldd	r24, Z+1	; 0x01
   15402:	90 e0       	ldi	r25, 0x00	; 0
   15404:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
   15408:	21 97       	sbiw	r28, 0x01	; 1
   1540a:	0b 52       	subi	r16, 0x2B	; 43
   1540c:	11 09       	sbc	r17, r1
   1540e:	cf 3f       	cpi	r28, 0xFF	; 255
   15410:	ff ef       	ldi	r31, 0xFF	; 255
   15412:	df 07       	cpc	r29, r31
   15414:	81 f6       	brne	.-96     	; 0x153b6 <SS80_init+0x20>
   15416:	cd b7       	in	r28, 0x3d	; 61
   15418:	de b7       	in	r29, 0x3e	; 62
   1541a:	25 96       	adiw	r28, 0x05	; 5
   1541c:	e8 e0       	ldi	r30, 0x08	; 8
   1541e:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00015422 <SS80_Channel_Independent_Clear>:
   15422:	9a df       	rcall	.-204    	; 0x15358 <Clear_Common>
   15424:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15428:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1542c:	81 81       	ldd	r24, Z+1	; 0x01
   1542e:	90 e0       	ldi	r25, 0x00	; 0
   15430:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   15434:	80 e0       	ldi	r24, 0x00	; 0
   15436:	90 e0       	ldi	r25, 0x00	; 0
   15438:	08 95       	ret

0001543a <SS80_Universal_Device_Clear>:
   1543a:	8f e0       	ldi	r24, 0x0F	; 15
   1543c:	90 e0       	ldi	r25, 0x00	; 0
   1543e:	8c df       	rcall	.-232    	; 0x15358 <Clear_Common>
   15440:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15444:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15448:	81 81       	ldd	r24, Z+1	; 0x01
   1544a:	90 e0       	ldi	r25, 0x00	; 0
   1544c:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   15450:	80 e0       	ldi	r24, 0x00	; 0
   15452:	90 e0       	ldi	r25, 0x00	; 0
   15454:	08 95       	ret

00015456 <SS80_Selected_Device_Clear>:
   15456:	cf 93       	push	r28
   15458:	df 93       	push	r29
   1545a:	00 d0       	rcall	.+0      	; 0x1545c <SS80_Selected_Device_Clear+0x6>
   1545c:	1f 92       	push	r1
   1545e:	ec 01       	movw	r28, r24
   15460:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15464:	85 ff       	sbrs	r24, 5
   15466:	0a c0       	rjmp	.+20     	; 0x1547c <SS80_Selected_Device_Clear+0x26>
   15468:	8c ea       	ldi	r24, 0xAC	; 172
   1546a:	9e e1       	ldi	r25, 0x1E	; 30
   1546c:	a0 e0       	ldi	r26, 0x00	; 0
   1546e:	ed b7       	in	r30, 0x3d	; 61
   15470:	fe b7       	in	r31, 0x3e	; 62
   15472:	81 83       	std	Z+1, r24	; 0x01
   15474:	92 83       	std	Z+2, r25	; 0x02
   15476:	a3 83       	std	Z+3, r26	; 0x03
   15478:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1547c:	ce 01       	movw	r24, r28
   1547e:	6c df       	rcall	.-296    	; 0x15358 <Clear_Common>
   15480:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15484:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15488:	81 81       	ldd	r24, Z+1	; 0x01
   1548a:	90 e0       	ldi	r25, 0x00	; 0
   1548c:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   15490:	80 e0       	ldi	r24, 0x00	; 0
   15492:	90 e0       	ldi	r25, 0x00	; 0
   15494:	cd b7       	in	r28, 0x3d	; 61
   15496:	de b7       	in	r29, 0x3e	; 62
   15498:	23 96       	adiw	r28, 0x03	; 3
   1549a:	e2 e0       	ldi	r30, 0x02	; 2
   1549c:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000154a0 <SS80_Amigo_Clear>:
   154a0:	a6 e0       	ldi	r26, 0x06	; 6
   154a2:	b0 e0       	ldi	r27, 0x00	; 0
   154a4:	e6 e5       	ldi	r30, 0x56	; 86
   154a6:	fa ea       	ldi	r31, 0xAA	; 170
   154a8:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   154ac:	1d 82       	std	Y+5, r1	; 0x05
   154ae:	1c 82       	std	Y+4, r1	; 0x04
   154b0:	ae 01       	movw	r20, r28
   154b2:	4c 5f       	subi	r20, 0xFC	; 252
   154b4:	5f 4f       	sbci	r21, 0xFF	; 255
   154b6:	61 e0       	ldi	r22, 0x01	; 1
   154b8:	70 e0       	ldi	r23, 0x00	; 0
   154ba:	ce 01       	movw	r24, r28
   154bc:	06 96       	adiw	r24, 0x06	; 6
   154be:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
   154c2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   154c6:	01 97       	sbiw	r24, 0x01	; 1
   154c8:	89 f0       	breq	.+34     	; 0x154ec <SS80_Amigo_Clear+0x4c>
   154ca:	20 ff       	sbrs	r18, 0
   154cc:	0a c0       	rjmp	.+20     	; 0x154e2 <SS80_Amigo_Clear+0x42>
   154ce:	89 e9       	ldi	r24, 0x99	; 153
   154d0:	9e e1       	ldi	r25, 0x1E	; 30
   154d2:	a0 e0       	ldi	r26, 0x00	; 0
   154d4:	ed b7       	in	r30, 0x3d	; 61
   154d6:	fe b7       	in	r31, 0x3e	; 62
   154d8:	81 83       	std	Z+1, r24	; 0x01
   154da:	92 83       	std	Z+2, r25	; 0x02
   154dc:	a3 83       	std	Z+3, r26	; 0x03
   154de:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   154e2:	8c 81       	ldd	r24, Y+4	; 0x04
   154e4:	9d 81       	ldd	r25, Y+5	; 0x05
   154e6:	88 27       	eor	r24, r24
   154e8:	90 7d       	andi	r25, 0xD0	; 208
   154ea:	19 c0       	rjmp	.+50     	; 0x1551e <SS80_Amigo_Clear+0x7e>
   154ec:	25 ff       	sbrs	r18, 5
   154ee:	0a c0       	rjmp	.+20     	; 0x15504 <SS80_Amigo_Clear+0x64>
   154f0:	8a e8       	ldi	r24, 0x8A	; 138
   154f2:	9e e1       	ldi	r25, 0x1E	; 30
   154f4:	a0 e0       	ldi	r26, 0x00	; 0
   154f6:	ed b7       	in	r30, 0x3d	; 61
   154f8:	fe b7       	in	r31, 0x3e	; 62
   154fa:	81 83       	std	Z+1, r24	; 0x01
   154fc:	92 83       	std	Z+2, r25	; 0x02
   154fe:	a3 83       	std	Z+3, r26	; 0x03
   15500:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15504:	8f e0       	ldi	r24, 0x0F	; 15
   15506:	90 e0       	ldi	r25, 0x00	; 0
   15508:	27 df       	rcall	.-434    	; 0x15358 <Clear_Common>
   1550a:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   1550e:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15512:	81 81       	ldd	r24, Z+1	; 0x01
   15514:	90 e0       	ldi	r25, 0x00	; 0
   15516:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   1551a:	80 e0       	ldi	r24, 0x00	; 0
   1551c:	90 e0       	ldi	r25, 0x00	; 0
   1551e:	26 96       	adiw	r28, 0x06	; 6
   15520:	e2 e0       	ldi	r30, 0x02	; 2
   15522:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00015526 <SS80_Cancel>:
   15526:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1552a:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   1552e:	11 82       	std	Z+1, r1	; 0x01
   15530:	10 82       	st	Z, r1
   15532:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15536:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1553a:	81 81       	ldd	r24, Z+1	; 0x01
   1553c:	90 e0       	ldi	r25, 0x00	; 0
   1553e:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   15542:	80 e0       	ldi	r24, 0x00	; 0
   15544:	90 e0       	ldi	r25, 0x00	; 0
   15546:	08 95       	ret

00015548 <SS80_Transparent_State>:
   15548:	a9 e0       	ldi	r26, 0x09	; 9
   1554a:	b0 e0       	ldi	r27, 0x00	; 0
   1554c:	ea ea       	ldi	r30, 0xAA	; 170
   1554e:	fa ea       	ldi	r31, 0xAA	; 170
   15550:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
   15554:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15558:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1555c:	81 81       	ldd	r24, Z+1	; 0x01
   1555e:	90 e0       	ldi	r25, 0x00	; 0
   15560:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
   15564:	80 e0       	ldi	r24, 0x00	; 0
   15566:	91 e0       	ldi	r25, 0x01	; 1
   15568:	99 87       	std	Y+9, r25	; 0x09
   1556a:	88 87       	std	Y+8, r24	; 0x08
   1556c:	ae 01       	movw	r20, r28
   1556e:	48 5f       	subi	r20, 0xF8	; 248
   15570:	5f 4f       	sbci	r21, 0xFF	; 255
   15572:	60 e0       	ldi	r22, 0x00	; 0
   15574:	72 e0       	ldi	r23, 0x02	; 2
   15576:	8a ed       	ldi	r24, 0xDA	; 218
   15578:	9c e1       	ldi	r25, 0x1C	; 28
   1557a:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
   1557e:	7c 01       	movw	r14, r24
   15580:	88 85       	ldd	r24, Y+8	; 0x08
   15582:	99 85       	ldd	r25, Y+9	; 0x09
   15584:	9c 01       	movw	r18, r24
   15586:	22 27       	eor	r18, r18
   15588:	30 7d       	andi	r19, 0xD0	; 208
   1558a:	23 2b       	or	r18, r19
   1558c:	79 f0       	breq	.+30     	; 0x155ac <SS80_Transparent_State+0x64>
   1558e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15592:	80 ff       	sbrs	r24, 0
   15594:	da c0       	rjmp	.+436    	; 0x1574a <SS80_Transparent_State+0x202>
   15596:	89 e2       	ldi	r24, 0x29	; 41
   15598:	90 e2       	ldi	r25, 0x20	; 32
   1559a:	a0 e0       	ldi	r26, 0x00	; 0
   1559c:	ed b7       	in	r30, 0x3d	; 61
   1559e:	fe b7       	in	r31, 0x3e	; 62
   155a0:	81 83       	std	Z+1, r24	; 0x01
   155a2:	92 83       	std	Z+2, r25	; 0x02
   155a4:	a3 83       	std	Z+3, r26	; 0x03
   155a6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   155aa:	cf c0       	rjmp	.+414    	; 0x1574a <SS80_Transparent_State+0x202>
   155ac:	e1 14       	cp	r14, r1
   155ae:	f1 04       	cpc	r15, r1
   155b0:	09 f4       	brne	.+2      	; 0x155b4 <SS80_Transparent_State+0x6c>
   155b2:	d0 c0       	rjmp	.+416    	; 0x15754 <SS80_Transparent_State+0x20c>
   155b4:	90 fd       	sbrc	r25, 0
   155b6:	0e c0       	rjmp	.+28     	; 0x155d4 <SS80_Transparent_State+0x8c>
   155b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155bc:	80 ff       	sbrs	r24, 0
   155be:	0a c0       	rjmp	.+20     	; 0x155d4 <SS80_Transparent_State+0x8c>
   155c0:	80 e1       	ldi	r24, 0x10	; 16
   155c2:	90 e2       	ldi	r25, 0x20	; 32
   155c4:	a0 e0       	ldi	r26, 0x00	; 0
   155c6:	ed b7       	in	r30, 0x3d	; 61
   155c8:	fe b7       	in	r31, 0x3e	; 62
   155ca:	81 83       	std	Z+1, r24	; 0x01
   155cc:	92 83       	std	Z+2, r25	; 0x02
   155ce:	a3 83       	std	Z+3, r26	; 0x03
   155d0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   155d4:	8a ed       	ldi	r24, 0xDA	; 218
   155d6:	a8 2e       	mov	r10, r24
   155d8:	8c e1       	ldi	r24, 0x1C	; 28
   155da:	b8 2e       	mov	r11, r24
   155dc:	00 e0       	ldi	r16, 0x00	; 0
   155de:	10 e0       	ldi	r17, 0x00	; 0
   155e0:	0e 15       	cp	r16, r14
   155e2:	1f 05       	cpc	r17, r15
   155e4:	0c f0       	brlt	.+2      	; 0x155e8 <SS80_Transparent_State+0xa0>
   155e6:	9c c0       	rjmp	.+312    	; 0x15720 <SS80_Transparent_State+0x1d8>
   155e8:	68 01       	movw	r12, r16
   155ea:	ff ef       	ldi	r31, 0xFF	; 255
   155ec:	cf 1a       	sub	r12, r31
   155ee:	df 0a       	sbc	r13, r31
   155f0:	f5 01       	movw	r30, r10
   155f2:	81 91       	ld	r24, Z+
   155f4:	5f 01       	movw	r10, r30
   155f6:	28 2f       	mov	r18, r24
   155f8:	30 e0       	ldi	r19, 0x00	; 0
   155fa:	a9 01       	movw	r20, r18
   155fc:	40 52       	subi	r20, 0x20	; 32
   155fe:	51 09       	sbc	r21, r1
   15600:	40 31       	cpi	r20, 0x10	; 16
   15602:	51 05       	cpc	r21, r1
   15604:	20 f4       	brcc	.+8      	; 0x1560e <SS80_Transparent_State+0xc6>
   15606:	80 52       	subi	r24, 0x20	; 32
   15608:	8c d9       	rcall	.-3304   	; 0x14922 <SS80_Check_Unit>
   1560a:	86 01       	movw	r16, r12
   1560c:	e9 cf       	rjmp	.-46     	; 0x155e0 <SS80_Transparent_State+0x98>
   1560e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15612:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15616:	21 30       	cpi	r18, 0x01	; 1
   15618:	31 05       	cpc	r19, r1
   1561a:	c9 f4       	brne	.+50     	; 0x1564e <SS80_Transparent_State+0x106>
   1561c:	0e 5f       	subi	r16, 0xFE	; 254
   1561e:	1f 4f       	sbci	r17, 0xFF	; 255
   15620:	80 73       	andi	r24, 0x30	; 48
   15622:	99 27       	eor	r25, r25
   15624:	89 2b       	or	r24, r25
   15626:	51 f0       	breq	.+20     	; 0x1563c <SS80_Transparent_State+0xf4>
   15628:	8b ee       	ldi	r24, 0xEB	; 235
   1562a:	9f e1       	ldi	r25, 0x1F	; 31
   1562c:	a0 e0       	ldi	r26, 0x00	; 0
   1562e:	ed b7       	in	r30, 0x3d	; 61
   15630:	fe b7       	in	r31, 0x3e	; 62
   15632:	81 83       	std	Z+1, r24	; 0x01
   15634:	92 83       	std	Z+2, r25	; 0x02
   15636:	a3 83       	std	Z+3, r26	; 0x03
   15638:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1563c:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15640:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15644:	81 81       	ldd	r24, Z+1	; 0x01
   15646:	90 e0       	ldi	r25, 0x00	; 0
   15648:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   1564c:	69 c0       	rjmp	.+210    	; 0x15720 <SS80_Transparent_State+0x1d8>
   1564e:	22 30       	cpi	r18, 0x02	; 2
   15650:	31 05       	cpc	r19, r1
   15652:	51 f4       	brne	.+20     	; 0x15668 <SS80_Transparent_State+0x120>
   15654:	0b 5f       	subi	r16, 0xFB	; 251
   15656:	1f 4f       	sbci	r17, 0xFF	; 255
   15658:	80 73       	andi	r24, 0x30	; 48
   1565a:	99 27       	eor	r25, r25
   1565c:	89 2b       	or	r24, r25
   1565e:	09 f4       	brne	.+2      	; 0x15662 <SS80_Transparent_State+0x11a>
   15660:	5f c0       	rjmp	.+190    	; 0x15720 <SS80_Transparent_State+0x1d8>
   15662:	8e ec       	ldi	r24, 0xCE	; 206
   15664:	9f e1       	ldi	r25, 0x1F	; 31
   15666:	0c c0       	rjmp	.+24     	; 0x15680 <SS80_Transparent_State+0x138>
   15668:	23 30       	cpi	r18, 0x03	; 3
   1566a:	31 05       	cpc	r19, r1
   1566c:	91 f4       	brne	.+36     	; 0x15692 <SS80_Transparent_State+0x14a>
   1566e:	0b 5f       	subi	r16, 0xFB	; 251
   15670:	1f 4f       	sbci	r17, 0xFF	; 255
   15672:	80 73       	andi	r24, 0x30	; 48
   15674:	99 27       	eor	r25, r25
   15676:	89 2b       	or	r24, r25
   15678:	09 f4       	brne	.+2      	; 0x1567c <SS80_Transparent_State+0x134>
   1567a:	52 c0       	rjmp	.+164    	; 0x15720 <SS80_Transparent_State+0x1d8>
   1567c:	80 eb       	ldi	r24, 0xB0	; 176
   1567e:	9f e1       	ldi	r25, 0x1F	; 31
   15680:	a0 e0       	ldi	r26, 0x00	; 0
   15682:	ed b7       	in	r30, 0x3d	; 61
   15684:	fe b7       	in	r31, 0x3e	; 62
   15686:	81 83       	std	Z+1, r24	; 0x01
   15688:	92 83       	std	Z+2, r25	; 0x02
   1568a:	a3 83       	std	Z+3, r26	; 0x03
   1568c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15690:	47 c0       	rjmp	.+142    	; 0x15720 <SS80_Transparent_State+0x1d8>
   15692:	28 30       	cpi	r18, 0x08	; 8
   15694:	31 05       	cpc	r19, r1
   15696:	e1 f4       	brne	.+56     	; 0x156d0 <SS80_Transparent_State+0x188>
   15698:	85 ff       	sbrs	r24, 5
   1569a:	12 c0       	rjmp	.+36     	; 0x156c0 <SS80_Transparent_State+0x178>
   1569c:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   156a0:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   156a4:	85 81       	ldd	r24, Z+5	; 0x05
   156a6:	90 e0       	ldi	r25, 0x00	; 0
   156a8:	ed b7       	in	r30, 0x3d	; 61
   156aa:	fe b7       	in	r31, 0x3e	; 62
   156ac:	95 83       	std	Z+5, r25	; 0x05
   156ae:	84 83       	std	Z+4, r24	; 0x04
   156b0:	89 e8       	ldi	r24, 0x89	; 137
   156b2:	9f e1       	ldi	r25, 0x1F	; 31
   156b4:	a0 e0       	ldi	r26, 0x00	; 0
   156b6:	81 83       	std	Z+1, r24	; 0x01
   156b8:	92 83       	std	Z+2, r25	; 0x02
   156ba:	a3 83       	std	Z+3, r26	; 0x03
   156bc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   156c0:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   156c4:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   156c8:	85 81       	ldd	r24, Z+5	; 0x05
   156ca:	90 e0       	ldi	r25, 0x00	; 0
   156cc:	aa de       	rcall	.-684    	; 0x15422 <SS80_Channel_Independent_Clear>
   156ce:	44 c0       	rjmp	.+136    	; 0x15758 <SS80_Transparent_State+0x210>
   156d0:	29 30       	cpi	r18, 0x09	; 9
   156d2:	31 05       	cpc	r19, r1
   156d4:	b1 f4       	brne	.+44     	; 0x15702 <SS80_Transparent_State+0x1ba>
   156d6:	85 ff       	sbrs	r24, 5
   156d8:	12 c0       	rjmp	.+36     	; 0x156fe <SS80_Transparent_State+0x1b6>
   156da:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   156de:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   156e2:	85 81       	ldd	r24, Z+5	; 0x05
   156e4:	90 e0       	ldi	r25, 0x00	; 0
   156e6:	ed b7       	in	r30, 0x3d	; 61
   156e8:	fe b7       	in	r31, 0x3e	; 62
   156ea:	95 83       	std	Z+5, r25	; 0x05
   156ec:	84 83       	std	Z+4, r24	; 0x04
   156ee:	85 e7       	ldi	r24, 0x75	; 117
   156f0:	9f e1       	ldi	r25, 0x1F	; 31
   156f2:	a0 e0       	ldi	r26, 0x00	; 0
   156f4:	81 83       	std	Z+1, r24	; 0x01
   156f6:	92 83       	std	Z+2, r25	; 0x02
   156f8:	a3 83       	std	Z+3, r26	; 0x03
   156fa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   156fe:	13 df       	rcall	.-474    	; 0x15526 <SS80_Cancel>
   15700:	2b c0       	rjmp	.+86     	; 0x15758 <SS80_Transparent_State+0x210>
   15702:	80 ff       	sbrs	r24, 0
   15704:	22 c0       	rjmp	.+68     	; 0x1574a <SS80_Transparent_State+0x202>
   15706:	ed b7       	in	r30, 0x3d	; 61
   15708:	fe b7       	in	r31, 0x3e	; 62
   1570a:	35 83       	std	Z+5, r19	; 0x05
   1570c:	24 83       	std	Z+4, r18	; 0x04
   1570e:	85 e5       	ldi	r24, 0x55	; 85
   15710:	9f e1       	ldi	r25, 0x1F	; 31
   15712:	a0 e0       	ldi	r26, 0x00	; 0
   15714:	81 83       	std	Z+1, r24	; 0x01
   15716:	92 83       	std	Z+2, r25	; 0x02
   15718:	a3 83       	std	Z+3, r26	; 0x03
   1571a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1571e:	86 01       	movw	r16, r12
   15720:	0e 15       	cp	r16, r14
   15722:	1f 05       	cpc	r17, r15
   15724:	91 f0       	breq	.+36     	; 0x1574a <SS80_Transparent_State+0x202>
   15726:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1572a:	80 ff       	sbrs	r24, 0
   1572c:	0e c0       	rjmp	.+28     	; 0x1574a <SS80_Transparent_State+0x202>
   1572e:	ed b7       	in	r30, 0x3d	; 61
   15730:	fe b7       	in	r31, 0x3e	; 62
   15732:	f7 82       	std	Z+7, r15	; 0x07
   15734:	e6 82       	std	Z+6, r14	; 0x06
   15736:	15 83       	std	Z+5, r17	; 0x05
   15738:	04 83       	std	Z+4, r16	; 0x04
   1573a:	89 e1       	ldi	r24, 0x19	; 25
   1573c:	9f e1       	ldi	r25, 0x1F	; 31
   1573e:	a0 e0       	ldi	r26, 0x00	; 0
   15740:	81 83       	std	Z+1, r24	; 0x01
   15742:	92 83       	std	Z+2, r25	; 0x02
   15744:	a3 83       	std	Z+3, r26	; 0x03
   15746:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1574a:	88 85       	ldd	r24, Y+8	; 0x08
   1574c:	99 85       	ldd	r25, Y+9	; 0x09
   1574e:	88 27       	eor	r24, r24
   15750:	90 7d       	andi	r25, 0xD0	; 208
   15752:	02 c0       	rjmp	.+4      	; 0x15758 <SS80_Transparent_State+0x210>
   15754:	80 e0       	ldi	r24, 0x00	; 0
   15756:	90 e0       	ldi	r25, 0x00	; 0
   15758:	29 96       	adiw	r28, 0x09	; 9
   1575a:	ea e0       	ldi	r30, 0x0A	; 10
   1575c:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

00015760 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15760:	a6 e0       	ldi	r26, 0x06	; 6
   15762:	b0 e0       	ldi	r27, 0x00	; 0
   15764:	e6 eb       	ldi	r30, 0xB6	; 182
   15766:	fb ea       	ldi	r31, 0xAB	; 171
   15768:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   1576c:	80 e0       	ldi	r24, 0x00	; 0
   1576e:	91 e0       	ldi	r25, 0x01	; 1
   15770:	9d 83       	std	Y+5, r25	; 0x05
   15772:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15774:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15778:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   1577c:	81 e0       	ldi	r24, 0x01	; 1
   1577e:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15780:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15782:	ae 01       	movw	r20, r28
   15784:	4c 5f       	subi	r20, 0xFC	; 252
   15786:	5f 4f       	sbci	r21, 0xFF	; 255
   15788:	61 e0       	ldi	r22, 0x01	; 1
   1578a:	70 e0       	ldi	r23, 0x00	; 0
   1578c:	ce 01       	movw	r24, r28
   1578e:	06 96       	adiw	r24, 0x06	; 6
   15790:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   15794:	01 97       	sbiw	r24, 0x01	; 1
   15796:	99 f0       	breq	.+38     	; 0x157be <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15798:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1579c:	80 ff       	sbrs	r24, 0
   1579e:	0a c0       	rjmp	.+20     	; 0x157b4 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   157a0:	87 e6       	ldi	r24, 0x67	; 103
   157a2:	9e e1       	ldi	r25, 0x1E	; 30
   157a4:	a0 e0       	ldi	r26, 0x00	; 0
   157a6:	ed b7       	in	r30, 0x3d	; 61
   157a8:	fe b7       	in	r31, 0x3e	; 62
   157aa:	81 83       	std	Z+1, r24	; 0x01
   157ac:	92 83       	std	Z+2, r25	; 0x02
   157ae:	a3 83       	std	Z+3, r26	; 0x03
   157b0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(status & ERROR_MASK);
   157b4:	8c 81       	ldd	r24, Y+4	; 0x04
   157b6:	9d 81       	ldd	r25, Y+5	; 0x05
   157b8:	88 27       	eor	r24, r24
   157ba:	90 7d       	andi	r25, 0xD0	; 208
   157bc:	07 c0       	rjmp	.+14     	; 0x157cc <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   157be:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   157c2:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   157c6:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   157c8:	80 e0       	ldi	r24, 0x00	; 0
   157ca:	90 e0       	ldi	r25, 0x00	; 0
}
   157cc:	26 96       	adiw	r28, 0x06	; 6
   157ce:	e2 e0       	ldi	r30, 0x02	; 2
   157d0:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000157d4 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   157d4:	a7 e1       	ldi	r26, 0x17	; 23
   157d6:	b0 e0       	ldi	r27, 0x00	; 0
   157d8:	e0 ef       	ldi	r30, 0xF0	; 240
   157da:	fb ea       	ldi	r31, 0xAB	; 171
   157dc:	0c 94 84 e1 	jmp	0x1c308	; 0x1c308 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   157e0:	60 91 57 19 	lds	r22, 0x1957	; 0x801957 <SS80s>
   157e4:	70 91 58 19 	lds	r23, 0x1958	; 0x801958 <SS80s+0x1>
   157e8:	fb 01       	movw	r30, r22
   157ea:	27 81       	ldd	r18, Z+7	; 0x07
   157ec:	30 85       	ldd	r19, Z+8	; 0x08
   157ee:	41 85       	ldd	r20, Z+9	; 0x09
   157f0:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   157f2:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <SS80p>
   157f6:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <SS80p+0x1>
   157fa:	fc 01       	movw	r30, r24
   157fc:	a0 89       	ldd	r26, Z+16	; 0x10
   157fe:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15800:	fb 01       	movw	r30, r22
   15802:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15804:	1d 86       	std	Y+13, r1	; 0x0d
   15806:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15808:	54 98       	cbi	0x0a, 4	; 10
   1580a:	4c 99       	sbic	0x09, 4	; 9
   1580c:	03 c0       	rjmp	.+6      	; 0x15814 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   1580e:	80 e0       	ldi	r24, 0x00	; 0
   15810:	90 e1       	ldi	r25, 0x10	; 16
   15812:	3e c1       	rjmp	.+636    	; 0x15a90 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15814:	0e 94 63 e1 	call	0x1c2c6	; 0x1c2c6 <__muluhisi3>
   15818:	4b 01       	movw	r8, r22
   1581a:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1581c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15820:	85 ff       	sbrs	r24, 5
   15822:	1a c0       	rjmp	.+52     	; 0x15858 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15824:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15828:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   1582c:	83 85       	ldd	r24, Z+11	; 0x0b
   1582e:	94 85       	ldd	r25, Z+12	; 0x0c
   15830:	a5 85       	ldd	r26, Z+13	; 0x0d
   15832:	b6 85       	ldd	r27, Z+14	; 0x0e
   15834:	ed b7       	in	r30, 0x3d	; 61
   15836:	fe b7       	in	r31, 0x3e	; 62
   15838:	80 87       	std	Z+8, r24	; 0x08
   1583a:	91 87       	std	Z+9, r25	; 0x09
   1583c:	a2 87       	std	Z+10, r26	; 0x0a
   1583e:	b3 87       	std	Z+11, r27	; 0x0b
   15840:	84 82       	std	Z+4, r8	; 0x04
   15842:	95 82       	std	Z+5, r9	; 0x05
   15844:	a6 82       	std	Z+6, r10	; 0x06
   15846:	b7 82       	std	Z+7, r11	; 0x07
   15848:	81 e4       	ldi	r24, 0x41	; 65
   1584a:	95 e2       	ldi	r25, 0x25	; 37
   1584c:	a0 e0       	ldi	r26, 0x00	; 0
   1584e:	81 83       	std	Z+1, r24	; 0x01
   15850:	92 83       	std	Z+2, r25	; 0x02
   15852:	a3 83       	std	Z+3, r26	; 0x03
   15854:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   15858:	2b db       	rcall	.-2474   	; 0x14eb0 <SS80_cmd_seek>
   1585a:	89 2b       	or	r24, r25
   1585c:	09 f0       	breq	.+2      	; 0x15860 <SS80_locate_and_read+0x8c>
   1585e:	ae c0       	rjmp	.+348    	; 0x159bc <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15860:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15864:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15868:	43 84       	ldd	r4, Z+11	; 0x0b
   1586a:	54 84       	ldd	r5, Z+12	; 0x0c
   1586c:	65 84       	ldd	r6, Z+13	; 0x0d
   1586e:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15870:	1e 86       	std	Y+14, r1	; 0x0e
   15872:	1f 86       	std	Y+15, r1	; 0x0f
   15874:	18 8a       	std	Y+16, r1	; 0x10
   15876:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15878:	83 e2       	ldi	r24, 0x23	; 35
   1587a:	95 e2       	ldi	r25, 0x25	; 37
   1587c:	9c 01       	movw	r18, r24
   1587e:	40 e0       	ldi	r20, 0x00	; 0
   15880:	2a 8b       	std	Y+18, r18	; 0x12
   15882:	3b 8b       	std	Y+19, r19	; 0x13
   15884:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15886:	33 24       	eor	r3, r3
   15888:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   1588a:	82 ef       	ldi	r24, 0xF2	; 242
   1588c:	94 e2       	ldi	r25, 0x24	; 36
   1588e:	9c 01       	movw	r18, r24
   15890:	40 e0       	ldi	r20, 0x00	; 0
   15892:	2d 8b       	std	Y+21, r18	; 0x15
   15894:	3e 8b       	std	Y+22, r19	; 0x16
   15896:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15898:	34 c0       	rjmp	.+104    	; 0x15902 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1589a:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   1589c:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   158a0:	ae 01       	movw	r20, r28
   158a2:	44 5f       	subi	r20, 0xF4	; 244
   158a4:	5f 4f       	sbci	r21, 0xFF	; 255
   158a6:	b6 01       	movw	r22, r12
   158a8:	8a ed       	ldi	r24, 0xDA	; 218
   158aa:	9c e1       	ldi	r25, 0x1C	; 28
   158ac:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   158b0:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   158b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158b6:	87 ff       	sbrs	r24, 7
   158b8:	04 c0       	rjmp	.+8      	; 0x158c2 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   158ba:	80 eb       	ldi	r24, 0xB0	; 176
   158bc:	90 e1       	ldi	r25, 0x10	; 16
   158be:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   158c2:	c0 16       	cp	r12, r16
   158c4:	d1 06       	cpc	r13, r17
   158c6:	09 f0       	breq	.+2      	; 0x158ca <SS80_locate_and_read+0xf6>
   158c8:	82 c0       	rjmp	.+260    	; 0x159ce <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   158ca:	0d 2c       	mov	r0, r13
   158cc:	00 0c       	add	r0, r0
   158ce:	ee 08       	sbc	r14, r14
   158d0:	ff 08       	sbc	r15, r15
   158d2:	8c 0c       	add	r8, r12
   158d4:	9d 1c       	adc	r9, r13
   158d6:	ae 1c       	adc	r10, r14
   158d8:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   158da:	01 2e       	mov	r0, r17
   158dc:	00 0c       	add	r0, r0
   158de:	22 0b       	sbc	r18, r18
   158e0:	33 0b       	sbc	r19, r19
   158e2:	8e 85       	ldd	r24, Y+14	; 0x0e
   158e4:	9f 85       	ldd	r25, Y+15	; 0x0f
   158e6:	a8 89       	ldd	r26, Y+16	; 0x10
   158e8:	b9 89       	ldd	r27, Y+17	; 0x11
   158ea:	80 0f       	add	r24, r16
   158ec:	91 1f       	adc	r25, r17
   158ee:	a2 1f       	adc	r26, r18
   158f0:	b3 1f       	adc	r27, r19
   158f2:	8e 87       	std	Y+14, r24	; 0x0e
   158f4:	9f 87       	std	Y+15, r25	; 0x0f
   158f6:	a8 8b       	std	Y+16, r26	; 0x10
   158f8:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   158fa:	40 1a       	sub	r4, r16
   158fc:	51 0a       	sbc	r5, r17
   158fe:	62 0a       	sbc	r6, r18
   15900:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15902:	41 14       	cp	r4, r1
   15904:	51 04       	cpc	r5, r1
   15906:	61 04       	cpc	r6, r1
   15908:	71 04       	cpc	r7, r1
   1590a:	09 f4       	brne	.+2      	; 0x1590e <SS80_locate_and_read+0x13a>
   1590c:	92 c0       	rjmp	.+292    	; 0x15a32 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   1590e:	54 98       	cbi	0x0a, 4	; 10
   15910:	4c 9b       	sbis	0x09, 4	; 9
   15912:	7d cf       	rjmp	.-262    	; 0x1580e <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15914:	31 e0       	ldi	r19, 0x01	; 1
   15916:	43 16       	cp	r4, r19
   15918:	53 06       	cpc	r5, r19
   1591a:	61 04       	cpc	r6, r1
   1591c:	71 04       	cpc	r7, r1
   1591e:	08 f4       	brcc	.+2      	; 0x15922 <SS80_locate_and_read+0x14e>
   15920:	4f c0       	rjmp	.+158    	; 0x159c0 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15922:	1d 86       	std	Y+13, r1	; 0x0d
   15924:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15926:	c1 2c       	mov	r12, r1
   15928:	dd 24       	eor	r13, r13
   1592a:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1592c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15930:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15932:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15936:	e0 90 57 19 	lds	r14, 0x1957	; 0x801957 <SS80s>
   1593a:	f0 90 58 19 	lds	r15, 0x1958	; 0x801958 <SS80s+0x1>
   1593e:	43 e0       	ldi	r20, 0x03	; 3
   15940:	e4 0e       	add	r14, r20
   15942:	f1 1c       	adc	r15, r1
   15944:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15948:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   1594c:	86 01       	movw	r16, r12
   1594e:	2a ed       	ldi	r18, 0xDA	; 218
   15950:	3c e1       	ldi	r19, 0x1C	; 28
   15952:	b5 01       	movw	r22, r10
   15954:	a4 01       	movw	r20, r8
   15956:	82 81       	ldd	r24, Z+2	; 0x02
   15958:	93 81       	ldd	r25, Z+3	; 0x03
   1595a:	0e 94 3f 83 	call	0x1067e	; 0x1067e <dbf_open_read>
   1595e:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15960:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15964:	86 ff       	sbrs	r24, 6
   15966:	04 c0       	rjmp	.+8      	; 0x15970 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15968:	85 ea       	ldi	r24, 0xA5	; 165
   1596a:	90 e1       	ldi	r25, 0x10	; 16
   1596c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15970:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15974:	85 ff       	sbrs	r24, 5
   15976:	0c c0       	rjmp	.+24     	; 0x15990 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15978:	ed b7       	in	r30, 0x3d	; 61
   1597a:	fe b7       	in	r31, 0x3e	; 62
   1597c:	15 83       	std	Z+5, r17	; 0x05
   1597e:	04 83       	std	Z+4, r16	; 0x04
   15980:	2a 89       	ldd	r18, Y+18	; 0x12
   15982:	3b 89       	ldd	r19, Y+19	; 0x13
   15984:	4c 89       	ldd	r20, Y+20	; 0x14
   15986:	21 83       	std	Z+1, r18	; 0x01
   15988:	32 83       	std	Z+2, r19	; 0x02
   1598a:	43 83       	std	Z+3, r20	; 0x03
   1598c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15990:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15994:	17 ff       	sbrs	r17, 7
   15996:	81 cf       	rjmp	.-254    	; 0x1589a <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15998:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   1599c:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   159a0:	91 e0       	ldi	r25, 0x01	; 1
   159a2:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   159a4:	80 ff       	sbrs	r24, 0
   159a6:	0a c0       	rjmp	.+20     	; 0x159bc <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   159a8:	8b e0       	ldi	r24, 0x0B	; 11
   159aa:	95 e2       	ldi	r25, 0x25	; 37
   159ac:	a0 e0       	ldi	r26, 0x00	; 0
   159ae:	ed b7       	in	r30, 0x3d	; 61
   159b0:	fe b7       	in	r31, 0x3e	; 62
   159b2:	81 83       	std	Z+1, r24	; 0x01
   159b4:	92 83       	std	Z+2, r25	; 0x02
   159b6:	a3 83       	std	Z+3, r26	; 0x03
   159b8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            return( SS80_error_return() );
   159bc:	d1 de       	rcall	.-606    	; 0x15760 <SS80_error_return>
   159be:	68 c0       	rjmp	.+208    	; 0x15a90 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   159c0:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   159c2:	8c 85       	ldd	r24, Y+12	; 0x0c
   159c4:	9d 85       	ldd	r25, Y+13	; 0x0d
   159c6:	91 60       	ori	r25, 0x01	; 1
   159c8:	9d 87       	std	Y+13, r25	; 0x0d
   159ca:	8c 87       	std	Y+12, r24	; 0x0c
   159cc:	af cf       	rjmp	.-162    	; 0x1592c <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   159ce:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   159d2:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   159d6:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   159d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159dc:	80 ff       	sbrs	r24, 0
   159de:	0a c0       	rjmp	.+20     	; 0x159f4 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   159e0:	2d 89       	ldd	r18, Y+21	; 0x15
   159e2:	3e 89       	ldd	r19, Y+22	; 0x16
   159e4:	4f 89       	ldd	r20, Y+23	; 0x17
   159e6:	ed b7       	in	r30, 0x3d	; 61
   159e8:	fe b7       	in	r31, 0x3e	; 62
   159ea:	21 83       	std	Z+1, r18	; 0x01
   159ec:	32 83       	std	Z+2, r19	; 0x02
   159ee:	43 83       	std	Z+3, r20	; 0x03
   159f0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            if(status & ERROR_MASK)
   159f4:	8c 85       	ldd	r24, Y+12	; 0x0c
   159f6:	9d 85       	ldd	r25, Y+13	; 0x0d
   159f8:	88 27       	eor	r24, r24
   159fa:	90 7d       	andi	r25, 0xD0	; 208
   159fc:	89 2b       	or	r24, r25
   159fe:	09 f4       	brne	.+2      	; 0x15a02 <SS80_locate_and_read+0x22e>
   15a00:	64 cf       	rjmp	.-312    	; 0x158ca <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15a02:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15a06:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15a0a:	83 81       	ldd	r24, Z+3	; 0x03
   15a0c:	94 81       	ldd	r25, Z+4	; 0x04
   15a0e:	80 62       	ori	r24, 0x20	; 32
   15a10:	94 83       	std	Z+4, r25	; 0x04
   15a12:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15a14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a18:	80 ff       	sbrs	r24, 0
   15a1a:	21 c0       	rjmp	.+66     	; 0x15a5e <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15a1c:	8d ec       	ldi	r24, 0xCD	; 205
   15a1e:	94 e2       	ldi	r25, 0x24	; 36
   15a20:	a0 e0       	ldi	r26, 0x00	; 0
   15a22:	ed b7       	in	r30, 0x3d	; 61
   15a24:	fe b7       	in	r31, 0x3e	; 62
   15a26:	81 83       	std	Z+1, r24	; 0x01
   15a28:	92 83       	std	Z+2, r25	; 0x02
   15a2a:	a3 83       	std	Z+3, r26	; 0x03
   15a2c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15a30:	16 c0       	rjmp	.+44     	; 0x15a5e <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15a32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a36:	85 ff       	sbrs	r24, 5
   15a38:	12 c0       	rjmp	.+36     	; 0x15a5e <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15a3a:	8e 85       	ldd	r24, Y+14	; 0x0e
   15a3c:	9f 85       	ldd	r25, Y+15	; 0x0f
   15a3e:	a8 89       	ldd	r26, Y+16	; 0x10
   15a40:	b9 89       	ldd	r27, Y+17	; 0x11
   15a42:	ed b7       	in	r30, 0x3d	; 61
   15a44:	fe b7       	in	r31, 0x3e	; 62
   15a46:	84 83       	std	Z+4, r24	; 0x04
   15a48:	95 83       	std	Z+5, r25	; 0x05
   15a4a:	a6 83       	std	Z+6, r26	; 0x06
   15a4c:	b7 83       	std	Z+7, r27	; 0x07
   15a4e:	85 ea       	ldi	r24, 0xA5	; 165
   15a50:	94 e2       	ldi	r25, 0x24	; 36
   15a52:	a0 e0       	ldi	r26, 0x00	; 0
   15a54:	81 83       	std	Z+1, r24	; 0x01
   15a56:	92 83       	std	Z+2, r25	; 0x02
   15a58:	a3 83       	std	Z+3, r26	; 0x03
   15a5a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15a5e:	00 91 57 19 	lds	r16, 0x1957	; 0x801957 <SS80s>
   15a62:	10 91 58 19 	lds	r17, 0x1958	; 0x801958 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15a66:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15a6a:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15a6e:	20 89       	ldd	r18, Z+16	; 0x10
   15a70:	31 89       	ldd	r19, Z+17	; 0x11
   15a72:	40 e0       	ldi	r20, 0x00	; 0
   15a74:	50 e0       	ldi	r21, 0x00	; 0
   15a76:	c5 01       	movw	r24, r10
   15a78:	b4 01       	movw	r22, r8
   15a7a:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__udivmodsi4>
   15a7e:	f8 01       	movw	r30, r16
   15a80:	27 83       	std	Z+7, r18	; 0x07
   15a82:	30 87       	std	Z+8, r19	; 0x08
   15a84:	41 87       	std	Z+9, r20	; 0x09
   15a86:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15a88:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a8a:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a8c:	88 27       	eor	r24, r24
   15a8e:	90 7d       	andi	r25, 0xD0	; 208
}
   15a90:	67 96       	adiw	r28, 0x17	; 23
   15a92:	e1 e1       	ldi	r30, 0x11	; 17
   15a94:	0c 94 a0 e1 	jmp	0x1c340	; 0x1c340 <__epilogue_restores__+0x2>

00015a98 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15a98:	cf 93       	push	r28
   15a9a:	df 93       	push	r29
   15a9c:	00 d0       	rcall	.+0      	; 0x15a9e <SS80_Execute_State+0x6>
   15a9e:	00 d0       	rcall	.+0      	; 0x15aa0 <SS80_Execute_State+0x8>
   15aa0:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15aa2:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15aa6:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15aaa:	81 81       	ldd	r24, Z+1	; 0x01
   15aac:	90 e0       	ldi	r25, 0x00	; 0
   15aae:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
    switch(SS80s->estate)
   15ab2:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15ab6:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15aba:	80 81       	ld	r24, Z
   15abc:	91 81       	ldd	r25, Z+1	; 0x01
   15abe:	82 30       	cpi	r24, 0x02	; 2
   15ac0:	91 05       	cpc	r25, r1
   15ac2:	89 f0       	breq	.+34     	; 0x15ae6 <SS80_Execute_State+0x4e>
   15ac4:	3c f4       	brge	.+14     	; 0x15ad4 <SS80_Execute_State+0x3c>
   15ac6:	00 97       	sbiw	r24, 0x00	; 0
   15ac8:	81 f1       	breq	.+96     	; 0x15b2a <SS80_Execute_State+0x92>
   15aca:	81 30       	cpi	r24, 0x01	; 1
   15acc:	91 05       	cpc	r25, r1
   15ace:	b9 f4       	brne	.+46     	; 0x15afe <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15ad0:	81 de       	rcall	.-766    	; 0x157d4 <SS80_locate_and_read>
   15ad2:	0d c0       	rjmp	.+26     	; 0x15aee <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15ad4:	83 30       	cpi	r24, 0x03	; 3
   15ad6:	91 05       	cpc	r25, r1
   15ad8:	41 f0       	breq	.+16     	; 0x15aea <SS80_Execute_State+0x52>
   15ada:	84 30       	cpi	r24, 0x04	; 4
   15adc:	91 05       	cpc	r25, r1
   15ade:	79 f4       	brne	.+30     	; 0x15afe <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15ae0:	0e 94 21 a4 	call	0x14842	; 0x14842 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15ae4:	04 c0       	rjmp	.+8      	; 0x15aee <SS80_Execute_State+0x56>
   15ae6:	59 da       	rcall	.-2894   	; 0x14f9a <SS80_locate_and_write>
   15ae8:	02 c0       	rjmp	.+4      	; 0x15aee <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15aea:	0e 94 a0 a3 	call	0x14740	; 0x14740 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15aee:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15af0:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15af4:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15af8:	11 82       	std	Z+1, r1	; 0x01
   15afa:	10 82       	st	Z, r1
            break;
   15afc:	18 c0       	rjmp	.+48     	; 0x15b2e <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15afe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15b02:	20 ff       	sbrs	r18, 0
   15b04:	0c c0       	rjmp	.+24     	; 0x15b1e <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15b06:	ed b7       	in	r30, 0x3d	; 61
   15b08:	fe b7       	in	r31, 0x3e	; 62
   15b0a:	95 83       	std	Z+5, r25	; 0x05
   15b0c:	84 83       	std	Z+4, r24	; 0x04
   15b0e:	89 e6       	ldi	r24, 0x69	; 105
   15b10:	95 e2       	ldi	r25, 0x25	; 37
   15b12:	a0 e0       	ldi	r26, 0x00	; 0
   15b14:	81 83       	std	Z+1, r24	; 0x01
   15b16:	92 83       	std	Z+2, r25	; 0x02
   15b18:	a3 83       	std	Z+3, r26	; 0x03
   15b1a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            SS80s->estate = EXEC_IDLE;
   15b1e:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <SS80s>
   15b22:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <SS80s+0x1>
   15b26:	11 82       	std	Z+1, r1	; 0x01
   15b28:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15b2a:	c0 e0       	ldi	r28, 0x00	; 0
   15b2c:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15b2e:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15b32:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15b36:	81 81       	ldd	r24, Z+1	; 0x01
   15b38:	90 e0       	ldi	r25, 0x00	; 0
   15b3a:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
    return(ret);
}
   15b3e:	ce 01       	movw	r24, r28
   15b40:	cd b7       	in	r28, 0x3d	; 61
   15b42:	de b7       	in	r29, 0x3e	; 62
   15b44:	25 96       	adiw	r28, 0x05	; 5
   15b46:	e2 e0       	ldi	r30, 0x02	; 2
   15b48:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00015b4c <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15b4c:	a9 e0       	ldi	r26, 0x09	; 9
   15b4e:	b0 e0       	ldi	r27, 0x00	; 0
   15b50:	ec ea       	ldi	r30, 0xAC	; 172
   15b52:	fd ea       	ldi	r31, 0xAD	; 173
   15b54:	0c 94 92 e1 	jmp	0x1c324	; 0x1c324 <__prologue_saves__+0x1e>
   15b58:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15b5a:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   15b5e:	90 e0       	ldi	r25, 0x00	; 0
   15b60:	0e 94 27 8b 	call	0x1164e	; 0x1164e <SS80_is_MTA>
   15b64:	89 2b       	or	r24, r25
   15b66:	19 f0       	breq	.+6      	; 0x15b6e <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15b68:	15 36       	cpi	r17, 0x65	; 101
   15b6a:	19 f5       	brne	.+70     	; 0x15bb2 <SS80_COMMANDS+0x66>
   15b6c:	09 c0       	rjmp	.+18     	; 0x15b80 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15b6e:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15b72:	90 e0       	ldi	r25, 0x00	; 0
   15b74:	0e 94 16 8b 	call	0x1162c	; 0x1162c <SS80_is_MLA>
   15b78:	ec 01       	movw	r28, r24
   15b7a:	89 2b       	or	r24, r25
   15b7c:	a9 f7       	brne	.-22     	; 0x15b68 <SS80_COMMANDS+0x1c>
   15b7e:	ad c0       	rjmp	.+346    	; 0x15cda <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15b80:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15b84:	90 e0       	ldi	r25, 0x00	; 0
   15b86:	0e 94 16 8b 	call	0x1162c	; 0x1162c <SS80_is_MLA>
   15b8a:	89 2b       	or	r24, r25
   15b8c:	09 f4       	brne	.+2      	; 0x15b90 <SS80_COMMANDS+0x44>
   15b8e:	a2 c0       	rjmp	.+324    	; 0x15cd4 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b94:	85 ff       	sbrs	r24, 5
   15b96:	0a c0       	rjmp	.+20     	; 0x15bac <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15b98:	81 e5       	ldi	r24, 0x51	; 81
   15b9a:	9e e1       	ldi	r25, 0x1E	; 30
   15b9c:	a0 e0       	ldi	r26, 0x00	; 0
   15b9e:	ed b7       	in	r30, 0x3d	; 61
   15ba0:	fe b7       	in	r31, 0x3e	; 62
   15ba2:	81 83       	std	Z+1, r24	; 0x01
   15ba4:	92 83       	std	Z+2, r25	; 0x02
   15ba6:	a3 83       	std	Z+3, r26	; 0x03
   15ba8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return ( SS80_Command_State() );
   15bac:	0e 94 e1 a4 	call	0x149c2	; 0x149c2 <SS80_Command_State>
   15bb0:	73 c0       	rjmp	.+230    	; 0x15c98 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15bb2:	1e 36       	cpi	r17, 0x6E	; 110
   15bb4:	01 f5       	brne	.+64     	; 0x15bf6 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15bb6:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15bba:	90 e0       	ldi	r25, 0x00	; 0
   15bbc:	0e 94 16 8b 	call	0x1162c	; 0x1162c <SS80_is_MLA>
   15bc0:	89 2b       	or	r24, r25
   15bc2:	79 f0       	breq	.+30     	; 0x15be2 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15bc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bc8:	85 ff       	sbrs	r24, 5
   15bca:	13 c0       	rjmp	.+38     	; 0x15bf2 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15bcc:	8b e3       	ldi	r24, 0x3B	; 59
   15bce:	9e e1       	ldi	r25, 0x1E	; 30
   15bd0:	a0 e0       	ldi	r26, 0x00	; 0
   15bd2:	ed b7       	in	r30, 0x3d	; 61
   15bd4:	fe b7       	in	r31, 0x3e	; 62
   15bd6:	81 83       	std	Z+1, r24	; 0x01
   15bd8:	92 83       	std	Z+2, r25	; 0x02
   15bda:	a3 83       	std	Z+3, r26	; 0x03
   15bdc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15be0:	08 c0       	rjmp	.+16     	; 0x15bf2 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15be2:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   15be6:	90 e0       	ldi	r25, 0x00	; 0
   15be8:	0e 94 27 8b 	call	0x1164e	; 0x1164e <SS80_is_MTA>
   15bec:	89 2b       	or	r24, r25
   15bee:	51 f7       	brne	.-44     	; 0x15bc4 <SS80_COMMANDS+0x78>
   15bf0:	71 c0       	rjmp	.+226    	; 0x15cd4 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15bf2:	52 df       	rcall	.-348    	; 0x15a98 <SS80_Execute_State>
   15bf4:	51 c0       	rjmp	.+162    	; 0x15c98 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15bf6:	10 37       	cpi	r17, 0x70	; 112
   15bf8:	b9 f5       	brne	.+110    	; 0x15c68 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15bfa:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   15bfe:	90 e0       	ldi	r25, 0x00	; 0
   15c00:	0e 94 27 8b 	call	0x1164e	; 0x1164e <SS80_is_MTA>
   15c04:	89 2b       	or	r24, r25
   15c06:	81 f0       	breq	.+32     	; 0x15c28 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c08:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c0c:	85 ff       	sbrs	r24, 5
   15c0e:	0a c0       	rjmp	.+20     	; 0x15c24 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15c10:	86 e2       	ldi	r24, 0x26	; 38
   15c12:	9e e1       	ldi	r25, 0x1E	; 30
   15c14:	a0 e0       	ldi	r26, 0x00	; 0
   15c16:	ed b7       	in	r30, 0x3d	; 61
   15c18:	fe b7       	in	r31, 0x3e	; 62
   15c1a:	81 83       	std	Z+1, r24	; 0x01
   15c1c:	92 83       	std	Z+2, r25	; 0x02
   15c1e:	a3 83       	std	Z+3, r26	; 0x03
   15c20:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return( SS80_Report() );
   15c24:	4c db       	rcall	.-2408   	; 0x152be <SS80_Report>
   15c26:	38 c0       	rjmp	.+112    	; 0x15c98 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15c28:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15c2c:	90 e0       	ldi	r25, 0x00	; 0
   15c2e:	0e 94 16 8b 	call	0x1162c	; 0x1162c <SS80_is_MLA>
   15c32:	89 2b       	or	r24, r25
   15c34:	09 f4       	brne	.+2      	; 0x15c38 <SS80_COMMANDS+0xec>
   15c36:	4e c0       	rjmp	.+156    	; 0x15cd4 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c3c:	85 ff       	sbrs	r24, 5
   15c3e:	0a c0       	rjmp	.+20     	; 0x15c54 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15c40:	87 e1       	ldi	r24, 0x17	; 23
   15c42:	9e e1       	ldi	r25, 0x1E	; 30
   15c44:	a0 e0       	ldi	r26, 0x00	; 0
   15c46:	ed b7       	in	r30, 0x3d	; 61
   15c48:	fe b7       	in	r31, 0x3e	; 62
   15c4a:	81 83       	std	Z+1, r24	; 0x01
   15c4c:	92 83       	std	Z+2, r25	; 0x02
   15c4e:	a3 83       	std	Z+3, r26	; 0x03
   15c50:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15c54:	e0 91 59 19 	lds	r30, 0x1959	; 0x801959 <SS80p>
   15c58:	f0 91 5a 19 	lds	r31, 0x195A	; 0x80195a <SS80p+0x1>
   15c5c:	81 81       	ldd	r24, Z+1	; 0x01
   15c5e:	90 e0       	ldi	r25, 0x00	; 0
   15c60:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15c64:	1d dc       	rcall	.-1990   	; 0x154a0 <SS80_Amigo_Clear>
   15c66:	18 c0       	rjmp	.+48     	; 0x15c98 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15c68:	12 37       	cpi	r17, 0x72	; 114
   15c6a:	c1 f4       	brne	.+48     	; 0x15c9c <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15c6c:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15c70:	90 e0       	ldi	r25, 0x00	; 0
   15c72:	0e 94 16 8b 	call	0x1162c	; 0x1162c <SS80_is_MLA>
   15c76:	89 2b       	or	r24, r25
   15c78:	89 f0       	breq	.+34     	; 0x15c9c <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c7e:	85 ff       	sbrs	r24, 5
   15c80:	0a c0       	rjmp	.+20     	; 0x15c96 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15c82:	83 e0       	ldi	r24, 0x03	; 3
   15c84:	9e e1       	ldi	r25, 0x1E	; 30
   15c86:	a0 e0       	ldi	r26, 0x00	; 0
   15c88:	ed b7       	in	r30, 0x3d	; 61
   15c8a:	fe b7       	in	r31, 0x3e	; 62
   15c8c:	81 83       	std	Z+1, r24	; 0x01
   15c8e:	92 83       	std	Z+2, r25	; 0x02
   15c90:	a3 83       	std	Z+3, r26	; 0x03
   15c92:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return( SS80_Transparent_State() );
   15c96:	58 dc       	rcall	.-1872   	; 0x15548 <SS80_Transparent_State>
   15c98:	ec 01       	movw	r28, r24
   15c9a:	3b c0       	rjmp	.+118    	; 0x15d12 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15c9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ca0:	80 ff       	sbrs	r24, 0
   15ca2:	18 c0       	rjmp	.+48     	; 0x15cd4 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15ca4:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   15ca8:	90 e0       	ldi	r25, 0x00	; 0
   15caa:	ed b7       	in	r30, 0x3d	; 61
   15cac:	fe b7       	in	r31, 0x3e	; 62
   15cae:	91 87       	std	Z+9, r25	; 0x09
   15cb0:	80 87       	std	Z+8, r24	; 0x08
   15cb2:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15cb6:	90 e0       	ldi	r25, 0x00	; 0
   15cb8:	97 83       	std	Z+7, r25	; 0x07
   15cba:	86 83       	std	Z+6, r24	; 0x06
   15cbc:	81 2f       	mov	r24, r17
   15cbe:	90 e0       	ldi	r25, 0x00	; 0
   15cc0:	95 83       	std	Z+5, r25	; 0x05
   15cc2:	84 83       	std	Z+4, r24	; 0x04
   15cc4:	8f ec       	ldi	r24, 0xCF	; 207
   15cc6:	9d e1       	ldi	r25, 0x1D	; 29
   15cc8:	a0 e0       	ldi	r26, 0x00	; 0
   15cca:	81 83       	std	Z+1, r24	; 0x01
   15ccc:	92 83       	std	Z+2, r25	; 0x02
   15cce:	a3 83       	std	Z+3, r26	; 0x03
   15cd0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15cd4:	c0 e0       	ldi	r28, 0x00	; 0
   15cd6:	d0 e0       	ldi	r29, 0x00	; 0
   15cd8:	1c c0       	rjmp	.+56     	; 0x15d12 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15cda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cde:	80 ff       	sbrs	r24, 0
   15ce0:	f9 cf       	rjmp	.-14     	; 0x15cd4 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15ce2:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   15ce6:	90 e0       	ldi	r25, 0x00	; 0
   15ce8:	ed b7       	in	r30, 0x3d	; 61
   15cea:	fe b7       	in	r31, 0x3e	; 62
   15cec:	91 87       	std	Z+9, r25	; 0x09
   15cee:	80 87       	std	Z+8, r24	; 0x08
   15cf0:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   15cf4:	90 e0       	ldi	r25, 0x00	; 0
   15cf6:	97 83       	std	Z+7, r25	; 0x07
   15cf8:	86 83       	std	Z+6, r24	; 0x06
   15cfa:	81 2f       	mov	r24, r17
   15cfc:	90 e0       	ldi	r25, 0x00	; 0
   15cfe:	95 83       	std	Z+5, r25	; 0x05
   15d00:	84 83       	std	Z+4, r24	; 0x04
   15d02:	8b e9       	ldi	r24, 0x9B	; 155
   15d04:	9d e1       	ldi	r25, 0x1D	; 29
   15d06:	a0 e0       	ldi	r26, 0x00	; 0
   15d08:	81 83       	std	Z+1, r24	; 0x01
   15d0a:	92 83       	std	Z+2, r25	; 0x02
   15d0c:	a3 83       	std	Z+3, r26	; 0x03
   15d0e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15d12:	ce 01       	movw	r24, r28
   15d14:	cd b7       	in	r28, 0x3d	; 61
   15d16:	de b7       	in	r29, 0x3e	; 62
   15d18:	29 96       	adiw	r28, 0x09	; 9
   15d1a:	e3 e0       	ldi	r30, 0x03	; 3
   15d1c:	0c 94 ae e1 	jmp	0x1c35c	; 0x1c35c <__epilogue_restores__+0x1e>

00015d20 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15d20:	cf 92       	push	r12
   15d22:	df 92       	push	r13
   15d24:	ef 92       	push	r14
   15d26:	0f 93       	push	r16
   15d28:	1f 93       	push	r17
   15d2a:	cf 93       	push	r28
   15d2c:	df 93       	push	r29
   15d2e:	00 d0       	rcall	.+0      	; 0x15d30 <amigo_overflow_check+0x10>
   15d30:	00 d0       	rcall	.+0      	; 0x15d32 <amigo_overflow_check+0x12>
   15d32:	1f 92       	push	r1
   15d34:	ec 01       	movw	r28, r24
   15d36:	8b 01       	movw	r16, r22
   15d38:	80 e0       	ldi	r24, 0x00	; 0
   15d3a:	90 e0       	ldi	r25, 0x00	; 0
   15d3c:	23 e5       	ldi	r18, 0x53	; 83
   15d3e:	3d e2       	ldi	r19, 0x2D	; 45
   15d40:	69 01       	movw	r12, r18
   15d42:	e1 2c       	mov	r14, r1
   15d44:	2d 81       	ldd	r18, Y+5	; 0x05
   15d46:	30 e0       	ldi	r19, 0x00	; 0
   15d48:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   15d4c:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   15d50:	40 85       	ldd	r20, Z+8	; 0x08
   15d52:	51 85       	ldd	r21, Z+9	; 0x09
   15d54:	24 17       	cp	r18, r20
   15d56:	35 07       	cpc	r19, r21
   15d58:	64 f1       	brlt	.+88     	; 0x15db2 <amigo_overflow_check+0x92>
   15d5a:	1d 82       	std	Y+5, r1	; 0x05
   15d5c:	2c 81       	ldd	r18, Y+4	; 0x04
   15d5e:	2f 5f       	subi	r18, 0xFF	; 255
   15d60:	2c 83       	std	Y+4, r18	; 0x04
   15d62:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   15d66:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   15d6a:	2c 81       	ldd	r18, Y+4	; 0x04
   15d6c:	30 e0       	ldi	r19, 0x00	; 0
   15d6e:	42 85       	ldd	r20, Z+10	; 0x0a
   15d70:	53 85       	ldd	r21, Z+11	; 0x0b
   15d72:	24 17       	cp	r18, r20
   15d74:	35 07       	cpc	r19, r21
   15d76:	34 f3       	brlt	.-52     	; 0x15d44 <amigo_overflow_check+0x24>
   15d78:	1c 82       	std	Y+4, r1	; 0x04
   15d7a:	2b 81       	ldd	r18, Y+3	; 0x03
   15d7c:	2f 5f       	subi	r18, 0xFF	; 255
   15d7e:	2b 83       	std	Y+3, r18	; 0x03
   15d80:	30 e0       	ldi	r19, 0x00	; 0
   15d82:	44 85       	ldd	r20, Z+12	; 0x0c
   15d84:	55 85       	ldd	r21, Z+13	; 0x0d
   15d86:	24 17       	cp	r18, r20
   15d88:	35 07       	cpc	r19, r21
   15d8a:	5c f3       	brlt	.-42     	; 0x15d62 <amigo_overflow_check+0x42>
   15d8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d90:	80 ff       	sbrs	r24, 0
   15d92:	0c c0       	rjmp	.+24     	; 0x15dac <amigo_overflow_check+0x8c>
   15d94:	01 15       	cp	r16, r1
   15d96:	11 05       	cpc	r17, r1
   15d98:	49 f0       	breq	.+18     	; 0x15dac <amigo_overflow_check+0x8c>
   15d9a:	ed b7       	in	r30, 0x3d	; 61
   15d9c:	fe b7       	in	r31, 0x3e	; 62
   15d9e:	15 83       	std	Z+5, r17	; 0x05
   15da0:	04 83       	std	Z+4, r16	; 0x04
   15da2:	c1 82       	std	Z+1, r12	; 0x01
   15da4:	d2 82       	std	Z+2, r13	; 0x02
   15da6:	e3 82       	std	Z+3, r14	; 0x03
   15da8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15dac:	81 e0       	ldi	r24, 0x01	; 1
   15dae:	90 e0       	ldi	r25, 0x00	; 0
   15db0:	d8 cf       	rjmp	.-80     	; 0x15d62 <amigo_overflow_check+0x42>
   15db2:	0f 90       	pop	r0
   15db4:	0f 90       	pop	r0
   15db6:	0f 90       	pop	r0
   15db8:	0f 90       	pop	r0
   15dba:	0f 90       	pop	r0
   15dbc:	df 91       	pop	r29
   15dbe:	cf 91       	pop	r28
   15dc0:	1f 91       	pop	r17
   15dc2:	0f 91       	pop	r16
   15dc4:	ef 90       	pop	r14
   15dc6:	df 90       	pop	r13
   15dc8:	cf 90       	pop	r12
   15dca:	08 95       	ret

00015dcc <amigo_chs_to_logical>:
   15dcc:	a1 e1       	ldi	r26, 0x11	; 17
   15dce:	b0 e0       	ldi	r27, 0x00	; 0
   15dd0:	ec ee       	ldi	r30, 0xEC	; 236
   15dd2:	fe ea       	ldi	r31, 0xAE	; 174
   15dd4:	0c 94 87 e1 	jmp	0x1c30e	; 0x1c30e <__prologue_saves__+0x8>
   15dd8:	8b 01       	movw	r16, r22
   15dda:	60 91 55 19 	lds	r22, 0x1955	; 0x801955 <AMIGOp>
   15dde:	70 91 56 19 	lds	r23, 0x1956	; 0x801956 <AMIGOp+0x1>
   15de2:	fb 01       	movw	r30, r22
   15de4:	40 85       	ldd	r20, Z+8	; 0x08
   15de6:	51 85       	ldd	r21, Z+9	; 0x09
   15de8:	fc 01       	movw	r30, r24
   15dea:	c4 81       	ldd	r28, Z+4	; 0x04
   15dec:	d0 e0       	ldi	r29, 0x00	; 0
   15dee:	4c 9f       	mul	r20, r28
   15df0:	90 01       	movw	r18, r0
   15df2:	4d 9f       	mul	r20, r29
   15df4:	30 0d       	add	r19, r0
   15df6:	5c 9f       	mul	r21, r28
   15df8:	30 0d       	add	r19, r0
   15dfa:	11 24       	eor	r1, r1
   15dfc:	49 01       	movw	r8, r18
   15dfe:	33 0f       	add	r19, r19
   15e00:	aa 08       	sbc	r10, r10
   15e02:	bb 08       	sbc	r11, r11
   15e04:	63 80       	ldd	r6, Z+3	; 0x03
   15e06:	71 2c       	mov	r7, r1
   15e08:	fb 01       	movw	r30, r22
   15e0a:	e2 84       	ldd	r14, Z+10	; 0x0a
   15e0c:	f3 84       	ldd	r15, Z+11	; 0x0b
   15e0e:	4e 9d       	mul	r20, r14
   15e10:	d0 01       	movw	r26, r0
   15e12:	4f 9d       	mul	r20, r15
   15e14:	b0 0d       	add	r27, r0
   15e16:	5e 9d       	mul	r21, r14
   15e18:	b0 0d       	add	r27, r0
   15e1a:	11 24       	eor	r1, r1
   15e1c:	a6 9d       	mul	r26, r6
   15e1e:	90 01       	movw	r18, r0
   15e20:	a7 9d       	mul	r26, r7
   15e22:	30 0d       	add	r19, r0
   15e24:	b6 9d       	mul	r27, r6
   15e26:	30 0d       	add	r19, r0
   15e28:	11 24       	eor	r1, r1
   15e2a:	69 01       	movw	r12, r18
   15e2c:	33 0f       	add	r19, r19
   15e2e:	ee 08       	sbc	r14, r14
   15e30:	ff 08       	sbc	r15, r15
   15e32:	8c 0c       	add	r8, r12
   15e34:	9d 1c       	adc	r9, r13
   15e36:	ae 1c       	adc	r10, r14
   15e38:	bf 1c       	adc	r11, r15
   15e3a:	fc 01       	movw	r30, r24
   15e3c:	f5 80       	ldd	r15, Z+5	; 0x05
   15e3e:	a5 01       	movw	r20, r10
   15e40:	94 01       	movw	r18, r8
   15e42:	2f 0d       	add	r18, r15
   15e44:	31 1d       	adc	r19, r1
   15e46:	41 1d       	adc	r20, r1
   15e48:	51 1d       	adc	r21, r1
   15e4a:	fb 01       	movw	r30, r22
   15e4c:	a6 81       	ldd	r26, Z+6	; 0x06
   15e4e:	b7 81       	ldd	r27, Z+7	; 0x07
   15e50:	0e 94 6d e1 	call	0x1c2da	; 0x1c2da <__mulshisi3>
   15e54:	4b 01       	movw	r8, r22
   15e56:	5c 01       	movw	r10, r24
   15e58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e5c:	85 ff       	sbrs	r24, 5
   15e5e:	22 c0       	rjmp	.+68     	; 0x15ea4 <amigo_chs_to_logical+0xd8>
   15e60:	8f 2d       	mov	r24, r15
   15e62:	90 e0       	ldi	r25, 0x00	; 0
   15e64:	ed b7       	in	r30, 0x3d	; 61
   15e66:	fe b7       	in	r31, 0x3e	; 62
   15e68:	91 8b       	std	Z+17, r25	; 0x11
   15e6a:	80 8b       	std	Z+16, r24	; 0x10
   15e6c:	d7 87       	std	Z+15, r29	; 0x0f
   15e6e:	c6 87       	std	Z+14, r28	; 0x0e
   15e70:	75 86       	std	Z+13, r7	; 0x0d
   15e72:	64 86       	std	Z+12, r6	; 0x0c
   15e74:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   15e78:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   15e7c:	81 81       	ldd	r24, Z+1	; 0x01
   15e7e:	90 e0       	ldi	r25, 0x00	; 0
   15e80:	ed b7       	in	r30, 0x3d	; 61
   15e82:	fe b7       	in	r31, 0x3e	; 62
   15e84:	93 87       	std	Z+11, r25	; 0x0b
   15e86:	82 87       	std	Z+10, r24	; 0x0a
   15e88:	86 82       	std	Z+6, r8	; 0x06
   15e8a:	97 82       	std	Z+7, r9	; 0x07
   15e8c:	a0 86       	std	Z+8, r10	; 0x08
   15e8e:	b1 86       	std	Z+9, r11	; 0x09
   15e90:	15 83       	std	Z+5, r17	; 0x05
   15e92:	04 83       	std	Z+4, r16	; 0x04
   15e94:	80 e0       	ldi	r24, 0x00	; 0
   15e96:	9d e2       	ldi	r25, 0x2D	; 45
   15e98:	a0 e0       	ldi	r26, 0x00	; 0
   15e9a:	81 83       	std	Z+1, r24	; 0x01
   15e9c:	92 83       	std	Z+2, r25	; 0x02
   15e9e:	a3 83       	std	Z+3, r26	; 0x03
   15ea0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15ea4:	c5 01       	movw	r24, r10
   15ea6:	b4 01       	movw	r22, r8
   15ea8:	cd b7       	in	r28, 0x3d	; 61
   15eaa:	de b7       	in	r29, 0x3e	; 62
   15eac:	61 96       	adiw	r28, 0x11	; 17
   15eae:	ee e0       	ldi	r30, 0x0E	; 14
   15eb0:	0c 94 a3 e1 	jmp	0x1c346	; 0x1c346 <__epilogue_restores__+0x8>

00015eb4 <amigo_init>:
   15eb4:	ef 92       	push	r14
   15eb6:	ff 92       	push	r15
   15eb8:	0f 93       	push	r16
   15eba:	1f 93       	push	r17
   15ebc:	cf 93       	push	r28
   15ebe:	df 93       	push	r29
   15ec0:	0d eb       	ldi	r16, 0xBD	; 189
   15ec2:	10 e2       	ldi	r17, 0x20	; 32
   15ec4:	cb e0       	ldi	r28, 0x0B	; 11
   15ec6:	d0 e0       	ldi	r29, 0x00	; 0
   15ec8:	84 e0       	ldi	r24, 0x04	; 4
   15eca:	f8 2e       	mov	r15, r24
   15ecc:	92 e0       	ldi	r25, 0x02	; 2
   15ece:	e9 2e       	mov	r14, r25
   15ed0:	d8 01       	movw	r26, r16
   15ed2:	8c 91       	ld	r24, X
   15ed4:	81 30       	cpi	r24, 0x01	; 1
   15ed6:	31 f5       	brne	.+76     	; 0x15f24 <amigo_init+0x70>
   15ed8:	ce 01       	movw	r24, r28
   15eda:	0e 94 18 96 	call	0x12c30	; 0x12c30 <set_active_device>
   15ede:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   15ee2:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   15ee6:	10 82       	st	Z, r1
   15ee8:	9f 01       	movw	r18, r30
   15eea:	27 5f       	subi	r18, 0xF7	; 247
   15eec:	3f 4f       	sbci	r19, 0xFF	; 255
   15eee:	d9 01       	movw	r26, r18
   15ef0:	8f 2d       	mov	r24, r15
   15ef2:	1d 92       	st	X+, r1
   15ef4:	8a 95       	dec	r24
   15ef6:	e9 f7       	brne	.-6      	; 0x15ef2 <amigo_init+0x3e>
   15ef8:	2c 5f       	subi	r18, 0xFC	; 252
   15efa:	3f 4f       	sbci	r19, 0xFF	; 255
   15efc:	d9 01       	movw	r26, r18
   15efe:	8f 2d       	mov	r24, r15
   15f00:	1d 92       	st	X+, r1
   15f02:	8a 95       	dec	r24
   15f04:	e9 f7       	brne	.-6      	; 0x15f00 <amigo_init+0x4c>
   15f06:	11 82       	std	Z+1, r1	; 0x01
   15f08:	15 82       	std	Z+5, r1	; 0x05
   15f0a:	14 82       	std	Z+4, r1	; 0x04
   15f0c:	13 82       	std	Z+3, r1	; 0x03
   15f0e:	e6 82       	std	Z+6, r14	; 0x06
   15f10:	10 86       	std	Z+8, r1	; 0x08
   15f12:	17 82       	std	Z+7, r1	; 0x07
   15f14:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   15f18:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   15f1c:	81 81       	ldd	r24, Z+1	; 0x01
   15f1e:	90 e0       	ldi	r25, 0x00	; 0
   15f20:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
   15f24:	21 97       	sbiw	r28, 0x01	; 1
   15f26:	0b 52       	subi	r16, 0x2B	; 43
   15f28:	11 09       	sbc	r17, r1
   15f2a:	cf 3f       	cpi	r28, 0xFF	; 255
   15f2c:	af ef       	ldi	r26, 0xFF	; 255
   15f2e:	da 07       	cpc	r29, r26
   15f30:	79 f6       	brne	.-98     	; 0x15ed0 <amigo_init+0x1c>
   15f32:	cd b7       	in	r28, 0x3d	; 61
   15f34:	de b7       	in	r29, 0x3e	; 62
   15f36:	e6 e0       	ldi	r30, 0x06	; 6
   15f38:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00015f3c <amigo_request_logical_address>:
   15f3c:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   15f40:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   15f44:	15 86       	std	Z+13, r1	; 0x0d
   15f46:	83 81       	ldd	r24, Z+3	; 0x03
   15f48:	86 87       	std	Z+14, r24	; 0x0e
   15f4a:	84 81       	ldd	r24, Z+4	; 0x04
   15f4c:	87 87       	std	Z+15, r24	; 0x0f
   15f4e:	85 81       	ldd	r24, Z+5	; 0x05
   15f50:	80 8b       	std	Z+16, r24	; 0x10
   15f52:	80 e0       	ldi	r24, 0x00	; 0
   15f54:	90 e0       	ldi	r25, 0x00	; 0
   15f56:	08 95       	ret

00015f58 <amigo_request_status>:
   15f58:	00 d0       	rcall	.+0      	; 0x15f5a <amigo_request_status+0x2>
   15f5a:	1f 92       	push	r1
   15f5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f60:	85 ff       	sbrs	r24, 5
   15f62:	0a c0       	rjmp	.+20     	; 0x15f78 <amigo_request_status+0x20>
   15f64:	83 ed       	ldi	r24, 0xD3	; 211
   15f66:	9d e2       	ldi	r25, 0x2D	; 45
   15f68:	a0 e0       	ldi	r26, 0x00	; 0
   15f6a:	ed b7       	in	r30, 0x3d	; 61
   15f6c:	fe b7       	in	r31, 0x3e	; 62
   15f6e:	81 83       	std	Z+1, r24	; 0x01
   15f70:	92 83       	std	Z+2, r25	; 0x02
   15f72:	a3 83       	std	Z+3, r26	; 0x03
   15f74:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   15f78:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   15f7c:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   15f80:	11 86       	std	Z+9, r1	; 0x09
   15f82:	81 81       	ldd	r24, Z+1	; 0x01
   15f84:	82 87       	std	Z+10, r24	; 0x0a
   15f86:	8d e0       	ldi	r24, 0x0D	; 13
   15f88:	83 87       	std	Z+11, r24	; 0x0b
   15f8a:	14 86       	std	Z+12, r1	; 0x0c
   15f8c:	0e 94 9f 6e 	call	0xdd3e	; 0xdd3e <mmc_wp_status>
   15f90:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   15f94:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   15f98:	89 2b       	or	r24, r25
   15f9a:	19 f0       	breq	.+6      	; 0x15fa2 <amigo_request_status+0x4a>
   15f9c:	84 85       	ldd	r24, Z+12	; 0x0c
   15f9e:	80 66       	ori	r24, 0x60	; 96
   15fa0:	84 87       	std	Z+12, r24	; 0x0c
   15fa2:	86 81       	ldd	r24, Z+6	; 0x06
   15fa4:	82 30       	cpi	r24, 0x02	; 2
   15fa6:	31 f4       	brne	.+12     	; 0x15fb4 <amigo_request_status+0x5c>
   15fa8:	83 e1       	ldi	r24, 0x13	; 19
   15faa:	81 87       	std	Z+9, r24	; 0x09
   15fac:	84 85       	ldd	r24, Z+12	; 0x0c
   15fae:	88 60       	ori	r24, 0x08	; 8
   15fb0:	84 87       	std	Z+12, r24	; 0x0c
   15fb2:	21 c0       	rjmp	.+66     	; 0x15ff6 <amigo_request_status+0x9e>
   15fb4:	27 81       	ldd	r18, Z+7	; 0x07
   15fb6:	30 85       	ldd	r19, Z+8	; 0x08
   15fb8:	21 15       	cp	r18, r1
   15fba:	31 05       	cpc	r19, r1
   15fbc:	11 f4       	brne	.+4      	; 0x15fc2 <amigo_request_status+0x6a>
   15fbe:	81 30       	cpi	r24, 0x01	; 1
   15fc0:	d1 f4       	brne	.+52     	; 0x15ff6 <amigo_request_status+0x9e>
   15fc2:	26 fd       	sbrc	r18, 6
   15fc4:	0c c0       	rjmp	.+24     	; 0x15fde <amigo_request_status+0x86>
   15fc6:	25 ff       	sbrs	r18, 5
   15fc8:	03 c0       	rjmp	.+6      	; 0x15fd0 <amigo_request_status+0x78>
   15fca:	8a e0       	ldi	r24, 0x0A	; 10
   15fcc:	81 87       	std	Z+9, r24	; 0x09
   15fce:	0d c0       	rjmp	.+26     	; 0x15fea <amigo_request_status+0x92>
   15fd0:	84 85       	ldd	r24, Z+12	; 0x0c
   15fd2:	24 ff       	sbrs	r18, 4
   15fd4:	02 c0       	rjmp	.+4      	; 0x15fda <amigo_request_status+0x82>
   15fd6:	83 60       	ori	r24, 0x03	; 3
   15fd8:	07 c0       	rjmp	.+14     	; 0x15fe8 <amigo_request_status+0x90>
   15fda:	21 ff       	sbrs	r18, 1
   15fdc:	02 c0       	rjmp	.+4      	; 0x15fe2 <amigo_request_status+0x8a>
   15fde:	83 e1       	ldi	r24, 0x13	; 19
   15fe0:	f5 cf       	rjmp	.-22     	; 0x15fcc <amigo_request_status+0x74>
   15fe2:	22 ff       	sbrs	r18, 2
   15fe4:	02 c0       	rjmp	.+4      	; 0x15fea <amigo_request_status+0x92>
   15fe6:	84 60       	ori	r24, 0x04	; 4
   15fe8:	84 87       	std	Z+12, r24	; 0x0c
   15fea:	84 85       	ldd	r24, Z+12	; 0x0c
   15fec:	80 61       	ori	r24, 0x10	; 16
   15fee:	84 87       	std	Z+12, r24	; 0x0c
   15ff0:	83 85       	ldd	r24, Z+11	; 0x0b
   15ff2:	80 68       	ori	r24, 0x80	; 128
   15ff4:	83 87       	std	Z+11, r24	; 0x0b
   15ff6:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   15ffa:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   15ffe:	81 81       	ldd	r24, Z+1	; 0x01
   16000:	90 e0       	ldi	r25, 0x00	; 0
   16002:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   16006:	80 e0       	ldi	r24, 0x00	; 0
   16008:	90 e0       	ldi	r25, 0x00	; 0
   1600a:	0f 90       	pop	r0
   1600c:	0f 90       	pop	r0
   1600e:	0f 90       	pop	r0
   16010:	08 95       	ret

00016012 <amigo_send_logical_address>:
   16012:	a5 e0       	ldi	r26, 0x05	; 5
   16014:	b0 e0       	ldi	r27, 0x00	; 0
   16016:	ef e0       	ldi	r30, 0x0F	; 15
   16018:	f0 eb       	ldi	r31, 0xB0	; 176
   1601a:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   1601e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16022:	85 ff       	sbrs	r24, 5
   16024:	0a c0       	rjmp	.+20     	; 0x1603a <amigo_send_logical_address+0x28>
   16026:	85 eb       	ldi	r24, 0xB5	; 181
   16028:	9d e2       	ldi	r25, 0x2D	; 45
   1602a:	a0 e0       	ldi	r26, 0x00	; 0
   1602c:	ed b7       	in	r30, 0x3d	; 61
   1602e:	fe b7       	in	r31, 0x3e	; 62
   16030:	81 83       	std	Z+1, r24	; 0x01
   16032:	92 83       	std	Z+2, r25	; 0x02
   16034:	a3 83       	std	Z+3, r26	; 0x03
   16036:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1603a:	80 e0       	ldi	r24, 0x00	; 0
   1603c:	91 e0       	ldi	r25, 0x01	; 1
   1603e:	9d 83       	std	Y+5, r25	; 0x05
   16040:	8c 83       	std	Y+4, r24	; 0x04
   16042:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   16046:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   1604a:	ae 01       	movw	r20, r28
   1604c:	4c 5f       	subi	r20, 0xFC	; 252
   1604e:	5f 4f       	sbci	r21, 0xFF	; 255
   16050:	64 e0       	ldi	r22, 0x04	; 4
   16052:	70 e0       	ldi	r23, 0x00	; 0
   16054:	0d 96       	adiw	r24, 0x0d	; 13
   16056:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   1605a:	2c 81       	ldd	r18, Y+4	; 0x04
   1605c:	3d 81       	ldd	r19, Y+5	; 0x05
   1605e:	22 27       	eor	r18, r18
   16060:	30 7d       	andi	r19, 0xD0	; 208
   16062:	23 2b       	or	r18, r19
   16064:	11 f4       	brne	.+4      	; 0x1606a <amigo_send_logical_address+0x58>
   16066:	04 97       	sbiw	r24, 0x04	; 4
   16068:	c9 f0       	breq	.+50     	; 0x1609c <amigo_send_logical_address+0x8a>
   1606a:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   1606e:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16072:	87 81       	ldd	r24, Z+7	; 0x07
   16074:	90 85       	ldd	r25, Z+8	; 0x08
   16076:	80 62       	ori	r24, 0x20	; 32
   16078:	90 87       	std	Z+8, r25	; 0x08
   1607a:	87 83       	std	Z+7, r24	; 0x07
   1607c:	81 e0       	ldi	r24, 0x01	; 1
   1607e:	86 83       	std	Z+6, r24	; 0x06
   16080:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16084:	80 ff       	sbrs	r24, 0
   16086:	0a c0       	rjmp	.+20     	; 0x1609c <amigo_send_logical_address+0x8a>
   16088:	8b e9       	ldi	r24, 0x9B	; 155
   1608a:	9d e2       	ldi	r25, 0x2D	; 45
   1608c:	a0 e0       	ldi	r26, 0x00	; 0
   1608e:	ed b7       	in	r30, 0x3d	; 61
   16090:	fe b7       	in	r31, 0x3e	; 62
   16092:	81 83       	std	Z+1, r24	; 0x01
   16094:	92 83       	std	Z+2, r25	; 0x02
   16096:	a3 83       	std	Z+3, r26	; 0x03
   16098:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1609c:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   160a0:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   160a4:	81 81       	ldd	r24, Z+1	; 0x01
   160a6:	90 e0       	ldi	r25, 0x00	; 0
   160a8:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   160ac:	8c 81       	ldd	r24, Y+4	; 0x04
   160ae:	9d 81       	ldd	r25, Y+5	; 0x05
   160b0:	88 27       	eor	r24, r24
   160b2:	90 7d       	andi	r25, 0xD0	; 208
   160b4:	25 96       	adiw	r28, 0x05	; 5
   160b6:	e2 e0       	ldi	r30, 0x02	; 2
   160b8:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000160bc <amigo_send_status>:
   160bc:	a5 e0       	ldi	r26, 0x05	; 5
   160be:	b0 e0       	ldi	r27, 0x00	; 0
   160c0:	e4 e6       	ldi	r30, 0x64	; 100
   160c2:	f0 eb       	ldi	r31, 0xB0	; 176
   160c4:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   160c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160cc:	85 ff       	sbrs	r24, 5
   160ce:	0a c0       	rjmp	.+20     	; 0x160e4 <amigo_send_status+0x28>
   160d0:	86 e8       	ldi	r24, 0x86	; 134
   160d2:	9d e2       	ldi	r25, 0x2D	; 45
   160d4:	a0 e0       	ldi	r26, 0x00	; 0
   160d6:	ed b7       	in	r30, 0x3d	; 61
   160d8:	fe b7       	in	r31, 0x3e	; 62
   160da:	81 83       	std	Z+1, r24	; 0x01
   160dc:	92 83       	std	Z+2, r25	; 0x02
   160de:	a3 83       	std	Z+3, r26	; 0x03
   160e0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   160e4:	80 e0       	ldi	r24, 0x00	; 0
   160e6:	91 e0       	ldi	r25, 0x01	; 1
   160e8:	9d 83       	std	Y+5, r25	; 0x05
   160ea:	8c 83       	std	Y+4, r24	; 0x04
   160ec:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   160f0:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   160f4:	ae 01       	movw	r20, r28
   160f6:	4c 5f       	subi	r20, 0xFC	; 252
   160f8:	5f 4f       	sbci	r21, 0xFF	; 255
   160fa:	64 e0       	ldi	r22, 0x04	; 4
   160fc:	70 e0       	ldi	r23, 0x00	; 0
   160fe:	09 96       	adiw	r24, 0x09	; 9
   16100:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   16104:	2c 81       	ldd	r18, Y+4	; 0x04
   16106:	3d 81       	ldd	r19, Y+5	; 0x05
   16108:	22 27       	eor	r18, r18
   1610a:	30 7d       	andi	r19, 0xD0	; 208
   1610c:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16110:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16114:	23 2b       	or	r18, r19
   16116:	11 f4       	brne	.+4      	; 0x1611c <amigo_send_status+0x60>
   16118:	04 97       	sbiw	r24, 0x04	; 4
   1611a:	b1 f0       	breq	.+44     	; 0x16148 <amigo_send_status+0x8c>
   1611c:	87 81       	ldd	r24, Z+7	; 0x07
   1611e:	90 85       	ldd	r25, Z+8	; 0x08
   16120:	80 62       	ori	r24, 0x20	; 32
   16122:	90 87       	std	Z+8, r25	; 0x08
   16124:	87 83       	std	Z+7, r24	; 0x07
   16126:	81 e0       	ldi	r24, 0x01	; 1
   16128:	86 83       	std	Z+6, r24	; 0x06
   1612a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1612e:	80 ff       	sbrs	r24, 0
   16130:	0e c0       	rjmp	.+28     	; 0x1614e <amigo_send_status+0x92>
   16132:	8c e6       	ldi	r24, 0x6C	; 108
   16134:	9d e2       	ldi	r25, 0x2D	; 45
   16136:	a0 e0       	ldi	r26, 0x00	; 0
   16138:	ed b7       	in	r30, 0x3d	; 61
   1613a:	fe b7       	in	r31, 0x3e	; 62
   1613c:	81 83       	std	Z+1, r24	; 0x01
   1613e:	92 83       	std	Z+2, r25	; 0x02
   16140:	a3 83       	std	Z+3, r26	; 0x03
   16142:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   16146:	03 c0       	rjmp	.+6      	; 0x1614e <amigo_send_status+0x92>
   16148:	10 86       	std	Z+8, r1	; 0x08
   1614a:	17 82       	std	Z+7, r1	; 0x07
   1614c:	16 82       	std	Z+6, r1	; 0x06
   1614e:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16152:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16156:	81 81       	ldd	r24, Z+1	; 0x01
   16158:	90 e0       	ldi	r25, 0x00	; 0
   1615a:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   1615e:	8c 81       	ldd	r24, Y+4	; 0x04
   16160:	9d 81       	ldd	r25, Y+5	; 0x05
   16162:	88 27       	eor	r24, r24
   16164:	90 7d       	andi	r25, 0xD0	; 208
   16166:	25 96       	adiw	r28, 0x05	; 5
   16168:	e2 e0       	ldi	r30, 0x02	; 2
   1616a:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0001616e <amigo_increment>:
   1616e:	a1 e1       	ldi	r26, 0x11	; 17
   16170:	b0 e0       	ldi	r27, 0x00	; 0
   16172:	ed eb       	ldi	r30, 0xBD	; 189
   16174:	f0 eb       	ldi	r31, 0xB0	; 176
   16176:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   1617a:	bc 01       	movw	r22, r24
   1617c:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16180:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16184:	91 e1       	ldi	r25, 0x11	; 17
   16186:	de 01       	movw	r26, r28
   16188:	11 96       	adiw	r26, 0x01	; 1
   1618a:	01 90       	ld	r0, Z+
   1618c:	0d 92       	st	X+, r0
   1618e:	9a 95       	dec	r25
   16190:	e1 f7       	brne	.-8      	; 0x1618a <amigo_increment+0x1c>
   16192:	9e 81       	ldd	r25, Y+6	; 0x06
   16194:	9f 5f       	subi	r25, 0xFF	; 255
   16196:	9e 83       	std	Y+6, r25	; 0x06
   16198:	ce 01       	movw	r24, r28
   1619a:	01 96       	adiw	r24, 0x01	; 1
   1619c:	c1 dd       	rcall	.-1150   	; 0x15d20 <amigo_overflow_check>
   1619e:	00 97       	sbiw	r24, 0x00	; 0
   161a0:	59 f4       	brne	.+22     	; 0x161b8 <amigo_increment+0x4a>
   161a2:	a0 91 53 19 	lds	r26, 0x1953	; 0x801953 <AMIGOs>
   161a6:	b0 91 54 19 	lds	r27, 0x1954	; 0x801954 <AMIGOs+0x1>
   161aa:	21 e1       	ldi	r18, 0x11	; 17
   161ac:	fe 01       	movw	r30, r28
   161ae:	31 96       	adiw	r30, 0x01	; 1
   161b0:	01 90       	ld	r0, Z+
   161b2:	0d 92       	st	X+, r0
   161b4:	2a 95       	dec	r18
   161b6:	e1 f7       	brne	.-8      	; 0x161b0 <amigo_increment+0x42>
   161b8:	61 96       	adiw	r28, 0x11	; 17
   161ba:	e2 e0       	ldi	r30, 0x02	; 2
   161bc:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000161c0 <amigo_seek>:
   161c0:	0f 93       	push	r16
   161c2:	1f 93       	push	r17
   161c4:	cf 93       	push	r28
   161c6:	df 93       	push	r29
   161c8:	ec 01       	movw	r28, r24
   161ca:	6c e8       	ldi	r22, 0x8C	; 140
   161cc:	75 e1       	ldi	r23, 0x15	; 21
   161ce:	a8 dd       	rcall	.-1200   	; 0x15d20 <amigo_overflow_check>
   161d0:	8c 01       	movw	r16, r24
   161d2:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   161d6:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   161da:	89 2b       	or	r24, r25
   161dc:	41 f0       	breq	.+16     	; 0x161ee <amigo_seek+0x2e>
   161de:	81 e0       	ldi	r24, 0x01	; 1
   161e0:	86 83       	std	Z+6, r24	; 0x06
   161e2:	87 81       	ldd	r24, Z+7	; 0x07
   161e4:	90 85       	ldd	r25, Z+8	; 0x08
   161e6:	84 60       	ori	r24, 0x04	; 4
   161e8:	90 87       	std	Z+8, r25	; 0x08
   161ea:	87 83       	std	Z+7, r24	; 0x07
   161ec:	06 c0       	rjmp	.+12     	; 0x161fa <amigo_seek+0x3a>
   161ee:	8d 81       	ldd	r24, Y+5	; 0x05
   161f0:	85 83       	std	Z+5, r24	; 0x05
   161f2:	8c 81       	ldd	r24, Y+4	; 0x04
   161f4:	84 83       	std	Z+4, r24	; 0x04
   161f6:	8b 81       	ldd	r24, Y+3	; 0x03
   161f8:	83 83       	std	Z+3, r24	; 0x03
   161fa:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   161fe:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16202:	81 81       	ldd	r24, Z+1	; 0x01
   16204:	90 e0       	ldi	r25, 0x00	; 0
   16206:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   1620a:	c8 01       	movw	r24, r16
   1620c:	df 91       	pop	r29
   1620e:	cf 91       	pop	r28
   16210:	1f 91       	pop	r17
   16212:	0f 91       	pop	r16
   16214:	08 95       	ret

00016216 <amigo_verify>:
   16216:	8f 92       	push	r8
   16218:	9f 92       	push	r9
   1621a:	af 92       	push	r10
   1621c:	bf 92       	push	r11
   1621e:	ef 92       	push	r14
   16220:	ff 92       	push	r15
   16222:	0f 93       	push	r16
   16224:	1f 93       	push	r17
   16226:	cf 93       	push	r28
   16228:	df 93       	push	r29
   1622a:	ad b7       	in	r26, 0x3d	; 61
   1622c:	be b7       	in	r27, 0x3e	; 62
   1622e:	19 97       	sbiw	r26, 0x09	; 9
   16230:	0f b6       	in	r0, 0x3f	; 63
   16232:	f8 94       	cli
   16234:	be bf       	out	0x3e, r27	; 62
   16236:	0f be       	out	0x3f, r0	; 63
   16238:	ad bf       	out	0x3d, r26	; 61
   1623a:	7c 01       	movw	r14, r24
   1623c:	61 e9       	ldi	r22, 0x91	; 145
   1623e:	75 e1       	ldi	r23, 0x15	; 21
   16240:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   16244:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   16248:	c1 dd       	rcall	.-1150   	; 0x15dcc <amigo_chs_to_logical>
   1624a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1624e:	25 ff       	sbrs	r18, 5
   16250:	10 c0       	rjmp	.+32     	; 0x16272 <amigo_verify+0x5c>
   16252:	ed b7       	in	r30, 0x3d	; 61
   16254:	fe b7       	in	r31, 0x3e	; 62
   16256:	e0 86       	std	Z+8, r14	; 0x08
   16258:	f1 86       	std	Z+9, r15	; 0x09
   1625a:	64 83       	std	Z+4, r22	; 0x04
   1625c:	75 83       	std	Z+5, r23	; 0x05
   1625e:	86 83       	std	Z+6, r24	; 0x06
   16260:	97 83       	std	Z+7, r25	; 0x07
   16262:	8b e2       	ldi	r24, 0x2B	; 43
   16264:	9d e2       	ldi	r25, 0x2D	; 45
   16266:	a0 e0       	ldi	r26, 0x00	; 0
   16268:	81 83       	std	Z+1, r24	; 0x01
   1626a:	92 83       	std	Z+2, r25	; 0x02
   1626c:	a3 83       	std	Z+3, r26	; 0x03
   1626e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   16272:	e7 01       	movw	r28, r14
   16274:	20 97       	sbiw	r28, 0x00	; 0
   16276:	09 f4       	brne	.+2      	; 0x1627a <amigo_verify+0x64>
   16278:	4b c0       	rjmp	.+150    	; 0x16310 <amigo_verify+0xfa>
   1627a:	6e e9       	ldi	r22, 0x9E	; 158
   1627c:	75 e1       	ldi	r23, 0x15	; 21
   1627e:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   16282:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   16286:	a2 dd       	rcall	.-1212   	; 0x15dcc <amigo_chs_to_logical>
   16288:	4b 01       	movw	r8, r22
   1628a:	5c 01       	movw	r10, r24
   1628c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16290:	86 fd       	sbrc	r24, 6
   16292:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   16296:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   1629a:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   1629e:	e0 90 53 19 	lds	r14, 0x1953	; 0x801953 <AMIGOs>
   162a2:	f0 90 54 19 	lds	r15, 0x1954	; 0x801954 <AMIGOs+0x1>
   162a6:	87 e0       	ldi	r24, 0x07	; 7
   162a8:	e8 0e       	add	r14, r24
   162aa:	f1 1c       	adc	r15, r1
   162ac:	06 81       	ldd	r16, Z+6	; 0x06
   162ae:	17 81       	ldd	r17, Z+7	; 0x07
   162b0:	2a ed       	ldi	r18, 0xDA	; 218
   162b2:	3c e1       	ldi	r19, 0x1C	; 28
   162b4:	b5 01       	movw	r22, r10
   162b6:	a4 01       	movw	r20, r8
   162b8:	82 81       	ldd	r24, Z+2	; 0x02
   162ba:	93 81       	ldd	r25, Z+3	; 0x03
   162bc:	0e 94 3f 83 	call	0x1067e	; 0x1067e <dbf_open_read>
   162c0:	7c 01       	movw	r14, r24
   162c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162c6:	86 ff       	sbrs	r24, 6
   162c8:	04 c0       	rjmp	.+8      	; 0x162d2 <amigo_verify+0xbc>
   162ca:	85 ea       	ldi	r24, 0xA5	; 165
   162cc:	90 e1       	ldi	r25, 0x10	; 16
   162ce:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   162d2:	20 91 53 19 	lds	r18, 0x1953	; 0x801953 <AMIGOs>
   162d6:	30 91 54 19 	lds	r19, 0x1954	; 0x801954 <AMIGOs+0x1>
   162da:	f9 01       	movw	r30, r18
   162dc:	87 81       	ldd	r24, Z+7	; 0x07
   162de:	90 85       	ldd	r25, Z+8	; 0x08
   162e0:	89 2b       	or	r24, r25
   162e2:	21 f0       	breq	.+8      	; 0x162ec <amigo_verify+0xd6>
   162e4:	81 e0       	ldi	r24, 0x01	; 1
   162e6:	f9 01       	movw	r30, r18
   162e8:	86 83       	std	Z+6, r24	; 0x06
   162ea:	15 c0       	rjmp	.+42     	; 0x16316 <amigo_verify+0x100>
   162ec:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <AMIGOp>
   162f0:	90 91 56 19 	lds	r25, 0x1956	; 0x801956 <AMIGOp+0x1>
   162f4:	fc 01       	movw	r30, r24
   162f6:	86 81       	ldd	r24, Z+6	; 0x06
   162f8:	97 81       	ldd	r25, Z+7	; 0x07
   162fa:	e8 16       	cp	r14, r24
   162fc:	f9 06       	cpc	r15, r25
   162fe:	91 f7       	brne	.-28     	; 0x162e4 <amigo_verify+0xce>
   16300:	86 ea       	ldi	r24, 0xA6	; 166
   16302:	95 e1       	ldi	r25, 0x15	; 21
   16304:	34 df       	rcall	.-408    	; 0x1616e <amigo_increment>
   16306:	21 97       	sbiw	r28, 0x01	; 1
   16308:	89 2b       	or	r24, r25
   1630a:	09 f4       	brne	.+2      	; 0x1630e <amigo_verify+0xf8>
   1630c:	b3 cf       	rjmp	.-154    	; 0x16274 <amigo_verify+0x5e>
   1630e:	03 c0       	rjmp	.+6      	; 0x16316 <amigo_verify+0x100>
   16310:	c0 e0       	ldi	r28, 0x00	; 0
   16312:	d0 e0       	ldi	r29, 0x00	; 0
   16314:	02 c0       	rjmp	.+4      	; 0x1631a <amigo_verify+0x104>
   16316:	c1 e0       	ldi	r28, 0x01	; 1
   16318:	d0 e0       	ldi	r29, 0x00	; 0
   1631a:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   1631e:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16322:	81 81       	ldd	r24, Z+1	; 0x01
   16324:	90 e0       	ldi	r25, 0x00	; 0
   16326:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   1632a:	ce 01       	movw	r24, r28
   1632c:	ad b7       	in	r26, 0x3d	; 61
   1632e:	be b7       	in	r27, 0x3e	; 62
   16330:	19 96       	adiw	r26, 0x09	; 9
   16332:	0f b6       	in	r0, 0x3f	; 63
   16334:	f8 94       	cli
   16336:	be bf       	out	0x3e, r27	; 62
   16338:	0f be       	out	0x3f, r0	; 63
   1633a:	ad bf       	out	0x3d, r26	; 61
   1633c:	df 91       	pop	r29
   1633e:	cf 91       	pop	r28
   16340:	1f 91       	pop	r17
   16342:	0f 91       	pop	r16
   16344:	ff 90       	pop	r15
   16346:	ef 90       	pop	r14
   16348:	bf 90       	pop	r11
   1634a:	af 90       	pop	r10
   1634c:	9f 90       	pop	r9
   1634e:	8f 90       	pop	r8
   16350:	08 95       	ret

00016352 <amigo_format>:
   16352:	ef 92       	push	r14
   16354:	ff 92       	push	r15
   16356:	0f 93       	push	r16
   16358:	1f 93       	push	r17
   1635a:	cf 93       	push	r28
   1635c:	df 93       	push	r29
   1635e:	00 d0       	rcall	.+0      	; 0x16360 <amigo_format+0xe>
   16360:	1f 92       	push	r1
   16362:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16366:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   1636a:	15 82       	std	Z+5, r1	; 0x05
   1636c:	14 82       	std	Z+4, r1	; 0x04
   1636e:	13 82       	std	Z+3, r1	; 0x03
   16370:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16374:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16378:	46 81       	ldd	r20, Z+6	; 0x06
   1637a:	57 81       	ldd	r21, Z+7	; 0x07
   1637c:	68 2f       	mov	r22, r24
   1637e:	70 e0       	ldi	r23, 0x00	; 0
   16380:	8a ed       	ldi	r24, 0xDA	; 218
   16382:	9c e1       	ldi	r25, 0x1C	; 28
   16384:	0e 94 7b e5 	call	0x1caf6	; 0x1caf6 <memset>
   16388:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1638c:	85 ff       	sbrs	r24, 5
   1638e:	0a c0       	rjmp	.+20     	; 0x163a4 <amigo_format+0x52>
   16390:	80 ef       	ldi	r24, 0xF0	; 240
   16392:	9c e2       	ldi	r25, 0x2C	; 44
   16394:	a0 e0       	ldi	r26, 0x00	; 0
   16396:	ed b7       	in	r30, 0x3d	; 61
   16398:	fe b7       	in	r31, 0x3e	; 62
   1639a:	81 83       	std	Z+1, r24	; 0x01
   1639c:	92 83       	std	Z+2, r25	; 0x02
   1639e:	a3 83       	std	Z+3, r26	; 0x03
   163a0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   163a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163a8:	86 fd       	sbrc	r24, 6
   163aa:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   163ae:	6d ea       	ldi	r22, 0xAD	; 173
   163b0:	75 e1       	ldi	r23, 0x15	; 21
   163b2:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   163b6:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   163ba:	08 dd       	rcall	.-1520   	; 0x15dcc <amigo_chs_to_logical>
   163bc:	ab 01       	movw	r20, r22
   163be:	bc 01       	movw	r22, r24
   163c0:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   163c4:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   163c8:	e0 90 53 19 	lds	r14, 0x1953	; 0x801953 <AMIGOs>
   163cc:	f0 90 54 19 	lds	r15, 0x1954	; 0x801954 <AMIGOs+0x1>
   163d0:	87 e0       	ldi	r24, 0x07	; 7
   163d2:	e8 0e       	add	r14, r24
   163d4:	f1 1c       	adc	r15, r1
   163d6:	06 81       	ldd	r16, Z+6	; 0x06
   163d8:	17 81       	ldd	r17, Z+7	; 0x07
   163da:	2a ed       	ldi	r18, 0xDA	; 218
   163dc:	3c e1       	ldi	r19, 0x1C	; 28
   163de:	82 81       	ldd	r24, Z+2	; 0x02
   163e0:	93 81       	ldd	r25, Z+3	; 0x03
   163e2:	0e 94 96 83 	call	0x1072c	; 0x1072c <dbf_open_write>
   163e6:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   163ea:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   163ee:	27 81       	ldd	r18, Z+7	; 0x07
   163f0:	30 85       	ldd	r19, Z+8	; 0x08
   163f2:	21 15       	cp	r18, r1
   163f4:	31 05       	cpc	r19, r1
   163f6:	49 f4       	brne	.+18     	; 0x1640a <amigo_format+0xb8>
   163f8:	c0 91 55 19 	lds	r28, 0x1955	; 0x801955 <AMIGOp>
   163fc:	d0 91 56 19 	lds	r29, 0x1956	; 0x801956 <AMIGOp+0x1>
   16400:	4e 81       	ldd	r20, Y+6	; 0x06
   16402:	5f 81       	ldd	r21, Y+7	; 0x07
   16404:	84 17       	cp	r24, r20
   16406:	95 07       	cpc	r25, r21
   16408:	41 f0       	breq	.+16     	; 0x1641a <amigo_format+0xc8>
   1640a:	22 60       	ori	r18, 0x02	; 2
   1640c:	30 87       	std	Z+8, r19	; 0x08
   1640e:	27 83       	std	Z+7, r18	; 0x07
   16410:	81 e0       	ldi	r24, 0x01	; 1
   16412:	86 83       	std	Z+6, r24	; 0x06
   16414:	c1 e0       	ldi	r28, 0x01	; 1
   16416:	d0 e0       	ldi	r29, 0x00	; 0
   16418:	0f c0       	rjmp	.+30     	; 0x16438 <amigo_format+0xe6>
   1641a:	80 e0       	ldi	r24, 0x00	; 0
   1641c:	90 e0       	ldi	r25, 0x00	; 0
   1641e:	a7 de       	rcall	.-690    	; 0x1616e <amigo_increment>
   16420:	89 2b       	or	r24, r25
   16422:	29 f2       	breq	.-118    	; 0x163ae <amigo_format+0x5c>
   16424:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16428:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   1642c:	15 82       	std	Z+5, r1	; 0x05
   1642e:	14 82       	std	Z+4, r1	; 0x04
   16430:	13 82       	std	Z+3, r1	; 0x03
   16432:	16 82       	std	Z+6, r1	; 0x06
   16434:	c0 e0       	ldi	r28, 0x00	; 0
   16436:	d0 e0       	ldi	r29, 0x00	; 0
   16438:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1643c:	86 ff       	sbrs	r24, 6
   1643e:	04 c0       	rjmp	.+8      	; 0x16448 <amigo_format+0xf6>
   16440:	8d ea       	ldi	r24, 0xAD	; 173
   16442:	95 e1       	ldi	r25, 0x15	; 21
   16444:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   16448:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1644c:	85 ff       	sbrs	r24, 5
   1644e:	0a c0       	rjmp	.+20     	; 0x16464 <amigo_format+0x112>
   16450:	8b ed       	ldi	r24, 0xDB	; 219
   16452:	9c e2       	ldi	r25, 0x2C	; 44
   16454:	a0 e0       	ldi	r26, 0x00	; 0
   16456:	ed b7       	in	r30, 0x3d	; 61
   16458:	fe b7       	in	r31, 0x3e	; 62
   1645a:	81 83       	std	Z+1, r24	; 0x01
   1645c:	92 83       	std	Z+2, r25	; 0x02
   1645e:	a3 83       	std	Z+3, r26	; 0x03
   16460:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   16464:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16468:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   1646c:	81 81       	ldd	r24, Z+1	; 0x01
   1646e:	90 e0       	ldi	r25, 0x00	; 0
   16470:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   16474:	ce 01       	movw	r24, r28
   16476:	cd b7       	in	r28, 0x3d	; 61
   16478:	de b7       	in	r29, 0x3e	; 62
   1647a:	23 96       	adiw	r28, 0x03	; 3
   1647c:	e6 e0       	ldi	r30, 0x06	; 6
   1647e:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00016482 <amigo_buffered_read_command>:
   16482:	8f 92       	push	r8
   16484:	9f 92       	push	r9
   16486:	af 92       	push	r10
   16488:	bf 92       	push	r11
   1648a:	ef 92       	push	r14
   1648c:	ff 92       	push	r15
   1648e:	0f 93       	push	r16
   16490:	1f 93       	push	r17
   16492:	cf 93       	push	r28
   16494:	df 93       	push	r29
   16496:	00 d0       	rcall	.+0      	; 0x16498 <amigo_buffered_read_command+0x16>
   16498:	00 d0       	rcall	.+0      	; 0x1649a <amigo_buffered_read_command+0x18>
   1649a:	1f 92       	push	r1
   1649c:	64 eb       	ldi	r22, 0xB4	; 180
   1649e:	75 e1       	ldi	r23, 0x15	; 21
   164a0:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   164a4:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   164a8:	91 dc       	rcall	.-1758   	; 0x15dcc <amigo_chs_to_logical>
   164aa:	4b 01       	movw	r8, r22
   164ac:	5c 01       	movw	r10, r24
   164ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164b2:	85 ff       	sbrs	r24, 5
   164b4:	12 c0       	rjmp	.+36     	; 0x164da <amigo_buffered_read_command+0x58>
   164b6:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   164ba:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   164be:	80 81       	ld	r24, Z
   164c0:	90 e0       	ldi	r25, 0x00	; 0
   164c2:	ed b7       	in	r30, 0x3d	; 61
   164c4:	fe b7       	in	r31, 0x3e	; 62
   164c6:	95 83       	std	Z+5, r25	; 0x05
   164c8:	84 83       	std	Z+4, r24	; 0x04
   164ca:	89 ec       	ldi	r24, 0xC9	; 201
   164cc:	9c e2       	ldi	r25, 0x2C	; 44
   164ce:	a0 e0       	ldi	r26, 0x00	; 0
   164d0:	81 83       	std	Z+1, r24	; 0x01
   164d2:	92 83       	std	Z+2, r25	; 0x02
   164d4:	a3 83       	std	Z+3, r26	; 0x03
   164d6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   164da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164de:	86 fd       	sbrc	r24, 6
   164e0:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   164e4:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   164e8:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   164ec:	e0 90 53 19 	lds	r14, 0x1953	; 0x801953 <AMIGOs>
   164f0:	f0 90 54 19 	lds	r15, 0x1954	; 0x801954 <AMIGOs+0x1>
   164f4:	87 e0       	ldi	r24, 0x07	; 7
   164f6:	e8 0e       	add	r14, r24
   164f8:	f1 1c       	adc	r15, r1
   164fa:	06 81       	ldd	r16, Z+6	; 0x06
   164fc:	17 81       	ldd	r17, Z+7	; 0x07
   164fe:	2a ed       	ldi	r18, 0xDA	; 218
   16500:	3c e1       	ldi	r19, 0x1C	; 28
   16502:	b5 01       	movw	r22, r10
   16504:	a4 01       	movw	r20, r8
   16506:	82 81       	ldd	r24, Z+2	; 0x02
   16508:	93 81       	ldd	r25, Z+3	; 0x03
   1650a:	0e 94 3f 83 	call	0x1067e	; 0x1067e <dbf_open_read>
   1650e:	7c 01       	movw	r14, r24
   16510:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16514:	86 ff       	sbrs	r24, 6
   16516:	04 c0       	rjmp	.+8      	; 0x16520 <amigo_buffered_read_command+0x9e>
   16518:	85 ea       	ldi	r24, 0xA5	; 165
   1651a:	90 e1       	ldi	r25, 0x10	; 16
   1651c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   16520:	c0 91 53 19 	lds	r28, 0x1953	; 0x801953 <AMIGOs>
   16524:	d0 91 54 19 	lds	r29, 0x1954	; 0x801954 <AMIGOs+0x1>
   16528:	8f 81       	ldd	r24, Y+7	; 0x07
   1652a:	98 85       	ldd	r25, Y+8	; 0x08
   1652c:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16530:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16534:	89 2b       	or	r24, r25
   16536:	29 f4       	brne	.+10     	; 0x16542 <amigo_buffered_read_command+0xc0>
   16538:	86 81       	ldd	r24, Z+6	; 0x06
   1653a:	97 81       	ldd	r25, Z+7	; 0x07
   1653c:	e8 16       	cp	r14, r24
   1653e:	f9 06       	cpc	r15, r25
   16540:	19 f0       	breq	.+6      	; 0x16548 <amigo_buffered_read_command+0xc6>
   16542:	81 e0       	ldi	r24, 0x01	; 1
   16544:	8e 83       	std	Y+6, r24	; 0x06
   16546:	14 c0       	rjmp	.+40     	; 0x16570 <amigo_buffered_read_command+0xee>
   16548:	84 eb       	ldi	r24, 0xB4	; 180
   1654a:	95 e1       	ldi	r25, 0x15	; 21
   1654c:	10 de       	rcall	.-992    	; 0x1616e <amigo_increment>
   1654e:	89 2b       	or	r24, r25
   16550:	59 f0       	breq	.+22     	; 0x16568 <amigo_buffered_read_command+0xe6>
   16552:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16556:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   1655a:	81 e0       	ldi	r24, 0x01	; 1
   1655c:	86 83       	std	Z+6, r24	; 0x06
   1655e:	87 81       	ldd	r24, Z+7	; 0x07
   16560:	90 85       	ldd	r25, Z+8	; 0x08
   16562:	84 60       	ori	r24, 0x04	; 4
   16564:	90 87       	std	Z+8, r25	; 0x08
   16566:	87 83       	std	Z+7, r24	; 0x07
   16568:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   1656c:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16570:	81 81       	ldd	r24, Z+1	; 0x01
   16572:	90 e0       	ldi	r25, 0x00	; 0
   16574:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   16578:	80 e0       	ldi	r24, 0x00	; 0
   1657a:	90 e0       	ldi	r25, 0x00	; 0
   1657c:	0f 90       	pop	r0
   1657e:	0f 90       	pop	r0
   16580:	0f 90       	pop	r0
   16582:	0f 90       	pop	r0
   16584:	0f 90       	pop	r0
   16586:	df 91       	pop	r29
   16588:	cf 91       	pop	r28
   1658a:	1f 91       	pop	r17
   1658c:	0f 91       	pop	r16
   1658e:	ff 90       	pop	r15
   16590:	ef 90       	pop	r14
   16592:	bf 90       	pop	r11
   16594:	af 90       	pop	r10
   16596:	9f 90       	pop	r9
   16598:	8f 90       	pop	r8
   1659a:	08 95       	ret

0001659c <amigo_buffered_read_execute>:
   1659c:	a5 e0       	ldi	r26, 0x05	; 5
   1659e:	b0 e0       	ldi	r27, 0x00	; 0
   165a0:	e4 ed       	ldi	r30, 0xD4	; 212
   165a2:	f2 eb       	ldi	r31, 0xB2	; 178
   165a4:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
   165a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ac:	87 fd       	sbrc	r24, 7
   165ae:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   165b2:	80 e0       	ldi	r24, 0x00	; 0
   165b4:	91 e0       	ldi	r25, 0x01	; 1
   165b6:	9d 83       	std	Y+5, r25	; 0x05
   165b8:	8c 83       	std	Y+4, r24	; 0x04
   165ba:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   165be:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   165c2:	66 81       	ldd	r22, Z+6	; 0x06
   165c4:	77 81       	ldd	r23, Z+7	; 0x07
   165c6:	ae 01       	movw	r20, r28
   165c8:	4c 5f       	subi	r20, 0xFC	; 252
   165ca:	5f 4f       	sbci	r21, 0xFF	; 255
   165cc:	8a ed       	ldi	r24, 0xDA	; 218
   165ce:	9c e1       	ldi	r25, 0x1C	; 28
   165d0:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   165d4:	8c 01       	movw	r16, r24
   165d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165da:	87 ff       	sbrs	r24, 7
   165dc:	04 c0       	rjmp	.+8      	; 0x165e6 <amigo_buffered_read_execute+0x4a>
   165de:	80 eb       	ldi	r24, 0xB0	; 176
   165e0:	90 e1       	ldi	r25, 0x10	; 16
   165e2:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   165e6:	8c 81       	ldd	r24, Y+4	; 0x04
   165e8:	9d 81       	ldd	r25, Y+5	; 0x05
   165ea:	88 27       	eor	r24, r24
   165ec:	90 7d       	andi	r25, 0xD0	; 208
   165ee:	89 2b       	or	r24, r25
   165f0:	49 f4       	brne	.+18     	; 0x16604 <amigo_buffered_read_execute+0x68>
   165f2:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   165f6:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   165fa:	86 81       	ldd	r24, Z+6	; 0x06
   165fc:	97 81       	ldd	r25, Z+7	; 0x07
   165fe:	08 17       	cp	r16, r24
   16600:	19 07       	cpc	r17, r25
   16602:	c9 f0       	breq	.+50     	; 0x16636 <amigo_buffered_read_execute+0x9a>
   16604:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16608:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   1660c:	81 e0       	ldi	r24, 0x01	; 1
   1660e:	86 83       	std	Z+6, r24	; 0x06
   16610:	87 81       	ldd	r24, Z+7	; 0x07
   16612:	90 85       	ldd	r25, Z+8	; 0x08
   16614:	80 62       	ori	r24, 0x20	; 32
   16616:	90 87       	std	Z+8, r25	; 0x08
   16618:	87 83       	std	Z+7, r24	; 0x07
   1661a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1661e:	80 ff       	sbrs	r24, 0
   16620:	0a c0       	rjmp	.+20     	; 0x16636 <amigo_buffered_read_execute+0x9a>
   16622:	8f ea       	ldi	r24, 0xAF	; 175
   16624:	9c e2       	ldi	r25, 0x2C	; 44
   16626:	a0 e0       	ldi	r26, 0x00	; 0
   16628:	ed b7       	in	r30, 0x3d	; 61
   1662a:	fe b7       	in	r31, 0x3e	; 62
   1662c:	81 83       	std	Z+1, r24	; 0x01
   1662e:	92 83       	std	Z+2, r25	; 0x02
   16630:	a3 83       	std	Z+3, r26	; 0x03
   16632:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   16636:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   1663a:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   1663e:	81 81       	ldd	r24, Z+1	; 0x01
   16640:	90 e0       	ldi	r25, 0x00	; 0
   16642:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   16646:	8c 81       	ldd	r24, Y+4	; 0x04
   16648:	9d 81       	ldd	r25, Y+5	; 0x05
   1664a:	25 96       	adiw	r28, 0x05	; 5
   1664c:	e4 e0       	ldi	r30, 0x04	; 4
   1664e:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00016652 <amigo_buffered_write>:
   16652:	8f 92       	push	r8
   16654:	9f 92       	push	r9
   16656:	af 92       	push	r10
   16658:	bf 92       	push	r11
   1665a:	ef 92       	push	r14
   1665c:	ff 92       	push	r15
   1665e:	0f 93       	push	r16
   16660:	1f 93       	push	r17
   16662:	cf 93       	push	r28
   16664:	df 93       	push	r29
   16666:	cd b7       	in	r28, 0x3d	; 61
   16668:	de b7       	in	r29, 0x3e	; 62
   1666a:	27 97       	sbiw	r28, 0x07	; 7
   1666c:	0f b6       	in	r0, 0x3f	; 63
   1666e:	f8 94       	cli
   16670:	de bf       	out	0x3e, r29	; 62
   16672:	0f be       	out	0x3f, r0	; 63
   16674:	cd bf       	out	0x3d, r28	; 61
   16676:	62 ec       	ldi	r22, 0xC2	; 194
   16678:	75 e1       	ldi	r23, 0x15	; 21
   1667a:	80 91 53 19 	lds	r24, 0x1953	; 0x801953 <AMIGOs>
   1667e:	90 91 54 19 	lds	r25, 0x1954	; 0x801954 <AMIGOs+0x1>
   16682:	a4 db       	rcall	.-2232   	; 0x15dcc <amigo_chs_to_logical>
   16684:	4b 01       	movw	r8, r22
   16686:	5c 01       	movw	r10, r24
   16688:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1668c:	87 fd       	sbrc	r24, 7
   1668e:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   16692:	1f 82       	std	Y+7, r1	; 0x07
   16694:	1e 82       	std	Y+6, r1	; 0x06
   16696:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   1669a:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   1669e:	66 81       	ldd	r22, Z+6	; 0x06
   166a0:	77 81       	ldd	r23, Z+7	; 0x07
   166a2:	ae 01       	movw	r20, r28
   166a4:	4a 5f       	subi	r20, 0xFA	; 250
   166a6:	5f 4f       	sbci	r21, 0xFF	; 255
   166a8:	8a ed       	ldi	r24, 0xDA	; 218
   166aa:	9c e1       	ldi	r25, 0x1C	; 28
   166ac:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
   166b0:	7c 01       	movw	r14, r24
   166b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166b6:	85 ff       	sbrs	r24, 5
   166b8:	12 c0       	rjmp	.+36     	; 0x166de <amigo_buffered_write+0x8c>
   166ba:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   166be:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   166c2:	80 81       	ld	r24, Z
   166c4:	90 e0       	ldi	r25, 0x00	; 0
   166c6:	ed b7       	in	r30, 0x3d	; 61
   166c8:	fe b7       	in	r31, 0x3e	; 62
   166ca:	95 83       	std	Z+5, r25	; 0x05
   166cc:	84 83       	std	Z+4, r24	; 0x04
   166ce:	8d e9       	ldi	r24, 0x9D	; 157
   166d0:	9c e2       	ldi	r25, 0x2C	; 44
   166d2:	a0 e0       	ldi	r26, 0x00	; 0
   166d4:	81 83       	std	Z+1, r24	; 0x01
   166d6:	92 83       	std	Z+2, r25	; 0x02
   166d8:	a3 83       	std	Z+3, r26	; 0x03
   166da:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   166de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166e2:	87 ff       	sbrs	r24, 7
   166e4:	04 c0       	rjmp	.+8      	; 0x166ee <amigo_buffered_write+0x9c>
   166e6:	81 ed       	ldi	r24, 0xD1	; 209
   166e8:	95 e1       	ldi	r25, 0x15	; 21
   166ea:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   166ee:	8e 81       	ldd	r24, Y+6	; 0x06
   166f0:	9f 81       	ldd	r25, Y+7	; 0x07
   166f2:	88 27       	eor	r24, r24
   166f4:	90 7d       	andi	r25, 0xD0	; 208
   166f6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   166fa:	89 2b       	or	r24, r25
   166fc:	49 f4       	brne	.+18     	; 0x16710 <amigo_buffered_write+0xbe>
   166fe:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16702:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16706:	86 81       	ldd	r24, Z+6	; 0x06
   16708:	97 81       	ldd	r25, Z+7	; 0x07
   1670a:	e8 16       	cp	r14, r24
   1670c:	f9 06       	cpc	r15, r25
   1670e:	c1 f0       	breq	.+48     	; 0x16740 <amigo_buffered_write+0xee>
   16710:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16714:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16718:	81 e0       	ldi	r24, 0x01	; 1
   1671a:	86 83       	std	Z+6, r24	; 0x06
   1671c:	87 81       	ldd	r24, Z+7	; 0x07
   1671e:	90 85       	ldd	r25, Z+8	; 0x08
   16720:	80 62       	ori	r24, 0x20	; 32
   16722:	90 87       	std	Z+8, r25	; 0x08
   16724:	87 83       	std	Z+7, r24	; 0x07
   16726:	20 ff       	sbrs	r18, 0
   16728:	5e c0       	rjmp	.+188    	; 0x167e6 <amigo_buffered_write+0x194>
   1672a:	8e e7       	ldi	r24, 0x7E	; 126
   1672c:	9c e2       	ldi	r25, 0x2C	; 44
   1672e:	a0 e0       	ldi	r26, 0x00	; 0
   16730:	ed b7       	in	r30, 0x3d	; 61
   16732:	fe b7       	in	r31, 0x3e	; 62
   16734:	81 83       	std	Z+1, r24	; 0x01
   16736:	92 83       	std	Z+2, r25	; 0x02
   16738:	a3 83       	std	Z+3, r26	; 0x03
   1673a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1673e:	53 c0       	rjmp	.+166    	; 0x167e6 <amigo_buffered_write+0x194>
   16740:	26 fd       	sbrc	r18, 6
   16742:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
   16746:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   1674a:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   1674e:	e0 90 53 19 	lds	r14, 0x1953	; 0x801953 <AMIGOs>
   16752:	f0 90 54 19 	lds	r15, 0x1954	; 0x801954 <AMIGOs+0x1>
   16756:	87 e0       	ldi	r24, 0x07	; 7
   16758:	e8 0e       	add	r14, r24
   1675a:	f1 1c       	adc	r15, r1
   1675c:	06 81       	ldd	r16, Z+6	; 0x06
   1675e:	17 81       	ldd	r17, Z+7	; 0x07
   16760:	2a ed       	ldi	r18, 0xDA	; 218
   16762:	3c e1       	ldi	r19, 0x1C	; 28
   16764:	b5 01       	movw	r22, r10
   16766:	a4 01       	movw	r20, r8
   16768:	82 81       	ldd	r24, Z+2	; 0x02
   1676a:	93 81       	ldd	r25, Z+3	; 0x03
   1676c:	0e 94 96 83 	call	0x1072c	; 0x1072c <dbf_open_write>
   16770:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16774:	86 ff       	sbrs	r24, 6
   16776:	04 c0       	rjmp	.+8      	; 0x16780 <amigo_buffered_write+0x12e>
   16778:	8a e9       	ldi	r24, 0x9A	; 154
   1677a:	90 e1       	ldi	r25, 0x10	; 16
   1677c:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
   16780:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16784:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16788:	87 81       	ldd	r24, Z+7	; 0x07
   1678a:	90 85       	ldd	r25, Z+8	; 0x08
   1678c:	89 2b       	or	r24, r25
   1678e:	d9 f0       	breq	.+54     	; 0x167c6 <amigo_buffered_write+0x174>
   16790:	81 e0       	ldi	r24, 0x01	; 1
   16792:	86 83       	std	Z+6, r24	; 0x06
   16794:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16798:	80 ff       	sbrs	r24, 0
   1679a:	0a c0       	rjmp	.+20     	; 0x167b0 <amigo_buffered_write+0x15e>
   1679c:	8e e5       	ldi	r24, 0x5E	; 94
   1679e:	9c e2       	ldi	r25, 0x2C	; 44
   167a0:	a0 e0       	ldi	r26, 0x00	; 0
   167a2:	ed b7       	in	r30, 0x3d	; 61
   167a4:	fe b7       	in	r31, 0x3e	; 62
   167a6:	81 83       	std	Z+1, r24	; 0x01
   167a8:	92 83       	std	Z+2, r25	; 0x02
   167aa:	a3 83       	std	Z+3, r26	; 0x03
   167ac:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   167b0:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   167b4:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   167b8:	81 81       	ldd	r24, Z+1	; 0x01
   167ba:	90 e0       	ldi	r25, 0x00	; 0
   167bc:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   167c0:	80 e0       	ldi	r24, 0x00	; 0
   167c2:	90 e0       	ldi	r25, 0x00	; 0
   167c4:	1c c0       	rjmp	.+56     	; 0x167fe <amigo_buffered_write+0x1ac>
   167c6:	82 ec       	ldi	r24, 0xC2	; 194
   167c8:	95 e1       	ldi	r25, 0x15	; 21
   167ca:	d1 dc       	rcall	.-1630   	; 0x1616e <amigo_increment>
   167cc:	89 2b       	or	r24, r25
   167ce:	59 f0       	breq	.+22     	; 0x167e6 <amigo_buffered_write+0x194>
   167d0:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   167d4:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   167d8:	81 e0       	ldi	r24, 0x01	; 1
   167da:	86 83       	std	Z+6, r24	; 0x06
   167dc:	87 81       	ldd	r24, Z+7	; 0x07
   167de:	90 85       	ldd	r25, Z+8	; 0x08
   167e0:	84 60       	ori	r24, 0x04	; 4
   167e2:	90 87       	std	Z+8, r25	; 0x08
   167e4:	87 83       	std	Z+7, r24	; 0x07
   167e6:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   167ea:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   167ee:	81 81       	ldd	r24, Z+1	; 0x01
   167f0:	90 e0       	ldi	r25, 0x00	; 0
   167f2:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   167f6:	8e 81       	ldd	r24, Y+6	; 0x06
   167f8:	9f 81       	ldd	r25, Y+7	; 0x07
   167fa:	88 27       	eor	r24, r24
   167fc:	90 7d       	andi	r25, 0xD0	; 208
   167fe:	27 96       	adiw	r28, 0x07	; 7
   16800:	0f b6       	in	r0, 0x3f	; 63
   16802:	f8 94       	cli
   16804:	de bf       	out	0x3e, r29	; 62
   16806:	0f be       	out	0x3f, r0	; 63
   16808:	cd bf       	out	0x3d, r28	; 61
   1680a:	df 91       	pop	r29
   1680c:	cf 91       	pop	r28
   1680e:	1f 91       	pop	r17
   16810:	0f 91       	pop	r16
   16812:	ff 90       	pop	r15
   16814:	ef 90       	pop	r14
   16816:	bf 90       	pop	r11
   16818:	af 90       	pop	r10
   1681a:	9f 90       	pop	r9
   1681c:	8f 90       	pop	r8
   1681e:	08 95       	ret

00016820 <amigo_cmd_dsj>:
   16820:	a8 e0       	ldi	r26, 0x08	; 8
   16822:	b0 e0       	ldi	r27, 0x00	; 0
   16824:	e6 e1       	ldi	r30, 0x16	; 22
   16826:	f4 eb       	ldi	r31, 0xB4	; 180
   16828:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   1682c:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16830:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16834:	86 81       	ldd	r24, Z+6	; 0x06
   16836:	88 87       	std	Y+8, r24	; 0x08
   16838:	80 e0       	ldi	r24, 0x00	; 0
   1683a:	91 e0       	ldi	r25, 0x01	; 1
   1683c:	9f 83       	std	Y+7, r25	; 0x07
   1683e:	8e 83       	std	Y+6, r24	; 0x06
   16840:	ae 01       	movw	r20, r28
   16842:	4a 5f       	subi	r20, 0xFA	; 250
   16844:	5f 4f       	sbci	r21, 0xFF	; 255
   16846:	61 e0       	ldi	r22, 0x01	; 1
   16848:	70 e0       	ldi	r23, 0x00	; 0
   1684a:	ce 01       	movw	r24, r28
   1684c:	08 96       	adiw	r24, 0x08	; 8
   1684e:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
   16852:	2e 81       	ldd	r18, Y+6	; 0x06
   16854:	3f 81       	ldd	r19, Y+7	; 0x07
   16856:	22 27       	eor	r18, r18
   16858:	30 7d       	andi	r19, 0xD0	; 208
   1685a:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   1685e:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16862:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16866:	23 2b       	or	r18, r19
   16868:	11 f4       	brne	.+4      	; 0x1686e <amigo_cmd_dsj+0x4e>
   1686a:	01 97       	sbiw	r24, 0x01	; 1
   1686c:	c1 f0       	breq	.+48     	; 0x1689e <amigo_cmd_dsj+0x7e>
   1686e:	81 e0       	ldi	r24, 0x01	; 1
   16870:	86 83       	std	Z+6, r24	; 0x06
   16872:	87 81       	ldd	r24, Z+7	; 0x07
   16874:	90 85       	ldd	r25, Z+8	; 0x08
   16876:	80 62       	ori	r24, 0x20	; 32
   16878:	90 87       	std	Z+8, r25	; 0x08
   1687a:	87 83       	std	Z+7, r24	; 0x07
   1687c:	40 ff       	sbrs	r20, 0
   1687e:	0a c0       	rjmp	.+20     	; 0x16894 <amigo_cmd_dsj+0x74>
   16880:	84 e4       	ldi	r24, 0x44	; 68
   16882:	9c e2       	ldi	r25, 0x2C	; 44
   16884:	a0 e0       	ldi	r26, 0x00	; 0
   16886:	ed b7       	in	r30, 0x3d	; 61
   16888:	fe b7       	in	r31, 0x3e	; 62
   1688a:	81 83       	std	Z+1, r24	; 0x01
   1688c:	92 83       	std	Z+2, r25	; 0x02
   1688e:	a3 83       	std	Z+3, r26	; 0x03
   16890:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   16894:	8e 81       	ldd	r24, Y+6	; 0x06
   16896:	9f 81       	ldd	r25, Y+7	; 0x07
   16898:	88 27       	eor	r24, r24
   1689a:	90 7d       	andi	r25, 0xD0	; 208
   1689c:	19 c0       	rjmp	.+50     	; 0x168d0 <amigo_cmd_dsj+0xb0>
   1689e:	45 ff       	sbrs	r20, 5
   168a0:	0e c0       	rjmp	.+28     	; 0x168be <amigo_cmd_dsj+0x9e>
   168a2:	86 81       	ldd	r24, Z+6	; 0x06
   168a4:	90 e0       	ldi	r25, 0x00	; 0
   168a6:	ed b7       	in	r30, 0x3d	; 61
   168a8:	fe b7       	in	r31, 0x3e	; 62
   168aa:	95 83       	std	Z+5, r25	; 0x05
   168ac:	84 83       	std	Z+4, r24	; 0x04
   168ae:	87 e3       	ldi	r24, 0x37	; 55
   168b0:	9c e2       	ldi	r25, 0x2C	; 44
   168b2:	a0 e0       	ldi	r26, 0x00	; 0
   168b4:	81 83       	std	Z+1, r24	; 0x01
   168b6:	92 83       	std	Z+2, r25	; 0x02
   168b8:	a3 83       	std	Z+3, r26	; 0x03
   168ba:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   168be:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   168c2:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   168c6:	16 82       	std	Z+6, r1	; 0x06
   168c8:	10 86       	std	Z+8, r1	; 0x08
   168ca:	17 82       	std	Z+7, r1	; 0x07
   168cc:	80 e0       	ldi	r24, 0x00	; 0
   168ce:	90 e0       	ldi	r25, 0x00	; 0
   168d0:	28 96       	adiw	r28, 0x08	; 8
   168d2:	e2 e0       	ldi	r30, 0x02	; 2
   168d4:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000168d8 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   168d8:	00 d0       	rcall	.+0      	; 0x168da <amigo_cmd_clear+0x2>
   168da:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   168dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168e0:	85 ff       	sbrs	r24, 5
   168e2:	0a c0       	rjmp	.+20     	; 0x168f8 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   168e4:	88 e2       	ldi	r24, 0x28	; 40
   168e6:	9c e2       	ldi	r25, 0x2C	; 44
   168e8:	a0 e0       	ldi	r26, 0x00	; 0
   168ea:	ed b7       	in	r30, 0x3d	; 61
   168ec:	fe b7       	in	r31, 0x3e	; 62
   168ee:	81 83       	std	Z+1, r24	; 0x01
   168f0:	92 83       	std	Z+2, r25	; 0x02
   168f2:	a3 83       	std	Z+3, r26	; 0x03
   168f4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
    AMIGOs->sector = 0;
   168f8:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   168fc:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16900:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16902:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16904:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16906:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16908:	10 86       	std	Z+8, r1	; 0x08
   1690a:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1690c:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16910:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16914:	81 81       	ldd	r24, Z+1	; 0x01
   16916:	90 e0       	ldi	r25, 0x00	; 0
   16918:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
    return(0);
}
   1691c:	80 e0       	ldi	r24, 0x00	; 0
   1691e:	90 e0       	ldi	r25, 0x00	; 0
   16920:	0f 90       	pop	r0
   16922:	0f 90       	pop	r0
   16924:	0f 90       	pop	r0
   16926:	08 95       	ret

00016928 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16928:	af e0       	ldi	r26, 0x0F	; 15
   1692a:	b0 e0       	ldi	r27, 0x00	; 0
   1692c:	ea e9       	ldi	r30, 0x9A	; 154
   1692e:	f4 eb       	ldi	r31, 0xB4	; 180
   16930:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
   16934:	c8 2f       	mov	r28, r24
   16936:	e6 2e       	mov	r14, r22
   16938:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   1693a:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   1693e:	90 e0       	ldi	r25, 0x00	; 0
   16940:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   16944:	20 91 de 1e 	lds	r18, 0x1EDE	; 0x801ede <talking>
   16948:	f1 2c       	mov	r15, r1
   1694a:	d0 e0       	ldi	r29, 0x00	; 0
   1694c:	89 2b       	or	r24, r25
   1694e:	f1 f0       	breq	.+60     	; 0x1698c <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16950:	82 2f       	mov	r24, r18
   16952:	90 e0       	ldi	r25, 0x00	; 0
   16954:	ed b7       	in	r30, 0x3d	; 61
   16956:	fe b7       	in	r31, 0x3e	; 62
   16958:	97 87       	std	Z+15, r25	; 0x0f
   1695a:	86 87       	std	Z+14, r24	; 0x0e
   1695c:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   16960:	90 e0       	ldi	r25, 0x00	; 0
   16962:	95 87       	std	Z+13, r25	; 0x0d
   16964:	84 87       	std	Z+12, r24	; 0x0c
   16966:	13 87       	std	Z+11, r17	; 0x0b
   16968:	02 87       	std	Z+10, r16	; 0x0a
   1696a:	f1 86       	std	Z+9, r15	; 0x09
   1696c:	e0 86       	std	Z+8, r14	; 0x08
   1696e:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16972:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16976:	80 81       	ld	r24, Z
   16978:	90 e0       	ldi	r25, 0x00	; 0
   1697a:	ed b7       	in	r30, 0x3d	; 61
   1697c:	fe b7       	in	r31, 0x3e	; 62
   1697e:	97 83       	std	Z+7, r25	; 0x07
   16980:	86 83       	std	Z+6, r24	; 0x06
   16982:	d5 83       	std	Z+5, r29	; 0x05
   16984:	c4 83       	std	Z+4, r28	; 0x04
   16986:	81 ec       	ldi	r24, 0xC1	; 193
   16988:	9b e2       	ldi	r25, 0x2B	; 43
   1698a:	51 c0       	rjmp	.+162    	; 0x16a2e <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   1698c:	82 2f       	mov	r24, r18
   1698e:	90 e0       	ldi	r25, 0x00	; 0
   16990:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   16994:	20 91 e0 1e 	lds	r18, 0x1EE0	; 0x801ee0 <listening>
   16998:	30 91 de 1e 	lds	r19, 0x1EDE	; 0x801ede <talking>
   1699c:	a0 91 53 19 	lds	r26, 0x1953	; 0x801953 <AMIGOs>
   169a0:	b0 91 54 19 	lds	r27, 0x1954	; 0x801954 <AMIGOs+0x1>
   169a4:	89 2b       	or	r24, r25
   169a6:	b1 f0       	breq	.+44     	; 0x169d4 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   169a8:	83 2f       	mov	r24, r19
   169aa:	90 e0       	ldi	r25, 0x00	; 0
   169ac:	ed b7       	in	r30, 0x3d	; 61
   169ae:	fe b7       	in	r31, 0x3e	; 62
   169b0:	97 87       	std	Z+15, r25	; 0x0f
   169b2:	86 87       	std	Z+14, r24	; 0x0e
   169b4:	30 e0       	ldi	r19, 0x00	; 0
   169b6:	35 87       	std	Z+13, r19	; 0x0d
   169b8:	24 87       	std	Z+12, r18	; 0x0c
   169ba:	13 87       	std	Z+11, r17	; 0x0b
   169bc:	02 87       	std	Z+10, r16	; 0x0a
   169be:	f1 86       	std	Z+9, r15	; 0x09
   169c0:	e0 86       	std	Z+8, r14	; 0x08
   169c2:	8c 91       	ld	r24, X
   169c4:	90 e0       	ldi	r25, 0x00	; 0
   169c6:	97 83       	std	Z+7, r25	; 0x07
   169c8:	86 83       	std	Z+6, r24	; 0x06
   169ca:	d5 83       	std	Z+5, r29	; 0x05
   169cc:	c4 83       	std	Z+4, r28	; 0x04
   169ce:	8a e5       	ldi	r24, 0x5A	; 90
   169d0:	9b e2       	ldi	r25, 0x2B	; 43
   169d2:	2d c0       	rjmp	.+90     	; 0x16a2e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   169d4:	3f 35       	cpi	r19, 0x5F	; 95
   169d6:	b1 f4       	brne	.+44     	; 0x16a04 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   169d8:	8f e5       	ldi	r24, 0x5F	; 95
   169da:	90 e0       	ldi	r25, 0x00	; 0
   169dc:	ed b7       	in	r30, 0x3d	; 61
   169de:	fe b7       	in	r31, 0x3e	; 62
   169e0:	97 87       	std	Z+15, r25	; 0x0f
   169e2:	86 87       	std	Z+14, r24	; 0x0e
   169e4:	30 e0       	ldi	r19, 0x00	; 0
   169e6:	35 87       	std	Z+13, r19	; 0x0d
   169e8:	24 87       	std	Z+12, r18	; 0x0c
   169ea:	13 87       	std	Z+11, r17	; 0x0b
   169ec:	02 87       	std	Z+10, r16	; 0x0a
   169ee:	f1 86       	std	Z+9, r15	; 0x09
   169f0:	e0 86       	std	Z+8, r14	; 0x08
   169f2:	8c 91       	ld	r24, X
   169f4:	90 e0       	ldi	r25, 0x00	; 0
   169f6:	97 83       	std	Z+7, r25	; 0x07
   169f8:	86 83       	std	Z+6, r24	; 0x06
   169fa:	d5 83       	std	Z+5, r29	; 0x05
   169fc:	c4 83       	std	Z+4, r28	; 0x04
   169fe:	83 ef       	ldi	r24, 0xF3	; 243
   16a00:	9a e2       	ldi	r25, 0x2A	; 42
   16a02:	15 c0       	rjmp	.+42     	; 0x16a2e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a04:	83 2f       	mov	r24, r19
   16a06:	90 e0       	ldi	r25, 0x00	; 0
   16a08:	ed b7       	in	r30, 0x3d	; 61
   16a0a:	fe b7       	in	r31, 0x3e	; 62
   16a0c:	97 87       	std	Z+15, r25	; 0x0f
   16a0e:	86 87       	std	Z+14, r24	; 0x0e
   16a10:	30 e0       	ldi	r19, 0x00	; 0
   16a12:	35 87       	std	Z+13, r19	; 0x0d
   16a14:	24 87       	std	Z+12, r18	; 0x0c
   16a16:	13 87       	std	Z+11, r17	; 0x0b
   16a18:	02 87       	std	Z+10, r16	; 0x0a
   16a1a:	f1 86       	std	Z+9, r15	; 0x09
   16a1c:	e0 86       	std	Z+8, r14	; 0x08
   16a1e:	8c 91       	ld	r24, X
   16a20:	90 e0       	ldi	r25, 0x00	; 0
   16a22:	97 83       	std	Z+7, r25	; 0x07
   16a24:	86 83       	std	Z+6, r24	; 0x06
   16a26:	d5 83       	std	Z+5, r29	; 0x05
   16a28:	c4 83       	std	Z+4, r28	; 0x04
   16a2a:	8e e8       	ldi	r24, 0x8E	; 142
   16a2c:	9a e2       	ldi	r25, 0x2A	; 42
   16a2e:	a0 e0       	ldi	r26, 0x00	; 0
   16a30:	81 83       	std	Z+1, r24	; 0x01
   16a32:	92 83       	std	Z+2, r25	; 0x02
   16a34:	a3 83       	std	Z+3, r26	; 0x03
   16a36:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a3a:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16a3e:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16a42:	81 81       	ldd	r24, Z+1	; 0x01
   16a44:	90 e0       	ldi	r25, 0x00	; 0
   16a46:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
    return(0);
}
   16a4a:	80 e0       	ldi	r24, 0x00	; 0
   16a4c:	90 e0       	ldi	r25, 0x00	; 0
   16a4e:	cd b7       	in	r28, 0x3d	; 61
   16a50:	de b7       	in	r29, 0x3e	; 62
   16a52:	2f 96       	adiw	r28, 0x0f	; 15
   16a54:	e6 e0       	ldi	r30, 0x06	; 6
   16a56:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00016a5a <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16a5a:	ab e0       	ldi	r26, 0x0B	; 11
   16a5c:	b0 e0       	ldi	r27, 0x00	; 0
   16a5e:	e3 e3       	ldi	r30, 0x33	; 51
   16a60:	f5 eb       	ldi	r31, 0xB5	; 181
   16a62:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   16a66:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16a68:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   16a6c:	90 e0       	ldi	r25, 0x00	; 0
   16a6e:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   16a72:	20 91 de 1e 	lds	r18, 0x1EDE	; 0x801ede <talking>
   16a76:	d0 e0       	ldi	r29, 0x00	; 0
   16a78:	89 2b       	or	r24, r25
   16a7a:	d1 f0       	breq	.+52     	; 0x16ab0 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16a7c:	82 2f       	mov	r24, r18
   16a7e:	90 e0       	ldi	r25, 0x00	; 0
   16a80:	ed b7       	in	r30, 0x3d	; 61
   16a82:	fe b7       	in	r31, 0x3e	; 62
   16a84:	93 87       	std	Z+11, r25	; 0x0b
   16a86:	82 87       	std	Z+10, r24	; 0x0a
   16a88:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   16a8c:	90 e0       	ldi	r25, 0x00	; 0
   16a8e:	91 87       	std	Z+9, r25	; 0x09
   16a90:	80 87       	std	Z+8, r24	; 0x08
   16a92:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16a96:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16a9a:	80 81       	ld	r24, Z
   16a9c:	90 e0       	ldi	r25, 0x00	; 0
   16a9e:	ed b7       	in	r30, 0x3d	; 61
   16aa0:	fe b7       	in	r31, 0x3e	; 62
   16aa2:	97 83       	std	Z+7, r25	; 0x07
   16aa4:	86 83       	std	Z+6, r24	; 0x06
   16aa6:	d5 83       	std	Z+5, r29	; 0x05
   16aa8:	c4 83       	std	Z+4, r28	; 0x04
   16aaa:	8e e3       	ldi	r24, 0x3E	; 62
   16aac:	9a e2       	ldi	r25, 0x2A	; 42
   16aae:	43 c0       	rjmp	.+134    	; 0x16b36 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16ab0:	82 2f       	mov	r24, r18
   16ab2:	90 e0       	ldi	r25, 0x00	; 0
   16ab4:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   16ab8:	20 91 e0 1e 	lds	r18, 0x1EE0	; 0x801ee0 <listening>
   16abc:	40 91 de 1e 	lds	r20, 0x1EDE	; 0x801ede <talking>
   16ac0:	a0 91 53 19 	lds	r26, 0x1953	; 0x801953 <AMIGOs>
   16ac4:	b0 91 54 19 	lds	r27, 0x1954	; 0x801954 <AMIGOs+0x1>
   16ac8:	89 2b       	or	r24, r25
   16aca:	89 f0       	breq	.+34     	; 0x16aee <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16acc:	50 e0       	ldi	r21, 0x00	; 0
   16ace:	ed b7       	in	r30, 0x3d	; 61
   16ad0:	fe b7       	in	r31, 0x3e	; 62
   16ad2:	53 87       	std	Z+11, r21	; 0x0b
   16ad4:	42 87       	std	Z+10, r20	; 0x0a
   16ad6:	30 e0       	ldi	r19, 0x00	; 0
   16ad8:	31 87       	std	Z+9, r19	; 0x09
   16ada:	20 87       	std	Z+8, r18	; 0x08
   16adc:	8c 91       	ld	r24, X
   16ade:	90 e0       	ldi	r25, 0x00	; 0
   16ae0:	97 83       	std	Z+7, r25	; 0x07
   16ae2:	86 83       	std	Z+6, r24	; 0x06
   16ae4:	d5 83       	std	Z+5, r29	; 0x05
   16ae6:	c4 83       	std	Z+4, r28	; 0x04
   16ae8:	8e ee       	ldi	r24, 0xEE	; 238
   16aea:	99 e2       	ldi	r25, 0x29	; 41
   16aec:	24 c0       	rjmp	.+72     	; 0x16b36 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16aee:	4f 35       	cpi	r20, 0x5F	; 95
   16af0:	91 f4       	brne	.+36     	; 0x16b16 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16af2:	8f e5       	ldi	r24, 0x5F	; 95
   16af4:	90 e0       	ldi	r25, 0x00	; 0
   16af6:	ed b7       	in	r30, 0x3d	; 61
   16af8:	fe b7       	in	r31, 0x3e	; 62
   16afa:	93 87       	std	Z+11, r25	; 0x0b
   16afc:	82 87       	std	Z+10, r24	; 0x0a
   16afe:	30 e0       	ldi	r19, 0x00	; 0
   16b00:	31 87       	std	Z+9, r19	; 0x09
   16b02:	20 87       	std	Z+8, r18	; 0x08
   16b04:	8c 91       	ld	r24, X
   16b06:	90 e0       	ldi	r25, 0x00	; 0
   16b08:	97 83       	std	Z+7, r25	; 0x07
   16b0a:	86 83       	std	Z+6, r24	; 0x06
   16b0c:	d5 83       	std	Z+5, r29	; 0x05
   16b0e:	c4 83       	std	Z+4, r28	; 0x04
   16b10:	8e e9       	ldi	r24, 0x9E	; 158
   16b12:	99 e2       	ldi	r25, 0x29	; 41
   16b14:	10 c0       	rjmp	.+32     	; 0x16b36 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b16:	50 e0       	ldi	r21, 0x00	; 0
   16b18:	ed b7       	in	r30, 0x3d	; 61
   16b1a:	fe b7       	in	r31, 0x3e	; 62
   16b1c:	53 87       	std	Z+11, r21	; 0x0b
   16b1e:	42 87       	std	Z+10, r20	; 0x0a
   16b20:	30 e0       	ldi	r19, 0x00	; 0
   16b22:	31 87       	std	Z+9, r19	; 0x09
   16b24:	20 87       	std	Z+8, r18	; 0x08
   16b26:	8c 91       	ld	r24, X
   16b28:	90 e0       	ldi	r25, 0x00	; 0
   16b2a:	97 83       	std	Z+7, r25	; 0x07
   16b2c:	86 83       	std	Z+6, r24	; 0x06
   16b2e:	d5 83       	std	Z+5, r29	; 0x05
   16b30:	c4 83       	std	Z+4, r28	; 0x04
   16b32:	8d e4       	ldi	r24, 0x4D	; 77
   16b34:	99 e2       	ldi	r25, 0x29	; 41
   16b36:	a0 e0       	ldi	r26, 0x00	; 0
   16b38:	81 83       	std	Z+1, r24	; 0x01
   16b3a:	92 83       	std	Z+2, r25	; 0x02
   16b3c:	a3 83       	std	Z+3, r26	; 0x03
   16b3e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16b42:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16b46:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16b4a:	81 81       	ldd	r24, Z+1	; 0x01
   16b4c:	90 e0       	ldi	r25, 0x00	; 0
   16b4e:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
    return(0);
}
   16b52:	80 e0       	ldi	r24, 0x00	; 0
   16b54:	90 e0       	ldi	r25, 0x00	; 0
   16b56:	cd b7       	in	r28, 0x3d	; 61
   16b58:	de b7       	in	r29, 0x3e	; 62
   16b5a:	2b 96       	adiw	r28, 0x0b	; 11
   16b5c:	e2 e0       	ldi	r30, 0x02	; 2
   16b5e:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00016b62 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16b62:	8f 30       	cpi	r24, 0x0F	; 15
   16b64:	29 f0       	breq	.+10     	; 0x16b70 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16b66:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16b6a:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16b6e:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16b70:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16b74:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16b78:	81 81       	ldd	r24, Z+1	; 0x01
   16b7a:	88 23       	and	r24, r24
   16b7c:	29 f0       	breq	.+10     	; 0x16b88 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16b7e:	87 81       	ldd	r24, Z+7	; 0x07
   16b80:	90 85       	ldd	r25, Z+8	; 0x08
   16b82:	80 64       	ori	r24, 0x40	; 64
   16b84:	90 87       	std	Z+8, r25	; 0x08
   16b86:	87 83       	std	Z+7, r24	; 0x07
   16b88:	08 95       	ret

00016b8a <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16b8a:	ac e1       	ldi	r26, 0x1C	; 28
   16b8c:	b0 e0       	ldi	r27, 0x00	; 0
   16b8e:	eb ec       	ldi	r30, 0xCB	; 203
   16b90:	f5 eb       	ldi	r31, 0xB5	; 181
   16b92:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
   16b96:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16b98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b9c:	85 ff       	sbrs	r24, 5
   16b9e:	16 c0       	rjmp	.+44     	; 0x16bcc <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16ba0:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   16ba4:	90 e0       	ldi	r25, 0x00	; 0
   16ba6:	ed b7       	in	r30, 0x3d	; 61
   16ba8:	fe b7       	in	r31, 0x3e	; 62
   16baa:	91 87       	std	Z+9, r25	; 0x09
   16bac:	80 87       	std	Z+8, r24	; 0x08
   16bae:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   16bb2:	90 e0       	ldi	r25, 0x00	; 0
   16bb4:	97 83       	std	Z+7, r25	; 0x07
   16bb6:	86 83       	std	Z+6, r24	; 0x06
   16bb8:	f5 82       	std	Z+5, r15	; 0x05
   16bba:	e4 82       	std	Z+4, r14	; 0x04
   16bbc:	8b e1       	ldi	r24, 0x1B	; 27
   16bbe:	99 e2       	ldi	r25, 0x29	; 41
   16bc0:	a0 e0       	ldi	r26, 0x00	; 0
   16bc2:	81 83       	std	Z+1, r24	; 0x01
   16bc4:	92 83       	std	Z+2, r25	; 0x02
   16bc6:	a3 83       	std	Z+3, r26	; 0x03
   16bc8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16bcc:	fe e7       	ldi	r31, 0x7E	; 126
   16bce:	ef 16       	cp	r14, r31
   16bd0:	f1 04       	cpc	r15, r1
   16bd2:	f1 f5       	brne	.+124    	; 0x16c50 <Amigo_Command+0xc6>
   16bd4:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   16bd8:	90 e0       	ldi	r25, 0x00	; 0
   16bda:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   16bde:	89 2b       	or	r24, r25
   16be0:	09 f4       	brne	.+2      	; 0x16be4 <Amigo_Command+0x5a>
   16be2:	86 c0       	rjmp	.+268    	; 0x16cf0 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16be4:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16be8:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16bec:	81 81       	ldd	r24, Z+1	; 0x01
   16bee:	90 e0       	ldi	r25, 0x00	; 0
   16bf0:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
        status = EOI_FLAG;
   16bf4:	80 e0       	ldi	r24, 0x00	; 0
   16bf6:	91 e0       	ldi	r25, 0x01	; 1
   16bf8:	9c 8f       	std	Y+28, r25	; 0x1c
   16bfa:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16bfc:	ae 01       	movw	r20, r28
   16bfe:	45 5e       	subi	r20, 0xE5	; 229
   16c00:	5f 4f       	sbci	r21, 0xFF	; 255
   16c02:	60 e0       	ldi	r22, 0x00	; 0
   16c04:	72 e0       	ldi	r23, 0x02	; 2
   16c06:	8a ed       	ldi	r24, 0xDA	; 218
   16c08:	9c e1       	ldi	r25, 0x1C	; 28
   16c0a:	0e 94 16 8a 	call	0x1142c	; 0x1142c <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16c0e:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16c12:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16c16:	81 81       	ldd	r24, Z+1	; 0x01
   16c18:	90 e0       	ldi	r25, 0x00	; 0
   16c1a:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16c1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16c20:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16c22:	88 27       	eor	r24, r24
   16c24:	90 7d       	andi	r25, 0xD0	; 208
   16c26:	89 2b       	or	r24, r25
   16c28:	09 f4       	brne	.+2      	; 0x16c2c <Amigo_Command+0xa2>
   16c2a:	89 c2       	rjmp	.+1298   	; 0x1713e <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16c2c:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16c30:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16c34:	81 e0       	ldi	r24, 0x01	; 1
   16c36:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16c38:	87 81       	ldd	r24, Z+7	; 0x07
   16c3a:	90 85       	ldd	r25, Z+8	; 0x08
   16c3c:	80 62       	ori	r24, 0x20	; 32
   16c3e:	90 87       	std	Z+8, r25	; 0x08
   16c40:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16c42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c46:	80 ff       	sbrs	r24, 0
   16c48:	7a c2       	rjmp	.+1268   	; 0x1713e <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16c4a:	89 ef       	ldi	r24, 0xF9	; 249
   16c4c:	98 e2       	ldi	r25, 0x28	; 40
   16c4e:	8e c0       	rjmp	.+284    	; 0x16d6c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16c50:	ff e7       	ldi	r31, 0x7F	; 127
   16c52:	ef 16       	cp	r14, r31
   16c54:	f1 04       	cpc	r15, r1
   16c56:	09 f0       	breq	.+2      	; 0x16c5a <Amigo_Command+0xd0>
   16c58:	4b c0       	rjmp	.+150    	; 0x16cf0 <Amigo_Command+0x166>
   16c5a:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   16c5e:	90 e0       	ldi	r25, 0x00	; 0
   16c60:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   16c64:	89 2b       	or	r24, r25
   16c66:	09 f4       	brne	.+2      	; 0x16c6a <Amigo_Command+0xe0>
   16c68:	43 c0       	rjmp	.+134    	; 0x16cf0 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16c6a:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16c6e:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16c72:	81 81       	ldd	r24, Z+1	; 0x01
   16c74:	90 e0       	ldi	r25, 0x00	; 0
   16c76:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16c7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c7e:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16c80:	0e 94 ed 83 	call	0x107da	; 0x107da <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16c84:	80 e0       	ldi	r24, 0x00	; 0
   16c86:	91 e0       	ldi	r25, 0x01	; 1
   16c88:	9c 8f       	std	Y+28, r25	; 0x1c
   16c8a:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16c8c:	ae 01       	movw	r20, r28
   16c8e:	45 5e       	subi	r20, 0xE5	; 229
   16c90:	5f 4f       	sbci	r21, 0xFF	; 255
   16c92:	60 e0       	ldi	r22, 0x00	; 0
   16c94:	72 e0       	ldi	r23, 0x02	; 2
   16c96:	8a ed       	ldi	r24, 0xDA	; 218
   16c98:	9c e1       	ldi	r25, 0x1C	; 28
   16c9a:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16c9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ca2:	87 ff       	sbrs	r24, 7
   16ca4:	04 c0       	rjmp	.+8      	; 0x16cae <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16ca6:	81 ed       	ldi	r24, 0xD1	; 209
   16ca8:	95 e1       	ldi	r25, 0x15	; 21
   16caa:	0e 94 ff 83 	call	0x107fe	; 0x107fe <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16cae:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16cb2:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16cb6:	81 81       	ldd	r24, Z+1	; 0x01
   16cb8:	90 e0       	ldi	r25, 0x00	; 0
   16cba:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16cc2:	88 27       	eor	r24, r24
   16cc4:	90 7d       	andi	r25, 0xD0	; 208
   16cc6:	89 2b       	or	r24, r25
   16cc8:	09 f4       	brne	.+2      	; 0x16ccc <Amigo_Command+0x142>
   16cca:	39 c2       	rjmp	.+1138   	; 0x1713e <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16ccc:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16cd0:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16cd4:	81 e0       	ldi	r24, 0x01	; 1
   16cd6:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16cd8:	87 81       	ldd	r24, Z+7	; 0x07
   16cda:	90 85       	ldd	r25, Z+8	; 0x08
   16cdc:	80 62       	ori	r24, 0x20	; 32
   16cde:	90 87       	std	Z+8, r25	; 0x08
   16ce0:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16ce2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ce6:	80 ff       	sbrs	r24, 0
   16ce8:	2a c2       	rjmp	.+1108   	; 0x1713e <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16cea:	88 ed       	ldi	r24, 0xD8	; 216
   16cec:	98 e2       	ldi	r25, 0x28	; 40
   16cee:	3e c0       	rjmp	.+124    	; 0x16d6c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16cf0:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   16cf4:	90 e0       	ldi	r25, 0x00	; 0
   16cf6:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   16cfa:	89 2b       	or	r24, r25
   16cfc:	19 f4       	brne	.+6      	; 0x16d04 <Amigo_Command+0x17a>
        return(0);
   16cfe:	80 e0       	ldi	r24, 0x00	; 0
   16d00:	90 e0       	ldi	r25, 0x00	; 0
   16d02:	25 c2       	rjmp	.+1098   	; 0x1714e <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16d04:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   16d08:	90 e0       	ldi	r25, 0x00	; 0
   16d0a:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   16d0e:	89 2b       	or	r24, r25
   16d10:	b1 f7       	brne	.-20     	; 0x16cfe <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d12:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   16d16:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   16d1a:	81 81       	ldd	r24, Z+1	; 0x01
   16d1c:	90 e0       	ldi	r25, 0x00	; 0
   16d1e:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16d22:	80 e0       	ldi	r24, 0x00	; 0
   16d24:	91 e0       	ldi	r25, 0x01	; 1
   16d26:	9c 8f       	std	Y+28, r25	; 0x1c
   16d28:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d2a:	ae 01       	movw	r20, r28
   16d2c:	45 5e       	subi	r20, 0xE5	; 229
   16d2e:	5f 4f       	sbci	r21, 0xFF	; 255
   16d30:	60 e0       	ldi	r22, 0x00	; 0
   16d32:	72 e0       	ldi	r23, 0x02	; 2
   16d34:	8a ed       	ldi	r24, 0xDA	; 218
   16d36:	9c e1       	ldi	r25, 0x1C	; 28
   16d38:	0e 94 74 89 	call	0x112e8	; 0x112e8 <gpib_read_str>
   16d3c:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16d42:	88 27       	eor	r24, r24
   16d44:	90 7d       	andi	r25, 0xD0	; 208
   16d46:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16d4a:	89 2b       	or	r24, r25
   16d4c:	c1 f0       	breq	.+48     	; 0x16d7e <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16d4e:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16d52:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16d56:	81 e0       	ldi	r24, 0x01	; 1
   16d58:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16d5a:	87 81       	ldd	r24, Z+7	; 0x07
   16d5c:	90 85       	ldd	r25, Z+8	; 0x08
   16d5e:	80 62       	ori	r24, 0x20	; 32
   16d60:	90 87       	std	Z+8, r25	; 0x08
   16d62:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16d64:	20 ff       	sbrs	r18, 0
   16d66:	eb c1       	rjmp	.+982    	; 0x1713e <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16d68:	87 eb       	ldi	r24, 0xB7	; 183
   16d6a:	98 e2       	ldi	r25, 0x28	; 40
   16d6c:	a0 e0       	ldi	r26, 0x00	; 0
   16d6e:	ed b7       	in	r30, 0x3d	; 61
   16d70:	fe b7       	in	r31, 0x3e	; 62
   16d72:	81 83       	std	Z+1, r24	; 0x01
   16d74:	92 83       	std	Z+2, r25	; 0x02
   16d76:	a3 83       	std	Z+3, r26	; 0x03
   16d78:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   16d7c:	e0 c1       	rjmp	.+960    	; 0x1713e <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d7e:	25 ff       	sbrs	r18, 5
   16d80:	0e c0       	rjmp	.+28     	; 0x16d9e <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16d82:	ed b7       	in	r30, 0x3d	; 61
   16d84:	fe b7       	in	r31, 0x3e	; 62
   16d86:	17 83       	std	Z+7, r17	; 0x07
   16d88:	06 83       	std	Z+6, r16	; 0x06
   16d8a:	f5 82       	std	Z+5, r15	; 0x05
   16d8c:	e4 82       	std	Z+4, r14	; 0x04
   16d8e:	88 e8       	ldi	r24, 0x88	; 136
   16d90:	98 e2       	ldi	r25, 0x28	; 40
   16d92:	a0 e0       	ldi	r26, 0x00	; 0
   16d94:	81 83       	std	Z+1, r24	; 0x01
   16d96:	92 83       	std	Z+2, r25	; 0x02
   16d98:	a3 83       	std	Z+3, r26	; 0x03
   16d9a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            secondary, len);
#endif
    if(!len)
   16d9e:	01 15       	cp	r16, r1
   16da0:	11 05       	cpc	r17, r1
   16da2:	61 f4       	brne	.+24     	; 0x16dbc <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16da4:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16da8:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16dac:	81 e0       	ldi	r24, 0x01	; 1
   16dae:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16db0:	87 81       	ldd	r24, Z+7	; 0x07
   16db2:	90 85       	ldd	r25, Z+8	; 0x08
   16db4:	80 62       	ori	r24, 0x20	; 32
   16db6:	90 87       	std	Z+8, r25	; 0x08
   16db8:	87 83       	std	Z+7, r24	; 0x07
   16dba:	c1 c1       	rjmp	.+898    	; 0x1713e <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16dbc:	60 91 da 1c 	lds	r22, 0x1CDA	; 0x801cda <gpib_iobuff>

    if (secondary == 0x68)
   16dc0:	f8 e6       	ldi	r31, 0x68	; 104
   16dc2:	ef 16       	cp	r14, r31
   16dc4:	f1 04       	cpc	r15, r1
   16dc6:	09 f0       	breq	.+2      	; 0x16dca <Amigo_Command+0x240>
   16dc8:	28 c1       	rjmp	.+592    	; 0x1701a <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16dca:	61 11       	cpse	r22, r1
   16dcc:	2e c0       	rjmp	.+92     	; 0x16e2a <Amigo_Command+0x2a0>
   16dce:	02 30       	cpi	r16, 0x02	; 2
   16dd0:	11 05       	cpc	r17, r1
   16dd2:	09 f0       	breq	.+2      	; 0x16dd6 <Amigo_Command+0x24c>
   16dd4:	b9 c1       	rjmp	.+882    	; 0x17148 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16dd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dda:	85 ff       	sbrs	r24, 5
   16ddc:	0a c0       	rjmp	.+20     	; 0x16df2 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16dde:	88 e6       	ldi	r24, 0x68	; 104
   16de0:	98 e2       	ldi	r25, 0x28	; 40
   16de2:	a0 e0       	ldi	r26, 0x00	; 0
   16de4:	ed b7       	in	r30, 0x3d	; 61
   16de6:	fe b7       	in	r31, 0x3e	; 62
   16de8:	81 83       	std	Z+1, r24	; 0x01
   16dea:	92 83       	std	Z+2, r25	; 0x02
   16dec:	a3 83       	std	Z+3, r26	; 0x03
   16dee:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16df2:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16df6:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16dfa:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16dfc:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16dfe:	10 86       	std	Z+8, r1	; 0x08
   16e00:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16e02:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16e04:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16e08:	98 2f       	mov	r25, r24
   16e0a:	92 95       	swap	r25
   16e0c:	96 95       	lsr	r25
   16e0e:	96 95       	lsr	r25
   16e10:	93 70       	andi	r25, 0x03	; 3
   16e12:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16e14:	8f 73       	andi	r24, 0x3F	; 63
   16e16:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16e18:	ce 01       	movw	r24, r28
   16e1a:	0a 96       	adiw	r24, 0x0a	; 10
   16e1c:	d1 d9       	rcall	.-3166   	; 0x161c0 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16e1e:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16e22:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16e26:	85 e0       	ldi	r24, 0x05	; 5
   16e28:	19 c1       	rjmp	.+562    	; 0x1705c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16e2a:	62 30       	cpi	r22, 0x02	; 2
   16e2c:	09 f0       	breq	.+2      	; 0x16e30 <Amigo_Command+0x2a6>
   16e2e:	3f c0       	rjmp	.+126    	; 0x16eae <Amigo_Command+0x324>
   16e30:	05 30       	cpi	r16, 0x05	; 5
   16e32:	11 05       	cpc	r17, r1
   16e34:	d1 f4       	brne	.+52     	; 0x16e6a <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e3a:	85 ff       	sbrs	r24, 5
   16e3c:	0a c0       	rjmp	.+20     	; 0x16e52 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16e3e:	84 e5       	ldi	r24, 0x54	; 84
   16e40:	98 e2       	ldi	r25, 0x28	; 40
   16e42:	a0 e0       	ldi	r26, 0x00	; 0
   16e44:	ed b7       	in	r30, 0x3d	; 61
   16e46:	fe b7       	in	r31, 0x3e	; 62
   16e48:	81 83       	std	Z+1, r24	; 0x01
   16e4a:	92 83       	std	Z+2, r25	; 0x02
   16e4c:	a3 83       	std	Z+3, r26	; 0x03
   16e4e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16e52:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16e56:	85 de       	rcall	.-758    	; 0x16b62 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16e58:	80 91 dc 1c 	lds	r24, 0x1CDC	; 0x801cdc <gpib_iobuff+0x2>
   16e5c:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16e5e:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_iobuff+0x3>
   16e62:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16e64:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x4>
   16e68:	1d c0       	rjmp	.+58     	; 0x16ea4 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16e6a:	06 30       	cpi	r16, 0x06	; 6
   16e6c:	11 05       	cpc	r17, r1
   16e6e:	09 f0       	breq	.+2      	; 0x16e72 <Amigo_Command+0x2e8>
   16e70:	6b c1       	rjmp	.+726    	; 0x17148 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e76:	85 ff       	sbrs	r24, 5
   16e78:	0a c0       	rjmp	.+20     	; 0x16e8e <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16e7a:	80 e4       	ldi	r24, 0x40	; 64
   16e7c:	98 e2       	ldi	r25, 0x28	; 40
   16e7e:	a0 e0       	ldi	r26, 0x00	; 0
   16e80:	ed b7       	in	r30, 0x3d	; 61
   16e82:	fe b7       	in	r31, 0x3e	; 62
   16e84:	81 83       	std	Z+1, r24	; 0x01
   16e86:	92 83       	std	Z+2, r25	; 0x02
   16e88:	a3 83       	std	Z+3, r26	; 0x03
   16e8a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16e8e:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16e92:	67 de       	rcall	.-818    	; 0x16b62 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16e94:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_iobuff+0x3>
   16e98:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16e9a:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x4>
   16e9e:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16ea0:	80 91 df 1c 	lds	r24, 0x1CDF	; 0x801cdf <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16ea4:	8f 87       	std	Y+15, r24	; 0x0f
   16ea6:	ce 01       	movw	r24, r28
   16ea8:	0a 96       	adiw	r24, 0x0a	; 10
   16eaa:	8a d9       	rcall	.-3308   	; 0x161c0 <amigo_seek>
   16eac:	d8 c0       	rjmp	.+432    	; 0x1705e <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16eae:	63 30       	cpi	r22, 0x03	; 3
   16eb0:	e9 f4       	brne	.+58     	; 0x16eec <Amigo_Command+0x362>
   16eb2:	02 30       	cpi	r16, 0x02	; 2
   16eb4:	11 05       	cpc	r17, r1
   16eb6:	09 f0       	breq	.+2      	; 0x16eba <Amigo_Command+0x330>
   16eb8:	47 c1       	rjmp	.+654    	; 0x17148 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16eba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ebe:	85 ff       	sbrs	r24, 5
   16ec0:	0a c0       	rjmp	.+20     	; 0x16ed6 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16ec2:	87 e1       	ldi	r24, 0x17	; 23
   16ec4:	98 e2       	ldi	r25, 0x28	; 40
   16ec6:	a0 e0       	ldi	r26, 0x00	; 0
   16ec8:	ed b7       	in	r30, 0x3d	; 61
   16eca:	fe b7       	in	r31, 0x3e	; 62
   16ecc:	81 83       	std	Z+1, r24	; 0x01
   16ece:	92 83       	std	Z+2, r25	; 0x02
   16ed0:	a3 83       	std	Z+3, r26	; 0x03
   16ed2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16ed6:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
            amigo_request_status();
   16eda:	43 de       	rcall	.-890    	; 0x16b62 <amigo_check_unit>
   16edc:	3d d8       	rcall	.-3974   	; 0x15f58 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16ede:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16ee2:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16ee6:	83 e0       	ldi	r24, 0x03	; 3
   16ee8:	80 83       	st	Z, r24
   16eea:	29 c1       	rjmp	.+594    	; 0x1713e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16eec:	65 30       	cpi	r22, 0x05	; 5
   16eee:	d9 f4       	brne	.+54     	; 0x16f26 <Amigo_Command+0x39c>
   16ef0:	02 30       	cpi	r16, 0x02	; 2
   16ef2:	11 05       	cpc	r17, r1
   16ef4:	09 f0       	breq	.+2      	; 0x16ef8 <Amigo_Command+0x36e>
   16ef6:	28 c1       	rjmp	.+592    	; 0x17148 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ef8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16efc:	85 ff       	sbrs	r24, 5
   16efe:	0a c0       	rjmp	.+20     	; 0x16f14 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   16f00:	86 ef       	ldi	r24, 0xF6	; 246
   16f02:	97 e2       	ldi	r25, 0x27	; 39
   16f04:	a0 e0       	ldi	r26, 0x00	; 0
   16f06:	ed b7       	in	r30, 0x3d	; 61
   16f08:	fe b7       	in	r31, 0x3e	; 62
   16f0a:	81 83       	std	Z+1, r24	; 0x01
   16f0c:	92 83       	std	Z+2, r25	; 0x02
   16f0e:	a3 83       	std	Z+3, r26	; 0x03
   16f10:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f14:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16f18:	24 de       	rcall	.-952    	; 0x16b62 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16f1a:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16f1e:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16f22:	86 e0       	ldi	r24, 0x06	; 6
   16f24:	e7 c0       	rjmp	.+462    	; 0x170f4 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   16f26:	67 30       	cpi	r22, 0x07	; 7
   16f28:	f9 f4       	brne	.+62     	; 0x16f68 <Amigo_Command+0x3de>
   16f2a:	04 30       	cpi	r16, 0x04	; 4
   16f2c:	11 05       	cpc	r17, r1
   16f2e:	09 f0       	breq	.+2      	; 0x16f32 <Amigo_Command+0x3a8>
   16f30:	0b c1       	rjmp	.+534    	; 0x17148 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f36:	85 ff       	sbrs	r24, 5
   16f38:	0a c0       	rjmp	.+20     	; 0x16f4e <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   16f3a:	86 ee       	ldi	r24, 0xE6	; 230
   16f3c:	97 e2       	ldi	r25, 0x27	; 39
   16f3e:	a0 e0       	ldi	r26, 0x00	; 0
   16f40:	ed b7       	in	r30, 0x3d	; 61
   16f42:	fe b7       	in	r31, 0x3e	; 62
   16f44:	81 83       	std	Z+1, r24	; 0x01
   16f46:	92 83       	std	Z+2, r25	; 0x02
   16f48:	a3 83       	std	Z+3, r26	; 0x03
   16f4a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f4e:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16f52:	07 de       	rcall	.-1010   	; 0x16b62 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   16f54:	80 91 dc 1c 	lds	r24, 0x1CDC	; 0x801cdc <gpib_iobuff+0x2>
   16f58:	90 e0       	ldi	r25, 0x00	; 0
   16f5a:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   16f5c:	88 27       	eor	r24, r24
   16f5e:	20 91 dd 1c 	lds	r18, 0x1CDD	; 0x801cdd <gpib_iobuff+0x3>
   16f62:	82 2b       	or	r24, r18
   16f64:	58 d9       	rcall	.-3408   	; 0x16216 <amigo_verify>
   16f66:	f3 c0       	rjmp	.+486    	; 0x1714e <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   16f68:	68 30       	cpi	r22, 0x08	; 8
   16f6a:	d9 f4       	brne	.+54     	; 0x16fa2 <Amigo_Command+0x418>
   16f6c:	02 30       	cpi	r16, 0x02	; 2
   16f6e:	11 05       	cpc	r17, r1
   16f70:	09 f0       	breq	.+2      	; 0x16f74 <Amigo_Command+0x3ea>
   16f72:	ea c0       	rjmp	.+468    	; 0x17148 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f78:	85 ff       	sbrs	r24, 5
   16f7a:	0a c0       	rjmp	.+20     	; 0x16f90 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   16f7c:	84 ec       	ldi	r24, 0xC4	; 196
   16f7e:	97 e2       	ldi	r25, 0x27	; 39
   16f80:	a0 e0       	ldi	r26, 0x00	; 0
   16f82:	ed b7       	in	r30, 0x3d	; 61
   16f84:	fe b7       	in	r31, 0x3e	; 62
   16f86:	81 83       	std	Z+1, r24	; 0x01
   16f88:	92 83       	std	Z+2, r25	; 0x02
   16f8a:	a3 83       	std	Z+3, r26	; 0x03
   16f8c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f90:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16f94:	e6 dd       	rcall	.-1076   	; 0x16b62 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   16f96:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16f9a:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16f9e:	88 e0       	ldi	r24, 0x08	; 8
   16fa0:	5d c0       	rjmp	.+186    	; 0x1705c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   16fa2:	86 2f       	mov	r24, r22
   16fa4:	8f 7d       	andi	r24, 0xDF	; 223
   16fa6:	8b 30       	cpi	r24, 0x0B	; 11
   16fa8:	d9 f4       	brne	.+54     	; 0x16fe0 <Amigo_Command+0x456>
   16faa:	02 30       	cpi	r16, 0x02	; 2
   16fac:	11 05       	cpc	r17, r1
   16fae:	09 f0       	breq	.+2      	; 0x16fb2 <Amigo_Command+0x428>
   16fb0:	cb c0       	rjmp	.+406    	; 0x17148 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fb6:	85 ff       	sbrs	r24, 5
   16fb8:	0a c0       	rjmp	.+20     	; 0x16fce <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   16fba:	88 ea       	ldi	r24, 0xA8	; 168
   16fbc:	97 e2       	ldi	r25, 0x27	; 39
   16fbe:	a0 e0       	ldi	r26, 0x00	; 0
   16fc0:	ed b7       	in	r30, 0x3d	; 61
   16fc2:	fe b7       	in	r31, 0x3e	; 62
   16fc4:	81 83       	std	Z+1, r24	; 0x01
   16fc6:	92 83       	std	Z+2, r25	; 0x02
   16fc8:	a3 83       	std	Z+3, r26	; 0x03
   16fca:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fce:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   16fd2:	c7 dd       	rcall	.-1138   	; 0x16b62 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   16fd4:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   16fd8:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   16fdc:	8a e0       	ldi	r24, 0x0A	; 10
   16fde:	3e c0       	rjmp	.+124    	; 0x1705c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   16fe0:	64 31       	cpi	r22, 0x14	; 20
   16fe2:	09 f0       	breq	.+2      	; 0x16fe6 <Amigo_Command+0x45c>
   16fe4:	b1 c0       	rjmp	.+354    	; 0x17148 <Amigo_Command+0x5be>
   16fe6:	02 30       	cpi	r16, 0x02	; 2
   16fe8:	11 05       	cpc	r17, r1
   16fea:	09 f0       	breq	.+2      	; 0x16fee <Amigo_Command+0x464>
   16fec:	ad c0       	rjmp	.+346    	; 0x17148 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ff2:	85 ff       	sbrs	r24, 5
   16ff4:	0a c0       	rjmp	.+20     	; 0x1700a <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   16ff6:	8f e7       	ldi	r24, 0x7F	; 127
   16ff8:	97 e2       	ldi	r25, 0x27	; 39
   16ffa:	a0 e0       	ldi	r26, 0x00	; 0
   16ffc:	ed b7       	in	r30, 0x3d	; 61
   16ffe:	fe b7       	in	r31, 0x3e	; 62
   17000:	81 83       	std	Z+1, r24	; 0x01
   17002:	92 83       	std	Z+2, r25	; 0x02
   17004:	a3 83       	std	Z+3, r26	; 0x03
   17006:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
            amigo_request_logical_address();
   1700a:	0e 94 9e af 	call	0x15f3c	; 0x15f3c <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1700e:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   17012:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   17016:	84 e0       	ldi	r24, 0x04	; 4
   17018:	21 c0       	rjmp	.+66     	; 0x1705c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1701a:	f9 e6       	ldi	r31, 0x69	; 105
   1701c:	ef 16       	cp	r14, r31
   1701e:	f1 04       	cpc	r15, r1
   17020:	39 f5       	brne	.+78     	; 0x17070 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17022:	68 30       	cpi	r22, 0x08	; 8
   17024:	09 f0       	breq	.+2      	; 0x17028 <Amigo_Command+0x49e>
   17026:	90 c0       	rjmp	.+288    	; 0x17148 <Amigo_Command+0x5be>
   17028:	02 30       	cpi	r16, 0x02	; 2
   1702a:	11 05       	cpc	r17, r1
   1702c:	09 f0       	breq	.+2      	; 0x17030 <Amigo_Command+0x4a6>
   1702e:	8c c0       	rjmp	.+280    	; 0x17148 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17030:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17034:	85 ff       	sbrs	r24, 5
   17036:	0a c0       	rjmp	.+20     	; 0x1704c <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   17038:	8f e5       	ldi	r24, 0x5F	; 95
   1703a:	97 e2       	ldi	r25, 0x27	; 39
   1703c:	a0 e0       	ldi	r26, 0x00	; 0
   1703e:	ed b7       	in	r30, 0x3d	; 61
   17040:	fe b7       	in	r31, 0x3e	; 62
   17042:	81 83       	std	Z+1, r24	; 0x01
   17044:	92 83       	std	Z+2, r25	; 0x02
   17046:	a3 83       	std	Z+3, r26	; 0x03
   17048:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1704c:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   17050:	88 dd       	rcall	.-1264   	; 0x16b62 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17052:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   17056:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   1705a:	89 e0       	ldi	r24, 0x09	; 9
   1705c:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1705e:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   17062:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   17066:	81 81       	ldd	r24, Z+1	; 0x01
   17068:	90 e0       	ldi	r25, 0x00	; 0
   1706a:	0e 94 c7 84 	call	0x1098e	; 0x1098e <gpib_enable_PPR>
   1706e:	67 c0       	rjmp	.+206    	; 0x1713e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17070:	fa e6       	ldi	r31, 0x6A	; 106
   17072:	ef 16       	cp	r14, r31
   17074:	f1 04       	cpc	r15, r1
   17076:	09 f0       	breq	.+2      	; 0x1707a <Amigo_Command+0x4f0>
   17078:	40 c0       	rjmp	.+128    	; 0x170fa <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   1707a:	68 30       	cpi	r22, 0x08	; 8
   1707c:	f1 f4       	brne	.+60     	; 0x170ba <Amigo_Command+0x530>
   1707e:	02 30       	cpi	r16, 0x02	; 2
   17080:	11 05       	cpc	r17, r1
   17082:	09 f0       	breq	.+2      	; 0x17086 <Amigo_Command+0x4fc>
   17084:	61 c0       	rjmp	.+194    	; 0x17148 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17086:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1708a:	85 ff       	sbrs	r24, 5
   1708c:	0a c0       	rjmp	.+20     	; 0x170a2 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1708e:	84 e3       	ldi	r24, 0x34	; 52
   17090:	97 e2       	ldi	r25, 0x27	; 39
   17092:	a0 e0       	ldi	r26, 0x00	; 0
   17094:	ed b7       	in	r30, 0x3d	; 61
   17096:	fe b7       	in	r31, 0x3e	; 62
   17098:	81 83       	std	Z+1, r24	; 0x01
   1709a:	92 83       	std	Z+2, r25	; 0x02
   1709c:	a3 83       	std	Z+3, r26	; 0x03
   1709e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170a2:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
   170a6:	5d dd       	rcall	.-1350   	; 0x16b62 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   170a8:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   170ac:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   170b0:	82 e0       	ldi	r24, 0x02	; 2
   170b2:	80 83       	st	Z, r24
            amigo_request_status();
   170b4:	0e 94 ac af 	call	0x15f58	; 0x15f58 <amigo_request_status>
   170b8:	42 c0       	rjmp	.+132    	; 0x1713e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   170ba:	65 30       	cpi	r22, 0x05	; 5
   170bc:	09 f0       	breq	.+2      	; 0x170c0 <Amigo_Command+0x536>
   170be:	44 c0       	rjmp	.+136    	; 0x17148 <Amigo_Command+0x5be>
   170c0:	02 30       	cpi	r16, 0x02	; 2
   170c2:	11 05       	cpc	r17, r1
   170c4:	09 f0       	breq	.+2      	; 0x170c8 <Amigo_Command+0x53e>
   170c6:	40 c0       	rjmp	.+128    	; 0x17148 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170cc:	85 ff       	sbrs	r24, 5
   170ce:	0a c0       	rjmp	.+20     	; 0x170e4 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   170d0:	85 e1       	ldi	r24, 0x15	; 21
   170d2:	97 e2       	ldi	r25, 0x27	; 39
   170d4:	a0 e0       	ldi	r26, 0x00	; 0
   170d6:	ed b7       	in	r30, 0x3d	; 61
   170d8:	fe b7       	in	r31, 0x3e	; 62
   170da:	81 83       	std	Z+1, r24	; 0x01
   170dc:	92 83       	std	Z+2, r25	; 0x02
   170de:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170e0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   170e4:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   170e8:	3c dd       	rcall	.-1416   	; 0x16b62 <amigo_check_unit>
   170ea:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   170ee:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   170f2:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   170f4:	80 83       	st	Z, r24
   170f6:	c5 d9       	rcall	.-3190   	; 0x16482 <amigo_buffered_read_command>
   170f8:	2a c0       	rjmp	.+84     	; 0x1714e <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   170fa:	fc e6       	ldi	r31, 0x6C	; 108
   170fc:	ef 16       	cp	r14, r31
   170fe:	f1 04       	cpc	r15, r1
   17100:	d1 f4       	brne	.+52     	; 0x17136 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17102:	68 31       	cpi	r22, 0x18	; 24
   17104:	09 f5       	brne	.+66     	; 0x17148 <Amigo_Command+0x5be>
   17106:	05 30       	cpi	r16, 0x05	; 5
   17108:	11 05       	cpc	r17, r1
   1710a:	f1 f4       	brne	.+60     	; 0x17148 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1710c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17110:	85 ff       	sbrs	r24, 5
   17112:	0a c0       	rjmp	.+20     	; 0x17128 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17114:	85 e0       	ldi	r24, 0x05	; 5
   17116:	97 e2       	ldi	r25, 0x27	; 39
   17118:	a0 e0       	ldi	r26, 0x00	; 0
   1711a:	ed b7       	in	r30, 0x3d	; 61
   1711c:	fe b7       	in	r31, 0x3e	; 62
   1711e:	81 83       	std	Z+1, r24	; 0x01
   17120:	92 83       	std	Z+2, r25	; 0x02
   17122:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17124:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17128:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1712c:	1a dd       	rcall	.-1484   	; 0x16b62 <amigo_check_unit>
   1712e:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x4>
   17132:	0f d9       	rcall	.-3554   	; 0x16352 <amigo_format>
   17134:	04 c0       	rjmp	.+8      	; 0x1713e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17136:	f0 e7       	ldi	r31, 0x70	; 112
   17138:	ef 16       	cp	r14, r31
   1713a:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1713c:	29 f4       	brne	.+10     	; 0x17148 <Amigo_Command+0x5be>
   1713e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17140:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17142:	88 27       	eor	r24, r24
   17144:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17146:	03 c0       	rjmp	.+6      	; 0x1714e <Amigo_Command+0x5c4>
   17148:	a8 01       	movw	r20, r16
   1714a:	8e 2d       	mov	r24, r14
   1714c:	ed db       	rcall	.-2086   	; 0x16928 <amigo_todo_op>
}
   1714e:	6c 96       	adiw	r28, 0x1c	; 28
   17150:	e6 e0       	ldi	r30, 0x06	; 6
   17152:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00017156 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17156:	a9 e0       	ldi	r26, 0x09	; 9
   17158:	b0 e0       	ldi	r27, 0x00	; 0
   1715a:	e1 eb       	ldi	r30, 0xB1	; 177
   1715c:	f8 eb       	ldi	r31, 0xB8	; 184
   1715e:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   17162:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17164:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17168:	85 ff       	sbrs	r24, 5
   1716a:	16 c0       	rjmp	.+44     	; 0x17198 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1716c:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17170:	90 e0       	ldi	r25, 0x00	; 0
   17172:	ed b7       	in	r30, 0x3d	; 61
   17174:	fe b7       	in	r31, 0x3e	; 62
   17176:	91 87       	std	Z+9, r25	; 0x09
   17178:	80 87       	std	Z+8, r24	; 0x08
   1717a:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   1717e:	90 e0       	ldi	r25, 0x00	; 0
   17180:	97 83       	std	Z+7, r25	; 0x07
   17182:	86 83       	std	Z+6, r24	; 0x06
   17184:	d5 83       	std	Z+5, r29	; 0x05
   17186:	c4 83       	std	Z+4, r28	; 0x04
   17188:	83 ed       	ldi	r24, 0xD3	; 211
   1718a:	96 e2       	ldi	r25, 0x26	; 38
   1718c:	a0 e0       	ldi	r26, 0x00	; 0
   1718e:	81 83       	std	Z+1, r24	; 0x01
   17190:	92 83       	std	Z+2, r25	; 0x02
   17192:	a3 83       	std	Z+3, r26	; 0x03
   17194:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17198:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   1719c:	8f 35       	cpi	r24, 0x5F	; 95
   1719e:	09 f4       	brne	.+2      	; 0x171a2 <Amigo_Execute+0x4c>
   171a0:	ad c0       	rjmp	.+346    	; 0x172fc <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   171a2:	90 e0       	ldi	r25, 0x00	; 0
   171a4:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   171a8:	89 2b       	or	r24, r25
   171aa:	39 f0       	breq	.+14     	; 0x171ba <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   171ac:	ce 01       	movw	r24, r28
   171ae:	87 7f       	andi	r24, 0xF7	; 247
   171b0:	80 36       	cpi	r24, 0x60	; 96
   171b2:	91 05       	cpc	r25, r1
   171b4:	09 f0       	breq	.+2      	; 0x171b8 <Amigo_Execute+0x62>
   171b6:	a2 c0       	rjmp	.+324    	; 0x172fc <Amigo_Execute+0x1a6>
   171b8:	08 c0       	rjmp	.+16     	; 0x171ca <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   171ba:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   171be:	90 e0       	ldi	r25, 0x00	; 0
   171c0:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   171c4:	89 2b       	or	r24, r25
   171c6:	91 f7       	brne	.-28     	; 0x171ac <Amigo_Execute+0x56>
   171c8:	99 c0       	rjmp	.+306    	; 0x172fc <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   171ca:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   171ce:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   171d2:	81 81       	ldd	r24, Z+1	; 0x01
   171d4:	90 e0       	ldi	r25, 0x00	; 0
   171d6:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>

    if(secondary == 0x60)
   171da:	c0 36       	cpi	r28, 0x60	; 96
   171dc:	d1 05       	cpc	r29, r1
   171de:	09 f0       	breq	.+2      	; 0x171e2 <Amigo_Execute+0x8c>
   171e0:	4e c0       	rjmp	.+156    	; 0x1727e <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   171e2:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   171e6:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   171ea:	e0 81       	ld	r30, Z
   171ec:	8e 2f       	mov	r24, r30
   171ee:	90 e0       	ldi	r25, 0x00	; 0
   171f0:	8b 30       	cpi	r24, 0x0B	; 11
   171f2:	91 05       	cpc	r25, r1
   171f4:	08 f0       	brcs	.+2      	; 0x171f8 <Amigo_Execute+0xa2>
   171f6:	41 c0       	rjmp	.+130    	; 0x1727a <Amigo_Execute+0x124>
   171f8:	fc 01       	movw	r30, r24
   171fa:	ea 52       	subi	r30, 0x2A	; 42
   171fc:	ff 4f       	sbci	r31, 0xFF	; 255
   171fe:	0c 94 54 e1 	jmp	0x1c2a8	; 0x1c2a8 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17202:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17206:	85 ff       	sbrs	r24, 5
   17208:	18 c0       	rjmp	.+48     	; 0x1723a <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   1720a:	83 eb       	ldi	r24, 0xB3	; 179
   1720c:	96 e2       	ldi	r25, 0x26	; 38
   1720e:	0d c0       	rjmp	.+26     	; 0x1722a <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17210:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17214:	85 ff       	sbrs	r24, 5
   17216:	11 c0       	rjmp	.+34     	; 0x1723a <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17218:	82 e9       	ldi	r24, 0x92	; 146
   1721a:	96 e2       	ldi	r25, 0x26	; 38
   1721c:	06 c0       	rjmp	.+12     	; 0x1722a <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1721e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17222:	85 ff       	sbrs	r24, 5
   17224:	0a c0       	rjmp	.+20     	; 0x1723a <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17226:	83 e7       	ldi	r24, 0x73	; 115
   17228:	96 e2       	ldi	r25, 0x26	; 38
   1722a:	a0 e0       	ldi	r26, 0x00	; 0
   1722c:	ed b7       	in	r30, 0x3d	; 61
   1722e:	fe b7       	in	r31, 0x3e	; 62
   17230:	81 83       	std	Z+1, r24	; 0x01
   17232:	92 83       	std	Z+2, r25	; 0x02
   17234:	a3 83       	std	Z+3, r26	; 0x03
   17236:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   1723a:	b0 d9       	rcall	.-3232   	; 0x1659c <amigo_buffered_read_execute>
   1723c:	61 c0       	rjmp	.+194    	; 0x17300 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1723e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17242:	85 ff       	sbrs	r24, 5
   17244:	18 c0       	rjmp	.+48     	; 0x17276 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17246:	81 e5       	ldi	r24, 0x51	; 81
   17248:	96 e2       	ldi	r25, 0x26	; 38
   1724a:	0d c0       	rjmp	.+26     	; 0x17266 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1724c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17250:	85 ff       	sbrs	r24, 5
   17252:	11 c0       	rjmp	.+34     	; 0x17276 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17254:	85 e3       	ldi	r24, 0x35	; 53
   17256:	96 e2       	ldi	r25, 0x26	; 38
   17258:	06 c0       	rjmp	.+12     	; 0x17266 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1725a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1725e:	85 ff       	sbrs	r24, 5
   17260:	0a c0       	rjmp	.+20     	; 0x17276 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17262:	85 e1       	ldi	r24, 0x15	; 21
   17264:	96 e2       	ldi	r25, 0x26	; 38
   17266:	a0 e0       	ldi	r26, 0x00	; 0
   17268:	ed b7       	in	r30, 0x3d	; 61
   1726a:	fe b7       	in	r31, 0x3e	; 62
   1726c:	81 83       	std	Z+1, r24	; 0x01
   1726e:	92 83       	std	Z+2, r25	; 0x02
   17270:	a3 83       	std	Z+3, r26	; 0x03
   17272:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return ( amigo_buffered_write() );
   17276:	ed d9       	rcall	.-3110   	; 0x16652 <amigo_buffered_write>
   17278:	43 c0       	rjmp	.+134    	; 0x17300 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   1727a:	80 e6       	ldi	r24, 0x60	; 96
   1727c:	3d c0       	rjmp	.+122    	; 0x172f8 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1727e:	c8 36       	cpi	r28, 0x68	; 104
   17280:	d1 05       	cpc	r29, r1
   17282:	e1 f5       	brne	.+120    	; 0x172fc <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17284:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <AMIGOs>
   17288:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <AMIGOs+0x1>
   1728c:	80 81       	ld	r24, Z
   1728e:	82 30       	cpi	r24, 0x02	; 2
   17290:	81 f0       	breq	.+32     	; 0x172b2 <Amigo_Execute+0x15c>
   17292:	18 f4       	brcc	.+6      	; 0x1729a <Amigo_Execute+0x144>
   17294:	88 23       	and	r24, r24
   17296:	91 f1       	breq	.+100    	; 0x172fc <Amigo_Execute+0x1a6>
   17298:	2e c0       	rjmp	.+92     	; 0x172f6 <Amigo_Execute+0x1a0>
   1729a:	83 30       	cpi	r24, 0x03	; 3
   1729c:	19 f0       	breq	.+6      	; 0x172a4 <Amigo_Execute+0x14e>
   1729e:	84 30       	cpi	r24, 0x04	; 4
   172a0:	c9 f0       	breq	.+50     	; 0x172d4 <Amigo_Execute+0x17e>
   172a2:	29 c0       	rjmp	.+82     	; 0x172f6 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172a8:	85 ff       	sbrs	r24, 5
   172aa:	11 c0       	rjmp	.+34     	; 0x172ce <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   172ac:	8c ee       	ldi	r24, 0xEC	; 236
   172ae:	95 e2       	ldi	r25, 0x25	; 37
   172b0:	06 c0       	rjmp	.+12     	; 0x172be <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172b6:	85 ff       	sbrs	r24, 5
   172b8:	0a c0       	rjmp	.+20     	; 0x172ce <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   172ba:	81 ec       	ldi	r24, 0xC1	; 193
   172bc:	95 e2       	ldi	r25, 0x25	; 37
   172be:	a0 e0       	ldi	r26, 0x00	; 0
   172c0:	ed b7       	in	r30, 0x3d	; 61
   172c2:	fe b7       	in	r31, 0x3e	; 62
   172c4:	81 83       	std	Z+1, r24	; 0x01
   172c6:	92 83       	std	Z+2, r25	; 0x02
   172c8:	a3 83       	std	Z+3, r26	; 0x03
   172ca:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return ( amigo_send_status() );
   172ce:	0e 94 5e b0 	call	0x160bc	; 0x160bc <amigo_send_status>
   172d2:	16 c0       	rjmp	.+44     	; 0x17300 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172d8:	85 ff       	sbrs	r24, 5
   172da:	0a c0       	rjmp	.+20     	; 0x172f0 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   172dc:	88 e9       	ldi	r24, 0x98	; 152
   172de:	95 e2       	ldi	r25, 0x25	; 37
   172e0:	a0 e0       	ldi	r26, 0x00	; 0
   172e2:	ed b7       	in	r30, 0x3d	; 61
   172e4:	fe b7       	in	r31, 0x3e	; 62
   172e6:	81 83       	std	Z+1, r24	; 0x01
   172e8:	92 83       	std	Z+2, r25	; 0x02
   172ea:	a3 83       	std	Z+3, r26	; 0x03
   172ec:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
                return ( amigo_send_logical_address() );
   172f0:	0e 94 09 b0 	call	0x16012	; 0x16012 <amigo_send_logical_address>
   172f4:	05 c0       	rjmp	.+10     	; 0x17300 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   172f6:	88 e6       	ldi	r24, 0x68	; 104
   172f8:	b0 db       	rcall	.-2208   	; 0x16a5a <amigo_todo>
   172fa:	02 c0       	rjmp	.+4      	; 0x17300 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   172fc:	80 e0       	ldi	r24, 0x00	; 0
   172fe:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17300:	cd b7       	in	r28, 0x3d	; 61
   17302:	de b7       	in	r29, 0x3e	; 62
   17304:	29 96       	adiw	r28, 0x09	; 9
   17306:	e2 e0       	ldi	r30, 0x02	; 2
   17308:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

0001730c <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   1730c:	cf 93       	push	r28
   1730e:	df 93       	push	r29
   17310:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17312:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17316:	90 e0       	ldi	r25, 0x00	; 0
   17318:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   1731c:	89 2b       	or	r24, r25
   1731e:	51 f0       	breq	.+20     	; 0x17334 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17320:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17324:	8f 35       	cpi	r24, 0x5F	; 95
   17326:	71 f4       	brne	.+28     	; 0x17344 <AMIGO_COMMANDS+0x38>
   17328:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   1732c:	90 e0       	ldi	r25, 0x00	; 0
   1732e:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   17332:	08 c0       	rjmp	.+16     	; 0x17344 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17334:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   17338:	90 e0       	ldi	r25, 0x00	; 0
   1733a:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   1733e:	89 2b       	or	r24, r25
   17340:	79 f7       	brne	.-34     	; 0x17320 <AMIGO_COMMANDS+0x14>
   17342:	76 c0       	rjmp	.+236    	; 0x17430 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17344:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   17348:	81 11       	cpse	r24, r1
   1734a:	05 c0       	rjmp	.+10     	; 0x17356 <AMIGO_COMMANDS+0x4a>
   1734c:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17350:	90 e0       	ldi	r25, 0x00	; 0
   17352:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17356:	c0 36       	cpi	r28, 0x60	; 96
   17358:	99 f4       	brne	.+38     	; 0x17380 <AMIGO_COMMANDS+0x74>
   1735a:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   1735e:	90 e0       	ldi	r25, 0x00	; 0
   17360:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   17364:	89 2b       	or	r24, r25
   17366:	19 f0       	breq	.+6      	; 0x1736e <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17368:	80 e6       	ldi	r24, 0x60	; 96
   1736a:	90 e0       	ldi	r25, 0x00	; 0
   1736c:	14 c0       	rjmp	.+40     	; 0x17396 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1736e:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   17372:	90 e0       	ldi	r25, 0x00	; 0
   17374:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   17378:	89 2b       	or	r24, r25
   1737a:	09 f4       	brne	.+2      	; 0x1737e <AMIGO_COMMANDS+0x72>
   1737c:	59 c0       	rjmp	.+178    	; 0x17430 <AMIGO_COMMANDS+0x124>
   1737e:	f4 cf       	rjmp	.-24     	; 0x17368 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17380:	c8 36       	cpi	r28, 0x68	; 104
   17382:	c1 f4       	brne	.+48     	; 0x173b4 <AMIGO_COMMANDS+0xa8>
   17384:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17388:	90 e0       	ldi	r25, 0x00	; 0
   1738a:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   1738e:	89 2b       	or	r24, r25
   17390:	21 f0       	breq	.+8      	; 0x1739a <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17392:	88 e6       	ldi	r24, 0x68	; 104
   17394:	90 e0       	ldi	r25, 0x00	; 0
   17396:	df de       	rcall	.-578    	; 0x17156 <Amigo_Execute>
   17398:	0b c0       	rjmp	.+22     	; 0x173b0 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   1739a:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   1739e:	90 e0       	ldi	r25, 0x00	; 0
   173a0:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   173a4:	89 2b       	or	r24, r25
   173a6:	09 f4       	brne	.+2      	; 0x173aa <AMIGO_COMMANDS+0x9e>
   173a8:	43 c0       	rjmp	.+134    	; 0x17430 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   173aa:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   173ac:	90 e0       	ldi	r25, 0x00	; 0
   173ae:	ed db       	rcall	.-2086   	; 0x16b8a <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   173b0:	ec 01       	movw	r28, r24
   173b2:	40 c0       	rjmp	.+128    	; 0x17434 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   173b4:	c9 36       	cpi	r28, 0x69	; 105
   173b6:	51 f4       	brne	.+20     	; 0x173cc <AMIGO_COMMANDS+0xc0>
   173b8:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   173bc:	90 e0       	ldi	r25, 0x00	; 0
   173be:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   173c2:	89 2b       	or	r24, r25
   173c4:	a9 f1       	breq	.+106    	; 0x17430 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   173c6:	89 e6       	ldi	r24, 0x69	; 105
   173c8:	90 e0       	ldi	r25, 0x00	; 0
   173ca:	f1 cf       	rjmp	.-30     	; 0x173ae <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   173cc:	ca 36       	cpi	r28, 0x6A	; 106
   173ce:	51 f4       	brne	.+20     	; 0x173e4 <AMIGO_COMMANDS+0xd8>
   173d0:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   173d4:	90 e0       	ldi	r25, 0x00	; 0
   173d6:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   173da:	89 2b       	or	r24, r25
   173dc:	49 f1       	breq	.+82     	; 0x17430 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   173de:	8a e6       	ldi	r24, 0x6A	; 106
   173e0:	90 e0       	ldi	r25, 0x00	; 0
   173e2:	e5 cf       	rjmp	.-54     	; 0x173ae <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   173e4:	cc 36       	cpi	r28, 0x6C	; 108
   173e6:	51 f4       	brne	.+20     	; 0x173fc <AMIGO_COMMANDS+0xf0>
   173e8:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   173ec:	90 e0       	ldi	r25, 0x00	; 0
   173ee:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   173f2:	89 2b       	or	r24, r25
   173f4:	e9 f0       	breq	.+58     	; 0x17430 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   173f6:	8c e6       	ldi	r24, 0x6C	; 108
   173f8:	90 e0       	ldi	r25, 0x00	; 0
   173fa:	d9 cf       	rjmp	.-78     	; 0x173ae <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   173fc:	c0 37       	cpi	r28, 0x70	; 112
   173fe:	c1 f4       	brne	.+48     	; 0x17430 <AMIGO_COMMANDS+0x124>
   17400:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17404:	90 e0       	ldi	r25, 0x00	; 0
   17406:	0e 94 5a 8b 	call	0x116b4	; 0x116b4 <AMIGO_is_MTA>
   1740a:	ec 01       	movw	r28, r24
   1740c:	89 2b       	or	r24, r25
   1740e:	51 f0       	breq	.+20     	; 0x17424 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17410:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <AMIGOp>
   17414:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <AMIGOp+0x1>
   17418:	81 81       	ldd	r24, Z+1	; 0x01
   1741a:	90 e0       	ldi	r25, 0x00	; 0
   1741c:	0e 94 fd 84 	call	0x109fa	; 0x109fa <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17420:	ff d9       	rcall	.-3074   	; 0x16820 <amigo_cmd_dsj>
   17422:	c6 cf       	rjmp	.-116    	; 0x173b0 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17424:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   17428:	90 e0       	ldi	r25, 0x00	; 0
   1742a:	0e 94 49 8b 	call	0x11692	; 0x11692 <AMIGO_is_MLA>
   1742e:	02 c0       	rjmp	.+4      	; 0x17434 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17430:	c0 e0       	ldi	r28, 0x00	; 0
   17432:	d0 e0       	ldi	r29, 0x00	; 0
}
   17434:	ce 01       	movw	r24, r28
   17436:	df 91       	pop	r29
   17438:	cf 91       	pop	r28
   1743a:	08 95       	ret

0001743c <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1743c:	ee e8       	ldi	r30, 0x8E	; 142
   1743e:	f9 e1       	ldi	r31, 0x19	; 25
   17440:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17442:	10 82       	st	Z, r1
   17444:	11 82       	std	Z+1, r1	; 0x01
   17446:	12 82       	std	Z+2, r1	; 0x02
   17448:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   1744a:	15 82       	std	Z+5, r1	; 0x05
   1744c:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   1744e:	12 86       	std	Z+10, r1	; 0x0a
   17450:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17452:	14 86       	std	Z+12, r1	; 0x0c
   17454:	13 86       	std	Z+11, r1	; 0x0b
   17456:	08 95       	ret

00017458 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17458:	cf 93       	push	r28
   1745a:	df 93       	push	r29
   1745c:	ad b7       	in	r26, 0x3d	; 61
   1745e:	be b7       	in	r27, 0x3e	; 62
   17460:	17 97       	sbiw	r26, 0x07	; 7
   17462:	0f b6       	in	r0, 0x3f	; 63
   17464:	f8 94       	cli
   17466:	be bf       	out	0x3e, r27	; 62
   17468:	0f be       	out	0x3f, r0	; 63
   1746a:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   1746c:	20 91 97 19 	lds	r18, 0x1997	; 0x801997 <plot+0x9>
   17470:	30 91 98 19 	lds	r19, 0x1998	; 0x801998 <plot+0xa>
   17474:	21 15       	cp	r18, r1
   17476:	31 05       	cpc	r19, r1
   17478:	09 f4       	brne	.+2      	; 0x1747c <receive_plot_flush+0x24>
   1747a:	45 c0       	rjmp	.+138    	; 0x17506 <receive_plot_flush+0xae>
   1747c:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <plot+0x4>
   17480:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <plot+0x5>
   17484:	00 97       	sbiw	r24, 0x00	; 0
   17486:	09 f4       	brne	.+2      	; 0x1748a <receive_plot_flush+0x32>
   17488:	40 c0       	rjmp	.+128    	; 0x1750a <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   1748a:	ac 01       	movw	r20, r24
   1748c:	61 e0       	ldi	r22, 0x01	; 1
   1748e:	70 e0       	ldi	r23, 0x00	; 0
   17490:	80 91 99 19 	lds	r24, 0x1999	; 0x801999 <plot+0xb>
   17494:	90 91 9a 19 	lds	r25, 0x199A	; 0x80199a <plot+0xc>
   17498:	0e 94 fb 7a 	call	0xf5f6	; 0xf5f6 <fwrite>
   1749c:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   1749e:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <plot+0x4>
   174a2:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <plot+0x5>
   174a6:	c8 17       	cp	r28, r24
   174a8:	d9 07       	cpc	r29, r25
   174aa:	09 f1       	breq	.+66     	; 0x174ee <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   174ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   174b4:	81 72       	andi	r24, 0x21	; 33
   174b6:	99 27       	eor	r25, r25
   174b8:	89 2b       	or	r24, r25
   174ba:	b1 f0       	breq	.+44     	; 0x174e8 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   174bc:	8b ed       	ldi	r24, 0xDB	; 219
   174be:	95 e1       	ldi	r25, 0x15	; 21
   174c0:	0e 94 04 77 	call	0xee08	; 0xee08 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   174c4:	ed b7       	in	r30, 0x3d	; 61
   174c6:	fe b7       	in	r31, 0x3e	; 62
   174c8:	d7 83       	std	Z+7, r29	; 0x07
   174ca:	c6 83       	std	Z+6, r28	; 0x06
   174cc:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <plot+0x4>
   174d0:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <plot+0x5>
   174d4:	95 83       	std	Z+5, r25	; 0x05
   174d6:	84 83       	std	Z+4, r24	; 0x04
   174d8:	88 e2       	ldi	r24, 0x28	; 40
   174da:	9e e2       	ldi	r25, 0x2E	; 46
   174dc:	a0 e0       	ldi	r26, 0x00	; 0
   174de:	81 83       	std	Z+1, r24	; 0x01
   174e0:	92 83       	std	Z+2, r25	; 0x02
   174e2:	a3 83       	std	Z+3, r26	; 0x03
   174e4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        }
        return(-1);
   174e8:	8f ef       	ldi	r24, 0xFF	; 255
   174ea:	9f ef       	ldi	r25, 0xFF	; 255
   174ec:	0e c0       	rjmp	.+28     	; 0x1750a <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   174ee:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x9>
   174f2:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0xa>
   174f6:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fileno>
    if(fno < 0)
   174fa:	97 fd       	sbrc	r25, 7
   174fc:	f5 cf       	rjmp	.-22     	; 0x174e8 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   174fe:	0e 94 45 7a 	call	0xf48a	; 0xf48a <syncfs>
    return (ret);
   17502:	ce 01       	movw	r24, r28
   17504:	02 c0       	rjmp	.+4      	; 0x1750a <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17506:	80 e0       	ldi	r24, 0x00	; 0
   17508:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   1750a:	cd b7       	in	r28, 0x3d	; 61
   1750c:	de b7       	in	r29, 0x3e	; 62
   1750e:	27 96       	adiw	r28, 0x07	; 7
   17510:	e2 e0       	ldi	r30, 0x02	; 2
   17512:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00017516 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17516:	ad b7       	in	r26, 0x3d	; 61
   17518:	be b7       	in	r27, 0x3e	; 62
   1751a:	17 97       	sbiw	r26, 0x07	; 7
   1751c:	0f b6       	in	r0, 0x3f	; 63
   1751e:	f8 94       	cli
   17520:	be bf       	out	0x3e, r27	; 62
   17522:	0f be       	out	0x3f, r0	; 63
   17524:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17526:	98 df       	rcall	.-208    	; 0x17458 <receive_plot_flush>
   17528:	97 ff       	sbrs	r25, 7
   1752a:	03 c0       	rjmp	.+6      	; 0x17532 <printer_close+0x1c>
        plot.error = 1;
   1752c:	81 e0       	ldi	r24, 0x01	; 1
   1752e:	80 93 96 19 	sts	0x1996, r24	; 0x801996 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17532:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17536:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1753a:	81 72       	andi	r24, 0x21	; 33
   1753c:	99 27       	eor	r25, r25
   1753e:	89 2b       	or	r24, r25
   17540:	71 f0       	breq	.+28     	; 0x1755e <printer_close+0x48>
    {
        if(plot.error)
   17542:	80 91 96 19 	lds	r24, 0x1996	; 0x801996 <plot+0x8>
   17546:	88 23       	and	r24, r24
   17548:	51 f0       	breq	.+20     	; 0x1755e <printer_close+0x48>
            printf("ERROR durring write\n");
   1754a:	87 e5       	ldi	r24, 0x57	; 87
   1754c:	9e e2       	ldi	r25, 0x2E	; 46
   1754e:	a0 e0       	ldi	r26, 0x00	; 0
   17550:	ed b7       	in	r30, 0x3d	; 61
   17552:	fe b7       	in	r31, 0x3e	; 62
   17554:	81 83       	std	Z+1, r24	; 0x01
   17556:	92 83       	std	Z+2, r25	; 0x02
   17558:	a3 83       	std	Z+3, r26	; 0x03
   1755a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

    if(plot.fp)
   1755e:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x9>
   17562:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0xa>
   17566:	00 97       	sbiw	r24, 0x00	; 0
   17568:	e1 f0       	breq	.+56     	; 0x175a2 <printer_close+0x8c>
    {
        fclose(plot.fp);
   1756a:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1756e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17572:	85 ff       	sbrs	r24, 5
   17574:	16 c0       	rjmp	.+44     	; 0x175a2 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17576:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <plot>
   1757a:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <plot+0x1>
   1757e:	a0 91 90 19 	lds	r26, 0x1990	; 0x801990 <plot+0x2>
   17582:	b0 91 91 19 	lds	r27, 0x1991	; 0x801991 <plot+0x3>
   17586:	ed b7       	in	r30, 0x3d	; 61
   17588:	fe b7       	in	r31, 0x3e	; 62
   1758a:	84 83       	std	Z+4, r24	; 0x04
   1758c:	95 83       	std	Z+5, r25	; 0x05
   1758e:	a6 83       	std	Z+6, r26	; 0x06
   17590:	b7 83       	std	Z+7, r27	; 0x07
   17592:	89 e4       	ldi	r24, 0x49	; 73
   17594:	9e e2       	ldi	r25, 0x2E	; 46
   17596:	a0 e0       	ldi	r26, 0x00	; 0
   17598:	81 83       	std	Z+1, r24	; 0x01
   1759a:	92 83       	std	Z+2, r25	; 0x02
   1759c:	a3 83       	std	Z+3, r26	; 0x03
   1759e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

    if(plot.buf)
   175a2:	80 91 99 19 	lds	r24, 0x1999	; 0x801999 <plot+0xb>
   175a6:	90 91 9a 19 	lds	r25, 0x199A	; 0x80199a <plot+0xc>
   175aa:	00 97       	sbiw	r24, 0x00	; 0
   175ac:	11 f0       	breq	.+4      	; 0x175b2 <printer_close+0x9c>
        safefree(plot.buf);
   175ae:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
    printer_init();
   175b2:	44 df       	rcall	.-376    	; 0x1743c <printer_init>
}
   175b4:	ad b7       	in	r26, 0x3d	; 61
   175b6:	be b7       	in	r27, 0x3e	; 62
   175b8:	17 96       	adiw	r26, 0x07	; 7
   175ba:	0f b6       	in	r0, 0x3f	; 63
   175bc:	f8 94       	cli
   175be:	be bf       	out	0x3e, r27	; 62
   175c0:	0f be       	out	0x3f, r0	; 63
   175c2:	ad bf       	out	0x3d, r26	; 61
   175c4:	08 95       	ret

000175c6 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   175c6:	ad e5       	ldi	r26, 0x5D	; 93
   175c8:	b0 e0       	ldi	r27, 0x00	; 0
   175ca:	e9 ee       	ldi	r30, 0xE9	; 233
   175cc:	fa eb       	ldi	r31, 0xBA	; 186
   175ce:	0c 94 8f e1 	jmp	0x1c31e	; 0x1c31e <__prologue_saves__+0x18>
   175d2:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   175d4:	89 2b       	or	r24, r25
   175d6:	09 f0       	breq	.+2      	; 0x175da <printer_open+0x14>
   175d8:	4f c0       	rjmp	.+158    	; 0x17678 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   175da:	be 01       	movw	r22, r28
   175dc:	6e 5a       	subi	r22, 0xAE	; 174
   175de:	7f 4f       	sbci	r23, 0xFF	; 255
   175e0:	80 e0       	ldi	r24, 0x00	; 0
   175e2:	90 e0       	ldi	r25, 0x00	; 0
   175e4:	0e 94 4d 31 	call	0x629a	; 0x629a <clock_gettime>
        seconds = ts.tv_sec;
   175e8:	66 96       	adiw	r28, 0x16	; 22
   175ea:	8c ad       	ldd	r24, Y+60	; 0x3c
   175ec:	9d ad       	ldd	r25, Y+61	; 0x3d
   175ee:	ae ad       	ldd	r26, Y+62	; 0x3e
   175f0:	bf ad       	ldd	r27, Y+63	; 0x3f
   175f2:	66 97       	sbiw	r28, 0x16	; 22
   175f4:	6e 96       	adiw	r28, 0x1e	; 30
   175f6:	8c af       	std	Y+60, r24	; 0x3c
   175f8:	9d af       	std	Y+61, r25	; 0x3d
   175fa:	ae af       	std	Y+62, r26	; 0x3e
   175fc:	bf af       	std	Y+63, r27	; 0x3f
   175fe:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17600:	ce 01       	movw	r24, r28
   17602:	86 5a       	subi	r24, 0xA6	; 166
   17604:	9f 4f       	sbci	r25, 0xFF	; 255
   17606:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <gmtime>
   1760a:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   1760c:	fc 01       	movw	r30, r24
   1760e:	e6 80       	ldd	r14, Z+6	; 0x06
   17610:	f7 80       	ldd	r15, Z+7	; 0x07
   17612:	80 85       	ldd	r24, Z+8	; 0x08
   17614:	91 85       	ldd	r25, Z+9	; 0x09
   17616:	0e 94 13 34 	call	0x6826	; 0x6826 <tm_mon_to_ascii>
   1761a:	f8 01       	movw	r30, r16
   1761c:	20 81       	ld	r18, Z
   1761e:	31 81       	ldd	r19, Z+1	; 0x01
   17620:	ed b7       	in	r30, 0x3d	; 61
   17622:	fe b7       	in	r31, 0x3e	; 62
   17624:	31 8b       	std	Z+17, r19	; 0x11
   17626:	20 8b       	std	Z+16, r18	; 0x10
   17628:	f8 01       	movw	r30, r16
   1762a:	22 81       	ldd	r18, Z+2	; 0x02
   1762c:	33 81       	ldd	r19, Z+3	; 0x03
   1762e:	ed b7       	in	r30, 0x3d	; 61
   17630:	fe b7       	in	r31, 0x3e	; 62
   17632:	37 87       	std	Z+15, r19	; 0x0f
   17634:	26 87       	std	Z+14, r18	; 0x0e
   17636:	f8 01       	movw	r30, r16
   17638:	24 81       	ldd	r18, Z+4	; 0x04
   1763a:	35 81       	ldd	r19, Z+5	; 0x05
   1763c:	ed b7       	in	r30, 0x3d	; 61
   1763e:	fe b7       	in	r31, 0x3e	; 62
   17640:	35 87       	std	Z+13, r19	; 0x0d
   17642:	24 87       	std	Z+12, r18	; 0x0c
   17644:	f8 01       	movw	r30, r16
   17646:	22 85       	ldd	r18, Z+10	; 0x0a
   17648:	33 85       	ldd	r19, Z+11	; 0x0b
   1764a:	24 59       	subi	r18, 0x94	; 148
   1764c:	38 4f       	sbci	r19, 0xF8	; 248
   1764e:	ed b7       	in	r30, 0x3d	; 61
   17650:	fe b7       	in	r31, 0x3e	; 62
   17652:	33 87       	std	Z+11, r19	; 0x0b
   17654:	22 87       	std	Z+10, r18	; 0x0a
   17656:	91 87       	std	Z+9, r25	; 0x09
   17658:	80 87       	std	Z+8, r24	; 0x08
   1765a:	f7 82       	std	Z+7, r15	; 0x07
   1765c:	e6 82       	std	Z+6, r14	; 0x06
   1765e:	8e e8       	ldi	r24, 0x8E	; 142
   17660:	9e e2       	ldi	r25, 0x2E	; 46
   17662:	a0 e0       	ldi	r26, 0x00	; 0
   17664:	83 83       	std	Z+3, r24	; 0x03
   17666:	94 83       	std	Z+4, r25	; 0x04
   17668:	a5 83       	std	Z+5, r26	; 0x05
   1766a:	8e 01       	movw	r16, r28
   1766c:	0e 5e       	subi	r16, 0xEE	; 238
   1766e:	1f 4f       	sbci	r17, 0xFF	; 255
   17670:	12 83       	std	Z+2, r17	; 0x02
   17672:	01 83       	std	Z+1, r16	; 0x01
   17674:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17678:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1767c:	85 ff       	sbrs	r24, 5
   1767e:	0c c0       	rjmp	.+24     	; 0x17698 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17680:	ed b7       	in	r30, 0x3d	; 61
   17682:	fe b7       	in	r31, 0x3e	; 62
   17684:	15 83       	std	Z+5, r17	; 0x05
   17686:	04 83       	std	Z+4, r16	; 0x04
   17688:	88 e7       	ldi	r24, 0x78	; 120
   1768a:	9e e2       	ldi	r25, 0x2E	; 46
   1768c:	a0 e0       	ldi	r26, 0x00	; 0
   1768e:	81 83       	std	Z+1, r24	; 0x01
   17690:	92 83       	std	Z+2, r25	; 0x02
   17692:	a3 83       	std	Z+3, r26	; 0x03
   17694:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    plot.fp = fopen(ptr,"wb");
   17698:	6c e0       	ldi	r22, 0x0C	; 12
   1769a:	79 e0       	ldi	r23, 0x09	; 9
   1769c:	c8 01       	movw	r24, r16
   1769e:	0e 94 d3 7c 	call	0xf9a6	; 0xf9a6 <fopen>
   176a2:	90 93 98 19 	sts	0x1998, r25	; 0x801998 <plot+0xa>
   176a6:	80 93 97 19 	sts	0x1997, r24	; 0x801997 <plot+0x9>
    if(plot.fp == NULL)
   176aa:	89 2b       	or	r24, r25
   176ac:	b9 f4       	brne	.+46     	; 0x176dc <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   176ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   176b6:	81 72       	andi	r24, 0x21	; 33
   176b8:	99 27       	eor	r25, r25
   176ba:	89 2b       	or	r24, r25
   176bc:	11 f1       	breq	.+68     	; 0x17702 <printer_open+0x13c>
        {
            perror("open failed");
   176be:	87 ea       	ldi	r24, 0xA7	; 167
   176c0:	9d e0       	ldi	r25, 0x0D	; 13
   176c2:	0e 94 04 77 	call	0xee08	; 0xee08 <perror>
            printf("exiting...\n");
   176c6:	8c e6       	ldi	r24, 0x6C	; 108
   176c8:	9e e2       	ldi	r25, 0x2E	; 46
   176ca:	a0 e0       	ldi	r26, 0x00	; 0
   176cc:	ed b7       	in	r30, 0x3d	; 61
   176ce:	fe b7       	in	r31, 0x3e	; 62
   176d0:	81 83       	std	Z+1, r24	; 0x01
   176d2:	92 83       	std	Z+2, r25	; 0x02
   176d4:	a3 83       	std	Z+3, r26	; 0x03
   176d6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   176da:	13 c0       	rjmp	.+38     	; 0x17702 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   176dc:	61 e0       	ldi	r22, 0x01	; 1
   176de:	70 e0       	ldi	r23, 0x00	; 0
   176e0:	81 e0       	ldi	r24, 0x01	; 1
   176e2:	92 e0       	ldi	r25, 0x02	; 2
   176e4:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   176e8:	90 93 9a 19 	sts	0x199A, r25	; 0x80199a <plot+0xc>
   176ec:	80 93 99 19 	sts	0x1999, r24	; 0x801999 <plot+0xb>
    if(plot.buf == NULL)
   176f0:	89 2b       	or	r24, r25
   176f2:	09 f4       	brne	.+2      	; 0x176f6 <printer_open+0x130>
        printer_close();
   176f4:	10 df       	rcall	.-480    	; 0x17516 <printer_close>
    plot.size = 512;
   176f6:	80 e0       	ldi	r24, 0x00	; 0
   176f8:	92 e0       	ldi	r25, 0x02	; 2
   176fa:	90 93 95 19 	sts	0x1995, r25	; 0x801995 <plot+0x7>
   176fe:	80 93 94 19 	sts	0x1994, r24	; 0x801994 <plot+0x6>
}
   17702:	c3 5a       	subi	r28, 0xA3	; 163
   17704:	df 4f       	sbci	r29, 0xFF	; 255
   17706:	e6 e0       	ldi	r30, 0x06	; 6
   17708:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

0001770c <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   1770c:	cf 93       	push	r28
   1770e:	df 93       	push	r29
   17710:	ad b7       	in	r26, 0x3d	; 61
   17712:	be b7       	in	r27, 0x3e	; 62
   17714:	17 97       	sbiw	r26, 0x07	; 7
   17716:	0f b6       	in	r0, 0x3f	; 63
   17718:	f8 94       	cli
   1771a:	be bf       	out	0x3e, r27	; 62
   1771c:	0f be       	out	0x3f, r0	; 63
   1771e:	ad bf       	out	0x3d, r26	; 61
   17720:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17722:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17726:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1772a:	81 72       	andi	r24, 0x21	; 33
   1772c:	99 27       	eor	r25, r25
   1772e:	89 2b       	or	r24, r25
   17730:	c1 f0       	breq	.+48     	; 0x17762 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17732:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <plot>
   17736:	30 91 8f 19 	lds	r19, 0x198F	; 0x80198f <plot+0x1>
   1773a:	20 91 90 19 	lds	r18, 0x1990	; 0x801990 <plot+0x2>
   1773e:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <plot+0x3>
   17742:	81 11       	cpse	r24, r1
   17744:	0e c0       	rjmp	.+28     	; 0x17762 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17746:	ed b7       	in	r30, 0x3d	; 61
   17748:	fe b7       	in	r31, 0x3e	; 62
   1774a:	84 83       	std	Z+4, r24	; 0x04
   1774c:	35 83       	std	Z+5, r19	; 0x05
   1774e:	26 83       	std	Z+6, r18	; 0x06
   17750:	97 83       	std	Z+7, r25	; 0x07
   17752:	81 e2       	ldi	r24, 0x21	; 33
   17754:	9e e2       	ldi	r25, 0x2E	; 46
   17756:	a0 e0       	ldi	r26, 0x00	; 0
   17758:	81 83       	std	Z+1, r24	; 0x01
   1775a:	92 83       	std	Z+2, r25	; 0x02
   1775c:	a3 83       	std	Z+3, r26	; 0x03
   1775e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17762:	ce 01       	movw	r24, r28
   17764:	88 27       	eor	r24, r24
   17766:	97 7f       	andi	r25, 0xF7	; 247
   17768:	89 2b       	or	r24, r25
   1776a:	41 f0       	breq	.+16     	; 0x1777c <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   1776c:	75 de       	rcall	.-790    	; 0x17458 <receive_plot_flush>
   1776e:	89 2b       	or	r24, r25
   17770:	09 f4       	brne	.+2      	; 0x17774 <printer_buffer+0x68>
   17772:	3f c0       	rjmp	.+126    	; 0x177f2 <printer_buffer+0xe6>
            plot.error = 1;
   17774:	81 e0       	ldi	r24, 0x01	; 1
   17776:	80 93 96 19 	sts	0x1996, r24	; 0x801996 <plot+0x8>
   1777a:	3b c0       	rjmp	.+118    	; 0x177f2 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   1777c:	20 91 99 19 	lds	r18, 0x1999	; 0x801999 <plot+0xb>
   17780:	30 91 9a 19 	lds	r19, 0x199A	; 0x80199a <plot+0xc>
   17784:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <plot+0x4>
   17788:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <plot+0x5>
   1778c:	ac 01       	movw	r20, r24
   1778e:	4f 5f       	subi	r20, 0xFF	; 255
   17790:	5f 4f       	sbci	r21, 0xFF	; 255
   17792:	50 93 93 19 	sts	0x1993, r21	; 0x801993 <plot+0x5>
   17796:	40 93 92 19 	sts	0x1992, r20	; 0x801992 <plot+0x4>
   1779a:	f9 01       	movw	r30, r18
   1779c:	e8 0f       	add	r30, r24
   1779e:	f9 1f       	adc	r31, r25
   177a0:	c0 83       	st	Z, r28
        plot.count++;
   177a2:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <plot>
   177a6:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <plot+0x1>
   177aa:	a0 91 90 19 	lds	r26, 0x1990	; 0x801990 <plot+0x2>
   177ae:	b0 91 91 19 	lds	r27, 0x1991	; 0x801991 <plot+0x3>
   177b2:	01 96       	adiw	r24, 0x01	; 1
   177b4:	a1 1d       	adc	r26, r1
   177b6:	b1 1d       	adc	r27, r1
   177b8:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <plot>
   177bc:	90 93 8f 19 	sts	0x198F, r25	; 0x80198f <plot+0x1>
   177c0:	a0 93 90 19 	sts	0x1990, r26	; 0x801990 <plot+0x2>
   177c4:	b0 93 91 19 	sts	0x1991, r27	; 0x801991 <plot+0x3>

        if(plot.ind >= plot.size)
   177c8:	20 91 92 19 	lds	r18, 0x1992	; 0x801992 <plot+0x4>
   177cc:	30 91 93 19 	lds	r19, 0x1993	; 0x801993 <plot+0x5>
   177d0:	80 91 94 19 	lds	r24, 0x1994	; 0x801994 <plot+0x6>
   177d4:	90 91 95 19 	lds	r25, 0x1995	; 0x801995 <plot+0x7>
   177d8:	28 17       	cp	r18, r24
   177da:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   177dc:	54 f0       	brlt	.+20     	; 0x177f2 <printer_buffer+0xe6>
   177de:	3c de       	rcall	.-904    	; 0x17458 <receive_plot_flush>
   177e0:	97 ff       	sbrs	r25, 7
   177e2:	03 c0       	rjmp	.+6      	; 0x177ea <printer_buffer+0xde>
                plot.error = 1;
   177e4:	81 e0       	ldi	r24, 0x01	; 1
   177e6:	80 93 96 19 	sts	0x1996, r24	; 0x801996 <plot+0x8>
            plot.ind  = 0;
   177ea:	10 92 93 19 	sts	0x1993, r1	; 0x801993 <plot+0x5>
   177ee:	10 92 92 19 	sts	0x1992, r1	; 0x801992 <plot+0x4>
        }
    }
}
   177f2:	cd b7       	in	r28, 0x3d	; 61
   177f4:	de b7       	in	r29, 0x3e	; 62
   177f6:	27 96       	adiw	r28, 0x07	; 7
   177f8:	e2 e0       	ldi	r30, 0x02	; 2
   177fa:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000177fe <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   177fe:	cf 93       	push	r28
   17800:	00 d0       	rcall	.+0      	; 0x17802 <PRINTER_COMMANDS+0x4>
   17802:	00 d0       	rcall	.+0      	; 0x17804 <PRINTER_COMMANDS+0x6>
   17804:	1f 92       	push	r1
   17806:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17808:	80 91 e0 1e 	lds	r24, 0x1EE0	; 0x801ee0 <listening>
   1780c:	90 e0       	ldi	r25, 0x00	; 0
   1780e:	0e 94 7c 8b 	call	0x116f8	; 0x116f8 <PRINTER_is_MLA>
   17812:	89 2b       	or	r24, r25
   17814:	69 f0       	breq	.+26     	; 0x17830 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17816:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1781a:	85 ff       	sbrs	r24, 5
   1781c:	22 c0       	rjmp	.+68     	; 0x17862 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   1781e:	8c 2f       	mov	r24, r28
   17820:	90 e0       	ldi	r25, 0x00	; 0
   17822:	ed b7       	in	r30, 0x3d	; 61
   17824:	fe b7       	in	r31, 0x3e	; 62
   17826:	95 83       	std	Z+5, r25	; 0x05
   17828:	84 83       	std	Z+4, r24	; 0x04
   1782a:	85 e0       	ldi	r24, 0x05	; 5
   1782c:	9e e2       	ldi	r25, 0x2E	; 46
   1782e:	13 c0       	rjmp	.+38     	; 0x17856 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17830:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <talking>
   17834:	90 e0       	ldi	r25, 0x00	; 0
   17836:	0e 94 8d 8b 	call	0x1171a	; 0x1171a <PRINTER_is_MTA>
   1783a:	89 2b       	or	r24, r25
   1783c:	91 f0       	breq	.+36     	; 0x17862 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1783e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17842:	85 ff       	sbrs	r24, 5
   17844:	0e c0       	rjmp	.+28     	; 0x17862 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17846:	8c 2f       	mov	r24, r28
   17848:	90 e0       	ldi	r25, 0x00	; 0
   1784a:	ed b7       	in	r30, 0x3d	; 61
   1784c:	fe b7       	in	r31, 0x3e	; 62
   1784e:	95 83       	std	Z+5, r25	; 0x05
   17850:	84 83       	std	Z+4, r24	; 0x04
   17852:	8b ee       	ldi	r24, 0xEB	; 235
   17854:	9d e2       	ldi	r25, 0x2D	; 45
   17856:	a0 e0       	ldi	r26, 0x00	; 0
   17858:	81 83       	std	Z+1, r24	; 0x01
   1785a:	92 83       	std	Z+2, r25	; 0x02
   1785c:	a3 83       	std	Z+3, r26	; 0x03
   1785e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17862:	80 e0       	ldi	r24, 0x00	; 0
   17864:	90 e0       	ldi	r25, 0x00	; 0
   17866:	0f 90       	pop	r0
   17868:	0f 90       	pop	r0
   1786a:	0f 90       	pop	r0
   1786c:	0f 90       	pop	r0
   1786e:	0f 90       	pop	r0
   17870:	cf 91       	pop	r28
   17872:	08 95       	ret

00017874 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17874:	0f 93       	push	r16
   17876:	1f 93       	push	r17
   17878:	da 01       	movw	r26, r20
   1787a:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   1787c:	b7 fd       	sbrc	r27, 7
   1787e:	0b c0       	rjmp	.+22     	; 0x17896 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17880:	fd 01       	movw	r30, r26
   17882:	e6 0f       	add	r30, r22
   17884:	f7 1f       	adc	r31, r23
   17886:	e8 0f       	add	r30, r24
   17888:	f9 1f       	adc	r31, r25
   1788a:	00 83       	st	Z, r16
        val >>= 8;
   1788c:	01 2f       	mov	r16, r17
   1788e:	12 2f       	mov	r17, r18
   17890:	23 2f       	mov	r18, r19
   17892:	33 27       	eor	r19, r19
   17894:	f2 cf       	rjmp	.-28     	; 0x1787a <V2B_MSB+0x6>
    }
}
   17896:	1f 91       	pop	r17
   17898:	0f 91       	pop	r16
   1789a:	08 95       	ret

0001789c <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   1789c:	0f 93       	push	r16
   1789e:	1f 93       	push	r17
   178a0:	fc 01       	movw	r30, r24
   178a2:	e6 0f       	add	r30, r22
   178a4:	f7 1f       	adc	r31, r23
   178a6:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   178a8:	cf 01       	movw	r24, r30
   178aa:	86 1b       	sub	r24, r22
   178ac:	97 0b       	sbc	r25, r23
   178ae:	84 17       	cp	r24, r20
   178b0:	95 07       	cpc	r25, r21
   178b2:	34 f4       	brge	.+12     	; 0x178c0 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   178b4:	01 93       	st	Z+, r16
        val >>= 8;
   178b6:	01 2f       	mov	r16, r17
   178b8:	12 2f       	mov	r17, r18
   178ba:	23 2f       	mov	r18, r19
   178bc:	33 27       	eor	r19, r19
   178be:	f4 cf       	rjmp	.-24     	; 0x178a8 <V2B_LSB+0xc>
    }
}
   178c0:	1f 91       	pop	r17
   178c2:	0f 91       	pop	r16
   178c4:	08 95       	ret

000178c6 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   178c6:	cf 92       	push	r12
   178c8:	df 92       	push	r13
   178ca:	ef 92       	push	r14
   178cc:	ff 92       	push	r15
   178ce:	fc 01       	movw	r30, r24
   178d0:	e6 0f       	add	r30, r22
   178d2:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   178d4:	60 e0       	ldi	r22, 0x00	; 0
   178d6:	70 e0       	ldi	r23, 0x00	; 0
   178d8:	cb 01       	movw	r24, r22
   178da:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   178dc:	9f 01       	movw	r18, r30
   178de:	2a 1b       	sub	r18, r26
   178e0:	3b 0b       	sbc	r19, r27
   178e2:	24 17       	cp	r18, r20
   178e4:	35 07       	cpc	r19, r21
   178e6:	4c f4       	brge	.+18     	; 0x178fa <B2V_MSB+0x34>
    {
        val <<= 8;
   178e8:	cc 24       	eor	r12, r12
   178ea:	d6 2e       	mov	r13, r22
   178ec:	e7 2e       	mov	r14, r23
   178ee:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   178f0:	21 91       	ld	r18, Z+
   178f2:	c7 01       	movw	r24, r14
   178f4:	b6 01       	movw	r22, r12
   178f6:	62 2b       	or	r22, r18
   178f8:	f1 cf       	rjmp	.-30     	; 0x178dc <B2V_MSB+0x16>
    }
    return(val);
}
   178fa:	ff 90       	pop	r15
   178fc:	ef 90       	pop	r14
   178fe:	df 90       	pop	r13
   17900:	cf 90       	pop	r12
   17902:	08 95       	ret

00017904 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17904:	cf 92       	push	r12
   17906:	df 92       	push	r13
   17908:	ef 92       	push	r14
   1790a:	ff 92       	push	r15
   1790c:	9c 01       	movw	r18, r24
   1790e:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17910:	60 e0       	ldi	r22, 0x00	; 0
   17912:	70 e0       	ldi	r23, 0x00	; 0
   17914:	cb 01       	movw	r24, r22
   17916:	41 50       	subi	r20, 0x01	; 1
   17918:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   1791a:	57 fd       	sbrc	r21, 7
   1791c:	0e c0       	rjmp	.+28     	; 0x1793a <B2V_LSB+0x36>
    {
        val <<= 8;
   1791e:	cc 24       	eor	r12, r12
   17920:	d6 2e       	mov	r13, r22
   17922:	e7 2e       	mov	r14, r23
   17924:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17926:	fa 01       	movw	r30, r20
   17928:	ea 0f       	add	r30, r26
   1792a:	fb 1f       	adc	r31, r27
   1792c:	e2 0f       	add	r30, r18
   1792e:	f3 1f       	adc	r31, r19
   17930:	e0 81       	ld	r30, Z
   17932:	c7 01       	movw	r24, r14
   17934:	b6 01       	movw	r22, r12
   17936:	6e 2b       	or	r22, r30
   17938:	ee cf       	rjmp	.-36     	; 0x17916 <B2V_LSB+0x12>
    }
    return(val);
}
   1793a:	ff 90       	pop	r15
   1793c:	ef 90       	pop	r14
   1793e:	df 90       	pop	r13
   17940:	cf 90       	pop	r12
   17942:	08 95       	ret

00017944 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17944:	cf 93       	push	r28
   17946:	df 93       	push	r29
   17948:	00 d0       	rcall	.+0      	; 0x1794a <lif_help+0x6>
   1794a:	1f 92       	push	r1
   1794c:	ec 01       	movw	r28, r24
   1794e:	89 ec       	ldi	r24, 0xC9	; 201
   17950:	92 e4       	ldi	r25, 0x42	; 66
   17952:	a0 e0       	ldi	r26, 0x00	; 0
   17954:	ed b7       	in	r30, 0x3d	; 61
   17956:	fe b7       	in	r31, 0x3e	; 62
   17958:	81 83       	std	Z+1, r24	; 0x01
   1795a:	92 83       	std	Z+2, r25	; 0x02
   1795c:	a3 83       	std	Z+3, r26	; 0x03
   1795e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17962:	cd 2b       	or	r28, r29
   17964:	51 f0       	breq	.+20     	; 0x1797a <lif_help+0x36>
   17966:	85 e0       	ldi	r24, 0x05	; 5
   17968:	91 e4       	ldi	r25, 0x41	; 65
   1796a:	a0 e0       	ldi	r26, 0x00	; 0
   1796c:	ed b7       	in	r30, 0x3d	; 61
   1796e:	fe b7       	in	r31, 0x3e	; 62
   17970:	81 83       	std	Z+1, r24	; 0x01
   17972:	92 83       	std	Z+2, r25	; 0x02
   17974:	a3 83       	std	Z+3, r26	; 0x03
   17976:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1797a:	cd b7       	in	r28, 0x3d	; 61
   1797c:	de b7       	in	r29, 0x3e	; 62
   1797e:	23 96       	adiw	r28, 0x03	; 3
   17980:	e2 e0       	ldi	r30, 0x02	; 2
   17982:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00017986 <lif_calloc>:
   17986:	cf 92       	push	r12
   17988:	df 92       	push	r13
   1798a:	ef 92       	push	r14
   1798c:	ff 92       	push	r15
   1798e:	cf 93       	push	r28
   17990:	df 93       	push	r29
   17992:	ad b7       	in	r26, 0x3d	; 61
   17994:	be b7       	in	r27, 0x3e	; 62
   17996:	17 97       	sbiw	r26, 0x07	; 7
   17998:	0f b6       	in	r0, 0x3f	; 63
   1799a:	f8 94       	cli
   1799c:	be bf       	out	0x3e, r27	; 62
   1799e:	0f be       	out	0x3f, r0	; 63
   179a0:	ad bf       	out	0x3d, r26	; 61
   179a2:	6b 01       	movw	r12, r22
   179a4:	7c 01       	movw	r14, r24
   179a6:	61 e0       	ldi	r22, 0x01	; 1
   179a8:	70 e0       	ldi	r23, 0x00	; 0
   179aa:	c6 01       	movw	r24, r12
   179ac:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safecalloc>
   179b0:	ec 01       	movw	r28, r24
   179b2:	89 2b       	or	r24, r25
   179b4:	71 f4       	brne	.+28     	; 0x179d2 <lif_calloc+0x4c>
   179b6:	ed b7       	in	r30, 0x3d	; 61
   179b8:	fe b7       	in	r31, 0x3e	; 62
   179ba:	c4 82       	std	Z+4, r12	; 0x04
   179bc:	d5 82       	std	Z+5, r13	; 0x05
   179be:	e6 82       	std	Z+6, r14	; 0x06
   179c0:	f7 82       	std	Z+7, r15	; 0x07
   179c2:	8b eb       	ldi	r24, 0xBB	; 187
   179c4:	90 e4       	ldi	r25, 0x40	; 64
   179c6:	a0 e0       	ldi	r26, 0x00	; 0
   179c8:	81 83       	std	Z+1, r24	; 0x01
   179ca:	92 83       	std	Z+2, r25	; 0x02
   179cc:	a3 83       	std	Z+3, r26	; 0x03
   179ce:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   179d2:	ce 01       	movw	r24, r28
   179d4:	ad b7       	in	r26, 0x3d	; 61
   179d6:	be b7       	in	r27, 0x3e	; 62
   179d8:	17 96       	adiw	r26, 0x07	; 7
   179da:	0f b6       	in	r0, 0x3f	; 63
   179dc:	f8 94       	cli
   179de:	be bf       	out	0x3e, r27	; 62
   179e0:	0f be       	out	0x3f, r0	; 63
   179e2:	ad bf       	out	0x3d, r26	; 61
   179e4:	df 91       	pop	r29
   179e6:	cf 91       	pop	r28
   179e8:	ff 90       	pop	r15
   179ea:	ef 90       	pop	r14
   179ec:	df 90       	pop	r13
   179ee:	cf 90       	pop	r12
   179f0:	08 95       	ret

000179f2 <lif_free>:
   179f2:	00 d0       	rcall	.+0      	; 0x179f4 <lif_free+0x2>
   179f4:	1f 92       	push	r1
   179f6:	00 97       	sbiw	r24, 0x00	; 0
   179f8:	59 f4       	brne	.+22     	; 0x17a10 <lif_free+0x1e>
   179fa:	83 ea       	ldi	r24, 0xA3	; 163
   179fc:	90 e4       	ldi	r25, 0x40	; 64
   179fe:	a0 e0       	ldi	r26, 0x00	; 0
   17a00:	ed b7       	in	r30, 0x3d	; 61
   17a02:	fe b7       	in	r31, 0x3e	; 62
   17a04:	81 83       	std	Z+1, r24	; 0x01
   17a06:	92 83       	std	Z+2, r25	; 0x02
   17a08:	a3 83       	std	Z+3, r26	; 0x03
   17a0a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17a0e:	02 c0       	rjmp	.+4      	; 0x17a14 <lif_free+0x22>
   17a10:	0e 94 88 25 	call	0x4b10	; 0x4b10 <safefree>
   17a14:	0f 90       	pop	r0
   17a16:	0f 90       	pop	r0
   17a18:	0f 90       	pop	r0
   17a1a:	08 95       	ret

00017a1c <lif_stralloc>:
   17a1c:	0f 93       	push	r16
   17a1e:	1f 93       	push	r17
   17a20:	cf 93       	push	r28
   17a22:	df 93       	push	r29
   17a24:	ec 01       	movw	r28, r24
   17a26:	fc 01       	movw	r30, r24
   17a28:	01 90       	ld	r0, Z+
   17a2a:	00 20       	and	r0, r0
   17a2c:	e9 f7       	brne	.-6      	; 0x17a28 <lif_stralloc+0xc>
   17a2e:	bf 01       	movw	r22, r30
   17a30:	68 1b       	sub	r22, r24
   17a32:	79 0b       	sbc	r23, r25
   17a34:	6d 5f       	subi	r22, 0xFD	; 253
   17a36:	7f 4f       	sbci	r23, 0xFF	; 255
   17a38:	07 2e       	mov	r0, r23
   17a3a:	00 0c       	add	r0, r0
   17a3c:	88 0b       	sbc	r24, r24
   17a3e:	99 0b       	sbc	r25, r25
   17a40:	a2 df       	rcall	.-188    	; 0x17986 <lif_calloc>
   17a42:	8c 01       	movw	r16, r24
   17a44:	00 97       	sbiw	r24, 0x00	; 0
   17a46:	19 f0       	breq	.+6      	; 0x17a4e <lif_stralloc+0x32>
   17a48:	be 01       	movw	r22, r28
   17a4a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <strcpy>
   17a4e:	c8 01       	movw	r24, r16
   17a50:	df 91       	pop	r29
   17a52:	cf 91       	pop	r28
   17a54:	1f 91       	pop	r17
   17a56:	0f 91       	pop	r16
   17a58:	08 95       	ret

00017a5a <lif_open>:
   17a5a:	ef 92       	push	r14
   17a5c:	ff 92       	push	r15
   17a5e:	0f 93       	push	r16
   17a60:	1f 93       	push	r17
   17a62:	cf 93       	push	r28
   17a64:	df 93       	push	r29
   17a66:	ad b7       	in	r26, 0x3d	; 61
   17a68:	be b7       	in	r27, 0x3e	; 62
   17a6a:	17 97       	sbiw	r26, 0x07	; 7
   17a6c:	0f b6       	in	r0, 0x3f	; 63
   17a6e:	f8 94       	cli
   17a70:	be bf       	out	0x3e, r27	; 62
   17a72:	0f be       	out	0x3f, r0	; 63
   17a74:	ad bf       	out	0x3d, r26	; 61
   17a76:	8c 01       	movw	r16, r24
   17a78:	7b 01       	movw	r14, r22
   17a7a:	0e 94 d3 7c 	call	0xf9a6	; 0xf9a6 <fopen>
   17a7e:	ec 01       	movw	r28, r24
   17a80:	89 2b       	or	r24, r25
   17a82:	71 f4       	brne	.+28     	; 0x17aa0 <lif_open+0x46>
   17a84:	ed b7       	in	r30, 0x3d	; 61
   17a86:	fe b7       	in	r31, 0x3e	; 62
   17a88:	f7 82       	std	Z+7, r15	; 0x07
   17a8a:	e6 82       	std	Z+6, r14	; 0x06
   17a8c:	15 83       	std	Z+5, r17	; 0x05
   17a8e:	04 83       	std	Z+4, r16	; 0x04
   17a90:	8e e7       	ldi	r24, 0x7E	; 126
   17a92:	90 e4       	ldi	r25, 0x40	; 64
   17a94:	a0 e0       	ldi	r26, 0x00	; 0
   17a96:	81 83       	std	Z+1, r24	; 0x01
   17a98:	92 83       	std	Z+2, r25	; 0x02
   17a9a:	a3 83       	std	Z+3, r26	; 0x03
   17a9c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17aa0:	ce 01       	movw	r24, r28
   17aa2:	cd b7       	in	r28, 0x3d	; 61
   17aa4:	de b7       	in	r29, 0x3e	; 62
   17aa6:	27 96       	adiw	r28, 0x07	; 7
   17aa8:	e6 e0       	ldi	r30, 0x06	; 6
   17aaa:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00017aae <lif_stat>:
   17aae:	0f 93       	push	r16
   17ab0:	1f 93       	push	r17
   17ab2:	cf 93       	push	r28
   17ab4:	df 93       	push	r29
   17ab6:	00 d0       	rcall	.+0      	; 0x17ab8 <lif_stat+0xa>
   17ab8:	00 d0       	rcall	.+0      	; 0x17aba <lif_stat+0xc>
   17aba:	1f 92       	push	r1
   17abc:	8c 01       	movw	r16, r24
   17abe:	d6 2f       	mov	r29, r22
   17ac0:	c7 2f       	mov	r28, r23
   17ac2:	0e 94 d8 77 	call	0xefb0	; 0xefb0 <stat>
   17ac6:	97 ff       	sbrs	r25, 7
   17ac8:	0f c0       	rjmp	.+30     	; 0x17ae8 <lif_stat+0x3a>
   17aca:	ed b7       	in	r30, 0x3d	; 61
   17acc:	fe b7       	in	r31, 0x3e	; 62
   17ace:	15 83       	std	Z+5, r17	; 0x05
   17ad0:	04 83       	std	Z+4, r16	; 0x04
   17ad2:	85 e6       	ldi	r24, 0x65	; 101
   17ad4:	90 e4       	ldi	r25, 0x40	; 64
   17ad6:	a0 e0       	ldi	r26, 0x00	; 0
   17ad8:	81 83       	std	Z+1, r24	; 0x01
   17ada:	92 83       	std	Z+2, r25	; 0x02
   17adc:	a3 83       	std	Z+3, r26	; 0x03
   17ade:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17ae2:	80 e0       	ldi	r24, 0x00	; 0
   17ae4:	90 e0       	ldi	r25, 0x00	; 0
   17ae6:	02 c0       	rjmp	.+4      	; 0x17aec <lif_stat+0x3e>
   17ae8:	8d 2f       	mov	r24, r29
   17aea:	9c 2f       	mov	r25, r28
   17aec:	cd b7       	in	r28, 0x3d	; 61
   17aee:	de b7       	in	r29, 0x3e	; 62
   17af0:	25 96       	adiw	r28, 0x05	; 5
   17af2:	e4 e0       	ldi	r30, 0x04	; 4
   17af4:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00017af8 <lif_seek_msg>:
   17af8:	a9 e0       	ldi	r26, 0x09	; 9
   17afa:	b0 e0       	ldi	r27, 0x00	; 0
   17afc:	e2 e8       	ldi	r30, 0x82	; 130
   17afe:	fd eb       	ldi	r31, 0xBD	; 189
   17b00:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
   17b04:	ec 01       	movw	r28, r24
   17b06:	6a 01       	movw	r12, r20
   17b08:	7b 01       	movw	r14, r22
   17b0a:	89 01       	movw	r16, r18
   17b0c:	0e 94 12 79 	call	0xf224	; 0xf224 <ftell>
   17b10:	6c 15       	cp	r22, r12
   17b12:	7d 05       	cpc	r23, r13
   17b14:	8e 05       	cpc	r24, r14
   17b16:	9f 05       	cpc	r25, r15
   17b18:	19 f4       	brne	.+6      	; 0x17b20 <lif_seek_msg+0x28>
   17b1a:	81 e0       	ldi	r24, 0x01	; 1
   17b1c:	90 e0       	ldi	r25, 0x00	; 0
   17b1e:	1b c0       	rjmp	.+54     	; 0x17b56 <lif_seek_msg+0x5e>
   17b20:	20 e0       	ldi	r18, 0x00	; 0
   17b22:	30 e0       	ldi	r19, 0x00	; 0
   17b24:	b7 01       	movw	r22, r14
   17b26:	a6 01       	movw	r20, r12
   17b28:	ce 01       	movw	r24, r28
   17b2a:	0e 94 95 79 	call	0xf32a	; 0xf32a <fseek>
   17b2e:	97 ff       	sbrs	r25, 7
   17b30:	f4 cf       	rjmp	.-24     	; 0x17b1a <lif_seek_msg+0x22>
   17b32:	ed b7       	in	r30, 0x3d	; 61
   17b34:	fe b7       	in	r31, 0x3e	; 62
   17b36:	c6 82       	std	Z+6, r12	; 0x06
   17b38:	d7 82       	std	Z+7, r13	; 0x07
   17b3a:	e0 86       	std	Z+8, r14	; 0x08
   17b3c:	f1 86       	std	Z+9, r15	; 0x09
   17b3e:	15 83       	std	Z+5, r17	; 0x05
   17b40:	04 83       	std	Z+4, r16	; 0x04
   17b42:	84 e4       	ldi	r24, 0x44	; 68
   17b44:	90 e4       	ldi	r25, 0x40	; 64
   17b46:	a0 e0       	ldi	r26, 0x00	; 0
   17b48:	81 83       	std	Z+1, r24	; 0x01
   17b4a:	92 83       	std	Z+2, r25	; 0x02
   17b4c:	a3 83       	std	Z+3, r26	; 0x03
   17b4e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17b52:	80 e0       	ldi	r24, 0x00	; 0
   17b54:	90 e0       	ldi	r25, 0x00	; 0
   17b56:	cd b7       	in	r28, 0x3d	; 61
   17b58:	de b7       	in	r29, 0x3e	; 62
   17b5a:	29 96       	adiw	r28, 0x09	; 9
   17b5c:	e8 e0       	ldi	r30, 0x08	; 8
   17b5e:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00017b62 <lif_read>:
   17b62:	af e0       	ldi	r26, 0x0F	; 15
   17b64:	b0 e0       	ldi	r27, 0x00	; 0
   17b66:	e7 eb       	ldi	r30, 0xB7	; 183
   17b68:	fd eb       	ldi	r31, 0xBD	; 189
   17b6a:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
   17b6e:	ec 01       	movw	r28, r24
   17b70:	7b 01       	movw	r14, r22
   17b72:	49 01       	movw	r8, r18
   17b74:	5a 01       	movw	r10, r20
   17b76:	28 81       	ld	r18, Y
   17b78:	39 81       	ldd	r19, Y+1	; 0x01
   17b7a:	b5 01       	movw	r22, r10
   17b7c:	a4 01       	movw	r20, r8
   17b7e:	8a 81       	ldd	r24, Y+2	; 0x02
   17b80:	9b 81       	ldd	r25, Y+3	; 0x03
   17b82:	ba df       	rcall	.-140    	; 0x17af8 <lif_seek_msg>
   17b84:	89 2b       	or	r24, r25
   17b86:	a1 f1       	breq	.+104    	; 0x17bf0 <lif_read+0x8e>
   17b88:	2a 81       	ldd	r18, Y+2	; 0x02
   17b8a:	3b 81       	ldd	r19, Y+3	; 0x03
   17b8c:	a8 01       	movw	r20, r16
   17b8e:	61 e0       	ldi	r22, 0x01	; 1
   17b90:	70 e0       	ldi	r23, 0x00	; 0
   17b92:	c7 01       	movw	r24, r14
   17b94:	0e 94 29 7a 	call	0xf452	; 0xf452 <fread>
   17b98:	6c 01       	movw	r12, r24
   17b9a:	e1 2c       	mov	r14, r1
   17b9c:	f1 2c       	mov	r15, r1
   17b9e:	b8 01       	movw	r22, r16
   17ba0:	01 2e       	mov	r0, r17
   17ba2:	00 0c       	add	r0, r0
   17ba4:	88 0b       	sbc	r24, r24
   17ba6:	99 0b       	sbc	r25, r25
   17ba8:	c6 16       	cp	r12, r22
   17baa:	d7 06       	cpc	r13, r23
   17bac:	e8 06       	cpc	r14, r24
   17bae:	f9 06       	cpc	r15, r25
   17bb0:	29 f1       	breq	.+74     	; 0x17bfc <lif_read+0x9a>
   17bb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17bb6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17bba:	92 ff       	sbrs	r25, 2
   17bbc:	1d c0       	rjmp	.+58     	; 0x17bf8 <lif_read+0x96>
   17bbe:	ed b7       	in	r30, 0x3d	; 61
   17bc0:	fe b7       	in	r31, 0x3e	; 62
   17bc2:	17 87       	std	Z+15, r17	; 0x0f
   17bc4:	06 87       	std	Z+14, r16	; 0x0e
   17bc6:	c2 86       	std	Z+10, r12	; 0x0a
   17bc8:	d3 86       	std	Z+11, r13	; 0x0b
   17bca:	e4 86       	std	Z+12, r14	; 0x0c
   17bcc:	f5 86       	std	Z+13, r15	; 0x0d
   17bce:	86 82       	std	Z+6, r8	; 0x06
   17bd0:	97 82       	std	Z+7, r9	; 0x07
   17bd2:	a0 86       	std	Z+8, r10	; 0x08
   17bd4:	b1 86       	std	Z+9, r11	; 0x09
   17bd6:	88 81       	ld	r24, Y
   17bd8:	99 81       	ldd	r25, Y+1	; 0x01
   17bda:	95 83       	std	Z+5, r25	; 0x05
   17bdc:	84 83       	std	Z+4, r24	; 0x04
   17bde:	88 e0       	ldi	r24, 0x08	; 8
   17be0:	90 e4       	ldi	r25, 0x40	; 64
   17be2:	a0 e0       	ldi	r26, 0x00	; 0
   17be4:	81 83       	std	Z+1, r24	; 0x01
   17be6:	92 83       	std	Z+2, r25	; 0x02
   17be8:	a3 83       	std	Z+3, r26	; 0x03
   17bea:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17bee:	04 c0       	rjmp	.+8      	; 0x17bf8 <lif_read+0x96>
   17bf0:	60 e0       	ldi	r22, 0x00	; 0
   17bf2:	70 e0       	ldi	r23, 0x00	; 0
   17bf4:	cb 01       	movw	r24, r22
   17bf6:	02 c0       	rjmp	.+4      	; 0x17bfc <lif_read+0x9a>
   17bf8:	c7 01       	movw	r24, r14
   17bfa:	b6 01       	movw	r22, r12
   17bfc:	cd b7       	in	r28, 0x3d	; 61
   17bfe:	de b7       	in	r29, 0x3e	; 62
   17c00:	2f 96       	adiw	r28, 0x0f	; 15
   17c02:	ec e0       	ldi	r30, 0x0C	; 12
   17c04:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

00017c08 <lif_write>:
   17c08:	8f 92       	push	r8
   17c0a:	9f 92       	push	r9
   17c0c:	af 92       	push	r10
   17c0e:	bf 92       	push	r11
   17c10:	ef 92       	push	r14
   17c12:	ff 92       	push	r15
   17c14:	0f 93       	push	r16
   17c16:	1f 93       	push	r17
   17c18:	cf 93       	push	r28
   17c1a:	df 93       	push	r29
   17c1c:	ad b7       	in	r26, 0x3d	; 61
   17c1e:	be b7       	in	r27, 0x3e	; 62
   17c20:	1d 97       	sbiw	r26, 0x0d	; 13
   17c22:	0f b6       	in	r0, 0x3f	; 63
   17c24:	f8 94       	cli
   17c26:	be bf       	out	0x3e, r27	; 62
   17c28:	0f be       	out	0x3f, r0	; 63
   17c2a:	ad bf       	out	0x3d, r26	; 61
   17c2c:	7c 01       	movw	r14, r24
   17c2e:	eb 01       	movw	r28, r22
   17c30:	49 01       	movw	r8, r18
   17c32:	5a 01       	movw	r10, r20
   17c34:	fc 01       	movw	r30, r24
   17c36:	20 81       	ld	r18, Z
   17c38:	31 81       	ldd	r19, Z+1	; 0x01
   17c3a:	b5 01       	movw	r22, r10
   17c3c:	a4 01       	movw	r20, r8
   17c3e:	82 81       	ldd	r24, Z+2	; 0x02
   17c40:	93 81       	ldd	r25, Z+3	; 0x03
   17c42:	5a df       	rcall	.-332    	; 0x17af8 <lif_seek_msg>
   17c44:	00 97       	sbiw	r24, 0x00	; 0
   17c46:	81 f1       	breq	.+96     	; 0x17ca8 <lif_write+0xa0>
   17c48:	f7 01       	movw	r30, r14
   17c4a:	22 81       	ldd	r18, Z+2	; 0x02
   17c4c:	33 81       	ldd	r19, Z+3	; 0x03
   17c4e:	a8 01       	movw	r20, r16
   17c50:	61 e0       	ldi	r22, 0x01	; 1
   17c52:	70 e0       	ldi	r23, 0x00	; 0
   17c54:	ce 01       	movw	r24, r28
   17c56:	0e 94 fb 7a 	call	0xf5f6	; 0xf5f6 <fwrite>
   17c5a:	ec 01       	movw	r28, r24
   17c5c:	08 17       	cp	r16, r24
   17c5e:	19 07       	cpc	r17, r25
   17c60:	01 f1       	breq	.+64     	; 0x17ca2 <lif_write+0x9a>
   17c62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c66:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17c6a:	92 ff       	sbrs	r25, 2
   17c6c:	1c c0       	rjmp	.+56     	; 0x17ca6 <lif_write+0x9e>
   17c6e:	ed b7       	in	r30, 0x3d	; 61
   17c70:	fe b7       	in	r31, 0x3e	; 62
   17c72:	15 87       	std	Z+13, r17	; 0x0d
   17c74:	04 87       	std	Z+12, r16	; 0x0c
   17c76:	d3 87       	std	Z+11, r29	; 0x0b
   17c78:	c2 87       	std	Z+10, r28	; 0x0a
   17c7a:	86 82       	std	Z+6, r8	; 0x06
   17c7c:	97 82       	std	Z+7, r9	; 0x07
   17c7e:	a0 86       	std	Z+8, r10	; 0x08
   17c80:	b1 86       	std	Z+9, r11	; 0x09
   17c82:	f7 01       	movw	r30, r14
   17c84:	80 81       	ld	r24, Z
   17c86:	91 81       	ldd	r25, Z+1	; 0x01
   17c88:	ed b7       	in	r30, 0x3d	; 61
   17c8a:	fe b7       	in	r31, 0x3e	; 62
   17c8c:	95 83       	std	Z+5, r25	; 0x05
   17c8e:	84 83       	std	Z+4, r24	; 0x04
   17c90:	8b ec       	ldi	r24, 0xCB	; 203
   17c92:	9f e3       	ldi	r25, 0x3F	; 63
   17c94:	a0 e0       	ldi	r26, 0x00	; 0
   17c96:	81 83       	std	Z+1, r24	; 0x01
   17c98:	92 83       	std	Z+2, r25	; 0x02
   17c9a:	a3 83       	std	Z+3, r26	; 0x03
   17c9c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   17ca0:	02 c0       	rjmp	.+4      	; 0x17ca6 <lif_write+0x9e>
   17ca2:	c8 01       	movw	r24, r16
   17ca4:	01 c0       	rjmp	.+2      	; 0x17ca8 <lif_write+0xa0>
   17ca6:	ce 01       	movw	r24, r28
   17ca8:	ad b7       	in	r26, 0x3d	; 61
   17caa:	be b7       	in	r27, 0x3e	; 62
   17cac:	1d 96       	adiw	r26, 0x0d	; 13
   17cae:	0f b6       	in	r0, 0x3f	; 63
   17cb0:	f8 94       	cli
   17cb2:	be bf       	out	0x3e, r27	; 62
   17cb4:	0f be       	out	0x3f, r0	; 63
   17cb6:	ad bf       	out	0x3d, r26	; 61
   17cb8:	df 91       	pop	r29
   17cba:	cf 91       	pop	r28
   17cbc:	1f 91       	pop	r17
   17cbe:	0f 91       	pop	r16
   17cc0:	ff 90       	pop	r15
   17cc2:	ef 90       	pop	r14
   17cc4:	bf 90       	pop	r11
   17cc6:	af 90       	pop	r10
   17cc8:	9f 90       	pop	r9
   17cca:	8f 90       	pop	r8
   17ccc:	08 95       	ret

00017cce <lif_chars>:
   17cce:	80 32       	cpi	r24, 0x20	; 32
   17cd0:	91 05       	cpc	r25, r1
   17cd2:	e1 f0       	breq	.+56     	; 0x17d0c <lif_chars+0x3e>
   17cd4:	9c 01       	movw	r18, r24
   17cd6:	21 56       	subi	r18, 0x61	; 97
   17cd8:	31 09       	sbc	r19, r1
   17cda:	2a 31       	cpi	r18, 0x1A	; 26
   17cdc:	31 05       	cpc	r19, r1
   17cde:	10 f4       	brcc	.+4      	; 0x17ce4 <lif_chars+0x16>
   17ce0:	80 97       	sbiw	r24, 0x20	; 32
   17ce2:	08 95       	ret
   17ce4:	9c 01       	movw	r18, r24
   17ce6:	21 54       	subi	r18, 0x41	; 65
   17ce8:	31 09       	sbc	r19, r1
   17cea:	2a 31       	cpi	r18, 0x1A	; 26
   17cec:	31 05       	cpc	r19, r1
   17cee:	c8 f0       	brcs	.+50     	; 0x17d22 <lif_chars+0x54>
   17cf0:	16 16       	cp	r1, r22
   17cf2:	17 06       	cpc	r1, r23
   17cf4:	74 f4       	brge	.+28     	; 0x17d12 <lif_chars+0x44>
   17cf6:	2f 5e       	subi	r18, 0xEF	; 239
   17cf8:	3f 4f       	sbci	r19, 0xFF	; 255
   17cfa:	2a 30       	cpi	r18, 0x0A	; 10
   17cfc:	31 05       	cpc	r19, r1
   17cfe:	88 f0       	brcs	.+34     	; 0x17d22 <lif_chars+0x54>
   17d00:	8f 35       	cpi	r24, 0x5F	; 95
   17d02:	91 05       	cpc	r25, r1
   17d04:	49 f0       	breq	.+18     	; 0x17d18 <lif_chars+0x4a>
   17d06:	8d 97       	sbiw	r24, 0x2d	; 45
   17d08:	21 f4       	brne	.+8      	; 0x17d12 <lif_chars+0x44>
   17d0a:	09 c0       	rjmp	.+18     	; 0x17d1e <lif_chars+0x50>
   17d0c:	80 e2       	ldi	r24, 0x20	; 32
   17d0e:	90 e0       	ldi	r25, 0x00	; 0
   17d10:	08 95       	ret
   17d12:	80 e0       	ldi	r24, 0x00	; 0
   17d14:	90 e0       	ldi	r25, 0x00	; 0
   17d16:	08 95       	ret
   17d18:	8f e5       	ldi	r24, 0x5F	; 95
   17d1a:	90 e0       	ldi	r25, 0x00	; 0
   17d1c:	08 95       	ret
   17d1e:	8d e2       	ldi	r24, 0x2D	; 45
   17d20:	90 e0       	ldi	r25, 0x00	; 0
   17d22:	08 95       	ret

00017d24 <lif_B2S>:
   17d24:	a0 e0       	ldi	r26, 0x00	; 0
   17d26:	b0 e0       	ldi	r27, 0x00	; 0
   17d28:	e8 e9       	ldi	r30, 0x98	; 152
   17d2a:	fe eb       	ldi	r31, 0xBE	; 190
   17d2c:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
   17d30:	5c 01       	movw	r10, r24
   17d32:	6b 01       	movw	r12, r22
   17d34:	ea 01       	movw	r28, r20
   17d36:	4c 01       	movw	r8, r24
   17d38:	ee 24       	eor	r14, r14
   17d3a:	e3 94       	inc	r14
   17d3c:	f1 2c       	mov	r15, r1
   17d3e:	00 e0       	ldi	r16, 0x00	; 0
   17d40:	10 e0       	ldi	r17, 0x00	; 0
   17d42:	0c 17       	cp	r16, r28
   17d44:	1d 07       	cpc	r17, r29
   17d46:	6c f4       	brge	.+26     	; 0x17d62 <lif_B2S+0x3e>
   17d48:	f4 01       	movw	r30, r8
   17d4a:	81 91       	ld	r24, Z+
   17d4c:	4f 01       	movw	r8, r30
   17d4e:	b8 01       	movw	r22, r16
   17d50:	90 e0       	ldi	r25, 0x00	; 0
   17d52:	bd df       	rcall	.-134    	; 0x17cce <lif_chars>
   17d54:	89 2b       	or	r24, r25
   17d56:	11 f4       	brne	.+4      	; 0x17d5c <lif_B2S+0x38>
   17d58:	e1 2c       	mov	r14, r1
   17d5a:	f1 2c       	mov	r15, r1
   17d5c:	0f 5f       	subi	r16, 0xFF	; 255
   17d5e:	1f 4f       	sbci	r17, 0xFF	; 255
   17d60:	f0 cf       	rjmp	.-32     	; 0x17d42 <lif_B2S+0x1e>
   17d62:	d6 01       	movw	r26, r12
   17d64:	f5 01       	movw	r30, r10
   17d66:	cf 01       	movw	r24, r30
   17d68:	8a 19       	sub	r24, r10
   17d6a:	9b 09       	sbc	r25, r11
   17d6c:	8c 17       	cp	r24, r28
   17d6e:	9d 07       	cpc	r25, r29
   17d70:	1c f4       	brge	.+6      	; 0x17d78 <lif_B2S+0x54>
   17d72:	81 91       	ld	r24, Z+
   17d74:	8d 93       	st	X+, r24
   17d76:	f7 cf       	rjmp	.-18     	; 0x17d66 <lif_B2S+0x42>
   17d78:	d7 ff       	sbrs	r29, 7
   17d7a:	02 c0       	rjmp	.+4      	; 0x17d80 <lif_B2S+0x5c>
   17d7c:	c0 e0       	ldi	r28, 0x00	; 0
   17d7e:	d0 e0       	ldi	r29, 0x00	; 0
   17d80:	cc 0d       	add	r28, r12
   17d82:	dd 1d       	adc	r29, r13
   17d84:	18 82       	st	Y, r1
   17d86:	c6 01       	movw	r24, r12
   17d88:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <trim_tail>
   17d8c:	c7 01       	movw	r24, r14
   17d8e:	cd b7       	in	r28, 0x3d	; 61
   17d90:	de b7       	in	r29, 0x3e	; 62
   17d92:	ec e0       	ldi	r30, 0x0C	; 12
   17d94:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

00017d98 <lif_checkname>:
   17d98:	ef 92       	push	r14
   17d9a:	ff 92       	push	r15
   17d9c:	0f 93       	push	r16
   17d9e:	1f 93       	push	r17
   17da0:	cf 93       	push	r28
   17da2:	df 93       	push	r29
   17da4:	7c 01       	movw	r14, r24
   17da6:	ec 01       	movw	r28, r24
   17da8:	01 e0       	ldi	r16, 0x01	; 1
   17daa:	10 e0       	ldi	r17, 0x00	; 0
   17dac:	be 01       	movw	r22, r28
   17dae:	6e 19       	sub	r22, r14
   17db0:	7f 09       	sbc	r23, r15
   17db2:	89 91       	ld	r24, Y+
   17db4:	88 23       	and	r24, r24
   17db6:	39 f0       	breq	.+14     	; 0x17dc6 <lif_checkname+0x2e>
   17db8:	90 e0       	ldi	r25, 0x00	; 0
   17dba:	89 df       	rcall	.-238    	; 0x17cce <lif_chars>
   17dbc:	89 2b       	or	r24, r25
   17dbe:	b1 f7       	brne	.-20     	; 0x17dac <lif_checkname+0x14>
   17dc0:	00 e0       	ldi	r16, 0x00	; 0
   17dc2:	10 e0       	ldi	r17, 0x00	; 0
   17dc4:	f3 cf       	rjmp	.-26     	; 0x17dac <lif_checkname+0x14>
   17dc6:	c8 01       	movw	r24, r16
   17dc8:	cd b7       	in	r28, 0x3d	; 61
   17dca:	de b7       	in	r29, 0x3e	; 62
   17dcc:	e6 e0       	ldi	r30, 0x06	; 6
   17dce:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00017dd2 <lif_S2B>:
   17dd2:	fb 01       	movw	r30, r22
   17dd4:	dc 01       	movw	r26, r24
   17dd6:	20 e0       	ldi	r18, 0x00	; 0
   17dd8:	30 e0       	ldi	r19, 0x00	; 0
   17dda:	61 91       	ld	r22, Z+
   17ddc:	61 11       	cpse	r22, r1
   17dde:	05 c0       	rjmp	.+10     	; 0x17dea <lif_S2B+0x18>
   17de0:	fc 01       	movw	r30, r24
   17de2:	e2 0f       	add	r30, r18
   17de4:	f3 1f       	adc	r31, r19
   17de6:	60 e2       	ldi	r22, 0x20	; 32
   17de8:	08 c0       	rjmp	.+16     	; 0x17dfa <lif_S2B+0x28>
   17dea:	24 17       	cp	r18, r20
   17dec:	35 07       	cpc	r19, r21
   17dee:	24 f4       	brge	.+8      	; 0x17df8 <lif_S2B+0x26>
   17df0:	6d 93       	st	X+, r22
   17df2:	2f 5f       	subi	r18, 0xFF	; 255
   17df4:	3f 4f       	sbci	r19, 0xFF	; 255
   17df6:	f1 cf       	rjmp	.-30     	; 0x17dda <lif_S2B+0x8>
   17df8:	08 95       	ret
   17dfa:	9f 01       	movw	r18, r30
   17dfc:	28 1b       	sub	r18, r24
   17dfe:	39 0b       	sbc	r19, r25
   17e00:	24 17       	cp	r18, r20
   17e02:	35 07       	cpc	r19, r21
   17e04:	14 f4       	brge	.+4      	; 0x17e0a <lif_S2B+0x38>
   17e06:	61 93       	st	Z+, r22
   17e08:	f8 cf       	rjmp	.-16     	; 0x17dfa <lif_S2B+0x28>
   17e0a:	08 95       	ret

00017e0c <lif_fixname>:
   17e0c:	a0 e0       	ldi	r26, 0x00	; 0
   17e0e:	b0 e0       	ldi	r27, 0x00	; 0
   17e10:	ec e0       	ldi	r30, 0x0C	; 12
   17e12:	ff eb       	ldi	r31, 0xBF	; 191
   17e14:	0c 94 8c e1 	jmp	0x1c318	; 0x1c318 <__prologue_saves__+0x12>
   17e18:	8c 01       	movw	r16, r24
   17e1a:	cb 01       	movw	r24, r22
   17e1c:	7a 01       	movw	r14, r20
   17e1e:	0e 94 a4 75 	call	0xeb48	; 0xeb48 <basename>
   17e22:	6c 01       	movw	r12, r24
   17e24:	e8 01       	movw	r28, r16
   17e26:	80 e2       	ldi	r24, 0x20	; 32
   17e28:	b8 2e       	mov	r11, r24
   17e2a:	be 01       	movw	r22, r28
   17e2c:	60 1b       	sub	r22, r16
   17e2e:	71 0b       	sbc	r23, r17
   17e30:	f6 01       	movw	r30, r12
   17e32:	81 91       	ld	r24, Z+
   17e34:	6f 01       	movw	r12, r30
   17e36:	81 11       	cpse	r24, r1
   17e38:	02 c0       	rjmp	.+4      	; 0x17e3e <lif_fixname+0x32>
   17e3a:	20 e2       	ldi	r18, 0x20	; 32
   17e3c:	0e c0       	rjmp	.+28     	; 0x17e5a <lif_fixname+0x4e>
   17e3e:	1e 14       	cp	r1, r14
   17e40:	1f 04       	cpc	r1, r15
   17e42:	dc f7       	brge	.-10     	; 0x17e3a <lif_fixname+0x2e>
   17e44:	8e 32       	cpi	r24, 0x2E	; 46
   17e46:	c9 f3       	breq	.-14     	; 0x17e3a <lif_fixname+0x2e>
   17e48:	90 e0       	ldi	r25, 0x00	; 0
   17e4a:	41 df       	rcall	.-382    	; 0x17cce <lif_chars>
   17e4c:	88 23       	and	r24, r24
   17e4e:	11 f0       	breq	.+4      	; 0x17e54 <lif_fixname+0x48>
   17e50:	88 83       	st	Y, r24
   17e52:	01 c0       	rjmp	.+2      	; 0x17e56 <lif_fixname+0x4a>
   17e54:	b8 82       	st	Y, r11
   17e56:	21 96       	adiw	r28, 0x01	; 1
   17e58:	e8 cf       	rjmp	.-48     	; 0x17e2a <lif_fixname+0x1e>
   17e5a:	ce 01       	movw	r24, r28
   17e5c:	80 1b       	sub	r24, r16
   17e5e:	91 0b       	sbc	r25, r17
   17e60:	8e 15       	cp	r24, r14
   17e62:	9f 05       	cpc	r25, r15
   17e64:	14 f4       	brge	.+4      	; 0x17e6a <lif_fixname+0x5e>
   17e66:	29 93       	st	Y+, r18
   17e68:	f8 cf       	rjmp	.-16     	; 0x17e5a <lif_fixname+0x4e>
   17e6a:	18 82       	st	Y, r1
   17e6c:	f8 01       	movw	r30, r16
   17e6e:	01 90       	ld	r0, Z+
   17e70:	00 20       	and	r0, r0
   17e72:	e9 f7       	brne	.-6      	; 0x17e6e <lif_fixname+0x62>
   17e74:	cf 01       	movw	r24, r30
   17e76:	01 97       	sbiw	r24, 0x01	; 1
   17e78:	80 1b       	sub	r24, r16
   17e7a:	91 0b       	sbc	r25, r17
   17e7c:	cd b7       	in	r28, 0x3d	; 61
   17e7e:	de b7       	in	r29, 0x3e	; 62
   17e80:	e9 e0       	ldi	r30, 0x09	; 9
   17e82:	0c 94 a8 e1 	jmp	0x1c350	; 0x1c350 <__epilogue_restores__+0x12>

00017e86 <lif_vol2str>:
   17e86:	ef 92       	push	r14
   17e88:	ff 92       	push	r15
   17e8a:	0f 93       	push	r16
   17e8c:	1f 93       	push	r17
   17e8e:	cf 93       	push	r28
   17e90:	df 93       	push	r29
   17e92:	7c 01       	movw	r14, r24
   17e94:	eb 01       	movw	r28, r22
   17e96:	fc 01       	movw	r30, r24
   17e98:	04 a1       	ldd	r16, Z+36	; 0x24
   17e9a:	15 a1       	ldd	r17, Z+37	; 0x25
   17e9c:	20 e0       	ldi	r18, 0x00	; 0
   17e9e:	30 e0       	ldi	r19, 0x00	; 0
   17ea0:	42 e0       	ldi	r20, 0x02	; 2
   17ea2:	50 e0       	ldi	r21, 0x00	; 0
   17ea4:	60 e0       	ldi	r22, 0x00	; 0
   17ea6:	70 e0       	ldi	r23, 0x00	; 0
   17ea8:	ce 01       	movw	r24, r28
   17eaa:	e4 dc       	rcall	.-1592   	; 0x17874 <V2B_MSB>
   17eac:	b7 01       	movw	r22, r14
   17eae:	6a 5d       	subi	r22, 0xDA	; 218
   17eb0:	7f 4f       	sbci	r23, 0xFF	; 255
   17eb2:	46 e0       	ldi	r20, 0x06	; 6
   17eb4:	50 e0       	ldi	r21, 0x00	; 0
   17eb6:	ce 01       	movw	r24, r28
   17eb8:	02 96       	adiw	r24, 0x02	; 2
   17eba:	8b df       	rcall	.-234    	; 0x17dd2 <lif_S2B>
   17ebc:	f7 01       	movw	r30, r14
   17ebe:	05 a5       	ldd	r16, Z+45	; 0x2d
   17ec0:	16 a5       	ldd	r17, Z+46	; 0x2e
   17ec2:	27 a5       	ldd	r18, Z+47	; 0x2f
   17ec4:	30 a9       	ldd	r19, Z+48	; 0x30
   17ec6:	44 e0       	ldi	r20, 0x04	; 4
   17ec8:	50 e0       	ldi	r21, 0x00	; 0
   17eca:	68 e0       	ldi	r22, 0x08	; 8
   17ecc:	70 e0       	ldi	r23, 0x00	; 0
   17ece:	ce 01       	movw	r24, r28
   17ed0:	d1 dc       	rcall	.-1630   	; 0x17874 <V2B_MSB>
   17ed2:	f7 01       	movw	r30, r14
   17ed4:	01 a9       	ldd	r16, Z+49	; 0x31
   17ed6:	12 a9       	ldd	r17, Z+50	; 0x32
   17ed8:	20 e0       	ldi	r18, 0x00	; 0
   17eda:	30 e0       	ldi	r19, 0x00	; 0
   17edc:	42 e0       	ldi	r20, 0x02	; 2
   17ede:	50 e0       	ldi	r21, 0x00	; 0
   17ee0:	6c e0       	ldi	r22, 0x0C	; 12
   17ee2:	70 e0       	ldi	r23, 0x00	; 0
   17ee4:	ce 01       	movw	r24, r28
   17ee6:	c6 dc       	rcall	.-1652   	; 0x17874 <V2B_MSB>
   17ee8:	00 e0       	ldi	r16, 0x00	; 0
   17eea:	10 e0       	ldi	r17, 0x00	; 0
   17eec:	98 01       	movw	r18, r16
   17eee:	42 e0       	ldi	r20, 0x02	; 2
   17ef0:	50 e0       	ldi	r21, 0x00	; 0
   17ef2:	6e e0       	ldi	r22, 0x0E	; 14
   17ef4:	70 e0       	ldi	r23, 0x00	; 0
   17ef6:	ce 01       	movw	r24, r28
   17ef8:	bd dc       	rcall	.-1670   	; 0x17874 <V2B_MSB>
   17efa:	f7 01       	movw	r30, r14
   17efc:	05 a9       	ldd	r16, Z+53	; 0x35
   17efe:	16 a9       	ldd	r17, Z+54	; 0x36
   17f00:	27 a9       	ldd	r18, Z+55	; 0x37
   17f02:	30 ad       	ldd	r19, Z+56	; 0x38
   17f04:	44 e0       	ldi	r20, 0x04	; 4
   17f06:	50 e0       	ldi	r21, 0x00	; 0
   17f08:	60 e1       	ldi	r22, 0x10	; 16
   17f0a:	70 e0       	ldi	r23, 0x00	; 0
   17f0c:	ce 01       	movw	r24, r28
   17f0e:	b2 dc       	rcall	.-1692   	; 0x17874 <V2B_MSB>
   17f10:	f7 01       	movw	r30, r14
   17f12:	01 ad       	ldd	r16, Z+57	; 0x39
   17f14:	12 ad       	ldd	r17, Z+58	; 0x3a
   17f16:	20 e0       	ldi	r18, 0x00	; 0
   17f18:	30 e0       	ldi	r19, 0x00	; 0
   17f1a:	42 e0       	ldi	r20, 0x02	; 2
   17f1c:	50 e0       	ldi	r21, 0x00	; 0
   17f1e:	64 e1       	ldi	r22, 0x14	; 20
   17f20:	70 e0       	ldi	r23, 0x00	; 0
   17f22:	ce 01       	movw	r24, r28
   17f24:	a7 dc       	rcall	.-1714   	; 0x17874 <V2B_MSB>
   17f26:	00 e0       	ldi	r16, 0x00	; 0
   17f28:	10 e0       	ldi	r17, 0x00	; 0
   17f2a:	98 01       	movw	r18, r16
   17f2c:	42 e0       	ldi	r20, 0x02	; 2
   17f2e:	50 e0       	ldi	r21, 0x00	; 0
   17f30:	66 e1       	ldi	r22, 0x16	; 22
   17f32:	70 e0       	ldi	r23, 0x00	; 0
   17f34:	ce 01       	movw	r24, r28
   17f36:	9e dc       	rcall	.-1732   	; 0x17874 <V2B_MSB>
   17f38:	f7 01       	movw	r30, r14
   17f3a:	fd 96       	adiw	r30, 0x3d	; 61
   17f3c:	00 81       	ld	r16, Z
   17f3e:	11 81       	ldd	r17, Z+1	; 0x01
   17f40:	22 81       	ldd	r18, Z+2	; 0x02
   17f42:	33 81       	ldd	r19, Z+3	; 0x03
   17f44:	44 e0       	ldi	r20, 0x04	; 4
   17f46:	50 e0       	ldi	r21, 0x00	; 0
   17f48:	68 e1       	ldi	r22, 0x18	; 24
   17f4a:	70 e0       	ldi	r23, 0x00	; 0
   17f4c:	ce 01       	movw	r24, r28
   17f4e:	92 dc       	rcall	.-1756   	; 0x17874 <V2B_MSB>
   17f50:	f7 01       	movw	r30, r14
   17f52:	ef 5b       	subi	r30, 0xBF	; 191
   17f54:	ff 4f       	sbci	r31, 0xFF	; 255
   17f56:	00 81       	ld	r16, Z
   17f58:	11 81       	ldd	r17, Z+1	; 0x01
   17f5a:	22 81       	ldd	r18, Z+2	; 0x02
   17f5c:	33 81       	ldd	r19, Z+3	; 0x03
   17f5e:	44 e0       	ldi	r20, 0x04	; 4
   17f60:	50 e0       	ldi	r21, 0x00	; 0
   17f62:	6c e1       	ldi	r22, 0x1C	; 28
   17f64:	70 e0       	ldi	r23, 0x00	; 0
   17f66:	ce 01       	movw	r24, r28
   17f68:	85 dc       	rcall	.-1782   	; 0x17874 <V2B_MSB>
   17f6a:	f7 01       	movw	r30, r14
   17f6c:	eb 5b       	subi	r30, 0xBB	; 187
   17f6e:	ff 4f       	sbci	r31, 0xFF	; 255
   17f70:	00 81       	ld	r16, Z
   17f72:	11 81       	ldd	r17, Z+1	; 0x01
   17f74:	22 81       	ldd	r18, Z+2	; 0x02
   17f76:	33 81       	ldd	r19, Z+3	; 0x03
   17f78:	44 e0       	ldi	r20, 0x04	; 4
   17f7a:	50 e0       	ldi	r21, 0x00	; 0
   17f7c:	60 e2       	ldi	r22, 0x20	; 32
   17f7e:	70 e0       	ldi	r23, 0x00	; 0
   17f80:	ce 01       	movw	r24, r28
   17f82:	78 dc       	rcall	.-1808   	; 0x17874 <V2B_MSB>
   17f84:	de 01       	movw	r26, r28
   17f86:	94 96       	adiw	r26, 0x24	; 36
   17f88:	f7 01       	movw	r30, r14
   17f8a:	e7 5b       	subi	r30, 0xB7	; 183
   17f8c:	ff 4f       	sbci	r31, 0xFF	; 255
   17f8e:	86 e0       	ldi	r24, 0x06	; 6
   17f90:	01 90       	ld	r0, Z+
   17f92:	0d 92       	st	X+, r0
   17f94:	8a 95       	dec	r24
   17f96:	e1 f7       	brne	.-8      	; 0x17f90 <lif_vol2str+0x10a>
   17f98:	cd b7       	in	r28, 0x3d	; 61
   17f9a:	de b7       	in	r29, 0x3e	; 62
   17f9c:	e6 e0       	ldi	r30, 0x06	; 6
   17f9e:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00017fa2 <lif_str2vol>:
   17fa2:	0f 93       	push	r16
   17fa4:	1f 93       	push	r17
   17fa6:	cf 93       	push	r28
   17fa8:	df 93       	push	r29
   17faa:	8c 01       	movw	r16, r24
   17fac:	eb 01       	movw	r28, r22
   17fae:	42 e0       	ldi	r20, 0x02	; 2
   17fb0:	50 e0       	ldi	r21, 0x00	; 0
   17fb2:	60 e0       	ldi	r22, 0x00	; 0
   17fb4:	70 e0       	ldi	r23, 0x00	; 0
   17fb6:	87 dc       	rcall	.-1778   	; 0x178c6 <B2V_MSB>
   17fb8:	7d a3       	std	Y+37, r23	; 0x25
   17fba:	6c a3       	std	Y+36, r22	; 0x24
   17fbc:	be 01       	movw	r22, r28
   17fbe:	6a 5d       	subi	r22, 0xDA	; 218
   17fc0:	7f 4f       	sbci	r23, 0xFF	; 255
   17fc2:	46 e0       	ldi	r20, 0x06	; 6
   17fc4:	50 e0       	ldi	r21, 0x00	; 0
   17fc6:	c8 01       	movw	r24, r16
   17fc8:	02 96       	adiw	r24, 0x02	; 2
   17fca:	ac de       	rcall	.-680    	; 0x17d24 <lif_B2S>
   17fcc:	44 e0       	ldi	r20, 0x04	; 4
   17fce:	50 e0       	ldi	r21, 0x00	; 0
   17fd0:	68 e0       	ldi	r22, 0x08	; 8
   17fd2:	70 e0       	ldi	r23, 0x00	; 0
   17fd4:	c8 01       	movw	r24, r16
   17fd6:	77 dc       	rcall	.-1810   	; 0x178c6 <B2V_MSB>
   17fd8:	6d a7       	std	Y+45, r22	; 0x2d
   17fda:	7e a7       	std	Y+46, r23	; 0x2e
   17fdc:	8f a7       	std	Y+47, r24	; 0x2f
   17fde:	98 ab       	std	Y+48, r25	; 0x30
   17fe0:	42 e0       	ldi	r20, 0x02	; 2
   17fe2:	50 e0       	ldi	r21, 0x00	; 0
   17fe4:	6c e0       	ldi	r22, 0x0C	; 12
   17fe6:	70 e0       	ldi	r23, 0x00	; 0
   17fe8:	c8 01       	movw	r24, r16
   17fea:	6d dc       	rcall	.-1830   	; 0x178c6 <B2V_MSB>
   17fec:	7a ab       	std	Y+50, r23	; 0x32
   17fee:	69 ab       	std	Y+49, r22	; 0x31
   17ff0:	42 e0       	ldi	r20, 0x02	; 2
   17ff2:	50 e0       	ldi	r21, 0x00	; 0
   17ff4:	6e e0       	ldi	r22, 0x0E	; 14
   17ff6:	70 e0       	ldi	r23, 0x00	; 0
   17ff8:	c8 01       	movw	r24, r16
   17ffa:	65 dc       	rcall	.-1846   	; 0x178c6 <B2V_MSB>
   17ffc:	7c ab       	std	Y+52, r23	; 0x34
   17ffe:	6b ab       	std	Y+51, r22	; 0x33
   18000:	44 e0       	ldi	r20, 0x04	; 4
   18002:	50 e0       	ldi	r21, 0x00	; 0
   18004:	60 e1       	ldi	r22, 0x10	; 16
   18006:	70 e0       	ldi	r23, 0x00	; 0
   18008:	c8 01       	movw	r24, r16
   1800a:	5d dc       	rcall	.-1862   	; 0x178c6 <B2V_MSB>
   1800c:	6d ab       	std	Y+53, r22	; 0x35
   1800e:	7e ab       	std	Y+54, r23	; 0x36
   18010:	8f ab       	std	Y+55, r24	; 0x37
   18012:	98 af       	std	Y+56, r25	; 0x38
   18014:	42 e0       	ldi	r20, 0x02	; 2
   18016:	50 e0       	ldi	r21, 0x00	; 0
   18018:	64 e1       	ldi	r22, 0x14	; 20
   1801a:	70 e0       	ldi	r23, 0x00	; 0
   1801c:	c8 01       	movw	r24, r16
   1801e:	53 dc       	rcall	.-1882   	; 0x178c6 <B2V_MSB>
   18020:	7a af       	std	Y+58, r23	; 0x3a
   18022:	69 af       	std	Y+57, r22	; 0x39
   18024:	42 e0       	ldi	r20, 0x02	; 2
   18026:	50 e0       	ldi	r21, 0x00	; 0
   18028:	66 e1       	ldi	r22, 0x16	; 22
   1802a:	70 e0       	ldi	r23, 0x00	; 0
   1802c:	c8 01       	movw	r24, r16
   1802e:	4b dc       	rcall	.-1898   	; 0x178c6 <B2V_MSB>
   18030:	7c af       	std	Y+60, r23	; 0x3c
   18032:	6b af       	std	Y+59, r22	; 0x3b
   18034:	44 e0       	ldi	r20, 0x04	; 4
   18036:	50 e0       	ldi	r21, 0x00	; 0
   18038:	68 e1       	ldi	r22, 0x18	; 24
   1803a:	70 e0       	ldi	r23, 0x00	; 0
   1803c:	c8 01       	movw	r24, r16
   1803e:	43 dc       	rcall	.-1914   	; 0x178c6 <B2V_MSB>
   18040:	fe 01       	movw	r30, r28
   18042:	fd 96       	adiw	r30, 0x3d	; 61
   18044:	60 83       	st	Z, r22
   18046:	71 83       	std	Z+1, r23	; 0x01
   18048:	82 83       	std	Z+2, r24	; 0x02
   1804a:	93 83       	std	Z+3, r25	; 0x03
   1804c:	44 e0       	ldi	r20, 0x04	; 4
   1804e:	50 e0       	ldi	r21, 0x00	; 0
   18050:	6c e1       	ldi	r22, 0x1C	; 28
   18052:	70 e0       	ldi	r23, 0x00	; 0
   18054:	c8 01       	movw	r24, r16
   18056:	37 dc       	rcall	.-1938   	; 0x178c6 <B2V_MSB>
   18058:	fe 01       	movw	r30, r28
   1805a:	ef 5b       	subi	r30, 0xBF	; 191
   1805c:	ff 4f       	sbci	r31, 0xFF	; 255
   1805e:	60 83       	st	Z, r22
   18060:	71 83       	std	Z+1, r23	; 0x01
   18062:	82 83       	std	Z+2, r24	; 0x02
   18064:	93 83       	std	Z+3, r25	; 0x03
   18066:	44 e0       	ldi	r20, 0x04	; 4
   18068:	50 e0       	ldi	r21, 0x00	; 0
   1806a:	60 e2       	ldi	r22, 0x20	; 32
   1806c:	70 e0       	ldi	r23, 0x00	; 0
   1806e:	c8 01       	movw	r24, r16
   18070:	2a dc       	rcall	.-1964   	; 0x178c6 <B2V_MSB>
   18072:	fe 01       	movw	r30, r28
   18074:	eb 5b       	subi	r30, 0xBB	; 187
   18076:	ff 4f       	sbci	r31, 0xFF	; 255
   18078:	60 83       	st	Z, r22
   1807a:	71 83       	std	Z+1, r23	; 0x01
   1807c:	82 83       	std	Z+2, r24	; 0x02
   1807e:	93 83       	std	Z+3, r25	; 0x03
   18080:	de 01       	movw	r26, r28
   18082:	a7 5b       	subi	r26, 0xB7	; 183
   18084:	bf 4f       	sbci	r27, 0xFF	; 255
   18086:	f8 01       	movw	r30, r16
   18088:	b4 96       	adiw	r30, 0x24	; 36
   1808a:	86 e0       	ldi	r24, 0x06	; 6
   1808c:	01 90       	ld	r0, Z+
   1808e:	0d 92       	st	X+, r0
   18090:	8a 95       	dec	r24
   18092:	e1 f7       	brne	.-8      	; 0x1808c <lif_str2vol+0xea>
   18094:	df 91       	pop	r29
   18096:	cf 91       	pop	r28
   18098:	1f 91       	pop	r17
   1809a:	0f 91       	pop	r16
   1809c:	08 95       	ret

0001809e <lif_dir2str>:
   1809e:	ef 92       	push	r14
   180a0:	ff 92       	push	r15
   180a2:	0f 93       	push	r16
   180a4:	1f 93       	push	r17
   180a6:	cf 93       	push	r28
   180a8:	df 93       	push	r29
   180aa:	ec 01       	movw	r28, r24
   180ac:	7b 01       	movw	r14, r22
   180ae:	bc 01       	movw	r22, r24
   180b0:	61 5b       	subi	r22, 0xB1	; 177
   180b2:	7f 4f       	sbci	r23, 0xFF	; 255
   180b4:	4a e0       	ldi	r20, 0x0A	; 10
   180b6:	50 e0       	ldi	r21, 0x00	; 0
   180b8:	c7 01       	movw	r24, r14
   180ba:	8b de       	rcall	.-746    	; 0x17dd2 <lif_S2B>
   180bc:	fe 01       	movw	r30, r28
   180be:	e6 5a       	subi	r30, 0xA6	; 166
   180c0:	ff 4f       	sbci	r31, 0xFF	; 255
   180c2:	00 81       	ld	r16, Z
   180c4:	11 81       	ldd	r17, Z+1	; 0x01
   180c6:	20 e0       	ldi	r18, 0x00	; 0
   180c8:	30 e0       	ldi	r19, 0x00	; 0
   180ca:	42 e0       	ldi	r20, 0x02	; 2
   180cc:	50 e0       	ldi	r21, 0x00	; 0
   180ce:	6a e0       	ldi	r22, 0x0A	; 10
   180d0:	70 e0       	ldi	r23, 0x00	; 0
   180d2:	c7 01       	movw	r24, r14
   180d4:	cf db       	rcall	.-2146   	; 0x17874 <V2B_MSB>
   180d6:	fe 01       	movw	r30, r28
   180d8:	e4 5a       	subi	r30, 0xA4	; 164
   180da:	ff 4f       	sbci	r31, 0xFF	; 255
   180dc:	00 81       	ld	r16, Z
   180de:	11 81       	ldd	r17, Z+1	; 0x01
   180e0:	22 81       	ldd	r18, Z+2	; 0x02
   180e2:	33 81       	ldd	r19, Z+3	; 0x03
   180e4:	44 e0       	ldi	r20, 0x04	; 4
   180e6:	50 e0       	ldi	r21, 0x00	; 0
   180e8:	6c e0       	ldi	r22, 0x0C	; 12
   180ea:	70 e0       	ldi	r23, 0x00	; 0
   180ec:	c7 01       	movw	r24, r14
   180ee:	c2 db       	rcall	.-2172   	; 0x17874 <V2B_MSB>
   180f0:	fe 01       	movw	r30, r28
   180f2:	e0 5a       	subi	r30, 0xA0	; 160
   180f4:	ff 4f       	sbci	r31, 0xFF	; 255
   180f6:	00 81       	ld	r16, Z
   180f8:	11 81       	ldd	r17, Z+1	; 0x01
   180fa:	22 81       	ldd	r18, Z+2	; 0x02
   180fc:	33 81       	ldd	r19, Z+3	; 0x03
   180fe:	44 e0       	ldi	r20, 0x04	; 4
   18100:	50 e0       	ldi	r21, 0x00	; 0
   18102:	60 e1       	ldi	r22, 0x10	; 16
   18104:	70 e0       	ldi	r23, 0x00	; 0
   18106:	c7 01       	movw	r24, r14
   18108:	b5 db       	rcall	.-2198   	; 0x17874 <V2B_MSB>
   1810a:	d7 01       	movw	r26, r14
   1810c:	54 96       	adiw	r26, 0x14	; 20
   1810e:	fe 01       	movw	r30, r28
   18110:	ec 59       	subi	r30, 0x9C	; 156
   18112:	ff 4f       	sbci	r31, 0xFF	; 255
   18114:	86 e0       	ldi	r24, 0x06	; 6
   18116:	01 90       	ld	r0, Z+
   18118:	0d 92       	st	X+, r0
   1811a:	8a 95       	dec	r24
   1811c:	e1 f7       	brne	.-8      	; 0x18116 <lif_dir2str+0x78>
   1811e:	fe 01       	movw	r30, r28
   18120:	e6 59       	subi	r30, 0x96	; 150
   18122:	ff 4f       	sbci	r31, 0xFF	; 255
   18124:	00 81       	ld	r16, Z
   18126:	11 81       	ldd	r17, Z+1	; 0x01
   18128:	20 e0       	ldi	r18, 0x00	; 0
   1812a:	30 e0       	ldi	r19, 0x00	; 0
   1812c:	42 e0       	ldi	r20, 0x02	; 2
   1812e:	50 e0       	ldi	r21, 0x00	; 0
   18130:	6a e1       	ldi	r22, 0x1A	; 26
   18132:	70 e0       	ldi	r23, 0x00	; 0
   18134:	c7 01       	movw	r24, r14
   18136:	9e db       	rcall	.-2244   	; 0x17874 <V2B_MSB>
   18138:	fe 01       	movw	r30, r28
   1813a:	e4 59       	subi	r30, 0x94	; 148
   1813c:	ff 4f       	sbci	r31, 0xFF	; 255
   1813e:	00 81       	ld	r16, Z
   18140:	11 81       	ldd	r17, Z+1	; 0x01
   18142:	20 e0       	ldi	r18, 0x00	; 0
   18144:	30 e0       	ldi	r19, 0x00	; 0
   18146:	42 e0       	ldi	r20, 0x02	; 2
   18148:	50 e0       	ldi	r21, 0x00	; 0
   1814a:	6c e1       	ldi	r22, 0x1C	; 28
   1814c:	70 e0       	ldi	r23, 0x00	; 0
   1814e:	c7 01       	movw	r24, r14
   18150:	a5 db       	rcall	.-2230   	; 0x1789c <V2B_LSB>
   18152:	c2 59       	subi	r28, 0x92	; 146
   18154:	df 4f       	sbci	r29, 0xFF	; 255
   18156:	08 81       	ld	r16, Y
   18158:	19 81       	ldd	r17, Y+1	; 0x01
   1815a:	20 e0       	ldi	r18, 0x00	; 0
   1815c:	30 e0       	ldi	r19, 0x00	; 0
   1815e:	42 e0       	ldi	r20, 0x02	; 2
   18160:	50 e0       	ldi	r21, 0x00	; 0
   18162:	6e e1       	ldi	r22, 0x1E	; 30
   18164:	70 e0       	ldi	r23, 0x00	; 0
   18166:	c7 01       	movw	r24, r14
   18168:	99 db       	rcall	.-2254   	; 0x1789c <V2B_LSB>
   1816a:	cd b7       	in	r28, 0x3d	; 61
   1816c:	de b7       	in	r29, 0x3e	; 62
   1816e:	e6 e0       	ldi	r30, 0x06	; 6
   18170:	0c 94 ab e1 	jmp	0x1c356	; 0x1c356 <__epilogue_restores__+0x18>

00018174 <lif_str2dir>:
   18174:	0f 93       	push	r16
   18176:	1f 93       	push	r17
   18178:	cf 93       	push	r28
   1817a:	df 93       	push	r29
   1817c:	8c 01       	movw	r16, r24
   1817e:	eb 01       	movw	r28, r22
   18180:	61 5b       	subi	r22, 0xB1	; 177
   18182:	7f 4f       	sbci	r23, 0xFF	; 255
   18184:	4a e0       	ldi	r20, 0x0A	; 10
   18186:	50 e0       	ldi	r21, 0x00	; 0
   18188:	cd dd       	rcall	.-1126   	; 0x17d24 <lif_B2S>
   1818a:	42 e0       	ldi	r20, 0x02	; 2
   1818c:	50 e0       	ldi	r21, 0x00	; 0
   1818e:	6a e0       	ldi	r22, 0x0A	; 10
   18190:	70 e0       	ldi	r23, 0x00	; 0
   18192:	c8 01       	movw	r24, r16
   18194:	98 db       	rcall	.-2256   	; 0x178c6 <B2V_MSB>
   18196:	fe 01       	movw	r30, r28
   18198:	e6 5a       	subi	r30, 0xA6	; 166
   1819a:	ff 4f       	sbci	r31, 0xFF	; 255
   1819c:	71 83       	std	Z+1, r23	; 0x01
   1819e:	60 83       	st	Z, r22
   181a0:	44 e0       	ldi	r20, 0x04	; 4
   181a2:	50 e0       	ldi	r21, 0x00	; 0
   181a4:	6c e0       	ldi	r22, 0x0C	; 12
   181a6:	70 e0       	ldi	r23, 0x00	; 0
   181a8:	c8 01       	movw	r24, r16
   181aa:	8d db       	rcall	.-2278   	; 0x178c6 <B2V_MSB>
   181ac:	fe 01       	movw	r30, r28
   181ae:	e4 5a       	subi	r30, 0xA4	; 164
   181b0:	ff 4f       	sbci	r31, 0xFF	; 255
   181b2:	60 83       	st	Z, r22
   181b4:	71 83       	std	Z+1, r23	; 0x01
   181b6:	82 83       	std	Z+2, r24	; 0x02
   181b8:	93 83       	std	Z+3, r25	; 0x03
   181ba:	44 e0       	ldi	r20, 0x04	; 4
   181bc:	50 e0       	ldi	r21, 0x00	; 0
   181be:	60 e1       	ldi	r22, 0x10	; 16
   181c0:	70 e0       	ldi	r23, 0x00	; 0
   181c2:	c8 01       	movw	r24, r16
   181c4:	80 db       	rcall	.-2304   	; 0x178c6 <B2V_MSB>
   181c6:	fe 01       	movw	r30, r28
   181c8:	e0 5a       	subi	r30, 0xA0	; 160
   181ca:	ff 4f       	sbci	r31, 0xFF	; 255
   181cc:	60 83       	st	Z, r22
   181ce:	71 83       	std	Z+1, r23	; 0x01
   181d0:	82 83       	std	Z+2, r24	; 0x02
   181d2:	93 83       	std	Z+3, r25	; 0x03
   181d4:	de 01       	movw	r26, r28
   181d6:	ac 59       	subi	r26, 0x9C	; 156
   181d8:	bf 4f       	sbci	r27, 0xFF	; 255
   181da:	f8 01       	movw	r30, r16
   181dc:	74 96       	adiw	r30, 0x14	; 20
   181de:	86 e0       	ldi	r24, 0x06	; 6
   181e0:	01 90       	ld	r0, Z+
   181e2:	0d 92       	st	X+, r0
   181e4:	8a 95       	dec	r24
   181e6:	e1 f7       	brne	.-8      	; 0x181e0 <lif_str2dir+0x6c>
   181e8:	42 e0       	ldi	r20, 0x02	; 2
   181ea:	50 e0       	ldi	r21, 0x00	; 0
   181ec:	6a e1       	ldi	r22, 0x1A	; 26
   181ee:	70 e0       	ldi	r23, 0x00	; 0
   181f0:	c8 01       	movw	r24, r16
   181f2:	69 db       	rcall	.-2350   	; 0x178c6 <B2V_MSB>
   181f4:	fe 01       	movw	r30, r28
   181f6:	e6 59       	subi	r30, 0x96	; 150
   181f8:	ff 4f       	sbci	r31, 0xFF	; 255
   181fa:	71 83       	std	Z+1, r23	; 0x01
   181fc:	60 83       	st	Z, r22
   181fe:	42 e0       	ldi	r20, 0x02	; 2
   18200:	50 e0       	ldi	r21, 0x00	; 0
   18202:	6c e1       	ldi	r22, 0x1C	; 28
   18204:	70 e0       	ldi	r23, 0x00	; 0
   18206:	c8 01       	movw	r24, r16
   18208:	7d db       	rcall	.-2310   	; 0x17904 <B2V_LSB>
   1820a:	fe 01       	movw	r30, r28
   1820c:	e4 59       	subi	r30, 0x94	; 148
   1820e:	ff 4f       	sbci	r31, 0xFF	; 255
   18210:	71 83       	std	Z+1, r23	; 0x01
   18212:	60 83       	st	Z, r22
   18214:	42 e0       	ldi	r20, 0x02	; 2
   18216:	50 e0       	ldi	r21, 0x00	; 0
   18218:	6e e1       	ldi	r22, 0x1E	; 30
   1821a:	70 e0       	ldi	r23, 0x00	; 0
   1821c:	c8 01       	movw	r24, r16
   1821e:	72 db       	rcall	.-2332   	; 0x17904 <B2V_LSB>
   18220:	c2 59       	subi	r28, 0x92	; 146
   18222:	df 4f       	sbci	r29, 0xFF	; 255
   18224:	79 83       	std	Y+1, r23	; 0x01
   18226:	68 83       	st	Y, r22
   18228:	df 91       	pop	r29
   1822a:	cf 91       	pop	r28
   1822c:	1f 91       	pop	r17
   1822e:	0f 91       	pop	r16
   18230:	08 95       	ret

00018232 <lif_BIN2BCD>:
   18232:	6a e0       	ldi	r22, 0x0A	; 10
   18234:	0e 94 e3 e0 	call	0x1c1c6	; 0x1c1c6 <__udivmodqi4>
   18238:	82 95       	swap	r24
   1823a:	80 7f       	andi	r24, 0xF0	; 240
   1823c:	89 2b       	or	r24, r25
   1823e:	08 95       	ret

00018240 <lif_BCD2BIN>:
   18240:	28 2f       	mov	r18, r24
   18242:	22 95       	swap	r18
   18244:	2f 70       	andi	r18, 0x0F	; 15
   18246:	8f 70       	andi	r24, 0x0F	; 15
   18248:	90 e0       	ldi	r25, 0x00	; 0
   1824a:	3a e0       	ldi	r19, 0x0A	; 10
   1824c:	23 9f       	mul	r18, r19
   1824e:	80 0d       	add	r24, r0
   18250:	91 1d       	adc	r25, r1
   18252:	11 24       	eor	r1, r1
   18254:	08 95       	ret

00018256 <lif_time2lifbcd>:
   18256:	aa e1       	ldi	r26, 0x1A	; 26
   18258:	b0 e0       	ldi	r27, 0x00	; 0
   1825a:	e1 e3       	ldi	r30, 0x31	; 49
   1825c:	f1 ec       	ldi	r31, 0xC1	; 193
   1825e:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
   18262:	8b 01       	movw	r16, r22
   18264:	9c 01       	movw	r18, r24
   18266:	6f 8b       	std	Y+23, r22	; 0x17
   18268:	78 8f       	std	Y+24, r23	; 0x18
   1826a:	89 8f       	std	Y+25, r24	; 0x19
   1826c:	9a 8f       	std	Y+26, r25	; 0x1a
   1826e:	67 2b       	or	r22, r23
   18270:	68 2b       	or	r22, r24
   18272:	69 2b       	or	r22, r25
   18274:	41 f4       	brne	.+16     	; 0x18286 <lif_time2lifbcd+0x30>
   18276:	fa 01       	movw	r30, r20
   18278:	ca 01       	movw	r24, r20
   1827a:	06 96       	adiw	r24, 0x06	; 6
   1827c:	11 92       	st	Z+, r1
   1827e:	e8 17       	cp	r30, r24
   18280:	f9 07       	cpc	r31, r25
   18282:	e1 f7       	brne	.-8      	; 0x1827c <lif_time2lifbcd+0x26>
   18284:	26 c0       	rjmp	.+76     	; 0x182d2 <lif_time2lifbcd+0x7c>
   18286:	8a 01       	movw	r16, r20
   18288:	be 01       	movw	r22, r28
   1828a:	6f 5f       	subi	r22, 0xFF	; 255
   1828c:	7f 4f       	sbci	r23, 0xFF	; 255
   1828e:	ce 01       	movw	r24, r28
   18290:	47 96       	adiw	r24, 0x17	; 23
   18292:	0e 94 22 35 	call	0x6a44	; 0x6a44 <gmtime_r>
   18296:	8b 85       	ldd	r24, Y+11	; 0x0b
   18298:	9c 85       	ldd	r25, Y+12	; 0x0c
   1829a:	64 e6       	ldi	r22, 0x64	; 100
   1829c:	70 e0       	ldi	r23, 0x00	; 0
   1829e:	0e 94 03 e1 	call	0x1c206	; 0x1c206 <__divmodhi4>
   182a2:	c7 df       	rcall	.-114    	; 0x18232 <lif_BIN2BCD>
   182a4:	f8 01       	movw	r30, r16
   182a6:	80 83       	st	Z, r24
   182a8:	89 85       	ldd	r24, Y+9	; 0x09
   182aa:	8f 5f       	subi	r24, 0xFF	; 255
   182ac:	c2 df       	rcall	.-124    	; 0x18232 <lif_BIN2BCD>
   182ae:	f8 01       	movw	r30, r16
   182b0:	81 83       	std	Z+1, r24	; 0x01
   182b2:	8f 81       	ldd	r24, Y+7	; 0x07
   182b4:	be df       	rcall	.-132    	; 0x18232 <lif_BIN2BCD>
   182b6:	f8 01       	movw	r30, r16
   182b8:	82 83       	std	Z+2, r24	; 0x02
   182ba:	8d 81       	ldd	r24, Y+5	; 0x05
   182bc:	ba df       	rcall	.-140    	; 0x18232 <lif_BIN2BCD>
   182be:	f8 01       	movw	r30, r16
   182c0:	83 83       	std	Z+3, r24	; 0x03
   182c2:	8b 81       	ldd	r24, Y+3	; 0x03
   182c4:	b6 df       	rcall	.-148    	; 0x18232 <lif_BIN2BCD>
   182c6:	f8 01       	movw	r30, r16
   182c8:	84 83       	std	Z+4, r24	; 0x04
   182ca:	89 81       	ldd	r24, Y+1	; 0x01
   182cc:	b2 df       	rcall	.-156    	; 0x18232 <lif_BIN2BCD>
   182ce:	f8 01       	movw	r30, r16
   182d0:	85 83       	std	Z+5, r24	; 0x05
   182d2:	6a 96       	adiw	r28, 0x1a	; 26
   182d4:	e4 e0       	ldi	r30, 0x04	; 4
   182d6:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

000182da <lif_lifbcd2time>:
   182da:	a6 e1       	ldi	r26, 0x16	; 22
   182dc:	b0 e0       	ldi	r27, 0x00	; 0
   182de:	e3 e7       	ldi	r30, 0x73	; 115
   182e0:	f1 ec       	ldi	r31, 0xC1	; 193
   182e2:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
   182e6:	8c 01       	movw	r16, r24
   182e8:	7c 01       	movw	r14, r24
   182ea:	5c 01       	movw	r10, r24
   182ec:	26 e0       	ldi	r18, 0x06	; 6
   182ee:	a2 0e       	add	r10, r18
   182f0:	b1 1c       	adc	r11, r1
   182f2:	cc 24       	eor	r12, r12
   182f4:	c3 94       	inc	r12
   182f6:	d1 2c       	mov	r13, r1
   182f8:	f7 01       	movw	r30, r14
   182fa:	81 91       	ld	r24, Z+
   182fc:	7f 01       	movw	r14, r30
   182fe:	a0 df       	rcall	.-192    	; 0x18240 <lif_BCD2BIN>
   18300:	89 2b       	or	r24, r25
   18302:	11 f0       	breq	.+4      	; 0x18308 <lif_lifbcd2time+0x2e>
   18304:	c1 2c       	mov	r12, r1
   18306:	d1 2c       	mov	r13, r1
   18308:	ea 14       	cp	r14, r10
   1830a:	fb 04       	cpc	r15, r11
   1830c:	a9 f7       	brne	.-22     	; 0x182f8 <lif_lifbcd2time+0x1e>
   1830e:	c1 14       	cp	r12, r1
   18310:	d1 04       	cpc	r13, r1
   18312:	61 f5       	brne	.+88     	; 0x1836c <lif_lifbcd2time+0x92>
   18314:	f8 01       	movw	r30, r16
   18316:	80 81       	ld	r24, Z
   18318:	93 df       	rcall	.-218    	; 0x18240 <lif_BCD2BIN>
   1831a:	7c 01       	movw	r14, r24
   1831c:	f8 01       	movw	r30, r16
   1831e:	81 81       	ldd	r24, Z+1	; 0x01
   18320:	8f df       	rcall	.-226    	; 0x18240 <lif_BCD2BIN>
   18322:	01 97       	sbiw	r24, 0x01	; 1
   18324:	f6 e4       	ldi	r31, 0x46	; 70
   18326:	ef 16       	cp	r14, r31
   18328:	f1 04       	cpc	r15, r1
   1832a:	1c f4       	brge	.+6      	; 0x18332 <lif_lifbcd2time+0x58>
   1832c:	24 e6       	ldi	r18, 0x64	; 100
   1832e:	e2 0e       	add	r14, r18
   18330:	f1 1c       	adc	r15, r1
   18332:	fc 86       	std	Y+12, r15	; 0x0c
   18334:	eb 86       	std	Y+11, r14	; 0x0b
   18336:	9a 87       	std	Y+10, r25	; 0x0a
   18338:	89 87       	std	Y+9, r24	; 0x09
   1833a:	f8 01       	movw	r30, r16
   1833c:	82 81       	ldd	r24, Z+2	; 0x02
   1833e:	80 df       	rcall	.-256    	; 0x18240 <lif_BCD2BIN>
   18340:	98 87       	std	Y+8, r25	; 0x08
   18342:	8f 83       	std	Y+7, r24	; 0x07
   18344:	f8 01       	movw	r30, r16
   18346:	83 81       	ldd	r24, Z+3	; 0x03
   18348:	7b df       	rcall	.-266    	; 0x18240 <lif_BCD2BIN>
   1834a:	9e 83       	std	Y+6, r25	; 0x06
   1834c:	8d 83       	std	Y+5, r24	; 0x05
   1834e:	f8 01       	movw	r30, r16
   18350:	84 81       	ldd	r24, Z+4	; 0x04
   18352:	76 df       	rcall	.-276    	; 0x18240 <lif_BCD2BIN>
   18354:	9c 83       	std	Y+4, r25	; 0x04
   18356:	8b 83       	std	Y+3, r24	; 0x03
   18358:	f8 01       	movw	r30, r16
   1835a:	85 81       	ldd	r24, Z+5	; 0x05
   1835c:	71 df       	rcall	.-286    	; 0x18240 <lif_BCD2BIN>
   1835e:	9a 83       	std	Y+2, r25	; 0x02
   18360:	89 83       	std	Y+1, r24	; 0x01
   18362:	ce 01       	movw	r24, r28
   18364:	01 96       	adiw	r24, 0x01	; 1
   18366:	0e 94 f6 37 	call	0x6fec	; 0x6fec <timegm>
   1836a:	03 c0       	rjmp	.+6      	; 0x18372 <lif_lifbcd2time+0x98>
   1836c:	60 e0       	ldi	r22, 0x00	; 0
   1836e:	70 e0       	ldi	r23, 0x00	; 0
   18370:	cb 01       	movw	r24, r22
   18372:	66 96       	adiw	r28, 0x16	; 22
   18374:	ea e0       	ldi	r30, 0x0A	; 10
   18376:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0001837a <lif_ctime_gmt>:
   1837a:	a6 e1       	ldi	r26, 0x16	; 22
   1837c:	b0 e0       	ldi	r27, 0x00	; 0
   1837e:	e3 ec       	ldi	r30, 0xC3	; 195
   18380:	f1 ec       	ldi	r31, 0xC1	; 193
   18382:	0c 94 91 e1 	jmp	0x1c322	; 0x1c322 <__prologue_saves__+0x1c>
   18386:	20 e2       	ldi	r18, 0x20	; 32
   18388:	eb eb       	ldi	r30, 0xBB	; 187
   1838a:	f9 e1       	ldi	r31, 0x19	; 25
   1838c:	df 01       	movw	r26, r30
   1838e:	1d 92       	st	X+, r1
   18390:	2a 95       	dec	r18
   18392:	e9 f7       	brne	.-6      	; 0x1838e <lif_ctime_gmt+0x14>
   18394:	be 01       	movw	r22, r28
   18396:	6f 5f       	subi	r22, 0xFF	; 255
   18398:	7f 4f       	sbci	r23, 0xFF	; 255
   1839a:	0e 94 22 35 	call	0x6a44	; 0x6a44 <gmtime_r>
   1839e:	6b eb       	ldi	r22, 0xBB	; 187
   183a0:	79 e1       	ldi	r23, 0x19	; 25
   183a2:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <asctime_r>
   183a6:	8c 01       	movw	r16, r24
   183a8:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <trim_tail>
   183ac:	c8 01       	movw	r24, r16
   183ae:	66 96       	adiw	r28, 0x16	; 22
   183b0:	e4 e0       	ldi	r30, 0x04	; 4
   183b2:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

000183b6 <lif_lifbcd2timestr>:
   183b6:	a4 e0       	ldi	r26, 0x04	; 4
   183b8:	b0 e0       	ldi	r27, 0x00	; 0
   183ba:	e1 ee       	ldi	r30, 0xE1	; 225
   183bc:	f1 ec       	ldi	r31, 0xC1	; 193
   183be:	0c 94 93 e1 	jmp	0x1c326	; 0x1c326 <__prologue_saves__+0x20>
   183c2:	20 e2       	ldi	r18, 0x20	; 32
   183c4:	eb e9       	ldi	r30, 0x9B	; 155
   183c6:	f9 e1       	ldi	r31, 0x19	; 25
   183c8:	df 01       	movw	r26, r30
   183ca:	1d 92       	st	X+, r1
   183cc:	2a 95       	dec	r18
   183ce:	e9 f7       	brne	.-6      	; 0x183ca <lif_lifbcd2timestr+0x14>
   183d0:	84 df       	rcall	.-248    	; 0x182da <lif_lifbcd2time>
   183d2:	69 83       	std	Y+1, r22	; 0x01
   183d4:	7a 83       	std	Y+2, r23	; 0x02
   183d6:	8b 83       	std	Y+3, r24	; 0x03
   183d8:	9c 83       	std	Y+4, r25	; 0x04
   183da:	67 2b       	or	r22, r23
   183dc:	68 2b       	or	r22, r24
   183de:	69 2b       	or	r22, r25
   183e0:	29 f0       	breq	.+10     	; 0x183ec <lif_lifbcd2timestr+0x36>
   183e2:	ce 01       	movw	r24, r28
   183e4:	01 96       	adiw	r24, 0x01	; 1
   183e6:	c9 df       	rcall	.-110    	; 0x1837a <lif_ctime_gmt>
   183e8:	bc 01       	movw	r22, r24
   183ea:	02 c0       	rjmp	.+4      	; 0x183f0 <lif_lifbcd2timestr+0x3a>
   183ec:	6e ee       	ldi	r22, 0xEE	; 238
   183ee:	75 e1       	ldi	r23, 0x15	; 21
   183f0:	8b e9       	ldi	r24, 0x9B	; 155
   183f2:	99 e1       	ldi	r25, 0x19	; 25
   183f4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <strcpy>
   183f8:	8b e9       	ldi	r24, 0x9B	; 155
   183fa:	99 e1       	ldi	r25, 0x19	; 25
   183fc:	24 96       	adiw	r28, 0x04	; 4
   183fe:	e2 e0       	ldi	r30, 0x02	; 2
   18400:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

00018404 <lif_image_clear>:
   18404:	20 e7       	ldi	r18, 0x70	; 112
   18406:	fc 01       	movw	r30, r24
   18408:	11 92       	st	Z+, r1
   1840a:	2a 95       	dec	r18
   1840c:	e9 f7       	brne	.-6      	; 0x18408 <lif_image_clear+0x4>
   1840e:	08 95       	ret

00018410 <lif_dir_clear>:
   18410:	81 5b       	subi	r24, 0xB1	; 177
   18412:	9f 4f       	sbci	r25, 0xFF	; 255
   18414:	21 e2       	ldi	r18, 0x21	; 33
   18416:	fc 01       	movw	r30, r24
   18418:	11 92       	st	Z+, r1
   1841a:	2a 95       	dec	r18
   1841c:	e9 f7       	brne	.-6      	; 0x18418 <lif_dir_clear+0x8>
   1841e:	08 95       	ret

00018420 <lif_vol_clear>:
   18420:	84 96       	adiw	r24, 0x24	; 36
   18422:	2b e2       	ldi	r18, 0x2B	; 43
   18424:	fc 01       	movw	r30, r24
   18426:	11 92       	st	Z+, r1
   18428:	2a 95       	dec	r18
   1842a:	e9 f7       	brne	.-6      	; 0x18426 <lif_vol_clear+0x6>
   1842c:	08 95       	ret

0001842e <lif_dump_vol>:
   1842e:	cf 93       	push	r28
   18430:	df 93       	push	r29
   18432:	ad b7       	in	r26, 0x3d	; 61
   18434:	be b7       	in	r27, 0x3e	; 62
   18436:	17 97       	sbiw	r26, 0x07	; 7
   18438:	0f b6       	in	r0, 0x3f	; 63
   1843a:	f8 94       	cli
   1843c:	be bf       	out	0x3e, r27	; 62
   1843e:	0f be       	out	0x3f, r0	; 63
   18440:	ad bf       	out	0x3d, r26	; 61
   18442:	ec 01       	movw	r28, r24
   18444:	ed b7       	in	r30, 0x3d	; 61
   18446:	fe b7       	in	r31, 0x3e	; 62
   18448:	75 83       	std	Z+5, r23	; 0x05
   1844a:	64 83       	std	Z+4, r22	; 0x04
   1844c:	86 ec       	ldi	r24, 0xC6	; 198
   1844e:	9f e3       	ldi	r25, 0x3F	; 63
   18450:	a0 e0       	ldi	r26, 0x00	; 0
   18452:	81 83       	std	Z+1, r24	; 0x01
   18454:	92 83       	std	Z+2, r25	; 0x02
   18456:	a3 83       	std	Z+3, r26	; 0x03
   18458:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1845c:	88 81       	ld	r24, Y
   1845e:	99 81       	ldd	r25, Y+1	; 0x01
   18460:	ed b7       	in	r30, 0x3d	; 61
   18462:	fe b7       	in	r31, 0x3e	; 62
   18464:	95 83       	std	Z+5, r25	; 0x05
   18466:	84 83       	std	Z+4, r24	; 0x04
   18468:	8c ea       	ldi	r24, 0xAC	; 172
   1846a:	9f e3       	ldi	r25, 0x3F	; 63
   1846c:	a0 e0       	ldi	r26, 0x00	; 0
   1846e:	81 83       	std	Z+1, r24	; 0x01
   18470:	92 83       	std	Z+2, r25	; 0x02
   18472:	a3 83       	std	Z+3, r26	; 0x03
   18474:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18478:	8c 81       	ldd	r24, Y+4	; 0x04
   1847a:	9d 81       	ldd	r25, Y+5	; 0x05
   1847c:	ae 81       	ldd	r26, Y+6	; 0x06
   1847e:	bf 81       	ldd	r27, Y+7	; 0x07
   18480:	ed b7       	in	r30, 0x3d	; 61
   18482:	fe b7       	in	r31, 0x3e	; 62
   18484:	84 83       	std	Z+4, r24	; 0x04
   18486:	95 83       	std	Z+5, r25	; 0x05
   18488:	a6 83       	std	Z+6, r26	; 0x06
   1848a:	b7 83       	std	Z+7, r27	; 0x07
   1848c:	8f e8       	ldi	r24, 0x8F	; 143
   1848e:	9f e3       	ldi	r25, 0x3F	; 63
   18490:	a0 e0       	ldi	r26, 0x00	; 0
   18492:	81 83       	std	Z+1, r24	; 0x01
   18494:	92 83       	std	Z+2, r25	; 0x02
   18496:	a3 83       	std	Z+3, r26	; 0x03
   18498:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1849c:	88 85       	ldd	r24, Y+8	; 0x08
   1849e:	99 85       	ldd	r25, Y+9	; 0x09
   184a0:	aa 85       	ldd	r26, Y+10	; 0x0a
   184a2:	bb 85       	ldd	r27, Y+11	; 0x0b
   184a4:	ed b7       	in	r30, 0x3d	; 61
   184a6:	fe b7       	in	r31, 0x3e	; 62
   184a8:	84 83       	std	Z+4, r24	; 0x04
   184aa:	95 83       	std	Z+5, r25	; 0x05
   184ac:	a6 83       	std	Z+6, r26	; 0x06
   184ae:	b7 83       	std	Z+7, r27	; 0x07
   184b0:	82 e7       	ldi	r24, 0x72	; 114
   184b2:	9f e3       	ldi	r25, 0x3F	; 63
   184b4:	a0 e0       	ldi	r26, 0x00	; 0
   184b6:	81 83       	std	Z+1, r24	; 0x01
   184b8:	92 83       	std	Z+2, r25	; 0x02
   184ba:	a3 83       	std	Z+3, r26	; 0x03
   184bc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   184c0:	8c 85       	ldd	r24, Y+12	; 0x0c
   184c2:	9d 85       	ldd	r25, Y+13	; 0x0d
   184c4:	ae 85       	ldd	r26, Y+14	; 0x0e
   184c6:	bf 85       	ldd	r27, Y+15	; 0x0f
   184c8:	ed b7       	in	r30, 0x3d	; 61
   184ca:	fe b7       	in	r31, 0x3e	; 62
   184cc:	84 83       	std	Z+4, r24	; 0x04
   184ce:	95 83       	std	Z+5, r25	; 0x05
   184d0:	a6 83       	std	Z+6, r26	; 0x06
   184d2:	b7 83       	std	Z+7, r27	; 0x07
   184d4:	85 e5       	ldi	r24, 0x55	; 85
   184d6:	9f e3       	ldi	r25, 0x3F	; 63
   184d8:	a0 e0       	ldi	r26, 0x00	; 0
   184da:	81 83       	std	Z+1, r24	; 0x01
   184dc:	92 83       	std	Z+2, r25	; 0x02
   184de:	a3 83       	std	Z+3, r26	; 0x03
   184e0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   184e4:	88 89       	ldd	r24, Y+16	; 0x10
   184e6:	99 89       	ldd	r25, Y+17	; 0x11
   184e8:	aa 89       	ldd	r26, Y+18	; 0x12
   184ea:	bb 89       	ldd	r27, Y+19	; 0x13
   184ec:	ed b7       	in	r30, 0x3d	; 61
   184ee:	fe b7       	in	r31, 0x3e	; 62
   184f0:	84 83       	std	Z+4, r24	; 0x04
   184f2:	95 83       	std	Z+5, r25	; 0x05
   184f4:	a6 83       	std	Z+6, r26	; 0x06
   184f6:	b7 83       	std	Z+7, r27	; 0x07
   184f8:	88 e3       	ldi	r24, 0x38	; 56
   184fa:	9f e3       	ldi	r25, 0x3F	; 63
   184fc:	a0 e0       	ldi	r26, 0x00	; 0
   184fe:	81 83       	std	Z+1, r24	; 0x01
   18500:	92 83       	std	Z+2, r25	; 0x02
   18502:	a3 83       	std	Z+3, r26	; 0x03
   18504:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18508:	8c 89       	ldd	r24, Y+20	; 0x14
   1850a:	9d 89       	ldd	r25, Y+21	; 0x15
   1850c:	ae 89       	ldd	r26, Y+22	; 0x16
   1850e:	bf 89       	ldd	r27, Y+23	; 0x17
   18510:	ed b7       	in	r30, 0x3d	; 61
   18512:	fe b7       	in	r31, 0x3e	; 62
   18514:	84 83       	std	Z+4, r24	; 0x04
   18516:	95 83       	std	Z+5, r25	; 0x05
   18518:	a6 83       	std	Z+6, r26	; 0x06
   1851a:	b7 83       	std	Z+7, r27	; 0x07
   1851c:	8b e1       	ldi	r24, 0x1B	; 27
   1851e:	9f e3       	ldi	r25, 0x3F	; 63
   18520:	a0 e0       	ldi	r26, 0x00	; 0
   18522:	81 83       	std	Z+1, r24	; 0x01
   18524:	92 83       	std	Z+2, r25	; 0x02
   18526:	a3 83       	std	Z+3, r26	; 0x03
   18528:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1852c:	88 8d       	ldd	r24, Y+24	; 0x18
   1852e:	99 8d       	ldd	r25, Y+25	; 0x19
   18530:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18532:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18534:	ed b7       	in	r30, 0x3d	; 61
   18536:	fe b7       	in	r31, 0x3e	; 62
   18538:	84 83       	std	Z+4, r24	; 0x04
   1853a:	95 83       	std	Z+5, r25	; 0x05
   1853c:	a6 83       	std	Z+6, r26	; 0x06
   1853e:	b7 83       	std	Z+7, r27	; 0x07
   18540:	8e ef       	ldi	r24, 0xFE	; 254
   18542:	9e e3       	ldi	r25, 0x3E	; 62
   18544:	a0 e0       	ldi	r26, 0x00	; 0
   18546:	81 83       	std	Z+1, r24	; 0x01
   18548:	92 83       	std	Z+2, r25	; 0x02
   1854a:	a3 83       	std	Z+3, r26	; 0x03
   1854c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18550:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18552:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18554:	09 2e       	mov	r0, r25
   18556:	00 0c       	add	r0, r0
   18558:	aa 0b       	sbc	r26, r26
   1855a:	bb 0b       	sbc	r27, r27
   1855c:	ed b7       	in	r30, 0x3d	; 61
   1855e:	fe b7       	in	r31, 0x3e	; 62
   18560:	84 83       	std	Z+4, r24	; 0x04
   18562:	95 83       	std	Z+5, r25	; 0x05
   18564:	a6 83       	std	Z+6, r26	; 0x06
   18566:	b7 83       	std	Z+7, r27	; 0x07
   18568:	81 ee       	ldi	r24, 0xE1	; 225
   1856a:	9e e3       	ldi	r25, 0x3E	; 62
   1856c:	a0 e0       	ldi	r26, 0x00	; 0
   1856e:	81 83       	std	Z+1, r24	; 0x01
   18570:	92 83       	std	Z+2, r25	; 0x02
   18572:	a3 83       	std	Z+3, r26	; 0x03
   18574:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18578:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1857a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1857c:	09 2e       	mov	r0, r25
   1857e:	00 0c       	add	r0, r0
   18580:	aa 0b       	sbc	r26, r26
   18582:	bb 0b       	sbc	r27, r27
   18584:	ed b7       	in	r30, 0x3d	; 61
   18586:	fe b7       	in	r31, 0x3e	; 62
   18588:	84 83       	std	Z+4, r24	; 0x04
   1858a:	95 83       	std	Z+5, r25	; 0x05
   1858c:	a6 83       	std	Z+6, r26	; 0x06
   1858e:	b7 83       	std	Z+7, r27	; 0x07
   18590:	84 ec       	ldi	r24, 0xC4	; 196
   18592:	9e e3       	ldi	r25, 0x3E	; 62
   18594:	a0 e0       	ldi	r26, 0x00	; 0
   18596:	81 83       	std	Z+1, r24	; 0x01
   18598:	92 83       	std	Z+2, r25	; 0x02
   1859a:	a3 83       	std	Z+3, r26	; 0x03
   1859c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   185a0:	ce 01       	movw	r24, r28
   185a2:	86 96       	adiw	r24, 0x26	; 38
   185a4:	ed b7       	in	r30, 0x3d	; 61
   185a6:	fe b7       	in	r31, 0x3e	; 62
   185a8:	95 83       	std	Z+5, r25	; 0x05
   185aa:	84 83       	std	Z+4, r24	; 0x04
   185ac:	8a ea       	ldi	r24, 0xAA	; 170
   185ae:	9e e3       	ldi	r25, 0x3E	; 62
   185b0:	a0 e0       	ldi	r26, 0x00	; 0
   185b2:	81 83       	std	Z+1, r24	; 0x01
   185b4:	92 83       	std	Z+2, r25	; 0x02
   185b6:	a3 83       	std	Z+3, r26	; 0x03
   185b8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   185bc:	8c a1       	ldd	r24, Y+36	; 0x24
   185be:	9d a1       	ldd	r25, Y+37	; 0x25
   185c0:	ed b7       	in	r30, 0x3d	; 61
   185c2:	fe b7       	in	r31, 0x3e	; 62
   185c4:	95 83       	std	Z+5, r25	; 0x05
   185c6:	84 83       	std	Z+4, r24	; 0x04
   185c8:	8e e8       	ldi	r24, 0x8E	; 142
   185ca:	9e e3       	ldi	r25, 0x3E	; 62
   185cc:	a0 e0       	ldi	r26, 0x00	; 0
   185ce:	81 83       	std	Z+1, r24	; 0x01
   185d0:	92 83       	std	Z+2, r25	; 0x02
   185d2:	a3 83       	std	Z+3, r26	; 0x03
   185d4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   185d8:	8d a5       	ldd	r24, Y+45	; 0x2d
   185da:	9e a5       	ldd	r25, Y+46	; 0x2e
   185dc:	af a5       	ldd	r26, Y+47	; 0x2f
   185de:	b8 a9       	ldd	r27, Y+48	; 0x30
   185e0:	ed b7       	in	r30, 0x3d	; 61
   185e2:	fe b7       	in	r31, 0x3e	; 62
   185e4:	84 83       	std	Z+4, r24	; 0x04
   185e6:	95 83       	std	Z+5, r25	; 0x05
   185e8:	a6 83       	std	Z+6, r26	; 0x06
   185ea:	b7 83       	std	Z+7, r27	; 0x07
   185ec:	81 e7       	ldi	r24, 0x71	; 113
   185ee:	9e e3       	ldi	r25, 0x3E	; 62
   185f0:	a0 e0       	ldi	r26, 0x00	; 0
   185f2:	81 83       	std	Z+1, r24	; 0x01
   185f4:	92 83       	std	Z+2, r25	; 0x02
   185f6:	a3 83       	std	Z+3, r26	; 0x03
   185f8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   185fc:	8d a9       	ldd	r24, Y+53	; 0x35
   185fe:	9e a9       	ldd	r25, Y+54	; 0x36
   18600:	af a9       	ldd	r26, Y+55	; 0x37
   18602:	b8 ad       	ldd	r27, Y+56	; 0x38
   18604:	ed b7       	in	r30, 0x3d	; 61
   18606:	fe b7       	in	r31, 0x3e	; 62
   18608:	84 83       	std	Z+4, r24	; 0x04
   1860a:	95 83       	std	Z+5, r25	; 0x05
   1860c:	a6 83       	std	Z+6, r26	; 0x06
   1860e:	b7 83       	std	Z+7, r27	; 0x07
   18610:	84 e5       	ldi	r24, 0x54	; 84
   18612:	9e e3       	ldi	r25, 0x3E	; 62
   18614:	a0 e0       	ldi	r26, 0x00	; 0
   18616:	81 83       	std	Z+1, r24	; 0x01
   18618:	92 83       	std	Z+2, r25	; 0x02
   1861a:	a3 83       	std	Z+3, r26	; 0x03
   1861c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18620:	89 a9       	ldd	r24, Y+49	; 0x31
   18622:	9a a9       	ldd	r25, Y+50	; 0x32
   18624:	ed b7       	in	r30, 0x3d	; 61
   18626:	fe b7       	in	r31, 0x3e	; 62
   18628:	95 83       	std	Z+5, r25	; 0x05
   1862a:	84 83       	std	Z+4, r24	; 0x04
   1862c:	88 e3       	ldi	r24, 0x38	; 56
   1862e:	9e e3       	ldi	r25, 0x3E	; 62
   18630:	a0 e0       	ldi	r26, 0x00	; 0
   18632:	81 83       	std	Z+1, r24	; 0x01
   18634:	92 83       	std	Z+2, r25	; 0x02
   18636:	a3 83       	std	Z+3, r26	; 0x03
   18638:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1863c:	89 ad       	ldd	r24, Y+57	; 0x39
   1863e:	9a ad       	ldd	r25, Y+58	; 0x3a
   18640:	ed b7       	in	r30, 0x3d	; 61
   18642:	fe b7       	in	r31, 0x3e	; 62
   18644:	95 83       	std	Z+5, r25	; 0x05
   18646:	84 83       	std	Z+4, r24	; 0x04
   18648:	8c e1       	ldi	r24, 0x1C	; 28
   1864a:	9e e3       	ldi	r25, 0x3E	; 62
   1864c:	a0 e0       	ldi	r26, 0x00	; 0
   1864e:	81 83       	std	Z+1, r24	; 0x01
   18650:	92 83       	std	Z+2, r25	; 0x02
   18652:	a3 83       	std	Z+3, r26	; 0x03
   18654:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18658:	ce 01       	movw	r24, r28
   1865a:	87 5b       	subi	r24, 0xB7	; 183
   1865c:	9f 4f       	sbci	r25, 0xFF	; 255
   1865e:	ab de       	rcall	.-682    	; 0x183b6 <lif_lifbcd2timestr>
   18660:	ed b7       	in	r30, 0x3d	; 61
   18662:	fe b7       	in	r31, 0x3e	; 62
   18664:	95 83       	std	Z+5, r25	; 0x05
   18666:	84 83       	std	Z+4, r24	; 0x04
   18668:	82 e0       	ldi	r24, 0x02	; 2
   1866a:	9e e3       	ldi	r25, 0x3E	; 62
   1866c:	a0 e0       	ldi	r26, 0x00	; 0
   1866e:	81 83       	std	Z+1, r24	; 0x01
   18670:	92 83       	std	Z+2, r25	; 0x02
   18672:	a3 83       	std	Z+3, r26	; 0x03
   18674:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18678:	ce 01       	movw	r24, r28
   1867a:	81 5b       	subi	r24, 0xB1	; 177
   1867c:	9f 4f       	sbci	r25, 0xFF	; 255
   1867e:	ed b7       	in	r30, 0x3d	; 61
   18680:	fe b7       	in	r31, 0x3e	; 62
   18682:	95 83       	std	Z+5, r25	; 0x05
   18684:	84 83       	std	Z+4, r24	; 0x04
   18686:	88 ee       	ldi	r24, 0xE8	; 232
   18688:	9d e3       	ldi	r25, 0x3D	; 61
   1868a:	a0 e0       	ldi	r26, 0x00	; 0
   1868c:	81 83       	std	Z+1, r24	; 0x01
   1868e:	92 83       	std	Z+2, r25	; 0x02
   18690:	a3 83       	std	Z+3, r26	; 0x03
   18692:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18696:	fe 01       	movw	r30, r28
   18698:	e6 5a       	subi	r30, 0xA6	; 166
   1869a:	ff 4f       	sbci	r31, 0xFF	; 255
   1869c:	80 81       	ld	r24, Z
   1869e:	91 81       	ldd	r25, Z+1	; 0x01
   186a0:	ed b7       	in	r30, 0x3d	; 61
   186a2:	fe b7       	in	r31, 0x3e	; 62
   186a4:	95 83       	std	Z+5, r25	; 0x05
   186a6:	84 83       	std	Z+4, r24	; 0x04
   186a8:	8c ec       	ldi	r24, 0xCC	; 204
   186aa:	9d e3       	ldi	r25, 0x3D	; 61
   186ac:	a0 e0       	ldi	r26, 0x00	; 0
   186ae:	81 83       	std	Z+1, r24	; 0x01
   186b0:	92 83       	std	Z+2, r25	; 0x02
   186b2:	a3 83       	std	Z+3, r26	; 0x03
   186b4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   186b8:	fe 01       	movw	r30, r28
   186ba:	e6 59       	subi	r30, 0x96	; 150
   186bc:	ff 4f       	sbci	r31, 0xFF	; 255
   186be:	80 81       	ld	r24, Z
   186c0:	91 81       	ldd	r25, Z+1	; 0x01
   186c2:	ed b7       	in	r30, 0x3d	; 61
   186c4:	fe b7       	in	r31, 0x3e	; 62
   186c6:	95 83       	std	Z+5, r25	; 0x05
   186c8:	84 83       	std	Z+4, r24	; 0x04
   186ca:	80 eb       	ldi	r24, 0xB0	; 176
   186cc:	9d e3       	ldi	r25, 0x3D	; 61
   186ce:	a0 e0       	ldi	r26, 0x00	; 0
   186d0:	81 83       	std	Z+1, r24	; 0x01
   186d2:	92 83       	std	Z+2, r25	; 0x02
   186d4:	a3 83       	std	Z+3, r26	; 0x03
   186d6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   186da:	fe 01       	movw	r30, r28
   186dc:	e4 5a       	subi	r30, 0xA4	; 164
   186de:	ff 4f       	sbci	r31, 0xFF	; 255
   186e0:	80 81       	ld	r24, Z
   186e2:	91 81       	ldd	r25, Z+1	; 0x01
   186e4:	a2 81       	ldd	r26, Z+2	; 0x02
   186e6:	b3 81       	ldd	r27, Z+3	; 0x03
   186e8:	ed b7       	in	r30, 0x3d	; 61
   186ea:	fe b7       	in	r31, 0x3e	; 62
   186ec:	84 83       	std	Z+4, r24	; 0x04
   186ee:	95 83       	std	Z+5, r25	; 0x05
   186f0:	a6 83       	std	Z+6, r26	; 0x06
   186f2:	b7 83       	std	Z+7, r27	; 0x07
   186f4:	83 e9       	ldi	r24, 0x93	; 147
   186f6:	9d e3       	ldi	r25, 0x3D	; 61
   186f8:	a0 e0       	ldi	r26, 0x00	; 0
   186fa:	81 83       	std	Z+1, r24	; 0x01
   186fc:	92 83       	std	Z+2, r25	; 0x02
   186fe:	a3 83       	std	Z+3, r26	; 0x03
   18700:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18704:	fe 01       	movw	r30, r28
   18706:	e0 5a       	subi	r30, 0xA0	; 160
   18708:	ff 4f       	sbci	r31, 0xFF	; 255
   1870a:	80 81       	ld	r24, Z
   1870c:	91 81       	ldd	r25, Z+1	; 0x01
   1870e:	a2 81       	ldd	r26, Z+2	; 0x02
   18710:	b3 81       	ldd	r27, Z+3	; 0x03
   18712:	ed b7       	in	r30, 0x3d	; 61
   18714:	fe b7       	in	r31, 0x3e	; 62
   18716:	84 83       	std	Z+4, r24	; 0x04
   18718:	95 83       	std	Z+5, r25	; 0x05
   1871a:	a6 83       	std	Z+6, r26	; 0x06
   1871c:	b7 83       	std	Z+7, r27	; 0x07
   1871e:	86 e7       	ldi	r24, 0x76	; 118
   18720:	9d e3       	ldi	r25, 0x3D	; 61
   18722:	a0 e0       	ldi	r26, 0x00	; 0
   18724:	81 83       	std	Z+1, r24	; 0x01
   18726:	92 83       	std	Z+2, r25	; 0x02
   18728:	a3 83       	std	Z+3, r26	; 0x03
   1872a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1872e:	fe 01       	movw	r30, r28
   18730:	e4 59       	subi	r30, 0x94	; 148
   18732:	ff 4f       	sbci	r31, 0xFF	; 255
   18734:	80 81       	ld	r24, Z
   18736:	91 81       	ldd	r25, Z+1	; 0x01
   18738:	a0 e0       	ldi	r26, 0x00	; 0
   1873a:	b0 e0       	ldi	r27, 0x00	; 0
   1873c:	ed b7       	in	r30, 0x3d	; 61
   1873e:	fe b7       	in	r31, 0x3e	; 62
   18740:	84 83       	std	Z+4, r24	; 0x04
   18742:	95 83       	std	Z+5, r25	; 0x05
   18744:	a6 83       	std	Z+6, r26	; 0x06
   18746:	b7 83       	std	Z+7, r27	; 0x07
   18748:	89 e5       	ldi	r24, 0x59	; 89
   1874a:	9d e3       	ldi	r25, 0x3D	; 61
   1874c:	a0 e0       	ldi	r26, 0x00	; 0
   1874e:	81 83       	std	Z+1, r24	; 0x01
   18750:	92 83       	std	Z+2, r25	; 0x02
   18752:	a3 83       	std	Z+3, r26	; 0x03
   18754:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18758:	fe 01       	movw	r30, r28
   1875a:	e2 59       	subi	r30, 0x92	; 146
   1875c:	ff 4f       	sbci	r31, 0xFF	; 255
   1875e:	80 81       	ld	r24, Z
   18760:	91 81       	ldd	r25, Z+1	; 0x01
   18762:	ed b7       	in	r30, 0x3d	; 61
   18764:	fe b7       	in	r31, 0x3e	; 62
   18766:	95 83       	std	Z+5, r25	; 0x05
   18768:	84 83       	std	Z+4, r24	; 0x04
   1876a:	8d e3       	ldi	r24, 0x3D	; 61
   1876c:	9d e3       	ldi	r25, 0x3D	; 61
   1876e:	a0 e0       	ldi	r26, 0x00	; 0
   18770:	81 83       	std	Z+1, r24	; 0x01
   18772:	92 83       	std	Z+2, r25	; 0x02
   18774:	a3 83       	std	Z+3, r26	; 0x03
   18776:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1877a:	ce 01       	movw	r24, r28
   1877c:	8c 59       	subi	r24, 0x9C	; 156
   1877e:	9f 4f       	sbci	r25, 0xFF	; 255
   18780:	1a de       	rcall	.-972    	; 0x183b6 <lif_lifbcd2timestr>
   18782:	ed b7       	in	r30, 0x3d	; 61
   18784:	fe b7       	in	r31, 0x3e	; 62
   18786:	95 83       	std	Z+5, r25	; 0x05
   18788:	84 83       	std	Z+4, r24	; 0x04
   1878a:	83 e2       	ldi	r24, 0x23	; 35
   1878c:	9d e3       	ldi	r25, 0x3D	; 61
   1878e:	a0 e0       	ldi	r26, 0x00	; 0
   18790:	81 83       	std	Z+1, r24	; 0x01
   18792:	92 83       	std	Z+2, r25	; 0x02
   18794:	a3 83       	std	Z+3, r26	; 0x03
   18796:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1879a:	81 e2       	ldi	r24, 0x21	; 33
   1879c:	9d e3       	ldi	r25, 0x3D	; 61
   1879e:	a0 e0       	ldi	r26, 0x00	; 0
   187a0:	ed b7       	in	r30, 0x3d	; 61
   187a2:	fe b7       	in	r31, 0x3e	; 62
   187a4:	81 83       	std	Z+1, r24	; 0x01
   187a6:	92 83       	std	Z+2, r25	; 0x02
   187a8:	a3 83       	std	Z+3, r26	; 0x03
   187aa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   187ae:	cd b7       	in	r28, 0x3d	; 61
   187b0:	de b7       	in	r29, 0x3e	; 62
   187b2:	27 96       	adiw	r28, 0x07	; 7
   187b4:	e2 e0       	ldi	r30, 0x02	; 2
   187b6:	0c 94 af e1 	jmp	0x1c35e	; 0x1c35e <__epilogue_restores__+0x20>

000187ba <lif_check_volume>:
   187ba:	0f 93       	push	r16
   187bc:	1f 93       	push	r17
   187be:	cf 93       	push	r28
   187c0:	df 93       	push	r29
   187c2:	ad b7       	in	r26, 0x3d	; 61
   187c4:	be b7       	in	r27, 0x3e	; 62
   187c6:	17 97       	sbiw	r26, 0x07	; 7
   187c8:	0f b6       	in	r0, 0x3f	; 63
   187ca:	f8 94       	cli
   187cc:	be bf       	out	0x3e, r27	; 62
   187ce:	0f be       	out	0x3f, r0	; 63
   187d0:	ad bf       	out	0x3d, r26	; 61
   187d2:	ec 01       	movw	r28, r24
   187d4:	86 96       	adiw	r24, 0x26	; 38
   187d6:	e0 da       	rcall	.-2624   	; 0x17d98 <lif_checkname>
   187d8:	89 2b       	or	r24, r25
   187da:	89 f4       	brne	.+34     	; 0x187fe <lif_check_volume+0x44>
   187dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   187e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   187e4:	92 ff       	sbrs	r25, 2
   187e6:	0e c0       	rjmp	.+28     	; 0x18804 <lif_check_volume+0x4a>
   187e8:	82 e0       	ldi	r24, 0x02	; 2
   187ea:	9d e3       	ldi	r25, 0x3D	; 61
   187ec:	a0 e0       	ldi	r26, 0x00	; 0
   187ee:	ed b7       	in	r30, 0x3d	; 61
   187f0:	fe b7       	in	r31, 0x3e	; 62
   187f2:	81 83       	std	Z+1, r24	; 0x01
   187f4:	92 83       	std	Z+2, r25	; 0x02
   187f6:	a3 83       	std	Z+3, r26	; 0x03
   187f8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   187fc:	03 c0       	rjmp	.+6      	; 0x18804 <lif_check_volume+0x4a>
   187fe:	81 e0       	ldi	r24, 0x01	; 1
   18800:	90 e0       	ldi	r25, 0x00	; 0
   18802:	02 c0       	rjmp	.+4      	; 0x18808 <lif_check_volume+0x4e>
   18804:	80 e0       	ldi	r24, 0x00	; 0
   18806:	90 e0       	ldi	r25, 0x00	; 0
   18808:	29 a9       	ldd	r18, Y+49	; 0x31
   1880a:	3a a9       	ldd	r19, Y+50	; 0x32
   1880c:	21 15       	cp	r18, r1
   1880e:	f0 e1       	ldi	r31, 0x10	; 16
   18810:	3f 07       	cpc	r19, r31
   18812:	a1 f0       	breq	.+40     	; 0x1883c <lif_check_volume+0x82>
   18814:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18818:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1881c:	92 ff       	sbrs	r25, 2
   1881e:	0c c0       	rjmp	.+24     	; 0x18838 <lif_check_volume+0x7e>
   18820:	ed b7       	in	r30, 0x3d	; 61
   18822:	fe b7       	in	r31, 0x3e	; 62
   18824:	35 83       	std	Z+5, r19	; 0x05
   18826:	24 83       	std	Z+4, r18	; 0x04
   18828:	89 ec       	ldi	r24, 0xC9	; 201
   1882a:	9c e3       	ldi	r25, 0x3C	; 60
   1882c:	a0 e0       	ldi	r26, 0x00	; 0
   1882e:	81 83       	std	Z+1, r24	; 0x01
   18830:	92 83       	std	Z+2, r25	; 0x02
   18832:	a3 83       	std	Z+3, r26	; 0x03
   18834:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18838:	80 e0       	ldi	r24, 0x00	; 0
   1883a:	90 e0       	ldi	r25, 0x00	; 0
   1883c:	29 ad       	ldd	r18, Y+57	; 0x39
   1883e:	3a ad       	ldd	r19, Y+58	; 0x3a
   18840:	22 30       	cpi	r18, 0x02	; 2
   18842:	31 05       	cpc	r19, r1
   18844:	a0 f0       	brcs	.+40     	; 0x1886e <lif_check_volume+0xb4>
   18846:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1884a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1884e:	92 ff       	sbrs	r25, 2
   18850:	0c c0       	rjmp	.+24     	; 0x1886a <lif_check_volume+0xb0>
   18852:	ed b7       	in	r30, 0x3d	; 61
   18854:	fe b7       	in	r31, 0x3e	; 62
   18856:	35 83       	std	Z+5, r19	; 0x05
   18858:	24 83       	std	Z+4, r18	; 0x04
   1885a:	81 eb       	ldi	r24, 0xB1	; 177
   1885c:	9c e3       	ldi	r25, 0x3C	; 60
   1885e:	a0 e0       	ldi	r26, 0x00	; 0
   18860:	81 83       	std	Z+1, r24	; 0x01
   18862:	92 83       	std	Z+2, r25	; 0x02
   18864:	a3 83       	std	Z+3, r26	; 0x03
   18866:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1886a:	80 e0       	ldi	r24, 0x00	; 0
   1886c:	90 e0       	ldi	r25, 0x00	; 0
   1886e:	2b a9       	ldd	r18, Y+51	; 0x33
   18870:	3c a9       	ldd	r19, Y+52	; 0x34
   18872:	23 2b       	or	r18, r19
   18874:	91 f0       	breq	.+36     	; 0x1889a <lif_check_volume+0xe0>
   18876:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1887a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1887e:	92 ff       	sbrs	r25, 2
   18880:	0a c0       	rjmp	.+20     	; 0x18896 <lif_check_volume+0xdc>
   18882:	88 e7       	ldi	r24, 0x78	; 120
   18884:	9c e3       	ldi	r25, 0x3C	; 60
   18886:	a0 e0       	ldi	r26, 0x00	; 0
   18888:	ed b7       	in	r30, 0x3d	; 61
   1888a:	fe b7       	in	r31, 0x3e	; 62
   1888c:	81 83       	std	Z+1, r24	; 0x01
   1888e:	92 83       	std	Z+2, r25	; 0x02
   18890:	a3 83       	std	Z+3, r26	; 0x03
   18892:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18896:	80 e0       	ldi	r24, 0x00	; 0
   18898:	90 e0       	ldi	r25, 0x00	; 0
   1889a:	2b ad       	ldd	r18, Y+59	; 0x3b
   1889c:	3c ad       	ldd	r19, Y+60	; 0x3c
   1889e:	23 2b       	or	r18, r19
   188a0:	91 f0       	breq	.+36     	; 0x188c6 <lif_check_volume+0x10c>
   188a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   188a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   188aa:	92 ff       	sbrs	r25, 2
   188ac:	0a c0       	rjmp	.+20     	; 0x188c2 <lif_check_volume+0x108>
   188ae:	8f e3       	ldi	r24, 0x3F	; 63
   188b0:	9c e3       	ldi	r25, 0x3C	; 60
   188b2:	a0 e0       	ldi	r26, 0x00	; 0
   188b4:	ed b7       	in	r30, 0x3d	; 61
   188b6:	fe b7       	in	r31, 0x3e	; 62
   188b8:	81 83       	std	Z+1, r24	; 0x01
   188ba:	92 83       	std	Z+2, r25	; 0x02
   188bc:	a3 83       	std	Z+3, r26	; 0x03
   188be:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   188c2:	80 e0       	ldi	r24, 0x00	; 0
   188c4:	90 e0       	ldi	r25, 0x00	; 0
   188c6:	4d a5       	ldd	r20, Y+45	; 0x2d
   188c8:	5e a5       	ldd	r21, Y+46	; 0x2e
   188ca:	6f a5       	ldd	r22, Y+47	; 0x2f
   188cc:	78 a9       	ldd	r23, Y+48	; 0x30
   188ce:	45 2b       	or	r20, r21
   188d0:	46 2b       	or	r20, r22
   188d2:	47 2b       	or	r20, r23
   188d4:	b1 f4       	brne	.+44     	; 0x18902 <lif_check_volume+0x148>
   188d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   188da:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   188de:	92 ff       	sbrs	r25, 2
   188e0:	0e c0       	rjmp	.+28     	; 0x188fe <lif_check_volume+0x144>
   188e2:	ed b7       	in	r30, 0x3d	; 61
   188e4:	fe b7       	in	r31, 0x3e	; 62
   188e6:	14 82       	std	Z+4, r1	; 0x04
   188e8:	15 82       	std	Z+5, r1	; 0x05
   188ea:	16 82       	std	Z+6, r1	; 0x06
   188ec:	17 82       	std	Z+7, r1	; 0x07
   188ee:	8a e1       	ldi	r24, 0x1A	; 26
   188f0:	9c e3       	ldi	r25, 0x3C	; 60
   188f2:	a0 e0       	ldi	r26, 0x00	; 0
   188f4:	81 83       	std	Z+1, r24	; 0x01
   188f6:	92 83       	std	Z+2, r25	; 0x02
   188f8:	a3 83       	std	Z+3, r26	; 0x03
   188fa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   188fe:	80 e0       	ldi	r24, 0x00	; 0
   18900:	90 e0       	ldi	r25, 0x00	; 0
   18902:	4d a9       	ldd	r20, Y+53	; 0x35
   18904:	5e a9       	ldd	r21, Y+54	; 0x36
   18906:	6f a9       	ldd	r22, Y+55	; 0x37
   18908:	78 ad       	ldd	r23, Y+56	; 0x38
   1890a:	45 2b       	or	r20, r21
   1890c:	46 2b       	or	r20, r22
   1890e:	47 2b       	or	r20, r23
   18910:	91 f4       	brne	.+36     	; 0x18936 <lif_check_volume+0x17c>
   18912:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18916:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1891a:	92 ff       	sbrs	r25, 2
   1891c:	0a c0       	rjmp	.+20     	; 0x18932 <lif_check_volume+0x178>
   1891e:	8b ee       	ldi	r24, 0xEB	; 235
   18920:	9b e3       	ldi	r25, 0x3B	; 59
   18922:	a0 e0       	ldi	r26, 0x00	; 0
   18924:	ed b7       	in	r30, 0x3d	; 61
   18926:	fe b7       	in	r31, 0x3e	; 62
   18928:	81 83       	std	Z+1, r24	; 0x01
   1892a:	92 83       	std	Z+2, r25	; 0x02
   1892c:	a3 83       	std	Z+3, r26	; 0x03
   1892e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18932:	80 e0       	ldi	r24, 0x00	; 0
   18934:	90 e0       	ldi	r25, 0x00	; 0
   18936:	0d a5       	ldd	r16, Y+45	; 0x2d
   18938:	1e a5       	ldd	r17, Y+46	; 0x2e
   1893a:	2f a5       	ldd	r18, Y+47	; 0x2f
   1893c:	38 a9       	ldd	r19, Y+48	; 0x30
   1893e:	4d a9       	ldd	r20, Y+53	; 0x35
   18940:	5e a9       	ldd	r21, Y+54	; 0x36
   18942:	6f a9       	ldd	r22, Y+55	; 0x37
   18944:	78 ad       	ldd	r23, Y+56	; 0x38
   18946:	40 0f       	add	r20, r16
   18948:	51 1f       	adc	r21, r17
   1894a:	62 1f       	adc	r22, r18
   1894c:	73 1f       	adc	r23, r19
   1894e:	0c 81       	ldd	r16, Y+4	; 0x04
   18950:	1d 81       	ldd	r17, Y+5	; 0x05
   18952:	2e 81       	ldd	r18, Y+6	; 0x06
   18954:	3f 81       	ldd	r19, Y+7	; 0x07
   18956:	04 17       	cp	r16, r20
   18958:	15 07       	cpc	r17, r21
   1895a:	26 07       	cpc	r18, r22
   1895c:	37 07       	cpc	r19, r23
   1895e:	90 f4       	brcc	.+36     	; 0x18984 <lif_check_volume+0x1ca>
   18960:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18964:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18968:	92 ff       	sbrs	r25, 2
   1896a:	0a c0       	rjmp	.+20     	; 0x18980 <lif_check_volume+0x1c6>
   1896c:	8f eb       	ldi	r24, 0xBF	; 191
   1896e:	9b e3       	ldi	r25, 0x3B	; 59
   18970:	a0 e0       	ldi	r26, 0x00	; 0
   18972:	ed b7       	in	r30, 0x3d	; 61
   18974:	fe b7       	in	r31, 0x3e	; 62
   18976:	81 83       	std	Z+1, r24	; 0x01
   18978:	92 83       	std	Z+2, r25	; 0x02
   1897a:	a3 83       	std	Z+3, r26	; 0x03
   1897c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18980:	80 e0       	ldi	r24, 0x00	; 0
   18982:	90 e0       	ldi	r25, 0x00	; 0
   18984:	cd b7       	in	r28, 0x3d	; 61
   18986:	de b7       	in	r29, 0x3e	; 62
   18988:	27 96       	adiw	r28, 0x07	; 7
   1898a:	e4 e0       	ldi	r30, 0x04	; 4
   1898c:	0c 94 ad e1 	jmp	0x1c35a	; 0x1c35a <__epilogue_restores__+0x1c>

00018990 <lif_check_dir>:
   18990:	a5 e1       	ldi	r26, 0x15	; 21
   18992:	b0 e0       	ldi	r27, 0x00	; 0
   18994:	ee ec       	ldi	r30, 0xCE	; 206
   18996:	f4 ec       	ldi	r31, 0xC4	; 196
   18998:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   1899c:	6c 01       	movw	r12, r24
   1899e:	2a e5       	ldi	r18, 0x5A	; 90
   189a0:	c2 0e       	add	r12, r18
   189a2:	d1 1c       	adc	r13, r1
   189a4:	f6 01       	movw	r30, r12
   189a6:	20 81       	ld	r18, Z
   189a8:	31 81       	ldd	r19, Z+1	; 0x01
   189aa:	21 50       	subi	r18, 0x01	; 1
   189ac:	31 09       	sbc	r19, r1
   189ae:	2e 3f       	cpi	r18, 0xFE	; 254
   189b0:	3f 4f       	sbci	r19, 0xFF	; 255
   189b2:	08 f0       	brcs	.+2      	; 0x189b6 <lif_check_dir+0x26>
   189b4:	9a c1       	rjmp	.+820    	; 0x18cea <lif_check_dir+0x35a>
   189b6:	9d 8b       	std	Y+21, r25	; 0x15
   189b8:	8c 8b       	std	Y+20, r24	; 0x14
   189ba:	7c 01       	movw	r14, r24
   189bc:	2f e4       	ldi	r18, 0x4F	; 79
   189be:	e2 0e       	add	r14, r18
   189c0:	f1 1c       	adc	r15, r1
   189c2:	c7 01       	movw	r24, r14
   189c4:	e9 d9       	rcall	.-3118   	; 0x17d98 <lif_checkname>
   189c6:	89 2b       	or	r24, r25
   189c8:	99 f4       	brne	.+38     	; 0x189f0 <lif_check_dir+0x60>
   189ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189d2:	92 ff       	sbrs	r25, 2
   189d4:	0f c0       	rjmp	.+30     	; 0x189f4 <lif_check_dir+0x64>
   189d6:	ed b7       	in	r30, 0x3d	; 61
   189d8:	fe b7       	in	r31, 0x3e	; 62
   189da:	f5 82       	std	Z+5, r15	; 0x05
   189dc:	e4 82       	std	Z+4, r14	; 0x04
   189de:	8e e9       	ldi	r24, 0x9E	; 158
   189e0:	9b e3       	ldi	r25, 0x3B	; 59
   189e2:	a0 e0       	ldi	r26, 0x00	; 0
   189e4:	81 83       	std	Z+1, r24	; 0x01
   189e6:	92 83       	std	Z+2, r25	; 0x02
   189e8:	a3 83       	std	Z+3, r26	; 0x03
   189ea:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   189ee:	02 c0       	rjmp	.+4      	; 0x189f4 <lif_check_dir+0x64>
   189f0:	01 e0       	ldi	r16, 0x01	; 1
   189f2:	01 c0       	rjmp	.+2      	; 0x189f6 <lif_check_dir+0x66>
   189f4:	00 e0       	ldi	r16, 0x00	; 0
   189f6:	10 e0       	ldi	r17, 0x00	; 0
   189f8:	ec 89       	ldd	r30, Y+20	; 0x14
   189fa:	fd 89       	ldd	r31, Y+21	; 0x15
   189fc:	84 85       	ldd	r24, Z+12	; 0x0c
   189fe:	95 85       	ldd	r25, Z+13	; 0x0d
   18a00:	a6 85       	ldd	r26, Z+14	; 0x0e
   18a02:	b7 85       	ldd	r27, Z+15	; 0x0f
   18a04:	00 97       	sbiw	r24, 0x00	; 0
   18a06:	a1 05       	cpc	r26, r1
   18a08:	b1 05       	cpc	r27, r1
   18a0a:	39 f1       	breq	.+78     	; 0x18a5a <lif_check_dir+0xca>
   18a0c:	e4 5a       	subi	r30, 0xA4	; 164
   18a0e:	ff 4f       	sbci	r31, 0xFF	; 255
   18a10:	40 81       	ld	r20, Z
   18a12:	51 81       	ldd	r21, Z+1	; 0x01
   18a14:	62 81       	ldd	r22, Z+2	; 0x02
   18a16:	73 81       	ldd	r23, Z+3	; 0x03
   18a18:	48 17       	cp	r20, r24
   18a1a:	59 07       	cpc	r21, r25
   18a1c:	6a 07       	cpc	r22, r26
   18a1e:	7b 07       	cpc	r23, r27
   18a20:	e0 f4       	brcc	.+56     	; 0x18a5a <lif_check_dir+0xca>
   18a22:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18a26:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a2a:	32 ff       	sbrs	r19, 2
   18a2c:	14 c0       	rjmp	.+40     	; 0x18a56 <lif_check_dir+0xc6>
   18a2e:	ed b7       	in	r30, 0x3d	; 61
   18a30:	fe b7       	in	r31, 0x3e	; 62
   18a32:	82 87       	std	Z+10, r24	; 0x0a
   18a34:	93 87       	std	Z+11, r25	; 0x0b
   18a36:	a4 87       	std	Z+12, r26	; 0x0c
   18a38:	b5 87       	std	Z+13, r27	; 0x0d
   18a3a:	46 83       	std	Z+6, r20	; 0x06
   18a3c:	57 83       	std	Z+7, r21	; 0x07
   18a3e:	60 87       	std	Z+8, r22	; 0x08
   18a40:	71 87       	std	Z+9, r23	; 0x09
   18a42:	f5 82       	std	Z+5, r15	; 0x05
   18a44:	e4 82       	std	Z+4, r14	; 0x04
   18a46:	8a e5       	ldi	r24, 0x5A	; 90
   18a48:	9b e3       	ldi	r25, 0x3B	; 59
   18a4a:	a0 e0       	ldi	r26, 0x00	; 0
   18a4c:	81 83       	std	Z+1, r24	; 0x01
   18a4e:	92 83       	std	Z+2, r25	; 0x02
   18a50:	a3 83       	std	Z+3, r26	; 0x03
   18a52:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18a56:	00 e0       	ldi	r16, 0x00	; 0
   18a58:	10 e0       	ldi	r17, 0x00	; 0
   18a5a:	ec 89       	ldd	r30, Y+20	; 0x14
   18a5c:	fd 89       	ldd	r31, Y+21	; 0x15
   18a5e:	44 81       	ldd	r20, Z+4	; 0x04
   18a60:	55 81       	ldd	r21, Z+5	; 0x05
   18a62:	66 81       	ldd	r22, Z+6	; 0x06
   18a64:	77 81       	ldd	r23, Z+7	; 0x07
   18a66:	41 15       	cp	r20, r1
   18a68:	51 05       	cpc	r21, r1
   18a6a:	61 05       	cpc	r22, r1
   18a6c:	71 05       	cpc	r23, r1
   18a6e:	99 f1       	breq	.+102    	; 0x18ad6 <lif_check_dir+0x146>
   18a70:	e4 5a       	subi	r30, 0xA4	; 164
   18a72:	ff 4f       	sbci	r31, 0xFF	; 255
   18a74:	80 80       	ld	r8, Z
   18a76:	91 80       	ldd	r9, Z+1	; 0x01
   18a78:	a2 80       	ldd	r10, Z+2	; 0x02
   18a7a:	b3 80       	ldd	r11, Z+3	; 0x03
   18a7c:	ec 89       	ldd	r30, Y+20	; 0x14
   18a7e:	fd 89       	ldd	r31, Y+21	; 0x15
   18a80:	e0 5a       	subi	r30, 0xA0	; 160
   18a82:	ff 4f       	sbci	r31, 0xFF	; 255
   18a84:	80 81       	ld	r24, Z
   18a86:	91 81       	ldd	r25, Z+1	; 0x01
   18a88:	a2 81       	ldd	r26, Z+2	; 0x02
   18a8a:	b3 81       	ldd	r27, Z+3	; 0x03
   18a8c:	88 0d       	add	r24, r8
   18a8e:	99 1d       	adc	r25, r9
   18a90:	aa 1d       	adc	r26, r10
   18a92:	bb 1d       	adc	r27, r11
   18a94:	48 17       	cp	r20, r24
   18a96:	59 07       	cpc	r21, r25
   18a98:	6a 07       	cpc	r22, r26
   18a9a:	7b 07       	cpc	r23, r27
   18a9c:	e0 f4       	brcc	.+56     	; 0x18ad6 <lif_check_dir+0x146>
   18a9e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18aa2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18aa6:	32 ff       	sbrs	r19, 2
   18aa8:	14 c0       	rjmp	.+40     	; 0x18ad2 <lif_check_dir+0x142>
   18aaa:	ed b7       	in	r30, 0x3d	; 61
   18aac:	fe b7       	in	r31, 0x3e	; 62
   18aae:	42 87       	std	Z+10, r20	; 0x0a
   18ab0:	53 87       	std	Z+11, r21	; 0x0b
   18ab2:	64 87       	std	Z+12, r22	; 0x0c
   18ab4:	75 87       	std	Z+13, r23	; 0x0d
   18ab6:	86 83       	std	Z+6, r24	; 0x06
   18ab8:	97 83       	std	Z+7, r25	; 0x07
   18aba:	a0 87       	std	Z+8, r26	; 0x08
   18abc:	b1 87       	std	Z+9, r27	; 0x09
   18abe:	f5 82       	std	Z+5, r15	; 0x05
   18ac0:	e4 82       	std	Z+4, r14	; 0x04
   18ac2:	89 e1       	ldi	r24, 0x19	; 25
   18ac4:	9b e3       	ldi	r25, 0x3B	; 59
   18ac6:	a0 e0       	ldi	r26, 0x00	; 0
   18ac8:	81 83       	std	Z+1, r24	; 0x01
   18aca:	92 83       	std	Z+2, r25	; 0x02
   18acc:	a3 83       	std	Z+3, r26	; 0x03
   18ace:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18ad2:	00 e0       	ldi	r16, 0x00	; 0
   18ad4:	10 e0       	ldi	r17, 0x00	; 0
   18ad6:	ec 89       	ldd	r30, Y+20	; 0x14
   18ad8:	fd 89       	ldd	r31, Y+21	; 0x15
   18ada:	e6 59       	subi	r30, 0x96	; 150
   18adc:	ff 4f       	sbci	r31, 0xFF	; 255
   18ade:	80 81       	ld	r24, Z
   18ae0:	91 81       	ldd	r25, Z+1	; 0x01
   18ae2:	81 30       	cpi	r24, 0x01	; 1
   18ae4:	f0 e8       	ldi	r31, 0x80	; 128
   18ae6:	9f 07       	cpc	r25, r31
   18ae8:	b1 f0       	breq	.+44     	; 0x18b16 <lif_check_dir+0x186>
   18aea:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18aee:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18af2:	32 ff       	sbrs	r19, 2
   18af4:	0e c0       	rjmp	.+28     	; 0x18b12 <lif_check_dir+0x182>
   18af6:	ed b7       	in	r30, 0x3d	; 61
   18af8:	fe b7       	in	r31, 0x3e	; 62
   18afa:	97 83       	std	Z+7, r25	; 0x07
   18afc:	86 83       	std	Z+6, r24	; 0x06
   18afe:	f5 82       	std	Z+5, r15	; 0x05
   18b00:	e4 82       	std	Z+4, r14	; 0x04
   18b02:	8b ee       	ldi	r24, 0xEB	; 235
   18b04:	9a e3       	ldi	r25, 0x3A	; 58
   18b06:	a0 e0       	ldi	r26, 0x00	; 0
   18b08:	81 83       	std	Z+1, r24	; 0x01
   18b0a:	92 83       	std	Z+2, r25	; 0x02
   18b0c:	a3 83       	std	Z+3, r26	; 0x03
   18b0e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18b12:	00 e0       	ldi	r16, 0x00	; 0
   18b14:	10 e0       	ldi	r17, 0x00	; 0
   18b16:	f6 01       	movw	r30, r12
   18b18:	80 81       	ld	r24, Z
   18b1a:	91 81       	ldd	r25, Z+1	; 0x01
   18b1c:	8c 7f       	andi	r24, 0xFC	; 252
   18b1e:	80 31       	cpi	r24, 0x10	; 16
   18b20:	90 4e       	sbci	r25, 0xE0	; 224
   18b22:	09 f0       	breq	.+2      	; 0x18b26 <lif_check_dir+0x196>
   18b24:	b3 c0       	rjmp	.+358    	; 0x18c8c <lif_check_dir+0x2fc>
   18b26:	cc 88       	ldd	r12, Y+20	; 0x14
   18b28:	dd 88       	ldd	r13, Y+21	; 0x15
   18b2a:	2c e6       	ldi	r18, 0x6C	; 108
   18b2c:	c2 0e       	add	r12, r18
   18b2e:	d1 1c       	adc	r13, r1
   18b30:	f6 01       	movw	r30, r12
   18b32:	80 81       	ld	r24, Z
   18b34:	91 81       	ldd	r25, Z+1	; 0x01
   18b36:	00 97       	sbiw	r24, 0x00	; 0
   18b38:	09 f4       	brne	.+2      	; 0x18b3c <lif_check_dir+0x1ac>
   18b3a:	a8 c0       	rjmp	.+336    	; 0x18c8c <lif_check_dir+0x2fc>
   18b3c:	4c 01       	movw	r8, r24
   18b3e:	a1 2c       	mov	r10, r1
   18b40:	b1 2c       	mov	r11, r1
   18b42:	77 27       	eor	r23, r23
   18b44:	6b 2d       	mov	r22, r11
   18b46:	5a 2d       	mov	r21, r10
   18b48:	49 2d       	mov	r20, r9
   18b4a:	9c 01       	movw	r18, r24
   18b4c:	33 27       	eor	r19, r19
   18b4e:	3b 8b       	std	Y+19, r19	; 0x13
   18b50:	2a 8b       	std	Y+18, r18	; 0x12
   18b52:	db 01       	movw	r26, r22
   18b54:	ca 01       	movw	r24, r20
   18b56:	23 2b       	or	r18, r19
   18b58:	19 f0       	breq	.+6      	; 0x18b60 <lif_check_dir+0x1d0>
   18b5a:	01 96       	adiw	r24, 0x01	; 1
   18b5c:	a1 1d       	adc	r26, r1
   18b5e:	b1 1d       	adc	r27, r1
   18b60:	2c 88       	ldd	r2, Y+20	; 0x14
   18b62:	3d 88       	ldd	r3, Y+21	; 0x15
   18b64:	30 e6       	ldi	r19, 0x60	; 96
   18b66:	23 0e       	add	r2, r19
   18b68:	31 1c       	adc	r3, r1
   18b6a:	f1 01       	movw	r30, r2
   18b6c:	40 80       	ld	r4, Z
   18b6e:	51 80       	ldd	r5, Z+1	; 0x01
   18b70:	62 80       	ldd	r6, Z+2	; 0x02
   18b72:	73 80       	ldd	r7, Z+3	; 0x03
   18b74:	48 16       	cp	r4, r24
   18b76:	59 06       	cpc	r5, r25
   18b78:	6a 06       	cpc	r6, r26
   18b7a:	7b 06       	cpc	r7, r27
   18b7c:	40 f5       	brcc	.+80     	; 0x18bce <lif_check_dir+0x23e>
   18b7e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18b82:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b86:	32 ff       	sbrs	r19, 2
   18b88:	20 c0       	rjmp	.+64     	; 0x18bca <lif_check_dir+0x23a>
   18b8a:	2a 89       	ldd	r18, Y+18	; 0x12
   18b8c:	3b 89       	ldd	r19, Y+19	; 0x13
   18b8e:	23 2b       	or	r18, r19
   18b90:	21 f0       	breq	.+8      	; 0x18b9a <lif_check_dir+0x20a>
   18b92:	4f 5f       	subi	r20, 0xFF	; 255
   18b94:	5f 4f       	sbci	r21, 0xFF	; 255
   18b96:	6f 4f       	sbci	r22, 0xFF	; 255
   18b98:	7f 4f       	sbci	r23, 0xFF	; 255
   18b9a:	ed b7       	in	r30, 0x3d	; 61
   18b9c:	fe b7       	in	r31, 0x3e	; 62
   18b9e:	46 86       	std	Z+14, r4	; 0x0e
   18ba0:	57 86       	std	Z+15, r5	; 0x0f
   18ba2:	60 8a       	std	Z+16, r6	; 0x10
   18ba4:	71 8a       	std	Z+17, r7	; 0x11
   18ba6:	42 87       	std	Z+10, r20	; 0x0a
   18ba8:	53 87       	std	Z+11, r21	; 0x0b
   18baa:	64 87       	std	Z+12, r22	; 0x0c
   18bac:	75 87       	std	Z+13, r23	; 0x0d
   18bae:	86 82       	std	Z+6, r8	; 0x06
   18bb0:	97 82       	std	Z+7, r9	; 0x07
   18bb2:	a0 86       	std	Z+8, r10	; 0x08
   18bb4:	b1 86       	std	Z+9, r11	; 0x09
   18bb6:	f5 82       	std	Z+5, r15	; 0x05
   18bb8:	e4 82       	std	Z+4, r14	; 0x04
   18bba:	80 ea       	ldi	r24, 0xA0	; 160
   18bbc:	9a e3       	ldi	r25, 0x3A	; 58
   18bbe:	a0 e0       	ldi	r26, 0x00	; 0
   18bc0:	81 83       	std	Z+1, r24	; 0x01
   18bc2:	92 83       	std	Z+2, r25	; 0x02
   18bc4:	a3 83       	std	Z+3, r26	; 0x03
   18bc6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18bca:	00 e0       	ldi	r16, 0x00	; 0
   18bcc:	10 e0       	ldi	r17, 0x00	; 0
   18bce:	f6 01       	movw	r30, r12
   18bd0:	20 81       	ld	r18, Z
   18bd2:	31 81       	ldd	r19, Z+1	; 0x01
   18bd4:	a9 01       	movw	r20, r18
   18bd6:	60 e0       	ldi	r22, 0x00	; 0
   18bd8:	70 e0       	ldi	r23, 0x00	; 0
   18bda:	bb 27       	eor	r27, r27
   18bdc:	a7 2f       	mov	r26, r23
   18bde:	96 2f       	mov	r25, r22
   18be0:	85 2f       	mov	r24, r21
   18be2:	f9 01       	movw	r30, r18
   18be4:	ff 27       	eor	r31, r31
   18be6:	fb 8b       	std	Y+19, r31	; 0x13
   18be8:	ea 8b       	std	Y+18, r30	; 0x12
   18bea:	2c 01       	movw	r4, r24
   18bec:	3d 01       	movw	r6, r26
   18bee:	ef 2b       	or	r30, r31
   18bf0:	29 f0       	breq	.+10     	; 0x18bfc <lif_check_dir+0x26c>
   18bf2:	ff ef       	ldi	r31, 0xFF	; 255
   18bf4:	4f 1a       	sub	r4, r31
   18bf6:	5f 0a       	sbc	r5, r31
   18bf8:	6f 0a       	sbc	r6, r31
   18bfa:	7f 0a       	sbc	r7, r31
   18bfc:	f1 01       	movw	r30, r2
   18bfe:	80 80       	ld	r8, Z
   18c00:	91 80       	ldd	r9, Z+1	; 0x01
   18c02:	a2 80       	ldd	r10, Z+2	; 0x02
   18c04:	b3 80       	ldd	r11, Z+3	; 0x03
   18c06:	48 14       	cp	r4, r8
   18c08:	59 04       	cpc	r5, r9
   18c0a:	6a 04       	cpc	r6, r10
   18c0c:	7b 04       	cpc	r7, r11
   18c0e:	28 f5       	brcc	.+74     	; 0x18c5a <lif_check_dir+0x2ca>
   18c10:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c14:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c18:	32 ff       	sbrs	r19, 2
   18c1a:	1f c0       	rjmp	.+62     	; 0x18c5a <lif_check_dir+0x2ca>
   18c1c:	2a 89       	ldd	r18, Y+18	; 0x12
   18c1e:	3b 89       	ldd	r19, Y+19	; 0x13
   18c20:	23 2b       	or	r18, r19
   18c22:	19 f0       	breq	.+6      	; 0x18c2a <lif_check_dir+0x29a>
   18c24:	01 96       	adiw	r24, 0x01	; 1
   18c26:	a1 1d       	adc	r26, r1
   18c28:	b1 1d       	adc	r27, r1
   18c2a:	ed b7       	in	r30, 0x3d	; 61
   18c2c:	fe b7       	in	r31, 0x3e	; 62
   18c2e:	86 86       	std	Z+14, r8	; 0x0e
   18c30:	97 86       	std	Z+15, r9	; 0x0f
   18c32:	a0 8a       	std	Z+16, r10	; 0x10
   18c34:	b1 8a       	std	Z+17, r11	; 0x11
   18c36:	82 87       	std	Z+10, r24	; 0x0a
   18c38:	93 87       	std	Z+11, r25	; 0x0b
   18c3a:	a4 87       	std	Z+12, r26	; 0x0c
   18c3c:	b5 87       	std	Z+13, r27	; 0x0d
   18c3e:	46 83       	std	Z+6, r20	; 0x06
   18c40:	57 83       	std	Z+7, r21	; 0x07
   18c42:	60 87       	std	Z+8, r22	; 0x08
   18c44:	71 87       	std	Z+9, r23	; 0x09
   18c46:	f5 82       	std	Z+5, r15	; 0x05
   18c48:	e4 82       	std	Z+4, r14	; 0x04
   18c4a:	85 e5       	ldi	r24, 0x55	; 85
   18c4c:	9a e3       	ldi	r25, 0x3A	; 58
   18c4e:	a0 e0       	ldi	r26, 0x00	; 0
   18c50:	81 83       	std	Z+1, r24	; 0x01
   18c52:	92 83       	std	Z+2, r25	; 0x02
   18c54:	a3 83       	std	Z+3, r26	; 0x03
   18c56:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18c5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c5e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c62:	92 ff       	sbrs	r25, 2
   18c64:	13 c0       	rjmp	.+38     	; 0x18c8c <lif_check_dir+0x2fc>
   18c66:	f6 01       	movw	r30, r12
   18c68:	80 81       	ld	r24, Z
   18c6a:	91 81       	ldd	r25, Z+1	; 0x01
   18c6c:	89 2b       	or	r24, r25
   18c6e:	71 f4       	brne	.+28     	; 0x18c8c <lif_check_dir+0x2fc>
   18c70:	ed b7       	in	r30, 0x3d	; 61
   18c72:	fe b7       	in	r31, 0x3e	; 62
   18c74:	f5 82       	std	Z+5, r15	; 0x05
   18c76:	e4 82       	std	Z+4, r14	; 0x04
   18c78:	8a e2       	ldi	r24, 0x2A	; 42
   18c7a:	9a e3       	ldi	r25, 0x3A	; 58
   18c7c:	a0 e0       	ldi	r26, 0x00	; 0
   18c7e:	81 83       	std	Z+1, r24	; 0x01
   18c80:	92 83       	std	Z+2, r25	; 0x02
   18c82:	a3 83       	std	Z+3, r26	; 0x03
   18c84:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18c88:	00 e0       	ldi	r16, 0x00	; 0
   18c8a:	10 e0       	ldi	r17, 0x00	; 0
   18c8c:	ec 89       	ldd	r30, Y+20	; 0x14
   18c8e:	fd 89       	ldd	r31, Y+21	; 0x15
   18c90:	e2 59       	subi	r30, 0x92	; 146
   18c92:	ff 4f       	sbci	r31, 0xFF	; 255
   18c94:	20 81       	ld	r18, Z
   18c96:	31 81       	ldd	r19, Z+1	; 0x01
   18c98:	21 15       	cp	r18, r1
   18c9a:	f1 e0       	ldi	r31, 0x01	; 1
   18c9c:	3f 07       	cpc	r19, r31
   18c9e:	41 f1       	breq	.+80     	; 0x18cf0 <lif_check_dir+0x360>
   18ca0:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18ca4:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ca8:	ca 01       	movw	r24, r20
   18caa:	88 27       	eor	r24, r24
   18cac:	94 70       	andi	r25, 0x04	; 4
   18cae:	52 ff       	sbrs	r21, 2
   18cb0:	20 c0       	rjmp	.+64     	; 0x18cf2 <lif_check_dir+0x362>
   18cb2:	c9 01       	movw	r24, r18
   18cb4:	a0 e0       	ldi	r26, 0x00	; 0
   18cb6:	b0 e0       	ldi	r27, 0x00	; 0
   18cb8:	ed b7       	in	r30, 0x3d	; 61
   18cba:	fe b7       	in	r31, 0x3e	; 62
   18cbc:	86 83       	std	Z+6, r24	; 0x06
   18cbe:	97 83       	std	Z+7, r25	; 0x07
   18cc0:	a0 87       	std	Z+8, r26	; 0x08
   18cc2:	b1 87       	std	Z+9, r27	; 0x09
   18cc4:	ec 89       	ldd	r30, Y+20	; 0x14
   18cc6:	fd 89       	ldd	r31, Y+21	; 0x15
   18cc8:	80 81       	ld	r24, Z
   18cca:	91 81       	ldd	r25, Z+1	; 0x01
   18ccc:	ed b7       	in	r30, 0x3d	; 61
   18cce:	fe b7       	in	r31, 0x3e	; 62
   18cd0:	95 83       	std	Z+5, r25	; 0x05
   18cd2:	84 83       	std	Z+4, r24	; 0x04
   18cd4:	8e ef       	ldi	r24, 0xFE	; 254
   18cd6:	99 e3       	ldi	r25, 0x39	; 57
   18cd8:	a0 e0       	ldi	r26, 0x00	; 0
   18cda:	81 83       	std	Z+1, r24	; 0x01
   18cdc:	92 83       	std	Z+2, r25	; 0x02
   18cde:	a3 83       	std	Z+3, r26	; 0x03
   18ce0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18ce4:	80 e0       	ldi	r24, 0x00	; 0
   18ce6:	90 e0       	ldi	r25, 0x00	; 0
   18ce8:	04 c0       	rjmp	.+8      	; 0x18cf2 <lif_check_dir+0x362>
   18cea:	81 e0       	ldi	r24, 0x01	; 1
   18cec:	90 e0       	ldi	r25, 0x00	; 0
   18cee:	01 c0       	rjmp	.+2      	; 0x18cf2 <lif_check_dir+0x362>
   18cf0:	c8 01       	movw	r24, r16
   18cf2:	65 96       	adiw	r28, 0x15	; 21
   18cf4:	e2 e1       	ldi	r30, 0x12	; 18
   18cf6:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00018cfa <lif_close_volume>:
   18cfa:	cf 93       	push	r28
   18cfc:	df 93       	push	r29
   18cfe:	00 97       	sbiw	r24, 0x00	; 0
   18d00:	f9 f0       	breq	.+62     	; 0x18d40 <lif_close_volume+0x46>
   18d02:	ec 01       	movw	r28, r24
   18d04:	8a 81       	ldd	r24, Y+2	; 0x02
   18d06:	9b 81       	ldd	r25, Y+3	; 0x03
   18d08:	00 97       	sbiw	r24, 0x00	; 0
   18d0a:	79 f0       	breq	.+30     	; 0x18d2a <lif_close_volume+0x30>
   18d0c:	22 e0       	ldi	r18, 0x02	; 2
   18d0e:	30 e0       	ldi	r19, 0x00	; 0
   18d10:	40 e0       	ldi	r20, 0x00	; 0
   18d12:	50 e0       	ldi	r21, 0x00	; 0
   18d14:	ba 01       	movw	r22, r20
   18d16:	0e 94 95 79 	call	0xf32a	; 0xf32a <fseek>
   18d1a:	8a 81       	ldd	r24, Y+2	; 0x02
   18d1c:	9b 81       	ldd	r25, Y+3	; 0x03
   18d1e:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
   18d22:	1b 82       	std	Y+3, r1	; 0x03
   18d24:	1a 82       	std	Y+2, r1	; 0x02
   18d26:	0e 94 78 7a 	call	0xf4f0	; 0xf4f0 <sync>
   18d2a:	88 81       	ld	r24, Y
   18d2c:	99 81       	ldd	r25, Y+1	; 0x01
   18d2e:	00 97       	sbiw	r24, 0x00	; 0
   18d30:	11 f0       	breq	.+4      	; 0x18d36 <lif_close_volume+0x3c>
   18d32:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <lif_free>
   18d36:	ce 01       	movw	r24, r28
   18d38:	73 db       	rcall	.-2330   	; 0x18420 <lif_vol_clear>
   18d3a:	ce 01       	movw	r24, r28
   18d3c:	0e 94 f9 bc 	call	0x179f2	; 0x179f2 <lif_free>
   18d40:	df 91       	pop	r29
   18d42:	cf 91       	pop	r28
   18d44:	08 95       	ret

00018d46 <lif_checkdirindex>:
   18d46:	cf 92       	push	r12
   18d48:	df 92       	push	r13
   18d4a:	ef 92       	push	r14
   18d4c:	ff 92       	push	r15
   18d4e:	cf 93       	push	r28
   18d50:	df 93       	push	r29
   18d52:	ad b7       	in	r26, 0x3d	; 61
   18d54:	be b7       	in	r27, 0x3e	; 62
   18d56:	17 97       	sbiw	r26, 0x07	; 7
   18d58:	0f b6       	in	r0, 0x3f	; 63
   18d5a:	f8 94       	cli
   18d5c:	be bf       	out	0x3e, r27	; 62
   18d5e:	0f be       	out	0x3f, r0	; 63
   18d60:	ad bf       	out	0x3d, r26	; 61
   18d62:	9b 01       	movw	r18, r22
   18d64:	77 fd       	sbrc	r23, 7
   18d66:	25 c0       	rjmp	.+74     	; 0x18db2 <lif_checkdirindex+0x6c>
   18d68:	ab 01       	movw	r20, r22
   18d6a:	77 0f       	add	r23, r23
   18d6c:	66 0b       	sbc	r22, r22
   18d6e:	77 0b       	sbc	r23, r23
   18d70:	e5 e0       	ldi	r30, 0x05	; 5
   18d72:	44 0f       	add	r20, r20
   18d74:	55 1f       	adc	r21, r21
   18d76:	66 1f       	adc	r22, r22
   18d78:	77 1f       	adc	r23, r23
   18d7a:	ea 95       	dec	r30
   18d7c:	d1 f7       	brne	.-12     	; 0x18d72 <lif_checkdirindex+0x2c>
   18d7e:	c5 2e       	mov	r12, r21
   18d80:	d6 2e       	mov	r13, r22
   18d82:	e7 2e       	mov	r14, r23
   18d84:	ff 24       	eor	r15, r15
   18d86:	55 27       	eor	r21, r21
   18d88:	66 27       	eor	r22, r22
   18d8a:	77 27       	eor	r23, r23
   18d8c:	45 2b       	or	r20, r21
   18d8e:	46 2b       	or	r20, r22
   18d90:	47 2b       	or	r20, r23
   18d92:	29 f0       	breq	.+10     	; 0x18d9e <lif_checkdirindex+0x58>
   18d94:	4f ef       	ldi	r20, 0xFF	; 255
   18d96:	c4 1a       	sub	r12, r20
   18d98:	d4 0a       	sbc	r13, r20
   18d9a:	e4 0a       	sbc	r14, r20
   18d9c:	f4 0a       	sbc	r15, r20
   18d9e:	fc 01       	movw	r30, r24
   18da0:	45 a9       	ldd	r20, Z+53	; 0x35
   18da2:	56 a9       	ldd	r21, Z+54	; 0x36
   18da4:	67 a9       	ldd	r22, Z+55	; 0x37
   18da6:	70 ad       	ldd	r23, Z+56	; 0x38
   18da8:	4c 15       	cp	r20, r12
   18daa:	5d 05       	cpc	r21, r13
   18dac:	6e 05       	cpc	r22, r14
   18dae:	7f 05       	cpc	r23, r15
   18db0:	08 f5       	brcc	.+66     	; 0x18df4 <lif_checkdirindex+0xae>
   18db2:	ec 01       	movw	r28, r24
   18db4:	ed b7       	in	r30, 0x3d	; 61
   18db6:	fe b7       	in	r31, 0x3e	; 62
   18db8:	37 83       	std	Z+7, r19	; 0x07
   18dba:	26 83       	std	Z+6, r18	; 0x06
   18dbc:	88 81       	ld	r24, Y
   18dbe:	99 81       	ldd	r25, Y+1	; 0x01
   18dc0:	95 83       	std	Z+5, r25	; 0x05
   18dc2:	84 83       	std	Z+4, r24	; 0x04
   18dc4:	8b e3       	ldi	r24, 0x3B	; 59
   18dc6:	99 e3       	ldi	r25, 0x39	; 57
   18dc8:	a0 e0       	ldi	r26, 0x00	; 0
   18dca:	81 83       	std	Z+1, r24	; 0x01
   18dcc:	92 83       	std	Z+2, r25	; 0x02
   18dce:	a3 83       	std	Z+3, r26	; 0x03
   18dd0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18dd4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18dd8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ddc:	c9 01       	movw	r24, r18
   18dde:	88 27       	eor	r24, r24
   18de0:	94 70       	andi	r25, 0x04	; 4
   18de2:	32 ff       	sbrs	r19, 2
   18de4:	09 c0       	rjmp	.+18     	; 0x18df8 <lif_checkdirindex+0xb2>
   18de6:	66 ef       	ldi	r22, 0xF6	; 246
   18de8:	75 e1       	ldi	r23, 0x15	; 21
   18dea:	ce 01       	movw	r24, r28
   18dec:	20 db       	rcall	.-2496   	; 0x1842e <lif_dump_vol>
   18dee:	80 e0       	ldi	r24, 0x00	; 0
   18df0:	90 e0       	ldi	r25, 0x00	; 0
   18df2:	02 c0       	rjmp	.+4      	; 0x18df8 <lif_checkdirindex+0xb2>
   18df4:	81 e0       	ldi	r24, 0x01	; 1
   18df6:	90 e0       	ldi	r25, 0x00	; 0
   18df8:	ad b7       	in	r26, 0x3d	; 61
   18dfa:	be b7       	in	r27, 0x3e	; 62
   18dfc:	17 96       	adiw	r26, 0x07	; 7
   18dfe:	0f b6       	in	r0, 0x3f	; 63
   18e00:	f8 94       	cli
   18e02:	be bf       	out	0x3e, r27	; 62
   18e04:	0f be       	out	0x3f, r0	; 63
   18e06:	ad bf       	out	0x3d, r26	; 61
   18e08:	df 91       	pop	r29
   18e0a:	cf 91       	pop	r28
   18e0c:	ff 90       	pop	r15
   18e0e:	ef 90       	pop	r14
   18e10:	df 90       	pop	r13
   18e12:	cf 90       	pop	r12
   18e14:	08 95       	ret

00018e16 <lif_readdirindex>:
   18e16:	a5 e2       	ldi	r26, 0x25	; 37
   18e18:	b0 e0       	ldi	r27, 0x00	; 0
   18e1a:	e1 e1       	ldi	r30, 0x11	; 17
   18e1c:	f7 ec       	ldi	r31, 0xC7	; 199
   18e1e:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
   18e22:	7c 01       	movw	r14, r24
   18e24:	6b 01       	movw	r12, r22
   18e26:	8f df       	rcall	.-226    	; 0x18d46 <lif_checkdirindex>
   18e28:	89 2b       	or	r24, r25
   18e2a:	19 f4       	brne	.+6      	; 0x18e32 <lif_readdirindex+0x1c>
   18e2c:	00 e0       	ldi	r16, 0x00	; 0
   18e2e:	10 e0       	ldi	r17, 0x00	; 0
   18e30:	54 c0       	rjmp	.+168    	; 0x18eda <lif_readdirindex+0xc4>
   18e32:	f7 01       	movw	r30, r14
   18e34:	85 a5       	ldd	r24, Z+45	; 0x2d
   18e36:	96 a5       	ldd	r25, Z+46	; 0x2e
   18e38:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18e3a:	b0 a9       	ldd	r27, Z+48	; 0x30
   18e3c:	44 27       	eor	r20, r20
   18e3e:	58 2f       	mov	r21, r24
   18e40:	69 2f       	mov	r22, r25
   18e42:	7a 2f       	mov	r23, r26
   18e44:	c6 01       	movw	r24, r12
   18e46:	0d 2c       	mov	r0, r13
   18e48:	00 0c       	add	r0, r0
   18e4a:	aa 0b       	sbc	r26, r26
   18e4c:	bb 0b       	sbc	r27, r27
   18e4e:	35 e0       	ldi	r19, 0x05	; 5
   18e50:	88 0f       	add	r24, r24
   18e52:	99 1f       	adc	r25, r25
   18e54:	aa 1f       	adc	r26, r26
   18e56:	bb 1f       	adc	r27, r27
   18e58:	3a 95       	dec	r19
   18e5a:	d1 f7       	brne	.-12     	; 0x18e50 <lif_readdirindex+0x3a>
   18e5c:	9a 01       	movw	r18, r20
   18e5e:	ab 01       	movw	r20, r22
   18e60:	28 0f       	add	r18, r24
   18e62:	39 1f       	adc	r19, r25
   18e64:	4a 1f       	adc	r20, r26
   18e66:	5b 1f       	adc	r21, r27
   18e68:	00 e2       	ldi	r16, 0x20	; 32
   18e6a:	10 e0       	ldi	r17, 0x00	; 0
   18e6c:	be 01       	movw	r22, r28
   18e6e:	6a 5f       	subi	r22, 0xFA	; 250
   18e70:	7f 4f       	sbci	r23, 0xFF	; 255
   18e72:	c7 01       	movw	r24, r14
   18e74:	0e 94 b1 bd 	call	0x17b62	; 0x17b62 <lif_read>
   18e78:	60 32       	cpi	r22, 0x20	; 32
   18e7a:	71 05       	cpc	r23, r1
   18e7c:	81 05       	cpc	r24, r1
   18e7e:	91 05       	cpc	r25, r1
   18e80:	a8 f2       	brcs	.-86     	; 0x18e2c <lif_readdirindex+0x16>
   18e82:	b7 01       	movw	r22, r14
   18e84:	ce 01       	movw	r24, r28
   18e86:	06 96       	adiw	r24, 0x06	; 6
   18e88:	75 d9       	rcall	.-3350   	; 0x18174 <lif_str2dir>
   18e8a:	f7 01       	movw	r30, r14
   18e8c:	e6 5a       	subi	r30, 0xA6	; 166
   18e8e:	ff 4f       	sbci	r31, 0xFF	; 255
   18e90:	80 81       	ld	r24, Z
   18e92:	91 81       	ldd	r25, Z+1	; 0x01
   18e94:	01 96       	adiw	r24, 0x01	; 1
   18e96:	19 f4       	brne	.+6      	; 0x18e9e <lif_readdirindex+0x88>
   18e98:	f7 01       	movw	r30, r14
   18e9a:	d3 a2       	std	Z+35, r13	; 0x23
   18e9c:	c2 a2       	std	Z+34, r12	; 0x22
   18e9e:	c7 01       	movw	r24, r14
   18ea0:	77 dd       	rcall	.-1298   	; 0x18990 <lif_check_dir>
   18ea2:	8c 01       	movw	r16, r24
   18ea4:	89 2b       	or	r24, r25
   18ea6:	b9 f4       	brne	.+46     	; 0x18ed6 <lif_readdirindex+0xc0>
   18ea8:	ed b7       	in	r30, 0x3d	; 61
   18eaa:	fe b7       	in	r31, 0x3e	; 62
   18eac:	d5 82       	std	Z+5, r13	; 0x05
   18eae:	c4 82       	std	Z+4, r12	; 0x04
   18eb0:	8b e1       	ldi	r24, 0x1B	; 27
   18eb2:	99 e3       	ldi	r25, 0x39	; 57
   18eb4:	a0 e0       	ldi	r26, 0x00	; 0
   18eb6:	81 83       	std	Z+1, r24	; 0x01
   18eb8:	92 83       	std	Z+2, r25	; 0x02
   18eba:	a3 83       	std	Z+3, r26	; 0x03
   18ebc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   18ec0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ec4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ec8:	92 ff       	sbrs	r25, 2
   18eca:	b0 cf       	rjmp	.-160    	; 0x18e2c <lif_readdirindex+0x16>
   18ecc:	67 e0       	ldi	r22, 0x07	; 7
   18ece:	76 e1       	ldi	r23, 0x16	; 22
   18ed0:	c7 01       	movw	r24, r14
   18ed2:	ad da       	rcall	.-2726   	; 0x1842e <lif_dump_vol>
   18ed4:	02 c0       	rjmp	.+4      	; 0x18eda <lif_readdirindex+0xc4>
   18ed6:	01 e0       	ldi	r16, 0x01	; 1
   18ed8:	10 e0       	ldi	r17, 0x00	; 0
   18eda:	c8 01       	movw	r24, r16
   18edc:	a5 96       	adiw	r28, 0x25	; 37
   18ede:	e8 e0       	ldi	r30, 0x08	; 8
   18ee0:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

00018ee4 <lif_writedirindex>:
   18ee4:	a0 e2       	ldi	r26, 0x20	; 32
   18ee6:	b0 e0       	ldi	r27, 0x00	; 0
   18ee8:	e8 e7       	ldi	r30, 0x78	; 120
   18eea:	f7 ec       	ldi	r31, 0xC7	; 199
   18eec:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
   18ef0:	5c 01       	movw	r10, r24
   18ef2:	6b 01       	movw	r12, r22
   18ef4:	4d dd       	rcall	.-1382   	; 0x18990 <lif_check_dir>
   18ef6:	7c 01       	movw	r14, r24
   18ef8:	89 2b       	or	r24, r25
   18efa:	71 f4       	brne	.+28     	; 0x18f18 <lif_writedirindex+0x34>
   18efc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f00:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f04:	92 fd       	sbrc	r25, 2
   18f06:	03 c0       	rjmp	.+6      	; 0x18f0e <lif_writedirindex+0x2a>
   18f08:	e1 2c       	mov	r14, r1
   18f0a:	f1 2c       	mov	r15, r1
   18f0c:	42 c0       	rjmp	.+132    	; 0x18f92 <lif_writedirindex+0xae>
   18f0e:	68 e1       	ldi	r22, 0x18	; 24
   18f10:	76 e1       	ldi	r23, 0x16	; 22
   18f12:	c5 01       	movw	r24, r10
   18f14:	8c da       	rcall	.-2792   	; 0x1842e <lif_dump_vol>
   18f16:	3d c0       	rjmp	.+122    	; 0x18f92 <lif_writedirindex+0xae>
   18f18:	b6 01       	movw	r22, r12
   18f1a:	c5 01       	movw	r24, r10
   18f1c:	14 df       	rcall	.-472    	; 0x18d46 <lif_checkdirindex>
   18f1e:	89 2b       	or	r24, r25
   18f20:	99 f3       	breq	.-26     	; 0x18f08 <lif_writedirindex+0x24>
   18f22:	f5 01       	movw	r30, r10
   18f24:	e6 5a       	subi	r30, 0xA6	; 166
   18f26:	ff 4f       	sbci	r31, 0xFF	; 255
   18f28:	80 81       	ld	r24, Z
   18f2a:	91 81       	ldd	r25, Z+1	; 0x01
   18f2c:	01 96       	adiw	r24, 0x01	; 1
   18f2e:	19 f4       	brne	.+6      	; 0x18f36 <lif_writedirindex+0x52>
   18f30:	f5 01       	movw	r30, r10
   18f32:	d3 a2       	std	Z+35, r13	; 0x23
   18f34:	c2 a2       	std	Z+34, r12	; 0x22
   18f36:	f5 01       	movw	r30, r10
   18f38:	85 a5       	ldd	r24, Z+45	; 0x2d
   18f3a:	96 a5       	ldd	r25, Z+46	; 0x2e
   18f3c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18f3e:	b0 a9       	ldd	r27, Z+48	; 0x30
   18f40:	ba 2f       	mov	r27, r26
   18f42:	a9 2f       	mov	r26, r25
   18f44:	98 2f       	mov	r25, r24
   18f46:	88 27       	eor	r24, r24
   18f48:	0d 2c       	mov	r0, r13
   18f4a:	00 0c       	add	r0, r0
   18f4c:	ee 08       	sbc	r14, r14
   18f4e:	ff 08       	sbc	r15, r15
   18f50:	35 e0       	ldi	r19, 0x05	; 5
   18f52:	cc 0c       	add	r12, r12
   18f54:	dd 1c       	adc	r13, r13
   18f56:	ee 1c       	adc	r14, r14
   18f58:	ff 1c       	adc	r15, r15
   18f5a:	3a 95       	dec	r19
   18f5c:	d1 f7       	brne	.-12     	; 0x18f52 <lif_writedirindex+0x6e>
   18f5e:	c8 0e       	add	r12, r24
   18f60:	d9 1e       	adc	r13, r25
   18f62:	ea 1e       	adc	r14, r26
   18f64:	fb 1e       	adc	r15, r27
   18f66:	be 01       	movw	r22, r28
   18f68:	6f 5f       	subi	r22, 0xFF	; 255
   18f6a:	7f 4f       	sbci	r23, 0xFF	; 255
   18f6c:	c5 01       	movw	r24, r10
   18f6e:	97 d8       	rcall	.-3794   	; 0x1809e <lif_dir2str>
   18f70:	00 e2       	ldi	r16, 0x20	; 32
   18f72:	10 e0       	ldi	r17, 0x00	; 0
   18f74:	a7 01       	movw	r20, r14
   18f76:	96 01       	movw	r18, r12
   18f78:	be 01       	movw	r22, r28
   18f7a:	6f 5f       	subi	r22, 0xFF	; 255
   18f7c:	7f 4f       	sbci	r23, 0xFF	; 255
   18f7e:	c5 01       	movw	r24, r10
   18f80:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
   18f84:	31 e0       	ldi	r19, 0x01	; 1
   18f86:	20 e0       	ldi	r18, 0x00	; 0
   18f88:	80 97       	sbiw	r24, 0x20	; 32
   18f8a:	0c f4       	brge	.+2      	; 0x18f8e <lif_writedirindex+0xaa>
   18f8c:	30 e0       	ldi	r19, 0x00	; 0
   18f8e:	e3 2e       	mov	r14, r19
   18f90:	f2 2e       	mov	r15, r18
   18f92:	c7 01       	movw	r24, r14
   18f94:	a0 96       	adiw	r28, 0x20	; 32
   18f96:	ea e0       	ldi	r30, 0x0A	; 10
   18f98:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

00018f9c <lif_writedirEOF>:
   18f9c:	0f 93       	push	r16
   18f9e:	1f 93       	push	r17
   18fa0:	cf 93       	push	r28
   18fa2:	df 93       	push	r29
   18fa4:	ec 01       	movw	r28, r24
   18fa6:	8b 01       	movw	r16, r22
   18fa8:	33 da       	rcall	.-2970   	; 0x18410 <lif_dir_clear>
   18faa:	fe 01       	movw	r30, r28
   18fac:	e6 5a       	subi	r30, 0xA6	; 166
   18fae:	ff 4f       	sbci	r31, 0xFF	; 255
   18fb0:	8f ef       	ldi	r24, 0xFF	; 255
   18fb2:	9f ef       	ldi	r25, 0xFF	; 255
   18fb4:	91 83       	std	Z+1, r25	; 0x01
   18fb6:	80 83       	st	Z, r24
   18fb8:	1b a3       	std	Y+35, r17	; 0x23
   18fba:	0a a3       	std	Y+34, r16	; 0x22
   18fbc:	b8 01       	movw	r22, r16
   18fbe:	ce 01       	movw	r24, r28
   18fc0:	91 df       	rcall	.-222    	; 0x18ee4 <lif_writedirindex>
   18fc2:	df 91       	pop	r29
   18fc4:	cf 91       	pop	r28
   18fc6:	1f 91       	pop	r17
   18fc8:	0f 91       	pop	r16
   18fca:	08 95       	ret

00018fcc <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   18fcc:	2f 92       	push	r2
   18fce:	3f 92       	push	r3
   18fd0:	4f 92       	push	r4
   18fd2:	5f 92       	push	r5
   18fd4:	6f 92       	push	r6
   18fd6:	7f 92       	push	r7
   18fd8:	8f 92       	push	r8
   18fda:	af 92       	push	r10
   18fdc:	bf 92       	push	r11
   18fde:	cf 92       	push	r12
   18fe0:	df 92       	push	r13
   18fe2:	ef 92       	push	r14
   18fe4:	ff 92       	push	r15
   18fe6:	0f 93       	push	r16
   18fe8:	1f 93       	push	r17
   18fea:	cf 93       	push	r28
   18fec:	df 93       	push	r29
   18fee:	cd b7       	in	r28, 0x3d	; 61
   18ff0:	de b7       	in	r29, 0x3e	; 62
   18ff2:	2f 97       	sbiw	r28, 0x0f	; 15
   18ff4:	0f b6       	in	r0, 0x3f	; 63
   18ff6:	f8 94       	cli
   18ff8:	de bf       	out	0x3e, r29	; 62
   18ffa:	0f be       	out	0x3f, r0	; 63
   18ffc:	cd bf       	out	0x3d, r28	; 61
   18ffe:	9f 87       	std	Y+15, r25	; 0x0f
   19000:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19002:	fc 01       	movw	r30, r24
   19004:	24 84       	ldd	r2, Z+12	; 0x0c
   19006:	35 84       	ldd	r3, Z+13	; 0x0d
   19008:	46 84       	ldd	r4, Z+14	; 0x0e
   1900a:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   1900c:	80 89       	ldd	r24, Z+16	; 0x10
   1900e:	91 89       	ldd	r25, Z+17	; 0x11
   19010:	a2 89       	ldd	r26, Z+18	; 0x12
   19012:	b3 89       	ldd	r27, Z+19	; 0x13
   19014:	80 8f       	std	Z+24, r24	; 0x18
   19016:	91 8f       	std	Z+25, r25	; 0x19
   19018:	a2 8f       	std	Z+26, r26	; 0x1a
   1901a:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   1901c:	14 8a       	std	Z+20, r1	; 0x14
   1901e:	15 8a       	std	Z+21, r1	; 0x15
   19020:	16 8a       	std	Z+22, r1	; 0x16
   19022:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19024:	17 8e       	std	Z+31, r1	; 0x1f
   19026:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   19028:	15 8e       	std	Z+29, r1	; 0x1d
   1902a:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   1902c:	11 a2       	std	Z+33, r1	; 0x21
   1902e:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19030:	13 a2       	std	Z+35, r1	; 0x23
   19032:	12 a2       	std	Z+34, r1	; 0x22
   19034:	cc 24       	eor	r12, r12
   19036:	c3 94       	inc	r12
   19038:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   1903a:	0f ef       	ldi	r16, 0xFF	; 255
   1903c:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   1903e:	e6 5a       	subi	r30, 0xA6	; 166
   19040:	ff 4f       	sbci	r31, 0xFF	; 255
   19042:	f9 87       	std	Y+9, r31	; 0x09
   19044:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19046:	ae 84       	ldd	r10, Y+14	; 0x0e
   19048:	bf 84       	ldd	r11, Y+15	; 0x0f
   1904a:	fc e5       	ldi	r31, 0x5C	; 92
   1904c:	af 0e       	add	r10, r31
   1904e:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19050:	8e 85       	ldd	r24, Y+14	; 0x0e
   19052:	9f 85       	ldd	r25, Y+15	; 0x0f
   19054:	80 5a       	subi	r24, 0xA0	; 160
   19056:	9f 4f       	sbci	r25, 0xFF	; 255
   19058:	9b 87       	std	Y+11, r25	; 0x0b
   1905a:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1905c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1905e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19060:	e1 5b       	subi	r30, 0xB1	; 177
   19062:	ff 4f       	sbci	r31, 0xFF	; 255
   19064:	fd 87       	std	Y+13, r31	; 0x0d
   19066:	ec 87       	std	Y+12, r30	; 0x0c
   19068:	8e ec       	ldi	r24, 0xCE	; 206
   1906a:	98 e3       	ldi	r25, 0x38	; 56
   1906c:	3c 01       	movw	r6, r24
   1906e:	81 2c       	mov	r8, r1
   19070:	76 01       	movw	r14, r12
   19072:	21 e0       	ldi	r18, 0x01	; 1
   19074:	e2 1a       	sub	r14, r18
   19076:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19078:	b7 01       	movw	r22, r14
   1907a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1907c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1907e:	cb de       	rcall	.-618    	; 0x18e16 <lif_readdirindex>
   19080:	89 2b       	or	r24, r25
   19082:	19 f4       	brne	.+6      	; 0x1908a <lif_updatefree+0xbe>
        {
            return(NULL);
   19084:	80 e0       	ldi	r24, 0x00	; 0
   19086:	90 e0       	ldi	r25, 0x00	; 0
   19088:	93 c0       	rjmp	.+294    	; 0x191b0 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   1908a:	e8 85       	ldd	r30, Y+8	; 0x08
   1908c:	f9 85       	ldd	r31, Y+9	; 0x09
   1908e:	80 81       	ld	r24, Z
   19090:	91 81       	ldd	r25, Z+1	; 0x01
   19092:	8f 3f       	cpi	r24, 0xFF	; 255
   19094:	ff ef       	ldi	r31, 0xFF	; 255
   19096:	9f 07       	cpc	r25, r31
   19098:	c1 f4       	brne	.+48     	; 0x190ca <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   1909a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1909c:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   1909e:	0f 3f       	cpi	r16, 0xFF	; 255
   190a0:	2f ef       	ldi	r18, 0xFF	; 255
   190a2:	12 07       	cpc	r17, r18
   190a4:	09 f4       	brne	.+2      	; 0x190a8 <lif_updatefree+0xdc>
   190a6:	7a c0       	rjmp	.+244    	; 0x1919c <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   190a8:	13 a3       	std	Z+35, r17	; 0x23
   190aa:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   190ac:	e0 1a       	sub	r14, r16
   190ae:	f1 0a       	sbc	r15, r17
   190b0:	86 8d       	ldd	r24, Z+30	; 0x1e
   190b2:	97 8d       	ldd	r25, Z+31	; 0x1f
   190b4:	8e 19       	sub	r24, r14
   190b6:	9f 09       	sbc	r25, r15
   190b8:	97 8f       	std	Z+31, r25	; 0x1f
   190ba:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   190bc:	b8 01       	movw	r22, r16
   190be:	cf 01       	movw	r24, r30
   190c0:	6d df       	rcall	.-294    	; 0x18f9c <lif_writedirEOF>
   190c2:	89 2b       	or	r24, r25
   190c4:	09 f0       	breq	.+2      	; 0x190c8 <lif_updatefree+0xfc>
   190c6:	6c c0       	rjmp	.+216    	; 0x191a0 <lif_updatefree+0x1d4>
   190c8:	dd cf       	rjmp	.-70     	; 0x19084 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   190ca:	89 2b       	or	r24, r25
   190cc:	81 f4       	brne	.+32     	; 0x190ee <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   190ce:	0f 3f       	cpi	r16, 0xFF	; 255
   190d0:	ff ef       	ldi	r31, 0xFF	; 255
   190d2:	1f 07       	cpc	r17, r31
   190d4:	09 f4       	brne	.+2      	; 0x190d8 <lif_updatefree+0x10c>
   190d6:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   190d8:	ee 85       	ldd	r30, Y+14	; 0x0e
   190da:	ff 85       	ldd	r31, Y+15	; 0x0f
   190dc:	86 8d       	ldd	r24, Z+30	; 0x1e
   190de:	97 8d       	ldd	r25, Z+31	; 0x1f
   190e0:	01 96       	adiw	r24, 0x01	; 1
   190e2:	97 8f       	std	Z+31, r25	; 0x1f
   190e4:	86 8f       	std	Z+30, r24	; 0x1e
   190e6:	ff ef       	ldi	r31, 0xFF	; 255
   190e8:	cf 1a       	sub	r12, r31
   190ea:	df 0a       	sbc	r13, r31
   190ec:	c1 cf       	rjmp	.-126    	; 0x19070 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   190ee:	f5 01       	movw	r30, r10
   190f0:	80 81       	ld	r24, Z
   190f2:	91 81       	ldd	r25, Z+1	; 0x01
   190f4:	a2 81       	ldd	r26, Z+2	; 0x02
   190f6:	b3 81       	ldd	r27, Z+3	; 0x03
   190f8:	82 15       	cp	r24, r2
   190fa:	93 05       	cpc	r25, r3
   190fc:	a4 05       	cpc	r26, r4
   190fe:	b5 05       	cpc	r27, r5
   19100:	c8 f4       	brcc	.+50     	; 0x19134 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19102:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19106:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1910a:	92 ff       	sbrs	r25, 2
   1910c:	13 c0       	rjmp	.+38     	; 0x19134 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1910e:	8c 85       	ldd	r24, Y+12	; 0x0c
   19110:	9d 85       	ldd	r25, Y+13	; 0x0d
   19112:	ed b7       	in	r30, 0x3d	; 61
   19114:	fe b7       	in	r31, 0x3e	; 62
   19116:	97 83       	std	Z+7, r25	; 0x07
   19118:	86 83       	std	Z+6, r24	; 0x06
   1911a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1911c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1911e:	80 81       	ld	r24, Z
   19120:	91 81       	ldd	r25, Z+1	; 0x01
   19122:	ed b7       	in	r30, 0x3d	; 61
   19124:	fe b7       	in	r31, 0x3e	; 62
   19126:	95 83       	std	Z+5, r25	; 0x05
   19128:	84 83       	std	Z+4, r24	; 0x04
   1912a:	61 82       	std	Z+1, r6	; 0x01
   1912c:	72 82       	std	Z+2, r7	; 0x02
   1912e:	83 82       	std	Z+3, r8	; 0x03
   19130:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19134:	ea 85       	ldd	r30, Y+10	; 0x0a
   19136:	fb 85       	ldd	r31, Y+11	; 0x0b
   19138:	80 81       	ld	r24, Z
   1913a:	91 81       	ldd	r25, Z+1	; 0x01
   1913c:	a2 81       	ldd	r26, Z+2	; 0x02
   1913e:	b3 81       	ldd	r27, Z+3	; 0x03
   19140:	ee 85       	ldd	r30, Y+14	; 0x0e
   19142:	ff 85       	ldd	r31, Y+15	; 0x0f
   19144:	44 89       	ldd	r20, Z+20	; 0x14
   19146:	55 89       	ldd	r21, Z+21	; 0x15
   19148:	66 89       	ldd	r22, Z+22	; 0x16
   1914a:	77 89       	ldd	r23, Z+23	; 0x17
   1914c:	48 0f       	add	r20, r24
   1914e:	59 1f       	adc	r21, r25
   19150:	6a 1f       	adc	r22, r26
   19152:	7b 1f       	adc	r23, r27
   19154:	44 8b       	std	Z+20, r20	; 0x14
   19156:	55 8b       	std	Z+21, r21	; 0x15
   19158:	66 8b       	std	Z+22, r22	; 0x16
   1915a:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   1915c:	40 8d       	ldd	r20, Z+24	; 0x18
   1915e:	51 8d       	ldd	r21, Z+25	; 0x19
   19160:	62 8d       	ldd	r22, Z+26	; 0x1a
   19162:	73 8d       	ldd	r23, Z+27	; 0x1b
   19164:	48 1b       	sub	r20, r24
   19166:	59 0b       	sbc	r21, r25
   19168:	6a 0b       	sbc	r22, r26
   1916a:	7b 0b       	sbc	r23, r27
   1916c:	40 8f       	std	Z+24, r20	; 0x18
   1916e:	51 8f       	std	Z+25, r21	; 0x19
   19170:	62 8f       	std	Z+26, r22	; 0x1a
   19172:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19174:	24 8d       	ldd	r18, Z+28	; 0x1c
   19176:	35 8d       	ldd	r19, Z+29	; 0x1d
   19178:	2f 5f       	subi	r18, 0xFF	; 255
   1917a:	3f 4f       	sbci	r19, 0xFF	; 255
   1917c:	35 8f       	std	Z+29, r19	; 0x1d
   1917e:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19180:	f5 01       	movw	r30, r10
   19182:	40 81       	ld	r20, Z
   19184:	51 81       	ldd	r21, Z+1	; 0x01
   19186:	62 81       	ldd	r22, Z+2	; 0x02
   19188:	73 81       	ldd	r23, Z+3	; 0x03
   1918a:	1c 01       	movw	r2, r24
   1918c:	2d 01       	movw	r4, r26
   1918e:	24 0e       	add	r2, r20
   19190:	35 1e       	adc	r3, r21
   19192:	46 1e       	adc	r4, r22
   19194:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19196:	0f ef       	ldi	r16, 0xFF	; 255
   19198:	1f ef       	ldi	r17, 0xFF	; 255
   1919a:	a5 cf       	rjmp	.-182    	; 0x190e6 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   1919c:	f3 a2       	std	Z+35, r15	; 0x23
   1919e:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   191a0:	8f ef       	ldi	r24, 0xFF	; 255
   191a2:	9f ef       	ldi	r25, 0xFF	; 255
   191a4:	ee 85       	ldd	r30, Y+14	; 0x0e
   191a6:	ff 85       	ldd	r31, Y+15	; 0x0f
   191a8:	91 a3       	std	Z+33, r25	; 0x21
   191aa:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   191ac:	8e 85       	ldd	r24, Y+14	; 0x0e
   191ae:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   191b0:	2f 96       	adiw	r28, 0x0f	; 15
   191b2:	0f b6       	in	r0, 0x3f	; 63
   191b4:	f8 94       	cli
   191b6:	de bf       	out	0x3e, r29	; 62
   191b8:	0f be       	out	0x3f, r0	; 63
   191ba:	cd bf       	out	0x3d, r28	; 61
   191bc:	df 91       	pop	r29
   191be:	cf 91       	pop	r28
   191c0:	1f 91       	pop	r17
   191c2:	0f 91       	pop	r16
   191c4:	ff 90       	pop	r15
   191c6:	ef 90       	pop	r14
   191c8:	df 90       	pop	r13
   191ca:	cf 90       	pop	r12
   191cc:	bf 90       	pop	r11
   191ce:	af 90       	pop	r10
   191d0:	8f 90       	pop	r8
   191d2:	7f 90       	pop	r7
   191d4:	6f 90       	pop	r6
   191d6:	5f 90       	pop	r5
   191d8:	4f 90       	pop	r4
   191da:	3f 90       	pop	r3
   191dc:	2f 90       	pop	r2
   191de:	08 95       	ret

000191e0 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   191e0:	a9 e2       	ldi	r26, 0x29	; 41
   191e2:	b1 e0       	ldi	r27, 0x01	; 1
   191e4:	e6 ef       	ldi	r30, 0xF6	; 246
   191e6:	f8 ec       	ldi	r31, 0xC8	; 200
   191e8:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   191ec:	4c 01       	movw	r8, r24
   191ee:	3b 01       	movw	r6, r22
   191f0:	19 01       	movw	r2, r18
   191f2:	2a 01       	movw	r4, r20
   191f4:	ca 5d       	subi	r28, 0xDA	; 218
   191f6:	de 4f       	sbci	r29, 0xFE	; 254
   191f8:	e8 82       	st	Y, r14
   191fa:	f9 82       	std	Y+1, r15	; 0x01
   191fc:	0a 83       	std	Y+2, r16	; 0x02
   191fe:	1b 83       	std	Y+3, r17	; 0x03
   19200:	c6 52       	subi	r28, 0x26	; 38
   19202:	d1 40       	sbci	r29, 0x01	; 1
   19204:	c2 5e       	subi	r28, 0xE2	; 226
   19206:	de 4f       	sbci	r29, 0xFE	; 254
   19208:	a8 82       	st	Y, r10
   1920a:	b9 82       	std	Y+1, r11	; 0x01
   1920c:	ca 82       	std	Y+2, r12	; 0x02
   1920e:	db 82       	std	Y+3, r13	; 0x03
   19210:	ce 51       	subi	r28, 0x1E	; 30
   19212:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19214:	80 e0       	ldi	r24, 0x00	; 0
   19216:	90 e0       	ldi	r25, 0x00	; 0
   19218:	0e 94 91 35 	call	0x6b22	; 0x6b22 <time>
   1921c:	5b 01       	movw	r10, r22
   1921e:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19220:	64 e7       	ldi	r22, 0x74	; 116
   19222:	70 e0       	ldi	r23, 0x00	; 0
   19224:	80 e0       	ldi	r24, 0x00	; 0
   19226:	90 e0       	ldi	r25, 0x00	; 0
   19228:	0e 94 c3 bc 	call	0x17986	; 0x17986 <lif_calloc>
   1922c:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1922e:	89 2b       	or	r24, r25
   19230:	09 f4       	brne	.+2      	; 0x19234 <lif_create_volume+0x54>
   19232:	b6 c2       	rjmp	.+1388   	; 0x197a0 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19234:	c2 5e       	subi	r28, 0xE2	; 226
   19236:	de 4f       	sbci	r29, 0xFE	; 254
   19238:	28 81       	ld	r18, Y
   1923a:	39 81       	ldd	r19, Y+1	; 0x01
   1923c:	4a 81       	ldd	r20, Y+2	; 0x02
   1923e:	5b 81       	ldd	r21, Y+3	; 0x03
   19240:	ce 51       	subi	r28, 0x1E	; 30
   19242:	d1 40       	sbci	r29, 0x01	; 1
   19244:	ed b7       	in	r30, 0x3d	; 61
   19246:	fe b7       	in	r31, 0x3e	; 62
   19248:	20 8b       	std	Z+16, r18	; 0x10
   1924a:	31 8b       	std	Z+17, r19	; 0x11
   1924c:	42 8b       	std	Z+18, r20	; 0x12
   1924e:	53 8b       	std	Z+19, r21	; 0x13
   19250:	ca 5d       	subi	r28, 0xDA	; 218
   19252:	de 4f       	sbci	r29, 0xFE	; 254
   19254:	28 81       	ld	r18, Y
   19256:	39 81       	ldd	r19, Y+1	; 0x01
   19258:	4a 81       	ldd	r20, Y+2	; 0x02
   1925a:	5b 81       	ldd	r21, Y+3	; 0x03
   1925c:	c6 52       	subi	r28, 0x26	; 38
   1925e:	d1 40       	sbci	r29, 0x01	; 1
   19260:	24 87       	std	Z+12, r18	; 0x0c
   19262:	35 87       	std	Z+13, r19	; 0x0d
   19264:	46 87       	std	Z+14, r20	; 0x0e
   19266:	57 87       	std	Z+15, r21	; 0x0f
   19268:	20 86       	std	Z+8, r2	; 0x08
   1926a:	31 86       	std	Z+9, r3	; 0x09
   1926c:	42 86       	std	Z+10, r4	; 0x0a
   1926e:	53 86       	std	Z+11, r5	; 0x0b
   19270:	77 82       	std	Z+7, r7	; 0x07
   19272:	66 82       	std	Z+6, r6	; 0x06
   19274:	95 82       	std	Z+5, r9	; 0x05
   19276:	84 82       	std	Z+4, r8	; 0x04
   19278:	89 ea       	ldi	r24, 0xA9	; 169
   1927a:	99 e3       	ldi	r25, 0x39	; 57
   1927c:	a0 e0       	ldi	r26, 0x00	; 0
   1927e:	81 83       	std	Z+1, r24	; 0x01
   19280:	92 83       	std	Z+2, r25	; 0x02
   19282:	a3 83       	std	Z+3, r26	; 0x03
   19284:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19288:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1928c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19290:	92 ff       	sbrs	r25, 2
   19292:	04 c0       	rjmp	.+8      	; 0x1929c <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19294:	6a e2       	ldi	r22, 0x2A	; 42
   19296:	76 e1       	ldi	r23, 0x16	; 22
   19298:	c7 01       	movw	r24, r14
   1929a:	c9 d8       	rcall	.-3694   	; 0x1842e <lif_dump_vol>

    lif_image_clear(LIF);
   1929c:	c7 01       	movw	r24, r14
   1929e:	b2 d8       	rcall	.-3740   	; 0x18404 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   192a0:	80 e0       	ldi	r24, 0x00	; 0
   192a2:	90 e8       	ldi	r25, 0x80	; 128
   192a4:	f7 01       	movw	r30, r14
   192a6:	95 a3       	std	Z+37, r25	; 0x25
   192a8:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   192aa:	46 e0       	ldi	r20, 0x06	; 6
   192ac:	50 e0       	ldi	r21, 0x00	; 0
   192ae:	b3 01       	movw	r22, r6
   192b0:	c7 01       	movw	r24, r14
   192b2:	86 96       	adiw	r24, 0x26	; 38
   192b4:	0e 94 06 bf 	call	0x17e0c	; 0x17e0c <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   192b8:	f7 01       	movw	r30, r14
   192ba:	25 a6       	std	Z+45, r2	; 0x2d
   192bc:	36 a6       	std	Z+46, r3	; 0x2e
   192be:	47 a6       	std	Z+47, r4	; 0x2f
   192c0:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   192c2:	ca 5d       	subi	r28, 0xDA	; 218
   192c4:	de 4f       	sbci	r29, 0xFE	; 254
   192c6:	28 81       	ld	r18, Y
   192c8:	39 81       	ldd	r19, Y+1	; 0x01
   192ca:	4a 81       	ldd	r20, Y+2	; 0x02
   192cc:	5b 81       	ldd	r21, Y+3	; 0x03
   192ce:	c6 52       	subi	r28, 0x26	; 38
   192d0:	d1 40       	sbci	r29, 0x01	; 1
   192d2:	25 ab       	std	Z+53, r18	; 0x35
   192d4:	36 ab       	std	Z+54, r19	; 0x36
   192d6:	47 ab       	std	Z+55, r20	; 0x37
   192d8:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   192da:	80 e0       	ldi	r24, 0x00	; 0
   192dc:	90 e1       	ldi	r25, 0x10	; 16
   192de:	92 ab       	std	Z+50, r25	; 0x32
   192e0:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   192e2:	fd 96       	adiw	r30, 0x3d	; 61
   192e4:	10 82       	st	Z, r1
   192e6:	11 82       	std	Z+1, r1	; 0x01
   192e8:	12 82       	std	Z+2, r1	; 0x02
   192ea:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   192ec:	34 96       	adiw	r30, 0x04	; 4
   192ee:	10 82       	st	Z, r1
   192f0:	11 82       	std	Z+1, r1	; 0x01
   192f2:	12 82       	std	Z+2, r1	; 0x02
   192f4:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   192f6:	34 96       	adiw	r30, 0x04	; 4
   192f8:	10 82       	st	Z, r1
   192fa:	11 82       	std	Z+1, r1	; 0x01
   192fc:	12 82       	std	Z+2, r1	; 0x02
   192fe:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19300:	a7 01       	movw	r20, r14
   19302:	47 5b       	subi	r20, 0xB7	; 183
   19304:	5f 4f       	sbci	r21, 0xFF	; 255
   19306:	c6 01       	movw	r24, r12
   19308:	b5 01       	movw	r22, r10
   1930a:	0e 94 2b c1 	call	0x18256	; 0x18256 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   1930e:	c4 01       	movw	r24, r8
   19310:	0e 94 0e bd 	call	0x17a1c	; 0x17a1c <lif_stralloc>
   19314:	d7 01       	movw	r26, r14
   19316:	8d 93       	st	X+, r24
   19318:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   1931a:	89 2b       	or	r24, r25
   1931c:	09 f4       	brne	.+2      	; 0x19320 <lif_create_volume+0x140>
   1931e:	35 c2       	rjmp	.+1130   	; 0x1978a <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19320:	c2 5e       	subi	r28, 0xE2	; 226
   19322:	de 4f       	sbci	r29, 0xFE	; 254
   19324:	28 81       	ld	r18, Y
   19326:	39 81       	ldd	r19, Y+1	; 0x01
   19328:	4a 81       	ldd	r20, Y+2	; 0x02
   1932a:	5b 81       	ldd	r21, Y+3	; 0x03
   1932c:	ce 51       	subi	r28, 0x1E	; 30
   1932e:	d1 40       	sbci	r29, 0x01	; 1
   19330:	f7 01       	movw	r30, r14
   19332:	20 8b       	std	Z+16, r18	; 0x10
   19334:	31 8b       	std	Z+17, r19	; 0x11
   19336:	42 8b       	std	Z+18, r20	; 0x12
   19338:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   1933a:	ca 5d       	subi	r28, 0xDA	; 218
   1933c:	de 4f       	sbci	r29, 0xFE	; 254
   1933e:	88 81       	ld	r24, Y
   19340:	99 81       	ldd	r25, Y+1	; 0x01
   19342:	aa 81       	ldd	r26, Y+2	; 0x02
   19344:	bb 81       	ldd	r27, Y+3	; 0x03
   19346:	c6 52       	subi	r28, 0x26	; 38
   19348:	d1 40       	sbci	r29, 0x01	; 1
   1934a:	82 0d       	add	r24, r2
   1934c:	93 1d       	adc	r25, r3
   1934e:	a4 1d       	adc	r26, r4
   19350:	b5 1d       	adc	r27, r5
   19352:	84 87       	std	Z+12, r24	; 0x0c
   19354:	95 87       	std	Z+13, r25	; 0x0d
   19356:	a6 87       	std	Z+14, r26	; 0x0e
   19358:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1935a:	82 0f       	add	r24, r18
   1935c:	93 1f       	adc	r25, r19
   1935e:	a4 1f       	adc	r26, r20
   19360:	b5 1f       	adc	r27, r21
   19362:	84 83       	std	Z+4, r24	; 0x04
   19364:	95 83       	std	Z+5, r25	; 0x05
   19366:	a6 83       	std	Z+6, r26	; 0x06
   19368:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1936a:	ba 2f       	mov	r27, r26
   1936c:	a9 2f       	mov	r26, r25
   1936e:	98 2f       	mov	r25, r24
   19370:	88 27       	eor	r24, r24
   19372:	80 87       	std	Z+8, r24	; 0x08
   19374:	91 87       	std	Z+9, r25	; 0x09
   19376:	a2 87       	std	Z+10, r26	; 0x0a
   19378:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   1937a:	20 8f       	std	Z+24, r18	; 0x18
   1937c:	31 8f       	std	Z+25, r19	; 0x19
   1937e:	42 8f       	std	Z+26, r20	; 0x1a
   19380:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19382:	14 8a       	std	Z+20, r1	; 0x14
   19384:	15 8a       	std	Z+21, r1	; 0x15
   19386:	16 8a       	std	Z+22, r1	; 0x16
   19388:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   1938a:	15 8e       	std	Z+29, r1	; 0x1d
   1938c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   1938e:	17 8e       	std	Z+31, r1	; 0x1f
   19390:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19392:	11 a2       	std	Z+33, r1	; 0x21
   19394:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19396:	13 a2       	std	Z+35, r1	; 0x23
   19398:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   1939a:	61 2c       	mov	r6, r1
   1939c:	77 24       	eor	r7, r7
   1939e:	73 94       	inc	r7
   193a0:	9e 01       	movw	r18, r28
   193a2:	2c 5e       	subi	r18, 0xEC	; 236
   193a4:	3f 4f       	sbci	r19, 0xFF	; 255
   193a6:	49 01       	movw	r8, r18
   193a8:	d9 01       	movw	r26, r18
   193aa:	f3 01       	movw	r30, r6
   193ac:	1d 92       	st	X+, r1
   193ae:	31 97       	sbiw	r30, 0x01	; 1
   193b0:	e9 f7       	brne	.-6      	; 0x193ac <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   193b2:	b9 01       	movw	r22, r18
   193b4:	c7 01       	movw	r24, r14
   193b6:	0e 94 43 bf 	call	0x17e86	; 0x17e86 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   193ba:	66 e1       	ldi	r22, 0x16	; 22
   193bc:	79 e0       	ldi	r23, 0x09	; 9
   193be:	d7 01       	movw	r26, r14
   193c0:	8d 91       	ld	r24, X+
   193c2:	9c 91       	ld	r25, X
   193c4:	0e 94 2d bd 	call	0x17a5a	; 0x17a5a <lif_open>
   193c8:	f7 01       	movw	r30, r14
   193ca:	93 83       	std	Z+3, r25	; 0x03
   193cc:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   193ce:	89 2b       	or	r24, r25
   193d0:	09 f4       	brne	.+2      	; 0x193d4 <lif_create_volume+0x1f4>
   193d2:	db c1       	rjmp	.+950    	; 0x1978a <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   193d4:	00 e0       	ldi	r16, 0x00	; 0
   193d6:	11 e0       	ldi	r17, 0x01	; 1
   193d8:	20 e0       	ldi	r18, 0x00	; 0
   193da:	30 e0       	ldi	r19, 0x00	; 0
   193dc:	a9 01       	movw	r20, r18
   193de:	b4 01       	movw	r22, r8
   193e0:	c7 01       	movw	r24, r14
   193e2:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
   193e6:	9c 01       	movw	r18, r24
   193e8:	99 0f       	add	r25, r25
   193ea:	44 0b       	sbc	r20, r20
   193ec:	55 0b       	sbc	r21, r21
   193ee:	ca 5e       	subi	r28, 0xEA	; 234
   193f0:	de 4f       	sbci	r29, 0xFE	; 254
   193f2:	28 83       	st	Y, r18
   193f4:	39 83       	std	Y+1, r19	; 0x01
   193f6:	4a 83       	std	Y+2, r20	; 0x02
   193f8:	5b 83       	std	Y+3, r21	; 0x03
   193fa:	c6 51       	subi	r28, 0x16	; 22
   193fc:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   193fe:	2f 3f       	cpi	r18, 0xFF	; 255
   19400:	31 05       	cpc	r19, r1
   19402:	41 05       	cpc	r20, r1
   19404:	51 05       	cpc	r21, r1
   19406:	09 f0       	breq	.+2      	; 0x1940a <lif_create_volume+0x22a>
   19408:	0c f4       	brge	.+2      	; 0x1940c <lif_create_volume+0x22c>
   1940a:	bf c1       	rjmp	.+894    	; 0x1978a <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   1940c:	d4 01       	movw	r26, r8
   1940e:	f3 01       	movw	r30, r6
   19410:	1d 92       	st	X+, r1
   19412:	31 97       	sbiw	r30, 0x01	; 1
   19414:	e9 f7       	brne	.-6      	; 0x19410 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19416:	21 e0       	ldi	r18, 0x01	; 1
   19418:	30 e0       	ldi	r19, 0x00	; 0
   1941a:	40 e0       	ldi	r20, 0x00	; 0
   1941c:	50 e0       	ldi	r21, 0x00	; 0
   1941e:	c6 5e       	subi	r28, 0xE6	; 230
   19420:	de 4f       	sbci	r29, 0xFE	; 254
   19422:	28 83       	st	Y, r18
   19424:	39 83       	std	Y+1, r19	; 0x01
   19426:	4a 83       	std	Y+2, r20	; 0x02
   19428:	5b 83       	std	Y+3, r21	; 0x03
   1942a:	ca 51       	subi	r28, 0x1A	; 26
   1942c:	d1 40       	sbci	r29, 0x01	; 1
   1942e:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19430:	8c e9       	ldi	r24, 0x9C	; 156
   19432:	99 e3       	ldi	r25, 0x39	; 57
   19434:	3c 01       	movw	r6, r24
   19436:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19438:	c6 5e       	subi	r28, 0xE6	; 230
   1943a:	de 4f       	sbci	r29, 0xFE	; 254
   1943c:	88 81       	ld	r24, Y
   1943e:	99 81       	ldd	r25, Y+1	; 0x01
   19440:	aa 81       	ldd	r26, Y+2	; 0x02
   19442:	bb 81       	ldd	r27, Y+3	; 0x03
   19444:	ca 51       	subi	r28, 0x1A	; 26
   19446:	d1 40       	sbci	r29, 0x01	; 1
   19448:	82 15       	cp	r24, r2
   1944a:	93 05       	cpc	r25, r3
   1944c:	a4 05       	cpc	r26, r4
   1944e:	b5 05       	cpc	r27, r5
   19450:	0c f0       	brlt	.+2      	; 0x19454 <lif_create_volume+0x274>
   19452:	55 c0       	rjmp	.+170    	; 0x194fe <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19454:	00 e0       	ldi	r16, 0x00	; 0
   19456:	11 e0       	ldi	r17, 0x01	; 1
   19458:	ca 5e       	subi	r28, 0xEA	; 234
   1945a:	de 4f       	sbci	r29, 0xFE	; 254
   1945c:	28 81       	ld	r18, Y
   1945e:	39 81       	ldd	r19, Y+1	; 0x01
   19460:	4a 81       	ldd	r20, Y+2	; 0x02
   19462:	5b 81       	ldd	r21, Y+3	; 0x03
   19464:	c6 51       	subi	r28, 0x16	; 22
   19466:	d1 40       	sbci	r29, 0x01	; 1
   19468:	b6 01       	movw	r22, r12
   1946a:	c7 01       	movw	r24, r14
   1946c:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
   19470:	09 2e       	mov	r0, r25
   19472:	00 0c       	add	r0, r0
   19474:	aa 0b       	sbc	r26, r26
   19476:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19478:	8f 3f       	cpi	r24, 0xFF	; 255
   1947a:	91 05       	cpc	r25, r1
   1947c:	a1 05       	cpc	r26, r1
   1947e:	b1 05       	cpc	r27, r1
   19480:	09 f0       	breq	.+2      	; 0x19484 <lif_create_volume+0x2a4>
   19482:	0c f4       	brge	.+2      	; 0x19486 <lif_create_volume+0x2a6>
   19484:	82 c1       	rjmp	.+772    	; 0x1978a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19486:	ca 5e       	subi	r28, 0xEA	; 234
   19488:	de 4f       	sbci	r29, 0xFE	; 254
   1948a:	28 81       	ld	r18, Y
   1948c:	39 81       	ldd	r19, Y+1	; 0x01
   1948e:	4a 81       	ldd	r20, Y+2	; 0x02
   19490:	5b 81       	ldd	r21, Y+3	; 0x03
   19492:	c6 51       	subi	r28, 0x16	; 22
   19494:	d1 40       	sbci	r29, 0x01	; 1
   19496:	28 0f       	add	r18, r24
   19498:	39 1f       	adc	r19, r25
   1949a:	4a 1f       	adc	r20, r26
   1949c:	5b 1f       	adc	r21, r27
   1949e:	ca 5e       	subi	r28, 0xEA	; 234
   194a0:	de 4f       	sbci	r29, 0xFE	; 254
   194a2:	28 83       	st	Y, r18
   194a4:	39 83       	std	Y+1, r19	; 0x01
   194a6:	4a 83       	std	Y+2, r20	; 0x02
   194a8:	5b 83       	std	Y+3, r21	; 0x03
   194aa:	c6 51       	subi	r28, 0x16	; 22
   194ac:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   194ae:	c6 5e       	subi	r28, 0xE6	; 230
   194b0:	de 4f       	sbci	r29, 0xFE	; 254
   194b2:	88 81       	ld	r24, Y
   194b4:	99 81       	ldd	r25, Y+1	; 0x01
   194b6:	aa 81       	ldd	r26, Y+2	; 0x02
   194b8:	bb 81       	ldd	r27, Y+3	; 0x03
   194ba:	ca 51       	subi	r28, 0x1A	; 26
   194bc:	d1 40       	sbci	r29, 0x01	; 1
   194be:	ed b7       	in	r30, 0x3d	; 61
   194c0:	fe b7       	in	r31, 0x3e	; 62
   194c2:	84 83       	std	Z+4, r24	; 0x04
   194c4:	95 83       	std	Z+5, r25	; 0x05
   194c6:	a6 83       	std	Z+6, r26	; 0x06
   194c8:	b7 83       	std	Z+7, r27	; 0x07
   194ca:	61 82       	std	Z+1, r6	; 0x01
   194cc:	72 82       	std	Z+2, r7	; 0x02
   194ce:	83 82       	std	Z+3, r8	; 0x03
   194d0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   194d4:	c6 5e       	subi	r28, 0xE6	; 230
   194d6:	de 4f       	sbci	r29, 0xFE	; 254
   194d8:	28 81       	ld	r18, Y
   194da:	39 81       	ldd	r19, Y+1	; 0x01
   194dc:	4a 81       	ldd	r20, Y+2	; 0x02
   194de:	5b 81       	ldd	r21, Y+3	; 0x03
   194e0:	ca 51       	subi	r28, 0x1A	; 26
   194e2:	d1 40       	sbci	r29, 0x01	; 1
   194e4:	2f 5f       	subi	r18, 0xFF	; 255
   194e6:	3f 4f       	sbci	r19, 0xFF	; 255
   194e8:	4f 4f       	sbci	r20, 0xFF	; 255
   194ea:	5f 4f       	sbci	r21, 0xFF	; 255
   194ec:	c6 5e       	subi	r28, 0xE6	; 230
   194ee:	de 4f       	sbci	r29, 0xFE	; 254
   194f0:	28 83       	st	Y, r18
   194f2:	39 83       	std	Y+1, r19	; 0x01
   194f4:	4a 83       	std	Y+2, r20	; 0x02
   194f6:	5b 83       	std	Y+3, r21	; 0x03
   194f8:	ca 51       	subi	r28, 0x1A	; 26
   194fa:	d1 40       	sbci	r29, 0x01	; 1
   194fc:	9d cf       	rjmp	.-198    	; 0x19438 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   194fe:	c7 01       	movw	r24, r14
   19500:	0e 94 08 c2 	call	0x18410	; 0x18410 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19504:	8f ef       	ldi	r24, 0xFF	; 255
   19506:	9f ef       	ldi	r25, 0xFF	; 255
   19508:	f7 01       	movw	r30, r14
   1950a:	e6 5a       	subi	r30, 0xA6	; 166
   1950c:	ff 4f       	sbci	r31, 0xFF	; 255
   1950e:	91 83       	std	Z+1, r25	; 0x01
   19510:	80 83       	st	Z, r24
   19512:	46 01       	movw	r8, r12
   19514:	6e 01       	movw	r12, r28
   19516:	9c ee       	ldi	r25, 0xEC	; 236
   19518:	c9 1a       	sub	r12, r25
   1951a:	9e ef       	ldi	r25, 0xFE	; 254
   1951c:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1951e:	b4 01       	movw	r22, r8
   19520:	c7 01       	movw	r24, r14
   19522:	0e 94 4f c0 	call	0x1809e	; 0x1809e <lif_dir2str>
   19526:	a0 e2       	ldi	r26, 0x20	; 32
   19528:	8a 0e       	add	r8, r26
   1952a:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1952c:	c8 14       	cp	r12, r8
   1952e:	d9 04       	cpc	r13, r9
   19530:	b1 f7       	brne	.-20     	; 0x1951e <lif_create_volume+0x33e>
   19532:	a1 2c       	mov	r10, r1
   19534:	b1 2c       	mov	r11, r1
   19536:	65 01       	movw	r12, r10
   19538:	fe 01       	movw	r30, r28
   1953a:	74 96       	adiw	r30, 0x14	; 20
   1953c:	cc 5e       	subi	r28, 0xEC	; 236
   1953e:	de 4f       	sbci	r29, 0xFE	; 254
   19540:	f9 83       	std	Y+1, r31	; 0x01
   19542:	e8 83       	st	Y, r30
   19544:	c4 51       	subi	r28, 0x14	; 20
   19546:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19548:	84 e6       	ldi	r24, 0x64	; 100
   1954a:	28 2e       	mov	r2, r24
   1954c:	31 2c       	mov	r3, r1
   1954e:	41 2c       	mov	r4, r1
   19550:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19552:	8f e8       	ldi	r24, 0x8F	; 143
   19554:	99 e3       	ldi	r25, 0x39	; 57
   19556:	3c 01       	movw	r6, r24
   19558:	81 2c       	mov	r8, r1
   1955a:	c6 5e       	subi	r28, 0xE6	; 230
   1955c:	de 4f       	sbci	r29, 0xFE	; 254
   1955e:	28 81       	ld	r18, Y
   19560:	39 81       	ldd	r19, Y+1	; 0x01
   19562:	4a 81       	ldd	r20, Y+2	; 0x02
   19564:	5b 81       	ldd	r21, Y+3	; 0x03
   19566:	ca 51       	subi	r28, 0x1A	; 26
   19568:	d1 40       	sbci	r29, 0x01	; 1
   1956a:	2a 0d       	add	r18, r10
   1956c:	3b 1d       	adc	r19, r11
   1956e:	4c 1d       	adc	r20, r12
   19570:	5d 1d       	adc	r21, r13
   19572:	ce 5d       	subi	r28, 0xDE	; 222
   19574:	de 4f       	sbci	r29, 0xFE	; 254
   19576:	28 83       	st	Y, r18
   19578:	39 83       	std	Y+1, r19	; 0x01
   1957a:	4a 83       	std	Y+2, r20	; 0x02
   1957c:	5b 83       	std	Y+3, r21	; 0x03
   1957e:	c2 52       	subi	r28, 0x22	; 34
   19580:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19582:	ca 5d       	subi	r28, 0xDA	; 218
   19584:	de 4f       	sbci	r29, 0xFE	; 254
   19586:	88 81       	ld	r24, Y
   19588:	99 81       	ldd	r25, Y+1	; 0x01
   1958a:	aa 81       	ldd	r26, Y+2	; 0x02
   1958c:	bb 81       	ldd	r27, Y+3	; 0x03
   1958e:	c6 52       	subi	r28, 0x26	; 38
   19590:	d1 40       	sbci	r29, 0x01	; 1
   19592:	a8 16       	cp	r10, r24
   19594:	b9 06       	cpc	r11, r25
   19596:	ca 06       	cpc	r12, r26
   19598:	db 06       	cpc	r13, r27
   1959a:	0c f0       	brlt	.+2      	; 0x1959e <lif_create_volume+0x3be>
   1959c:	58 c0       	rjmp	.+176    	; 0x1964e <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1959e:	00 e0       	ldi	r16, 0x00	; 0
   195a0:	11 e0       	ldi	r17, 0x01	; 1
   195a2:	ca 5e       	subi	r28, 0xEA	; 234
   195a4:	de 4f       	sbci	r29, 0xFE	; 254
   195a6:	28 81       	ld	r18, Y
   195a8:	39 81       	ldd	r19, Y+1	; 0x01
   195aa:	4a 81       	ldd	r20, Y+2	; 0x02
   195ac:	5b 81       	ldd	r21, Y+3	; 0x03
   195ae:	c6 51       	subi	r28, 0x16	; 22
   195b0:	d1 40       	sbci	r29, 0x01	; 1
   195b2:	be 01       	movw	r22, r28
   195b4:	6c 5e       	subi	r22, 0xEC	; 236
   195b6:	7f 4f       	sbci	r23, 0xFF	; 255
   195b8:	c7 01       	movw	r24, r14
   195ba:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
   195be:	09 2e       	mov	r0, r25
   195c0:	00 0c       	add	r0, r0
   195c2:	aa 0b       	sbc	r26, r26
   195c4:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   195c6:	8f 3f       	cpi	r24, 0xFF	; 255
   195c8:	91 05       	cpc	r25, r1
   195ca:	a1 05       	cpc	r26, r1
   195cc:	b1 05       	cpc	r27, r1
   195ce:	09 f0       	breq	.+2      	; 0x195d2 <lif_create_volume+0x3f2>
   195d0:	0c f4       	brge	.+2      	; 0x195d4 <lif_create_volume+0x3f4>
   195d2:	db c0       	rjmp	.+438    	; 0x1978a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   195d4:	ca 5e       	subi	r28, 0xEA	; 234
   195d6:	de 4f       	sbci	r29, 0xFE	; 254
   195d8:	28 81       	ld	r18, Y
   195da:	39 81       	ldd	r19, Y+1	; 0x01
   195dc:	4a 81       	ldd	r20, Y+2	; 0x02
   195de:	5b 81       	ldd	r21, Y+3	; 0x03
   195e0:	c6 51       	subi	r28, 0x16	; 22
   195e2:	d1 40       	sbci	r29, 0x01	; 1
   195e4:	28 0f       	add	r18, r24
   195e6:	39 1f       	adc	r19, r25
   195e8:	4a 1f       	adc	r20, r26
   195ea:	5b 1f       	adc	r21, r27
   195ec:	ca 5e       	subi	r28, 0xEA	; 234
   195ee:	de 4f       	sbci	r29, 0xFE	; 254
   195f0:	28 83       	st	Y, r18
   195f2:	39 83       	std	Y+1, r19	; 0x01
   195f4:	4a 83       	std	Y+2, r20	; 0x02
   195f6:	5b 83       	std	Y+3, r21	; 0x03
   195f8:	c6 51       	subi	r28, 0x16	; 22
   195fa:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   195fc:	ce 5d       	subi	r28, 0xDE	; 222
   195fe:	de 4f       	sbci	r29, 0xFE	; 254
   19600:	68 81       	ld	r22, Y
   19602:	79 81       	ldd	r23, Y+1	; 0x01
   19604:	8a 81       	ldd	r24, Y+2	; 0x02
   19606:	9b 81       	ldd	r25, Y+3	; 0x03
   19608:	c2 52       	subi	r28, 0x22	; 34
   1960a:	d1 40       	sbci	r29, 0x01	; 1
   1960c:	a2 01       	movw	r20, r4
   1960e:	91 01       	movw	r18, r2
   19610:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
   19614:	67 2b       	or	r22, r23
   19616:	68 2b       	or	r22, r24
   19618:	69 2b       	or	r22, r25
   1961a:	99 f4       	brne	.+38     	; 0x19642 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   1961c:	ce 5d       	subi	r28, 0xDE	; 222
   1961e:	de 4f       	sbci	r29, 0xFE	; 254
   19620:	88 81       	ld	r24, Y
   19622:	99 81       	ldd	r25, Y+1	; 0x01
   19624:	aa 81       	ldd	r26, Y+2	; 0x02
   19626:	bb 81       	ldd	r27, Y+3	; 0x03
   19628:	c2 52       	subi	r28, 0x22	; 34
   1962a:	d1 40       	sbci	r29, 0x01	; 1
   1962c:	ed b7       	in	r30, 0x3d	; 61
   1962e:	fe b7       	in	r31, 0x3e	; 62
   19630:	84 83       	std	Z+4, r24	; 0x04
   19632:	95 83       	std	Z+5, r25	; 0x05
   19634:	a6 83       	std	Z+6, r26	; 0x06
   19636:	b7 83       	std	Z+7, r27	; 0x07
   19638:	61 82       	std	Z+1, r6	; 0x01
   1963a:	72 82       	std	Z+2, r7	; 0x02
   1963c:	83 82       	std	Z+3, r8	; 0x03
   1963e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19642:	ff ef       	ldi	r31, 0xFF	; 255
   19644:	af 1a       	sub	r10, r31
   19646:	bf 0a       	sbc	r11, r31
   19648:	cf 0a       	sbc	r12, r31
   1964a:	df 0a       	sbc	r13, r31
   1964c:	86 cf       	rjmp	.-244    	; 0x1955a <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1964e:	80 e0       	ldi	r24, 0x00	; 0
   19650:	91 e0       	ldi	r25, 0x01	; 1
   19652:	cc 5e       	subi	r28, 0xEC	; 236
   19654:	de 4f       	sbci	r29, 0xFE	; 254
   19656:	a8 81       	ld	r26, Y
   19658:	b9 81       	ldd	r27, Y+1	; 0x01
   1965a:	c4 51       	subi	r28, 0x14	; 20
   1965c:	d1 40       	sbci	r29, 0x01	; 1
   1965e:	fc 01       	movw	r30, r24
   19660:	1d 92       	st	X+, r1
   19662:	31 97       	sbiw	r30, 0x01	; 1
   19664:	e9 f7       	brne	.-6      	; 0x19660 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19666:	81 2c       	mov	r8, r1
   19668:	91 2c       	mov	r9, r1
   1966a:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1966c:	82 e8       	ldi	r24, 0x82	; 130
   1966e:	99 e3       	ldi	r25, 0x39	; 57
   19670:	9c 01       	movw	r18, r24
   19672:	40 e0       	ldi	r20, 0x00	; 0
   19674:	c6 5e       	subi	r28, 0xE6	; 230
   19676:	de 4f       	sbci	r29, 0xFE	; 254
   19678:	28 83       	st	Y, r18
   1967a:	39 83       	std	Y+1, r19	; 0x01
   1967c:	4a 83       	std	Y+2, r20	; 0x02
   1967e:	ca 51       	subi	r28, 0x1A	; 26
   19680:	d1 40       	sbci	r29, 0x01	; 1
   19682:	ce 5d       	subi	r28, 0xDE	; 222
   19684:	de 4f       	sbci	r29, 0xFE	; 254
   19686:	48 80       	ld	r4, Y
   19688:	59 80       	ldd	r5, Y+1	; 0x01
   1968a:	6a 80       	ldd	r6, Y+2	; 0x02
   1968c:	7b 80       	ldd	r7, Y+3	; 0x03
   1968e:	c2 52       	subi	r28, 0x22	; 34
   19690:	d1 40       	sbci	r29, 0x01	; 1
   19692:	48 0c       	add	r4, r8
   19694:	59 1c       	adc	r5, r9
   19696:	6a 1c       	adc	r6, r10
   19698:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1969a:	c2 5e       	subi	r28, 0xE2	; 226
   1969c:	de 4f       	sbci	r29, 0xFE	; 254
   1969e:	28 81       	ld	r18, Y
   196a0:	39 81       	ldd	r19, Y+1	; 0x01
   196a2:	4a 81       	ldd	r20, Y+2	; 0x02
   196a4:	5b 81       	ldd	r21, Y+3	; 0x03
   196a6:	ce 51       	subi	r28, 0x1E	; 30
   196a8:	d1 40       	sbci	r29, 0x01	; 1
   196aa:	82 16       	cp	r8, r18
   196ac:	93 06       	cpc	r9, r19
   196ae:	a4 06       	cpc	r10, r20
   196b0:	b5 06       	cpc	r11, r21
   196b2:	0c f0       	brlt	.+2      	; 0x196b6 <lif_create_volume+0x4d6>
   196b4:	53 c0       	rjmp	.+166    	; 0x1975c <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196b6:	00 e0       	ldi	r16, 0x00	; 0
   196b8:	11 e0       	ldi	r17, 0x01	; 1
   196ba:	ca 5e       	subi	r28, 0xEA	; 234
   196bc:	de 4f       	sbci	r29, 0xFE	; 254
   196be:	28 81       	ld	r18, Y
   196c0:	39 81       	ldd	r19, Y+1	; 0x01
   196c2:	4a 81       	ldd	r20, Y+2	; 0x02
   196c4:	5b 81       	ldd	r21, Y+3	; 0x03
   196c6:	c6 51       	subi	r28, 0x16	; 22
   196c8:	d1 40       	sbci	r29, 0x01	; 1
   196ca:	be 01       	movw	r22, r28
   196cc:	6c 5e       	subi	r22, 0xEC	; 236
   196ce:	7f 4f       	sbci	r23, 0xFF	; 255
   196d0:	c7 01       	movw	r24, r14
   196d2:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
   196d6:	09 2e       	mov	r0, r25
   196d8:	00 0c       	add	r0, r0
   196da:	aa 0b       	sbc	r26, r26
   196dc:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   196de:	8f 3f       	cpi	r24, 0xFF	; 255
   196e0:	91 05       	cpc	r25, r1
   196e2:	a1 05       	cpc	r26, r1
   196e4:	b1 05       	cpc	r27, r1
   196e6:	09 f0       	breq	.+2      	; 0x196ea <lif_create_volume+0x50a>
   196e8:	0c f4       	brge	.+2      	; 0x196ec <lif_create_volume+0x50c>
   196ea:	4f c0       	rjmp	.+158    	; 0x1978a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   196ec:	ca 5e       	subi	r28, 0xEA	; 234
   196ee:	de 4f       	sbci	r29, 0xFE	; 254
   196f0:	28 81       	ld	r18, Y
   196f2:	39 81       	ldd	r19, Y+1	; 0x01
   196f4:	4a 81       	ldd	r20, Y+2	; 0x02
   196f6:	5b 81       	ldd	r21, Y+3	; 0x03
   196f8:	c6 51       	subi	r28, 0x16	; 22
   196fa:	d1 40       	sbci	r29, 0x01	; 1
   196fc:	28 0f       	add	r18, r24
   196fe:	39 1f       	adc	r19, r25
   19700:	4a 1f       	adc	r20, r26
   19702:	5b 1f       	adc	r21, r27
   19704:	ca 5e       	subi	r28, 0xEA	; 234
   19706:	de 4f       	sbci	r29, 0xFE	; 254
   19708:	28 83       	st	Y, r18
   1970a:	39 83       	std	Y+1, r19	; 0x01
   1970c:	4a 83       	std	Y+2, r20	; 0x02
   1970e:	5b 83       	std	Y+3, r21	; 0x03
   19710:	c6 51       	subi	r28, 0x16	; 22
   19712:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19714:	c3 01       	movw	r24, r6
   19716:	b2 01       	movw	r22, r4
   19718:	24 e6       	ldi	r18, 0x64	; 100
   1971a:	30 e0       	ldi	r19, 0x00	; 0
   1971c:	40 e0       	ldi	r20, 0x00	; 0
   1971e:	50 e0       	ldi	r21, 0x00	; 0
   19720:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
   19724:	67 2b       	or	r22, r23
   19726:	68 2b       	or	r22, r24
   19728:	69 2b       	or	r22, r25
   1972a:	91 f4       	brne	.+36     	; 0x19750 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   1972c:	ed b7       	in	r30, 0x3d	; 61
   1972e:	fe b7       	in	r31, 0x3e	; 62
   19730:	44 82       	std	Z+4, r4	; 0x04
   19732:	55 82       	std	Z+5, r5	; 0x05
   19734:	66 82       	std	Z+6, r6	; 0x06
   19736:	77 82       	std	Z+7, r7	; 0x07
   19738:	c6 5e       	subi	r28, 0xE6	; 230
   1973a:	de 4f       	sbci	r29, 0xFE	; 254
   1973c:	28 81       	ld	r18, Y
   1973e:	39 81       	ldd	r19, Y+1	; 0x01
   19740:	4a 81       	ldd	r20, Y+2	; 0x02
   19742:	ca 51       	subi	r28, 0x1A	; 26
   19744:	d1 40       	sbci	r29, 0x01	; 1
   19746:	21 83       	std	Z+1, r18	; 0x01
   19748:	32 83       	std	Z+2, r19	; 0x02
   1974a:	43 83       	std	Z+3, r20	; 0x03
   1974c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19750:	ff ef       	ldi	r31, 0xFF	; 255
   19752:	8f 1a       	sub	r8, r31
   19754:	9f 0a       	sbc	r9, r31
   19756:	af 0a       	sbc	r10, r31
   19758:	bf 0a       	sbc	r11, r31
   1975a:	93 cf       	rjmp	.-218    	; 0x19682 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1975c:	ed b7       	in	r30, 0x3d	; 61
   1975e:	fe b7       	in	r31, 0x3e	; 62
   19760:	44 82       	std	Z+4, r4	; 0x04
   19762:	55 82       	std	Z+5, r5	; 0x05
   19764:	66 82       	std	Z+6, r6	; 0x06
   19766:	77 82       	std	Z+7, r7	; 0x07
   19768:	85 e7       	ldi	r24, 0x75	; 117
   1976a:	99 e3       	ldi	r25, 0x39	; 57
   1976c:	a0 e0       	ldi	r26, 0x00	; 0
   1976e:	81 83       	std	Z+1, r24	; 0x01
   19770:	92 83       	std	Z+2, r25	; 0x02
   19772:	a3 83       	std	Z+3, r26	; 0x03
   19774:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19778:	8f ef       	ldi	r24, 0xFF	; 255
   1977a:	9f ef       	ldi	r25, 0xFF	; 255
   1977c:	f7 01       	movw	r30, r14
   1977e:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19780:	80 a3       	std	Z+32, r24	; 0x20
   19782:	c7 01       	movw	r24, r14
   19784:	1a d8       	rcall	.-4044   	; 0x187ba <lif_check_volume>
   19786:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19788:	19 f4       	brne	.+6      	; 0x19790 <lif_create_volume+0x5b0>
   1978a:	c7 01       	movw	r24, r14
   1978c:	b6 da       	rcall	.-2708   	; 0x18cfa <lif_close_volume>
   1978e:	08 c0       	rjmp	.+16     	; 0x197a0 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19790:	c7 01       	movw	r24, r14
   19792:	1c dc       	rcall	.-1992   	; 0x18fcc <lif_updatefree>
   19794:	6c 01       	movw	r12, r24
   19796:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19798:	31 f4       	brne	.+12     	; 0x197a6 <lif_create_volume+0x5c6>
   1979a:	c7 01       	movw	r24, r14
   1979c:	ae da       	rcall	.-2724   	; 0x18cfa <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1979e:	04 c0       	rjmp	.+8      	; 0x197a8 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   197a0:	c1 2c       	mov	r12, r1
   197a2:	d1 2c       	mov	r13, r1
   197a4:	01 c0       	rjmp	.+2      	; 0x197a8 <lif_create_volume+0x5c8>
   197a6:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   197a8:	c6 01       	movw	r24, r12
   197aa:	c7 5d       	subi	r28, 0xD7	; 215
   197ac:	de 4f       	sbci	r29, 0xFE	; 254
   197ae:	e2 e1       	ldi	r30, 0x12	; 18
   197b0:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

000197b4 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   197b4:	ad e1       	ldi	r26, 0x1D	; 29
   197b6:	b0 e0       	ldi	r27, 0x00	; 0
   197b8:	e0 ee       	ldi	r30, 0xE0	; 224
   197ba:	fb ec       	ldi	r31, 0xCB	; 203
   197bc:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   197c0:	9d 8f       	std	Y+29, r25	; 0x1d
   197c2:	8c 8f       	std	Y+28, r24	; 0x1c
   197c4:	4a 01       	movw	r8, r20
   197c6:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   197c8:	fc 01       	movw	r30, r24
   197ca:	c4 84       	ldd	r12, Z+12	; 0x0c
   197cc:	d5 84       	ldd	r13, Z+13	; 0x0d
   197ce:	e6 84       	ldd	r14, Z+14	; 0x0e
   197d0:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   197d2:	fc db       	rcall	.-2056   	; 0x18fcc <lif_updatefree>
   197d4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   197d6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   197d8:	40 8d       	ldd	r20, Z+24	; 0x18
   197da:	51 8d       	ldd	r21, Z+25	; 0x19
   197dc:	62 8d       	ldd	r22, Z+26	; 0x1a
   197de:	73 8d       	ldd	r23, Z+27	; 0x1b
   197e0:	89 2b       	or	r24, r25
   197e2:	99 f4       	brne	.+38     	; 0x1980a <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   197e4:	ed b7       	in	r30, 0x3d	; 61
   197e6:	fe b7       	in	r31, 0x3e	; 62
   197e8:	80 86       	std	Z+8, r8	; 0x08
   197ea:	91 86       	std	Z+9, r9	; 0x09
   197ec:	a2 86       	std	Z+10, r10	; 0x0a
   197ee:	b3 86       	std	Z+11, r11	; 0x0b
   197f0:	44 83       	std	Z+4, r20	; 0x04
   197f2:	55 83       	std	Z+5, r21	; 0x05
   197f4:	66 83       	std	Z+6, r22	; 0x06
   197f6:	77 83       	std	Z+7, r23	; 0x07
   197f8:	86 e9       	ldi	r24, 0x96	; 150
   197fa:	98 e3       	ldi	r25, 0x38	; 56
   197fc:	a0 e0       	ldi	r26, 0x00	; 0
   197fe:	81 83       	std	Z+1, r24	; 0x01
   19800:	92 83       	std	Z+2, r25	; 0x02
   19802:	a3 83       	std	Z+3, r26	; 0x03
   19804:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   19808:	2f c1       	rjmp	.+606    	; 0x19a68 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1980a:	48 15       	cp	r20, r8
   1980c:	59 05       	cpc	r21, r9
   1980e:	6a 05       	cpc	r22, r10
   19810:	7b 05       	cpc	r23, r11
   19812:	c4 f0       	brlt	.+48     	; 0x19844 <lif_newdir+0x90>
   19814:	44 24       	eor	r4, r4
   19816:	43 94       	inc	r4
   19818:	51 2c       	mov	r5, r1
   1981a:	61 2c       	mov	r6, r1
   1981c:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1981e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19820:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19822:	86 5a       	subi	r24, 0xA6	; 166
   19824:	9f 4f       	sbci	r25, 0xFF	; 255
   19826:	9d 8b       	std	Y+21, r25	; 0x15
   19828:	8c 8b       	std	Y+20, r24	; 0x14
   1982a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1982c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1982e:	e4 5a       	subi	r30, 0xA4	; 164
   19830:	ff 4f       	sbci	r31, 0xFF	; 255
   19832:	fb 8b       	std	Y+19, r31	; 0x13
   19834:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19836:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19838:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1983a:	80 5a       	subi	r24, 0xA0	; 160
   1983c:	9f 4f       	sbci	r25, 0xFF	; 255
   1983e:	9f 8b       	std	Y+23, r25	; 0x17
   19840:	8e 8b       	std	Y+22, r24	; 0x16
   19842:	21 c0       	rjmp	.+66     	; 0x19886 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19844:	ed b7       	in	r30, 0x3d	; 61
   19846:	fe b7       	in	r31, 0x3e	; 62
   19848:	44 83       	std	Z+4, r20	; 0x04
   1984a:	55 83       	std	Z+5, r21	; 0x05
   1984c:	66 83       	std	Z+6, r22	; 0x06
   1984e:	77 83       	std	Z+7, r23	; 0x07
   19850:	8d e6       	ldi	r24, 0x6D	; 109
   19852:	98 e3       	ldi	r25, 0x38	; 56
   19854:	a0 e0       	ldi	r26, 0x00	; 0
   19856:	81 83       	std	Z+1, r24	; 0x01
   19858:	92 83       	std	Z+2, r25	; 0x02
   1985a:	a3 83       	std	Z+3, r26	; 0x03
   1985c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   19860:	03 c1       	rjmp	.+518    	; 0x19a68 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19862:	ec 89       	ldd	r30, Y+20	; 0x14
   19864:	fd 89       	ldd	r31, Y+21	; 0x15
   19866:	80 81       	ld	r24, Z
   19868:	91 81       	ldd	r25, Z+1	; 0x01
   1986a:	8f 3f       	cpi	r24, 0xFF	; 255
   1986c:	ff ef       	ldi	r31, 0xFF	; 255
   1986e:	9f 07       	cpc	r25, r31
   19870:	a1 f0       	breq	.+40     	; 0x1989a <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19872:	89 2b       	or	r24, r25
   19874:	09 f0       	breq	.+2      	; 0x19878 <lif_newdir+0xc4>
   19876:	ce c0       	rjmp	.+412    	; 0x19a14 <lif_newdir+0x260>
        {
            if(freestate == 0)
   19878:	61 14       	cp	r6, r1
   1987a:	71 04       	cpc	r7, r1
   1987c:	09 f4       	brne	.+2      	; 0x19880 <lif_newdir+0xcc>
   1987e:	c1 c0       	rjmp	.+386    	; 0x19a02 <lif_newdir+0x24e>
   19880:	ff ef       	ldi	r31, 0xFF	; 255
   19882:	4f 1a       	sub	r4, r31
   19884:	5f 0a       	sbc	r5, r31
   19886:	82 01       	movw	r16, r4
   19888:	01 50       	subi	r16, 0x01	; 1
   1988a:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1988c:	b8 01       	movw	r22, r16
   1988e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19890:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19892:	c1 da       	rcall	.-2686   	; 0x18e16 <lif_readdirindex>
   19894:	89 2b       	or	r24, r25
   19896:	29 f7       	brne	.-54     	; 0x19862 <lif_newdir+0xae>
   19898:	e7 c0       	rjmp	.+462    	; 0x19a68 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1989a:	22 e0       	ldi	r18, 0x02	; 2
   1989c:	62 16       	cp	r6, r18
   1989e:	71 04       	cpc	r7, r1
   198a0:	09 f0       	breq	.+2      	; 0x198a4 <lif_newdir+0xf0>
   198a2:	46 c0       	rjmp	.+140    	; 0x19930 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   198a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   198a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   198a8:	0e 94 08 c2 	call	0x18410	; 0x18410 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   198ac:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198ae:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198b0:	e4 5a       	subi	r30, 0xA4	; 164
   198b2:	ff 4f       	sbci	r31, 0xFF	; 255
   198b4:	88 8d       	ldd	r24, Y+24	; 0x18
   198b6:	80 83       	st	Z, r24
   198b8:	99 8d       	ldd	r25, Y+25	; 0x19
   198ba:	91 83       	std	Z+1, r25	; 0x01
   198bc:	2a 8d       	ldd	r18, Y+26	; 0x1a
   198be:	22 83       	std	Z+2, r18	; 0x02
   198c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   198c2:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   198c4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198c6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198c8:	e0 5a       	subi	r30, 0xA0	; 160
   198ca:	ff 4f       	sbci	r31, 0xFF	; 255
   198cc:	80 82       	st	Z, r8
   198ce:	91 82       	std	Z+1, r9	; 0x01
   198d0:	a2 82       	std	Z+2, r10	; 0x02
   198d2:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   198d4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198d6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198d8:	84 89       	ldd	r24, Z+20	; 0x14
   198da:	95 89       	ldd	r25, Z+21	; 0x15
   198dc:	a6 89       	ldd	r26, Z+22	; 0x16
   198de:	b7 89       	ldd	r27, Z+23	; 0x17
   198e0:	88 0d       	add	r24, r8
   198e2:	99 1d       	adc	r25, r9
   198e4:	aa 1d       	adc	r26, r10
   198e6:	bb 1d       	adc	r27, r11
   198e8:	84 8b       	std	Z+20, r24	; 0x14
   198ea:	95 8b       	std	Z+21, r25	; 0x15
   198ec:	a6 8b       	std	Z+22, r26	; 0x16
   198ee:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   198f0:	80 8d       	ldd	r24, Z+24	; 0x18
   198f2:	91 8d       	ldd	r25, Z+25	; 0x19
   198f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   198f6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   198f8:	88 19       	sub	r24, r8
   198fa:	99 09       	sbc	r25, r9
   198fc:	aa 09       	sbc	r26, r10
   198fe:	bb 09       	sbc	r27, r11
   19900:	80 8f       	std	Z+24, r24	; 0x18
   19902:	91 8f       	std	Z+25, r25	; 0x19
   19904:	a2 8f       	std	Z+26, r26	; 0x1a
   19906:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19908:	84 8d       	ldd	r24, Z+28	; 0x1c
   1990a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1990c:	01 96       	adiw	r24, 0x01	; 1
   1990e:	95 8f       	std	Z+29, r25	; 0x1d
   19910:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19912:	86 8d       	ldd	r24, Z+30	; 0x1e
   19914:	97 8d       	ldd	r25, Z+31	; 0x1f
   19916:	01 97       	sbiw	r24, 0x01	; 1
   19918:	97 8f       	std	Z+31, r25	; 0x1f
   1991a:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1991c:	20 a2       	std	Z+32, r2	; 0x20
   1991e:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19920:	b1 01       	movw	r22, r2
   19922:	cf 01       	movw	r24, r30
   19924:	df da       	rcall	.-2626   	; 0x18ee4 <lif_writedirindex>
   19926:	89 2b       	or	r24, r25
   19928:	09 f4       	brne	.+2      	; 0x1992c <lif_newdir+0x178>
   1992a:	9e c0       	rjmp	.+316    	; 0x19a68 <lif_newdir+0x2b4>
   1992c:	c1 01       	movw	r24, r2
   1992e:	9e c0       	rjmp	.+316    	; 0x19a6c <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19930:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19934:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19938:	92 ff       	sbrs	r25, 2
   1993a:	1e c0       	rjmp	.+60     	; 0x19978 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1993c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1993e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19940:	80 8d       	ldd	r24, Z+24	; 0x18
   19942:	91 8d       	ldd	r25, Z+25	; 0x19
   19944:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19946:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19948:	ed b7       	in	r30, 0x3d	; 61
   1994a:	fe b7       	in	r31, 0x3e	; 62
   1994c:	86 87       	std	Z+14, r24	; 0x0e
   1994e:	97 87       	std	Z+15, r25	; 0x0f
   19950:	a0 8b       	std	Z+16, r26	; 0x10
   19952:	b1 8b       	std	Z+17, r27	; 0x11
   19954:	82 86       	std	Z+10, r8	; 0x0a
   19956:	93 86       	std	Z+11, r9	; 0x0b
   19958:	a4 86       	std	Z+12, r10	; 0x0c
   1995a:	b5 86       	std	Z+13, r11	; 0x0d
   1995c:	c6 82       	std	Z+6, r12	; 0x06
   1995e:	d7 82       	std	Z+7, r13	; 0x07
   19960:	e0 86       	std	Z+8, r14	; 0x08
   19962:	f1 86       	std	Z+9, r15	; 0x09
   19964:	15 83       	std	Z+5, r17	; 0x05
   19966:	04 83       	std	Z+4, r16	; 0x04
   19968:	8c e1       	ldi	r24, 0x1C	; 28
   1996a:	98 e3       	ldi	r25, 0x38	; 56
   1996c:	a0 e0       	ldi	r26, 0x00	; 0
   1996e:	81 83       	std	Z+1, r24	; 0x01
   19970:	92 83       	std	Z+2, r25	; 0x02
   19972:	a3 83       	std	Z+3, r26	; 0x03
   19974:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19978:	b8 01       	movw	r22, r16
   1997a:	6f 5f       	subi	r22, 0xFF	; 255
   1997c:	7f 4f       	sbci	r23, 0xFF	; 255
   1997e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19980:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19982:	0c db       	rcall	.-2536   	; 0x18f9c <lif_writedirEOF>
   19984:	89 2b       	or	r24, r25
   19986:	09 f4       	brne	.+2      	; 0x1998a <lif_newdir+0x1d6>
   19988:	6f c0       	rjmp	.+222    	; 0x19a68 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1998a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1998c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1998e:	0e 94 08 c2 	call	0x18410	; 0x18410 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19992:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19994:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19996:	e4 5a       	subi	r30, 0xA4	; 164
   19998:	ff 4f       	sbci	r31, 0xFF	; 255
   1999a:	c0 82       	st	Z, r12
   1999c:	d1 82       	std	Z+1, r13	; 0x01
   1999e:	e2 82       	std	Z+2, r14	; 0x02
   199a0:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   199a2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199a4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199a6:	e0 5a       	subi	r30, 0xA0	; 160
   199a8:	ff 4f       	sbci	r31, 0xFF	; 255
   199aa:	80 82       	st	Z, r8
   199ac:	91 82       	std	Z+1, r9	; 0x01
   199ae:	a2 82       	std	Z+2, r10	; 0x02
   199b0:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   199b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199b6:	84 89       	ldd	r24, Z+20	; 0x14
   199b8:	95 89       	ldd	r25, Z+21	; 0x15
   199ba:	a6 89       	ldd	r26, Z+22	; 0x16
   199bc:	b7 89       	ldd	r27, Z+23	; 0x17
   199be:	88 0d       	add	r24, r8
   199c0:	99 1d       	adc	r25, r9
   199c2:	aa 1d       	adc	r26, r10
   199c4:	bb 1d       	adc	r27, r11
   199c6:	84 8b       	std	Z+20, r24	; 0x14
   199c8:	95 8b       	std	Z+21, r25	; 0x15
   199ca:	a6 8b       	std	Z+22, r26	; 0x16
   199cc:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   199ce:	80 8d       	ldd	r24, Z+24	; 0x18
   199d0:	91 8d       	ldd	r25, Z+25	; 0x19
   199d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   199d4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   199d6:	88 19       	sub	r24, r8
   199d8:	99 09       	sbc	r25, r9
   199da:	aa 09       	sbc	r26, r10
   199dc:	bb 09       	sbc	r27, r11
   199de:	80 8f       	std	Z+24, r24	; 0x18
   199e0:	91 8f       	std	Z+25, r25	; 0x19
   199e2:	a2 8f       	std	Z+26, r26	; 0x1a
   199e4:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   199e6:	84 8d       	ldd	r24, Z+28	; 0x1c
   199e8:	95 8d       	ldd	r25, Z+29	; 0x1d
   199ea:	01 96       	adiw	r24, 0x01	; 1
   199ec:	95 8f       	std	Z+29, r25	; 0x1d
   199ee:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   199f0:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   199f2:	00 a3       	std	Z+32, r16	; 0x20
   199f4:	b8 01       	movw	r22, r16
   199f6:	cf 01       	movw	r24, r30
   199f8:	75 da       	rcall	.-2838   	; 0x18ee4 <lif_writedirindex>
   199fa:	89 2b       	or	r24, r25
   199fc:	a9 f1       	breq	.+106    	; 0x19a68 <lif_newdir+0x2b4>
   199fe:	c8 01       	movw	r24, r16
   19a00:	35 c0       	rjmp	.+106    	; 0x19a6c <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19a02:	c8 8e       	std	Y+24, r12	; 0x18
   19a04:	d9 8e       	std	Y+25, r13	; 0x19
   19a06:	ea 8e       	std	Y+26, r14	; 0x1a
   19a08:	fb 8e       	std	Y+27, r15	; 0x1b
   19a0a:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19a0c:	66 24       	eor	r6, r6
   19a0e:	63 94       	inc	r6
   19a10:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19a12:	36 cf       	rjmp	.-404    	; 0x19880 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19a14:	f1 e0       	ldi	r31, 0x01	; 1
   19a16:	6f 16       	cp	r6, r31
   19a18:	71 04       	cpc	r7, r1
   19a1a:	a9 f4       	brne	.+42     	; 0x19a46 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19a1c:	ea 89       	ldd	r30, Y+18	; 0x12
   19a1e:	fb 89       	ldd	r31, Y+19	; 0x13
   19a20:	80 81       	ld	r24, Z
   19a22:	91 81       	ldd	r25, Z+1	; 0x01
   19a24:	a2 81       	ldd	r26, Z+2	; 0x02
   19a26:	b3 81       	ldd	r27, Z+3	; 0x03
   19a28:	8c 19       	sub	r24, r12
   19a2a:	9d 09       	sbc	r25, r13
   19a2c:	ae 09       	sbc	r26, r14
   19a2e:	bf 09       	sbc	r27, r15
   19a30:	88 15       	cp	r24, r8
   19a32:	99 05       	cpc	r25, r9
   19a34:	aa 05       	cpc	r26, r10
   19a36:	bb 05       	cpc	r27, r11
   19a38:	1c f4       	brge	.+6      	; 0x19a40 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19a3a:	61 2c       	mov	r6, r1
   19a3c:	71 2c       	mov	r7, r1
   19a3e:	03 c0       	rjmp	.+6      	; 0x19a46 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19a40:	82 e0       	ldi	r24, 0x02	; 2
   19a42:	68 2e       	mov	r6, r24
   19a44:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19a46:	ea 89       	ldd	r30, Y+18	; 0x12
   19a48:	fb 89       	ldd	r31, Y+19	; 0x13
   19a4a:	c0 80       	ld	r12, Z
   19a4c:	d1 80       	ldd	r13, Z+1	; 0x01
   19a4e:	e2 80       	ldd	r14, Z+2	; 0x02
   19a50:	f3 80       	ldd	r15, Z+3	; 0x03
   19a52:	ee 89       	ldd	r30, Y+22	; 0x16
   19a54:	ff 89       	ldd	r31, Y+23	; 0x17
   19a56:	80 81       	ld	r24, Z
   19a58:	91 81       	ldd	r25, Z+1	; 0x01
   19a5a:	a2 81       	ldd	r26, Z+2	; 0x02
   19a5c:	b3 81       	ldd	r27, Z+3	; 0x03
   19a5e:	c8 0e       	add	r12, r24
   19a60:	d9 1e       	adc	r13, r25
   19a62:	ea 1e       	adc	r14, r26
   19a64:	fb 1e       	adc	r15, r27
   19a66:	0c cf       	rjmp	.-488    	; 0x19880 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19a68:	8f ef       	ldi	r24, 0xFF	; 255
   19a6a:	9f ef       	ldi	r25, 0xFF	; 255
}
   19a6c:	6d 96       	adiw	r28, 0x1d	; 29
   19a6e:	e2 e1       	ldi	r30, 0x12	; 18
   19a70:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

00019a74 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19a74:	a9 e3       	ldi	r26, 0x39	; 57
   19a76:	b1 e0       	ldi	r27, 0x01	; 1
   19a78:	e0 e4       	ldi	r30, 0x40	; 64
   19a7a:	fd ec       	ldi	r31, 0xCD	; 205
   19a7c:	0c 94 89 e1 	jmp	0x1c312	; 0x1c312 <__prologue_saves__+0xc>
   19a80:	6c 01       	movw	r12, r24
   19a82:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19a84:	be 01       	movw	r22, r28
   19a86:	66 5f       	subi	r22, 0xF6	; 246
   19a88:	7e 4f       	sbci	r23, 0xFE	; 254
   19a8a:	0e 94 57 bd 	call	0x17aae	; 0x17aae <lif_stat>
   19a8e:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19a90:	00 97       	sbiw	r24, 0x00	; 0
   19a92:	09 f1       	breq	.+66     	; 0x19ad6 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19a94:	fc 01       	movw	r30, r24
   19a96:	80 8d       	ldd	r24, Z+24	; 0x18
   19a98:	91 8d       	ldd	r25, Z+25	; 0x19
   19a9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a9c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a9e:	81 15       	cp	r24, r1
   19aa0:	f2 e0       	ldi	r31, 0x02	; 2
   19aa2:	9f 07       	cpc	r25, r31
   19aa4:	a1 05       	cpc	r26, r1
   19aa6:	b1 05       	cpc	r27, r1
   19aa8:	c8 f4       	brcc	.+50     	; 0x19adc <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19aaa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19aae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ab2:	32 ff       	sbrs	r19, 2
   19ab4:	10 c0       	rjmp	.+32     	; 0x19ad6 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19ab6:	ed b7       	in	r30, 0x3d	; 61
   19ab8:	fe b7       	in	r31, 0x3e	; 62
   19aba:	86 83       	std	Z+6, r24	; 0x06
   19abc:	97 83       	std	Z+7, r25	; 0x07
   19abe:	a0 87       	std	Z+8, r26	; 0x08
   19ac0:	b1 87       	std	Z+9, r27	; 0x09
   19ac2:	d5 82       	std	Z+5, r13	; 0x05
   19ac4:	c4 82       	std	Z+4, r12	; 0x04
   19ac6:	8d ed       	ldi	r24, 0xDD	; 221
   19ac8:	97 e3       	ldi	r25, 0x37	; 55
   19aca:	a0 e0       	ldi	r26, 0x00	; 0
   19acc:	81 83       	std	Z+1, r24	; 0x01
   19ace:	92 83       	std	Z+2, r25	; 0x02
   19ad0:	a3 83       	std	Z+3, r26	; 0x03
   19ad2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(NULL);
   19ad6:	00 e0       	ldi	r16, 0x00	; 0
   19ad8:	10 e0       	ldi	r17, 0x00	; 0
   19ada:	c6 c0       	rjmp	.+396    	; 0x19c68 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19adc:	64 e7       	ldi	r22, 0x74	; 116
   19ade:	70 e0       	ldi	r23, 0x00	; 0
   19ae0:	80 e0       	ldi	r24, 0x00	; 0
   19ae2:	90 e0       	ldi	r25, 0x00	; 0
   19ae4:	0e 94 c3 bc 	call	0x17986	; 0x17986 <lif_calloc>
   19ae8:	7c 01       	movw	r14, r24
    if(!LIF)
   19aea:	89 2b       	or	r24, r25
   19aec:	a1 f3       	breq	.-24     	; 0x19ad6 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19aee:	c6 01       	movw	r24, r12
   19af0:	0e 94 0e bd 	call	0x17a1c	; 0x17a1c <lif_stralloc>
   19af4:	f7 01       	movw	r30, r14
   19af6:	91 83       	std	Z+1, r25	; 0x01
   19af8:	80 83       	st	Z, r24
    if(!LIF->name)
   19afa:	00 97       	sbiw	r24, 0x00	; 0
   19afc:	09 f4       	brne	.+2      	; 0x19b00 <lif_open_volume+0x8c>
   19afe:	5e c0       	rjmp	.+188    	; 0x19bbc <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19b00:	f5 01       	movw	r30, r10
   19b02:	80 8c       	ldd	r8, Z+24	; 0x18
   19b04:	91 8c       	ldd	r9, Z+25	; 0x19
   19b06:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19b08:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19b0a:	f7 01       	movw	r30, r14
   19b0c:	80 86       	std	Z+8, r8	; 0x08
   19b0e:	91 86       	std	Z+9, r9	; 0x09
   19b10:	a2 86       	std	Z+10, r10	; 0x0a
   19b12:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19b14:	77 27       	eor	r23, r23
   19b16:	6b 2d       	mov	r22, r11
   19b18:	5a 2d       	mov	r21, r10
   19b1a:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19b1c:	88 20       	and	r8, r8
   19b1e:	21 f0       	breq	.+8      	; 0x19b28 <lif_open_volume+0xb4>
        ++sectors;
   19b20:	4f 5f       	subi	r20, 0xFF	; 255
   19b22:	5f 4f       	sbci	r21, 0xFF	; 255
   19b24:	6f 4f       	sbci	r22, 0xFF	; 255
   19b26:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19b28:	f7 01       	movw	r30, r14
   19b2a:	44 83       	std	Z+4, r20	; 0x04
   19b2c:	55 83       	std	Z+5, r21	; 0x05
   19b2e:	66 83       	std	Z+6, r22	; 0x06
   19b30:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19b32:	b8 01       	movw	r22, r16
   19b34:	0e 94 2d bd 	call	0x17a5a	; 0x17a5a <lif_open>
   19b38:	f7 01       	movw	r30, r14
   19b3a:	93 83       	std	Z+3, r25	; 0x03
   19b3c:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19b3e:	89 2b       	or	r24, r25
   19b40:	e9 f1       	breq	.+122    	; 0x19bbc <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19b42:	00 e0       	ldi	r16, 0x00	; 0
   19b44:	11 e0       	ldi	r17, 0x01	; 1
   19b46:	20 e0       	ldi	r18, 0x00	; 0
   19b48:	30 e0       	ldi	r19, 0x00	; 0
   19b4a:	a9 01       	movw	r20, r18
   19b4c:	be 01       	movw	r22, r28
   19b4e:	66 5f       	subi	r22, 0xF6	; 246
   19b50:	7f 4f       	sbci	r23, 0xFF	; 255
   19b52:	c7 01       	movw	r24, r14
   19b54:	0e 94 b1 bd 	call	0x17b62	; 0x17b62 <lif_read>
   19b58:	6f 3f       	cpi	r22, 0xFF	; 255
   19b5a:	71 05       	cpc	r23, r1
   19b5c:	81 05       	cpc	r24, r1
   19b5e:	91 05       	cpc	r25, r1
   19b60:	09 f0       	breq	.+2      	; 0x19b64 <lif_open_volume+0xf0>
   19b62:	6c f4       	brge	.+26     	; 0x19b7e <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19b64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19b68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b6c:	92 ff       	sbrs	r25, 2
   19b6e:	26 c0       	rjmp	.+76     	; 0x19bbc <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19b70:	ed b7       	in	r30, 0x3d	; 61
   19b72:	fe b7       	in	r31, 0x3e	; 62
   19b74:	d5 82       	std	Z+5, r13	; 0x05
   19b76:	c4 82       	std	Z+4, r12	; 0x04
   19b78:	87 ea       	ldi	r24, 0xA7	; 167
   19b7a:	97 e3       	ldi	r25, 0x37	; 55
   19b7c:	19 c0       	rjmp	.+50     	; 0x19bb0 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19b7e:	b7 01       	movw	r22, r14
   19b80:	ce 01       	movw	r24, r28
   19b82:	0a 96       	adiw	r24, 0x0a	; 10
   19b84:	0e 94 d1 bf 	call	0x17fa2	; 0x17fa2 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19b88:	c7 01       	movw	r24, r14
   19b8a:	0e 94 dd c3 	call	0x187ba	; 0x187ba <lif_check_volume>
   19b8e:	89 2b       	or	r24, r25
   19b90:	c1 f4       	brne	.+48     	; 0x19bc2 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19b92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19b96:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b9a:	92 ff       	sbrs	r25, 2
   19b9c:	0f c0       	rjmp	.+30     	; 0x19bbc <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19b9e:	f7 01       	movw	r30, r14
   19ba0:	80 81       	ld	r24, Z
   19ba2:	91 81       	ldd	r25, Z+1	; 0x01
   19ba4:	ed b7       	in	r30, 0x3d	; 61
   19ba6:	fe b7       	in	r31, 0x3e	; 62
   19ba8:	95 83       	std	Z+5, r25	; 0x05
   19baa:	84 83       	std	Z+4, r24	; 0x04
   19bac:	84 e7       	ldi	r24, 0x74	; 116
   19bae:	97 e3       	ldi	r25, 0x37	; 55
   19bb0:	a0 e0       	ldi	r26, 0x00	; 0
   19bb2:	81 83       	std	Z+1, r24	; 0x01
   19bb4:	92 83       	std	Z+2, r25	; 0x02
   19bb6:	a3 83       	std	Z+3, r26	; 0x03
   19bb8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19bbc:	c7 01       	movw	r24, r14
   19bbe:	9d d8       	rcall	.-3782   	; 0x18cfa <lif_close_volume>
   19bc0:	8a cf       	rjmp	.-236    	; 0x19ad6 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19bc2:	f7 01       	movw	r30, r14
   19bc4:	45 a5       	ldd	r20, Z+45	; 0x2d
   19bc6:	56 a5       	ldd	r21, Z+46	; 0x2e
   19bc8:	67 a5       	ldd	r22, Z+47	; 0x2f
   19bca:	70 a9       	ldd	r23, Z+48	; 0x30
   19bcc:	85 a9       	ldd	r24, Z+53	; 0x35
   19bce:	96 a9       	ldd	r25, Z+54	; 0x36
   19bd0:	a7 a9       	ldd	r26, Z+55	; 0x37
   19bd2:	b0 ad       	ldd	r27, Z+56	; 0x38
   19bd4:	48 0f       	add	r20, r24
   19bd6:	59 1f       	adc	r21, r25
   19bd8:	6a 1f       	adc	r22, r26
   19bda:	7b 1f       	adc	r23, r27
   19bdc:	44 87       	std	Z+12, r20	; 0x0c
   19bde:	55 87       	std	Z+13, r21	; 0x0d
   19be0:	66 87       	std	Z+14, r22	; 0x0e
   19be2:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19be4:	84 81       	ldd	r24, Z+4	; 0x04
   19be6:	95 81       	ldd	r25, Z+5	; 0x05
   19be8:	a6 81       	ldd	r26, Z+6	; 0x06
   19bea:	b7 81       	ldd	r27, Z+7	; 0x07
   19bec:	84 1b       	sub	r24, r20
   19bee:	95 0b       	sbc	r25, r21
   19bf0:	a6 0b       	sbc	r26, r22
   19bf2:	b7 0b       	sbc	r27, r23
   19bf4:	80 8b       	std	Z+16, r24	; 0x10
   19bf6:	91 8b       	std	Z+17, r25	; 0x11
   19bf8:	a2 8b       	std	Z+18, r26	; 0x12
   19bfa:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19bfc:	80 8f       	std	Z+24, r24	; 0x18
   19bfe:	91 8f       	std	Z+25, r25	; 0x19
   19c00:	a2 8f       	std	Z+26, r26	; 0x1a
   19c02:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19c04:	14 8a       	std	Z+20, r1	; 0x14
   19c06:	15 8a       	std	Z+21, r1	; 0x15
   19c08:	16 8a       	std	Z+22, r1	; 0x16
   19c0a:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19c0c:	17 8e       	std	Z+31, r1	; 0x1f
   19c0e:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19c10:	15 8e       	std	Z+29, r1	; 0x1d
   19c12:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19c14:	11 a2       	std	Z+33, r1	; 0x21
   19c16:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19c18:	13 a2       	std	Z+35, r1	; 0x23
   19c1a:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19c1c:	c7 01       	movw	r24, r14
   19c1e:	d6 d9       	rcall	.-3156   	; 0x18fcc <lif_updatefree>
   19c20:	8c 01       	movw	r16, r24
   19c22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c26:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c2a:	01 15       	cp	r16, r1
   19c2c:	11 05       	cpc	r17, r1
   19c2e:	a1 f4       	brne	.+40     	; 0x19c58 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19c30:	92 ff       	sbrs	r25, 2
   19c32:	0f c0       	rjmp	.+30     	; 0x19c52 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19c34:	f7 01       	movw	r30, r14
   19c36:	80 81       	ld	r24, Z
   19c38:	91 81       	ldd	r25, Z+1	; 0x01
   19c3a:	ed b7       	in	r30, 0x3d	; 61
   19c3c:	fe b7       	in	r31, 0x3e	; 62
   19c3e:	95 83       	std	Z+5, r25	; 0x05
   19c40:	84 83       	std	Z+4, r24	; 0x04
   19c42:	81 e4       	ldi	r24, 0x41	; 65
   19c44:	97 e3       	ldi	r25, 0x37	; 55
   19c46:	a0 e0       	ldi	r26, 0x00	; 0
   19c48:	81 83       	std	Z+1, r24	; 0x01
   19c4a:	92 83       	std	Z+2, r25	; 0x02
   19c4c:	a3 83       	std	Z+3, r26	; 0x03
   19c4e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19c52:	c7 01       	movw	r24, r14
   19c54:	52 d8       	rcall	.-3932   	; 0x18cfa <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19c56:	08 c0       	rjmp	.+16     	; 0x19c68 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19c58:	92 ff       	sbrs	r25, 2
   19c5a:	05 c0       	rjmp	.+10     	; 0x19c66 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19c5c:	6c e3       	ldi	r22, 0x3C	; 60
   19c5e:	76 e1       	ldi	r23, 0x16	; 22
   19c60:	c7 01       	movw	r24, r14
   19c62:	0e 94 17 c2 	call	0x1842e	; 0x1842e <lif_dump_vol>
   19c66:	87 01       	movw	r16, r14
    return( LIF );
}
   19c68:	c8 01       	movw	r24, r16
   19c6a:	c7 5c       	subi	r28, 0xC7	; 199
   19c6c:	de 4f       	sbci	r29, 0xFE	; 254
   19c6e:	ec e0       	ldi	r30, 0x0C	; 12
   19c70:	0c 94 a5 e1 	jmp	0x1c34a	; 0x1c34a <__epilogue_restores__+0xc>

00019c74 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19c74:	2f 92       	push	r2
   19c76:	3f 92       	push	r3
   19c78:	4f 92       	push	r4
   19c7a:	5f 92       	push	r5
   19c7c:	6f 92       	push	r6
   19c7e:	8f 92       	push	r8
   19c80:	9f 92       	push	r9
   19c82:	af 92       	push	r10
   19c84:	bf 92       	push	r11
   19c86:	cf 92       	push	r12
   19c88:	df 92       	push	r13
   19c8a:	ef 92       	push	r14
   19c8c:	0f 93       	push	r16
   19c8e:	1f 93       	push	r17
   19c90:	cf 93       	push	r28
   19c92:	df 93       	push	r29
   19c94:	cd b7       	in	r28, 0x3d	; 61
   19c96:	de b7       	in	r29, 0x3e	; 62
   19c98:	af 97       	sbiw	r28, 0x2f	; 47
   19c9a:	0f b6       	in	r0, 0x3f	; 63
   19c9c:	f8 94       	cli
   19c9e:	de bf       	out	0x3e, r29	; 62
   19ca0:	0f be       	out	0x3f, r0	; 63
   19ca2:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19ca4:	68 e0       	ldi	r22, 0x08	; 8
   19ca6:	79 e0       	ldi	r23, 0x09	; 9
   19ca8:	e5 de       	rcall	.-566    	; 0x19a74 <lif_open_volume>
   19caa:	9f a7       	std	Y+47, r25	; 0x2f
   19cac:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19cae:	00 97       	sbiw	r24, 0x00	; 0
   19cb0:	09 f4       	brne	.+2      	; 0x19cb4 <lif_dir+0x40>
   19cb2:	9e c1       	rjmp	.+828    	; 0x19ff0 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19cb4:	fc 01       	movw	r30, r24
   19cb6:	86 a1       	ldd	r24, Z+38	; 0x26
   19cb8:	88 23       	and	r24, r24
   19cba:	21 f0       	breq	.+8      	; 0x19cc4 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19cbc:	8f 01       	movw	r16, r30
   19cbe:	0a 5d       	subi	r16, 0xDA	; 218
   19cc0:	1f 4f       	sbci	r17, 0xFF	; 255
   19cc2:	02 c0       	rjmp	.+4      	; 0x19cc8 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19cc4:	0e ee       	ldi	r16, 0xEE	; 238
   19cc6:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19cc8:	8e a5       	ldd	r24, Y+46	; 0x2e
   19cca:	9f a5       	ldd	r25, Y+47	; 0x2f
   19ccc:	87 5b       	subi	r24, 0xB7	; 183
   19cce:	9f 4f       	sbci	r25, 0xFF	; 255
   19cd0:	0e 94 db c1 	call	0x183b6	; 0x183b6 <lif_lifbcd2timestr>
   19cd4:	ed b7       	in	r30, 0x3d	; 61
   19cd6:	fe b7       	in	r31, 0x3e	; 62
   19cd8:	97 83       	std	Z+7, r25	; 0x07
   19cda:	86 83       	std	Z+6, r24	; 0x06
   19cdc:	15 83       	std	Z+5, r17	; 0x05
   19cde:	04 83       	std	Z+4, r16	; 0x04
   19ce0:	8a e2       	ldi	r24, 0x2A	; 42
   19ce2:	97 e3       	ldi	r25, 0x37	; 55
   19ce4:	a0 e0       	ldi	r26, 0x00	; 0
   19ce6:	81 83       	std	Z+1, r24	; 0x01
   19ce8:	92 83       	std	Z+2, r25	; 0x02
   19cea:	a3 83       	std	Z+3, r26	; 0x03
   19cec:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19cf0:	8a ee       	ldi	r24, 0xEA	; 234
   19cf2:	96 e3       	ldi	r25, 0x36	; 54
   19cf4:	a0 e0       	ldi	r26, 0x00	; 0
   19cf6:	ed b7       	in	r30, 0x3d	; 61
   19cf8:	fe b7       	in	r31, 0x3e	; 62
   19cfa:	81 83       	std	Z+1, r24	; 0x01
   19cfc:	92 83       	std	Z+2, r25	; 0x02
   19cfe:	a3 83       	std	Z+3, r26	; 0x03
   19d00:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19d04:	00 e2       	ldi	r16, 0x20	; 32
   19d06:	10 e0       	ldi	r17, 0x00	; 0
   19d08:	1f 8b       	std	Y+23, r17	; 0x17
   19d0a:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19d0c:	21 2c       	mov	r2, r1
   19d0e:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19d10:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d12:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d14:	06 5a       	subi	r16, 0xA6	; 166
   19d16:	1f 4f       	sbci	r17, 0xFF	; 255
   19d18:	1d 8f       	std	Y+29, r17	; 0x1d
   19d1a:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19d1c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d1e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d20:	00 5a       	subi	r16, 0xA0	; 160
   19d22:	1f 4f       	sbci	r17, 0xFF	; 255
   19d24:	1d a3       	std	Y+37, r17	; 0x25
   19d26:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19d28:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d2a:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d2c:	04 59       	subi	r16, 0x94	; 148
   19d2e:	1f 4f       	sbci	r17, 0xFF	; 255
   19d30:	1f a3       	std	Y+39, r17	; 0x27
   19d32:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19d34:	8e e9       	ldi	r24, 0x9E	; 158
   19d36:	96 e3       	ldi	r25, 0x36	; 54
   19d38:	6c 01       	movw	r12, r24
   19d3a:	e1 2c       	mov	r14, r1
   19d3c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d3e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d40:	01 5b       	subi	r16, 0xB1	; 177
   19d42:	1f 4f       	sbci	r17, 0xFF	; 255
   19d44:	1f 8f       	std	Y+31, r17	; 0x1f
   19d46:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19d48:	8e e6       	ldi	r24, 0x6E	; 110
   19d4a:	96 e3       	ldi	r25, 0x36	; 54
   19d4c:	2c 01       	movw	r4, r24
   19d4e:	61 2c       	mov	r6, r1
   19d50:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d52:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d54:	04 5a       	subi	r16, 0xA4	; 164
   19d56:	1f 4f       	sbci	r17, 0xFF	; 255
   19d58:	19 a7       	std	Y+41, r17	; 0x29
   19d5a:	08 a7       	std	Y+40, r16	; 0x28
   19d5c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d5e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d60:	02 59       	subi	r16, 0x92	; 146
   19d62:	1f 4f       	sbci	r17, 0xFF	; 255
   19d64:	1b a7       	std	Y+43, r17	; 0x2b
   19d66:	0a a7       	std	Y+42, r16	; 0x2a
   19d68:	0e a5       	ldd	r16, Y+46	; 0x2e
   19d6a:	1f a5       	ldd	r17, Y+47	; 0x2f
   19d6c:	0c 59       	subi	r16, 0x9C	; 156
   19d6e:	1f 4f       	sbci	r17, 0xFF	; 255
   19d70:	1d a7       	std	Y+45, r17	; 0x2d
   19d72:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19d74:	b1 01       	movw	r22, r2
   19d76:	8e a5       	ldd	r24, Y+46	; 0x2e
   19d78:	9f a5       	ldd	r25, Y+47	; 0x2f
   19d7a:	4d d8       	rcall	.-3942   	; 0x18e16 <lif_readdirindex>
   19d7c:	89 2b       	or	r24, r25
   19d7e:	09 f4       	brne	.+2      	; 0x19d82 <lif_dir+0x10e>
   19d80:	ad c0       	rjmp	.+346    	; 0x19edc <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19d82:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19d84:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19d86:	8d 91       	ld	r24, X+
   19d88:	9c 91       	ld	r25, X
   19d8a:	8f 3f       	cpi	r24, 0xFF	; 255
   19d8c:	bf ef       	ldi	r27, 0xFF	; 255
   19d8e:	9b 07       	cpc	r25, r27
   19d90:	09 f4       	brne	.+2      	; 0x19d94 <lif_dir+0x120>
   19d92:	a4 c0       	rjmp	.+328    	; 0x19edc <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19d94:	ec a1       	ldd	r30, Y+36	; 0x24
   19d96:	fd a1       	ldd	r31, Y+37	; 0x25
   19d98:	40 81       	ld	r20, Z
   19d9a:	51 81       	ldd	r21, Z+1	; 0x01
   19d9c:	62 81       	ldd	r22, Z+2	; 0x02
   19d9e:	73 81       	ldd	r23, Z+3	; 0x03
   19da0:	00 27       	eor	r16, r16
   19da2:	14 2f       	mov	r17, r20
   19da4:	25 2f       	mov	r18, r21
   19da6:	36 2f       	mov	r19, r22
   19da8:	08 8f       	std	Y+24, r16	; 0x18
   19daa:	19 8f       	std	Y+25, r17	; 0x19
   19dac:	2a 8f       	std	Y+26, r18	; 0x1a
   19dae:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19db0:	8c 7f       	andi	r24, 0xFC	; 252
   19db2:	80 31       	cpi	r24, 0x10	; 16
   19db4:	90 4e       	sbci	r25, 0xE0	; 224
   19db6:	09 f0       	breq	.+2      	; 0x19dba <lif_dir+0x146>
   19db8:	4b c0       	rjmp	.+150    	; 0x19e50 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19dba:	ae a1       	ldd	r26, Y+38	; 0x26
   19dbc:	bf a1       	ldd	r27, Y+39	; 0x27
   19dbe:	8d 91       	ld	r24, X+
   19dc0:	9c 91       	ld	r25, X
   19dc2:	00 97       	sbiw	r24, 0x00	; 0
   19dc4:	b9 f0       	breq	.+46     	; 0x19df4 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19dc6:	4c 01       	movw	r8, r24
   19dc8:	a1 2c       	mov	r10, r1
   19dca:	b1 2c       	mov	r11, r1
   19dcc:	33 27       	eor	r19, r19
   19dce:	2b 2d       	mov	r18, r11
   19dd0:	1a 2d       	mov	r17, r10
   19dd2:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19dd4:	88 23       	and	r24, r24
   19dd6:	21 f0       	breq	.+8      	; 0x19de0 <lif_dir+0x16c>
        ++sectors;
   19dd8:	0f 5f       	subi	r16, 0xFF	; 255
   19dda:	1f 4f       	sbci	r17, 0xFF	; 255
   19ddc:	2f 4f       	sbci	r18, 0xFF	; 255
   19dde:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19de0:	40 17       	cp	r20, r16
   19de2:	51 07       	cpc	r21, r17
   19de4:	62 07       	cpc	r22, r18
   19de6:	73 07       	cpc	r23, r19
   19de8:	29 f4       	brne	.+10     	; 0x19df4 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19dea:	88 8e       	std	Y+24, r8	; 0x18
   19dec:	99 8e       	std	Y+25, r9	; 0x19
   19dee:	aa 8e       	std	Y+26, r10	; 0x1a
   19df0:	bb 8e       	std	Y+27, r11	; 0x1b
   19df2:	2e c0       	rjmp	.+92     	; 0x19e50 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19df4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19df8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19dfc:	32 ff       	sbrs	r19, 2
   19dfe:	24 c0       	rjmp	.+72     	; 0x19e48 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19e00:	4c 01       	movw	r8, r24
   19e02:	a1 2c       	mov	r10, r1
   19e04:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19e06:	33 27       	eor	r19, r19
   19e08:	2b 2d       	mov	r18, r11
   19e0a:	1a 2d       	mov	r17, r10
   19e0c:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19e0e:	88 23       	and	r24, r24
   19e10:	21 f0       	breq	.+8      	; 0x19e1a <lif_dir+0x1a6>
        ++sectors;
   19e12:	0f 5f       	subi	r16, 0xFF	; 255
   19e14:	1f 4f       	sbci	r17, 0xFF	; 255
   19e16:	2f 4f       	sbci	r18, 0xFF	; 255
   19e18:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19e1a:	ed b7       	in	r30, 0x3d	; 61
   19e1c:	fe b7       	in	r31, 0x3e	; 62
   19e1e:	46 87       	std	Z+14, r20	; 0x0e
   19e20:	57 87       	std	Z+15, r21	; 0x0f
   19e22:	60 8b       	std	Z+16, r22	; 0x10
   19e24:	71 8b       	std	Z+17, r23	; 0x11
   19e26:	02 87       	std	Z+10, r16	; 0x0a
   19e28:	13 87       	std	Z+11, r17	; 0x0b
   19e2a:	24 87       	std	Z+12, r18	; 0x0c
   19e2c:	35 87       	std	Z+13, r19	; 0x0d
   19e2e:	86 82       	std	Z+6, r8	; 0x06
   19e30:	97 82       	std	Z+7, r9	; 0x07
   19e32:	a0 86       	std	Z+8, r10	; 0x08
   19e34:	b1 86       	std	Z+9, r11	; 0x09
   19e36:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19e38:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19e3a:	15 83       	std	Z+5, r17	; 0x05
   19e3c:	04 83       	std	Z+4, r16	; 0x04
   19e3e:	c1 82       	std	Z+1, r12	; 0x01
   19e40:	d2 82       	std	Z+2, r13	; 0x02
   19e42:	e3 82       	std	Z+3, r14	; 0x03
   19e44:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19e48:	01 e2       	ldi	r16, 0x21	; 33
   19e4a:	10 e0       	ldi	r17, 0x00	; 0
   19e4c:	1f 8b       	std	Y+23, r17	; 0x17
   19e4e:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19e50:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19e52:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19e54:	8d 90       	ld	r8, X+
   19e56:	9c 90       	ld	r9, X
   19e58:	81 14       	cp	r8, r1
   19e5a:	91 04       	cpc	r9, r1
   19e5c:	19 f0       	breq	.+6      	; 0x19e64 <lif_dir+0x1f0>
   19e5e:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19e60:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19e62:	02 c0       	rjmp	.+4      	; 0x19e68 <lif_dir+0x1f4>
   19e64:	0b e4       	ldi	r16, 0x4B	; 75
   19e66:	16 e1       	ldi	r17, 0x16	; 22
   19e68:	a8 a5       	ldd	r26, Y+40	; 0x28
   19e6a:	b9 a5       	ldd	r27, Y+41	; 0x29
   19e6c:	8d 91       	ld	r24, X+
   19e6e:	9d 91       	ld	r25, X+
   19e70:	0d 90       	ld	r0, X+
   19e72:	bc 91       	ld	r27, X
   19e74:	a0 2d       	mov	r26, r0
   19e76:	88 a3       	std	Y+32, r24	; 0x20
   19e78:	99 a3       	std	Y+33, r25	; 0x21
   19e7a:	aa a3       	std	Y+34, r26	; 0x22
   19e7c:	bb a3       	std	Y+35, r27	; 0x23
   19e7e:	ea a5       	ldd	r30, Y+42	; 0x2a
   19e80:	fb a5       	ldd	r31, Y+43	; 0x2b
   19e82:	a0 80       	ld	r10, Z
   19e84:	b1 80       	ldd	r11, Z+1	; 0x01
   19e86:	8c a5       	ldd	r24, Y+44	; 0x2c
   19e88:	9d a5       	ldd	r25, Y+45	; 0x2d
   19e8a:	0e 94 db c1 	call	0x183b6	; 0x183b6 <lif_lifbcd2timestr>
   19e8e:	ed b7       	in	r30, 0x3d	; 61
   19e90:	fe b7       	in	r31, 0x3e	; 62
   19e92:	95 8b       	std	Z+21, r25	; 0x15
   19e94:	84 8b       	std	Z+20, r24	; 0x14
   19e96:	b3 8a       	std	Z+19, r11	; 0x13
   19e98:	a2 8a       	std	Z+18, r10	; 0x12
   19e9a:	2e 89       	ldd	r18, Y+22	; 0x16
   19e9c:	3f 89       	ldd	r19, Y+23	; 0x17
   19e9e:	31 8b       	std	Z+17, r19	; 0x11
   19ea0:	20 8b       	std	Z+16, r18	; 0x10
   19ea2:	88 8d       	ldd	r24, Y+24	; 0x18
   19ea4:	99 8d       	ldd	r25, Y+25	; 0x19
   19ea6:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19ea8:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19eaa:	84 87       	std	Z+12, r24	; 0x0c
   19eac:	95 87       	std	Z+13, r25	; 0x0d
   19eae:	a6 87       	std	Z+14, r26	; 0x0e
   19eb0:	b7 87       	std	Z+15, r27	; 0x0f
   19eb2:	88 a1       	ldd	r24, Y+32	; 0x20
   19eb4:	99 a1       	ldd	r25, Y+33	; 0x21
   19eb6:	aa a1       	ldd	r26, Y+34	; 0x22
   19eb8:	bb a1       	ldd	r27, Y+35	; 0x23
   19eba:	80 87       	std	Z+8, r24	; 0x08
   19ebc:	91 87       	std	Z+9, r25	; 0x09
   19ebe:	a2 87       	std	Z+10, r26	; 0x0a
   19ec0:	b3 87       	std	Z+11, r27	; 0x0b
   19ec2:	97 82       	std	Z+7, r9	; 0x07
   19ec4:	86 82       	std	Z+6, r8	; 0x06
   19ec6:	15 83       	std	Z+5, r17	; 0x05
   19ec8:	04 83       	std	Z+4, r16	; 0x04
   19eca:	41 82       	std	Z+1, r4	; 0x01
   19ecc:	52 82       	std	Z+2, r5	; 0x02
   19ece:	63 82       	std	Z+3, r6	; 0x03
   19ed0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19ed4:	ff ef       	ldi	r31, 0xFF	; 255
   19ed6:	2f 1a       	sub	r2, r31
   19ed8:	3f 0a       	sbc	r3, r31
    }
   19eda:	4c cf       	rjmp	.-360    	; 0x19d74 <lif_dir+0x100>

    printf("\n");
   19edc:	8c e6       	ldi	r24, 0x6C	; 108
   19ede:	96 e3       	ldi	r25, 0x36	; 54
   19ee0:	a0 e0       	ldi	r26, 0x00	; 0
   19ee2:	ed b7       	in	r30, 0x3d	; 61
   19ee4:	fe b7       	in	r31, 0x3e	; 62
   19ee6:	81 83       	std	Z+1, r24	; 0x01
   19ee8:	92 83       	std	Z+2, r25	; 0x02
   19eea:	a3 83       	std	Z+3, r26	; 0x03
   19eec:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   19ef0:	ee a5       	ldd	r30, Y+46	; 0x2e
   19ef2:	ff a5       	ldd	r31, Y+47	; 0x2f
   19ef4:	84 8d       	ldd	r24, Z+28	; 0x1c
   19ef6:	95 8d       	ldd	r25, Z+29	; 0x1d
   19ef8:	09 2e       	mov	r0, r25
   19efa:	00 0c       	add	r0, r0
   19efc:	aa 0b       	sbc	r26, r26
   19efe:	bb 0b       	sbc	r27, r27
   19f00:	ed b7       	in	r30, 0x3d	; 61
   19f02:	fe b7       	in	r31, 0x3e	; 62
   19f04:	84 83       	std	Z+4, r24	; 0x04
   19f06:	95 83       	std	Z+5, r25	; 0x05
   19f08:	a6 83       	std	Z+6, r26	; 0x06
   19f0a:	b7 83       	std	Z+7, r27	; 0x07
   19f0c:	80 e6       	ldi	r24, 0x60	; 96
   19f0e:	96 e3       	ldi	r25, 0x36	; 54
   19f10:	a0 e0       	ldi	r26, 0x00	; 0
   19f12:	81 83       	std	Z+1, r24	; 0x01
   19f14:	92 83       	std	Z+2, r25	; 0x02
   19f16:	a3 83       	std	Z+3, r26	; 0x03
   19f18:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   19f1c:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f1e:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f20:	86 8d       	ldd	r24, Z+30	; 0x1e
   19f22:	97 8d       	ldd	r25, Z+31	; 0x1f
   19f24:	09 2e       	mov	r0, r25
   19f26:	00 0c       	add	r0, r0
   19f28:	aa 0b       	sbc	r26, r26
   19f2a:	bb 0b       	sbc	r27, r27
   19f2c:	ed b7       	in	r30, 0x3d	; 61
   19f2e:	fe b7       	in	r31, 0x3e	; 62
   19f30:	84 83       	std	Z+4, r24	; 0x04
   19f32:	95 83       	std	Z+5, r25	; 0x05
   19f34:	a6 83       	std	Z+6, r26	; 0x06
   19f36:	b7 83       	std	Z+7, r27	; 0x07
   19f38:	83 e5       	ldi	r24, 0x53	; 83
   19f3a:	96 e3       	ldi	r25, 0x36	; 54
   19f3c:	a0 e0       	ldi	r26, 0x00	; 0
   19f3e:	81 83       	std	Z+1, r24	; 0x01
   19f40:	92 83       	std	Z+2, r25	; 0x02
   19f42:	a3 83       	std	Z+3, r26	; 0x03
   19f44:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   19f48:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f4a:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f4c:	85 a5       	ldd	r24, Z+45	; 0x2d
   19f4e:	96 a5       	ldd	r25, Z+46	; 0x2e
   19f50:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19f52:	b0 a9       	ldd	r27, Z+48	; 0x30
   19f54:	ed b7       	in	r30, 0x3d	; 61
   19f56:	fe b7       	in	r31, 0x3e	; 62
   19f58:	84 83       	std	Z+4, r24	; 0x04
   19f5a:	95 83       	std	Z+5, r25	; 0x05
   19f5c:	a6 83       	std	Z+6, r26	; 0x06
   19f5e:	b7 83       	std	Z+7, r27	; 0x07
   19f60:	82 e4       	ldi	r24, 0x42	; 66
   19f62:	96 e3       	ldi	r25, 0x36	; 54
   19f64:	a0 e0       	ldi	r26, 0x00	; 0
   19f66:	81 83       	std	Z+1, r24	; 0x01
   19f68:	92 83       	std	Z+2, r25	; 0x02
   19f6a:	a3 83       	std	Z+3, r26	; 0x03
   19f6c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   19f70:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f72:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f74:	85 a9       	ldd	r24, Z+53	; 0x35
   19f76:	96 a9       	ldd	r25, Z+54	; 0x36
   19f78:	a7 a9       	ldd	r26, Z+55	; 0x37
   19f7a:	b0 ad       	ldd	r27, Z+56	; 0x38
   19f7c:	ed b7       	in	r30, 0x3d	; 61
   19f7e:	fe b7       	in	r31, 0x3e	; 62
   19f80:	84 83       	std	Z+4, r24	; 0x04
   19f82:	95 83       	std	Z+5, r25	; 0x05
   19f84:	a6 83       	std	Z+6, r26	; 0x06
   19f86:	b7 83       	std	Z+7, r27	; 0x07
   19f88:	8f e2       	ldi	r24, 0x2F	; 47
   19f8a:	96 e3       	ldi	r25, 0x36	; 54
   19f8c:	a0 e0       	ldi	r26, 0x00	; 0
   19f8e:	81 83       	std	Z+1, r24	; 0x01
   19f90:	92 83       	std	Z+2, r25	; 0x02
   19f92:	a3 83       	std	Z+3, r26	; 0x03
   19f94:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   19f98:	ee a5       	ldd	r30, Y+46	; 0x2e
   19f9a:	ff a5       	ldd	r31, Y+47	; 0x2f
   19f9c:	84 89       	ldd	r24, Z+20	; 0x14
   19f9e:	95 89       	ldd	r25, Z+21	; 0x15
   19fa0:	a6 89       	ldd	r26, Z+22	; 0x16
   19fa2:	b7 89       	ldd	r27, Z+23	; 0x17
   19fa4:	ed b7       	in	r30, 0x3d	; 61
   19fa6:	fe b7       	in	r31, 0x3e	; 62
   19fa8:	84 83       	std	Z+4, r24	; 0x04
   19faa:	95 83       	std	Z+5, r25	; 0x05
   19fac:	a6 83       	std	Z+6, r26	; 0x06
   19fae:	b7 83       	std	Z+7, r27	; 0x07
   19fb0:	8c e1       	ldi	r24, 0x1C	; 28
   19fb2:	96 e3       	ldi	r25, 0x36	; 54
   19fb4:	a0 e0       	ldi	r26, 0x00	; 0
   19fb6:	81 83       	std	Z+1, r24	; 0x01
   19fb8:	92 83       	std	Z+2, r25	; 0x02
   19fba:	a3 83       	std	Z+3, r26	; 0x03
   19fbc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   19fc0:	ee a5       	ldd	r30, Y+46	; 0x2e
   19fc2:	ff a5       	ldd	r31, Y+47	; 0x2f
   19fc4:	80 8d       	ldd	r24, Z+24	; 0x18
   19fc6:	91 8d       	ldd	r25, Z+25	; 0x19
   19fc8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19fca:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19fcc:	ed b7       	in	r30, 0x3d	; 61
   19fce:	fe b7       	in	r31, 0x3e	; 62
   19fd0:	84 83       	std	Z+4, r24	; 0x04
   19fd2:	95 83       	std	Z+5, r25	; 0x05
   19fd4:	a6 83       	std	Z+6, r26	; 0x06
   19fd6:	b7 83       	std	Z+7, r27	; 0x07
   19fd8:	89 e0       	ldi	r24, 0x09	; 9
   19fda:	96 e3       	ldi	r25, 0x36	; 54
   19fdc:	a0 e0       	ldi	r26, 0x00	; 0
   19fde:	81 83       	std	Z+1, r24	; 0x01
   19fe0:	92 83       	std	Z+2, r25	; 0x02
   19fe2:	a3 83       	std	Z+3, r26	; 0x03
   19fe4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fe8:	8e a5       	ldd	r24, Y+46	; 0x2e
   19fea:	9f a5       	ldd	r25, Y+47	; 0x2f
   19fec:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   19ff0:	af 96       	adiw	r28, 0x2f	; 47
   19ff2:	0f b6       	in	r0, 0x3f	; 63
   19ff4:	f8 94       	cli
   19ff6:	de bf       	out	0x3e, r29	; 62
   19ff8:	0f be       	out	0x3f, r0	; 63
   19ffa:	cd bf       	out	0x3d, r28	; 61
   19ffc:	df 91       	pop	r29
   19ffe:	cf 91       	pop	r28
   1a000:	1f 91       	pop	r17
   1a002:	0f 91       	pop	r16
   1a004:	ef 90       	pop	r14
   1a006:	df 90       	pop	r13
   1a008:	cf 90       	pop	r12
   1a00a:	bf 90       	pop	r11
   1a00c:	af 90       	pop	r10
   1a00e:	9f 90       	pop	r9
   1a010:	8f 90       	pop	r8
   1a012:	6f 90       	pop	r6
   1a014:	5f 90       	pop	r5
   1a016:	4f 90       	pop	r4
   1a018:	3f 90       	pop	r3
   1a01a:	2f 90       	pop	r2
   1a01c:	08 95       	ret

0001a01e <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a01e:	a5 e0       	ldi	r26, 0x05	; 5
   1a020:	b0 e0       	ldi	r27, 0x00	; 0
   1a022:	e5 e1       	ldi	r30, 0x15	; 21
   1a024:	f0 ed       	ldi	r31, 0xD0	; 208
   1a026:	0c 94 8b e1 	jmp	0x1c316	; 0x1c316 <__prologue_saves__+0x10>
   1a02a:	7c 01       	movw	r14, r24
   1a02c:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a02e:	cb 01       	movw	r24, r22
   1a030:	0e 94 cc be 	call	0x17d98	; 0x17d98 <lif_checkname>
   1a034:	89 2b       	or	r24, r25
   1a036:	69 f4       	brne	.+26     	; 0x1a052 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a038:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a03c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a040:	92 ff       	sbrs	r25, 2
   1a042:	48 c0       	rjmp	.+144    	; 0x1a0d4 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a044:	ed b7       	in	r30, 0x3d	; 61
   1a046:	fe b7       	in	r31, 0x3e	; 62
   1a048:	d5 83       	std	Z+5, r29	; 0x05
   1a04a:	c4 83       	std	Z+4, r28	; 0x04
   1a04c:	82 ee       	ldi	r24, 0xE2	; 226
   1a04e:	95 e3       	ldi	r25, 0x35	; 53
   1a050:	15 c0       	rjmp	.+42     	; 0x1a07c <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a052:	fe 01       	movw	r30, r28
   1a054:	01 90       	ld	r0, Z+
   1a056:	00 20       	and	r0, r0
   1a058:	e9 f7       	brne	.-6      	; 0x1a054 <lif_find_file+0x36>
   1a05a:	31 97       	sbiw	r30, 0x01	; 1
   1a05c:	ec 1b       	sub	r30, r28
   1a05e:	fd 0b       	sbc	r31, r29
   1a060:	3b 97       	sbiw	r30, 0x0b	; 11
   1a062:	98 f0       	brcs	.+38     	; 0x1a08a <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a064:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a068:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a06c:	92 ff       	sbrs	r25, 2
   1a06e:	32 c0       	rjmp	.+100    	; 0x1a0d4 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a070:	ed b7       	in	r30, 0x3d	; 61
   1a072:	fe b7       	in	r31, 0x3e	; 62
   1a074:	d5 83       	std	Z+5, r29	; 0x05
   1a076:	c4 83       	std	Z+4, r28	; 0x04
   1a078:	8d eb       	ldi	r24, 0xBD	; 189
   1a07a:	95 e3       	ldi	r25, 0x35	; 53
   1a07c:	a0 e0       	ldi	r26, 0x00	; 0
   1a07e:	81 83       	std	Z+1, r24	; 0x01
   1a080:	92 83       	std	Z+2, r25	; 0x02
   1a082:	a3 83       	std	Z+3, r26	; 0x03
   1a084:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a088:	25 c0       	rjmp	.+74     	; 0x1a0d4 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a08a:	e1 14       	cp	r14, r1
   1a08c:	f1 04       	cpc	r15, r1
   1a08e:	11 f1       	breq	.+68     	; 0x1a0d4 <lif_find_file+0xb6>
   1a090:	00 e0       	ldi	r16, 0x00	; 0
   1a092:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a094:	67 01       	movw	r12, r14
   1a096:	fa e5       	ldi	r31, 0x5A	; 90
   1a098:	cf 0e       	add	r12, r31
   1a09a:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a09c:	57 01       	movw	r10, r14
   1a09e:	2f e4       	ldi	r18, 0x4F	; 79
   1a0a0:	a2 0e       	add	r10, r18
   1a0a2:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a0a4:	b8 01       	movw	r22, r16
   1a0a6:	c7 01       	movw	r24, r14
   1a0a8:	0e 94 0b c7 	call	0x18e16	; 0x18e16 <lif_readdirindex>
   1a0ac:	89 2b       	or	r24, r25
   1a0ae:	91 f0       	breq	.+36     	; 0x1a0d4 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a0b0:	f6 01       	movw	r30, r12
   1a0b2:	80 81       	ld	r24, Z
   1a0b4:	91 81       	ldd	r25, Z+1	; 0x01
   1a0b6:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0b8:	ff ef       	ldi	r31, 0xFF	; 255
   1a0ba:	9f 07       	cpc	r25, r31
   1a0bc:	59 f0       	breq	.+22     	; 0x1a0d4 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a0be:	89 2b       	or	r24, r25
   1a0c0:	31 f0       	breq	.+12     	; 0x1a0ce <lif_find_file+0xb0>
   1a0c2:	be 01       	movw	r22, r28
   1a0c4:	c5 01       	movw	r24, r10
   1a0c6:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <strcasecmp>
   1a0ca:	89 2b       	or	r24, r25
   1a0cc:	31 f0       	breq	.+12     	; 0x1a0da <lif_find_file+0xbc>
            break;
        ++index;
   1a0ce:	0f 5f       	subi	r16, 0xFF	; 255
   1a0d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0d2:	e8 cf       	rjmp	.-48     	; 0x1a0a4 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a0d4:	8f ef       	ldi	r24, 0xFF	; 255
   1a0d6:	9f ef       	ldi	r25, 0xFF	; 255
   1a0d8:	01 c0       	rjmp	.+2      	; 0x1a0dc <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a0da:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a0dc:	cd b7       	in	r28, 0x3d	; 61
   1a0de:	de b7       	in	r29, 0x3e	; 62
   1a0e0:	25 96       	adiw	r28, 0x05	; 5
   1a0e2:	ea e0       	ldi	r30, 0x0A	; 10
   1a0e4:	0c 94 a7 e1 	jmp	0x1c34e	; 0x1c34e <__epilogue_restores__+0x10>

0001a0e8 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a0e8:	a5 e0       	ldi	r26, 0x05	; 5
   1a0ea:	b0 e0       	ldi	r27, 0x00	; 0
   1a0ec:	ea e7       	ldi	r30, 0x7A	; 122
   1a0ee:	f0 ed       	ldi	r31, 0xD0	; 208
   1a0f0:	0c 94 8d e1 	jmp	0x1c31a	; 0x1c31a <__prologue_saves__+0x14>
   1a0f4:	6b 01       	movw	r12, r22
   1a0f6:	7c 01       	movw	r14, r24
   1a0f8:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a0fa:	20 e0       	ldi	r18, 0x00	; 0
   1a0fc:	31 e0       	ldi	r19, 0x01	; 1
   1a0fe:	40 e0       	ldi	r20, 0x00	; 0
   1a100:	50 e0       	ldi	r21, 0x00	; 0
   1a102:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
    if(!pos)
   1a106:	61 15       	cp	r22, r1
   1a108:	71 05       	cpc	r23, r1
   1a10a:	e1 f1       	breq	.+120    	; 0x1a184 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a10c:	c0 e0       	ldi	r28, 0x00	; 0
   1a10e:	d1 e0       	ldi	r29, 0x01	; 1
   1a110:	c6 1b       	sub	r28, r22
   1a112:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a114:	f8 01       	movw	r30, r16
   1a116:	8f ee       	ldi	r24, 0xEF	; 239
   1a118:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a11a:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a11c:	cf 01       	movw	r24, r30
   1a11e:	80 1b       	sub	r24, r16
   1a120:	91 0b       	sbc	r25, r17
   1a122:	8c 17       	cp	r24, r28
   1a124:	9d 07       	cpc	r25, r29
   1a126:	14 f4       	brge	.+4      	; 0x1a12c <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a128:	21 93       	st	Z+, r18
   1a12a:	f8 cf       	rjmp	.-16     	; 0x1a11c <lif_e010_pad_sector+0x34>
   1a12c:	1c 16       	cp	r1, r28
   1a12e:	1d 06       	cpc	r1, r29
   1a130:	14 f0       	brlt	.+4      	; 0x1a136 <lif_e010_pad_sector+0x4e>
   1a132:	c1 e0       	ldi	r28, 0x01	; 1
   1a134:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a136:	ce 01       	movw	r24, r28
   1a138:	0d 2e       	mov	r0, r29
   1a13a:	00 0c       	add	r0, r0
   1a13c:	aa 0b       	sbc	r26, r26
   1a13e:	bb 0b       	sbc	r27, r27
   1a140:	bc 01       	movw	r22, r24
   1a142:	cd 01       	movw	r24, r26
   1a144:	6c 0d       	add	r22, r12
   1a146:	7d 1d       	adc	r23, r13
   1a148:	8e 1d       	adc	r24, r14
   1a14a:	9f 1d       	adc	r25, r15
   1a14c:	20 e0       	ldi	r18, 0x00	; 0
   1a14e:	31 e0       	ldi	r19, 0x01	; 1
   1a150:	40 e0       	ldi	r20, 0x00	; 0
   1a152:	50 e0       	ldi	r21, 0x00	; 0
   1a154:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a158:	61 15       	cp	r22, r1
   1a15a:	71 05       	cpc	r23, r1
   1a15c:	b1 f0       	breq	.+44     	; 0x1a18a <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a15e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a162:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a166:	32 ff       	sbrs	r19, 2
   1a168:	12 c0       	rjmp	.+36     	; 0x1a18e <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a16a:	ed b7       	in	r30, 0x3d	; 61
   1a16c:	fe b7       	in	r31, 0x3e	; 62
   1a16e:	75 83       	std	Z+5, r23	; 0x05
   1a170:	64 83       	std	Z+4, r22	; 0x04
   1a172:	84 e8       	ldi	r24, 0x84	; 132
   1a174:	95 e3       	ldi	r25, 0x35	; 53
   1a176:	a0 e0       	ldi	r26, 0x00	; 0
   1a178:	81 83       	std	Z+1, r24	; 0x01
   1a17a:	92 83       	std	Z+2, r25	; 0x02
   1a17c:	a3 83       	std	Z+3, r26	; 0x03
   1a17e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a182:	05 c0       	rjmp	.+10     	; 0x1a18e <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a184:	80 e0       	ldi	r24, 0x00	; 0
   1a186:	90 e0       	ldi	r25, 0x00	; 0
   1a188:	04 c0       	rjmp	.+8      	; 0x1a192 <lif_e010_pad_sector+0xaa>
   1a18a:	ce 01       	movw	r24, r28
   1a18c:	02 c0       	rjmp	.+4      	; 0x1a192 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a18e:	8f ef       	ldi	r24, 0xFF	; 255
   1a190:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a192:	cd b7       	in	r28, 0x3d	; 61
   1a194:	de b7       	in	r29, 0x3e	; 62
   1a196:	25 96       	adiw	r28, 0x05	; 5
   1a198:	e8 e0       	ldi	r30, 0x08	; 8
   1a19a:	0c 94 a9 e1 	jmp	0x1c352	; 0x1c352 <__epilogue_restores__+0x14>

0001a19e <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a19e:	a5 e0       	ldi	r26, 0x05	; 5
   1a1a0:	b0 e0       	ldi	r27, 0x00	; 0
   1a1a2:	e5 ed       	ldi	r30, 0xD5	; 213
   1a1a4:	f0 ed       	ldi	r31, 0xD0	; 208
   1a1a6:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   1a1aa:	ec 01       	movw	r28, r24
   1a1ac:	4a 01       	movw	r8, r20
   1a1ae:	5b 01       	movw	r10, r22
   1a1b0:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a1b2:	fc 01       	movw	r30, r24
   1a1b4:	01 90       	ld	r0, Z+
   1a1b6:	00 20       	and	r0, r0
   1a1b8:	e9 f7       	brne	.-6      	; 0x1a1b4 <lif_ascii_string_to_e010+0x16>
   1a1ba:	31 97       	sbiw	r30, 0x01	; 1
   1a1bc:	6f 01       	movw	r12, r30
   1a1be:	c8 1a       	sub	r12, r24
   1a1c0:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a1c2:	41 2c       	mov	r4, r1
   1a1c4:	51 2c       	mov	r5, r1
   1a1c6:	32 01       	movw	r6, r4
   1a1c8:	53 94       	inc	r5
   1a1ca:	cb 01       	movw	r24, r22
   1a1cc:	ba 01       	movw	r22, r20
   1a1ce:	a3 01       	movw	r20, r6
   1a1d0:	92 01       	movw	r18, r4
   1a1d2:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
   1a1d6:	21 2c       	mov	r2, r1
   1a1d8:	33 24       	eor	r3, r3
   1a1da:	33 94       	inc	r3
   1a1dc:	c1 01       	movw	r24, r2
   1a1de:	86 1b       	sub	r24, r22
   1a1e0:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a1e2:	86 30       	cpi	r24, 0x06	; 6
   1a1e4:	91 05       	cpc	r25, r1
   1a1e6:	20 f0       	brcs	.+8      	; 0x1a1f0 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a1e8:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a1ea:	00 e0       	ldi	r16, 0x00	; 0
   1a1ec:	10 e0       	ldi	r17, 0x00	; 0
   1a1ee:	17 c0       	rjmp	.+46     	; 0x1a21e <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a1f0:	a7 01       	movw	r20, r14
   1a1f2:	c5 01       	movw	r24, r10
   1a1f4:	b4 01       	movw	r22, r8
   1a1f6:	78 df       	rcall	.-272    	; 0x1a0e8 <lif_e010_pad_sector>
   1a1f8:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a1fa:	97 fd       	sbrc	r25, 7
   1a1fc:	83 c0       	rjmp	.+262    	; 0x1a304 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a1fe:	09 2e       	mov	r0, r25
   1a200:	00 0c       	add	r0, r0
   1a202:	aa 0b       	sbc	r26, r26
   1a204:	bb 0b       	sbc	r27, r27
   1a206:	bc 01       	movw	r22, r24
   1a208:	cd 01       	movw	r24, r26
   1a20a:	68 0d       	add	r22, r8
   1a20c:	79 1d       	adc	r23, r9
   1a20e:	8a 1d       	adc	r24, r10
   1a210:	9b 1d       	adc	r25, r11
   1a212:	a3 01       	movw	r20, r6
   1a214:	92 01       	movw	r18, r4
   1a216:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
   1a21a:	26 1a       	sub	r2, r22
   1a21c:	37 0a       	sbc	r3, r23
   1a21e:	f7 01       	movw	r30, r14
   1a220:	e0 0f       	add	r30, r16
   1a222:	f1 1f       	adc	r31, r17
   1a224:	0d 5f       	subi	r16, 0xFD	; 253
   1a226:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a228:	c6 01       	movw	r24, r12
   1a22a:	02 96       	adiw	r24, 0x02	; 2
   1a22c:	82 15       	cp	r24, r2
   1a22e:	93 05       	cpc	r25, r3
   1a230:	84 f4       	brge	.+32     	; 0x1a252 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a232:	8f ed       	ldi	r24, 0xDF	; 223
   1a234:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a236:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a238:	d2 82       	std	Z+2, r13	; 0x02
   1a23a:	f7 01       	movw	r30, r14
   1a23c:	e0 0f       	add	r30, r16
   1a23e:	f1 1f       	adc	r31, r17
   1a240:	cf 01       	movw	r24, r30
   1a242:	8e 19       	sub	r24, r14
   1a244:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a246:	29 91       	ld	r18, Y+
   1a248:	22 23       	and	r18, r18
   1a24a:	09 f4       	brne	.+2      	; 0x1a24e <lif_ascii_string_to_e010+0xb0>
   1a24c:	5b c0       	rjmp	.+182    	; 0x1a304 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a24e:	21 93       	st	Z+, r18
   1a250:	f7 cf       	rjmp	.-18     	; 0x1a240 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a252:	8f ec       	ldi	r24, 0xCF	; 207
   1a254:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a256:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a258:	d2 82       	std	Z+2, r13	; 0x02
   1a25a:	d7 01       	movw	r26, r14
   1a25c:	a0 0f       	add	r26, r16
   1a25e:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a260:	fe 01       	movw	r30, r28
   1a262:	81 91       	ld	r24, Z+
   1a264:	81 11       	cpse	r24, r1
   1a266:	0e c0       	rjmp	.+28     	; 0x1a284 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a268:	c8 01       	movw	r24, r16
   1a26a:	01 2e       	mov	r0, r17
   1a26c:	00 0c       	add	r0, r0
   1a26e:	aa 0b       	sbc	r26, r26
   1a270:	bb 0b       	sbc	r27, r27
   1a272:	bc 01       	movw	r22, r24
   1a274:	cd 01       	movw	r24, r26
   1a276:	68 0d       	add	r22, r8
   1a278:	79 1d       	adc	r23, r9
   1a27a:	8a 1d       	adc	r24, r10
   1a27c:	9b 1d       	adc	r25, r11
   1a27e:	61 11       	cpse	r22, r1
   1a280:	09 c0       	rjmp	.+18     	; 0x1a294 <lif_ascii_string_to_e010+0xf6>
   1a282:	21 c0       	rjmp	.+66     	; 0x1a2c6 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a284:	02 15       	cp	r16, r2
   1a286:	13 05       	cpc	r17, r3
   1a288:	7c f7       	brge	.-34     	; 0x1a268 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a28a:	0f 5f       	subi	r16, 0xFF	; 255
   1a28c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a28e:	8d 93       	st	X+, r24
   1a290:	ef 01       	movw	r28, r30
   1a292:	e6 cf       	rjmp	.-52     	; 0x1a260 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a294:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a298:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a29c:	32 ff       	sbrs	r19, 2
   1a29e:	30 c0       	rjmp	.+96     	; 0x1a300 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a2a0:	20 e0       	ldi	r18, 0x00	; 0
   1a2a2:	31 e0       	ldi	r19, 0x01	; 1
   1a2a4:	40 e0       	ldi	r20, 0x00	; 0
   1a2a6:	50 e0       	ldi	r21, 0x00	; 0
   1a2a8:	0e 94 38 e1 	call	0x1c270	; 0x1c270 <__divmodsi4>
   1a2ac:	ed b7       	in	r30, 0x3d	; 61
   1a2ae:	fe b7       	in	r31, 0x3e	; 62
   1a2b0:	75 83       	std	Z+5, r23	; 0x05
   1a2b2:	64 83       	std	Z+4, r22	; 0x04
   1a2b4:	80 e6       	ldi	r24, 0x60	; 96
   1a2b6:	95 e3       	ldi	r25, 0x35	; 53
   1a2b8:	a0 e0       	ldi	r26, 0x00	; 0
   1a2ba:	81 83       	std	Z+1, r24	; 0x01
   1a2bc:	92 83       	std	Z+2, r25	; 0x02
   1a2be:	a3 83       	std	Z+3, r26	; 0x03
   1a2c0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a2c4:	1d c0       	rjmp	.+58     	; 0x1a300 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a2c6:	fe 01       	movw	r30, r28
   1a2c8:	01 90       	ld	r0, Z+
   1a2ca:	00 20       	and	r0, r0
   1a2cc:	e9 f7       	brne	.-6      	; 0x1a2c8 <lif_ascii_string_to_e010+0x12a>
   1a2ce:	31 97       	sbiw	r30, 0x01	; 1
   1a2d0:	9f 01       	movw	r18, r30
   1a2d2:	2c 1b       	sub	r18, r28
   1a2d4:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a2d6:	d7 01       	movw	r26, r14
   1a2d8:	a0 0f       	add	r26, r16
   1a2da:	b1 1f       	adc	r27, r17
   1a2dc:	8f e6       	ldi	r24, 0x6F	; 111
   1a2de:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a2e0:	fd 01       	movw	r30, r26
   1a2e2:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a2e4:	32 83       	std	Z+2, r19	; 0x02
   1a2e6:	0d 5f       	subi	r16, 0xFD	; 253
   1a2e8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a2ea:	f7 01       	movw	r30, r14
   1a2ec:	e0 0f       	add	r30, r16
   1a2ee:	f1 1f       	adc	r31, r17
   1a2f0:	cf 01       	movw	r24, r30
   1a2f2:	8e 19       	sub	r24, r14
   1a2f4:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a2f6:	29 91       	ld	r18, Y+
   1a2f8:	22 23       	and	r18, r18
   1a2fa:	21 f0       	breq	.+8      	; 0x1a304 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a2fc:	21 93       	st	Z+, r18
   1a2fe:	f8 cf       	rjmp	.-16     	; 0x1a2f0 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a300:	8f ef       	ldi	r24, 0xFF	; 255
   1a302:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a304:	cd b7       	in	r28, 0x3d	; 61
   1a306:	de b7       	in	r29, 0x3e	; 62
   1a308:	25 96       	adiw	r28, 0x05	; 5
   1a30a:	e2 e1       	ldi	r30, 0x12	; 18
   1a30c:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0001a310 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a310:	ad e0       	ldi	r26, 0x0D	; 13
   1a312:	b3 e0       	ldi	r27, 0x03	; 3
   1a314:	ee e8       	ldi	r30, 0x8E	; 142
   1a316:	f1 ed       	ldi	r31, 0xD1	; 209
   1a318:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   1a31c:	5c 01       	movw	r10, r24
   1a31e:	2a 01       	movw	r4, r20
   1a320:	3b 01       	movw	r6, r22
   1a322:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a324:	6e ef       	ldi	r22, 0xFE	; 254
   1a326:	78 e0       	ldi	r23, 0x08	; 8
   1a328:	0e 94 2d bd 	call	0x17a5a	; 0x17a5a <lif_open>
   1a32c:	c7 5f       	subi	r28, 0xF7	; 247
   1a32e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a330:	99 83       	std	Y+1, r25	; 0x01
   1a332:	88 83       	st	Y, r24
   1a334:	c9 50       	subi	r28, 0x09	; 9
   1a336:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a338:	89 2b       	or	r24, r25
   1a33a:	09 f4       	brne	.+2      	; 0x1a33e <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a33c:	63 c0       	rjmp	.+198    	; 0x1a404 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a33e:	81 2c       	mov	r8, r1
   1a340:	91 2c       	mov	r9, r1
   1a342:	c1 2c       	mov	r12, r1
   1a344:	d1 2c       	mov	r13, r1
   1a346:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a348:	82 e5       	ldi	r24, 0x52	; 82
   1a34a:	95 e3       	ldi	r25, 0x35	; 53
   1a34c:	9c 01       	movw	r18, r24
   1a34e:	40 e0       	ldi	r20, 0x00	; 0
   1a350:	c5 5f       	subi	r28, 0xF5	; 245
   1a352:	dc 4f       	sbci	r29, 0xFC	; 252
   1a354:	28 83       	st	Y, r18
   1a356:	39 83       	std	Y+1, r19	; 0x01
   1a358:	4a 83       	std	Y+2, r20	; 0x02
   1a35a:	cb 50       	subi	r28, 0x0B	; 11
   1a35c:	d3 40       	sbci	r29, 0x03	; 3
   1a35e:	14 c0       	rjmp	.+40     	; 0x1a388 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a360:	c1 01       	movw	r24, r2
   1a362:	03 2c       	mov	r0, r3
   1a364:	00 0c       	add	r0, r0
   1a366:	aa 0b       	sbc	r26, r26
   1a368:	bb 0b       	sbc	r27, r27
   1a36a:	48 0e       	add	r4, r24
   1a36c:	59 1e       	adc	r5, r25
   1a36e:	6a 1e       	adc	r6, r26
   1a370:	7b 1e       	adc	r7, r27
        bytes += size;
   1a372:	c8 0e       	add	r12, r24
   1a374:	d9 1e       	adc	r13, r25
   1a376:	ea 1e       	adc	r14, r26
   1a378:	fb 1e       	adc	r15, r27
        count += size;
   1a37a:	82 0c       	add	r8, r2
   1a37c:	93 1c       	adc	r9, r3

        if(count > 256)
   1a37e:	31 e0       	ldi	r19, 0x01	; 1
   1a380:	83 16       	cp	r8, r19
   1a382:	93 06       	cpc	r9, r19
   1a384:	0c f0       	brlt	.+2      	; 0x1a388 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a386:	43 c0       	rjmp	.+134    	; 0x1a40e <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a388:	c7 5f       	subi	r28, 0xF7	; 247
   1a38a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a38c:	48 81       	ld	r20, Y
   1a38e:	59 81       	ldd	r21, Y+1	; 0x01
   1a390:	c9 50       	subi	r28, 0x09	; 9
   1a392:	d3 40       	sbci	r29, 0x03	; 3
   1a394:	6d ef       	ldi	r22, 0xFD	; 253
   1a396:	70 e0       	ldi	r23, 0x00	; 0
   1a398:	ce 01       	movw	r24, r28
   1a39a:	88 5f       	subi	r24, 0xF8	; 248
   1a39c:	9d 4f       	sbci	r25, 0xFD	; 253
   1a39e:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <fgets>
   1a3a2:	89 2b       	or	r24, r25
   1a3a4:	09 f4       	brne	.+2      	; 0x1a3a8 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a3a6:	4b c0       	rjmp	.+150    	; 0x1a43e <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a3a8:	ce 01       	movw	r24, r28
   1a3aa:	88 5f       	subi	r24, 0xF8	; 248
   1a3ac:	9d 4f       	sbci	r25, 0xFD	; 253
   1a3ae:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a3b2:	64 e5       	ldi	r22, 0x54	; 84
   1a3b4:	76 e1       	ldi	r23, 0x16	; 22
   1a3b6:	ce 01       	movw	r24, r28
   1a3b8:	88 5f       	subi	r24, 0xF8	; 248
   1a3ba:	9d 4f       	sbci	r25, 0xFD	; 253
   1a3bc:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a3c0:	9e 01       	movw	r18, r28
   1a3c2:	28 5f       	subi	r18, 0xF8	; 248
   1a3c4:	3f 4f       	sbci	r19, 0xFF	; 255
   1a3c6:	b3 01       	movw	r22, r6
   1a3c8:	a2 01       	movw	r20, r4
   1a3ca:	ce 01       	movw	r24, r28
   1a3cc:	88 5f       	subi	r24, 0xF8	; 248
   1a3ce:	9d 4f       	sbci	r25, 0xFD	; 253
   1a3d0:	e6 de       	rcall	.-564    	; 0x1a19e <lif_ascii_string_to_e010>
   1a3d2:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a3d4:	a1 14       	cp	r10, r1
   1a3d6:	b1 04       	cpc	r11, r1
   1a3d8:	19 f2       	breq	.-122    	; 0x1a360 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a3da:	8c 01       	movw	r16, r24
   1a3dc:	a3 01       	movw	r20, r6
   1a3de:	92 01       	movw	r18, r4
   1a3e0:	be 01       	movw	r22, r28
   1a3e2:	68 5f       	subi	r22, 0xF8	; 248
   1a3e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3e6:	c5 01       	movw	r24, r10
   1a3e8:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
            if(len < size)
   1a3ec:	82 15       	cp	r24, r2
   1a3ee:	93 05       	cpc	r25, r3
   1a3f0:	0c f0       	brlt	.+2      	; 0x1a3f4 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a3f2:	b6 cf       	rjmp	.-148    	; 0x1a360 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a3f4:	c7 5f       	subi	r28, 0xF7	; 247
   1a3f6:	dc 4f       	sbci	r29, 0xFC	; 252
   1a3f8:	88 81       	ld	r24, Y
   1a3fa:	99 81       	ldd	r25, Y+1	; 0x01
   1a3fc:	c9 50       	subi	r28, 0x09	; 9
   1a3fe:	d3 40       	sbci	r29, 0x03	; 3
   1a400:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
                return(-1);
   1a404:	6f ef       	ldi	r22, 0xFF	; 255
   1a406:	7f ef       	ldi	r23, 0xFF	; 255
   1a408:	8f ef       	ldi	r24, 0xFF	; 255
   1a40a:	9f ef       	ldi	r25, 0xFF	; 255
   1a40c:	84 c0       	rjmp	.+264    	; 0x1a516 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a40e:	a1 14       	cp	r10, r1
   1a410:	b1 04       	cpc	r11, r1
   1a412:	91 f0       	breq	.+36     	; 0x1a438 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a414:	ed b7       	in	r30, 0x3d	; 61
   1a416:	fe b7       	in	r31, 0x3e	; 62
   1a418:	c4 82       	std	Z+4, r12	; 0x04
   1a41a:	d5 82       	std	Z+5, r13	; 0x05
   1a41c:	e6 82       	std	Z+6, r14	; 0x06
   1a41e:	f7 82       	std	Z+7, r15	; 0x07
   1a420:	c5 5f       	subi	r28, 0xF5	; 245
   1a422:	dc 4f       	sbci	r29, 0xFC	; 252
   1a424:	28 81       	ld	r18, Y
   1a426:	39 81       	ldd	r19, Y+1	; 0x01
   1a428:	4a 81       	ldd	r20, Y+2	; 0x02
   1a42a:	cb 50       	subi	r28, 0x0B	; 11
   1a42c:	d3 40       	sbci	r29, 0x03	; 3
   1a42e:	21 83       	std	Z+1, r18	; 0x01
   1a430:	32 83       	std	Z+2, r19	; 0x02
   1a432:	43 83       	std	Z+3, r20	; 0x03
   1a434:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a438:	81 2c       	mov	r8, r1
   1a43a:	91 2c       	mov	r9, r1
   1a43c:	a5 cf       	rjmp	.-182    	; 0x1a388 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a43e:	c7 5f       	subi	r28, 0xF7	; 247
   1a440:	dc 4f       	sbci	r29, 0xFC	; 252
   1a442:	88 81       	ld	r24, Y
   1a444:	99 81       	ldd	r25, Y+1	; 0x01
   1a446:	c9 50       	subi	r28, 0x09	; 9
   1a448:	d3 40       	sbci	r29, 0x03	; 3
   1a44a:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>

// Write EOF
    str[0] = 0;
   1a44e:	c8 5f       	subi	r28, 0xF8	; 248
   1a450:	dd 4f       	sbci	r29, 0xFD	; 253
   1a452:	18 82       	st	Y, r1
   1a454:	c8 50       	subi	r28, 0x08	; 8
   1a456:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a458:	9e 01       	movw	r18, r28
   1a45a:	28 5f       	subi	r18, 0xF8	; 248
   1a45c:	3f 4f       	sbci	r19, 0xFF	; 255
   1a45e:	b3 01       	movw	r22, r6
   1a460:	a2 01       	movw	r20, r4
   1a462:	ce 01       	movw	r24, r28
   1a464:	88 5f       	subi	r24, 0xF8	; 248
   1a466:	9d 4f       	sbci	r25, 0xFD	; 253
   1a468:	9a de       	rcall	.-716    	; 0x1a19e <lif_ascii_string_to_e010>
   1a46a:	4c 01       	movw	r8, r24

    if(LIF)
   1a46c:	a1 14       	cp	r10, r1
   1a46e:	b1 04       	cpc	r11, r1
   1a470:	d1 f4       	brne	.+52     	; 0x1a4a6 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a472:	c4 01       	movw	r24, r8
   1a474:	09 2c       	mov	r0, r9
   1a476:	00 0c       	add	r0, r0
   1a478:	aa 0b       	sbc	r26, r26
   1a47a:	bb 0b       	sbc	r27, r27
   1a47c:	c8 0e       	add	r12, r24
   1a47e:	d9 1e       	adc	r13, r25
   1a480:	ea 1e       	adc	r14, r26
   1a482:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a484:	12 01       	movw	r2, r4
   1a486:	23 01       	movw	r4, r6
   1a488:	28 0e       	add	r2, r24
   1a48a:	39 1e       	adc	r3, r25
   1a48c:	4a 1e       	adc	r4, r26
   1a48e:	5b 1e       	adc	r5, r27
   1a490:	ae 01       	movw	r20, r28
   1a492:	48 5f       	subi	r20, 0xF8	; 248
   1a494:	5f 4f       	sbci	r21, 0xFF	; 255
   1a496:	c2 01       	movw	r24, r4
   1a498:	b1 01       	movw	r22, r2
   1a49a:	26 de       	rcall	.-948    	; 0x1a0e8 <lif_e010_pad_sector>
   1a49c:	3c 01       	movw	r6, r24
    if(LIF)
   1a49e:	a1 14       	cp	r10, r1
   1a4a0:	b1 04       	cpc	r11, r1
   1a4a2:	e1 f4       	brne	.+56     	; 0x1a4dc <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a4a4:	36 c0       	rjmp	.+108    	; 0x1a512 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a4a6:	ed b7       	in	r30, 0x3d	; 61
   1a4a8:	fe b7       	in	r31, 0x3e	; 62
   1a4aa:	c4 82       	std	Z+4, r12	; 0x04
   1a4ac:	d5 82       	std	Z+5, r13	; 0x05
   1a4ae:	e6 82       	std	Z+6, r14	; 0x06
   1a4b0:	f7 82       	std	Z+7, r15	; 0x07
   1a4b2:	84 e4       	ldi	r24, 0x44	; 68
   1a4b4:	95 e3       	ldi	r25, 0x35	; 53
   1a4b6:	a0 e0       	ldi	r26, 0x00	; 0
   1a4b8:	81 83       	std	Z+1, r24	; 0x01
   1a4ba:	92 83       	std	Z+2, r25	; 0x02
   1a4bc:	a3 83       	std	Z+3, r26	; 0x03
   1a4be:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a4c2:	84 01       	movw	r16, r8
   1a4c4:	a3 01       	movw	r20, r6
   1a4c6:	92 01       	movw	r18, r4
   1a4c8:	be 01       	movw	r22, r28
   1a4ca:	68 5f       	subi	r22, 0xF8	; 248
   1a4cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4ce:	c5 01       	movw	r24, r10
   1a4d0:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
        if(len < size)
   1a4d4:	88 15       	cp	r24, r8
   1a4d6:	99 05       	cpc	r25, r9
   1a4d8:	64 f6       	brge	.-104    	; 0x1a472 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a4da:	94 cf       	rjmp	.-216    	; 0x1a404 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a4dc:	8c 01       	movw	r16, r24
   1a4de:	a2 01       	movw	r20, r4
   1a4e0:	91 01       	movw	r18, r2
   1a4e2:	be 01       	movw	r22, r28
   1a4e4:	68 5f       	subi	r22, 0xF8	; 248
   1a4e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4e8:	c5 01       	movw	r24, r10
   1a4ea:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
        if(len < size)
   1a4ee:	86 15       	cp	r24, r6
   1a4f0:	97 05       	cpc	r25, r7
   1a4f2:	0c f4       	brge	.+2      	; 0x1a4f6 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a4f4:	87 cf       	rjmp	.-242    	; 0x1a404 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a4f6:	ed b7       	in	r30, 0x3d	; 61
   1a4f8:	fe b7       	in	r31, 0x3e	; 62
   1a4fa:	c4 82       	std	Z+4, r12	; 0x04
   1a4fc:	d5 82       	std	Z+5, r13	; 0x05
   1a4fe:	e6 82       	std	Z+6, r14	; 0x06
   1a500:	f7 82       	std	Z+7, r15	; 0x07
   1a502:	86 e3       	ldi	r24, 0x36	; 54
   1a504:	95 e3       	ldi	r25, 0x35	; 53
   1a506:	a0 e0       	ldi	r26, 0x00	; 0
   1a508:	81 83       	std	Z+1, r24	; 0x01
   1a50a:	92 83       	std	Z+2, r25	; 0x02
   1a50c:	a3 83       	std	Z+3, r26	; 0x03
   1a50e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    return(bytes);
   1a512:	b6 01       	movw	r22, r12
   1a514:	c7 01       	movw	r24, r14
}
   1a516:	c3 5f       	subi	r28, 0xF3	; 243
   1a518:	dc 4f       	sbci	r29, 0xFC	; 252
   1a51a:	e2 e1       	ldi	r30, 0x12	; 18
   1a51c:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0001a520 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a520:	ab e3       	ldi	r26, 0x3B	; 59
   1a522:	b0 e0       	ldi	r27, 0x00	; 0
   1a524:	e6 e9       	ldi	r30, 0x96	; 150
   1a526:	f2 ed       	ldi	r31, 0xD2	; 210
   1a528:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   1a52c:	6c 01       	movw	r12, r24
   1a52e:	1b 01       	movw	r2, r22
   1a530:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a532:	fc 01       	movw	r30, r24
   1a534:	80 81       	ld	r24, Z
   1a536:	81 11       	cpse	r24, r1
   1a538:	03 c0       	rjmp	.+6      	; 0x1a540 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a53a:	83 e0       	ldi	r24, 0x03	; 3
   1a53c:	95 e3       	ldi	r25, 0x35	; 53
   1a53e:	1a c0       	rjmp	.+52     	; 0x1a574 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a540:	fb 01       	movw	r30, r22
   1a542:	80 81       	ld	r24, Z
   1a544:	81 11       	cpse	r24, r1
   1a546:	03 c0       	rjmp	.+6      	; 0x1a54e <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a548:	85 ed       	ldi	r24, 0xD5	; 213
   1a54a:	94 e3       	ldi	r25, 0x34	; 52
   1a54c:	13 c0       	rjmp	.+38     	; 0x1a574 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a54e:	fa 01       	movw	r30, r20
   1a550:	80 81       	ld	r24, Z
   1a552:	81 11       	cpse	r24, r1
   1a554:	03 c0       	rjmp	.+6      	; 0x1a55c <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a556:	86 ea       	ldi	r24, 0xA6	; 166
   1a558:	94 e3       	ldi	r25, 0x34	; 52
   1a55a:	0c c0       	rjmp	.+24     	; 0x1a574 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a55c:	be 01       	movw	r22, r28
   1a55e:	66 5f       	subi	r22, 0xF6	; 246
   1a560:	7f 4f       	sbci	r23, 0xFF	; 255
   1a562:	ca 01       	movw	r24, r20
   1a564:	0e 94 57 bd 	call	0x17aae	; 0x17aae <lif_stat>
   1a568:	9b af       	std	Y+59, r25	; 0x3b
   1a56a:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a56c:	89 2b       	or	r24, r25
   1a56e:	59 f4       	brne	.+22     	; 0x1a586 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a570:	86 e7       	ldi	r24, 0x76	; 118
   1a572:	94 e3       	ldi	r25, 0x34	; 52
   1a574:	a0 e0       	ldi	r26, 0x00	; 0
   1a576:	ed b7       	in	r30, 0x3d	; 61
   1a578:	fe b7       	in	r31, 0x3e	; 62
   1a57a:	81 83       	std	Z+1, r24	; 0x01
   1a57c:	92 83       	std	Z+2, r25	; 0x02
   1a57e:	a3 83       	std	Z+3, r26	; 0x03
   1a580:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a584:	01 c1       	rjmp	.+514    	; 0x1a788 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a586:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a58a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a58e:	92 ff       	sbrs	r25, 2
   1a590:	10 c0       	rjmp	.+32     	; 0x1a5b2 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a592:	ed b7       	in	r30, 0x3d	; 61
   1a594:	fe b7       	in	r31, 0x3e	; 62
   1a596:	f1 86       	std	Z+9, r15	; 0x09
   1a598:	e0 86       	std	Z+8, r14	; 0x08
   1a59a:	37 82       	std	Z+7, r3	; 0x07
   1a59c:	26 82       	std	Z+6, r2	; 0x06
   1a59e:	d5 82       	std	Z+5, r13	; 0x05
   1a5a0:	c4 82       	std	Z+4, r12	; 0x04
   1a5a2:	87 e4       	ldi	r24, 0x47	; 71
   1a5a4:	94 e3       	ldi	r25, 0x34	; 52
   1a5a6:	a0 e0       	ldi	r26, 0x00	; 0
   1a5a8:	81 83       	std	Z+1, r24	; 0x01
   1a5aa:	92 83       	std	Z+2, r25	; 0x02
   1a5ac:	a3 83       	std	Z+3, r26	; 0x03
   1a5ae:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a5b2:	97 01       	movw	r18, r14
   1a5b4:	40 e0       	ldi	r20, 0x00	; 0
   1a5b6:	50 e0       	ldi	r21, 0x00	; 0
   1a5b8:	ba 01       	movw	r22, r20
   1a5ba:	80 e0       	ldi	r24, 0x00	; 0
   1a5bc:	90 e0       	ldi	r25, 0x00	; 0
   1a5be:	a8 de       	rcall	.-688    	; 0x1a310 <lif_add_ascii_file_as_e010_wrapper>
   1a5c0:	4b 01       	movw	r8, r22
   1a5c2:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a5c4:	47 2e       	mov	r4, r23
   1a5c6:	58 2e       	mov	r5, r24
   1a5c8:	69 2e       	mov	r6, r25
   1a5ca:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a5cc:	66 23       	and	r22, r22
   1a5ce:	29 f0       	breq	.+10     	; 0x1a5da <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a5d0:	ff ef       	ldi	r31, 0xFF	; 255
   1a5d2:	4f 1a       	sub	r4, r31
   1a5d4:	5f 0a       	sbc	r5, r31
   1a5d6:	6f 0a       	sbc	r6, r31
   1a5d8:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a5da:	61 e0       	ldi	r22, 0x01	; 1
   1a5dc:	79 e0       	ldi	r23, 0x09	; 9
   1a5de:	c6 01       	movw	r24, r12
   1a5e0:	49 da       	rcall	.-2926   	; 0x19a74 <lif_open_volume>
   1a5e2:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a5e4:	00 97       	sbiw	r24, 0x00	; 0
   1a5e6:	09 f4       	brne	.+2      	; 0x1a5ea <lif_add_ascii_file_as_e010+0xca>
   1a5e8:	cf c0       	rjmp	.+414    	; 0x1a788 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a5ea:	b3 01       	movw	r22, r6
   1a5ec:	a2 01       	movw	r20, r4
   1a5ee:	e2 d8       	rcall	.-3644   	; 0x197b4 <lif_newdir>
   1a5f0:	3c 01       	movw	r6, r24
    if(index == -1)
   1a5f2:	8f ef       	ldi	r24, 0xFF	; 255
   1a5f4:	68 16       	cp	r6, r24
   1a5f6:	78 06       	cpc	r7, r24
   1a5f8:	79 f4       	brne	.+30     	; 0x1a618 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a5fa:	ed b7       	in	r30, 0x3d	; 61
   1a5fc:	fe b7       	in	r31, 0x3e	; 62
   1a5fe:	f7 82       	std	Z+7, r15	; 0x07
   1a600:	e6 82       	std	Z+6, r14	; 0x06
   1a602:	d5 82       	std	Z+5, r13	; 0x05
   1a604:	c4 82       	std	Z+4, r12	; 0x04
   1a606:	87 e1       	ldi	r24, 0x17	; 23
   1a608:	94 e3       	ldi	r25, 0x34	; 52
   1a60a:	a0 e0       	ldi	r26, 0x00	; 0
   1a60c:	81 83       	std	Z+1, r24	; 0x01
   1a60e:	92 83       	std	Z+2, r25	; 0x02
   1a610:	a3 83       	std	Z+3, r26	; 0x03
   1a612:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a616:	a0 c0       	rjmp	.+320    	; 0x1a758 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a618:	68 01       	movw	r12, r16
   1a61a:	ff e4       	ldi	r31, 0x4F	; 79
   1a61c:	cf 0e       	add	r12, r31
   1a61e:	d1 1c       	adc	r13, r1
   1a620:	4a e0       	ldi	r20, 0x0A	; 10
   1a622:	50 e0       	ldi	r21, 0x00	; 0
   1a624:	b1 01       	movw	r22, r2
   1a626:	c6 01       	movw	r24, r12
   1a628:	0e 94 06 bf 	call	0x17e0c	; 0x17e0c <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a62c:	80 e1       	ldi	r24, 0x10	; 16
   1a62e:	90 ee       	ldi	r25, 0xE0	; 224
   1a630:	f8 01       	movw	r30, r16
   1a632:	e6 5a       	subi	r30, 0xA6	; 166
   1a634:	ff 4f       	sbci	r31, 0xFF	; 255
   1a636:	91 83       	std	Z+1, r25	; 0x01
   1a638:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a63a:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a63c:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a63e:	60 a5       	ldd	r22, Z+40	; 0x28
   1a640:	71 a5       	ldd	r23, Z+41	; 0x29
   1a642:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a644:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a646:	a8 01       	movw	r20, r16
   1a648:	4c 59       	subi	r20, 0x9C	; 156
   1a64a:	5f 4f       	sbci	r21, 0xFF	; 255
   1a64c:	0e 94 2b c1 	call	0x18256	; 0x18256 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a650:	81 e0       	ldi	r24, 0x01	; 1
   1a652:	90 e8       	ldi	r25, 0x80	; 128
   1a654:	f8 01       	movw	r30, r16
   1a656:	e6 59       	subi	r30, 0x96	; 150
   1a658:	ff 4f       	sbci	r31, 0xFF	; 255
   1a65a:	91 83       	std	Z+1, r25	; 0x01
   1a65c:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a65e:	32 96       	adiw	r30, 0x02	; 2
   1a660:	91 82       	std	Z+1, r9	; 0x01
   1a662:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a664:	80 e0       	ldi	r24, 0x00	; 0
   1a666:	91 e0       	ldi	r25, 0x01	; 1
   1a668:	32 96       	adiw	r30, 0x02	; 2
   1a66a:	91 83       	std	Z+1, r25	; 0x01
   1a66c:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a66e:	58 01       	movw	r10, r16
   1a670:	fc e5       	ldi	r31, 0x5C	; 92
   1a672:	af 0e       	add	r10, r31
   1a674:	b1 1c       	adc	r11, r1
   1a676:	f5 01       	movw	r30, r10
   1a678:	80 81       	ld	r24, Z
   1a67a:	91 81       	ldd	r25, Z+1	; 0x01
   1a67c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a67e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a680:	22 24       	eor	r2, r2
   1a682:	38 2e       	mov	r3, r24
   1a684:	49 2e       	mov	r4, r25
   1a686:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a688:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a68c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a690:	92 ff       	sbrs	r25, 2
   1a692:	05 c0       	rjmp	.+10     	; 0x1a69e <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a694:	66 e5       	ldi	r22, 0x56	; 86
   1a696:	76 e1       	ldi	r23, 0x16	; 22
   1a698:	c8 01       	movw	r24, r16
   1a69a:	0e 94 17 c2 	call	0x1842e	; 0x1842e <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a69e:	97 01       	movw	r18, r14
   1a6a0:	b2 01       	movw	r22, r4
   1a6a2:	a1 01       	movw	r20, r2
   1a6a4:	c8 01       	movw	r24, r16
   1a6a6:	34 de       	rcall	.-920    	; 0x1a310 <lif_add_ascii_file_as_e010_wrapper>
   1a6a8:	4b 01       	movw	r8, r22
   1a6aa:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a6ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a6b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a6b4:	92 ff       	sbrs	r25, 2
   1a6b6:	4a c0       	rjmp	.+148    	; 0x1a74c <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a6b8:	80 ef       	ldi	r24, 0xF0	; 240
   1a6ba:	93 e3       	ldi	r25, 0x33	; 51
   1a6bc:	a0 e0       	ldi	r26, 0x00	; 0
   1a6be:	ed b7       	in	r30, 0x3d	; 61
   1a6c0:	fe b7       	in	r31, 0x3e	; 62
   1a6c2:	81 83       	std	Z+1, r24	; 0x01
   1a6c4:	92 83       	std	Z+2, r25	; 0x02
   1a6c6:	a3 83       	std	Z+3, r26	; 0x03
   1a6c8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a6cc:	ed b7       	in	r30, 0x3d	; 61
   1a6ce:	fe b7       	in	r31, 0x3e	; 62
   1a6d0:	d5 82       	std	Z+5, r13	; 0x05
   1a6d2:	c4 82       	std	Z+4, r12	; 0x04
   1a6d4:	89 ed       	ldi	r24, 0xD9	; 217
   1a6d6:	93 e3       	ldi	r25, 0x33	; 51
   1a6d8:	a0 e0       	ldi	r26, 0x00	; 0
   1a6da:	81 83       	std	Z+1, r24	; 0x01
   1a6dc:	92 83       	std	Z+2, r25	; 0x02
   1a6de:	a3 83       	std	Z+3, r26	; 0x03
   1a6e0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a6e4:	ed b7       	in	r30, 0x3d	; 61
   1a6e6:	fe b7       	in	r31, 0x3e	; 62
   1a6e8:	75 82       	std	Z+5, r7	; 0x05
   1a6ea:	64 82       	std	Z+4, r6	; 0x04
   1a6ec:	82 ec       	ldi	r24, 0xC2	; 194
   1a6ee:	93 e3       	ldi	r25, 0x33	; 51
   1a6f0:	a0 e0       	ldi	r26, 0x00	; 0
   1a6f2:	81 83       	std	Z+1, r24	; 0x01
   1a6f4:	92 83       	std	Z+2, r25	; 0x02
   1a6f6:	a3 83       	std	Z+3, r26	; 0x03
   1a6f8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a6fc:	f5 01       	movw	r30, r10
   1a6fe:	80 81       	ld	r24, Z
   1a700:	91 81       	ldd	r25, Z+1	; 0x01
   1a702:	a2 81       	ldd	r26, Z+2	; 0x02
   1a704:	b3 81       	ldd	r27, Z+3	; 0x03
   1a706:	ed b7       	in	r30, 0x3d	; 61
   1a708:	fe b7       	in	r31, 0x3e	; 62
   1a70a:	84 83       	std	Z+4, r24	; 0x04
   1a70c:	95 83       	std	Z+5, r25	; 0x05
   1a70e:	a6 83       	std	Z+6, r26	; 0x06
   1a710:	b7 83       	std	Z+7, r27	; 0x07
   1a712:	89 ea       	ldi	r24, 0xA9	; 169
   1a714:	93 e3       	ldi	r25, 0x33	; 51
   1a716:	a0 e0       	ldi	r26, 0x00	; 0
   1a718:	81 83       	std	Z+1, r24	; 0x01
   1a71a:	92 83       	std	Z+2, r25	; 0x02
   1a71c:	a3 83       	std	Z+3, r26	; 0x03
   1a71e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a722:	f8 01       	movw	r30, r16
   1a724:	e0 5a       	subi	r30, 0xA0	; 160
   1a726:	ff 4f       	sbci	r31, 0xFF	; 255
   1a728:	80 81       	ld	r24, Z
   1a72a:	91 81       	ldd	r25, Z+1	; 0x01
   1a72c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a72e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a730:	ed b7       	in	r30, 0x3d	; 61
   1a732:	fe b7       	in	r31, 0x3e	; 62
   1a734:	84 83       	std	Z+4, r24	; 0x04
   1a736:	95 83       	std	Z+5, r25	; 0x05
   1a738:	a6 83       	std	Z+6, r26	; 0x06
   1a73a:	b7 83       	std	Z+7, r27	; 0x07
   1a73c:	80 e9       	ldi	r24, 0x90	; 144
   1a73e:	93 e3       	ldi	r25, 0x33	; 51
   1a740:	a0 e0       	ldi	r26, 0x00	; 0
   1a742:	81 83       	std	Z+1, r24	; 0x01
   1a744:	92 83       	std	Z+2, r25	; 0x02
   1a746:	a3 83       	std	Z+3, r26	; 0x03
   1a748:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a74c:	b3 01       	movw	r22, r6
   1a74e:	c8 01       	movw	r24, r16
   1a750:	0e 94 72 c7 	call	0x18ee4	; 0x18ee4 <lif_writedirindex>
   1a754:	89 2b       	or	r24, r25
   1a756:	21 f4       	brne	.+8      	; 0x1a760 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a758:	c8 01       	movw	r24, r16
   1a75a:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1a75e:	14 c0       	rjmp	.+40     	; 0x1a788 <lif_add_ascii_file_as_e010+0x268>
   1a760:	c8 01       	movw	r24, r16
   1a762:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a766:	ed b7       	in	r30, 0x3d	; 61
   1a768:	fe b7       	in	r31, 0x3e	; 62
   1a76a:	84 82       	std	Z+4, r8	; 0x04
   1a76c:	95 82       	std	Z+5, r9	; 0x05
   1a76e:	e6 82       	std	Z+6, r14	; 0x06
   1a770:	f7 82       	std	Z+7, r15	; 0x07
   1a772:	82 e8       	ldi	r24, 0x82	; 130
   1a774:	93 e3       	ldi	r25, 0x33	; 51
   1a776:	a0 e0       	ldi	r26, 0x00	; 0
   1a778:	81 83       	std	Z+1, r24	; 0x01
   1a77a:	92 83       	std	Z+2, r25	; 0x02
   1a77c:	a3 83       	std	Z+3, r26	; 0x03
   1a77e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

// Return file size
    return(bytes);
   1a782:	b4 01       	movw	r22, r8
   1a784:	c7 01       	movw	r24, r14
   1a786:	04 c0       	rjmp	.+8      	; 0x1a790 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a788:	6f ef       	ldi	r22, 0xFF	; 255
   1a78a:	7f ef       	ldi	r23, 0xFF	; 255
   1a78c:	8f ef       	ldi	r24, 0xFF	; 255
   1a78e:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a790:	eb 96       	adiw	r28, 0x3b	; 59
   1a792:	e2 e1       	ldi	r30, 0x12	; 18
   1a794:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0001a798 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a798:	a7 e3       	ldi	r26, 0x37	; 55
   1a79a:	b2 e0       	ldi	r27, 0x02	; 2
   1a79c:	e2 ed       	ldi	r30, 0xD2	; 210
   1a79e:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7a0:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   1a7a4:	7c 01       	movw	r14, r24
   1a7a6:	8b 01       	movw	r16, r22
   1a7a8:	ca 5d       	subi	r28, 0xDA	; 218
   1a7aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7ac:	59 83       	std	Y+1, r21	; 0x01
   1a7ae:	48 83       	st	Y, r20
   1a7b0:	c6 52       	subi	r28, 0x26	; 38
   1a7b2:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a7b4:	62 e4       	ldi	r22, 0x42	; 66
   1a7b6:	73 e0       	ldi	r23, 0x03	; 3
   1a7b8:	5d d9       	rcall	.-3398   	; 0x19a74 <lif_open_volume>
   1a7ba:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a7bc:	00 97       	sbiw	r24, 0x00	; 0
   1a7be:	69 f4       	brne	.+26     	; 0x1a7da <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a7c0:	ed b7       	in	r30, 0x3d	; 61
   1a7c2:	fe b7       	in	r31, 0x3e	; 62
   1a7c4:	f5 82       	std	Z+5, r15	; 0x05
   1a7c6:	e4 82       	std	Z+4, r14	; 0x04
   1a7c8:	8a e6       	ldi	r24, 0x6A	; 106
   1a7ca:	93 e3       	ldi	r25, 0x33	; 51
   1a7cc:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ce:	81 83       	std	Z+1, r24	; 0x01
   1a7d0:	92 83       	std	Z+2, r25	; 0x02
   1a7d2:	a3 83       	std	Z+3, r26	; 0x03
   1a7d4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a7d8:	13 c0       	rjmp	.+38     	; 0x1a800 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a7da:	b8 01       	movw	r22, r16
   1a7dc:	20 dc       	rcall	.-1984   	; 0x1a01e <lif_find_file>
    if(index == -1)
   1a7de:	01 96       	adiw	r24, 0x01	; 1
   1a7e0:	91 f4       	brne	.+36     	; 0x1a806 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a7e2:	ed b7       	in	r30, 0x3d	; 61
   1a7e4:	fe b7       	in	r31, 0x3e	; 62
   1a7e6:	15 83       	std	Z+5, r17	; 0x05
   1a7e8:	04 83       	std	Z+4, r16	; 0x04
   1a7ea:	83 e5       	ldi	r24, 0x53	; 83
   1a7ec:	93 e3       	ldi	r25, 0x33	; 51
   1a7ee:	a0 e0       	ldi	r26, 0x00	; 0
   1a7f0:	81 83       	std	Z+1, r24	; 0x01
   1a7f2:	92 83       	std	Z+2, r25	; 0x02
   1a7f4:	a3 83       	std	Z+3, r26	; 0x03
   1a7f6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a7fa:	c6 01       	movw	r24, r12
   1a7fc:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a800:	80 e0       	ldi	r24, 0x00	; 0
   1a802:	90 e0       	ldi	r25, 0x00	; 0
   1a804:	73 c2       	rjmp	.+1254   	; 0x1acec <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a806:	f6 01       	movw	r30, r12
   1a808:	e6 5a       	subi	r30, 0xA6	; 166
   1a80a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a80c:	80 81       	ld	r24, Z
   1a80e:	91 81       	ldd	r25, Z+1	; 0x01
   1a810:	9c 01       	movw	r18, r24
   1a812:	2c 7f       	andi	r18, 0xFC	; 252
   1a814:	20 31       	cpi	r18, 0x10	; 16
   1a816:	30 4e       	sbci	r19, 0xE0	; 224
   1a818:	a9 f0       	breq	.+42     	; 0x1a844 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a81a:	ed b7       	in	r30, 0x3d	; 61
   1a81c:	fe b7       	in	r31, 0x3e	; 62
   1a81e:	97 83       	std	Z+7, r25	; 0x07
   1a820:	86 83       	std	Z+6, r24	; 0x06
   1a822:	ca 5d       	subi	r28, 0xDA	; 218
   1a824:	dd 4f       	sbci	r29, 0xFD	; 253
   1a826:	28 81       	ld	r18, Y
   1a828:	39 81       	ldd	r19, Y+1	; 0x01
   1a82a:	c6 52       	subi	r28, 0x26	; 38
   1a82c:	d2 40       	sbci	r29, 0x02	; 2
   1a82e:	35 83       	std	Z+5, r19	; 0x05
   1a830:	24 83       	std	Z+4, r18	; 0x04
   1a832:	8b e1       	ldi	r24, 0x1B	; 27
   1a834:	93 e3       	ldi	r25, 0x33	; 51
   1a836:	a0 e0       	ldi	r26, 0x00	; 0
   1a838:	81 83       	std	Z+1, r24	; 0x01
   1a83a:	92 83       	std	Z+2, r25	; 0x02
   1a83c:	a3 83       	std	Z+3, r26	; 0x03
   1a83e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1a842:	db cf       	rjmp	.-74     	; 0x1a7fa <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a844:	f6 01       	movw	r30, r12
   1a846:	e4 5a       	subi	r30, 0xA4	; 164
   1a848:	ff 4f       	sbci	r31, 0xFF	; 255
   1a84a:	80 80       	ld	r8, Z
   1a84c:	91 80       	ldd	r9, Z+1	; 0x01
   1a84e:	a2 80       	ldd	r10, Z+2	; 0x02
   1a850:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a852:	34 96       	adiw	r30, 0x04	; 4
   1a854:	80 81       	ld	r24, Z
   1a856:	91 81       	ldd	r25, Z+1	; 0x01
   1a858:	a2 81       	ldd	r26, Z+2	; 0x02
   1a85a:	b3 81       	ldd	r27, Z+3	; 0x03
   1a85c:	a5 01       	movw	r20, r10
   1a85e:	94 01       	movw	r18, r8
   1a860:	28 0f       	add	r18, r24
   1a862:	39 1f       	adc	r19, r25
   1a864:	4a 1f       	adc	r20, r26
   1a866:	5b 1f       	adc	r21, r27
   1a868:	c4 5d       	subi	r28, 0xD4	; 212
   1a86a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a86c:	28 83       	st	Y, r18
   1a86e:	39 83       	std	Y+1, r19	; 0x01
   1a870:	4a 83       	std	Y+2, r20	; 0x02
   1a872:	5b 83       	std	Y+3, r21	; 0x03
   1a874:	cc 52       	subi	r28, 0x2C	; 44
   1a876:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a878:	c6 01       	movw	r24, r12
   1a87a:	8c 59       	subi	r24, 0x9C	; 156
   1a87c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a87e:	0e 94 6d c1 	call	0x182da	; 0x182da <lif_lifbcd2time>
   1a882:	c8 5d       	subi	r28, 0xD8	; 216
   1a884:	dd 4f       	sbci	r29, 0xFD	; 253
   1a886:	68 83       	st	Y, r22
   1a888:	79 83       	std	Y+1, r23	; 0x01
   1a88a:	8a 83       	std	Y+2, r24	; 0x02
   1a88c:	9b 83       	std	Y+3, r25	; 0x03
   1a88e:	c8 52       	subi	r28, 0x28	; 40
   1a890:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a892:	ba 2d       	mov	r27, r10
   1a894:	a9 2d       	mov	r26, r9
   1a896:	98 2d       	mov	r25, r8
   1a898:	88 27       	eor	r24, r24
   1a89a:	c2 5e       	subi	r28, 0xE2	; 226
   1a89c:	dd 4f       	sbci	r29, 0xFD	; 253
   1a89e:	88 83       	st	Y, r24
   1a8a0:	99 83       	std	Y+1, r25	; 0x01
   1a8a2:	aa 83       	std	Y+2, r26	; 0x02
   1a8a4:	bb 83       	std	Y+3, r27	; 0x03
   1a8a6:	ce 51       	subi	r28, 0x1E	; 30
   1a8a8:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a8aa:	6c e0       	ldi	r22, 0x0C	; 12
   1a8ac:	79 e0       	ldi	r23, 0x09	; 9
   1a8ae:	ca 5d       	subi	r28, 0xDA	; 218
   1a8b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8b2:	88 81       	ld	r24, Y
   1a8b4:	99 81       	ldd	r25, Y+1	; 0x01
   1a8b6:	c6 52       	subi	r28, 0x26	; 38
   1a8b8:	d2 40       	sbci	r29, 0x02	; 2
   1a8ba:	0e 94 2d bd 	call	0x17a5a	; 0x17a5a <lif_open>
   1a8be:	cc 5d       	subi	r28, 0xDC	; 220
   1a8c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8c2:	99 83       	std	Y+1, r25	; 0x01
   1a8c4:	88 83       	st	Y, r24
   1a8c6:	c4 52       	subi	r28, 0x24	; 36
   1a8c8:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a8ca:	89 2b       	or	r24, r25
   1a8cc:	09 f4       	brne	.+2      	; 0x1a8d0 <lif_extract_e010_as_ascii+0x138>
   1a8ce:	95 cf       	rjmp	.-214    	; 0x1a7fa <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a8d0:	ca 5d       	subi	r28, 0xDA	; 218
   1a8d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8d4:	28 81       	ld	r18, Y
   1a8d6:	39 81       	ldd	r19, Y+1	; 0x01
   1a8d8:	c6 52       	subi	r28, 0x26	; 38
   1a8da:	d2 40       	sbci	r29, 0x02	; 2
   1a8dc:	ed b7       	in	r30, 0x3d	; 61
   1a8de:	fe b7       	in	r31, 0x3e	; 62
   1a8e0:	35 83       	std	Z+5, r19	; 0x05
   1a8e2:	24 83       	std	Z+4, r18	; 0x04
   1a8e4:	8b e0       	ldi	r24, 0x0B	; 11
   1a8e6:	93 e3       	ldi	r25, 0x33	; 51
   1a8e8:	a0 e0       	ldi	r26, 0x00	; 0
   1a8ea:	81 83       	std	Z+1, r24	; 0x01
   1a8ec:	92 83       	std	Z+2, r25	; 0x02
   1a8ee:	a3 83       	std	Z+3, r26	; 0x03
   1a8f0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    bytes = 0;
    wind = 0;
   1a8f4:	21 2c       	mov	r2, r1
   1a8f6:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1a8f8:	ce 5d       	subi	r28, 0xDE	; 222
   1a8fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8fc:	19 82       	std	Y+1, r1	; 0x01
   1a8fe:	18 82       	st	Y, r1
   1a900:	c2 52       	subi	r28, 0x22	; 34
   1a902:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1a904:	ee 24       	eor	r14, r14
   1a906:	e3 94       	inc	r14
   1a908:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1a90a:	41 2c       	mov	r4, r1
   1a90c:	51 2c       	mov	r5, r1
   1a90e:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1a910:	8a e4       	ldi	r24, 0x4A	; 74
   1a912:	92 e3       	ldi	r25, 0x32	; 50
   1a914:	9c 01       	movw	r18, r24
   1a916:	40 e0       	ldi	r20, 0x00	; 0
   1a918:	ce 5c       	subi	r28, 0xCE	; 206
   1a91a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a91c:	28 83       	st	Y, r18
   1a91e:	39 83       	std	Y+1, r19	; 0x01
   1a920:	4a 83       	std	Y+2, r20	; 0x02
   1a922:	c2 53       	subi	r28, 0x32	; 50
   1a924:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1a926:	88 e5       	ldi	r24, 0x58	; 88
   1a928:	92 e3       	ldi	r25, 0x32	; 50
   1a92a:	9c 01       	movw	r18, r24
   1a92c:	40 e0       	ldi	r20, 0x00	; 0
   1a92e:	cb 5c       	subi	r28, 0xCB	; 203
   1a930:	dd 4f       	sbci	r29, 0xFD	; 253
   1a932:	28 83       	st	Y, r18
   1a934:	39 83       	std	Y+1, r19	; 0x01
   1a936:	4a 83       	std	Y+2, r20	; 0x02
   1a938:	c5 53       	subi	r28, 0x35	; 53
   1a93a:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1a93c:	c2 5e       	subi	r28, 0xE2	; 226
   1a93e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a940:	28 81       	ld	r18, Y
   1a942:	39 81       	ldd	r19, Y+1	; 0x01
   1a944:	4a 81       	ldd	r20, Y+2	; 0x02
   1a946:	5b 81       	ldd	r21, Y+3	; 0x03
   1a948:	ce 51       	subi	r28, 0x1E	; 30
   1a94a:	d2 40       	sbci	r29, 0x02	; 2
   1a94c:	bb 27       	eor	r27, r27
   1a94e:	a5 2f       	mov	r26, r21
   1a950:	94 2f       	mov	r25, r20
   1a952:	83 2f       	mov	r24, r19
   1a954:	c4 5d       	subi	r28, 0xD4	; 212
   1a956:	dd 4f       	sbci	r29, 0xFD	; 253
   1a958:	28 81       	ld	r18, Y
   1a95a:	39 81       	ldd	r19, Y+1	; 0x01
   1a95c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a95e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a960:	cc 52       	subi	r28, 0x2C	; 44
   1a962:	d2 40       	sbci	r29, 0x02	; 2
   1a964:	28 17       	cp	r18, r24
   1a966:	39 07       	cpc	r19, r25
   1a968:	4a 07       	cpc	r20, r26
   1a96a:	5b 07       	cpc	r21, r27
   1a96c:	08 f4       	brcc	.+2      	; 0x1a970 <lif_extract_e010_as_ascii+0x1d8>
   1a96e:	51 c1       	rjmp	.+674    	; 0x1ac12 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1a970:	00 e0       	ldi	r16, 0x00	; 0
   1a972:	11 e0       	ldi	r17, 0x01	; 1
   1a974:	c2 5e       	subi	r28, 0xE2	; 226
   1a976:	dd 4f       	sbci	r29, 0xFD	; 253
   1a978:	28 81       	ld	r18, Y
   1a97a:	39 81       	ldd	r19, Y+1	; 0x01
   1a97c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a97e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a980:	ce 51       	subi	r28, 0x1E	; 30
   1a982:	d2 40       	sbci	r29, 0x02	; 2
   1a984:	be 01       	movw	r22, r28
   1a986:	60 5f       	subi	r22, 0xF0	; 240
   1a988:	7e 4f       	sbci	r23, 0xFE	; 254
   1a98a:	c6 01       	movw	r24, r12
   1a98c:	0e 94 b1 bd 	call	0x17b62	; 0x17b62 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1a990:	6f 3f       	cpi	r22, 0xFF	; 255
   1a992:	71 05       	cpc	r23, r1
   1a994:	09 f0       	breq	.+2      	; 0x1a998 <lif_extract_e010_as_ascii+0x200>
   1a996:	0c f4       	brge	.+2      	; 0x1a99a <lif_extract_e010_as_ascii+0x202>
   1a998:	3a c1       	rjmp	.+628    	; 0x1ac0e <lif_extract_e010_as_ascii+0x476>
   1a99a:	00 e0       	ldi	r16, 0x00	; 0
   1a99c:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1a99e:	ce 5d       	subi	r28, 0xDE	; 222
   1a9a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9a2:	88 81       	ld	r24, Y
   1a9a4:	99 81       	ldd	r25, Y+1	; 0x01
   1a9a6:	c2 52       	subi	r28, 0x22	; 34
   1a9a8:	d2 40       	sbci	r29, 0x02	; 2
   1a9aa:	89 2b       	or	r24, r25
   1a9ac:	09 f0       	breq	.+2      	; 0x1a9b0 <lif_extract_e010_as_ascii+0x218>
   1a9ae:	1b c1       	rjmp	.+566    	; 0x1abe6 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1a9b0:	e0 e1       	ldi	r30, 0x10	; 16
   1a9b2:	f1 e0       	ldi	r31, 0x01	; 1
   1a9b4:	ec 0f       	add	r30, r28
   1a9b6:	fd 1f       	adc	r31, r29
   1a9b8:	e0 0f       	add	r30, r16
   1a9ba:	f1 1f       	adc	r31, r17
   1a9bc:	80 81       	ld	r24, Z
   1a9be:	98 2f       	mov	r25, r24
   1a9c0:	9f 7e       	andi	r25, 0xEF	; 239
   1a9c2:	9f 3c       	cpi	r25, 0xCF	; 207
   1a9c4:	11 f0       	breq	.+4      	; 0x1a9ca <lif_extract_e010_as_ascii+0x232>
   1a9c6:	8f 36       	cpi	r24, 0x6F	; 111
   1a9c8:	c9 f5       	brne	.+114    	; 0x1aa3c <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1a9ca:	e0 e1       	ldi	r30, 0x10	; 16
   1a9cc:	f1 e0       	ldi	r31, 0x01	; 1
   1a9ce:	ec 0f       	add	r30, r28
   1a9d0:	fd 1f       	adc	r31, r29
   1a9d2:	e0 0f       	add	r30, r16
   1a9d4:	f1 1f       	adc	r31, r17
   1a9d6:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1a9d8:	f8 01       	movw	r30, r16
   1a9da:	32 96       	adiw	r30, 0x02	; 2
   1a9dc:	40 e1       	ldi	r20, 0x10	; 16
   1a9de:	51 e0       	ldi	r21, 0x01	; 1
   1a9e0:	4c 0f       	add	r20, r28
   1a9e2:	5d 1f       	adc	r21, r29
   1a9e4:	e4 0f       	add	r30, r20
   1a9e6:	f5 1f       	adc	r31, r21
   1a9e8:	0d 5f       	subi	r16, 0xFD	; 253
   1a9ea:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9ec:	80 81       	ld	r24, Z
   1a9ee:	b1 2c       	mov	r11, r1
   1a9f0:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1a9f2:	a1 14       	cp	r10, r1
   1a9f4:	b1 04       	cpc	r11, r1
   1a9f6:	09 f4       	brne	.+2      	; 0x1a9fa <lif_extract_e010_as_ascii+0x262>
   1a9f8:	ee c0       	rjmp	.+476    	; 0x1abd6 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1a9fa:	5f ef       	ldi	r21, 0xFF	; 255
   1a9fc:	a5 16       	cp	r10, r21
   1a9fe:	b1 04       	cpc	r11, r1
   1aa00:	09 f0       	breq	.+2      	; 0x1aa04 <lif_extract_e010_as_ascii+0x26c>
   1aa02:	7c f4       	brge	.+30     	; 0x1aa22 <lif_extract_e010_as_ascii+0x28a>
   1aa04:	c4 5e       	subi	r28, 0xE4	; 228
   1aa06:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa08:	19 82       	std	Y+1, r1	; 0x01
   1aa0a:	18 82       	st	Y, r1
   1aa0c:	cc 51       	subi	r28, 0x1C	; 28
   1aa0e:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1aa10:	c5 01       	movw	r24, r10
   1aa12:	01 97       	sbiw	r24, 0x01	; 1
   1aa14:	c0 5d       	subi	r28, 0xD0	; 208
   1aa16:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa18:	99 83       	std	Y+1, r25	; 0x01
   1aa1a:	88 83       	st	Y, r24
   1aa1c:	c0 53       	subi	r28, 0x30	; 48
   1aa1e:	d2 40       	sbci	r29, 0x02	; 2
   1aa20:	68 c0       	rjmp	.+208    	; 0x1aaf2 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1aa22:	ed b7       	in	r30, 0x3d	; 61
   1aa24:	fe b7       	in	r31, 0x3e	; 62
   1aa26:	b5 82       	std	Z+5, r11	; 0x05
   1aa28:	a4 82       	std	Z+4, r10	; 0x04
   1aa2a:	86 ed       	ldi	r24, 0xD6	; 214
   1aa2c:	92 e3       	ldi	r25, 0x32	; 50
   1aa2e:	a0 e0       	ldi	r26, 0x00	; 0
   1aa30:	81 83       	std	Z+1, r24	; 0x01
   1aa32:	92 83       	std	Z+2, r25	; 0x02
   1aa34:	a3 83       	std	Z+3, r26	; 0x03
   1aa36:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1aa3a:	1e c0       	rjmp	.+60     	; 0x1aa78 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1aa3c:	8f 3e       	cpi	r24, 0xEF	; 239
   1aa3e:	09 f4       	brne	.+2      	; 0x1aa42 <lif_extract_e010_as_ascii+0x2aa>
   1aa40:	d2 c0       	rjmp	.+420    	; 0x1abe6 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1aa42:	ed b7       	in	r30, 0x3d	; 61
   1aa44:	fe b7       	in	r31, 0x3e	; 62
   1aa46:	13 87       	std	Z+11, r17	; 0x0b
   1aa48:	02 87       	std	Z+10, r16	; 0x0a
   1aa4a:	c2 5e       	subi	r28, 0xE2	; 226
   1aa4c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa4e:	28 81       	ld	r18, Y
   1aa50:	39 81       	ldd	r19, Y+1	; 0x01
   1aa52:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa54:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa56:	ce 51       	subi	r28, 0x1E	; 30
   1aa58:	d2 40       	sbci	r29, 0x02	; 2
   1aa5a:	26 83       	std	Z+6, r18	; 0x06
   1aa5c:	37 83       	std	Z+7, r19	; 0x07
   1aa5e:	40 87       	std	Z+8, r20	; 0x08
   1aa60:	51 87       	std	Z+9, r21	; 0x09
   1aa62:	90 e0       	ldi	r25, 0x00	; 0
   1aa64:	95 83       	std	Z+5, r25	; 0x05
   1aa66:	84 83       	std	Z+4, r24	; 0x04
   1aa68:	80 e8       	ldi	r24, 0x80	; 128
   1aa6a:	92 e3       	ldi	r25, 0x32	; 50
   1aa6c:	a0 e0       	ldi	r26, 0x00	; 0
   1aa6e:	81 83       	std	Z+1, r24	; 0x01
   1aa70:	92 83       	std	Z+2, r25	; 0x02
   1aa72:	a3 83       	std	Z+3, r26	; 0x03
   1aa74:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                status = 0;
                done = 1;
   1aa78:	21 e0       	ldi	r18, 0x01	; 1
   1aa7a:	30 e0       	ldi	r19, 0x00	; 0
   1aa7c:	ce 5d       	subi	r28, 0xDE	; 222
   1aa7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa80:	39 83       	std	Y+1, r19	; 0x01
   1aa82:	28 83       	st	Y, r18
   1aa84:	c2 52       	subi	r28, 0x22	; 34
   1aa86:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1aa88:	e1 2c       	mov	r14, r1
   1aa8a:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1aa8c:	ac c0       	rjmp	.+344    	; 0x1abe6 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1aa8e:	0f 3f       	cpi	r16, 0xFF	; 255
   1aa90:	11 05       	cpc	r17, r1
   1aa92:	11 f0       	breq	.+4      	; 0x1aa98 <lif_extract_e010_as_ascii+0x300>
   1aa94:	0c f0       	brlt	.+2      	; 0x1aa98 <lif_extract_e010_as_ascii+0x300>
   1aa96:	a7 c0       	rjmp	.+334    	; 0x1abe6 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1aa98:	e0 e1       	ldi	r30, 0x10	; 16
   1aa9a:	f1 e0       	ldi	r31, 0x01	; 1
   1aa9c:	ec 0f       	add	r30, r28
   1aa9e:	fd 1f       	adc	r31, r29
   1aaa0:	e0 0f       	add	r30, r16
   1aaa2:	f1 1f       	adc	r31, r17
   1aaa4:	20 81       	ld	r18, Z
   1aaa6:	a1 01       	movw	r20, r2
   1aaa8:	4f 5f       	subi	r20, 0xFF	; 255
   1aaaa:	5f 4f       	sbci	r21, 0xFF	; 255
   1aaac:	4a 01       	movw	r8, r20
   1aaae:	2d 30       	cpi	r18, 0x0D	; 13
   1aab0:	51 f1       	breq	.+84     	; 0x1ab06 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1aab2:	98 2d       	mov	r25, r8
   1aab4:	89 2d       	mov	r24, r9
   1aab6:	0f 5f       	subi	r16, 0xFF	; 255
   1aab8:	1f 4f       	sbci	r17, 0xFF	; 255
   1aaba:	ec e0       	ldi	r30, 0x0C	; 12
   1aabc:	f0 e0       	ldi	r31, 0x00	; 0
   1aabe:	ec 0f       	add	r30, r28
   1aac0:	fd 1f       	adc	r31, r29
   1aac2:	e2 0d       	add	r30, r2
   1aac4:	f3 1d       	adc	r31, r3
   1aac6:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1aac8:	ef ef       	ldi	r30, 0xFF	; 255
   1aaca:	8e 16       	cp	r8, r30
   1aacc:	91 04       	cpc	r9, r1
   1aace:	09 f0       	breq	.+2      	; 0x1aad2 <lif_extract_e010_as_ascii+0x33a>
   1aad0:	ac f5       	brge	.+106    	; 0x1ab3c <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1aad2:	c4 5e       	subi	r28, 0xE4	; 228
   1aad4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aad6:	28 81       	ld	r18, Y
   1aad8:	39 81       	ldd	r19, Y+1	; 0x01
   1aada:	cc 51       	subi	r28, 0x1C	; 28
   1aadc:	d2 40       	sbci	r29, 0x02	; 2
   1aade:	2f 5f       	subi	r18, 0xFF	; 255
   1aae0:	3f 4f       	sbci	r19, 0xFF	; 255
   1aae2:	c4 5e       	subi	r28, 0xE4	; 228
   1aae4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aae6:	39 83       	std	Y+1, r19	; 0x01
   1aae8:	28 83       	st	Y, r18
   1aaea:	cc 51       	subi	r28, 0x1C	; 28
   1aaec:	d2 40       	sbci	r29, 0x02	; 2
   1aaee:	29 2e       	mov	r2, r25
   1aaf0:	38 2e       	mov	r3, r24
   1aaf2:	c4 5e       	subi	r28, 0xE4	; 228
   1aaf4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaf6:	48 81       	ld	r20, Y
   1aaf8:	59 81       	ldd	r21, Y+1	; 0x01
   1aafa:	cc 51       	subi	r28, 0x1C	; 28
   1aafc:	d2 40       	sbci	r29, 0x02	; 2
   1aafe:	4a 15       	cp	r20, r10
   1ab00:	5b 05       	cpc	r21, r11
   1ab02:	2c f2       	brlt	.-118    	; 0x1aa8e <lif_extract_e010_as_ascii+0x2f6>
   1ab04:	62 c0       	rjmp	.+196    	; 0x1abca <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab06:	c4 5e       	subi	r28, 0xE4	; 228
   1ab08:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab0a:	88 81       	ld	r24, Y
   1ab0c:	99 81       	ldd	r25, Y+1	; 0x01
   1ab0e:	cc 51       	subi	r28, 0x1C	; 28
   1ab10:	d2 40       	sbci	r29, 0x02	; 2
   1ab12:	c0 5d       	subi	r28, 0xD0	; 208
   1ab14:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab16:	a8 81       	ld	r26, Y
   1ab18:	b9 81       	ldd	r27, Y+1	; 0x01
   1ab1a:	c0 53       	subi	r28, 0x30	; 48
   1ab1c:	d2 40       	sbci	r29, 0x02	; 2
   1ab1e:	8a 17       	cp	r24, r26
   1ab20:	9b 07       	cpc	r25, r27
   1ab22:	39 f6       	brne	.-114    	; 0x1aab2 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ab24:	ec e0       	ldi	r30, 0x0C	; 12
   1ab26:	f0 e0       	ldi	r31, 0x00	; 0
   1ab28:	ec 0f       	add	r30, r28
   1ab2a:	fd 1f       	adc	r31, r29
   1ab2c:	e2 0d       	add	r30, r2
   1ab2e:	f3 1d       	adc	r31, r3
   1ab30:	ba e0       	ldi	r27, 0x0A	; 10
   1ab32:	b0 83       	st	Z, r27
                    ++ind;
   1ab34:	0f 5f       	subi	r16, 0xFF	; 255
   1ab36:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ab38:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ab3a:	47 c0       	rjmp	.+142    	; 0x1abca <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ab3c:	cc 5d       	subi	r28, 0xDC	; 220
   1ab3e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab40:	28 81       	ld	r18, Y
   1ab42:	39 81       	ldd	r19, Y+1	; 0x01
   1ab44:	c4 52       	subi	r28, 0x24	; 36
   1ab46:	d2 40       	sbci	r29, 0x02	; 2
   1ab48:	a4 01       	movw	r20, r8
   1ab4a:	61 e0       	ldi	r22, 0x01	; 1
   1ab4c:	70 e0       	ldi	r23, 0x00	; 0
   1ab4e:	ce 01       	movw	r24, r28
   1ab50:	0c 96       	adiw	r24, 0x0c	; 12
   1ab52:	0e 94 fb 7a 	call	0xf5f6	; 0xf5f6 <fwrite>
                    if(size < wind)
   1ab56:	88 15       	cp	r24, r8
   1ab58:	99 05       	cpc	r25, r9
   1ab5a:	d4 f4       	brge	.+52     	; 0x1ab90 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ab5c:	cb 5c       	subi	r28, 0xCB	; 203
   1ab5e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab60:	28 81       	ld	r18, Y
   1ab62:	39 81       	ldd	r19, Y+1	; 0x01
   1ab64:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab66:	c5 53       	subi	r28, 0x35	; 53
   1ab68:	d2 40       	sbci	r29, 0x02	; 2
   1ab6a:	ed b7       	in	r30, 0x3d	; 61
   1ab6c:	fe b7       	in	r31, 0x3e	; 62
   1ab6e:	21 83       	std	Z+1, r18	; 0x01
   1ab70:	32 83       	std	Z+2, r19	; 0x02
   1ab72:	43 83       	std	Z+3, r20	; 0x03
   1ab74:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ab78:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ab7a:	21 e0       	ldi	r18, 0x01	; 1
   1ab7c:	30 e0       	ldi	r19, 0x00	; 0
   1ab7e:	ce 5d       	subi	r28, 0xDE	; 222
   1ab80:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab82:	39 83       	std	Y+1, r19	; 0x01
   1ab84:	28 83       	st	Y, r18
   1ab86:	c2 52       	subi	r28, 0x22	; 34
   1ab88:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ab8a:	e1 2c       	mov	r14, r1
   1ab8c:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ab8e:	1d c0       	rjmp	.+58     	; 0x1abca <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ab90:	09 2e       	mov	r0, r25
   1ab92:	00 0c       	add	r0, r0
   1ab94:	aa 0b       	sbc	r26, r26
   1ab96:	bb 0b       	sbc	r27, r27
   1ab98:	48 0e       	add	r4, r24
   1ab9a:	59 1e       	adc	r5, r25
   1ab9c:	6a 1e       	adc	r6, r26
   1ab9e:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1aba0:	ed b7       	in	r30, 0x3d	; 61
   1aba2:	fe b7       	in	r31, 0x3e	; 62
   1aba4:	44 82       	std	Z+4, r4	; 0x04
   1aba6:	55 82       	std	Z+5, r5	; 0x05
   1aba8:	66 82       	std	Z+6, r6	; 0x06
   1abaa:	77 82       	std	Z+7, r7	; 0x07
   1abac:	ce 5c       	subi	r28, 0xCE	; 206
   1abae:	dd 4f       	sbci	r29, 0xFD	; 253
   1abb0:	28 81       	ld	r18, Y
   1abb2:	39 81       	ldd	r19, Y+1	; 0x01
   1abb4:	4a 81       	ldd	r20, Y+2	; 0x02
   1abb6:	c2 53       	subi	r28, 0x32	; 50
   1abb8:	d2 40       	sbci	r29, 0x02	; 2
   1abba:	21 83       	std	Z+1, r18	; 0x01
   1abbc:	32 83       	std	Z+2, r19	; 0x02
   1abbe:	43 83       	std	Z+3, r20	; 0x03
   1abc0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
                    wind = 0;
   1abc4:	90 e0       	ldi	r25, 0x00	; 0
   1abc6:	80 e0       	ldi	r24, 0x00	; 0
   1abc8:	84 cf       	rjmp	.-248    	; 0x1aad2 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1abca:	0f 3f       	cpi	r16, 0xFF	; 255
   1abcc:	11 05       	cpc	r17, r1
   1abce:	09 f0       	breq	.+2      	; 0x1abd2 <lif_extract_e010_as_ascii+0x43a>
   1abd0:	0c f4       	brge	.+2      	; 0x1abd4 <lif_extract_e010_as_ascii+0x43c>
   1abd2:	e5 ce       	rjmp	.-566    	; 0x1a99e <lif_extract_e010_as_ascii+0x206>
   1abd4:	08 c0       	rjmp	.+16     	; 0x1abe6 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1abd6:	a1 e0       	ldi	r26, 0x01	; 1
   1abd8:	b0 e0       	ldi	r27, 0x00	; 0
   1abda:	ce 5d       	subi	r28, 0xDE	; 222
   1abdc:	dd 4f       	sbci	r29, 0xFD	; 253
   1abde:	b9 83       	std	Y+1, r27	; 0x01
   1abe0:	a8 83       	st	Y, r26
   1abe2:	c2 52       	subi	r28, 0x22	; 34
   1abe4:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1abe6:	c2 5e       	subi	r28, 0xE2	; 226
   1abe8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abea:	28 81       	ld	r18, Y
   1abec:	39 81       	ldd	r19, Y+1	; 0x01
   1abee:	4a 81       	ldd	r20, Y+2	; 0x02
   1abf0:	5b 81       	ldd	r21, Y+3	; 0x03
   1abf2:	ce 51       	subi	r28, 0x1E	; 30
   1abf4:	d2 40       	sbci	r29, 0x02	; 2
   1abf6:	3f 5f       	subi	r19, 0xFF	; 255
   1abf8:	4f 4f       	sbci	r20, 0xFF	; 255
   1abfa:	5f 4f       	sbci	r21, 0xFF	; 255
   1abfc:	c2 5e       	subi	r28, 0xE2	; 226
   1abfe:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac00:	28 83       	st	Y, r18
   1ac02:	39 83       	std	Y+1, r19	; 0x01
   1ac04:	4a 83       	std	Y+2, r20	; 0x02
   1ac06:	5b 83       	std	Y+3, r21	; 0x03
   1ac08:	ce 51       	subi	r28, 0x1E	; 30
   1ac0a:	d2 40       	sbci	r29, 0x02	; 2
   1ac0c:	97 ce       	rjmp	.-722    	; 0x1a93c <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ac0e:	e1 2c       	mov	r14, r1
   1ac10:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac12:	c6 01       	movw	r24, r12
   1ac14:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ac18:	21 14       	cp	r2, r1
   1ac1a:	31 04       	cpc	r3, r1
   1ac1c:	31 f1       	breq	.+76     	; 0x1ac6a <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1ac1e:	cc 5d       	subi	r28, 0xDC	; 220
   1ac20:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac22:	28 81       	ld	r18, Y
   1ac24:	39 81       	ldd	r19, Y+1	; 0x01
   1ac26:	c4 52       	subi	r28, 0x24	; 36
   1ac28:	d2 40       	sbci	r29, 0x02	; 2
   1ac2a:	a1 01       	movw	r20, r2
   1ac2c:	61 e0       	ldi	r22, 0x01	; 1
   1ac2e:	70 e0       	ldi	r23, 0x00	; 0
   1ac30:	ce 01       	movw	r24, r28
   1ac32:	0c 96       	adiw	r24, 0x0c	; 12
   1ac34:	0e 94 fb 7a 	call	0xf5f6	; 0xf5f6 <fwrite>
   1ac38:	8c 01       	movw	r16, r24
        if(size < wind)
   1ac3a:	82 15       	cp	r24, r2
   1ac3c:	93 05       	cpc	r25, r3
   1ac3e:	64 f4       	brge	.+24     	; 0x1ac58 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ac40:	82 e2       	ldi	r24, 0x22	; 34
   1ac42:	92 e3       	ldi	r25, 0x32	; 50
   1ac44:	a0 e0       	ldi	r26, 0x00	; 0
   1ac46:	ed b7       	in	r30, 0x3d	; 61
   1ac48:	fe b7       	in	r31, 0x3e	; 62
   1ac4a:	81 83       	std	Z+1, r24	; 0x01
   1ac4c:	92 83       	std	Z+2, r25	; 0x02
   1ac4e:	a3 83       	std	Z+3, r26	; 0x03
   1ac50:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            status = 0;
   1ac54:	e1 2c       	mov	r14, r1
   1ac56:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ac58:	c8 01       	movw	r24, r16
   1ac5a:	01 2e       	mov	r0, r17
   1ac5c:	00 0c       	add	r0, r0
   1ac5e:	aa 0b       	sbc	r26, r26
   1ac60:	bb 0b       	sbc	r27, r27
   1ac62:	48 0e       	add	r4, r24
   1ac64:	59 1e       	adc	r5, r25
   1ac66:	6a 1e       	adc	r6, r26
   1ac68:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ac6a:	cc 5d       	subi	r28, 0xDC	; 220
   1ac6c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac6e:	88 81       	ld	r24, Y
   1ac70:	99 81       	ldd	r25, Y+1	; 0x01
   1ac72:	c4 52       	subi	r28, 0x24	; 36
   1ac74:	d2 40       	sbci	r29, 0x02	; 2
   1ac76:	0e 94 7d 7b 	call	0xf6fa	; 0xf6fa <fclose>
    if(t)
   1ac7a:	c8 5d       	subi	r28, 0xD8	; 216
   1ac7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac7e:	28 81       	ld	r18, Y
   1ac80:	39 81       	ldd	r19, Y+1	; 0x01
   1ac82:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac84:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac86:	c8 52       	subi	r28, 0x28	; 40
   1ac88:	d2 40       	sbci	r29, 0x02	; 2
   1ac8a:	21 15       	cp	r18, r1
   1ac8c:	31 05       	cpc	r19, r1
   1ac8e:	41 05       	cpc	r20, r1
   1ac90:	51 05       	cpc	r21, r1
   1ac92:	d9 f0       	breq	.+54     	; 0x1acca <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ac94:	c8 5e       	subi	r28, 0xE8	; 232
   1ac96:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac98:	28 83       	st	Y, r18
   1ac9a:	39 83       	std	Y+1, r19	; 0x01
   1ac9c:	4a 83       	std	Y+2, r20	; 0x02
   1ac9e:	5b 83       	std	Y+3, r21	; 0x03
   1aca0:	c8 51       	subi	r28, 0x18	; 24
   1aca2:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1aca4:	cc 5e       	subi	r28, 0xEC	; 236
   1aca6:	dd 4f       	sbci	r29, 0xFD	; 253
   1aca8:	28 83       	st	Y, r18
   1acaa:	39 83       	std	Y+1, r19	; 0x01
   1acac:	4a 83       	std	Y+2, r20	; 0x02
   1acae:	5b 83       	std	Y+3, r21	; 0x03
   1acb0:	c4 51       	subi	r28, 0x14	; 20
   1acb2:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1acb4:	be 01       	movw	r22, r28
   1acb6:	6c 5e       	subi	r22, 0xEC	; 236
   1acb8:	7d 4f       	sbci	r23, 0xFD	; 253
   1acba:	ca 5d       	subi	r28, 0xDA	; 218
   1acbc:	dd 4f       	sbci	r29, 0xFD	; 253
   1acbe:	88 81       	ld	r24, Y
   1acc0:	99 81       	ldd	r25, Y+1	; 0x01
   1acc2:	c6 52       	subi	r28, 0x26	; 38
   1acc4:	d2 40       	sbci	r29, 0x02	; 2
   1acc6:	0e 94 ba 78 	call	0xf174	; 0xf174 <utime>
    }
    sync();
   1acca:	0e 94 78 7a 	call	0xf4f0	; 0xf4f0 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1acce:	ed b7       	in	r30, 0x3d	; 61
   1acd0:	fe b7       	in	r31, 0x3e	; 62
   1acd2:	44 82       	std	Z+4, r4	; 0x04
   1acd4:	55 82       	std	Z+5, r5	; 0x05
   1acd6:	66 82       	std	Z+6, r6	; 0x06
   1acd8:	77 82       	std	Z+7, r7	; 0x07
   1acda:	84 e1       	ldi	r24, 0x14	; 20
   1acdc:	92 e3       	ldi	r25, 0x32	; 50
   1acde:	a0 e0       	ldi	r26, 0x00	; 0
   1ace0:	81 83       	std	Z+1, r24	; 0x01
   1ace2:	92 83       	std	Z+2, r25	; 0x02
   1ace4:	a3 83       	std	Z+3, r26	; 0x03
   1ace6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(status);
   1acea:	c7 01       	movw	r24, r14
}
   1acec:	c9 5c       	subi	r28, 0xC9	; 201
   1acee:	dd 4f       	sbci	r29, 0xFD	; 253
   1acf0:	e2 e1       	ldi	r30, 0x12	; 18
   1acf2:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0001acf6 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1acf6:	a4 e1       	ldi	r26, 0x14	; 20
   1acf8:	b1 e0       	ldi	r27, 0x01	; 1
   1acfa:	e1 e8       	ldi	r30, 0x81	; 129
   1acfc:	f6 ed       	ldi	r31, 0xD6	; 214
   1acfe:	0c 94 83 e1 	jmp	0x1c306	; 0x1c306 <__prologue_saves__>
   1ad02:	7c 01       	movw	r14, r24
   1ad04:	8b 01       	movw	r16, r22
   1ad06:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ad08:	62 e4       	ldi	r22, 0x42	; 66
   1ad0a:	73 e0       	ldi	r23, 0x03	; 3
   1ad0c:	0e 94 3a cd 	call	0x19a74	; 0x19a74 <lif_open_volume>
   1ad10:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ad12:	00 97       	sbiw	r24, 0x00	; 0
   1ad14:	69 f4       	brne	.+26     	; 0x1ad30 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ad16:	ed b7       	in	r30, 0x3d	; 61
   1ad18:	fe b7       	in	r31, 0x3e	; 62
   1ad1a:	f5 82       	std	Z+5, r15	; 0x05
   1ad1c:	e4 82       	std	Z+4, r14	; 0x04
   1ad1e:	8c ef       	ldi	r24, 0xFC	; 252
   1ad20:	91 e3       	ldi	r25, 0x31	; 49
   1ad22:	a0 e0       	ldi	r26, 0x00	; 0
   1ad24:	81 83       	std	Z+1, r24	; 0x01
   1ad26:	92 83       	std	Z+2, r25	; 0x02
   1ad28:	a3 83       	std	Z+3, r26	; 0x03
   1ad2a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1ad2e:	13 c0       	rjmp	.+38     	; 0x1ad56 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ad30:	b8 01       	movw	r22, r16
   1ad32:	75 d9       	rcall	.-3350   	; 0x1a01e <lif_find_file>
    if(index == -1)
   1ad34:	01 96       	adiw	r24, 0x01	; 1
   1ad36:	91 f4       	brne	.+36     	; 0x1ad5c <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ad38:	ed b7       	in	r30, 0x3d	; 61
   1ad3a:	fe b7       	in	r31, 0x3e	; 62
   1ad3c:	15 83       	std	Z+5, r17	; 0x05
   1ad3e:	04 83       	std	Z+4, r16	; 0x04
   1ad40:	89 ee       	ldi	r24, 0xE9	; 233
   1ad42:	91 e3       	ldi	r25, 0x31	; 49
   1ad44:	a0 e0       	ldi	r26, 0x00	; 0
   1ad46:	81 83       	std	Z+1, r24	; 0x01
   1ad48:	92 83       	std	Z+2, r25	; 0x02
   1ad4a:	a3 83       	std	Z+3, r26	; 0x03
   1ad4c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad50:	c4 01       	movw	r24, r8
   1ad52:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ad56:	00 e0       	ldi	r16, 0x00	; 0
   1ad58:	10 e0       	ldi	r17, 0x00	; 0
   1ad5a:	ff c0       	rjmp	.+510    	; 0x1af5a <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ad5c:	94 01       	movw	r18, r8
   1ad5e:	20 5a       	subi	r18, 0xA0	; 160
   1ad60:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad62:	c0 5f       	subi	r28, 0xF0	; 240
   1ad64:	de 4f       	sbci	r29, 0xFE	; 254
   1ad66:	39 83       	std	Y+1, r19	; 0x01
   1ad68:	28 83       	st	Y, r18
   1ad6a:	c0 51       	subi	r28, 0x10	; 16
   1ad6c:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ad6e:	f9 01       	movw	r30, r18
   1ad70:	a0 80       	ld	r10, Z
   1ad72:	b1 80       	ldd	r11, Z+1	; 0x01
   1ad74:	0b 2c       	mov	r0, r11
   1ad76:	00 0c       	add	r0, r0
   1ad78:	cc 08       	sbc	r12, r12
   1ad7a:	dd 08       	sbc	r13, r13
   1ad7c:	e1 2c       	mov	r14, r1
   1ad7e:	f1 2c       	mov	r15, r1
   1ad80:	87 01       	movw	r16, r14
   1ad82:	e3 94       	inc	r14
   1ad84:	21 e0       	ldi	r18, 0x01	; 1
   1ad86:	30 e0       	ldi	r19, 0x00	; 0
   1ad88:	40 e0       	ldi	r20, 0x00	; 0
   1ad8a:	50 e0       	ldi	r21, 0x00	; 0
   1ad8c:	6b e6       	ldi	r22, 0x6B	; 107
   1ad8e:	76 e1       	ldi	r23, 0x16	; 22
   1ad90:	c3 01       	movw	r24, r6
   1ad92:	0e 94 f0 c8 	call	0x191e0	; 0x191e0 <lif_create_volume>
   1ad96:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1ad98:	89 2b       	or	r24, r25
   1ad9a:	d1 f2       	breq	.-76     	; 0x1ad50 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1ad9c:	81 e2       	ldi	r24, 0x21	; 33
   1ad9e:	f4 01       	movw	r30, r8
   1ada0:	e1 5b       	subi	r30, 0xB1	; 177
   1ada2:	ff 4f       	sbci	r31, 0xFF	; 255
   1ada4:	d7 01       	movw	r26, r14
   1ada6:	a1 5b       	subi	r26, 0xB1	; 177
   1ada8:	bf 4f       	sbci	r27, 0xFF	; 255
   1adaa:	01 90       	ld	r0, Z+
   1adac:	0d 92       	st	X+, r0
   1adae:	8a 95       	dec	r24
   1adb0:	e1 f7       	brne	.-8      	; 0x1adaa <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1adb2:	82 e0       	ldi	r24, 0x02	; 2
   1adb4:	90 e0       	ldi	r25, 0x00	; 0
   1adb6:	a0 e0       	ldi	r26, 0x00	; 0
   1adb8:	b0 e0       	ldi	r27, 0x00	; 0
   1adba:	f7 01       	movw	r30, r14
   1adbc:	e4 5a       	subi	r30, 0xA4	; 164
   1adbe:	ff 4f       	sbci	r31, 0xFF	; 255
   1adc0:	80 83       	st	Z, r24
   1adc2:	91 83       	std	Z+1, r25	; 0x01
   1adc4:	a2 83       	std	Z+2, r26	; 0x02
   1adc6:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1adc8:	c0 5f       	subi	r28, 0xF0	; 240
   1adca:	de 4f       	sbci	r29, 0xFE	; 254
   1adcc:	e8 81       	ld	r30, Y
   1adce:	f9 81       	ldd	r31, Y+1	; 0x01
   1add0:	c0 51       	subi	r28, 0x10	; 16
   1add2:	d1 40       	sbci	r29, 0x01	; 1
   1add4:	80 81       	ld	r24, Z
   1add6:	91 81       	ldd	r25, Z+1	; 0x01
   1add8:	a2 81       	ldd	r26, Z+2	; 0x02
   1adda:	b3 81       	ldd	r27, Z+3	; 0x03
   1addc:	f7 01       	movw	r30, r14
   1adde:	80 8b       	std	Z+16, r24	; 0x10
   1ade0:	91 8b       	std	Z+17, r25	; 0x11
   1ade2:	a2 8b       	std	Z+18, r26	; 0x12
   1ade4:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1ade6:	60 e0       	ldi	r22, 0x00	; 0
   1ade8:	70 e0       	ldi	r23, 0x00	; 0
   1adea:	c7 01       	movw	r24, r14
   1adec:	0e 94 72 c7 	call	0x18ee4	; 0x18ee4 <lif_writedirindex>
   1adf0:	8c 01       	movw	r16, r24
   1adf2:	89 2b       	or	r24, r25
   1adf4:	41 f0       	breq	.+16     	; 0x1ae06 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1adf6:	61 e0       	ldi	r22, 0x01	; 1
   1adf8:	70 e0       	ldi	r23, 0x00	; 0
   1adfa:	c7 01       	movw	r24, r14
   1adfc:	0e 94 ce c7 	call	0x18f9c	; 0x18f9c <lif_writedirEOF>
   1ae00:	8c 01       	movw	r16, r24
   1ae02:	89 2b       	or	r24, r25
   1ae04:	39 f4       	brne	.+14     	; 0x1ae14 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae06:	c4 01       	movw	r24, r8
   1ae08:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1ae0c:	c7 01       	movw	r24, r14
   1ae0e:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1ae12:	a3 c0       	rjmp	.+326    	; 0x1af5a <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1ae14:	f7 01       	movw	r30, r14
   1ae16:	44 84       	ldd	r4, Z+12	; 0x0c
   1ae18:	55 84       	ldd	r5, Z+13	; 0x0d
   1ae1a:	66 84       	ldd	r6, Z+14	; 0x0e
   1ae1c:	77 84       	ldd	r7, Z+15	; 0x0f
   1ae1e:	76 2c       	mov	r7, r6
   1ae20:	65 2c       	mov	r6, r5
   1ae22:	54 2c       	mov	r5, r4
   1ae24:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae26:	f4 01       	movw	r30, r8
   1ae28:	e4 5a       	subi	r30, 0xA4	; 164
   1ae2a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae2c:	80 81       	ld	r24, Z
   1ae2e:	91 81       	ldd	r25, Z+1	; 0x01
   1ae30:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae32:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae34:	22 27       	eor	r18, r18
   1ae36:	38 2f       	mov	r19, r24
   1ae38:	49 2f       	mov	r20, r25
   1ae3a:	5a 2f       	mov	r21, r26
   1ae3c:	c4 5f       	subi	r28, 0xF4	; 244
   1ae3e:	de 4f       	sbci	r29, 0xFE	; 254
   1ae40:	28 83       	st	Y, r18
   1ae42:	39 83       	std	Y+1, r19	; 0x01
   1ae44:	4a 83       	std	Y+2, r20	; 0x02
   1ae46:	5b 83       	std	Y+3, r21	; 0x03
   1ae48:	cc 50       	subi	r28, 0x0C	; 12
   1ae4a:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae4c:	21 2c       	mov	r2, r1
   1ae4e:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1ae50:	8b ed       	ldi	r24, 0xDB	; 219
   1ae52:	91 e3       	ldi	r25, 0x31	; 49
   1ae54:	9c 01       	movw	r18, r24
   1ae56:	40 e0       	ldi	r20, 0x00	; 0
   1ae58:	ce 5e       	subi	r28, 0xEE	; 238
   1ae5a:	de 4f       	sbci	r29, 0xFE	; 254
   1ae5c:	28 83       	st	Y, r18
   1ae5e:	39 83       	std	Y+1, r19	; 0x01
   1ae60:	4a 83       	std	Y+2, r20	; 0x02
   1ae62:	c2 51       	subi	r28, 0x12	; 18
   1ae64:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae66:	c0 5f       	subi	r28, 0xF0	; 240
   1ae68:	de 4f       	sbci	r29, 0xFE	; 254
   1ae6a:	e8 81       	ld	r30, Y
   1ae6c:	f9 81       	ldd	r31, Y+1	; 0x01
   1ae6e:	c0 51       	subi	r28, 0x10	; 16
   1ae70:	d1 40       	sbci	r29, 0x01	; 1
   1ae72:	80 81       	ld	r24, Z
   1ae74:	91 81       	ldd	r25, Z+1	; 0x01
   1ae76:	28 16       	cp	r2, r24
   1ae78:	39 06       	cpc	r3, r25
   1ae7a:	0c f0       	brlt	.+2      	; 0x1ae7e <lif_extract_lif_as_lif+0x188>
   1ae7c:	58 c0       	rjmp	.+176    	; 0x1af2e <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1ae7e:	00 e0       	ldi	r16, 0x00	; 0
   1ae80:	11 e0       	ldi	r17, 0x01	; 1
   1ae82:	c4 5f       	subi	r28, 0xF4	; 244
   1ae84:	de 4f       	sbci	r29, 0xFE	; 254
   1ae86:	28 81       	ld	r18, Y
   1ae88:	39 81       	ldd	r19, Y+1	; 0x01
   1ae8a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae8c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae8e:	cc 50       	subi	r28, 0x0C	; 12
   1ae90:	d1 40       	sbci	r29, 0x01	; 1
   1ae92:	be 01       	movw	r22, r28
   1ae94:	68 5f       	subi	r22, 0xF8	; 248
   1ae96:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae98:	c4 01       	movw	r24, r8
   1ae9a:	0e 94 b1 bd 	call	0x17b62	; 0x17b62 <lif_read>
   1ae9e:	5b 01       	movw	r10, r22
   1aea0:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1aea2:	6f 3f       	cpi	r22, 0xFF	; 255
   1aea4:	71 05       	cpc	r23, r1
   1aea6:	09 f0       	breq	.+2      	; 0x1aeaa <lif_extract_lif_as_lif+0x1b4>
   1aea8:	2c f4       	brge	.+10     	; 0x1aeb4 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aeaa:	c4 01       	movw	r24, r8
   1aeac:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1aeb0:	c7 01       	movw	r24, r14
   1aeb2:	4f cf       	rjmp	.-354    	; 0x1ad52 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1aeb4:	00 e0       	ldi	r16, 0x00	; 0
   1aeb6:	11 e0       	ldi	r17, 0x01	; 1
   1aeb8:	a3 01       	movw	r20, r6
   1aeba:	92 01       	movw	r18, r4
   1aebc:	be 01       	movw	r22, r28
   1aebe:	68 5f       	subi	r22, 0xF8	; 248
   1aec0:	7f 4f       	sbci	r23, 0xFF	; 255
   1aec2:	c7 01       	movw	r24, r14
   1aec4:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1aec8:	c5 01       	movw	r24, r10
   1aeca:	0b 2c       	mov	r0, r11
   1aecc:	00 0c       	add	r0, r0
   1aece:	aa 0b       	sbc	r26, r26
   1aed0:	bb 0b       	sbc	r27, r27
   1aed2:	48 0e       	add	r4, r24
   1aed4:	59 1e       	adc	r5, r25
   1aed6:	6a 1e       	adc	r6, r26
   1aed8:	7b 1e       	adc	r7, r27
        offset += size;
   1aeda:	c4 5f       	subi	r28, 0xF4	; 244
   1aedc:	de 4f       	sbci	r29, 0xFE	; 254
   1aede:	28 81       	ld	r18, Y
   1aee0:	39 81       	ldd	r19, Y+1	; 0x01
   1aee2:	4a 81       	ldd	r20, Y+2	; 0x02
   1aee4:	5b 81       	ldd	r21, Y+3	; 0x03
   1aee6:	cc 50       	subi	r28, 0x0C	; 12
   1aee8:	d1 40       	sbci	r29, 0x01	; 1
   1aeea:	28 0f       	add	r18, r24
   1aeec:	39 1f       	adc	r19, r25
   1aeee:	4a 1f       	adc	r20, r26
   1aef0:	5b 1f       	adc	r21, r27
   1aef2:	c4 5f       	subi	r28, 0xF4	; 244
   1aef4:	de 4f       	sbci	r29, 0xFE	; 254
   1aef6:	28 83       	st	Y, r18
   1aef8:	39 83       	std	Y+1, r19	; 0x01
   1aefa:	4a 83       	std	Y+2, r20	; 0x02
   1aefc:	5b 83       	std	Y+3, r21	; 0x03
   1aefe:	cc 50       	subi	r28, 0x0C	; 12
   1af00:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1af02:	ed b7       	in	r30, 0x3d	; 61
   1af04:	fe b7       	in	r31, 0x3e	; 62
   1af06:	44 82       	std	Z+4, r4	; 0x04
   1af08:	55 82       	std	Z+5, r5	; 0x05
   1af0a:	66 82       	std	Z+6, r6	; 0x06
   1af0c:	77 82       	std	Z+7, r7	; 0x07
   1af0e:	ce 5e       	subi	r28, 0xEE	; 238
   1af10:	de 4f       	sbci	r29, 0xFE	; 254
   1af12:	28 81       	ld	r18, Y
   1af14:	39 81       	ldd	r19, Y+1	; 0x01
   1af16:	4a 81       	ldd	r20, Y+2	; 0x02
   1af18:	c2 51       	subi	r28, 0x12	; 18
   1af1a:	d1 40       	sbci	r29, 0x01	; 1
   1af1c:	21 83       	std	Z+1, r18	; 0x01
   1af1e:	32 83       	std	Z+2, r19	; 0x02
   1af20:	43 83       	std	Z+3, r20	; 0x03
   1af22:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af26:	ff ef       	ldi	r31, 0xFF	; 255
   1af28:	2f 1a       	sub	r2, r31
   1af2a:	3f 0a       	sbc	r3, r31
   1af2c:	9c cf       	rjmp	.-200    	; 0x1ae66 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af2e:	c4 01       	movw	r24, r8
   1af30:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1af34:	c7 01       	movw	r24, r14
   1af36:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1af3a:	ed b7       	in	r30, 0x3d	; 61
   1af3c:	fe b7       	in	r31, 0x3e	; 62
   1af3e:	44 82       	std	Z+4, r4	; 0x04
   1af40:	55 82       	std	Z+5, r5	; 0x05
   1af42:	66 82       	std	Z+6, r6	; 0x06
   1af44:	77 82       	std	Z+7, r7	; 0x07
   1af46:	8d ec       	ldi	r24, 0xCD	; 205
   1af48:	91 e3       	ldi	r25, 0x31	; 49
   1af4a:	a0 e0       	ldi	r26, 0x00	; 0
   1af4c:	81 83       	std	Z+1, r24	; 0x01
   1af4e:	92 83       	std	Z+2, r25	; 0x02
   1af50:	a3 83       	std	Z+3, r26	; 0x03
   1af52:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(1);
   1af56:	01 e0       	ldi	r16, 0x01	; 1
   1af58:	10 e0       	ldi	r17, 0x00	; 0
}
   1af5a:	c8 01       	movw	r24, r16
   1af5c:	cc 5e       	subi	r28, 0xEC	; 236
   1af5e:	de 4f       	sbci	r29, 0xFE	; 254
   1af60:	e2 e1       	ldi	r30, 0x12	; 18
   1af62:	0c 94 9f e1 	jmp	0x1c33e	; 0x1c33e <__epilogue_restores__>

0001af66 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1af66:	2f 92       	push	r2
   1af68:	3f 92       	push	r3
   1af6a:	4f 92       	push	r4
   1af6c:	5f 92       	push	r5
   1af6e:	6f 92       	push	r6
   1af70:	8f 92       	push	r8
   1af72:	9f 92       	push	r9
   1af74:	af 92       	push	r10
   1af76:	bf 92       	push	r11
   1af78:	cf 92       	push	r12
   1af7a:	df 92       	push	r13
   1af7c:	ef 92       	push	r14
   1af7e:	ff 92       	push	r15
   1af80:	0f 93       	push	r16
   1af82:	1f 93       	push	r17
   1af84:	cf 93       	push	r28
   1af86:	df 93       	push	r29
   1af88:	cd b7       	in	r28, 0x3d	; 61
   1af8a:	de b7       	in	r29, 0x3e	; 62
   1af8c:	cd 51       	subi	r28, 0x1D	; 29
   1af8e:	d1 40       	sbci	r29, 0x01	; 1
   1af90:	0f b6       	in	r0, 0x3f	; 63
   1af92:	f8 94       	cli
   1af94:	de bf       	out	0x3e, r29	; 62
   1af96:	0f be       	out	0x3f, r0	; 63
   1af98:	cd bf       	out	0x3d, r28	; 61
   1af9a:	5c 01       	movw	r10, r24
   1af9c:	7b 01       	movw	r14, r22
   1af9e:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1afa0:	dc 01       	movw	r26, r24
   1afa2:	8c 91       	ld	r24, X
   1afa4:	81 11       	cpse	r24, r1
   1afa6:	03 c0       	rjmp	.+6      	; 0x1afae <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1afa8:	8d ea       	ldi	r24, 0xAD	; 173
   1afaa:	91 e3       	ldi	r25, 0x31	; 49
   1afac:	06 c0       	rjmp	.+12     	; 0x1afba <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1afae:	db 01       	movw	r26, r22
   1afb0:	8c 91       	ld	r24, X
   1afb2:	81 11       	cpse	r24, r1
   1afb4:	0b c0       	rjmp	.+22     	; 0x1afcc <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1afb6:	82 e9       	ldi	r24, 0x92	; 146
   1afb8:	91 e3       	ldi	r25, 0x31	; 49
   1afba:	a0 e0       	ldi	r26, 0x00	; 0
   1afbc:	ed b7       	in	r30, 0x3d	; 61
   1afbe:	fe b7       	in	r31, 0x3e	; 62
   1afc0:	81 83       	std	Z+1, r24	; 0x01
   1afc2:	92 83       	std	Z+2, r25	; 0x02
   1afc4:	a3 83       	std	Z+3, r26	; 0x03
   1afc6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1afca:	25 c1       	rjmp	.+586    	; 0x1b216 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1afcc:	da 01       	movw	r26, r20
   1afce:	8c 91       	ld	r24, X
   1afd0:	81 11       	cpse	r24, r1
   1afd2:	03 c0       	rjmp	.+6      	; 0x1afda <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1afd4:	86 e7       	ldi	r24, 0x76	; 118
   1afd6:	91 e3       	ldi	r25, 0x31	; 49
   1afd8:	f0 cf       	rjmp	.-32     	; 0x1afba <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1afda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1afde:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1afe2:	92 ff       	sbrs	r25, 2
   1afe4:	10 c0       	rjmp	.+32     	; 0x1b006 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1afe6:	ed b7       	in	r30, 0x3d	; 61
   1afe8:	fe b7       	in	r31, 0x3e	; 62
   1afea:	51 87       	std	Z+9, r21	; 0x09
   1afec:	40 87       	std	Z+8, r20	; 0x08
   1afee:	77 83       	std	Z+7, r23	; 0x07
   1aff0:	66 83       	std	Z+6, r22	; 0x06
   1aff2:	b5 82       	std	Z+5, r11	; 0x05
   1aff4:	a4 82       	std	Z+4, r10	; 0x04
   1aff6:	87 e4       	ldi	r24, 0x47	; 71
   1aff8:	91 e3       	ldi	r25, 0x31	; 49
   1affa:	a0 e0       	ldi	r26, 0x00	; 0
   1affc:	81 83       	std	Z+1, r24	; 0x01
   1affe:	92 83       	std	Z+2, r25	; 0x02
   1b000:	a3 83       	std	Z+3, r26	; 0x03
   1b002:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b006:	68 e0       	ldi	r22, 0x08	; 8
   1b008:	79 e0       	ldi	r23, 0x09	; 9
   1b00a:	c4 01       	movw	r24, r8
   1b00c:	0e 94 3a cd 	call	0x19a74	; 0x19a74 <lif_open_volume>
   1b010:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b012:	00 97       	sbiw	r24, 0x00	; 0
   1b014:	09 f4       	brne	.+2      	; 0x1b018 <lif_add_lif_file+0xb2>
   1b016:	ff c0       	rjmp	.+510    	; 0x1b216 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b018:	b7 01       	movw	r22, r14
   1b01a:	01 d8       	rcall	.-4094   	; 0x1a01e <lif_find_file>
    if(index == -1)
   1b01c:	01 96       	adiw	r24, 0x01	; 1
   1b01e:	a1 f4       	brne	.+40     	; 0x1b048 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b020:	ed b7       	in	r30, 0x3d	; 61
   1b022:	fe b7       	in	r31, 0x3e	; 62
   1b024:	f5 82       	std	Z+5, r15	; 0x05
   1b026:	e4 82       	std	Z+4, r14	; 0x04
   1b028:	84 e3       	ldi	r24, 0x34	; 52
   1b02a:	91 e3       	ldi	r25, 0x31	; 49
   1b02c:	a0 e0       	ldi	r26, 0x00	; 0
   1b02e:	81 83       	std	Z+1, r24	; 0x01
   1b030:	92 83       	std	Z+2, r25	; 0x02
   1b032:	a3 83       	std	Z+3, r26	; 0x03
   1b034:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b038:	c6 01       	movw	r24, r12
   1b03a:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b03e:	60 e0       	ldi	r22, 0x00	; 0
   1b040:	70 e0       	ldi	r23, 0x00	; 0
   1b042:	80 e0       	ldi	r24, 0x00	; 0
   1b044:	90 e0       	ldi	r25, 0x00	; 0
   1b046:	ff c0       	rjmp	.+510    	; 0x1b246 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b048:	68 e0       	ldi	r22, 0x08	; 8
   1b04a:	79 e0       	ldi	r23, 0x09	; 9
   1b04c:	c5 01       	movw	r24, r10
   1b04e:	0e 94 3a cd 	call	0x19a74	; 0x19a74 <lif_open_volume>
   1b052:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b054:	00 97       	sbiw	r24, 0x00	; 0
   1b056:	09 f4       	brne	.+2      	; 0x1b05a <lif_add_lif_file+0xf4>
   1b058:	de c0       	rjmp	.+444    	; 0x1b216 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b05a:	f6 01       	movw	r30, r12
   1b05c:	e0 5a       	subi	r30, 0xA0	; 160
   1b05e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b060:	40 81       	ld	r20, Z
   1b062:	51 81       	ldd	r21, Z+1	; 0x01
   1b064:	62 81       	ldd	r22, Z+2	; 0x02
   1b066:	73 81       	ldd	r23, Z+3	; 0x03
   1b068:	0e 94 da cb 	call	0x197b4	; 0x197b4 <lif_newdir>
   1b06c:	ca 5e       	subi	r28, 0xEA	; 234
   1b06e:	de 4f       	sbci	r29, 0xFE	; 254
   1b070:	99 83       	std	Y+1, r25	; 0x01
   1b072:	88 83       	st	Y, r24
   1b074:	c6 51       	subi	r28, 0x16	; 22
   1b076:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b078:	01 96       	adiw	r24, 0x01	; 1
   1b07a:	79 f4       	brne	.+30     	; 0x1b09a <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b07c:	ed b7       	in	r30, 0x3d	; 61
   1b07e:	fe b7       	in	r31, 0x3e	; 62
   1b080:	97 82       	std	Z+7, r9	; 0x07
   1b082:	86 82       	std	Z+6, r8	; 0x06
   1b084:	b5 82       	std	Z+5, r11	; 0x05
   1b086:	a4 82       	std	Z+4, r10	; 0x04
   1b088:	84 e0       	ldi	r24, 0x04	; 4
   1b08a:	91 e3       	ldi	r25, 0x31	; 49
   1b08c:	a0 e0       	ldi	r26, 0x00	; 0
   1b08e:	81 83       	std	Z+1, r24	; 0x01
   1b090:	92 83       	std	Z+2, r25	; 0x02
   1b092:	a3 83       	std	Z+3, r26	; 0x03
   1b094:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1b098:	a8 c0       	rjmp	.+336    	; 0x1b1ea <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b09a:	c7 01       	movw	r24, r14
   1b09c:	84 5a       	subi	r24, 0xA4	; 164
   1b09e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b0a0:	dc 01       	movw	r26, r24
   1b0a2:	4d 91       	ld	r20, X+
   1b0a4:	5d 91       	ld	r21, X+
   1b0a6:	6d 91       	ld	r22, X+
   1b0a8:	7c 91       	ld	r23, X
   1b0aa:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b0ac:	21 e2       	ldi	r18, 0x21	; 33
   1b0ae:	f6 01       	movw	r30, r12
   1b0b0:	e1 5b       	subi	r30, 0xB1	; 177
   1b0b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0b4:	1d 97       	sbiw	r26, 0x0d	; 13
   1b0b6:	01 90       	ld	r0, Z+
   1b0b8:	0d 92       	st	X+, r0
   1b0ba:	2a 95       	dec	r18
   1b0bc:	e1 f7       	brne	.-8      	; 0x1b0b6 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b0be:	fc 01       	movw	r30, r24
   1b0c0:	40 83       	st	Z, r20
   1b0c2:	51 83       	std	Z+1, r21	; 0x01
   1b0c4:	62 83       	std	Z+2, r22	; 0x02
   1b0c6:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0c8:	b6 2f       	mov	r27, r22
   1b0ca:	a5 2f       	mov	r26, r21
   1b0cc:	94 2f       	mov	r25, r20
   1b0ce:	88 27       	eor	r24, r24
   1b0d0:	c2 5f       	subi	r28, 0xF2	; 242
   1b0d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b0d4:	88 83       	st	Y, r24
   1b0d6:	99 83       	std	Y+1, r25	; 0x01
   1b0d8:	aa 83       	std	Y+2, r26	; 0x02
   1b0da:	bb 83       	std	Y+3, r27	; 0x03
   1b0dc:	ce 50       	subi	r28, 0x0E	; 14
   1b0de:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0e0:	f6 01       	movw	r30, r12
   1b0e2:	e4 5a       	subi	r30, 0xA4	; 164
   1b0e4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0e6:	80 81       	ld	r24, Z
   1b0e8:	91 81       	ldd	r25, Z+1	; 0x01
   1b0ea:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0ec:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0ee:	22 27       	eor	r18, r18
   1b0f0:	38 2f       	mov	r19, r24
   1b0f2:	49 2f       	mov	r20, r25
   1b0f4:	5a 2f       	mov	r21, r26
   1b0f6:	ce 5e       	subi	r28, 0xEE	; 238
   1b0f8:	de 4f       	sbci	r29, 0xFE	; 254
   1b0fa:	28 83       	st	Y, r18
   1b0fc:	39 83       	std	Y+1, r19	; 0x01
   1b0fe:	4a 83       	std	Y+2, r20	; 0x02
   1b100:	5b 83       	std	Y+3, r21	; 0x03
   1b102:	c2 51       	subi	r28, 0x12	; 18
   1b104:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b106:	21 2c       	mov	r2, r1
   1b108:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b10a:	81 2c       	mov	r8, r1
   1b10c:	91 2c       	mov	r9, r1
   1b10e:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b110:	a7 01       	movw	r20, r14
   1b112:	40 5a       	subi	r20, 0xA0	; 160
   1b114:	5f 4f       	sbci	r21, 0xFF	; 255
   1b116:	c4 5e       	subi	r28, 0xE4	; 228
   1b118:	de 4f       	sbci	r29, 0xFE	; 254
   1b11a:	59 83       	std	Y+1, r21	; 0x01
   1b11c:	48 83       	st	Y, r20
   1b11e:	cc 51       	subi	r28, 0x1C	; 28
   1b120:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b122:	86 ef       	ldi	r24, 0xF6	; 246
   1b124:	90 e3       	ldi	r25, 0x30	; 48
   1b126:	2c 01       	movw	r4, r24
   1b128:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b12a:	27 c0       	rjmp	.+78     	; 0x1b17a <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b12c:	00 e0       	ldi	r16, 0x00	; 0
   1b12e:	11 e0       	ldi	r17, 0x01	; 1
   1b130:	c8 5e       	subi	r28, 0xE8	; 232
   1b132:	de 4f       	sbci	r29, 0xFE	; 254
   1b134:	28 81       	ld	r18, Y
   1b136:	39 81       	ldd	r19, Y+1	; 0x01
   1b138:	4a 81       	ldd	r20, Y+2	; 0x02
   1b13a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b13c:	c8 51       	subi	r28, 0x18	; 24
   1b13e:	d1 40       	sbci	r29, 0x01	; 1
   1b140:	be 01       	movw	r22, r28
   1b142:	66 5f       	subi	r22, 0xF6	; 246
   1b144:	7f 4f       	sbci	r23, 0xFF	; 255
   1b146:	c7 01       	movw	r24, r14
   1b148:	0e 94 04 be 	call	0x17c08	; 0x17c08 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b14c:	8f 3f       	cpi	r24, 0xFF	; 255
   1b14e:	91 05       	cpc	r25, r1
   1b150:	09 f0       	breq	.+2      	; 0x1b154 <lif_add_lif_file+0x1ee>
   1b152:	0c f4       	brge	.+2      	; 0x1b156 <lif_add_lif_file+0x1f0>
   1b154:	4a c0       	rjmp	.+148    	; 0x1b1ea <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b156:	5f ef       	ldi	r21, 0xFF	; 255
   1b158:	95 1a       	sub	r9, r21
   1b15a:	a5 0a       	sbc	r10, r21
   1b15c:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b15e:	ed b7       	in	r30, 0x3d	; 61
   1b160:	fe b7       	in	r31, 0x3e	; 62
   1b162:	84 82       	std	Z+4, r8	; 0x04
   1b164:	95 82       	std	Z+5, r9	; 0x05
   1b166:	a6 82       	std	Z+6, r10	; 0x06
   1b168:	b7 82       	std	Z+7, r11	; 0x07
   1b16a:	41 82       	std	Z+1, r4	; 0x01
   1b16c:	52 82       	std	Z+2, r5	; 0x02
   1b16e:	63 82       	std	Z+3, r6	; 0x03
   1b170:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b174:	ff ef       	ldi	r31, 0xFF	; 255
   1b176:	2f 1a       	sub	r2, r31
   1b178:	3f 0a       	sbc	r3, r31
   1b17a:	ce 5e       	subi	r28, 0xEE	; 238
   1b17c:	de 4f       	sbci	r29, 0xFE	; 254
   1b17e:	28 81       	ld	r18, Y
   1b180:	39 81       	ldd	r19, Y+1	; 0x01
   1b182:	4a 81       	ldd	r20, Y+2	; 0x02
   1b184:	5b 81       	ldd	r21, Y+3	; 0x03
   1b186:	c2 51       	subi	r28, 0x12	; 18
   1b188:	d1 40       	sbci	r29, 0x01	; 1
   1b18a:	28 0d       	add	r18, r8
   1b18c:	39 1d       	adc	r19, r9
   1b18e:	4a 1d       	adc	r20, r10
   1b190:	5b 1d       	adc	r21, r11
   1b192:	c2 5f       	subi	r28, 0xF2	; 242
   1b194:	de 4f       	sbci	r29, 0xFE	; 254
   1b196:	88 81       	ld	r24, Y
   1b198:	99 81       	ldd	r25, Y+1	; 0x01
   1b19a:	aa 81       	ldd	r26, Y+2	; 0x02
   1b19c:	bb 81       	ldd	r27, Y+3	; 0x03
   1b19e:	ce 50       	subi	r28, 0x0E	; 14
   1b1a0:	d1 40       	sbci	r29, 0x01	; 1
   1b1a2:	88 0d       	add	r24, r8
   1b1a4:	99 1d       	adc	r25, r9
   1b1a6:	aa 1d       	adc	r26, r10
   1b1a8:	bb 1d       	adc	r27, r11
   1b1aa:	c8 5e       	subi	r28, 0xE8	; 232
   1b1ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b1ae:	88 83       	st	Y, r24
   1b1b0:	99 83       	std	Y+1, r25	; 0x01
   1b1b2:	aa 83       	std	Y+2, r26	; 0x02
   1b1b4:	bb 83       	std	Y+3, r27	; 0x03
   1b1b6:	c8 51       	subi	r28, 0x18	; 24
   1b1b8:	d1 40       	sbci	r29, 0x01	; 1
   1b1ba:	c4 5e       	subi	r28, 0xE4	; 228
   1b1bc:	de 4f       	sbci	r29, 0xFE	; 254
   1b1be:	a8 81       	ld	r26, Y
   1b1c0:	b9 81       	ldd	r27, Y+1	; 0x01
   1b1c2:	cc 51       	subi	r28, 0x1C	; 28
   1b1c4:	d1 40       	sbci	r29, 0x01	; 1
   1b1c6:	8d 91       	ld	r24, X+
   1b1c8:	9c 91       	ld	r25, X
   1b1ca:	28 16       	cp	r2, r24
   1b1cc:	39 06       	cpc	r3, r25
   1b1ce:	94 f4       	brge	.+36     	; 0x1b1f4 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b1d0:	00 e0       	ldi	r16, 0x00	; 0
   1b1d2:	11 e0       	ldi	r17, 0x01	; 1
   1b1d4:	be 01       	movw	r22, r28
   1b1d6:	66 5f       	subi	r22, 0xF6	; 246
   1b1d8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b1da:	c6 01       	movw	r24, r12
   1b1dc:	0e 94 b1 bd 	call	0x17b62	; 0x17b62 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b1e0:	6f 3f       	cpi	r22, 0xFF	; 255
   1b1e2:	71 05       	cpc	r23, r1
   1b1e4:	11 f0       	breq	.+4      	; 0x1b1ea <lif_add_lif_file+0x284>
   1b1e6:	0c f0       	brlt	.+2      	; 0x1b1ea <lif_add_lif_file+0x284>
   1b1e8:	a1 cf       	rjmp	.-190    	; 0x1b12c <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1ea:	c7 01       	movw	r24, r14
   1b1ec:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1b1f0:	c6 01       	movw	r24, r12
   1b1f2:	0f c0       	rjmp	.+30     	; 0x1b212 <lif_add_lif_file+0x2ac>
   1b1f4:	c6 01       	movw	r24, r12
   1b1f6:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b1fa:	ca 5e       	subi	r28, 0xEA	; 234
   1b1fc:	de 4f       	sbci	r29, 0xFE	; 254
   1b1fe:	68 81       	ld	r22, Y
   1b200:	79 81       	ldd	r23, Y+1	; 0x01
   1b202:	c6 51       	subi	r28, 0x16	; 22
   1b204:	d1 40       	sbci	r29, 0x01	; 1
   1b206:	c7 01       	movw	r24, r14
   1b208:	0e 94 72 c7 	call	0x18ee4	; 0x18ee4 <lif_writedirindex>
   1b20c:	89 2b       	or	r24, r25
   1b20e:	41 f4       	brne	.+16     	; 0x1b220 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b210:	c7 01       	movw	r24, r14
   1b212:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b216:	6f ef       	ldi	r22, 0xFF	; 255
   1b218:	7f ef       	ldi	r23, 0xFF	; 255
   1b21a:	8f ef       	ldi	r24, 0xFF	; 255
   1b21c:	9f ef       	ldi	r25, 0xFF	; 255
   1b21e:	13 c0       	rjmp	.+38     	; 0x1b246 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b220:	c7 01       	movw	r24, r14
   1b222:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b226:	ed b7       	in	r30, 0x3d	; 61
   1b228:	fe b7       	in	r31, 0x3e	; 62
   1b22a:	84 82       	std	Z+4, r8	; 0x04
   1b22c:	95 82       	std	Z+5, r9	; 0x05
   1b22e:	a6 82       	std	Z+6, r10	; 0x06
   1b230:	b7 82       	std	Z+7, r11	; 0x07
   1b232:	88 ee       	ldi	r24, 0xE8	; 232
   1b234:	90 e3       	ldi	r25, 0x30	; 48
   1b236:	a0 e0       	ldi	r26, 0x00	; 0
   1b238:	81 83       	std	Z+1, r24	; 0x01
   1b23a:	92 83       	std	Z+2, r25	; 0x02
   1b23c:	a3 83       	std	Z+3, r26	; 0x03
   1b23e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(bytes);
   1b242:	b4 01       	movw	r22, r8
   1b244:	c5 01       	movw	r24, r10
}
   1b246:	c3 5e       	subi	r28, 0xE3	; 227
   1b248:	de 4f       	sbci	r29, 0xFE	; 254
   1b24a:	0f b6       	in	r0, 0x3f	; 63
   1b24c:	f8 94       	cli
   1b24e:	de bf       	out	0x3e, r29	; 62
   1b250:	0f be       	out	0x3f, r0	; 63
   1b252:	cd bf       	out	0x3d, r28	; 61
   1b254:	df 91       	pop	r29
   1b256:	cf 91       	pop	r28
   1b258:	1f 91       	pop	r17
   1b25a:	0f 91       	pop	r16
   1b25c:	ff 90       	pop	r15
   1b25e:	ef 90       	pop	r14
   1b260:	df 90       	pop	r13
   1b262:	cf 90       	pop	r12
   1b264:	bf 90       	pop	r11
   1b266:	af 90       	pop	r10
   1b268:	9f 90       	pop	r9
   1b26a:	8f 90       	pop	r8
   1b26c:	6f 90       	pop	r6
   1b26e:	5f 90       	pop	r5
   1b270:	4f 90       	pop	r4
   1b272:	3f 90       	pop	r3
   1b274:	2f 90       	pop	r2
   1b276:	08 95       	ret

0001b278 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b278:	ef 92       	push	r14
   1b27a:	ff 92       	push	r15
   1b27c:	0f 93       	push	r16
   1b27e:	1f 93       	push	r17
   1b280:	cf 93       	push	r28
   1b282:	df 93       	push	r29
   1b284:	ad b7       	in	r26, 0x3d	; 61
   1b286:	be b7       	in	r27, 0x3e	; 62
   1b288:	17 97       	sbiw	r26, 0x07	; 7
   1b28a:	0f b6       	in	r0, 0x3f	; 63
   1b28c:	f8 94       	cli
   1b28e:	be bf       	out	0x3e, r27	; 62
   1b290:	0f be       	out	0x3f, r0	; 63
   1b292:	ad bf       	out	0x3d, r26	; 61
   1b294:	7c 01       	movw	r14, r24
   1b296:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b298:	fc 01       	movw	r30, r24
   1b29a:	80 81       	ld	r24, Z
   1b29c:	81 11       	cpse	r24, r1
   1b29e:	03 c0       	rjmp	.+6      	; 0x1b2a6 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b2a0:	83 ec       	ldi	r24, 0xC3	; 195
   1b2a2:	90 e3       	ldi	r25, 0x30	; 48
   1b2a4:	06 c0       	rjmp	.+12     	; 0x1b2b2 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b2a6:	fb 01       	movw	r30, r22
   1b2a8:	80 81       	ld	r24, Z
   1b2aa:	81 11       	cpse	r24, r1
   1b2ac:	0b c0       	rjmp	.+22     	; 0x1b2c4 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b2ae:	83 ea       	ldi	r24, 0xA3	; 163
   1b2b0:	90 e3       	ldi	r25, 0x30	; 48
   1b2b2:	a0 e0       	ldi	r26, 0x00	; 0
   1b2b4:	ed b7       	in	r30, 0x3d	; 61
   1b2b6:	fe b7       	in	r31, 0x3e	; 62
   1b2b8:	81 83       	std	Z+1, r24	; 0x01
   1b2ba:	92 83       	std	Z+2, r25	; 0x02
   1b2bc:	a3 83       	std	Z+3, r26	; 0x03
   1b2be:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1b2c2:	68 c0       	rjmp	.+208    	; 0x1b394 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b2c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b2c8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b2cc:	92 ff       	sbrs	r25, 2
   1b2ce:	0e c0       	rjmp	.+28     	; 0x1b2ec <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b2d0:	ed b7       	in	r30, 0x3d	; 61
   1b2d2:	fe b7       	in	r31, 0x3e	; 62
   1b2d4:	77 83       	std	Z+7, r23	; 0x07
   1b2d6:	66 83       	std	Z+6, r22	; 0x06
   1b2d8:	f5 82       	std	Z+5, r15	; 0x05
   1b2da:	e4 82       	std	Z+4, r14	; 0x04
   1b2dc:	84 e8       	ldi	r24, 0x84	; 132
   1b2de:	90 e3       	ldi	r25, 0x30	; 48
   1b2e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b2e2:	81 83       	std	Z+1, r24	; 0x01
   1b2e4:	92 83       	std	Z+2, r25	; 0x02
   1b2e6:	a3 83       	std	Z+3, r26	; 0x03
   1b2e8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b2ec:	68 e0       	ldi	r22, 0x08	; 8
   1b2ee:	79 e0       	ldi	r23, 0x09	; 9
   1b2f0:	c7 01       	movw	r24, r14
   1b2f2:	0e 94 3a cd 	call	0x19a74	; 0x19a74 <lif_open_volume>
   1b2f6:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b2f8:	00 97       	sbiw	r24, 0x00	; 0
   1b2fa:	09 f4       	brne	.+2      	; 0x1b2fe <lif_del_file+0x86>
   1b2fc:	4b c0       	rjmp	.+150    	; 0x1b394 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b2fe:	b8 01       	movw	r22, r16
   1b300:	0e 94 0f d0 	call	0x1a01e	; 0x1a01e <lif_find_file>
    if(index == -1)
   1b304:	8f 3f       	cpi	r24, 0xFF	; 255
   1b306:	ff ef       	ldi	r31, 0xFF	; 255
   1b308:	9f 07       	cpc	r25, r31
   1b30a:	a1 f4       	brne	.+40     	; 0x1b334 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b30c:	ce 01       	movw	r24, r28
   1b30e:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b312:	ed b7       	in	r30, 0x3d	; 61
   1b314:	fe b7       	in	r31, 0x3e	; 62
   1b316:	17 83       	std	Z+7, r17	; 0x07
   1b318:	06 83       	std	Z+6, r16	; 0x06
   1b31a:	f5 82       	std	Z+5, r15	; 0x05
   1b31c:	e4 82       	std	Z+4, r14	; 0x04
   1b31e:	8c e5       	ldi	r24, 0x5C	; 92
   1b320:	90 e3       	ldi	r25, 0x30	; 48
   1b322:	a0 e0       	ldi	r26, 0x00	; 0
   1b324:	81 83       	std	Z+1, r24	; 0x01
   1b326:	92 83       	std	Z+2, r25	; 0x02
   1b328:	a3 83       	std	Z+3, r26	; 0x03
   1b32a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        return(0);
   1b32e:	80 e0       	ldi	r24, 0x00	; 0
   1b330:	90 e0       	ldi	r25, 0x00	; 0
   1b332:	32 c0       	rjmp	.+100    	; 0x1b398 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b334:	2a a1       	ldd	r18, Y+34	; 0x22
   1b336:	3b a1       	ldd	r19, Y+35	; 0x23
   1b338:	21 50       	subi	r18, 0x01	; 1
   1b33a:	31 09       	sbc	r19, r1
   1b33c:	fe 01       	movw	r30, r28
   1b33e:	e6 5a       	subi	r30, 0xA6	; 166
   1b340:	ff 4f       	sbci	r31, 0xFF	; 255
   1b342:	82 17       	cp	r24, r18
   1b344:	93 07       	cpc	r25, r19
   1b346:	2c f0       	brlt	.+10     	; 0x1b352 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b348:	2f ef       	ldi	r18, 0xFF	; 255
   1b34a:	3f ef       	ldi	r19, 0xFF	; 255
   1b34c:	31 83       	std	Z+1, r19	; 0x01
   1b34e:	20 83       	st	Z, r18
   1b350:	02 c0       	rjmp	.+4      	; 0x1b356 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b352:	11 82       	std	Z+1, r1	; 0x01
   1b354:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b356:	bc 01       	movw	r22, r24
   1b358:	ce 01       	movw	r24, r28
   1b35a:	0e 94 72 c7 	call	0x18ee4	; 0x18ee4 <lif_writedirindex>
   1b35e:	89 2b       	or	r24, r25
   1b360:	21 f4       	brne	.+8      	; 0x1b36a <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b362:	ce 01       	movw	r24, r28
   1b364:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1b368:	15 c0       	rjmp	.+42     	; 0x1b394 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b36a:	ce 01       	movw	r24, r28
   1b36c:	0e 94 e6 c7 	call	0x18fcc	; 0x18fcc <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b370:	ce 01       	movw	r24, r28
   1b372:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b376:	ed b7       	in	r30, 0x3d	; 61
   1b378:	fe b7       	in	r31, 0x3e	; 62
   1b37a:	15 83       	std	Z+5, r17	; 0x05
   1b37c:	04 83       	std	Z+4, r16	; 0x04
   1b37e:	8d e4       	ldi	r24, 0x4D	; 77
   1b380:	90 e3       	ldi	r25, 0x30	; 48
   1b382:	a0 e0       	ldi	r26, 0x00	; 0
   1b384:	81 83       	std	Z+1, r24	; 0x01
   1b386:	92 83       	std	Z+2, r25	; 0x02
   1b388:	a3 83       	std	Z+3, r26	; 0x03
   1b38a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    return(1);
   1b38e:	81 e0       	ldi	r24, 0x01	; 1
   1b390:	90 e0       	ldi	r25, 0x00	; 0
   1b392:	02 c0       	rjmp	.+4      	; 0x1b398 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b394:	8f ef       	ldi	r24, 0xFF	; 255
   1b396:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b398:	cd b7       	in	r28, 0x3d	; 61
   1b39a:	de b7       	in	r29, 0x3e	; 62
   1b39c:	27 96       	adiw	r28, 0x07	; 7
   1b39e:	e6 e0       	ldi	r30, 0x06	; 6
   1b3a0:	da c7       	rjmp	.+4020   	; 0x1c356 <__epilogue_restores__+0x18>

0001b3a2 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b3a2:	a7 e0       	ldi	r26, 0x07	; 7
   1b3a4:	b0 e0       	ldi	r27, 0x00	; 0
   1b3a6:	e6 ed       	ldi	r30, 0xD6	; 214
   1b3a8:	f9 ed       	ldi	r31, 0xD9	; 217
   1b3aa:	b5 c7       	rjmp	.+3946   	; 0x1c316 <__prologue_saves__+0x10>
   1b3ac:	6c 01       	movw	r12, r24
   1b3ae:	8b 01       	movw	r16, r22
   1b3b0:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b3b2:	fc 01       	movw	r30, r24
   1b3b4:	80 81       	ld	r24, Z
   1b3b6:	81 11       	cpse	r24, r1
   1b3b8:	03 c0       	rjmp	.+6      	; 0x1b3c0 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b3ba:	85 e2       	ldi	r24, 0x25	; 37
   1b3bc:	90 e3       	ldi	r25, 0x30	; 48
   1b3be:	06 c0       	rjmp	.+12     	; 0x1b3cc <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b3c0:	fb 01       	movw	r30, r22
   1b3c2:	80 81       	ld	r24, Z
   1b3c4:	81 11       	cpse	r24, r1
   1b3c6:	0b c0       	rjmp	.+22     	; 0x1b3de <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b3c8:	8e ef       	ldi	r24, 0xFE	; 254
   1b3ca:	9f e2       	ldi	r25, 0x2F	; 47
   1b3cc:	a0 e0       	ldi	r26, 0x00	; 0
   1b3ce:	ed b7       	in	r30, 0x3d	; 61
   1b3d0:	fe b7       	in	r31, 0x3e	; 62
   1b3d2:	81 83       	std	Z+1, r24	; 0x01
   1b3d4:	92 83       	std	Z+2, r25	; 0x02
   1b3d6:	a3 83       	std	Z+3, r26	; 0x03
   1b3d8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1b3dc:	58 c0       	rjmp	.+176    	; 0x1b48e <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b3de:	fa 01       	movw	r30, r20
   1b3e0:	80 81       	ld	r24, Z
   1b3e2:	81 11       	cpse	r24, r1
   1b3e4:	03 c0       	rjmp	.+6      	; 0x1b3ec <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b3e6:	87 ed       	ldi	r24, 0xD7	; 215
   1b3e8:	9f e2       	ldi	r25, 0x2F	; 47
   1b3ea:	f0 cf       	rjmp	.-32     	; 0x1b3cc <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b3ec:	ca 01       	movw	r24, r20
   1b3ee:	0e 94 cc be 	call	0x17d98	; 0x17d98 <lif_checkname>
   1b3f2:	89 2b       	or	r24, r25
   1b3f4:	19 f4       	brne	.+6      	; 0x1b3fc <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b3f6:	81 ea       	ldi	r24, 0xA1	; 161
   1b3f8:	9f e2       	ldi	r25, 0x2F	; 47
   1b3fa:	e8 cf       	rjmp	.-48     	; 0x1b3cc <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b3fc:	68 e0       	ldi	r22, 0x08	; 8
   1b3fe:	79 e0       	ldi	r23, 0x09	; 9
   1b400:	c6 01       	movw	r24, r12
   1b402:	0e 94 3a cd 	call	0x19a74	; 0x19a74 <lif_open_volume>
   1b406:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b408:	00 97       	sbiw	r24, 0x00	; 0
   1b40a:	09 f4       	brne	.+2      	; 0x1b40e <lif_rename_file+0x6c>
   1b40c:	40 c0       	rjmp	.+128    	; 0x1b48e <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b40e:	b8 01       	movw	r22, r16
   1b410:	0e 94 0f d0 	call	0x1a01e	; 0x1a01e <lif_find_file>
   1b414:	5c 01       	movw	r10, r24
    if(index == -1)
   1b416:	01 96       	adiw	r24, 0x01	; 1
   1b418:	a1 f4       	brne	.+40     	; 0x1b442 <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b41a:	ed b7       	in	r30, 0x3d	; 61
   1b41c:	fe b7       	in	r31, 0x3e	; 62
   1b41e:	17 83       	std	Z+7, r17	; 0x07
   1b420:	06 83       	std	Z+6, r16	; 0x06
   1b422:	d5 82       	std	Z+5, r13	; 0x05
   1b424:	c4 82       	std	Z+4, r12	; 0x04
   1b426:	88 e7       	ldi	r24, 0x78	; 120
   1b428:	9f e2       	ldi	r25, 0x2F	; 47
   1b42a:	a0 e0       	ldi	r26, 0x00	; 0
   1b42c:	81 83       	std	Z+1, r24	; 0x01
   1b42e:	92 83       	std	Z+2, r25	; 0x02
   1b430:	a3 83       	std	Z+3, r26	; 0x03
   1b432:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b436:	ce 01       	movw	r24, r28
   1b438:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b43c:	80 e0       	ldi	r24, 0x00	; 0
   1b43e:	90 e0       	ldi	r25, 0x00	; 0
   1b440:	28 c0       	rjmp	.+80     	; 0x1b492 <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b442:	4a e0       	ldi	r20, 0x0A	; 10
   1b444:	50 e0       	ldi	r21, 0x00	; 0
   1b446:	b7 01       	movw	r22, r14
   1b448:	ce 01       	movw	r24, r28
   1b44a:	81 5b       	subi	r24, 0xB1	; 177
   1b44c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b44e:	0e 94 06 bf 	call	0x17e0c	; 0x17e0c <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b452:	b5 01       	movw	r22, r10
   1b454:	ce 01       	movw	r24, r28
   1b456:	0e 94 72 c7 	call	0x18ee4	; 0x18ee4 <lif_writedirindex>
   1b45a:	89 2b       	or	r24, r25
   1b45c:	21 f4       	brne	.+8      	; 0x1b466 <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b45e:	ce 01       	movw	r24, r28
   1b460:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
   1b464:	14 c0       	rjmp	.+40     	; 0x1b48e <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b466:	ed b7       	in	r30, 0x3d	; 61
   1b468:	fe b7       	in	r31, 0x3e	; 62
   1b46a:	f7 82       	std	Z+7, r15	; 0x07
   1b46c:	e6 82       	std	Z+6, r14	; 0x06
   1b46e:	15 83       	std	Z+5, r17	; 0x05
   1b470:	04 83       	std	Z+4, r16	; 0x04
   1b472:	81 e6       	ldi	r24, 0x61	; 97
   1b474:	9f e2       	ldi	r25, 0x2F	; 47
   1b476:	a0 e0       	ldi	r26, 0x00	; 0
   1b478:	81 83       	std	Z+1, r24	; 0x01
   1b47a:	92 83       	std	Z+2, r25	; 0x02
   1b47c:	a3 83       	std	Z+3, r26	; 0x03
   1b47e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b482:	ce 01       	movw	r24, r28
   1b484:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b488:	81 e0       	ldi	r24, 0x01	; 1
   1b48a:	90 e0       	ldi	r25, 0x00	; 0
   1b48c:	02 c0       	rjmp	.+4      	; 0x1b492 <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b48e:	8f ef       	ldi	r24, 0xFF	; 255
   1b490:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b492:	cd b7       	in	r28, 0x3d	; 61
   1b494:	de b7       	in	r29, 0x3e	; 62
   1b496:	27 96       	adiw	r28, 0x07	; 7
   1b498:	ea e0       	ldi	r30, 0x0A	; 10
   1b49a:	59 c7       	rjmp	.+3762   	; 0x1c34e <__epilogue_restores__+0x10>

0001b49c <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b49c:	4f 92       	push	r4
   1b49e:	5f 92       	push	r5
   1b4a0:	6f 92       	push	r6
   1b4a2:	7f 92       	push	r7
   1b4a4:	af 92       	push	r10
   1b4a6:	bf 92       	push	r11
   1b4a8:	cf 92       	push	r12
   1b4aa:	df 92       	push	r13
   1b4ac:	ef 92       	push	r14
   1b4ae:	ff 92       	push	r15
   1b4b0:	0f 93       	push	r16
   1b4b2:	1f 93       	push	r17
   1b4b4:	cf 93       	push	r28
   1b4b6:	df 93       	push	r29
   1b4b8:	ad b7       	in	r26, 0x3d	; 61
   1b4ba:	be b7       	in	r27, 0x3e	; 62
   1b4bc:	17 97       	sbiw	r26, 0x07	; 7
   1b4be:	0f b6       	in	r0, 0x3f	; 63
   1b4c0:	f8 94       	cli
   1b4c2:	be bf       	out	0x3e, r27	; 62
   1b4c4:	0f be       	out	0x3f, r0	; 63
   1b4c6:	ad bf       	out	0x3d, r26	; 61
   1b4c8:	27 01       	movw	r4, r14
   1b4ca:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b4cc:	dc 01       	movw	r26, r24
   1b4ce:	ec 91       	ld	r30, X
   1b4d0:	e1 11       	cpse	r30, r1
   1b4d2:	03 c0       	rjmp	.+6      	; 0x1b4da <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b4d4:	88 e3       	ldi	r24, 0x38	; 56
   1b4d6:	9f e2       	ldi	r25, 0x2F	; 47
   1b4d8:	16 c0       	rjmp	.+44     	; 0x1b506 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b4da:	db 01       	movw	r26, r22
   1b4dc:	ec 91       	ld	r30, X
   1b4de:	e1 11       	cpse	r30, r1
   1b4e0:	03 c0       	rjmp	.+6      	; 0x1b4e8 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b4e2:	83 e1       	ldi	r24, 0x13	; 19
   1b4e4:	9f e2       	ldi	r25, 0x2F	; 47
   1b4e6:	0f c0       	rjmp	.+30     	; 0x1b506 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b4e8:	21 15       	cp	r18, r1
   1b4ea:	31 05       	cpc	r19, r1
   1b4ec:	41 05       	cpc	r20, r1
   1b4ee:	51 05       	cpc	r21, r1
   1b4f0:	19 f4       	brne	.+6      	; 0x1b4f8 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b4f2:	80 ef       	ldi	r24, 0xF0	; 240
   1b4f4:	9e e2       	ldi	r25, 0x2E	; 46
   1b4f6:	07 c0       	rjmp	.+14     	; 0x1b506 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b4f8:	e1 14       	cp	r14, r1
   1b4fa:	f1 04       	cpc	r15, r1
   1b4fc:	01 05       	cpc	r16, r1
   1b4fe:	11 05       	cpc	r17, r1
   1b500:	59 f4       	brne	.+22     	; 0x1b518 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b502:	80 ed       	ldi	r24, 0xD0	; 208
   1b504:	9e e2       	ldi	r25, 0x2E	; 46
   1b506:	a0 e0       	ldi	r26, 0x00	; 0
   1b508:	ed b7       	in	r30, 0x3d	; 61
   1b50a:	fe b7       	in	r31, 0x3e	; 62
   1b50c:	81 83       	std	Z+1, r24	; 0x01
   1b50e:	92 83       	std	Z+2, r25	; 0x02
   1b510:	a3 83       	std	Z+3, r26	; 0x03
   1b512:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1b516:	2b c0       	rjmp	.+86     	; 0x1b56e <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b518:	67 01       	movw	r12, r14
   1b51a:	78 01       	movw	r14, r16
   1b51c:	f2 e0       	ldi	r31, 0x02	; 2
   1b51e:	cf 1a       	sub	r12, r31
   1b520:	d1 08       	sbc	r13, r1
   1b522:	e1 08       	sbc	r14, r1
   1b524:	f1 08       	sbc	r15, r1
   1b526:	56 01       	movw	r10, r12
   1b528:	67 01       	movw	r12, r14
   1b52a:	a2 1a       	sub	r10, r18
   1b52c:	b3 0a       	sbc	r11, r19
   1b52e:	c4 0a       	sbc	r12, r20
   1b530:	d5 0a       	sbc	r13, r21
   1b532:	79 01       	movw	r14, r18
   1b534:	8a 01       	movw	r16, r20
   1b536:	22 e0       	ldi	r18, 0x02	; 2
   1b538:	30 e0       	ldi	r19, 0x00	; 0
   1b53a:	40 e0       	ldi	r20, 0x00	; 0
   1b53c:	50 e0       	ldi	r21, 0x00	; 0
   1b53e:	0e 94 f0 c8 	call	0x191e0	; 0x191e0 <lif_create_volume>
    if(LIF == NULL)
   1b542:	00 97       	sbiw	r24, 0x00	; 0
   1b544:	a1 f0       	breq	.+40     	; 0x1b56e <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b546:	0e 94 7d c6 	call	0x18cfa	; 0x18cfa <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b54a:	82 01       	movw	r16, r4
   1b54c:	d6 2d       	mov	r29, r6
   1b54e:	c7 2d       	mov	r28, r7
   1b550:	ed b7       	in	r30, 0x3d	; 61
   1b552:	fe b7       	in	r31, 0x3e	; 62
   1b554:	44 82       	std	Z+4, r4	; 0x04
   1b556:	15 83       	std	Z+5, r17	; 0x05
   1b558:	66 82       	std	Z+6, r6	; 0x06
   1b55a:	77 82       	std	Z+7, r7	; 0x07
   1b55c:	80 eb       	ldi	r24, 0xB0	; 176
   1b55e:	9e e2       	ldi	r25, 0x2E	; 46
   1b560:	a0 e0       	ldi	r26, 0x00	; 0
   1b562:	81 83       	std	Z+1, r24	; 0x01
   1b564:	92 83       	std	Z+2, r25	; 0x02
   1b566:	a3 83       	std	Z+3, r26	; 0x03
   1b568:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    return(end);
   1b56c:	04 c0       	rjmp	.+8      	; 0x1b576 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b56e:	0f ef       	ldi	r16, 0xFF	; 255
   1b570:	1f ef       	ldi	r17, 0xFF	; 255
   1b572:	df ef       	ldi	r29, 0xFF	; 255
   1b574:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b576:	b8 01       	movw	r22, r16
   1b578:	8d 2f       	mov	r24, r29
   1b57a:	9c 2f       	mov	r25, r28
   1b57c:	ad b7       	in	r26, 0x3d	; 61
   1b57e:	be b7       	in	r27, 0x3e	; 62
   1b580:	17 96       	adiw	r26, 0x07	; 7
   1b582:	0f b6       	in	r0, 0x3f	; 63
   1b584:	f8 94       	cli
   1b586:	be bf       	out	0x3e, r27	; 62
   1b588:	0f be       	out	0x3f, r0	; 63
   1b58a:	ad bf       	out	0x3d, r26	; 61
   1b58c:	df 91       	pop	r29
   1b58e:	cf 91       	pop	r28
   1b590:	1f 91       	pop	r17
   1b592:	0f 91       	pop	r16
   1b594:	ff 90       	pop	r15
   1b596:	ef 90       	pop	r14
   1b598:	df 90       	pop	r13
   1b59a:	cf 90       	pop	r12
   1b59c:	bf 90       	pop	r11
   1b59e:	af 90       	pop	r10
   1b5a0:	7f 90       	pop	r7
   1b5a2:	6f 90       	pop	r6
   1b5a4:	5f 90       	pop	r5
   1b5a6:	4f 90       	pop	r4
   1b5a8:	08 95       	ret

0001b5aa <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b5aa:	a5 e0       	ldi	r26, 0x05	; 5
   1b5ac:	b0 e0       	ldi	r27, 0x00	; 0
   1b5ae:	ea ed       	ldi	r30, 0xDA	; 218
   1b5b0:	fa ed       	ldi	r31, 0xDA	; 218
   1b5b2:	af c6       	rjmp	.+3422   	; 0x1c312 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b5b4:	82 30       	cpi	r24, 0x02	; 2
   1b5b6:	91 05       	cpc	r25, r1
   1b5b8:	0c f4       	brge	.+2      	; 0x1b5bc <lif_tests+0x12>
   1b5ba:	52 c1       	rjmp	.+676    	; 0x1b860 <lif_tests+0x2b6>
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b5bc:	fb 01       	movw	r30, r22
   1b5be:	02 81       	ldd	r16, Z+2	; 0x02
   1b5c0:	13 81       	ldd	r17, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b5c2:	01 15       	cp	r16, r1
   1b5c4:	11 05       	cpc	r17, r1
   1b5c6:	09 f4       	brne	.+2      	; 0x1b5ca <lif_tests+0x20>
   1b5c8:	4b c1       	rjmp	.+662    	; 0x1b860 <lif_tests+0x2b6>
   1b5ca:	f8 01       	movw	r30, r16
   1b5cc:	20 81       	ld	r18, Z
   1b5ce:	22 23       	and	r18, r18
   1b5d0:	09 f4       	brne	.+2      	; 0x1b5d4 <lif_tests+0x2a>
   1b5d2:	46 c1       	rjmp	.+652    	; 0x1b860 <lif_tests+0x2b6>
   1b5d4:	7b 01       	movw	r14, r22
   1b5d6:	6c 01       	movw	r12, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b5d8:	63 e7       	ldi	r22, 0x73	; 115
   1b5da:	76 e1       	ldi	r23, 0x16	; 22
   1b5dc:	c8 01       	movw	r24, r16
   1b5de:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1b5e2:	89 2b       	or	r24, r25
   1b5e4:	29 f0       	breq	.+10     	; 0x1b5f0 <lif_tests+0x46>
    {
        lif_help(1);
   1b5e6:	81 e0       	ldi	r24, 0x01	; 1
   1b5e8:	90 e0       	ldi	r25, 0x00	; 0
   1b5ea:	0e 94 a2 bc 	call	0x17944	; 0x17944 <lif_help>
   1b5ee:	38 c1       	rjmp	.+624    	; 0x1b860 <lif_tests+0x2b6>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b5f0:	62 e7       	ldi	r22, 0x72	; 114
   1b5f2:	76 e1       	ldi	r23, 0x16	; 22
   1b5f4:	c8 01       	movw	r24, r16
   1b5f6:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1b5fa:	89 2b       	or	r24, r25
   1b5fc:	a1 f7       	brne	.-24     	; 0x1b5e6 <lif_tests+0x3c>
   1b5fe:	68 e7       	ldi	r22, 0x78	; 120
   1b600:	76 e1       	ldi	r23, 0x16	; 22
   1b602:	c8 01       	movw	r24, r16
   1b604:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1b608:	89 2b       	or	r24, r25
   1b60a:	69 f7       	brne	.-38     	; 0x1b5e6 <lif_tests+0x3c>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b60c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b610:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b614:	9b 7f       	andi	r25, 0xFB	; 251
   1b616:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b61a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b61e:	96 01       	movw	r18, r12
   1b620:	42 e0       	ldi	r20, 0x02	; 2
   1b622:	50 e0       	ldi	r21, 0x00	; 0
   1b624:	6b e7       	ldi	r22, 0x7B	; 123
   1b626:	76 e1       	ldi	r23, 0x16	; 22
   1b628:	c8 01       	movw	r24, r16
   1b62a:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b62e:	89 2b       	or	r24, r25
   1b630:	79 f0       	breq	.+30     	; 0x1b650 <lif_tests+0xa6>
    {
        debuglevel |= 0x400;
   1b632:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b636:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b63a:	94 60       	ori	r25, 0x04	; 4
   1b63c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b640:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b644:	f7 01       	movw	r30, r14
   1b646:	04 81       	ldd	r16, Z+4	; 0x04
   1b648:	15 81       	ldd	r17, Z+5	; 0x05
   1b64a:	c3 e0       	ldi	r28, 0x03	; 3
   1b64c:	d0 e0       	ldi	r29, 0x00	; 0
   1b64e:	02 c0       	rjmp	.+4      	; 0x1b654 <lif_tests+0xaa>
    if(argc < 2)
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b650:	c2 e0       	ldi	r28, 0x02	; 2
   1b652:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b654:	5e 01       	movw	r10, r28
   1b656:	f3 e0       	ldi	r31, 0x03	; 3
   1b658:	af 0e       	add	r10, r31
   1b65a:	b1 1c       	adc	r11, r1
   1b65c:	96 01       	movw	r18, r12
   1b65e:	a5 01       	movw	r20, r10
   1b660:	6e e7       	ldi	r22, 0x7E	; 126
   1b662:	76 e1       	ldi	r23, 0x16	; 22
   1b664:	c8 01       	movw	r24, r16
   1b666:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b66a:	89 2b       	or	r24, r25
   1b66c:	61 f0       	breq	.+24     	; 0x1b686 <lif_tests+0xdc>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b66e:	cc 0f       	add	r28, r28
   1b670:	dd 1f       	adc	r29, r29
   1b672:	ce 0d       	add	r28, r14
   1b674:	df 1d       	adc	r29, r15
   1b676:	4c 81       	ldd	r20, Y+4	; 0x04
   1b678:	5d 81       	ldd	r21, Y+5	; 0x05
   1b67a:	6a 81       	ldd	r22, Y+2	; 0x02
   1b67c:	7b 81       	ldd	r23, Y+3	; 0x03
   1b67e:	88 81       	ld	r24, Y
   1b680:	99 81       	ldd	r25, Y+1	; 0x01
   1b682:	71 dc       	rcall	.-1822   	; 0x1af66 <lif_add_lif_file>
   1b684:	ed c0       	rjmp	.+474    	; 0x1b860 <lif_tests+0x2b6>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b686:	96 01       	movw	r18, r12
   1b688:	a5 01       	movw	r20, r10
   1b68a:	65 e8       	ldi	r22, 0x85	; 133
   1b68c:	76 e1       	ldi	r23, 0x16	; 22
   1b68e:	c8 01       	movw	r24, r16
   1b690:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b694:	89 2b       	or	r24, r25
   1b696:	69 f0       	breq	.+26     	; 0x1b6b2 <lif_tests+0x108>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b698:	cc 0f       	add	r28, r28
   1b69a:	dd 1f       	adc	r29, r29
   1b69c:	ce 0d       	add	r28, r14
   1b69e:	df 1d       	adc	r29, r15
   1b6a0:	4c 81       	ldd	r20, Y+4	; 0x04
   1b6a2:	5d 81       	ldd	r21, Y+5	; 0x05
   1b6a4:	6a 81       	ldd	r22, Y+2	; 0x02
   1b6a6:	7b 81       	ldd	r23, Y+3	; 0x03
   1b6a8:	88 81       	ld	r24, Y
   1b6aa:	99 81       	ldd	r25, Y+1	; 0x01
   1b6ac:	0e 94 90 d2 	call	0x1a520	; 0x1a520 <lif_add_ascii_file_as_e010>
   1b6b0:	d7 c0       	rjmp	.+430    	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b6b2:	96 01       	movw	r18, r12
   1b6b4:	a5 01       	movw	r20, r10
   1b6b6:	69 e8       	ldi	r22, 0x89	; 137
   1b6b8:	76 e1       	ldi	r23, 0x16	; 22
   1b6ba:	c8 01       	movw	r24, r16
   1b6bc:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b6c0:	89 2b       	or	r24, r25
   1b6c2:	09 f4       	brne	.+2      	; 0x1b6c6 <lif_tests+0x11c>
   1b6c4:	40 c0       	rjmp	.+128    	; 0x1b746 <lif_tests+0x19c>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b6c6:	cc 0f       	add	r28, r28
   1b6c8:	dd 1f       	adc	r29, r29
   1b6ca:	ce 0d       	add	r28, r14
   1b6cc:	df 1d       	adc	r29, r15
   1b6ce:	c8 80       	ld	r12, Y
   1b6d0:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b6d2:	aa 80       	ldd	r10, Y+2	; 0x02
   1b6d4:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b6d6:	0c 80       	ldd	r0, Y+4	; 0x04
   1b6d8:	dd 81       	ldd	r29, Y+5	; 0x05
   1b6da:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b6dc:	64 e9       	ldi	r22, 0x94	; 148
   1b6de:	76 e1       	ldi	r23, 0x16	; 22
   1b6e0:	ce 01       	movw	r24, r28
   1b6e2:	0e 94 1a 30 	call	0x6034	; 0x6034 <MATCHI_LEN>
   1b6e6:	89 2b       	or	r24, r25
   1b6e8:	09 f0       	breq	.+2      	; 0x1b6ec <lif_tests+0x142>
            model +=2;
   1b6ea:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b6ec:	40 e0       	ldi	r20, 0x00	; 0
   1b6ee:	50 e0       	ldi	r21, 0x00	; 0
   1b6f0:	60 e0       	ldi	r22, 0x00	; 0
   1b6f2:	70 e0       	ldi	r23, 0x00	; 0
   1b6f4:	ce 01       	movw	r24, r28
   1b6f6:	0e 94 f9 9f 	call	0x13ff2	; 0x13ff2 <hpdir_find_drive>
   1b6fa:	89 2b       	or	r24, r25
   1b6fc:	b9 f0       	breq	.+46     	; 0x1b72c <lif_tests+0x182>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b6fe:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <hpdir+0xac>
   1b702:	70 91 95 21 	lds	r23, 0x2195	; 0x802195 <hpdir+0xad>
   1b706:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <hpdir+0xae>
   1b70a:	90 91 97 21 	lds	r25, 0x2197	; 0x802197 <hpdir+0xaf>
   1b70e:	0e 94 dc 9f 	call	0x13fb8	; 0x13fb8 <lif_dir_count>
   1b712:	9b 01       	movw	r18, r22
   1b714:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b716:	e0 90 94 21 	lds	r14, 0x2194	; 0x802194 <hpdir+0xac>
   1b71a:	f0 90 95 21 	lds	r15, 0x2195	; 0x802195 <hpdir+0xad>
   1b71e:	00 91 96 21 	lds	r16, 0x2196	; 0x802196 <hpdir+0xae>
   1b722:	10 91 97 21 	lds	r17, 0x2197	; 0x802197 <hpdir+0xaf>
   1b726:	b5 01       	movw	r22, r10
   1b728:	c6 01       	movw	r24, r12
   1b72a:	2e c0       	rjmp	.+92     	; 0x1b788 <lif_tests+0x1de>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b72c:	ed b7       	in	r30, 0x3d	; 61
   1b72e:	fe b7       	in	r31, 0x3e	; 62
   1b730:	d5 83       	std	Z+5, r29	; 0x05
   1b732:	c4 83       	std	Z+4, r28	; 0x04
   1b734:	84 ee       	ldi	r24, 0xE4	; 228
   1b736:	90 e4       	ldi	r25, 0x40	; 64
   1b738:	a0 e0       	ldi	r26, 0x00	; 0
   1b73a:	81 83       	std	Z+1, r24	; 0x01
   1b73c:	92 83       	std	Z+2, r25	; 0x02
   1b73e:	a3 83       	std	Z+3, r26	; 0x03
   1b740:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1b744:	8d c0       	rjmp	.+282    	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b746:	96 01       	movw	r18, r12
   1b748:	ae 01       	movw	r20, r28
   1b74a:	4c 5f       	subi	r20, 0xFC	; 252
   1b74c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b74e:	67 e9       	ldi	r22, 0x97	; 151
   1b750:	76 e1       	ldi	r23, 0x16	; 22
   1b752:	c8 01       	movw	r24, r16
   1b754:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b758:	89 2b       	or	r24, r25
   1b75a:	c1 f0       	breq	.+48     	; 0x1b78c <lif_tests+0x1e2>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b75c:	cc 0f       	add	r28, r28
   1b75e:	dd 1f       	adc	r29, r29
   1b760:	ce 0d       	add	r28, r14
   1b762:	df 1d       	adc	r29, r15
   1b764:	8c 81       	ldd	r24, Y+4	; 0x04
   1b766:	9d 81       	ldd	r25, Y+5	; 0x05
   1b768:	0e 94 2f 45 	call	0x8a5e	; 0x8a5e <atol>
   1b76c:	4b 01       	movw	r8, r22
   1b76e:	5c 01       	movw	r10, r24
   1b770:	8e 81       	ldd	r24, Y+6	; 0x06
   1b772:	9f 81       	ldd	r25, Y+7	; 0x07
   1b774:	0e 94 2f 45 	call	0x8a5e	; 0x8a5e <atol>
   1b778:	7b 01       	movw	r14, r22
   1b77a:	8c 01       	movw	r16, r24
   1b77c:	6a 81       	ldd	r22, Y+2	; 0x02
   1b77e:	7b 81       	ldd	r23, Y+3	; 0x03
   1b780:	a5 01       	movw	r20, r10
   1b782:	94 01       	movw	r18, r8
   1b784:	88 81       	ld	r24, Y
   1b786:	99 81       	ldd	r25, Y+1	; 0x01
   1b788:	89 de       	rcall	.-750    	; 0x1b49c <lif_create_image>
   1b78a:	6a c0       	rjmp	.+212    	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b78c:	96 01       	movw	r18, r12
   1b78e:	ae 01       	movw	r20, r28
   1b790:	4e 5f       	subi	r20, 0xFE	; 254
   1b792:	5f 4f       	sbci	r21, 0xFF	; 255
   1b794:	6e e9       	ldi	r22, 0x9E	; 158
   1b796:	76 e1       	ldi	r23, 0x16	; 22
   1b798:	c8 01       	movw	r24, r16
   1b79a:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b79e:	89 2b       	or	r24, r25
   1b7a0:	51 f0       	breq	.+20     	; 0x1b7b6 <lif_tests+0x20c>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b7a2:	cc 0f       	add	r28, r28
   1b7a4:	dd 1f       	adc	r29, r29
   1b7a6:	ce 0d       	add	r28, r14
   1b7a8:	df 1d       	adc	r29, r15
   1b7aa:	6a 81       	ldd	r22, Y+2	; 0x02
   1b7ac:	7b 81       	ldd	r23, Y+3	; 0x03
   1b7ae:	88 81       	ld	r24, Y
   1b7b0:	99 81       	ldd	r25, Y+1	; 0x01
   1b7b2:	62 dd       	rcall	.-1340   	; 0x1b278 <lif_del_file>
   1b7b4:	55 c0       	rjmp	.+170    	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b7b6:	96 01       	movw	r18, r12
   1b7b8:	ae 01       	movw	r20, r28
   1b7ba:	4f 5f       	subi	r20, 0xFF	; 255
   1b7bc:	5f 4f       	sbci	r21, 0xFF	; 255
   1b7be:	68 ed       	ldi	r22, 0xD8	; 216
   1b7c0:	7b e0       	ldi	r23, 0x0B	; 11
   1b7c2:	c8 01       	movw	r24, r16
   1b7c4:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b7c8:	89 2b       	or	r24, r25
   1b7ca:	49 f0       	breq	.+18     	; 0x1b7de <lif_tests+0x234>
    {
        lif_dir(argv[ind]);
   1b7cc:	cc 0f       	add	r28, r28
   1b7ce:	dd 1f       	adc	r29, r29
   1b7d0:	ce 0d       	add	r28, r14
   1b7d2:	df 1d       	adc	r29, r15
   1b7d4:	88 81       	ld	r24, Y
   1b7d6:	99 81       	ldd	r25, Y+1	; 0x01
   1b7d8:	0e 94 3a ce 	call	0x19c74	; 0x19c74 <lif_dir>
   1b7dc:	41 c0       	rjmp	.+130    	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b7de:	96 01       	movw	r18, r12
   1b7e0:	a5 01       	movw	r20, r10
   1b7e2:	62 ea       	ldi	r22, 0xA2	; 162
   1b7e4:	76 e1       	ldi	r23, 0x16	; 22
   1b7e6:	c8 01       	movw	r24, r16
   1b7e8:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b7ec:	89 2b       	or	r24, r25
   1b7ee:	61 f0       	breq	.+24     	; 0x1b808 <lif_tests+0x25e>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b7f0:	cc 0f       	add	r28, r28
   1b7f2:	dd 1f       	adc	r29, r29
   1b7f4:	ce 0d       	add	r28, r14
   1b7f6:	df 1d       	adc	r29, r15
   1b7f8:	4c 81       	ldd	r20, Y+4	; 0x04
   1b7fa:	5d 81       	ldd	r21, Y+5	; 0x05
   1b7fc:	6a 81       	ldd	r22, Y+2	; 0x02
   1b7fe:	7b 81       	ldd	r23, Y+3	; 0x03
   1b800:	88 81       	ld	r24, Y
   1b802:	99 81       	ldd	r25, Y+1	; 0x01
   1b804:	78 da       	rcall	.-2832   	; 0x1acf6 <lif_extract_lif_as_lif>
   1b806:	2c c0       	rjmp	.+88     	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b808:	96 01       	movw	r18, r12
   1b80a:	a5 01       	movw	r20, r10
   1b80c:	6d ea       	ldi	r22, 0xAD	; 173
   1b80e:	76 e1       	ldi	r23, 0x16	; 22
   1b810:	c8 01       	movw	r24, r16
   1b812:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b816:	89 2b       	or	r24, r25
   1b818:	69 f0       	breq	.+26     	; 0x1b834 <lif_tests+0x28a>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b81a:	cc 0f       	add	r28, r28
   1b81c:	dd 1f       	adc	r29, r29
   1b81e:	ce 0d       	add	r28, r14
   1b820:	df 1d       	adc	r29, r15
   1b822:	4c 81       	ldd	r20, Y+4	; 0x04
   1b824:	5d 81       	ldd	r21, Y+5	; 0x05
   1b826:	6a 81       	ldd	r22, Y+2	; 0x02
   1b828:	7b 81       	ldd	r23, Y+3	; 0x03
   1b82a:	88 81       	ld	r24, Y
   1b82c:	99 81       	ldd	r25, Y+1	; 0x01
   1b82e:	0e 94 cc d3 	call	0x1a798	; 0x1a798 <lif_extract_e010_as_ascii>
   1b832:	16 c0       	rjmp	.+44     	; 0x1b860 <lif_tests+0x2b6>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b834:	96 01       	movw	r18, r12
   1b836:	a5 01       	movw	r20, r10
   1b838:	65 ee       	ldi	r22, 0xE5	; 229
   1b83a:	7b e0       	ldi	r23, 0x0B	; 11
   1b83c:	c8 01       	movw	r24, r16
   1b83e:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <MATCHARGS>
   1b842:	00 97       	sbiw	r24, 0x00	; 0
   1b844:	79 f0       	breq	.+30     	; 0x1b864 <lif_tests+0x2ba>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b846:	ce 01       	movw	r24, r28
   1b848:	88 0f       	add	r24, r24
   1b84a:	99 1f       	adc	r25, r25
   1b84c:	e7 01       	movw	r28, r14
   1b84e:	c8 0f       	add	r28, r24
   1b850:	d9 1f       	adc	r29, r25
   1b852:	4c 81       	ldd	r20, Y+4	; 0x04
   1b854:	5d 81       	ldd	r21, Y+5	; 0x05
   1b856:	6a 81       	ldd	r22, Y+2	; 0x02
   1b858:	7b 81       	ldd	r23, Y+3	; 0x03
   1b85a:	88 81       	ld	r24, Y
   1b85c:	99 81       	ldd	r25, Y+1	; 0x01
   1b85e:	a1 dd       	rcall	.-1214   	; 0x1b3a2 <lif_rename_file>
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
        return (1);
   1b860:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1b862:	90 e0       	ldi	r25, 0x00	; 0
   1b864:	cd b7       	in	r28, 0x3d	; 61
   1b866:	de b7       	in	r29, 0x3e	; 62
   1b868:	25 96       	adiw	r28, 0x05	; 5
   1b86a:	ec e0       	ldi	r30, 0x0C	; 12
   1b86c:	6e c5       	rjmp	.+2780   	; 0x1c34a <__epilogue_restores__+0xc>

0001b86e <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1b86e:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <lcd_display_time>
   1b872:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <lcd_display_time+0x1>
   1b876:	01 96       	adiw	r24, 0x01	; 1
   1b878:	90 93 dc 19 	sts	0x19DC, r25	; 0x8019dc <lcd_display_time+0x1>
   1b87c:	80 93 db 19 	sts	0x19DB, r24	; 0x8019db <lcd_display_time>
   1b880:	08 95       	ret

0001b882 <copyright>:


///@brief Display Copyright
///@return void
void copyright()
{
   1b882:	00 d0       	rcall	.+0      	; 0x1b884 <copyright+0x2>
   1b884:	00 d0       	rcall	.+0      	; 0x1b886 <copyright+0x4>
   1b886:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b888:	81 ec       	ldi	r24, 0xC1	; 193
   1b88a:	96 e4       	ldi	r25, 0x46	; 70
   1b88c:	a0 e0       	ldi	r26, 0x00	; 0
   1b88e:	ed b7       	in	r30, 0x3d	; 61
   1b890:	fe b7       	in	r31, 0x3e	; 62
   1b892:	81 83       	std	Z+1, r24	; 0x01
   1b894:	92 83       	std	Z+2, r25	; 0x02
   1b896:	a3 83       	std	Z+3, r26	; 0x03
   1b898:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b89c:	82 ea       	ldi	r24, 0xA2	; 162
   1b89e:	96 e4       	ldi	r25, 0x46	; 70
   1b8a0:	a0 e0       	ldi	r26, 0x00	; 0
   1b8a2:	ed b7       	in	r30, 0x3d	; 61
   1b8a4:	fe b7       	in	r31, 0x3e	; 62
   1b8a6:	81 83       	std	Z+1, r24	; 0x01
   1b8a8:	92 83       	std	Z+2, r25	; 0x02
   1b8aa:	a3 83       	std	Z+3, r26	; 0x03
   1b8ac:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1b8b0:	85 e8       	ldi	r24, 0x85	; 133
   1b8b2:	96 e4       	ldi	r25, 0x46	; 70
   1b8b4:	a0 e0       	ldi	r26, 0x00	; 0
   1b8b6:	ed b7       	in	r30, 0x3d	; 61
   1b8b8:	fe b7       	in	r31, 0x3e	; 62
   1b8ba:	81 83       	std	Z+1, r24	; 0x01
   1b8bc:	92 83       	std	Z+2, r25	; 0x02
   1b8be:	a3 83       	std	Z+3, r26	; 0x03
   1b8c0:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf(" GNU version 3\n");
   1b8c4:	85 e7       	ldi	r24, 0x75	; 117
   1b8c6:	96 e4       	ldi	r25, 0x46	; 70
   1b8c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b8ca:	ed b7       	in	r30, 0x3d	; 61
   1b8cc:	fe b7       	in	r31, 0x3e	; 62
   1b8ce:	81 83       	std	Z+1, r24	; 0x01
   1b8d0:	92 83       	std	Z+2, r25	; 0x02
   1b8d2:	a3 83       	std	Z+3, r26	; 0x03
   1b8d4:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1b8d8:	8e e4       	ldi	r24, 0x4E	; 78
   1b8da:	96 e4       	ldi	r25, 0x46	; 70
   1b8dc:	a0 e0       	ldi	r26, 0x00	; 0
   1b8de:	ed b7       	in	r30, 0x3d	; 61
   1b8e0:	fe b7       	in	r31, 0x3e	; 62
   1b8e2:	81 83       	std	Z+1, r24	; 0x01
   1b8e4:	92 83       	std	Z+2, r25	; 0x02
   1b8e6:	a3 83       	std	Z+3, r26	; 0x03
   1b8e8:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1b8ec:	85 eb       	ldi	r24, 0xB5	; 181
   1b8ee:	96 e1       	ldi	r25, 0x16	; 22
   1b8f0:	ed b7       	in	r30, 0x3d	; 61
   1b8f2:	fe b7       	in	r31, 0x3e	; 62
   1b8f4:	95 83       	std	Z+5, r25	; 0x05
   1b8f6:	84 83       	std	Z+4, r24	; 0x04
   1b8f8:	84 e3       	ldi	r24, 0x34	; 52
   1b8fa:	96 e4       	ldi	r25, 0x46	; 70
   1b8fc:	a0 e0       	ldi	r26, 0x00	; 0
   1b8fe:	81 83       	std	Z+1, r24	; 0x01
   1b900:	92 83       	std	Z+2, r25	; 0x02
   1b902:	a3 83       	std	Z+3, r26	; 0x03
   1b904:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1b908:	89 ed       	ldi	r24, 0xD9	; 217
   1b90a:	96 e1       	ldi	r25, 0x16	; 22
   1b90c:	ed b7       	in	r30, 0x3d	; 61
   1b90e:	fe b7       	in	r31, 0x3e	; 62
   1b910:	95 83       	std	Z+5, r25	; 0x05
   1b912:	84 83       	std	Z+4, r24	; 0x04
   1b914:	8a e1       	ldi	r24, 0x1A	; 26
   1b916:	96 e4       	ldi	r25, 0x46	; 70
   1b918:	a0 e0       	ldi	r26, 0x00	; 0
   1b91a:	81 83       	std	Z+1, r24	; 0x01
   1b91c:	92 83       	std	Z+2, r25	; 0x02
   1b91e:	a3 83       	std	Z+3, r26	; 0x03
   1b920:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("\n");
   1b924:	88 e1       	ldi	r24, 0x18	; 24
   1b926:	96 e4       	ldi	r25, 0x46	; 70
   1b928:	a0 e0       	ldi	r26, 0x00	; 0
   1b92a:	ed b7       	in	r30, 0x3d	; 61
   1b92c:	fe b7       	in	r31, 0x3e	; 62
   1b92e:	81 83       	std	Z+1, r24	; 0x01
   1b930:	92 83       	std	Z+2, r25	; 0x02
   1b932:	a3 83       	std	Z+3, r26	; 0x03
   1b934:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
}
   1b938:	0f 90       	pop	r0
   1b93a:	0f 90       	pop	r0
   1b93c:	0f 90       	pop	r0
   1b93e:	0f 90       	pop	r0
   1b940:	0f 90       	pop	r0
   1b942:	08 95       	ret

0001b944 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1b944:	a1 e1       	ldi	r26, 0x11	; 17
   1b946:	b0 e0       	ldi	r27, 0x00	; 0
   1b948:	e7 ea       	ldi	r30, 0xA7	; 167
   1b94a:	fc ed       	ldi	r31, 0xDC	; 220
   1b94c:	e8 c4       	rjmp	.+2512   	; 0x1c31e <__prologue_saves__+0x18>
   1b94e:	ec 01       	movw	r28, r24
   1b950:	7b 01       	movw	r14, r22
   1b952:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1b954:	60 e0       	ldi	r22, 0x00	; 0
   1b956:	70 e0       	ldi	r23, 0x00	; 0
   1b958:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <normalize>
    memset(buf,0,max);
   1b95c:	a8 01       	movw	r20, r16
   1b95e:	60 e0       	ldi	r22, 0x00	; 0
   1b960:	70 e0       	ldi	r23, 0x00	; 0
   1b962:	c7 01       	movw	r24, r14
   1b964:	0e 94 7b e5 	call	0x1caf6	; 0x1caf6 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1b968:	88 85       	ldd	r24, Y+8	; 0x08
   1b96a:	99 85       	ldd	r25, Y+9	; 0x09
   1b96c:	0e 94 13 34 	call	0x6826	; 0x6826 <tm_mon_to_ascii>
   1b970:	28 81       	ld	r18, Y
   1b972:	39 81       	ldd	r19, Y+1	; 0x01
   1b974:	ed b7       	in	r30, 0x3d	; 61
   1b976:	fe b7       	in	r31, 0x3e	; 62
   1b978:	31 8b       	std	Z+17, r19	; 0x11
   1b97a:	20 8b       	std	Z+16, r18	; 0x10
   1b97c:	2a 81       	ldd	r18, Y+2	; 0x02
   1b97e:	3b 81       	ldd	r19, Y+3	; 0x03
   1b980:	37 87       	std	Z+15, r19	; 0x0f
   1b982:	26 87       	std	Z+14, r18	; 0x0e
   1b984:	2c 81       	ldd	r18, Y+4	; 0x04
   1b986:	3d 81       	ldd	r19, Y+5	; 0x05
   1b988:	35 87       	std	Z+13, r19	; 0x0d
   1b98a:	24 87       	std	Z+12, r18	; 0x0c
   1b98c:	2e 81       	ldd	r18, Y+6	; 0x06
   1b98e:	3f 81       	ldd	r19, Y+7	; 0x07
   1b990:	33 87       	std	Z+11, r19	; 0x0b
   1b992:	22 87       	std	Z+10, r18	; 0x0a
   1b994:	91 87       	std	Z+9, r25	; 0x09
   1b996:	80 87       	std	Z+8, r24	; 0x08
   1b998:	82 e0       	ldi	r24, 0x02	; 2
   1b99a:	96 e4       	ldi	r25, 0x46	; 70
   1b99c:	a0 e0       	ldi	r26, 0x00	; 0
   1b99e:	85 83       	std	Z+5, r24	; 0x05
   1b9a0:	96 83       	std	Z+6, r25	; 0x06
   1b9a2:	a7 83       	std	Z+7, r26	; 0x07
   1b9a4:	01 50       	subi	r16, 0x01	; 1
   1b9a6:	11 09       	sbc	r17, r1
   1b9a8:	14 83       	std	Z+4, r17	; 0x04
   1b9aa:	03 83       	std	Z+3, r16	; 0x03
   1b9ac:	f2 82       	std	Z+2, r15	; 0x02
   1b9ae:	e1 82       	std	Z+1, r14	; 0x01
   1b9b0:	0e 94 67 44 	call	0x88ce	; 0x88ce <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1b9b4:	c7 01       	movw	r24, r14
   1b9b6:	cd b7       	in	r28, 0x3d	; 61
   1b9b8:	de b7       	in	r29, 0x3e	; 62
   1b9ba:	61 96       	adiw	r28, 0x11	; 17
   1b9bc:	e6 e0       	ldi	r30, 0x06	; 6
   1b9be:	cb c4       	rjmp	.+2454   	; 0x1c356 <__epilogue_restores__+0x18>

0001b9c0 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1b9c0:	cf 93       	push	r28
   1b9c2:	00 d0       	rcall	.+0      	; 0x1b9c4 <lcd_backlight+0x4>
   1b9c4:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1b9c6:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1b9ca:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1b9ce:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1b9d2:	25 e0       	ldi	r18, 0x05	; 5
   1b9d4:	40 ef       	ldi	r20, 0xF0	; 240
   1b9d6:	52 e0       	ldi	r21, 0x02	; 2
   1b9d8:	60 e0       	ldi	r22, 0x00	; 0
   1b9da:	82 e7       	ldi	r24, 0x72	; 114
   1b9dc:	0e 94 a6 2a 	call	0x554c	; 0x554c <i2c_fn>
   1b9e0:	c8 2f       	mov	r28, r24
   1b9e2:	81 11       	cpse	r24, r1
   1b9e4:	0d c0       	rjmp	.+26     	; 0x1ba00 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1b9e6:	0e 94 aa 2c 	call	0x5954	; 0x5954 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1b9ea:	88 ee       	ldi	r24, 0xE8	; 232
   1b9ec:	95 e4       	ldi	r25, 0x45	; 69
   1b9ee:	a0 e0       	ldi	r26, 0x00	; 0
   1b9f0:	ed b7       	in	r30, 0x3d	; 61
   1b9f2:	fe b7       	in	r31, 0x3e	; 62
   1b9f4:	81 83       	std	Z+1, r24	; 0x01
   1b9f6:	92 83       	std	Z+2, r25	; 0x02
   1b9f8:	a3 83       	std	Z+3, r26	; 0x03
   1b9fa:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1b9fe:	01 c0       	rjmp	.+2      	; 0x1ba02 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1ba00:	c1 e0       	ldi	r28, 0x01	; 1
}
   1ba02:	8c 2f       	mov	r24, r28
   1ba04:	0f 90       	pop	r0
   1ba06:	0f 90       	pop	r0
   1ba08:	0f 90       	pop	r0
   1ba0a:	cf 91       	pop	r28
   1ba0c:	08 95       	ret

0001ba0e <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1ba0e:	cf 93       	push	r28
   1ba10:	ad b7       	in	r26, 0x3d	; 61
   1ba12:	be b7       	in	r27, 0x3e	; 62
   1ba14:	17 97       	sbiw	r26, 0x07	; 7
   1ba16:	0f b6       	in	r0, 0x3f	; 63
   1ba18:	f8 94       	cli
   1ba1a:	be bf       	out	0x3e, r27	; 62
   1ba1c:	0f be       	out	0x3f, r0	; 63
   1ba1e:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1ba20:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1ba22:	8a ec       	ldi	r24, 0xCA	; 202
   1ba24:	95 e4       	ldi	r25, 0x45	; 69
   1ba26:	a0 e0       	ldi	r26, 0x00	; 0
   1ba28:	ed b7       	in	r30, 0x3d	; 61
   1ba2a:	fe b7       	in	r31, 0x3e	; 62
   1ba2c:	81 83       	std	Z+1, r24	; 0x01
   1ba2e:	92 83       	std	Z+2, r25	; 0x02
   1ba30:	a3 83       	std	Z+3, r26	; 0x03
   1ba32:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1ba36:	61 e0       	ldi	r22, 0x01	; 1
   1ba38:	70 e0       	ldi	r23, 0x00	; 0
   1ba3a:	87 e3       	ldi	r24, 0x37	; 55
   1ba3c:	9c ed       	ldi	r25, 0xDC	; 220
   1ba3e:	0e 94 3d 32 	call	0x647a	; 0x647a <set_timers>
   1ba42:	01 96       	adiw	r24, 0x01	; 1
   1ba44:	51 f4       	brne	.+20     	; 0x1ba5a <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1ba46:	84 eb       	ldi	r24, 0xB4	; 180
   1ba48:	95 e4       	ldi	r25, 0x45	; 69
   1ba4a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba4c:	ed b7       	in	r30, 0x3d	; 61
   1ba4e:	fe b7       	in	r31, 0x3e	; 62
   1ba50:	81 83       	std	Z+1, r24	; 0x01
   1ba52:	92 83       	std	Z+2, r25	; 0x02
   1ba54:	a3 83       	std	Z+3, r26	; 0x03
   1ba56:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

	i2c_init(100000);
   1ba5a:	60 ea       	ldi	r22, 0xA0	; 160
   1ba5c:	76 e8       	ldi	r23, 0x86	; 134
   1ba5e:	81 e0       	ldi	r24, 0x01	; 1
   1ba60:	90 e0       	ldi	r25, 0x00	; 0
   1ba62:	0e 94 ad 29 	call	0x535a	; 0x535a <i2c_init>

	i2c_task_init();
   1ba66:	0e 94 6e 29 	call	0x52dc	; 0x52dc <i2c_task_init>

	cli();
   1ba6a:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1ba6c:	8d ef       	ldi	r24, 0xFD	; 253
   1ba6e:	96 e1       	ldi	r25, 0x16	; 22
   1ba70:	ed b7       	in	r30, 0x3d	; 61
   1ba72:	fe b7       	in	r31, 0x3e	; 62
   1ba74:	97 83       	std	Z+7, r25	; 0x07
   1ba76:	86 83       	std	Z+6, r24	; 0x06
   1ba78:	8e ea       	ldi	r24, 0xAE	; 174
   1ba7a:	95 e4       	ldi	r25, 0x45	; 69
   1ba7c:	a0 e0       	ldi	r26, 0x00	; 0
   1ba7e:	83 83       	std	Z+3, r24	; 0x03
   1ba80:	94 83       	std	Z+4, r25	; 0x04
   1ba82:	a5 83       	std	Z+5, r26	; 0x05
   1ba84:	8c e0       	ldi	r24, 0x0C	; 12
   1ba86:	93 e0       	ldi	r25, 0x03	; 3
   1ba88:	92 83       	std	Z+2, r25	; 0x02
   1ba8a:	81 83       	std	Z+1, r24	; 0x01
   1ba8c:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1ba90:	89 e0       	ldi	r24, 0x09	; 9
   1ba92:	97 e1       	ldi	r25, 0x17	; 23
   1ba94:	ed b7       	in	r30, 0x3d	; 61
   1ba96:	fe b7       	in	r31, 0x3e	; 62
   1ba98:	97 83       	std	Z+7, r25	; 0x07
   1ba9a:	86 83       	std	Z+6, r24	; 0x06
   1ba9c:	88 ea       	ldi	r24, 0xA8	; 168
   1ba9e:	95 e4       	ldi	r25, 0x45	; 69
   1baa0:	a0 e0       	ldi	r26, 0x00	; 0
   1baa2:	83 83       	std	Z+3, r24	; 0x03
   1baa4:	94 83       	std	Z+4, r25	; 0x04
   1baa6:	a5 83       	std	Z+5, r26	; 0x05
   1baa8:	85 ef       	ldi	r24, 0xF5	; 245
   1baaa:	92 e0       	ldi	r25, 0x02	; 2
   1baac:	92 83       	std	Z+2, r25	; 0x02
   1baae:	81 83       	std	Z+1, r24	; 0x01
   1bab0:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bab4:	22 e0       	ldi	r18, 0x02	; 2
   1bab6:	41 e2       	ldi	r20, 0x21	; 33
   1bab8:	53 e0       	ldi	r21, 0x03	; 3
   1baba:	60 e0       	ldi	r22, 0x00	; 0
   1babc:	82 e7       	ldi	r24, 0x72	; 114
   1babe:	0e 94 83 29 	call	0x5306	; 0x5306 <i2c_task_op_add>
   1bac2:	90 93 49 17 	sts	0x1749, r25	; 0x801749 <i2c_task_op+0x1>
   1bac6:	80 93 48 17 	sts	0x1748, r24	; 0x801748 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1baca:	20 e1       	ldi	r18, 0x10	; 16
   1bacc:	4c e0       	ldi	r20, 0x0C	; 12
   1bace:	53 e0       	ldi	r21, 0x03	; 3
   1bad0:	60 e0       	ldi	r22, 0x00	; 0
   1bad2:	82 e7       	ldi	r24, 0x72	; 114
   1bad4:	0e 94 83 29 	call	0x5306	; 0x5306 <i2c_task_op_add>
   1bad8:	90 93 4b 17 	sts	0x174B, r25	; 0x80174b <i2c_task_op+0x3>
   1badc:	80 93 4a 17 	sts	0x174A, r24	; 0x80174a <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bae0:	22 e0       	ldi	r18, 0x02	; 2
   1bae2:	4a e0       	ldi	r20, 0x0A	; 10
   1bae4:	53 e0       	ldi	r21, 0x03	; 3
   1bae6:	60 e0       	ldi	r22, 0x00	; 0
   1bae8:	82 e7       	ldi	r24, 0x72	; 114
   1baea:	0e 94 83 29 	call	0x5306	; 0x5306 <i2c_task_op_add>
   1baee:	90 93 4d 17 	sts	0x174D, r25	; 0x80174d <i2c_task_op+0x5>
   1baf2:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1baf6:	20 e1       	ldi	r18, 0x10	; 16
   1baf8:	45 ef       	ldi	r20, 0xF5	; 245
   1bafa:	52 e0       	ldi	r21, 0x02	; 2
   1bafc:	60 e0       	ldi	r22, 0x00	; 0
   1bafe:	82 e7       	ldi	r24, 0x72	; 114
   1bb00:	0e 94 83 29 	call	0x5306	; 0x5306 <i2c_task_op_add>
   1bb04:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <i2c_task_op+0x7>
   1bb08:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <i2c_task_op+0x6>

	SREG = sreg;
   1bb0c:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bb0e:	0e 94 43 2a 	call	0x5486	; 0x5486 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bb12:	68 ee       	ldi	r22, 0xE8	; 232
   1bb14:	73 e0       	ldi	r23, 0x03	; 3
   1bb16:	80 e0       	ldi	r24, 0x00	; 0
   1bb18:	90 e0       	ldi	r25, 0x00	; 0
   1bb1a:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bb1e:	0e 94 24 2a 	call	0x5448	; 0x5448 <i2c_task_done>
   1bb22:	81 11       	cpse	r24, r1
   1bb24:	0c c0       	rjmp	.+24     	; 0x1bb3e <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bb26:	0e 94 aa 2c 	call	0x5954	; 0x5954 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bb2a:	8e e8       	ldi	r24, 0x8E	; 142
   1bb2c:	95 e4       	ldi	r25, 0x45	; 69
   1bb2e:	a0 e0       	ldi	r26, 0x00	; 0
   1bb30:	ed b7       	in	r30, 0x3d	; 61
   1bb32:	fe b7       	in	r31, 0x3e	; 62
   1bb34:	81 83       	std	Z+1, r24	; 0x01
   1bb36:	92 83       	std	Z+2, r25	; 0x02
   1bb38:	a3 83       	std	Z+3, r26	; 0x03
   1bb3a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
	}

    sep();
   1bb3e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>
}
   1bb42:	ad b7       	in	r26, 0x3d	; 61
   1bb44:	be b7       	in	r27, 0x3e	; 62
   1bb46:	17 96       	adiw	r26, 0x07	; 7
   1bb48:	0f b6       	in	r0, 0x3f	; 63
   1bb4a:	f8 94       	cli
   1bb4c:	be bf       	out	0x3e, r27	; 62
   1bb4e:	0f be       	out	0x3f, r0	; 63
   1bb50:	ad bf       	out	0x3d, r26	; 61
   1bb52:	cf 91       	pop	r28
   1bb54:	08 95       	ret

0001bb56 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1bb56:	af e2       	ldi	r26, 0x2F	; 47
   1bb58:	b0 e0       	ldi	r27, 0x00	; 0
   1bb5a:	e0 eb       	ldi	r30, 0xB0	; 176
   1bb5c:	fd ed       	ldi	r31, 0xDD	; 221
   1bb5e:	e2 c3       	rjmp	.+1988   	; 0x1c324 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bb60:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bb62:	f8 94       	cli
	if(!mmc_ins_status())
   1bb64:	0e 94 ad 6d 	call	0xdb5a	; 0xdb5a <mmc_ins_status>
   1bb68:	89 2b       	or	r24, r25
   1bb6a:	49 f4       	brne	.+18     	; 0x1bb7e <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1bb6c:	86 e1       	ldi	r24, 0x16	; 22
   1bb6e:	97 e1       	ldi	r25, 0x17	; 23
   1bb70:	ed b7       	in	r30, 0x3d	; 61
   1bb72:	fe b7       	in	r31, 0x3e	; 62
   1bb74:	97 83       	std	Z+7, r25	; 0x07
   1bb76:	86 83       	std	Z+6, r24	; 0x06
   1bb78:	88 e8       	ldi	r24, 0x88	; 136
   1bb7a:	95 e4       	ldi	r25, 0x45	; 69
   1bb7c:	17 c0       	rjmp	.+46     	; 0x1bbac <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1bb7e:	be 01       	movw	r22, r28
   1bb80:	68 5d       	subi	r22, 0xD8	; 216
   1bb82:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb84:	80 e0       	ldi	r24, 0x00	; 0
   1bb86:	90 e0       	ldi	r25, 0x00	; 0
   1bb88:	0e 94 4d 31 	call	0x629a	; 0x629a <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1bb8c:	ce 01       	movw	r24, r28
   1bb8e:	88 96       	adiw	r24, 0x28	; 40
   1bb90:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <gmtime>
   1bb94:	4f e1       	ldi	r20, 0x1F	; 31
   1bb96:	50 e0       	ldi	r21, 0x00	; 0
   1bb98:	be 01       	movw	r22, r28
   1bb9a:	68 5f       	subi	r22, 0xF8	; 248
   1bb9c:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb9e:	d2 de       	rcall	.-604    	; 0x1b944 <lcd_time>
   1bba0:	ed b7       	in	r30, 0x3d	; 61
   1bba2:	fe b7       	in	r31, 0x3e	; 62
   1bba4:	97 83       	std	Z+7, r25	; 0x07
   1bba6:	86 83       	std	Z+6, r24	; 0x06
   1bba8:	82 e8       	ldi	r24, 0x82	; 130
   1bbaa:	95 e4       	ldi	r25, 0x45	; 69
   1bbac:	a0 e0       	ldi	r26, 0x00	; 0
   1bbae:	83 83       	std	Z+3, r24	; 0x03
   1bbb0:	94 83       	std	Z+4, r25	; 0x04
   1bbb2:	a5 83       	std	Z+5, r26	; 0x05
   1bbb4:	85 ef       	ldi	r24, 0xF5	; 245
   1bbb6:	92 e0       	ldi	r25, 0x02	; 2
   1bbb8:	92 83       	std	Z+2, r25	; 0x02
   1bbba:	81 83       	std	Z+1, r24	; 0x01
   1bbbc:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1bbc0:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1bbc2:	0e 94 43 2a 	call	0x5486	; 0x5486 <i2c_task_run>
}
   1bbc6:	af 96       	adiw	r28, 0x2f	; 47
   1bbc8:	e3 e0       	ldi	r30, 0x03	; 3
   1bbca:	c8 c3       	rjmp	.+1936   	; 0x1c35c <__epilogue_restores__+0x1e>

0001bbcc <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1bbcc:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1bbce:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1bbd0:	20 91 db 19 	lds	r18, 0x19DB	; 0x8019db <lcd_display_time>
   1bbd4:	30 91 dc 19 	lds	r19, 0x19DC	; 0x8019dc <lcd_display_time+0x1>
   1bbd8:	25 36       	cpi	r18, 0x65	; 101
   1bbda:	31 05       	cpc	r19, r1
   1bbdc:	3c f0       	brlt	.+14     	; 0x1bbec <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1bbde:	10 92 dc 19 	sts	0x19DC, r1	; 0x8019dc <lcd_display_time+0x1>
   1bbe2:	10 92 db 19 	sts	0x19DB, r1	; 0x8019db <lcd_display_time>
		SREG = sreg;
   1bbe6:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1bbe8:	b6 cf       	rjmp	.-148    	; 0x1bb56 <i2c_lcd_task>
		return;
   1bbea:	08 95       	ret
	}
	SREG = sreg;
   1bbec:	8f bf       	out	0x3f, r24	; 63
   1bbee:	08 95       	ret

0001bbf0 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bbf0:	00 d0       	rcall	.+0      	; 0x1bbf2 <help+0x2>
   1bbf2:	1f 92       	push	r1

    copyright();
   1bbf4:	46 de       	rcall	.-884    	; 0x1b882 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bbf6:	80 e0       	ldi	r24, 0x00	; 0
   1bbf8:	90 e0       	ldi	r25, 0x00	; 0
   1bbfa:	0e 94 b2 71 	call	0xe364	; 0xe364 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bbfe:	80 e0       	ldi	r24, 0x00	; 0
   1bc00:	90 e0       	ldi	r25, 0x00	; 0
   1bc02:	0e 94 ff 7c 	call	0xf9fe	; 0xf9fe <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bc06:	80 e0       	ldi	r24, 0x00	; 0
   1bc08:	90 e0       	ldi	r25, 0x00	; 0
   1bc0a:	0e 94 a2 bc 	call	0x17944	; 0x17944 <lif_help>
#endif

    gpib_help(0);
   1bc0e:	80 e0       	ldi	r24, 0x00	; 0
   1bc10:	90 e0       	ldi	r25, 0x00	; 0
   1bc12:	0e 94 69 90 	call	0x120d2	; 0x120d2 <gpib_help>

    printf(
   1bc16:	81 e5       	ldi	r24, 0x51	; 81
   1bc18:	95 e4       	ldi	r25, 0x45	; 69
   1bc1a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc1c:	ed b7       	in	r30, 0x3d	; 61
   1bc1e:	fe b7       	in	r31, 0x3e	; 62
   1bc20:	81 83       	std	Z+1, r24	; 0x01
   1bc22:	92 83       	std	Z+2, r25	; 0x02
   1bc24:	a3 83       	std	Z+3, r26	; 0x03
   1bc26:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
        "reset\n"
        "setdate\n"
        "time\n"
        "\n"
        );
}
   1bc2a:	0f 90       	pop	r0
   1bc2c:	0f 90       	pop	r0
   1bc2e:	0f 90       	pop	r0
   1bc30:	08 95       	ret

0001bc32 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bc32:	a9 e6       	ldi	r26, 0x69	; 105
   1bc34:	b1 e0       	ldi	r27, 0x01	; 1
   1bc36:	ee e1       	ldi	r30, 0x1E	; 30
   1bc38:	fe ed       	ldi	r31, 0xDE	; 222
   1bc3a:	6f c3       	rjmp	.+1758   	; 0x1c31a <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bc3c:	8e e4       	ldi	r24, 0x4E	; 78
   1bc3e:	95 e4       	ldi	r25, 0x45	; 69
   1bc40:	a0 e0       	ldi	r26, 0x00	; 0
   1bc42:	ed b7       	in	r30, 0x3d	; 61
   1bc44:	fe b7       	in	r31, 0x3e	; 62
   1bc46:	81 83       	std	Z+1, r24	; 0x01
   1bc48:	92 83       	std	Z+2, r25	; 0x02
   1bc4a:	a3 83       	std	Z+3, r26	; 0x03
   1bc4c:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1bc50:	40 91 af 1c 	lds	r20, 0x1CAF	; 0x801caf <__iob>
   1bc54:	50 91 b0 1c 	lds	r21, 0x1CB0	; 0x801cb0 <__iob+0x1>
   1bc58:	6e ef       	ldi	r22, 0xFE	; 254
   1bc5a:	70 e0       	ldi	r23, 0x00	; 0
   1bc5c:	ce 01       	movw	r24, r28
   1bc5e:	06 96       	adiw	r24, 0x06	; 6
   1bc60:	7c 01       	movw	r14, r24
   1bc62:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <fgets>
    trim_tail(line);
   1bc66:	c7 01       	movw	r24, r14
   1bc68:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <trim_tail>
    argc = split_args(line,argv,50);
   1bc6c:	42 e3       	ldi	r20, 0x32	; 50
   1bc6e:	50 e0       	ldi	r21, 0x00	; 0
   1bc70:	be 01       	movw	r22, r28
   1bc72:	6a 5f       	subi	r22, 0xFA	; 250
   1bc74:	7e 4f       	sbci	r23, 0xFE	; 254
   1bc76:	c7 01       	movw	r24, r14
   1bc78:	0e 94 34 30 	call	0x6068	; 0x6068 <split_args>
   1bc7c:	6c 01       	movw	r12, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1bc7e:	ca 5f       	subi	r28, 0xFA	; 250
   1bc80:	de 4f       	sbci	r29, 0xFE	; 254
   1bc82:	08 81       	ld	r16, Y
   1bc84:	19 81       	ldd	r17, Y+1	; 0x01
   1bc86:	c6 50       	subi	r28, 0x06	; 6
   1bc88:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1bc8a:	01 15       	cp	r16, r1
   1bc8c:	11 05       	cpc	r17, r1
   1bc8e:	09 f4       	brne	.+2      	; 0x1bc92 <user_task.part.1+0x60>
   1bc90:	98 c0       	rjmp	.+304    	; 0x1bdc2 <user_task.part.1+0x190>
   1bc92:	18 16       	cp	r1, r24
   1bc94:	19 06       	cpc	r1, r25
   1bc96:	0c f0       	brlt	.+2      	; 0x1bc9a <user_task.part.1+0x68>
   1bc98:	94 c0       	rjmp	.+296    	; 0x1bdc2 <user_task.part.1+0x190>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1bc9a:	64 e2       	ldi	r22, 0x24	; 36
   1bc9c:	77 e1       	ldi	r23, 0x17	; 23
   1bc9e:	c8 01       	movw	r24, r16
   1bca0:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1bca4:	89 2b       	or	r24, r25
   1bca6:	f9 f0       	breq	.+62     	; 0x1bce6 <user_task.part.1+0xb4>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1bca8:	c8 5f       	subi	r28, 0xF8	; 248
   1bcaa:	de 4f       	sbci	r29, 0xFE	; 254
   1bcac:	e8 81       	ld	r30, Y
   1bcae:	f9 81       	ldd	r31, Y+1	; 0x01
   1bcb0:	c8 50       	subi	r28, 0x08	; 8
   1bcb2:	d1 40       	sbci	r29, 0x01	; 1
   1bcb4:	80 81       	ld	r24, Z
   1bcb6:	8d 33       	cpi	r24, 0x3D	; 61
   1bcb8:	19 f4       	brne	.+6      	; 0x1bcc0 <user_task.part.1+0x8e>
            ++ind;
   1bcba:	82 e0       	ldi	r24, 0x02	; 2
   1bcbc:	90 e0       	ldi	r25, 0x00	; 0
   1bcbe:	02 c0       	rjmp	.+4      	; 0x1bcc4 <user_task.part.1+0x92>
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1bcc0:	81 e0       	ldi	r24, 0x01	; 1
   1bcc2:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1bcc4:	88 0f       	add	r24, r24
   1bcc6:	99 1f       	adc	r25, r25
   1bcc8:	e6 e0       	ldi	r30, 0x06	; 6
   1bcca:	f1 e0       	ldi	r31, 0x01	; 1
   1bccc:	ec 0f       	add	r30, r28
   1bcce:	fd 1f       	adc	r31, r29
   1bcd0:	e8 0f       	add	r30, r24
   1bcd2:	f9 1f       	adc	r31, r25
   1bcd4:	80 81       	ld	r24, Z
   1bcd6:	91 81       	ldd	r25, Z+1	; 0x01
   1bcd8:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <get_value>
		result = lcd_backlight(rgb);
   1bcdc:	71 de       	rcall	.-798    	; 0x1b9c0 <lcd_backlight>

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
        result = 1;
#endif
    if(result)
   1bcde:	88 23       	and	r24, r24
   1bce0:	09 f4       	brne	.+2      	; 0x1bce4 <user_task.part.1+0xb2>
   1bce2:	62 c0       	rjmp	.+196    	; 0x1bda8 <user_task.part.1+0x176>
   1bce4:	6e c0       	rjmp	.+220    	; 0x1bdc2 <user_task.part.1+0x190>
        rgb = get_value(argv[ind]);
		result = lcd_backlight(rgb);
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1bce6:	6e e2       	ldi	r22, 0x2E	; 46
   1bce8:	77 e1       	ldi	r23, 0x17	; 23
   1bcea:	c8 01       	movw	r24, r16
   1bcec:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <MATCH>
   1bcf0:	89 2b       	or	r24, r25
   1bcf2:	19 f0       	breq	.+6      	; 0x1bcfa <user_task.part.1+0xc8>
    {
        PrintFree();
   1bcf4:	0e 94 ab 24 	call	0x4956	; 0x4956 <PrintFree>
   1bcf8:	64 c0       	rjmp	.+200    	; 0x1bdc2 <user_task.part.1+0x190>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1bcfa:	6a ed       	ldi	r22, 0xDA	; 218
   1bcfc:	7d e0       	ldi	r23, 0x0D	; 13
   1bcfe:	c8 01       	movw	r24, r16
   1bd00:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1bd04:	89 2b       	or	r24, r25
   1bd06:	51 f0       	breq	.+20     	; 0x1bd1c <user_task.part.1+0xea>
    {
        cli();
   1bd08:	f8 94       	cli
        uart_rx_flush(0);
   1bd0a:	80 e0       	ldi	r24, 0x00	; 0
   1bd0c:	0e 94 32 26 	call	0x4c64	; 0x4c64 <uart_rx_flush>
        cli();
   1bd10:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bd12:	82 e0       	ldi	r24, 0x02	; 2
   1bd14:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bd16:	e0 e0       	ldi	r30, 0x00	; 0
   1bd18:	fc ef       	ldi	r31, 0xFC	; 252
   1bd1a:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1bd1c:	62 e3       	ldi	r22, 0x32	; 50
   1bd1e:	77 e1       	ldi	r23, 0x17	; 23
   1bd20:	c8 01       	movw	r24, r16
   1bd22:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1bd26:	89 2b       	or	r24, r25
   1bd28:	19 f0       	breq	.+6      	; 0x1bd30 <user_task.part.1+0xfe>
    {
        setdate();
   1bd2a:	0e 94 17 39 	call	0x722e	; 0x722e <setdate>
   1bd2e:	07 c0       	rjmp	.+14     	; 0x1bd3e <user_task.part.1+0x10c>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1bd30:	6a e3       	ldi	r22, 0x3A	; 58
   1bd32:	77 e1       	ldi	r23, 0x17	; 23
   1bd34:	c8 01       	movw	r24, r16
   1bd36:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1bd3a:	89 2b       	or	r24, r25
   1bd3c:	19 f0       	breq	.+6      	; 0x1bd44 <user_task.part.1+0x112>
    {
        display_clock();
   1bd3e:	0e 94 33 3b 	call	0x7666	; 0x7666 <display_clock>
   1bd42:	3f c0       	rjmp	.+126    	; 0x1bdc2 <user_task.part.1+0x190>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bd44:	63 e7       	ldi	r22, 0x73	; 115
   1bd46:	76 e1       	ldi	r23, 0x16	; 22
   1bd48:	c8 01       	movw	r24, r16
   1bd4a:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1bd4e:	89 2b       	or	r24, r25
    {
        help();
   1bd50:	11 f0       	breq	.+4      	; 0x1bd56 <user_task.part.1+0x124>
   1bd52:	4e df       	rcall	.-356    	; 0x1bbf0 <help>
   1bd54:	36 c0       	rjmp	.+108    	; 0x1bdc2 <user_task.part.1+0x190>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bd56:	69 e7       	ldi	r22, 0x79	; 121
   1bd58:	76 e1       	ldi	r23, 0x16	; 22
   1bd5a:	c8 01       	movw	r24, r16
   1bd5c:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <MATCHI>
   1bd60:	89 2b       	or	r24, r25
   1bd62:	b9 f7       	brne	.-18     	; 0x1bd52 <user_task.part.1+0x120>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1bd64:	be 01       	movw	r22, r28
   1bd66:	6a 5f       	subi	r22, 0xFA	; 250
   1bd68:	7e 4f       	sbci	r23, 0xFE	; 254
   1bd6a:	c6 01       	movw	r24, r12
   1bd6c:	0e 94 8a 90 	call	0x12114	; 0x12114 <gpib_tests>
   1bd70:	89 2b       	or	r24, r25
   1bd72:	19 f0       	breq	.+6      	; 0x1bd7a <user_task.part.1+0x148>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1bd74:	0e 94 9e 8b 	call	0x1173c	; 0x1173c <gpib_init_devices>
   1bd78:	24 c0       	rjmp	.+72     	; 0x1bdc2 <user_task.part.1+0x190>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1bd7a:	be 01       	movw	r22, r28
   1bd7c:	6a 5f       	subi	r22, 0xFA	; 250
   1bd7e:	7e 4f       	sbci	r23, 0xFE	; 254
   1bd80:	c6 01       	movw	r24, r12
   1bd82:	0e 94 71 80 	call	0x100e2	; 0x100e2 <posix_tests>
   1bd86:	89 2b       	or	r24, r25
   1bd88:	e1 f4       	brne	.+56     	; 0x1bdc2 <user_task.part.1+0x190>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1bd8a:	be 01       	movw	r22, r28
   1bd8c:	6a 5f       	subi	r22, 0xFA	; 250
   1bd8e:	7e 4f       	sbci	r23, 0xFE	; 254
   1bd90:	c6 01       	movw	r24, r12
   1bd92:	0e 94 cc 72 	call	0xe598	; 0xe598 <fatfs_tests>
   1bd96:	89 2b       	or	r24, r25
   1bd98:	a1 f4       	brne	.+40     	; 0x1bdc2 <user_task.part.1+0x190>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1bd9a:	be 01       	movw	r22, r28
   1bd9c:	6a 5f       	subi	r22, 0xFA	; 250
   1bd9e:	7e 4f       	sbci	r23, 0xFE	; 254
   1bda0:	c6 01       	movw	r24, r12
   1bda2:	03 dc       	rcall	.-2042   	; 0x1b5aa <lif_tests>
   1bda4:	89 2b       	or	r24, r25
   1bda6:	69 f4       	brne	.+26     	; 0x1bdc2 <user_task.part.1+0x190>
        result = 1;
#endif
    if(result)
        printf("OK\n");
    else
        printf("Error:[%s]\n",line);
   1bda8:	ed b7       	in	r30, 0x3d	; 61
   1bdaa:	fe b7       	in	r31, 0x3e	; 62
   1bdac:	f5 82       	std	Z+5, r15	; 0x05
   1bdae:	e4 82       	std	Z+4, r14	; 0x04
   1bdb0:	8e e3       	ldi	r24, 0x3E	; 62
   1bdb2:	95 e4       	ldi	r25, 0x45	; 69
   1bdb4:	a0 e0       	ldi	r26, 0x00	; 0
   1bdb6:	81 83       	std	Z+1, r24	; 0x01
   1bdb8:	92 83       	std	Z+2, r25	; 0x02
   1bdba:	a3 83       	std	Z+3, r26	; 0x03
   1bdbc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
   1bdc0:	0a c0       	rjmp	.+20     	; 0x1bdd6 <user_task.part.1+0x1a4>
#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
        result = 1;
#endif
    if(result)
        printf("OK\n");
   1bdc2:	8a e4       	ldi	r24, 0x4A	; 74
   1bdc4:	95 e4       	ldi	r25, 0x45	; 69
   1bdc6:	a0 e0       	ldi	r26, 0x00	; 0
   1bdc8:	ed b7       	in	r30, 0x3d	; 61
   1bdca:	fe b7       	in	r31, 0x3e	; 62
   1bdcc:	81 83       	std	Z+1, r24	; 0x01
   1bdce:	92 83       	std	Z+2, r25	; 0x02
   1bdd0:	a3 83       	std	Z+3, r26	; 0x03
   1bdd2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    else
        printf("Error:[%s]\n",line);
}
   1bdd6:	c7 59       	subi	r28, 0x97	; 151
   1bdd8:	de 4f       	sbci	r29, 0xFE	; 254
   1bdda:	e8 e0       	ldi	r30, 0x08	; 8
   1bddc:	ba c2       	rjmp	.+1396   	; 0x1c352 <__epilogue_restores__+0x14>

0001bdde <user_task>:
    int result = 0;
    char *argv[50];
    char line[256];


    if(gpib)
   1bdde:	81 11       	cpse	r24, r1
        gpib_task();
   1bde0:	0e 94 09 90 	call	0x12012	; 0x12012 <gpib_task>

    if(!kbhit(0))
   1bde4:	80 e0       	ldi	r24, 0x00	; 0
   1bde6:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <uart_rx_count>
   1bdea:	89 2b       	or	r24, r25
   1bdec:	09 f0       	breq	.+2      	; 0x1bdf0 <user_task+0x12>
   1bdee:	21 cf       	rjmp	.-446    	; 0x1bc32 <user_task.part.1>
   1bdf0:	08 95       	ret

0001bdf2 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1bdf2:	a3 e3       	ldi	r26, 0x33	; 51
   1bdf4:	b0 e0       	ldi	r27, 0x00	; 0
   1bdf6:	ee ef       	ldi	r30, 0xFE	; 254
   1bdf8:	fe ed       	ldi	r31, 0xDE	; 222
   1bdfa:	8f c2       	rjmp	.+1310   	; 0x1c31a <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1bdfc:	0e 94 8f 24 	call	0x491e	; 0x491e <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1be00:	46 98       	cbi	0x08, 6	; 8
   1be02:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1be04:	0e 94 32 84 	call	0x10864	; 0x10864 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1be08:	40 e0       	ldi	r20, 0x00	; 0
   1be0a:	52 ec       	ldi	r21, 0xC2	; 194
   1be0c:	61 e0       	ldi	r22, 0x01	; 1
   1be0e:	70 e0       	ldi	r23, 0x00	; 0
   1be10:	80 e0       	ldi	r24, 0x00	; 0
   1be12:	0e 94 dd 26 	call	0x4dba	; 0x4dba <uart_init>
   1be16:	6b 01       	movw	r12, r22
   1be18:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1be1a:	68 ec       	ldi	r22, 0xC8	; 200
   1be1c:	70 e0       	ldi	r23, 0x00	; 0
   1be1e:	80 e0       	ldi	r24, 0x00	; 0
   1be20:	90 e0       	ldi	r25, 0x00	; 0
   1be22:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <delayms>

    sep();
   1be26:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>
    printf("Start\n");
   1be2a:	87 e3       	ldi	r24, 0x37	; 55
   1be2c:	95 e4       	ldi	r25, 0x45	; 69
   1be2e:	a0 e0       	ldi	r26, 0x00	; 0
   1be30:	ed b7       	in	r30, 0x3d	; 61
   1be32:	fe b7       	in	r31, 0x3e	; 62
   1be34:	81 83       	std	Z+1, r24	; 0x01
   1be36:	92 83       	std	Z+2, r25	; 0x02
   1be38:	a3 83       	std	Z+3, r26	; 0x03
   1be3a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1be3e:	80 e0       	ldi	r24, 0x00	; 0
   1be40:	9d e2       	ldi	r25, 0x2D	; 45
   1be42:	a1 e3       	ldi	r26, 0x31	; 49
   1be44:	b1 e0       	ldi	r27, 0x01	; 1
   1be46:	ed b7       	in	r30, 0x3d	; 61
   1be48:	fe b7       	in	r31, 0x3e	; 62
   1be4a:	84 83       	std	Z+4, r24	; 0x04
   1be4c:	95 83       	std	Z+5, r25	; 0x05
   1be4e:	a6 83       	std	Z+6, r26	; 0x06
   1be50:	b7 83       	std	Z+7, r27	; 0x07
   1be52:	86 e2       	ldi	r24, 0x26	; 38
   1be54:	95 e4       	ldi	r25, 0x45	; 69
   1be56:	a0 e0       	ldi	r26, 0x00	; 0
   1be58:	81 83       	std	Z+1, r24	; 0x01
   1be5a:	92 83       	std	Z+2, r25	; 0x02
   1be5c:	a3 83       	std	Z+3, r26	; 0x03
   1be5e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1be62:	ed b7       	in	r30, 0x3d	; 61
   1be64:	fe b7       	in	r31, 0x3e	; 62
   1be66:	c0 86       	std	Z+8, r12	; 0x08
   1be68:	d1 86       	std	Z+9, r13	; 0x09
   1be6a:	e2 86       	std	Z+10, r14	; 0x0a
   1be6c:	f3 86       	std	Z+11, r15	; 0x0b
   1be6e:	80 e0       	ldi	r24, 0x00	; 0
   1be70:	92 ec       	ldi	r25, 0xC2	; 194
   1be72:	a1 e0       	ldi	r26, 0x01	; 1
   1be74:	b0 e0       	ldi	r27, 0x00	; 0
   1be76:	84 83       	std	Z+4, r24	; 0x04
   1be78:	95 83       	std	Z+5, r25	; 0x05
   1be7a:	a6 83       	std	Z+6, r26	; 0x06
   1be7c:	b7 83       	std	Z+7, r27	; 0x07
   1be7e:	8f ef       	ldi	r24, 0xFF	; 255
   1be80:	94 e4       	ldi	r25, 0x44	; 68
   1be82:	a0 e0       	ldi	r26, 0x00	; 0
   1be84:	81 83       	std	Z+1, r24	; 0x01
   1be86:	92 83       	std	Z+2, r25	; 0x02
   1be88:	a3 83       	std	Z+3, r26	; 0x03
   1be8a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    init_timers();
   1be8e:	0e 94 84 33 	call	0x6708	; 0x6708 <init_timers>

    sep();
   1be92:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>
    printf("HP85 Disk and Device Emulator\n");
   1be96:	80 ee       	ldi	r24, 0xE0	; 224
   1be98:	94 e4       	ldi	r25, 0x44	; 68
   1be9a:	a0 e0       	ldi	r26, 0x00	; 0
   1be9c:	ed b7       	in	r30, 0x3d	; 61
   1be9e:	fe b7       	in	r31, 0x3e	; 62
   1bea0:	81 83       	std	Z+1, r24	; 0x01
   1bea2:	92 83       	std	Z+2, r25	; 0x02
   1bea4:	a3 83       	std	Z+3, r26	; 0x03
   1bea6:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1beaa:	83 ec       	ldi	r24, 0xC3	; 195
   1beac:	94 e4       	ldi	r25, 0x44	; 68
   1beae:	a0 e0       	ldi	r26, 0x00	; 0
   1beb0:	ed b7       	in	r30, 0x3d	; 61
   1beb2:	fe b7       	in	r31, 0x3e	; 62
   1beb4:	81 83       	std	Z+1, r24	; 0x01
   1beb6:	92 83       	std	Z+2, r25	; 0x02
   1beb8:	a3 83       	std	Z+3, r26	; 0x03
   1beba:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf(" GNU version 3\n");
   1bebe:	83 eb       	ldi	r24, 0xB3	; 179
   1bec0:	94 e4       	ldi	r25, 0x44	; 68
   1bec2:	a0 e0       	ldi	r26, 0x00	; 0
   1bec4:	ed b7       	in	r30, 0x3d	; 61
   1bec6:	fe b7       	in	r31, 0x3e	; 62
   1bec8:	81 83       	std	Z+1, r24	; 0x01
   1beca:	92 83       	std	Z+2, r25	; 0x02
   1becc:	a3 83       	std	Z+3, r26	; 0x03
   1bece:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bed2:	8c e8       	ldi	r24, 0x8C	; 140
   1bed4:	94 e4       	ldi	r25, 0x44	; 68
   1bed6:	a0 e0       	ldi	r26, 0x00	; 0
   1bed8:	ed b7       	in	r30, 0x3d	; 61
   1beda:	fe b7       	in	r31, 0x3e	; 62
   1bedc:	81 83       	std	Z+1, r24	; 0x01
   1bede:	92 83       	std	Z+2, r25	; 0x02
   1bee0:	a3 83       	std	Z+3, r26	; 0x03
   1bee2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bee6:	85 eb       	ldi	r24, 0xB5	; 181
   1bee8:	96 e1       	ldi	r25, 0x16	; 22
   1beea:	ed b7       	in	r30, 0x3d	; 61
   1beec:	fe b7       	in	r31, 0x3e	; 62
   1beee:	95 83       	std	Z+5, r25	; 0x05
   1bef0:	84 83       	std	Z+4, r24	; 0x04
   1bef2:	82 e7       	ldi	r24, 0x72	; 114
   1bef4:	94 e4       	ldi	r25, 0x44	; 68
   1bef6:	a0 e0       	ldi	r26, 0x00	; 0
   1bef8:	81 83       	std	Z+1, r24	; 0x01
   1befa:	92 83       	std	Z+2, r25	; 0x02
   1befc:	a3 83       	std	Z+3, r26	; 0x03
   1befe:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bf02:	89 ed       	ldi	r24, 0xD9	; 217
   1bf04:	96 e1       	ldi	r25, 0x16	; 22
   1bf06:	ed b7       	in	r30, 0x3d	; 61
   1bf08:	fe b7       	in	r31, 0x3e	; 62
   1bf0a:	95 83       	std	Z+5, r25	; 0x05
   1bf0c:	84 83       	std	Z+4, r24	; 0x04
   1bf0e:	88 e5       	ldi	r24, 0x58	; 88
   1bf10:	94 e4       	ldi	r25, 0x44	; 68
   1bf12:	a0 e0       	ldi	r26, 0x00	; 0
   1bf14:	81 83       	std	Z+1, r24	; 0x01
   1bf16:	92 83       	std	Z+2, r25	; 0x02
   1bf18:	a3 83       	std	Z+3, r26	; 0x03
   1bf1a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

    sep();
   1bf1e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>
    PrintFree();
   1bf22:	0e 94 ab 24 	call	0x4956	; 0x4956 <PrintFree>

    sep();
   1bf26:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1bf2a:	82 e4       	ldi	r24, 0x42	; 66
   1bf2c:	94 e4       	ldi	r25, 0x44	; 68
   1bf2e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf30:	ed b7       	in	r30, 0x3d	; 61
   1bf32:	fe b7       	in	r31, 0x3e	; 62
   1bf34:	81 83       	std	Z+1, r24	; 0x01
   1bf36:	92 83       	std	Z+2, r25	; 0x02
   1bf38:	a3 83       	std	Z+3, r26	; 0x03
   1bf3a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1bf3e:	4b e0       	ldi	r20, 0x0B	; 11
   1bf40:	50 e0       	ldi	r21, 0x00	; 0
   1bf42:	60 e2       	ldi	r22, 0x20	; 32
   1bf44:	71 ea       	ldi	r23, 0xA1	; 161
   1bf46:	87 e0       	ldi	r24, 0x07	; 7
   1bf48:	90 e0       	ldi	r25, 0x00	; 0
   1bf4a:	0e 94 11 24 	call	0x4822	; 0x4822 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1bf4e:	8c e2       	ldi	r24, 0x2C	; 44
   1bf50:	94 e4       	ldi	r25, 0x44	; 68
   1bf52:	a0 e0       	ldi	r26, 0x00	; 0
   1bf54:	ed b7       	in	r30, 0x3d	; 61
   1bf56:	fe b7       	in	r31, 0x3e	; 62
   1bf58:	81 83       	std	Z+1, r24	; 0x01
   1bf5a:	92 83       	std	Z+2, r25	; 0x02
   1bf5c:	a3 83       	std	Z+3, r26	; 0x03
   1bf5e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
	i2c_init(100000);
   1bf62:	60 ea       	ldi	r22, 0xA0	; 160
   1bf64:	76 e8       	ldi	r23, 0x86	; 134
   1bf66:	81 e0       	ldi	r24, 0x01	; 1
   1bf68:	90 e0       	ldi	r25, 0x00	; 0
   1bf6a:	0e 94 ad 29 	call	0x535a	; 0x535a <i2c_init>
    sep();
   1bf6e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1bf72:	8a e1       	ldi	r24, 0x1A	; 26
   1bf74:	94 e4       	ldi	r25, 0x44	; 68
   1bf76:	a0 e0       	ldi	r26, 0x00	; 0
   1bf78:	ed b7       	in	r30, 0x3d	; 61
   1bf7a:	fe b7       	in	r31, 0x3e	; 62
   1bf7c:	81 83       	std	Z+1, r24	; 0x01
   1bf7e:	92 83       	std	Z+2, r25	; 0x02
   1bf80:	a3 83       	std	Z+3, r26	; 0x03
   1bf82:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    clock_clear();
   1bf86:	0e 94 41 33 	call	0x6682	; 0x6682 <clock_clear>
    printf("Clock cleared\n");
   1bf8a:	8b e0       	ldi	r24, 0x0B	; 11
   1bf8c:	94 e4       	ldi	r25, 0x44	; 68
   1bf8e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf90:	ed b7       	in	r30, 0x3d	; 61
   1bf92:	fe b7       	in	r31, 0x3e	; 62
   1bf94:	81 83       	std	Z+1, r24	; 0x01
   1bf96:	92 83       	std	Z+2, r25	; 0x02
   1bf98:	a3 83       	std	Z+3, r26	; 0x03
   1bf9a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1bf9e:	be 01       	movw	r22, r28
   1bfa0:	64 5d       	subi	r22, 0xD4	; 212
   1bfa2:	7f 4f       	sbci	r23, 0xFF	; 255
   1bfa4:	80 e0       	ldi	r24, 0x00	; 0
   1bfa6:	90 e0       	ldi	r25, 0x00	; 0
   1bfa8:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1bfac:	88 a9       	ldd	r24, Y+48	; 0x30
   1bfae:	99 a9       	ldd	r25, Y+49	; 0x31
   1bfb0:	aa a9       	ldd	r26, Y+50	; 0x32
   1bfb2:	bb a9       	ldd	r27, Y+51	; 0x33
   1bfb4:	ed b7       	in	r30, 0x3d	; 61
   1bfb6:	fe b7       	in	r31, 0x3e	; 62
   1bfb8:	84 83       	std	Z+4, r24	; 0x04
   1bfba:	95 83       	std	Z+5, r25	; 0x05
   1bfbc:	a6 83       	std	Z+6, r26	; 0x06
   1bfbe:	b7 83       	std	Z+7, r27	; 0x07
   1bfc0:	8d ed       	ldi	r24, 0xDD	; 221
   1bfc2:	93 e4       	ldi	r25, 0x43	; 67
   1bfc4:	a0 e0       	ldi	r26, 0x00	; 0
   1bfc6:	81 83       	std	Z+1, r24	; 0x01
   1bfc8:	92 83       	std	Z+2, r25	; 0x02
   1bfca:	a3 83       	std	Z+3, r26	; 0x03
   1bfcc:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1bfd0:	80 e0       	ldi	r24, 0x00	; 0
   1bfd2:	90 e0       	ldi	r25, 0x00	; 0
   1bfd4:	0e 94 bc 3a 	call	0x7578	; 0x7578 <initialize_clock>
    display_clock();
   1bfd8:	0e 94 33 3b 	call	0x7666	; 0x7666 <display_clock>
    sep();
   1bfdc:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1bfe0:	16 dd       	rcall	.-1492   	; 0x1ba0e <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1bfe2:	85 ec       	ldi	r24, 0xC5	; 197
   1bfe4:	93 e4       	ldi	r25, 0x43	; 67
   1bfe6:	a0 e0       	ldi	r26, 0x00	; 0
   1bfe8:	ed b7       	in	r30, 0x3d	; 61
   1bfea:	fe b7       	in	r31, 0x3e	; 62
   1bfec:	81 83       	std	Z+1, r24	; 0x01
   1bfee:	92 83       	std	Z+2, r25	; 0x02
   1bff0:	a3 83       	std	Z+3, r26	; 0x03
   1bff2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    if ( !mmc_init(1) )
   1bff6:	81 e0       	ldi	r24, 0x01	; 1
   1bff8:	90 e0       	ldi	r25, 0x00	; 0
   1bffa:	0e 94 de 6d 	call	0xdbbc	; 0xdbbc <mmc_init>
   1bffe:	89 2b       	or	r24, r25
   1c000:	51 f4       	brne	.+20     	; 0x1c016 <main+0x224>
		printf("MMC initialized\n");
   1c002:	84 eb       	ldi	r24, 0xB4	; 180
   1c004:	93 e4       	ldi	r25, 0x43	; 67
   1c006:	a0 e0       	ldi	r26, 0x00	; 0
   1c008:	ed b7       	in	r30, 0x3d	; 61
   1c00a:	fe b7       	in	r31, 0x3e	; 62
   1c00c:	81 83       	std	Z+1, r24	; 0x01
   1c00e:	92 83       	std	Z+2, r25	; 0x02
   1c010:	a3 83       	std	Z+3, r26	; 0x03
   1c012:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    sep();
   1c016:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c01a:	0e 94 32 84 	call	0x10864	; 0x10864 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c01e:	8e e9       	ldi	r24, 0x9E	; 158
   1c020:	93 e4       	ldi	r25, 0x43	; 67
   1c022:	a0 e0       	ldi	r26, 0x00	; 0
   1c024:	ed b7       	in	r30, 0x3d	; 61
   1c026:	fe b7       	in	r31, 0x3e	; 62
   1c028:	81 83       	std	Z+1, r24	; 0x01
   1c02a:	92 83       	std	Z+2, r25	; 0x02
   1c02c:	a3 83       	std	Z+3, r26	; 0x03
   1c02e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c032:	0e 94 1e ba 	call	0x1743c	; 0x1743c <printer_init>
    printf("Printer initialized\n");
   1c036:	89 e8       	ldi	r24, 0x89	; 137
   1c038:	93 e4       	ldi	r25, 0x43	; 67
   1c03a:	a0 e0       	ldi	r26, 0x00	; 0
   1c03c:	ed b7       	in	r30, 0x3d	; 61
   1c03e:	fe b7       	in	r31, 0x3e	; 62
   1c040:	81 83       	std	Z+1, r24	; 0x01
   1c042:	92 83       	std	Z+2, r25	; 0x02
   1c044:	a3 83       	std	Z+3, r26	; 0x03
   1c046:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c04a:	87 e7       	ldi	r24, 0x77	; 119
   1c04c:	93 e4       	ldi	r25, 0x43	; 67
   1c04e:	a0 e0       	ldi	r26, 0x00	; 0
   1c050:	ed b7       	in	r30, 0x3d	; 61
   1c052:	fe b7       	in	r31, 0x3e	; 62
   1c054:	81 83       	std	Z+1, r24	; 0x01
   1c056:	92 83       	std	Z+2, r25	; 0x02
   1c058:	a3 83       	std	Z+3, r26	; 0x03
   1c05a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    gpib_timer_init();
   1c05e:	0e 94 46 82 	call	0x1048c	; 0x1048c <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c062:	8f e5       	ldi	r24, 0x5F	; 95
   1c064:	93 e4       	ldi	r25, 0x43	; 67
   1c066:	a0 e0       	ldi	r26, 0x00	; 0
   1c068:	ed b7       	in	r30, 0x3d	; 61
   1c06a:	fe b7       	in	r31, 0x3e	; 62
   1c06c:	81 83       	std	Z+1, r24	; 0x01
   1c06e:	92 83       	std	Z+2, r25	; 0x02
   1c070:	a3 83       	std	Z+3, r26	; 0x03
   1c072:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c076:	0e 94 c9 8a 	call	0x11592	; 0x11592 <gpib_file_init>
    printf("GPIB File init done\n");
   1c07a:	8a e4       	ldi	r24, 0x4A	; 74
   1c07c:	93 e4       	ldi	r25, 0x43	; 67
   1c07e:	a0 e0       	ldi	r26, 0x00	; 0
   1c080:	ed b7       	in	r30, 0x3d	; 61
   1c082:	fe b7       	in	r31, 0x3e	; 62
   1c084:	81 83       	std	Z+1, r24	; 0x01
   1c086:	92 83       	std	Z+2, r25	; 0x02
   1c088:	a3 83       	std	Z+3, r26	; 0x03
   1c08a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c08e:	0e 94 9a 84 	call	0x10934	; 0x10934 <gpib_state_init>
    printf("GPIB State init done\n");
   1c092:	84 e3       	ldi	r24, 0x34	; 52
   1c094:	93 e4       	ldi	r25, 0x43	; 67
   1c096:	a0 e0       	ldi	r26, 0x00	; 0
   1c098:	ed b7       	in	r30, 0x3d	; 61
   1c09a:	fe b7       	in	r31, 0x3e	; 62
   1c09c:	81 83       	std	Z+1, r24	; 0x01
   1c09e:	92 83       	std	Z+2, r25	; 0x02
   1c0a0:	a3 83       	std	Z+3, r26	; 0x03
   1c0a2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    sep();
   1c0a6:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c0aa:	80 e0       	ldi	r24, 0x00	; 0
   1c0ac:	90 e0       	ldi	r25, 0x00	; 0
   1c0ae:	0e 94 4d 92 	call	0x1249a	; 0x1249a <display_Addresses>
    sep();
   1c0b2:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c0b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c0ba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c0be:	ed b7       	in	r30, 0x3d	; 61
   1c0c0:	fe b7       	in	r31, 0x3e	; 62
   1c0c2:	95 83       	std	Z+5, r25	; 0x05
   1c0c4:	84 83       	std	Z+4, r24	; 0x04
   1c0c6:	8e e1       	ldi	r24, 0x1E	; 30
   1c0c8:	93 e4       	ldi	r25, 0x43	; 67
   1c0ca:	a0 e0       	ldi	r26, 0x00	; 0
   1c0cc:	81 83       	std	Z+1, r24	; 0x01
   1c0ce:	92 83       	std	Z+2, r25	; 0x02
   1c0d0:	a3 83       	std	Z+3, r26	; 0x03
   1c0d2:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
    sep();
   1c0d6:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c0da:	0e 94 e5 9d 	call	0x13bca	; 0x13bca <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c0de:	83 e0       	ldi	r24, 0x03	; 3
   1c0e0:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <count_drive_types>
   1c0e4:	8c 01       	movw	r16, r24
   1c0e6:	81 e0       	ldi	r24, 0x01	; 1
   1c0e8:	0e 94 c2 95 	call	0x12b84	; 0x12b84 <count_drive_types>
   1c0ec:	ed b7       	in	r30, 0x3d	; 61
   1c0ee:	fe b7       	in	r31, 0x3e	; 62
   1c0f0:	91 87       	std	Z+9, r25	; 0x09
   1c0f2:	80 87       	std	Z+8, r24	; 0x08
   1c0f4:	17 83       	std	Z+7, r17	; 0x07
   1c0f6:	06 83       	std	Z+6, r16	; 0x06
   1c0f8:	8d e0       	ldi	r24, 0x0D	; 13
   1c0fa:	93 e4       	ldi	r25, 0x43	; 67
   1c0fc:	a0 e0       	ldi	r26, 0x00	; 0
   1c0fe:	83 83       	std	Z+3, r24	; 0x03
   1c100:	94 83       	std	Z+4, r25	; 0x04
   1c102:	a5 83       	std	Z+5, r26	; 0x05
   1c104:	8e 01       	movw	r16, r28
   1c106:	04 5f       	subi	r16, 0xF4	; 244
   1c108:	1f 4f       	sbci	r17, 0xFF	; 255
   1c10a:	12 83       	std	Z+2, r17	; 0x02
   1c10c:	01 83       	std	Z+1, r16	; 0x01
   1c10e:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c112:	ed b7       	in	r30, 0x3d	; 61
   1c114:	fe b7       	in	r31, 0x3e	; 62
   1c116:	17 83       	std	Z+7, r17	; 0x07
   1c118:	06 83       	std	Z+6, r16	; 0x06
   1c11a:	87 e0       	ldi	r24, 0x07	; 7
   1c11c:	93 e4       	ldi	r25, 0x43	; 67
   1c11e:	a0 e0       	ldi	r26, 0x00	; 0
   1c120:	83 83       	std	Z+3, r24	; 0x03
   1c122:	94 83       	std	Z+4, r25	; 0x04
   1c124:	a5 83       	std	Z+5, r26	; 0x05
   1c126:	8c e0       	ldi	r24, 0x0C	; 12
   1c128:	93 e0       	ldi	r25, 0x03	; 3
   1c12a:	92 83       	std	Z+2, r25	; 0x02
   1c12c:	81 83       	std	Z+1, r24	; 0x01
   1c12e:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c132:	89 e0       	ldi	r24, 0x09	; 9
   1c134:	97 e1       	ldi	r25, 0x17	; 23
   1c136:	ed b7       	in	r30, 0x3d	; 61
   1c138:	fe b7       	in	r31, 0x3e	; 62
   1c13a:	97 83       	std	Z+7, r25	; 0x07
   1c13c:	86 83       	std	Z+6, r24	; 0x06
   1c13e:	81 e0       	ldi	r24, 0x01	; 1
   1c140:	93 e4       	ldi	r25, 0x43	; 67
   1c142:	a0 e0       	ldi	r26, 0x00	; 0
   1c144:	83 83       	std	Z+3, r24	; 0x03
   1c146:	94 83       	std	Z+4, r25	; 0x04
   1c148:	a5 83       	std	Z+5, r26	; 0x05
   1c14a:	85 ef       	ldi	r24, 0xF5	; 245
   1c14c:	92 e0       	ldi	r25, 0x02	; 2
   1c14e:	92 83       	std	Z+2, r25	; 0x02
   1c150:	81 83       	std	Z+1, r24	; 0x01
   1c152:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <sprintf_P>

	i2c_task_run();
   1c156:	0e 94 43 2a 	call	0x5486	; 0x5486 <i2c_task_run>
	delayms(1000);
   1c15a:	68 ee       	ldi	r22, 0xE8	; 232
   1c15c:	73 e0       	ldi	r23, 0x03	; 3
   1c15e:	80 e0       	ldi	r24, 0x00	; 0
   1c160:	90 e0       	ldi	r25, 0x00	; 0
   1c162:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c166:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <i2c_task+0x2>
   1c16a:	88 23       	and	r24, r24
   1c16c:	21 f0       	breq	.+8      	; 0x1c176 <main+0x384>
   1c16e:	80 91 6b 17 	lds	r24, 0x176B	; 0x80176b <i2c_task+0x3>
   1c172:	88 23       	and	r24, r24
   1c174:	61 f0       	breq	.+24     	; 0x1c18e <main+0x39c>
	{
		i2c_display_task_errors();
   1c176:	0e 94 aa 2c 	call	0x5954	; 0x5954 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c17a:	87 ee       	ldi	r24, 0xE7	; 231
   1c17c:	92 e4       	ldi	r25, 0x42	; 66
   1c17e:	a0 e0       	ldi	r26, 0x00	; 0
   1c180:	ed b7       	in	r30, 0x3d	; 61
   1c182:	fe b7       	in	r31, 0x3e	; 62
   1c184:	81 83       	std	Z+1, r24	; 0x01
   1c186:	92 83       	std	Z+2, r25	; 0x02
   1c188:	a3 83       	std	Z+3, r26	; 0x03
   1c18a:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c18e:	83 ed       	ldi	r24, 0xD3	; 211
   1c190:	92 e4       	ldi	r25, 0x42	; 66
   1c192:	a0 e0       	ldi	r26, 0x00	; 0
   1c194:	ed b7       	in	r30, 0x3d	; 61
   1c196:	fe b7       	in	r31, 0x3e	; 62
   1c198:	81 83       	std	Z+1, r24	; 0x01
   1c19a:	92 83       	std	Z+2, r25	; 0x02
   1c19c:	a3 83       	std	Z+3, r26	; 0x03
   1c19e:	0e 94 8f 44 	call	0x891e	; 0x891e <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c1a2:	81 e0       	ldi	r24, 0x01	; 1
   1c1a4:	1c de       	rcall	.-968    	; 0x1bdde <user_task>
   1c1a6:	fd cf       	rjmp	.-6      	; 0x1c1a2 <main+0x3b0>

0001c1a8 <__mulsi3>:
   1c1a8:	db 01       	movw	r26, r22
   1c1aa:	8f 93       	push	r24
   1c1ac:	9f 93       	push	r25
   1c1ae:	8b d0       	rcall	.+278    	; 0x1c2c6 <__muluhisi3>
   1c1b0:	bf 91       	pop	r27
   1c1b2:	af 91       	pop	r26
   1c1b4:	a2 9f       	mul	r26, r18
   1c1b6:	80 0d       	add	r24, r0
   1c1b8:	91 1d       	adc	r25, r1
   1c1ba:	a3 9f       	mul	r26, r19
   1c1bc:	90 0d       	add	r25, r0
   1c1be:	b2 9f       	mul	r27, r18
   1c1c0:	90 0d       	add	r25, r0
   1c1c2:	11 24       	eor	r1, r1
   1c1c4:	08 95       	ret

0001c1c6 <__udivmodqi4>:
   1c1c6:	99 1b       	sub	r25, r25
   1c1c8:	79 e0       	ldi	r23, 0x09	; 9
   1c1ca:	04 c0       	rjmp	.+8      	; 0x1c1d4 <__udivmodqi4_ep>

0001c1cc <__udivmodqi4_loop>:
   1c1cc:	99 1f       	adc	r25, r25
   1c1ce:	96 17       	cp	r25, r22
   1c1d0:	08 f0       	brcs	.+2      	; 0x1c1d4 <__udivmodqi4_ep>
   1c1d2:	96 1b       	sub	r25, r22

0001c1d4 <__udivmodqi4_ep>:
   1c1d4:	88 1f       	adc	r24, r24
   1c1d6:	7a 95       	dec	r23
   1c1d8:	c9 f7       	brne	.-14     	; 0x1c1cc <__udivmodqi4_loop>
   1c1da:	80 95       	com	r24
   1c1dc:	08 95       	ret

0001c1de <__udivmodhi4>:
   1c1de:	aa 1b       	sub	r26, r26
   1c1e0:	bb 1b       	sub	r27, r27
   1c1e2:	51 e1       	ldi	r21, 0x11	; 17
   1c1e4:	07 c0       	rjmp	.+14     	; 0x1c1f4 <__udivmodhi4_ep>

0001c1e6 <__udivmodhi4_loop>:
   1c1e6:	aa 1f       	adc	r26, r26
   1c1e8:	bb 1f       	adc	r27, r27
   1c1ea:	a6 17       	cp	r26, r22
   1c1ec:	b7 07       	cpc	r27, r23
   1c1ee:	10 f0       	brcs	.+4      	; 0x1c1f4 <__udivmodhi4_ep>
   1c1f0:	a6 1b       	sub	r26, r22
   1c1f2:	b7 0b       	sbc	r27, r23

0001c1f4 <__udivmodhi4_ep>:
   1c1f4:	88 1f       	adc	r24, r24
   1c1f6:	99 1f       	adc	r25, r25
   1c1f8:	5a 95       	dec	r21
   1c1fa:	a9 f7       	brne	.-22     	; 0x1c1e6 <__udivmodhi4_loop>
   1c1fc:	80 95       	com	r24
   1c1fe:	90 95       	com	r25
   1c200:	bc 01       	movw	r22, r24
   1c202:	cd 01       	movw	r24, r26
   1c204:	08 95       	ret

0001c206 <__divmodhi4>:
   1c206:	97 fb       	bst	r25, 7
   1c208:	07 2e       	mov	r0, r23
   1c20a:	16 f4       	brtc	.+4      	; 0x1c210 <__divmodhi4+0xa>
   1c20c:	00 94       	com	r0
   1c20e:	06 d0       	rcall	.+12     	; 0x1c21c <__divmodhi4_neg1>
   1c210:	77 fd       	sbrc	r23, 7
   1c212:	08 d0       	rcall	.+16     	; 0x1c224 <__divmodhi4_neg2>
   1c214:	e4 df       	rcall	.-56     	; 0x1c1de <__udivmodhi4>
   1c216:	07 fc       	sbrc	r0, 7
   1c218:	05 d0       	rcall	.+10     	; 0x1c224 <__divmodhi4_neg2>
   1c21a:	3e f4       	brtc	.+14     	; 0x1c22a <__divmodhi4_exit>

0001c21c <__divmodhi4_neg1>:
   1c21c:	90 95       	com	r25
   1c21e:	81 95       	neg	r24
   1c220:	9f 4f       	sbci	r25, 0xFF	; 255
   1c222:	08 95       	ret

0001c224 <__divmodhi4_neg2>:
   1c224:	70 95       	com	r23
   1c226:	61 95       	neg	r22
   1c228:	7f 4f       	sbci	r23, 0xFF	; 255

0001c22a <__divmodhi4_exit>:
   1c22a:	08 95       	ret

0001c22c <__udivmodsi4>:
   1c22c:	a1 e2       	ldi	r26, 0x21	; 33
   1c22e:	1a 2e       	mov	r1, r26
   1c230:	aa 1b       	sub	r26, r26
   1c232:	bb 1b       	sub	r27, r27
   1c234:	fd 01       	movw	r30, r26
   1c236:	0d c0       	rjmp	.+26     	; 0x1c252 <__udivmodsi4_ep>

0001c238 <__udivmodsi4_loop>:
   1c238:	aa 1f       	adc	r26, r26
   1c23a:	bb 1f       	adc	r27, r27
   1c23c:	ee 1f       	adc	r30, r30
   1c23e:	ff 1f       	adc	r31, r31
   1c240:	a2 17       	cp	r26, r18
   1c242:	b3 07       	cpc	r27, r19
   1c244:	e4 07       	cpc	r30, r20
   1c246:	f5 07       	cpc	r31, r21
   1c248:	20 f0       	brcs	.+8      	; 0x1c252 <__udivmodsi4_ep>
   1c24a:	a2 1b       	sub	r26, r18
   1c24c:	b3 0b       	sbc	r27, r19
   1c24e:	e4 0b       	sbc	r30, r20
   1c250:	f5 0b       	sbc	r31, r21

0001c252 <__udivmodsi4_ep>:
   1c252:	66 1f       	adc	r22, r22
   1c254:	77 1f       	adc	r23, r23
   1c256:	88 1f       	adc	r24, r24
   1c258:	99 1f       	adc	r25, r25
   1c25a:	1a 94       	dec	r1
   1c25c:	69 f7       	brne	.-38     	; 0x1c238 <__udivmodsi4_loop>
   1c25e:	60 95       	com	r22
   1c260:	70 95       	com	r23
   1c262:	80 95       	com	r24
   1c264:	90 95       	com	r25
   1c266:	9b 01       	movw	r18, r22
   1c268:	ac 01       	movw	r20, r24
   1c26a:	bd 01       	movw	r22, r26
   1c26c:	cf 01       	movw	r24, r30
   1c26e:	08 95       	ret

0001c270 <__divmodsi4>:
   1c270:	05 2e       	mov	r0, r21
   1c272:	97 fb       	bst	r25, 7
   1c274:	16 f4       	brtc	.+4      	; 0x1c27a <__divmodsi4+0xa>
   1c276:	00 94       	com	r0
   1c278:	0f d0       	rcall	.+30     	; 0x1c298 <__negsi2>
   1c27a:	57 fd       	sbrc	r21, 7
   1c27c:	05 d0       	rcall	.+10     	; 0x1c288 <__divmodsi4_neg2>
   1c27e:	d6 df       	rcall	.-84     	; 0x1c22c <__udivmodsi4>
   1c280:	07 fc       	sbrc	r0, 7
   1c282:	02 d0       	rcall	.+4      	; 0x1c288 <__divmodsi4_neg2>
   1c284:	46 f4       	brtc	.+16     	; 0x1c296 <__divmodsi4_exit>
   1c286:	08 c0       	rjmp	.+16     	; 0x1c298 <__negsi2>

0001c288 <__divmodsi4_neg2>:
   1c288:	50 95       	com	r21
   1c28a:	40 95       	com	r20
   1c28c:	30 95       	com	r19
   1c28e:	21 95       	neg	r18
   1c290:	3f 4f       	sbci	r19, 0xFF	; 255
   1c292:	4f 4f       	sbci	r20, 0xFF	; 255
   1c294:	5f 4f       	sbci	r21, 0xFF	; 255

0001c296 <__divmodsi4_exit>:
   1c296:	08 95       	ret

0001c298 <__negsi2>:
   1c298:	90 95       	com	r25
   1c29a:	80 95       	com	r24
   1c29c:	70 95       	com	r23
   1c29e:	61 95       	neg	r22
   1c2a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c2a2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c2a4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c2a6:	08 95       	ret

0001c2a8 <__tablejump2__>:
   1c2a8:	ee 0f       	add	r30, r30
   1c2aa:	ff 1f       	adc	r31, r31
   1c2ac:	00 24       	eor	r0, r0
   1c2ae:	00 1c       	adc	r0, r0
   1c2b0:	0b be       	out	0x3b, r0	; 59
   1c2b2:	07 90       	elpm	r0, Z+
   1c2b4:	f6 91       	elpm	r31, Z
   1c2b6:	e0 2d       	mov	r30, r0
   1c2b8:	09 94       	ijmp

0001c2ba <__usmulhisi3>:
   1c2ba:	6f d0       	rcall	.+222    	; 0x1c39a <__umulhisi3>

0001c2bc <__usmulhisi3_tail>:
   1c2bc:	b7 ff       	sbrs	r27, 7
   1c2be:	08 95       	ret
   1c2c0:	82 1b       	sub	r24, r18
   1c2c2:	93 0b       	sbc	r25, r19
   1c2c4:	08 95       	ret

0001c2c6 <__muluhisi3>:
   1c2c6:	69 d0       	rcall	.+210    	; 0x1c39a <__umulhisi3>
   1c2c8:	a5 9f       	mul	r26, r21
   1c2ca:	90 0d       	add	r25, r0
   1c2cc:	b4 9f       	mul	r27, r20
   1c2ce:	90 0d       	add	r25, r0
   1c2d0:	a4 9f       	mul	r26, r20
   1c2d2:	80 0d       	add	r24, r0
   1c2d4:	91 1d       	adc	r25, r1
   1c2d6:	11 24       	eor	r1, r1
   1c2d8:	08 95       	ret

0001c2da <__mulshisi3>:
   1c2da:	b7 ff       	sbrs	r27, 7
   1c2dc:	f4 cf       	rjmp	.-24     	; 0x1c2c6 <__muluhisi3>

0001c2de <__mulohisi3>:
   1c2de:	f3 df       	rcall	.-26     	; 0x1c2c6 <__muluhisi3>
   1c2e0:	82 1b       	sub	r24, r18
   1c2e2:	93 0b       	sbc	r25, r19
   1c2e4:	08 95       	ret

0001c2e6 <__negdi2>:
   1c2e6:	60 95       	com	r22
   1c2e8:	70 95       	com	r23
   1c2ea:	80 95       	com	r24
   1c2ec:	90 95       	com	r25
   1c2ee:	30 95       	com	r19
   1c2f0:	40 95       	com	r20
   1c2f2:	50 95       	com	r21
   1c2f4:	21 95       	neg	r18
   1c2f6:	3f 4f       	sbci	r19, 0xFF	; 255
   1c2f8:	4f 4f       	sbci	r20, 0xFF	; 255
   1c2fa:	5f 4f       	sbci	r21, 0xFF	; 255
   1c2fc:	6f 4f       	sbci	r22, 0xFF	; 255
   1c2fe:	7f 4f       	sbci	r23, 0xFF	; 255
   1c300:	8f 4f       	sbci	r24, 0xFF	; 255
   1c302:	9f 4f       	sbci	r25, 0xFF	; 255
   1c304:	08 95       	ret

0001c306 <__prologue_saves__>:
   1c306:	2f 92       	push	r2
   1c308:	3f 92       	push	r3
   1c30a:	4f 92       	push	r4
   1c30c:	5f 92       	push	r5
   1c30e:	6f 92       	push	r6
   1c310:	7f 92       	push	r7
   1c312:	8f 92       	push	r8
   1c314:	9f 92       	push	r9
   1c316:	af 92       	push	r10
   1c318:	bf 92       	push	r11
   1c31a:	cf 92       	push	r12
   1c31c:	df 92       	push	r13
   1c31e:	ef 92       	push	r14
   1c320:	ff 92       	push	r15
   1c322:	0f 93       	push	r16
   1c324:	1f 93       	push	r17
   1c326:	cf 93       	push	r28
   1c328:	df 93       	push	r29
   1c32a:	cd b7       	in	r28, 0x3d	; 61
   1c32c:	de b7       	in	r29, 0x3e	; 62
   1c32e:	ca 1b       	sub	r28, r26
   1c330:	db 0b       	sbc	r29, r27
   1c332:	0f b6       	in	r0, 0x3f	; 63
   1c334:	f8 94       	cli
   1c336:	de bf       	out	0x3e, r29	; 62
   1c338:	0f be       	out	0x3f, r0	; 63
   1c33a:	cd bf       	out	0x3d, r28	; 61
   1c33c:	09 94       	ijmp

0001c33e <__epilogue_restores__>:
   1c33e:	2a 88       	ldd	r2, Y+18	; 0x12
   1c340:	39 88       	ldd	r3, Y+17	; 0x11
   1c342:	48 88       	ldd	r4, Y+16	; 0x10
   1c344:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c346:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c348:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c34a:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c34c:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c34e:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c350:	b9 84       	ldd	r11, Y+9	; 0x09
   1c352:	c8 84       	ldd	r12, Y+8	; 0x08
   1c354:	df 80       	ldd	r13, Y+7	; 0x07
   1c356:	ee 80       	ldd	r14, Y+6	; 0x06
   1c358:	fd 80       	ldd	r15, Y+5	; 0x05
   1c35a:	0c 81       	ldd	r16, Y+4	; 0x04
   1c35c:	1b 81       	ldd	r17, Y+3	; 0x03
   1c35e:	aa 81       	ldd	r26, Y+2	; 0x02
   1c360:	b9 81       	ldd	r27, Y+1	; 0x01
   1c362:	ce 0f       	add	r28, r30
   1c364:	d1 1d       	adc	r29, r1
   1c366:	0f b6       	in	r0, 0x3f	; 63
   1c368:	f8 94       	cli
   1c36a:	de bf       	out	0x3e, r29	; 62
   1c36c:	0f be       	out	0x3f, r0	; 63
   1c36e:	cd bf       	out	0x3d, r28	; 61
   1c370:	ed 01       	movw	r28, r26
   1c372:	08 95       	ret

0001c374 <__xload_1>:
   1c374:	57 fd       	sbrc	r21, 7
   1c376:	03 c0       	rjmp	.+6      	; 0x1c37e <__xload_1+0xa>
   1c378:	5b bf       	out	0x3b, r21	; 59
   1c37a:	67 91       	elpm	r22, Z+
   1c37c:	08 95       	ret
   1c37e:	60 81       	ld	r22, Z
   1c380:	08 95       	ret

0001c382 <__cmpdi2_s8>:
   1c382:	00 24       	eor	r0, r0
   1c384:	a7 fd       	sbrc	r26, 7
   1c386:	00 94       	com	r0
   1c388:	2a 17       	cp	r18, r26
   1c38a:	30 05       	cpc	r19, r0
   1c38c:	40 05       	cpc	r20, r0
   1c38e:	50 05       	cpc	r21, r0
   1c390:	60 05       	cpc	r22, r0
   1c392:	70 05       	cpc	r23, r0
   1c394:	80 05       	cpc	r24, r0
   1c396:	90 05       	cpc	r25, r0
   1c398:	08 95       	ret

0001c39a <__umulhisi3>:
   1c39a:	a2 9f       	mul	r26, r18
   1c39c:	b0 01       	movw	r22, r0
   1c39e:	b3 9f       	mul	r27, r19
   1c3a0:	c0 01       	movw	r24, r0
   1c3a2:	a3 9f       	mul	r26, r19
   1c3a4:	70 0d       	add	r23, r0
   1c3a6:	81 1d       	adc	r24, r1
   1c3a8:	11 24       	eor	r1, r1
   1c3aa:	91 1d       	adc	r25, r1
   1c3ac:	b2 9f       	mul	r27, r18
   1c3ae:	70 0d       	add	r23, r0
   1c3b0:	81 1d       	adc	r24, r1
   1c3b2:	11 24       	eor	r1, r1
   1c3b4:	91 1d       	adc	r25, r1
   1c3b6:	08 95       	ret

0001c3b8 <__subsf3>:
   1c3b8:	50 58       	subi	r21, 0x80	; 128

0001c3ba <__addsf3>:
   1c3ba:	bb 27       	eor	r27, r27
   1c3bc:	aa 27       	eor	r26, r26
   1c3be:	0e d0       	rcall	.+28     	; 0x1c3dc <__addsf3x>
   1c3c0:	75 c1       	rjmp	.+746    	; 0x1c6ac <__fp_round>
   1c3c2:	66 d1       	rcall	.+716    	; 0x1c690 <__fp_pscA>
   1c3c4:	30 f0       	brcs	.+12     	; 0x1c3d2 <__addsf3+0x18>
   1c3c6:	6b d1       	rcall	.+726    	; 0x1c69e <__fp_pscB>
   1c3c8:	20 f0       	brcs	.+8      	; 0x1c3d2 <__addsf3+0x18>
   1c3ca:	31 f4       	brne	.+12     	; 0x1c3d8 <__addsf3+0x1e>
   1c3cc:	9f 3f       	cpi	r25, 0xFF	; 255
   1c3ce:	11 f4       	brne	.+4      	; 0x1c3d4 <__addsf3+0x1a>
   1c3d0:	1e f4       	brtc	.+6      	; 0x1c3d8 <__addsf3+0x1e>
   1c3d2:	5b c1       	rjmp	.+694    	; 0x1c68a <__fp_nan>
   1c3d4:	0e f4       	brtc	.+2      	; 0x1c3d8 <__addsf3+0x1e>
   1c3d6:	e0 95       	com	r30
   1c3d8:	e7 fb       	bst	r30, 7
   1c3da:	51 c1       	rjmp	.+674    	; 0x1c67e <__fp_inf>

0001c3dc <__addsf3x>:
   1c3dc:	e9 2f       	mov	r30, r25
   1c3de:	77 d1       	rcall	.+750    	; 0x1c6ce <__fp_split3>
   1c3e0:	80 f3       	brcs	.-32     	; 0x1c3c2 <__addsf3+0x8>
   1c3e2:	ba 17       	cp	r27, r26
   1c3e4:	62 07       	cpc	r22, r18
   1c3e6:	73 07       	cpc	r23, r19
   1c3e8:	84 07       	cpc	r24, r20
   1c3ea:	95 07       	cpc	r25, r21
   1c3ec:	18 f0       	brcs	.+6      	; 0x1c3f4 <__addsf3x+0x18>
   1c3ee:	71 f4       	brne	.+28     	; 0x1c40c <__addsf3x+0x30>
   1c3f0:	9e f5       	brtc	.+102    	; 0x1c458 <__addsf3x+0x7c>
   1c3f2:	8f c1       	rjmp	.+798    	; 0x1c712 <__fp_zero>
   1c3f4:	0e f4       	brtc	.+2      	; 0x1c3f8 <__addsf3x+0x1c>
   1c3f6:	e0 95       	com	r30
   1c3f8:	0b 2e       	mov	r0, r27
   1c3fa:	ba 2f       	mov	r27, r26
   1c3fc:	a0 2d       	mov	r26, r0
   1c3fe:	0b 01       	movw	r0, r22
   1c400:	b9 01       	movw	r22, r18
   1c402:	90 01       	movw	r18, r0
   1c404:	0c 01       	movw	r0, r24
   1c406:	ca 01       	movw	r24, r20
   1c408:	a0 01       	movw	r20, r0
   1c40a:	11 24       	eor	r1, r1
   1c40c:	ff 27       	eor	r31, r31
   1c40e:	59 1b       	sub	r21, r25
   1c410:	99 f0       	breq	.+38     	; 0x1c438 <__addsf3x+0x5c>
   1c412:	59 3f       	cpi	r21, 0xF9	; 249
   1c414:	50 f4       	brcc	.+20     	; 0x1c42a <__addsf3x+0x4e>
   1c416:	50 3e       	cpi	r21, 0xE0	; 224
   1c418:	68 f1       	brcs	.+90     	; 0x1c474 <__addsf3x+0x98>
   1c41a:	1a 16       	cp	r1, r26
   1c41c:	f0 40       	sbci	r31, 0x00	; 0
   1c41e:	a2 2f       	mov	r26, r18
   1c420:	23 2f       	mov	r18, r19
   1c422:	34 2f       	mov	r19, r20
   1c424:	44 27       	eor	r20, r20
   1c426:	58 5f       	subi	r21, 0xF8	; 248
   1c428:	f3 cf       	rjmp	.-26     	; 0x1c410 <__addsf3x+0x34>
   1c42a:	46 95       	lsr	r20
   1c42c:	37 95       	ror	r19
   1c42e:	27 95       	ror	r18
   1c430:	a7 95       	ror	r26
   1c432:	f0 40       	sbci	r31, 0x00	; 0
   1c434:	53 95       	inc	r21
   1c436:	c9 f7       	brne	.-14     	; 0x1c42a <__addsf3x+0x4e>
   1c438:	7e f4       	brtc	.+30     	; 0x1c458 <__addsf3x+0x7c>
   1c43a:	1f 16       	cp	r1, r31
   1c43c:	ba 0b       	sbc	r27, r26
   1c43e:	62 0b       	sbc	r22, r18
   1c440:	73 0b       	sbc	r23, r19
   1c442:	84 0b       	sbc	r24, r20
   1c444:	ba f0       	brmi	.+46     	; 0x1c474 <__addsf3x+0x98>
   1c446:	91 50       	subi	r25, 0x01	; 1
   1c448:	a1 f0       	breq	.+40     	; 0x1c472 <__addsf3x+0x96>
   1c44a:	ff 0f       	add	r31, r31
   1c44c:	bb 1f       	adc	r27, r27
   1c44e:	66 1f       	adc	r22, r22
   1c450:	77 1f       	adc	r23, r23
   1c452:	88 1f       	adc	r24, r24
   1c454:	c2 f7       	brpl	.-16     	; 0x1c446 <__addsf3x+0x6a>
   1c456:	0e c0       	rjmp	.+28     	; 0x1c474 <__addsf3x+0x98>
   1c458:	ba 0f       	add	r27, r26
   1c45a:	62 1f       	adc	r22, r18
   1c45c:	73 1f       	adc	r23, r19
   1c45e:	84 1f       	adc	r24, r20
   1c460:	48 f4       	brcc	.+18     	; 0x1c474 <__addsf3x+0x98>
   1c462:	87 95       	ror	r24
   1c464:	77 95       	ror	r23
   1c466:	67 95       	ror	r22
   1c468:	b7 95       	ror	r27
   1c46a:	f7 95       	ror	r31
   1c46c:	9e 3f       	cpi	r25, 0xFE	; 254
   1c46e:	08 f0       	brcs	.+2      	; 0x1c472 <__addsf3x+0x96>
   1c470:	b3 cf       	rjmp	.-154    	; 0x1c3d8 <__addsf3+0x1e>
   1c472:	93 95       	inc	r25
   1c474:	88 0f       	add	r24, r24
   1c476:	08 f0       	brcs	.+2      	; 0x1c47a <__addsf3x+0x9e>
   1c478:	99 27       	eor	r25, r25
   1c47a:	ee 0f       	add	r30, r30
   1c47c:	97 95       	ror	r25
   1c47e:	87 95       	ror	r24
   1c480:	08 95       	ret

0001c482 <__cmpsf2>:
   1c482:	d9 d0       	rcall	.+434    	; 0x1c636 <__fp_cmp>
   1c484:	08 f4       	brcc	.+2      	; 0x1c488 <__cmpsf2+0x6>
   1c486:	81 e0       	ldi	r24, 0x01	; 1
   1c488:	08 95       	ret

0001c48a <__divsf3>:
   1c48a:	0c d0       	rcall	.+24     	; 0x1c4a4 <__divsf3x>
   1c48c:	0f c1       	rjmp	.+542    	; 0x1c6ac <__fp_round>
   1c48e:	07 d1       	rcall	.+526    	; 0x1c69e <__fp_pscB>
   1c490:	40 f0       	brcs	.+16     	; 0x1c4a2 <__divsf3+0x18>
   1c492:	fe d0       	rcall	.+508    	; 0x1c690 <__fp_pscA>
   1c494:	30 f0       	brcs	.+12     	; 0x1c4a2 <__divsf3+0x18>
   1c496:	21 f4       	brne	.+8      	; 0x1c4a0 <__divsf3+0x16>
   1c498:	5f 3f       	cpi	r21, 0xFF	; 255
   1c49a:	19 f0       	breq	.+6      	; 0x1c4a2 <__divsf3+0x18>
   1c49c:	f0 c0       	rjmp	.+480    	; 0x1c67e <__fp_inf>
   1c49e:	51 11       	cpse	r21, r1
   1c4a0:	39 c1       	rjmp	.+626    	; 0x1c714 <__fp_szero>
   1c4a2:	f3 c0       	rjmp	.+486    	; 0x1c68a <__fp_nan>

0001c4a4 <__divsf3x>:
   1c4a4:	14 d1       	rcall	.+552    	; 0x1c6ce <__fp_split3>
   1c4a6:	98 f3       	brcs	.-26     	; 0x1c48e <__divsf3+0x4>

0001c4a8 <__divsf3_pse>:
   1c4a8:	99 23       	and	r25, r25
   1c4aa:	c9 f3       	breq	.-14     	; 0x1c49e <__divsf3+0x14>
   1c4ac:	55 23       	and	r21, r21
   1c4ae:	b1 f3       	breq	.-20     	; 0x1c49c <__divsf3+0x12>
   1c4b0:	95 1b       	sub	r25, r21
   1c4b2:	55 0b       	sbc	r21, r21
   1c4b4:	bb 27       	eor	r27, r27
   1c4b6:	aa 27       	eor	r26, r26
   1c4b8:	62 17       	cp	r22, r18
   1c4ba:	73 07       	cpc	r23, r19
   1c4bc:	84 07       	cpc	r24, r20
   1c4be:	38 f0       	brcs	.+14     	; 0x1c4ce <__divsf3_pse+0x26>
   1c4c0:	9f 5f       	subi	r25, 0xFF	; 255
   1c4c2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c4c4:	22 0f       	add	r18, r18
   1c4c6:	33 1f       	adc	r19, r19
   1c4c8:	44 1f       	adc	r20, r20
   1c4ca:	aa 1f       	adc	r26, r26
   1c4cc:	a9 f3       	breq	.-22     	; 0x1c4b8 <__divsf3_pse+0x10>
   1c4ce:	33 d0       	rcall	.+102    	; 0x1c536 <__divsf3_pse+0x8e>
   1c4d0:	0e 2e       	mov	r0, r30
   1c4d2:	3a f0       	brmi	.+14     	; 0x1c4e2 <__divsf3_pse+0x3a>
   1c4d4:	e0 e8       	ldi	r30, 0x80	; 128
   1c4d6:	30 d0       	rcall	.+96     	; 0x1c538 <__divsf3_pse+0x90>
   1c4d8:	91 50       	subi	r25, 0x01	; 1
   1c4da:	50 40       	sbci	r21, 0x00	; 0
   1c4dc:	e6 95       	lsr	r30
   1c4de:	00 1c       	adc	r0, r0
   1c4e0:	ca f7       	brpl	.-14     	; 0x1c4d4 <__divsf3_pse+0x2c>
   1c4e2:	29 d0       	rcall	.+82     	; 0x1c536 <__divsf3_pse+0x8e>
   1c4e4:	fe 2f       	mov	r31, r30
   1c4e6:	27 d0       	rcall	.+78     	; 0x1c536 <__divsf3_pse+0x8e>
   1c4e8:	66 0f       	add	r22, r22
   1c4ea:	77 1f       	adc	r23, r23
   1c4ec:	88 1f       	adc	r24, r24
   1c4ee:	bb 1f       	adc	r27, r27
   1c4f0:	26 17       	cp	r18, r22
   1c4f2:	37 07       	cpc	r19, r23
   1c4f4:	48 07       	cpc	r20, r24
   1c4f6:	ab 07       	cpc	r26, r27
   1c4f8:	b0 e8       	ldi	r27, 0x80	; 128
   1c4fa:	09 f0       	breq	.+2      	; 0x1c4fe <__divsf3_pse+0x56>
   1c4fc:	bb 0b       	sbc	r27, r27
   1c4fe:	80 2d       	mov	r24, r0
   1c500:	bf 01       	movw	r22, r30
   1c502:	ff 27       	eor	r31, r31
   1c504:	93 58       	subi	r25, 0x83	; 131
   1c506:	5f 4f       	sbci	r21, 0xFF	; 255
   1c508:	2a f0       	brmi	.+10     	; 0x1c514 <__divsf3_pse+0x6c>
   1c50a:	9e 3f       	cpi	r25, 0xFE	; 254
   1c50c:	51 05       	cpc	r21, r1
   1c50e:	68 f0       	brcs	.+26     	; 0x1c52a <__divsf3_pse+0x82>
   1c510:	b6 c0       	rjmp	.+364    	; 0x1c67e <__fp_inf>
   1c512:	00 c1       	rjmp	.+512    	; 0x1c714 <__fp_szero>
   1c514:	5f 3f       	cpi	r21, 0xFF	; 255
   1c516:	ec f3       	brlt	.-6      	; 0x1c512 <__divsf3_pse+0x6a>
   1c518:	98 3e       	cpi	r25, 0xE8	; 232
   1c51a:	dc f3       	brlt	.-10     	; 0x1c512 <__divsf3_pse+0x6a>
   1c51c:	86 95       	lsr	r24
   1c51e:	77 95       	ror	r23
   1c520:	67 95       	ror	r22
   1c522:	b7 95       	ror	r27
   1c524:	f7 95       	ror	r31
   1c526:	9f 5f       	subi	r25, 0xFF	; 255
   1c528:	c9 f7       	brne	.-14     	; 0x1c51c <__divsf3_pse+0x74>
   1c52a:	88 0f       	add	r24, r24
   1c52c:	91 1d       	adc	r25, r1
   1c52e:	96 95       	lsr	r25
   1c530:	87 95       	ror	r24
   1c532:	97 f9       	bld	r25, 7
   1c534:	08 95       	ret
   1c536:	e1 e0       	ldi	r30, 0x01	; 1
   1c538:	66 0f       	add	r22, r22
   1c53a:	77 1f       	adc	r23, r23
   1c53c:	88 1f       	adc	r24, r24
   1c53e:	bb 1f       	adc	r27, r27
   1c540:	62 17       	cp	r22, r18
   1c542:	73 07       	cpc	r23, r19
   1c544:	84 07       	cpc	r24, r20
   1c546:	ba 07       	cpc	r27, r26
   1c548:	20 f0       	brcs	.+8      	; 0x1c552 <__divsf3_pse+0xaa>
   1c54a:	62 1b       	sub	r22, r18
   1c54c:	73 0b       	sbc	r23, r19
   1c54e:	84 0b       	sbc	r24, r20
   1c550:	ba 0b       	sbc	r27, r26
   1c552:	ee 1f       	adc	r30, r30
   1c554:	88 f7       	brcc	.-30     	; 0x1c538 <__divsf3_pse+0x90>
   1c556:	e0 95       	com	r30
   1c558:	08 95       	ret

0001c55a <__fixsfsi>:
   1c55a:	04 d0       	rcall	.+8      	; 0x1c564 <__fixunssfsi>
   1c55c:	68 94       	set
   1c55e:	b1 11       	cpse	r27, r1
   1c560:	d9 c0       	rjmp	.+434    	; 0x1c714 <__fp_szero>
   1c562:	08 95       	ret

0001c564 <__fixunssfsi>:
   1c564:	bc d0       	rcall	.+376    	; 0x1c6de <__fp_splitA>
   1c566:	88 f0       	brcs	.+34     	; 0x1c58a <__fixunssfsi+0x26>
   1c568:	9f 57       	subi	r25, 0x7F	; 127
   1c56a:	90 f0       	brcs	.+36     	; 0x1c590 <__fixunssfsi+0x2c>
   1c56c:	b9 2f       	mov	r27, r25
   1c56e:	99 27       	eor	r25, r25
   1c570:	b7 51       	subi	r27, 0x17	; 23
   1c572:	a0 f0       	brcs	.+40     	; 0x1c59c <__fixunssfsi+0x38>
   1c574:	d1 f0       	breq	.+52     	; 0x1c5aa <__fixunssfsi+0x46>
   1c576:	66 0f       	add	r22, r22
   1c578:	77 1f       	adc	r23, r23
   1c57a:	88 1f       	adc	r24, r24
   1c57c:	99 1f       	adc	r25, r25
   1c57e:	1a f0       	brmi	.+6      	; 0x1c586 <__fixunssfsi+0x22>
   1c580:	ba 95       	dec	r27
   1c582:	c9 f7       	brne	.-14     	; 0x1c576 <__fixunssfsi+0x12>
   1c584:	12 c0       	rjmp	.+36     	; 0x1c5aa <__fixunssfsi+0x46>
   1c586:	b1 30       	cpi	r27, 0x01	; 1
   1c588:	81 f0       	breq	.+32     	; 0x1c5aa <__fixunssfsi+0x46>
   1c58a:	c3 d0       	rcall	.+390    	; 0x1c712 <__fp_zero>
   1c58c:	b1 e0       	ldi	r27, 0x01	; 1
   1c58e:	08 95       	ret
   1c590:	c0 c0       	rjmp	.+384    	; 0x1c712 <__fp_zero>
   1c592:	67 2f       	mov	r22, r23
   1c594:	78 2f       	mov	r23, r24
   1c596:	88 27       	eor	r24, r24
   1c598:	b8 5f       	subi	r27, 0xF8	; 248
   1c59a:	39 f0       	breq	.+14     	; 0x1c5aa <__fixunssfsi+0x46>
   1c59c:	b9 3f       	cpi	r27, 0xF9	; 249
   1c59e:	cc f3       	brlt	.-14     	; 0x1c592 <__fixunssfsi+0x2e>
   1c5a0:	86 95       	lsr	r24
   1c5a2:	77 95       	ror	r23
   1c5a4:	67 95       	ror	r22
   1c5a6:	b3 95       	inc	r27
   1c5a8:	d9 f7       	brne	.-10     	; 0x1c5a0 <__fixunssfsi+0x3c>
   1c5aa:	3e f4       	brtc	.+14     	; 0x1c5ba <__fixunssfsi+0x56>
   1c5ac:	90 95       	com	r25
   1c5ae:	80 95       	com	r24
   1c5b0:	70 95       	com	r23
   1c5b2:	61 95       	neg	r22
   1c5b4:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5b6:	8f 4f       	sbci	r24, 0xFF	; 255
   1c5b8:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5ba:	08 95       	ret

0001c5bc <__floatunsisf>:
   1c5bc:	e8 94       	clt
   1c5be:	09 c0       	rjmp	.+18     	; 0x1c5d2 <__floatsisf+0x12>

0001c5c0 <__floatsisf>:
   1c5c0:	97 fb       	bst	r25, 7
   1c5c2:	3e f4       	brtc	.+14     	; 0x1c5d2 <__floatsisf+0x12>
   1c5c4:	90 95       	com	r25
   1c5c6:	80 95       	com	r24
   1c5c8:	70 95       	com	r23
   1c5ca:	61 95       	neg	r22
   1c5cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5ce:	8f 4f       	sbci	r24, 0xFF	; 255
   1c5d0:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5d2:	99 23       	and	r25, r25
   1c5d4:	a9 f0       	breq	.+42     	; 0x1c600 <__floatsisf+0x40>
   1c5d6:	f9 2f       	mov	r31, r25
   1c5d8:	96 e9       	ldi	r25, 0x96	; 150
   1c5da:	bb 27       	eor	r27, r27
   1c5dc:	93 95       	inc	r25
   1c5de:	f6 95       	lsr	r31
   1c5e0:	87 95       	ror	r24
   1c5e2:	77 95       	ror	r23
   1c5e4:	67 95       	ror	r22
   1c5e6:	b7 95       	ror	r27
   1c5e8:	f1 11       	cpse	r31, r1
   1c5ea:	f8 cf       	rjmp	.-16     	; 0x1c5dc <__floatsisf+0x1c>
   1c5ec:	fa f4       	brpl	.+62     	; 0x1c62c <__floatsisf+0x6c>
   1c5ee:	bb 0f       	add	r27, r27
   1c5f0:	11 f4       	brne	.+4      	; 0x1c5f6 <__floatsisf+0x36>
   1c5f2:	60 ff       	sbrs	r22, 0
   1c5f4:	1b c0       	rjmp	.+54     	; 0x1c62c <__floatsisf+0x6c>
   1c5f6:	6f 5f       	subi	r22, 0xFF	; 255
   1c5f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5fa:	8f 4f       	sbci	r24, 0xFF	; 255
   1c5fc:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5fe:	16 c0       	rjmp	.+44     	; 0x1c62c <__floatsisf+0x6c>
   1c600:	88 23       	and	r24, r24
   1c602:	11 f0       	breq	.+4      	; 0x1c608 <__floatsisf+0x48>
   1c604:	96 e9       	ldi	r25, 0x96	; 150
   1c606:	11 c0       	rjmp	.+34     	; 0x1c62a <__floatsisf+0x6a>
   1c608:	77 23       	and	r23, r23
   1c60a:	21 f0       	breq	.+8      	; 0x1c614 <__floatsisf+0x54>
   1c60c:	9e e8       	ldi	r25, 0x8E	; 142
   1c60e:	87 2f       	mov	r24, r23
   1c610:	76 2f       	mov	r23, r22
   1c612:	05 c0       	rjmp	.+10     	; 0x1c61e <__floatsisf+0x5e>
   1c614:	66 23       	and	r22, r22
   1c616:	71 f0       	breq	.+28     	; 0x1c634 <__floatsisf+0x74>
   1c618:	96 e8       	ldi	r25, 0x86	; 134
   1c61a:	86 2f       	mov	r24, r22
   1c61c:	70 e0       	ldi	r23, 0x00	; 0
   1c61e:	60 e0       	ldi	r22, 0x00	; 0
   1c620:	2a f0       	brmi	.+10     	; 0x1c62c <__floatsisf+0x6c>
   1c622:	9a 95       	dec	r25
   1c624:	66 0f       	add	r22, r22
   1c626:	77 1f       	adc	r23, r23
   1c628:	88 1f       	adc	r24, r24
   1c62a:	da f7       	brpl	.-10     	; 0x1c622 <__floatsisf+0x62>
   1c62c:	88 0f       	add	r24, r24
   1c62e:	96 95       	lsr	r25
   1c630:	87 95       	ror	r24
   1c632:	97 f9       	bld	r25, 7
   1c634:	08 95       	ret

0001c636 <__fp_cmp>:
   1c636:	99 0f       	add	r25, r25
   1c638:	00 08       	sbc	r0, r0
   1c63a:	55 0f       	add	r21, r21
   1c63c:	aa 0b       	sbc	r26, r26
   1c63e:	e0 e8       	ldi	r30, 0x80	; 128
   1c640:	fe ef       	ldi	r31, 0xFE	; 254
   1c642:	16 16       	cp	r1, r22
   1c644:	17 06       	cpc	r1, r23
   1c646:	e8 07       	cpc	r30, r24
   1c648:	f9 07       	cpc	r31, r25
   1c64a:	c0 f0       	brcs	.+48     	; 0x1c67c <__fp_cmp+0x46>
   1c64c:	12 16       	cp	r1, r18
   1c64e:	13 06       	cpc	r1, r19
   1c650:	e4 07       	cpc	r30, r20
   1c652:	f5 07       	cpc	r31, r21
   1c654:	98 f0       	brcs	.+38     	; 0x1c67c <__fp_cmp+0x46>
   1c656:	62 1b       	sub	r22, r18
   1c658:	73 0b       	sbc	r23, r19
   1c65a:	84 0b       	sbc	r24, r20
   1c65c:	95 0b       	sbc	r25, r21
   1c65e:	39 f4       	brne	.+14     	; 0x1c66e <__fp_cmp+0x38>
   1c660:	0a 26       	eor	r0, r26
   1c662:	61 f0       	breq	.+24     	; 0x1c67c <__fp_cmp+0x46>
   1c664:	23 2b       	or	r18, r19
   1c666:	24 2b       	or	r18, r20
   1c668:	25 2b       	or	r18, r21
   1c66a:	21 f4       	brne	.+8      	; 0x1c674 <__fp_cmp+0x3e>
   1c66c:	08 95       	ret
   1c66e:	0a 26       	eor	r0, r26
   1c670:	09 f4       	brne	.+2      	; 0x1c674 <__fp_cmp+0x3e>
   1c672:	a1 40       	sbci	r26, 0x01	; 1
   1c674:	a6 95       	lsr	r26
   1c676:	8f ef       	ldi	r24, 0xFF	; 255
   1c678:	81 1d       	adc	r24, r1
   1c67a:	81 1d       	adc	r24, r1
   1c67c:	08 95       	ret

0001c67e <__fp_inf>:
   1c67e:	97 f9       	bld	r25, 7
   1c680:	9f 67       	ori	r25, 0x7F	; 127
   1c682:	80 e8       	ldi	r24, 0x80	; 128
   1c684:	70 e0       	ldi	r23, 0x00	; 0
   1c686:	60 e0       	ldi	r22, 0x00	; 0
   1c688:	08 95       	ret

0001c68a <__fp_nan>:
   1c68a:	9f ef       	ldi	r25, 0xFF	; 255
   1c68c:	80 ec       	ldi	r24, 0xC0	; 192
   1c68e:	08 95       	ret

0001c690 <__fp_pscA>:
   1c690:	00 24       	eor	r0, r0
   1c692:	0a 94       	dec	r0
   1c694:	16 16       	cp	r1, r22
   1c696:	17 06       	cpc	r1, r23
   1c698:	18 06       	cpc	r1, r24
   1c69a:	09 06       	cpc	r0, r25
   1c69c:	08 95       	ret

0001c69e <__fp_pscB>:
   1c69e:	00 24       	eor	r0, r0
   1c6a0:	0a 94       	dec	r0
   1c6a2:	12 16       	cp	r1, r18
   1c6a4:	13 06       	cpc	r1, r19
   1c6a6:	14 06       	cpc	r1, r20
   1c6a8:	05 06       	cpc	r0, r21
   1c6aa:	08 95       	ret

0001c6ac <__fp_round>:
   1c6ac:	09 2e       	mov	r0, r25
   1c6ae:	03 94       	inc	r0
   1c6b0:	00 0c       	add	r0, r0
   1c6b2:	11 f4       	brne	.+4      	; 0x1c6b8 <__fp_round+0xc>
   1c6b4:	88 23       	and	r24, r24
   1c6b6:	52 f0       	brmi	.+20     	; 0x1c6cc <__fp_round+0x20>
   1c6b8:	bb 0f       	add	r27, r27
   1c6ba:	40 f4       	brcc	.+16     	; 0x1c6cc <__fp_round+0x20>
   1c6bc:	bf 2b       	or	r27, r31
   1c6be:	11 f4       	brne	.+4      	; 0x1c6c4 <__fp_round+0x18>
   1c6c0:	60 ff       	sbrs	r22, 0
   1c6c2:	04 c0       	rjmp	.+8      	; 0x1c6cc <__fp_round+0x20>
   1c6c4:	6f 5f       	subi	r22, 0xFF	; 255
   1c6c6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6c8:	8f 4f       	sbci	r24, 0xFF	; 255
   1c6ca:	9f 4f       	sbci	r25, 0xFF	; 255
   1c6cc:	08 95       	ret

0001c6ce <__fp_split3>:
   1c6ce:	57 fd       	sbrc	r21, 7
   1c6d0:	90 58       	subi	r25, 0x80	; 128
   1c6d2:	44 0f       	add	r20, r20
   1c6d4:	55 1f       	adc	r21, r21
   1c6d6:	59 f0       	breq	.+22     	; 0x1c6ee <__fp_splitA+0x10>
   1c6d8:	5f 3f       	cpi	r21, 0xFF	; 255
   1c6da:	71 f0       	breq	.+28     	; 0x1c6f8 <__fp_splitA+0x1a>
   1c6dc:	47 95       	ror	r20

0001c6de <__fp_splitA>:
   1c6de:	88 0f       	add	r24, r24
   1c6e0:	97 fb       	bst	r25, 7
   1c6e2:	99 1f       	adc	r25, r25
   1c6e4:	61 f0       	breq	.+24     	; 0x1c6fe <__fp_splitA+0x20>
   1c6e6:	9f 3f       	cpi	r25, 0xFF	; 255
   1c6e8:	79 f0       	breq	.+30     	; 0x1c708 <__fp_splitA+0x2a>
   1c6ea:	87 95       	ror	r24
   1c6ec:	08 95       	ret
   1c6ee:	12 16       	cp	r1, r18
   1c6f0:	13 06       	cpc	r1, r19
   1c6f2:	14 06       	cpc	r1, r20
   1c6f4:	55 1f       	adc	r21, r21
   1c6f6:	f2 cf       	rjmp	.-28     	; 0x1c6dc <__fp_split3+0xe>
   1c6f8:	46 95       	lsr	r20
   1c6fa:	f1 df       	rcall	.-30     	; 0x1c6de <__fp_splitA>
   1c6fc:	08 c0       	rjmp	.+16     	; 0x1c70e <__fp_splitA+0x30>
   1c6fe:	16 16       	cp	r1, r22
   1c700:	17 06       	cpc	r1, r23
   1c702:	18 06       	cpc	r1, r24
   1c704:	99 1f       	adc	r25, r25
   1c706:	f1 cf       	rjmp	.-30     	; 0x1c6ea <__fp_splitA+0xc>
   1c708:	86 95       	lsr	r24
   1c70a:	71 05       	cpc	r23, r1
   1c70c:	61 05       	cpc	r22, r1
   1c70e:	08 94       	sec
   1c710:	08 95       	ret

0001c712 <__fp_zero>:
   1c712:	e8 94       	clt

0001c714 <__fp_szero>:
   1c714:	bb 27       	eor	r27, r27
   1c716:	66 27       	eor	r22, r22
   1c718:	77 27       	eor	r23, r23
   1c71a:	cb 01       	movw	r24, r22
   1c71c:	97 f9       	bld	r25, 7
   1c71e:	08 95       	ret

0001c720 <__gesf2>:
   1c720:	8a df       	rcall	.-236    	; 0x1c636 <__fp_cmp>
   1c722:	08 f4       	brcc	.+2      	; 0x1c726 <__gesf2+0x6>
   1c724:	8f ef       	ldi	r24, 0xFF	; 255
   1c726:	08 95       	ret

0001c728 <__mulsf3>:
   1c728:	0b d0       	rcall	.+22     	; 0x1c740 <__mulsf3x>
   1c72a:	c0 cf       	rjmp	.-128    	; 0x1c6ac <__fp_round>
   1c72c:	b1 df       	rcall	.-158    	; 0x1c690 <__fp_pscA>
   1c72e:	28 f0       	brcs	.+10     	; 0x1c73a <__mulsf3+0x12>
   1c730:	b6 df       	rcall	.-148    	; 0x1c69e <__fp_pscB>
   1c732:	18 f0       	brcs	.+6      	; 0x1c73a <__mulsf3+0x12>
   1c734:	95 23       	and	r25, r21
   1c736:	09 f0       	breq	.+2      	; 0x1c73a <__mulsf3+0x12>
   1c738:	a2 cf       	rjmp	.-188    	; 0x1c67e <__fp_inf>
   1c73a:	a7 cf       	rjmp	.-178    	; 0x1c68a <__fp_nan>
   1c73c:	11 24       	eor	r1, r1
   1c73e:	ea cf       	rjmp	.-44     	; 0x1c714 <__fp_szero>

0001c740 <__mulsf3x>:
   1c740:	c6 df       	rcall	.-116    	; 0x1c6ce <__fp_split3>
   1c742:	a0 f3       	brcs	.-24     	; 0x1c72c <__mulsf3+0x4>

0001c744 <__mulsf3_pse>:
   1c744:	95 9f       	mul	r25, r21
   1c746:	d1 f3       	breq	.-12     	; 0x1c73c <__mulsf3+0x14>
   1c748:	95 0f       	add	r25, r21
   1c74a:	50 e0       	ldi	r21, 0x00	; 0
   1c74c:	55 1f       	adc	r21, r21
   1c74e:	62 9f       	mul	r22, r18
   1c750:	f0 01       	movw	r30, r0
   1c752:	72 9f       	mul	r23, r18
   1c754:	bb 27       	eor	r27, r27
   1c756:	f0 0d       	add	r31, r0
   1c758:	b1 1d       	adc	r27, r1
   1c75a:	63 9f       	mul	r22, r19
   1c75c:	aa 27       	eor	r26, r26
   1c75e:	f0 0d       	add	r31, r0
   1c760:	b1 1d       	adc	r27, r1
   1c762:	aa 1f       	adc	r26, r26
   1c764:	64 9f       	mul	r22, r20
   1c766:	66 27       	eor	r22, r22
   1c768:	b0 0d       	add	r27, r0
   1c76a:	a1 1d       	adc	r26, r1
   1c76c:	66 1f       	adc	r22, r22
   1c76e:	82 9f       	mul	r24, r18
   1c770:	22 27       	eor	r18, r18
   1c772:	b0 0d       	add	r27, r0
   1c774:	a1 1d       	adc	r26, r1
   1c776:	62 1f       	adc	r22, r18
   1c778:	73 9f       	mul	r23, r19
   1c77a:	b0 0d       	add	r27, r0
   1c77c:	a1 1d       	adc	r26, r1
   1c77e:	62 1f       	adc	r22, r18
   1c780:	83 9f       	mul	r24, r19
   1c782:	a0 0d       	add	r26, r0
   1c784:	61 1d       	adc	r22, r1
   1c786:	22 1f       	adc	r18, r18
   1c788:	74 9f       	mul	r23, r20
   1c78a:	33 27       	eor	r19, r19
   1c78c:	a0 0d       	add	r26, r0
   1c78e:	61 1d       	adc	r22, r1
   1c790:	23 1f       	adc	r18, r19
   1c792:	84 9f       	mul	r24, r20
   1c794:	60 0d       	add	r22, r0
   1c796:	21 1d       	adc	r18, r1
   1c798:	82 2f       	mov	r24, r18
   1c79a:	76 2f       	mov	r23, r22
   1c79c:	6a 2f       	mov	r22, r26
   1c79e:	11 24       	eor	r1, r1
   1c7a0:	9f 57       	subi	r25, 0x7F	; 127
   1c7a2:	50 40       	sbci	r21, 0x00	; 0
   1c7a4:	8a f0       	brmi	.+34     	; 0x1c7c8 <__mulsf3_pse+0x84>
   1c7a6:	e1 f0       	breq	.+56     	; 0x1c7e0 <__mulsf3_pse+0x9c>
   1c7a8:	88 23       	and	r24, r24
   1c7aa:	4a f0       	brmi	.+18     	; 0x1c7be <__mulsf3_pse+0x7a>
   1c7ac:	ee 0f       	add	r30, r30
   1c7ae:	ff 1f       	adc	r31, r31
   1c7b0:	bb 1f       	adc	r27, r27
   1c7b2:	66 1f       	adc	r22, r22
   1c7b4:	77 1f       	adc	r23, r23
   1c7b6:	88 1f       	adc	r24, r24
   1c7b8:	91 50       	subi	r25, 0x01	; 1
   1c7ba:	50 40       	sbci	r21, 0x00	; 0
   1c7bc:	a9 f7       	brne	.-22     	; 0x1c7a8 <__mulsf3_pse+0x64>
   1c7be:	9e 3f       	cpi	r25, 0xFE	; 254
   1c7c0:	51 05       	cpc	r21, r1
   1c7c2:	70 f0       	brcs	.+28     	; 0x1c7e0 <__mulsf3_pse+0x9c>
   1c7c4:	5c cf       	rjmp	.-328    	; 0x1c67e <__fp_inf>
   1c7c6:	a6 cf       	rjmp	.-180    	; 0x1c714 <__fp_szero>
   1c7c8:	5f 3f       	cpi	r21, 0xFF	; 255
   1c7ca:	ec f3       	brlt	.-6      	; 0x1c7c6 <__mulsf3_pse+0x82>
   1c7cc:	98 3e       	cpi	r25, 0xE8	; 232
   1c7ce:	dc f3       	brlt	.-10     	; 0x1c7c6 <__mulsf3_pse+0x82>
   1c7d0:	86 95       	lsr	r24
   1c7d2:	77 95       	ror	r23
   1c7d4:	67 95       	ror	r22
   1c7d6:	b7 95       	ror	r27
   1c7d8:	f7 95       	ror	r31
   1c7da:	e7 95       	ror	r30
   1c7dc:	9f 5f       	subi	r25, 0xFF	; 255
   1c7de:	c1 f7       	brne	.-16     	; 0x1c7d0 <__mulsf3_pse+0x8c>
   1c7e0:	fe 2b       	or	r31, r30
   1c7e2:	88 0f       	add	r24, r24
   1c7e4:	91 1d       	adc	r25, r1
   1c7e6:	96 95       	lsr	r25
   1c7e8:	87 95       	ror	r24
   1c7ea:	97 f9       	bld	r25, 7
   1c7ec:	08 95       	ret

0001c7ee <round>:
   1c7ee:	77 df       	rcall	.-274    	; 0x1c6de <__fp_splitA>
   1c7f0:	e0 f0       	brcs	.+56     	; 0x1c82a <round+0x3c>
   1c7f2:	9e 37       	cpi	r25, 0x7E	; 126
   1c7f4:	d8 f0       	brcs	.+54     	; 0x1c82c <round+0x3e>
   1c7f6:	96 39       	cpi	r25, 0x96	; 150
   1c7f8:	b8 f4       	brcc	.+46     	; 0x1c828 <round+0x3a>
   1c7fa:	9e 38       	cpi	r25, 0x8E	; 142
   1c7fc:	48 f4       	brcc	.+18     	; 0x1c810 <round+0x22>
   1c7fe:	67 2f       	mov	r22, r23
   1c800:	78 2f       	mov	r23, r24
   1c802:	88 27       	eor	r24, r24
   1c804:	98 5f       	subi	r25, 0xF8	; 248
   1c806:	f9 cf       	rjmp	.-14     	; 0x1c7fa <round+0xc>
   1c808:	86 95       	lsr	r24
   1c80a:	77 95       	ror	r23
   1c80c:	67 95       	ror	r22
   1c80e:	93 95       	inc	r25
   1c810:	95 39       	cpi	r25, 0x95	; 149
   1c812:	d0 f3       	brcs	.-12     	; 0x1c808 <round+0x1a>
   1c814:	b6 2f       	mov	r27, r22
   1c816:	b1 70       	andi	r27, 0x01	; 1
   1c818:	6b 0f       	add	r22, r27
   1c81a:	71 1d       	adc	r23, r1
   1c81c:	81 1d       	adc	r24, r1
   1c81e:	20 f4       	brcc	.+8      	; 0x1c828 <round+0x3a>
   1c820:	87 95       	ror	r24
   1c822:	77 95       	ror	r23
   1c824:	67 95       	ror	r22
   1c826:	93 95       	inc	r25
   1c828:	02 c0       	rjmp	.+4      	; 0x1c82e <__fp_mintl>
   1c82a:	1c c0       	rjmp	.+56     	; 0x1c864 <__fp_mpack>
   1c82c:	73 cf       	rjmp	.-282    	; 0x1c714 <__fp_szero>

0001c82e <__fp_mintl>:
   1c82e:	88 23       	and	r24, r24
   1c830:	71 f4       	brne	.+28     	; 0x1c84e <__fp_mintl+0x20>
   1c832:	77 23       	and	r23, r23
   1c834:	21 f0       	breq	.+8      	; 0x1c83e <__fp_mintl+0x10>
   1c836:	98 50       	subi	r25, 0x08	; 8
   1c838:	87 2b       	or	r24, r23
   1c83a:	76 2f       	mov	r23, r22
   1c83c:	07 c0       	rjmp	.+14     	; 0x1c84c <__fp_mintl+0x1e>
   1c83e:	66 23       	and	r22, r22
   1c840:	11 f4       	brne	.+4      	; 0x1c846 <__fp_mintl+0x18>
   1c842:	99 27       	eor	r25, r25
   1c844:	0d c0       	rjmp	.+26     	; 0x1c860 <__fp_mintl+0x32>
   1c846:	90 51       	subi	r25, 0x10	; 16
   1c848:	86 2b       	or	r24, r22
   1c84a:	70 e0       	ldi	r23, 0x00	; 0
   1c84c:	60 e0       	ldi	r22, 0x00	; 0
   1c84e:	2a f0       	brmi	.+10     	; 0x1c85a <__fp_mintl+0x2c>
   1c850:	9a 95       	dec	r25
   1c852:	66 0f       	add	r22, r22
   1c854:	77 1f       	adc	r23, r23
   1c856:	88 1f       	adc	r24, r24
   1c858:	da f7       	brpl	.-10     	; 0x1c850 <__fp_mintl+0x22>
   1c85a:	88 0f       	add	r24, r24
   1c85c:	96 95       	lsr	r25
   1c85e:	87 95       	ror	r24
   1c860:	97 f9       	bld	r25, 7
   1c862:	08 95       	ret

0001c864 <__fp_mpack>:
   1c864:	9f 3f       	cpi	r25, 0xFF	; 255
   1c866:	31 f0       	breq	.+12     	; 0x1c874 <__fp_mpack_finite+0xc>

0001c868 <__fp_mpack_finite>:
   1c868:	91 50       	subi	r25, 0x01	; 1
   1c86a:	20 f4       	brcc	.+8      	; 0x1c874 <__fp_mpack_finite+0xc>
   1c86c:	87 95       	ror	r24
   1c86e:	77 95       	ror	r23
   1c870:	67 95       	ror	r22
   1c872:	b7 95       	ror	r27
   1c874:	88 0f       	add	r24, r24
   1c876:	91 1d       	adc	r25, r1
   1c878:	96 95       	lsr	r25
   1c87a:	87 95       	ror	r24
   1c87c:	97 f9       	bld	r25, 7
   1c87e:	08 95       	ret

0001c880 <calloc>:
   1c880:	0f 93       	push	r16
   1c882:	1f 93       	push	r17
   1c884:	cf 93       	push	r28
   1c886:	df 93       	push	r29
   1c888:	86 9f       	mul	r24, r22
   1c88a:	80 01       	movw	r16, r0
   1c88c:	87 9f       	mul	r24, r23
   1c88e:	10 0d       	add	r17, r0
   1c890:	96 9f       	mul	r25, r22
   1c892:	10 0d       	add	r17, r0
   1c894:	11 24       	eor	r1, r1
   1c896:	c8 01       	movw	r24, r16
   1c898:	0d d0       	rcall	.+26     	; 0x1c8b4 <malloc>
   1c89a:	ec 01       	movw	r28, r24
   1c89c:	00 97       	sbiw	r24, 0x00	; 0
   1c89e:	21 f0       	breq	.+8      	; 0x1c8a8 <calloc+0x28>
   1c8a0:	a8 01       	movw	r20, r16
   1c8a2:	60 e0       	ldi	r22, 0x00	; 0
   1c8a4:	70 e0       	ldi	r23, 0x00	; 0
   1c8a6:	27 d1       	rcall	.+590    	; 0x1caf6 <memset>
   1c8a8:	ce 01       	movw	r24, r28
   1c8aa:	df 91       	pop	r29
   1c8ac:	cf 91       	pop	r28
   1c8ae:	1f 91       	pop	r17
   1c8b0:	0f 91       	pop	r16
   1c8b2:	08 95       	ret

0001c8b4 <malloc>:
   1c8b4:	0f 93       	push	r16
   1c8b6:	1f 93       	push	r17
   1c8b8:	cf 93       	push	r28
   1c8ba:	df 93       	push	r29
   1c8bc:	82 30       	cpi	r24, 0x02	; 2
   1c8be:	91 05       	cpc	r25, r1
   1c8c0:	10 f4       	brcc	.+4      	; 0x1c8c6 <malloc+0x12>
   1c8c2:	82 e0       	ldi	r24, 0x02	; 2
   1c8c4:	90 e0       	ldi	r25, 0x00	; 0
   1c8c6:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <__flp>
   1c8ca:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <__flp+0x1>
   1c8ce:	20 e0       	ldi	r18, 0x00	; 0
   1c8d0:	30 e0       	ldi	r19, 0x00	; 0
   1c8d2:	a0 e0       	ldi	r26, 0x00	; 0
   1c8d4:	b0 e0       	ldi	r27, 0x00	; 0
   1c8d6:	30 97       	sbiw	r30, 0x00	; 0
   1c8d8:	19 f1       	breq	.+70     	; 0x1c920 <malloc+0x6c>
   1c8da:	40 81       	ld	r20, Z
   1c8dc:	51 81       	ldd	r21, Z+1	; 0x01
   1c8de:	02 81       	ldd	r16, Z+2	; 0x02
   1c8e0:	13 81       	ldd	r17, Z+3	; 0x03
   1c8e2:	48 17       	cp	r20, r24
   1c8e4:	59 07       	cpc	r21, r25
   1c8e6:	c8 f0       	brcs	.+50     	; 0x1c91a <malloc+0x66>
   1c8e8:	84 17       	cp	r24, r20
   1c8ea:	95 07       	cpc	r25, r21
   1c8ec:	69 f4       	brne	.+26     	; 0x1c908 <malloc+0x54>
   1c8ee:	10 97       	sbiw	r26, 0x00	; 0
   1c8f0:	31 f0       	breq	.+12     	; 0x1c8fe <malloc+0x4a>
   1c8f2:	12 96       	adiw	r26, 0x02	; 2
   1c8f4:	0c 93       	st	X, r16
   1c8f6:	12 97       	sbiw	r26, 0x02	; 2
   1c8f8:	13 96       	adiw	r26, 0x03	; 3
   1c8fa:	1c 93       	st	X, r17
   1c8fc:	27 c0       	rjmp	.+78     	; 0x1c94c <malloc+0x98>
   1c8fe:	00 93 9e 21 	sts	0x219E, r16	; 0x80219e <__flp>
   1c902:	10 93 9f 21 	sts	0x219F, r17	; 0x80219f <__flp+0x1>
   1c906:	22 c0       	rjmp	.+68     	; 0x1c94c <malloc+0x98>
   1c908:	21 15       	cp	r18, r1
   1c90a:	31 05       	cpc	r19, r1
   1c90c:	19 f0       	breq	.+6      	; 0x1c914 <malloc+0x60>
   1c90e:	42 17       	cp	r20, r18
   1c910:	53 07       	cpc	r21, r19
   1c912:	18 f4       	brcc	.+6      	; 0x1c91a <malloc+0x66>
   1c914:	9a 01       	movw	r18, r20
   1c916:	bd 01       	movw	r22, r26
   1c918:	ef 01       	movw	r28, r30
   1c91a:	df 01       	movw	r26, r30
   1c91c:	f8 01       	movw	r30, r16
   1c91e:	db cf       	rjmp	.-74     	; 0x1c8d6 <malloc+0x22>
   1c920:	21 15       	cp	r18, r1
   1c922:	31 05       	cpc	r19, r1
   1c924:	f9 f0       	breq	.+62     	; 0x1c964 <malloc+0xb0>
   1c926:	28 1b       	sub	r18, r24
   1c928:	39 0b       	sbc	r19, r25
   1c92a:	24 30       	cpi	r18, 0x04	; 4
   1c92c:	31 05       	cpc	r19, r1
   1c92e:	80 f4       	brcc	.+32     	; 0x1c950 <malloc+0x9c>
   1c930:	8a 81       	ldd	r24, Y+2	; 0x02
   1c932:	9b 81       	ldd	r25, Y+3	; 0x03
   1c934:	61 15       	cp	r22, r1
   1c936:	71 05       	cpc	r23, r1
   1c938:	21 f0       	breq	.+8      	; 0x1c942 <malloc+0x8e>
   1c93a:	fb 01       	movw	r30, r22
   1c93c:	93 83       	std	Z+3, r25	; 0x03
   1c93e:	82 83       	std	Z+2, r24	; 0x02
   1c940:	04 c0       	rjmp	.+8      	; 0x1c94a <malloc+0x96>
   1c942:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <__flp+0x1>
   1c946:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <__flp>
   1c94a:	fe 01       	movw	r30, r28
   1c94c:	32 96       	adiw	r30, 0x02	; 2
   1c94e:	44 c0       	rjmp	.+136    	; 0x1c9d8 <malloc+0x124>
   1c950:	fe 01       	movw	r30, r28
   1c952:	e2 0f       	add	r30, r18
   1c954:	f3 1f       	adc	r31, r19
   1c956:	81 93       	st	Z+, r24
   1c958:	91 93       	st	Z+, r25
   1c95a:	22 50       	subi	r18, 0x02	; 2
   1c95c:	31 09       	sbc	r19, r1
   1c95e:	39 83       	std	Y+1, r19	; 0x01
   1c960:	28 83       	st	Y, r18
   1c962:	3a c0       	rjmp	.+116    	; 0x1c9d8 <malloc+0x124>
   1c964:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <__brkval>
   1c968:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <__brkval+0x1>
   1c96c:	23 2b       	or	r18, r19
   1c96e:	41 f4       	brne	.+16     	; 0x1c980 <malloc+0xcc>
   1c970:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1c974:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1c978:	30 93 9d 21 	sts	0x219D, r19	; 0x80219d <__brkval+0x1>
   1c97c:	20 93 9c 21 	sts	0x219C, r18	; 0x80219c <__brkval>
   1c980:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1c984:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1c988:	21 15       	cp	r18, r1
   1c98a:	31 05       	cpc	r19, r1
   1c98c:	41 f4       	brne	.+16     	; 0x1c99e <malloc+0xea>
   1c98e:	2d b7       	in	r18, 0x3d	; 61
   1c990:	3e b7       	in	r19, 0x3e	; 62
   1c992:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1c996:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1c99a:	24 1b       	sub	r18, r20
   1c99c:	35 0b       	sbc	r19, r21
   1c99e:	e0 91 9c 21 	lds	r30, 0x219C	; 0x80219c <__brkval>
   1c9a2:	f0 91 9d 21 	lds	r31, 0x219D	; 0x80219d <__brkval+0x1>
   1c9a6:	e2 17       	cp	r30, r18
   1c9a8:	f3 07       	cpc	r31, r19
   1c9aa:	a0 f4       	brcc	.+40     	; 0x1c9d4 <malloc+0x120>
   1c9ac:	2e 1b       	sub	r18, r30
   1c9ae:	3f 0b       	sbc	r19, r31
   1c9b0:	28 17       	cp	r18, r24
   1c9b2:	39 07       	cpc	r19, r25
   1c9b4:	78 f0       	brcs	.+30     	; 0x1c9d4 <malloc+0x120>
   1c9b6:	ac 01       	movw	r20, r24
   1c9b8:	4e 5f       	subi	r20, 0xFE	; 254
   1c9ba:	5f 4f       	sbci	r21, 0xFF	; 255
   1c9bc:	24 17       	cp	r18, r20
   1c9be:	35 07       	cpc	r19, r21
   1c9c0:	48 f0       	brcs	.+18     	; 0x1c9d4 <malloc+0x120>
   1c9c2:	4e 0f       	add	r20, r30
   1c9c4:	5f 1f       	adc	r21, r31
   1c9c6:	50 93 9d 21 	sts	0x219D, r21	; 0x80219d <__brkval+0x1>
   1c9ca:	40 93 9c 21 	sts	0x219C, r20	; 0x80219c <__brkval>
   1c9ce:	81 93       	st	Z+, r24
   1c9d0:	91 93       	st	Z+, r25
   1c9d2:	02 c0       	rjmp	.+4      	; 0x1c9d8 <malloc+0x124>
   1c9d4:	e0 e0       	ldi	r30, 0x00	; 0
   1c9d6:	f0 e0       	ldi	r31, 0x00	; 0
   1c9d8:	cf 01       	movw	r24, r30
   1c9da:	df 91       	pop	r29
   1c9dc:	cf 91       	pop	r28
   1c9de:	1f 91       	pop	r17
   1c9e0:	0f 91       	pop	r16
   1c9e2:	08 95       	ret

0001c9e4 <free>:
   1c9e4:	cf 93       	push	r28
   1c9e6:	df 93       	push	r29
   1c9e8:	00 97       	sbiw	r24, 0x00	; 0
   1c9ea:	09 f4       	brne	.+2      	; 0x1c9ee <free+0xa>
   1c9ec:	81 c0       	rjmp	.+258    	; 0x1caf0 <free+0x10c>
   1c9ee:	fc 01       	movw	r30, r24
   1c9f0:	32 97       	sbiw	r30, 0x02	; 2
   1c9f2:	13 82       	std	Z+3, r1	; 0x03
   1c9f4:	12 82       	std	Z+2, r1	; 0x02
   1c9f6:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <__flp>
   1c9fa:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <__flp+0x1>
   1c9fe:	10 97       	sbiw	r26, 0x00	; 0
   1ca00:	81 f4       	brne	.+32     	; 0x1ca22 <free+0x3e>
   1ca02:	20 81       	ld	r18, Z
   1ca04:	31 81       	ldd	r19, Z+1	; 0x01
   1ca06:	82 0f       	add	r24, r18
   1ca08:	93 1f       	adc	r25, r19
   1ca0a:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <__brkval>
   1ca0e:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <__brkval+0x1>
   1ca12:	28 17       	cp	r18, r24
   1ca14:	39 07       	cpc	r19, r25
   1ca16:	51 f5       	brne	.+84     	; 0x1ca6c <free+0x88>
   1ca18:	f0 93 9d 21 	sts	0x219D, r31	; 0x80219d <__brkval+0x1>
   1ca1c:	e0 93 9c 21 	sts	0x219C, r30	; 0x80219c <__brkval>
   1ca20:	67 c0       	rjmp	.+206    	; 0x1caf0 <free+0x10c>
   1ca22:	ed 01       	movw	r28, r26
   1ca24:	20 e0       	ldi	r18, 0x00	; 0
   1ca26:	30 e0       	ldi	r19, 0x00	; 0
   1ca28:	ce 17       	cp	r28, r30
   1ca2a:	df 07       	cpc	r29, r31
   1ca2c:	40 f4       	brcc	.+16     	; 0x1ca3e <free+0x5a>
   1ca2e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ca30:	5b 81       	ldd	r21, Y+3	; 0x03
   1ca32:	9e 01       	movw	r18, r28
   1ca34:	41 15       	cp	r20, r1
   1ca36:	51 05       	cpc	r21, r1
   1ca38:	f1 f0       	breq	.+60     	; 0x1ca76 <free+0x92>
   1ca3a:	ea 01       	movw	r28, r20
   1ca3c:	f5 cf       	rjmp	.-22     	; 0x1ca28 <free+0x44>
   1ca3e:	d3 83       	std	Z+3, r29	; 0x03
   1ca40:	c2 83       	std	Z+2, r28	; 0x02
   1ca42:	40 81       	ld	r20, Z
   1ca44:	51 81       	ldd	r21, Z+1	; 0x01
   1ca46:	84 0f       	add	r24, r20
   1ca48:	95 1f       	adc	r25, r21
   1ca4a:	c8 17       	cp	r28, r24
   1ca4c:	d9 07       	cpc	r29, r25
   1ca4e:	59 f4       	brne	.+22     	; 0x1ca66 <free+0x82>
   1ca50:	88 81       	ld	r24, Y
   1ca52:	99 81       	ldd	r25, Y+1	; 0x01
   1ca54:	84 0f       	add	r24, r20
   1ca56:	95 1f       	adc	r25, r21
   1ca58:	02 96       	adiw	r24, 0x02	; 2
   1ca5a:	91 83       	std	Z+1, r25	; 0x01
   1ca5c:	80 83       	st	Z, r24
   1ca5e:	8a 81       	ldd	r24, Y+2	; 0x02
   1ca60:	9b 81       	ldd	r25, Y+3	; 0x03
   1ca62:	93 83       	std	Z+3, r25	; 0x03
   1ca64:	82 83       	std	Z+2, r24	; 0x02
   1ca66:	21 15       	cp	r18, r1
   1ca68:	31 05       	cpc	r19, r1
   1ca6a:	29 f4       	brne	.+10     	; 0x1ca76 <free+0x92>
   1ca6c:	f0 93 9f 21 	sts	0x219F, r31	; 0x80219f <__flp+0x1>
   1ca70:	e0 93 9e 21 	sts	0x219E, r30	; 0x80219e <__flp>
   1ca74:	3d c0       	rjmp	.+122    	; 0x1caf0 <free+0x10c>
   1ca76:	e9 01       	movw	r28, r18
   1ca78:	fb 83       	std	Y+3, r31	; 0x03
   1ca7a:	ea 83       	std	Y+2, r30	; 0x02
   1ca7c:	49 91       	ld	r20, Y+
   1ca7e:	59 91       	ld	r21, Y+
   1ca80:	c4 0f       	add	r28, r20
   1ca82:	d5 1f       	adc	r29, r21
   1ca84:	ec 17       	cp	r30, r28
   1ca86:	fd 07       	cpc	r31, r29
   1ca88:	61 f4       	brne	.+24     	; 0x1caa2 <free+0xbe>
   1ca8a:	80 81       	ld	r24, Z
   1ca8c:	91 81       	ldd	r25, Z+1	; 0x01
   1ca8e:	84 0f       	add	r24, r20
   1ca90:	95 1f       	adc	r25, r21
   1ca92:	02 96       	adiw	r24, 0x02	; 2
   1ca94:	e9 01       	movw	r28, r18
   1ca96:	99 83       	std	Y+1, r25	; 0x01
   1ca98:	88 83       	st	Y, r24
   1ca9a:	82 81       	ldd	r24, Z+2	; 0x02
   1ca9c:	93 81       	ldd	r25, Z+3	; 0x03
   1ca9e:	9b 83       	std	Y+3, r25	; 0x03
   1caa0:	8a 83       	std	Y+2, r24	; 0x02
   1caa2:	e0 e0       	ldi	r30, 0x00	; 0
   1caa4:	f0 e0       	ldi	r31, 0x00	; 0
   1caa6:	12 96       	adiw	r26, 0x02	; 2
   1caa8:	8d 91       	ld	r24, X+
   1caaa:	9c 91       	ld	r25, X
   1caac:	13 97       	sbiw	r26, 0x03	; 3
   1caae:	00 97       	sbiw	r24, 0x00	; 0
   1cab0:	19 f0       	breq	.+6      	; 0x1cab8 <free+0xd4>
   1cab2:	fd 01       	movw	r30, r26
   1cab4:	dc 01       	movw	r26, r24
   1cab6:	f7 cf       	rjmp	.-18     	; 0x1caa6 <free+0xc2>
   1cab8:	8d 91       	ld	r24, X+
   1caba:	9c 91       	ld	r25, X
   1cabc:	11 97       	sbiw	r26, 0x01	; 1
   1cabe:	9d 01       	movw	r18, r26
   1cac0:	2e 5f       	subi	r18, 0xFE	; 254
   1cac2:	3f 4f       	sbci	r19, 0xFF	; 255
   1cac4:	82 0f       	add	r24, r18
   1cac6:	93 1f       	adc	r25, r19
   1cac8:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <__brkval>
   1cacc:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <__brkval+0x1>
   1cad0:	28 17       	cp	r18, r24
   1cad2:	39 07       	cpc	r19, r25
   1cad4:	69 f4       	brne	.+26     	; 0x1caf0 <free+0x10c>
   1cad6:	30 97       	sbiw	r30, 0x00	; 0
   1cad8:	29 f4       	brne	.+10     	; 0x1cae4 <free+0x100>
   1cada:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <__flp+0x1>
   1cade:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <__flp>
   1cae2:	02 c0       	rjmp	.+4      	; 0x1cae8 <free+0x104>
   1cae4:	13 82       	std	Z+3, r1	; 0x03
   1cae6:	12 82       	std	Z+2, r1	; 0x02
   1cae8:	b0 93 9d 21 	sts	0x219D, r27	; 0x80219d <__brkval+0x1>
   1caec:	a0 93 9c 21 	sts	0x219C, r26	; 0x80219c <__brkval>
   1caf0:	df 91       	pop	r29
   1caf2:	cf 91       	pop	r28
   1caf4:	08 95       	ret

0001caf6 <memset>:
   1caf6:	dc 01       	movw	r26, r24
   1caf8:	01 c0       	rjmp	.+2      	; 0x1cafc <memset+0x6>
   1cafa:	6d 93       	st	X+, r22
   1cafc:	41 50       	subi	r20, 0x01	; 1
   1cafe:	50 40       	sbci	r21, 0x00	; 0
   1cb00:	e0 f7       	brcc	.-8      	; 0x1cafa <memset+0x4>
   1cb02:	08 95       	ret

0001cb04 <_exit>:
   1cb04:	f8 94       	cli

0001cb06 <__stop_program>:
   1cb06:	ff cf       	rjmp	.-2      	; 0x1cb06 <__stop_program>
