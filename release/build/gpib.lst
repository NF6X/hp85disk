
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164e  00800100  0001cddc  0001ce70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001cddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a62  0080174e  0080174e  0001e4be  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e4be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e4d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016d0  00000000  00000000  0001e510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000288ac  00000000  00000000  0001fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060e8  00000000  00000000  0004848c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001215f  00000000  00000000  0004e574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000050c8  00000000  00000000  000606d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000482e  00000000  00000000  0006579c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023ea4  00000000  00000000  00069fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001700  00000000  00000000  0008de6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 24 	jmp	0x4832	; 0x4832 <__ctors_end>
       4:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
       8:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
       c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      10:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      14:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      18:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      1c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      20:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      24:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      28:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      2c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      30:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      34:	0c 94 c7 31 	jmp	0x638e	; 0x638e <__vector_13>
      38:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      3c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      40:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      44:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      48:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      4c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      50:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <__vector_20>
      54:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      58:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      5c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      60:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      64:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      68:	0c 94 ea 2b 	jmp	0x57d4	; 0x57d4 <__vector_26>
      6c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      70:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      74:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      78:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      7c:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      80:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      84:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      88:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__bad_interrupt>
      8c:	f7 41       	sbci	r31, 0x17	; 23
      8e:	47 43       	sbci	r20, 0x37	; 55
      90:	2f 42       	sbci	r18, 0x2F	; 47
      92:	1a 43       	sbci	r17, 0x3A	; 58
      94:	1a 43       	sbci	r17, 0x3A	; 58
      96:	47 43       	sbci	r20, 0x37	; 55
      98:	47 43       	sbci	r20, 0x37	; 55
      9a:	47 43       	sbci	r20, 0x37	; 55
      9c:	47 43       	sbci	r20, 0x37	; 55
      9e:	47 43       	sbci	r20, 0x37	; 55
      a0:	47 43       	sbci	r20, 0x37	; 55
      a2:	47 43       	sbci	r20, 0x37	; 55
      a4:	47 43       	sbci	r20, 0x37	; 55
      a6:	f7 41       	sbci	r31, 0x17	; 23
      a8:	f4 41       	sbci	r31, 0x14	; 20
      aa:	47 43       	sbci	r20, 0x37	; 55
      ac:	47 43       	sbci	r20, 0x37	; 55
      ae:	3d 43       	sbci	r19, 0x3D	; 61
      b0:	47 43       	sbci	r20, 0x37	; 55
      b2:	29 42       	sbci	r18, 0x29	; 41
      b4:	47 43       	sbci	r20, 0x37	; 55
      b6:	47 43       	sbci	r20, 0x37	; 55
      b8:	f7 41       	sbci	r31, 0x17	; 23
      ba:	47 43       	sbci	r20, 0x37	; 55
      bc:	47 43       	sbci	r20, 0x37	; 55
      be:	47 43       	sbci	r20, 0x37	; 55
      c0:	47 43       	sbci	r20, 0x37	; 55
      c2:	47 43       	sbci	r20, 0x37	; 55
      c4:	47 43       	sbci	r20, 0x37	; 55
      c6:	47 43       	sbci	r20, 0x37	; 55
      c8:	47 43       	sbci	r20, 0x37	; 55
      ca:	47 43       	sbci	r20, 0x37	; 55
      cc:	f7 41       	sbci	r31, 0x17	; 23
      ce:	42 43       	sbci	r20, 0x32	; 50
      d0:	2f 42       	sbci	r18, 0x2F	; 47
      d2:	1a 43       	sbci	r17, 0x3A	; 58
      d4:	1a 43       	sbci	r17, 0x3A	; 58
      d6:	47 43       	sbci	r20, 0x37	; 55
      d8:	47 43       	sbci	r20, 0x37	; 55
      da:	47 43       	sbci	r20, 0x37	; 55
      dc:	47 43       	sbci	r20, 0x37	; 55
      de:	47 43       	sbci	r20, 0x37	; 55
      e0:	47 43       	sbci	r20, 0x37	; 55
      e2:	47 43       	sbci	r20, 0x37	; 55
      e4:	47 43       	sbci	r20, 0x37	; 55
      e6:	f7 41       	sbci	r31, 0x17	; 23
      e8:	f4 41       	sbci	r31, 0x14	; 20
      ea:	47 43       	sbci	r20, 0x37	; 55
      ec:	47 43       	sbci	r20, 0x37	; 55
      ee:	38 43       	sbci	r19, 0x38	; 56
      f0:	47 43       	sbci	r20, 0x37	; 55
      f2:	29 42       	sbci	r18, 0x29	; 41
      f4:	47 43       	sbci	r20, 0x37	; 55
      f6:	47 43       	sbci	r20, 0x37	; 55
      f8:	f7 41       	sbci	r31, 0x17	; 23
      fa:	6c 43       	sbci	r22, 0x3C	; 60
      fc:	ad 44       	sbci	r26, 0x4D	; 77
      fe:	5f 43       	sbci	r21, 0x3F	; 63
     100:	c7 43       	sbci	r28, 0x37	; 55
     102:	ab 43       	sbci	r26, 0x3B	; 59
     104:	ad 44       	sbci	r26, 0x4D	; 77
     106:	ad 44       	sbci	r26, 0x4D	; 77
     108:	ad 44       	sbci	r26, 0x4D	; 77
     10a:	ad 44       	sbci	r26, 0x4D	; 77
     10c:	ad 44       	sbci	r26, 0x4D	; 77
     10e:	ad 44       	sbci	r26, 0x4D	; 77
     110:	ad 44       	sbci	r26, 0x4D	; 77
     112:	ad 44       	sbci	r26, 0x4D	; 77
     114:	79 43       	sbci	r23, 0x39	; 57
     116:	8d 43       	sbci	r24, 0x3D	; 61
     118:	ad 44       	sbci	r26, 0x4D	; 77
     11a:	ad 44       	sbci	r26, 0x4D	; 77
     11c:	53 44       	sbci	r21, 0x43	; 67
     11e:	ad 44       	sbci	r26, 0x4D	; 77
     120:	5b 43       	sbci	r21, 0x3B	; 59
     122:	ad 44       	sbci	r26, 0x4D	; 77
     124:	ad 44       	sbci	r26, 0x4D	; 77
     126:	8d 43       	sbci	r24, 0x3D	; 61
     128:	ad 44       	sbci	r26, 0x4D	; 77
     12a:	ad 44       	sbci	r26, 0x4D	; 77
     12c:	ad 44       	sbci	r26, 0x4D	; 77
     12e:	ad 44       	sbci	r26, 0x4D	; 77
     130:	ad 44       	sbci	r26, 0x4D	; 77
     132:	ad 44       	sbci	r26, 0x4D	; 77
     134:	ad 44       	sbci	r26, 0x4D	; 77
     136:	ad 44       	sbci	r26, 0x4D	; 77
     138:	ad 44       	sbci	r26, 0x4D	; 77
     13a:	6c 43       	sbci	r22, 0x3C	; 60
     13c:	fb 43       	sbci	r31, 0x3B	; 59
     13e:	5f 43       	sbci	r21, 0x3F	; 63
     140:	c7 43       	sbci	r28, 0x37	; 55
     142:	ab 43       	sbci	r26, 0x3B	; 59
     144:	ad 44       	sbci	r26, 0x4D	; 77
     146:	ad 44       	sbci	r26, 0x4D	; 77
     148:	ad 44       	sbci	r26, 0x4D	; 77
     14a:	ad 44       	sbci	r26, 0x4D	; 77
     14c:	ad 44       	sbci	r26, 0x4D	; 77
     14e:	ad 44       	sbci	r26, 0x4D	; 77
     150:	ad 44       	sbci	r26, 0x4D	; 77
     152:	ad 44       	sbci	r26, 0x4D	; 77
     154:	79 43       	sbci	r23, 0x39	; 57
     156:	8d 43       	sbci	r24, 0x3D	; 61
     158:	ad 44       	sbci	r26, 0x4D	; 77
     15a:	ad 44       	sbci	r26, 0x4D	; 77
     15c:	fb 43       	sbci	r31, 0x3B	; 59
     15e:	ad 44       	sbci	r26, 0x4D	; 77
     160:	5b 43       	sbci	r21, 0x3B	; 59
     162:	ad 44       	sbci	r26, 0x4D	; 77
     164:	ad 44       	sbci	r26, 0x4D	; 77
     166:	8d 43       	sbci	r24, 0x3D	; 61
     168:	8c 67       	ori	r24, 0x7C	; 124
     16a:	96 67       	ori	r25, 0x76	; 118
     16c:	9e 67       	ori	r25, 0x7E	; 126
     16e:	a1 67       	ori	r26, 0x71	; 113
     170:	a4 67       	ori	r26, 0x74	; 116
     172:	a7 67       	ori	r26, 0x77	; 119
     174:	aa 67       	ori	r26, 0x7A	; 122
     176:	ad 67       	ori	r26, 0x7D	; 125
     178:	b0 67       	ori	r27, 0x70	; 112
     17a:	89 85       	ldd	r24, Y+9	; 0x09
     17c:	91 85       	ldd	r25, Z+9	; 0x09
     17e:	c2 85       	ldd	r28, Z+10	; 0x0a
     180:	db 85       	ldd	r29, Y+11	; 0x0b
     182:	f7 85       	ldd	r31, Z+15	; 0x0f
     184:	04 86       	std	Z+12, r0	; 0x0c
     186:	20 86       	std	Z+8, r2	; 0x08
     188:	4a 86       	std	Y+10, r4	; 0x0a
     18a:	2d 86       	std	Y+13, r2	; 0x0d
     18c:	48 9a       	sbi	0x09, 0	; 9
     18e:	1a 9b       	sbis	0x03, 2	; 3
     190:	56 9b       	sbis	0x0a, 6	; 10
     192:	85 9b       	sbis	0x10, 5	; 16
     194:	95 9b       	sbis	0x12, 5	; 18
     196:	b2 9b       	sbis	0x16, 2	; 22
     198:	12 9c       	mul	r1, r2
     19a:	21 9d       	mul	r18, r1
     19c:	21 9d       	mul	r18, r1
     19e:	21 9d       	mul	r18, r1
     1a0:	46 9c       	mul	r4, r6
     1a2:	72 9c       	mul	r7, r2
     1a4:	c0 9c       	mul	r12, r0
     1a6:	dc 9c       	mul	r13, r12
     1a8:	e5 9a       	sbi	0x1c, 5	; 28
     1aa:	f8 9a       	sbi	0x1f, 0	; 31
     1ac:	e9 b9       	out	0x09, r30	; 9
     1ae:	a8 b9       	out	0x08, r26	; 8
     1b0:	a8 b9       	out	0x08, r26	; 8
     1b2:	a8 b9       	out	0x08, r26	; 8
     1b4:	a8 b9       	out	0x08, r26	; 8
     1b6:	6c b9       	out	0x0c, r22	; 12
     1b8:	73 b9       	out	0x03, r23	; 3
     1ba:	7a b9       	out	0x0a, r23	; 10
     1bc:	8a b9       	out	0x0a, r24	; 10
     1be:	98 b9       	out	0x08, r25	; 8
     1c0:	91 b9       	out	0x01, r25	; 1

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3651>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3649>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3647>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3644>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3642>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3640>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3638>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3636>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3628>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3626>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3622>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3609>:
     aef:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000afd <__c.3607>:
     afd:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b0d:	73 74 0a 00                                         st..

00000b11 <__c.3605>:
     b11:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b21 <__c.3587>:
     b21:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b31:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b41:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b51:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b61:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b71:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b81:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     b91:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000b9e <__c.3919>:
     b9e:	25 73 0a 00                                         %s..

00000ba2 <__c.3917>:
     ba2:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000baa <__c.3672>:
     baa:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bb6 <__c.3601>:
     bb6:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bc6:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bce <__c.3594>:
     bce:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bde:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000be6 <__c.3764>:
     be6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bf1 <__c.3760>:
     bf1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c01:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c11:	68 0a 00                                            h..

00000c14 <__c.3757>:
     c14:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c24 <__c.3752>:
     c24:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c32 <__c.3750>:
     c32:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c42:	5b 25 73 5d 0a 00                                   [%s]..

00000c48 <__c.3748>:
     c48:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c58:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c69 <__c.3735>:
     c69:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c79:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c83 <__c.3730>:
     c83:	25 73 0a 00                                         %s..

00000c87 <__c.3728>:
     c87:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c97:	0a 00                                               ..

00000c99 <__c.3716>:
     c99:	0d 00                                               ..

00000c9b <__c.3714>:
     c9b:	4d 6f 72 65 2e 2e 00                                More...

00000ca2 <__c.3704>:
     ca2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cb2:	2e 0a 00                                            ...

00000cb5 <__c.3700>:
     cb5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cc4 <__c.3697>:
     cc4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cd1 <__c.3695>:
     cd1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cde <__c.3693>:
     cde:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cee <__c.3691>:
     cee:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cfb <__c.3689>:
     cfb:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d0b <__c.3687>:
     d0b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d17 <__c.3676>:
     d17:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d22 <__c.3674>:
     d22:	0a 00                                               ..

00000d24 <__c.3669>:
     d24:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d34 <__c.3659>:
     d34:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d45 <__c.3657>:
     d45:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d53 <__c.3655>:
     d53:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d64 <__c.3653>:
     d64:	25 73 0a 00                                         %s..

00000d68 <__c.3651>:
     d68:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d74 <__c.3647>:
     d74:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d85 <__c.3640>:
     d85:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d95:	74 20 23 20 25 64 0a 00                             t # %d..

00000d9d <__c.3636>:
     d9d:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dae <__c.3620>:
     dae:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dbe:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dce:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dde:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dee:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dfe:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e0e:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e1e:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e2e:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e3e:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e4e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e5e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e6e:	6e 65 77 0a 0a 00                                   new...

00000e74 <__c.3618>:
     e74:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e80 <__c.3807>:
     e80:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e8e <__c.3801>:
     e8e:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e9b <__c.3794>:
     e9b:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ea9 <__c.3785>:
     ea9:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eb6 <__c.3776>:
     eb6:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ec7 <__c.3762>:
     ec7:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ed7:	5d 0a 00                                            ]..

00000eda <__c.3744>:
     eda:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eea:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ef7 <__c.4399>:
     ef7:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f07:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f17:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f1f <__c.4391>:
     f1f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f2f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f39 <__c.4386>:
     f39:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f49:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f59:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f67 <__c.4384>:
     f67:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f77:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f81 <__c.4374>:
     f81:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f91:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fa1:	28 25 64 29 5d 0a 00                                (%d)]..

00000fa8 <__c.4370>:
     fa8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fb8:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fc8:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fd5 <__c.4367>:
     fd5:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fe5:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fee <__c.4351>:
     fee:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ff9 <__c.4349>:
     ff9:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001004 <__c.4347>:
    1004:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000100f <__c.4343>:
    100f:	20 20 20 20 20 00                                        .

00001015 <__c.4341>:
    1015:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000101e <__c.4315>:
    101e:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    102e:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000103c <__c.4299>:
    103c:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    104c:	3e 0a 00                                            >..

0000104f <__c.4294>:
    104f:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    105f:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    106f:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000107e <__c.4290>:
    107e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    108e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    109e:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ae:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ba <__c.4286>:
    10ba:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10ca:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10da:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ea:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010f6 <__c.4284>:
    10f6:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1106:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1116:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1126:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001135 <__c.4279>:
    1135:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1145:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001154 <__c.4263>:
    1154:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1164:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1174:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001182 <__c.4247>:
    1182:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1192:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119d <__c.4245>:
    119d:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11ad:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11bd:	72 61 6e 67 65 0a 00                                range..

000011c4 <__c.4240>:
    11c4:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11d4:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011df <__c.4238>:
    11df:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11ef:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    11ff:	61 6e 67 65 0a 00                                   ange..

00001205 <__c.4233>:
    1205:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1215:	5d 0a 00                                            ]..

00001218 <__c.4221>:
    1218:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001229 <__c.4398>:
    1229:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000123a <__c.4393>:
    123a:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    124a:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    125a:	32 58 48 5d 0a 00                                   2XH]..

00001260 <__c.4391>:
    1260:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1270:	0a 00                                               ..

00001272 <__c.4389>:
    1272:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001283 <__c.4384>:
    1283:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000128f <__c.4382>:
    128f:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000129f <__c.4380>:
    129f:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12af:	52 5d 0a 00                                         R]..

000012b3 <__c.4378>:
    12b3:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12c3:	0a 00                                               ..

000012c5 <__c.4376>:
    12c5:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012d6 <__c.4374>:
    12d6:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012dd <__c.4369>:
    12dd:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012e9 <__c.4367>:
    12e9:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12f9:	52 5d 0a 00                                         R]..

000012fd <__c.4365>:
    12fd:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000130e <__c.4363>:
    130e:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    131e:	0a 00                                               ..

00001320 <__c.4361>:
    1320:	0a 00                                               ..

00001322 <__c.4359>:
    1322:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001329 <__c.4354>:
    1329:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1339:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000134a <__c.4352>:
    134a:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001351 <__c.4350>:
    1351:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000135e <__c.4348>:
    135e:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000136a <__c.4346>:
    136a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001371 <__c.4344>:
    1371:	5b 53 50 44 5d 0a 00                                [SPD]..

00001378 <__c.4342>:
    1378:	5b 53 50 45 5d 0a 00                                [SPE]..

0000137f <__c.4340>:
    137f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    138f:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001397 <__c.4338>:
    1397:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13a7:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013af <__c.4333>:
    13af:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13bf:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013c9 <__c.4331>:
    13c9:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13d9:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ea <__c.4304>:
    13ea:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013fb <__c.4302>:
    13fb:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001408 <__c.4300>:
    1408:	3c 42 55 53 3e 0a 00                                <BUS>..

0000140f <__c.4298>:
    140f:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000141a <__c.4296>:
    141a:	3c 49 46 43 3e 0a 00                                <IFC>..

00001421 <__c.4291>:
    1421:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1431:	0a 00                                               ..

00001433 <__c.4289>:
    1433:	44 6f 6e 65 0a 00                                   Done..

00001439 <__c.4285>:
    1439:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001445 <__c.4283>:
    1445:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1455:	20 65 78 69 74 0a 00                                 exit..

0000145c <__c.4281>:
    145c:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    146c:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    147c:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001487 <__c.4279>:
    1487:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1497:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014a1 <__c.4233>:
    14a1:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14b1:	6f 74 65 63 74 65 64 0a 00                          otected..

000014ba <__c.4231>:
    14ba:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014cb <__c.4229>:
    14cb:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14db:	0a 00                                               ..

000014dd <__c.4424>:
    14dd:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ea <__c.4416>:
    14ea:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14fa:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    150a:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    151a:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    152a:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    153a:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    154a:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    155a:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    156a:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    157a:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    158a:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    159a:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15aa:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15ba:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15ca:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15da:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15ea:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    15fa:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    160a:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    161a:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    162a:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    163a:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    164a:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    165a:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    166a:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    167a:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    168a:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    169a:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16aa:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016b3 <__c.4414>:
    16b3:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

000016bf <__c.4835>:
    16bf:	0a 00                                               ..

000016c1 <__c.4830>:
    16c1:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

000016d2 <__c.4828>:
    16d2:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    16e2:	25 73 0a 00                                         %s..

000016e6 <__c.4826>:
    16e6:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    16f6:	25 73 0a 00                                         %s..

000016fa <__c.4814>:
    16fa:	61 72 67 76 5b 25 64 5d 20 3d 20 25 73 0a 00        argv[%d] = %s..

00001709 <__c.4804>:
    1709:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001711 <__c.4802>:
    1711:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1721:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000172b <__c.4800>:
    172b:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    173b:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    174b:	0a 00                                               ..

0000174d <__c.4798>:
    174d:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001755 <__c.4796>:
    1755:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1765:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000176f <__c.4794>:
    176f:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    177f:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    178f:	0a 00                                               ..

00001791 <__c.4777>:
    1791:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17a1:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17b1:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    17c1:	6f 20 32 35 36 0a 00                                o 256..

000017c8 <__c.4775>:
    17c8:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17d8:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    17e8:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    17f8:	20 32 35 36 0a 00                                    256..

000017fe <__c.4762>:
    17fe:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    180e:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000181d <__c.4726>:
    181d:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    182d:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    183d:	0a 00                                               ..

0000183f <__c.4718>:
    183f:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    184f:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    185f:	6c 6c 0a 00                                         ll..

00001863 <__c.4705>:
    1863:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1873:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1883:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000188e <__c.4703>:
    188e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    189e:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18ae:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    18be:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000018c6 <__c.4701>:
    18c6:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18d6:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    18e6:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    18f6:	3a 25 73 0a 00                                      :%s..

000018fb <__c.4699>:
    18fb:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    190b:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    191b:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    192b:	55 4c 4c 0a 00                                      ULL..

00001930 <__c.4697>:
    1930:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1940:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1950:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1960:	66 20 72 61 6e 67 65 0a 00                          f range..

00001969 <__c.4695>:
    1969:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1979:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1989:	6e 67 65 0a 00                                      nge..

0000198e <__c.4656>:
    198e:	0a 00                                               ..

00001990 <__c.4651>:
    1990:	0a 00                                               ..

00001992 <__c.4649>:
    1992:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19a2:	6c 64 0a 00                                         ld..

000019a6 <__c.4647>:
    19a6:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19b6:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019c5 <__c.4645>:
    19c5:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000019cf <__c.4643>:
    19cf:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19df:	6c 64 0a 00                                         ld..

000019e3 <__c.4641>:
    19e3:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19f3:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a02 <__c.4639>:
    1a02:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a0b <__c.4636>:
    1a0b:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a1b:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a2b <__c.4627>:
    1a2b:	0a 00                                               ..

00001a2d <__c.4622>:
    1a2d:	0a 00                                               ..

00001a2f <__c.4620>:
    1a2f:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a38 <__c.4618>:
    1a38:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a42 <__c.4616>:
    1a42:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a4b <__c.4613>:
    1a4b:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1a5b:	0a 00                                               ..

00001a5d <__c.4607>:
    1a5d:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1a6d:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1a7d:	2a 2a 2a 2a 2a 0a 00                                *****..

00001a84 <__c.4605>:
    1a84:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1a94:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001aa1 <__c.4603>:
    1aa1:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1ab1:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1ac1:	0a 00                                               ..

00001ac3 <__c.4599>:
    1ac3:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1ad3:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1ae3:	0a 00                                               ..

00001ae5 <__c.4596>:
    1ae5:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1af5:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b05:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b15 <__c.4587>:
    1b15:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b25:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b35:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b44 <__c.4584>:
    1b44:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b54:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1b64:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b74 <__c.4575>:
    1b74:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b84:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1b94:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ba2 <__c.4567>:
    1ba2:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bb2:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1bc2:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bd0 <__c.4557>:
    1bd0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1be0:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bf0:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001bfc <__c.4540>:
    1bfc:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c0c:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c1c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c2c:	0a 00                                               ..

00001c2e <__c.4532>:
    1c2e:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c3e:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c4e:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c5c <__c.4529>:
    1c5c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c6c:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c7c:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c8a <__c.4521>:
    1c8a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c9a:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1caa:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001cb7 <__c.4511>:
    1cb7:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cc7:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1cd7:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001ce8 <__c.4508>:
    1ce8:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cf8:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d08:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d12 <__c.4504>:
    1d12:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d22:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d32:	0a 00                                               ..

00001d34 <__c.4493>:
    1d34:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d44:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d54:	0a 00                                               ..

00001d56 <__c.4490>:
    1d56:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d66:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d74 <__c.4488>:
    1d74:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d81 <__c.4469>:
    1d81:	25 73 0a 00                                         %s..

00001d85 <__c.4459>:
    1d85:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d91 <__c.4448>:
    1d91:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1da1:	6c 64 29 0a 00                                      ld)..

00001da6 <__c.3643>:
    1da6:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001db7 <__c.3641>:
    1db7:	25 73 20 25 73 0a 00                                %s %s..

00001dbe <__c.3637>:
    1dbe:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1dce:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001ddb <__c.4541>:
    1ddb:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1deb:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1dfb:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e0b:	48 5d 0a 00                                         H]..

00001e0f <__c.4539>:
    1e0f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e1f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e2f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e3f:	48 5d 0a 00                                         H]..

00001e43 <__c.4537>:
    1e43:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e53:	74 5d 0a 00                                         t]..

00001e57 <__c.4535>:
    1e57:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e66 <__c.4533>:
    1e66:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1e76:	74 65 5d 0a 00                                      te]..

00001e7b <__c.4531>:
    1e7b:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1e8b:	61 74 65 5d 0a 00                                   ate]..

00001e91 <__c.4529>:
    1e91:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1ea1:	61 74 65 5d 0a 00                                   ate]..

00001ea7 <__c.4524>:
    1ea7:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1eb7:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1ec7:	5d 0a 00                                            ]..

00001eca <__c.4510>:
    1eca:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001ed9 <__c.4508>:
    1ed9:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1ee9:	5d 0a 00                                            ]..

00001eec <__c.4501>:
    1eec:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001ef8 <__c.4487>:
    1ef8:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f08:	5d 0a 00                                            ]..

00001f0b <__c.4485>:
    1f0b:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f1b:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f25 <__c.4478>:
    1f25:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f35:	48 5d 0a 00                                         H]..

00001f39 <__c.4476>:
    1f39:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f49:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f59 <__c.4471>:
    1f59:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1f69:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1f79:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1f89:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001f95 <__c.4468>:
    1f95:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1fa5:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001fb5 <__c.4466>:
    1fb5:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1fc5:	29 5d 0a 00                                         )]..

00001fc9 <__c.4464>:
    1fc9:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1fd9:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1fe9:	28 25 64 29 5d 0a 00                                (%d)]..

00001ff0 <__c.4462>:
    1ff0:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2000:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000200e <__c.4460>:
    200e:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    201e:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

0000202b <__c.4457>:
    202b:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    203b:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    204b:	44 4f 5d 0a 00                                      DO]..

00002050 <__c.4454>:
    2050:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2060:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002069 <__c.4452>:
    2069:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2079:	5d 0a 00                                            ]..

0000207c <__c.4443>:
    207c:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    208c:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    209c:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20ac:	43 6f 64 65 73 5d 0a 00                             Codes]..

000020b4 <__c.4440>:
    20b4:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    20c4:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000020d4 <__c.4438>:
    20d4:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    20e4:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    20f4:	5d 0a 00                                            ]..

000020f7 <__c.4436>:
    20f7:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2107:	61 74 75 73 5d 0a 00                                atus]..

0000210e <__c.4434>:
    210e:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    211e:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002127 <__c.4432>:
    2127:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2137:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002142 <__c.4430>:
    2142:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2152:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002161 <__c.4428>:
    2161:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2171:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000217f <__c.4426>:
    217f:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002190 <__c.4424>:
    2190:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21a0:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021ac <__c.4422>:
    21ac:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    21bc:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000021c9 <__c.4420>:
    21c9:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    21d9:	2d 4f 50 5d 0a 00                                   -OP]..

000021df <__c.4418>:
    21df:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21ef:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002200 <__c.4416>:
    2200:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2210:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2220:	44 4f 5d 0a 00                                      DO]..

00002225 <__c.4414>:
    2225:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2235:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000223f <__c.4412>:
    223f:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    224f:	2d 4f 50 5d 0a 00                                   -OP]..

00002255 <__c.4410>:
    2255:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002263 <__c.4408>:
    2263:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2273:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000227f <__c.4406>:
    227f:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    228f:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000229c <__c.4404>:
    229c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22ac:	20 57 72 69 74 65 5d 0a 00                           Write]..

000022b5 <__c.4401>:
    22b5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22c5:	20 52 65 61 64 5d 0a 00                              Read]..

000022cd <__c.4399>:
    22cd:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    22dd:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000022e6 <__c.4396>:
    22e6:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    22f6:	25 64 29 5d 0a 00                                   %d)]..

000022fc <__c.4394>:
    22fc:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    230c:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002315 <__c.4392>:
    2315:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2325:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2335:	52 4f 52 5d 0a 00                                   ROR]..

0000233b <__c.4383>:
    233b:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    234b:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002355 <__c.4378>:
    2355:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2365:	76 61 6c 69 64 5d 0a 00                             valid]..

0000236d <__c.4373>:
    236d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    237d:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000238c <__c.4371>:
    238c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    239c:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023a9 <__c.4369>:
    23a9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    23b9:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    23c9:	5d 0a 00                                            ]..

000023cc <__c.4367>:
    23cc:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000023dd <__c.4359>:
    23dd:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23ed:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000023f8 <__c.4357>:
    23f8:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2408:	73 5d 0a 00                                         s]..

0000240c <__c.4347>:
    240c:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002417 <__c.4345>:
    2417:	25 73 3a 0a 00                                      %s:..

0000241c <__c.4320>:
    241c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    242c:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    243c:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002447 <__c.4318>:
    2447:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2457:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2467:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000246f <__c.4314>:
    246f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    247f:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    248f:	58 48 29 5d 0a 00                                   XH)]..

00002495 <__c.4312>:
    2495:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24a5:	72 5d 0a 00                                         r]..

000024a9 <__c.4308>:
    24a9:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    24b9:	5d 0a 00                                            ]..

000024bc <__c.4306>:
    24bc:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24cc:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    24dc:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000024e5 <__c.4294>:
    24e5:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    24f5:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2505:	62 79 74 65 73 5d 0a 00                             bytes]..

0000250d <__c.4292>:
    250d:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    251d:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    252d:	53 48 5d 0a 00                                      SH]..

00002532 <__c.4287>:
    2532:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2542:	20 45 72 72 6f 72 5d 0a 00                           Error]..

0000254b <__c.4285>:
    254b:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    255b:	45 72 72 6f 72 5d 0a 00                             Error]..

00002563 <__c.4283>:
    2563:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2573:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002581 <__c.4281>:
    2581:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2591:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25a1:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025a9 <__c.4264>:
    25a9:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    25b9:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000025c5 <__c.4248>:
    25c5:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    25d5:	5d 0a 00                                            ]..

000025d8 <__c.4364>:
    25d8:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25e8:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    25f8:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002601 <__c.4361>:
    2601:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2611:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2621:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

0000262c <__c.4358>:
    262c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    263c:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    264c:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002655 <__c.4353>:
    2655:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2665:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002675 <__c.4350>:
    2675:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2685:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002691 <__c.4347>:
    2691:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26a1:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26b1:	0a 00                                               ..

000026b3 <__c.4344>:
    26b3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26c3:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000026d2 <__c.4341>:
    26d2:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26e2:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000026f3 <__c.4338>:
    26f3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2703:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002713 <__c.4334>:
    2713:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2723:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2733:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2743:	0a 00                                               ..

00002745 <__c.4329>:
    2745:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002755 <__c.4326>:
    2755:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2765:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002774 <__c.4324>:
    2774:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2784:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2794:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

0000279f <__c.4322>:
    279f:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27af:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

000027bf <__c.4320>:
    27bf:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    27cf:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    27df:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027e8 <__c.4318>:
    27e8:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    27f8:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002804 <__c.4316>:
    2804:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2814:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2824:	0a 00                                               ..

00002826 <__c.4314>:
    2826:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002836 <__c.4311>:
    2836:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2846:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002857 <__c.4309>:
    2857:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2867:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2877:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002880 <__c.4307>:
    2880:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2890:	36 5d 0a 00                                         6]..

00002894 <__c.4304>:
    2894:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28a4:	35 5d 0a 00                                         5]..

000028a8 <__c.4301>:
    28a8:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    28b8:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

000028c8 <__c.4298>:
    28c8:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28d8:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    28e8:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

000028f7 <__c.4296>:
    28f7:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2907:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002918 <__c.4294>:
    2918:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2928:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002939 <__c.4292>:
    2939:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2949:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2959:	0a 00                                               ..

0000295b <__c.4290>:
    295b:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    296b:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    297b:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    298b:	0a 00                                               ..

0000298d <__c.4278>:
    298d:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    299d:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29ad:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    29bd:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    29cd:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

000029de <__c.4276>:
    29de:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29ee:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29fe:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a0e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a1e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a2e <__c.4274>:
    2a2e:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a3e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a4e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a5e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a6e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a7e <__c.4272>:
    2a7e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a8e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a9e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2aae:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2abe:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002ace <__c.4267>:
    2ace:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2ade:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2aee:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2afe:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b0e:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b1e:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b2e:	58 48 5d 0a 00                                      XH]..

00002b33 <__c.4265>:
    2b33:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b43:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b53:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b63:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b73:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b83:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b93:	30 32 58 48 5d 0a 00                                02XH]..

00002b9a <__c.4263>:
    2b9a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2baa:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bba:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2bca:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2bda:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bea:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bfa:	30 32 58 48 5d 0a 00                                02XH]..

00002c01 <__c.4261>:
    2c01:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c11:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c21:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c31:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c41:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c51:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c61:	30 32 58 48 5d 0a 00                                02XH]..

00002c68 <__c.4254>:
    2c68:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002c77 <__c.4241>:
    2c77:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002c84 <__c.4239>:
    2c84:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2c94:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002c9e <__c.4232>:
    2c9e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2cae:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002cbe <__c.4230>:
    2cbe:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2cce:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002cdd <__c.4228>:
    2cdd:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2ced:	0a 00                                               ..

00002cef <__c.4221>:
    2cef:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2cff:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d09 <__c.4215>:
    2d09:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d19:	0a 00                                               ..

00002d1b <__c.4209>:
    2d1b:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d2b:	6e 65 5d 0a 00                                      ne]..

00002d30 <__c.4205>:
    2d30:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d40 <__c.4164>:
    2d40:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d50:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d60:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d6b <__c.4194>:
    2d6b:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2d7b:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2d8b:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002d93 <__c.4171>:
    2d93:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2da3:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002dac <__c.4157>:
    2dac:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2dbc:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002dc6 <__c.4155>:
    2dc6:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2dd6:	75 73 5d 0a 00                                      us]..

00002ddb <__c.4149>:
    2ddb:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2deb:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002df5 <__c.4147>:
    2df5:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e05:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e13 <__c.4141>:
    2e13:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e23:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e2b <__c.4126>:
    2e2b:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e3b:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e45 <__c.4124>:
    2e45:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e55:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e61 <__c.4119>:
    2e61:	25 30 38 6c 64 0d 00                                %08ld..

00002e68 <__c.4113>:
    2e68:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e78:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002e89 <__c.4107>:
    2e89:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002e97 <__c.4105>:
    2e97:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2ea7:	69 74 65 0a 00                                      ite..

00002eac <__c.4099>:
    2eac:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002eb8 <__c.4097>:
    2eb8:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2ec8:	6f 3a 25 73 0a 00                                   o:%s..

00002ece <__c.4095>:
    2ece:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2ede:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2eee:	74 00                                               t.

00002ef0 <__c.4555>:
    2ef0:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f00:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f10 <__c.4553>:
    2f10:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f20:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f30 <__c.4551>:
    2f30:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f40:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f50:	30 0a 00                                            0..

00002f53 <__c.4549>:
    2f53:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f63:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f73:	70 74 79 0a 00                                      pty..

00002f78 <__c.4547>:
    2f78:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f88:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2f98:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fa1 <__c.4534>:
    2fa1:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2fb1:	20 25 31 30 73 0a 00                                 %10s..

00002fb8 <__c.4532>:
    2fb8:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2fc8:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2fd8:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002fe1 <__c.4530>:
    2fe1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2ff1:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3001:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3011:	74 65 72 73 0a 00                                   ters..

00003017 <__c.4528>:
    3017:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3027:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3037:	65 6d 70 74 79 0a 00                                empty..

0000303e <__c.4526>:
    303e:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    304e:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    305e:	65 6d 70 74 79 0a 00                                empty..

00003065 <__c.4524>:
    3065:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3075:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3085:	20 65 6d 70 74 79 0a 00                              empty..

0000308d <__c.4515>:
    308d:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000309c <__c.4513>:
    309c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30ac:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    30bc:	20 66 6f 75 6e 64 0a 00                              found..

000030c4 <__c.4511>:
    30c4:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30d4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000030e3 <__c.4509>:
    30e3:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    30f3:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003103 <__c.4507>:
    3103:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3113:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3123:	70 74 79 0a 00                                      pty..

00003128 <__c.4499>:
    3128:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003136 <__c.4494>:
    3136:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003144 <__c.4492>:
    3144:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3154:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3164:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003174 <__c.4490>:
    3174:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3184:	73 0a 00                                            s..

00003187 <__c.4488>:
    3187:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3197:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31a7:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000031b6 <__c.4486>:
    31b6:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    31c6:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000031d2 <__c.4484>:
    31d2:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    31e2:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000031ed <__c.4482>:
    31ed:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    31fd:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000320d <__c.4465>:
    320d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000321b <__c.4460>:
    321b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003229 <__c.4458>:
    3229:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3239:	73 0a 00                                            s..

0000323c <__c.4456>:
    323c:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    324c:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003254 <__c.4439>:
    3254:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003262 <__c.4436>:
    3262:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3272:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3282:	20 65 72 72 6f 72 0a 00                              error..

0000328a <__c.4428>:
    328a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003298 <__c.4426>:
    3298:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32a8:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32b8:	20 65 72 72 6f 72 0a 00                              error..

000032c0 <__c.4423>:
    32c0:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32d0:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    32e0:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    32f0:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3300:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3310:	30 32 58 48 0a 00                                   02XH..

00003316 <__c.4421>:
    3316:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3326:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3336:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3346:	20 25 64 0a 00                                       %d..

0000334b <__c.4417>:
    334b:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

0000335b <__c.4415>:
    335b:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    336b:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    337b:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    338b:	30 78 45 30 31 33 0a 00                             0xE013..

00003393 <__c.4413>:
    3393:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33a3:	6e 64 3a 25 73 0a 00                                nd:%s..

000033aa <__c.4411>:
    33aa:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33ba:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033c2 <__c.4387>:
    33c2:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033d0 <__c.4385>:
    33d0:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    33e0:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033e9 <__c.4383>:
    33e9:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    33f9:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003402 <__c.4381>:
    3402:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3412:	20 20 25 34 64 0a 00                                  %4d..

00003419 <__c.4379>:
    3419:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3429:	20 20 20 25 73 0a 00                                   %s..

00003430 <__c.4377>:
    3430:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3440:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3450:	77 72 69 74 65 0a 00                                write..

00003457 <__c.4375>:
    3457:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3467:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3477:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003487 <__c.4373>:
    3487:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3497:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34a7:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034b6 <__c.4371>:
    34b6:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34c6:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34d6:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000034e6 <__c.4369>:
    34e6:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34f6:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3506:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003515 <__c.4367>:
    3515:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3525:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3535:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003543 <__c.4365>:
    3543:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3553:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3563:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3573:	79 0a 00                                            y..

00003576 <__c.4351>:
    3576:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003584 <__c.4349>:
    3584:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003592 <__c.4344>:
    3592:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035a0 <__c.4327>:
    35a0:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35b0:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    35c0:	25 64 0a 00                                         %d..

000035c4 <__c.4310>:
    35c4:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    35d4:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    35e4:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    35f4:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000035fd <__c.4296>:
    35fd:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    360d:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    361d:	62 69 67 0a 00                                      big..

00003622 <__c.4294>:
    3622:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3632:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3642:	63 74 65 72 73 0a 00                                cters..

00003649 <__c.4287>:
    3649:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3659:	73 0a 00                                            s..

0000365c <__c.4285>:
    365c:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    366c:	73 0a 00                                            s..

0000366f <__c.4283>:
    366f:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    367f:	73 0a 00                                            s..

00003682 <__c.4281>:
    3682:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003693 <__c.4279>:
    3693:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036a0 <__c.4277>:
    36a0:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036ac <__c.4275>:
    36ac:	0a 00                                               ..

000036ae <__c.4272>:
    36ae:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    36be:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    36ce:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000036de <__c.4270>:
    36de:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    36ee:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    36fe:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    370e:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    371e:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

0000372a <__c.4267>:
    372a:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    373a:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    374a:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    375a:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

0000376a <__c.4265>:
    376a:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    377a:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003781 <__c.4255>:
    3781:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3791:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37a1:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37b1:	64 0a 00                                            d..

000037b4 <__c.4253>:
    37b4:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37c4:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37d4:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    37e4:	64 0a 00                                            d..

000037e7 <__c.4251>:
    37e7:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37f7:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3807:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3817:	69 6c 65 64 0a 00                                   iled..

0000381d <__c.4249>:
    381d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    382d:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    383d:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    384d:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

0000385c <__c.4236>:
    385c:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    386c:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    387c:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    388c:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    389c:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038ad <__c.4233>:
    38ad:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38bd:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38cd:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000038d6 <__c.4231>:
    38d6:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38e6:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38f6:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3906:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000390e <__c.4219>:
    390e:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    391e:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    392e:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    393e:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    394e:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

0000395b <__c.4194>:
    395b:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    396b:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

0000397b <__c.4185>:
    397b:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    398b:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    399b:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39ab:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000039b5 <__c.4166>:
    39b5:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000039c2 <__c.4161>:
    39c2:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039cf <__c.4156>:
    39cf:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039dc <__c.4148>:
    39dc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039e9 <__c.4146>:
    39e9:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    39f9:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a09:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a19:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a29:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a39:	25 6c 64 0a 00                                      %ld..

00003a3e <__c.4130>:
    3a3e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a4e:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a5e:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a6a <__c.4128>:
    3a6a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a7a:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a8a:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003a95 <__c.4126>:
    3a95:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3aa5:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ab5:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ac5:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ad5:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ae0 <__c.4124>:
    3ae0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3af0:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b00:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b10:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b20:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b2b <__c.4122>:
    3b2b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b3b:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b4b:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b59 <__c.4120>:
    3b59:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b69:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b79:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3b89:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003b9a <__c.4118>:
    3b9a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3baa:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3bba:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3bca:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3bda:	58 68 0a 00                                         Xh..

00003bde <__c.4116>:
    3bde:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bee:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003bff <__c.4110>:
    3bff:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c0f:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c1f:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c2b <__c.4108>:
    3c2b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c3b:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c4b:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c5a <__c.4106>:
    3c5a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c6a:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3c7a:	25 6c 64 0a 00                                      %ld..

00003c7f <__c.4104>:
    3c7f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c8f:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3c9f:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3caf:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cb8 <__c.4102>:
    3cb8:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cc8:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cd8:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ce8:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cf1 <__c.4100>:
    3cf1:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d01:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d09 <__c.4098>:
    3d09:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d19:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d29:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d39:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d42 <__c.4096>:
    3d42:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d52:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d61 <__c.4089>:
    3d61:	0a 00                                               ..

00003d63 <__c.4087>:
    3d63:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d73:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d7d <__c.4085>:
    3d7d:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3d8d:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003d99 <__c.4083>:
    3d99:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3da9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003db6 <__c.4081>:
    3db6:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3dc6:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003dd3 <__c.4079>:
    3dd3:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3de3:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003df0 <__c.4077>:
    3df0:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e00:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e0c <__c.4075>:
    3e0c:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e1c:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e28 <__c.4073>:
    3e28:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e38:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e42 <__c.4071>:
    3e42:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e52:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e5c <__c.4069>:
    3e5c:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e6c:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e78 <__c.4067>:
    3e78:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3e88:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e94 <__c.4065>:
    3e94:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3ea4:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003eb1 <__c.4063>:
    3eb1:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ec1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ece <__c.4061>:
    3ece:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3ede:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003eea <__c.4059>:
    3eea:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3efa:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f04 <__c.4057>:
    3f04:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f14:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f21 <__c.4055>:
    3f21:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f31:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f3e <__c.4053>:
    3f3e:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f4e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f5b <__c.4051>:
    3f5b:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f6b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f78 <__c.4049>:
    3f78:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3f88:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003f95 <__c.4047>:
    3f95:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3fa5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fb2 <__c.4045>:
    3fb2:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3fc2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fcf <__c.4043>:
    3fcf:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3fdf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fec <__c.4041>:
    3fec:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3ffc:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004006 <__c.4039>:
    4006:	0a 25 73 0a 00                                      .%s..

0000400b <__c.3916>:
    400b:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    401b:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    402b:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    403b:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004048 <__c.3907>:
    4048:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4058:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4068:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4078:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004084 <__c.3898>:
    4084:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4094:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040a5 <__c.3891>:
    40a5:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    40b5:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000040be <__c.3885>:
    40be:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    40ce:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    40de:	25 73 5d 0a 00                                      %s]..

000040e3 <__c.3873>:
    40e3:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    40f3:	6f 69 6e 74 65 72 0a 00                             ointer..

000040fb <__c.3868>:
    40fb:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    410b:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    411b:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004124 <__c.3862>:
    4124:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    4134:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

00004141 <__c.3860>:
    4141:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4151:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004162 <__c.3847>:
    4162:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4172:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4182:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4192:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    41a2:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    41b2:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    41c2:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    41d2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    41e2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    41f2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4202:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4212:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4222:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4232:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4242:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4252:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4262:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4272:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4282:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4292:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    42a2:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    42b2:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    42c2:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    42d2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    42e2:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    42f2:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    4302:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4312:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4322:	67 0a 0a 00                                         g...

00004326 <__c.3845>:
    4326:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

00004332 <__c.4610>:
    4332:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4342:	53 4b 0a 00                                         SK..

00004346 <__c.4608>:
    4346:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4356:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004360 <__c.4606>:
    4360:	25 2d 31 36 73 00                                   %-16s.

00004366 <__c.4604>:
    4366:	25 2d 31 36 73 00                                   %-16s.

0000436c <__c.4602>:
    436c:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

0000437d <__c.4600>:
    437d:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    438d:	30 34 78 48 0a 00                                   04xH..

00004393 <__c.4598>:
    4393:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    43a3:	64 6f 6e 65 0a 00                                   done..

000043a9 <__c.4596>:
    43a9:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    43b9:	6f 6e 65 0a 00                                      one..

000043be <__c.4594>:
    43be:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    43ce:	61 6c 69 7a 65 64 0a 00                             alized..

000043d6 <__c.4592>:
    43d6:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    43e6:	0a 00                                               ..

000043e8 <__c.4590>:
    43e8:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    43f8:	7a 65 64 0a 00                                      zed..

000043fd <__c.4588>:
    43fd:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    440d:	69 7a 65 64 0a 00                                   ized..

00004413 <__c.4586>:
    4413:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004424 <__c.4584>:
    4424:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4434:	20 73 74 61 72 74 0a 00                              start..

0000443c <__c.4582>:
    443c:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    444c:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    445c:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

0000446a <__c.4580>:
    446a:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004479 <__c.4578>:
    4479:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4489:	0a 00                                               ..

0000448b <__c.4576>:
    448b:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    449b:	20 62 75 73 0a 00                                    bus..

000044a1 <__c.4574>:
    44a1:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    44b1:	20 62 75 73 0a 00                                    bus..

000044b7 <__c.4572>:
    44b7:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    44c7:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000044d1 <__c.4570>:
    44d1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    44e1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000044eb <__c.4568>:
    44eb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    44fb:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    450b:	35 64 69 73 6b 0a 00                                5disk..

00004512 <__c.4566>:
    4512:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004522 <__c.4564>:
    4522:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4532:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000453f <__c.4562>:
    453f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    454f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000455e <__c.4560>:
    455e:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    456e:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    457e:	3a 20 25 6c 64 0a 00                                : %ld..

00004585 <__c.4558>:
    4585:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004596 <__c.4556>:
    4596:	53 74 61 72 74 0a 00                                Start..

0000459d <__c.4544>:
    459d:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

000045aa <__c.4542>:
    45aa:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    45ba:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

000045c3 <__c.4540>:
    45c3:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

000045d4 <__c.4538>:
    45d4:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000045e4 <__c.4536>:
    45e4:	4f 4b 0a 00                                         OK..

000045e8 <__c.4533>:
    45e8:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    45f8:	20 25 73 0a 00                                       %s..

000045fd <__c.4528>:
    45fd:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

00004606 <__c.4526>:
    4606:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    4616:	20 25 64 0a 00                                       %d..

0000461b <__c.4524>:
    461b:	0a 3e 00                                            .>.

0000461e <__c.4511>:
    461e:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    462e:	42 42 0a 68 65 6c 70 0a 69 6e 70 75 74 20 20 20     BB.help.input   
    463e:	2d 20 74 6f 67 67 6c 65 20 69 6e 70 75 74 20 64     - toggle input d
    464e:	65 62 75 67 67 69 6e 67 0a 6d 65 6d 20 20 20 20     ebugging.mem    
    465e:	20 2d 20 64 69 73 70 6c 61 79 20 66 72 65 65 20      - display free 
    466e:	6d 65 6d 6f 72 79 0a 72 65 73 65 74 20 20 20 2d     memory.reset   -
    467e:	20 72 65 73 65 74 20 65 6d 75 6c 61 74 6f 72 0a      reset emulator.
    468e:	73 65 74 64 61 74 65 20 2d 20 73 65 74 20 64 61     setdate - set da
    469e:	74 65 0a 74 69 6d 65 20 20 20 20 2d 20 64 69 73     te.time    - dis
    46ae:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 74 69 6d     play current tim
    46be:	65 0a 0a 00                                         e...

000046c2 <__c.4504>:
    46c2:	25 2d 31 36 73 00                                   %-16s.

000046c8 <__c.4502>:
    46c8:	25 2d 31 36 73 00                                   %-16s.

000046ce <__c.4495>:
    46ce:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46de:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046e8 <__c.4493>:
    46e8:	25 2d 31 36 73 00                                   %-16s.

000046ee <__c.4491>:
    46ee:	25 2d 31 36 73 00                                   %-16s.

000046f4 <__c.4489>:
    46f4:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4704:	69 6c 65 64 0a 00                                   iled..

0000470a <__c.4487>:
    470a:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    471a:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004728 <__c.4481>:
    4728:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4738:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004742 <__c.4475>:
    4742:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4752:	3a 25 30 32 64 00                                   :%02d.

00004758 <__c.4461>:
    4758:	0a 00                                               ..

0000475a <__c.4459>:
    475a:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    476a:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004774 <__c.4457>:
    4774:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4784:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000478e <__c.4455>:
    478e:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    479e:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47ae:	35 64 69 73 6b 0a 00                                5disk..

000047b5 <__c.4453>:
    47b5:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000047c5 <__c.4451>:
    47c5:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    47d5:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047e2 <__c.4449>:
    47e2:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47f2:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004801 <__c.4447>:
    4801:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4811:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4821:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004832 <__ctors_end>:
    4832:	11 24       	eor	r1, r1
    4834:	1f be       	out	0x3f, r1	; 63
    4836:	cf ef       	ldi	r28, 0xFF	; 255
    4838:	d0 e4       	ldi	r29, 0x40	; 64
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	cd bf       	out	0x3d, r28	; 61

0000483e <__do_copy_data>:
    483e:	17 e1       	ldi	r17, 0x17	; 23
    4840:	a0 e0       	ldi	r26, 0x00	; 0
    4842:	b1 e0       	ldi	r27, 0x01	; 1
    4844:	ec ed       	ldi	r30, 0xDC	; 220
    4846:	fd ec       	ldi	r31, 0xCD	; 205
    4848:	01 e0       	ldi	r16, 0x01	; 1
    484a:	0b bf       	out	0x3b, r16	; 59
    484c:	02 c0       	rjmp	.+4      	; 0x4852 <__do_copy_data+0x14>
    484e:	07 90       	elpm	r0, Z+
    4850:	0d 92       	st	X+, r0
    4852:	ae 34       	cpi	r26, 0x4E	; 78
    4854:	b1 07       	cpc	r27, r17
    4856:	d9 f7       	brne	.-10     	; 0x484e <__do_copy_data+0x10>

00004858 <__do_clear_bss>:
    4858:	21 e2       	ldi	r18, 0x21	; 33
    485a:	ae e4       	ldi	r26, 0x4E	; 78
    485c:	b7 e1       	ldi	r27, 0x17	; 23
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <.do_clear_bss_start>

00004860 <.do_clear_bss_loop>:
    4860:	1d 92       	st	X+, r1

00004862 <.do_clear_bss_start>:
    4862:	a0 3b       	cpi	r26, 0xB0	; 176
    4864:	b2 07       	cpc	r27, r18
    4866:	e1 f7       	brne	.-8      	; 0x4860 <.do_clear_bss_loop>
    4868:	0e 94 63 e0 	call	0x1c0c6	; 0x1c0c6 <main>
    486c:	0c 94 ec e6 	jmp	0x1cdd8	; 0x1cdd8 <_exit>

00004870 <__bad_interrupt>:
    4870:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004874 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4874:	e8 2f       	mov	r30, r24
    4876:	e6 95       	lsr	r30
    4878:	e6 95       	lsr	r30
    487a:	e6 95       	lsr	r30
    487c:	93 e0       	ldi	r25, 0x03	; 3
    487e:	e9 9f       	mul	r30, r25
    4880:	f0 01       	movw	r30, r0
    4882:	11 24       	eor	r1, r1
    4884:	32 a1       	ldd	r19, Z+34	; 0x22
    4886:	28 2f       	mov	r18, r24
    4888:	27 70       	andi	r18, 0x07	; 7
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	01 c0       	rjmp	.+2      	; 0x4892 <chip_select+0x1e>
    4890:	88 0f       	add	r24, r24
    4892:	2a 95       	dec	r18
    4894:	ea f7       	brpl	.-6      	; 0x4890 <chip_select+0x1c>
    4896:	98 2f       	mov	r25, r24
    4898:	90 95       	com	r25
    489a:	93 23       	and	r25, r19
    489c:	92 a3       	std	Z+34, r25	; 0x22
    489e:	91 a1       	ldd	r25, Z+33	; 0x21
    48a0:	89 2b       	or	r24, r25
    48a2:	81 a3       	std	Z+33, r24	; 0x21
    48a4:	08 95       	ret

000048a6 <chip_deselect>:
    48a6:	e8 2f       	mov	r30, r24
    48a8:	e6 95       	lsr	r30
    48aa:	e6 95       	lsr	r30
    48ac:	e6 95       	lsr	r30
    48ae:	93 e0       	ldi	r25, 0x03	; 3
    48b0:	e9 9f       	mul	r30, r25
    48b2:	f0 01       	movw	r30, r0
    48b4:	11 24       	eor	r1, r1
    48b6:	32 a1       	ldd	r19, Z+34	; 0x22
    48b8:	28 2f       	mov	r18, r24
    48ba:	27 70       	andi	r18, 0x07	; 7
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	01 c0       	rjmp	.+2      	; 0x48c4 <chip_deselect+0x1e>
    48c2:	88 0f       	add	r24, r24
    48c4:	2a 95       	dec	r18
    48c6:	ea f7       	brpl	.-6      	; 0x48c2 <chip_deselect+0x1c>
    48c8:	93 2f       	mov	r25, r19
    48ca:	98 2b       	or	r25, r24
    48cc:	92 a3       	std	Z+34, r25	; 0x22
    48ce:	91 a1       	ldd	r25, Z+33	; 0x21
    48d0:	89 2b       	or	r24, r25
    48d2:	81 a3       	std	Z+33, r24	; 0x21
    48d4:	08 95       	ret

000048d6 <chip_select_init>:
    48d6:	e7 cf       	rjmp	.-50     	; 0x48a6 <chip_deselect>
    48d8:	08 95       	ret

000048da <spi_end>:
    48da:	cf 93       	push	r28
    48dc:	ad b7       	in	r26, 0x3d	; 61
    48de:	be b7       	in	r27, 0x3e	; 62
    48e0:	17 97       	sbiw	r26, 0x07	; 7
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	be bf       	out	0x3e, r27	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	ad bf       	out	0x3d, r26	; 61
    48ec:	c8 2f       	mov	r28, r24
    48ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    48f2:	8c 17       	cp	r24, r28
    48f4:	99 f0       	breq	.+38     	; 0x491c <spi_end+0x42>
    48f6:	8f 3f       	cpi	r24, 0xFF	; 255
    48f8:	89 f0       	breq	.+34     	; 0x491c <spi_end+0x42>
    48fa:	2c 2f       	mov	r18, r28
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	ed b7       	in	r30, 0x3d	; 61
    4900:	fe b7       	in	r31, 0x3e	; 62
    4902:	37 83       	std	Z+7, r19	; 0x07
    4904:	26 83       	std	Z+6, r18	; 0x06
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	95 83       	std	Z+5, r25	; 0x05
    490a:	84 83       	std	Z+4, r24	; 0x04
    490c:	82 ec       	ldi	r24, 0xC2	; 194
    490e:	91 e0       	ldi	r25, 0x01	; 1
    4910:	a0 e0       	ldi	r26, 0x00	; 0
    4912:	81 83       	std	Z+1, r24	; 0x01
    4914:	92 83       	std	Z+2, r25	; 0x02
    4916:	a3 83       	std	Z+3, r26	; 0x03
    4918:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    491c:	8c 2f       	mov	r24, r28
    491e:	c3 df       	rcall	.-122    	; 0x48a6 <chip_deselect>
    4920:	8f ef       	ldi	r24, 0xFF	; 255
    4922:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4926:	ad b7       	in	r26, 0x3d	; 61
    4928:	be b7       	in	r27, 0x3e	; 62
    492a:	17 96       	adiw	r26, 0x07	; 7
    492c:	0f b6       	in	r0, 0x3f	; 63
    492e:	f8 94       	cli
    4930:	be bf       	out	0x3e, r27	; 62
    4932:	0f be       	out	0x3f, r0	; 63
    4934:	ad bf       	out	0x3d, r26	; 61
    4936:	cf 91       	pop	r28
    4938:	08 95       	ret

0000493a <spi_TX_buffer>:
    493a:	cd c4       	rjmp	.+2458   	; 0x52d6 <SPI0_TX>
    493c:	08 95       	ret

0000493e <spi_RX_buffer>:
    493e:	f5 c4       	rjmp	.+2538   	; 0x532a <SPI0_RX>
    4940:	08 95       	ret

00004942 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4942:	a1 e0       	ldi	r26, 0x01	; 1
    4944:	b0 e0       	ldi	r27, 0x00	; 0
    4946:	e7 ea       	ldi	r30, 0xA7	; 167
    4948:	f4 e2       	ldi	r31, 0x24	; 36
    494a:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    494e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4950:	61 e0       	ldi	r22, 0x01	; 1
    4952:	70 e0       	ldi	r23, 0x00	; 0
    4954:	ce 01       	movw	r24, r28
    4956:	01 96       	adiw	r24, 0x01	; 1
    4958:	be d4       	rcall	.+2428   	; 0x52d6 <SPI0_TX>
#endif
}
    495a:	21 96       	adiw	r28, 0x01	; 1
    495c:	e2 e0       	ldi	r30, 0x02	; 2
    495e:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00004962 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4962:	cf 92       	push	r12
    4964:	df 92       	push	r13
    4966:	ef 92       	push	r14
    4968:	ff 92       	push	r15
    496a:	6b 01       	movw	r12, r22
    496c:	7c 01       	movw	r14, r24
    496e:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4970:	9a df       	rcall	.-204    	; 0x48a6 <chip_deselect>
    _cs_pin = 0xff;
    4972:	8f ef       	ldi	r24, 0xFF	; 255
    4974:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4978:	c7 01       	movw	r24, r14
    497a:	b6 01       	movw	r22, r12
    497c:	7f d4       	rcall	.+2302   	; 0x527c <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4982:	3c d4       	rcall	.+2168   	; 0x51fc <SPI0_Mode>
    4984:	8f ef       	ldi	r24, 0xFF	; 255
    4986:	dd df       	rcall	.-70     	; 0x4942 <spi_TX>
    _spi_clock = clock;
    4988:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    498c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4990:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4994:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4998:	ff 90       	pop	r15
    499a:	ef 90       	pop	r14
    499c:	df 90       	pop	r13
    499e:	cf 90       	pop	r12
    49a0:	08 95       	ret

000049a2 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    49a2:	cf 92       	push	r12
    49a4:	df 92       	push	r13
    49a6:	ef 92       	push	r14
    49a8:	ff 92       	push	r15
    49aa:	cf 93       	push	r28
    49ac:	df 93       	push	r29
    49ae:	ad b7       	in	r26, 0x3d	; 61
    49b0:	be b7       	in	r27, 0x3e	; 62
    49b2:	17 97       	sbiw	r26, 0x07	; 7
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	be bf       	out	0x3e, r27	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	ad bf       	out	0x3d, r26	; 61
    49be:	6b 01       	movw	r12, r22
    49c0:	7c 01       	movw	r14, r24
    49c2:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    49c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    49c8:	8f 3f       	cpi	r24, 0xFF	; 255
    49ca:	79 f0       	breq	.+30     	; 0x49ea <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    49cc:	ed b7       	in	r30, 0x3d	; 61
    49ce:	fe b7       	in	r31, 0x3e	; 62
    49d0:	46 83       	std	Z+6, r20	; 0x06
    49d2:	d7 83       	std	Z+7, r29	; 0x07
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	95 83       	std	Z+5, r25	; 0x05
    49d8:	84 83       	std	Z+4, r24	; 0x04
    49da:	80 ee       	ldi	r24, 0xE0	; 224
    49dc:	91 e0       	ldi	r25, 0x01	; 1
    49de:	a0 e0       	ldi	r26, 0x00	; 0
    49e0:	81 83       	std	Z+1, r24	; 0x01
    49e2:	92 83       	std	Z+2, r25	; 0x02
    49e4:	a3 83       	std	Z+3, r26	; 0x03
    49e6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    49ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    49ee:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    49f2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    49f6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    49fa:	8c 15       	cp	r24, r12
    49fc:	9d 05       	cpc	r25, r13
    49fe:	ae 05       	cpc	r26, r14
    4a00:	bf 05       	cpc	r27, r15
    4a02:	21 f0       	breq	.+8      	; 0x4a0c <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4a04:	ae 01       	movw	r20, r28
    4a06:	c7 01       	movw	r24, r14
    4a08:	b6 01       	movw	r22, r12
    4a0a:	ab df       	rcall	.-170    	; 0x4962 <spi_init>
    }

    chip_select(pin);
    4a0c:	8c 2f       	mov	r24, r28
    4a0e:	32 df       	rcall	.-412    	; 0x4874 <chip_select>
    _cs_pin = pin;
    4a10:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4a14:	ad b7       	in	r26, 0x3d	; 61
    4a16:	be b7       	in	r27, 0x3e	; 62
    4a18:	17 96       	adiw	r26, 0x07	; 7
    4a1a:	0f b6       	in	r0, 0x3f	; 63
    4a1c:	f8 94       	cli
    4a1e:	be bf       	out	0x3e, r27	; 62
    4a20:	0f be       	out	0x3f, r0	; 63
    4a22:	ad bf       	out	0x3d, r26	; 61
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	ff 90       	pop	r15
    4a2a:	ef 90       	pop	r14
    4a2c:	df 90       	pop	r13
    4a2e:	cf 90       	pop	r12
    4a30:	08 95       	ret

00004a32 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4a32:	a1 e0       	ldi	r26, 0x01	; 1
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	ef e1       	ldi	r30, 0x1F	; 31
    4a38:	f5 e2       	ldi	r31, 0x25	; 37
    4a3a:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    4a3e:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4a40:	61 e0       	ldi	r22, 0x01	; 1
    4a42:	70 e0       	ldi	r23, 0x00	; 0
    4a44:	ce 01       	movw	r24, r28
    4a46:	01 96       	adiw	r24, 0x01	; 1
    4a48:	5a d4       	rcall	.+2228   	; 0x52fe <SPI0_TXRX>
#endif
    return(data);
}
    4a4a:	89 81       	ldd	r24, Y+1	; 0x01
    4a4c:	21 96       	adiw	r28, 0x01	; 1
    4a4e:	e2 e0       	ldi	r30, 0x02	; 2
    4a50:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00004a54 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4a54:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <__data_end>
    GPIO_PIN_HI(LED2);
    4a58:	2c 9a       	sbi	0x05, 4	; 5
    4a5a:	24 9a       	sbi	0x04, 4	; 4
    4a5c:	08 95       	ret

00004a5e <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4a5e:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <__data_end>
    GPIO_PIN_LOW(LED2);
    4a62:	2c 98       	cbi	0x05, 4	; 5
    4a64:	24 9a       	sbi	0x04, 4	; 4
    4a66:	08 95       	ret

00004a68 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4a68:	a2 e0       	ldi	r26, 0x02	; 2
    4a6a:	b0 e0       	ldi	r27, 0x00	; 0
    4a6c:	ea e3       	ldi	r30, 0x3A	; 58
    4a6e:	f5 e2       	ldi	r31, 0x25	; 37
    4a70:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4a74:	20 91 ac 21 	lds	r18, 0x21AC	; 0x8021ac <__brkval>
    4a78:	30 91 ad 21 	lds	r19, 0x21AD	; 0x8021ad <__brkval+0x1>
    4a7c:	21 15       	cp	r18, r1
    4a7e:	31 05       	cpc	r19, r1
    4a80:	11 f4       	brne	.+4      	; 0x4a86 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4a82:	20 eb       	ldi	r18, 0xB0	; 176
    4a84:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4a86:	ce 01       	movw	r24, r28
    4a88:	01 96       	adiw	r24, 0x01	; 1
    4a8a:	82 1b       	sub	r24, r18
    4a8c:	93 0b       	sbc	r25, r19
    4a8e:	22 96       	adiw	r28, 0x02	; 2
    4a90:	e2 e0       	ldi	r30, 0x02	; 2
    4a92:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00004a96 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4a96:	a9 e0       	ldi	r26, 0x09	; 9
    4a98:	b0 e0       	ldi	r27, 0x00	; 0
    4a9a:	e1 e5       	ldi	r30, 0x51	; 81
    4a9c:	f5 e2       	ldi	r31, 0x25	; 37
    4a9e:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4aa2:	e2 df       	rcall	.-60     	; 0x4a68 <freeRam>
    4aa4:	99 87       	std	Y+9, r25	; 0x09
    4aa6:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4aa8:	ed b7       	in	r30, 0x3d	; 61
    4aaa:	fe b7       	in	r31, 0x3e	; 62
    4aac:	95 83       	std	Z+5, r25	; 0x05
    4aae:	84 83       	std	Z+4, r24	; 0x04
    4ab0:	87 e0       	ldi	r24, 0x07	; 7
    4ab2:	93 e0       	ldi	r25, 0x03	; 3
    4ab4:	a0 e0       	ldi	r26, 0x00	; 0
    4ab6:	81 83       	std	Z+1, r24	; 0x01
    4ab8:	92 83       	std	Z+2, r25	; 0x02
    4aba:	a3 83       	std	Z+3, r26	; 0x03
    4abc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4ac0:	8f ef       	ldi	r24, 0xFF	; 255
    4ac2:	90 e4       	ldi	r25, 0x40	; 64
    4ac4:	ed b7       	in	r30, 0x3d	; 61
    4ac6:	fe b7       	in	r31, 0x3e	; 62
    4ac8:	95 83       	std	Z+5, r25	; 0x05
    4aca:	84 83       	std	Z+4, r24	; 0x04
    4acc:	84 ef       	ldi	r24, 0xF4	; 244
    4ace:	92 e0       	ldi	r25, 0x02	; 2
    4ad0:	a0 e0       	ldi	r26, 0x00	; 0
    4ad2:	81 83       	std	Z+1, r24	; 0x01
    4ad4:	92 83       	std	Z+2, r25	; 0x02
    4ad6:	a3 83       	std	Z+3, r26	; 0x03
    4ad8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4adc:	ce 01       	movw	r24, r28
    4ade:	08 96       	adiw	r24, 0x08	; 8
    4ae0:	ed b7       	in	r30, 0x3d	; 61
    4ae2:	fe b7       	in	r31, 0x3e	; 62
    4ae4:	95 83       	std	Z+5, r25	; 0x05
    4ae6:	84 83       	std	Z+4, r24	; 0x04
    4ae8:	81 ee       	ldi	r24, 0xE1	; 225
    4aea:	92 e0       	ldi	r25, 0x02	; 2
    4aec:	a0 e0       	ldi	r26, 0x00	; 0
    4aee:	81 83       	std	Z+1, r24	; 0x01
    4af0:	92 83       	std	Z+2, r25	; 0x02
    4af2:	a3 83       	std	Z+3, r26	; 0x03
    4af4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4af8:	80 eb       	ldi	r24, 0xB0	; 176
    4afa:	91 e2       	ldi	r25, 0x21	; 33
    4afc:	ed b7       	in	r30, 0x3d	; 61
    4afe:	fe b7       	in	r31, 0x3e	; 62
    4b00:	97 83       	std	Z+7, r25	; 0x07
    4b02:	86 83       	std	Z+6, r24	; 0x06
    4b04:	8e e4       	ldi	r24, 0x4E	; 78
    4b06:	97 e1       	ldi	r25, 0x17	; 23
    4b08:	95 83       	std	Z+5, r25	; 0x05
    4b0a:	84 83       	std	Z+4, r24	; 0x04
    4b0c:	83 ec       	ldi	r24, 0xC3	; 195
    4b0e:	92 e0       	ldi	r25, 0x02	; 2
    4b10:	a0 e0       	ldi	r26, 0x00	; 0
    4b12:	81 83       	std	Z+1, r24	; 0x01
    4b14:	92 83       	std	Z+2, r25	; 0x02
    4b16:	a3 83       	std	Z+3, r26	; 0x03
    4b18:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4b1c:	8e e4       	ldi	r24, 0x4E	; 78
    4b1e:	97 e1       	ldi	r25, 0x17	; 23
    4b20:	ed b7       	in	r30, 0x3d	; 61
    4b22:	fe b7       	in	r31, 0x3e	; 62
    4b24:	97 83       	std	Z+7, r25	; 0x07
    4b26:	86 83       	std	Z+6, r24	; 0x06
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	91 e0       	ldi	r25, 0x01	; 1
    4b2c:	95 83       	std	Z+5, r25	; 0x05
    4b2e:	84 83       	std	Z+4, r24	; 0x04
    4b30:	85 ea       	ldi	r24, 0xA5	; 165
    4b32:	92 e0       	ldi	r25, 0x02	; 2
    4b34:	a0 e0       	ldi	r26, 0x00	; 0
    4b36:	81 83       	std	Z+1, r24	; 0x01
    4b38:	92 83       	std	Z+2, r25	; 0x02
    4b3a:	a3 83       	std	Z+3, r26	; 0x03
    4b3c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	ed b7       	in	r30, 0x3d	; 61
    4b46:	fe b7       	in	r31, 0x3e	; 62
    4b48:	97 83       	std	Z+7, r25	; 0x07
    4b4a:	86 83       	std	Z+6, r24	; 0x06
    4b4c:	80 eb       	ldi	r24, 0xB0	; 176
    4b4e:	91 e2       	ldi	r25, 0x21	; 33
    4b50:	95 83       	std	Z+5, r25	; 0x05
    4b52:	84 83       	std	Z+4, r24	; 0x04
    4b54:	87 e8       	ldi	r24, 0x87	; 135
    4b56:	92 e0       	ldi	r25, 0x02	; 2
    4b58:	a0 e0       	ldi	r26, 0x00	; 0
    4b5a:	81 83       	std	Z+1, r24	; 0x01
    4b5c:	92 83       	std	Z+2, r25	; 0x02
    4b5e:	a3 83       	std	Z+3, r26	; 0x03
    4b60:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4b64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4b68:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4b6c:	ed b7       	in	r30, 0x3d	; 61
    4b6e:	fe b7       	in	r31, 0x3e	; 62
    4b70:	97 83       	std	Z+7, r25	; 0x07
    4b72:	86 83       	std	Z+6, r24	; 0x06
    4b74:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4b78:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b7c:	95 83       	std	Z+5, r25	; 0x05
    4b7e:	84 83       	std	Z+4, r24	; 0x04
    4b80:	89 e6       	ldi	r24, 0x69	; 105
    4b82:	92 e0       	ldi	r25, 0x02	; 2
    4b84:	a0 e0       	ldi	r26, 0x00	; 0
    4b86:	81 83       	std	Z+1, r24	; 0x01
    4b88:	92 83       	std	Z+2, r25	; 0x02
    4b8a:	a3 83       	std	Z+3, r26	; 0x03
    4b8c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4b90:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <__brkval>
    4b94:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <__brkval+0x1>
    4b98:	ed b7       	in	r30, 0x3d	; 61
    4b9a:	fe b7       	in	r31, 0x3e	; 62
    4b9c:	95 83       	std	Z+5, r25	; 0x05
    4b9e:	84 83       	std	Z+4, r24	; 0x04
    4ba0:	85 e5       	ldi	r24, 0x55	; 85
    4ba2:	92 e0       	ldi	r25, 0x02	; 2
    4ba4:	a0 e0       	ldi	r26, 0x00	; 0
    4ba6:	81 83       	std	Z+1, r24	; 0x01
    4ba8:	92 83       	std	Z+2, r25	; 0x02
    4baa:	a3 83       	std	Z+3, r26	; 0x03
    4bac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

}
    4bb0:	29 96       	adiw	r28, 0x09	; 9
    4bb2:	e2 e0       	ldi	r30, 0x02	; 2
    4bb4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00004bb8 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4bb8:	ef 92       	push	r14
    4bba:	ff 92       	push	r15
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	cf 93       	push	r28
    4bc2:	df 93       	push	r29
    4bc4:	ad b7       	in	r26, 0x3d	; 61
    4bc6:	be b7       	in	r27, 0x3e	; 62
    4bc8:	17 97       	sbiw	r26, 0x07	; 7
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	be bf       	out	0x3e, r27	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	ad bf       	out	0x3d, r26	; 61
    4bd4:	8c 01       	movw	r16, r24
    4bd6:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4bd8:	0e 94 aa e5 	call	0x1cb54	; 0x1cb54 <calloc>
    4bdc:	ec 01       	movw	r28, r24
    if(!p)
    4bde:	89 2b       	or	r24, r25
    4be0:	71 f4       	brne	.+28     	; 0x4bfe <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4be2:	ed b7       	in	r30, 0x3d	; 61
    4be4:	fe b7       	in	r31, 0x3e	; 62
    4be6:	f7 82       	std	Z+7, r15	; 0x07
    4be8:	e6 82       	std	Z+6, r14	; 0x06
    4bea:	15 83       	std	Z+5, r17	; 0x05
    4bec:	04 83       	std	Z+4, r16	; 0x04
    4bee:	8a e3       	ldi	r24, 0x3A	; 58
    4bf0:	92 e0       	ldi	r25, 0x02	; 2
    4bf2:	a0 e0       	ldi	r26, 0x00	; 0
    4bf4:	81 83       	std	Z+1, r24	; 0x01
    4bf6:	92 83       	std	Z+2, r25	; 0x02
    4bf8:	a3 83       	std	Z+3, r26	; 0x03
    4bfa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
    return(p);
}
    4bfe:	ce 01       	movw	r24, r28
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	27 96       	adiw	r28, 0x07	; 7
    4c06:	e6 e0       	ldi	r30, 0x06	; 6
    4c08:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00004c0c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4c0c:	0f 93       	push	r16
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	00 d0       	rcall	.+0      	; 0x4c16 <safemalloc+0xa>
    4c16:	00 d0       	rcall	.+0      	; 0x4c18 <safemalloc+0xc>
    4c18:	1f 92       	push	r1
    4c1a:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4c1c:	61 e0       	ldi	r22, 0x01	; 1
    4c1e:	70 e0       	ldi	r23, 0x00	; 0
    4c20:	0e 94 aa e5 	call	0x1cb54	; 0x1cb54 <calloc>
    4c24:	ec 01       	movw	r28, r24
    if(!p)
    4c26:	89 2b       	or	r24, r25
    4c28:	61 f4       	brne	.+24     	; 0x4c42 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4c2a:	ed b7       	in	r30, 0x3d	; 61
    4c2c:	fe b7       	in	r31, 0x3e	; 62
    4c2e:	15 83       	std	Z+5, r17	; 0x05
    4c30:	04 83       	std	Z+4, r16	; 0x04
    4c32:	82 e2       	ldi	r24, 0x22	; 34
    4c34:	92 e0       	ldi	r25, 0x02	; 2
    4c36:	a0 e0       	ldi	r26, 0x00	; 0
    4c38:	81 83       	std	Z+1, r24	; 0x01
    4c3a:	92 83       	std	Z+2, r25	; 0x02
    4c3c:	a3 83       	std	Z+3, r26	; 0x03
    4c3e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
    return(p);
}
    4c42:	ce 01       	movw	r24, r28
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	25 96       	adiw	r28, 0x05	; 5
    4c4a:	e4 e0       	ldi	r30, 0x04	; 4
    4c4c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00004c50 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4c50:	ad b7       	in	r26, 0x3d	; 61
    4c52:	be b7       	in	r27, 0x3e	; 62
    4c54:	17 97       	sbiw	r26, 0x07	; 7
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	be bf       	out	0x3e, r27	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4c60:	00 97       	sbiw	r24, 0x00	; 0
    4c62:	11 f1       	breq	.+68     	; 0x4ca8 <safefree+0x58>
        return;

    if(__brkval)
    4c64:	20 91 ac 21 	lds	r18, 0x21AC	; 0x8021ac <__brkval>
    4c68:	30 91 ad 21 	lds	r19, 0x21AD	; 0x8021ad <__brkval+0x1>
    4c6c:	21 15       	cp	r18, r1
    4c6e:	31 05       	cpc	r19, r1
    4c70:	11 f4       	brne	.+4      	; 0x4c76 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4c72:	20 eb       	ldi	r18, 0xB0	; 176
    4c74:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4c76:	41 e2       	ldi	r20, 0x21	; 33
    4c78:	80 3b       	cpi	r24, 0xB0	; 176
    4c7a:	94 07       	cpc	r25, r20
    4c7c:	30 f0       	brcs	.+12     	; 0x4c8a <safefree+0x3a>
    4c7e:	28 17       	cp	r18, r24
    4c80:	39 07       	cpc	r19, r25
    4c82:	18 f0       	brcs	.+6      	; 0x4c8a <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4c84:	0e 94 5c e6 	call	0x1ccb8	; 0x1ccb8 <free>
        return;
    4c88:	0f c0       	rjmp	.+30     	; 0x4ca8 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4c8a:	ed b7       	in	r30, 0x3d	; 61
    4c8c:	fe b7       	in	r31, 0x3e	; 62
    4c8e:	37 83       	std	Z+7, r19	; 0x07
    4c90:	26 83       	std	Z+6, r18	; 0x06
    4c92:	95 83       	std	Z+5, r25	; 0x05
    4c94:	84 83       	std	Z+4, r24	; 0x04
    4c96:	8d ef       	ldi	r24, 0xFD	; 253
    4c98:	91 e0       	ldi	r25, 0x01	; 1
    4c9a:	a0 e0       	ldi	r26, 0x00	; 0
    4c9c:	81 83       	std	Z+1, r24	; 0x01
    4c9e:	92 83       	std	Z+2, r25	; 0x02
    4ca0:	a3 83       	std	Z+3, r26	; 0x03
    4ca2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    PrintFree();
    4ca6:	f7 de       	rcall	.-530    	; 0x4a96 <PrintFree>
}
    4ca8:	ad b7       	in	r26, 0x3d	; 61
    4caa:	be b7       	in	r27, 0x3e	; 62
    4cac:	17 96       	adiw	r26, 0x07	; 7
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	f8 94       	cli
    4cb2:	be bf       	out	0x3e, r27	; 62
    4cb4:	0f be       	out	0x3f, r0	; 63
    4cb6:	ad bf       	out	0x3d, r26	; 61
    4cb8:	08 95       	ret

00004cba <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4cba:	64 36       	cpi	r22, 0x64	; 100
    4cbc:	71 05       	cpc	r23, r1
    4cbe:	81 05       	cpc	r24, r1
    4cc0:	91 05       	cpc	r25, r1
    4cc2:	58 f0       	brcs	.+22     	; 0x4cda <delayus+0x20>
    {
        us -= 100U;
    4cc4:	64 56       	subi	r22, 0x64	; 100
    4cc6:	71 09       	sbc	r23, r1
    4cc8:	81 09       	sbc	r24, r1
    4cca:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4ccc:	e3 ef       	ldi	r30, 0xF3	; 243
    4cce:	f1 e0       	ldi	r31, 0x01	; 1
    4cd0:	31 97       	sbiw	r30, 0x01	; 1
    4cd2:	f1 f7       	brne	.-4      	; 0x4cd0 <delayus+0x16>
    4cd4:	00 c0       	rjmp	.+0      	; 0x4cd6 <delayus+0x1c>
    4cd6:	00 00       	nop
    4cd8:	f0 cf       	rjmp	.-32     	; 0x4cba <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4cda:	6a 30       	cpi	r22, 0x0A	; 10
    4cdc:	71 05       	cpc	r23, r1
    4cde:	81 05       	cpc	r24, r1
    4ce0:	91 05       	cpc	r25, r1
    4ce2:	48 f0       	brcs	.+18     	; 0x4cf6 <delayus+0x3c>
    {
        us -= 10U;
    4ce4:	6a 50       	subi	r22, 0x0A	; 10
    4ce6:	71 09       	sbc	r23, r1
    4ce8:	81 09       	sbc	r24, r1
    4cea:	91 09       	sbc	r25, r1
    4cec:	f2 e4       	ldi	r31, 0x42	; 66
    4cee:	fa 95       	dec	r31
    4cf0:	f1 f7       	brne	.-4      	; 0x4cee <delayus+0x34>
    4cf2:	00 c0       	rjmp	.+0      	; 0x4cf4 <delayus+0x3a>
    4cf4:	f2 cf       	rjmp	.-28     	; 0x4cda <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4cf6:	61 15       	cp	r22, r1
    4cf8:	71 05       	cpc	r23, r1
    4cfa:	81 05       	cpc	r24, r1
    4cfc:	91 05       	cpc	r25, r1
    4cfe:	49 f0       	breq	.+18     	; 0x4d12 <delayus+0x58>
    {
        --us;
    4d00:	61 50       	subi	r22, 0x01	; 1
    4d02:	71 09       	sbc	r23, r1
    4d04:	81 09       	sbc	r24, r1
    4d06:	91 09       	sbc	r25, r1
    4d08:	26 e0       	ldi	r18, 0x06	; 6
    4d0a:	2a 95       	dec	r18
    4d0c:	f1 f7       	brne	.-4      	; 0x4d0a <delayus+0x50>
    4d0e:	00 c0       	rjmp	.+0      	; 0x4d10 <delayus+0x56>
    4d10:	f2 cf       	rjmp	.-28     	; 0x4cf6 <delayus+0x3c>
        _delay_us(1);
    }
}
    4d12:	08 95       	ret

00004d14 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4d14:	61 15       	cp	r22, r1
    4d16:	71 05       	cpc	r23, r1
    4d18:	81 05       	cpc	r24, r1
    4d1a:	91 05       	cpc	r25, r1
    4d1c:	09 f4       	brne	.+2      	; 0x4d20 <delayms+0xc>
    4d1e:	41 c0       	rjmp	.+130    	; 0x4da2 <delayms+0x8e>
    4d20:	e3 ef       	ldi	r30, 0xF3	; 243
    4d22:	f1 e0       	ldi	r31, 0x01	; 1
    4d24:	31 97       	sbiw	r30, 0x01	; 1
    4d26:	f1 f7       	brne	.-4      	; 0x4d24 <delayms+0x10>
    4d28:	00 c0       	rjmp	.+0      	; 0x4d2a <delayms+0x16>
    4d2a:	00 00       	nop
    4d2c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d2e:	f1 e0       	ldi	r31, 0x01	; 1
    4d30:	31 97       	sbiw	r30, 0x01	; 1
    4d32:	f1 f7       	brne	.-4      	; 0x4d30 <delayms+0x1c>
    4d34:	00 c0       	rjmp	.+0      	; 0x4d36 <delayms+0x22>
    4d36:	00 00       	nop
    4d38:	e3 ef       	ldi	r30, 0xF3	; 243
    4d3a:	f1 e0       	ldi	r31, 0x01	; 1
    4d3c:	31 97       	sbiw	r30, 0x01	; 1
    4d3e:	f1 f7       	brne	.-4      	; 0x4d3c <delayms+0x28>
    4d40:	00 c0       	rjmp	.+0      	; 0x4d42 <delayms+0x2e>
    4d42:	00 00       	nop
    4d44:	e3 ef       	ldi	r30, 0xF3	; 243
    4d46:	f1 e0       	ldi	r31, 0x01	; 1
    4d48:	31 97       	sbiw	r30, 0x01	; 1
    4d4a:	f1 f7       	brne	.-4      	; 0x4d48 <delayms+0x34>
    4d4c:	00 c0       	rjmp	.+0      	; 0x4d4e <delayms+0x3a>
    4d4e:	00 00       	nop
    4d50:	e3 ef       	ldi	r30, 0xF3	; 243
    4d52:	f1 e0       	ldi	r31, 0x01	; 1
    4d54:	31 97       	sbiw	r30, 0x01	; 1
    4d56:	f1 f7       	brne	.-4      	; 0x4d54 <delayms+0x40>
    4d58:	00 c0       	rjmp	.+0      	; 0x4d5a <delayms+0x46>
    4d5a:	00 00       	nop
    4d5c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d5e:	f1 e0       	ldi	r31, 0x01	; 1
    4d60:	31 97       	sbiw	r30, 0x01	; 1
    4d62:	f1 f7       	brne	.-4      	; 0x4d60 <delayms+0x4c>
    4d64:	00 c0       	rjmp	.+0      	; 0x4d66 <delayms+0x52>
    4d66:	00 00       	nop
    4d68:	e3 ef       	ldi	r30, 0xF3	; 243
    4d6a:	f1 e0       	ldi	r31, 0x01	; 1
    4d6c:	31 97       	sbiw	r30, 0x01	; 1
    4d6e:	f1 f7       	brne	.-4      	; 0x4d6c <delayms+0x58>
    4d70:	00 c0       	rjmp	.+0      	; 0x4d72 <delayms+0x5e>
    4d72:	00 00       	nop
    4d74:	e3 ef       	ldi	r30, 0xF3	; 243
    4d76:	f1 e0       	ldi	r31, 0x01	; 1
    4d78:	31 97       	sbiw	r30, 0x01	; 1
    4d7a:	f1 f7       	brne	.-4      	; 0x4d78 <delayms+0x64>
    4d7c:	00 c0       	rjmp	.+0      	; 0x4d7e <delayms+0x6a>
    4d7e:	00 00       	nop
    4d80:	e3 ef       	ldi	r30, 0xF3	; 243
    4d82:	f1 e0       	ldi	r31, 0x01	; 1
    4d84:	31 97       	sbiw	r30, 0x01	; 1
    4d86:	f1 f7       	brne	.-4      	; 0x4d84 <delayms+0x70>
    4d88:	00 c0       	rjmp	.+0      	; 0x4d8a <delayms+0x76>
    4d8a:	00 00       	nop
    4d8c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d8e:	f1 e0       	ldi	r31, 0x01	; 1
    4d90:	31 97       	sbiw	r30, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <delayms+0x7c>
    4d94:	00 c0       	rjmp	.+0      	; 0x4d96 <delayms+0x82>
    4d96:	00 00       	nop
    4d98:	61 50       	subi	r22, 0x01	; 1
    4d9a:	71 09       	sbc	r23, r1
    4d9c:	81 09       	sbc	r24, r1
    4d9e:	91 09       	sbc	r25, r1
    4da0:	b9 cf       	rjmp	.-142    	; 0x4d14 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4da2:	08 95       	ret

00004da4 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4da4:	81 11       	cpse	r24, r1
    4da6:	0e c0       	rjmp	.+28     	; 0x4dc4 <uart_rx_flush+0x20>
    4da8:	f8 94       	cli
    4daa:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    4dae:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    4db2:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    4db6:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    4dba:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    4dbe:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    4dc2:	78 94       	sei
    4dc4:	08 95       	ret

00004dc6 <uart_ubr>:
    4dc6:	4f 92       	push	r4
    4dc8:	5f 92       	push	r5
    4dca:	6f 92       	push	r6
    4dcc:	7f 92       	push	r7
    4dce:	8f 92       	push	r8
    4dd0:	9f 92       	push	r9
    4dd2:	af 92       	push	r10
    4dd4:	bf 92       	push	r11
    4dd6:	cf 92       	push	r12
    4dd8:	df 92       	push	r13
    4dda:	ef 92       	push	r14
    4ddc:	ff 92       	push	r15
    4dde:	cf 93       	push	r28
    4de0:	df 93       	push	r29
    4de2:	5a 01       	movw	r10, r20
    4de4:	e9 01       	movw	r28, r18
    4de6:	0e 94 48 e4 	call	0x1c890	; 0x1c890 <__floatunsisf>
    4dea:	2b 01       	movw	r4, r22
    4dec:	3c 01       	movw	r6, r24
    4dee:	20 e0       	ldi	r18, 0x00	; 0
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	40 e0       	ldi	r20, 0x00	; 0
    4df4:	51 e4       	ldi	r21, 0x41	; 65
    4df6:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    4dfa:	9b 01       	movw	r18, r22
    4dfc:	ac 01       	movw	r20, r24
    4dfe:	60 e8       	ldi	r22, 0x80	; 128
    4e00:	76 e9       	ldi	r23, 0x96	; 150
    4e02:	88 e9       	ldi	r24, 0x98	; 152
    4e04:	9b e4       	ldi	r25, 0x4B	; 75
    4e06:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	40 e8       	ldi	r20, 0x80	; 128
    4e10:	5f e3       	ldi	r21, 0x3F	; 63
    4e12:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__subsf3>
    4e16:	0e 94 61 e5 	call	0x1cac2	; 0x1cac2 <round>
    4e1a:	0e 94 1c e4 	call	0x1c838	; 0x1c838 <__fixunssfsi>
    4e1e:	6b 01       	movw	r12, r22
    4e20:	7c 01       	movw	r14, r24
    4e22:	c1 14       	cp	r12, r1
    4e24:	80 e1       	ldi	r24, 0x10	; 16
    4e26:	d8 06       	cpc	r13, r24
    4e28:	e1 04       	cpc	r14, r1
    4e2a:	f1 04       	cpc	r15, r1
    4e2c:	58 f4       	brcc	.+22     	; 0x4e44 <uart_ubr+0x7e>
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	f5 01       	movw	r30, r10
    4e34:	91 83       	std	Z+1, r25	; 0x01
    4e36:	80 83       	st	Z, r24
    4e38:	81 2c       	mov	r8, r1
    4e3a:	91 2c       	mov	r9, r1
    4e3c:	a1 2c       	mov	r10, r1
    4e3e:	21 e4       	ldi	r18, 0x41	; 65
    4e40:	b2 2e       	mov	r11, r18
    4e42:	31 c0       	rjmp	.+98     	; 0x4ea6 <uart_ubr+0xe0>
    4e44:	f5 01       	movw	r30, r10
    4e46:	11 82       	std	Z+1, r1	; 0x01
    4e48:	10 82       	st	Z, r1
    4e4a:	20 e0       	ldi	r18, 0x00	; 0
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	40 e8       	ldi	r20, 0x80	; 128
    4e50:	51 e4       	ldi	r21, 0x41	; 65
    4e52:	c3 01       	movw	r24, r6
    4e54:	b2 01       	movw	r22, r4
    4e56:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    4e5a:	9b 01       	movw	r18, r22
    4e5c:	ac 01       	movw	r20, r24
    4e5e:	60 e8       	ldi	r22, 0x80	; 128
    4e60:	76 e9       	ldi	r23, 0x96	; 150
    4e62:	88 e9       	ldi	r24, 0x98	; 152
    4e64:	9b e4       	ldi	r25, 0x4B	; 75
    4e66:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	40 e8       	ldi	r20, 0x80	; 128
    4e70:	5f e3       	ldi	r21, 0x3F	; 63
    4e72:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__subsf3>
    4e76:	0e 94 61 e5 	call	0x1cac2	; 0x1cac2 <round>
    4e7a:	0e 94 1c e4 	call	0x1c838	; 0x1c838 <__fixunssfsi>
    4e7e:	6b 01       	movw	r12, r22
    4e80:	7c 01       	movw	r14, r24
    4e82:	81 2c       	mov	r8, r1
    4e84:	91 2c       	mov	r9, r1
    4e86:	90 e8       	ldi	r25, 0x80	; 128
    4e88:	a9 2e       	mov	r10, r25
    4e8a:	91 e4       	ldi	r25, 0x41	; 65
    4e8c:	b9 2e       	mov	r11, r25
    4e8e:	c1 14       	cp	r12, r1
    4e90:	f0 e1       	ldi	r31, 0x10	; 16
    4e92:	df 06       	cpc	r13, r31
    4e94:	e1 04       	cpc	r14, r1
    4e96:	f1 04       	cpc	r15, r1
    4e98:	30 f0       	brcs	.+12     	; 0x4ea6 <uart_ubr+0xe0>
    4e9a:	cc 24       	eor	r12, r12
    4e9c:	ca 94       	dec	r12
    4e9e:	8f e0       	ldi	r24, 0x0F	; 15
    4ea0:	d8 2e       	mov	r13, r24
    4ea2:	e1 2c       	mov	r14, r1
    4ea4:	f1 2c       	mov	r15, r1
    4ea6:	c7 01       	movw	r24, r14
    4ea8:	b6 01       	movw	r22, r12
    4eaa:	6f 5f       	subi	r22, 0xFF	; 255
    4eac:	7f 4f       	sbci	r23, 0xFF	; 255
    4eae:	8f 4f       	sbci	r24, 0xFF	; 255
    4eb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb2:	0e 94 48 e4 	call	0x1c890	; 0x1c890 <__floatunsisf>
    4eb6:	a5 01       	movw	r20, r10
    4eb8:	94 01       	movw	r18, r8
    4eba:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    4ebe:	9b 01       	movw	r18, r22
    4ec0:	ac 01       	movw	r20, r24
    4ec2:	60 e8       	ldi	r22, 0x80	; 128
    4ec4:	76 e9       	ldi	r23, 0x96	; 150
    4ec6:	88 e9       	ldi	r24, 0x98	; 152
    4ec8:	9b e4       	ldi	r25, 0x4B	; 75
    4eca:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    4ece:	0e 94 1c e4 	call	0x1c838	; 0x1c838 <__fixunssfsi>
    4ed2:	68 83       	st	Y, r22
    4ed4:	79 83       	std	Y+1, r23	; 0x01
    4ed6:	8a 83       	std	Y+2, r24	; 0x02
    4ed8:	9b 83       	std	Y+3, r25	; 0x03
    4eda:	c6 01       	movw	r24, r12
    4edc:	df 91       	pop	r29
    4ede:	cf 91       	pop	r28
    4ee0:	ff 90       	pop	r15
    4ee2:	ef 90       	pop	r14
    4ee4:	df 90       	pop	r13
    4ee6:	cf 90       	pop	r12
    4ee8:	bf 90       	pop	r11
    4eea:	af 90       	pop	r10
    4eec:	9f 90       	pop	r9
    4eee:	8f 90       	pop	r8
    4ef0:	7f 90       	pop	r7
    4ef2:	6f 90       	pop	r6
    4ef4:	5f 90       	pop	r5
    4ef6:	4f 90       	pop	r4
    4ef8:	08 95       	ret

00004efa <uart_init>:
    4efa:	a6 e0       	ldi	r26, 0x06	; 6
    4efc:	b0 e0       	ldi	r27, 0x00	; 0
    4efe:	e3 e8       	ldi	r30, 0x83	; 131
    4f00:	f7 e2       	ldi	r31, 0x27	; 39
    4f02:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    4f06:	1e 82       	std	Y+6, r1	; 0x06
    4f08:	1d 82       	std	Y+5, r1	; 0x05
    4f0a:	81 11       	cpse	r24, r1
    4f0c:	36 c0       	rjmp	.+108    	; 0x4f7a <uart_init+0x80>
    4f0e:	cb 01       	movw	r24, r22
    4f10:	ba 01       	movw	r22, r20
    4f12:	9e 01       	movw	r18, r28
    4f14:	2f 5f       	subi	r18, 0xFF	; 255
    4f16:	3f 4f       	sbci	r19, 0xFF	; 255
    4f18:	ae 01       	movw	r20, r28
    4f1a:	4b 5f       	subi	r20, 0xFB	; 251
    4f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f1e:	53 df       	rcall	.-346    	; 0x4dc6 <uart_ubr>
    4f20:	f8 94       	cli
    4f22:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x4>
    4f26:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts+0x3>
    4f2a:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts>
    4f2e:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    4f32:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x2>
    4f36:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x5>
    4f3a:	78 94       	sei
    4f3c:	f8 94       	cli
    4f3e:	58 9a       	sbi	0x0b, 0	; 11
    4f40:	59 9a       	sbi	0x0b, 1	; 11
    4f42:	50 98       	cbi	0x0a, 0	; 10
    4f44:	51 9a       	sbi	0x0a, 1	; 10
    4f46:	28 e9       	ldi	r18, 0x98	; 152
    4f48:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4f4c:	2d 81       	ldd	r18, Y+5	; 0x05
    4f4e:	3e 81       	ldd	r19, Y+6	; 0x06
    4f50:	23 2b       	or	r18, r19
    4f52:	19 f0       	breq	.+6      	; 0x4f5a <uart_init+0x60>
    4f54:	22 e0       	ldi	r18, 0x02	; 2
    4f56:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f5a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4f5e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4f62:	78 94       	sei
    4f64:	66 e7       	ldi	r22, 0x76	; 118
    4f66:	78 e2       	ldi	r23, 0x28	; 40
    4f68:	8b e8       	ldi	r24, 0x8B	; 139
    4f6a:	98 e2       	ldi	r25, 0x28	; 40
    4f6c:	0e 94 e5 76 	call	0xedca	; 0xedca <fdevopen>
    4f70:	69 81       	ldd	r22, Y+1	; 0x01
    4f72:	7a 81       	ldd	r23, Y+2	; 0x02
    4f74:	8b 81       	ldd	r24, Y+3	; 0x03
    4f76:	9c 81       	ldd	r25, Y+4	; 0x04
    4f78:	03 c0       	rjmp	.+6      	; 0x4f80 <uart_init+0x86>
    4f7a:	60 e0       	ldi	r22, 0x00	; 0
    4f7c:	70 e0       	ldi	r23, 0x00	; 0
    4f7e:	cb 01       	movw	r24, r22
    4f80:	26 96       	adiw	r28, 0x06	; 6
    4f82:	e2 e0       	ldi	r30, 0x02	; 2
    4f84:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00004f88 <uart_rx_interrupt>:
    4f88:	cf 93       	push	r28
    4f8a:	df 93       	push	r29
    4f8c:	27 e5       	ldi	r18, 0x57	; 87
    4f8e:	82 9f       	mul	r24, r18
    4f90:	c0 01       	movw	r24, r0
    4f92:	11 24       	eor	r1, r1
    4f94:	fc 01       	movw	r30, r24
    4f96:	e1 51       	subi	r30, 0x11	; 17
    4f98:	f6 4e       	sbci	r31, 0xE6	; 230
    4f9a:	83 81       	ldd	r24, Z+3	; 0x03
    4f9c:	94 81       	ldd	r25, Z+4	; 0x04
    4f9e:	80 35       	cpi	r24, 0x50	; 80
    4fa0:	91 05       	cpc	r25, r1
    4fa2:	84 f4       	brge	.+32     	; 0x4fc4 <uart_rx_interrupt+0x3c>
    4fa4:	30 81       	ld	r19, Z
    4fa6:	21 e0       	ldi	r18, 0x01	; 1
    4fa8:	23 0f       	add	r18, r19
    4faa:	20 83       	st	Z, r18
    4fac:	ef 01       	movw	r28, r30
    4fae:	c3 0f       	add	r28, r19
    4fb0:	d1 1d       	adc	r29, r1
    4fb2:	6f 77       	andi	r22, 0x7F	; 127
    4fb4:	6e 83       	std	Y+6, r22	; 0x06
    4fb6:	01 96       	adiw	r24, 0x01	; 1
    4fb8:	94 83       	std	Z+4, r25	; 0x04
    4fba:	83 83       	std	Z+3, r24	; 0x03
    4fbc:	20 35       	cpi	r18, 0x50	; 80
    4fbe:	28 f0       	brcs	.+10     	; 0x4fca <uart_rx_interrupt+0x42>
    4fc0:	10 82       	st	Z, r1
    4fc2:	03 c0       	rjmp	.+6      	; 0x4fca <uart_rx_interrupt+0x42>
    4fc4:	85 81       	ldd	r24, Z+5	; 0x05
    4fc6:	81 60       	ori	r24, 0x01	; 1
    4fc8:	85 83       	std	Z+5, r24	; 0x05
    4fca:	df 91       	pop	r29
    4fcc:	cf 91       	pop	r28
    4fce:	08 95       	ret

00004fd0 <__vector_20>:
    4fd0:	1f 92       	push	r1
    4fd2:	0f 92       	push	r0
    4fd4:	0f b6       	in	r0, 0x3f	; 63
    4fd6:	0f 92       	push	r0
    4fd8:	11 24       	eor	r1, r1
    4fda:	0b b6       	in	r0, 0x3b	; 59
    4fdc:	0f 92       	push	r0
    4fde:	2f 93       	push	r18
    4fe0:	3f 93       	push	r19
    4fe2:	4f 93       	push	r20
    4fe4:	5f 93       	push	r21
    4fe6:	6f 93       	push	r22
    4fe8:	7f 93       	push	r23
    4fea:	8f 93       	push	r24
    4fec:	9f 93       	push	r25
    4fee:	af 93       	push	r26
    4ff0:	bf 93       	push	r27
    4ff2:	ef 93       	push	r30
    4ff4:	ff 93       	push	r31
    4ff6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	c5 df       	rcall	.-118    	; 0x4f88 <uart_rx_interrupt>
    4ffe:	ff 91       	pop	r31
    5000:	ef 91       	pop	r30
    5002:	bf 91       	pop	r27
    5004:	af 91       	pop	r26
    5006:	9f 91       	pop	r25
    5008:	8f 91       	pop	r24
    500a:	7f 91       	pop	r23
    500c:	6f 91       	pop	r22
    500e:	5f 91       	pop	r21
    5010:	4f 91       	pop	r20
    5012:	3f 91       	pop	r19
    5014:	2f 91       	pop	r18
    5016:	0f 90       	pop	r0
    5018:	0b be       	out	0x3b, r0	; 59
    501a:	0f 90       	pop	r0
    501c:	0f be       	out	0x3f, r0	; 63
    501e:	0f 90       	pop	r0
    5020:	1f 90       	pop	r1
    5022:	18 95       	reti

00005024 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5024:	81 11       	cpse	r24, r1
    5026:	07 c0       	rjmp	.+14     	; 0x5036 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5028:	f8 94       	cli

    count = uarts[uart].rx_count;
    502a:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <uarts+0x3>
    502e:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <uarts+0x4>

    sei();
    5032:	78 94       	sei

    return (count );
    5034:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5036:	8f ef       	ldi	r24, 0xFF	; 255
    5038:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    503a:	08 95       	ret

0000503c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    503c:	81 11       	cpse	r24, r1
    503e:	21 c0       	rjmp	.+66     	; 0x5082 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	f0 df       	rcall	.-32     	; 0x5024 <uart_rx_count>
    5044:	18 16       	cp	r1, r24
    5046:	19 06       	cpc	r1, r25
    5048:	dc f7       	brge	.-10     	; 0x5040 <uart_get_tail+0x4>
        ;

    cli();
    504a:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    504c:	e0 91 f0 19 	lds	r30, 0x19F0	; 0x8019f0 <uarts+0x1>
    5050:	91 e0       	ldi	r25, 0x01	; 1
    5052:	9e 0f       	add	r25, r30
    5054:	90 93 f0 19 	sts	0x19F0, r25	; 0x8019f0 <uarts+0x1>
    5058:	f0 e0       	ldi	r31, 0x00	; 0
    505a:	e1 51       	subi	r30, 0x11	; 17
    505c:	f6 4e       	sbci	r31, 0xE6	; 230
    505e:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5060:	90 35       	cpi	r25, 0x50	; 80
    5062:	10 f0       	brcs	.+4      	; 0x5068 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5064:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x1>
    uarts[uart].rx_count--;
    5068:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <uarts+0x3>
    506c:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <uarts+0x4>
    5070:	21 50       	subi	r18, 0x01	; 1
    5072:	31 09       	sbc	r19, r1
    5074:	30 93 f3 19 	sts	0x19F3, r19	; 0x8019f3 <uarts+0x4>
    5078:	20 93 f2 19 	sts	0x19F2, r18	; 0x8019f2 <uarts+0x3>
    sei();
    507c:	78 94       	sei

    return (c & 0xff);
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5086:	08 95       	ret

00005088 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5088:	d9 df       	rcall	.-78     	; 0x503c <uart_get_tail>
}
    508a:	99 27       	eor	r25, r25
    508c:	08 95       	ret

0000508e <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    508e:	61 11       	cpse	r22, r1
    5090:	09 c0       	rjmp	.+18     	; 0x50a4 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5092:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5096:	25 ff       	sbrs	r18, 5
    5098:	fc cf       	rjmp	.-8      	; 0x5092 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    509a:	28 2f       	mov	r18, r24
    509c:	2f 77       	andi	r18, 0x7F	; 127
    509e:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    50a2:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    50a4:	61 30       	cpi	r22, 0x01	; 1
    50a6:	49 f4       	brne	.+18     	; 0x50ba <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    50a8:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    50ac:	25 ff       	sbrs	r18, 5
    50ae:	fc cf       	rjmp	.-8      	; 0x50a8 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    50b0:	28 2f       	mov	r18, r24
    50b2:	2f 77       	andi	r18, 0x7F	; 127
    50b4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    50b8:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    50ba:	8f ef       	ldi	r24, 0xFF	; 255
    50bc:	9f ef       	ldi	r25, 0xFF	; 255
}
    50be:	08 95       	ret

000050c0 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    50c0:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    50c2:	81 11       	cpse	r24, r1
    50c4:	0f c0       	rjmp	.+30     	; 0x50e4 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    50c6:	e0 df       	rcall	.-64     	; 0x5088 <uart_rx_byte>
    50c8:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    50ca:	60 e0       	ldi	r22, 0x00	; 0
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	df df       	rcall	.-66     	; 0x508e <uart_tx_byte>
    if(c == '\r')
    50d0:	cd 30       	cpi	r28, 0x0D	; 13
    50d2:	29 f4       	brne	.+10     	; 0x50de <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    50d4:	60 e0       	ldi	r22, 0x00	; 0
    50d6:	8a e0       	ldi	r24, 0x0A	; 10
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	d9 df       	rcall	.-78     	; 0x508e <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    50dc:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    50de:	8c 2f       	mov	r24, r28
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	02 c0       	rjmp	.+4      	; 0x50e8 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    50e4:	8f ef       	ldi	r24, 0xFF	; 255
    50e6:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    50e8:	cf 91       	pop	r28
    50ea:	08 95       	ret

000050ec <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	e8 cf       	rjmp	.-48     	; 0x50c0 <uart_getchar>
}
    50f0:	08 95       	ret

000050f2 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    50f2:	1f 93       	push	r17
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	ec 01       	movw	r28, r24
    50fa:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    50fc:	c8 df       	rcall	.-112    	; 0x508e <uart_tx_byte>

    if( c == '\n' )
    50fe:	ca 30       	cpi	r28, 0x0A	; 10
    5100:	d1 05       	cpc	r29, r1
    5102:	21 f4       	brne	.+8      	; 0x510c <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    5104:	61 2f       	mov	r22, r17
    5106:	8d e0       	ldi	r24, 0x0D	; 13
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	c1 df       	rcall	.-126    	; 0x508e <uart_tx_byte>

    return(c);
}
    510c:	ce 01       	movw	r24, r28
    510e:	df 91       	pop	r29
    5110:	cf 91       	pop	r28
    5112:	1f 91       	pop	r17
    5114:	08 95       	ret

00005116 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    5116:	cf 93       	push	r28
    5118:	df 93       	push	r29
    511a:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    511c:	60 e0       	ldi	r22, 0x00	; 0
    511e:	70 e0       	ldi	r23, 0x00	; 0
    5120:	e8 df       	rcall	.-48     	; 0x50f2 <uart_putchar>
    return(c);
}
    5122:	ce 01       	movw	r24, r28
    5124:	df 91       	pop	r29
    5126:	cf 91       	pop	r28
    5128:	08 95       	ret

0000512a <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    512a:	7c cf       	rjmp	.-264    	; 0x5024 <uart_rx_count>
}
    512c:	08 95       	ret

0000512e <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    512e:	cf 92       	push	r12
    5130:	df 92       	push	r13
    5132:	ef 92       	push	r14
    5134:	ff 92       	push	r15
    5136:	6b 01       	movw	r12, r22
    5138:	7c 01       	movw	r14, r24
    513a:	80 91 51 17 	lds	r24, 0x1751	; 0x801751 <SPI0_Speed_value>
    513e:	90 91 52 17 	lds	r25, 0x1752	; 0x801752 <SPI0_Speed_value+0x1>
    5142:	a0 91 53 17 	lds	r26, 0x1753	; 0x801753 <SPI0_Speed_value+0x2>
    5146:	b0 91 54 17 	lds	r27, 0x1754	; 0x801754 <SPI0_Speed_value+0x3>
    514a:	8c 15       	cp	r24, r12
    514c:	9d 05       	cpc	r25, r13
    514e:	ae 05       	cpc	r26, r14
    5150:	bf 05       	cpc	r27, r15
    5152:	09 f4       	brne	.+2      	; 0x5156 <SPI0_Speed+0x28>
    5154:	4e c0       	rjmp	.+156    	; 0x51f2 <SPI0_Speed+0xc4>
    5156:	60 e0       	ldi	r22, 0x00	; 0
    5158:	7d e2       	ldi	r23, 0x2D	; 45
    515a:	81 e3       	ldi	r24, 0x31	; 49
    515c:	91 e0       	ldi	r25, 0x01	; 1
    515e:	a7 01       	movw	r20, r14
    5160:	96 01       	movw	r18, r12
    5162:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    5166:	20 38       	cpi	r18, 0x80	; 128
    5168:	31 05       	cpc	r19, r1
    516a:	41 05       	cpc	r20, r1
    516c:	51 05       	cpc	r21, r1
    516e:	28 f4       	brcc	.+10     	; 0x517a <SPI0_Speed+0x4c>
    5170:	20 34       	cpi	r18, 0x40	; 64
    5172:	31 05       	cpc	r19, r1
    5174:	41 05       	cpc	r20, r1
    5176:	51 05       	cpc	r21, r1
    5178:	30 f0       	brcs	.+12     	; 0x5186 <SPI0_Speed+0x58>
    517a:	8d b5       	in	r24, 0x2d	; 45
    517c:	8e 7f       	andi	r24, 0xFE	; 254
    517e:	8d bd       	out	0x2d, r24	; 45
    5180:	8c b5       	in	r24, 0x2c	; 44
    5182:	82 60       	ori	r24, 0x02	; 2
    5184:	1b c0       	rjmp	.+54     	; 0x51bc <SPI0_Speed+0x8e>
    5186:	8d b5       	in	r24, 0x2d	; 45
    5188:	20 32       	cpi	r18, 0x20	; 32
    518a:	31 05       	cpc	r19, r1
    518c:	41 05       	cpc	r20, r1
    518e:	51 05       	cpc	r21, r1
    5190:	28 f0       	brcs	.+10     	; 0x519c <SPI0_Speed+0x6e>
    5192:	81 60       	ori	r24, 0x01	; 1
    5194:	8d bd       	out	0x2d, r24	; 45
    5196:	8c b5       	in	r24, 0x2c	; 44
    5198:	82 60       	ori	r24, 0x02	; 2
    519a:	1f c0       	rjmp	.+62     	; 0x51da <SPI0_Speed+0xac>
    519c:	20 31       	cpi	r18, 0x10	; 16
    519e:	31 05       	cpc	r19, r1
    51a0:	41 05       	cpc	r20, r1
    51a2:	51 05       	cpc	r21, r1
    51a4:	10 f0       	brcs	.+4      	; 0x51aa <SPI0_Speed+0x7c>
    51a6:	8e 7f       	andi	r24, 0xFE	; 254
    51a8:	06 c0       	rjmp	.+12     	; 0x51b6 <SPI0_Speed+0x88>
    51aa:	28 30       	cpi	r18, 0x08	; 8
    51ac:	31 05       	cpc	r19, r1
    51ae:	41 05       	cpc	r20, r1
    51b0:	51 05       	cpc	r21, r1
    51b2:	40 f0       	brcs	.+16     	; 0x51c4 <SPI0_Speed+0x96>
    51b4:	81 60       	ori	r24, 0x01	; 1
    51b6:	8d bd       	out	0x2d, r24	; 45
    51b8:	8c b5       	in	r24, 0x2c	; 44
    51ba:	8d 7f       	andi	r24, 0xFD	; 253
    51bc:	8c bd       	out	0x2c, r24	; 44
    51be:	8c b5       	in	r24, 0x2c	; 44
    51c0:	81 60       	ori	r24, 0x01	; 1
    51c2:	0e c0       	rjmp	.+28     	; 0x51e0 <SPI0_Speed+0xb2>
    51c4:	24 30       	cpi	r18, 0x04	; 4
    51c6:	31 05       	cpc	r19, r1
    51c8:	41 05       	cpc	r20, r1
    51ca:	51 05       	cpc	r21, r1
    51cc:	10 f0       	brcs	.+4      	; 0x51d2 <SPI0_Speed+0xa4>
    51ce:	8e 7f       	andi	r24, 0xFE	; 254
    51d0:	01 c0       	rjmp	.+2      	; 0x51d4 <SPI0_Speed+0xa6>
    51d2:	81 60       	ori	r24, 0x01	; 1
    51d4:	8d bd       	out	0x2d, r24	; 45
    51d6:	8c b5       	in	r24, 0x2c	; 44
    51d8:	8d 7f       	andi	r24, 0xFD	; 253
    51da:	8c bd       	out	0x2c, r24	; 44
    51dc:	8c b5       	in	r24, 0x2c	; 44
    51de:	8e 7f       	andi	r24, 0xFE	; 254
    51e0:	8c bd       	out	0x2c, r24	; 44
    51e2:	c0 92 51 17 	sts	0x1751, r12	; 0x801751 <SPI0_Speed_value>
    51e6:	d0 92 52 17 	sts	0x1752, r13	; 0x801752 <SPI0_Speed_value+0x1>
    51ea:	e0 92 53 17 	sts	0x1753, r14	; 0x801753 <SPI0_Speed_value+0x2>
    51ee:	f0 92 54 17 	sts	0x1754, r15	; 0x801754 <SPI0_Speed_value+0x3>
    51f2:	ff 90       	pop	r15
    51f4:	ef 90       	pop	r14
    51f6:	df 90       	pop	r13
    51f8:	cf 90       	pop	r12
    51fa:	08 95       	ret

000051fc <SPI0_Mode>:
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	00 d0       	rcall	.+0      	; 0x5202 <SPI0_Mode+0x6>
    5202:	00 d0       	rcall	.+0      	; 0x5204 <SPI0_Mode+0x8>
    5204:	1f 92       	push	r1
    5206:	ec 01       	movw	r28, r24
    5208:	81 30       	cpi	r24, 0x01	; 1
    520a:	91 05       	cpc	r25, r1
    520c:	71 f0       	breq	.+28     	; 0x522a <SPI0_Mode+0x2e>
    520e:	2c f4       	brge	.+10     	; 0x521a <SPI0_Mode+0x1e>
    5210:	89 2b       	or	r24, r25
    5212:	c1 f4       	brne	.+48     	; 0x5244 <SPI0_Mode+0x48>
    5214:	8c b5       	in	r24, 0x2c	; 44
    5216:	87 7f       	andi	r24, 0xF7	; 247
    5218:	11 c0       	rjmp	.+34     	; 0x523c <SPI0_Mode+0x40>
    521a:	82 30       	cpi	r24, 0x02	; 2
    521c:	91 05       	cpc	r25, r1
    521e:	61 f0       	breq	.+24     	; 0x5238 <SPI0_Mode+0x3c>
    5220:	03 97       	sbiw	r24, 0x03	; 3
    5222:	81 f4       	brne	.+32     	; 0x5244 <SPI0_Mode+0x48>
    5224:	8c b5       	in	r24, 0x2c	; 44
    5226:	88 60       	ori	r24, 0x08	; 8
    5228:	02 c0       	rjmp	.+4      	; 0x522e <SPI0_Mode+0x32>
    522a:	8c b5       	in	r24, 0x2c	; 44
    522c:	87 7f       	andi	r24, 0xF7	; 247
    522e:	8c bd       	out	0x2c, r24	; 44
    5230:	8c b5       	in	r24, 0x2c	; 44
    5232:	84 60       	ori	r24, 0x04	; 4
    5234:	8c bd       	out	0x2c, r24	; 44
    5236:	12 c0       	rjmp	.+36     	; 0x525c <SPI0_Mode+0x60>
    5238:	8c b5       	in	r24, 0x2c	; 44
    523a:	88 60       	ori	r24, 0x08	; 8
    523c:	8c bd       	out	0x2c, r24	; 44
    523e:	8c b5       	in	r24, 0x2c	; 44
    5240:	8b 7f       	andi	r24, 0xFB	; 251
    5242:	f8 cf       	rjmp	.-16     	; 0x5234 <SPI0_Mode+0x38>
    5244:	ed b7       	in	r30, 0x3d	; 61
    5246:	fe b7       	in	r31, 0x3e	; 62
    5248:	d5 83       	std	Z+5, r29	; 0x05
    524a:	c4 83       	std	Z+4, r28	; 0x04
    524c:	84 e1       	ldi	r24, 0x14	; 20
    524e:	93 e0       	ldi	r25, 0x03	; 3
    5250:	a0 e0       	ldi	r26, 0x00	; 0
    5252:	81 83       	std	Z+1, r24	; 0x01
    5254:	92 83       	std	Z+2, r25	; 0x02
    5256:	a3 83       	std	Z+3, r26	; 0x03
    5258:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    525c:	d0 93 50 17 	sts	0x1750, r29	; 0x801750 <SPI0_Mode_value+0x1>
    5260:	c0 93 4f 17 	sts	0x174F, r28	; 0x80174f <SPI0_Mode_value>
    5264:	cd b7       	in	r28, 0x3d	; 61
    5266:	de b7       	in	r29, 0x3e	; 62
    5268:	25 96       	adiw	r28, 0x05	; 5
    526a:	e2 e0       	ldi	r30, 0x02	; 2
    526c:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00005270 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5270:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5272:	0d b4       	in	r0, 0x2d	; 45
    5274:	07 fe       	sbrs	r0, 7
    5276:	fd cf       	rjmp	.-6      	; 0x5272 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5278:	8e b5       	in	r24, 0x2e	; 46
}
    527a:	08 95       	ret

0000527c <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    527c:	cf 92       	push	r12
    527e:	df 92       	push	r13
    5280:	ef 92       	push	r14
    5282:	ff 92       	push	r15
    5284:	cf 93       	push	r28
    5286:	df 93       	push	r29
    5288:	1f 92       	push	r1
    528a:	cd b7       	in	r28, 0x3d	; 61
    528c:	de b7       	in	r29, 0x3e	; 62
    528e:	6b 01       	movw	r12, r22
    5290:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5292:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5294:	2f 9a       	sbi	0x05, 7	; 5
    5296:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5298:	2d 9a       	sbi	0x05, 5	; 5
    529a:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    529c:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    529e:	2c 98       	cbi	0x05, 4	; 5
    52a0:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    52a2:	8c b5       	in	r24, 0x2c	; 44
    52a4:	80 61       	ori	r24, 0x10	; 16
    52a6:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    52a8:	8c b5       	in	r24, 0x2c	; 44
    52aa:	80 64       	ori	r24, 0x40	; 64
    52ac:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    52ae:	8d b5       	in	r24, 0x2d	; 45
    52b0:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    52b2:	8e b5       	in	r24, 0x2e	; 46
    52b4:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	a0 df       	rcall	.-192    	; 0x51fc <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    52bc:	c7 01       	movw	r24, r14
    52be:	b6 01       	movw	r22, r12
    52c0:	36 df       	rcall	.-404    	; 0x512e <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    52c2:	8f ef       	ldi	r24, 0xFF	; 255
    52c4:	d5 df       	rcall	.-86     	; 0x5270 <SPI0_TXRX_Byte>
    52c6:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    52c8:	df 91       	pop	r29
    52ca:	cf 91       	pop	r28
    52cc:	ff 90       	pop	r15
    52ce:	ef 90       	pop	r14
    52d0:	df 90       	pop	r13
    52d2:	cf 90       	pop	r12
    52d4:	08 95       	ret

000052d6 <SPI0_TX>:
    52d6:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    52d8:	1f 93       	push	r17
    52da:	cf 93       	push	r28
    52dc:	df 93       	push	r29
    52de:	8c 01       	movw	r16, r24
    52e0:	eb 01       	movw	r28, r22

    while(count > 0)
    52e2:	1c 16       	cp	r1, r28
    52e4:	1d 06       	cpc	r1, r29
    52e6:	34 f4       	brge	.+12     	; 0x52f4 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    52e8:	f8 01       	movw	r30, r16
    52ea:	81 91       	ld	r24, Z+
    52ec:	8f 01       	movw	r16, r30
    52ee:	c0 df       	rcall	.-128    	; 0x5270 <SPI0_TXRX_Byte>
        ++data;
        --count;
    52f0:	21 97       	sbiw	r28, 0x01	; 1
    52f2:	f7 cf       	rjmp	.-18     	; 0x52e2 <SPI0_TX+0xc>
    }
}
    52f4:	df 91       	pop	r29
    52f6:	cf 91       	pop	r28
    52f8:	1f 91       	pop	r17
    52fa:	0f 91       	pop	r16
    52fc:	08 95       	ret

000052fe <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    52fe:	0f 93       	push	r16
    5300:	1f 93       	push	r17
    5302:	cf 93       	push	r28
    5304:	df 93       	push	r29
    5306:	8c 01       	movw	r16, r24
    5308:	eb 01       	movw	r28, r22

    while(count > 0)
    530a:	1c 16       	cp	r1, r28
    530c:	1d 06       	cpc	r1, r29
    530e:	44 f4       	brge	.+16     	; 0x5320 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5310:	f8 01       	movw	r30, r16
    5312:	80 81       	ld	r24, Z
    5314:	ad df       	rcall	.-166    	; 0x5270 <SPI0_TXRX_Byte>
    5316:	f8 01       	movw	r30, r16
    5318:	81 93       	st	Z+, r24
    531a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    531c:	21 97       	sbiw	r28, 0x01	; 1
    531e:	f5 cf       	rjmp	.-22     	; 0x530a <SPI0_TXRX+0xc>
    }
}
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	1f 91       	pop	r17
    5326:	0f 91       	pop	r16
    5328:	08 95       	ret

0000532a <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    532a:	0f 93       	push	r16
    532c:	1f 93       	push	r17
    532e:	cf 93       	push	r28
    5330:	df 93       	push	r29
    5332:	8c 01       	movw	r16, r24
    5334:	eb 01       	movw	r28, r22

    while(count > 0)
    5336:	1c 16       	cp	r1, r28
    5338:	1d 06       	cpc	r1, r29
    533a:	3c f4       	brge	.+14     	; 0x534a <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    533c:	8f ef       	ldi	r24, 0xFF	; 255
    533e:	98 df       	rcall	.-208    	; 0x5270 <SPI0_TXRX_Byte>
    5340:	f8 01       	movw	r30, r16
    5342:	81 93       	st	Z+, r24
    5344:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5346:	21 97       	sbiw	r28, 0x01	; 1
    5348:	f6 cf       	rjmp	.-20     	; 0x5336 <SPI0_RX+0xc>
    }
}
    534a:	df 91       	pop	r29
    534c:	cf 91       	pop	r28
    534e:	1f 91       	pop	r17
    5350:	0f 91       	pop	r16
    5352:	08 95       	ret

00005354 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5354:	2f b7       	in	r18, 0x3f	; 63
    5356:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    535a:	81 11       	cpse	r24, r1
    535c:	04 c0       	rjmp	.+8      	; 0x5366 <i2c_timer+0x12>
    535e:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    5362:	81 11       	cpse	r24, r1
    5364:	0b c0       	rjmp	.+22     	; 0x537c <i2c_timer+0x28>
    5366:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x4>
    536a:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x5>
    536e:	00 97       	sbiw	r24, 0x00	; 0
    5370:	29 f0       	breq	.+10     	; 0x537c <i2c_timer+0x28>
    5372:	01 97       	sbiw	r24, 0x01	; 1
    5374:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <i2c+0x5>
    5378:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <i2c+0x4>
    537c:	2f bf       	out	0x3f, r18	; 63
    537e:	08 95       	ret

00005380 <i2c_check_op>:
    5380:	ad b7       	in	r26, 0x3d	; 61
    5382:	be b7       	in	r27, 0x3e	; 62
    5384:	17 97       	sbiw	r26, 0x07	; 7
    5386:	0f b6       	in	r0, 0x3f	; 63
    5388:	f8 94       	cli
    538a:	be bf       	out	0x3e, r27	; 62
    538c:	0f be       	out	0x3f, r0	; 63
    538e:	ad bf       	out	0x3d, r26	; 61
    5390:	28 2f       	mov	r18, r24
    5392:	08 2e       	mov	r0, r24
    5394:	00 0c       	add	r0, r0
    5396:	33 0b       	sbc	r19, r19
    5398:	80 31       	cpi	r24, 0x10	; 16
    539a:	88 f0       	brcs	.+34     	; 0x53be <i2c_check_op+0x3e>
    539c:	80 e1       	ldi	r24, 0x10	; 16
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	ed b7       	in	r30, 0x3d	; 61
    53a2:	fe b7       	in	r31, 0x3e	; 62
    53a4:	97 83       	std	Z+7, r25	; 0x07
    53a6:	86 83       	std	Z+6, r24	; 0x06
    53a8:	35 83       	std	Z+5, r19	; 0x05
    53aa:	24 83       	std	Z+4, r18	; 0x04
    53ac:	89 e2       	ldi	r24, 0x29	; 41
    53ae:	94 e0       	ldi	r25, 0x04	; 4
    53b0:	a0 e0       	ldi	r26, 0x00	; 0
    53b2:	81 83       	std	Z+1, r24	; 0x01
    53b4:	92 83       	std	Z+2, r25	; 0x02
    53b6:	a3 83       	std	Z+3, r26	; 0x03
    53b8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    53bc:	24 c0       	rjmp	.+72     	; 0x5406 <i2c_check_op+0x86>
    53be:	f9 01       	movw	r30, r18
    53c0:	ee 0f       	add	r30, r30
    53c2:	ff 1f       	adc	r31, r31
    53c4:	ea 5a       	subi	r30, 0xAA	; 170
    53c6:	f8 4e       	sbci	r31, 0xE8	; 232
    53c8:	01 90       	ld	r0, Z+
    53ca:	f0 81       	ld	r31, Z
    53cc:	e0 2d       	mov	r30, r0
    53ce:	30 97       	sbiw	r30, 0x00	; 0
    53d0:	d1 f0       	breq	.+52     	; 0x5406 <i2c_check_op+0x86>
    53d2:	80 85       	ldd	r24, Z+8	; 0x08
    53d4:	91 85       	ldd	r25, Z+9	; 0x09
    53d6:	89 2b       	or	r24, r25
    53d8:	39 f4       	brne	.+14     	; 0x53e8 <i2c_check_op+0x68>
    53da:	ed b7       	in	r30, 0x3d	; 61
    53dc:	fe b7       	in	r31, 0x3e	; 62
    53de:	35 83       	std	Z+5, r19	; 0x05
    53e0:	24 83       	std	Z+4, r18	; 0x04
    53e2:	80 e1       	ldi	r24, 0x10	; 16
    53e4:	94 e0       	ldi	r25, 0x04	; 4
    53e6:	09 c0       	rjmp	.+18     	; 0x53fa <i2c_check_op+0x7a>
    53e8:	86 81       	ldd	r24, Z+6	; 0x06
    53ea:	81 11       	cpse	r24, r1
    53ec:	0e c0       	rjmp	.+28     	; 0x540a <i2c_check_op+0x8a>
    53ee:	ed b7       	in	r30, 0x3d	; 61
    53f0:	fe b7       	in	r31, 0x3e	; 62
    53f2:	35 83       	std	Z+5, r19	; 0x05
    53f4:	24 83       	std	Z+4, r18	; 0x04
    53f6:	8a ef       	ldi	r24, 0xFA	; 250
    53f8:	93 e0       	ldi	r25, 0x03	; 3
    53fa:	a0 e0       	ldi	r26, 0x00	; 0
    53fc:	81 83       	std	Z+1, r24	; 0x01
    53fe:	92 83       	std	Z+2, r25	; 0x02
    5400:	a3 83       	std	Z+3, r26	; 0x03
    5402:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5406:	80 e0       	ldi	r24, 0x00	; 0
    5408:	01 c0       	rjmp	.+2      	; 0x540c <i2c_check_op+0x8c>
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	ad b7       	in	r26, 0x3d	; 61
    540e:	be b7       	in	r27, 0x3e	; 62
    5410:	17 96       	adiw	r26, 0x07	; 7
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	f8 94       	cli
    5416:	be bf       	out	0x3e, r27	; 62
    5418:	0f be       	out	0x3f, r0	; 63
    541a:	ad bf       	out	0x3d, r26	; 61
    541c:	08 95       	ret

0000541e <i2c_task_init>:
    541e:	8f b7       	in	r24, 0x3f	; 63
    5420:	f8 94       	cli
    5422:	e6 e5       	ldi	r30, 0x56	; 86
    5424:	f7 e1       	ldi	r31, 0x17	; 23
    5426:	11 92       	st	Z+, r1
    5428:	11 92       	st	Z+, r1
    542a:	97 e1       	ldi	r25, 0x17	; 23
    542c:	e6 37       	cpi	r30, 0x76	; 118
    542e:	f9 07       	cpc	r31, r25
    5430:	d1 f7       	brne	.-12     	; 0x5426 <i2c_task_init+0x8>
    5432:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    5436:	91 e0       	ldi	r25, 0x01	; 1
    5438:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <i2c_task+0x2>
    543c:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>
    5440:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
    5444:	8f bf       	out	0x3f, r24	; 63
    5446:	08 95       	ret

00005448 <i2c_task_op_add>:
    5448:	ef 92       	push	r14
    544a:	ff 92       	push	r15
    544c:	0f 93       	push	r16
    544e:	1f 93       	push	r17
    5450:	cf 93       	push	r28
    5452:	df 93       	push	r29
    5454:	d8 2f       	mov	r29, r24
    5456:	c6 2f       	mov	r28, r22
    5458:	7a 01       	movw	r14, r20
    545a:	02 2f       	mov	r16, r18
    545c:	1f b7       	in	r17, 0x3f	; 63
    545e:	6a e0       	ldi	r22, 0x0A	; 10
    5460:	70 e0       	ldi	r23, 0x00	; 0
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	90 e0       	ldi	r25, 0x00	; 0
    5466:	a8 db       	rcall	.-2224   	; 0x4bb8 <safecalloc>
    5468:	fc 01       	movw	r30, r24
    546a:	89 2b       	or	r24, r25
    546c:	89 f0       	breq	.+34     	; 0x5490 <i2c_task_op_add+0x48>
    546e:	f8 94       	cli
    5470:	11 82       	std	Z+1, r1	; 0x01
    5472:	12 82       	std	Z+2, r1	; 0x02
    5474:	dd 0f       	add	r29, r29
    5476:	c1 70       	andi	r28, 0x01	; 1
    5478:	cd 2b       	or	r28, r29
    547a:	c0 83       	st	Z, r28
    547c:	8a e0       	ldi	r24, 0x0A	; 10
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	95 83       	std	Z+5, r25	; 0x05
    5482:	84 83       	std	Z+4, r24	; 0x04
    5484:	13 82       	std	Z+3, r1	; 0x03
    5486:	06 83       	std	Z+6, r16	; 0x06
    5488:	17 82       	std	Z+7, r1	; 0x07
    548a:	f1 86       	std	Z+9, r15	; 0x09
    548c:	e0 86       	std	Z+8, r14	; 0x08
    548e:	1f bf       	out	0x3f, r17	; 63
    5490:	cf 01       	movw	r24, r30
    5492:	cd b7       	in	r28, 0x3d	; 61
    5494:	de b7       	in	r29, 0x3e	; 62
    5496:	e6 e0       	ldi	r30, 0x06	; 6
    5498:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0000549c <i2c_init>:
    549c:	cf 93       	push	r28
    549e:	00 d0       	rcall	.+0      	; 0x54a0 <i2c_init+0x4>
    54a0:	1f 92       	push	r1
    54a2:	9b 01       	movw	r18, r22
    54a4:	ac 01       	movw	r20, r24
    54a6:	cf b7       	in	r28, 0x3f	; 63
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	7d e2       	ldi	r23, 0x2D	; 45
    54ac:	81 e3       	ldi	r24, 0x31	; 49
    54ae:	91 e0       	ldi	r25, 0x01	; 1
    54b0:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    54b4:	da 01       	movw	r26, r20
    54b6:	c9 01       	movw	r24, r18
    54b8:	40 97       	sbiw	r24, 0x10	; 16
    54ba:	a1 09       	sbc	r26, r1
    54bc:	b1 09       	sbc	r27, r1
    54be:	ac 01       	movw	r20, r24
    54c0:	bd 01       	movw	r22, r26
    54c2:	76 95       	lsr	r23
    54c4:	67 95       	ror	r22
    54c6:	57 95       	ror	r21
    54c8:	47 95       	ror	r20
    54ca:	ca 01       	movw	r24, r20
    54cc:	88 27       	eor	r24, r24
    54ce:	89 2b       	or	r24, r25
    54d0:	59 f0       	breq	.+22     	; 0x54e8 <i2c_init+0x4c>
    54d2:	8e ed       	ldi	r24, 0xDE	; 222
    54d4:	93 e0       	ldi	r25, 0x03	; 3
    54d6:	a0 e0       	ldi	r26, 0x00	; 0
    54d8:	ed b7       	in	r30, 0x3d	; 61
    54da:	fe b7       	in	r31, 0x3e	; 62
    54dc:	81 83       	std	Z+1, r24	; 0x01
    54de:	92 83       	std	Z+2, r25	; 0x02
    54e0:	a3 83       	std	Z+3, r26	; 0x03
    54e2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    54e6:	3a c0       	rjmp	.+116    	; 0x555c <i2c_init+0xc0>
    54e8:	f8 94       	cli
    54ea:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    54ee:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
    54f8:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
    54fc:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
    5500:	40 9a       	sbi	0x08, 0	; 8
    5502:	41 9a       	sbi	0x08, 1	; 8
    5504:	84 e8       	ldi	r24, 0x84	; 132
    5506:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    550a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    550e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5512:	8c 7f       	andi	r24, 0xFC	; 252
    5514:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5518:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <i2c_init_status>
    551c:	81 11       	cpse	r24, r1
    551e:	1d c0       	rjmp	.+58     	; 0x555a <i2c_init+0xbe>
    5520:	e6 e5       	ldi	r30, 0x56	; 86
    5522:	f7 e1       	ldi	r31, 0x17	; 23
    5524:	11 92       	st	Z+, r1
    5526:	11 92       	st	Z+, r1
    5528:	27 e1       	ldi	r18, 0x17	; 23
    552a:	e6 37       	cpi	r30, 0x76	; 118
    552c:	f2 07       	cpc	r31, r18
    552e:	d1 f7       	brne	.-12     	; 0x5524 <i2c_init+0x88>
    5530:	61 e0       	ldi	r22, 0x01	; 1
    5532:	70 e0       	ldi	r23, 0x00	; 0
    5534:	8a ea       	ldi	r24, 0xAA	; 170
    5536:	99 e2       	ldi	r25, 0x29	; 41
    5538:	0e 94 de 32 	call	0x65bc	; 0x65bc <set_timers>
    553c:	01 96       	adiw	r24, 0x01	; 1
    553e:	51 f4       	brne	.+20     	; 0x5554 <i2c_init+0xb8>
    5540:	87 ec       	ldi	r24, 0xC7	; 199
    5542:	93 e0       	ldi	r25, 0x03	; 3
    5544:	a0 e0       	ldi	r26, 0x00	; 0
    5546:	ed b7       	in	r30, 0x3d	; 61
    5548:	fe b7       	in	r31, 0x3e	; 62
    554a:	81 83       	std	Z+1, r24	; 0x01
    554c:	92 83       	std	Z+2, r25	; 0x02
    554e:	a3 83       	std	Z+3, r26	; 0x03
    5550:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	80 93 55 17 	sts	0x1755, r24	; 0x801755 <i2c_init_status>
    555a:	cf bf       	out	0x3f, r28	; 63
    555c:	0f 90       	pop	r0
    555e:	0f 90       	pop	r0
    5560:	0f 90       	pop	r0
    5562:	cf 91       	pop	r28
    5564:	08 95       	ret

00005566 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5566:	61 e0       	ldi	r22, 0x01	; 1
    5568:	70 e0       	ldi	r23, 0x00	; 0
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	a5 db       	rcall	.-2230   	; 0x4cba <delayus>
	if(!i2c.enable || i2c.done )
    5570:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x1>
    5574:	88 23       	and	r24, r24
    5576:	39 f0       	breq	.+14     	; 0x5586 <i2c_done+0x20>
		return(1);
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    557e:	91 11       	cpse	r25, r1
    5580:	03 c0       	rjmp	.+6      	; 0x5588 <i2c_done+0x22>
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	08 95       	ret
    5586:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5588:	08 95       	ret

0000558a <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    558a:	61 e0       	ldi	r22, 0x01	; 1
    558c:	70 e0       	ldi	r23, 0x00	; 0
    558e:	80 e0       	ldi	r24, 0x00	; 0
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	93 db       	rcall	.-2266   	; 0x4cba <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5594:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    5598:	88 23       	and	r24, r24
    559a:	39 f0       	breq	.+14     	; 0x55aa <i2c_task_done+0x20>
		return(1);
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <i2c_task+0x2>
    55a2:	91 11       	cpse	r25, r1
    55a4:	03 c0       	rjmp	.+6      	; 0x55ac <i2c_task_done+0x22>
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	08 95       	ret
    55aa:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    55ac:	08 95       	ret

000055ae <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    55ae:	e6 e4       	ldi	r30, 0x46	; 70
    55b0:	fa e1       	ldi	r31, 0x1A	; 26
    55b2:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    55b8:	8a e0       	ldi	r24, 0x0A	; 10
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	95 83       	std	Z+5, r25	; 0x05
    55be:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    55c0:	85 ea       	ldi	r24, 0xA5	; 165
    55c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    55c6:	08 95       	ret

000055c8 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    55c8:	ef 92       	push	r14
    55ca:	ff 92       	push	r15
    55cc:	0f 93       	push	r16
    55ce:	1f 93       	push	r17
    55d0:	cf 93       	push	r28
    55d2:	df 93       	push	r29
	uint8_t sreg = SREG;
    55d4:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    55d6:	f8 94       	cli
	i2c_task.done = 0;
    55d8:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>
	i2c_task.error = 0;
    55dc:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_task+0x3>
	i2c_task.ind = 0;
    55e0:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    55e4:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    55e6:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    55e8:	ee 24       	eor	r14, r14
    55ea:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    55ec:	0a e0       	ldi	r16, 0x0A	; 10
    55ee:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    55f0:	8c 2f       	mov	r24, r28
    55f2:	c6 de       	rcall	.-628    	; 0x5380 <i2c_check_op>
    55f4:	88 23       	and	r24, r24
    55f6:	d1 f0       	breq	.+52     	; 0x562c <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    55f8:	ec 2f       	mov	r30, r28
    55fa:	ee 0f       	add	r30, r30
    55fc:	ff 0b       	sbc	r31, r31
    55fe:	ea 5a       	subi	r30, 0xAA	; 170
    5600:	f8 4e       	sbci	r31, 0xE8	; 232
    5602:	01 90       	ld	r0, Z+
    5604:	f0 81       	ld	r31, Z
    5606:	e0 2d       	mov	r30, r0
		o->enable = 1;
    5608:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    560a:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    560c:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    560e:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5610:	15 83       	std	Z+5, r17	; 0x05
    5612:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5614:	d1 11       	cpse	r29, r1
    5616:	07 c0       	rjmp	.+14     	; 0x5626 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5618:	8a e0       	ldi	r24, 0x0A	; 10
    561a:	a6 e4       	ldi	r26, 0x46	; 70
    561c:	ba e1       	ldi	r27, 0x1A	; 26
    561e:	01 90       	ld	r0, Z+
    5620:	0d 92       	st	X+, r0
    5622:	8a 95       	dec	r24
    5624:	e1 f7       	brne	.-8      	; 0x561e <i2c_task_run+0x56>
    5626:	cf 5f       	subi	r28, 0xFF	; 255
    5628:	d1 e0       	ldi	r29, 0x01	; 1
    562a:	e2 cf       	rjmp	.-60     	; 0x55f0 <i2c_task_run+0x28>
		}
	}

	if(run)
    562c:	dd 23       	and	r29, r29
    562e:	91 f0       	breq	.+36     	; 0x5654 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5630:	81 e8       	ldi	r24, 0x81	; 129
    5632:	9b e2       	ldi	r25, 0x2B	; 43
    5634:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <i2c_callback+0x1>
    5638:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_callback>

		i2c_task.enable = 1;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task>
		i2c_task.done = 0;
    5642:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5646:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    564a:	8c 7f       	andi	r24, 0xFC	; 252
    564c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5650:	ae df       	rcall	.-164    	; 0x55ae <i2c_send_start>
    5652:	15 c0       	rjmp	.+42     	; 0x567e <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5654:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5658:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    565c:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5666:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
        i2c.enable = 0;
    566a:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    566e:	84 e8       	ldi	r24, 0x84	; 132
    5670:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5674:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5678:	8c 7f       	andi	r24, 0xFC	; 252
    567a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    567e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5682:	ff be       	out	0x3f, r15	; 63

}
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
    5688:	e6 e0       	ldi	r30, 0x06	; 6
    568a:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0000568e <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    568e:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5690:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5692:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_callback+0x1>
    5696:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_callback>

	i2c.enable = 1; // Enabled
    569a:	31 e0       	ldi	r19, 0x01	; 1
    569c:	30 93 47 1a 	sts	0x1A47, r19	; 0x801a47 <i2c+0x1>
	i2c.done = 0;
    56a0:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    56a4:	88 0f       	add	r24, r24
    56a6:	61 70       	andi	r22, 0x01	; 1
    56a8:	68 2b       	or	r22, r24
    56aa:	60 93 46 1a 	sts	0x1A46, r22	; 0x801a46 <i2c>
	i2c.flags = 0;
    56ae:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
    i2c.len = len;
    56b2:	20 93 4c 1a 	sts	0x1A4C, r18	; 0x801a4c <i2c+0x6>
    i2c.ind = 0;
    56b6:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
    i2c.buf = buf;
    56ba:	50 93 4f 1a 	sts	0x1A4F, r21	; 0x801a4f <i2c+0x9>
    56be:	40 93 4e 1a 	sts	0x1A4E, r20	; 0x801a4e <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    56c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    56c6:	8c 7f       	andi	r24, 0xFC	; 252
    56c8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    56cc:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    56d0:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    56d2:	6d df       	rcall	.-294    	; 0x55ae <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    56d4:	48 df       	rcall	.-368    	; 0x5566 <i2c_done>
    56d6:	88 23       	and	r24, r24
    56d8:	e9 f3       	breq	.-6      	; 0x56d4 <i2c_fn+0x46>
    56da:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    56dc:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x3>
    56e0:	91 11       	cpse	r25, r1
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	08 95       	ret

000056e6 <i2c_send_stop>:
}
    56e6:	e6 e4       	ldi	r30, 0x46	; 70
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    56e8:	fa e1       	ldi	r31, 0x1A	; 26
    56ea:	81 e0       	ldi	r24, 0x01	; 1
    56ec:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    56ee:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    56f0:	84 e9       	ldi	r24, 0x94	; 148
    56f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    56f6:	6a e0       	ldi	r22, 0x0A	; 10
    56f8:	70 e0       	ldi	r23, 0x00	; 0
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	dd ca       	rjmp	.-2630   	; 0x4cba <delayus>
    5700:	08 95       	ret

00005702 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5706:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task>
    570a:	88 23       	and	r24, r24
    570c:	09 f4       	brne	.+2      	; 0x5710 <i2c_task_next_op+0xe>
    570e:	46 c0       	rjmp	.+140    	; 0x579c <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5710:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    5714:	35 de       	rcall	.-918    	; 0x5380 <i2c_check_op>
    5716:	88 23       	and	r24, r24
    5718:	b1 f0       	breq	.+44     	; 0x5746 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    571a:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    571e:	ee 0f       	add	r30, r30
    5720:	ff 0b       	sbc	r31, r31
    5722:	ea 5a       	subi	r30, 0xAA	; 170
    5724:	f8 4e       	sbci	r31, 0xE8	; 232
    5726:	c0 81       	ld	r28, Z
    5728:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    572a:	8a e0       	ldi	r24, 0x0A	; 10
    572c:	e6 e4       	ldi	r30, 0x46	; 70
    572e:	fa e1       	ldi	r31, 0x1A	; 26
    5730:	de 01       	movw	r26, r28
    5732:	01 90       	ld	r0, Z+
    5734:	0d 92       	st	X+, r0
    5736:	8a 95       	dec	r24
    5738:	e1 f7       	brne	.-8      	; 0x5732 <i2c_task_next_op+0x30>
			if(o->flags)
    573a:	8b 81       	ldd	r24, Y+3	; 0x03
    573c:	88 23       	and	r24, r24
    573e:	19 f0       	breq	.+6      	; 0x5746 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5746:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x1>
    574a:	8f 5f       	subi	r24, 0xFF	; 255
    574c:	19 de       	rcall	.-974    	; 0x5380 <i2c_check_op>
    574e:	88 23       	and	r24, r24
    5750:	29 f1       	breq	.+74     	; 0x579c <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5752:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <i2c_task+0x1>
    5756:	ef 5f       	subi	r30, 0xFF	; 255
    5758:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    575c:	ee 0f       	add	r30, r30
    575e:	ff 0b       	sbc	r31, r31
    5760:	ea 5a       	subi	r30, 0xAA	; 170
    5762:	f8 4e       	sbci	r31, 0xE8	; 232
    5764:	01 90       	ld	r0, Z+
    5766:	f0 81       	ld	r31, Z
    5768:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    576a:	81 81       	ldd	r24, Z+1	; 0x01
    576c:	81 30       	cpi	r24, 0x01	; 1
    576e:	19 f0       	breq	.+6      	; 0x5776 <i2c_task_next_op+0x74>
    5770:	82 81       	ldd	r24, Z+2	; 0x02
    5772:	81 11       	cpse	r24, r1
    5774:	13 c0       	rjmp	.+38     	; 0x579c <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5776:	8a e0       	ldi	r24, 0x0A	; 10
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	95 83       	std	Z+5, r25	; 0x05
    577c:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    577e:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5780:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5786:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5788:	8a e0       	ldi	r24, 0x0A	; 10
    578a:	a6 e4       	ldi	r26, 0x46	; 70
    578c:	ba e1       	ldi	r27, 0x1A	; 26
    578e:	01 90       	ld	r0, Z+
    5790:	0d 92       	st	X+, r0
    5792:	8a 95       	dec	r24

				i2c_send_start();
    5794:	e1 f7       	brne	.-8      	; 0x578e <i2c_task_next_op+0x8c>
    5796:	0b df       	rcall	.-490    	; 0x55ae <i2c_send_start>

				return(1);
    5798:	81 e0       	ldi	r24, 0x01	; 1
    579a:	0f c0       	rjmp	.+30     	; 0x57ba <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    579c:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
	i2c_task.done = 1;
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    57a6:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
	i2c.enable = 0;
    57aa:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
	i2c.flags = 0;
    57ae:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <i2c+0x3>
	i2c.ind = 0;
    57b2:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>

	i2c_send_stop();
    57b6:	97 df       	rcall	.-210    	; 0x56e6 <i2c_send_stop>

	return(0);
    57b8:	80 e0       	ldi	r24, 0x00	; 0
}
    57ba:	df 91       	pop	r29
    57bc:	cf 91       	pop	r28
    57be:	08 95       	ret

000057c0 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    57c0:	e0 91 7a 17 	lds	r30, 0x177A	; 0x80177a <i2c_callback>
    57c4:	f0 91 7b 17 	lds	r31, 0x177B	; 0x80177b <i2c_callback+0x1>
    57c8:	30 97       	sbiw	r30, 0x00	; 0
    57ca:	11 f0       	breq	.+4      	; 0x57d0 <i2c_next+0x10>
	    i2c_callback();
    57cc:	09 95       	icall
    57ce:	08 95       	ret
	else
		i2c_send_stop();
    57d0:	8a cf       	rjmp	.-236    	; 0x56e6 <i2c_send_stop>
    57d2:	08 95       	ret

000057d4 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    57d4:	1f 92       	push	r1
    57d6:	0f 92       	push	r0
    57d8:	0f b6       	in	r0, 0x3f	; 63
    57da:	0f 92       	push	r0
    57dc:	11 24       	eor	r1, r1
    57de:	0b b6       	in	r0, 0x3b	; 59
    57e0:	0f 92       	push	r0
    57e2:	2f 93       	push	r18
    57e4:	3f 93       	push	r19
    57e6:	4f 93       	push	r20
    57e8:	5f 93       	push	r21
    57ea:	6f 93       	push	r22
    57ec:	7f 93       	push	r23
    57ee:	8f 93       	push	r24
    57f0:	9f 93       	push	r25
    57f2:	af 93       	push	r26
    57f4:	bf 93       	push	r27
    57f6:	ef 93       	push	r30
    57f8:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    57fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    57fe:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <i2c+0x1>
    5802:	99 23       	and	r25, r25
    5804:	09 f1       	breq	.+66     	; 0x5848 <__vector_26+0x74>
    5806:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x2>
    580a:	91 11       	cpse	r25, r1
    580c:	1d c0       	rjmp	.+58     	; 0x5848 <__vector_26+0x74>
    580e:	20 91 4e 1a 	lds	r18, 0x1A4E	; 0x801a4e <i2c+0x8>
    5812:	30 91 4f 1a 	lds	r19, 0x1A4F	; 0x801a4f <i2c+0x9>
    5816:	21 15       	cp	r18, r1
    5818:	31 05       	cpc	r19, r1
    581a:	b1 f0       	breq	.+44     	; 0x5848 <__vector_26+0x74>
    581c:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x6>
    5820:	99 23       	and	r25, r25
    5822:	91 f0       	breq	.+36     	; 0x5848 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5824:	40 91 4a 1a 	lds	r20, 0x1A4A	; 0x801a4a <i2c+0x4>
    5828:	50 91 4b 1a 	lds	r21, 0x1A4B	; 0x801a4b <i2c+0x5>
    582c:	45 2b       	or	r20, r21
    582e:	71 f4       	brne	.+28     	; 0x584c <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5830:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5834:	81 60       	ori	r24, 0x01	; 1
    5836:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
		i2c_task.enable = 0;
    583a:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task>
		i2c_task.done = 1;
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task+0x2>
		i2c_task.error = 1;
    5844:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c_task+0x3>
		i2c_send_stop();
    5848:	4e df       	rcall	.-356    	; 0x56e6 <i2c_send_stop>
		return;
    584a:	9b c0       	rjmp	.+310    	; 0x5982 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    584c:	88 7f       	andi	r24, 0xF8	; 248
    584e:	80 33       	cpi	r24, 0x30	; 48
    5850:	09 f4       	brne	.+2      	; 0x5854 <__vector_26+0x80>
    5852:	83 c0       	rjmp	.+262    	; 0x595a <__vector_26+0x186>
    5854:	70 f4       	brcc	.+28     	; 0x5872 <__vector_26+0x9e>
    5856:	88 31       	cpi	r24, 0x18	; 24
    5858:	09 f1       	breq	.+66     	; 0x589c <__vector_26+0xc8>
    585a:	28 f4       	brcc	.+10     	; 0x5866 <__vector_26+0x92>
    585c:	88 30       	cpi	r24, 0x08	; 8
    585e:	c9 f0       	breq	.+50     	; 0x5892 <__vector_26+0xbe>
    5860:	80 31       	cpi	r24, 0x10	; 16
    5862:	b9 f0       	breq	.+46     	; 0x5892 <__vector_26+0xbe>
    5864:	83 c0       	rjmp	.+262    	; 0x596c <__vector_26+0x198>
    5866:	80 32       	cpi	r24, 0x20	; 32
    5868:	09 f4       	brne	.+2      	; 0x586c <__vector_26+0x98>
    586a:	65 c0       	rjmp	.+202    	; 0x5936 <__vector_26+0x162>
    586c:	88 32       	cpi	r24, 0x28	; 40
    586e:	b1 f0       	breq	.+44     	; 0x589c <__vector_26+0xc8>
    5870:	7d c0       	rjmp	.+250    	; 0x596c <__vector_26+0x198>
    5872:	88 34       	cpi	r24, 0x48	; 72
    5874:	09 f4       	brne	.+2      	; 0x5878 <__vector_26+0xa4>
    5876:	68 c0       	rjmp	.+208    	; 0x5948 <__vector_26+0x174>
    5878:	38 f4       	brcc	.+14     	; 0x5888 <__vector_26+0xb4>
    587a:	88 33       	cpi	r24, 0x38	; 56
    587c:	09 f4       	brne	.+2      	; 0x5880 <__vector_26+0xac>
    587e:	57 c0       	rjmp	.+174    	; 0x592e <__vector_26+0x15a>
    5880:	80 34       	cpi	r24, 0x40	; 64
    5882:	09 f4       	brne	.+2      	; 0x5886 <__vector_26+0xb2>
    5884:	42 c0       	rjmp	.+132    	; 0x590a <__vector_26+0x136>
    5886:	72 c0       	rjmp	.+228    	; 0x596c <__vector_26+0x198>
    5888:	80 35       	cpi	r24, 0x50	; 80
    588a:	79 f1       	breq	.+94     	; 0x58ea <__vector_26+0x116>
    588c:	88 35       	cpi	r24, 0x58	; 88
    588e:	b9 f0       	breq	.+46     	; 0x58be <__vector_26+0xea>
    5890:	6d c0       	rjmp	.+218    	; 0x596c <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5892:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <i2c+0x7>
			TWDR = i2c.address;
    5896:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c>
    589a:	0e c0       	rjmp	.+28     	; 0x58b8 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    589c:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    58a0:	89 17       	cp	r24, r25
    58a2:	ec f4       	brge	.+58     	; 0x58de <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    58a4:	91 e0       	ldi	r25, 0x01	; 1
    58a6:	98 0f       	add	r25, r24
    58a8:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    58ac:	f9 01       	movw	r30, r18
    58ae:	e8 0f       	add	r30, r24
    58b0:	f1 1d       	adc	r31, r1
    58b2:	87 fd       	sbrc	r24, 7
    58b4:	fa 95       	dec	r31
    58b6:	80 81       	ld	r24, Z
    58b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58bc:	36 c0       	rjmp	.+108    	; 0x592a <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    58be:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    58c2:	89 17       	cp	r24, r25
    58c4:	64 f4       	brge	.+24     	; 0x58de <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    58c6:	91 e0       	ldi	r25, 0x01	; 1
    58c8:	98 0f       	add	r25, r24
    58ca:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    58ce:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58d2:	f9 01       	movw	r30, r18
    58d4:	e8 0f       	add	r30, r24
    58d6:	f1 1d       	adc	r31, r1
    58d8:	87 fd       	sbrc	r24, 7
    58da:	fa 95       	dec	r31
    58dc:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
				i2c.enable = 0;
    58e4:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
    58e8:	4b c0       	rjmp	.+150    	; 0x5980 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    58ea:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    58ee:	89 17       	cp	r24, r25
    58f0:	64 f4       	brge	.+24     	; 0x590a <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    58f2:	91 e0       	ldi	r25, 0x01	; 1
    58f4:	98 0f       	add	r25, r24
    58f6:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <i2c+0x7>
    58fa:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58fe:	f9 01       	movw	r30, r18
    5900:	e8 0f       	add	r30, r24
    5902:	f1 1d       	adc	r31, r1
    5904:	87 fd       	sbrc	r24, 7
    5906:	fa 95       	dec	r31
    5908:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    590a:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x7>
    590e:	08 2e       	mov	r0, r24
    5910:	00 0c       	add	r0, r0
    5912:	99 0b       	sbc	r25, r25
    5914:	01 96       	adiw	r24, 0x01	; 1
    5916:	20 91 4c 1a 	lds	r18, 0x1A4C	; 0x801a4c <i2c+0x6>
    591a:	02 2e       	mov	r0, r18
    591c:	00 0c       	add	r0, r0
    591e:	33 0b       	sbc	r19, r19
    5920:	82 17       	cp	r24, r18
    5922:	93 07       	cpc	r25, r19
    5924:	14 f4       	brge	.+4      	; 0x592a <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5926:	85 ec       	ldi	r24, 0xC5	; 197
    5928:	03 c0       	rjmp	.+6      	; 0x5930 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    592a:	85 e8       	ldi	r24, 0x85	; 133
    592c:	01 c0       	rjmp	.+2      	; 0x5930 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    592e:	85 ea       	ldi	r24, 0xA5	; 165
    5930:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5934:	26 c0       	rjmp	.+76     	; 0x5982 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    593c:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5940:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5944:	88 60       	ori	r24, 0x08	; 8
    5946:	1a c0       	rjmp	.+52     	; 0x597c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    594e:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5952:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5956:	80 61       	ori	r24, 0x10	; 16
    5958:	11 c0       	rjmp	.+34     	; 0x597c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    595a:	81 e0       	ldi	r24, 0x01	; 1
    595c:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5960:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5964:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    5968:	80 62       	ori	r24, 0x20	; 32
    596a:	08 c0       	rjmp	.+16     	; 0x597c <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	80 93 48 1a 	sts	0x1A48, r24	; 0x801a48 <i2c+0x2>
			i2c.enable = 0;
    5972:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5976:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c+0x3>
    597a:	80 64       	ori	r24, 0x40	; 64
    597c:	80 93 49 1a 	sts	0x1A49, r24	; 0x801a49 <i2c+0x3>
			i2c_next();
    5980:	1f df       	rcall	.-450    	; 0x57c0 <i2c_next>
			break;
	}
}
    5982:	ff 91       	pop	r31
    5984:	ef 91       	pop	r30
    5986:	bf 91       	pop	r27
    5988:	af 91       	pop	r26
    598a:	9f 91       	pop	r25
    598c:	8f 91       	pop	r24
    598e:	7f 91       	pop	r23
    5990:	6f 91       	pop	r22
    5992:	5f 91       	pop	r21
    5994:	4f 91       	pop	r20
    5996:	3f 91       	pop	r19
    5998:	2f 91       	pop	r18
    599a:	0f 90       	pop	r0
    599c:	0b be       	out	0x3b, r0	; 59
    599e:	0f 90       	pop	r0
    59a0:	0f be       	out	0x3f, r0	; 63
    59a2:	0f 90       	pop	r0
    59a4:	1f 90       	pop	r1
    59a6:	18 95       	reti

000059a8 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    59a8:	cf 93       	push	r28
    59aa:	00 d0       	rcall	.+0      	; 0x59ac <i2c_print_error+0x4>
    59ac:	00 d0       	rcall	.+0      	; 0x59ae <i2c_print_error+0x6>
    59ae:	1f 92       	push	r1
    int flags = o->flags;
    59b0:	fc 01       	movw	r30, r24
    59b2:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    59b4:	cc 23       	and	r28, r28
    59b6:	09 f4       	brne	.+2      	; 0x59ba <i2c_print_error+0x12>
    59b8:	67 c0       	rjmp	.+206    	; 0x5a88 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    59ba:	80 91 48 1a 	lds	r24, 0x1A48	; 0x801a48 <i2c+0x2>
    59be:	81 11       	cpse	r24, r1
    59c0:	03 c0       	rjmp	.+6      	; 0x59c8 <i2c_print_error+0x20>
    59c2:	88 e2       	ldi	r24, 0x28	; 40
    59c4:	93 e0       	ldi	r25, 0x03	; 3
    59c6:	02 c0       	rjmp	.+4      	; 0x59cc <i2c_print_error+0x24>
    59c8:	83 e2       	ldi	r24, 0x23	; 35
    59ca:	93 e0       	ldi	r25, 0x03	; 3
    59cc:	ed b7       	in	r30, 0x3d	; 61
    59ce:	fe b7       	in	r31, 0x3e	; 62
    59d0:	95 83       	std	Z+5, r25	; 0x05
    59d2:	84 83       	std	Z+4, r24	; 0x04
    59d4:	81 ec       	ldi	r24, 0xC1	; 193
    59d6:	93 e0       	ldi	r25, 0x03	; 3
    59d8:	a0 e0       	ldi	r26, 0x00	; 0
    59da:	81 83       	std	Z+1, r24	; 0x01
    59dc:	92 83       	std	Z+2, r25	; 0x02
    59de:	a3 83       	std	Z+3, r26	; 0x03
    59e0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    59e4:	c0 ff       	sbrs	r28, 0
    59e6:	0a c0       	rjmp	.+20     	; 0x59fc <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    59e8:	83 eb       	ldi	r24, 0xB3	; 179
    59ea:	93 e0       	ldi	r25, 0x03	; 3
    59ec:	a0 e0       	ldi	r26, 0x00	; 0
    59ee:	ed b7       	in	r30, 0x3d	; 61
    59f0:	fe b7       	in	r31, 0x3e	; 62
    59f2:	81 83       	std	Z+1, r24	; 0x01
    59f4:	92 83       	std	Z+2, r25	; 0x02
    59f6:	a3 83       	std	Z+3, r26	; 0x03
    59f8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		if(flags & I2C_OP_LEN)
    59fc:	c1 ff       	sbrs	r28, 1
    59fe:	0a c0       	rjmp	.+20     	; 0x5a14 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5a00:	89 ea       	ldi	r24, 0xA9	; 169
    5a02:	93 e0       	ldi	r25, 0x03	; 3
    5a04:	a0 e0       	ldi	r26, 0x00	; 0
    5a06:	ed b7       	in	r30, 0x3d	; 61
    5a08:	fe b7       	in	r31, 0x3e	; 62
    5a0a:	81 83       	std	Z+1, r24	; 0x01
    5a0c:	92 83       	std	Z+2, r25	; 0x02
    5a0e:	a3 83       	std	Z+3, r26	; 0x03
    5a10:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		if(flags & I2C_OP_ERROR)
    5a14:	c2 ff       	sbrs	r28, 2
    5a16:	0a c0       	rjmp	.+20     	; 0x5a2c <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5a18:	8d e9       	ldi	r24, 0x9D	; 157
    5a1a:	93 e0       	ldi	r25, 0x03	; 3
    5a1c:	a0 e0       	ldi	r26, 0x00	; 0
    5a1e:	ed b7       	in	r30, 0x3d	; 61
    5a20:	fe b7       	in	r31, 0x3e	; 62
    5a22:	81 83       	std	Z+1, r24	; 0x01
    5a24:	92 83       	std	Z+2, r25	; 0x02
    5a26:	a3 83       	std	Z+3, r26	; 0x03
    5a28:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5a2c:	c4 ff       	sbrs	r28, 4
    5a2e:	0a c0       	rjmp	.+20     	; 0x5a44 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5a30:	8b e8       	ldi	r24, 0x8B	; 139
    5a32:	93 e0       	ldi	r25, 0x03	; 3
    5a34:	a0 e0       	ldi	r26, 0x00	; 0
    5a36:	ed b7       	in	r30, 0x3d	; 61
    5a38:	fe b7       	in	r31, 0x3e	; 62
    5a3a:	81 83       	std	Z+1, r24	; 0x01
    5a3c:	92 83       	std	Z+2, r25	; 0x02
    5a3e:	a3 83       	std	Z+3, r26	; 0x03
    5a40:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5a44:	c3 ff       	sbrs	r28, 3
    5a46:	0a c0       	rjmp	.+20     	; 0x5a5c <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5a48:	89 e7       	ldi	r24, 0x79	; 121
    5a4a:	93 e0       	ldi	r25, 0x03	; 3
    5a4c:	a0 e0       	ldi	r26, 0x00	; 0
    5a4e:	ed b7       	in	r30, 0x3d	; 61
    5a50:	fe b7       	in	r31, 0x3e	; 62
    5a52:	81 83       	std	Z+1, r24	; 0x01
    5a54:	92 83       	std	Z+2, r25	; 0x02
    5a56:	a3 83       	std	Z+3, r26	; 0x03
    5a58:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5a5c:	c5 ff       	sbrs	r28, 5
    5a5e:	0a c0       	rjmp	.+20     	; 0x5a74 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5a60:	86 e6       	ldi	r24, 0x66	; 102
    5a62:	93 e0       	ldi	r25, 0x03	; 3
    5a64:	a0 e0       	ldi	r26, 0x00	; 0
    5a66:	ed b7       	in	r30, 0x3d	; 61
    5a68:	fe b7       	in	r31, 0x3e	; 62
    5a6a:	81 83       	std	Z+1, r24	; 0x01
    5a6c:	92 83       	std	Z+2, r25	; 0x02
    5a6e:	a3 83       	std	Z+3, r26	; 0x03
    5a70:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		printf("\n");
    5a74:	84 e6       	ldi	r24, 0x64	; 100
    5a76:	93 e0       	ldi	r25, 0x03	; 3
    5a78:	a0 e0       	ldi	r26, 0x00	; 0
    5a7a:	ed b7       	in	r30, 0x3d	; 61
    5a7c:	fe b7       	in	r31, 0x3e	; 62
    5a7e:	81 83       	std	Z+1, r24	; 0x01
    5a80:	92 83       	std	Z+2, r25	; 0x02
    5a82:	a3 83       	std	Z+3, r26	; 0x03
    5a84:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
	}
}
    5a88:	0f 90       	pop	r0
    5a8a:	0f 90       	pop	r0
    5a8c:	0f 90       	pop	r0
    5a8e:	0f 90       	pop	r0
    5a90:	0f 90       	pop	r0
    5a92:	cf 91       	pop	r28
    5a94:	08 95       	ret

00005a96 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5a96:	6f 92       	push	r6
    5a98:	7f 92       	push	r7
    5a9a:	8f 92       	push	r8
    5a9c:	af 92       	push	r10
    5a9e:	bf 92       	push	r11
    5aa0:	cf 92       	push	r12
    5aa2:	df 92       	push	r13
    5aa4:	ef 92       	push	r14
    5aa6:	0f 93       	push	r16
    5aa8:	1f 93       	push	r17
    5aaa:	cf 93       	push	r28
    5aac:	df 93       	push	r29
    5aae:	00 d0       	rcall	.+0      	; 0x5ab0 <i2c_display_task_errors+0x1a>
    5ab0:	00 d0       	rcall	.+0      	; 0x5ab2 <i2c_display_task_errors+0x1c>
    5ab2:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5ab4:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
    5ab8:	90 e0       	ldi	r25, 0x00	; 0
    5aba:	ed b7       	in	r30, 0x3d	; 61
    5abc:	fe b7       	in	r31, 0x3e	; 62
    5abe:	95 83       	std	Z+5, r25	; 0x05
    5ac0:	84 83       	std	Z+4, r24	; 0x04
    5ac2:	81 e5       	ldi	r24, 0x51	; 81
    5ac4:	93 e0       	ldi	r25, 0x03	; 3
    5ac6:	a0 e0       	ldi	r26, 0x00	; 0
    5ac8:	81 83       	std	Z+1, r24	; 0x01
    5aca:	92 83       	std	Z+2, r25	; 0x02
    5acc:	a3 83       	std	Z+3, r26	; 0x03
    5ace:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5ad2:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	ed b7       	in	r30, 0x3d	; 61
    5ada:	fe b7       	in	r31, 0x3e	; 62
    5adc:	95 83       	std	Z+5, r25	; 0x05
    5ade:	84 83       	std	Z+4, r24	; 0x04
    5ae0:	8d e3       	ldi	r24, 0x3D	; 61
    5ae2:	93 e0       	ldi	r25, 0x03	; 3
    5ae4:	a0 e0       	ldi	r26, 0x00	; 0
    5ae6:	81 83       	std	Z+1, r24	; 0x01
    5ae8:	92 83       	std	Z+2, r25	; 0x02
    5aea:	a3 83       	std	Z+3, r26	; 0x03
    5aec:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5af0:	c6 e5       	ldi	r28, 0x56	; 86
    5af2:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5af4:	00 e0       	ldi	r16, 0x00	; 0
    5af6:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5af8:	83 e3       	ldi	r24, 0x33	; 51
    5afa:	93 e0       	ldi	r25, 0x03	; 3
    5afc:	6c 01       	movw	r12, r24
    5afe:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5b00:	81 e3       	ldi	r24, 0x31	; 49
    5b02:	93 e0       	ldi	r25, 0x03	; 3
    5b04:	3c 01       	movw	r6, r24
    5b06:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5b08:	30 2f       	mov	r19, r16
    5b0a:	21 2f       	mov	r18, r17
    5b0c:	5e 01       	movw	r10, r28
    5b0e:	0f 5f       	subi	r16, 0xFF	; 255
    5b10:	1f 4f       	sbci	r17, 0xFF	; 255
    5b12:	88 81       	ld	r24, Y
    5b14:	99 81       	ldd	r25, Y+1	; 0x01
    5b16:	89 2b       	or	r24, r25
    5b18:	b1 f0       	breq	.+44     	; 0x5b46 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5b1a:	ed b7       	in	r30, 0x3d	; 61
    5b1c:	fe b7       	in	r31, 0x3e	; 62
    5b1e:	34 83       	std	Z+4, r19	; 0x04
    5b20:	25 83       	std	Z+5, r18	; 0x05
    5b22:	c1 82       	std	Z+1, r12	; 0x01
    5b24:	d2 82       	std	Z+2, r13	; 0x02
    5b26:	e3 82       	std	Z+3, r14	; 0x03
    5b28:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5b2c:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5b2e:	f5 01       	movw	r30, r10
    5b30:	80 81       	ld	r24, Z
    5b32:	91 81       	ldd	r25, Z+1	; 0x01
    5b34:	39 df       	rcall	.-398    	; 0x59a8 <i2c_print_error>
		printf("\n");
    5b36:	ed b7       	in	r30, 0x3d	; 61
    5b38:	fe b7       	in	r31, 0x3e	; 62
    5b3a:	61 82       	std	Z+1, r6	; 0x01
    5b3c:	72 82       	std	Z+2, r7	; 0x02
    5b3e:	83 82       	std	Z+3, r8	; 0x03
    5b40:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5b44:	e1 cf       	rjmp	.-62     	; 0x5b08 <i2c_display_task_errors+0x72>
	}
}
    5b46:	0f 90       	pop	r0
    5b48:	0f 90       	pop	r0
    5b4a:	0f 90       	pop	r0
    5b4c:	0f 90       	pop	r0
    5b4e:	0f 90       	pop	r0
    5b50:	df 91       	pop	r29
    5b52:	cf 91       	pop	r28
    5b54:	1f 91       	pop	r17
    5b56:	0f 91       	pop	r16
    5b58:	ef 90       	pop	r14
    5b5a:	df 90       	pop	r13
    5b5c:	cf 90       	pop	r12
    5b5e:	bf 90       	pop	r11
    5b60:	af 90       	pop	r10
    5b62:	8f 90       	pop	r8
    5b64:	7f 90       	pop	r7
    5b66:	6f 90       	pop	r6
    5b68:	08 95       	ret

00005b6a <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5b6a:	6a e0       	ldi	r22, 0x0A	; 10
    5b6c:	0e 94 4d e2 	call	0x1c49a	; 0x1c49a <__udivmodqi4>
    5b70:	82 95       	swap	r24
    5b72:	80 7f       	andi	r24, 0xF0	; 240
    5b74:	89 2b       	or	r24, r25
    5b76:	08 95       	ret

00005b78 <BCDtoBIN>:
    5b78:	98 2f       	mov	r25, r24
    5b7a:	92 95       	swap	r25
    5b7c:	9f 70       	andi	r25, 0x0F	; 15
    5b7e:	8f 70       	andi	r24, 0x0F	; 15
    5b80:	2a e0       	ldi	r18, 0x0A	; 10
    5b82:	92 9f       	mul	r25, r18
    5b84:	80 0d       	add	r24, r0
    5b86:	11 24       	eor	r1, r1
    5b88:	08 95       	ret

00005b8a <i2c_rtc_write>:
    5b8a:	ac e0       	ldi	r26, 0x0C	; 12
    5b8c:	b0 e0       	ldi	r27, 0x00	; 0
    5b8e:	eb ec       	ldi	r30, 0xCB	; 203
    5b90:	fd e2       	ldi	r31, 0x2D	; 45
    5b92:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    5b96:	9f ef       	ldi	r25, 0xFF	; 255
    5b98:	92 0f       	add	r25, r18
    5b9a:	98 30       	cpi	r25, 0x08	; 8
    5b9c:	50 f5       	brcc	.+84     	; 0x5bf2 <i2c_rtc_write+0x68>
    5b9e:	6c 83       	std	Y+4, r22	; 0x04
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	02 2f       	mov	r16, r18
    5ba4:	10 e0       	ldi	r17, 0x00	; 0
    5ba6:	69 2f       	mov	r22, r25
    5ba8:	09 2e       	mov	r0, r25
    5baa:	00 0c       	add	r0, r0
    5bac:	77 0b       	sbc	r23, r23
    5bae:	60 17       	cp	r22, r16
    5bb0:	71 07       	cpc	r23, r17
    5bb2:	6c f4       	brge	.+26     	; 0x5bce <i2c_rtc_write+0x44>
    5bb4:	a5 e0       	ldi	r26, 0x05	; 5
    5bb6:	b0 e0       	ldi	r27, 0x00	; 0
    5bb8:	ac 0f       	add	r26, r28
    5bba:	bd 1f       	adc	r27, r29
    5bbc:	a6 0f       	add	r26, r22
    5bbe:	b7 1f       	adc	r27, r23
    5bc0:	64 0f       	add	r22, r20
    5bc2:	75 1f       	adc	r23, r21
    5bc4:	fb 01       	movw	r30, r22
    5bc6:	30 81       	ld	r19, Z
    5bc8:	3c 93       	st	X, r19
    5bca:	9f 5f       	subi	r25, 0xFF	; 255
    5bcc:	ec cf       	rjmp	.-40     	; 0x5ba6 <i2c_rtc_write+0x1c>
    5bce:	2f 5f       	subi	r18, 0xFF	; 255
    5bd0:	ae 01       	movw	r20, r28
    5bd2:	4c 5f       	subi	r20, 0xFC	; 252
    5bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd6:	60 e0       	ldi	r22, 0x00	; 0
    5bd8:	5a dd       	rcall	.-1356   	; 0x568e <i2c_fn>
    5bda:	81 11       	cpse	r24, r1
    5bdc:	0c c0       	rjmp	.+24     	; 0x5bf6 <i2c_rtc_write+0x6c>
    5bde:	8e ed       	ldi	r24, 0xDE	; 222
    5be0:	94 e0       	ldi	r25, 0x04	; 4
    5be2:	a0 e0       	ldi	r26, 0x00	; 0
    5be4:	ed b7       	in	r30, 0x3d	; 61
    5be6:	fe b7       	in	r31, 0x3e	; 62
    5be8:	81 83       	std	Z+1, r24	; 0x01
    5bea:	92 83       	std	Z+2, r25	; 0x02
    5bec:	a3 83       	std	Z+3, r26	; 0x03
    5bee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	01 c0       	rjmp	.+2      	; 0x5bf8 <i2c_rtc_write+0x6e>
    5bf6:	81 e0       	ldi	r24, 0x01	; 1
    5bf8:	2c 96       	adiw	r28, 0x0c	; 12
    5bfa:	e4 e0       	ldi	r30, 0x04	; 4
    5bfc:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00005c00 <i2c_rtc_read>:
    5c00:	a4 e0       	ldi	r26, 0x04	; 4
    5c02:	b0 e0       	ldi	r27, 0x00	; 0
    5c04:	e6 e0       	ldi	r30, 0x06	; 6
    5c06:	fe e2       	ldi	r31, 0x2E	; 46
    5c08:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
    5c0c:	6c 83       	std	Y+4, r22	; 0x04
    5c0e:	9f ef       	ldi	r25, 0xFF	; 255
    5c10:	92 0f       	add	r25, r18
    5c12:	98 30       	cpi	r25, 0x08	; 8
    5c14:	f8 f4       	brcc	.+62     	; 0x5c54 <i2c_rtc_read+0x54>
    5c16:	02 2f       	mov	r16, r18
    5c18:	7a 01       	movw	r14, r20
    5c1a:	18 2f       	mov	r17, r24
    5c1c:	21 e0       	ldi	r18, 0x01	; 1
    5c1e:	ae 01       	movw	r20, r28
    5c20:	4c 5f       	subi	r20, 0xFC	; 252
    5c22:	5f 4f       	sbci	r21, 0xFF	; 255
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	33 dd       	rcall	.-1434   	; 0x568e <i2c_fn>
    5c28:	81 11       	cpse	r24, r1
    5c2a:	03 c0       	rjmp	.+6      	; 0x5c32 <i2c_rtc_read+0x32>
    5c2c:	82 ec       	ldi	r24, 0xC2	; 194
    5c2e:	94 e0       	ldi	r25, 0x04	; 4
    5c30:	09 c0       	rjmp	.+18     	; 0x5c44 <i2c_rtc_read+0x44>
    5c32:	20 2f       	mov	r18, r16
    5c34:	a7 01       	movw	r20, r14
    5c36:	61 e0       	ldi	r22, 0x01	; 1
    5c38:	81 2f       	mov	r24, r17
    5c3a:	29 dd       	rcall	.-1454   	; 0x568e <i2c_fn>
    5c3c:	81 11       	cpse	r24, r1
    5c3e:	0c c0       	rjmp	.+24     	; 0x5c58 <i2c_rtc_read+0x58>
    5c40:	89 ea       	ldi	r24, 0xA9	; 169
    5c42:	94 e0       	ldi	r25, 0x04	; 4
    5c44:	a0 e0       	ldi	r26, 0x00	; 0
    5c46:	ed b7       	in	r30, 0x3d	; 61
    5c48:	fe b7       	in	r31, 0x3e	; 62
    5c4a:	81 83       	std	Z+1, r24	; 0x01
    5c4c:	92 83       	std	Z+2, r25	; 0x02
    5c4e:	a3 83       	std	Z+3, r26	; 0x03
    5c50:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	01 c0       	rjmp	.+2      	; 0x5c5a <i2c_rtc_read+0x5a>
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	24 96       	adiw	r28, 0x04	; 4
    5c5c:	e6 e0       	ldi	r30, 0x06	; 6
    5c5e:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00005c62 <i2c_rtc_init>:
    5c62:	60 ea       	ldi	r22, 0xA0	; 160
    5c64:	76 e8       	ldi	r23, 0x86	; 134
    5c66:	81 e0       	ldi	r24, 0x01	; 1
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	18 cc       	rjmp	.-2000   	; 0x549c <i2c_init>
    5c6c:	08 95       	ret

00005c6e <rtc_write>:
    5c6e:	ab e0       	ldi	r26, 0x0B	; 11
    5c70:	b0 e0       	ldi	r27, 0x00	; 0
    5c72:	ed e3       	ldi	r30, 0x3D	; 61
    5c74:	fe e2       	ldi	r31, 0x2E	; 46
    5c76:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    5c7a:	8c 01       	movw	r16, r24
    5c7c:	fc 01       	movw	r30, r24
    5c7e:	80 81       	ld	r24, Z
    5c80:	74 df       	rcall	.-280    	; 0x5b6a <BINtoBCD>
    5c82:	8f 77       	andi	r24, 0x7F	; 127
    5c84:	8c 83       	std	Y+4, r24	; 0x04
    5c86:	f8 01       	movw	r30, r16
    5c88:	82 81       	ldd	r24, Z+2	; 0x02
    5c8a:	6f df       	rcall	.-290    	; 0x5b6a <BINtoBCD>
    5c8c:	8f 77       	andi	r24, 0x7F	; 127
    5c8e:	8d 83       	std	Y+5, r24	; 0x05
    5c90:	f8 01       	movw	r30, r16
    5c92:	84 81       	ldd	r24, Z+4	; 0x04
    5c94:	6a df       	rcall	.-300    	; 0x5b6a <BINtoBCD>
    5c96:	8f 73       	andi	r24, 0x3F	; 63
    5c98:	8e 83       	std	Y+6, r24	; 0x06
    5c9a:	f8 01       	movw	r30, r16
    5c9c:	84 85       	ldd	r24, Z+12	; 0x0c
    5c9e:	87 70       	andi	r24, 0x07	; 7
    5ca0:	8f 5f       	subi	r24, 0xFF	; 255
    5ca2:	8f 83       	std	Y+7, r24	; 0x07
    5ca4:	86 81       	ldd	r24, Z+6	; 0x06
    5ca6:	61 df       	rcall	.-318    	; 0x5b6a <BINtoBCD>
    5ca8:	8f 73       	andi	r24, 0x3F	; 63
    5caa:	88 87       	std	Y+8, r24	; 0x08
    5cac:	f8 01       	movw	r30, r16
    5cae:	80 85       	ldd	r24, Z+8	; 0x08
    5cb0:	8f 5f       	subi	r24, 0xFF	; 255
    5cb2:	5b df       	rcall	.-330    	; 0x5b6a <BINtoBCD>
    5cb4:	8f 71       	andi	r24, 0x1F	; 31
    5cb6:	89 87       	std	Y+9, r24	; 0x09
    5cb8:	f8 01       	movw	r30, r16
    5cba:	82 85       	ldd	r24, Z+10	; 0x0a
    5cbc:	84 56       	subi	r24, 0x64	; 100
    5cbe:	55 df       	rcall	.-342    	; 0x5b6a <BINtoBCD>
    5cc0:	8a 87       	std	Y+10, r24	; 0x0a
    5cc2:	83 e9       	ldi	r24, 0x93	; 147
    5cc4:	8b 87       	std	Y+11, r24	; 0x0b
    5cc6:	28 e0       	ldi	r18, 0x08	; 8
    5cc8:	ae 01       	movw	r20, r28
    5cca:	4c 5f       	subi	r20, 0xFC	; 252
    5ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cce:	60 e0       	ldi	r22, 0x00	; 0
    5cd0:	88 e6       	ldi	r24, 0x68	; 104
    5cd2:	5b df       	rcall	.-330    	; 0x5b8a <i2c_rtc_write>
    5cd4:	81 11       	cpse	r24, r1
    5cd6:	0c c0       	rjmp	.+24     	; 0x5cf0 <rtc_write+0x82>
    5cd8:	88 e9       	ldi	r24, 0x98	; 152
    5cda:	94 e0       	ldi	r25, 0x04	; 4
    5cdc:	a0 e0       	ldi	r26, 0x00	; 0
    5cde:	ed b7       	in	r30, 0x3d	; 61
    5ce0:	fe b7       	in	r31, 0x3e	; 62
    5ce2:	81 83       	std	Z+1, r24	; 0x01
    5ce4:	92 83       	std	Z+2, r25	; 0x02
    5ce6:	a3 83       	std	Z+3, r26	; 0x03
    5ce8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5cec:	80 e0       	ldi	r24, 0x00	; 0
    5cee:	01 c0       	rjmp	.+2      	; 0x5cf2 <rtc_write+0x84>
    5cf0:	81 e0       	ldi	r24, 0x01	; 1
    5cf2:	2b 96       	adiw	r28, 0x0b	; 11
    5cf4:	e4 e0       	ldi	r30, 0x04	; 4
    5cf6:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00005cfa <rtc_read>:
    5cfa:	ab e0       	ldi	r26, 0x0B	; 11
    5cfc:	b0 e0       	ldi	r27, 0x00	; 0
    5cfe:	e3 e8       	ldi	r30, 0x83	; 131
    5d00:	fe e2       	ldi	r31, 0x2E	; 46
    5d02:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    5d06:	8c 01       	movw	r16, r24
    5d08:	28 e0       	ldi	r18, 0x08	; 8
    5d0a:	ae 01       	movw	r20, r28
    5d0c:	4c 5f       	subi	r20, 0xFC	; 252
    5d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d10:	60 e0       	ldi	r22, 0x00	; 0
    5d12:	88 e6       	ldi	r24, 0x68	; 104
    5d14:	75 df       	rcall	.-278    	; 0x5c00 <i2c_rtc_read>
    5d16:	81 11       	cpse	r24, r1
    5d18:	0c c0       	rjmp	.+24     	; 0x5d32 <rtc_read+0x38>
    5d1a:	88 e8       	ldi	r24, 0x88	; 136
    5d1c:	94 e0       	ldi	r25, 0x04	; 4
    5d1e:	a0 e0       	ldi	r26, 0x00	; 0
    5d20:	ed b7       	in	r30, 0x3d	; 61
    5d22:	fe b7       	in	r31, 0x3e	; 62
    5d24:	81 83       	std	Z+1, r24	; 0x01
    5d26:	92 83       	std	Z+2, r25	; 0x02
    5d28:	a3 83       	std	Z+3, r26	; 0x03
    5d2a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5d2e:	80 e0       	ldi	r24, 0x00	; 0
    5d30:	33 c0       	rjmp	.+102    	; 0x5d98 <rtc_read+0x9e>
    5d32:	8c 81       	ldd	r24, Y+4	; 0x04
    5d34:	8f 77       	andi	r24, 0x7F	; 127
    5d36:	20 df       	rcall	.-448    	; 0x5b78 <BCDtoBIN>
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	f8 01       	movw	r30, r16
    5d3c:	91 83       	std	Z+1, r25	; 0x01
    5d3e:	80 83       	st	Z, r24
    5d40:	8d 81       	ldd	r24, Y+5	; 0x05
    5d42:	8f 77       	andi	r24, 0x7F	; 127
    5d44:	19 df       	rcall	.-462    	; 0x5b78 <BCDtoBIN>
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	f8 01       	movw	r30, r16
    5d4a:	93 83       	std	Z+3, r25	; 0x03
    5d4c:	82 83       	std	Z+2, r24	; 0x02
    5d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d50:	8f 73       	andi	r24, 0x3F	; 63
    5d52:	12 df       	rcall	.-476    	; 0x5b78 <BCDtoBIN>
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	f8 01       	movw	r30, r16
    5d58:	95 83       	std	Z+5, r25	; 0x05
    5d5a:	84 83       	std	Z+4, r24	; 0x04
    5d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    5d5e:	87 70       	andi	r24, 0x07	; 7
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	01 97       	sbiw	r24, 0x01	; 1
    5d64:	95 87       	std	Z+13, r25	; 0x0d
    5d66:	84 87       	std	Z+12, r24	; 0x0c
    5d68:	88 85       	ldd	r24, Y+8	; 0x08
    5d6a:	8f 73       	andi	r24, 0x3F	; 63
    5d6c:	05 df       	rcall	.-502    	; 0x5b78 <BCDtoBIN>
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	f8 01       	movw	r30, r16
    5d72:	97 83       	std	Z+7, r25	; 0x07
    5d74:	86 83       	std	Z+6, r24	; 0x06
    5d76:	89 85       	ldd	r24, Y+9	; 0x09
    5d78:	8f 71       	andi	r24, 0x1F	; 31
    5d7a:	fe de       	rcall	.-516    	; 0x5b78 <BCDtoBIN>
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	01 97       	sbiw	r24, 0x01	; 1
    5d80:	f8 01       	movw	r30, r16
    5d82:	91 87       	std	Z+9, r25	; 0x09
    5d84:	80 87       	std	Z+8, r24	; 0x08
    5d86:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d88:	f7 de       	rcall	.-530    	; 0x5b78 <BCDtoBIN>
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	8c 59       	subi	r24, 0x9C	; 156
    5d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d90:	f8 01       	movw	r30, r16
    5d92:	93 87       	std	Z+11, r25	; 0x0b
    5d94:	82 87       	std	Z+10, r24	; 0x0a
    5d96:	81 e0       	ldi	r24, 0x01	; 1
    5d98:	2b 96       	adiw	r28, 0x0b	; 11
    5d9a:	e4 e0       	ldi	r30, 0x04	; 4
    5d9c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00005da0 <rtc_run>:
    5da0:	a4 e0       	ldi	r26, 0x04	; 4
    5da2:	b0 e0       	ldi	r27, 0x00	; 0
    5da4:	e6 ed       	ldi	r30, 0xD6	; 214
    5da6:	fe e2       	ldi	r31, 0x2E	; 46
    5da8:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    5dac:	8c 01       	movw	r16, r24
    5dae:	21 e0       	ldi	r18, 0x01	; 1
    5db0:	ae 01       	movw	r20, r28
    5db2:	4c 5f       	subi	r20, 0xFC	; 252
    5db4:	5f 4f       	sbci	r21, 0xFF	; 255
    5db6:	60 e0       	ldi	r22, 0x00	; 0
    5db8:	88 e6       	ldi	r24, 0x68	; 104
    5dba:	22 df       	rcall	.-444    	; 0x5c00 <i2c_rtc_read>
    5dbc:	81 11       	cpse	r24, r1
    5dbe:	03 c0       	rjmp	.+6      	; 0x5dc6 <rtc_run+0x26>
    5dc0:	84 e7       	ldi	r24, 0x74	; 116
    5dc2:	94 e0       	ldi	r25, 0x04	; 4
    5dc4:	24 c0       	rjmp	.+72     	; 0x5e0e <rtc_run+0x6e>
    5dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    5dc8:	0f 3f       	cpi	r16, 0xFF	; 255
    5dca:	ff ef       	ldi	r31, 0xFF	; 255
    5dcc:	1f 07       	cpc	r17, r31
    5dce:	59 f4       	brne	.+22     	; 0x5de6 <rtc_run+0x46>
    5dd0:	08 2e       	mov	r0, r24
    5dd2:	00 0c       	add	r0, r0
    5dd4:	99 0b       	sbc	r25, r25
    5dd6:	80 95       	com	r24
    5dd8:	90 95       	com	r25
    5dda:	89 2f       	mov	r24, r25
    5ddc:	88 1f       	adc	r24, r24
    5dde:	88 27       	eor	r24, r24
    5de0:	88 1f       	adc	r24, r24
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	20 c0       	rjmp	.+64     	; 0x5e26 <rtc_run+0x86>
    5de6:	8f 77       	andi	r24, 0x7F	; 127
    5de8:	01 15       	cp	r16, r1
    5dea:	11 05       	cpc	r17, r1
    5dec:	11 f4       	brne	.+4      	; 0x5df2 <rtc_run+0x52>
    5dee:	90 e8       	ldi	r25, 0x80	; 128
    5df0:	01 c0       	rjmp	.+2      	; 0x5df4 <rtc_run+0x54>
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	89 2b       	or	r24, r25
    5df6:	8c 83       	std	Y+4, r24	; 0x04
    5df8:	21 e0       	ldi	r18, 0x01	; 1
    5dfa:	ae 01       	movw	r20, r28
    5dfc:	4c 5f       	subi	r20, 0xFC	; 252
    5dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5e00:	60 e0       	ldi	r22, 0x00	; 0
    5e02:	88 e6       	ldi	r24, 0x68	; 104
    5e04:	c2 de       	rcall	.-636    	; 0x5b8a <i2c_rtc_write>
    5e06:	81 11       	cpse	r24, r1
    5e08:	0d c0       	rjmp	.+26     	; 0x5e24 <rtc_run+0x84>
    5e0a:	8f e5       	ldi	r24, 0x5F	; 95
    5e0c:	94 e0       	ldi	r25, 0x04	; 4
    5e0e:	a0 e0       	ldi	r26, 0x00	; 0
    5e10:	ed b7       	in	r30, 0x3d	; 61
    5e12:	fe b7       	in	r31, 0x3e	; 62
    5e14:	81 83       	std	Z+1, r24	; 0x01
    5e16:	92 83       	std	Z+2, r25	; 0x02
    5e18:	a3 83       	std	Z+3, r26	; 0x03
    5e1a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5e1e:	8f ef       	ldi	r24, 0xFF	; 255
    5e20:	9f ef       	ldi	r25, 0xFF	; 255
    5e22:	01 c0       	rjmp	.+2      	; 0x5e26 <rtc_run+0x86>
    5e24:	c8 01       	movw	r24, r16
    5e26:	24 96       	adiw	r28, 0x04	; 4
    5e28:	e4 e0       	ldi	r30, 0x04	; 4
    5e2a:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00005e2e <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5e2e:	a7 e0       	ldi	r26, 0x07	; 7
    5e30:	b0 e0       	ldi	r27, 0x00	; 0
    5e32:	ed e1       	ldi	r30, 0x1D	; 29
    5e34:	ff e2       	ldi	r31, 0x2F	; 47
    5e36:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    5e3a:	8c 01       	movw	r16, r24
    5e3c:	4c 83       	std	Y+4, r20	; 0x04
    5e3e:	5d 83       	std	Y+5, r21	; 0x05
    5e40:	6e 83       	std	Y+6, r22	; 0x06
    5e42:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5e44:	0e df       	rcall	.-484    	; 0x5c62 <i2c_rtc_init>

    if(!force)
    5e46:	01 15       	cp	r16, r1
    5e48:	11 05       	cpc	r17, r1
    5e4a:	39 f4       	brne	.+14     	; 0x5e5a <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5e4c:	8f ef       	ldi	r24, 0xFF	; 255
    5e4e:	9f ef       	ldi	r25, 0xFF	; 255
    5e50:	a7 df       	rcall	.-178    	; 0x5da0 <rtc_run>
        if(state < 0)
    5e52:	87 fd       	sbrc	r24, 7
    5e54:	16 c0       	rjmp	.+44     	; 0x5e82 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5e56:	81 11       	cpse	r24, r1
    5e58:	22 c0       	rjmp	.+68     	; 0x5e9e <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e5a:	80 e0       	ldi	r24, 0x00	; 0
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	a0 df       	rcall	.-192    	; 0x5da0 <rtc_run>
    5e60:	97 fd       	sbrc	r25, 7
    5e62:	0f c0       	rjmp	.+30     	; 0x5e82 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5e64:	ce 01       	movw	r24, r28
    5e66:	04 96       	adiw	r24, 0x04	; 4
    5e68:	a3 d6       	rcall	.+3398   	; 0x6bb0 <gmtime>
    5e6a:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5e6c:	81 f4       	brne	.+32     	; 0x5e8e <rtc_init+0x60>
    5e6e:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5e70:	94 e0       	ldi	r25, 0x04	; 4
    5e72:	a0 e0       	ldi	r26, 0x00	; 0
    5e74:	ed b7       	in	r30, 0x3d	; 61
    5e76:	fe b7       	in	r31, 0x3e	; 62
    5e78:	81 83       	std	Z+1, r24	; 0x01
    5e7a:	92 83       	std	Z+2, r25	; 0x02
    5e7c:	a3 83       	std	Z+3, r26	; 0x03
    5e7e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    5e82:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <rtc_ok+0x1>
            rtc_ok = 0;
    5e86:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <rtc_ok>
            return 0;
    5e8a:	80 e0       	ldi	r24, 0x00	; 0
    5e8c:	0e c0       	rjmp	.+28     	; 0x5eaa <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5e8e:	ef de       	rcall	.-546    	; 0x5c6e <rtc_write>
    5e90:	88 23       	and	r24, r24
    5e92:	69 f3       	breq	.-38     	; 0x5e6e <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5e94:	81 e0       	ldi	r24, 0x01	; 1
    5e96:	90 e0       	ldi	r25, 0x00	; 0
    5e98:	83 df       	rcall	.-250    	; 0x5da0 <rtc_run>
    5e9a:	97 fd       	sbrc	r25, 7
    5e9c:	f2 cf       	rjmp	.-28     	; 0x5e82 <rtc_init+0x54>
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <rtc_ok+0x1>
    5ea6:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <rtc_ok>
    5eaa:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5eac:	e4 e0       	ldi	r30, 0x04	; 4
    5eae:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00005eb2 <islower>:
    5eb2:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5eb4:	21 56       	subi	r18, 0x61	; 97
    5eb6:	31 09       	sbc	r19, r1
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	2a 31       	cpi	r18, 0x1A	; 26
    5ebe:	31 05       	cpc	r19, r1
    5ec0:	10 f0       	brcs	.+4      	; 0x5ec6 <islower+0x14>
    5ec2:	80 e0       	ldi	r24, 0x00	; 0
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	08 95       	ret

00005ec8 <toupper>:
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
    5ecc:	ec 01       	movw	r28, r24
    5ece:	f1 df       	rcall	.-30     	; 0x5eb2 <islower>
    5ed0:	89 2b       	or	r24, r25
    5ed2:	19 f0       	breq	.+6      	; 0x5eda <toupper+0x12>
    5ed4:	ce 01       	movw	r24, r28
    5ed6:	80 97       	sbiw	r24, 0x20	; 32
    5ed8:	01 c0       	rjmp	.+2      	; 0x5edc <toupper+0x14>
    5eda:	ce 01       	movw	r24, r28
    5edc:	df 91       	pop	r29
    5ede:	cf 91       	pop	r28
    5ee0:	08 95       	ret

00005ee2 <strcpy>:
    5ee2:	fc 01       	movw	r30, r24
    5ee4:	db 01       	movw	r26, r22
    5ee6:	2d 91       	ld	r18, X+
    5ee8:	bd 01       	movw	r22, r26
    5eea:	01 96       	adiw	r24, 0x01	; 1
    5eec:	22 23       	and	r18, r18
    5eee:	11 f0       	breq	.+4      	; 0x5ef4 <strcpy+0x12>
    5ef0:	20 83       	st	Z, r18
    5ef2:	f7 cf       	rjmp	.-18     	; 0x5ee2 <strcpy>
    5ef4:	10 82       	st	Z, r1
    5ef6:	08 95       	ret

00005ef8 <strncpy>:
    5ef8:	db 01       	movw	r26, r22
    5efa:	fc 01       	movw	r30, r24
    5efc:	2d 91       	ld	r18, X+
    5efe:	21 11       	cpse	r18, r1
    5f00:	03 c0       	rjmp	.+6      	; 0x5f08 <strncpy+0x10>
    5f02:	4e 0f       	add	r20, r30
    5f04:	5f 1f       	adc	r21, r31
    5f06:	08 c0       	rjmp	.+16     	; 0x5f18 <strncpy+0x20>
    5f08:	41 15       	cp	r20, r1
    5f0a:	51 05       	cpc	r21, r1
    5f0c:	21 f0       	breq	.+8      	; 0x5f16 <strncpy+0x1e>
    5f0e:	21 93       	st	Z+, r18
    5f10:	41 50       	subi	r20, 0x01	; 1
    5f12:	51 09       	sbc	r21, r1
    5f14:	f3 cf       	rjmp	.-26     	; 0x5efc <strncpy+0x4>
    5f16:	08 95       	ret
    5f18:	4e 17       	cp	r20, r30
    5f1a:	5f 07       	cpc	r21, r31
    5f1c:	11 f0       	breq	.+4      	; 0x5f22 <strncpy+0x2a>
    5f1e:	11 92       	st	Z+, r1
    5f20:	fb cf       	rjmp	.-10     	; 0x5f18 <strncpy+0x20>
    5f22:	08 95       	ret

00005f24 <strcat>:
    5f24:	cf 93       	push	r28
    5f26:	df 93       	push	r29
    5f28:	d8 2f       	mov	r29, r24
    5f2a:	c9 2f       	mov	r28, r25
    5f2c:	28 2f       	mov	r18, r24
    5f2e:	39 2f       	mov	r19, r25
    5f30:	c9 01       	movw	r24, r18
    5f32:	2f 5f       	subi	r18, 0xFF	; 255
    5f34:	3f 4f       	sbci	r19, 0xFF	; 255
    5f36:	fc 01       	movw	r30, r24
    5f38:	40 81       	ld	r20, Z
    5f3a:	41 11       	cpse	r20, r1
    5f3c:	f9 cf       	rjmp	.-14     	; 0x5f30 <strcat+0xc>
    5f3e:	d1 df       	rcall	.-94     	; 0x5ee2 <strcpy>
    5f40:	8d 2f       	mov	r24, r29
    5f42:	9c 2f       	mov	r25, r28
    5f44:	df 91       	pop	r29
    5f46:	cf 91       	pop	r28
    5f48:	08 95       	ret

00005f4a <reverse>:
    5f4a:	fc 01       	movw	r30, r24
    5f4c:	01 90       	ld	r0, Z+
    5f4e:	00 20       	and	r0, r0
    5f50:	e9 f7       	brne	.-6      	; 0x5f4c <reverse+0x2>
    5f52:	31 97       	sbiw	r30, 0x01	; 1
    5f54:	e8 1b       	sub	r30, r24
    5f56:	f9 0b       	sbc	r31, r25
    5f58:	af 01       	movw	r20, r30
    5f5a:	55 95       	asr	r21
    5f5c:	47 95       	ror	r20
    5f5e:	e8 0f       	add	r30, r24
    5f60:	f9 1f       	adc	r31, r25
    5f62:	dc 01       	movw	r26, r24
    5f64:	9d 01       	movw	r18, r26
    5f66:	28 1b       	sub	r18, r24
    5f68:	39 0b       	sbc	r19, r25
    5f6a:	24 17       	cp	r18, r20
    5f6c:	35 07       	cpc	r19, r21
    5f6e:	2c f4       	brge	.+10     	; 0x5f7a <reverse+0x30>
    5f70:	22 91       	ld	r18, -Z
    5f72:	3c 91       	ld	r19, X
    5f74:	30 83       	st	Z, r19
    5f76:	2d 93       	st	X+, r18
    5f78:	f5 cf       	rjmp	.-22     	; 0x5f64 <reverse+0x1a>
    5f7a:	08 95       	ret

00005f7c <strupper>:
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	ec 01       	movw	r28, r24
    5f82:	88 81       	ld	r24, Y
    5f84:	88 23       	and	r24, r24
    5f86:	21 f0       	breq	.+8      	; 0x5f90 <strupper+0x14>
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	9e df       	rcall	.-196    	; 0x5ec8 <toupper>
    5f8c:	89 93       	st	Y+, r24
    5f8e:	f9 cf       	rjmp	.-14     	; 0x5f82 <strupper+0x6>
    5f90:	df 91       	pop	r29
    5f92:	cf 91       	pop	r28
    5f94:	08 95       	ret

00005f96 <strcmp>:
    5f96:	dc 01       	movw	r26, r24
    5f98:	fb 01       	movw	r30, r22
    5f9a:	2d 91       	ld	r18, X+
    5f9c:	41 91       	ld	r20, Z+
    5f9e:	50 e0       	ldi	r21, 0x00	; 0
    5fa0:	30 e0       	ldi	r19, 0x00	; 0
    5fa2:	c9 01       	movw	r24, r18
    5fa4:	84 1b       	sub	r24, r20
    5fa6:	95 0b       	sbc	r25, r21
    5fa8:	11 f4       	brne	.+4      	; 0x5fae <strcmp+0x18>
    5faa:	45 2b       	or	r20, r21
    5fac:	b1 f7       	brne	.-20     	; 0x5f9a <strcmp+0x4>
    5fae:	08 95       	ret

00005fb0 <strcasecmp>:
    5fb0:	ef 92       	push	r14
    5fb2:	ff 92       	push	r15
    5fb4:	0f 93       	push	r16
    5fb6:	1f 93       	push	r17
    5fb8:	cf 93       	push	r28
    5fba:	df 93       	push	r29
    5fbc:	7c 01       	movw	r14, r24
    5fbe:	8b 01       	movw	r16, r22
    5fc0:	f7 01       	movw	r30, r14
    5fc2:	81 91       	ld	r24, Z+
    5fc4:	7f 01       	movw	r14, r30
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	7f df       	rcall	.-258    	; 0x5ec8 <toupper>
    5fca:	ec 01       	movw	r28, r24
    5fcc:	f8 01       	movw	r30, r16
    5fce:	81 91       	ld	r24, Z+
    5fd0:	8f 01       	movw	r16, r30
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	79 df       	rcall	.-270    	; 0x5ec8 <toupper>
    5fd6:	9c 01       	movw	r18, r24
    5fd8:	ce 01       	movw	r24, r28
    5fda:	82 1b       	sub	r24, r18
    5fdc:	93 0b       	sbc	r25, r19
    5fde:	11 f4       	brne	.+4      	; 0x5fe4 <strcasecmp+0x34>
    5fe0:	23 2b       	or	r18, r19
    5fe2:	71 f7       	brne	.-36     	; 0x5fc0 <strcasecmp+0x10>
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
    5fe8:	e6 e0       	ldi	r30, 0x06	; 6
    5fea:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00005fee <strncasecmp>:
    5fee:	a0 e0       	ldi	r26, 0x00	; 0
    5ff0:	b0 e0       	ldi	r27, 0x00	; 0
    5ff2:	ed ef       	ldi	r30, 0xFD	; 253
    5ff4:	ff e2       	ldi	r31, 0x2F	; 47
    5ff6:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    5ffa:	8c 01       	movw	r16, r24
    5ffc:	7b 01       	movw	r14, r22
    5ffe:	6c 01       	movw	r12, r24
    6000:	c4 0e       	add	r12, r20
    6002:	d5 1e       	adc	r13, r21
    6004:	0c 15       	cp	r16, r12
    6006:	1d 05       	cpc	r17, r13
    6008:	99 f0       	breq	.+38     	; 0x6030 <strncasecmp+0x42>
    600a:	f8 01       	movw	r30, r16
    600c:	81 91       	ld	r24, Z+
    600e:	8f 01       	movw	r16, r30
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	5a df       	rcall	.-332    	; 0x5ec8 <toupper>
    6014:	ec 01       	movw	r28, r24
    6016:	f7 01       	movw	r30, r14
    6018:	81 91       	ld	r24, Z+
    601a:	7f 01       	movw	r14, r30
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	54 df       	rcall	.-344    	; 0x5ec8 <toupper>
    6020:	9c 01       	movw	r18, r24
    6022:	ce 01       	movw	r24, r28
    6024:	82 1b       	sub	r24, r18
    6026:	93 0b       	sbc	r25, r19
    6028:	29 f4       	brne	.+10     	; 0x6034 <strncasecmp+0x46>
    602a:	23 2b       	or	r18, r19
    602c:	59 f7       	brne	.-42     	; 0x6004 <strncasecmp+0x16>
    602e:	02 c0       	rjmp	.+4      	; 0x6034 <strncasecmp+0x46>
    6030:	80 e0       	ldi	r24, 0x00	; 0
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	cd b7       	in	r28, 0x3d	; 61
    6036:	de b7       	in	r29, 0x3e	; 62
    6038:	e8 e0       	ldi	r30, 0x08	; 8
    603a:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000603e <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    603e:	0f 93       	push	r16
    6040:	1f 93       	push	r17
    6042:	cf 93       	push	r28
    6044:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6046:	00 97       	sbiw	r24, 0x00	; 0
    6048:	99 f0       	breq	.+38     	; 0x6070 <stralloc+0x32>
    604a:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    604c:	fc 01       	movw	r30, r24
    604e:	01 90       	ld	r0, Z+
    6050:	00 20       	and	r0, r0
    6052:	e9 f7       	brne	.-6      	; 0x604e <stralloc+0x10>
    6054:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6056:	61 e0       	ldi	r22, 0x01	; 1
    6058:	70 e0       	ldi	r23, 0x00	; 0
    605a:	8c 1b       	sub	r24, r28
    605c:	9d 0b       	sbc	r25, r29
    605e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
    6062:	8c 01       	movw	r16, r24
    if(!ptr)
    6064:	00 97       	sbiw	r24, 0x00	; 0
    6066:	21 f0       	breq	.+8      	; 0x6070 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6068:	be 01       	movw	r22, r28
    606a:	3b df       	rcall	.-394    	; 0x5ee2 <strcpy>
    return(ptr);
    606c:	c8 01       	movw	r24, r16
    606e:	02 c0       	rjmp	.+4      	; 0x6074 <stralloc+0x36>
    6070:	80 e0       	ldi	r24, 0x00	; 0
    6072:	90 e0       	ldi	r25, 0x00	; 0
}
    6074:	df 91       	pop	r29
    6076:	cf 91       	pop	r28
    6078:	1f 91       	pop	r17
    607a:	0f 91       	pop	r16
    607c:	08 95       	ret

0000607e <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    607e:	00 d0       	rcall	.+0      	; 0x6080 <sep+0x2>
    6080:	1f 92       	push	r1
    6082:	8e e1       	ldi	r24, 0x1E	; 30
    6084:	95 e0       	ldi	r25, 0x05	; 5
    6086:	a0 e0       	ldi	r26, 0x00	; 0
    6088:	ed b7       	in	r30, 0x3d	; 61
    608a:	fe b7       	in	r31, 0x3e	; 62
    608c:	81 83       	std	Z+1, r24	; 0x01
    608e:	92 83       	std	Z+2, r25	; 0x02
    6090:	a3 83       	std	Z+3, r26	; 0x03
    6092:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    6096:	0f 90       	pop	r0
    6098:	0f 90       	pop	r0
    609a:	0f 90       	pop	r0
    609c:	08 95       	ret

0000609e <trim_tail>:
    609e:	00 97       	sbiw	r24, 0x00	; 0
    60a0:	69 f0       	breq	.+26     	; 0x60bc <trim_tail+0x1e>
    60a2:	fc 01       	movw	r30, r24
    60a4:	01 90       	ld	r0, Z+
    60a6:	00 20       	and	r0, r0
    60a8:	e9 f7       	brne	.-6      	; 0x60a4 <trim_tail+0x6>
    60aa:	31 97       	sbiw	r30, 0x01	; 1
    60ac:	e8 17       	cp	r30, r24
    60ae:	f9 07       	cpc	r31, r25
    60b0:	29 f0       	breq	.+10     	; 0x60bc <trim_tail+0x1e>
    60b2:	22 91       	ld	r18, -Z
    60b4:	21 32       	cpi	r18, 0x21	; 33
    60b6:	10 f4       	brcc	.+4      	; 0x60bc <trim_tail+0x1e>
    60b8:	10 82       	st	Z, r1
    60ba:	f8 cf       	rjmp	.-16     	; 0x60ac <trim_tail+0xe>
    60bc:	08 95       	ret

000060be <skipspaces>:
    60be:	00 97       	sbiw	r24, 0x00	; 0
    60c0:	39 f0       	breq	.+14     	; 0x60d0 <skipspaces+0x12>
    60c2:	fc 01       	movw	r30, r24
    60c4:	cf 01       	movw	r24, r30
    60c6:	21 91       	ld	r18, Z+
    60c8:	20 32       	cpi	r18, 0x20	; 32
    60ca:	e1 f3       	breq	.-8      	; 0x60c4 <skipspaces+0x6>
    60cc:	29 30       	cpi	r18, 0x09	; 9
    60ce:	d1 f3       	breq	.-12     	; 0x60c4 <skipspaces+0x6>
    60d0:	08 95       	ret

000060d2 <MATCH>:
    60d2:	cf 93       	push	r28
    60d4:	df 93       	push	r29
    60d6:	fb 01       	movw	r30, r22
    60d8:	01 90       	ld	r0, Z+
    60da:	00 20       	and	r0, r0
    60dc:	e9 f7       	brne	.-6      	; 0x60d8 <MATCH+0x6>
    60de:	31 97       	sbiw	r30, 0x01	; 1
    60e0:	ef 01       	movw	r28, r30
    60e2:	c6 1b       	sub	r28, r22
    60e4:	d7 0b       	sbc	r29, r23
    60e6:	57 df       	rcall	.-338    	; 0x5f96 <strcmp>
    60e8:	89 2b       	or	r24, r25
    60ea:	11 f4       	brne	.+4      	; 0x60f0 <MATCH+0x1e>
    60ec:	ce 01       	movw	r24, r28
    60ee:	02 c0       	rjmp	.+4      	; 0x60f4 <MATCH+0x22>
    60f0:	80 e0       	ldi	r24, 0x00	; 0
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	df 91       	pop	r29
    60f6:	cf 91       	pop	r28
    60f8:	08 95       	ret

000060fa <MATCHI>:
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	fb 01       	movw	r30, r22
    6100:	01 90       	ld	r0, Z+
    6102:	00 20       	and	r0, r0
    6104:	e9 f7       	brne	.-6      	; 0x6100 <MATCHI+0x6>
    6106:	31 97       	sbiw	r30, 0x01	; 1
    6108:	ef 01       	movw	r28, r30
    610a:	c6 1b       	sub	r28, r22
    610c:	d7 0b       	sbc	r29, r23
    610e:	50 df       	rcall	.-352    	; 0x5fb0 <strcasecmp>
    6110:	89 2b       	or	r24, r25
    6112:	11 f4       	brne	.+4      	; 0x6118 <MATCHI+0x1e>
    6114:	ce 01       	movw	r24, r28
    6116:	02 c0       	rjmp	.+4      	; 0x611c <MATCHI+0x22>
    6118:	80 e0       	ldi	r24, 0x00	; 0
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	df 91       	pop	r29
    611e:	cf 91       	pop	r28
    6120:	08 95       	ret

00006122 <MATCHARGS>:
    6122:	a9 e0       	ldi	r26, 0x09	; 9
    6124:	b0 e0       	ldi	r27, 0x00	; 0
    6126:	e7 e9       	ldi	r30, 0x97	; 151
    6128:	f0 e3       	ldi	r31, 0x30	; 48
    612a:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
    612e:	eb 01       	movw	r28, r22
    6130:	8a 01       	movw	r16, r20
    6132:	79 01       	movw	r14, r18
    6134:	e2 df       	rcall	.-60     	; 0x60fa <MATCHI>
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	c1 f0       	breq	.+48     	; 0x616a <MATCHARGS+0x48>
    613a:	e0 16       	cp	r14, r16
    613c:	f1 06       	cpc	r15, r17
    613e:	9c f4       	brge	.+38     	; 0x6166 <MATCHARGS+0x44>
    6140:	ed b7       	in	r30, 0x3d	; 61
    6142:	fe b7       	in	r31, 0x3e	; 62
    6144:	f1 86       	std	Z+9, r15	; 0x09
    6146:	e0 86       	std	Z+8, r14	; 0x08
    6148:	17 83       	std	Z+7, r17	; 0x07
    614a:	06 83       	std	Z+6, r16	; 0x06
    614c:	d5 83       	std	Z+5, r29	; 0x05
    614e:	c4 83       	std	Z+4, r28	; 0x04
    6150:	88 ef       	ldi	r24, 0xF8	; 248
    6152:	94 e0       	ldi	r25, 0x04	; 4
    6154:	a0 e0       	ldi	r26, 0x00	; 0
    6156:	81 83       	std	Z+1, r24	; 0x01
    6158:	92 83       	std	Z+2, r25	; 0x02
    615a:	a3 83       	std	Z+3, r26	; 0x03
    615c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    6160:	80 e0       	ldi	r24, 0x00	; 0
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	02 c0       	rjmp	.+4      	; 0x616a <MATCHARGS+0x48>
    6166:	81 e0       	ldi	r24, 0x01	; 1
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	cd b7       	in	r28, 0x3d	; 61
    616c:	de b7       	in	r29, 0x3e	; 62
    616e:	29 96       	adiw	r28, 0x09	; 9
    6170:	e6 e0       	ldi	r30, 0x06	; 6
    6172:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00006176 <MATCHI_LEN>:
    6176:	cf 93       	push	r28
    6178:	df 93       	push	r29
    617a:	00 97       	sbiw	r24, 0x00	; 0
    617c:	89 f0       	breq	.+34     	; 0x61a0 <MATCHI_LEN+0x2a>
    617e:	61 15       	cp	r22, r1
    6180:	71 05       	cpc	r23, r1
    6182:	71 f0       	breq	.+28     	; 0x61a0 <MATCHI_LEN+0x2a>
    6184:	eb 01       	movw	r28, r22
    6186:	09 90       	ld	r0, Y+
    6188:	00 20       	and	r0, r0
    618a:	e9 f7       	brne	.-6      	; 0x6186 <MATCHI_LEN+0x10>
    618c:	21 97       	sbiw	r28, 0x01	; 1
    618e:	c6 1b       	sub	r28, r22
    6190:	d7 0b       	sbc	r29, r23
    6192:	31 f0       	breq	.+12     	; 0x61a0 <MATCHI_LEN+0x2a>
    6194:	ae 01       	movw	r20, r28
    6196:	2b df       	rcall	.-426    	; 0x5fee <strncasecmp>
    6198:	89 2b       	or	r24, r25
    619a:	11 f4       	brne	.+4      	; 0x61a0 <MATCHI_LEN+0x2a>
    619c:	ce 01       	movw	r24, r28
    619e:	02 c0       	rjmp	.+4      	; 0x61a4 <MATCHI_LEN+0x2e>
    61a0:	80 e0       	ldi	r24, 0x00	; 0
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	df 91       	pop	r29
    61a6:	cf 91       	pop	r28
    61a8:	08 95       	ret

000061aa <split_args>:
    61aa:	a0 e0       	ldi	r26, 0x00	; 0
    61ac:	b0 e0       	ldi	r27, 0x00	; 0
    61ae:	eb ed       	ldi	r30, 0xDB	; 219
    61b0:	f0 e3       	ldi	r31, 0x30	; 48
    61b2:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    61b6:	dc 01       	movw	r26, r24
    61b8:	6a 01       	movw	r12, r20
    61ba:	8b 01       	movw	r16, r22
    61bc:	fb 01       	movw	r30, r22
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	8c 15       	cp	r24, r12
    61c4:	9d 05       	cpc	r25, r13
    61c6:	24 f4       	brge	.+8      	; 0x61d0 <split_args+0x26>
    61c8:	11 92       	st	Z+, r1
    61ca:	11 92       	st	Z+, r1
    61cc:	01 96       	adiw	r24, 0x01	; 1
    61ce:	f9 cf       	rjmp	.-14     	; 0x61c2 <split_args+0x18>
    61d0:	c1 14       	cp	r12, r1
    61d2:	d1 04       	cpc	r13, r1
    61d4:	d9 f1       	breq	.+118    	; 0x624c <split_args+0xa2>
    61d6:	10 97       	sbiw	r26, 0x00	; 0
    61d8:	c9 f1       	breq	.+114    	; 0x624c <split_args+0xa2>
    61da:	ee 24       	eor	r14, r14
    61dc:	e3 94       	inc	r14
    61de:	f1 2c       	mov	r15, r1
    61e0:	c0 e0       	ldi	r28, 0x00	; 0
    61e2:	d0 e0       	ldi	r29, 0x00	; 0
    61e4:	8c 91       	ld	r24, X
    61e6:	88 23       	and	r24, r24
    61e8:	b1 f1       	breq	.+108    	; 0x6256 <split_args+0xac>
    61ea:	cc 15       	cp	r28, r12
    61ec:	dd 05       	cpc	r29, r13
    61ee:	9c f5       	brge	.+102    	; 0x6256 <split_args+0xac>
    61f0:	cd 01       	movw	r24, r26
    61f2:	65 df       	rcall	.-310    	; 0x60be <skipspaces>
    61f4:	dc 01       	movw	r26, r24
    61f6:	2c 91       	ld	r18, X
    61f8:	22 23       	and	r18, r18
    61fa:	69 f1       	breq	.+90     	; 0x6256 <split_args+0xac>
    61fc:	22 32       	cpi	r18, 0x22	; 34
    61fe:	79 f4       	brne	.+30     	; 0x621e <split_args+0x74>
    6200:	fc 01       	movw	r30, r24
    6202:	31 96       	adiw	r30, 0x01	; 1
    6204:	d8 01       	movw	r26, r16
    6206:	ed 93       	st	X+, r30
    6208:	fc 93       	st	X, r31
    620a:	df 01       	movw	r26, r30
    620c:	80 81       	ld	r24, Z
    620e:	31 96       	adiw	r30, 0x01	; 1
    6210:	88 23       	and	r24, r24
    6212:	a9 f0       	breq	.+42     	; 0x623e <split_args+0x94>
    6214:	82 32       	cpi	r24, 0x22	; 34
    6216:	c9 f7       	brne	.-14     	; 0x620a <split_args+0x60>
    6218:	1c 92       	st	X, r1
    621a:	df 01       	movw	r26, r30
    621c:	10 c0       	rjmp	.+32     	; 0x623e <split_args+0x94>
    621e:	f8 01       	movw	r30, r16
    6220:	91 83       	std	Z+1, r25	; 0x01
    6222:	80 83       	st	Z, r24
    6224:	fc 01       	movw	r30, r24
    6226:	2e 2f       	mov	r18, r30
    6228:	9f 2f       	mov	r25, r31
    622a:	81 91       	ld	r24, Z+
    622c:	3f ed       	ldi	r19, 0xDF	; 223
    622e:	38 0f       	add	r19, r24
    6230:	3e 35       	cpi	r19, 0x5E	; 94
    6232:	c8 f3       	brcs	.-14     	; 0x6226 <split_args+0x7c>
    6234:	88 23       	and	r24, r24
    6236:	69 f0       	breq	.+26     	; 0x6252 <split_args+0xa8>
    6238:	a2 2f       	mov	r26, r18
    623a:	b9 2f       	mov	r27, r25
    623c:	1d 92       	st	X+, r1
    623e:	21 96       	adiw	r28, 0x01	; 1
    6240:	ff ef       	ldi	r31, 0xFF	; 255
    6242:	ef 1a       	sub	r14, r31
    6244:	ff 0a       	sbc	r15, r31
    6246:	0e 5f       	subi	r16, 0xFE	; 254
    6248:	1f 4f       	sbci	r17, 0xFF	; 255
    624a:	cc cf       	rjmp	.-104    	; 0x61e4 <split_args+0x3a>
    624c:	80 e0       	ldi	r24, 0x00	; 0
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	03 c0       	rjmp	.+6      	; 0x6258 <split_args+0xae>
    6252:	c7 01       	movw	r24, r14
    6254:	01 c0       	rjmp	.+2      	; 0x6258 <split_args+0xae>
    6256:	ce 01       	movw	r24, r28
    6258:	cd b7       	in	r28, 0x3d	; 61
    625a:	de b7       	in	r29, 0x3e	; 62
    625c:	e8 e0       	ldi	r30, 0x08	; 8
    625e:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

00006262 <get_token>:
    6262:	ef 92       	push	r14
    6264:	ff 92       	push	r15
    6266:	0f 93       	push	r16
    6268:	1f 93       	push	r17
    626a:	cf 93       	push	r28
    626c:	df 93       	push	r29
    626e:	eb 01       	movw	r28, r22
    6270:	8a 01       	movw	r16, r20
    6272:	18 82       	st	Y, r1
    6274:	00 97       	sbiw	r24, 0x00	; 0
    6276:	89 f1       	breq	.+98     	; 0x62da <get_token+0x78>
    6278:	fc 01       	movw	r30, r24
    627a:	20 81       	ld	r18, Z
    627c:	22 23       	and	r18, r18
    627e:	79 f1       	breq	.+94     	; 0x62de <get_token+0x7c>
    6280:	1e df       	rcall	.-452    	; 0x60be <skipspaces>
    6282:	7c 01       	movw	r14, r24
    6284:	0c df       	rcall	.-488    	; 0x609e <trim_tail>
    6286:	f7 01       	movw	r30, r14
    6288:	cf 01       	movw	r24, r30
    628a:	21 91       	ld	r18, Z+
    628c:	21 32       	cpi	r18, 0x21	; 33
    628e:	e0 f0       	brcs	.+56     	; 0x62c8 <get_token+0x66>
    6290:	10 16       	cp	r1, r16
    6292:	11 06       	cpc	r1, r17
    6294:	cc f4       	brge	.+50     	; 0x62c8 <get_token+0x66>
    6296:	22 32       	cpi	r18, 0x22	; 34
    6298:	79 f4       	brne	.+30     	; 0x62b8 <get_token+0x56>
    629a:	fc 01       	movw	r30, r24
    629c:	31 96       	adiw	r30, 0x01	; 1
    629e:	0c 0f       	add	r16, r28
    62a0:	1d 1f       	adc	r17, r29
    62a2:	cf 01       	movw	r24, r30
    62a4:	21 91       	ld	r18, Z+
    62a6:	22 23       	and	r18, r18
    62a8:	79 f0       	breq	.+30     	; 0x62c8 <get_token+0x66>
    62aa:	22 32       	cpi	r18, 0x22	; 34
    62ac:	59 f0       	breq	.+22     	; 0x62c4 <get_token+0x62>
    62ae:	c0 17       	cp	r28, r16
    62b0:	d1 07       	cpc	r29, r17
    62b2:	51 f0       	breq	.+20     	; 0x62c8 <get_token+0x66>
    62b4:	29 93       	st	Y+, r18
    62b6:	f5 cf       	rjmp	.-22     	; 0x62a2 <get_token+0x40>
    62b8:	2c 32       	cpi	r18, 0x2C	; 44
    62ba:	31 f0       	breq	.+12     	; 0x62c8 <get_token+0x66>
    62bc:	29 93       	st	Y+, r18
    62be:	01 50       	subi	r16, 0x01	; 1
    62c0:	11 09       	sbc	r17, r1
    62c2:	e2 cf       	rjmp	.-60     	; 0x6288 <get_token+0x26>
    62c4:	cf 01       	movw	r24, r30
    62c6:	18 82       	st	Y, r1
    62c8:	fa de       	rcall	.-524    	; 0x60be <skipspaces>
    62ca:	fc 01       	movw	r30, r24
    62cc:	80 81       	ld	r24, Z
    62ce:	8c 32       	cpi	r24, 0x2C	; 44
    62d0:	09 f4       	brne	.+2      	; 0x62d4 <get_token+0x72>
    62d2:	31 96       	adiw	r30, 0x01	; 1
    62d4:	18 82       	st	Y, r1
    62d6:	cf 01       	movw	r24, r30
    62d8:	02 c0       	rjmp	.+4      	; 0x62de <get_token+0x7c>
    62da:	80 e0       	ldi	r24, 0x00	; 0
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	cd b7       	in	r28, 0x3d	; 61
    62e0:	de b7       	in	r29, 0x3e	; 62
    62e2:	e6 e0       	ldi	r30, 0x06	; 6
    62e4:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

000062e8 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    62e8:	a2 e0       	ldi	r26, 0x02	; 2
    62ea:	b0 e0       	ldi	r27, 0x00	; 0
    62ec:	ea e7       	ldi	r30, 0x7A	; 122
    62ee:	f1 e3       	ldi	r31, 0x31	; 49
    62f0:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    62f4:	00 97       	sbiw	r24, 0x00	; 0
    62f6:	79 f1       	breq	.+94     	; 0x6356 <get_value+0x6e>
    62f8:	fc 01       	movw	r30, r24
    62fa:	20 81       	ld	r18, Z
    62fc:	22 23       	and	r18, r18
    62fe:	59 f1       	breq	.+86     	; 0x6356 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6300:	de de       	rcall	.-580    	; 0x60be <skipspaces>
    6302:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6304:	6f e2       	ldi	r22, 0x2F	; 47
    6306:	73 e0       	ldi	r23, 0x03	; 3
    6308:	36 df       	rcall	.-404    	; 0x6176 <MATCHI_LEN>
    630a:	00 97       	sbiw	r24, 0x00	; 0
    630c:	29 f0       	breq	.+10     	; 0x6318 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    630e:	08 0f       	add	r16, r24
    6310:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6312:	40 e1       	ldi	r20, 0x10	; 16
    6314:	50 e0       	ldi	r21, 0x00	; 0
    6316:	18 c0       	rjmp	.+48     	; 0x6348 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6318:	62 e3       	ldi	r22, 0x32	; 50
    631a:	73 e0       	ldi	r23, 0x03	; 3
    631c:	c8 01       	movw	r24, r16
    631e:	2b df       	rcall	.-426    	; 0x6176 <MATCHI_LEN>
    6320:	00 97       	sbiw	r24, 0x00	; 0
    6322:	29 f0       	breq	.+10     	; 0x632e <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    6324:	08 0f       	add	r16, r24
    6326:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6328:	48 e0       	ldi	r20, 0x08	; 8
    632a:	50 e0       	ldi	r21, 0x00	; 0
    632c:	0d c0       	rjmp	.+26     	; 0x6348 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    632e:	65 e3       	ldi	r22, 0x35	; 53
    6330:	73 e0       	ldi	r23, 0x03	; 3
    6332:	c8 01       	movw	r24, r16
    6334:	20 df       	rcall	.-448    	; 0x6176 <MATCHI_LEN>
    6336:	00 97       	sbiw	r24, 0x00	; 0
    6338:	29 f0       	breq	.+10     	; 0x6344 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    633a:	08 0f       	add	r16, r24
    633c:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    633e:	42 e0       	ldi	r20, 0x02	; 2
    6340:	50 e0       	ldi	r21, 0x00	; 0
    6342:	02 c0       	rjmp	.+4      	; 0x6348 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6344:	4a e0       	ldi	r20, 0x0A	; 10
    6346:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6348:	be 01       	movw	r22, r28
    634a:	6f 5f       	subi	r22, 0xFF	; 255
    634c:	7f 4f       	sbci	r23, 0xFF	; 255
    634e:	c8 01       	movw	r24, r16
    6350:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    6354:	03 c0       	rjmp	.+6      	; 0x635c <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6356:	60 e0       	ldi	r22, 0x00	; 0
    6358:	70 e0       	ldi	r23, 0x00	; 0
    635a:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    635c:	22 96       	adiw	r28, 0x02	; 2
    635e:	e4 e0       	ldi	r30, 0x04	; 4
    6360:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00006364 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6364:	78 94       	sei
    6366:	08 95       	ret

00006368 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6368:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    636a:	89 e0       	ldi	r24, 0x09	; 9
    636c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6370:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6374:	8f e1       	ldi	r24, 0x1F	; 31
    6376:	9e e4       	ldi	r25, 0x4E	; 78
    6378:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    637c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6380:	ef e6       	ldi	r30, 0x6F	; 111
    6382:	f0 e0       	ldi	r31, 0x00	; 0
    6384:	80 81       	ld	r24, Z
    6386:	82 60       	ori	r24, 0x02	; 2
    6388:	80 83       	st	Z, r24
    sei();
    638a:	78 94       	sei
    638c:	08 95       	ret

0000638e <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    638e:	1f 92       	push	r1
    6390:	0f 92       	push	r0
    6392:	0f b6       	in	r0, 0x3f	; 63
    6394:	0f 92       	push	r0
    6396:	11 24       	eor	r1, r1
    6398:	0b b6       	in	r0, 0x3b	; 59
    639a:	0f 92       	push	r0
    639c:	2f 93       	push	r18
    639e:	3f 93       	push	r19
    63a0:	4f 93       	push	r20
    63a2:	5f 93       	push	r21
    63a4:	6f 93       	push	r22
    63a6:	7f 93       	push	r23
    63a8:	8f 93       	push	r24
    63aa:	9f 93       	push	r25
    63ac:	af 93       	push	r26
    63ae:	bf 93       	push	r27
    63b0:	ef 93       	push	r30
    63b2:	ff 93       	push	r31
    execute_timers();
    63b4:	36 d2       	rcall	.+1132   	; 0x6822 <execute_timers>
}
    63b6:	ff 91       	pop	r31
    63b8:	ef 91       	pop	r30
    63ba:	bf 91       	pop	r27
    63bc:	af 91       	pop	r26
    63be:	9f 91       	pop	r25
    63c0:	8f 91       	pop	r24
    63c2:	7f 91       	pop	r23
    63c4:	6f 91       	pop	r22
    63c6:	5f 91       	pop	r21
    63c8:	4f 91       	pop	r20
    63ca:	3f 91       	pop	r19
    63cc:	2f 91       	pop	r18
    63ce:	0f 90       	pop	r0
    63d0:	0b be       	out	0x3b, r0	; 59
    63d2:	0f 90       	pop	r0
    63d4:	0f be       	out	0x3f, r0	; 63
    63d6:	0f 90       	pop	r0
    63d8:	1f 90       	pop	r1
    63da:	18 95       	reti

000063dc <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    63dc:	0f 93       	push	r16
    63de:	1f 93       	push	r17
    63e0:	cf 93       	push	r28
    63e2:	df 93       	push	r29
    63e4:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    63e6:	f8 94       	cli

    count1 = TCNT1;
    63e8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    63ec:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    63f0:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    63f4:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    63f8:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    63fc:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6400:	80 83       	st	Z, r24
    6402:	91 83       	std	Z+1, r25	; 0x01
    6404:	a2 83       	std	Z+2, r26	; 0x02
    6406:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6408:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    640c:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    6410:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    6414:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6418:	84 83       	std	Z+4, r24	; 0x04
    641a:	95 83       	std	Z+5, r25	; 0x05
    641c:	a6 83       	std	Z+6, r26	; 0x06
    641e:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6420:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6424:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6428:	b1 9b       	sbis	0x16, 1	; 22
    642a:	03 c0       	rjmp	.+6      	; 0x6432 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    642c:	c0 e0       	ldi	r28, 0x00	; 0
    642e:	d0 e0       	ldi	r29, 0x00	; 0
    6430:	3f c0       	rjmp	.+126    	; 0x64b0 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6432:	82 17       	cp	r24, r18
    6434:	93 07       	cpc	r25, r19
    6436:	d0 f1       	brcs	.+116    	; 0x64ac <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6438:	c0 e0       	ldi	r28, 0x00	; 0
    643a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    643c:	40 e0       	ldi	r20, 0x00	; 0
    643e:	50 e0       	ldi	r21, 0x00	; 0
    6440:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6442:	9a 01       	movw	r18, r20
    6444:	ab 01       	movw	r20, r22
    6446:	28 0f       	add	r18, r24
    6448:	39 1f       	adc	r19, r25
    644a:	41 1d       	adc	r20, r1
    644c:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    644e:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6450:	a2 e3       	ldi	r26, 0x32	; 50
    6452:	b0 e0       	ldi	r27, 0x00	; 0
    6454:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    6458:	04 81       	ldd	r16, Z+4	; 0x04
    645a:	15 81       	ldd	r17, Z+5	; 0x05
    645c:	26 81       	ldd	r18, Z+6	; 0x06
    645e:	37 81       	ldd	r19, Z+7	; 0x07
    6460:	dc 01       	movw	r26, r24
    6462:	cb 01       	movw	r24, r22
    6464:	80 0f       	add	r24, r16
    6466:	91 1f       	adc	r25, r17
    6468:	a2 1f       	adc	r26, r18
    646a:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    646c:	81 15       	cp	r24, r1
    646e:	2a ec       	ldi	r18, 0xCA	; 202
    6470:	92 07       	cpc	r25, r18
    6472:	2a e9       	ldi	r18, 0x9A	; 154
    6474:	a2 07       	cpc	r26, r18
    6476:	2b e3       	ldi	r18, 0x3B	; 59
    6478:	b2 07       	cpc	r27, r18
    647a:	2c f4       	brge	.+10     	; 0x6486 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    647c:	84 83       	std	Z+4, r24	; 0x04
    647e:	95 83       	std	Z+5, r25	; 0x05
    6480:	a6 83       	std	Z+6, r26	; 0x06
    6482:	b7 83       	std	Z+7, r27	; 0x07
    6484:	1a c0       	rjmp	.+52     	; 0x64ba <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6486:	9a 5c       	subi	r25, 0xCA	; 202
    6488:	aa 49       	sbci	r26, 0x9A	; 154
    648a:	bb 43       	sbci	r27, 0x3B	; 59
    648c:	84 83       	std	Z+4, r24	; 0x04
    648e:	95 83       	std	Z+5, r25	; 0x05
    6490:	a6 83       	std	Z+6, r26	; 0x06
    6492:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6494:	80 81       	ld	r24, Z
    6496:	91 81       	ldd	r25, Z+1	; 0x01
    6498:	a2 81       	ldd	r26, Z+2	; 0x02
    649a:	b3 81       	ldd	r27, Z+3	; 0x03
    649c:	01 96       	adiw	r24, 0x01	; 1
    649e:	a1 1d       	adc	r26, r1
    64a0:	b1 1d       	adc	r27, r1
    64a2:	80 83       	st	Z, r24
    64a4:	91 83       	std	Z+1, r25	; 0x01
    64a6:	a2 83       	std	Z+2, r26	; 0x02
    64a8:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    64aa:	07 c0       	rjmp	.+14     	; 0x64ba <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    64ac:	cf ef       	ldi	r28, 0xFF	; 255
    64ae:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    64b0:	40 e2       	ldi	r20, 0x20	; 32
    64b2:	5e e4       	ldi	r21, 0x4E	; 78
    64b4:	60 e0       	ldi	r22, 0x00	; 0
    64b6:	70 e0       	ldi	r23, 0x00	; 0
    64b8:	c4 cf       	rjmp	.-120    	; 0x6442 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    64ba:	ce 01       	movw	r24, r28
    64bc:	df 91       	pop	r29
    64be:	cf 91       	pop	r28
    64c0:	1f 91       	pop	r17
    64c2:	0f 91       	pop	r16
    64c4:	08 95       	ret

000064c6 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    64c6:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    64ca:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    64ce:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    64d2:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    64d6:	80 5c       	subi	r24, 0xC0	; 192
    64d8:	9d 4b       	sbci	r25, 0xBD	; 189
    64da:	a0 4f       	sbci	r26, 0xF0	; 240
    64dc:	bf 4f       	sbci	r27, 0xFF	; 255
    64de:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    64e2:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    64e6:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    64ea:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    64ee:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    64f2:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    64f6:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    64fa:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    64fe:	81 15       	cp	r24, r1
    6500:	9a 4c       	sbci	r25, 0xCA	; 202
    6502:	aa 49       	sbci	r26, 0x9A	; 154
    6504:	bb 43       	sbci	r27, 0x3B	; 59
    6506:	dc f0       	brlt	.+54     	; 0x653e <clock_task+0x78>
    6508:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    650c:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    6510:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    6514:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    6518:	01 96       	adiw	r24, 0x01	; 1
    651a:	a1 1d       	adc	r26, r1
    651c:	b1 1d       	adc	r27, r1
    651e:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    6522:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    6526:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    652a:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    652e:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x4>
    6532:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <__clock+0x5>
    6536:	10 92 56 1a 	sts	0x1A56, r1	; 0x801a56 <__clock+0x6>
    653a:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x7>
    653e:	08 95       	ret

00006540 <clock_settime.part.2>:
    6540:	fc 01       	movw	r30, r24
    6542:	84 81       	ldd	r24, Z+4	; 0x04
    6544:	95 81       	ldd	r25, Z+5	; 0x05
    6546:	a6 81       	ldd	r26, Z+6	; 0x06
    6548:	b7 81       	ldd	r27, Z+7	; 0x07
    654a:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <__clock+0x4>
    654e:	90 93 55 1a 	sts	0x1A55, r25	; 0x801a55 <__clock+0x5>
    6552:	a0 93 56 1a 	sts	0x1A56, r26	; 0x801a56 <__clock+0x6>
    6556:	b0 93 57 1a 	sts	0x1A57, r27	; 0x801a57 <__clock+0x7>
    655a:	80 81       	ld	r24, Z
    655c:	91 81       	ldd	r25, Z+1	; 0x01
    655e:	a2 81       	ldd	r26, Z+2	; 0x02
    6560:	b3 81       	ldd	r27, Z+3	; 0x03
    6562:	80 93 50 1a 	sts	0x1A50, r24	; 0x801a50 <__clock>
    6566:	90 93 51 1a 	sts	0x1A51, r25	; 0x801a51 <__clock+0x1>
    656a:	a0 93 52 1a 	sts	0x1A52, r26	; 0x801a52 <__clock+0x2>
    656e:	b0 93 53 1a 	sts	0x1A53, r27	; 0x801a53 <__clock+0x3>
    6572:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <__clock+0x4>
    6576:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <__clock+0x5>
    657a:	a0 91 56 1a 	lds	r26, 0x1A56	; 0x801a56 <__clock+0x6>
    657e:	b0 91 57 1a 	lds	r27, 0x1A57	; 0x801a57 <__clock+0x7>
    6582:	44 81       	ldd	r20, Z+4	; 0x04
    6584:	55 81       	ldd	r21, Z+5	; 0x05
    6586:	66 81       	ldd	r22, Z+6	; 0x06
    6588:	77 81       	ldd	r23, Z+7	; 0x07
    658a:	48 17       	cp	r20, r24
    658c:	59 07       	cpc	r21, r25
    658e:	6a 07       	cpc	r22, r26
    6590:	7b 07       	cpc	r23, r27
    6592:	b9 f6       	brne	.-82     	; 0x6542 <clock_settime.part.2+0x2>
    6594:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <__clock>
    6598:	90 91 51 1a 	lds	r25, 0x1A51	; 0x801a51 <__clock+0x1>
    659c:	a0 91 52 1a 	lds	r26, 0x1A52	; 0x801a52 <__clock+0x2>
    65a0:	b0 91 53 1a 	lds	r27, 0x1A53	; 0x801a53 <__clock+0x3>
    65a4:	40 81       	ld	r20, Z
    65a6:	51 81       	ldd	r21, Z+1	; 0x01
    65a8:	62 81       	ldd	r22, Z+2	; 0x02
    65aa:	73 81       	ldd	r23, Z+3	; 0x03
    65ac:	48 17       	cp	r20, r24
    65ae:	59 07       	cpc	r21, r25
    65b0:	6a 07       	cpc	r22, r26
    65b2:	7b 07       	cpc	r23, r27
    65b4:	31 f6       	brne	.-116    	; 0x6542 <clock_settime.part.2+0x2>
    65b6:	80 e0       	ldi	r24, 0x00	; 0
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	08 95       	ret

000065bc <set_timers>:
    65bc:	00 d0       	rcall	.+0      	; 0x65be <set_timers+0x2>
    65be:	1f 92       	push	r1
    65c0:	00 97       	sbiw	r24, 0x00	; 0
    65c2:	79 f1       	breq	.+94     	; 0x6622 <set_timers+0x66>
    65c4:	e8 e5       	ldi	r30, 0x58	; 88
    65c6:	fa e1       	ldi	r31, 0x1A	; 26
    65c8:	4f ef       	ldi	r20, 0xFF	; 255
    65ca:	5f ef       	ldi	r21, 0xFF	; 255
    65cc:	20 e0       	ldi	r18, 0x00	; 0
    65ce:	30 e0       	ldi	r19, 0x00	; 0
    65d0:	60 81       	ld	r22, Z
    65d2:	71 81       	ldd	r23, Z+1	; 0x01
    65d4:	86 17       	cp	r24, r22
    65d6:	97 07       	cpc	r25, r23
    65d8:	79 f0       	breq	.+30     	; 0x65f8 <set_timers+0x3c>
    65da:	67 2b       	or	r22, r23
    65dc:	71 f4       	brne	.+28     	; 0x65fa <set_timers+0x3e>
    65de:	f9 01       	movw	r30, r18
    65e0:	ee 0f       	add	r30, r30
    65e2:	ff 1f       	adc	r31, r31
    65e4:	e2 0f       	add	r30, r18
    65e6:	f3 1f       	adc	r31, r19
    65e8:	e8 5a       	subi	r30, 0xA8	; 168
    65ea:	f5 4e       	sbci	r31, 0xE5	; 229
    65ec:	91 83       	std	Z+1, r25	; 0x01
    65ee:	80 83       	st	Z, r24
    65f0:	81 e0       	ldi	r24, 0x01	; 1
    65f2:	82 83       	std	Z+2, r24	; 0x02
    65f4:	c9 01       	movw	r24, r18
    65f6:	19 c0       	rjmp	.+50     	; 0x662a <set_timers+0x6e>
    65f8:	a9 01       	movw	r20, r18
    65fa:	2f 5f       	subi	r18, 0xFF	; 255
    65fc:	3f 4f       	sbci	r19, 0xFF	; 255
    65fe:	33 96       	adiw	r30, 0x03	; 3
    6600:	28 30       	cpi	r18, 0x08	; 8
    6602:	31 05       	cpc	r19, r1
    6604:	29 f7       	brne	.-54     	; 0x65d0 <set_timers+0x14>
    6606:	4f 3f       	cpi	r20, 0xFF	; 255
    6608:	8f ef       	ldi	r24, 0xFF	; 255
    660a:	58 07       	cpc	r21, r24
    660c:	69 f4       	brne	.+26     	; 0x6628 <set_timers+0x6c>
    660e:	8d ec       	ldi	r24, 0xCD	; 205
    6610:	95 e0       	ldi	r25, 0x05	; 5
    6612:	a0 e0       	ldi	r26, 0x00	; 0
    6614:	ed b7       	in	r30, 0x3d	; 61
    6616:	fe b7       	in	r31, 0x3e	; 62
    6618:	81 83       	std	Z+1, r24	; 0x01
    661a:	92 83       	std	Z+2, r25	; 0x02
    661c:	a3 83       	std	Z+3, r26	; 0x03
    661e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    6622:	8f ef       	ldi	r24, 0xFF	; 255
    6624:	9f ef       	ldi	r25, 0xFF	; 255
    6626:	01 c0       	rjmp	.+2      	; 0x662a <set_timers+0x6e>
    6628:	ca 01       	movw	r24, r20
    662a:	0f 90       	pop	r0
    662c:	0f 90       	pop	r0
    662e:	0f 90       	pop	r0
    6630:	08 95       	ret

00006632 <delete_all_timers>:
    6632:	e8 e5       	ldi	r30, 0x58	; 88
    6634:	fa e1       	ldi	r31, 0x1A	; 26
    6636:	12 82       	std	Z+2, r1	; 0x02
    6638:	11 82       	std	Z+1, r1	; 0x01
    663a:	10 82       	st	Z, r1
    663c:	33 96       	adiw	r30, 0x03	; 3
    663e:	8a e1       	ldi	r24, 0x1A	; 26
    6640:	e0 37       	cpi	r30, 0x70	; 112
    6642:	f8 07       	cpc	r31, r24
    6644:	c1 f7       	brne	.-16     	; 0x6636 <delete_all_timers+0x4>
    6646:	08 95       	ret

00006648 <subtract_timespec>:
    6648:	0f 93       	push	r16
    664a:	1f 93       	push	r17
    664c:	cf 93       	push	r28
    664e:	df 93       	push	r29
    6650:	fc 01       	movw	r30, r24
    6652:	84 81       	ldd	r24, Z+4	; 0x04
    6654:	95 81       	ldd	r25, Z+5	; 0x05
    6656:	a6 81       	ldd	r26, Z+6	; 0x06
    6658:	b7 81       	ldd	r27, Z+7	; 0x07
    665a:	eb 01       	movw	r28, r22
    665c:	0c 81       	ldd	r16, Y+4	; 0x04
    665e:	1d 81       	ldd	r17, Y+5	; 0x05
    6660:	2e 81       	ldd	r18, Y+6	; 0x06
    6662:	3f 81       	ldd	r19, Y+7	; 0x07
    6664:	80 1b       	sub	r24, r16
    6666:	91 0b       	sbc	r25, r17
    6668:	a2 0b       	sbc	r26, r18
    666a:	b3 0b       	sbc	r27, r19
    666c:	b7 fd       	sbrc	r27, 7
    666e:	05 c0       	rjmp	.+10     	; 0x667a <subtract_timespec+0x32>
    6670:	84 83       	std	Z+4, r24	; 0x04
    6672:	95 83       	std	Z+5, r25	; 0x05
    6674:	a6 83       	std	Z+6, r26	; 0x06
    6676:	b7 83       	std	Z+7, r27	; 0x07
    6678:	12 c0       	rjmp	.+36     	; 0x669e <subtract_timespec+0x56>
    667a:	96 53       	subi	r25, 0x36	; 54
    667c:	a5 46       	sbci	r26, 0x65	; 101
    667e:	b4 4c       	sbci	r27, 0xC4	; 196
    6680:	84 83       	std	Z+4, r24	; 0x04
    6682:	95 83       	std	Z+5, r25	; 0x05
    6684:	a6 83       	std	Z+6, r26	; 0x06
    6686:	b7 83       	std	Z+7, r27	; 0x07
    6688:	80 81       	ld	r24, Z
    668a:	91 81       	ldd	r25, Z+1	; 0x01
    668c:	a2 81       	ldd	r26, Z+2	; 0x02
    668e:	b3 81       	ldd	r27, Z+3	; 0x03
    6690:	01 97       	sbiw	r24, 0x01	; 1
    6692:	a1 09       	sbc	r26, r1
    6694:	b1 09       	sbc	r27, r1
    6696:	80 83       	st	Z, r24
    6698:	91 83       	std	Z+1, r25	; 0x01
    669a:	a2 83       	std	Z+2, r26	; 0x02
    669c:	b3 83       	std	Z+3, r27	; 0x03
    669e:	80 81       	ld	r24, Z
    66a0:	91 81       	ldd	r25, Z+1	; 0x01
    66a2:	a2 81       	ldd	r26, Z+2	; 0x02
    66a4:	b3 81       	ldd	r27, Z+3	; 0x03
    66a6:	eb 01       	movw	r28, r22
    66a8:	48 81       	ld	r20, Y
    66aa:	59 81       	ldd	r21, Y+1	; 0x01
    66ac:	6a 81       	ldd	r22, Y+2	; 0x02
    66ae:	7b 81       	ldd	r23, Y+3	; 0x03
    66b0:	84 1b       	sub	r24, r20
    66b2:	95 0b       	sbc	r25, r21
    66b4:	a6 0b       	sbc	r26, r22
    66b6:	b7 0b       	sbc	r27, r23
    66b8:	80 83       	st	Z, r24
    66ba:	91 83       	std	Z+1, r25	; 0x01
    66bc:	a2 83       	std	Z+2, r26	; 0x02
    66be:	b3 83       	std	Z+3, r27	; 0x03
    66c0:	df 91       	pop	r29
    66c2:	cf 91       	pop	r28
    66c4:	1f 91       	pop	r17
    66c6:	0f 91       	pop	r16
    66c8:	08 95       	ret

000066ca <ts_to_str>:
    66ca:	ad b7       	in	r26, 0x3d	; 61
    66cc:	be b7       	in	r27, 0x3e	; 62
    66ce:	1f 97       	sbiw	r26, 0x0f	; 15
    66d0:	0f b6       	in	r0, 0x3f	; 63
    66d2:	f8 94       	cli
    66d4:	be bf       	out	0x3e, r27	; 62
    66d6:	0f be       	out	0x3f, r0	; 63
    66d8:	ad bf       	out	0x3d, r26	; 61
    66da:	fc 01       	movw	r30, r24
    66dc:	44 81       	ldd	r20, Z+4	; 0x04
    66de:	55 81       	ldd	r21, Z+5	; 0x05
    66e0:	66 81       	ldd	r22, Z+6	; 0x06
    66e2:	77 81       	ldd	r23, Z+7	; 0x07
    66e4:	ed b7       	in	r30, 0x3d	; 61
    66e6:	fe b7       	in	r31, 0x3e	; 62
    66e8:	44 87       	std	Z+12, r20	; 0x0c
    66ea:	55 87       	std	Z+13, r21	; 0x0d
    66ec:	66 87       	std	Z+14, r22	; 0x0e
    66ee:	77 87       	std	Z+15, r23	; 0x0f
    66f0:	fc 01       	movw	r30, r24
    66f2:	80 81       	ld	r24, Z
    66f4:	91 81       	ldd	r25, Z+1	; 0x01
    66f6:	a2 81       	ldd	r26, Z+2	; 0x02
    66f8:	b3 81       	ldd	r27, Z+3	; 0x03
    66fa:	ed b7       	in	r30, 0x3d	; 61
    66fc:	fe b7       	in	r31, 0x3e	; 62
    66fe:	80 87       	std	Z+8, r24	; 0x08
    6700:	91 87       	std	Z+9, r25	; 0x09
    6702:	a2 87       	std	Z+10, r26	; 0x0a
    6704:	b3 87       	std	Z+11, r27	; 0x0b
    6706:	83 ec       	ldi	r24, 0xC3	; 195
    6708:	95 e0       	ldi	r25, 0x05	; 5
    670a:	a0 e0       	ldi	r26, 0x00	; 0
    670c:	85 83       	std	Z+5, r24	; 0x05
    670e:	96 83       	std	Z+6, r25	; 0x06
    6710:	a7 83       	std	Z+7, r26	; 0x07
    6712:	8f e1       	ldi	r24, 0x1F	; 31
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	94 83       	std	Z+4, r25	; 0x04
    6718:	83 83       	std	Z+3, r24	; 0x03
    671a:	84 e8       	ldi	r24, 0x84	; 132
    671c:	97 e1       	ldi	r25, 0x17	; 23
    671e:	92 83       	std	Z+2, r25	; 0x02
    6720:	81 83       	std	Z+1, r24	; 0x01
    6722:	0e 94 08 45 	call	0x8a10	; 0x8a10 <snprintf_P>
    6726:	84 e8       	ldi	r24, 0x84	; 132
    6728:	97 e1       	ldi	r25, 0x17	; 23
    672a:	ad b7       	in	r26, 0x3d	; 61
    672c:	be b7       	in	r27, 0x3e	; 62
    672e:	1f 96       	adiw	r26, 0x0f	; 15
    6730:	0f b6       	in	r0, 0x3f	; 63
    6732:	f8 94       	cli
    6734:	be bf       	out	0x3e, r27	; 62
    6736:	0f be       	out	0x3f, r0	; 63
    6738:	ad bf       	out	0x3d, r26	; 61
    673a:	08 95       	ret

0000673c <clock_elapsed_begin>:
    673c:	6c e7       	ldi	r22, 0x7C	; 124
    673e:	77 e1       	ldi	r23, 0x17	; 23
    6740:	80 e0       	ldi	r24, 0x00	; 0
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	4b ce       	rjmp	.-874    	; 0x63dc <clock_gettime>
    6746:	08 95       	ret

00006748 <clock_elapsed_end>:
    6748:	af e0       	ldi	r26, 0x0F	; 15
    674a:	b0 e0       	ldi	r27, 0x00	; 0
    674c:	ea ea       	ldi	r30, 0xAA	; 170
    674e:	f3 e3       	ldi	r31, 0x33	; 51
    6750:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    6754:	8c 01       	movw	r16, r24
    6756:	be 01       	movw	r22, r28
    6758:	68 5f       	subi	r22, 0xF8	; 248
    675a:	7f 4f       	sbci	r23, 0xFF	; 255
    675c:	80 e0       	ldi	r24, 0x00	; 0
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	3d de       	rcall	.-902    	; 0x63dc <clock_gettime>
    6762:	6c e7       	ldi	r22, 0x7C	; 124
    6764:	77 e1       	ldi	r23, 0x17	; 23
    6766:	ce 01       	movw	r24, r28
    6768:	08 96       	adiw	r24, 0x08	; 8
    676a:	6e df       	rcall	.-292    	; 0x6648 <subtract_timespec>
    676c:	01 15       	cp	r16, r1
    676e:	11 05       	cpc	r17, r1
    6770:	b1 f0       	breq	.+44     	; 0x679e <clock_elapsed_end+0x56>
    6772:	f8 01       	movw	r30, r16
    6774:	80 81       	ld	r24, Z
    6776:	88 23       	and	r24, r24
    6778:	91 f0       	breq	.+36     	; 0x679e <clock_elapsed_end+0x56>
    677a:	ce 01       	movw	r24, r28
    677c:	08 96       	adiw	r24, 0x08	; 8
    677e:	a5 df       	rcall	.-182    	; 0x66ca <ts_to_str>
    6780:	ed b7       	in	r30, 0x3d	; 61
    6782:	fe b7       	in	r31, 0x3e	; 62
    6784:	97 83       	std	Z+7, r25	; 0x07
    6786:	86 83       	std	Z+6, r24	; 0x06
    6788:	15 83       	std	Z+5, r17	; 0x05
    678a:	04 83       	std	Z+4, r16	; 0x04
    678c:	85 eb       	ldi	r24, 0xB5	; 181
    678e:	95 e0       	ldi	r25, 0x05	; 5
    6790:	a0 e0       	ldi	r26, 0x00	; 0
    6792:	81 83       	std	Z+1, r24	; 0x01
    6794:	92 83       	std	Z+2, r25	; 0x02
    6796:	a3 83       	std	Z+3, r26	; 0x03
    6798:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    679c:	0f c0       	rjmp	.+30     	; 0x67bc <clock_elapsed_end+0x74>
    679e:	ce 01       	movw	r24, r28
    67a0:	08 96       	adiw	r24, 0x08	; 8
    67a2:	93 df       	rcall	.-218    	; 0x66ca <ts_to_str>
    67a4:	ed b7       	in	r30, 0x3d	; 61
    67a6:	fe b7       	in	r31, 0x3e	; 62
    67a8:	95 83       	std	Z+5, r25	; 0x05
    67aa:	84 83       	std	Z+4, r24	; 0x04
    67ac:	8a ea       	ldi	r24, 0xAA	; 170
    67ae:	95 e0       	ldi	r25, 0x05	; 5
    67b0:	a0 e0       	ldi	r26, 0x00	; 0
    67b2:	81 83       	std	Z+1, r24	; 0x01
    67b4:	92 83       	std	Z+2, r25	; 0x02
    67b6:	a3 83       	std	Z+3, r26	; 0x03
    67b8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    67bc:	2f 96       	adiw	r28, 0x0f	; 15
    67be:	e4 e0       	ldi	r30, 0x04	; 4
    67c0:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

000067c4 <clock_clear>:
    67c4:	a8 e0       	ldi	r26, 0x08	; 8
    67c6:	b0 e0       	ldi	r27, 0x00	; 0
    67c8:	e8 ee       	ldi	r30, 0xE8	; 232
    67ca:	f3 e3       	ldi	r31, 0x33	; 51
    67cc:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    67d0:	1d 82       	std	Y+5, r1	; 0x05
    67d2:	1e 82       	std	Y+6, r1	; 0x06
    67d4:	1f 82       	std	Y+7, r1	; 0x07
    67d6:	18 86       	std	Y+8, r1	; 0x08
    67d8:	19 82       	std	Y+1, r1	; 0x01
    67da:	1a 82       	std	Y+2, r1	; 0x02
    67dc:	1b 82       	std	Y+3, r1	; 0x03
    67de:	1c 82       	std	Y+4, r1	; 0x04
    67e0:	ce 01       	movw	r24, r28
    67e2:	01 96       	adiw	r24, 0x01	; 1
    67e4:	ad de       	rcall	.-678    	; 0x6540 <clock_settime.part.2>
    67e6:	e0 e7       	ldi	r30, 0x70	; 112
    67e8:	fa e1       	ldi	r31, 0x1A	; 26
    67ea:	11 82       	std	Z+1, r1	; 0x01
    67ec:	10 82       	st	Z, r1
    67ee:	13 82       	std	Z+3, r1	; 0x03
    67f0:	12 82       	std	Z+2, r1	; 0x02
    67f2:	28 96       	adiw	r28, 0x08	; 8
    67f4:	e2 e0       	ldi	r30, 0x02	; 2
    67f6:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000067fa <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    67fa:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    67fe:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    6802:	89 2b       	or	r24, r25
    6804:	69 f0       	breq	.+26     	; 0x6820 <enable_timers+0x26>
    6806:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <timers_enabled>
    680a:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <timers_enabled+0x1>
    680e:	89 2b       	or	r24, r25
    6810:	39 f4       	brne	.+14     	; 0x6820 <enable_timers+0x26>
    {
        enable_system_task();
    6812:	a8 dd       	rcall	.-1200   	; 0x6364 <enable_system_task>
        timers_enabled = 1;
    6814:	81 e0       	ldi	r24, 0x01	; 1
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	90 93 a7 17 	sts	0x17A7, r25	; 0x8017a7 <timers_enabled+0x1>
    681c:	80 93 a6 17 	sts	0x17A6, r24	; 0x8017a6 <timers_enabled>
    6820:	08 95       	ret

00006822 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6822:	cf 93       	push	r28
    6824:	df 93       	push	r29
    6826:	c8 e5       	ldi	r28, 0x58	; 88
    6828:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    682a:	8a 81       	ldd	r24, Y+2	; 0x02
    682c:	88 23       	and	r24, r24
    682e:	29 f0       	breq	.+10     	; 0x683a <execute_timers+0x18>
    6830:	e8 81       	ld	r30, Y
    6832:	f9 81       	ldd	r31, Y+1	; 0x01
    6834:	30 97       	sbiw	r30, 0x00	; 0
    6836:	09 f0       	breq	.+2      	; 0x683a <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6838:	09 95       	icall
    683a:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    683c:	8a e1       	ldi	r24, 0x1A	; 26
    683e:	c0 37       	cpi	r28, 0x70	; 112
    6840:	d8 07       	cpc	r29, r24
    6842:	99 f7       	brne	.-26     	; 0x682a <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6844:	df 91       	pop	r29
    6846:	cf 91       	pop	r28
    6848:	08 95       	ret

0000684a <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    684a:	00 d0       	rcall	.+0      	; 0x684c <init_timers+0x2>
    684c:	1f 92       	push	r1
    printf("Timers init called\n");
    684e:	86 e9       	ldi	r24, 0x96	; 150
    6850:	95 e0       	ldi	r25, 0x05	; 5
    6852:	a0 e0       	ldi	r26, 0x00	; 0
    6854:	ed b7       	in	r30, 0x3d	; 61
    6856:	fe b7       	in	r31, 0x3e	; 62
    6858:	81 83       	std	Z+1, r24	; 0x01
    685a:	92 83       	std	Z+2, r25	; 0x02
    685c:	a3 83       	std	Z+3, r26	; 0x03
    685e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    if(!timers_configured)
    6862:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_configured>
    6866:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_configured+0x1>
    686a:	89 2b       	or	r24, r25
    686c:	a9 f4       	brne	.+42     	; 0x6898 <init_timers+0x4e>
    {
        install_timers_isr();
    686e:	7c dd       	rcall	.-1288   	; 0x6368 <install_timers_isr>
        timers_configured = 1;
    6870:	81 e0       	ldi	r24, 0x01	; 1
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_configured+0x1>
    6878:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_configured>
        timers_enabled = 0;
    687c:	10 92 a7 17 	sts	0x17A7, r1	; 0x8017a7 <timers_enabled+0x1>
    6880:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled>
        printf("Timers configured\n");
    6884:	83 e8       	ldi	r24, 0x83	; 131
    6886:	95 e0       	ldi	r25, 0x05	; 5
    6888:	a0 e0       	ldi	r26, 0x00	; 0
    688a:	ed b7       	in	r30, 0x3d	; 61
    688c:	fe b7       	in	r31, 0x3e	; 62
    688e:	81 83       	std	Z+1, r24	; 0x01
    6890:	92 83       	std	Z+2, r25	; 0x02
    6892:	a3 83       	std	Z+3, r26	; 0x03
    6894:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6898:	cc de       	rcall	.-616    	; 0x6632 <delete_all_timers>
    689a:	94 df       	rcall	.-216    	; 0x67c4 <clock_clear>
    printf("Clock Init\n");
    689c:	87 e7       	ldi	r24, 0x77	; 119
    689e:	95 e0       	ldi	r25, 0x05	; 5
    68a0:	a0 e0       	ldi	r26, 0x00	; 0
    68a2:	ed b7       	in	r30, 0x3d	; 61
    68a4:	fe b7       	in	r31, 0x3e	; 62
    68a6:	81 83       	std	Z+1, r24	; 0x01
    68a8:	92 83       	std	Z+2, r25	; 0x02
    68aa:	a3 83       	std	Z+3, r26	; 0x03
    68ac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    68b0:	61 e0       	ldi	r22, 0x01	; 1
    68b2:	70 e0       	ldi	r23, 0x00	; 0
    68b4:	83 e6       	ldi	r24, 0x63	; 99
    68b6:	92 e3       	ldi	r25, 0x32	; 50
    68b8:	81 de       	rcall	.-766    	; 0x65bc <set_timers>
    68ba:	01 96       	adiw	r24, 0x01	; 1
    68bc:	51 f4       	brne	.+20     	; 0x68d2 <init_timers+0x88>
        printf("Clock task init failed\n");
    68be:	8f e5       	ldi	r24, 0x5F	; 95
    68c0:	95 e0       	ldi	r25, 0x05	; 5
    68c2:	a0 e0       	ldi	r26, 0x00	; 0
    68c4:	ed b7       	in	r30, 0x3d	; 61
    68c6:	fe b7       	in	r31, 0x3e	; 62
    68c8:	81 83       	std	Z+1, r24	; 0x01
    68ca:	92 83       	std	Z+2, r25	; 0x02
    68cc:	a3 83       	std	Z+3, r26	; 0x03
    68ce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Clock Installed\n");
    68d2:	8e e4       	ldi	r24, 0x4E	; 78
    68d4:	95 e0       	ldi	r25, 0x05	; 5
    68d6:	a0 e0       	ldi	r26, 0x00	; 0
    68d8:	ed b7       	in	r30, 0x3d	; 61
    68da:	fe b7       	in	r31, 0x3e	; 62
    68dc:	81 83       	std	Z+1, r24	; 0x01
    68de:	92 83       	std	Z+2, r25	; 0x02
    68e0:	a3 83       	std	Z+3, r26	; 0x03
    68e2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    enable_timers();
    68e6:	89 df       	rcall	.-238    	; 0x67fa <enable_timers>

    printf("Timers enabled\n");
    68e8:	8e e3       	ldi	r24, 0x3E	; 62
    68ea:	95 e0       	ldi	r25, 0x05	; 5
    68ec:	a0 e0       	ldi	r26, 0x00	; 0
    68ee:	ed b7       	in	r30, 0x3d	; 61
    68f0:	fe b7       	in	r31, 0x3e	; 62
    68f2:	81 83       	std	Z+1, r24	; 0x01
    68f4:	92 83       	std	Z+2, r25	; 0x02
    68f6:	a3 83       	std	Z+3, r26	; 0x03
    68f8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
}
    68fc:	0f 90       	pop	r0
    68fe:	0f 90       	pop	r0
    6900:	0f 90       	pop	r0
    6902:	08 95       	ret

00006904 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6904:	89 2b       	or	r24, r25
    6906:	81 f4       	brne	.+32     	; 0x6928 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6908:	fb 01       	movw	r30, r22
    690a:	10 82       	st	Z, r1
    690c:	11 82       	std	Z+1, r1	; 0x01
    690e:	12 82       	std	Z+2, r1	; 0x02
    6910:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6912:	80 e4       	ldi	r24, 0x40	; 64
    6914:	92 e4       	ldi	r25, 0x42	; 66
    6916:	af e0       	ldi	r26, 0x0F	; 15
    6918:	b0 e0       	ldi	r27, 0x00	; 0
    691a:	84 83       	std	Z+4, r24	; 0x04
    691c:	95 83       	std	Z+5, r25	; 0x05
    691e:	a6 83       	std	Z+6, r26	; 0x06
    6920:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6922:	80 e0       	ldi	r24, 0x00	; 0
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6928:	8f ef       	ldi	r24, 0xFF	; 255
    692a:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    692c:	08 95       	ret

0000692e <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    692e:	89 2b       	or	r24, r25
    6930:	19 f4       	brne	.+6      	; 0x6938 <clock_settime+0xa>
    6932:	cb 01       	movw	r24, r22
    6934:	05 ce       	rjmp	.-1014   	; 0x6540 <clock_settime.part.2>
    6936:	08 95       	ret
        return(-1);
    6938:	8f ef       	ldi	r24, 0xFF	; 255
    693a:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    693c:	08 95       	ret

0000693e <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    693e:	9c 01       	movw	r18, r24
    6940:	83 70       	andi	r24, 0x03	; 3
    6942:	99 27       	eor	r25, r25
    6944:	00 97       	sbiw	r24, 0x00	; 0
    6946:	69 f4       	brne	.+26     	; 0x6962 <IS_Leap+0x24>
    6948:	2c 36       	cpi	r18, 0x6C	; 108
    694a:	47 e0       	ldi	r20, 0x07	; 7
    694c:	34 07       	cpc	r19, r20
    694e:	59 f0       	breq	.+22     	; 0x6966 <IS_Leap+0x28>
    6950:	51 e0       	ldi	r21, 0x01	; 1
    6952:	40 e0       	ldi	r20, 0x00	; 0
    6954:	24 33       	cpi	r18, 0x34	; 52
    6956:	38 40       	sbci	r19, 0x08	; 8
    6958:	09 f4       	brne	.+2      	; 0x695c <IS_Leap+0x1e>
    695a:	50 e0       	ldi	r21, 0x00	; 0
    695c:	85 2f       	mov	r24, r21
    695e:	94 2f       	mov	r25, r20
    6960:	08 95       	ret
    6962:	80 e0       	ldi	r24, 0x00	; 0
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	08 95       	ret

00006968 <tm_mon_to_ascii>:
    6968:	8c 30       	cpi	r24, 0x0C	; 12
    696a:	91 05       	cpc	r25, r1
    696c:	40 f4       	brcc	.+16     	; 0x697e <tm_mon_to_ascii+0x16>
    696e:	88 0f       	add	r24, r24
    6970:	99 1f       	adc	r25, r25
    6972:	fc 01       	movw	r30, r24
    6974:	e5 5f       	subi	r30, 0xF5	; 245
    6976:	fe 4f       	sbci	r31, 0xFE	; 254
    6978:	80 81       	ld	r24, Z
    697a:	91 81       	ldd	r25, Z+1	; 0x01
    697c:	08 95       	ret
    697e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6982:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6986:	08 95       	ret

00006988 <Days_Per_Month>:
    6988:	cf 93       	push	r28
    698a:	df 93       	push	r29
    698c:	8c 30       	cpi	r24, 0x0C	; 12
    698e:	91 05       	cpc	r25, r1
    6990:	24 f0       	brlt	.+8      	; 0x699a <Days_Per_Month+0x12>
    6992:	6f 5f       	subi	r22, 0xFF	; 255
    6994:	7f 4f       	sbci	r23, 0xFF	; 255
    6996:	0c 97       	sbiw	r24, 0x0c	; 12
    6998:	f9 cf       	rjmp	.-14     	; 0x698c <Days_Per_Month+0x4>
    699a:	97 ff       	sbrs	r25, 7
    699c:	04 c0       	rjmp	.+8      	; 0x69a6 <Days_Per_Month+0x1e>
    699e:	61 50       	subi	r22, 0x01	; 1
    69a0:	71 09       	sbc	r23, r1
    69a2:	0c 96       	adiw	r24, 0x0c	; 12
    69a4:	fa cf       	rjmp	.-12     	; 0x699a <Days_Per_Month+0x12>
    69a6:	fc 01       	movw	r30, r24
    69a8:	ee 0f       	add	r30, r30
    69aa:	ff 1f       	adc	r31, r31
    69ac:	e8 57       	subi	r30, 0x78	; 120
    69ae:	fc 4f       	sbci	r31, 0xFC	; 252
    69b0:	c0 81       	ld	r28, Z
    69b2:	d1 81       	ldd	r29, Z+1	; 0x01
    69b4:	01 97       	sbiw	r24, 0x01	; 1
    69b6:	29 f4       	brne	.+10     	; 0x69c2 <Days_Per_Month+0x3a>
    69b8:	cb 01       	movw	r24, r22
    69ba:	c1 df       	rcall	.-126    	; 0x693e <IS_Leap>
    69bc:	89 2b       	or	r24, r25
    69be:	09 f0       	breq	.+2      	; 0x69c2 <Days_Per_Month+0x3a>
    69c0:	21 96       	adiw	r28, 0x01	; 1
    69c2:	ce 01       	movw	r24, r28
    69c4:	df 91       	pop	r29
    69c6:	cf 91       	pop	r28
    69c8:	08 95       	ret

000069ca <time_to_tm>:
    69ca:	a0 e0       	ldi	r26, 0x00	; 0
    69cc:	b0 e0       	ldi	r27, 0x00	; 0
    69ce:	eb ee       	ldi	r30, 0xEB	; 235
    69d0:	f4 e3       	ldi	r31, 0x34	; 52
    69d2:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
    69d6:	e8 01       	movw	r28, r16
    69d8:	e6 e1       	ldi	r30, 0x16	; 22
    69da:	d8 01       	movw	r26, r16
    69dc:	1d 92       	st	X+, r1
    69de:	ea 95       	dec	r30
    69e0:	e9 f7       	brne	.-6      	; 0x69dc <time_to_tm+0x12>
    69e2:	61 15       	cp	r22, r1
    69e4:	bd e5       	ldi	r27, 0x5D	; 93
    69e6:	7b 07       	cpc	r23, r27
    69e8:	bd ef       	ldi	r27, 0xFD	; 253
    69ea:	8b 07       	cpc	r24, r27
    69ec:	bf ef       	ldi	r27, 0xFF	; 255
    69ee:	9b 07       	cpc	r25, r27
    69f0:	08 f0       	brcs	.+2      	; 0x69f4 <time_to_tm+0x2a>
    69f2:	c0 c0       	rjmp	.+384    	; 0x6b74 <time_to_tm+0x1aa>
    69f4:	6b 01       	movw	r12, r22
    69f6:	7c 01       	movw	r14, r24
    69f8:	c2 1a       	sub	r12, r18
    69fa:	d3 0a       	sbc	r13, r19
    69fc:	e4 0a       	sbc	r14, r20
    69fe:	f5 0a       	sbc	r15, r21
    6a00:	46 01       	movw	r8, r12
    6a02:	57 01       	movw	r10, r14
    6a04:	e0 e8       	ldi	r30, 0x80	; 128
    6a06:	ce 16       	cp	r12, r30
    6a08:	ee ea       	ldi	r30, 0xAE	; 174
    6a0a:	de 06       	cpc	r13, r30
    6a0c:	ee ef       	ldi	r30, 0xFE	; 254
    6a0e:	ee 06       	cpc	r14, r30
    6a10:	ef ef       	ldi	r30, 0xFF	; 255
    6a12:	fe 06       	cpc	r15, r30
    6a14:	50 f0       	brcs	.+20     	; 0x6a2a <time_to_tm+0x60>
    6a16:	80 e8       	ldi	r24, 0x80	; 128
    6a18:	88 0e       	add	r8, r24
    6a1a:	81 e5       	ldi	r24, 0x51	; 81
    6a1c:	98 1e       	adc	r9, r24
    6a1e:	81 e0       	ldi	r24, 0x01	; 1
    6a20:	a8 1e       	adc	r10, r24
    6a22:	b1 1c       	adc	r11, r1
    6a24:	01 e0       	ldi	r16, 0x01	; 1
    6a26:	10 e0       	ldi	r17, 0x00	; 0
    6a28:	02 c0       	rjmp	.+4      	; 0x6a2e <time_to_tm+0x64>
    6a2a:	00 e0       	ldi	r16, 0x00	; 0
    6a2c:	10 e0       	ldi	r17, 0x00	; 0
    6a2e:	8c e3       	ldi	r24, 0x3C	; 60
    6a30:	48 2e       	mov	r4, r24
    6a32:	51 2c       	mov	r5, r1
    6a34:	61 2c       	mov	r6, r1
    6a36:	71 2c       	mov	r7, r1
    6a38:	c5 01       	movw	r24, r10
    6a3a:	b4 01       	movw	r22, r8
    6a3c:	a3 01       	movw	r20, r6
    6a3e:	92 01       	movw	r18, r4
    6a40:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    6a44:	79 83       	std	Y+1, r23	; 0x01
    6a46:	68 83       	st	Y, r22
    6a48:	ca 01       	movw	r24, r20
    6a4a:	b9 01       	movw	r22, r18
    6a4c:	a3 01       	movw	r20, r6
    6a4e:	92 01       	movw	r18, r4
    6a50:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    6a54:	7b 83       	std	Y+3, r23	; 0x03
    6a56:	6a 83       	std	Y+2, r22	; 0x02
    6a58:	c5 01       	movw	r24, r10
    6a5a:	b4 01       	movw	r22, r8
    6a5c:	20 e1       	ldi	r18, 0x10	; 16
    6a5e:	3e e0       	ldi	r19, 0x0E	; 14
    6a60:	40 e0       	ldi	r20, 0x00	; 0
    6a62:	50 e0       	ldi	r21, 0x00	; 0
    6a64:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    6a68:	ca 01       	movw	r24, r20
    6a6a:	b9 01       	movw	r22, r18
    6a6c:	28 e1       	ldi	r18, 0x18	; 24
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	40 e0       	ldi	r20, 0x00	; 0
    6a72:	50 e0       	ldi	r21, 0x00	; 0
    6a74:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    6a78:	7d 83       	std	Y+5, r23	; 0x05
    6a7a:	6c 83       	std	Y+4, r22	; 0x04
    6a7c:	01 15       	cp	r16, r1
    6a7e:	11 05       	cpc	r17, r1
    6a80:	89 f0       	breq	.+34     	; 0x6aa4 <time_to_tm+0xda>
    6a82:	85 e4       	ldi	r24, 0x45	; 69
    6a84:	90 e0       	ldi	r25, 0x00	; 0
    6a86:	9b 87       	std	Y+11, r25	; 0x0b
    6a88:	8a 87       	std	Y+10, r24	; 0x0a
    6a8a:	8b e0       	ldi	r24, 0x0B	; 11
    6a8c:	90 e0       	ldi	r25, 0x00	; 0
    6a8e:	99 87       	std	Y+9, r25	; 0x09
    6a90:	88 87       	std	Y+8, r24	; 0x08
    6a92:	8f e1       	ldi	r24, 0x1F	; 31
    6a94:	90 e0       	ldi	r25, 0x00	; 0
    6a96:	9f 83       	std	Y+7, r25	; 0x07
    6a98:	8e 83       	std	Y+6, r24	; 0x06
    6a9a:	83 e0       	ldi	r24, 0x03	; 3
    6a9c:	90 e0       	ldi	r25, 0x00	; 0
    6a9e:	9d 87       	std	Y+13, r25	; 0x0d
    6aa0:	8c 87       	std	Y+12, r24	; 0x0c
    6aa2:	65 c0       	rjmp	.+202    	; 0x6b6e <time_to_tm+0x1a4>
    6aa4:	c5 01       	movw	r24, r10
    6aa6:	b4 01       	movw	r22, r8
    6aa8:	20 e8       	ldi	r18, 0x80	; 128
    6aaa:	31 e5       	ldi	r19, 0x51	; 81
    6aac:	41 e0       	ldi	r20, 0x01	; 1
    6aae:	50 e0       	ldi	r21, 0x00	; 0
    6ab0:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    6ab4:	49 01       	movw	r8, r18
    6ab6:	5a 01       	movw	r10, r20
    6ab8:	ca 01       	movw	r24, r20
    6aba:	b9 01       	movw	r22, r18
    6abc:	6c 5f       	subi	r22, 0xFC	; 252
    6abe:	7f 4f       	sbci	r23, 0xFF	; 255
    6ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac4:	27 e0       	ldi	r18, 0x07	; 7
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	40 e0       	ldi	r20, 0x00	; 0
    6aca:	50 e0       	ldi	r21, 0x00	; 0
    6acc:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
    6ad0:	7d 87       	std	Y+13, r23	; 0x0d
    6ad2:	6c 87       	std	Y+12, r22	; 0x0c
    6ad4:	02 eb       	ldi	r16, 0xB2	; 178
    6ad6:	17 e0       	ldi	r17, 0x07	; 7
    6ad8:	c8 01       	movw	r24, r16
    6ada:	31 df       	rcall	.-414    	; 0x693e <IS_Leap>
    6adc:	00 97       	sbiw	r24, 0x00	; 0
    6ade:	19 f4       	brne	.+6      	; 0x6ae6 <time_to_tm+0x11c>
    6ae0:	4d e6       	ldi	r20, 0x6D	; 109
    6ae2:	51 e0       	ldi	r21, 0x01	; 1
    6ae4:	02 c0       	rjmp	.+4      	; 0x6aea <time_to_tm+0x120>
    6ae6:	4e e6       	ldi	r20, 0x6E	; 110
    6ae8:	51 e0       	ldi	r21, 0x01	; 1
    6aea:	05 2e       	mov	r0, r21
    6aec:	00 0c       	add	r0, r0
    6aee:	66 0b       	sbc	r22, r22
    6af0:	77 0b       	sbc	r23, r23
    6af2:	84 16       	cp	r8, r20
    6af4:	95 06       	cpc	r9, r21
    6af6:	a6 06       	cpc	r10, r22
    6af8:	b7 06       	cpc	r11, r23
    6afa:	3c f0       	brlt	.+14     	; 0x6b0a <time_to_tm+0x140>
    6afc:	0f 5f       	subi	r16, 0xFF	; 255
    6afe:	1f 4f       	sbci	r17, 0xFF	; 255
    6b00:	84 1a       	sub	r8, r20
    6b02:	95 0a       	sbc	r9, r21
    6b04:	a6 0a       	sbc	r10, r22
    6b06:	b7 0a       	sbc	r11, r23
    6b08:	e7 cf       	rjmp	.-50     	; 0x6ad8 <time_to_tm+0x10e>
    6b0a:	0c 56       	subi	r16, 0x6C	; 108
    6b0c:	17 40       	sbci	r17, 0x07	; 7
    6b0e:	1b 87       	std	Y+11, r17	; 0x0b
    6b10:	0a 87       	std	Y+10, r16	; 0x0a
    6b12:	9f 86       	std	Y+15, r9	; 0x0f
    6b14:	8e 86       	std	Y+14, r8	; 0x0e
    6b16:	e8 e8       	ldi	r30, 0x88	; 136
    6b18:	f3 e0       	ldi	r31, 0x03	; 3
    6b1a:	20 e0       	ldi	r18, 0x00	; 0
    6b1c:	30 e0       	ldi	r19, 0x00	; 0
    6b1e:	18 14       	cp	r1, r8
    6b20:	19 04       	cpc	r1, r9
    6b22:	1a 04       	cpc	r1, r10
    6b24:	1b 04       	cpc	r1, r11
    6b26:	e4 f4       	brge	.+56     	; 0x6b60 <time_to_tm+0x196>
    6b28:	2c 30       	cpi	r18, 0x0C	; 12
    6b2a:	31 05       	cpc	r19, r1
    6b2c:	c9 f0       	breq	.+50     	; 0x6b60 <time_to_tm+0x196>
    6b2e:	41 91       	ld	r20, Z+
    6b30:	51 91       	ld	r21, Z+
    6b32:	21 30       	cpi	r18, 0x01	; 1
    6b34:	31 05       	cpc	r19, r1
    6b36:	21 f4       	brne	.+8      	; 0x6b40 <time_to_tm+0x176>
    6b38:	00 97       	sbiw	r24, 0x00	; 0
    6b3a:	11 f0       	breq	.+4      	; 0x6b40 <time_to_tm+0x176>
    6b3c:	4f 5f       	subi	r20, 0xFF	; 255
    6b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b40:	05 2e       	mov	r0, r21
    6b42:	00 0c       	add	r0, r0
    6b44:	66 0b       	sbc	r22, r22
    6b46:	77 0b       	sbc	r23, r23
    6b48:	84 16       	cp	r8, r20
    6b4a:	95 06       	cpc	r9, r21
    6b4c:	a6 06       	cpc	r10, r22
    6b4e:	b7 06       	cpc	r11, r23
    6b50:	3c f0       	brlt	.+14     	; 0x6b60 <time_to_tm+0x196>
    6b52:	84 1a       	sub	r8, r20
    6b54:	95 0a       	sbc	r9, r21
    6b56:	a6 0a       	sbc	r10, r22
    6b58:	b7 0a       	sbc	r11, r23
    6b5a:	2f 5f       	subi	r18, 0xFF	; 255
    6b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b5e:	df cf       	rjmp	.-66     	; 0x6b1e <time_to_tm+0x154>
    6b60:	39 87       	std	Y+9, r19	; 0x09
    6b62:	28 87       	std	Y+8, r18	; 0x08
    6b64:	af ef       	ldi	r26, 0xFF	; 255
    6b66:	8a 1a       	sub	r8, r26
    6b68:	9a 0a       	sbc	r9, r26
    6b6a:	9f 82       	std	Y+7, r9	; 0x07
    6b6c:	8e 82       	std	Y+6, r8	; 0x06
    6b6e:	b6 01       	movw	r22, r12
    6b70:	c7 01       	movw	r24, r14
    6b72:	04 c0       	rjmp	.+8      	; 0x6b7c <time_to_tm+0x1b2>
    6b74:	6f ef       	ldi	r22, 0xFF	; 255
    6b76:	7f ef       	ldi	r23, 0xFF	; 255
    6b78:	8f ef       	ldi	r24, 0xFF	; 255
    6b7a:	9f ef       	ldi	r25, 0xFF	; 255
    6b7c:	cd b7       	in	r28, 0x3d	; 61
    6b7e:	de b7       	in	r29, 0x3e	; 62
    6b80:	e0 e1       	ldi	r30, 0x10	; 16
    6b82:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

00006b86 <gmtime_r>:
    6b86:	0f 93       	push	r16
    6b88:	1f 93       	push	r17
    6b8a:	cf 93       	push	r28
    6b8c:	df 93       	push	r29
    6b8e:	eb 01       	movw	r28, r22
    6b90:	fc 01       	movw	r30, r24
    6b92:	60 81       	ld	r22, Z
    6b94:	71 81       	ldd	r23, Z+1	; 0x01
    6b96:	82 81       	ldd	r24, Z+2	; 0x02
    6b98:	93 81       	ldd	r25, Z+3	; 0x03
    6b9a:	8e 01       	movw	r16, r28
    6b9c:	20 e0       	ldi	r18, 0x00	; 0
    6b9e:	30 e0       	ldi	r19, 0x00	; 0
    6ba0:	a9 01       	movw	r20, r18
    6ba2:	13 df       	rcall	.-474    	; 0x69ca <time_to_tm>
    6ba4:	ce 01       	movw	r24, r28
    6ba6:	df 91       	pop	r29
    6ba8:	cf 91       	pop	r28
    6baa:	1f 91       	pop	r17
    6bac:	0f 91       	pop	r16
    6bae:	08 95       	ret

00006bb0 <gmtime>:
    6bb0:	26 ec       	ldi	r18, 0xC6	; 198
    6bb2:	37 e1       	ldi	r19, 0x17	; 23
    6bb4:	30 93 dd 17 	sts	0x17DD, r19	; 0x8017dd <p.3677+0x1>
    6bb8:	20 93 dc 17 	sts	0x17DC, r18	; 0x8017dc <p.3677>
    6bbc:	b9 01       	movw	r22, r18
    6bbe:	e3 df       	rcall	.-58     	; 0x6b86 <gmtime_r>
    6bc0:	86 ec       	ldi	r24, 0xC6	; 198
    6bc2:	97 e1       	ldi	r25, 0x17	; 23
    6bc4:	08 95       	ret

00006bc6 <gettimezone>:
    6bc6:	e0 e7       	ldi	r30, 0x70	; 112
    6bc8:	fa e1       	ldi	r31, 0x1A	; 26
    6bca:	20 81       	ld	r18, Z
    6bcc:	31 81       	ldd	r19, Z+1	; 0x01
    6bce:	dc 01       	movw	r26, r24
    6bd0:	2d 93       	st	X+, r18
    6bd2:	3c 93       	st	X, r19
    6bd4:	22 81       	ldd	r18, Z+2	; 0x02
    6bd6:	33 81       	ldd	r19, Z+3	; 0x03
    6bd8:	fc 01       	movw	r30, r24
    6bda:	33 83       	std	Z+3, r19	; 0x03
    6bdc:	22 83       	std	Z+2, r18	; 0x02
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	08 95       	ret

00006be4 <settimezone>:
    6be4:	cf 93       	push	r28
    6be6:	df 93       	push	r29
    6be8:	ec 01       	movw	r28, r24
    6bea:	28 81       	ld	r18, Y
    6bec:	39 81       	ldd	r19, Y+1	; 0x01
    6bee:	e0 e7       	ldi	r30, 0x70	; 112
    6bf0:	fa e1       	ldi	r31, 0x1A	; 26
    6bf2:	31 83       	std	Z+1, r19	; 0x01
    6bf4:	20 83       	st	Z, r18
    6bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bfa:	93 83       	std	Z+3, r25	; 0x03
    6bfc:	82 83       	std	Z+2, r24	; 0x02
    6bfe:	80 e0       	ldi	r24, 0x00	; 0
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	df 91       	pop	r29
    6c04:	cf 91       	pop	r28
    6c06:	08 95       	ret

00006c08 <gettimeofday>:
    6c08:	a8 e0       	ldi	r26, 0x08	; 8
    6c0a:	b0 e0       	ldi	r27, 0x00	; 0
    6c0c:	ea e0       	ldi	r30, 0x0A	; 10
    6c0e:	f6 e3       	ldi	r31, 0x36	; 54
    6c10:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
    6c14:	8c 01       	movw	r16, r24
    6c16:	7b 01       	movw	r14, r22
    6c18:	be 01       	movw	r22, r28
    6c1a:	6f 5f       	subi	r22, 0xFF	; 255
    6c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c1e:	80 e0       	ldi	r24, 0x00	; 0
    6c20:	90 e0       	ldi	r25, 0x00	; 0
    6c22:	dc db       	rcall	.-2120   	; 0x63dc <clock_gettime>
    6c24:	89 81       	ldd	r24, Y+1	; 0x01
    6c26:	9a 81       	ldd	r25, Y+2	; 0x02
    6c28:	ab 81       	ldd	r26, Y+3	; 0x03
    6c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    6c2c:	f8 01       	movw	r30, r16
    6c2e:	80 83       	st	Z, r24
    6c30:	91 83       	std	Z+1, r25	; 0x01
    6c32:	a2 83       	std	Z+2, r26	; 0x02
    6c34:	b3 83       	std	Z+3, r27	; 0x03
    6c36:	6d 81       	ldd	r22, Y+5	; 0x05
    6c38:	7e 81       	ldd	r23, Y+6	; 0x06
    6c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    6c3c:	98 85       	ldd	r25, Y+8	; 0x08
    6c3e:	28 ee       	ldi	r18, 0xE8	; 232
    6c40:	33 e0       	ldi	r19, 0x03	; 3
    6c42:	40 e0       	ldi	r20, 0x00	; 0
    6c44:	50 e0       	ldi	r21, 0x00	; 0
    6c46:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
    6c4a:	f8 01       	movw	r30, r16
    6c4c:	24 83       	std	Z+4, r18	; 0x04
    6c4e:	35 83       	std	Z+5, r19	; 0x05
    6c50:	46 83       	std	Z+6, r20	; 0x06
    6c52:	57 83       	std	Z+7, r21	; 0x07
    6c54:	c7 01       	movw	r24, r14
    6c56:	b7 df       	rcall	.-146    	; 0x6bc6 <gettimezone>
    6c58:	80 e0       	ldi	r24, 0x00	; 0
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	28 96       	adiw	r28, 0x08	; 8
    6c5e:	e6 e0       	ldi	r30, 0x06	; 6
    6c60:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00006c64 <time>:
    6c64:	cf 93       	push	r28
    6c66:	df 93       	push	r29
    6c68:	ec 01       	movw	r28, r24
    6c6a:	68 ea       	ldi	r22, 0xA8	; 168
    6c6c:	77 e1       	ldi	r23, 0x17	; 23
    6c6e:	80 e0       	ldi	r24, 0x00	; 0
    6c70:	90 e0       	ldi	r25, 0x00	; 0
    6c72:	b4 db       	rcall	.-2200   	; 0x63dc <clock_gettime>
    6c74:	20 97       	sbiw	r28, 0x00	; 0
    6c76:	61 f0       	breq	.+24     	; 0x6c90 <time+0x2c>
    6c78:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3755>
    6c7c:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    6c80:	a0 91 aa 17 	lds	r26, 0x17AA	; 0x8017aa <ts.3755+0x2>
    6c84:	b0 91 ab 17 	lds	r27, 0x17AB	; 0x8017ab <ts.3755+0x3>
    6c88:	88 83       	st	Y, r24
    6c8a:	99 83       	std	Y+1, r25	; 0x01
    6c8c:	aa 83       	std	Y+2, r26	; 0x02
    6c8e:	bb 83       	std	Y+3, r27	; 0x03
    6c90:	60 91 a8 17 	lds	r22, 0x17A8	; 0x8017a8 <ts.3755>
    6c94:	70 91 a9 17 	lds	r23, 0x17A9	; 0x8017a9 <ts.3755+0x1>
    6c98:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <ts.3755+0x2>
    6c9c:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <ts.3755+0x3>
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	08 95       	ret

00006ca6 <is_dst>:
    6ca6:	cf 92       	push	r12
    6ca8:	df 92       	push	r13
    6caa:	ef 92       	push	r14
    6cac:	ff 92       	push	r15
    6cae:	6b 01       	movw	r12, r22
    6cb0:	7c 01       	movw	r14, r24
    6cb2:	05 d4       	rcall	.+2058   	; 0x74be <set_dst>
    6cb4:	80 91 74 1a 	lds	r24, 0x1A74	; 0x801a74 <dst>
    6cb8:	90 91 75 1a 	lds	r25, 0x1A75	; 0x801a75 <dst+0x1>
    6cbc:	a0 91 76 1a 	lds	r26, 0x1A76	; 0x801a76 <dst+0x2>
    6cc0:	b0 91 77 1a 	lds	r27, 0x1A77	; 0x801a77 <dst+0x3>
    6cc4:	c8 16       	cp	r12, r24
    6cc6:	d9 06       	cpc	r13, r25
    6cc8:	ea 06       	cpc	r14, r26
    6cca:	fb 06       	cpc	r15, r27
    6ccc:	88 f0       	brcs	.+34     	; 0x6cf0 <is_dst+0x4a>
    6cce:	81 e0       	ldi	r24, 0x01	; 1
    6cd0:	90 e0       	ldi	r25, 0x00	; 0
    6cd2:	40 91 78 1a 	lds	r20, 0x1A78	; 0x801a78 <dst+0x4>
    6cd6:	50 91 79 1a 	lds	r21, 0x1A79	; 0x801a79 <dst+0x5>
    6cda:	60 91 7a 1a 	lds	r22, 0x1A7A	; 0x801a7a <dst+0x6>
    6cde:	70 91 7b 1a 	lds	r23, 0x1A7B	; 0x801a7b <dst+0x7>
    6ce2:	4c 15       	cp	r20, r12
    6ce4:	5d 05       	cpc	r21, r13
    6ce6:	6e 05       	cpc	r22, r14
    6ce8:	7f 05       	cpc	r23, r15
    6cea:	20 f4       	brcc	.+8      	; 0x6cf4 <is_dst+0x4e>
    6cec:	80 e0       	ldi	r24, 0x00	; 0
    6cee:	02 c0       	rjmp	.+4      	; 0x6cf4 <is_dst+0x4e>
    6cf0:	80 e0       	ldi	r24, 0x00	; 0
    6cf2:	90 e0       	ldi	r25, 0x00	; 0
    6cf4:	ff 90       	pop	r15
    6cf6:	ef 90       	pop	r14
    6cf8:	df 90       	pop	r13
    6cfa:	cf 90       	pop	r12
    6cfc:	08 95       	ret

00006cfe <localtime_r>:
    6cfe:	4f 92       	push	r4
    6d00:	5f 92       	push	r5
    6d02:	6f 92       	push	r6
    6d04:	7f 92       	push	r7
    6d06:	af 92       	push	r10
    6d08:	bf 92       	push	r11
    6d0a:	cf 92       	push	r12
    6d0c:	df 92       	push	r13
    6d0e:	ef 92       	push	r14
    6d10:	ff 92       	push	r15
    6d12:	0f 93       	push	r16
    6d14:	1f 93       	push	r17
    6d16:	cf 93       	push	r28
    6d18:	df 93       	push	r29
    6d1a:	00 d0       	rcall	.+0      	; 0x6d1c <localtime_r+0x1e>
    6d1c:	00 d0       	rcall	.+0      	; 0x6d1e <localtime_r+0x20>
    6d1e:	cd b7       	in	r28, 0x3d	; 61
    6d20:	de b7       	in	r29, 0x3e	; 62
    6d22:	5b 01       	movw	r10, r22
    6d24:	fc 01       	movw	r30, r24
    6d26:	40 80       	ld	r4, Z
    6d28:	51 80       	ldd	r5, Z+1	; 0x01
    6d2a:	62 80       	ldd	r6, Z+2	; 0x02
    6d2c:	73 80       	ldd	r7, Z+3	; 0x03
    6d2e:	ce 01       	movw	r24, r28
    6d30:	01 96       	adiw	r24, 0x01	; 1
    6d32:	49 df       	rcall	.-366    	; 0x6bc6 <gettimezone>
    6d34:	a9 81       	ldd	r26, Y+1	; 0x01
    6d36:	ba 81       	ldd	r27, Y+2	; 0x02
    6d38:	2c e3       	ldi	r18, 0x3C	; 60
    6d3a:	30 e0       	ldi	r19, 0x00	; 0
    6d3c:	0e 94 c7 e2 	call	0x1c58e	; 0x1c58e <__usmulhisi3>
    6d40:	6b 01       	movw	r12, r22
    6d42:	7c 01       	movw	r14, r24
    6d44:	c3 01       	movw	r24, r6
    6d46:	b2 01       	movw	r22, r4
    6d48:	6c 19       	sub	r22, r12
    6d4a:	7d 09       	sbc	r23, r13
    6d4c:	8e 09       	sbc	r24, r14
    6d4e:	9f 09       	sbc	r25, r15
    6d50:	aa df       	rcall	.-172    	; 0x6ca6 <is_dst>
    6d52:	89 2b       	or	r24, r25
    6d54:	31 f0       	breq	.+12     	; 0x6d62 <localtime_r+0x64>
    6d56:	f0 e1       	ldi	r31, 0x10	; 16
    6d58:	cf 1a       	sub	r12, r31
    6d5a:	fe e0       	ldi	r31, 0x0E	; 14
    6d5c:	df 0a       	sbc	r13, r31
    6d5e:	e1 08       	sbc	r14, r1
    6d60:	f1 08       	sbc	r15, r1
    6d62:	85 01       	movw	r16, r10
    6d64:	a7 01       	movw	r20, r14
    6d66:	96 01       	movw	r18, r12
    6d68:	c3 01       	movw	r24, r6
    6d6a:	b2 01       	movw	r22, r4
    6d6c:	2e de       	rcall	.-932    	; 0x69ca <time_to_tm>
    6d6e:	c5 01       	movw	r24, r10
    6d70:	0f 90       	pop	r0
    6d72:	0f 90       	pop	r0
    6d74:	0f 90       	pop	r0
    6d76:	0f 90       	pop	r0
    6d78:	df 91       	pop	r29
    6d7a:	cf 91       	pop	r28
    6d7c:	1f 91       	pop	r17
    6d7e:	0f 91       	pop	r16
    6d80:	ff 90       	pop	r15
    6d82:	ef 90       	pop	r14
    6d84:	df 90       	pop	r13
    6d86:	cf 90       	pop	r12
    6d88:	bf 90       	pop	r11
    6d8a:	af 90       	pop	r10
    6d8c:	7f 90       	pop	r7
    6d8e:	6f 90       	pop	r6
    6d90:	5f 90       	pop	r5
    6d92:	4f 90       	pop	r4
    6d94:	08 95       	ret

00006d96 <localtime>:
    6d96:	60 eb       	ldi	r22, 0xB0	; 176
    6d98:	77 e1       	ldi	r23, 0x17	; 23
    6d9a:	b1 cf       	rjmp	.-158    	; 0x6cfe <localtime_r>
    6d9c:	08 95       	ret

00006d9e <normalize>:
    6d9e:	aa e0       	ldi	r26, 0x0A	; 10
    6da0:	b0 e0       	ldi	r27, 0x00	; 0
    6da2:	e5 ed       	ldi	r30, 0xD5	; 213
    6da4:	f6 e3       	ldi	r31, 0x36	; 54
    6da6:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    6daa:	7c 01       	movw	r14, r24
    6dac:	7a 87       	std	Y+10, r23	; 0x0a
    6dae:	69 87       	std	Y+9, r22	; 0x09
    6db0:	f7 01       	movw	r30, r14
    6db2:	80 81       	ld	r24, Z
    6db4:	91 81       	ldd	r25, Z+1	; 0x01
    6db6:	8c 33       	cpi	r24, 0x3C	; 60
    6db8:	91 05       	cpc	r25, r1
    6dba:	5c f0       	brlt	.+22     	; 0x6dd2 <normalize+0x34>
    6dbc:	f7 01       	movw	r30, r14
    6dbe:	22 81       	ldd	r18, Z+2	; 0x02
    6dc0:	33 81       	ldd	r19, Z+3	; 0x03
    6dc2:	2f 5f       	subi	r18, 0xFF	; 255
    6dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc6:	33 83       	std	Z+3, r19	; 0x03
    6dc8:	22 83       	std	Z+2, r18	; 0x02
    6dca:	cc 97       	sbiw	r24, 0x3c	; 60
    6dcc:	91 83       	std	Z+1, r25	; 0x01
    6dce:	80 83       	st	Z, r24
    6dd0:	ef cf       	rjmp	.-34     	; 0x6db0 <normalize+0x12>
    6dd2:	f7 01       	movw	r30, r14
    6dd4:	01 90       	ld	r0, Z+
    6dd6:	f0 81       	ld	r31, Z
    6dd8:	e0 2d       	mov	r30, r0
    6dda:	fe 83       	std	Y+6, r31	; 0x06
    6ddc:	ed 83       	std	Y+5, r30	; 0x05
    6dde:	f7 ff       	sbrs	r31, 7
    6de0:	0d c0       	rjmp	.+26     	; 0x6dfc <normalize+0x5e>
    6de2:	f7 01       	movw	r30, r14
    6de4:	82 81       	ldd	r24, Z+2	; 0x02
    6de6:	93 81       	ldd	r25, Z+3	; 0x03
    6de8:	01 97       	sbiw	r24, 0x01	; 1
    6dea:	93 83       	std	Z+3, r25	; 0x03
    6dec:	82 83       	std	Z+2, r24	; 0x02
    6dee:	6d 81       	ldd	r22, Y+5	; 0x05
    6df0:	7e 81       	ldd	r23, Y+6	; 0x06
    6df2:	64 5c       	subi	r22, 0xC4	; 196
    6df4:	7f 4f       	sbci	r23, 0xFF	; 255
    6df6:	71 83       	std	Z+1, r23	; 0x01
    6df8:	60 83       	st	Z, r22
    6dfa:	eb cf       	rjmp	.-42     	; 0x6dd2 <normalize+0x34>
    6dfc:	f7 01       	movw	r30, r14
    6dfe:	82 81       	ldd	r24, Z+2	; 0x02
    6e00:	93 81       	ldd	r25, Z+3	; 0x03
    6e02:	8c 33       	cpi	r24, 0x3C	; 60
    6e04:	91 05       	cpc	r25, r1
    6e06:	5c f0       	brlt	.+22     	; 0x6e1e <normalize+0x80>
    6e08:	f7 01       	movw	r30, r14
    6e0a:	24 81       	ldd	r18, Z+4	; 0x04
    6e0c:	35 81       	ldd	r19, Z+5	; 0x05
    6e0e:	2f 5f       	subi	r18, 0xFF	; 255
    6e10:	3f 4f       	sbci	r19, 0xFF	; 255
    6e12:	35 83       	std	Z+5, r19	; 0x05
    6e14:	24 83       	std	Z+4, r18	; 0x04
    6e16:	cc 97       	sbiw	r24, 0x3c	; 60
    6e18:	93 83       	std	Z+3, r25	; 0x03
    6e1a:	82 83       	std	Z+2, r24	; 0x02
    6e1c:	ef cf       	rjmp	.-34     	; 0x6dfc <normalize+0x5e>
    6e1e:	f7 01       	movw	r30, r14
    6e20:	22 80       	ldd	r2, Z+2	; 0x02
    6e22:	33 80       	ldd	r3, Z+3	; 0x03
    6e24:	37 fe       	sbrs	r3, 7
    6e26:	0d c0       	rjmp	.+26     	; 0x6e42 <normalize+0xa4>
    6e28:	f7 01       	movw	r30, r14
    6e2a:	84 81       	ldd	r24, Z+4	; 0x04
    6e2c:	95 81       	ldd	r25, Z+5	; 0x05
    6e2e:	01 97       	sbiw	r24, 0x01	; 1
    6e30:	95 83       	std	Z+5, r25	; 0x05
    6e32:	84 83       	std	Z+4, r24	; 0x04
    6e34:	fc e3       	ldi	r31, 0x3C	; 60
    6e36:	2f 0e       	add	r2, r31
    6e38:	31 1c       	adc	r3, r1
    6e3a:	f7 01       	movw	r30, r14
    6e3c:	33 82       	std	Z+3, r3	; 0x03
    6e3e:	22 82       	std	Z+2, r2	; 0x02
    6e40:	ee cf       	rjmp	.-36     	; 0x6e1e <normalize+0x80>
    6e42:	f7 01       	movw	r30, r14
    6e44:	84 81       	ldd	r24, Z+4	; 0x04
    6e46:	95 81       	ldd	r25, Z+5	; 0x05
    6e48:	88 31       	cpi	r24, 0x18	; 24
    6e4a:	91 05       	cpc	r25, r1
    6e4c:	5c f0       	brlt	.+22     	; 0x6e64 <normalize+0xc6>
    6e4e:	f7 01       	movw	r30, r14
    6e50:	26 81       	ldd	r18, Z+6	; 0x06
    6e52:	37 81       	ldd	r19, Z+7	; 0x07
    6e54:	2f 5f       	subi	r18, 0xFF	; 255
    6e56:	3f 4f       	sbci	r19, 0xFF	; 255
    6e58:	37 83       	std	Z+7, r19	; 0x07
    6e5a:	26 83       	std	Z+6, r18	; 0x06
    6e5c:	48 97       	sbiw	r24, 0x18	; 24
    6e5e:	95 83       	std	Z+5, r25	; 0x05
    6e60:	84 83       	std	Z+4, r24	; 0x04
    6e62:	ef cf       	rjmp	.-34     	; 0x6e42 <normalize+0xa4>
    6e64:	f7 01       	movw	r30, r14
    6e66:	04 81       	ldd	r16, Z+4	; 0x04
    6e68:	15 81       	ldd	r17, Z+5	; 0x05
    6e6a:	17 ff       	sbrs	r17, 7
    6e6c:	0b c0       	rjmp	.+22     	; 0x6e84 <normalize+0xe6>
    6e6e:	f7 01       	movw	r30, r14
    6e70:	86 81       	ldd	r24, Z+6	; 0x06
    6e72:	97 81       	ldd	r25, Z+7	; 0x07
    6e74:	01 97       	sbiw	r24, 0x01	; 1
    6e76:	97 83       	std	Z+7, r25	; 0x07
    6e78:	86 83       	std	Z+6, r24	; 0x06
    6e7a:	08 5e       	subi	r16, 0xE8	; 232
    6e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    6e7e:	15 83       	std	Z+5, r17	; 0x05
    6e80:	04 83       	std	Z+4, r16	; 0x04
    6e82:	f0 cf       	rjmp	.-32     	; 0x6e64 <normalize+0xc6>
    6e84:	f7 01       	movw	r30, r14
    6e86:	80 85       	ldd	r24, Z+8	; 0x08
    6e88:	91 85       	ldd	r25, Z+9	; 0x09
    6e8a:	8c 30       	cpi	r24, 0x0C	; 12
    6e8c:	91 05       	cpc	r25, r1
    6e8e:	5c f0       	brlt	.+22     	; 0x6ea6 <normalize+0x108>
    6e90:	f7 01       	movw	r30, r14
    6e92:	22 85       	ldd	r18, Z+10	; 0x0a
    6e94:	33 85       	ldd	r19, Z+11	; 0x0b
    6e96:	2f 5f       	subi	r18, 0xFF	; 255
    6e98:	3f 4f       	sbci	r19, 0xFF	; 255
    6e9a:	33 87       	std	Z+11, r19	; 0x0b
    6e9c:	22 87       	std	Z+10, r18	; 0x0a
    6e9e:	0c 97       	sbiw	r24, 0x0c	; 12
    6ea0:	91 87       	std	Z+9, r25	; 0x09
    6ea2:	80 87       	std	Z+8, r24	; 0x08
    6ea4:	ef cf       	rjmp	.-34     	; 0x6e84 <normalize+0xe6>
    6ea6:	f7 01       	movw	r30, r14
    6ea8:	80 85       	ldd	r24, Z+8	; 0x08
    6eaa:	91 85       	ldd	r25, Z+9	; 0x09
    6eac:	97 ff       	sbrs	r25, 7
    6eae:	2d c0       	rjmp	.+90     	; 0x6f0a <normalize+0x16c>
    6eb0:	f7 01       	movw	r30, r14
    6eb2:	22 85       	ldd	r18, Z+10	; 0x0a
    6eb4:	33 85       	ldd	r19, Z+11	; 0x0b
    6eb6:	21 50       	subi	r18, 0x01	; 1
    6eb8:	31 09       	sbc	r19, r1
    6eba:	33 87       	std	Z+11, r19	; 0x0b
    6ebc:	22 87       	std	Z+10, r18	; 0x0a
    6ebe:	0c 96       	adiw	r24, 0x0c	; 12
    6ec0:	91 87       	std	Z+9, r25	; 0x09
    6ec2:	80 87       	std	Z+8, r24	; 0x08
    6ec4:	f0 cf       	rjmp	.-32     	; 0x6ea6 <normalize+0x108>
    6ec6:	f7 01       	movw	r30, r14
    6ec8:	c6 80       	ldd	r12, Z+6	; 0x06
    6eca:	d7 80       	ldd	r13, Z+7	; 0x07
    6ecc:	a0 84       	ldd	r10, Z+8	; 0x08
    6ece:	b1 84       	ldd	r11, Z+9	; 0x09
    6ed0:	b4 01       	movw	r22, r8
    6ed2:	c5 01       	movw	r24, r10
    6ed4:	59 dd       	rcall	.-1358   	; 0x6988 <Days_Per_Month>
    6ed6:	8c 15       	cp	r24, r12
    6ed8:	9d 05       	cpc	r25, r13
    6eda:	84 f5       	brge	.+96     	; 0x6f3c <normalize+0x19e>
    6edc:	c8 1a       	sub	r12, r24
    6ede:	d9 0a       	sbc	r13, r25
    6ee0:	f7 01       	movw	r30, r14
    6ee2:	d7 82       	std	Z+7, r13	; 0x07
    6ee4:	c6 82       	std	Z+6, r12	; 0x06
    6ee6:	c5 01       	movw	r24, r10
    6ee8:	01 96       	adiw	r24, 0x01	; 1
    6eea:	91 87       	std	Z+9, r25	; 0x09
    6eec:	80 87       	std	Z+8, r24	; 0x08
    6eee:	0c 97       	sbiw	r24, 0x0c	; 12
    6ef0:	54 f3       	brlt	.-44     	; 0x6ec6 <normalize+0x128>
    6ef2:	fb e0       	ldi	r31, 0x0B	; 11
    6ef4:	af 1a       	sub	r10, r31
    6ef6:	b1 08       	sbc	r11, r1
    6ef8:	f7 01       	movw	r30, r14
    6efa:	b1 86       	std	Z+9, r11	; 0x09
    6efc:	a0 86       	std	Z+8, r10	; 0x08
    6efe:	ff ef       	ldi	r31, 0xFF	; 255
    6f00:	8f 1a       	sub	r8, r31
    6f02:	9f 0a       	sbc	r9, r31
    6f04:	f7 01       	movw	r30, r14
    6f06:	93 86       	std	Z+11, r9	; 0x0b
    6f08:	82 86       	std	Z+10, r8	; 0x0a
    6f0a:	f7 01       	movw	r30, r14
    6f0c:	82 84       	ldd	r8, Z+10	; 0x0a
    6f0e:	93 84       	ldd	r9, Z+11	; 0x0b
    6f10:	da cf       	rjmp	.-76     	; 0x6ec6 <normalize+0x128>
    6f12:	f7 01       	movw	r30, r14
    6f14:	80 85       	ldd	r24, Z+8	; 0x08
    6f16:	91 85       	ldd	r25, Z+9	; 0x09
    6f18:	9c 01       	movw	r18, r24
    6f1a:	21 50       	subi	r18, 0x01	; 1
    6f1c:	31 09       	sbc	r19, r1
    6f1e:	37 fd       	sbrc	r19, 7
    6f20:	16 c0       	rjmp	.+44     	; 0x6f4e <normalize+0x1b0>
    6f22:	31 87       	std	Z+9, r19	; 0x09
    6f24:	20 87       	std	Z+8, r18	; 0x08
    6f26:	f7 01       	movw	r30, r14
    6f28:	62 85       	ldd	r22, Z+10	; 0x0a
    6f2a:	73 85       	ldd	r23, Z+11	; 0x0b
    6f2c:	80 85       	ldd	r24, Z+8	; 0x08
    6f2e:	91 85       	ldd	r25, Z+9	; 0x09
    6f30:	2b dd       	rcall	.-1450   	; 0x6988 <Days_Per_Month>
    6f32:	88 0d       	add	r24, r8
    6f34:	99 1d       	adc	r25, r9
    6f36:	f7 01       	movw	r30, r14
    6f38:	97 83       	std	Z+7, r25	; 0x07
    6f3a:	86 83       	std	Z+6, r24	; 0x06
    6f3c:	f7 01       	movw	r30, r14
    6f3e:	86 80       	ldd	r8, Z+6	; 0x06
    6f40:	97 80       	ldd	r9, Z+7	; 0x07
    6f42:	a2 84       	ldd	r10, Z+10	; 0x0a
    6f44:	b3 84       	ldd	r11, Z+11	; 0x0b
    6f46:	18 14       	cp	r1, r8
    6f48:	19 04       	cpc	r1, r9
    6f4a:	1c f7       	brge	.-58     	; 0x6f12 <normalize+0x174>
    6f4c:	0b c0       	rjmp	.+22     	; 0x6f64 <normalize+0x1c6>
    6f4e:	0b 96       	adiw	r24, 0x0b	; 11
    6f50:	f7 01       	movw	r30, r14
    6f52:	91 87       	std	Z+9, r25	; 0x09
    6f54:	80 87       	std	Z+8, r24	; 0x08
    6f56:	f1 e0       	ldi	r31, 0x01	; 1
    6f58:	af 1a       	sub	r10, r31
    6f5a:	b1 08       	sbc	r11, r1
    6f5c:	f7 01       	movw	r30, r14
    6f5e:	b3 86       	std	Z+11, r11	; 0x0b
    6f60:	a2 86       	std	Z+10, r10	; 0x0a
    6f62:	e1 cf       	rjmp	.-62     	; 0x6f26 <normalize+0x188>
    6f64:	a5 01       	movw	r20, r10
    6f66:	44 59       	subi	r20, 0x94	; 148
    6f68:	58 4f       	sbci	r21, 0xF8	; 248
    6f6a:	58 87       	std	Y+8, r21	; 0x08
    6f6c:	4f 83       	std	Y+7, r20	; 0x07
    6f6e:	35 01       	movw	r6, r10
    6f70:	56 e4       	ldi	r21, 0x46	; 70
    6f72:	65 1a       	sub	r6, r21
    6f74:	71 08       	sbc	r7, r1
    6f76:	89 e8       	ldi	r24, 0x89	; 137
    6f78:	68 16       	cp	r6, r24
    6f7a:	71 04       	cpc	r7, r1
    6f7c:	08 f0       	brcs	.+2      	; 0x6f80 <normalize+0x1e2>
    6f7e:	9b c0       	rjmp	.+310    	; 0x70b6 <normalize+0x318>
    6f80:	c0 84       	ldd	r12, Z+8	; 0x08
    6f82:	d1 84       	ldd	r13, Z+9	; 0x09
    6f84:	9c e0       	ldi	r25, 0x0C	; 12
    6f86:	c9 16       	cp	r12, r25
    6f88:	d1 04       	cpc	r13, r1
    6f8a:	08 f0       	brcs	.+2      	; 0x6f8e <normalize+0x1f0>
    6f8c:	94 c0       	rjmp	.+296    	; 0x70b6 <normalize+0x318>
    6f8e:	24 01       	movw	r4, r8
    6f90:	e1 e0       	ldi	r30, 0x01	; 1
    6f92:	4e 1a       	sub	r4, r30
    6f94:	51 08       	sbc	r5, r1
    6f96:	6f 81       	ldd	r22, Y+7	; 0x07
    6f98:	78 85       	ldd	r23, Y+8	; 0x08
    6f9a:	c6 01       	movw	r24, r12
    6f9c:	f5 dc       	rcall	.-1558   	; 0x6988 <Days_Per_Month>
    6f9e:	48 16       	cp	r4, r24
    6fa0:	59 06       	cpc	r5, r25
    6fa2:	0c f0       	brlt	.+2      	; 0x6fa6 <normalize+0x208>
    6fa4:	88 c0       	rjmp	.+272    	; 0x70b6 <normalize+0x318>
    6fa6:	08 31       	cpi	r16, 0x18	; 24
    6fa8:	11 05       	cpc	r17, r1
    6faa:	0c f0       	brlt	.+2      	; 0x6fae <normalize+0x210>
    6fac:	84 c0       	rjmp	.+264    	; 0x70b6 <normalize+0x318>
    6fae:	fc e3       	ldi	r31, 0x3C	; 60
    6fb0:	2f 16       	cp	r2, r31
    6fb2:	31 04       	cpc	r3, r1
    6fb4:	0c f0       	brlt	.+2      	; 0x6fb8 <normalize+0x21a>
    6fb6:	7f c0       	rjmp	.+254    	; 0x70b6 <normalize+0x318>
    6fb8:	4d 81       	ldd	r20, Y+5	; 0x05
    6fba:	5e 81       	ldd	r21, Y+6	; 0x06
    6fbc:	4c 33       	cpi	r20, 0x3C	; 60
    6fbe:	51 05       	cpc	r21, r1
    6fc0:	0c f0       	brlt	.+2      	; 0x6fc4 <normalize+0x226>
    6fc2:	79 c0       	rjmp	.+242    	; 0x70b6 <normalize+0x318>
    6fc4:	2d e6       	ldi	r18, 0x6D	; 109
    6fc6:	31 e0       	ldi	r19, 0x01	; 1
    6fc8:	d3 01       	movw	r26, r6
    6fca:	0e 94 c7 e2 	call	0x1c58e	; 0x1c58e <__usmulhisi3>
    6fce:	f6 01       	movw	r30, r12
    6fd0:	ee 0f       	add	r30, r30
    6fd2:	ff 1f       	adc	r31, r31
    6fd4:	e0 56       	subi	r30, 0x60	; 96
    6fd6:	fc 4f       	sbci	r31, 0xFC	; 252
    6fd8:	20 81       	ld	r18, Z
    6fda:	31 81       	ldd	r19, Z+1	; 0x01
    6fdc:	dc 01       	movw	r26, r24
    6fde:	cb 01       	movw	r24, r22
    6fe0:	82 0f       	add	r24, r18
    6fe2:	93 1f       	adc	r25, r19
    6fe4:	a1 1d       	adc	r26, r1
    6fe6:	b1 1d       	adc	r27, r1
    6fe8:	05 2c       	mov	r0, r5
    6fea:	00 0c       	add	r0, r0
    6fec:	66 08       	sbc	r6, r6
    6fee:	77 08       	sbc	r7, r7
    6ff0:	48 0e       	add	r4, r24
    6ff2:	59 1e       	adc	r5, r25
    6ff4:	6a 1e       	adc	r6, r26
    6ff6:	7b 1e       	adc	r7, r27
    6ff8:	1a 14       	cp	r1, r10
    6ffa:	1b 04       	cpc	r1, r11
    6ffc:	1c f4       	brge	.+6      	; 0x7004 <normalize+0x266>
    6ffe:	51 e0       	ldi	r21, 0x01	; 1
    7000:	a5 1a       	sub	r10, r21
    7002:	b1 08       	sbc	r11, r1
    7004:	45 01       	movw	r8, r10
    7006:	95 94       	asr	r9
    7008:	87 94       	ror	r8
    700a:	95 94       	asr	r9
    700c:	87 94       	ror	r8
    700e:	88 ec       	ldi	r24, 0xC8	; 200
    7010:	a8 16       	cp	r10, r24
    7012:	b1 04       	cpc	r11, r1
    7014:	1c f0       	brlt	.+6      	; 0x701c <normalize+0x27e>
    7016:	91 e0       	ldi	r25, 0x01	; 1
    7018:	89 1a       	sub	r8, r25
    701a:	91 08       	sbc	r9, r1
    701c:	09 2c       	mov	r0, r9
    701e:	00 0c       	add	r0, r0
    7020:	aa 08       	sbc	r10, r10
    7022:	bb 08       	sbc	r11, r11
    7024:	84 0c       	add	r8, r4
    7026:	95 1c       	adc	r9, r5
    7028:	a6 1c       	adc	r10, r6
    702a:	b7 1c       	adc	r11, r7
    702c:	24 01       	movw	r4, r8
    702e:	35 01       	movw	r6, r10
    7030:	e1 e1       	ldi	r30, 0x11	; 17
    7032:	4e 1a       	sub	r4, r30
    7034:	51 08       	sbc	r5, r1
    7036:	61 08       	sbc	r6, r1
    7038:	71 08       	sbc	r7, r1
    703a:	f2 e0       	ldi	r31, 0x02	; 2
    703c:	cf 16       	cp	r12, r31
    703e:	d1 04       	cpc	r13, r1
    7040:	64 f0       	brlt	.+24     	; 0x705a <normalize+0x2bc>
    7042:	8f 81       	ldd	r24, Y+7	; 0x07
    7044:	98 85       	ldd	r25, Y+8	; 0x08
    7046:	7b dc       	rcall	.-1802   	; 0x693e <IS_Leap>
    7048:	89 2b       	or	r24, r25
    704a:	39 f0       	breq	.+14     	; 0x705a <normalize+0x2bc>
    704c:	24 01       	movw	r4, r8
    704e:	35 01       	movw	r6, r10
    7050:	40 e1       	ldi	r20, 0x10	; 16
    7052:	44 1a       	sub	r4, r20
    7054:	51 08       	sbc	r5, r1
    7056:	61 08       	sbc	r6, r1
    7058:	71 08       	sbc	r7, r1
    705a:	a8 e1       	ldi	r26, 0x18	; 24
    705c:	b0 e0       	ldi	r27, 0x00	; 0
    705e:	a3 01       	movw	r20, r6
    7060:	92 01       	movw	r18, r4
    7062:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    7066:	01 2e       	mov	r0, r17
    7068:	00 0c       	add	r0, r0
    706a:	22 0b       	sbc	r18, r18
    706c:	33 0b       	sbc	r19, r19
    706e:	a9 01       	movw	r20, r18
    7070:	98 01       	movw	r18, r16
    7072:	26 0f       	add	r18, r22
    7074:	37 1f       	adc	r19, r23
    7076:	48 1f       	adc	r20, r24
    7078:	59 1f       	adc	r21, r25
    707a:	ac e3       	ldi	r26, 0x3C	; 60
    707c:	b0 e0       	ldi	r27, 0x00	; 0
    707e:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    7082:	81 01       	movw	r16, r2
    7084:	03 2c       	mov	r0, r3
    7086:	00 0c       	add	r0, r0
    7088:	22 0b       	sbc	r18, r18
    708a:	33 0b       	sbc	r19, r19
    708c:	a9 01       	movw	r20, r18
    708e:	98 01       	movw	r18, r16
    7090:	26 0f       	add	r18, r22
    7092:	37 1f       	adc	r19, r23
    7094:	48 1f       	adc	r20, r24
    7096:	59 1f       	adc	r21, r25
    7098:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    709c:	ed 81       	ldd	r30, Y+5	; 0x05
    709e:	fe 81       	ldd	r31, Y+6	; 0x06
    70a0:	8f 01       	movw	r16, r30
    70a2:	ff 0f       	add	r31, r31
    70a4:	22 0b       	sbc	r18, r18
    70a6:	33 0b       	sbc	r19, r19
    70a8:	48 01       	movw	r8, r16
    70aa:	59 01       	movw	r10, r18
    70ac:	86 0e       	add	r8, r22
    70ae:	97 1e       	adc	r9, r23
    70b0:	a8 1e       	adc	r10, r24
    70b2:	b9 1e       	adc	r11, r25
    70b4:	04 c0       	rjmp	.+8      	; 0x70be <normalize+0x320>
    70b6:	88 24       	eor	r8, r8
    70b8:	8a 94       	dec	r8
    70ba:	98 2c       	mov	r9, r8
    70bc:	54 01       	movw	r10, r8
    70be:	49 85       	ldd	r20, Y+9	; 0x09
    70c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    70c2:	45 2b       	or	r20, r21
    70c4:	e9 f0       	breq	.+58     	; 0x7100 <normalize+0x362>
    70c6:	ce 01       	movw	r24, r28
    70c8:	01 96       	adiw	r24, 0x01	; 1
    70ca:	7d dd       	rcall	.-1286   	; 0x6bc6 <gettimezone>
    70cc:	a9 81       	ldd	r26, Y+1	; 0x01
    70ce:	ba 81       	ldd	r27, Y+2	; 0x02
    70d0:	2c e3       	ldi	r18, 0x3C	; 60
    70d2:	30 e0       	ldi	r19, 0x00	; 0
    70d4:	0e 94 c7 e2 	call	0x1c58e	; 0x1c58e <__usmulhisi3>
    70d8:	2b 01       	movw	r4, r22
    70da:	3c 01       	movw	r6, r24
    70dc:	c5 01       	movw	r24, r10
    70de:	b4 01       	movw	r22, r8
    70e0:	e2 dd       	rcall	.-1084   	; 0x6ca6 <is_dst>
    70e2:	89 2b       	or	r24, r25
    70e4:	51 f0       	breq	.+20     	; 0x70fa <normalize+0x35c>
    70e6:	50 e1       	ldi	r21, 0x10	; 16
    70e8:	45 1a       	sub	r4, r21
    70ea:	5e e0       	ldi	r21, 0x0E	; 14
    70ec:	55 0a       	sbc	r5, r21
    70ee:	61 08       	sbc	r6, r1
    70f0:	71 08       	sbc	r7, r1
    70f2:	cc 24       	eor	r12, r12
    70f4:	c3 94       	inc	r12
    70f6:	d1 2c       	mov	r13, r1
    70f8:	08 c0       	rjmp	.+16     	; 0x710a <normalize+0x36c>
    70fa:	c1 2c       	mov	r12, r1
    70fc:	d1 2c       	mov	r13, r1
    70fe:	05 c0       	rjmp	.+10     	; 0x710a <normalize+0x36c>
    7100:	c1 2c       	mov	r12, r1
    7102:	d1 2c       	mov	r13, r1
    7104:	41 2c       	mov	r4, r1
    7106:	51 2c       	mov	r5, r1
    7108:	32 01       	movw	r6, r4
    710a:	87 01       	movw	r16, r14
    710c:	a3 01       	movw	r20, r6
    710e:	92 01       	movw	r18, r4
    7110:	c5 01       	movw	r24, r10
    7112:	b4 01       	movw	r22, r8
    7114:	5a dc       	rcall	.-1868   	; 0x69ca <time_to_tm>
    7116:	c1 14       	cp	r12, r1
    7118:	d1 04       	cpc	r13, r1
    711a:	29 f0       	breq	.+10     	; 0x7126 <normalize+0x388>
    711c:	21 e0       	ldi	r18, 0x01	; 1
    711e:	30 e0       	ldi	r19, 0x00	; 0
    7120:	f7 01       	movw	r30, r14
    7122:	31 8b       	std	Z+17, r19	; 0x11
    7124:	20 8b       	std	Z+16, r18	; 0x10
    7126:	2a 96       	adiw	r28, 0x0a	; 10
    7128:	e2 e1       	ldi	r30, 0x12	; 18
    712a:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000712e <timegm>:
    712e:	60 e0       	ldi	r22, 0x00	; 0
    7130:	70 e0       	ldi	r23, 0x00	; 0
    7132:	35 ce       	rjmp	.-918    	; 0x6d9e <normalize>
    7134:	08 95       	ret

00007136 <setdate_r>:
    7136:	cf 92       	push	r12
    7138:	df 92       	push	r13
    713a:	ef 92       	push	r14
    713c:	ff 92       	push	r15
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	a5 97       	sbiw	r28, 0x25	; 37
    7148:	0f b6       	in	r0, 0x3f	; 63
    714a:	f8 94       	cli
    714c:	de bf       	out	0x3e, r29	; 62
    714e:	0f be       	out	0x3f, r0	; 63
    7150:	cd bf       	out	0x3d, r28	; 61
    7152:	9d a3       	std	Y+37, r25	; 0x25
    7154:	8c a3       	std	Y+36, r24	; 0x24
    7156:	1f 82       	std	Y+7, r1	; 0x07
    7158:	1e 82       	std	Y+6, r1	; 0x06
    715a:	19 86       	std	Y+9, r1	; 0x09
    715c:	18 86       	std	Y+8, r1	; 0x08
    715e:	1b 86       	std	Y+11, r1	; 0x0b
    7160:	1a 86       	std	Y+10, r1	; 0x0a
    7162:	1d 86       	std	Y+13, r1	; 0x0d
    7164:	1c 86       	std	Y+12, r1	; 0x0c
    7166:	1f 86       	std	Y+15, r1	; 0x0f
    7168:	1e 86       	std	Y+14, r1	; 0x0e
    716a:	19 8a       	std	Y+17, r1	; 0x11
    716c:	18 8a       	std	Y+16, r1	; 0x10
    716e:	8c a1       	ldd	r24, Y+36	; 0x24
    7170:	9d a1       	ldd	r25, Y+37	; 0x25
    7172:	fc 01       	movw	r30, r24
    7174:	20 81       	ld	r18, Z
    7176:	20 32       	cpi	r18, 0x20	; 32
    7178:	21 f4       	brne	.+8      	; 0x7182 <setdate_r+0x4c>
    717a:	01 96       	adiw	r24, 0x01	; 1
    717c:	9d a3       	std	Y+37, r25	; 0x25
    717e:	8c a3       	std	Y+36, r24	; 0x24
    7180:	f6 cf       	rjmp	.-20     	; 0x716e <setdate_r+0x38>
    7182:	4a e0       	ldi	r20, 0x0A	; 10
    7184:	50 e0       	ldi	r21, 0x00	; 0
    7186:	be 01       	movw	r22, r28
    7188:	6c 5d       	subi	r22, 0xDC	; 220
    718a:	7f 4f       	sbci	r23, 0xFF	; 255
    718c:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    7190:	79 8b       	std	Y+17, r23	; 0x11
    7192:	68 8b       	std	Y+16, r22	; 0x10
    7194:	8c a1       	ldd	r24, Y+36	; 0x24
    7196:	9d a1       	ldd	r25, Y+37	; 0x25
    7198:	fc 01       	movw	r30, r24
    719a:	20 81       	ld	r18, Z
    719c:	20 32       	cpi	r18, 0x20	; 32
    719e:	21 f4       	brne	.+8      	; 0x71a8 <setdate_r+0x72>
    71a0:	01 96       	adiw	r24, 0x01	; 1
    71a2:	9d a3       	std	Y+37, r25	; 0x25
    71a4:	8c a3       	std	Y+36, r24	; 0x24
    71a6:	f6 cf       	rjmp	.-20     	; 0x7194 <setdate_r+0x5e>
    71a8:	4a e0       	ldi	r20, 0x0A	; 10
    71aa:	50 e0       	ldi	r21, 0x00	; 0
    71ac:	be 01       	movw	r22, r28
    71ae:	6c 5d       	subi	r22, 0xDC	; 220
    71b0:	7f 4f       	sbci	r23, 0xFF	; 255
    71b2:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    71b6:	7f 87       	std	Y+15, r23	; 0x0f
    71b8:	6e 87       	std	Y+14, r22	; 0x0e
    71ba:	8c a1       	ldd	r24, Y+36	; 0x24
    71bc:	9d a1       	ldd	r25, Y+37	; 0x25
    71be:	fc 01       	movw	r30, r24
    71c0:	20 81       	ld	r18, Z
    71c2:	20 32       	cpi	r18, 0x20	; 32
    71c4:	21 f4       	brne	.+8      	; 0x71ce <setdate_r+0x98>
    71c6:	01 96       	adiw	r24, 0x01	; 1
    71c8:	9d a3       	std	Y+37, r25	; 0x25
    71ca:	8c a3       	std	Y+36, r24	; 0x24
    71cc:	f6 cf       	rjmp	.-20     	; 0x71ba <setdate_r+0x84>
    71ce:	4a e0       	ldi	r20, 0x0A	; 10
    71d0:	50 e0       	ldi	r21, 0x00	; 0
    71d2:	be 01       	movw	r22, r28
    71d4:	6c 5d       	subi	r22, 0xDC	; 220
    71d6:	7f 4f       	sbci	r23, 0xFF	; 255
    71d8:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    71dc:	7d 87       	std	Y+13, r23	; 0x0d
    71de:	6c 87       	std	Y+12, r22	; 0x0c
    71e0:	8c a1       	ldd	r24, Y+36	; 0x24
    71e2:	9d a1       	ldd	r25, Y+37	; 0x25
    71e4:	fc 01       	movw	r30, r24
    71e6:	20 81       	ld	r18, Z
    71e8:	20 32       	cpi	r18, 0x20	; 32
    71ea:	21 f4       	brne	.+8      	; 0x71f4 <setdate_r+0xbe>
    71ec:	01 96       	adiw	r24, 0x01	; 1
    71ee:	9d a3       	std	Y+37, r25	; 0x25
    71f0:	8c a3       	std	Y+36, r24	; 0x24
    71f2:	f6 cf       	rjmp	.-20     	; 0x71e0 <setdate_r+0xaa>
    71f4:	4a e0       	ldi	r20, 0x0A	; 10
    71f6:	50 e0       	ldi	r21, 0x00	; 0
    71f8:	be 01       	movw	r22, r28
    71fa:	6c 5d       	subi	r22, 0xDC	; 220
    71fc:	7f 4f       	sbci	r23, 0xFF	; 255
    71fe:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    7202:	7b 87       	std	Y+11, r23	; 0x0b
    7204:	6a 87       	std	Y+10, r22	; 0x0a
    7206:	ec a1       	ldd	r30, Y+36	; 0x24
    7208:	fd a1       	ldd	r31, Y+37	; 0x25
    720a:	80 81       	ld	r24, Z
    720c:	88 23       	and	r24, r24
    720e:	39 f0       	breq	.+14     	; 0x721e <setdate_r+0xe8>
    7210:	80 32       	cpi	r24, 0x20	; 32
    7212:	11 f0       	breq	.+4      	; 0x7218 <setdate_r+0xe2>
    7214:	8a 33       	cpi	r24, 0x3A	; 58
    7216:	19 f4       	brne	.+6      	; 0x721e <setdate_r+0xe8>
    7218:	31 96       	adiw	r30, 0x01	; 1
    721a:	fd a3       	std	Y+37, r31	; 0x25
    721c:	ec a3       	std	Y+36, r30	; 0x24
    721e:	4a e0       	ldi	r20, 0x0A	; 10
    7220:	50 e0       	ldi	r21, 0x00	; 0
    7222:	be 01       	movw	r22, r28
    7224:	6c 5d       	subi	r22, 0xDC	; 220
    7226:	7f 4f       	sbci	r23, 0xFF	; 255
    7228:	8c a1       	ldd	r24, Y+36	; 0x24
    722a:	9d a1       	ldd	r25, Y+37	; 0x25
    722c:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    7230:	79 87       	std	Y+9, r23	; 0x09
    7232:	68 87       	std	Y+8, r22	; 0x08
    7234:	ec a1       	ldd	r30, Y+36	; 0x24
    7236:	fd a1       	ldd	r31, Y+37	; 0x25
    7238:	80 81       	ld	r24, Z
    723a:	88 23       	and	r24, r24
    723c:	39 f0       	breq	.+14     	; 0x724c <setdate_r+0x116>
    723e:	80 32       	cpi	r24, 0x20	; 32
    7240:	11 f0       	breq	.+4      	; 0x7246 <setdate_r+0x110>
    7242:	8a 33       	cpi	r24, 0x3A	; 58
    7244:	19 f4       	brne	.+6      	; 0x724c <setdate_r+0x116>
    7246:	31 96       	adiw	r30, 0x01	; 1
    7248:	fd a3       	std	Y+37, r31	; 0x25
    724a:	ec a3       	std	Y+36, r30	; 0x24
    724c:	4a e0       	ldi	r20, 0x0A	; 10
    724e:	50 e0       	ldi	r21, 0x00	; 0
    7250:	be 01       	movw	r22, r28
    7252:	6c 5d       	subi	r22, 0xDC	; 220
    7254:	7f 4f       	sbci	r23, 0xFF	; 255
    7256:	8c a1       	ldd	r24, Y+36	; 0x24
    7258:	9d a1       	ldd	r25, Y+37	; 0x25
    725a:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
    725e:	7f 83       	std	Y+7, r23	; 0x07
    7260:	6e 83       	std	Y+6, r22	; 0x06
    7262:	2e 85       	ldd	r18, Y+14	; 0x0e
    7264:	3f 85       	ldd	r19, Y+15	; 0x0f
    7266:	21 50       	subi	r18, 0x01	; 1
    7268:	31 09       	sbc	r19, r1
    726a:	3f 87       	std	Y+15, r19	; 0x0f
    726c:	2e 87       	std	Y+14, r18	; 0x0e
    726e:	88 89       	ldd	r24, Y+16	; 0x10
    7270:	99 89       	ldd	r25, Y+17	; 0x11
    7272:	ac 01       	movw	r20, r24
    7274:	42 5b       	subi	r20, 0xB2	; 178
    7276:	57 40       	sbci	r21, 0x07	; 7
    7278:	45 34       	cpi	r20, 0x45	; 69
    727a:	51 05       	cpc	r21, r1
    727c:	38 f0       	brcs	.+14     	; 0x728c <setdate_r+0x156>
    727e:	ed b7       	in	r30, 0x3d	; 61
    7280:	fe b7       	in	r31, 0x3e	; 62
    7282:	95 83       	std	Z+5, r25	; 0x05
    7284:	84 83       	std	Z+4, r24	; 0x04
    7286:	89 e1       	ldi	r24, 0x19	; 25
    7288:	97 e0       	ldi	r25, 0x07	; 7
    728a:	34 c0       	rjmp	.+104    	; 0x72f4 <setdate_r+0x1be>
    728c:	8c 56       	subi	r24, 0x6C	; 108
    728e:	97 40       	sbci	r25, 0x07	; 7
    7290:	99 8b       	std	Y+17, r25	; 0x11
    7292:	88 8b       	std	Y+16, r24	; 0x10
    7294:	2c 30       	cpi	r18, 0x0C	; 12
    7296:	31 05       	cpc	r19, r1
    7298:	38 f0       	brcs	.+14     	; 0x72a8 <setdate_r+0x172>
    729a:	ed b7       	in	r30, 0x3d	; 61
    729c:	fe b7       	in	r31, 0x3e	; 62
    729e:	95 83       	std	Z+5, r25	; 0x05
    72a0:	84 83       	std	Z+4, r24	; 0x04
    72a2:	88 e0       	ldi	r24, 0x08	; 8
    72a4:	97 e0       	ldi	r25, 0x07	; 7
    72a6:	26 c0       	rjmp	.+76     	; 0x72f4 <setdate_r+0x1be>
    72a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    72aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    72ac:	9c 01       	movw	r18, r24
    72ae:	21 50       	subi	r18, 0x01	; 1
    72b0:	31 09       	sbc	r19, r1
    72b2:	2f 31       	cpi	r18, 0x1F	; 31
    72b4:	31 05       	cpc	r19, r1
    72b6:	38 f0       	brcs	.+14     	; 0x72c6 <setdate_r+0x190>
    72b8:	ed b7       	in	r30, 0x3d	; 61
    72ba:	fe b7       	in	r31, 0x3e	; 62
    72bc:	95 83       	std	Z+5, r25	; 0x05
    72be:	84 83       	std	Z+4, r24	; 0x04
    72c0:	87 ef       	ldi	r24, 0xF7	; 247
    72c2:	96 e0       	ldi	r25, 0x06	; 6
    72c4:	17 c0       	rjmp	.+46     	; 0x72f4 <setdate_r+0x1be>
    72c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    72c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    72ca:	88 31       	cpi	r24, 0x18	; 24
    72cc:	91 05       	cpc	r25, r1
    72ce:	38 f0       	brcs	.+14     	; 0x72de <setdate_r+0x1a8>
    72d0:	ed b7       	in	r30, 0x3d	; 61
    72d2:	fe b7       	in	r31, 0x3e	; 62
    72d4:	95 83       	std	Z+5, r25	; 0x05
    72d6:	84 83       	std	Z+4, r24	; 0x04
    72d8:	85 ee       	ldi	r24, 0xE5	; 229
    72da:	96 e0       	ldi	r25, 0x06	; 6
    72dc:	0b c0       	rjmp	.+22     	; 0x72f4 <setdate_r+0x1be>
    72de:	88 85       	ldd	r24, Y+8	; 0x08
    72e0:	99 85       	ldd	r25, Y+9	; 0x09
    72e2:	8c 33       	cpi	r24, 0x3C	; 60
    72e4:	91 05       	cpc	r25, r1
    72e6:	68 f0       	brcs	.+26     	; 0x7302 <setdate_r+0x1cc>
    72e8:	ed b7       	in	r30, 0x3d	; 61
    72ea:	fe b7       	in	r31, 0x3e	; 62
    72ec:	95 83       	std	Z+5, r25	; 0x05
    72ee:	84 83       	std	Z+4, r24	; 0x04
    72f0:	84 ed       	ldi	r24, 0xD4	; 212
    72f2:	96 e0       	ldi	r25, 0x06	; 6
    72f4:	a0 e0       	ldi	r26, 0x00	; 0
    72f6:	81 83       	std	Z+1, r24	; 0x01
    72f8:	92 83       	std	Z+2, r25	; 0x02
    72fa:	a3 83       	std	Z+3, r26	; 0x03
    72fc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    7300:	25 c0       	rjmp	.+74     	; 0x734c <setdate_r+0x216>
    7302:	ce 01       	movw	r24, r28
    7304:	06 96       	adiw	r24, 0x06	; 6
    7306:	13 df       	rcall	.-474    	; 0x712e <timegm>
    7308:	6b 01       	movw	r12, r22
    730a:	7c 01       	movw	r14, r24
    730c:	6c 8f       	std	Y+28, r22	; 0x1c
    730e:	7d 8f       	std	Y+29, r23	; 0x1d
    7310:	8e 8f       	std	Y+30, r24	; 0x1e
    7312:	9f 8f       	std	Y+31, r25	; 0x1f
    7314:	18 a2       	std	Y+32, r1	; 0x20
    7316:	19 a2       	std	Y+33, r1	; 0x21
    7318:	1a a2       	std	Y+34, r1	; 0x22
    731a:	1b a2       	std	Y+35, r1	; 0x23
    731c:	be 01       	movw	r22, r28
    731e:	64 5e       	subi	r22, 0xE4	; 228
    7320:	7f 4f       	sbci	r23, 0xFF	; 255
    7322:	80 e0       	ldi	r24, 0x00	; 0
    7324:	90 e0       	ldi	r25, 0x00	; 0
    7326:	03 db       	rcall	.-2554   	; 0x692e <clock_settime>
    7328:	b7 01       	movw	r22, r14
    732a:	a6 01       	movw	r20, r12
    732c:	81 e0       	ldi	r24, 0x01	; 1
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <rtc_init>
    7334:	81 11       	cpse	r24, r1
    7336:	0d c0       	rjmp	.+26     	; 0x7352 <setdate_r+0x21c>
    7338:	8d eb       	ldi	r24, 0xBD	; 189
    733a:	96 e0       	ldi	r25, 0x06	; 6
    733c:	a0 e0       	ldi	r26, 0x00	; 0
    733e:	ed b7       	in	r30, 0x3d	; 61
    7340:	fe b7       	in	r31, 0x3e	; 62
    7342:	81 83       	std	Z+1, r24	; 0x01
    7344:	92 83       	std	Z+2, r25	; 0x02
    7346:	a3 83       	std	Z+3, r26	; 0x03
    7348:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    734c:	8f ef       	ldi	r24, 0xFF	; 255
    734e:	9f ef       	ldi	r25, 0xFF	; 255
    7350:	02 c0       	rjmp	.+4      	; 0x7356 <setdate_r+0x220>
    7352:	80 e0       	ldi	r24, 0x00	; 0
    7354:	90 e0       	ldi	r25, 0x00	; 0
    7356:	a5 96       	adiw	r28, 0x25	; 37
    7358:	0f b6       	in	r0, 0x3f	; 63
    735a:	f8 94       	cli
    735c:	de bf       	out	0x3e, r29	; 62
    735e:	0f be       	out	0x3f, r0	; 63
    7360:	cd bf       	out	0x3d, r28	; 61
    7362:	df 91       	pop	r29
    7364:	cf 91       	pop	r28
    7366:	ff 90       	pop	r15
    7368:	ef 90       	pop	r14
    736a:	df 90       	pop	r13
    736c:	cf 90       	pop	r12
    736e:	08 95       	ret

00007370 <setdate>:
    7370:	ab e2       	ldi	r26, 0x2B	; 43
    7372:	b0 e0       	ldi	r27, 0x00	; 0
    7374:	ee eb       	ldi	r30, 0xBE	; 190
    7376:	f9 e3       	ldi	r31, 0x39	; 57
    7378:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    737c:	8b e2       	ldi	r24, 0x2B	; 43
    737e:	97 e0       	ldi	r25, 0x07	; 7
    7380:	a0 e0       	ldi	r26, 0x00	; 0
    7382:	ed b7       	in	r30, 0x3d	; 61
    7384:	fe b7       	in	r31, 0x3e	; 62
    7386:	81 83       	std	Z+1, r24	; 0x01
    7388:	92 83       	std	Z+2, r25	; 0x02
    738a:	a3 83       	std	Z+3, r26	; 0x03
    738c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    7390:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
    7394:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
    7398:	66 e2       	ldi	r22, 0x26	; 38
    739a:	70 e0       	ldi	r23, 0x00	; 0
    739c:	ce 01       	movw	r24, r28
    739e:	04 96       	adiw	r24, 0x04	; 4
    73a0:	0e 94 87 74 	call	0xe90e	; 0xe90e <fgets>
    73a4:	ce 01       	movw	r24, r28
    73a6:	04 96       	adiw	r24, 0x04	; 4
    73a8:	c6 de       	rcall	.-628    	; 0x7136 <setdate_r>
    73aa:	ab 96       	adiw	r28, 0x2b	; 43
    73ac:	e2 e0       	ldi	r30, 0x02	; 2
    73ae:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000073b2 <find_dst>:
    73b2:	a8 e2       	ldi	r26, 0x28	; 40
    73b4:	b0 e0       	ldi	r27, 0x00	; 0
    73b6:	ef ed       	ldi	r30, 0xDF	; 223
    73b8:	f9 e3       	ldi	r31, 0x39	; 57
    73ba:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    73be:	3c 01       	movw	r6, r24
    73c0:	1a 01       	movw	r2, r20
    73c2:	2b 01       	movw	r4, r22
    73c4:	49 01       	movw	r8, r18
    73c6:	1c a3       	std	Y+36, r17	; 0x24
    73c8:	0b a3       	std	Y+35, r16	; 0x23
    73ca:	de a2       	std	Y+38, r13	; 0x26
    73cc:	cd a2       	std	Y+37, r12	; 0x25
    73ce:	b8 a6       	std	Y+40, r11	; 0x28
    73d0:	af a2       	std	Y+39, r10	; 0x27
    73d2:	be 01       	movw	r22, r28
    73d4:	61 5e       	subi	r22, 0xE1	; 225
    73d6:	7f 4f       	sbci	r23, 0xFF	; 255
    73d8:	ce 01       	movw	r24, r28
    73da:	47 96       	adiw	r24, 0x17	; 23
    73dc:	15 dc       	rcall	.-2006   	; 0x6c08 <gettimeofday>
    73de:	af 8d       	ldd	r26, Y+31	; 0x1f
    73e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    73e2:	2c e3       	ldi	r18, 0x3C	; 60
    73e4:	30 e0       	ldi	r19, 0x00	; 0
    73e6:	0e 94 c7 e2 	call	0x1c58e	; 0x1c58e <__usmulhisi3>
    73ea:	5b 01       	movw	r10, r22
    73ec:	6c 01       	movw	r12, r24
    73ee:	61 14       	cp	r6, r1
    73f0:	71 04       	cpc	r7, r1
    73f2:	31 f0       	breq	.+12     	; 0x7400 <find_dst+0x4e>
    73f4:	20 e1       	ldi	r18, 0x10	; 16
    73f6:	a2 1a       	sub	r10, r18
    73f8:	2e e0       	ldi	r18, 0x0E	; 14
    73fa:	b2 0a       	sbc	r11, r18
    73fc:	c1 08       	sbc	r12, r1
    73fe:	d1 08       	sbc	r13, r1
    7400:	81 14       	cp	r8, r1
    7402:	91 04       	cpc	r9, r1
    7404:	39 f0       	breq	.+14     	; 0x7414 <find_dst+0x62>
    7406:	4c e6       	ldi	r20, 0x6C	; 108
    7408:	84 1a       	sub	r8, r20
    740a:	47 e0       	ldi	r20, 0x07	; 7
    740c:	94 0a       	sbc	r9, r20
    740e:	9c 86       	std	Y+12, r9	; 0x0c
    7410:	8b 86       	std	Y+11, r8	; 0x0b
    7412:	11 c0       	rjmp	.+34     	; 0x7436 <find_dst+0x84>
    7414:	21 14       	cp	r2, r1
    7416:	31 04       	cpc	r3, r1
    7418:	41 04       	cpc	r4, r1
    741a:	51 04       	cpc	r5, r1
    741c:	21 f4       	brne	.+8      	; 0x7426 <find_dst+0x74>
    741e:	2f 88       	ldd	r2, Y+23	; 0x17
    7420:	38 8c       	ldd	r3, Y+24	; 0x18
    7422:	49 8c       	ldd	r4, Y+25	; 0x19
    7424:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7426:	8e 01       	movw	r16, r28
    7428:	0f 5f       	subi	r16, 0xFF	; 255
    742a:	1f 4f       	sbci	r17, 0xFF	; 255
    742c:	a6 01       	movw	r20, r12
    742e:	95 01       	movw	r18, r10
    7430:	c2 01       	movw	r24, r4
    7432:	b1 01       	movw	r22, r2
    7434:	ca da       	rcall	.-2668   	; 0x69ca <time_to_tm>
    7436:	8b a1       	ldd	r24, Y+35	; 0x23
    7438:	9c a1       	ldd	r25, Y+36	; 0x24
    743a:	01 97       	sbiw	r24, 0x01	; 1
    743c:	9a 87       	std	Y+10, r25	; 0x0a
    743e:	89 87       	std	Y+9, r24	; 0x09
    7440:	81 e0       	ldi	r24, 0x01	; 1
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	98 87       	std	Y+8, r25	; 0x08
    7446:	8f 83       	std	Y+7, r24	; 0x07
    7448:	8f a1       	ldd	r24, Y+39	; 0x27
    744a:	98 a5       	ldd	r25, Y+40	; 0x28
    744c:	9e 83       	std	Y+6, r25	; 0x06
    744e:	8d 83       	std	Y+5, r24	; 0x05
    7450:	1c 82       	std	Y+4, r1	; 0x04
    7452:	1b 82       	std	Y+3, r1	; 0x03
    7454:	1a 82       	std	Y+2, r1	; 0x02
    7456:	19 82       	std	Y+1, r1	; 0x01
    7458:	ce 01       	movw	r24, r28
    745a:	01 96       	adiw	r24, 0x01	; 1
    745c:	68 de       	rcall	.-816    	; 0x712e <timegm>
    745e:	45 01       	movw	r8, r10
    7460:	56 01       	movw	r10, r12
    7462:	86 0e       	add	r8, r22
    7464:	97 1e       	adc	r9, r23
    7466:	a8 1e       	adc	r10, r24
    7468:	b9 1e       	adc	r11, r25
    746a:	8e 01       	movw	r16, r28
    746c:	0f 5f       	subi	r16, 0xFF	; 255
    746e:	1f 4f       	sbci	r17, 0xFF	; 255
    7470:	20 e0       	ldi	r18, 0x00	; 0
    7472:	30 e0       	ldi	r19, 0x00	; 0
    7474:	a9 01       	movw	r20, r18
    7476:	c5 01       	movw	r24, r10
    7478:	b4 01       	movw	r22, r8
    747a:	a7 da       	rcall	.-2738   	; 0x69ca <time_to_tm>
    747c:	2d 85       	ldd	r18, Y+13	; 0x0d
    747e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7480:	e7 e0       	ldi	r30, 0x07	; 7
    7482:	f0 e0       	ldi	r31, 0x00	; 0
    7484:	c9 01       	movw	r24, r18
    7486:	bf 01       	movw	r22, r30
    7488:	0e 94 6d e2 	call	0x1c4da	; 0x1c4da <__divmodhi4>
    748c:	4d a1       	ldd	r20, Y+37	; 0x25
    748e:	5e a1       	ldd	r21, Y+38	; 0x26
    7490:	48 17       	cp	r20, r24
    7492:	59 07       	cpc	r21, r25
    7494:	21 f4       	brne	.+8      	; 0x749e <find_dst+0xec>
    7496:	51 e0       	ldi	r21, 0x01	; 1
    7498:	e5 1a       	sub	r14, r21
    749a:	f1 08       	sbc	r15, r1
    749c:	51 f0       	breq	.+20     	; 0x74b2 <find_dst+0x100>
    749e:	80 e8       	ldi	r24, 0x80	; 128
    74a0:	88 0e       	add	r8, r24
    74a2:	81 e5       	ldi	r24, 0x51	; 81
    74a4:	98 1e       	adc	r9, r24
    74a6:	81 e0       	ldi	r24, 0x01	; 1
    74a8:	a8 1e       	adc	r10, r24
    74aa:	b1 1c       	adc	r11, r1
    74ac:	2f 5f       	subi	r18, 0xFF	; 255
    74ae:	3f 4f       	sbci	r19, 0xFF	; 255
    74b0:	e9 cf       	rjmp	.-46     	; 0x7484 <find_dst+0xd2>
    74b2:	c5 01       	movw	r24, r10
    74b4:	b4 01       	movw	r22, r8
    74b6:	a8 96       	adiw	r28, 0x28	; 40
    74b8:	e2 e1       	ldi	r30, 0x12	; 18
    74ba:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

000074be <set_dst>:
    74be:	4f 92       	push	r4
    74c0:	5f 92       	push	r5
    74c2:	6f 92       	push	r6
    74c4:	7f 92       	push	r7
    74c6:	af 92       	push	r10
    74c8:	bf 92       	push	r11
    74ca:	cf 92       	push	r12
    74cc:	df 92       	push	r13
    74ce:	ef 92       	push	r14
    74d0:	ff 92       	push	r15
    74d2:	0f 93       	push	r16
    74d4:	1f 93       	push	r17
    74d6:	cf 93       	push	r28
    74d8:	df 93       	push	r29
    74da:	cd b7       	in	r28, 0x3d	; 61
    74dc:	de b7       	in	r29, 0x3e	; 62
    74de:	2c 97       	sbiw	r28, 0x0c	; 12
    74e0:	0f b6       	in	r0, 0x3f	; 63
    74e2:	f8 94       	cli
    74e4:	de bf       	out	0x3e, r29	; 62
    74e6:	0f be       	out	0x3f, r0	; 63
    74e8:	cd bf       	out	0x3d, r28	; 61
    74ea:	2b 01       	movw	r4, r22
    74ec:	3c 01       	movw	r6, r24
    74ee:	67 2b       	or	r22, r23
    74f0:	68 2b       	or	r22, r24
    74f2:	69 2b       	or	r22, r25
    74f4:	51 f4       	brne	.+20     	; 0x750a <set_dst+0x4c>
    74f6:	be 01       	movw	r22, r28
    74f8:	67 5f       	subi	r22, 0xF7	; 247
    74fa:	7f 4f       	sbci	r23, 0xFF	; 255
    74fc:	ce 01       	movw	r24, r28
    74fe:	01 96       	adiw	r24, 0x01	; 1
    7500:	83 db       	rcall	.-2298   	; 0x6c08 <gettimeofday>
    7502:	49 80       	ldd	r4, Y+1	; 0x01
    7504:	5a 80       	ldd	r5, Y+2	; 0x02
    7506:	6b 80       	ldd	r6, Y+3	; 0x03
    7508:	7c 80       	ldd	r7, Y+4	; 0x04
    750a:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst+0x8>
    750e:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x9>
    7512:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0xa>
    7516:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0xb>
    751a:	84 15       	cp	r24, r4
    751c:	95 05       	cpc	r25, r5
    751e:	a6 05       	cpc	r26, r6
    7520:	b7 05       	cpc	r27, r7
    7522:	50 f0       	brcs	.+20     	; 0x7538 <set_dst+0x7a>
    7524:	84 19       	sub	r24, r4
    7526:	95 09       	sbc	r25, r5
    7528:	a6 09       	sbc	r26, r6
    752a:	b7 09       	sbc	r27, r7
    752c:	80 38       	cpi	r24, 0x80	; 128
    752e:	91 45       	sbci	r25, 0x51	; 81
    7530:	a1 40       	sbci	r26, 0x01	; 1
    7532:	b1 05       	cpc	r27, r1
    7534:	70 f4       	brcc	.+28     	; 0x7552 <set_dst+0x94>
    7536:	42 c0       	rjmp	.+132    	; 0x75bc <set_dst+0xfe>
    7538:	a3 01       	movw	r20, r6
    753a:	92 01       	movw	r18, r4
    753c:	28 1b       	sub	r18, r24
    753e:	39 0b       	sbc	r19, r25
    7540:	4a 0b       	sbc	r20, r26
    7542:	5b 0b       	sbc	r21, r27
    7544:	da 01       	movw	r26, r20
    7546:	c9 01       	movw	r24, r18
    7548:	80 38       	cpi	r24, 0x80	; 128
    754a:	91 45       	sbci	r25, 0x51	; 81
    754c:	a1 40       	sbci	r26, 0x01	; 1
    754e:	b1 05       	cpc	r27, r1
    7550:	a8 f1       	brcs	.+106    	; 0x75bc <set_dst+0xfe>
    7552:	40 92 7c 1a 	sts	0x1A7C, r4	; 0x801a7c <dst+0x8>
    7556:	50 92 7d 1a 	sts	0x1A7D, r5	; 0x801a7d <dst+0x9>
    755a:	60 92 7e 1a 	sts	0x1A7E, r6	; 0x801a7e <dst+0xa>
    755e:	70 92 7f 1a 	sts	0x1A7F, r7	; 0x801a7f <dst+0xb>
    7562:	82 e0       	ldi	r24, 0x02	; 2
    7564:	a8 2e       	mov	r10, r24
    7566:	b1 2c       	mov	r11, r1
    7568:	c1 2c       	mov	r12, r1
    756a:	d1 2c       	mov	r13, r1
    756c:	92 e0       	ldi	r25, 0x02	; 2
    756e:	e9 2e       	mov	r14, r25
    7570:	f1 2c       	mov	r15, r1
    7572:	03 e0       	ldi	r16, 0x03	; 3
    7574:	10 e0       	ldi	r17, 0x00	; 0
    7576:	20 e0       	ldi	r18, 0x00	; 0
    7578:	30 e0       	ldi	r19, 0x00	; 0
    757a:	b3 01       	movw	r22, r6
    757c:	a2 01       	movw	r20, r4
    757e:	80 e0       	ldi	r24, 0x00	; 0
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	17 df       	rcall	.-466    	; 0x73b2 <find_dst>
    7584:	60 93 74 1a 	sts	0x1A74, r22	; 0x801a74 <dst>
    7588:	70 93 75 1a 	sts	0x1A75, r23	; 0x801a75 <dst+0x1>
    758c:	80 93 76 1a 	sts	0x1A76, r24	; 0x801a76 <dst+0x2>
    7590:	90 93 77 1a 	sts	0x1A77, r25	; 0x801a77 <dst+0x3>
    7594:	ee 24       	eor	r14, r14
    7596:	e3 94       	inc	r14
    7598:	f1 2c       	mov	r15, r1
    759a:	0b e0       	ldi	r16, 0x0B	; 11
    759c:	10 e0       	ldi	r17, 0x00	; 0
    759e:	20 e0       	ldi	r18, 0x00	; 0
    75a0:	30 e0       	ldi	r19, 0x00	; 0
    75a2:	b3 01       	movw	r22, r6
    75a4:	a2 01       	movw	r20, r4
    75a6:	81 e0       	ldi	r24, 0x01	; 1
    75a8:	90 e0       	ldi	r25, 0x00	; 0
    75aa:	03 df       	rcall	.-506    	; 0x73b2 <find_dst>
    75ac:	60 93 78 1a 	sts	0x1A78, r22	; 0x801a78 <dst+0x4>
    75b0:	70 93 79 1a 	sts	0x1A79, r23	; 0x801a79 <dst+0x5>
    75b4:	80 93 7a 1a 	sts	0x1A7A, r24	; 0x801a7a <dst+0x6>
    75b8:	90 93 7b 1a 	sts	0x1A7B, r25	; 0x801a7b <dst+0x7>
    75bc:	2c 96       	adiw	r28, 0x0c	; 12
    75be:	0f b6       	in	r0, 0x3f	; 63
    75c0:	f8 94       	cli
    75c2:	de bf       	out	0x3e, r29	; 62
    75c4:	0f be       	out	0x3f, r0	; 63
    75c6:	cd bf       	out	0x3d, r28	; 61
    75c8:	df 91       	pop	r29
    75ca:	cf 91       	pop	r28
    75cc:	1f 91       	pop	r17
    75ce:	0f 91       	pop	r16
    75d0:	ff 90       	pop	r15
    75d2:	ef 90       	pop	r14
    75d4:	df 90       	pop	r13
    75d6:	cf 90       	pop	r12
    75d8:	bf 90       	pop	r11
    75da:	af 90       	pop	r10
    75dc:	7f 90       	pop	r7
    75de:	6f 90       	pop	r6
    75e0:	5f 90       	pop	r5
    75e2:	4f 90       	pop	r4
    75e4:	08 95       	ret

000075e6 <asctime_r>:
    75e6:	a5 e1       	ldi	r26, 0x15	; 21
    75e8:	b0 e0       	ldi	r27, 0x00	; 0
    75ea:	e9 ef       	ldi	r30, 0xF9	; 249
    75ec:	fa e3       	ldi	r31, 0x3A	; 58
    75ee:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    75f2:	ec 01       	movw	r28, r24
    75f4:	8b 01       	movw	r16, r22
    75f6:	60 e0       	ldi	r22, 0x00	; 0
    75f8:	70 e0       	ldi	r23, 0x00	; 0
    75fa:	d1 db       	rcall	.-2142   	; 0x6d9e <normalize>
    75fc:	80 e2       	ldi	r24, 0x20	; 32
    75fe:	f8 01       	movw	r30, r16
    7600:	11 92       	st	Z+, r1
    7602:	8a 95       	dec	r24
    7604:	e9 f7       	brne	.-6      	; 0x7600 <asctime_r+0x1a>
    7606:	8a 85       	ldd	r24, Y+10	; 0x0a
    7608:	9b 85       	ldd	r25, Y+11	; 0x0b
    760a:	84 59       	subi	r24, 0x94	; 148
    760c:	98 4f       	sbci	r25, 0xF8	; 248
    760e:	ed b7       	in	r30, 0x3d	; 61
    7610:	fe b7       	in	r31, 0x3e	; 62
    7612:	95 8b       	std	Z+21, r25	; 0x15
    7614:	84 8b       	std	Z+20, r24	; 0x14
    7616:	88 81       	ld	r24, Y
    7618:	99 81       	ldd	r25, Y+1	; 0x01
    761a:	93 8b       	std	Z+19, r25	; 0x13
    761c:	82 8b       	std	Z+18, r24	; 0x12
    761e:	8a 81       	ldd	r24, Y+2	; 0x02
    7620:	9b 81       	ldd	r25, Y+3	; 0x03
    7622:	91 8b       	std	Z+17, r25	; 0x11
    7624:	80 8b       	std	Z+16, r24	; 0x10
    7626:	8c 81       	ldd	r24, Y+4	; 0x04
    7628:	9d 81       	ldd	r25, Y+5	; 0x05
    762a:	97 87       	std	Z+15, r25	; 0x0f
    762c:	86 87       	std	Z+14, r24	; 0x0e
    762e:	8e 81       	ldd	r24, Y+6	; 0x06
    7630:	9f 81       	ldd	r25, Y+7	; 0x07
    7632:	95 87       	std	Z+13, r25	; 0x0d
    7634:	84 87       	std	Z+12, r24	; 0x0c
    7636:	e8 85       	ldd	r30, Y+8	; 0x08
    7638:	f9 85       	ldd	r31, Y+9	; 0x09
    763a:	ee 0f       	add	r30, r30
    763c:	ff 1f       	adc	r31, r31
    763e:	e5 5f       	subi	r30, 0xF5	; 245
    7640:	fe 4f       	sbci	r31, 0xFE	; 254
    7642:	80 81       	ld	r24, Z
    7644:	91 81       	ldd	r25, Z+1	; 0x01
    7646:	ed b7       	in	r30, 0x3d	; 61
    7648:	fe b7       	in	r31, 0x3e	; 62
    764a:	93 87       	std	Z+11, r25	; 0x0b
    764c:	82 87       	std	Z+10, r24	; 0x0a
    764e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7650:	fd 85       	ldd	r31, Y+13	; 0x0d
    7652:	ee 0f       	add	r30, r30
    7654:	ff 1f       	adc	r31, r31
    7656:	eb 5d       	subi	r30, 0xDB	; 219
    7658:	fe 4f       	sbci	r31, 0xFE	; 254
    765a:	80 81       	ld	r24, Z
    765c:	91 81       	ldd	r25, Z+1	; 0x01
    765e:	ed b7       	in	r30, 0x3d	; 61
    7660:	fe b7       	in	r31, 0x3e	; 62
    7662:	91 87       	std	Z+9, r25	; 0x09
    7664:	80 87       	std	Z+8, r24	; 0x08
    7666:	8c e4       	ldi	r24, 0x4C	; 76
    7668:	97 e0       	ldi	r25, 0x07	; 7
    766a:	a0 e0       	ldi	r26, 0x00	; 0
    766c:	85 83       	std	Z+5, r24	; 0x05
    766e:	96 83       	std	Z+6, r25	; 0x06
    7670:	a7 83       	std	Z+7, r26	; 0x07
    7672:	80 e2       	ldi	r24, 0x20	; 32
    7674:	90 e0       	ldi	r25, 0x00	; 0
    7676:	94 83       	std	Z+4, r25	; 0x04
    7678:	83 83       	std	Z+3, r24	; 0x03
    767a:	12 83       	std	Z+2, r17	; 0x02
    767c:	01 83       	std	Z+1, r16	; 0x01
    767e:	0e 94 08 45 	call	0x8a10	; 0x8a10 <snprintf_P>
    7682:	c8 01       	movw	r24, r16
    7684:	cd b7       	in	r28, 0x3d	; 61
    7686:	de b7       	in	r29, 0x3e	; 62
    7688:	65 96       	adiw	r28, 0x15	; 21
    768a:	e4 e0       	ldi	r30, 0x04	; 4
    768c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00007690 <asctime>:
    7690:	6e ef       	ldi	r22, 0xFE	; 254
    7692:	77 e1       	ldi	r23, 0x17	; 23
    7694:	a8 cf       	rjmp	.-176    	; 0x75e6 <asctime_r>
    7696:	08 95       	ret

00007698 <ctime_gm>:
    7698:	a6 e1       	ldi	r26, 0x16	; 22
    769a:	b0 e0       	ldi	r27, 0x00	; 0
    769c:	e2 e5       	ldi	r30, 0x52	; 82
    769e:	fb e3       	ldi	r31, 0x3B	; 59
    76a0:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    76a4:	be 01       	movw	r22, r28
    76a6:	6f 5f       	subi	r22, 0xFF	; 255
    76a8:	7f 4f       	sbci	r23, 0xFF	; 255
    76aa:	6d da       	rcall	.-2854   	; 0x6b86 <gmtime_r>
    76ac:	6e ed       	ldi	r22, 0xDE	; 222
    76ae:	77 e1       	ldi	r23, 0x17	; 23
    76b0:	9a df       	rcall	.-204    	; 0x75e6 <asctime_r>
    76b2:	66 96       	adiw	r28, 0x16	; 22
    76b4:	e2 e0       	ldi	r30, 0x02	; 2
    76b6:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000076ba <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    76ba:	a5 e2       	ldi	r26, 0x25	; 37
    76bc:	b0 e0       	ldi	r27, 0x00	; 0
    76be:	e3 e6       	ldi	r30, 0x63	; 99
    76c0:	fb e3       	ldi	r31, 0x3B	; 59
    76c2:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    76c6:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    76c8:	40 e0       	ldi	r20, 0x00	; 0
    76ca:	50 e0       	ldi	r21, 0x00	; 0
    76cc:	ba 01       	movw	r22, r20
    76ce:	80 e0       	ldi	r24, 0x00	; 0
    76d0:	90 e0       	ldi	r25, 0x00	; 0
    76d2:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <rtc_init>
    76d6:	81 11       	cpse	r24, r1
    76d8:	27 c0       	rjmp	.+78     	; 0x7728 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    76da:	8b ea       	ldi	r24, 0xAB	; 171
    76dc:	96 e0       	ldi	r25, 0x06	; 6
    76de:	a0 e0       	ldi	r26, 0x00	; 0
    76e0:	ed b7       	in	r30, 0x3d	; 61
    76e2:	fe b7       	in	r31, 0x3e	; 62
    76e4:	81 83       	std	Z+1, r24	; 0x01
    76e6:	92 83       	std	Z+2, r25	; 0x02
    76e8:	a3 83       	std	Z+3, r26	; 0x03
    76ea:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("attempting rtc init\n");
    76ee:	86 e9       	ldi	r24, 0x96	; 150
    76f0:	96 e0       	ldi	r25, 0x06	; 6
    76f2:	a0 e0       	ldi	r26, 0x00	; 0
    76f4:	ed b7       	in	r30, 0x3d	; 61
    76f6:	fe b7       	in	r31, 0x3e	; 62
    76f8:	81 83       	std	Z+1, r24	; 0x01
    76fa:	92 83       	std	Z+2, r25	; 0x02
    76fc:	a3 83       	std	Z+3, r26	; 0x03
    76fe:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7702:	40 e0       	ldi	r20, 0x00	; 0
    7704:	50 e0       	ldi	r21, 0x00	; 0
    7706:	ba 01       	movw	r22, r20
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	0e 94 17 2f 	call	0x5e2e	; 0x5e2e <rtc_init>
    7710:	81 11       	cpse	r24, r1
    7712:	0a c0       	rjmp	.+20     	; 0x7728 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7714:	8f e7       	ldi	r24, 0x7F	; 127
    7716:	96 e0       	ldi	r25, 0x06	; 6
    7718:	a0 e0       	ldi	r26, 0x00	; 0
    771a:	ed b7       	in	r30, 0x3d	; 61
    771c:	fe b7       	in	r31, 0x3e	; 62
    771e:	81 83       	std	Z+1, r24	; 0x01
    7720:	92 83       	std	Z+2, r25	; 0x02
    7722:	a3 83       	std	Z+3, r26	; 0x03
    7724:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7728:	ce 01       	movw	r24, r28
    772a:	04 96       	adiw	r24, 0x04	; 4
    772c:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <rtc_read>
    7730:	88 23       	and	r24, r24
    7732:	51 f0       	breq	.+20     	; 0x7748 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7734:	ce 01       	movw	r24, r28
    7736:	04 96       	adiw	r24, 0x04	; 4
    7738:	fa dc       	rcall	.-1548   	; 0x712e <timegm>
    773a:	6b 01       	movw	r12, r22
    773c:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    773e:	67 2b       	or	r22, r23
    7740:	68 2b       	or	r22, r24
    7742:	69 2b       	or	r22, r25
    7744:	c1 f4       	brne	.+48     	; 0x7776 <initialize_clock+0xbc>
    7746:	0a c0       	rjmp	.+20     	; 0x775c <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7748:	85 e6       	ldi	r24, 0x65	; 101
    774a:	96 e0       	ldi	r25, 0x06	; 6
    774c:	a0 e0       	ldi	r26, 0x00	; 0
    774e:	ed b7       	in	r30, 0x3d	; 61
    7750:	fe b7       	in	r31, 0x3e	; 62
    7752:	81 83       	std	Z+1, r24	; 0x01
    7754:	92 83       	std	Z+2, r25	; 0x02
    7756:	a3 83       	std	Z+3, r26	; 0x03
    7758:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    775c:	81 e4       	ldi	r24, 0x41	; 65
    775e:	96 e0       	ldi	r25, 0x06	; 6
    7760:	a0 e0       	ldi	r26, 0x00	; 0
    7762:	ed b7       	in	r30, 0x3d	; 61
    7764:	fe b7       	in	r31, 0x3e	; 62
    7766:	81 83       	std	Z+1, r24	; 0x01
    7768:	92 83       	std	Z+2, r25	; 0x02
    776a:	a3 83       	std	Z+3, r26	; 0x03
    776c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    7770:	c1 2c       	mov	r12, r1
    7772:	d1 2c       	mov	r13, r1
    7774:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7776:	1b a3       	std	Y+35, r17	; 0x23
    7778:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    777a:	1d a2       	std	Y+37, r1	; 0x25
    777c:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    777e:	ce 01       	movw	r24, r28
    7780:	82 96       	adiw	r24, 0x22	; 34
    7782:	30 da       	rcall	.-2976   	; 0x6be4 <settimezone>

    ts.tv_sec = seconds;
    7784:	ca 8e       	std	Y+26, r12	; 0x1a
    7786:	db 8e       	std	Y+27, r13	; 0x1b
    7788:	ec 8e       	std	Y+28, r14	; 0x1c
    778a:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    778c:	1e 8e       	std	Y+30, r1	; 0x1e
    778e:	1f 8e       	std	Y+31, r1	; 0x1f
    7790:	18 a2       	std	Y+32, r1	; 0x20
    7792:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7794:	be 01       	movw	r22, r28
    7796:	66 5e       	subi	r22, 0xE6	; 230
    7798:	7f 4f       	sbci	r23, 0xFF	; 255
    779a:	80 e0       	ldi	r24, 0x00	; 0
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	c7 d8       	rcall	.-3698   	; 0x692e <clock_settime>
}
    77a0:	a5 96       	adiw	r28, 0x25	; 37
    77a2:	e8 e0       	ldi	r30, 0x08	; 8
    77a4:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

000077a8 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    77a8:	a9 e2       	ldi	r26, 0x29	; 41
    77aa:	b0 e0       	ldi	r27, 0x00	; 0
    77ac:	ea ed       	ldi	r30, 0xDA	; 218
    77ae:	fb e3       	ldi	r31, 0x3B	; 59
    77b0:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    77b4:	ce 01       	movw	r24, r28
    77b6:	08 96       	adiw	r24, 0x08	; 8
    77b8:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <rtc_read>
    77bc:	88 23       	and	r24, r24
    77be:	29 f1       	breq	.+74     	; 0x780a <display_clock+0x62>
    {
        seconds = timegm(&tc);
    77c0:	ce 01       	movw	r24, r28
    77c2:	08 96       	adiw	r24, 0x08	; 8
    77c4:	b4 dc       	rcall	.-1688   	; 0x712e <timegm>
    77c6:	6e a3       	std	Y+38, r22	; 0x26
    77c8:	7f a3       	std	Y+39, r23	; 0x27
    77ca:	88 a7       	std	Y+40, r24	; 0x28
    77cc:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    77ce:	ed b7       	in	r30, 0x3d	; 61
    77d0:	fe b7       	in	r31, 0x3e	; 62
    77d2:	64 83       	std	Z+4, r22	; 0x04
    77d4:	75 83       	std	Z+5, r23	; 0x05
    77d6:	86 83       	std	Z+6, r24	; 0x06
    77d8:	97 83       	std	Z+7, r25	; 0x07
    77da:	8f e2       	ldi	r24, 0x2F	; 47
    77dc:	96 e0       	ldi	r25, 0x06	; 6
    77de:	a0 e0       	ldi	r26, 0x00	; 0
    77e0:	81 83       	std	Z+1, r24	; 0x01
    77e2:	92 83       	std	Z+2, r25	; 0x02
    77e4:	a3 83       	std	Z+3, r26	; 0x03
    77e6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    77ea:	ce 01       	movw	r24, r28
    77ec:	08 96       	adiw	r24, 0x08	; 8
    77ee:	50 df       	rcall	.-352    	; 0x7690 <asctime>
    77f0:	ed b7       	in	r30, 0x3d	; 61
    77f2:	fe b7       	in	r31, 0x3e	; 62
    77f4:	95 83       	std	Z+5, r25	; 0x05
    77f6:	84 83       	std	Z+4, r24	; 0x04
    77f8:	8e e1       	ldi	r24, 0x1E	; 30
    77fa:	96 e0       	ldi	r25, 0x06	; 6
    77fc:	a0 e0       	ldi	r26, 0x00	; 0
    77fe:	81 83       	std	Z+1, r24	; 0x01
    7800:	92 83       	std	Z+2, r25	; 0x02
    7802:	a3 83       	std	Z+3, r26	; 0x03
    7804:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    7808:	0a c0       	rjmp	.+20     	; 0x781e <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    780a:	8d e0       	ldi	r24, 0x0D	; 13
    780c:	96 e0       	ldi	r25, 0x06	; 6
    780e:	a0 e0       	ldi	r26, 0x00	; 0
    7810:	ed b7       	in	r30, 0x3d	; 61
    7812:	fe b7       	in	r31, 0x3e	; 62
    7814:	81 83       	std	Z+1, r24	; 0x01
    7816:	92 83       	std	Z+2, r25	; 0x02
    7818:	a3 83       	std	Z+3, r26	; 0x03
    781a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    781e:	be 01       	movw	r22, r28
    7820:	62 5e       	subi	r22, 0xE2	; 226
    7822:	7f 4f       	sbci	r23, 0xFF	; 255
    7824:	80 e0       	ldi	r24, 0x00	; 0
    7826:	90 e0       	ldi	r25, 0x00	; 0
    7828:	0e 94 ee 31 	call	0x63dc	; 0x63dc <clock_gettime>
    seconds = ts.tv_sec;
    782c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    782e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7830:	a8 a1       	ldd	r26, Y+32	; 0x20
    7832:	b9 a1       	ldd	r27, Y+33	; 0x21
    7834:	8e a3       	std	Y+38, r24	; 0x26
    7836:	9f a3       	std	Y+39, r25	; 0x27
    7838:	a8 a7       	std	Y+40, r26	; 0x28
    783a:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    783c:	ed b7       	in	r30, 0x3d	; 61
    783e:	fe b7       	in	r31, 0x3e	; 62
    7840:	84 83       	std	Z+4, r24	; 0x04
    7842:	95 83       	std	Z+5, r25	; 0x05
    7844:	a6 83       	std	Z+6, r26	; 0x06
    7846:	b7 83       	std	Z+7, r27	; 0x07
    7848:	8b ef       	ldi	r24, 0xFB	; 251
    784a:	95 e0       	ldi	r25, 0x05	; 5
    784c:	a0 e0       	ldi	r26, 0x00	; 0
    784e:	81 83       	std	Z+1, r24	; 0x01
    7850:	92 83       	std	Z+2, r25	; 0x02
    7852:	a3 83       	std	Z+3, r26	; 0x03
    7854:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7858:	ce 01       	movw	r24, r28
    785a:	86 96       	adiw	r24, 0x26	; 38
    785c:	a9 d9       	rcall	.-3246   	; 0x6bb0 <gmtime>
    785e:	18 df       	rcall	.-464    	; 0x7690 <asctime>
    7860:	ed b7       	in	r30, 0x3d	; 61
    7862:	fe b7       	in	r31, 0x3e	; 62
    7864:	95 83       	std	Z+5, r25	; 0x05
    7866:	84 83       	std	Z+4, r24	; 0x04
    7868:	8a ee       	ldi	r24, 0xEA	; 234
    786a:	95 e0       	ldi	r25, 0x05	; 5
    786c:	a0 e0       	ldi	r26, 0x00	; 0
    786e:	81 83       	std	Z+1, r24	; 0x01
    7870:	92 83       	std	Z+2, r25	; 0x02
    7872:	a3 83       	std	Z+3, r26	; 0x03
    7874:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
}
    7878:	a9 96       	adiw	r28, 0x29	; 41
    787a:	e2 e0       	ldi	r30, 0x02	; 2
    787c:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00007880 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7880:	fc 01       	movw	r30, r24
    7882:	84 81       	ldd	r24, Z+4	; 0x04
    7884:	95 81       	ldd	r25, Z+5	; 0x05
    7886:	00 97       	sbiw	r24, 0x00	; 0
    7888:	79 f0       	breq	.+30     	; 0x78a8 <_putc_buffer_fn+0x28>
    788a:	66 23       	and	r22, r22
    788c:	69 f0       	breq	.+26     	; 0x78a8 <_putc_buffer_fn+0x28>
    788e:	01 97       	sbiw	r24, 0x01	; 1
    7890:	95 83       	std	Z+5, r25	; 0x05
    7892:	84 83       	std	Z+4, r24	; 0x04
    7894:	86 81       	ldd	r24, Z+6	; 0x06
    7896:	97 81       	ldd	r25, Z+7	; 0x07
    7898:	01 96       	adiw	r24, 0x01	; 1
    789a:	97 83       	std	Z+7, r25	; 0x07
    789c:	86 83       	std	Z+6, r24	; 0x06
    789e:	a2 81       	ldd	r26, Z+2	; 0x02
    78a0:	b3 81       	ldd	r27, Z+3	; 0x03
    78a2:	6d 93       	st	X+, r22
    78a4:	b3 83       	std	Z+3, r27	; 0x03
    78a6:	a2 83       	std	Z+2, r26	; 0x02
    78a8:	02 80       	ldd	r0, Z+2	; 0x02
    78aa:	f3 81       	ldd	r31, Z+3	; 0x03
    78ac:	e0 2d       	mov	r30, r0
    78ae:	10 82       	st	Z, r1
    78b0:	08 95       	ret

000078b2 <_putc_fn>:
    78b2:	fc 01       	movw	r30, r24
    78b4:	26 81       	ldd	r18, Z+6	; 0x06
    78b6:	37 81       	ldd	r19, Z+7	; 0x07
    78b8:	2f 5f       	subi	r18, 0xFF	; 255
    78ba:	3f 4f       	sbci	r19, 0xFF	; 255
    78bc:	37 83       	std	Z+7, r19	; 0x07
    78be:	26 83       	std	Z+6, r18	; 0x06
    78c0:	86 2f       	mov	r24, r22
    78c2:	90 e0       	ldi	r25, 0x00	; 0
    78c4:	0c 94 81 74 	jmp	0xe902	; 0xe902 <putchar>
    78c8:	08 95       	ret

000078ca <bin2num>:
    78ca:	a0 e0       	ldi	r26, 0x00	; 0
    78cc:	b0 e0       	ldi	r27, 0x00	; 0
    78ce:	eb e6       	ldi	r30, 0x6B	; 107
    78d0:	fc e3       	ldi	r31, 0x3C	; 60
    78d2:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0xe>
    78d6:	ea 01       	movw	r28, r20
    78d8:	53 e0       	ldi	r21, 0x03	; 3
    78da:	ee 0c       	add	r14, r14
    78dc:	ff 1c       	adc	r15, r15
    78de:	5a 95       	dec	r21
    78e0:	e1 f7       	brne	.-8      	; 0x78da <bin2num+0x10>
    78e2:	fc 01       	movw	r30, r24
    78e4:	af 01       	movw	r20, r30
    78e6:	48 1b       	sub	r20, r24
    78e8:	59 0b       	sbc	r21, r25
    78ea:	c4 17       	cp	r28, r20
    78ec:	d5 07       	cpc	r29, r21
    78ee:	14 f0       	brlt	.+4      	; 0x78f4 <bin2num+0x2a>
    78f0:	11 92       	st	Z+, r1
    78f2:	f8 cf       	rjmp	.-16     	; 0x78e4 <bin2num+0x1a>
    78f4:	41 e0       	ldi	r20, 0x01	; 1
    78f6:	e4 1a       	sub	r14, r20
    78f8:	f1 08       	sbc	r15, r1
    78fa:	5b 01       	movw	r10, r22
    78fc:	42 e0       	ldi	r20, 0x02	; 2
    78fe:	a4 1a       	sub	r10, r20
    7900:	b1 08       	sbc	r11, r1
    7902:	f7 fc       	sbrc	r15, 7
    7904:	3b c0       	rjmp	.+118    	; 0x797c <bin2num+0xb2>
    7906:	f7 01       	movw	r30, r14
    7908:	43 e0       	ldi	r20, 0x03	; 3
    790a:	f5 95       	asr	r31
    790c:	e7 95       	ror	r30
    790e:	4a 95       	dec	r20
    7910:	e1 f7       	brne	.-8      	; 0x790a <bin2num+0x40>
    7912:	e0 0f       	add	r30, r16
    7914:	f1 1f       	adc	r31, r17
    7916:	40 81       	ld	r20, Z
    7918:	50 e0       	ldi	r21, 0x00	; 0
    791a:	f7 01       	movw	r30, r14
    791c:	e7 70       	andi	r30, 0x07	; 7
    791e:	ff 27       	eor	r31, r31
    7920:	02 c0       	rjmp	.+4      	; 0x7926 <bin2num+0x5c>
    7922:	55 95       	asr	r21
    7924:	47 95       	ror	r20
    7926:	ea 95       	dec	r30
    7928:	e2 f7       	brpl	.-8      	; 0x7922 <bin2num+0x58>
    792a:	41 70       	andi	r20, 0x01	; 1
    792c:	55 27       	eor	r21, r21
    792e:	dc 01       	movw	r26, r24
    7930:	e0 e0       	ldi	r30, 0x00	; 0
    7932:	f0 e0       	ldi	r31, 0x00	; 0
    7934:	ec 17       	cp	r30, r28
    7936:	fd 07       	cpc	r31, r29
    7938:	ec f4       	brge	.+58     	; 0x7974 <bin2num+0xaa>
    793a:	ea 15       	cp	r30, r10
    793c:	fb 05       	cpc	r31, r11
    793e:	4c f0       	brlt	.+18     	; 0x7952 <bin2num+0x88>
    7940:	dc 01       	movw	r26, r24
    7942:	ae 0f       	add	r26, r30
    7944:	bf 1f       	adc	r27, r31
    7946:	1c 92       	st	X, r1
    7948:	41 e0       	ldi	r20, 0x01	; 1
    794a:	e4 1a       	sub	r14, r20
    794c:	f1 08       	sbc	r15, r1
    794e:	ef 01       	movw	r28, r30
    7950:	d8 cf       	rjmp	.-80     	; 0x7902 <bin2num+0x38>
    7952:	9c 90       	ld	r9, X
    7954:	99 0c       	add	r9, r9
    7956:	94 2a       	or	r9, r20
    7958:	49 2d       	mov	r20, r9
    795a:	50 e0       	ldi	r21, 0x00	; 0
    795c:	42 17       	cp	r20, r18
    795e:	53 07       	cpc	r21, r19
    7960:	24 f0       	brlt	.+8      	; 0x796a <bin2num+0xa0>
    7962:	92 1a       	sub	r9, r18
    7964:	41 e0       	ldi	r20, 0x01	; 1
    7966:	50 e0       	ldi	r21, 0x00	; 0
    7968:	02 c0       	rjmp	.+4      	; 0x796e <bin2num+0xa4>
    796a:	40 e0       	ldi	r20, 0x00	; 0
    796c:	50 e0       	ldi	r21, 0x00	; 0
    796e:	9d 92       	st	X+, r9
    7970:	31 96       	adiw	r30, 0x01	; 1
    7972:	e0 cf       	rjmp	.-64     	; 0x7934 <bin2num+0x6a>
    7974:	41 15       	cp	r20, r1
    7976:	51 05       	cpc	r21, r1
    7978:	01 f7       	brne	.-64     	; 0x793a <bin2num+0x70>
    797a:	e2 cf       	rjmp	.-60     	; 0x7940 <bin2num+0x76>
    797c:	fc 01       	movw	r30, r24
    797e:	9f 01       	movw	r18, r30
    7980:	28 1b       	sub	r18, r24
    7982:	39 0b       	sbc	r19, r25
    7984:	2c 17       	cp	r18, r28
    7986:	3d 07       	cpc	r19, r29
    7988:	4c f4       	brge	.+18     	; 0x799c <bin2num+0xd2>
    798a:	20 81       	ld	r18, Z
    798c:	2a 30       	cpi	r18, 0x0A	; 10
    798e:	10 f4       	brcc	.+4      	; 0x7994 <bin2num+0xca>
    7990:	20 5d       	subi	r18, 0xD0	; 208
    7992:	01 c0       	rjmp	.+2      	; 0x7996 <bin2num+0xcc>
    7994:	29 5a       	subi	r18, 0xA9	; 169
    7996:	20 83       	st	Z, r18
    7998:	31 96       	adiw	r30, 0x01	; 1
    799a:	f1 cf       	rjmp	.-30     	; 0x797e <bin2num+0xb4>
    799c:	9e 01       	movw	r18, r28
    799e:	d7 ff       	sbrs	r29, 7
    79a0:	02 c0       	rjmp	.+4      	; 0x79a6 <bin2num+0xdc>
    79a2:	20 e0       	ldi	r18, 0x00	; 0
    79a4:	30 e0       	ldi	r19, 0x00	; 0
    79a6:	c1 14       	cp	r12, r1
    79a8:	d1 04       	cpc	r13, r1
    79aa:	61 f0       	breq	.+24     	; 0x79c4 <bin2num+0xfa>
    79ac:	61 50       	subi	r22, 0x01	; 1
    79ae:	71 09       	sbc	r23, r1
    79b0:	26 17       	cp	r18, r22
    79b2:	37 07       	cpc	r19, r23
    79b4:	3c f4       	brge	.+14     	; 0x79c4 <bin2num+0xfa>
    79b6:	fc 01       	movw	r30, r24
    79b8:	e2 0f       	add	r30, r18
    79ba:	f3 1f       	adc	r31, r19
    79bc:	c0 82       	st	Z, r12
    79be:	21 96       	adiw	r28, 0x01	; 1
    79c0:	2f 5f       	subi	r18, 0xFF	; 255
    79c2:	3f 4f       	sbci	r19, 0xFF	; 255
    79c4:	fc 01       	movw	r30, r24
    79c6:	e2 0f       	add	r30, r18
    79c8:	f3 1f       	adc	r31, r19
    79ca:	10 82       	st	Z, r1
    79cc:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <reverse>
    79d0:	ce 01       	movw	r24, r28
    79d2:	cd b7       	in	r28, 0x3d	; 61
    79d4:	de b7       	in	r29, 0x3e	; 62
    79d6:	eb e0       	ldi	r30, 0x0B	; 11
    79d8:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0xe>

000079dc <pch>:
    79dc:	fc 01       	movw	r30, r24
    79de:	22 81       	ldd	r18, Z+2	; 0x02
    79e0:	33 81       	ldd	r19, Z+3	; 0x03
    79e2:	44 81       	ldd	r20, Z+4	; 0x04
    79e4:	55 81       	ldd	r21, Z+5	; 0x05
    79e6:	80 81       	ld	r24, Z
    79e8:	91 81       	ldd	r25, Z+1	; 0x01
    79ea:	24 17       	cp	r18, r20
    79ec:	35 07       	cpc	r19, r21
    79ee:	54 f4       	brge	.+20     	; 0x7a04 <pch+0x28>
    79f0:	a9 01       	movw	r20, r18
    79f2:	4f 5f       	subi	r20, 0xFF	; 255
    79f4:	5f 4f       	sbci	r21, 0xFF	; 255
    79f6:	53 83       	std	Z+3, r21	; 0x03
    79f8:	42 83       	std	Z+2, r20	; 0x02
    79fa:	dc 01       	movw	r26, r24
    79fc:	a2 0f       	add	r26, r18
    79fe:	b3 1f       	adc	r27, r19
    7a00:	6c 93       	st	X, r22
    7a02:	04 c0       	rjmp	.+8      	; 0x7a0c <pch+0x30>
    7a04:	dc 01       	movw	r26, r24
    7a06:	a2 0f       	add	r26, r18
    7a08:	b3 1f       	adc	r27, r19
    7a0a:	1c 92       	st	X, r1
    7a0c:	82 81       	ldd	r24, Z+2	; 0x02
    7a0e:	93 81       	ldd	r25, Z+3	; 0x03
    7a10:	08 95       	ret

00007a12 <p_ntoa>:
    7a12:	af 92       	push	r10
    7a14:	cf 92       	push	r12
    7a16:	df 92       	push	r13
    7a18:	ef 92       	push	r14
    7a1a:	ff 92       	push	r15
    7a1c:	0f 93       	push	r16
    7a1e:	1f 93       	push	r17
    7a20:	cf 93       	push	r28
    7a22:	df 93       	push	r29
    7a24:	dc 01       	movw	r26, r24
    7a26:	eb 01       	movw	r28, r22
    7a28:	fa 01       	movw	r30, r20
    7a2a:	b9 01       	movw	r22, r18
    7a2c:	98 01       	movw	r18, r16
    7a2e:	a6 01       	movw	r20, r12
    7a30:	9a 2d       	mov	r25, r10
    7a32:	a5 fa       	bst	r10, 5
    7a34:	cc 24       	eor	r12, r12
    7a36:	c0 f8       	bld	r12, 0
    7a38:	a6 fc       	sbrc	r10, 6
    7a3a:	07 c0       	rjmp	.+14     	; 0x7a4a <p_ntoa+0x38>
    7a3c:	a2 fc       	sbrc	r10, 2
    7a3e:	08 c0       	rjmp	.+16     	; 0x7a50 <p_ntoa+0x3e>
    7a40:	a4 fe       	sbrs	r10, 4
    7a42:	09 c0       	rjmp	.+18     	; 0x7a56 <p_ntoa+0x44>
    7a44:	00 e2       	ldi	r16, 0x20	; 32
    7a46:	10 e0       	ldi	r17, 0x00	; 0
    7a48:	08 c0       	rjmp	.+16     	; 0x7a5a <p_ntoa+0x48>
    7a4a:	0d e2       	ldi	r16, 0x2D	; 45
    7a4c:	10 e0       	ldi	r17, 0x00	; 0
    7a4e:	05 c0       	rjmp	.+10     	; 0x7a5a <p_ntoa+0x48>
    7a50:	0b e2       	ldi	r16, 0x2B	; 43
    7a52:	10 e0       	ldi	r17, 0x00	; 0
    7a54:	02 c0       	rjmp	.+4      	; 0x7a5a <p_ntoa+0x48>
    7a56:	00 e0       	ldi	r16, 0x00	; 0
    7a58:	10 e0       	ldi	r17, 0x00	; 0
    7a5a:	95 ff       	sbrs	r25, 5
    7a5c:	04 c0       	rjmp	.+8      	; 0x7a66 <p_ntoa+0x54>
    7a5e:	89 2f       	mov	r24, r25
    7a60:	8a 70       	andi	r24, 0x0A	; 10
    7a62:	09 f0       	breq	.+2      	; 0x7a66 <p_ntoa+0x54>
    7a64:	c1 2c       	mov	r12, r1
    7a66:	c0 fa       	bst	r12, 0
    7a68:	95 f9       	bld	r25, 5
    7a6a:	89 2f       	mov	r24, r25
    7a6c:	82 70       	andi	r24, 0x02	; 2
    7a6e:	c8 2e       	mov	r12, r24
    7a70:	91 fd       	sbrc	r25, 1
    7a72:	02 c0       	rjmp	.+4      	; 0x7a78 <p_ntoa+0x66>
    7a74:	40 e0       	ldi	r20, 0x00	; 0
    7a76:	50 e0       	ldi	r21, 0x00	; 0
    7a78:	89 2f       	mov	r24, r25
    7a7a:	83 70       	andi	r24, 0x03	; 3
    7a7c:	11 f4       	brne	.+4      	; 0x7a82 <p_ntoa+0x70>
    7a7e:	41 e0       	ldi	r20, 0x01	; 1
    7a80:	50 e0       	ldi	r21, 0x00	; 0
    7a82:	90 ff       	sbrs	r25, 0
    7a84:	0c c0       	rjmp	.+24     	; 0x7a9e <p_ntoa+0x8c>
    7a86:	95 fd       	sbrc	r25, 5
    7a88:	05 c0       	rjmp	.+10     	; 0x7a94 <p_ntoa+0x82>
    7a8a:	c1 10       	cpse	r12, r1
    7a8c:	08 c0       	rjmp	.+16     	; 0x7a9e <p_ntoa+0x8c>
    7a8e:	41 e0       	ldi	r20, 0x01	; 1
    7a90:	50 e0       	ldi	r21, 0x00	; 0
    7a92:	05 c0       	rjmp	.+10     	; 0x7a9e <p_ntoa+0x8c>
    7a94:	94 75       	andi	r25, 0x54	; 84
    7a96:	a7 01       	movw	r20, r14
    7a98:	11 f0       	breq	.+4      	; 0x7a9e <p_ntoa+0x8c>
    7a9a:	41 50       	subi	r20, 0x01	; 1
    7a9c:	51 09       	sbc	r21, r1
    7a9e:	68 01       	movw	r12, r16
    7aa0:	7e 01       	movw	r14, r28
    7aa2:	8d 01       	movw	r16, r26
    7aa4:	cf 01       	movw	r24, r30
    7aa6:	11 df       	rcall	.-478    	; 0x78ca <bin2num>
    7aa8:	df 91       	pop	r29
    7aaa:	cf 91       	pop	r28
    7aac:	1f 91       	pop	r17
    7aae:	0f 91       	pop	r16
    7ab0:	ff 90       	pop	r15
    7ab2:	ef 90       	pop	r14
    7ab4:	df 90       	pop	r13
    7ab6:	cf 90       	pop	r12
    7ab8:	af 90       	pop	r10
    7aba:	08 95       	ret

00007abc <p_ftoa>:
    7abc:	aa e0       	ldi	r26, 0x0A	; 10
    7abe:	b0 e0       	ldi	r27, 0x00	; 0
    7ac0:	e4 e6       	ldi	r30, 0x64	; 100
    7ac2:	fd e3       	ldi	r31, 0x3D	; 61
    7ac4:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    7ac8:	4b 01       	movw	r8, r22
    7aca:	5c 01       	movw	r10, r24
    7acc:	1a 01       	movw	r2, r20
    7ace:	28 01       	movw	r4, r16
    7ad0:	c6 fa       	bst	r12, 6
    7ad2:	11 27       	eor	r17, r17
    7ad4:	10 f9       	bld	r17, 0
    7ad6:	5a 83       	std	Y+2, r21	; 0x02
    7ad8:	49 83       	std	Y+1, r20	; 0x01
    7ada:	1c 82       	std	Y+4, r1	; 0x04
    7adc:	1b 82       	std	Y+3, r1	; 0x03
    7ade:	21 50       	subi	r18, 0x01	; 1
    7ae0:	31 09       	sbc	r19, r1
    7ae2:	3e 83       	std	Y+6, r19	; 0x06
    7ae4:	2d 83       	std	Y+5, r18	; 0x05
    7ae6:	fa 01       	movw	r30, r20
    7ae8:	10 82       	st	Z, r1
    7aea:	20 e0       	ldi	r18, 0x00	; 0
    7aec:	30 e0       	ldi	r19, 0x00	; 0
    7aee:	a9 01       	movw	r20, r18
    7af0:	0e 94 ab e3 	call	0x1c756	; 0x1c756 <__cmpsf2>
    7af4:	87 ff       	sbrs	r24, 7
    7af6:	05 c0       	rjmp	.+10     	; 0x7b02 <p_ftoa+0x46>
    7af8:	b7 fa       	bst	r11, 7
    7afa:	b0 94       	com	r11
    7afc:	b7 f8       	bld	r11, 7
    7afe:	b0 94       	com	r11
    7b00:	11 e0       	ldi	r17, 0x01	; 1
    7b02:	10 fb       	bst	r17, 0
    7b04:	c6 f8       	bld	r12, 6
    7b06:	c6 fe       	sbrs	r12, 6
    7b08:	02 c0       	rjmp	.+4      	; 0x7b0e <p_ftoa+0x52>
    7b0a:	6d e2       	ldi	r22, 0x2D	; 45
    7b0c:	07 c0       	rjmp	.+14     	; 0x7b1c <p_ftoa+0x60>
    7b0e:	c2 fe       	sbrs	r12, 2
    7b10:	02 c0       	rjmp	.+4      	; 0x7b16 <p_ftoa+0x5a>
    7b12:	6b e2       	ldi	r22, 0x2B	; 43
    7b14:	03 c0       	rjmp	.+6      	; 0x7b1c <p_ftoa+0x60>
    7b16:	c4 fe       	sbrs	r12, 4
    7b18:	04 c0       	rjmp	.+8      	; 0x7b22 <p_ftoa+0x66>
    7b1a:	60 e2       	ldi	r22, 0x20	; 32
    7b1c:	ce 01       	movw	r24, r28
    7b1e:	01 96       	adiw	r24, 0x01	; 1
    7b20:	5d df       	rcall	.-326    	; 0x79dc <pch>
    7b22:	37 01       	movw	r6, r14
    7b24:	f7 fe       	sbrs	r15, 7
    7b26:	02 c0       	rjmp	.+4      	; 0x7b2c <p_ftoa+0x70>
    7b28:	61 2c       	mov	r6, r1
    7b2a:	71 2c       	mov	r7, r1
    7b2c:	20 e0       	ldi	r18, 0x00	; 0
    7b2e:	30 e0       	ldi	r19, 0x00	; 0
    7b30:	a9 01       	movw	r20, r18
    7b32:	c5 01       	movw	r24, r10
    7b34:	b4 01       	movw	r22, r8
    7b36:	0e 94 ab e3 	call	0x1c756	; 0x1c756 <__cmpsf2>
    7b3a:	88 23       	and	r24, r24
    7b3c:	d1 f1       	breq	.+116    	; 0x7bb2 <p_ftoa+0xf6>
    7b3e:	c1 fe       	sbrs	r12, 1
    7b40:	11 c0       	rjmp	.+34     	; 0x7b64 <p_ftoa+0xa8>
    7b42:	83 01       	movw	r16, r6
    7b44:	60 e0       	ldi	r22, 0x00	; 0
    7b46:	70 e0       	ldi	r23, 0x00	; 0
    7b48:	80 e0       	ldi	r24, 0x00	; 0
    7b4a:	9f e3       	ldi	r25, 0x3F	; 63
    7b4c:	01 15       	cp	r16, r1
    7b4e:	11 05       	cpc	r17, r1
    7b50:	69 f0       	breq	.+26     	; 0x7b6c <p_ftoa+0xb0>
    7b52:	20 e0       	ldi	r18, 0x00	; 0
    7b54:	30 e0       	ldi	r19, 0x00	; 0
    7b56:	40 e2       	ldi	r20, 0x20	; 32
    7b58:	51 e4       	ldi	r21, 0x41	; 65
    7b5a:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    7b5e:	01 50       	subi	r16, 0x01	; 1
    7b60:	11 09       	sbc	r17, r1
    7b62:	f4 cf       	rjmp	.-24     	; 0x7b4c <p_ftoa+0x90>
    7b64:	60 e0       	ldi	r22, 0x00	; 0
    7b66:	70 e0       	ldi	r23, 0x00	; 0
    7b68:	80 e0       	ldi	r24, 0x00	; 0
    7b6a:	9f e3       	ldi	r25, 0x3F	; 63
    7b6c:	9b 01       	movw	r18, r22
    7b6e:	ac 01       	movw	r20, r24
    7b70:	c5 01       	movw	r24, r10
    7b72:	b4 01       	movw	r22, r8
    7b74:	0e 94 47 e3 	call	0x1c68e	; 0x1c68e <__addsf3>
    7b78:	4b 01       	movw	r8, r22
    7b7a:	5c 01       	movw	r10, r24
    7b7c:	ee 24       	eor	r14, r14
    7b7e:	e3 94       	inc	r14
    7b80:	f1 2c       	mov	r15, r1
    7b82:	20 e0       	ldi	r18, 0x00	; 0
    7b84:	30 e0       	ldi	r19, 0x00	; 0
    7b86:	40 e2       	ldi	r20, 0x20	; 32
    7b88:	51 e4       	ldi	r21, 0x41	; 65
    7b8a:	c5 01       	movw	r24, r10
    7b8c:	b4 01       	movw	r22, r8
    7b8e:	0e 94 fa e4 	call	0x1c9f4	; 0x1c9f4 <__gesf2>
    7b92:	87 fd       	sbrc	r24, 7
    7b94:	11 c0       	rjmp	.+34     	; 0x7bb8 <p_ftoa+0xfc>
    7b96:	ff ef       	ldi	r31, 0xFF	; 255
    7b98:	ef 1a       	sub	r14, r31
    7b9a:	ff 0a       	sbc	r15, r31
    7b9c:	20 e0       	ldi	r18, 0x00	; 0
    7b9e:	30 e0       	ldi	r19, 0x00	; 0
    7ba0:	40 e2       	ldi	r20, 0x20	; 32
    7ba2:	51 e4       	ldi	r21, 0x41	; 65
    7ba4:	c5 01       	movw	r24, r10
    7ba6:	b4 01       	movw	r22, r8
    7ba8:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    7bac:	4b 01       	movw	r8, r22
    7bae:	5c 01       	movw	r10, r24
    7bb0:	e8 cf       	rjmp	.-48     	; 0x7b82 <p_ftoa+0xc6>
    7bb2:	ee 24       	eor	r14, r14
    7bb4:	e3 94       	inc	r14
    7bb6:	f1 2c       	mov	r15, r1
    7bb8:	8c 2d       	mov	r24, r12
    7bba:	88 72       	andi	r24, 0x28	; 40
    7bbc:	80 32       	cpi	r24, 0x20	; 32
    7bbe:	c1 f4       	brne	.+48     	; 0x7bf0 <p_ftoa+0x134>
    7bc0:	82 01       	movw	r16, r4
    7bc2:	0e 19       	sub	r16, r14
    7bc4:	1f 09       	sbc	r17, r15
    7bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    7bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    7bca:	08 1b       	sub	r16, r24
    7bcc:	19 0b       	sbc	r17, r25
    7bce:	c1 fe       	sbrs	r12, 1
    7bd0:	07 c0       	rjmp	.+14     	; 0x7be0 <p_ftoa+0x124>
    7bd2:	61 14       	cp	r6, r1
    7bd4:	71 04       	cpc	r7, r1
    7bd6:	21 f0       	breq	.+8      	; 0x7be0 <p_ftoa+0x124>
    7bd8:	06 19       	sub	r16, r6
    7bda:	17 09       	sbc	r17, r7
    7bdc:	01 50       	subi	r16, 0x01	; 1
    7bde:	11 09       	sbc	r17, r1
    7be0:	10 16       	cp	r1, r16
    7be2:	11 06       	cpc	r1, r17
    7be4:	2c f4       	brge	.+10     	; 0x7bf0 <p_ftoa+0x134>
    7be6:	60 e3       	ldi	r22, 0x30	; 48
    7be8:	ce 01       	movw	r24, r28
    7bea:	01 96       	adiw	r24, 0x01	; 1
    7bec:	f7 de       	rcall	.-530    	; 0x79dc <pch>
    7bee:	f6 cf       	rjmp	.-20     	; 0x7bdc <p_ftoa+0x120>
    7bf0:	c5 01       	movw	r24, r10
    7bf2:	b4 01       	movw	r22, r8
    7bf4:	0e 94 17 e4 	call	0x1c82e	; 0x1c82e <__fixsfsi>
    7bf8:	6f 83       	std	Y+7, r22	; 0x07
    7bfa:	78 87       	std	Y+8, r23	; 0x08
    7bfc:	89 87       	std	Y+9, r24	; 0x09
    7bfe:	9a 87       	std	Y+10, r25	; 0x0a
    7c00:	6f 81       	ldd	r22, Y+7	; 0x07
    7c02:	60 5d       	subi	r22, 0xD0	; 208
    7c04:	ce 01       	movw	r24, r28
    7c06:	01 96       	adiw	r24, 0x01	; 1
    7c08:	e9 de       	rcall	.-558    	; 0x79dc <pch>
    7c0a:	2f 81       	ldd	r18, Y+7	; 0x07
    7c0c:	38 85       	ldd	r19, Y+8	; 0x08
    7c0e:	b9 01       	movw	r22, r18
    7c10:	33 0f       	add	r19, r19
    7c12:	88 0b       	sbc	r24, r24
    7c14:	99 0b       	sbc	r25, r25
    7c16:	0e 94 4a e4 	call	0x1c894	; 0x1c894 <__floatsisf>
    7c1a:	9b 01       	movw	r18, r22
    7c1c:	ac 01       	movw	r20, r24
    7c1e:	c5 01       	movw	r24, r10
    7c20:	b4 01       	movw	r22, r8
    7c22:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__subsf3>
    7c26:	31 e0       	ldi	r19, 0x01	; 1
    7c28:	e3 1a       	sub	r14, r19
    7c2a:	f1 08       	sbc	r15, r1
    7c2c:	20 e0       	ldi	r18, 0x00	; 0
    7c2e:	30 e0       	ldi	r19, 0x00	; 0
    7c30:	40 e2       	ldi	r20, 0x20	; 32
    7c32:	51 e4       	ldi	r21, 0x41	; 65
    7c34:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    7c38:	4b 01       	movw	r8, r22
    7c3a:	5c 01       	movw	r10, r24
    7c3c:	e1 14       	cp	r14, r1
    7c3e:	f1 04       	cpc	r15, r1
    7c40:	b9 f6       	brne	.-82     	; 0x7bf0 <p_ftoa+0x134>
    7c42:	c1 fc       	sbrc	r12, 1
    7c44:	10 c0       	rjmp	.+32     	; 0x7c66 <p_ftoa+0x1aa>
    7c46:	60 e0       	ldi	r22, 0x00	; 0
    7c48:	ce 01       	movw	r24, r28
    7c4a:	01 96       	adiw	r24, 0x01	; 1
    7c4c:	c7 de       	rcall	.-626    	; 0x79dc <pch>
    7c4e:	f1 01       	movw	r30, r2
    7c50:	01 90       	ld	r0, Z+
    7c52:	00 20       	and	r0, r0
    7c54:	e9 f7       	brne	.-6      	; 0x7c50 <p_ftoa+0x194>
    7c56:	31 97       	sbiw	r30, 0x01	; 1
    7c58:	cf 01       	movw	r24, r30
    7c5a:	82 19       	sub	r24, r2
    7c5c:	93 09       	sbc	r25, r3
    7c5e:	2a 96       	adiw	r28, 0x0a	; 10
    7c60:	e2 e1       	ldi	r30, 0x12	; 18
    7c62:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>
    7c66:	61 14       	cp	r6, r1
    7c68:	71 04       	cpc	r7, r1
    7c6a:	69 f3       	breq	.-38     	; 0x7c46 <p_ftoa+0x18a>
    7c6c:	6e e2       	ldi	r22, 0x2E	; 46
    7c6e:	ce 01       	movw	r24, r28
    7c70:	01 96       	adiw	r24, 0x01	; 1
    7c72:	b4 de       	rcall	.-664    	; 0x79dc <pch>
    7c74:	c5 01       	movw	r24, r10
    7c76:	b4 01       	movw	r22, r8
    7c78:	0e 94 17 e4 	call	0x1c82e	; 0x1c82e <__fixsfsi>
    7c7c:	6b 01       	movw	r12, r22
    7c7e:	7c 01       	movw	r14, r24
    7c80:	07 2e       	mov	r0, r23
    7c82:	00 0c       	add	r0, r0
    7c84:	88 0b       	sbc	r24, r24
    7c86:	99 0b       	sbc	r25, r25
    7c88:	0e 94 4a e4 	call	0x1c894	; 0x1c894 <__floatsisf>
    7c8c:	9b 01       	movw	r18, r22
    7c8e:	ac 01       	movw	r20, r24
    7c90:	c5 01       	movw	r24, r10
    7c92:	b4 01       	movw	r22, r8
    7c94:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__subsf3>
    7c98:	4b 01       	movw	r8, r22
    7c9a:	5c 01       	movw	r10, r24
    7c9c:	b6 01       	movw	r22, r12
    7c9e:	60 5d       	subi	r22, 0xD0	; 208
    7ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ca2:	ce 01       	movw	r24, r28
    7ca4:	01 96       	adiw	r24, 0x01	; 1
    7ca6:	9a de       	rcall	.-716    	; 0x79dc <pch>
    7ca8:	81 e0       	ldi	r24, 0x01	; 1
    7caa:	68 1a       	sub	r6, r24
    7cac:	71 08       	sbc	r7, r1
    7cae:	20 e0       	ldi	r18, 0x00	; 0
    7cb0:	30 e0       	ldi	r19, 0x00	; 0
    7cb2:	40 e2       	ldi	r20, 0x20	; 32
    7cb4:	51 e4       	ldi	r21, 0x41	; 65
    7cb6:	c5 01       	movw	r24, r10
    7cb8:	b4 01       	movw	r22, r8
    7cba:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    7cbe:	4b 01       	movw	r8, r22
    7cc0:	5c 01       	movw	r10, r24
    7cc2:	61 14       	cp	r6, r1
    7cc4:	71 04       	cpc	r7, r1
    7cc6:	b1 f6       	brne	.-84     	; 0x7c74 <p_ftoa+0x1b8>
    7cc8:	be cf       	rjmp	.-132    	; 0x7c46 <p_ftoa+0x18a>

00007cca <p_etoa>:
    7cca:	a3 e1       	ldi	r26, 0x13	; 19
    7ccc:	b0 e0       	ldi	r27, 0x00	; 0
    7cce:	eb e6       	ldi	r30, 0x6B	; 107
    7cd0:	fe e3       	ldi	r31, 0x3E	; 62
    7cd2:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    7cd6:	4b 01       	movw	r8, r22
    7cd8:	5c 01       	movw	r10, r24
    7cda:	59 8b       	std	Y+17, r21	; 0x11
    7cdc:	48 8b       	std	Y+16, r20	; 0x10
    7cde:	1b 8b       	std	Y+19, r17	; 0x13
    7ce0:	0a 8b       	std	Y+18, r16	; 0x12
    7ce2:	3c 2c       	mov	r3, r12
    7ce4:	c6 fa       	bst	r12, 6
    7ce6:	11 27       	eor	r17, r17
    7ce8:	10 f9       	bld	r17, 0
    7cea:	59 87       	std	Y+9, r21	; 0x09
    7cec:	48 87       	std	Y+8, r20	; 0x08
    7cee:	1b 86       	std	Y+11, r1	; 0x0b
    7cf0:	1a 86       	std	Y+10, r1	; 0x0a
    7cf2:	21 50       	subi	r18, 0x01	; 1
    7cf4:	31 09       	sbc	r19, r1
    7cf6:	3d 87       	std	Y+13, r19	; 0x0d
    7cf8:	2c 87       	std	Y+12, r18	; 0x0c
    7cfa:	fa 01       	movw	r30, r20
    7cfc:	10 82       	st	Z, r1
    7cfe:	20 e0       	ldi	r18, 0x00	; 0
    7d00:	30 e0       	ldi	r19, 0x00	; 0
    7d02:	a9 01       	movw	r20, r18
    7d04:	0e 94 ab e3 	call	0x1c756	; 0x1c756 <__cmpsf2>
    7d08:	87 ff       	sbrs	r24, 7
    7d0a:	05 c0       	rjmp	.+10     	; 0x7d16 <p_etoa+0x4c>
    7d0c:	b7 fa       	bst	r11, 7
    7d0e:	b0 94       	com	r11
    7d10:	b7 f8       	bld	r11, 7
    7d12:	b0 94       	com	r11
    7d14:	11 e0       	ldi	r17, 0x01	; 1
    7d16:	10 fb       	bst	r17, 0
    7d18:	36 f8       	bld	r3, 6
    7d1a:	36 fe       	sbrs	r3, 6
    7d1c:	02 c0       	rjmp	.+4      	; 0x7d22 <p_etoa+0x58>
    7d1e:	6d e2       	ldi	r22, 0x2D	; 45
    7d20:	07 c0       	rjmp	.+14     	; 0x7d30 <p_etoa+0x66>
    7d22:	32 fe       	sbrs	r3, 2
    7d24:	02 c0       	rjmp	.+4      	; 0x7d2a <p_etoa+0x60>
    7d26:	6b e2       	ldi	r22, 0x2B	; 43
    7d28:	03 c0       	rjmp	.+6      	; 0x7d30 <p_etoa+0x66>
    7d2a:	34 fe       	sbrs	r3, 4
    7d2c:	04 c0       	rjmp	.+8      	; 0x7d36 <p_etoa+0x6c>
    7d2e:	60 e2       	ldi	r22, 0x20	; 32
    7d30:	ce 01       	movw	r24, r28
    7d32:	08 96       	adiw	r24, 0x08	; 8
    7d34:	53 de       	rcall	.-858    	; 0x79dc <pch>
    7d36:	37 01       	movw	r6, r14
    7d38:	f7 fe       	sbrs	r15, 7
    7d3a:	02 c0       	rjmp	.+4      	; 0x7d40 <p_etoa+0x76>
    7d3c:	61 2c       	mov	r6, r1
    7d3e:	71 2c       	mov	r7, r1
    7d40:	1f 86       	std	Y+15, r1	; 0x0f
    7d42:	1e 86       	std	Y+14, r1	; 0x0e
    7d44:	20 e0       	ldi	r18, 0x00	; 0
    7d46:	30 e0       	ldi	r19, 0x00	; 0
    7d48:	a9 01       	movw	r20, r18
    7d4a:	c5 01       	movw	r24, r10
    7d4c:	b4 01       	movw	r22, r8
    7d4e:	0e 94 ab e3 	call	0x1c756	; 0x1c756 <__cmpsf2>
    7d52:	f3 2d       	mov	r31, r3
    7d54:	f2 70       	andi	r31, 0x02	; 2
    7d56:	2f 2e       	mov	r2, r31
    7d58:	88 23       	and	r24, r24
    7d5a:	09 f4       	brne	.+2      	; 0x7d5e <p_etoa+0x94>
    7d5c:	70 c0       	rjmp	.+224    	; 0x7e3e <p_etoa+0x174>
    7d5e:	ff 23       	and	r31, r31
    7d60:	b1 f0       	breq	.+44     	; 0x7d8e <p_etoa+0xc4>
    7d62:	83 01       	movw	r16, r6
    7d64:	c1 2c       	mov	r12, r1
    7d66:	d1 2c       	mov	r13, r1
    7d68:	e1 2c       	mov	r14, r1
    7d6a:	2f e3       	ldi	r18, 0x3F	; 63
    7d6c:	f2 2e       	mov	r15, r18
    7d6e:	01 15       	cp	r16, r1
    7d70:	11 05       	cpc	r17, r1
    7d72:	91 f0       	breq	.+36     	; 0x7d98 <p_etoa+0xce>
    7d74:	20 e0       	ldi	r18, 0x00	; 0
    7d76:	30 e0       	ldi	r19, 0x00	; 0
    7d78:	40 e2       	ldi	r20, 0x20	; 32
    7d7a:	51 e4       	ldi	r21, 0x41	; 65
    7d7c:	c7 01       	movw	r24, r14
    7d7e:	b6 01       	movw	r22, r12
    7d80:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    7d84:	6b 01       	movw	r12, r22
    7d86:	7c 01       	movw	r14, r24
    7d88:	01 50       	subi	r16, 0x01	; 1
    7d8a:	11 09       	sbc	r17, r1
    7d8c:	f0 cf       	rjmp	.-32     	; 0x7d6e <p_etoa+0xa4>
    7d8e:	c1 2c       	mov	r12, r1
    7d90:	d1 2c       	mov	r13, r1
    7d92:	e1 2c       	mov	r14, r1
    7d94:	9f e3       	ldi	r25, 0x3F	; 63
    7d96:	f9 2e       	mov	r15, r25
    7d98:	41 2c       	mov	r4, r1
    7d9a:	51 2c       	mov	r5, r1
    7d9c:	82 01       	movw	r16, r4
    7d9e:	01 50       	subi	r16, 0x01	; 1
    7da0:	11 09       	sbc	r17, r1
    7da2:	20 e0       	ldi	r18, 0x00	; 0
    7da4:	30 e0       	ldi	r19, 0x00	; 0
    7da6:	40 e8       	ldi	r20, 0x80	; 128
    7da8:	5f e3       	ldi	r21, 0x3F	; 63
    7daa:	c5 01       	movw	r24, r10
    7dac:	b4 01       	movw	r22, r8
    7dae:	0e 94 ab e3 	call	0x1c756	; 0x1c756 <__cmpsf2>
    7db2:	87 ff       	sbrs	r24, 7
    7db4:	0c c0       	rjmp	.+24     	; 0x7dce <p_etoa+0x104>
    7db6:	20 e0       	ldi	r18, 0x00	; 0
    7db8:	30 e0       	ldi	r19, 0x00	; 0
    7dba:	40 e2       	ldi	r20, 0x20	; 32
    7dbc:	51 e4       	ldi	r21, 0x41	; 65
    7dbe:	c5 01       	movw	r24, r10
    7dc0:	b4 01       	movw	r22, r8
    7dc2:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    7dc6:	4b 01       	movw	r8, r22
    7dc8:	5c 01       	movw	r10, r24
    7dca:	28 01       	movw	r4, r16
    7dcc:	e7 cf       	rjmp	.-50     	; 0x7d9c <p_etoa+0xd2>
    7dce:	82 01       	movw	r16, r4
    7dd0:	0f 5f       	subi	r16, 0xFF	; 255
    7dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    7dd4:	20 e0       	ldi	r18, 0x00	; 0
    7dd6:	30 e0       	ldi	r19, 0x00	; 0
    7dd8:	40 e2       	ldi	r20, 0x20	; 32
    7dda:	51 e4       	ldi	r21, 0x41	; 65
    7ddc:	c5 01       	movw	r24, r10
    7dde:	b4 01       	movw	r22, r8
    7de0:	0e 94 fa e4 	call	0x1c9f4	; 0x1c9f4 <__gesf2>
    7de4:	87 fd       	sbrc	r24, 7
    7de6:	0c c0       	rjmp	.+24     	; 0x7e00 <p_etoa+0x136>
    7de8:	20 e0       	ldi	r18, 0x00	; 0
    7dea:	30 e0       	ldi	r19, 0x00	; 0
    7dec:	40 e2       	ldi	r20, 0x20	; 32
    7dee:	51 e4       	ldi	r21, 0x41	; 65
    7df0:	c5 01       	movw	r24, r10
    7df2:	b4 01       	movw	r22, r8
    7df4:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    7df8:	4b 01       	movw	r8, r22
    7dfa:	5c 01       	movw	r10, r24
    7dfc:	28 01       	movw	r4, r16
    7dfe:	e7 cf       	rjmp	.-50     	; 0x7dce <p_etoa+0x104>
    7e00:	a7 01       	movw	r20, r14
    7e02:	96 01       	movw	r18, r12
    7e04:	c5 01       	movw	r24, r10
    7e06:	b4 01       	movw	r22, r8
    7e08:	0e 94 47 e3 	call	0x1c68e	; 0x1c68e <__addsf3>
    7e0c:	4b 01       	movw	r8, r22
    7e0e:	5c 01       	movw	r10, r24
    7e10:	82 01       	movw	r16, r4
    7e12:	2f ef       	ldi	r18, 0xFF	; 255
    7e14:	42 1a       	sub	r4, r18
    7e16:	52 0a       	sbc	r5, r18
    7e18:	20 e0       	ldi	r18, 0x00	; 0
    7e1a:	30 e0       	ldi	r19, 0x00	; 0
    7e1c:	40 e2       	ldi	r20, 0x20	; 32
    7e1e:	51 e4       	ldi	r21, 0x41	; 65
    7e20:	0e 94 fa e4 	call	0x1c9f4	; 0x1c9f4 <__gesf2>
    7e24:	87 fd       	sbrc	r24, 7
    7e26:	09 c0       	rjmp	.+18     	; 0x7e3a <p_etoa+0x170>
    7e28:	20 e0       	ldi	r18, 0x00	; 0
    7e2a:	30 e0       	ldi	r19, 0x00	; 0
    7e2c:	40 e2       	ldi	r20, 0x20	; 32
    7e2e:	51 e4       	ldi	r21, 0x41	; 65
    7e30:	c5 01       	movw	r24, r10
    7e32:	b4 01       	movw	r22, r8
    7e34:	0e 94 af e3 	call	0x1c75e	; 0x1c75e <__divsf3>
    7e38:	e9 cf       	rjmp	.-46     	; 0x7e0c <p_etoa+0x142>
    7e3a:	0e 87       	std	Y+14, r16	; 0x0e
    7e3c:	1f 87       	std	Y+15, r17	; 0x0f
    7e3e:	85 e6       	ldi	r24, 0x65	; 101
    7e40:	89 83       	std	Y+1, r24	; 0x01
    7e42:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e44:	9f 85       	ldd	r25, Y+15	; 0x0f
    7e46:	97 ff       	sbrs	r25, 7
    7e48:	08 c0       	rjmp	.+16     	; 0x7e5a <p_etoa+0x190>
    7e4a:	91 95       	neg	r25
    7e4c:	81 95       	neg	r24
    7e4e:	91 09       	sbc	r25, r1
    7e50:	9f 87       	std	Y+15, r25	; 0x0f
    7e52:	8e 87       	std	Y+14, r24	; 0x0e
    7e54:	8d e2       	ldi	r24, 0x2D	; 45
    7e56:	90 e0       	ldi	r25, 0x00	; 0
    7e58:	02 c0       	rjmp	.+4      	; 0x7e5e <p_etoa+0x194>
    7e5a:	8b e2       	ldi	r24, 0x2B	; 43
    7e5c:	90 e0       	ldi	r25, 0x00	; 0
    7e5e:	6c 01       	movw	r12, r24
    7e60:	82 e0       	ldi	r24, 0x02	; 2
    7e62:	e8 2e       	mov	r14, r24
    7e64:	f1 2c       	mov	r15, r1
    7e66:	8e 01       	movw	r16, r28
    7e68:	02 5f       	subi	r16, 0xF2	; 242
    7e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    7e6c:	2a e0       	ldi	r18, 0x0A	; 10
    7e6e:	30 e0       	ldi	r19, 0x00	; 0
    7e70:	42 e0       	ldi	r20, 0x02	; 2
    7e72:	50 e0       	ldi	r21, 0x00	; 0
    7e74:	65 e0       	ldi	r22, 0x05	; 5
    7e76:	70 e0       	ldi	r23, 0x00	; 0
    7e78:	ce 01       	movw	r24, r28
    7e7a:	02 96       	adiw	r24, 0x02	; 2
    7e7c:	26 dd       	rcall	.-1460   	; 0x78ca <bin2num>
    7e7e:	9c 01       	movw	r18, r24
    7e80:	93 2d       	mov	r25, r3
    7e82:	98 72       	andi	r25, 0x28	; 40
    7e84:	90 32       	cpi	r25, 0x20	; 32
    7e86:	71 f0       	breq	.+28     	; 0x7ea4 <p_etoa+0x1da>
    7e88:	c5 01       	movw	r24, r10
    7e8a:	b4 01       	movw	r22, r8
    7e8c:	0e 94 17 e4 	call	0x1c82e	; 0x1c82e <__fixsfsi>
    7e90:	6b 01       	movw	r12, r22
    7e92:	7c 01       	movw	r14, r24
    7e94:	60 e3       	ldi	r22, 0x30	; 48
    7e96:	6c 0d       	add	r22, r12
    7e98:	ce 01       	movw	r24, r28
    7e9a:	08 96       	adiw	r24, 0x08	; 8
    7e9c:	9f dd       	rcall	.-1218   	; 0x79dc <pch>
    7e9e:	21 10       	cpse	r2, r1
    7ea0:	20 c0       	rjmp	.+64     	; 0x7ee2 <p_etoa+0x218>
    7ea2:	63 c0       	rjmp	.+198    	; 0x7f6a <p_etoa+0x2a0>
    7ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ea8:	0a 89       	ldd	r16, Y+18	; 0x12
    7eaa:	1b 89       	ldd	r17, Y+19	; 0x13
    7eac:	08 1b       	sub	r16, r24
    7eae:	19 0b       	sbc	r17, r25
    7eb0:	22 20       	and	r2, r2
    7eb2:	41 f0       	breq	.+16     	; 0x7ec4 <p_etoa+0x1fa>
    7eb4:	61 14       	cp	r6, r1
    7eb6:	71 04       	cpc	r7, r1
    7eb8:	29 f0       	breq	.+10     	; 0x7ec4 <p_etoa+0x1fa>
    7eba:	06 19       	sub	r16, r6
    7ebc:	17 09       	sbc	r17, r7
    7ebe:	06 50       	subi	r16, 0x06	; 6
    7ec0:	11 09       	sbc	r17, r1
    7ec2:	02 c0       	rjmp	.+4      	; 0x7ec8 <p_etoa+0x1fe>
    7ec4:	05 50       	subi	r16, 0x05	; 5
    7ec6:	11 09       	sbc	r17, r1
    7ec8:	24 30       	cpi	r18, 0x04	; 4
    7eca:	31 05       	cpc	r19, r1
    7ecc:	14 f0       	brlt	.+4      	; 0x7ed2 <p_etoa+0x208>
    7ece:	01 50       	subi	r16, 0x01	; 1
    7ed0:	11 09       	sbc	r17, r1
    7ed2:	10 16       	cp	r1, r16
    7ed4:	11 06       	cpc	r1, r17
    7ed6:	c4 f6       	brge	.-80     	; 0x7e88 <p_etoa+0x1be>
    7ed8:	60 e3       	ldi	r22, 0x30	; 48
    7eda:	ce 01       	movw	r24, r28
    7edc:	08 96       	adiw	r24, 0x08	; 8
    7ede:	7e dd       	rcall	.-1284   	; 0x79dc <pch>
    7ee0:	f6 cf       	rjmp	.-20     	; 0x7ece <p_etoa+0x204>
    7ee2:	61 14       	cp	r6, r1
    7ee4:	71 04       	cpc	r7, r1
    7ee6:	09 f4       	brne	.+2      	; 0x7eea <p_etoa+0x220>
    7ee8:	40 c0       	rjmp	.+128    	; 0x7f6a <p_etoa+0x2a0>
    7eea:	b6 01       	movw	r22, r12
    7eec:	dd 0c       	add	r13, r13
    7eee:	88 0b       	sbc	r24, r24
    7ef0:	99 0b       	sbc	r25, r25
    7ef2:	0e 94 4a e4 	call	0x1c894	; 0x1c894 <__floatsisf>
    7ef6:	9b 01       	movw	r18, r22
    7ef8:	ac 01       	movw	r20, r24
    7efa:	c5 01       	movw	r24, r10
    7efc:	b4 01       	movw	r22, r8
    7efe:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__subsf3>
    7f02:	20 e0       	ldi	r18, 0x00	; 0
    7f04:	30 e0       	ldi	r19, 0x00	; 0
    7f06:	40 e2       	ldi	r20, 0x20	; 32
    7f08:	51 e4       	ldi	r21, 0x41	; 65
    7f0a:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    7f0e:	4b 01       	movw	r8, r22
    7f10:	5c 01       	movw	r10, r24
    7f12:	6e e2       	ldi	r22, 0x2E	; 46
    7f14:	ce 01       	movw	r24, r28
    7f16:	08 96       	adiw	r24, 0x08	; 8
    7f18:	61 dd       	rcall	.-1342   	; 0x79dc <pch>
    7f1a:	c5 01       	movw	r24, r10
    7f1c:	b4 01       	movw	r22, r8
    7f1e:	0e 94 17 e4 	call	0x1c82e	; 0x1c82e <__fixsfsi>
    7f22:	6b 01       	movw	r12, r22
    7f24:	7c 01       	movw	r14, r24
    7f26:	07 2e       	mov	r0, r23
    7f28:	00 0c       	add	r0, r0
    7f2a:	88 0b       	sbc	r24, r24
    7f2c:	99 0b       	sbc	r25, r25
    7f2e:	0e 94 4a e4 	call	0x1c894	; 0x1c894 <__floatsisf>
    7f32:	9b 01       	movw	r18, r22
    7f34:	ac 01       	movw	r20, r24
    7f36:	c5 01       	movw	r24, r10
    7f38:	b4 01       	movw	r22, r8
    7f3a:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__subsf3>
    7f3e:	4b 01       	movw	r8, r22
    7f40:	5c 01       	movw	r10, r24
    7f42:	b6 01       	movw	r22, r12
    7f44:	60 5d       	subi	r22, 0xD0	; 208
    7f46:	7f 4f       	sbci	r23, 0xFF	; 255
    7f48:	ce 01       	movw	r24, r28
    7f4a:	08 96       	adiw	r24, 0x08	; 8
    7f4c:	47 dd       	rcall	.-1394   	; 0x79dc <pch>
    7f4e:	20 e0       	ldi	r18, 0x00	; 0
    7f50:	30 e0       	ldi	r19, 0x00	; 0
    7f52:	40 e2       	ldi	r20, 0x20	; 32
    7f54:	51 e4       	ldi	r21, 0x41	; 65
    7f56:	c5 01       	movw	r24, r10
    7f58:	b4 01       	movw	r22, r8
    7f5a:	0e 94 fe e4 	call	0x1c9fc	; 0x1c9fc <__mulsf3>
    7f5e:	4b 01       	movw	r8, r22
    7f60:	5c 01       	movw	r10, r24
    7f62:	31 e0       	ldi	r19, 0x01	; 1
    7f64:	63 1a       	sub	r6, r19
    7f66:	71 08       	sbc	r7, r1
    7f68:	c1 f6       	brne	.-80     	; 0x7f1a <p_etoa+0x250>
    7f6a:	8e 01       	movw	r16, r28
    7f6c:	0f 5f       	subi	r16, 0xFF	; 255
    7f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7f70:	f8 01       	movw	r30, r16
    7f72:	61 91       	ld	r22, Z+
    7f74:	8f 01       	movw	r16, r30
    7f76:	ce 01       	movw	r24, r28
    7f78:	08 96       	adiw	r24, 0x08	; 8
    7f7a:	66 23       	and	r22, r22
    7f7c:	11 f0       	breq	.+4      	; 0x7f82 <p_etoa+0x2b8>
    7f7e:	2e dd       	rcall	.-1444   	; 0x79dc <pch>
    7f80:	f7 cf       	rjmp	.-18     	; 0x7f70 <p_etoa+0x2a6>
    7f82:	2c dd       	rcall	.-1448   	; 0x79dc <pch>
    7f84:	e8 89       	ldd	r30, Y+16	; 0x10
    7f86:	f9 89       	ldd	r31, Y+17	; 0x11
    7f88:	01 90       	ld	r0, Z+
    7f8a:	00 20       	and	r0, r0
    7f8c:	e9 f7       	brne	.-6      	; 0x7f88 <p_etoa+0x2be>
    7f8e:	cf 01       	movw	r24, r30
    7f90:	01 97       	sbiw	r24, 0x01	; 1
    7f92:	28 89       	ldd	r18, Y+16	; 0x10
    7f94:	39 89       	ldd	r19, Y+17	; 0x11
    7f96:	82 1b       	sub	r24, r18
    7f98:	93 0b       	sbc	r25, r19
    7f9a:	63 96       	adiw	r28, 0x13	; 19
    7f9c:	e2 e1       	ldi	r30, 0x12	; 18
    7f9e:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00007fa2 <_puts_pad>:
    7fa2:	a0 e0       	ldi	r26, 0x00	; 0
    7fa4:	b0 e0       	ldi	r27, 0x00	; 0
    7fa6:	e7 ed       	ldi	r30, 0xD7	; 215
    7fa8:	ff e3       	ldi	r31, 0x3F	; 63
    7faa:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
    7fae:	6c 01       	movw	r12, r24
    7fb0:	4b 01       	movw	r8, r22
    7fb2:	79 01       	movw	r14, r18
    7fb4:	24 17       	cp	r18, r20
    7fb6:	35 07       	cpc	r19, r21
    7fb8:	24 f4       	brge	.+8      	; 0x7fc2 <_puts_pad+0x20>
    7fba:	ea 01       	movw	r28, r20
    7fbc:	c2 1b       	sub	r28, r18
    7fbe:	d3 0b       	sbc	r29, r19
    7fc0:	02 c0       	rjmp	.+4      	; 0x7fc6 <_puts_pad+0x24>
    7fc2:	c0 e0       	ldi	r28, 0x00	; 0
    7fc4:	d0 e0       	ldi	r29, 0x00	; 0
    7fc6:	01 15       	cp	r16, r1
    7fc8:	11 05       	cpc	r17, r1
    7fca:	49 f4       	brne	.+18     	; 0x7fde <_puts_pad+0x3c>
    7fcc:	21 97       	sbiw	r28, 0x01	; 1
    7fce:	38 f0       	brcs	.+14     	; 0x7fde <_puts_pad+0x3c>
    7fd0:	d6 01       	movw	r26, r12
    7fd2:	ed 91       	ld	r30, X+
    7fd4:	fc 91       	ld	r31, X
    7fd6:	60 e2       	ldi	r22, 0x20	; 32
    7fd8:	c6 01       	movw	r24, r12
    7fda:	09 95       	icall
    7fdc:	f7 cf       	rjmp	.-18     	; 0x7fcc <_puts_pad+0x2a>
    7fde:	54 01       	movw	r10, r8
    7fe0:	f5 01       	movw	r30, r10
    7fe2:	61 91       	ld	r22, Z+
    7fe4:	5f 01       	movw	r10, r30
    7fe6:	66 23       	and	r22, r22
    7fe8:	61 f0       	breq	.+24     	; 0x8002 <_puts_pad+0x60>
    7fea:	e1 14       	cp	r14, r1
    7fec:	f1 04       	cpc	r15, r1
    7fee:	49 f0       	breq	.+18     	; 0x8002 <_puts_pad+0x60>
    7ff0:	d6 01       	movw	r26, r12
    7ff2:	ed 91       	ld	r30, X+
    7ff4:	fc 91       	ld	r31, X
    7ff6:	c6 01       	movw	r24, r12
    7ff8:	09 95       	icall
    7ffa:	b1 e0       	ldi	r27, 0x01	; 1
    7ffc:	eb 1a       	sub	r14, r27
    7ffe:	f1 08       	sbc	r15, r1
    8000:	ef cf       	rjmp	.-34     	; 0x7fe0 <_puts_pad+0x3e>
    8002:	01 15       	cp	r16, r1
    8004:	11 05       	cpc	r17, r1
    8006:	51 f0       	breq	.+20     	; 0x801c <_puts_pad+0x7a>
    8008:	20 97       	sbiw	r28, 0x00	; 0
    800a:	41 f0       	breq	.+16     	; 0x801c <_puts_pad+0x7a>
    800c:	d6 01       	movw	r26, r12
    800e:	ed 91       	ld	r30, X+
    8010:	fc 91       	ld	r31, X
    8012:	60 e2       	ldi	r22, 0x20	; 32
    8014:	c6 01       	movw	r24, r12
    8016:	09 95       	icall
    8018:	21 97       	sbiw	r28, 0x01	; 1
    801a:	f6 cf       	rjmp	.-20     	; 0x8008 <_puts_pad+0x66>
    801c:	cd b7       	in	r28, 0x3d	; 61
    801e:	de b7       	in	r29, 0x3e	; 62
    8020:	ec e0       	ldi	r30, 0x0C	; 12
    8022:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

00008026 <_puts_pad_X>:
    8026:	2f 92       	push	r2
    8028:	3f 92       	push	r3
    802a:	4f 92       	push	r4
    802c:	6f 92       	push	r6
    802e:	7f 92       	push	r7
    8030:	8f 92       	push	r8
    8032:	cf 92       	push	r12
    8034:	df 92       	push	r13
    8036:	ef 92       	push	r14
    8038:	ff 92       	push	r15
    803a:	0f 93       	push	r16
    803c:	1f 93       	push	r17
    803e:	cf 93       	push	r28
    8040:	df 93       	push	r29
    8042:	6c 01       	movw	r12, r24
    8044:	3a 01       	movw	r6, r20
    8046:	86 2e       	mov	r8, r22
    8048:	02 17       	cp	r16, r18
    804a:	13 07       	cpc	r17, r19
    804c:	24 f4       	brge	.+8      	; 0x8056 <_puts_pad_X+0x30>
    804e:	e9 01       	movw	r28, r18
    8050:	c0 1b       	sub	r28, r16
    8052:	d1 0b       	sbc	r29, r17
    8054:	02 c0       	rjmp	.+4      	; 0x805a <_puts_pad_X+0x34>
    8056:	c0 e0       	ldi	r28, 0x00	; 0
    8058:	d0 e0       	ldi	r29, 0x00	; 0
    805a:	e1 14       	cp	r14, r1
    805c:	f1 04       	cpc	r15, r1
    805e:	49 f4       	brne	.+18     	; 0x8072 <_puts_pad_X+0x4c>
    8060:	21 97       	sbiw	r28, 0x01	; 1
    8062:	38 f0       	brcs	.+14     	; 0x8072 <_puts_pad_X+0x4c>
    8064:	d6 01       	movw	r26, r12
    8066:	ed 91       	ld	r30, X+
    8068:	fc 91       	ld	r31, X
    806a:	60 e2       	ldi	r22, 0x20	; 32
    806c:	c6 01       	movw	r24, r12
    806e:	09 95       	icall
    8070:	f7 cf       	rjmp	.-18     	; 0x8060 <_puts_pad_X+0x3a>
    8072:	13 01       	movw	r2, r6
    8074:	48 2c       	mov	r4, r8
    8076:	20 0e       	add	r2, r16
    8078:	31 1e       	adc	r3, r17
    807a:	41 1c       	adc	r4, r1
    807c:	17 fd       	sbrc	r17, 7
    807e:	4a 94       	dec	r4
    8080:	f3 01       	movw	r30, r6
    8082:	58 2d       	mov	r21, r8
    8084:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    8088:	66 23       	and	r22, r22
    808a:	71 f0       	breq	.+28     	; 0x80a8 <_puts_pad_X+0x82>
    808c:	62 14       	cp	r6, r2
    808e:	73 04       	cpc	r7, r3
    8090:	84 04       	cpc	r8, r4
    8092:	51 f0       	breq	.+20     	; 0x80a8 <_puts_pad_X+0x82>
    8094:	d6 01       	movw	r26, r12
    8096:	ed 91       	ld	r30, X+
    8098:	fc 91       	ld	r31, X
    809a:	c6 01       	movw	r24, r12
    809c:	09 95       	icall
    809e:	bf ef       	ldi	r27, 0xFF	; 255
    80a0:	6b 1a       	sub	r6, r27
    80a2:	7b 0a       	sbc	r7, r27
    80a4:	8b 0a       	sbc	r8, r27
    80a6:	ec cf       	rjmp	.-40     	; 0x8080 <_puts_pad_X+0x5a>
    80a8:	ef 28       	or	r14, r15
    80aa:	51 f0       	breq	.+20     	; 0x80c0 <_puts_pad_X+0x9a>
    80ac:	20 97       	sbiw	r28, 0x00	; 0
    80ae:	41 f0       	breq	.+16     	; 0x80c0 <_puts_pad_X+0x9a>
    80b0:	d6 01       	movw	r26, r12
    80b2:	ed 91       	ld	r30, X+
    80b4:	fc 91       	ld	r31, X
    80b6:	60 e2       	ldi	r22, 0x20	; 32
    80b8:	c6 01       	movw	r24, r12
    80ba:	09 95       	icall
    80bc:	21 97       	sbiw	r28, 0x01	; 1
    80be:	f6 cf       	rjmp	.-20     	; 0x80ac <_puts_pad_X+0x86>
    80c0:	df 91       	pop	r29
    80c2:	cf 91       	pop	r28
    80c4:	1f 91       	pop	r17
    80c6:	0f 91       	pop	r16
    80c8:	ff 90       	pop	r15
    80ca:	ef 90       	pop	r14
    80cc:	df 90       	pop	r13
    80ce:	cf 90       	pop	r12
    80d0:	8f 90       	pop	r8
    80d2:	7f 90       	pop	r7
    80d4:	6f 90       	pop	r6
    80d6:	4f 90       	pop	r4
    80d8:	3f 90       	pop	r3
    80da:	2f 90       	pop	r2
    80dc:	08 95       	ret

000080de <strlen_X>:
    80de:	cf 92       	push	r12
    80e0:	df 92       	push	r13
    80e2:	ef 92       	push	r14
    80e4:	9b 01       	movw	r18, r22
    80e6:	48 2f       	mov	r20, r24
    80e8:	80 e0       	ldi	r24, 0x00	; 0
    80ea:	90 e0       	ldi	r25, 0x00	; 0
    80ec:	2f 5f       	subi	r18, 0xFF	; 255
    80ee:	3f 4f       	sbci	r19, 0xFF	; 255
    80f0:	4f 4f       	sbci	r20, 0xFF	; 255
    80f2:	69 01       	movw	r12, r18
    80f4:	e4 2e       	mov	r14, r20
    80f6:	51 e0       	ldi	r21, 0x01	; 1
    80f8:	c5 1a       	sub	r12, r21
    80fa:	d1 08       	sbc	r13, r1
    80fc:	e1 08       	sbc	r14, r1
    80fe:	f6 01       	movw	r30, r12
    8100:	5e 2d       	mov	r21, r14
    8102:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    8106:	66 23       	and	r22, r22
    8108:	11 f0       	breq	.+4      	; 0x810e <strlen_X+0x30>
    810a:	01 96       	adiw	r24, 0x01	; 1
    810c:	ef cf       	rjmp	.-34     	; 0x80ec <strlen_X+0xe>
    810e:	ef 90       	pop	r14
    8110:	df 90       	pop	r13
    8112:	cf 90       	pop	r12
    8114:	08 95       	ret

00008116 <_printf_fn>:
    8116:	ae e6       	ldi	r26, 0x6E	; 110
    8118:	b0 e0       	ldi	r27, 0x00	; 0
    811a:	e1 e9       	ldi	r30, 0x91	; 145
    811c:	f0 e4       	ldi	r31, 0x40	; 64
    811e:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    8122:	a5 96       	adiw	r28, 0x25	; 37
    8124:	9f af       	std	Y+63, r25	; 0x3f
    8126:	8e af       	std	Y+62, r24	; 0x3e
    8128:	a5 97       	sbiw	r28, 0x25	; 37
    812a:	6a 01       	movw	r12, r20
    812c:	e6 2e       	mov	r14, r22
    812e:	19 01       	movw	r2, r18
    8130:	a9 96       	adiw	r28, 0x29	; 41
    8132:	1c ae       	std	Y+60, r1	; 0x3c
    8134:	1d ae       	std	Y+61, r1	; 0x3d
    8136:	1e ae       	std	Y+62, r1	; 0x3e
    8138:	1f ae       	std	Y+63, r1	; 0x3f
    813a:	a9 97       	sbiw	r28, 0x29	; 41
    813c:	8a e1       	ldi	r24, 0x1A	; 26
    813e:	94 e0       	ldi	r25, 0x04	; 4
    8140:	9c 01       	movw	r18, r24
    8142:	40 e8       	ldi	r20, 0x80	; 128
    8144:	ae 96       	adiw	r28, 0x2e	; 46
    8146:	2d af       	std	Y+61, r18	; 0x3d
    8148:	3e af       	std	Y+62, r19	; 0x3e
    814a:	4f af       	std	Y+63, r20	; 0x3f
    814c:	ae 97       	sbiw	r28, 0x2e	; 46
    814e:	ae 01       	movw	r20, r28
    8150:	4f 5a       	subi	r20, 0xAF	; 175
    8152:	5f 4f       	sbci	r21, 0xFF	; 255
    8154:	67 96       	adiw	r28, 0x17	; 23
    8156:	5f af       	std	Y+63, r21	; 0x3f
    8158:	4e af       	std	Y+62, r20	; 0x3e
    815a:	67 97       	sbiw	r28, 0x17	; 23
    815c:	ce 01       	movw	r24, r28
    815e:	8d 5b       	subi	r24, 0xBD	; 189
    8160:	9f 4f       	sbci	r25, 0xFF	; 255
    8162:	69 96       	adiw	r28, 0x19	; 25
    8164:	9f af       	std	Y+63, r25	; 0x3f
    8166:	8e af       	std	Y+62, r24	; 0x3e
    8168:	69 97       	sbiw	r28, 0x19	; 25
    816a:	de 01       	movw	r26, r28
    816c:	a5 5b       	subi	r26, 0xB5	; 181
    816e:	bf 4f       	sbci	r27, 0xFF	; 255
    8170:	6b 96       	adiw	r28, 0x1b	; 27
    8172:	bf af       	std	Y+63, r27	; 0x3f
    8174:	ae af       	std	Y+62, r26	; 0x3e
    8176:	6b 97       	sbiw	r28, 0x1b	; 27
    8178:	fe 01       	movw	r30, r28
    817a:	ed 5a       	subi	r30, 0xAD	; 173
    817c:	ff 4f       	sbci	r31, 0xFF	; 255
    817e:	6d 96       	adiw	r28, 0x1d	; 29
    8180:	ff af       	std	Y+63, r31	; 0x3f
    8182:	ee af       	std	Y+62, r30	; 0x3e
    8184:	6d 97       	sbiw	r28, 0x1d	; 29
    8186:	f6 01       	movw	r30, r12
    8188:	5e 2d       	mov	r21, r14
    818a:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    818e:	66 23       	and	r22, r22
    8190:	09 f4       	brne	.+2      	; 0x8194 <_printf_fn+0x7e>
    8192:	13 c4       	rjmp	.+2086   	; 0x89ba <_printf_fn+0x8a4>
    8194:	ae 2d       	mov	r26, r14
    8196:	c6 01       	movw	r24, r12
    8198:	01 96       	adiw	r24, 0x01	; 1
    819a:	a1 1d       	adc	r26, r1
    819c:	3c 01       	movw	r6, r24
    819e:	8a 2e       	mov	r8, r26
    81a0:	65 32       	cpi	r22, 0x25	; 37
    81a2:	51 f0       	breq	.+20     	; 0x81b8 <_printf_fn+0xa2>
    81a4:	a5 96       	adiw	r28, 0x25	; 37
    81a6:	ae ad       	ldd	r26, Y+62	; 0x3e
    81a8:	bf ad       	ldd	r27, Y+63	; 0x3f
    81aa:	a5 97       	sbiw	r28, 0x25	; 37
    81ac:	ed 91       	ld	r30, X+
    81ae:	fc 91       	ld	r31, X
    81b0:	11 97       	sbiw	r26, 0x01	; 1
    81b2:	cd 01       	movw	r24, r26
    81b4:	09 95       	icall
    81b6:	d5 c3       	rjmp	.+1962   	; 0x8962 <_printf_fn+0x84c>
    81b8:	91 2c       	mov	r9, r1
    81ba:	f3 01       	movw	r30, r6
    81bc:	58 2d       	mov	r21, r8
    81be:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    81c2:	63 32       	cpi	r22, 0x23	; 35
    81c4:	19 f4       	brne	.+6      	; 0x81cc <_printf_fn+0xb6>
    81c6:	68 94       	set
    81c8:	97 f8       	bld	r9, 7
    81ca:	04 c0       	rjmp	.+8      	; 0x81d4 <_printf_fn+0xbe>
    81cc:	6b 32       	cpi	r22, 0x2B	; 43
    81ce:	39 f4       	brne	.+14     	; 0x81de <_printf_fn+0xc8>
    81d0:	68 94       	set
    81d2:	92 f8       	bld	r9, 2
    81d4:	bf ef       	ldi	r27, 0xFF	; 255
    81d6:	6b 1a       	sub	r6, r27
    81d8:	7b 0a       	sbc	r7, r27
    81da:	8b 0a       	sbc	r8, r27
    81dc:	ee cf       	rjmp	.-36     	; 0x81ba <_printf_fn+0xa4>
    81de:	6d 32       	cpi	r22, 0x2D	; 45
    81e0:	a9 f4       	brne	.+42     	; 0x820c <_printf_fn+0xf6>
    81e2:	93 fc       	sbrc	r9, 3
    81e4:	05 c0       	rjmp	.+10     	; 0x81f0 <_printf_fn+0xda>
    81e6:	6d 32       	cpi	r22, 0x2D	; 45
    81e8:	19 f4       	brne	.+6      	; 0x81f0 <_printf_fn+0xda>
    81ea:	68 94       	set
    81ec:	93 f8       	bld	r9, 3
    81ee:	f2 cf       	rjmp	.-28     	; 0x81d4 <_printf_fn+0xbe>
    81f0:	94 fc       	sbrc	r9, 4
    81f2:	05 c0       	rjmp	.+10     	; 0x81fe <_printf_fn+0xe8>
    81f4:	60 32       	cpi	r22, 0x20	; 32
    81f6:	19 f4       	brne	.+6      	; 0x81fe <_printf_fn+0xe8>
    81f8:	68 94       	set
    81fa:	94 f8       	bld	r9, 4
    81fc:	eb cf       	rjmp	.-42     	; 0x81d4 <_printf_fn+0xbe>
    81fe:	95 fc       	sbrc	r9, 5
    8200:	e9 cf       	rjmp	.-46     	; 0x81d4 <_printf_fn+0xbe>
    8202:	60 33       	cpi	r22, 0x30	; 48
    8204:	39 f7       	brne	.-50     	; 0x81d4 <_printf_fn+0xbe>
    8206:	68 94       	set
    8208:	95 f8       	bld	r9, 5
    820a:	e4 cf       	rjmp	.-56     	; 0x81d4 <_printf_fn+0xbe>
    820c:	86 2f       	mov	r24, r22
    820e:	8f 7e       	andi	r24, 0xEF	; 239
    8210:	80 32       	cpi	r24, 0x20	; 32
    8212:	39 f3       	breq	.-50     	; 0x81e2 <_printf_fn+0xcc>
    8214:	70 e0       	ldi	r23, 0x00	; 0
    8216:	60 53       	subi	r22, 0x30	; 48
    8218:	71 09       	sbc	r23, r1
    821a:	6f 96       	adiw	r28, 0x1f	; 31
    821c:	1f ae       	std	Y+63, r1	; 0x3f
    821e:	1e ae       	std	Y+62, r1	; 0x3e
    8220:	6f 97       	sbiw	r28, 0x1f	; 31
    8222:	6a 30       	cpi	r22, 0x0A	; 10
    8224:	71 05       	cpc	r23, r1
    8226:	10 f5       	brcc	.+68     	; 0x826c <_printf_fn+0x156>
    8228:	2a e0       	ldi	r18, 0x0A	; 10
    822a:	f3 01       	movw	r30, r6
    822c:	58 2d       	mov	r21, r8
    822e:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    8232:	70 e0       	ldi	r23, 0x00	; 0
    8234:	cb 01       	movw	r24, r22
    8236:	c0 97       	sbiw	r24, 0x30	; 48
    8238:	0a 97       	sbiw	r24, 0x0a	; 10
    823a:	b0 f4       	brcc	.+44     	; 0x8268 <_printf_fn+0x152>
    823c:	ef ef       	ldi	r30, 0xFF	; 255
    823e:	6e 1a       	sub	r6, r30
    8240:	7e 0a       	sbc	r7, r30
    8242:	8e 0a       	sbc	r8, r30
    8244:	6f 96       	adiw	r28, 0x1f	; 31
    8246:	4e ad       	ldd	r20, Y+62	; 0x3e
    8248:	5f ad       	ldd	r21, Y+63	; 0x3f
    824a:	6f 97       	sbiw	r28, 0x1f	; 31
    824c:	24 9f       	mul	r18, r20
    824e:	c0 01       	movw	r24, r0
    8250:	25 9f       	mul	r18, r21
    8252:	90 0d       	add	r25, r0
    8254:	11 24       	eor	r1, r1
    8256:	68 0f       	add	r22, r24
    8258:	79 1f       	adc	r23, r25
    825a:	cb 01       	movw	r24, r22
    825c:	c0 97       	sbiw	r24, 0x30	; 48
    825e:	6f 96       	adiw	r28, 0x1f	; 31
    8260:	9f af       	std	Y+63, r25	; 0x3f
    8262:	8e af       	std	Y+62, r24	; 0x3e
    8264:	6f 97       	sbiw	r28, 0x1f	; 31
    8266:	e1 cf       	rjmp	.-62     	; 0x822a <_printf_fn+0x114>
    8268:	68 94       	set
    826a:	90 f8       	bld	r9, 0
    826c:	f3 01       	movw	r30, r6
    826e:	58 2d       	mov	r21, r8
    8270:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    8274:	6e 32       	cpi	r22, 0x2E	; 46
    8276:	61 f5       	brne	.+88     	; 0x82d0 <_printf_fn+0x1ba>
    8278:	9f ef       	ldi	r25, 0xFF	; 255
    827a:	69 1a       	sub	r6, r25
    827c:	79 0a       	sbc	r7, r25
    827e:	89 0a       	sbc	r8, r25
    8280:	a1 96       	adiw	r28, 0x21	; 33
    8282:	1f ae       	std	Y+63, r1	; 0x3f
    8284:	1e ae       	std	Y+62, r1	; 0x3e
    8286:	a1 97       	sbiw	r28, 0x21	; 33
    8288:	2a e0       	ldi	r18, 0x0A	; 10
    828a:	f3 01       	movw	r30, r6
    828c:	58 2d       	mov	r21, r8
    828e:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    8292:	70 e0       	ldi	r23, 0x00	; 0
    8294:	cb 01       	movw	r24, r22
    8296:	c0 97       	sbiw	r24, 0x30	; 48
    8298:	0a 97       	sbiw	r24, 0x0a	; 10
    829a:	b8 f4       	brcc	.+46     	; 0x82ca <_printf_fn+0x1b4>
    829c:	af ef       	ldi	r26, 0xFF	; 255
    829e:	6a 1a       	sub	r6, r26
    82a0:	7a 0a       	sbc	r7, r26
    82a2:	8a 0a       	sbc	r8, r26
    82a4:	a1 96       	adiw	r28, 0x21	; 33
    82a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    82a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    82aa:	a1 97       	sbiw	r28, 0x21	; 33
    82ac:	2e 9f       	mul	r18, r30
    82ae:	c0 01       	movw	r24, r0
    82b0:	2f 9f       	mul	r18, r31
    82b2:	90 0d       	add	r25, r0
    82b4:	11 24       	eor	r1, r1
    82b6:	68 0f       	add	r22, r24
    82b8:	79 1f       	adc	r23, r25
    82ba:	ab 01       	movw	r20, r22
    82bc:	40 53       	subi	r20, 0x30	; 48
    82be:	51 09       	sbc	r21, r1
    82c0:	a1 96       	adiw	r28, 0x21	; 33
    82c2:	5f af       	std	Y+63, r21	; 0x3f
    82c4:	4e af       	std	Y+62, r20	; 0x3e
    82c6:	a1 97       	sbiw	r28, 0x21	; 33
    82c8:	e0 cf       	rjmp	.-64     	; 0x828a <_printf_fn+0x174>
    82ca:	68 94       	set
    82cc:	91 f8       	bld	r9, 1
    82ce:	04 c0       	rjmp	.+8      	; 0x82d8 <_printf_fn+0x1c2>
    82d0:	a1 96       	adiw	r28, 0x21	; 33
    82d2:	1f ae       	std	Y+63, r1	; 0x3f
    82d4:	1e ae       	std	Y+62, r1	; 0x3e
    82d6:	a1 97       	sbiw	r28, 0x21	; 33
    82d8:	f3 01       	movw	r30, r6
    82da:	58 2d       	mov	r21, r8
    82dc:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    82e0:	69 34       	cpi	r22, 0x49	; 73
    82e2:	91 f5       	brne	.+100    	; 0x8348 <_printf_fn+0x232>
    82e4:	5f ef       	ldi	r21, 0xFF	; 255
    82e6:	65 1a       	sub	r6, r21
    82e8:	75 0a       	sbc	r7, r21
    82ea:	85 0a       	sbc	r8, r21
    82ec:	41 2c       	mov	r4, r1
    82ee:	51 2c       	mov	r5, r1
    82f0:	2a e0       	ldi	r18, 0x0A	; 10
    82f2:	f3 01       	movw	r30, r6
    82f4:	58 2d       	mov	r21, r8
    82f6:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    82fa:	70 e0       	ldi	r23, 0x00	; 0
    82fc:	cb 01       	movw	r24, r22
    82fe:	c0 97       	sbiw	r24, 0x30	; 48
    8300:	0a 97       	sbiw	r24, 0x0a	; 10
    8302:	80 f4       	brcc	.+32     	; 0x8324 <_printf_fn+0x20e>
    8304:	8f ef       	ldi	r24, 0xFF	; 255
    8306:	68 1a       	sub	r6, r24
    8308:	78 0a       	sbc	r7, r24
    830a:	88 0a       	sbc	r8, r24
    830c:	24 9d       	mul	r18, r4
    830e:	c0 01       	movw	r24, r0
    8310:	25 9d       	mul	r18, r5
    8312:	90 0d       	add	r25, r0
    8314:	11 24       	eor	r1, r1
    8316:	68 0f       	add	r22, r24
    8318:	79 1f       	adc	r23, r25
    831a:	2b 01       	movw	r4, r22
    831c:	90 e3       	ldi	r25, 0x30	; 48
    831e:	49 1a       	sub	r4, r25
    8320:	51 08       	sbc	r5, r1
    8322:	e7 cf       	rjmp	.-50     	; 0x82f2 <_printf_fn+0x1dc>
    8324:	41 14       	cp	r4, r1
    8326:	51 04       	cpc	r5, r1
    8328:	09 f4       	brne	.+2      	; 0x832c <_printf_fn+0x216>
    832a:	40 c0       	rjmp	.+128    	; 0x83ac <_printf_fn+0x296>
    832c:	c2 01       	movw	r24, r4
    832e:	87 70       	andi	r24, 0x07	; 7
    8330:	99 27       	eor	r25, r25
    8332:	89 2b       	or	r24, r25
    8334:	c9 f5       	brne	.+114    	; 0x83a8 <_printf_fn+0x292>
    8336:	63 e0       	ldi	r22, 0x03	; 3
    8338:	55 94       	asr	r5
    833a:	47 94       	ror	r4
    833c:	6a 95       	dec	r22
    833e:	e1 f7       	brne	.-8      	; 0x8338 <_printf_fn+0x222>
    8340:	41 14       	cp	r4, r1
    8342:	51 04       	cpc	r5, r1
    8344:	99 f1       	breq	.+102    	; 0x83ac <_printf_fn+0x296>
    8346:	21 c0       	rjmp	.+66     	; 0x838a <_printf_fn+0x274>
    8348:	68 36       	cpi	r22, 0x68	; 104
    834a:	29 f4       	brne	.+10     	; 0x8356 <_printf_fn+0x240>
    834c:	af ef       	ldi	r26, 0xFF	; 255
    834e:	6a 1a       	sub	r6, r26
    8350:	7a 0a       	sbc	r7, r26
    8352:	8a 0a       	sbc	r8, r26
    8354:	09 c3       	rjmp	.+1554   	; 0x8968 <_printf_fn+0x852>
    8356:	6c 36       	cpi	r22, 0x6C	; 108
    8358:	09 f0       	breq	.+2      	; 0x835c <_printf_fn+0x246>
    835a:	06 c3       	rjmp	.+1548   	; 0x8968 <_printf_fn+0x852>
    835c:	a8 2d       	mov	r26, r8
    835e:	c3 01       	movw	r24, r6
    8360:	01 96       	adiw	r24, 0x01	; 1
    8362:	a1 1d       	adc	r26, r1
    8364:	fc 01       	movw	r30, r24
    8366:	5a 2f       	mov	r21, r26
    8368:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    836c:	6c 36       	cpi	r22, 0x6C	; 108
    836e:	31 f0       	breq	.+12     	; 0x837c <_printf_fn+0x266>
    8370:	3c 01       	movw	r6, r24
    8372:	8a 2e       	mov	r8, r26
    8374:	54 e0       	ldi	r21, 0x04	; 4
    8376:	45 2e       	mov	r4, r21
    8378:	51 2c       	mov	r5, r1
    837a:	07 c0       	rjmp	.+14     	; 0x838a <_printf_fn+0x274>
    837c:	b2 e0       	ldi	r27, 0x02	; 2
    837e:	6b 0e       	add	r6, r27
    8380:	71 1c       	adc	r7, r1
    8382:	81 1c       	adc	r8, r1
    8384:	48 e0       	ldi	r20, 0x08	; 8
    8386:	44 2e       	mov	r4, r20
    8388:	51 2c       	mov	r5, r1
    838a:	f3 01       	movw	r30, r6
    838c:	58 2d       	mov	r21, r8
    838e:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    8392:	e6 2f       	mov	r30, r22
    8394:	f0 e0       	ldi	r31, 0x00	; 0
    8396:	a3 96       	adiw	r28, 0x23	; 35
    8398:	ff af       	std	Y+63, r31	; 0x3f
    839a:	ee af       	std	Y+62, r30	; 0x3e
    839c:	a3 97       	sbiw	r28, 0x23	; 35
    839e:	e4 36       	cpi	r30, 0x64	; 100
    83a0:	f1 05       	cpc	r31, r1
    83a2:	09 f4       	brne	.+2      	; 0x83a6 <_printf_fn+0x290>
    83a4:	e5 c2       	rjmp	.+1482   	; 0x8970 <_printf_fn+0x85a>
    83a6:	06 c0       	rjmp	.+12     	; 0x83b4 <_printf_fn+0x29e>
    83a8:	41 2c       	mov	r4, r1
    83aa:	51 2c       	mov	r5, r1
    83ac:	a3 96       	adiw	r28, 0x23	; 35
    83ae:	1f ae       	std	Y+63, r1	; 0x3f
    83b0:	1e ae       	std	Y+62, r1	; 0x3e
    83b2:	a3 97       	sbiw	r28, 0x23	; 35
    83b4:	31 e0       	ldi	r19, 0x01	; 1
    83b6:	20 e0       	ldi	r18, 0x00	; 0
    83b8:	a3 96       	adiw	r28, 0x23	; 35
    83ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    83bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    83be:	a3 97       	sbiw	r28, 0x23	; 35
    83c0:	44 34       	cpi	r20, 0x44	; 68
    83c2:	51 05       	cpc	r21, r1
    83c4:	09 f0       	breq	.+2      	; 0x83c8 <_printf_fn+0x2b2>
    83c6:	30 e0       	ldi	r19, 0x00	; 0
    83c8:	83 2f       	mov	r24, r19
    83ca:	92 2f       	mov	r25, r18
    83cc:	a3 96       	adiw	r28, 0x23	; 35
    83ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    83d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    83d2:	a3 97       	sbiw	r28, 0x23	; 35
    83d4:	e2 54       	subi	r30, 0x42	; 66
    83d6:	f1 09       	sbc	r31, r1
    83d8:	e7 33       	cpi	r30, 0x37	; 55
    83da:	f1 05       	cpc	r31, r1
    83dc:	08 f0       	brcs	.+2      	; 0x83e0 <_printf_fn+0x2ca>
    83de:	57 c1       	rjmp	.+686    	; 0x868e <_printf_fn+0x578>
    83e0:	ea 5b       	subi	r30, 0xBA	; 186
    83e2:	ff 4f       	sbci	r31, 0xFF	; 255
    83e4:	0c 94 be e2 	jmp	0x1c57c	; 0x1c57c <__tablejump2__>
    83e8:	32 e0       	ldi	r19, 0x02	; 2
    83ea:	43 2e       	mov	r4, r19
    83ec:	51 2c       	mov	r5, r1
    83ee:	29 2d       	mov	r18, r9
    83f0:	28 72       	andi	r18, 0x28	; 40
    83f2:	28 32       	cpi	r18, 0x28	; 40
    83f4:	11 f4       	brne	.+4      	; 0x83fa <_printf_fn+0x2e4>
    83f6:	e8 94       	clt
    83f8:	95 f8       	bld	r9, 5
    83fa:	29 2d       	mov	r18, r9
    83fc:	22 72       	andi	r18, 0x22	; 34
    83fe:	22 32       	cpi	r18, 0x22	; 34
    8400:	11 f4       	brne	.+4      	; 0x8406 <_printf_fn+0x2f0>
    8402:	e8 94       	clt
    8404:	95 f8       	bld	r9, 5
    8406:	29 2d       	mov	r18, r9
    8408:	21 72       	andi	r18, 0x21	; 33
    840a:	21 32       	cpi	r18, 0x21	; 33
    840c:	79 f4       	brne	.+30     	; 0x842c <_printf_fn+0x316>
    840e:	a1 96       	adiw	r28, 0x21	; 33
    8410:	ae ad       	ldd	r26, Y+62	; 0x3e
    8412:	bf ad       	ldd	r27, Y+63	; 0x3f
    8414:	a1 97       	sbiw	r28, 0x21	; 33
    8416:	6f 96       	adiw	r28, 0x1f	; 31
    8418:	ee ad       	ldd	r30, Y+62	; 0x3e
    841a:	ff ad       	ldd	r31, Y+63	; 0x3f
    841c:	6f 97       	sbiw	r28, 0x1f	; 31
    841e:	ae 17       	cp	r26, r30
    8420:	bf 07       	cpc	r27, r31
    8422:	24 f4       	brge	.+8      	; 0x842c <_printf_fn+0x316>
    8424:	a1 96       	adiw	r28, 0x21	; 33
    8426:	ff af       	std	Y+63, r31	; 0x3f
    8428:	ee af       	std	Y+62, r30	; 0x3e
    842a:	a1 97       	sbiw	r28, 0x21	; 33
    842c:	29 2d       	mov	r18, r9
    842e:	23 72       	andi	r18, 0x23	; 35
    8430:	23 32       	cpi	r18, 0x23	; 35
    8432:	79 f4       	brne	.+30     	; 0x8452 <_printf_fn+0x33c>
    8434:	a1 96       	adiw	r28, 0x21	; 33
    8436:	2e ad       	ldd	r18, Y+62	; 0x3e
    8438:	3f ad       	ldd	r19, Y+63	; 0x3f
    843a:	a1 97       	sbiw	r28, 0x21	; 33
    843c:	6f 96       	adiw	r28, 0x1f	; 31
    843e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8440:	5f ad       	ldd	r21, Y+63	; 0x3f
    8442:	6f 97       	sbiw	r28, 0x1f	; 31
    8444:	24 17       	cp	r18, r20
    8446:	35 07       	cpc	r19, r21
    8448:	24 f4       	brge	.+8      	; 0x8452 <_printf_fn+0x33c>
    844a:	a1 96       	adiw	r28, 0x21	; 33
    844c:	5f af       	std	Y+63, r21	; 0x3f
    844e:	4e af       	std	Y+62, r20	; 0x3e
    8450:	a1 97       	sbiw	r28, 0x21	; 33
    8452:	e8 94       	clt
    8454:	94 f8       	bld	r9, 4
    8456:	e8 94       	clt
    8458:	92 f8       	bld	r9, 2
    845a:	e8 94       	clt
    845c:	96 f8       	bld	r9, 6
    845e:	52 e0       	ldi	r21, 0x02	; 2
    8460:	45 16       	cp	r4, r21
    8462:	51 04       	cpc	r5, r1
    8464:	f9 f4       	brne	.+62     	; 0x84a4 <_printf_fn+0x38e>
    8466:	51 01       	movw	r10, r2
    8468:	82 e0       	ldi	r24, 0x02	; 2
    846a:	a8 0e       	add	r10, r24
    846c:	b1 1c       	adc	r11, r1
    846e:	d1 01       	movw	r26, r2
    8470:	8d 91       	ld	r24, X+
    8472:	9c 91       	ld	r25, X
    8474:	65 96       	adiw	r28, 0x15	; 21
    8476:	9f af       	std	Y+63, r25	; 0x3f
    8478:	8e af       	std	Y+62, r24	; 0x3e
    847a:	65 97       	sbiw	r28, 0x15	; 21
    847c:	a3 96       	adiw	r28, 0x23	; 35
    847e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8480:	ff ad       	ldd	r31, Y+63	; 0x3f
    8482:	a3 97       	sbiw	r28, 0x23	; 35
    8484:	e4 34       	cpi	r30, 0x44	; 68
    8486:	f1 05       	cpc	r31, r1
    8488:	09 f0       	breq	.+2      	; 0x848c <_printf_fn+0x376>
    848a:	ac c0       	rjmp	.+344    	; 0x85e4 <_printf_fn+0x4ce>
    848c:	97 ff       	sbrs	r25, 7
    848e:	a7 c0       	rjmp	.+334    	; 0x85de <_printf_fn+0x4c8>
    8490:	68 94       	set
    8492:	96 f8       	bld	r9, 6
    8494:	91 95       	neg	r25
    8496:	81 95       	neg	r24
    8498:	91 09       	sbc	r25, r1
    849a:	65 96       	adiw	r28, 0x15	; 21
    849c:	9f af       	std	Y+63, r25	; 0x3f
    849e:	8e af       	std	Y+62, r24	; 0x3e
    84a0:	65 97       	sbiw	r28, 0x15	; 21
    84a2:	9d c0       	rjmp	.+314    	; 0x85de <_printf_fn+0x4c8>
    84a4:	f4 e0       	ldi	r31, 0x04	; 4
    84a6:	4f 16       	cp	r4, r31
    84a8:	51 04       	cpc	r5, r1
    84aa:	59 f5       	brne	.+86     	; 0x8502 <_printf_fn+0x3ec>
    84ac:	51 01       	movw	r10, r2
    84ae:	24 e0       	ldi	r18, 0x04	; 4
    84b0:	a2 0e       	add	r10, r18
    84b2:	b1 1c       	adc	r11, r1
    84b4:	f1 01       	movw	r30, r2
    84b6:	80 81       	ld	r24, Z
    84b8:	91 81       	ldd	r25, Z+1	; 0x01
    84ba:	a2 81       	ldd	r26, Z+2	; 0x02
    84bc:	b3 81       	ldd	r27, Z+3	; 0x03
    84be:	2f 96       	adiw	r28, 0x0f	; 15
    84c0:	8c af       	std	Y+60, r24	; 0x3c
    84c2:	9d af       	std	Y+61, r25	; 0x3d
    84c4:	ae af       	std	Y+62, r26	; 0x3e
    84c6:	bf af       	std	Y+63, r27	; 0x3f
    84c8:	2f 97       	sbiw	r28, 0x0f	; 15
    84ca:	a3 96       	adiw	r28, 0x23	; 35
    84cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    84ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    84d0:	a3 97       	sbiw	r28, 0x23	; 35
    84d2:	24 34       	cpi	r18, 0x44	; 68
    84d4:	31 05       	cpc	r19, r1
    84d6:	09 f0       	breq	.+2      	; 0x84da <_printf_fn+0x3c4>
    84d8:	8f c0       	rjmp	.+286    	; 0x85f8 <_printf_fn+0x4e2>
    84da:	b7 ff       	sbrs	r27, 7
    84dc:	8a c0       	rjmp	.+276    	; 0x85f2 <_printf_fn+0x4dc>
    84de:	68 94       	set
    84e0:	96 f8       	bld	r9, 6
    84e2:	b0 95       	com	r27
    84e4:	a0 95       	com	r26
    84e6:	90 95       	com	r25
    84e8:	81 95       	neg	r24
    84ea:	9f 4f       	sbci	r25, 0xFF	; 255
    84ec:	af 4f       	sbci	r26, 0xFF	; 255
    84ee:	bf 4f       	sbci	r27, 0xFF	; 255
    84f0:	2f 96       	adiw	r28, 0x0f	; 15
    84f2:	8c af       	std	Y+60, r24	; 0x3c
    84f4:	9d af       	std	Y+61, r25	; 0x3d
    84f6:	ae af       	std	Y+62, r26	; 0x3e
    84f8:	bf af       	std	Y+63, r27	; 0x3f
    84fa:	2f 97       	sbiw	r28, 0x0f	; 15
    84fc:	7a c0       	rjmp	.+244    	; 0x85f2 <_printf_fn+0x4dc>
    84fe:	81 e0       	ldi	r24, 0x01	; 1
    8500:	90 e0       	ldi	r25, 0x00	; 0
    8502:	51 01       	movw	r10, r2
    8504:	38 e0       	ldi	r19, 0x08	; 8
    8506:	43 16       	cp	r4, r19
    8508:	51 04       	cpc	r5, r1
    850a:	09 f0       	breq	.+2      	; 0x850e <_printf_fn+0x3f8>
    850c:	7c c0       	rjmp	.+248    	; 0x8606 <_printf_fn+0x4f0>
    850e:	48 e0       	ldi	r20, 0x08	; 8
    8510:	a4 0e       	add	r10, r20
    8512:	b1 1c       	adc	r11, r1
    8514:	d1 01       	movw	r26, r2
    8516:	fc 90       	ld	r15, X
    8518:	f1 01       	movw	r30, r2
    851a:	01 81       	ldd	r16, Z+1	; 0x01
    851c:	12 81       	ldd	r17, Z+2	; 0x02
    851e:	f3 81       	ldd	r31, Z+3	; 0x03
    8520:	aa 96       	adiw	r28, 0x2a	; 42
    8522:	ff af       	std	Y+63, r31	; 0x3f
    8524:	aa 97       	sbiw	r28, 0x2a	; 42
    8526:	f1 01       	movw	r30, r2
    8528:	f4 81       	ldd	r31, Z+4	; 0x04
    852a:	ab 96       	adiw	r28, 0x2b	; 43
    852c:	ff af       	std	Y+63, r31	; 0x3f
    852e:	ab 97       	sbiw	r28, 0x2b	; 43
    8530:	f1 01       	movw	r30, r2
    8532:	b5 81       	ldd	r27, Z+5	; 0x05
    8534:	f6 81       	ldd	r31, Z+6	; 0x06
    8536:	af 96       	adiw	r28, 0x2f	; 47
    8538:	ff af       	std	Y+63, r31	; 0x3f
    853a:	af 97       	sbiw	r28, 0x2f	; 47
    853c:	f1 01       	movw	r30, r2
    853e:	37 80       	ldd	r3, Z+7	; 0x07
    8540:	24 96       	adiw	r28, 0x04	; 4
    8542:	ff ae       	std	Y+63, r15	; 0x3f
    8544:	24 97       	sbiw	r28, 0x04	; 4
    8546:	25 96       	adiw	r28, 0x05	; 5
    8548:	0f af       	std	Y+63, r16	; 0x3f
    854a:	25 97       	sbiw	r28, 0x05	; 5
    854c:	26 96       	adiw	r28, 0x06	; 6
    854e:	1f af       	std	Y+63, r17	; 0x3f
    8550:	26 97       	sbiw	r28, 0x06	; 6
    8552:	aa 96       	adiw	r28, 0x2a	; 42
    8554:	ff ad       	ldd	r31, Y+63	; 0x3f
    8556:	aa 97       	sbiw	r28, 0x2a	; 42
    8558:	27 96       	adiw	r28, 0x07	; 7
    855a:	ff af       	std	Y+63, r31	; 0x3f
    855c:	27 97       	sbiw	r28, 0x07	; 7
    855e:	ab 96       	adiw	r28, 0x2b	; 43
    8560:	ef ad       	ldd	r30, Y+63	; 0x3f
    8562:	ab 97       	sbiw	r28, 0x2b	; 43
    8564:	28 96       	adiw	r28, 0x08	; 8
    8566:	ef af       	std	Y+63, r30	; 0x3f
    8568:	28 97       	sbiw	r28, 0x08	; 8
    856a:	29 96       	adiw	r28, 0x09	; 9
    856c:	bf af       	std	Y+63, r27	; 0x3f
    856e:	29 97       	sbiw	r28, 0x09	; 9
    8570:	af 96       	adiw	r28, 0x2f	; 47
    8572:	ff ad       	ldd	r31, Y+63	; 0x3f
    8574:	af 97       	sbiw	r28, 0x2f	; 47
    8576:	2a 96       	adiw	r28, 0x0a	; 10
    8578:	ff af       	std	Y+63, r31	; 0x3f
    857a:	2a 97       	sbiw	r28, 0x0a	; 10
    857c:	2b 96       	adiw	r28, 0x0b	; 11
    857e:	3f ae       	std	Y+63, r3	; 0x3f
    8580:	2b 97       	sbiw	r28, 0x0b	; 11
    8582:	89 2b       	or	r24, r25
    8584:	09 f4       	brne	.+2      	; 0x8588 <_printf_fn+0x472>
    8586:	4a c0       	rjmp	.+148    	; 0x861c <_printf_fn+0x506>
    8588:	2f 2d       	mov	r18, r15
    858a:	30 2f       	mov	r19, r16
    858c:	41 2f       	mov	r20, r17
    858e:	aa 96       	adiw	r28, 0x2a	; 42
    8590:	5f ad       	ldd	r21, Y+63	; 0x3f
    8592:	aa 97       	sbiw	r28, 0x2a	; 42
    8594:	6e 2f       	mov	r22, r30
    8596:	7b 2f       	mov	r23, r27
    8598:	8f 2f       	mov	r24, r31
    859a:	93 2d       	mov	r25, r3
    859c:	a0 e0       	ldi	r26, 0x00	; 0
    859e:	0e 94 2b e3 	call	0x1c656	; 0x1c656 <__cmpdi2_s8>
    85a2:	e4 f5       	brge	.+120    	; 0x861c <_printf_fn+0x506>
    85a4:	68 94       	set
    85a6:	96 f8       	bld	r9, 6
    85a8:	0e 94 dd e2 	call	0x1c5ba	; 0x1c5ba <__negdi2>
    85ac:	24 96       	adiw	r28, 0x04	; 4
    85ae:	2f af       	std	Y+63, r18	; 0x3f
    85b0:	24 97       	sbiw	r28, 0x04	; 4
    85b2:	25 96       	adiw	r28, 0x05	; 5
    85b4:	3f af       	std	Y+63, r19	; 0x3f
    85b6:	25 97       	sbiw	r28, 0x05	; 5
    85b8:	26 96       	adiw	r28, 0x06	; 6
    85ba:	4f af       	std	Y+63, r20	; 0x3f
    85bc:	26 97       	sbiw	r28, 0x06	; 6
    85be:	27 96       	adiw	r28, 0x07	; 7
    85c0:	5f af       	std	Y+63, r21	; 0x3f
    85c2:	27 97       	sbiw	r28, 0x07	; 7
    85c4:	28 96       	adiw	r28, 0x08	; 8
    85c6:	6f af       	std	Y+63, r22	; 0x3f
    85c8:	28 97       	sbiw	r28, 0x08	; 8
    85ca:	29 96       	adiw	r28, 0x09	; 9
    85cc:	7f af       	std	Y+63, r23	; 0x3f
    85ce:	29 97       	sbiw	r28, 0x09	; 9
    85d0:	2a 96       	adiw	r28, 0x0a	; 10
    85d2:	8f af       	std	Y+63, r24	; 0x3f
    85d4:	2a 97       	sbiw	r28, 0x0a	; 10
    85d6:	2b 96       	adiw	r28, 0x0b	; 11
    85d8:	9f af       	std	Y+63, r25	; 0x3f
    85da:	2b 97       	sbiw	r28, 0x0b	; 11
    85dc:	1f c0       	rjmp	.+62     	; 0x861c <_printf_fn+0x506>
    85de:	22 e0       	ldi	r18, 0x02	; 2
    85e0:	42 2e       	mov	r4, r18
    85e2:	51 2c       	mov	r5, r1
    85e4:	6c 96       	adiw	r28, 0x1c	; 28
    85e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    85e8:	6c 97       	sbiw	r28, 0x1c	; 28
    85ea:	6d 96       	adiw	r28, 0x1d	; 29
    85ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    85ee:	6d 97       	sbiw	r28, 0x1d	; 29
    85f0:	1b c0       	rjmp	.+54     	; 0x8628 <_printf_fn+0x512>
    85f2:	94 e0       	ldi	r25, 0x04	; 4
    85f4:	49 2e       	mov	r4, r25
    85f6:	51 2c       	mov	r5, r1
    85f8:	6a 96       	adiw	r28, 0x1a	; 26
    85fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    85fc:	6a 97       	sbiw	r28, 0x1a	; 26
    85fe:	6b 96       	adiw	r28, 0x1b	; 27
    8600:	9f ad       	ldd	r25, Y+63	; 0x3f
    8602:	6b 97       	sbiw	r28, 0x1b	; 27
    8604:	11 c0       	rjmp	.+34     	; 0x8628 <_printf_fn+0x512>
    8606:	66 96       	adiw	r28, 0x16	; 22
    8608:	8f ad       	ldd	r24, Y+63	; 0x3f
    860a:	66 97       	sbiw	r28, 0x16	; 22
    860c:	67 96       	adiw	r28, 0x17	; 23
    860e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8610:	67 97       	sbiw	r28, 0x17	; 23
    8612:	a3 96       	adiw	r28, 0x23	; 35
    8614:	1f ae       	std	Y+63, r1	; 0x3f
    8616:	1e ae       	std	Y+62, r1	; 0x3e
    8618:	a3 97       	sbiw	r28, 0x23	; 35
    861a:	06 c0       	rjmp	.+12     	; 0x8628 <_printf_fn+0x512>
    861c:	68 96       	adiw	r28, 0x18	; 24
    861e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8620:	68 97       	sbiw	r28, 0x18	; 24
    8622:	69 96       	adiw	r28, 0x19	; 25
    8624:	9f ad       	ldd	r25, Y+63	; 0x3f
    8626:	69 97       	sbiw	r28, 0x19	; 25
    8628:	2f ef       	ldi	r18, 0xFF	; 255
    862a:	62 1a       	sub	r6, r18
    862c:	72 0a       	sbc	r7, r18
    862e:	82 0a       	sbc	r8, r18
    8630:	15 01       	movw	r2, r10
    8632:	33 c0       	rjmp	.+102    	; 0x869a <_printf_fn+0x584>
    8634:	91 fc       	sbrc	r9, 1
    8636:	08 c0       	rjmp	.+16     	; 0x8648 <_printf_fn+0x532>
    8638:	68 94       	set
    863a:	91 f8       	bld	r9, 1
    863c:	46 e0       	ldi	r20, 0x06	; 6
    863e:	50 e0       	ldi	r21, 0x00	; 0
    8640:	a1 96       	adiw	r28, 0x21	; 33
    8642:	5f af       	std	Y+63, r21	; 0x3f
    8644:	4e af       	std	Y+62, r20	; 0x3e
    8646:	a1 97       	sbiw	r28, 0x21	; 33
    8648:	d1 01       	movw	r26, r2
    864a:	8d 91       	ld	r24, X+
    864c:	9d 91       	ld	r25, X+
    864e:	0d 90       	ld	r0, X+
    8650:	bc 91       	ld	r27, X
    8652:	a0 2d       	mov	r26, r0
    8654:	a9 96       	adiw	r28, 0x29	; 41
    8656:	8c af       	std	Y+60, r24	; 0x3c
    8658:	9d af       	std	Y+61, r25	; 0x3d
    865a:	ae af       	std	Y+62, r26	; 0x3e
    865c:	bf af       	std	Y+63, r27	; 0x3f
    865e:	a9 97       	sbiw	r28, 0x29	; 41
    8660:	bf ef       	ldi	r27, 0xFF	; 255
    8662:	6b 1a       	sub	r6, r27
    8664:	7b 0a       	sbc	r7, r27
    8666:	8b 0a       	sbc	r8, r27
    8668:	f1 01       	movw	r30, r2
    866a:	34 96       	adiw	r30, 0x04	; 4
    866c:	1f 01       	movw	r2, r30
    866e:	0f c0       	rjmp	.+30     	; 0x868e <_printf_fn+0x578>
    8670:	ff ef       	ldi	r31, 0xFF	; 255
    8672:	6f 1a       	sub	r6, r31
    8674:	7f 0a       	sbc	r7, r31
    8676:	8f 0a       	sbc	r8, r31
    8678:	c5 c0       	rjmp	.+394    	; 0x8804 <_printf_fn+0x6ee>
    867a:	2f ef       	ldi	r18, 0xFF	; 255
    867c:	62 1a       	sub	r6, r18
    867e:	72 0a       	sbc	r7, r18
    8680:	82 0a       	sbc	r8, r18
    8682:	11 c1       	rjmp	.+546    	; 0x88a6 <_printf_fn+0x790>
    8684:	3f ef       	ldi	r19, 0xFF	; 255
    8686:	63 1a       	sub	r6, r19
    8688:	73 0a       	sbc	r7, r19
    868a:	83 0a       	sbc	r8, r19
    868c:	c8 c0       	rjmp	.+400    	; 0x881e <_printf_fn+0x708>
    868e:	66 96       	adiw	r28, 0x16	; 22
    8690:	8f ad       	ldd	r24, Y+63	; 0x3f
    8692:	66 97       	sbiw	r28, 0x16	; 22
    8694:	67 96       	adiw	r28, 0x17	; 23
    8696:	9f ad       	ldd	r25, Y+63	; 0x3f
    8698:	67 97       	sbiw	r28, 0x17	; 23
    869a:	a3 96       	adiw	r28, 0x23	; 35
    869c:	ee ad       	ldd	r30, Y+62	; 0x3e
    869e:	ff ad       	ldd	r31, Y+63	; 0x3f
    86a0:	a3 97       	sbiw	r28, 0x23	; 35
    86a2:	e2 54       	subi	r30, 0x42	; 66
    86a4:	f1 09       	sbc	r31, r1
    86a6:	e7 33       	cpi	r30, 0x37	; 55
    86a8:	f1 05       	cpc	r31, r1
    86aa:	08 f0       	brcs	.+2      	; 0x86ae <_printf_fn+0x598>
    86ac:	56 c1       	rjmp	.+684    	; 0x895a <_printf_fn+0x844>
    86ae:	e3 58       	subi	r30, 0x83	; 131
    86b0:	ff 4f       	sbci	r31, 0xFF	; 255
    86b2:	0c 94 be e2 	jmp	0x1c57c	; 0x1c57c <__tablejump2__>
    86b6:	e8 94       	clt
    86b8:	94 f8       	bld	r9, 4
    86ba:	e8 94       	clt
    86bc:	92 f8       	bld	r9, 2
    86be:	a9 2c       	mov	r10, r9
    86c0:	b1 2c       	mov	r11, r1
    86c2:	a1 96       	adiw	r28, 0x21	; 33
    86c4:	ce ac       	ldd	r12, Y+62	; 0x3e
    86c6:	df ac       	ldd	r13, Y+63	; 0x3f
    86c8:	a1 97       	sbiw	r28, 0x21	; 33
    86ca:	6f 96       	adiw	r28, 0x1f	; 31
    86cc:	ee ac       	ldd	r14, Y+62	; 0x3e
    86ce:	ff ac       	ldd	r15, Y+63	; 0x3f
    86d0:	6f 97       	sbiw	r28, 0x1f	; 31
    86d2:	0a e0       	ldi	r16, 0x0A	; 10
    86d4:	10 e0       	ldi	r17, 0x00	; 0
    86d6:	19 c0       	rjmp	.+50     	; 0x870a <_printf_fn+0x5f4>
    86d8:	a9 2c       	mov	r10, r9
    86da:	b1 2c       	mov	r11, r1
    86dc:	a1 96       	adiw	r28, 0x21	; 33
    86de:	ce ac       	ldd	r12, Y+62	; 0x3e
    86e0:	df ac       	ldd	r13, Y+63	; 0x3f
    86e2:	a1 97       	sbiw	r28, 0x21	; 33
    86e4:	6f 96       	adiw	r28, 0x1f	; 31
    86e6:	ee ac       	ldd	r14, Y+62	; 0x3e
    86e8:	ff ac       	ldd	r15, Y+63	; 0x3f
    86ea:	6f 97       	sbiw	r28, 0x1f	; 31
    86ec:	02 e0       	ldi	r16, 0x02	; 2
    86ee:	10 e0       	ldi	r17, 0x00	; 0
    86f0:	0c c0       	rjmp	.+24     	; 0x870a <_printf_fn+0x5f4>
    86f2:	a9 2c       	mov	r10, r9
    86f4:	b1 2c       	mov	r11, r1
    86f6:	a1 96       	adiw	r28, 0x21	; 33
    86f8:	ce ac       	ldd	r12, Y+62	; 0x3e
    86fa:	df ac       	ldd	r13, Y+63	; 0x3f
    86fc:	a1 97       	sbiw	r28, 0x21	; 33
    86fe:	6f 96       	adiw	r28, 0x1f	; 31
    8700:	ee ac       	ldd	r14, Y+62	; 0x3e
    8702:	ff ac       	ldd	r15, Y+63	; 0x3f
    8704:	6f 97       	sbiw	r28, 0x1f	; 31
    8706:	08 e0       	ldi	r16, 0x08	; 8
    8708:	10 e0       	ldi	r17, 0x00	; 0
    870a:	22 e4       	ldi	r18, 0x42	; 66
    870c:	30 e0       	ldi	r19, 0x00	; 0
    870e:	ae 01       	movw	r20, r28
    8710:	4f 5f       	subi	r20, 0xFF	; 255
    8712:	5f 4f       	sbci	r21, 0xFF	; 255
    8714:	b2 01       	movw	r22, r4
    8716:	7d d9       	rcall	.-3334   	; 0x7a12 <p_ntoa>
    8718:	34 c0       	rjmp	.+104    	; 0x8782 <_printf_fn+0x66c>
    871a:	a9 2c       	mov	r10, r9
    871c:	b1 2c       	mov	r11, r1
    871e:	a1 96       	adiw	r28, 0x21	; 33
    8720:	ce ac       	ldd	r12, Y+62	; 0x3e
    8722:	df ac       	ldd	r13, Y+63	; 0x3f
    8724:	a1 97       	sbiw	r28, 0x21	; 33
    8726:	6f 96       	adiw	r28, 0x1f	; 31
    8728:	ee ac       	ldd	r14, Y+62	; 0x3e
    872a:	ff ac       	ldd	r15, Y+63	; 0x3f
    872c:	6f 97       	sbiw	r28, 0x1f	; 31
    872e:	00 e1       	ldi	r16, 0x10	; 16
    8730:	10 e0       	ldi	r17, 0x00	; 0
    8732:	22 e4       	ldi	r18, 0x42	; 66
    8734:	30 e0       	ldi	r19, 0x00	; 0
    8736:	ae 01       	movw	r20, r28
    8738:	4f 5f       	subi	r20, 0xFF	; 255
    873a:	5f 4f       	sbci	r21, 0xFF	; 255
    873c:	b2 01       	movw	r22, r4
    873e:	69 d9       	rcall	.-3374   	; 0x7a12 <p_ntoa>
    8740:	6c 01       	movw	r12, r24
    8742:	a3 96       	adiw	r28, 0x23	; 35
    8744:	6e ad       	ldd	r22, Y+62	; 0x3e
    8746:	7f ad       	ldd	r23, Y+63	; 0x3f
    8748:	a3 97       	sbiw	r28, 0x23	; 35
    874a:	67 7f       	andi	r22, 0xF7	; 247
    874c:	60 35       	cpi	r22, 0x50	; 80
    874e:	71 05       	cpc	r23, r1
    8750:	09 f0       	breq	.+2      	; 0x8754 <_printf_fn+0x63e>
    8752:	3f c0       	rjmp	.+126    	; 0x87d2 <_printf_fn+0x6bc>
    8754:	3a c0       	rjmp	.+116    	; 0x87ca <_printf_fn+0x6b4>
    8756:	c9 2c       	mov	r12, r9
    8758:	d1 2c       	mov	r13, r1
    875a:	a1 96       	adiw	r28, 0x21	; 33
    875c:	ee ac       	ldd	r14, Y+62	; 0x3e
    875e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8760:	a1 97       	sbiw	r28, 0x21	; 33
    8762:	6f 96       	adiw	r28, 0x1f	; 31
    8764:	0e ad       	ldd	r16, Y+62	; 0x3e
    8766:	1f ad       	ldd	r17, Y+63	; 0x3f
    8768:	6f 97       	sbiw	r28, 0x1f	; 31
    876a:	22 e4       	ldi	r18, 0x42	; 66
    876c:	30 e0       	ldi	r19, 0x00	; 0
    876e:	ae 01       	movw	r20, r28
    8770:	4f 5f       	subi	r20, 0xFF	; 255
    8772:	5f 4f       	sbci	r21, 0xFF	; 255
    8774:	a9 96       	adiw	r28, 0x29	; 41
    8776:	6c ad       	ldd	r22, Y+60	; 0x3c
    8778:	7d ad       	ldd	r23, Y+61	; 0x3d
    877a:	8e ad       	ldd	r24, Y+62	; 0x3e
    877c:	9f ad       	ldd	r25, Y+63	; 0x3f
    877e:	a9 97       	sbiw	r28, 0x29	; 41
    8780:	9d d9       	rcall	.-3270   	; 0x7abc <p_ftoa>
    8782:	93 fa       	bst	r9, 3
    8784:	00 27       	eor	r16, r16
    8786:	00 f9       	bld	r16, 0
    8788:	10 e0       	ldi	r17, 0x00	; 0
    878a:	9c 01       	movw	r18, r24
    878c:	27 c0       	rjmp	.+78     	; 0x87dc <_printf_fn+0x6c6>
    878e:	c9 2c       	mov	r12, r9
    8790:	d1 2c       	mov	r13, r1
    8792:	a1 96       	adiw	r28, 0x21	; 33
    8794:	ee ac       	ldd	r14, Y+62	; 0x3e
    8796:	ff ac       	ldd	r15, Y+63	; 0x3f
    8798:	a1 97       	sbiw	r28, 0x21	; 33
    879a:	6f 96       	adiw	r28, 0x1f	; 31
    879c:	0e ad       	ldd	r16, Y+62	; 0x3e
    879e:	1f ad       	ldd	r17, Y+63	; 0x3f
    87a0:	6f 97       	sbiw	r28, 0x1f	; 31
    87a2:	22 e4       	ldi	r18, 0x42	; 66
    87a4:	30 e0       	ldi	r19, 0x00	; 0
    87a6:	ae 01       	movw	r20, r28
    87a8:	4f 5f       	subi	r20, 0xFF	; 255
    87aa:	5f 4f       	sbci	r21, 0xFF	; 255
    87ac:	a9 96       	adiw	r28, 0x29	; 41
    87ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    87b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    87b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    87b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    87b6:	a9 97       	sbiw	r28, 0x29	; 41
    87b8:	88 da       	rcall	.-2800   	; 0x7cca <p_etoa>
    87ba:	6c 01       	movw	r12, r24
    87bc:	a3 96       	adiw	r28, 0x23	; 35
    87be:	4e ad       	ldd	r20, Y+62	; 0x3e
    87c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87c2:	a3 97       	sbiw	r28, 0x23	; 35
    87c4:	45 34       	cpi	r20, 0x45	; 69
    87c6:	51 05       	cpc	r21, r1
    87c8:	21 f4       	brne	.+8      	; 0x87d2 <_printf_fn+0x6bc>
    87ca:	ce 01       	movw	r24, r28
    87cc:	01 96       	adiw	r24, 0x01	; 1
    87ce:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strupper>
    87d2:	93 fa       	bst	r9, 3
    87d4:	00 27       	eor	r16, r16
    87d6:	00 f9       	bld	r16, 0
    87d8:	10 e0       	ldi	r17, 0x00	; 0
    87da:	96 01       	movw	r18, r12
    87dc:	6f 96       	adiw	r28, 0x1f	; 31
    87de:	4e ad       	ldd	r20, Y+62	; 0x3e
    87e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    87e2:	6f 97       	sbiw	r28, 0x1f	; 31
    87e4:	be 01       	movw	r22, r28
    87e6:	6f 5f       	subi	r22, 0xFF	; 255
    87e8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ea:	a5 96       	adiw	r28, 0x25	; 37
    87ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    87ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    87f0:	a5 97       	sbiw	r28, 0x25	; 37
    87f2:	d7 db       	rcall	.-2130   	; 0x7fa2 <_puts_pad>
    87f4:	b6 c0       	rjmp	.+364    	; 0x8962 <_printf_fn+0x84c>
    87f6:	a3 96       	adiw	r28, 0x23	; 35
    87f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    87fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    87fc:	a3 97       	sbiw	r28, 0x23	; 35
    87fe:	83 37       	cpi	r24, 0x73	; 115
    8800:	91 05       	cpc	r25, r1
    8802:	69 f4       	brne	.+26     	; 0x881e <_printf_fn+0x708>
    8804:	61 01       	movw	r12, r2
    8806:	92 e0       	ldi	r25, 0x02	; 2
    8808:	c9 0e       	add	r12, r25
    880a:	d1 1c       	adc	r13, r1
    880c:	d1 01       	movw	r26, r2
    880e:	6d 91       	ld	r22, X+
    8810:	7c 91       	ld	r23, X
    8812:	61 15       	cp	r22, r1
    8814:	71 05       	cpc	r23, r1
    8816:	91 f4       	brne	.+36     	; 0x883c <_printf_fn+0x726>
    8818:	6a e1       	ldi	r22, 0x1A	; 26
    881a:	74 e0       	ldi	r23, 0x04	; 4
    881c:	0f c0       	rjmp	.+30     	; 0x883c <_printf_fn+0x726>
    881e:	61 01       	movw	r12, r2
    8820:	b2 e0       	ldi	r27, 0x02	; 2
    8822:	cb 0e       	add	r12, r27
    8824:	d1 1c       	adc	r13, r1
    8826:	f1 01       	movw	r30, r2
    8828:	80 81       	ld	r24, Z
    882a:	60 96       	adiw	r28, 0x10	; 16
    882c:	8f af       	std	Y+63, r24	; 0x3f
    882e:	60 97       	sbiw	r28, 0x10	; 16
    8830:	61 96       	adiw	r28, 0x11	; 17
    8832:	1f ae       	std	Y+63, r1	; 0x3f
    8834:	61 97       	sbiw	r28, 0x11	; 17
    8836:	be 01       	movw	r22, r28
    8838:	61 5b       	subi	r22, 0xB1	; 177
    883a:	7f 4f       	sbci	r23, 0xFF	; 255
    883c:	fb 01       	movw	r30, r22
    883e:	01 90       	ld	r0, Z+
    8840:	00 20       	and	r0, r0
    8842:	e9 f7       	brne	.-6      	; 0x883e <_printf_fn+0x728>
    8844:	31 97       	sbiw	r30, 0x01	; 1
    8846:	e6 1b       	sub	r30, r22
    8848:	f7 0b       	sbc	r31, r23
    884a:	a1 96       	adiw	r28, 0x21	; 33
    884c:	2e ad       	ldd	r18, Y+62	; 0x3e
    884e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8850:	a1 97       	sbiw	r28, 0x21	; 33
    8852:	23 2b       	or	r18, r19
    8854:	21 f4       	brne	.+8      	; 0x885e <_printf_fn+0x748>
    8856:	a1 96       	adiw	r28, 0x21	; 33
    8858:	ff af       	std	Y+63, r31	; 0x3f
    885a:	ee af       	std	Y+62, r30	; 0x3e
    885c:	a1 97       	sbiw	r28, 0x21	; 33
    885e:	6f 96       	adiw	r28, 0x1f	; 31
    8860:	4e ad       	ldd	r20, Y+62	; 0x3e
    8862:	5f ad       	ldd	r21, Y+63	; 0x3f
    8864:	6f 97       	sbiw	r28, 0x1f	; 31
    8866:	a1 96       	adiw	r28, 0x21	; 33
    8868:	8e ad       	ldd	r24, Y+62	; 0x3e
    886a:	9f ad       	ldd	r25, Y+63	; 0x3f
    886c:	a1 97       	sbiw	r28, 0x21	; 33
    886e:	48 17       	cp	r20, r24
    8870:	59 07       	cpc	r21, r25
    8872:	3c f4       	brge	.+14     	; 0x8882 <_printf_fn+0x76c>
    8874:	41 15       	cp	r20, r1
    8876:	51 05       	cpc	r21, r1
    8878:	21 f0       	breq	.+8      	; 0x8882 <_printf_fn+0x76c>
    887a:	a1 96       	adiw	r28, 0x21	; 33
    887c:	5f af       	std	Y+63, r21	; 0x3f
    887e:	4e af       	std	Y+62, r20	; 0x3e
    8880:	a1 97       	sbiw	r28, 0x21	; 33
    8882:	93 fa       	bst	r9, 3
    8884:	00 27       	eor	r16, r16
    8886:	00 f9       	bld	r16, 0
    8888:	10 e0       	ldi	r17, 0x00	; 0
    888a:	a1 96       	adiw	r28, 0x21	; 33
    888c:	2e ad       	ldd	r18, Y+62	; 0x3e
    888e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8890:	a1 97       	sbiw	r28, 0x21	; 33
    8892:	6f 96       	adiw	r28, 0x1f	; 31
    8894:	4e ad       	ldd	r20, Y+62	; 0x3e
    8896:	5f ad       	ldd	r21, Y+63	; 0x3f
    8898:	6f 97       	sbiw	r28, 0x1f	; 31
    889a:	a5 96       	adiw	r28, 0x25	; 37
    889c:	8e ad       	ldd	r24, Y+62	; 0x3e
    889e:	9f ad       	ldd	r25, Y+63	; 0x3f
    88a0:	a5 97       	sbiw	r28, 0x25	; 37
    88a2:	7f db       	rcall	.-2306   	; 0x7fa2 <_puts_pad>
    88a4:	45 c0       	rjmp	.+138    	; 0x8930 <_printf_fn+0x81a>
    88a6:	61 01       	movw	r12, r2
    88a8:	92 e0       	ldi	r25, 0x02	; 2
    88aa:	c9 0e       	add	r12, r25
    88ac:	d1 1c       	adc	r13, r1
    88ae:	d1 01       	movw	r26, r2
    88b0:	2d 90       	ld	r2, X+
    88b2:	3c 90       	ld	r3, X
    88b4:	41 2c       	mov	r4, r1
    88b6:	21 14       	cp	r2, r1
    88b8:	31 04       	cpc	r3, r1
    88ba:	41 04       	cpc	r4, r1
    88bc:	29 f4       	brne	.+10     	; 0x88c8 <_printf_fn+0x7b2>
    88be:	ae 96       	adiw	r28, 0x2e	; 46
    88c0:	2d ac       	ldd	r2, Y+61	; 0x3d
    88c2:	3e ac       	ldd	r3, Y+62	; 0x3e
    88c4:	4f ac       	ldd	r4, Y+63	; 0x3f
    88c6:	ae 97       	sbiw	r28, 0x2e	; 46
    88c8:	84 2d       	mov	r24, r4
    88ca:	b1 01       	movw	r22, r2
    88cc:	08 dc       	rcall	.-2032   	; 0x80de <strlen_X>
    88ce:	a1 96       	adiw	r28, 0x21	; 33
    88d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    88d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    88d4:	a1 97       	sbiw	r28, 0x21	; 33
    88d6:	ef 2b       	or	r30, r31
    88d8:	31 f4       	brne	.+12     	; 0x88e6 <_printf_fn+0x7d0>
    88da:	a0 96       	adiw	r28, 0x20	; 32
    88dc:	8f af       	std	Y+63, r24	; 0x3f
    88de:	a0 97       	sbiw	r28, 0x20	; 32
    88e0:	a1 96       	adiw	r28, 0x21	; 33
    88e2:	9f af       	std	Y+63, r25	; 0x3f
    88e4:	a1 97       	sbiw	r28, 0x21	; 33
    88e6:	6f 96       	adiw	r28, 0x1f	; 31
    88e8:	2e ad       	ldd	r18, Y+62	; 0x3e
    88ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    88ec:	6f 97       	sbiw	r28, 0x1f	; 31
    88ee:	a1 96       	adiw	r28, 0x21	; 33
    88f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    88f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    88f4:	a1 97       	sbiw	r28, 0x21	; 33
    88f6:	24 17       	cp	r18, r20
    88f8:	35 07       	cpc	r19, r21
    88fa:	3c f4       	brge	.+14     	; 0x890a <_printf_fn+0x7f4>
    88fc:	21 15       	cp	r18, r1
    88fe:	31 05       	cpc	r19, r1
    8900:	21 f0       	breq	.+8      	; 0x890a <_printf_fn+0x7f4>
    8902:	a1 96       	adiw	r28, 0x21	; 33
    8904:	3f af       	std	Y+63, r19	; 0x3f
    8906:	2e af       	std	Y+62, r18	; 0x3e
    8908:	a1 97       	sbiw	r28, 0x21	; 33
    890a:	93 fa       	bst	r9, 3
    890c:	ee 24       	eor	r14, r14
    890e:	e0 f8       	bld	r14, 0
    8910:	f1 2c       	mov	r15, r1
    8912:	a1 96       	adiw	r28, 0x21	; 33
    8914:	0e ad       	ldd	r16, Y+62	; 0x3e
    8916:	1f ad       	ldd	r17, Y+63	; 0x3f
    8918:	a1 97       	sbiw	r28, 0x21	; 33
    891a:	6f 96       	adiw	r28, 0x1f	; 31
    891c:	2e ad       	ldd	r18, Y+62	; 0x3e
    891e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8920:	6f 97       	sbiw	r28, 0x1f	; 31
    8922:	64 2d       	mov	r22, r4
    8924:	a1 01       	movw	r20, r2
    8926:	a5 96       	adiw	r28, 0x25	; 37
    8928:	8e ad       	ldd	r24, Y+62	; 0x3e
    892a:	9f ad       	ldd	r25, Y+63	; 0x3f
    892c:	a5 97       	sbiw	r28, 0x25	; 37
    892e:	7b db       	rcall	.-2314   	; 0x8026 <_puts_pad_X>
    8930:	16 01       	movw	r2, r12
    8932:	17 c0       	rjmp	.+46     	; 0x8962 <_printf_fn+0x84c>
    8934:	f6 01       	movw	r30, r12
    8936:	5e 2d       	mov	r21, r14
    8938:	0e 94 24 e3 	call	0x1c648	; 0x1c648 <__xload_1>
    893c:	66 23       	and	r22, r22
    893e:	89 f0       	breq	.+34     	; 0x8962 <_printf_fn+0x84c>
    8940:	5f ef       	ldi	r21, 0xFF	; 255
    8942:	c5 1a       	sub	r12, r21
    8944:	d5 0a       	sbc	r13, r21
    8946:	e5 0a       	sbc	r14, r21
    8948:	a5 96       	adiw	r28, 0x25	; 37
    894a:	ae ad       	ldd	r26, Y+62	; 0x3e
    894c:	bf ad       	ldd	r27, Y+63	; 0x3f
    894e:	a5 97       	sbiw	r28, 0x25	; 37
    8950:	ed 91       	ld	r30, X+
    8952:	fc 91       	ld	r31, X
    8954:	11 97       	sbiw	r26, 0x01	; 1
    8956:	cd 01       	movw	r24, r26
    8958:	09 95       	icall
    895a:	6c 14       	cp	r6, r12
    895c:	7d 04       	cpc	r7, r13
    895e:	8e 04       	cpc	r8, r14
    8960:	48 f7       	brcc	.-46     	; 0x8934 <_printf_fn+0x81e>
    8962:	e8 2c       	mov	r14, r8
    8964:	63 01       	movw	r12, r6
    8966:	0f cc       	rjmp	.-2018   	; 0x8186 <_printf_fn+0x70>
    8968:	82 e0       	ldi	r24, 0x02	; 2
    896a:	48 2e       	mov	r4, r24
    896c:	51 2c       	mov	r5, r1
    896e:	0d cd       	rjmp	.-1510   	; 0x838a <_printf_fn+0x274>
    8970:	f2 e0       	ldi	r31, 0x02	; 2
    8972:	4f 16       	cp	r4, r31
    8974:	51 04       	cpc	r5, r1
    8976:	61 f4       	brne	.+24     	; 0x8990 <_printf_fn+0x87a>
    8978:	51 01       	movw	r10, r2
    897a:	b2 e0       	ldi	r27, 0x02	; 2
    897c:	ab 0e       	add	r10, r27
    897e:	b1 1c       	adc	r11, r1
    8980:	f1 01       	movw	r30, r2
    8982:	80 81       	ld	r24, Z
    8984:	91 81       	ldd	r25, Z+1	; 0x01
    8986:	65 96       	adiw	r28, 0x15	; 21
    8988:	9f af       	std	Y+63, r25	; 0x3f
    898a:	8e af       	std	Y+62, r24	; 0x3e
    898c:	65 97       	sbiw	r28, 0x15	; 21
    898e:	7e cd       	rjmp	.-1284   	; 0x848c <_printf_fn+0x376>
    8990:	f4 e0       	ldi	r31, 0x04	; 4
    8992:	4f 16       	cp	r4, r31
    8994:	51 04       	cpc	r5, r1
    8996:	09 f0       	breq	.+2      	; 0x899a <_printf_fn+0x884>
    8998:	b2 cd       	rjmp	.-1180   	; 0x84fe <_printf_fn+0x3e8>
    899a:	51 01       	movw	r10, r2
    899c:	24 e0       	ldi	r18, 0x04	; 4
    899e:	a2 0e       	add	r10, r18
    89a0:	b1 1c       	adc	r11, r1
    89a2:	f1 01       	movw	r30, r2
    89a4:	80 81       	ld	r24, Z
    89a6:	91 81       	ldd	r25, Z+1	; 0x01
    89a8:	a2 81       	ldd	r26, Z+2	; 0x02
    89aa:	b3 81       	ldd	r27, Z+3	; 0x03
    89ac:	2f 96       	adiw	r28, 0x0f	; 15
    89ae:	8c af       	std	Y+60, r24	; 0x3c
    89b0:	9d af       	std	Y+61, r25	; 0x3d
    89b2:	ae af       	std	Y+62, r26	; 0x3e
    89b4:	bf af       	std	Y+63, r27	; 0x3f
    89b6:	2f 97       	sbiw	r28, 0x0f	; 15
    89b8:	90 cd       	rjmp	.-1248   	; 0x84da <_printf_fn+0x3c4>
    89ba:	c2 59       	subi	r28, 0x92	; 146
    89bc:	df 4f       	sbci	r29, 0xFF	; 255
    89be:	e2 e1       	ldi	r30, 0x12	; 18
    89c0:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

000089c4 <vsnprintf_P>:
    89c4:	a8 e0       	ldi	r26, 0x08	; 8
    89c6:	b0 e0       	ldi	r27, 0x00	; 0
    89c8:	e8 ee       	ldi	r30, 0xE8	; 232
    89ca:	f4 e4       	ldi	r31, 0x44	; 68
    89cc:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
    89d0:	7c 01       	movw	r14, r24
    89d2:	cb 01       	movw	r24, r22
    89d4:	64 2f       	mov	r22, r20
    89d6:	a9 01       	movw	r20, r18
    89d8:	98 01       	movw	r18, r16
    89da:	f7 01       	movw	r30, r14
    89dc:	10 82       	st	Z, r1
    89de:	e0 e4       	ldi	r30, 0x40	; 64
    89e0:	fc e3       	ldi	r31, 0x3C	; 60
    89e2:	fa 83       	std	Y+2, r31	; 0x02
    89e4:	e9 83       	std	Y+1, r30	; 0x01
    89e6:	9e 83       	std	Y+6, r25	; 0x06
    89e8:	8d 83       	std	Y+5, r24	; 0x05
    89ea:	18 86       	std	Y+8, r1	; 0x08
    89ec:	1f 82       	std	Y+7, r1	; 0x07
    89ee:	fc 82       	std	Y+4, r15	; 0x04
    89f0:	eb 82       	std	Y+3, r14	; 0x03
    89f2:	ce 01       	movw	r24, r28
    89f4:	01 96       	adiw	r24, 0x01	; 1
    89f6:	8f db       	rcall	.-2274   	; 0x8116 <_printf_fn>
    89f8:	f7 01       	movw	r30, r14
    89fa:	01 90       	ld	r0, Z+
    89fc:	00 20       	and	r0, r0
    89fe:	e9 f7       	brne	.-6      	; 0x89fa <vsnprintf_P+0x36>
    8a00:	cf 01       	movw	r24, r30
    8a02:	01 97       	sbiw	r24, 0x01	; 1
    8a04:	8e 19       	sub	r24, r14
    8a06:	9f 09       	sbc	r25, r15
    8a08:	28 96       	adiw	r28, 0x08	; 8
    8a0a:	e6 e0       	ldi	r30, 0x06	; 6
    8a0c:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00008a10 <snprintf_P>:
    8a10:	a0 e0       	ldi	r26, 0x00	; 0
    8a12:	b0 e0       	ldi	r27, 0x00	; 0
    8a14:	ee e0       	ldi	r30, 0x0E	; 14
    8a16:	f5 e4       	ldi	r31, 0x45	; 69
    8a18:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    8a1c:	8e 01       	movw	r16, r28
    8a1e:	02 5f       	subi	r16, 0xF2	; 242
    8a20:	1f 4f       	sbci	r17, 0xFF	; 255
    8a22:	2b 85       	ldd	r18, Y+11	; 0x0b
    8a24:	3c 85       	ldd	r19, Y+12	; 0x0c
    8a26:	4d 85       	ldd	r20, Y+13	; 0x0d
    8a28:	69 85       	ldd	r22, Y+9	; 0x09
    8a2a:	7a 85       	ldd	r23, Y+10	; 0x0a
    8a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    8a2e:	98 85       	ldd	r25, Y+8	; 0x08
    8a30:	c9 df       	rcall	.-110    	; 0x89c4 <vsnprintf_P>
    8a32:	e4 e0       	ldi	r30, 0x04	; 4
    8a34:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00008a38 <sprintf_P>:
    8a38:	a0 e0       	ldi	r26, 0x00	; 0
    8a3a:	b0 e0       	ldi	r27, 0x00	; 0
    8a3c:	e2 e2       	ldi	r30, 0x22	; 34
    8a3e:	f5 e4       	ldi	r31, 0x45	; 69
    8a40:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    8a44:	8e 01       	movw	r16, r28
    8a46:	04 5f       	subi	r16, 0xF4	; 244
    8a48:	1f 4f       	sbci	r17, 0xFF	; 255
    8a4a:	29 85       	ldd	r18, Y+9	; 0x09
    8a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a50:	60 e0       	ldi	r22, 0x00	; 0
    8a52:	74 e0       	ldi	r23, 0x04	; 4
    8a54:	8f 81       	ldd	r24, Y+7	; 0x07
    8a56:	98 85       	ldd	r25, Y+8	; 0x08
    8a58:	b5 df       	rcall	.-150    	; 0x89c4 <vsnprintf_P>
    8a5a:	e4 e0       	ldi	r30, 0x04	; 4
    8a5c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00008a60 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8a60:	a8 e0       	ldi	r26, 0x08	; 8
    8a62:	b0 e0       	ldi	r27, 0x00	; 0
    8a64:	e6 e3       	ldi	r30, 0x36	; 54
    8a66:	f5 e4       	ldi	r31, 0x45	; 69
    8a68:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    8a6c:	9e 01       	movw	r18, r28
    8a6e:	23 5f       	subi	r18, 0xF3	; 243
    8a70:	3f 4f       	sbci	r19, 0xFF	; 255
    8a72:	f9 01       	movw	r30, r18
    8a74:	41 91       	ld	r20, Z+
    8a76:	51 91       	ld	r21, Z+
    8a78:	61 91       	ld	r22, Z+
    8a7a:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8a7c:	89 e5       	ldi	r24, 0x59	; 89
    8a7e:	9c e3       	ldi	r25, 0x3C	; 60
    8a80:	9a 83       	std	Y+2, r25	; 0x02
    8a82:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8a84:	18 86       	std	Y+8, r1	; 0x08
    8a86:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8a88:	ce 01       	movw	r24, r28
    8a8a:	01 96       	adiw	r24, 0x01	; 1
    8a8c:	44 db       	rcall	.-2424   	; 0x8116 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    8a90:	98 85       	ldd	r25, Y+8	; 0x08
    8a92:	28 96       	adiw	r28, 0x08	; 8
    8a94:	e2 e0       	ldi	r30, 0x02	; 2
    8a96:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00008a9a <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8a9a:	9c 01       	movw	r18, r24
    8a9c:	20 53       	subi	r18, 0x30	; 48
    8a9e:	31 09       	sbc	r19, r1
    8aa0:	2a 30       	cpi	r18, 0x0A	; 10
    8aa2:	31 05       	cpc	r19, r1
    8aa4:	10 f4       	brcc	.+4      	; 0x8aaa <atodigit+0x10>
    8aa6:	c9 01       	movw	r24, r18
    8aa8:	10 c0       	rjmp	.+32     	; 0x8aca <atodigit+0x30>
    8aaa:	9c 01       	movw	r18, r24
    8aac:	21 54       	subi	r18, 0x41	; 65
    8aae:	31 09       	sbc	r19, r1
    8ab0:	26 30       	cpi	r18, 0x06	; 6
    8ab2:	31 05       	cpc	r19, r1
    8ab4:	10 f4       	brcc	.+4      	; 0x8aba <atodigit+0x20>
    8ab6:	c7 97       	sbiw	r24, 0x37	; 55
    8ab8:	08 c0       	rjmp	.+16     	; 0x8aca <atodigit+0x30>
    8aba:	9c 01       	movw	r18, r24
    8abc:	21 56       	subi	r18, 0x61	; 97
    8abe:	31 09       	sbc	r19, r1
    8ac0:	26 30       	cpi	r18, 0x06	; 6
    8ac2:	31 05       	cpc	r19, r1
    8ac4:	28 f4       	brcc	.+10     	; 0x8ad0 <atodigit+0x36>
    8ac6:	87 55       	subi	r24, 0x57	; 87
    8ac8:	91 09       	sbc	r25, r1
    8aca:	86 17       	cp	r24, r22
    8acc:	97 07       	cpc	r25, r23
    8ace:	14 f0       	brlt	.+4      	; 0x8ad4 <atodigit+0x3a>
    8ad0:	8f ef       	ldi	r24, 0xFF	; 255
    8ad2:	9f ef       	ldi	r25, 0xFF	; 255
    8ad4:	08 95       	ret

00008ad6 <strtol>:
    8ad6:	a0 e0       	ldi	r26, 0x00	; 0
    8ad8:	b0 e0       	ldi	r27, 0x00	; 0
    8ada:	e1 e7       	ldi	r30, 0x71	; 113
    8adc:	f5 e4       	ldi	r31, 0x45	; 69
    8ade:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    8ae2:	2b 01       	movw	r4, r22
    8ae4:	8a 01       	movw	r16, r20
    8ae6:	ec 01       	movw	r28, r24
    8ae8:	28 81       	ld	r18, Y
    8aea:	01 96       	adiw	r24, 0x01	; 1
    8aec:	20 32       	cpi	r18, 0x20	; 32
    8aee:	d9 f3       	breq	.-10     	; 0x8ae6 <strtol+0x10>
    8af0:	29 30       	cpi	r18, 0x09	; 9
    8af2:	c9 f3       	breq	.-14     	; 0x8ae6 <strtol+0x10>
    8af4:	2d 32       	cpi	r18, 0x2D	; 45
    8af6:	29 f4       	brne	.+10     	; 0x8b02 <strtol+0x2c>
    8af8:	ec 01       	movw	r28, r24
    8afa:	66 24       	eor	r6, r6
    8afc:	63 94       	inc	r6
    8afe:	71 2c       	mov	r7, r1
    8b00:	05 c0       	rjmp	.+10     	; 0x8b0c <strtol+0x36>
    8b02:	2b 32       	cpi	r18, 0x2B	; 43
    8b04:	09 f4       	brne	.+2      	; 0x8b08 <strtol+0x32>
    8b06:	ec 01       	movw	r28, r24
    8b08:	61 2c       	mov	r6, r1
    8b0a:	71 2c       	mov	r7, r1
    8b0c:	9e 01       	movw	r18, r28
    8b0e:	2f 5f       	subi	r18, 0xFF	; 255
    8b10:	3f 4f       	sbci	r19, 0xFF	; 255
    8b12:	88 81       	ld	r24, Y
    8b14:	80 33       	cpi	r24, 0x30	; 48
    8b16:	11 f4       	brne	.+4      	; 0x8b1c <strtol+0x46>
    8b18:	e9 01       	movw	r28, r18
    8b1a:	f8 cf       	rjmp	.-16     	; 0x8b0c <strtol+0x36>
    8b1c:	c1 2c       	mov	r12, r1
    8b1e:	d1 2c       	mov	r13, r1
    8b20:	76 01       	movw	r14, r12
    8b22:	48 01       	movw	r8, r16
    8b24:	01 2e       	mov	r0, r17
    8b26:	00 0c       	add	r0, r0
    8b28:	aa 08       	sbc	r10, r10
    8b2a:	bb 08       	sbc	r11, r11
    8b2c:	3c 2e       	mov	r3, r28
    8b2e:	2d 2e       	mov	r2, r29
    8b30:	89 91       	ld	r24, Y+
    8b32:	88 23       	and	r24, r24
    8b34:	31 f0       	breq	.+12     	; 0x8b42 <strtol+0x6c>
    8b36:	b8 01       	movw	r22, r16
    8b38:	90 e0       	ldi	r25, 0x00	; 0
    8b3a:	af df       	rcall	.-162    	; 0x8a9a <atodigit>
    8b3c:	fc 01       	movw	r30, r24
    8b3e:	97 ff       	sbrs	r25, 7
    8b40:	0c c0       	rjmp	.+24     	; 0x8b5a <strtol+0x84>
    8b42:	61 14       	cp	r6, r1
    8b44:	71 04       	cpc	r7, r1
    8b46:	c1 f0       	breq	.+48     	; 0x8b78 <strtol+0xa2>
    8b48:	f0 94       	com	r15
    8b4a:	e0 94       	com	r14
    8b4c:	d0 94       	com	r13
    8b4e:	c0 94       	com	r12
    8b50:	c1 1c       	adc	r12, r1
    8b52:	d1 1c       	adc	r13, r1
    8b54:	e1 1c       	adc	r14, r1
    8b56:	f1 1c       	adc	r15, r1
    8b58:	0f c0       	rjmp	.+30     	; 0x8b78 <strtol+0xa2>
    8b5a:	a5 01       	movw	r20, r10
    8b5c:	94 01       	movw	r18, r8
    8b5e:	c7 01       	movw	r24, r14
    8b60:	b6 01       	movw	r22, r12
    8b62:	0e 94 3e e2 	call	0x1c47c	; 0x1c47c <__mulsi3>
    8b66:	6f 01       	movw	r12, r30
    8b68:	ff 0f       	add	r31, r31
    8b6a:	ee 08       	sbc	r14, r14
    8b6c:	ff 08       	sbc	r15, r15
    8b6e:	c6 0e       	add	r12, r22
    8b70:	d7 1e       	adc	r13, r23
    8b72:	e8 1e       	adc	r14, r24
    8b74:	f9 1e       	adc	r15, r25
    8b76:	da cf       	rjmp	.-76     	; 0x8b2c <strtol+0x56>
    8b78:	41 14       	cp	r4, r1
    8b7a:	51 04       	cpc	r5, r1
    8b7c:	19 f0       	breq	.+6      	; 0x8b84 <strtol+0xae>
    8b7e:	f2 01       	movw	r30, r4
    8b80:	30 82       	st	Z, r3
    8b82:	21 82       	std	Z+1, r2	; 0x01
    8b84:	c7 01       	movw	r24, r14
    8b86:	b6 01       	movw	r22, r12
    8b88:	cd b7       	in	r28, 0x3d	; 61
    8b8a:	de b7       	in	r29, 0x3e	; 62
    8b8c:	e2 e1       	ldi	r30, 0x12	; 18
    8b8e:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00008b92 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b92:	4a e0       	ldi	r20, 0x0A	; 10
    8b94:	50 e0       	ldi	r21, 0x00	; 0
    8b96:	60 e0       	ldi	r22, 0x00	; 0
    8b98:	70 e0       	ldi	r23, 0x00	; 0
    8b9a:	9d df       	rcall	.-198    	; 0x8ad6 <strtol>
    return((int)num);
}
    8b9c:	cb 01       	movw	r24, r22
    8b9e:	08 95       	ret

00008ba0 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ba0:	4a e0       	ldi	r20, 0x0A	; 10
    8ba2:	50 e0       	ldi	r21, 0x00	; 0
    8ba4:	60 e0       	ldi	r22, 0x00	; 0
    8ba6:	70 e0       	ldi	r23, 0x00	; 0
    8ba8:	96 cf       	rjmp	.-212    	; 0x8ad6 <strtol>
    return(num);
}
    8baa:	08 95       	ret

00008bac <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8bac:	fc 01       	movw	r30, r24
    8bae:	62 81       	ldd	r22, Z+2	; 0x02
    8bb0:	73 81       	ldd	r23, Z+3	; 0x03
    8bb2:	cb 01       	movw	r24, r22
    8bb4:	a0 e0       	ldi	r26, 0x00	; 0
    8bb6:	b0 e0       	ldi	r27, 0x00	; 0
    8bb8:	ba 2f       	mov	r27, r26
    8bba:	a9 2f       	mov	r26, r25
    8bbc:	98 2f       	mov	r25, r24
    8bbe:	88 27       	eor	r24, r24
    8bc0:	21 81       	ldd	r18, Z+1	; 0x01
    8bc2:	82 2b       	or	r24, r18
    8bc4:	ba 2f       	mov	r27, r26
    8bc6:	a9 2f       	mov	r26, r25
    8bc8:	98 2f       	mov	r25, r24
    8bca:	88 27       	eor	r24, r24
    8bcc:	20 81       	ld	r18, Z
    8bce:	bc 01       	movw	r22, r24
    8bd0:	cd 01       	movw	r24, r26
    8bd2:	62 2b       	or	r22, r18
    8bd4:	08 95       	ret

00008bd6 <st_dword>:
    8bd6:	fc 01       	movw	r30, r24
    8bd8:	40 83       	st	Z, r20
    8bda:	51 83       	std	Z+1, r21	; 0x01
    8bdc:	62 83       	std	Z+2, r22	; 0x02
    8bde:	73 83       	std	Z+3, r23	; 0x03
    8be0:	08 95       	ret

00008be2 <mem_set>:
    8be2:	48 0f       	add	r20, r24
    8be4:	59 1f       	adc	r21, r25
    8be6:	fc 01       	movw	r30, r24
    8be8:	61 93       	st	Z+, r22
    8bea:	cf 01       	movw	r24, r30
    8bec:	e4 17       	cp	r30, r20
    8bee:	f5 07       	cpc	r31, r21
    8bf0:	d1 f7       	brne	.-12     	; 0x8be6 <mem_set+0x4>
    8bf2:	08 95       	ret

00008bf4 <mem_cmp>:
    8bf4:	dc 01       	movw	r26, r24
    8bf6:	fb 01       	movw	r30, r22
    8bf8:	2d 91       	ld	r18, X+
    8bfa:	81 91       	ld	r24, Z+
    8bfc:	30 e0       	ldi	r19, 0x00	; 0
    8bfe:	b9 01       	movw	r22, r18
    8c00:	68 1b       	sub	r22, r24
    8c02:	71 09       	sbc	r23, r1
    8c04:	cb 01       	movw	r24, r22
    8c06:	41 50       	subi	r20, 0x01	; 1
    8c08:	51 09       	sbc	r21, r1
    8c0a:	11 f0       	breq	.+4      	; 0x8c10 <mem_cmp+0x1c>
    8c0c:	00 97       	sbiw	r24, 0x00	; 0
    8c0e:	a1 f3       	breq	.-24     	; 0x8bf8 <mem_cmp+0x4>
    8c10:	08 95       	ret

00008c12 <clst2sect>:
    8c12:	0f 93       	push	r16
    8c14:	1f 93       	push	r17
    8c16:	fc 01       	movw	r30, r24
    8c18:	9a 01       	movw	r18, r20
    8c1a:	ab 01       	movw	r20, r22
    8c1c:	22 50       	subi	r18, 0x02	; 2
    8c1e:	31 09       	sbc	r19, r1
    8c20:	41 09       	sbc	r20, r1
    8c22:	51 09       	sbc	r21, r1
    8c24:	81 8d       	ldd	r24, Z+25	; 0x19
    8c26:	92 8d       	ldd	r25, Z+26	; 0x1a
    8c28:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8c2a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8c2c:	02 97       	sbiw	r24, 0x02	; 2
    8c2e:	a1 09       	sbc	r26, r1
    8c30:	b1 09       	sbc	r27, r1
    8c32:	28 17       	cp	r18, r24
    8c34:	39 07       	cpc	r19, r25
    8c36:	4a 07       	cpc	r20, r26
    8c38:	5b 07       	cpc	r21, r27
    8c3a:	68 f4       	brcc	.+26     	; 0x8c56 <clst2sect+0x44>
    8c3c:	a1 85       	ldd	r26, Z+9	; 0x09
    8c3e:	b2 85       	ldd	r27, Z+10	; 0x0a
    8c40:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    8c44:	05 a5       	ldd	r16, Z+45	; 0x2d
    8c46:	16 a5       	ldd	r17, Z+46	; 0x2e
    8c48:	27 a5       	ldd	r18, Z+47	; 0x2f
    8c4a:	30 a9       	ldd	r19, Z+48	; 0x30
    8c4c:	60 0f       	add	r22, r16
    8c4e:	71 1f       	adc	r23, r17
    8c50:	82 1f       	adc	r24, r18
    8c52:	93 1f       	adc	r25, r19
    8c54:	03 c0       	rjmp	.+6      	; 0x8c5c <clst2sect+0x4a>
    8c56:	60 e0       	ldi	r22, 0x00	; 0
    8c58:	70 e0       	ldi	r23, 0x00	; 0
    8c5a:	cb 01       	movw	r24, r22
    8c5c:	1f 91       	pop	r17
    8c5e:	0f 91       	pop	r16
    8c60:	08 95       	ret

00008c62 <clmt_clust>:
    8c62:	cf 93       	push	r28
    8c64:	df 93       	push	r29
    8c66:	fc 01       	movw	r30, r24
    8c68:	c2 a1       	ldd	r28, Z+34	; 0x22
    8c6a:	d3 a1       	ldd	r29, Z+35	; 0x23
    8c6c:	24 96       	adiw	r28, 0x04	; 4
    8c6e:	cb 01       	movw	r24, r22
    8c70:	ba 01       	movw	r22, r20
    8c72:	29 e0       	ldi	r18, 0x09	; 9
    8c74:	96 95       	lsr	r25
    8c76:	87 95       	ror	r24
    8c78:	77 95       	ror	r23
    8c7a:	67 95       	ror	r22
    8c7c:	2a 95       	dec	r18
    8c7e:	d1 f7       	brne	.-12     	; 0x8c74 <clmt_clust+0x12>
    8c80:	01 90       	ld	r0, Z+
    8c82:	f0 81       	ld	r31, Z
    8c84:	e0 2d       	mov	r30, r0
    8c86:	21 85       	ldd	r18, Z+9	; 0x09
    8c88:	32 85       	ldd	r19, Z+10	; 0x0a
    8c8a:	40 e0       	ldi	r20, 0x00	; 0
    8c8c:	50 e0       	ldi	r21, 0x00	; 0
    8c8e:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    8c92:	88 81       	ld	r24, Y
    8c94:	99 81       	ldd	r25, Y+1	; 0x01
    8c96:	aa 81       	ldd	r26, Y+2	; 0x02
    8c98:	bb 81       	ldd	r27, Y+3	; 0x03
    8c9a:	00 97       	sbiw	r24, 0x00	; 0
    8c9c:	a1 05       	cpc	r26, r1
    8c9e:	b1 05       	cpc	r27, r1
    8ca0:	b1 f0       	breq	.+44     	; 0x8cce <clmt_clust+0x6c>
    8ca2:	28 17       	cp	r18, r24
    8ca4:	39 07       	cpc	r19, r25
    8ca6:	4a 07       	cpc	r20, r26
    8ca8:	5b 07       	cpc	r21, r27
    8caa:	30 f0       	brcs	.+12     	; 0x8cb8 <clmt_clust+0x56>
    8cac:	28 1b       	sub	r18, r24
    8cae:	39 0b       	sbc	r19, r25
    8cb0:	4a 0b       	sbc	r20, r26
    8cb2:	5b 0b       	sbc	r21, r27
    8cb4:	28 96       	adiw	r28, 0x08	; 8
    8cb6:	ed cf       	rjmp	.-38     	; 0x8c92 <clmt_clust+0x30>
    8cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    8cba:	9d 81       	ldd	r25, Y+5	; 0x05
    8cbc:	ae 81       	ldd	r26, Y+6	; 0x06
    8cbe:	bf 81       	ldd	r27, Y+7	; 0x07
    8cc0:	bc 01       	movw	r22, r24
    8cc2:	cd 01       	movw	r24, r26
    8cc4:	62 0f       	add	r22, r18
    8cc6:	73 1f       	adc	r23, r19
    8cc8:	84 1f       	adc	r24, r20
    8cca:	95 1f       	adc	r25, r21
    8ccc:	03 c0       	rjmp	.+6      	; 0x8cd4 <clmt_clust+0x72>
    8cce:	60 e0       	ldi	r22, 0x00	; 0
    8cd0:	70 e0       	ldi	r23, 0x00	; 0
    8cd2:	cb 01       	movw	r24, r22
    8cd4:	df 91       	pop	r29
    8cd6:	cf 91       	pop	r28
    8cd8:	08 95       	ret

00008cda <sum_sfn>:
    8cda:	fc 01       	movw	r30, r24
    8cdc:	9c 01       	movw	r18, r24
    8cde:	25 5f       	subi	r18, 0xF5	; 245
    8ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ce2:	80 e0       	ldi	r24, 0x00	; 0
    8ce4:	98 2f       	mov	r25, r24
    8ce6:	90 fb       	bst	r25, 0
    8ce8:	97 95       	ror	r25
    8cea:	97 f9       	bld	r25, 7
    8cec:	81 91       	ld	r24, Z+
    8cee:	89 0f       	add	r24, r25
    8cf0:	e2 17       	cp	r30, r18
    8cf2:	f3 07       	cpc	r31, r19
    8cf4:	b9 f7       	brne	.-18     	; 0x8ce4 <sum_sfn+0xa>
    8cf6:	08 95       	ret

00008cf8 <get_ldnumber>:
    8cf8:	cf 93       	push	r28
    8cfa:	df 93       	push	r29
    8cfc:	dc 01       	movw	r26, r24
    8cfe:	ed 91       	ld	r30, X+
    8d00:	fc 91       	ld	r31, X
    8d02:	11 97       	sbiw	r26, 0x01	; 1
    8d04:	30 97       	sbiw	r30, 0x00	; 0
    8d06:	f9 f0       	breq	.+62     	; 0x8d46 <get_ldnumber+0x4e>
    8d08:	9f 01       	movw	r18, r30
    8d0a:	2f 5f       	subi	r18, 0xFF	; 255
    8d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d0e:	e9 01       	movw	r28, r18
    8d10:	21 97       	sbiw	r28, 0x01	; 1
    8d12:	88 81       	ld	r24, Y
    8d14:	80 32       	cpi	r24, 0x20	; 32
    8d16:	18 f0       	brcs	.+6      	; 0x8d1e <get_ldnumber+0x26>
    8d18:	8a 33       	cpi	r24, 0x3A	; 58
    8d1a:	b9 f7       	brne	.-18     	; 0x8d0a <get_ldnumber+0x12>
    8d1c:	04 c0       	rjmp	.+8      	; 0x8d26 <get_ldnumber+0x2e>
    8d1e:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <CurrVol>
    8d22:	90 e0       	ldi	r25, 0x00	; 0
    8d24:	12 c0       	rjmp	.+36     	; 0x8d4a <get_ldnumber+0x52>
    8d26:	90 81       	ld	r25, Z
    8d28:	80 ed       	ldi	r24, 0xD0	; 208
    8d2a:	89 0f       	add	r24, r25
    8d2c:	8a 30       	cpi	r24, 0x0A	; 10
    8d2e:	58 f4       	brcc	.+22     	; 0x8d46 <get_ldnumber+0x4e>
    8d30:	32 96       	adiw	r30, 0x02	; 2
    8d32:	2e 17       	cp	r18, r30
    8d34:	3f 07       	cpc	r19, r31
    8d36:	39 f4       	brne	.+14     	; 0x8d46 <get_ldnumber+0x4e>
    8d38:	90 33       	cpi	r25, 0x30	; 48
    8d3a:	29 f4       	brne	.+10     	; 0x8d46 <get_ldnumber+0x4e>
    8d3c:	2d 93       	st	X+, r18
    8d3e:	3c 93       	st	X, r19
    8d40:	80 e0       	ldi	r24, 0x00	; 0
    8d42:	90 e0       	ldi	r25, 0x00	; 0
    8d44:	02 c0       	rjmp	.+4      	; 0x8d4a <get_ldnumber+0x52>
    8d46:	8f ef       	ldi	r24, 0xFF	; 255
    8d48:	9f ef       	ldi	r25, 0xFF	; 255
    8d4a:	df 91       	pop	r29
    8d4c:	cf 91       	pop	r28
    8d4e:	08 95       	ret

00008d50 <validate>:
    8d50:	0f 93       	push	r16
    8d52:	1f 93       	push	r17
    8d54:	cf 93       	push	r28
    8d56:	df 93       	push	r29
    8d58:	ec 01       	movw	r28, r24
    8d5a:	8b 01       	movw	r16, r22
    8d5c:	89 2b       	or	r24, r25
    8d5e:	f9 f0       	breq	.+62     	; 0x8d9e <validate+0x4e>
    8d60:	e8 81       	ld	r30, Y
    8d62:	f9 81       	ldd	r31, Y+1	; 0x01
    8d64:	30 97       	sbiw	r30, 0x00	; 0
    8d66:	d9 f0       	breq	.+54     	; 0x8d9e <validate+0x4e>
    8d68:	80 81       	ld	r24, Z
    8d6a:	88 23       	and	r24, r24
    8d6c:	c1 f0       	breq	.+48     	; 0x8d9e <validate+0x4e>
    8d6e:	2a 81       	ldd	r18, Y+2	; 0x02
    8d70:	3b 81       	ldd	r19, Y+3	; 0x03
    8d72:	85 81       	ldd	r24, Z+5	; 0x05
    8d74:	96 81       	ldd	r25, Z+6	; 0x06
    8d76:	28 17       	cp	r18, r24
    8d78:	39 07       	cpc	r19, r25
    8d7a:	89 f4       	brne	.+34     	; 0x8d9e <validate+0x4e>
    8d7c:	81 81       	ldd	r24, Z+1	; 0x01
    8d7e:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <disk_status>
    8d82:	80 fd       	sbrc	r24, 0
    8d84:	0c c0       	rjmp	.+24     	; 0x8d9e <validate+0x4e>
    8d86:	28 81       	ld	r18, Y
    8d88:	39 81       	ldd	r19, Y+1	; 0x01
    8d8a:	80 e0       	ldi	r24, 0x00	; 0
    8d8c:	90 e0       	ldi	r25, 0x00	; 0
    8d8e:	f8 01       	movw	r30, r16
    8d90:	31 83       	std	Z+1, r19	; 0x01
    8d92:	20 83       	st	Z, r18
    8d94:	df 91       	pop	r29
    8d96:	cf 91       	pop	r28
    8d98:	1f 91       	pop	r17
    8d9a:	0f 91       	pop	r16
    8d9c:	08 95       	ret
    8d9e:	89 e0       	ldi	r24, 0x09	; 9
    8da0:	90 e0       	ldi	r25, 0x00	; 0
    8da2:	20 e0       	ldi	r18, 0x00	; 0
    8da4:	30 e0       	ldi	r19, 0x00	; 0
    8da6:	f3 cf       	rjmp	.-26     	; 0x8d8e <validate+0x3e>

00008da8 <get_fileinfo>:
    8da8:	a8 e0       	ldi	r26, 0x08	; 8
    8daa:	b0 e0       	ldi	r27, 0x00	; 0
    8dac:	ea ed       	ldi	r30, 0xDA	; 218
    8dae:	f6 e4       	ldi	r31, 0x46	; 70
    8db0:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    8db4:	fc 01       	movw	r30, r24
    8db6:	01 90       	ld	r0, Z+
    8db8:	f0 81       	ld	r31, Z
    8dba:	e0 2d       	mov	r30, r0
    8dbc:	f8 87       	std	Y+8, r31	; 0x08
    8dbe:	ef 83       	std	Y+7, r30	; 0x07
    8dc0:	fb 01       	movw	r30, r22
    8dc2:	16 8a       	std	Z+22, r1	; 0x16
    8dc4:	fc 01       	movw	r30, r24
    8dc6:	06 89       	ldd	r16, Z+22	; 0x16
    8dc8:	17 89       	ldd	r17, Z+23	; 0x17
    8dca:	20 8d       	ldd	r18, Z+24	; 0x18
    8dcc:	31 8d       	ldd	r19, Z+25	; 0x19
    8dce:	01 15       	cp	r16, r1
    8dd0:	11 05       	cpc	r17, r1
    8dd2:	21 05       	cpc	r18, r1
    8dd4:	31 05       	cpc	r19, r1
    8dd6:	09 f4       	brne	.+2      	; 0x8dda <get_fileinfo+0x32>
    8dd8:	0d c1       	rjmp	.+538    	; 0x8ff4 <get_fileinfo+0x24c>
    8dda:	7e 83       	std	Y+6, r23	; 0x06
    8ddc:	6d 83       	std	Y+5, r22	; 0x05
    8dde:	7c 01       	movw	r14, r24
    8de0:	80 a5       	ldd	r24, Z+40	; 0x28
    8de2:	91 a5       	ldd	r25, Z+41	; 0x29
    8de4:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8de6:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8de8:	8f 3f       	cpi	r24, 0xFF	; 255
    8dea:	9f 4f       	sbci	r25, 0xFF	; 255
    8dec:	af 4f       	sbci	r26, 0xFF	; 255
    8dee:	bf 4f       	sbci	r27, 0xFF	; 255
    8df0:	09 f4       	brne	.+2      	; 0x8df4 <get_fileinfo+0x4c>
    8df2:	6c c0       	rjmp	.+216    	; 0x8ecc <get_fileinfo+0x124>
    8df4:	a1 2c       	mov	r10, r1
    8df6:	b1 2c       	mov	r11, r1
    8df8:	c1 2c       	mov	r12, r1
    8dfa:	d1 2c       	mov	r13, r1
    8dfc:	00 e0       	ldi	r16, 0x00	; 0
    8dfe:	10 e0       	ldi	r17, 0x00	; 0
    8e00:	66 24       	eor	r6, r6
    8e02:	6a 94       	dec	r6
    8e04:	71 2c       	mov	r7, r1
    8e06:	ef 81       	ldd	r30, Y+7	; 0x07
    8e08:	f8 85       	ldd	r31, Y+8	; 0x08
    8e0a:	83 85       	ldd	r24, Z+11	; 0x0b
    8e0c:	94 85       	ldd	r25, Z+12	; 0x0c
    8e0e:	fc 01       	movw	r30, r24
    8e10:	ea 0d       	add	r30, r10
    8e12:	fb 1d       	adc	r31, r11
    8e14:	80 81       	ld	r24, Z
    8e16:	91 81       	ldd	r25, Z+1	; 0x01
    8e18:	00 97       	sbiw	r24, 0x00	; 0
    8e1a:	09 f4       	brne	.+2      	; 0x8e1e <get_fileinfo+0x76>
    8e1c:	4d c0       	rjmp	.+154    	; 0x8eb8 <get_fileinfo+0x110>
    8e1e:	c1 14       	cp	r12, r1
    8e20:	d1 04       	cpc	r13, r1
    8e22:	29 f4       	brne	.+10     	; 0x8e2e <get_fileinfo+0x86>
    8e24:	9c 01       	movw	r18, r24
    8e26:	38 5d       	subi	r19, 0xD8	; 216
    8e28:	21 15       	cp	r18, r1
    8e2a:	38 40       	sbci	r19, 0x08	; 8
    8e2c:	f0 f1       	brcs	.+124    	; 0x8eaa <get_fileinfo+0x102>
    8e2e:	43 01       	movw	r8, r6
    8e30:	80 1a       	sub	r8, r16
    8e32:	91 0a       	sbc	r9, r17
    8e34:	a6 01       	movw	r20, r12
    8e36:	60 e0       	ldi	r22, 0x00	; 0
    8e38:	70 e0       	ldi	r23, 0x00	; 0
    8e3a:	2a 01       	movw	r4, r20
    8e3c:	33 24       	eor	r3, r3
    8e3e:	22 24       	eor	r2, r2
    8e40:	a0 e0       	ldi	r26, 0x00	; 0
    8e42:	b0 e0       	ldi	r27, 0x00	; 0
    8e44:	28 2a       	or	r2, r24
    8e46:	39 2a       	or	r3, r25
    8e48:	4a 2a       	or	r4, r26
    8e4a:	5b 2a       	or	r5, r27
    8e4c:	c2 01       	movw	r24, r4
    8e4e:	b1 01       	movw	r22, r2
    8e50:	45 eb       	ldi	r20, 0xB5	; 181
    8e52:	51 e0       	ldi	r21, 0x01	; 1
    8e54:	0e 94 14 67 	call	0xce28	; 0xce28 <ff_uni2oem>
    8e58:	8f 3f       	cpi	r24, 0xFF	; 255
    8e5a:	91 05       	cpc	r25, r1
    8e5c:	89 f0       	breq	.+34     	; 0x8e80 <get_fileinfo+0xd8>
    8e5e:	80 f0       	brcs	.+32     	; 0x8e80 <get_fileinfo+0xd8>
    8e60:	22 e0       	ldi	r18, 0x02	; 2
    8e62:	82 16       	cp	r8, r18
    8e64:	91 04       	cpc	r9, r1
    8e66:	c0 f0       	brcs	.+48     	; 0x8e98 <get_fileinfo+0xf0>
    8e68:	ed 81       	ldd	r30, Y+5	; 0x05
    8e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    8e6c:	e0 0f       	add	r30, r16
    8e6e:	f1 1f       	adc	r31, r17
    8e70:	96 8b       	std	Z+22, r25	; 0x16
    8e72:	ed 81       	ldd	r30, Y+5	; 0x05
    8e74:	fe 81       	ldd	r31, Y+6	; 0x06
    8e76:	e0 0f       	add	r30, r16
    8e78:	f1 1f       	adc	r31, r17
    8e7a:	87 8b       	std	Z+23, r24	; 0x17
    8e7c:	82 e0       	ldi	r24, 0x02	; 2
    8e7e:	0d c0       	rjmp	.+26     	; 0x8e9a <get_fileinfo+0xf2>
    8e80:	00 97       	sbiw	r24, 0x00	; 0
    8e82:	51 f0       	breq	.+20     	; 0x8e98 <get_fileinfo+0xf0>
    8e84:	81 14       	cp	r8, r1
    8e86:	91 04       	cpc	r9, r1
    8e88:	39 f0       	breq	.+14     	; 0x8e98 <get_fileinfo+0xf0>
    8e8a:	ed 81       	ldd	r30, Y+5	; 0x05
    8e8c:	fe 81       	ldd	r31, Y+6	; 0x06
    8e8e:	e0 0f       	add	r30, r16
    8e90:	f1 1f       	adc	r31, r17
    8e92:	86 8b       	std	Z+22, r24	; 0x16
    8e94:	81 e0       	ldi	r24, 0x01	; 1
    8e96:	01 c0       	rjmp	.+2      	; 0x8e9a <get_fileinfo+0xf2>
    8e98:	80 e0       	ldi	r24, 0x00	; 0
    8e9a:	28 2f       	mov	r18, r24
    8e9c:	30 e0       	ldi	r19, 0x00	; 0
    8e9e:	88 23       	and	r24, r24
    8ea0:	49 f0       	breq	.+18     	; 0x8eb4 <get_fileinfo+0x10c>
    8ea2:	02 0f       	add	r16, r18
    8ea4:	13 1f       	adc	r17, r19
    8ea6:	80 e0       	ldi	r24, 0x00	; 0
    8ea8:	90 e0       	ldi	r25, 0x00	; 0
    8eaa:	32 e0       	ldi	r19, 0x02	; 2
    8eac:	a3 0e       	add	r10, r19
    8eae:	b1 1c       	adc	r11, r1
    8eb0:	6c 01       	movw	r12, r24
    8eb2:	a9 cf       	rjmp	.-174    	; 0x8e06 <get_fileinfo+0x5e>
    8eb4:	00 e0       	ldi	r16, 0x00	; 0
    8eb6:	10 e0       	ldi	r17, 0x00	; 0
    8eb8:	c1 14       	cp	r12, r1
    8eba:	d1 04       	cpc	r13, r1
    8ebc:	11 f0       	breq	.+4      	; 0x8ec2 <get_fileinfo+0x11a>
    8ebe:	00 e0       	ldi	r16, 0x00	; 0
    8ec0:	10 e0       	ldi	r17, 0x00	; 0
    8ec2:	ed 81       	ldd	r30, Y+5	; 0x05
    8ec4:	fe 81       	ldd	r31, Y+6	; 0x06
    8ec6:	e0 0f       	add	r30, r16
    8ec8:	f1 1f       	adc	r31, r17
    8eca:	16 8a       	std	Z+22, r1	; 0x16
    8ecc:	80 e0       	ldi	r24, 0x00	; 0
    8ece:	90 e0       	ldi	r25, 0x00	; 0
    8ed0:	20 e0       	ldi	r18, 0x00	; 0
    8ed2:	30 e0       	ldi	r19, 0x00	; 0
    8ed4:	6e e2       	ldi	r22, 0x2E	; 46
    8ed6:	a9 01       	movw	r20, r18
    8ed8:	4f 5f       	subi	r20, 0xFF	; 255
    8eda:	5f 4f       	sbci	r21, 0xFF	; 255
    8edc:	f7 01       	movw	r30, r14
    8ede:	a2 8d       	ldd	r26, Z+26	; 0x1a
    8ee0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    8ee2:	fd 01       	movw	r30, r26
    8ee4:	e2 0f       	add	r30, r18
    8ee6:	f3 1f       	adc	r31, r19
    8ee8:	20 81       	ld	r18, Z
    8eea:	30 e0       	ldi	r19, 0x00	; 0
    8eec:	20 32       	cpi	r18, 0x20	; 32
    8eee:	31 05       	cpc	r19, r1
    8ef0:	b9 f0       	breq	.+46     	; 0x8f20 <get_fileinfo+0x178>
    8ef2:	25 30       	cpi	r18, 0x05	; 5
    8ef4:	31 05       	cpc	r19, r1
    8ef6:	11 f4       	brne	.+4      	; 0x8efc <get_fileinfo+0x154>
    8ef8:	25 ee       	ldi	r18, 0xE5	; 229
    8efa:	30 e0       	ldi	r19, 0x00	; 0
    8efc:	49 30       	cpi	r20, 0x09	; 9
    8efe:	51 05       	cpc	r21, r1
    8f00:	49 f4       	brne	.+18     	; 0x8f14 <get_fileinfo+0x16c>
    8f02:	8c 30       	cpi	r24, 0x0C	; 12
    8f04:	91 05       	cpc	r25, r1
    8f06:	30 f4       	brcc	.+12     	; 0x8f14 <get_fileinfo+0x16c>
    8f08:	ed 81       	ldd	r30, Y+5	; 0x05
    8f0a:	fe 81       	ldd	r31, Y+6	; 0x06
    8f0c:	e8 0f       	add	r30, r24
    8f0e:	f9 1f       	adc	r31, r25
    8f10:	61 87       	std	Z+9, r22	; 0x09
    8f12:	01 96       	adiw	r24, 0x01	; 1
    8f14:	ed 81       	ldd	r30, Y+5	; 0x05
    8f16:	fe 81       	ldd	r31, Y+6	; 0x06
    8f18:	e8 0f       	add	r30, r24
    8f1a:	f9 1f       	adc	r31, r25
    8f1c:	21 87       	std	Z+9, r18	; 0x09
    8f1e:	01 96       	adiw	r24, 0x01	; 1
    8f20:	9a 01       	movw	r18, r20
    8f22:	4b 30       	cpi	r20, 0x0B	; 11
    8f24:	51 05       	cpc	r21, r1
    8f26:	b9 f6       	brne	.-82     	; 0x8ed6 <get_fileinfo+0x12e>
    8f28:	ed 81       	ldd	r30, Y+5	; 0x05
    8f2a:	fe 81       	ldd	r31, Y+6	; 0x06
    8f2c:	e8 0f       	add	r30, r24
    8f2e:	f9 1f       	adc	r31, r25
    8f30:	11 86       	std	Z+9, r1	; 0x09
    8f32:	ed 81       	ldd	r30, Y+5	; 0x05
    8f34:	fe 81       	ldd	r31, Y+6	; 0x06
    8f36:	26 89       	ldd	r18, Z+22	; 0x16
    8f38:	21 11       	cpse	r18, r1
    8f3a:	3a c0       	rjmp	.+116    	; 0x8fb0 <get_fileinfo+0x208>
    8f3c:	89 2b       	or	r24, r25
    8f3e:	31 f0       	breq	.+12     	; 0x8f4c <get_fileinfo+0x1a4>
    8f40:	df 01       	movw	r26, r30
    8f42:	19 96       	adiw	r26, 0x09	; 9
    8f44:	58 e0       	ldi	r21, 0x08	; 8
    8f46:	20 e0       	ldi	r18, 0x00	; 0
    8f48:	30 e0       	ldi	r19, 0x00	; 0
    8f4a:	16 c0       	rjmp	.+44     	; 0x8f78 <get_fileinfo+0x1d0>
    8f4c:	8f e3       	ldi	r24, 0x3F	; 63
    8f4e:	ed 81       	ldd	r30, Y+5	; 0x05
    8f50:	fe 81       	ldd	r31, Y+6	; 0x06
    8f52:	86 8b       	std	Z+22, r24	; 0x16
    8f54:	21 e0       	ldi	r18, 0x01	; 1
    8f56:	30 e0       	ldi	r19, 0x00	; 0
    8f58:	1c c0       	rjmp	.+56     	; 0x8f92 <get_fileinfo+0x1ea>
    8f5a:	90 e0       	ldi	r25, 0x00	; 0
    8f5c:	8e 32       	cpi	r24, 0x2E	; 46
    8f5e:	91 05       	cpc	r25, r1
    8f60:	09 f4       	brne	.+2      	; 0x8f64 <get_fileinfo+0x1bc>
    8f62:	50 e1       	ldi	r21, 0x10	; 16
    8f64:	bc 01       	movw	r22, r24
    8f66:	61 54       	subi	r22, 0x41	; 65
    8f68:	71 09       	sbc	r23, r1
    8f6a:	6a 31       	cpi	r22, 0x1A	; 26
    8f6c:	71 05       	cpc	r23, r1
    8f6e:	40 f0       	brcs	.+16     	; 0x8f80 <get_fileinfo+0x1d8>
    8f70:	fd 01       	movw	r30, r26
    8f72:	84 87       	std	Z+12, r24	; 0x0c
    8f74:	2f 5f       	subi	r18, 0xFF	; 255
    8f76:	3f 4f       	sbci	r19, 0xFF	; 255
    8f78:	8d 91       	ld	r24, X+
    8f7a:	81 11       	cpse	r24, r1
    8f7c:	ee cf       	rjmp	.-36     	; 0x8f5a <get_fileinfo+0x1b2>
    8f7e:	09 c0       	rjmp	.+18     	; 0x8f92 <get_fileinfo+0x1ea>
    8f80:	f7 01       	movw	r30, r14
    8f82:	62 8d       	ldd	r22, Z+26	; 0x1a
    8f84:	73 8d       	ldd	r23, Z+27	; 0x1b
    8f86:	fb 01       	movw	r30, r22
    8f88:	44 85       	ldd	r20, Z+12	; 0x0c
    8f8a:	45 23       	and	r20, r21
    8f8c:	89 f3       	breq	.-30     	; 0x8f70 <get_fileinfo+0x1c8>
    8f8e:	80 96       	adiw	r24, 0x20	; 32
    8f90:	ef cf       	rjmp	.-34     	; 0x8f70 <get_fileinfo+0x1c8>
    8f92:	ed 81       	ldd	r30, Y+5	; 0x05
    8f94:	fe 81       	ldd	r31, Y+6	; 0x06
    8f96:	e2 0f       	add	r30, r18
    8f98:	f3 1f       	adc	r31, r19
    8f9a:	16 8a       	std	Z+22, r1	; 0x16
    8f9c:	f7 01       	movw	r30, r14
    8f9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    8fa0:	93 8d       	ldd	r25, Z+27	; 0x1b
    8fa2:	fc 01       	movw	r30, r24
    8fa4:	84 85       	ldd	r24, Z+12	; 0x0c
    8fa6:	81 11       	cpse	r24, r1
    8fa8:	03 c0       	rjmp	.+6      	; 0x8fb0 <get_fileinfo+0x208>
    8faa:	ed 81       	ldd	r30, Y+5	; 0x05
    8fac:	fe 81       	ldd	r31, Y+6	; 0x06
    8fae:	11 86       	std	Z+9, r1	; 0x09
    8fb0:	f7 01       	movw	r30, r14
    8fb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    8fb4:	93 8d       	ldd	r25, Z+27	; 0x1b
    8fb6:	fc 01       	movw	r30, r24
    8fb8:	83 85       	ldd	r24, Z+11	; 0x0b
    8fba:	ed 81       	ldd	r30, Y+5	; 0x05
    8fbc:	fe 81       	ldd	r31, Y+6	; 0x06
    8fbe:	80 87       	std	Z+8, r24	; 0x08
    8fc0:	f7 01       	movw	r30, r14
    8fc2:	02 8d       	ldd	r16, Z+26	; 0x1a
    8fc4:	13 8d       	ldd	r17, Z+27	; 0x1b
    8fc6:	c8 01       	movw	r24, r16
    8fc8:	4c 96       	adiw	r24, 0x1c	; 28
    8fca:	f0 dd       	rcall	.-1056   	; 0x8bac <ld_dword>
    8fcc:	ed 81       	ldd	r30, Y+5	; 0x05
    8fce:	fe 81       	ldd	r31, Y+6	; 0x06
    8fd0:	60 83       	st	Z, r22
    8fd2:	71 83       	std	Z+1, r23	; 0x01
    8fd4:	82 83       	std	Z+2, r24	; 0x02
    8fd6:	93 83       	std	Z+3, r25	; 0x03
    8fd8:	f8 01       	movw	r30, r16
    8fda:	86 89       	ldd	r24, Z+22	; 0x16
    8fdc:	97 89       	ldd	r25, Z+23	; 0x17
    8fde:	ed 81       	ldd	r30, Y+5	; 0x05
    8fe0:	fe 81       	ldd	r31, Y+6	; 0x06
    8fe2:	97 83       	std	Z+7, r25	; 0x07
    8fe4:	86 83       	std	Z+6, r24	; 0x06
    8fe6:	f8 01       	movw	r30, r16
    8fe8:	80 8d       	ldd	r24, Z+24	; 0x18
    8fea:	91 8d       	ldd	r25, Z+25	; 0x19
    8fec:	ed 81       	ldd	r30, Y+5	; 0x05
    8fee:	fe 81       	ldd	r31, Y+6	; 0x06
    8ff0:	95 83       	std	Z+5, r25	; 0x05
    8ff2:	84 83       	std	Z+4, r24	; 0x04
    8ff4:	28 96       	adiw	r28, 0x08	; 8
    8ff6:	e2 e1       	ldi	r30, 0x12	; 18
    8ff8:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00008ffc <mem_cpy.part.0>:
    8ffc:	fb 01       	movw	r30, r22
    8ffe:	48 0f       	add	r20, r24
    9000:	59 1f       	adc	r21, r25
    9002:	21 91       	ld	r18, Z+
    9004:	dc 01       	movw	r26, r24
    9006:	2d 93       	st	X+, r18
    9008:	cd 01       	movw	r24, r26
    900a:	a4 17       	cp	r26, r20
    900c:	b5 07       	cpc	r27, r21
    900e:	c9 f7       	brne	.-14     	; 0x9002 <mem_cpy.part.0+0x6>
    9010:	08 95       	ret

00009012 <ld_clust.isra.3>:
    9012:	fb 01       	movw	r30, r22
    9014:	42 8d       	ldd	r20, Z+26	; 0x1a
    9016:	53 8d       	ldd	r21, Z+27	; 0x1b
    9018:	60 e0       	ldi	r22, 0x00	; 0
    901a:	70 e0       	ldi	r23, 0x00	; 0
    901c:	83 30       	cpi	r24, 0x03	; 3
    901e:	59 f4       	brne	.+22     	; 0x9036 <ld_clust.isra.3+0x24>
    9020:	84 89       	ldd	r24, Z+20	; 0x14
    9022:	95 89       	ldd	r25, Z+21	; 0x15
    9024:	a0 e0       	ldi	r26, 0x00	; 0
    9026:	b0 e0       	ldi	r27, 0x00	; 0
    9028:	dc 01       	movw	r26, r24
    902a:	99 27       	eor	r25, r25
    902c:	88 27       	eor	r24, r24
    902e:	48 2b       	or	r20, r24
    9030:	59 2b       	or	r21, r25
    9032:	6a 2b       	or	r22, r26
    9034:	7b 2b       	or	r23, r27
    9036:	cb 01       	movw	r24, r22
    9038:	ba 01       	movw	r22, r20
    903a:	08 95       	ret

0000903c <st_clust.isra.4>:
    903c:	fb 01       	movw	r30, r22
    903e:	22 8f       	std	Z+26, r18	; 0x1a
    9040:	33 8f       	std	Z+27, r19	; 0x1b
    9042:	dc 01       	movw	r26, r24
    9044:	8c 91       	ld	r24, X
    9046:	83 30       	cpi	r24, 0x03	; 3
    9048:	29 f4       	brne	.+10     	; 0x9054 <st_clust.isra.4+0x18>
    904a:	ca 01       	movw	r24, r20
    904c:	aa 27       	eor	r26, r26
    904e:	bb 27       	eor	r27, r27
    9050:	84 8b       	std	Z+20, r24	; 0x14
    9052:	95 8b       	std	Z+21, r25	; 0x15
    9054:	08 95       	ret

00009056 <sync_window.part.5>:
    9056:	8f 92       	push	r8
    9058:	9f 92       	push	r9
    905a:	af 92       	push	r10
    905c:	bf 92       	push	r11
    905e:	ef 92       	push	r14
    9060:	ff 92       	push	r15
    9062:	0f 93       	push	r16
    9064:	1f 93       	push	r17
    9066:	cf 93       	push	r28
    9068:	df 93       	push	r29
    906a:	ec 01       	movw	r28, r24
    906c:	7c 01       	movw	r14, r24
    906e:	45 e3       	ldi	r20, 0x35	; 53
    9070:	e4 0e       	add	r14, r20
    9072:	f1 1c       	adc	r15, r1
    9074:	29 a9       	ldd	r18, Y+49	; 0x31
    9076:	3a a9       	ldd	r19, Y+50	; 0x32
    9078:	4b a9       	ldd	r20, Y+51	; 0x33
    907a:	5c a9       	ldd	r21, Y+52	; 0x34
    907c:	01 e0       	ldi	r16, 0x01	; 1
    907e:	10 e0       	ldi	r17, 0x00	; 0
    9080:	b7 01       	movw	r22, r14
    9082:	89 81       	ldd	r24, Y+1	; 0x01
    9084:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    9088:	89 2b       	or	r24, r25
    908a:	41 f5       	brne	.+80     	; 0x90dc <sync_window.part.5+0x86>
    908c:	1b 82       	std	Y+3, r1	; 0x03
    908e:	09 a9       	ldd	r16, Y+49	; 0x31
    9090:	1a a9       	ldd	r17, Y+50	; 0x32
    9092:	2b a9       	ldd	r18, Y+51	; 0x33
    9094:	3c a9       	ldd	r19, Y+52	; 0x34
    9096:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9098:	9e 8d       	ldd	r25, Y+30	; 0x1e
    909a:	af 8d       	ldd	r26, Y+31	; 0x1f
    909c:	b8 a1       	ldd	r27, Y+32	; 0x20
    909e:	8d a0       	ldd	r8, Y+37	; 0x25
    90a0:	9e a0       	ldd	r9, Y+38	; 0x26
    90a2:	af a0       	ldd	r10, Y+39	; 0x27
    90a4:	b8 a4       	ldd	r11, Y+40	; 0x28
    90a6:	b9 01       	movw	r22, r18
    90a8:	a8 01       	movw	r20, r16
    90aa:	48 19       	sub	r20, r8
    90ac:	59 09       	sbc	r21, r9
    90ae:	6a 09       	sbc	r22, r10
    90b0:	7b 09       	sbc	r23, r11
    90b2:	48 17       	cp	r20, r24
    90b4:	59 07       	cpc	r21, r25
    90b6:	6a 07       	cpc	r22, r26
    90b8:	7b 07       	cpc	r23, r27
    90ba:	98 f4       	brcc	.+38     	; 0x90e2 <sync_window.part.5+0x8c>
    90bc:	6a 81       	ldd	r22, Y+2	; 0x02
    90be:	62 30       	cpi	r22, 0x02	; 2
    90c0:	81 f4       	brne	.+32     	; 0x90e2 <sync_window.part.5+0x8c>
    90c2:	a9 01       	movw	r20, r18
    90c4:	98 01       	movw	r18, r16
    90c6:	28 0f       	add	r18, r24
    90c8:	39 1f       	adc	r19, r25
    90ca:	4a 1f       	adc	r20, r26
    90cc:	5b 1f       	adc	r21, r27
    90ce:	01 e0       	ldi	r16, 0x01	; 1
    90d0:	10 e0       	ldi	r17, 0x00	; 0
    90d2:	b7 01       	movw	r22, r14
    90d4:	89 81       	ldd	r24, Y+1	; 0x01
    90d6:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    90da:	03 c0       	rjmp	.+6      	; 0x90e2 <sync_window.part.5+0x8c>
    90dc:	81 e0       	ldi	r24, 0x01	; 1
    90de:	90 e0       	ldi	r25, 0x00	; 0
    90e0:	02 c0       	rjmp	.+4      	; 0x90e6 <sync_window.part.5+0x90>
    90e2:	80 e0       	ldi	r24, 0x00	; 0
    90e4:	90 e0       	ldi	r25, 0x00	; 0
    90e6:	df 91       	pop	r29
    90e8:	cf 91       	pop	r28
    90ea:	1f 91       	pop	r17
    90ec:	0f 91       	pop	r16
    90ee:	ff 90       	pop	r15
    90f0:	ef 90       	pop	r14
    90f2:	bf 90       	pop	r11
    90f4:	af 90       	pop	r10
    90f6:	9f 90       	pop	r9
    90f8:	8f 90       	pop	r8
    90fa:	08 95       	ret

000090fc <sync_fs>:
    90fc:	ef 92       	push	r14
    90fe:	ff 92       	push	r15
    9100:	0f 93       	push	r16
    9102:	1f 93       	push	r17
    9104:	cf 93       	push	r28
    9106:	df 93       	push	r29
    9108:	ec 01       	movw	r28, r24
    910a:	8b 81       	ldd	r24, Y+3	; 0x03
    910c:	81 11       	cpse	r24, r1
    910e:	05 c0       	rjmp	.+10     	; 0x911a <sync_fs+0x1e>
    9110:	88 81       	ld	r24, Y
    9112:	83 30       	cpi	r24, 0x03	; 3
    9114:	09 f0       	breq	.+2      	; 0x9118 <sync_fs+0x1c>
    9116:	52 c0       	rjmp	.+164    	; 0x91bc <sync_fs+0xc0>
    9118:	06 c0       	rjmp	.+12     	; 0x9126 <sync_fs+0x2a>
    911a:	ce 01       	movw	r24, r28
    911c:	9c df       	rcall	.-200    	; 0x9056 <sync_window.part.5>
    911e:	00 97       	sbiw	r24, 0x00	; 0
    9120:	09 f0       	breq	.+2      	; 0x9124 <sync_fs+0x28>
    9122:	59 c0       	rjmp	.+178    	; 0x91d6 <sync_fs+0xda>
    9124:	f5 cf       	rjmp	.-22     	; 0x9110 <sync_fs+0x14>
    9126:	8c 81       	ldd	r24, Y+4	; 0x04
    9128:	81 30       	cpi	r24, 0x01	; 1
    912a:	09 f0       	breq	.+2      	; 0x912e <sync_fs+0x32>
    912c:	47 c0       	rjmp	.+142    	; 0x91bc <sync_fs+0xc0>
    912e:	40 e0       	ldi	r20, 0x00	; 0
    9130:	52 e0       	ldi	r21, 0x02	; 2
    9132:	60 e0       	ldi	r22, 0x00	; 0
    9134:	70 e0       	ldi	r23, 0x00	; 0
    9136:	7e 01       	movw	r14, r28
    9138:	85 e3       	ldi	r24, 0x35	; 53
    913a:	e8 0e       	add	r14, r24
    913c:	f1 1c       	adc	r15, r1
    913e:	c7 01       	movw	r24, r14
    9140:	50 dd       	rcall	.-1376   	; 0x8be2 <mem_set>
    9142:	85 e5       	ldi	r24, 0x55	; 85
    9144:	fe 01       	movw	r30, r28
    9146:	ed 5c       	subi	r30, 0xCD	; 205
    9148:	fd 4f       	sbci	r31, 0xFD	; 253
    914a:	80 83       	st	Z, r24
    914c:	8a ea       	ldi	r24, 0xAA	; 170
    914e:	31 96       	adiw	r30, 0x01	; 1
    9150:	80 83       	st	Z, r24
    9152:	82 e5       	ldi	r24, 0x52	; 82
    9154:	8d ab       	std	Y+53, r24	; 0x35
    9156:	8e ab       	std	Y+54, r24	; 0x36
    9158:	81 e6       	ldi	r24, 0x61	; 97
    915a:	8f ab       	std	Y+55, r24	; 0x37
    915c:	91 e4       	ldi	r25, 0x41	; 65
    915e:	98 af       	std	Y+56, r25	; 0x38
    9160:	22 e7       	ldi	r18, 0x72	; 114
    9162:	7b 97       	sbiw	r30, 0x1b	; 27
    9164:	20 83       	st	Z, r18
    9166:	31 96       	adiw	r30, 0x01	; 1
    9168:	20 83       	st	Z, r18
    916a:	31 96       	adiw	r30, 0x01	; 1
    916c:	90 83       	st	Z, r25
    916e:	31 96       	adiw	r30, 0x01	; 1
    9170:	80 83       	st	Z, r24
    9172:	49 89       	ldd	r20, Y+17	; 0x11
    9174:	5a 89       	ldd	r21, Y+18	; 0x12
    9176:	6b 89       	ldd	r22, Y+19	; 0x13
    9178:	7c 89       	ldd	r23, Y+20	; 0x14
    917a:	ce 01       	movw	r24, r28
    917c:	83 5e       	subi	r24, 0xE3	; 227
    917e:	9d 4f       	sbci	r25, 0xFD	; 253
    9180:	2a dd       	rcall	.-1452   	; 0x8bd6 <st_dword>
    9182:	4d 85       	ldd	r20, Y+13	; 0x0d
    9184:	5e 85       	ldd	r21, Y+14	; 0x0e
    9186:	6f 85       	ldd	r22, Y+15	; 0x0f
    9188:	78 89       	ldd	r23, Y+16	; 0x10
    918a:	ce 01       	movw	r24, r28
    918c:	8f 5d       	subi	r24, 0xDF	; 223
    918e:	9d 4f       	sbci	r25, 0xFD	; 253
    9190:	22 dd       	rcall	.-1468   	; 0x8bd6 <st_dword>
    9192:	89 a1       	ldd	r24, Y+33	; 0x21
    9194:	9a a1       	ldd	r25, Y+34	; 0x22
    9196:	ab a1       	ldd	r26, Y+35	; 0x23
    9198:	bc a1       	ldd	r27, Y+36	; 0x24
    919a:	9c 01       	movw	r18, r24
    919c:	ad 01       	movw	r20, r26
    919e:	2f 5f       	subi	r18, 0xFF	; 255
    91a0:	3f 4f       	sbci	r19, 0xFF	; 255
    91a2:	4f 4f       	sbci	r20, 0xFF	; 255
    91a4:	5f 4f       	sbci	r21, 0xFF	; 255
    91a6:	29 ab       	std	Y+49, r18	; 0x31
    91a8:	3a ab       	std	Y+50, r19	; 0x32
    91aa:	4b ab       	std	Y+51, r20	; 0x33
    91ac:	5c ab       	std	Y+52, r21	; 0x34
    91ae:	01 e0       	ldi	r16, 0x01	; 1
    91b0:	10 e0       	ldi	r17, 0x00	; 0
    91b2:	b7 01       	movw	r22, r14
    91b4:	89 81       	ldd	r24, Y+1	; 0x01
    91b6:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    91ba:	1c 82       	std	Y+4, r1	; 0x04
    91bc:	40 e0       	ldi	r20, 0x00	; 0
    91be:	50 e0       	ldi	r21, 0x00	; 0
    91c0:	60 e0       	ldi	r22, 0x00	; 0
    91c2:	89 81       	ldd	r24, Y+1	; 0x01
    91c4:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <disk_ioctl>
    91c8:	31 e0       	ldi	r19, 0x01	; 1
    91ca:	20 e0       	ldi	r18, 0x00	; 0
    91cc:	89 2b       	or	r24, r25
    91ce:	09 f4       	brne	.+2      	; 0x91d2 <sync_fs+0xd6>
    91d0:	30 e0       	ldi	r19, 0x00	; 0
    91d2:	83 2f       	mov	r24, r19
    91d4:	92 2f       	mov	r25, r18
    91d6:	cd b7       	in	r28, 0x3d	; 61
    91d8:	de b7       	in	r29, 0x3e	; 62
    91da:	e6 e0       	ldi	r30, 0x06	; 6
    91dc:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

000091e0 <dir_clear>:
    91e0:	4f 92       	push	r4
    91e2:	5f 92       	push	r5
    91e4:	6f 92       	push	r6
    91e6:	7f 92       	push	r7
    91e8:	af 92       	push	r10
    91ea:	bf 92       	push	r11
    91ec:	cf 92       	push	r12
    91ee:	df 92       	push	r13
    91f0:	ef 92       	push	r14
    91f2:	ff 92       	push	r15
    91f4:	0f 93       	push	r16
    91f6:	1f 93       	push	r17
    91f8:	cf 93       	push	r28
    91fa:	df 93       	push	r29
    91fc:	ec 01       	movw	r28, r24
    91fe:	6a 01       	movw	r12, r20
    9200:	7b 01       	movw	r14, r22
    9202:	8b 81       	ldd	r24, Y+3	; 0x03
    9204:	81 11       	cpse	r24, r1
    9206:	28 c0       	rjmp	.+80     	; 0x9258 <dir_clear+0x78>
    9208:	b7 01       	movw	r22, r14
    920a:	a6 01       	movw	r20, r12
    920c:	ce 01       	movw	r24, r28
    920e:	01 dd       	rcall	.-1534   	; 0x8c12 <clst2sect>
    9210:	2b 01       	movw	r4, r22
    9212:	3c 01       	movw	r6, r24
    9214:	69 ab       	std	Y+49, r22	; 0x31
    9216:	7a ab       	std	Y+50, r23	; 0x32
    9218:	8b ab       	std	Y+51, r24	; 0x33
    921a:	9c ab       	std	Y+52, r25	; 0x34
    921c:	5e 01       	movw	r10, r28
    921e:	25 e3       	ldi	r18, 0x35	; 53
    9220:	a2 0e       	add	r10, r18
    9222:	b1 1c       	adc	r11, r1
    9224:	40 e0       	ldi	r20, 0x00	; 0
    9226:	52 e0       	ldi	r21, 0x02	; 2
    9228:	60 e0       	ldi	r22, 0x00	; 0
    922a:	70 e0       	ldi	r23, 0x00	; 0
    922c:	c5 01       	movw	r24, r10
    922e:	d9 dc       	rcall	.-1614   	; 0x8be2 <mem_set>
    9230:	09 85       	ldd	r16, Y+9	; 0x09
    9232:	1a 85       	ldd	r17, Y+10	; 0x0a
    9234:	c8 01       	movw	r24, r16
    9236:	a0 e0       	ldi	r26, 0x00	; 0
    9238:	b0 e0       	ldi	r27, 0x00	; 0
    923a:	39 e0       	ldi	r19, 0x09	; 9
    923c:	88 0f       	add	r24, r24
    923e:	99 1f       	adc	r25, r25
    9240:	aa 1f       	adc	r26, r26
    9242:	bb 1f       	adc	r27, r27
    9244:	3a 95       	dec	r19
    9246:	d1 f7       	brne	.-12     	; 0x923c <dir_clear+0x5c>
    9248:	81 15       	cp	r24, r1
    924a:	90 48       	sbci	r25, 0x80	; 128
    924c:	a1 05       	cpc	r26, r1
    924e:	b1 05       	cpc	r27, r1
    9250:	50 f0       	brcs	.+20     	; 0x9266 <dir_clear+0x86>
    9252:	00 e0       	ldi	r16, 0x00	; 0
    9254:	10 e8       	ldi	r17, 0x80	; 128
    9256:	14 c0       	rjmp	.+40     	; 0x9280 <dir_clear+0xa0>
    9258:	ce 01       	movw	r24, r28
    925a:	fd de       	rcall	.-518    	; 0x9056 <sync_window.part.5>
    925c:	89 2b       	or	r24, r25
    925e:	a1 f2       	breq	.-88     	; 0x9208 <dir_clear+0x28>
    9260:	81 e0       	ldi	r24, 0x01	; 1
    9262:	90 e0       	ldi	r25, 0x00	; 0
    9264:	56 c0       	rjmp	.+172    	; 0x9312 <dir_clear+0x132>
    9266:	10 2f       	mov	r17, r16
    9268:	00 27       	eor	r16, r16
    926a:	11 0f       	add	r17, r17
    926c:	09 c0       	rjmp	.+18     	; 0x9280 <dir_clear+0xa0>
    926e:	c8 01       	movw	r24, r16
    9270:	0e 94 0e 67 	call	0xce1c	; 0xce1c <ff_memalloc>
    9274:	6c 01       	movw	r12, r24
    9276:	00 97       	sbiw	r24, 0x00	; 0
    9278:	09 f0       	breq	.+2      	; 0x927c <dir_clear+0x9c>
    927a:	40 c0       	rjmp	.+128    	; 0x92fc <dir_clear+0x11c>
    927c:	16 95       	lsr	r17
    927e:	07 95       	ror	r16
    9280:	01 30       	cpi	r16, 0x01	; 1
    9282:	82 e0       	ldi	r24, 0x02	; 2
    9284:	18 07       	cpc	r17, r24
    9286:	98 f7       	brcc	.-26     	; 0x926e <dir_clear+0x8e>
    9288:	e1 2c       	mov	r14, r1
    928a:	f1 2c       	mov	r15, r1
    928c:	11 c0       	rjmp	.+34     	; 0x92b0 <dir_clear+0xd0>
    928e:	01 e0       	ldi	r16, 0x01	; 1
    9290:	10 e0       	ldi	r17, 0x00	; 0
    9292:	a3 01       	movw	r20, r6
    9294:	92 01       	movw	r18, r4
    9296:	2e 0d       	add	r18, r14
    9298:	3f 1d       	adc	r19, r15
    929a:	41 1d       	adc	r20, r1
    929c:	51 1d       	adc	r21, r1
    929e:	b5 01       	movw	r22, r10
    92a0:	89 81       	ldd	r24, Y+1	; 0x01
    92a2:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    92a6:	89 2b       	or	r24, r25
    92a8:	01 f5       	brne	.+64     	; 0x92ea <dir_clear+0x10a>
    92aa:	2f ef       	ldi	r18, 0xFF	; 255
    92ac:	e2 1a       	sub	r14, r18
    92ae:	f2 0a       	sbc	r15, r18
    92b0:	89 85       	ldd	r24, Y+9	; 0x09
    92b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    92b4:	e8 16       	cp	r14, r24
    92b6:	f9 06       	cpc	r15, r25
    92b8:	50 f3       	brcs	.-44     	; 0x928e <dir_clear+0xae>
    92ba:	17 c0       	rjmp	.+46     	; 0x92ea <dir_clear+0x10a>
    92bc:	85 01       	movw	r16, r10
    92be:	a3 01       	movw	r20, r6
    92c0:	92 01       	movw	r18, r4
    92c2:	2e 0d       	add	r18, r14
    92c4:	3f 1d       	adc	r19, r15
    92c6:	41 1d       	adc	r20, r1
    92c8:	51 1d       	adc	r21, r1
    92ca:	b6 01       	movw	r22, r12
    92cc:	89 81       	ldd	r24, Y+1	; 0x01
    92ce:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    92d2:	89 2b       	or	r24, r25
    92d4:	39 f4       	brne	.+14     	; 0x92e4 <dir_clear+0x104>
    92d6:	ea 0c       	add	r14, r10
    92d8:	fb 1c       	adc	r15, r11
    92da:	89 85       	ldd	r24, Y+9	; 0x09
    92dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    92de:	e8 16       	cp	r14, r24
    92e0:	f9 06       	cpc	r15, r25
    92e2:	60 f3       	brcs	.-40     	; 0x92bc <dir_clear+0xdc>
    92e4:	c6 01       	movw	r24, r12
    92e6:	0e 94 11 67 	call	0xce22	; 0xce22 <ff_memfree>
    92ea:	81 e0       	ldi	r24, 0x01	; 1
    92ec:	90 e0       	ldi	r25, 0x00	; 0
    92ee:	29 85       	ldd	r18, Y+9	; 0x09
    92f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    92f2:	2e 15       	cp	r18, r14
    92f4:	3f 05       	cpc	r19, r15
    92f6:	69 f4       	brne	.+26     	; 0x9312 <dir_clear+0x132>
    92f8:	80 e0       	ldi	r24, 0x00	; 0
    92fa:	0b c0       	rjmp	.+22     	; 0x9312 <dir_clear+0x132>
    92fc:	a8 01       	movw	r20, r16
    92fe:	60 e0       	ldi	r22, 0x00	; 0
    9300:	70 e0       	ldi	r23, 0x00	; 0
    9302:	6f dc       	rcall	.-1826   	; 0x8be2 <mem_set>
    9304:	58 01       	movw	r10, r16
    9306:	ab 2c       	mov	r10, r11
    9308:	bb 24       	eor	r11, r11
    930a:	a6 94       	lsr	r10
    930c:	e1 2c       	mov	r14, r1
    930e:	f1 2c       	mov	r15, r1
    9310:	e4 cf       	rjmp	.-56     	; 0x92da <dir_clear+0xfa>
    9312:	df 91       	pop	r29
    9314:	cf 91       	pop	r28
    9316:	1f 91       	pop	r17
    9318:	0f 91       	pop	r16
    931a:	ff 90       	pop	r15
    931c:	ef 90       	pop	r14
    931e:	df 90       	pop	r13
    9320:	cf 90       	pop	r12
    9322:	bf 90       	pop	r11
    9324:	af 90       	pop	r10
    9326:	7f 90       	pop	r7
    9328:	6f 90       	pop	r6
    932a:	5f 90       	pop	r5
    932c:	4f 90       	pop	r4
    932e:	08 95       	ret

00009330 <move_window>:
    9330:	a0 e0       	ldi	r26, 0x00	; 0
    9332:	b0 e0       	ldi	r27, 0x00	; 0
    9334:	ee e9       	ldi	r30, 0x9E	; 158
    9336:	f9 e4       	ldi	r31, 0x49	; 73
    9338:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    933c:	ec 01       	movw	r28, r24
    933e:	6a 01       	movw	r12, r20
    9340:	7b 01       	movw	r14, r22
    9342:	89 a9       	ldd	r24, Y+49	; 0x31
    9344:	9a a9       	ldd	r25, Y+50	; 0x32
    9346:	ab a9       	ldd	r26, Y+51	; 0x33
    9348:	bc a9       	ldd	r27, Y+52	; 0x34
    934a:	84 17       	cp	r24, r20
    934c:	95 07       	cpc	r25, r21
    934e:	a6 07       	cpc	r26, r22
    9350:	b7 07       	cpc	r27, r23
    9352:	11 f1       	breq	.+68     	; 0x9398 <move_window+0x68>
    9354:	8b 81       	ldd	r24, Y+3	; 0x03
    9356:	81 11       	cpse	r24, r1
    9358:	13 c0       	rjmp	.+38     	; 0x9380 <move_window+0x50>
    935a:	01 e0       	ldi	r16, 0x01	; 1
    935c:	10 e0       	ldi	r17, 0x00	; 0
    935e:	a7 01       	movw	r20, r14
    9360:	96 01       	movw	r18, r12
    9362:	be 01       	movw	r22, r28
    9364:	6b 5c       	subi	r22, 0xCB	; 203
    9366:	7f 4f       	sbci	r23, 0xFF	; 255
    9368:	89 81       	ldd	r24, Y+1	; 0x01
    936a:	0e 94 ca 67 	call	0xcf94	; 0xcf94 <disk_read>
    936e:	89 2b       	or	r24, r25
    9370:	61 f0       	breq	.+24     	; 0x938a <move_window+0x5a>
    9372:	81 e0       	ldi	r24, 0x01	; 1
    9374:	90 e0       	ldi	r25, 0x00	; 0
    9376:	cc 24       	eor	r12, r12
    9378:	ca 94       	dec	r12
    937a:	dc 2c       	mov	r13, r12
    937c:	76 01       	movw	r14, r12
    937e:	07 c0       	rjmp	.+14     	; 0x938e <move_window+0x5e>
    9380:	ce 01       	movw	r24, r28
    9382:	69 de       	rcall	.-814    	; 0x9056 <sync_window.part.5>
    9384:	00 97       	sbiw	r24, 0x00	; 0
    9386:	51 f4       	brne	.+20     	; 0x939c <move_window+0x6c>
    9388:	e8 cf       	rjmp	.-48     	; 0x935a <move_window+0x2a>
    938a:	80 e0       	ldi	r24, 0x00	; 0
    938c:	90 e0       	ldi	r25, 0x00	; 0
    938e:	c9 aa       	std	Y+49, r12	; 0x31
    9390:	da aa       	std	Y+50, r13	; 0x32
    9392:	eb aa       	std	Y+51, r14	; 0x33
    9394:	fc aa       	std	Y+52, r15	; 0x34
    9396:	02 c0       	rjmp	.+4      	; 0x939c <move_window+0x6c>
    9398:	80 e0       	ldi	r24, 0x00	; 0
    939a:	90 e0       	ldi	r25, 0x00	; 0
    939c:	cd b7       	in	r28, 0x3d	; 61
    939e:	de b7       	in	r29, 0x3e	; 62
    93a0:	e8 e0       	ldi	r30, 0x08	; 8
    93a2:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

000093a6 <check_fs>:
    93a6:	cf 93       	push	r28
    93a8:	df 93       	push	r29
    93aa:	ec 01       	movw	r28, r24
    93ac:	1b 82       	std	Y+3, r1	; 0x03
    93ae:	8f ef       	ldi	r24, 0xFF	; 255
    93b0:	9f ef       	ldi	r25, 0xFF	; 255
    93b2:	dc 01       	movw	r26, r24
    93b4:	89 ab       	std	Y+49, r24	; 0x31
    93b6:	9a ab       	std	Y+50, r25	; 0x32
    93b8:	ab ab       	std	Y+51, r26	; 0x33
    93ba:	bc ab       	std	Y+52, r27	; 0x34
    93bc:	ce 01       	movw	r24, r28
    93be:	b8 df       	rcall	.-144    	; 0x9330 <move_window>
    93c0:	89 2b       	or	r24, r25
    93c2:	19 f5       	brne	.+70     	; 0x940a <check_fs+0x64>
    93c4:	fe 01       	movw	r30, r28
    93c6:	ed 5c       	subi	r30, 0xCD	; 205
    93c8:	fd 4f       	sbci	r31, 0xFD	; 253
    93ca:	80 81       	ld	r24, Z
    93cc:	91 81       	ldd	r25, Z+1	; 0x01
    93ce:	85 35       	cpi	r24, 0x55	; 85
    93d0:	9a 4a       	sbci	r25, 0xAA	; 170
    93d2:	f1 f4       	brne	.+60     	; 0x9410 <check_fs+0x6a>
    93d4:	8d a9       	ldd	r24, Y+53	; 0x35
    93d6:	8b 3e       	cpi	r24, 0xEB	; 235
    93d8:	19 f0       	breq	.+6      	; 0x93e0 <check_fs+0x3a>
    93da:	88 5e       	subi	r24, 0xE8	; 232
    93dc:	82 30       	cpi	r24, 0x02	; 2
    93de:	f0 f4       	brcc	.+60     	; 0x941c <check_fs+0x76>
    93e0:	43 e0       	ldi	r20, 0x03	; 3
    93e2:	50 e0       	ldi	r21, 0x00	; 0
    93e4:	66 ec       	ldi	r22, 0xC6	; 198
    93e6:	78 e0       	ldi	r23, 0x08	; 8
    93e8:	ce 01       	movw	r24, r28
    93ea:	85 59       	subi	r24, 0x95	; 149
    93ec:	9f 4f       	sbci	r25, 0xFF	; 255
    93ee:	02 dc       	rcall	.-2044   	; 0x8bf4 <mem_cmp>
    93f0:	89 2b       	or	r24, r25
    93f2:	89 f0       	breq	.+34     	; 0x9416 <check_fs+0x70>
    93f4:	45 e0       	ldi	r20, 0x05	; 5
    93f6:	50 e0       	ldi	r21, 0x00	; 0
    93f8:	61 e2       	ldi	r22, 0x21	; 33
    93fa:	74 e0       	ldi	r23, 0x04	; 4
    93fc:	ce 01       	movw	r24, r28
    93fe:	89 57       	subi	r24, 0x79	; 121
    9400:	9f 4f       	sbci	r25, 0xFF	; 255
    9402:	f8 db       	rcall	.-2064   	; 0x8bf4 <mem_cmp>
    9404:	89 2b       	or	r24, r25
    9406:	51 f4       	brne	.+20     	; 0x941c <check_fs+0x76>
    9408:	06 c0       	rjmp	.+12     	; 0x9416 <check_fs+0x70>
    940a:	84 e0       	ldi	r24, 0x04	; 4
    940c:	90 e0       	ldi	r25, 0x00	; 0
    940e:	08 c0       	rjmp	.+16     	; 0x9420 <check_fs+0x7a>
    9410:	83 e0       	ldi	r24, 0x03	; 3
    9412:	90 e0       	ldi	r25, 0x00	; 0
    9414:	05 c0       	rjmp	.+10     	; 0x9420 <check_fs+0x7a>
    9416:	80 e0       	ldi	r24, 0x00	; 0
    9418:	90 e0       	ldi	r25, 0x00	; 0
    941a:	02 c0       	rjmp	.+4      	; 0x9420 <check_fs+0x7a>
    941c:	82 e0       	ldi	r24, 0x02	; 2
    941e:	90 e0       	ldi	r25, 0x00	; 0
    9420:	df 91       	pop	r29
    9422:	cf 91       	pop	r28
    9424:	08 95       	ret

00009426 <mount_volume>:
    9426:	a0 e2       	ldi	r26, 0x20	; 32
    9428:	b0 e0       	ldi	r27, 0x00	; 0
    942a:	e9 e1       	ldi	r30, 0x19	; 25
    942c:	fa e4       	ldi	r31, 0x4A	; 74
    942e:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
    9432:	5b 01       	movw	r10, r22
    9434:	f4 2e       	mov	r15, r20
    9436:	db 01       	movw	r26, r22
    9438:	1d 92       	st	X+, r1
    943a:	1c 92       	st	X, r1
    943c:	5d dc       	rcall	.-1862   	; 0x8cf8 <get_ldnumber>
    943e:	6c 01       	movw	r12, r24
    9440:	97 fd       	sbrc	r25, 7
    9442:	39 c2       	rjmp	.+1138   	; 0x98b6 <mount_volume+0x490>
    9444:	fc 01       	movw	r30, r24
    9446:	ee 0f       	add	r30, r30
    9448:	ff 1f       	adc	r31, r31
    944a:	ef 5d       	subi	r30, 0xDF	; 223
    944c:	f7 4e       	sbci	r31, 0xE7	; 231
    944e:	00 81       	ld	r16, Z
    9450:	11 81       	ldd	r17, Z+1	; 0x01
    9452:	01 15       	cp	r16, r1
    9454:	11 05       	cpc	r17, r1
    9456:	09 f4       	brne	.+2      	; 0x945a <mount_volume+0x34>
    9458:	31 c2       	rjmp	.+1122   	; 0x98bc <mount_volume+0x496>
    945a:	f5 01       	movw	r30, r10
    945c:	11 83       	std	Z+1, r17	; 0x01
    945e:	00 83       	st	Z, r16
    9460:	ff 2d       	mov	r31, r15
    9462:	fe 7f       	andi	r31, 0xFE	; 254
    9464:	ff 2e       	mov	r15, r31
    9466:	d8 01       	movw	r26, r16
    9468:	8c 91       	ld	r24, X
    946a:	88 23       	and	r24, r24
    946c:	71 f0       	breq	.+28     	; 0x948a <mount_volume+0x64>
    946e:	f8 01       	movw	r30, r16
    9470:	81 81       	ldd	r24, Z+1	; 0x01
    9472:	0e 94 be 67 	call	0xcf7c	; 0xcf7c <disk_status>
    9476:	80 fd       	sbrc	r24, 0
    9478:	08 c0       	rjmp	.+16     	; 0x948a <mount_volume+0x64>
    947a:	ff 20       	and	r15, r15
    947c:	09 f4       	brne	.+2      	; 0x9480 <mount_volume+0x5a>
    947e:	21 c2       	rjmp	.+1090   	; 0x98c2 <mount_volume+0x49c>
    9480:	82 ff       	sbrs	r24, 2
    9482:	1f c2       	rjmp	.+1086   	; 0x98c2 <mount_volume+0x49c>
    9484:	8a e0       	ldi	r24, 0x0A	; 10
    9486:	90 e0       	ldi	r25, 0x00	; 0
    9488:	24 c2       	rjmp	.+1096   	; 0x98d2 <mount_volume+0x4ac>
    948a:	d8 01       	movw	r26, r16
    948c:	1c 92       	st	X, r1
    948e:	f8 01       	movw	r30, r16
    9490:	c1 82       	std	Z+1, r12	; 0x01
    9492:	8c 2d       	mov	r24, r12
    9494:	0e 94 c4 67 	call	0xcf88	; 0xcf88 <disk_initialize>
    9498:	80 fd       	sbrc	r24, 0
    949a:	16 c2       	rjmp	.+1068   	; 0x98c8 <mount_volume+0x4a2>
    949c:	ff 20       	and	r15, r15
    949e:	11 f0       	breq	.+4      	; 0x94a4 <mount_volume+0x7e>
    94a0:	82 fd       	sbrc	r24, 2
    94a2:	f0 cf       	rjmp	.-32     	; 0x9484 <mount_volume+0x5e>
    94a4:	40 e0       	ldi	r20, 0x00	; 0
    94a6:	50 e0       	ldi	r21, 0x00	; 0
    94a8:	ba 01       	movw	r22, r20
    94aa:	c8 01       	movw	r24, r16
    94ac:	7c df       	rcall	.-264    	; 0x93a6 <check_fs>
    94ae:	82 30       	cpi	r24, 0x02	; 2
    94b0:	91 05       	cpc	r25, r1
    94b2:	b9 f5       	brne	.+110    	; 0x9522 <mount_volume+0xfc>
    94b4:	68 01       	movw	r12, r16
    94b6:	f5 e0       	ldi	r31, 0x05	; 5
    94b8:	cf 1a       	sub	r12, r31
    94ba:	fe ef       	ldi	r31, 0xFE	; 254
    94bc:	df 0a       	sbc	r13, r31
    94be:	9e 01       	movw	r18, r28
    94c0:	2f 5f       	subi	r18, 0xFF	; 255
    94c2:	3f 4f       	sbci	r19, 0xFF	; 255
    94c4:	79 01       	movw	r14, r18
    94c6:	48 01       	movw	r8, r16
    94c8:	35 ec       	ldi	r19, 0xC5	; 197
    94ca:	83 1a       	sub	r8, r19
    94cc:	3d ef       	ldi	r19, 0xFD	; 253
    94ce:	93 0a       	sbc	r9, r19
    94d0:	57 01       	movw	r10, r14
    94d2:	c6 01       	movw	r24, r12
    94d4:	6b db       	rcall	.-2346   	; 0x8bac <ld_dword>
    94d6:	d5 01       	movw	r26, r10
    94d8:	6d 93       	st	X+, r22
    94da:	7d 93       	st	X+, r23
    94dc:	8d 93       	st	X+, r24
    94de:	9d 93       	st	X+, r25
    94e0:	5d 01       	movw	r10, r26
    94e2:	b0 e1       	ldi	r27, 0x10	; 16
    94e4:	cb 0e       	add	r12, r27
    94e6:	d1 1c       	adc	r13, r1
    94e8:	c8 14       	cp	r12, r8
    94ea:	d9 04       	cpc	r13, r9
    94ec:	91 f7       	brne	.-28     	; 0x94d2 <mount_volume+0xac>
    94ee:	6e 01       	movw	r12, r28
    94f0:	e1 e1       	ldi	r30, 0x11	; 17
    94f2:	ce 0e       	add	r12, r30
    94f4:	d1 1c       	adc	r13, r1
    94f6:	d7 01       	movw	r26, r14
    94f8:	4d 91       	ld	r20, X+
    94fa:	5d 91       	ld	r21, X+
    94fc:	6d 91       	ld	r22, X+
    94fe:	7d 91       	ld	r23, X+
    9500:	7d 01       	movw	r14, r26
    9502:	41 15       	cp	r20, r1
    9504:	51 05       	cpc	r21, r1
    9506:	61 05       	cpc	r22, r1
    9508:	71 05       	cpc	r23, r1
    950a:	31 f0       	breq	.+12     	; 0x9518 <mount_volume+0xf2>
    950c:	c8 01       	movw	r24, r16
    950e:	4b df       	rcall	.-362    	; 0x93a6 <check_fs>
    9510:	82 30       	cpi	r24, 0x02	; 2
    9512:	91 05       	cpc	r25, r1
    9514:	18 f4       	brcc	.+6      	; 0x951c <mount_volume+0xf6>
    9516:	05 c0       	rjmp	.+10     	; 0x9522 <mount_volume+0xfc>
    9518:	83 e0       	ldi	r24, 0x03	; 3
    951a:	90 e0       	ldi	r25, 0x00	; 0
    951c:	ce 14       	cp	r12, r14
    951e:	df 04       	cpc	r13, r15
    9520:	51 f7       	brne	.-44     	; 0x94f6 <mount_volume+0xd0>
    9522:	84 30       	cpi	r24, 0x04	; 4
    9524:	91 05       	cpc	r25, r1
    9526:	09 f4       	brne	.+2      	; 0x952a <mount_volume+0x104>
    9528:	d2 c1       	rjmp	.+932    	; 0x98ce <mount_volume+0x4a8>
    952a:	02 97       	sbiw	r24, 0x02	; 2
    952c:	18 f0       	brcs	.+6      	; 0x9534 <mount_volume+0x10e>
    952e:	8d e0       	ldi	r24, 0x0D	; 13
    9530:	90 e0       	ldi	r25, 0x00	; 0
    9532:	cf c1       	rjmp	.+926    	; 0x98d2 <mount_volume+0x4ac>
    9534:	f8 01       	movw	r30, r16
    9536:	e0 5c       	subi	r30, 0xC0	; 192
    9538:	ff 4f       	sbci	r31, 0xFF	; 255
    953a:	80 81       	ld	r24, Z
    953c:	91 81       	ldd	r25, Z+1	; 0x01
    953e:	81 15       	cp	r24, r1
    9540:	92 40       	sbci	r25, 0x02	; 2
    9542:	a9 f7       	brne	.-22     	; 0x952e <mount_volume+0x108>
    9544:	3b 96       	adiw	r30, 0x0b	; 11
    9546:	40 80       	ld	r4, Z
    9548:	51 80       	ldd	r5, Z+1	; 0x01
    954a:	41 14       	cp	r4, r1
    954c:	51 04       	cpc	r5, r1
    954e:	19 f0       	breq	.+6      	; 0x9556 <mount_volume+0x130>
    9550:	61 2c       	mov	r6, r1
    9552:	71 2c       	mov	r7, r1
    9554:	06 c0       	rjmp	.+12     	; 0x9562 <mount_volume+0x13c>
    9556:	c8 01       	movw	r24, r16
    9558:	87 5a       	subi	r24, 0xA7	; 167
    955a:	9f 4f       	sbci	r25, 0xFF	; 255
    955c:	27 db       	rcall	.-2482   	; 0x8bac <ld_dword>
    955e:	2b 01       	movw	r4, r22
    9560:	3c 01       	movw	r6, r24
    9562:	f8 01       	movw	r30, r16
    9564:	21 a9       	ldd	r18, Z+49	; 0x31
    9566:	32 a9       	ldd	r19, Z+50	; 0x32
    9568:	43 a9       	ldd	r20, Z+51	; 0x33
    956a:	54 a9       	ldd	r21, Z+52	; 0x34
    956c:	29 8b       	std	Y+17, r18	; 0x11
    956e:	3a 8b       	std	Y+18, r19	; 0x12
    9570:	4b 8b       	std	Y+19, r20	; 0x13
    9572:	5c 8b       	std	Y+20, r21	; 0x14
    9574:	45 8e       	std	Z+29, r4	; 0x1d
    9576:	56 8e       	std	Z+30, r5	; 0x1e
    9578:	67 8e       	std	Z+31, r6	; 0x1f
    957a:	70 a2       	std	Z+32, r7	; 0x20
    957c:	eb 5b       	subi	r30, 0xBB	; 187
    957e:	ff 4f       	sbci	r31, 0xFF	; 255
    9580:	a0 80       	ld	r10, Z
    9582:	f8 01       	movw	r30, r16
    9584:	a2 82       	std	Z+2, r10	; 0x02
    9586:	8f ef       	ldi	r24, 0xFF	; 255
    9588:	8a 0d       	add	r24, r10
    958a:	82 30       	cpi	r24, 0x02	; 2
    958c:	80 f6       	brcc	.-96     	; 0x952e <mount_volume+0x108>
    958e:	ee 5b       	subi	r30, 0xBE	; 190
    9590:	ff 4f       	sbci	r31, 0xFF	; 255
    9592:	b0 80       	ld	r11, Z
    9594:	8b 2d       	mov	r24, r11
    9596:	90 e0       	ldi	r25, 0x00	; 0
    9598:	f8 01       	movw	r30, r16
    959a:	92 87       	std	Z+10, r25	; 0x0a
    959c:	81 87       	std	Z+9, r24	; 0x09
    959e:	00 97       	sbiw	r24, 0x00	; 0
    95a0:	31 f2       	breq	.-116    	; 0x952e <mount_volume+0x108>
    95a2:	9c 01       	movw	r18, r24
    95a4:	21 50       	subi	r18, 0x01	; 1
    95a6:	31 09       	sbc	r19, r1
    95a8:	82 23       	and	r24, r18
    95aa:	93 23       	and	r25, r19
    95ac:	89 2b       	or	r24, r25
    95ae:	09 f0       	breq	.+2      	; 0x95b2 <mount_volume+0x18c>
    95b0:	be cf       	rjmp	.-132    	; 0x952e <mount_volume+0x108>
    95b2:	ea 5b       	subi	r30, 0xBA	; 186
    95b4:	ff 4f       	sbci	r31, 0xFF	; 255
    95b6:	80 80       	ld	r8, Z
    95b8:	91 80       	ldd	r9, Z+1	; 0x01
    95ba:	f8 01       	movw	r30, r16
    95bc:	90 86       	std	Z+8, r9	; 0x08
    95be:	87 82       	std	Z+7, r8	; 0x07
    95c0:	c4 01       	movw	r24, r8
    95c2:	8f 70       	andi	r24, 0x0F	; 15
    95c4:	99 27       	eor	r25, r25
    95c6:	89 2b       	or	r24, r25
    95c8:	09 f0       	breq	.+2      	; 0x95cc <mount_volume+0x1a6>
    95ca:	b1 cf       	rjmp	.-158    	; 0x952e <mount_volume+0x108>
    95cc:	e8 5b       	subi	r30, 0xB8	; 184
    95ce:	ff 4f       	sbci	r31, 0xFF	; 255
    95d0:	80 81       	ld	r24, Z
    95d2:	91 81       	ldd	r25, Z+1	; 0x01
    95d4:	6c 01       	movw	r12, r24
    95d6:	e1 2c       	mov	r14, r1
    95d8:	f1 2c       	mov	r15, r1
    95da:	89 2b       	or	r24, r25
    95dc:	31 f4       	brne	.+12     	; 0x95ea <mount_volume+0x1c4>
    95de:	c8 01       	movw	r24, r16
    95e0:	8b 5a       	subi	r24, 0xAB	; 171
    95e2:	9f 4f       	sbci	r25, 0xFF	; 255
    95e4:	e3 da       	rcall	.-2618   	; 0x8bac <ld_dword>
    95e6:	6b 01       	movw	r12, r22
    95e8:	7c 01       	movw	r14, r24
    95ea:	f8 01       	movw	r30, r16
    95ec:	ed 5b       	subi	r30, 0xBD	; 189
    95ee:	ff 4f       	sbci	r31, 0xFF	; 255
    95f0:	01 90       	ld	r0, Z+
    95f2:	f0 81       	ld	r31, Z
    95f4:	e0 2d       	mov	r30, r0
    95f6:	30 97       	sbiw	r30, 0x00	; 0
    95f8:	09 f4       	brne	.+2      	; 0x95fc <mount_volume+0x1d6>
    95fa:	99 cf       	rjmp	.-206    	; 0x952e <mount_volume+0x108>
    95fc:	aa 2d       	mov	r26, r10
    95fe:	b0 e0       	ldi	r27, 0x00	; 0
    9600:	a3 01       	movw	r20, r6
    9602:	92 01       	movw	r18, r4
    9604:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    9608:	69 8f       	std	Y+25, r22	; 0x19
    960a:	7a 8f       	std	Y+26, r23	; 0x1a
    960c:	8b 8f       	std	Y+27, r24	; 0x1b
    960e:	9c 8f       	std	Y+28, r25	; 0x1c
    9610:	9f 01       	movw	r18, r30
    9612:	40 e0       	ldi	r20, 0x00	; 0
    9614:	50 e0       	ldi	r21, 0x00	; 0
    9616:	2d 8f       	std	Y+29, r18	; 0x1d
    9618:	3e 8f       	std	Y+30, r19	; 0x1e
    961a:	4f 8f       	std	Y+31, r20	; 0x1f
    961c:	58 a3       	std	Y+32, r21	; 0x20
    961e:	c4 01       	movw	r24, r8
    9620:	f4 e0       	ldi	r31, 0x04	; 4
    9622:	96 95       	lsr	r25
    9624:	87 95       	ror	r24
    9626:	fa 95       	dec	r31
    9628:	e1 f7       	brne	.-8      	; 0x9622 <mount_volume+0x1fc>
    962a:	28 0f       	add	r18, r24
    962c:	39 1f       	adc	r19, r25
    962e:	41 1d       	adc	r20, r1
    9630:	51 1d       	adc	r21, r1
    9632:	da 01       	movw	r26, r20
    9634:	c9 01       	movw	r24, r18
    9636:	29 8d       	ldd	r18, Y+25	; 0x19
    9638:	3a 8d       	ldd	r19, Y+26	; 0x1a
    963a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    963c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    963e:	28 0f       	add	r18, r24
    9640:	39 1f       	adc	r19, r25
    9642:	4a 1f       	adc	r20, r26
    9644:	5b 1f       	adc	r21, r27
    9646:	2d 8b       	std	Y+21, r18	; 0x15
    9648:	3e 8b       	std	Y+22, r19	; 0x16
    964a:	4f 8b       	std	Y+23, r20	; 0x17
    964c:	58 8f       	std	Y+24, r21	; 0x18
    964e:	c2 16       	cp	r12, r18
    9650:	d3 06       	cpc	r13, r19
    9652:	e4 06       	cpc	r14, r20
    9654:	f5 06       	cpc	r15, r21
    9656:	08 f4       	brcc	.+2      	; 0x965a <mount_volume+0x234>
    9658:	6a cf       	rjmp	.-300    	; 0x952e <mount_volume+0x108>
    965a:	c7 01       	movw	r24, r14
    965c:	b6 01       	movw	r22, r12
    965e:	62 1b       	sub	r22, r18
    9660:	73 0b       	sbc	r23, r19
    9662:	84 0b       	sbc	r24, r20
    9664:	95 0b       	sbc	r25, r21
    9666:	2b 2d       	mov	r18, r11
    9668:	30 e0       	ldi	r19, 0x00	; 0
    966a:	40 e0       	ldi	r20, 0x00	; 0
    966c:	50 e0       	ldi	r21, 0x00	; 0
    966e:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    9672:	da 01       	movw	r26, r20
    9674:	c9 01       	movw	r24, r18
    9676:	01 97       	sbiw	r24, 0x01	; 1
    9678:	a1 09       	sbc	r26, r1
    967a:	b1 09       	sbc	r27, r1
    967c:	85 3f       	cpi	r24, 0xF5	; 245
    967e:	9f 4f       	sbci	r25, 0xFF	; 255
    9680:	af 4f       	sbci	r26, 0xFF	; 255
    9682:	bf 40       	sbci	r27, 0x0F	; 15
    9684:	08 f0       	brcs	.+2      	; 0x9688 <mount_volume+0x262>
    9686:	53 cf       	rjmp	.-346    	; 0x952e <mount_volume+0x108>
    9688:	26 3f       	cpi	r18, 0xF6	; 246
    968a:	8f ef       	ldi	r24, 0xFF	; 255
    968c:	38 07       	cpc	r19, r24
    968e:	41 05       	cpc	r20, r1
    9690:	51 05       	cpc	r21, r1
    9692:	50 f4       	brcc	.+20     	; 0x96a8 <mount_volume+0x282>
    9694:	26 3f       	cpi	r18, 0xF6	; 246
    9696:	9f e0       	ldi	r25, 0x0F	; 15
    9698:	39 07       	cpc	r19, r25
    969a:	41 05       	cpc	r20, r1
    969c:	51 05       	cpc	r21, r1
    969e:	40 f4       	brcc	.+16     	; 0x96b0 <mount_volume+0x28a>
    96a0:	aa 24       	eor	r10, r10
    96a2:	a3 94       	inc	r10
    96a4:	b1 2c       	mov	r11, r1
    96a6:	07 c0       	rjmp	.+14     	; 0x96b6 <mount_volume+0x290>
    96a8:	73 e0       	ldi	r23, 0x03	; 3
    96aa:	a7 2e       	mov	r10, r23
    96ac:	b1 2c       	mov	r11, r1
    96ae:	03 c0       	rjmp	.+6      	; 0x96b6 <mount_volume+0x290>
    96b0:	62 e0       	ldi	r22, 0x02	; 2
    96b2:	a6 2e       	mov	r10, r22
    96b4:	b1 2c       	mov	r11, r1
    96b6:	69 01       	movw	r12, r18
    96b8:	7a 01       	movw	r14, r20
    96ba:	a2 e0       	ldi	r26, 0x02	; 2
    96bc:	ca 0e       	add	r12, r26
    96be:	d1 1c       	adc	r13, r1
    96c0:	e1 1c       	adc	r14, r1
    96c2:	f1 1c       	adc	r15, r1
    96c4:	f8 01       	movw	r30, r16
    96c6:	c1 8e       	std	Z+25, r12	; 0x19
    96c8:	d2 8e       	std	Z+26, r13	; 0x1a
    96ca:	e3 8e       	std	Z+27, r14	; 0x1b
    96cc:	f4 8e       	std	Z+28, r15	; 0x1c
    96ce:	29 89       	ldd	r18, Y+17	; 0x11
    96d0:	3a 89       	ldd	r19, Y+18	; 0x12
    96d2:	4b 89       	ldd	r20, Y+19	; 0x13
    96d4:	5c 89       	ldd	r21, Y+20	; 0x14
    96d6:	21 a3       	std	Z+33, r18	; 0x21
    96d8:	32 a3       	std	Z+34, r19	; 0x22
    96da:	43 a3       	std	Z+35, r20	; 0x23
    96dc:	54 a3       	std	Z+36, r21	; 0x24
    96de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    96e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    96e2:	af 8d       	ldd	r26, Y+31	; 0x1f
    96e4:	b8 a1       	ldd	r27, Y+32	; 0x20
    96e6:	28 0f       	add	r18, r24
    96e8:	39 1f       	adc	r19, r25
    96ea:	4a 1f       	adc	r20, r26
    96ec:	5b 1f       	adc	r21, r27
    96ee:	2d 8f       	std	Y+29, r18	; 0x1d
    96f0:	3e 8f       	std	Y+30, r19	; 0x1e
    96f2:	4f 8f       	std	Y+31, r20	; 0x1f
    96f4:	58 a3       	std	Y+32, r21	; 0x20
    96f6:	25 a3       	std	Z+37, r18	; 0x25
    96f8:	36 a3       	std	Z+38, r19	; 0x26
    96fa:	47 a3       	std	Z+39, r20	; 0x27
    96fc:	50 a7       	std	Z+40, r21	; 0x28
    96fe:	49 89       	ldd	r20, Y+17	; 0x11
    9700:	5a 89       	ldd	r21, Y+18	; 0x12
    9702:	6b 89       	ldd	r22, Y+19	; 0x13
    9704:	7c 89       	ldd	r23, Y+20	; 0x14
    9706:	8d 89       	ldd	r24, Y+21	; 0x15
    9708:	9e 89       	ldd	r25, Y+22	; 0x16
    970a:	af 89       	ldd	r26, Y+23	; 0x17
    970c:	b8 8d       	ldd	r27, Y+24	; 0x18
    970e:	48 0f       	add	r20, r24
    9710:	59 1f       	adc	r21, r25
    9712:	6a 1f       	adc	r22, r26
    9714:	7b 1f       	adc	r23, r27
    9716:	45 a7       	std	Z+45, r20	; 0x2d
    9718:	56 a7       	std	Z+46, r21	; 0x2e
    971a:	67 a7       	std	Z+47, r22	; 0x2f
    971c:	70 ab       	std	Z+48, r23	; 0x30
    971e:	f3 e0       	ldi	r31, 0x03	; 3
    9720:	af 16       	cp	r10, r31
    9722:	b1 04       	cpc	r11, r1
    9724:	e9 f4       	brne	.+58     	; 0x9760 <mount_volume+0x33a>
    9726:	f8 01       	movw	r30, r16
    9728:	e1 5a       	subi	r30, 0xA1	; 161
    972a:	ff 4f       	sbci	r31, 0xFF	; 255
    972c:	80 81       	ld	r24, Z
    972e:	91 81       	ldd	r25, Z+1	; 0x01
    9730:	89 2b       	or	r24, r25
    9732:	09 f0       	breq	.+2      	; 0x9736 <mount_volume+0x310>
    9734:	fc ce       	rjmp	.-520    	; 0x952e <mount_volume+0x108>
    9736:	81 14       	cp	r8, r1
    9738:	91 04       	cpc	r9, r1
    973a:	09 f0       	breq	.+2      	; 0x973e <mount_volume+0x318>
    973c:	f8 ce       	rjmp	.-528    	; 0x952e <mount_volume+0x108>
    973e:	c8 01       	movw	r24, r16
    9740:	8f 59       	subi	r24, 0x9F	; 159
    9742:	9f 4f       	sbci	r25, 0xFF	; 255
    9744:	33 da       	rcall	.-2970   	; 0x8bac <ld_dword>
    9746:	f8 01       	movw	r30, r16
    9748:	61 a7       	std	Z+41, r22	; 0x29
    974a:	72 a7       	std	Z+42, r23	; 0x2a
    974c:	83 a7       	std	Z+43, r24	; 0x2b
    974e:	94 a7       	std	Z+44, r25	; 0x2c
    9750:	42 e0       	ldi	r20, 0x02	; 2
    9752:	cc 0c       	add	r12, r12
    9754:	dd 1c       	adc	r13, r13
    9756:	ee 1c       	adc	r14, r14
    9758:	ff 1c       	adc	r15, r15
    975a:	4a 95       	dec	r20
    975c:	d1 f7       	brne	.-12     	; 0x9752 <mount_volume+0x32c>
    975e:	33 c0       	rjmp	.+102    	; 0x97c6 <mount_volume+0x3a0>
    9760:	81 14       	cp	r8, r1
    9762:	91 04       	cpc	r9, r1
    9764:	09 f4       	brne	.+2      	; 0x9768 <mount_volume+0x342>
    9766:	e3 ce       	rjmp	.-570    	; 0x952e <mount_volume+0x108>
    9768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    976a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    976c:	af 8d       	ldd	r26, Y+31	; 0x1f
    976e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9770:	29 8d       	ldd	r18, Y+25	; 0x19
    9772:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9774:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9776:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9778:	82 0f       	add	r24, r18
    977a:	93 1f       	adc	r25, r19
    977c:	a4 1f       	adc	r26, r20
    977e:	b5 1f       	adc	r27, r21
    9780:	f8 01       	movw	r30, r16
    9782:	81 a7       	std	Z+41, r24	; 0x29
    9784:	92 a7       	std	Z+42, r25	; 0x2a
    9786:	a3 a7       	std	Z+43, r26	; 0x2b
    9788:	b4 a7       	std	Z+44, r27	; 0x2c
    978a:	f2 e0       	ldi	r31, 0x02	; 2
    978c:	af 16       	cp	r10, r31
    978e:	b1 04       	cpc	r11, r1
    9790:	29 f4       	brne	.+10     	; 0x979c <mount_volume+0x376>
    9792:	cc 0c       	add	r12, r12
    9794:	dd 1c       	adc	r13, r13
    9796:	ee 1c       	adc	r14, r14
    9798:	ff 1c       	adc	r15, r15
    979a:	15 c0       	rjmp	.+42     	; 0x97c6 <mount_volume+0x3a0>
    979c:	a3 e0       	ldi	r26, 0x03	; 3
    979e:	b0 e0       	ldi	r27, 0x00	; 0
    97a0:	a7 01       	movw	r20, r14
    97a2:	96 01       	movw	r18, r12
    97a4:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    97a8:	dc 01       	movw	r26, r24
    97aa:	cb 01       	movw	r24, r22
    97ac:	b6 95       	lsr	r27
    97ae:	a7 95       	ror	r26
    97b0:	97 95       	ror	r25
    97b2:	87 95       	ror	r24
    97b4:	21 e0       	ldi	r18, 0x01	; 1
    97b6:	c2 22       	and	r12, r18
    97b8:	dd 24       	eor	r13, r13
    97ba:	ee 24       	eor	r14, r14
    97bc:	ff 24       	eor	r15, r15
    97be:	c8 0e       	add	r12, r24
    97c0:	d9 1e       	adc	r13, r25
    97c2:	ea 1e       	adc	r14, r26
    97c4:	fb 1e       	adc	r15, r27
    97c6:	3f ef       	ldi	r19, 0xFF	; 255
    97c8:	c3 0e       	add	r12, r19
    97ca:	31 e0       	ldi	r19, 0x01	; 1
    97cc:	d3 1e       	adc	r13, r19
    97ce:	e1 1c       	adc	r14, r1
    97d0:	f1 1c       	adc	r15, r1
    97d2:	89 e0       	ldi	r24, 0x09	; 9
    97d4:	f6 94       	lsr	r15
    97d6:	e7 94       	ror	r14
    97d8:	d7 94       	ror	r13
    97da:	c7 94       	ror	r12
    97dc:	8a 95       	dec	r24
    97de:	d1 f7       	brne	.-12     	; 0x97d4 <mount_volume+0x3ae>
    97e0:	4c 14       	cp	r4, r12
    97e2:	5d 04       	cpc	r5, r13
    97e4:	6e 04       	cpc	r6, r14
    97e6:	7f 04       	cpc	r7, r15
    97e8:	08 f4       	brcc	.+2      	; 0x97ec <mount_volume+0x3c6>
    97ea:	a1 ce       	rjmp	.-702    	; 0x952e <mount_volume+0x108>
    97ec:	8f ef       	ldi	r24, 0xFF	; 255
    97ee:	9f ef       	ldi	r25, 0xFF	; 255
    97f0:	dc 01       	movw	r26, r24
    97f2:	f8 01       	movw	r30, r16
    97f4:	81 8b       	std	Z+17, r24	; 0x11
    97f6:	92 8b       	std	Z+18, r25	; 0x12
    97f8:	a3 8b       	std	Z+19, r26	; 0x13
    97fa:	b4 8b       	std	Z+20, r27	; 0x14
    97fc:	85 87       	std	Z+13, r24	; 0x0d
    97fe:	96 87       	std	Z+14, r25	; 0x0e
    9800:	a7 87       	std	Z+15, r26	; 0x0f
    9802:	b0 8b       	std	Z+16, r27	; 0x10
    9804:	80 e8       	ldi	r24, 0x80	; 128
    9806:	84 83       	std	Z+4, r24	; 0x04
    9808:	f3 e0       	ldi	r31, 0x03	; 3
    980a:	af 16       	cp	r10, r31
    980c:	b1 04       	cpc	r11, r1
    980e:	09 f0       	breq	.+2      	; 0x9812 <mount_volume+0x3ec>
    9810:	3f c0       	rjmp	.+126    	; 0x9890 <mount_volume+0x46a>
    9812:	f8 01       	movw	r30, r16
    9814:	eb 59       	subi	r30, 0x9B	; 155
    9816:	ff 4f       	sbci	r31, 0xFF	; 255
    9818:	80 81       	ld	r24, Z
    981a:	91 81       	ldd	r25, Z+1	; 0x01
    981c:	01 97       	sbiw	r24, 0x01	; 1
    981e:	c1 f5       	brne	.+112    	; 0x9890 <mount_volume+0x46a>
    9820:	49 89       	ldd	r20, Y+17	; 0x11
    9822:	5a 89       	ldd	r21, Y+18	; 0x12
    9824:	6b 89       	ldd	r22, Y+19	; 0x13
    9826:	7c 89       	ldd	r23, Y+20	; 0x14
    9828:	4f 5f       	subi	r20, 0xFF	; 255
    982a:	5f 4f       	sbci	r21, 0xFF	; 255
    982c:	6f 4f       	sbci	r22, 0xFF	; 255
    982e:	7f 4f       	sbci	r23, 0xFF	; 255
    9830:	c8 01       	movw	r24, r16
    9832:	7e dd       	rcall	.-1284   	; 0x9330 <move_window>
    9834:	89 2b       	or	r24, r25
    9836:	61 f5       	brne	.+88     	; 0x9890 <mount_volume+0x46a>
    9838:	f8 01       	movw	r30, r16
    983a:	14 82       	std	Z+4, r1	; 0x04
    983c:	ed 5c       	subi	r30, 0xCD	; 205
    983e:	fd 4f       	sbci	r31, 0xFD	; 253
    9840:	80 81       	ld	r24, Z
    9842:	91 81       	ldd	r25, Z+1	; 0x01
    9844:	85 35       	cpi	r24, 0x55	; 85
    9846:	9a 4a       	sbci	r25, 0xAA	; 170
    9848:	19 f5       	brne	.+70     	; 0x9890 <mount_volume+0x46a>
    984a:	c8 01       	movw	r24, r16
    984c:	c5 96       	adiw	r24, 0x35	; 53
    984e:	ae d9       	rcall	.-3236   	; 0x8bac <ld_dword>
    9850:	62 35       	cpi	r22, 0x52	; 82
    9852:	72 45       	sbci	r23, 0x52	; 82
    9854:	81 46       	sbci	r24, 0x61	; 97
    9856:	91 44       	sbci	r25, 0x41	; 65
    9858:	d9 f4       	brne	.+54     	; 0x9890 <mount_volume+0x46a>
    985a:	c8 01       	movw	r24, r16
    985c:	87 5e       	subi	r24, 0xE7	; 231
    985e:	9d 4f       	sbci	r25, 0xFD	; 253
    9860:	a5 d9       	rcall	.-3254   	; 0x8bac <ld_dword>
    9862:	62 37       	cpi	r22, 0x72	; 114
    9864:	72 47       	sbci	r23, 0x72	; 114
    9866:	81 44       	sbci	r24, 0x41	; 65
    9868:	91 46       	sbci	r25, 0x61	; 97
    986a:	91 f4       	brne	.+36     	; 0x9890 <mount_volume+0x46a>
    986c:	c8 01       	movw	r24, r16
    986e:	83 5e       	subi	r24, 0xE3	; 227
    9870:	9d 4f       	sbci	r25, 0xFD	; 253
    9872:	9c d9       	rcall	.-3272   	; 0x8bac <ld_dword>
    9874:	f8 01       	movw	r30, r16
    9876:	61 8b       	std	Z+17, r22	; 0x11
    9878:	72 8b       	std	Z+18, r23	; 0x12
    987a:	83 8b       	std	Z+19, r24	; 0x13
    987c:	94 8b       	std	Z+20, r25	; 0x14
    987e:	c8 01       	movw	r24, r16
    9880:	8f 5d       	subi	r24, 0xDF	; 223
    9882:	9d 4f       	sbci	r25, 0xFD	; 253
    9884:	93 d9       	rcall	.-3290   	; 0x8bac <ld_dword>
    9886:	f8 01       	movw	r30, r16
    9888:	65 87       	std	Z+13, r22	; 0x0d
    988a:	76 87       	std	Z+14, r23	; 0x0e
    988c:	87 87       	std	Z+15, r24	; 0x0f
    988e:	90 8b       	std	Z+16, r25	; 0x10
    9890:	d8 01       	movw	r26, r16
    9892:	ac 92       	st	X, r10
    9894:	80 91 1f 18 	lds	r24, 0x181F	; 0x80181f <Fsid>
    9898:	90 91 20 18 	lds	r25, 0x1820	; 0x801820 <Fsid+0x1>
    989c:	01 96       	adiw	r24, 0x01	; 1
    989e:	90 93 20 18 	sts	0x1820, r25	; 0x801820 <Fsid+0x1>
    98a2:	80 93 1f 18 	sts	0x181F, r24	; 0x80181f <Fsid>
    98a6:	f8 01       	movw	r30, r16
    98a8:	96 83       	std	Z+6, r25	; 0x06
    98aa:	85 83       	std	Z+5, r24	; 0x05
    98ac:	15 8a       	std	Z+21, r1	; 0x15
    98ae:	16 8a       	std	Z+22, r1	; 0x16
    98b0:	17 8a       	std	Z+23, r1	; 0x17
    98b2:	10 8e       	std	Z+24, r1	; 0x18
    98b4:	06 c0       	rjmp	.+12     	; 0x98c2 <mount_volume+0x49c>
    98b6:	8b e0       	ldi	r24, 0x0B	; 11
    98b8:	90 e0       	ldi	r25, 0x00	; 0
    98ba:	0b c0       	rjmp	.+22     	; 0x98d2 <mount_volume+0x4ac>
    98bc:	8c e0       	ldi	r24, 0x0C	; 12
    98be:	90 e0       	ldi	r25, 0x00	; 0
    98c0:	08 c0       	rjmp	.+16     	; 0x98d2 <mount_volume+0x4ac>
    98c2:	80 e0       	ldi	r24, 0x00	; 0
    98c4:	90 e0       	ldi	r25, 0x00	; 0
    98c6:	05 c0       	rjmp	.+10     	; 0x98d2 <mount_volume+0x4ac>
    98c8:	83 e0       	ldi	r24, 0x03	; 3
    98ca:	90 e0       	ldi	r25, 0x00	; 0
    98cc:	02 c0       	rjmp	.+4      	; 0x98d2 <mount_volume+0x4ac>
    98ce:	81 e0       	ldi	r24, 0x01	; 1
    98d0:	90 e0       	ldi	r25, 0x00	; 0
    98d2:	a0 96       	adiw	r28, 0x20	; 32
    98d4:	e0 e1       	ldi	r30, 0x10	; 16
    98d6:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

000098da <put_fat>:
    98da:	a6 e0       	ldi	r26, 0x06	; 6
    98dc:	b0 e0       	ldi	r27, 0x00	; 0
    98de:	e3 e7       	ldi	r30, 0x73	; 115
    98e0:	fc e4       	ldi	r31, 0x4C	; 76
    98e2:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    98e6:	42 30       	cpi	r20, 0x02	; 2
    98e8:	51 05       	cpc	r21, r1
    98ea:	61 05       	cpc	r22, r1
    98ec:	71 05       	cpc	r23, r1
    98ee:	08 f4       	brcc	.+2      	; 0x98f2 <put_fat+0x18>
    98f0:	e5 c0       	rjmp	.+458    	; 0x9abc <put_fat+0x1e2>
    98f2:	fc 01       	movw	r30, r24
    98f4:	c1 8c       	ldd	r12, Z+25	; 0x19
    98f6:	d2 8c       	ldd	r13, Z+26	; 0x1a
    98f8:	e3 8c       	ldd	r14, Z+27	; 0x1b
    98fa:	f4 8c       	ldd	r15, Z+28	; 0x1c
    98fc:	4c 15       	cp	r20, r12
    98fe:	5d 05       	cpc	r21, r13
    9900:	6e 05       	cpc	r22, r14
    9902:	7f 05       	cpc	r23, r15
    9904:	08 f0       	brcs	.+2      	; 0x9908 <put_fat+0x2e>
    9906:	da c0       	rjmp	.+436    	; 0x9abc <put_fat+0x1e2>
    9908:	28 01       	movw	r4, r16
    990a:	39 01       	movw	r6, r18
    990c:	6a 01       	movw	r12, r20
    990e:	7b 01       	movw	r14, r22
    9910:	9e 83       	std	Y+6, r25	; 0x06
    9912:	8d 83       	std	Y+5, r24	; 0x05
    9914:	80 81       	ld	r24, Z
    9916:	82 30       	cpi	r24, 0x02	; 2
    9918:	09 f4       	brne	.+2      	; 0x991c <put_fat+0x42>
    991a:	73 c0       	rjmp	.+230    	; 0x9a02 <put_fat+0x128>
    991c:	83 30       	cpi	r24, 0x03	; 3
    991e:	09 f4       	brne	.+2      	; 0x9922 <put_fat+0x48>
    9920:	92 c0       	rjmp	.+292    	; 0x9a46 <put_fat+0x16c>
    9922:	81 30       	cpi	r24, 0x01	; 1
    9924:	09 f0       	breq	.+2      	; 0x9928 <put_fat+0x4e>
    9926:	ca c0       	rjmp	.+404    	; 0x9abc <put_fat+0x1e2>
    9928:	4a 01       	movw	r8, r20
    992a:	96 94       	lsr	r9
    992c:	87 94       	ror	r8
    992e:	84 0e       	add	r8, r20
    9930:	95 1e       	adc	r9, r21
    9932:	c4 01       	movw	r24, r8
    9934:	89 2f       	mov	r24, r25
    9936:	99 27       	eor	r25, r25
    9938:	86 95       	lsr	r24
    993a:	45 a1       	ldd	r20, Z+37	; 0x25
    993c:	56 a1       	ldd	r21, Z+38	; 0x26
    993e:	67 a1       	ldd	r22, Z+39	; 0x27
    9940:	70 a5       	ldd	r23, Z+40	; 0x28
    9942:	48 0f       	add	r20, r24
    9944:	59 1f       	adc	r21, r25
    9946:	61 1d       	adc	r22, r1
    9948:	71 1d       	adc	r23, r1
    994a:	cf 01       	movw	r24, r30
    994c:	f1 dc       	rcall	.-1566   	; 0x9330 <move_window>
    994e:	5c 01       	movw	r10, r24
    9950:	89 2b       	or	r24, r25
    9952:	09 f0       	breq	.+2      	; 0x9956 <put_fat+0x7c>
    9954:	b6 c0       	rjmp	.+364    	; 0x9ac2 <put_fat+0x1e8>
    9956:	2d 80       	ldd	r2, Y+5	; 0x05
    9958:	3e 80       	ldd	r3, Y+6	; 0x06
    995a:	f5 e3       	ldi	r31, 0x35	; 53
    995c:	2f 0e       	add	r2, r31
    995e:	31 1c       	adc	r3, r1
    9960:	84 01       	movw	r16, r8
    9962:	0f 5f       	subi	r16, 0xFF	; 255
    9964:	1f 4f       	sbci	r17, 0xFF	; 255
    9966:	21 e0       	ldi	r18, 0x01	; 1
    9968:	92 22       	and	r9, r18
    996a:	f1 01       	movw	r30, r2
    996c:	e8 0d       	add	r30, r8
    996e:	f9 1d       	adc	r31, r9
    9970:	d7 01       	movw	r26, r14
    9972:	c6 01       	movw	r24, r12
    9974:	81 70       	andi	r24, 0x01	; 1
    9976:	99 27       	eor	r25, r25
    9978:	aa 27       	eor	r26, r26
    997a:	bb 27       	eor	r27, r27
    997c:	89 83       	std	Y+1, r24	; 0x01
    997e:	9a 83       	std	Y+2, r25	; 0x02
    9980:	ab 83       	std	Y+3, r26	; 0x03
    9982:	bc 83       	std	Y+4, r27	; 0x04
    9984:	c0 fe       	sbrs	r12, 0
    9986:	09 c0       	rjmp	.+18     	; 0x999a <put_fat+0xc0>
    9988:	80 81       	ld	r24, Z
    998a:	28 2f       	mov	r18, r24
    998c:	2f 70       	andi	r18, 0x0F	; 15
    998e:	a0 e1       	ldi	r26, 0x10	; 16
    9990:	4a 9e       	mul	r4, r26
    9992:	c0 01       	movw	r24, r0
    9994:	11 24       	eor	r1, r1
    9996:	82 2b       	or	r24, r18
    9998:	01 c0       	rjmp	.+2      	; 0x999c <put_fat+0xc2>
    999a:	84 2d       	mov	r24, r4
    999c:	80 83       	st	Z, r24
    999e:	81 e0       	ldi	r24, 0x01	; 1
    99a0:	ed 81       	ldd	r30, Y+5	; 0x05
    99a2:	fe 81       	ldd	r31, Y+6	; 0x06
    99a4:	83 83       	std	Z+3, r24	; 0x03
    99a6:	45 a1       	ldd	r20, Z+37	; 0x25
    99a8:	56 a1       	ldd	r21, Z+38	; 0x26
    99aa:	67 a1       	ldd	r22, Z+39	; 0x27
    99ac:	70 a5       	ldd	r23, Z+40	; 0x28
    99ae:	c8 01       	movw	r24, r16
    99b0:	89 2f       	mov	r24, r25
    99b2:	99 27       	eor	r25, r25
    99b4:	86 95       	lsr	r24
    99b6:	48 0f       	add	r20, r24
    99b8:	59 1f       	adc	r21, r25
    99ba:	61 1d       	adc	r22, r1
    99bc:	71 1d       	adc	r23, r1
    99be:	cf 01       	movw	r24, r30
    99c0:	b7 dc       	rcall	.-1682   	; 0x9330 <move_window>
    99c2:	5c 01       	movw	r10, r24
    99c4:	89 2b       	or	r24, r25
    99c6:	09 f0       	breq	.+2      	; 0x99ca <put_fat+0xf0>
    99c8:	7c c0       	rjmp	.+248    	; 0x9ac2 <put_fat+0x1e8>
    99ca:	11 70       	andi	r17, 0x01	; 1
    99cc:	f1 01       	movw	r30, r2
    99ce:	e0 0f       	add	r30, r16
    99d0:	f1 1f       	adc	r31, r17
    99d2:	89 81       	ldd	r24, Y+1	; 0x01
    99d4:	9a 81       	ldd	r25, Y+2	; 0x02
    99d6:	ab 81       	ldd	r26, Y+3	; 0x03
    99d8:	bc 81       	ldd	r27, Y+4	; 0x04
    99da:	89 2b       	or	r24, r25
    99dc:	8a 2b       	or	r24, r26
    99de:	8b 2b       	or	r24, r27
    99e0:	41 f0       	breq	.+16     	; 0x99f2 <put_fat+0x118>
    99e2:	54 e0       	ldi	r21, 0x04	; 4
    99e4:	76 94       	lsr	r7
    99e6:	67 94       	ror	r6
    99e8:	57 94       	ror	r5
    99ea:	47 94       	ror	r4
    99ec:	5a 95       	dec	r21
    99ee:	d1 f7       	brne	.-12     	; 0x99e4 <put_fat+0x10a>
    99f0:	06 c0       	rjmp	.+12     	; 0x99fe <put_fat+0x124>
    99f2:	00 81       	ld	r16, Z
    99f4:	00 7f       	andi	r16, 0xF0	; 240
    99f6:	85 2d       	mov	r24, r5
    99f8:	8f 70       	andi	r24, 0x0F	; 15
    99fa:	40 2e       	mov	r4, r16
    99fc:	48 2a       	or	r4, r24
    99fe:	40 82       	st	Z, r4
    9a00:	58 c0       	rjmp	.+176    	; 0x9ab2 <put_fat+0x1d8>
    9a02:	77 27       	eor	r23, r23
    9a04:	6f 2d       	mov	r22, r15
    9a06:	5e 2d       	mov	r21, r14
    9a08:	4d 2d       	mov	r20, r13
    9a0a:	ed 81       	ldd	r30, Y+5	; 0x05
    9a0c:	fe 81       	ldd	r31, Y+6	; 0x06
    9a0e:	85 a1       	ldd	r24, Z+37	; 0x25
    9a10:	96 a1       	ldd	r25, Z+38	; 0x26
    9a12:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a14:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a16:	48 0f       	add	r20, r24
    9a18:	59 1f       	adc	r21, r25
    9a1a:	6a 1f       	adc	r22, r26
    9a1c:	7b 1f       	adc	r23, r27
    9a1e:	cf 01       	movw	r24, r30
    9a20:	87 dc       	rcall	.-1778   	; 0x9330 <move_window>
    9a22:	5c 01       	movw	r10, r24
    9a24:	89 2b       	or	r24, r25
    9a26:	09 f0       	breq	.+2      	; 0x9a2a <put_fat+0x150>
    9a28:	4c c0       	rjmp	.+152    	; 0x9ac2 <put_fat+0x1e8>
    9a2a:	ed 81       	ldd	r30, Y+5	; 0x05
    9a2c:	fe 81       	ldd	r31, Y+6	; 0x06
    9a2e:	f5 96       	adiw	r30, 0x35	; 53
    9a30:	cc 0c       	add	r12, r12
    9a32:	dd 1c       	adc	r13, r13
    9a34:	e8 94       	clt
    9a36:	c0 f8       	bld	r12, 0
    9a38:	21 e0       	ldi	r18, 0x01	; 1
    9a3a:	d2 22       	and	r13, r18
    9a3c:	ec 0d       	add	r30, r12
    9a3e:	fd 1d       	adc	r31, r13
    9a40:	40 82       	st	Z, r4
    9a42:	51 82       	std	Z+1, r5	; 0x01
    9a44:	36 c0       	rjmp	.+108    	; 0x9ab2 <put_fat+0x1d8>
    9a46:	ed 81       	ldd	r30, Y+5	; 0x05
    9a48:	fe 81       	ldd	r31, Y+6	; 0x06
    9a4a:	85 a1       	ldd	r24, Z+37	; 0x25
    9a4c:	96 a1       	ldd	r25, Z+38	; 0x26
    9a4e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a50:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a52:	27 e0       	ldi	r18, 0x07	; 7
    9a54:	76 95       	lsr	r23
    9a56:	67 95       	ror	r22
    9a58:	57 95       	ror	r21
    9a5a:	47 95       	ror	r20
    9a5c:	2a 95       	dec	r18
    9a5e:	d1 f7       	brne	.-12     	; 0x9a54 <put_fat+0x17a>
    9a60:	48 0f       	add	r20, r24
    9a62:	59 1f       	adc	r21, r25
    9a64:	6a 1f       	adc	r22, r26
    9a66:	7b 1f       	adc	r23, r27
    9a68:	cf 01       	movw	r24, r30
    9a6a:	62 dc       	rcall	.-1852   	; 0x9330 <move_window>
    9a6c:	5c 01       	movw	r10, r24
    9a6e:	89 2b       	or	r24, r25
    9a70:	41 f5       	brne	.+80     	; 0x9ac2 <put_fat+0x1e8>
    9a72:	4d 81       	ldd	r20, Y+5	; 0x05
    9a74:	5e 81       	ldd	r21, Y+6	; 0x06
    9a76:	4b 5c       	subi	r20, 0xCB	; 203
    9a78:	5f 4f       	sbci	r21, 0xFF	; 255
    9a7a:	cc 0c       	add	r12, r12
    9a7c:	dd 1c       	adc	r13, r13
    9a7e:	cc 0c       	add	r12, r12
    9a80:	dd 1c       	adc	r13, r13
    9a82:	fc ef       	ldi	r31, 0xFC	; 252
    9a84:	cf 22       	and	r12, r31
    9a86:	f1 e0       	ldi	r31, 0x01	; 1
    9a88:	df 22       	and	r13, r31
    9a8a:	c4 0e       	add	r12, r20
    9a8c:	d5 1e       	adc	r13, r21
    9a8e:	c6 01       	movw	r24, r12
    9a90:	8d d8       	rcall	.-3814   	; 0x8bac <ld_dword>
    9a92:	2f e0       	ldi	r18, 0x0F	; 15
    9a94:	72 22       	and	r7, r18
    9a96:	dc 01       	movw	r26, r24
    9a98:	cb 01       	movw	r24, r22
    9a9a:	88 27       	eor	r24, r24
    9a9c:	99 27       	eor	r25, r25
    9a9e:	aa 27       	eor	r26, r26
    9aa0:	b0 7f       	andi	r27, 0xF0	; 240
    9aa2:	b3 01       	movw	r22, r6
    9aa4:	a2 01       	movw	r20, r4
    9aa6:	48 2b       	or	r20, r24
    9aa8:	59 2b       	or	r21, r25
    9aaa:	6a 2b       	or	r22, r26
    9aac:	7b 2b       	or	r23, r27
    9aae:	c6 01       	movw	r24, r12
    9ab0:	92 d8       	rcall	.-3804   	; 0x8bd6 <st_dword>
    9ab2:	81 e0       	ldi	r24, 0x01	; 1
    9ab4:	ed 81       	ldd	r30, Y+5	; 0x05
    9ab6:	fe 81       	ldd	r31, Y+6	; 0x06
    9ab8:	83 83       	std	Z+3, r24	; 0x03
    9aba:	03 c0       	rjmp	.+6      	; 0x9ac2 <put_fat+0x1e8>
    9abc:	82 e0       	ldi	r24, 0x02	; 2
    9abe:	a8 2e       	mov	r10, r24
    9ac0:	b1 2c       	mov	r11, r1
    9ac2:	c5 01       	movw	r24, r10
    9ac4:	26 96       	adiw	r28, 0x06	; 6
    9ac6:	e2 e1       	ldi	r30, 0x12	; 18
    9ac8:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00009acc <get_fat.isra.9>:
    9acc:	a0 e0       	ldi	r26, 0x00	; 0
    9ace:	b0 e0       	ldi	r27, 0x00	; 0
    9ad0:	ec e6       	ldi	r30, 0x6C	; 108
    9ad2:	fd e4       	ldi	r31, 0x4D	; 77
    9ad4:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
    9ad8:	42 30       	cpi	r20, 0x02	; 2
    9ada:	51 05       	cpc	r21, r1
    9adc:	61 05       	cpc	r22, r1
    9ade:	71 05       	cpc	r23, r1
    9ae0:	08 f4       	brcc	.+2      	; 0x9ae4 <get_fat.isra.9+0x18>
    9ae2:	9f c0       	rjmp	.+318    	; 0x9c22 <get_fat.isra.9+0x156>
    9ae4:	fc 01       	movw	r30, r24
    9ae6:	01 8d       	ldd	r16, Z+25	; 0x19
    9ae8:	12 8d       	ldd	r17, Z+26	; 0x1a
    9aea:	23 8d       	ldd	r18, Z+27	; 0x1b
    9aec:	34 8d       	ldd	r19, Z+28	; 0x1c
    9aee:	40 17       	cp	r20, r16
    9af0:	51 07       	cpc	r21, r17
    9af2:	62 07       	cpc	r22, r18
    9af4:	73 07       	cpc	r23, r19
    9af6:	08 f0       	brcs	.+2      	; 0x9afa <get_fat.isra.9+0x2e>
    9af8:	94 c0       	rjmp	.+296    	; 0x9c22 <get_fat.isra.9+0x156>
    9afa:	6a 01       	movw	r12, r20
    9afc:	7b 01       	movw	r14, r22
    9afe:	8c 01       	movw	r16, r24
    9b00:	80 81       	ld	r24, Z
    9b02:	82 30       	cpi	r24, 0x02	; 2
    9b04:	09 f4       	brne	.+2      	; 0x9b08 <get_fat.isra.9+0x3c>
    9b06:	4b c0       	rjmp	.+150    	; 0x9b9e <get_fat.isra.9+0xd2>
    9b08:	83 30       	cpi	r24, 0x03	; 3
    9b0a:	09 f4       	brne	.+2      	; 0x9b0e <get_fat.isra.9+0x42>
    9b0c:	67 c0       	rjmp	.+206    	; 0x9bdc <get_fat.isra.9+0x110>
    9b0e:	81 30       	cpi	r24, 0x01	; 1
    9b10:	09 f0       	breq	.+2      	; 0x9b14 <get_fat.isra.9+0x48>
    9b12:	87 c0       	rjmp	.+270    	; 0x9c22 <get_fat.isra.9+0x156>
    9b14:	ea 01       	movw	r28, r20
    9b16:	d6 95       	lsr	r29
    9b18:	c7 95       	ror	r28
    9b1a:	cc 0d       	add	r28, r12
    9b1c:	dd 1d       	adc	r29, r13
    9b1e:	ce 01       	movw	r24, r28
    9b20:	89 2f       	mov	r24, r25
    9b22:	99 27       	eor	r25, r25
    9b24:	86 95       	lsr	r24
    9b26:	45 a1       	ldd	r20, Z+37	; 0x25
    9b28:	56 a1       	ldd	r21, Z+38	; 0x26
    9b2a:	67 a1       	ldd	r22, Z+39	; 0x27
    9b2c:	70 a5       	ldd	r23, Z+40	; 0x28
    9b2e:	48 0f       	add	r20, r24
    9b30:	59 1f       	adc	r21, r25
    9b32:	61 1d       	adc	r22, r1
    9b34:	71 1d       	adc	r23, r1
    9b36:	cf 01       	movw	r24, r30
    9b38:	fb db       	rcall	.-2058   	; 0x9330 <move_window>
    9b3a:	89 2b       	or	r24, r25
    9b3c:	21 f0       	breq	.+8      	; 0x9b46 <get_fat.isra.9+0x7a>
    9b3e:	6f ef       	ldi	r22, 0xFF	; 255
    9b40:	7f ef       	ldi	r23, 0xFF	; 255
    9b42:	cb 01       	movw	r24, r22
    9b44:	72 c0       	rjmp	.+228    	; 0x9c2a <get_fat.isra.9+0x15e>
    9b46:	5e 01       	movw	r10, r28
    9b48:	ff ef       	ldi	r31, 0xFF	; 255
    9b4a:	af 1a       	sub	r10, r31
    9b4c:	bf 0a       	sbc	r11, r31
    9b4e:	d1 70       	andi	r29, 0x01	; 1
    9b50:	c0 0f       	add	r28, r16
    9b52:	d1 1f       	adc	r29, r17
    9b54:	cd a9       	ldd	r28, Y+53	; 0x35
    9b56:	c5 01       	movw	r24, r10
    9b58:	89 2f       	mov	r24, r25
    9b5a:	99 27       	eor	r25, r25
    9b5c:	86 95       	lsr	r24
    9b5e:	f8 01       	movw	r30, r16
    9b60:	45 a1       	ldd	r20, Z+37	; 0x25
    9b62:	56 a1       	ldd	r21, Z+38	; 0x26
    9b64:	67 a1       	ldd	r22, Z+39	; 0x27
    9b66:	70 a5       	ldd	r23, Z+40	; 0x28
    9b68:	48 0f       	add	r20, r24
    9b6a:	59 1f       	adc	r21, r25
    9b6c:	61 1d       	adc	r22, r1
    9b6e:	71 1d       	adc	r23, r1
    9b70:	c8 01       	movw	r24, r16
    9b72:	de db       	rcall	.-2116   	; 0x9330 <move_window>
    9b74:	89 2b       	or	r24, r25
    9b76:	19 f7       	brne	.-58     	; 0x9b3e <get_fat.isra.9+0x72>
    9b78:	f1 e0       	ldi	r31, 0x01	; 1
    9b7a:	bf 22       	and	r11, r31
    9b7c:	f8 01       	movw	r30, r16
    9b7e:	ea 0d       	add	r30, r10
    9b80:	fb 1d       	adc	r31, r11
    9b82:	85 a9       	ldd	r24, Z+53	; 0x35
    9b84:	6c 2f       	mov	r22, r28
    9b86:	70 e0       	ldi	r23, 0x00	; 0
    9b88:	78 2b       	or	r23, r24
    9b8a:	c0 fe       	sbrs	r12, 0
    9b8c:	06 c0       	rjmp	.+12     	; 0x9b9a <get_fat.isra.9+0xce>
    9b8e:	54 e0       	ldi	r21, 0x04	; 4
    9b90:	76 95       	lsr	r23
    9b92:	67 95       	ror	r22
    9b94:	5a 95       	dec	r21
    9b96:	e1 f7       	brne	.-8      	; 0x9b90 <get_fat.isra.9+0xc4>
    9b98:	1e c0       	rjmp	.+60     	; 0x9bd6 <get_fat.isra.9+0x10a>
    9b9a:	7f 70       	andi	r23, 0x0F	; 15
    9b9c:	1c c0       	rjmp	.+56     	; 0x9bd6 <get_fat.isra.9+0x10a>
    9b9e:	77 27       	eor	r23, r23
    9ba0:	6f 2d       	mov	r22, r15
    9ba2:	5e 2d       	mov	r21, r14
    9ba4:	4d 2d       	mov	r20, r13
    9ba6:	85 a1       	ldd	r24, Z+37	; 0x25
    9ba8:	96 a1       	ldd	r25, Z+38	; 0x26
    9baa:	a7 a1       	ldd	r26, Z+39	; 0x27
    9bac:	b0 a5       	ldd	r27, Z+40	; 0x28
    9bae:	48 0f       	add	r20, r24
    9bb0:	59 1f       	adc	r21, r25
    9bb2:	6a 1f       	adc	r22, r26
    9bb4:	7b 1f       	adc	r23, r27
    9bb6:	cf 01       	movw	r24, r30
    9bb8:	bb db       	rcall	.-2186   	; 0x9330 <move_window>
    9bba:	89 2b       	or	r24, r25
    9bbc:	09 f0       	breq	.+2      	; 0x9bc0 <get_fat.isra.9+0xf4>
    9bbe:	bf cf       	rjmp	.-130    	; 0x9b3e <get_fat.isra.9+0x72>
    9bc0:	cc 0c       	add	r12, r12
    9bc2:	dd 1c       	adc	r13, r13
    9bc4:	e8 94       	clt
    9bc6:	c0 f8       	bld	r12, 0
    9bc8:	f1 e0       	ldi	r31, 0x01	; 1
    9bca:	df 22       	and	r13, r31
    9bcc:	f8 01       	movw	r30, r16
    9bce:	ec 0d       	add	r30, r12
    9bd0:	fd 1d       	adc	r31, r13
    9bd2:	65 a9       	ldd	r22, Z+53	; 0x35
    9bd4:	76 a9       	ldd	r23, Z+54	; 0x36
    9bd6:	80 e0       	ldi	r24, 0x00	; 0
    9bd8:	90 e0       	ldi	r25, 0x00	; 0
    9bda:	27 c0       	rjmp	.+78     	; 0x9c2a <get_fat.isra.9+0x15e>
    9bdc:	85 a1       	ldd	r24, Z+37	; 0x25
    9bde:	96 a1       	ldd	r25, Z+38	; 0x26
    9be0:	a7 a1       	ldd	r26, Z+39	; 0x27
    9be2:	b0 a5       	ldd	r27, Z+40	; 0x28
    9be4:	27 e0       	ldi	r18, 0x07	; 7
    9be6:	76 95       	lsr	r23
    9be8:	67 95       	ror	r22
    9bea:	57 95       	ror	r21
    9bec:	47 95       	ror	r20
    9bee:	2a 95       	dec	r18
    9bf0:	d1 f7       	brne	.-12     	; 0x9be6 <get_fat.isra.9+0x11a>
    9bf2:	48 0f       	add	r20, r24
    9bf4:	59 1f       	adc	r21, r25
    9bf6:	6a 1f       	adc	r22, r26
    9bf8:	7b 1f       	adc	r23, r27
    9bfa:	cf 01       	movw	r24, r30
    9bfc:	99 db       	rcall	.-2254   	; 0x9330 <move_window>
    9bfe:	89 2b       	or	r24, r25
    9c00:	09 f0       	breq	.+2      	; 0x9c04 <get_fat.isra.9+0x138>
    9c02:	9d cf       	rjmp	.-198    	; 0x9b3e <get_fat.isra.9+0x72>
    9c04:	0b 5c       	subi	r16, 0xCB	; 203
    9c06:	1f 4f       	sbci	r17, 0xFF	; 255
    9c08:	cc 0c       	add	r12, r12
    9c0a:	dd 1c       	adc	r13, r13
    9c0c:	cc 0c       	add	r12, r12
    9c0e:	dd 1c       	adc	r13, r13
    9c10:	c6 01       	movw	r24, r12
    9c12:	8c 7f       	andi	r24, 0xFC	; 252
    9c14:	91 70       	andi	r25, 0x01	; 1
    9c16:	80 0f       	add	r24, r16
    9c18:	91 1f       	adc	r25, r17
    9c1a:	0e 94 d6 45 	call	0x8bac	; 0x8bac <ld_dword>
    9c1e:	9f 70       	andi	r25, 0x0F	; 15
    9c20:	04 c0       	rjmp	.+8      	; 0x9c2a <get_fat.isra.9+0x15e>
    9c22:	61 e0       	ldi	r22, 0x01	; 1
    9c24:	70 e0       	ldi	r23, 0x00	; 0
    9c26:	80 e0       	ldi	r24, 0x00	; 0
    9c28:	90 e0       	ldi	r25, 0x00	; 0
    9c2a:	cd b7       	in	r28, 0x3d	; 61
    9c2c:	de b7       	in	r29, 0x3e	; 62
    9c2e:	ea e0       	ldi	r30, 0x0A	; 10
    9c30:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

00009c34 <dir_sdi>:
    9c34:	a0 e0       	ldi	r26, 0x00	; 0
    9c36:	b0 e0       	ldi	r27, 0x00	; 0
    9c38:	e0 e2       	ldi	r30, 0x20	; 32
    9c3a:	fe e4       	ldi	r31, 0x4E	; 78
    9c3c:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
    9c40:	ec 01       	movw	r28, r24
    9c42:	6a 01       	movw	r12, r20
    9c44:	7b 01       	movw	r14, r22
    9c46:	41 15       	cp	r20, r1
    9c48:	51 05       	cpc	r21, r1
    9c4a:	80 e2       	ldi	r24, 0x20	; 32
    9c4c:	68 07       	cpc	r22, r24
    9c4e:	71 05       	cpc	r23, r1
    9c50:	18 f0       	brcs	.+6      	; 0x9c58 <dir_sdi+0x24>
    9c52:	82 e0       	ldi	r24, 0x02	; 2
    9c54:	90 e0       	ldi	r25, 0x00	; 0
    9c56:	aa c0       	rjmp	.+340    	; 0x9dac <dir_sdi+0x178>
    9c58:	db 01       	movw	r26, r22
    9c5a:	ca 01       	movw	r24, r20
    9c5c:	8f 71       	andi	r24, 0x1F	; 31
    9c5e:	99 27       	eor	r25, r25
    9c60:	aa 27       	eor	r26, r26
    9c62:	bb 27       	eor	r27, r27
    9c64:	89 2b       	or	r24, r25
    9c66:	8a 2b       	or	r24, r26
    9c68:	8b 2b       	or	r24, r27
    9c6a:	99 f7       	brne	.-26     	; 0x9c52 <dir_sdi+0x1e>
    9c6c:	08 81       	ld	r16, Y
    9c6e:	19 81       	ldd	r17, Y+1	; 0x01
    9c70:	4e 87       	std	Y+14, r20	; 0x0e
    9c72:	5f 87       	std	Y+15, r21	; 0x0f
    9c74:	68 8b       	std	Y+16, r22	; 0x10
    9c76:	79 8b       	std	Y+17, r23	; 0x11
    9c78:	8e 80       	ldd	r8, Y+6	; 0x06
    9c7a:	9f 80       	ldd	r9, Y+7	; 0x07
    9c7c:	a8 84       	ldd	r10, Y+8	; 0x08
    9c7e:	b9 84       	ldd	r11, Y+9	; 0x09
    9c80:	81 14       	cp	r8, r1
    9c82:	91 04       	cpc	r9, r1
    9c84:	a1 04       	cpc	r10, r1
    9c86:	b1 04       	cpc	r11, r1
    9c88:	51 f5       	brne	.+84     	; 0x9cde <dir_sdi+0xaa>
    9c8a:	f8 01       	movw	r30, r16
    9c8c:	80 81       	ld	r24, Z
    9c8e:	83 30       	cpi	r24, 0x03	; 3
    9c90:	40 f0       	brcs	.+16     	; 0x9ca2 <dir_sdi+0x6e>
    9c92:	81 a5       	ldd	r24, Z+41	; 0x29
    9c94:	92 a5       	ldd	r25, Z+42	; 0x2a
    9c96:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9c98:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9c9a:	00 97       	sbiw	r24, 0x00	; 0
    9c9c:	a1 05       	cpc	r26, r1
    9c9e:	b1 05       	cpc	r27, r1
    9ca0:	e1 f4       	brne	.+56     	; 0x9cda <dir_sdi+0xa6>
    9ca2:	f8 01       	movw	r30, r16
    9ca4:	87 81       	ldd	r24, Z+7	; 0x07
    9ca6:	90 85       	ldd	r25, Z+8	; 0x08
    9ca8:	a0 e0       	ldi	r26, 0x00	; 0
    9caa:	b0 e0       	ldi	r27, 0x00	; 0
    9cac:	b7 01       	movw	r22, r14
    9cae:	a6 01       	movw	r20, r12
    9cb0:	25 e0       	ldi	r18, 0x05	; 5
    9cb2:	76 95       	lsr	r23
    9cb4:	67 95       	ror	r22
    9cb6:	57 95       	ror	r21
    9cb8:	47 95       	ror	r20
    9cba:	2a 95       	dec	r18
    9cbc:	d1 f7       	brne	.-12     	; 0x9cb2 <dir_sdi+0x7e>
    9cbe:	48 17       	cp	r20, r24
    9cc0:	59 07       	cpc	r21, r25
    9cc2:	6a 07       	cpc	r22, r26
    9cc4:	7b 07       	cpc	r23, r27
    9cc6:	28 f6       	brcc	.-118    	; 0x9c52 <dir_sdi+0x1e>
    9cc8:	81 a5       	ldd	r24, Z+41	; 0x29
    9cca:	92 a5       	ldd	r25, Z+42	; 0x2a
    9ccc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9cce:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9cd0:	8e 8b       	std	Y+22, r24	; 0x16
    9cd2:	9f 8b       	std	Y+23, r25	; 0x17
    9cd4:	a8 8f       	std	Y+24, r26	; 0x18
    9cd6:	b9 8f       	std	Y+25, r27	; 0x19
    9cd8:	3e c0       	rjmp	.+124    	; 0x9d56 <dir_sdi+0x122>
    9cda:	4c 01       	movw	r8, r24
    9cdc:	5d 01       	movw	r10, r26
    9cde:	f8 01       	movw	r30, r16
    9ce0:	41 84       	ldd	r4, Z+9	; 0x09
    9ce2:	52 84       	ldd	r5, Z+10	; 0x0a
    9ce4:	61 2c       	mov	r6, r1
    9ce6:	71 2c       	mov	r7, r1
    9ce8:	39 e0       	ldi	r19, 0x09	; 9
    9cea:	44 0c       	add	r4, r4
    9cec:	55 1c       	adc	r5, r5
    9cee:	66 1c       	adc	r6, r6
    9cf0:	77 1c       	adc	r7, r7
    9cf2:	3a 95       	dec	r19
    9cf4:	d1 f7       	brne	.-12     	; 0x9cea <dir_sdi+0xb6>
    9cf6:	b5 01       	movw	r22, r10
    9cf8:	a4 01       	movw	r20, r8
    9cfa:	c4 14       	cp	r12, r4
    9cfc:	d5 04       	cpc	r13, r5
    9cfe:	e6 04       	cpc	r14, r6
    9d00:	f7 04       	cpc	r15, r7
    9d02:	10 f1       	brcs	.+68     	; 0x9d48 <dir_sdi+0x114>
    9d04:	88 81       	ld	r24, Y
    9d06:	99 81       	ldd	r25, Y+1	; 0x01
    9d08:	e1 de       	rcall	.-574    	; 0x9acc <get_fat.isra.9>
    9d0a:	4b 01       	movw	r8, r22
    9d0c:	5c 01       	movw	r10, r24
    9d0e:	6f 3f       	cpi	r22, 0xFF	; 255
    9d10:	7f 4f       	sbci	r23, 0xFF	; 255
    9d12:	8f 4f       	sbci	r24, 0xFF	; 255
    9d14:	9f 4f       	sbci	r25, 0xFF	; 255
    9d16:	09 f4       	brne	.+2      	; 0x9d1a <dir_sdi+0xe6>
    9d18:	47 c0       	rjmp	.+142    	; 0x9da8 <dir_sdi+0x174>
    9d1a:	82 e0       	ldi	r24, 0x02	; 2
    9d1c:	88 16       	cp	r8, r24
    9d1e:	91 04       	cpc	r9, r1
    9d20:	a1 04       	cpc	r10, r1
    9d22:	b1 04       	cpc	r11, r1
    9d24:	08 f4       	brcc	.+2      	; 0x9d28 <dir_sdi+0xf4>
    9d26:	95 cf       	rjmp	.-214    	; 0x9c52 <dir_sdi+0x1e>
    9d28:	f8 01       	movw	r30, r16
    9d2a:	81 8d       	ldd	r24, Z+25	; 0x19
    9d2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    9d2e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9d30:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9d32:	88 16       	cp	r8, r24
    9d34:	99 06       	cpc	r9, r25
    9d36:	aa 06       	cpc	r10, r26
    9d38:	bb 06       	cpc	r11, r27
    9d3a:	08 f0       	brcs	.+2      	; 0x9d3e <dir_sdi+0x10a>
    9d3c:	8a cf       	rjmp	.-236    	; 0x9c52 <dir_sdi+0x1e>
    9d3e:	c4 18       	sub	r12, r4
    9d40:	d5 08       	sbc	r13, r5
    9d42:	e6 08       	sbc	r14, r6
    9d44:	f7 08       	sbc	r15, r7
    9d46:	d7 cf       	rjmp	.-82     	; 0x9cf6 <dir_sdi+0xc2>
    9d48:	c8 01       	movw	r24, r16
    9d4a:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    9d4e:	6e 8b       	std	Y+22, r22	; 0x16
    9d50:	7f 8b       	std	Y+23, r23	; 0x17
    9d52:	88 8f       	std	Y+24, r24	; 0x18
    9d54:	99 8f       	std	Y+25, r25	; 0x19
    9d56:	8a 8a       	std	Y+18, r8	; 0x12
    9d58:	9b 8a       	std	Y+19, r9	; 0x13
    9d5a:	ac 8a       	std	Y+20, r10	; 0x14
    9d5c:	bd 8a       	std	Y+21, r11	; 0x15
    9d5e:	8e 89       	ldd	r24, Y+22	; 0x16
    9d60:	9f 89       	ldd	r25, Y+23	; 0x17
    9d62:	a8 8d       	ldd	r26, Y+24	; 0x18
    9d64:	b9 8d       	ldd	r27, Y+25	; 0x19
    9d66:	00 97       	sbiw	r24, 0x00	; 0
    9d68:	a1 05       	cpc	r26, r1
    9d6a:	b1 05       	cpc	r27, r1
    9d6c:	09 f4       	brne	.+2      	; 0x9d70 <dir_sdi+0x13c>
    9d6e:	71 cf       	rjmp	.-286    	; 0x9c52 <dir_sdi+0x1e>
    9d70:	b7 01       	movw	r22, r14
    9d72:	a6 01       	movw	r20, r12
    9d74:	29 e0       	ldi	r18, 0x09	; 9
    9d76:	76 95       	lsr	r23
    9d78:	67 95       	ror	r22
    9d7a:	57 95       	ror	r21
    9d7c:	47 95       	ror	r20
    9d7e:	2a 95       	dec	r18
    9d80:	d1 f7       	brne	.-12     	; 0x9d76 <dir_sdi+0x142>
    9d82:	84 0f       	add	r24, r20
    9d84:	95 1f       	adc	r25, r21
    9d86:	a6 1f       	adc	r26, r22
    9d88:	b7 1f       	adc	r27, r23
    9d8a:	8e 8b       	std	Y+22, r24	; 0x16
    9d8c:	9f 8b       	std	Y+23, r25	; 0x17
    9d8e:	a8 8f       	std	Y+24, r26	; 0x18
    9d90:	b9 8f       	std	Y+25, r27	; 0x19
    9d92:	0b 5c       	subi	r16, 0xCB	; 203
    9d94:	1f 4f       	sbci	r17, 0xFF	; 255
    9d96:	f1 e0       	ldi	r31, 0x01	; 1
    9d98:	df 22       	and	r13, r31
    9d9a:	c0 0e       	add	r12, r16
    9d9c:	d1 1e       	adc	r13, r17
    9d9e:	db 8e       	std	Y+27, r13	; 0x1b
    9da0:	ca 8e       	std	Y+26, r12	; 0x1a
    9da2:	80 e0       	ldi	r24, 0x00	; 0
    9da4:	90 e0       	ldi	r25, 0x00	; 0
    9da6:	02 c0       	rjmp	.+4      	; 0x9dac <dir_sdi+0x178>
    9da8:	81 e0       	ldi	r24, 0x01	; 1
    9daa:	90 e0       	ldi	r25, 0x00	; 0
    9dac:	cd b7       	in	r28, 0x3d	; 61
    9dae:	de b7       	in	r29, 0x3e	; 62
    9db0:	e0 e1       	ldi	r30, 0x10	; 16
    9db2:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

00009db6 <create_chain>:
    9db6:	a0 e0       	ldi	r26, 0x00	; 0
    9db8:	b0 e0       	ldi	r27, 0x00	; 0
    9dba:	e1 ee       	ldi	r30, 0xE1	; 225
    9dbc:	fe e4       	ldi	r31, 0x4E	; 78
    9dbe:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
    9dc2:	8c 01       	movw	r16, r24
    9dc4:	2a 01       	movw	r4, r20
    9dc6:	3b 01       	movw	r6, r22
    9dc8:	fc 01       	movw	r30, r24
    9dca:	c0 81       	ld	r28, Z
    9dcc:	d1 81       	ldd	r29, Z+1	; 0x01
    9dce:	41 15       	cp	r20, r1
    9dd0:	51 05       	cpc	r21, r1
    9dd2:	61 05       	cpc	r22, r1
    9dd4:	71 05       	cpc	r23, r1
    9dd6:	99 f4       	brne	.+38     	; 0x9dfe <create_chain+0x48>
    9dd8:	8d 84       	ldd	r8, Y+13	; 0x0d
    9dda:	9e 84       	ldd	r9, Y+14	; 0x0e
    9ddc:	af 84       	ldd	r10, Y+15	; 0x0f
    9dde:	b8 88       	ldd	r11, Y+16	; 0x10
    9de0:	81 14       	cp	r8, r1
    9de2:	91 04       	cpc	r9, r1
    9de4:	a1 04       	cpc	r10, r1
    9de6:	b1 04       	cpc	r11, r1
    9de8:	51 f1       	breq	.+84     	; 0x9e3e <create_chain+0x88>
    9dea:	89 8d       	ldd	r24, Y+25	; 0x19
    9dec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9dee:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9df0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9df2:	88 16       	cp	r8, r24
    9df4:	99 06       	cpc	r9, r25
    9df6:	aa 06       	cpc	r10, r26
    9df8:	bb 06       	cpc	r11, r27
    9dfa:	28 f1       	brcs	.+74     	; 0x9e46 <create_chain+0x90>
    9dfc:	20 c0       	rjmp	.+64     	; 0x9e3e <create_chain+0x88>
    9dfe:	ce 01       	movw	r24, r28
    9e00:	65 de       	rcall	.-822    	; 0x9acc <get_fat.isra.9>
    9e02:	62 30       	cpi	r22, 0x02	; 2
    9e04:	71 05       	cpc	r23, r1
    9e06:	81 05       	cpc	r24, r1
    9e08:	91 05       	cpc	r25, r1
    9e0a:	08 f4       	brcc	.+2      	; 0x9e0e <create_chain+0x58>
    9e0c:	ea c0       	rjmp	.+468    	; 0x9fe2 <create_chain+0x22c>
    9e0e:	6f 3f       	cpi	r22, 0xFF	; 255
    9e10:	ff ef       	ldi	r31, 0xFF	; 255
    9e12:	7f 07       	cpc	r23, r31
    9e14:	8f 07       	cpc	r24, r31
    9e16:	9f 07       	cpc	r25, r31
    9e18:	29 f4       	brne	.+10     	; 0x9e24 <create_chain+0x6e>
    9e1a:	4f ef       	ldi	r20, 0xFF	; 255
    9e1c:	3f ef       	ldi	r19, 0xFF	; 255
    9e1e:	2f ef       	ldi	r18, 0xFF	; 255
    9e20:	9f ef       	ldi	r25, 0xFF	; 255
    9e22:	e7 c0       	rjmp	.+462    	; 0x9ff2 <create_chain+0x23c>
    9e24:	c9 8c       	ldd	r12, Y+25	; 0x19
    9e26:	da 8c       	ldd	r13, Y+26	; 0x1a
    9e28:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9e2a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9e2c:	6c 15       	cp	r22, r12
    9e2e:	7d 05       	cpc	r23, r13
    9e30:	8e 05       	cpc	r24, r14
    9e32:	9f 05       	cpc	r25, r15
    9e34:	08 f4       	brcc	.+2      	; 0x9e38 <create_chain+0x82>
    9e36:	da c0       	rjmp	.+436    	; 0x9fec <create_chain+0x236>
    9e38:	53 01       	movw	r10, r6
    9e3a:	42 01       	movw	r8, r4
    9e3c:	04 c0       	rjmp	.+8      	; 0x9e46 <create_chain+0x90>
    9e3e:	81 2c       	mov	r8, r1
    9e40:	91 2c       	mov	r9, r1
    9e42:	54 01       	movw	r10, r8
    9e44:	83 94       	inc	r8
    9e46:	89 89       	ldd	r24, Y+17	; 0x11
    9e48:	9a 89       	ldd	r25, Y+18	; 0x12
    9e4a:	ab 89       	ldd	r26, Y+19	; 0x13
    9e4c:	bc 89       	ldd	r27, Y+20	; 0x14
    9e4e:	89 2b       	or	r24, r25
    9e50:	8a 2b       	or	r24, r26
    9e52:	8b 2b       	or	r24, r27
    9e54:	11 f4       	brne	.+4      	; 0x9e5a <create_chain+0xa4>
    9e56:	40 e0       	ldi	r20, 0x00	; 0
    9e58:	c5 c0       	rjmp	.+394    	; 0x9fe4 <create_chain+0x22e>
    9e5a:	84 14       	cp	r8, r4
    9e5c:	95 04       	cpc	r9, r5
    9e5e:	a6 04       	cpc	r10, r6
    9e60:	b7 04       	cpc	r11, r7
    9e62:	09 f0       	breq	.+2      	; 0x9e66 <create_chain+0xb0>
    9e64:	46 c0       	rjmp	.+140    	; 0x9ef2 <create_chain+0x13c>
    9e66:	75 01       	movw	r14, r10
    9e68:	64 01       	movw	r12, r8
    9e6a:	2f ef       	ldi	r18, 0xFF	; 255
    9e6c:	c2 1a       	sub	r12, r18
    9e6e:	d2 0a       	sbc	r13, r18
    9e70:	e2 0a       	sbc	r14, r18
    9e72:	f2 0a       	sbc	r15, r18
    9e74:	89 8d       	ldd	r24, Y+25	; 0x19
    9e76:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e78:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e7a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e7c:	c8 16       	cp	r12, r24
    9e7e:	d9 06       	cpc	r13, r25
    9e80:	ea 06       	cpc	r14, r26
    9e82:	fb 06       	cpc	r15, r27
    9e84:	28 f0       	brcs	.+10     	; 0x9e90 <create_chain+0xda>
    9e86:	92 e0       	ldi	r25, 0x02	; 2
    9e88:	c9 2e       	mov	r12, r25
    9e8a:	d1 2c       	mov	r13, r1
    9e8c:	e1 2c       	mov	r14, r1
    9e8e:	f1 2c       	mov	r15, r1
    9e90:	b7 01       	movw	r22, r14
    9e92:	a6 01       	movw	r20, r12
    9e94:	f8 01       	movw	r30, r16
    9e96:	80 81       	ld	r24, Z
    9e98:	91 81       	ldd	r25, Z+1	; 0x01
    9e9a:	18 de       	rcall	.-976    	; 0x9acc <get_fat.isra.9>
    9e9c:	61 30       	cpi	r22, 0x01	; 1
    9e9e:	71 05       	cpc	r23, r1
    9ea0:	81 05       	cpc	r24, r1
    9ea2:	91 05       	cpc	r25, r1
    9ea4:	09 f4       	brne	.+2      	; 0x9ea8 <create_chain+0xf2>
    9ea6:	9d c0       	rjmp	.+314    	; 0x9fe2 <create_chain+0x22c>
    9ea8:	6f 3f       	cpi	r22, 0xFF	; 255
    9eaa:	ff ef       	ldi	r31, 0xFF	; 255
    9eac:	7f 07       	cpc	r23, r31
    9eae:	8f 07       	cpc	r24, r31
    9eb0:	9f 07       	cpc	r25, r31
    9eb2:	09 f4       	brne	.+2      	; 0x9eb6 <create_chain+0x100>
    9eb4:	b2 cf       	rjmp	.-156    	; 0x9e1a <create_chain+0x64>
    9eb6:	67 2b       	or	r22, r23
    9eb8:	68 2b       	or	r22, r24
    9eba:	69 2b       	or	r22, r25
    9ebc:	a9 f0       	breq	.+42     	; 0x9ee8 <create_chain+0x132>
    9ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    9ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    9ec2:	af 85       	ldd	r26, Y+15	; 0x0f
    9ec4:	b8 89       	ldd	r27, Y+16	; 0x10
    9ec6:	82 30       	cpi	r24, 0x02	; 2
    9ec8:	91 05       	cpc	r25, r1
    9eca:	a1 05       	cpc	r26, r1
    9ecc:	b1 05       	cpc	r27, r1
    9ece:	88 f0       	brcs	.+34     	; 0x9ef2 <create_chain+0x13c>
    9ed0:	49 8d       	ldd	r20, Y+25	; 0x19
    9ed2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9ed4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9ed6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9ed8:	84 17       	cp	r24, r20
    9eda:	95 07       	cpc	r25, r21
    9edc:	a6 07       	cpc	r26, r22
    9ede:	b7 07       	cpc	r27, r23
    9ee0:	40 f4       	brcc	.+16     	; 0x9ef2 <create_chain+0x13c>
    9ee2:	4c 01       	movw	r8, r24
    9ee4:	5d 01       	movw	r10, r26
    9ee6:	05 c0       	rjmp	.+10     	; 0x9ef2 <create_chain+0x13c>
    9ee8:	c1 14       	cp	r12, r1
    9eea:	d1 04       	cpc	r13, r1
    9eec:	e1 04       	cpc	r14, r1
    9eee:	f1 04       	cpc	r15, r1
    9ef0:	c9 f5       	brne	.+114    	; 0x9f64 <create_chain+0x1ae>
    9ef2:	75 01       	movw	r14, r10
    9ef4:	64 01       	movw	r12, r8
    9ef6:	2f ef       	ldi	r18, 0xFF	; 255
    9ef8:	c2 1a       	sub	r12, r18
    9efa:	d2 0a       	sbc	r13, r18
    9efc:	e2 0a       	sbc	r14, r18
    9efe:	f2 0a       	sbc	r15, r18
    9f00:	89 8d       	ldd	r24, Y+25	; 0x19
    9f02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f04:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f06:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f08:	c8 16       	cp	r12, r24
    9f0a:	d9 06       	cpc	r13, r25
    9f0c:	ea 06       	cpc	r14, r26
    9f0e:	fb 06       	cpc	r15, r27
    9f10:	60 f0       	brcs	.+24     	; 0x9f2a <create_chain+0x174>
    9f12:	82 e0       	ldi	r24, 0x02	; 2
    9f14:	88 16       	cp	r8, r24
    9f16:	91 04       	cpc	r9, r1
    9f18:	a1 04       	cpc	r10, r1
    9f1a:	b1 04       	cpc	r11, r1
    9f1c:	08 f4       	brcc	.+2      	; 0x9f20 <create_chain+0x16a>
    9f1e:	9b cf       	rjmp	.-202    	; 0x9e56 <create_chain+0xa0>
    9f20:	82 e0       	ldi	r24, 0x02	; 2
    9f22:	c8 2e       	mov	r12, r24
    9f24:	d1 2c       	mov	r13, r1
    9f26:	e1 2c       	mov	r14, r1
    9f28:	f1 2c       	mov	r15, r1
    9f2a:	b7 01       	movw	r22, r14
    9f2c:	a6 01       	movw	r20, r12
    9f2e:	f8 01       	movw	r30, r16
    9f30:	80 81       	ld	r24, Z
    9f32:	91 81       	ldd	r25, Z+1	; 0x01
    9f34:	cb dd       	rcall	.-1130   	; 0x9acc <get_fat.isra.9>
    9f36:	61 15       	cp	r22, r1
    9f38:	71 05       	cpc	r23, r1
    9f3a:	81 05       	cpc	r24, r1
    9f3c:	91 05       	cpc	r25, r1
    9f3e:	91 f0       	breq	.+36     	; 0x9f64 <create_chain+0x1ae>
    9f40:	61 30       	cpi	r22, 0x01	; 1
    9f42:	71 05       	cpc	r23, r1
    9f44:	81 05       	cpc	r24, r1
    9f46:	91 05       	cpc	r25, r1
    9f48:	09 f4       	brne	.+2      	; 0x9f4c <create_chain+0x196>
    9f4a:	4b c0       	rjmp	.+150    	; 0x9fe2 <create_chain+0x22c>
    9f4c:	6f 3f       	cpi	r22, 0xFF	; 255
    9f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f50:	8f 4f       	sbci	r24, 0xFF	; 255
    9f52:	9f 4f       	sbci	r25, 0xFF	; 255
    9f54:	09 f4       	brne	.+2      	; 0x9f58 <create_chain+0x1a2>
    9f56:	61 cf       	rjmp	.-318    	; 0x9e1a <create_chain+0x64>
    9f58:	c8 14       	cp	r12, r8
    9f5a:	d9 04       	cpc	r13, r9
    9f5c:	ea 04       	cpc	r14, r10
    9f5e:	fb 04       	cpc	r15, r11
    9f60:	51 f6       	brne	.-108    	; 0x9ef6 <create_chain+0x140>
    9f62:	79 cf       	rjmp	.-270    	; 0x9e56 <create_chain+0xa0>
    9f64:	0f ef       	ldi	r16, 0xFF	; 255
    9f66:	1f ef       	ldi	r17, 0xFF	; 255
    9f68:	98 01       	movw	r18, r16
    9f6a:	b7 01       	movw	r22, r14
    9f6c:	a6 01       	movw	r20, r12
    9f6e:	ce 01       	movw	r24, r28
    9f70:	b4 dc       	rcall	.-1688   	; 0x98da <put_fat>
    9f72:	00 97       	sbiw	r24, 0x00	; 0
    9f74:	99 f5       	brne	.+102    	; 0x9fdc <create_chain+0x226>
    9f76:	41 14       	cp	r4, r1
    9f78:	51 04       	cpc	r5, r1
    9f7a:	61 04       	cpc	r6, r1
    9f7c:	71 04       	cpc	r7, r1
    9f7e:	e9 f4       	brne	.+58     	; 0x9fba <create_chain+0x204>
    9f80:	cd 86       	std	Y+13, r12	; 0x0d
    9f82:	de 86       	std	Y+14, r13	; 0x0e
    9f84:	ef 86       	std	Y+15, r14	; 0x0f
    9f86:	f8 8a       	std	Y+16, r15	; 0x10
    9f88:	89 89       	ldd	r24, Y+17	; 0x11
    9f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    9f8c:	ab 89       	ldd	r26, Y+19	; 0x13
    9f8e:	bc 89       	ldd	r27, Y+20	; 0x14
    9f90:	49 8d       	ldd	r20, Y+25	; 0x19
    9f92:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f94:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f96:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f98:	42 50       	subi	r20, 0x02	; 2
    9f9a:	51 09       	sbc	r21, r1
    9f9c:	61 09       	sbc	r22, r1
    9f9e:	71 09       	sbc	r23, r1
    9fa0:	48 17       	cp	r20, r24
    9fa2:	59 07       	cpc	r21, r25
    9fa4:	6a 07       	cpc	r22, r26
    9fa6:	7b 07       	cpc	r23, r27
    9fa8:	88 f0       	brcs	.+34     	; 0x9fcc <create_chain+0x216>
    9faa:	01 97       	sbiw	r24, 0x01	; 1
    9fac:	a1 09       	sbc	r26, r1
    9fae:	b1 09       	sbc	r27, r1
    9fb0:	89 8b       	std	Y+17, r24	; 0x11
    9fb2:	9a 8b       	std	Y+18, r25	; 0x12
    9fb4:	ab 8b       	std	Y+19, r26	; 0x13
    9fb6:	bc 8b       	std	Y+20, r27	; 0x14
    9fb8:	09 c0       	rjmp	.+18     	; 0x9fcc <create_chain+0x216>
    9fba:	97 01       	movw	r18, r14
    9fbc:	86 01       	movw	r16, r12
    9fbe:	b3 01       	movw	r22, r6
    9fc0:	a2 01       	movw	r20, r4
    9fc2:	ce 01       	movw	r24, r28
    9fc4:	8a dc       	rcall	.-1772   	; 0x98da <put_fat>
    9fc6:	00 97       	sbiw	r24, 0x00	; 0
    9fc8:	d9 f2       	breq	.-74     	; 0x9f80 <create_chain+0x1ca>
    9fca:	08 c0       	rjmp	.+16     	; 0x9fdc <create_chain+0x226>
    9fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    9fce:	81 60       	ori	r24, 0x01	; 1
    9fd0:	8c 83       	std	Y+4, r24	; 0x04
    9fd2:	4c 2d       	mov	r20, r12
    9fd4:	3d 2d       	mov	r19, r13
    9fd6:	2e 2d       	mov	r18, r14
    9fd8:	9f 2d       	mov	r25, r15
    9fda:	0b c0       	rjmp	.+22     	; 0x9ff2 <create_chain+0x23c>
    9fdc:	01 97       	sbiw	r24, 0x01	; 1
    9fde:	09 f4       	brne	.+2      	; 0x9fe2 <create_chain+0x22c>
    9fe0:	1c cf       	rjmp	.-456    	; 0x9e1a <create_chain+0x64>
    9fe2:	41 e0       	ldi	r20, 0x01	; 1
    9fe4:	30 e0       	ldi	r19, 0x00	; 0
    9fe6:	20 e0       	ldi	r18, 0x00	; 0
    9fe8:	90 e0       	ldi	r25, 0x00	; 0
    9fea:	03 c0       	rjmp	.+6      	; 0x9ff2 <create_chain+0x23c>
    9fec:	46 2f       	mov	r20, r22
    9fee:	37 2f       	mov	r19, r23
    9ff0:	28 2f       	mov	r18, r24
    9ff2:	64 2f       	mov	r22, r20
    9ff4:	73 2f       	mov	r23, r19
    9ff6:	82 2f       	mov	r24, r18
    9ff8:	cd b7       	in	r28, 0x3d	; 61
    9ffa:	de b7       	in	r29, 0x3e	; 62
    9ffc:	e0 e1       	ldi	r30, 0x10	; 16
    9ffe:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

0000a002 <remove_chain>:
    a002:	4f 92       	push	r4
    a004:	5f 92       	push	r5
    a006:	6f 92       	push	r6
    a008:	7f 92       	push	r7
    a00a:	af 92       	push	r10
    a00c:	bf 92       	push	r11
    a00e:	cf 92       	push	r12
    a010:	df 92       	push	r13
    a012:	ef 92       	push	r14
    a014:	ff 92       	push	r15
    a016:	0f 93       	push	r16
    a018:	1f 93       	push	r17
    a01a:	cf 93       	push	r28
    a01c:	df 93       	push	r29
    a01e:	5c 01       	movw	r10, r24
    a020:	6a 01       	movw	r12, r20
    a022:	7b 01       	movw	r14, r22
    a024:	b9 01       	movw	r22, r18
    a026:	a8 01       	movw	r20, r16
    a028:	22 e0       	ldi	r18, 0x02	; 2
    a02a:	c2 16       	cp	r12, r18
    a02c:	d1 04       	cpc	r13, r1
    a02e:	e1 04       	cpc	r14, r1
    a030:	f1 04       	cpc	r15, r1
    a032:	10 f4       	brcc	.+4      	; 0xa038 <remove_chain+0x36>
    a034:	22 e0       	ldi	r18, 0x02	; 2
    a036:	27 c0       	rjmp	.+78     	; 0xa086 <remove_chain+0x84>
    a038:	fc 01       	movw	r30, r24
    a03a:	c0 81       	ld	r28, Z
    a03c:	d1 81       	ldd	r29, Z+1	; 0x01
    a03e:	89 8d       	ldd	r24, Y+25	; 0x19
    a040:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a042:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a044:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a046:	c8 16       	cp	r12, r24
    a048:	d9 06       	cpc	r13, r25
    a04a:	ea 06       	cpc	r14, r26
    a04c:	fb 06       	cpc	r15, r27
    a04e:	90 f7       	brcc	.-28     	; 0xa034 <remove_chain+0x32>
    a050:	41 15       	cp	r20, r1
    a052:	51 05       	cpc	r21, r1
    a054:	61 05       	cpc	r22, r1
    a056:	71 05       	cpc	r23, r1
    a058:	41 f0       	breq	.+16     	; 0xa06a <remove_chain+0x68>
    a05a:	0f ef       	ldi	r16, 0xFF	; 255
    a05c:	1f ef       	ldi	r17, 0xFF	; 255
    a05e:	98 01       	movw	r18, r16
    a060:	ce 01       	movw	r24, r28
    a062:	3b dc       	rcall	.-1930   	; 0x98da <put_fat>
    a064:	00 97       	sbiw	r24, 0x00	; 0
    a066:	09 f0       	breq	.+2      	; 0xa06a <remove_chain+0x68>
    a068:	4c c0       	rjmp	.+152    	; 0xa102 <remove_chain+0x100>
    a06a:	b7 01       	movw	r22, r14
    a06c:	a6 01       	movw	r20, r12
    a06e:	f5 01       	movw	r30, r10
    a070:	80 81       	ld	r24, Z
    a072:	91 81       	ldd	r25, Z+1	; 0x01
    a074:	2b dd       	rcall	.-1450   	; 0x9acc <get_fat.isra.9>
    a076:	2b 01       	movw	r4, r22
    a078:	3c 01       	movw	r6, r24
    a07a:	61 15       	cp	r22, r1
    a07c:	71 05       	cpc	r23, r1
    a07e:	81 05       	cpc	r24, r1
    a080:	91 05       	cpc	r25, r1
    a082:	19 f4       	brne	.+6      	; 0xa08a <remove_chain+0x88>
    a084:	20 e0       	ldi	r18, 0x00	; 0
    a086:	90 e0       	ldi	r25, 0x00	; 0
    a088:	3d c0       	rjmp	.+122    	; 0xa104 <remove_chain+0x102>
    a08a:	61 30       	cpi	r22, 0x01	; 1
    a08c:	71 05       	cpc	r23, r1
    a08e:	81 05       	cpc	r24, r1
    a090:	91 05       	cpc	r25, r1
    a092:	81 f2       	breq	.-96     	; 0xa034 <remove_chain+0x32>
    a094:	6f 3f       	cpi	r22, 0xFF	; 255
    a096:	7f 4f       	sbci	r23, 0xFF	; 255
    a098:	8f 4f       	sbci	r24, 0xFF	; 255
    a09a:	9f 4f       	sbci	r25, 0xFF	; 255
    a09c:	81 f1       	breq	.+96     	; 0xa0fe <remove_chain+0xfc>
    a09e:	00 e0       	ldi	r16, 0x00	; 0
    a0a0:	10 e0       	ldi	r17, 0x00	; 0
    a0a2:	98 01       	movw	r18, r16
    a0a4:	b7 01       	movw	r22, r14
    a0a6:	a6 01       	movw	r20, r12
    a0a8:	ce 01       	movw	r24, r28
    a0aa:	17 dc       	rcall	.-2002   	; 0x98da <put_fat>
    a0ac:	00 97       	sbiw	r24, 0x00	; 0
    a0ae:	49 f5       	brne	.+82     	; 0xa102 <remove_chain+0x100>
    a0b0:	89 89       	ldd	r24, Y+17	; 0x11
    a0b2:	9a 89       	ldd	r25, Y+18	; 0x12
    a0b4:	ab 89       	ldd	r26, Y+19	; 0x13
    a0b6:	bc 89       	ldd	r27, Y+20	; 0x14
    a0b8:	49 8d       	ldd	r20, Y+25	; 0x19
    a0ba:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a0bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a0be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a0c0:	6a 01       	movw	r12, r20
    a0c2:	7b 01       	movw	r14, r22
    a0c4:	e2 e0       	ldi	r30, 0x02	; 2
    a0c6:	ce 1a       	sub	r12, r30
    a0c8:	d1 08       	sbc	r13, r1
    a0ca:	e1 08       	sbc	r14, r1
    a0cc:	f1 08       	sbc	r15, r1
    a0ce:	8c 15       	cp	r24, r12
    a0d0:	9d 05       	cpc	r25, r13
    a0d2:	ae 05       	cpc	r26, r14
    a0d4:	bf 05       	cpc	r27, r15
    a0d6:	50 f4       	brcc	.+20     	; 0xa0ec <remove_chain+0xea>
    a0d8:	01 96       	adiw	r24, 0x01	; 1
    a0da:	a1 1d       	adc	r26, r1
    a0dc:	b1 1d       	adc	r27, r1
    a0de:	89 8b       	std	Y+17, r24	; 0x11
    a0e0:	9a 8b       	std	Y+18, r25	; 0x12
    a0e2:	ab 8b       	std	Y+19, r26	; 0x13
    a0e4:	bc 8b       	std	Y+20, r27	; 0x14
    a0e6:	8c 81       	ldd	r24, Y+4	; 0x04
    a0e8:	81 60       	ori	r24, 0x01	; 1
    a0ea:	8c 83       	std	Y+4, r24	; 0x04
    a0ec:	73 01       	movw	r14, r6
    a0ee:	62 01       	movw	r12, r4
    a0f0:	44 16       	cp	r4, r20
    a0f2:	55 06       	cpc	r5, r21
    a0f4:	66 06       	cpc	r6, r22
    a0f6:	77 06       	cpc	r7, r23
    a0f8:	08 f4       	brcc	.+2      	; 0xa0fc <remove_chain+0xfa>
    a0fa:	b7 cf       	rjmp	.-146    	; 0xa06a <remove_chain+0x68>
    a0fc:	c3 cf       	rjmp	.-122    	; 0xa084 <remove_chain+0x82>
    a0fe:	21 e0       	ldi	r18, 0x01	; 1
    a100:	c2 cf       	rjmp	.-124    	; 0xa086 <remove_chain+0x84>
    a102:	28 2f       	mov	r18, r24
    a104:	82 2f       	mov	r24, r18
    a106:	df 91       	pop	r29
    a108:	cf 91       	pop	r28
    a10a:	1f 91       	pop	r17
    a10c:	0f 91       	pop	r16
    a10e:	ff 90       	pop	r15
    a110:	ef 90       	pop	r14
    a112:	df 90       	pop	r13
    a114:	cf 90       	pop	r12
    a116:	bf 90       	pop	r11
    a118:	af 90       	pop	r10
    a11a:	7f 90       	pop	r7
    a11c:	6f 90       	pop	r6
    a11e:	5f 90       	pop	r5
    a120:	4f 90       	pop	r4
    a122:	08 95       	ret

0000a124 <dir_next>:
    a124:	4f 92       	push	r4
    a126:	5f 92       	push	r5
    a128:	6f 92       	push	r6
    a12a:	7f 92       	push	r7
    a12c:	af 92       	push	r10
    a12e:	bf 92       	push	r11
    a130:	cf 92       	push	r12
    a132:	df 92       	push	r13
    a134:	ef 92       	push	r14
    a136:	ff 92       	push	r15
    a138:	0f 93       	push	r16
    a13a:	1f 93       	push	r17
    a13c:	cf 93       	push	r28
    a13e:	df 93       	push	r29
    a140:	ec 01       	movw	r28, r24
    a142:	08 81       	ld	r16, Y
    a144:	19 81       	ldd	r17, Y+1	; 0x01
    a146:	ce 84       	ldd	r12, Y+14	; 0x0e
    a148:	df 84       	ldd	r13, Y+15	; 0x0f
    a14a:	e8 88       	ldd	r14, Y+16	; 0x10
    a14c:	f9 88       	ldd	r15, Y+17	; 0x11
    a14e:	80 e2       	ldi	r24, 0x20	; 32
    a150:	c8 0e       	add	r12, r24
    a152:	d1 1c       	adc	r13, r1
    a154:	e1 1c       	adc	r14, r1
    a156:	f1 1c       	adc	r15, r1
    a158:	c1 14       	cp	r12, r1
    a15a:	d1 04       	cpc	r13, r1
    a15c:	e0 e2       	ldi	r30, 0x20	; 32
    a15e:	ee 06       	cpc	r14, r30
    a160:	f1 04       	cpc	r15, r1
    a162:	20 f0       	brcs	.+8      	; 0xa16c <dir_next+0x48>
    a164:	1e 8a       	std	Y+22, r1	; 0x16
    a166:	1f 8a       	std	Y+23, r1	; 0x17
    a168:	18 8e       	std	Y+24, r1	; 0x18
    a16a:	19 8e       	std	Y+25, r1	; 0x19
    a16c:	8e 89       	ldd	r24, Y+22	; 0x16
    a16e:	9f 89       	ldd	r25, Y+23	; 0x17
    a170:	a8 8d       	ldd	r26, Y+24	; 0x18
    a172:	b9 8d       	ldd	r27, Y+25	; 0x19
    a174:	00 97       	sbiw	r24, 0x00	; 0
    a176:	a1 05       	cpc	r26, r1
    a178:	b1 05       	cpc	r27, r1
    a17a:	09 f4       	brne	.+2      	; 0xa17e <dir_next+0x5a>
    a17c:	a7 c0       	rjmp	.+334    	; 0xa2cc <dir_next+0x1a8>
    a17e:	5b 01       	movw	r10, r22
    a180:	b7 01       	movw	r22, r14
    a182:	a6 01       	movw	r20, r12
    a184:	51 70       	andi	r21, 0x01	; 1
    a186:	66 27       	eor	r22, r22
    a188:	77 27       	eor	r23, r23
    a18a:	45 2b       	or	r20, r21
    a18c:	46 2b       	or	r20, r22
    a18e:	47 2b       	or	r20, r23
    a190:	09 f0       	breq	.+2      	; 0xa194 <dir_next+0x70>
    a192:	8d c0       	rjmp	.+282    	; 0xa2ae <dir_next+0x18a>
    a194:	01 96       	adiw	r24, 0x01	; 1
    a196:	a1 1d       	adc	r26, r1
    a198:	b1 1d       	adc	r27, r1
    a19a:	8e 8b       	std	Y+22, r24	; 0x16
    a19c:	9f 8b       	std	Y+23, r25	; 0x17
    a19e:	a8 8f       	std	Y+24, r26	; 0x18
    a1a0:	b9 8f       	std	Y+25, r27	; 0x19
    a1a2:	4a 89       	ldd	r20, Y+18	; 0x12
    a1a4:	5b 89       	ldd	r21, Y+19	; 0x13
    a1a6:	6c 89       	ldd	r22, Y+20	; 0x14
    a1a8:	7d 89       	ldd	r23, Y+21	; 0x15
    a1aa:	f8 01       	movw	r30, r16
    a1ac:	41 15       	cp	r20, r1
    a1ae:	51 05       	cpc	r21, r1
    a1b0:	61 05       	cpc	r22, r1
    a1b2:	71 05       	cpc	r23, r1
    a1b4:	c1 f4       	brne	.+48     	; 0xa1e6 <dir_next+0xc2>
    a1b6:	87 81       	ldd	r24, Z+7	; 0x07
    a1b8:	90 85       	ldd	r25, Z+8	; 0x08
    a1ba:	a0 e0       	ldi	r26, 0x00	; 0
    a1bc:	b0 e0       	ldi	r27, 0x00	; 0
    a1be:	b7 01       	movw	r22, r14
    a1c0:	a6 01       	movw	r20, r12
    a1c2:	35 e0       	ldi	r19, 0x05	; 5
    a1c4:	76 95       	lsr	r23
    a1c6:	67 95       	ror	r22
    a1c8:	57 95       	ror	r21
    a1ca:	47 95       	ror	r20
    a1cc:	3a 95       	dec	r19
    a1ce:	d1 f7       	brne	.-12     	; 0xa1c4 <dir_next+0xa0>
    a1d0:	48 17       	cp	r20, r24
    a1d2:	59 07       	cpc	r21, r25
    a1d4:	6a 07       	cpc	r22, r26
    a1d6:	7b 07       	cpc	r23, r27
    a1d8:	08 f4       	brcc	.+2      	; 0xa1dc <dir_next+0xb8>
    a1da:	69 c0       	rjmp	.+210    	; 0xa2ae <dir_next+0x18a>
    a1dc:	1e 8a       	std	Y+22, r1	; 0x16
    a1de:	1f 8a       	std	Y+23, r1	; 0x17
    a1e0:	18 8e       	std	Y+24, r1	; 0x18
    a1e2:	19 8e       	std	Y+25, r1	; 0x19
    a1e4:	73 c0       	rjmp	.+230    	; 0xa2cc <dir_next+0x1a8>
    a1e6:	81 85       	ldd	r24, Z+9	; 0x09
    a1e8:	92 85       	ldd	r25, Z+10	; 0x0a
    a1ea:	01 97       	sbiw	r24, 0x01	; 1
    a1ec:	a0 e0       	ldi	r26, 0x00	; 0
    a1ee:	b0 e0       	ldi	r27, 0x00	; 0
    a1f0:	26 01       	movw	r4, r12
    a1f2:	37 01       	movw	r6, r14
    a1f4:	29 e0       	ldi	r18, 0x09	; 9
    a1f6:	76 94       	lsr	r7
    a1f8:	67 94       	ror	r6
    a1fa:	57 94       	ror	r5
    a1fc:	47 94       	ror	r4
    a1fe:	2a 95       	dec	r18
    a200:	d1 f7       	brne	.-12     	; 0xa1f6 <dir_next+0xd2>
    a202:	84 21       	and	r24, r4
    a204:	95 21       	and	r25, r5
    a206:	a6 21       	and	r26, r6
    a208:	b7 21       	and	r27, r7
    a20a:	89 2b       	or	r24, r25
    a20c:	8a 2b       	or	r24, r26
    a20e:	8b 2b       	or	r24, r27
    a210:	09 f0       	breq	.+2      	; 0xa214 <dir_next+0xf0>
    a212:	4d c0       	rjmp	.+154    	; 0xa2ae <dir_next+0x18a>
    a214:	c8 01       	movw	r24, r16
    a216:	5a dc       	rcall	.-1868   	; 0x9acc <get_fat.isra.9>
    a218:	2b 01       	movw	r4, r22
    a21a:	3c 01       	movw	r6, r24
    a21c:	62 30       	cpi	r22, 0x02	; 2
    a21e:	71 05       	cpc	r23, r1
    a220:	81 05       	cpc	r24, r1
    a222:	91 05       	cpc	r25, r1
    a224:	18 f4       	brcc	.+6      	; 0xa22c <dir_next+0x108>
    a226:	82 e0       	ldi	r24, 0x02	; 2
    a228:	90 e0       	ldi	r25, 0x00	; 0
    a22a:	55 c0       	rjmp	.+170    	; 0xa2d6 <dir_next+0x1b2>
    a22c:	8f ef       	ldi	r24, 0xFF	; 255
    a22e:	48 16       	cp	r4, r24
    a230:	58 06       	cpc	r5, r24
    a232:	68 06       	cpc	r6, r24
    a234:	78 06       	cpc	r7, r24
    a236:	19 f4       	brne	.+6      	; 0xa23e <dir_next+0x11a>
    a238:	81 e0       	ldi	r24, 0x01	; 1
    a23a:	90 e0       	ldi	r25, 0x00	; 0
    a23c:	4c c0       	rjmp	.+152    	; 0xa2d6 <dir_next+0x1b2>
    a23e:	f8 01       	movw	r30, r16
    a240:	81 8d       	ldd	r24, Z+25	; 0x19
    a242:	92 8d       	ldd	r25, Z+26	; 0x1a
    a244:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a246:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a248:	48 16       	cp	r4, r24
    a24a:	59 06       	cpc	r5, r25
    a24c:	6a 06       	cpc	r6, r26
    a24e:	7b 06       	cpc	r7, r27
    a250:	08 f1       	brcs	.+66     	; 0xa294 <dir_next+0x170>
    a252:	ab 28       	or	r10, r11
    a254:	19 f2       	breq	.-122    	; 0xa1dc <dir_next+0xb8>
    a256:	4a 89       	ldd	r20, Y+18	; 0x12
    a258:	5b 89       	ldd	r21, Y+19	; 0x13
    a25a:	6c 89       	ldd	r22, Y+20	; 0x14
    a25c:	7d 89       	ldd	r23, Y+21	; 0x15
    a25e:	ce 01       	movw	r24, r28
    a260:	aa dd       	rcall	.-1196   	; 0x9db6 <create_chain>
    a262:	2b 01       	movw	r4, r22
    a264:	3c 01       	movw	r6, r24
    a266:	61 15       	cp	r22, r1
    a268:	71 05       	cpc	r23, r1
    a26a:	81 05       	cpc	r24, r1
    a26c:	91 05       	cpc	r25, r1
    a26e:	89 f1       	breq	.+98     	; 0xa2d2 <dir_next+0x1ae>
    a270:	61 30       	cpi	r22, 0x01	; 1
    a272:	71 05       	cpc	r23, r1
    a274:	81 05       	cpc	r24, r1
    a276:	91 05       	cpc	r25, r1
    a278:	b1 f2       	breq	.-84     	; 0xa226 <dir_next+0x102>
    a27a:	8f ef       	ldi	r24, 0xFF	; 255
    a27c:	48 16       	cp	r4, r24
    a27e:	58 06       	cpc	r5, r24
    a280:	68 06       	cpc	r6, r24
    a282:	78 06       	cpc	r7, r24
    a284:	c9 f2       	breq	.-78     	; 0xa238 <dir_next+0x114>
    a286:	b3 01       	movw	r22, r6
    a288:	a2 01       	movw	r20, r4
    a28a:	c8 01       	movw	r24, r16
    a28c:	0e 94 f0 48 	call	0x91e0	; 0x91e0 <dir_clear>
    a290:	89 2b       	or	r24, r25
    a292:	91 f6       	brne	.-92     	; 0xa238 <dir_next+0x114>
    a294:	4a 8a       	std	Y+18, r4	; 0x12
    a296:	5b 8a       	std	Y+19, r5	; 0x13
    a298:	6c 8a       	std	Y+20, r6	; 0x14
    a29a:	7d 8a       	std	Y+21, r7	; 0x15
    a29c:	b3 01       	movw	r22, r6
    a29e:	a2 01       	movw	r20, r4
    a2a0:	c8 01       	movw	r24, r16
    a2a2:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    a2a6:	6e 8b       	std	Y+22, r22	; 0x16
    a2a8:	7f 8b       	std	Y+23, r23	; 0x17
    a2aa:	88 8f       	std	Y+24, r24	; 0x18
    a2ac:	99 8f       	std	Y+25, r25	; 0x19
    a2ae:	ce 86       	std	Y+14, r12	; 0x0e
    a2b0:	df 86       	std	Y+15, r13	; 0x0f
    a2b2:	e8 8a       	std	Y+16, r14	; 0x10
    a2b4:	f9 8a       	std	Y+17, r15	; 0x11
    a2b6:	0b 5c       	subi	r16, 0xCB	; 203
    a2b8:	1f 4f       	sbci	r17, 0xFF	; 255
    a2ba:	e1 e0       	ldi	r30, 0x01	; 1
    a2bc:	de 22       	and	r13, r30
    a2be:	c0 0e       	add	r12, r16
    a2c0:	d1 1e       	adc	r13, r17
    a2c2:	db 8e       	std	Y+27, r13	; 0x1b
    a2c4:	ca 8e       	std	Y+26, r12	; 0x1a
    a2c6:	80 e0       	ldi	r24, 0x00	; 0
    a2c8:	90 e0       	ldi	r25, 0x00	; 0
    a2ca:	05 c0       	rjmp	.+10     	; 0xa2d6 <dir_next+0x1b2>
    a2cc:	84 e0       	ldi	r24, 0x04	; 4
    a2ce:	90 e0       	ldi	r25, 0x00	; 0
    a2d0:	02 c0       	rjmp	.+4      	; 0xa2d6 <dir_next+0x1b2>
    a2d2:	87 e0       	ldi	r24, 0x07	; 7
    a2d4:	90 e0       	ldi	r25, 0x00	; 0
    a2d6:	df 91       	pop	r29
    a2d8:	cf 91       	pop	r28
    a2da:	1f 91       	pop	r17
    a2dc:	0f 91       	pop	r16
    a2de:	ff 90       	pop	r15
    a2e0:	ef 90       	pop	r14
    a2e2:	df 90       	pop	r13
    a2e4:	cf 90       	pop	r12
    a2e6:	bf 90       	pop	r11
    a2e8:	af 90       	pop	r10
    a2ea:	7f 90       	pop	r7
    a2ec:	6f 90       	pop	r6
    a2ee:	5f 90       	pop	r5
    a2f0:	4f 90       	pop	r4
    a2f2:	08 95       	ret

0000a2f4 <dir_alloc>:
    a2f4:	a0 e0       	ldi	r26, 0x00	; 0
    a2f6:	b0 e0       	ldi	r27, 0x00	; 0
    a2f8:	e0 e8       	ldi	r30, 0x80	; 128
    a2fa:	f1 e5       	ldi	r31, 0x51	; 81
    a2fc:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    a300:	ec 01       	movw	r28, r24
    a302:	6b 01       	movw	r12, r22
    a304:	e8 80       	ld	r14, Y
    a306:	f9 80       	ldd	r15, Y+1	; 0x01
    a308:	40 e0       	ldi	r20, 0x00	; 0
    a30a:	50 e0       	ldi	r21, 0x00	; 0
    a30c:	ba 01       	movw	r22, r20
    a30e:	92 dc       	rcall	.-1756   	; 0x9c34 <dir_sdi>
    a310:	00 97       	sbiw	r24, 0x00	; 0
    a312:	f9 f4       	brne	.+62     	; 0xa352 <dir_alloc+0x5e>
    a314:	00 e0       	ldi	r16, 0x00	; 0
    a316:	10 e0       	ldi	r17, 0x00	; 0
    a318:	4e 89       	ldd	r20, Y+22	; 0x16
    a31a:	5f 89       	ldd	r21, Y+23	; 0x17
    a31c:	68 8d       	ldd	r22, Y+24	; 0x18
    a31e:	79 8d       	ldd	r23, Y+25	; 0x19
    a320:	c7 01       	movw	r24, r14
    a322:	06 d8       	rcall	.-4084   	; 0x9330 <move_window>
    a324:	00 97       	sbiw	r24, 0x00	; 0
    a326:	a9 f4       	brne	.+42     	; 0xa352 <dir_alloc+0x5e>
    a328:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a32a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a32c:	20 81       	ld	r18, Z
    a32e:	25 3e       	cpi	r18, 0xE5	; 229
    a330:	11 f0       	breq	.+4      	; 0xa336 <dir_alloc+0x42>
    a332:	21 11       	cpse	r18, r1
    a334:	06 c0       	rjmp	.+12     	; 0xa342 <dir_alloc+0x4e>
    a336:	0f 5f       	subi	r16, 0xFF	; 255
    a338:	1f 4f       	sbci	r17, 0xFF	; 255
    a33a:	0c 15       	cp	r16, r12
    a33c:	1d 05       	cpc	r17, r13
    a33e:	19 f4       	brne	.+6      	; 0xa346 <dir_alloc+0x52>
    a340:	0d c0       	rjmp	.+26     	; 0xa35c <dir_alloc+0x68>
    a342:	00 e0       	ldi	r16, 0x00	; 0
    a344:	10 e0       	ldi	r17, 0x00	; 0
    a346:	61 e0       	ldi	r22, 0x01	; 1
    a348:	70 e0       	ldi	r23, 0x00	; 0
    a34a:	ce 01       	movw	r24, r28
    a34c:	eb de       	rcall	.-554    	; 0xa124 <dir_next>
    a34e:	00 97       	sbiw	r24, 0x00	; 0
    a350:	19 f3       	breq	.-58     	; 0xa318 <dir_alloc+0x24>
    a352:	84 30       	cpi	r24, 0x04	; 4
    a354:	91 05       	cpc	r25, r1
    a356:	11 f4       	brne	.+4      	; 0xa35c <dir_alloc+0x68>
    a358:	87 e0       	ldi	r24, 0x07	; 7
    a35a:	90 e0       	ldi	r25, 0x00	; 0
    a35c:	cd b7       	in	r28, 0x3d	; 61
    a35e:	de b7       	in	r29, 0x3e	; 62
    a360:	e8 e0       	ldi	r30, 0x08	; 8
    a362:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000a366 <dir_read>:
    a366:	a0 e0       	ldi	r26, 0x00	; 0
    a368:	b0 e0       	ldi	r27, 0x00	; 0
    a36a:	e9 eb       	ldi	r30, 0xB9	; 185
    a36c:	f1 e5       	ldi	r31, 0x51	; 81
    a36e:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
    a372:	ec 01       	movw	r28, r24
    a374:	7b 01       	movw	r14, r22
    a376:	a8 80       	ld	r10, Y
    a378:	b9 80       	ldd	r11, Y+1	; 0x01
    a37a:	dd 24       	eor	r13, r13
    a37c:	da 94       	dec	r13
    a37e:	1f ef       	ldi	r17, 0xFF	; 255
    a380:	84 e0       	ldi	r24, 0x04	; 4
    a382:	90 e0       	ldi	r25, 0x00	; 0
    a384:	fd e0       	ldi	r31, 0x0D	; 13
    a386:	cf 2e       	mov	r12, r31
    a388:	4e 89       	ldd	r20, Y+22	; 0x16
    a38a:	5f 89       	ldd	r21, Y+23	; 0x17
    a38c:	68 8d       	ldd	r22, Y+24	; 0x18
    a38e:	79 8d       	ldd	r23, Y+25	; 0x19
    a390:	41 15       	cp	r20, r1
    a392:	51 05       	cpc	r21, r1
    a394:	61 05       	cpc	r22, r1
    a396:	71 05       	cpc	r23, r1
    a398:	09 f4       	brne	.+2      	; 0xa39c <dir_read+0x36>
    a39a:	9a c0       	rjmp	.+308    	; 0xa4d0 <dir_read+0x16a>
    a39c:	c5 01       	movw	r24, r10
    a39e:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    a3a2:	00 97       	sbiw	r24, 0x00	; 0
    a3a4:	09 f0       	breq	.+2      	; 0xa3a8 <dir_read+0x42>
    a3a6:	96 c0       	rjmp	.+300    	; 0xa4d4 <dir_read+0x16e>
    a3a8:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a3aa:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a3ac:	f4 01       	movw	r30, r8
    a3ae:	00 81       	ld	r16, Z
    a3b0:	00 23       	and	r16, r16
    a3b2:	09 f4       	brne	.+2      	; 0xa3b6 <dir_read+0x50>
    a3b4:	97 c0       	rjmp	.+302    	; 0xa4e4 <dir_read+0x17e>
    a3b6:	83 85       	ldd	r24, Z+11	; 0x0b
    a3b8:	8f 73       	andi	r24, 0x3F	; 63
    a3ba:	8c 83       	std	Y+4, r24	; 0x04
    a3bc:	05 3e       	cpi	r16, 0xE5	; 229
    a3be:	09 f4       	brne	.+2      	; 0xa3c2 <dir_read+0x5c>
    a3c0:	7e c0       	rjmp	.+252    	; 0xa4be <dir_read+0x158>
    a3c2:	0e 32       	cpi	r16, 0x2E	; 46
    a3c4:	09 f4       	brne	.+2      	; 0xa3c8 <dir_read+0x62>
    a3c6:	7b c0       	rjmp	.+246    	; 0xa4be <dir_read+0x158>
    a3c8:	21 e0       	ldi	r18, 0x01	; 1
    a3ca:	30 e0       	ldi	r19, 0x00	; 0
    a3cc:	98 2f       	mov	r25, r24
    a3ce:	9f 71       	andi	r25, 0x1F	; 31
    a3d0:	98 30       	cpi	r25, 0x08	; 8
    a3d2:	11 f0       	breq	.+4      	; 0xa3d8 <dir_read+0x72>
    a3d4:	20 e0       	ldi	r18, 0x00	; 0
    a3d6:	30 e0       	ldi	r19, 0x00	; 0
    a3d8:	2e 15       	cp	r18, r14
    a3da:	3f 05       	cpc	r19, r15
    a3dc:	09 f0       	breq	.+2      	; 0xa3e0 <dir_read+0x7a>
    a3de:	6f c0       	rjmp	.+222    	; 0xa4be <dir_read+0x158>
    a3e0:	8f 30       	cpi	r24, 0x0F	; 15
    a3e2:	09 f0       	breq	.+2      	; 0xa3e6 <dir_read+0x80>
    a3e4:	5c c0       	rjmp	.+184    	; 0xa49e <dir_read+0x138>
    a3e6:	06 ff       	sbrs	r16, 6
    a3e8:	0c c0       	rjmp	.+24     	; 0xa402 <dir_read+0x9c>
    a3ea:	f4 01       	movw	r30, r8
    a3ec:	85 85       	ldd	r24, Z+13	; 0x0d
    a3ee:	0f 7b       	andi	r16, 0xBF	; 191
    a3f0:	4e 85       	ldd	r20, Y+14	; 0x0e
    a3f2:	5f 85       	ldd	r21, Y+15	; 0x0f
    a3f4:	68 89       	ldd	r22, Y+16	; 0x10
    a3f6:	79 89       	ldd	r23, Y+17	; 0x11
    a3f8:	48 a7       	std	Y+40, r20	; 0x28
    a3fa:	59 a7       	std	Y+41, r21	; 0x29
    a3fc:	6a a7       	std	Y+42, r22	; 0x2a
    a3fe:	7b a7       	std	Y+43, r23	; 0x2b
    a400:	03 c0       	rjmp	.+6      	; 0xa408 <dir_read+0xa2>
    a402:	10 13       	cpse	r17, r16
    a404:	5c c0       	rjmp	.+184    	; 0xa4be <dir_read+0x158>
    a406:	8d 2d       	mov	r24, r13
    a408:	f4 01       	movw	r30, r8
    a40a:	d5 84       	ldd	r13, Z+13	; 0x0d
    a40c:	d8 12       	cpse	r13, r24
    a40e:	56 c0       	rjmp	.+172    	; 0xa4bc <dir_read+0x156>
    a410:	82 8d       	ldd	r24, Z+26	; 0x1a
    a412:	93 8d       	ldd	r25, Z+27	; 0x1b
    a414:	89 2b       	or	r24, r25
    a416:	09 f0       	breq	.+2      	; 0xa41a <dir_read+0xb4>
    a418:	52 c0       	rjmp	.+164    	; 0xa4be <dir_read+0x158>
    a41a:	f5 01       	movw	r30, r10
    a41c:	63 85       	ldd	r22, Z+11	; 0x0b
    a41e:	74 85       	ldd	r23, Z+12	; 0x0c
    a420:	f4 01       	movw	r30, r8
    a422:	80 81       	ld	r24, Z
    a424:	90 e0       	ldi	r25, 0x00	; 0
    a426:	8f 7b       	andi	r24, 0xBF	; 191
    a428:	01 97       	sbiw	r24, 0x01	; 1
    a42a:	c8 9e       	mul	r12, r24
    a42c:	90 01       	movw	r18, r0
    a42e:	c9 9e       	mul	r12, r25
    a430:	30 0d       	add	r19, r0
    a432:	11 24       	eor	r1, r1
    a434:	ab ee       	ldi	r26, 0xEB	; 235
    a436:	b4 e0       	ldi	r27, 0x04	; 4
    a438:	81 e0       	ldi	r24, 0x01	; 1
    a43a:	90 e0       	ldi	r25, 0x00	; 0
    a43c:	4d 91       	ld	r20, X+
    a43e:	f4 01       	movw	r30, r8
    a440:	e4 0f       	add	r30, r20
    a442:	f1 1d       	adc	r31, r1
    a444:	40 81       	ld	r20, Z
    a446:	51 81       	ldd	r21, Z+1	; 0x01
    a448:	00 97       	sbiw	r24, 0x00	; 0
    a44a:	81 f0       	breq	.+32     	; 0xa46c <dir_read+0x106>
    a44c:	2f 3f       	cpi	r18, 0xFF	; 255
    a44e:	31 05       	cpc	r19, r1
    a450:	09 f0       	breq	.+2      	; 0xa454 <dir_read+0xee>
    a452:	a8 f5       	brcc	.+106    	; 0xa4be <dir_read+0x158>
    a454:	c9 01       	movw	r24, r18
    a456:	88 0f       	add	r24, r24
    a458:	99 1f       	adc	r25, r25
    a45a:	86 0f       	add	r24, r22
    a45c:	97 1f       	adc	r25, r23
    a45e:	fc 01       	movw	r30, r24
    a460:	51 83       	std	Z+1, r21	; 0x01
    a462:	40 83       	st	Z, r20
    a464:	ca 01       	movw	r24, r20
    a466:	2f 5f       	subi	r18, 0xFF	; 255
    a468:	3f 4f       	sbci	r19, 0xFF	; 255
    a46a:	03 c0       	rjmp	.+6      	; 0xa472 <dir_read+0x10c>
    a46c:	4f 3f       	cpi	r20, 0xFF	; 255
    a46e:	5f 4f       	sbci	r21, 0xFF	; 255
    a470:	31 f5       	brne	.+76     	; 0xa4be <dir_read+0x158>
    a472:	44 e0       	ldi	r20, 0x04	; 4
    a474:	a8 3f       	cpi	r26, 0xF8	; 248
    a476:	b4 07       	cpc	r27, r20
    a478:	09 f7       	brne	.-62     	; 0xa43c <dir_read+0xd6>
    a47a:	f4 01       	movw	r30, r8
    a47c:	40 81       	ld	r20, Z
    a47e:	46 ff       	sbrs	r20, 6
    a480:	2e c0       	rjmp	.+92     	; 0xa4de <dir_read+0x178>
    a482:	89 2b       	or	r24, r25
    a484:	61 f1       	breq	.+88     	; 0xa4de <dir_read+0x178>
    a486:	2f 3f       	cpi	r18, 0xFF	; 255
    a488:	31 05       	cpc	r19, r1
    a48a:	09 f0       	breq	.+2      	; 0xa48e <dir_read+0x128>
    a48c:	c0 f4       	brcc	.+48     	; 0xa4be <dir_read+0x158>
    a48e:	22 0f       	add	r18, r18
    a490:	33 1f       	adc	r19, r19
    a492:	fb 01       	movw	r30, r22
    a494:	e2 0f       	add	r30, r18
    a496:	f3 1f       	adc	r31, r19
    a498:	11 82       	std	Z+1, r1	; 0x01
    a49a:	10 82       	st	Z, r1
    a49c:	20 c0       	rjmp	.+64     	; 0xa4de <dir_read+0x178>
    a49e:	11 11       	cpse	r17, r1
    a4a0:	05 c0       	rjmp	.+10     	; 0xa4ac <dir_read+0x146>
    a4a2:	c4 01       	movw	r24, r8
    a4a4:	0e 94 6d 46 	call	0x8cda	; 0x8cda <sum_sfn>
    a4a8:	d8 16       	cp	r13, r24
    a4aa:	f9 f0       	breq	.+62     	; 0xa4ea <dir_read+0x184>
    a4ac:	8f ef       	ldi	r24, 0xFF	; 255
    a4ae:	9f ef       	ldi	r25, 0xFF	; 255
    a4b0:	dc 01       	movw	r26, r24
    a4b2:	88 a7       	std	Y+40, r24	; 0x28
    a4b4:	99 a7       	std	Y+41, r25	; 0x29
    a4b6:	aa a7       	std	Y+42, r26	; 0x2a
    a4b8:	bb a7       	std	Y+43, r27	; 0x2b
    a4ba:	17 c0       	rjmp	.+46     	; 0xa4ea <dir_read+0x184>
    a4bc:	d8 2e       	mov	r13, r24
    a4be:	1f ef       	ldi	r17, 0xFF	; 255
    a4c0:	60 e0       	ldi	r22, 0x00	; 0
    a4c2:	70 e0       	ldi	r23, 0x00	; 0
    a4c4:	ce 01       	movw	r24, r28
    a4c6:	2e de       	rcall	.-932    	; 0xa124 <dir_next>
    a4c8:	00 97       	sbiw	r24, 0x00	; 0
    a4ca:	09 f4       	brne	.+2      	; 0xa4ce <dir_read+0x168>
    a4cc:	5d cf       	rjmp	.-326    	; 0xa388 <dir_read+0x22>
    a4ce:	02 c0       	rjmp	.+4      	; 0xa4d4 <dir_read+0x16e>
    a4d0:	00 97       	sbiw	r24, 0x00	; 0
    a4d2:	59 f0       	breq	.+22     	; 0xa4ea <dir_read+0x184>
    a4d4:	1e 8a       	std	Y+22, r1	; 0x16
    a4d6:	1f 8a       	std	Y+23, r1	; 0x17
    a4d8:	18 8e       	std	Y+24, r1	; 0x18
    a4da:	19 8e       	std	Y+25, r1	; 0x19
    a4dc:	08 c0       	rjmp	.+16     	; 0xa4ee <dir_read+0x188>
    a4de:	1f ef       	ldi	r17, 0xFF	; 255
    a4e0:	10 0f       	add	r17, r16
    a4e2:	ee cf       	rjmp	.-36     	; 0xa4c0 <dir_read+0x15a>
    a4e4:	84 e0       	ldi	r24, 0x04	; 4
    a4e6:	90 e0       	ldi	r25, 0x00	; 0
    a4e8:	f5 cf       	rjmp	.-22     	; 0xa4d4 <dir_read+0x16e>
    a4ea:	80 e0       	ldi	r24, 0x00	; 0
    a4ec:	90 e0       	ldi	r25, 0x00	; 0
    a4ee:	cd b7       	in	r28, 0x3d	; 61
    a4f0:	de b7       	in	r29, 0x3e	; 62
    a4f2:	ec e0       	ldi	r30, 0x0C	; 12
    a4f4:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

0000a4f8 <dir_remove>:
    a4f8:	a0 e0       	ldi	r26, 0x00	; 0
    a4fa:	b0 e0       	ldi	r27, 0x00	; 0
    a4fc:	e2 e8       	ldi	r30, 0x82	; 130
    a4fe:	f2 e5       	ldi	r31, 0x52	; 82
    a500:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
    a504:	ec 01       	movw	r28, r24
    a506:	08 81       	ld	r16, Y
    a508:	19 81       	ldd	r17, Y+1	; 0x01
    a50a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a50c:	df 84       	ldd	r13, Y+15	; 0x0f
    a50e:	e8 88       	ldd	r14, Y+16	; 0x10
    a510:	f9 88       	ldd	r15, Y+17	; 0x11
    a512:	48 a5       	ldd	r20, Y+40	; 0x28
    a514:	59 a5       	ldd	r21, Y+41	; 0x29
    a516:	6a a5       	ldd	r22, Y+42	; 0x2a
    a518:	7b a5       	ldd	r23, Y+43	; 0x2b
    a51a:	4f 3f       	cpi	r20, 0xFF	; 255
    a51c:	8f ef       	ldi	r24, 0xFF	; 255
    a51e:	58 07       	cpc	r21, r24
    a520:	68 07       	cpc	r22, r24
    a522:	78 07       	cpc	r23, r24
    a524:	29 f4       	brne	.+10     	; 0xa530 <dir_remove+0x38>
    a526:	85 ee       	ldi	r24, 0xE5	; 229
    a528:	b8 2e       	mov	r11, r24
    a52a:	aa 24       	eor	r10, r10
    a52c:	a3 94       	inc	r10
    a52e:	19 c0       	rjmp	.+50     	; 0xa562 <dir_remove+0x6a>
    a530:	ce 01       	movw	r24, r28
    a532:	80 db       	rcall	.-2304   	; 0x9c34 <dir_sdi>
    a534:	00 97       	sbiw	r24, 0x00	; 0
    a536:	19 f5       	brne	.+70     	; 0xa57e <dir_remove+0x86>
    a538:	f6 cf       	rjmp	.-20     	; 0xa526 <dir_remove+0x2e>
    a53a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a53c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a53e:	b0 82       	st	Z, r11
    a540:	f8 01       	movw	r30, r16
    a542:	a3 82       	std	Z+3, r10	; 0x03
    a544:	4e 85       	ldd	r20, Y+14	; 0x0e
    a546:	5f 85       	ldd	r21, Y+15	; 0x0f
    a548:	68 89       	ldd	r22, Y+16	; 0x10
    a54a:	79 89       	ldd	r23, Y+17	; 0x11
    a54c:	4c 15       	cp	r20, r12
    a54e:	5d 05       	cpc	r21, r13
    a550:	6e 05       	cpc	r22, r14
    a552:	7f 05       	cpc	r23, r15
    a554:	a0 f4       	brcc	.+40     	; 0xa57e <dir_remove+0x86>
    a556:	60 e0       	ldi	r22, 0x00	; 0
    a558:	70 e0       	ldi	r23, 0x00	; 0
    a55a:	ce 01       	movw	r24, r28
    a55c:	e3 dd       	rcall	.-1082   	; 0xa124 <dir_next>
    a55e:	00 97       	sbiw	r24, 0x00	; 0
    a560:	49 f4       	brne	.+18     	; 0xa574 <dir_remove+0x7c>
    a562:	4e 89       	ldd	r20, Y+22	; 0x16
    a564:	5f 89       	ldd	r21, Y+23	; 0x17
    a566:	68 8d       	ldd	r22, Y+24	; 0x18
    a568:	79 8d       	ldd	r23, Y+25	; 0x19
    a56a:	c8 01       	movw	r24, r16
    a56c:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    a570:	00 97       	sbiw	r24, 0x00	; 0
    a572:	19 f3       	breq	.-58     	; 0xa53a <dir_remove+0x42>
    a574:	84 30       	cpi	r24, 0x04	; 4
    a576:	91 05       	cpc	r25, r1
    a578:	11 f4       	brne	.+4      	; 0xa57e <dir_remove+0x86>
    a57a:	82 e0       	ldi	r24, 0x02	; 2
    a57c:	90 e0       	ldi	r25, 0x00	; 0
    a57e:	cd b7       	in	r28, 0x3d	; 61
    a580:	de b7       	in	r29, 0x3e	; 62
    a582:	ea e0       	ldi	r30, 0x0A	; 10
    a584:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0000a588 <dir_find>:
    a588:	ac e0       	ldi	r26, 0x0C	; 12
    a58a:	b0 e0       	ldi	r27, 0x00	; 0
    a58c:	ea ec       	ldi	r30, 0xCA	; 202
    a58e:	f2 e5       	ldi	r31, 0x52	; 82
    a590:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    a594:	9c 87       	std	Y+12, r25	; 0x0c
    a596:	8b 87       	std	Y+11, r24	; 0x0b
    a598:	fc 01       	movw	r30, r24
    a59a:	01 90       	ld	r0, Z+
    a59c:	f0 81       	ld	r31, Z
    a59e:	e0 2d       	mov	r30, r0
    a5a0:	fc 83       	std	Y+4, r31	; 0x04
    a5a2:	eb 83       	std	Y+3, r30	; 0x03
    a5a4:	40 e0       	ldi	r20, 0x00	; 0
    a5a6:	50 e0       	ldi	r21, 0x00	; 0
    a5a8:	ba 01       	movw	r22, r20
    a5aa:	44 db       	rcall	.-2424   	; 0x9c34 <dir_sdi>
    a5ac:	00 97       	sbiw	r24, 0x00	; 0
    a5ae:	09 f0       	breq	.+2      	; 0xa5b2 <dir_find+0x2a>
    a5b0:	e7 c0       	rjmp	.+462    	; 0xa780 <dir_find+0x1f8>
    a5b2:	8f ef       	ldi	r24, 0xFF	; 255
    a5b4:	9f ef       	ldi	r25, 0xFF	; 255
    a5b6:	dc 01       	movw	r26, r24
    a5b8:	eb 85       	ldd	r30, Y+11	; 0x0b
    a5ba:	fc 85       	ldd	r31, Y+12	; 0x0c
    a5bc:	80 a7       	std	Z+40, r24	; 0x28
    a5be:	91 a7       	std	Z+41, r25	; 0x29
    a5c0:	a2 a7       	std	Z+42, r26	; 0x2a
    a5c2:	b3 a7       	std	Z+43, r27	; 0x2b
    a5c4:	0f ef       	ldi	r16, 0xFF	; 255
    a5c6:	1f ef       	ldi	r17, 0xFF	; 255
    a5c8:	44 24       	eor	r4, r4
    a5ca:	4a 94       	dec	r4
    a5cc:	54 2c       	mov	r5, r4
    a5ce:	32 01       	movw	r6, r4
    a5d0:	7c 96       	adiw	r30, 0x1c	; 28
    a5d2:	fa 87       	std	Y+10, r31	; 0x0a
    a5d4:	e9 87       	std	Y+9, r30	; 0x09
    a5d6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a5d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a5da:	46 89       	ldd	r20, Z+22	; 0x16
    a5dc:	57 89       	ldd	r21, Z+23	; 0x17
    a5de:	60 8d       	ldd	r22, Z+24	; 0x18
    a5e0:	71 8d       	ldd	r23, Z+25	; 0x19
    a5e2:	8b 81       	ldd	r24, Y+3	; 0x03
    a5e4:	9c 81       	ldd	r25, Y+4	; 0x04
    a5e6:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    a5ea:	00 97       	sbiw	r24, 0x00	; 0
    a5ec:	09 f0       	breq	.+2      	; 0xa5f0 <dir_find+0x68>
    a5ee:	c8 c0       	rjmp	.+400    	; 0xa780 <dir_find+0x1f8>
    a5f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    a5f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    a5f4:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a5f6:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a5f8:	f7 01       	movw	r30, r14
    a5fa:	d0 80       	ld	r13, Z
    a5fc:	dd 20       	and	r13, r13
    a5fe:	09 f4       	brne	.+2      	; 0xa602 <dir_find+0x7a>
    a600:	c1 c0       	rjmp	.+386    	; 0xa784 <dir_find+0x1fc>
    a602:	93 85       	ldd	r25, Z+11	; 0x0b
    a604:	89 2f       	mov	r24, r25
    a606:	8f 73       	andi	r24, 0x3F	; 63
    a608:	eb 85       	ldd	r30, Y+11	; 0x0b
    a60a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a60c:	84 83       	std	Z+4, r24	; 0x04
    a60e:	f5 ee       	ldi	r31, 0xE5	; 229
    a610:	df 16       	cp	r13, r31
    a612:	09 f4       	brne	.+2      	; 0xa616 <dir_find+0x8e>
    a614:	a6 c0       	rjmp	.+332    	; 0xa762 <dir_find+0x1da>
    a616:	93 ff       	sbrs	r25, 3
    a618:	04 c0       	rjmp	.+8      	; 0xa622 <dir_find+0x9a>
    a61a:	8f 30       	cpi	r24, 0x0F	; 15
    a61c:	09 f0       	breq	.+2      	; 0xa620 <dir_find+0x98>
    a61e:	a1 c0       	rjmp	.+322    	; 0xa762 <dir_find+0x1da>
    a620:	03 c0       	rjmp	.+6      	; 0xa628 <dir_find+0xa0>
    a622:	8f 30       	cpi	r24, 0x0F	; 15
    a624:	09 f0       	breq	.+2      	; 0xa628 <dir_find+0xa0>
    a626:	88 c0       	rjmp	.+272    	; 0xa738 <dir_find+0x1b0>
    a628:	eb 85       	ldd	r30, Y+11	; 0x0b
    a62a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a62c:	87 a1       	ldd	r24, Z+39	; 0x27
    a62e:	86 fd       	sbrc	r24, 6
    a630:	9f c0       	rjmp	.+318    	; 0xa770 <dir_find+0x1e8>
    a632:	d6 fe       	sbrs	r13, 6
    a634:	10 c0       	rjmp	.+32     	; 0xa656 <dir_find+0xce>
    a636:	f7 01       	movw	r30, r14
    a638:	05 85       	ldd	r16, Z+13	; 0x0d
    a63a:	fd 2d       	mov	r31, r13
    a63c:	ff 7b       	andi	r31, 0xBF	; 191
    a63e:	df 2e       	mov	r13, r31
    a640:	eb 85       	ldd	r30, Y+11	; 0x0b
    a642:	fc 85       	ldd	r31, Y+12	; 0x0c
    a644:	86 85       	ldd	r24, Z+14	; 0x0e
    a646:	97 85       	ldd	r25, Z+15	; 0x0f
    a648:	a0 89       	ldd	r26, Z+16	; 0x10
    a64a:	b1 89       	ldd	r27, Z+17	; 0x11
    a64c:	80 a7       	std	Z+40, r24	; 0x28
    a64e:	91 a7       	std	Z+41, r25	; 0x29
    a650:	a2 a7       	std	Z+42, r26	; 0x2a
    a652:	b3 a7       	std	Z+43, r27	; 0x2b
    a654:	02 c0       	rjmp	.+4      	; 0xa65a <dir_find+0xd2>
    a656:	1d 11       	cpse	r17, r13
    a658:	8a c0       	rjmp	.+276    	; 0xa76e <dir_find+0x1e6>
    a65a:	f7 01       	movw	r30, r14
    a65c:	c5 84       	ldd	r12, Z+13	; 0x0d
    a65e:	c0 12       	cpse	r12, r16
    a660:	86 c0       	rjmp	.+268    	; 0xa76e <dir_find+0x1e6>
    a662:	82 8d       	ldd	r24, Z+26	; 0x1a
    a664:	93 8d       	ldd	r25, Z+27	; 0x1b
    a666:	89 2b       	or	r24, r25
    a668:	09 f0       	breq	.+2      	; 0xa66c <dir_find+0xe4>
    a66a:	91 c0       	rjmp	.+290    	; 0xa78e <dir_find+0x206>
    a66c:	eb 81       	ldd	r30, Y+3	; 0x03
    a66e:	fc 81       	ldd	r31, Y+4	; 0x04
    a670:	03 84       	ldd	r0, Z+11	; 0x0b
    a672:	f4 85       	ldd	r31, Z+12	; 0x0c
    a674:	e0 2d       	mov	r30, r0
    a676:	fe 83       	std	Y+6, r31	; 0x06
    a678:	ed 83       	std	Y+5, r30	; 0x05
    a67a:	f7 01       	movw	r30, r14
    a67c:	80 81       	ld	r24, Z
    a67e:	8f 73       	andi	r24, 0x3F	; 63
    a680:	90 e0       	ldi	r25, 0x00	; 0
    a682:	01 97       	sbiw	r24, 0x01	; 1
    a684:	fd e0       	ldi	r31, 0x0D	; 13
    a686:	f8 9f       	mul	r31, r24
    a688:	80 01       	movw	r16, r0
    a68a:	f9 9f       	mul	r31, r25
    a68c:	10 0d       	add	r17, r0
    a68e:	11 24       	eor	r1, r1
    a690:	2b ee       	ldi	r18, 0xEB	; 235
    a692:	34 e0       	ldi	r19, 0x04	; 4
    a694:	3a 83       	std	Y+2, r19	; 0x02
    a696:	29 83       	std	Y+1, r18	; 0x01
    a698:	81 e0       	ldi	r24, 0x01	; 1
    a69a:	90 e0       	ldi	r25, 0x00	; 0
    a69c:	e9 81       	ldd	r30, Y+1	; 0x01
    a69e:	fa 81       	ldd	r31, Y+2	; 0x02
    a6a0:	21 91       	ld	r18, Z+
    a6a2:	fa 83       	std	Y+2, r31	; 0x02
    a6a4:	e9 83       	std	Y+1, r30	; 0x01
    a6a6:	f7 01       	movw	r30, r14
    a6a8:	e2 0f       	add	r30, r18
    a6aa:	f1 1d       	adc	r31, r1
    a6ac:	20 80       	ld	r2, Z
    a6ae:	31 80       	ldd	r3, Z+1	; 0x01
    a6b0:	00 97       	sbiw	r24, 0x00	; 0
    a6b2:	39 f1       	breq	.+78     	; 0xa702 <dir_find+0x17a>
    a6b4:	0f 3f       	cpi	r16, 0xFF	; 255
    a6b6:	11 05       	cpc	r17, r1
    a6b8:	11 f0       	breq	.+4      	; 0xa6be <dir_find+0x136>
    a6ba:	08 f0       	brcs	.+2      	; 0xa6be <dir_find+0x136>
    a6bc:	68 c0       	rjmp	.+208    	; 0xa78e <dir_find+0x206>
    a6be:	b1 01       	movw	r22, r2
    a6c0:	80 e0       	ldi	r24, 0x00	; 0
    a6c2:	90 e0       	ldi	r25, 0x00	; 0
    a6c4:	0e 94 5c 67 	call	0xceb8	; 0xceb8 <ff_wtoupper>
    a6c8:	4b 01       	movw	r8, r22
    a6ca:	5c 01       	movw	r10, r24
    a6cc:	98 01       	movw	r18, r16
    a6ce:	2f 5f       	subi	r18, 0xFF	; 255
    a6d0:	3f 4f       	sbci	r19, 0xFF	; 255
    a6d2:	38 87       	std	Y+8, r19	; 0x08
    a6d4:	2f 83       	std	Y+7, r18	; 0x07
    a6d6:	00 0f       	add	r16, r16
    a6d8:	11 1f       	adc	r17, r17
    a6da:	ed 81       	ldd	r30, Y+5	; 0x05
    a6dc:	fe 81       	ldd	r31, Y+6	; 0x06
    a6de:	e0 0f       	add	r30, r16
    a6e0:	f1 1f       	adc	r31, r17
    a6e2:	60 81       	ld	r22, Z
    a6e4:	71 81       	ldd	r23, Z+1	; 0x01
    a6e6:	80 e0       	ldi	r24, 0x00	; 0
    a6e8:	90 e0       	ldi	r25, 0x00	; 0
    a6ea:	0e 94 5c 67 	call	0xceb8	; 0xceb8 <ff_wtoupper>
    a6ee:	86 16       	cp	r8, r22
    a6f0:	97 06       	cpc	r9, r23
    a6f2:	a8 06       	cpc	r10, r24
    a6f4:	b9 06       	cpc	r11, r25
    a6f6:	09 f0       	breq	.+2      	; 0xa6fa <dir_find+0x172>
    a6f8:	4a c0       	rjmp	.+148    	; 0xa78e <dir_find+0x206>
    a6fa:	c1 01       	movw	r24, r2
    a6fc:	0f 81       	ldd	r16, Y+7	; 0x07
    a6fe:	18 85       	ldd	r17, Y+8	; 0x08
    a700:	05 c0       	rjmp	.+10     	; 0xa70c <dir_find+0x184>
    a702:	3f ef       	ldi	r19, 0xFF	; 255
    a704:	23 16       	cp	r2, r19
    a706:	33 06       	cpc	r3, r19
    a708:	09 f0       	breq	.+2      	; 0xa70c <dir_find+0x184>
    a70a:	41 c0       	rjmp	.+130    	; 0xa78e <dir_find+0x206>
    a70c:	e9 81       	ldd	r30, Y+1	; 0x01
    a70e:	fa 81       	ldd	r31, Y+2	; 0x02
    a710:	e8 5f       	subi	r30, 0xF8	; 248
    a712:	f4 40       	sbci	r31, 0x04	; 4
    a714:	19 f6       	brne	.-122    	; 0xa69c <dir_find+0x114>
    a716:	f7 01       	movw	r30, r14
    a718:	20 81       	ld	r18, Z
    a71a:	26 ff       	sbrs	r18, 6
    a71c:	3a c0       	rjmp	.+116    	; 0xa792 <dir_find+0x20a>
    a71e:	89 2b       	or	r24, r25
    a720:	c1 f1       	breq	.+112    	; 0xa792 <dir_find+0x20a>
    a722:	00 0f       	add	r16, r16
    a724:	11 1f       	adc	r17, r17
    a726:	ed 81       	ldd	r30, Y+5	; 0x05
    a728:	fe 81       	ldd	r31, Y+6	; 0x06
    a72a:	e0 0f       	add	r30, r16
    a72c:	f1 1f       	adc	r31, r17
    a72e:	80 81       	ld	r24, Z
    a730:	91 81       	ldd	r25, Z+1	; 0x01
    a732:	89 2b       	or	r24, r25
    a734:	71 f1       	breq	.+92     	; 0xa792 <dir_find+0x20a>
    a736:	2b c0       	rjmp	.+86     	; 0xa78e <dir_find+0x206>
    a738:	11 11       	cpse	r17, r1
    a73a:	05 c0       	rjmp	.+10     	; 0xa746 <dir_find+0x1be>
    a73c:	c7 01       	movw	r24, r14
    a73e:	0e 94 6d 46 	call	0x8cda	; 0x8cda <sum_sfn>
    a742:	08 17       	cp	r16, r24
    a744:	09 f1       	breq	.+66     	; 0xa788 <dir_find+0x200>
    a746:	eb 85       	ldd	r30, Y+11	; 0x0b
    a748:	fc 85       	ldd	r31, Y+12	; 0x0c
    a74a:	87 a1       	ldd	r24, Z+39	; 0x27
    a74c:	80 fd       	sbrc	r24, 0
    a74e:	09 c0       	rjmp	.+18     	; 0xa762 <dir_find+0x1da>
    a750:	4b e0       	ldi	r20, 0x0B	; 11
    a752:	50 e0       	ldi	r21, 0x00	; 0
    a754:	69 85       	ldd	r22, Y+9	; 0x09
    a756:	7a 85       	ldd	r23, Y+10	; 0x0a
    a758:	c7 01       	movw	r24, r14
    a75a:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <mem_cmp>
    a75e:	89 2b       	or	r24, r25
    a760:	99 f0       	breq	.+38     	; 0xa788 <dir_find+0x200>
    a762:	eb 85       	ldd	r30, Y+11	; 0x0b
    a764:	fc 85       	ldd	r31, Y+12	; 0x0c
    a766:	40 a6       	std	Z+40, r4	; 0x28
    a768:	51 a6       	std	Z+41, r5	; 0x29
    a76a:	62 a6       	std	Z+42, r6	; 0x2a
    a76c:	73 a6       	std	Z+43, r7	; 0x2b
    a76e:	1f ef       	ldi	r17, 0xFF	; 255
    a770:	60 e0       	ldi	r22, 0x00	; 0
    a772:	70 e0       	ldi	r23, 0x00	; 0
    a774:	8b 85       	ldd	r24, Y+11	; 0x0b
    a776:	9c 85       	ldd	r25, Y+12	; 0x0c
    a778:	d5 dc       	rcall	.-1622   	; 0xa124 <dir_next>
    a77a:	00 97       	sbiw	r24, 0x00	; 0
    a77c:	09 f4       	brne	.+2      	; 0xa780 <dir_find+0x1f8>
    a77e:	2b cf       	rjmp	.-426    	; 0xa5d6 <dir_find+0x4e>
    a780:	28 2f       	mov	r18, r24
    a782:	0b c0       	rjmp	.+22     	; 0xa79a <dir_find+0x212>
    a784:	24 e0       	ldi	r18, 0x04	; 4
    a786:	01 c0       	rjmp	.+2      	; 0xa78a <dir_find+0x202>
    a788:	20 e0       	ldi	r18, 0x00	; 0
    a78a:	90 e0       	ldi	r25, 0x00	; 0
    a78c:	06 c0       	rjmp	.+12     	; 0xa79a <dir_find+0x212>
    a78e:	0c 2d       	mov	r16, r12
    a790:	ee cf       	rjmp	.-36     	; 0xa76e <dir_find+0x1e6>
    a792:	1f ef       	ldi	r17, 0xFF	; 255
    a794:	1d 0d       	add	r17, r13
    a796:	0c 2d       	mov	r16, r12
    a798:	eb cf       	rjmp	.-42     	; 0xa770 <dir_find+0x1e8>
    a79a:	82 2f       	mov	r24, r18
    a79c:	2c 96       	adiw	r28, 0x0c	; 12
    a79e:	e2 e1       	ldi	r30, 0x12	; 18
    a7a0:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000a7a4 <dir_register>:
    a7a4:	a6 e1       	ldi	r26, 0x16	; 22
    a7a6:	b0 e0       	ldi	r27, 0x00	; 0
    a7a8:	e8 ed       	ldi	r30, 0xD8	; 216
    a7aa:	f3 e5       	ldi	r31, 0x53	; 83
    a7ac:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    a7b0:	fc 01       	movw	r30, r24
    a7b2:	27 a1       	ldd	r18, Z+39	; 0x27
    a7b4:	20 7a       	andi	r18, 0xA0	; 160
    a7b6:	09 f0       	breq	.+2      	; 0xa7ba <dir_register+0x16>
    a7b8:	53 c1       	rjmp	.+678    	; 0xaa60 <dir_register+0x2bc>
    a7ba:	c0 80       	ld	r12, Z
    a7bc:	d1 80       	ldd	r13, Z+1	; 0x01
    a7be:	f6 01       	movw	r30, r12
    a7c0:	a3 85       	ldd	r26, Z+11	; 0x0b
    a7c2:	b4 85       	ldd	r27, Z+12	; 0x0c
    a7c4:	81 2c       	mov	r8, r1
    a7c6:	91 2c       	mov	r9, r1
    a7c8:	2d 91       	ld	r18, X+
    a7ca:	3d 91       	ld	r19, X+
    a7cc:	23 2b       	or	r18, r19
    a7ce:	21 f0       	breq	.+8      	; 0xa7d8 <dir_register+0x34>
    a7d0:	ff ef       	ldi	r31, 0xFF	; 255
    a7d2:	8f 1a       	sub	r8, r31
    a7d4:	9f 0a       	sbc	r9, r31
    a7d6:	f8 cf       	rjmp	.-16     	; 0xa7c8 <dir_register+0x24>
    a7d8:	8c 01       	movw	r16, r24
    a7da:	5c 01       	movw	r10, r24
    a7dc:	2c e1       	ldi	r18, 0x1C	; 28
    a7de:	a2 0e       	add	r10, r18
    a7e0:	b1 1c       	adc	r11, r1
    a7e2:	4c e0       	ldi	r20, 0x0C	; 12
    a7e4:	50 e0       	ldi	r21, 0x00	; 0
    a7e6:	b5 01       	movw	r22, r10
    a7e8:	ce 01       	movw	r24, r28
    a7ea:	01 96       	adiw	r24, 0x01	; 1
    a7ec:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    a7f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    a7f2:	80 ff       	sbrs	r24, 0
    a7f4:	94 c0       	rjmp	.+296    	; 0xa91e <dir_register+0x17a>
    a7f6:	80 e4       	ldi	r24, 0x40	; 64
    a7f8:	f8 01       	movw	r30, r16
    a7fa:	87 a3       	std	Z+39, r24	; 0x27
    a7fc:	41 2c       	mov	r4, r1
    a7fe:	51 2c       	mov	r5, r1
    a800:	32 01       	movw	r6, r4
    a802:	43 94       	inc	r4
    a804:	72 01       	movw	r14, r4
    a806:	f6 01       	movw	r30, r12
    a808:	23 84       	ldd	r2, Z+11	; 0x0b
    a80a:	34 84       	ldd	r3, Z+12	; 0x0c
    a80c:	4b e0       	ldi	r20, 0x0B	; 11
    a80e:	50 e0       	ldi	r21, 0x00	; 0
    a810:	be 01       	movw	r22, r28
    a812:	6f 5f       	subi	r22, 0xFF	; 255
    a814:	7f 4f       	sbci	r23, 0xFF	; 255
    a816:	c5 01       	movw	r24, r10
    a818:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    a81c:	f6 e0       	ldi	r31, 0x06	; 6
    a81e:	4f 16       	cp	r4, r31
    a820:	51 04       	cpc	r5, r1
    a822:	18 f1       	brcs	.+70     	; 0xa86a <dir_register+0xc6>
    a824:	f1 01       	movw	r30, r2
    a826:	b3 01       	movw	r22, r6
    a828:	a2 01       	movw	r20, r4
    a82a:	81 91       	ld	r24, Z+
    a82c:	91 91       	ld	r25, Z+
    a82e:	00 97       	sbiw	r24, 0x00	; 0
    a830:	d9 f0       	breq	.+54     	; 0xa868 <dir_register+0xc4>
    a832:	20 e1       	ldi	r18, 0x10	; 16
    a834:	30 e0       	ldi	r19, 0x00	; 0
    a836:	44 0f       	add	r20, r20
    a838:	55 1f       	adc	r21, r21
    a83a:	66 1f       	adc	r22, r22
    a83c:	77 1f       	adc	r23, r23
    a83e:	dc 01       	movw	r26, r24
    a840:	a1 70       	andi	r26, 0x01	; 1
    a842:	bb 27       	eor	r27, r27
    a844:	4a 0f       	add	r20, r26
    a846:	5b 1f       	adc	r21, r27
    a848:	61 1d       	adc	r22, r1
    a84a:	71 1d       	adc	r23, r1
    a84c:	96 95       	lsr	r25
    a84e:	87 95       	ror	r24
    a850:	60 ff       	sbrs	r22, 0
    a852:	06 c0       	rjmp	.+12     	; 0xa860 <dir_register+0xbc>
    a854:	a1 e2       	ldi	r26, 0x21	; 33
    a856:	4a 27       	eor	r20, r26
    a858:	a0 e1       	ldi	r26, 0x10	; 16
    a85a:	5a 27       	eor	r21, r26
    a85c:	a1 e0       	ldi	r26, 0x01	; 1
    a85e:	6a 27       	eor	r22, r26
    a860:	21 50       	subi	r18, 0x01	; 1
    a862:	31 09       	sbc	r19, r1
    a864:	41 f7       	brne	.-48     	; 0xa836 <dir_register+0x92>
    a866:	e1 cf       	rjmp	.-62     	; 0xa82a <dir_register+0x86>
    a868:	7a 01       	movw	r14, r20
    a86a:	fe 01       	movw	r30, r28
    a86c:	75 96       	adiw	r30, 0x15	; 21
    a86e:	27 e0       	ldi	r18, 0x07	; 7
    a870:	30 e0       	ldi	r19, 0x00	; 0
    a872:	9e 2d       	mov	r25, r14
    a874:	9f 70       	andi	r25, 0x0F	; 15
    a876:	80 e3       	ldi	r24, 0x30	; 48
    a878:	89 0f       	add	r24, r25
    a87a:	8a 33       	cpi	r24, 0x3A	; 58
    a87c:	10 f0       	brcs	.+4      	; 0xa882 <dir_register+0xde>
    a87e:	87 e3       	ldi	r24, 0x37	; 55
    a880:	89 0f       	add	r24, r25
    a882:	21 50       	subi	r18, 0x01	; 1
    a884:	31 09       	sbc	r19, r1
    a886:	82 93       	st	-Z, r24
    a888:	a4 e0       	ldi	r26, 0x04	; 4
    a88a:	f6 94       	lsr	r15
    a88c:	e7 94       	ror	r14
    a88e:	aa 95       	dec	r26
    a890:	e1 f7       	brne	.-8      	; 0xa88a <dir_register+0xe6>
    a892:	e1 14       	cp	r14, r1
    a894:	f1 04       	cpc	r15, r1
    a896:	69 f7       	brne	.-38     	; 0xa872 <dir_register+0xce>
    a898:	ed e0       	ldi	r30, 0x0D	; 13
    a89a:	f0 e0       	ldi	r31, 0x00	; 0
    a89c:	ec 0f       	add	r30, r28
    a89e:	fd 1f       	adc	r31, r29
    a8a0:	e2 0f       	add	r30, r18
    a8a2:	f3 1f       	adc	r31, r19
    a8a4:	4e e7       	ldi	r20, 0x7E	; 126
    a8a6:	40 83       	st	Z, r20
    a8a8:	f5 01       	movw	r30, r10
    a8aa:	80 e0       	ldi	r24, 0x00	; 0
    a8ac:	90 e0       	ldi	r25, 0x00	; 0
    a8ae:	28 17       	cp	r18, r24
    a8b0:	39 07       	cpc	r19, r25
    a8b2:	29 f0       	breq	.+10     	; 0xa8be <dir_register+0x11a>
    a8b4:	41 91       	ld	r20, Z+
    a8b6:	40 32       	cpi	r20, 0x20	; 32
    a8b8:	11 f0       	breq	.+4      	; 0xa8be <dir_register+0x11a>
    a8ba:	01 96       	adiw	r24, 0x01	; 1
    a8bc:	f8 cf       	rjmp	.-16     	; 0xa8ae <dir_register+0x10a>
    a8be:	f5 01       	movw	r30, r10
    a8c0:	e8 0f       	add	r30, r24
    a8c2:	f9 1f       	adc	r31, r25
    a8c4:	28 30       	cpi	r18, 0x08	; 8
    a8c6:	31 05       	cpc	r19, r1
    a8c8:	50 f4       	brcc	.+20     	; 0xa8de <dir_register+0x13a>
    a8ca:	ad e0       	ldi	r26, 0x0D	; 13
    a8cc:	b0 e0       	ldi	r27, 0x00	; 0
    a8ce:	ac 0f       	add	r26, r28
    a8d0:	bd 1f       	adc	r27, r29
    a8d2:	a2 0f       	add	r26, r18
    a8d4:	b3 1f       	adc	r27, r19
    a8d6:	8c 91       	ld	r24, X
    a8d8:	2f 5f       	subi	r18, 0xFF	; 255
    a8da:	3f 4f       	sbci	r19, 0xFF	; 255
    a8dc:	01 c0       	rjmp	.+2      	; 0xa8e0 <dir_register+0x13c>
    a8de:	80 e2       	ldi	r24, 0x20	; 32
    a8e0:	81 93       	st	Z+, r24
    a8e2:	cf 01       	movw	r24, r30
    a8e4:	8a 19       	sub	r24, r10
    a8e6:	9b 09       	sbc	r25, r11
    a8e8:	08 97       	sbiw	r24, 0x08	; 8
    a8ea:	60 f3       	brcs	.-40     	; 0xa8c4 <dir_register+0x120>
    a8ec:	c8 01       	movw	r24, r16
    a8ee:	4c de       	rcall	.-872    	; 0xa588 <dir_find>
    a8f0:	00 97       	sbiw	r24, 0x00	; 0
    a8f2:	71 f4       	brne	.+28     	; 0xa910 <dir_register+0x16c>
    a8f4:	8f ef       	ldi	r24, 0xFF	; 255
    a8f6:	48 1a       	sub	r4, r24
    a8f8:	58 0a       	sbc	r5, r24
    a8fa:	68 0a       	sbc	r6, r24
    a8fc:	78 0a       	sbc	r7, r24
    a8fe:	94 e6       	ldi	r25, 0x64	; 100
    a900:	49 16       	cp	r4, r25
    a902:	51 04       	cpc	r5, r1
    a904:	61 04       	cpc	r6, r1
    a906:	71 04       	cpc	r7, r1
    a908:	09 f0       	breq	.+2      	; 0xa90c <dir_register+0x168>
    a90a:	7c cf       	rjmp	.-264    	; 0xa804 <dir_register+0x60>
    a90c:	27 e0       	ldi	r18, 0x07	; 7
    a90e:	a9 c0       	rjmp	.+338    	; 0xaa62 <dir_register+0x2be>
    a910:	84 30       	cpi	r24, 0x04	; 4
    a912:	91 05       	cpc	r25, r1
    a914:	09 f0       	breq	.+2      	; 0xa918 <dir_register+0x174>
    a916:	ce c0       	rjmp	.+412    	; 0xaab4 <dir_register+0x310>
    a918:	8c 85       	ldd	r24, Y+12	; 0x0c
    a91a:	f8 01       	movw	r30, r16
    a91c:	87 a3       	std	Z+39, r24	; 0x27
    a91e:	8c 85       	ldd	r24, Y+12	; 0x0c
    a920:	81 ff       	sbrs	r24, 1
    a922:	0b c0       	rjmp	.+22     	; 0xa93a <dir_register+0x196>
    a924:	c4 01       	movw	r24, r8
    a926:	0c 96       	adiw	r24, 0x0c	; 12
    a928:	6d e0       	ldi	r22, 0x0D	; 13
    a92a:	70 e0       	ldi	r23, 0x00	; 0
    a92c:	0e 94 59 e2 	call	0x1c4b2	; 0x1c4b2 <__udivmodhi4>
    a930:	7b 01       	movw	r14, r22
    a932:	ff ef       	ldi	r31, 0xFF	; 255
    a934:	ef 1a       	sub	r14, r31
    a936:	ff 0a       	sbc	r15, r31
    a938:	03 c0       	rjmp	.+6      	; 0xa940 <dir_register+0x19c>
    a93a:	ee 24       	eor	r14, r14
    a93c:	e3 94       	inc	r14
    a93e:	f1 2c       	mov	r15, r1
    a940:	b7 01       	movw	r22, r14
    a942:	c8 01       	movw	r24, r16
    a944:	d7 dc       	rcall	.-1618   	; 0xa2f4 <dir_alloc>
    a946:	00 97       	sbiw	r24, 0x00	; 0
    a948:	09 f0       	breq	.+2      	; 0xa94c <dir_register+0x1a8>
    a94a:	b4 c0       	rjmp	.+360    	; 0xaab4 <dir_register+0x310>
    a94c:	21 e0       	ldi	r18, 0x01	; 1
    a94e:	e2 1a       	sub	r14, r18
    a950:	f1 08       	sbc	r15, r1
    a952:	09 f4       	brne	.+2      	; 0xa956 <dir_register+0x1b2>
    a954:	88 c0       	rjmp	.+272    	; 0xaa66 <dir_register+0x2c2>
    a956:	f8 01       	movw	r30, r16
    a958:	46 85       	ldd	r20, Z+14	; 0x0e
    a95a:	57 85       	ldd	r21, Z+15	; 0x0f
    a95c:	60 89       	ldd	r22, Z+16	; 0x10
    a95e:	71 89       	ldd	r23, Z+17	; 0x11
    a960:	c7 01       	movw	r24, r14
    a962:	e5 e0       	ldi	r30, 0x05	; 5
    a964:	88 0f       	add	r24, r24
    a966:	99 1f       	adc	r25, r25
    a968:	ea 95       	dec	r30
    a96a:	e1 f7       	brne	.-8      	; 0xa964 <dir_register+0x1c0>
    a96c:	48 1b       	sub	r20, r24
    a96e:	59 0b       	sbc	r21, r25
    a970:	61 09       	sbc	r22, r1
    a972:	71 09       	sbc	r23, r1
    a974:	c8 01       	movw	r24, r16
    a976:	5e d9       	rcall	.-3396   	; 0x9c34 <dir_sdi>
    a978:	00 97       	sbiw	r24, 0x00	; 0
    a97a:	09 f0       	breq	.+2      	; 0xa97e <dir_register+0x1da>
    a97c:	9b c0       	rjmp	.+310    	; 0xaab4 <dir_register+0x310>
    a97e:	c5 01       	movw	r24, r10
    a980:	0e 94 6d 46 	call	0x8cda	; 0x8cda <sum_sfn>
    a984:	68 2e       	mov	r6, r24
    a986:	5f e0       	ldi	r21, 0x0F	; 15
    a988:	35 2e       	mov	r3, r21
    a98a:	6d e0       	ldi	r22, 0x0D	; 13
    a98c:	46 2e       	mov	r4, r22
    a98e:	78 ef       	ldi	r23, 0xF8	; 248
    a990:	87 2e       	mov	r8, r23
    a992:	74 e0       	ldi	r23, 0x04	; 4
    a994:	97 2e       	mov	r9, r23
    a996:	55 24       	eor	r5, r5
    a998:	53 94       	inc	r5
    a99a:	f8 01       	movw	r30, r16
    a99c:	46 89       	ldd	r20, Z+22	; 0x16
    a99e:	57 89       	ldd	r21, Z+23	; 0x17
    a9a0:	60 8d       	ldd	r22, Z+24	; 0x18
    a9a2:	71 8d       	ldd	r23, Z+25	; 0x19
    a9a4:	c6 01       	movw	r24, r12
    a9a6:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    a9aa:	00 97       	sbiw	r24, 0x00	; 0
    a9ac:	09 f0       	breq	.+2      	; 0xa9b0 <dir_register+0x20c>
    a9ae:	82 c0       	rjmp	.+260    	; 0xaab4 <dir_register+0x310>
    a9b0:	f6 01       	movw	r30, r12
    a9b2:	63 85       	ldd	r22, Z+11	; 0x0b
    a9b4:	74 85       	ldd	r23, Z+12	; 0x0c
    a9b6:	f8 01       	movw	r30, r16
    a9b8:	02 8c       	ldd	r0, Z+26	; 0x1a
    a9ba:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a9bc:	e0 2d       	mov	r30, r0
    a9be:	fe 8b       	std	Y+22, r31	; 0x16
    a9c0:	ed 8b       	std	Y+21, r30	; 0x15
    a9c2:	7e 2c       	mov	r7, r14
    a9c4:	65 86       	std	Z+13, r6	; 0x0d
    a9c6:	33 86       	std	Z+11, r3	; 0x0b
    a9c8:	14 86       	std	Z+12, r1	; 0x0c
    a9ca:	12 8e       	std	Z+26, r1	; 0x1a
    a9cc:	13 8e       	std	Z+27, r1	; 0x1b
    a9ce:	97 01       	movw	r18, r14
    a9d0:	33 27       	eor	r19, r19
    a9d2:	21 50       	subi	r18, 0x01	; 1
    a9d4:	31 09       	sbc	r19, r1
    a9d6:	42 9e       	mul	r4, r18
    a9d8:	c0 01       	movw	r24, r0
    a9da:	43 9e       	mul	r4, r19
    a9dc:	90 0d       	add	r25, r0
    a9de:	11 24       	eor	r1, r1
    a9e0:	ab ee       	ldi	r26, 0xEB	; 235
    a9e2:	b4 e0       	ldi	r27, 0x04	; 4
    a9e4:	20 e0       	ldi	r18, 0x00	; 0
    a9e6:	30 e0       	ldi	r19, 0x00	; 0
    a9e8:	2f 3f       	cpi	r18, 0xFF	; 255
    a9ea:	ff ef       	ldi	r31, 0xFF	; 255
    a9ec:	3f 07       	cpc	r19, r31
    a9ee:	49 f0       	breq	.+18     	; 0xaa02 <dir_register+0x25e>
    a9f0:	9c 01       	movw	r18, r24
    a9f2:	22 0f       	add	r18, r18
    a9f4:	33 1f       	adc	r19, r19
    a9f6:	26 0f       	add	r18, r22
    a9f8:	37 1f       	adc	r19, r23
    a9fa:	f9 01       	movw	r30, r18
    a9fc:	20 81       	ld	r18, Z
    a9fe:	31 81       	ldd	r19, Z+1	; 0x01
    aa00:	01 96       	adiw	r24, 0x01	; 1
    aa02:	4d 91       	ld	r20, X+
    aa04:	ed 89       	ldd	r30, Y+21	; 0x15
    aa06:	fe 89       	ldd	r31, Y+22	; 0x16
    aa08:	e4 0f       	add	r30, r20
    aa0a:	f1 1d       	adc	r31, r1
    aa0c:	20 83       	st	Z, r18
    aa0e:	31 83       	std	Z+1, r19	; 0x01
    aa10:	21 15       	cp	r18, r1
    aa12:	31 05       	cpc	r19, r1
    aa14:	11 f4       	brne	.+4      	; 0xaa1a <dir_register+0x276>
    aa16:	2f ef       	ldi	r18, 0xFF	; 255
    aa18:	3f ef       	ldi	r19, 0xFF	; 255
    aa1a:	8a 16       	cp	r8, r26
    aa1c:	9b 06       	cpc	r9, r27
    aa1e:	21 f7       	brne	.-56     	; 0xa9e8 <dir_register+0x244>
    aa20:	2f 3f       	cpi	r18, 0xFF	; 255
    aa22:	3f 4f       	sbci	r19, 0xFF	; 255
    aa24:	49 f0       	breq	.+18     	; 0xaa38 <dir_register+0x294>
    aa26:	88 0f       	add	r24, r24
    aa28:	99 1f       	adc	r25, r25
    aa2a:	db 01       	movw	r26, r22
    aa2c:	a8 0f       	add	r26, r24
    aa2e:	b9 1f       	adc	r27, r25
    aa30:	8d 91       	ld	r24, X+
    aa32:	9c 91       	ld	r25, X
    aa34:	89 2b       	or	r24, r25
    aa36:	19 f4       	brne	.+6      	; 0xaa3e <dir_register+0x29a>
    aa38:	27 2d       	mov	r18, r7
    aa3a:	20 64       	ori	r18, 0x40	; 64
    aa3c:	72 2e       	mov	r7, r18
    aa3e:	ed 89       	ldd	r30, Y+21	; 0x15
    aa40:	fe 89       	ldd	r31, Y+22	; 0x16
    aa42:	70 82       	st	Z, r7
    aa44:	f6 01       	movw	r30, r12
    aa46:	53 82       	std	Z+3, r5	; 0x03
    aa48:	60 e0       	ldi	r22, 0x00	; 0
    aa4a:	70 e0       	ldi	r23, 0x00	; 0
    aa4c:	c8 01       	movw	r24, r16
    aa4e:	6a db       	rcall	.-2348   	; 0xa124 <dir_next>
    aa50:	00 97       	sbiw	r24, 0x00	; 0
    aa52:	81 f5       	brne	.+96     	; 0xaab4 <dir_register+0x310>
    aa54:	f1 e0       	ldi	r31, 0x01	; 1
    aa56:	ef 1a       	sub	r14, r31
    aa58:	f1 08       	sbc	r15, r1
    aa5a:	09 f0       	breq	.+2      	; 0xaa5e <dir_register+0x2ba>
    aa5c:	9e cf       	rjmp	.-196    	; 0xa99a <dir_register+0x1f6>
    aa5e:	03 c0       	rjmp	.+6      	; 0xaa66 <dir_register+0x2c2>
    aa60:	26 e0       	ldi	r18, 0x06	; 6
    aa62:	90 e0       	ldi	r25, 0x00	; 0
    aa64:	28 c0       	rjmp	.+80     	; 0xaab6 <dir_register+0x312>
    aa66:	f8 01       	movw	r30, r16
    aa68:	46 89       	ldd	r20, Z+22	; 0x16
    aa6a:	57 89       	ldd	r21, Z+23	; 0x17
    aa6c:	60 8d       	ldd	r22, Z+24	; 0x18
    aa6e:	71 8d       	ldd	r23, Z+25	; 0x19
    aa70:	c6 01       	movw	r24, r12
    aa72:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    aa76:	00 97       	sbiw	r24, 0x00	; 0
    aa78:	e9 f4       	brne	.+58     	; 0xaab4 <dir_register+0x310>
    aa7a:	40 e2       	ldi	r20, 0x20	; 32
    aa7c:	50 e0       	ldi	r21, 0x00	; 0
    aa7e:	60 e0       	ldi	r22, 0x00	; 0
    aa80:	70 e0       	ldi	r23, 0x00	; 0
    aa82:	f8 01       	movw	r30, r16
    aa84:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa86:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa88:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <mem_set>
    aa8c:	4b e0       	ldi	r20, 0x0B	; 11
    aa8e:	50 e0       	ldi	r21, 0x00	; 0
    aa90:	b5 01       	movw	r22, r10
    aa92:	f8 01       	movw	r30, r16
    aa94:	82 8d       	ldd	r24, Z+26	; 0x1a
    aa96:	93 8d       	ldd	r25, Z+27	; 0x1b
    aa98:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    aa9c:	f8 01       	movw	r30, r16
    aa9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    aaa0:	33 8d       	ldd	r19, Z+27	; 0x1b
    aaa2:	87 a1       	ldd	r24, Z+39	; 0x27
    aaa4:	88 71       	andi	r24, 0x18	; 24
    aaa6:	f9 01       	movw	r30, r18
    aaa8:	84 87       	std	Z+12, r24	; 0x0c
    aaaa:	81 e0       	ldi	r24, 0x01	; 1
    aaac:	f6 01       	movw	r30, r12
    aaae:	83 83       	std	Z+3, r24	; 0x03
    aab0:	20 e0       	ldi	r18, 0x00	; 0
    aab2:	d7 cf       	rjmp	.-82     	; 0xaa62 <dir_register+0x2be>
    aab4:	28 2f       	mov	r18, r24
    aab6:	82 2f       	mov	r24, r18
    aab8:	66 96       	adiw	r28, 0x16	; 22
    aaba:	e2 e1       	ldi	r30, 0x12	; 18
    aabc:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000aac0 <follow_path>:
    aac0:	a8 e0       	ldi	r26, 0x08	; 8
    aac2:	b0 e0       	ldi	r27, 0x00	; 0
    aac4:	e6 e6       	ldi	r30, 0x66	; 102
    aac6:	f5 e5       	ldi	r31, 0x55	; 85
    aac8:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    aacc:	8c 01       	movw	r16, r24
    aace:	78 87       	std	Y+8, r23	; 0x08
    aad0:	6f 83       	std	Y+7, r22	; 0x07
    aad2:	dc 01       	movw	r26, r24
    aad4:	0d 90       	ld	r0, X+
    aad6:	bc 91       	ld	r27, X
    aad8:	a0 2d       	mov	r26, r0
    aada:	ba 83       	std	Y+2, r27	; 0x02
    aadc:	a9 83       	std	Y+1, r26	; 0x01
    aade:	fb 01       	movw	r30, r22
    aae0:	80 81       	ld	r24, Z
    aae2:	8f 32       	cpi	r24, 0x2F	; 47
    aae4:	11 f0       	breq	.+4      	; 0xaaea <follow_path+0x2a>
    aae6:	8c 35       	cpi	r24, 0x5C	; 92
    aae8:	19 f4       	brne	.+6      	; 0xaaf0 <follow_path+0x30>
    aaea:	2f 81       	ldd	r18, Y+7	; 0x07
    aaec:	38 85       	ldd	r19, Y+8	; 0x08
    aaee:	0c c0       	rjmp	.+24     	; 0xab08 <follow_path+0x48>
    aaf0:	e9 81       	ldd	r30, Y+1	; 0x01
    aaf2:	fa 81       	ldd	r31, Y+2	; 0x02
    aaf4:	85 89       	ldd	r24, Z+21	; 0x15
    aaf6:	96 89       	ldd	r25, Z+22	; 0x16
    aaf8:	a7 89       	ldd	r26, Z+23	; 0x17
    aafa:	b0 8d       	ldd	r27, Z+24	; 0x18
    aafc:	f8 01       	movw	r30, r16
    aafe:	86 83       	std	Z+6, r24	; 0x06
    ab00:	97 83       	std	Z+7, r25	; 0x07
    ab02:	a0 87       	std	Z+8, r26	; 0x08
    ab04:	b1 87       	std	Z+9, r27	; 0x09
    ab06:	0f c0       	rjmp	.+30     	; 0xab26 <follow_path+0x66>
    ab08:	38 87       	std	Y+8, r19	; 0x08
    ab0a:	2f 83       	std	Y+7, r18	; 0x07
    ab0c:	d9 01       	movw	r26, r18
    ab0e:	8c 91       	ld	r24, X
    ab10:	2f 5f       	subi	r18, 0xFF	; 255
    ab12:	3f 4f       	sbci	r19, 0xFF	; 255
    ab14:	8f 32       	cpi	r24, 0x2F	; 47
    ab16:	c1 f3       	breq	.-16     	; 0xab08 <follow_path+0x48>
    ab18:	8c 35       	cpi	r24, 0x5C	; 92
    ab1a:	b1 f3       	breq	.-20     	; 0xab08 <follow_path+0x48>
    ab1c:	f8 01       	movw	r30, r16
    ab1e:	16 82       	std	Z+6, r1	; 0x06
    ab20:	17 82       	std	Z+7, r1	; 0x07
    ab22:	10 86       	std	Z+8, r1	; 0x08
    ab24:	11 86       	std	Z+9, r1	; 0x09
    ab26:	af 81       	ldd	r26, Y+7	; 0x07
    ab28:	b8 85       	ldd	r27, Y+8	; 0x08
    ab2a:	8c 91       	ld	r24, X
    ab2c:	80 32       	cpi	r24, 0x20	; 32
    ab2e:	58 f0       	brcs	.+22     	; 0xab46 <follow_path+0x86>
    ab30:	f8 01       	movw	r30, r16
    ab32:	7c 96       	adiw	r30, 0x1c	; 28
    ab34:	fc 83       	std	Y+4, r31	; 0x04
    ab36:	eb 83       	std	Y+3, r30	; 0x03
    ab38:	29 81       	ldd	r18, Y+1	; 0x01
    ab3a:	3a 81       	ldd	r19, Y+2	; 0x02
    ab3c:	2b 5c       	subi	r18, 0xCB	; 203
    ab3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ab40:	3e 83       	std	Y+6, r19	; 0x06
    ab42:	2d 83       	std	Y+5, r18	; 0x05
    ab44:	76 c0       	rjmp	.+236    	; 0xac32 <follow_path+0x172>
    ab46:	80 e8       	ldi	r24, 0x80	; 128
    ab48:	f8 01       	movw	r30, r16
    ab4a:	87 a3       	std	Z+39, r24	; 0x27
    ab4c:	40 e0       	ldi	r20, 0x00	; 0
    ab4e:	50 e0       	ldi	r21, 0x00	; 0
    ab50:	ba 01       	movw	r22, r20
    ab52:	c8 01       	movw	r24, r16
    ab54:	6f d8       	rcall	.-3874   	; 0x9c34 <dir_sdi>
    ab56:	ec c1       	rjmp	.+984    	; 0xaf30 <follow_path+0x470>
    ab58:	65 eb       	ldi	r22, 0xB5	; 181
    ab5a:	71 e0       	ldi	r23, 0x01	; 1
    ab5c:	0e 94 47 67 	call	0xce8e	; 0xce8e <ff_oem2uni>
    ab60:	00 97       	sbiw	r24, 0x00	; 0
    ab62:	09 f4       	brne	.+2      	; 0xab66 <follow_path+0xa6>
    ab64:	b8 c1       	rjmp	.+880    	; 0xaed6 <follow_path+0x416>
    ab66:	80 32       	cpi	r24, 0x20	; 32
    ab68:	91 05       	cpc	r25, r1
    ab6a:	30 f1       	brcs	.+76     	; 0xabb8 <follow_path+0xf8>
    ab6c:	8f 32       	cpi	r24, 0x2F	; 47
    ab6e:	91 05       	cpc	r25, r1
    ab70:	09 f4       	brne	.+2      	; 0xab74 <follow_path+0xb4>
    ab72:	6b c0       	rjmp	.+214    	; 0xac4a <follow_path+0x18a>
    ab74:	8c 35       	cpi	r24, 0x5C	; 92
    ab76:	91 05       	cpc	r25, r1
    ab78:	09 f4       	brne	.+2      	; 0xab7c <follow_path+0xbc>
    ab7a:	67 c0       	rjmp	.+206    	; 0xac4a <follow_path+0x18a>
    ab7c:	80 38       	cpi	r24, 0x80	; 128
    ab7e:	91 05       	cpc	r25, r1
    ab80:	28 f4       	brcc	.+10     	; 0xab8c <follow_path+0xcc>
    ab82:	e7 e2       	ldi	r30, 0x27	; 39
    ab84:	f4 e0       	ldi	r31, 0x04	; 4
    ab86:	21 91       	ld	r18, Z+
    ab88:	21 11       	cpse	r18, r1
    ab8a:	61 c0       	rjmp	.+194    	; 0xac4e <follow_path+0x18e>
    ab8c:	ef 81       	ldd	r30, Y+7	; 0x07
    ab8e:	f8 85       	ldd	r31, Y+8	; 0x08
    ab90:	ef 3f       	cpi	r30, 0xFF	; 255
    ab92:	f1 05       	cpc	r31, r1
    ab94:	09 f4       	brne	.+2      	; 0xab98 <follow_path+0xd8>
    ab96:	9f c1       	rjmp	.+830    	; 0xaed6 <follow_path+0x416>
    ab98:	31 96       	adiw	r30, 0x01	; 1
    ab9a:	f8 87       	std	Y+8, r31	; 0x08
    ab9c:	ef 83       	std	Y+7, r30	; 0x07
    ab9e:	d6 01       	movw	r26, r12
    aba0:	8d 93       	st	X+, r24
    aba2:	9d 93       	st	X+, r25
    aba4:	6d 01       	movw	r12, r26
    aba6:	bf ef       	ldi	r27, 0xFF	; 255
    aba8:	eb 1a       	sub	r14, r27
    abaa:	fb 0a       	sbc	r15, r27
    abac:	f7 01       	movw	r30, r14
    abae:	31 97       	sbiw	r30, 0x01	; 1
    abb0:	80 81       	ld	r24, Z
    abb2:	90 e0       	ldi	r25, 0x00	; 0
    abb4:	00 97       	sbiw	r24, 0x00	; 0
    abb6:	81 f6       	brne	.-96     	; 0xab58 <follow_path+0x98>
    abb8:	74 e0       	ldi	r23, 0x04	; 4
    abba:	37 2e       	mov	r3, r23
    abbc:	2f 81       	ldd	r18, Y+7	; 0x07
    abbe:	38 85       	ldd	r19, Y+8	; 0x08
    abc0:	22 0f       	add	r18, r18
    abc2:	33 1f       	adc	r19, r19
    abc4:	8f 81       	ldd	r24, Y+7	; 0x07
    abc6:	98 85       	ldd	r25, Y+8	; 0x08
    abc8:	01 97       	sbiw	r24, 0x01	; 1
    abca:	09 f0       	breq	.+2      	; 0xabce <follow_path+0x10e>
    abcc:	51 c0       	rjmp	.+162    	; 0xac70 <follow_path+0x1b0>
    abce:	d5 01       	movw	r26, r10
    abd0:	8d 91       	ld	r24, X+
    abd2:	9c 91       	ld	r25, X
    abd4:	8e 97       	sbiw	r24, 0x2e	; 46
    abd6:	09 f0       	breq	.+2      	; 0xabda <follow_path+0x11a>
    abd8:	57 c0       	rjmp	.+174    	; 0xac88 <follow_path+0x1c8>
    abda:	f9 01       	movw	r30, r18
    abdc:	ea 0d       	add	r30, r10
    abde:	fb 1d       	adc	r31, r11
    abe0:	11 82       	std	Z+1, r1	; 0x01
    abe2:	10 82       	st	Z, r1
    abe4:	f8 01       	movw	r30, r16
    abe6:	7c 96       	adiw	r30, 0x1c	; 28
    abe8:	80 e0       	ldi	r24, 0x00	; 0
    abea:	90 e0       	ldi	r25, 0x00	; 0
    abec:	2f 81       	ldd	r18, Y+7	; 0x07
    abee:	38 85       	ldd	r19, Y+8	; 0x08
    abf0:	82 17       	cp	r24, r18
    abf2:	93 07       	cpc	r25, r19
    abf4:	08 f0       	brcs	.+2      	; 0xabf8 <follow_path+0x138>
    abf6:	4c c0       	rjmp	.+152    	; 0xac90 <follow_path+0x1d0>
    abf8:	2e e2       	ldi	r18, 0x2E	; 46
    abfa:	21 93       	st	Z+, r18
    abfc:	01 96       	adiw	r24, 0x01	; 1
    abfe:	8b 30       	cpi	r24, 0x0B	; 11
    ac00:	91 05       	cpc	r25, r1
    ac02:	a1 f7       	brne	.-24     	; 0xabec <follow_path+0x12c>
    ac04:	83 2d       	mov	r24, r3
    ac06:	80 62       	ori	r24, 0x20	; 32
    ac08:	f8 01       	movw	r30, r16
    ac0a:	87 a3       	std	Z+39, r24	; 0x27
    ac0c:	c8 01       	movw	r24, r16
    ac0e:	bc dc       	rcall	.-1672   	; 0xa588 <dir_find>
    ac10:	f8 01       	movw	r30, r16
    ac12:	27 a1       	ldd	r18, Z+39	; 0x27
    ac14:	00 97       	sbiw	r24, 0x00	; 0
    ac16:	09 f4       	brne	.+2      	; 0xac1a <follow_path+0x15a>
    ac18:	6a c1       	rjmp	.+724    	; 0xaeee <follow_path+0x42e>
    ac1a:	84 30       	cpi	r24, 0x04	; 4
    ac1c:	91 05       	cpc	r25, r1
    ac1e:	09 f0       	breq	.+2      	; 0xac22 <follow_path+0x162>
    ac20:	87 c1       	rjmp	.+782    	; 0xaf30 <follow_path+0x470>
    ac22:	32 2f       	mov	r19, r18
    ac24:	34 70       	andi	r19, 0x04	; 4
    ac26:	25 ff       	sbrs	r18, 5
    ac28:	5f c1       	rjmp	.+702    	; 0xaee8 <follow_path+0x428>
    ac2a:	31 11       	cpse	r19, r1
    ac2c:	57 c1       	rjmp	.+686    	; 0xaedc <follow_path+0x41c>
    ac2e:	f8 86       	std	Y+8, r15	; 0x08
    ac30:	ef 82       	std	Y+7, r14	; 0x07
    ac32:	d8 01       	movw	r26, r16
    ac34:	ed 91       	ld	r30, X+
    ac36:	fc 91       	ld	r31, X
    ac38:	a3 84       	ldd	r10, Z+11	; 0x0b
    ac3a:	b4 84       	ldd	r11, Z+12	; 0x0c
    ac3c:	45 01       	movw	r8, r10
    ac3e:	65 01       	movw	r12, r10
    ac40:	ef 80       	ldd	r14, Y+7	; 0x07
    ac42:	f8 84       	ldd	r15, Y+8	; 0x08
    ac44:	18 86       	std	Y+8, r1	; 0x08
    ac46:	1f 82       	std	Y+7, r1	; 0x07
    ac48:	ae cf       	rjmp	.-164    	; 0xaba6 <follow_path+0xe6>
    ac4a:	97 01       	movw	r18, r14
    ac4c:	06 c0       	rjmp	.+12     	; 0xac5a <follow_path+0x19a>
    ac4e:	30 e0       	ldi	r19, 0x00	; 0
    ac50:	82 17       	cp	r24, r18
    ac52:	93 07       	cpc	r25, r19
    ac54:	09 f0       	breq	.+2      	; 0xac58 <follow_path+0x198>
    ac56:	97 cf       	rjmp	.-210    	; 0xab86 <follow_path+0xc6>
    ac58:	3e c1       	rjmp	.+636    	; 0xaed6 <follow_path+0x416>
    ac5a:	79 01       	movw	r14, r18
    ac5c:	f9 01       	movw	r30, r18
    ac5e:	80 81       	ld	r24, Z
    ac60:	2f 5f       	subi	r18, 0xFF	; 255
    ac62:	3f 4f       	sbci	r19, 0xFF	; 255
    ac64:	8f 32       	cpi	r24, 0x2F	; 47
    ac66:	c9 f3       	breq	.-14     	; 0xac5a <follow_path+0x19a>
    ac68:	8c 35       	cpi	r24, 0x5C	; 92
    ac6a:	b9 f3       	breq	.-18     	; 0xac5a <follow_path+0x19a>
    ac6c:	31 2c       	mov	r3, r1
    ac6e:	a6 cf       	rjmp	.-180    	; 0xabbc <follow_path+0xfc>
    ac70:	ef 81       	ldd	r30, Y+7	; 0x07
    ac72:	f8 85       	ldd	r31, Y+8	; 0x08
    ac74:	32 97       	sbiw	r30, 0x02	; 2
    ac76:	41 f4       	brne	.+16     	; 0xac88 <follow_path+0x1c8>
    ac78:	f5 01       	movw	r30, r10
    ac7a:	82 81       	ldd	r24, Z+2	; 0x02
    ac7c:	93 81       	ldd	r25, Z+3	; 0x03
    ac7e:	8e 97       	sbiw	r24, 0x2e	; 46
    ac80:	19 f4       	brne	.+6      	; 0xac88 <follow_path+0x1c8>
    ac82:	80 81       	ld	r24, Z
    ac84:	91 81       	ldd	r25, Z+1	; 0x01
    ac86:	a6 cf       	rjmp	.-180    	; 0xabd4 <follow_path+0x114>
    ac88:	f9 01       	movw	r30, r18
    ac8a:	ea 0d       	add	r30, r10
    ac8c:	fb 1d       	adc	r31, r11
    ac8e:	0d c0       	rjmp	.+26     	; 0xacaa <follow_path+0x1ea>
    ac90:	20 e2       	ldi	r18, 0x20	; 32
    ac92:	b3 cf       	rjmp	.-154    	; 0xabfa <follow_path+0x13a>
    ac94:	92 91       	ld	r25, -Z
    ac96:	82 91       	ld	r24, -Z
    ac98:	80 32       	cpi	r24, 0x20	; 32
    ac9a:	91 05       	cpc	r25, r1
    ac9c:	59 f4       	brne	.+22     	; 0xacb4 <follow_path+0x1f4>
    ac9e:	2f 81       	ldd	r18, Y+7	; 0x07
    aca0:	38 85       	ldd	r19, Y+8	; 0x08
    aca2:	21 50       	subi	r18, 0x01	; 1
    aca4:	31 09       	sbc	r19, r1
    aca6:	38 87       	std	Y+8, r19	; 0x08
    aca8:	2f 83       	std	Y+7, r18	; 0x07
    acaa:	8f 81       	ldd	r24, Y+7	; 0x07
    acac:	98 85       	ldd	r25, Y+8	; 0x08
    acae:	89 2b       	or	r24, r25
    acb0:	89 f7       	brne	.-30     	; 0xac94 <follow_path+0x1d4>
    acb2:	02 c0       	rjmp	.+4      	; 0xacb8 <follow_path+0x1f8>
    acb4:	8e 97       	sbiw	r24, 0x2e	; 46
    acb6:	99 f3       	breq	.-26     	; 0xac9e <follow_path+0x1de>
    acb8:	ef 81       	ldd	r30, Y+7	; 0x07
    acba:	f8 85       	ldd	r31, Y+8	; 0x08
    acbc:	ee 0f       	add	r30, r30
    acbe:	ff 1f       	adc	r31, r31
    acc0:	ea 0d       	add	r30, r10
    acc2:	fb 1d       	adc	r31, r11
    acc4:	11 82       	std	Z+1, r1	; 0x01
    acc6:	10 82       	st	Z, r1
    acc8:	af 81       	ldd	r26, Y+7	; 0x07
    acca:	b8 85       	ldd	r27, Y+8	; 0x08
    accc:	ab 2b       	or	r26, r27
    acce:	09 f4       	brne	.+2      	; 0xacd2 <follow_path+0x212>
    acd0:	02 c1       	rjmp	.+516    	; 0xaed6 <follow_path+0x416>
    acd2:	61 2c       	mov	r6, r1
    acd4:	71 2c       	mov	r7, r1
    acd6:	d4 01       	movw	r26, r8
    acd8:	8d 91       	ld	r24, X+
    acda:	9d 91       	ld	r25, X+
    acdc:	4d 01       	movw	r8, r26
    acde:	80 32       	cpi	r24, 0x20	; 32
    ace0:	91 05       	cpc	r25, r1
    ace2:	21 f4       	brne	.+8      	; 0xacec <follow_path+0x22c>
    ace4:	bf ef       	ldi	r27, 0xFF	; 255
    ace6:	6b 1a       	sub	r6, r27
    ace8:	7b 0a       	sbc	r7, r27
    acea:	f5 cf       	rjmp	.-22     	; 0xacd6 <follow_path+0x216>
    acec:	61 14       	cp	r6, r1
    acee:	71 04       	cpc	r7, r1
    acf0:	11 f4       	brne	.+4      	; 0xacf6 <follow_path+0x236>
    acf2:	8e 97       	sbiw	r24, 0x2e	; 46
    acf4:	61 f4       	brne	.+24     	; 0xad0e <follow_path+0x24e>
    acf6:	b3 2d       	mov	r27, r3
    acf8:	b3 60       	ori	r27, 0x03	; 3
    acfa:	3b 2e       	mov	r3, r27
    acfc:	08 c0       	rjmp	.+16     	; 0xad0e <follow_path+0x24e>
    acfe:	2f 81       	ldd	r18, Y+7	; 0x07
    ad00:	38 85       	ldd	r19, Y+8	; 0x08
    ad02:	21 50       	subi	r18, 0x01	; 1
    ad04:	31 09       	sbc	r19, r1
    ad06:	38 87       	std	Y+8, r19	; 0x08
    ad08:	2f 83       	std	Y+7, r18	; 0x07
    ad0a:	23 2b       	or	r18, r19
    ad0c:	21 f0       	breq	.+8      	; 0xad16 <follow_path+0x256>
    ad0e:	92 91       	ld	r25, -Z
    ad10:	82 91       	ld	r24, -Z
    ad12:	8e 97       	sbiw	r24, 0x2e	; 46
    ad14:	a1 f7       	brne	.-24     	; 0xacfe <follow_path+0x23e>
    ad16:	4b e0       	ldi	r20, 0x0B	; 11
    ad18:	50 e0       	ldi	r21, 0x00	; 0
    ad1a:	60 e2       	ldi	r22, 0x20	; 32
    ad1c:	70 e0       	ldi	r23, 0x00	; 0
    ad1e:	8b 81       	ldd	r24, Y+3	; 0x03
    ad20:	9c 81       	ldd	r25, Y+4	; 0x04
    ad22:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <mem_set>
    ad26:	48 e0       	ldi	r20, 0x08	; 8
    ad28:	84 2e       	mov	r8, r20
    ad2a:	91 2c       	mov	r9, r1
    ad2c:	c1 2c       	mov	r12, r1
    ad2e:	d1 2c       	mov	r13, r1
    ad30:	21 2c       	mov	r2, r1
    ad32:	23 01       	movw	r4, r6
    ad34:	3f ef       	ldi	r19, 0xFF	; 255
    ad36:	43 1a       	sub	r4, r19
    ad38:	53 0a       	sbc	r5, r19
    ad3a:	66 0c       	add	r6, r6
    ad3c:	77 1c       	adc	r7, r7
    ad3e:	f5 01       	movw	r30, r10
    ad40:	e6 0d       	add	r30, r6
    ad42:	f7 1d       	adc	r31, r7
    ad44:	80 81       	ld	r24, Z
    ad46:	91 81       	ldd	r25, Z+1	; 0x01
    ad48:	00 97       	sbiw	r24, 0x00	; 0
    ad4a:	09 f4       	brne	.+2      	; 0xad4e <follow_path+0x28e>
    ad4c:	9e c0       	rjmp	.+316    	; 0xae8a <follow_path+0x3ca>
    ad4e:	80 32       	cpi	r24, 0x20	; 32
    ad50:	91 05       	cpc	r25, r1
    ad52:	41 f0       	breq	.+16     	; 0xad64 <follow_path+0x2a4>
    ad54:	8e 32       	cpi	r24, 0x2E	; 46
    ad56:	91 05       	cpc	r25, r1
    ad58:	51 f4       	brne	.+20     	; 0xad6e <follow_path+0x2ae>
    ad5a:	8f 81       	ldd	r24, Y+7	; 0x07
    ad5c:	98 85       	ldd	r25, Y+8	; 0x08
    ad5e:	84 15       	cp	r24, r4
    ad60:	95 05       	cpc	r25, r5
    ad62:	71 f0       	breq	.+28     	; 0xad80 <follow_path+0x2c0>
    ad64:	93 2d       	mov	r25, r3
    ad66:	93 60       	ori	r25, 0x03	; 3
    ad68:	39 2e       	mov	r3, r25
    ad6a:	32 01       	movw	r6, r4
    ad6c:	e2 cf       	rjmp	.-60     	; 0xad32 <follow_path+0x272>
    ad6e:	c8 14       	cp	r12, r8
    ad70:	d9 04       	cpc	r13, r9
    ad72:	50 f4       	brcc	.+20     	; 0xad88 <follow_path+0x2c8>
    ad74:	af 81       	ldd	r26, Y+7	; 0x07
    ad76:	b8 85       	ldd	r27, Y+8	; 0x08
    ad78:	a4 15       	cp	r26, r4
    ad7a:	b5 05       	cpc	r27, r5
    ad7c:	49 f5       	brne	.+82     	; 0xadd0 <follow_path+0x310>
    ad7e:	d2 c0       	rjmp	.+420    	; 0xaf24 <follow_path+0x464>
    ad80:	c8 14       	cp	r12, r8
    ad82:	d9 04       	cpc	r13, r9
    ad84:	08 f4       	brcc	.+2      	; 0xad88 <follow_path+0x2c8>
    ad86:	ce c0       	rjmp	.+412    	; 0xaf24 <follow_path+0x464>
    ad88:	bb e0       	ldi	r27, 0x0B	; 11
    ad8a:	8b 16       	cp	r8, r27
    ad8c:	91 04       	cpc	r9, r1
    ad8e:	39 f4       	brne	.+14     	; 0xad9e <follow_path+0x2de>
    ad90:	e3 2d       	mov	r30, r3
    ad92:	e3 60       	ori	r30, 0x03	; 3
    ad94:	3e 2e       	mov	r3, r30
    ad96:	2b e0       	ldi	r18, 0x0B	; 11
    ad98:	82 2e       	mov	r8, r18
    ad9a:	91 2c       	mov	r9, r1
    ad9c:	76 c0       	rjmp	.+236    	; 0xae8a <follow_path+0x3ca>
    ad9e:	2f 81       	ldd	r18, Y+7	; 0x07
    ada0:	38 85       	ldd	r19, Y+8	; 0x08
    ada2:	24 15       	cp	r18, r4
    ada4:	35 05       	cpc	r19, r5
    ada6:	49 f0       	breq	.+18     	; 0xadba <follow_path+0x2fa>
    ada8:	33 2d       	mov	r19, r3
    adaa:	33 60       	ori	r19, 0x03	; 3
    adac:	33 2e       	mov	r3, r19
    adae:	8f 81       	ldd	r24, Y+7	; 0x07
    adb0:	98 85       	ldd	r25, Y+8	; 0x08
    adb2:	84 15       	cp	r24, r4
    adb4:	95 05       	cpc	r25, r5
    adb6:	08 f4       	brcc	.+2      	; 0xadba <follow_path+0x2fa>
    adb8:	68 c0       	rjmp	.+208    	; 0xae8a <follow_path+0x3ca>
    adba:	22 0c       	add	r2, r2
    adbc:	22 0c       	add	r2, r2
    adbe:	4f 80       	ldd	r4, Y+7	; 0x07
    adc0:	58 84       	ldd	r5, Y+8	; 0x08
    adc2:	8b e0       	ldi	r24, 0x0B	; 11
    adc4:	88 2e       	mov	r8, r24
    adc6:	91 2c       	mov	r9, r1
    adc8:	98 e0       	ldi	r25, 0x08	; 8
    adca:	c9 2e       	mov	r12, r25
    adcc:	d1 2c       	mov	r13, r1
    adce:	cd cf       	rjmp	.-102    	; 0xad6a <follow_path+0x2aa>
    add0:	80 38       	cpi	r24, 0x80	; 128
    add2:	91 05       	cpc	r25, r1
    add4:	70 f1       	brcs	.+92     	; 0xae32 <follow_path+0x372>
    add6:	a3 2d       	mov	r26, r3
    add8:	a2 60       	ori	r26, 0x02	; 2
    adda:	7a 2e       	mov	r7, r26
    addc:	bc 01       	movw	r22, r24
    adde:	80 e0       	ldi	r24, 0x00	; 0
    ade0:	90 e0       	ldi	r25, 0x00	; 0
    ade2:	45 eb       	ldi	r20, 0xB5	; 181
    ade4:	51 e0       	ldi	r21, 0x01	; 1
    ade6:	0e 94 14 67 	call	0xce28	; 0xce28 <ff_uni2oem>
    adea:	87 ff       	sbrs	r24, 7
    adec:	08 c0       	rjmp	.+16     	; 0xadfe <follow_path+0x33e>
    adee:	8f 77       	andi	r24, 0x7F	; 127
    adf0:	99 27       	eor	r25, r25
    adf2:	fc 01       	movw	r30, r24
    adf4:	e5 59       	subi	r30, 0x95	; 149
    adf6:	fb 4f       	sbci	r31, 0xFB	; 251
    adf8:	80 81       	ld	r24, Z
    adfa:	90 e0       	ldi	r25, 0x00	; 0
    adfc:	17 c0       	rjmp	.+46     	; 0xae2c <follow_path+0x36c>
    adfe:	8f 3f       	cpi	r24, 0xFF	; 255
    ae00:	91 05       	cpc	r25, r1
    ae02:	a1 f0       	breq	.+40     	; 0xae2c <follow_path+0x36c>
    ae04:	98 f0       	brcs	.+38     	; 0xae2c <follow_path+0x36c>
    ae06:	94 01       	movw	r18, r8
    ae08:	21 50       	subi	r18, 0x01	; 1
    ae0a:	31 09       	sbc	r19, r1
    ae0c:	c2 16       	cp	r12, r18
    ae0e:	d3 06       	cpc	r13, r19
    ae10:	28 f0       	brcs	.+10     	; 0xae1c <follow_path+0x35c>
    ae12:	b3 2d       	mov	r27, r3
    ae14:	b3 60       	ori	r27, 0x03	; 3
    ae16:	3b 2e       	mov	r3, r27
    ae18:	64 01       	movw	r12, r8
    ae1a:	a7 cf       	rjmp	.-178    	; 0xad6a <follow_path+0x2aa>
    ae1c:	f8 01       	movw	r30, r16
    ae1e:	ec 0d       	add	r30, r12
    ae20:	fd 1d       	adc	r31, r13
    ae22:	94 8f       	std	Z+28, r25	; 0x1c
    ae24:	f6 01       	movw	r30, r12
    ae26:	31 96       	adiw	r30, 0x01	; 1
    ae28:	6f 01       	movw	r12, r30
    ae2a:	26 c0       	rjmp	.+76     	; 0xae78 <follow_path+0x3b8>
    ae2c:	00 97       	sbiw	r24, 0x00	; 0
    ae2e:	59 f0       	breq	.+22     	; 0xae46 <follow_path+0x386>
    ae30:	01 c0       	rjmp	.+2      	; 0xae34 <follow_path+0x374>
    ae32:	73 2c       	mov	r7, r3
    ae34:	e0 e3       	ldi	r30, 0x30	; 48
    ae36:	f4 e0       	ldi	r31, 0x04	; 4
    ae38:	21 91       	ld	r18, Z+
    ae3a:	22 23       	and	r18, r18
    ae3c:	51 f0       	breq	.+20     	; 0xae52 <follow_path+0x392>
    ae3e:	30 e0       	ldi	r19, 0x00	; 0
    ae40:	82 17       	cp	r24, r18
    ae42:	93 07       	cpc	r25, r19
    ae44:	c9 f7       	brne	.-14     	; 0xae38 <follow_path+0x378>
    ae46:	f7 2d       	mov	r31, r7
    ae48:	f3 60       	ori	r31, 0x03	; 3
    ae4a:	7f 2e       	mov	r7, r31
    ae4c:	8f e5       	ldi	r24, 0x5F	; 95
    ae4e:	90 e0       	ldi	r25, 0x00	; 0
    ae50:	13 c0       	rjmp	.+38     	; 0xae78 <follow_path+0x3b8>
    ae52:	9c 01       	movw	r18, r24
    ae54:	21 54       	subi	r18, 0x41	; 65
    ae56:	31 09       	sbc	r19, r1
    ae58:	2a 31       	cpi	r18, 0x1A	; 26
    ae5a:	31 05       	cpc	r19, r1
    ae5c:	18 f4       	brcc	.+6      	; 0xae64 <follow_path+0x3a4>
    ae5e:	22 2d       	mov	r18, r2
    ae60:	22 60       	ori	r18, 0x02	; 2
    ae62:	22 2e       	mov	r2, r18
    ae64:	9c 01       	movw	r18, r24
    ae66:	21 56       	subi	r18, 0x61	; 97
    ae68:	31 09       	sbc	r19, r1
    ae6a:	2a 31       	cpi	r18, 0x1A	; 26
    ae6c:	31 05       	cpc	r19, r1
    ae6e:	20 f4       	brcc	.+8      	; 0xae78 <follow_path+0x3b8>
    ae70:	32 2d       	mov	r19, r2
    ae72:	31 60       	ori	r19, 0x01	; 1
    ae74:	23 2e       	mov	r2, r19
    ae76:	80 97       	sbiw	r24, 0x20	; 32
    ae78:	f8 01       	movw	r30, r16
    ae7a:	ec 0d       	add	r30, r12
    ae7c:	fd 1d       	adc	r31, r13
    ae7e:	84 8f       	std	Z+28, r24	; 0x1c
    ae80:	c6 01       	movw	r24, r12
    ae82:	01 96       	adiw	r24, 0x01	; 1
    ae84:	6c 01       	movw	r12, r24
    ae86:	37 2c       	mov	r3, r7
    ae88:	70 cf       	rjmp	.-288    	; 0xad6a <follow_path+0x2aa>
    ae8a:	f8 01       	movw	r30, r16
    ae8c:	84 8d       	ldd	r24, Z+28	; 0x1c
    ae8e:	85 3e       	cpi	r24, 0xE5	; 229
    ae90:	11 f4       	brne	.+4      	; 0xae96 <follow_path+0x3d6>
    ae92:	25 e0       	ldi	r18, 0x05	; 5
    ae94:	24 8f       	std	Z+28, r18	; 0x1c
    ae96:	38 e0       	ldi	r19, 0x08	; 8
    ae98:	83 16       	cp	r8, r19
    ae9a:	91 04       	cpc	r9, r1
    ae9c:	11 f4       	brne	.+4      	; 0xaea2 <follow_path+0x3e2>
    ae9e:	22 0c       	add	r2, r2
    aea0:	22 0c       	add	r2, r2
    aea2:	82 2d       	mov	r24, r2
    aea4:	8c 70       	andi	r24, 0x0C	; 12
    aea6:	8c 30       	cpi	r24, 0x0C	; 12
    aea8:	21 f0       	breq	.+8      	; 0xaeb2 <follow_path+0x3f2>
    aeaa:	82 2d       	mov	r24, r2
    aeac:	83 70       	andi	r24, 0x03	; 3
    aeae:	83 30       	cpi	r24, 0x03	; 3
    aeb0:	19 f4       	brne	.+6      	; 0xaeb8 <follow_path+0x3f8>
    aeb2:	83 2d       	mov	r24, r3
    aeb4:	82 60       	ori	r24, 0x02	; 2
    aeb6:	38 2e       	mov	r3, r24
    aeb8:	31 fc       	sbrc	r3, 1
    aeba:	0a c0       	rjmp	.+20     	; 0xaed0 <follow_path+0x410>
    aebc:	20 fe       	sbrs	r2, 0
    aebe:	03 c0       	rjmp	.+6      	; 0xaec6 <follow_path+0x406>
    aec0:	93 2d       	mov	r25, r3
    aec2:	90 61       	ori	r25, 0x10	; 16
    aec4:	39 2e       	mov	r3, r25
    aec6:	22 fe       	sbrs	r2, 2
    aec8:	03 c0       	rjmp	.+6      	; 0xaed0 <follow_path+0x410>
    aeca:	a3 2d       	mov	r26, r3
    aecc:	a8 60       	ori	r26, 0x08	; 8
    aece:	3a 2e       	mov	r3, r26
    aed0:	f8 01       	movw	r30, r16
    aed2:	37 a2       	std	Z+39, r3	; 0x27
    aed4:	9b ce       	rjmp	.-714    	; 0xac0c <follow_path+0x14c>
    aed6:	86 e0       	ldi	r24, 0x06	; 6
    aed8:	90 e0       	ldi	r25, 0x00	; 0
    aeda:	2a c0       	rjmp	.+84     	; 0xaf30 <follow_path+0x470>
    aedc:	80 e8       	ldi	r24, 0x80	; 128
    aede:	f8 01       	movw	r30, r16
    aee0:	87 a3       	std	Z+39, r24	; 0x27
    aee2:	80 e0       	ldi	r24, 0x00	; 0
    aee4:	90 e0       	ldi	r25, 0x00	; 0
    aee6:	24 c0       	rjmp	.+72     	; 0xaf30 <follow_path+0x470>
    aee8:	33 23       	and	r19, r19
    aeea:	c9 f0       	breq	.+50     	; 0xaf1e <follow_path+0x45e>
    aeec:	21 c0       	rjmp	.+66     	; 0xaf30 <follow_path+0x470>
    aeee:	22 fd       	sbrc	r18, 2
    aef0:	1f c0       	rjmp	.+62     	; 0xaf30 <follow_path+0x470>
    aef2:	f8 01       	movw	r30, r16
    aef4:	84 81       	ldd	r24, Z+4	; 0x04
    aef6:	84 ff       	sbrs	r24, 4
    aef8:	12 c0       	rjmp	.+36     	; 0xaf1e <follow_path+0x45e>
    aefa:	66 85       	ldd	r22, Z+14	; 0x0e
    aefc:	77 85       	ldd	r23, Z+15	; 0x0f
    aefe:	71 70       	andi	r23, 0x01	; 1
    af00:	2d 81       	ldd	r18, Y+5	; 0x05
    af02:	3e 81       	ldd	r19, Y+6	; 0x06
    af04:	62 0f       	add	r22, r18
    af06:	73 1f       	adc	r23, r19
    af08:	a9 81       	ldd	r26, Y+1	; 0x01
    af0a:	ba 81       	ldd	r27, Y+2	; 0x02
    af0c:	8c 91       	ld	r24, X
    af0e:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    af12:	f8 01       	movw	r30, r16
    af14:	66 83       	std	Z+6, r22	; 0x06
    af16:	77 83       	std	Z+7, r23	; 0x07
    af18:	80 87       	std	Z+8, r24	; 0x08
    af1a:	91 87       	std	Z+9, r25	; 0x09
    af1c:	88 ce       	rjmp	.-752    	; 0xac2e <follow_path+0x16e>
    af1e:	85 e0       	ldi	r24, 0x05	; 5
    af20:	90 e0       	ldi	r25, 0x00	; 0
    af22:	06 c0       	rjmp	.+12     	; 0xaf30 <follow_path+0x470>
    af24:	fb e0       	ldi	r31, 0x0B	; 11
    af26:	8f 16       	cp	r8, r31
    af28:	91 04       	cpc	r9, r1
    af2a:	09 f0       	breq	.+2      	; 0xaf2e <follow_path+0x46e>
    af2c:	46 cf       	rjmp	.-372    	; 0xadba <follow_path+0x2fa>
    af2e:	30 cf       	rjmp	.-416    	; 0xad90 <follow_path+0x2d0>
    af30:	28 96       	adiw	r28, 0x08	; 8
    af32:	e2 e1       	ldi	r30, 0x12	; 18
    af34:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000af38 <f_mount>:
    af38:	a6 e0       	ldi	r26, 0x06	; 6
    af3a:	b0 e0       	ldi	r27, 0x00	; 0
    af3c:	e2 ea       	ldi	r30, 0xA2	; 162
    af3e:	f7 e5       	ldi	r31, 0x57	; 87
    af40:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x1e>
    af44:	9c 83       	std	Y+4, r25	; 0x04
    af46:	8b 83       	std	Y+3, r24	; 0x03
    af48:	7e 83       	std	Y+6, r23	; 0x06
    af4a:	6d 83       	std	Y+5, r22	; 0x05
    af4c:	14 2f       	mov	r17, r20
    af4e:	7a 83       	std	Y+2, r23	; 0x02
    af50:	69 83       	std	Y+1, r22	; 0x01
    af52:	ce 01       	movw	r24, r28
    af54:	01 96       	adiw	r24, 0x01	; 1
    af56:	0e 94 7c 46 	call	0x8cf8	; 0x8cf8 <get_ldnumber>
    af5a:	97 fd       	sbrc	r25, 7
    af5c:	20 c0       	rjmp	.+64     	; 0xaf9e <f_mount+0x66>
    af5e:	88 0f       	add	r24, r24
    af60:	99 1f       	adc	r25, r25
    af62:	fc 01       	movw	r30, r24
    af64:	ef 5d       	subi	r30, 0xDF	; 223
    af66:	f7 4e       	sbci	r31, 0xE7	; 231
    af68:	01 90       	ld	r0, Z+
    af6a:	f0 81       	ld	r31, Z
    af6c:	e0 2d       	mov	r30, r0
    af6e:	30 97       	sbiw	r30, 0x00	; 0
    af70:	09 f0       	breq	.+2      	; 0xaf74 <f_mount+0x3c>
    af72:	10 82       	st	Z, r1
    af74:	eb 81       	ldd	r30, Y+3	; 0x03
    af76:	fc 81       	ldd	r31, Y+4	; 0x04
    af78:	30 97       	sbiw	r30, 0x00	; 0
    af7a:	09 f0       	breq	.+2      	; 0xaf7e <f_mount+0x46>
    af7c:	10 82       	st	Z, r1
    af7e:	dc 01       	movw	r26, r24
    af80:	af 5d       	subi	r26, 0xDF	; 223
    af82:	b7 4e       	sbci	r27, 0xE7	; 231
    af84:	ed 93       	st	X+, r30
    af86:	fc 93       	st	X, r31
    af88:	11 23       	and	r17, r17
    af8a:	61 f0       	breq	.+24     	; 0xafa4 <f_mount+0x6c>
    af8c:	40 e0       	ldi	r20, 0x00	; 0
    af8e:	be 01       	movw	r22, r28
    af90:	6d 5f       	subi	r22, 0xFD	; 253
    af92:	7f 4f       	sbci	r23, 0xFF	; 255
    af94:	ce 01       	movw	r24, r28
    af96:	05 96       	adiw	r24, 0x05	; 5
    af98:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    af9c:	05 c0       	rjmp	.+10     	; 0xafa8 <f_mount+0x70>
    af9e:	8b e0       	ldi	r24, 0x0B	; 11
    afa0:	90 e0       	ldi	r25, 0x00	; 0
    afa2:	02 c0       	rjmp	.+4      	; 0xafa8 <f_mount+0x70>
    afa4:	80 e0       	ldi	r24, 0x00	; 0
    afa6:	90 e0       	ldi	r25, 0x00	; 0
    afa8:	26 96       	adiw	r28, 0x06	; 6
    afaa:	e3 e0       	ldi	r30, 0x03	; 3
    afac:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x1e>

0000afb0 <f_open>:
    afb0:	a6 e3       	ldi	r26, 0x36	; 54
    afb2:	b0 e0       	ldi	r27, 0x00	; 0
    afb4:	ee ed       	ldi	r30, 0xDE	; 222
    afb6:	f7 e5       	ldi	r31, 0x57	; 87
    afb8:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    afbc:	7a ab       	std	Y+50, r23	; 0x32
    afbe:	69 ab       	std	Y+49, r22	; 0x31
    afc0:	00 97       	sbiw	r24, 0x00	; 0
    afc2:	09 f4       	brne	.+2      	; 0xafc6 <f_open+0x16>
    afc4:	93 c1       	rjmp	.+806    	; 0xb2ec <f_open+0x33c>
    afc6:	74 2e       	mov	r7, r20
    afc8:	7c 01       	movw	r14, r24
    afca:	24 2f       	mov	r18, r20
    afcc:	2f 73       	andi	r18, 0x3F	; 63
    afce:	32 2e       	mov	r3, r18
    afd0:	42 2f       	mov	r20, r18
    afd2:	be 01       	movw	r22, r28
    afd4:	61 5d       	subi	r22, 0xD1	; 209
    afd6:	7f 4f       	sbci	r23, 0xFF	; 255
    afd8:	ce 01       	movw	r24, r28
    afda:	c1 96       	adiw	r24, 0x31	; 49
    afdc:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    afe0:	00 97       	sbiw	r24, 0x00	; 0
    afe2:	09 f0       	breq	.+2      	; 0xafe6 <f_open+0x36>
    afe4:	7d c1       	rjmp	.+762    	; 0xb2e0 <f_open+0x330>
    afe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    afe8:	98 a9       	ldd	r25, Y+48	; 0x30
    afea:	9a 83       	std	Y+2, r25	; 0x02
    afec:	89 83       	std	Y+1, r24	; 0x01
    afee:	80 e0       	ldi	r24, 0x00	; 0
    aff0:	92 e0       	ldi	r25, 0x02	; 2
    aff2:	0e 94 0e 67 	call	0xce1c	; 0xce1c <ff_memalloc>
    aff6:	5c 01       	movw	r10, r24
    aff8:	00 97       	sbiw	r24, 0x00	; 0
    affa:	09 f4       	brne	.+2      	; 0xaffe <f_open+0x4e>
    affc:	79 c1       	rjmp	.+754    	; 0xb2f0 <f_open+0x340>
    affe:	ef a5       	ldd	r30, Y+47	; 0x2f
    b000:	f8 a9       	ldd	r31, Y+48	; 0x30
    b002:	94 87       	std	Z+12, r25	; 0x0c
    b004:	83 87       	std	Z+11, r24	; 0x0b
    b006:	69 a9       	ldd	r22, Y+49	; 0x31
    b008:	7a a9       	ldd	r23, Y+50	; 0x32
    b00a:	ce 01       	movw	r24, r28
    b00c:	01 96       	adiw	r24, 0x01	; 1
    b00e:	58 dd       	rcall	.-1360   	; 0xaac0 <follow_path>
    b010:	8c 01       	movw	r16, r24
    b012:	89 2b       	or	r24, r25
    b014:	29 f4       	brne	.+10     	; 0xb020 <f_open+0x70>
    b016:	88 a5       	ldd	r24, Y+40	; 0x28
    b018:	87 ff       	sbrs	r24, 7
    b01a:	02 c0       	rjmp	.+4      	; 0xb020 <f_open+0x70>
    b01c:	06 e0       	ldi	r16, 0x06	; 6
    b01e:	10 e0       	ldi	r17, 0x00	; 0
    b020:	87 2d       	mov	r24, r7
    b022:	8c 71       	andi	r24, 0x1C	; 28
    b024:	09 f4       	brne	.+2      	; 0xb028 <f_open+0x78>
    b026:	75 c0       	rjmp	.+234    	; 0xb112 <f_open+0x162>
    b028:	01 15       	cp	r16, r1
    b02a:	11 05       	cpc	r17, r1
    b02c:	79 f0       	breq	.+30     	; 0xb04c <f_open+0x9c>
    b02e:	04 30       	cpi	r16, 0x04	; 4
    b030:	11 05       	cpc	r17, r1
    b032:	09 f0       	breq	.+2      	; 0xb036 <f_open+0x86>
    b034:	6d c1       	rjmp	.+730    	; 0xb310 <f_open+0x360>
    b036:	ce 01       	movw	r24, r28
    b038:	01 96       	adiw	r24, 0x01	; 1
    b03a:	b4 db       	rcall	.-2200   	; 0xa7a4 <dir_register>
    b03c:	8c 01       	movw	r16, r24
    b03e:	89 2b       	or	r24, r25
    b040:	09 f0       	breq	.+2      	; 0xb044 <f_open+0x94>
    b042:	66 c1       	rjmp	.+716    	; 0xb310 <f_open+0x360>
    b044:	33 2d       	mov	r19, r3
    b046:	38 60       	ori	r19, 0x08	; 8
    b048:	33 2e       	mov	r3, r19
    b04a:	06 c0       	rjmp	.+12     	; 0xb058 <f_open+0xa8>
    b04c:	8d 81       	ldd	r24, Y+5	; 0x05
    b04e:	81 71       	andi	r24, 0x11	; 17
    b050:	09 f0       	breq	.+2      	; 0xb054 <f_open+0xa4>
    b052:	5c c1       	rjmp	.+696    	; 0xb30c <f_open+0x35c>
    b054:	72 fc       	sbrc	r7, 2
    b056:	51 c1       	rjmp	.+674    	; 0xb2fa <f_open+0x34a>
    b058:	33 fe       	sbrs	r3, 3
    b05a:	6b c0       	rjmp	.+214    	; 0xb132 <f_open+0x182>
    b05c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b05e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b060:	ef a5       	ldd	r30, Y+47	; 0x2f
    b062:	f8 a9       	ldd	r31, Y+48	; 0x30
    b064:	b8 01       	movw	r22, r16
    b066:	80 81       	ld	r24, Z
    b068:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    b06c:	2b 01       	movw	r4, r22
    b06e:	3c 01       	movw	r6, r24
    b070:	0e 94 8f 6e 	call	0xdd1e	; 0xdd1e <get_fattime>
    b074:	ab 01       	movw	r20, r22
    b076:	bc 01       	movw	r22, r24
    b078:	c8 01       	movw	r24, r16
    b07a:	0e 96       	adiw	r24, 0x0e	; 14
    b07c:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <st_dword>
    b080:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b082:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b084:	80 e2       	ldi	r24, 0x20	; 32
    b086:	83 87       	std	Z+11, r24	; 0x0b
    b088:	af a5       	ldd	r26, Y+47	; 0x2f
    b08a:	b8 a9       	ldd	r27, Y+48	; 0x30
    b08c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b08e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b090:	12 8e       	std	Z+26, r1	; 0x1a
    b092:	13 8e       	std	Z+27, r1	; 0x1b
    b094:	8c 91       	ld	r24, X
    b096:	83 30       	cpi	r24, 0x03	; 3
    b098:	11 f4       	brne	.+4      	; 0xb09e <f_open+0xee>
    b09a:	14 8a       	std	Z+20, r1	; 0x14
    b09c:	15 8a       	std	Z+21, r1	; 0x15
    b09e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0a0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0a2:	14 8e       	std	Z+28, r1	; 0x1c
    b0a4:	15 8e       	std	Z+29, r1	; 0x1d
    b0a6:	16 8e       	std	Z+30, r1	; 0x1e
    b0a8:	17 8e       	std	Z+31, r1	; 0x1f
    b0aa:	81 e0       	ldi	r24, 0x01	; 1
    b0ac:	fd 01       	movw	r30, r26
    b0ae:	83 83       	std	Z+3, r24	; 0x03
    b0b0:	41 14       	cp	r4, r1
    b0b2:	51 04       	cpc	r5, r1
    b0b4:	61 04       	cpc	r6, r1
    b0b6:	71 04       	cpc	r7, r1
    b0b8:	c9 f1       	breq	.+114    	; 0xb12c <f_open+0x17c>
    b0ba:	21 a9       	ldd	r18, Z+49	; 0x31
    b0bc:	32 a9       	ldd	r19, Z+50	; 0x32
    b0be:	43 a9       	ldd	r20, Z+51	; 0x33
    b0c0:	54 a9       	ldd	r21, Z+52	; 0x34
    b0c2:	2b ab       	std	Y+51, r18	; 0x33
    b0c4:	3c ab       	std	Y+52, r19	; 0x34
    b0c6:	4d ab       	std	Y+53, r20	; 0x35
    b0c8:	5e ab       	std	Y+54, r21	; 0x36
    b0ca:	00 e0       	ldi	r16, 0x00	; 0
    b0cc:	10 e0       	ldi	r17, 0x00	; 0
    b0ce:	98 01       	movw	r18, r16
    b0d0:	b3 01       	movw	r22, r6
    b0d2:	a2 01       	movw	r20, r4
    b0d4:	ce 01       	movw	r24, r28
    b0d6:	01 96       	adiw	r24, 0x01	; 1
    b0d8:	0e 94 01 50 	call	0xa002	; 0xa002 <remove_chain>
    b0dc:	8c 01       	movw	r16, r24
    b0de:	89 2b       	or	r24, r25
    b0e0:	09 f0       	breq	.+2      	; 0xb0e4 <f_open+0x134>
    b0e2:	16 c1       	rjmp	.+556    	; 0xb310 <f_open+0x360>
    b0e4:	4b a9       	ldd	r20, Y+51	; 0x33
    b0e6:	5c a9       	ldd	r21, Y+52	; 0x34
    b0e8:	6d a9       	ldd	r22, Y+53	; 0x35
    b0ea:	7e a9       	ldd	r23, Y+54	; 0x36
    b0ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    b0ee:	98 a9       	ldd	r25, Y+48	; 0x30
    b0f0:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    b0f4:	8c 01       	movw	r16, r24
    b0f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b0f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b0fa:	21 e0       	ldi	r18, 0x01	; 1
    b0fc:	42 1a       	sub	r4, r18
    b0fe:	51 08       	sbc	r5, r1
    b100:	61 08       	sbc	r6, r1
    b102:	71 08       	sbc	r7, r1
    b104:	45 86       	std	Z+13, r4	; 0x0d
    b106:	56 86       	std	Z+14, r5	; 0x0e
    b108:	67 86       	std	Z+15, r6	; 0x0f
    b10a:	70 8a       	std	Z+16, r7	; 0x10
    b10c:	89 2b       	or	r24, r25
    b10e:	61 f0       	breq	.+24     	; 0xb128 <f_open+0x178>
    b110:	ff c0       	rjmp	.+510    	; 0xb310 <f_open+0x360>
    b112:	01 15       	cp	r16, r1
    b114:	11 05       	cpc	r17, r1
    b116:	09 f0       	breq	.+2      	; 0xb11a <f_open+0x16a>
    b118:	fb c0       	rjmp	.+502    	; 0xb310 <f_open+0x360>
    b11a:	8d 81       	ldd	r24, Y+5	; 0x05
    b11c:	84 fd       	sbrc	r24, 4
    b11e:	f3 c0       	rjmp	.+486    	; 0xb306 <f_open+0x356>
    b120:	71 fe       	sbrs	r7, 1
    b122:	02 c0       	rjmp	.+4      	; 0xb128 <f_open+0x178>
    b124:	80 fd       	sbrc	r24, 0
    b126:	f2 c0       	rjmp	.+484    	; 0xb30c <f_open+0x35c>
    b128:	33 fe       	sbrs	r3, 3
    b12a:	03 c0       	rjmp	.+6      	; 0xb132 <f_open+0x182>
    b12c:	33 2d       	mov	r19, r3
    b12e:	30 64       	ori	r19, 0x40	; 64
    b130:	33 2e       	mov	r3, r19
    b132:	0f a5       	ldd	r16, Y+47	; 0x2f
    b134:	18 a9       	ldd	r17, Y+48	; 0x30
    b136:	f8 01       	movw	r30, r16
    b138:	81 a9       	ldd	r24, Z+49	; 0x31
    b13a:	92 a9       	ldd	r25, Z+50	; 0x32
    b13c:	a3 a9       	ldd	r26, Z+51	; 0x33
    b13e:	b4 a9       	ldd	r27, Z+52	; 0x34
    b140:	f7 01       	movw	r30, r14
    b142:	84 8f       	std	Z+28, r24	; 0x1c
    b144:	95 8f       	std	Z+29, r25	; 0x1d
    b146:	a6 8f       	std	Z+30, r26	; 0x1e
    b148:	b7 8f       	std	Z+31, r27	; 0x1f
    b14a:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b14c:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b14e:	71 a2       	std	Z+33, r7	; 0x21
    b150:	60 a2       	std	Z+32, r6	; 0x20
    b152:	b3 01       	movw	r22, r6
    b154:	f8 01       	movw	r30, r16
    b156:	80 81       	ld	r24, Z
    b158:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    b15c:	f7 01       	movw	r30, r14
    b15e:	66 83       	std	Z+6, r22	; 0x06
    b160:	77 83       	std	Z+7, r23	; 0x07
    b162:	80 87       	std	Z+8, r24	; 0x08
    b164:	91 87       	std	Z+9, r25	; 0x09
    b166:	c3 01       	movw	r24, r6
    b168:	4c 96       	adiw	r24, 0x1c	; 28
    b16a:	0e 94 d6 45 	call	0x8bac	; 0x8bac <ld_dword>
    b16e:	f7 01       	movw	r30, r14
    b170:	62 87       	std	Z+10, r22	; 0x0a
    b172:	73 87       	std	Z+11, r23	; 0x0b
    b174:	84 87       	std	Z+12, r24	; 0x0c
    b176:	95 87       	std	Z+13, r25	; 0x0d
    b178:	13 a2       	std	Z+35, r1	; 0x23
    b17a:	12 a2       	std	Z+34, r1	; 0x22
    b17c:	11 83       	std	Z+1, r17	; 0x01
    b17e:	00 83       	st	Z, r16
    b180:	f8 01       	movw	r30, r16
    b182:	85 81       	ldd	r24, Z+5	; 0x05
    b184:	96 81       	ldd	r25, Z+6	; 0x06
    b186:	f7 01       	movw	r30, r14
    b188:	93 83       	std	Z+3, r25	; 0x03
    b18a:	82 83       	std	Z+2, r24	; 0x02
    b18c:	36 86       	std	Z+14, r3	; 0x0e
    b18e:	17 86       	std	Z+15, r1	; 0x0f
    b190:	10 8e       	std	Z+24, r1	; 0x18
    b192:	11 8e       	std	Z+25, r1	; 0x19
    b194:	12 8e       	std	Z+26, r1	; 0x1a
    b196:	13 8e       	std	Z+27, r1	; 0x1b
    b198:	10 8a       	std	Z+16, r1	; 0x10
    b19a:	11 8a       	std	Z+17, r1	; 0x11
    b19c:	12 8a       	std	Z+18, r1	; 0x12
    b19e:	13 8a       	std	Z+19, r1	; 0x13
    b1a0:	67 01       	movw	r12, r14
    b1a2:	f4 e2       	ldi	r31, 0x24	; 36
    b1a4:	cf 0e       	add	r12, r31
    b1a6:	d1 1c       	adc	r13, r1
    b1a8:	40 e0       	ldi	r20, 0x00	; 0
    b1aa:	52 e0       	ldi	r21, 0x02	; 2
    b1ac:	60 e0       	ldi	r22, 0x00	; 0
    b1ae:	70 e0       	ldi	r23, 0x00	; 0
    b1b0:	c6 01       	movw	r24, r12
    b1b2:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <mem_set>
    b1b6:	35 fc       	sbrc	r3, 5
    b1b8:	03 c0       	rjmp	.+6      	; 0xb1c0 <f_open+0x210>
    b1ba:	00 e0       	ldi	r16, 0x00	; 0
    b1bc:	10 e0       	ldi	r17, 0x00	; 0
    b1be:	89 c0       	rjmp	.+274    	; 0xb2d2 <f_open+0x322>
    b1c0:	f7 01       	movw	r30, r14
    b1c2:	62 84       	ldd	r6, Z+10	; 0x0a
    b1c4:	73 84       	ldd	r7, Z+11	; 0x0b
    b1c6:	84 84       	ldd	r8, Z+12	; 0x0c
    b1c8:	95 84       	ldd	r9, Z+13	; 0x0d
    b1ca:	61 14       	cp	r6, r1
    b1cc:	71 04       	cpc	r7, r1
    b1ce:	81 04       	cpc	r8, r1
    b1d0:	91 04       	cpc	r9, r1
    b1d2:	99 f3       	breq	.-26     	; 0xb1ba <f_open+0x20a>
    b1d4:	60 8a       	std	Z+16, r6	; 0x10
    b1d6:	71 8a       	std	Z+17, r7	; 0x11
    b1d8:	82 8a       	std	Z+18, r8	; 0x12
    b1da:	93 8a       	std	Z+19, r9	; 0x13
    b1dc:	ef a5       	ldd	r30, Y+47	; 0x2f
    b1de:	f8 a9       	ldd	r31, Y+48	; 0x30
    b1e0:	21 84       	ldd	r2, Z+9	; 0x09
    b1e2:	32 84       	ldd	r3, Z+10	; 0x0a
    b1e4:	c1 01       	movw	r24, r2
    b1e6:	a0 e0       	ldi	r26, 0x00	; 0
    b1e8:	b0 e0       	ldi	r27, 0x00	; 0
    b1ea:	1c 01       	movw	r2, r24
    b1ec:	2d 01       	movw	r4, r26
    b1ee:	59 e0       	ldi	r21, 0x09	; 9
    b1f0:	22 0c       	add	r2, r2
    b1f2:	33 1c       	adc	r3, r3
    b1f4:	44 1c       	adc	r4, r4
    b1f6:	55 1c       	adc	r5, r5
    b1f8:	5a 95       	dec	r21
    b1fa:	d1 f7       	brne	.-12     	; 0xb1f0 <f_open+0x240>
    b1fc:	f7 01       	movw	r30, r14
    b1fe:	46 81       	ldd	r20, Z+6	; 0x06
    b200:	57 81       	ldd	r21, Z+7	; 0x07
    b202:	60 85       	ldd	r22, Z+8	; 0x08
    b204:	71 85       	ldd	r23, Z+9	; 0x09
    b206:	26 14       	cp	r2, r6
    b208:	37 04       	cpc	r3, r7
    b20a:	48 04       	cpc	r4, r8
    b20c:	59 04       	cpc	r5, r9
    b20e:	f0 f4       	brcc	.+60     	; 0xb24c <f_open+0x29c>
    b210:	f7 01       	movw	r30, r14
    b212:	80 81       	ld	r24, Z
    b214:	91 81       	ldd	r25, Z+1	; 0x01
    b216:	0e 94 66 4d 	call	0x9acc	; 0x9acc <get_fat.isra.9>
    b21a:	ab 01       	movw	r20, r22
    b21c:	bc 01       	movw	r22, r24
    b21e:	d4 01       	movw	r26, r8
    b220:	c3 01       	movw	r24, r6
    b222:	82 19       	sub	r24, r2
    b224:	93 09       	sbc	r25, r3
    b226:	a4 09       	sbc	r26, r4
    b228:	b5 09       	sbc	r27, r5
    b22a:	3c 01       	movw	r6, r24
    b22c:	4d 01       	movw	r8, r26
    b22e:	42 30       	cpi	r20, 0x02	; 2
    b230:	51 05       	cpc	r21, r1
    b232:	61 05       	cpc	r22, r1
    b234:	71 05       	cpc	r23, r1
    b236:	08 f4       	brcc	.+2      	; 0xb23a <f_open+0x28a>
    b238:	63 c0       	rjmp	.+198    	; 0xb300 <f_open+0x350>
    b23a:	4f 3f       	cpi	r20, 0xFF	; 255
    b23c:	ff ef       	ldi	r31, 0xFF	; 255
    b23e:	5f 07       	cpc	r21, r31
    b240:	6f 07       	cpc	r22, r31
    b242:	7f 07       	cpc	r23, r31
    b244:	01 f7       	brne	.-64     	; 0xb206 <f_open+0x256>
    b246:	01 e0       	ldi	r16, 0x01	; 1
    b248:	10 e0       	ldi	r17, 0x00	; 0
    b24a:	02 c0       	rjmp	.+4      	; 0xb250 <f_open+0x2a0>
    b24c:	00 e0       	ldi	r16, 0x00	; 0
    b24e:	10 e0       	ldi	r17, 0x00	; 0
    b250:	f7 01       	movw	r30, r14
    b252:	44 8b       	std	Z+20, r20	; 0x14
    b254:	55 8b       	std	Z+21, r21	; 0x15
    b256:	66 8b       	std	Z+22, r22	; 0x16
    b258:	77 8b       	std	Z+23, r23	; 0x17
    b25a:	01 15       	cp	r16, r1
    b25c:	11 05       	cpc	r17, r1
    b25e:	c9 f5       	brne	.+114    	; 0xb2d2 <f_open+0x322>
    b260:	d4 01       	movw	r26, r8
    b262:	c3 01       	movw	r24, r6
    b264:	91 70       	andi	r25, 0x01	; 1
    b266:	aa 27       	eor	r26, r26
    b268:	bb 27       	eor	r27, r27
    b26a:	89 2b       	or	r24, r25
    b26c:	8a 2b       	or	r24, r26
    b26e:	8b 2b       	or	r24, r27
    b270:	09 f4       	brne	.+2      	; 0xb274 <f_open+0x2c4>
    b272:	a3 cf       	rjmp	.-186    	; 0xb1ba <f_open+0x20a>
    b274:	4f a4       	ldd	r4, Y+47	; 0x2f
    b276:	58 a8       	ldd	r5, Y+48	; 0x30
    b278:	c2 01       	movw	r24, r4
    b27a:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    b27e:	61 15       	cp	r22, r1
    b280:	71 05       	cpc	r23, r1
    b282:	81 05       	cpc	r24, r1
    b284:	91 05       	cpc	r25, r1
    b286:	19 f1       	breq	.+70     	; 0xb2ce <f_open+0x31e>
    b288:	94 01       	movw	r18, r8
    b28a:	83 01       	movw	r16, r6
    b28c:	49 e0       	ldi	r20, 0x09	; 9
    b28e:	36 95       	lsr	r19
    b290:	27 95       	ror	r18
    b292:	17 95       	ror	r17
    b294:	07 95       	ror	r16
    b296:	4a 95       	dec	r20
    b298:	d1 f7       	brne	.-12     	; 0xb28e <f_open+0x2de>
    b29a:	a9 01       	movw	r20, r18
    b29c:	98 01       	movw	r18, r16
    b29e:	26 0f       	add	r18, r22
    b2a0:	37 1f       	adc	r19, r23
    b2a2:	48 1f       	adc	r20, r24
    b2a4:	59 1f       	adc	r21, r25
    b2a6:	f7 01       	movw	r30, r14
    b2a8:	20 8f       	std	Z+24, r18	; 0x18
    b2aa:	31 8f       	std	Z+25, r19	; 0x19
    b2ac:	42 8f       	std	Z+26, r20	; 0x1a
    b2ae:	53 8f       	std	Z+27, r21	; 0x1b
    b2b0:	01 e0       	ldi	r16, 0x01	; 1
    b2b2:	10 e0       	ldi	r17, 0x00	; 0
    b2b4:	b6 01       	movw	r22, r12
    b2b6:	f2 01       	movw	r30, r4
    b2b8:	81 81       	ldd	r24, Z+1	; 0x01
    b2ba:	0e 94 ca 67 	call	0xcf94	; 0xcf94 <disk_read>
    b2be:	31 e0       	ldi	r19, 0x01	; 1
    b2c0:	20 e0       	ldi	r18, 0x00	; 0
    b2c2:	89 2b       	or	r24, r25
    b2c4:	09 f4       	brne	.+2      	; 0xb2c8 <f_open+0x318>
    b2c6:	30 e0       	ldi	r19, 0x00	; 0
    b2c8:	03 2f       	mov	r16, r19
    b2ca:	12 2f       	mov	r17, r18
    b2cc:	02 c0       	rjmp	.+4      	; 0xb2d2 <f_open+0x322>
    b2ce:	02 e0       	ldi	r16, 0x02	; 2
    b2d0:	10 e0       	ldi	r17, 0x00	; 0
    b2d2:	c5 01       	movw	r24, r10
    b2d4:	0e 94 11 67 	call	0xce22	; 0xce22 <ff_memfree>
    b2d8:	01 15       	cp	r16, r1
    b2da:	11 05       	cpc	r17, r1
    b2dc:	59 f0       	breq	.+22     	; 0xb2f4 <f_open+0x344>
    b2de:	01 c0       	rjmp	.+2      	; 0xb2e2 <f_open+0x332>
    b2e0:	8c 01       	movw	r16, r24
    b2e2:	f7 01       	movw	r30, r14
    b2e4:	11 82       	std	Z+1, r1	; 0x01
    b2e6:	10 82       	st	Z, r1
    b2e8:	c8 01       	movw	r24, r16
    b2ea:	16 c0       	rjmp	.+44     	; 0xb318 <f_open+0x368>
    b2ec:	89 e0       	ldi	r24, 0x09	; 9
    b2ee:	03 c0       	rjmp	.+6      	; 0xb2f6 <f_open+0x346>
    b2f0:	81 e1       	ldi	r24, 0x11	; 17
    b2f2:	01 c0       	rjmp	.+2      	; 0xb2f6 <f_open+0x346>
    b2f4:	80 e0       	ldi	r24, 0x00	; 0
    b2f6:	90 e0       	ldi	r25, 0x00	; 0
    b2f8:	0f c0       	rjmp	.+30     	; 0xb318 <f_open+0x368>
    b2fa:	08 e0       	ldi	r16, 0x08	; 8
    b2fc:	10 e0       	ldi	r17, 0x00	; 0
    b2fe:	08 c0       	rjmp	.+16     	; 0xb310 <f_open+0x360>
    b300:	02 e0       	ldi	r16, 0x02	; 2
    b302:	10 e0       	ldi	r17, 0x00	; 0
    b304:	a5 cf       	rjmp	.-182    	; 0xb250 <f_open+0x2a0>
    b306:	04 e0       	ldi	r16, 0x04	; 4
    b308:	10 e0       	ldi	r17, 0x00	; 0
    b30a:	02 c0       	rjmp	.+4      	; 0xb310 <f_open+0x360>
    b30c:	07 e0       	ldi	r16, 0x07	; 7
    b30e:	10 e0       	ldi	r17, 0x00	; 0
    b310:	c5 01       	movw	r24, r10
    b312:	0e 94 11 67 	call	0xce22	; 0xce22 <ff_memfree>
    b316:	e5 cf       	rjmp	.-54     	; 0xb2e2 <f_open+0x332>
    b318:	e6 96       	adiw	r28, 0x36	; 54
    b31a:	e2 e1       	ldi	r30, 0x12	; 18
    b31c:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000b320 <f_read>:
    b320:	a6 e0       	ldi	r26, 0x06	; 6
    b322:	b0 e0       	ldi	r27, 0x00	; 0
    b324:	e6 e9       	ldi	r30, 0x96	; 150
    b326:	f9 e5       	ldi	r31, 0x59	; 89
    b328:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    b32c:	7c 01       	movw	r14, r24
    b32e:	4b 01       	movw	r8, r22
    b330:	5a 01       	movw	r10, r20
    b332:	3e 83       	std	Y+6, r19	; 0x06
    b334:	2d 83       	std	Y+5, r18	; 0x05
    b336:	f9 01       	movw	r30, r18
    b338:	11 82       	std	Z+1, r1	; 0x01
    b33a:	10 82       	st	Z, r1
    b33c:	be 01       	movw	r22, r28
    b33e:	6f 5f       	subi	r22, 0xFF	; 255
    b340:	7f 4f       	sbci	r23, 0xFF	; 255
    b342:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    b346:	00 97       	sbiw	r24, 0x00	; 0
    b348:	09 f0       	breq	.+2      	; 0xb34c <f_read+0x2c>
    b34a:	31 c1       	rjmp	.+610    	; 0xb5ae <f_read+0x28e>
    b34c:	f7 01       	movw	r30, r14
    b34e:	87 85       	ldd	r24, Z+15	; 0x0f
    b350:	90 e0       	ldi	r25, 0x00	; 0
    b352:	00 97       	sbiw	r24, 0x00	; 0
    b354:	09 f0       	breq	.+2      	; 0xb358 <f_read+0x38>
    b356:	2b c1       	rjmp	.+598    	; 0xb5ae <f_read+0x28e>
    b358:	86 85       	ldd	r24, Z+14	; 0x0e
    b35a:	80 ff       	sbrs	r24, 0
    b35c:	26 c1       	rjmp	.+588    	; 0xb5aa <f_read+0x28a>
    b35e:	82 85       	ldd	r24, Z+10	; 0x0a
    b360:	93 85       	ldd	r25, Z+11	; 0x0b
    b362:	a4 85       	ldd	r26, Z+12	; 0x0c
    b364:	b5 85       	ldd	r27, Z+13	; 0x0d
    b366:	40 89       	ldd	r20, Z+16	; 0x10
    b368:	51 89       	ldd	r21, Z+17	; 0x11
    b36a:	62 89       	ldd	r22, Z+18	; 0x12
    b36c:	73 89       	ldd	r23, Z+19	; 0x13
    b36e:	84 1b       	sub	r24, r20
    b370:	95 0b       	sbc	r25, r21
    b372:	a6 0b       	sbc	r26, r22
    b374:	b7 0b       	sbc	r27, r23
    b376:	a5 01       	movw	r20, r10
    b378:	60 e0       	ldi	r22, 0x00	; 0
    b37a:	70 e0       	ldi	r23, 0x00	; 0
    b37c:	84 17       	cp	r24, r20
    b37e:	95 07       	cpc	r25, r21
    b380:	a6 07       	cpc	r26, r22
    b382:	b7 07       	cpc	r27, r23
    b384:	08 f4       	brcc	.+2      	; 0xb388 <f_read+0x68>
    b386:	5c 01       	movw	r10, r24
    b388:	17 01       	movw	r2, r14
    b38a:	f4 e2       	ldi	r31, 0x24	; 36
    b38c:	2f 0e       	add	r2, r31
    b38e:	31 1c       	adc	r3, r1
    b390:	a1 14       	cp	r10, r1
    b392:	b1 04       	cpc	r11, r1
    b394:	09 f4       	brne	.+2      	; 0xb398 <f_read+0x78>
    b396:	07 c1       	rjmp	.+526    	; 0xb5a6 <f_read+0x286>
    b398:	f7 01       	movw	r30, r14
    b39a:	40 89       	ldd	r20, Z+16	; 0x10
    b39c:	51 89       	ldd	r21, Z+17	; 0x11
    b39e:	62 89       	ldd	r22, Z+18	; 0x12
    b3a0:	73 89       	ldd	r23, Z+19	; 0x13
    b3a2:	db 01       	movw	r26, r22
    b3a4:	ca 01       	movw	r24, r20
    b3a6:	91 70       	andi	r25, 0x01	; 1
    b3a8:	aa 27       	eor	r26, r26
    b3aa:	bb 27       	eor	r27, r27
    b3ac:	89 2b       	or	r24, r25
    b3ae:	8a 2b       	or	r24, r26
    b3b0:	8b 2b       	or	r24, r27
    b3b2:	09 f0       	breq	.+2      	; 0xb3b6 <f_read+0x96>
    b3b4:	cb c0       	rjmp	.+406    	; 0xb54c <f_read+0x22c>
    b3b6:	e9 81       	ldd	r30, Y+1	; 0x01
    b3b8:	fa 81       	ldd	r31, Y+2	; 0x02
    b3ba:	01 85       	ldd	r16, Z+9	; 0x09
    b3bc:	12 85       	ldd	r17, Z+10	; 0x0a
    b3be:	01 50       	subi	r16, 0x01	; 1
    b3c0:	11 09       	sbc	r17, r1
    b3c2:	db 01       	movw	r26, r22
    b3c4:	ca 01       	movw	r24, r20
    b3c6:	e9 e0       	ldi	r30, 0x09	; 9
    b3c8:	b6 95       	lsr	r27
    b3ca:	a7 95       	ror	r26
    b3cc:	97 95       	ror	r25
    b3ce:	87 95       	ror	r24
    b3d0:	ea 95       	dec	r30
    b3d2:	d1 f7       	brne	.-12     	; 0xb3c8 <f_read+0xa8>
    b3d4:	08 23       	and	r16, r24
    b3d6:	19 23       	and	r17, r25
    b3d8:	01 15       	cp	r16, r1
    b3da:	11 05       	cpc	r17, r1
    b3dc:	91 f5       	brne	.+100    	; 0xb442 <f_read+0x122>
    b3de:	f7 01       	movw	r30, r14
    b3e0:	41 15       	cp	r20, r1
    b3e2:	51 05       	cpc	r21, r1
    b3e4:	61 05       	cpc	r22, r1
    b3e6:	71 05       	cpc	r23, r1
    b3e8:	29 f4       	brne	.+10     	; 0xb3f4 <f_read+0xd4>
    b3ea:	66 81       	ldd	r22, Z+6	; 0x06
    b3ec:	77 81       	ldd	r23, Z+7	; 0x07
    b3ee:	80 85       	ldd	r24, Z+8	; 0x08
    b3f0:	91 85       	ldd	r25, Z+9	; 0x09
    b3f2:	11 c0       	rjmp	.+34     	; 0xb416 <f_read+0xf6>
    b3f4:	82 a1       	ldd	r24, Z+34	; 0x22
    b3f6:	93 a1       	ldd	r25, Z+35	; 0x23
    b3f8:	89 2b       	or	r24, r25
    b3fa:	21 f0       	breq	.+8      	; 0xb404 <f_read+0xe4>
    b3fc:	c7 01       	movw	r24, r14
    b3fe:	0e 94 31 46 	call	0x8c62	; 0x8c62 <clmt_clust>
    b402:	09 c0       	rjmp	.+18     	; 0xb416 <f_read+0xf6>
    b404:	f7 01       	movw	r30, r14
    b406:	44 89       	ldd	r20, Z+20	; 0x14
    b408:	55 89       	ldd	r21, Z+21	; 0x15
    b40a:	66 89       	ldd	r22, Z+22	; 0x16
    b40c:	77 89       	ldd	r23, Z+23	; 0x17
    b40e:	80 81       	ld	r24, Z
    b410:	91 81       	ldd	r25, Z+1	; 0x01
    b412:	0e 94 66 4d 	call	0x9acc	; 0x9acc <get_fat.isra.9>
    b416:	62 30       	cpi	r22, 0x02	; 2
    b418:	71 05       	cpc	r23, r1
    b41a:	81 05       	cpc	r24, r1
    b41c:	91 05       	cpc	r25, r1
    b41e:	10 f4       	brcc	.+4      	; 0xb424 <f_read+0x104>
    b420:	82 e0       	ldi	r24, 0x02	; 2
    b422:	07 c0       	rjmp	.+14     	; 0xb432 <f_read+0x112>
    b424:	6f 3f       	cpi	r22, 0xFF	; 255
    b426:	ff ef       	ldi	r31, 0xFF	; 255
    b428:	7f 07       	cpc	r23, r31
    b42a:	8f 07       	cpc	r24, r31
    b42c:	9f 07       	cpc	r25, r31
    b42e:	21 f4       	brne	.+8      	; 0xb438 <f_read+0x118>
    b430:	81 e0       	ldi	r24, 0x01	; 1
    b432:	f7 01       	movw	r30, r14
    b434:	87 87       	std	Z+15, r24	; 0x0f
    b436:	ba c0       	rjmp	.+372    	; 0xb5ac <f_read+0x28c>
    b438:	f7 01       	movw	r30, r14
    b43a:	64 8b       	std	Z+20, r22	; 0x14
    b43c:	75 8b       	std	Z+21, r23	; 0x15
    b43e:	86 8b       	std	Z+22, r24	; 0x16
    b440:	97 8b       	std	Z+23, r25	; 0x17
    b442:	89 81       	ldd	r24, Y+1	; 0x01
    b444:	9a 81       	ldd	r25, Y+2	; 0x02
    b446:	9c 83       	std	Y+4, r25	; 0x04
    b448:	8b 83       	std	Y+3, r24	; 0x03
    b44a:	f7 01       	movw	r30, r14
    b44c:	44 89       	ldd	r20, Z+20	; 0x14
    b44e:	55 89       	ldd	r21, Z+21	; 0x15
    b450:	66 89       	ldd	r22, Z+22	; 0x16
    b452:	77 89       	ldd	r23, Z+23	; 0x17
    b454:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    b458:	61 15       	cp	r22, r1
    b45a:	71 05       	cpc	r23, r1
    b45c:	81 05       	cpc	r24, r1
    b45e:	91 05       	cpc	r25, r1
    b460:	f9 f2       	breq	.-66     	; 0xb420 <f_read+0x100>
    b462:	2b 01       	movw	r4, r22
    b464:	3c 01       	movw	r6, r24
    b466:	40 0e       	add	r4, r16
    b468:	51 1e       	adc	r5, r17
    b46a:	61 1c       	adc	r6, r1
    b46c:	71 1c       	adc	r7, r1
    b46e:	65 01       	movw	r12, r10
    b470:	cd 2c       	mov	r12, r13
    b472:	dd 24       	eor	r13, r13
    b474:	c6 94       	lsr	r12
    b476:	c1 14       	cp	r12, r1
    b478:	d1 04       	cpc	r13, r1
    b47a:	d1 f1       	breq	.+116    	; 0xb4f0 <f_read+0x1d0>
    b47c:	eb 81       	ldd	r30, Y+3	; 0x03
    b47e:	fc 81       	ldd	r31, Y+4	; 0x04
    b480:	81 85       	ldd	r24, Z+9	; 0x09
    b482:	92 85       	ldd	r25, Z+10	; 0x0a
    b484:	98 01       	movw	r18, r16
    b486:	2c 0d       	add	r18, r12
    b488:	3d 1d       	adc	r19, r13
    b48a:	82 17       	cp	r24, r18
    b48c:	93 07       	cpc	r25, r19
    b48e:	18 f4       	brcc	.+6      	; 0xb496 <f_read+0x176>
    b490:	6c 01       	movw	r12, r24
    b492:	c0 1a       	sub	r12, r16
    b494:	d1 0a       	sbc	r13, r17
    b496:	86 01       	movw	r16, r12
    b498:	a3 01       	movw	r20, r6
    b49a:	92 01       	movw	r18, r4
    b49c:	b4 01       	movw	r22, r8
    b49e:	eb 81       	ldd	r30, Y+3	; 0x03
    b4a0:	fc 81       	ldd	r31, Y+4	; 0x04
    b4a2:	81 81       	ldd	r24, Z+1	; 0x01
    b4a4:	0e 94 ca 67 	call	0xcf94	; 0xcf94 <disk_read>
    b4a8:	89 2b       	or	r24, r25
    b4aa:	11 f6       	brne	.-124    	; 0xb430 <f_read+0x110>
    b4ac:	f7 01       	movw	r30, r14
    b4ae:	86 85       	ldd	r24, Z+14	; 0x0e
    b4b0:	87 ff       	sbrs	r24, 7
    b4b2:	1a c0       	rjmp	.+52     	; 0xb4e8 <f_read+0x1c8>
    b4b4:	80 8d       	ldd	r24, Z+24	; 0x18
    b4b6:	91 8d       	ldd	r25, Z+25	; 0x19
    b4b8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b4ba:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b4bc:	84 19       	sub	r24, r4
    b4be:	95 09       	sbc	r25, r5
    b4c0:	a6 09       	sbc	r26, r6
    b4c2:	b7 09       	sbc	r27, r7
    b4c4:	a6 01       	movw	r20, r12
    b4c6:	60 e0       	ldi	r22, 0x00	; 0
    b4c8:	70 e0       	ldi	r23, 0x00	; 0
    b4ca:	84 17       	cp	r24, r20
    b4cc:	95 07       	cpc	r25, r21
    b4ce:	a6 07       	cpc	r26, r22
    b4d0:	b7 07       	cpc	r27, r23
    b4d2:	50 f4       	brcc	.+20     	; 0xb4e8 <f_read+0x1c8>
    b4d4:	98 2f       	mov	r25, r24
    b4d6:	88 27       	eor	r24, r24
    b4d8:	99 0f       	add	r25, r25
    b4da:	40 e0       	ldi	r20, 0x00	; 0
    b4dc:	52 e0       	ldi	r21, 0x02	; 2
    b4de:	b1 01       	movw	r22, r2
    b4e0:	88 0d       	add	r24, r8
    b4e2:	99 1d       	adc	r25, r9
    b4e4:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    b4e8:	dc 2c       	mov	r13, r12
    b4ea:	cc 24       	eor	r12, r12
    b4ec:	dd 0c       	add	r13, r13
    b4ee:	41 c0       	rjmp	.+130    	; 0xb572 <f_read+0x252>
    b4f0:	f7 01       	movw	r30, r14
    b4f2:	20 8d       	ldd	r18, Z+24	; 0x18
    b4f4:	31 8d       	ldd	r19, Z+25	; 0x19
    b4f6:	42 8d       	ldd	r20, Z+26	; 0x1a
    b4f8:	53 8d       	ldd	r21, Z+27	; 0x1b
    b4fa:	42 16       	cp	r4, r18
    b4fc:	53 06       	cpc	r5, r19
    b4fe:	64 06       	cpc	r6, r20
    b500:	75 06       	cpc	r7, r21
    b502:	f9 f0       	breq	.+62     	; 0xb542 <f_read+0x222>
    b504:	86 85       	ldd	r24, Z+14	; 0x0e
    b506:	87 ff       	sbrs	r24, 7
    b508:	0f c0       	rjmp	.+30     	; 0xb528 <f_read+0x208>
    b50a:	01 e0       	ldi	r16, 0x01	; 1
    b50c:	10 e0       	ldi	r17, 0x00	; 0
    b50e:	b1 01       	movw	r22, r2
    b510:	eb 81       	ldd	r30, Y+3	; 0x03
    b512:	fc 81       	ldd	r31, Y+4	; 0x04
    b514:	81 81       	ldd	r24, Z+1	; 0x01
    b516:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    b51a:	89 2b       	or	r24, r25
    b51c:	09 f0       	breq	.+2      	; 0xb520 <f_read+0x200>
    b51e:	88 cf       	rjmp	.-240    	; 0xb430 <f_read+0x110>
    b520:	f7 01       	movw	r30, r14
    b522:	86 85       	ldd	r24, Z+14	; 0x0e
    b524:	8f 77       	andi	r24, 0x7F	; 127
    b526:	86 87       	std	Z+14, r24	; 0x0e
    b528:	e9 81       	ldd	r30, Y+1	; 0x01
    b52a:	fa 81       	ldd	r31, Y+2	; 0x02
    b52c:	01 e0       	ldi	r16, 0x01	; 1
    b52e:	10 e0       	ldi	r17, 0x00	; 0
    b530:	a3 01       	movw	r20, r6
    b532:	92 01       	movw	r18, r4
    b534:	b1 01       	movw	r22, r2
    b536:	81 81       	ldd	r24, Z+1	; 0x01
    b538:	0e 94 ca 67 	call	0xcf94	; 0xcf94 <disk_read>
    b53c:	89 2b       	or	r24, r25
    b53e:	09 f0       	breq	.+2      	; 0xb542 <f_read+0x222>
    b540:	77 cf       	rjmp	.-274    	; 0xb430 <f_read+0x110>
    b542:	f7 01       	movw	r30, r14
    b544:	40 8e       	std	Z+24, r4	; 0x18
    b546:	51 8e       	std	Z+25, r5	; 0x19
    b548:	62 8e       	std	Z+26, r6	; 0x1a
    b54a:	73 8e       	std	Z+27, r7	; 0x1b
    b54c:	f7 01       	movw	r30, r14
    b54e:	60 89       	ldd	r22, Z+16	; 0x10
    b550:	71 89       	ldd	r23, Z+17	; 0x11
    b552:	71 70       	andi	r23, 0x01	; 1
    b554:	80 e0       	ldi	r24, 0x00	; 0
    b556:	92 e0       	ldi	r25, 0x02	; 2
    b558:	86 1b       	sub	r24, r22
    b55a:	97 0b       	sbc	r25, r23
    b55c:	65 01       	movw	r12, r10
    b55e:	8a 15       	cp	r24, r10
    b560:	9b 05       	cpc	r25, r11
    b562:	08 f4       	brcc	.+2      	; 0xb566 <f_read+0x246>
    b564:	6c 01       	movw	r12, r24
    b566:	62 0d       	add	r22, r2
    b568:	73 1d       	adc	r23, r3
    b56a:	a6 01       	movw	r20, r12
    b56c:	c4 01       	movw	r24, r8
    b56e:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    b572:	ac 18       	sub	r10, r12
    b574:	bd 08       	sbc	r11, r13
    b576:	ed 81       	ldd	r30, Y+5	; 0x05
    b578:	fe 81       	ldd	r31, Y+6	; 0x06
    b57a:	80 81       	ld	r24, Z
    b57c:	91 81       	ldd	r25, Z+1	; 0x01
    b57e:	8c 0d       	add	r24, r12
    b580:	9d 1d       	adc	r25, r13
    b582:	91 83       	std	Z+1, r25	; 0x01
    b584:	80 83       	st	Z, r24
    b586:	8c 0c       	add	r8, r12
    b588:	9d 1c       	adc	r9, r13
    b58a:	f7 01       	movw	r30, r14
    b58c:	80 89       	ldd	r24, Z+16	; 0x10
    b58e:	91 89       	ldd	r25, Z+17	; 0x11
    b590:	a2 89       	ldd	r26, Z+18	; 0x12
    b592:	b3 89       	ldd	r27, Z+19	; 0x13
    b594:	8c 0d       	add	r24, r12
    b596:	9d 1d       	adc	r25, r13
    b598:	a1 1d       	adc	r26, r1
    b59a:	b1 1d       	adc	r27, r1
    b59c:	80 8b       	std	Z+16, r24	; 0x10
    b59e:	91 8b       	std	Z+17, r25	; 0x11
    b5a0:	a2 8b       	std	Z+18, r26	; 0x12
    b5a2:	b3 8b       	std	Z+19, r27	; 0x13
    b5a4:	f5 ce       	rjmp	.-534    	; 0xb390 <f_read+0x70>
    b5a6:	80 e0       	ldi	r24, 0x00	; 0
    b5a8:	01 c0       	rjmp	.+2      	; 0xb5ac <f_read+0x28c>
    b5aa:	87 e0       	ldi	r24, 0x07	; 7
    b5ac:	90 e0       	ldi	r25, 0x00	; 0
    b5ae:	26 96       	adiw	r28, 0x06	; 6
    b5b0:	e2 e1       	ldi	r30, 0x12	; 18
    b5b2:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000b5b6 <f_write>:
    b5b6:	a8 e0       	ldi	r26, 0x08	; 8
    b5b8:	b0 e0       	ldi	r27, 0x00	; 0
    b5ba:	e1 ee       	ldi	r30, 0xE1	; 225
    b5bc:	fa e5       	ldi	r31, 0x5A	; 90
    b5be:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    b5c2:	7c 01       	movw	r14, r24
    b5c4:	3b 01       	movw	r6, r22
    b5c6:	5a 01       	movw	r10, r20
    b5c8:	38 87       	std	Y+8, r19	; 0x08
    b5ca:	2f 83       	std	Y+7, r18	; 0x07
    b5cc:	f9 01       	movw	r30, r18
    b5ce:	11 82       	std	Z+1, r1	; 0x01
    b5d0:	10 82       	st	Z, r1
    b5d2:	be 01       	movw	r22, r28
    b5d4:	6f 5f       	subi	r22, 0xFF	; 255
    b5d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b5d8:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    b5dc:	00 97       	sbiw	r24, 0x00	; 0
    b5de:	09 f0       	breq	.+2      	; 0xb5e2 <f_write+0x2c>
    b5e0:	7d c1       	rjmp	.+762    	; 0xb8dc <f_write+0x326>
    b5e2:	f7 01       	movw	r30, r14
    b5e4:	87 85       	ldd	r24, Z+15	; 0x0f
    b5e6:	90 e0       	ldi	r25, 0x00	; 0
    b5e8:	00 97       	sbiw	r24, 0x00	; 0
    b5ea:	09 f0       	breq	.+2      	; 0xb5ee <f_write+0x38>
    b5ec:	77 c1       	rjmp	.+750    	; 0xb8dc <f_write+0x326>
    b5ee:	86 85       	ldd	r24, Z+14	; 0x0e
    b5f0:	81 ff       	sbrs	r24, 1
    b5f2:	72 c1       	rjmp	.+740    	; 0xb8d8 <f_write+0x322>
    b5f4:	80 89       	ldd	r24, Z+16	; 0x10
    b5f6:	91 89       	ldd	r25, Z+17	; 0x11
    b5f8:	a2 89       	ldd	r26, Z+18	; 0x12
    b5fa:	b3 89       	ldd	r27, Z+19	; 0x13
    b5fc:	ac 01       	movw	r20, r24
    b5fe:	bd 01       	movw	r22, r26
    b600:	4a 0d       	add	r20, r10
    b602:	5b 1d       	adc	r21, r11
    b604:	61 1d       	adc	r22, r1
    b606:	71 1d       	adc	r23, r1
    b608:	48 17       	cp	r20, r24
    b60a:	59 07       	cpc	r21, r25
    b60c:	6a 07       	cpc	r22, r26
    b60e:	7b 07       	cpc	r23, r27
    b610:	18 f4       	brcc	.+6      	; 0xb618 <f_write+0x62>
    b612:	5c 01       	movw	r10, r24
    b614:	a0 94       	com	r10
    b616:	b0 94       	com	r11
    b618:	97 01       	movw	r18, r14
    b61a:	2c 5d       	subi	r18, 0xDC	; 220
    b61c:	3f 4f       	sbci	r19, 0xFF	; 255
    b61e:	3e 83       	std	Y+6, r19	; 0x06
    b620:	2d 83       	std	Y+5, r18	; 0x05
    b622:	a1 14       	cp	r10, r1
    b624:	b1 04       	cpc	r11, r1
    b626:	09 f4       	brne	.+2      	; 0xb62a <f_write+0x74>
    b628:	4d c0       	rjmp	.+154    	; 0xb6c4 <f_write+0x10e>
    b62a:	f7 01       	movw	r30, r14
    b62c:	40 89       	ldd	r20, Z+16	; 0x10
    b62e:	51 89       	ldd	r21, Z+17	; 0x11
    b630:	62 89       	ldd	r22, Z+18	; 0x12
    b632:	73 89       	ldd	r23, Z+19	; 0x13
    b634:	db 01       	movw	r26, r22
    b636:	ca 01       	movw	r24, r20
    b638:	91 70       	andi	r25, 0x01	; 1
    b63a:	aa 27       	eor	r26, r26
    b63c:	bb 27       	eor	r27, r27
    b63e:	89 2b       	or	r24, r25
    b640:	8a 2b       	or	r24, r26
    b642:	8b 2b       	or	r24, r27
    b644:	09 f0       	breq	.+2      	; 0xb648 <f_write+0x92>
    b646:	05 c1       	rjmp	.+522    	; 0xb852 <f_write+0x29c>
    b648:	e9 81       	ldd	r30, Y+1	; 0x01
    b64a:	fa 81       	ldd	r31, Y+2	; 0x02
    b64c:	81 84       	ldd	r8, Z+9	; 0x09
    b64e:	92 84       	ldd	r9, Z+10	; 0x0a
    b650:	f1 e0       	ldi	r31, 0x01	; 1
    b652:	8f 1a       	sub	r8, r31
    b654:	91 08       	sbc	r9, r1
    b656:	db 01       	movw	r26, r22
    b658:	ca 01       	movw	r24, r20
    b65a:	e9 e0       	ldi	r30, 0x09	; 9
    b65c:	b6 95       	lsr	r27
    b65e:	a7 95       	ror	r26
    b660:	97 95       	ror	r25
    b662:	87 95       	ror	r24
    b664:	ea 95       	dec	r30
    b666:	d1 f7       	brne	.-12     	; 0xb65c <f_write+0xa6>
    b668:	88 22       	and	r8, r24
    b66a:	99 22       	and	r9, r25
    b66c:	81 14       	cp	r8, r1
    b66e:	91 04       	cpc	r9, r1
    b670:	09 f0       	breq	.+2      	; 0xb674 <f_write+0xbe>
    b672:	51 c0       	rjmp	.+162    	; 0xb716 <f_write+0x160>
    b674:	f7 01       	movw	r30, r14
    b676:	41 15       	cp	r20, r1
    b678:	51 05       	cpc	r21, r1
    b67a:	61 05       	cpc	r22, r1
    b67c:	71 05       	cpc	r23, r1
    b67e:	69 f4       	brne	.+26     	; 0xb69a <f_write+0xe4>
    b680:	66 81       	ldd	r22, Z+6	; 0x06
    b682:	77 81       	ldd	r23, Z+7	; 0x07
    b684:	80 85       	ldd	r24, Z+8	; 0x08
    b686:	91 85       	ldd	r25, Z+9	; 0x09
    b688:	61 15       	cp	r22, r1
    b68a:	71 05       	cpc	r23, r1
    b68c:	81 05       	cpc	r24, r1
    b68e:	91 05       	cpc	r25, r1
    b690:	f9 f4       	brne	.+62     	; 0xb6d0 <f_write+0x11a>
    b692:	40 e0       	ldi	r20, 0x00	; 0
    b694:	50 e0       	ldi	r21, 0x00	; 0
    b696:	ba 01       	movw	r22, r20
    b698:	0d c0       	rjmp	.+26     	; 0xb6b4 <f_write+0xfe>
    b69a:	82 a1       	ldd	r24, Z+34	; 0x22
    b69c:	93 a1       	ldd	r25, Z+35	; 0x23
    b69e:	89 2b       	or	r24, r25
    b6a0:	21 f0       	breq	.+8      	; 0xb6aa <f_write+0xf4>
    b6a2:	c7 01       	movw	r24, r14
    b6a4:	0e 94 31 46 	call	0x8c62	; 0x8c62 <clmt_clust>
    b6a8:	08 c0       	rjmp	.+16     	; 0xb6ba <f_write+0x104>
    b6aa:	f7 01       	movw	r30, r14
    b6ac:	44 89       	ldd	r20, Z+20	; 0x14
    b6ae:	55 89       	ldd	r21, Z+21	; 0x15
    b6b0:	66 89       	ldd	r22, Z+22	; 0x16
    b6b2:	77 89       	ldd	r23, Z+23	; 0x17
    b6b4:	c7 01       	movw	r24, r14
    b6b6:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <create_chain>
    b6ba:	61 15       	cp	r22, r1
    b6bc:	71 05       	cpc	r23, r1
    b6be:	81 05       	cpc	r24, r1
    b6c0:	91 05       	cpc	r25, r1
    b6c2:	31 f4       	brne	.+12     	; 0xb6d0 <f_write+0x11a>
    b6c4:	f7 01       	movw	r30, r14
    b6c6:	86 85       	ldd	r24, Z+14	; 0x0e
    b6c8:	80 64       	ori	r24, 0x40	; 64
    b6ca:	86 87       	std	Z+14, r24	; 0x0e
    b6cc:	80 e0       	ldi	r24, 0x00	; 0
    b6ce:	05 c1       	rjmp	.+522    	; 0xb8da <f_write+0x324>
    b6d0:	61 30       	cpi	r22, 0x01	; 1
    b6d2:	71 05       	cpc	r23, r1
    b6d4:	81 05       	cpc	r24, r1
    b6d6:	91 05       	cpc	r25, r1
    b6d8:	11 f4       	brne	.+4      	; 0xb6de <f_write+0x128>
    b6da:	82 e0       	ldi	r24, 0x02	; 2
    b6dc:	07 c0       	rjmp	.+14     	; 0xb6ec <f_write+0x136>
    b6de:	6f 3f       	cpi	r22, 0xFF	; 255
    b6e0:	ff ef       	ldi	r31, 0xFF	; 255
    b6e2:	7f 07       	cpc	r23, r31
    b6e4:	8f 07       	cpc	r24, r31
    b6e6:	9f 07       	cpc	r25, r31
    b6e8:	21 f4       	brne	.+8      	; 0xb6f2 <f_write+0x13c>
    b6ea:	81 e0       	ldi	r24, 0x01	; 1
    b6ec:	f7 01       	movw	r30, r14
    b6ee:	87 87       	std	Z+15, r24	; 0x0f
    b6f0:	f4 c0       	rjmp	.+488    	; 0xb8da <f_write+0x324>
    b6f2:	f7 01       	movw	r30, r14
    b6f4:	64 8b       	std	Z+20, r22	; 0x14
    b6f6:	75 8b       	std	Z+21, r23	; 0x15
    b6f8:	86 8b       	std	Z+22, r24	; 0x16
    b6fa:	97 8b       	std	Z+23, r25	; 0x17
    b6fc:	06 81       	ldd	r16, Z+6	; 0x06
    b6fe:	17 81       	ldd	r17, Z+7	; 0x07
    b700:	20 85       	ldd	r18, Z+8	; 0x08
    b702:	31 85       	ldd	r19, Z+9	; 0x09
    b704:	01 15       	cp	r16, r1
    b706:	11 05       	cpc	r17, r1
    b708:	21 05       	cpc	r18, r1
    b70a:	31 05       	cpc	r19, r1
    b70c:	21 f4       	brne	.+8      	; 0xb716 <f_write+0x160>
    b70e:	66 83       	std	Z+6, r22	; 0x06
    b710:	77 83       	std	Z+7, r23	; 0x07
    b712:	80 87       	std	Z+8, r24	; 0x08
    b714:	91 87       	std	Z+9, r25	; 0x09
    b716:	f7 01       	movw	r30, r14
    b718:	86 85       	ldd	r24, Z+14	; 0x0e
    b71a:	87 ff       	sbrs	r24, 7
    b71c:	13 c0       	rjmp	.+38     	; 0xb744 <f_write+0x18e>
    b71e:	20 8d       	ldd	r18, Z+24	; 0x18
    b720:	31 8d       	ldd	r19, Z+25	; 0x19
    b722:	42 8d       	ldd	r20, Z+26	; 0x1a
    b724:	53 8d       	ldd	r21, Z+27	; 0x1b
    b726:	e9 81       	ldd	r30, Y+1	; 0x01
    b728:	fa 81       	ldd	r31, Y+2	; 0x02
    b72a:	01 e0       	ldi	r16, 0x01	; 1
    b72c:	10 e0       	ldi	r17, 0x00	; 0
    b72e:	6d 81       	ldd	r22, Y+5	; 0x05
    b730:	7e 81       	ldd	r23, Y+6	; 0x06
    b732:	81 81       	ldd	r24, Z+1	; 0x01
    b734:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    b738:	89 2b       	or	r24, r25
    b73a:	b9 f6       	brne	.-82     	; 0xb6ea <f_write+0x134>
    b73c:	f7 01       	movw	r30, r14
    b73e:	86 85       	ldd	r24, Z+14	; 0x0e
    b740:	8f 77       	andi	r24, 0x7F	; 127
    b742:	86 87       	std	Z+14, r24	; 0x0e
    b744:	29 81       	ldd	r18, Y+1	; 0x01
    b746:	3a 81       	ldd	r19, Y+2	; 0x02
    b748:	3c 83       	std	Y+4, r19	; 0x04
    b74a:	2b 83       	std	Y+3, r18	; 0x03
    b74c:	f7 01       	movw	r30, r14
    b74e:	44 89       	ldd	r20, Z+20	; 0x14
    b750:	55 89       	ldd	r21, Z+21	; 0x15
    b752:	66 89       	ldd	r22, Z+22	; 0x16
    b754:	77 89       	ldd	r23, Z+23	; 0x17
    b756:	c9 01       	movw	r24, r18
    b758:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    b75c:	61 15       	cp	r22, r1
    b75e:	71 05       	cpc	r23, r1
    b760:	81 05       	cpc	r24, r1
    b762:	91 05       	cpc	r25, r1
    b764:	09 f4       	brne	.+2      	; 0xb768 <f_write+0x1b2>
    b766:	b9 cf       	rjmp	.-142    	; 0xb6da <f_write+0x124>
    b768:	1b 01       	movw	r2, r22
    b76a:	2c 01       	movw	r4, r24
    b76c:	28 0c       	add	r2, r8
    b76e:	39 1c       	adc	r3, r9
    b770:	41 1c       	adc	r4, r1
    b772:	51 1c       	adc	r5, r1
    b774:	65 01       	movw	r12, r10
    b776:	cd 2c       	mov	r12, r13
    b778:	dd 24       	eor	r13, r13
    b77a:	c6 94       	lsr	r12
    b77c:	c1 14       	cp	r12, r1
    b77e:	d1 04       	cpc	r13, r1
    b780:	f1 f1       	breq	.+124    	; 0xb7fe <f_write+0x248>
    b782:	eb 81       	ldd	r30, Y+3	; 0x03
    b784:	fc 81       	ldd	r31, Y+4	; 0x04
    b786:	81 85       	ldd	r24, Z+9	; 0x09
    b788:	92 85       	ldd	r25, Z+10	; 0x0a
    b78a:	94 01       	movw	r18, r8
    b78c:	2c 0d       	add	r18, r12
    b78e:	3d 1d       	adc	r19, r13
    b790:	82 17       	cp	r24, r18
    b792:	93 07       	cpc	r25, r19
    b794:	18 f4       	brcc	.+6      	; 0xb79c <f_write+0x1e6>
    b796:	6c 01       	movw	r12, r24
    b798:	c8 18       	sub	r12, r8
    b79a:	d9 08       	sbc	r13, r9
    b79c:	86 01       	movw	r16, r12
    b79e:	a2 01       	movw	r20, r4
    b7a0:	91 01       	movw	r18, r2
    b7a2:	b3 01       	movw	r22, r6
    b7a4:	eb 81       	ldd	r30, Y+3	; 0x03
    b7a6:	fc 81       	ldd	r31, Y+4	; 0x04
    b7a8:	81 81       	ldd	r24, Z+1	; 0x01
    b7aa:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    b7ae:	89 2b       	or	r24, r25
    b7b0:	09 f0       	breq	.+2      	; 0xb7b4 <f_write+0x1fe>
    b7b2:	9b cf       	rjmp	.-202    	; 0xb6ea <f_write+0x134>
    b7b4:	f7 01       	movw	r30, r14
    b7b6:	80 8d       	ldd	r24, Z+24	; 0x18
    b7b8:	91 8d       	ldd	r25, Z+25	; 0x19
    b7ba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b7bc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b7be:	82 19       	sub	r24, r2
    b7c0:	93 09       	sbc	r25, r3
    b7c2:	a4 09       	sbc	r26, r4
    b7c4:	b5 09       	sbc	r27, r5
    b7c6:	a6 01       	movw	r20, r12
    b7c8:	60 e0       	ldi	r22, 0x00	; 0
    b7ca:	70 e0       	ldi	r23, 0x00	; 0
    b7cc:	84 17       	cp	r24, r20
    b7ce:	95 07       	cpc	r25, r21
    b7d0:	a6 07       	cpc	r26, r22
    b7d2:	b7 07       	cpc	r27, r23
    b7d4:	80 f4       	brcc	.+32     	; 0xb7f6 <f_write+0x240>
    b7d6:	98 2f       	mov	r25, r24
    b7d8:	88 27       	eor	r24, r24
    b7da:	99 0f       	add	r25, r25
    b7dc:	b3 01       	movw	r22, r6
    b7de:	68 0f       	add	r22, r24
    b7e0:	79 1f       	adc	r23, r25
    b7e2:	40 e0       	ldi	r20, 0x00	; 0
    b7e4:	52 e0       	ldi	r21, 0x02	; 2
    b7e6:	8d 81       	ldd	r24, Y+5	; 0x05
    b7e8:	9e 81       	ldd	r25, Y+6	; 0x06
    b7ea:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    b7ee:	f7 01       	movw	r30, r14
    b7f0:	86 85       	ldd	r24, Z+14	; 0x0e
    b7f2:	8f 77       	andi	r24, 0x7F	; 127
    b7f4:	86 87       	std	Z+14, r24	; 0x0e
    b7f6:	dc 2c       	mov	r13, r12
    b7f8:	cc 24       	eor	r12, r12
    b7fa:	dd 0c       	add	r13, r13
    b7fc:	43 c0       	rjmp	.+134    	; 0xb884 <f_write+0x2ce>
    b7fe:	f7 01       	movw	r30, r14
    b800:	80 8d       	ldd	r24, Z+24	; 0x18
    b802:	91 8d       	ldd	r25, Z+25	; 0x19
    b804:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b806:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b808:	28 16       	cp	r2, r24
    b80a:	39 06       	cpc	r3, r25
    b80c:	4a 06       	cpc	r4, r26
    b80e:	5b 06       	cpc	r5, r27
    b810:	d9 f0       	breq	.+54     	; 0xb848 <f_write+0x292>
    b812:	40 89       	ldd	r20, Z+16	; 0x10
    b814:	51 89       	ldd	r21, Z+17	; 0x11
    b816:	62 89       	ldd	r22, Z+18	; 0x12
    b818:	73 89       	ldd	r23, Z+19	; 0x13
    b81a:	82 85       	ldd	r24, Z+10	; 0x0a
    b81c:	93 85       	ldd	r25, Z+11	; 0x0b
    b81e:	a4 85       	ldd	r26, Z+12	; 0x0c
    b820:	b5 85       	ldd	r27, Z+13	; 0x0d
    b822:	48 17       	cp	r20, r24
    b824:	59 07       	cpc	r21, r25
    b826:	6a 07       	cpc	r22, r26
    b828:	7b 07       	cpc	r23, r27
    b82a:	70 f4       	brcc	.+28     	; 0xb848 <f_write+0x292>
    b82c:	01 e0       	ldi	r16, 0x01	; 1
    b82e:	10 e0       	ldi	r17, 0x00	; 0
    b830:	a2 01       	movw	r20, r4
    b832:	91 01       	movw	r18, r2
    b834:	6d 81       	ldd	r22, Y+5	; 0x05
    b836:	7e 81       	ldd	r23, Y+6	; 0x06
    b838:	eb 81       	ldd	r30, Y+3	; 0x03
    b83a:	fc 81       	ldd	r31, Y+4	; 0x04
    b83c:	81 81       	ldd	r24, Z+1	; 0x01
    b83e:	0e 94 ca 67 	call	0xcf94	; 0xcf94 <disk_read>
    b842:	89 2b       	or	r24, r25
    b844:	09 f0       	breq	.+2      	; 0xb848 <f_write+0x292>
    b846:	51 cf       	rjmp	.-350    	; 0xb6ea <f_write+0x134>
    b848:	f7 01       	movw	r30, r14
    b84a:	20 8e       	std	Z+24, r2	; 0x18
    b84c:	31 8e       	std	Z+25, r3	; 0x19
    b84e:	42 8e       	std	Z+26, r4	; 0x1a
    b850:	53 8e       	std	Z+27, r5	; 0x1b
    b852:	f7 01       	movw	r30, r14
    b854:	80 89       	ldd	r24, Z+16	; 0x10
    b856:	91 89       	ldd	r25, Z+17	; 0x11
    b858:	91 70       	andi	r25, 0x01	; 1
    b85a:	20 e0       	ldi	r18, 0x00	; 0
    b85c:	32 e0       	ldi	r19, 0x02	; 2
    b85e:	28 1b       	sub	r18, r24
    b860:	39 0b       	sbc	r19, r25
    b862:	65 01       	movw	r12, r10
    b864:	2a 15       	cp	r18, r10
    b866:	3b 05       	cpc	r19, r11
    b868:	08 f4       	brcc	.+2      	; 0xb86c <f_write+0x2b6>
    b86a:	69 01       	movw	r12, r18
    b86c:	a6 01       	movw	r20, r12
    b86e:	b3 01       	movw	r22, r6
    b870:	2d 81       	ldd	r18, Y+5	; 0x05
    b872:	3e 81       	ldd	r19, Y+6	; 0x06
    b874:	82 0f       	add	r24, r18
    b876:	93 1f       	adc	r25, r19
    b878:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    b87c:	f7 01       	movw	r30, r14
    b87e:	86 85       	ldd	r24, Z+14	; 0x0e
    b880:	80 68       	ori	r24, 0x80	; 128
    b882:	86 87       	std	Z+14, r24	; 0x0e
    b884:	ac 18       	sub	r10, r12
    b886:	bd 08       	sbc	r11, r13
    b888:	ef 81       	ldd	r30, Y+7	; 0x07
    b88a:	f8 85       	ldd	r31, Y+8	; 0x08
    b88c:	80 81       	ld	r24, Z
    b88e:	91 81       	ldd	r25, Z+1	; 0x01
    b890:	8c 0d       	add	r24, r12
    b892:	9d 1d       	adc	r25, r13
    b894:	91 83       	std	Z+1, r25	; 0x01
    b896:	80 83       	st	Z, r24
    b898:	6c 0c       	add	r6, r12
    b89a:	7d 1c       	adc	r7, r13
    b89c:	f7 01       	movw	r30, r14
    b89e:	80 89       	ldd	r24, Z+16	; 0x10
    b8a0:	91 89       	ldd	r25, Z+17	; 0x11
    b8a2:	a2 89       	ldd	r26, Z+18	; 0x12
    b8a4:	b3 89       	ldd	r27, Z+19	; 0x13
    b8a6:	8c 0d       	add	r24, r12
    b8a8:	9d 1d       	adc	r25, r13
    b8aa:	a1 1d       	adc	r26, r1
    b8ac:	b1 1d       	adc	r27, r1
    b8ae:	80 8b       	std	Z+16, r24	; 0x10
    b8b0:	91 8b       	std	Z+17, r25	; 0x11
    b8b2:	a2 8b       	std	Z+18, r26	; 0x12
    b8b4:	b3 8b       	std	Z+19, r27	; 0x13
    b8b6:	42 85       	ldd	r20, Z+10	; 0x0a
    b8b8:	53 85       	ldd	r21, Z+11	; 0x0b
    b8ba:	64 85       	ldd	r22, Z+12	; 0x0c
    b8bc:	75 85       	ldd	r23, Z+13	; 0x0d
    b8be:	48 17       	cp	r20, r24
    b8c0:	59 07       	cpc	r21, r25
    b8c2:	6a 07       	cpc	r22, r26
    b8c4:	7b 07       	cpc	r23, r27
    b8c6:	10 f4       	brcc	.+4      	; 0xb8cc <f_write+0x316>
    b8c8:	ac 01       	movw	r20, r24
    b8ca:	bd 01       	movw	r22, r26
    b8cc:	f7 01       	movw	r30, r14
    b8ce:	42 87       	std	Z+10, r20	; 0x0a
    b8d0:	53 87       	std	Z+11, r21	; 0x0b
    b8d2:	64 87       	std	Z+12, r22	; 0x0c
    b8d4:	75 87       	std	Z+13, r23	; 0x0d
    b8d6:	a5 ce       	rjmp	.-694    	; 0xb622 <f_write+0x6c>
    b8d8:	87 e0       	ldi	r24, 0x07	; 7
    b8da:	90 e0       	ldi	r25, 0x00	; 0
    b8dc:	28 96       	adiw	r28, 0x08	; 8
    b8de:	e2 e1       	ldi	r30, 0x12	; 18
    b8e0:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000b8e4 <f_sync>:
    b8e4:	8f 92       	push	r8
    b8e6:	9f 92       	push	r9
    b8e8:	af 92       	push	r10
    b8ea:	bf 92       	push	r11
    b8ec:	ef 92       	push	r14
    b8ee:	ff 92       	push	r15
    b8f0:	0f 93       	push	r16
    b8f2:	1f 93       	push	r17
    b8f4:	cf 93       	push	r28
    b8f6:	df 93       	push	r29
    b8f8:	00 d0       	rcall	.+0      	; 0xb8fa <f_sync+0x16>
    b8fa:	cd b7       	in	r28, 0x3d	; 61
    b8fc:	de b7       	in	r29, 0x3e	; 62
    b8fe:	7c 01       	movw	r14, r24
    b900:	be 01       	movw	r22, r28
    b902:	6f 5f       	subi	r22, 0xFF	; 255
    b904:	7f 4f       	sbci	r23, 0xFF	; 255
    b906:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    b90a:	00 97       	sbiw	r24, 0x00	; 0
    b90c:	09 f0       	breq	.+2      	; 0xb910 <f_sync+0x2c>
    b90e:	5d c0       	rjmp	.+186    	; 0xb9ca <f_sync+0xe6>
    b910:	f7 01       	movw	r30, r14
    b912:	86 85       	ldd	r24, Z+14	; 0x0e
    b914:	86 ff       	sbrs	r24, 6
    b916:	55 c0       	rjmp	.+170    	; 0xb9c2 <f_sync+0xde>
    b918:	87 ff       	sbrs	r24, 7
    b91a:	15 c0       	rjmp	.+42     	; 0xb946 <f_sync+0x62>
    b91c:	20 8d       	ldd	r18, Z+24	; 0x18
    b91e:	31 8d       	ldd	r19, Z+25	; 0x19
    b920:	42 8d       	ldd	r20, Z+26	; 0x1a
    b922:	53 8d       	ldd	r21, Z+27	; 0x1b
    b924:	e9 81       	ldd	r30, Y+1	; 0x01
    b926:	fa 81       	ldd	r31, Y+2	; 0x02
    b928:	01 e0       	ldi	r16, 0x01	; 1
    b92a:	10 e0       	ldi	r17, 0x00	; 0
    b92c:	b7 01       	movw	r22, r14
    b92e:	6c 5d       	subi	r22, 0xDC	; 220
    b930:	7f 4f       	sbci	r23, 0xFF	; 255
    b932:	81 81       	ldd	r24, Z+1	; 0x01
    b934:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    b938:	89 2b       	or	r24, r25
    b93a:	09 f0       	breq	.+2      	; 0xb93e <f_sync+0x5a>
    b93c:	44 c0       	rjmp	.+136    	; 0xb9c6 <f_sync+0xe2>
    b93e:	f7 01       	movw	r30, r14
    b940:	86 85       	ldd	r24, Z+14	; 0x0e
    b942:	8f 77       	andi	r24, 0x7F	; 127
    b944:	86 87       	std	Z+14, r24	; 0x0e
    b946:	0e 94 8f 6e 	call	0xdd1e	; 0xdd1e <get_fattime>
    b94a:	4b 01       	movw	r8, r22
    b94c:	5c 01       	movw	r10, r24
    b94e:	f7 01       	movw	r30, r14
    b950:	44 8d       	ldd	r20, Z+28	; 0x1c
    b952:	55 8d       	ldd	r21, Z+29	; 0x1d
    b954:	66 8d       	ldd	r22, Z+30	; 0x1e
    b956:	77 8d       	ldd	r23, Z+31	; 0x1f
    b958:	89 81       	ldd	r24, Y+1	; 0x01
    b95a:	9a 81       	ldd	r25, Y+2	; 0x02
    b95c:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    b960:	00 97       	sbiw	r24, 0x00	; 0
    b962:	99 f5       	brne	.+102    	; 0xb9ca <f_sync+0xe6>
    b964:	f7 01       	movw	r30, r14
    b966:	00 a1       	ldd	r16, Z+32	; 0x20
    b968:	11 a1       	ldd	r17, Z+33	; 0x21
    b96a:	f8 01       	movw	r30, r16
    b96c:	83 85       	ldd	r24, Z+11	; 0x0b
    b96e:	80 62       	ori	r24, 0x20	; 32
    b970:	83 87       	std	Z+11, r24	; 0x0b
    b972:	f7 01       	movw	r30, r14
    b974:	26 81       	ldd	r18, Z+6	; 0x06
    b976:	37 81       	ldd	r19, Z+7	; 0x07
    b978:	40 85       	ldd	r20, Z+8	; 0x08
    b97a:	51 85       	ldd	r21, Z+9	; 0x09
    b97c:	b8 01       	movw	r22, r16
    b97e:	80 81       	ld	r24, Z
    b980:	91 81       	ldd	r25, Z+1	; 0x01
    b982:	0e 94 1e 48 	call	0x903c	; 0x903c <st_clust.isra.4>
    b986:	f7 01       	movw	r30, r14
    b988:	42 85       	ldd	r20, Z+10	; 0x0a
    b98a:	53 85       	ldd	r21, Z+11	; 0x0b
    b98c:	64 85       	ldd	r22, Z+12	; 0x0c
    b98e:	75 85       	ldd	r23, Z+13	; 0x0d
    b990:	c8 01       	movw	r24, r16
    b992:	4c 96       	adiw	r24, 0x1c	; 28
    b994:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <st_dword>
    b998:	b5 01       	movw	r22, r10
    b99a:	a4 01       	movw	r20, r8
    b99c:	c8 01       	movw	r24, r16
    b99e:	46 96       	adiw	r24, 0x16	; 22
    b9a0:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <st_dword>
    b9a4:	f8 01       	movw	r30, r16
    b9a6:	12 8a       	std	Z+18, r1	; 0x12
    b9a8:	13 8a       	std	Z+19, r1	; 0x13
    b9aa:	89 81       	ldd	r24, Y+1	; 0x01
    b9ac:	9a 81       	ldd	r25, Y+2	; 0x02
    b9ae:	21 e0       	ldi	r18, 0x01	; 1
    b9b0:	fc 01       	movw	r30, r24
    b9b2:	23 83       	std	Z+3, r18	; 0x03
    b9b4:	0e 94 7e 48 	call	0x90fc	; 0x90fc <sync_fs>
    b9b8:	f7 01       	movw	r30, r14
    b9ba:	26 85       	ldd	r18, Z+14	; 0x0e
    b9bc:	2f 7b       	andi	r18, 0xBF	; 191
    b9be:	26 87       	std	Z+14, r18	; 0x0e
    b9c0:	04 c0       	rjmp	.+8      	; 0xb9ca <f_sync+0xe6>
    b9c2:	80 e0       	ldi	r24, 0x00	; 0
    b9c4:	01 c0       	rjmp	.+2      	; 0xb9c8 <f_sync+0xe4>
    b9c6:	81 e0       	ldi	r24, 0x01	; 1
    b9c8:	90 e0       	ldi	r25, 0x00	; 0
    b9ca:	0f 90       	pop	r0
    b9cc:	0f 90       	pop	r0
    b9ce:	df 91       	pop	r29
    b9d0:	cf 91       	pop	r28
    b9d2:	1f 91       	pop	r17
    b9d4:	0f 91       	pop	r16
    b9d6:	ff 90       	pop	r15
    b9d8:	ef 90       	pop	r14
    b9da:	bf 90       	pop	r11
    b9dc:	af 90       	pop	r10
    b9de:	9f 90       	pop	r9
    b9e0:	8f 90       	pop	r8
    b9e2:	08 95       	ret

0000b9e4 <f_close>:
    b9e4:	a2 e0       	ldi	r26, 0x02	; 2
    b9e6:	b0 e0       	ldi	r27, 0x00	; 0
    b9e8:	e8 ef       	ldi	r30, 0xF8	; 248
    b9ea:	fc e5       	ldi	r31, 0x5C	; 92
    b9ec:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    b9f0:	8c 01       	movw	r16, r24
    b9f2:	78 df       	rcall	.-272    	; 0xb8e4 <f_sync>
    b9f4:	00 97       	sbiw	r24, 0x00	; 0
    b9f6:	59 f4       	brne	.+22     	; 0xba0e <f_close+0x2a>
    b9f8:	be 01       	movw	r22, r28
    b9fa:	6f 5f       	subi	r22, 0xFF	; 255
    b9fc:	7f 4f       	sbci	r23, 0xFF	; 255
    b9fe:	c8 01       	movw	r24, r16
    ba00:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    ba04:	00 97       	sbiw	r24, 0x00	; 0
    ba06:	19 f4       	brne	.+6      	; 0xba0e <f_close+0x2a>
    ba08:	f8 01       	movw	r30, r16
    ba0a:	11 82       	std	Z+1, r1	; 0x01
    ba0c:	10 82       	st	Z, r1
    ba0e:	22 96       	adiw	r28, 0x02	; 2
    ba10:	e4 e0       	ldi	r30, 0x04	; 4
    ba12:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0000ba16 <f_chdir>:
    ba16:	a2 e3       	ldi	r26, 0x32	; 50
    ba18:	b0 e0       	ldi	r27, 0x00	; 0
    ba1a:	e1 e1       	ldi	r30, 0x11	; 17
    ba1c:	fd e5       	ldi	r31, 0x5D	; 93
    ba1e:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    ba22:	9a ab       	std	Y+50, r25	; 0x32
    ba24:	89 ab       	std	Y+49, r24	; 0x31
    ba26:	40 e0       	ldi	r20, 0x00	; 0
    ba28:	be 01       	movw	r22, r28
    ba2a:	61 5d       	subi	r22, 0xD1	; 209
    ba2c:	7f 4f       	sbci	r23, 0xFF	; 255
    ba2e:	ce 01       	movw	r24, r28
    ba30:	c1 96       	adiw	r24, 0x31	; 49
    ba32:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    ba36:	00 97       	sbiw	r24, 0x00	; 0
    ba38:	09 f0       	breq	.+2      	; 0xba3c <f_chdir+0x26>
    ba3a:	44 c0       	rjmp	.+136    	; 0xbac4 <f_chdir+0xae>
    ba3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    ba3e:	98 a9       	ldd	r25, Y+48	; 0x30
    ba40:	9a 83       	std	Y+2, r25	; 0x02
    ba42:	89 83       	std	Y+1, r24	; 0x01
    ba44:	80 e0       	ldi	r24, 0x00	; 0
    ba46:	92 e0       	ldi	r25, 0x02	; 2
    ba48:	0e 94 0e 67 	call	0xce1c	; 0xce1c <ff_memalloc>
    ba4c:	7c 01       	movw	r14, r24
    ba4e:	00 97       	sbiw	r24, 0x00	; 0
    ba50:	a9 f1       	breq	.+106    	; 0xbabc <f_chdir+0xa6>
    ba52:	ef a5       	ldd	r30, Y+47	; 0x2f
    ba54:	f8 a9       	ldd	r31, Y+48	; 0x30
    ba56:	94 87       	std	Z+12, r25	; 0x0c
    ba58:	83 87       	std	Z+11, r24	; 0x0b
    ba5a:	69 a9       	ldd	r22, Y+49	; 0x31
    ba5c:	7a a9       	ldd	r23, Y+50	; 0x32
    ba5e:	ce 01       	movw	r24, r28
    ba60:	01 96       	adiw	r24, 0x01	; 1
    ba62:	2e d8       	rcall	.-4004   	; 0xaac0 <follow_path>
    ba64:	8c 01       	movw	r16, r24
    ba66:	89 2b       	or	r24, r25
    ba68:	09 f5       	brne	.+66     	; 0xbaac <f_chdir+0x96>
    ba6a:	88 a5       	ldd	r24, Y+40	; 0x28
    ba6c:	87 ff       	sbrs	r24, 7
    ba6e:	0b c0       	rjmp	.+22     	; 0xba86 <f_chdir+0x70>
    ba70:	ef a5       	ldd	r30, Y+47	; 0x2f
    ba72:	f8 a9       	ldd	r31, Y+48	; 0x30
    ba74:	8f 81       	ldd	r24, Y+7	; 0x07
    ba76:	98 85       	ldd	r25, Y+8	; 0x08
    ba78:	a9 85       	ldd	r26, Y+9	; 0x09
    ba7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    ba7c:	85 8b       	std	Z+21, r24	; 0x15
    ba7e:	96 8b       	std	Z+22, r25	; 0x16
    ba80:	a7 8b       	std	Z+23, r26	; 0x17
    ba82:	b0 8f       	std	Z+24, r27	; 0x18
    ba84:	13 c0       	rjmp	.+38     	; 0xbaac <f_chdir+0x96>
    ba86:	8d 81       	ldd	r24, Y+5	; 0x05
    ba88:	84 ff       	sbrs	r24, 4
    ba8a:	0e c0       	rjmp	.+28     	; 0xbaa8 <f_chdir+0x92>
    ba8c:	cf a4       	ldd	r12, Y+47	; 0x2f
    ba8e:	d8 a8       	ldd	r13, Y+48	; 0x30
    ba90:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ba92:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ba94:	f6 01       	movw	r30, r12
    ba96:	80 81       	ld	r24, Z
    ba98:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    ba9c:	f6 01       	movw	r30, r12
    ba9e:	65 8b       	std	Z+21, r22	; 0x15
    baa0:	76 8b       	std	Z+22, r23	; 0x16
    baa2:	87 8b       	std	Z+23, r24	; 0x17
    baa4:	90 8f       	std	Z+24, r25	; 0x18
    baa6:	02 c0       	rjmp	.+4      	; 0xbaac <f_chdir+0x96>
    baa8:	05 e0       	ldi	r16, 0x05	; 5
    baaa:	10 e0       	ldi	r17, 0x00	; 0
    baac:	c7 01       	movw	r24, r14
    baae:	0e 94 11 67 	call	0xce22	; 0xce22 <ff_memfree>
    bab2:	04 30       	cpi	r16, 0x04	; 4
    bab4:	11 05       	cpc	r17, r1
    bab6:	29 f4       	brne	.+10     	; 0xbac2 <f_chdir+0xac>
    bab8:	85 e0       	ldi	r24, 0x05	; 5
    baba:	01 c0       	rjmp	.+2      	; 0xbabe <f_chdir+0xa8>
    babc:	81 e1       	ldi	r24, 0x11	; 17
    babe:	90 e0       	ldi	r25, 0x00	; 0
    bac0:	01 c0       	rjmp	.+2      	; 0xbac4 <f_chdir+0xae>
    bac2:	c8 01       	movw	r24, r16
    bac4:	e2 96       	adiw	r28, 0x32	; 50
    bac6:	e8 e0       	ldi	r30, 0x08	; 8
    bac8:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000bacc <f_getcwd>:
    bacc:	a8 e4       	ldi	r26, 0x48	; 72
    bace:	b1 e0       	ldi	r27, 0x01	; 1
    bad0:	ec e6       	ldi	r30, 0x6C	; 108
    bad2:	fd e5       	ldi	r31, 0x5D	; 93
    bad4:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    bad8:	c9 5b       	subi	r28, 0xB9	; 185
    bada:	de 4f       	sbci	r29, 0xFE	; 254
    badc:	99 83       	std	Y+1, r25	; 0x01
    bade:	88 83       	st	Y, r24
    bae0:	c7 54       	subi	r28, 0x47	; 71
    bae2:	d1 40       	sbci	r29, 0x01	; 1
    bae4:	4b 01       	movw	r8, r22
    bae6:	7c 01       	movw	r14, r24
    bae8:	fc 01       	movw	r30, r24
    baea:	10 82       	st	Z, r1
    baec:	40 e0       	ldi	r20, 0x00	; 0
    baee:	be 01       	movw	r22, r28
    baf0:	6b 5b       	subi	r22, 0xBB	; 187
    baf2:	7e 4f       	sbci	r23, 0xFE	; 254
    baf4:	ce 01       	movw	r24, r28
    baf6:	89 5b       	subi	r24, 0xB9	; 185
    baf8:	9e 4f       	sbci	r25, 0xFE	; 254
    bafa:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    bafe:	1c 01       	movw	r2, r24
    bb00:	89 2b       	or	r24, r25
    bb02:	09 f0       	breq	.+2      	; 0xbb06 <f_getcwd+0x3a>
    bb04:	03 c1       	rjmp	.+518    	; 0xbd0c <f_getcwd+0x240>
    bb06:	cb 5b       	subi	r28, 0xBB	; 187
    bb08:	de 4f       	sbci	r29, 0xFE	; 254
    bb0a:	88 81       	ld	r24, Y
    bb0c:	99 81       	ldd	r25, Y+1	; 0x01
    bb0e:	c5 54       	subi	r28, 0x45	; 69
    bb10:	d1 40       	sbci	r29, 0x01	; 1
    bb12:	c9 5e       	subi	r28, 0xE9	; 233
    bb14:	de 4f       	sbci	r29, 0xFE	; 254
    bb16:	99 83       	std	Y+1, r25	; 0x01
    bb18:	88 83       	st	Y, r24
    bb1a:	c7 51       	subi	r28, 0x17	; 23
    bb1c:	d1 40       	sbci	r29, 0x01	; 1
    bb1e:	80 e0       	ldi	r24, 0x00	; 0
    bb20:	92 e0       	ldi	r25, 0x02	; 2
    bb22:	0e 94 0e 67 	call	0xce1c	; 0xce1c <ff_memalloc>
    bb26:	5c 01       	movw	r10, r24
    bb28:	00 97       	sbiw	r24, 0x00	; 0
    bb2a:	09 f4       	brne	.+2      	; 0xbb2e <f_getcwd+0x62>
    bb2c:	f3 c0       	rjmp	.+486    	; 0xbd14 <f_getcwd+0x248>
    bb2e:	cb 5b       	subi	r28, 0xBB	; 187
    bb30:	de 4f       	sbci	r29, 0xFE	; 254
    bb32:	e8 81       	ld	r30, Y
    bb34:	f9 81       	ldd	r31, Y+1	; 0x01
    bb36:	c5 54       	subi	r28, 0x45	; 69
    bb38:	d1 40       	sbci	r29, 0x01	; 1
    bb3a:	94 87       	std	Z+12, r25	; 0x0c
    bb3c:	83 87       	std	Z+11, r24	; 0x0b
    bb3e:	85 89       	ldd	r24, Z+21	; 0x15
    bb40:	96 89       	ldd	r25, Z+22	; 0x16
    bb42:	a7 89       	ldd	r26, Z+23	; 0x17
    bb44:	b0 8d       	ldd	r27, Z+24	; 0x18
    bb46:	c3 5e       	subi	r28, 0xE3	; 227
    bb48:	de 4f       	sbci	r29, 0xFE	; 254
    bb4a:	88 83       	st	Y, r24
    bb4c:	99 83       	std	Y+1, r25	; 0x01
    bb4e:	aa 83       	std	Y+2, r26	; 0x02
    bb50:	bb 83       	std	Y+3, r27	; 0x03
    bb52:	cd 51       	subi	r28, 0x1D	; 29
    bb54:	d1 40       	sbci	r29, 0x01	; 1
    bb56:	84 01       	movw	r16, r8
    bb58:	ce 01       	movw	r24, r28
    bb5a:	01 96       	adiw	r24, 0x01	; 1
    bb5c:	6c 01       	movw	r12, r24
    bb5e:	c3 5e       	subi	r28, 0xE3	; 227
    bb60:	de 4f       	sbci	r29, 0xFE	; 254
    bb62:	48 80       	ld	r4, Y
    bb64:	59 80       	ldd	r5, Y+1	; 0x01
    bb66:	6a 80       	ldd	r6, Y+2	; 0x02
    bb68:	7b 80       	ldd	r7, Y+3	; 0x03
    bb6a:	cd 51       	subi	r28, 0x1D	; 29
    bb6c:	d1 40       	sbci	r29, 0x01	; 1
    bb6e:	41 14       	cp	r4, r1
    bb70:	51 04       	cpc	r5, r1
    bb72:	61 04       	cpc	r6, r1
    bb74:	71 04       	cpc	r7, r1
    bb76:	09 f4       	brne	.+2      	; 0xbb7a <f_getcwd+0xae>
    bb78:	a3 c0       	rjmp	.+326    	; 0xbcc0 <f_getcwd+0x1f4>
    bb7a:	40 e2       	ldi	r20, 0x20	; 32
    bb7c:	50 e0       	ldi	r21, 0x00	; 0
    bb7e:	60 e0       	ldi	r22, 0x00	; 0
    bb80:	70 e0       	ldi	r23, 0x00	; 0
    bb82:	ce 01       	movw	r24, r28
    bb84:	89 5e       	subi	r24, 0xE9	; 233
    bb86:	9e 4f       	sbci	r25, 0xFE	; 254
    bb88:	0e 94 1a 4e 	call	0x9c34	; 0x9c34 <dir_sdi>
    bb8c:	00 97       	sbiw	r24, 0x00	; 0
    bb8e:	09 f0       	breq	.+2      	; 0xbb92 <f_getcwd+0xc6>
    bb90:	c6 c0       	rjmp	.+396    	; 0xbd1e <f_getcwd+0x252>
    bb92:	c3 5d       	subi	r28, 0xD3	; 211
    bb94:	de 4f       	sbci	r29, 0xFE	; 254
    bb96:	48 81       	ld	r20, Y
    bb98:	59 81       	ldd	r21, Y+1	; 0x01
    bb9a:	6a 81       	ldd	r22, Y+2	; 0x02
    bb9c:	7b 81       	ldd	r23, Y+3	; 0x03
    bb9e:	cd 52       	subi	r28, 0x2D	; 45
    bba0:	d1 40       	sbci	r29, 0x01	; 1
    bba2:	cb 5b       	subi	r28, 0xBB	; 187
    bba4:	de 4f       	sbci	r29, 0xFE	; 254
    bba6:	88 81       	ld	r24, Y
    bba8:	99 81       	ldd	r25, Y+1	; 0x01
    bbaa:	c5 54       	subi	r28, 0x45	; 69
    bbac:	d1 40       	sbci	r29, 0x01	; 1
    bbae:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    bbb2:	00 97       	sbiw	r24, 0x00	; 0
    bbb4:	09 f0       	breq	.+2      	; 0xbbb8 <f_getcwd+0xec>
    bbb6:	b3 c0       	rjmp	.+358    	; 0xbd1e <f_getcwd+0x252>
    bbb8:	cf 5c       	subi	r28, 0xCF	; 207
    bbba:	de 4f       	sbci	r29, 0xFE	; 254
    bbbc:	68 81       	ld	r22, Y
    bbbe:	79 81       	ldd	r23, Y+1	; 0x01
    bbc0:	c1 53       	subi	r28, 0x31	; 49
    bbc2:	d1 40       	sbci	r29, 0x01	; 1
    bbc4:	cb 5b       	subi	r28, 0xBB	; 187
    bbc6:	de 4f       	sbci	r29, 0xFE	; 254
    bbc8:	e8 81       	ld	r30, Y
    bbca:	f9 81       	ldd	r31, Y+1	; 0x01
    bbcc:	c5 54       	subi	r28, 0x45	; 69
    bbce:	d1 40       	sbci	r29, 0x01	; 1
    bbd0:	80 81       	ld	r24, Z
    bbd2:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    bbd6:	c3 5e       	subi	r28, 0xE3	; 227
    bbd8:	de 4f       	sbci	r29, 0xFE	; 254
    bbda:	68 83       	st	Y, r22
    bbdc:	79 83       	std	Y+1, r23	; 0x01
    bbde:	8a 83       	std	Y+2, r24	; 0x02
    bbe0:	9b 83       	std	Y+3, r25	; 0x03
    bbe2:	cd 51       	subi	r28, 0x1D	; 29
    bbe4:	d1 40       	sbci	r29, 0x01	; 1
    bbe6:	40 e0       	ldi	r20, 0x00	; 0
    bbe8:	50 e0       	ldi	r21, 0x00	; 0
    bbea:	ba 01       	movw	r22, r20
    bbec:	ce 01       	movw	r24, r28
    bbee:	89 5e       	subi	r24, 0xE9	; 233
    bbf0:	9e 4f       	sbci	r25, 0xFE	; 254
    bbf2:	0e 94 1a 4e 	call	0x9c34	; 0x9c34 <dir_sdi>
    bbf6:	00 97       	sbiw	r24, 0x00	; 0
    bbf8:	09 f0       	breq	.+2      	; 0xbbfc <f_getcwd+0x130>
    bbfa:	91 c0       	rjmp	.+290    	; 0xbd1e <f_getcwd+0x252>
    bbfc:	60 e0       	ldi	r22, 0x00	; 0
    bbfe:	70 e0       	ldi	r23, 0x00	; 0
    bc00:	ce 01       	movw	r24, r28
    bc02:	89 5e       	subi	r24, 0xE9	; 233
    bc04:	9e 4f       	sbci	r25, 0xFE	; 254
    bc06:	0e 94 b3 51 	call	0xa366	; 0xa366 <dir_read>
    bc0a:	00 97       	sbiw	r24, 0x00	; 0
    bc0c:	09 f0       	breq	.+2      	; 0xbc10 <f_getcwd+0x144>
    bc0e:	89 c0       	rjmp	.+274    	; 0xbd22 <f_getcwd+0x256>
    bc10:	cf 5c       	subi	r28, 0xCF	; 207
    bc12:	de 4f       	sbci	r29, 0xFE	; 254
    bc14:	68 81       	ld	r22, Y
    bc16:	79 81       	ldd	r23, Y+1	; 0x01
    bc18:	c1 53       	subi	r28, 0x31	; 49
    bc1a:	d1 40       	sbci	r29, 0x01	; 1
    bc1c:	cb 5b       	subi	r28, 0xBB	; 187
    bc1e:	de 4f       	sbci	r29, 0xFE	; 254
    bc20:	e8 81       	ld	r30, Y
    bc22:	f9 81       	ldd	r31, Y+1	; 0x01
    bc24:	c5 54       	subi	r28, 0x45	; 69
    bc26:	d1 40       	sbci	r29, 0x01	; 1
    bc28:	80 81       	ld	r24, Z
    bc2a:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    bc2e:	46 16       	cp	r4, r22
    bc30:	57 06       	cpc	r5, r23
    bc32:	68 06       	cpc	r6, r24
    bc34:	79 06       	cpc	r7, r25
    bc36:	41 f4       	brne	.+16     	; 0xbc48 <f_getcwd+0x17c>
    bc38:	b6 01       	movw	r22, r12
    bc3a:	ce 01       	movw	r24, r28
    bc3c:	89 5e       	subi	r24, 0xE9	; 233
    bc3e:	9e 4f       	sbci	r25, 0xFE	; 254
    bc40:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <get_fileinfo>
    bc44:	f6 01       	movw	r30, r12
    bc46:	0a c0       	rjmp	.+20     	; 0xbc5c <f_getcwd+0x190>
    bc48:	60 e0       	ldi	r22, 0x00	; 0
    bc4a:	70 e0       	ldi	r23, 0x00	; 0
    bc4c:	ce 01       	movw	r24, r28
    bc4e:	89 5e       	subi	r24, 0xE9	; 233
    bc50:	9e 4f       	sbci	r25, 0xFE	; 254
    bc52:	0e 94 92 50 	call	0xa124	; 0xa124 <dir_next>
    bc56:	00 97       	sbiw	r24, 0x00	; 0
    bc58:	89 f2       	breq	.-94     	; 0xbbfc <f_getcwd+0x130>
    bc5a:	63 c0       	rjmp	.+198    	; 0xbd22 <f_getcwd+0x256>
    bc5c:	cf 01       	movw	r24, r30
    bc5e:	8c 19       	sub	r24, r12
    bc60:	9d 09       	sbc	r25, r13
    bc62:	31 96       	adiw	r30, 0x01	; 1
    bc64:	25 89       	ldd	r18, Z+21	; 0x15
    bc66:	21 11       	cpse	r18, r1
    bc68:	f9 cf       	rjmp	.-14     	; 0xbc5c <f_getcwd+0x190>
    bc6a:	9c 01       	movw	r18, r24
    bc6c:	2f 5f       	subi	r18, 0xFF	; 255
    bc6e:	3f 4f       	sbci	r19, 0xFF	; 255
    bc70:	02 17       	cp	r16, r18
    bc72:	13 07       	cpc	r17, r19
    bc74:	08 f4       	brcc	.+2      	; 0xbc78 <f_getcwd+0x1ac>
    bc76:	51 c0       	rjmp	.+162    	; 0xbd1a <f_getcwd+0x24e>
    bc78:	f6 01       	movw	r30, r12
    bc7a:	e8 0f       	add	r30, r24
    bc7c:	f9 1f       	adc	r31, r25
    bc7e:	98 01       	movw	r18, r16
    bc80:	ce 16       	cp	r12, r30
    bc82:	df 06       	cpc	r13, r31
    bc84:	71 f0       	breq	.+28     	; 0xbca2 <f_getcwd+0x1d6>
    bc86:	21 50       	subi	r18, 0x01	; 1
    bc88:	31 09       	sbc	r19, r1
    bc8a:	45 89       	ldd	r20, Z+21	; 0x15
    bc8c:	c9 5b       	subi	r28, 0xB9	; 185
    bc8e:	de 4f       	sbci	r29, 0xFE	; 254
    bc90:	a8 81       	ld	r26, Y
    bc92:	b9 81       	ldd	r27, Y+1	; 0x01
    bc94:	c7 54       	subi	r28, 0x47	; 71
    bc96:	d1 40       	sbci	r29, 0x01	; 1
    bc98:	a2 0f       	add	r26, r18
    bc9a:	b3 1f       	adc	r27, r19
    bc9c:	4c 93       	st	X, r20
    bc9e:	31 97       	sbiw	r30, 0x01	; 1
    bca0:	ef cf       	rjmp	.-34     	; 0xbc80 <f_getcwd+0x1b4>
    bca2:	80 95       	com	r24
    bca4:	90 95       	com	r25
    bca6:	08 0f       	add	r16, r24
    bca8:	19 1f       	adc	r17, r25
    bcaa:	c9 5b       	subi	r28, 0xB9	; 185
    bcac:	de 4f       	sbci	r29, 0xFE	; 254
    bcae:	e8 81       	ld	r30, Y
    bcb0:	f9 81       	ldd	r31, Y+1	; 0x01
    bcb2:	c7 54       	subi	r28, 0x47	; 71
    bcb4:	d1 40       	sbci	r29, 0x01	; 1
    bcb6:	e0 0f       	add	r30, r16
    bcb8:	f1 1f       	adc	r31, r17
    bcba:	9f e2       	ldi	r25, 0x2F	; 47
    bcbc:	90 83       	st	Z, r25
    bcbe:	4f cf       	rjmp	.-354    	; 0xbb5e <f_getcwd+0x92>
    bcc0:	08 15       	cp	r16, r8
    bcc2:	19 05       	cpc	r17, r9
    bcc4:	61 f4       	brne	.+24     	; 0xbcde <f_getcwd+0x212>
    bcc6:	01 50       	subi	r16, 0x01	; 1
    bcc8:	11 09       	sbc	r17, r1
    bcca:	c9 5b       	subi	r28, 0xB9	; 185
    bccc:	de 4f       	sbci	r29, 0xFE	; 254
    bcce:	e8 81       	ld	r30, Y
    bcd0:	f9 81       	ldd	r31, Y+1	; 0x01
    bcd2:	c7 54       	subi	r28, 0x47	; 71
    bcd4:	d1 40       	sbci	r29, 0x01	; 1
    bcd6:	e0 0f       	add	r30, r16
    bcd8:	f1 1f       	adc	r31, r17
    bcda:	8f e2       	ldi	r24, 0x2F	; 47
    bcdc:	80 83       	st	Z, r24
    bcde:	ef ef       	ldi	r30, 0xFF	; 255
    bce0:	ee 1a       	sub	r14, r30
    bce2:	fe 0a       	sbc	r15, r30
    bce4:	c9 5b       	subi	r28, 0xB9	; 185
    bce6:	de 4f       	sbci	r29, 0xFE	; 254
    bce8:	e8 81       	ld	r30, Y
    bcea:	f9 81       	ldd	r31, Y+1	; 0x01
    bcec:	c7 54       	subi	r28, 0x47	; 71
    bcee:	d1 40       	sbci	r29, 0x01	; 1
    bcf0:	e0 0f       	add	r30, r16
    bcf2:	f1 1f       	adc	r31, r17
    bcf4:	80 81       	ld	r24, Z
    bcf6:	f7 01       	movw	r30, r14
    bcf8:	31 97       	sbiw	r30, 0x01	; 1
    bcfa:	80 83       	st	Z, r24
    bcfc:	0f 5f       	subi	r16, 0xFF	; 255
    bcfe:	1f 4f       	sbci	r17, 0xFF	; 255
    bd00:	08 15       	cp	r16, r8
    bd02:	19 05       	cpc	r17, r9
    bd04:	60 f3       	brcs	.-40     	; 0xbcde <f_getcwd+0x212>
    bd06:	c5 01       	movw	r24, r10
    bd08:	0e 94 11 67 	call	0xce22	; 0xce22 <ff_memfree>
    bd0c:	f7 01       	movw	r30, r14
    bd0e:	10 82       	st	Z, r1
    bd10:	c1 01       	movw	r24, r2
    bd12:	0d c0       	rjmp	.+26     	; 0xbd2e <f_getcwd+0x262>
    bd14:	81 e1       	ldi	r24, 0x11	; 17
    bd16:	90 e0       	ldi	r25, 0x00	; 0
    bd18:	0a c0       	rjmp	.+20     	; 0xbd2e <f_getcwd+0x262>
    bd1a:	81 e1       	ldi	r24, 0x11	; 17
    bd1c:	90 e0       	ldi	r25, 0x00	; 0
    bd1e:	1c 01       	movw	r2, r24
    bd20:	f2 cf       	rjmp	.-28     	; 0xbd06 <f_getcwd+0x23a>
    bd22:	84 30       	cpi	r24, 0x04	; 4
    bd24:	91 05       	cpc	r25, r1
    bd26:	d9 f7       	brne	.-10     	; 0xbd1e <f_getcwd+0x252>
    bd28:	82 e0       	ldi	r24, 0x02	; 2
    bd2a:	90 e0       	ldi	r25, 0x00	; 0
    bd2c:	f8 cf       	rjmp	.-16     	; 0xbd1e <f_getcwd+0x252>
    bd2e:	c8 5b       	subi	r28, 0xB8	; 184
    bd30:	de 4f       	sbci	r29, 0xFE	; 254
    bd32:	e2 e1       	ldi	r30, 0x12	; 18
    bd34:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000bd38 <f_lseek>:
    bd38:	aa e0       	ldi	r26, 0x0A	; 10
    bd3a:	b0 e0       	ldi	r27, 0x00	; 0
    bd3c:	e2 ea       	ldi	r30, 0xA2	; 162
    bd3e:	fe e5       	ldi	r31, 0x5E	; 94
    bd40:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    bd44:	1c 01       	movw	r2, r24
    bd46:	6a 01       	movw	r12, r20
    bd48:	7b 01       	movw	r14, r22
    bd4a:	be 01       	movw	r22, r28
    bd4c:	6f 5f       	subi	r22, 0xFF	; 255
    bd4e:	7f 4f       	sbci	r23, 0xFF	; 255
    bd50:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    bd54:	00 97       	sbiw	r24, 0x00	; 0
    bd56:	09 f0       	breq	.+2      	; 0xbd5a <f_lseek+0x22>
    bd58:	a6 c2       	rjmp	.+1356   	; 0xc2a6 <f_lseek+0x56e>
    bd5a:	f1 01       	movw	r30, r2
    bd5c:	87 85       	ldd	r24, Z+15	; 0x0f
    bd5e:	90 e0       	ldi	r25, 0x00	; 0
    bd60:	00 97       	sbiw	r24, 0x00	; 0
    bd62:	09 f0       	breq	.+2      	; 0xbd66 <f_lseek+0x2e>
    bd64:	a0 c2       	rjmp	.+1344   	; 0xc2a6 <f_lseek+0x56e>
    bd66:	22 a1       	ldd	r18, Z+34	; 0x22
    bd68:	33 a1       	ldd	r19, Z+35	; 0x23
    bd6a:	21 15       	cp	r18, r1
    bd6c:	31 05       	cpc	r19, r1
    bd6e:	09 f4       	brne	.+2      	; 0xbd72 <f_lseek+0x3a>
    bd70:	2d c1       	rjmp	.+602    	; 0xbfcc <f_lseek+0x294>
    bd72:	ff ef       	ldi	r31, 0xFF	; 255
    bd74:	cf 16       	cp	r12, r31
    bd76:	df 06       	cpc	r13, r31
    bd78:	ef 06       	cpc	r14, r31
    bd7a:	ff 06       	cpc	r15, r31
    bd7c:	09 f0       	breq	.+2      	; 0xbd80 <f_lseek+0x48>
    bd7e:	9a c0       	rjmp	.+308    	; 0xbeb4 <f_lseek+0x17c>
    bd80:	89 01       	movw	r16, r18
    bd82:	0c 5f       	subi	r16, 0xFC	; 252
    bd84:	1f 4f       	sbci	r17, 0xFF	; 255
    bd86:	d9 01       	movw	r26, r18
    bd88:	4d 91       	ld	r20, X+
    bd8a:	5d 91       	ld	r21, X+
    bd8c:	6d 91       	ld	r22, X+
    bd8e:	7c 91       	ld	r23, X
    bd90:	4f 83       	std	Y+7, r20	; 0x07
    bd92:	58 87       	std	Y+8, r21	; 0x08
    bd94:	69 87       	std	Y+9, r22	; 0x09
    bd96:	7a 87       	std	Y+10, r23	; 0x0a
    bd98:	f1 01       	movw	r30, r2
    bd9a:	86 80       	ldd	r8, Z+6	; 0x06
    bd9c:	97 80       	ldd	r9, Z+7	; 0x07
    bd9e:	a0 84       	ldd	r10, Z+8	; 0x08
    bda0:	b1 84       	ldd	r11, Z+9	; 0x09
    bda2:	52 e0       	ldi	r21, 0x02	; 2
    bda4:	c5 2e       	mov	r12, r21
    bda6:	d1 2c       	mov	r13, r1
    bda8:	e1 2c       	mov	r14, r1
    bdaa:	f1 2c       	mov	r15, r1
    bdac:	81 14       	cp	r8, r1
    bdae:	91 04       	cpc	r9, r1
    bdb0:	a1 04       	cpc	r10, r1
    bdb2:	b1 04       	cpc	r11, r1
    bdb4:	09 f4       	brne	.+2      	; 0xbdb8 <f_lseek+0x80>
    bdb6:	65 c0       	rjmp	.+202    	; 0xbe82 <f_lseek+0x14a>
    bdb8:	24 01       	movw	r4, r8
    bdba:	35 01       	movw	r6, r10
    bdbc:	1b 82       	std	Y+3, r1	; 0x03
    bdbe:	1c 82       	std	Y+4, r1	; 0x04
    bdc0:	1d 82       	std	Y+5, r1	; 0x05
    bdc2:	1e 82       	std	Y+6, r1	; 0x06
    bdc4:	2b 81       	ldd	r18, Y+3	; 0x03
    bdc6:	3c 81       	ldd	r19, Y+4	; 0x04
    bdc8:	4d 81       	ldd	r20, Y+5	; 0x05
    bdca:	5e 81       	ldd	r21, Y+6	; 0x06
    bdcc:	2f 5f       	subi	r18, 0xFF	; 255
    bdce:	3f 4f       	sbci	r19, 0xFF	; 255
    bdd0:	4f 4f       	sbci	r20, 0xFF	; 255
    bdd2:	5f 4f       	sbci	r21, 0xFF	; 255
    bdd4:	2b 83       	std	Y+3, r18	; 0x03
    bdd6:	3c 83       	std	Y+4, r19	; 0x04
    bdd8:	4d 83       	std	Y+5, r20	; 0x05
    bdda:	5e 83       	std	Y+6, r21	; 0x06
    bddc:	b3 01       	movw	r22, r6
    bdde:	a2 01       	movw	r20, r4
    bde0:	d1 01       	movw	r26, r2
    bde2:	8d 91       	ld	r24, X+
    bde4:	9c 91       	ld	r25, X
    bde6:	0e 94 66 4d 	call	0x9acc	; 0x9acc <get_fat.isra.9>
    bdea:	62 30       	cpi	r22, 0x02	; 2
    bdec:	71 05       	cpc	r23, r1
    bdee:	81 05       	cpc	r24, r1
    bdf0:	91 05       	cpc	r25, r1
    bdf2:	10 f4       	brcc	.+4      	; 0xbdf8 <f_lseek+0xc0>
    bdf4:	82 e0       	ldi	r24, 0x02	; 2
    bdf6:	07 c0       	rjmp	.+14     	; 0xbe06 <f_lseek+0xce>
    bdf8:	6f 3f       	cpi	r22, 0xFF	; 255
    bdfa:	ff ef       	ldi	r31, 0xFF	; 255
    bdfc:	7f 07       	cpc	r23, r31
    bdfe:	8f 07       	cpc	r24, r31
    be00:	9f 07       	cpc	r25, r31
    be02:	29 f4       	brne	.+10     	; 0xbe0e <f_lseek+0xd6>
    be04:	81 e0       	ldi	r24, 0x01	; 1
    be06:	f1 01       	movw	r30, r2
    be08:	87 87       	std	Z+15, r24	; 0x0f
    be0a:	90 e0       	ldi	r25, 0x00	; 0
    be0c:	4c c2       	rjmp	.+1176   	; 0xc2a6 <f_lseek+0x56e>
    be0e:	a3 01       	movw	r20, r6
    be10:	92 01       	movw	r18, r4
    be12:	2f 5f       	subi	r18, 0xFF	; 255
    be14:	3f 4f       	sbci	r19, 0xFF	; 255
    be16:	4f 4f       	sbci	r20, 0xFF	; 255
    be18:	5f 4f       	sbci	r21, 0xFF	; 255
    be1a:	2b 01       	movw	r4, r22
    be1c:	3c 01       	movw	r6, r24
    be1e:	62 17       	cp	r22, r18
    be20:	73 07       	cpc	r23, r19
    be22:	84 07       	cpc	r24, r20
    be24:	95 07       	cpc	r25, r21
    be26:	71 f2       	breq	.-100    	; 0xbdc4 <f_lseek+0x8c>
    be28:	f2 e0       	ldi	r31, 0x02	; 2
    be2a:	cf 0e       	add	r12, r31
    be2c:	d1 1c       	adc	r13, r1
    be2e:	e1 1c       	adc	r14, r1
    be30:	f1 1c       	adc	r15, r1
    be32:	2f 81       	ldd	r18, Y+7	; 0x07
    be34:	38 85       	ldd	r19, Y+8	; 0x08
    be36:	49 85       	ldd	r20, Y+9	; 0x09
    be38:	5a 85       	ldd	r21, Y+10	; 0x0a
    be3a:	2c 15       	cp	r18, r12
    be3c:	3d 05       	cpc	r19, r13
    be3e:	4e 05       	cpc	r20, r14
    be40:	5f 05       	cpc	r21, r15
    be42:	88 f0       	brcs	.+34     	; 0xbe66 <f_lseek+0x12e>
    be44:	2b 81       	ldd	r18, Y+3	; 0x03
    be46:	3c 81       	ldd	r19, Y+4	; 0x04
    be48:	4d 81       	ldd	r20, Y+5	; 0x05
    be4a:	5e 81       	ldd	r21, Y+6	; 0x06
    be4c:	d8 01       	movw	r26, r16
    be4e:	2d 93       	st	X+, r18
    be50:	3d 93       	st	X+, r19
    be52:	4d 93       	st	X+, r20
    be54:	5c 93       	st	X, r21
    be56:	13 97       	sbiw	r26, 0x03	; 3
    be58:	f8 01       	movw	r30, r16
    be5a:	84 82       	std	Z+4, r8	; 0x04
    be5c:	95 82       	std	Z+5, r9	; 0x05
    be5e:	a6 82       	std	Z+6, r10	; 0x06
    be60:	b7 82       	std	Z+7, r11	; 0x07
    be62:	08 5f       	subi	r16, 0xF8	; 248
    be64:	1f 4f       	sbci	r17, 0xFF	; 255
    be66:	e9 81       	ldd	r30, Y+1	; 0x01
    be68:	fa 81       	ldd	r31, Y+2	; 0x02
    be6a:	81 8c       	ldd	r8, Z+25	; 0x19
    be6c:	92 8c       	ldd	r9, Z+26	; 0x1a
    be6e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    be70:	b4 8c       	ldd	r11, Z+28	; 0x1c
    be72:	68 15       	cp	r22, r8
    be74:	79 05       	cpc	r23, r9
    be76:	8a 05       	cpc	r24, r10
    be78:	9b 05       	cpc	r25, r11
    be7a:	18 f4       	brcc	.+6      	; 0xbe82 <f_lseek+0x14a>
    be7c:	4b 01       	movw	r8, r22
    be7e:	5c 01       	movw	r10, r24
    be80:	9b cf       	rjmp	.-202    	; 0xbdb8 <f_lseek+0x80>
    be82:	f1 01       	movw	r30, r2
    be84:	a2 a1       	ldd	r26, Z+34	; 0x22
    be86:	b3 a1       	ldd	r27, Z+35	; 0x23
    be88:	cd 92       	st	X+, r12
    be8a:	dd 92       	st	X+, r13
    be8c:	ed 92       	st	X+, r14
    be8e:	fc 92       	st	X, r15
    be90:	13 97       	sbiw	r26, 0x03	; 3
    be92:	2f 81       	ldd	r18, Y+7	; 0x07
    be94:	38 85       	ldd	r19, Y+8	; 0x08
    be96:	49 85       	ldd	r20, Y+9	; 0x09
    be98:	5a 85       	ldd	r21, Y+10	; 0x0a
    be9a:	2c 15       	cp	r18, r12
    be9c:	3d 05       	cpc	r19, r13
    be9e:	4e 05       	cpc	r20, r14
    bea0:	5f 05       	cpc	r21, r15
    bea2:	08 f4       	brcc	.+2      	; 0xbea6 <f_lseek+0x16e>
    bea4:	f7 c1       	rjmp	.+1006   	; 0xc294 <f_lseek+0x55c>
    bea6:	d8 01       	movw	r26, r16
    bea8:	1d 92       	st	X+, r1
    beaa:	1d 92       	st	X+, r1
    beac:	1d 92       	st	X+, r1
    beae:	1c 92       	st	X, r1
    beb0:	13 97       	sbiw	r26, 0x03	; 3
    beb2:	ee c1       	rjmp	.+988    	; 0xc290 <f_lseek+0x558>
    beb4:	f1 01       	movw	r30, r2
    beb6:	82 85       	ldd	r24, Z+10	; 0x0a
    beb8:	93 85       	ldd	r25, Z+11	; 0x0b
    beba:	a4 85       	ldd	r26, Z+12	; 0x0c
    bebc:	b5 85       	ldd	r27, Z+13	; 0x0d
    bebe:	46 01       	movw	r8, r12
    bec0:	57 01       	movw	r10, r14
    bec2:	8c 15       	cp	r24, r12
    bec4:	9d 05       	cpc	r25, r13
    bec6:	ae 05       	cpc	r26, r14
    bec8:	bf 05       	cpc	r27, r15
    beca:	10 f4       	brcc	.+4      	; 0xbed0 <f_lseek+0x198>
    becc:	4c 01       	movw	r8, r24
    bece:	5d 01       	movw	r10, r26
    bed0:	f1 01       	movw	r30, r2
    bed2:	80 8a       	std	Z+16, r8	; 0x10
    bed4:	91 8a       	std	Z+17, r9	; 0x11
    bed6:	a2 8a       	std	Z+18, r10	; 0x12
    bed8:	b3 8a       	std	Z+19, r11	; 0x13
    beda:	81 14       	cp	r8, r1
    bedc:	91 04       	cpc	r9, r1
    bede:	a1 04       	cpc	r10, r1
    bee0:	b1 04       	cpc	r11, r1
    bee2:	09 f4       	brne	.+2      	; 0xbee6 <f_lseek+0x1ae>
    bee4:	d5 c1       	rjmp	.+938    	; 0xc290 <f_lseek+0x558>
    bee6:	24 01       	movw	r4, r8
    bee8:	35 01       	movw	r6, r10
    beea:	f1 e0       	ldi	r31, 0x01	; 1
    beec:	4f 1a       	sub	r4, r31
    beee:	51 08       	sbc	r5, r1
    bef0:	61 08       	sbc	r6, r1
    bef2:	71 08       	sbc	r7, r1
    bef4:	b3 01       	movw	r22, r6
    bef6:	a2 01       	movw	r20, r4
    bef8:	c1 01       	movw	r24, r2
    befa:	0e 94 31 46 	call	0x8c62	; 0x8c62 <clmt_clust>
    befe:	ab 01       	movw	r20, r22
    bf00:	bc 01       	movw	r22, r24
    bf02:	f1 01       	movw	r30, r2
    bf04:	44 8b       	std	Z+20, r20	; 0x14
    bf06:	55 8b       	std	Z+21, r21	; 0x15
    bf08:	66 8b       	std	Z+22, r22	; 0x16
    bf0a:	77 8b       	std	Z+23, r23	; 0x17
    bf0c:	e9 80       	ldd	r14, Y+1	; 0x01
    bf0e:	fa 80       	ldd	r15, Y+2	; 0x02
    bf10:	c7 01       	movw	r24, r14
    bf12:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    bf16:	61 15       	cp	r22, r1
    bf18:	71 05       	cpc	r23, r1
    bf1a:	81 05       	cpc	r24, r1
    bf1c:	91 05       	cpc	r25, r1
    bf1e:	09 f4       	brne	.+2      	; 0xbf22 <f_lseek+0x1ea>
    bf20:	69 cf       	rjmp	.-302    	; 0xbdf4 <f_lseek+0xbc>
    bf22:	95 01       	movw	r18, r10
    bf24:	84 01       	movw	r16, r8
    bf26:	11 70       	andi	r17, 0x01	; 1
    bf28:	22 27       	eor	r18, r18
    bf2a:	33 27       	eor	r19, r19
    bf2c:	01 15       	cp	r16, r1
    bf2e:	11 05       	cpc	r17, r1
    bf30:	21 05       	cpc	r18, r1
    bf32:	31 05       	cpc	r19, r1
    bf34:	09 f4       	brne	.+2      	; 0xbf38 <f_lseek+0x200>
    bf36:	ac c1       	rjmp	.+856    	; 0xc290 <f_lseek+0x558>
    bf38:	f7 01       	movw	r30, r14
    bf3a:	81 84       	ldd	r8, Z+9	; 0x09
    bf3c:	92 84       	ldd	r9, Z+10	; 0x0a
    bf3e:	f1 e0       	ldi	r31, 0x01	; 1
    bf40:	8f 1a       	sub	r8, r31
    bf42:	91 08       	sbc	r9, r1
    bf44:	a1 2c       	mov	r10, r1
    bf46:	b1 2c       	mov	r11, r1
    bf48:	49 e0       	ldi	r20, 0x09	; 9
    bf4a:	76 94       	lsr	r7
    bf4c:	67 94       	ror	r6
    bf4e:	57 94       	ror	r5
    bf50:	47 94       	ror	r4
    bf52:	4a 95       	dec	r20
    bf54:	d1 f7       	brne	.-12     	; 0xbf4a <f_lseek+0x212>
    bf56:	48 20       	and	r4, r8
    bf58:	59 20       	and	r5, r9
    bf5a:	6a 20       	and	r6, r10
    bf5c:	7b 20       	and	r7, r11
    bf5e:	53 01       	movw	r10, r6
    bf60:	42 01       	movw	r8, r4
    bf62:	86 0e       	add	r8, r22
    bf64:	97 1e       	adc	r9, r23
    bf66:	a8 1e       	adc	r10, r24
    bf68:	b9 1e       	adc	r11, r25
    bf6a:	f1 01       	movw	r30, r2
    bf6c:	20 8d       	ldd	r18, Z+24	; 0x18
    bf6e:	31 8d       	ldd	r19, Z+25	; 0x19
    bf70:	42 8d       	ldd	r20, Z+26	; 0x1a
    bf72:	53 8d       	ldd	r21, Z+27	; 0x1b
    bf74:	82 16       	cp	r8, r18
    bf76:	93 06       	cpc	r9, r19
    bf78:	a4 06       	cpc	r10, r20
    bf7a:	b5 06       	cpc	r11, r21
    bf7c:	09 f4       	brne	.+2      	; 0xbf80 <f_lseek+0x248>
    bf7e:	88 c1       	rjmp	.+784    	; 0xc290 <f_lseek+0x558>
    bf80:	86 85       	ldd	r24, Z+14	; 0x0e
    bf82:	b1 01       	movw	r22, r2
    bf84:	6c 5d       	subi	r22, 0xDC	; 220
    bf86:	7f 4f       	sbci	r23, 0xFF	; 255
    bf88:	6b 01       	movw	r12, r22
    bf8a:	87 ff       	sbrs	r24, 7
    bf8c:	0d c0       	rjmp	.+26     	; 0xbfa8 <f_lseek+0x270>
    bf8e:	01 e0       	ldi	r16, 0x01	; 1
    bf90:	10 e0       	ldi	r17, 0x00	; 0
    bf92:	f7 01       	movw	r30, r14
    bf94:	81 81       	ldd	r24, Z+1	; 0x01
    bf96:	0e 94 da 67 	call	0xcfb4	; 0xcfb4 <disk_write>
    bf9a:	89 2b       	or	r24, r25
    bf9c:	09 f0       	breq	.+2      	; 0xbfa0 <f_lseek+0x268>
    bf9e:	32 cf       	rjmp	.-412    	; 0xbe04 <f_lseek+0xcc>
    bfa0:	f1 01       	movw	r30, r2
    bfa2:	86 85       	ldd	r24, Z+14	; 0x0e
    bfa4:	8f 77       	andi	r24, 0x7F	; 127
    bfa6:	86 87       	std	Z+14, r24	; 0x0e
    bfa8:	e9 81       	ldd	r30, Y+1	; 0x01
    bfaa:	fa 81       	ldd	r31, Y+2	; 0x02
    bfac:	01 e0       	ldi	r16, 0x01	; 1
    bfae:	10 e0       	ldi	r17, 0x00	; 0
    bfb0:	a5 01       	movw	r20, r10
    bfb2:	94 01       	movw	r18, r8
    bfb4:	b6 01       	movw	r22, r12
    bfb6:	81 81       	ldd	r24, Z+1	; 0x01
    bfb8:	ed d7       	rcall	.+4058   	; 0xcf94 <disk_read>
    bfba:	89 2b       	or	r24, r25
    bfbc:	09 f0       	breq	.+2      	; 0xbfc0 <f_lseek+0x288>
    bfbe:	22 cf       	rjmp	.-444    	; 0xbe04 <f_lseek+0xcc>
    bfc0:	f1 01       	movw	r30, r2
    bfc2:	80 8e       	std	Z+24, r8	; 0x18
    bfc4:	91 8e       	std	Z+25, r9	; 0x19
    bfc6:	a2 8e       	std	Z+26, r10	; 0x1a
    bfc8:	b3 8e       	std	Z+27, r11	; 0x1b
    bfca:	62 c1       	rjmp	.+708    	; 0xc290 <f_lseek+0x558>
    bfcc:	f1 01       	movw	r30, r2
    bfce:	82 85       	ldd	r24, Z+10	; 0x0a
    bfd0:	93 85       	ldd	r25, Z+11	; 0x0b
    bfd2:	a4 85       	ldd	r26, Z+12	; 0x0c
    bfd4:	b5 85       	ldd	r27, Z+13	; 0x0d
    bfd6:	8c 15       	cp	r24, r12
    bfd8:	9d 05       	cpc	r25, r13
    bfda:	ae 05       	cpc	r26, r14
    bfdc:	bf 05       	cpc	r27, r15
    bfde:	28 f4       	brcc	.+10     	; 0xbfea <f_lseek+0x2b2>
    bfe0:	26 85       	ldd	r18, Z+14	; 0x0e
    bfe2:	21 fd       	sbrc	r18, 1
    bfe4:	02 c0       	rjmp	.+4      	; 0xbfea <f_lseek+0x2b2>
    bfe6:	6c 01       	movw	r12, r24
    bfe8:	7d 01       	movw	r14, r26
    bfea:	f1 01       	movw	r30, r2
    bfec:	40 88       	ldd	r4, Z+16	; 0x10
    bfee:	51 88       	ldd	r5, Z+17	; 0x11
    bff0:	62 88       	ldd	r6, Z+18	; 0x12
    bff2:	73 88       	ldd	r7, Z+19	; 0x13
    bff4:	10 8a       	std	Z+16, r1	; 0x10
    bff6:	11 8a       	std	Z+17, r1	; 0x11
    bff8:	12 8a       	std	Z+18, r1	; 0x12
    bffa:	13 8a       	std	Z+19, r1	; 0x13
    bffc:	c1 14       	cp	r12, r1
    bffe:	d1 04       	cpc	r13, r1
    c000:	e1 04       	cpc	r14, r1
    c002:	f1 04       	cpc	r15, r1
    c004:	09 f4       	brne	.+2      	; 0xc008 <f_lseek+0x2d0>
    c006:	48 c1       	rjmp	.+656    	; 0xc298 <f_lseek+0x560>
    c008:	e9 81       	ldd	r30, Y+1	; 0x01
    c00a:	fa 81       	ldd	r31, Y+2	; 0x02
    c00c:	81 84       	ldd	r8, Z+9	; 0x09
    c00e:	92 84       	ldd	r9, Z+10	; 0x0a
    c010:	a1 2c       	mov	r10, r1
    c012:	b1 2c       	mov	r11, r1
    c014:	39 e0       	ldi	r19, 0x09	; 9
    c016:	88 0c       	add	r8, r8
    c018:	99 1c       	adc	r9, r9
    c01a:	aa 1c       	adc	r10, r10
    c01c:	bb 1c       	adc	r11, r11
    c01e:	3a 95       	dec	r19
    c020:	d1 f7       	brne	.-12     	; 0xc016 <f_lseek+0x2de>
    c022:	41 14       	cp	r4, r1
    c024:	51 04       	cpc	r5, r1
    c026:	61 04       	cpc	r6, r1
    c028:	71 04       	cpc	r7, r1
    c02a:	d9 f1       	breq	.+118    	; 0xc0a2 <f_lseek+0x36a>
    c02c:	f1 e0       	ldi	r31, 0x01	; 1
    c02e:	4f 1a       	sub	r4, r31
    c030:	51 08       	sbc	r5, r1
    c032:	61 08       	sbc	r6, r1
    c034:	71 08       	sbc	r7, r1
    c036:	c7 01       	movw	r24, r14
    c038:	b6 01       	movw	r22, r12
    c03a:	61 50       	subi	r22, 0x01	; 1
    c03c:	71 09       	sbc	r23, r1
    c03e:	81 09       	sbc	r24, r1
    c040:	91 09       	sbc	r25, r1
    c042:	a5 01       	movw	r20, r10
    c044:	94 01       	movw	r18, r8
    c046:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    c04a:	2b 83       	std	Y+3, r18	; 0x03
    c04c:	3c 83       	std	Y+4, r19	; 0x04
    c04e:	4d 83       	std	Y+5, r20	; 0x05
    c050:	5e 83       	std	Y+6, r21	; 0x06
    c052:	c3 01       	movw	r24, r6
    c054:	b2 01       	movw	r22, r4
    c056:	a5 01       	movw	r20, r10
    c058:	94 01       	movw	r18, r8
    c05a:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
    c05e:	6b 81       	ldd	r22, Y+3	; 0x03
    c060:	7c 81       	ldd	r23, Y+4	; 0x04
    c062:	8d 81       	ldd	r24, Y+5	; 0x05
    c064:	9e 81       	ldd	r25, Y+6	; 0x06
    c066:	62 17       	cp	r22, r18
    c068:	73 07       	cpc	r23, r19
    c06a:	84 07       	cpc	r24, r20
    c06c:	95 07       	cpc	r25, r21
    c06e:	c8 f0       	brcs	.+50     	; 0xc0a2 <f_lseek+0x36a>
    c070:	88 27       	eor	r24, r24
    c072:	99 27       	eor	r25, r25
    c074:	dc 01       	movw	r26, r24
    c076:	88 19       	sub	r24, r8
    c078:	99 09       	sbc	r25, r9
    c07a:	aa 09       	sbc	r26, r10
    c07c:	bb 09       	sbc	r27, r11
    c07e:	48 22       	and	r4, r24
    c080:	59 22       	and	r5, r25
    c082:	6a 22       	and	r6, r26
    c084:	7b 22       	and	r7, r27
    c086:	f1 01       	movw	r30, r2
    c088:	40 8a       	std	Z+16, r4	; 0x10
    c08a:	51 8a       	std	Z+17, r5	; 0x11
    c08c:	62 8a       	std	Z+18, r6	; 0x12
    c08e:	73 8a       	std	Z+19, r7	; 0x13
    c090:	c4 18       	sub	r12, r4
    c092:	d5 08       	sbc	r13, r5
    c094:	e6 08       	sbc	r14, r6
    c096:	f7 08       	sbc	r15, r7
    c098:	44 89       	ldd	r20, Z+20	; 0x14
    c09a:	55 89       	ldd	r21, Z+21	; 0x15
    c09c:	66 89       	ldd	r22, Z+22	; 0x16
    c09e:	77 89       	ldd	r23, Z+23	; 0x17
    c0a0:	29 c0       	rjmp	.+82     	; 0xc0f4 <f_lseek+0x3bc>
    c0a2:	f1 01       	movw	r30, r2
    c0a4:	46 81       	ldd	r20, Z+6	; 0x06
    c0a6:	57 81       	ldd	r21, Z+7	; 0x07
    c0a8:	60 85       	ldd	r22, Z+8	; 0x08
    c0aa:	71 85       	ldd	r23, Z+9	; 0x09
    c0ac:	41 15       	cp	r20, r1
    c0ae:	51 05       	cpc	r21, r1
    c0b0:	61 05       	cpc	r22, r1
    c0b2:	71 05       	cpc	r23, r1
    c0b4:	d1 f4       	brne	.+52     	; 0xc0ea <f_lseek+0x3b2>
    c0b6:	40 e0       	ldi	r20, 0x00	; 0
    c0b8:	50 e0       	ldi	r21, 0x00	; 0
    c0ba:	ba 01       	movw	r22, r20
    c0bc:	c1 01       	movw	r24, r2
    c0be:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <create_chain>
    c0c2:	ab 01       	movw	r20, r22
    c0c4:	bc 01       	movw	r22, r24
    c0c6:	41 30       	cpi	r20, 0x01	; 1
    c0c8:	51 05       	cpc	r21, r1
    c0ca:	61 05       	cpc	r22, r1
    c0cc:	71 05       	cpc	r23, r1
    c0ce:	09 f4       	brne	.+2      	; 0xc0d2 <f_lseek+0x39a>
    c0d0:	91 ce       	rjmp	.-734    	; 0xbdf4 <f_lseek+0xbc>
    c0d2:	4f 3f       	cpi	r20, 0xFF	; 255
    c0d4:	ff ef       	ldi	r31, 0xFF	; 255
    c0d6:	5f 07       	cpc	r21, r31
    c0d8:	6f 07       	cpc	r22, r31
    c0da:	7f 07       	cpc	r23, r31
    c0dc:	09 f4       	brne	.+2      	; 0xc0e0 <f_lseek+0x3a8>
    c0de:	92 ce       	rjmp	.-732    	; 0xbe04 <f_lseek+0xcc>
    c0e0:	f1 01       	movw	r30, r2
    c0e2:	46 83       	std	Z+6, r20	; 0x06
    c0e4:	57 83       	std	Z+7, r21	; 0x07
    c0e6:	60 87       	std	Z+8, r22	; 0x08
    c0e8:	71 87       	std	Z+9, r23	; 0x09
    c0ea:	f1 01       	movw	r30, r2
    c0ec:	44 8b       	std	Z+20, r20	; 0x14
    c0ee:	55 8b       	std	Z+21, r21	; 0x15
    c0f0:	66 8b       	std	Z+22, r22	; 0x16
    c0f2:	77 8b       	std	Z+23, r23	; 0x17
    c0f4:	41 15       	cp	r20, r1
    c0f6:	51 05       	cpc	r21, r1
    c0f8:	61 05       	cpc	r22, r1
    c0fa:	71 05       	cpc	r23, r1
    c0fc:	09 f0       	breq	.+2      	; 0xc100 <f_lseek+0x3c8>
    c0fe:	40 c0       	rjmp	.+128    	; 0xc180 <f_lseek+0x448>
    c100:	c1 2c       	mov	r12, r1
    c102:	d1 2c       	mov	r13, r1
    c104:	76 01       	movw	r14, r12
    c106:	79 c0       	rjmp	.+242    	; 0xc1fa <f_lseek+0x4c2>
    c108:	c8 18       	sub	r12, r8
    c10a:	d9 08       	sbc	r13, r9
    c10c:	ea 08       	sbc	r14, r10
    c10e:	fb 08       	sbc	r15, r11
    c110:	f1 01       	movw	r30, r2
    c112:	80 89       	ldd	r24, Z+16	; 0x10
    c114:	91 89       	ldd	r25, Z+17	; 0x11
    c116:	a2 89       	ldd	r26, Z+18	; 0x12
    c118:	b3 89       	ldd	r27, Z+19	; 0x13
    c11a:	88 0d       	add	r24, r8
    c11c:	99 1d       	adc	r25, r9
    c11e:	aa 1d       	adc	r26, r10
    c120:	bb 1d       	adc	r27, r11
    c122:	80 8b       	std	Z+16, r24	; 0x10
    c124:	91 8b       	std	Z+17, r25	; 0x11
    c126:	a2 8b       	std	Z+18, r26	; 0x12
    c128:	b3 8b       	std	Z+19, r27	; 0x13
    c12a:	86 85       	ldd	r24, Z+14	; 0x0e
    c12c:	81 ff       	sbrs	r24, 1
    c12e:	2f c0       	rjmp	.+94     	; 0xc18e <f_lseek+0x456>
    c130:	c1 01       	movw	r24, r2
    c132:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <create_chain>
    c136:	ab 01       	movw	r20, r22
    c138:	bc 01       	movw	r22, r24
    c13a:	41 15       	cp	r20, r1
    c13c:	51 05       	cpc	r21, r1
    c13e:	61 05       	cpc	r22, r1
    c140:	71 05       	cpc	r23, r1
    c142:	61 f1       	breq	.+88     	; 0xc19c <f_lseek+0x464>
    c144:	4f 3f       	cpi	r20, 0xFF	; 255
    c146:	bf ef       	ldi	r27, 0xFF	; 255
    c148:	5b 07       	cpc	r21, r27
    c14a:	6b 07       	cpc	r22, r27
    c14c:	7b 07       	cpc	r23, r27
    c14e:	09 f4       	brne	.+2      	; 0xc152 <f_lseek+0x41a>
    c150:	59 ce       	rjmp	.-846    	; 0xbe04 <f_lseek+0xcc>
    c152:	42 30       	cpi	r20, 0x02	; 2
    c154:	51 05       	cpc	r21, r1
    c156:	61 05       	cpc	r22, r1
    c158:	71 05       	cpc	r23, r1
    c15a:	08 f4       	brcc	.+2      	; 0xc15e <f_lseek+0x426>
    c15c:	4b ce       	rjmp	.-874    	; 0xbdf4 <f_lseek+0xbc>
    c15e:	e9 81       	ldd	r30, Y+1	; 0x01
    c160:	fa 81       	ldd	r31, Y+2	; 0x02
    c162:	81 8d       	ldd	r24, Z+25	; 0x19
    c164:	92 8d       	ldd	r25, Z+26	; 0x1a
    c166:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c168:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c16a:	48 17       	cp	r20, r24
    c16c:	59 07       	cpc	r21, r25
    c16e:	6a 07       	cpc	r22, r26
    c170:	7b 07       	cpc	r23, r27
    c172:	08 f0       	brcs	.+2      	; 0xc176 <f_lseek+0x43e>
    c174:	3f ce       	rjmp	.-898    	; 0xbdf4 <f_lseek+0xbc>
    c176:	f1 01       	movw	r30, r2
    c178:	44 8b       	std	Z+20, r20	; 0x14
    c17a:	55 8b       	std	Z+21, r21	; 0x15
    c17c:	66 8b       	std	Z+22, r22	; 0x16
    c17e:	77 8b       	std	Z+23, r23	; 0x17
    c180:	8c 14       	cp	r8, r12
    c182:	9d 04       	cpc	r9, r13
    c184:	ae 04       	cpc	r10, r14
    c186:	bf 04       	cpc	r11, r15
    c188:	08 f4       	brcc	.+2      	; 0xc18c <f_lseek+0x454>
    c18a:	be cf       	rjmp	.-132    	; 0xc108 <f_lseek+0x3d0>
    c18c:	0a c0       	rjmp	.+20     	; 0xc1a2 <f_lseek+0x46a>
    c18e:	80 81       	ld	r24, Z
    c190:	91 81       	ldd	r25, Z+1	; 0x01
    c192:	0e 94 66 4d 	call	0x9acc	; 0x9acc <get_fat.isra.9>
    c196:	ab 01       	movw	r20, r22
    c198:	bc 01       	movw	r22, r24
    c19a:	d4 cf       	rjmp	.-88     	; 0xc144 <f_lseek+0x40c>
    c19c:	c1 2c       	mov	r12, r1
    c19e:	d1 2c       	mov	r13, r1
    c1a0:	76 01       	movw	r14, r12
    c1a2:	f1 01       	movw	r30, r2
    c1a4:	80 89       	ldd	r24, Z+16	; 0x10
    c1a6:	91 89       	ldd	r25, Z+17	; 0x11
    c1a8:	a2 89       	ldd	r26, Z+18	; 0x12
    c1aa:	b3 89       	ldd	r27, Z+19	; 0x13
    c1ac:	8c 0d       	add	r24, r12
    c1ae:	9d 1d       	adc	r25, r13
    c1b0:	ae 1d       	adc	r26, r14
    c1b2:	bf 1d       	adc	r27, r15
    c1b4:	80 8b       	std	Z+16, r24	; 0x10
    c1b6:	91 8b       	std	Z+17, r25	; 0x11
    c1b8:	a2 8b       	std	Z+18, r26	; 0x12
    c1ba:	b3 8b       	std	Z+19, r27	; 0x13
    c1bc:	d7 01       	movw	r26, r14
    c1be:	c6 01       	movw	r24, r12
    c1c0:	91 70       	andi	r25, 0x01	; 1
    c1c2:	aa 27       	eor	r26, r26
    c1c4:	bb 27       	eor	r27, r27
    c1c6:	89 2b       	or	r24, r25
    c1c8:	8a 2b       	or	r24, r26
    c1ca:	8b 2b       	or	r24, r27
    c1cc:	09 f4       	brne	.+2      	; 0xc1d0 <f_lseek+0x498>
    c1ce:	98 cf       	rjmp	.-208    	; 0xc100 <f_lseek+0x3c8>
    c1d0:	89 81       	ldd	r24, Y+1	; 0x01
    c1d2:	9a 81       	ldd	r25, Y+2	; 0x02
    c1d4:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    c1d8:	61 15       	cp	r22, r1
    c1da:	71 05       	cpc	r23, r1
    c1dc:	81 05       	cpc	r24, r1
    c1de:	91 05       	cpc	r25, r1
    c1e0:	09 f4       	brne	.+2      	; 0xc1e4 <f_lseek+0x4ac>
    c1e2:	08 ce       	rjmp	.-1008   	; 0xbdf4 <f_lseek+0xbc>
    c1e4:	29 e0       	ldi	r18, 0x09	; 9
    c1e6:	f6 94       	lsr	r15
    c1e8:	e7 94       	ror	r14
    c1ea:	d7 94       	ror	r13
    c1ec:	c7 94       	ror	r12
    c1ee:	2a 95       	dec	r18
    c1f0:	d1 f7       	brne	.-12     	; 0xc1e6 <f_lseek+0x4ae>
    c1f2:	c6 0e       	add	r12, r22
    c1f4:	d7 1e       	adc	r13, r23
    c1f6:	e8 1e       	adc	r14, r24
    c1f8:	f9 1e       	adc	r15, r25
    c1fa:	f1 01       	movw	r30, r2
    c1fc:	80 89       	ldd	r24, Z+16	; 0x10
    c1fe:	91 89       	ldd	r25, Z+17	; 0x11
    c200:	a2 89       	ldd	r26, Z+18	; 0x12
    c202:	b3 89       	ldd	r27, Z+19	; 0x13
    c204:	42 85       	ldd	r20, Z+10	; 0x0a
    c206:	53 85       	ldd	r21, Z+11	; 0x0b
    c208:	64 85       	ldd	r22, Z+12	; 0x0c
    c20a:	75 85       	ldd	r23, Z+13	; 0x0d
    c20c:	48 17       	cp	r20, r24
    c20e:	59 07       	cpc	r21, r25
    c210:	6a 07       	cpc	r22, r26
    c212:	7b 07       	cpc	r23, r27
    c214:	38 f4       	brcc	.+14     	; 0xc224 <f_lseek+0x4ec>
    c216:	82 87       	std	Z+10, r24	; 0x0a
    c218:	93 87       	std	Z+11, r25	; 0x0b
    c21a:	a4 87       	std	Z+12, r26	; 0x0c
    c21c:	b5 87       	std	Z+13, r27	; 0x0d
    c21e:	26 85       	ldd	r18, Z+14	; 0x0e
    c220:	20 64       	ori	r18, 0x40	; 64
    c222:	26 87       	std	Z+14, r18	; 0x0e
    c224:	91 70       	andi	r25, 0x01	; 1
    c226:	aa 27       	eor	r26, r26
    c228:	bb 27       	eor	r27, r27
    c22a:	89 2b       	or	r24, r25
    c22c:	8a 2b       	or	r24, r26
    c22e:	8b 2b       	or	r24, r27
    c230:	79 f1       	breq	.+94     	; 0xc290 <f_lseek+0x558>
    c232:	f1 01       	movw	r30, r2
    c234:	20 8d       	ldd	r18, Z+24	; 0x18
    c236:	31 8d       	ldd	r19, Z+25	; 0x19
    c238:	42 8d       	ldd	r20, Z+26	; 0x1a
    c23a:	53 8d       	ldd	r21, Z+27	; 0x1b
    c23c:	2c 15       	cp	r18, r12
    c23e:	3d 05       	cpc	r19, r13
    c240:	4e 05       	cpc	r20, r14
    c242:	5f 05       	cpc	r21, r15
    c244:	29 f1       	breq	.+74     	; 0xc290 <f_lseek+0x558>
    c246:	86 85       	ldd	r24, Z+14	; 0x0e
    c248:	b1 01       	movw	r22, r2
    c24a:	6c 5d       	subi	r22, 0xDC	; 220
    c24c:	7f 4f       	sbci	r23, 0xFF	; 255
    c24e:	5b 01       	movw	r10, r22
    c250:	87 ff       	sbrs	r24, 7
    c252:	0d c0       	rjmp	.+26     	; 0xc26e <f_lseek+0x536>
    c254:	e9 81       	ldd	r30, Y+1	; 0x01
    c256:	fa 81       	ldd	r31, Y+2	; 0x02
    c258:	01 e0       	ldi	r16, 0x01	; 1
    c25a:	10 e0       	ldi	r17, 0x00	; 0
    c25c:	81 81       	ldd	r24, Z+1	; 0x01
    c25e:	aa d6       	rcall	.+3412   	; 0xcfb4 <disk_write>
    c260:	89 2b       	or	r24, r25
    c262:	09 f0       	breq	.+2      	; 0xc266 <f_lseek+0x52e>
    c264:	cf cd       	rjmp	.-1122   	; 0xbe04 <f_lseek+0xcc>
    c266:	f1 01       	movw	r30, r2
    c268:	86 85       	ldd	r24, Z+14	; 0x0e
    c26a:	8f 77       	andi	r24, 0x7F	; 127
    c26c:	86 87       	std	Z+14, r24	; 0x0e
    c26e:	e9 81       	ldd	r30, Y+1	; 0x01
    c270:	fa 81       	ldd	r31, Y+2	; 0x02
    c272:	01 e0       	ldi	r16, 0x01	; 1
    c274:	10 e0       	ldi	r17, 0x00	; 0
    c276:	a7 01       	movw	r20, r14
    c278:	96 01       	movw	r18, r12
    c27a:	b5 01       	movw	r22, r10
    c27c:	81 81       	ldd	r24, Z+1	; 0x01
    c27e:	8a d6       	rcall	.+3348   	; 0xcf94 <disk_read>
    c280:	89 2b       	or	r24, r25
    c282:	09 f0       	breq	.+2      	; 0xc286 <f_lseek+0x54e>
    c284:	bf cd       	rjmp	.-1154   	; 0xbe04 <f_lseek+0xcc>
    c286:	f1 01       	movw	r30, r2
    c288:	c0 8e       	std	Z+24, r12	; 0x18
    c28a:	d1 8e       	std	Z+25, r13	; 0x19
    c28c:	e2 8e       	std	Z+26, r14	; 0x1a
    c28e:	f3 8e       	std	Z+27, r15	; 0x1b
    c290:	80 e0       	ldi	r24, 0x00	; 0
    c292:	bb cd       	rjmp	.-1162   	; 0xbe0a <f_lseek+0xd2>
    c294:	81 e1       	ldi	r24, 0x11	; 17
    c296:	b9 cd       	rjmp	.-1166   	; 0xbe0a <f_lseek+0xd2>
    c298:	80 e0       	ldi	r24, 0x00	; 0
    c29a:	90 e0       	ldi	r25, 0x00	; 0
    c29c:	dc 01       	movw	r26, r24
    c29e:	c1 2c       	mov	r12, r1
    c2a0:	d1 2c       	mov	r13, r1
    c2a2:	76 01       	movw	r14, r12
    c2a4:	bf cf       	rjmp	.-130    	; 0xc224 <f_lseek+0x4ec>
    c2a6:	2a 96       	adiw	r28, 0x0a	; 10
    c2a8:	e2 e1       	ldi	r30, 0x12	; 18
    c2aa:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000c2ae <f_opendir>:
    c2ae:	a4 e0       	ldi	r26, 0x04	; 4
    c2b0:	b0 e0       	ldi	r27, 0x00	; 0
    c2b2:	ed e5       	ldi	r30, 0x5D	; 93
    c2b4:	f1 e6       	ldi	r31, 0x61	; 97
    c2b6:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    c2ba:	7c 83       	std	Y+4, r23	; 0x04
    c2bc:	6b 83       	std	Y+3, r22	; 0x03
    c2be:	00 97       	sbiw	r24, 0x00	; 0
    c2c0:	09 f4       	brne	.+2      	; 0xc2c4 <f_opendir+0x16>
    c2c2:	48 c0       	rjmp	.+144    	; 0xc354 <f_opendir+0xa6>
    c2c4:	8c 01       	movw	r16, r24
    c2c6:	40 e0       	ldi	r20, 0x00	; 0
    c2c8:	be 01       	movw	r22, r28
    c2ca:	6f 5f       	subi	r22, 0xFF	; 255
    c2cc:	7f 4f       	sbci	r23, 0xFF	; 255
    c2ce:	ce 01       	movw	r24, r28
    c2d0:	03 96       	adiw	r24, 0x03	; 3
    c2d2:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    c2d6:	7c 01       	movw	r14, r24
    c2d8:	89 2b       	or	r24, r25
    c2da:	b9 f5       	brne	.+110    	; 0xc34a <f_opendir+0x9c>
    c2dc:	89 81       	ldd	r24, Y+1	; 0x01
    c2de:	9a 81       	ldd	r25, Y+2	; 0x02
    c2e0:	f8 01       	movw	r30, r16
    c2e2:	91 83       	std	Z+1, r25	; 0x01
    c2e4:	80 83       	st	Z, r24
    c2e6:	80 e0       	ldi	r24, 0x00	; 0
    c2e8:	92 e0       	ldi	r25, 0x02	; 2
    c2ea:	98 d5       	rcall	.+2864   	; 0xce1c <ff_memalloc>
    c2ec:	6c 01       	movw	r12, r24
    c2ee:	00 97       	sbiw	r24, 0x00	; 0
    c2f0:	99 f1       	breq	.+102    	; 0xc358 <f_opendir+0xaa>
    c2f2:	e9 81       	ldd	r30, Y+1	; 0x01
    c2f4:	fa 81       	ldd	r31, Y+2	; 0x02
    c2f6:	94 87       	std	Z+12, r25	; 0x0c
    c2f8:	83 87       	std	Z+11, r24	; 0x0b
    c2fa:	6b 81       	ldd	r22, Y+3	; 0x03
    c2fc:	7c 81       	ldd	r23, Y+4	; 0x04
    c2fe:	c8 01       	movw	r24, r16
    c300:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    c304:	7c 01       	movw	r14, r24
    c306:	89 2b       	or	r24, r25
    c308:	b9 f4       	brne	.+46     	; 0xc338 <f_opendir+0x8a>
    c30a:	f8 01       	movw	r30, r16
    c30c:	87 a1       	ldd	r24, Z+39	; 0x27
    c30e:	87 fd       	sbrc	r24, 7
    c310:	28 c0       	rjmp	.+80     	; 0xc362 <f_opendir+0xb4>
    c312:	84 81       	ldd	r24, Z+4	; 0x04
    c314:	84 ff       	sbrs	r24, 4
    c316:	0d c0       	rjmp	.+26     	; 0xc332 <f_opendir+0x84>
    c318:	62 8d       	ldd	r22, Z+26	; 0x1a
    c31a:	73 8d       	ldd	r23, Z+27	; 0x1b
    c31c:	e9 81       	ldd	r30, Y+1	; 0x01
    c31e:	fa 81       	ldd	r31, Y+2	; 0x02
    c320:	80 81       	ld	r24, Z
    c322:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    c326:	f8 01       	movw	r30, r16
    c328:	66 83       	std	Z+6, r22	; 0x06
    c32a:	77 83       	std	Z+7, r23	; 0x07
    c32c:	80 87       	std	Z+8, r24	; 0x08
    c32e:	91 87       	std	Z+9, r25	; 0x09
    c330:	18 c0       	rjmp	.+48     	; 0xc362 <f_opendir+0xb4>
    c332:	95 e0       	ldi	r25, 0x05	; 5
    c334:	e9 2e       	mov	r14, r25
    c336:	f1 2c       	mov	r15, r1
    c338:	c6 01       	movw	r24, r12
    c33a:	73 d5       	rcall	.+2790   	; 0xce22 <ff_memfree>
    c33c:	f4 e0       	ldi	r31, 0x04	; 4
    c33e:	ef 16       	cp	r14, r31
    c340:	f1 04       	cpc	r15, r1
    c342:	f1 f0       	breq	.+60     	; 0xc380 <f_opendir+0xd2>
    c344:	e1 14       	cp	r14, r1
    c346:	f1 04       	cpc	r15, r1
    c348:	49 f0       	breq	.+18     	; 0xc35c <f_opendir+0xae>
    c34a:	f8 01       	movw	r30, r16
    c34c:	11 82       	std	Z+1, r1	; 0x01
    c34e:	10 82       	st	Z, r1
    c350:	c7 01       	movw	r24, r14
    c352:	1a c0       	rjmp	.+52     	; 0xc388 <f_opendir+0xda>
    c354:	89 e0       	ldi	r24, 0x09	; 9
    c356:	03 c0       	rjmp	.+6      	; 0xc35e <f_opendir+0xb0>
    c358:	81 e1       	ldi	r24, 0x11	; 17
    c35a:	01 c0       	rjmp	.+2      	; 0xc35e <f_opendir+0xb0>
    c35c:	80 e0       	ldi	r24, 0x00	; 0
    c35e:	90 e0       	ldi	r25, 0x00	; 0
    c360:	13 c0       	rjmp	.+38     	; 0xc388 <f_opendir+0xda>
    c362:	e9 81       	ldd	r30, Y+1	; 0x01
    c364:	fa 81       	ldd	r31, Y+2	; 0x02
    c366:	85 81       	ldd	r24, Z+5	; 0x05
    c368:	96 81       	ldd	r25, Z+6	; 0x06
    c36a:	f8 01       	movw	r30, r16
    c36c:	93 83       	std	Z+3, r25	; 0x03
    c36e:	82 83       	std	Z+2, r24	; 0x02
    c370:	40 e0       	ldi	r20, 0x00	; 0
    c372:	50 e0       	ldi	r21, 0x00	; 0
    c374:	ba 01       	movw	r22, r20
    c376:	c8 01       	movw	r24, r16
    c378:	0e 94 1a 4e 	call	0x9c34	; 0x9c34 <dir_sdi>
    c37c:	7c 01       	movw	r14, r24
    c37e:	dc cf       	rjmp	.-72     	; 0xc338 <f_opendir+0x8a>
    c380:	85 e0       	ldi	r24, 0x05	; 5
    c382:	e8 2e       	mov	r14, r24
    c384:	f1 2c       	mov	r15, r1
    c386:	e1 cf       	rjmp	.-62     	; 0xc34a <f_opendir+0x9c>
    c388:	24 96       	adiw	r28, 0x04	; 4
    c38a:	e8 e0       	ldi	r30, 0x08	; 8
    c38c:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000c390 <f_closedir>:
    c390:	a2 e0       	ldi	r26, 0x02	; 2
    c392:	b0 e0       	ldi	r27, 0x00	; 0
    c394:	ee ec       	ldi	r30, 0xCE	; 206
    c396:	f1 e6       	ldi	r31, 0x61	; 97
    c398:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    c39c:	8c 01       	movw	r16, r24
    c39e:	be 01       	movw	r22, r28
    c3a0:	6f 5f       	subi	r22, 0xFF	; 255
    c3a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c3a4:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    c3a8:	00 97       	sbiw	r24, 0x00	; 0
    c3aa:	19 f4       	brne	.+6      	; 0xc3b2 <f_closedir+0x22>
    c3ac:	f8 01       	movw	r30, r16
    c3ae:	11 82       	std	Z+1, r1	; 0x01
    c3b0:	10 82       	st	Z, r1
    c3b2:	22 96       	adiw	r28, 0x02	; 2
    c3b4:	e4 e0       	ldi	r30, 0x04	; 4
    c3b6:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0000c3ba <f_readdir>:
    c3ba:	a2 e0       	ldi	r26, 0x02	; 2
    c3bc:	b0 e0       	ldi	r27, 0x00	; 0
    c3be:	e3 ee       	ldi	r30, 0xE3	; 227
    c3c0:	f1 e6       	ldi	r31, 0x61	; 97
    c3c2:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
    c3c6:	7c 01       	movw	r14, r24
    c3c8:	5b 01       	movw	r10, r22
    c3ca:	be 01       	movw	r22, r28
    c3cc:	6f 5f       	subi	r22, 0xFF	; 255
    c3ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c3d0:	0e 94 a8 46 	call	0x8d50	; 0x8d50 <validate>
    c3d4:	00 97       	sbiw	r24, 0x00	; 0
    c3d6:	89 f5       	brne	.+98     	; 0xc43a <f_readdir+0x80>
    c3d8:	a1 14       	cp	r10, r1
    c3da:	b1 04       	cpc	r11, r1
    c3dc:	39 f4       	brne	.+14     	; 0xc3ec <f_readdir+0x32>
    c3de:	40 e0       	ldi	r20, 0x00	; 0
    c3e0:	50 e0       	ldi	r21, 0x00	; 0
    c3e2:	ba 01       	movw	r22, r20
    c3e4:	c7 01       	movw	r24, r14
    c3e6:	0e 94 1a 4e 	call	0x9c34	; 0x9c34 <dir_sdi>
    c3ea:	27 c0       	rjmp	.+78     	; 0xc43a <f_readdir+0x80>
    c3ec:	80 e0       	ldi	r24, 0x00	; 0
    c3ee:	92 e0       	ldi	r25, 0x02	; 2
    c3f0:	15 d5       	rcall	.+2602   	; 0xce1c <ff_memalloc>
    c3f2:	6c 01       	movw	r12, r24
    c3f4:	00 97       	sbiw	r24, 0x00	; 0
    c3f6:	f9 f0       	breq	.+62     	; 0xc436 <f_readdir+0x7c>
    c3f8:	e9 81       	ldd	r30, Y+1	; 0x01
    c3fa:	fa 81       	ldd	r31, Y+2	; 0x02
    c3fc:	94 87       	std	Z+12, r25	; 0x0c
    c3fe:	83 87       	std	Z+11, r24	; 0x0b
    c400:	60 e0       	ldi	r22, 0x00	; 0
    c402:	70 e0       	ldi	r23, 0x00	; 0
    c404:	c7 01       	movw	r24, r14
    c406:	0e 94 b3 51 	call	0xa366	; 0xa366 <dir_read>
    c40a:	8c 01       	movw	r16, r24
    c40c:	8b 7f       	andi	r24, 0xFB	; 251
    c40e:	89 2b       	or	r24, r25
    c410:	71 f4       	brne	.+28     	; 0xc42e <f_readdir+0x74>
    c412:	b5 01       	movw	r22, r10
    c414:	c7 01       	movw	r24, r14
    c416:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <get_fileinfo>
    c41a:	60 e0       	ldi	r22, 0x00	; 0
    c41c:	70 e0       	ldi	r23, 0x00	; 0
    c41e:	c7 01       	movw	r24, r14
    c420:	0e 94 92 50 	call	0xa124	; 0xa124 <dir_next>
    c424:	8c 01       	movw	r16, r24
    c426:	04 97       	sbiw	r24, 0x04	; 4
    c428:	11 f4       	brne	.+4      	; 0xc42e <f_readdir+0x74>
    c42a:	00 e0       	ldi	r16, 0x00	; 0
    c42c:	10 e0       	ldi	r17, 0x00	; 0
    c42e:	c6 01       	movw	r24, r12
    c430:	f8 d4       	rcall	.+2544   	; 0xce22 <ff_memfree>
    c432:	c8 01       	movw	r24, r16
    c434:	02 c0       	rjmp	.+4      	; 0xc43a <f_readdir+0x80>
    c436:	81 e1       	ldi	r24, 0x11	; 17
    c438:	90 e0       	ldi	r25, 0x00	; 0
    c43a:	22 96       	adiw	r28, 0x02	; 2
    c43c:	ea e0       	ldi	r30, 0x0A	; 10
    c43e:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0000c442 <f_stat>:
    c442:	a0 e3       	ldi	r26, 0x30	; 48
    c444:	b0 e0       	ldi	r27, 0x00	; 0
    c446:	e7 e2       	ldi	r30, 0x27	; 39
    c448:	f2 e6       	ldi	r31, 0x62	; 98
    c44a:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    c44e:	98 ab       	std	Y+48, r25	; 0x30
    c450:	8f a7       	std	Y+47, r24	; 0x2f
    c452:	6b 01       	movw	r12, r22
    c454:	40 e0       	ldi	r20, 0x00	; 0
    c456:	be 01       	movw	r22, r28
    c458:	6f 5f       	subi	r22, 0xFF	; 255
    c45a:	7f 4f       	sbci	r23, 0xFF	; 255
    c45c:	ce 01       	movw	r24, r28
    c45e:	8f 96       	adiw	r24, 0x2f	; 47
    c460:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    c464:	00 97       	sbiw	r24, 0x00	; 0
    c466:	39 f5       	brne	.+78     	; 0xc4b6 <f_stat+0x74>
    c468:	80 e0       	ldi	r24, 0x00	; 0
    c46a:	92 e0       	ldi	r25, 0x02	; 2
    c46c:	d7 d4       	rcall	.+2478   	; 0xce1c <ff_memalloc>
    c46e:	7c 01       	movw	r14, r24
    c470:	00 97       	sbiw	r24, 0x00	; 0
    c472:	f9 f0       	breq	.+62     	; 0xc4b2 <f_stat+0x70>
    c474:	e9 81       	ldd	r30, Y+1	; 0x01
    c476:	fa 81       	ldd	r31, Y+2	; 0x02
    c478:	94 87       	std	Z+12, r25	; 0x0c
    c47a:	83 87       	std	Z+11, r24	; 0x0b
    c47c:	6f a5       	ldd	r22, Y+47	; 0x2f
    c47e:	78 a9       	ldd	r23, Y+48	; 0x30
    c480:	ce 01       	movw	r24, r28
    c482:	01 96       	adiw	r24, 0x01	; 1
    c484:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    c488:	8c 01       	movw	r16, r24
    c48a:	89 2b       	or	r24, r25
    c48c:	71 f4       	brne	.+28     	; 0xc4aa <f_stat+0x68>
    c48e:	88 a5       	ldd	r24, Y+40	; 0x28
    c490:	87 fd       	sbrc	r24, 7
    c492:	09 c0       	rjmp	.+18     	; 0xc4a6 <f_stat+0x64>
    c494:	c1 14       	cp	r12, r1
    c496:	d1 04       	cpc	r13, r1
    c498:	41 f0       	breq	.+16     	; 0xc4aa <f_stat+0x68>
    c49a:	b6 01       	movw	r22, r12
    c49c:	ce 01       	movw	r24, r28
    c49e:	01 96       	adiw	r24, 0x01	; 1
    c4a0:	0e 94 d4 46 	call	0x8da8	; 0x8da8 <get_fileinfo>
    c4a4:	02 c0       	rjmp	.+4      	; 0xc4aa <f_stat+0x68>
    c4a6:	06 e0       	ldi	r16, 0x06	; 6
    c4a8:	10 e0       	ldi	r17, 0x00	; 0
    c4aa:	c7 01       	movw	r24, r14
    c4ac:	ba d4       	rcall	.+2420   	; 0xce22 <ff_memfree>
    c4ae:	c8 01       	movw	r24, r16
    c4b0:	02 c0       	rjmp	.+4      	; 0xc4b6 <f_stat+0x74>
    c4b2:	81 e1       	ldi	r24, 0x11	; 17
    c4b4:	90 e0       	ldi	r25, 0x00	; 0
    c4b6:	e0 96       	adiw	r28, 0x30	; 48
    c4b8:	e8 e0       	ldi	r30, 0x08	; 8
    c4ba:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000c4be <f_getfree>:
    c4be:	aa e0       	ldi	r26, 0x0A	; 10
    c4c0:	b0 e0       	ldi	r27, 0x00	; 0
    c4c2:	e5 e6       	ldi	r30, 0x65	; 101
    c4c4:	f2 e6       	ldi	r31, 0x62	; 98
    c4c6:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
    c4ca:	9c 83       	std	Y+4, r25	; 0x04
    c4cc:	8b 83       	std	Y+3, r24	; 0x03
    c4ce:	7e 83       	std	Y+6, r23	; 0x06
    c4d0:	6d 83       	std	Y+5, r22	; 0x05
    c4d2:	7a 01       	movw	r14, r20
    c4d4:	40 e0       	ldi	r20, 0x00	; 0
    c4d6:	be 01       	movw	r22, r28
    c4d8:	6f 5f       	subi	r22, 0xFF	; 255
    c4da:	7f 4f       	sbci	r23, 0xFF	; 255
    c4dc:	ce 01       	movw	r24, r28
    c4de:	03 96       	adiw	r24, 0x03	; 3
    c4e0:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    c4e4:	8c 01       	movw	r16, r24
    c4e6:	89 2b       	or	r24, r25
    c4e8:	09 f0       	breq	.+2      	; 0xc4ec <f_getfree+0x2e>
    c4ea:	c4 c0       	rjmp	.+392    	; 0xc674 <f_getfree+0x1b6>
    c4ec:	69 80       	ldd	r6, Y+1	; 0x01
    c4ee:	7a 80       	ldd	r7, Y+2	; 0x02
    c4f0:	d7 01       	movw	r26, r14
    c4f2:	6d 92       	st	X+, r6
    c4f4:	7c 92       	st	X, r7
    c4f6:	f3 01       	movw	r30, r6
    c4f8:	81 89       	ldd	r24, Z+17	; 0x11
    c4fa:	92 89       	ldd	r25, Z+18	; 0x12
    c4fc:	a3 89       	ldd	r26, Z+19	; 0x13
    c4fe:	b4 89       	ldd	r27, Z+20	; 0x14
    c500:	81 8c       	ldd	r8, Z+25	; 0x19
    c502:	92 8c       	ldd	r9, Z+26	; 0x1a
    c504:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c506:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c508:	b5 01       	movw	r22, r10
    c50a:	a4 01       	movw	r20, r8
    c50c:	42 50       	subi	r20, 0x02	; 2
    c50e:	51 09       	sbc	r21, r1
    c510:	61 09       	sbc	r22, r1
    c512:	71 09       	sbc	r23, r1
    c514:	48 17       	cp	r20, r24
    c516:	59 07       	cpc	r21, r25
    c518:	6a 07       	cpc	r22, r26
    c51a:	7b 07       	cpc	r23, r27
    c51c:	38 f0       	brcs	.+14     	; 0xc52c <f_getfree+0x6e>
    c51e:	ed 81       	ldd	r30, Y+5	; 0x05
    c520:	fe 81       	ldd	r31, Y+6	; 0x06
    c522:	80 83       	st	Z, r24
    c524:	91 83       	std	Z+1, r25	; 0x01
    c526:	a2 83       	std	Z+2, r26	; 0x02
    c528:	b3 83       	std	Z+3, r27	; 0x03
    c52a:	a4 c0       	rjmp	.+328    	; 0xc674 <f_getfree+0x1b6>
    c52c:	80 81       	ld	r24, Z
    c52e:	81 30       	cpi	r24, 0x01	; 1
    c530:	a1 f5       	brne	.+104    	; 0xc59a <f_getfree+0xdc>
    c532:	82 e0       	ldi	r24, 0x02	; 2
    c534:	88 2e       	mov	r8, r24
    c536:	91 2c       	mov	r9, r1
    c538:	a1 2c       	mov	r10, r1
    c53a:	b1 2c       	mov	r11, r1
    c53c:	c1 2c       	mov	r12, r1
    c53e:	d1 2c       	mov	r13, r1
    c540:	76 01       	movw	r14, r12
    c542:	b5 01       	movw	r22, r10
    c544:	a4 01       	movw	r20, r8
    c546:	c3 01       	movw	r24, r6
    c548:	0e 94 66 4d 	call	0x9acc	; 0x9acc <get_fat.isra.9>
    c54c:	6f 3f       	cpi	r22, 0xFF	; 255
    c54e:	bf ef       	ldi	r27, 0xFF	; 255
    c550:	7b 07       	cpc	r23, r27
    c552:	8b 07       	cpc	r24, r27
    c554:	9b 07       	cpc	r25, r27
    c556:	09 f4       	brne	.+2      	; 0xc55a <f_getfree+0x9c>
    c558:	76 c0       	rjmp	.+236    	; 0xc646 <f_getfree+0x188>
    c55a:	61 30       	cpi	r22, 0x01	; 1
    c55c:	71 05       	cpc	r23, r1
    c55e:	81 05       	cpc	r24, r1
    c560:	91 05       	cpc	r25, r1
    c562:	09 f4       	brne	.+2      	; 0xc566 <f_getfree+0xa8>
    c564:	73 c0       	rjmp	.+230    	; 0xc64c <f_getfree+0x18e>
    c566:	67 2b       	or	r22, r23
    c568:	68 2b       	or	r22, r24
    c56a:	69 2b       	or	r22, r25
    c56c:	29 f4       	brne	.+10     	; 0xc578 <f_getfree+0xba>
    c56e:	ef ef       	ldi	r30, 0xFF	; 255
    c570:	ce 1a       	sub	r12, r30
    c572:	de 0a       	sbc	r13, r30
    c574:	ee 0a       	sbc	r14, r30
    c576:	fe 0a       	sbc	r15, r30
    c578:	ff ef       	ldi	r31, 0xFF	; 255
    c57a:	8f 1a       	sub	r8, r31
    c57c:	9f 0a       	sbc	r9, r31
    c57e:	af 0a       	sbc	r10, r31
    c580:	bf 0a       	sbc	r11, r31
    c582:	e9 81       	ldd	r30, Y+1	; 0x01
    c584:	fa 81       	ldd	r31, Y+2	; 0x02
    c586:	81 8d       	ldd	r24, Z+25	; 0x19
    c588:	92 8d       	ldd	r25, Z+26	; 0x1a
    c58a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c58c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c58e:	88 16       	cp	r8, r24
    c590:	99 06       	cpc	r9, r25
    c592:	aa 06       	cpc	r10, r26
    c594:	bb 06       	cpc	r11, r27
    c596:	a8 f2       	brcs	.-86     	; 0xc542 <f_getfree+0x84>
    c598:	5d c0       	rjmp	.+186    	; 0xc654 <f_getfree+0x196>
    c59a:	f3 01       	movw	r30, r6
    c59c:	45 a0       	ldd	r4, Z+37	; 0x25
    c59e:	56 a0       	ldd	r5, Z+38	; 0x26
    c5a0:	67 a0       	ldd	r6, Z+39	; 0x27
    c5a2:	70 a4       	ldd	r7, Z+40	; 0x28
    c5a4:	21 2c       	mov	r2, r1
    c5a6:	31 2c       	mov	r3, r1
    c5a8:	c1 2c       	mov	r12, r1
    c5aa:	d1 2c       	mov	r13, r1
    c5ac:	76 01       	movw	r14, r12
    c5ae:	21 14       	cp	r2, r1
    c5b0:	31 04       	cpc	r3, r1
    c5b2:	b1 f4       	brne	.+44     	; 0xc5e0 <f_getfree+0x122>
    c5b4:	d3 01       	movw	r26, r6
    c5b6:	c2 01       	movw	r24, r4
    c5b8:	01 96       	adiw	r24, 0x01	; 1
    c5ba:	a1 1d       	adc	r26, r1
    c5bc:	b1 1d       	adc	r27, r1
    c5be:	8f 83       	std	Y+7, r24	; 0x07
    c5c0:	98 87       	std	Y+8, r25	; 0x08
    c5c2:	a9 87       	std	Y+9, r26	; 0x09
    c5c4:	ba 87       	std	Y+10, r27	; 0x0a
    c5c6:	b3 01       	movw	r22, r6
    c5c8:	a2 01       	movw	r20, r4
    c5ca:	89 81       	ldd	r24, Y+1	; 0x01
    c5cc:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ce:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    c5d2:	00 97       	sbiw	r24, 0x00	; 0
    c5d4:	09 f0       	breq	.+2      	; 0xc5d8 <f_getfree+0x11a>
    c5d6:	3d c0       	rjmp	.+122    	; 0xc652 <f_getfree+0x194>
    c5d8:	4f 80       	ldd	r4, Y+7	; 0x07
    c5da:	58 84       	ldd	r5, Y+8	; 0x08
    c5dc:	69 84       	ldd	r6, Y+9	; 0x09
    c5de:	7a 84       	ldd	r7, Y+10	; 0x0a
    c5e0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5e2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5e4:	80 81       	ld	r24, Z
    c5e6:	82 30       	cpi	r24, 0x02	; 2
    c5e8:	79 f4       	brne	.+30     	; 0xc608 <f_getfree+0x14a>
    c5ea:	e2 0d       	add	r30, r2
    c5ec:	f3 1d       	adc	r31, r3
    c5ee:	85 a9       	ldd	r24, Z+53	; 0x35
    c5f0:	96 a9       	ldd	r25, Z+54	; 0x36
    c5f2:	89 2b       	or	r24, r25
    c5f4:	29 f4       	brne	.+10     	; 0xc600 <f_getfree+0x142>
    c5f6:	9f ef       	ldi	r25, 0xFF	; 255
    c5f8:	c9 1a       	sub	r12, r25
    c5fa:	d9 0a       	sbc	r13, r25
    c5fc:	e9 0a       	sbc	r14, r25
    c5fe:	f9 0a       	sbc	r15, r25
    c600:	a2 e0       	ldi	r26, 0x02	; 2
    c602:	2a 0e       	add	r2, r26
    c604:	31 1c       	adc	r3, r1
    c606:	15 c0       	rjmp	.+42     	; 0xc632 <f_getfree+0x174>
    c608:	cf 01       	movw	r24, r30
    c60a:	c5 96       	adiw	r24, 0x35	; 53
    c60c:	82 0d       	add	r24, r2
    c60e:	93 1d       	adc	r25, r3
    c610:	0e 94 d6 45 	call	0x8bac	; 0x8bac <ld_dword>
    c614:	dc 01       	movw	r26, r24
    c616:	cb 01       	movw	r24, r22
    c618:	bf 70       	andi	r27, 0x0F	; 15
    c61a:	89 2b       	or	r24, r25
    c61c:	8a 2b       	or	r24, r26
    c61e:	8b 2b       	or	r24, r27
    c620:	29 f4       	brne	.+10     	; 0xc62c <f_getfree+0x16e>
    c622:	bf ef       	ldi	r27, 0xFF	; 255
    c624:	cb 1a       	sub	r12, r27
    c626:	db 0a       	sbc	r13, r27
    c628:	eb 0a       	sbc	r14, r27
    c62a:	fb 0a       	sbc	r15, r27
    c62c:	e4 e0       	ldi	r30, 0x04	; 4
    c62e:	2e 0e       	add	r2, r30
    c630:	31 1c       	adc	r3, r1
    c632:	f1 e0       	ldi	r31, 0x01	; 1
    c634:	3f 22       	and	r3, r31
    c636:	21 e0       	ldi	r18, 0x01	; 1
    c638:	82 1a       	sub	r8, r18
    c63a:	91 08       	sbc	r9, r1
    c63c:	a1 08       	sbc	r10, r1
    c63e:	b1 08       	sbc	r11, r1
    c640:	09 f0       	breq	.+2      	; 0xc644 <f_getfree+0x186>
    c642:	b5 cf       	rjmp	.-150    	; 0xc5ae <f_getfree+0xf0>
    c644:	07 c0       	rjmp	.+14     	; 0xc654 <f_getfree+0x196>
    c646:	01 e0       	ldi	r16, 0x01	; 1
    c648:	10 e0       	ldi	r17, 0x00	; 0
    c64a:	04 c0       	rjmp	.+8      	; 0xc654 <f_getfree+0x196>
    c64c:	02 e0       	ldi	r16, 0x02	; 2
    c64e:	10 e0       	ldi	r17, 0x00	; 0
    c650:	01 c0       	rjmp	.+2      	; 0xc654 <f_getfree+0x196>
    c652:	8c 01       	movw	r16, r24
    c654:	ad 81       	ldd	r26, Y+5	; 0x05
    c656:	be 81       	ldd	r27, Y+6	; 0x06
    c658:	cd 92       	st	X+, r12
    c65a:	dd 92       	st	X+, r13
    c65c:	ed 92       	st	X+, r14
    c65e:	fc 92       	st	X, r15
    c660:	13 97       	sbiw	r26, 0x03	; 3
    c662:	e9 81       	ldd	r30, Y+1	; 0x01
    c664:	fa 81       	ldd	r31, Y+2	; 0x02
    c666:	c1 8a       	std	Z+17, r12	; 0x11
    c668:	d2 8a       	std	Z+18, r13	; 0x12
    c66a:	e3 8a       	std	Z+19, r14	; 0x13
    c66c:	f4 8a       	std	Z+20, r15	; 0x14
    c66e:	84 81       	ldd	r24, Z+4	; 0x04
    c670:	81 60       	ori	r24, 0x01	; 1
    c672:	84 83       	std	Z+4, r24	; 0x04
    c674:	c8 01       	movw	r24, r16
    c676:	2a 96       	adiw	r28, 0x0a	; 10
    c678:	e2 e1       	ldi	r30, 0x12	; 18
    c67a:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0000c67e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c67e:	a0 e6       	ldi	r26, 0x60	; 96
    c680:	b0 e0       	ldi	r27, 0x00	; 0
    c682:	e5 e4       	ldi	r30, 0x45	; 69
    c684:	f3 e6       	ldi	r31, 0x63	; 99
    c686:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__prologue_saves__+0xe>
    c68a:	a1 96       	adiw	r28, 0x21	; 33
    c68c:	9f af       	std	Y+63, r25	; 0x3f
    c68e:	8e af       	std	Y+62, r24	; 0x3e
    c690:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c692:	42 e0       	ldi	r20, 0x02	; 2
    c694:	be 01       	movw	r22, r28
    c696:	63 5a       	subi	r22, 0xA3	; 163
    c698:	7f 4f       	sbci	r23, 0xFF	; 255
    c69a:	ce 01       	movw	r24, r28
    c69c:	81 5a       	subi	r24, 0xA1	; 161
    c69e:	9f 4f       	sbci	r25, 0xFF	; 255
    c6a0:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
	if (res == FR_OK) {
    c6a4:	00 97       	sbiw	r24, 0x00	; 0
    c6a6:	09 f0       	breq	.+2      	; 0xc6aa <f_unlink+0x2c>
    c6a8:	8c c0       	rjmp	.+280    	; 0xc7c2 <f_unlink+0x144>
		dj.obj.fs = fs;
    c6aa:	6f 96       	adiw	r28, 0x1f	; 31
    c6ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    c6ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    c6b0:	6f 97       	sbiw	r28, 0x1f	; 31
    c6b2:	98 ab       	std	Y+48, r25	; 0x30
    c6b4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c6b6:	80 e0       	ldi	r24, 0x00	; 0
    c6b8:	92 e0       	ldi	r25, 0x02	; 2
    c6ba:	b0 d3       	rcall	.+1888   	; 0xce1c <ff_memalloc>
    c6bc:	5c 01       	movw	r10, r24
    c6be:	00 97       	sbiw	r24, 0x00	; 0
    c6c0:	09 f4       	brne	.+2      	; 0xc6c4 <f_unlink+0x46>
    c6c2:	49 c0       	rjmp	.+146    	; 0xc756 <f_unlink+0xd8>
    c6c4:	6f 96       	adiw	r28, 0x1f	; 31
    c6c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    c6c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    c6ca:	6f 97       	sbiw	r28, 0x1f	; 31
    c6cc:	94 87       	std	Z+12, r25	; 0x0c
    c6ce:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c6d0:	a1 96       	adiw	r28, 0x21	; 33
    c6d2:	6e ad       	ldd	r22, Y+62	; 0x3e
    c6d4:	7f ad       	ldd	r23, Y+63	; 0x3f
    c6d6:	a1 97       	sbiw	r28, 0x21	; 33
    c6d8:	ce 01       	movw	r24, r28
    c6da:	8f 96       	adiw	r24, 0x2f	; 47
    c6dc:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    c6e0:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c6e2:	89 2b       	or	r24, r25
    c6e4:	a1 f5       	brne	.+104    	; 0xc74e <f_unlink+0xd0>
    c6e6:	67 96       	adiw	r28, 0x17	; 23
    c6e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    c6ea:	67 97       	sbiw	r28, 0x17	; 23
    c6ec:	85 fd       	sbrc	r24, 5
    c6ee:	36 c0       	rjmp	.+108    	; 0xc75c <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c6f0:	87 fd       	sbrc	r24, 7
    c6f2:	34 c0       	rjmp	.+104    	; 0xc75c <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c6f4:	9b a8       	ldd	r9, Y+51	; 0x33
    c6f6:	90 fc       	sbrc	r9, 0
    c6f8:	40 c0       	rjmp	.+128    	; 0xc77a <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c6fa:	6f 96       	adiw	r28, 0x1f	; 31
    c6fc:	0e ad       	ldd	r16, Y+62	; 0x3e
    c6fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    c700:	6f 97       	sbiw	r28, 0x1f	; 31
    c702:	2b 96       	adiw	r28, 0x0b	; 11
    c704:	6e ad       	ldd	r22, Y+62	; 0x3e
    c706:	7f ad       	ldd	r23, Y+63	; 0x3f
    c708:	2b 97       	sbiw	r28, 0x0b	; 11
    c70a:	f8 01       	movw	r30, r16
    c70c:	80 81       	ld	r24, Z
    c70e:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    c712:	6b 01       	movw	r12, r22
    c714:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c716:	94 fe       	sbrs	r9, 4
    c718:	33 c0       	rjmp	.+102    	; 0xc780 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c71a:	f8 01       	movw	r30, r16
    c71c:	85 89       	ldd	r24, Z+21	; 0x15
    c71e:	96 89       	ldd	r25, Z+22	; 0x16
    c720:	a7 89       	ldd	r26, Z+23	; 0x17
    c722:	b0 8d       	ldd	r27, Z+24	; 0x18
    c724:	c8 16       	cp	r12, r24
    c726:	d9 06       	cpc	r13, r25
    c728:	ea 06       	cpc	r14, r26
    c72a:	fb 06       	cpc	r15, r27
    c72c:	31 f1       	breq	.+76     	; 0xc77a <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c72e:	1a 83       	std	Y+2, r17	; 0x02
    c730:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c732:	cf 82       	std	Y+7, r12	; 0x07
    c734:	d8 86       	std	Y+8, r13	; 0x08
    c736:	e9 86       	std	Y+9, r14	; 0x09
    c738:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c73a:	40 e0       	ldi	r20, 0x00	; 0
    c73c:	50 e0       	ldi	r21, 0x00	; 0
    c73e:	ba 01       	movw	r22, r20
    c740:	ce 01       	movw	r24, r28
    c742:	01 96       	adiw	r24, 0x01	; 1
    c744:	0e 94 1a 4e 	call	0x9c34	; 0x9c34 <dir_sdi>
    c748:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c74a:	89 2b       	or	r24, r25
    c74c:	51 f0       	breq	.+20     	; 0xc762 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c74e:	c5 01       	movw	r24, r10
    c750:	68 d3       	rcall	.+1744   	; 0xce22 <ff_memfree>
    c752:	c8 01       	movw	r24, r16
    c754:	36 c0       	rjmp	.+108    	; 0xc7c2 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c756:	81 e1       	ldi	r24, 0x11	; 17
    c758:	90 e0       	ldi	r25, 0x00	; 0
    c75a:	33 c0       	rjmp	.+102    	; 0xc7c2 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c75c:	06 e0       	ldi	r16, 0x06	; 6
    c75e:	10 e0       	ldi	r17, 0x00	; 0
    c760:	f6 cf       	rjmp	.-20     	; 0xc74e <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c762:	60 e0       	ldi	r22, 0x00	; 0
    c764:	70 e0       	ldi	r23, 0x00	; 0
    c766:	ce 01       	movw	r24, r28
    c768:	01 96       	adiw	r24, 0x01	; 1
    c76a:	0e 94 b3 51 	call	0xa366	; 0xa366 <dir_read>
    c76e:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c770:	00 97       	sbiw	r24, 0x00	; 0
    c772:	19 f0       	breq	.+6      	; 0xc77a <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c774:	04 97       	sbiw	r24, 0x04	; 4
    c776:	21 f0       	breq	.+8      	; 0xc780 <f_unlink+0x102>
    c778:	ea cf       	rjmp	.-44     	; 0xc74e <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c77a:	07 e0       	ldi	r16, 0x07	; 7
    c77c:	10 e0       	ldi	r17, 0x00	; 0
    c77e:	e7 cf       	rjmp	.-50     	; 0xc74e <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c780:	ce 01       	movw	r24, r28
    c782:	8f 96       	adiw	r24, 0x2f	; 47
    c784:	0e 94 7c 52 	call	0xa4f8	; 0xa4f8 <dir_remove>
    c788:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c78a:	89 2b       	or	r24, r25
    c78c:	01 f7       	brne	.-64     	; 0xc74e <f_unlink+0xd0>
    c78e:	c1 14       	cp	r12, r1
    c790:	d1 04       	cpc	r13, r1
    c792:	e1 04       	cpc	r14, r1
    c794:	f1 04       	cpc	r15, r1
    c796:	41 f4       	brne	.+16     	; 0xc7a8 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c798:	6f 96       	adiw	r28, 0x1f	; 31
    c79a:	8e ad       	ldd	r24, Y+62	; 0x3e
    c79c:	9f ad       	ldd	r25, Y+63	; 0x3f
    c79e:	6f 97       	sbiw	r28, 0x1f	; 31
    c7a0:	0e 94 7e 48 	call	0x90fc	; 0x90fc <sync_fs>
    c7a4:	8c 01       	movw	r16, r24
    c7a6:	d3 cf       	rjmp	.-90     	; 0xc74e <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c7a8:	00 e0       	ldi	r16, 0x00	; 0
    c7aa:	10 e0       	ldi	r17, 0x00	; 0
    c7ac:	98 01       	movw	r18, r16
    c7ae:	b7 01       	movw	r22, r14
    c7b0:	a6 01       	movw	r20, r12
    c7b2:	ce 01       	movw	r24, r28
    c7b4:	8f 96       	adiw	r24, 0x2f	; 47
    c7b6:	0e 94 01 50 	call	0xa002	; 0xa002 <remove_chain>
    c7ba:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c7bc:	89 2b       	or	r24, r25
    c7be:	39 f6       	brne	.-114    	; 0xc74e <f_unlink+0xd0>
    c7c0:	eb cf       	rjmp	.-42     	; 0xc798 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c7c2:	c0 5a       	subi	r28, 0xA0	; 160
    c7c4:	df 4f       	sbci	r29, 0xFF	; 255
    c7c6:	eb e0       	ldi	r30, 0x0B	; 11
    c7c8:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__epilogue_restores__+0xe>

0000c7cc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c7cc:	a0 e4       	ldi	r26, 0x40	; 64
    c7ce:	b0 e0       	ldi	r27, 0x00	; 0
    c7d0:	ec ee       	ldi	r30, 0xEC	; 236
    c7d2:	f3 e6       	ldi	r31, 0x63	; 99
    c7d4:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
    c7d8:	21 96       	adiw	r28, 0x01	; 1
    c7da:	9f af       	std	Y+63, r25	; 0x3f
    c7dc:	8e af       	std	Y+62, r24	; 0x3e
    c7de:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c7e0:	42 e0       	ldi	r20, 0x02	; 2
    c7e2:	be 01       	movw	r22, r28
    c7e4:	63 5c       	subi	r22, 0xC3	; 195
    c7e6:	7f 4f       	sbci	r23, 0xFF	; 255
    c7e8:	ce 01       	movw	r24, r28
    c7ea:	cf 96       	adiw	r24, 0x3f	; 63
    c7ec:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
	if (res == FR_OK) {
    c7f0:	00 97       	sbiw	r24, 0x00	; 0
    c7f2:	09 f0       	breq	.+2      	; 0xc7f6 <f_mkdir+0x2a>
    c7f4:	d6 c0       	rjmp	.+428    	; 0xc9a2 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c7f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    c7f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    c7fa:	9a 83       	std	Y+2, r25	; 0x02
    c7fc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c7fe:	80 e0       	ldi	r24, 0x00	; 0
    c800:	92 e0       	ldi	r25, 0x02	; 2
    c802:	0c d3       	rcall	.+1560   	; 0xce1c <ff_memalloc>
    c804:	6c 01       	movw	r12, r24
    c806:	00 97       	sbiw	r24, 0x00	; 0
    c808:	e9 f0       	breq	.+58     	; 0xc844 <f_mkdir+0x78>
    c80a:	ed ad       	ldd	r30, Y+61	; 0x3d
    c80c:	fe ad       	ldd	r31, Y+62	; 0x3e
    c80e:	94 87       	std	Z+12, r25	; 0x0c
    c810:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c812:	21 96       	adiw	r28, 0x01	; 1
    c814:	6e ad       	ldd	r22, Y+62	; 0x3e
    c816:	7f ad       	ldd	r23, Y+63	; 0x3f
    c818:	21 97       	sbiw	r28, 0x01	; 1
    c81a:	ce 01       	movw	r24, r28
    c81c:	01 96       	adiw	r24, 0x01	; 1
    c81e:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    c822:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c824:	89 2b       	or	r24, r25
    c826:	89 f0       	breq	.+34     	; 0xc84a <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c828:	84 e0       	ldi	r24, 0x04	; 4
    c82a:	e8 16       	cp	r14, r24
    c82c:	f1 04       	cpc	r15, r1
    c82e:	31 f4       	brne	.+12     	; 0xc83c <f_mkdir+0x70>
    c830:	88 a5       	ldd	r24, Y+40	; 0x28
    c832:	85 ff       	sbrs	r24, 5
    c834:	0e c0       	rjmp	.+28     	; 0xc852 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c836:	26 e0       	ldi	r18, 0x06	; 6
    c838:	e2 2e       	mov	r14, r18
    c83a:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c83c:	c6 01       	movw	r24, r12
    c83e:	f1 d2       	rcall	.+1506   	; 0xce22 <ff_memfree>
    c840:	c7 01       	movw	r24, r14
    c842:	af c0       	rjmp	.+350    	; 0xc9a2 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c844:	81 e1       	ldi	r24, 0x11	; 17
    c846:	90 e0       	ldi	r25, 0x00	; 0
    c848:	ac c0       	rjmp	.+344    	; 0xc9a2 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c84a:	38 e0       	ldi	r19, 0x08	; 8
    c84c:	e3 2e       	mov	r14, r19
    c84e:	f1 2c       	mov	r15, r1
    c850:	f5 cf       	rjmp	.-22     	; 0xc83c <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c852:	8d ad       	ldd	r24, Y+61	; 0x3d
    c854:	9e ad       	ldd	r25, Y+62	; 0x3e
    c856:	98 ab       	std	Y+48, r25	; 0x30
    c858:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c85a:	40 e0       	ldi	r20, 0x00	; 0
    c85c:	50 e0       	ldi	r21, 0x00	; 0
    c85e:	ba 01       	movw	r22, r20
    c860:	ce 01       	movw	r24, r28
    c862:	8f 96       	adiw	r24, 0x2f	; 47
    c864:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <create_chain>
    c868:	4b 01       	movw	r8, r22
    c86a:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c86c:	67 2b       	or	r22, r23
    c86e:	68 2b       	or	r22, r24
    c870:	69 2b       	or	r22, r25
    c872:	09 f1       	breq	.+66     	; 0xc8b6 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c874:	e1 e0       	ldi	r30, 0x01	; 1
    c876:	8e 16       	cp	r8, r30
    c878:	91 04       	cpc	r9, r1
    c87a:	a1 04       	cpc	r10, r1
    c87c:	b1 04       	cpc	r11, r1
    c87e:	61 f0       	breq	.+24     	; 0xc898 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c880:	ff ef       	ldi	r31, 0xFF	; 255
    c882:	8f 16       	cp	r8, r31
    c884:	9f 06       	cpc	r9, r31
    c886:	af 06       	cpc	r10, r31
    c888:	bf 06       	cpc	r11, r31
    c88a:	d9 f4       	brne	.+54     	; 0xc8c2 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    c88c:	0e 94 8f 6e 	call	0xdd1e	; 0xdd1e <get_fattime>
    c890:	ee 24       	eor	r14, r14
    c892:	e3 94       	inc	r14
    c894:	f1 2c       	mov	r15, r1
    c896:	05 c0       	rjmp	.+10     	; 0xc8a2 <f_mkdir+0xd6>
    c898:	0e 94 8f 6e 	call	0xdd1e	; 0xdd1e <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c89c:	92 e0       	ldi	r25, 0x02	; 2
    c89e:	e9 2e       	mov	r14, r25
    c8a0:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c8a2:	00 e0       	ldi	r16, 0x00	; 0
    c8a4:	10 e0       	ldi	r17, 0x00	; 0
    c8a6:	98 01       	movw	r18, r16
    c8a8:	b5 01       	movw	r22, r10
    c8aa:	a4 01       	movw	r20, r8
    c8ac:	ce 01       	movw	r24, r28
    c8ae:	8f 96       	adiw	r24, 0x2f	; 47
    c8b0:	0e 94 01 50 	call	0xa002	; 0xa002 <remove_chain>
    c8b4:	c3 cf       	rjmp	.-122    	; 0xc83c <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c8b6:	0e 94 8f 6e 	call	0xdd1e	; 0xdd1e <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c8ba:	87 e0       	ldi	r24, 0x07	; 7
    c8bc:	e8 2e       	mov	r14, r24
    c8be:	f1 2c       	mov	r15, r1
    c8c0:	f0 cf       	rjmp	.-32     	; 0xc8a2 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c8c2:	0e 94 8f 6e 	call	0xdd1e	; 0xdd1e <get_fattime>
    c8c6:	2b 01       	movw	r4, r22
    c8c8:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c8ca:	b5 01       	movw	r22, r10
    c8cc:	a4 01       	movw	r20, r8
    c8ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    c8d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    c8d2:	0e 94 f0 48 	call	0x91e0	; 0x91e0 <dir_clear>
    c8d6:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    c8d8:	89 2b       	or	r24, r25
    c8da:	19 f7       	brne	.-58     	; 0xc8a2 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c8dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    c8de:	9e ad       	ldd	r25, Y+62	; 0x3e
    c8e0:	4b e0       	ldi	r20, 0x0B	; 11
    c8e2:	50 e0       	ldi	r21, 0x00	; 0
    c8e4:	60 e2       	ldi	r22, 0x20	; 32
    c8e6:	70 e0       	ldi	r23, 0x00	; 0
    c8e8:	c5 96       	adiw	r24, 0x35	; 53
    c8ea:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <mem_set>
						fs->win[DIR_Name] = '.';
    c8ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    c8f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    c8f2:	1e e2       	ldi	r17, 0x2E	; 46
    c8f4:	fc 01       	movw	r30, r24
    c8f6:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    c8f8:	e0 5c       	subi	r30, 0xC0	; 192
    c8fa:	ff 4f       	sbci	r31, 0xFF	; 255
    c8fc:	20 e1       	ldi	r18, 0x10	; 16
    c8fe:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    c900:	b3 01       	movw	r22, r6
    c902:	a2 01       	movw	r20, r4
    c904:	85 5b       	subi	r24, 0xB5	; 181
    c906:	9f 4f       	sbci	r25, 0xFF	; 255
    c908:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <st_dword>
						st_clust(fs, fs->win, dcl);
    c90c:	8d ad       	ldd	r24, Y+61	; 0x3d
    c90e:	9e ad       	ldd	r25, Y+62	; 0x3e
    c910:	bc 01       	movw	r22, r24
    c912:	6b 5c       	subi	r22, 0xCB	; 203
    c914:	7f 4f       	sbci	r23, 0xFF	; 255
    c916:	a5 01       	movw	r20, r10
    c918:	94 01       	movw	r18, r8
    c91a:	0e 94 1e 48 	call	0x903c	; 0x903c <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    c91e:	8d ad       	ldd	r24, Y+61	; 0x3d
    c920:	9e ad       	ldd	r25, Y+62	; 0x3e
    c922:	bc 01       	movw	r22, r24
    c924:	6b 5c       	subi	r22, 0xCB	; 203
    c926:	7f 4f       	sbci	r23, 0xFF	; 255
    c928:	40 e2       	ldi	r20, 0x20	; 32
    c92a:	50 e0       	ldi	r21, 0x00	; 0
    c92c:	8b 5a       	subi	r24, 0xAB	; 171
    c92e:	9f 4f       	sbci	r25, 0xFF	; 255
    c930:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    c934:	8d ad       	ldd	r24, Y+61	; 0x3d
    c936:	9e ad       	ldd	r25, Y+62	; 0x3e
    c938:	fc 01       	movw	r30, r24
    c93a:	ea 5a       	subi	r30, 0xAA	; 170
    c93c:	ff 4f       	sbci	r31, 0xFF	; 255
    c93e:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    c940:	2f 81       	ldd	r18, Y+7	; 0x07
    c942:	38 85       	ldd	r19, Y+8	; 0x08
    c944:	49 85       	ldd	r20, Y+9	; 0x09
    c946:	5a 85       	ldd	r21, Y+10	; 0x0a
    c948:	bc 01       	movw	r22, r24
    c94a:	6b 5a       	subi	r22, 0xAB	; 171
    c94c:	7f 4f       	sbci	r23, 0xFF	; 255
    c94e:	0e 94 1e 48 	call	0x903c	; 0x903c <st_clust.isra.4>
						fs->wflag = 1;
    c952:	ed ad       	ldd	r30, Y+61	; 0x3d
    c954:	fe ad       	ldd	r31, Y+62	; 0x3e
    c956:	81 e0       	ldi	r24, 0x01	; 1
    c958:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    c95a:	ce 01       	movw	r24, r28
    c95c:	01 96       	adiw	r24, 0x01	; 1
    c95e:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <dir_register>
    c962:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    c964:	89 2b       	or	r24, r25
    c966:	09 f0       	breq	.+2      	; 0xc96a <f_mkdir+0x19e>
    c968:	9c cf       	rjmp	.-200    	; 0xc8a2 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    c96a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c96c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c96e:	b3 01       	movw	r22, r6
    c970:	a2 01       	movw	r20, r4
    c972:	46 96       	adiw	r24, 0x16	; 22
    c974:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    c978:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c97a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c97c:	a5 01       	movw	r20, r10
    c97e:	94 01       	movw	r18, r8
    c980:	8d ad       	ldd	r24, Y+61	; 0x3d
    c982:	9e ad       	ldd	r25, Y+62	; 0x3e
    c984:	0e 94 1e 48 	call	0x903c	; 0x903c <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    c988:	eb 8d       	ldd	r30, Y+27	; 0x1b
    c98a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    c98c:	80 e1       	ldi	r24, 0x10	; 16
    c98e:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    c990:	8d ad       	ldd	r24, Y+61	; 0x3d
    c992:	9e ad       	ldd	r25, Y+62	; 0x3e
    c994:	21 e0       	ldi	r18, 0x01	; 1
    c996:	fc 01       	movw	r30, r24
    c998:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    c99a:	0e 94 7e 48 	call	0x90fc	; 0x90fc <sync_fs>
    c99e:	7c 01       	movw	r14, r24
    c9a0:	4d cf       	rjmp	.-358    	; 0xc83c <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c9a2:	c0 5c       	subi	r28, 0xC0	; 192
    c9a4:	df 4f       	sbci	r29, 0xFF	; 255
    c9a6:	e0 e1       	ldi	r30, 0x10	; 16
    c9a8:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

0000c9ac <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    c9ac:	a2 e8       	ldi	r26, 0x82	; 130
    c9ae:	b0 e0       	ldi	r27, 0x00	; 0
    c9b0:	ec ed       	ldi	r30, 0xDC	; 220
    c9b2:	f4 e6       	ldi	r31, 0x64	; 100
    c9b4:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x12>
    c9b8:	c1 58       	subi	r28, 0x81	; 129
    c9ba:	df 4f       	sbci	r29, 0xFF	; 255
    c9bc:	99 83       	std	Y+1, r25	; 0x01
    c9be:	88 83       	st	Y, r24
    c9c0:	cf 57       	subi	r28, 0x7F	; 127
    c9c2:	d0 40       	sbci	r29, 0x00	; 0
    c9c4:	cf 57       	subi	r28, 0x7F	; 127
    c9c6:	df 4f       	sbci	r29, 0xFF	; 255
    c9c8:	79 83       	std	Y+1, r23	; 0x01
    c9ca:	68 83       	st	Y, r22
    c9cc:	c1 58       	subi	r28, 0x81	; 129
    c9ce:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    c9d0:	ce 01       	movw	r24, r28
    c9d2:	8f 57       	subi	r24, 0x7F	; 127
    c9d4:	9f 4f       	sbci	r25, 0xFF	; 255
    c9d6:	0e 94 7c 46 	call	0x8cf8	; 0x8cf8 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    c9da:	42 e0       	ldi	r20, 0x02	; 2
    c9dc:	be 01       	movw	r22, r28
    c9de:	63 58       	subi	r22, 0x83	; 131
    c9e0:	7f 4f       	sbci	r23, 0xFF	; 255
    c9e2:	ce 01       	movw	r24, r28
    c9e4:	81 58       	subi	r24, 0x81	; 129
    c9e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c9e8:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
	if (res == FR_OK) {
    c9ec:	00 97       	sbiw	r24, 0x00	; 0
    c9ee:	09 f0       	breq	.+2      	; 0xc9f2 <f_rename+0x46>
    c9f0:	ed c0       	rjmp	.+474    	; 0xcbcc <f_rename+0x220>
		djo.obj.fs = fs;
    c9f2:	ef 96       	adiw	r28, 0x3f	; 63
    c9f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    c9f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    c9f8:	ef 97       	sbiw	r28, 0x3f	; 63
    c9fa:	98 ab       	std	Y+48, r25	; 0x30
    c9fc:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c9fe:	80 e0       	ldi	r24, 0x00	; 0
    ca00:	92 e0       	ldi	r25, 0x02	; 2
    ca02:	0c d2       	rcall	.+1048   	; 0xce1c <ff_memalloc>
    ca04:	6c 01       	movw	r12, r24
    ca06:	00 97       	sbiw	r24, 0x00	; 0
    ca08:	f1 f0       	breq	.+60     	; 0xca46 <f_rename+0x9a>
    ca0a:	ef 96       	adiw	r28, 0x3f	; 63
    ca0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca10:	ef 97       	sbiw	r28, 0x3f	; 63
    ca12:	94 87       	std	Z+12, r25	; 0x0c
    ca14:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ca16:	c1 58       	subi	r28, 0x81	; 129
    ca18:	df 4f       	sbci	r29, 0xFF	; 255
    ca1a:	68 81       	ld	r22, Y
    ca1c:	79 81       	ldd	r23, Y+1	; 0x01
    ca1e:	cf 57       	subi	r28, 0x7F	; 127
    ca20:	d0 40       	sbci	r29, 0x00	; 0
    ca22:	ce 01       	movw	r24, r28
    ca24:	8f 96       	adiw	r24, 0x2f	; 47
    ca26:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    ca2a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ca2c:	89 2b       	or	r24, r25
    ca2e:	39 f4       	brne	.+14     	; 0xca3e <f_rename+0x92>
    ca30:	67 96       	adiw	r28, 0x17	; 23
    ca32:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca34:	67 97       	sbiw	r28, 0x17	; 23
    ca36:	80 7a       	andi	r24, 0xA0	; 160
    ca38:	49 f0       	breq	.+18     	; 0xca4c <f_rename+0xa0>
    ca3a:	06 e0       	ldi	r16, 0x06	; 6
    ca3c:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ca3e:	c6 01       	movw	r24, r12
    ca40:	f0 d1       	rcall	.+992    	; 0xce22 <ff_memfree>
    ca42:	c8 01       	movw	r24, r16
    ca44:	c3 c0       	rjmp	.+390    	; 0xcbcc <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca46:	81 e1       	ldi	r24, 0x11	; 17
    ca48:	90 e0       	ldi	r25, 0x00	; 0
    ca4a:	c0 c0       	rjmp	.+384    	; 0xcbcc <f_rename+0x220>
    ca4c:	2b 96       	adiw	r28, 0x0b	; 11
    ca4e:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca50:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca52:	2b 97       	sbiw	r28, 0x0b	; 11
    ca54:	40 e2       	ldi	r20, 0x20	; 32
    ca56:	50 e0       	ldi	r21, 0x00	; 0
    ca58:	ce 01       	movw	r24, r28
    ca5a:	83 5a       	subi	r24, 0xA3	; 163
    ca5c:	9f 4f       	sbci	r25, 0xFF	; 255
    ca5e:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
    ca62:	4e e2       	ldi	r20, 0x2E	; 46
    ca64:	50 e0       	ldi	r21, 0x00	; 0
    ca66:	be 01       	movw	r22, r28
    ca68:	61 5d       	subi	r22, 0xD1	; 209
    ca6a:	7f 4f       	sbci	r23, 0xFF	; 255
    ca6c:	ce 01       	movw	r24, r28
    ca6e:	01 96       	adiw	r24, 0x01	; 1
    ca70:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    ca74:	cf 57       	subi	r28, 0x7F	; 127
    ca76:	df 4f       	sbci	r29, 0xFF	; 255
    ca78:	68 81       	ld	r22, Y
    ca7a:	79 81       	ldd	r23, Y+1	; 0x01
    ca7c:	c1 58       	subi	r28, 0x81	; 129
    ca7e:	d0 40       	sbci	r29, 0x00	; 0
    ca80:	ce 01       	movw	r24, r28
    ca82:	01 96       	adiw	r24, 0x01	; 1
    ca84:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    ca88:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ca8a:	89 2b       	or	r24, r25
    ca8c:	f9 f4       	brne	.+62     	; 0xcacc <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ca8e:	4f 81       	ldd	r20, Y+7	; 0x07
    ca90:	58 85       	ldd	r21, Y+8	; 0x08
    ca92:	69 85       	ldd	r22, Y+9	; 0x09
    ca94:	7a 85       	ldd	r23, Y+10	; 0x0a
    ca96:	8d a9       	ldd	r24, Y+53	; 0x35
    ca98:	9e a9       	ldd	r25, Y+54	; 0x36
    ca9a:	af a9       	ldd	r26, Y+55	; 0x37
    ca9c:	b8 ad       	ldd	r27, Y+56	; 0x38
    ca9e:	48 17       	cp	r20, r24
    caa0:	59 07       	cpc	r21, r25
    caa2:	6a 07       	cpc	r22, r26
    caa4:	7b 07       	cpc	r23, r27
    caa6:	09 f0       	breq	.+2      	; 0xcaaa <f_rename+0xfe>
    caa8:	8b c0       	rjmp	.+278    	; 0xcbc0 <f_rename+0x214>
    caaa:	4f 85       	ldd	r20, Y+15	; 0x0f
    caac:	58 89       	ldd	r21, Y+16	; 0x10
    caae:	69 89       	ldd	r22, Y+17	; 0x11
    cab0:	7a 89       	ldd	r23, Y+18	; 0x12
    cab2:	21 96       	adiw	r28, 0x01	; 1
    cab4:	8c ad       	ldd	r24, Y+60	; 0x3c
    cab6:	9d ad       	ldd	r25, Y+61	; 0x3d
    cab8:	ae ad       	ldd	r26, Y+62	; 0x3e
    caba:	bf ad       	ldd	r27, Y+63	; 0x3f
    cabc:	21 97       	sbiw	r28, 0x01	; 1
    cabe:	48 17       	cp	r20, r24
    cac0:	59 07       	cpc	r21, r25
    cac2:	6a 07       	cpc	r22, r26
    cac4:	7b 07       	cpc	r23, r27
    cac6:	09 f0       	breq	.+2      	; 0xcaca <f_rename+0x11e>
    cac8:	7b c0       	rjmp	.+246    	; 0xcbc0 <f_rename+0x214>
    caca:	04 c0       	rjmp	.+8      	; 0xcad4 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cacc:	04 30       	cpi	r16, 0x04	; 4
    cace:	11 05       	cpc	r17, r1
    cad0:	09 f0       	breq	.+2      	; 0xcad4 <f_rename+0x128>
    cad2:	b5 cf       	rjmp	.-150    	; 0xca3e <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cad4:	ce 01       	movw	r24, r28
    cad6:	01 96       	adiw	r24, 0x01	; 1
    cad8:	0e 94 d2 53 	call	0xa7a4	; 0xa7a4 <dir_register>
    cadc:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cade:	89 2b       	or	r24, r25
    cae0:	09 f0       	breq	.+2      	; 0xcae4 <f_rename+0x138>
    cae2:	ad cf       	rjmp	.-166    	; 0xca3e <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cae4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cae6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cae8:	6d e5       	ldi	r22, 0x5D	; 93
    caea:	70 e0       	ldi	r23, 0x00	; 0
    caec:	6c 0f       	add	r22, r28
    caee:	7d 1f       	adc	r23, r29
    caf0:	63 5f       	subi	r22, 0xF3	; 243
    caf2:	7f 4f       	sbci	r23, 0xFF	; 255
    caf4:	43 e1       	ldi	r20, 0x13	; 19
    caf6:	50 e0       	ldi	r21, 0x00	; 0
    caf8:	c8 01       	movw	r24, r16
    cafa:	0d 96       	adiw	r24, 0x0d	; 13
    cafc:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cb00:	a9 96       	adiw	r28, 0x29	; 41
    cb02:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb04:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cb06:	84 ff       	sbrs	r24, 4
    cb08:	80 62       	ori	r24, 0x20	; 32
    cb0a:	f8 01       	movw	r30, r16
    cb0c:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cb0e:	ef 96       	adiw	r28, 0x3f	; 63
    cb10:	ee ac       	ldd	r14, Y+62	; 0x3e
    cb12:	ff ac       	ldd	r15, Y+63	; 0x3f
    cb14:	ef 97       	sbiw	r28, 0x3f	; 63
    cb16:	bb 24       	eor	r11, r11
    cb18:	b3 94       	inc	r11
    cb1a:	f7 01       	movw	r30, r14
    cb1c:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cb1e:	f8 01       	movw	r30, r16
    cb20:	83 85       	ldd	r24, Z+11	; 0x0b
    cb22:	84 ff       	sbrs	r24, 4
    cb24:	3d c0       	rjmp	.+122    	; 0xcba0 <f_rename+0x1f4>
    cb26:	4d a9       	ldd	r20, Y+53	; 0x35
    cb28:	5e a9       	ldd	r21, Y+54	; 0x36
    cb2a:	6f a9       	ldd	r22, Y+55	; 0x37
    cb2c:	78 ad       	ldd	r23, Y+56	; 0x38
    cb2e:	8f 81       	ldd	r24, Y+7	; 0x07
    cb30:	98 85       	ldd	r25, Y+8	; 0x08
    cb32:	a9 85       	ldd	r26, Y+9	; 0x09
    cb34:	ba 85       	ldd	r27, Y+10	; 0x0a
    cb36:	48 17       	cp	r20, r24
    cb38:	59 07       	cpc	r21, r25
    cb3a:	6a 07       	cpc	r22, r26
    cb3c:	7b 07       	cpc	r23, r27
    cb3e:	81 f1       	breq	.+96     	; 0xcba0 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cb40:	b8 01       	movw	r22, r16
    cb42:	f7 01       	movw	r30, r14
    cb44:	80 81       	ld	r24, Z
    cb46:	0e 94 09 48 	call	0x9012	; 0x9012 <ld_clust.isra.3>
    cb4a:	ab 01       	movw	r20, r22
    cb4c:	bc 01       	movw	r22, r24
    cb4e:	c7 01       	movw	r24, r14
    cb50:	0e 94 09 46 	call	0x8c12	; 0x8c12 <clst2sect>
    cb54:	ab 01       	movw	r20, r22
    cb56:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cb58:	41 15       	cp	r20, r1
    cb5a:	51 05       	cpc	r21, r1
    cb5c:	61 05       	cpc	r22, r1
    cb5e:	71 05       	cpc	r23, r1
    cb60:	91 f1       	breq	.+100    	; 0xcbc6 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cb62:	c7 01       	movw	r24, r14
    cb64:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    cb68:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cb6a:	89 2b       	or	r24, r25
    cb6c:	09 f0       	breq	.+2      	; 0xcb70 <f_rename+0x1c4>
    cb6e:	67 cf       	rjmp	.-306    	; 0xca3e <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cb70:	ef 96       	adiw	r28, 0x3f	; 63
    cb72:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb74:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb76:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cb78:	fc 01       	movw	r30, r24
    cb7a:	ea 5a       	subi	r30, 0xAA	; 170
    cb7c:	ff 4f       	sbci	r31, 0xFF	; 255
    cb7e:	20 81       	ld	r18, Z
    cb80:	2e 32       	cpi	r18, 0x2E	; 46
    cb82:	71 f4       	brne	.+28     	; 0xcba0 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cb84:	2f 81       	ldd	r18, Y+7	; 0x07
    cb86:	38 85       	ldd	r19, Y+8	; 0x08
    cb88:	49 85       	ldd	r20, Y+9	; 0x09
    cb8a:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cb8c:	bc 01       	movw	r22, r24
    cb8e:	6b 5a       	subi	r22, 0xAB	; 171
    cb90:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cb92:	0e 94 1e 48 	call	0x903c	; 0x903c <st_clust.isra.4>
									fs->wflag = 1;
    cb96:	ef 96       	adiw	r28, 0x3f	; 63
    cb98:	ee ad       	ldd	r30, Y+62	; 0x3e
    cb9a:	ff ad       	ldd	r31, Y+63	; 0x3f
    cb9c:	ef 97       	sbiw	r28, 0x3f	; 63
    cb9e:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cba0:	ce 01       	movw	r24, r28
    cba2:	8f 96       	adiw	r24, 0x2f	; 47
    cba4:	0e 94 7c 52 	call	0xa4f8	; 0xa4f8 <dir_remove>
    cba8:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cbaa:	89 2b       	or	r24, r25
    cbac:	09 f0       	breq	.+2      	; 0xcbb0 <f_rename+0x204>
    cbae:	47 cf       	rjmp	.-370    	; 0xca3e <f_rename+0x92>
					res = sync_fs(fs);
    cbb0:	ef 96       	adiw	r28, 0x3f	; 63
    cbb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbb6:	ef 97       	sbiw	r28, 0x3f	; 63
    cbb8:	0e 94 7e 48 	call	0x90fc	; 0x90fc <sync_fs>
    cbbc:	8c 01       	movw	r16, r24
    cbbe:	3f cf       	rjmp	.-386    	; 0xca3e <f_rename+0x92>
    cbc0:	08 e0       	ldi	r16, 0x08	; 8
    cbc2:	10 e0       	ldi	r17, 0x00	; 0
    cbc4:	3c cf       	rjmp	.-392    	; 0xca3e <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cbc6:	02 e0       	ldi	r16, 0x02	; 2
    cbc8:	10 e0       	ldi	r17, 0x00	; 0
    cbca:	39 cf       	rjmp	.-398    	; 0xca3e <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cbcc:	ce 57       	subi	r28, 0x7E	; 126
    cbce:	df 4f       	sbci	r29, 0xFF	; 255
    cbd0:	e9 e0       	ldi	r30, 0x09	; 9
    cbd2:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x12>

0000cbd6 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cbd6:	a2 e3       	ldi	r26, 0x32	; 50
    cbd8:	b0 e0       	ldi	r27, 0x00	; 0
    cbda:	e1 ef       	ldi	r30, 0xF1	; 241
    cbdc:	f5 e6       	ldi	r31, 0x65	; 101
    cbde:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    cbe2:	9a ab       	std	Y+50, r25	; 0x32
    cbe4:	89 ab       	std	Y+49, r24	; 0x31
    cbe6:	e6 2e       	mov	r14, r22
    cbe8:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cbea:	42 e0       	ldi	r20, 0x02	; 2
    cbec:	be 01       	movw	r22, r28
    cbee:	61 5d       	subi	r22, 0xD1	; 209
    cbf0:	7f 4f       	sbci	r23, 0xFF	; 255
    cbf2:	ce 01       	movw	r24, r28
    cbf4:	c1 96       	adiw	r24, 0x31	; 49
    cbf6:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
	if (res == FR_OK) {
    cbfa:	00 97       	sbiw	r24, 0x00	; 0
    cbfc:	a9 f5       	brne	.+106    	; 0xcc68 <f_chmod+0x92>
		dj.obj.fs = fs;
    cbfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc00:	98 a9       	ldd	r25, Y+48	; 0x30
    cc02:	9a 83       	std	Y+2, r25	; 0x02
    cc04:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cc06:	80 e0       	ldi	r24, 0x00	; 0
    cc08:	92 e0       	ldi	r25, 0x02	; 2
    cc0a:	08 d1       	rcall	.+528    	; 0xce1c <ff_memalloc>
    cc0c:	6c 01       	movw	r12, r24
    cc0e:	00 97       	sbiw	r24, 0x00	; 0
    cc10:	b1 f0       	breq	.+44     	; 0xcc3e <f_chmod+0x68>
    cc12:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc14:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc16:	94 87       	std	Z+12, r25	; 0x0c
    cc18:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cc1a:	69 a9       	ldd	r22, Y+49	; 0x31
    cc1c:	7a a9       	ldd	r23, Y+50	; 0x32
    cc1e:	ce 01       	movw	r24, r28
    cc20:	01 96       	adiw	r24, 0x01	; 1
    cc22:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    cc26:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cc28:	89 2b       	or	r24, r25
    cc2a:	29 f4       	brne	.+10     	; 0xcc36 <f_chmod+0x60>
    cc2c:	88 a5       	ldd	r24, Y+40	; 0x28
    cc2e:	80 7a       	andi	r24, 0xA0	; 160
    cc30:	49 f0       	breq	.+18     	; 0xcc44 <f_chmod+0x6e>
    cc32:	06 e0       	ldi	r16, 0x06	; 6
    cc34:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cc36:	c6 01       	movw	r24, r12
    cc38:	f4 d0       	rcall	.+488    	; 0xce22 <ff_memfree>
    cc3a:	c8 01       	movw	r24, r16
    cc3c:	15 c0       	rjmp	.+42     	; 0xcc68 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc3e:	81 e1       	ldi	r24, 0x11	; 17
    cc40:	90 e0       	ldi	r25, 0x00	; 0
    cc42:	12 c0       	rjmp	.+36     	; 0xcc68 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cc44:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc46:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc48:	83 85       	ldd	r24, Z+11	; 0x0b
    cc4a:	6e 2d       	mov	r22, r14
    cc4c:	68 27       	eor	r22, r24
    cc4e:	6f 21       	and	r22, r15
    cc50:	67 72       	andi	r22, 0x27	; 39
    cc52:	68 27       	eor	r22, r24
    cc54:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cc56:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc58:	98 a9       	ldd	r25, Y+48	; 0x30
    cc5a:	21 e0       	ldi	r18, 0x01	; 1
    cc5c:	fc 01       	movw	r30, r24
    cc5e:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cc60:	0e 94 7e 48 	call	0x90fc	; 0x90fc <sync_fs>
    cc64:	8c 01       	movw	r16, r24
    cc66:	e7 cf       	rjmp	.-50     	; 0xcc36 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc68:	e2 96       	adiw	r28, 0x32	; 50
    cc6a:	e8 e0       	ldi	r30, 0x08	; 8
    cc6c:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000cc70 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cc70:	a2 e3       	ldi	r26, 0x32	; 50
    cc72:	b0 e0       	ldi	r27, 0x00	; 0
    cc74:	ee e3       	ldi	r30, 0x3E	; 62
    cc76:	f6 e6       	ldi	r31, 0x66	; 102
    cc78:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    cc7c:	9a ab       	std	Y+50, r25	; 0x32
    cc7e:	89 ab       	std	Y+49, r24	; 0x31
    cc80:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cc82:	42 e0       	ldi	r20, 0x02	; 2
    cc84:	be 01       	movw	r22, r28
    cc86:	61 5d       	subi	r22, 0xD1	; 209
    cc88:	7f 4f       	sbci	r23, 0xFF	; 255
    cc8a:	ce 01       	movw	r24, r28
    cc8c:	c1 96       	adiw	r24, 0x31	; 49
    cc8e:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
	if (res == FR_OK) {
    cc92:	00 97       	sbiw	r24, 0x00	; 0
    cc94:	09 f0       	breq	.+2      	; 0xcc98 <f_utime+0x28>
    cc96:	41 c0       	rjmp	.+130    	; 0xcd1a <f_utime+0xaa>
		dj.obj.fs = fs;
    cc98:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc9a:	98 a9       	ldd	r25, Y+48	; 0x30
    cc9c:	9a 83       	std	Y+2, r25	; 0x02
    cc9e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cca0:	80 e0       	ldi	r24, 0x00	; 0
    cca2:	92 e0       	ldi	r25, 0x02	; 2
    cca4:	bb d0       	rcall	.+374    	; 0xce1c <ff_memalloc>
    cca6:	7c 01       	movw	r14, r24
    cca8:	00 97       	sbiw	r24, 0x00	; 0
    ccaa:	b1 f0       	breq	.+44     	; 0xccd8 <f_utime+0x68>
    ccac:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccae:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccb0:	94 87       	std	Z+12, r25	; 0x0c
    ccb2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ccb4:	69 a9       	ldd	r22, Y+49	; 0x31
    ccb6:	7a a9       	ldd	r23, Y+50	; 0x32
    ccb8:	ce 01       	movw	r24, r28
    ccba:	01 96       	adiw	r24, 0x01	; 1
    ccbc:	0e 94 60 55 	call	0xaac0	; 0xaac0 <follow_path>
    ccc0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    ccc2:	89 2b       	or	r24, r25
    ccc4:	29 f4       	brne	.+10     	; 0xccd0 <f_utime+0x60>
    ccc6:	88 a5       	ldd	r24, Y+40	; 0x28
    ccc8:	80 7a       	andi	r24, 0xA0	; 160
    ccca:	49 f0       	breq	.+18     	; 0xccde <f_utime+0x6e>
    cccc:	06 e0       	ldi	r16, 0x06	; 6
    ccce:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ccd0:	c7 01       	movw	r24, r14
    ccd2:	a7 d0       	rcall	.+334    	; 0xce22 <ff_memfree>
    ccd4:	c8 01       	movw	r24, r16
    ccd6:	21 c0       	rjmp	.+66     	; 0xcd1a <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ccd8:	81 e1       	ldi	r24, 0x11	; 17
    ccda:	90 e0       	ldi	r25, 0x00	; 0
    ccdc:	1e c0       	rjmp	.+60     	; 0xcd1a <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    ccde:	f6 01       	movw	r30, r12
    cce0:	44 81       	ldd	r20, Z+4	; 0x04
    cce2:	55 81       	ldd	r21, Z+5	; 0x05
    cce4:	60 e0       	ldi	r22, 0x00	; 0
    cce6:	70 e0       	ldi	r23, 0x00	; 0
    cce8:	ba 01       	movw	r22, r20
    ccea:	55 27       	eor	r21, r21
    ccec:	44 27       	eor	r20, r20
    ccee:	86 81       	ldd	r24, Z+6	; 0x06
    ccf0:	97 81       	ldd	r25, Z+7	; 0x07
    ccf2:	a0 e0       	ldi	r26, 0x00	; 0
    ccf4:	b0 e0       	ldi	r27, 0x00	; 0
    ccf6:	48 2b       	or	r20, r24
    ccf8:	59 2b       	or	r21, r25
    ccfa:	6a 2b       	or	r22, r26
    ccfc:	7b 2b       	or	r23, r27
    ccfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd02:	46 96       	adiw	r24, 0x16	; 22
    cd04:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <st_dword>
				fs->wflag = 1;
    cd08:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd0a:	98 a9       	ldd	r25, Y+48	; 0x30
    cd0c:	21 e0       	ldi	r18, 0x01	; 1
    cd0e:	fc 01       	movw	r30, r24
    cd10:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cd12:	0e 94 7e 48 	call	0x90fc	; 0x90fc <sync_fs>
    cd16:	8c 01       	movw	r16, r24
    cd18:	db cf       	rjmp	.-74     	; 0xccd0 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd1a:	e2 96       	adiw	r28, 0x32	; 50
    cd1c:	e8 e0       	ldi	r30, 0x08	; 8
    cd1e:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000cd22 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cd22:	a2 e3       	ldi	r26, 0x32	; 50
    cd24:	b0 e0       	ldi	r27, 0x00	; 0
    cd26:	e7 e9       	ldi	r30, 0x97	; 151
    cd28:	f6 e6       	ldi	r31, 0x66	; 102
    cd2a:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    cd2e:	9a ab       	std	Y+50, r25	; 0x32
    cd30:	89 ab       	std	Y+49, r24	; 0x31
    cd32:	7b 01       	movw	r14, r22
    cd34:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cd36:	40 e0       	ldi	r20, 0x00	; 0
    cd38:	be 01       	movw	r22, r28
    cd3a:	61 5d       	subi	r22, 0xD1	; 209
    cd3c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd3e:	ce 01       	movw	r24, r28
    cd40:	c1 96       	adiw	r24, 0x31	; 49
    cd42:	0e 94 13 4a 	call	0x9426	; 0x9426 <mount_volume>
    cd46:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cd48:	89 2b       	or	r24, r25
    cd4a:	09 f0       	breq	.+2      	; 0xcd4e <f_getlabel+0x2c>
    cd4c:	62 c0       	rjmp	.+196    	; 0xce12 <f_getlabel+0xf0>
    cd4e:	e1 14       	cp	r14, r1
    cd50:	f1 04       	cpc	r15, r1
    cd52:	a1 f1       	breq	.+104    	; 0xcdbc <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cd54:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd56:	98 a9       	ldd	r25, Y+48	; 0x30
    cd58:	9a 83       	std	Y+2, r25	; 0x02
    cd5a:	89 83       	std	Y+1, r24	; 0x01
    cd5c:	1f 82       	std	Y+7, r1	; 0x07
    cd5e:	18 86       	std	Y+8, r1	; 0x08
    cd60:	19 86       	std	Y+9, r1	; 0x09
    cd62:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cd64:	40 e0       	ldi	r20, 0x00	; 0
    cd66:	50 e0       	ldi	r21, 0x00	; 0
    cd68:	ba 01       	movw	r22, r20
    cd6a:	ce 01       	movw	r24, r28
    cd6c:	01 96       	adiw	r24, 0x01	; 1
    cd6e:	0e 94 1a 4e 	call	0x9c34	; 0x9c34 <dir_sdi>
		if (res == FR_OK) {
    cd72:	00 97       	sbiw	r24, 0x00	; 0
    cd74:	f1 f4       	brne	.+60     	; 0xcdb2 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cd76:	61 e0       	ldi	r22, 0x01	; 1
    cd78:	70 e0       	ldi	r23, 0x00	; 0
    cd7a:	ce 01       	movw	r24, r28
    cd7c:	01 96       	adiw	r24, 0x01	; 1
    cd7e:	0e 94 b3 51 	call	0xa366	; 0xa366 <dir_read>
		 	if (res == FR_OK) {
    cd82:	00 97       	sbiw	r24, 0x00	; 0
    cd84:	b1 f4       	brne	.+44     	; 0xcdb2 <f_getlabel+0x90>
    cd86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd8a:	f7 01       	movw	r30, r14
    cd8c:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cd8e:	a7 01       	movw	r20, r14
    cd90:	dc 01       	movw	r26, r24
    cd92:	2d 91       	ld	r18, X+
    cd94:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    cd96:	da 01       	movw	r26, r20
    cd98:	2d 93       	st	X+, r18
    cd9a:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cd9c:	ae 17       	cp	r26, r30
    cd9e:	bf 07       	cpc	r27, r31
    cda0:	b9 f7       	brne	.-18     	; 0xcd90 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cda2:	10 82       	st	Z, r1
						if (di == 0) break;
    cda4:	ee 16       	cp	r14, r30
    cda6:	ff 06       	cpc	r15, r31
    cda8:	49 f0       	breq	.+18     	; 0xcdbc <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    cdaa:	82 91       	ld	r24, -Z
    cdac:	80 32       	cpi	r24, 0x20	; 32
    cdae:	c9 f3       	breq	.-14     	; 0xcda2 <f_getlabel+0x80>
    cdb0:	05 c0       	rjmp	.+10     	; 0xcdbc <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cdb2:	84 30       	cpi	r24, 0x04	; 4
    cdb4:	91 05       	cpc	r25, r1
    cdb6:	61 f5       	brne	.+88     	; 0xce10 <f_getlabel+0xee>
			label[0] = 0;
    cdb8:	f7 01       	movw	r30, r14
    cdba:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cdbc:	c1 14       	cp	r12, r1
    cdbe:	d1 04       	cpc	r13, r1
    cdc0:	41 f1       	breq	.+80     	; 0xce12 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    cdc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdc4:	98 a9       	ldd	r25, Y+48	; 0x30
    cdc6:	fc 01       	movw	r30, r24
    cdc8:	41 a1       	ldd	r20, Z+33	; 0x21
    cdca:	52 a1       	ldd	r21, Z+34	; 0x22
    cdcc:	63 a1       	ldd	r22, Z+35	; 0x23
    cdce:	74 a1       	ldd	r23, Z+36	; 0x24
    cdd0:	0e 94 98 49 	call	0x9330	; 0x9330 <move_window>
    cdd4:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    cdd6:	89 2b       	or	r24, r25
    cdd8:	e1 f4       	brne	.+56     	; 0xce12 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    cdda:	ef a5       	ldd	r30, Y+47	; 0x2f
    cddc:	f8 a9       	ldd	r31, Y+48	; 0x30
    cdde:	80 81       	ld	r24, Z
    cde0:	83 30       	cpi	r24, 0x03	; 3
    cde2:	29 f0       	breq	.+10     	; 0xcdee <f_getlabel+0xcc>
    cde4:	84 30       	cpi	r24, 0x04	; 4
    cde6:	31 f0       	breq	.+12     	; 0xcdf4 <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    cde8:	87 e2       	ldi	r24, 0x27	; 39
    cdea:	90 e0       	ldi	r25, 0x00	; 0
    cdec:	05 c0       	rjmp	.+10     	; 0xcdf8 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    cdee:	83 e4       	ldi	r24, 0x43	; 67
    cdf0:	90 e0       	ldi	r25, 0x00	; 0
    cdf2:	02 c0       	rjmp	.+4      	; 0xcdf8 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    cdf4:	84 e6       	ldi	r24, 0x64	; 100
    cdf6:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    cdf8:	f5 96       	adiw	r30, 0x35	; 53
    cdfa:	8e 0f       	add	r24, r30
    cdfc:	9f 1f       	adc	r25, r31
    cdfe:	0e 94 d6 45 	call	0x8bac	; 0x8bac <ld_dword>
    ce02:	d6 01       	movw	r26, r12
    ce04:	6d 93       	st	X+, r22
    ce06:	7d 93       	st	X+, r23
    ce08:	8d 93       	st	X+, r24
    ce0a:	9c 93       	st	X, r25
    ce0c:	13 97       	sbiw	r26, 0x03	; 3
    ce0e:	01 c0       	rjmp	.+2      	; 0xce12 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ce10:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    ce12:	c8 01       	movw	r24, r16
    ce14:	e2 96       	adiw	r28, 0x32	; 50
    ce16:	e8 e0       	ldi	r30, 0x08	; 8
    ce18:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000ce1c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    ce1c:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <safemalloc>
}
    ce20:	08 95       	ret

0000ce22 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    ce22:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <safefree>
    ce26:	08 95       	ret

0000ce28 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    ce28:	cf 92       	push	r12
    ce2a:	df 92       	push	r13
    ce2c:	ef 92       	push	r14
    ce2e:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    ce30:	60 38       	cpi	r22, 0x80	; 128
    ce32:	71 05       	cpc	r23, r1
    ce34:	81 05       	cpc	r24, r1
    ce36:	91 05       	cpc	r25, r1
    ce38:	10 f4       	brcc	.+4      	; 0xce3e <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    ce3a:	cb 01       	movw	r24, r22
    ce3c:	23 c0       	rjmp	.+70     	; 0xce84 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    ce3e:	61 15       	cp	r22, r1
    ce40:	71 05       	cpc	r23, r1
    ce42:	21 e0       	ldi	r18, 0x01	; 1
    ce44:	82 07       	cpc	r24, r18
    ce46:	91 05       	cpc	r25, r1
    ce48:	d8 f4       	brcc	.+54     	; 0xce80 <ff_uni2oem+0x58>
    ce4a:	45 3b       	cpi	r20, 0xB5	; 181
    ce4c:	51 40       	sbci	r21, 0x01	; 1
    ce4e:	c1 f4       	brne	.+48     	; 0xce80 <ff_uni2oem+0x58>
    ce50:	e6 ea       	ldi	r30, 0xA6	; 166
    ce52:	f7 e0       	ldi	r31, 0x07	; 7
    ce54:	20 e0       	ldi	r18, 0x00	; 0
    ce56:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    ce58:	c1 90       	ld	r12, Z+
    ce5a:	d1 90       	ld	r13, Z+
    ce5c:	e1 2c       	mov	r14, r1
    ce5e:	f1 2c       	mov	r15, r1
    ce60:	6c 15       	cp	r22, r12
    ce62:	7d 05       	cpc	r23, r13
    ce64:	8e 05       	cpc	r24, r14
    ce66:	9f 05       	cpc	r25, r15
    ce68:	29 f0       	breq	.+10     	; 0xce74 <ff_uni2oem+0x4c>
    ce6a:	2f 5f       	subi	r18, 0xFF	; 255
    ce6c:	3f 4f       	sbci	r19, 0xFF	; 255
    ce6e:	20 38       	cpi	r18, 0x80	; 128
    ce70:	31 05       	cpc	r19, r1
    ce72:	91 f7       	brne	.-28     	; 0xce58 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    ce74:	b9 01       	movw	r22, r18
    ce76:	60 58       	subi	r22, 0x80	; 128
    ce78:	7f 4f       	sbci	r23, 0xFF	; 255
    ce7a:	cb 01       	movw	r24, r22
    ce7c:	99 27       	eor	r25, r25
    ce7e:	02 c0       	rjmp	.+4      	; 0xce84 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    ce80:	80 e0       	ldi	r24, 0x00	; 0
    ce82:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    ce84:	ff 90       	pop	r15
    ce86:	ef 90       	pop	r14
    ce88:	df 90       	pop	r13
    ce8a:	cf 90       	pop	r12
    ce8c:	08 95       	ret

0000ce8e <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    ce8e:	80 38       	cpi	r24, 0x80	; 128
    ce90:	91 05       	cpc	r25, r1
    ce92:	88 f0       	brcs	.+34     	; 0xceb6 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    ce94:	65 3b       	cpi	r22, 0xB5	; 181
    ce96:	71 40       	sbci	r23, 0x01	; 1
    ce98:	61 f4       	brne	.+24     	; 0xceb2 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    ce9a:	8f 3f       	cpi	r24, 0xFF	; 255
    ce9c:	91 05       	cpc	r25, r1
    ce9e:	09 f0       	breq	.+2      	; 0xcea2 <ff_oem2uni+0x14>
    cea0:	40 f4       	brcc	.+16     	; 0xceb2 <ff_oem2uni+0x24>
    cea2:	88 0f       	add	r24, r24
    cea4:	99 1f       	adc	r25, r25
    cea6:	fc 01       	movw	r30, r24
    cea8:	ea 55       	subi	r30, 0x5A	; 90
    ceaa:	f9 4f       	sbci	r31, 0xF9	; 249
    ceac:	80 81       	ld	r24, Z
    ceae:	91 81       	ldd	r25, Z+1	; 0x01
    ceb0:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    ceb2:	80 e0       	ldi	r24, 0x00	; 0
    ceb4:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    ceb6:	08 95       	ret

0000ceb8 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    ceb8:	61 15       	cp	r22, r1
    ceba:	71 05       	cpc	r23, r1
    cebc:	21 e0       	ldi	r18, 0x01	; 1
    cebe:	82 07       	cpc	r24, r18
    cec0:	91 05       	cpc	r25, r1
    cec2:	08 f0       	brcs	.+2      	; 0xcec6 <ff_wtoupper+0xe>
    cec4:	5a c0       	rjmp	.+180    	; 0xcf7a <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    cec6:	61 15       	cp	r22, r1
    cec8:	80 e1       	ldi	r24, 0x10	; 16
    ceca:	78 07       	cpc	r23, r24
    cecc:	18 f0       	brcs	.+6      	; 0xced4 <ff_wtoupper+0x1c>
    cece:	a8 ef       	ldi	r26, 0xF8	; 248
    ced0:	b4 e0       	ldi	r27, 0x04	; 4
    ced2:	02 c0       	rjmp	.+4      	; 0xced8 <ff_wtoupper+0x20>
    ced4:	a4 eb       	ldi	r26, 0xB4	; 180
    ced6:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    ced8:	2d 91       	ld	r18, X+
    ceda:	3c 91       	ld	r19, X
    cedc:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    cede:	21 15       	cp	r18, r1
    cee0:	31 05       	cpc	r19, r1
    cee2:	09 f4       	brne	.+2      	; 0xcee6 <ff_wtoupper+0x2e>
    cee4:	48 c0       	rjmp	.+144    	; 0xcf76 <ff_wtoupper+0xbe>
    cee6:	62 17       	cp	r22, r18
    cee8:	73 07       	cpc	r23, r19
    ceea:	08 f4       	brcc	.+2      	; 0xceee <ff_wtoupper+0x36>
    ceec:	44 c0       	rjmp	.+136    	; 0xcf76 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    ceee:	14 96       	adiw	r26, 0x04	; 4
    cef0:	fd 01       	movw	r30, r26
    cef2:	32 97       	sbiw	r30, 0x02	; 2
    cef4:	80 81       	ld	r24, Z
    cef6:	91 81       	ldd	r25, Z+1	; 0x01
    cef8:	e9 2f       	mov	r30, r25
    cefa:	ff 27       	eor	r31, r31
    cefc:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    cefe:	a9 01       	movw	r20, r18
    cf00:	48 0f       	add	r20, r24
    cf02:	59 1f       	adc	r21, r25
    cf04:	64 17       	cp	r22, r20
    cf06:	75 07       	cpc	r23, r21
    cf08:	70 f5       	brcc	.+92     	; 0xcf66 <ff_wtoupper+0xae>
				switch (cmd) {
    cf0a:	e9 30       	cpi	r30, 0x09	; 9
    cf0c:	f1 05       	cpc	r31, r1
    cf0e:	98 f5       	brcc	.+102    	; 0xcf76 <ff_wtoupper+0xbe>
    cf10:	ec 54       	subi	r30, 0x4C	; 76
    cf12:	ff 4f       	sbci	r31, 0xFF	; 255
    cf14:	0c 94 be e2 	jmp	0x1c57c	; 0x1c57c <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    cf18:	62 1b       	sub	r22, r18
    cf1a:	73 0b       	sbc	r23, r19
    cf1c:	fb 01       	movw	r30, r22
    cf1e:	ee 0f       	add	r30, r30
    cf20:	ff 1f       	adc	r31, r31
    cf22:	ea 0f       	add	r30, r26
    cf24:	fb 1f       	adc	r31, r27
    cf26:	60 81       	ld	r22, Z
    cf28:	71 81       	ldd	r23, Z+1	; 0x01
    cf2a:	25 c0       	rjmp	.+74     	; 0xcf76 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    cf2c:	cb 01       	movw	r24, r22
    cf2e:	82 1b       	sub	r24, r18
    cf30:	93 0b       	sbc	r25, r19
    cf32:	81 70       	andi	r24, 0x01	; 1
    cf34:	99 27       	eor	r25, r25
    cf36:	68 1b       	sub	r22, r24
    cf38:	79 0b       	sbc	r23, r25
    cf3a:	1d c0       	rjmp	.+58     	; 0xcf76 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    cf3c:	60 51       	subi	r22, 0x10	; 16
    cf3e:	71 09       	sbc	r23, r1
    cf40:	1a c0       	rjmp	.+52     	; 0xcf76 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    cf42:	60 52       	subi	r22, 0x20	; 32
    cf44:	71 09       	sbc	r23, r1
    cf46:	17 c0       	rjmp	.+46     	; 0xcf76 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    cf48:	60 53       	subi	r22, 0x30	; 48
    cf4a:	71 09       	sbc	r23, r1
    cf4c:	14 c0       	rjmp	.+40     	; 0xcf76 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    cf4e:	6a 51       	subi	r22, 0x1A	; 26
    cf50:	71 09       	sbc	r23, r1
    cf52:	11 c0       	rjmp	.+34     	; 0xcf76 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    cf54:	68 5f       	subi	r22, 0xF8	; 248
    cf56:	7f 4f       	sbci	r23, 0xFF	; 255
    cf58:	0e c0       	rjmp	.+28     	; 0xcf76 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    cf5a:	60 55       	subi	r22, 0x50	; 80
    cf5c:	71 09       	sbc	r23, r1
    cf5e:	0b c0       	rjmp	.+22     	; 0xcf76 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    cf60:	60 56       	subi	r22, 0x60	; 96
    cf62:	7c 41       	sbci	r23, 0x1C	; 28
    cf64:	08 c0       	rjmp	.+16     	; 0xcf76 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    cf66:	ef 2b       	or	r30, r31
    cf68:	09 f0       	breq	.+2      	; 0xcf6c <ff_wtoupper+0xb4>
    cf6a:	b6 cf       	rjmp	.-148    	; 0xced8 <ff_wtoupper+0x20>
    cf6c:	88 0f       	add	r24, r24
    cf6e:	99 1f       	adc	r25, r25
    cf70:	a8 0f       	add	r26, r24
    cf72:	b9 1f       	adc	r27, r25
    cf74:	b1 cf       	rjmp	.-158    	; 0xced8 <ff_wtoupper+0x20>
		}
		uni = uc;
    cf76:	80 e0       	ldi	r24, 0x00	; 0
    cf78:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    cf7a:	08 95       	ret

0000cf7c <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    cf7c:	81 11       	cpse	r24, r1
    cf7e:	02 c0       	rjmp	.+4      	; 0xcf84 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    cf80:	a1 c1       	rjmp	.+834    	; 0xd2c4 <mmc_disk_status>
    cf82:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    cf84:	81 e0       	ldi	r24, 0x01	; 1
}
    cf86:	08 95       	ret

0000cf88 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    cf88:	81 11       	cpse	r24, r1
    cf8a:	02 c0       	rjmp	.+4      	; 0xcf90 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    cf8c:	f6 c0       	rjmp	.+492    	; 0xd17a <mmc_disk_initialize>
    cf8e:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    cf90:	81 e0       	ldi	r24, 0x01	; 1
}
    cf92:	08 95       	ret

0000cf94 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    cf94:	0f 93       	push	r16
    cf96:	1f 93       	push	r17
    cf98:	fb 01       	movw	r30, r22
    switch (pdrv)
    cf9a:	81 11       	cpse	r24, r1
    cf9c:	06 c0       	rjmp	.+12     	; 0xcfaa <disk_read+0x16>
    cf9e:	ba 01       	movw	r22, r20
    cfa0:	a9 01       	movw	r20, r18
    cfa2:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    cfa4:	98 01       	movw	r18, r16
    cfa6:	91 d1       	rcall	.+802    	; 0xd2ca <mmc_disk_read>
    cfa8:	02 c0       	rjmp	.+4      	; 0xcfae <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    cfaa:	84 e0       	ldi	r24, 0x04	; 4
    cfac:	90 e0       	ldi	r25, 0x00	; 0
}
    cfae:	1f 91       	pop	r17
    cfb0:	0f 91       	pop	r16
    cfb2:	08 95       	ret

0000cfb4 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    cfb4:	0f 93       	push	r16
    cfb6:	1f 93       	push	r17
    cfb8:	fb 01       	movw	r30, r22
    switch (pdrv)
    cfba:	81 11       	cpse	r24, r1
    cfbc:	06 c0       	rjmp	.+12     	; 0xcfca <disk_write+0x16>
    cfbe:	ba 01       	movw	r22, r20
    cfc0:	a9 01       	movw	r20, r18
    cfc2:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    cfc4:	98 01       	movw	r18, r16
    cfc6:	e2 d1       	rcall	.+964    	; 0xd38c <mmc_disk_write>
    cfc8:	02 c0       	rjmp	.+4      	; 0xcfce <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    cfca:	84 e0       	ldi	r24, 0x04	; 4
    cfcc:	90 e0       	ldi	r25, 0x00	; 0
}
    cfce:	1f 91       	pop	r17
    cfd0:	0f 91       	pop	r16
    cfd2:	08 95       	ret

0000cfd4 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    cfd4:	96 2f       	mov	r25, r22
    switch (pdrv)
    cfd6:	81 11       	cpse	r24, r1
    cfd8:	04 c0       	rjmp	.+8      	; 0xcfe2 <disk_ioctl+0xe>
    cfda:	ba 01       	movw	r22, r20
    cfdc:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    cfde:	4a c2       	rjmp	.+1172   	; 0xd474 <mmc_disk_ioctl>
    cfe0:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    cfe2:	84 e0       	ldi	r24, 0x04	; 4
    cfe4:	90 e0       	ldi	r25, 0x00	; 0
}
    cfe6:	08 95       	ret

0000cfe8 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    cfe8:	f9 c4       	rjmp	.+2546   	; 0xd9dc <mmc_spi_TXRX>
    return dat;
}
    cfea:	08 95       	ret

0000cfec <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    cfec:	ce d4       	rcall	.+2460   	; 0xd98a <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    cfee:	8f ef       	ldi	r24, 0xFF	; 255
    cff0:	fb df       	rcall	.-10     	; 0xcfe8 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    cff2:	8f ef       	ldi	r24, 0xFF	; 255
    cff4:	f9 cf       	rjmp	.-14     	; 0xcfe8 <xchg_spi>
    cff6:	08 95       	ret

0000cff8 <rcvr_datablock>:
    cff8:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    cffa:	1f 93       	push	r17
    cffc:	cf 93       	push	r28
    cffe:	df 93       	push	r29
    d000:	ec 01       	movw	r28, r24
    d002:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d004:	88 ee       	ldi	r24, 0xE8	; 232
    d006:	93 e0       	ldi	r25, 0x03	; 3
    d008:	ec d4       	rcall	.+2520   	; 0xd9e2 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d00a:	8f ef       	ldi	r24, 0xFF	; 255
    d00c:	e7 d4       	rcall	.+2510   	; 0xd9dc <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d00e:	8f 3f       	cpi	r24, 0xFF	; 255
    d010:	31 f4       	brne	.+12     	; 0xd01e <rcvr_datablock+0x26>
    d012:	ee d4       	rcall	.+2524   	; 0xd9f0 <mmc_test_timeout>
    d014:	89 2b       	or	r24, r25
    d016:	c9 f3       	breq	.-14     	; 0xd00a <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d018:	80 e0       	ldi	r24, 0x00	; 0
    d01a:	90 e0       	ldi	r25, 0x00	; 0
    d01c:	0b c0       	rjmp	.+22     	; 0xd034 <rcvr_datablock+0x3c>
    d01e:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d020:	d9 f7       	brne	.-10     	; 0xd018 <rcvr_datablock+0x20>
    d022:	b8 01       	movw	r22, r16
    d024:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d026:	d7 d4       	rcall	.+2478   	; 0xd9d6 <mmc_spi_RX_buffer>
    d028:	8f ef       	ldi	r24, 0xFF	; 255
    d02a:	de df       	rcall	.-68     	; 0xcfe8 <xchg_spi>
    xchg_spi(0xFF);
    d02c:	8f ef       	ldi	r24, 0xFF	; 255
    d02e:	dc df       	rcall	.-72     	; 0xcfe8 <xchg_spi>
    d030:	81 e0       	ldi	r24, 0x01	; 1
    d032:	90 e0       	ldi	r25, 0x00	; 0
    d034:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d036:	cf 91       	pop	r28
    d038:	1f 91       	pop	r17
    d03a:	0f 91       	pop	r16
    d03c:	08 95       	ret

0000d03e <wait_ready>:
    d03e:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d040:	d0 d4       	rcall	.+2464   	; 0xd9e2 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d042:	8f ef       	ldi	r24, 0xFF	; 255
    d044:	cb d4       	rcall	.+2454   	; 0xd9dc <mmc_spi_TXRX>
    d046:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d048:	8f 3f       	cpi	r24, 0xFF	; 255
    d04a:	19 f0       	breq	.+6      	; 0xd052 <wait_ready+0x14>
    d04c:	d1 d4       	rcall	.+2466   	; 0xd9f0 <mmc_test_timeout>
    d04e:	89 2b       	or	r24, r25
    d050:	c1 f3       	breq	.-16     	; 0xd042 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d052:	81 e0       	ldi	r24, 0x01	; 1
    d054:	90 e0       	ldi	r25, 0x00	; 0
    d056:	cf 3f       	cpi	r28, 0xFF	; 255
    d058:	11 f0       	breq	.+4      	; 0xd05e <wait_ready+0x20>
    d05a:	80 e0       	ldi	r24, 0x00	; 0
    d05c:	90 e0       	ldi	r25, 0x00	; 0
}
    d05e:	cf 91       	pop	r28
    d060:	08 95       	ret

0000d062 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d062:	cf 93       	push	r28
    d064:	df 93       	push	r29
    d066:	00 d0       	rcall	.+0      	; 0xd068 <select+0x6>
    d068:	1f 92       	push	r1
    CS_LOW();
    d06a:	82 d4       	rcall	.+2308   	; 0xd970 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d06c:	8f ef       	ldi	r24, 0xFF	; 255
    d06e:	bc df       	rcall	.-136    	; 0xcfe8 <xchg_spi>

    if (wait_ready(1000))
    d070:	88 ee       	ldi	r24, 0xE8	; 232
    d072:	93 e0       	ldi	r25, 0x03	; 3
    d074:	e4 df       	rcall	.-56     	; 0xd03e <wait_ready>
    d076:	ec 01       	movw	r28, r24
    d078:	89 2b       	or	r24, r25
    d07a:	61 f4       	brne	.+24     	; 0xd094 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d07c:	89 e6       	ldi	r24, 0x69	; 105
    d07e:	97 e0       	ldi	r25, 0x07	; 7
    d080:	a0 e0       	ldi	r26, 0x00	; 0
    d082:	ed b7       	in	r30, 0x3d	; 61
    d084:	fe b7       	in	r31, 0x3e	; 62
    d086:	81 83       	std	Z+1, r24	; 0x01
    d088:	92 83       	std	Z+2, r25	; 0x02
    d08a:	a3 83       	std	Z+3, r26	; 0x03
    d08c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    deselect();
    d090:	ad df       	rcall	.-166    	; 0xcfec <deselect>
    d092:	02 c0       	rjmp	.+4      	; 0xd098 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d094:	c1 e0       	ldi	r28, 0x01	; 1
    d096:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d098:	ce 01       	movw	r24, r28
    d09a:	cd b7       	in	r28, 0x3d	; 61
    d09c:	de b7       	in	r29, 0x3e	; 62
    d09e:	23 96       	adiw	r28, 0x03	; 3
    d0a0:	e2 e0       	ldi	r30, 0x02	; 2
    d0a2:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000d0a6 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d0a6:	ff 92       	push	r15
    d0a8:	0f 93       	push	r16
    d0aa:	1f 93       	push	r17
    d0ac:	cf 93       	push	r28
    d0ae:	df 93       	push	r29
    d0b0:	c8 2f       	mov	r28, r24
    d0b2:	d4 2f       	mov	r29, r20
    d0b4:	15 2f       	mov	r17, r21
    d0b6:	06 2f       	mov	r16, r22
    d0b8:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d0ba:	87 ff       	sbrs	r24, 7
    d0bc:	08 c0       	rjmp	.+16     	; 0xd0ce <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d0be:	40 e0       	ldi	r20, 0x00	; 0
    d0c0:	50 e0       	ldi	r21, 0x00	; 0
    d0c2:	ba 01       	movw	r22, r20
    d0c4:	87 e3       	ldi	r24, 0x37	; 55
    d0c6:	ef df       	rcall	.-34     	; 0xd0a6 <send_cmd>
        if (res > 1) return res;
    d0c8:	82 30       	cpi	r24, 0x02	; 2
    d0ca:	58 f5       	brcc	.+86     	; 0xd122 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d0cc:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d0ce:	cc 30       	cpi	r28, 0x0C	; 12
    d0d0:	71 f4       	brne	.+28     	; 0xd0ee <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d0d2:	8c 2f       	mov	r24, r28
    d0d4:	80 64       	ori	r24, 0x40	; 64
    d0d6:	88 df       	rcall	.-240    	; 0xcfe8 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d0d8:	8f 2d       	mov	r24, r15
    d0da:	86 df       	rcall	.-244    	; 0xcfe8 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d0dc:	80 2f       	mov	r24, r16
    d0de:	84 df       	rcall	.-248    	; 0xcfe8 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d0e0:	81 2f       	mov	r24, r17
    d0e2:	82 df       	rcall	.-252    	; 0xcfe8 <xchg_spi>
    d0e4:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d0e6:	80 df       	rcall	.-256    	; 0xcfe8 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d0e8:	cc 23       	and	r28, r28
    d0ea:	c9 f0       	breq	.+50     	; 0xd11e <send_cmd+0x78>
    d0ec:	06 c0       	rjmp	.+12     	; 0xd0fa <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d0ee:	7e df       	rcall	.-260    	; 0xcfec <deselect>
    d0f0:	b8 df       	rcall	.-144    	; 0xd062 <select>
        if (!select()) return 0xFF;
    d0f2:	89 2b       	or	r24, r25
    d0f4:	71 f7       	brne	.-36     	; 0xd0d2 <send_cmd+0x2c>
    d0f6:	8f ef       	ldi	r24, 0xFF	; 255
    d0f8:	14 c0       	rjmp	.+40     	; 0xd122 <send_cmd+0x7c>
    d0fa:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d0fc:	11 f4       	brne	.+4      	; 0xd102 <send_cmd+0x5c>
    d0fe:	87 e8       	ldi	r24, 0x87	; 135
    d100:	01 c0       	rjmp	.+2      	; 0xd104 <send_cmd+0x5e>

    xchg_spi(n);
    d102:	81 e0       	ldi	r24, 0x01	; 1
    d104:	71 df       	rcall	.-286    	; 0xcfe8 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d106:	cc 30       	cpi	r28, 0x0C	; 12
    d108:	11 f4       	brne	.+4      	; 0xd10e <send_cmd+0x68>
    d10a:	8f ef       	ldi	r24, 0xFF	; 255
    d10c:	6d df       	rcall	.-294    	; 0xcfe8 <xchg_spi>
    d10e:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d110:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d112:	64 d4       	rcall	.+2248   	; 0xd9dc <mmc_spi_TXRX>
    d114:	87 ff       	sbrs	r24, 7
    d116:	05 c0       	rjmp	.+10     	; 0xd122 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d118:	c1 50       	subi	r28, 0x01	; 1
    d11a:	d1 f7       	brne	.-12     	; 0xd110 <send_cmd+0x6a>
    d11c:	02 c0       	rjmp	.+4      	; 0xd122 <send_cmd+0x7c>
    d11e:	85 e9       	ldi	r24, 0x95	; 149
    d120:	f5 cf       	rjmp	.-22     	; 0xd10c <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d122:	cd b7       	in	r28, 0x3d	; 61
    d124:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d126:	e5 e0       	ldi	r30, 0x05	; 5
    d128:	0c 94 16 e3 	jmp	0x1c62c	; 0x1c62c <__epilogue_restores__+0x1a>

0000d12c <xmit_datablock>:
    d12c:	0f 93       	push	r16
    d12e:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d130:	cf 93       	push	r28
    d132:	8c 01       	movw	r16, r24
    d134:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d136:	88 ee       	ldi	r24, 0xE8	; 232
    d138:	93 e0       	ldi	r25, 0x03	; 3
    d13a:	81 df       	rcall	.-254    	; 0xd03e <wait_ready>
    d13c:	00 97       	sbiw	r24, 0x00	; 0
    d13e:	c9 f0       	breq	.+50     	; 0xd172 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d140:	8c 2f       	mov	r24, r28
    d142:	52 df       	rcall	.-348    	; 0xcfe8 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d144:	cd 3f       	cpi	r28, 0xFD	; 253
    d146:	99 f0       	breq	.+38     	; 0xd16e <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d148:	60 e0       	ldi	r22, 0x00	; 0
    d14a:	72 e0       	ldi	r23, 0x02	; 2
    d14c:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d14e:	40 d4       	rcall	.+2176   	; 0xd9d0 <mmc_spi_TX_buffer>
    d150:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d152:	4a df       	rcall	.-364    	; 0xcfe8 <xchg_spi>
    d154:	8f ef       	ldi	r24, 0xFF	; 255
    d156:	48 df       	rcall	.-368    	; 0xcfe8 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d158:	8f ef       	ldi	r24, 0xFF	; 255
    d15a:	40 d4       	rcall	.+2176   	; 0xd9dc <mmc_spi_TXRX>
    d15c:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d15e:	31 e0       	ldi	r19, 0x01	; 1
    d160:	20 e0       	ldi	r18, 0x00	; 0
    d162:	85 30       	cpi	r24, 0x05	; 5
    d164:	09 f0       	breq	.+2      	; 0xd168 <xmit_datablock+0x3c>
    d166:	30 e0       	ldi	r19, 0x00	; 0
    d168:	83 2f       	mov	r24, r19
    d16a:	92 2f       	mov	r25, r18
    d16c:	02 c0       	rjmp	.+4      	; 0xd172 <xmit_datablock+0x46>
    d16e:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d170:	90 e0       	ldi	r25, 0x00	; 0
    d172:	cf 91       	pop	r28
}
    d174:	1f 91       	pop	r17
    d176:	0f 91       	pop	r16
    d178:	08 95       	ret

0000d17a <mmc_disk_initialize>:
    d17a:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d17c:	b0 e0       	ldi	r27, 0x00	; 0
    d17e:	e3 ec       	ldi	r30, 0xC3	; 195
    d180:	f8 e6       	ldi	r31, 0x68	; 104
    d182:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d186:	59 d4       	rcall	.+2226   	; 0xda3a <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d188:	64 e6       	ldi	r22, 0x64	; 100
    d18a:	70 e0       	ldi	r23, 0x00	; 0
    d18c:	80 e0       	ldi	r24, 0x00	; 0
    d18e:	90 e0       	ldi	r25, 0x00	; 0
    d190:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d194:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d198:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d19a:	8e c0       	rjmp	.+284    	; 0xd2b8 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d19c:	4d d4       	rcall	.+2202   	; 0xda38 <mmc_power_on>
    d19e:	f9 d3       	rcall	.+2034   	; 0xd992 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d1a0:	1a e0       	ldi	r17, 0x0A	; 10
    d1a2:	8f ef       	ldi	r24, 0xFF	; 255
    d1a4:	21 df       	rcall	.-446    	; 0xcfe8 <xchg_spi>
    d1a6:	11 50       	subi	r17, 0x01	; 1
    d1a8:	e1 f7       	brne	.-8      	; 0xd1a2 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d1aa:	40 e0       	ldi	r20, 0x00	; 0
    d1ac:	50 e0       	ldi	r21, 0x00	; 0
    d1ae:	ba 01       	movw	r22, r20
    d1b0:	80 e0       	ldi	r24, 0x00	; 0
    d1b2:	79 df       	rcall	.-270    	; 0xd0a6 <send_cmd>
    d1b4:	81 30       	cpi	r24, 0x01	; 1
    d1b6:	09 f0       	breq	.+2      	; 0xd1ba <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d1b8:	6f c0       	rjmp	.+222    	; 0xd298 <mmc_disk_initialize+0x11e>
    d1ba:	80 ed       	ldi	r24, 0xD0	; 208
    d1bc:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d1be:	11 d4       	rcall	.+2082   	; 0xd9e2 <mmc_set_ms_timeout>
    d1c0:	4a ea       	ldi	r20, 0xAA	; 170
    d1c2:	51 e0       	ldi	r21, 0x01	; 1
    d1c4:	60 e0       	ldi	r22, 0x00	; 0
    d1c6:	70 e0       	ldi	r23, 0x00	; 0
    d1c8:	88 e0       	ldi	r24, 0x08	; 8
    d1ca:	6d df       	rcall	.-294    	; 0xd0a6 <send_cmd>
    d1cc:	81 30       	cpi	r24, 0x01	; 1
    d1ce:	09 f0       	breq	.+2      	; 0xd1d2 <mmc_disk_initialize+0x58>
    d1d0:	3d c0       	rjmp	.+122    	; 0xd24c <mmc_disk_initialize+0xd2>
    d1d2:	8e 01       	movw	r16, r28
    d1d4:	0f 5f       	subi	r16, 0xFF	; 255
    d1d6:	1f 4f       	sbci	r17, 0xFF	; 255
    d1d8:	6e 01       	movw	r12, r28
    d1da:	85 e0       	ldi	r24, 0x05	; 5
    d1dc:	c8 0e       	add	r12, r24
    d1de:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d1e0:	78 01       	movw	r14, r16
    d1e2:	8f ef       	ldi	r24, 0xFF	; 255
    d1e4:	fb d3       	rcall	.+2038   	; 0xd9dc <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d1e6:	f7 01       	movw	r30, r14
    d1e8:	81 93       	st	Z+, r24
    d1ea:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d1ec:	ce 16       	cp	r12, r30
    d1ee:	df 06       	cpc	r13, r31
    d1f0:	c1 f7       	brne	.-16     	; 0xd1e2 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d1f2:	8b 81       	ldd	r24, Y+3	; 0x03
    d1f4:	81 30       	cpi	r24, 0x01	; 1
    d1f6:	09 f0       	breq	.+2      	; 0xd1fa <mmc_disk_initialize+0x80>
    d1f8:	4f c0       	rjmp	.+158    	; 0xd298 <mmc_disk_initialize+0x11e>
    d1fa:	8c 81       	ldd	r24, Y+4	; 0x04
    d1fc:	8a 3a       	cpi	r24, 0xAA	; 170
    d1fe:	09 f0       	breq	.+2      	; 0xd202 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d200:	4b c0       	rjmp	.+150    	; 0xd298 <mmc_disk_initialize+0x11e>
    d202:	f6 d3       	rcall	.+2028   	; 0xd9f0 <mmc_test_timeout>
    d204:	89 2b       	or	r24, r25
    d206:	29 f0       	breq	.+10     	; 0xd212 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d208:	f3 d3       	rcall	.+2022   	; 0xd9f0 <mmc_test_timeout>
    d20a:	89 2b       	or	r24, r25
    d20c:	09 f0       	breq	.+2      	; 0xd210 <mmc_disk_initialize+0x96>
    d20e:	44 c0       	rjmp	.+136    	; 0xd298 <mmc_disk_initialize+0x11e>
    d210:	09 c0       	rjmp	.+18     	; 0xd224 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d212:	40 e0       	ldi	r20, 0x00	; 0
    d214:	50 e0       	ldi	r21, 0x00	; 0
    d216:	60 e0       	ldi	r22, 0x00	; 0
    d218:	70 e4       	ldi	r23, 0x40	; 64
    d21a:	89 ea       	ldi	r24, 0xA9	; 169
    d21c:	44 df       	rcall	.-376    	; 0xd0a6 <send_cmd>
    d21e:	81 11       	cpse	r24, r1
    d220:	f0 cf       	rjmp	.-32     	; 0xd202 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d222:	f2 cf       	rjmp	.-28     	; 0xd208 <mmc_disk_initialize+0x8e>
    d224:	40 e0       	ldi	r20, 0x00	; 0
    d226:	50 e0       	ldi	r21, 0x00	; 0
    d228:	ba 01       	movw	r22, r20
    d22a:	8a e3       	ldi	r24, 0x3A	; 58
    d22c:	3c df       	rcall	.-392    	; 0xd0a6 <send_cmd>
    d22e:	81 11       	cpse	r24, r1
    d230:	33 c0       	rjmp	.+102    	; 0xd298 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d232:	8f ef       	ldi	r24, 0xFF	; 255
    d234:	d3 d3       	rcall	.+1958   	; 0xd9dc <mmc_spi_TXRX>
    d236:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d238:	81 93       	st	Z+, r24
    d23a:	8f 01       	movw	r16, r30
    d23c:	ce 16       	cp	r12, r30
    d23e:	df 06       	cpc	r13, r31
    d240:	c1 f7       	brne	.-16     	; 0xd232 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d242:	89 81       	ldd	r24, Y+1	; 0x01
    d244:	86 fd       	sbrc	r24, 6
    d246:	2a c0       	rjmp	.+84     	; 0xd29c <mmc_disk_initialize+0x122>
    d248:	14 e0       	ldi	r17, 0x04	; 4
    d24a:	29 c0       	rjmp	.+82     	; 0xd29e <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d24c:	80 ed       	ldi	r24, 0xD0	; 208
    d24e:	97 e0       	ldi	r25, 0x07	; 7
    d250:	c8 d3       	rcall	.+1936   	; 0xd9e2 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d252:	40 e0       	ldi	r20, 0x00	; 0
    d254:	50 e0       	ldi	r21, 0x00	; 0
    d256:	ba 01       	movw	r22, r20
    d258:	89 ea       	ldi	r24, 0xA9	; 169
    d25a:	25 df       	rcall	.-438    	; 0xd0a6 <send_cmd>
    d25c:	82 30       	cpi	r24, 0x02	; 2
    d25e:	18 f0       	brcs	.+6      	; 0xd266 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d260:	11 e0       	ldi	r17, 0x01	; 1
    d262:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d264:	02 c0       	rjmp	.+4      	; 0xd26a <mmc_disk_initialize+0xf0>
    d266:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d268:	09 ea       	ldi	r16, 0xA9	; 169
    d26a:	c2 d3       	rcall	.+1924   	; 0xd9f0 <mmc_test_timeout>
    d26c:	89 2b       	or	r24, r25
    d26e:	21 f0       	breq	.+8      	; 0xd278 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d270:	bf d3       	rcall	.+1918   	; 0xd9f0 <mmc_test_timeout>
    d272:	89 2b       	or	r24, r25
    d274:	89 f4       	brne	.+34     	; 0xd298 <mmc_disk_initialize+0x11e>
    d276:	08 c0       	rjmp	.+16     	; 0xd288 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d278:	40 e0       	ldi	r20, 0x00	; 0
    d27a:	50 e0       	ldi	r21, 0x00	; 0
    d27c:	ba 01       	movw	r22, r20
    d27e:	80 2f       	mov	r24, r16
    d280:	12 df       	rcall	.-476    	; 0xd0a6 <send_cmd>
    d282:	81 11       	cpse	r24, r1
    d284:	f2 cf       	rjmp	.-28     	; 0xd26a <mmc_disk_initialize+0xf0>
    d286:	f4 cf       	rjmp	.-24     	; 0xd270 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d288:	40 e0       	ldi	r20, 0x00	; 0
    d28a:	52 e0       	ldi	r21, 0x02	; 2
    d28c:	60 e0       	ldi	r22, 0x00	; 0
    d28e:	70 e0       	ldi	r23, 0x00	; 0
    d290:	80 e1       	ldi	r24, 0x10	; 16
    d292:	09 df       	rcall	.-494    	; 0xd0a6 <send_cmd>
    d294:	88 23       	and	r24, r24
                ty = 0;
    d296:	19 f0       	breq	.+6      	; 0xd29e <mmc_disk_initialize+0x124>
    d298:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d29a:	01 c0       	rjmp	.+2      	; 0xd29e <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d29c:	1c e0       	ldi	r17, 0x0C	; 12
    d29e:	10 93 23 18 	sts	0x1823, r17	; 0x801823 <CardType>
    deselect();
    d2a2:	a4 de       	rcall	.-696    	; 0xcfec <deselect>

    if (ty)                                       /* Initialization succeded */
    d2a4:	11 23       	and	r17, r17
    d2a6:	39 f0       	breq	.+14     	; 0xd2b6 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d2a8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2ac:	8e 7f       	andi	r24, 0xFE	; 254
    d2ae:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d2b2:	81 d3       	rcall	.+1794   	; 0xd9b6 <mmc_fast>
    d2b4:	01 c0       	rjmp	.+2      	; 0xd2b8 <mmc_disk_initialize+0x13e>
    d2b6:	c1 d3       	rcall	.+1922   	; 0xda3a <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d2b8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d2bc:	24 96       	adiw	r28, 0x04	; 4
    d2be:	e8 e0       	ldi	r30, 0x08	; 8
}
    d2c0:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000d2c4 <mmc_disk_status>:
    d2c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d2c8:	08 95       	ret

0000d2ca <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d2ca:	8f 92       	push	r8
    d2cc:	9f 92       	push	r9
    d2ce:	af 92       	push	r10
    d2d0:	bf 92       	push	r11
    d2d2:	ef 92       	push	r14
    d2d4:	ff 92       	push	r15
    d2d6:	1f 93       	push	r17
    d2d8:	cf 93       	push	r28
    d2da:	df 93       	push	r29
    d2dc:	7c 01       	movw	r14, r24
    d2de:	4a 01       	movw	r8, r20
    d2e0:	5b 01       	movw	r10, r22
    d2e2:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d2e4:	20 97       	sbiw	r28, 0x00	; 0
    d2e6:	19 f4       	brne	.+6      	; 0xd2ee <mmc_disk_read+0x24>
    {
        deselect();
    d2e8:	81 de       	rcall	.-766    	; 0xcfec <deselect>
        return RES_PARERR;
    d2ea:	84 e0       	ldi	r24, 0x04	; 4
    d2ec:	0d c0       	rjmp	.+26     	; 0xd308 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d2ee:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2f2:	88 23       	and	r24, r24
    d2f4:	19 f0       	breq	.+6      	; 0xd2fc <mmc_disk_read+0x32>
		set_error(1);
    d2f6:	81 e0       	ldi	r24, 0x01	; 1
    d2f8:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <set_error>

    if (Stat & STA_NOINIT)
    d2fc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d300:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d302:	04 c0       	rjmp	.+8      	; 0xd30c <mmc_disk_read+0x42>
    d304:	73 de       	rcall	.-794    	; 0xcfec <deselect>
        return RES_NOTRDY;
    d306:	83 e0       	ldi	r24, 0x03	; 3
    d308:	90 e0       	ldi	r25, 0x00	; 0
    d30a:	36 c0       	rjmp	.+108    	; 0xd378 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d30c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d310:	81 fd       	sbrc	r24, 1
    d312:	f8 cf       	rjmp	.-16     	; 0xd304 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d314:	46 9a       	sbi	0x08, 6	; 8
    d316:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d318:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d31c:	83 fd       	sbrc	r24, 3
    d31e:	07 c0       	rjmp	.+14     	; 0xd32e <mmc_disk_read+0x64>
    d320:	89 e0       	ldi	r24, 0x09	; 9
    d322:	88 0c       	add	r8, r8
    d324:	99 1c       	adc	r9, r9
    d326:	aa 1c       	adc	r10, r10
    d328:	bb 1c       	adc	r11, r11
    d32a:	8a 95       	dec	r24
    d32c:	d1 f7       	brne	.-12     	; 0xd322 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d32e:	c2 30       	cpi	r28, 0x02	; 2
    d330:	d1 05       	cpc	r29, r1
    d332:	10 f4       	brcc	.+4      	; 0xd338 <mmc_disk_read+0x6e>
    d334:	11 e1       	ldi	r17, 0x11	; 17
    d336:	01 c0       	rjmp	.+2      	; 0xd33a <mmc_disk_read+0x70>
    d338:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d33a:	b5 01       	movw	r22, r10
    d33c:	a4 01       	movw	r20, r8
    d33e:	81 2f       	mov	r24, r17
    d340:	b2 de       	rcall	.-668    	; 0xd0a6 <send_cmd>
    d342:	81 11       	cpse	r24, r1
    d344:	11 c0       	rjmp	.+34     	; 0xd368 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d346:	60 e0       	ldi	r22, 0x00	; 0
    d348:	72 e0       	ldi	r23, 0x02	; 2
    d34a:	c7 01       	movw	r24, r14
    d34c:	55 de       	rcall	.-854    	; 0xcff8 <rcvr_datablock>
    d34e:	89 2b       	or	r24, r25
    d350:	21 f0       	breq	.+8      	; 0xd35a <mmc_disk_read+0x90>
                break;
            buff += 512;
    d352:	8e ef       	ldi	r24, 0xFE	; 254
    d354:	f8 1a       	sub	r15, r24
        } while (--count);
    d356:	21 97       	sbiw	r28, 0x01	; 1
    d358:	b1 f7       	brne	.-20     	; 0xd346 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d35a:	12 31       	cpi	r17, 0x12	; 18
    d35c:	29 f4       	brne	.+10     	; 0xd368 <mmc_disk_read+0x9e>
    d35e:	40 e0       	ldi	r20, 0x00	; 0
    d360:	50 e0       	ldi	r21, 0x00	; 0
    d362:	ba 01       	movw	r22, r20
    d364:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d366:	9f de       	rcall	.-706    	; 0xd0a6 <send_cmd>
    d368:	41 de       	rcall	.-894    	; 0xcfec <deselect>
    GPIO_PIN_LOW(LED1);
    d36a:	46 98       	cbi	0x08, 6	; 8
    d36c:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d36e:	81 e0       	ldi	r24, 0x01	; 1
    d370:	90 e0       	ldi	r25, 0x00	; 0
    d372:	cd 2b       	or	r28, r29
    d374:	09 f4       	brne	.+2      	; 0xd378 <mmc_disk_read+0xae>
    d376:	80 e0       	ldi	r24, 0x00	; 0
}
    d378:	df 91       	pop	r29
    d37a:	cf 91       	pop	r28
    d37c:	1f 91       	pop	r17
    d37e:	ff 90       	pop	r15
    d380:	ef 90       	pop	r14
    d382:	bf 90       	pop	r11
    d384:	af 90       	pop	r10
    d386:	9f 90       	pop	r9
    d388:	8f 90       	pop	r8
    d38a:	08 95       	ret

0000d38c <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d38c:	a0 e0       	ldi	r26, 0x00	; 0
    d38e:	b0 e0       	ldi	r27, 0x00	; 0
    d390:	ec ec       	ldi	r30, 0xCC	; 204
    d392:	f9 e6       	ldi	r31, 0x69	; 105
    d394:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    d398:	8c 01       	movw	r16, r24
    d39a:	6a 01       	movw	r12, r20
    d39c:	7b 01       	movw	r14, r22
    d39e:	e9 01       	movw	r28, r18
    if (!count)
    d3a0:	20 97       	sbiw	r28, 0x00	; 0
    d3a2:	19 f4       	brne	.+6      	; 0xd3aa <mmc_disk_write+0x1e>
    {
        deselect();
    d3a4:	23 de       	rcall	.-954    	; 0xcfec <deselect>
        return RES_PARERR;
    d3a6:	84 e0       	ldi	r24, 0x04	; 4
    d3a8:	18 c0       	rjmp	.+48     	; 0xd3da <mmc_disk_write+0x4e>
    }

	if( Stat )
    d3aa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3ae:	88 23       	and	r24, r24
    d3b0:	19 f0       	breq	.+6      	; 0xd3b8 <mmc_disk_write+0x2c>
		set_error(1);
    d3b2:	81 e0       	ldi	r24, 0x01	; 1
    d3b4:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <set_error>

    if (Stat & STA_NOINIT)
    d3b8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3bc:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d3be:	03 c0       	rjmp	.+6      	; 0xd3c6 <mmc_disk_write+0x3a>
    d3c0:	15 de       	rcall	.-982    	; 0xcfec <deselect>
        return RES_NOTRDY;
    d3c2:	83 e0       	ldi	r24, 0x03	; 3
    d3c4:	0a c0       	rjmp	.+20     	; 0xd3da <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d3c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3ca:	81 fd       	sbrc	r24, 1
    d3cc:	f9 cf       	rjmp	.-14     	; 0xd3c0 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d3ce:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3d2:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d3d4:	04 c0       	rjmp	.+8      	; 0xd3de <mmc_disk_write+0x52>
    d3d6:	0a de       	rcall	.-1004   	; 0xcfec <deselect>
        return RES_WRPRT;
    d3d8:	82 e0       	ldi	r24, 0x02	; 2
    d3da:	90 e0       	ldi	r25, 0x00	; 0
    d3dc:	46 c0       	rjmp	.+140    	; 0xd46a <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d3de:	46 9a       	sbi	0x08, 6	; 8
    d3e0:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d3e2:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d3e6:	83 fd       	sbrc	r24, 3
    d3e8:	07 c0       	rjmp	.+14     	; 0xd3f8 <mmc_disk_write+0x6c>
    d3ea:	99 e0       	ldi	r25, 0x09	; 9
    d3ec:	cc 0c       	add	r12, r12
    d3ee:	dd 1c       	adc	r13, r13
    d3f0:	ee 1c       	adc	r14, r14
    d3f2:	ff 1c       	adc	r15, r15
    d3f4:	9a 95       	dec	r25
    d3f6:	d1 f7       	brne	.-12     	; 0xd3ec <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d3f8:	c1 30       	cpi	r28, 0x01	; 1
    d3fa:	d1 05       	cpc	r29, r1
    d3fc:	89 f4       	brne	.+34     	; 0xd420 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d3fe:	b7 01       	movw	r22, r14
    d400:	a6 01       	movw	r20, r12
    d402:	88 e1       	ldi	r24, 0x18	; 24
    d404:	50 de       	rcall	.-864    	; 0xd0a6 <send_cmd>
    d406:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d408:	26 c0       	rjmp	.+76     	; 0xd456 <mmc_disk_write+0xca>
    d40a:	6e ef       	ldi	r22, 0xFE	; 254
    d40c:	c8 01       	movw	r24, r16
    d40e:	8e de       	rcall	.-740    	; 0xd12c <xmit_datablock>
    d410:	31 e0       	ldi	r19, 0x01	; 1
    d412:	20 e0       	ldi	r18, 0x00	; 0
    d414:	89 2b       	or	r24, r25
    d416:	09 f0       	breq	.+2      	; 0xd41a <mmc_disk_write+0x8e>
    d418:	30 e0       	ldi	r19, 0x00	; 0
    d41a:	c3 2f       	mov	r28, r19
    d41c:	d2 2f       	mov	r29, r18
    d41e:	1d c0       	rjmp	.+58     	; 0xd45a <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d420:	86 70       	andi	r24, 0x06	; 6
    d422:	29 f0       	breq	.+10     	; 0xd42e <mmc_disk_write+0xa2>
    d424:	ae 01       	movw	r20, r28
    d426:	60 e0       	ldi	r22, 0x00	; 0
    d428:	70 e0       	ldi	r23, 0x00	; 0
    d42a:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d42c:	3c de       	rcall	.-904    	; 0xd0a6 <send_cmd>
    d42e:	b7 01       	movw	r22, r14
    d430:	a6 01       	movw	r20, r12
    d432:	89 e1       	ldi	r24, 0x19	; 25
    d434:	38 de       	rcall	.-912    	; 0xd0a6 <send_cmd>
    d436:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d438:	10 c0       	rjmp	.+32     	; 0xd45a <mmc_disk_write+0xce>
    d43a:	6c ef       	ldi	r22, 0xFC	; 252
    d43c:	c8 01       	movw	r24, r16
    d43e:	76 de       	rcall	.-788    	; 0xd12c <xmit_datablock>
    d440:	89 2b       	or	r24, r25
                buff += 512;
    d442:	19 f0       	breq	.+6      	; 0xd44a <mmc_disk_write+0xbe>
            } while (--count);
    d444:	1e 5f       	subi	r17, 0xFE	; 254
    d446:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d448:	c1 f7       	brne	.-16     	; 0xd43a <mmc_disk_write+0xae>
    d44a:	6d ef       	ldi	r22, 0xFD	; 253
    d44c:	80 e0       	ldi	r24, 0x00	; 0
    d44e:	90 e0       	ldi	r25, 0x00	; 0
    d450:	6d de       	rcall	.-806    	; 0xd12c <xmit_datablock>
    d452:	89 2b       	or	r24, r25
                count = 1;
    d454:	11 f4       	brne	.+4      	; 0xd45a <mmc_disk_write+0xce>
    d456:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d458:	d0 e0       	ldi	r29, 0x00	; 0
    d45a:	c8 dd       	rcall	.-1136   	; 0xcfec <deselect>
    GPIO_PIN_LOW(LED1);
    d45c:	46 98       	cbi	0x08, 6	; 8
    d45e:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d460:	81 e0       	ldi	r24, 0x01	; 1
    d462:	90 e0       	ldi	r25, 0x00	; 0
    d464:	cd 2b       	or	r28, r29
    d466:	09 f4       	brne	.+2      	; 0xd46a <mmc_disk_write+0xde>
    d468:	80 e0       	ldi	r24, 0x00	; 0
}
    d46a:	cd b7       	in	r28, 0x3d	; 61
    d46c:	de b7       	in	r29, 0x3e	; 62
    d46e:	e8 e0       	ldi	r30, 0x08	; 8
    d470:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000d474 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d474:	a0 e1       	ldi	r26, 0x10	; 16
    d476:	b0 e0       	ldi	r27, 0x00	; 0
    d478:	e0 e4       	ldi	r30, 0x40	; 64
    d47a:	fa e6       	ldi	r31, 0x6A	; 106
    d47c:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d480:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d484:	90 fd       	sbrc	r25, 0
    d486:	31 c2       	rjmp	.+1122   	; 0xd8ea <mmc_disk_ioctl+0x476>
    d488:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d48a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d48e:	91 ff       	sbrs	r25, 1
    d490:	02 c0       	rjmp	.+4      	; 0xd496 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d492:	ac dd       	rcall	.-1192   	; 0xcfec <deselect>
    d494:	2a c2       	rjmp	.+1108   	; 0xd8ea <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d496:	83 33       	cpi	r24, 0x33	; 51
    d498:	09 f4       	brne	.+2      	; 0xd49c <mmc_disk_ioctl+0x28>
    d49a:	01 c1       	rjmp	.+514    	; 0xd69e <mmc_disk_ioctl+0x22a>
    d49c:	a0 f4       	brcc	.+40     	; 0xd4c6 <mmc_disk_ioctl+0x52>
    d49e:	83 30       	cpi	r24, 0x03	; 3
    d4a0:	09 f4       	brne	.+2      	; 0xd4a4 <mmc_disk_ioctl+0x30>
    d4a2:	85 c0       	rjmp	.+266    	; 0xd5ae <mmc_disk_ioctl+0x13a>
    d4a4:	28 f4       	brcc	.+10     	; 0xd4b0 <mmc_disk_ioctl+0x3c>
    d4a6:	88 23       	and	r24, r24
    d4a8:	11 f1       	breq	.+68     	; 0xd4ee <mmc_disk_ioctl+0x7a>
    d4aa:	81 30       	cpi	r24, 0x01	; 1
    d4ac:	11 f1       	breq	.+68     	; 0xd4f2 <mmc_disk_ioctl+0x7e>
    d4ae:	1f c2       	rjmp	.+1086   	; 0xd8ee <mmc_disk_ioctl+0x47a>
    d4b0:	87 30       	cpi	r24, 0x07	; 7
    d4b2:	09 f4       	brne	.+2      	; 0xd4b6 <mmc_disk_ioctl+0x42>
    d4b4:	2a c1       	rjmp	.+596    	; 0xd70a <mmc_disk_ioctl+0x296>
    d4b6:	82 33       	cpi	r24, 0x32	; 50
    d4b8:	09 f0       	breq	.+2      	; 0xd4bc <mmc_disk_ioctl+0x48>
    d4ba:	19 c2       	rjmp	.+1074   	; 0xd8ee <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d4bc:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
    d4c0:	fb 01       	movw	r30, r22
    d4c2:	80 83       	st	Z, r24
    d4c4:	28 c1       	rjmp	.+592    	; 0xd716 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d4c6:	86 33       	cpi	r24, 0x36	; 54
    d4c8:	09 f4       	brne	.+2      	; 0xd4cc <mmc_disk_ioctl+0x58>
    d4ca:	0c c1       	rjmp	.+536    	; 0xd6e4 <mmc_disk_ioctl+0x270>
    d4cc:	38 f4       	brcc	.+14     	; 0xd4dc <mmc_disk_ioctl+0x68>
    d4ce:	84 33       	cpi	r24, 0x34	; 52
    d4d0:	09 f4       	brne	.+2      	; 0xd4d4 <mmc_disk_ioctl+0x60>
    d4d2:	ea c0       	rjmp	.+468    	; 0xd6a8 <mmc_disk_ioctl+0x234>
    d4d4:	85 33       	cpi	r24, 0x35	; 53
    d4d6:	09 f4       	brne	.+2      	; 0xd4da <mmc_disk_ioctl+0x66>
    d4d8:	f1 c0       	rjmp	.+482    	; 0xd6bc <mmc_disk_ioctl+0x248>
    d4da:	09 c2       	rjmp	.+1042   	; 0xd8ee <mmc_disk_ioctl+0x47a>
    d4dc:	88 33       	cpi	r24, 0x38	; 56
    d4de:	09 f4       	brne	.+2      	; 0xd4e2 <mmc_disk_ioctl+0x6e>
    d4e0:	74 c1       	rjmp	.+744    	; 0xd7ca <mmc_disk_ioctl+0x356>
    d4e2:	08 f4       	brcc	.+2      	; 0xd4e6 <mmc_disk_ioctl+0x72>
    d4e4:	1a c1       	rjmp	.+564    	; 0xd71a <mmc_disk_ioctl+0x2a6>
    d4e6:	89 33       	cpi	r24, 0x39	; 57
    d4e8:	09 f4       	brne	.+2      	; 0xd4ec <mmc_disk_ioctl+0x78>
    d4ea:	bc c1       	rjmp	.+888    	; 0xd864 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d4ec:	00 c2       	rjmp	.+1024   	; 0xd8ee <mmc_disk_ioctl+0x47a>
    d4ee:	b9 dd       	rcall	.-1166   	; 0xd062 <select>
    d4f0:	06 c1       	rjmp	.+524    	; 0xd6fe <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d4f2:	40 e0       	ldi	r20, 0x00	; 0
    d4f4:	50 e0       	ldi	r21, 0x00	; 0
    d4f6:	ba 01       	movw	r22, r20
    d4f8:	89 e0       	ldi	r24, 0x09	; 9
    d4fa:	d5 dd       	rcall	.-1110   	; 0xd0a6 <send_cmd>
    d4fc:	81 11       	cpse	r24, r1
    d4fe:	f1 c1       	rjmp	.+994    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d500:	60 e1       	ldi	r22, 0x10	; 16
    d502:	70 e0       	ldi	r23, 0x00	; 0
    d504:	ce 01       	movw	r24, r28
    d506:	01 96       	adiw	r24, 0x01	; 1
    d508:	77 dd       	rcall	.-1298   	; 0xcff8 <rcvr_datablock>
    d50a:	89 2b       	or	r24, r25
    d50c:	09 f4       	brne	.+2      	; 0xd510 <mmc_disk_ioctl+0x9c>
    d50e:	e9 c1       	rjmp	.+978    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d510:	99 81       	ldd	r25, Y+1	; 0x01
    d512:	92 95       	swap	r25
    d514:	96 95       	lsr	r25
    d516:	96 95       	lsr	r25
    d518:	93 70       	andi	r25, 0x03	; 3
    d51a:	29 85       	ldd	r18, Y+9	; 0x09
    d51c:	4a 85       	ldd	r20, Y+10	; 0x0a
    d51e:	88 85       	ldd	r24, Y+8	; 0x08
    d520:	91 30       	cpi	r25, 0x01	; 1
    d522:	d9 f4       	brne	.+54     	; 0xd55a <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d524:	30 e0       	ldi	r19, 0x00	; 0
    d526:	32 2f       	mov	r19, r18
    d528:	22 27       	eor	r18, r18
    d52a:	24 0f       	add	r18, r20
    d52c:	31 1d       	adc	r19, r1
    d52e:	8f 73       	andi	r24, 0x3F	; 63
    d530:	90 e0       	ldi	r25, 0x00	; 0
    d532:	a0 e0       	ldi	r26, 0x00	; 0
    d534:	b0 e0       	ldi	r27, 0x00	; 0
    d536:	dc 01       	movw	r26, r24
    d538:	99 27       	eor	r25, r25
    d53a:	88 27       	eor	r24, r24
    d53c:	01 96       	adiw	r24, 0x01	; 1
    d53e:	a1 1d       	adc	r26, r1
    d540:	b1 1d       	adc	r27, r1
    d542:	82 0f       	add	r24, r18
    d544:	93 1f       	adc	r25, r19
    d546:	a1 1d       	adc	r26, r1
    d548:	b1 1d       	adc	r27, r1
    d54a:	fa e0       	ldi	r31, 0x0A	; 10
    d54c:	88 0f       	add	r24, r24
    d54e:	99 1f       	adc	r25, r25
    d550:	aa 1f       	adc	r26, r26
    d552:	bb 1f       	adc	r27, r27
    d554:	fa 95       	dec	r31
    d556:	d1 f7       	brne	.-12     	; 0xd54c <mmc_disk_ioctl+0xd8>
    d558:	9b c0       	rjmp	.+310    	; 0xd690 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d55a:	22 95       	swap	r18
    d55c:	26 95       	lsr	r18
    d55e:	26 95       	lsr	r18
    d560:	23 70       	andi	r18, 0x03	; 3
    d562:	f4 e0       	ldi	r31, 0x04	; 4
    d564:	8f 9f       	mul	r24, r31
    d566:	c0 01       	movw	r24, r0
    d568:	11 24       	eor	r1, r1
    d56a:	82 0f       	add	r24, r18
    d56c:	91 1d       	adc	r25, r1
    d56e:	01 96       	adiw	r24, 0x01	; 1
    d570:	2f 81       	ldd	r18, Y+7	; 0x07
    d572:	23 70       	andi	r18, 0x03	; 3
    d574:	30 e0       	ldi	r19, 0x00	; 0
    d576:	32 2f       	mov	r19, r18
    d578:	22 27       	eor	r18, r18
    d57a:	33 0f       	add	r19, r19
    d57c:	33 0f       	add	r19, r19
    d57e:	82 0f       	add	r24, r18
    d580:	93 1f       	adc	r25, r19
    d582:	a0 e0       	ldi	r26, 0x00	; 0
    d584:	b0 e0       	ldi	r27, 0x00	; 0
    d586:	2e 81       	ldd	r18, Y+6	; 0x06
    d588:	32 2f       	mov	r19, r18
    d58a:	3f 70       	andi	r19, 0x0F	; 15
    d58c:	2b 85       	ldd	r18, Y+11	; 0x0b
    d58e:	22 1f       	adc	r18, r18
    d590:	22 27       	eor	r18, r18
    d592:	22 1f       	adc	r18, r18
    d594:	23 0f       	add	r18, r19
    d596:	43 70       	andi	r20, 0x03	; 3
    d598:	44 0f       	add	r20, r20
    d59a:	42 0f       	add	r20, r18
    d59c:	47 50       	subi	r20, 0x07	; 7
    d59e:	04 c0       	rjmp	.+8      	; 0xd5a8 <mmc_disk_ioctl+0x134>
    d5a0:	88 0f       	add	r24, r24
    d5a2:	99 1f       	adc	r25, r25
    d5a4:	aa 1f       	adc	r26, r26
    d5a6:	bb 1f       	adc	r27, r27
    d5a8:	4a 95       	dec	r20
    d5aa:	d2 f7       	brpl	.-12     	; 0xd5a0 <mmc_disk_ioctl+0x12c>
    d5ac:	71 c0       	rjmp	.+226    	; 0xd690 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d5ae:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d5b2:	40 e0       	ldi	r20, 0x00	; 0
    d5b4:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d5b6:	ba 01       	movw	r22, r20
    d5b8:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d5ba:	24 c0       	rjmp	.+72     	; 0xd604 <mmc_disk_ioctl+0x190>
    d5bc:	8d e8       	ldi	r24, 0x8D	; 141
    d5be:	73 dd       	rcall	.-1306   	; 0xd0a6 <send_cmd>
    d5c0:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d5c2:	8f c1       	rjmp	.+798    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d5c4:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d5c6:	10 dd       	rcall	.-1504   	; 0xcfe8 <xchg_spi>
    d5c8:	60 e1       	ldi	r22, 0x10	; 16
    d5ca:	70 e0       	ldi	r23, 0x00	; 0
    d5cc:	ce 01       	movw	r24, r28
    d5ce:	01 96       	adiw	r24, 0x01	; 1
    d5d0:	13 dd       	rcall	.-1498   	; 0xcff8 <rcvr_datablock>
    d5d2:	89 2b       	or	r24, r25
    d5d4:	09 f4       	brne	.+2      	; 0xd5d8 <mmc_disk_ioctl+0x164>
    d5d6:	85 c1       	rjmp	.+778    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d5d8:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d5da:	f5 2e       	mov	r15, r21
    d5dc:	8f ef       	ldi	r24, 0xFF	; 255
    d5de:	04 dd       	rcall	.-1528   	; 0xcfe8 <xchg_spi>
    d5e0:	fa 94       	dec	r15
    d5e2:	f1 10       	cpse	r15, r1
    d5e4:	fb cf       	rjmp	.-10     	; 0xd5dc <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d5e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    d5e8:	22 95       	swap	r18
    d5ea:	2f 70       	andi	r18, 0x0F	; 15
    d5ec:	80 e1       	ldi	r24, 0x10	; 16
    d5ee:	90 e0       	ldi	r25, 0x00	; 0
    d5f0:	a0 e0       	ldi	r26, 0x00	; 0
    d5f2:	b0 e0       	ldi	r27, 0x00	; 0
    d5f4:	04 c0       	rjmp	.+8      	; 0xd5fe <mmc_disk_ioctl+0x18a>
    d5f6:	88 0f       	add	r24, r24
    d5f8:	99 1f       	adc	r25, r25
    d5fa:	aa 1f       	adc	r26, r26
    d5fc:	bb 1f       	adc	r27, r27
    d5fe:	2a 95       	dec	r18
    d600:	d2 f7       	brpl	.-12     	; 0xd5f6 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d602:	46 c0       	rjmp	.+140    	; 0xd690 <mmc_disk_ioctl+0x21c>
    d604:	89 e0       	ldi	r24, 0x09	; 9
    d606:	4f dd       	rcall	.-1378   	; 0xd0a6 <send_cmd>
    d608:	81 11       	cpse	r24, r1
    d60a:	6b c1       	rjmp	.+726    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d60c:	60 e1       	ldi	r22, 0x10	; 16
    d60e:	70 e0       	ldi	r23, 0x00	; 0
    d610:	ce 01       	movw	r24, r28
    d612:	01 96       	adiw	r24, 0x01	; 1
    d614:	f1 dc       	rcall	.-1566   	; 0xcff8 <rcvr_datablock>
    d616:	89 2b       	or	r24, r25
    d618:	09 f4       	brne	.+2      	; 0xd61c <mmc_disk_ioctl+0x1a8>
    d61a:	63 c1       	rjmp	.+710    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d61c:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <CardType>
    d620:	2b 85       	ldd	r18, Y+11	; 0x0b
    d622:	8c 85       	ldd	r24, Y+12	; 0x0c
    d624:	91 ff       	sbrs	r25, 1
    d626:	16 c0       	rjmp	.+44     	; 0xd654 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d628:	2f 73       	andi	r18, 0x3F	; 63
    d62a:	88 1f       	adc	r24, r24
    d62c:	88 27       	eor	r24, r24
    d62e:	88 1f       	adc	r24, r24
    d630:	90 e0       	ldi	r25, 0x00	; 0
    d632:	01 96       	adiw	r24, 0x01	; 1
    d634:	82 0f       	add	r24, r18
    d636:	91 1d       	adc	r25, r1
    d638:	82 0f       	add	r24, r18
    d63a:	91 1d       	adc	r25, r1
    d63c:	2e 85       	ldd	r18, Y+14	; 0x0e
    d63e:	22 95       	swap	r18
    d640:	26 95       	lsr	r18
    d642:	26 95       	lsr	r18
    d644:	23 70       	andi	r18, 0x03	; 3
    d646:	21 50       	subi	r18, 0x01	; 1
    d648:	02 c0       	rjmp	.+4      	; 0xd64e <mmc_disk_ioctl+0x1da>
    d64a:	88 0f       	add	r24, r24
    d64c:	99 1f       	adc	r25, r25
    d64e:	2a 95       	dec	r18
    d650:	e2 f7       	brpl	.-8      	; 0xd64a <mmc_disk_ioctl+0x1d6>
    d652:	1c c0       	rjmp	.+56     	; 0xd68c <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d654:	38 2f       	mov	r19, r24
    d656:	33 70       	andi	r19, 0x03	; 3
    d658:	82 95       	swap	r24
    d65a:	86 95       	lsr	r24
    d65c:	87 70       	andi	r24, 0x07	; 7
    d65e:	90 e0       	ldi	r25, 0x00	; 0
    d660:	f8 e0       	ldi	r31, 0x08	; 8
    d662:	3f 9f       	mul	r19, r31
    d664:	80 0d       	add	r24, r0
    d666:	91 1d       	adc	r25, r1
    d668:	11 24       	eor	r1, r1
    d66a:	01 96       	adiw	r24, 0x01	; 1
    d66c:	2c 77       	andi	r18, 0x7C	; 124
    d66e:	30 e0       	ldi	r19, 0x00	; 0
    d670:	35 95       	asr	r19
    d672:	27 95       	ror	r18
    d674:	35 95       	asr	r19
    d676:	27 95       	ror	r18
    d678:	2f 5f       	subi	r18, 0xFF	; 255
    d67a:	3f 4f       	sbci	r19, 0xFF	; 255
    d67c:	82 9f       	mul	r24, r18
    d67e:	a0 01       	movw	r20, r0
    d680:	83 9f       	mul	r24, r19
    d682:	50 0d       	add	r21, r0
    d684:	92 9f       	mul	r25, r18
    d686:	50 0d       	add	r21, r0
    d688:	11 24       	eor	r1, r1
    d68a:	ca 01       	movw	r24, r20
    d68c:	a0 e0       	ldi	r26, 0x00	; 0
    d68e:	b0 e0       	ldi	r27, 0x00	; 0
    d690:	f8 01       	movw	r30, r16
    d692:	80 83       	st	Z, r24
    d694:	91 83       	std	Z+1, r25	; 0x01
    d696:	a2 83       	std	Z+2, r26	; 0x02
    d698:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d69a:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d69c:	23 c1       	rjmp	.+582    	; 0xd8e4 <mmc_disk_ioctl+0x470>
    d69e:	40 e0       	ldi	r20, 0x00	; 0
    d6a0:	50 e0       	ldi	r21, 0x00	; 0
    d6a2:	ba 01       	movw	r22, r20
    d6a4:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d6a6:	04 c0       	rjmp	.+8      	; 0xd6b0 <mmc_disk_ioctl+0x23c>
    d6a8:	40 e0       	ldi	r20, 0x00	; 0
    d6aa:	50 e0       	ldi	r21, 0x00	; 0
    d6ac:	ba 01       	movw	r22, r20
    d6ae:	8a e0       	ldi	r24, 0x0A	; 10
    d6b0:	fa dc       	rcall	.-1548   	; 0xd0a6 <send_cmd>
    d6b2:	81 11       	cpse	r24, r1
    d6b4:	16 c1       	rjmp	.+556    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d6b6:	60 e1       	ldi	r22, 0x10	; 16
    d6b8:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d6ba:	1f c0       	rjmp	.+62     	; 0xd6fa <mmc_disk_ioctl+0x286>
    d6bc:	40 e0       	ldi	r20, 0x00	; 0
    d6be:	50 e0       	ldi	r21, 0x00	; 0
    d6c0:	ba 01       	movw	r22, r20
    d6c2:	8a e3       	ldi	r24, 0x3A	; 58
    d6c4:	f0 dc       	rcall	.-1568   	; 0xd0a6 <send_cmd>
    d6c6:	81 11       	cpse	r24, r1
    d6c8:	0c c1       	rjmp	.+536    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d6ca:	78 01       	movw	r14, r16
    d6cc:	f4 e0       	ldi	r31, 0x04	; 4
    d6ce:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d6d0:	f1 1c       	adc	r15, r1
    d6d2:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d6d4:	83 d1       	rcall	.+774    	; 0xd9dc <mmc_spi_TXRX>
    d6d6:	f8 01       	movw	r30, r16
    d6d8:	81 93       	st	Z+, r24
    d6da:	8f 01       	movw	r16, r30
    d6dc:	ee 15       	cp	r30, r14
    d6de:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d6e0:	c1 f7       	brne	.-16     	; 0xd6d2 <mmc_disk_ioctl+0x25e>
    d6e2:	db cf       	rjmp	.-74     	; 0xd69a <mmc_disk_ioctl+0x226>
    d6e4:	40 e0       	ldi	r20, 0x00	; 0
    d6e6:	50 e0       	ldi	r21, 0x00	; 0
    d6e8:	ba 01       	movw	r22, r20
    d6ea:	8d e8       	ldi	r24, 0x8D	; 141
    d6ec:	dc dc       	rcall	.-1608   	; 0xd0a6 <send_cmd>
            {
                xchg_spi(0xFF);
    d6ee:	81 11       	cpse	r24, r1
    d6f0:	f8 c0       	rjmp	.+496    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d6f2:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d6f4:	79 dc       	rcall	.-1806   	; 0xcfe8 <xchg_spi>
    d6f6:	60 e4       	ldi	r22, 0x40	; 64
    d6f8:	70 e0       	ldi	r23, 0x00	; 0
    d6fa:	c8 01       	movw	r24, r16
    d6fc:	7d dc       	rcall	.-1798   	; 0xcff8 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d6fe:	01 e0       	ldi	r16, 0x01	; 1
    d700:	10 e0       	ldi	r17, 0x00	; 0
    d702:	89 2b       	or	r24, r25
    d704:	09 f4       	brne	.+2      	; 0xd708 <mmc_disk_ioctl+0x294>
    d706:	ef c0       	rjmp	.+478    	; 0xd8e6 <mmc_disk_ioctl+0x472>
    d708:	ea c0       	rjmp	.+468    	; 0xd8de <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d70a:	97 d1       	rcall	.+814    	; 0xda3a <mmc_power_off>
    d70c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d710:	81 60       	ori	r24, 0x01	; 1
    d712:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d716:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d718:	eb c0       	rjmp	.+470    	; 0xd8f0 <mmc_disk_ioctl+0x47c>
    d71a:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d71c:	43 81       	ldd	r20, Z+3	; 0x03
    d71e:	54 81       	ldd	r21, Z+4	; 0x04
    d720:	65 81       	ldd	r22, Z+5	; 0x05
    d722:	76 81       	ldd	r23, Z+6	; 0x06
    d724:	39 e0       	ldi	r19, 0x09	; 9
    d726:	44 0f       	add	r20, r20
    d728:	55 1f       	adc	r21, r21
    d72a:	66 1f       	adc	r22, r22
    d72c:	77 1f       	adc	r23, r23
    d72e:	3a 95       	dec	r19
    d730:	d1 f7       	brne	.-12     	; 0xd726 <mmc_disk_ioctl+0x2b2>
    d732:	70 68       	ori	r23, 0x80	; 128
    d734:	80 81       	ld	r24, Z
    d736:	90 e0       	ldi	r25, 0x00	; 0
    d738:	a0 e0       	ldi	r26, 0x00	; 0
    d73a:	b0 e0       	ldi	r27, 0x00	; 0
    d73c:	2c e1       	ldi	r18, 0x1C	; 28
    d73e:	88 0f       	add	r24, r24
    d740:	99 1f       	adc	r25, r25
    d742:	aa 1f       	adc	r26, r26
    d744:	bb 1f       	adc	r27, r27
    d746:	2a 95       	dec	r18
    d748:	d1 f7       	brne	.-12     	; 0xd73e <mmc_disk_ioctl+0x2ca>
    d74a:	48 2b       	or	r20, r24
    d74c:	59 2b       	or	r21, r25
    d74e:	6a 2b       	or	r22, r26
    d750:	7b 2b       	or	r23, r27
    d752:	81 81       	ldd	r24, Z+1	; 0x01
    d754:	92 81       	ldd	r25, Z+2	; 0x02
    d756:	01 97       	sbiw	r24, 0x01	; 1
    d758:	91 70       	andi	r25, 0x01	; 1
    d75a:	a0 e0       	ldi	r26, 0x00	; 0
    d75c:	b0 e0       	ldi	r27, 0x00	; 0
    d75e:	48 2b       	or	r20, r24
    d760:	59 2b       	or	r21, r25
    d762:	6a 2b       	or	r22, r26
    d764:	7b 2b       	or	r23, r27
    d766:	80 e3       	ldi	r24, 0x30	; 48
    d768:	9e dc       	rcall	.-1732   	; 0xd0a6 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d76a:	81 11       	cpse	r24, r1
    d76c:	ba c0       	rjmp	.+372    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d76e:	88 ee       	ldi	r24, 0xE8	; 232
    d770:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d772:	37 d1       	rcall	.+622    	; 0xd9e2 <mmc_set_ms_timeout>
    d774:	8f ef       	ldi	r24, 0xFF	; 255
    d776:	32 d1       	rcall	.+612    	; 0xd9dc <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d778:	8f 3f       	cpi	r24, 0xFF	; 255
    d77a:	21 f4       	brne	.+8      	; 0xd784 <mmc_disk_ioctl+0x310>
    d77c:	39 d1       	rcall	.+626    	; 0xd9f0 <mmc_test_timeout>
    d77e:	89 2b       	or	r24, r25
    d780:	c9 f3       	breq	.-14     	; 0xd774 <mmc_disk_ioctl+0x300>
    d782:	af c0       	rjmp	.+350    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d784:	8e 3f       	cpi	r24, 0xFE	; 254
    d786:	09 f0       	breq	.+2      	; 0xd78a <mmc_disk_ioctl+0x316>
    d788:	ac c0       	rjmp	.+344    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d78a:	f8 01       	movw	r30, r16
    d78c:	e7 80       	ldd	r14, Z+7	; 0x07
    d78e:	f0 84       	ldd	r15, Z+8	; 0x08
    d790:	c1 80       	ldd	r12, Z+1	; 0x01
    d792:	d2 80       	ldd	r13, Z+2	; 0x02
    d794:	ce 0c       	add	r12, r14
    d796:	df 1c       	adc	r13, r15
    d798:	ce 14       	cp	r12, r14
    d79a:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d79c:	31 f0       	breq	.+12     	; 0xd7aa <mmc_disk_ioctl+0x336>
    d79e:	8f ef       	ldi	r24, 0xFF	; 255
    d7a0:	1d d1       	rcall	.+570    	; 0xd9dc <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d7a2:	f7 01       	movw	r30, r14
    d7a4:	81 93       	st	Z+, r24
    d7a6:	7f 01       	movw	r14, r30
    d7a8:	f7 cf       	rjmp	.-18     	; 0xd798 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d7aa:	f8 01       	movw	r30, r16
    d7ac:	81 81       	ldd	r24, Z+1	; 0x01
    d7ae:	92 81       	ldd	r25, Z+2	; 0x02
    d7b0:	02 e0       	ldi	r16, 0x02	; 2
    d7b2:	12 e0       	ldi	r17, 0x02	; 2
    d7b4:	08 1b       	sub	r16, r24
    d7b6:	19 0b       	sbc	r17, r25
    d7b8:	01 15       	cp	r16, r1
    d7ba:	11 05       	cpc	r17, r1
    d7bc:	09 f4       	brne	.+2      	; 0xd7c0 <mmc_disk_ioctl+0x34c>
    d7be:	6d cf       	rjmp	.-294    	; 0xd69a <mmc_disk_ioctl+0x226>
    d7c0:	8f ef       	ldi	r24, 0xFF	; 255
    d7c2:	12 dc       	rcall	.-2012   	; 0xcfe8 <xchg_spi>
    d7c4:	01 50       	subi	r16, 0x01	; 1
    d7c6:	11 09       	sbc	r17, r1
    d7c8:	f7 cf       	rjmp	.-18     	; 0xd7b8 <mmc_disk_ioctl+0x344>
    d7ca:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d7cc:	43 81       	ldd	r20, Z+3	; 0x03
    d7ce:	54 81       	ldd	r21, Z+4	; 0x04
    d7d0:	65 81       	ldd	r22, Z+5	; 0x05
    d7d2:	76 81       	ldd	r23, Z+6	; 0x06
    d7d4:	39 e0       	ldi	r19, 0x09	; 9
    d7d6:	44 0f       	add	r20, r20
    d7d8:	55 1f       	adc	r21, r21
    d7da:	66 1f       	adc	r22, r22
    d7dc:	77 1f       	adc	r23, r23
    d7de:	3a 95       	dec	r19
    d7e0:	d1 f7       	brne	.-12     	; 0xd7d6 <mmc_disk_ioctl+0x362>
    d7e2:	70 68       	ori	r23, 0x80	; 128
    d7e4:	80 81       	ld	r24, Z
    d7e6:	90 e0       	ldi	r25, 0x00	; 0
    d7e8:	a0 e0       	ldi	r26, 0x00	; 0
    d7ea:	b0 e0       	ldi	r27, 0x00	; 0
    d7ec:	2c e1       	ldi	r18, 0x1C	; 28
    d7ee:	88 0f       	add	r24, r24
    d7f0:	99 1f       	adc	r25, r25
    d7f2:	aa 1f       	adc	r26, r26
    d7f4:	bb 1f       	adc	r27, r27
    d7f6:	2a 95       	dec	r18
    d7f8:	d1 f7       	brne	.-12     	; 0xd7ee <mmc_disk_ioctl+0x37a>
    d7fa:	48 2b       	or	r20, r24
    d7fc:	59 2b       	or	r21, r25
    d7fe:	6a 2b       	or	r22, r26
    d800:	7b 2b       	or	r23, r27
    d802:	81 81       	ldd	r24, Z+1	; 0x01
    d804:	92 81       	ldd	r25, Z+2	; 0x02
    d806:	01 97       	sbiw	r24, 0x01	; 1
    d808:	91 70       	andi	r25, 0x01	; 1
    d80a:	a0 e0       	ldi	r26, 0x00	; 0
    d80c:	b0 e0       	ldi	r27, 0x00	; 0
    d80e:	48 2b       	or	r20, r24
    d810:	59 2b       	or	r21, r25
    d812:	6a 2b       	or	r22, r26
    d814:	7b 2b       	or	r23, r27
    d816:	81 e3       	ldi	r24, 0x31	; 49
    d818:	46 dc       	rcall	.-1908   	; 0xd0a6 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d81a:	81 11       	cpse	r24, r1
    d81c:	62 c0       	rjmp	.+196    	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d81e:	8f ef       	ldi	r24, 0xFF	; 255
    d820:	e3 db       	rcall	.-2106   	; 0xcfe8 <xchg_spi>
    d822:	8e ef       	ldi	r24, 0xFE	; 254
    d824:	e1 db       	rcall	.-2110   	; 0xcfe8 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    d826:	f8 01       	movw	r30, r16
    d828:	e7 80       	ldd	r14, Z+7	; 0x07
    d82a:	f0 84       	ldd	r15, Z+8	; 0x08
    d82c:	c1 80       	ldd	r12, Z+1	; 0x01
    d82e:	d2 80       	ldd	r13, Z+2	; 0x02
    d830:	ce 0c       	add	r12, r14
    d832:	df 1c       	adc	r13, r15
    d834:	ec 14       	cp	r14, r12
    d836:	fd 04       	cpc	r15, r13
    d838:	29 f0       	breq	.+10     	; 0xd844 <mmc_disk_ioctl+0x3d0>
    d83a:	f7 01       	movw	r30, r14
    d83c:	81 91       	ld	r24, Z+
    d83e:	7f 01       	movw	r14, r30
    d840:	d3 db       	rcall	.-2138   	; 0xcfe8 <xchg_spi>
    d842:	f8 cf       	rjmp	.-16     	; 0xd834 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d844:	f8 01       	movw	r30, r16
    d846:	81 81       	ldd	r24, Z+1	; 0x01
    d848:	92 81       	ldd	r25, Z+2	; 0x02
    d84a:	02 e0       	ldi	r16, 0x02	; 2
    d84c:	12 e0       	ldi	r17, 0x02	; 2
    d84e:	08 1b       	sub	r16, r24
    d850:	19 0b       	sbc	r17, r25
    d852:	8f ef       	ldi	r24, 0xFF	; 255
    d854:	01 15       	cp	r16, r1
    d856:	11 05       	cpc	r17, r1
    d858:	09 f4       	brne	.+2      	; 0xd85c <mmc_disk_ioctl+0x3e8>
    d85a:	3b c0       	rjmp	.+118    	; 0xd8d2 <mmc_disk_ioctl+0x45e>
    d85c:	c5 db       	rcall	.-2166   	; 0xcfe8 <xchg_spi>
    d85e:	01 50       	subi	r16, 0x01	; 1
    d860:	11 09       	sbc	r17, r1
    d862:	f7 cf       	rjmp	.-18     	; 0xd852 <mmc_disk_ioctl+0x3de>
    d864:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    d866:	43 81       	ldd	r20, Z+3	; 0x03
    d868:	54 81       	ldd	r21, Z+4	; 0x04
    d86a:	65 81       	ldd	r22, Z+5	; 0x05
    d86c:	76 81       	ldd	r23, Z+6	; 0x06
    d86e:	89 e0       	ldi	r24, 0x09	; 9
    d870:	44 0f       	add	r20, r20
    d872:	55 1f       	adc	r21, r21
    d874:	66 1f       	adc	r22, r22
    d876:	77 1f       	adc	r23, r23
    d878:	8a 95       	dec	r24
    d87a:	d1 f7       	brne	.-12     	; 0xd870 <mmc_disk_ioctl+0x3fc>
    d87c:	74 68       	ori	r23, 0x84	; 132
    d87e:	80 81       	ld	r24, Z
    d880:	90 e0       	ldi	r25, 0x00	; 0
    d882:	a0 e0       	ldi	r26, 0x00	; 0
    d884:	b0 e0       	ldi	r27, 0x00	; 0
    d886:	2c e1       	ldi	r18, 0x1C	; 28
    d888:	88 0f       	add	r24, r24
    d88a:	99 1f       	adc	r25, r25
    d88c:	aa 1f       	adc	r26, r26
    d88e:	bb 1f       	adc	r27, r27
    d890:	2a 95       	dec	r18
    d892:	d1 f7       	brne	.-12     	; 0xd888 <mmc_disk_ioctl+0x414>
    d894:	48 2b       	or	r20, r24
    d896:	59 2b       	or	r21, r25
    d898:	6a 2b       	or	r22, r26
    d89a:	7b 2b       	or	r23, r27
    d89c:	82 81       	ldd	r24, Z+2	; 0x02
    d89e:	90 e0       	ldi	r25, 0x00	; 0
    d8a0:	a0 e0       	ldi	r26, 0x00	; 0
    d8a2:	b0 e0       	ldi	r27, 0x00	; 0
    d8a4:	48 2b       	or	r20, r24
    d8a6:	59 2b       	or	r21, r25
    d8a8:	6a 2b       	or	r22, r26
    d8aa:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d8ac:	81 e3       	ldi	r24, 0x31	; 49
    d8ae:	fb db       	rcall	.-2058   	; 0xd0a6 <send_cmd>
    d8b0:	81 11       	cpse	r24, r1
    d8b2:	17 c0       	rjmp	.+46     	; 0xd8e2 <mmc_disk_ioctl+0x46e>
    d8b4:	8f ef       	ldi	r24, 0xFF	; 255
    d8b6:	98 db       	rcall	.-2256   	; 0xcfe8 <xchg_spi>
                xchg_spi(sdi->ndata);
    d8b8:	8e ef       	ldi	r24, 0xFE	; 254
    d8ba:	96 db       	rcall	.-2260   	; 0xcfe8 <xchg_spi>
    d8bc:	f8 01       	movw	r30, r16
    d8be:	81 81       	ldd	r24, Z+1	; 0x01
    d8c0:	93 db       	rcall	.-2266   	; 0xcfe8 <xchg_spi>
    d8c2:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    d8c4:	12 e0       	ldi	r17, 0x02	; 2
    d8c6:	8f ef       	ldi	r24, 0xFF	; 255
    d8c8:	8f db       	rcall	.-2274   	; 0xcfe8 <xchg_spi>
    d8ca:	01 50       	subi	r16, 0x01	; 1
    d8cc:	11 09       	sbc	r17, r1
    d8ce:	d9 f7       	brne	.-10     	; 0xd8c6 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d8d0:	8f ef       	ldi	r24, 0xFF	; 255
    d8d2:	84 d0       	rcall	.+264    	; 0xd9dc <mmc_spi_TXRX>
    d8d4:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d8d6:	01 e0       	ldi	r16, 0x01	; 1
    d8d8:	10 e0       	ldi	r17, 0x00	; 0
    d8da:	85 30       	cpi	r24, 0x05	; 5
    d8dc:	21 f4       	brne	.+8      	; 0xd8e6 <mmc_disk_ioctl+0x472>
    d8de:	00 e0       	ldi	r16, 0x00	; 0
    d8e0:	02 c0       	rjmp	.+4      	; 0xd8e6 <mmc_disk_ioctl+0x472>
    d8e2:	01 e0       	ldi	r16, 0x01	; 1
    d8e4:	10 e0       	ldi	r17, 0x00	; 0
    d8e6:	82 db       	rcall	.-2300   	; 0xcfec <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    d8e8:	04 c0       	rjmp	.+8      	; 0xd8f2 <mmc_disk_ioctl+0x47e>
    d8ea:	03 e0       	ldi	r16, 0x03	; 3
            break;
    d8ec:	01 c0       	rjmp	.+2      	; 0xd8f0 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    d8ee:	04 e0       	ldi	r16, 0x04	; 4
    d8f0:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    d8f2:	c8 01       	movw	r24, r16
    d8f4:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    d8f6:	e8 e0       	ldi	r30, 0x08	; 8
    d8f8:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000d8fc <mmc_disk_timerproc>:
    d8fc:	cf 93       	push	r28
    d8fe:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    d902:	88 23       	and	r24, r24
    d904:	19 f0       	breq	.+6      	; 0xd90c <mmc_disk_timerproc+0x10>
    d906:	81 50       	subi	r24, 0x01	; 1
    d908:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <Timer1>
    n = Timer2;
    d90c:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer2>
    if (n) Timer2 = --n;
    d910:	88 23       	and	r24, r24
    d912:	19 f0       	breq	.+6      	; 0xd91a <mmc_disk_timerproc+0x1e>
    d914:	81 50       	subi	r24, 0x01	; 1
    d916:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer2>

    s = Stat;
    d91a:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    d91e:	8e d0       	rcall	.+284    	; 0xda3c <mmc_ins_status>
    d920:	89 2b       	or	r24, r25
    d922:	11 f0       	breq	.+4      	; 0xd928 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    d924:	cd 7f       	andi	r28, 0xFD	; 253
    d926:	04 c0       	rjmp	.+8      	; 0xd930 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    d928:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    d92a:	81 e0       	ldi	r24, 0x01	; 1
    d92c:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    d930:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    d934:	cf 91       	pop	r28
    d936:	08 95       	ret

0000d938 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    d938:	00 d0       	rcall	.+0      	; 0xd93a <mmc_install_timer+0x2>
    d93a:	1f 92       	push	r1
    d93c:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_mmc_timeout+0x1>
    d940:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout>
    d944:	61 e0       	ldi	r22, 0x01	; 1
    d946:	70 e0       	ldi	r23, 0x00	; 0
    d948:	8b e2       	ldi	r24, 0x2B	; 43
    d94a:	9d e6       	ldi	r25, 0x6D	; 109
    d94c:	0e 94 de 32 	call	0x65bc	; 0x65bc <set_timers>
    d950:	01 96       	adiw	r24, 0x01	; 1
    d952:	51 f4       	brne	.+20     	; 0xd968 <mmc_install_timer+0x30>
    d954:	87 e2       	ldi	r24, 0x27	; 39
    d956:	98 e0       	ldi	r25, 0x08	; 8
    d958:	a0 e0       	ldi	r26, 0x00	; 0
    d95a:	ed b7       	in	r30, 0x3d	; 61
    d95c:	fe b7       	in	r31, 0x3e	; 62
    d95e:	81 83       	std	Z+1, r24	; 0x01
    d960:	92 83       	std	Z+2, r25	; 0x02
    d962:	a3 83       	std	Z+3, r26	; 0x03
    d964:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    d968:	0f 90       	pop	r0
    d96a:	0f 90       	pop	r0
    d96c:	0f 90       	pop	r0
    d96e:	08 95       	ret

0000d970 <mmc_spi_begin>:
    d970:	60 91 2a 18 	lds	r22, 0x182A	; 0x80182a <_mmc_clock>
    d974:	70 91 2b 18 	lds	r23, 0x182B	; 0x80182b <_mmc_clock+0x1>
    d978:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_clock+0x2>
    d97c:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_clock+0x3>
    d980:	4b e0       	ldi	r20, 0x0B	; 11
    d982:	50 e0       	ldi	r21, 0x00	; 0
    d984:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <spi_begin>
    d988:	08 95       	ret

0000d98a <mmc_spi_end>:
    d98a:	8b e0       	ldi	r24, 0x0B	; 11
    d98c:	0c 94 6d 24 	jmp	0x48da	; 0x48da <spi_end>
    d990:	08 95       	ret

0000d992 <mmc_slow>:
    d992:	80 e2       	ldi	r24, 0x20	; 32
    d994:	91 ea       	ldi	r25, 0xA1	; 161
    d996:	a7 e0       	ldi	r26, 0x07	; 7
    d998:	b0 e0       	ldi	r27, 0x00	; 0
    d99a:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    d99e:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    d9a2:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    d9a6:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    d9aa:	08 95       	ret

0000d9ac <mmc_spi_init>:
    d9ac:	8b e0       	ldi	r24, 0x0B	; 11
    d9ae:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <chip_select_init>
    d9b2:	ef cf       	rjmp	.-34     	; 0xd992 <mmc_slow>
    d9b4:	08 95       	ret

0000d9b6 <mmc_fast>:
    d9b6:	80 ea       	ldi	r24, 0xA0	; 160
    d9b8:	95 e2       	ldi	r25, 0x25	; 37
    d9ba:	a6 e2       	ldi	r26, 0x26	; 38
    d9bc:	b0 e0       	ldi	r27, 0x00	; 0
    d9be:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <_mmc_clock>
    d9c2:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <_mmc_clock+0x1>
    d9c6:	a0 93 2c 18 	sts	0x182C, r26	; 0x80182c <_mmc_clock+0x2>
    d9ca:	b0 93 2d 18 	sts	0x182D, r27	; 0x80182d <_mmc_clock+0x3>
    d9ce:	08 95       	ret

0000d9d0 <mmc_spi_TX_buffer>:
    d9d0:	0c 94 9d 24 	jmp	0x493a	; 0x493a <spi_TX_buffer>
    d9d4:	08 95       	ret

0000d9d6 <mmc_spi_RX_buffer>:
    d9d6:	0c 94 9f 24 	jmp	0x493e	; 0x493e <spi_RX_buffer>
    d9da:	08 95       	ret

0000d9dc <mmc_spi_TXRX>:
    d9dc:	0c 94 19 25 	jmp	0x4a32	; 0x4a32 <spi_TXRX>
    d9e0:	08 95       	ret

0000d9e2 <mmc_set_ms_timeout>:
    d9e2:	f8 94       	cli
    d9e4:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    d9e8:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>
    d9ec:	78 94       	sei
    d9ee:	08 95       	ret

0000d9f0 <mmc_test_timeout>:
    d9f0:	00 d0       	rcall	.+0      	; 0xd9f2 <mmc_test_timeout+0x2>
    d9f2:	1f 92       	push	r1
    d9f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d9f8:	81 fd       	sbrc	r24, 1
    d9fa:	15 c0       	rjmp	.+42     	; 0xda26 <mmc_test_timeout+0x36>
    d9fc:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    da00:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    da04:	89 2b       	or	r24, r25
    da06:	91 f4       	brne	.+36     	; 0xda2c <mmc_test_timeout+0x3c>
    da08:	8a e1       	ldi	r24, 0x1A	; 26
    da0a:	98 e0       	ldi	r25, 0x08	; 8
    da0c:	a0 e0       	ldi	r26, 0x00	; 0
    da0e:	ed b7       	in	r30, 0x3d	; 61
    da10:	fe b7       	in	r31, 0x3e	; 62
    da12:	81 83       	std	Z+1, r24	; 0x01
    da14:	92 83       	std	Z+2, r25	; 0x02
    da16:	a3 83       	std	Z+3, r26	; 0x03
    da18:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    da1c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da20:	83 60       	ori	r24, 0x03	; 3
    da22:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    da26:	81 e0       	ldi	r24, 0x01	; 1
    da28:	90 e0       	ldi	r25, 0x00	; 0
    da2a:	02 c0       	rjmp	.+4      	; 0xda30 <mmc_test_timeout+0x40>
    da2c:	80 e0       	ldi	r24, 0x00	; 0
    da2e:	90 e0       	ldi	r25, 0x00	; 0
    da30:	0f 90       	pop	r0
    da32:	0f 90       	pop	r0
    da34:	0f 90       	pop	r0
    da36:	08 95       	ret

0000da38 <mmc_power_on>:
    da38:	08 95       	ret

0000da3a <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    da3a:	08 95       	ret

0000da3c <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    da3c:	3f 98       	cbi	0x07, 7	; 7
    da3e:	86 b1       	in	r24, 0x06	; 6
    da40:	08 2e       	mov	r0, r24
    da42:	00 0c       	add	r0, r0
    da44:	99 0b       	sbc	r25, r25
    da46:	80 95       	com	r24
    da48:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    da4a:	89 2f       	mov	r24, r25
    da4c:	88 1f       	adc	r24, r24
    da4e:	88 27       	eor	r24, r24
    da50:	88 1f       	adc	r24, r24
    da52:	90 e0       	ldi	r25, 0x00	; 0
    da54:	08 95       	ret

0000da56 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    da56:	80 91 2e 18 	lds	r24, 0x182E	; 0x80182e <_mmc_timeout>
    da5a:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <_mmc_timeout+0x1>
    da5e:	00 97       	sbiw	r24, 0x00	; 0
    da60:	29 f0       	breq	.+10     	; 0xda6c <mmc_task+0x16>
        _mmc_timeout--;
    da62:	01 97       	sbiw	r24, 0x01	; 1
    da64:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_timeout+0x1>
    da68:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    da6c:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_mmc_pre>
    da70:	90 91 29 18 	lds	r25, 0x1829	; 0x801829 <_mmc_pre+0x1>
    da74:	8a 30       	cpi	r24, 0x0A	; 10
    da76:	91 05       	cpc	r25, r1
    da78:	30 f4       	brcc	.+12     	; 0xda86 <mmc_task+0x30>
    da7a:	01 96       	adiw	r24, 0x01	; 1
    da7c:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_pre+0x1>
    da80:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_pre>
    da84:	08 95       	ret
        return;

    _mmc_pre = 0;
    da86:	10 92 29 18 	sts	0x1829, r1	; 0x801829 <_mmc_pre+0x1>
    da8a:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre>

	if(!mmc_ins_status())
    da8e:	d6 df       	rcall	.-84     	; 0xda3c <mmc_ins_status>
    da90:	89 2b       	or	r24, r25
    da92:	19 f4       	brne	.+6      	; 0xda9a <mmc_task+0x44>
		set_error(1);
    da94:	81 e0       	ldi	r24, 0x01	; 1
    da96:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <set_error>

    mmc_disk_timerproc();
    da9a:	30 cf       	rjmp	.-416    	; 0xd8fc <mmc_disk_timerproc>
    da9c:	08 95       	ret

0000da9e <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    da9e:	ac e0       	ldi	r26, 0x0C	; 12
    daa0:	b1 e0       	ldi	r27, 0x01	; 1
    daa2:	e5 e5       	ldi	r30, 0x55	; 85
    daa4:	fd e6       	ldi	r31, 0x6D	; 109
    daa6:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
    daaa:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    daac:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dab0:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dab4:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dab6:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dab8:	79 df       	rcall	.-270    	; 0xd9ac <mmc_spi_init>

    if( verbose)
    daba:	e1 14       	cp	r14, r1
    dabc:	f1 04       	cpc	r15, r1
    dabe:	51 f0       	breq	.+20     	; 0xdad4 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dac0:	8a e0       	ldi	r24, 0x0A	; 10
    dac2:	98 e0       	ldi	r25, 0x08	; 8
    dac4:	a0 e0       	ldi	r26, 0x00	; 0
    dac6:	ed b7       	in	r30, 0x3d	; 61
    dac8:	fe b7       	in	r31, 0x3e	; 62
    daca:	81 83       	std	Z+1, r24	; 0x01
    dacc:	92 83       	std	Z+2, r25	; 0x02
    dace:	a3 83       	std	Z+3, r26	; 0x03
    dad0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dad4:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <mmc_init_flag>
    dad8:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <mmc_init_flag+0x1>
    dadc:	89 2b       	or	r24, r25
        mmc_install_timer();
    dade:	09 f4       	brne	.+2      	; 0xdae2 <mmc_init+0x44>

	if(!mmc_ins_status())
    dae0:	2b df       	rcall	.-426    	; 0xd938 <mmc_install_timer>
    dae2:	ac df       	rcall	.-168    	; 0xda3c <mmc_ins_status>
    dae4:	89 2b       	or	r24, r25
    dae6:	61 f4       	brne	.+24     	; 0xdb00 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dae8:	8a ee       	ldi	r24, 0xEA	; 234
    daea:	97 e0       	ldi	r25, 0x07	; 7
    daec:	a0 e0       	ldi	r26, 0x00	; 0
    daee:	ed b7       	in	r30, 0x3d	; 61
    daf0:	fe b7       	in	r31, 0x3e	; 62
    daf2:	81 83       	std	Z+1, r24	; 0x01
    daf4:	92 83       	std	Z+2, r25	; 0x02
    daf6:	a3 83       	std	Z+3, r26	; 0x03
    daf8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		return(RES_NOTRDY);	
    dafc:	83 e0       	ldi	r24, 0x03	; 3
    dafe:	9a c0       	rjmp	.+308    	; 0xdc34 <mmc_init+0x196>
	}


    if( verbose)
    db00:	e1 14       	cp	r14, r1
    db02:	f1 04       	cpc	r15, r1
    db04:	11 f1       	breq	.+68     	; 0xdb4a <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    db06:	87 ed       	ldi	r24, 0xD7	; 215
    db08:	97 e0       	ldi	r25, 0x07	; 7
    db0a:	a0 e0       	ldi	r26, 0x00	; 0
    db0c:	ed b7       	in	r30, 0x3d	; 61
    db0e:	fe b7       	in	r31, 0x3e	; 62
    db10:	81 83       	std	Z+1, r24	; 0x01
    db12:	92 83       	std	Z+2, r25	; 0x02
    db14:	a3 83       	std	Z+3, r26	; 0x03
    db16:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    db1a:	8b ec       	ldi	r24, 0xCB	; 203
    db1c:	97 e0       	ldi	r25, 0x07	; 7
    db1e:	a0 e0       	ldi	r26, 0x00	; 0
    db20:	ed b7       	in	r30, 0x3d	; 61
    db22:	fe b7       	in	r31, 0x3e	; 62
    db24:	81 83       	std	Z+1, r24	; 0x01
    db26:	92 83       	std	Z+2, r25	; 0x02
    db28:	a3 83       	std	Z+3, r26	; 0x03
    db2a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    db2e:	85 eb       	ldi	r24, 0xB5	; 181
    db30:	91 e0       	ldi	r25, 0x01	; 1
    db32:	ed b7       	in	r30, 0x3d	; 61
    db34:	fe b7       	in	r31, 0x3e	; 62
    db36:	95 83       	std	Z+5, r25	; 0x05
    db38:	84 83       	std	Z+4, r24	; 0x04
    db3a:	8a eb       	ldi	r24, 0xBA	; 186
    db3c:	97 e0       	ldi	r25, 0x07	; 7
    db3e:	a0 e0       	ldi	r26, 0x00	; 0
    db40:	81 83       	std	Z+1, r24	; 0x01
    db42:	92 83       	std	Z+2, r25	; 0x02
    db44:	a3 83       	std	Z+3, r26	; 0x03
    db46:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    db4a:	80 e0       	ldi	r24, 0x00	; 0
    db4c:	1d da       	rcall	.-3014   	; 0xcf88 <disk_initialize>
    db4e:	08 2f       	mov	r16, r24
    db50:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    db52:	01 15       	cp	r16, r1
    db54:	11 05       	cpc	r17, r1
        put_rc(rc);
    db56:	19 f0       	breq	.+6      	; 0xdb5e <mmc_init+0xc0>
    db58:	c8 01       	movw	r24, r16
    db5a:	f4 d0       	rcall	.+488    	; 0xdd44 <put_rc>
    db5c:	0e c0       	rjmp	.+28     	; 0xdb7a <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    db5e:	40 e0       	ldi	r20, 0x00	; 0
    db60:	66 ea       	ldi	r22, 0xA6	; 166
    db62:	78 e0       	ldi	r23, 0x08	; 8
    db64:	80 e8       	ldi	r24, 0x80	; 128
    db66:	9a e1       	ldi	r25, 0x1A	; 26
    db68:	0e 94 9c 57 	call	0xaf38	; 0xaf38 <f_mount>
    db6c:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    db6e:	89 2b       	or	r24, r25
    db70:	21 f4       	brne	.+8      	; 0xdb7a <mmc_init+0xdc>
    db72:	e1 14       	cp	r14, r1
    db74:	f1 04       	cpc	r15, r1
    db76:	09 f4       	brne	.+2      	; 0xdb7a <mmc_init+0xdc>
        put_rc( rc );
    db78:	4f c0       	rjmp	.+158    	; 0xdc18 <mmc_init+0x17a>
    db7a:	c8 01       	movw	r24, r16
    db7c:	e3 d0       	rcall	.+454    	; 0xdd44 <put_rc>

    if (verbose )
    db7e:	e1 14       	cp	r14, r1
    db80:	f1 04       	cpc	r15, r1
    db82:	09 f4       	brne	.+2      	; 0xdb86 <mmc_init+0xe8>
    db84:	49 c0       	rjmp	.+146    	; 0xdc18 <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    db86:	c7 5f       	subi	r28, 0xF7	; 247
    db88:	de 4f       	sbci	r29, 0xFE	; 254
    db8a:	18 82       	st	Y, r1
    db8c:	19 82       	std	Y+1, r1	; 0x01
    db8e:	1a 82       	std	Y+2, r1	; 0x02
    db90:	1b 82       	std	Y+3, r1	; 0x03
    db92:	c9 50       	subi	r28, 0x09	; 9
    db94:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    db96:	01 15       	cp	r16, r1
    db98:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    db9a:	a1 f5       	brne	.+104    	; 0xdc04 <mmc_init+0x166>
    db9c:	ae 01       	movw	r20, r28
    db9e:	47 5f       	subi	r20, 0xF7	; 247
    dba0:	5e 4f       	sbci	r21, 0xFE	; 254
    dba2:	63 e0       	ldi	r22, 0x03	; 3
    dba4:	80 e0       	ldi	r24, 0x00	; 0
    dba6:	16 da       	rcall	.-3028   	; 0xcfd4 <disk_ioctl>
            if( rc != RES_OK)
    dba8:	8c 01       	movw	r16, r24
    dbaa:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dbac:	61 f0       	breq	.+24     	; 0xdbc6 <mmc_init+0x128>
    dbae:	ca d0       	rcall	.+404    	; 0xdd44 <put_rc>
                printf("MMC Block Size - read failed\n");
    dbb0:	8c e9       	ldi	r24, 0x9C	; 156
    dbb2:	97 e0       	ldi	r25, 0x07	; 7
    dbb4:	a0 e0       	ldi	r26, 0x00	; 0
    dbb6:	ed b7       	in	r30, 0x3d	; 61
    dbb8:	fe b7       	in	r31, 0x3e	; 62
    dbba:	81 83       	std	Z+1, r24	; 0x01
    dbbc:	92 83       	std	Z+2, r25	; 0x02
    dbbe:	a3 83       	std	Z+3, r26	; 0x03
    dbc0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    dbc4:	1f c0       	rjmp	.+62     	; 0xdc04 <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dbc6:	c7 5f       	subi	r28, 0xF7	; 247
    dbc8:	de 4f       	sbci	r29, 0xFE	; 254
    dbca:	88 81       	ld	r24, Y
    dbcc:	99 81       	ldd	r25, Y+1	; 0x01
    dbce:	aa 81       	ldd	r26, Y+2	; 0x02
    dbd0:	bb 81       	ldd	r27, Y+3	; 0x03
    dbd2:	c9 50       	subi	r28, 0x09	; 9
    dbd4:	d1 40       	sbci	r29, 0x01	; 1
    dbd6:	ed b7       	in	r30, 0x3d	; 61
    dbd8:	fe b7       	in	r31, 0x3e	; 62
    dbda:	84 83       	std	Z+4, r24	; 0x04
    dbdc:	95 83       	std	Z+5, r25	; 0x05
    dbde:	a6 83       	std	Z+6, r26	; 0x06
    dbe0:	b7 83       	std	Z+7, r27	; 0x07
    dbe2:	87 e8       	ldi	r24, 0x87	; 135
    dbe4:	97 e0       	ldi	r25, 0x07	; 7
    dbe6:	a0 e0       	ldi	r26, 0x00	; 0
    dbe8:	81 83       	std	Z+1, r24	; 0x01
    dbea:	92 83       	std	Z+2, r25	; 0x02
    dbec:	a3 83       	std	Z+3, r26	; 0x03
    dbee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    dbf2:	66 ea       	ldi	r22, 0xA6	; 166
    dbf4:	78 e0       	ldi	r23, 0x08	; 8
    dbf6:	ce 01       	movw	r24, r28
    dbf8:	08 96       	adiw	r24, 0x08	; 8
    dbfa:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
                fatfs_status(buff);
    dbfe:	ce 01       	movw	r24, r28
    dc00:	08 96       	adiw	r24, 0x08	; 8
    dc02:	34 d1       	rcall	.+616    	; 0xde6c <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dc04:	89 e7       	ldi	r24, 0x79	; 121
    dc06:	97 e0       	ldi	r25, 0x07	; 7
    dc08:	a0 e0       	ldi	r26, 0x00	; 0
    dc0a:	ed b7       	in	r30, 0x3d	; 61
    dc0c:	fe b7       	in	r31, 0x3e	; 62
    dc0e:	81 83       	std	Z+1, r24	; 0x01
    dc10:	92 83       	std	Z+2, r25	; 0x02
    dc12:	a3 83       	std	Z+3, r26	; 0x03
    dc14:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
    mmc_init_flag = 1;
    dc18:	81 e0       	ldi	r24, 0x01	; 1
    dc1a:	90 e0       	ldi	r25, 0x00	; 0
    dc1c:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <mmc_init_flag+0x1>
    dc20:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <mmc_init_flag>

	if(rc != RES_OK)
    dc24:	01 15       	cp	r16, r1
    dc26:	11 05       	cpc	r17, r1
    dc28:	21 f0       	breq	.+8      	; 0xdc32 <mmc_init+0x194>
		set_error(1);
    dc2a:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <set_error>
    dc2e:	c8 01       	movw	r24, r16
    dc30:	02 c0       	rjmp	.+4      	; 0xdc36 <mmc_init+0x198>
    dc32:	80 e0       	ldi	r24, 0x00	; 0
    dc34:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dc36:	c4 5f       	subi	r28, 0xF4	; 244
    dc38:	de 4f       	sbci	r29, 0xFE	; 254
    dc3a:	e6 e0       	ldi	r30, 0x06	; 6
    dc3c:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0000dc40 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dc40:	80 e0       	ldi	r24, 0x00	; 0
    dc42:	90 e0       	ldi	r25, 0x00	; 0
    dc44:	08 95       	ret

0000dc46 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dc46:	0f 93       	push	r16
    dc48:	1f 93       	push	r17
    dc4a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dc4c:	46 81       	ldd	r20, Z+6	; 0x06
    dc4e:	57 81       	ldd	r21, Z+7	; 0x07
    dc50:	05 2e       	mov	r0, r21
    dc52:	00 0c       	add	r0, r0
    dc54:	66 0b       	sbc	r22, r22
    dc56:	77 0b       	sbc	r23, r23
    dc58:	ba 01       	movw	r22, r20
    dc5a:	55 27       	eor	r21, r21
    dc5c:	44 27       	eor	r20, r20
    dc5e:	84 81       	ldd	r24, Z+4	; 0x04
    dc60:	95 81       	ldd	r25, Z+5	; 0x05
    dc62:	09 2e       	mov	r0, r25
    dc64:	00 0c       	add	r0, r0
    dc66:	aa 0b       	sbc	r26, r26
    dc68:	bb 0b       	sbc	r27, r27
    dc6a:	2b e0       	ldi	r18, 0x0B	; 11
    dc6c:	88 0f       	add	r24, r24
    dc6e:	99 1f       	adc	r25, r25
    dc70:	aa 1f       	adc	r26, r26
    dc72:	bb 1f       	adc	r27, r27
    dc74:	2a 95       	dec	r18
    dc76:	d1 f7       	brne	.-12     	; 0xdc6c <tm_to_fat+0x26>
    dc78:	48 2b       	or	r20, r24
    dc7a:	59 2b       	or	r21, r25
    dc7c:	6a 2b       	or	r22, r26
    dc7e:	7b 2b       	or	r23, r27
    dc80:	82 81       	ldd	r24, Z+2	; 0x02
    dc82:	93 81       	ldd	r25, Z+3	; 0x03
    dc84:	09 2e       	mov	r0, r25
    dc86:	00 0c       	add	r0, r0
    dc88:	aa 0b       	sbc	r26, r26
    dc8a:	bb 0b       	sbc	r27, r27
    dc8c:	35 e0       	ldi	r19, 0x05	; 5
    dc8e:	88 0f       	add	r24, r24
    dc90:	99 1f       	adc	r25, r25
    dc92:	aa 1f       	adc	r26, r26
    dc94:	bb 1f       	adc	r27, r27
    dc96:	3a 95       	dec	r19
    dc98:	d1 f7       	brne	.-12     	; 0xdc8e <tm_to_fat+0x48>
    dc9a:	48 2b       	or	r20, r24
    dc9c:	59 2b       	or	r21, r25
    dc9e:	6a 2b       	or	r22, r26
    dca0:	7b 2b       	or	r23, r27
    dca2:	80 81       	ld	r24, Z
    dca4:	91 81       	ldd	r25, Z+1	; 0x01
    dca6:	09 2e       	mov	r0, r25
    dca8:	00 0c       	add	r0, r0
    dcaa:	aa 0b       	sbc	r26, r26
    dcac:	bb 0b       	sbc	r27, r27
    dcae:	b6 95       	lsr	r27
    dcb0:	a7 95       	ror	r26
    dcb2:	97 95       	ror	r25
    dcb4:	87 95       	ror	r24
    dcb6:	84 2b       	or	r24, r20
    dcb8:	95 2b       	or	r25, r21
    dcba:	a6 2b       	or	r26, r22
    dcbc:	b7 2b       	or	r27, r23
    dcbe:	02 85       	ldd	r16, Z+10	; 0x0a
    dcc0:	13 85       	ldd	r17, Z+11	; 0x0b
    dcc2:	00 55       	subi	r16, 0x50	; 80
    dcc4:	11 09       	sbc	r17, r1
    dcc6:	01 2e       	mov	r0, r17
    dcc8:	00 0c       	add	r0, r0
    dcca:	22 0b       	sbc	r18, r18
    dccc:	33 0b       	sbc	r19, r19
    dcce:	49 e1       	ldi	r20, 0x19	; 25
    dcd0:	00 0f       	add	r16, r16
    dcd2:	11 1f       	adc	r17, r17
    dcd4:	22 1f       	adc	r18, r18
    dcd6:	33 1f       	adc	r19, r19
    dcd8:	4a 95       	dec	r20
    dcda:	d1 f7       	brne	.-12     	; 0xdcd0 <tm_to_fat+0x8a>
    dcdc:	ac 01       	movw	r20, r24
    dcde:	bd 01       	movw	r22, r26
    dce0:	40 2b       	or	r20, r16
    dce2:	51 2b       	or	r21, r17
    dce4:	62 2b       	or	r22, r18
    dce6:	73 2b       	or	r23, r19
    dce8:	80 85       	ldd	r24, Z+8	; 0x08
    dcea:	91 85       	ldd	r25, Z+9	; 0x09
    dcec:	09 2e       	mov	r0, r25
    dcee:	00 0c       	add	r0, r0
    dcf0:	aa 0b       	sbc	r26, r26
    dcf2:	bb 0b       	sbc	r27, r27
    dcf4:	01 96       	adiw	r24, 0x01	; 1
    dcf6:	a1 1d       	adc	r26, r1
    dcf8:	b1 1d       	adc	r27, r1
    dcfa:	e5 e1       	ldi	r30, 0x15	; 21
    dcfc:	88 0f       	add	r24, r24
    dcfe:	99 1f       	adc	r25, r25
    dd00:	aa 1f       	adc	r26, r26
    dd02:	bb 1f       	adc	r27, r27
    dd04:	ea 95       	dec	r30
    dd06:	d1 f7       	brne	.-12     	; 0xdcfc <tm_to_fat+0xb6>
    dd08:	8a 01       	movw	r16, r20
    dd0a:	9b 01       	movw	r18, r22
    dd0c:	08 2b       	or	r16, r24
    dd0e:	19 2b       	or	r17, r25
    dd10:	2a 2b       	or	r18, r26
    dd12:	3b 2b       	or	r19, r27
    dd14:	c9 01       	movw	r24, r18
    dd16:	b8 01       	movw	r22, r16
}
    dd18:	1f 91       	pop	r17
    dd1a:	0f 91       	pop	r16
    dd1c:	08 95       	ret

0000dd1e <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    dd1e:	a4 e0       	ldi	r26, 0x04	; 4
    dd20:	b0 e0       	ldi	r27, 0x00	; 0
    dd22:	e5 e9       	ldi	r30, 0x95	; 149
    dd24:	fe e6       	ldi	r31, 0x6E	; 110
    dd26:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    dd2a:	ce 01       	movw	r24, r28
    dd2c:	01 96       	adiw	r24, 0x01	; 1
    dd2e:	0e 94 32 36 	call	0x6c64	; 0x6c64 <time>
    return( tm_to_fat(localtime(&t)));
    dd32:	ce 01       	movw	r24, r28
    dd34:	01 96       	adiw	r24, 0x01	; 1
    dd36:	0e 94 cb 36 	call	0x6d96	; 0x6d96 <localtime>
    dd3a:	85 df       	rcall	.-246    	; 0xdc46 <tm_to_fat>
}
    dd3c:	24 96       	adiw	r28, 0x04	; 4
    dd3e:	e2 e0       	ldi	r30, 0x02	; 2
    dd40:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000dd44 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    dd44:	00 d0       	rcall	.+0      	; 0xdd46 <put_rc+0x2>
    dd46:	00 d0       	rcall	.+0      	; 0xdd48 <put_rc+0x4>
    dd48:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    dd4a:	ed b7       	in	r30, 0x3d	; 61
    dd4c:	fe b7       	in	r31, 0x3e	; 62
    dd4e:	95 83       	std	Z+5, r25	; 0x05
    dd50:	84 83       	std	Z+4, r24	; 0x04
    dd52:	8c e9       	ldi	r24, 0x9C	; 156
    dd54:	9a e0       	ldi	r25, 0x0A	; 10
    dd56:	a0 e0       	ldi	r26, 0x00	; 0
    dd58:	81 83       	std	Z+1, r24	; 0x01
    dd5a:	92 83       	std	Z+2, r25	; 0x02
    dd5c:	a3 83       	std	Z+3, r26	; 0x03
    dd5e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
}
    dd62:	0f 90       	pop	r0
    dd64:	0f 90       	pop	r0
    dd66:	0f 90       	pop	r0
    dd68:	0f 90       	pop	r0
    dd6a:	0f 90       	pop	r0
    dd6c:	08 95       	ret

0000dd6e <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    dd6e:	a4 e4       	ldi	r26, 0x44	; 68
    dd70:	b1 e0       	ldi	r27, 0x01	; 1
    dd72:	ed eb       	ldi	r30, 0xBD	; 189
    dd74:	fe e6       	ldi	r31, 0x6E	; 110
    dd76:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__prologue_saves__+0x16>
    dd7a:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    dd7c:	bc 01       	movw	r22, r24
    dd7e:	ce 01       	movw	r24, r28
    dd80:	89 5e       	subi	r24, 0xE9	; 233
    dd82:	9e 4f       	sbci	r25, 0xFE	; 254
    dd84:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <f_opendir>
    if (fr == FR_OK)
    dd88:	00 97       	sbiw	r24, 0x00	; 0
    dd8a:	09 f0       	breq	.+2      	; 0xdd8e <fatfs_scan_files+0x20>
    dd8c:	5b c0       	rjmp	.+182    	; 0xde44 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dd8e:	8f e2       	ldi	r24, 0x2F	; 47
    dd90:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    dd92:	be 01       	movw	r22, r28
    dd94:	6f 5f       	subi	r22, 0xFF	; 255
    dd96:	7f 4f       	sbci	r23, 0xFF	; 255
    dd98:	ce 01       	movw	r24, r28
    dd9a:	89 5e       	subi	r24, 0xE9	; 233
    dd9c:	9e 4f       	sbci	r25, 0xFE	; 254
    dd9e:	0e 94 dd 61 	call	0xc3ba	; 0xc3ba <f_readdir>
    dda2:	00 97       	sbiw	r24, 0x00	; 0
    dda4:	09 f0       	breq	.+2      	; 0xdda8 <fatfs_scan_files+0x3a>
    dda6:	4e c0       	rjmp	.+156    	; 0xde44 <fatfs_scan_files+0xd6>
    dda8:	2f 89       	ldd	r18, Y+23	; 0x17
    ddaa:	22 23       	and	r18, r18
    ddac:	09 f4       	brne	.+2      	; 0xddb0 <fatfs_scan_files+0x42>
    ddae:	4a c0       	rjmp	.+148    	; 0xde44 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    ddb0:	89 85       	ldd	r24, Y+9	; 0x09
    ddb2:	84 ff       	sbrs	r24, 4
    ddb4:	25 c0       	rjmp	.+74     	; 0xde00 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    ddb6:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    ddba:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    ddbe:	01 96       	adiw	r24, 0x01	; 1
    ddc0:	90 93 ba 1c 	sts	0x1CBA, r25	; 0x801cba <AccDirs+0x1>
    ddc4:	80 93 b9 1c 	sts	0x1CB9, r24	; 0x801cb9 <AccDirs>
                i = strlen(path);
    ddc8:	f8 01       	movw	r30, r16
    ddca:	01 90       	ld	r0, Z+
    ddcc:	00 20       	and	r0, r0
    ddce:	e9 f7       	brne	.-6      	; 0xddca <fatfs_scan_files+0x5c>
    ddd0:	31 97       	sbiw	r30, 0x01	; 1
    ddd2:	e0 1b       	sub	r30, r16
    ddd4:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ddd6:	78 01       	movw	r14, r16
    ddd8:	ee 0e       	add	r14, r30
    ddda:	ff 1e       	adc	r15, r31
    dddc:	d7 01       	movw	r26, r14
    ddde:	dc 92       	st	X, r13
    dde0:	cf 01       	movw	r24, r30
    dde2:	01 96       	adiw	r24, 0x01	; 1
    dde4:	be 01       	movw	r22, r28
    dde6:	69 5e       	subi	r22, 0xE9	; 233
    dde8:	7f 4f       	sbci	r23, 0xFF	; 255
    ddea:	80 0f       	add	r24, r16
    ddec:	91 1f       	adc	r25, r17
    ddee:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
                fr = fatfs_scan_files(path);
    ddf2:	c8 01       	movw	r24, r16
    ddf4:	bc df       	rcall	.-136    	; 0xdd6e <fatfs_scan_files>
                path[i] = 0;
    ddf6:	f7 01       	movw	r30, r14
    ddf8:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    ddfa:	00 97       	sbiw	r24, 0x00	; 0
    ddfc:	51 f2       	breq	.-108    	; 0xdd92 <fatfs_scan_files+0x24>
    ddfe:	22 c0       	rjmp	.+68     	; 0xde44 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    de00:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    de04:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    de08:	01 96       	adiw	r24, 0x01	; 1
    de0a:	90 93 bc 1c 	sts	0x1CBC, r25	; 0x801cbc <AccFiles+0x1>
    de0e:	80 93 bb 1c 	sts	0x1CBB, r24	; 0x801cbb <AccFiles>
                AccSize += info.fsize;
    de12:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <AccSize>
    de16:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    de1a:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    de1e:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    de22:	89 81       	ldd	r24, Y+1	; 0x01
    de24:	9a 81       	ldd	r25, Y+2	; 0x02
    de26:	ab 81       	ldd	r26, Y+3	; 0x03
    de28:	bc 81       	ldd	r27, Y+4	; 0x04
    de2a:	84 0f       	add	r24, r20
    de2c:	95 1f       	adc	r25, r21
    de2e:	a6 1f       	adc	r26, r22
    de30:	b7 1f       	adc	r27, r23
    de32:	80 93 b5 1c 	sts	0x1CB5, r24	; 0x801cb5 <AccSize>
    de36:	90 93 b6 1c 	sts	0x1CB6, r25	; 0x801cb6 <AccSize+0x1>
    de3a:	a0 93 b7 1c 	sts	0x1CB7, r26	; 0x801cb7 <AccSize+0x2>
    de3e:	b0 93 b8 1c 	sts	0x1CB8, r27	; 0x801cb8 <AccSize+0x3>
    de42:	a7 cf       	rjmp	.-178    	; 0xdd92 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    de44:	cc 5b       	subi	r28, 0xBC	; 188
    de46:	de 4f       	sbci	r29, 0xFE	; 254
    de48:	e7 e0       	ldi	r30, 0x07	; 7
    de4a:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__epilogue_restores__+0x16>

0000de4e <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    de4e:	01 97       	sbiw	r24, 0x01	; 1
    de50:	84 30       	cpi	r24, 0x04	; 4
    de52:	91 05       	cpc	r25, r1
    de54:	40 f4       	brcc	.+16     	; 0xde66 <fatfs_fstype+0x18>
    de56:	88 0f       	add	r24, r24
    de58:	99 1f       	adc	r25, r25
    de5a:	fc 01       	movw	r30, r24
    de5c:	e6 53       	subi	r30, 0x36	; 54
    de5e:	f7 4f       	sbci	r31, 0xF7	; 247
    de60:	80 81       	ld	r24, Z
    de62:	91 81       	ldd	r25, Z+1	; 0x01
    de64:	08 95       	ret
    char *ptr;
    switch(type)
    de66:	88 ea       	ldi	r24, 0xA8	; 168
    de68:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    de6a:	08 95       	ret

0000de6c <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    de6c:	a7 e3       	ldi	r26, 0x37	; 55
    de6e:	b0 e0       	ldi	r27, 0x00	; 0
    de70:	ec e3       	ldi	r30, 0x3C	; 60
    de72:	ff e6       	ldi	r31, 0x6F	; 111
    de74:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    de78:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    de7a:	fc 01       	movw	r30, r24
    de7c:	21 91       	ld	r18, Z+
    de7e:	cf 01       	movw	r24, r30
    de80:	20 32       	cpi	r18, 0x20	; 32
    de82:	d1 f3       	breq	.-12     	; 0xde78 <fatfs_status+0xc>
    de84:	29 30       	cpi	r18, 0x09	; 9
    de86:	c1 f3       	breq	.-16     	; 0xde78 <fatfs_status+0xc>
        ++ptr;

    printf("fatfs status:%s\n",ptr);
    de88:	ed b7       	in	r30, 0x3d	; 61
    de8a:	fe b7       	in	r31, 0x3e	; 62
    de8c:	e4 82       	std	Z+4, r14	; 0x04
    de8e:	f5 82       	std	Z+5, r15	; 0x05
    de90:	8b e8       	ldi	r24, 0x8B	; 139
    de92:	9a e0       	ldi	r25, 0x0A	; 10
    de94:	a0 e0       	ldi	r26, 0x00	; 0
    de96:	81 83       	std	Z+1, r24	; 0x01
    de98:	92 83       	std	Z+2, r25	; 0x02
    de9a:	a3 83       	std	Z+3, r26	; 0x03
    de9c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    dea0:	ae 01       	movw	r20, r28
    dea2:	4a 5c       	subi	r20, 0xCA	; 202
    dea4:	5f 4f       	sbci	r21, 0xFF	; 255
    dea6:	be 01       	movw	r22, r28
    dea8:	6e 5c       	subi	r22, 0xCE	; 206
    deaa:	7f 4f       	sbci	r23, 0xFF	; 255
    deac:	c7 01       	movw	r24, r14
    deae:	0e 94 5f 62 	call	0xc4be	; 0xc4be <f_getfree>
    if (res)
    deb2:	89 2b       	or	r24, r25
    deb4:	19 f0       	breq	.+6      	; 0xdebc <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    deb6:	8c e6       	ldi	r24, 0x6C	; 108
    deb8:	9a e0       	ldi	r25, 0x0A	; 10
    deba:	c0 c0       	rjmp	.+384    	; 0xe03c <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    debc:	ee a9       	ldd	r30, Y+54	; 0x36
    debe:	ff a9       	ldd	r31, Y+55	; 0x37
    dec0:	80 81       	ld	r24, Z
    dec2:	90 e0       	ldi	r25, 0x00	; 0
    dec4:	c4 df       	rcall	.-120    	; 0xde4e <fatfs_fstype>
    dec6:	ed b7       	in	r30, 0x3d	; 61
    dec8:	fe b7       	in	r31, 0x3e	; 62
    deca:	95 83       	std	Z+5, r25	; 0x05
    decc:	84 83       	std	Z+4, r24	; 0x04
    dece:	8e e4       	ldi	r24, 0x4E	; 78
    ded0:	9a e0       	ldi	r25, 0x0A	; 10
    ded2:	a0 e0       	ldi	r26, 0x00	; 0
    ded4:	81 83       	std	Z+1, r24	; 0x01
    ded6:	92 83       	std	Z+2, r25	; 0x02
    ded8:	a3 83       	std	Z+3, r26	; 0x03
    deda:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    dede:	ee a9       	ldd	r30, Y+54	; 0x36
    dee0:	ff a9       	ldd	r31, Y+55	; 0x37
    dee2:	81 85       	ldd	r24, Z+9	; 0x09
    dee4:	92 85       	ldd	r25, Z+10	; 0x0a
    dee6:	a0 e0       	ldi	r26, 0x00	; 0
    dee8:	b0 e0       	ldi	r27, 0x00	; 0
    deea:	39 e0       	ldi	r19, 0x09	; 9
    deec:	88 0f       	add	r24, r24
    deee:	99 1f       	adc	r25, r25
    def0:	aa 1f       	adc	r26, r26
    def2:	bb 1f       	adc	r27, r27
    def4:	3a 95       	dec	r19
    def6:	d1 f7       	brne	.-12     	; 0xdeec <fatfs_status+0x80>
    def8:	ed b7       	in	r30, 0x3d	; 61
    defa:	fe b7       	in	r31, 0x3e	; 62
    defc:	84 83       	std	Z+4, r24	; 0x04
    defe:	95 83       	std	Z+5, r25	; 0x05
    df00:	a6 83       	std	Z+6, r26	; 0x06
    df02:	b7 83       	std	Z+7, r27	; 0x07
    df04:	8f e2       	ldi	r24, 0x2F	; 47
    df06:	9a e0       	ldi	r25, 0x0A	; 10
    df08:	a0 e0       	ldi	r26, 0x00	; 0
    df0a:	81 83       	std	Z+1, r24	; 0x01
    df0c:	92 83       	std	Z+2, r25	; 0x02
    df0e:	a3 83       	std	Z+3, r26	; 0x03
    df10:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    df14:	ee a9       	ldd	r30, Y+54	; 0x36
    df16:	ff a9       	ldd	r31, Y+55	; 0x37
    df18:	82 81       	ldd	r24, Z+2	; 0x02
    df1a:	90 e0       	ldi	r25, 0x00	; 0
    df1c:	ed b7       	in	r30, 0x3d	; 61
    df1e:	fe b7       	in	r31, 0x3e	; 62
    df20:	95 83       	std	Z+5, r25	; 0x05
    df22:	84 83       	std	Z+4, r24	; 0x04
    df24:	81 e1       	ldi	r24, 0x11	; 17
    df26:	9a e0       	ldi	r25, 0x0A	; 10
    df28:	a0 e0       	ldi	r26, 0x00	; 0
    df2a:	81 83       	std	Z+1, r24	; 0x01
    df2c:	92 83       	std	Z+2, r25	; 0x02
    df2e:	a3 83       	std	Z+3, r26	; 0x03
    df30:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    df34:	ee a9       	ldd	r30, Y+54	; 0x36
    df36:	ff a9       	ldd	r31, Y+55	; 0x37
    df38:	87 81       	ldd	r24, Z+7	; 0x07
    df3a:	90 85       	ldd	r25, Z+8	; 0x08
    df3c:	ed b7       	in	r30, 0x3d	; 61
    df3e:	fe b7       	in	r31, 0x3e	; 62
    df40:	95 83       	std	Z+5, r25	; 0x05
    df42:	84 83       	std	Z+4, r24	; 0x04
    df44:	83 ef       	ldi	r24, 0xF3	; 243
    df46:	99 e0       	ldi	r25, 0x09	; 9
    df48:	a0 e0       	ldi	r26, 0x00	; 0
    df4a:	81 83       	std	Z+1, r24	; 0x01
    df4c:	92 83       	std	Z+2, r25	; 0x02
    df4e:	a3 83       	std	Z+3, r26	; 0x03
    df50:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    df54:	ee a9       	ldd	r30, Y+54	; 0x36
    df56:	ff a9       	ldd	r31, Y+55	; 0x37
    df58:	85 8d       	ldd	r24, Z+29	; 0x1d
    df5a:	96 8d       	ldd	r25, Z+30	; 0x1e
    df5c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    df5e:	b0 a1       	ldd	r27, Z+32	; 0x20
    df60:	ed b7       	in	r30, 0x3d	; 61
    df62:	fe b7       	in	r31, 0x3e	; 62
    df64:	84 83       	std	Z+4, r24	; 0x04
    df66:	95 83       	std	Z+5, r25	; 0x05
    df68:	a6 83       	std	Z+6, r26	; 0x06
    df6a:	b7 83       	std	Z+7, r27	; 0x07
    df6c:	84 ed       	ldi	r24, 0xD4	; 212
    df6e:	99 e0       	ldi	r25, 0x09	; 9
    df70:	a0 e0       	ldi	r26, 0x00	; 0
    df72:	81 83       	std	Z+1, r24	; 0x01
    df74:	92 83       	std	Z+2, r25	; 0x02
    df76:	a3 83       	std	Z+3, r26	; 0x03
    df78:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    df7c:	ee a9       	ldd	r30, Y+54	; 0x36
    df7e:	ff a9       	ldd	r31, Y+55	; 0x37
    df80:	81 8d       	ldd	r24, Z+25	; 0x19
    df82:	92 8d       	ldd	r25, Z+26	; 0x1a
    df84:	a3 8d       	ldd	r26, Z+27	; 0x1b
    df86:	b4 8d       	ldd	r27, Z+28	; 0x1c
    df88:	02 97       	sbiw	r24, 0x02	; 2
    df8a:	a1 09       	sbc	r26, r1
    df8c:	b1 09       	sbc	r27, r1
    df8e:	ed b7       	in	r30, 0x3d	; 61
    df90:	fe b7       	in	r31, 0x3e	; 62
    df92:	84 83       	std	Z+4, r24	; 0x04
    df94:	95 83       	std	Z+5, r25	; 0x05
    df96:	a6 83       	std	Z+6, r26	; 0x06
    df98:	b7 83       	std	Z+7, r27	; 0x07
    df9a:	85 eb       	ldi	r24, 0xB5	; 181
    df9c:	99 e0       	ldi	r25, 0x09	; 9
    df9e:	a0 e0       	ldi	r26, 0x00	; 0
    dfa0:	81 83       	std	Z+1, r24	; 0x01
    dfa2:	92 83       	std	Z+2, r25	; 0x02
    dfa4:	a3 83       	std	Z+3, r26	; 0x03
    dfa6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    dfaa:	ee a9       	ldd	r30, Y+54	; 0x36
    dfac:	ff a9       	ldd	r31, Y+55	; 0x37
    dfae:	85 a1       	ldd	r24, Z+37	; 0x25
    dfb0:	96 a1       	ldd	r25, Z+38	; 0x26
    dfb2:	a7 a1       	ldd	r26, Z+39	; 0x27
    dfb4:	b0 a5       	ldd	r27, Z+40	; 0x28
    dfb6:	ed b7       	in	r30, 0x3d	; 61
    dfb8:	fe b7       	in	r31, 0x3e	; 62
    dfba:	84 83       	std	Z+4, r24	; 0x04
    dfbc:	95 83       	std	Z+5, r25	; 0x05
    dfbe:	a6 83       	std	Z+6, r26	; 0x06
    dfc0:	b7 83       	std	Z+7, r27	; 0x07
    dfc2:	86 e9       	ldi	r24, 0x96	; 150
    dfc4:	99 e0       	ldi	r25, 0x09	; 9
    dfc6:	a0 e0       	ldi	r26, 0x00	; 0
    dfc8:	81 83       	std	Z+1, r24	; 0x01
    dfca:	92 83       	std	Z+2, r25	; 0x02
    dfcc:	a3 83       	std	Z+3, r26	; 0x03
    dfce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    dfd2:	ee a9       	ldd	r30, Y+54	; 0x36
    dfd4:	ff a9       	ldd	r31, Y+55	; 0x37
    dfd6:	81 a5       	ldd	r24, Z+41	; 0x29
    dfd8:	92 a5       	ldd	r25, Z+42	; 0x2a
    dfda:	a3 a5       	ldd	r26, Z+43	; 0x2b
    dfdc:	b4 a5       	ldd	r27, Z+44	; 0x2c
    dfde:	ed b7       	in	r30, 0x3d	; 61
    dfe0:	fe b7       	in	r31, 0x3e	; 62
    dfe2:	84 83       	std	Z+4, r24	; 0x04
    dfe4:	95 83       	std	Z+5, r25	; 0x05
    dfe6:	a6 83       	std	Z+6, r26	; 0x06
    dfe8:	b7 83       	std	Z+7, r27	; 0x07
    dfea:	87 e7       	ldi	r24, 0x77	; 119
    dfec:	99 e0       	ldi	r25, 0x09	; 9
    dfee:	a0 e0       	ldi	r26, 0x00	; 0
    dff0:	81 83       	std	Z+1, r24	; 0x01
    dff2:	92 83       	std	Z+2, r25	; 0x02
    dff4:	a3 83       	std	Z+3, r26	; 0x03
    dff6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    dffa:	ee a9       	ldd	r30, Y+54	; 0x36
    dffc:	ff a9       	ldd	r31, Y+55	; 0x37
    dffe:	85 a5       	ldd	r24, Z+45	; 0x2d
    e000:	96 a5       	ldd	r25, Z+46	; 0x2e
    e002:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e004:	b0 a9       	ldd	r27, Z+48	; 0x30
    e006:	ed b7       	in	r30, 0x3d	; 61
    e008:	fe b7       	in	r31, 0x3e	; 62
    e00a:	84 83       	std	Z+4, r24	; 0x04
    e00c:	95 83       	std	Z+5, r25	; 0x05
    e00e:	a6 83       	std	Z+6, r26	; 0x06
    e010:	b7 83       	std	Z+7, r27	; 0x07
    e012:	88 e5       	ldi	r24, 0x58	; 88
    e014:	99 e0       	ldi	r25, 0x09	; 9
    e016:	a0 e0       	ldi	r26, 0x00	; 0
    e018:	81 83       	std	Z+1, r24	; 0x01
    e01a:	92 83       	std	Z+2, r25	; 0x02
    e01c:	a3 83       	std	Z+3, r26	; 0x03
    e01e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e022:	ae 01       	movw	r20, r28
    e024:	42 5d       	subi	r20, 0xD2	; 210
    e026:	5f 4f       	sbci	r21, 0xFF	; 255
    e028:	be 01       	movw	r22, r28
    e02a:	6c 5e       	subi	r22, 0xEC	; 236
    e02c:	7f 4f       	sbci	r23, 0xFF	; 255
    e02e:	c7 01       	movw	r24, r14
    e030:	0e 94 91 66 	call	0xcd22	; 0xcd22 <f_getlabel>
    if (res)
    e034:	89 2b       	or	r24, r25
    e036:	69 f0       	breq	.+26     	; 0xe052 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e038:	88 e3       	ldi	r24, 0x38	; 56
    e03a:	99 e0       	ldi	r25, 0x09	; 9
    e03c:	a0 e0       	ldi	r26, 0x00	; 0
    e03e:	ed b7       	in	r30, 0x3d	; 61
    e040:	fe b7       	in	r31, 0x3e	; 62
    e042:	81 83       	std	Z+1, r24	; 0x01
    e044:	92 83       	std	Z+2, r25	; 0x02
    e046:	a3 83       	std	Z+3, r26	; 0x03
    e048:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(0);
    e04c:	80 e0       	ldi	r24, 0x00	; 0
    e04e:	90 e0       	ldi	r25, 0x00	; 0
    e050:	95 c0       	rjmp	.+298    	; 0xe17c <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e052:	8c 89       	ldd	r24, Y+20	; 0x14
    e054:	81 11       	cpse	r24, r1
    e056:	03 c0       	rjmp	.+6      	; 0xe05e <fatfs_status+0x1f2>
    e058:	80 eb       	ldi	r24, 0xB0	; 176
    e05a:	98 e0       	ldi	r25, 0x08	; 8
    e05c:	02 c0       	rjmp	.+4      	; 0xe062 <fatfs_status+0x1f6>
    e05e:	ce 01       	movw	r24, r28
    e060:	44 96       	adiw	r24, 0x14	; 20
    e062:	ed b7       	in	r30, 0x3d	; 61
    e064:	fe b7       	in	r31, 0x3e	; 62
    e066:	95 83       	std	Z+5, r25	; 0x05
    e068:	84 83       	std	Z+4, r24	; 0x04
    e06a:	8a e1       	ldi	r24, 0x1A	; 26
    e06c:	99 e0       	ldi	r25, 0x09	; 9
    e06e:	a0 e0       	ldi	r26, 0x00	; 0
    e070:	81 83       	std	Z+1, r24	; 0x01
    e072:	92 83       	std	Z+2, r25	; 0x02
    e074:	a3 83       	std	Z+3, r26	; 0x03
    e076:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e07a:	8e a5       	ldd	r24, Y+46	; 0x2e
    e07c:	9f a5       	ldd	r25, Y+47	; 0x2f
    e07e:	a8 a9       	ldd	r26, Y+48	; 0x30
    e080:	b9 a9       	ldd	r27, Y+49	; 0x31
    e082:	ed b7       	in	r30, 0x3d	; 61
    e084:	fe b7       	in	r31, 0x3e	; 62
    e086:	97 83       	std	Z+7, r25	; 0x07
    e088:	86 83       	std	Z+6, r24	; 0x06
    e08a:	b5 83       	std	Z+5, r27	; 0x05
    e08c:	a4 83       	std	Z+4, r26	; 0x04
    e08e:	85 ef       	ldi	r24, 0xF5	; 245
    e090:	98 e0       	ldi	r25, 0x08	; 8
    e092:	a0 e0       	ldi	r26, 0x00	; 0
    e094:	81 83       	std	Z+1, r24	; 0x01
    e096:	92 83       	std	Z+2, r25	; 0x02
    e098:	a3 83       	std	Z+3, r26	; 0x03
    e09a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e09e:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccDirs+0x1>
    e0a2:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccDirs>
    e0a6:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccFiles+0x1>
    e0aa:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccFiles>
    e0ae:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize>
    e0b2:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccSize+0x1>
    e0b6:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccSize+0x2>
    e0ba:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e0be:	c7 01       	movw	r24, r14
    e0c0:	56 de       	rcall	.-852    	; 0xdd6e <fatfs_scan_files>
    if (res)
    e0c2:	89 2b       	or	r24, r25
    e0c4:	19 f0       	breq	.+6      	; 0xe0cc <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e0c6:	8f ec       	ldi	r24, 0xCF	; 207
    e0c8:	98 e0       	ldi	r25, 0x08	; 8
    e0ca:	b8 cf       	rjmp	.-144    	; 0xe03c <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e0cc:	0e a9       	ldd	r16, Y+54	; 0x36
    e0ce:	1f a9       	ldd	r17, Y+55	; 0x37
    e0d0:	f8 01       	movw	r30, r16
    e0d2:	c1 84       	ldd	r12, Z+9	; 0x09
    e0d4:	d2 84       	ldd	r13, Z+10	; 0x0a
    e0d6:	e1 2c       	mov	r14, r1
    e0d8:	f1 2c       	mov	r15, r1
    e0da:	6a a9       	ldd	r22, Y+50	; 0x32
    e0dc:	7b a9       	ldd	r23, Y+51	; 0x33
    e0de:	8c a9       	ldd	r24, Y+52	; 0x34
    e0e0:	9d a9       	ldd	r25, Y+53	; 0x35
    e0e2:	a7 01       	movw	r20, r14
    e0e4:	96 01       	movw	r18, r12
    e0e6:	0e 94 3e e2 	call	0x1c47c	; 0x1c47c <__mulsi3>
    e0ea:	22 e0       	ldi	r18, 0x02	; 2
    e0ec:	30 e0       	ldi	r19, 0x00	; 0
    e0ee:	40 e0       	ldi	r20, 0x00	; 0
    e0f0:	50 e0       	ldi	r21, 0x00	; 0
    e0f2:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
    e0f6:	ed b7       	in	r30, 0x3d	; 61
    e0f8:	fe b7       	in	r31, 0x3e	; 62
    e0fa:	20 8b       	std	Z+16, r18	; 0x10
    e0fc:	31 8b       	std	Z+17, r19	; 0x11
    e0fe:	42 8b       	std	Z+18, r20	; 0x12
    e100:	53 8b       	std	Z+19, r21	; 0x13
    e102:	f8 01       	movw	r30, r16
    e104:	81 8d       	ldd	r24, Z+25	; 0x19
    e106:	92 8d       	ldd	r25, Z+26	; 0x1a
    e108:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e10a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e10c:	9c 01       	movw	r18, r24
    e10e:	ad 01       	movw	r20, r26
    e110:	22 50       	subi	r18, 0x02	; 2
    e112:	31 09       	sbc	r19, r1
    e114:	41 09       	sbc	r20, r1
    e116:	51 09       	sbc	r21, r1
    e118:	c7 01       	movw	r24, r14
    e11a:	b6 01       	movw	r22, r12
    e11c:	0e 94 3e e2 	call	0x1c47c	; 0x1c47c <__mulsi3>
    e120:	dc 01       	movw	r26, r24
    e122:	cb 01       	movw	r24, r22
    e124:	b6 95       	lsr	r27
    e126:	a7 95       	ror	r26
    e128:	97 95       	ror	r25
    e12a:	87 95       	ror	r24
    e12c:	ed b7       	in	r30, 0x3d	; 61
    e12e:	fe b7       	in	r31, 0x3e	; 62
    e130:	84 87       	std	Z+12, r24	; 0x0c
    e132:	95 87       	std	Z+13, r25	; 0x0d
    e134:	a6 87       	std	Z+14, r26	; 0x0e
    e136:	b7 87       	std	Z+15, r27	; 0x0f
    e138:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <AccDirs>
    e13c:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <AccDirs+0x1>
    e140:	93 87       	std	Z+11, r25	; 0x0b
    e142:	82 87       	std	Z+10, r24	; 0x0a
    e144:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <AccSize>
    e148:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <AccSize+0x1>
    e14c:	a0 91 b7 1c 	lds	r26, 0x1CB7	; 0x801cb7 <AccSize+0x2>
    e150:	b0 91 b8 1c 	lds	r27, 0x1CB8	; 0x801cb8 <AccSize+0x3>
    e154:	86 83       	std	Z+6, r24	; 0x06
    e156:	97 83       	std	Z+7, r25	; 0x07
    e158:	a0 87       	std	Z+8, r26	; 0x08
    e15a:	b1 87       	std	Z+9, r27	; 0x09
    e15c:	80 91 bb 1c 	lds	r24, 0x1CBB	; 0x801cbb <AccFiles>
    e160:	90 91 bc 1c 	lds	r25, 0x1CBC	; 0x801cbc <AccFiles+0x1>
    e164:	95 83       	std	Z+5, r25	; 0x05
    e166:	84 83       	std	Z+4, r24	; 0x04
    e168:	82 e8       	ldi	r24, 0x82	; 130
    e16a:	98 e0       	ldi	r25, 0x08	; 8
    e16c:	a0 e0       	ldi	r26, 0x00	; 0
    e16e:	81 83       	std	Z+1, r24	; 0x01
    e170:	92 83       	std	Z+2, r25	; 0x02
    e172:	a3 83       	std	Z+3, r26	; 0x03
    e174:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e178:	81 e0       	ldi	r24, 0x01	; 1
    e17a:	90 e0       	ldi	r25, 0x00	; 0
}
    e17c:	e7 96       	adiw	r28, 0x37	; 55
    e17e:	e8 e0       	ldi	r30, 0x08	; 8
    e180:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000e184 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e184:	ab e1       	ldi	r26, 0x1B	; 27
    e186:	b0 e0       	ldi	r27, 0x00	; 0
    e188:	e8 ec       	ldi	r30, 0xC8	; 200
    e18a:	f0 e7       	ldi	r31, 0x70	; 112
    e18c:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    e190:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e192:	fc 01       	movw	r30, r24
    e194:	86 89       	ldd	r24, Z+22	; 0x16
    e196:	81 11       	cpse	r24, r1
    e198:	03 c0       	rjmp	.+6      	; 0xe1a0 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e19a:	87 e6       	ldi	r24, 0x67	; 103
    e19c:	98 e0       	ldi	r25, 0x08	; 8
    e19e:	69 c0       	rjmp	.+210    	; 0xe272 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e1a0:	fd 01       	movw	r30, r26
    e1a2:	80 85       	ldd	r24, Z+8	; 0x08
    e1a4:	84 fd       	sbrc	r24, 4
    e1a6:	02 c0       	rjmp	.+4      	; 0xe1ac <fatfs_filinfo_list+0x28>
    e1a8:	9d e2       	ldi	r25, 0x2D	; 45
    e1aa:	01 c0       	rjmp	.+2      	; 0xe1ae <fatfs_filinfo_list+0x2a>
    e1ac:	94 e4       	ldi	r25, 0x44	; 68
    e1ae:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e1b0:	80 fd       	sbrc	r24, 0
    e1b2:	02 c0       	rjmp	.+4      	; 0xe1b8 <fatfs_filinfo_list+0x34>
    e1b4:	9d e2       	ldi	r25, 0x2D	; 45
    e1b6:	01 c0       	rjmp	.+2      	; 0xe1ba <fatfs_filinfo_list+0x36>
    e1b8:	92 e5       	ldi	r25, 0x52	; 82
    e1ba:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e1bc:	81 fd       	sbrc	r24, 1
    e1be:	02 c0       	rjmp	.+4      	; 0xe1c4 <fatfs_filinfo_list+0x40>
    e1c0:	9d e2       	ldi	r25, 0x2D	; 45
    e1c2:	01 c0       	rjmp	.+2      	; 0xe1c6 <fatfs_filinfo_list+0x42>
    e1c4:	98 e4       	ldi	r25, 0x48	; 72
    e1c6:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e1c8:	82 fd       	sbrc	r24, 2
    e1ca:	02 c0       	rjmp	.+4      	; 0xe1d0 <fatfs_filinfo_list+0x4c>
    e1cc:	9d e2       	ldi	r25, 0x2D	; 45
    e1ce:	01 c0       	rjmp	.+2      	; 0xe1d2 <fatfs_filinfo_list+0x4e>
    e1d0:	93 e5       	ldi	r25, 0x53	; 83
    e1d2:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e1d4:	85 fd       	sbrc	r24, 5
    e1d6:	02 c0       	rjmp	.+4      	; 0xe1dc <fatfs_filinfo_list+0x58>
    e1d8:	8d e2       	ldi	r24, 0x2D	; 45
    e1da:	01 c0       	rjmp	.+2      	; 0xe1de <fatfs_filinfo_list+0x5a>
    e1dc:	81 e4       	ldi	r24, 0x41	; 65
    e1de:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e1e0:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e1e2:	fd 01       	movw	r30, r26
    e1e4:	24 81       	ldd	r18, Z+4	; 0x04
    e1e6:	35 81       	ldd	r19, Z+5	; 0x05
    e1e8:	46 81       	ldd	r20, Z+6	; 0x06
    e1ea:	57 81       	ldd	r21, Z+7	; 0x07
    e1ec:	cd 01       	movw	r24, r26
    e1ee:	46 96       	adiw	r24, 0x16	; 22
    e1f0:	ed b7       	in	r30, 0x3d	; 61
    e1f2:	fe b7       	in	r31, 0x3e	; 62
    e1f4:	95 8b       	std	Z+21, r25	; 0x15
    e1f6:	84 8b       	std	Z+20, r24	; 0x14
    e1f8:	8d 91       	ld	r24, X+
    e1fa:	9d 91       	ld	r25, X+
    e1fc:	0d 90       	ld	r0, X+
    e1fe:	bc 91       	ld	r27, X
    e200:	a0 2d       	mov	r26, r0
    e202:	80 8b       	std	Z+16, r24	; 0x10
    e204:	91 8b       	std	Z+17, r25	; 0x11
    e206:	a2 8b       	std	Z+18, r26	; 0x12
    e208:	b3 8b       	std	Z+19, r27	; 0x13
    e20a:	ca 01       	movw	r24, r20
    e20c:	45 e0       	ldi	r20, 0x05	; 5
    e20e:	96 95       	lsr	r25
    e210:	87 95       	ror	r24
    e212:	4a 95       	dec	r20
    e214:	e1 f7       	brne	.-8      	; 0xe20e <fatfs_filinfo_list+0x8a>
    e216:	8f 73       	andi	r24, 0x3F	; 63
    e218:	99 27       	eor	r25, r25
    e21a:	97 87       	std	Z+15, r25	; 0x0f
    e21c:	86 87       	std	Z+14, r24	; 0x0e
    e21e:	85 2f       	mov	r24, r21
    e220:	86 95       	lsr	r24
    e222:	86 95       	lsr	r24
    e224:	86 95       	lsr	r24
    e226:	84 87       	std	Z+12, r24	; 0x0c
    e228:	15 86       	std	Z+13, r1	; 0x0d
    e22a:	c9 01       	movw	r24, r18
    e22c:	8f 71       	andi	r24, 0x1F	; 31
    e22e:	99 27       	eor	r25, r25
    e230:	93 87       	std	Z+11, r25	; 0x0b
    e232:	82 87       	std	Z+10, r24	; 0x0a
    e234:	c9 01       	movw	r24, r18
    e236:	55 e0       	ldi	r21, 0x05	; 5
    e238:	96 95       	lsr	r25
    e23a:	87 95       	ror	r24
    e23c:	5a 95       	dec	r21
    e23e:	e1 f7       	brne	.-8      	; 0xe238 <fatfs_filinfo_list+0xb4>
    e240:	8f 70       	andi	r24, 0x0F	; 15
    e242:	99 27       	eor	r25, r25
    e244:	91 87       	std	Z+9, r25	; 0x09
    e246:	80 87       	std	Z+8, r24	; 0x08
    e248:	23 2f       	mov	r18, r19
    e24a:	33 27       	eor	r19, r19
    e24c:	26 95       	lsr	r18
    e24e:	24 54       	subi	r18, 0x44	; 68
    e250:	38 4f       	sbci	r19, 0xF8	; 248
    e252:	37 83       	std	Z+7, r19	; 0x07
    e254:	26 83       	std	Z+6, r18	; 0x06
    e256:	ce 01       	movw	r24, r28
    e258:	46 96       	adiw	r24, 0x16	; 22
    e25a:	95 83       	std	Z+5, r25	; 0x05
    e25c:	84 83       	std	Z+4, r24	; 0x04
    e25e:	85 e4       	ldi	r24, 0x45	; 69
    e260:	98 e0       	ldi	r25, 0x08	; 8
    e262:	a0 e0       	ldi	r26, 0x00	; 0
    e264:	81 83       	std	Z+1, r24	; 0x01
    e266:	92 83       	std	Z+2, r25	; 0x02
    e268:	a3 83       	std	Z+3, r26	; 0x03
    e26a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e26e:	83 e4       	ldi	r24, 0x43	; 67
    e270:	98 e0       	ldi	r25, 0x08	; 8
    e272:	a0 e0       	ldi	r26, 0x00	; 0
    e274:	ed b7       	in	r30, 0x3d	; 61
    e276:	fe b7       	in	r31, 0x3e	; 62
    e278:	81 83       	std	Z+1, r24	; 0x01
    e27a:	92 83       	std	Z+2, r25	; 0x02
    e27c:	a3 83       	std	Z+3, r26	; 0x03
    e27e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
}
    e282:	6b 96       	adiw	r28, 0x1b	; 27
    e284:	e2 e0       	ldi	r30, 0x02	; 2
    e286:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000e28a <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e28a:	00 d0       	rcall	.+0      	; 0xe28c <fatfs_help+0x2>
    e28c:	1f 92       	push	r1
    if(full)
    e28e:	89 2b       	or	r24, r25
    e290:	51 f0       	breq	.+20     	; 0xe2a6 <fatfs_help+0x1c>
    {
        printf(
    e292:	81 e2       	ldi	r24, 0x21	; 33
    e294:	9b e0       	ldi	r25, 0x0B	; 11
    e296:	a0 e0       	ldi	r26, 0x00	; 0
    e298:	ed b7       	in	r30, 0x3d	; 61
    e29a:	fe b7       	in	r31, 0x3e	; 62
    e29c:	81 83       	std	Z+1, r24	; 0x01
    e29e:	92 83       	std	Z+2, r25	; 0x02
    e2a0:	a3 83       	std	Z+3, r26	; 0x03
    e2a2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
            "\n"
            );
    }

}
    e2a6:	0f 90       	pop	r0
    e2a8:	0f 90       	pop	r0
    e2aa:	0f 90       	pop	r0
    e2ac:	08 95       	ret

0000e2ae <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e2ae:	a6 e5       	ldi	r26, 0x56	; 86
    e2b0:	b2 e0       	ldi	r27, 0x02	; 2
    e2b2:	ed e5       	ldi	r30, 0x5D	; 93
    e2b4:	f1 e7       	ldi	r31, 0x71	; 113
    e2b6:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e2ba:	8e 01       	movw	r16, r28
    e2bc:	0e 5d       	subi	r16, 0xDE	; 222
    e2be:	1e 4f       	sbci	r17, 0xFE	; 254
    e2c0:	20 e0       	ldi	r18, 0x00	; 0
    e2c2:	31 e0       	ldi	r19, 0x01	; 1
    e2c4:	f8 01       	movw	r30, r16
    e2c6:	a9 01       	movw	r20, r18
    e2c8:	11 92       	st	Z+, r1
    e2ca:	41 50       	subi	r20, 0x01	; 1
    e2cc:	50 40       	sbci	r21, 0x00	; 0
    e2ce:	e1 f7       	brne	.-8      	; 0xe2c8 <fatfs_ls+0x1a>

    if(!name || !*name)
    e2d0:	00 97       	sbiw	r24, 0x00	; 0
    e2d2:	21 f0       	breq	.+8      	; 0xe2dc <fatfs_ls+0x2e>
    e2d4:	fc 01       	movw	r30, r24
    e2d6:	20 81       	ld	r18, Z
    e2d8:	21 11       	cpse	r18, r1
    e2da:	03 c0       	rjmp	.+6      	; 0xe2e2 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e2dc:	60 ef       	ldi	r22, 0xF0	; 240
    e2de:	72 e1       	ldi	r23, 0x12	; 18
    e2e0:	01 c0       	rjmp	.+2      	; 0xe2e4 <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e2e2:	bc 01       	movw	r22, r24
    e2e4:	c8 01       	movw	r24, r16
    e2e6:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e2ea:	ed b7       	in	r30, 0x3d	; 61
    e2ec:	fe b7       	in	r31, 0x3e	; 62
    e2ee:	15 83       	std	Z+5, r17	; 0x05
    e2f0:	04 83       	std	Z+4, r16	; 0x04
    e2f2:	81 ee       	ldi	r24, 0xE1	; 225
    e2f4:	9a e0       	ldi	r25, 0x0A	; 10
    e2f6:	a0 e0       	ldi	r26, 0x00	; 0
    e2f8:	81 83       	std	Z+1, r24	; 0x01
    e2fa:	92 83       	std	Z+2, r25	; 0x02
    e2fc:	a3 83       	std	Z+3, r26	; 0x03
    e2fe:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    res = f_opendir(&dirs, buff);
    e302:	b8 01       	movw	r22, r16
    e304:	ce 01       	movw	r24, r28
    e306:	8d 5d       	subi	r24, 0xDD	; 221
    e308:	9d 4f       	sbci	r25, 0xFD	; 253
    e30a:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <f_opendir>
    if (res != FR_OK) 
    e30e:	89 2b       	or	r24, r25
    e310:	09 f0       	breq	.+2      	; 0xe314 <fatfs_ls+0x66>
    e312:	96 c0       	rjmp	.+300    	; 0xe440 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e314:	cf 5a       	subi	r28, 0xAF	; 175
    e316:	dd 4f       	sbci	r29, 0xFD	; 253
    e318:	18 82       	st	Y, r1
    e31a:	19 82       	std	Y+1, r1	; 0x01
    e31c:	1a 82       	std	Y+2, r1	; 0x02
    e31e:	1b 82       	std	Y+3, r1	; 0x03
    e320:	c1 55       	subi	r28, 0x51	; 81
    e322:	d2 40       	sbci	r29, 0x02	; 2
    e324:	a1 2c       	mov	r10, r1
    e326:	b1 2c       	mov	r11, r1
    e328:	c1 2c       	mov	r12, r1
    e32a:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e32c:	be 01       	movw	r22, r28
    e32e:	64 5f       	subi	r22, 0xF4	; 244
    e330:	7f 4f       	sbci	r23, 0xFF	; 255
    e332:	ce 01       	movw	r24, r28
    e334:	8d 5d       	subi	r24, 0xDD	; 221
    e336:	9d 4f       	sbci	r25, 0xFD	; 253
    e338:	0e 94 dd 61 	call	0xc3ba	; 0xc3ba <f_readdir>
    e33c:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e33e:	89 2b       	or	r24, r25
    e340:	49 f5       	brne	.+82     	; 0xe394 <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e342:	8a a1       	ldd	r24, Y+34	; 0x22
    e344:	88 23       	and	r24, r24
    e346:	31 f1       	breq	.+76     	; 0xe394 <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e348:	8c 89       	ldd	r24, Y+20	; 0x14
    e34a:	84 ff       	sbrs	r24, 4
    e34c:	04 c0       	rjmp	.+8      	; 0xe356 <fatfs_ls+0xa8>
        {
            s2++;
    e34e:	ff ef       	ldi	r31, 0xFF	; 255
    e350:	af 1a       	sub	r10, r31
    e352:	bf 0a       	sbc	r11, r31
    e354:	1b c0       	rjmp	.+54     	; 0xe38c <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e356:	4f ef       	ldi	r20, 0xFF	; 255
    e358:	c4 1a       	sub	r12, r20
    e35a:	d4 0a       	sbc	r13, r20
    e35c:	4c 85       	ldd	r20, Y+12	; 0x0c
    e35e:	5d 85       	ldd	r21, Y+13	; 0x0d
    e360:	6e 85       	ldd	r22, Y+14	; 0x0e
    e362:	7f 85       	ldd	r23, Y+15	; 0x0f
    e364:	cf 5a       	subi	r28, 0xAF	; 175
    e366:	dd 4f       	sbci	r29, 0xFD	; 253
    e368:	88 81       	ld	r24, Y
    e36a:	99 81       	ldd	r25, Y+1	; 0x01
    e36c:	aa 81       	ldd	r26, Y+2	; 0x02
    e36e:	bb 81       	ldd	r27, Y+3	; 0x03
    e370:	c1 55       	subi	r28, 0x51	; 81
    e372:	d2 40       	sbci	r29, 0x02	; 2
    e374:	84 0f       	add	r24, r20
    e376:	95 1f       	adc	r25, r21
    e378:	a6 1f       	adc	r26, r22
    e37a:	b7 1f       	adc	r27, r23
    e37c:	cf 5a       	subi	r28, 0xAF	; 175
    e37e:	dd 4f       	sbci	r29, 0xFD	; 253
    e380:	88 83       	st	Y, r24
    e382:	99 83       	std	Y+1, r25	; 0x01
    e384:	aa 83       	std	Y+2, r26	; 0x02
    e386:	bb 83       	std	Y+3, r27	; 0x03
    e388:	c1 55       	subi	r28, 0x51	; 81
    e38a:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e38c:	ce 01       	movw	r24, r28
    e38e:	0c 96       	adiw	r24, 0x0c	; 12
    e390:	f9 de       	rcall	.-526    	; 0xe184 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e392:	cc cf       	rjmp	.-104    	; 0xe32c <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e394:	ce 01       	movw	r24, r28
    e396:	8d 5d       	subi	r24, 0xDD	; 221
    e398:	9d 4f       	sbci	r25, 0xFD	; 253
    e39a:	0e 94 c8 61 	call	0xc390	; 0xc390 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e39e:	ed b7       	in	r30, 0x3d	; 61
    e3a0:	fe b7       	in	r31, 0x3e	; 62
    e3a2:	b3 86       	std	Z+11, r11	; 0x0b
    e3a4:	a2 86       	std	Z+10, r10	; 0x0a
    e3a6:	cf 5a       	subi	r28, 0xAF	; 175
    e3a8:	dd 4f       	sbci	r29, 0xFD	; 253
    e3aa:	88 81       	ld	r24, Y
    e3ac:	99 81       	ldd	r25, Y+1	; 0x01
    e3ae:	aa 81       	ldd	r26, Y+2	; 0x02
    e3b0:	bb 81       	ldd	r27, Y+3	; 0x03
    e3b2:	c1 55       	subi	r28, 0x51	; 81
    e3b4:	d2 40       	sbci	r29, 0x02	; 2
    e3b6:	86 83       	std	Z+6, r24	; 0x06
    e3b8:	97 83       	std	Z+7, r25	; 0x07
    e3ba:	a0 87       	std	Z+8, r26	; 0x08
    e3bc:	b1 87       	std	Z+9, r27	; 0x09
    e3be:	d5 82       	std	Z+5, r13	; 0x05
    e3c0:	c4 82       	std	Z+4, r12	; 0x04
    e3c2:	88 eb       	ldi	r24, 0xB8	; 184
    e3c4:	9a e0       	ldi	r25, 0x0A	; 10
    e3c6:	a0 e0       	ldi	r26, 0x00	; 0
    e3c8:	81 83       	std	Z+1, r24	; 0x01
    e3ca:	92 83       	std	Z+2, r25	; 0x02
    e3cc:	a3 83       	std	Z+3, r26	; 0x03
    e3ce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e3d2:	ae 01       	movw	r20, r28
    e3d4:	4b 5a       	subi	r20, 0xAB	; 171
    e3d6:	5d 4f       	sbci	r21, 0xFD	; 253
    e3d8:	be 01       	movw	r22, r28
    e3da:	6f 5a       	subi	r22, 0xAF	; 175
    e3dc:	7d 4f       	sbci	r23, 0xFD	; 253
    e3de:	c8 01       	movw	r24, r16
    e3e0:	0e 94 5f 62 	call	0xc4be	; 0xc4be <f_getfree>
    e3e4:	89 2b       	or	r24, r25
    e3e6:	31 f5       	brne	.+76     	; 0xe434 <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e3e8:	cb 5a       	subi	r28, 0xAB	; 171
    e3ea:	dd 4f       	sbci	r29, 0xFD	; 253
    e3ec:	e8 81       	ld	r30, Y
    e3ee:	f9 81       	ldd	r31, Y+1	; 0x01
    e3f0:	c5 55       	subi	r28, 0x55	; 85
    e3f2:	d2 40       	sbci	r29, 0x02	; 2
    e3f4:	a1 85       	ldd	r26, Z+9	; 0x09
    e3f6:	b2 85       	ldd	r27, Z+10	; 0x0a
    e3f8:	cf 5a       	subi	r28, 0xAF	; 175
    e3fa:	dd 4f       	sbci	r29, 0xFD	; 253
    e3fc:	28 81       	ld	r18, Y
    e3fe:	39 81       	ldd	r19, Y+1	; 0x01
    e400:	4a 81       	ldd	r20, Y+2	; 0x02
    e402:	5b 81       	ldd	r21, Y+3	; 0x03
    e404:	c1 55       	subi	r28, 0x51	; 81
    e406:	d2 40       	sbci	r29, 0x02	; 2
    e408:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
    e40c:	22 e0       	ldi	r18, 0x02	; 2
    e40e:	30 e0       	ldi	r19, 0x00	; 0
    e410:	40 e0       	ldi	r20, 0x00	; 0
    e412:	50 e0       	ldi	r21, 0x00	; 0
    e414:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
    e418:	ed b7       	in	r30, 0x3d	; 61
    e41a:	fe b7       	in	r31, 0x3e	; 62
    e41c:	24 83       	std	Z+4, r18	; 0x04
    e41e:	35 83       	std	Z+5, r19	; 0x05
    e420:	46 83       	std	Z+6, r20	; 0x06
    e422:	57 83       	std	Z+7, r21	; 0x07
    e424:	83 ea       	ldi	r24, 0xA3	; 163
    e426:	9a e0       	ldi	r25, 0x0A	; 10
    e428:	a0 e0       	ldi	r26, 0x00	; 0
    e42a:	81 83       	std	Z+1, r24	; 0x01
    e42c:	92 83       	std	Z+2, r25	; 0x02
    e42e:	a3 83       	std	Z+3, r26	; 0x03
    e430:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
	if(res)
    e434:	e1 14       	cp	r14, r1
    e436:	f1 04       	cpc	r15, r1
    e438:	31 f4       	brne	.+12     	; 0xe446 <fatfs_ls+0x198>
		return(-1);
	return(1);
    e43a:	81 e0       	ldi	r24, 0x01	; 1
    e43c:	90 e0       	ldi	r25, 0x00	; 0
    e43e:	05 c0       	rjmp	.+10     	; 0xe44a <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e440:	80 e0       	ldi	r24, 0x00	; 0
    e442:	90 e0       	ldi	r25, 0x00	; 0
    e444:	02 c0       	rjmp	.+4      	; 0xe44a <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e446:	8f ef       	ldi	r24, 0xFF	; 255
    e448:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e44a:	ca 5a       	subi	r28, 0xAA	; 170
    e44c:	dd 4f       	sbci	r29, 0xFD	; 253
    e44e:	ea e0       	ldi	r30, 0x0A	; 10
    e450:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0000e454 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e454:	a4 e0       	ldi	r26, 0x04	; 4
    e456:	b1 e0       	ldi	r27, 0x01	; 1
    e458:	e0 e3       	ldi	r30, 0x30	; 48
    e45a:	f2 e7       	ldi	r31, 0x72	; 114
    e45c:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    char buff[MAX_NAME_LEN+1];

    sep();
    e460:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
    printf("START MMC TEST\n");
    e464:	81 e1       	ldi	r24, 0x11	; 17
    e466:	9b e0       	ldi	r25, 0x0B	; 11
    e468:	a0 e0       	ldi	r26, 0x00	; 0
    e46a:	ed b7       	in	r30, 0x3d	; 61
    e46c:	fe b7       	in	r31, 0x3e	; 62
    e46e:	81 83       	std	Z+1, r24	; 0x01
    e470:	92 83       	std	Z+2, r25	; 0x02
    e472:	a3 83       	std	Z+3, r26	; 0x03
    e474:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    strcpy(buff,"/");
    e478:	66 ea       	ldi	r22, 0xA6	; 166
    e47a:	78 e0       	ldi	r23, 0x08	; 8
    e47c:	ce 01       	movw	r24, r28
    e47e:	04 96       	adiw	r24, 0x04	; 4
    e480:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
    fatfs_status(buff);
    e484:	ce 01       	movw	r24, r28
    e486:	04 96       	adiw	r24, 0x04	; 4
    e488:	f1 dc       	rcall	.-1566   	; 0xde6c <fatfs_status>
    printf("MMC Directory List\n");
    e48a:	8d ef       	ldi	r24, 0xFD	; 253
    e48c:	9a e0       	ldi	r25, 0x0A	; 10
    e48e:	a0 e0       	ldi	r26, 0x00	; 0
    e490:	ed b7       	in	r30, 0x3d	; 61
    e492:	fe b7       	in	r31, 0x3e	; 62
    e494:	81 83       	std	Z+1, r24	; 0x01
    e496:	92 83       	std	Z+2, r25	; 0x02
    e498:	a3 83       	std	Z+3, r26	; 0x03
    e49a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    fatfs_ls("/");
    e49e:	86 ea       	ldi	r24, 0xA6	; 166
    e4a0:	98 e0       	ldi	r25, 0x08	; 8
    e4a2:	05 df       	rcall	.-502    	; 0xe2ae <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e4a4:	8f ee       	ldi	r24, 0xEF	; 239
    e4a6:	9a e0       	ldi	r25, 0x0A	; 10
    e4a8:	a0 e0       	ldi	r26, 0x00	; 0
    e4aa:	ed b7       	in	r30, 0x3d	; 61
    e4ac:	fe b7       	in	r31, 0x3e	; 62
    e4ae:	81 83       	std	Z+1, r24	; 0x01
    e4b0:	92 83       	std	Z+2, r25	; 0x02
    e4b2:	a3 83       	std	Z+3, r26	; 0x03
    e4b4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    sep();
    e4b8:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
}
    e4bc:	cc 5f       	subi	r28, 0xFC	; 252
    e4be:	de 4f       	sbci	r29, 0xFE	; 254
    e4c0:	e2 e0       	ldi	r30, 0x02	; 2
    e4c2:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000e4c6 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e4c6:	a4 e0       	ldi	r26, 0x04	; 4
    e4c8:	b1 e0       	ldi	r27, 0x01	; 1
    e4ca:	e9 e6       	ldi	r30, 0x69	; 105
    e4cc:	f2 e7       	ldi	r31, 0x72	; 114
    e4ce:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    int ind;

    char buff[MAX_NAME_LEN+1];

    ind = 0;
    ptr = argv[ind];
    e4d2:	fb 01       	movw	r30, r22
    e4d4:	20 81       	ld	r18, Z
    e4d6:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e4d8:	21 15       	cp	r18, r1
    e4da:	31 05       	cpc	r19, r1
    e4dc:	19 f4       	brne	.+6      	; 0xe4e4 <fatfs_tests+0x1e>
        return(0);
    e4de:	80 e0       	ldi	r24, 0x00	; 0
    e4e0:	90 e0       	ldi	r25, 0x00	; 0
    e4e2:	81 c0       	rjmp	.+258    	; 0xe5e6 <fatfs_tests+0x120>
    e4e4:	8b 01       	movw	r16, r22
    e4e6:	6c 01       	movw	r12, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e4e8:	62 ed       	ldi	r22, 0xD2	; 210
    e4ea:	78 e0       	ldi	r23, 0x08	; 8
    e4ec:	c9 01       	movw	r24, r18
    e4ee:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
    e4f2:	89 2b       	or	r24, r25
    e4f4:	a1 f3       	breq	.-24     	; 0xe4de <fatfs_tests+0x18>
    {
        ptr = argv[++ind];
    e4f6:	f8 01       	movw	r30, r16
    e4f8:	e2 80       	ldd	r14, Z+2	; 0x02
    e4fa:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e4fc:	e1 14       	cp	r14, r1
    e4fe:	f1 04       	cpc	r15, r1
    e500:	59 f4       	brne	.+22     	; 0xe518 <fatfs_tests+0x52>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e502:	81 e2       	ldi	r24, 0x21	; 33
    e504:	9b e0       	ldi	r25, 0x0B	; 11
    e506:	a0 e0       	ldi	r26, 0x00	; 0
    e508:	ed b7       	in	r30, 0x3d	; 61
    e50a:	fe b7       	in	r31, 0x3e	; 62
    e50c:	81 83       	std	Z+1, r24	; 0x01
    e50e:	92 83       	std	Z+2, r25	; 0x02
    e510:	a3 83       	std	Z+3, r26	; 0x03
    e512:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    e516:	40 c0       	rjmp	.+128    	; 0xe598 <fatfs_tests+0xd2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e518:	6c e6       	ldi	r22, 0x6C	; 108
    e51a:	76 e1       	ldi	r23, 0x16	; 22
    e51c:	c7 01       	movw	r24, r14
    e51e:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
    e522:	89 2b       	or	r24, r25
    e524:	71 f7       	brne	.-36     	; 0xe502 <fatfs_tests+0x3c>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e526:	68 ed       	ldi	r22, 0xD8	; 216
    e528:	78 e0       	ldi	r23, 0x08	; 8
    e52a:	c7 01       	movw	r24, r14
    e52c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
    e530:	89 2b       	or	r24, r25
    e532:	31 f0       	breq	.+12     	; 0xe540 <fatfs_tests+0x7a>
    e534:	0c 5f       	subi	r16, 0xFC	; 252
    e536:	1f 4f       	sbci	r17, 0xFF	; 255
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e538:	82 e0       	ldi	r24, 0x02	; 2
    e53a:	e8 2e       	mov	r14, r24
    e53c:	f1 2c       	mov	r15, r1
    e53e:	12 c0       	rjmp	.+36     	; 0xe564 <fatfs_tests+0x9e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e540:	68 ed       	ldi	r22, 0xD8	; 216
    e542:	7b e0       	ldi	r23, 0x0B	; 11
    e544:	c7 01       	movw	r24, r14
    e546:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
    e54a:	89 2b       	or	r24, r25
    e54c:	99 f7       	brne	.-26     	; 0xe534 <fatfs_tests+0x6e>
    e54e:	19 c0       	rjmp	.+50     	; 0xe582 <fatfs_tests+0xbc>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e550:	f8 01       	movw	r30, r16
    e552:	81 91       	ld	r24, Z+
    e554:	91 91       	ld	r25, Z+
    e556:	8f 01       	movw	r16, r30
    e558:	aa de       	rcall	.-684    	; 0xe2ae <fatfs_ls>
    e55a:	89 2b       	or	r24, r25
    e55c:	79 f0       	breq	.+30     	; 0xe57c <fatfs_tests+0xb6>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e55e:	ff ef       	ldi	r31, 0xFF	; 255
    e560:	ef 1a       	sub	r14, r31
    e562:	ff 0a       	sbc	r15, r31
    e564:	ec 14       	cp	r14, r12
    e566:	fd 04       	cpc	r15, r13
    e568:	9c f3       	brlt	.-26     	; 0xe550 <fatfs_tests+0x8a>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e56a:	82 e0       	ldi	r24, 0x02	; 2
    e56c:	e8 16       	cp	r14, r24
    e56e:	f1 04       	cpc	r15, r1
    e570:	99 f4       	brne	.+38     	; 0xe598 <fatfs_tests+0xd2>
        {
            if(fatfs_ls("") == 0)
    e572:	80 e2       	ldi	r24, 0x20	; 32
    e574:	9c e0       	ldi	r25, 0x0C	; 12
    e576:	9b de       	rcall	.-714    	; 0xe2ae <fatfs_ls>
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        strcpy(buff,argv[ind]);
        if(fatfs_status(argv[ind]) == 0)
    e578:	89 2b       	or	r24, r25
    e57a:	71 f4       	brne	.+28     	; 0xe598 <fatfs_tests+0xd2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e57c:	8f ef       	ldi	r24, 0xFF	; 255
    e57e:	9f ef       	ldi	r25, 0xFF	; 255
    e580:	32 c0       	rjmp	.+100    	; 0xe5e6 <fatfs_tests+0x120>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e582:	96 01       	movw	r18, r12
    e584:	41 e0       	ldi	r20, 0x01	; 1
    e586:	50 e0       	ldi	r21, 0x00	; 0
    e588:	6b ed       	ldi	r22, 0xDB	; 219
    e58a:	78 e0       	ldi	r23, 0x08	; 8
    e58c:	c7 01       	movw	r24, r14
    e58e:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
    e592:	89 2b       	or	r24, r25
    {
        mmc_test();
    e594:	21 f0       	breq	.+8      	; 0xe59e <fatfs_tests+0xd8>
    e596:	5e df       	rcall	.-324    	; 0xe454 <mmc_test>
        return(1);
    e598:	81 e0       	ldi	r24, 0x01	; 1
    e59a:	90 e0       	ldi	r25, 0x00	; 0
    e59c:	24 c0       	rjmp	.+72     	; 0xe5e6 <fatfs_tests+0x120>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e59e:	96 01       	movw	r18, r12
    e5a0:	41 e0       	ldi	r20, 0x01	; 1
    e5a2:	50 e0       	ldi	r21, 0x00	; 0
    e5a4:	64 ee       	ldi	r22, 0xE4	; 228
    e5a6:	78 e0       	ldi	r23, 0x08	; 8
    e5a8:	c7 01       	movw	r24, r14
    e5aa:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
    e5ae:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e5b0:	21 f0       	breq	.+8      	; 0xe5ba <fatfs_tests+0xf4>
    e5b2:	81 e0       	ldi	r24, 0x01	; 1
    e5b4:	90 e0       	ldi	r25, 0x00	; 0
    e5b6:	73 da       	rcall	.-2842   	; 0xda9e <mmc_init>
    e5b8:	ef cf       	rjmp	.-34     	; 0xe598 <fatfs_tests+0xd2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e5ba:	96 01       	movw	r18, r12
    e5bc:	42 e0       	ldi	r20, 0x02	; 2
    e5be:	50 e0       	ldi	r21, 0x00	; 0
    e5c0:	6d ee       	ldi	r22, 0xED	; 237
    e5c2:	78 e0       	ldi	r23, 0x08	; 8
    e5c4:	c7 01       	movw	r24, r14
    e5c6:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
    e5ca:	89 2b       	or	r24, r25
    e5cc:	09 f4       	brne	.+2      	; 0xe5d0 <fatfs_tests+0x10a>
    e5ce:	87 cf       	rjmp	.-242    	; 0xe4de <fatfs_tests+0x18>
    {
        strcpy(buff,argv[ind]);
    e5d0:	f8 01       	movw	r30, r16
    e5d2:	02 81       	ldd	r16, Z+2	; 0x02
    e5d4:	13 81       	ldd	r17, Z+3	; 0x03
    e5d6:	b8 01       	movw	r22, r16
    e5d8:	ce 01       	movw	r24, r28
    e5da:	04 96       	adiw	r24, 0x04	; 4
    e5dc:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
        if(fatfs_status(argv[ind]) == 0)
    e5e0:	c8 01       	movw	r24, r16
    e5e2:	44 dc       	rcall	.-1912   	; 0xde6c <fatfs_status>
    e5e4:	c9 cf       	rjmp	.-110    	; 0xe578 <fatfs_tests+0xb2>
        return(1);
    }
#endif

    return(0);
}
    e5e6:	cc 5f       	subi	r28, 0xFC	; 252
    e5e8:	de 4f       	sbci	r29, 0xFE	; 254
    e5ea:	e8 e0       	ldi	r30, 0x08	; 8
    e5ec:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000e5f0 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e5f0:	8f 92       	push	r8
    e5f2:	9f 92       	push	r9
    e5f4:	af 92       	push	r10
    e5f6:	bf 92       	push	r11
    e5f8:	ef 92       	push	r14
    e5fa:	ff 92       	push	r15
    e5fc:	0f 93       	push	r16
    e5fe:	1f 93       	push	r17
    e600:	cf 93       	push	r28
    e602:	df 93       	push	r29
    e604:	00 d0       	rcall	.+0      	; 0xe606 <fatfs_getc+0x16>
    e606:	1f 92       	push	r1
    e608:	cd b7       	in	r28, 0x3d	; 61
    e60a:	de b7       	in	r29, 0x3e	; 62
    e60c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    e610:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    e614:	00 97       	sbiw	r24, 0x00	; 0
    e616:	39 f4       	brne	.+14     	; 0xe626 <fatfs_getc+0x36>
    e618:	89 e0       	ldi	r24, 0x09	; 9
    e61a:	90 e0       	ldi	r25, 0x00	; 0
    e61c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e620:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e624:	2f c0       	rjmp	.+94     	; 0xe684 <fatfs_getc+0x94>
    e626:	fc 01       	movw	r30, r24
    e628:	e4 84       	ldd	r14, Z+12	; 0x0c
    e62a:	f5 84       	ldd	r15, Z+13	; 0x0d
    e62c:	e1 14       	cp	r14, r1
    e62e:	f1 04       	cpc	r15, r1
    e630:	99 f3       	breq	.-26     	; 0xe618 <fatfs_getc+0x28>
    e632:	8c 01       	movw	r16, r24
    e634:	9e 01       	movw	r18, r28
    e636:	2f 5f       	subi	r18, 0xFF	; 255
    e638:	3f 4f       	sbci	r19, 0xFF	; 255
    e63a:	41 e0       	ldi	r20, 0x01	; 1
    e63c:	50 e0       	ldi	r21, 0x00	; 0
    e63e:	be 01       	movw	r22, r28
    e640:	6d 5f       	subi	r22, 0xFD	; 253
    e642:	7f 4f       	sbci	r23, 0xFF	; 255
    e644:	c7 01       	movw	r24, r14
    e646:	0e 94 90 59 	call	0xb320	; 0xb320 <f_read>
    e64a:	00 97       	sbiw	r24, 0x00	; 0
    e64c:	31 f4       	brne	.+12     	; 0xe65a <fatfs_getc+0x6a>
    e64e:	29 81       	ldd	r18, Y+1	; 0x01
    e650:	3a 81       	ldd	r19, Y+2	; 0x02
    e652:	21 30       	cpi	r18, 0x01	; 1
    e654:	31 05       	cpc	r19, r1
    e656:	c9 f0       	breq	.+50     	; 0xe68a <fatfs_getc+0x9a>
    e658:	03 c0       	rjmp	.+6      	; 0xe660 <fatfs_getc+0x70>
    e65a:	84 31       	cpi	r24, 0x14	; 20
    e65c:	91 05       	cpc	r25, r1
    e65e:	40 f4       	brcc	.+16     	; 0xe670 <fatfs_getc+0x80>
    e660:	fc 01       	movw	r30, r24
    e662:	ea 55       	subi	r30, 0x5A	; 90
    e664:	f4 4f       	sbci	r31, 0xF4	; 244
    e666:	80 81       	ld	r24, Z
    e668:	08 2e       	mov	r0, r24
    e66a:	00 0c       	add	r0, r0
    e66c:	99 0b       	sbc	r25, r25
    e66e:	02 c0       	rjmp	.+4      	; 0xe674 <fatfs_getc+0x84>
    e670:	83 e2       	ldi	r24, 0x23	; 35
    e672:	90 e0       	ldi	r25, 0x00	; 0
    e674:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e678:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e67c:	f8 01       	movw	r30, r16
    e67e:	83 81       	ldd	r24, Z+3	; 0x03
    e680:	80 62       	ori	r24, 0x20	; 32
    e682:	83 83       	std	Z+3, r24	; 0x03
    e684:	8f ef       	ldi	r24, 0xFF	; 255
    e686:	9f ef       	ldi	r25, 0xFF	; 255
    e688:	28 c0       	rjmp	.+80     	; 0xe6da <fatfs_getc+0xea>
    e68a:	8b 81       	ldd	r24, Y+3	; 0x03
    e68c:	8d 30       	cpi	r24, 0x0D	; 13
    e68e:	01 f5       	brne	.+64     	; 0xe6d0 <fatfs_getc+0xe0>
    e690:	f7 01       	movw	r30, r14
    e692:	80 88       	ldd	r8, Z+16	; 0x10
    e694:	91 88       	ldd	r9, Z+17	; 0x11
    e696:	a2 88       	ldd	r10, Z+18	; 0x12
    e698:	b3 88       	ldd	r11, Z+19	; 0x13
    e69a:	9e 01       	movw	r18, r28
    e69c:	2f 5f       	subi	r18, 0xFF	; 255
    e69e:	3f 4f       	sbci	r19, 0xFF	; 255
    e6a0:	41 e0       	ldi	r20, 0x01	; 1
    e6a2:	50 e0       	ldi	r21, 0x00	; 0
    e6a4:	be 01       	movw	r22, r28
    e6a6:	6d 5f       	subi	r22, 0xFD	; 253
    e6a8:	7f 4f       	sbci	r23, 0xFF	; 255
    e6aa:	c7 01       	movw	r24, r14
    e6ac:	0e 94 90 59 	call	0xb320	; 0xb320 <f_read>
    e6b0:	89 2b       	or	r24, r25
    e6b2:	89 f4       	brne	.+34     	; 0xe6d6 <fatfs_getc+0xe6>
    e6b4:	89 81       	ldd	r24, Y+1	; 0x01
    e6b6:	9a 81       	ldd	r25, Y+2	; 0x02
    e6b8:	01 97       	sbiw	r24, 0x01	; 1
    e6ba:	69 f4       	brne	.+26     	; 0xe6d6 <fatfs_getc+0xe6>
    e6bc:	8b 81       	ldd	r24, Y+3	; 0x03
    e6be:	8a 30       	cpi	r24, 0x0A	; 10
    e6c0:	31 f0       	breq	.+12     	; 0xe6ce <fatfs_getc+0xde>
    e6c2:	b5 01       	movw	r22, r10
    e6c4:	a4 01       	movw	r20, r8
    e6c6:	c7 01       	movw	r24, r14
    e6c8:	0e 94 9c 5e 	call	0xbd38	; 0xbd38 <f_lseek>
    e6cc:	04 c0       	rjmp	.+8      	; 0xe6d6 <fatfs_getc+0xe6>
    e6ce:	8b 83       	std	Y+3, r24	; 0x03
    e6d0:	8b 81       	ldd	r24, Y+3	; 0x03
    e6d2:	90 e0       	ldi	r25, 0x00	; 0
    e6d4:	02 c0       	rjmp	.+4      	; 0xe6da <fatfs_getc+0xea>
    e6d6:	8a e0       	ldi	r24, 0x0A	; 10
    e6d8:	90 e0       	ldi	r25, 0x00	; 0
    e6da:	0f 90       	pop	r0
    e6dc:	0f 90       	pop	r0
    e6de:	0f 90       	pop	r0
    e6e0:	df 91       	pop	r29
    e6e2:	cf 91       	pop	r28
    e6e4:	1f 91       	pop	r17
    e6e6:	0f 91       	pop	r16
    e6e8:	ff 90       	pop	r15
    e6ea:	ef 90       	pop	r14
    e6ec:	bf 90       	pop	r11
    e6ee:	af 90       	pop	r10
    e6f0:	9f 90       	pop	r9
    e6f2:	8f 90       	pop	r8
    e6f4:	08 95       	ret

0000e6f6 <fatfs_putc>:
    e6f6:	a3 e0       	ldi	r26, 0x03	; 3
    e6f8:	b0 e0       	ldi	r27, 0x00	; 0
    e6fa:	e1 e8       	ldi	r30, 0x81	; 129
    e6fc:	f3 e7       	ldi	r31, 0x73	; 115
    e6fe:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    e702:	8b 83       	std	Y+3, r24	; 0x03
    e704:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    e708:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    e70c:	61 15       	cp	r22, r1
    e70e:	71 05       	cpc	r23, r1
    e710:	39 f4       	brne	.+14     	; 0xe720 <fatfs_putc+0x2a>
    e712:	89 e0       	ldi	r24, 0x09	; 9
    e714:	90 e0       	ldi	r25, 0x00	; 0
    e716:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e71a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e71e:	2d c0       	rjmp	.+90     	; 0xe77a <fatfs_putc+0x84>
    e720:	fb 01       	movw	r30, r22
    e722:	84 85       	ldd	r24, Z+12	; 0x0c
    e724:	95 85       	ldd	r25, Z+13	; 0x0d
    e726:	00 97       	sbiw	r24, 0x00	; 0
    e728:	a1 f3       	breq	.-24     	; 0xe712 <fatfs_putc+0x1c>
    e72a:	8b 01       	movw	r16, r22
    e72c:	9e 01       	movw	r18, r28
    e72e:	2f 5f       	subi	r18, 0xFF	; 255
    e730:	3f 4f       	sbci	r19, 0xFF	; 255
    e732:	41 e0       	ldi	r20, 0x01	; 1
    e734:	50 e0       	ldi	r21, 0x00	; 0
    e736:	be 01       	movw	r22, r28
    e738:	6d 5f       	subi	r22, 0xFD	; 253
    e73a:	7f 4f       	sbci	r23, 0xFF	; 255
    e73c:	0e 94 db 5a 	call	0xb5b6	; 0xb5b6 <f_write>
    e740:	00 97       	sbiw	r24, 0x00	; 0
    e742:	31 f4       	brne	.+12     	; 0xe750 <fatfs_putc+0x5a>
    e744:	29 81       	ldd	r18, Y+1	; 0x01
    e746:	3a 81       	ldd	r19, Y+2	; 0x02
    e748:	21 30       	cpi	r18, 0x01	; 1
    e74a:	31 05       	cpc	r19, r1
    e74c:	c9 f0       	breq	.+50     	; 0xe780 <fatfs_putc+0x8a>
    e74e:	03 c0       	rjmp	.+6      	; 0xe756 <fatfs_putc+0x60>
    e750:	84 31       	cpi	r24, 0x14	; 20
    e752:	91 05       	cpc	r25, r1
    e754:	40 f4       	brcc	.+16     	; 0xe766 <fatfs_putc+0x70>
    e756:	fc 01       	movw	r30, r24
    e758:	ea 55       	subi	r30, 0x5A	; 90
    e75a:	f4 4f       	sbci	r31, 0xF4	; 244
    e75c:	80 81       	ld	r24, Z
    e75e:	08 2e       	mov	r0, r24
    e760:	00 0c       	add	r0, r0
    e762:	99 0b       	sbc	r25, r25
    e764:	02 c0       	rjmp	.+4      	; 0xe76a <fatfs_putc+0x74>
    e766:	83 e2       	ldi	r24, 0x23	; 35
    e768:	90 e0       	ldi	r25, 0x00	; 0
    e76a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e76e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e772:	f8 01       	movw	r30, r16
    e774:	83 81       	ldd	r24, Z+3	; 0x03
    e776:	80 62       	ori	r24, 0x20	; 32
    e778:	83 83       	std	Z+3, r24	; 0x03
    e77a:	8f ef       	ldi	r24, 0xFF	; 255
    e77c:	9f ef       	ldi	r25, 0xFF	; 255
    e77e:	02 c0       	rjmp	.+4      	; 0xe784 <fatfs_putc+0x8e>
    e780:	8b 81       	ldd	r24, Y+3	; 0x03
    e782:	90 e0       	ldi	r25, 0x00	; 0
    e784:	23 96       	adiw	r28, 0x03	; 3
    e786:	e4 e0       	ldi	r30, 0x04	; 4
    e788:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0000e78c <fgetc>:
    e78c:	cf 93       	push	r28
    e78e:	df 93       	push	r29
    e790:	00 d0       	rcall	.+0      	; 0xe792 <fgetc+0x6>
    e792:	1f 92       	push	r1
    e794:	ec 01       	movw	r28, r24
    e796:	00 97       	sbiw	r24, 0x00	; 0
    e798:	39 f4       	brne	.+14     	; 0xe7a8 <fgetc+0x1c>
    e79a:	89 e0       	ldi	r24, 0x09	; 9
    e79c:	90 e0       	ldi	r25, 0x00	; 0
    e79e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e7a2:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e7a6:	40 c0       	rjmp	.+128    	; 0xe828 <fgetc+0x9c>
    e7a8:	2b 81       	ldd	r18, Y+3	; 0x03
    e7aa:	20 ff       	sbrs	r18, 0
    e7ac:	3d c0       	rjmp	.+122    	; 0xe828 <fgetc+0x9c>
    e7ae:	26 ff       	sbrs	r18, 6
    e7b0:	0a c0       	rjmp	.+20     	; 0xe7c6 <fgetc+0x3a>
    e7b2:	2f 7b       	andi	r18, 0xBF	; 191
    e7b4:	2b 83       	std	Y+3, r18	; 0x03
    e7b6:	8e 81       	ldd	r24, Y+6	; 0x06
    e7b8:	9f 81       	ldd	r25, Y+7	; 0x07
    e7ba:	01 96       	adiw	r24, 0x01	; 1
    e7bc:	9f 83       	std	Y+7, r25	; 0x07
    e7be:	8e 83       	std	Y+6, r24	; 0x06
    e7c0:	8a 81       	ldd	r24, Y+2	; 0x02
    e7c2:	90 e0       	ldi	r25, 0x00	; 0
    e7c4:	33 c0       	rjmp	.+102    	; 0xe82c <fgetc+0xa0>
    e7c6:	22 ff       	sbrs	r18, 2
    e7c8:	0d c0       	rjmp	.+26     	; 0xe7e4 <fgetc+0x58>
    e7ca:	e8 81       	ld	r30, Y
    e7cc:	f9 81       	ldd	r31, Y+1	; 0x01
    e7ce:	80 81       	ld	r24, Z
    e7d0:	90 e0       	ldi	r25, 0x00	; 0
    e7d2:	00 97       	sbiw	r24, 0x00	; 0
    e7d4:	19 f4       	brne	.+6      	; 0xe7dc <fgetc+0x50>
    e7d6:	20 62       	ori	r18, 0x20	; 32
    e7d8:	2b 83       	std	Y+3, r18	; 0x03
    e7da:	26 c0       	rjmp	.+76     	; 0xe828 <fgetc+0x9c>
    e7dc:	31 96       	adiw	r30, 0x01	; 1
    e7de:	f9 83       	std	Y+1, r31	; 0x01
    e7e0:	e8 83       	st	Y, r30
    e7e2:	1b c0       	rjmp	.+54     	; 0xe81a <fgetc+0x8e>
    e7e4:	ea 85       	ldd	r30, Y+10	; 0x0a
    e7e6:	fb 85       	ldd	r31, Y+11	; 0x0b
    e7e8:	30 97       	sbiw	r30, 0x00	; 0
    e7ea:	59 f4       	brne	.+22     	; 0xe802 <fgetc+0x76>
    e7ec:	8e ec       	ldi	r24, 0xCE	; 206
    e7ee:	9b e0       	ldi	r25, 0x0B	; 11
    e7f0:	a0 e0       	ldi	r26, 0x00	; 0
    e7f2:	ed b7       	in	r30, 0x3d	; 61
    e7f4:	fe b7       	in	r31, 0x3e	; 62
    e7f6:	81 83       	std	Z+1, r24	; 0x01
    e7f8:	92 83       	std	Z+2, r25	; 0x02
    e7fa:	a3 83       	std	Z+3, r26	; 0x03
    e7fc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    e800:	13 c0       	rjmp	.+38     	; 0xe828 <fgetc+0x9c>
    e802:	09 95       	icall
    e804:	97 ff       	sbrs	r25, 7
    e806:	09 c0       	rjmp	.+18     	; 0xe81a <fgetc+0x8e>
    e808:	2b 81       	ldd	r18, Y+3	; 0x03
    e80a:	02 96       	adiw	r24, 0x02	; 2
    e80c:	11 f0       	breq	.+4      	; 0xe812 <fgetc+0x86>
    e80e:	80 e2       	ldi	r24, 0x20	; 32
    e810:	01 c0       	rjmp	.+2      	; 0xe814 <fgetc+0x88>
    e812:	80 e1       	ldi	r24, 0x10	; 16
    e814:	82 2b       	or	r24, r18
    e816:	8b 83       	std	Y+3, r24	; 0x03
    e818:	07 c0       	rjmp	.+14     	; 0xe828 <fgetc+0x9c>
    e81a:	2e 81       	ldd	r18, Y+6	; 0x06
    e81c:	3f 81       	ldd	r19, Y+7	; 0x07
    e81e:	2f 5f       	subi	r18, 0xFF	; 255
    e820:	3f 4f       	sbci	r19, 0xFF	; 255
    e822:	3f 83       	std	Y+7, r19	; 0x07
    e824:	2e 83       	std	Y+6, r18	; 0x06
    e826:	02 c0       	rjmp	.+4      	; 0xe82c <fgetc+0xa0>
    e828:	8f ef       	ldi	r24, 0xFF	; 255
    e82a:	9f ef       	ldi	r25, 0xFF	; 255
    e82c:	cd b7       	in	r28, 0x3d	; 61
    e82e:	de b7       	in	r29, 0x3e	; 62
    e830:	23 96       	adiw	r28, 0x03	; 3
    e832:	e2 e0       	ldi	r30, 0x02	; 2
    e834:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000e838 <fputc>:
    e838:	cf 93       	push	r28
    e83a:	df 93       	push	r29
    e83c:	00 d0       	rcall	.+0      	; 0xe83e <fputc+0x6>
    e83e:	1f 92       	push	r1
    e840:	eb 01       	movw	r28, r22
    e842:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    e846:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    e84a:	20 91 c1 1c 	lds	r18, 0x1CC1	; 0x801cc1 <__iob+0x2>
    e84e:	30 91 c2 1c 	lds	r19, 0x1CC2	; 0x801cc2 <__iob+0x3>
    e852:	62 17       	cp	r22, r18
    e854:	73 07       	cpc	r23, r19
    e856:	49 f0       	breq	.+18     	; 0xe86a <fputc+0x32>
    e858:	20 91 c3 1c 	lds	r18, 0x1CC3	; 0x801cc3 <__iob+0x4>
    e85c:	30 91 c4 1c 	lds	r19, 0x1CC4	; 0x801cc4 <__iob+0x5>
    e860:	62 17       	cp	r22, r18
    e862:	73 07       	cpc	r23, r19
    e864:	11 f0       	breq	.+4      	; 0xe86a <fputc+0x32>
    e866:	47 df       	rcall	.-370    	; 0xe6f6 <fatfs_putc>
    e868:	33 c0       	rjmp	.+102    	; 0xe8d0 <fputc+0x98>
    e86a:	2b 81       	ldd	r18, Y+3	; 0x03
    e86c:	21 ff       	sbrs	r18, 1
    e86e:	2e c0       	rjmp	.+92     	; 0xe8cc <fputc+0x94>
    e870:	22 ff       	sbrs	r18, 2
    e872:	10 c0       	rjmp	.+32     	; 0xe894 <fputc+0x5c>
    e874:	4e 81       	ldd	r20, Y+6	; 0x06
    e876:	5f 81       	ldd	r21, Y+7	; 0x07
    e878:	2c 81       	ldd	r18, Y+4	; 0x04
    e87a:	3d 81       	ldd	r19, Y+5	; 0x05
    e87c:	42 17       	cp	r20, r18
    e87e:	53 07       	cpc	r21, r19
    e880:	f4 f4       	brge	.+60     	; 0xe8be <fputc+0x86>
    e882:	e8 81       	ld	r30, Y
    e884:	f9 81       	ldd	r31, Y+1	; 0x01
    e886:	9f 01       	movw	r18, r30
    e888:	2f 5f       	subi	r18, 0xFF	; 255
    e88a:	3f 4f       	sbci	r19, 0xFF	; 255
    e88c:	39 83       	std	Y+1, r19	; 0x01
    e88e:	28 83       	st	Y, r18
    e890:	80 83       	st	Z, r24
    e892:	15 c0       	rjmp	.+42     	; 0xe8be <fputc+0x86>
    e894:	e8 85       	ldd	r30, Y+8	; 0x08
    e896:	f9 85       	ldd	r31, Y+9	; 0x09
    e898:	30 97       	sbiw	r30, 0x00	; 0
    e89a:	59 f4       	brne	.+22     	; 0xe8b2 <fputc+0x7a>
    e89c:	86 eb       	ldi	r24, 0xB6	; 182
    e89e:	9b e0       	ldi	r25, 0x0B	; 11
    e8a0:	a0 e0       	ldi	r26, 0x00	; 0
    e8a2:	ed b7       	in	r30, 0x3d	; 61
    e8a4:	fe b7       	in	r31, 0x3e	; 62
    e8a6:	81 83       	std	Z+1, r24	; 0x01
    e8a8:	92 83       	std	Z+2, r25	; 0x02
    e8aa:	a3 83       	std	Z+3, r26	; 0x03
    e8ac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    e8b0:	0d c0       	rjmp	.+26     	; 0xe8cc <fputc+0x94>
    e8b2:	be 01       	movw	r22, r28
    e8b4:	09 95       	icall
    e8b6:	8f 3f       	cpi	r24, 0xFF	; 255
    e8b8:	ff ef       	ldi	r31, 0xFF	; 255
    e8ba:	9f 07       	cpc	r25, r31
    e8bc:	39 f0       	breq	.+14     	; 0xe8cc <fputc+0x94>
    e8be:	2e 81       	ldd	r18, Y+6	; 0x06
    e8c0:	3f 81       	ldd	r19, Y+7	; 0x07
    e8c2:	2f 5f       	subi	r18, 0xFF	; 255
    e8c4:	3f 4f       	sbci	r19, 0xFF	; 255
    e8c6:	3f 83       	std	Y+7, r19	; 0x07
    e8c8:	2e 83       	std	Y+6, r18	; 0x06
    e8ca:	02 c0       	rjmp	.+4      	; 0xe8d0 <fputc+0x98>
    e8cc:	8f ef       	ldi	r24, 0xFF	; 255
    e8ce:	9f ef       	ldi	r25, 0xFF	; 255
    e8d0:	cd b7       	in	r28, 0x3d	; 61
    e8d2:	de b7       	in	r29, 0x3e	; 62
    e8d4:	23 96       	adiw	r28, 0x03	; 3
    e8d6:	e2 e0       	ldi	r30, 0x02	; 2
    e8d8:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000e8dc <_fprintf_putc>:
    e8dc:	fc 01       	movw	r30, r24
    e8de:	86 2f       	mov	r24, r22
    e8e0:	26 81       	ldd	r18, Z+6	; 0x06
    e8e2:	37 81       	ldd	r19, Z+7	; 0x07
    e8e4:	2f 5f       	subi	r18, 0xFF	; 255
    e8e6:	3f 4f       	sbci	r19, 0xFF	; 255
    e8e8:	37 83       	std	Z+7, r19	; 0x07
    e8ea:	26 83       	std	Z+6, r18	; 0x06
    e8ec:	62 81       	ldd	r22, Z+2	; 0x02
    e8ee:	73 81       	ldd	r23, Z+3	; 0x03
    e8f0:	90 e0       	ldi	r25, 0x00	; 0
    e8f2:	a2 cf       	rjmp	.-188    	; 0xe838 <fputc>
    e8f4:	08 95       	ret

0000e8f6 <getchar>:
    e8f6:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    e8fa:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    e8fe:	46 cf       	rjmp	.-372    	; 0xe78c <fgetc>
    e900:	08 95       	ret

0000e902 <putchar>:
    e902:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    e906:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    e90a:	96 cf       	rjmp	.-212    	; 0xe838 <fputc>
    e90c:	08 95       	ret

0000e90e <fgets>:
    e90e:	a0 e0       	ldi	r26, 0x00	; 0
    e910:	b0 e0       	ldi	r27, 0x00	; 0
    e912:	ed e8       	ldi	r30, 0x8D	; 141
    e914:	f4 e7       	ldi	r31, 0x74	; 116
    e916:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    e91a:	7c 01       	movw	r14, r24
    e91c:	6a 01       	movw	r12, r20
    e91e:	8b 01       	movw	r16, r22
    e920:	c0 e0       	ldi	r28, 0x00	; 0
    e922:	d0 e0       	ldi	r29, 0x00	; 0
    e924:	01 15       	cp	r16, r1
    e926:	11 05       	cpc	r17, r1
    e928:	41 f0       	breq	.+16     	; 0xe93a <fgets+0x2c>
    e92a:	c6 01       	movw	r24, r12
    e92c:	2f df       	rcall	.-418    	; 0xe78c <fgetc>
    e92e:	8f 3f       	cpi	r24, 0xFF	; 255
    e930:	2f ef       	ldi	r18, 0xFF	; 255
    e932:	92 07       	cpc	r25, r18
    e934:	39 f4       	brne	.+14     	; 0xe944 <fgets+0x36>
    e936:	20 97       	sbiw	r28, 0x00	; 0
    e938:	b9 f0       	breq	.+46     	; 0xe968 <fgets+0x5a>
    e93a:	ce 0d       	add	r28, r14
    e93c:	df 1d       	adc	r29, r15
    e93e:	18 82       	st	Y, r1
    e940:	c7 01       	movw	r24, r14
    e942:	14 c0       	rjmp	.+40     	; 0xe96c <fgets+0x5e>
    e944:	8a 30       	cpi	r24, 0x0A	; 10
    e946:	91 05       	cpc	r25, r1
    e948:	c1 f3       	breq	.-16     	; 0xe93a <fgets+0x2c>
    e94a:	88 30       	cpi	r24, 0x08	; 8
    e94c:	91 05       	cpc	r25, r1
    e94e:	21 f4       	brne	.+8      	; 0xe958 <fgets+0x4a>
    e950:	20 97       	sbiw	r28, 0x00	; 0
    e952:	39 f0       	breq	.+14     	; 0xe962 <fgets+0x54>
    e954:	21 97       	sbiw	r28, 0x01	; 1
    e956:	05 c0       	rjmp	.+10     	; 0xe962 <fgets+0x54>
    e958:	f7 01       	movw	r30, r14
    e95a:	ec 0f       	add	r30, r28
    e95c:	fd 1f       	adc	r31, r29
    e95e:	80 83       	st	Z, r24
    e960:	21 96       	adiw	r28, 0x01	; 1
    e962:	01 50       	subi	r16, 0x01	; 1
    e964:	11 09       	sbc	r17, r1
    e966:	de cf       	rjmp	.-68     	; 0xe924 <fgets+0x16>
    e968:	80 e0       	ldi	r24, 0x00	; 0
    e96a:	90 e0       	ldi	r25, 0x00	; 0
    e96c:	cd b7       	in	r28, 0x3d	; 61
    e96e:	de b7       	in	r29, 0x3e	; 62
    e970:	e8 e0       	ldi	r30, 0x08	; 8
    e972:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000e976 <fputs>:
    e976:	0f 93       	push	r16
    e978:	1f 93       	push	r17
    e97a:	cf 93       	push	r28
    e97c:	df 93       	push	r29
    e97e:	8b 01       	movw	r16, r22
    e980:	ec 01       	movw	r28, r24
    e982:	89 91       	ld	r24, Y+
    e984:	88 23       	and	r24, r24
    e986:	41 f0       	breq	.+16     	; 0xe998 <fputs+0x22>
    e988:	b8 01       	movw	r22, r16
    e98a:	90 e0       	ldi	r25, 0x00	; 0
    e98c:	55 df       	rcall	.-342    	; 0xe838 <fputc>
    e98e:	8f 3f       	cpi	r24, 0xFF	; 255
    e990:	2f ef       	ldi	r18, 0xFF	; 255
    e992:	92 07       	cpc	r25, r18
    e994:	b1 f7       	brne	.-20     	; 0xe982 <fputs+0xc>
    e996:	02 c0       	rjmp	.+4      	; 0xe99c <fputs+0x26>
    e998:	80 e0       	ldi	r24, 0x00	; 0
    e99a:	90 e0       	ldi	r25, 0x00	; 0
    e99c:	df 91       	pop	r29
    e99e:	cf 91       	pop	r28
    e9a0:	1f 91       	pop	r17
    e9a2:	0f 91       	pop	r16
    e9a4:	08 95       	ret

0000e9a6 <puts>:
    e9a6:	cf 93       	push	r28
    e9a8:	df 93       	push	r29
    e9aa:	ec 01       	movw	r28, r24
    e9ac:	89 91       	ld	r24, Y+
    e9ae:	60 91 c1 1c 	lds	r22, 0x1CC1	; 0x801cc1 <__iob+0x2>
    e9b2:	70 91 c2 1c 	lds	r23, 0x1CC2	; 0x801cc2 <__iob+0x3>
    e9b6:	88 23       	and	r24, r24
    e9b8:	39 f0       	breq	.+14     	; 0xe9c8 <puts+0x22>
    e9ba:	90 e0       	ldi	r25, 0x00	; 0
    e9bc:	3d df       	rcall	.-390    	; 0xe838 <fputc>
    e9be:	8f 3f       	cpi	r24, 0xFF	; 255
    e9c0:	2f ef       	ldi	r18, 0xFF	; 255
    e9c2:	92 07       	cpc	r25, r18
    e9c4:	99 f7       	brne	.-26     	; 0xe9ac <puts+0x6>
    e9c6:	03 c0       	rjmp	.+6      	; 0xe9ce <puts+0x28>
    e9c8:	8a e0       	ldi	r24, 0x0A	; 10
    e9ca:	90 e0       	ldi	r25, 0x00	; 0
    e9cc:	35 df       	rcall	.-406    	; 0xe838 <fputc>
    e9ce:	df 91       	pop	r29
    e9d0:	cf 91       	pop	r28
    e9d2:	08 95       	ret

0000e9d4 <fileno>:
    e9d4:	00 97       	sbiw	r24, 0x00	; 0
    e9d6:	39 f4       	brne	.+14     	; 0xe9e6 <fileno+0x12>
    e9d8:	89 e0       	ldi	r24, 0x09	; 9
    e9da:	90 e0       	ldi	r25, 0x00	; 0
    e9dc:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    e9e0:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    e9e4:	0e c0       	rjmp	.+28     	; 0xea02 <fileno+0x2e>
    e9e6:	ef eb       	ldi	r30, 0xBF	; 191
    e9e8:	fc e1       	ldi	r31, 0x1C	; 28
    e9ea:	20 e0       	ldi	r18, 0x00	; 0
    e9ec:	30 e0       	ldi	r19, 0x00	; 0
    e9ee:	41 91       	ld	r20, Z+
    e9f0:	51 91       	ld	r21, Z+
    e9f2:	84 17       	cp	r24, r20
    e9f4:	95 07       	cpc	r25, r21
    e9f6:	41 f0       	breq	.+16     	; 0xea08 <fileno+0x34>
    e9f8:	2f 5f       	subi	r18, 0xFF	; 255
    e9fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e9fc:	20 31       	cpi	r18, 0x10	; 16
    e9fe:	31 05       	cpc	r19, r1
    ea00:	b1 f7       	brne	.-20     	; 0xe9ee <fileno+0x1a>
    ea02:	8f ef       	ldi	r24, 0xFF	; 255
    ea04:	9f ef       	ldi	r25, 0xFF	; 255
    ea06:	08 95       	ret
    ea08:	c9 01       	movw	r24, r18
    ea0a:	08 95       	ret

0000ea0c <fileno_to_stream>:
    ea0c:	80 31       	cpi	r24, 0x10	; 16
    ea0e:	91 05       	cpc	r25, r1
    ea10:	48 f4       	brcc	.+18     	; 0xea24 <fileno_to_stream+0x18>
    ea12:	88 0f       	add	r24, r24
    ea14:	99 1f       	adc	r25, r25
    ea16:	fc 01       	movw	r30, r24
    ea18:	e1 54       	subi	r30, 0x41	; 65
    ea1a:	f3 4e       	sbci	r31, 0xE3	; 227
    ea1c:	80 81       	ld	r24, Z
    ea1e:	91 81       	ldd	r25, Z+1	; 0x01
    ea20:	00 97       	sbiw	r24, 0x00	; 0
    ea22:	41 f4       	brne	.+16     	; 0xea34 <fileno_to_stream+0x28>
    ea24:	89 e0       	ldi	r24, 0x09	; 9
    ea26:	90 e0       	ldi	r25, 0x00	; 0
    ea28:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ea2c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ea30:	80 e0       	ldi	r24, 0x00	; 0
    ea32:	90 e0       	ldi	r25, 0x00	; 0
    ea34:	08 95       	ret

0000ea36 <mctime>:
    ea36:	a4 e0       	ldi	r26, 0x04	; 4
    ea38:	b0 e0       	ldi	r27, 0x00	; 0
    ea3a:	e1 e2       	ldi	r30, 0x21	; 33
    ea3c:	f5 e7       	ldi	r31, 0x75	; 117
    ea3e:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    ea42:	69 83       	std	Y+1, r22	; 0x01
    ea44:	7a 83       	std	Y+2, r23	; 0x02
    ea46:	8b 83       	std	Y+3, r24	; 0x03
    ea48:	9c 83       	std	Y+4, r25	; 0x04
    ea4a:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ea4e:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ea52:	ce 01       	movw	r24, r28
    ea54:	01 96       	adiw	r24, 0x01	; 1
    ea56:	0e 94 4c 3b 	call	0x7698	; 0x7698 <ctime_gm>
    ea5a:	fc 01       	movw	r30, r24
    ea5c:	01 90       	ld	r0, Z+
    ea5e:	00 20       	and	r0, r0
    ea60:	e9 f7       	brne	.-6      	; 0xea5c <mctime+0x26>
    ea62:	31 97       	sbiw	r30, 0x01	; 1
    ea64:	e8 1b       	sub	r30, r24
    ea66:	f9 0b       	sbc	r31, r25
    ea68:	39 f0       	breq	.+14     	; 0xea78 <mctime+0x42>
    ea6a:	31 97       	sbiw	r30, 0x01	; 1
    ea6c:	e8 0f       	add	r30, r24
    ea6e:	f9 1f       	adc	r31, r25
    ea70:	20 81       	ld	r18, Z
    ea72:	2a 30       	cpi	r18, 0x0A	; 10
    ea74:	09 f4       	brne	.+2      	; 0xea78 <mctime+0x42>
    ea76:	10 82       	st	Z, r1
    ea78:	24 96       	adiw	r28, 0x04	; 4
    ea7a:	e2 e0       	ldi	r30, 0x02	; 2
    ea7c:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000ea80 <basename>:
    ea80:	00 97       	sbiw	r24, 0x00	; 0
    ea82:	49 f0       	breq	.+18     	; 0xea96 <basename+0x16>
    ea84:	fc 01       	movw	r30, r24
    ea86:	21 91       	ld	r18, Z+
    ea88:	22 23       	and	r18, r18
    ea8a:	21 f0       	breq	.+8      	; 0xea94 <basename+0x14>
    ea8c:	2f 32       	cpi	r18, 0x2F	; 47
    ea8e:	d9 f7       	brne	.-10     	; 0xea86 <basename+0x6>
    ea90:	cf 01       	movw	r24, r30
    ea92:	f9 cf       	rjmp	.-14     	; 0xea86 <basename+0x6>
    ea94:	08 95       	ret
    ea96:	80 e2       	ldi	r24, 0x20	; 32
    ea98:	9c e0       	ldi	r25, 0x0C	; 12
    ea9a:	08 95       	ret

0000ea9c <chdir>:
    ea9c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eaa0:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eaa4:	0e 94 0b 5d 	call	0xba16	; 0xba16 <f_chdir>
    eaa8:	00 97       	sbiw	r24, 0x00	; 0
    eaaa:	a1 f0       	breq	.+40     	; 0xead4 <chdir+0x38>
    eaac:	84 31       	cpi	r24, 0x14	; 20
    eaae:	91 05       	cpc	r25, r1
    eab0:	40 f4       	brcc	.+16     	; 0xeac2 <chdir+0x26>
    eab2:	fc 01       	movw	r30, r24
    eab4:	ea 55       	subi	r30, 0x5A	; 90
    eab6:	f4 4f       	sbci	r31, 0xF4	; 244
    eab8:	80 81       	ld	r24, Z
    eaba:	08 2e       	mov	r0, r24
    eabc:	00 0c       	add	r0, r0
    eabe:	99 0b       	sbc	r25, r25
    eac0:	02 c0       	rjmp	.+4      	; 0xeac6 <chdir+0x2a>
    eac2:	83 e2       	ldi	r24, 0x23	; 35
    eac4:	90 e0       	ldi	r25, 0x00	; 0
    eac6:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eaca:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eace:	8f ef       	ldi	r24, 0xFF	; 255
    ead0:	9f ef       	ldi	r25, 0xFF	; 255
    ead2:	08 95       	ret
    ead4:	80 e0       	ldi	r24, 0x00	; 0
    ead6:	90 e0       	ldi	r25, 0x00	; 0
    ead8:	08 95       	ret

0000eada <chmod>:
    eada:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eade:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eae2:	42 79       	andi	r20, 0x92	; 146
    eae4:	55 27       	eor	r21, r21
    eae6:	66 27       	eor	r22, r22
    eae8:	77 27       	eor	r23, r23
    eaea:	45 2b       	or	r20, r21
    eaec:	46 2b       	or	r20, r22
    eaee:	47 2b       	or	r20, r23
    eaf0:	19 f0       	breq	.+6      	; 0xeaf8 <chmod+0x1e>
    eaf2:	80 e0       	ldi	r24, 0x00	; 0
    eaf4:	90 e0       	ldi	r25, 0x00	; 0
    eaf6:	08 95       	ret
    eaf8:	41 e0       	ldi	r20, 0x01	; 1
    eafa:	61 e0       	ldi	r22, 0x01	; 1
    eafc:	0e 94 eb 65 	call	0xcbd6	; 0xcbd6 <f_chmod>
    eb00:	00 97       	sbiw	r24, 0x00	; 0
    eb02:	b9 f3       	breq	.-18     	; 0xeaf2 <chmod+0x18>
    eb04:	84 31       	cpi	r24, 0x14	; 20
    eb06:	91 05       	cpc	r25, r1
    eb08:	40 f4       	brcc	.+16     	; 0xeb1a <chmod+0x40>
    eb0a:	fc 01       	movw	r30, r24
    eb0c:	ea 55       	subi	r30, 0x5A	; 90
    eb0e:	f4 4f       	sbci	r31, 0xF4	; 244
    eb10:	80 81       	ld	r24, Z
    eb12:	08 2e       	mov	r0, r24
    eb14:	00 0c       	add	r0, r0
    eb16:	99 0b       	sbc	r25, r25
    eb18:	02 c0       	rjmp	.+4      	; 0xeb1e <chmod+0x44>
    eb1a:	83 e2       	ldi	r24, 0x23	; 35
    eb1c:	90 e0       	ldi	r25, 0x00	; 0
    eb1e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb22:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb26:	8f ef       	ldi	r24, 0xFF	; 255
    eb28:	9f ef       	ldi	r25, 0xFF	; 255
    eb2a:	08 95       	ret

0000eb2c <getcwd>:
    eb2c:	cf 93       	push	r28
    eb2e:	df 93       	push	r29
    eb30:	d8 2f       	mov	r29, r24
    eb32:	c9 2f       	mov	r28, r25
    eb34:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eb38:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eb3c:	0e 94 66 5d 	call	0xbacc	; 0xbacc <f_getcwd>
    eb40:	00 97       	sbiw	r24, 0x00	; 0
    eb42:	a1 f0       	breq	.+40     	; 0xeb6c <getcwd+0x40>
    eb44:	84 31       	cpi	r24, 0x14	; 20
    eb46:	91 05       	cpc	r25, r1
    eb48:	40 f4       	brcc	.+16     	; 0xeb5a <getcwd+0x2e>
    eb4a:	fc 01       	movw	r30, r24
    eb4c:	ea 55       	subi	r30, 0x5A	; 90
    eb4e:	f4 4f       	sbci	r31, 0xF4	; 244
    eb50:	80 81       	ld	r24, Z
    eb52:	08 2e       	mov	r0, r24
    eb54:	00 0c       	add	r0, r0
    eb56:	99 0b       	sbc	r25, r25
    eb58:	02 c0       	rjmp	.+4      	; 0xeb5e <getcwd+0x32>
    eb5a:	83 e2       	ldi	r24, 0x23	; 35
    eb5c:	90 e0       	ldi	r25, 0x00	; 0
    eb5e:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    eb62:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    eb66:	80 e0       	ldi	r24, 0x00	; 0
    eb68:	90 e0       	ldi	r25, 0x00	; 0
    eb6a:	02 c0       	rjmp	.+4      	; 0xeb70 <getcwd+0x44>
    eb6c:	8d 2f       	mov	r24, r29
    eb6e:	9c 2f       	mov	r25, r28
    eb70:	df 91       	pop	r29
    eb72:	cf 91       	pop	r28
    eb74:	08 95       	ret

0000eb76 <mkdir>:
    eb76:	cf 93       	push	r28
    eb78:	df 93       	push	r29
    eb7a:	ec 01       	movw	r28, r24
    eb7c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eb80:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    eb84:	41 15       	cp	r20, r1
    eb86:	51 05       	cpc	r21, r1
    eb88:	61 05       	cpc	r22, r1
    eb8a:	71 05       	cpc	r23, r1
    eb8c:	41 f4       	brne	.+16     	; 0xeb9e <mkdir+0x28>
    eb8e:	ce 01       	movw	r24, r28
    eb90:	0e 94 e6 63 	call	0xc7cc	; 0xc7cc <f_mkdir>
    eb94:	00 97       	sbiw	r24, 0x00	; 0
    eb96:	39 f4       	brne	.+14     	; 0xeba6 <mkdir+0x30>
    eb98:	80 e0       	ldi	r24, 0x00	; 0
    eb9a:	90 e0       	ldi	r25, 0x00	; 0
    eb9c:	17 c0       	rjmp	.+46     	; 0xebcc <mkdir+0x56>
    eb9e:	9d df       	rcall	.-198    	; 0xeada <chmod>
    eba0:	89 2b       	or	r24, r25
    eba2:	a9 f3       	breq	.-22     	; 0xeb8e <mkdir+0x18>
    eba4:	11 c0       	rjmp	.+34     	; 0xebc8 <mkdir+0x52>
    eba6:	84 31       	cpi	r24, 0x14	; 20
    eba8:	91 05       	cpc	r25, r1
    ebaa:	40 f4       	brcc	.+16     	; 0xebbc <mkdir+0x46>
    ebac:	fc 01       	movw	r30, r24
    ebae:	ea 55       	subi	r30, 0x5A	; 90
    ebb0:	f4 4f       	sbci	r31, 0xF4	; 244
    ebb2:	80 81       	ld	r24, Z
    ebb4:	08 2e       	mov	r0, r24
    ebb6:	00 0c       	add	r0, r0
    ebb8:	99 0b       	sbc	r25, r25
    ebba:	02 c0       	rjmp	.+4      	; 0xebc0 <mkdir+0x4a>
    ebbc:	83 e2       	ldi	r24, 0x23	; 35
    ebbe:	90 e0       	ldi	r25, 0x00	; 0
    ebc0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ebc4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ebc8:	8f ef       	ldi	r24, 0xFF	; 255
    ebca:	9f ef       	ldi	r25, 0xFF	; 255
    ebcc:	df 91       	pop	r29
    ebce:	cf 91       	pop	r28
    ebd0:	08 95       	ret

0000ebd2 <rename>:
    ebd2:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ebd6:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ebda:	0e 94 d6 64 	call	0xc9ac	; 0xc9ac <f_rename>
    ebde:	00 97       	sbiw	r24, 0x00	; 0
    ebe0:	a1 f0       	breq	.+40     	; 0xec0a <rename+0x38>
    ebe2:	84 31       	cpi	r24, 0x14	; 20
    ebe4:	91 05       	cpc	r25, r1
    ebe6:	40 f4       	brcc	.+16     	; 0xebf8 <rename+0x26>
    ebe8:	fc 01       	movw	r30, r24
    ebea:	ea 55       	subi	r30, 0x5A	; 90
    ebec:	f4 4f       	sbci	r31, 0xF4	; 244
    ebee:	80 81       	ld	r24, Z
    ebf0:	08 2e       	mov	r0, r24
    ebf2:	00 0c       	add	r0, r0
    ebf4:	99 0b       	sbc	r25, r25
    ebf6:	02 c0       	rjmp	.+4      	; 0xebfc <rename+0x2a>
    ebf8:	83 e2       	ldi	r24, 0x23	; 35
    ebfa:	90 e0       	ldi	r25, 0x00	; 0
    ebfc:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ec00:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ec04:	8f ef       	ldi	r24, 0xFF	; 255
    ec06:	9f ef       	ldi	r25, 0xFF	; 255
    ec08:	08 95       	ret
    ec0a:	80 e0       	ldi	r24, 0x00	; 0
    ec0c:	90 e0       	ldi	r25, 0x00	; 0
    ec0e:	08 95       	ret

0000ec10 <unlink>:
    ec10:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    ec14:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ec18:	0e 94 3f 63 	call	0xc67e	; 0xc67e <f_unlink>
    ec1c:	00 97       	sbiw	r24, 0x00	; 0
    ec1e:	a1 f0       	breq	.+40     	; 0xec48 <unlink+0x38>
    ec20:	84 31       	cpi	r24, 0x14	; 20
    ec22:	91 05       	cpc	r25, r1
    ec24:	40 f4       	brcc	.+16     	; 0xec36 <unlink+0x26>
    ec26:	fc 01       	movw	r30, r24
    ec28:	ea 55       	subi	r30, 0x5A	; 90
    ec2a:	f4 4f       	sbci	r31, 0xF4	; 244
    ec2c:	80 81       	ld	r24, Z
    ec2e:	08 2e       	mov	r0, r24
    ec30:	00 0c       	add	r0, r0
    ec32:	99 0b       	sbc	r25, r25
    ec34:	02 c0       	rjmp	.+4      	; 0xec3a <unlink+0x2a>
    ec36:	83 e2       	ldi	r24, 0x23	; 35
    ec38:	90 e0       	ldi	r25, 0x00	; 0
    ec3a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ec3e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ec42:	8f ef       	ldi	r24, 0xFF	; 255
    ec44:	9f ef       	ldi	r25, 0xFF	; 255
    ec46:	08 95       	ret
    ec48:	80 e0       	ldi	r24, 0x00	; 0
    ec4a:	90 e0       	ldi	r25, 0x00	; 0
    ec4c:	08 95       	ret

0000ec4e <rmdir>:
    ec4e:	e0 cf       	rjmp	.-64     	; 0xec10 <unlink>
    ec50:	08 95       	ret

0000ec52 <closedir>:
    ec52:	0e 94 c8 61 	call	0xc390	; 0xc390 <f_closedir>
    ec56:	00 97       	sbiw	r24, 0x00	; 0
    ec58:	a1 f0       	breq	.+40     	; 0xec82 <closedir+0x30>
    ec5a:	84 31       	cpi	r24, 0x14	; 20
    ec5c:	91 05       	cpc	r25, r1
    ec5e:	40 f4       	brcc	.+16     	; 0xec70 <closedir+0x1e>
    ec60:	fc 01       	movw	r30, r24
    ec62:	ea 55       	subi	r30, 0x5A	; 90
    ec64:	f4 4f       	sbci	r31, 0xF4	; 244
    ec66:	80 81       	ld	r24, Z
    ec68:	08 2e       	mov	r0, r24
    ec6a:	00 0c       	add	r0, r0
    ec6c:	99 0b       	sbc	r25, r25
    ec6e:	02 c0       	rjmp	.+4      	; 0xec74 <closedir+0x22>
    ec70:	83 e2       	ldi	r24, 0x23	; 35
    ec72:	90 e0       	ldi	r25, 0x00	; 0
    ec74:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ec78:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ec7c:	8f ef       	ldi	r24, 0xFF	; 255
    ec7e:	9f ef       	ldi	r25, 0xFF	; 255
    ec80:	08 95       	ret
    ec82:	80 e0       	ldi	r24, 0x00	; 0
    ec84:	90 e0       	ldi	r25, 0x00	; 0
    ec86:	08 95       	ret

0000ec88 <opendir>:
    ec88:	bc 01       	movw	r22, r24
    ec8a:	80 e3       	ldi	r24, 0x30	; 48
    ec8c:	99 e1       	ldi	r25, 0x19	; 25
    ec8e:	0e 94 57 61 	call	0xc2ae	; 0xc2ae <f_opendir>
    ec92:	00 97       	sbiw	r24, 0x00	; 0
    ec94:	a1 f0       	breq	.+40     	; 0xecbe <opendir+0x36>
    ec96:	84 31       	cpi	r24, 0x14	; 20
    ec98:	91 05       	cpc	r25, r1
    ec9a:	40 f4       	brcc	.+16     	; 0xecac <opendir+0x24>
    ec9c:	fc 01       	movw	r30, r24
    ec9e:	ea 55       	subi	r30, 0x5A	; 90
    eca0:	f4 4f       	sbci	r31, 0xF4	; 244
    eca2:	80 81       	ld	r24, Z
    eca4:	08 2e       	mov	r0, r24
    eca6:	00 0c       	add	r0, r0
    eca8:	99 0b       	sbc	r25, r25
    ecaa:	02 c0       	rjmp	.+4      	; 0xecb0 <opendir+0x28>
    ecac:	83 e2       	ldi	r24, 0x23	; 35
    ecae:	90 e0       	ldi	r25, 0x00	; 0
    ecb0:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ecb4:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ecb8:	80 e0       	ldi	r24, 0x00	; 0
    ecba:	90 e0       	ldi	r25, 0x00	; 0
    ecbc:	08 95       	ret
    ecbe:	80 e3       	ldi	r24, 0x30	; 48
    ecc0:	99 e1       	ldi	r25, 0x19	; 25
    ecc2:	08 95       	ret

0000ecc4 <readdir>:
    ecc4:	a6 e1       	ldi	r26, 0x16	; 22
    ecc6:	b1 e0       	ldi	r27, 0x01	; 1
    ecc8:	e8 e6       	ldi	r30, 0x68	; 104
    ecca:	f6 e7       	ldi	r31, 0x76	; 118
    eccc:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    ecd0:	10 92 30 18 	sts	0x1830, r1	; 0x801830 <_de>
    ecd4:	be 01       	movw	r22, r28
    ecd6:	6f 5f       	subi	r22, 0xFF	; 255
    ecd8:	7f 4f       	sbci	r23, 0xFF	; 255
    ecda:	0e 94 dd 61 	call	0xc3ba	; 0xc3ba <f_readdir>
    ecde:	00 97       	sbiw	r24, 0x00	; 0
    ece0:	a1 f0       	breq	.+40     	; 0xed0a <readdir+0x46>
    ece2:	84 31       	cpi	r24, 0x14	; 20
    ece4:	91 05       	cpc	r25, r1
    ece6:	40 f4       	brcc	.+16     	; 0xecf8 <readdir+0x34>
    ece8:	fc 01       	movw	r30, r24
    ecea:	ea 55       	subi	r30, 0x5A	; 90
    ecec:	f4 4f       	sbci	r31, 0xF4	; 244
    ecee:	80 81       	ld	r24, Z
    ecf0:	08 2e       	mov	r0, r24
    ecf2:	00 0c       	add	r0, r0
    ecf4:	99 0b       	sbc	r25, r25
    ecf6:	02 c0       	rjmp	.+4      	; 0xecfc <readdir+0x38>
    ecf8:	83 e2       	ldi	r24, 0x23	; 35
    ecfa:	90 e0       	ldi	r25, 0x00	; 0
    ecfc:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ed00:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ed04:	80 e0       	ldi	r24, 0x00	; 0
    ed06:	90 e0       	ldi	r25, 0x00	; 0
    ed08:	16 c0       	rjmp	.+44     	; 0xed36 <readdir+0x72>
    ed0a:	be 01       	movw	r22, r28
    ed0c:	69 5e       	subi	r22, 0xE9	; 233
    ed0e:	7f 4f       	sbci	r23, 0xFF	; 255
    ed10:	fb 01       	movw	r30, r22
    ed12:	01 90       	ld	r0, Z+
    ed14:	00 20       	and	r0, r0
    ed16:	e9 f7       	brne	.-6      	; 0xed12 <readdir+0x4e>
    ed18:	31 97       	sbiw	r30, 0x01	; 1
    ed1a:	8f 01       	movw	r16, r30
    ed1c:	06 1b       	sub	r16, r22
    ed1e:	17 0b       	sbc	r17, r23
    ed20:	a8 01       	movw	r20, r16
    ed22:	80 e3       	ldi	r24, 0x30	; 48
    ed24:	98 e1       	ldi	r25, 0x18	; 24
    ed26:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strncpy>
    ed2a:	f8 01       	movw	r30, r16
    ed2c:	e0 5d       	subi	r30, 0xD0	; 208
    ed2e:	f7 4e       	sbci	r31, 0xE7	; 231
    ed30:	10 82       	st	Z, r1
    ed32:	80 e3       	ldi	r24, 0x30	; 48
    ed34:	98 e1       	ldi	r25, 0x18	; 24
    ed36:	ca 5e       	subi	r28, 0xEA	; 234
    ed38:	de 4f       	sbci	r29, 0xFE	; 254
    ed3a:	e4 e0       	ldi	r30, 0x04	; 4
    ed3c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0000ed40 <perror>:
    ed40:	ad b7       	in	r26, 0x3d	; 61
    ed42:	be b7       	in	r27, 0x3e	; 62
    ed44:	17 97       	sbiw	r26, 0x07	; 7
    ed46:	0f b6       	in	r0, 0x3f	; 63
    ed48:	f8 94       	cli
    ed4a:	be bf       	out	0x3e, r27	; 62
    ed4c:	0f be       	out	0x3f, r0	; 63
    ed4e:	ad bf       	out	0x3d, r26	; 61
    ed50:	20 91 bd 1c 	lds	r18, 0x1CBD	; 0x801cbd <errno>
    ed54:	30 91 be 1c 	lds	r19, 0x1CBE	; 0x801cbe <errno+0x1>
    ed58:	23 32       	cpi	r18, 0x23	; 35
    ed5a:	31 05       	cpc	r19, r1
    ed5c:	40 f4       	brcc	.+16     	; 0xed6e <perror+0x2e>
    ed5e:	22 0f       	add	r18, r18
    ed60:	33 1f       	adc	r19, r19
    ed62:	f9 01       	movw	r30, r18
    ed64:	ea 5c       	subi	r30, 0xCA	; 202
    ed66:	fe 4f       	sbci	r31, 0xFE	; 254
    ed68:	20 81       	ld	r18, Z
    ed6a:	31 81       	ldd	r19, Z+1	; 0x01
    ed6c:	04 c0       	rjmp	.+8      	; 0xed76 <perror+0x36>
    ed6e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    ed72:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    ed76:	00 97       	sbiw	r24, 0x00	; 0
    ed78:	99 f0       	breq	.+38     	; 0xeda0 <perror+0x60>
    ed7a:	fc 01       	movw	r30, r24
    ed7c:	40 81       	ld	r20, Z
    ed7e:	44 23       	and	r20, r20
    ed80:	79 f0       	breq	.+30     	; 0xeda0 <perror+0x60>
    ed82:	ed b7       	in	r30, 0x3d	; 61
    ed84:	fe b7       	in	r31, 0x3e	; 62
    ed86:	37 83       	std	Z+7, r19	; 0x07
    ed88:	26 83       	std	Z+6, r18	; 0x06
    ed8a:	95 83       	std	Z+5, r25	; 0x05
    ed8c:	84 83       	std	Z+4, r24	; 0x04
    ed8e:	82 ea       	ldi	r24, 0xA2	; 162
    ed90:	9b e0       	ldi	r25, 0x0B	; 11
    ed92:	a0 e0       	ldi	r26, 0x00	; 0
    ed94:	81 83       	std	Z+1, r24	; 0x01
    ed96:	92 83       	std	Z+2, r25	; 0x02
    ed98:	a3 83       	std	Z+3, r26	; 0x03
    ed9a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    ed9e:	0c c0       	rjmp	.+24     	; 0xedb8 <perror+0x78>
    eda0:	ed b7       	in	r30, 0x3d	; 61
    eda2:	fe b7       	in	r31, 0x3e	; 62
    eda4:	35 83       	std	Z+5, r19	; 0x05
    eda6:	24 83       	std	Z+4, r18	; 0x04
    eda8:	8e e9       	ldi	r24, 0x9E	; 158
    edaa:	9b e0       	ldi	r25, 0x0B	; 11
    edac:	a0 e0       	ldi	r26, 0x00	; 0
    edae:	81 83       	std	Z+1, r24	; 0x01
    edb0:	92 83       	std	Z+2, r25	; 0x02
    edb2:	a3 83       	std	Z+3, r26	; 0x03
    edb4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    edb8:	ad b7       	in	r26, 0x3d	; 61
    edba:	be b7       	in	r27, 0x3e	; 62
    edbc:	17 96       	adiw	r26, 0x07	; 7
    edbe:	0f b6       	in	r0, 0x3f	; 63
    edc0:	f8 94       	cli
    edc2:	be bf       	out	0x3e, r27	; 62
    edc4:	0f be       	out	0x3f, r0	; 63
    edc6:	ad bf       	out	0x3d, r26	; 61
    edc8:	08 95       	ret

0000edca <fdevopen>:
    edca:	0f 93       	push	r16
    edcc:	1f 93       	push	r17
    edce:	cf 93       	push	r28
    edd0:	df 93       	push	r29
    edd2:	00 97       	sbiw	r24, 0x00	; 0
    edd4:	31 f4       	brne	.+12     	; 0xede2 <fdevopen+0x18>
    edd6:	61 15       	cp	r22, r1
    edd8:	71 05       	cpc	r23, r1
    edda:	19 f4       	brne	.+6      	; 0xede2 <fdevopen+0x18>
    eddc:	80 e0       	ldi	r24, 0x00	; 0
    edde:	90 e0       	ldi	r25, 0x00	; 0
    ede0:	3a c0       	rjmp	.+116    	; 0xee56 <fdevopen+0x8c>
    ede2:	8b 01       	movw	r16, r22
    ede4:	ec 01       	movw	r28, r24
    ede6:	6e e0       	ldi	r22, 0x0E	; 14
    ede8:	70 e0       	ldi	r23, 0x00	; 0
    edea:	81 e0       	ldi	r24, 0x01	; 1
    edec:	90 e0       	ldi	r25, 0x00	; 0
    edee:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
    edf2:	fc 01       	movw	r30, r24
    edf4:	89 2b       	or	r24, r25
    edf6:	91 f3       	breq	.-28     	; 0xeddc <fdevopen+0x12>
    edf8:	80 e8       	ldi	r24, 0x80	; 128
    edfa:	83 83       	std	Z+3, r24	; 0x03
    edfc:	01 15       	cp	r16, r1
    edfe:	11 05       	cpc	r17, r1
    ee00:	71 f0       	breq	.+28     	; 0xee1e <fdevopen+0x54>
    ee02:	13 87       	std	Z+11, r17	; 0x0b
    ee04:	02 87       	std	Z+10, r16	; 0x0a
    ee06:	81 e8       	ldi	r24, 0x81	; 129
    ee08:	83 83       	std	Z+3, r24	; 0x03
    ee0a:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    ee0e:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    ee12:	89 2b       	or	r24, r25
    ee14:	21 f4       	brne	.+8      	; 0xee1e <fdevopen+0x54>
    ee16:	f0 93 c0 1c 	sts	0x1CC0, r31	; 0x801cc0 <__iob+0x1>
    ee1a:	e0 93 bf 1c 	sts	0x1CBF, r30	; 0x801cbf <__iob>
    ee1e:	20 97       	sbiw	r28, 0x00	; 0
    ee20:	c9 f0       	breq	.+50     	; 0xee54 <fdevopen+0x8a>
    ee22:	d1 87       	std	Z+9, r29	; 0x09
    ee24:	c0 87       	std	Z+8, r28	; 0x08
    ee26:	83 81       	ldd	r24, Z+3	; 0x03
    ee28:	82 60       	ori	r24, 0x02	; 2
    ee2a:	83 83       	std	Z+3, r24	; 0x03
    ee2c:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    ee30:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    ee34:	89 2b       	or	r24, r25
    ee36:	21 f4       	brne	.+8      	; 0xee40 <fdevopen+0x76>
    ee38:	f0 93 c2 1c 	sts	0x1CC2, r31	; 0x801cc2 <__iob+0x3>
    ee3c:	e0 93 c1 1c 	sts	0x1CC1, r30	; 0x801cc1 <__iob+0x2>
    ee40:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    ee44:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    ee48:	89 2b       	or	r24, r25
    ee4a:	21 f4       	brne	.+8      	; 0xee54 <fdevopen+0x8a>
    ee4c:	f0 93 c4 1c 	sts	0x1CC4, r31	; 0x801cc4 <__iob+0x5>
    ee50:	e0 93 c3 1c 	sts	0x1CC3, r30	; 0x801cc3 <__iob+0x4>
    ee54:	cf 01       	movw	r24, r30
    ee56:	df 91       	pop	r29
    ee58:	cf 91       	pop	r28
    ee5a:	1f 91       	pop	r17
    ee5c:	0f 91       	pop	r16
    ee5e:	08 95       	ret

0000ee60 <fat_time_to_unix>:
    ee60:	a6 e1       	ldi	r26, 0x16	; 22
    ee62:	b0 e0       	ldi	r27, 0x00	; 0
    ee64:	e6 e3       	ldi	r30, 0x36	; 54
    ee66:	f7 e7       	ldi	r31, 0x77	; 119
    ee68:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    ee6c:	fe 01       	movw	r30, r28
    ee6e:	31 96       	adiw	r30, 0x01	; 1
    ee70:	26 e1       	ldi	r18, 0x16	; 22
    ee72:	df 01       	movw	r26, r30
    ee74:	1d 92       	st	X+, r1
    ee76:	2a 95       	dec	r18
    ee78:	e9 f7       	brne	.-6      	; 0xee74 <fat_time_to_unix+0x14>
    ee7a:	9b 01       	movw	r18, r22
    ee7c:	22 0f       	add	r18, r18
    ee7e:	33 1f       	adc	r19, r19
    ee80:	2e 73       	andi	r18, 0x3E	; 62
    ee82:	33 27       	eor	r19, r19
    ee84:	3a 83       	std	Y+2, r19	; 0x02
    ee86:	29 83       	std	Y+1, r18	; 0x01
    ee88:	9b 01       	movw	r18, r22
    ee8a:	55 e0       	ldi	r21, 0x05	; 5
    ee8c:	36 95       	lsr	r19
    ee8e:	27 95       	ror	r18
    ee90:	5a 95       	dec	r21
    ee92:	e1 f7       	brne	.-8      	; 0xee8c <fat_time_to_unix+0x2c>
    ee94:	2f 73       	andi	r18, 0x3F	; 63
    ee96:	33 27       	eor	r19, r19
    ee98:	3c 83       	std	Y+4, r19	; 0x04
    ee9a:	2b 83       	std	Y+3, r18	; 0x03
    ee9c:	27 2f       	mov	r18, r23
    ee9e:	26 95       	lsr	r18
    eea0:	26 95       	lsr	r18
    eea2:	26 95       	lsr	r18
    eea4:	2d 83       	std	Y+5, r18	; 0x05
    eea6:	1e 82       	std	Y+6, r1	; 0x06
    eea8:	9c 01       	movw	r18, r24
    eeaa:	2f 71       	andi	r18, 0x1F	; 31
    eeac:	33 27       	eor	r19, r19
    eeae:	38 87       	std	Y+8, r19	; 0x08
    eeb0:	2f 83       	std	Y+7, r18	; 0x07
    eeb2:	9c 01       	movw	r18, r24
    eeb4:	65 e0       	ldi	r22, 0x05	; 5
    eeb6:	36 95       	lsr	r19
    eeb8:	27 95       	ror	r18
    eeba:	6a 95       	dec	r22
    eebc:	e1 f7       	brne	.-8      	; 0xeeb6 <fat_time_to_unix+0x56>
    eebe:	2f 70       	andi	r18, 0x0F	; 15
    eec0:	33 27       	eor	r19, r19
    eec2:	21 50       	subi	r18, 0x01	; 1
    eec4:	31 09       	sbc	r19, r1
    eec6:	3a 87       	std	Y+10, r19	; 0x0a
    eec8:	29 87       	std	Y+9, r18	; 0x09
    eeca:	9c 01       	movw	r18, r24
    eecc:	23 2f       	mov	r18, r19
    eece:	33 27       	eor	r19, r19
    eed0:	26 95       	lsr	r18
    eed2:	20 5b       	subi	r18, 0xB0	; 176
    eed4:	3f 4f       	sbci	r19, 0xFF	; 255
    eed6:	3c 87       	std	Y+12, r19	; 0x0c
    eed8:	2b 87       	std	Y+11, r18	; 0x0b
    eeda:	cf 01       	movw	r24, r30
    eedc:	0e 94 97 38 	call	0x712e	; 0x712e <timegm>
    eee0:	66 96       	adiw	r28, 0x16	; 22
    eee2:	e2 e0       	ldi	r30, 0x02	; 2
    eee4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000eee8 <stat>:
    eee8:	a6 e1       	ldi	r26, 0x16	; 22
    eeea:	b1 e0       	ldi	r27, 0x01	; 1
    eeec:	ea e7       	ldi	r30, 0x7A	; 122
    eeee:	f7 e7       	ldi	r31, 0x77	; 119
    eef0:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
    eef4:	6c 01       	movw	r12, r24
    eef6:	8b 01       	movw	r16, r22
    eef8:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    eefc:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    ef00:	6c ef       	ldi	r22, 0xFC	; 252
    ef02:	78 e0       	ldi	r23, 0x08	; 8
    ef04:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
    ef08:	89 2b       	or	r24, r25
    ef0a:	01 f1       	breq	.+64     	; 0xef4c <stat+0x64>
    ef0c:	f8 01       	movw	r30, r16
    ef0e:	14 a2       	std	Z+36, r1	; 0x24
    ef10:	15 a2       	std	Z+37, r1	; 0x25
    ef12:	16 a2       	std	Z+38, r1	; 0x26
    ef14:	17 a2       	std	Z+39, r1	; 0x27
    ef16:	10 a6       	std	Z+40, r1	; 0x28
    ef18:	11 a6       	std	Z+41, r1	; 0x29
    ef1a:	12 a6       	std	Z+42, r1	; 0x2a
    ef1c:	13 a6       	std	Z+43, r1	; 0x2b
    ef1e:	14 a6       	std	Z+44, r1	; 0x2c
    ef20:	15 a6       	std	Z+45, r1	; 0x2d
    ef22:	16 a6       	std	Z+46, r1	; 0x2e
    ef24:	17 a6       	std	Z+47, r1	; 0x2f
    ef26:	11 8a       	std	Z+17, r1	; 0x11
    ef28:	10 8a       	std	Z+16, r1	; 0x10
    ef2a:	13 8a       	std	Z+19, r1	; 0x13
    ef2c:	12 8a       	std	Z+18, r1	; 0x12
    ef2e:	10 8e       	std	Z+24, r1	; 0x18
    ef30:	11 8e       	std	Z+25, r1	; 0x19
    ef32:	12 8e       	std	Z+26, r1	; 0x1a
    ef34:	13 8e       	std	Z+27, r1	; 0x1b
    ef36:	80 e0       	ldi	r24, 0x00	; 0
    ef38:	90 e4       	ldi	r25, 0x40	; 64
    ef3a:	a0 e0       	ldi	r26, 0x00	; 0
    ef3c:	b0 e0       	ldi	r27, 0x00	; 0
    ef3e:	80 87       	std	Z+8, r24	; 0x08
    ef40:	91 87       	std	Z+9, r25	; 0x09
    ef42:	a2 87       	std	Z+10, r26	; 0x0a
    ef44:	b3 87       	std	Z+11, r27	; 0x0b
    ef46:	e1 2c       	mov	r14, r1
    ef48:	f1 2c       	mov	r15, r1
    ef4a:	62 c0       	rjmp	.+196    	; 0xf010 <stat+0x128>
    ef4c:	66 ea       	ldi	r22, 0xA6	; 166
    ef4e:	78 e0       	ldi	r23, 0x08	; 8
    ef50:	c6 01       	movw	r24, r12
    ef52:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
    ef56:	89 2b       	or	r24, r25
    ef58:	c9 f6       	brne	.-78     	; 0xef0c <stat+0x24>
    ef5a:	60 ef       	ldi	r22, 0xF0	; 240
    ef5c:	72 e1       	ldi	r23, 0x12	; 18
    ef5e:	c6 01       	movw	r24, r12
    ef60:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
    ef64:	7c 01       	movw	r14, r24
    ef66:	89 2b       	or	r24, r25
    ef68:	89 f6       	brne	.-94     	; 0xef0c <stat+0x24>
    ef6a:	be 01       	movw	r22, r28
    ef6c:	6f 5f       	subi	r22, 0xFF	; 255
    ef6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef70:	c6 01       	movw	r24, r12
    ef72:	0e 94 21 62 	call	0xc442	; 0xc442 <f_stat>
    ef76:	00 97       	sbiw	r24, 0x00	; 0
    ef78:	a9 f0       	breq	.+42     	; 0xefa4 <stat+0xbc>
    ef7a:	84 31       	cpi	r24, 0x14	; 20
    ef7c:	91 05       	cpc	r25, r1
    ef7e:	40 f4       	brcc	.+16     	; 0xef90 <stat+0xa8>
    ef80:	fc 01       	movw	r30, r24
    ef82:	ea 55       	subi	r30, 0x5A	; 90
    ef84:	f4 4f       	sbci	r31, 0xF4	; 244
    ef86:	80 81       	ld	r24, Z
    ef88:	08 2e       	mov	r0, r24
    ef8a:	00 0c       	add	r0, r0
    ef8c:	99 0b       	sbc	r25, r25
    ef8e:	02 c0       	rjmp	.+4      	; 0xef94 <stat+0xac>
    ef90:	83 e2       	ldi	r24, 0x23	; 35
    ef92:	90 e0       	ldi	r25, 0x00	; 0
    ef94:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    ef98:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    ef9c:	ee 24       	eor	r14, r14
    ef9e:	ea 94       	dec	r14
    efa0:	fe 2c       	mov	r15, r14
    efa2:	36 c0       	rjmp	.+108    	; 0xf010 <stat+0x128>
    efa4:	89 81       	ldd	r24, Y+1	; 0x01
    efa6:	9a 81       	ldd	r25, Y+2	; 0x02
    efa8:	ab 81       	ldd	r26, Y+3	; 0x03
    efaa:	bc 81       	ldd	r27, Y+4	; 0x04
    efac:	f8 01       	movw	r30, r16
    efae:	80 8f       	std	Z+24, r24	; 0x18
    efb0:	91 8f       	std	Z+25, r25	; 0x19
    efb2:	a2 8f       	std	Z+26, r26	; 0x1a
    efb4:	b3 8f       	std	Z+27, r27	; 0x1b
    efb6:	6f 81       	ldd	r22, Y+7	; 0x07
    efb8:	78 85       	ldd	r23, Y+8	; 0x08
    efba:	8d 81       	ldd	r24, Y+5	; 0x05
    efbc:	9e 81       	ldd	r25, Y+6	; 0x06
    efbe:	50 df       	rcall	.-352    	; 0xee60 <fat_time_to_unix>
    efc0:	f8 01       	movw	r30, r16
    efc2:	64 a3       	std	Z+36, r22	; 0x24
    efc4:	75 a3       	std	Z+37, r23	; 0x25
    efc6:	86 a3       	std	Z+38, r24	; 0x26
    efc8:	97 a3       	std	Z+39, r25	; 0x27
    efca:	60 a7       	std	Z+40, r22	; 0x28
    efcc:	71 a7       	std	Z+41, r23	; 0x29
    efce:	82 a7       	std	Z+42, r24	; 0x2a
    efd0:	93 a7       	std	Z+43, r25	; 0x2b
    efd2:	64 a7       	std	Z+44, r22	; 0x2c
    efd4:	75 a7       	std	Z+45, r23	; 0x2d
    efd6:	86 a7       	std	Z+46, r24	; 0x2e
    efd8:	97 a7       	std	Z+47, r25	; 0x2f
    efda:	29 85       	ldd	r18, Y+9	; 0x09
    efdc:	20 fd       	sbrc	r18, 0
    efde:	03 c0       	rjmp	.+6      	; 0xefe6 <stat+0xfe>
    efe0:	8f ef       	ldi	r24, 0xFF	; 255
    efe2:	91 e0       	ldi	r25, 0x01	; 1
    efe4:	02 c0       	rjmp	.+4      	; 0xefea <stat+0x102>
    efe6:	8d e6       	ldi	r24, 0x6D	; 109
    efe8:	91 e0       	ldi	r25, 0x01	; 1
    efea:	48 ee       	ldi	r20, 0xE8	; 232
    efec:	53 e0       	ldi	r21, 0x03	; 3
    efee:	f8 01       	movw	r30, r16
    eff0:	51 8b       	std	Z+17, r21	; 0x11
    eff2:	40 8b       	std	Z+16, r20	; 0x10
    eff4:	53 8b       	std	Z+19, r21	; 0x13
    eff6:	42 8b       	std	Z+18, r20	; 0x12
    eff8:	24 ff       	sbrs	r18, 4
    effa:	02 c0       	rjmp	.+4      	; 0xf000 <stat+0x118>
    effc:	90 64       	ori	r25, 0x40	; 64
    effe:	01 c0       	rjmp	.+2      	; 0xf002 <stat+0x11a>
    f000:	90 68       	ori	r25, 0x80	; 128
    f002:	a0 e0       	ldi	r26, 0x00	; 0
    f004:	b0 e0       	ldi	r27, 0x00	; 0
    f006:	f8 01       	movw	r30, r16
    f008:	80 87       	std	Z+8, r24	; 0x08
    f00a:	91 87       	std	Z+9, r25	; 0x09
    f00c:	a2 87       	std	Z+10, r26	; 0x0a
    f00e:	b3 87       	std	Z+11, r27	; 0x0b
    f010:	c7 01       	movw	r24, r14
    f012:	ca 5e       	subi	r28, 0xEA	; 234
    f014:	de 4f       	sbci	r29, 0xFE	; 254
    f016:	e8 e0       	ldi	r30, 0x08	; 8
    f018:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0000f01c <unix_time_to_fat>:
    f01c:	a4 e0       	ldi	r26, 0x04	; 4
    f01e:	b0 e0       	ldi	r27, 0x00	; 0
    f020:	e4 e1       	ldi	r30, 0x14	; 20
    f022:	f8 e7       	ldi	r31, 0x78	; 120
    f024:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
    f028:	69 83       	std	Y+1, r22	; 0x01
    f02a:	7a 83       	std	Y+2, r23	; 0x02
    f02c:	8b 83       	std	Y+3, r24	; 0x03
    f02e:	9c 83       	std	Y+4, r25	; 0x04
    f030:	7a 01       	movw	r14, r20
    f032:	89 01       	movw	r16, r18
    f034:	ce 01       	movw	r24, r28
    f036:	01 96       	adiw	r24, 0x01	; 1
    f038:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <gmtime>
    f03c:	fc 01       	movw	r30, r24
    f03e:	22 85       	ldd	r18, Z+10	; 0x0a
    f040:	33 85       	ldd	r19, Z+11	; 0x0b
    f042:	20 55       	subi	r18, 0x50	; 80
    f044:	31 09       	sbc	r19, r1
    f046:	c9 01       	movw	r24, r18
    f048:	98 2f       	mov	r25, r24
    f04a:	88 27       	eor	r24, r24
    f04c:	99 0f       	add	r25, r25
    f04e:	20 85       	ldd	r18, Z+8	; 0x08
    f050:	31 85       	ldd	r19, Z+9	; 0x09
    f052:	2f 5f       	subi	r18, 0xFF	; 255
    f054:	3f 4f       	sbci	r19, 0xFF	; 255
    f056:	45 e0       	ldi	r20, 0x05	; 5
    f058:	22 0f       	add	r18, r18
    f05a:	33 1f       	adc	r19, r19
    f05c:	4a 95       	dec	r20
    f05e:	e1 f7       	brne	.-8      	; 0xf058 <unix_time_to_fat+0x3c>
    f060:	28 2b       	or	r18, r24
    f062:	39 2b       	or	r19, r25
    f064:	86 81       	ldd	r24, Z+6	; 0x06
    f066:	97 81       	ldd	r25, Z+7	; 0x07
    f068:	28 2b       	or	r18, r24
    f06a:	39 2b       	or	r19, r25
    f06c:	d7 01       	movw	r26, r14
    f06e:	2d 93       	st	X+, r18
    f070:	3c 93       	st	X, r19
    f072:	84 81       	ldd	r24, Z+4	; 0x04
    f074:	20 e0       	ldi	r18, 0x00	; 0
    f076:	30 e0       	ldi	r19, 0x00	; 0
    f078:	38 2f       	mov	r19, r24
    f07a:	33 0f       	add	r19, r19
    f07c:	33 0f       	add	r19, r19
    f07e:	33 0f       	add	r19, r19
    f080:	82 81       	ldd	r24, Z+2	; 0x02
    f082:	93 81       	ldd	r25, Z+3	; 0x03
    f084:	55 e0       	ldi	r21, 0x05	; 5
    f086:	88 0f       	add	r24, r24
    f088:	99 1f       	adc	r25, r25
    f08a:	5a 95       	dec	r21
    f08c:	e1 f7       	brne	.-8      	; 0xf086 <unix_time_to_fat+0x6a>
    f08e:	82 2b       	or	r24, r18
    f090:	93 2b       	or	r25, r19
    f092:	20 81       	ld	r18, Z
    f094:	31 81       	ldd	r19, Z+1	; 0x01
    f096:	36 95       	lsr	r19
    f098:	27 95       	ror	r18
    f09a:	82 2b       	or	r24, r18
    f09c:	93 2b       	or	r25, r19
    f09e:	f8 01       	movw	r30, r16
    f0a0:	91 83       	std	Z+1, r25	; 0x01
    f0a2:	80 83       	st	Z, r24
    f0a4:	24 96       	adiw	r28, 0x04	; 4
    f0a6:	e6 e0       	ldi	r30, 0x06	; 6
    f0a8:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0000f0ac <utime>:
    f0ac:	aa e1       	ldi	r26, 0x1A	; 26
    f0ae:	b1 e0       	ldi	r27, 0x01	; 1
    f0b0:	ec e5       	ldi	r30, 0x5C	; 92
    f0b2:	f8 e7       	ldi	r31, 0x78	; 120
    f0b4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
    f0b8:	8c 01       	movw	r16, r24
    f0ba:	61 15       	cp	r22, r1
    f0bc:	71 05       	cpc	r23, r1
    f0be:	31 f0       	breq	.+12     	; 0xf0cc <utime+0x20>
    f0c0:	fb 01       	movw	r30, r22
    f0c2:	64 81       	ldd	r22, Z+4	; 0x04
    f0c4:	75 81       	ldd	r23, Z+5	; 0x05
    f0c6:	86 81       	ldd	r24, Z+6	; 0x06
    f0c8:	97 81       	ldd	r25, Z+7	; 0x07
    f0ca:	04 c0       	rjmp	.+8      	; 0xf0d4 <utime+0x28>
    f0cc:	80 e0       	ldi	r24, 0x00	; 0
    f0ce:	90 e0       	ldi	r25, 0x00	; 0
    f0d0:	0e 94 32 36 	call	0x6c64	; 0x6c64 <time>
    f0d4:	9e 01       	movw	r18, r28
    f0d6:	29 5e       	subi	r18, 0xE9	; 233
    f0d8:	3e 4f       	sbci	r19, 0xFE	; 254
    f0da:	ae 01       	movw	r20, r28
    f0dc:	47 5e       	subi	r20, 0xE7	; 231
    f0de:	5e 4f       	sbci	r21, 0xFE	; 254
    f0e0:	9d df       	rcall	.-198    	; 0xf01c <unix_time_to_fat>
    f0e2:	c7 5e       	subi	r28, 0xE7	; 231
    f0e4:	de 4f       	sbci	r29, 0xFE	; 254
    f0e6:	88 81       	ld	r24, Y
    f0e8:	99 81       	ldd	r25, Y+1	; 0x01
    f0ea:	c9 51       	subi	r28, 0x19	; 25
    f0ec:	d1 40       	sbci	r29, 0x01	; 1
    f0ee:	9e 83       	std	Y+6, r25	; 0x06
    f0f0:	8d 83       	std	Y+5, r24	; 0x05
    f0f2:	c9 5e       	subi	r28, 0xE9	; 233
    f0f4:	de 4f       	sbci	r29, 0xFE	; 254
    f0f6:	88 81       	ld	r24, Y
    f0f8:	99 81       	ldd	r25, Y+1	; 0x01
    f0fa:	c7 51       	subi	r28, 0x17	; 23
    f0fc:	d1 40       	sbci	r29, 0x01	; 1
    f0fe:	98 87       	std	Y+8, r25	; 0x08
    f100:	8f 83       	std	Y+7, r24	; 0x07
    f102:	be 01       	movw	r22, r28
    f104:	6f 5f       	subi	r22, 0xFF	; 255
    f106:	7f 4f       	sbci	r23, 0xFF	; 255
    f108:	c8 01       	movw	r24, r16
    f10a:	0e 94 38 66 	call	0xcc70	; 0xcc70 <f_utime>
    f10e:	84 31       	cpi	r24, 0x14	; 20
    f110:	91 05       	cpc	r25, r1
    f112:	40 f4       	brcc	.+16     	; 0xf124 <utime+0x78>
    f114:	fc 01       	movw	r30, r24
    f116:	ea 55       	subi	r30, 0x5A	; 90
    f118:	f4 4f       	sbci	r31, 0xF4	; 244
    f11a:	80 81       	ld	r24, Z
    f11c:	08 2e       	mov	r0, r24
    f11e:	00 0c       	add	r0, r0
    f120:	99 0b       	sbc	r25, r25
    f122:	02 c0       	rjmp	.+4      	; 0xf128 <utime+0x7c>
    f124:	83 e2       	ldi	r24, 0x23	; 35
    f126:	90 e0       	ldi	r25, 0x00	; 0
    f128:	c6 5e       	subi	r28, 0xE6	; 230
    f12a:	de 4f       	sbci	r29, 0xFE	; 254
    f12c:	e4 e0       	ldi	r30, 0x04	; 4
    f12e:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0000f132 <fileno_to_fatfs>:
    f132:	83 30       	cpi	r24, 0x03	; 3
    f134:	91 05       	cpc	r25, r1
    f136:	48 f4       	brcc	.+18     	; 0xf14a <fileno_to_fatfs+0x18>
    f138:	89 e0       	ldi	r24, 0x09	; 9
    f13a:	90 e0       	ldi	r25, 0x00	; 0
    f13c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f140:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f144:	80 e0       	ldi	r24, 0x00	; 0
    f146:	90 e0       	ldi	r25, 0x00	; 0
    f148:	08 95       	ret
    f14a:	60 dc       	rcall	.-1856   	; 0xea0c <fileno_to_stream>
    f14c:	00 97       	sbiw	r24, 0x00	; 0
    f14e:	d1 f3       	breq	.-12     	; 0xf144 <fileno_to_fatfs+0x12>
    f150:	fc 01       	movw	r30, r24
    f152:	84 85       	ldd	r24, Z+12	; 0x0c
    f154:	95 85       	ldd	r25, Z+13	; 0x0d
    f156:	00 97       	sbiw	r24, 0x00	; 0
    f158:	79 f3       	breq	.-34     	; 0xf138 <fileno_to_fatfs+0x6>
    f15a:	08 95       	ret

0000f15c <ftell>:
    f15c:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f160:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f164:	37 dc       	rcall	.-1938   	; 0xe9d4 <fileno>
    f166:	83 30       	cpi	r24, 0x03	; 3
    f168:	91 05       	cpc	r25, r1
    f16a:	48 f0       	brcs	.+18     	; 0xf17e <ftell+0x22>
    f16c:	e2 df       	rcall	.-60     	; 0xf132 <fileno_to_fatfs>
    f16e:	00 97       	sbiw	r24, 0x00	; 0
    f170:	51 f4       	brne	.+20     	; 0xf186 <ftell+0x2a>
    f172:	89 e0       	ldi	r24, 0x09	; 9
    f174:	90 e0       	ldi	r25, 0x00	; 0
    f176:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f17a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f17e:	6f ef       	ldi	r22, 0xFF	; 255
    f180:	7f ef       	ldi	r23, 0xFF	; 255
    f182:	cb 01       	movw	r24, r22
    f184:	08 95       	ret
    f186:	fc 01       	movw	r30, r24
    f188:	60 89       	ldd	r22, Z+16	; 0x10
    f18a:	71 89       	ldd	r23, Z+17	; 0x11
    f18c:	82 89       	ldd	r24, Z+18	; 0x12
    f18e:	93 89       	ldd	r25, Z+19	; 0x13
    f190:	08 95       	ret

0000f192 <lseek>:
    f192:	a3 e0       	ldi	r26, 0x03	; 3
    f194:	b0 e0       	ldi	r27, 0x00	; 0
    f196:	ef ec       	ldi	r30, 0xCF	; 207
    f198:	f8 e7       	ldi	r31, 0x78	; 120
    f19a:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
    f19e:	5c 01       	movw	r10, r24
    f1a0:	6a 01       	movw	r12, r20
    f1a2:	7b 01       	movw	r14, r22
    f1a4:	89 01       	movw	r16, r18
    f1a6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f1aa:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
    f1ae:	c1 df       	rcall	.-126    	; 0xf132 <fileno_to_fatfs>
    f1b0:	ec 01       	movw	r28, r24
    f1b2:	89 2b       	or	r24, r25
    f1b4:	19 f4       	brne	.+6      	; 0xf1bc <lseek+0x2a>
    f1b6:	88 e1       	ldi	r24, 0x18	; 24
    f1b8:	90 e0       	ldi	r25, 0x00	; 0
    f1ba:	26 c0       	rjmp	.+76     	; 0xf208 <lseek+0x76>
    f1bc:	83 e0       	ldi	r24, 0x03	; 3
    f1be:	a8 16       	cp	r10, r24
    f1c0:	b1 04       	cpc	r11, r1
    f1c2:	d0 f1       	brcs	.+116    	; 0xf238 <lseek+0xa6>
    f1c4:	c5 01       	movw	r24, r10
    f1c6:	22 dc       	rcall	.-1980   	; 0xea0c <fileno_to_stream>
    f1c8:	fc 01       	movw	r30, r24
    f1ca:	93 81       	ldd	r25, Z+3	; 0x03
    f1cc:	90 64       	ori	r25, 0x40	; 64
    f1ce:	93 83       	std	Z+3, r25	; 0x03
    f1d0:	02 30       	cpi	r16, 0x02	; 2
    f1d2:	11 05       	cpc	r17, r1
    f1d4:	a9 f5       	brne	.+106    	; 0xf240 <lseek+0xae>
    f1d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    f1d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    f1da:	ac 85       	ldd	r26, Y+12	; 0x0c
    f1dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    f1de:	c8 0e       	add	r12, r24
    f1e0:	d9 1e       	adc	r13, r25
    f1e2:	ea 1e       	adc	r14, r26
    f1e4:	fb 1e       	adc	r15, r27
    f1e6:	b7 01       	movw	r22, r14
    f1e8:	a6 01       	movw	r20, r12
    f1ea:	ce 01       	movw	r24, r28
    f1ec:	0e 94 9c 5e 	call	0xbd38	; 0xbd38 <f_lseek>
    f1f0:	00 97       	sbiw	r24, 0x00	; 0
    f1f2:	79 f0       	breq	.+30     	; 0xf212 <lseek+0x80>
    f1f4:	84 31       	cpi	r24, 0x14	; 20
    f1f6:	91 05       	cpc	r25, r1
    f1f8:	58 f5       	brcc	.+86     	; 0xf250 <lseek+0xbe>
    f1fa:	fc 01       	movw	r30, r24
    f1fc:	ea 55       	subi	r30, 0x5A	; 90
    f1fe:	f4 4f       	sbci	r31, 0xF4	; 244
    f200:	80 81       	ld	r24, Z
    f202:	08 2e       	mov	r0, r24
    f204:	00 0c       	add	r0, r0
    f206:	99 0b       	sbc	r25, r25
    f208:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f20c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f210:	13 c0       	rjmp	.+38     	; 0xf238 <lseek+0xa6>
    f212:	68 89       	ldd	r22, Y+16	; 0x10
    f214:	79 89       	ldd	r23, Y+17	; 0x11
    f216:	8a 89       	ldd	r24, Y+18	; 0x12
    f218:	9b 89       	ldd	r25, Y+19	; 0x13
    f21a:	c6 16       	cp	r12, r22
    f21c:	d7 06       	cpc	r13, r23
    f21e:	e8 06       	cpc	r14, r24
    f220:	f9 06       	cpc	r15, r25
    f222:	c9 f0       	breq	.+50     	; 0xf256 <lseek+0xc4>
    f224:	8a ea       	ldi	r24, 0xAA	; 170
    f226:	9b e0       	ldi	r25, 0x0B	; 11
    f228:	a0 e0       	ldi	r26, 0x00	; 0
    f22a:	ed b7       	in	r30, 0x3d	; 61
    f22c:	fe b7       	in	r31, 0x3e	; 62
    f22e:	81 83       	std	Z+1, r24	; 0x01
    f230:	92 83       	std	Z+2, r25	; 0x02
    f232:	a3 83       	std	Z+3, r26	; 0x03
    f234:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    f238:	6f ef       	ldi	r22, 0xFF	; 255
    f23a:	7f ef       	ldi	r23, 0xFF	; 255
    f23c:	cb 01       	movw	r24, r22
    f23e:	0b c0       	rjmp	.+22     	; 0xf256 <lseek+0xc4>
    f240:	01 30       	cpi	r16, 0x01	; 1
    f242:	11 05       	cpc	r17, r1
    f244:	81 f6       	brne	.-96     	; 0xf1e6 <lseek+0x54>
    f246:	88 89       	ldd	r24, Y+16	; 0x10
    f248:	99 89       	ldd	r25, Y+17	; 0x11
    f24a:	aa 89       	ldd	r26, Y+18	; 0x12
    f24c:	bb 89       	ldd	r27, Y+19	; 0x13
    f24e:	c7 cf       	rjmp	.-114    	; 0xf1de <lseek+0x4c>
    f250:	83 e2       	ldi	r24, 0x23	; 35
    f252:	90 e0       	ldi	r25, 0x00	; 0
    f254:	d9 cf       	rjmp	.-78     	; 0xf208 <lseek+0x76>
    f256:	cd b7       	in	r28, 0x3d	; 61
    f258:	de b7       	in	r29, 0x3e	; 62
    f25a:	23 96       	adiw	r28, 0x03	; 3
    f25c:	ea e0       	ldi	r30, 0x0A	; 10
    f25e:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0000f262 <fseek>:
    f262:	cf 92       	push	r12
    f264:	df 92       	push	r13
    f266:	ef 92       	push	r14
    f268:	ff 92       	push	r15
    f26a:	cf 93       	push	r28
    f26c:	df 93       	push	r29
    f26e:	6a 01       	movw	r12, r20
    f270:	7b 01       	movw	r14, r22
    f272:	e9 01       	movw	r28, r18
    f274:	af db       	rcall	.-2210   	; 0xe9d4 <fileno>
    f276:	97 fd       	sbrc	r25, 7
    f278:	12 c0       	rjmp	.+36     	; 0xf29e <fseek+0x3c>
    f27a:	9e 01       	movw	r18, r28
    f27c:	b7 01       	movw	r22, r14
    f27e:	a6 01       	movw	r20, r12
    f280:	88 df       	rcall	.-240    	; 0xf192 <lseek>
    f282:	21 e0       	ldi	r18, 0x01	; 1
    f284:	30 e0       	ldi	r19, 0x00	; 0
    f286:	6f 3f       	cpi	r22, 0xFF	; 255
    f288:	7f 4f       	sbci	r23, 0xFF	; 255
    f28a:	8f 4f       	sbci	r24, 0xFF	; 255
    f28c:	9f 4f       	sbci	r25, 0xFF	; 255
    f28e:	11 f0       	breq	.+4      	; 0xf294 <fseek+0x32>
    f290:	20 e0       	ldi	r18, 0x00	; 0
    f292:	30 e0       	ldi	r19, 0x00	; 0
    f294:	88 27       	eor	r24, r24
    f296:	99 27       	eor	r25, r25
    f298:	82 1b       	sub	r24, r18
    f29a:	93 0b       	sbc	r25, r19
    f29c:	02 c0       	rjmp	.+4      	; 0xf2a2 <fseek+0x40>
    f29e:	8f ef       	ldi	r24, 0xFF	; 255
    f2a0:	9f ef       	ldi	r25, 0xFF	; 255
    f2a2:	df 91       	pop	r29
    f2a4:	cf 91       	pop	r28
    f2a6:	ff 90       	pop	r15
    f2a8:	ef 90       	pop	r14
    f2aa:	df 90       	pop	r13
    f2ac:	cf 90       	pop	r12
    f2ae:	08 95       	ret

0000f2b0 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f2b0:	a2 e0       	ldi	r26, 0x02	; 2
    f2b2:	b0 e0       	ldi	r27, 0x00	; 0
    f2b4:	ee e5       	ldi	r30, 0x5E	; 94
    f2b6:	f9 e7       	ldi	r31, 0x79	; 121
    f2b8:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
    f2bc:	5c 01       	movw	r10, r24
    f2be:	8b 01       	movw	r16, r22
    f2c0:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f2c2:	fb 01       	movw	r30, r22
    f2c4:	10 82       	st	Z, r1

    errno = 0;
    f2c6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f2ca:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f2ce:	9e db       	rcall	.-2244   	; 0xea0c <fileno_to_stream>
    f2d0:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f2d2:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f2d6:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f2da:	e8 16       	cp	r14, r24
    f2dc:	f9 06       	cpc	r15, r25
    f2de:	c9 f4       	brne	.+50     	; 0xf312 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f2e0:	f7 01       	movw	r30, r14
    f2e2:	83 81       	ldd	r24, Z+3	; 0x03
    f2e4:	80 64       	ori	r24, 0x40	; 64
    f2e6:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f2e8:	1a 82       	std	Y+2, r1	; 0x02
    f2ea:	19 82       	std	Y+1, r1	; 0x01
    f2ec:	c0 0e       	add	r12, r16
    f2ee:	d1 1e       	adc	r13, r17
        while(count--)
    f2f0:	0c 15       	cp	r16, r12
    f2f2:	1d 05       	cpc	r17, r13
    f2f4:	09 f4       	brne	.+2      	; 0xf2f8 <read+0x48>
    f2f6:	3d c0       	rjmp	.+122    	; 0xf372 <read+0xc2>
        {
            ret = fgetc(stream);
    f2f8:	c7 01       	movw	r24, r14
    f2fa:	48 da       	rcall	.-2928   	; 0xe78c <fgetc>
            if(ret < 0)
    f2fc:	97 fd       	sbrc	r25, 7
    f2fe:	39 c0       	rjmp	.+114    	; 0xf372 <read+0xc2>
                break;

            *ptr++ = ret;
    f300:	f8 01       	movw	r30, r16
    f302:	81 93       	st	Z+, r24
    f304:	8f 01       	movw	r16, r30
            ++size;
    f306:	89 81       	ldd	r24, Y+1	; 0x01
    f308:	9a 81       	ldd	r25, Y+2	; 0x02
    f30a:	01 96       	adiw	r24, 0x01	; 1
    f30c:	9a 83       	std	Y+2, r25	; 0x02
    f30e:	89 83       	std	Y+1, r24	; 0x01
    f310:	ef cf       	rjmp	.-34     	; 0xf2f0 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f312:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f316:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f31a:	e8 16       	cp	r14, r24
    f31c:	f9 06       	cpc	r15, r25
    f31e:	71 f1       	breq	.+92     	; 0xf37c <read+0xcc>
    f320:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f324:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f328:	e8 16       	cp	r14, r24
    f32a:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f32c:	39 f1       	breq	.+78     	; 0xf37c <read+0xcc>
    f32e:	c5 01       	movw	r24, r10
    f330:	00 df       	rcall	.-512    	; 0xf132 <fileno_to_fatfs>
    if ( fh == NULL )
    f332:	00 97       	sbiw	r24, 0x00	; 0
    f334:	19 f4       	brne	.+6      	; 0xf33c <read+0x8c>
    {
        errno = EBADF;
    f336:	89 e0       	ldi	r24, 0x09	; 9
    f338:	90 e0       	ldi	r25, 0x00	; 0
    f33a:	16 c0       	rjmp	.+44     	; 0xf368 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f33c:	9e 01       	movw	r18, r28
    f33e:	2f 5f       	subi	r18, 0xFF	; 255
    f340:	3f 4f       	sbci	r19, 0xFF	; 255
    f342:	a6 01       	movw	r20, r12
    f344:	b8 01       	movw	r22, r16
    f346:	0e 94 90 59 	call	0xb320	; 0xb320 <f_read>
    if(res != FR_OK)
    f34a:	00 97       	sbiw	r24, 0x00	; 0
    f34c:	91 f0       	breq	.+36     	; 0xf372 <read+0xc2>
    f34e:	84 31       	cpi	r24, 0x14	; 20
    f350:	91 05       	cpc	r25, r1
    f352:	40 f4       	brcc	.+16     	; 0xf364 <read+0xb4>
    f354:	fc 01       	movw	r30, r24
    f356:	ea 55       	subi	r30, 0x5A	; 90
    f358:	f4 4f       	sbci	r31, 0xF4	; 244
    f35a:	80 81       	ld	r24, Z
    f35c:	08 2e       	mov	r0, r24
    f35e:	00 0c       	add	r0, r0
    f360:	99 0b       	sbc	r25, r25
    f362:	02 c0       	rjmp	.+4      	; 0xf368 <read+0xb8>
    f364:	83 e2       	ldi	r24, 0x23	; 35
    f366:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f368:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f36c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f370:	05 c0       	rjmp	.+10     	; 0xf37c <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f372:	69 81       	ldd	r22, Y+1	; 0x01
    f374:	7a 81       	ldd	r23, Y+2	; 0x02
    f376:	80 e0       	ldi	r24, 0x00	; 0
    f378:	90 e0       	ldi	r25, 0x00	; 0
    f37a:	03 c0       	rjmp	.+6      	; 0xf382 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f37c:	6f ef       	ldi	r22, 0xFF	; 255
    f37e:	7f ef       	ldi	r23, 0xFF	; 255
    f380:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f382:	22 96       	adiw	r28, 0x02	; 2
    f384:	ea e0       	ldi	r30, 0x0A	; 10
    f386:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0000f38a <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f38a:	0f 93       	push	r16
    f38c:	1f 93       	push	r17
    f38e:	cf 93       	push	r28
    f390:	df 93       	push	r29
    f392:	ec 01       	movw	r28, r24
    f394:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f396:	64 9f       	mul	r22, r20
    f398:	80 01       	movw	r16, r0
    f39a:	65 9f       	mul	r22, r21
    f39c:	10 0d       	add	r17, r0
    f39e:	74 9f       	mul	r23, r20
    f3a0:	10 0d       	add	r17, r0
    f3a2:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f3a4:	17 db       	rcall	.-2514   	; 0xe9d4 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f3a6:	a8 01       	movw	r20, r16
    f3a8:	be 01       	movw	r22, r28
    f3aa:	82 df       	rcall	.-252    	; 0xf2b0 <read>
    if(ret < 0)
    f3ac:	97 fd       	sbrc	r25, 7
    f3ae:	02 c0       	rjmp	.+4      	; 0xf3b4 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f3b0:	cb 01       	movw	r24, r22
    f3b2:	02 c0       	rjmp	.+4      	; 0xf3b8 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f3b4:	80 e0       	ldi	r24, 0x00	; 0
    f3b6:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f3b8:	df 91       	pop	r29
    f3ba:	cf 91       	pop	r28
    f3bc:	1f 91       	pop	r17
    f3be:	0f 91       	pop	r16
    f3c0:	08 95       	ret

0000f3c2 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f3c2:	cf 93       	push	r28
    f3c4:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f3c6:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f3ca:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f3ce:	83 30       	cpi	r24, 0x03	; 3
    f3d0:	91 05       	cpc	r25, r1
    f3d2:	18 f4       	brcc	.+6      	; 0xf3da <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f3d4:	89 e0       	ldi	r24, 0x09	; 9
    f3d6:	90 e0       	ldi	r25, 0x00	; 0
    f3d8:	18 c0       	rjmp	.+48     	; 0xf40a <syncfs+0x48>
    f3da:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f3dc:	17 db       	rcall	.-2514   	; 0xea0c <fileno_to_stream>
    f3de:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f3e0:	93 81       	ldd	r25, Z+3	; 0x03
    f3e2:	90 64       	ori	r25, 0x40	; 64
    f3e4:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f3e6:	ce 01       	movw	r24, r28
    f3e8:	a4 de       	rcall	.-696    	; 0xf132 <fileno_to_fatfs>
    if(fh == NULL)
    f3ea:	00 97       	sbiw	r24, 0x00	; 0
    f3ec:	99 f3       	breq	.-26     	; 0xf3d4 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f3ee:	0e 94 72 5c 	call	0xb8e4	; 0xb8e4 <f_sync>
    if (res != FR_OK)
    f3f2:	00 97       	sbiw	r24, 0x00	; 0
    f3f4:	a1 f0       	breq	.+40     	; 0xf41e <syncfs+0x5c>
    f3f6:	84 31       	cpi	r24, 0x14	; 20
    f3f8:	91 05       	cpc	r25, r1
    f3fa:	70 f4       	brcc	.+28     	; 0xf418 <syncfs+0x56>
    f3fc:	fc 01       	movw	r30, r24
    f3fe:	ea 55       	subi	r30, 0x5A	; 90
    f400:	f4 4f       	sbci	r31, 0xF4	; 244
    f402:	80 81       	ld	r24, Z
    f404:	08 2e       	mov	r0, r24
    f406:	00 0c       	add	r0, r0
    f408:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f40a:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f40e:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f412:	8f ef       	ldi	r24, 0xFF	; 255
    f414:	9f ef       	ldi	r25, 0xFF	; 255
    f416:	05 c0       	rjmp	.+10     	; 0xf422 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f418:	83 e2       	ldi	r24, 0x23	; 35
    f41a:	90 e0       	ldi	r25, 0x00	; 0
    f41c:	f6 cf       	rjmp	.-20     	; 0xf40a <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f41e:	80 e0       	ldi	r24, 0x00	; 0
    f420:	90 e0       	ldi	r25, 0x00	; 0
}
    f422:	df 91       	pop	r29
    f424:	cf 91       	pop	r28
    f426:	08 95       	ret

0000f428 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f428:	cf 93       	push	r28
    f42a:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f42c:	c0 e0       	ldi	r28, 0x00	; 0
    f42e:	d0 e0       	ldi	r29, 0x00	; 0
    f430:	21 96       	adiw	r28, 0x01	; 1
    f432:	c0 31       	cpi	r28, 0x10	; 16
    f434:	d1 05       	cpc	r29, r1
    f436:	51 f0       	breq	.+20     	; 0xf44c <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f438:	c3 30       	cpi	r28, 0x03	; 3
    f43a:	d1 05       	cpc	r29, r1
    f43c:	cc f3       	brlt	.-14     	; 0xf430 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f43e:	ce 01       	movw	r24, r28
    f440:	78 de       	rcall	.-784    	; 0xf132 <fileno_to_fatfs>
        if(fh == NULL)
    f442:	89 2b       	or	r24, r25
    f444:	a9 f3       	breq	.-22     	; 0xf430 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f446:	ce 01       	movw	r24, r28
    f448:	bc df       	rcall	.-136    	; 0xf3c2 <syncfs>
    f44a:	f2 cf       	rjmp	.-28     	; 0xf430 <sync+0x8>
    }
}
    f44c:	df 91       	pop	r29
    f44e:	cf 91       	pop	r28
    f450:	08 95       	ret

0000f452 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f452:	a2 e0       	ldi	r26, 0x02	; 2
    f454:	b0 e0       	ldi	r27, 0x00	; 0
    f456:	ef e2       	ldi	r30, 0x2F	; 47
    f458:	fa e7       	ldi	r31, 0x7A	; 122
    f45a:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
    f45e:	8c 01       	movw	r16, r24
    f460:	b6 2e       	mov	r11, r22
    f462:	f7 2e       	mov	r15, r23
    f464:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f466:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f46a:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f46e:	ce da       	rcall	.-2660   	; 0xea0c <fileno_to_stream>
    f470:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f472:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
    f476:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
    f47a:	c8 16       	cp	r12, r24
    f47c:	d9 06       	cpc	r13, r25
    f47e:	39 f0       	breq	.+14     	; 0xf48e <write+0x3c>
    f480:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <__iob+0x4>
    f484:	90 91 c4 1c 	lds	r25, 0x1CC4	; 0x801cc4 <__iob+0x5>
    f488:	c8 16       	cp	r12, r24
    f48a:	d9 06       	cpc	r13, r25
    f48c:	d1 f4       	brne	.+52     	; 0xf4c2 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f48e:	1a 82       	std	Y+2, r1	; 0x02
    f490:	19 82       	std	Y+1, r1	; 0x01
    f492:	0b 2d       	mov	r16, r11
    f494:	1f 2d       	mov	r17, r15
    f496:	78 01       	movw	r14, r16
    f498:	e8 0c       	add	r14, r8
    f49a:	f9 1c       	adc	r15, r9
        while(count--)
    f49c:	0e 15       	cp	r16, r14
    f49e:	1f 05       	cpc	r17, r15
    f4a0:	d1 f1       	breq	.+116    	; 0xf516 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f4a2:	f8 01       	movw	r30, r16
    f4a4:	a1 90       	ld	r10, Z+
    f4a6:	8f 01       	movw	r16, r30
    f4a8:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f4aa:	b6 01       	movw	r22, r12
    f4ac:	c5 01       	movw	r24, r10
    f4ae:	c4 d9       	rcall	.-3192   	; 0xe838 <fputc>
            if(c != ret)
    f4b0:	a8 16       	cp	r10, r24
    f4b2:	b9 06       	cpc	r11, r25
    f4b4:	81 f5       	brne	.+96     	; 0xf516 <write+0xc4>
                break;

            ++size;
    f4b6:	89 81       	ldd	r24, Y+1	; 0x01
    f4b8:	9a 81       	ldd	r25, Y+2	; 0x02
    f4ba:	01 96       	adiw	r24, 0x01	; 1
    f4bc:	9a 83       	std	Y+2, r25	; 0x02
    f4be:	89 83       	std	Y+1, r24	; 0x01
    f4c0:	ed cf       	rjmp	.-38     	; 0xf49c <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f4c2:	80 91 bf 1c 	lds	r24, 0x1CBF	; 0x801cbf <__iob>
    f4c6:	90 91 c0 1c 	lds	r25, 0x1CC0	; 0x801cc0 <__iob+0x1>
    f4ca:	c8 16       	cp	r12, r24
    f4cc:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4ce:	41 f1       	breq	.+80     	; 0xf520 <write+0xce>
    f4d0:	c8 01       	movw	r24, r16
    f4d2:	2f de       	rcall	.-930    	; 0xf132 <fileno_to_fatfs>
    if ( fh == NULL )
    f4d4:	00 97       	sbiw	r24, 0x00	; 0
    f4d6:	19 f4       	brne	.+6      	; 0xf4de <write+0x8c>
    {
        errno = EBADF;
    f4d8:	89 e0       	ldi	r24, 0x09	; 9
    f4da:	90 e0       	ldi	r25, 0x00	; 0
    f4dc:	17 c0       	rjmp	.+46     	; 0xf50c <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f4de:	9e 01       	movw	r18, r28
    f4e0:	2f 5f       	subi	r18, 0xFF	; 255
    f4e2:	3f 4f       	sbci	r19, 0xFF	; 255
    f4e4:	a4 01       	movw	r20, r8
    f4e6:	6b 2d       	mov	r22, r11
    f4e8:	7f 2d       	mov	r23, r15
    f4ea:	0e 94 db 5a 	call	0xb5b6	; 0xb5b6 <f_write>
    if(res != FR_OK)
    f4ee:	00 97       	sbiw	r24, 0x00	; 0
    f4f0:	91 f0       	breq	.+36     	; 0xf516 <write+0xc4>
    f4f2:	84 31       	cpi	r24, 0x14	; 20
    f4f4:	91 05       	cpc	r25, r1
    f4f6:	40 f4       	brcc	.+16     	; 0xf508 <write+0xb6>
    f4f8:	fc 01       	movw	r30, r24
    f4fa:	ea 55       	subi	r30, 0x5A	; 90
    f4fc:	f4 4f       	sbci	r31, 0xF4	; 244
    f4fe:	80 81       	ld	r24, Z
    f500:	08 2e       	mov	r0, r24
    f502:	00 0c       	add	r0, r0
    f504:	99 0b       	sbc	r25, r25
    f506:	02 c0       	rjmp	.+4      	; 0xf50c <write+0xba>
    f508:	83 e2       	ldi	r24, 0x23	; 35
    f50a:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f50c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f510:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f514:	05 c0       	rjmp	.+10     	; 0xf520 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f516:	69 81       	ldd	r22, Y+1	; 0x01
    f518:	7a 81       	ldd	r23, Y+2	; 0x02
    f51a:	80 e0       	ldi	r24, 0x00	; 0
    f51c:	90 e0       	ldi	r25, 0x00	; 0
    f51e:	03 c0       	rjmp	.+6      	; 0xf526 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f520:	6f ef       	ldi	r22, 0xFF	; 255
    f522:	7f ef       	ldi	r23, 0xFF	; 255
    f524:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f526:	22 96       	adiw	r28, 0x02	; 2
    f528:	ec e0       	ldi	r30, 0x0C	; 12
    f52a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

0000f52e <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f52e:	0f 93       	push	r16
    f530:	1f 93       	push	r17
    f532:	cf 93       	push	r28
    f534:	df 93       	push	r29
    f536:	ec 01       	movw	r28, r24
    f538:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f53a:	64 9f       	mul	r22, r20
    f53c:	80 01       	movw	r16, r0
    f53e:	65 9f       	mul	r22, r21
    f540:	10 0d       	add	r17, r0
    f542:	74 9f       	mul	r23, r20
    f544:	10 0d       	add	r17, r0
    f546:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f548:	45 da       	rcall	.-2934   	; 0xe9d4 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f54a:	a8 01       	movw	r20, r16
    f54c:	be 01       	movw	r22, r28
    f54e:	81 df       	rcall	.-254    	; 0xf452 <write>

    if(ret < 0)
    f550:	97 fd       	sbrc	r25, 7
    f552:	02 c0       	rjmp	.+4      	; 0xf558 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f554:	cb 01       	movw	r24, r22
    f556:	02 c0       	rjmp	.+4      	; 0xf55c <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f558:	80 e0       	ldi	r24, 0x00	; 0
    f55a:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f55c:	df 91       	pop	r29
    f55e:	cf 91       	pop	r28
    f560:	1f 91       	pop	r17
    f562:	0f 91       	pop	r16
    f564:	08 95       	ret

0000f566 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f566:	0f 93       	push	r16
    f568:	1f 93       	push	r17
    f56a:	cf 93       	push	r28
    f56c:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f56e:	83 30       	cpi	r24, 0x03	; 3
    f570:	91 05       	cpc	r25, r1
    f572:	48 f4       	brcc	.+18     	; 0xf586 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f574:	89 e0       	ldi	r24, 0x09	; 9
    f576:	90 e0       	ldi	r25, 0x00	; 0
    f578:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f57c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f580:	8f ef       	ldi	r24, 0xFF	; 255
    f582:	9f ef       	ldi	r25, 0xFF	; 255
    f584:	20 c0       	rjmp	.+64     	; 0xf5c6 <free_file_descriptor+0x60>
    f586:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f588:	41 da       	rcall	.-2942   	; 0xea0c <fileno_to_stream>
    f58a:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f58c:	89 2b       	or	r24, r25
    f58e:	c1 f3       	breq	.-16     	; 0xf580 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f590:	f8 01       	movw	r30, r16
    f592:	84 85       	ldd	r24, Z+12	; 0x0c
    f594:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f596:	00 97       	sbiw	r24, 0x00	; 0
    f598:	11 f0       	breq	.+4      	; 0xf59e <free_file_descriptor+0x38>
    {
        safefree(fh);
    f59a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f59e:	f8 01       	movw	r30, r16
    f5a0:	80 81       	ld	r24, Z
    f5a2:	91 81       	ldd	r25, Z+1	; 0x01
    f5a4:	00 97       	sbiw	r24, 0x00	; 0
    f5a6:	21 f0       	breq	.+8      	; 0xf5b0 <free_file_descriptor+0x4a>
    f5a8:	23 81       	ldd	r18, Z+3	; 0x03
    f5aa:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f5ac:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
    }

    __iob[fileno]  = NULL;
    f5b0:	fe 01       	movw	r30, r28
    f5b2:	ee 0f       	add	r30, r30
    f5b4:	ff 1f       	adc	r31, r31
    f5b6:	e1 54       	subi	r30, 0x41	; 65
    f5b8:	f3 4e       	sbci	r31, 0xE3	; 227
    f5ba:	11 82       	std	Z+1, r1	; 0x01
    f5bc:	10 82       	st	Z, r1
    safefree(stream);
    f5be:	c8 01       	movw	r24, r16
    f5c0:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
    return(fileno);
    f5c4:	ce 01       	movw	r24, r28
}
    f5c6:	df 91       	pop	r29
    f5c8:	cf 91       	pop	r28
    f5ca:	1f 91       	pop	r17
    f5cc:	0f 91       	pop	r16
    f5ce:	08 95       	ret

0000f5d0 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f5d0:	0f 93       	push	r16
    f5d2:	1f 93       	push	r17
    f5d4:	cf 93       	push	r28
    f5d6:	df 93       	push	r29
    f5d8:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f5da:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f5de:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f5e2:	14 da       	rcall	.-3032   	; 0xea0c <fileno_to_stream>
    if(stream == NULL)
    f5e4:	89 2b       	or	r24, r25
    f5e6:	d9 f0       	breq	.+54     	; 0xf61e <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f5e8:	c8 01       	movw	r24, r16
    f5ea:	a3 dd       	rcall	.-1210   	; 0xf132 <fileno_to_fatfs>
    if(fh == NULL)
    f5ec:	00 97       	sbiw	r24, 0x00	; 0
    f5ee:	b9 f0       	breq	.+46     	; 0xf61e <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f5f0:	0e 94 f2 5c 	call	0xb9e4	; 0xb9e4 <f_close>
    free_file_descriptor(fileno);
    f5f4:	ec 01       	movw	r28, r24
    f5f6:	c8 01       	movw	r24, r16
    f5f8:	b6 df       	rcall	.-148    	; 0xf566 <free_file_descriptor>
    if (res != FR_OK)
    f5fa:	20 97       	sbiw	r28, 0x00	; 0
    f5fc:	99 f0       	breq	.+38     	; 0xf624 <close+0x54>
    f5fe:	c4 31       	cpi	r28, 0x14	; 20
    f600:	d1 05       	cpc	r29, r1
    f602:	38 f4       	brcc	.+14     	; 0xf612 <close+0x42>
    f604:	ca 55       	subi	r28, 0x5A	; 90
    f606:	d4 4f       	sbci	r29, 0xF4	; 244
    f608:	88 81       	ld	r24, Y
    f60a:	08 2e       	mov	r0, r24
    f60c:	00 0c       	add	r0, r0
    f60e:	99 0b       	sbc	r25, r25
    f610:	02 c0       	rjmp	.+4      	; 0xf616 <close+0x46>
    f612:	83 e2       	ldi	r24, 0x23	; 35
    f614:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f616:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f61a:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
        return(-1);
    f61e:	8f ef       	ldi	r24, 0xFF	; 255
    f620:	9f ef       	ldi	r25, 0xFF	; 255
    f622:	02 c0       	rjmp	.+4      	; 0xf628 <close+0x58>
    }
    return(0);
    f624:	80 e0       	ldi	r24, 0x00	; 0
    f626:	90 e0       	ldi	r25, 0x00	; 0
}
    f628:	df 91       	pop	r29
    f62a:	cf 91       	pop	r28
    f62c:	1f 91       	pop	r17
    f62e:	0f 91       	pop	r16
    f630:	08 95       	ret

0000f632 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f632:	d0 d9       	rcall	.-3168   	; 0xe9d4 <fileno>
    if(fn < 0)
    f634:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f636:	02 c0       	rjmp	.+4      	; 0xf63c <fclose+0xa>
    f638:	cb cf       	rjmp	.-106    	; 0xf5d0 <close>
    f63a:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f63c:	8f ef       	ldi	r24, 0xFF	; 255
    f63e:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f640:	08 95       	ret

0000f642 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f642:	0f 93       	push	r16
    f644:	1f 93       	push	r17
    f646:	cf 93       	push	r28
    f648:	df 93       	push	r29
    f64a:	ef eb       	ldi	r30, 0xBF	; 191
    f64c:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f64e:	c0 e0       	ldi	r28, 0x00	; 0
    f650:	d0 e0       	ldi	r29, 0x00	; 0
    f652:	21 96       	adiw	r28, 0x01	; 1
    f654:	c0 31       	cpi	r28, 0x10	; 16
    f656:	d1 05       	cpc	r29, r1
    f658:	49 f0       	breq	.+18     	; 0xf66c <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f65a:	c3 30       	cpi	r28, 0x03	; 3
    f65c:	d1 05       	cpc	r29, r1
    f65e:	24 f0       	brlt	.+8      	; 0xf668 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f660:	82 81       	ldd	r24, Z+2	; 0x02
    f662:	93 81       	ldd	r25, Z+3	; 0x03
    f664:	89 2b       	or	r24, r25
    f666:	59 f0       	breq	.+22     	; 0xf67e <new_file_descriptor+0x3c>
    f668:	32 96       	adiw	r30, 0x02	; 2
    f66a:	f3 cf       	rjmp	.-26     	; 0xf652 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f66c:	87 e1       	ldi	r24, 0x17	; 23
    f66e:	90 e0       	ldi	r25, 0x00	; 0
    f670:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f674:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    return(-1);
    f678:	8f ef       	ldi	r24, 0xFF	; 255
    f67a:	9f ef       	ldi	r25, 0xFF	; 255
    f67c:	22 c0       	rjmp	.+68     	; 0xf6c2 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f67e:	61 e0       	ldi	r22, 0x01	; 1
    f680:	70 e0       	ldi	r23, 0x00	; 0
    f682:	8e e0       	ldi	r24, 0x0E	; 14
    f684:	90 e0       	ldi	r25, 0x00	; 0
    f686:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
    f68a:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f68c:	89 2b       	or	r24, r25
    f68e:	59 f0       	breq	.+22     	; 0xf6a6 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f690:	61 e0       	ldi	r22, 0x01	; 1
    f692:	70 e0       	ldi	r23, 0x00	; 0
    f694:	84 e2       	ldi	r24, 0x24	; 36
    f696:	92 e0       	ldi	r25, 0x02	; 2
    f698:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
            if(fh == NULL)
    f69c:	00 97       	sbiw	r24, 0x00	; 0
    f69e:	31 f4       	brne	.+12     	; 0xf6ac <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f6a0:	c8 01       	movw	r24, r16
    f6a2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
                errno = ENOMEM;
    f6a6:	8c e0       	ldi	r24, 0x0C	; 12
    f6a8:	90 e0       	ldi	r25, 0x00	; 0
    f6aa:	e2 cf       	rjmp	.-60     	; 0xf670 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f6ac:	fe 01       	movw	r30, r28
    f6ae:	ee 0f       	add	r30, r30
    f6b0:	ff 1f       	adc	r31, r31
    f6b2:	e1 54       	subi	r30, 0x41	; 65
    f6b4:	f3 4e       	sbci	r31, 0xE3	; 227
    f6b6:	11 83       	std	Z+1, r17	; 0x01
    f6b8:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f6ba:	f8 01       	movw	r30, r16
    f6bc:	95 87       	std	Z+13, r25	; 0x0d
    f6be:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f6c0:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f6c2:	df 91       	pop	r29
    f6c4:	cf 91       	pop	r28
    f6c6:	1f 91       	pop	r17
    f6c8:	0f 91       	pop	r16
    f6ca:	08 95       	ret

0000f6cc <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f6cc:	a0 e0       	ldi	r26, 0x00	; 0
    f6ce:	b0 e0       	ldi	r27, 0x00	; 0
    f6d0:	ec e6       	ldi	r30, 0x6C	; 108
    f6d2:	fb e7       	ldi	r31, 0x7B	; 123
    f6d4:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__prologue_saves__+0x8>
    f6d8:	5c 01       	movw	r10, r24
    f6da:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f6dc:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <errno+0x1>
    f6e0:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f6e4:	7b 01       	movw	r14, r22
    f6e6:	83 e0       	ldi	r24, 0x03	; 3
    f6e8:	e8 22       	and	r14, r24
    f6ea:	ff 24       	eor	r15, r15
    f6ec:	e2 e0       	ldi	r30, 0x02	; 2
    f6ee:	ee 16       	cp	r14, r30
    f6f0:	f1 04       	cpc	r15, r1
    f6f2:	31 f0       	breq	.+12     	; 0xf700 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f6f4:	e1 14       	cp	r14, r1
    f6f6:	f1 04       	cpc	r15, r1
    f6f8:	31 f0       	breq	.+12     	; 0xf706 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f6fa:	02 e0       	ldi	r16, 0x02	; 2
    f6fc:	10 e0       	ldi	r17, 0x00	; 0
    f6fe:	05 c0       	rjmp	.+10     	; 0xf70a <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f700:	03 e0       	ldi	r16, 0x03	; 3
    f702:	10 e0       	ldi	r17, 0x00	; 0
    f704:	02 c0       	rjmp	.+4      	; 0xf70a <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f706:	01 e0       	ldi	r16, 0x01	; 1
    f708:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f70a:	c6 fe       	sbrs	r12, 6
    f70c:	05 c0       	rjmp	.+10     	; 0xf718 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f70e:	d1 fe       	sbrs	r13, 1
    f710:	02 c0       	rjmp	.+4      	; 0xf716 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f712:	08 60       	ori	r16, 0x08	; 8
    f714:	01 c0       	rjmp	.+2      	; 0xf718 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f716:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f718:	94 df       	rcall	.-216    	; 0xf642 <new_file_descriptor>
    f71a:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f71c:	77 d9       	rcall	.-3346   	; 0xea0c <fileno_to_stream>
    f71e:	ec 01       	movw	r28, r24
    f720:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f722:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f724:	09 f4       	brne	.+2      	; 0xf728 <open+0x5c>
    f726:	48 c0       	rjmp	.+144    	; 0xf7b8 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f728:	04 dd       	rcall	.-1528   	; 0xf132 <fileno_to_fatfs>
    f72a:	4c 01       	movw	r8, r24
    f72c:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f72e:	59 f4       	brne	.+22     	; 0xf746 <open+0x7a>
    {
        free_file_descriptor(fileno);
    f730:	c3 01       	movw	r24, r6
    f732:	19 df       	rcall	.-462    	; 0xf566 <free_file_descriptor>
    f734:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f736:	90 e0       	ldi	r25, 0x00	; 0
    f738:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    f73c:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f740:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f742:	9f ef       	ldi	r25, 0xFF	; 255
    f744:	5d c0       	rjmp	.+186    	; 0xf800 <open+0x134>
    f746:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f748:	b5 01       	movw	r22, r10
    f74a:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <f_open>
    f74e:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f750:	91 f0       	breq	.+36     	; 0xf776 <open+0xaa>
    f752:	84 31       	cpi	r24, 0x14	; 20
    f754:	91 05       	cpc	r25, r1
    f756:	40 f4       	brcc	.+16     	; 0xf768 <open+0x9c>
    f758:	fc 01       	movw	r30, r24
    f75a:	ea 55       	subi	r30, 0x5A	; 90
    f75c:	f4 4f       	sbci	r31, 0xF4	; 244
    f75e:	80 81       	ld	r24, Z
    f760:	08 2e       	mov	r0, r24
    f762:	00 0c       	add	r0, r0
    f764:	99 0b       	sbc	r25, r25
    f766:	02 c0       	rjmp	.+4      	; 0xf76c <open+0xa0>
    f768:	83 e2       	ldi	r24, 0x23	; 35
    f76a:	90 e0       	ldi	r25, 0x00	; 0
    f76c:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f770:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f774:	20 c0       	rjmp	.+64     	; 0xf7b6 <open+0xea>
    f776:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f778:	21 c0       	rjmp	.+66     	; 0xf7bc <open+0xf0>
    f77a:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f77c:	42 85       	ldd	r20, Z+10	; 0x0a
    f77e:	53 85       	ldd	r21, Z+11	; 0x0b
    f780:	64 85       	ldd	r22, Z+12	; 0x0c
    f782:	75 85       	ldd	r23, Z+13	; 0x0d
    f784:	c4 01       	movw	r24, r8
    f786:	0e 94 9c 5e 	call	0xbd38	; 0xbd38 <f_lseek>
    f78a:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f78c:	b9 f0       	breq	.+46     	; 0xf7bc <open+0xf0>
    f78e:	84 31       	cpi	r24, 0x14	; 20
    f790:	91 05       	cpc	r25, r1
    f792:	40 f4       	brcc	.+16     	; 0xf7a4 <open+0xd8>
    f794:	fc 01       	movw	r30, r24
    f796:	ea 55       	subi	r30, 0x5A	; 90
    f798:	f4 4f       	sbci	r31, 0xF4	; 244
    f79a:	80 81       	ld	r24, Z
    f79c:	08 2e       	mov	r0, r24
    f79e:	00 0c       	add	r0, r0
    f7a0:	99 0b       	sbc	r25, r25
    f7a2:	02 c0       	rjmp	.+4      	; 0xf7a8 <open+0xdc>
    f7a4:	83 e2       	ldi	r24, 0x23	; 35
    f7a6:	90 e0       	ldi	r25, 0x00	; 0
    f7a8:	90 93 be 1c 	sts	0x1CBE, r25	; 0x801cbe <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f7ac:	80 93 bd 1c 	sts	0x1CBD, r24	; 0x801cbd <errno>
    f7b0:	c4 01       	movw	r24, r8
            f_close(fh);
    f7b2:	0e 94 f2 5c 	call	0xb9e4	; 0xb9e4 <f_close>
            free_file_descriptor(fileno);
    f7b6:	c3 01       	movw	r24, r6
    f7b8:	d6 de       	rcall	.-596    	; 0xf566 <free_file_descriptor>
    f7ba:	c2 cf       	rjmp	.-124    	; 0xf740 <open+0x74>
    f7bc:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f7be:	ef 16       	cp	r14, r31
    f7c0:	f1 04       	cpc	r15, r1
    f7c2:	51 f4       	brne	.+20     	; 0xf7d8 <open+0x10c>
    f7c4:	8b e7       	ldi	r24, 0x7B	; 123
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f7c6:	93 e7       	ldi	r25, 0x73	; 115
    f7c8:	99 87       	std	Y+9, r25	; 0x09
    f7ca:	88 87       	std	Y+8, r24	; 0x08
    f7cc:	88 ef       	ldi	r24, 0xF8	; 248
        stream->get = fatfs_getc;
    f7ce:	92 e7       	ldi	r25, 0x72	; 114
    f7d0:	9b 87       	std	Y+11, r25	; 0x0b
    f7d2:	8a 87       	std	Y+10, r24	; 0x0a
    f7d4:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f7d6:	12 c0       	rjmp	.+36     	; 0xf7fc <open+0x130>
    f7d8:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f7da:	f1 04       	cpc	r15, r1
    f7dc:	41 f4       	brne	.+16     	; 0xf7ee <open+0x122>
    f7de:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f7e0:	18 86       	std	Y+8, r1	; 0x08
    f7e2:	88 ef       	ldi	r24, 0xF8	; 248
        stream->get = fatfs_getc;
    f7e4:	92 e7       	ldi	r25, 0x72	; 114
    f7e6:	9b 87       	std	Y+11, r25	; 0x0b
    f7e8:	8a 87       	std	Y+10, r24	; 0x0a
    f7ea:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f7ec:	07 c0       	rjmp	.+14     	; 0xf7fc <open+0x130>
    f7ee:	8b e7       	ldi	r24, 0x7B	; 123
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f7f0:	93 e7       	ldi	r25, 0x73	; 115
    f7f2:	99 87       	std	Y+9, r25	; 0x09
    f7f4:	88 87       	std	Y+8, r24	; 0x08
    f7f6:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f7f8:	1a 86       	std	Y+10, r1	; 0x0a
    f7fa:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f7fc:	8b 83       	std	Y+3, r24	; 0x03
    f7fe:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f800:	cd b7       	in	r28, 0x3d	; 61
}
    f802:	de b7       	in	r29, 0x3e	; 62
    f804:	ee e0       	ldi	r30, 0x0E	; 14
    f806:	0c 94 0d e3 	jmp	0x1c61a	; 0x1c61a <__epilogue_restores__+0x8>

0000f80a <posix_fopen_modes_to_open>:
    f80a:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f80c:	df 93       	push	r29
    f80e:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f810:	62 e4       	ldi	r22, 0x42	; 66
    f812:	73 e0       	ldi	r23, 0x03	; 3
    f814:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f818:	00 97       	sbiw	r24, 0x00	; 0
    f81a:	09 f4       	brne	.+2      	; 0xf81e <posix_fopen_modes_to_open+0x14>
    f81c:	5d c0       	rjmp	.+186    	; 0xf8d8 <posix_fopen_modes_to_open+0xce>
    f81e:	6e ef       	ldi	r22, 0xFE	; 254
    f820:	78 e0       	ldi	r23, 0x08	; 8
    f822:	ce 01       	movw	r24, r28
    f824:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f828:	00 97       	sbiw	r24, 0x00	; 0
    f82a:	09 f4       	brne	.+2      	; 0xf82e <posix_fopen_modes_to_open+0x24>
    f82c:	55 c0       	rjmp	.+170    	; 0xf8d8 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f82e:	61 e0       	ldi	r22, 0x01	; 1
    f830:	79 e0       	ldi	r23, 0x09	; 9
    f832:	ce 01       	movw	r24, r28
    f834:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f838:	89 2b       	or	r24, r25
    f83a:	09 f4       	brne	.+2      	; 0xf83e <posix_fopen_modes_to_open+0x34>
    f83c:	42 c0       	rjmp	.+132    	; 0xf8c2 <posix_fopen_modes_to_open+0xb8>
    f83e:	64 e0       	ldi	r22, 0x04	; 4
    f840:	79 e0       	ldi	r23, 0x09	; 9
    f842:	ce 01       	movw	r24, r28
    f844:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f848:	89 2b       	or	r24, r25
    f84a:	d9 f1       	breq	.+118    	; 0xf8c2 <posix_fopen_modes_to_open+0xb8>
    f84c:	68 e0       	ldi	r22, 0x08	; 8
    f84e:	79 e0       	ldi	r23, 0x09	; 9
    f850:	ce 01       	movw	r24, r28
    f852:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f856:	89 2b       	or	r24, r25
    f858:	a1 f1       	breq	.+104    	; 0xf8c2 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f85a:	6d eb       	ldi	r22, 0xBD	; 189
    f85c:	7a e0       	ldi	r23, 0x0A	; 10
    f85e:	ce 01       	movw	r24, r28
    f860:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f864:	89 2b       	or	r24, r25
    f866:	81 f1       	breq	.+96     	; 0xf8c8 <posix_fopen_modes_to_open+0xbe>
    f868:	6c e0       	ldi	r22, 0x0C	; 12
    f86a:	79 e0       	ldi	r23, 0x09	; 9
    f86c:	ce 01       	movw	r24, r28
    f86e:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f872:	89 2b       	or	r24, r25
    f874:	49 f1       	breq	.+82     	; 0xf8c8 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f876:	6f e0       	ldi	r22, 0x0F	; 15
    f878:	79 e0       	ldi	r23, 0x09	; 9
    f87a:	ce 01       	movw	r24, r28
    f87c:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f880:	89 2b       	or	r24, r25
    f882:	29 f1       	breq	.+74     	; 0xf8ce <posix_fopen_modes_to_open+0xc4>
    f884:	62 e1       	ldi	r22, 0x12	; 18
    f886:	79 e0       	ldi	r23, 0x09	; 9
    f888:	ce 01       	movw	r24, r28
    f88a:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f88e:	89 2b       	or	r24, r25
    f890:	f1 f0       	breq	.+60     	; 0xf8ce <posix_fopen_modes_to_open+0xc4>
    f892:	66 e1       	ldi	r22, 0x16	; 22
    f894:	79 e0       	ldi	r23, 0x09	; 9
    f896:	ce 01       	movw	r24, r28
    f898:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f89c:	89 2b       	or	r24, r25
    f89e:	b9 f0       	breq	.+46     	; 0xf8ce <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    f8a0:	61 e2       	ldi	r22, 0x21	; 33
    f8a2:	73 e1       	ldi	r23, 0x13	; 19
    f8a4:	ce 01       	movw	r24, r28
    f8a6:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f8aa:	89 2b       	or	r24, r25
    f8ac:	99 f0       	breq	.+38     	; 0xf8d4 <posix_fopen_modes_to_open+0xca>
    f8ae:	6a e1       	ldi	r22, 0x1A	; 26
    f8b0:	79 e0       	ldi	r23, 0x09	; 9
    f8b2:	ce 01       	movw	r24, r28
    f8b4:	0e 94 cb 2f 	call	0x5f96	; 0x5f96 <strcmp>
    f8b8:	89 2b       	or	r24, r25
    f8ba:	61 f0       	breq	.+24     	; 0xf8d4 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    f8bc:	8f ef       	ldi	r24, 0xFF	; 255
    f8be:	9f ef       	ldi	r25, 0xFF	; 255
    f8c0:	0b c0       	rjmp	.+22     	; 0xf8d8 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    f8c2:	82 e0       	ldi	r24, 0x02	; 2
    f8c4:	92 e0       	ldi	r25, 0x02	; 2
    f8c6:	08 c0       	rjmp	.+16     	; 0xf8d8 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    f8c8:	81 e4       	ldi	r24, 0x41	; 65
    f8ca:	92 e0       	ldi	r25, 0x02	; 2
    f8cc:	05 c0       	rjmp	.+10     	; 0xf8d8 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    f8ce:	82 e4       	ldi	r24, 0x42	; 66
    f8d0:	92 e0       	ldi	r25, 0x02	; 2
    f8d2:	02 c0       	rjmp	.+4      	; 0xf8d8 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    f8d4:	81 e4       	ldi	r24, 0x41	; 65
    f8d6:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    f8d8:	df 91       	pop	r29
    f8da:	cf 91       	pop	r28
    f8dc:	08 95       	ret

0000f8de <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    f8de:	cf 93       	push	r28
    f8e0:	df 93       	push	r29
    f8e2:	ec 01       	movw	r28, r24
    f8e4:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    f8e6:	91 df       	rcall	.-222    	; 0xf80a <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    f8e8:	bc 01       	movw	r22, r24
    f8ea:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    f8ec:	ef de       	rcall	.-546    	; 0xf6cc <open>
    f8ee:	8e d8       	rcall	.-3812   	; 0xea0c <fileno_to_stream>
}
    f8f0:	df 91       	pop	r29
    f8f2:	cf 91       	pop	r28
    f8f4:	08 95       	ret

0000f8f6 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    f8f6:	a8 e0       	ldi	r26, 0x08	; 8
    f8f8:	b0 e0       	ldi	r27, 0x00	; 0
    f8fa:	e1 e8       	ldi	r30, 0x81	; 129
    f8fc:	fc e7       	ldi	r31, 0x7C	; 124
    f8fe:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    f902:	8e e6       	ldi	r24, 0x6E	; 110
    f904:	94 e7       	ldi	r25, 0x74	; 116
    f906:	9a 83       	std	Y+2, r25	; 0x02
    f908:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    f90a:	18 86       	std	Y+8, r1	; 0x08
    f90c:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    f90e:	8d 85       	ldd	r24, Y+13	; 0x0d
    f910:	9e 85       	ldd	r25, Y+14	; 0x0e
    f912:	9c 83       	std	Y+4, r25	; 0x04
    f914:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    f916:	4f 85       	ldd	r20, Y+15	; 0x0f
    f918:	58 89       	ldd	r21, Y+16	; 0x10
    f91a:	60 e8       	ldi	r22, 0x80	; 128
    f91c:	9e 01       	movw	r18, r28
    f91e:	2f 5e       	subi	r18, 0xEF	; 239
    f920:	3f 4f       	sbci	r19, 0xFF	; 255
    f922:	ce 01       	movw	r24, r28
    f924:	01 96       	adiw	r24, 0x01	; 1
    f926:	0e 94 8b 40 	call	0x8116	; 0x8116 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    f92a:	8f 81       	ldd	r24, Y+7	; 0x07
    f92c:	98 85       	ldd	r25, Y+8	; 0x08
    f92e:	28 96       	adiw	r28, 0x08	; 8
    f930:	e2 e0       	ldi	r30, 0x02	; 2
    f932:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000f936 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    f936:	cf 93       	push	r28
    f938:	df 93       	push	r29
    f93a:	00 d0       	rcall	.+0      	; 0xf93c <posix_help+0x6>
    f93c:	1f 92       	push	r1
    f93e:	ec 01       	movw	r28, r24
    f940:	84 e7       	ldi	r24, 0x74	; 116
    f942:	9e e0       	ldi	r25, 0x0E	; 14
    f944:	a0 e0       	ldi	r26, 0x00	; 0
    f946:	ed b7       	in	r30, 0x3d	; 61
    f948:	fe b7       	in	r31, 0x3e	; 62
    f94a:	81 83       	std	Z+1, r24	; 0x01
    f94c:	92 83       	std	Z+2, r25	; 0x02
    f94e:	a3 83       	std	Z+3, r26	; 0x03
    f950:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    f954:	cd 2b       	or	r28, r29
    f956:	51 f0       	breq	.+20     	; 0xf96c <posix_help+0x36>
    f958:	8e ea       	ldi	r24, 0xAE	; 174
    f95a:	9d e0       	ldi	r25, 0x0D	; 13
    f95c:	a0 e0       	ldi	r26, 0x00	; 0
    f95e:	ed b7       	in	r30, 0x3d	; 61
    f960:	fe b7       	in	r31, 0x3e	; 62
    f962:	81 83       	std	Z+1, r24	; 0x01
    f964:	92 83       	std	Z+2, r25	; 0x02
    f966:	a3 83       	std	Z+3, r26	; 0x03
    f968:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    f96c:	cd b7       	in	r28, 0x3d	; 61
    f96e:	de b7       	in	r29, 0x3e	; 62
    f970:	23 96       	adiw	r28, 0x03	; 3
    f972:	e2 e0       	ldi	r30, 0x02	; 2
    f974:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000f978 <copy>:
    f978:	4f 92       	push	r4
    f97a:	5f 92       	push	r5
    f97c:	6f 92       	push	r6
    f97e:	8f 92       	push	r8
    f980:	9f 92       	push	r9
    f982:	af 92       	push	r10
    f984:	bf 92       	push	r11
    f986:	cf 92       	push	r12
    f988:	df 92       	push	r13
    f98a:	ef 92       	push	r14
    f98c:	ff 92       	push	r15
    f98e:	0f 93       	push	r16
    f990:	1f 93       	push	r17
    f992:	cf 93       	push	r28
    f994:	df 93       	push	r29
    f996:	ad b7       	in	r26, 0x3d	; 61
    f998:	be b7       	in	r27, 0x3e	; 62
    f99a:	17 97       	sbiw	r26, 0x07	; 7
    f99c:	0f b6       	in	r0, 0x3f	; 63
    f99e:	f8 94       	cli
    f9a0:	be bf       	out	0x3e, r27	; 62
    f9a2:	0f be       	out	0x3f, r0	; 63
    f9a4:	ad bf       	out	0x3d, r26	; 61
    f9a6:	8c 01       	movw	r16, r24
    f9a8:	eb 01       	movw	r28, r22
    f9aa:	ed b7       	in	r30, 0x3d	; 61
    f9ac:	fe b7       	in	r31, 0x3e	; 62
    f9ae:	95 83       	std	Z+5, r25	; 0x05
    f9b0:	84 83       	std	Z+4, r24	; 0x04
    f9b2:	8b e0       	ldi	r24, 0x0B	; 11
    f9b4:	9d e0       	ldi	r25, 0x0D	; 13
    f9b6:	a0 e0       	ldi	r26, 0x00	; 0
    f9b8:	81 83       	std	Z+1, r24	; 0x01
    f9ba:	92 83       	std	Z+2, r25	; 0x02
    f9bc:	a3 83       	std	Z+3, r26	; 0x03
    f9be:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    f9c2:	6e ef       	ldi	r22, 0xFE	; 254
    f9c4:	78 e0       	ldi	r23, 0x08	; 8
    f9c6:	c8 01       	movw	r24, r16
    f9c8:	8a df       	rcall	.-236    	; 0xf8de <fopen>
    f9ca:	7c 01       	movw	r14, r24
    f9cc:	ed b7       	in	r30, 0x3d	; 61
    f9ce:	fe b7       	in	r31, 0x3e	; 62
    f9d0:	89 2b       	or	r24, r25
    f9d2:	59 f4       	brne	.+22     	; 0xf9ea <copy+0x72>
    f9d4:	15 83       	std	Z+5, r17	; 0x05
    f9d6:	04 83       	std	Z+4, r16	; 0x04
    f9d8:	8b ef       	ldi	r24, 0xFB	; 251
    f9da:	9c e0       	ldi	r25, 0x0C	; 12
    f9dc:	a0 e0       	ldi	r26, 0x00	; 0
    f9de:	81 83       	std	Z+1, r24	; 0x01
    f9e0:	92 83       	std	Z+2, r25	; 0x02
    f9e2:	a3 83       	std	Z+3, r26	; 0x03
    f9e4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    f9e8:	20 c0       	rjmp	.+64     	; 0xfa2a <copy+0xb2>
    f9ea:	d5 83       	std	Z+5, r29	; 0x05
    f9ec:	c4 83       	std	Z+4, r28	; 0x04
    f9ee:	8e ee       	ldi	r24, 0xEE	; 238
    f9f0:	9c e0       	ldi	r25, 0x0C	; 12
    f9f2:	a0 e0       	ldi	r26, 0x00	; 0
    f9f4:	81 83       	std	Z+1, r24	; 0x01
    f9f6:	92 83       	std	Z+2, r25	; 0x02
    f9f8:	a3 83       	std	Z+3, r26	; 0x03
    f9fa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    f9fe:	6c e0       	ldi	r22, 0x0C	; 12
    fa00:	79 e0       	ldi	r23, 0x09	; 9
    fa02:	ce 01       	movw	r24, r28
    fa04:	6c df       	rcall	.-296    	; 0xf8de <fopen>
    fa06:	8c 01       	movw	r16, r24
    fa08:	89 2b       	or	r24, r25
    fa0a:	a1 f4       	brne	.+40     	; 0xfa34 <copy+0xbc>
    fa0c:	ed b7       	in	r30, 0x3d	; 61
    fa0e:	fe b7       	in	r31, 0x3e	; 62
    fa10:	d5 83       	std	Z+5, r29	; 0x05
    fa12:	c4 83       	std	Z+4, r28	; 0x04
    fa14:	8e ed       	ldi	r24, 0xDE	; 222
    fa16:	9c e0       	ldi	r25, 0x0C	; 12
    fa18:	a0 e0       	ldi	r26, 0x00	; 0
    fa1a:	81 83       	std	Z+1, r24	; 0x01
    fa1c:	92 83       	std	Z+2, r25	; 0x02
    fa1e:	a3 83       	std	Z+3, r26	; 0x03
    fa20:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    fa24:	80 e0       	ldi	r24, 0x00	; 0
    fa26:	90 e0       	ldi	r25, 0x00	; 0
    fa28:	04 de       	rcall	.-1016   	; 0xf632 <fclose>
    fa2a:	6f ef       	ldi	r22, 0xFF	; 255
    fa2c:	7f ef       	ldi	r23, 0xFF	; 255
    fa2e:	8f ef       	ldi	r24, 0xFF	; 255
    fa30:	9f ef       	ldi	r25, 0xFF	; 255
    fa32:	68 c0       	rjmp	.+208    	; 0xfb04 <copy+0x18c>
    fa34:	61 e0       	ldi	r22, 0x01	; 1
    fa36:	70 e0       	ldi	r23, 0x00	; 0
    fa38:	80 e0       	ldi	r24, 0x00	; 0
    fa3a:	92 e0       	ldi	r25, 0x02	; 2
    fa3c:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
    fa40:	6c 01       	movw	r12, r24
    fa42:	89 2b       	or	r24, r25
    fa44:	21 f4       	brne	.+8      	; 0xfa4e <copy+0xd6>
    fa46:	c7 01       	movw	r24, r14
    fa48:	f4 dd       	rcall	.-1048   	; 0xf632 <fclose>
    fa4a:	c8 01       	movw	r24, r16
    fa4c:	ed cf       	rjmp	.-38     	; 0xfa28 <copy+0xb0>
    fa4e:	81 ed       	ldi	r24, 0xD1	; 209
    fa50:	9c e0       	ldi	r25, 0x0C	; 12
    fa52:	a0 e0       	ldi	r26, 0x00	; 0
    fa54:	ed b7       	in	r30, 0x3d	; 61
    fa56:	fe b7       	in	r31, 0x3e	; 62
    fa58:	81 83       	std	Z+1, r24	; 0x01
    fa5a:	92 83       	std	Z+2, r25	; 0x02
    fa5c:	a3 83       	std	Z+3, r26	; 0x03
    fa5e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    fa62:	81 2c       	mov	r8, r1
    fa64:	91 2c       	mov	r9, r1
    fa66:	54 01       	movw	r10, r8
    fa68:	85 eb       	ldi	r24, 0xB5	; 181
    fa6a:	9c e0       	ldi	r25, 0x0C	; 12
    fa6c:	2c 01       	movw	r4, r24
    fa6e:	61 2c       	mov	r6, r1
    fa70:	97 01       	movw	r18, r14
    fa72:	40 e0       	ldi	r20, 0x00	; 0
    fa74:	52 e0       	ldi	r21, 0x02	; 2
    fa76:	61 e0       	ldi	r22, 0x01	; 1
    fa78:	70 e0       	ldi	r23, 0x00	; 0
    fa7a:	c6 01       	movw	r24, r12
    fa7c:	86 dc       	rcall	.-1780   	; 0xf38a <fread>
    fa7e:	ec 01       	movw	r28, r24
    fa80:	18 16       	cp	r1, r24
    fa82:	19 06       	cpc	r1, r25
    fa84:	44 f5       	brge	.+80     	; 0xfad6 <copy+0x15e>
    fa86:	98 01       	movw	r18, r16
    fa88:	ae 01       	movw	r20, r28
    fa8a:	61 e0       	ldi	r22, 0x01	; 1
    fa8c:	70 e0       	ldi	r23, 0x00	; 0
    fa8e:	c6 01       	movw	r24, r12
    fa90:	4e dd       	rcall	.-1380   	; 0xf52e <fwrite>
    fa92:	8c 17       	cp	r24, r28
    fa94:	9d 07       	cpc	r25, r29
    fa96:	5c f4       	brge	.+22     	; 0xfaae <copy+0x136>
    fa98:	84 ec       	ldi	r24, 0xC4	; 196
    fa9a:	9c e0       	ldi	r25, 0x0C	; 12
    fa9c:	a0 e0       	ldi	r26, 0x00	; 0
    fa9e:	ed b7       	in	r30, 0x3d	; 61
    faa0:	fe b7       	in	r31, 0x3e	; 62
    faa2:	81 83       	std	Z+1, r24	; 0x01
    faa4:	92 83       	std	Z+2, r25	; 0x02
    faa6:	a3 83       	std	Z+3, r26	; 0x03
    faa8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    faac:	14 c0       	rjmp	.+40     	; 0xfad6 <copy+0x15e>
    faae:	ce 01       	movw	r24, r28
    fab0:	dd 0f       	add	r29, r29
    fab2:	aa 0b       	sbc	r26, r26
    fab4:	bb 0b       	sbc	r27, r27
    fab6:	88 0e       	add	r8, r24
    fab8:	99 1e       	adc	r9, r25
    faba:	aa 1e       	adc	r10, r26
    fabc:	bb 1e       	adc	r11, r27
    fabe:	ed b7       	in	r30, 0x3d	; 61
    fac0:	fe b7       	in	r31, 0x3e	; 62
    fac2:	84 82       	std	Z+4, r8	; 0x04
    fac4:	95 82       	std	Z+5, r9	; 0x05
    fac6:	a6 82       	std	Z+6, r10	; 0x06
    fac8:	b7 82       	std	Z+7, r11	; 0x07
    faca:	41 82       	std	Z+1, r4	; 0x01
    facc:	52 82       	std	Z+2, r5	; 0x02
    face:	63 82       	std	Z+3, r6	; 0x03
    fad0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    fad4:	cd cf       	rjmp	.-102    	; 0xfa70 <copy+0xf8>
    fad6:	ed b7       	in	r30, 0x3d	; 61
    fad8:	fe b7       	in	r31, 0x3e	; 62
    fada:	84 82       	std	Z+4, r8	; 0x04
    fadc:	95 82       	std	Z+5, r9	; 0x05
    fade:	a6 82       	std	Z+6, r10	; 0x06
    fae0:	b7 82       	std	Z+7, r11	; 0x07
    fae2:	82 ea       	ldi	r24, 0xA2	; 162
    fae4:	9c e0       	ldi	r25, 0x0C	; 12
    fae6:	a0 e0       	ldi	r26, 0x00	; 0
    fae8:	81 83       	std	Z+1, r24	; 0x01
    faea:	92 83       	std	Z+2, r25	; 0x02
    faec:	a3 83       	std	Z+3, r26	; 0x03
    faee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    faf2:	c6 01       	movw	r24, r12
    faf4:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
    faf8:	c7 01       	movw	r24, r14
    fafa:	9b dd       	rcall	.-1226   	; 0xf632 <fclose>
    fafc:	c8 01       	movw	r24, r16
    fafe:	99 dd       	rcall	.-1230   	; 0xf632 <fclose>
    fb00:	b4 01       	movw	r22, r8
    fb02:	c5 01       	movw	r24, r10
    fb04:	ad b7       	in	r26, 0x3d	; 61
    fb06:	be b7       	in	r27, 0x3e	; 62
    fb08:	17 96       	adiw	r26, 0x07	; 7
    fb0a:	0f b6       	in	r0, 0x3f	; 63
    fb0c:	f8 94       	cli
    fb0e:	be bf       	out	0x3e, r27	; 62
    fb10:	0f be       	out	0x3f, r0	; 63
    fb12:	ad bf       	out	0x3d, r26	; 61
    fb14:	df 91       	pop	r29
    fb16:	cf 91       	pop	r28
    fb18:	1f 91       	pop	r17
    fb1a:	0f 91       	pop	r16
    fb1c:	ff 90       	pop	r15
    fb1e:	ef 90       	pop	r14
    fb20:	df 90       	pop	r13
    fb22:	cf 90       	pop	r12
    fb24:	bf 90       	pop	r11
    fb26:	af 90       	pop	r10
    fb28:	9f 90       	pop	r9
    fb2a:	8f 90       	pop	r8
    fb2c:	6f 90       	pop	r6
    fb2e:	5f 90       	pop	r5
    fb30:	4f 90       	pop	r4
    fb32:	08 95       	ret

0000fb34 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fb34:	cf 93       	push	r28
    fb36:	df 93       	push	r29
    fb38:	00 d0       	rcall	.+0      	; 0xfb3a <testpage+0x6>
    fb3a:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fb3c:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fb40:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fb44:	82 17       	cp	r24, r18
    fb46:	93 07       	cpc	r25, r19
    fb48:	3c f1       	brlt	.+78     	; 0xfb98 <testpage+0x64>
    {
        printf("More..");
    fb4a:	8b e9       	ldi	r24, 0x9B	; 155
    fb4c:	9c e0       	ldi	r25, 0x0C	; 12
    fb4e:	a0 e0       	ldi	r26, 0x00	; 0
    fb50:	ed b7       	in	r30, 0x3d	; 61
    fb52:	fe b7       	in	r31, 0x3e	; 62
    fb54:	81 83       	std	Z+1, r24	; 0x01
    fb56:	92 83       	std	Z+2, r25	; 0x02
    fb58:	a3 83       	std	Z+3, r26	; 0x03
    fb5a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fb5e:	0e 94 7b 74 	call	0xe8f6	; 0xe8f6 <getchar>
    fb62:	ec 01       	movw	r28, r24
        printf("\r");
    fb64:	89 e9       	ldi	r24, 0x99	; 153
    fb66:	9c e0       	ldi	r25, 0x0C	; 12
    fb68:	a0 e0       	ldi	r26, 0x00	; 0
    fb6a:	ed b7       	in	r30, 0x3d	; 61
    fb6c:	fe b7       	in	r31, 0x3e	; 62
    fb6e:	81 83       	std	Z+1, r24	; 0x01
    fb70:	92 83       	std	Z+2, r25	; 0x02
    fb72:	a3 83       	std	Z+3, r26	; 0x03
    fb74:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        if(c == 'q')
    fb78:	c1 37       	cpi	r28, 0x71	; 113
    fb7a:	d1 05       	cpc	r29, r1
    fb7c:	41 f0       	breq	.+16     	; 0xfb8e <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fb7e:	2a 97       	sbiw	r28, 0x0a	; 10
    fb80:	49 f4       	brne	.+18     	; 0xfb94 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fb82:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fb86:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fb8a:	01 97       	sbiw	r24, 0x01	; 1
    fb8c:	05 c0       	rjmp	.+10     	; 0xfb98 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fb8e:	8f ef       	ldi	r24, 0xFF	; 255
    fb90:	9f ef       	ldi	r25, 0xFF	; 255
    fb92:	02 c0       	rjmp	.+4      	; 0xfb98 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fb94:	80 e0       	ldi	r24, 0x00	; 0
    fb96:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fb98:	cd b7       	in	r28, 0x3d	; 61
    fb9a:	de b7       	in	r29, 0x3e	; 62
    fb9c:	23 96       	adiw	r28, 0x03	; 3
    fb9e:	e2 e0       	ldi	r30, 0x02	; 2
    fba0:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0000fba4 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    fba4:	a7 e0       	ldi	r26, 0x07	; 7
    fba6:	b1 e0       	ldi	r27, 0x01	; 1
    fba8:	e8 ed       	ldi	r30, 0xD8	; 216
    fbaa:	fd e7       	ldi	r31, 0x7D	; 125
    fbac:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
    fbb0:	8c 01       	movw	r16, r24
    fbb2:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fbb4:	6e ef       	ldi	r22, 0xFE	; 254
    fbb6:	78 e0       	ldi	r23, 0x08	; 8
    fbb8:	92 de       	rcall	.-732    	; 0xf8de <fopen>
    fbba:	7c 01       	movw	r14, r24
    if (!fp)
    fbbc:	89 2b       	or	r24, r25
    fbbe:	41 f0       	breq	.+16     	; 0xfbd0 <cat+0x2c>
    fbc0:	c1 2c       	mov	r12, r1
    fbc2:	d1 2c       	mov	r13, r1
    fbc4:	a1 2c       	mov	r10, r1
    fbc6:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fbc8:	8e 01       	movw	r16, r28
    fbca:	08 5f       	subi	r16, 0xF8	; 248
    fbcc:	1f 4f       	sbci	r17, 0xFF	; 255
    fbce:	23 c0       	rjmp	.+70     	; 0xfc16 <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fbd0:	ed b7       	in	r30, 0x3d	; 61
    fbd2:	fe b7       	in	r31, 0x3e	; 62
    fbd4:	15 83       	std	Z+5, r17	; 0x05
    fbd6:	04 83       	std	Z+4, r16	; 0x04
    fbd8:	84 e2       	ldi	r24, 0x24	; 36
    fbda:	9d e0       	ldi	r25, 0x0D	; 13
    fbdc:	a0 e0       	ldi	r26, 0x00	; 0
    fbde:	81 83       	std	Z+1, r24	; 0x01
    fbe0:	92 83       	std	Z+2, r25	; 0x02
    fbe2:	a3 83       	std	Z+3, r26	; 0x03
    fbe4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(-1);
    fbe8:	cc 24       	eor	r12, r12
    fbea:	ca 94       	dec	r12
    fbec:	dc 2c       	mov	r13, r12
    fbee:	76 01       	movw	r14, r12
    fbf0:	3f c0       	rjmp	.+126    	; 0xfc70 <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fbf2:	c8 01       	movw	r24, r16
    fbf4:	0e 94 4f 30 	call	0x609e	; 0x609e <trim_tail>
        size += strlen(line);
    fbf8:	f8 01       	movw	r30, r16
    fbfa:	01 90       	ld	r0, Z+
    fbfc:	00 20       	and	r0, r0
    fbfe:	e9 f7       	brne	.-6      	; 0xfbfa <cat+0x56>
    fc00:	31 97       	sbiw	r30, 0x01	; 1
    fc02:	e0 1b       	sub	r30, r16
    fc04:	f1 0b       	sbc	r31, r17
    fc06:	ce 0e       	add	r12, r30
    fc08:	df 1e       	adc	r13, r31
        puts(line);
    fc0a:	c8 01       	movw	r24, r16
    fc0c:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <puts>
        if(dopage)
    fc10:	81 14       	cp	r8, r1
    fc12:	91 04       	cpc	r9, r1
    fc14:	49 f4       	brne	.+18     	; 0xfc28 <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc16:	a7 01       	movw	r20, r14
    fc18:	6e ef       	ldi	r22, 0xFE	; 254
    fc1a:	70 e0       	ldi	r23, 0x00	; 0
    fc1c:	c8 01       	movw	r24, r16
    fc1e:	0e 94 87 74 	call	0xe90e	; 0xe90e <fgets>
    fc22:	89 2b       	or	r24, r25
    fc24:	31 f7       	brne	.-52     	; 0xfbf2 <cat+0x4e>
    fc26:	06 c0       	rjmp	.+12     	; 0xfc34 <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fc28:	c5 01       	movw	r24, r10
    fc2a:	01 96       	adiw	r24, 0x01	; 1
    fc2c:	83 df       	rcall	.-250    	; 0xfb34 <testpage>
    fc2e:	5c 01       	movw	r10, r24
            if(count < 0)
    fc30:	97 ff       	sbrs	r25, 7
    fc32:	f1 cf       	rjmp	.-30     	; 0xfc16 <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fc34:	82 e2       	ldi	r24, 0x22	; 34
    fc36:	9d e0       	ldi	r25, 0x0D	; 13
    fc38:	a0 e0       	ldi	r26, 0x00	; 0
    fc3a:	ed b7       	in	r30, 0x3d	; 61
    fc3c:	fe b7       	in	r31, 0x3e	; 62
    fc3e:	81 83       	std	Z+1, r24	; 0x01
    fc40:	92 83       	std	Z+2, r25	; 0x02
    fc42:	a3 83       	std	Z+3, r26	; 0x03
    fc44:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    fclose(fp);
    fc48:	c7 01       	movw	r24, r14
    fc4a:	f3 dc       	rcall	.-1562   	; 0xf632 <fclose>
    printf("%ld bytes\n", (long)size);
    fc4c:	0d 2c       	mov	r0, r13
    fc4e:	00 0c       	add	r0, r0
    fc50:	ee 08       	sbc	r14, r14
    fc52:	ff 08       	sbc	r15, r15
    fc54:	ed b7       	in	r30, 0x3d	; 61
    fc56:	fe b7       	in	r31, 0x3e	; 62
    fc58:	c4 82       	std	Z+4, r12	; 0x04
    fc5a:	d5 82       	std	Z+5, r13	; 0x05
    fc5c:	e6 82       	std	Z+6, r14	; 0x06
    fc5e:	f7 82       	std	Z+7, r15	; 0x07
    fc60:	87 e1       	ldi	r24, 0x17	; 23
    fc62:	9d e0       	ldi	r25, 0x0D	; 13
    fc64:	a0 e0       	ldi	r26, 0x00	; 0
    fc66:	81 83       	std	Z+1, r24	; 0x01
    fc68:	92 83       	std	Z+2, r25	; 0x02
    fc6a:	a3 83       	std	Z+3, r26	; 0x03
    fc6c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(size);
}
    fc70:	c7 01       	movw	r24, r14
    fc72:	b6 01       	movw	r22, r12
    fc74:	c9 5f       	subi	r28, 0xF9	; 249
    fc76:	de 4f       	sbci	r29, 0xFE	; 254
    fc78:	ec e0       	ldi	r30, 0x0C	; 12
    fc7a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

0000fc7e <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fc7e:	4f 92       	push	r4
    fc80:	5f 92       	push	r5
    fc82:	6f 92       	push	r6
    fc84:	7f 92       	push	r7
    fc86:	af 92       	push	r10
    fc88:	bf 92       	push	r11
    fc8a:	cf 92       	push	r12
    fc8c:	df 92       	push	r13
    fc8e:	ef 92       	push	r14
    fc90:	ff 92       	push	r15
    fc92:	0f 93       	push	r16
    fc94:	1f 93       	push	r17
    fc96:	cf 93       	push	r28
    fc98:	df 93       	push	r29
    fc9a:	cd b7       	in	r28, 0x3d	; 61
    fc9c:	de b7       	in	r29, 0x3e	; 62
    fc9e:	c9 54       	subi	r28, 0x49	; 73
    fca0:	d1 09       	sbc	r29, r1
    fca2:	0f b6       	in	r0, 0x3f	; 63
    fca4:	f8 94       	cli
    fca6:	de bf       	out	0x3e, r29	; 62
    fca8:	0f be       	out	0x3f, r0	; 63
    fcaa:	cd bf       	out	0x3d, r28	; 61
    fcac:	8c 01       	movw	r16, r24
    fcae:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fcb0:	be 01       	movw	r22, r28
    fcb2:	62 5f       	subi	r22, 0xF2	; 242
    fcb4:	7f 4f       	sbci	r23, 0xFF	; 255
    fcb6:	18 d9       	rcall	.-3536   	; 0xeee8 <stat>
    fcb8:	01 96       	adiw	r24, 0x01	; 1
    fcba:	79 f4       	brne	.+30     	; 0xfcda <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fcbc:	ed b7       	in	r30, 0x3d	; 61
    fcbe:	fe b7       	in	r31, 0x3e	; 62
    fcc0:	15 83       	std	Z+5, r17	; 0x05
    fcc2:	04 83       	std	Z+4, r16	; 0x04
    fcc4:	87 e8       	ldi	r24, 0x87	; 135
    fcc6:	9c e0       	ldi	r25, 0x0C	; 12
    fcc8:	a0 e0       	ldi	r26, 0x00	; 0
    fcca:	81 83       	std	Z+1, r24	; 0x01
    fccc:	92 83       	std	Z+2, r25	; 0x02
    fcce:	a3 83       	std	Z+3, r26	; 0x03
    fcd0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(0);
    fcd4:	80 e0       	ldi	r24, 0x00	; 0
    fcd6:	90 e0       	ldi	r25, 0x00	; 0
    fcd8:	77 c0       	rjmp	.+238    	; 0xfdc8 <ls_info+0x14a>
    }

    if(!verbose)
    fcda:	ef 28       	or	r14, r15
    fcdc:	81 f4       	brne	.+32     	; 0xfcfe <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fcde:	c8 01       	movw	r24, r16
    fce0:	0e 94 40 75 	call	0xea80	; 0xea80 <basename>
    fce4:	ed b7       	in	r30, 0x3d	; 61
    fce6:	fe b7       	in	r31, 0x3e	; 62
    fce8:	95 83       	std	Z+5, r25	; 0x05
    fcea:	84 83       	std	Z+4, r24	; 0x04
    fcec:	83 e8       	ldi	r24, 0x83	; 131
    fcee:	9c e0       	ldi	r25, 0x0C	; 12
    fcf0:	a0 e0       	ldi	r26, 0x00	; 0
    fcf2:	81 83       	std	Z+1, r24	; 0x01
    fcf4:	92 83       	std	Z+2, r25	; 0x02
    fcf6:	a3 83       	std	Z+3, r26	; 0x03
    fcf8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    fcfc:	63 c0       	rjmp	.+198    	; 0xfdc4 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fcfe:	4e 88       	ldd	r4, Y+22	; 0x16
    fd00:	5f 88       	ldd	r5, Y+23	; 0x17
    fd02:	68 8c       	ldd	r6, Y+24	; 0x18
    fd04:	79 8c       	ldd	r7, Y+25	; 0x19
    fd06:	d3 01       	movw	r26, r6
    fd08:	c2 01       	movw	r24, r4
    fd0a:	88 27       	eor	r24, r24
    fd0c:	90 7f       	andi	r25, 0xF0	; 240
    fd0e:	aa 27       	eor	r26, r26
    fd10:	bb 27       	eor	r27, r27
    fd12:	81 15       	cp	r24, r1
    fd14:	90 44       	sbci	r25, 0x40	; 64
    fd16:	a1 05       	cpc	r26, r1
    fd18:	b1 05       	cpc	r27, r1
    fd1a:	11 f4       	brne	.+4      	; 0xfd20 <ls_info+0xa2>
        *p++ = 'd';
    fd1c:	84 e6       	ldi	r24, 0x64	; 100
    fd1e:	01 c0       	rjmp	.+2      	; 0xfd22 <ls_info+0xa4>
    else
        *p++ = '-';
    fd20:	8d e2       	ldi	r24, 0x2D	; 45
    fd22:	8e af       	std	Y+62, r24	; 0x3e
    fd24:	fe 01       	movw	r30, r28
    fd26:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fd28:	e1 2c       	mov	r14, r1
    fd2a:	ff 24       	eor	r15, r15
    fd2c:	f3 94       	inc	r15
    fd2e:	20 e0       	ldi	r18, 0x00	; 0
    fd30:	30 e0       	ldi	r19, 0x00	; 0
    fd32:	be 2e       	mov	r11, r30
    fd34:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fd36:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fd38:	53 e0       	ldi	r21, 0x03	; 3
    fd3a:	c5 2e       	mov	r12, r21
    fd3c:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fd3e:	c7 01       	movw	r24, r14
    fd40:	a0 e0       	ldi	r26, 0x00	; 0
    fd42:	b0 e0       	ldi	r27, 0x00	; 0
    fd44:	84 21       	and	r24, r4
    fd46:	95 21       	and	r25, r5
    fd48:	a6 21       	and	r26, r6
    fd4a:	b7 21       	and	r27, r7
    fd4c:	89 2b       	or	r24, r25
    fd4e:	8a 2b       	or	r24, r26
    fd50:	8b 2b       	or	r24, r27
    fd52:	51 f0       	breq	.+20     	; 0xfd68 <ls_info+0xea>
            *p++ = cm[ i % 3];
    fd54:	c9 01       	movw	r24, r18
    fd56:	b6 01       	movw	r22, r12
    fd58:	0e 94 6d e2 	call	0x1c4da	; 0x1c4da <__divmodhi4>
    fd5c:	dc 01       	movw	r26, r24
    fd5e:	a6 54       	subi	r26, 0x46	; 70
    fd60:	b4 4f       	sbci	r27, 0xF4	; 244
    fd62:	8c 91       	ld	r24, X
    fd64:	81 83       	std	Z+1, r24	; 0x01
    fd66:	01 c0       	rjmp	.+2      	; 0xfd6a <ls_info+0xec>
        else
            *p++ = '-';
    fd68:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fd6a:	f6 94       	lsr	r15
    fd6c:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fd6e:	2f 5f       	subi	r18, 0xFF	; 255
    fd70:	3f 4f       	sbci	r19, 0xFF	; 255
    fd72:	31 96       	adiw	r30, 0x01	; 1
    fd74:	29 30       	cpi	r18, 0x09	; 9
    fd76:	31 05       	cpc	r19, r1
    fd78:	11 f7       	brne	.-60     	; 0xfd3e <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fd7a:	29 96       	adiw	r28, 0x09	; 9
    fd7c:	1f ae       	std	Y+63, r1	; 0x3f
    fd7e:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fd80:	4e a0       	ldd	r4, Y+38	; 0x26
    fd82:	5f a0       	ldd	r5, Y+39	; 0x27
    fd84:	68 a4       	ldd	r6, Y+40	; 0x28
    fd86:	79 a4       	ldd	r7, Y+41	; 0x29
    fd88:	6e a9       	ldd	r22, Y+54	; 0x36
    fd8a:	7f a9       	ldd	r23, Y+55	; 0x37
    fd8c:	88 ad       	ldd	r24, Y+56	; 0x38
    fd8e:	99 ad       	ldd	r25, Y+57	; 0x39
    fd90:	0e 94 1b 75 	call	0xea36	; 0xea36 <mctime>
    fd94:	7c 01       	movw	r14, r24
    fd96:	c8 01       	movw	r24, r16
    fd98:	0e 94 40 75 	call	0xea80	; 0xea80 <basename>
    fd9c:	ed b7       	in	r30, 0x3d	; 61
    fd9e:	fe b7       	in	r31, 0x3e	; 62
    fda0:	95 87       	std	Z+13, r25	; 0x0d
    fda2:	84 87       	std	Z+12, r24	; 0x0c
    fda4:	f3 86       	std	Z+11, r15	; 0x0b
    fda6:	e2 86       	std	Z+10, r14	; 0x0a
    fda8:	46 82       	std	Z+6, r4	; 0x06
    fdaa:	57 82       	std	Z+7, r5	; 0x07
    fdac:	60 86       	std	Z+8, r6	; 0x08
    fdae:	71 86       	std	Z+9, r7	; 0x09
    fdb0:	b4 82       	std	Z+4, r11	; 0x04
    fdb2:	a5 82       	std	Z+5, r10	; 0x05
    fdb4:	89 e6       	ldi	r24, 0x69	; 105
    fdb6:	9c e0       	ldi	r25, 0x0C	; 12
    fdb8:	a0 e0       	ldi	r26, 0x00	; 0
    fdba:	81 83       	std	Z+1, r24	; 0x01
    fdbc:	92 83       	std	Z+2, r25	; 0x02
    fdbe:	a3 83       	std	Z+3, r26	; 0x03
    fdc0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fdc4:	81 e0       	ldi	r24, 0x01	; 1
    fdc6:	90 e0       	ldi	r25, 0x00	; 0
}
    fdc8:	c7 5b       	subi	r28, 0xB7	; 183
    fdca:	df 4f       	sbci	r29, 0xFF	; 255
    fdcc:	0f b6       	in	r0, 0x3f	; 63
    fdce:	f8 94       	cli
    fdd0:	de bf       	out	0x3e, r29	; 62
    fdd2:	0f be       	out	0x3f, r0	; 63
    fdd4:	cd bf       	out	0x3d, r28	; 61
    fdd6:	df 91       	pop	r29
    fdd8:	cf 91       	pop	r28
    fdda:	1f 91       	pop	r17
    fddc:	0f 91       	pop	r16
    fdde:	ff 90       	pop	r15
    fde0:	ef 90       	pop	r14
    fde2:	df 90       	pop	r13
    fde4:	cf 90       	pop	r12
    fde6:	bf 90       	pop	r11
    fde8:	af 90       	pop	r10
    fdea:	7f 90       	pop	r7
    fdec:	6f 90       	pop	r6
    fdee:	5f 90       	pop	r5
    fdf0:	4f 90       	pop	r4
    fdf2:	08 95       	ret

0000fdf4 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
    fdf4:	2f 92       	push	r2
    fdf6:	3f 92       	push	r3
    fdf8:	4f 92       	push	r4
    fdfa:	5f 92       	push	r5
    fdfc:	6f 92       	push	r6
    fdfe:	8f 92       	push	r8
    fe00:	9f 92       	push	r9
    fe02:	af 92       	push	r10
    fe04:	bf 92       	push	r11
    fe06:	cf 92       	push	r12
    fe08:	df 92       	push	r13
    fe0a:	ef 92       	push	r14
    fe0c:	ff 92       	push	r15
    fe0e:	0f 93       	push	r16
    fe10:	1f 93       	push	r17
    fe12:	cf 93       	push	r28
    fe14:	df 93       	push	r29
    fe16:	cd b7       	in	r28, 0x3d	; 61
    fe18:	de b7       	in	r29, 0x3e	; 62
    fe1a:	c8 53       	subi	r28, 0x38	; 56
    fe1c:	d1 40       	sbci	r29, 0x01	; 1
    fe1e:	0f b6       	in	r0, 0x3f	; 63
    fe20:	f8 94       	cli
    fe22:	de bf       	out	0x3e, r29	; 62
    fe24:	0f be       	out	0x3f, r0	; 63
    fe26:	cd bf       	out	0x3d, r28	; 61
    fe28:	7c 01       	movw	r14, r24
    fe2a:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    fe2c:	1e 82       	std	Y+6, r1	; 0x06
    fe2e:	8e 01       	movw	r16, r28
    fe30:	0a 5f       	subi	r16, 0xFA	; 250
    fe32:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fe34:	00 97       	sbiw	r24, 0x00	; 0
    fe36:	51 f4       	brne	.+20     	; 0xfe4c <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fe38:	6f ef       	ldi	r22, 0xFF	; 255
    fe3a:	70 e0       	ldi	r23, 0x00	; 0
    fe3c:	c8 01       	movw	r24, r16
    fe3e:	0e 94 96 75 	call	0xeb2c	; 0xeb2c <getcwd>
    fe42:	89 2b       	or	r24, r25
    fe44:	91 f4       	brne	.+36     	; 0xfe6a <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
    fe46:	88 e4       	ldi	r24, 0x48	; 72
    fe48:	9c e0       	ldi	r25, 0x0C	; 12
    fe4a:	6a c0       	rjmp	.+212    	; 0xff20 <__DATA_REGION_LENGTH__+0x20>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    fe4c:	fc 01       	movw	r30, r24
    fe4e:	80 81       	ld	r24, Z
    fe50:	88 23       	and	r24, r24
    fe52:	91 f3       	breq	.-28     	; 0xfe38 <ls+0x44>
    fe54:	60 ef       	ldi	r22, 0xF0	; 240
    fe56:	72 e1       	ldi	r23, 0x12	; 18
    fe58:	c7 01       	movw	r24, r14
    fe5a:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
    fe5e:	89 2b       	or	r24, r25
    fe60:	59 f7       	brne	.-42     	; 0xfe38 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    fe62:	b7 01       	movw	r22, r14
    fe64:	c8 01       	movw	r24, r16
    fe66:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
    }
    len = strlen(fullpath);
    fe6a:	f8 01       	movw	r30, r16
    fe6c:	01 90       	ld	r0, Z+
    fe6e:	00 20       	and	r0, r0
    fe70:	e9 f7       	brne	.-6      	; 0xfe6c <ls+0x78>
    fe72:	31 97       	sbiw	r30, 0x01	; 1
    fe74:	1f 01       	movw	r2, r30
    fe76:	20 1a       	sub	r2, r16
    fe78:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
    fe7a:	be 01       	movw	r22, r28
    fe7c:	69 5f       	subi	r22, 0xF9	; 249
    fe7e:	7e 4f       	sbci	r23, 0xFE	; 254
    fe80:	c8 01       	movw	r24, r16
    fe82:	32 d8       	rcall	.-3996   	; 0xeee8 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fe84:	ed b7       	in	r30, 0x3d	; 61
    fe86:	fe b7       	in	r31, 0x3e	; 62
    fe88:	15 83       	std	Z+5, r17	; 0x05
    fe8a:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
    fe8c:	89 2b       	or	r24, r25
    fe8e:	59 f0       	breq	.+22     	; 0xfea6 <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fe90:	82 e3       	ldi	r24, 0x32	; 50
    fe92:	9c e0       	ldi	r25, 0x0C	; 12
    fe94:	a0 e0       	ldi	r26, 0x00	; 0
    fe96:	81 83       	std	Z+1, r24	; 0x01
    fe98:	92 83       	std	Z+2, r25	; 0x02
    fe9a:	a3 83       	std	Z+3, r26	; 0x03
    fe9c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(-1);
    fea0:	8f ef       	ldi	r24, 0xFF	; 255
    fea2:	9f ef       	ldi	r25, 0xFF	; 255
    fea4:	96 c0       	rjmp	.+300    	; 0xffd2 <__DATA_REGION_LENGTH__+0xd2>
    }
    printf("Listing:[%s]\n",fullpath);
    fea6:	84 e2       	ldi	r24, 0x24	; 36
    fea8:	9c e0       	ldi	r25, 0x0C	; 12
    feaa:	a0 e0       	ldi	r26, 0x00	; 0
    feac:	81 83       	std	Z+1, r24	; 0x01
    feae:	92 83       	std	Z+2, r25	; 0x02
    feb0:	a3 83       	std	Z+3, r26	; 0x03
    feb2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    switch (st.st_mode & S_IFMT)
    feb6:	c1 5f       	subi	r28, 0xF1	; 241
    feb8:	de 4f       	sbci	r29, 0xFE	; 254
    feba:	88 81       	ld	r24, Y
    febc:	99 81       	ldd	r25, Y+1	; 0x01
    febe:	aa 81       	ldd	r26, Y+2	; 0x02
    fec0:	bb 81       	ldd	r27, Y+3	; 0x03
    fec2:	cf 50       	subi	r28, 0x0F	; 15
    fec4:	d1 40       	sbci	r29, 0x01	; 1
    fec6:	88 27       	eor	r24, r24
    fec8:	90 7f       	andi	r25, 0xF0	; 240
    feca:	aa 27       	eor	r26, r26
    fecc:	bb 27       	eor	r27, r27
    fece:	81 15       	cp	r24, r1
    fed0:	f0 e4       	ldi	r31, 0x40	; 64
    fed2:	9f 07       	cpc	r25, r31
    fed4:	a1 05       	cpc	r26, r1
    fed6:	b1 05       	cpc	r27, r1
    fed8:	59 f0       	breq	.+22     	; 0xfef0 <ls+0xfc>
    feda:	81 15       	cp	r24, r1
    fedc:	90 48       	sbci	r25, 0x80	; 128
    fede:	a1 05       	cpc	r26, r1
    fee0:	b1 05       	cpc	r27, r1
    fee2:	09 f0       	breq	.+2      	; 0xfee6 <ls+0xf2>
    fee4:	67 c0       	rjmp	.+206    	; 0xffb4 <__DATA_REGION_LENGTH__+0xb4>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
    fee6:	b4 01       	movw	r22, r8
    fee8:	c8 01       	movw	r24, r16
    feea:	c9 de       	rcall	.-622    	; 0xfc7e <ls_info>
    feec:	7c 01       	movw	r14, r24
            break;
    feee:	64 c0       	rjmp	.+200    	; 0xffb8 <__DATA_REGION_LENGTH__+0xb8>
        case S_IFDIR:
            dirp = opendir(fullpath);
    fef0:	c8 01       	movw	r24, r16
    fef2:	0e 94 44 76 	call	0xec88	; 0xec88 <opendir>
    fef6:	5c 01       	movw	r10, r24
            if(!dirp)
    fef8:	89 2b       	or	r24, r25
    fefa:	81 f0       	breq	.+32     	; 0xff1c <__DATA_REGION_LENGTH__+0x1c>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
    fefc:	e1 2c       	mov	r14, r1
    fefe:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
    ff00:	c8 01       	movw	r24, r16
    ff02:	82 0d       	add	r24, r2
    ff04:	93 1d       	adc	r25, r3
    ff06:	c9 5c       	subi	r28, 0xC9	; 201
    ff08:	de 4f       	sbci	r29, 0xFE	; 254
    ff0a:	99 83       	std	Y+1, r25	; 0x01
    ff0c:	88 83       	st	Y, r24
    ff0e:	c7 53       	subi	r28, 0x37	; 55
    ff10:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff12:	81 ef       	ldi	r24, 0xF1	; 241
    ff14:	9b e0       	ldi	r25, 0x0B	; 11
    ff16:	2c 01       	movw	r4, r24
    ff18:	61 2c       	mov	r6, r1
    ff1a:	25 c0       	rjmp	.+74     	; 0xff66 <__DATA_REGION_LENGTH__+0x66>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
    ff1c:	84 e1       	ldi	r24, 0x14	; 20
    ff1e:	9c e0       	ldi	r25, 0x0C	; 12
    ff20:	a0 e0       	ldi	r26, 0x00	; 0
    ff22:	ed b7       	in	r30, 0x3d	; 61
    ff24:	fe b7       	in	r31, 0x3e	; 62
    ff26:	81 83       	std	Z+1, r24	; 0x01
    ff28:	92 83       	std	Z+2, r25	; 0x02
    ff2a:	a3 83       	std	Z+3, r26	; 0x03
    ff2c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    ff30:	b7 cf       	rjmp	.-146    	; 0xfea0 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
    ff32:	f6 01       	movw	r30, r12
    ff34:	80 81       	ld	r24, Z
    ff36:	88 23       	and	r24, r24
    ff38:	e1 f0       	breq	.+56     	; 0xff72 <__DATA_REGION_LENGTH__+0x72>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
    ff3a:	f6 01       	movw	r30, r12
    ff3c:	01 90       	ld	r0, Z+
    ff3e:	00 20       	and	r0, r0
    ff40:	e9 f7       	brne	.-6      	; 0xff3c <__DATA_REGION_LENGTH__+0x3c>
    ff42:	31 97       	sbiw	r30, 0x01	; 1
    ff44:	ec 19       	sub	r30, r12
    ff46:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
    ff48:	e2 0d       	add	r30, r2
    ff4a:	f3 1d       	adc	r31, r3
    ff4c:	ef 3f       	cpi	r30, 0xFF	; 255
    ff4e:	f1 05       	cpc	r31, r1
    ff50:	a1 f0       	breq	.+40     	; 0xff7a <__DATA_REGION_LENGTH__+0x7a>
    ff52:	9c f0       	brlt	.+38     	; 0xff7a <__DATA_REGION_LENGTH__+0x7a>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff54:	ed b7       	in	r30, 0x3d	; 61
    ff56:	fe b7       	in	r31, 0x3e	; 62
    ff58:	d5 82       	std	Z+5, r13	; 0x05
    ff5a:	c4 82       	std	Z+4, r12	; 0x04
    ff5c:	41 82       	std	Z+1, r4	; 0x01
    ff5e:	52 82       	std	Z+2, r5	; 0x02
    ff60:	63 82       	std	Z+3, r6	; 0x03
    ff62:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
    ff66:	c5 01       	movw	r24, r10
    ff68:	0e 94 62 76 	call	0xecc4	; 0xecc4 <readdir>
    ff6c:	6c 01       	movw	r12, r24
    ff6e:	89 2b       	or	r24, r25
    ff70:	01 f7       	brne	.-64     	; 0xff32 <__DATA_REGION_LENGTH__+0x32>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
    ff72:	c5 01       	movw	r24, r10
    ff74:	0e 94 29 76 	call	0xec52	; 0xec52 <closedir>
            break;
    ff78:	1f c0       	rjmp	.+62     	; 0xffb8 <__DATA_REGION_LENGTH__+0xb8>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
    ff7a:	66 ea       	ldi	r22, 0xA6	; 166
    ff7c:	78 e0       	ldi	r23, 0x08	; 8
    ff7e:	c8 01       	movw	r24, r16
    ff80:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
    ff84:	89 2b       	or	r24, r25
    ff86:	29 f4       	brne	.+10     	; 0xff92 <__DATA_REGION_LENGTH__+0x92>
                {
                    strcat(fullpath,"/");
    ff88:	66 ea       	ldi	r22, 0xA6	; 166
    ff8a:	78 e0       	ldi	r23, 0x08	; 8
    ff8c:	c8 01       	movw	r24, r16
    ff8e:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
                }
                strcat(fullpath,de->d_name);
    ff92:	b6 01       	movw	r22, r12
    ff94:	c8 01       	movw	r24, r16
    ff96:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
                files +=ls_info(fullpath,verbose);
    ff9a:	b4 01       	movw	r22, r8
    ff9c:	c8 01       	movw	r24, r16
    ff9e:	6f de       	rcall	.-802    	; 0xfc7e <ls_info>
    ffa0:	e8 0e       	add	r14, r24
    ffa2:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
    ffa4:	c9 5c       	subi	r28, 0xC9	; 201
    ffa6:	de 4f       	sbci	r29, 0xFE	; 254
    ffa8:	e8 81       	ld	r30, Y
    ffaa:	f9 81       	ldd	r31, Y+1	; 0x01
    ffac:	c7 53       	subi	r28, 0x37	; 55
    ffae:	d1 40       	sbci	r29, 0x01	; 1
    ffb0:	10 82       	st	Z, r1
    ffb2:	d9 cf       	rjmp	.-78     	; 0xff66 <__DATA_REGION_LENGTH__+0x66>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
    ffb4:	e1 2c       	mov	r14, r1
    ffb6:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
    ffb8:	ed b7       	in	r30, 0x3d	; 61
    ffba:	fe b7       	in	r31, 0x3e	; 62
    ffbc:	f5 82       	std	Z+5, r15	; 0x05
    ffbe:	e4 82       	std	Z+4, r14	; 0x04
    ffc0:	86 ee       	ldi	r24, 0xE6	; 230
    ffc2:	9b e0       	ldi	r25, 0x0B	; 11
    ffc4:	a0 e0       	ldi	r26, 0x00	; 0
    ffc6:	81 83       	std	Z+1, r24	; 0x01
    ffc8:	92 83       	std	Z+2, r25	; 0x02
    ffca:	a3 83       	std	Z+3, r26	; 0x03
    ffcc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(files);
    ffd0:	c7 01       	movw	r24, r14
}
    ffd2:	c8 5c       	subi	r28, 0xC8	; 200
    ffd4:	de 4f       	sbci	r29, 0xFE	; 254
    ffd6:	0f b6       	in	r0, 0x3f	; 63
    ffd8:	f8 94       	cli
    ffda:	de bf       	out	0x3e, r29	; 62
    ffdc:	0f be       	out	0x3f, r0	; 63
    ffde:	cd bf       	out	0x3d, r28	; 61
    ffe0:	df 91       	pop	r29
    ffe2:	cf 91       	pop	r28
    ffe4:	1f 91       	pop	r17
    ffe6:	0f 91       	pop	r16
    ffe8:	ff 90       	pop	r15
    ffea:	ef 90       	pop	r14
    ffec:	df 90       	pop	r13
    ffee:	cf 90       	pop	r12
    fff0:	bf 90       	pop	r11
    fff2:	af 90       	pop	r10
    fff4:	9f 90       	pop	r9
    fff6:	8f 90       	pop	r8
    fff8:	6f 90       	pop	r6
    fffa:	5f 90       	pop	r5
    fffc:	4f 90       	pop	r4
    fffe:	3f 90       	pop	r3
   10000:	2f 90       	pop	r2
   10002:	08 95       	ret

00010004 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10004:	a7 e0       	ldi	r26, 0x07	; 7
   10006:	b1 e0       	ldi	r27, 0x01	; 1
   10008:	e8 e0       	ldi	r30, 0x08	; 8
   1000a:	f0 e8       	ldi	r31, 0x80	; 128
   1000c:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   10010:	18 16       	cp	r1, r24
   10012:	19 06       	cpc	r1, r25
   10014:	1c f0       	brlt	.+6      	; 0x1001c <posix_tests+0x18>
		return(0);
   10016:	80 e0       	ldi	r24, 0x00	; 0
   10018:	90 e0       	ldi	r25, 0x00	; 0
   1001a:	dd c1       	rjmp	.+954    	; 0x103d6 <posix_tests+0x3d2>

    ptr = argv[ind++];
   1001c:	fb 01       	movw	r30, r22
   1001e:	c0 80       	ld	r12, Z
   10020:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   10022:	c1 14       	cp	r12, r1
   10024:	d1 04       	cpc	r13, r1
   10026:	b9 f3       	breq	.-18     	; 0x10016 <posix_tests+0x12>
   10028:	4b 01       	movw	r8, r22
   1002a:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   1002c:	6e eb       	ldi	r22, 0xBE	; 190
   1002e:	7b e0       	ldi	r23, 0x0B	; 11
   10030:	c6 01       	movw	r24, r12
   10032:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   10036:	89 2b       	or	r24, r25
   10038:	a1 f0       	breq	.+40     	; 0x10062 <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   1003a:	f4 01       	movw	r30, r8
   1003c:	c2 80       	ldd	r12, Z+2	; 0x02
   1003e:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10040:	c1 14       	cp	r12, r1
   10042:	d1 04       	cpc	r13, r1
   10044:	21 f4       	brne	.+8      	; 0x1004e <posix_tests+0x4a>
        {
            posix_help(1);
   10046:	81 e0       	ldi	r24, 0x01	; 1
   10048:	90 e0       	ldi	r25, 0x00	; 0
   1004a:	75 dc       	rcall	.-1814   	; 0xf936 <posix_help>
   1004c:	45 c1       	rjmp	.+650    	; 0x102d8 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1004e:	6c e6       	ldi	r22, 0x6C	; 108
   10050:	76 e1       	ldi	r23, 0x16	; 22
   10052:	c6 01       	movw	r24, r12
   10054:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   10058:	89 2b       	or	r24, r25
   1005a:	a9 f7       	brne	.-22     	; 0x10046 <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   1005c:	02 e0       	ldi	r16, 0x02	; 2
   1005e:	10 e0       	ldi	r17, 0x00	; 0
   10060:	02 c0       	rjmp	.+4      	; 0x10066 <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   10062:	01 e0       	ldi	r16, 0x01	; 1
   10064:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10066:	78 01       	movw	r14, r16
   10068:	ff ef       	ldi	r31, 0xFF	; 255
   1006a:	ef 1a       	sub	r14, r31
   1006c:	ff 0a       	sbc	r15, r31
   1006e:	93 01       	movw	r18, r6
   10070:	a7 01       	movw	r20, r14
   10072:	64 ec       	ldi	r22, 0xC4	; 196
   10074:	7b e0       	ldi	r23, 0x0B	; 11
   10076:	c6 01       	movw	r24, r12
   10078:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1007c:	89 2b       	or	r24, r25
   1007e:	99 f1       	breq	.+102    	; 0x100e6 <posix_tests+0xe2>
   10080:	78 01       	movw	r14, r16
   10082:	ee 0c       	add	r14, r14
   10084:	ff 1c       	adc	r15, r15
   10086:	e8 0c       	add	r14, r8
   10088:	f9 1c       	adc	r15, r9
   1008a:	57 01       	movw	r10, r14
   1008c:	47 01       	movw	r8, r14
   1008e:	68 01       	movw	r12, r16
   10090:	41 2c       	mov	r4, r1
   10092:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10094:	c6 14       	cp	r12, r6
   10096:	d7 04       	cpc	r13, r7
   10098:	14 f5       	brge	.+68     	; 0x100de <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   1009a:	68 ec       	ldi	r22, 0xC8	; 200
   1009c:	7b e0       	ldi	r23, 0x0B	; 11
   1009e:	f4 01       	movw	r30, r8
   100a0:	81 91       	ld	r24, Z+
   100a2:	91 91       	ld	r25, Z+
   100a4:	4f 01       	movw	r8, r30
   100a6:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   100aa:	89 2b       	or	r24, r25
   100ac:	19 f0       	breq	.+6      	; 0x100b4 <posix_tests+0xb0>
                page = 1;
   100ae:	44 24       	eor	r4, r4
   100b0:	43 94       	inc	r4
   100b2:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100b4:	ff ef       	ldi	r31, 0xFF	; 255
   100b6:	cf 1a       	sub	r12, r31
   100b8:	df 0a       	sbc	r13, r31
   100ba:	ec cf       	rjmp	.-40     	; 0x10094 <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   100bc:	68 ec       	ldi	r22, 0xC8	; 200
   100be:	7b e0       	ldi	r23, 0x0B	; 11
   100c0:	f5 01       	movw	r30, r10
   100c2:	81 91       	ld	r24, Z+
   100c4:	91 91       	ld	r25, Z+
   100c6:	5f 01       	movw	r10, r30
   100c8:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   100cc:	89 2b       	or	r24, r25
   100ce:	29 f4       	brne	.+10     	; 0x100da <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   100d0:	b2 01       	movw	r22, r4
   100d2:	f7 01       	movw	r30, r14
   100d4:	80 81       	ld	r24, Z
   100d6:	91 81       	ldd	r25, Z+1	; 0x01
   100d8:	65 dd       	rcall	.-1334   	; 0xfba4 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   100da:	0f 5f       	subi	r16, 0xFF	; 255
   100dc:	1f 4f       	sbci	r17, 0xFF	; 255
   100de:	06 15       	cp	r16, r6
   100e0:	17 05       	cpc	r17, r7
   100e2:	64 f3       	brlt	.-40     	; 0x100bc <posix_tests+0xb8>
   100e4:	f9 c0       	rjmp	.+498    	; 0x102d8 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   100e6:	58 01       	movw	r10, r16
   100e8:	f2 e0       	ldi	r31, 0x02	; 2
   100ea:	af 0e       	add	r10, r31
   100ec:	b1 1c       	adc	r11, r1
   100ee:	93 01       	movw	r18, r6
   100f0:	a5 01       	movw	r20, r10
   100f2:	6b ec       	ldi	r22, 0xCB	; 203
   100f4:	7b e0       	ldi	r23, 0x0B	; 11
   100f6:	c6 01       	movw	r24, r12
   100f8:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   100fc:	89 2b       	or	r24, r25
   100fe:	69 f0       	breq	.+26     	; 0x1011a <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   10100:	f8 01       	movw	r30, r16
   10102:	ee 0f       	add	r30, r30
   10104:	ff 1f       	adc	r31, r31
   10106:	e8 0d       	add	r30, r8
   10108:	f9 1d       	adc	r31, r9
   1010a:	62 81       	ldd	r22, Z+2	; 0x02
   1010c:	73 81       	ldd	r23, Z+3	; 0x03
   1010e:	80 81       	ld	r24, Z
   10110:	91 81       	ldd	r25, Z+1	; 0x01
   10112:	32 dc       	rcall	.-1948   	; 0xf978 <copy>
   10114:	97 ff       	sbrs	r25, 7
   10116:	e0 c0       	rjmp	.+448    	; 0x102d8 <posix_tests+0x2d4>
   10118:	5c c1       	rjmp	.+696    	; 0x103d2 <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1011a:	93 01       	movw	r18, r6
   1011c:	a7 01       	movw	r20, r14
   1011e:	60 ed       	ldi	r22, 0xD0	; 208
   10120:	7b e0       	ldi	r23, 0x0B	; 11
   10122:	c6 01       	movw	r24, r12
   10124:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   10128:	89 2b       	or	r24, r25
   1012a:	b9 f0       	breq	.+46     	; 0x1015a <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   1012c:	78 01       	movw	r14, r16
   1012e:	ee 0c       	add	r14, r14
   10130:	ff 1c       	adc	r15, r15
   10132:	e8 0c       	add	r14, r8
   10134:	f9 1c       	adc	r15, r9
   10136:	f7 01       	movw	r30, r14
   10138:	80 81       	ld	r24, Z
   1013a:	91 81       	ldd	r25, Z+1	; 0x01
   1013c:	0e 94 4e 75 	call	0xea9c	; 0xea9c <chdir>
   10140:	89 2b       	or	r24, r25
   10142:	09 f4       	brne	.+2      	; 0x10146 <posix_tests+0x142>
   10144:	c9 c0       	rjmp	.+402    	; 0x102d8 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   10146:	f7 01       	movw	r30, r14
   10148:	80 81       	ld	r24, Z
   1014a:	91 81       	ldd	r25, Z+1	; 0x01
   1014c:	ed b7       	in	r30, 0x3d	; 61
   1014e:	fe b7       	in	r31, 0x3e	; 62
   10150:	95 83       	std	Z+5, r25	; 0x05
   10152:	84 83       	std	Z+4, r24	; 0x04
   10154:	8d e9       	ldi	r24, 0x9D	; 157
   10156:	9d e0       	ldi	r25, 0x0D	; 13
   10158:	36 c1       	rjmp	.+620    	; 0x103c6 <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   1015a:	68 ed       	ldi	r22, 0xD8	; 216
   1015c:	78 e0       	ldi	r23, 0x08	; 8
   1015e:	c6 01       	movw	r24, r12
   10160:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   10164:	89 2b       	or	r24, r25
   10166:	09 f4       	brne	.+2      	; 0x1016a <posix_tests+0x166>
   10168:	40 c0       	rjmp	.+128    	; 0x101ea <posix_tests+0x1e6>
   1016a:	78 01       	movw	r14, r16
   1016c:	ee 0c       	add	r14, r14
   1016e:	ff 1c       	adc	r15, r15
   10170:	e8 0c       	add	r14, r8
   10172:	f9 1c       	adc	r15, r9
   10174:	c1 2c       	mov	r12, r1
   10176:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10178:	85 e8       	ldi	r24, 0x85	; 133
   1017a:	9d e0       	ldi	r25, 0x0D	; 13
   1017c:	4c 01       	movw	r8, r24
   1017e:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10180:	06 15       	cp	r16, r6
   10182:	17 05       	cpc	r17, r7
   10184:	34 f5       	brge	.+76     	; 0x101d2 <posix_tests+0x1ce>
        {
			if(!argv[i])
   10186:	f7 01       	movw	r30, r14
   10188:	80 81       	ld	r24, Z
   1018a:	91 81       	ldd	r25, Z+1	; 0x01
   1018c:	00 97       	sbiw	r24, 0x00	; 0
   1018e:	51 f4       	brne	.+20     	; 0x101a4 <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   10190:	ed b7       	in	r30, 0x3d	; 61
   10192:	fe b7       	in	r31, 0x3e	; 62
   10194:	15 83       	std	Z+5, r17	; 0x05
   10196:	04 83       	std	Z+4, r16	; 0x04
   10198:	81 82       	std	Z+1, r8	; 0x01
   1019a:	92 82       	std	Z+2, r9	; 0x02
   1019c:	a3 82       	std	Z+3, r10	; 0x03
   1019e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
				continue;
   101a2:	11 c0       	rjmp	.+34     	; 0x101c6 <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   101a4:	63 ed       	ldi	r22, 0xD3	; 211
   101a6:	7b e0       	ldi	r23, 0x0B	; 11
   101a8:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   101ac:	89 2b       	or	r24, r25
   101ae:	59 f4       	brne	.+22     	; 0x101c6 <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   101b0:	61 e0       	ldi	r22, 0x01	; 1
   101b2:	70 e0       	ldi	r23, 0x00	; 0
   101b4:	f7 01       	movw	r30, r14
   101b6:	80 81       	ld	r24, Z
   101b8:	91 81       	ldd	r25, Z+1	; 0x01
   101ba:	1c de       	rcall	.-968    	; 0xfdf4 <ls>
   101bc:	97 fd       	sbrc	r25, 7
   101be:	09 c1       	rjmp	.+530    	; 0x103d2 <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   101c0:	ff ef       	ldi	r31, 0xFF	; 255
   101c2:	cf 1a       	sub	r12, r31
   101c4:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   101c6:	0f 5f       	subi	r16, 0xFF	; 255
   101c8:	1f 4f       	sbci	r17, 0xFF	; 255
   101ca:	82 e0       	ldi	r24, 0x02	; 2
   101cc:	e8 0e       	add	r14, r24
   101ce:	f1 1c       	adc	r15, r1
   101d0:	d7 cf       	rjmp	.-82     	; 0x10180 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   101d2:	c1 14       	cp	r12, r1
   101d4:	d1 04       	cpc	r13, r1
   101d6:	09 f0       	breq	.+2      	; 0x101da <posix_tests+0x1d6>
   101d8:	7f c0       	rjmp	.+254    	; 0x102d8 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   101da:	61 e0       	ldi	r22, 0x01	; 1
   101dc:	70 e0       	ldi	r23, 0x00	; 0
   101de:	80 e2       	ldi	r24, 0x20	; 32
   101e0:	9c e0       	ldi	r25, 0x0C	; 12
   101e2:	08 de       	rcall	.-1008   	; 0xfdf4 <ls>
   101e4:	97 ff       	sbrs	r25, 7
   101e6:	78 c0       	rjmp	.+240    	; 0x102d8 <posix_tests+0x2d4>
   101e8:	f4 c0       	rjmp	.+488    	; 0x103d2 <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   101ea:	93 01       	movw	r18, r6
   101ec:	a7 01       	movw	r20, r14
   101ee:	66 ed       	ldi	r22, 0xD6	; 214
   101f0:	7b e0       	ldi	r23, 0x0B	; 11
   101f2:	c6 01       	movw	r24, r12
   101f4:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   101f8:	89 2b       	or	r24, r25
   101fa:	79 f1       	breq	.+94     	; 0x1025a <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   101fc:	e6 14       	cp	r14, r6
   101fe:	f7 04       	cpc	r15, r7
   10200:	7c f4       	brge	.+30     	; 0x10220 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   10202:	ee 0c       	add	r14, r14
   10204:	ff 1c       	adc	r15, r15
   10206:	f4 01       	movw	r30, r8
   10208:	ee 0d       	add	r30, r14
   1020a:	ff 1d       	adc	r31, r15
   1020c:	48 e0       	ldi	r20, 0x08	; 8
   1020e:	50 e0       	ldi	r21, 0x00	; 0
   10210:	60 e0       	ldi	r22, 0x00	; 0
   10212:	70 e0       	ldi	r23, 0x00	; 0
   10214:	80 81       	ld	r24, Z
   10216:	91 81       	ldd	r25, Z+1	; 0x01
   10218:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <strtol>
   1021c:	ab 01       	movw	r20, r22
   1021e:	02 c0       	rjmp	.+4      	; 0x10224 <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10220:	4f ef       	ldi	r20, 0xFF	; 255
   10222:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10224:	78 01       	movw	r14, r16
   10226:	ee 0c       	add	r14, r14
   10228:	ff 1c       	adc	r15, r15
   1022a:	e8 0c       	add	r14, r8
   1022c:	f9 1c       	adc	r15, r9
   1022e:	05 2e       	mov	r0, r21
   10230:	00 0c       	add	r0, r0
   10232:	66 0b       	sbc	r22, r22
   10234:	77 0b       	sbc	r23, r23
   10236:	f7 01       	movw	r30, r14
   10238:	80 81       	ld	r24, Z
   1023a:	91 81       	ldd	r25, Z+1	; 0x01
   1023c:	0e 94 bb 75 	call	0xeb76	; 0xeb76 <mkdir>
   10240:	89 2b       	or	r24, r25
   10242:	09 f4       	brne	.+2      	; 0x10246 <posix_tests+0x242>
   10244:	49 c0       	rjmp	.+146    	; 0x102d8 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10246:	f7 01       	movw	r30, r14
   10248:	80 81       	ld	r24, Z
   1024a:	91 81       	ldd	r25, Z+1	; 0x01
   1024c:	ed b7       	in	r30, 0x3d	; 61
   1024e:	fe b7       	in	r31, 0x3e	; 62
   10250:	95 83       	std	Z+5, r25	; 0x05
   10252:	84 83       	std	Z+4, r24	; 0x04
   10254:	84 e7       	ldi	r24, 0x74	; 116
   10256:	9d e0       	ldi	r25, 0x0D	; 13
   10258:	b6 c0       	rjmp	.+364    	; 0x103c6 <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1025a:	93 01       	movw	r18, r6
   1025c:	a7 01       	movw	r20, r14
   1025e:	6c ed       	ldi	r22, 0xDC	; 220
   10260:	7b e0       	ldi	r23, 0x0B	; 11
   10262:	c6 01       	movw	r24, r12
   10264:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   10268:	89 2b       	or	r24, r25
   1026a:	71 f0       	breq	.+28     	; 0x10288 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   1026c:	00 0f       	add	r16, r16
   1026e:	11 1f       	adc	r17, r17
   10270:	f4 01       	movw	r30, r8
   10272:	e0 0f       	add	r30, r16
   10274:	f1 1f       	adc	r31, r17
   10276:	80 81       	ld	r24, Z
   10278:	91 81       	ldd	r25, Z+1	; 0x01
   1027a:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   1027e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10282:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10286:	28 c0       	rjmp	.+80     	; 0x102d8 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10288:	93 01       	movw	r18, r6
   1028a:	a8 01       	movw	r20, r16
   1028c:	61 ee       	ldi	r22, 0xE1	; 225
   1028e:	7b e0       	ldi	r23, 0x0B	; 11
   10290:	c6 01       	movw	r24, r12
   10292:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   10296:	89 2b       	or	r24, r25
   10298:	11 f1       	breq	.+68     	; 0x102de <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   1029a:	6e ef       	ldi	r22, 0xFE	; 254
   1029c:	70 e0       	ldi	r23, 0x00	; 0
   1029e:	ce 01       	movw	r24, r28
   102a0:	08 96       	adiw	r24, 0x08	; 8
   102a2:	0e 94 96 75 	call	0xeb2c	; 0xeb2c <getcwd>
		if(ptr == NULL)
   102a6:	00 97       	sbiw	r24, 0x00	; 0
   102a8:	59 f4       	brne	.+22     	; 0x102c0 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   102aa:	88 e6       	ldi	r24, 0x68	; 104
   102ac:	9d e0       	ldi	r25, 0x0D	; 13
   102ae:	a0 e0       	ldi	r26, 0x00	; 0
   102b0:	ed b7       	in	r30, 0x3d	; 61
   102b2:	fe b7       	in	r31, 0x3e	; 62
   102b4:	81 83       	std	Z+1, r24	; 0x01
   102b6:	92 83       	std	Z+2, r25	; 0x02
   102b8:	a3 83       	std	Z+3, r26	; 0x03
   102ba:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   102be:	89 c0       	rjmp	.+274    	; 0x103d2 <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   102c0:	ed b7       	in	r30, 0x3d	; 61
   102c2:	fe b7       	in	r31, 0x3e	; 62
   102c4:	95 83       	std	Z+5, r25	; 0x05
   102c6:	84 83       	std	Z+4, r24	; 0x04
   102c8:	84 e6       	ldi	r24, 0x64	; 100
   102ca:	9d e0       	ldi	r25, 0x0D	; 13
   102cc:	a0 e0       	ldi	r26, 0x00	; 0
   102ce:	81 83       	std	Z+1, r24	; 0x01
   102d0:	92 83       	std	Z+2, r25	; 0x02
   102d2:	a3 83       	std	Z+3, r26	; 0x03
   102d4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(1);
   102d8:	81 e0       	ldi	r24, 0x01	; 1
   102da:	90 e0       	ldi	r25, 0x00	; 0
   102dc:	7c c0       	rjmp	.+248    	; 0x103d6 <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   102de:	93 01       	movw	r18, r6
   102e0:	a5 01       	movw	r20, r10
   102e2:	65 ee       	ldi	r22, 0xE5	; 229
   102e4:	7b e0       	ldi	r23, 0x0B	; 11
   102e6:	c6 01       	movw	r24, r12
   102e8:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   102ec:	89 2b       	or	r24, r25
   102ee:	59 f1       	breq	.+86     	; 0x10346 <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   102f0:	00 0f       	add	r16, r16
   102f2:	11 1f       	adc	r17, r17
   102f4:	64 01       	movw	r12, r8
   102f6:	c0 0e       	add	r12, r16
   102f8:	d1 1e       	adc	r13, r17
   102fa:	0e 5f       	subi	r16, 0xFE	; 254
   102fc:	1f 4f       	sbci	r17, 0xFF	; 255
   102fe:	74 01       	movw	r14, r8
   10300:	e0 0e       	add	r14, r16
   10302:	f1 1e       	adc	r15, r17
   10304:	f7 01       	movw	r30, r14
   10306:	60 81       	ld	r22, Z
   10308:	71 81       	ldd	r23, Z+1	; 0x01
   1030a:	f6 01       	movw	r30, r12
   1030c:	80 81       	ld	r24, Z
   1030e:	91 81       	ldd	r25, Z+1	; 0x01
   10310:	0e 94 e9 75 	call	0xebd2	; 0xebd2 <rename>
   10314:	89 2b       	or	r24, r25
   10316:	01 f3       	breq	.-64     	; 0x102d8 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10318:	f7 01       	movw	r30, r14
   1031a:	80 81       	ld	r24, Z
   1031c:	91 81       	ldd	r25, Z+1	; 0x01
   1031e:	ed b7       	in	r30, 0x3d	; 61
   10320:	fe b7       	in	r31, 0x3e	; 62
   10322:	97 83       	std	Z+7, r25	; 0x07
   10324:	86 83       	std	Z+6, r24	; 0x06
   10326:	f6 01       	movw	r30, r12
   10328:	80 81       	ld	r24, Z
   1032a:	91 81       	ldd	r25, Z+1	; 0x01
   1032c:	ed b7       	in	r30, 0x3d	; 61
   1032e:	fe b7       	in	r31, 0x3e	; 62
   10330:	95 83       	std	Z+5, r25	; 0x05
   10332:	84 83       	std	Z+4, r24	; 0x04
   10334:	83 e5       	ldi	r24, 0x53	; 83
   10336:	9d e0       	ldi	r25, 0x0D	; 13
   10338:	a0 e0       	ldi	r26, 0x00	; 0
   1033a:	81 83       	std	Z+1, r24	; 0x01
   1033c:	92 83       	std	Z+2, r25	; 0x02
   1033e:	a3 83       	std	Z+3, r26	; 0x03
   10340:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10344:	46 c0       	rjmp	.+140    	; 0x103d2 <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10346:	93 01       	movw	r18, r6
   10348:	a7 01       	movw	r20, r14
   1034a:	6c ee       	ldi	r22, 0xEC	; 236
   1034c:	7b e0       	ldi	r23, 0x0B	; 11
   1034e:	c6 01       	movw	r24, r12
   10350:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   10354:	89 2b       	or	r24, r25
   10356:	b9 f0       	breq	.+46     	; 0x10386 <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10358:	78 01       	movw	r14, r16
   1035a:	ee 0c       	add	r14, r14
   1035c:	ff 1c       	adc	r15, r15
   1035e:	e8 0c       	add	r14, r8
   10360:	f9 1c       	adc	r15, r9
   10362:	f7 01       	movw	r30, r14
   10364:	80 81       	ld	r24, Z
   10366:	91 81       	ldd	r25, Z+1	; 0x01
   10368:	0e 94 08 76 	call	0xec10	; 0xec10 <unlink>
   1036c:	89 2b       	or	r24, r25
   1036e:	09 f4       	brne	.+2      	; 0x10372 <posix_tests+0x36e>
   10370:	b3 cf       	rjmp	.-154    	; 0x102d8 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   10372:	f7 01       	movw	r30, r14
   10374:	80 81       	ld	r24, Z
   10376:	91 81       	ldd	r25, Z+1	; 0x01
   10378:	ed b7       	in	r30, 0x3d	; 61
   1037a:	fe b7       	in	r31, 0x3e	; 62
   1037c:	95 83       	std	Z+5, r25	; 0x05
   1037e:	84 83       	std	Z+4, r24	; 0x04
   10380:	85 e4       	ldi	r24, 0x45	; 69
   10382:	9d e0       	ldi	r25, 0x0D	; 13
   10384:	20 c0       	rjmp	.+64     	; 0x103c6 <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10386:	93 01       	movw	r18, r6
   10388:	a7 01       	movw	r20, r14
   1038a:	6f ee       	ldi	r22, 0xEF	; 239
   1038c:	7b e0       	ldi	r23, 0x0B	; 11
   1038e:	c6 01       	movw	r24, r12
   10390:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   10394:	89 2b       	or	r24, r25
   10396:	09 f4       	brne	.+2      	; 0x1039a <posix_tests+0x396>
   10398:	3e ce       	rjmp	.-900    	; 0x10016 <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   1039a:	78 01       	movw	r14, r16
   1039c:	ee 0c       	add	r14, r14
   1039e:	ff 1c       	adc	r15, r15
   103a0:	e8 0c       	add	r14, r8
   103a2:	f9 1c       	adc	r15, r9
   103a4:	f7 01       	movw	r30, r14
   103a6:	80 81       	ld	r24, Z
   103a8:	91 81       	ldd	r25, Z+1	; 0x01
   103aa:	0e 94 27 76 	call	0xec4e	; 0xec4e <rmdir>
   103ae:	89 2b       	or	r24, r25
   103b0:	09 f4       	brne	.+2      	; 0x103b4 <posix_tests+0x3b0>
   103b2:	92 cf       	rjmp	.-220    	; 0x102d8 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   103b4:	f7 01       	movw	r30, r14
   103b6:	80 81       	ld	r24, Z
   103b8:	91 81       	ldd	r25, Z+1	; 0x01
   103ba:	ed b7       	in	r30, 0x3d	; 61
   103bc:	fe b7       	in	r31, 0x3e	; 62
   103be:	95 83       	std	Z+5, r25	; 0x05
   103c0:	84 83       	std	Z+4, r24	; 0x04
   103c2:	84 e3       	ldi	r24, 0x34	; 52
   103c4:	9d e0       	ldi	r25, 0x0D	; 13
   103c6:	a0 e0       	ldi	r26, 0x00	; 0
   103c8:	81 83       	std	Z+1, r24	; 0x01
   103ca:	92 83       	std	Z+2, r25	; 0x02
   103cc:	a3 83       	std	Z+3, r26	; 0x03
   103ce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            return(-1);
   103d2:	8f ef       	ldi	r24, 0xFF	; 255
   103d4:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   103d6:	c9 5f       	subi	r28, 0xF9	; 249
   103d8:	de 4f       	sbci	r29, 0xFE	; 254
   103da:	e0 e1       	ldi	r30, 0x10	; 16
   103dc:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

000103e0 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   103e0:	00 d0       	rcall	.+0      	; 0x103e2 <gpib_timer_init+0x2>
   103e2:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   103e4:	61 e0       	ldi	r22, 0x01	; 1
   103e6:	70 e0       	ldi	r23, 0x00	; 0
   103e8:	8c ea       	ldi	r24, 0xAC	; 172
   103ea:	93 e8       	ldi	r25, 0x83	; 131
   103ec:	0e 94 de 32 	call	0x65bc	; 0x65bc <set_timers>
   103f0:	01 96       	adiw	r24, 0x01	; 1
   103f2:	51 f4       	brne	.+20     	; 0x10408 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   103f4:	8a ed       	ldi	r24, 0xDA	; 218
   103f6:	9e e0       	ldi	r25, 0x0E	; 14
   103f8:	a0 e0       	ldi	r26, 0x00	; 0
   103fa:	ed b7       	in	r30, 0x3d	; 61
   103fc:	fe b7       	in	r31, 0x3e	; 62
   103fe:	81 83       	std	Z+1, r24	; 0x01
   10400:	92 83       	std	Z+2, r25	; 0x02
   10402:	a3 83       	std	Z+3, r26	; 0x03
   10404:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    gpib_timer_reset();
   10408:	95 d1       	rcall	.+810    	; 0x10734 <gpib_timer_reset>
}
   1040a:	0f 90       	pop	r0
   1040c:	0f 90       	pop	r0
   1040e:	0f 90       	pop	r0
   10410:	08 95       	ret

00010412 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10412:	28 2f       	mov	r18, r24
   10414:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10416:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10418:	88 0f       	add	r24, r24
        if(mask & 1)
   1041a:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1041c:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1041e:	26 95       	lsr	r18
   10420:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10422:	d1 f7       	brne	.-12     	; 0x10418 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10424:	08 95       	ret

00010426 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   10426:	f5 df       	rcall	.-22     	; 0x10412 <reverse_8bits>
   10428:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   1042c:	0e 94 38 29 	call	0x5270	; 0x5270 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10430:	2a 9a       	sbi	0x05, 2	; 5
   10432:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   10434:	2a 98       	cbi	0x05, 2	; 5
   10436:	22 9a       	sbi	0x04, 2	; 4
   10438:	08 95       	ret

0001043a <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   1043a:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   1043e:	e9 cf       	rjmp	.-46     	; 0x10412 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10440:	08 95       	ret

00010442 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   10442:	00 d0       	rcall	.+0      	; 0x10444 <ppr_init+0x2>
   10444:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   10446:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1044a:	81 ff       	sbrs	r24, 1
   1044c:	0a c0       	rjmp	.+20     	; 0x10462 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   1044e:	87 ec       	ldi	r24, 0xC7	; 199
   10450:	9e e0       	ldi	r25, 0x0E	; 14
   10452:	a0 e0       	ldi	r26, 0x00	; 0
   10454:	ed b7       	in	r30, 0x3d	; 61
   10456:	fe b7       	in	r31, 0x3e	; 62
   10458:	81 83       	std	Z+1, r24	; 0x01
   1045a:	92 83       	std	Z+2, r25	; 0x02
   1045c:	a3 83       	std	Z+3, r26	; 0x03
   1045e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
    ppr_set(0);
   10462:	80 e0       	ldi	r24, 0x00	; 0
   10464:	e0 df       	rcall	.-64     	; 0x10426 <ppr_set>
}
   10466:	0f 90       	pop	r0
   10468:	0f 90       	pop	r0
   1046a:	0f 90       	pop	r0
   1046c:	08 95       	ret

0001046e <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   1046e:	21 e0       	ldi	r18, 0x01	; 1
   10470:	30 e0       	ldi	r19, 0x00	; 0
   10472:	01 c0       	rjmp	.+2      	; 0x10476 <ppr_bit_set+0x8>
   10474:	22 0f       	add	r18, r18
   10476:	8a 95       	dec	r24
   10478:	ea f7       	brpl	.-6      	; 0x10474 <ppr_bit_set+0x6>
   1047a:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   1047e:	82 2b       	or	r24, r18
   10480:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   10484:	d0 cf       	rjmp	.-96     	; 0x10426 <ppr_set>
   10486:	08 95       	ret

00010488 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10488:	21 e0       	ldi	r18, 0x01	; 1
   1048a:	30 e0       	ldi	r19, 0x00	; 0
   1048c:	01 c0       	rjmp	.+2      	; 0x10490 <ppr_bit_clr+0x8>
   1048e:	22 0f       	add	r18, r18
   10490:	8a 95       	dec	r24
   10492:	ea f7       	brpl	.-6      	; 0x1048e <ppr_bit_clr+0x6>
   10494:	20 95       	com	r18
   10496:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <_ppr_reg>
   1049a:	82 23       	and	r24, r18
   1049c:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <_ppr_reg>
    ppr_set(_ppr_reg);
   104a0:	c2 cf       	rjmp	.-124    	; 0x10426 <ppr_set>
   104a2:	08 95       	ret

000104a4 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   104a4:	0f 93       	push	r16
   104a6:	1f 93       	push	r17
   104a8:	cf 93       	push	r28
   104aa:	df 93       	push	r29
   104ac:	00 d0       	rcall	.+0      	; 0x104ae <dbf_open+0xa>
   104ae:	00 d0       	rcall	.+0      	; 0x104b0 <dbf_open+0xc>
   104b0:	1f 92       	push	r1
   104b2:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   104b4:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <f_open>
   104b8:	ec 01       	movw	r28, r24
    if(rc)
   104ba:	89 2b       	or	r24, r25
   104bc:	79 f0       	breq	.+30     	; 0x104dc <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   104be:	ed b7       	in	r30, 0x3d	; 61
   104c0:	fe b7       	in	r31, 0x3e	; 62
   104c2:	15 83       	std	Z+5, r17	; 0x05
   104c4:	04 83       	std	Z+4, r16	; 0x04
   104c6:	86 eb       	ldi	r24, 0xB6	; 182
   104c8:	9e e0       	ldi	r25, 0x0E	; 14
   104ca:	a0 e0       	ldi	r26, 0x00	; 0
   104cc:	81 83       	std	Z+1, r24	; 0x01
   104ce:	92 83       	std	Z+2, r25	; 0x02
   104d0:	a3 83       	std	Z+3, r26	; 0x03
   104d2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        put_rc(rc);
   104d6:	ce 01       	movw	r24, r28
   104d8:	0e 94 a2 6e 	call	0xdd44	; 0xdd44 <put_rc>
        return (rc);
    }
    return(0);
}
   104dc:	ce 01       	movw	r24, r28
   104de:	cd b7       	in	r28, 0x3d	; 61
   104e0:	de b7       	in	r29, 0x3e	; 62
   104e2:	25 96       	adiw	r28, 0x05	; 5
   104e4:	e4 e0       	ldi	r30, 0x04	; 4
   104e6:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

000104ea <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   104ea:	cf 93       	push	r28
   104ec:	df 93       	push	r29
   104ee:	00 d0       	rcall	.+0      	; 0x104f0 <dbf_read+0x6>
   104f0:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   104f2:	0e 94 90 59 	call	0xb320	; 0xb320 <f_read>
   104f6:	ec 01       	movw	r28, r24
    if(rc)
   104f8:	89 2b       	or	r24, r25
   104fa:	69 f0       	breq	.+26     	; 0x10516 <dbf_read+0x2c>
    {
        printf("Read error: ");
   104fc:	89 ea       	ldi	r24, 0xA9	; 169
   104fe:	9e e0       	ldi	r25, 0x0E	; 14
   10500:	a0 e0       	ldi	r26, 0x00	; 0
   10502:	ed b7       	in	r30, 0x3d	; 61
   10504:	fe b7       	in	r31, 0x3e	; 62
   10506:	81 83       	std	Z+1, r24	; 0x01
   10508:	92 83       	std	Z+2, r25	; 0x02
   1050a:	a3 83       	std	Z+3, r26	; 0x03
   1050c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        put_rc(rc);
   10510:	ce 01       	movw	r24, r28
   10512:	0e 94 a2 6e 	call	0xdd44	; 0xdd44 <put_rc>
        return (rc);
    }
    return(0);
}
   10516:	ce 01       	movw	r24, r28
   10518:	cd b7       	in	r28, 0x3d	; 61
   1051a:	de b7       	in	r29, 0x3e	; 62
   1051c:	23 96       	adiw	r28, 0x03	; 3
   1051e:	e2 e0       	ldi	r30, 0x02	; 2
   10520:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00010524 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   10524:	cf 93       	push	r28
   10526:	df 93       	push	r29
   10528:	00 d0       	rcall	.+0      	; 0x1052a <dbf_write+0x6>
   1052a:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   1052c:	0e 94 db 5a 	call	0xb5b6	; 0xb5b6 <f_write>
   10530:	ec 01       	movw	r28, r24
    if(rc)
   10532:	89 2b       	or	r24, r25
   10534:	69 f0       	breq	.+26     	; 0x10550 <dbf_write+0x2c>
    {
        printf("Write error: ");
   10536:	8b e9       	ldi	r24, 0x9B	; 155
   10538:	9e e0       	ldi	r25, 0x0E	; 14
   1053a:	a0 e0       	ldi	r26, 0x00	; 0
   1053c:	ed b7       	in	r30, 0x3d	; 61
   1053e:	fe b7       	in	r31, 0x3e	; 62
   10540:	81 83       	std	Z+1, r24	; 0x01
   10542:	92 83       	std	Z+2, r25	; 0x02
   10544:	a3 83       	std	Z+3, r26	; 0x03
   10546:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        put_rc(rc);
   1054a:	ce 01       	movw	r24, r28
   1054c:	0e 94 a2 6e 	call	0xdd44	; 0xdd44 <put_rc>
        return (rc);
    }
    return(0);
}
   10550:	ce 01       	movw	r24, r28
   10552:	cd b7       	in	r28, 0x3d	; 61
   10554:	de b7       	in	r29, 0x3e	; 62
   10556:	23 96       	adiw	r28, 0x03	; 3
   10558:	e2 e0       	ldi	r30, 0x02	; 2
   1055a:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0001055e <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   1055e:	cf 93       	push	r28
   10560:	df 93       	push	r29
   10562:	00 d0       	rcall	.+0      	; 0x10564 <dbf_lseek+0x6>
   10564:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10566:	0e 94 9c 5e 	call	0xbd38	; 0xbd38 <f_lseek>
   1056a:	ec 01       	movw	r28, r24
    if(rc)
   1056c:	89 2b       	or	r24, r25
   1056e:	69 f0       	breq	.+26     	; 0x1058a <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10570:	8e e8       	ldi	r24, 0x8E	; 142
   10572:	9e e0       	ldi	r25, 0x0E	; 14
   10574:	a0 e0       	ldi	r26, 0x00	; 0
   10576:	ed b7       	in	r30, 0x3d	; 61
   10578:	fe b7       	in	r31, 0x3e	; 62
   1057a:	81 83       	std	Z+1, r24	; 0x01
   1057c:	92 83       	std	Z+2, r25	; 0x02
   1057e:	a3 83       	std	Z+3, r26	; 0x03
   10580:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        put_rc(rc);
   10584:	ce 01       	movw	r24, r28
   10586:	0e 94 a2 6e 	call	0xdd44	; 0xdd44 <put_rc>
        return (rc);
    }
    return(0);
}
   1058a:	ce 01       	movw	r24, r28
   1058c:	cd b7       	in	r28, 0x3d	; 61
   1058e:	de b7       	in	r29, 0x3e	; 62
   10590:	23 96       	adiw	r28, 0x03	; 3
   10592:	e2 e0       	ldi	r30, 0x02	; 2
   10594:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00010598 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10598:	cf 93       	push	r28
   1059a:	df 93       	push	r29
   1059c:	00 d0       	rcall	.+0      	; 0x1059e <dbf_close+0x6>
   1059e:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   105a0:	0e 94 f2 5c 	call	0xb9e4	; 0xb9e4 <f_close>
   105a4:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   105a6:	89 2b       	or	r24, r25
   105a8:	69 f0       	breq	.+26     	; 0x105c4 <dbf_close+0x2c>
    {
        printf("Close error: ");
   105aa:	80 e8       	ldi	r24, 0x80	; 128
   105ac:	9e e0       	ldi	r25, 0x0E	; 14
   105ae:	a0 e0       	ldi	r26, 0x00	; 0
   105b0:	ed b7       	in	r30, 0x3d	; 61
   105b2:	fe b7       	in	r31, 0x3e	; 62
   105b4:	81 83       	std	Z+1, r24	; 0x01
   105b6:	92 83       	std	Z+2, r25	; 0x02
   105b8:	a3 83       	std	Z+3, r26	; 0x03
   105ba:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        put_rc(rc);
   105be:	ce 01       	movw	r24, r28
   105c0:	0e 94 a2 6e 	call	0xdd44	; 0xdd44 <put_rc>
        return (rc);
    }
    return(0);
}
   105c4:	ce 01       	movw	r24, r28
   105c6:	cd b7       	in	r28, 0x3d	; 61
   105c8:	de b7       	in	r29, 0x3e	; 62
   105ca:	23 96       	adiw	r28, 0x03	; 3
   105cc:	e2 e0       	ldi	r30, 0x02	; 2
   105ce:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000105d2 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   105d2:	a6 e2       	ldi	r26, 0x26	; 38
   105d4:	b2 e0       	ldi	r27, 0x02	; 2
   105d6:	ef ee       	ldi	r30, 0xEF	; 239
   105d8:	f2 e8       	ldi	r31, 0x82	; 130
   105da:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
   105de:	4a 01       	movw	r8, r20
   105e0:	5b 01       	movw	r10, r22
   105e2:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   105e4:	cb 5d       	subi	r28, 0xDB	; 219
   105e6:	dd 4f       	sbci	r29, 0xFD	; 253
   105e8:	19 82       	std	Y+1, r1	; 0x01
   105ea:	18 82       	st	Y, r1
   105ec:	c5 52       	subi	r28, 0x25	; 37
   105ee:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   105f0:	43 e0       	ldi	r20, 0x03	; 3
   105f2:	bc 01       	movw	r22, r24
   105f4:	ce 01       	movw	r24, r28
   105f6:	01 96       	adiw	r24, 0x01	; 1
   105f8:	55 df       	rcall	.-342    	; 0x104a4 <dbf_open>
    if( rc != FR_OK)
   105fa:	89 2b       	or	r24, r25
   105fc:	19 f0       	breq	.+6      	; 0x10604 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   105fe:	81 e1       	ldi	r24, 0x11	; 17
   10600:	90 e0       	ldi	r25, 0x00	; 0
   10602:	2f c0       	rjmp	.+94     	; 0x10662 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10604:	b5 01       	movw	r22, r10
   10606:	a4 01       	movw	r20, r8
   10608:	ce 01       	movw	r24, r28
   1060a:	01 96       	adiw	r24, 0x01	; 1
   1060c:	a8 df       	rcall	.-176    	; 0x1055e <dbf_lseek>
    if( rc != FR_OK)
   1060e:	89 2b       	or	r24, r25
   10610:	59 f0       	breq	.+22     	; 0x10628 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10612:	85 e0       	ldi	r24, 0x05	; 5
   10614:	90 e0       	ldi	r25, 0x00	; 0
   10616:	f7 01       	movw	r30, r14
   10618:	91 83       	std	Z+1, r25	; 0x01
   1061a:	80 83       	st	Z, r24
        dbf_close(&fp);
   1061c:	ce 01       	movw	r24, r28
   1061e:	01 96       	adiw	r24, 0x01	; 1
   10620:	bb df       	rcall	.-138    	; 0x10598 <dbf_close>
        return( -1 );
   10622:	8f ef       	ldi	r24, 0xFF	; 255
   10624:	9f ef       	ldi	r25, 0xFF	; 255
   10626:	27 c0       	rjmp	.+78     	; 0x10676 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10628:	9e 01       	movw	r18, r28
   1062a:	2b 5d       	subi	r18, 0xDB	; 219
   1062c:	3d 4f       	sbci	r19, 0xFD	; 253
   1062e:	a8 01       	movw	r20, r16
   10630:	b6 01       	movw	r22, r12
   10632:	ce 01       	movw	r24, r28
   10634:	01 96       	adiw	r24, 0x01	; 1
   10636:	59 df       	rcall	.-334    	; 0x104ea <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10638:	89 2b       	or	r24, r25
   1063a:	49 f4       	brne	.+18     	; 0x1064e <dbf_open_read+0x7c>
   1063c:	cb 5d       	subi	r28, 0xDB	; 219
   1063e:	dd 4f       	sbci	r29, 0xFD	; 253
   10640:	88 81       	ld	r24, Y
   10642:	99 81       	ldd	r25, Y+1	; 0x01
   10644:	c5 52       	subi	r28, 0x25	; 37
   10646:	d2 40       	sbci	r29, 0x02	; 2
   10648:	08 17       	cp	r16, r24
   1064a:	19 07       	cpc	r17, r25
   1064c:	19 f0       	breq	.+6      	; 0x10654 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   1064e:	81 e0       	ldi	r24, 0x01	; 1
   10650:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10652:	e1 cf       	rjmp	.-62     	; 0x10616 <dbf_open_read+0x44>
   10654:	ce 01       	movw	r24, r28
   10656:	01 96       	adiw	r24, 0x01	; 1
   10658:	9f df       	rcall	.-194    	; 0x10598 <dbf_close>
    if( rc != FR_OK)
   1065a:	89 2b       	or	r24, r25
   1065c:	31 f0       	breq	.+12     	; 0x1066a <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   1065e:	80 e1       	ldi	r24, 0x10	; 16
   10660:	90 e0       	ldi	r25, 0x00	; 0
   10662:	f7 01       	movw	r30, r14
   10664:	91 83       	std	Z+1, r25	; 0x01
   10666:	80 83       	st	Z, r24
   10668:	dc cf       	rjmp	.-72     	; 0x10622 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   1066a:	cb 5d       	subi	r28, 0xDB	; 219
   1066c:	dd 4f       	sbci	r29, 0xFD	; 253
   1066e:	88 81       	ld	r24, Y
   10670:	99 81       	ldd	r25, Y+1	; 0x01
   10672:	c5 52       	subi	r28, 0x25	; 37
   10674:	d2 40       	sbci	r29, 0x02	; 2
}
   10676:	ca 5d       	subi	r28, 0xDA	; 218
   10678:	dd 4f       	sbci	r29, 0xFD	; 253
   1067a:	ec e0       	ldi	r30, 0x0C	; 12
   1067c:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

00010680 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10680:	a6 e2       	ldi	r26, 0x26	; 38
   10682:	b2 e0       	ldi	r27, 0x02	; 2
   10684:	e6 e4       	ldi	r30, 0x46	; 70
   10686:	f3 e8       	ldi	r31, 0x83	; 131
   10688:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
   1068c:	4a 01       	movw	r8, r20
   1068e:	5b 01       	movw	r10, r22
   10690:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10692:	cb 5d       	subi	r28, 0xDB	; 219
   10694:	dd 4f       	sbci	r29, 0xFD	; 253
   10696:	19 82       	std	Y+1, r1	; 0x01
   10698:	18 82       	st	Y, r1
   1069a:	c5 52       	subi	r28, 0x25	; 37
   1069c:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1069e:	43 e0       	ldi	r20, 0x03	; 3
   106a0:	bc 01       	movw	r22, r24
   106a2:	ce 01       	movw	r24, r28
   106a4:	01 96       	adiw	r24, 0x01	; 1
   106a6:	fe de       	rcall	.-516    	; 0x104a4 <dbf_open>
    if( rc != FR_OK)
   106a8:	89 2b       	or	r24, r25
   106aa:	19 f0       	breq	.+6      	; 0x106b2 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   106ac:	82 e1       	ldi	r24, 0x12	; 18
   106ae:	90 e0       	ldi	r25, 0x00	; 0
   106b0:	2f c0       	rjmp	.+94     	; 0x10710 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   106b2:	b5 01       	movw	r22, r10
   106b4:	a4 01       	movw	r20, r8
   106b6:	ce 01       	movw	r24, r28
   106b8:	01 96       	adiw	r24, 0x01	; 1
   106ba:	51 df       	rcall	.-350    	; 0x1055e <dbf_lseek>
    if( rc != FR_OK)
   106bc:	89 2b       	or	r24, r25
   106be:	59 f0       	breq	.+22     	; 0x106d6 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   106c0:	86 e0       	ldi	r24, 0x06	; 6
   106c2:	90 e0       	ldi	r25, 0x00	; 0
   106c4:	f7 01       	movw	r30, r14
   106c6:	91 83       	std	Z+1, r25	; 0x01
   106c8:	80 83       	st	Z, r24
        dbf_close(&fp);
   106ca:	ce 01       	movw	r24, r28
   106cc:	01 96       	adiw	r24, 0x01	; 1
   106ce:	64 df       	rcall	.-312    	; 0x10598 <dbf_close>
        return( -1 );
   106d0:	8f ef       	ldi	r24, 0xFF	; 255
   106d2:	9f ef       	ldi	r25, 0xFF	; 255
   106d4:	27 c0       	rjmp	.+78     	; 0x10724 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   106d6:	9e 01       	movw	r18, r28
   106d8:	2b 5d       	subi	r18, 0xDB	; 219
   106da:	3d 4f       	sbci	r19, 0xFD	; 253
   106dc:	a8 01       	movw	r20, r16
   106de:	b6 01       	movw	r22, r12
   106e0:	ce 01       	movw	r24, r28
   106e2:	01 96       	adiw	r24, 0x01	; 1
   106e4:	1f df       	rcall	.-450    	; 0x10524 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   106e6:	89 2b       	or	r24, r25
   106e8:	49 f4       	brne	.+18     	; 0x106fc <dbf_open_write+0x7c>
   106ea:	cb 5d       	subi	r28, 0xDB	; 219
   106ec:	dd 4f       	sbci	r29, 0xFD	; 253
   106ee:	88 81       	ld	r24, Y
   106f0:	99 81       	ldd	r25, Y+1	; 0x01
   106f2:	c5 52       	subi	r28, 0x25	; 37
   106f4:	d2 40       	sbci	r29, 0x02	; 2
   106f6:	08 17       	cp	r16, r24
   106f8:	19 07       	cpc	r17, r25
   106fa:	19 f0       	breq	.+6      	; 0x10702 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   106fc:	82 e0       	ldi	r24, 0x02	; 2
   106fe:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10700:	e1 cf       	rjmp	.-62     	; 0x106c4 <dbf_open_write+0x44>
   10702:	ce 01       	movw	r24, r28
   10704:	01 96       	adiw	r24, 0x01	; 1
   10706:	48 df       	rcall	.-368    	; 0x10598 <dbf_close>
    if( rc != FR_OK)
   10708:	89 2b       	or	r24, r25
   1070a:	31 f0       	breq	.+12     	; 0x10718 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   1070c:	80 e1       	ldi	r24, 0x10	; 16
   1070e:	90 e0       	ldi	r25, 0x00	; 0
   10710:	f7 01       	movw	r30, r14
   10712:	91 83       	std	Z+1, r25	; 0x01
   10714:	80 83       	st	Z, r24
   10716:	dc cf       	rjmp	.-72     	; 0x106d0 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10718:	cb 5d       	subi	r28, 0xDB	; 219
   1071a:	dd 4f       	sbci	r29, 0xFD	; 253
   1071c:	88 81       	ld	r24, Y
   1071e:	99 81       	ldd	r25, Y+1	; 0x01
   10720:	c5 52       	subi	r28, 0x25	; 37
   10722:	d2 40       	sbci	r29, 0x02	; 2
}
   10724:	ca 5d       	subi	r28, 0xDA	; 218
   10726:	dd 4f       	sbci	r29, 0xFD	; 253
   10728:	ec e0       	ldi	r30, 0x0C	; 12
   1072a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

0001072e <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   1072e:	0c 94 9e 33 	jmp	0x673c	; 0x673c <clock_elapsed_begin>
   10732:	08 95       	ret

00010734 <gpib_timer_reset>:
   10734:	f8 94       	cli
   10736:	ef ed       	ldi	r30, 0xDF	; 223
   10738:	fc e1       	ldi	r31, 0x1C	; 28
   1073a:	10 82       	st	Z, r1
   1073c:	11 82       	std	Z+1, r1	; 0x01
   1073e:	12 82       	std	Z+2, r1	; 0x02
   10740:	13 82       	std	Z+3, r1	; 0x03
   10742:	14 82       	std	Z+4, r1	; 0x04
   10744:	15 82       	std	Z+5, r1	; 0x05
   10746:	16 82       	std	Z+6, r1	; 0x06
   10748:	17 82       	std	Z+7, r1	; 0x07
   1074a:	81 e0       	ldi	r24, 0x01	; 1
   1074c:	80 87       	std	Z+8, r24	; 0x08
   1074e:	78 94       	sei
   10750:	08 95       	ret

00010752 <gpib_timer_elapsed_end>:
   10752:	0c 94 a4 33 	jmp	0x6748	; 0x6748 <clock_elapsed_end>
   10756:	08 95       	ret

00010758 <gpib_timer_task>:
   10758:	f8 94       	cli
   1075a:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   1075e:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   10762:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   10766:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   1076a:	89 2b       	or	r24, r25
   1076c:	8a 2b       	or	r24, r26
   1076e:	8b 2b       	or	r24, r27
   10770:	a1 f0       	breq	.+40     	; 0x1079a <gpib_timer_task+0x42>
   10772:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_timer+0x4>
   10776:	90 91 e4 1c 	lds	r25, 0x1CE4	; 0x801ce4 <gpib_timer+0x5>
   1077a:	a0 91 e5 1c 	lds	r26, 0x1CE5	; 0x801ce5 <gpib_timer+0x6>
   1077e:	b0 91 e6 1c 	lds	r27, 0x1CE6	; 0x801ce6 <gpib_timer+0x7>
   10782:	01 97       	sbiw	r24, 0x01	; 1
   10784:	a1 09       	sbc	r26, r1
   10786:	b1 09       	sbc	r27, r1
   10788:	80 93 e3 1c 	sts	0x1CE3, r24	; 0x801ce3 <gpib_timer+0x4>
   1078c:	90 93 e4 1c 	sts	0x1CE4, r25	; 0x801ce4 <gpib_timer+0x5>
   10790:	a0 93 e5 1c 	sts	0x1CE5, r26	; 0x801ce5 <gpib_timer+0x6>
   10794:	b0 93 e6 1c 	sts	0x1CE6, r27	; 0x801ce6 <gpib_timer+0x7>
   10798:	03 c0       	rjmp	.+6      	; 0x107a0 <gpib_timer_task+0x48>
   1079a:	81 e0       	ldi	r24, 0x01	; 1
   1079c:	80 93 e7 1c 	sts	0x1CE7, r24	; 0x801ce7 <gpib_timer+0x8>
   107a0:	78 94       	sei
   107a2:	08 95       	ret

000107a4 <gpib_timeout_set>:
   107a4:	f8 94       	cli
   107a6:	ef ed       	ldi	r30, 0xDF	; 223
   107a8:	fc e1       	ldi	r31, 0x1C	; 28
   107aa:	64 83       	std	Z+4, r22	; 0x04
   107ac:	75 83       	std	Z+5, r23	; 0x05
   107ae:	86 83       	std	Z+6, r24	; 0x06
   107b0:	97 83       	std	Z+7, r25	; 0x07
   107b2:	10 86       	std	Z+8, r1	; 0x08
   107b4:	78 94       	sei
   107b6:	08 95       	ret

000107b8 <gpib_bus_init>:
   107b8:	00 d0       	rcall	.+0      	; 0x107ba <gpib_bus_init+0x2>
   107ba:	1f 92       	push	r1
   107bc:	8f b7       	in	r24, 0x3f	; 63
   107be:	f8 94       	cli
   107c0:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
   107c4:	11 b8       	out	0x01, r1	; 1
   107c6:	9f ef       	ldi	r25, 0xFF	; 255
   107c8:	92 b9       	out	0x02, r25	; 2
   107ca:	21 98       	cbi	0x04, 1	; 4
   107cc:	29 9a       	sbi	0x05, 1	; 5
   107ce:	52 98       	cbi	0x0a, 2	; 10
   107d0:	5a 9a       	sbi	0x0b, 2	; 11
   107d2:	53 98       	cbi	0x0a, 3	; 10
   107d4:	5b 9a       	sbi	0x0b, 3	; 11
   107d6:	56 98       	cbi	0x0a, 6	; 10
   107d8:	5e 9a       	sbi	0x0b, 6	; 11
   107da:	54 98       	cbi	0x0a, 4	; 10
   107dc:	5c 9a       	sbi	0x0b, 4	; 11
   107de:	57 98       	cbi	0x0a, 7	; 10
   107e0:	5f 9a       	sbi	0x0b, 7	; 11
   107e2:	55 98       	cbi	0x0a, 5	; 10
   107e4:	5d 9a       	sbi	0x0b, 5	; 11
   107e6:	20 98       	cbi	0x04, 0	; 4
   107e8:	28 9a       	sbi	0x05, 0	; 5
   107ea:	45 98       	cbi	0x08, 5	; 8
   107ec:	3d 9a       	sbi	0x07, 5	; 7
   107ee:	44 9a       	sbi	0x08, 4	; 8
   107f0:	3c 9a       	sbi	0x07, 4	; 7
   107f2:	43 98       	cbi	0x08, 3	; 8
   107f4:	3b 9a       	sbi	0x07, 3	; 7
   107f6:	42 98       	cbi	0x08, 2	; 8
   107f8:	3a 9a       	sbi	0x07, 2	; 7
   107fa:	9d e0       	ldi	r25, 0x0D	; 13
   107fc:	9a 95       	dec	r25
   107fe:	f1 f7       	brne	.-4      	; 0x107fc <gpib_bus_init+0x44>
   10800:	00 00       	nop
   10802:	8f bf       	out	0x3f, r24	; 63
   10804:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10808:	82 ff       	sbrs	r24, 2
   1080a:	0a c0       	rjmp	.+20     	; 0x10820 <gpib_bus_init+0x68>
   1080c:	88 e1       	ldi	r24, 0x18	; 24
   1080e:	92 e1       	ldi	r25, 0x12	; 18
   10810:	a0 e0       	ldi	r26, 0x00	; 0
   10812:	ed b7       	in	r30, 0x3d	; 61
   10814:	fe b7       	in	r31, 0x3e	; 62
   10816:	81 83       	std	Z+1, r24	; 0x01
   10818:	92 83       	std	Z+2, r25	; 0x02
   1081a:	a3 83       	std	Z+3, r26	; 0x03
   1081c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10820:	0f 90       	pop	r0
   10822:	0f 90       	pop	r0
   10824:	0f 90       	pop	r0
   10826:	08 95       	ret

00010828 <gpib_rx_init>:
   10828:	9f b7       	in	r25, 0x3f	; 63
   1082a:	f8 94       	cli
   1082c:	11 b8       	out	0x01, r1	; 1
   1082e:	2f ef       	ldi	r18, 0xFF	; 255
   10830:	22 b9       	out	0x02, r18	; 2
   10832:	21 98       	cbi	0x04, 1	; 4
   10834:	29 9a       	sbi	0x05, 1	; 5
   10836:	20 98       	cbi	0x04, 0	; 4
   10838:	28 9a       	sbi	0x05, 0	; 5
   1083a:	4e 9b       	sbis	0x09, 6	; 9
   1083c:	09 c0       	rjmp	.+18     	; 0x10850 <gpib_rx_init+0x28>
   1083e:	81 11       	cpse	r24, r1
   10840:	07 c0       	rjmp	.+14     	; 0x10850 <gpib_rx_init+0x28>
   10842:	52 98       	cbi	0x0a, 2	; 10
   10844:	5a 9a       	sbi	0x0b, 2	; 11
   10846:	53 98       	cbi	0x0a, 3	; 10
   10848:	5b 9a       	sbi	0x0b, 3	; 11
   1084a:	42 98       	cbi	0x08, 2	; 8
   1084c:	3a 9a       	sbi	0x07, 2	; 7
   1084e:	08 c0       	rjmp	.+16     	; 0x10860 <gpib_rx_init+0x38>
   10850:	42 98       	cbi	0x08, 2	; 8
   10852:	3a 9a       	sbi	0x07, 2	; 7
   10854:	5b 98       	cbi	0x0b, 3	; 11
   10856:	53 9a       	sbi	0x0a, 3	; 10
   10858:	5a 98       	cbi	0x0b, 2	; 11
   1085a:	52 9a       	sbi	0x0a, 2	; 10
   1085c:	88 23       	and	r24, r24
   1085e:	89 f3       	breq	.-30     	; 0x10842 <gpib_rx_init+0x1a>
   10860:	9f bf       	out	0x3f, r25	; 63
   10862:	08 95       	ret

00010864 <gpib_tx_init>:
   10864:	9f b7       	in	r25, 0x3f	; 63
   10866:	f8 94       	cli
   10868:	11 b8       	out	0x01, r1	; 1
   1086a:	8f ef       	ldi	r24, 0xFF	; 255
   1086c:	82 b9       	out	0x02, r24	; 2
   1086e:	21 98       	cbi	0x04, 1	; 4
   10870:	29 9a       	sbi	0x05, 1	; 5
   10872:	52 98       	cbi	0x0a, 2	; 10
   10874:	5a 9a       	sbi	0x0b, 2	; 11
   10876:	53 98       	cbi	0x0a, 3	; 10
   10878:	5b 9a       	sbi	0x0b, 3	; 11
   1087a:	20 98       	cbi	0x04, 0	; 4
   1087c:	28 9a       	sbi	0x05, 0	; 5
   1087e:	42 9a       	sbi	0x08, 2	; 8
   10880:	3a 9a       	sbi	0x07, 2	; 7
   10882:	81 b9       	out	0x01, r24	; 1
   10884:	9f bf       	out	0x3f, r25	; 63
   10886:	08 95       	ret

00010888 <gpib_state_init>:
   10888:	00 d0       	rcall	.+0      	; 0x1088a <gpib_state_init+0x2>
   1088a:	1f 92       	push	r1
   1088c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10890:	82 ff       	sbrs	r24, 2
   10892:	0a c0       	rjmp	.+20     	; 0x108a8 <gpib_state_init+0x20>
   10894:	85 e0       	ldi	r24, 0x05	; 5
   10896:	92 e1       	ldi	r25, 0x12	; 18
   10898:	a0 e0       	ldi	r26, 0x00	; 0
   1089a:	ed b7       	in	r30, 0x3d	; 61
   1089c:	fe b7       	in	r31, 0x3e	; 62
   1089e:	81 83       	std	Z+1, r24	; 0x01
   108a0:	92 83       	std	Z+2, r25	; 0x02
   108a2:	a3 83       	std	Z+3, r26	; 0x03
   108a4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   108a8:	cc dd       	rcall	.-1128   	; 0x10442 <ppr_init>
   108aa:	0e 94 dd 8e 	call	0x11dba	; 0x11dba <listen_cleanup>
   108ae:	0e 94 f3 8f 	call	0x11fe6	; 0x11fe6 <talk_cleanup>
   108b2:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   108b6:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking>
   108ba:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking_last>
   108be:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>
   108c2:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <listening_last>
   108c6:	10 92 e9 1c 	sts	0x1CE9, r1	; 0x801ce9 <lastcmd+0x1>
   108ca:	10 92 e8 1c 	sts	0x1CE8, r1	; 0x801ce8 <lastcmd>
   108ce:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
   108d2:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   108d6:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
   108da:	0f 90       	pop	r0
   108dc:	0f 90       	pop	r0
   108de:	0f 90       	pop	r0
   108e0:	08 95       	ret

000108e2 <gpib_enable_PPR>:
   108e2:	cf 93       	push	r28
   108e4:	df 93       	push	r29
   108e6:	ad b7       	in	r26, 0x3d	; 61
   108e8:	be b7       	in	r27, 0x3e	; 62
   108ea:	17 97       	sbiw	r26, 0x07	; 7
   108ec:	0f b6       	in	r0, 0x3f	; 63
   108ee:	f8 94       	cli
   108f0:	be bf       	out	0x3e, r27	; 62
   108f2:	0f be       	out	0x3f, r0	; 63
   108f4:	ad bf       	out	0x3d, r26	; 61
   108f6:	ec 01       	movw	r28, r24
   108f8:	88 30       	cpi	r24, 0x08	; 8
   108fa:	91 05       	cpc	r25, r1
   108fc:	68 f0       	brcs	.+26     	; 0x10918 <gpib_enable_PPR+0x36>
   108fe:	ed b7       	in	r30, 0x3d	; 61
   10900:	fe b7       	in	r31, 0x3e	; 62
   10902:	95 83       	std	Z+5, r25	; 0x05
   10904:	84 83       	std	Z+4, r24	; 0x04
   10906:	8f ed       	ldi	r24, 0xDF	; 223
   10908:	91 e1       	ldi	r25, 0x11	; 17
   1090a:	a0 e0       	ldi	r26, 0x00	; 0
   1090c:	81 83       	std	Z+1, r24	; 0x01
   1090e:	92 83       	std	Z+2, r25	; 0x02
   10910:	a3 83       	std	Z+3, r26	; 0x03
   10912:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10916:	15 c0       	rjmp	.+42     	; 0x10942 <gpib_enable_PPR+0x60>
   10918:	aa dd       	rcall	.-1196   	; 0x1046e <ppr_bit_set>
   1091a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1091e:	81 ff       	sbrs	r24, 1
   10920:	10 c0       	rjmp	.+32     	; 0x10942 <gpib_enable_PPR+0x60>
   10922:	8b dd       	rcall	.-1258   	; 0x1043a <ppr_reg>
   10924:	90 e0       	ldi	r25, 0x00	; 0
   10926:	ed b7       	in	r30, 0x3d	; 61
   10928:	fe b7       	in	r31, 0x3e	; 62
   1092a:	97 83       	std	Z+7, r25	; 0x07
   1092c:	86 83       	std	Z+6, r24	; 0x06
   1092e:	d5 83       	std	Z+5, r29	; 0x05
   10930:	c4 83       	std	Z+4, r28	; 0x04
   10932:	84 ec       	ldi	r24, 0xC4	; 196
   10934:	91 e1       	ldi	r25, 0x11	; 17
   10936:	a0 e0       	ldi	r26, 0x00	; 0
   10938:	81 83       	std	Z+1, r24	; 0x01
   1093a:	92 83       	std	Z+2, r25	; 0x02
   1093c:	a3 83       	std	Z+3, r26	; 0x03
   1093e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10942:	cd b7       	in	r28, 0x3d	; 61
   10944:	de b7       	in	r29, 0x3e	; 62
   10946:	27 96       	adiw	r28, 0x07	; 7
   10948:	e2 e0       	ldi	r30, 0x02	; 2
   1094a:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0001094e <gpib_disable_PPR>:
   1094e:	cf 93       	push	r28
   10950:	df 93       	push	r29
   10952:	ad b7       	in	r26, 0x3d	; 61
   10954:	be b7       	in	r27, 0x3e	; 62
   10956:	17 97       	sbiw	r26, 0x07	; 7
   10958:	0f b6       	in	r0, 0x3f	; 63
   1095a:	f8 94       	cli
   1095c:	be bf       	out	0x3e, r27	; 62
   1095e:	0f be       	out	0x3f, r0	; 63
   10960:	ad bf       	out	0x3d, r26	; 61
   10962:	ec 01       	movw	r28, r24
   10964:	88 30       	cpi	r24, 0x08	; 8
   10966:	91 05       	cpc	r25, r1
   10968:	68 f0       	brcs	.+26     	; 0x10984 <gpib_disable_PPR+0x36>
   1096a:	ed b7       	in	r30, 0x3d	; 61
   1096c:	fe b7       	in	r31, 0x3e	; 62
   1096e:	95 83       	std	Z+5, r25	; 0x05
   10970:	84 83       	std	Z+4, r24	; 0x04
   10972:	8d e9       	ldi	r24, 0x9D	; 157
   10974:	91 e1       	ldi	r25, 0x11	; 17
   10976:	a0 e0       	ldi	r26, 0x00	; 0
   10978:	81 83       	std	Z+1, r24	; 0x01
   1097a:	92 83       	std	Z+2, r25	; 0x02
   1097c:	a3 83       	std	Z+3, r26	; 0x03
   1097e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10982:	15 c0       	rjmp	.+42     	; 0x109ae <gpib_disable_PPR+0x60>
   10984:	81 dd       	rcall	.-1278   	; 0x10488 <ppr_bit_clr>
   10986:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1098a:	81 ff       	sbrs	r24, 1
   1098c:	10 c0       	rjmp	.+32     	; 0x109ae <gpib_disable_PPR+0x60>
   1098e:	55 dd       	rcall	.-1366   	; 0x1043a <ppr_reg>
   10990:	90 e0       	ldi	r25, 0x00	; 0
   10992:	ed b7       	in	r30, 0x3d	; 61
   10994:	fe b7       	in	r31, 0x3e	; 62
   10996:	97 83       	std	Z+7, r25	; 0x07
   10998:	86 83       	std	Z+6, r24	; 0x06
   1099a:	d5 83       	std	Z+5, r29	; 0x05
   1099c:	c4 83       	std	Z+4, r28	; 0x04
   1099e:	82 e8       	ldi	r24, 0x82	; 130
   109a0:	91 e1       	ldi	r25, 0x11	; 17
   109a2:	a0 e0       	ldi	r26, 0x00	; 0
   109a4:	81 83       	std	Z+1, r24	; 0x01
   109a6:	92 83       	std	Z+2, r25	; 0x02
   109a8:	a3 83       	std	Z+3, r26	; 0x03
   109aa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   109ae:	cd b7       	in	r28, 0x3d	; 61
   109b0:	de b7       	in	r29, 0x3e	; 62
   109b2:	27 96       	adiw	r28, 0x07	; 7
   109b4:	e2 e0       	ldi	r30, 0x02	; 2
   109b6:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000109ba <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   109ba:	cf 93       	push	r28
   109bc:	df 93       	push	r29
   109be:	00 d0       	rcall	.+0      	; 0x109c0 <gpib_unread+0x6>
   109c0:	1f 92       	push	r1
   109c2:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   109c4:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <gpib_unread_f>
   109c8:	81 11       	cpse	r24, r1
   109ca:	08 c0       	rjmp	.+16     	; 0x109dc <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   109cc:	d0 93 f3 1e 	sts	0x1EF3, r29	; 0x801ef3 <gpib_unread_data+0x1>
   109d0:	c0 93 f2 1e 	sts	0x1EF2, r28	; 0x801ef2 <gpib_unread_data>
        gpib_unread_f = 1;
   109d4:	81 e0       	ldi	r24, 0x01	; 1
   109d6:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <gpib_unread_f>
   109da:	12 c0       	rjmp	.+36     	; 0x10a00 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   109dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   109e4:	85 70       	andi	r24, 0x05	; 5
   109e6:	99 27       	eor	r25, r25
   109e8:	89 2b       	or	r24, r25
   109ea:	51 f0       	breq	.+20     	; 0x10a00 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   109ec:	84 e5       	ldi	r24, 0x54	; 84
   109ee:	91 e1       	ldi	r25, 0x11	; 17
   109f0:	a0 e0       	ldi	r26, 0x00	; 0
   109f2:	ed b7       	in	r30, 0x3d	; 61
   109f4:	fe b7       	in	r31, 0x3e	; 62
   109f6:	81 83       	std	Z+1, r24	; 0x01
   109f8:	92 83       	std	Z+2, r25	; 0x02
   109fa:	a3 83       	std	Z+3, r26	; 0x03
   109fc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
    return(ch);
}
   10a00:	ce 01       	movw	r24, r28
   10a02:	cd b7       	in	r28, 0x3d	; 61
   10a04:	de b7       	in	r29, 0x3e	; 62
   10a06:	23 96       	adiw	r28, 0x03	; 3
   10a08:	e2 e0       	ldi	r30, 0x02	; 2
   10a0a:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00010a0e <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10a0e:	11 b8       	out	0x01, r1	; 1
   10a10:	80 b1       	in	r24, 0x00	; 0
   10a12:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10a14:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10a16:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10a18:	08 95       	ret

00010a1a <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10a1a:	4e 99       	sbic	0x09, 6	; 9
   10a1c:	03 c0       	rjmp	.+6      	; 0x10a24 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10a1e:	80 e0       	ldi	r24, 0x00	; 0
   10a20:	94 e0       	ldi	r25, 0x04	; 4
   10a22:	02 c0       	rjmp	.+4      	; 0x10a28 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10a24:	80 e0       	ldi	r24, 0x00	; 0
   10a26:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10a28:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10a2a:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10a2c:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10a2e:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10a30:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10a32:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10a34:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10a36:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10a38:	08 95       	ret

00010a3a <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10a3a:	19 99       	sbic	0x03, 1	; 3
   10a3c:	03 c0       	rjmp	.+6      	; 0x10a44 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10a3e:	80 e0       	ldi	r24, 0x00	; 0
   10a40:	90 e2       	ldi	r25, 0x20	; 32
   10a42:	02 c0       	rjmp	.+4      	; 0x10a48 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10a44:	80 e0       	ldi	r24, 0x00	; 0
   10a46:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10a48:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10a4a:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10a4c:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10a4e:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10a50:	08 95       	ret

00010a52 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10a52:	2f 92       	push	r2
   10a54:	3f 92       	push	r3
   10a56:	4f 92       	push	r4
   10a58:	6f 92       	push	r6
   10a5a:	7f 92       	push	r7
   10a5c:	8f 92       	push	r8
   10a5e:	af 92       	push	r10
   10a60:	bf 92       	push	r11
   10a62:	cf 92       	push	r12
   10a64:	df 92       	push	r13
   10a66:	ef 92       	push	r14
   10a68:	1f 93       	push	r17
   10a6a:	cf 93       	push	r28
   10a6c:	df 93       	push	r29
   10a6e:	cd b7       	in	r28, 0x3d	; 61
   10a70:	de b7       	in	r29, 0x3e	; 62
   10a72:	2a 97       	sbiw	r28, 0x0a	; 10
   10a74:	0f b6       	in	r0, 0x3f	; 63
   10a76:	f8 94       	cli
   10a78:	de bf       	out	0x3e, r29	; 62
   10a7a:	0f be       	out	0x3f, r0	; 63
   10a7c:	cd bf       	out	0x3d, r28	; 61
   10a7e:	9a 87       	std	Y+10, r25	; 0x0a
   10a80:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10a82:	64 ef       	ldi	r22, 0xF4	; 244
   10a84:	71 e0       	ldi	r23, 0x01	; 1
   10a86:	80 e0       	ldi	r24, 0x00	; 0
   10a88:	90 e0       	ldi	r25, 0x00	; 0
   10a8a:	8c de       	rcall	.-744    	; 0x107a4 <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10a8c:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10a8e:	8f e4       	ldi	r24, 0x4F	; 79
   10a90:	90 e1       	ldi	r25, 0x10	; 16
   10a92:	6c 01       	movw	r12, r24
   10a94:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10a96:	8e e7       	ldi	r24, 0x7E	; 126
   10a98:	90 e1       	ldi	r25, 0x10	; 16
   10a9a:	3c 01       	movw	r6, r24
   10a9c:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10a9e:	aa 24       	eor	r10, r10
   10aa0:	a3 94       	inc	r10
   10aa2:	b1 2c       	mov	r11, r1
   10aa4:	86 ef       	ldi	r24, 0xF6	; 246
   10aa6:	90 e1       	ldi	r25, 0x10	; 16
   10aa8:	1c 01       	movw	r2, r24
   10aaa:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10aac:	8a eb       	ldi	r24, 0xBA	; 186
   10aae:	90 e1       	ldi	r25, 0x10	; 16
   10ab0:	9c 01       	movw	r18, r24
   10ab2:	40 e0       	ldi	r20, 0x00	; 0
   10ab4:	2e 83       	std	Y+6, r18	; 0x06
   10ab6:	3f 83       	std	Y+7, r19	; 0x07
   10ab8:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10aba:	80 e0       	ldi	r24, 0x00	; 0
   10abc:	0e 94 95 28 	call	0x512a	; 0x512a <uart_keyhit>
   10ac0:	89 2b       	or	r24, r25
   10ac2:	09 f0       	breq	.+2      	; 0x10ac6 <gpib_write_byte+0x74>
   10ac4:	e7 c0       	rjmp	.+462    	; 0x10c94 <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10ac6:	4c 99       	sbic	0x09, 4	; 9
   10ac8:	19 c0       	rjmp	.+50     	; 0x10afc <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10aca:	89 85       	ldd	r24, Y+9	; 0x09
   10acc:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ace:	90 61       	ori	r25, 0x10	; 16
   10ad0:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10ad2:	89 87       	std	Y+9, r24	; 0x09
   10ad4:	71 de       	rcall	.-798    	; 0x107b8 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10ad6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ada:	80 ff       	sbrs	r24, 0
   10adc:	db c0       	rjmp	.+438    	; 0x10c94 <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10ade:	81 2f       	mov	r24, r17
   10ae0:	90 e0       	ldi	r25, 0x00	; 0
   10ae2:	ed b7       	in	r30, 0x3d	; 61
   10ae4:	fe b7       	in	r31, 0x3e	; 62
   10ae6:	95 83       	std	Z+5, r25	; 0x05
   10ae8:	84 83       	std	Z+4, r24	; 0x04
   10aea:	85 e3       	ldi	r24, 0x35	; 53
   10aec:	91 e1       	ldi	r25, 0x11	; 17
   10aee:	a0 e0       	ldi	r26, 0x00	; 0
   10af0:	81 83       	std	Z+1, r24	; 0x01
   10af2:	92 83       	std	Z+2, r25	; 0x02
   10af4:	a3 83       	std	Z+3, r26	; 0x03
   10af6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10afa:	cc c0       	rjmp	.+408    	; 0x10c94 <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10afc:	81 2f       	mov	r24, r17
   10afe:	90 e0       	ldi	r25, 0x00	; 0
   10b00:	89 30       	cpi	r24, 0x09	; 9
   10b02:	91 05       	cpc	r25, r1
   10b04:	08 f0       	brcs	.+2      	; 0x10b08 <gpib_write_byte+0xb6>
   10b06:	be c0       	rjmp	.+380    	; 0x10c84 <gpib_write_byte+0x232>
   10b08:	fc 01       	movw	r30, r24
   10b0a:	e3 54       	subi	r30, 0x43	; 67
   10b0c:	ff 4f       	sbci	r31, 0xFF	; 255
   10b0e:	0c 94 be e2 	jmp	0x1c57c	; 0x1c57c <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10b12:	a8 de       	rcall	.-688    	; 0x10864 <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10b14:	21 98       	cbi	0x04, 1	; 4
   10b16:	29 9a       	sbi	0x05, 1	; 5
   10b18:	fd e0       	ldi	r31, 0x0D	; 13
   10b1a:	fa 95       	dec	r31
   10b1c:	f1 f7       	brne	.-4      	; 0x10b1a <gpib_write_byte+0xc8>
   10b1e:	00 00       	nop
   10b20:	06 c0       	rjmp	.+12     	; 0x10b2e <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10b22:	4a 9b       	sbis	0x09, 2	; 9
   10b24:	02 c0       	rjmp	.+4      	; 0x10b2a <gpib_write_byte+0xd8>
   10b26:	4b 99       	sbic	0x09, 3	; 9
   10b28:	17 c0       	rjmp	.+46     	; 0x10b58 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10b2a:	4e 9b       	sbis	0x09, 6	; 9
   10b2c:	07 c0       	rjmp	.+14     	; 0x10b3c <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10b2e:	64 ef       	ldi	r22, 0xF4	; 244
   10b30:	71 e0       	ldi	r23, 0x01	; 1
   10b32:	80 e0       	ldi	r24, 0x00	; 0
   10b34:	90 e0       	ldi	r25, 0x00	; 0
   10b36:	36 de       	rcall	.-916    	; 0x107a4 <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10b38:	12 e0       	ldi	r17, 0x02	; 2
   10b3a:	bf cf       	rjmp	.-130    	; 0x10aba <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10b3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b40:	80 ff       	sbrs	r24, 0
   10b42:	bb cf       	rjmp	.-138    	; 0x10aba <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10b44:	ed b7       	in	r30, 0x3d	; 61
   10b46:	fe b7       	in	r31, 0x3e	; 62
   10b48:	b5 82       	std	Z+5, r11	; 0x05
   10b4a:	a4 82       	std	Z+4, r10	; 0x04
   10b4c:	21 82       	std	Z+1, r2	; 0x01
   10b4e:	32 82       	std	Z+2, r3	; 0x02
   10b50:	43 82       	std	Z+3, r4	; 0x03
   10b52:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10b56:	b1 cf       	rjmp	.-158    	; 0x10aba <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10b58:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10b5c:	88 23       	and	r24, r24
   10b5e:	09 f4       	brne	.+2      	; 0x10b62 <gpib_write_byte+0x110>
   10b60:	ac cf       	rjmp	.-168    	; 0x10aba <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b66:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10b6a:	85 70       	andi	r24, 0x05	; 5
   10b6c:	99 27       	eor	r25, r25
   10b6e:	89 2b       	or	r24, r25
   10b70:	c1 f1       	breq	.+112    	; 0x10be2 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10b72:	2e 81       	ldd	r18, Y+6	; 0x06
   10b74:	3f 81       	ldd	r19, Y+7	; 0x07
   10b76:	48 85       	ldd	r20, Y+8	; 0x08
   10b78:	ed b7       	in	r30, 0x3d	; 61
   10b7a:	fe b7       	in	r31, 0x3e	; 62
   10b7c:	21 83       	std	Z+1, r18	; 0x01
   10b7e:	32 83       	std	Z+2, r19	; 0x02
   10b80:	43 83       	std	Z+3, r20	; 0x03
   10b82:	2d c0       	rjmp	.+90     	; 0x10bde <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10b84:	89 85       	ldd	r24, Y+9	; 0x09
   10b86:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b88:	90 ff       	sbrs	r25, 0
   10b8a:	03 c0       	rjmp	.+6      	; 0x10b92 <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10b8c:	28 98       	cbi	0x05, 0	; 5
   10b8e:	20 9a       	sbi	0x04, 0	; 4
   10b90:	02 c0       	rjmp	.+4      	; 0x10b96 <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10b92:	20 98       	cbi	0x04, 0	; 4
   10b94:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10b96:	8f ef       	ldi	r24, 0xFF	; 255
   10b98:	81 b9       	out	0x01, r24	; 1
   10b9a:	89 85       	ldd	r24, Y+9	; 0x09
   10b9c:	80 95       	com	r24
   10b9e:	82 b9       	out	0x02, r24	; 2
   10ba0:	9d e0       	ldi	r25, 0x0D	; 13
   10ba2:	9a 95       	dec	r25
   10ba4:	f1 f7       	brne	.-4      	; 0x10ba2 <gpib_write_byte+0x150>
   10ba6:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10ba8:	64 ef       	ldi	r22, 0xF4	; 244
   10baa:	71 e0       	ldi	r23, 0x01	; 1
   10bac:	80 e0       	ldi	r24, 0x00	; 0
   10bae:	90 e0       	ldi	r25, 0x00	; 0
   10bb0:	f9 dd       	rcall	.-1038   	; 0x107a4 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10bb2:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10bb4:	82 cf       	rjmp	.-252    	; 0x10aba <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10bb6:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10bb8:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10bba:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10bbe:	88 23       	and	r24, r24
   10bc0:	09 f4       	brne	.+2      	; 0x10bc4 <gpib_write_byte+0x172>
   10bc2:	7b cf       	rjmp	.-266    	; 0x10aba <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10bc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10bc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10bcc:	85 70       	andi	r24, 0x05	; 5
   10bce:	99 27       	eor	r25, r25
   10bd0:	89 2b       	or	r24, r25
   10bd2:	39 f0       	breq	.+14     	; 0x10be2 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10bd4:	ed b7       	in	r30, 0x3d	; 61
   10bd6:	fe b7       	in	r31, 0x3e	; 62
   10bd8:	61 82       	std	Z+1, r6	; 0x01
   10bda:	72 82       	std	Z+2, r7	; 0x02
   10bdc:	83 82       	std	Z+3, r8	; 0x03
   10bde:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10be2:	29 85       	ldd	r18, Y+9	; 0x09
   10be4:	3a 85       	ldd	r19, Y+10	; 0x0a
   10be6:	30 64       	ori	r19, 0x40	; 64
   10be8:	3a 87       	std	Y+10, r19	; 0x0a
   10bea:	29 87       	std	Y+9, r18	; 0x09
   10bec:	51 c0       	rjmp	.+162    	; 0x10c90 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10bee:	29 98       	cbi	0x05, 1	; 5
   10bf0:	21 9a       	sbi	0x04, 1	; 4
   10bf2:	3d e0       	ldi	r19, 0x0D	; 13
   10bf4:	3a 95       	dec	r19
   10bf6:	f1 f7       	brne	.-4      	; 0x10bf4 <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10bf8:	00 00       	nop
   10bfa:	64 ef       	ldi	r22, 0xF4	; 244
   10bfc:	71 e0       	ldi	r23, 0x01	; 1
   10bfe:	80 e0       	ldi	r24, 0x00	; 0
   10c00:	90 e0       	ldi	r25, 0x00	; 0
   10c02:	d0 dd       	rcall	.-1120   	; 0x107a4 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10c04:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10c06:	59 cf       	rjmp	.-334    	; 0x10aba <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10c08:	4b 99       	sbic	0x09, 3	; 9
   10c0a:	40 c0       	rjmp	.+128    	; 0x10c8c <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c0c:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10c10:	88 23       	and	r24, r24
   10c12:	09 f4       	brne	.+2      	; 0x10c16 <gpib_write_byte+0x1c4>
   10c14:	52 cf       	rjmp	.-348    	; 0x10aba <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10c16:	89 85       	ldd	r24, Y+9	; 0x09
   10c18:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c1a:	90 64       	ori	r25, 0x40	; 64
   10c1c:	9a 87       	std	Y+10, r25	; 0x0a
   10c1e:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c24:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c28:	85 70       	andi	r24, 0x05	; 5
   10c2a:	99 27       	eor	r25, r25
   10c2c:	89 2b       	or	r24, r25
   10c2e:	81 f1       	breq	.+96     	; 0x10c90 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10c30:	ed b7       	in	r30, 0x3d	; 61
   10c32:	fe b7       	in	r31, 0x3e	; 62
   10c34:	c1 82       	std	Z+1, r12	; 0x01
   10c36:	d2 82       	std	Z+2, r13	; 0x02
   10c38:	e3 82       	std	Z+3, r14	; 0x03
   10c3a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10c3e:	28 c0       	rjmp	.+80     	; 0x10c90 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10c40:	21 98       	cbi	0x04, 1	; 4
   10c42:	29 9a       	sbi	0x05, 1	; 5
   10c44:	fd e0       	ldi	r31, 0x0D	; 13
   10c46:	fa 95       	dec	r31
   10c48:	f1 f7       	brne	.-4      	; 0x10c46 <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10c4a:	00 00       	nop
   10c4c:	64 ef       	ldi	r22, 0xF4	; 244
   10c4e:	71 e0       	ldi	r23, 0x01	; 1
   10c50:	80 e0       	ldi	r24, 0x00	; 0
   10c52:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10c54:	a7 dd       	rcall	.-1202   	; 0x107a4 <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10c56:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10c58:	30 cf       	rjmp	.-416    	; 0x10aba <gpib_write_byte+0x68>
   10c5a:	81 e0       	ldi	r24, 0x01	; 1
   10c5c:	e5 dd       	rcall	.-1078   	; 0x10828 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c62:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c66:	85 70       	andi	r24, 0x05	; 5
   10c68:	99 27       	eor	r25, r25
   10c6a:	89 2b       	or	r24, r25
   10c6c:	99 f0       	breq	.+38     	; 0x10c94 <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   10c6e:	8c e3       	ldi	r24, 0x3C	; 60
   10c70:	90 e1       	ldi	r25, 0x10	; 16
   10c72:	a0 e0       	ldi	r26, 0x00	; 0
   10c74:	ed b7       	in	r30, 0x3d	; 61
   10c76:	fe b7       	in	r31, 0x3e	; 62
   10c78:	81 83       	std	Z+1, r24	; 0x01
   10c7a:	92 83       	std	Z+2, r25	; 0x02
   10c7c:	a3 83       	std	Z+3, r26	; 0x03
   10c7e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   10c82:	08 c0       	rjmp	.+16     	; 0x10c94 <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10c84:	19 30       	cpi	r17, 0x09	; 9
   10c86:	09 f0       	breq	.+2      	; 0x10c8a <gpib_write_byte+0x238>
   10c88:	18 cf       	rjmp	.-464    	; 0x10aba <gpib_write_byte+0x68>
   10c8a:	04 c0       	rjmp	.+8      	; 0x10c94 <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10c8c:	16 e0       	ldi	r17, 0x06	; 6
   10c8e:	15 cf       	rjmp	.-470    	; 0x10aba <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10c90:	18 e0       	ldi	r17, 0x08	; 8
   10c92:	13 cf       	rjmp	.-474    	; 0x10aba <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10c94:	89 85       	ldd	r24, Y+9	; 0x09
   10c96:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c98:	2a 96       	adiw	r28, 0x0a	; 10
   10c9a:	0f b6       	in	r0, 0x3f	; 63
   10c9c:	f8 94       	cli
   10c9e:	de bf       	out	0x3e, r29	; 62
   10ca0:	0f be       	out	0x3f, r0	; 63
   10ca2:	cd bf       	out	0x3d, r28	; 61
   10ca4:	df 91       	pop	r29
   10ca6:	cf 91       	pop	r28
   10ca8:	1f 91       	pop	r17
   10caa:	ef 90       	pop	r14
   10cac:	df 90       	pop	r13
   10cae:	cf 90       	pop	r12
   10cb0:	bf 90       	pop	r11
   10cb2:	af 90       	pop	r10
   10cb4:	8f 90       	pop	r8
   10cb6:	7f 90       	pop	r7
   10cb8:	6f 90       	pop	r6
   10cba:	4f 90       	pop	r4
   10cbc:	3f 90       	pop	r3
   10cbe:	2f 90       	pop	r2
   10cc0:	08 95       	ret

00010cc2 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10cc2:	cf 93       	push	r28
   10cc4:	df 93       	push	r29
   10cc6:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10cc8:	89 2b       	or	r24, r25
   10cca:	21 f4       	brne	.+8      	; 0x10cd4 <gpib_decode_header+0x12>
        fo = stdout;
   10ccc:	c0 91 c1 1c 	lds	r28, 0x1CC1	; 0x801cc1 <__iob+0x2>
   10cd0:	d0 91 c2 1c 	lds	r29, 0x1CC2	; 0x801cc2 <__iob+0x3>

    fprintf(fo,"==============================\n");
   10cd4:	be 01       	movw	r22, r28
   10cd6:	81 e0       	ldi	r24, 0x01	; 1
   10cd8:	9c e0       	ldi	r25, 0x0C	; 12
   10cda:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10cde:	be 01       	movw	r22, r28
   10ce0:	81 e2       	ldi	r24, 0x21	; 33
   10ce2:	9c e0       	ldi	r25, 0x0C	; 12
   10ce4:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10ce8:	be 01       	movw	r22, r28
   10cea:	81 e3       	ldi	r24, 0x31	; 49
   10cec:	9c e0       	ldi	r25, 0x0C	; 12
   10cee:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10cf2:	be 01       	movw	r22, r28
   10cf4:	85 e4       	ldi	r24, 0x45	; 69
   10cf6:	9c e0       	ldi	r25, 0x0C	; 12
   10cf8:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10cfc:	be 01       	movw	r22, r28
   10cfe:	88 e6       	ldi	r24, 0x68	; 104
   10d00:	9c e0       	ldi	r25, 0x0C	; 12
   10d02:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"     A = ATN\n");
   10d06:	be 01       	movw	r22, r28
   10d08:	82 e9       	ldi	r24, 0x92	; 146
   10d0a:	9c e0       	ldi	r25, 0x0C	; 12
   10d0c:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"      E = EOI\n");
   10d10:	be 01       	movw	r22, r28
   10d12:	80 ea       	ldi	r24, 0xA0	; 160
   10d14:	9c e0       	ldi	r25, 0x0C	; 12
   10d16:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10d1a:	be 01       	movw	r22, r28
   10d1c:	8f ea       	ldi	r24, 0xAF	; 175
   10d1e:	9c e0       	ldi	r25, 0x0C	; 12
   10d20:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"        R = REN\n");
   10d24:	be 01       	movw	r22, r28
   10d26:	8f eb       	ldi	r24, 0xBF	; 191
   10d28:	9c e0       	ldi	r25, 0x0C	; 12
   10d2a:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"         I = IFC\n");
   10d2e:	be 01       	movw	r22, r28
   10d30:	80 ed       	ldi	r24, 0xD0	; 208
   10d32:	9c e0       	ldi	r25, 0x0C	; 12
   10d34:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10d38:	be 01       	movw	r22, r28
   10d3a:	82 ee       	ldi	r24, 0xE2	; 226
   10d3c:	9c e0       	ldi	r25, 0x0C	; 12
   10d3e:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10d42:	be 01       	movw	r22, r28
   10d44:	84 e0       	ldi	r24, 0x04	; 4
   10d46:	9d e0       	ldi	r25, 0x0D	; 13
   10d48:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10d4c:	be 01       	movw	r22, r28
   10d4e:	8c e1       	ldi	r24, 0x1C	; 28
   10d50:	9d e0       	ldi	r25, 0x0D	; 13
   10d52:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10d56:	be 01       	movw	r22, r28
   10d58:	87 e3       	ldi	r24, 0x37	; 55
   10d5a:	9d e0       	ldi	r25, 0x0D	; 13
   10d5c:	0e 94 bb 74 	call	0xe976	; 0xe976 <fputs>
}
   10d60:	df 91       	pop	r29
   10d62:	cf 91       	pop	r28
   10d64:	08 95       	ret

00010d66 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10d66:	a9 e8       	ldi	r26, 0x89	; 137
   10d68:	b0 e0       	ldi	r27, 0x00	; 0
   10d6a:	e9 eb       	ldi	r30, 0xB9	; 185
   10d6c:	f6 e8       	ldi	r31, 0x86	; 134
   10d6e:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
   10d72:	8c 01       	movw	r16, r24
   10d74:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10d76:	1a 86       	std	Y+10, r1	; 0x0a
   10d78:	4c 01       	movw	r8, r24
   10d7a:	88 24       	eor	r8, r8
   10d7c:	44 e0       	ldi	r20, 0x04	; 4
   10d7e:	94 22       	and	r9, r20
   10d80:	ce 01       	movw	r24, r28
   10d82:	0a 96       	adiw	r24, 0x0a	; 10
   10d84:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10d86:	62 30       	cpi	r22, 0x02	; 2
   10d88:	71 05       	cpc	r23, r1
   10d8a:	e8 f4       	brcc	.+58     	; 0x10dc6 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10d8c:	81 14       	cp	r8, r1
   10d8e:	91 04       	cpc	r9, r1
   10d90:	29 f4       	brne	.+10     	; 0x10d9c <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10d92:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10d94:	90 ee       	ldi	r25, 0xE0	; 224
   10d96:	90 0f       	add	r25, r16
   10d98:	9f 35       	cpi	r25, 0x5F	; 95
   10d9a:	08 f0       	brcs	.+2      	; 0x10d9e <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10d9c:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10d9e:	90 e0       	ldi	r25, 0x00	; 0
   10da0:	ed b7       	in	r30, 0x3d	; 61
   10da2:	fe b7       	in	r31, 0x3e	; 62
   10da4:	91 87       	std	Z+9, r25	; 0x09
   10da6:	80 87       	std	Z+8, r24	; 0x08
   10da8:	c8 01       	movw	r24, r16
   10daa:	99 27       	eor	r25, r25
   10dac:	97 83       	std	Z+7, r25	; 0x07
   10dae:	86 83       	std	Z+6, r24	; 0x06
   10db0:	85 e1       	ldi	r24, 0x15	; 21
   10db2:	90 e1       	ldi	r25, 0x10	; 16
   10db4:	a0 e0       	ldi	r26, 0x00	; 0
   10db6:	83 83       	std	Z+3, r24	; 0x03
   10db8:	94 83       	std	Z+4, r25	; 0x04
   10dba:	a5 83       	std	Z+5, r26	; 0x05
   10dbc:	f2 82       	std	Z+2, r15	; 0x02
   10dbe:	e1 82       	std	Z+1, r14	; 0x01
   10dc0:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
   10dc4:	0c c0       	rjmp	.+24     	; 0x10dde <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10dc6:	8f e0       	ldi	r24, 0x0F	; 15
   10dc8:	90 e1       	ldi	r25, 0x10	; 16
   10dca:	a0 e0       	ldi	r26, 0x00	; 0
   10dcc:	ed b7       	in	r30, 0x3d	; 61
   10dce:	fe b7       	in	r31, 0x3e	; 62
   10dd0:	83 83       	std	Z+3, r24	; 0x03
   10dd2:	94 83       	std	Z+4, r25	; 0x04
   10dd4:	a5 83       	std	Z+5, r26	; 0x05
   10dd6:	f2 82       	std	Z+2, r15	; 0x02
   10dd8:	e1 82       	std	Z+1, r14	; 0x01
   10dda:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
    }

    tmp = str + strlen(str);
   10dde:	f7 01       	movw	r30, r14
   10de0:	01 90       	ld	r0, Z+
   10de2:	00 20       	and	r0, r0
   10de4:	e9 f7       	brne	.-6      	; 0x10de0 <gpib_trace_display+0x7a>
   10de6:	31 97       	sbiw	r30, 0x01	; 1
   10de8:	cf 01       	movw	r24, r30
   10dea:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10dec:	81 14       	cp	r8, r1
   10dee:	91 04       	cpc	r9, r1
   10df0:	11 f0       	breq	.+4      	; 0x10df6 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10df2:	21 e4       	ldi	r18, 0x41	; 65
   10df4:	01 c0       	rjmp	.+2      	; 0x10df8 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10df6:	2d e2       	ldi	r18, 0x2D	; 45
   10df8:	20 83       	st	Z, r18
   10dfa:	dc 01       	movw	r26, r24
   10dfc:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10dfe:	10 ff       	sbrs	r17, 0
   10e00:	02 c0       	rjmp	.+4      	; 0x10e06 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10e02:	25 e4       	ldi	r18, 0x45	; 69
   10e04:	01 c0       	rjmp	.+2      	; 0x10e08 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10e06:	2d e2       	ldi	r18, 0x2D	; 45
   10e08:	fc 01       	movw	r30, r24
   10e0a:	20 83       	st	Z, r18
   10e0c:	fd 01       	movw	r30, r26
   10e0e:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10e10:	11 ff       	sbrs	r17, 1
   10e12:	02 c0       	rjmp	.+4      	; 0x10e18 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10e14:	83 e5       	ldi	r24, 0x53	; 83
   10e16:	01 c0       	rjmp	.+2      	; 0x10e1a <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10e18:	8d e2       	ldi	r24, 0x2D	; 45
   10e1a:	8c 93       	st	X, r24
   10e1c:	df 01       	movw	r26, r30
   10e1e:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10e20:	13 ff       	sbrs	r17, 3
   10e22:	02 c0       	rjmp	.+4      	; 0x10e28 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10e24:	82 e5       	ldi	r24, 0x52	; 82
   10e26:	01 c0       	rjmp	.+2      	; 0x10e2a <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10e28:	8d e2       	ldi	r24, 0x2D	; 45
   10e2a:	80 83       	st	Z, r24
   10e2c:	fd 01       	movw	r30, r26
   10e2e:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10e30:	14 ff       	sbrs	r17, 4
   10e32:	02 c0       	rjmp	.+4      	; 0x10e38 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10e34:	89 e4       	ldi	r24, 0x49	; 73
   10e36:	01 c0       	rjmp	.+2      	; 0x10e3a <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10e38:	8d e2       	ldi	r24, 0x2D	; 45
   10e3a:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10e3c:	a1 14       	cp	r10, r1
   10e3e:	b1 04       	cpc	r11, r1
   10e40:	d1 f4       	brne	.+52     	; 0x10e76 <gpib_trace_display+0x110>
   10e42:	df 01       	movw	r26, r30
   10e44:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10e46:	15 ff       	sbrs	r17, 5
   10e48:	02 c0       	rjmp	.+4      	; 0x10e4e <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10e4a:	80 e5       	ldi	r24, 0x50	; 80
   10e4c:	01 c0       	rjmp	.+2      	; 0x10e50 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10e4e:	8d e2       	ldi	r24, 0x2D	; 45
   10e50:	80 83       	st	Z, r24
   10e52:	fd 01       	movw	r30, r26
   10e54:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10e56:	16 ff       	sbrs	r17, 6
   10e58:	02 c0       	rjmp	.+4      	; 0x10e5e <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10e5a:	84 e5       	ldi	r24, 0x54	; 84
   10e5c:	01 c0       	rjmp	.+2      	; 0x10e60 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10e5e:	8d e2       	ldi	r24, 0x2D	; 45
   10e60:	8c 93       	st	X, r24
   10e62:	cf 01       	movw	r24, r30
   10e64:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10e66:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10e68:	17 ff       	sbrs	r17, 7
   10e6a:	02 c0       	rjmp	.+4      	; 0x10e70 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10e6c:	82 e4       	ldi	r24, 0x42	; 66
   10e6e:	01 c0       	rjmp	.+2      	; 0x10e72 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10e70:	8d e2       	ldi	r24, 0x2D	; 45
   10e72:	80 83       	st	Z, r24
   10e74:	08 c0       	rjmp	.+16     	; 0x10e86 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10e76:	8d e2       	ldi	r24, 0x2D	; 45
   10e78:	80 83       	st	Z, r24
        *tmp++ = '-';
   10e7a:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10e7c:	6f 01       	movw	r12, r30
   10e7e:	43 e0       	ldi	r20, 0x03	; 3
   10e80:	c4 0e       	add	r12, r20
   10e82:	d1 1c       	adc	r13, r1
   10e84:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10e86:	f6 01       	movw	r30, r12
   10e88:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10e8a:	f1 e0       	ldi	r31, 0x01	; 1
   10e8c:	af 1a       	sub	r10, r31
   10e8e:	b1 08       	sbc	r11, r1
   10e90:	42 e0       	ldi	r20, 0x02	; 2
   10e92:	a4 16       	cp	r10, r20
   10e94:	b1 04       	cpc	r11, r1
   10e96:	f0 f4       	brcc	.+60     	; 0x10ed4 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10e98:	15 ff       	sbrs	r17, 5
   10e9a:	03 c0       	rjmp	.+6      	; 0x10ea2 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10e9c:	64 e5       	ldi	r22, 0x54	; 84
   10e9e:	7d e0       	ldi	r23, 0x0D	; 13
   10ea0:	02 c0       	rjmp	.+4      	; 0x10ea6 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10ea2:	65 e6       	ldi	r22, 0x65	; 101
   10ea4:	74 e0       	ldi	r23, 0x04	; 4
   10ea6:	c7 01       	movw	r24, r14
   10ea8:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
        if(status & NRFD_FLAG)
   10eac:	16 ff       	sbrs	r17, 6
   10eae:	03 c0       	rjmp	.+6      	; 0x10eb6 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10eb0:	6a e5       	ldi	r22, 0x5A	; 90
   10eb2:	7d e0       	ldi	r23, 0x0D	; 13
   10eb4:	02 c0       	rjmp	.+4      	; 0x10eba <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10eb6:	65 e6       	ldi	r22, 0x65	; 101
   10eb8:	74 e0       	ldi	r23, 0x04	; 4
   10eba:	c7 01       	movw	r24, r14
   10ebc:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
        if(status & NDAC_FLAG)
   10ec0:	17 ff       	sbrs	r17, 7
   10ec2:	03 c0       	rjmp	.+6      	; 0x10eca <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10ec4:	60 e6       	ldi	r22, 0x60	; 96
   10ec6:	7d e0       	ldi	r23, 0x0D	; 13
   10ec8:	02 c0       	rjmp	.+4      	; 0x10ece <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10eca:	65 e6       	ldi	r22, 0x65	; 101
   10ecc:	74 e0       	ldi	r23, 0x04	; 4
   10ece:	c7 01       	movw	r24, r14
   10ed0:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
    }

    if( (status & ATN_FLAG) )
   10ed4:	81 14       	cp	r8, r1
   10ed6:	91 04       	cpc	r9, r1
   10ed8:	09 f4       	brne	.+2      	; 0x10edc <gpib_trace_display+0x176>
   10eda:	5a c0       	rjmp	.+180    	; 0x10f90 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10edc:	c8 01       	movw	r24, r16
   10ede:	8f 77       	andi	r24, 0x7F	; 127
   10ee0:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10ee2:	9c 01       	movw	r18, r24
   10ee4:	20 52       	subi	r18, 0x20	; 32
   10ee6:	31 09       	sbc	r19, r1
   10ee8:	2f 31       	cpi	r18, 0x1F	; 31
   10eea:	31 05       	cpc	r19, r1
   10eec:	48 f4       	brcc	.+18     	; 0x10f00 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10eee:	0f 71       	andi	r16, 0x1F	; 31
   10ef0:	11 27       	eor	r17, r17
   10ef2:	ed b7       	in	r30, 0x3d	; 61
   10ef4:	fe b7       	in	r31, 0x3e	; 62
   10ef6:	17 83       	std	Z+7, r17	; 0x07
   10ef8:	06 83       	std	Z+6, r16	; 0x06
   10efa:	84 e0       	ldi	r24, 0x04	; 4
   10efc:	90 e1       	ldi	r25, 0x10	; 16
   10efe:	0e c0       	rjmp	.+28     	; 0x10f1c <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   10f00:	9c 01       	movw	r18, r24
   10f02:	20 54       	subi	r18, 0x40	; 64
   10f04:	31 09       	sbc	r19, r1
   10f06:	2f 30       	cpi	r18, 0x0F	; 15
   10f08:	31 05       	cpc	r19, r1
   10f0a:	88 f4       	brcc	.+34     	; 0x10f2e <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   10f0c:	0f 71       	andi	r16, 0x1F	; 31
   10f0e:	11 27       	eor	r17, r17
   10f10:	ed b7       	in	r30, 0x3d	; 61
   10f12:	fe b7       	in	r31, 0x3e	; 62
   10f14:	17 83       	std	Z+7, r17	; 0x07
   10f16:	06 83       	std	Z+6, r16	; 0x06
   10f18:	89 ef       	ldi	r24, 0xF9	; 249
   10f1a:	9f e0       	ldi	r25, 0x0F	; 15
   10f1c:	a0 e0       	ldi	r26, 0x00	; 0
   10f1e:	83 83       	std	Z+3, r24	; 0x03
   10f20:	94 83       	std	Z+4, r25	; 0x04
   10f22:	a5 83       	std	Z+5, r26	; 0x05
   10f24:	d2 82       	std	Z+2, r13	; 0x02
   10f26:	c1 82       	std	Z+1, r12	; 0x01
   10f28:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
   10f2c:	31 c0       	rjmp	.+98     	; 0x10f90 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   10f2e:	9c 01       	movw	r18, r24
   10f30:	20 56       	subi	r18, 0x60	; 96
   10f32:	31 09       	sbc	r19, r1
   10f34:	20 31       	cpi	r18, 0x10	; 16
   10f36:	31 05       	cpc	r19, r1
   10f38:	28 f0       	brcs	.+10     	; 0x10f44 <gpib_trace_display+0x1de>
   10f3a:	e2 e8       	ldi	r30, 0x82	; 130
   10f3c:	f1 e0       	ldi	r31, 0x01	; 1
   10f3e:	00 e0       	ldi	r16, 0x00	; 0
   10f40:	10 e0       	ldi	r17, 0x00	; 0
   10f42:	0b c0       	rjmp	.+22     	; 0x10f5a <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   10f44:	0f 71       	andi	r16, 0x1F	; 31
   10f46:	11 27       	eor	r17, r17
   10f48:	ed b7       	in	r30, 0x3d	; 61
   10f4a:	fe b7       	in	r31, 0x3e	; 62
   10f4c:	17 83       	std	Z+7, r17	; 0x07
   10f4e:	06 83       	std	Z+6, r16	; 0x06
   10f50:	8e ee       	ldi	r24, 0xEE	; 238
   10f52:	9f e0       	ldi	r25, 0x0F	; 15
   10f54:	e3 cf       	rjmp	.-58     	; 0x10f1c <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   10f56:	0f 5f       	subi	r16, 0xFF	; 255
   10f58:	1f 4f       	sbci	r17, 0xFF	; 255
   10f5a:	20 81       	ld	r18, Z
   10f5c:	31 81       	ldd	r19, Z+1	; 0x01
   10f5e:	2f 3f       	cpi	r18, 0xFF	; 255
   10f60:	4f ef       	ldi	r20, 0xFF	; 255
   10f62:	34 07       	cpc	r19, r20
   10f64:	a9 f0       	breq	.+42     	; 0x10f90 <gpib_trace_display+0x22a>
   10f66:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   10f68:	82 17       	cp	r24, r18
   10f6a:	93 07       	cpc	r25, r19
   10f6c:	a1 f7       	brne	.-24     	; 0x10f56 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   10f6e:	69 e6       	ldi	r22, 0x69	; 105
   10f70:	74 e0       	ldi	r23, 0x04	; 4
   10f72:	c6 01       	movw	r24, r12
   10f74:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   10f78:	f8 01       	movw	r30, r16
   10f7a:	ee 0f       	add	r30, r30
   10f7c:	ff 1f       	adc	r31, r31
   10f7e:	ee 0f       	add	r30, r30
   10f80:	ff 1f       	adc	r31, r31
   10f82:	ee 57       	subi	r30, 0x7E	; 126
   10f84:	fe 4f       	sbci	r31, 0xFE	; 254
   10f86:	62 81       	ldd	r22, Z+2	; 0x02
   10f88:	73 81       	ldd	r23, Z+3	; 0x03
   10f8a:	c6 01       	movw	r24, r12
   10f8c:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   10f90:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   10f94:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   10f98:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   10f9c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   10fa0:	23 2b       	or	r18, r19
   10fa2:	21 f4       	brne	.+8      	; 0x10fac <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   10fa4:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   10fa8:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   10fac:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <gpib_log_fp>
   10fb0:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   10fb4:	82 17       	cp	r24, r18
   10fb6:	93 07       	cpc	r25, r19
   10fb8:	19 f0       	breq	.+6      	; 0x10fc0 <gpib_trace_display+0x25a>
        puts(str);
   10fba:	c7 01       	movw	r24, r14
   10fbc:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   10fc0:	ed b7       	in	r30, 0x3d	; 61
   10fc2:	fe b7       	in	r31, 0x3e	; 62
   10fc4:	f6 82       	std	Z+6, r15	; 0x06
   10fc6:	e5 82       	std	Z+5, r14	; 0x05
   10fc8:	86 e6       	ldi	r24, 0x66	; 102
   10fca:	9d e0       	ldi	r25, 0x0D	; 13
   10fcc:	94 83       	std	Z+4, r25	; 0x04
   10fce:	83 83       	std	Z+3, r24	; 0x03
   10fd0:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   10fd4:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   10fd8:	92 83       	std	Z+2, r25	; 0x02
   10fda:	81 83       	std	Z+1, r24	; 0x01
   10fdc:	0e 94 7b 7c 	call	0xf8f6	; 0xf8f6 <fprintf>
}
   10fe0:	c7 57       	subi	r28, 0x77	; 119
   10fe2:	df 4f       	sbci	r29, 0xFF	; 255
   10fe4:	ec e0       	ldi	r30, 0x0C	; 12
   10fe6:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

00010fea <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   10fea:	af 92       	push	r10
   10fec:	bf 92       	push	r11
   10fee:	cf 92       	push	r12
   10ff0:	df 92       	push	r13
   10ff2:	ef 92       	push	r14
   10ff4:	ff 92       	push	r15
   10ff6:	0f 93       	push	r16
   10ff8:	1f 93       	push	r17
   10ffa:	cf 93       	push	r28
   10ffc:	00 d0       	rcall	.+0      	; 0x10ffe <gpib_read_byte+0x14>
   10ffe:	00 d0       	rcall	.+0      	; 0x11000 <gpib_read_byte+0x16>
   11000:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   11002:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <gpib_unread_f>
   11006:	22 23       	and	r18, r18
   11008:	39 f0       	breq	.+14     	; 0x11018 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   1100a:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_unread_f>
        return(gpib_unread_data);
   1100e:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <gpib_unread_data>
   11012:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <gpib_unread_data+0x1>
   11016:	e0 c0       	rjmp	.+448    	; 0x111d8 <gpib_read_byte+0x1ee>
   11018:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   1101a:	81 e0       	ldi	r24, 0x01	; 1
   1101c:	05 dc       	rcall	.-2038   	; 0x10828 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   1101e:	c1 14       	cp	r12, r1
   11020:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11022:	51 f0       	breq	.+20     	; 0x11038 <gpib_read_byte+0x4e>
   11024:	fa dc       	rcall	.-1548   	; 0x10a1a <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11026:	7c 01       	movw	r14, r24
   11028:	08 dd       	rcall	.-1520   	; 0x10a3a <gpib_handshake_pin_read>
   1102a:	e8 2a       	or	r14, r24
   1102c:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   1102e:	62 e0       	ldi	r22, 0x02	; 2
   11030:	70 e0       	ldi	r23, 0x00	; 0
   11032:	c7 01       	movw	r24, r14
   11034:	98 de       	rcall	.-720    	; 0x10d66 <gpib_trace_display>
   11036:	02 c0       	rjmp	.+4      	; 0x1103c <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11038:	e1 2c       	mov	r14, r1
   1103a:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   1103c:	64 ef       	ldi	r22, 0xF4	; 244
   1103e:	71 e0       	ldi	r23, 0x01	; 1
   11040:	80 e0       	ldi	r24, 0x00	; 0
   11042:	90 e0       	ldi	r25, 0x00	; 0
   11044:	af db       	rcall	.-2210   	; 0x107a4 <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   11046:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11048:	00 e0       	ldi	r16, 0x00	; 0
   1104a:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   1104c:	0e 94 91 de 	call	0x1bd22	; 0x1bd22 <gpib_user_task>

        if(uart_keyhit(0))
   11050:	80 e0       	ldi	r24, 0x00	; 0
   11052:	0e 94 95 28 	call	0x512a	; 0x512a <uart_keyhit>
   11056:	89 2b       	or	r24, r25
   11058:	09 f0       	breq	.+2      	; 0x1105c <gpib_read_byte+0x72>
   1105a:	9c c0       	rjmp	.+312    	; 0x11194 <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   1105c:	4c 99       	sbic	0x09, 4	; 9
   1105e:	15 c0       	rjmp	.+42     	; 0x1108a <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   11060:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11062:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11066:	80 ff       	sbrs	r24, 0
   11068:	0e c0       	rjmp	.+28     	; 0x11086 <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   1106a:	8c 2f       	mov	r24, r28
   1106c:	90 e0       	ldi	r25, 0x00	; 0
   1106e:	ed b7       	in	r30, 0x3d	; 61
   11070:	fe b7       	in	r31, 0x3e	; 62
   11072:	95 83       	std	Z+5, r25	; 0x05
   11074:	84 83       	std	Z+4, r24	; 0x04
   11076:	8e e1       	ldi	r24, 0x1E	; 30
   11078:	90 e1       	ldi	r25, 0x10	; 16
   1107a:	a0 e0       	ldi	r26, 0x00	; 0
   1107c:	81 83       	std	Z+1, r24	; 0x01
   1107e:	92 83       	std	Z+2, r25	; 0x02
   11080:	a3 83       	std	Z+3, r26	; 0x03
   11082:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            gpib_bus_init();
   11086:	98 db       	rcall	.-2256   	; 0x107b8 <gpib_bus_init>
   11088:	85 c0       	rjmp	.+266    	; 0x11194 <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   1108a:	c2 30       	cpi	r28, 0x02	; 2
   1108c:	31 f1       	breq	.+76     	; 0x110da <gpib_read_byte+0xf0>
   1108e:	28 f4       	brcc	.+10     	; 0x1109a <gpib_read_byte+0xb0>
   11090:	cc 23       	and	r28, r28
   11092:	69 f0       	breq	.+26     	; 0x110ae <gpib_read_byte+0xc4>
   11094:	c1 30       	cpi	r28, 0x01	; 1
   11096:	c9 f0       	breq	.+50     	; 0x110ca <gpib_read_byte+0xe0>
   11098:	63 c0       	rjmp	.+198    	; 0x11160 <gpib_read_byte+0x176>
   1109a:	c5 30       	cpi	r28, 0x05	; 5
   1109c:	09 f4       	brne	.+2      	; 0x110a0 <gpib_read_byte+0xb6>
   1109e:	54 c0       	rjmp	.+168    	; 0x11148 <gpib_read_byte+0x15e>
   110a0:	c7 30       	cpi	r28, 0x07	; 7
   110a2:	09 f4       	brne	.+2      	; 0x110a6 <gpib_read_byte+0xbc>
   110a4:	58 c0       	rjmp	.+176    	; 0x11156 <gpib_read_byte+0x16c>
   110a6:	c4 30       	cpi	r28, 0x04	; 4
   110a8:	09 f0       	breq	.+2      	; 0x110ac <gpib_read_byte+0xc2>
   110aa:	5a c0       	rjmp	.+180    	; 0x11160 <gpib_read_byte+0x176>
   110ac:	3e c0       	rjmp	.+124    	; 0x1112a <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   110ae:	19 9b       	sbis	0x03, 1	; 3
   110b0:	43 c0       	rjmp	.+134    	; 0x11138 <gpib_read_byte+0x14e>
   110b2:	fd e0       	ldi	r31, 0x0D	; 13
   110b4:	fa 95       	dec	r31
   110b6:	f1 f7       	brne	.-4      	; 0x110b4 <gpib_read_byte+0xca>
   110b8:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   110ba:	52 98       	cbi	0x0a, 2	; 10
   110bc:	5a 9a       	sbi	0x0b, 2	; 11
   110be:	8d e0       	ldi	r24, 0x0D	; 13
   110c0:	8a 95       	dec	r24
   110c2:	f1 f7       	brne	.-4      	; 0x110c0 <gpib_read_byte+0xd6>
   110c4:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   110c6:	c1 e0       	ldi	r28, 0x01	; 1
   110c8:	37 c0       	rjmp	.+110    	; 0x11138 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   110ca:	19 99       	sbic	0x03, 1	; 3
   110cc:	80 c0       	rjmp	.+256    	; 0x111ce <gpib_read_byte+0x1e4>
   110ce:	ed e0       	ldi	r30, 0x0D	; 13
   110d0:	ea 95       	dec	r30
   110d2:	f1 f7       	brne	.-4      	; 0x110d0 <gpib_read_byte+0xe6>
   110d4:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   110d6:	c2 e0       	ldi	r28, 0x02	; 2
   110d8:	7a c0       	rjmp	.+244    	; 0x111ce <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   110da:	5a 98       	cbi	0x0b, 2	; 11
   110dc:	52 9a       	sbi	0x0a, 2	; 10
   110de:	fd e0       	ldi	r31, 0x0D	; 13
   110e0:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   110e2:	f1 f7       	brne	.-4      	; 0x110e0 <gpib_read_byte+0xf6>
   110e4:	00 00       	nop
   110e6:	93 dc       	rcall	.-1754   	; 0x10a0e <gpib_bus_read>
   110e8:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   110ea:	b1 2c       	mov	r11, r1
   110ec:	96 dc       	rcall	.-1748   	; 0x10a1a <gpib_control_pin_read>
   110ee:	7c 01       	movw	r14, r24
   110f0:	08 2b       	or	r16, r24
                ch |= control_last;
   110f2:	19 2b       	or	r17, r25
   110f4:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   110f6:	1b 29       	or	r17, r11
   110f8:	c1 14       	cp	r12, r1
   110fa:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   110fc:	49 f0       	breq	.+18     	; 0x11110 <gpib_read_byte+0x126>
   110fe:	9d dc       	rcall	.-1734   	; 0x10a3a <gpib_handshake_pin_read>
   11100:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11102:	f9 2a       	or	r15, r25
   11104:	61 e0       	ldi	r22, 0x01	; 1
   11106:	70 e0       	ldi	r23, 0x00	; 0
   11108:	c5 01       	movw	r24, r10
   1110a:	8e 29       	or	r24, r14
   1110c:	9f 29       	or	r25, r15
   1110e:	2b de       	rcall	.-938    	; 0x10d66 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11110:	53 98       	cbi	0x0a, 3	; 10
   11112:	5b 9a       	sbi	0x0b, 3	; 11
   11114:	8d e0       	ldi	r24, 0x0D	; 13
   11116:	8a 95       	dec	r24
   11118:	f1 f7       	brne	.-4      	; 0x11116 <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   1111a:	00 00       	nop
   1111c:	64 ef       	ldi	r22, 0xF4	; 244
   1111e:	71 e0       	ldi	r23, 0x01	; 1
   11120:	80 e0       	ldi	r24, 0x00	; 0
   11122:	90 e0       	ldi	r25, 0x00	; 0
   11124:	3f db       	rcall	.-2434   	; 0x107a4 <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11126:	c4 e0       	ldi	r28, 0x04	; 4
   11128:	52 c0       	rjmp	.+164    	; 0x111ce <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1112a:	19 9b       	sbis	0x03, 1	; 3
   1112c:	05 c0       	rjmp	.+10     	; 0x11138 <gpib_read_byte+0x14e>
   1112e:	ed e0       	ldi	r30, 0x0D	; 13
   11130:	ea 95       	dec	r30
   11132:	f1 f7       	brne	.-4      	; 0x11130 <gpib_read_byte+0x146>
   11134:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   11136:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11138:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   1113c:	88 23       	and	r24, r24
   1113e:	09 f4       	brne	.+2      	; 0x11142 <gpib_read_byte+0x158>
   11140:	46 c0       	rjmp	.+140    	; 0x111ce <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   11142:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   11144:	c7 e0       	ldi	r28, 0x07	; 7
   11146:	43 c0       	rjmp	.+134    	; 0x111ce <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11148:	5b 98       	cbi	0x0b, 3	; 11
   1114a:	53 9a       	sbi	0x0a, 3	; 10
   1114c:	fd e0       	ldi	r31, 0x0D	; 13
   1114e:	fa 95       	dec	r31
   11150:	f1 f7       	brne	.-4      	; 0x1114e <gpib_read_byte+0x164>
   11152:	00 00       	nop
   11154:	09 c0       	rjmp	.+18     	; 0x11168 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11156:	5a 98       	cbi	0x0b, 2	; 11
   11158:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   1115a:	5b 98       	cbi	0x0b, 3	; 11
   1115c:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1115e:	04 c0       	rjmp	.+8      	; 0x11168 <gpib_read_byte+0x17e>
   11160:	c1 14       	cp	r12, r1
   11162:	d1 04       	cpc	r13, r1
   11164:	91 f0       	breq	.+36     	; 0x1118a <gpib_read_byte+0x1a0>
   11166:	04 c0       	rjmp	.+8      	; 0x11170 <gpib_read_byte+0x186>
   11168:	c1 14       	cp	r12, r1
   1116a:	d1 04       	cpc	r13, r1
   1116c:	99 f0       	breq	.+38     	; 0x11194 <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   1116e:	c8 e0       	ldi	r28, 0x08	; 8
   11170:	54 dc       	rcall	.-1880   	; 0x10a1a <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11172:	5c 01       	movw	r10, r24
   11174:	62 dc       	rcall	.-1852   	; 0x10a3a <gpib_handshake_pin_read>
   11176:	a8 2a       	or	r10, r24
   11178:	b9 2a       	or	r11, r25
            if(control_last != control)
   1117a:	ae 14       	cp	r10, r14
   1117c:	bf 04       	cpc	r11, r15
   1117e:	31 f0       	breq	.+12     	; 0x1118c <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   11180:	62 e0       	ldi	r22, 0x02	; 2
   11182:	70 e0       	ldi	r23, 0x00	; 0
   11184:	c5 01       	movw	r24, r10
   11186:	ef dd       	rcall	.-1058   	; 0x10d66 <gpib_trace_display>
   11188:	01 c0       	rjmp	.+2      	; 0x1118c <gpib_read_byte+0x1a2>
   1118a:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1118c:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1118e:	11 f0       	breq	.+4      	; 0x11194 <gpib_read_byte+0x1aa>
   11190:	75 01       	movw	r14, r10
   11192:	5c cf       	rjmp	.-328    	; 0x1104c <gpib_read_byte+0x62>
   11194:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11198:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <current+0x1>
   1119c:	90 93 e9 1c 	sts	0x1CE9, r25	; 0x801ce9 <lastcmd+0x1>
   111a0:	80 93 e8 1c 	sts	0x1CE8, r24	; 0x801ce8 <lastcmd>
   111a4:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   111a6:	88 27       	eor	r24, r24
   111a8:	90 7d       	andi	r25, 0xD0	; 208
   111aa:	89 2b       	or	r24, r25
   111ac:	11 f4       	brne	.+4      	; 0x111b2 <gpib_read_byte+0x1c8>
   111ae:	12 fd       	sbrc	r17, 2
   111b0:	05 c0       	rjmp	.+10     	; 0x111bc <gpib_read_byte+0x1d2>
   111b2:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <current+0x1>
        current = 0;
   111b6:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <current>
   111ba:	07 c0       	rjmp	.+14     	; 0x111ca <gpib_read_byte+0x1e0>
   111bc:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   111be:	8f 77       	andi	r24, 0x7F	; 127
   111c0:	99 27       	eor	r25, r25
   111c2:	90 93 ed 1e 	sts	0x1EED, r25	; 0x801eed <current+0x1>
   111c6:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <current>
   111ca:	c8 01       	movw	r24, r16
   111cc:	05 c0       	rjmp	.+10     	; 0x111d8 <gpib_read_byte+0x1ee>
   111ce:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   111d0:	d1 04       	cpc	r13, r1
   111d2:	09 f4       	brne	.+2      	; 0x111d6 <gpib_read_byte+0x1ec>
   111d4:	3b cf       	rjmp	.-394    	; 0x1104c <gpib_read_byte+0x62>
   111d6:	cc cf       	rjmp	.-104    	; 0x11170 <gpib_read_byte+0x186>
   111d8:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   111da:	0f 90       	pop	r0
   111dc:	0f 90       	pop	r0
   111de:	0f 90       	pop	r0
   111e0:	0f 90       	pop	r0
   111e2:	cf 91       	pop	r28
   111e4:	1f 91       	pop	r17
   111e6:	0f 91       	pop	r16
   111e8:	ff 90       	pop	r15
   111ea:	ef 90       	pop	r14
   111ec:	df 90       	pop	r13
   111ee:	cf 90       	pop	r12
   111f0:	bf 90       	pop	r11
   111f2:	af 90       	pop	r10
   111f4:	08 95       	ret

000111f6 <gpib_decode>:
   111f6:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   111f8:	70 e0       	ldi	r23, 0x00	; 0
   111fa:	b5 cd       	rjmp	.-1174   	; 0x10d66 <gpib_trace_display>
   111fc:	08 95       	ret

000111fe <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   111fe:	a7 e0       	ldi	r26, 0x07	; 7
   11200:	b0 e0       	ldi	r27, 0x00	; 0
   11202:	e5 e0       	ldi	r30, 0x05	; 5
   11204:	f9 e8       	ldi	r31, 0x89	; 137
   11206:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   1120a:	5b 01       	movw	r10, r22
   1120c:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   1120e:	fa 01       	movw	r30, r20
   11210:	20 81       	ld	r18, Z
   11212:	31 81       	ldd	r19, Z+1	; 0x01
   11214:	22 27       	eor	r18, r18
   11216:	31 83       	std	Z+1, r19	; 0x01
   11218:	20 83       	st	Z, r18

    if(!size)
   1121a:	67 2b       	or	r22, r23
   1121c:	21 f0       	breq	.+8      	; 0x11226 <gpib_read_str+0x28>
   1121e:	7c 01       	movw	r14, r24
   11220:	00 e0       	ldi	r16, 0x00	; 0
   11222:	10 e0       	ldi	r17, 0x00	; 0
   11224:	28 c0       	rjmp	.+80     	; 0x11276 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11226:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1122a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1122e:	81 72       	andi	r24, 0x21	; 33
   11230:	91 70       	andi	r25, 0x01	; 1
   11232:	89 2b       	or	r24, r25
   11234:	09 f4       	brne	.+2      	; 0x11238 <gpib_read_str+0x3a>
   11236:	7c c0       	rjmp	.+248    	; 0x11330 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11238:	85 ed       	ldi	r24, 0xD5	; 213
   1123a:	9f e0       	ldi	r25, 0x0F	; 15
   1123c:	a0 e0       	ldi	r26, 0x00	; 0
   1123e:	ed b7       	in	r30, 0x3d	; 61
   11240:	fe b7       	in	r31, 0x3e	; 62
   11242:	81 83       	std	Z+1, r24	; 0x01
   11244:	92 83       	std	Z+2, r25	; 0x02
   11246:	a3 83       	std	Z+3, r26	; 0x03
   11248:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1124c:	71 c0       	rjmp	.+226    	; 0x11330 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   1124e:	8c 27       	eor	r24, r28
   11250:	9d 27       	eor	r25, r29
   11252:	92 fd       	sbrc	r25, 2
   11254:	2e c0       	rjmp	.+92     	; 0x112b2 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11256:	ce 01       	movw	r24, r28
   11258:	88 27       	eor	r24, r24
   1125a:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   1125c:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1125e:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11260:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11262:	f7 01       	movw	r30, r14
   11264:	20 83       	st	Z, r18
        ++ind;
   11266:	0f 5f       	subi	r16, 0xFF	; 255
   11268:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1126a:	89 2b       	or	r24, r25
   1126c:	09 f4       	brne	.+2      	; 0x11270 <gpib_read_str+0x72>
   1126e:	3c c0       	rjmp	.+120    	; 0x112e8 <gpib_read_str+0xea>
   11270:	ff ef       	ldi	r31, 0xFF	; 255
   11272:	ef 1a       	sub	r14, r31
   11274:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11276:	0a 15       	cp	r16, r10
   11278:	1b 05       	cpc	r17, r11
   1127a:	0c f0       	brlt	.+2      	; 0x1127e <gpib_read_str+0x80>
   1127c:	3f c0       	rjmp	.+126    	; 0x112fc <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   1127e:	80 e0       	ldi	r24, 0x00	; 0
   11280:	90 e0       	ldi	r25, 0x00	; 0
   11282:	b3 de       	rcall	.-666    	; 0x10fea <gpib_read_byte>
   11284:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11286:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1128a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1128e:	90 ff       	sbrs	r25, 0
   11290:	02 c0       	rjmp	.+4      	; 0x11296 <gpib_read_str+0x98>
            gpib_decode(val);
   11292:	ce 01       	movw	r24, r28
   11294:	b0 df       	rcall	.-160    	; 0x111f6 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   11296:	9e 01       	movw	r18, r28
   11298:	22 27       	eor	r18, r18
   1129a:	30 7d       	andi	r19, 0xD0	; 208
   1129c:	f6 01       	movw	r30, r12
   1129e:	80 81       	ld	r24, Z
   112a0:	91 81       	ldd	r25, Z+1	; 0x01
   112a2:	21 15       	cp	r18, r1
   112a4:	31 05       	cpc	r19, r1
   112a6:	99 f2       	breq	.-90     	; 0x1124e <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   112a8:	82 2b       	or	r24, r18
   112aa:	93 2b       	or	r25, r19
   112ac:	91 83       	std	Z+1, r25	; 0x01
   112ae:	80 83       	st	Z, r24
            break;
   112b0:	28 c0       	rjmp	.+80     	; 0x11302 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   112b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112ba:	81 72       	andi	r24, 0x21	; 33
   112bc:	91 70       	andi	r25, 0x01	; 1
   112be:	89 2b       	or	r24, r25
   112c0:	81 f0       	breq	.+32     	; 0x112e2 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   112c2:	ce 01       	movw	r24, r28
   112c4:	99 27       	eor	r25, r25
   112c6:	ed b7       	in	r30, 0x3d	; 61
   112c8:	fe b7       	in	r31, 0x3e	; 62
   112ca:	97 83       	std	Z+7, r25	; 0x07
   112cc:	86 83       	std	Z+6, r24	; 0x06
   112ce:	15 83       	std	Z+5, r17	; 0x05
   112d0:	04 83       	std	Z+4, r16	; 0x04
   112d2:	88 ea       	ldi	r24, 0xA8	; 168
   112d4:	9f e0       	ldi	r25, 0x0F	; 15
   112d6:	a0 e0       	ldi	r26, 0x00	; 0
   112d8:	81 83       	std	Z+1, r24	; 0x01
   112da:	92 83       	std	Z+2, r25	; 0x02
   112dc:	a3 83       	std	Z+3, r26	; 0x03
   112de:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            gpib_unread(val);
   112e2:	ce 01       	movw	r24, r28
   112e4:	6a db       	rcall	.-2348   	; 0x109ba <gpib_unread>
            break;
   112e6:	0d c0       	rjmp	.+26     	; 0x11302 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   112e8:	d0 ff       	sbrs	r29, 0
   112ea:	c2 cf       	rjmp	.-124    	; 0x11270 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   112ec:	f6 01       	movw	r30, r12
   112ee:	80 81       	ld	r24, Z
   112f0:	91 81       	ldd	r25, Z+1	; 0x01
   112f2:	90 fd       	sbrc	r25, 0
   112f4:	1f c0       	rjmp	.+62     	; 0x11334 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   112f6:	91 60       	ori	r25, 0x01	; 1
   112f8:	91 83       	std	Z+1, r25	; 0x01
   112fa:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   112fc:	0a 15       	cp	r16, r10
   112fe:	1b 05       	cpc	r17, r11
   11300:	c9 f0       	breq	.+50     	; 0x11334 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11302:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11306:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1130a:	81 72       	andi	r24, 0x21	; 33
   1130c:	99 27       	eor	r25, r25
   1130e:	89 2b       	or	r24, r25
   11310:	89 f0       	breq	.+34     	; 0x11334 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11312:	ed b7       	in	r30, 0x3d	; 61
   11314:	fe b7       	in	r31, 0x3e	; 62
   11316:	b7 82       	std	Z+7, r11	; 0x07
   11318:	a6 82       	std	Z+6, r10	; 0x06
   1131a:	15 83       	std	Z+5, r17	; 0x05
   1131c:	04 83       	std	Z+4, r16	; 0x04
   1131e:	81 e8       	ldi	r24, 0x81	; 129
   11320:	9f e0       	ldi	r25, 0x0F	; 15
   11322:	a0 e0       	ldi	r26, 0x00	; 0
   11324:	81 83       	std	Z+1, r24	; 0x01
   11326:	92 83       	std	Z+2, r25	; 0x02
   11328:	a3 83       	std	Z+3, r26	; 0x03
   1132a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1132e:	02 c0       	rjmp	.+4      	; 0x11334 <gpib_read_str+0x136>
   11330:	00 e0       	ldi	r16, 0x00	; 0
   11332:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   11334:	c8 01       	movw	r24, r16
   11336:	cd b7       	in	r28, 0x3d	; 61
   11338:	de b7       	in	r29, 0x3e	; 62
   1133a:	27 96       	adiw	r28, 0x07	; 7
   1133c:	ea e0       	ldi	r30, 0x0A	; 10
   1133e:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

00011342 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11342:	a7 e0       	ldi	r26, 0x07	; 7
   11344:	b0 e0       	ldi	r27, 0x00	; 0
   11346:	e7 ea       	ldi	r30, 0xA7	; 167
   11348:	f9 e8       	ldi	r31, 0x89	; 137
   1134a:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   1134e:	d8 2f       	mov	r29, r24
   11350:	c9 2f       	mov	r28, r25
   11352:	7b 01       	movw	r14, r22
   11354:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11356:	fa 01       	movw	r30, r20
   11358:	80 81       	ld	r24, Z
   1135a:	91 81       	ldd	r25, Z+1	; 0x01
   1135c:	88 27       	eor	r24, r24
   1135e:	91 83       	std	Z+1, r25	; 0x01
   11360:	80 83       	st	Z, r24

    if(!size)
   11362:	67 2b       	or	r22, r23
   11364:	91 f4       	brne	.+36     	; 0x1138a <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11366:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1136a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1136e:	81 72       	andi	r24, 0x21	; 33
   11370:	91 70       	andi	r25, 0x01	; 1
   11372:	89 2b       	or	r24, r25
   11374:	51 f0       	breq	.+20     	; 0x1138a <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   11376:	87 e6       	ldi	r24, 0x67	; 103
   11378:	9f e0       	ldi	r25, 0x0F	; 15
   1137a:	a0 e0       	ldi	r26, 0x00	; 0
   1137c:	ed b7       	in	r30, 0x3d	; 61
   1137e:	fe b7       	in	r31, 0x3e	; 62
   11380:	81 83       	std	Z+1, r24	; 0x01
   11382:	92 83       	std	Z+2, r25	; 0x02
   11384:	a3 83       	std	Z+3, r26	; 0x03
   11386:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   1138a:	80 e0       	ldi	r24, 0x00	; 0
   1138c:	4d da       	rcall	.-2918   	; 0x10828 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   1138e:	4e 9b       	sbis	0x09, 6	; 9
   11390:	06 c0       	rjmp	.+12     	; 0x1139e <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11392:	64 ef       	ldi	r22, 0xF4	; 244
   11394:	71 e0       	ldi	r23, 0x01	; 1
   11396:	80 e0       	ldi	r24, 0x00	; 0
   11398:	90 e0       	ldi	r25, 0x00	; 0
   1139a:	04 da       	rcall	.-3064   	; 0x107a4 <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   1139c:	18 c0       	rjmp	.+48     	; 0x113ce <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   1139e:	64 ef       	ldi	r22, 0xF4	; 244
   113a0:	71 e0       	ldi	r23, 0x01	; 1
   113a2:	80 e0       	ldi	r24, 0x00	; 0
   113a4:	90 e0       	ldi	r25, 0x00	; 0
   113a6:	fe d9       	rcall	.-3076   	; 0x107a4 <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   113a8:	4e 99       	sbic	0x09, 6	; 9
   113aa:	f3 cf       	rjmp	.-26     	; 0x11392 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   113ac:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   113b0:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   113b2:	d1 f3       	breq	.-12     	; 0x113a8 <gpib_write_str+0x66>
   113b4:	81 e0       	ldi	r24, 0x01	; 1
   113b6:	38 da       	rcall	.-2960   	; 0x10828 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   113b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113bc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113c0:	85 70       	andi	r24, 0x05	; 5
   113c2:	99 27       	eor	r25, r25
   113c4:	89 2b       	or	r24, r25
   113c6:	d9 f0       	breq	.+54     	; 0x113fe <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   113c8:	89 e3       	ldi	r24, 0x39	; 57
   113ca:	9f e0       	ldi	r25, 0x0F	; 15
   113cc:	10 c0       	rjmp	.+32     	; 0x113ee <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   113ce:	19 99       	sbic	0x03, 1	; 3
   113d0:	1f c0       	rjmp	.+62     	; 0x11410 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   113d2:	80 91 e7 1c 	lds	r24, 0x1CE7	; 0x801ce7 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   113d6:	88 23       	and	r24, r24
   113d8:	d1 f3       	breq	.-12     	; 0x113ce <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   113da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113e2:	85 70       	andi	r24, 0x05	; 5
   113e4:	99 27       	eor	r25, r25
   113e6:	89 2b       	or	r24, r25
   113e8:	51 f0       	breq	.+20     	; 0x113fe <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   113ea:	8f e1       	ldi	r24, 0x1F	; 31
   113ec:	9f e0       	ldi	r25, 0x0F	; 15
   113ee:	a0 e0       	ldi	r26, 0x00	; 0
   113f0:	ed b7       	in	r30, 0x3d	; 61
   113f2:	fe b7       	in	r31, 0x3e	; 62
   113f4:	81 83       	std	Z+1, r24	; 0x01
   113f6:	92 83       	std	Z+2, r25	; 0x02
   113f8:	a3 83       	std	Z+3, r26	; 0x03
   113fa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   113fe:	f8 01       	movw	r30, r16
   11400:	80 81       	ld	r24, Z
   11402:	91 81       	ldd	r25, Z+1	; 0x01
   11404:	90 6c       	ori	r25, 0xC0	; 192
   11406:	91 83       	std	Z+1, r25	; 0x01
   11408:	80 83       	st	Z, r24
			return(ind);
   1140a:	c0 e0       	ldi	r28, 0x00	; 0
   1140c:	d0 e0       	ldi	r29, 0x00	; 0
   1140e:	45 c0       	rjmp	.+138    	; 0x1149a <gpib_write_str+0x158>
   11410:	cd 2e       	mov	r12, r29
   11412:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11414:	c0 e0       	ldi	r28, 0x00	; 0
   11416:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11418:	ce 15       	cp	r28, r14
   1141a:	df 05       	cpc	r29, r15
   1141c:	1c f5       	brge	.+70     	; 0x11464 <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   1141e:	21 96       	adiw	r28, 0x01	; 1
   11420:	f6 01       	movw	r30, r12
   11422:	81 91       	ld	r24, Z+
   11424:	6f 01       	movw	r12, r30
   11426:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11428:	f8 01       	movw	r30, r16
   1142a:	20 81       	ld	r18, Z
   1142c:	31 81       	ldd	r19, Z+1	; 0x01
   1142e:	30 ff       	sbrs	r19, 0
   11430:	04 c0       	rjmp	.+8      	; 0x1143a <gpib_write_str+0xf8>
   11432:	ec 16       	cp	r14, r28
   11434:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   11436:	09 f4       	brne	.+2      	; 0x1143a <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11438:	91 60       	ori	r25, 0x01	; 1
   1143a:	0b db       	rcall	.-2538   	; 0x10a52 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   1143c:	5c 01       	movw	r10, r24
   1143e:	aa 24       	eor	r10, r10
   11440:	f0 ed       	ldi	r31, 0xD0	; 208
   11442:	bf 22       	and	r11, r31
   11444:	f8 01       	movw	r30, r16
   11446:	20 81       	ld	r18, Z
   11448:	31 81       	ldd	r19, Z+1	; 0x01
   1144a:	2a 29       	or	r18, r10
   1144c:	3b 29       	or	r19, r11
   1144e:	31 83       	std	Z+1, r19	; 0x01
   11450:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11452:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11456:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   1145a:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1145c:	cc de       	rcall	.-616    	; 0x111f6 <gpib_decode>
   1145e:	a1 14       	cp	r10, r1
   11460:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11462:	d1 f2       	breq	.-76     	; 0x11418 <gpib_write_str+0xd6>
   11464:	81 e0       	ldi	r24, 0x01	; 1
   11466:	e0 d9       	rcall	.-3136   	; 0x10828 <gpib_rx_init>

    if ( ind != size )
   11468:	ce 15       	cp	r28, r14
   1146a:	df 05       	cpc	r29, r15
   1146c:	b1 f0       	breq	.+44     	; 0x1149a <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1146e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11472:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11476:	81 72       	andi	r24, 0x21	; 33
   11478:	91 70       	andi	r25, 0x01	; 1
   1147a:	89 2b       	or	r24, r25
   1147c:	71 f0       	breq	.+28     	; 0x1149a <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1147e:	ed b7       	in	r30, 0x3d	; 61
   11480:	fe b7       	in	r31, 0x3e	; 62
   11482:	f7 82       	std	Z+7, r15	; 0x07
   11484:	e6 82       	std	Z+6, r14	; 0x06
   11486:	d5 83       	std	Z+5, r29	; 0x05
   11488:	c4 83       	std	Z+4, r28	; 0x04
   1148a:	87 ef       	ldi	r24, 0xF7	; 247
   1148c:	9e e0       	ldi	r25, 0x0E	; 14
   1148e:	a0 e0       	ldi	r26, 0x00	; 0
   11490:	81 83       	std	Z+1, r24	; 0x01
   11492:	92 83       	std	Z+2, r25	; 0x02
   11494:	a3 83       	std	Z+3, r26	; 0x03
   11496:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }
    return(ind);
}
   1149a:	ce 01       	movw	r24, r28
   1149c:	cd b7       	in	r28, 0x3d	; 61
   1149e:	de b7       	in	r29, 0x3e	; 62
   114a0:	27 96       	adiw	r28, 0x07	; 7
   114a2:	ea e0       	ldi	r30, 0x0A	; 10
   114a4:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

000114a8 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   114a8:	ad b7       	in	r26, 0x3d	; 61
   114aa:	be b7       	in	r27, 0x3e	; 62
   114ac:	17 97       	sbiw	r26, 0x07	; 7
   114ae:	0f b6       	in	r0, 0x3f	; 63
   114b0:	f8 94       	cli
   114b2:	be bf       	out	0x3e, r27	; 62
   114b4:	0f be       	out	0x3f, r0	; 63
   114b6:	ad bf       	out	0x3d, r26	; 61
   114b8:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   114bc:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   114c0:	88 eb       	ldi	r24, 0xB8	; 184
   114c2:	91 e0       	ldi	r25, 0x01	; 1
   114c4:	0e 94 54 99 	call	0x132a8	; 0x132a8 <Read_Config>
   114c8:	18 16       	cp	r1, r24
   114ca:	19 06       	cpc	r1, r25
   114cc:	8c f4       	brge	.+34     	; 0x114f0 <gpib_file_init+0x48>
   114ce:	ed b7       	in	r30, 0x3d	; 61
   114d0:	fe b7       	in	r31, 0x3e	; 62
   114d2:	97 83       	std	Z+7, r25	; 0x07
   114d4:	86 83       	std	Z+6, r24	; 0x06
   114d6:	88 eb       	ldi	r24, 0xB8	; 184
   114d8:	91 e0       	ldi	r25, 0x01	; 1
   114da:	95 83       	std	Z+5, r25	; 0x05
   114dc:	84 83       	std	Z+4, r24	; 0x04
   114de:	8b ec       	ldi	r24, 0xCB	; 203
   114e0:	94 e1       	ldi	r25, 0x14	; 20
   114e2:	a0 e0       	ldi	r26, 0x00	; 0
   114e4:	81 83       	std	Z+1, r24	; 0x01
   114e6:	92 83       	std	Z+2, r25	; 0x02
   114e8:	a3 83       	std	Z+3, r26	; 0x03
   114ea:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   114ee:	10 c0       	rjmp	.+32     	; 0x11510 <gpib_file_init+0x68>
   114f0:	89 2b       	or	r24, r25
   114f2:	71 f0       	breq	.+28     	; 0x11510 <gpib_file_init+0x68>
   114f4:	88 eb       	ldi	r24, 0xB8	; 184
   114f6:	91 e0       	ldi	r25, 0x01	; 1
   114f8:	ed b7       	in	r30, 0x3d	; 61
   114fa:	fe b7       	in	r31, 0x3e	; 62
   114fc:	95 83       	std	Z+5, r25	; 0x05
   114fe:	84 83       	std	Z+4, r24	; 0x04
   11500:	8a eb       	ldi	r24, 0xBA	; 186
   11502:	94 e1       	ldi	r25, 0x14	; 20
   11504:	a0 e0       	ldi	r26, 0x00	; 0
   11506:	81 83       	std	Z+1, r24	; 0x01
   11508:	92 83       	std	Z+2, r25	; 0x02
   1150a:	a3 83       	std	Z+3, r26	; 0x03
   1150c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   11510:	0e 94 1f 98 	call	0x1303e	; 0x1303e <set_Config_Defaults>
   11514:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <mmc_wp_status>
   11518:	89 2b       	or	r24, r25
   1151a:	51 f0       	breq	.+20     	; 0x11530 <gpib_file_init+0x88>
   1151c:	81 ea       	ldi	r24, 0xA1	; 161
   1151e:	94 e1       	ldi	r25, 0x14	; 20
   11520:	a0 e0       	ldi	r26, 0x00	; 0
   11522:	ed b7       	in	r30, 0x3d	; 61
   11524:	fe b7       	in	r31, 0x3e	; 62
   11526:	81 83       	std	Z+1, r24	; 0x01
   11528:	92 83       	std	Z+2, r25	; 0x02
   1152a:	a3 83       	std	Z+3, r26	; 0x03
   1152c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   11530:	ad b7       	in	r26, 0x3d	; 61
   11532:	be b7       	in	r27, 0x3e	; 62
   11534:	17 96       	adiw	r26, 0x07	; 7
   11536:	0f b6       	in	r0, 0x3f	; 63
   11538:	f8 94       	cli
   1153a:	be bf       	out	0x3e, r27	; 62
   1153c:	0f be       	out	0x3f, r0	; 63
   1153e:	ad bf       	out	0x3d, r26	; 61
   11540:	08 95       	ret

00011542 <SS80_is_MLA>:
   11542:	40 e2       	ldi	r20, 0x20	; 32
   11544:	50 e0       	ldi	r21, 0x00	; 0
   11546:	bc 01       	movw	r22, r24
   11548:	83 e0       	ldi	r24, 0x03	; 3
   1154a:	90 e0       	ldi	r25, 0x00	; 0
   1154c:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   11550:	8f 3f       	cpi	r24, 0xFF	; 255
   11552:	2f ef       	ldi	r18, 0xFF	; 255
   11554:	92 07       	cpc	r25, r18
   11556:	19 f0       	breq	.+6      	; 0x1155e <SS80_is_MLA+0x1c>
   11558:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   1155c:	08 95       	ret
   1155e:	80 e0       	ldi	r24, 0x00	; 0
   11560:	90 e0       	ldi	r25, 0x00	; 0
   11562:	08 95       	ret

00011564 <SS80_is_MTA>:
   11564:	40 e4       	ldi	r20, 0x40	; 64
   11566:	50 e0       	ldi	r21, 0x00	; 0
   11568:	bc 01       	movw	r22, r24
   1156a:	83 e0       	ldi	r24, 0x03	; 3
   1156c:	90 e0       	ldi	r25, 0x00	; 0
   1156e:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   11572:	8f 3f       	cpi	r24, 0xFF	; 255
   11574:	2f ef       	ldi	r18, 0xFF	; 255
   11576:	92 07       	cpc	r25, r18
   11578:	19 f0       	breq	.+6      	; 0x11580 <SS80_is_MTA+0x1c>
   1157a:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   1157e:	08 95       	ret
   11580:	80 e0       	ldi	r24, 0x00	; 0
   11582:	90 e0       	ldi	r25, 0x00	; 0
   11584:	08 95       	ret

00011586 <SS80_is_MSA>:
   11586:	40 e6       	ldi	r20, 0x60	; 96
   11588:	50 e0       	ldi	r21, 0x00	; 0
   1158a:	bc 01       	movw	r22, r24
   1158c:	83 e0       	ldi	r24, 0x03	; 3
   1158e:	90 e0       	ldi	r25, 0x00	; 0
   11590:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   11594:	8f 3f       	cpi	r24, 0xFF	; 255
   11596:	2f ef       	ldi	r18, 0xFF	; 255
   11598:	92 07       	cpc	r25, r18
   1159a:	19 f0       	breq	.+6      	; 0x115a2 <SS80_is_MSA+0x1c>
   1159c:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   115a0:	08 95       	ret
   115a2:	80 e0       	ldi	r24, 0x00	; 0
   115a4:	90 e0       	ldi	r25, 0x00	; 0
   115a6:	08 95       	ret

000115a8 <AMIGO_is_MLA>:
   115a8:	40 e2       	ldi	r20, 0x20	; 32
   115aa:	50 e0       	ldi	r21, 0x00	; 0
   115ac:	bc 01       	movw	r22, r24
   115ae:	81 e0       	ldi	r24, 0x01	; 1
   115b0:	90 e0       	ldi	r25, 0x00	; 0
   115b2:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   115b6:	8f 3f       	cpi	r24, 0xFF	; 255
   115b8:	2f ef       	ldi	r18, 0xFF	; 255
   115ba:	92 07       	cpc	r25, r18
   115bc:	19 f0       	breq	.+6      	; 0x115c4 <AMIGO_is_MLA+0x1c>
   115be:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   115c2:	08 95       	ret
   115c4:	80 e0       	ldi	r24, 0x00	; 0
   115c6:	90 e0       	ldi	r25, 0x00	; 0
   115c8:	08 95       	ret

000115ca <AMIGO_is_MTA>:
   115ca:	40 e4       	ldi	r20, 0x40	; 64
   115cc:	50 e0       	ldi	r21, 0x00	; 0
   115ce:	bc 01       	movw	r22, r24
   115d0:	81 e0       	ldi	r24, 0x01	; 1
   115d2:	90 e0       	ldi	r25, 0x00	; 0
   115d4:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   115d8:	8f 3f       	cpi	r24, 0xFF	; 255
   115da:	2f ef       	ldi	r18, 0xFF	; 255
   115dc:	92 07       	cpc	r25, r18
   115de:	19 f0       	breq	.+6      	; 0x115e6 <AMIGO_is_MTA+0x1c>
   115e0:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   115e4:	08 95       	ret
   115e6:	80 e0       	ldi	r24, 0x00	; 0
   115e8:	90 e0       	ldi	r25, 0x00	; 0
   115ea:	08 95       	ret

000115ec <AMIGO_is_MSA>:
   115ec:	40 e6       	ldi	r20, 0x60	; 96
   115ee:	50 e0       	ldi	r21, 0x00	; 0
   115f0:	bc 01       	movw	r22, r24
   115f2:	81 e0       	ldi	r24, 0x01	; 1
   115f4:	90 e0       	ldi	r25, 0x00	; 0
   115f6:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   115fa:	8f 3f       	cpi	r24, 0xFF	; 255
   115fc:	2f ef       	ldi	r18, 0xFF	; 255
   115fe:	92 07       	cpc	r25, r18
   11600:	19 f0       	breq	.+6      	; 0x11608 <AMIGO_is_MSA+0x1c>
   11602:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   11606:	08 95       	ret
   11608:	80 e0       	ldi	r24, 0x00	; 0
   1160a:	90 e0       	ldi	r25, 0x00	; 0
   1160c:	08 95       	ret

0001160e <PRINTER_is_MLA>:
   1160e:	40 e2       	ldi	r20, 0x20	; 32
   11610:	50 e0       	ldi	r21, 0x00	; 0
   11612:	bc 01       	movw	r22, r24
   11614:	84 e0       	ldi	r24, 0x04	; 4
   11616:	90 e0       	ldi	r25, 0x00	; 0
   11618:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   1161c:	8f 3f       	cpi	r24, 0xFF	; 255
   1161e:	2f ef       	ldi	r18, 0xFF	; 255
   11620:	92 07       	cpc	r25, r18
   11622:	19 f0       	breq	.+6      	; 0x1162a <PRINTER_is_MLA+0x1c>
   11624:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   11628:	08 95       	ret
   1162a:	80 e0       	ldi	r24, 0x00	; 0
   1162c:	90 e0       	ldi	r25, 0x00	; 0
   1162e:	08 95       	ret

00011630 <PRINTER_is_MTA>:
   11630:	40 e4       	ldi	r20, 0x40	; 64
   11632:	50 e0       	ldi	r21, 0x00	; 0
   11634:	bc 01       	movw	r22, r24
   11636:	84 e0       	ldi	r24, 0x04	; 4
   11638:	90 e0       	ldi	r25, 0x00	; 0
   1163a:	0e 94 85 95 	call	0x12b0a	; 0x12b0a <find_device>
   1163e:	8f 3f       	cpi	r24, 0xFF	; 255
   11640:	2f ef       	ldi	r18, 0xFF	; 255
   11642:	92 07       	cpc	r25, r18
   11644:	19 f0       	breq	.+6      	; 0x1164c <PRINTER_is_MTA+0x1c>
   11646:	0c 94 af 95 	jmp	0x12b5e	; 0x12b5e <set_active_device>
   1164a:	08 95       	ret
   1164c:	80 e0       	ldi	r24, 0x00	; 0
   1164e:	90 e0       	ldi	r25, 0x00	; 0
   11650:	08 95       	ret

00011652 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11652:	b2 d8       	rcall	.-3740   	; 0x107b8 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11654:	19 d9       	rcall	.-3534   	; 0x10888 <gpib_state_init>
   11656:	0e 94 36 aa 	call	0x1546c	; 0x1546c <SS80_init>

    SS80_init();                                  // SS80 state init
   1165a:	0e 94 c5 af 	call	0x15f8a	; 0x15f8a <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   1165e:	0c 94 f6 ba 	jmp	0x175ec	; 0x175ec <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11662:	08 95       	ret

00011664 <gpib_trace_task>:
   11664:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11666:	1f 93       	push	r17
   11668:	cf 93       	push	r28
   1166a:	df 93       	push	r29
   1166c:	00 d0       	rcall	.+0      	; 0x1166e <gpib_trace_task+0xa>
   1166e:	00 d0       	rcall	.+0      	; 0x11670 <gpib_trace_task+0xc>
   11670:	1f 92       	push	r1
   11672:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11674:	00 97       	sbiw	r24, 0x00	; 0
   11676:	09 f4       	brne	.+2      	; 0x1167a <gpib_trace_task+0x16>
   11678:	44 c0       	rjmp	.+136    	; 0x11702 <gpib_trace_task+0x9e>
   1167a:	fc 01       	movw	r30, r24
   1167c:	20 81       	ld	r18, Z
   1167e:	22 23       	and	r18, r18
   11680:	09 f4       	brne	.+2      	; 0x11684 <gpib_trace_task+0x20>
   11682:	3f c0       	rjmp	.+126    	; 0x11702 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11684:	0e 94 5f 30 	call	0x60be	; 0x60be <skipspaces>
   11688:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   1168a:	ed b7       	in	r30, 0x3d	; 61
   1168c:	fe b7       	in	r31, 0x3e	; 62
   1168e:	95 83       	std	Z+5, r25	; 0x05
   11690:	84 83       	std	Z+4, r24	; 0x04
   11692:	87 e8       	ldi	r24, 0x87	; 135
   11694:	94 e1       	ldi	r25, 0x14	; 20
   11696:	a0 e0       	ldi	r26, 0x00	; 0
   11698:	81 83       	std	Z+1, r24	; 0x01
   1169a:	92 83       	std	Z+2, r25	; 0x02
   1169c:	a3 83       	std	Z+3, r26	; 0x03
   1169e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        if(detail)
   116a2:	20 97       	sbiw	r28, 0x00	; 0
   116a4:	51 f0       	breq	.+20     	; 0x116ba <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   116a6:	8c e5       	ldi	r24, 0x5C	; 92
   116a8:	94 e1       	ldi	r25, 0x14	; 20
   116aa:	a0 e0       	ldi	r26, 0x00	; 0
   116ac:	ed b7       	in	r30, 0x3d	; 61
   116ae:	fe b7       	in	r31, 0x3e	; 62
   116b0:	81 83       	std	Z+1, r24	; 0x01
   116b2:	92 83       	std	Z+2, r25	; 0x02
   116b4:	a3 83       	std	Z+3, r26	; 0x03
   116b6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("Press ANY key to exit\n");
   116ba:	85 e4       	ldi	r24, 0x45	; 69
   116bc:	94 e1       	ldi	r25, 0x14	; 20
   116be:	a0 e0       	ldi	r26, 0x00	; 0
   116c0:	ed b7       	in	r30, 0x3d	; 61
   116c2:	fe b7       	in	r31, 0x3e	; 62
   116c4:	81 83       	std	Z+1, r24	; 0x01
   116c6:	92 83       	std	Z+2, r25	; 0x02
   116c8:	a3 83       	std	Z+3, r26	; 0x03
   116ca:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   116ce:	6c e0       	ldi	r22, 0x0C	; 12
   116d0:	79 e0       	ldi	r23, 0x09	; 9
   116d2:	c8 01       	movw	r24, r16
   116d4:	0e 94 6f 7c 	call	0xf8de	; 0xf8de <fopen>
   116d8:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   116dc:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   116e0:	89 2b       	or	r24, r25
   116e2:	b9 f4       	brne	.+46     	; 0x11712 <gpib_trace_task+0xae>
        {
            perror("open failed");
   116e4:	8a e9       	ldi	r24, 0x9A	; 154
   116e6:	9d e0       	ldi	r25, 0x0D	; 13
   116e8:	0e 94 a0 76 	call	0xed40	; 0xed40 <perror>
            printf("exiting...\n");
   116ec:	89 e3       	ldi	r24, 0x39	; 57
   116ee:	94 e1       	ldi	r25, 0x14	; 20
   116f0:	a0 e0       	ldi	r26, 0x00	; 0
   116f2:	ed b7       	in	r30, 0x3d	; 61
   116f4:	fe b7       	in	r31, 0x3e	; 62
   116f6:	81 83       	std	Z+1, r24	; 0x01
   116f8:	92 83       	std	Z+2, r25	; 0x02
   116fa:	a3 83       	std	Z+3, r26	; 0x03
   116fc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            return;
   11700:	3d c0       	rjmp	.+122    	; 0x1177c <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11702:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11706:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   1170a:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   1170e:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11712:	9f df       	rcall	.-194    	; 0x11652 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11714:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   11718:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   1171c:	d2 da       	rcall	.-2652   	; 0x10cc2 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   1171e:	80 e0       	ldi	r24, 0x00	; 0
   11720:	0e 94 95 28 	call	0x512a	; 0x512a <uart_keyhit>
   11724:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11726:	31 f4       	brne	.+12     	; 0x11734 <gpib_trace_task+0xd0>
   11728:	ce 01       	movw	r24, r28
        if(!detail)
   1172a:	5f dc       	rcall	.-1858   	; 0x10fea <gpib_read_byte>
   1172c:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   1172e:	b9 f7       	brne	.-18     	; 0x1171e <gpib_trace_task+0xba>
   11730:	62 dd       	rcall	.-1340   	; 0x111f6 <gpib_decode>
   11732:	f5 cf       	rjmp	.-22     	; 0x1171e <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11734:	83 e3       	ldi	r24, 0x33	; 51
   11736:	94 e1       	ldi	r25, 0x14	; 20
   11738:	a0 e0       	ldi	r26, 0x00	; 0
   1173a:	ed b7       	in	r30, 0x3d	; 61
   1173c:	fe b7       	in	r31, 0x3e	; 62
   1173e:	81 83       	std	Z+1, r24	; 0x01
   11740:	92 83       	std	Z+2, r25	; 0x02
   11742:	a3 83       	std	Z+3, r26	; 0x03
   11744:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    if(gpib_log_fp)
   11748:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <gpib_log_fp>
   1174c:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <gpib_log_fp+0x1>
   11750:	00 97       	sbiw	r24, 0x00	; 0
   11752:	a1 f0       	breq	.+40     	; 0x1177c <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11754:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
        printf("Capturing Closed\n");
   11758:	81 e2       	ldi	r24, 0x21	; 33
   1175a:	94 e1       	ldi	r25, 0x14	; 20
   1175c:	a0 e0       	ldi	r26, 0x00	; 0
   1175e:	ed b7       	in	r30, 0x3d	; 61
   11760:	fe b7       	in	r31, 0x3e	; 62
   11762:	81 83       	std	Z+1, r24	; 0x01
   11764:	92 83       	std	Z+2, r25	; 0x02
   11766:	a3 83       	std	Z+3, r26	; 0x03
   11768:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        gpib_log_fp = stdout;
   1176c:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <__iob+0x2>
   11770:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <__iob+0x3>
   11774:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <gpib_log_fp+0x1>
   11778:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <gpib_log_fp>
    }
}
   1177c:	cd b7       	in	r28, 0x3d	; 61
   1177e:	de b7       	in	r29, 0x3e	; 62
   11780:	25 96       	adiw	r28, 0x05	; 5
   11782:	e4 e0       	ldi	r30, 0x04	; 4
   11784:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00011788 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11788:	ef 92       	push	r14
   1178a:	ff 92       	push	r15
   1178c:	0f 93       	push	r16
   1178e:	1f 93       	push	r17
   11790:	cf 93       	push	r28
   11792:	df 93       	push	r29
   11794:	00 d0       	rcall	.+0      	; 0x11796 <gpib_error_test+0xe>
   11796:	1f 92       	push	r1
   11798:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   1179a:	ec 01       	movw	r28, r24
   1179c:	cc 27       	eor	r28, r28
   1179e:	d0 7d       	andi	r29, 0xD0	; 208
   117a0:	20 97       	sbiw	r28, 0x00	; 0
   117a2:	61 f0       	breq	.+24     	; 0x117bc <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   117a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117ac:	8d 72       	andi	r24, 0x2D	; 45
   117ae:	99 27       	eor	r25, r25
   117b0:	87 01       	movw	r16, r14
   117b2:	00 27       	eor	r16, r16
   117b4:	10 71       	andi	r17, 0x10	; 16
   117b6:	89 2b       	or	r24, r25
   117b8:	59 f4       	brne	.+22     	; 0x117d0 <gpib_error_test+0x48>
   117ba:	17 c0       	rjmp	.+46     	; 0x117ea <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117bc:	80 e0       	ldi	r24, 0x00	; 0
   117be:	0e 94 95 28 	call	0x512a	; 0x512a <uart_keyhit>
   117c2:	89 2b       	or	r24, r25
   117c4:	79 f7       	brne	.-34     	; 0x117a4 <gpib_error_test+0x1c>
   117c6:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <mmc_ins_status>
   117ca:	01 97       	sbiw	r24, 0x01	; 1
   117cc:	59 f7       	brne	.-42     	; 0x117a4 <gpib_error_test+0x1c>
   117ce:	62 c0       	rjmp	.+196    	; 0x11894 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   117d0:	01 15       	cp	r16, r1
   117d2:	11 05       	cpc	r17, r1
   117d4:	51 f0       	breq	.+20     	; 0x117ea <gpib_error_test+0x62>
                printf("<IFC>\n");
   117d6:	8a e1       	ldi	r24, 0x1A	; 26
   117d8:	94 e1       	ldi	r25, 0x14	; 20
   117da:	a0 e0       	ldi	r26, 0x00	; 0
   117dc:	ed b7       	in	r30, 0x3d	; 61
   117de:	fe b7       	in	r31, 0x3e	; 62
   117e0:	81 83       	std	Z+1, r24	; 0x01
   117e2:	92 83       	std	Z+2, r25	; 0x02
   117e4:	a3 83       	std	Z+3, r26	; 0x03
   117e6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   117ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117f2:	8d 72       	andi	r24, 0x2D	; 45
   117f4:	99 27       	eor	r25, r25
   117f6:	89 2b       	or	r24, r25
   117f8:	c1 f0       	breq	.+48     	; 0x1182a <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   117fa:	f6 fe       	sbrs	r15, 6
   117fc:	0a c0       	rjmp	.+20     	; 0x11812 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   117fe:	8f e0       	ldi	r24, 0x0F	; 15
   11800:	94 e1       	ldi	r25, 0x14	; 20
   11802:	a0 e0       	ldi	r26, 0x00	; 0
   11804:	ed b7       	in	r30, 0x3d	; 61
   11806:	fe b7       	in	r31, 0x3e	; 62
   11808:	81 83       	std	Z+1, r24	; 0x01
   1180a:	92 83       	std	Z+2, r25	; 0x02
   1180c:	a3 83       	std	Z+3, r26	; 0x03
   1180e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11812:	d7 ff       	sbrs	r29, 7
   11814:	0a c0       	rjmp	.+20     	; 0x1182a <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11816:	88 e0       	ldi	r24, 0x08	; 8
   11818:	94 e1       	ldi	r25, 0x14	; 20
   1181a:	a0 e0       	ldi	r26, 0x00	; 0
   1181c:	ed b7       	in	r30, 0x3d	; 61
   1181e:	fe b7       	in	r31, 0x3e	; 62
   11820:	81 83       	std	Z+1, r24	; 0x01
   11822:	92 83       	std	Z+2, r25	; 0x02
   11824:	a3 83       	std	Z+3, r26	; 0x03
   11826:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        }

        if(uart_keyhit(0))
   1182a:	80 e0       	ldi	r24, 0x00	; 0
   1182c:	0e 94 95 28 	call	0x512a	; 0x512a <uart_keyhit>
   11830:	89 2b       	or	r24, r25
   11832:	51 f0       	breq	.+20     	; 0x11848 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11834:	8b ef       	ldi	r24, 0xFB	; 251
   11836:	93 e1       	ldi	r25, 0x13	; 19
   11838:	a0 e0       	ldi	r26, 0x00	; 0
   1183a:	ed b7       	in	r30, 0x3d	; 61
   1183c:	fe b7       	in	r31, 0x3e	; 62
   1183e:	81 83       	std	Z+1, r24	; 0x01
   11840:	92 83       	std	Z+2, r25	; 0x02
   11842:	a3 83       	std	Z+3, r26	; 0x03
   11844:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

        if( mmc_ins_status() != 1 )
   11848:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <mmc_ins_status>
   1184c:	01 97       	sbiw	r24, 0x01	; 1
   1184e:	51 f0       	breq	.+20     	; 0x11864 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11850:	8a ee       	ldi	r24, 0xEA	; 234
   11852:	93 e1       	ldi	r25, 0x13	; 19
   11854:	a0 e0       	ldi	r26, 0x00	; 0
   11856:	ed b7       	in	r30, 0x3d	; 61
   11858:	fe b7       	in	r31, 0x3e	; 62
   1185a:	81 83       	std	Z+1, r24	; 0x01
   1185c:	92 83       	std	Z+2, r25	; 0x02
   1185e:	a3 83       	std	Z+3, r26	; 0x03
   11860:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

        if(val & IFC_FLAG)
   11864:	01 15       	cp	r16, r1
   11866:	11 05       	cpc	r17, r1
   11868:	09 f0       	breq	.+2      	; 0x1186c <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   1186a:	f3 de       	rcall	.-538    	; 0x11652 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   1186c:	80 e0       	ldi	r24, 0x00	; 0
   1186e:	0e 94 95 28 	call	0x512a	; 0x512a <uart_keyhit>
   11872:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11874:	11 f0       	breq	.+4      	; 0x1187a <gpib_error_test+0xf2>
   11876:	ed de       	rcall	.-550    	; 0x11652 <gpib_init_devices>
   11878:	0b c0       	rjmp	.+22     	; 0x11890 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   1187a:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <mmc_ins_status>
   1187e:	01 97       	sbiw	r24, 0x01	; 1
   11880:	39 f4       	brne	.+14     	; 0x11890 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11882:	01 15       	cp	r16, r1
   11884:	11 05       	cpc	r17, r1
   11886:	31 f0       	breq	.+12     	; 0x11894 <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11888:	54 98       	cbi	0x0a, 4	; 10
   1188a:	4c 9b       	sbis	0x09, 4	; 9
   1188c:	fd cf       	rjmp	.-6      	; 0x11888 <gpib_error_test+0x100>
   1188e:	02 c0       	rjmp	.+4      	; 0x11894 <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11890:	c1 e0       	ldi	r28, 0x01	; 1
   11892:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11894:	ce 01       	movw	r24, r28
   11896:	cd b7       	in	r28, 0x3d	; 61
   11898:	de b7       	in	r29, 0x3e	; 62
   1189a:	23 96       	adiw	r28, 0x03	; 3
   1189c:	e6 e0       	ldi	r30, 0x06	; 6
   1189e:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

000118a2 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   118a2:	1f 93       	push	r17
   118a4:	cf 93       	push	r28
   118a6:	df 93       	push	r29
   118a8:	ec 01       	movw	r28, r24
   118aa:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   118ac:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   118b0:	8f 35       	cpi	r24, 0x5F	; 95
   118b2:	91 f0       	breq	.+36     	; 0x118d8 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   118b4:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   118b8:	90 e0       	ldi	r25, 0x00	; 0
   118ba:	76 de       	rcall	.-788    	; 0x115a8 <AMIGO_is_MLA>
   118bc:	89 2b       	or	r24, r25
   118be:	c9 f4       	brne	.+50     	; 0x118f2 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   118c0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   118c4:	90 e0       	ldi	r25, 0x00	; 0
   118c6:	3d de       	rcall	.-902    	; 0x11542 <SS80_is_MLA>
   118c8:	89 2b       	or	r24, r25
   118ca:	11 f5       	brne	.+68     	; 0x11910 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   118cc:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   118d0:	90 e0       	ldi	r25, 0x00	; 0
   118d2:	9d de       	rcall	.-710    	; 0x1160e <PRINTER_is_MLA>
   118d4:	89 2b       	or	r24, r25
   118d6:	59 f5       	brne	.+86     	; 0x1192e <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   118d8:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   118dc:	8f 33       	cpi	r24, 0x3F	; 63
   118de:	19 f4       	brne	.+6      	; 0x118e6 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   118e0:	80 e0       	ldi	r24, 0x00	; 0
   118e2:	90 e0       	ldi	r25, 0x00	; 0
   118e4:	2e c0       	rjmp	.+92     	; 0x11942 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   118e6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   118ea:	90 e0       	ldi	r25, 0x00	; 0
   118ec:	6e de       	rcall	.-804    	; 0x115ca <AMIGO_is_MTA>
   118ee:	89 2b       	or	r24, r25
   118f0:	49 f0       	breq	.+18     	; 0x11904 <GPIB_COMMANDS+0x62>
        {
            if(unread)
   118f2:	11 23       	and	r17, r17
   118f4:	11 f0       	breq	.+4      	; 0x118fa <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   118f6:	ce 01       	movw	r24, r28
   118f8:	60 d8       	rcall	.-3904   	; 0x109ba <gpib_unread>
   118fa:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = AMIGO_COMMANDS(secondary);
   118fe:	0e 94 f1 b9 	call	0x173e2	; 0x173e2 <AMIGO_COMMANDS>
   11902:	1d c0       	rjmp	.+58     	; 0x1193e <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11904:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11908:	90 e0       	ldi	r25, 0x00	; 0
   1190a:	2c de       	rcall	.-936    	; 0x11564 <SS80_is_MTA>
   1190c:	89 2b       	or	r24, r25
   1190e:	49 f0       	breq	.+18     	; 0x11922 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11910:	11 23       	and	r17, r17
   11912:	11 f0       	breq	.+4      	; 0x11918 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11914:	ce 01       	movw	r24, r28
   11916:	51 d8       	rcall	.-3934   	; 0x109ba <gpib_unread>
   11918:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = SS80_COMMANDS(secondary);
   1191c:	0e 94 11 ae 	call	0x15c22	; 0x15c22 <SS80_COMMANDS>
   11920:	0e c0       	rjmp	.+28     	; 0x1193e <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11922:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11926:	90 e0       	ldi	r25, 0x00	; 0
   11928:	83 de       	rcall	.-762    	; 0x11630 <PRINTER_is_MTA>
   1192a:	89 2b       	or	r24, r25
   1192c:	c9 f2       	breq	.-78     	; 0x118e0 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   1192e:	11 23       	and	r17, r17
   11930:	11 f0       	breq	.+4      	; 0x11936 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11932:	ce 01       	movw	r24, r28
   11934:	42 d8       	rcall	.-3964   	; 0x109ba <gpib_unread>
   11936:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
            status = PRINTER_COMMANDS(secondary);
   1193a:	0e 94 6a bc 	call	0x178d4	; 0x178d4 <PRINTER_COMMANDS>
   1193e:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
            secondary = 0;
   11942:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11944:	cf 91       	pop	r28
   11946:	1f 91       	pop	r17
   11948:	08 95       	ret

0001194a <Send_Identify>:
   1194a:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   1194c:	df 92       	push	r13
   1194e:	ff 92       	push	r15
   11950:	0f 93       	push	r16
   11952:	1f 93       	push	r17
   11954:	cf 93       	push	r28
   11956:	df 93       	push	r29
   11958:	cd b7       	in	r28, 0x3d	; 61
   1195a:	de b7       	in	r29, 0x3e	; 62
   1195c:	2b 97       	sbiw	r28, 0x0b	; 11
   1195e:	0f b6       	in	r0, 0x3f	; 63
   11960:	f8 94       	cli
   11962:	de bf       	out	0x3e, r29	; 62
   11964:	0f be       	out	0x3f, r0	; 63
   11966:	cd bf       	out	0x3d, r28	; 61
   11968:	f8 2e       	mov	r15, r24
   1196a:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   1196c:	80 e0       	ldi	r24, 0x00	; 0
   1196e:	91 e0       	ldi	r25, 0x01	; 1
   11970:	9b 87       	std	Y+11, r25	; 0x0b
   11972:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11974:	8b 01       	movw	r16, r22
   11976:	20 e0       	ldi	r18, 0x00	; 0
   11978:	30 e0       	ldi	r19, 0x00	; 0
   1197a:	42 e0       	ldi	r20, 0x02	; 2
   1197c:	50 e0       	ldi	r21, 0x00	; 0
   1197e:	60 e0       	ldi	r22, 0x00	; 0
   11980:	70 e0       	ldi	r23, 0x00	; 0
   11982:	ce 01       	movw	r24, r28
   11984:	08 96       	adiw	r24, 0x08	; 8
   11986:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   1198a:	ae 01       	movw	r20, r28
   1198c:	46 5f       	subi	r20, 0xF6	; 246
   1198e:	5f 4f       	sbci	r21, 0xFF	; 255
   11990:	62 e0       	ldi	r22, 0x02	; 2
   11992:	70 e0       	ldi	r23, 0x00	; 0
   11994:	ce 01       	movw	r24, r28
   11996:	08 96       	adiw	r24, 0x08	; 8
   11998:	d4 dc       	rcall	.-1624   	; 0x11342 <gpib_write_str>
   1199a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1199e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119a2:	02 97       	sbiw	r24, 0x02	; 2
   119a4:	79 f0       	breq	.+30     	; 0x119c4 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119a6:	25 72       	andi	r18, 0x25	; 37
   119a8:	33 27       	eor	r19, r19
   119aa:	23 2b       	or	r18, r19
   119ac:	f9 f0       	breq	.+62     	; 0x119ec <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   119ae:	ed b7       	in	r30, 0x3d	; 61
   119b0:	fe b7       	in	r31, 0x3e	; 62
   119b2:	d7 82       	std	Z+7, r13	; 0x07
   119b4:	c6 82       	std	Z+6, r12	; 0x06
   119b6:	8f 2d       	mov	r24, r15
   119b8:	90 e0       	ldi	r25, 0x00	; 0
   119ba:	95 83       	std	Z+5, r25	; 0x05
   119bc:	84 83       	std	Z+4, r24	; 0x04
   119be:	89 ec       	ldi	r24, 0xC9	; 201
   119c0:	93 e1       	ldi	r25, 0x13	; 19
   119c2:	0e c0       	rjmp	.+28     	; 0x119e0 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119c4:	24 72       	andi	r18, 0x24	; 36
   119c6:	33 27       	eor	r19, r19
   119c8:	23 2b       	or	r18, r19
   119ca:	81 f0       	breq	.+32     	; 0x119ec <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   119cc:	ed b7       	in	r30, 0x3d	; 61
   119ce:	fe b7       	in	r31, 0x3e	; 62
   119d0:	d7 82       	std	Z+7, r13	; 0x07
   119d2:	c6 82       	std	Z+6, r12	; 0x06
   119d4:	8f 2d       	mov	r24, r15
   119d6:	90 e0       	ldi	r25, 0x00	; 0
   119d8:	95 83       	std	Z+5, r25	; 0x05
   119da:	84 83       	std	Z+4, r24	; 0x04
   119dc:	8f ea       	ldi	r24, 0xAF	; 175
   119de:	93 e1       	ldi	r25, 0x13	; 19
   119e0:	a0 e0       	ldi	r26, 0x00	; 0
   119e2:	81 83       	std	Z+1, r24	; 0x01
   119e4:	92 83       	std	Z+2, r25	; 0x02
   119e6:	a3 83       	std	Z+3, r26	; 0x03
   119e8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
    return (status & ERROR_MASK);
   119ec:	8a 85       	ldd	r24, Y+10	; 0x0a
   119ee:	9b 85       	ldd	r25, Y+11	; 0x0b
   119f0:	88 27       	eor	r24, r24
   119f2:	90 7d       	andi	r25, 0xD0	; 208
}
   119f4:	2b 96       	adiw	r28, 0x0b	; 11
   119f6:	0f b6       	in	r0, 0x3f	; 63
   119f8:	f8 94       	cli
   119fa:	de bf       	out	0x3e, r29	; 62
   119fc:	0f be       	out	0x3f, r0	; 63
   119fe:	cd bf       	out	0x3d, r28	; 61
   11a00:	df 91       	pop	r29
   11a02:	cf 91       	pop	r28
   11a04:	1f 91       	pop	r17
   11a06:	0f 91       	pop	r16
   11a08:	ff 90       	pop	r15
   11a0a:	df 90       	pop	r13
   11a0c:	cf 90       	pop	r12
   11a0e:	08 95       	ret

00011a10 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11a10:	00 d0       	rcall	.+0      	; 0x11a12 <GPIB+0x2>
   11a12:	00 d0       	rcall	.+0      	; 0x11a14 <GPIB+0x4>
   11a14:	1f 92       	push	r1
   11a16:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11a1a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11a1e:	85 30       	cpi	r24, 0x05	; 5
   11a20:	89 f4       	brne	.+34     	; 0x11a44 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a22:	27 71       	andi	r18, 0x17	; 23
   11a24:	33 27       	eor	r19, r19
   11a26:	23 2b       	or	r18, r19
   11a28:	51 f0       	breq	.+20     	; 0x11a3e <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11a2a:	87 e9       	ldi	r24, 0x97	; 151
   11a2c:	93 e1       	ldi	r25, 0x13	; 19
   11a2e:	a0 e0       	ldi	r26, 0x00	; 0
   11a30:	ed b7       	in	r30, 0x3d	; 61
   11a32:	fe b7       	in	r31, 0x3e	; 62
   11a34:	81 83       	std	Z+1, r24	; 0x01
   11a36:	92 83       	std	Z+2, r25	; 0x02
   11a38:	a3 83       	std	Z+3, r26	; 0x03
   11a3a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        spoll = 0;
   11a3e:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <spoll>
   11a42:	a0 c0       	rjmp	.+320    	; 0x11b84 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11a44:	85 31       	cpi	r24, 0x15	; 21
   11a46:	39 f4       	brne	.+14     	; 0x11a56 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a48:	27 71       	andi	r18, 0x17	; 23
   11a4a:	33 27       	eor	r19, r19
   11a4c:	23 2b       	or	r18, r19
   11a4e:	b9 f3       	breq	.-18     	; 0x11a3e <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11a50:	8f e7       	ldi	r24, 0x7F	; 127
   11a52:	93 e1       	ldi	r25, 0x13	; 19
   11a54:	ec cf       	rjmp	.-40     	; 0x11a2e <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11a56:	88 31       	cpi	r24, 0x18	; 24
   11a58:	d9 f4       	brne	.+54     	; 0x11a90 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11a5a:	26 70       	andi	r18, 0x06	; 6
   11a5c:	33 27       	eor	r19, r19
   11a5e:	23 2b       	or	r18, r19
   11a60:	51 f0       	breq	.+20     	; 0x11a76 <GPIB+0x66>
            printf("[SPE]\n");
   11a62:	88 e7       	ldi	r24, 0x78	; 120
   11a64:	93 e1       	ldi	r25, 0x13	; 19
   11a66:	a0 e0       	ldi	r26, 0x00	; 0
   11a68:	ed b7       	in	r30, 0x3d	; 61
   11a6a:	fe b7       	in	r31, 0x3e	; 62
   11a6c:	81 83       	std	Z+1, r24	; 0x01
   11a6e:	92 83       	std	Z+2, r25	; 0x02
   11a70:	a3 83       	std	Z+3, r26	; 0x03
   11a72:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
        spoll = 1;
   11a76:	81 e0       	ldi	r24, 0x01	; 1
   11a78:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <spoll>
        if(SS80_is_MTA(talking))
   11a7c:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11a80:	90 e0       	ldi	r25, 0x00	; 0
   11a82:	70 dd       	rcall	.-1312   	; 0x11564 <SS80_is_MTA>
   11a84:	89 2b       	or	r24, r25
   11a86:	09 f4       	brne	.+2      	; 0x11a8a <GPIB+0x7a>
   11a88:	7d c0       	rjmp	.+250    	; 0x11b84 <GPIB+0x174>
        {
            return( SS80_Report() );
   11a8a:	0e 94 ca a9 	call	0x15394	; 0x15394 <SS80_Report>
   11a8e:	7c c0       	rjmp	.+248    	; 0x11b88 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11a90:	89 31       	cpi	r24, 0x19	; 25
   11a92:	39 f4       	brne	.+14     	; 0x11aa2 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11a94:	26 70       	andi	r18, 0x06	; 6
   11a96:	33 27       	eor	r19, r19
   11a98:	23 2b       	or	r18, r19
   11a9a:	89 f2       	breq	.-94     	; 0x11a3e <GPIB+0x2e>
            printf("[SPD]\n");
   11a9c:	81 e7       	ldi	r24, 0x71	; 113
   11a9e:	93 e1       	ldi	r25, 0x13	; 19
   11aa0:	c6 cf       	rjmp	.-116    	; 0x11a2e <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11aa2:	84 30       	cpi	r24, 0x04	; 4
   11aa4:	09 f0       	breq	.+2      	; 0x11aa8 <GPIB+0x98>
   11aa6:	48 c0       	rjmp	.+144    	; 0x11b38 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11aa8:	22 ff       	sbrs	r18, 2
   11aaa:	0a c0       	rjmp	.+20     	; 0x11ac0 <GPIB+0xb0>
            printf("[SDC]\n");
   11aac:	8a e6       	ldi	r24, 0x6A	; 106
   11aae:	93 e1       	ldi	r25, 0x13	; 19
   11ab0:	a0 e0       	ldi	r26, 0x00	; 0
   11ab2:	ed b7       	in	r30, 0x3d	; 61
   11ab4:	fe b7       	in	r31, 0x3e	; 62
   11ab6:	81 83       	std	Z+1, r24	; 0x01
   11ab8:	92 83       	std	Z+2, r25	; 0x02
   11aba:	a3 83       	std	Z+3, r26	; 0x03
   11abc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11ac0:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11ac4:	90 e0       	ldi	r25, 0x00	; 0
   11ac6:	3d dd       	rcall	.-1414   	; 0x11542 <SS80_is_MLA>
   11ac8:	89 2b       	or	r24, r25
   11aca:	d9 f0       	breq	.+54     	; 0x11b02 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11acc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ad0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ad4:	84 72       	andi	r24, 0x24	; 36
   11ad6:	99 27       	eor	r25, r25
   11ad8:	89 2b       	or	r24, r25
   11ada:	51 f0       	breq	.+20     	; 0x11af0 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11adc:	8e e5       	ldi	r24, 0x5E	; 94
   11ade:	93 e1       	ldi	r25, 0x13	; 19
   11ae0:	a0 e0       	ldi	r26, 0x00	; 0
   11ae2:	ed b7       	in	r30, 0x3d	; 61
   11ae4:	fe b7       	in	r31, 0x3e	; 62
   11ae6:	81 83       	std	Z+1, r24	; 0x01
   11ae8:	92 83       	std	Z+2, r25	; 0x02
   11aea:	a3 83       	std	Z+3, r26	; 0x03
   11aec:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11af0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   11af4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   11af8:	85 81       	ldd	r24, Z+5	; 0x05
   11afa:	90 e0       	ldi	r25, 0x00	; 0
   11afc:	0e 94 96 aa 	call	0x1552c	; 0x1552c <SS80_Selected_Device_Clear>
   11b00:	43 c0       	rjmp	.+134    	; 0x11b88 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11b02:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11b06:	90 e0       	ldi	r25, 0x00	; 0
   11b08:	4f dd       	rcall	.-1378   	; 0x115a8 <AMIGO_is_MLA>
   11b0a:	89 2b       	or	r24, r25
   11b0c:	d9 f1       	breq	.+118    	; 0x11b84 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b12:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b16:	84 72       	andi	r24, 0x24	; 36
   11b18:	99 27       	eor	r25, r25
   11b1a:	89 2b       	or	r24, r25
   11b1c:	51 f0       	breq	.+20     	; 0x11b32 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11b1e:	81 e5       	ldi	r24, 0x51	; 81
   11b20:	93 e1       	ldi	r25, 0x13	; 19
   11b22:	a0 e0       	ldi	r26, 0x00	; 0
   11b24:	ed b7       	in	r30, 0x3d	; 61
   11b26:	fe b7       	in	r31, 0x3e	; 62
   11b28:	81 83       	std	Z+1, r24	; 0x01
   11b2a:	92 83       	std	Z+2, r25	; 0x02
   11b2c:	a3 83       	std	Z+3, r26	; 0x03
   11b2e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11b32:	0e 94 d7 b4 	call	0x169ae	; 0x169ae <amigo_cmd_clear>
   11b36:	28 c0       	rjmp	.+80     	; 0x11b88 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11b38:	84 31       	cpi	r24, 0x14	; 20
   11b3a:	99 f4       	brne	.+38     	; 0x11b62 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11b3c:	22 ff       	sbrs	r18, 2
   11b3e:	0a c0       	rjmp	.+20     	; 0x11b54 <GPIB+0x144>
            printf("[DCL]\n");
   11b40:	8a e4       	ldi	r24, 0x4A	; 74
   11b42:	93 e1       	ldi	r25, 0x13	; 19
   11b44:	a0 e0       	ldi	r26, 0x00	; 0
   11b46:	ed b7       	in	r30, 0x3d	; 61
   11b48:	fe b7       	in	r31, 0x3e	; 62
   11b4a:	81 83       	std	Z+1, r24	; 0x01
   11b4c:	92 83       	std	Z+2, r25	; 0x02
   11b4e:	a3 83       	std	Z+3, r26	; 0x03
   11b50:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11b54:	0e 94 88 aa 	call	0x15510	; 0x15510 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11b58:	0e 94 d7 b4 	call	0x169ae	; 0x169ae <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11b5c:	0e 94 f6 ba 	call	0x175ec	; 0x175ec <printer_close>
   11b60:	11 c0       	rjmp	.+34     	; 0x11b84 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b62:	25 71       	andi	r18, 0x15	; 21
   11b64:	33 27       	eor	r19, r19
   11b66:	23 2b       	or	r18, r19
   11b68:	69 f0       	breq	.+26     	; 0x11b84 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11b6a:	90 e0       	ldi	r25, 0x00	; 0
   11b6c:	ed b7       	in	r30, 0x3d	; 61
   11b6e:	fe b7       	in	r31, 0x3e	; 62
   11b70:	95 83       	std	Z+5, r25	; 0x05
   11b72:	84 83       	std	Z+4, r24	; 0x04
   11b74:	89 e2       	ldi	r24, 0x29	; 41
   11b76:	93 e1       	ldi	r25, 0x13	; 19
   11b78:	a0 e0       	ldi	r26, 0x00	; 0
   11b7a:	81 83       	std	Z+1, r24	; 0x01
   11b7c:	92 83       	std	Z+2, r25	; 0x02
   11b7e:	a3 83       	std	Z+3, r26	; 0x03
   11b80:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(0);
   11b84:	80 e0       	ldi	r24, 0x00	; 0
   11b86:	90 e0       	ldi	r25, 0x00	; 0
}
   11b88:	0f 90       	pop	r0
   11b8a:	0f 90       	pop	r0
   11b8c:	0f 90       	pop	r0
   11b8e:	0f 90       	pop	r0
   11b90:	0f 90       	pop	r0
   11b92:	08 95       	ret

00011b94 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11b94:	cf 93       	push	r28
   11b96:	df 93       	push	r29
   11b98:	00 d0       	rcall	.+0      	; 0x11b9a <GPIB_TALK+0x6>
   11b9a:	00 d0       	rcall	.+0      	; 0x11b9c <GPIB_TALK+0x8>
   11b9c:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11b9e:	90 91 ee 1e 	lds	r25, 0x1EEE	; 0x801eee <talking>
   11ba2:	90 93 f1 1e 	sts	0x1EF1, r25	; 0x801ef1 <talking_last>
    talking = ch;
   11ba6:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11baa:	8f 35       	cpi	r24, 0x5F	; 95
   11bac:	79 f4       	brne	.+30     	; 0x11bcc <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11bae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bb2:	82 ff       	sbrs	r24, 2
   11bb4:	7f c0       	rjmp	.+254    	; 0x11cb4 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11bb6:	86 ed       	ldi	r24, 0xD6	; 214
   11bb8:	92 e1       	ldi	r25, 0x12	; 18
   11bba:	a0 e0       	ldi	r26, 0x00	; 0
   11bbc:	ed b7       	in	r30, 0x3d	; 61
   11bbe:	fe b7       	in	r31, 0x3e	; 62
   11bc0:	81 83       	std	Z+1, r24	; 0x01
   11bc2:	92 83       	std	Z+2, r25	; 0x02
   11bc4:	a3 83       	std	Z+3, r26	; 0x03
   11bc6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   11bca:	74 c0       	rjmp	.+232    	; 0x11cb4 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11bcc:	c8 2f       	mov	r28, r24
   11bce:	d0 e0       	ldi	r29, 0x00	; 0
   11bd0:	ce 01       	movw	r24, r28
   11bd2:	c8 dc       	rcall	.-1648   	; 0x11564 <SS80_is_MTA>
   11bd4:	89 2b       	or	r24, r25
   11bd6:	e1 f0       	breq	.+56     	; 0x11c10 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11bd8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bdc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11be0:	84 72       	andi	r24, 0x24	; 36
   11be2:	99 27       	eor	r25, r25
   11be4:	89 2b       	or	r24, r25
   11be6:	61 f0       	breq	.+24     	; 0x11c00 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11be8:	ed b7       	in	r30, 0x3d	; 61
   11bea:	fe b7       	in	r31, 0x3e	; 62
   11bec:	d5 83       	std	Z+5, r29	; 0x05
   11bee:	c4 83       	std	Z+4, r28	; 0x04
   11bf0:	85 ec       	ldi	r24, 0xC5	; 197
   11bf2:	92 e1       	ldi	r25, 0x12	; 18
   11bf4:	a0 e0       	ldi	r26, 0x00	; 0
   11bf6:	81 83       	std	Z+1, r24	; 0x01
   11bf8:	92 83       	std	Z+2, r25	; 0x02
   11bfa:	a3 83       	std	Z+3, r26	; 0x03
   11bfc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif

        if (spoll)
   11c00:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <spoll>
   11c04:	88 23       	and	r24, r24
   11c06:	09 f4       	brne	.+2      	; 0x11c0a <GPIB_TALK+0x76>
   11c08:	55 c0       	rjmp	.+170    	; 0x11cb4 <GPIB_TALK+0x120>
        {
            SS80_Report();
   11c0a:	0e 94 ca a9 	call	0x15394	; 0x15394 <SS80_Report>
   11c0e:	52 c0       	rjmp	.+164    	; 0x11cb4 <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11c10:	ce 01       	movw	r24, r28
   11c12:	db dc       	rcall	.-1610   	; 0x115ca <AMIGO_is_MTA>
   11c14:	89 2b       	or	r24, r25
   11c16:	81 f0       	breq	.+32     	; 0x11c38 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c1c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c20:	84 72       	andi	r24, 0x24	; 36
   11c22:	99 27       	eor	r25, r25
   11c24:	89 2b       	or	r24, r25
   11c26:	09 f4       	brne	.+2      	; 0x11c2a <GPIB_TALK+0x96>
   11c28:	45 c0       	rjmp	.+138    	; 0x11cb4 <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11c2a:	ed b7       	in	r30, 0x3d	; 61
   11c2c:	fe b7       	in	r31, 0x3e	; 62
   11c2e:	d5 83       	std	Z+5, r29	; 0x05
   11c30:	c4 83       	std	Z+4, r28	; 0x04
   11c32:	83 eb       	ldi	r24, 0xB3	; 179
   11c34:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11c36:	38 c0       	rjmp	.+112    	; 0x11ca8 <GPIB_TALK+0x114>
   11c38:	ce 01       	movw	r24, r28
   11c3a:	fa dc       	rcall	.-1548   	; 0x11630 <PRINTER_is_MTA>
   11c3c:	89 2b       	or	r24, r25
   11c3e:	79 f0       	breq	.+30     	; 0x11c5e <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c44:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c48:	84 72       	andi	r24, 0x24	; 36
   11c4a:	99 27       	eor	r25, r25
   11c4c:	89 2b       	or	r24, r25
   11c4e:	91 f1       	breq	.+100    	; 0x11cb4 <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11c50:	ed b7       	in	r30, 0x3d	; 61
   11c52:	fe b7       	in	r31, 0x3e	; 62
   11c54:	d5 83       	std	Z+5, r29	; 0x05
   11c56:	c4 83       	std	Z+4, r28	; 0x04
   11c58:	8f e9       	ldi	r24, 0x9F	; 159
   11c5a:	92 e1       	ldi	r25, 0x12	; 18
   11c5c:	25 c0       	rjmp	.+74     	; 0x11ca8 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11c5e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11c62:	90 e0       	ldi	r25, 0x00	; 0
   11c64:	d4 dc       	rcall	.-1624   	; 0x1160e <PRINTER_is_MLA>
   11c66:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11c6a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c6e:	89 2b       	or	r24, r25
   11c70:	99 f0       	breq	.+38     	; 0x11c98 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c72:	24 72       	andi	r18, 0x24	; 36
   11c74:	33 27       	eor	r19, r19
   11c76:	23 2b       	or	r18, r19
   11c78:	51 f0       	breq	.+20     	; 0x11c8e <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11c7a:	8f e8       	ldi	r24, 0x8F	; 143
   11c7c:	92 e1       	ldi	r25, 0x12	; 18
   11c7e:	a0 e0       	ldi	r26, 0x00	; 0
   11c80:	ed b7       	in	r30, 0x3d	; 61
   11c82:	fe b7       	in	r31, 0x3e	; 62
   11c84:	81 83       	std	Z+1, r24	; 0x01
   11c86:	92 83       	std	Z+2, r25	; 0x02
   11c88:	a3 83       	std	Z+3, r26	; 0x03
   11c8a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printer_open(NULL);
   11c8e:	80 e0       	ldi	r24, 0x00	; 0
   11c90:	90 e0       	ldi	r25, 0x00	; 0
   11c92:	0e 94 4e bb 	call	0x1769c	; 0x1769c <printer_open>
   11c96:	0e c0       	rjmp	.+28     	; 0x11cb4 <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c98:	22 ff       	sbrs	r18, 2
   11c9a:	0c c0       	rjmp	.+24     	; 0x11cb4 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11c9c:	ed b7       	in	r30, 0x3d	; 61
   11c9e:	fe b7       	in	r31, 0x3e	; 62
   11ca0:	d5 83       	std	Z+5, r29	; 0x05
   11ca2:	c4 83       	std	Z+4, r28	; 0x04
   11ca4:	83 e8       	ldi	r24, 0x83	; 131
   11ca6:	92 e1       	ldi	r25, 0x12	; 18
   11ca8:	a0 e0       	ldi	r26, 0x00	; 0
   11caa:	81 83       	std	Z+1, r24	; 0x01
   11cac:	92 83       	std	Z+2, r25	; 0x02
   11cae:	a3 83       	std	Z+3, r26	; 0x03
   11cb0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11cb4:	80 e0       	ldi	r24, 0x00	; 0
   11cb6:	90 e0       	ldi	r25, 0x00	; 0
   11cb8:	cd b7       	in	r28, 0x3d	; 61
   11cba:	de b7       	in	r29, 0x3e	; 62
   11cbc:	25 96       	adiw	r28, 0x05	; 5
   11cbe:	e2 e0       	ldi	r30, 0x02	; 2
   11cc0:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00011cc4 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11cc4:	a9 e0       	ldi	r26, 0x09	; 9
   11cc6:	b0 e0       	ldi	r27, 0x00	; 0
   11cc8:	e8 e6       	ldi	r30, 0x68	; 104
   11cca:	fe e8       	ldi	r31, 0x8E	; 142
   11ccc:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x1e>
   11cd0:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11cd2:	c8 2f       	mov	r28, r24
   11cd4:	d0 e0       	ldi	r29, 0x00	; 0
   11cd6:	ce 01       	movw	r24, r28
   11cd8:	56 dc       	rcall	.-1876   	; 0x11586 <SS80_is_MSA>
   11cda:	89 2b       	or	r24, r25
   11cdc:	09 f1       	breq	.+66     	; 0x11d20 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ce2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ce6:	84 72       	andi	r24, 0x24	; 36
   11ce8:	99 27       	eor	r25, r25
   11cea:	89 2b       	or	r24, r25
   11cec:	61 f0       	breq	.+24     	; 0x11d06 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11cee:	ed b7       	in	r30, 0x3d	; 61
   11cf0:	fe b7       	in	r31, 0x3e	; 62
   11cf2:	d5 83       	std	Z+5, r29	; 0x05
   11cf4:	c4 83       	std	Z+4, r28	; 0x04
   11cf6:	82 e7       	ldi	r24, 0x72	; 114
   11cf8:	92 e1       	ldi	r25, 0x12	; 18
   11cfa:	a0 e0       	ldi	r26, 0x00	; 0
   11cfc:	81 83       	std	Z+1, r24	; 0x01
   11cfe:	92 83       	std	Z+2, r25	; 0x02
   11d00:	a3 83       	std	Z+3, r26	; 0x03
   11d02:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11d06:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   11d0a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   11d0e:	81 81       	ldd	r24, Z+1	; 0x01
   11d10:	90 e0       	ldi	r25, 0x00	; 0
   11d12:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11d16:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   11d1a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   11d1e:	25 c0       	rjmp	.+74     	; 0x11d6a <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11d20:	ce 01       	movw	r24, r28
   11d22:	64 dc       	rcall	.-1848   	; 0x115ec <AMIGO_is_MSA>
   11d24:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d28:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d2c:	89 2b       	or	r24, r25
   11d2e:	11 f1       	breq	.+68     	; 0x11d74 <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d30:	c9 01       	movw	r24, r18
   11d32:	84 72       	andi	r24, 0x24	; 36
   11d34:	99 27       	eor	r25, r25
   11d36:	89 2b       	or	r24, r25
   11d38:	61 f0       	breq	.+24     	; 0x11d52 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11d3a:	ed b7       	in	r30, 0x3d	; 61
   11d3c:	fe b7       	in	r31, 0x3e	; 62
   11d3e:	d5 83       	std	Z+5, r29	; 0x05
   11d40:	c4 83       	std	Z+4, r28	; 0x04
   11d42:	80 e6       	ldi	r24, 0x60	; 96
   11d44:	92 e1       	ldi	r25, 0x12	; 18
   11d46:	a0 e0       	ldi	r26, 0x00	; 0
   11d48:	81 83       	std	Z+1, r24	; 0x01
   11d4a:	92 83       	std	Z+2, r25	; 0x02
   11d4c:	a3 83       	std	Z+3, r26	; 0x03
   11d4e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11d52:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   11d56:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   11d5a:	81 81       	ldd	r24, Z+1	; 0x01
   11d5c:	90 e0       	ldi	r25, 0x00	; 0
   11d5e:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11d62:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   11d66:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   11d6a:	64 81       	ldd	r22, Z+4	; 0x04
   11d6c:	75 81       	ldd	r23, Z+5	; 0x05
   11d6e:	81 2f       	mov	r24, r17
   11d70:	ec dd       	rcall	.-1064   	; 0x1194a <Send_Identify>
   11d72:	1d c0       	rjmp	.+58     	; 0x11dae <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d74:	c9 01       	movw	r24, r18
   11d76:	84 72       	andi	r24, 0x24	; 36
   11d78:	99 27       	eor	r25, r25
   11d7a:	00 97       	sbiw	r24, 0x00	; 0
   11d7c:	c1 f0       	breq	.+48     	; 0x11dae <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11d7e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11d82:	90 e0       	ldi	r25, 0x00	; 0
   11d84:	ed b7       	in	r30, 0x3d	; 61
   11d86:	fe b7       	in	r31, 0x3e	; 62
   11d88:	91 87       	std	Z+9, r25	; 0x09
   11d8a:	80 87       	std	Z+8, r24	; 0x08
   11d8c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11d90:	90 e0       	ldi	r25, 0x00	; 0
   11d92:	97 83       	std	Z+7, r25	; 0x07
   11d94:	86 83       	std	Z+6, r24	; 0x06
   11d96:	d5 83       	std	Z+5, r29	; 0x05
   11d98:	c4 83       	std	Z+4, r28	; 0x04
   11d9a:	8a e3       	ldi	r24, 0x3A	; 58
   11d9c:	92 e1       	ldi	r25, 0x12	; 18
   11d9e:	a0 e0       	ldi	r26, 0x00	; 0
   11da0:	81 83       	std	Z+1, r24	; 0x01
   11da2:	92 83       	std	Z+2, r25	; 0x02
   11da4:	a3 83       	std	Z+3, r26	; 0x03
   11da6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11daa:	80 e0       	ldi	r24, 0x00	; 0
   11dac:	90 e0       	ldi	r25, 0x00	; 0
}
   11dae:	cd b7       	in	r28, 0x3d	; 61
   11db0:	de b7       	in	r29, 0x3e	; 62
   11db2:	29 96       	adiw	r28, 0x09	; 9
   11db4:	e3 e0       	ldi	r30, 0x03	; 3
   11db6:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x1e>

00011dba <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11dba:	00 d0       	rcall	.+0      	; 0x11dbc <listen_cleanup+0x2>
   11dbc:	1f 92       	push	r1
    if(listening_last)
   11dbe:	60 91 ea 1e 	lds	r22, 0x1EEA	; 0x801eea <listening_last>
   11dc2:	66 23       	and	r22, r22
   11dc4:	e1 f0       	breq	.+56     	; 0x11dfe <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11dc6:	70 e0       	ldi	r23, 0x00	; 0
   11dc8:	40 e2       	ldi	r20, 0x20	; 32
   11dca:	50 e0       	ldi	r21, 0x00	; 0
   11dcc:	84 e0       	ldi	r24, 0x04	; 4
   11dce:	90 e0       	ldi	r25, 0x00	; 0
   11dd0:	9c d6       	rcall	.+3384   	; 0x12b0a <find_device>
        if(index == -1)
   11dd2:	01 96       	adiw	r24, 0x01	; 1
   11dd4:	a1 f0       	breq	.+40     	; 0x11dfe <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11dda:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dde:	84 72       	andi	r24, 0x24	; 36
   11de0:	99 27       	eor	r25, r25
   11de2:	89 2b       	or	r24, r25
   11de4:	51 f0       	breq	.+20     	; 0x11dfa <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11de6:	89 e2       	ldi	r24, 0x29	; 41
   11de8:	92 e1       	ldi	r25, 0x12	; 18
   11dea:	a0 e0       	ldi	r26, 0x00	; 0
   11dec:	ed b7       	in	r30, 0x3d	; 61
   11dee:	fe b7       	in	r31, 0x3e	; 62
   11df0:	81 83       	std	Z+1, r24	; 0x01
   11df2:	92 83       	std	Z+2, r25	; 0x02
   11df4:	a3 83       	std	Z+3, r26	; 0x03
   11df6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printer_close();
   11dfa:	0e 94 f6 ba 	call	0x175ec	; 0x175ec <printer_close>
    }
}
   11dfe:	0f 90       	pop	r0
   11e00:	0f 90       	pop	r0
   11e02:	0f 90       	pop	r0
   11e04:	08 95       	ret

00011e06 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11e06:	cf 93       	push	r28
   11e08:	df 93       	push	r29
   11e0a:	00 d0       	rcall	.+0      	; 0x11e0c <GPIB_LISTEN+0x6>
   11e0c:	00 d0       	rcall	.+0      	; 0x11e0e <GPIB_LISTEN+0x8>
   11e0e:	1f 92       	push	r1
   11e10:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11e12:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11e16:	80 93 ea 1e 	sts	0x1EEA, r24	; 0x801eea <listening_last>
    listening = ch;
   11e1a:	c0 93 f0 1e 	sts	0x1EF0, r28	; 0x801ef0 <listening>

    listen_cleanup();
   11e1e:	cd df       	rcall	.-102    	; 0x11dba <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11e20:	cf 33       	cpi	r28, 0x3F	; 63
   11e22:	19 f5       	brne	.+70     	; 0x11e6a <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11e24:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e2c:	82 ff       	sbrs	r24, 2
   11e2e:	74 c0       	rjmp	.+232    	; 0x11f18 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11e30:	82 e2       	ldi	r24, 0x22	; 34
   11e32:	93 e1       	ldi	r25, 0x13	; 19
   11e34:	a0 e0       	ldi	r26, 0x00	; 0
   11e36:	ed b7       	in	r30, 0x3d	; 61
   11e38:	fe b7       	in	r31, 0x3e	; 62
   11e3a:	81 83       	std	Z+1, r24	; 0x01
   11e3c:	92 83       	std	Z+2, r25	; 0x02
   11e3e:	a3 83       	std	Z+3, r26	; 0x03
   11e40:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11e44:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <lastcmd>
   11e48:	90 91 e9 1c 	lds	r25, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   11e4c:	8f 35       	cpi	r24, 0x5F	; 95
   11e4e:	91 05       	cpc	r25, r1
   11e50:	09 f0       	breq	.+2      	; 0x11e54 <GPIB_LISTEN+0x4e>
   11e52:	62 c0       	rjmp	.+196    	; 0x11f18 <GPIB_LISTEN+0x112>
                printf("\n");
   11e54:	80 e2       	ldi	r24, 0x20	; 32
   11e56:	93 e1       	ldi	r25, 0x13	; 19
   11e58:	a0 e0       	ldi	r26, 0x00	; 0
   11e5a:	ed b7       	in	r30, 0x3d	; 61
   11e5c:	fe b7       	in	r31, 0x3e	; 62
   11e5e:	81 83       	std	Z+1, r24	; 0x01
   11e60:	92 83       	std	Z+2, r25	; 0x02
   11e62:	a3 83       	std	Z+3, r26	; 0x03
   11e64:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   11e68:	57 c0       	rjmp	.+174    	; 0x11f18 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11e6a:	d0 e0       	ldi	r29, 0x00	; 0
   11e6c:	ce 01       	movw	r24, r28
   11e6e:	9c db       	rcall	.-2248   	; 0x115a8 <AMIGO_is_MLA>
   11e70:	89 2b       	or	r24, r25
   11e72:	81 f0       	breq	.+32     	; 0x11e94 <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e78:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e7c:	84 72       	andi	r24, 0x24	; 36
   11e7e:	99 27       	eor	r25, r25
   11e80:	89 2b       	or	r24, r25
   11e82:	09 f4       	brne	.+2      	; 0x11e86 <GPIB_LISTEN+0x80>
   11e84:	49 c0       	rjmp	.+146    	; 0x11f18 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11e86:	ed b7       	in	r30, 0x3d	; 61
   11e88:	fe b7       	in	r31, 0x3e	; 62
   11e8a:	d5 83       	std	Z+5, r29	; 0x05
   11e8c:	c4 83       	std	Z+4, r28	; 0x04
   11e8e:	8e e0       	ldi	r24, 0x0E	; 14
   11e90:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11e92:	3c c0       	rjmp	.+120    	; 0x11f0c <GPIB_LISTEN+0x106>
   11e94:	ce 01       	movw	r24, r28
   11e96:	55 db       	rcall	.-2390   	; 0x11542 <SS80_is_MLA>
   11e98:	89 2b       	or	r24, r25
   11e9a:	79 f0       	breq	.+30     	; 0x11eba <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ea0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ea4:	84 72       	andi	r24, 0x24	; 36
   11ea6:	99 27       	eor	r25, r25
   11ea8:	89 2b       	or	r24, r25
   11eaa:	b1 f1       	breq	.+108    	; 0x11f18 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11eac:	ed b7       	in	r30, 0x3d	; 61
   11eae:	fe b7       	in	r31, 0x3e	; 62
   11eb0:	d5 83       	std	Z+5, r29	; 0x05
   11eb2:	c4 83       	std	Z+4, r28	; 0x04
   11eb4:	8d ef       	ldi	r24, 0xFD	; 253
   11eb6:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11eb8:	29 c0       	rjmp	.+82     	; 0x11f0c <GPIB_LISTEN+0x106>
   11eba:	ce 01       	movw	r24, r28
   11ebc:	a8 db       	rcall	.-2224   	; 0x1160e <PRINTER_is_MLA>
   11ebe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ec2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ec6:	89 2b       	or	r24, r25
   11ec8:	c9 f0       	breq	.+50     	; 0x11efc <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11eca:	24 72       	andi	r18, 0x24	; 36
   11ecc:	33 27       	eor	r19, r19
   11ece:	23 2b       	or	r18, r19
   11ed0:	61 f0       	breq	.+24     	; 0x11eea <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11ed2:	ed b7       	in	r30, 0x3d	; 61
   11ed4:	fe b7       	in	r31, 0x3e	; 62
   11ed6:	d5 83       	std	Z+5, r29	; 0x05
   11ed8:	c4 83       	std	Z+4, r28	; 0x04
   11eda:	89 ee       	ldi	r24, 0xE9	; 233
   11edc:	92 e1       	ldi	r25, 0x12	; 18
   11ede:	a0 e0       	ldi	r26, 0x00	; 0
   11ee0:	81 83       	std	Z+1, r24	; 0x01
   11ee2:	92 83       	std	Z+2, r25	; 0x02
   11ee4:	a3 83       	std	Z+3, r26	; 0x03
   11ee6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
        if(talking != UNT)
   11eea:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   11eee:	8f 35       	cpi	r24, 0x5F	; 95
   11ef0:	99 f0       	breq	.+38     	; 0x11f18 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   11ef2:	80 e0       	ldi	r24, 0x00	; 0
   11ef4:	90 e0       	ldi	r25, 0x00	; 0
   11ef6:	0e 94 4e bb 	call	0x1769c	; 0x1769c <printer_open>
   11efa:	0e c0       	rjmp	.+28     	; 0x11f18 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11efc:	22 ff       	sbrs	r18, 2
   11efe:	0c c0       	rjmp	.+24     	; 0x11f18 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   11f00:	ed b7       	in	r30, 0x3d	; 61
   11f02:	fe b7       	in	r31, 0x3e	; 62
   11f04:	d5 83       	std	Z+5, r29	; 0x05
   11f06:	c4 83       	std	Z+4, r28	; 0x04
   11f08:	8d ed       	ldi	r24, 0xDD	; 221
   11f0a:	92 e1       	ldi	r25, 0x12	; 18
   11f0c:	a0 e0       	ldi	r26, 0x00	; 0
   11f0e:	81 83       	std	Z+1, r24	; 0x01
   11f10:	92 83       	std	Z+2, r25	; 0x02
   11f12:	a3 83       	std	Z+3, r26	; 0x03
   11f14:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   11f18:	80 e0       	ldi	r24, 0x00	; 0
   11f1a:	90 e0       	ldi	r25, 0x00	; 0
   11f1c:	cd b7       	in	r28, 0x3d	; 61
   11f1e:	de b7       	in	r29, 0x3e	; 62
   11f20:	25 96       	adiw	r28, 0x05	; 5
   11f22:	e2 e0       	ldi	r30, 0x02	; 2
   11f24:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00011f28 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   11f28:	cf 93       	push	r28
   11f2a:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   11f2c:	92 db       	rcall	.-2268   	; 0x11652 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   11f2e:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <gpib_log_fp+0x1>
   11f32:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   11f36:	80 e0       	ldi	r24, 0x00	; 0
   11f38:	90 e0       	ldi	r25, 0x00	; 0
   11f3a:	57 d8       	rcall	.-3922   	; 0x10fea <gpib_read_byte>
   11f3c:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   11f3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f42:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   11f44:	02 c0       	rjmp	.+4      	; 0x11f4a <gpib_task+0x22>
   11f46:	ce 01       	movw	r24, r28
   11f48:	56 d9       	rcall	.-3412   	; 0x111f6 <gpib_decode>
#endif
        status = gpib_error_test(val);
   11f4a:	ce 01       	movw	r24, r28
   11f4c:	1d dc       	rcall	.-1990   	; 0x11788 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   11f4e:	9c 01       	movw	r18, r24
   11f50:	23 70       	andi	r18, 0x03	; 3
   11f52:	33 27       	eor	r19, r19
   11f54:	23 2b       	or	r18, r19
   11f56:	09 f0       	breq	.+2      	; 0x11f5a <gpib_task+0x32>
   11f58:	43 c0       	rjmp	.+134    	; 0x11fe0 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   11f5a:	89 2b       	or	r24, r25
   11f5c:	61 f7       	brne	.-40     	; 0x11f36 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   11f5e:	d2 ff       	sbrs	r29, 2
   11f60:	26 c0       	rjmp	.+76     	; 0x11fae <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   11f62:	8c 2f       	mov	r24, r28
   11f64:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   11f66:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   11f68:	10 f4       	brcc	.+4      	; 0x11f6e <gpib_task+0x46>
   11f6a:	52 dd       	rcall	.-1372   	; 0x11a10 <GPIB>
                continue;
   11f6c:	e4 cf       	rjmp	.-56     	; 0x11f36 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   11f6e:	90 ee       	ldi	r25, 0xE0	; 224
   11f70:	98 0f       	add	r25, r24
   11f72:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   11f74:	10 f4       	brcc	.+4      	; 0x11f7a <gpib_task+0x52>
   11f76:	47 df       	rcall	.-370    	; 0x11e06 <GPIB_LISTEN>
                continue;
   11f78:	de cf       	rjmp	.-68     	; 0x11f36 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   11f7a:	90 ec       	ldi	r25, 0xC0	; 192
   11f7c:	98 0f       	add	r25, r24
   11f7e:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   11f80:	10 f4       	brcc	.+4      	; 0x11f86 <gpib_task+0x5e>
   11f82:	08 de       	rcall	.-1008   	; 0x11b94 <GPIB_TALK>
                continue;
   11f84:	d8 cf       	rjmp	.-80     	; 0x11f36 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   11f86:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <listening>
   11f8a:	99 23       	and	r25, r25
   11f8c:	59 f0       	breq	.+22     	; 0x11fa4 <gpib_task+0x7c>
   11f8e:	20 91 e8 1c 	lds	r18, 0x1CE8	; 0x801ce8 <lastcmd>
   11f92:	30 91 e9 1c 	lds	r19, 0x1CE9	; 0x801ce9 <lastcmd+0x1>
   11f96:	2f 35       	cpi	r18, 0x5F	; 95
   11f98:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   11f9a:	21 f4       	brne	.+8      	; 0x11fa4 <gpib_task+0x7c>
   11f9c:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   11fa0:	91 de       	rcall	.-734    	; 0x11cc4 <GPIB_SECONDARY_ADDRESS>
                continue;
   11fa2:	c9 cf       	rjmp	.-110    	; 0x11f36 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   11fa4:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   11fa8:	60 e0       	ldi	r22, 0x00	; 0
   11faa:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   11fac:	12 c0       	rjmp	.+36     	; 0x11fd2 <gpib_task+0xaa>
   11fae:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   11fb2:	90 e0       	ldi	r25, 0x00	; 0
   11fb4:	2c db       	rcall	.-2472   	; 0x1160e <PRINTER_is_MLA>
   11fb6:	89 2b       	or	r24, r25
   11fb8:	29 f0       	breq	.+10     	; 0x11fc4 <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   11fba:	ce 01       	movw	r24, r28
   11fbc:	99 27       	eor	r25, r25
   11fbe:	0e 94 f1 bb 	call	0x177e2	; 0x177e2 <printer_buffer>
                continue;
   11fc2:	b9 cf       	rjmp	.-142    	; 0x11f36 <gpib_task+0xe>
            }

            if(!secondary)
   11fc4:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <secondary>
   11fc8:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   11fca:	09 f4       	brne	.+2      	; 0x11fce <gpib_task+0xa6>
   11fcc:	b4 cf       	rjmp	.-152    	; 0x11f36 <gpib_task+0xe>
   11fce:	61 e0       	ldi	r22, 0x01	; 1
   11fd0:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   11fd2:	67 dc       	rcall	.-1842   	; 0x118a2 <GPIB_COMMANDS>
   11fd4:	d9 db       	rcall	.-2126   	; 0x11788 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   11fd6:	83 70       	andi	r24, 0x03	; 3
   11fd8:	99 27       	eor	r25, r25
   11fda:	89 2b       	or	r24, r25
   11fdc:	09 f4       	brne	.+2      	; 0x11fe0 <gpib_task+0xb8>
   11fde:	ab cf       	rjmp	.-170    	; 0x11f36 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   11fe0:	df 91       	pop	r29
   11fe2:	cf 91       	pop	r28
   11fe4:	08 95       	ret

00011fe6 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   11fe6:	08 95       	ret

00011fe8 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   11fe8:	cf 93       	push	r28
   11fea:	df 93       	push	r29
   11fec:	00 d0       	rcall	.+0      	; 0x11fee <gpib_help+0x6>
   11fee:	1f 92       	push	r1
   11ff0:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   11ff2:	83 eb       	ldi	r24, 0xB3	; 179
   11ff4:	96 e1       	ldi	r25, 0x16	; 22
   11ff6:	a0 e0       	ldi	r26, 0x00	; 0
   11ff8:	ed b7       	in	r30, 0x3d	; 61
   11ffa:	fe b7       	in	r31, 0x3e	; 62
   11ffc:	81 83       	std	Z+1, r24	; 0x01
   11ffe:	92 83       	std	Z+2, r25	; 0x02
   12000:	a3 83       	std	Z+3, r26	; 0x03
   12002:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    if(full)
   12006:	cd 2b       	or	r28, r29
   12008:	51 f0       	breq	.+20     	; 0x1201e <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   1200a:	8a ee       	ldi	r24, 0xEA	; 234
   1200c:	94 e1       	ldi	r25, 0x14	; 20
   1200e:	a0 e0       	ldi	r26, 0x00	; 0
   12010:	ed b7       	in	r30, 0x3d	; 61
   12012:	fe b7       	in	r31, 0x3e	; 62
   12014:	81 83       	std	Z+1, r24	; 0x01
   12016:	92 83       	std	Z+2, r25	; 0x02
   12018:	a3 83       	std	Z+3, r26	; 0x03
   1201a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   1201e:	cd b7       	in	r28, 0x3d	; 61
   12020:	de b7       	in	r29, 0x3e	; 62
   12022:	23 96       	adiw	r28, 0x03	; 3
   12024:	e2 e0       	ldi	r30, 0x02	; 2
   12026:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0001202a <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1202a:	a5 e0       	ldi	r26, 0x05	; 5
   1202c:	b0 e0       	ldi	r27, 0x00	; 0
   1202e:	eb e1       	ldi	r30, 0x1B	; 27
   12030:	f0 e9       	ldi	r31, 0x90	; 144
   12032:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12036:	fb 01       	movw	r30, r22
   12038:	e0 80       	ld	r14, Z
   1203a:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   1203c:	e1 14       	cp	r14, r1
   1203e:	f1 04       	cpc	r15, r1
   12040:	19 f4       	brne	.+6      	; 0x12048 <gpib_tests+0x1e>
        return(0);
   12042:	80 e0       	ldi	r24, 0x00	; 0
   12044:	90 e0       	ldi	r25, 0x00	; 0
   12046:	de c0       	rjmp	.+444    	; 0x12204 <gpib_tests+0x1da>
   12048:	6b 01       	movw	r12, r22
   1204a:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   1204c:	66 ea       	ldi	r22, 0xA6	; 166
   1204e:	7d e0       	ldi	r23, 0x0D	; 13
   12050:	c7 01       	movw	r24, r14
   12052:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   12056:	89 2b       	or	r24, r25
   12058:	a1 f0       	breq	.+40     	; 0x12082 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   1205a:	f6 01       	movw	r30, r12
   1205c:	e2 80       	ldd	r14, Z+2	; 0x02
   1205e:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12060:	e1 14       	cp	r14, r1
   12062:	f1 04       	cpc	r15, r1
   12064:	21 f4       	brne	.+8      	; 0x1206e <gpib_tests+0x44>
        {
            gpib_help(1);
   12066:	81 e0       	ldi	r24, 0x01	; 1
   12068:	90 e0       	ldi	r25, 0x00	; 0
   1206a:	be df       	rcall	.-132    	; 0x11fe8 <gpib_help>
   1206c:	c9 c0       	rjmp	.+402    	; 0x12200 <gpib_tests+0x1d6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1206e:	6c e6       	ldi	r22, 0x6C	; 108
   12070:	76 e1       	ldi	r23, 0x16	; 22
   12072:	c7 01       	movw	r24, r14
   12074:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   12078:	89 2b       	or	r24, r25
   1207a:	a9 f7       	brne	.-22     	; 0x12066 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   1207c:	c2 e0       	ldi	r28, 0x02	; 2
   1207e:	d0 e0       	ldi	r29, 0x00	; 0
   12080:	02 c0       	rjmp	.+4      	; 0x12086 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12082:	c1 e0       	ldi	r28, 0x01	; 1
   12084:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   12086:	6b ea       	ldi	r22, 0xAB	; 171
   12088:	7d e0       	ldi	r23, 0x0D	; 13
   1208a:	c7 01       	movw	r24, r14
   1208c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   12090:	89 2b       	or	r24, r25
   12092:	29 f1       	breq	.+74     	; 0x120de <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12094:	fe 01       	movw	r30, r28
   12096:	ee 0f       	add	r30, r30
   12098:	ff 1f       	adc	r31, r31
   1209a:	ec 0d       	add	r30, r12
   1209c:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   1209e:	01 90       	ld	r0, Z+
   120a0:	f0 81       	ld	r31, Z
   120a2:	e0 2d       	mov	r30, r0
   120a4:	80 81       	ld	r24, Z
   120a6:	8d 33       	cpi	r24, 0x3D	; 61
   120a8:	09 f4       	brne	.+2      	; 0x120ac <gpib_tests+0x82>
            ++ind;
   120aa:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   120ac:	cc 0f       	add	r28, r28
   120ae:	dd 1f       	adc	r29, r29
   120b0:	cc 0d       	add	r28, r12
   120b2:	dd 1d       	adc	r29, r13
   120b4:	88 81       	ld	r24, Y
   120b6:	99 81       	ldd	r25, Y+1	; 0x01
   120b8:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   120bc:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   120c0:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   120c4:	ed b7       	in	r30, 0x3d	; 61
   120c6:	fe b7       	in	r31, 0x3e	; 62
   120c8:	75 83       	std	Z+5, r23	; 0x05
   120ca:	64 83       	std	Z+4, r22	; 0x04
   120cc:	8d ed       	ldi	r24, 0xDD	; 221
   120ce:	94 e1       	ldi	r25, 0x14	; 20
   120d0:	a0 e0       	ldi	r26, 0x00	; 0
   120d2:	81 83       	std	Z+1, r24	; 0x01
   120d4:	92 83       	std	Z+2, r25	; 0x02
   120d6:	a3 83       	std	Z+3, r26	; 0x03
   120d8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   120dc:	91 c0       	rjmp	.+290    	; 0x12200 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   120de:	61 eb       	ldi	r22, 0xB1	; 177
   120e0:	7d e0       	ldi	r23, 0x0D	; 13
   120e2:	c7 01       	movw	r24, r14
   120e4:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   120e8:	89 2b       	or	r24, r25
   120ea:	29 f0       	breq	.+10     	; 0x120f6 <gpib_tests+0xcc>
    {
		mount(argc, argv);
   120ec:	b6 01       	movw	r22, r12
   120ee:	c5 01       	movw	r24, r10
   120f0:	0e 94 87 9f 	call	0x13f0e	; 0x13f0e <mount>
   120f4:	85 c0       	rjmp	.+266    	; 0x12200 <gpib_tests+0x1d6>
		return(1);
    }

    if (MATCHI(ptr,"addresses") )
   120f6:	67 eb       	ldi	r22, 0xB7	; 183
   120f8:	7d e0       	ldi	r23, 0x0D	; 13
   120fa:	c7 01       	movw	r24, r14
   120fc:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   12100:	89 2b       	or	r24, r25
   12102:	c9 f0       	breq	.+50     	; 0x12136 <gpib_tests+0x10c>
    {
        ptr = argv[ind];
   12104:	cc 0f       	add	r28, r28
   12106:	dd 1f       	adc	r29, r29
   12108:	cc 0d       	add	r28, r12
   1210a:	dd 1d       	adc	r29, r13
   1210c:	88 81       	ld	r24, Y
   1210e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12110:	00 97       	sbiw	r24, 0x00	; 0
   12112:	69 f0       	breq	.+26     	; 0x1212e <gpib_tests+0x104>
   12114:	fc 01       	movw	r30, r24
   12116:	20 81       	ld	r18, Z
   12118:	22 23       	and	r18, r18
   1211a:	49 f0       	breq	.+18     	; 0x1212e <gpib_tests+0x104>
   1211c:	61 ec       	ldi	r22, 0xC1	; 193
   1211e:	7d e0       	ldi	r23, 0x0D	; 13
   12120:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   12124:	89 2b       	or	r24, r25
   12126:	19 f0       	breq	.+6      	; 0x1212e <gpib_tests+0x104>
            display_Addresses(1);
   12128:	81 e0       	ldi	r24, 0x01	; 1
   1212a:	90 e0       	ldi	r25, 0x00	; 0
   1212c:	02 c0       	rjmp	.+4      	; 0x12132 <gpib_tests+0x108>
        else
            display_Addresses(0);
   1212e:	80 e0       	ldi	r24, 0x00	; 0
   12130:	90 e0       	ldi	r25, 0x00	; 0
   12132:	4a d1       	rcall	.+660    	; 0x123c8 <display_Addresses>
   12134:	65 c0       	rjmp	.+202    	; 0x12200 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12136:	64 ec       	ldi	r22, 0xC4	; 196
   12138:	7d e0       	ldi	r23, 0x0D	; 13
   1213a:	c7 01       	movw	r24, r14
   1213c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   12140:	89 2b       	or	r24, r25
   12142:	c9 f0       	breq	.+50     	; 0x12176 <gpib_tests+0x14c>
    {
        ptr = argv[ind];
   12144:	cc 0f       	add	r28, r28
   12146:	dd 1f       	adc	r29, r29
   12148:	cc 0d       	add	r28, r12
   1214a:	dd 1d       	adc	r29, r13
   1214c:	88 81       	ld	r24, Y
   1214e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12150:	00 97       	sbiw	r24, 0x00	; 0
   12152:	69 f0       	breq	.+26     	; 0x1216e <gpib_tests+0x144>
   12154:	fc 01       	movw	r30, r24
   12156:	20 81       	ld	r18, Z
   12158:	22 23       	and	r18, r18
   1215a:	49 f0       	breq	.+18     	; 0x1216e <gpib_tests+0x144>
   1215c:	61 ec       	ldi	r22, 0xC1	; 193
   1215e:	7d e0       	ldi	r23, 0x0D	; 13
   12160:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   12164:	89 2b       	or	r24, r25
   12166:	19 f0       	breq	.+6      	; 0x1216e <gpib_tests+0x144>
            display_Config(1);
   12168:	81 e0       	ldi	r24, 0x01	; 1
   1216a:	90 e0       	ldi	r25, 0x00	; 0
   1216c:	02 c0       	rjmp	.+4      	; 0x12172 <gpib_tests+0x148>
        else
            display_Config(0);
   1216e:	80 e0       	ldi	r24, 0x00	; 0
   12170:	90 e0       	ldi	r25, 0x00	; 0
   12172:	05 d2       	rcall	.+1034   	; 0x1257e <display_Config>
   12174:	45 c0       	rjmp	.+138    	; 0x12200 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12176:	6b ec       	ldi	r22, 0xCB	; 203
   12178:	7d e0       	ldi	r23, 0x0D	; 13
   1217a:	c7 01       	movw	r24, r14
   1217c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   12180:	89 2b       	or	r24, r25
   12182:	19 f0       	breq	.+6      	; 0x1218a <gpib_tests+0x160>
    {
        gpib_timer_elapsed_begin();
   12184:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   12188:	3b c0       	rjmp	.+118    	; 0x12200 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   1218a:	69 ed       	ldi	r22, 0xD9	; 217
   1218c:	7d e0       	ldi	r23, 0x0D	; 13
   1218e:	c7 01       	movw	r24, r14
   12190:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   12194:	89 2b       	or	r24, r25
   12196:	29 f0       	breq	.+10     	; 0x121a2 <gpib_tests+0x178>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12198:	81 ee       	ldi	r24, 0xE1	; 225
   1219a:	9d e0       	ldi	r25, 0x0D	; 13
   1219c:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   121a0:	2f c0       	rjmp	.+94     	; 0x12200 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   121a2:	6f ee       	ldi	r22, 0xEF	; 239
   121a4:	7d e0       	ldi	r23, 0x0D	; 13
   121a6:	c7 01       	movw	r24, r14
   121a8:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   121ac:	89 2b       	or	r24, r25
    {
        gpib_task();
   121ae:	11 f0       	breq	.+4      	; 0x121b4 <gpib_tests+0x18a>
   121b0:	bb de       	rcall	.-650    	; 0x11f28 <gpib_task>
   121b2:	26 c0       	rjmp	.+76     	; 0x12200 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   121b4:	8e 01       	movw	r16, r28
   121b6:	0f 5f       	subi	r16, 0xFF	; 255
   121b8:	1f 4f       	sbci	r17, 0xFF	; 255
   121ba:	95 01       	movw	r18, r10
   121bc:	a8 01       	movw	r20, r16
   121be:	64 ef       	ldi	r22, 0xF4	; 244
   121c0:	7d e0       	ldi	r23, 0x0D	; 13
   121c2:	c7 01       	movw	r24, r14
   121c4:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   121c8:	89 2b       	or	r24, r25
   121ca:	09 f4       	brne	.+2      	; 0x121ce <gpib_tests+0x1a4>
   121cc:	3a cf       	rjmp	.-396    	; 0x12042 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   121ce:	00 0f       	add	r16, r16
   121d0:	11 1f       	adc	r17, r17
   121d2:	e6 01       	movw	r28, r12
   121d4:	c0 0f       	add	r28, r16
   121d6:	d1 1f       	adc	r29, r17
   121d8:	88 81       	ld	r24, Y
   121da:	99 81       	ldd	r25, Y+1	; 0x01
   121dc:	00 97       	sbiw	r24, 0x00	; 0
   121de:	51 f0       	breq	.+20     	; 0x121f4 <gpib_tests+0x1ca>
   121e0:	6a ef       	ldi	r22, 0xFA	; 250
   121e2:	7d e0       	ldi	r23, 0x0D	; 13
   121e4:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   121e8:	61 e0       	ldi	r22, 0x01	; 1
   121ea:	70 e0       	ldi	r23, 0x00	; 0
   121ec:	89 2b       	or	r24, r25
   121ee:	21 f4       	brne	.+8      	; 0x121f8 <gpib_tests+0x1ce>
   121f0:	60 e0       	ldi	r22, 0x00	; 0
   121f2:	02 c0       	rjmp	.+4      	; 0x121f8 <gpib_tests+0x1ce>
   121f4:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   121f6:	70 e0       	ldi	r23, 0x00	; 0
   121f8:	22 97       	sbiw	r28, 0x02	; 2
   121fa:	88 81       	ld	r24, Y
   121fc:	99 81       	ldd	r25, Y+1	; 0x01
   121fe:	32 da       	rcall	.-2972   	; 0x11664 <gpib_trace_task>
        return(1);
   12200:	81 e0       	ldi	r24, 0x01	; 1
   12202:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12204:	cd b7       	in	r28, 0x3d	; 61
   12206:	de b7       	in	r29, 0x3e	; 62
   12208:	25 96       	adiw	r28, 0x05	; 5
   1220a:	ea e0       	ldi	r30, 0x0A	; 10
   1220c:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

00012210 <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   12210:	ef 92       	push	r14
   12212:	ff 92       	push	r15
   12214:	0f 93       	push	r16
   12216:	1f 93       	push	r17
   12218:	cf 93       	push	r28
   1221a:	df 93       	push	r29
   1221c:	7c 01       	movw	r14, r24
   1221e:	c4 ec       	ldi	r28, 0xC4	; 196
   12220:	d1 e0       	ldi	r29, 0x01	; 1
   12222:	00 e0       	ldi	r16, 0x00	; 0
   12224:	10 e0       	ldi	r17, 0x00	; 0
   12226:	8a 81       	ldd	r24, Y+2	; 0x02
   12228:	9b 81       	ldd	r25, Y+3	; 0x03
   1222a:	8f 3f       	cpi	r24, 0xFF	; 255
   1222c:	2f ef       	ldi	r18, 0xFF	; 255
   1222e:	92 07       	cpc	r25, r18
   12230:	61 f0       	breq	.+24     	; 0x1224a <tok_index+0x3a>
   12232:	68 81       	ld	r22, Y
   12234:	79 81       	ldd	r23, Y+1	; 0x01
   12236:	c7 01       	movw	r24, r14
   12238:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1223c:	24 96       	adiw	r28, 0x04	; 4
   1223e:	89 2b       	or	r24, r25
   12240:	19 f4       	brne	.+6      	; 0x12248 <tok_index+0x38>
   12242:	0f 5f       	subi	r16, 0xFF	; 255
   12244:	1f 4f       	sbci	r17, 0xFF	; 255
   12246:	ef cf       	rjmp	.-34     	; 0x12226 <tok_index+0x16>
   12248:	c8 01       	movw	r24, r16
   1224a:	cd b7       	in	r28, 0x3d	; 61
   1224c:	de b7       	in	r29, 0x3e	; 62
   1224e:	e6 e0       	ldi	r30, 0x06	; 6
   12250:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00012254 <tok_name>:
   12254:	e4 ec       	ldi	r30, 0xC4	; 196
   12256:	f1 e0       	ldi	r31, 0x01	; 1
   12258:	20 e0       	ldi	r18, 0x00	; 0
   1225a:	30 e0       	ldi	r19, 0x00	; 0
   1225c:	90 e0       	ldi	r25, 0x00	; 0
   1225e:	42 81       	ldd	r20, Z+2	; 0x02
   12260:	53 81       	ldd	r21, Z+3	; 0x03
   12262:	4f 3f       	cpi	r20, 0xFF	; 255
   12264:	6f ef       	ldi	r22, 0xFF	; 255
   12266:	56 07       	cpc	r21, r22
   12268:	89 f0       	breq	.+34     	; 0x1228c <tok_name+0x38>
   1226a:	34 96       	adiw	r30, 0x04	; 4
   1226c:	48 17       	cp	r20, r24
   1226e:	59 07       	cpc	r21, r25
   12270:	51 f4       	brne	.+20     	; 0x12286 <tok_name+0x32>
   12272:	22 0f       	add	r18, r18
   12274:	33 1f       	adc	r19, r19
   12276:	22 0f       	add	r18, r18
   12278:	33 1f       	adc	r19, r19
   1227a:	f9 01       	movw	r30, r18
   1227c:	ec 53       	subi	r30, 0x3C	; 60
   1227e:	fe 4f       	sbci	r31, 0xFE	; 254
   12280:	80 81       	ld	r24, Z
   12282:	91 81       	ldd	r25, Z+1	; 0x01
   12284:	08 95       	ret
   12286:	2f 5f       	subi	r18, 0xFF	; 255
   12288:	3f 4f       	sbci	r19, 0xFF	; 255
   1228a:	e9 cf       	rjmp	.-46     	; 0x1225e <tok_name+0xa>
   1228c:	80 e2       	ldi	r24, 0x20	; 32
   1228e:	9c e0       	ldi	r25, 0x0C	; 12
   12290:	08 95       	ret

00012292 <print_tok_val>:
   12292:	cf 92       	push	r12
   12294:	df 92       	push	r13
   12296:	ef 92       	push	r14
   12298:	ff 92       	push	r15
   1229a:	0f 93       	push	r16
   1229c:	1f 93       	push	r17
   1229e:	cf 93       	push	r28
   122a0:	ad b7       	in	r26, 0x3d	; 61
   122a2:	be b7       	in	r27, 0x3e	; 62
   122a4:	1d 97       	sbiw	r26, 0x0d	; 13
   122a6:	0f b6       	in	r0, 0x3f	; 63
   122a8:	f8 94       	cli
   122aa:	be bf       	out	0x3e, r27	; 62
   122ac:	0f be       	out	0x3f, r0	; 63
   122ae:	ad bf       	out	0x3d, r26	; 61
   122b0:	c6 2f       	mov	r28, r22
   122b2:	69 01       	movw	r12, r18
   122b4:	7a 01       	movw	r14, r20
   122b6:	ce df       	rcall	.-100    	; 0x12254 <tok_name>
   122b8:	8c 01       	movw	r16, r24
   122ba:	cc 23       	and	r28, r28
   122bc:	31 f0       	breq	.+12     	; 0x122ca <print_tok_val+0x38>
   122be:	80 e2       	ldi	r24, 0x20	; 32
   122c0:	90 e0       	ldi	r25, 0x00	; 0
   122c2:	0e 94 81 74 	call	0xe902	; 0xe902 <putchar>
   122c6:	c1 50       	subi	r28, 0x01	; 1
   122c8:	f8 cf       	rjmp	.-16     	; 0x122ba <print_tok_val+0x28>
   122ca:	ed b7       	in	r30, 0x3d	; 61
   122cc:	fe b7       	in	r31, 0x3e	; 62
   122ce:	c2 86       	std	Z+10, r12	; 0x0a
   122d0:	d3 86       	std	Z+11, r13	; 0x0b
   122d2:	e4 86       	std	Z+12, r14	; 0x0c
   122d4:	f5 86       	std	Z+13, r15	; 0x0d
   122d6:	c6 82       	std	Z+6, r12	; 0x06
   122d8:	d7 82       	std	Z+7, r13	; 0x07
   122da:	e0 86       	std	Z+8, r14	; 0x08
   122dc:	f1 86       	std	Z+9, r15	; 0x09
   122de:	15 83       	std	Z+5, r17	; 0x05
   122e0:	04 83       	std	Z+4, r16	; 0x04
   122e2:	81 e9       	ldi	r24, 0x91	; 145
   122e4:	9d e1       	ldi	r25, 0x1D	; 29
   122e6:	a0 e0       	ldi	r26, 0x00	; 0
   122e8:	81 83       	std	Z+1, r24	; 0x01
   122ea:	92 83       	std	Z+2, r25	; 0x02
   122ec:	a3 83       	std	Z+3, r26	; 0x03
   122ee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   122f2:	ad b7       	in	r26, 0x3d	; 61
   122f4:	be b7       	in	r27, 0x3e	; 62
   122f6:	1d 96       	adiw	r26, 0x0d	; 13
   122f8:	0f b6       	in	r0, 0x3f	; 63
   122fa:	f8 94       	cli
   122fc:	be bf       	out	0x3e, r27	; 62
   122fe:	0f be       	out	0x3f, r0	; 63
   12300:	ad bf       	out	0x3d, r26	; 61
   12302:	cf 91       	pop	r28
   12304:	1f 91       	pop	r17
   12306:	0f 91       	pop	r16
   12308:	ff 90       	pop	r15
   1230a:	ef 90       	pop	r14
   1230c:	df 90       	pop	r13
   1230e:	cf 90       	pop	r12
   12310:	08 95       	ret

00012312 <print_tok_str>:
   12312:	ef 92       	push	r14
   12314:	ff 92       	push	r15
   12316:	0f 93       	push	r16
   12318:	1f 93       	push	r17
   1231a:	cf 93       	push	r28
   1231c:	ad b7       	in	r26, 0x3d	; 61
   1231e:	be b7       	in	r27, 0x3e	; 62
   12320:	17 97       	sbiw	r26, 0x07	; 7
   12322:	0f b6       	in	r0, 0x3f	; 63
   12324:	f8 94       	cli
   12326:	be bf       	out	0x3e, r27	; 62
   12328:	0f be       	out	0x3f, r0	; 63
   1232a:	ad bf       	out	0x3d, r26	; 61
   1232c:	c6 2f       	mov	r28, r22
   1232e:	7a 01       	movw	r14, r20
   12330:	91 df       	rcall	.-222    	; 0x12254 <tok_name>
   12332:	8c 01       	movw	r16, r24
   12334:	cc 23       	and	r28, r28
   12336:	31 f0       	breq	.+12     	; 0x12344 <print_tok_str+0x32>
   12338:	80 e2       	ldi	r24, 0x20	; 32
   1233a:	90 e0       	ldi	r25, 0x00	; 0
   1233c:	0e 94 81 74 	call	0xe902	; 0xe902 <putchar>
   12340:	c1 50       	subi	r28, 0x01	; 1
   12342:	f8 cf       	rjmp	.-16     	; 0x12334 <print_tok_str+0x22>
   12344:	ed b7       	in	r30, 0x3d	; 61
   12346:	fe b7       	in	r31, 0x3e	; 62
   12348:	f7 82       	std	Z+7, r15	; 0x07
   1234a:	e6 82       	std	Z+6, r14	; 0x06
   1234c:	15 83       	std	Z+5, r17	; 0x05
   1234e:	04 83       	std	Z+4, r16	; 0x04
   12350:	85 e8       	ldi	r24, 0x85	; 133
   12352:	9d e1       	ldi	r25, 0x1D	; 29
   12354:	a0 e0       	ldi	r26, 0x00	; 0
   12356:	81 83       	std	Z+1, r24	; 0x01
   12358:	92 83       	std	Z+2, r25	; 0x02
   1235a:	a3 83       	std	Z+3, r26	; 0x03
   1235c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12360:	ad b7       	in	r26, 0x3d	; 61
   12362:	be b7       	in	r27, 0x3e	; 62
   12364:	17 96       	adiw	r26, 0x07	; 7
   12366:	0f b6       	in	r0, 0x3f	; 63
   12368:	f8 94       	cli
   1236a:	be bf       	out	0x3e, r27	; 62
   1236c:	0f be       	out	0x3f, r0	; 63
   1236e:	ad bf       	out	0x3d, r26	; 61
   12370:	cf 91       	pop	r28
   12372:	1f 91       	pop	r17
   12374:	0f 91       	pop	r16
   12376:	ff 90       	pop	r15
   12378:	ef 90       	pop	r14
   1237a:	08 95       	ret

0001237c <print_tok>:
   1237c:	0f 93       	push	r16
   1237e:	1f 93       	push	r17
   12380:	cf 93       	push	r28
   12382:	00 d0       	rcall	.+0      	; 0x12384 <print_tok+0x8>
   12384:	00 d0       	rcall	.+0      	; 0x12386 <print_tok+0xa>
   12386:	1f 92       	push	r1
   12388:	c6 2f       	mov	r28, r22
   1238a:	64 df       	rcall	.-312    	; 0x12254 <tok_name>
   1238c:	8c 01       	movw	r16, r24
   1238e:	cc 23       	and	r28, r28
   12390:	31 f0       	breq	.+12     	; 0x1239e <print_tok+0x22>
   12392:	80 e2       	ldi	r24, 0x20	; 32
   12394:	90 e0       	ldi	r25, 0x00	; 0
   12396:	0e 94 81 74 	call	0xe902	; 0xe902 <putchar>
   1239a:	c1 50       	subi	r28, 0x01	; 1
   1239c:	f8 cf       	rjmp	.-16     	; 0x1238e <print_tok+0x12>
   1239e:	ed b7       	in	r30, 0x3d	; 61
   123a0:	fe b7       	in	r31, 0x3e	; 62
   123a2:	15 83       	std	Z+5, r17	; 0x05
   123a4:	04 83       	std	Z+4, r16	; 0x04
   123a6:	81 e8       	ldi	r24, 0x81	; 129
   123a8:	9d e1       	ldi	r25, 0x1D	; 29
   123aa:	a0 e0       	ldi	r26, 0x00	; 0
   123ac:	81 83       	std	Z+1, r24	; 0x01
   123ae:	92 83       	std	Z+2, r25	; 0x02
   123b0:	a3 83       	std	Z+3, r26	; 0x03
   123b2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   123b6:	0f 90       	pop	r0
   123b8:	0f 90       	pop	r0
   123ba:	0f 90       	pop	r0
   123bc:	0f 90       	pop	r0
   123be:	0f 90       	pop	r0
   123c0:	cf 91       	pop	r28
   123c2:	1f 91       	pop	r17
   123c4:	0f 91       	pop	r16
   123c6:	08 95       	ret

000123c8 <display_Addresses>:
   123c8:	2f 92       	push	r2
   123ca:	3f 92       	push	r3
   123cc:	4f 92       	push	r4
   123ce:	6f 92       	push	r6
   123d0:	7f 92       	push	r7
   123d2:	8f 92       	push	r8
   123d4:	cf 92       	push	r12
   123d6:	df 92       	push	r13
   123d8:	ef 92       	push	r14
   123da:	cf 93       	push	r28
   123dc:	df 93       	push	r29
   123de:	cd b7       	in	r28, 0x3d	; 61
   123e0:	de b7       	in	r29, 0x3e	; 62
   123e2:	2a 97       	sbiw	r28, 0x0a	; 10
   123e4:	0f b6       	in	r0, 0x3f	; 63
   123e6:	f8 94       	cli
   123e8:	de bf       	out	0x3e, r29	; 62
   123ea:	0f be       	out	0x3f, r0	; 63
   123ec:	cd bf       	out	0x3d, r28	; 61
   123ee:	8b e4       	ldi	r24, 0x4B	; 75
   123f0:	9a e1       	ldi	r25, 0x1A	; 26
   123f2:	a0 e0       	ldi	r26, 0x00	; 0
   123f4:	ed b7       	in	r30, 0x3d	; 61
   123f6:	fe b7       	in	r31, 0x3e	; 62
   123f8:	81 83       	std	Z+1, r24	; 0x01
   123fa:	92 83       	std	Z+2, r25	; 0x02
   123fc:	a3 83       	std	Z+3, r26	; 0x03
   123fe:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12402:	24 ef       	ldi	r18, 0xF4	; 244
   12404:	3e e1       	ldi	r19, 0x1E	; 30
   12406:	3a 87       	std	Y+10, r19	; 0x0a
   12408:	29 87       	std	Y+9, r18	; 0x09
   1240a:	8d e2       	ldi	r24, 0x2D	; 45
   1240c:	9a e1       	ldi	r25, 0x1A	; 26
   1240e:	6c 01       	movw	r12, r24
   12410:	e1 2c       	mov	r14, r1
   12412:	8f e2       	ldi	r24, 0x2F	; 47
   12414:	9a e1       	ldi	r25, 0x1A	; 26
   12416:	3c 01       	movw	r6, r24
   12418:	81 2c       	mov	r8, r1
   1241a:	88 e3       	ldi	r24, 0x38	; 56
   1241c:	9a e1       	ldi	r25, 0x1A	; 26
   1241e:	1c 01       	movw	r2, r24
   12420:	41 2c       	mov	r4, r1
   12422:	82 e4       	ldi	r24, 0x42	; 66
   12424:	9a e1       	ldi	r25, 0x1A	; 26
   12426:	9c 01       	movw	r18, r24
   12428:	40 e0       	ldi	r20, 0x00	; 0
   1242a:	2e 83       	std	Y+6, r18	; 0x06
   1242c:	3f 83       	std	Y+7, r19	; 0x07
   1242e:	48 87       	std	Y+8, r20	; 0x08
   12430:	e9 85       	ldd	r30, Y+9	; 0x09
   12432:	fa 85       	ldd	r31, Y+10	; 0x0a
   12434:	80 81       	ld	r24, Z
   12436:	88 23       	and	r24, r24
   12438:	09 f4       	brne	.+2      	; 0x1243c <display_Addresses+0x74>
   1243a:	7b c0       	rjmp	.+246    	; 0x12532 <display_Addresses+0x16a>
   1243c:	83 30       	cpi	r24, 0x03	; 3
   1243e:	21 f0       	breq	.+8      	; 0x12448 <display_Addresses+0x80>
   12440:	81 30       	cpi	r24, 0x01	; 1
   12442:	09 f0       	breq	.+2      	; 0x12446 <display_Addresses+0x7e>
   12444:	5a c0       	rjmp	.+180    	; 0x124fa <display_Addresses+0x132>
   12446:	1f c0       	rjmp	.+62     	; 0x12486 <display_Addresses+0xbe>
   12448:	e9 85       	ldd	r30, Y+9	; 0x09
   1244a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1244c:	87 a1       	ldd	r24, Z+39	; 0x27
   1244e:	90 a5       	ldd	r25, Z+40	; 0x28
   12450:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   12454:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   12458:	cf 01       	movw	r24, r30
   1245a:	07 96       	adiw	r24, 0x07	; 7
   1245c:	ed b7       	in	r30, 0x3d	; 61
   1245e:	fe b7       	in	r31, 0x3e	; 62
   12460:	95 83       	std	Z+5, r25	; 0x05
   12462:	84 83       	std	Z+4, r24	; 0x04
   12464:	2e 81       	ldd	r18, Y+6	; 0x06
   12466:	3f 81       	ldd	r19, Y+7	; 0x07
   12468:	48 85       	ldd	r20, Y+8	; 0x08
   1246a:	21 83       	std	Z+1, r18	; 0x01
   1246c:	32 83       	std	Z+2, r19	; 0x02
   1246e:	43 83       	std	Z+3, r20	; 0x03
   12470:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12474:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   12478:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1247c:	42 81       	ldd	r20, Z+2	; 0x02
   1247e:	53 81       	ldd	r21, Z+3	; 0x03
   12480:	64 e0       	ldi	r22, 0x04	; 4
   12482:	82 e1       	ldi	r24, 0x12	; 18
   12484:	46 df       	rcall	.-372    	; 0x12312 <print_tok_str>
   12486:	e9 85       	ldd	r30, Y+9	; 0x09
   12488:	fa 85       	ldd	r31, Y+10	; 0x0a
   1248a:	80 81       	ld	r24, Z
   1248c:	81 30       	cpi	r24, 0x01	; 1
   1248e:	d1 f4       	brne	.+52     	; 0x124c4 <display_Addresses+0xfc>
   12490:	87 a1       	ldd	r24, Z+39	; 0x27
   12492:	90 a5       	ldd	r25, Z+40	; 0x28
   12494:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   12498:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   1249c:	cf 01       	movw	r24, r30
   1249e:	07 96       	adiw	r24, 0x07	; 7
   124a0:	ed b7       	in	r30, 0x3d	; 61
   124a2:	fe b7       	in	r31, 0x3e	; 62
   124a4:	95 83       	std	Z+5, r25	; 0x05
   124a6:	84 83       	std	Z+4, r24	; 0x04
   124a8:	21 82       	std	Z+1, r2	; 0x01
   124aa:	32 82       	std	Z+2, r3	; 0x02
   124ac:	43 82       	std	Z+3, r4	; 0x03
   124ae:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   124b2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   124b6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   124ba:	42 81       	ldd	r20, Z+2	; 0x02
   124bc:	53 81       	ldd	r21, Z+3	; 0x03
   124be:	64 e0       	ldi	r22, 0x04	; 4
   124c0:	82 e1       	ldi	r24, 0x12	; 18
   124c2:	27 df       	rcall	.-434    	; 0x12312 <print_tok_str>
   124c4:	e9 85       	ldd	r30, Y+9	; 0x09
   124c6:	fa 85       	ldd	r31, Y+10	; 0x0a
   124c8:	21 81       	ldd	r18, Z+1	; 0x01
   124ca:	30 e0       	ldi	r19, 0x00	; 0
   124cc:	40 e0       	ldi	r20, 0x00	; 0
   124ce:	50 e0       	ldi	r21, 0x00	; 0
   124d0:	64 e0       	ldi	r22, 0x04	; 4
   124d2:	81 e0       	ldi	r24, 0x01	; 1
   124d4:	de de       	rcall	.-580    	; 0x12292 <print_tok_val>
   124d6:	e9 85       	ldd	r30, Y+9	; 0x09
   124d8:	fa 85       	ldd	r31, Y+10	; 0x0a
   124da:	22 81       	ldd	r18, Z+2	; 0x02
   124dc:	30 e0       	ldi	r19, 0x00	; 0
   124de:	40 e0       	ldi	r20, 0x00	; 0
   124e0:	50 e0       	ldi	r21, 0x00	; 0
   124e2:	64 e0       	ldi	r22, 0x04	; 4
   124e4:	8f e1       	ldi	r24, 0x1F	; 31
   124e6:	d5 de       	rcall	.-598    	; 0x12292 <print_tok_val>
   124e8:	e9 85       	ldd	r30, Y+9	; 0x09
   124ea:	fa 85       	ldd	r31, Y+10	; 0x0a
   124ec:	23 81       	ldd	r18, Z+3	; 0x03
   124ee:	34 81       	ldd	r19, Z+4	; 0x04
   124f0:	45 81       	ldd	r20, Z+5	; 0x05
   124f2:	56 81       	ldd	r21, Z+6	; 0x06
   124f4:	64 e0       	ldi	r22, 0x04	; 4
   124f6:	83 e0       	ldi	r24, 0x03	; 3
   124f8:	cc de       	rcall	.-616    	; 0x12292 <print_tok_val>
   124fa:	e9 85       	ldd	r30, Y+9	; 0x09
   124fc:	fa 85       	ldd	r31, Y+10	; 0x0a
   124fe:	80 81       	ld	r24, Z
   12500:	84 30       	cpi	r24, 0x04	; 4
   12502:	81 f4       	brne	.+32     	; 0x12524 <display_Addresses+0x15c>
   12504:	ed b7       	in	r30, 0x3d	; 61
   12506:	fe b7       	in	r31, 0x3e	; 62
   12508:	61 82       	std	Z+1, r6	; 0x01
   1250a:	72 82       	std	Z+2, r7	; 0x02
   1250c:	83 82       	std	Z+3, r8	; 0x03
   1250e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12512:	e9 85       	ldd	r30, Y+9	; 0x09
   12514:	fa 85       	ldd	r31, Y+10	; 0x0a
   12516:	21 81       	ldd	r18, Z+1	; 0x01
   12518:	30 e0       	ldi	r19, 0x00	; 0
   1251a:	40 e0       	ldi	r20, 0x00	; 0
   1251c:	50 e0       	ldi	r21, 0x00	; 0
   1251e:	64 e0       	ldi	r22, 0x04	; 4
   12520:	81 e0       	ldi	r24, 0x01	; 1
   12522:	b7 de       	rcall	.-658    	; 0x12292 <print_tok_val>
   12524:	ed b7       	in	r30, 0x3d	; 61
   12526:	fe b7       	in	r31, 0x3e	; 62
   12528:	c1 82       	std	Z+1, r12	; 0x01
   1252a:	d2 82       	std	Z+2, r13	; 0x02
   1252c:	e3 82       	std	Z+3, r14	; 0x03
   1252e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12532:	29 85       	ldd	r18, Y+9	; 0x09
   12534:	3a 85       	ldd	r19, Y+10	; 0x0a
   12536:	25 5d       	subi	r18, 0xD5	; 213
   12538:	3f 4f       	sbci	r19, 0xFF	; 255
   1253a:	3a 87       	std	Y+10, r19	; 0x0a
   1253c:	29 87       	std	Y+9, r18	; 0x09
   1253e:	28 5f       	subi	r18, 0xF8	; 248
   12540:	30 42       	sbci	r19, 0x20	; 32
   12542:	09 f0       	breq	.+2      	; 0x12546 <display_Addresses+0x17e>
   12544:	75 cf       	rjmp	.-278    	; 0x12430 <display_Addresses+0x68>
   12546:	8b e2       	ldi	r24, 0x2B	; 43
   12548:	9a e1       	ldi	r25, 0x1A	; 26
   1254a:	a0 e0       	ldi	r26, 0x00	; 0
   1254c:	ed b7       	in	r30, 0x3d	; 61
   1254e:	fe b7       	in	r31, 0x3e	; 62
   12550:	81 83       	std	Z+1, r24	; 0x01
   12552:	92 83       	std	Z+2, r25	; 0x02
   12554:	a3 83       	std	Z+3, r26	; 0x03
   12556:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1255a:	2a 96       	adiw	r28, 0x0a	; 10
   1255c:	0f b6       	in	r0, 0x3f	; 63
   1255e:	f8 94       	cli
   12560:	de bf       	out	0x3e, r29	; 62
   12562:	0f be       	out	0x3f, r0	; 63
   12564:	cd bf       	out	0x3d, r28	; 61
   12566:	df 91       	pop	r29
   12568:	cf 91       	pop	r28
   1256a:	ef 90       	pop	r14
   1256c:	df 90       	pop	r13
   1256e:	cf 90       	pop	r12
   12570:	8f 90       	pop	r8
   12572:	7f 90       	pop	r7
   12574:	6f 90       	pop	r6
   12576:	4f 90       	pop	r4
   12578:	3f 90       	pop	r3
   1257a:	2f 90       	pop	r2
   1257c:	08 95       	ret

0001257e <display_Config>:
   1257e:	2f 92       	push	r2
   12580:	3f 92       	push	r3
   12582:	4f 92       	push	r4
   12584:	6f 92       	push	r6
   12586:	7f 92       	push	r7
   12588:	8f 92       	push	r8
   1258a:	af 92       	push	r10
   1258c:	bf 92       	push	r11
   1258e:	cf 92       	push	r12
   12590:	df 92       	push	r13
   12592:	ef 92       	push	r14
   12594:	0f 93       	push	r16
   12596:	1f 93       	push	r17
   12598:	cf 93       	push	r28
   1259a:	df 93       	push	r29
   1259c:	cd b7       	in	r28, 0x3d	; 61
   1259e:	de b7       	in	r29, 0x3e	; 62
   125a0:	62 97       	sbiw	r28, 0x12	; 18
   125a2:	0f b6       	in	r0, 0x3f	; 63
   125a4:	f8 94       	cli
   125a6:	de bf       	out	0x3e, r29	; 62
   125a8:	0f be       	out	0x3f, r0	; 63
   125aa:	cd bf       	out	0x3d, r28	; 61
   125ac:	5c 01       	movw	r10, r24
   125ae:	8b e0       	ldi	r24, 0x0B	; 11
   125b0:	9a e1       	ldi	r25, 0x1A	; 26
   125b2:	a0 e0       	ldi	r26, 0x00	; 0
   125b4:	ed b7       	in	r30, 0x3d	; 61
   125b6:	fe b7       	in	r31, 0x3e	; 62
   125b8:	81 83       	std	Z+1, r24	; 0x01
   125ba:	92 83       	std	Z+2, r25	; 0x02
   125bc:	a3 83       	std	Z+3, r26	; 0x03
   125be:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   125c2:	04 ef       	ldi	r16, 0xF4	; 244
   125c4:	1e e1       	ldi	r17, 0x1E	; 30
   125c6:	80 e9       	ldi	r24, 0x90	; 144
   125c8:	99 e1       	ldi	r25, 0x19	; 25
   125ca:	9c 01       	movw	r18, r24
   125cc:	40 e0       	ldi	r20, 0x00	; 0
   125ce:	28 87       	std	Y+8, r18	; 0x08
   125d0:	39 87       	std	Y+9, r19	; 0x09
   125d2:	4a 87       	std	Y+10, r20	; 0x0a
   125d4:	85 ec       	ldi	r24, 0xC5	; 197
   125d6:	99 e1       	ldi	r25, 0x19	; 25
   125d8:	9c 01       	movw	r18, r24
   125da:	40 e0       	ldi	r20, 0x00	; 0
   125dc:	2b 87       	std	Y+11, r18	; 0x0b
   125de:	3c 87       	std	Y+12, r19	; 0x0c
   125e0:	4d 87       	std	Y+13, r20	; 0x0d
   125e2:	86 ea       	ldi	r24, 0xA6	; 166
   125e4:	99 e1       	ldi	r25, 0x19	; 25
   125e6:	9c 01       	movw	r18, r24
   125e8:	40 e0       	ldi	r20, 0x00	; 0
   125ea:	2e 87       	std	Y+14, r18	; 0x0e
   125ec:	3f 87       	std	Y+15, r19	; 0x0f
   125ee:	48 8b       	std	Y+16, r20	; 0x10
   125f0:	82 e9       	ldi	r24, 0x92	; 146
   125f2:	99 e1       	ldi	r25, 0x19	; 25
   125f4:	1c 01       	movw	r2, r24
   125f6:	41 2c       	mov	r4, r1
   125f8:	82 e0       	ldi	r24, 0x02	; 2
   125fa:	9a e1       	ldi	r25, 0x1A	; 26
   125fc:	6c 01       	movw	r12, r24
   125fe:	e1 2c       	mov	r14, r1
   12600:	83 ee       	ldi	r24, 0xE3	; 227
   12602:	99 e1       	ldi	r25, 0x19	; 25
   12604:	3c 01       	movw	r6, r24
   12606:	81 2c       	mov	r8, r1
   12608:	f8 01       	movw	r30, r16
   1260a:	80 81       	ld	r24, Z
   1260c:	88 23       	and	r24, r24
   1260e:	09 f4       	brne	.+2      	; 0x12612 <display_Config+0x94>
   12610:	14 c2       	rjmp	.+1064   	; 0x12a3a <display_Config+0x4bc>
   12612:	83 30       	cpi	r24, 0x03	; 3
   12614:	09 f0       	breq	.+2      	; 0x12618 <display_Config+0x9a>
   12616:	38 c1       	rjmp	.+624    	; 0x12888 <display_Config+0x30a>
   12618:	27 a1       	ldd	r18, Z+39	; 0x27
   1261a:	30 a5       	ldd	r19, Z+40	; 0x28
   1261c:	3a 8b       	std	Y+18, r19	; 0x12
   1261e:	29 8b       	std	Y+17, r18	; 0x11
   12620:	c8 01       	movw	r24, r16
   12622:	07 96       	adiw	r24, 0x07	; 7
   12624:	ed b7       	in	r30, 0x3d	; 61
   12626:	fe b7       	in	r31, 0x3e	; 62
   12628:	95 83       	std	Z+5, r25	; 0x05
   1262a:	84 83       	std	Z+4, r24	; 0x04
   1262c:	c1 82       	std	Z+1, r12	; 0x01
   1262e:	d2 82       	std	Z+2, r13	; 0x02
   12630:	e3 82       	std	Z+3, r14	; 0x03
   12632:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12636:	e9 89       	ldd	r30, Y+17	; 0x11
   12638:	fa 89       	ldd	r31, Y+18	; 0x12
   1263a:	80 81       	ld	r24, Z
   1263c:	90 e0       	ldi	r25, 0x00	; 0
   1263e:	ed b7       	in	r30, 0x3d	; 61
   12640:	fe b7       	in	r31, 0x3e	; 62
   12642:	95 83       	std	Z+5, r25	; 0x05
   12644:	84 83       	std	Z+4, r24	; 0x04
   12646:	61 82       	std	Z+1, r6	; 0x01
   12648:	72 82       	std	Z+2, r7	; 0x02
   1264a:	83 82       	std	Z+3, r8	; 0x03
   1264c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12650:	64 e0       	ldi	r22, 0x04	; 4
   12652:	89 e0       	ldi	r24, 0x09	; 9
   12654:	93 de       	rcall	.-730    	; 0x1237c <print_tok>
   12656:	e9 89       	ldd	r30, Y+17	; 0x11
   12658:	fa 89       	ldd	r31, Y+18	; 0x12
   1265a:	20 81       	ld	r18, Z
   1265c:	30 e0       	ldi	r19, 0x00	; 0
   1265e:	40 e0       	ldi	r20, 0x00	; 0
   12660:	50 e0       	ldi	r21, 0x00	; 0
   12662:	68 e0       	ldi	r22, 0x08	; 8
   12664:	81 e0       	ldi	r24, 0x01	; 1
   12666:	15 de       	rcall	.-982    	; 0x12292 <print_tok_val>
   12668:	e9 89       	ldd	r30, Y+17	; 0x11
   1266a:	fa 89       	ldd	r31, Y+18	; 0x12
   1266c:	21 81       	ldd	r18, Z+1	; 0x01
   1266e:	30 e0       	ldi	r19, 0x00	; 0
   12670:	40 e0       	ldi	r20, 0x00	; 0
   12672:	50 e0       	ldi	r21, 0x00	; 0
   12674:	68 e0       	ldi	r22, 0x08	; 8
   12676:	8f e1       	ldi	r24, 0x1F	; 31
   12678:	0c de       	rcall	.-1000   	; 0x12292 <print_tok_val>
   1267a:	e9 89       	ldd	r30, Y+17	; 0x11
   1267c:	fa 89       	ldd	r31, Y+18	; 0x12
   1267e:	42 81       	ldd	r20, Z+2	; 0x02
   12680:	53 81       	ldd	r21, Z+3	; 0x03
   12682:	68 e0       	ldi	r22, 0x08	; 8
   12684:	82 e1       	ldi	r24, 0x12	; 18
   12686:	45 de       	rcall	.-886    	; 0x12312 <print_tok_str>
   12688:	64 e0       	ldi	r22, 0x04	; 4
   1268a:	81 e1       	ldi	r24, 0x11	; 17
   1268c:	77 de       	rcall	.-786    	; 0x1237c <print_tok>
   1268e:	64 e0       	ldi	r22, 0x04	; 4
   12690:	85 e1       	ldi	r24, 0x15	; 21
   12692:	74 de       	rcall	.-792    	; 0x1237c <print_tok>
   12694:	e9 89       	ldd	r30, Y+17	; 0x11
   12696:	fa 89       	ldd	r31, Y+18	; 0x12
   12698:	24 81       	ldd	r18, Z+4	; 0x04
   1269a:	35 81       	ldd	r19, Z+5	; 0x05
   1269c:	40 e0       	ldi	r20, 0x00	; 0
   1269e:	50 e0       	ldi	r21, 0x00	; 0
   126a0:	68 e0       	ldi	r22, 0x08	; 8
   126a2:	87 e1       	ldi	r24, 0x17	; 23
   126a4:	f6 dd       	rcall	.-1044   	; 0x12292 <print_tok_val>
   126a6:	64 e0       	ldi	r22, 0x04	; 4
   126a8:	81 e1       	ldi	r24, 0x11	; 17
   126aa:	68 de       	rcall	.-816    	; 0x1237c <print_tok>
   126ac:	a1 14       	cp	r10, r1
   126ae:	b1 04       	cpc	r11, r1
   126b0:	09 f1       	breq	.+66     	; 0x126f4 <display_Config+0x176>
   126b2:	64 e0       	ldi	r22, 0x04	; 4
   126b4:	8b e0       	ldi	r24, 0x0B	; 11
   126b6:	62 de       	rcall	.-828    	; 0x1237c <print_tok>
   126b8:	e9 89       	ldd	r30, Y+17	; 0x11
   126ba:	fa 89       	ldd	r31, Y+18	; 0x12
   126bc:	26 81       	ldd	r18, Z+6	; 0x06
   126be:	37 81       	ldd	r19, Z+7	; 0x07
   126c0:	40 e0       	ldi	r20, 0x00	; 0
   126c2:	50 e0       	ldi	r21, 0x00	; 0
   126c4:	68 e0       	ldi	r22, 0x08	; 8
   126c6:	88 e2       	ldi	r24, 0x28	; 40
   126c8:	e4 dd       	rcall	.-1080   	; 0x12292 <print_tok_val>
   126ca:	e9 89       	ldd	r30, Y+17	; 0x11
   126cc:	fa 89       	ldd	r31, Y+18	; 0x12
   126ce:	20 85       	ldd	r18, Z+8	; 0x08
   126d0:	31 85       	ldd	r19, Z+9	; 0x09
   126d2:	40 e0       	ldi	r20, 0x00	; 0
   126d4:	50 e0       	ldi	r21, 0x00	; 0
   126d6:	68 e0       	ldi	r22, 0x08	; 8
   126d8:	85 e2       	ldi	r24, 0x25	; 37
   126da:	db dd       	rcall	.-1098   	; 0x12292 <print_tok_val>
   126dc:	e9 89       	ldd	r30, Y+17	; 0x11
   126de:	fa 89       	ldd	r31, Y+18	; 0x12
   126e0:	22 85       	ldd	r18, Z+10	; 0x0a
   126e2:	30 e0       	ldi	r19, 0x00	; 0
   126e4:	40 e0       	ldi	r20, 0x00	; 0
   126e6:	50 e0       	ldi	r21, 0x00	; 0
   126e8:	68 e0       	ldi	r22, 0x08	; 8
   126ea:	86 e2       	ldi	r24, 0x26	; 38
   126ec:	d2 dd       	rcall	.-1116   	; 0x12292 <print_tok_val>
   126ee:	64 e0       	ldi	r22, 0x04	; 4
   126f0:	81 e1       	ldi	r24, 0x11	; 17
   126f2:	44 de       	rcall	.-888    	; 0x1237c <print_tok>
   126f4:	64 e0       	ldi	r22, 0x04	; 4
   126f6:	87 e2       	ldi	r24, 0x27	; 39
   126f8:	41 de       	rcall	.-894    	; 0x1237c <print_tok>
   126fa:	a1 14       	cp	r10, r1
   126fc:	b1 04       	cpc	r11, r1
   126fe:	49 f0       	breq	.+18     	; 0x12712 <display_Config+0x194>
   12700:	e9 89       	ldd	r30, Y+17	; 0x11
   12702:	fa 89       	ldd	r31, Y+18	; 0x12
   12704:	23 85       	ldd	r18, Z+11	; 0x0b
   12706:	30 e0       	ldi	r19, 0x00	; 0
   12708:	40 e0       	ldi	r20, 0x00	; 0
   1270a:	50 e0       	ldi	r21, 0x00	; 0
   1270c:	68 e0       	ldi	r22, 0x08	; 8
   1270e:	89 e2       	ldi	r24, 0x29	; 41
   12710:	c0 dd       	rcall	.-1152   	; 0x12292 <print_tok_val>
   12712:	e9 89       	ldd	r30, Y+17	; 0x11
   12714:	fa 89       	ldd	r31, Y+18	; 0x12
   12716:	24 85       	ldd	r18, Z+12	; 0x0c
   12718:	35 85       	ldd	r19, Z+13	; 0x0d
   1271a:	46 85       	ldd	r20, Z+14	; 0x0e
   1271c:	57 85       	ldd	r21, Z+15	; 0x0f
   1271e:	68 e0       	ldi	r22, 0x08	; 8
   12720:	8f e0       	ldi	r24, 0x0F	; 15
   12722:	b7 dd       	rcall	.-1170   	; 0x12292 <print_tok_val>
   12724:	a1 14       	cp	r10, r1
   12726:	b1 04       	cpc	r11, r1
   12728:	09 f4       	brne	.+2      	; 0x1272c <display_Config+0x1ae>
   1272a:	5a c0       	rjmp	.+180    	; 0x127e0 <display_Config+0x262>
   1272c:	e9 89       	ldd	r30, Y+17	; 0x11
   1272e:	fa 89       	ldd	r31, Y+18	; 0x12
   12730:	20 89       	ldd	r18, Z+16	; 0x10
   12732:	31 89       	ldd	r19, Z+17	; 0x11
   12734:	40 e0       	ldi	r20, 0x00	; 0
   12736:	50 e0       	ldi	r21, 0x00	; 0
   12738:	68 e0       	ldi	r22, 0x08	; 8
   1273a:	87 e0       	ldi	r24, 0x07	; 7
   1273c:	aa dd       	rcall	.-1196   	; 0x12292 <print_tok_val>
   1273e:	e9 89       	ldd	r30, Y+17	; 0x11
   12740:	fa 89       	ldd	r31, Y+18	; 0x12
   12742:	22 89       	ldd	r18, Z+18	; 0x12
   12744:	30 e0       	ldi	r19, 0x00	; 0
   12746:	40 e0       	ldi	r20, 0x00	; 0
   12748:	50 e0       	ldi	r21, 0x00	; 0
   1274a:	68 e0       	ldi	r22, 0x08	; 8
   1274c:	85 e0       	ldi	r24, 0x05	; 5
   1274e:	a1 dd       	rcall	.-1214   	; 0x12292 <print_tok_val>
   12750:	e9 89       	ldd	r30, Y+17	; 0x11
   12752:	fa 89       	ldd	r31, Y+18	; 0x12
   12754:	23 89       	ldd	r18, Z+19	; 0x13
   12756:	30 e0       	ldi	r19, 0x00	; 0
   12758:	40 e0       	ldi	r20, 0x00	; 0
   1275a:	50 e0       	ldi	r21, 0x00	; 0
   1275c:	68 e0       	ldi	r22, 0x08	; 8
   1275e:	86 e0       	ldi	r24, 0x06	; 6
   12760:	98 dd       	rcall	.-1232   	; 0x12292 <print_tok_val>
   12762:	e9 89       	ldd	r30, Y+17	; 0x11
   12764:	fa 89       	ldd	r31, Y+18	; 0x12
   12766:	24 89       	ldd	r18, Z+20	; 0x14
   12768:	35 89       	ldd	r19, Z+21	; 0x15
   1276a:	40 e0       	ldi	r20, 0x00	; 0
   1276c:	50 e0       	ldi	r21, 0x00	; 0
   1276e:	68 e0       	ldi	r22, 0x08	; 8
   12770:	84 e0       	ldi	r24, 0x04	; 4
   12772:	8f dd       	rcall	.-1250   	; 0x12292 <print_tok_val>
   12774:	e9 89       	ldd	r30, Y+17	; 0x11
   12776:	fa 89       	ldd	r31, Y+18	; 0x12
   12778:	26 89       	ldd	r18, Z+22	; 0x16
   1277a:	37 89       	ldd	r19, Z+23	; 0x17
   1277c:	40 e0       	ldi	r20, 0x00	; 0
   1277e:	50 e0       	ldi	r21, 0x00	; 0
   12780:	68 e0       	ldi	r22, 0x08	; 8
   12782:	8a e0       	ldi	r24, 0x0A	; 10
   12784:	86 dd       	rcall	.-1268   	; 0x12292 <print_tok_val>
   12786:	e9 89       	ldd	r30, Y+17	; 0x11
   12788:	fa 89       	ldd	r31, Y+18	; 0x12
   1278a:	20 8d       	ldd	r18, Z+24	; 0x18
   1278c:	31 8d       	ldd	r19, Z+25	; 0x19
   1278e:	40 e0       	ldi	r20, 0x00	; 0
   12790:	50 e0       	ldi	r21, 0x00	; 0
   12792:	68 e0       	ldi	r22, 0x08	; 8
   12794:	8e e1       	ldi	r24, 0x1E	; 30
   12796:	7d dd       	rcall	.-1286   	; 0x12292 <print_tok_val>
   12798:	e9 89       	ldd	r30, Y+17	; 0x11
   1279a:	fa 89       	ldd	r31, Y+18	; 0x12
   1279c:	22 8d       	ldd	r18, Z+26	; 0x1a
   1279e:	33 8d       	ldd	r19, Z+27	; 0x1b
   127a0:	40 e0       	ldi	r20, 0x00	; 0
   127a2:	50 e0       	ldi	r21, 0x00	; 0
   127a4:	68 e0       	ldi	r22, 0x08	; 8
   127a6:	80 e0       	ldi	r24, 0x00	; 0
   127a8:	74 dd       	rcall	.-1304   	; 0x12292 <print_tok_val>
   127aa:	e9 89       	ldd	r30, Y+17	; 0x11
   127ac:	fa 89       	ldd	r31, Y+18	; 0x12
   127ae:	24 8d       	ldd	r18, Z+28	; 0x1c
   127b0:	30 e0       	ldi	r19, 0x00	; 0
   127b2:	40 e0       	ldi	r20, 0x00	; 0
   127b4:	50 e0       	ldi	r21, 0x00	; 0
   127b6:	68 e0       	ldi	r22, 0x08	; 8
   127b8:	8c e1       	ldi	r24, 0x1C	; 28
   127ba:	6b dd       	rcall	.-1322   	; 0x12292 <print_tok_val>
   127bc:	e9 89       	ldd	r30, Y+17	; 0x11
   127be:	fa 89       	ldd	r31, Y+18	; 0x12
   127c0:	25 8d       	ldd	r18, Z+29	; 0x1d
   127c2:	30 e0       	ldi	r19, 0x00	; 0
   127c4:	40 e0       	ldi	r20, 0x00	; 0
   127c6:	50 e0       	ldi	r21, 0x00	; 0
   127c8:	68 e0       	ldi	r22, 0x08	; 8
   127ca:	83 e1       	ldi	r24, 0x13	; 19
   127cc:	62 dd       	rcall	.-1340   	; 0x12292 <print_tok_val>
   127ce:	e9 89       	ldd	r30, Y+17	; 0x11
   127d0:	fa 89       	ldd	r31, Y+18	; 0x12
   127d2:	26 8d       	ldd	r18, Z+30	; 0x1e
   127d4:	30 e0       	ldi	r19, 0x00	; 0
   127d6:	40 e0       	ldi	r20, 0x00	; 0
   127d8:	50 e0       	ldi	r21, 0x00	; 0
   127da:	68 e0       	ldi	r22, 0x08	; 8
   127dc:	81 e2       	ldi	r24, 0x21	; 33
   127de:	59 dd       	rcall	.-1358   	; 0x12292 <print_tok_val>
   127e0:	64 e0       	ldi	r22, 0x04	; 4
   127e2:	81 e1       	ldi	r24, 0x11	; 17
   127e4:	cb dd       	rcall	.-1130   	; 0x1237c <print_tok>
   127e6:	a1 14       	cp	r10, r1
   127e8:	b1 04       	cpc	r11, r1
   127ea:	99 f1       	breq	.+102    	; 0x12852 <display_Config+0x2d4>
   127ec:	64 e0       	ldi	r22, 0x04	; 4
   127ee:	8a e2       	ldi	r24, 0x2A	; 42
   127f0:	c5 dd       	rcall	.-1142   	; 0x1237c <print_tok>
   127f2:	e9 89       	ldd	r30, Y+17	; 0x11
   127f4:	fa 89       	ldd	r31, Y+18	; 0x12
   127f6:	27 8d       	ldd	r18, Z+31	; 0x1f
   127f8:	30 a1       	ldd	r19, Z+32	; 0x20
   127fa:	41 a1       	ldd	r20, Z+33	; 0x21
   127fc:	52 a1       	ldd	r21, Z+34	; 0x22
   127fe:	68 e0       	ldi	r22, 0x08	; 8
   12800:	8a e1       	ldi	r24, 0x1A	; 26
   12802:	47 dd       	rcall	.-1394   	; 0x12292 <print_tok_val>
   12804:	e9 89       	ldd	r30, Y+17	; 0x11
   12806:	fa 89       	ldd	r31, Y+18	; 0x12
   12808:	23 a1       	ldd	r18, Z+35	; 0x23
   1280a:	30 e0       	ldi	r19, 0x00	; 0
   1280c:	40 e0       	ldi	r20, 0x00	; 0
   1280e:	50 e0       	ldi	r21, 0x00	; 0
   12810:	68 e0       	ldi	r22, 0x08	; 8
   12812:	8b e1       	ldi	r24, 0x1B	; 27
   12814:	3e dd       	rcall	.-1412   	; 0x12292 <print_tok_val>
   12816:	e9 89       	ldd	r30, Y+17	; 0x11
   12818:	fa 89       	ldd	r31, Y+18	; 0x12
   1281a:	24 a1       	ldd	r18, Z+36	; 0x24
   1281c:	35 a1       	ldd	r19, Z+37	; 0x25
   1281e:	40 e0       	ldi	r20, 0x00	; 0
   12820:	50 e0       	ldi	r21, 0x00	; 0
   12822:	68 e0       	ldi	r22, 0x08	; 8
   12824:	8d e1       	ldi	r24, 0x1D	; 29
   12826:	35 dd       	rcall	.-1430   	; 0x12292 <print_tok_val>
   12828:	e9 89       	ldd	r30, Y+17	; 0x11
   1282a:	fa 89       	ldd	r31, Y+18	; 0x12
   1282c:	26 a1       	ldd	r18, Z+38	; 0x26
   1282e:	37 a1       	ldd	r19, Z+39	; 0x27
   12830:	40 a5       	ldd	r20, Z+40	; 0x28
   12832:	51 a5       	ldd	r21, Z+41	; 0x29
   12834:	68 e0       	ldi	r22, 0x08	; 8
   12836:	89 e1       	ldi	r24, 0x19	; 25
   12838:	2c dd       	rcall	.-1448   	; 0x12292 <print_tok_val>
   1283a:	e9 89       	ldd	r30, Y+17	; 0x11
   1283c:	fa 89       	ldd	r31, Y+18	; 0x12
   1283e:	22 a5       	ldd	r18, Z+42	; 0x2a
   12840:	30 e0       	ldi	r19, 0x00	; 0
   12842:	40 e0       	ldi	r20, 0x00	; 0
   12844:	50 e0       	ldi	r21, 0x00	; 0
   12846:	68 e0       	ldi	r22, 0x08	; 8
   12848:	88 e1       	ldi	r24, 0x18	; 24
   1284a:	23 dd       	rcall	.-1466   	; 0x12292 <print_tok_val>
   1284c:	64 e0       	ldi	r22, 0x04	; 4
   1284e:	81 e1       	ldi	r24, 0x11	; 17
   12850:	95 dd       	rcall	.-1238   	; 0x1237c <print_tok>
   12852:	e9 89       	ldd	r30, Y+17	; 0x11
   12854:	fa 89       	ldd	r31, Y+18	; 0x12
   12856:	86 a1       	ldd	r24, Z+38	; 0x26
   12858:	97 a1       	ldd	r25, Z+39	; 0x27
   1285a:	a0 a5       	ldd	r26, Z+40	; 0x28
   1285c:	b1 a5       	ldd	r27, Z+41	; 0x29
   1285e:	01 96       	adiw	r24, 0x01	; 1
   12860:	a1 1d       	adc	r26, r1
   12862:	b1 1d       	adc	r27, r1
   12864:	ed b7       	in	r30, 0x3d	; 61
   12866:	fe b7       	in	r31, 0x3e	; 62
   12868:	84 83       	std	Z+4, r24	; 0x04
   1286a:	95 83       	std	Z+5, r25	; 0x05
   1286c:	a6 83       	std	Z+6, r26	; 0x06
   1286e:	b7 83       	std	Z+7, r27	; 0x07
   12870:	2f ec       	ldi	r18, 0xCF	; 207
   12872:	39 e1       	ldi	r19, 0x19	; 25
   12874:	c9 01       	movw	r24, r18
   12876:	a0 e0       	ldi	r26, 0x00	; 0
   12878:	81 83       	std	Z+1, r24	; 0x01
   1287a:	92 83       	std	Z+2, r25	; 0x02
   1287c:	a3 83       	std	Z+3, r26	; 0x03
   1287e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12882:	60 e0       	ldi	r22, 0x00	; 0
   12884:	81 e1       	ldi	r24, 0x11	; 17
   12886:	7a dd       	rcall	.-1292   	; 0x1237c <print_tok>
   12888:	f8 01       	movw	r30, r16
   1288a:	80 81       	ld	r24, Z
   1288c:	81 30       	cpi	r24, 0x01	; 1
   1288e:	09 f0       	breq	.+2      	; 0x12892 <display_Config+0x314>
   12890:	ad c0       	rjmp	.+346    	; 0x129ec <display_Config+0x46e>
   12892:	27 a1       	ldd	r18, Z+39	; 0x27
   12894:	30 a5       	ldd	r19, Z+40	; 0x28
   12896:	3a 8b       	std	Y+18, r19	; 0x12
   12898:	29 8b       	std	Y+17, r18	; 0x11
   1289a:	c8 01       	movw	r24, r16
   1289c:	07 96       	adiw	r24, 0x07	; 7
   1289e:	ed b7       	in	r30, 0x3d	; 61
   128a0:	fe b7       	in	r31, 0x3e	; 62
   128a2:	95 83       	std	Z+5, r25	; 0x05
   128a4:	84 83       	std	Z+4, r24	; 0x04
   128a6:	2b 85       	ldd	r18, Y+11	; 0x0b
   128a8:	3c 85       	ldd	r19, Y+12	; 0x0c
   128aa:	4d 85       	ldd	r20, Y+13	; 0x0d
   128ac:	21 83       	std	Z+1, r18	; 0x01
   128ae:	32 83       	std	Z+2, r19	; 0x02
   128b0:	43 83       	std	Z+3, r20	; 0x03
   128b2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   128b6:	e9 89       	ldd	r30, Y+17	; 0x11
   128b8:	fa 89       	ldd	r31, Y+18	; 0x12
   128ba:	80 81       	ld	r24, Z
   128bc:	90 e0       	ldi	r25, 0x00	; 0
   128be:	ed b7       	in	r30, 0x3d	; 61
   128c0:	fe b7       	in	r31, 0x3e	; 62
   128c2:	95 83       	std	Z+5, r25	; 0x05
   128c4:	84 83       	std	Z+4, r24	; 0x04
   128c6:	2e 85       	ldd	r18, Y+14	; 0x0e
   128c8:	3f 85       	ldd	r19, Y+15	; 0x0f
   128ca:	48 89       	ldd	r20, Y+16	; 0x10
   128cc:	21 83       	std	Z+1, r18	; 0x01
   128ce:	32 83       	std	Z+2, r19	; 0x02
   128d0:	43 83       	std	Z+3, r20	; 0x03
   128d2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   128d6:	64 e0       	ldi	r22, 0x04	; 4
   128d8:	85 e1       	ldi	r24, 0x15	; 21
   128da:	50 dd       	rcall	.-1376   	; 0x1237c <print_tok>
   128dc:	e9 89       	ldd	r30, Y+17	; 0x11
   128de:	fa 89       	ldd	r31, Y+18	; 0x12
   128e0:	20 81       	ld	r18, Z
   128e2:	30 e0       	ldi	r19, 0x00	; 0
   128e4:	40 e0       	ldi	r20, 0x00	; 0
   128e6:	50 e0       	ldi	r21, 0x00	; 0
   128e8:	68 e0       	ldi	r22, 0x08	; 8
   128ea:	81 e0       	ldi	r24, 0x01	; 1
   128ec:	d2 dc       	rcall	.-1628   	; 0x12292 <print_tok_val>
   128ee:	e9 89       	ldd	r30, Y+17	; 0x11
   128f0:	fa 89       	ldd	r31, Y+18	; 0x12
   128f2:	21 81       	ldd	r18, Z+1	; 0x01
   128f4:	30 e0       	ldi	r19, 0x00	; 0
   128f6:	40 e0       	ldi	r20, 0x00	; 0
   128f8:	50 e0       	ldi	r21, 0x00	; 0
   128fa:	68 e0       	ldi	r22, 0x08	; 8
   128fc:	8f e1       	ldi	r24, 0x1F	; 31
   128fe:	c9 dc       	rcall	.-1646   	; 0x12292 <print_tok_val>
   12900:	e9 89       	ldd	r30, Y+17	; 0x11
   12902:	fa 89       	ldd	r31, Y+18	; 0x12
   12904:	42 81       	ldd	r20, Z+2	; 0x02
   12906:	53 81       	ldd	r21, Z+3	; 0x03
   12908:	68 e0       	ldi	r22, 0x08	; 8
   1290a:	82 e1       	ldi	r24, 0x12	; 18
   1290c:	02 dd       	rcall	.-1532   	; 0x12312 <print_tok_str>
   1290e:	64 e0       	ldi	r22, 0x04	; 4
   12910:	81 e1       	ldi	r24, 0x11	; 17
   12912:	34 dd       	rcall	.-1432   	; 0x1237c <print_tok>
   12914:	64 e0       	ldi	r22, 0x04	; 4
   12916:	89 e0       	ldi	r24, 0x09	; 9
   12918:	31 dd       	rcall	.-1438   	; 0x1237c <print_tok>
   1291a:	e9 89       	ldd	r30, Y+17	; 0x11
   1291c:	fa 89       	ldd	r31, Y+18	; 0x12
   1291e:	24 81       	ldd	r18, Z+4	; 0x04
   12920:	35 81       	ldd	r19, Z+5	; 0x05
   12922:	40 e0       	ldi	r20, 0x00	; 0
   12924:	50 e0       	ldi	r21, 0x00	; 0
   12926:	68 e0       	ldi	r22, 0x08	; 8
   12928:	87 e1       	ldi	r24, 0x17	; 23
   1292a:	b3 dc       	rcall	.-1690   	; 0x12292 <print_tok_val>
   1292c:	64 e0       	ldi	r22, 0x04	; 4
   1292e:	81 e1       	ldi	r24, 0x11	; 17
   12930:	25 dd       	rcall	.-1462   	; 0x1237c <print_tok>
   12932:	a1 14       	cp	r10, r1
   12934:	b1 04       	cpc	r11, r1
   12936:	91 f1       	breq	.+100    	; 0x1299c <display_Config+0x41e>
   12938:	64 e0       	ldi	r22, 0x04	; 4
   1293a:	84 e1       	ldi	r24, 0x14	; 20
   1293c:	1f dd       	rcall	.-1474   	; 0x1237c <print_tok>
   1293e:	e9 89       	ldd	r30, Y+17	; 0x11
   12940:	fa 89       	ldd	r31, Y+18	; 0x12
   12942:	26 81       	ldd	r18, Z+6	; 0x06
   12944:	37 81       	ldd	r19, Z+7	; 0x07
   12946:	03 2e       	mov	r0, r19
   12948:	00 0c       	add	r0, r0
   1294a:	44 0b       	sbc	r20, r20
   1294c:	55 0b       	sbc	r21, r21
   1294e:	68 e0       	ldi	r22, 0x08	; 8
   12950:	88 e0       	ldi	r24, 0x08	; 8
   12952:	9f dc       	rcall	.-1730   	; 0x12292 <print_tok_val>
   12954:	e9 89       	ldd	r30, Y+17	; 0x11
   12956:	fa 89       	ldd	r31, Y+18	; 0x12
   12958:	20 85       	ldd	r18, Z+8	; 0x08
   1295a:	31 85       	ldd	r19, Z+9	; 0x09
   1295c:	03 2e       	mov	r0, r19
   1295e:	00 0c       	add	r0, r0
   12960:	44 0b       	sbc	r20, r20
   12962:	55 0b       	sbc	r21, r21
   12964:	68 e0       	ldi	r22, 0x08	; 8
   12966:	82 e2       	ldi	r24, 0x22	; 34
   12968:	94 dc       	rcall	.-1752   	; 0x12292 <print_tok_val>
   1296a:	e9 89       	ldd	r30, Y+17	; 0x11
   1296c:	fa 89       	ldd	r31, Y+18	; 0x12
   1296e:	22 85       	ldd	r18, Z+10	; 0x0a
   12970:	33 85       	ldd	r19, Z+11	; 0x0b
   12972:	03 2e       	mov	r0, r19
   12974:	00 0c       	add	r0, r0
   12976:	44 0b       	sbc	r20, r20
   12978:	55 0b       	sbc	r21, r21
   1297a:	68 e0       	ldi	r22, 0x08	; 8
   1297c:	86 e1       	ldi	r24, 0x16	; 22
   1297e:	89 dc       	rcall	.-1774   	; 0x12292 <print_tok_val>
   12980:	e9 89       	ldd	r30, Y+17	; 0x11
   12982:	fa 89       	ldd	r31, Y+18	; 0x12
   12984:	24 85       	ldd	r18, Z+12	; 0x0c
   12986:	35 85       	ldd	r19, Z+13	; 0x0d
   12988:	03 2e       	mov	r0, r19
   1298a:	00 0c       	add	r0, r0
   1298c:	44 0b       	sbc	r20, r20
   1298e:	55 0b       	sbc	r21, r21
   12990:	68 e0       	ldi	r22, 0x08	; 8
   12992:	8d e0       	ldi	r24, 0x0D	; 13
   12994:	7e dc       	rcall	.-1796   	; 0x12292 <print_tok_val>
   12996:	64 e0       	ldi	r22, 0x04	; 4
   12998:	81 e1       	ldi	r24, 0x11	; 17
   1299a:	f0 dc       	rcall	.-1568   	; 0x1237c <print_tok>
   1299c:	e9 89       	ldd	r30, Y+17	; 0x11
   1299e:	fa 89       	ldd	r31, Y+18	; 0x12
   129a0:	44 85       	ldd	r20, Z+12	; 0x0c
   129a2:	55 85       	ldd	r21, Z+13	; 0x0d
   129a4:	20 85       	ldd	r18, Z+8	; 0x08
   129a6:	31 85       	ldd	r19, Z+9	; 0x09
   129a8:	42 9f       	mul	r20, r18
   129aa:	c0 01       	movw	r24, r0
   129ac:	43 9f       	mul	r20, r19
   129ae:	90 0d       	add	r25, r0
   129b0:	52 9f       	mul	r21, r18
   129b2:	90 0d       	add	r25, r0
   129b4:	11 24       	eor	r1, r1
   129b6:	42 85       	ldd	r20, Z+10	; 0x0a
   129b8:	53 85       	ldd	r21, Z+11	; 0x0b
   129ba:	84 9f       	mul	r24, r20
   129bc:	90 01       	movw	r18, r0
   129be:	85 9f       	mul	r24, r21
   129c0:	30 0d       	add	r19, r0
   129c2:	94 9f       	mul	r25, r20
   129c4:	30 0d       	add	r19, r0
   129c6:	11 24       	eor	r1, r1
   129c8:	c9 01       	movw	r24, r18
   129ca:	33 0f       	add	r19, r19
   129cc:	aa 0b       	sbc	r26, r26
   129ce:	bb 0b       	sbc	r27, r27
   129d0:	ed b7       	in	r30, 0x3d	; 61
   129d2:	fe b7       	in	r31, 0x3e	; 62
   129d4:	84 83       	std	Z+4, r24	; 0x04
   129d6:	95 83       	std	Z+5, r25	; 0x05
   129d8:	a6 83       	std	Z+6, r26	; 0x06
   129da:	b7 83       	std	Z+7, r27	; 0x07
   129dc:	21 82       	std	Z+1, r2	; 0x01
   129de:	32 82       	std	Z+2, r3	; 0x02
   129e0:	43 82       	std	Z+3, r4	; 0x03
   129e2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   129e6:	60 e0       	ldi	r22, 0x00	; 0
   129e8:	81 e1       	ldi	r24, 0x11	; 17
   129ea:	c8 dc       	rcall	.-1648   	; 0x1237c <print_tok>
   129ec:	f8 01       	movw	r30, r16
   129ee:	80 81       	ld	r24, Z
   129f0:	84 30       	cpi	r24, 0x04	; 4
   129f2:	c9 f4       	brne	.+50     	; 0x12a26 <display_Config+0x4a8>
   129f4:	27 a1       	ldd	r18, Z+39	; 0x27
   129f6:	30 a5       	ldd	r19, Z+40	; 0x28
   129f8:	3a 8b       	std	Y+18, r19	; 0x12
   129fa:	29 8b       	std	Y+17, r18	; 0x11
   129fc:	60 e0       	ldi	r22, 0x00	; 0
   129fe:	80 e2       	ldi	r24, 0x20	; 32
   12a00:	bd dc       	rcall	.-1670   	; 0x1237c <print_tok>
   12a02:	64 e0       	ldi	r22, 0x04	; 4
   12a04:	89 e0       	ldi	r24, 0x09	; 9
   12a06:	ba dc       	rcall	.-1676   	; 0x1237c <print_tok>
   12a08:	e9 89       	ldd	r30, Y+17	; 0x11
   12a0a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a0c:	20 81       	ld	r18, Z
   12a0e:	30 e0       	ldi	r19, 0x00	; 0
   12a10:	40 e0       	ldi	r20, 0x00	; 0
   12a12:	50 e0       	ldi	r21, 0x00	; 0
   12a14:	68 e0       	ldi	r22, 0x08	; 8
   12a16:	81 e0       	ldi	r24, 0x01	; 1
   12a18:	3c dc       	rcall	.-1928   	; 0x12292 <print_tok_val>
   12a1a:	64 e0       	ldi	r22, 0x04	; 4
   12a1c:	81 e1       	ldi	r24, 0x11	; 17
   12a1e:	ae dc       	rcall	.-1700   	; 0x1237c <print_tok>
   12a20:	60 e0       	ldi	r22, 0x00	; 0
   12a22:	81 e1       	ldi	r24, 0x11	; 17
   12a24:	ab dc       	rcall	.-1706   	; 0x1237c <print_tok>
   12a26:	28 85       	ldd	r18, Y+8	; 0x08
   12a28:	39 85       	ldd	r19, Y+9	; 0x09
   12a2a:	4a 85       	ldd	r20, Y+10	; 0x0a
   12a2c:	ed b7       	in	r30, 0x3d	; 61
   12a2e:	fe b7       	in	r31, 0x3e	; 62
   12a30:	21 83       	std	Z+1, r18	; 0x01
   12a32:	32 83       	std	Z+2, r19	; 0x02
   12a34:	43 83       	std	Z+3, r20	; 0x03
   12a36:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12a3a:	05 5d       	subi	r16, 0xD5	; 213
   12a3c:	1f 4f       	sbci	r17, 0xFF	; 255
   12a3e:	28 ef       	ldi	r18, 0xF8	; 248
   12a40:	30 e2       	ldi	r19, 0x20	; 32
   12a42:	20 17       	cp	r18, r16
   12a44:	31 07       	cpc	r19, r17
   12a46:	09 f0       	breq	.+2      	; 0x12a4a <display_Config+0x4cc>
   12a48:	df cd       	rjmp	.-1090   	; 0x12608 <display_Config+0x8a>
   12a4a:	8e e8       	ldi	r24, 0x8E	; 142
   12a4c:	99 e1       	ldi	r25, 0x19	; 25
   12a4e:	a0 e0       	ldi	r26, 0x00	; 0
   12a50:	ed b7       	in	r30, 0x3d	; 61
   12a52:	fe b7       	in	r31, 0x3e	; 62
   12a54:	81 83       	std	Z+1, r24	; 0x01
   12a56:	92 83       	std	Z+2, r25	; 0x02
   12a58:	a3 83       	std	Z+3, r26	; 0x03
   12a5a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12a5e:	62 96       	adiw	r28, 0x12	; 18
   12a60:	0f b6       	in	r0, 0x3f	; 63
   12a62:	f8 94       	cli
   12a64:	de bf       	out	0x3e, r29	; 62
   12a66:	0f be       	out	0x3f, r0	; 63
   12a68:	cd bf       	out	0x3d, r28	; 61
   12a6a:	df 91       	pop	r29
   12a6c:	cf 91       	pop	r28
   12a6e:	1f 91       	pop	r17
   12a70:	0f 91       	pop	r16
   12a72:	ef 90       	pop	r14
   12a74:	df 90       	pop	r13
   12a76:	cf 90       	pop	r12
   12a78:	bf 90       	pop	r11
   12a7a:	af 90       	pop	r10
   12a7c:	8f 90       	pop	r8
   12a7e:	7f 90       	pop	r7
   12a80:	6f 90       	pop	r6
   12a82:	4f 90       	pop	r4
   12a84:	3f 90       	pop	r3
   12a86:	2f 90       	pop	r2
   12a88:	08 95       	ret

00012a8a <find_type>:
   12a8a:	e4 ef       	ldi	r30, 0xF4	; 244
   12a8c:	fe e1       	ldi	r31, 0x1E	; 30
   12a8e:	20 e0       	ldi	r18, 0x00	; 0
   12a90:	30 e0       	ldi	r19, 0x00	; 0
   12a92:	40 81       	ld	r20, Z
   12a94:	50 e0       	ldi	r21, 0x00	; 0
   12a96:	48 17       	cp	r20, r24
   12a98:	59 07       	cpc	r21, r25
   12a9a:	49 f0       	breq	.+18     	; 0x12aae <find_type+0x24>
   12a9c:	2f 5f       	subi	r18, 0xFF	; 255
   12a9e:	3f 4f       	sbci	r19, 0xFF	; 255
   12aa0:	bb 96       	adiw	r30, 0x2b	; 43
   12aa2:	2c 30       	cpi	r18, 0x0C	; 12
   12aa4:	31 05       	cpc	r19, r1
   12aa6:	a9 f7       	brne	.-22     	; 0x12a92 <find_type+0x8>
   12aa8:	8f ef       	ldi	r24, 0xFF	; 255
   12aaa:	9f ef       	ldi	r25, 0xFF	; 255
   12aac:	08 95       	ret
   12aae:	c9 01       	movw	r24, r18
   12ab0:	08 95       	ret

00012ab2 <count_drive_types>:
   12ab2:	28 2f       	mov	r18, r24
   12ab4:	e4 ef       	ldi	r30, 0xF4	; 244
   12ab6:	fe e1       	ldi	r31, 0x1E	; 30
   12ab8:	80 e0       	ldi	r24, 0x00	; 0
   12aba:	90 e0       	ldi	r25, 0x00	; 0
   12abc:	30 81       	ld	r19, Z
   12abe:	32 13       	cpse	r19, r18
   12ac0:	01 c0       	rjmp	.+2      	; 0x12ac4 <count_drive_types+0x12>
   12ac2:	01 96       	adiw	r24, 0x01	; 1
   12ac4:	bb 96       	adiw	r30, 0x2b	; 43
   12ac6:	30 e2       	ldi	r19, 0x20	; 32
   12ac8:	e8 3f       	cpi	r30, 0xF8	; 248
   12aca:	f3 07       	cpc	r31, r19
   12acc:	b9 f7       	brne	.-18     	; 0x12abc <count_drive_types+0xa>
   12ace:	08 95       	ret

00012ad0 <type_to_str>:
   12ad0:	00 97       	sbiw	r24, 0x00	; 0
   12ad2:	59 f0       	breq	.+22     	; 0x12aea <type_to_str+0x1a>
   12ad4:	81 30       	cpi	r24, 0x01	; 1
   12ad6:	91 05       	cpc	r25, r1
   12ad8:	59 f0       	breq	.+22     	; 0x12af0 <type_to_str+0x20>
   12ada:	83 30       	cpi	r24, 0x03	; 3
   12adc:	91 05       	cpc	r25, r1
   12ade:	59 f0       	breq	.+22     	; 0x12af6 <type_to_str+0x26>
   12ae0:	04 97       	sbiw	r24, 0x04	; 4
   12ae2:	61 f0       	breq	.+24     	; 0x12afc <type_to_str+0x2c>
   12ae4:	88 e2       	ldi	r24, 0x28	; 40
   12ae6:	9e e0       	ldi	r25, 0x0E	; 14
   12ae8:	08 95       	ret
   12aea:	8e ef       	ldi	r24, 0xFE	; 254
   12aec:	9d e0       	ldi	r25, 0x0D	; 13
   12aee:	08 95       	ret
   12af0:	86 e0       	ldi	r24, 0x06	; 6
   12af2:	9e e0       	ldi	r25, 0x0E	; 14
   12af4:	08 95       	ret
   12af6:	8e e1       	ldi	r24, 0x1E	; 30
   12af8:	9e e0       	ldi	r25, 0x0E	; 14
   12afa:	08 95       	ret
   12afc:	81 e1       	ldi	r24, 0x11	; 17
   12afe:	9e e0       	ldi	r25, 0x0E	; 14
   12b00:	08 95       	ret

00012b02 <find_free>:
   12b02:	80 e0       	ldi	r24, 0x00	; 0
   12b04:	90 e0       	ldi	r25, 0x00	; 0
   12b06:	c1 cf       	rjmp	.-126    	; 0x12a8a <find_type>
   12b08:	08 95       	ret

00012b0a <find_device>:
   12b0a:	9b 01       	movw	r18, r22
   12b0c:	20 52       	subi	r18, 0x20	; 32
   12b0e:	31 09       	sbc	r19, r1
   12b10:	2f 35       	cpi	r18, 0x5F	; 95
   12b12:	31 05       	cpc	r19, r1
   12b14:	f8 f4       	brcc	.+62     	; 0x12b54 <find_device+0x4a>
   12b16:	64 17       	cp	r22, r20
   12b18:	75 07       	cpc	r23, r21
   12b1a:	e4 f0       	brlt	.+56     	; 0x12b54 <find_device+0x4a>
   12b1c:	9a 01       	movw	r18, r20
   12b1e:	22 5e       	subi	r18, 0xE2	; 226
   12b20:	3f 4f       	sbci	r19, 0xFF	; 255
   12b22:	26 17       	cp	r18, r22
   12b24:	37 07       	cpc	r19, r23
   12b26:	b4 f0       	brlt	.+44     	; 0x12b54 <find_device+0x4a>
   12b28:	64 1b       	sub	r22, r20
   12b2a:	75 0b       	sbc	r23, r21
   12b2c:	e4 ef       	ldi	r30, 0xF4	; 244
   12b2e:	fe e1       	ldi	r31, 0x1E	; 30
   12b30:	20 e0       	ldi	r18, 0x00	; 0
   12b32:	30 e0       	ldi	r19, 0x00	; 0
   12b34:	40 81       	ld	r20, Z
   12b36:	50 e0       	ldi	r21, 0x00	; 0
   12b38:	48 17       	cp	r20, r24
   12b3a:	59 07       	cpc	r21, r25
   12b3c:	29 f4       	brne	.+10     	; 0x12b48 <find_device+0x3e>
   12b3e:	41 81       	ldd	r20, Z+1	; 0x01
   12b40:	50 e0       	ldi	r21, 0x00	; 0
   12b42:	64 17       	cp	r22, r20
   12b44:	75 07       	cpc	r23, r21
   12b46:	49 f0       	breq	.+18     	; 0x12b5a <find_device+0x50>
   12b48:	2f 5f       	subi	r18, 0xFF	; 255
   12b4a:	3f 4f       	sbci	r19, 0xFF	; 255
   12b4c:	bb 96       	adiw	r30, 0x2b	; 43
   12b4e:	2c 30       	cpi	r18, 0x0C	; 12
   12b50:	31 05       	cpc	r19, r1
   12b52:	81 f7       	brne	.-32     	; 0x12b34 <find_device+0x2a>
   12b54:	8f ef       	ldi	r24, 0xFF	; 255
   12b56:	9f ef       	ldi	r25, 0xFF	; 255
   12b58:	08 95       	ret
   12b5a:	c9 01       	movw	r24, r18
   12b5c:	08 95       	ret

00012b5e <set_active_device>:
   12b5e:	a9 e0       	ldi	r26, 0x09	; 9
   12b60:	b0 e0       	ldi	r27, 0x00	; 0
   12b62:	e5 eb       	ldi	r30, 0xB5	; 181
   12b64:	f5 e9       	ldi	r31, 0x95	; 149
   12b66:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
   12b6a:	8f 3f       	cpi	r24, 0xFF	; 255
   12b6c:	2f ef       	ldi	r18, 0xFF	; 255
   12b6e:	92 07       	cpc	r25, r18
   12b70:	09 f4       	brne	.+2      	; 0x12b74 <set_active_device+0x16>
   12b72:	d0 c0       	rjmp	.+416    	; 0x12d14 <set_active_device+0x1b6>
   12b74:	ec 01       	movw	r28, r24
   12b76:	0c 97       	sbiw	r24, 0x0c	; 12
   12b78:	b0 f0       	brcs	.+44     	; 0x12ba6 <set_active_device+0x48>
   12b7a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12b7e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12b82:	c9 01       	movw	r24, r18
   12b84:	81 70       	andi	r24, 0x01	; 1
   12b86:	99 27       	eor	r25, r25
   12b88:	20 ff       	sbrs	r18, 0
   12b8a:	c6 c0       	rjmp	.+396    	; 0x12d18 <set_active_device+0x1ba>
   12b8c:	ed b7       	in	r30, 0x3d	; 61
   12b8e:	fe b7       	in	r31, 0x3e	; 62
   12b90:	d5 83       	std	Z+5, r29	; 0x05
   12b92:	c4 83       	std	Z+4, r28	; 0x04
   12b94:	89 e6       	ldi	r24, 0x69	; 105
   12b96:	99 e1       	ldi	r25, 0x19	; 25
   12b98:	a0 e0       	ldi	r26, 0x00	; 0
   12b9a:	81 83       	std	Z+1, r24	; 0x01
   12b9c:	92 83       	std	Z+2, r25	; 0x02
   12b9e:	a3 83       	std	Z+3, r26	; 0x03
   12ba0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12ba4:	b7 c0       	rjmp	.+366    	; 0x12d14 <set_active_device+0x1b6>
   12ba6:	8b e2       	ldi	r24, 0x2B	; 43
   12ba8:	8c 9f       	mul	r24, r28
   12baa:	f0 01       	movw	r30, r0
   12bac:	8d 9f       	mul	r24, r29
   12bae:	f0 0d       	add	r31, r0
   12bb0:	11 24       	eor	r1, r1
   12bb2:	ec 50       	subi	r30, 0x0C	; 12
   12bb4:	f1 4e       	sbci	r31, 0xE1	; 225
   12bb6:	21 81       	ldd	r18, Z+1	; 0x01
   12bb8:	2f 31       	cpi	r18, 0x1F	; 31
   12bba:	d0 f0       	brcs	.+52     	; 0x12bf0 <set_active_device+0x92>
   12bbc:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12bc0:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12bc4:	ca 01       	movw	r24, r20
   12bc6:	81 70       	andi	r24, 0x01	; 1
   12bc8:	99 27       	eor	r25, r25
   12bca:	40 ff       	sbrs	r20, 0
   12bcc:	a5 c0       	rjmp	.+330    	; 0x12d18 <set_active_device+0x1ba>
   12bce:	82 2f       	mov	r24, r18
   12bd0:	90 e0       	ldi	r25, 0x00	; 0
   12bd2:	ed b7       	in	r30, 0x3d	; 61
   12bd4:	fe b7       	in	r31, 0x3e	; 62
   12bd6:	97 83       	std	Z+7, r25	; 0x07
   12bd8:	86 83       	std	Z+6, r24	; 0x06
   12bda:	d5 83       	std	Z+5, r29	; 0x05
   12bdc:	c4 83       	std	Z+4, r28	; 0x04
   12bde:	80 e3       	ldi	r24, 0x30	; 48
   12be0:	99 e1       	ldi	r25, 0x19	; 25
   12be2:	a0 e0       	ldi	r26, 0x00	; 0
   12be4:	81 83       	std	Z+1, r24	; 0x01
   12be6:	92 83       	std	Z+2, r25	; 0x02
   12be8:	a3 83       	std	Z+3, r26	; 0x03
   12bea:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12bee:	92 c0       	rjmp	.+292    	; 0x12d14 <set_active_device+0x1b6>
   12bf0:	20 81       	ld	r18, Z
   12bf2:	02 2f       	mov	r16, r18
   12bf4:	10 e0       	ldi	r17, 0x00	; 0
   12bf6:	87 a1       	ldd	r24, Z+39	; 0x27
   12bf8:	90 a5       	ldd	r25, Z+40	; 0x28
   12bfa:	00 97       	sbiw	r24, 0x00	; 0
   12bfc:	b1 f4       	brne	.+44     	; 0x12c2a <set_active_device+0xcc>
   12bfe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c02:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c06:	c9 01       	movw	r24, r18
   12c08:	81 70       	andi	r24, 0x01	; 1
   12c0a:	99 27       	eor	r25, r25
   12c0c:	20 ff       	sbrs	r18, 0
   12c0e:	84 c0       	rjmp	.+264    	; 0x12d18 <set_active_device+0x1ba>
   12c10:	c8 01       	movw	r24, r16
   12c12:	5e df       	rcall	.-324    	; 0x12ad0 <type_to_str>
   12c14:	ed b7       	in	r30, 0x3d	; 61
   12c16:	fe b7       	in	r31, 0x3e	; 62
   12c18:	91 87       	std	Z+9, r25	; 0x09
   12c1a:	80 87       	std	Z+8, r24	; 0x08
   12c1c:	17 83       	std	Z+7, r17	; 0x07
   12c1e:	06 83       	std	Z+6, r16	; 0x06
   12c20:	d5 83       	std	Z+5, r29	; 0x05
   12c22:	c4 83       	std	Z+4, r28	; 0x04
   12c24:	8b ef       	ldi	r24, 0xFB	; 251
   12c26:	98 e1       	ldi	r25, 0x18	; 24
   12c28:	6f c0       	rjmp	.+222    	; 0x12d08 <set_active_device+0x1aa>
   12c2a:	01 15       	cp	r16, r1
   12c2c:	11 05       	cpc	r17, r1
   12c2e:	b9 f4       	brne	.+46     	; 0x12c5e <set_active_device+0x100>
   12c30:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c34:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c38:	c9 01       	movw	r24, r18
   12c3a:	81 70       	andi	r24, 0x01	; 1
   12c3c:	99 27       	eor	r25, r25
   12c3e:	20 ff       	sbrs	r18, 0
   12c40:	6b c0       	rjmp	.+214    	; 0x12d18 <set_active_device+0x1ba>
   12c42:	80 e0       	ldi	r24, 0x00	; 0
   12c44:	90 e0       	ldi	r25, 0x00	; 0
   12c46:	44 df       	rcall	.-376    	; 0x12ad0 <type_to_str>
   12c48:	ed b7       	in	r30, 0x3d	; 61
   12c4a:	fe b7       	in	r31, 0x3e	; 62
   12c4c:	91 87       	std	Z+9, r25	; 0x09
   12c4e:	80 87       	std	Z+8, r24	; 0x08
   12c50:	17 82       	std	Z+7, r1	; 0x07
   12c52:	16 82       	std	Z+6, r1	; 0x06
   12c54:	d5 83       	std	Z+5, r29	; 0x05
   12c56:	c4 83       	std	Z+4, r28	; 0x04
   12c58:	86 ec       	ldi	r24, 0xC6	; 198
   12c5a:	98 e1       	ldi	r25, 0x18	; 24
   12c5c:	55 c0       	rjmp	.+170    	; 0x12d08 <set_active_device+0x1aa>
   12c5e:	04 30       	cpi	r16, 0x04	; 4
   12c60:	11 05       	cpc	r17, r1
   12c62:	29 f4       	brne	.+10     	; 0x12c6e <set_active_device+0x110>
   12c64:	90 93 6b 19 	sts	0x196B, r25	; 0x80196b <PRINTERp+0x1>
   12c68:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <PRINTERp>
   12c6c:	35 c0       	rjmp	.+106    	; 0x12cd8 <set_active_device+0x17a>
   12c6e:	2d 7f       	andi	r18, 0xFD	; 253
   12c70:	21 30       	cpi	r18, 0x01	; 1
   12c72:	a9 f5       	brne	.+106    	; 0x12cde <set_active_device+0x180>
   12c74:	21 a5       	ldd	r18, Z+41	; 0x29
   12c76:	32 a5       	ldd	r19, Z+42	; 0x2a
   12c78:	21 15       	cp	r18, r1
   12c7a:	31 05       	cpc	r19, r1
   12c7c:	b1 f4       	brne	.+44     	; 0x12caa <set_active_device+0x14c>
   12c7e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c82:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c86:	c9 01       	movw	r24, r18
   12c88:	81 70       	andi	r24, 0x01	; 1
   12c8a:	99 27       	eor	r25, r25
   12c8c:	20 ff       	sbrs	r18, 0
   12c8e:	44 c0       	rjmp	.+136    	; 0x12d18 <set_active_device+0x1ba>
   12c90:	c8 01       	movw	r24, r16
   12c92:	1e df       	rcall	.-452    	; 0x12ad0 <type_to_str>
   12c94:	ed b7       	in	r30, 0x3d	; 61
   12c96:	fe b7       	in	r31, 0x3e	; 62
   12c98:	91 87       	std	Z+9, r25	; 0x09
   12c9a:	80 87       	std	Z+8, r24	; 0x08
   12c9c:	17 83       	std	Z+7, r17	; 0x07
   12c9e:	06 83       	std	Z+6, r16	; 0x06
   12ca0:	d5 83       	std	Z+5, r29	; 0x05
   12ca2:	c4 83       	std	Z+4, r28	; 0x04
   12ca4:	8e e8       	ldi	r24, 0x8E	; 142
   12ca6:	98 e1       	ldi	r25, 0x18	; 24
   12ca8:	2f c0       	rjmp	.+94     	; 0x12d08 <set_active_device+0x1aa>
   12caa:	01 30       	cpi	r16, 0x01	; 1
   12cac:	11 05       	cpc	r17, r1
   12cae:	49 f4       	brne	.+18     	; 0x12cc2 <set_active_device+0x164>
   12cb0:	90 93 65 19 	sts	0x1965, r25	; 0x801965 <AMIGOp+0x1>
   12cb4:	80 93 64 19 	sts	0x1964, r24	; 0x801964 <AMIGOp>
   12cb8:	30 93 63 19 	sts	0x1963, r19	; 0x801963 <AMIGOs+0x1>
   12cbc:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <AMIGOs>
   12cc0:	0b c0       	rjmp	.+22     	; 0x12cd8 <set_active_device+0x17a>
   12cc2:	03 30       	cpi	r16, 0x03	; 3
   12cc4:	11 05       	cpc	r17, r1
   12cc6:	59 f4       	brne	.+22     	; 0x12cde <set_active_device+0x180>
   12cc8:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <SS80p+0x1>
   12ccc:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <SS80p>
   12cd0:	30 93 67 19 	sts	0x1967, r19	; 0x801967 <SS80s+0x1>
   12cd4:	20 93 66 19 	sts	0x1966, r18	; 0x801966 <SS80s>
   12cd8:	81 e0       	ldi	r24, 0x01	; 1
   12cda:	90 e0       	ldi	r25, 0x00	; 0
   12cdc:	1d c0       	rjmp	.+58     	; 0x12d18 <set_active_device+0x1ba>
   12cde:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12ce2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12ce6:	c9 01       	movw	r24, r18
   12ce8:	81 70       	andi	r24, 0x01	; 1
   12cea:	99 27       	eor	r25, r25
   12cec:	20 ff       	sbrs	r18, 0
   12cee:	14 c0       	rjmp	.+40     	; 0x12d18 <set_active_device+0x1ba>
   12cf0:	c8 01       	movw	r24, r16
   12cf2:	ee de       	rcall	.-548    	; 0x12ad0 <type_to_str>
   12cf4:	ed b7       	in	r30, 0x3d	; 61
   12cf6:	fe b7       	in	r31, 0x3e	; 62
   12cf8:	91 87       	std	Z+9, r25	; 0x09
   12cfa:	80 87       	std	Z+8, r24	; 0x08
   12cfc:	17 83       	std	Z+7, r17	; 0x07
   12cfe:	06 83       	std	Z+6, r16	; 0x06
   12d00:	d5 83       	std	Z+5, r29	; 0x05
   12d02:	c4 83       	std	Z+4, r28	; 0x04
   12d04:	83 e6       	ldi	r24, 0x63	; 99
   12d06:	98 e1       	ldi	r25, 0x18	; 24
   12d08:	a0 e0       	ldi	r26, 0x00	; 0
   12d0a:	81 83       	std	Z+1, r24	; 0x01
   12d0c:	92 83       	std	Z+2, r25	; 0x02
   12d0e:	a3 83       	std	Z+3, r26	; 0x03
   12d10:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12d14:	80 e0       	ldi	r24, 0x00	; 0
   12d16:	90 e0       	ldi	r25, 0x00	; 0
   12d18:	cd b7       	in	r28, 0x3d	; 61
   12d1a:	de b7       	in	r29, 0x3e	; 62
   12d1c:	29 96       	adiw	r28, 0x09	; 9
   12d1e:	e4 e0       	ldi	r30, 0x04	; 4
   12d20:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00012d24 <SS80_Set_Defaults>:
   12d24:	0f 93       	push	r16
   12d26:	1f 93       	push	r17
   12d28:	cf 93       	push	r28
   12d2a:	df 93       	push	r29
   12d2c:	ec 01       	movw	r28, r24
   12d2e:	82 e0       	ldi	r24, 0x02	; 2
   12d30:	90 e0       	ldi	r25, 0x00	; 0
   12d32:	ab de       	rcall	.-682    	; 0x12a8a <find_type>
   12d34:	97 fd       	sbrc	r25, 7
   12d36:	6b c0       	rjmp	.+214    	; 0x12e0e <SS80_Set_Defaults+0xea>
   12d38:	2b e2       	ldi	r18, 0x2B	; 43
   12d3a:	2c 9f       	mul	r18, r28
   12d3c:	f0 01       	movw	r30, r0
   12d3e:	2d 9f       	mul	r18, r29
   12d40:	f0 0d       	add	r31, r0
   12d42:	11 24       	eor	r1, r1
   12d44:	ec 50       	subi	r30, 0x0C	; 12
   12d46:	f1 4e       	sbci	r31, 0xE1	; 225
   12d48:	c7 a1       	ldd	r28, Z+39	; 0x27
   12d4a:	d0 a5       	ldd	r29, Z+40	; 0x28
   12d4c:	28 9f       	mul	r18, r24
   12d4e:	f0 01       	movw	r30, r0
   12d50:	29 9f       	mul	r18, r25
   12d52:	f0 0d       	add	r31, r0
   12d54:	11 24       	eor	r1, r1
   12d56:	ec 50       	subi	r30, 0x0C	; 12
   12d58:	f1 4e       	sbci	r31, 0xE1	; 225
   12d5a:	07 a1       	ldd	r16, Z+39	; 0x27
   12d5c:	10 a5       	ldd	r17, Z+40	; 0x28
   12d5e:	f8 01       	movw	r30, r16
   12d60:	80 81       	ld	r24, Z
   12d62:	88 83       	st	Y, r24
   12d64:	81 81       	ldd	r24, Z+1	; 0x01
   12d66:	89 83       	std	Y+1, r24	; 0x01
   12d68:	82 81       	ldd	r24, Z+2	; 0x02
   12d6a:	93 81       	ldd	r25, Z+3	; 0x03
   12d6c:	0e 94 1f 30 	call	0x603e	; 0x603e <stralloc>
   12d70:	9b 83       	std	Y+3, r25	; 0x03
   12d72:	8a 83       	std	Y+2, r24	; 0x02
   12d74:	f8 01       	movw	r30, r16
   12d76:	84 81       	ldd	r24, Z+4	; 0x04
   12d78:	95 81       	ldd	r25, Z+5	; 0x05
   12d7a:	9d 83       	std	Y+5, r25	; 0x05
   12d7c:	8c 83       	std	Y+4, r24	; 0x04
   12d7e:	86 81       	ldd	r24, Z+6	; 0x06
   12d80:	97 81       	ldd	r25, Z+7	; 0x07
   12d82:	9f 83       	std	Y+7, r25	; 0x07
   12d84:	8e 83       	std	Y+6, r24	; 0x06
   12d86:	80 85       	ldd	r24, Z+8	; 0x08
   12d88:	91 85       	ldd	r25, Z+9	; 0x09
   12d8a:	99 87       	std	Y+9, r25	; 0x09
   12d8c:	88 87       	std	Y+8, r24	; 0x08
   12d8e:	82 85       	ldd	r24, Z+10	; 0x0a
   12d90:	8a 87       	std	Y+10, r24	; 0x0a
   12d92:	83 85       	ldd	r24, Z+11	; 0x0b
   12d94:	8b 87       	std	Y+11, r24	; 0x0b
   12d96:	84 85       	ldd	r24, Z+12	; 0x0c
   12d98:	95 85       	ldd	r25, Z+13	; 0x0d
   12d9a:	a6 85       	ldd	r26, Z+14	; 0x0e
   12d9c:	b7 85       	ldd	r27, Z+15	; 0x0f
   12d9e:	8c 87       	std	Y+12, r24	; 0x0c
   12da0:	9d 87       	std	Y+13, r25	; 0x0d
   12da2:	ae 87       	std	Y+14, r26	; 0x0e
   12da4:	bf 87       	std	Y+15, r27	; 0x0f
   12da6:	80 89       	ldd	r24, Z+16	; 0x10
   12da8:	91 89       	ldd	r25, Z+17	; 0x11
   12daa:	99 8b       	std	Y+17, r25	; 0x11
   12dac:	88 8b       	std	Y+16, r24	; 0x10
   12dae:	82 89       	ldd	r24, Z+18	; 0x12
   12db0:	8a 8b       	std	Y+18, r24	; 0x12
   12db2:	83 89       	ldd	r24, Z+19	; 0x13
   12db4:	8b 8b       	std	Y+19, r24	; 0x13
   12db6:	84 89       	ldd	r24, Z+20	; 0x14
   12db8:	95 89       	ldd	r25, Z+21	; 0x15
   12dba:	9d 8b       	std	Y+21, r25	; 0x15
   12dbc:	8c 8b       	std	Y+20, r24	; 0x14
   12dbe:	86 89       	ldd	r24, Z+22	; 0x16
   12dc0:	97 89       	ldd	r25, Z+23	; 0x17
   12dc2:	9f 8b       	std	Y+23, r25	; 0x17
   12dc4:	8e 8b       	std	Y+22, r24	; 0x16
   12dc6:	80 8d       	ldd	r24, Z+24	; 0x18
   12dc8:	91 8d       	ldd	r25, Z+25	; 0x19
   12dca:	99 8f       	std	Y+25, r25	; 0x19
   12dcc:	88 8f       	std	Y+24, r24	; 0x18
   12dce:	82 8d       	ldd	r24, Z+26	; 0x1a
   12dd0:	93 8d       	ldd	r25, Z+27	; 0x1b
   12dd2:	9b 8f       	std	Y+27, r25	; 0x1b
   12dd4:	8a 8f       	std	Y+26, r24	; 0x1a
   12dd6:	84 8d       	ldd	r24, Z+28	; 0x1c
   12dd8:	8c 8f       	std	Y+28, r24	; 0x1c
   12dda:	85 8d       	ldd	r24, Z+29	; 0x1d
   12ddc:	8d 8f       	std	Y+29, r24	; 0x1d
   12dde:	87 8d       	ldd	r24, Z+31	; 0x1f
   12de0:	90 a1       	ldd	r25, Z+32	; 0x20
   12de2:	a1 a1       	ldd	r26, Z+33	; 0x21
   12de4:	b2 a1       	ldd	r27, Z+34	; 0x22
   12de6:	8f 8f       	std	Y+31, r24	; 0x1f
   12de8:	98 a3       	std	Y+32, r25	; 0x20
   12dea:	a9 a3       	std	Y+33, r26	; 0x21
   12dec:	ba a3       	std	Y+34, r27	; 0x22
   12dee:	83 a1       	ldd	r24, Z+35	; 0x23
   12df0:	8b a3       	std	Y+35, r24	; 0x23
   12df2:	84 a1       	ldd	r24, Z+36	; 0x24
   12df4:	95 a1       	ldd	r25, Z+37	; 0x25
   12df6:	9d a3       	std	Y+37, r25	; 0x25
   12df8:	8c a3       	std	Y+36, r24	; 0x24
   12dfa:	86 a1       	ldd	r24, Z+38	; 0x26
   12dfc:	97 a1       	ldd	r25, Z+39	; 0x27
   12dfe:	a0 a5       	ldd	r26, Z+40	; 0x28
   12e00:	b1 a5       	ldd	r27, Z+41	; 0x29
   12e02:	8e a3       	std	Y+38, r24	; 0x26
   12e04:	9f a3       	std	Y+39, r25	; 0x27
   12e06:	a8 a7       	std	Y+40, r26	; 0x28
   12e08:	b9 a7       	std	Y+41, r27	; 0x29
   12e0a:	82 a5       	ldd	r24, Z+42	; 0x2a
   12e0c:	8a a7       	std	Y+42, r24	; 0x2a
   12e0e:	df 91       	pop	r29
   12e10:	cf 91       	pop	r28
   12e12:	1f 91       	pop	r17
   12e14:	0f 91       	pop	r16
   12e16:	08 95       	ret

00012e18 <alloc_device>:
   12e18:	0f 93       	push	r16
   12e1a:	1f 93       	push	r17
   12e1c:	cf 93       	push	r28
   12e1e:	df 93       	push	r29
   12e20:	ad b7       	in	r26, 0x3d	; 61
   12e22:	be b7       	in	r27, 0x3e	; 62
   12e24:	17 97       	sbiw	r26, 0x07	; 7
   12e26:	0f b6       	in	r0, 0x3f	; 63
   12e28:	f8 94       	cli
   12e2a:	be bf       	out	0x3e, r27	; 62
   12e2c:	0f be       	out	0x3f, r0	; 63
   12e2e:	ad bf       	out	0x3d, r26	; 61
   12e30:	8c 01       	movw	r16, r24
   12e32:	67 de       	rcall	.-818    	; 0x12b02 <find_free>
   12e34:	ec 01       	movw	r28, r24
   12e36:	cf 3f       	cpi	r28, 0xFF	; 255
   12e38:	8f ef       	ldi	r24, 0xFF	; 255
   12e3a:	d8 07       	cpc	r29, r24
   12e3c:	89 f4       	brne	.+34     	; 0x12e60 <alloc_device+0x48>
   12e3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e42:	80 ff       	sbrs	r24, 0
   12e44:	a1 c0       	rjmp	.+322    	; 0x12f88 <alloc_device+0x170>
   12e46:	ed b7       	in	r30, 0x3d	; 61
   12e48:	fe b7       	in	r31, 0x3e	; 62
   12e4a:	15 83       	std	Z+5, r17	; 0x05
   12e4c:	04 83       	std	Z+4, r16	; 0x04
   12e4e:	8f e3       	ldi	r24, 0x3F	; 63
   12e50:	98 e1       	ldi	r25, 0x18	; 24
   12e52:	a0 e0       	ldi	r26, 0x00	; 0
   12e54:	81 83       	std	Z+1, r24	; 0x01
   12e56:	92 83       	std	Z+2, r25	; 0x02
   12e58:	a3 83       	std	Z+3, r26	; 0x03
   12e5a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12e5e:	94 c0       	rjmp	.+296    	; 0x12f88 <alloc_device+0x170>
   12e60:	02 30       	cpi	r16, 0x02	; 2
   12e62:	11 05       	cpc	r17, r1
   12e64:	e1 f1       	breq	.+120    	; 0x12ede <alloc_device+0xc6>
   12e66:	ec f4       	brge	.+58     	; 0x12ea2 <alloc_device+0x8a>
   12e68:	01 30       	cpi	r16, 0x01	; 1
   12e6a:	11 05       	cpc	r17, r1
   12e6c:	09 f0       	breq	.+2      	; 0x12e70 <alloc_device+0x58>
   12e6e:	76 c0       	rjmp	.+236    	; 0x12f5c <alloc_device+0x144>
   12e70:	8b e2       	ldi	r24, 0x2B	; 43
   12e72:	8c 9f       	mul	r24, r28
   12e74:	80 01       	movw	r16, r0
   12e76:	8d 9f       	mul	r24, r29
   12e78:	10 0d       	add	r17, r0
   12e7a:	11 24       	eor	r1, r1
   12e7c:	0c 50       	subi	r16, 0x0C	; 12
   12e7e:	11 4e       	sbci	r17, 0xE1	; 225
   12e80:	81 e0       	ldi	r24, 0x01	; 1
   12e82:	f8 01       	movw	r30, r16
   12e84:	80 83       	st	Z, r24
   12e86:	61 e0       	ldi	r22, 0x01	; 1
   12e88:	70 e0       	ldi	r23, 0x00	; 0
   12e8a:	85 e1       	ldi	r24, 0x15	; 21
   12e8c:	90 e0       	ldi	r25, 0x00	; 0
   12e8e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   12e92:	f8 01       	movw	r30, r16
   12e94:	90 a7       	std	Z+40, r25	; 0x28
   12e96:	87 a3       	std	Z+39, r24	; 0x27
   12e98:	61 e0       	ldi	r22, 0x01	; 1
   12e9a:	70 e0       	ldi	r23, 0x00	; 0
   12e9c:	88 e1       	ldi	r24, 0x18	; 24
   12e9e:	90 e0       	ldi	r25, 0x00	; 0
   12ea0:	57 c0       	rjmp	.+174    	; 0x12f50 <alloc_device+0x138>
   12ea2:	03 30       	cpi	r16, 0x03	; 3
   12ea4:	11 05       	cpc	r17, r1
   12ea6:	a1 f1       	breq	.+104    	; 0x12f10 <alloc_device+0xf8>
   12ea8:	04 30       	cpi	r16, 0x04	; 4
   12eaa:	11 05       	cpc	r17, r1
   12eac:	09 f0       	breq	.+2      	; 0x12eb0 <alloc_device+0x98>
   12eae:	56 c0       	rjmp	.+172    	; 0x12f5c <alloc_device+0x144>
   12eb0:	8b e2       	ldi	r24, 0x2B	; 43
   12eb2:	8c 9f       	mul	r24, r28
   12eb4:	80 01       	movw	r16, r0
   12eb6:	8d 9f       	mul	r24, r29
   12eb8:	10 0d       	add	r17, r0
   12eba:	11 24       	eor	r1, r1
   12ebc:	0c 50       	subi	r16, 0x0C	; 12
   12ebe:	11 4e       	sbci	r17, 0xE1	; 225
   12ec0:	84 e0       	ldi	r24, 0x04	; 4
   12ec2:	f8 01       	movw	r30, r16
   12ec4:	80 83       	st	Z, r24
   12ec6:	61 e0       	ldi	r22, 0x01	; 1
   12ec8:	70 e0       	ldi	r23, 0x00	; 0
   12eca:	8b e0       	ldi	r24, 0x0B	; 11
   12ecc:	90 e0       	ldi	r25, 0x00	; 0
   12ece:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   12ed2:	f8 01       	movw	r30, r16
   12ed4:	90 a7       	std	Z+40, r25	; 0x28
   12ed6:	87 a3       	std	Z+39, r24	; 0x27
   12ed8:	12 a6       	std	Z+42, r1	; 0x2a
   12eda:	11 a6       	std	Z+41, r1	; 0x29
   12edc:	55 c0       	rjmp	.+170    	; 0x12f88 <alloc_device+0x170>
   12ede:	8b e2       	ldi	r24, 0x2B	; 43
   12ee0:	8c 9f       	mul	r24, r28
   12ee2:	80 01       	movw	r16, r0
   12ee4:	8d 9f       	mul	r24, r29
   12ee6:	10 0d       	add	r17, r0
   12ee8:	11 24       	eor	r1, r1
   12eea:	0c 50       	subi	r16, 0x0C	; 12
   12eec:	11 4e       	sbci	r17, 0xE1	; 225
   12eee:	82 e0       	ldi	r24, 0x02	; 2
   12ef0:	f8 01       	movw	r30, r16
   12ef2:	80 83       	st	Z, r24
   12ef4:	61 e0       	ldi	r22, 0x01	; 1
   12ef6:	70 e0       	ldi	r23, 0x00	; 0
   12ef8:	82 e3       	ldi	r24, 0x32	; 50
   12efa:	90 e0       	ldi	r25, 0x00	; 0
   12efc:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   12f00:	f8 01       	movw	r30, r16
   12f02:	90 a7       	std	Z+40, r25	; 0x28
   12f04:	87 a3       	std	Z+39, r24	; 0x27
   12f06:	61 e0       	ldi	r22, 0x01	; 1
   12f08:	70 e0       	ldi	r23, 0x00	; 0
   12f0a:	86 e1       	ldi	r24, 0x16	; 22
   12f0c:	90 e0       	ldi	r25, 0x00	; 0
   12f0e:	20 c0       	rjmp	.+64     	; 0x12f50 <alloc_device+0x138>
   12f10:	8b e2       	ldi	r24, 0x2B	; 43
   12f12:	8c 9f       	mul	r24, r28
   12f14:	80 01       	movw	r16, r0
   12f16:	8d 9f       	mul	r24, r29
   12f18:	10 0d       	add	r17, r0
   12f1a:	11 24       	eor	r1, r1
   12f1c:	0c 50       	subi	r16, 0x0C	; 12
   12f1e:	11 4e       	sbci	r17, 0xE1	; 225
   12f20:	83 e0       	ldi	r24, 0x03	; 3
   12f22:	f8 01       	movw	r30, r16
   12f24:	80 83       	st	Z, r24
   12f26:	61 e0       	ldi	r22, 0x01	; 1
   12f28:	70 e0       	ldi	r23, 0x00	; 0
   12f2a:	82 e3       	ldi	r24, 0x32	; 50
   12f2c:	90 e0       	ldi	r25, 0x00	; 0
   12f2e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   12f32:	f8 01       	movw	r30, r16
   12f34:	90 a7       	std	Z+40, r25	; 0x28
   12f36:	87 a3       	std	Z+39, r24	; 0x27
   12f38:	61 e0       	ldi	r22, 0x01	; 1
   12f3a:	70 e0       	ldi	r23, 0x00	; 0
   12f3c:	86 e1       	ldi	r24, 0x16	; 22
   12f3e:	90 e0       	ldi	r25, 0x00	; 0
   12f40:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   12f44:	f8 01       	movw	r30, r16
   12f46:	92 a7       	std	Z+42, r25	; 0x2a
   12f48:	81 a7       	std	Z+41, r24	; 0x29
   12f4a:	ce 01       	movw	r24, r28
   12f4c:	eb de       	rcall	.-554    	; 0x12d24 <SS80_Set_Defaults>
   12f4e:	1c c0       	rjmp	.+56     	; 0x12f88 <alloc_device+0x170>
   12f50:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   12f54:	f8 01       	movw	r30, r16
   12f56:	92 a7       	std	Z+42, r25	; 0x2a
   12f58:	81 a7       	std	Z+41, r24	; 0x29
   12f5a:	16 c0       	rjmp	.+44     	; 0x12f88 <alloc_device+0x170>
   12f5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f60:	80 ff       	sbrs	r24, 0
   12f62:	10 c0       	rjmp	.+32     	; 0x12f84 <alloc_device+0x16c>
   12f64:	c8 01       	movw	r24, r16
   12f66:	b4 dd       	rcall	.-1176   	; 0x12ad0 <type_to_str>
   12f68:	ed b7       	in	r30, 0x3d	; 61
   12f6a:	fe b7       	in	r31, 0x3e	; 62
   12f6c:	97 83       	std	Z+7, r25	; 0x07
   12f6e:	86 83       	std	Z+6, r24	; 0x06
   12f70:	15 83       	std	Z+5, r17	; 0x05
   12f72:	04 83       	std	Z+4, r16	; 0x04
   12f74:	8d e1       	ldi	r24, 0x1D	; 29
   12f76:	98 e1       	ldi	r25, 0x18	; 24
   12f78:	a0 e0       	ldi	r26, 0x00	; 0
   12f7a:	81 83       	std	Z+1, r24	; 0x01
   12f7c:	92 83       	std	Z+2, r25	; 0x02
   12f7e:	a3 83       	std	Z+3, r26	; 0x03
   12f80:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   12f84:	cf ef       	ldi	r28, 0xFF	; 255
   12f86:	df ef       	ldi	r29, 0xFF	; 255
   12f88:	ce 01       	movw	r24, r28
   12f8a:	cd b7       	in	r28, 0x3d	; 61
   12f8c:	de b7       	in	r29, 0x3e	; 62
   12f8e:	27 96       	adiw	r28, 0x07	; 7
   12f90:	e4 e0       	ldi	r30, 0x04	; 4
   12f92:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00012f96 <init_Devices>:
   12f96:	cf 93       	push	r28
   12f98:	df 93       	push	r29
   12f9a:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <stack_ind+0x1>
   12f9e:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <stack_ind>
   12fa2:	e4 ef       	ldi	r30, 0xF4	; 244
   12fa4:	fe e1       	ldi	r31, 0x1E	; 30
   12fa6:	9f ef       	ldi	r25, 0xFF	; 255
   12fa8:	80 e2       	ldi	r24, 0x20	; 32
   12faa:	10 82       	st	Z, r1
   12fac:	11 82       	std	Z+1, r1	; 0x01
   12fae:	92 83       	std	Z+2, r25	; 0x02
   12fb0:	13 82       	std	Z+3, r1	; 0x03
   12fb2:	14 82       	std	Z+4, r1	; 0x04
   12fb4:	15 82       	std	Z+5, r1	; 0x05
   12fb6:	16 82       	std	Z+6, r1	; 0x06
   12fb8:	df 01       	movw	r26, r30
   12fba:	17 96       	adiw	r26, 0x07	; 7
   12fbc:	ed 01       	movw	r28, r26
   12fbe:	28 2f       	mov	r18, r24
   12fc0:	19 92       	st	Y+, r1
   12fc2:	2a 95       	dec	r18
   12fc4:	e9 f7       	brne	.-6      	; 0x12fc0 <init_Devices+0x2a>
   12fc6:	10 a6       	std	Z+40, r1	; 0x28
   12fc8:	17 a2       	std	Z+39, r1	; 0x27
   12fca:	12 a6       	std	Z+42, r1	; 0x2a
   12fcc:	11 a6       	std	Z+41, r1	; 0x29
   12fce:	bb 96       	adiw	r30, 0x2b	; 43
   12fd0:	c0 e2       	ldi	r28, 0x20	; 32
   12fd2:	e8 3f       	cpi	r30, 0xF8	; 248
   12fd4:	fc 07       	cpc	r31, r28
   12fd6:	49 f7       	brne	.-46     	; 0x12faa <init_Devices+0x14>
   12fd8:	df 91       	pop	r29
   12fda:	cf 91       	pop	r28
   12fdc:	08 95       	ret

00012fde <push_state>:
   12fde:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <stack_ind>
   12fe2:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <stack_ind+0x1>
   12fe6:	25 30       	cpi	r18, 0x05	; 5
   12fe8:	31 05       	cpc	r19, r1
   12fea:	7c f4       	brge	.+30     	; 0x1300a <push_state+0x2c>
   12fec:	a9 01       	movw	r20, r18
   12fee:	4f 5f       	subi	r20, 0xFF	; 255
   12ff0:	5f 4f       	sbci	r21, 0xFF	; 255
   12ff2:	50 93 77 19 	sts	0x1977, r21	; 0x801977 <stack_ind+0x1>
   12ff6:	40 93 76 19 	sts	0x1976, r20	; 0x801976 <stack_ind>
   12ffa:	22 0f       	add	r18, r18
   12ffc:	33 1f       	adc	r19, r19
   12ffe:	f9 01       	movw	r30, r18
   13000:	e4 59       	subi	r30, 0x94	; 148
   13002:	f6 4e       	sbci	r31, 0xE6	; 230
   13004:	80 83       	st	Z, r24
   13006:	91 83       	std	Z+1, r25	; 0x01
   13008:	08 95       	ret
   1300a:	80 e0       	ldi	r24, 0x00	; 0
   1300c:	90 e0       	ldi	r25, 0x00	; 0
   1300e:	08 95       	ret

00013010 <pop_state>:
   13010:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <stack_ind>
   13014:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <stack_ind+0x1>
   13018:	18 16       	cp	r1, r24
   1301a:	19 06       	cpc	r1, r25
   1301c:	6c f4       	brge	.+26     	; 0x13038 <pop_state+0x28>
   1301e:	01 97       	sbiw	r24, 0x01	; 1
   13020:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <stack_ind+0x1>
   13024:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <stack_ind>
   13028:	88 0f       	add	r24, r24
   1302a:	99 1f       	adc	r25, r25
   1302c:	fc 01       	movw	r30, r24
   1302e:	e4 59       	subi	r30, 0x94	; 148
   13030:	f6 4e       	sbci	r31, 0xE6	; 230
   13032:	80 81       	ld	r24, Z
   13034:	91 81       	ldd	r25, Z+1	; 0x01
   13036:	08 95       	ret
   13038:	80 e0       	ldi	r24, 0x00	; 0
   1303a:	90 e0       	ldi	r25, 0x00	; 0
   1303c:	08 95       	ret

0001303e <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   1303e:	08 95       	ret

00013040 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13040:	0f 93       	push	r16
   13042:	1f 93       	push	r17
   13044:	cf 93       	push	r28
   13046:	df 93       	push	r29
   13048:	00 d0       	rcall	.+0      	; 0x1304a <hpdir_set_device+0xa>
   1304a:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   1304c:	2b e2       	ldi	r18, 0x2B	; 43
   1304e:	ac 01       	movw	r20, r24
   13050:	24 9f       	mul	r18, r20
   13052:	c0 01       	movw	r24, r0
   13054:	25 9f       	mul	r18, r21
   13056:	90 0d       	add	r25, r0
   13058:	11 24       	eor	r1, r1
   1305a:	ec 01       	movw	r28, r24
   1305c:	cc 50       	subi	r28, 0x0C	; 12
   1305e:	d1 4e       	sbci	r29, 0xE1	; 225
   13060:	28 81       	ld	r18, Y
   13062:	23 30       	cpi	r18, 0x03	; 3
   13064:	a1 f5       	brne	.+104    	; 0x130ce <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   13066:	ef a1       	ldd	r30, Y+39	; 0x27
   13068:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   1306a:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <hpdir+0x80>
   1306e:	30 91 79 21 	lds	r19, 0x2179	; 0x802179 <hpdir+0x81>
   13072:	35 83       	std	Z+5, r19	; 0x05
   13074:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   13076:	40 91 84 21 	lds	r20, 0x2184	; 0x802184 <hpdir+0x8c>
   1307a:	50 91 85 21 	lds	r21, 0x2185	; 0x802185 <hpdir+0x8d>
   1307e:	60 91 86 21 	lds	r22, 0x2186	; 0x802186 <hpdir+0x8e>
   13082:	70 91 87 21 	lds	r23, 0x2187	; 0x802187 <hpdir+0x8f>
   13086:	44 87       	std	Z+12, r20	; 0x0c
   13088:	55 87       	std	Z+13, r21	; 0x0d
   1308a:	66 87       	std	Z+14, r22	; 0x0e
   1308c:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   1308e:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0xa0>
   13092:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0xa1>
   13096:	31 8b       	std	Z+17, r19	; 0x11
   13098:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   1309a:	17 8e       	std	Z+31, r1	; 0x1f
   1309c:	10 a2       	std	Z+32, r1	; 0x20
   1309e:	11 a2       	std	Z+33, r1	; 0x21
   130a0:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   130a2:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   130a4:	15 a2       	std	Z+37, r1	; 0x25
   130a6:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   130a8:	40 91 a4 21 	lds	r20, 0x21A4	; 0x8021a4 <hpdir+0xac>
   130ac:	50 91 a5 21 	lds	r21, 0x21A5	; 0x8021a5 <hpdir+0xad>
   130b0:	60 91 a6 21 	lds	r22, 0x21A6	; 0x8021a6 <hpdir+0xae>
   130b4:	70 91 a7 21 	lds	r23, 0x21A7	; 0x8021a7 <hpdir+0xaf>
   130b8:	8a 01       	movw	r16, r20
   130ba:	9b 01       	movw	r18, r22
   130bc:	01 50       	subi	r16, 0x01	; 1
   130be:	11 09       	sbc	r17, r1
   130c0:	21 09       	sbc	r18, r1
   130c2:	31 09       	sbc	r19, r1
   130c4:	06 a3       	std	Z+38, r16	; 0x26
   130c6:	17 a3       	std	Z+39, r17	; 0x27
   130c8:	20 a7       	std	Z+40, r18	; 0x28
   130ca:	31 a7       	std	Z+41, r19	; 0x29
   130cc:	2a c0       	rjmp	.+84     	; 0x13122 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   130ce:	21 30       	cpi	r18, 0x01	; 1
   130d0:	a9 f5       	brne	.+106    	; 0x1313c <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   130d2:	ef a1       	ldd	r30, Y+39	; 0x27
   130d4:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   130d6:	20 91 78 21 	lds	r18, 0x2178	; 0x802178 <hpdir+0x80>
   130da:	30 91 79 21 	lds	r19, 0x2179	; 0x802179 <hpdir+0x81>
   130de:	35 83       	std	Z+5, r19	; 0x05
   130e0:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   130e2:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0xa0>
   130e6:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0xa1>
   130ea:	37 83       	std	Z+7, r19	; 0x07
   130ec:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   130ee:	20 91 94 21 	lds	r18, 0x2194	; 0x802194 <hpdir+0x9c>
   130f2:	30 91 95 21 	lds	r19, 0x2195	; 0x802195 <hpdir+0x9d>
   130f6:	31 87       	std	Z+9, r19	; 0x09
   130f8:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   130fa:	20 91 90 21 	lds	r18, 0x2190	; 0x802190 <hpdir+0x98>
   130fe:	30 91 91 21 	lds	r19, 0x2191	; 0x802191 <hpdir+0x99>
   13102:	33 87       	std	Z+11, r19	; 0x0b
   13104:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   13106:	20 91 8c 21 	lds	r18, 0x218C	; 0x80218c <hpdir+0x94>
   1310a:	30 91 8d 21 	lds	r19, 0x218D	; 0x80218d <hpdir+0x95>
   1310e:	35 87       	std	Z+13, r19	; 0x0d
   13110:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   13112:	40 91 a4 21 	lds	r20, 0x21A4	; 0x8021a4 <hpdir+0xac>
   13116:	50 91 a5 21 	lds	r21, 0x21A5	; 0x8021a5 <hpdir+0xad>
   1311a:	60 91 a6 21 	lds	r22, 0x21A6	; 0x8021a6 <hpdir+0xae>
   1311e:	70 91 a7 21 	lds	r23, 0x21A7	; 0x8021a7 <hpdir+0xaf>
   13122:	4b 83       	std	Y+3, r20	; 0x03
   13124:	5c 83       	std	Y+4, r21	; 0x04
   13126:	6d 83       	std	Y+5, r22	; 0x05
   13128:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   1312a:	4e e1       	ldi	r20, 0x1E	; 30
   1312c:	50 e0       	ldi	r21, 0x00	; 0
   1312e:	68 ef       	ldi	r22, 0xF8	; 248
   13130:	70 e2       	ldi	r23, 0x20	; 32
   13132:	85 50       	subi	r24, 0x05	; 5
   13134:	91 4e       	sbci	r25, 0xE1	; 225
   13136:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strncpy>
   1313a:	0a c0       	rjmp	.+20     	; 0x13150 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   1313c:	8e ef       	ldi	r24, 0xFE	; 254
   1313e:	97 e1       	ldi	r25, 0x17	; 23
   13140:	a0 e0       	ldi	r26, 0x00	; 0
   13142:	ed b7       	in	r30, 0x3d	; 61
   13144:	fe b7       	in	r31, 0x3e	; 62
   13146:	81 83       	std	Z+1, r24	; 0x01
   13148:	92 83       	std	Z+2, r25	; 0x02
   1314a:	a3 83       	std	Z+3, r26	; 0x03
   1314c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

}
   13150:	cd b7       	in	r28, 0x3d	; 61
   13152:	de b7       	in	r29, 0x3e	; 62
   13154:	23 96       	adiw	r28, 0x03	; 3
   13156:	e4 e0       	ldi	r30, 0x04	; 4
   13158:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0001315c <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   1315c:	cf 93       	push	r28
   1315e:	df 93       	push	r29
   13160:	ec 01       	movw	r28, r24
   13162:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13164:	41 e0       	ldi	r20, 0x01	; 1
   13166:	50 e0       	ldi	r21, 0x00	; 0
   13168:	60 e0       	ldi	r22, 0x00	; 0
   1316a:	70 e0       	ldi	r23, 0x00	; 0
   1316c:	ad d7       	rcall	.+3930   	; 0x140c8 <hpdir_find_drive>
   1316e:	89 2b       	or	r24, r25
   13170:	11 f0       	breq	.+4      	; 0x13176 <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   13172:	ce 01       	movw	r24, r28
   13174:	65 df       	rcall	.-310    	; 0x13040 <hpdir_set_device>
}
   13176:	df 91       	pop	r29
   13178:	cf 91       	pop	r28
   1317a:	08 95       	ret

0001317c <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   1317c:	4f 92       	push	r4
   1317e:	5f 92       	push	r5
   13180:	6f 92       	push	r6
   13182:	7f 92       	push	r7
   13184:	8f 92       	push	r8
   13186:	af 92       	push	r10
   13188:	bf 92       	push	r11
   1318a:	cf 92       	push	r12
   1318c:	df 92       	push	r13
   1318e:	ef 92       	push	r14
   13190:	0f 93       	push	r16
   13192:	1f 93       	push	r17
   13194:	cf 93       	push	r28
   13196:	df 93       	push	r29
   13198:	00 d0       	rcall	.+0      	; 0x1319a <Post_Config+0x1e>
   1319a:	00 d0       	rcall	.+0      	; 0x1319c <Post_Config+0x20>
   1319c:	1f 92       	push	r1
   1319e:	c4 ef       	ldi	r28, 0xF4	; 244
   131a0:	de e1       	ldi	r29, 0x1E	; 30
   131a2:	88 ef       	ldi	r24, 0xF8	; 248
   131a4:	48 2e       	mov	r4, r24
   131a6:	80 e2       	ldi	r24, 0x20	; 32
   131a8:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   131aa:	a1 2c       	mov	r10, r1
   131ac:	bb 24       	eor	r11, r11
   131ae:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   131b0:	81 e9       	ldi	r24, 0x91	; 145
   131b2:	97 e1       	ldi	r25, 0x17	; 23
   131b4:	6c 01       	movw	r12, r24
   131b6:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   131b8:	88 ec       	ldi	r24, 0xC8	; 200
   131ba:	97 e1       	ldi	r25, 0x17	; 23
   131bc:	3c 01       	movw	r6, r24
   131be:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   131c0:	88 81       	ld	r24, Y
   131c2:	88 23       	and	r24, r24
   131c4:	09 f4       	brne	.+2      	; 0x131c8 <Post_Config+0x4c>
   131c6:	57 c0       	rjmp	.+174    	; 0x13276 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   131c8:	83 30       	cpi	r24, 0x03	; 3
   131ca:	f9 f4       	brne	.+62     	; 0x1320a <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   131cc:	0f a1       	ldd	r16, Y+39	; 0x27
   131ce:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   131d0:	f8 01       	movw	r30, r16
   131d2:	80 89       	ldd	r24, Z+16	; 0x10
   131d4:	91 89       	ldd	r25, Z+17	; 0x11
   131d6:	81 15       	cp	r24, r1
   131d8:	91 40       	sbci	r25, 0x01	; 1
   131da:	59 f0       	breq	.+22     	; 0x131f2 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   131dc:	ce 01       	movw	r24, r28
   131de:	07 96       	adiw	r24, 0x07	; 7
   131e0:	ed b7       	in	r30, 0x3d	; 61
   131e2:	fe b7       	in	r31, 0x3e	; 62
   131e4:	95 83       	std	Z+5, r25	; 0x05
   131e6:	84 83       	std	Z+4, r24	; 0x04
   131e8:	61 82       	std	Z+1, r6	; 0x01
   131ea:	72 82       	std	Z+2, r7	; 0x02
   131ec:	83 82       	std	Z+3, r8	; 0x03
   131ee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   131f2:	f8 01       	movw	r30, r16
   131f4:	86 a1       	ldd	r24, Z+38	; 0x26
   131f6:	97 a1       	ldd	r25, Z+39	; 0x27
   131f8:	a0 a5       	ldd	r26, Z+40	; 0x28
   131fa:	b1 a5       	ldd	r27, Z+41	; 0x29
   131fc:	01 96       	adiw	r24, 0x01	; 1
   131fe:	a1 1d       	adc	r26, r1
   13200:	b1 1d       	adc	r27, r1
   13202:	8b 83       	std	Y+3, r24	; 0x03
   13204:	9c 83       	std	Y+4, r25	; 0x04
   13206:	ad 83       	std	Y+5, r26	; 0x05
   13208:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1320a:	88 81       	ld	r24, Y
   1320c:	81 30       	cpi	r24, 0x01	; 1
   1320e:	99 f5       	brne	.+102    	; 0x13276 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   13210:	0f a1       	ldd	r16, Y+39	; 0x27
   13212:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13214:	f8 01       	movw	r30, r16
   13216:	86 81       	ldd	r24, Z+6	; 0x06
   13218:	97 81       	ldd	r25, Z+7	; 0x07
   1321a:	81 15       	cp	r24, r1
   1321c:	91 40       	sbci	r25, 0x01	; 1
   1321e:	71 f0       	breq	.+28     	; 0x1323c <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13220:	f8 01       	movw	r30, r16
   13222:	b7 82       	std	Z+7, r11	; 0x07
   13224:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13226:	ce 01       	movw	r24, r28
   13228:	07 96       	adiw	r24, 0x07	; 7
   1322a:	ed b7       	in	r30, 0x3d	; 61
   1322c:	fe b7       	in	r31, 0x3e	; 62
   1322e:	95 83       	std	Z+5, r25	; 0x05
   13230:	84 83       	std	Z+4, r24	; 0x04
   13232:	c1 82       	std	Z+1, r12	; 0x01
   13234:	d2 82       	std	Z+2, r13	; 0x02
   13236:	e3 82       	std	Z+3, r14	; 0x03
   13238:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   1323c:	f8 01       	movw	r30, r16
   1323e:	20 85       	ldd	r18, Z+8	; 0x08
   13240:	31 85       	ldd	r19, Z+9	; 0x09
   13242:	82 85       	ldd	r24, Z+10	; 0x0a
   13244:	93 85       	ldd	r25, Z+11	; 0x0b
   13246:	28 9f       	mul	r18, r24
   13248:	a0 01       	movw	r20, r0
   1324a:	29 9f       	mul	r18, r25
   1324c:	50 0d       	add	r21, r0
   1324e:	38 9f       	mul	r19, r24
   13250:	50 0d       	add	r21, r0
   13252:	11 24       	eor	r1, r1
   13254:	24 85       	ldd	r18, Z+12	; 0x0c
   13256:	35 85       	ldd	r19, Z+13	; 0x0d
   13258:	42 9f       	mul	r20, r18
   1325a:	c0 01       	movw	r24, r0
   1325c:	43 9f       	mul	r20, r19
   1325e:	90 0d       	add	r25, r0
   13260:	52 9f       	mul	r21, r18
   13262:	90 0d       	add	r25, r0
   13264:	11 24       	eor	r1, r1
   13266:	09 2e       	mov	r0, r25
   13268:	00 0c       	add	r0, r0
   1326a:	aa 0b       	sbc	r26, r26
   1326c:	bb 0b       	sbc	r27, r27
   1326e:	8b 83       	std	Y+3, r24	; 0x03
   13270:	9c 83       	std	Y+4, r25	; 0x04
   13272:	ad 83       	std	Y+5, r26	; 0x05
   13274:	be 83       	std	Y+6, r27	; 0x06
   13276:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13278:	4c 16       	cp	r4, r28
   1327a:	5d 06       	cpc	r5, r29
   1327c:	09 f0       	breq	.+2      	; 0x13280 <Post_Config+0x104>
   1327e:	a0 cf       	rjmp	.-192    	; 0x131c0 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13280:	0f 90       	pop	r0
   13282:	0f 90       	pop	r0
   13284:	0f 90       	pop	r0
   13286:	0f 90       	pop	r0
   13288:	0f 90       	pop	r0
   1328a:	df 91       	pop	r29
   1328c:	cf 91       	pop	r28
   1328e:	1f 91       	pop	r17
   13290:	0f 91       	pop	r16
   13292:	ef 90       	pop	r14
   13294:	df 90       	pop	r13
   13296:	cf 90       	pop	r12
   13298:	bf 90       	pop	r11
   1329a:	af 90       	pop	r10
   1329c:	8f 90       	pop	r8
   1329e:	7f 90       	pop	r7
   132a0:	6f 90       	pop	r6
   132a2:	5f 90       	pop	r5
   132a4:	4f 90       	pop	r4
   132a6:	08 95       	ret

000132a8 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   132a8:	af e1       	ldi	r26, 0x1F	; 31
   132aa:	b1 e0       	ldi	r27, 0x01	; 1
   132ac:	ea e5       	ldi	r30, 0x5A	; 90
   132ae:	f9 e9       	ldi	r31, 0x99	; 153
   132b0:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   132b4:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   132b6:	6f de       	rcall	.-802    	; 0x12f96 <init_Devices>

    printf("Reading: %s\n", name);
   132b8:	ed b7       	in	r30, 0x3d	; 61
   132ba:	fe b7       	in	r31, 0x3e	; 62
   132bc:	15 83       	std	Z+5, r17	; 0x05
   132be:	04 83       	std	Z+4, r16	; 0x04
   132c0:	84 e7       	ldi	r24, 0x74	; 116
   132c2:	9d e1       	ldi	r25, 0x1D	; 29
   132c4:	a0 e0       	ldi	r26, 0x00	; 0
   132c6:	81 83       	std	Z+1, r24	; 0x01
   132c8:	92 83       	std	Z+2, r25	; 0x02
   132ca:	a3 83       	std	Z+3, r26	; 0x03
   132cc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    cfg = fopen(name, "rb");
   132d0:	6e ef       	ldi	r22, 0xFE	; 254
   132d2:	78 e0       	ldi	r23, 0x08	; 8
   132d4:	c8 01       	movw	r24, r16
   132d6:	0e 94 6f 7c 	call	0xf8de	; 0xf8de <fopen>
   132da:	c4 5f       	subi	r28, 0xF4	; 244
   132dc:	de 4f       	sbci	r29, 0xFE	; 254
   132de:	99 83       	std	Y+1, r25	; 0x01
   132e0:	88 83       	st	Y, r24
   132e2:	cc 50       	subi	r28, 0x0C	; 12
   132e4:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   132e6:	89 2b       	or	r24, r25
   132e8:	09 f4       	brne	.+2      	; 0x132ec <Read_Config+0x44>
   132ea:	59 c0       	rjmp	.+178    	; 0x1339e <Read_Config+0xf6>
   132ec:	41 2c       	mov	r4, r1
   132ee:	51 2c       	mov	r5, r1
   132f0:	c1 2c       	mov	r12, r1
   132f2:	d1 2c       	mov	r13, r1
   132f4:	c8 5f       	subi	r28, 0xF8	; 248
   132f6:	de 4f       	sbci	r29, 0xFE	; 254
   132f8:	19 82       	std	Y+1, r1	; 0x01
   132fa:	18 82       	st	Y, r1
   132fc:	c8 50       	subi	r28, 0x08	; 8
   132fe:	d1 40       	sbci	r29, 0x01	; 1
   13300:	61 2c       	mov	r6, r1
   13302:	71 2c       	mov	r7, r1
   13304:	c6 5f       	subi	r28, 0xF6	; 246
   13306:	de 4f       	sbci	r29, 0xFE	; 254
   13308:	19 82       	std	Y+1, r1	; 0x01
   1330a:	18 82       	st	Y, r1
   1330c:	ca 50       	subi	r28, 0x0A	; 10
   1330e:	d1 40       	sbci	r29, 0x01	; 1
   13310:	e1 2c       	mov	r14, r1
   13312:	f1 2c       	mov	r15, r1
   13314:	21 2c       	mov	r2, r1
   13316:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13318:	83 ec       	ldi	r24, 0xC3	; 195
   1331a:	9a e1       	ldi	r25, 0x1A	; 26
   1331c:	9c 01       	movw	r18, r24
   1331e:	40 e0       	ldi	r20, 0x00	; 0
   13320:	c2 5f       	subi	r28, 0xF2	; 242
   13322:	de 4f       	sbci	r29, 0xFE	; 254
   13324:	28 83       	st	Y, r18
   13326:	39 83       	std	Y+1, r19	; 0x01
   13328:	4a 83       	std	Y+2, r20	; 0x02
   1332a:	ce 50       	subi	r28, 0x0E	; 14
   1332c:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   1332e:	85 ee       	ldi	r24, 0xE5	; 229
   13330:	9a e1       	ldi	r25, 0x1A	; 26
   13332:	9c 01       	movw	r18, r24
   13334:	40 e0       	ldi	r20, 0x00	; 0
   13336:	cf 5e       	subi	r28, 0xEF	; 239
   13338:	de 4f       	sbci	r29, 0xFE	; 254
   1333a:	28 83       	st	Y, r18
   1333c:	39 83       	std	Y+1, r19	; 0x01
   1333e:	4a 83       	std	Y+2, r20	; 0x02
   13340:	c1 51       	subi	r28, 0x11	; 17
   13342:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13344:	85 e1       	ldi	r24, 0x15	; 21
   13346:	9b e1       	ldi	r25, 0x1B	; 27
   13348:	9c 01       	movw	r18, r24
   1334a:	40 e0       	ldi	r20, 0x00	; 0
   1334c:	cc 5e       	subi	r28, 0xEC	; 236
   1334e:	de 4f       	sbci	r29, 0xFE	; 254
   13350:	28 83       	st	Y, r18
   13352:	39 83       	std	Y+1, r19	; 0x01
   13354:	4a 83       	std	Y+2, r20	; 0x02
   13356:	c4 51       	subi	r28, 0x14	; 20
   13358:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1335a:	84 e4       	ldi	r24, 0x44	; 68
   1335c:	9b e1       	ldi	r25, 0x1B	; 27
   1335e:	9c 01       	movw	r18, r24
   13360:	40 e0       	ldi	r20, 0x00	; 0
   13362:	c9 5e       	subi	r28, 0xE9	; 233
   13364:	de 4f       	sbci	r29, 0xFE	; 254
   13366:	28 83       	st	Y, r18
   13368:	39 83       	std	Y+1, r19	; 0x01
   1336a:	4a 83       	std	Y+2, r20	; 0x02
   1336c:	c7 51       	subi	r28, 0x17	; 23
   1336e:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13370:	84 e7       	ldi	r24, 0x74	; 116
   13372:	9b e1       	ldi	r25, 0x1B	; 27
   13374:	9c 01       	movw	r18, r24
   13376:	40 e0       	ldi	r20, 0x00	; 0
   13378:	c6 5e       	subi	r28, 0xE6	; 230
   1337a:	de 4f       	sbci	r29, 0xFE	; 254
   1337c:	28 83       	st	Y, r18
   1337e:	39 83       	std	Y+1, r19	; 0x01
   13380:	4a 83       	std	Y+2, r20	; 0x02
   13382:	ca 51       	subi	r28, 0x1A	; 26
   13384:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13386:	82 ea       	ldi	r24, 0xA2	; 162
   13388:	9b e1       	ldi	r25, 0x1B	; 27
   1338a:	9c 01       	movw	r18, r24
   1338c:	40 e0       	ldi	r20, 0x00	; 0
   1338e:	c3 5e       	subi	r28, 0xE3	; 227
   13390:	de 4f       	sbci	r29, 0xFE	; 254
   13392:	28 83       	st	Y, r18
   13394:	39 83       	std	Y+1, r19	; 0x01
   13396:	4a 83       	std	Y+2, r20	; 0x02
   13398:	cd 51       	subi	r28, 0x1D	; 29
   1339a:	d1 40       	sbci	r29, 0x01	; 1
   1339c:	26 c0       	rjmp	.+76     	; 0x133ea <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   1339e:	80 e5       	ldi	r24, 0x50	; 80
   133a0:	9e e0       	ldi	r25, 0x0E	; 14
   133a2:	0e 94 a0 76 	call	0xed40	; 0xed40 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   133a6:	ed b7       	in	r30, 0x3d	; 61
   133a8:	fe b7       	in	r31, 0x3e	; 62
   133aa:	15 83       	std	Z+5, r17	; 0x05
   133ac:	04 83       	std	Z+4, r16	; 0x04
   133ae:	86 e5       	ldi	r24, 0x56	; 86
   133b0:	9d e1       	ldi	r25, 0x1D	; 29
   133b2:	a0 e0       	ldi	r26, 0x00	; 0
   133b4:	81 83       	std	Z+1, r24	; 0x01
   133b6:	92 83       	std	Z+2, r25	; 0x02
   133b8:	a3 83       	std	Z+3, r26	; 0x03
   133ba:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        set_Config_Defaults();
        return(errors);
   133be:	81 e0       	ldi	r24, 0x01	; 1
   133c0:	90 e0       	ldi	r25, 0x00	; 0
   133c2:	95 c3       	rjmp	.+1834   	; 0x13aee <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   133c4:	ff ef       	ldi	r31, 0xFF	; 255
   133c6:	4f 1a       	sub	r4, r31
   133c8:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   133ca:	4e e7       	ldi	r20, 0x7E	; 126
   133cc:	50 e0       	ldi	r21, 0x00	; 0
   133ce:	9e 01       	movw	r18, r28
   133d0:	28 5f       	subi	r18, 0xF8	; 248
   133d2:	3f 4f       	sbci	r19, 0xFF	; 255
   133d4:	49 01       	movw	r8, r18
   133d6:	b9 01       	movw	r22, r18
   133d8:	ce 01       	movw	r24, r28
   133da:	88 57       	subi	r24, 0x78	; 120
   133dc:	9f 4f       	sbci	r25, 0xFF	; 255
   133de:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   133e2:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   133e4:	88 85       	ldd	r24, Y+8	; 0x08
   133e6:	81 11       	cpse	r24, r1
   133e8:	10 c0       	rjmp	.+32     	; 0x1340a <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   133ea:	c4 5f       	subi	r28, 0xF4	; 244
   133ec:	de 4f       	sbci	r29, 0xFE	; 254
   133ee:	48 81       	ld	r20, Y
   133f0:	59 81       	ldd	r21, Y+1	; 0x01
   133f2:	cc 50       	subi	r28, 0x0C	; 12
   133f4:	d1 40       	sbci	r29, 0x01	; 1
   133f6:	6e e7       	ldi	r22, 0x7E	; 126
   133f8:	70 e0       	ldi	r23, 0x00	; 0
   133fa:	ce 01       	movw	r24, r28
   133fc:	88 57       	subi	r24, 0x78	; 120
   133fe:	9f 4f       	sbci	r25, 0xFF	; 255
   13400:	0e 94 87 74 	call	0xe90e	; 0xe90e <fgets>
   13404:	89 2b       	or	r24, r25
   13406:	f1 f6       	brne	.-68     	; 0x133c4 <Read_Config+0x11c>
   13408:	32 c3       	rjmp	.+1636   	; 0x13a6e <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1340a:	83 32       	cpi	r24, 0x23	; 35
   1340c:	71 f3       	breq	.-36     	; 0x133ea <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   1340e:	c4 01       	movw	r24, r8
   13410:	0e 94 08 91 	call	0x12210	; 0x12210 <tok_index>
   13414:	8f 3f       	cpi	r24, 0xFF	; 255
   13416:	3f ef       	ldi	r19, 0xFF	; 255
   13418:	93 07       	cpc	r25, r19
   1341a:	49 f4       	brne	.+18     	; 0x1342e <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   1341c:	ed b7       	in	r30, 0x3d	; 61
   1341e:	fe b7       	in	r31, 0x3e	; 62
   13420:	57 82       	std	Z+7, r5	; 0x07
   13422:	46 82       	std	Z+6, r4	; 0x06
   13424:	95 82       	std	Z+5, r9	; 0x05
   13426:	84 82       	std	Z+4, r8	; 0x04
   13428:	84 e3       	ldi	r24, 0x34	; 52
   1342a:	9d e1       	ldi	r25, 0x1D	; 29
   1342c:	c9 c0       	rjmp	.+402    	; 0x135c0 <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   1342e:	88 0f       	add	r24, r24
   13430:	99 1f       	adc	r25, r25
   13432:	88 0f       	add	r24, r24
   13434:	99 1f       	adc	r25, r25
   13436:	fc 01       	movw	r30, r24
   13438:	ec 53       	subi	r30, 0x3C	; 60
   1343a:	fe 4f       	sbci	r31, 0xFE	; 254
   1343c:	02 81       	ldd	r16, Z+2	; 0x02
   1343e:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13440:	4e e7       	ldi	r20, 0x7E	; 126
   13442:	50 e0       	ldi	r21, 0x00	; 0
   13444:	b4 01       	movw	r22, r8
   13446:	c5 01       	movw	r24, r10
   13448:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   1344c:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   1344e:	63 e6       	ldi	r22, 0x63	; 99
   13450:	7e e0       	ldi	r23, 0x0E	; 14
   13452:	c4 01       	movw	r24, r8
   13454:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   13458:	89 2b       	or	r24, r25
   1345a:	39 f0       	breq	.+14     	; 0x1346a <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   1345c:	4e e7       	ldi	r20, 0x7E	; 126
   1345e:	50 e0       	ldi	r21, 0x00	; 0
   13460:	b4 01       	movw	r22, r8
   13462:	c5 01       	movw	r24, r10
   13464:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   13468:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   1346a:	c4 01       	movw	r24, r8
   1346c:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13470:	01 31       	cpi	r16, 0x11	; 17
   13472:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13474:	19 f4       	brne	.+6      	; 0x1347c <Read_Config+0x1d4>
   13476:	cc dd       	rcall	.-1128   	; 0x13010 <pop_state>
   13478:	1c 01       	movw	r2, r24
            continue;
   1347a:	b7 cf       	rjmp	.-146    	; 0x133ea <Read_Config+0x142>
        }

        switch(state)
   1347c:	30 e1       	ldi	r19, 0x10	; 16
   1347e:	23 16       	cp	r2, r19
   13480:	31 04       	cpc	r3, r1
   13482:	08 f0       	brcs	.+2      	; 0x13486 <Read_Config+0x1de>
   13484:	de c2       	rjmp	.+1468   	; 0x13a42 <Read_Config+0x79a>
   13486:	f1 01       	movw	r30, r2
   13488:	ea 53       	subi	r30, 0x3A	; 58
   1348a:	ff 4f       	sbci	r31, 0xFF	; 255
   1348c:	0c 94 be e2 	jmp	0x1c57c	; 0x1c57c <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13490:	0e 30       	cpi	r16, 0x0E	; 14
   13492:	11 05       	cpc	r17, r1
   13494:	09 f4       	brne	.+2      	; 0x13498 <Read_Config+0x1f0>
   13496:	87 c0       	rjmp	.+270    	; 0x135a6 <Read_Config+0x2fe>
   13498:	44 f4       	brge	.+16     	; 0x134aa <Read_Config+0x202>
   1349a:	02 30       	cpi	r16, 0x02	; 2
   1349c:	11 05       	cpc	r17, r1
   1349e:	09 f4       	brne	.+2      	; 0x134a2 <Read_Config+0x1fa>
   134a0:	41 c0       	rjmp	.+130    	; 0x13524 <Read_Config+0x27c>
   134a2:	0c 30       	cpi	r16, 0x0C	; 12
   134a4:	11 05       	cpc	r17, r1
   134a6:	09 f1       	breq	.+66     	; 0x134ea <Read_Config+0x242>
   134a8:	83 c0       	rjmp	.+262    	; 0x135b0 <Read_Config+0x308>
   134aa:	03 32       	cpi	r16, 0x23	; 35
   134ac:	11 05       	cpc	r17, r1
   134ae:	e9 f0       	breq	.+58     	; 0x134ea <Read_Config+0x242>
   134b0:	04 32       	cpi	r16, 0x24	; 36
   134b2:	11 05       	cpc	r17, r1
   134b4:	29 f0       	breq	.+10     	; 0x134c0 <Read_Config+0x218>
   134b6:	00 32       	cpi	r16, 0x20	; 32
   134b8:	11 05       	cpc	r17, r1
   134ba:	09 f0       	breq	.+2      	; 0x134be <Read_Config+0x216>
   134bc:	79 c0       	rjmp	.+242    	; 0x135b0 <Read_Config+0x308>
   134be:	55 c0       	rjmp	.+170    	; 0x1356a <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   134c0:	80 e0       	ldi	r24, 0x00	; 0
   134c2:	90 e0       	ldi	r25, 0x00	; 0
   134c4:	8c dd       	rcall	.-1256   	; 0x12fde <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   134c6:	82 e0       	ldi	r24, 0x02	; 2
   134c8:	90 e0       	ldi	r25, 0x00	; 0
   134ca:	a6 dc       	rcall	.-1716   	; 0x12e18 <alloc_device>
   134cc:	6c 01       	movw	r12, r24
   134ce:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   134d0:	09 f4       	brne	.+2      	; 0x134d4 <Read_Config+0x22c>
   134d2:	8b cf       	rjmp	.-234    	; 0x133ea <Read_Config+0x142>
   134d4:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   134d6:	8c 9d       	mul	r24, r12
   134d8:	f0 01       	movw	r30, r0
   134da:	8d 9d       	mul	r24, r13
   134dc:	f0 0d       	add	r31, r0
   134de:	11 24       	eor	r1, r1
   134e0:	ec 50       	subi	r30, 0x0C	; 12
   134e2:	f1 4e       	sbci	r31, 0xE1	; 225
   134e4:	67 a0       	ldd	r6, Z+39	; 0x27
   134e6:	70 a4       	ldd	r7, Z+40	; 0x28
   134e8:	19 c0       	rjmp	.+50     	; 0x1351c <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   134ea:	80 e0       	ldi	r24, 0x00	; 0
   134ec:	90 e0       	ldi	r25, 0x00	; 0
   134ee:	77 dd       	rcall	.-1298   	; 0x12fde <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   134f0:	83 e0       	ldi	r24, 0x03	; 3
   134f2:	90 e0       	ldi	r25, 0x00	; 0
   134f4:	91 dc       	rcall	.-1758   	; 0x12e18 <alloc_device>
   134f6:	6c 01       	movw	r12, r24
   134f8:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   134fa:	c8 16       	cp	r12, r24
   134fc:	d8 06       	cpc	r13, r24
   134fe:	09 f4       	brne	.+2      	; 0x13502 <Read_Config+0x25a>
   13500:	74 cf       	rjmp	.-280    	; 0x133ea <Read_Config+0x142>
   13502:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13504:	8c 9d       	mul	r24, r12
   13506:	f0 01       	movw	r30, r0
   13508:	8d 9d       	mul	r24, r13
   1350a:	f0 0d       	add	r31, r0
   1350c:	11 24       	eor	r1, r1
   1350e:	ec 50       	subi	r30, 0x0C	; 12
   13510:	f1 4e       	sbci	r31, 0xE1	; 225
   13512:	67 a0       	ldd	r6, Z+39	; 0x27
   13514:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   13516:	b4 01       	movw	r22, r8
   13518:	c6 01       	movw	r24, r12
   1351a:	20 de       	rcall	.-960    	; 0x1315c <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   1351c:	22 24       	eor	r2, r2
   1351e:	23 94       	inc	r2
   13520:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13522:	63 cf       	rjmp	.-314    	; 0x133ea <Read_Config+0x142>
   13524:	80 e0       	ldi	r24, 0x00	; 0
   13526:	90 e0       	ldi	r25, 0x00	; 0
   13528:	5a dd       	rcall	.-1356   	; 0x12fde <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   1352a:	81 e0       	ldi	r24, 0x01	; 1
   1352c:	90 e0       	ldi	r25, 0x00	; 0
   1352e:	74 dc       	rcall	.-1816   	; 0x12e18 <alloc_device>
   13530:	6c 01       	movw	r12, r24
   13532:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   13534:	c9 16       	cp	r12, r25
   13536:	d9 06       	cpc	r13, r25
   13538:	09 f4       	brne	.+2      	; 0x1353c <Read_Config+0x294>
   1353a:	57 cf       	rjmp	.-338    	; 0x133ea <Read_Config+0x142>
   1353c:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1353e:	8c 9d       	mul	r24, r12
   13540:	f0 01       	movw	r30, r0
   13542:	8d 9d       	mul	r24, r13
   13544:	f0 0d       	add	r31, r0
   13546:	11 24       	eor	r1, r1
   13548:	ec 50       	subi	r30, 0x0C	; 12
   1354a:	f1 4e       	sbci	r31, 0xE1	; 225
   1354c:	a7 a1       	ldd	r26, Z+39	; 0x27
   1354e:	b0 a5       	ldd	r27, Z+40	; 0x28
   13550:	c8 5f       	subi	r28, 0xF8	; 248
   13552:	de 4f       	sbci	r29, 0xFE	; 254
   13554:	b9 83       	std	Y+1, r27	; 0x01
   13556:	a8 83       	st	Y, r26
   13558:	c8 50       	subi	r28, 0x08	; 8
   1355a:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   1355c:	b4 01       	movw	r22, r8
   1355e:	c6 01       	movw	r24, r12
   13560:	fd dd       	rcall	.-1030   	; 0x1315c <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13562:	aa e0       	ldi	r26, 0x0A	; 10
   13564:	2a 2e       	mov	r2, r26
   13566:	31 2c       	mov	r3, r1
   13568:	40 cf       	rjmp	.-384    	; 0x133ea <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   1356a:	80 e0       	ldi	r24, 0x00	; 0
   1356c:	90 e0       	ldi	r25, 0x00	; 0
   1356e:	37 dd       	rcall	.-1426   	; 0x12fde <push_state>
   13570:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13572:	90 e0       	ldi	r25, 0x00	; 0
   13574:	51 dc       	rcall	.-1886   	; 0x12e18 <alloc_device>
   13576:	6c 01       	movw	r12, r24
   13578:	01 96       	adiw	r24, 0x01	; 1
   1357a:	09 f4       	brne	.+2      	; 0x1357e <Read_Config+0x2d6>
                        if(index == -1)
   1357c:	36 cf       	rjmp	.-404    	; 0x133ea <Read_Config+0x142>
   1357e:	8b e2       	ldi	r24, 0x2B	; 43
   13580:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13582:	f0 01       	movw	r30, r0
   13584:	8d 9d       	mul	r24, r13
   13586:	f0 0d       	add	r31, r0
   13588:	11 24       	eor	r1, r1
   1358a:	ec 50       	subi	r30, 0x0C	; 12
   1358c:	f1 4e       	sbci	r31, 0xE1	; 225
   1358e:	27 a1       	ldd	r18, Z+39	; 0x27
   13590:	30 a5       	ldd	r19, Z+40	; 0x28
   13592:	c6 5f       	subi	r28, 0xF6	; 246
   13594:	de 4f       	sbci	r29, 0xFE	; 254
   13596:	39 83       	std	Y+1, r19	; 0x01
   13598:	28 83       	st	Y, r18
   1359a:	ca 50       	subi	r28, 0x0A	; 10
   1359c:	d1 40       	sbci	r29, 0x01	; 1
   1359e:	fe e0       	ldi	r31, 0x0E	; 14
   135a0:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   135a2:	31 2c       	mov	r3, r1
   135a4:	22 cf       	rjmp	.-444    	; 0x133ea <Read_Config+0x142>
   135a6:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   135aa:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   135ae:	1d cf       	rjmp	.-454    	; 0x133ea <Read_Config+0x142>
   135b0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   135b2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   135b4:	57 82       	std	Z+7, r5	; 0x07
   135b6:	46 82       	std	Z+6, r4	; 0x06
   135b8:	b5 82       	std	Z+5, r11	; 0x05
   135ba:	a4 82       	std	Z+4, r10	; 0x04
   135bc:	82 e1       	ldi	r24, 0x12	; 18
   135be:	9d e1       	ldi	r25, 0x1D	; 29
   135c0:	a0 e0       	ldi	r26, 0x00	; 0
   135c2:	81 83       	std	Z+1, r24	; 0x01
   135c4:	92 83       	std	Z+2, r25	; 0x02
   135c6:	a3 83       	std	Z+3, r26	; 0x03
   135c8:	4c c2       	rjmp	.+1176   	; 0x13a62 <Read_Config+0x7ba>
   135ca:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   135cc:	11 05       	cpc	r17, r1
   135ce:	39 f4       	brne	.+14     	; 0x135de <Read_Config+0x336>
   135d0:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   135d2:	90 e0       	ldi	r25, 0x00	; 0
   135d4:	04 dd       	rcall	.-1528   	; 0x12fde <push_state>
   135d6:	ef e0       	ldi	r30, 0x0F	; 15
   135d8:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   135da:	31 2c       	mov	r3, r1
   135dc:	06 cf       	rjmp	.-500    	; 0x133ea <Read_Config+0x142>
   135de:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   135e0:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   135e2:	57 82       	std	Z+7, r5	; 0x07
   135e4:	46 82       	std	Z+6, r4	; 0x06
   135e6:	b5 82       	std	Z+5, r11	; 0x05
   135e8:	a4 82       	std	Z+4, r10	; 0x04
   135ea:	88 ee       	ldi	r24, 0xE8	; 232
   135ec:	9c e1       	ldi	r25, 0x1C	; 28
   135ee:	e8 cf       	rjmp	.-48     	; 0x135c0 <Read_Config+0x318>
   135f0:	01 30       	cpi	r16, 0x01	; 1
   135f2:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   135f4:	b1 f4       	brne	.+44     	; 0x13622 <Read_Config+0x37a>
   135f6:	6f 71       	andi	r22, 0x1F	; 31
   135f8:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   135fa:	8c 9d       	mul	r24, r12
   135fc:	f0 01       	movw	r30, r0
   135fe:	8d 9d       	mul	r24, r13
   13600:	f0 0d       	add	r31, r0
   13602:	11 24       	eor	r1, r1
   13604:	ec 50       	subi	r30, 0x0C	; 12
   13606:	f1 4e       	sbci	r31, 0xE1	; 225
   13608:	61 83       	std	Z+1, r22	; 0x01
   1360a:	c6 5f       	subi	r28, 0xF6	; 246
   1360c:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   1360e:	a8 81       	ld	r26, Y
   13610:	b9 81       	ldd	r27, Y+1	; 0x01
   13612:	ca 50       	subi	r28, 0x0A	; 10
   13614:	d1 40       	sbci	r29, 0x01	; 1
   13616:	6c 93       	st	X, r22
   13618:	8f ef       	ldi	r24, 0xFF	; 255
   1361a:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   1361c:	fd 01       	movw	r30, r26
   1361e:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13620:	e4 ce       	rjmp	.-568    	; 0x133ea <Read_Config+0x142>
   13622:	ed b7       	in	r30, 0x3d	; 61
   13624:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13626:	57 82       	std	Z+7, r5	; 0x07
   13628:	46 82       	std	Z+6, r4	; 0x06
   1362a:	b5 82       	std	Z+5, r11	; 0x05
   1362c:	a4 82       	std	Z+4, r10	; 0x04
   1362e:	87 eb       	ldi	r24, 0xB7	; 183
   13630:	9c e1       	ldi	r25, 0x1C	; 28
   13632:	c6 cf       	rjmp	.-116    	; 0x135c0 <Read_Config+0x318>
   13634:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13636:	11 05       	cpc	r17, r1
   13638:	d9 f0       	breq	.+54     	; 0x13670 <Read_Config+0x3c8>
   1363a:	6c f4       	brge	.+26     	; 0x13656 <Read_Config+0x3ae>
   1363c:	09 30       	cpi	r16, 0x09	; 9
   1363e:	11 05       	cpc	r17, r1
   13640:	f1 f0       	breq	.+60     	; 0x1367e <Read_Config+0x3d6>
   13642:	0b 30       	cpi	r16, 0x0B	; 11
   13644:	11 05       	cpc	r17, r1
   13646:	49 f5       	brne	.+82     	; 0x1369a <Read_Config+0x3f2>
   13648:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   1364a:	90 e0       	ldi	r25, 0x00	; 0
   1364c:	c8 dc       	rcall	.-1648   	; 0x12fde <push_state>
   1364e:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13650:	25 2e       	mov	r2, r21
   13652:	31 2c       	mov	r3, r1
   13654:	ca ce       	rjmp	.-620    	; 0x133ea <Read_Config+0x142>
                        break;
   13656:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13658:	11 05       	cpc	r17, r1
   1365a:	c1 f0       	breq	.+48     	; 0x1368c <Read_Config+0x3e4>
   1365c:	0a 32       	cpi	r16, 0x2A	; 42
   1365e:	11 05       	cpc	r17, r1
   13660:	e1 f4       	brne	.+56     	; 0x1369a <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13662:	81 e0       	ldi	r24, 0x01	; 1
   13664:	90 e0       	ldi	r25, 0x00	; 0
   13666:	bb dc       	rcall	.-1674   	; 0x12fde <push_state>
                        state = SS80_VOLUME;
   13668:	36 e0       	ldi	r19, 0x06	; 6
   1366a:	23 2e       	mov	r2, r19
   1366c:	31 2c       	mov	r3, r1
                        break;
   1366e:	bd ce       	rjmp	.-646    	; 0x133ea <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13670:	81 e0       	ldi	r24, 0x01	; 1
   13672:	90 e0       	ldi	r25, 0x00	; 0
   13674:	b4 dc       	rcall	.-1688   	; 0x12fde <push_state>
                        state = SS80_HEADER;
   13676:	72 e0       	ldi	r23, 0x02	; 2
   13678:	27 2e       	mov	r2, r23
   1367a:	31 2c       	mov	r3, r1
                        break;
   1367c:	b6 ce       	rjmp	.-660    	; 0x133ea <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   1367e:	81 e0       	ldi	r24, 0x01	; 1
   13680:	90 e0       	ldi	r25, 0x00	; 0
   13682:	ad dc       	rcall	.-1702   	; 0x12fde <push_state>
   13684:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   13686:	26 2e       	mov	r2, r22
   13688:	31 2c       	mov	r3, r1
   1368a:	af ce       	rjmp	.-674    	; 0x133ea <Read_Config+0x142>
                        break;
   1368c:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   1368e:	90 e0       	ldi	r25, 0x00	; 0
   13690:	a6 dc       	rcall	.-1716   	; 0x12fde <push_state>
   13692:	45 e0       	ldi	r20, 0x05	; 5
   13694:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   13696:	31 2c       	mov	r3, r1
   13698:	a8 ce       	rjmp	.-688    	; 0x133ea <Read_Config+0x142>
   1369a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1369c:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1369e:	57 82       	std	Z+7, r5	; 0x07
   136a0:	46 82       	std	Z+6, r4	; 0x06
   136a2:	b5 82       	std	Z+5, r11	; 0x05
   136a4:	a4 82       	std	Z+4, r10	; 0x04
   136a6:	8a e8       	ldi	r24, 0x8A	; 138
   136a8:	9c e1       	ldi	r25, 0x1C	; 28
   136aa:	8a cf       	rjmp	.-236    	; 0x135c0 <Read_Config+0x318>
   136ac:	02 31       	cpi	r16, 0x12	; 18
   136ae:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   136b0:	f1 f0       	breq	.+60     	; 0x136ee <Read_Config+0x446>
   136b2:	0f 31       	cpi	r16, 0x1F	; 31
   136b4:	11 05       	cpc	r17, r1
   136b6:	79 f0       	breq	.+30     	; 0x136d6 <Read_Config+0x42e>
   136b8:	01 30       	cpi	r16, 0x01	; 1
   136ba:	11 05       	cpc	r17, r1
   136bc:	e9 f4       	brne	.+58     	; 0x136f8 <Read_Config+0x450>
   136be:	6f 71       	andi	r22, 0x1F	; 31
   136c0:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   136c2:	8c 9d       	mul	r24, r12
   136c4:	f0 01       	movw	r30, r0
   136c6:	8d 9d       	mul	r24, r13
   136c8:	f0 0d       	add	r31, r0
   136ca:	11 24       	eor	r1, r1
   136cc:	ec 50       	subi	r30, 0x0C	; 12
   136ce:	f1 4e       	sbci	r31, 0xE1	; 225
   136d0:	61 83       	std	Z+1, r22	; 0x01
   136d2:	d3 01       	movw	r26, r6
   136d4:	37 c1       	rjmp	.+622    	; 0x13944 <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   136d6:	67 70       	andi	r22, 0x07	; 7
   136d8:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   136da:	8c 9d       	mul	r24, r12
   136dc:	f0 01       	movw	r30, r0
   136de:	8d 9d       	mul	r24, r13
   136e0:	f0 0d       	add	r31, r0
   136e2:	11 24       	eor	r1, r1
   136e4:	ec 50       	subi	r30, 0x0C	; 12
   136e6:	f1 4e       	sbci	r31, 0xE1	; 225
   136e8:	62 83       	std	Z+2, r22	; 0x02
   136ea:	f3 01       	movw	r30, r6
   136ec:	2d c1       	rjmp	.+602    	; 0x13948 <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   136ee:	c4 01       	movw	r24, r8
   136f0:	0e 94 1f 30 	call	0x603e	; 0x603e <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   136f4:	f3 01       	movw	r30, r6
   136f6:	33 c1       	rjmp	.+614    	; 0x1395e <Read_Config+0x6b6>
   136f8:	ed b7       	in	r30, 0x3d	; 61
   136fa:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   136fc:	57 82       	std	Z+7, r5	; 0x07
   136fe:	46 82       	std	Z+6, r4	; 0x06
   13700:	b5 82       	std	Z+5, r11	; 0x05
   13702:	a4 82       	std	Z+4, r10	; 0x04
   13704:	8c e5       	ldi	r24, 0x5C	; 92
   13706:	9c e1       	ldi	r25, 0x1C	; 28
   13708:	5b cf       	rjmp	.-330    	; 0x135c0 <Read_Config+0x318>
   1370a:	07 31       	cpi	r16, 0x17	; 23
   1370c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   1370e:	21 f4       	brne	.+8      	; 0x13718 <Read_Config+0x470>
   13710:	96 2f       	mov	r25, r22
   13712:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   13714:	f3 01       	movw	r30, r6
   13716:	3f c1       	rjmp	.+638    	; 0x13996 <Read_Config+0x6ee>
   13718:	ed b7       	in	r30, 0x3d	; 61
   1371a:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1371c:	57 82       	std	Z+7, r5	; 0x07
   1371e:	46 82       	std	Z+6, r4	; 0x06
   13720:	b5 82       	std	Z+5, r11	; 0x05
   13722:	a4 82       	std	Z+4, r10	; 0x04
   13724:	8e e2       	ldi	r24, 0x2E	; 46
   13726:	9c e1       	ldi	r25, 0x1C	; 28
   13728:	4b cf       	rjmp	.-362    	; 0x135c0 <Read_Config+0x318>
   1372a:	06 32       	cpi	r16, 0x26	; 38
   1372c:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   1372e:	71 f0       	breq	.+28     	; 0x1374c <Read_Config+0x4a4>
   13730:	08 32       	cpi	r16, 0x28	; 40
   13732:	11 05       	cpc	r17, r1
   13734:	39 f0       	breq	.+14     	; 0x13744 <Read_Config+0x49c>
   13736:	05 32       	cpi	r16, 0x25	; 37
   13738:	11 05       	cpc	r17, r1
   1373a:	59 f4       	brne	.+22     	; 0x13752 <Read_Config+0x4aa>
   1373c:	96 2f       	mov	r25, r22
   1373e:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13740:	f3 01       	movw	r30, r6
   13742:	5c c1       	rjmp	.+696    	; 0x139fc <Read_Config+0x754>
   13744:	96 2f       	mov	r25, r22
   13746:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13748:	f3 01       	movw	r30, r6
   1374a:	55 c1       	rjmp	.+682    	; 0x139f6 <Read_Config+0x74e>
   1374c:	f3 01       	movw	r30, r6
   1374e:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13750:	4c ce       	rjmp	.-872    	; 0x133ea <Read_Config+0x142>
   13752:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13754:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13756:	57 82       	std	Z+7, r5	; 0x07
   13758:	46 82       	std	Z+6, r4	; 0x06
   1375a:	b5 82       	std	Z+5, r11	; 0x05
   1375c:	a4 82       	std	Z+4, r10	; 0x04
   1375e:	8c ef       	ldi	r24, 0xFC	; 252
   13760:	9b e1       	ldi	r25, 0x1B	; 27
   13762:	2e cf       	rjmp	.-420    	; 0x135c0 <Read_Config+0x318>
   13764:	0a 30       	cpi	r16, 0x0A	; 10
   13766:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13768:	09 f4       	brne	.+2      	; 0x1376c <Read_Config+0x4c4>
   1376a:	45 c0       	rjmp	.+138    	; 0x137f6 <Read_Config+0x54e>
   1376c:	d4 f4       	brge	.+52     	; 0x137a2 <Read_Config+0x4fa>
   1376e:	05 30       	cpi	r16, 0x05	; 5
   13770:	11 05       	cpc	r17, r1
   13772:	d1 f1       	breq	.+116    	; 0x137e8 <Read_Config+0x540>
   13774:	64 f4       	brge	.+24     	; 0x1378e <Read_Config+0x4e6>
   13776:	01 15       	cp	r16, r1
   13778:	11 05       	cpc	r17, r1
   1377a:	09 f4       	brne	.+2      	; 0x1377e <Read_Config+0x4d6>
   1377c:	40 c0       	rjmp	.+128    	; 0x137fe <Read_Config+0x556>
   1377e:	04 30       	cpi	r16, 0x04	; 4
   13780:	11 05       	cpc	r17, r1
   13782:	09 f0       	breq	.+2      	; 0x13786 <Read_Config+0x4de>
   13784:	46 c0       	rjmp	.+140    	; 0x13812 <Read_Config+0x56a>
   13786:	f3 01       	movw	r30, r6
   13788:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1378a:	75 8b       	std	Z+21, r23	; 0x15
   1378c:	2e ce       	rjmp	.-932    	; 0x133ea <Read_Config+0x142>
   1378e:	06 30       	cpi	r16, 0x06	; 6
                        break;
   13790:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13792:	71 f1       	breq	.+92     	; 0x137f0 <Read_Config+0x548>
   13794:	07 30       	cpi	r16, 0x07	; 7
   13796:	11 05       	cpc	r17, r1
   13798:	e1 f5       	brne	.+120    	; 0x13812 <Read_Config+0x56a>
   1379a:	f3 01       	movw	r30, r6
   1379c:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   1379e:	71 8b       	std	Z+17, r23	; 0x11
   137a0:	24 ce       	rjmp	.-952    	; 0x133ea <Read_Config+0x142>
   137a2:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   137a4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137a6:	79 f1       	breq	.+94     	; 0x13806 <Read_Config+0x55e>
   137a8:	4c f4       	brge	.+18     	; 0x137bc <Read_Config+0x514>
   137aa:	0f 30       	cpi	r16, 0x0F	; 15
   137ac:	11 05       	cpc	r17, r1
   137ae:	b1 f0       	breq	.+44     	; 0x137dc <Read_Config+0x534>
   137b0:	03 31       	cpi	r16, 0x13	; 19
   137b2:	11 05       	cpc	r17, r1
   137b4:	71 f5       	brne	.+92     	; 0x13812 <Read_Config+0x56a>
   137b6:	f3 01       	movw	r30, r6
   137b8:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   137ba:	17 ce       	rjmp	.-978    	; 0x133ea <Read_Config+0x142>
   137bc:	01 32       	cpi	r16, 0x21	; 33
                        break;
   137be:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137c0:	29 f1       	breq	.+74     	; 0x1380c <Read_Config+0x564>
   137c2:	09 32       	cpi	r16, 0x29	; 41
   137c4:	11 05       	cpc	r17, r1
   137c6:	39 f0       	breq	.+14     	; 0x137d6 <Read_Config+0x52e>
   137c8:	0e 31       	cpi	r16, 0x1E	; 30
   137ca:	11 05       	cpc	r17, r1
   137cc:	11 f5       	brne	.+68     	; 0x13812 <Read_Config+0x56a>
   137ce:	f3 01       	movw	r30, r6
   137d0:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   137d2:	71 8f       	std	Z+25, r23	; 0x19
   137d4:	0a ce       	rjmp	.-1004   	; 0x133ea <Read_Config+0x142>
   137d6:	f3 01       	movw	r30, r6
                        break;
   137d8:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   137da:	07 ce       	rjmp	.-1010   	; 0x133ea <Read_Config+0x142>
   137dc:	f3 01       	movw	r30, r6
                        break;
   137de:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   137e0:	75 87       	std	Z+13, r23	; 0x0d
   137e2:	86 87       	std	Z+14, r24	; 0x0e
   137e4:	97 87       	std	Z+15, r25	; 0x0f
   137e6:	01 ce       	rjmp	.-1022   	; 0x133ea <Read_Config+0x142>
   137e8:	61 70       	andi	r22, 0x01	; 1
                        break;
   137ea:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   137ec:	62 8b       	std	Z+18, r22	; 0x12
   137ee:	fd cd       	rjmp	.-1030   	; 0x133ea <Read_Config+0x142>
   137f0:	f3 01       	movw	r30, r6
                        break;
   137f2:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   137f4:	fa cd       	rjmp	.-1036   	; 0x133ea <Read_Config+0x142>
   137f6:	f3 01       	movw	r30, r6
                        break;
   137f8:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   137fa:	77 8b       	std	Z+23, r23	; 0x17
   137fc:	f6 cd       	rjmp	.-1044   	; 0x133ea <Read_Config+0x142>
   137fe:	f3 01       	movw	r30, r6
                        break;
   13800:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   13802:	73 8f       	std	Z+27, r23	; 0x1b
   13804:	f2 cd       	rjmp	.-1052   	; 0x133ea <Read_Config+0x142>
   13806:	f3 01       	movw	r30, r6
                        break;
   13808:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   1380a:	ef cd       	rjmp	.-1058   	; 0x133ea <Read_Config+0x142>
   1380c:	f3 01       	movw	r30, r6
                        break;
   1380e:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13810:	ec cd       	rjmp	.-1064   	; 0x133ea <Read_Config+0x142>
   13812:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13814:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13816:	57 82       	std	Z+7, r5	; 0x07
   13818:	46 82       	std	Z+6, r4	; 0x06
   1381a:	b5 82       	std	Z+5, r11	; 0x05
   1381c:	a4 82       	std	Z+4, r10	; 0x04
   1381e:	80 ed       	ldi	r24, 0xD0	; 208
   13820:	9b e1       	ldi	r25, 0x1B	; 27
   13822:	ce ce       	rjmp	.-612    	; 0x135c0 <Read_Config+0x318>
   13824:	0a 31       	cpi	r16, 0x1A	; 26
   13826:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13828:	b9 f0       	breq	.+46     	; 0x13858 <Read_Config+0x5b0>
   1382a:	64 f4       	brge	.+24     	; 0x13844 <Read_Config+0x59c>
   1382c:	08 31       	cpi	r16, 0x18	; 24
   1382e:	11 05       	cpc	r17, r1
   13830:	e1 f0       	breq	.+56     	; 0x1386a <Read_Config+0x5c2>
   13832:	09 31       	cpi	r16, 0x19	; 25
   13834:	11 05       	cpc	r17, r1
   13836:	e1 f4       	brne	.+56     	; 0x13870 <Read_Config+0x5c8>
   13838:	f3 01       	movw	r30, r6
   1383a:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   1383c:	77 a3       	std	Z+39, r23	; 0x27
   1383e:	80 a7       	std	Z+40, r24	; 0x28
   13840:	91 a7       	std	Z+41, r25	; 0x29
   13842:	d3 cd       	rjmp	.-1114   	; 0x133ea <Read_Config+0x142>
   13844:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   13846:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13848:	69 f0       	breq	.+26     	; 0x13864 <Read_Config+0x5bc>
   1384a:	0d 31       	cpi	r16, 0x1D	; 29
   1384c:	11 05       	cpc	r17, r1
   1384e:	81 f4       	brne	.+32     	; 0x13870 <Read_Config+0x5c8>
   13850:	f3 01       	movw	r30, r6
   13852:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13854:	75 a3       	std	Z+37, r23	; 0x25
   13856:	c9 cd       	rjmp	.-1134   	; 0x133ea <Read_Config+0x142>
   13858:	f3 01       	movw	r30, r6
                        break;
   1385a:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   1385c:	70 a3       	std	Z+32, r23	; 0x20
   1385e:	81 a3       	std	Z+33, r24	; 0x21
   13860:	92 a3       	std	Z+34, r25	; 0x22
   13862:	c3 cd       	rjmp	.-1146   	; 0x133ea <Read_Config+0x142>
   13864:	f3 01       	movw	r30, r6
                        break;
   13866:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13868:	c0 cd       	rjmp	.-1152   	; 0x133ea <Read_Config+0x142>
   1386a:	f3 01       	movw	r30, r6
                        break;
   1386c:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   1386e:	bd cd       	rjmp	.-1158   	; 0x133ea <Read_Config+0x142>
   13870:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13872:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13874:	57 82       	std	Z+7, r5	; 0x07
   13876:	46 82       	std	Z+6, r4	; 0x06
   13878:	b5 82       	std	Z+5, r11	; 0x05
   1387a:	a4 82       	std	Z+4, r10	; 0x04
   1387c:	c3 5e       	subi	r28, 0xE3	; 227
   1387e:	de 4f       	sbci	r29, 0xFE	; 254
   13880:	28 81       	ld	r18, Y
   13882:	39 81       	ldd	r19, Y+1	; 0x01
   13884:	4a 81       	ldd	r20, Y+2	; 0x02
   13886:	cd 51       	subi	r28, 0x1D	; 29
   13888:	d1 40       	sbci	r29, 0x01	; 1
   1388a:	e8 c0       	rjmp	.+464    	; 0x13a5c <Read_Config+0x7b4>
   1388c:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   1388e:	11 05       	cpc	r17, r1
   13890:	a1 f0       	breq	.+40     	; 0x138ba <Read_Config+0x612>
   13892:	05 31       	cpi	r16, 0x15	; 21
   13894:	11 05       	cpc	r17, r1
   13896:	51 f0       	breq	.+20     	; 0x138ac <Read_Config+0x604>
   13898:	09 30       	cpi	r16, 0x09	; 9
   1389a:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   1389c:	a9 f4       	brne	.+42     	; 0x138c8 <Read_Config+0x620>
   1389e:	8a e0       	ldi	r24, 0x0A	; 10
   138a0:	90 e0       	ldi	r25, 0x00	; 0
   138a2:	9d db       	rcall	.-2246   	; 0x12fde <push_state>
                        state = AMIGO_CONFIG;
   138a4:	9c e0       	ldi	r25, 0x0C	; 12
   138a6:	29 2e       	mov	r2, r25
   138a8:	31 2c       	mov	r3, r1
                        break;
   138aa:	9f cd       	rjmp	.-1218   	; 0x133ea <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   138ac:	8a e0       	ldi	r24, 0x0A	; 10
   138ae:	90 e0       	ldi	r25, 0x00	; 0
   138b0:	96 db       	rcall	.-2260   	; 0x12fde <push_state>
   138b2:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   138b4:	22 2e       	mov	r2, r18
   138b6:	31 2c       	mov	r3, r1
   138b8:	98 cd       	rjmp	.-1232   	; 0x133ea <Read_Config+0x142>
                        break;
   138ba:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   138bc:	90 e0       	ldi	r25, 0x00	; 0
   138be:	8f db       	rcall	.-2274   	; 0x12fde <push_state>
   138c0:	8d e0       	ldi	r24, 0x0D	; 13
   138c2:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   138c4:	31 2c       	mov	r3, r1
   138c6:	91 cd       	rjmp	.-1246   	; 0x133ea <Read_Config+0x142>
   138c8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   138ca:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   138cc:	57 82       	std	Z+7, r5	; 0x07
   138ce:	46 82       	std	Z+6, r4	; 0x06
   138d0:	b5 82       	std	Z+5, r11	; 0x05
   138d2:	a4 82       	std	Z+4, r10	; 0x04
   138d4:	c6 5e       	subi	r28, 0xE6	; 230
   138d6:	de 4f       	sbci	r29, 0xFE	; 254
   138d8:	28 81       	ld	r18, Y
   138da:	39 81       	ldd	r19, Y+1	; 0x01
   138dc:	4a 81       	ldd	r20, Y+2	; 0x02
   138de:	ca 51       	subi	r28, 0x1A	; 26
   138e0:	d1 40       	sbci	r29, 0x01	; 1
   138e2:	bc c0       	rjmp	.+376    	; 0x13a5c <Read_Config+0x7b4>
   138e4:	00 31       	cpi	r16, 0x10	; 16
   138e6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   138e8:	09 f4       	brne	.+2      	; 0x138ec <Read_Config+0x644>
   138ea:	7f cd       	rjmp	.-1282   	; 0x133ea <Read_Config+0x142>
   138ec:	a4 f4       	brge	.+40     	; 0x13916 <Read_Config+0x66e>
   138ee:	01 30       	cpi	r16, 0x01	; 1
   138f0:	11 05       	cpc	r17, r1
   138f2:	c1 f5       	brne	.+112    	; 0x13964 <Read_Config+0x6bc>
   138f4:	6f 71       	andi	r22, 0x1F	; 31
   138f6:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   138f8:	8c 9d       	mul	r24, r12
   138fa:	f0 01       	movw	r30, r0
   138fc:	8d 9d       	mul	r24, r13
   138fe:	f0 0d       	add	r31, r0
   13900:	11 24       	eor	r1, r1
   13902:	ec 50       	subi	r30, 0x0C	; 12
   13904:	f1 4e       	sbci	r31, 0xE1	; 225
   13906:	61 83       	std	Z+1, r22	; 0x01
   13908:	c8 5f       	subi	r28, 0xF8	; 248
   1390a:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   1390c:	a8 81       	ld	r26, Y
   1390e:	b9 81       	ldd	r27, Y+1	; 0x01
   13910:	c8 50       	subi	r28, 0x08	; 8
   13912:	d1 40       	sbci	r29, 0x01	; 1
   13914:	17 c0       	rjmp	.+46     	; 0x13944 <Read_Config+0x69c>
   13916:	02 31       	cpi	r16, 0x12	; 18
   13918:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1391a:	c1 f0       	breq	.+48     	; 0x1394c <Read_Config+0x6a4>
   1391c:	0f 31       	cpi	r16, 0x1F	; 31
   1391e:	11 05       	cpc	r17, r1
   13920:	09 f5       	brne	.+66     	; 0x13964 <Read_Config+0x6bc>
   13922:	67 70       	andi	r22, 0x07	; 7
   13924:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13926:	8c 9d       	mul	r24, r12
   13928:	f0 01       	movw	r30, r0
   1392a:	8d 9d       	mul	r24, r13
   1392c:	f0 0d       	add	r31, r0
   1392e:	11 24       	eor	r1, r1
   13930:	ec 50       	subi	r30, 0x0C	; 12
   13932:	f1 4e       	sbci	r31, 0xE1	; 225
   13934:	62 83       	std	Z+2, r22	; 0x02
   13936:	c8 5f       	subi	r28, 0xF8	; 248
   13938:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   1393a:	e8 81       	ld	r30, Y
   1393c:	f9 81       	ldd	r31, Y+1	; 0x01
   1393e:	c8 50       	subi	r28, 0x08	; 8
   13940:	d1 40       	sbci	r29, 0x01	; 1
   13942:	02 c0       	rjmp	.+4      	; 0x13948 <Read_Config+0x6a0>
   13944:	6c 93       	st	X, r22
   13946:	51 cd       	rjmp	.-1374   	; 0x133ea <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13948:	61 83       	std	Z+1, r22	; 0x01
                        break;
   1394a:	4f cd       	rjmp	.-1378   	; 0x133ea <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   1394c:	c4 01       	movw	r24, r8
                        break;
   1394e:	0e 94 1f 30 	call	0x603e	; 0x603e <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13952:	c8 5f       	subi	r28, 0xF8	; 248
   13954:	de 4f       	sbci	r29, 0xFE	; 254
   13956:	e8 81       	ld	r30, Y
   13958:	f9 81       	ldd	r31, Y+1	; 0x01
   1395a:	c8 50       	subi	r28, 0x08	; 8
   1395c:	d1 40       	sbci	r29, 0x01	; 1
   1395e:	93 83       	std	Z+3, r25	; 0x03
   13960:	82 83       	std	Z+2, r24	; 0x02
   13962:	43 cd       	rjmp	.-1402   	; 0x133ea <Read_Config+0x142>
   13964:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13966:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13968:	57 82       	std	Z+7, r5	; 0x07
   1396a:	46 82       	std	Z+6, r4	; 0x06
   1396c:	b5 82       	std	Z+5, r11	; 0x05
   1396e:	a4 82       	std	Z+4, r10	; 0x04
   13970:	c9 5e       	subi	r28, 0xE9	; 233
   13972:	de 4f       	sbci	r29, 0xFE	; 254
   13974:	28 81       	ld	r18, Y
   13976:	39 81       	ldd	r19, Y+1	; 0x01
   13978:	4a 81       	ldd	r20, Y+2	; 0x02
   1397a:	c7 51       	subi	r28, 0x17	; 23
   1397c:	d1 40       	sbci	r29, 0x01	; 1
   1397e:	6e c0       	rjmp	.+220    	; 0x13a5c <Read_Config+0x7b4>
   13980:	07 31       	cpi	r16, 0x17	; 23
   13982:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13984:	59 f4       	brne	.+22     	; 0x1399c <Read_Config+0x6f4>
   13986:	96 2f       	mov	r25, r22
   13988:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   1398a:	c8 5f       	subi	r28, 0xF8	; 248
   1398c:	de 4f       	sbci	r29, 0xFE	; 254
   1398e:	e8 81       	ld	r30, Y
   13990:	f9 81       	ldd	r31, Y+1	; 0x01
   13992:	c8 50       	subi	r28, 0x08	; 8
   13994:	d1 40       	sbci	r29, 0x01	; 1
   13996:	94 83       	std	Z+4, r25	; 0x04
   13998:	85 83       	std	Z+5, r24	; 0x05
   1399a:	27 cd       	rjmp	.-1458   	; 0x133ea <Read_Config+0x142>
   1399c:	ed b7       	in	r30, 0x3d	; 61
   1399e:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   139a0:	57 82       	std	Z+7, r5	; 0x07
   139a2:	46 82       	std	Z+6, r4	; 0x06
   139a4:	b5 82       	std	Z+5, r11	; 0x05
   139a6:	a4 82       	std	Z+4, r10	; 0x04
   139a8:	cc 5e       	subi	r28, 0xEC	; 236
   139aa:	de 4f       	sbci	r29, 0xFE	; 254
   139ac:	28 81       	ld	r18, Y
   139ae:	39 81       	ldd	r19, Y+1	; 0x01
   139b0:	4a 81       	ldd	r20, Y+2	; 0x02
   139b2:	c4 51       	subi	r28, 0x14	; 20
   139b4:	d1 40       	sbci	r29, 0x01	; 1
   139b6:	52 c0       	rjmp	.+164    	; 0x13a5c <Read_Config+0x7b4>
   139b8:	0d 30       	cpi	r16, 0x0D	; 13
   139ba:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   139bc:	59 f1       	breq	.+86     	; 0x13a14 <Read_Config+0x76c>
   139be:	64 f4       	brge	.+24     	; 0x139d8 <Read_Config+0x730>
   139c0:	08 30       	cpi	r16, 0x08	; 8
   139c2:	11 05       	cpc	r17, r1
   139c4:	81 f5       	brne	.+96     	; 0x13a26 <Read_Config+0x77e>
   139c6:	96 2f       	mov	r25, r22
   139c8:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   139ca:	c8 5f       	subi	r28, 0xF8	; 248
   139cc:	de 4f       	sbci	r29, 0xFE	; 254
   139ce:	e8 81       	ld	r30, Y
   139d0:	f9 81       	ldd	r31, Y+1	; 0x01
   139d2:	c8 50       	subi	r28, 0x08	; 8
   139d4:	d1 40       	sbci	r29, 0x01	; 1
   139d6:	0f c0       	rjmp	.+30     	; 0x139f6 <Read_Config+0x74e>
   139d8:	06 31       	cpi	r16, 0x16	; 22
   139da:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   139dc:	91 f0       	breq	.+36     	; 0x13a02 <Read_Config+0x75a>
   139de:	02 32       	cpi	r16, 0x22	; 34
   139e0:	11 05       	cpc	r17, r1
   139e2:	09 f5       	brne	.+66     	; 0x13a26 <Read_Config+0x77e>
   139e4:	96 2f       	mov	r25, r22
   139e6:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   139e8:	c8 5f       	subi	r28, 0xF8	; 248
   139ea:	de 4f       	sbci	r29, 0xFE	; 254
   139ec:	e8 81       	ld	r30, Y
   139ee:	f9 81       	ldd	r31, Y+1	; 0x01
   139f0:	c8 50       	subi	r28, 0x08	; 8
   139f2:	d1 40       	sbci	r29, 0x01	; 1
   139f4:	03 c0       	rjmp	.+6      	; 0x139fc <Read_Config+0x754>
   139f6:	96 83       	std	Z+6, r25	; 0x06
   139f8:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   139fa:	f7 cc       	rjmp	.-1554   	; 0x133ea <Read_Config+0x142>
   139fc:	90 87       	std	Z+8, r25	; 0x08
                        break;
   139fe:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a00:	f4 cc       	rjmp	.-1560   	; 0x133ea <Read_Config+0x142>
   13a02:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a04:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13a06:	e8 81       	ld	r30, Y
   13a08:	f9 81       	ldd	r31, Y+1	; 0x01
   13a0a:	c8 50       	subi	r28, 0x08	; 8
   13a0c:	d1 40       	sbci	r29, 0x01	; 1
   13a0e:	62 87       	std	Z+10, r22	; 0x0a
   13a10:	73 87       	std	Z+11, r23	; 0x0b
   13a12:	eb cc       	rjmp	.-1578   	; 0x133ea <Read_Config+0x142>
   13a14:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a16:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13a18:	e8 81       	ld	r30, Y
   13a1a:	f9 81       	ldd	r31, Y+1	; 0x01
   13a1c:	c8 50       	subi	r28, 0x08	; 8
   13a1e:	d1 40       	sbci	r29, 0x01	; 1
   13a20:	64 87       	std	Z+12, r22	; 0x0c
   13a22:	75 87       	std	Z+13, r23	; 0x0d
   13a24:	e2 cc       	rjmp	.-1596   	; 0x133ea <Read_Config+0x142>
   13a26:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a28:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13a2a:	57 82       	std	Z+7, r5	; 0x07
   13a2c:	46 82       	std	Z+6, r4	; 0x06
   13a2e:	b5 82       	std	Z+5, r11	; 0x05
   13a30:	a4 82       	std	Z+4, r10	; 0x04
   13a32:	cf 5e       	subi	r28, 0xEF	; 239
   13a34:	de 4f       	sbci	r29, 0xFE	; 254
   13a36:	28 81       	ld	r18, Y
   13a38:	39 81       	ldd	r19, Y+1	; 0x01
   13a3a:	4a 81       	ldd	r20, Y+2	; 0x02
   13a3c:	c1 51       	subi	r28, 0x11	; 17
   13a3e:	d1 40       	sbci	r29, 0x01	; 1
   13a40:	0d c0       	rjmp	.+26     	; 0x13a5c <Read_Config+0x7b4>
   13a42:	ed b7       	in	r30, 0x3d	; 61
   13a44:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13a46:	57 82       	std	Z+7, r5	; 0x07
   13a48:	46 82       	std	Z+6, r4	; 0x06
   13a4a:	b5 82       	std	Z+5, r11	; 0x05
   13a4c:	a4 82       	std	Z+4, r10	; 0x04
   13a4e:	c2 5f       	subi	r28, 0xF2	; 242
   13a50:	de 4f       	sbci	r29, 0xFE	; 254
   13a52:	28 81       	ld	r18, Y
   13a54:	39 81       	ldd	r19, Y+1	; 0x01
   13a56:	4a 81       	ldd	r20, Y+2	; 0x02
   13a58:	ce 50       	subi	r28, 0x0E	; 14
   13a5a:	d1 40       	sbci	r29, 0x01	; 1
   13a5c:	21 83       	std	Z+1, r18	; 0x01
   13a5e:	32 83       	std	Z+2, r19	; 0x02
   13a60:	43 83       	std	Z+3, r20	; 0x03
   13a62:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   13a66:	ff ef       	ldi	r31, 0xFF	; 255
   13a68:	ef 1a       	sub	r14, r31
                ++errors;
   13a6a:	ff 0a       	sbc	r15, r31
   13a6c:	be cc       	rjmp	.-1668   	; 0x133ea <Read_Config+0x142>
   13a6e:	21 14       	cp	r2, r1
                break;
   13a70:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13a72:	79 f0       	breq	.+30     	; 0x13a92 <Read_Config+0x7ea>
   13a74:	ed b7       	in	r30, 0x3d	; 61
   13a76:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13a78:	55 82       	std	Z+5, r5	; 0x05
   13a7a:	44 82       	std	Z+4, r4	; 0x04
   13a7c:	81 ea       	ldi	r24, 0xA1	; 161
   13a7e:	9a e1       	ldi	r25, 0x1A	; 26
   13a80:	a0 e0       	ldi	r26, 0x00	; 0
   13a82:	81 83       	std	Z+1, r24	; 0x01
   13a84:	92 83       	std	Z+2, r25	; 0x02
   13a86:	a3 83       	std	Z+3, r26	; 0x03
   13a88:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   13a8c:	ff ef       	ldi	r31, 0xFF	; 255
   13a8e:	ef 1a       	sub	r14, r31
        ++errors;
   13a90:	ff 0a       	sbc	r15, r31
   13a92:	ed b7       	in	r30, 0x3d	; 61
   13a94:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13a96:	55 82       	std	Z+5, r5	; 0x05
   13a98:	44 82       	std	Z+4, r4	; 0x04
   13a9a:	84 e8       	ldi	r24, 0x84	; 132
   13a9c:	9a e1       	ldi	r25, 0x1A	; 26
   13a9e:	a0 e0       	ldi	r26, 0x00	; 0
   13aa0:	81 83       	std	Z+1, r24	; 0x01
   13aa2:	92 83       	std	Z+2, r25	; 0x02
   13aa4:	a3 83       	std	Z+3, r26	; 0x03
   13aa6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   13aaa:	e1 14       	cp	r14, r1
   13aac:	f1 04       	cpc	r15, r1
    if(errors)
   13aae:	61 f0       	breq	.+24     	; 0x13ac8 <Read_Config+0x820>
   13ab0:	ed b7       	in	r30, 0x3d	; 61
   13ab2:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13ab4:	f5 82       	std	Z+5, r15	; 0x05
   13ab6:	e4 82       	std	Z+4, r14	; 0x04
   13ab8:	8d e5       	ldi	r24, 0x5D	; 93
   13aba:	9a e1       	ldi	r25, 0x1A	; 26
   13abc:	a0 e0       	ldi	r26, 0x00	; 0
   13abe:	81 83       	std	Z+1, r24	; 0x01
   13ac0:	92 83       	std	Z+2, r25	; 0x02
   13ac2:	a3 83       	std	Z+3, r26	; 0x03
   13ac4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   13ac8:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13aca:	de 4f       	sbci	r29, 0xFE	; 254
   13acc:	88 81       	ld	r24, Y
   13ace:	99 81       	ldd	r25, Y+1	; 0x01
   13ad0:	cc 50       	subi	r28, 0x0C	; 12
   13ad2:	d1 40       	sbci	r29, 0x01	; 1
   13ad4:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
   13ad8:	01 96       	adiw	r24, 0x01	; 1
   13ada:	39 f4       	brne	.+14     	; 0x13aea <Read_Config+0x842>
   13adc:	85 e6       	ldi	r24, 0x65	; 101
    {
        perror("Read_Config - close error");
   13ade:	9e e0       	ldi	r25, 0x0E	; 14
   13ae0:	0e 94 a0 76 	call	0xed40	; 0xed40 <perror>
   13ae4:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13ae6:	e2 1a       	sub	r14, r18
   13ae8:	f2 0a       	sbc	r15, r18
   13aea:	48 db       	rcall	.-2416   	; 0x1317c <Post_Config>
    }

// Post process device values
    Post_Config();
   13aec:	c7 01       	movw	r24, r14
   13aee:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13af0:	de 4f       	sbci	r29, 0xFE	; 254
}
   13af2:	e2 e1       	ldi	r30, 0x12	; 18
   13af4:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00013af8 <format_drives>:
   13af8:	2f 92       	push	r2
   13afa:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13afc:	4f 92       	push	r4
   13afe:	5f 92       	push	r5
   13b00:	6f 92       	push	r6
   13b02:	7f 92       	push	r7
   13b04:	8f 92       	push	r8
   13b06:	af 92       	push	r10
   13b08:	bf 92       	push	r11
   13b0a:	cf 92       	push	r12
   13b0c:	df 92       	push	r13
   13b0e:	ef 92       	push	r14
   13b10:	ff 92       	push	r15
   13b12:	0f 93       	push	r16
   13b14:	1f 93       	push	r17
   13b16:	cf 93       	push	r28
   13b18:	df 93       	push	r29
   13b1a:	cd b7       	in	r28, 0x3d	; 61
   13b1c:	de b7       	in	r29, 0x3e	; 62
   13b1e:	ce 56       	subi	r28, 0x6E	; 110
   13b20:	d1 09       	sbc	r29, r1
   13b22:	0f b6       	in	r0, 0x3f	; 63
   13b24:	f8 94       	cli
   13b26:	de bf       	out	0x3e, r29	; 62
   13b28:	0f be       	out	0x3f, r0	; 63
   13b2a:	cd bf       	out	0x3d, r28	; 61
   13b2c:	84 ef       	ldi	r24, 0xF4	; 244
   13b2e:	c8 2e       	mov	r12, r24
   13b30:	8e e1       	ldi	r24, 0x1E	; 30
   13b32:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13b34:	a0 96       	adiw	r28, 0x20	; 32
   13b36:	1f ae       	std	Y+63, r1	; 0x3f
   13b38:	1e ae       	std	Y+62, r1	; 0x3e
   13b3a:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13b3c:	6e 96       	adiw	r28, 0x1e	; 30
   13b3e:	1f ae       	std	Y+63, r1	; 0x3f
   13b40:	1e ae       	std	Y+62, r1	; 0x3e
   13b42:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13b44:	6c 96       	adiw	r28, 0x1c	; 28
   13b46:	1f ae       	std	Y+63, r1	; 0x3f
   13b48:	1e ae       	std	Y+62, r1	; 0x3e
   13b4a:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13b4c:	81 e1       	ldi	r24, 0x11	; 17
   13b4e:	97 e1       	ldi	r25, 0x17	; 23
   13b50:	9c 01       	movw	r18, r24
   13b52:	40 e0       	ldi	r20, 0x00	; 0
   13b54:	a3 96       	adiw	r28, 0x23	; 35
   13b56:	2d af       	std	Y+61, r18	; 0x3d
   13b58:	3e af       	std	Y+62, r19	; 0x3e
   13b5a:	4f af       	std	Y+63, r20	; 0x3f
   13b5c:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13b5e:	89 e0       	ldi	r24, 0x09	; 9
   13b60:	97 e1       	ldi	r25, 0x17	; 23
   13b62:	9c 01       	movw	r18, r24
   13b64:	40 e0       	ldi	r20, 0x00	; 0
   13b66:	a6 96       	adiw	r28, 0x26	; 38
   13b68:	2d af       	std	Y+61, r18	; 0x3d
   13b6a:	3e af       	std	Y+62, r19	; 0x3e
   13b6c:	4f af       	std	Y+63, r20	; 0x3f
   13b6e:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13b70:	8b e2       	ldi	r24, 0x2B	; 43
   13b72:	97 e1       	ldi	r25, 0x17	; 23
   13b74:	9c 01       	movw	r18, r24
   13b76:	40 e0       	ldi	r20, 0x00	; 0
   13b78:	a9 96       	adiw	r28, 0x29	; 41
   13b7a:	2d af       	std	Y+61, r18	; 0x3d
   13b7c:	3e af       	std	Y+62, r19	; 0x3e
   13b7e:	4f af       	std	Y+63, r20	; 0x3f
   13b80:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13b82:	85 e5       	ldi	r24, 0x55	; 85
   13b84:	97 e1       	ldi	r25, 0x17	; 23
   13b86:	9c 01       	movw	r18, r24
   13b88:	40 e0       	ldi	r20, 0x00	; 0
   13b8a:	ac 96       	adiw	r28, 0x2c	; 44
   13b8c:	2d af       	std	Y+61, r18	; 0x3d
   13b8e:	3e af       	std	Y+62, r19	; 0x3e
   13b90:	4f af       	std	Y+63, r20	; 0x3f
   13b92:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13b94:	8d e4       	ldi	r24, 0x4D	; 77
   13b96:	97 e1       	ldi	r25, 0x17	; 23
   13b98:	9c 01       	movw	r18, r24
   13b9a:	40 e0       	ldi	r20, 0x00	; 0
   13b9c:	af 96       	adiw	r28, 0x2f	; 47
   13b9e:	2d af       	std	Y+61, r18	; 0x3d
   13ba0:	3e af       	std	Y+62, r19	; 0x3e
   13ba2:	4f af       	std	Y+63, r20	; 0x3f
   13ba4:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13ba6:	8f e6       	ldi	r24, 0x6F	; 111
   13ba8:	97 e1       	ldi	r25, 0x17	; 23
   13baa:	3c 01       	movw	r6, r24
   13bac:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13bae:	f6 01       	movw	r30, r12
   13bb0:	80 81       	ld	r24, Z
   13bb2:	88 23       	and	r24, r24
   13bb4:	09 f4       	brne	.+2      	; 0x13bb8 <format_drives+0xc0>
   13bb6:	ef c0       	rjmp	.+478    	; 0x13d96 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13bb8:	83 30       	cpi	r24, 0x03	; 3
   13bba:	09 f0       	breq	.+2      	; 0x13bbe <format_drives+0xc6>
   13bbc:	70 c0       	rjmp	.+224    	; 0x13c9e <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13bbe:	a7 a0       	ldd	r10, Z+39	; 0x27
   13bc0:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13bc2:	be 01       	movw	r22, r28
   13bc4:	66 5f       	subi	r22, 0xF6	; 246
   13bc6:	7f 4f       	sbci	r23, 0xFF	; 255
   13bc8:	f5 01       	movw	r30, r10
   13bca:	82 81       	ldd	r24, Z+2	; 0x02
   13bcc:	93 81       	ldd	r25, Z+3	; 0x03
   13bce:	0e 94 74 77 	call	0xeee8	; 0xeee8 <stat>
   13bd2:	01 96       	adiw	r24, 0x01	; 1
   13bd4:	09 f0       	breq	.+2      	; 0x13bd8 <format_drives+0xe0>
   13bd6:	63 c0       	rjmp	.+198    	; 0x13c9e <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13bd8:	f5 01       	movw	r30, r10
   13bda:	80 89       	ldd	r24, Z+16	; 0x10
   13bdc:	91 89       	ldd	r25, Z+17	; 0x11
   13bde:	81 15       	cp	r24, r1
   13be0:	91 40       	sbci	r25, 0x01	; 1
   13be2:	31 f0       	breq	.+12     	; 0x13bf0 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13be4:	ed b7       	in	r30, 0x3d	; 61
   13be6:	fe b7       	in	r31, 0x3e	; 62
   13be8:	61 82       	std	Z+1, r6	; 0x01
   13bea:	72 82       	std	Z+2, r7	; 0x02
   13bec:	83 82       	std	Z+3, r8	; 0x03
   13bee:	79 c0       	rjmp	.+242    	; 0x13ce2 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13bf0:	f6 01       	movw	r30, r12
   13bf2:	23 80       	ldd	r2, Z+3	; 0x03
   13bf4:	34 80       	ldd	r3, Z+4	; 0x04
   13bf6:	45 80       	ldd	r4, Z+5	; 0x05
   13bf8:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13bfa:	ed b7       	in	r30, 0x3d	; 61
   13bfc:	fe b7       	in	r31, 0x3e	; 62
   13bfe:	26 82       	std	Z+6, r2	; 0x06
   13c00:	37 82       	std	Z+7, r3	; 0x07
   13c02:	40 86       	std	Z+8, r4	; 0x08
   13c04:	51 86       	std	Z+9, r5	; 0x09
   13c06:	f5 01       	movw	r30, r10
   13c08:	82 81       	ldd	r24, Z+2	; 0x02
   13c0a:	93 81       	ldd	r25, Z+3	; 0x03
   13c0c:	ed b7       	in	r30, 0x3d	; 61
   13c0e:	fe b7       	in	r31, 0x3e	; 62
   13c10:	95 83       	std	Z+5, r25	; 0x05
   13c12:	84 83       	std	Z+4, r24	; 0x04
   13c14:	ac 96       	adiw	r28, 0x2c	; 44
   13c16:	2d ad       	ldd	r18, Y+61	; 0x3d
   13c18:	3e ad       	ldd	r19, Y+62	; 0x3e
   13c1a:	4f ad       	ldd	r20, Y+63	; 0x3f
   13c1c:	ac 97       	sbiw	r28, 0x2c	; 44
   13c1e:	21 83       	std	Z+1, r18	; 0x01
   13c20:	32 83       	std	Z+2, r19	; 0x02
   13c22:	43 83       	std	Z+3, r20	; 0x03
   13c24:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13c28:	6e 96       	adiw	r28, 0x1e	; 30
   13c2a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13c2c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13c2e:	6e 97       	sbiw	r28, 0x1e	; 30
   13c30:	ed b7       	in	r30, 0x3d	; 61
   13c32:	fe b7       	in	r31, 0x3e	; 62
   13c34:	37 83       	std	Z+7, r19	; 0x07
   13c36:	26 83       	std	Z+6, r18	; 0x06
   13c38:	af 96       	adiw	r28, 0x2f	; 47
   13c3a:	8d ad       	ldd	r24, Y+61	; 0x3d
   13c3c:	9e ad       	ldd	r25, Y+62	; 0x3e
   13c3e:	af ad       	ldd	r26, Y+63	; 0x3f
   13c40:	af 97       	sbiw	r28, 0x2f	; 47
   13c42:	83 83       	std	Z+3, r24	; 0x03
   13c44:	94 83       	std	Z+4, r25	; 0x04
   13c46:	a5 83       	std	Z+5, r26	; 0x05
   13c48:	2a e3       	ldi	r18, 0x3A	; 58
   13c4a:	30 e0       	ldi	r19, 0x00	; 0
   13c4c:	2c 0f       	add	r18, r28
   13c4e:	3d 1f       	adc	r19, r29
   13c50:	32 83       	std	Z+2, r19	; 0x02
   13c52:	21 83       	std	Z+1, r18	; 0x01
   13c54:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13c58:	f5 01       	movw	r30, r10
   13c5a:	a2 80       	ldd	r10, Z+2	; 0x02
   13c5c:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13c5e:	c2 01       	movw	r24, r4
   13c60:	b1 01       	movw	r22, r2
   13c62:	15 d2       	rcall	.+1066   	; 0x1408e <lif_dir_count>
   13c64:	9b 01       	movw	r18, r22
   13c66:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13c68:	82 01       	movw	r16, r4
   13c6a:	71 01       	movw	r14, r2
   13c6c:	be 01       	movw	r22, r28
   13c6e:	66 5c       	subi	r22, 0xC6	; 198
   13c70:	7f 4f       	sbci	r23, 0xFF	; 255
   13c72:	c5 01       	movw	r24, r10
   13c74:	0e 94 bc da 	call	0x1b578	; 0x1b578 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13c78:	6c 96       	adiw	r28, 0x1c	; 28
   13c7a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13c7c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13c7e:	6c 97       	sbiw	r28, 0x1c	; 28
   13c80:	2f 5f       	subi	r18, 0xFF	; 255
   13c82:	3f 4f       	sbci	r19, 0xFF	; 255
   13c84:	6c 96       	adiw	r28, 0x1c	; 28
   13c86:	3f af       	std	Y+63, r19	; 0x3f
   13c88:	2e af       	std	Y+62, r18	; 0x3e
   13c8a:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13c8c:	6e 96       	adiw	r28, 0x1e	; 30
   13c8e:	8e ad       	ldd	r24, Y+62	; 0x3e
   13c90:	9f ad       	ldd	r25, Y+63	; 0x3f
   13c92:	6e 97       	sbiw	r28, 0x1e	; 30
   13c94:	01 96       	adiw	r24, 0x01	; 1
   13c96:	6e 96       	adiw	r28, 0x1e	; 30
   13c98:	9f af       	std	Y+63, r25	; 0x3f
   13c9a:	8e af       	std	Y+62, r24	; 0x3e
   13c9c:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13c9e:	f6 01       	movw	r30, r12
   13ca0:	80 81       	ld	r24, Z
   13ca2:	81 30       	cpi	r24, 0x01	; 1
   13ca4:	09 f0       	breq	.+2      	; 0x13ca8 <format_drives+0x1b0>
   13ca6:	77 c0       	rjmp	.+238    	; 0x13d96 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13ca8:	a7 a0       	ldd	r10, Z+39	; 0x27
   13caa:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13cac:	be 01       	movw	r22, r28
   13cae:	66 5f       	subi	r22, 0xF6	; 246
   13cb0:	7f 4f       	sbci	r23, 0xFF	; 255
   13cb2:	f5 01       	movw	r30, r10
   13cb4:	82 81       	ldd	r24, Z+2	; 0x02
   13cb6:	93 81       	ldd	r25, Z+3	; 0x03
   13cb8:	0e 94 74 77 	call	0xeee8	; 0xeee8 <stat>
   13cbc:	01 96       	adiw	r24, 0x01	; 1
   13cbe:	09 f0       	breq	.+2      	; 0x13cc2 <format_drives+0x1ca>
   13cc0:	6a c0       	rjmp	.+212    	; 0x13d96 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13cc2:	f5 01       	movw	r30, r10
   13cc4:	86 81       	ldd	r24, Z+6	; 0x06
   13cc6:	97 81       	ldd	r25, Z+7	; 0x07
   13cc8:	81 15       	cp	r24, r1
   13cca:	91 40       	sbci	r25, 0x01	; 1
   13ccc:	69 f0       	breq	.+26     	; 0x13ce8 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13cce:	a9 96       	adiw	r28, 0x29	; 41
   13cd0:	2d ad       	ldd	r18, Y+61	; 0x3d
   13cd2:	3e ad       	ldd	r19, Y+62	; 0x3e
   13cd4:	4f ad       	ldd	r20, Y+63	; 0x3f
   13cd6:	a9 97       	sbiw	r28, 0x29	; 41
   13cd8:	ed b7       	in	r30, 0x3d	; 61
   13cda:	fe b7       	in	r31, 0x3e	; 62
   13cdc:	21 83       	std	Z+1, r18	; 0x01
   13cde:	32 83       	std	Z+2, r19	; 0x02
   13ce0:	43 83       	std	Z+3, r20	; 0x03
   13ce2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                    continue;
   13ce6:	57 c0       	rjmp	.+174    	; 0x13d96 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13ce8:	f6 01       	movw	r30, r12
   13cea:	23 80       	ldd	r2, Z+3	; 0x03
   13cec:	34 80       	ldd	r3, Z+4	; 0x04
   13cee:	45 80       	ldd	r4, Z+5	; 0x05
   13cf0:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13cf2:	ed b7       	in	r30, 0x3d	; 61
   13cf4:	fe b7       	in	r31, 0x3e	; 62
   13cf6:	26 82       	std	Z+6, r2	; 0x06
   13cf8:	37 82       	std	Z+7, r3	; 0x07
   13cfa:	40 86       	std	Z+8, r4	; 0x08
   13cfc:	51 86       	std	Z+9, r5	; 0x09
   13cfe:	f5 01       	movw	r30, r10
   13d00:	82 81       	ldd	r24, Z+2	; 0x02
   13d02:	93 81       	ldd	r25, Z+3	; 0x03
   13d04:	ed b7       	in	r30, 0x3d	; 61
   13d06:	fe b7       	in	r31, 0x3e	; 62
   13d08:	95 83       	std	Z+5, r25	; 0x05
   13d0a:	84 83       	std	Z+4, r24	; 0x04
   13d0c:	a3 96       	adiw	r28, 0x23	; 35
   13d0e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d10:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d12:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d14:	a3 97       	sbiw	r28, 0x23	; 35
   13d16:	21 83       	std	Z+1, r18	; 0x01
   13d18:	32 83       	std	Z+2, r19	; 0x02
   13d1a:	43 83       	std	Z+3, r20	; 0x03
   13d1c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13d20:	a0 96       	adiw	r28, 0x20	; 32
   13d22:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d24:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d26:	a0 97       	sbiw	r28, 0x20	; 32
   13d28:	ed b7       	in	r30, 0x3d	; 61
   13d2a:	fe b7       	in	r31, 0x3e	; 62
   13d2c:	37 83       	std	Z+7, r19	; 0x07
   13d2e:	26 83       	std	Z+6, r18	; 0x06
   13d30:	a6 96       	adiw	r28, 0x26	; 38
   13d32:	8d ad       	ldd	r24, Y+61	; 0x3d
   13d34:	9e ad       	ldd	r25, Y+62	; 0x3e
   13d36:	af ad       	ldd	r26, Y+63	; 0x3f
   13d38:	a6 97       	sbiw	r28, 0x26	; 38
   13d3a:	83 83       	std	Z+3, r24	; 0x03
   13d3c:	94 83       	std	Z+4, r25	; 0x04
   13d3e:	a5 83       	std	Z+5, r26	; 0x05
   13d40:	2a e3       	ldi	r18, 0x3A	; 58
   13d42:	30 e0       	ldi	r19, 0x00	; 0
   13d44:	2c 0f       	add	r18, r28
   13d46:	3d 1f       	adc	r19, r29
   13d48:	32 83       	std	Z+2, r19	; 0x02
   13d4a:	21 83       	std	Z+1, r18	; 0x01
   13d4c:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d50:	f5 01       	movw	r30, r10
   13d52:	a2 80       	ldd	r10, Z+2	; 0x02
   13d54:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13d56:	c2 01       	movw	r24, r4
   13d58:	b1 01       	movw	r22, r2
   13d5a:	99 d1       	rcall	.+818    	; 0x1408e <lif_dir_count>
   13d5c:	9b 01       	movw	r18, r22
   13d5e:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d60:	82 01       	movw	r16, r4
   13d62:	71 01       	movw	r14, r2
   13d64:	be 01       	movw	r22, r28
   13d66:	66 5c       	subi	r22, 0xC6	; 198
   13d68:	7f 4f       	sbci	r23, 0xFF	; 255
   13d6a:	c5 01       	movw	r24, r10
   13d6c:	0e 94 bc da 	call	0x1b578	; 0x1b578 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13d70:	6c 96       	adiw	r28, 0x1c	; 28
   13d72:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d74:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d76:	6c 97       	sbiw	r28, 0x1c	; 28
   13d78:	2f 5f       	subi	r18, 0xFF	; 255
   13d7a:	3f 4f       	sbci	r19, 0xFF	; 255
   13d7c:	6c 96       	adiw	r28, 0x1c	; 28
   13d7e:	3f af       	std	Y+63, r19	; 0x3f
   13d80:	2e af       	std	Y+62, r18	; 0x3e
   13d82:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13d84:	a0 96       	adiw	r28, 0x20	; 32
   13d86:	8e ad       	ldd	r24, Y+62	; 0x3e
   13d88:	9f ad       	ldd	r25, Y+63	; 0x3f
   13d8a:	a0 97       	sbiw	r28, 0x20	; 32
   13d8c:	01 96       	adiw	r24, 0x01	; 1
   13d8e:	a0 96       	adiw	r28, 0x20	; 32
   13d90:	9f af       	std	Y+63, r25	; 0x3f
   13d92:	8e af       	std	Y+62, r24	; 0x3e
   13d94:	a0 97       	sbiw	r28, 0x20	; 32
   13d96:	9b e2       	ldi	r25, 0x2B	; 43
   13d98:	c9 0e       	add	r12, r25
   13d9a:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13d9c:	a8 ef       	ldi	r26, 0xF8	; 248
   13d9e:	ca 16       	cp	r12, r26
   13da0:	a0 e2       	ldi	r26, 0x20	; 32
   13da2:	da 06       	cpc	r13, r26
   13da4:	09 f0       	breq	.+2      	; 0x13da8 <format_drives+0x2b0>
   13da6:	03 cf       	rjmp	.-506    	; 0x13bae <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13da8:	6c 96       	adiw	r28, 0x1c	; 28
   13daa:	ee ad       	ldd	r30, Y+62	; 0x3e
   13dac:	ff ad       	ldd	r31, Y+63	; 0x3f
   13dae:	6c 97       	sbiw	r28, 0x1c	; 28
   13db0:	ef 2b       	or	r30, r31
   13db2:	11 f0       	breq	.+4      	; 0x13db8 <format_drives+0x2c0>
        sep();
   13db4:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
}
   13db8:	c2 59       	subi	r28, 0x92	; 146
   13dba:	df 4f       	sbci	r29, 0xFF	; 255
   13dbc:	0f b6       	in	r0, 0x3f	; 63
   13dbe:	f8 94       	cli
   13dc0:	de bf       	out	0x3e, r29	; 62
   13dc2:	0f be       	out	0x3f, r0	; 63
   13dc4:	cd bf       	out	0x3d, r28	; 61
   13dc6:	df 91       	pop	r29
   13dc8:	cf 91       	pop	r28
   13dca:	1f 91       	pop	r17
   13dcc:	0f 91       	pop	r16
   13dce:	ff 90       	pop	r15
   13dd0:	ef 90       	pop	r14
   13dd2:	df 90       	pop	r13
   13dd4:	cf 90       	pop	r12
   13dd6:	bf 90       	pop	r11
   13dd8:	af 90       	pop	r10
   13dda:	8f 90       	pop	r8
   13ddc:	7f 90       	pop	r7
   13dde:	6f 90       	pop	r6
   13de0:	5f 90       	pop	r5
   13de2:	4f 90       	pop	r4
   13de4:	3f 90       	pop	r3
   13de6:	2f 90       	pop	r2
   13de8:	08 95       	ret

00013dea <display_mounts>:
	}
	display_mounts();
}

void display_mounts( )
{
   13dea:	2f 92       	push	r2
   13dec:	3f 92       	push	r3
   13dee:	4f 92       	push	r4
   13df0:	6f 92       	push	r6
   13df2:	7f 92       	push	r7
   13df4:	8f 92       	push	r8
   13df6:	cf 92       	push	r12
   13df8:	df 92       	push	r13
   13dfa:	ef 92       	push	r14
   13dfc:	0f 93       	push	r16
   13dfe:	1f 93       	push	r17
   13e00:	cf 93       	push	r28
   13e02:	df 93       	push	r29
   13e04:	ad b7       	in	r26, 0x3d	; 61
   13e06:	be b7       	in	r27, 0x3e	; 62
   13e08:	19 97       	sbiw	r26, 0x09	; 9
   13e0a:	0f b6       	in	r0, 0x3f	; 63
   13e0c:	f8 94       	cli
   13e0e:	be bf       	out	0x3e, r27	; 62
   13e10:	0f be       	out	0x3f, r0	; 63
   13e12:	ad bf       	out	0x3d, r26	; 61
   13e14:	c4 ef       	ldi	r28, 0xF4	; 244
   13e16:	de e1       	ldi	r29, 0x1E	; 30
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13e18:	0f e7       	ldi	r16, 0x7F	; 127
   13e1a:	1e e0       	ldi	r17, 0x0E	; 14
   13e1c:	81 ec       	ldi	r24, 0xC1	; 193
   13e1e:	96 e1       	ldi	r25, 0x16	; 22
   13e20:	6c 01       	movw	r12, r24
   13e22:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13e24:	82 ed       	ldi	r24, 0xD2	; 210
   13e26:	96 e1       	ldi	r25, 0x16	; 22
   13e28:	3c 01       	movw	r6, r24
   13e2a:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13e2c:	86 ee       	ldi	r24, 0xE6	; 230
   13e2e:	96 e1       	ldi	r25, 0x16	; 22
   13e30:	1c 01       	movw	r2, r24
   13e32:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13e34:	88 81       	ld	r24, Y
   13e36:	88 23       	and	r24, r24
   13e38:	09 f4       	brne	.+2      	; 0x13e3c <display_mounts+0x52>
   13e3a:	43 c0       	rjmp	.+134    	; 0x13ec2 <display_mounts+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13e3c:	83 30       	cpi	r24, 0x03	; 3
   13e3e:	b1 f4       	brne	.+44     	; 0x13e6c <display_mounts+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13e40:	af a1       	ldd	r26, Y+39	; 0x27
   13e42:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13e44:	fd 01       	movw	r30, r26
   13e46:	82 81       	ldd	r24, Z+2	; 0x02
   13e48:	93 81       	ldd	r25, Z+3	; 0x03
   13e4a:	ed b7       	in	r30, 0x3d	; 61
   13e4c:	fe b7       	in	r31, 0x3e	; 62
   13e4e:	91 87       	std	Z+9, r25	; 0x09
   13e50:	80 87       	std	Z+8, r24	; 0x08
   13e52:	8c 91       	ld	r24, X
   13e54:	90 e0       	ldi	r25, 0x00	; 0
   13e56:	97 83       	std	Z+7, r25	; 0x07
   13e58:	86 83       	std	Z+6, r24	; 0x06
   13e5a:	ce 01       	movw	r24, r28
   13e5c:	07 96       	adiw	r24, 0x07	; 7
   13e5e:	95 83       	std	Z+5, r25	; 0x05
   13e60:	84 83       	std	Z+4, r24	; 0x04
   13e62:	21 82       	std	Z+1, r2	; 0x01
   13e64:	32 82       	std	Z+2, r3	; 0x02
   13e66:	43 82       	std	Z+3, r4	; 0x03
   13e68:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13e6c:	88 81       	ld	r24, Y
   13e6e:	81 30       	cpi	r24, 0x01	; 1
   13e70:	b1 f4       	brne	.+44     	; 0x13e9e <display_mounts+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13e72:	af a1       	ldd	r26, Y+39	; 0x27
   13e74:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13e76:	fd 01       	movw	r30, r26
   13e78:	82 81       	ldd	r24, Z+2	; 0x02
   13e7a:	93 81       	ldd	r25, Z+3	; 0x03
   13e7c:	ed b7       	in	r30, 0x3d	; 61
   13e7e:	fe b7       	in	r31, 0x3e	; 62
   13e80:	91 87       	std	Z+9, r25	; 0x09
   13e82:	80 87       	std	Z+8, r24	; 0x08
   13e84:	8c 91       	ld	r24, X
   13e86:	90 e0       	ldi	r25, 0x00	; 0
   13e88:	97 83       	std	Z+7, r25	; 0x07
   13e8a:	86 83       	std	Z+6, r24	; 0x06
   13e8c:	ce 01       	movw	r24, r28
   13e8e:	07 96       	adiw	r24, 0x07	; 7
   13e90:	95 83       	std	Z+5, r25	; 0x05
   13e92:	84 83       	std	Z+4, r24	; 0x04
   13e94:	61 82       	std	Z+1, r6	; 0x01
   13e96:	72 82       	std	Z+2, r7	; 0x02
   13e98:	83 82       	std	Z+3, r8	; 0x03
   13e9a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   13e9e:	88 81       	ld	r24, Y
   13ea0:	84 30       	cpi	r24, 0x04	; 4
   13ea2:	79 f4       	brne	.+30     	; 0x13ec2 <display_mounts+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13ea4:	ef a1       	ldd	r30, Y+39	; 0x27
   13ea6:	f8 a5       	ldd	r31, Y+40	; 0x28
   13ea8:	80 81       	ld	r24, Z
   13eaa:	90 e0       	ldi	r25, 0x00	; 0
   13eac:	ed b7       	in	r30, 0x3d	; 61
   13eae:	fe b7       	in	r31, 0x3e	; 62
   13eb0:	97 83       	std	Z+7, r25	; 0x07
   13eb2:	86 83       	std	Z+6, r24	; 0x06
   13eb4:	15 83       	std	Z+5, r17	; 0x05
   13eb6:	04 83       	std	Z+4, r16	; 0x04
   13eb8:	c1 82       	std	Z+1, r12	; 0x01
   13eba:	d2 82       	std	Z+2, r13	; 0x02
   13ebc:	e3 82       	std	Z+3, r14	; 0x03
   13ebe:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   13ec2:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13ec4:	f0 e2       	ldi	r31, 0x20	; 32
   13ec6:	c8 3f       	cpi	r28, 0xF8	; 248
   13ec8:	df 07       	cpc	r29, r31
   13eca:	09 f0       	breq	.+2      	; 0x13ece <display_mounts+0xe4>
   13ecc:	b3 cf       	rjmp	.-154    	; 0x13e34 <display_mounts+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   13ece:	8f eb       	ldi	r24, 0xBF	; 191
   13ed0:	96 e1       	ldi	r25, 0x16	; 22
   13ed2:	a0 e0       	ldi	r26, 0x00	; 0
   13ed4:	ed b7       	in	r30, 0x3d	; 61
   13ed6:	fe b7       	in	r31, 0x3e	; 62
   13ed8:	81 83       	std	Z+1, r24	; 0x01
   13eda:	92 83       	std	Z+2, r25	; 0x02
   13edc:	a3 83       	std	Z+3, r26	; 0x03
   13ede:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
}
   13ee2:	ad b7       	in	r26, 0x3d	; 61
   13ee4:	be b7       	in	r27, 0x3e	; 62
   13ee6:	19 96       	adiw	r26, 0x09	; 9
   13ee8:	0f b6       	in	r0, 0x3f	; 63
   13eea:	f8 94       	cli
   13eec:	be bf       	out	0x3e, r27	; 62
   13eee:	0f be       	out	0x3f, r0	; 63
   13ef0:	ad bf       	out	0x3d, r26	; 61
   13ef2:	df 91       	pop	r29
   13ef4:	cf 91       	pop	r28
   13ef6:	1f 91       	pop	r17
   13ef8:	0f 91       	pop	r16
   13efa:	ef 90       	pop	r14
   13efc:	df 90       	pop	r13
   13efe:	cf 90       	pop	r12
   13f00:	8f 90       	pop	r8
   13f02:	7f 90       	pop	r7
   13f04:	6f 90       	pop	r6
   13f06:	4f 90       	pop	r4
   13f08:	3f 90       	pop	r3
   13f0a:	2f 90       	pop	r2
   13f0c:	08 95       	ret

00013f0e <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
   13f0e:	af 92       	push	r10
   13f10:	bf 92       	push	r11
   13f12:	cf 92       	push	r12
   13f14:	df 92       	push	r13
   13f16:	ef 92       	push	r14
   13f18:	0f 93       	push	r16
   13f1a:	1f 93       	push	r17
   13f1c:	cf 93       	push	r28
   13f1e:	df 93       	push	r29
   13f20:	ad b7       	in	r26, 0x3d	; 61
   13f22:	be b7       	in	r27, 0x3e	; 62
   13f24:	17 97       	sbiw	r26, 0x07	; 7
   13f26:	0f b6       	in	r0, 0x3f	; 63
   13f28:	f8 94       	cli
   13f2a:	be bf       	out	0x3e, r27	; 62
   13f2c:	0f be       	out	0x3f, r0	; 63
   13f2e:	ad bf       	out	0x3d, r26	; 61
   13f30:	5c 01       	movw	r10, r24
   13f32:	8b 01       	movw	r16, r22
   13f34:	0e 5f       	subi	r16, 0xFE	; 254
   13f36:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 1;i< argc;++i)
   13f38:	c1 e0       	ldi	r28, 0x01	; 1
   13f3a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   13f3c:	8a ef       	ldi	r24, 0xFA	; 250
   13f3e:	96 e1       	ldi	r25, 0x16	; 22
   13f40:	6c 01       	movw	r12, r24
   13f42:	e1 2c       	mov	r14, r1
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   13f44:	ca 15       	cp	r28, r10
   13f46:	db 05       	cpc	r29, r11
   13f48:	8c f4       	brge	.+34     	; 0x13f6c <mount+0x5e>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   13f4a:	f8 01       	movw	r30, r16
   13f4c:	81 91       	ld	r24, Z+
   13f4e:	91 91       	ld	r25, Z+
   13f50:	8f 01       	movw	r16, r30
   13f52:	ed b7       	in	r30, 0x3d	; 61
   13f54:	fe b7       	in	r31, 0x3e	; 62
   13f56:	97 83       	std	Z+7, r25	; 0x07
   13f58:	86 83       	std	Z+6, r24	; 0x06
   13f5a:	d5 83       	std	Z+5, r29	; 0x05
   13f5c:	c4 83       	std	Z+4, r28	; 0x04
   13f5e:	c1 82       	std	Z+1, r12	; 0x01
   13f60:	d2 82       	std	Z+2, r13	; 0x02
   13f62:	e3 82       	std	Z+3, r14	; 0x03
   13f64:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   13f68:	21 96       	adiw	r28, 0x01	; 1
   13f6a:	ec cf       	rjmp	.-40     	; 0x13f44 <mount+0x36>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
	display_mounts();
   13f6c:	3e df       	rcall	.-388    	; 0x13dea <display_mounts>
}
   13f6e:	ad b7       	in	r26, 0x3d	; 61
   13f70:	be b7       	in	r27, 0x3e	; 62
   13f72:	17 96       	adiw	r26, 0x07	; 7
   13f74:	0f b6       	in	r0, 0x3f	; 63
   13f76:	f8 94       	cli
   13f78:	be bf       	out	0x3e, r27	; 62
   13f7a:	0f be       	out	0x3f, r0	; 63
   13f7c:	ad bf       	out	0x3d, r26	; 61
   13f7e:	df 91       	pop	r29
   13f80:	cf 91       	pop	r28
   13f82:	1f 91       	pop	r17
   13f84:	0f 91       	pop	r16
   13f86:	ef 90       	pop	r14
   13f88:	df 90       	pop	r13
   13f8a:	cf 90       	pop	r12
   13f8c:	bf 90       	pop	r11
   13f8e:	af 90       	pop	r10
   13f90:	08 95       	ret

00013f92 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   13f92:	8f e1       	ldi	r24, 0x1F	; 31
   13f94:	e8 ef       	ldi	r30, 0xF8	; 248
   13f96:	f0 e2       	ldi	r31, 0x20	; 32
   13f98:	df 01       	movw	r26, r30
   13f9a:	98 2f       	mov	r25, r24
   13f9c:	1d 92       	st	X+, r1
   13f9e:	9a 95       	dec	r25
   13fa0:	e9 f7       	brne	.-6      	; 0x13f9c <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   13fa2:	9f e3       	ldi	r25, 0x3F	; 63
   13fa4:	e8 e1       	ldi	r30, 0x18	; 24
   13fa6:	f1 e2       	ldi	r31, 0x21	; 33
   13fa8:	df 01       	movw	r26, r30
   13faa:	1d 92       	st	X+, r1
   13fac:	9a 95       	dec	r25
   13fae:	e9 f7       	brne	.-6      	; 0x13faa <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   13fb0:	e8 e5       	ldi	r30, 0x58	; 88
   13fb2:	f1 e2       	ldi	r31, 0x21	; 33
   13fb4:	df 01       	movw	r26, r30
   13fb6:	1d 92       	st	X+, r1
   13fb8:	8a 95       	dec	r24
   13fba:	e9 f7       	brne	.-6      	; 0x13fb6 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   13fbc:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <hpdir+0x80>
   13fc0:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <hpdir+0x81>
   13fc4:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <hpdir+0x82>
   13fc8:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   13fcc:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <hpdir+0x84>
   13fd0:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <hpdir+0x85>
   13fd4:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <hpdir+0x86>
   13fd8:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   13fdc:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0x88>
   13fe0:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <hpdir+0x89>
   13fe4:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x8a>
   13fe8:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   13fec:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x8c>
   13ff0:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x8d>
   13ff4:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x8e>
   13ff8:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   13ffc:	81 e0       	ldi	r24, 0x01	; 1
   13ffe:	90 e8       	ldi	r25, 0x80	; 128
   14000:	a0 e0       	ldi	r26, 0x00	; 0
   14002:	b0 e0       	ldi	r27, 0x00	; 0
   14004:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <hpdir+0x90>
   14008:	90 93 89 21 	sts	0x2189, r25	; 0x802189 <hpdir+0x91>
   1400c:	a0 93 8a 21 	sts	0x218A, r26	; 0x80218a <hpdir+0x92>
   14010:	b0 93 8b 21 	sts	0x218B, r27	; 0x80218b <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   14014:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x94>
   14018:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x95>
   1401c:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x96>
   14020:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   14024:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x98>
   14028:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x99>
   1402c:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x9a>
   14030:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   14034:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x9c>
   14038:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0x9d>
   1403c:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0x9e>
   14040:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14044:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0xa0>
   14048:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0xa1>
   1404c:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0xa2>
   14050:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14054:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0xa4>
   14058:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0xa5>
   1405c:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0xa6>
   14060:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14064:	81 e0       	ldi	r24, 0x01	; 1
   14066:	90 e0       	ldi	r25, 0x00	; 0
   14068:	a0 e0       	ldi	r26, 0x00	; 0
   1406a:	b0 e0       	ldi	r27, 0x00	; 0
   1406c:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <hpdir+0xa8>
   14070:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <hpdir+0xa9>
   14074:	a0 93 a2 21 	sts	0x21A2, r26	; 0x8021a2 <hpdir+0xaa>
   14078:	b0 93 a3 21 	sts	0x21A3, r27	; 0x8021a3 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   1407c:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0xac>
   14080:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0xad>
   14084:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0xae>
   14088:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xaf>
   1408c:	08 95       	ret

0001408e <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   1408e:	20 e0       	ldi	r18, 0x00	; 0
   14090:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14092:	61 15       	cp	r22, r1
   14094:	71 05       	cpc	r23, r1
   14096:	81 05       	cpc	r24, r1
   14098:	91 05       	cpc	r25, r1
   1409a:	39 f0       	breq	.+14     	; 0x140aa <lif_dir_count+0x1c>
    {
        scale++;
   1409c:	2f 5f       	subi	r18, 0xFF	; 255
   1409e:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   140a0:	95 95       	asr	r25
   140a2:	87 95       	ror	r24
   140a4:	77 95       	ror	r23
   140a6:	67 95       	ror	r22
   140a8:	f4 cf       	rjmp	.-24     	; 0x14092 <lif_dir_count+0x4>
    }
    scale>>=1;
   140aa:	35 95       	asr	r19
   140ac:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   140ae:	61 e0       	ldi	r22, 0x01	; 1
   140b0:	70 e0       	ldi	r23, 0x00	; 0
   140b2:	80 e0       	ldi	r24, 0x00	; 0
   140b4:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   140b6:	21 50       	subi	r18, 0x01	; 1
   140b8:	31 09       	sbc	r19, r1
   140ba:	28 f0       	brcs	.+10     	; 0x140c6 <lif_dir_count+0x38>
        num <<=1;
   140bc:	66 0f       	add	r22, r22
   140be:	77 1f       	adc	r23, r23
   140c0:	88 1f       	adc	r24, r24
   140c2:	99 1f       	adc	r25, r25
   140c4:	f8 cf       	rjmp	.-16     	; 0x140b6 <lif_dir_count+0x28>
    return(num);
}
   140c6:	08 95       	ret

000140c8 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   140c8:	2f 92       	push	r2
   140ca:	3f 92       	push	r3
   140cc:	4f 92       	push	r4
   140ce:	5f 92       	push	r5
   140d0:	6f 92       	push	r6
   140d2:	8f 92       	push	r8
   140d4:	9f 92       	push	r9
   140d6:	af 92       	push	r10
   140d8:	bf 92       	push	r11
   140da:	cf 92       	push	r12
   140dc:	df 92       	push	r13
   140de:	ef 92       	push	r14
   140e0:	ff 92       	push	r15
   140e2:	0f 93       	push	r16
   140e4:	1f 93       	push	r17
   140e6:	cf 93       	push	r28
   140e8:	df 93       	push	r29
   140ea:	cd b7       	in	r28, 0x3d	; 61
   140ec:	de b7       	in	r29, 0x3e	; 62
   140ee:	c9 58       	subi	r28, 0x89	; 137
   140f0:	d1 40       	sbci	r29, 0x01	; 1
   140f2:	0f b6       	in	r0, 0x3f	; 63
   140f4:	f8 94       	cli
   140f6:	de bf       	out	0x3e, r29	; 62
   140f8:	0f be       	out	0x3f, r0	; 63
   140fa:	cd bf       	out	0x3d, r28	; 61
   140fc:	6c 01       	movw	r12, r24
   140fe:	c8 57       	subi	r28, 0x78	; 120
   14100:	de 4f       	sbci	r29, 0xFE	; 254
   14102:	79 83       	std	Y+1, r23	; 0x01
   14104:	68 83       	st	Y, r22
   14106:	c8 58       	subi	r28, 0x88	; 136
   14108:	d1 40       	sbci	r29, 0x01	; 1
   1410a:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   1410c:	42 df       	rcall	.-380    	; 0x13f92 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   1410e:	6e ef       	ldi	r22, 0xFE	; 254
   14110:	78 e0       	ldi	r23, 0x08	; 8
   14112:	86 e5       	ldi	r24, 0x56	; 86
   14114:	90 e1       	ldi	r25, 0x10	; 16
   14116:	0e 94 6f 7c 	call	0xf8de	; 0xf8de <fopen>
   1411a:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   1411c:	89 2b       	or	r24, r25
   1411e:	49 f4       	brne	.+18     	; 0x14132 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14120:	6e ef       	ldi	r22, 0xFE	; 254
   14122:	78 e0       	ldi	r23, 0x08	; 8
   14124:	85 e5       	ldi	r24, 0x55	; 85
   14126:	90 e1       	ldi	r25, 0x10	; 16
   14128:	0e 94 6f 7c 	call	0xf8de	; 0xf8de <fopen>
   1412c:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   1412e:	89 2b       	or	r24, r25
   14130:	51 f0       	breq	.+20     	; 0x14146 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14132:	21 2c       	mov	r2, r1
   14134:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14136:	8e 01       	movw	r16, r28
   14138:	08 5f       	subi	r16, 0xF8	; 248
   1413a:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   1413c:	87 eb       	ldi	r24, 0xB7	; 183
   1413e:	9d e1       	ldi	r25, 0x1D	; 29
   14140:	2c 01       	movw	r4, r24
   14142:	61 2c       	mov	r6, r1
   14144:	1e c0       	rjmp	.+60     	; 0x14182 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14146:	ab 28       	or	r10, r11
   14148:	09 f4       	brne	.+2      	; 0x1414c <hpdir_find_drive+0x84>
   1414a:	69 c1       	rjmp	.+722    	; 0x1441e <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   1414c:	8e eb       	ldi	r24, 0xBE	; 190
   1414e:	9d e1       	ldi	r25, 0x1D	; 29
   14150:	a0 e0       	ldi	r26, 0x00	; 0
   14152:	ed b7       	in	r30, 0x3d	; 61
   14154:	fe b7       	in	r31, 0x3e	; 62
   14156:	81 83       	std	Z+1, r24	; 0x01
   14158:	92 83       	std	Z+2, r25	; 0x02
   1415a:	a3 83       	std	Z+3, r26	; 0x03
   1415c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14160:	5e c1       	rjmp	.+700    	; 0x1441e <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14162:	ce 01       	movw	r24, r28
   14164:	08 96       	adiw	r24, 0x08	; 8
   14166:	0e 94 4f 30 	call	0x609e	; 0x609e <trim_tail>
        ptr = skipspaces(ptr);
   1416a:	ce 01       	movw	r24, r28
   1416c:	08 96       	adiw	r24, 0x08	; 8
   1416e:	0e 94 5f 30 	call	0x60be	; 0x60be <skipspaces>

        len = strlen(ptr);
   14172:	fc 01       	movw	r30, r24
   14174:	01 90       	ld	r0, Z+
   14176:	00 20       	and	r0, r0
   14178:	e9 f7       	brne	.-6      	; 0x14174 <hpdir_find_drive+0xac>
   1417a:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   1417c:	8e 17       	cp	r24, r30
   1417e:	9f 07       	cpc	r25, r31
   14180:	51 f4       	brne	.+20     	; 0x14196 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14182:	a7 01       	movw	r20, r14
   14184:	6e ef       	ldi	r22, 0xFE	; 254
   14186:	70 e0       	ldi	r23, 0x00	; 0
   14188:	ce 01       	movw	r24, r28
   1418a:	08 96       	adiw	r24, 0x08	; 8
   1418c:	0e 94 87 74 	call	0xe90e	; 0xe90e <fgets>
   14190:	89 2b       	or	r24, r25
   14192:	39 f7       	brne	.-50     	; 0x14162 <hpdir_find_drive+0x9a>
   14194:	0c c0       	rjmp	.+24     	; 0x141ae <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14196:	fc 01       	movw	r30, r24
   14198:	20 81       	ld	r18, Z
   1419a:	2b 33       	cpi	r18, 0x3B	; 59
   1419c:	91 f3       	breq	.-28     	; 0x14182 <hpdir_find_drive+0xba>
   1419e:	23 32       	cpi	r18, 0x23	; 35
   141a0:	81 f3       	breq	.-32     	; 0x14182 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   141a2:	2b 35       	cpi	r18, 0x5B	; 91
   141a4:	31 f4       	brne	.+12     	; 0x141b2 <hpdir_find_drive+0xea>
   141a6:	f1 e0       	ldi	r31, 0x01	; 1
   141a8:	2f 16       	cp	r2, r31
   141aa:	31 04       	cpc	r3, r1
   141ac:	11 f4       	brne	.+4      	; 0x141b2 <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   141ae:	00 e0       	ldi	r16, 0x00	; 0
   141b0:	30 c1       	rjmp	.+608    	; 0x14412 <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   141b2:	4e e7       	ldi	r20, 0x7E	; 126
   141b4:	50 e0       	ldi	r21, 0x00	; 0
   141b6:	b8 01       	movw	r22, r16
   141b8:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   141bc:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   141be:	60 e6       	ldi	r22, 0x60	; 96
   141c0:	70 e1       	ldi	r23, 0x10	; 16
   141c2:	c8 01       	movw	r24, r16
   141c4:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   141c8:	89 2b       	or	r24, r25
   141ca:	21 f0       	breq	.+8      	; 0x141d4 <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   141cc:	22 24       	eor	r2, r2
   141ce:	23 94       	inc	r2
   141d0:	31 2c       	mov	r3, r1
   141d2:	d7 cf       	rjmp	.-82     	; 0x14182 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   141d4:	21 e0       	ldi	r18, 0x01	; 1
   141d6:	22 16       	cp	r2, r18
   141d8:	31 04       	cpc	r3, r1
   141da:	99 f6       	brne	.-90     	; 0x14182 <hpdir_find_drive+0xba>
            continue;

        if(list)
   141dc:	c8 57       	subi	r28, 0x78	; 120
   141de:	de 4f       	sbci	r29, 0xFE	; 254
   141e0:	88 81       	ld	r24, Y
   141e2:	99 81       	ldd	r25, Y+1	; 0x01
   141e4:	c8 58       	subi	r28, 0x88	; 136
   141e6:	d1 40       	sbci	r29, 0x01	; 1
   141e8:	89 2b       	or	r24, r25
   141ea:	61 f0       	breq	.+24     	; 0x14204 <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   141ec:	ed b7       	in	r30, 0x3d	; 61
   141ee:	fe b7       	in	r31, 0x3e	; 62
   141f0:	97 82       	std	Z+7, r9	; 0x07
   141f2:	86 82       	std	Z+6, r8	; 0x06
   141f4:	15 83       	std	Z+5, r17	; 0x05
   141f6:	04 83       	std	Z+4, r16	; 0x04
   141f8:	41 82       	std	Z+1, r4	; 0x01
   141fa:	52 82       	std	Z+2, r5	; 0x02
   141fc:	63 82       	std	Z+3, r6	; 0x03
   141fe:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            continue;
   14202:	bf cf       	rjmp	.-130    	; 0x14182 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14204:	b8 01       	movw	r22, r16
   14206:	c6 01       	movw	r24, r12
   14208:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1420c:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   1420e:	f1 f2       	breq	.-68     	; 0x141cc <hpdir_find_drive+0x104>
   14210:	c0 de       	rcall	.-640    	; 0x13f92 <hpdir_init>

        if(verbose)
   14212:	ab 28       	or	r10, r11
   14214:	61 f0       	breq	.+24     	; 0x1422e <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   14216:	ed b7       	in	r30, 0x3d	; 61
   14218:	fe b7       	in	r31, 0x3e	; 62
   1421a:	d5 82       	std	Z+5, r13	; 0x05
   1421c:	c4 82       	std	Z+4, r12	; 0x04
   1421e:	86 ea       	ldi	r24, 0xA6	; 166
   14220:	9d e1       	ldi	r25, 0x1D	; 29
   14222:	a0 e0       	ldi	r26, 0x00	; 0
   14224:	81 83       	std	Z+1, r24	; 0x01
   14226:	92 83       	std	Z+2, r25	; 0x02
   14228:	a3 83       	std	Z+3, r26	; 0x03
   1422a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   1422e:	4e e1       	ldi	r20, 0x1E	; 30
   14230:	50 e0       	ldi	r21, 0x00	; 0
   14232:	b8 01       	movw	r22, r16
   14234:	88 ef       	ldi	r24, 0xF8	; 248
   14236:	90 e2       	ldi	r25, 0x20	; 32
   14238:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1423c:	4e e7       	ldi	r20, 0x7E	; 126
   1423e:	50 e0       	ldi	r21, 0x00	; 0
   14240:	b8 01       	movw	r22, r16
   14242:	c4 01       	movw	r24, r8
   14244:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14248:	4e e3       	ldi	r20, 0x3E	; 62
   1424a:	50 e0       	ldi	r21, 0x00	; 0
   1424c:	68 e1       	ldi	r22, 0x18	; 24
   1424e:	71 e2       	ldi	r23, 0x21	; 33
   14250:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14254:	4e e1       	ldi	r20, 0x1E	; 30
   14256:	50 e0       	ldi	r21, 0x00	; 0
   14258:	68 e5       	ldi	r22, 0x58	; 88
   1425a:	71 e2       	ldi	r23, 0x21	; 33
   1425c:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14260:	4e e7       	ldi	r20, 0x7E	; 126
   14262:	50 e0       	ldi	r21, 0x00	; 0
   14264:	b8 01       	movw	r22, r16
   14266:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   1426a:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   1426c:	c8 01       	movw	r24, r16
   1426e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   14272:	60 93 78 21 	sts	0x2178, r22	; 0x802178 <hpdir+0x80>
   14276:	70 93 79 21 	sts	0x2179, r23	; 0x802179 <hpdir+0x81>
   1427a:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <hpdir+0x82>
   1427e:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14282:	4e e7       	ldi	r20, 0x7E	; 126
   14284:	50 e0       	ldi	r21, 0x00	; 0
   14286:	b8 01       	movw	r22, r16
   14288:	c6 01       	movw	r24, r12
   1428a:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   1428e:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   14290:	c8 01       	movw	r24, r16
   14292:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   14296:	60 93 7c 21 	sts	0x217C, r22	; 0x80217c <hpdir+0x84>
   1429a:	70 93 7d 21 	sts	0x217D, r23	; 0x80217d <hpdir+0x85>
   1429e:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <hpdir+0x86>
   142a2:	90 93 7f 21 	sts	0x217F, r25	; 0x80217f <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142a6:	4e e7       	ldi	r20, 0x7E	; 126
   142a8:	50 e0       	ldi	r21, 0x00	; 0
   142aa:	b8 01       	movw	r22, r16
   142ac:	c6 01       	movw	r24, r12
   142ae:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   142b2:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   142b4:	c8 01       	movw	r24, r16
   142b6:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   142ba:	60 93 80 21 	sts	0x2180, r22	; 0x802180 <hpdir+0x88>
   142be:	70 93 81 21 	sts	0x2181, r23	; 0x802181 <hpdir+0x89>
   142c2:	80 93 82 21 	sts	0x2182, r24	; 0x802182 <hpdir+0x8a>
   142c6:	90 93 83 21 	sts	0x2183, r25	; 0x802183 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142ca:	4e e7       	ldi	r20, 0x7E	; 126
   142cc:	50 e0       	ldi	r21, 0x00	; 0
   142ce:	b8 01       	movw	r22, r16
   142d0:	c6 01       	movw	r24, r12
   142d2:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   142d6:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   142d8:	c8 01       	movw	r24, r16
   142da:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   142de:	60 93 84 21 	sts	0x2184, r22	; 0x802184 <hpdir+0x8c>
   142e2:	70 93 85 21 	sts	0x2185, r23	; 0x802185 <hpdir+0x8d>
   142e6:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <hpdir+0x8e>
   142ea:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142ee:	4e e7       	ldi	r20, 0x7E	; 126
   142f0:	50 e0       	ldi	r21, 0x00	; 0
   142f2:	b8 01       	movw	r22, r16
   142f4:	c6 01       	movw	r24, r12
   142f6:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   142fa:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   142fc:	c8 01       	movw	r24, r16
   142fe:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   14302:	60 93 88 21 	sts	0x2188, r22	; 0x802188 <hpdir+0x90>
   14306:	70 93 89 21 	sts	0x2189, r23	; 0x802189 <hpdir+0x91>
   1430a:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <hpdir+0x92>
   1430e:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14312:	4e e7       	ldi	r20, 0x7E	; 126
   14314:	50 e0       	ldi	r21, 0x00	; 0
   14316:	b8 01       	movw	r22, r16
   14318:	c6 01       	movw	r24, r12
   1431a:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   1431e:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   14320:	c8 01       	movw	r24, r16
   14322:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   14326:	60 93 8c 21 	sts	0x218C, r22	; 0x80218c <hpdir+0x94>
   1432a:	70 93 8d 21 	sts	0x218D, r23	; 0x80218d <hpdir+0x95>
   1432e:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <hpdir+0x96>
   14332:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14336:	4e e7       	ldi	r20, 0x7E	; 126
   14338:	50 e0       	ldi	r21, 0x00	; 0
   1433a:	b8 01       	movw	r22, r16
   1433c:	c6 01       	movw	r24, r12
   1433e:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   14342:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   14344:	c8 01       	movw	r24, r16
   14346:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   1434a:	60 93 90 21 	sts	0x2190, r22	; 0x802190 <hpdir+0x98>
   1434e:	70 93 91 21 	sts	0x2191, r23	; 0x802191 <hpdir+0x99>
   14352:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <hpdir+0x9a>
   14356:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1435a:	4e e7       	ldi	r20, 0x7E	; 126
   1435c:	50 e0       	ldi	r21, 0x00	; 0
   1435e:	b8 01       	movw	r22, r16
   14360:	c6 01       	movw	r24, r12
   14362:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   14366:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   14368:	c8 01       	movw	r24, r16
   1436a:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   1436e:	60 93 94 21 	sts	0x2194, r22	; 0x802194 <hpdir+0x9c>
   14372:	70 93 95 21 	sts	0x2195, r23	; 0x802195 <hpdir+0x9d>
   14376:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0x9e>
   1437a:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1437e:	4e e7       	ldi	r20, 0x7E	; 126
   14380:	50 e0       	ldi	r21, 0x00	; 0
   14382:	b8 01       	movw	r22, r16
   14384:	c6 01       	movw	r24, r12
   14386:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
   1438a:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   1438c:	c8 01       	movw	r24, r16
   1438e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   14392:	60 93 98 21 	sts	0x2198, r22	; 0x802198 <hpdir+0xa0>
   14396:	70 93 99 21 	sts	0x2199, r23	; 0x802199 <hpdir+0xa1>
   1439a:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <hpdir+0xa2>
   1439e:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143a2:	4e e7       	ldi	r20, 0x7E	; 126
   143a4:	50 e0       	ldi	r21, 0x00	; 0
   143a6:	b8 01       	movw	r22, r16
   143a8:	c6 01       	movw	r24, r12
   143aa:	0e 94 31 31 	call	0x6262	; 0x6262 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   143ae:	c8 01       	movw	r24, r16
   143b0:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
   143b4:	60 93 9c 21 	sts	0x219C, r22	; 0x80219c <hpdir+0xa4>
   143b8:	70 93 9d 21 	sts	0x219D, r23	; 0x80219d <hpdir+0xa5>
   143bc:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <hpdir+0xa6>
   143c0:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   143c4:	20 91 8c 21 	lds	r18, 0x218C	; 0x80218c <hpdir+0x94>
   143c8:	30 91 8d 21 	lds	r19, 0x218D	; 0x80218d <hpdir+0x95>
   143cc:	40 91 8e 21 	lds	r20, 0x218E	; 0x80218e <hpdir+0x96>
   143d0:	50 91 8f 21 	lds	r21, 0x218F	; 0x80218f <hpdir+0x97>
   143d4:	60 91 90 21 	lds	r22, 0x2190	; 0x802190 <hpdir+0x98>
   143d8:	70 91 91 21 	lds	r23, 0x2191	; 0x802191 <hpdir+0x99>
   143dc:	80 91 92 21 	lds	r24, 0x2192	; 0x802192 <hpdir+0x9a>
   143e0:	90 91 93 21 	lds	r25, 0x2193	; 0x802193 <hpdir+0x9b>
   143e4:	0e 94 3e e2 	call	0x1c47c	; 0x1c47c <__mulsi3>
   143e8:	9b 01       	movw	r18, r22
   143ea:	ac 01       	movw	r20, r24
   143ec:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <hpdir+0x9c>
   143f0:	70 91 95 21 	lds	r23, 0x2195	; 0x802195 <hpdir+0x9d>
   143f4:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <hpdir+0x9e>
   143f8:	90 91 97 21 	lds	r25, 0x2197	; 0x802197 <hpdir+0x9f>
   143fc:	0e 94 3e e2 	call	0x1c47c	; 0x1c47c <__mulsi3>
   14400:	60 93 a4 21 	sts	0x21A4, r22	; 0x8021a4 <hpdir+0xac>
   14404:	70 93 a5 21 	sts	0x21A5, r23	; 0x8021a5 <hpdir+0xad>
   14408:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <hpdir+0xae>
   1440c:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14410:	01 e0       	ldi	r16, 0x01	; 1
   14412:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14414:	c7 01       	movw	r24, r14
   14416:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
    return(found);
   1441a:	c8 01       	movw	r24, r16
   1441c:	02 c0       	rjmp	.+4      	; 0x14422 <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   1441e:	80 e0       	ldi	r24, 0x00	; 0
   14420:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   14422:	c7 57       	subi	r28, 0x77	; 119
   14424:	de 4f       	sbci	r29, 0xFE	; 254
   14426:	0f b6       	in	r0, 0x3f	; 63
   14428:	f8 94       	cli
   1442a:	de bf       	out	0x3e, r29	; 62
   1442c:	0f be       	out	0x3f, r0	; 63
   1442e:	cd bf       	out	0x3d, r28	; 61
   14430:	df 91       	pop	r29
   14432:	cf 91       	pop	r28
   14434:	1f 91       	pop	r17
   14436:	0f 91       	pop	r16
   14438:	ff 90       	pop	r15
   1443a:	ef 90       	pop	r14
   1443c:	df 90       	pop	r13
   1443e:	cf 90       	pop	r12
   14440:	bf 90       	pop	r11
   14442:	af 90       	pop	r10
   14444:	9f 90       	pop	r9
   14446:	8f 90       	pop	r8
   14448:	6f 90       	pop	r6
   1444a:	5f 90       	pop	r5
   1444c:	4f 90       	pop	r4
   1444e:	3f 90       	pop	r3
   14450:	2f 90       	pop	r2
   14452:	08 95       	ret

00014454 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14454:	0f 93       	push	r16
   14456:	1f 93       	push	r17
   14458:	25 e0       	ldi	r18, 0x05	; 5
   1445a:	30 e0       	ldi	r19, 0x00	; 0
   1445c:	fc 01       	movw	r30, r24
   1445e:	31 83       	std	Z+1, r19	; 0x01
   14460:	20 83       	st	Z, r18
   14462:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14466:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1446a:	06 81       	ldd	r16, Z+6	; 0x06
   1446c:	17 81       	ldd	r17, Z+7	; 0x07
   1446e:	20 e0       	ldi	r18, 0x00	; 0
   14470:	30 e0       	ldi	r19, 0x00	; 0
   14472:	42 e0       	ldi	r20, 0x02	; 2
   14474:	50 e0       	ldi	r21, 0x00	; 0
   14476:	60 e0       	ldi	r22, 0x00	; 0
   14478:	70 e0       	ldi	r23, 0x00	; 0
   1447a:	88 e9       	ldi	r24, 0x98	; 152
   1447c:	99 e1       	ldi	r25, 0x19	; 25
   1447e:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   14482:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14486:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1448a:	00 85       	ldd	r16, Z+8	; 0x08
   1448c:	11 85       	ldd	r17, Z+9	; 0x09
   1448e:	20 e0       	ldi	r18, 0x00	; 0
   14490:	30 e0       	ldi	r19, 0x00	; 0
   14492:	42 e0       	ldi	r20, 0x02	; 2
   14494:	50 e0       	ldi	r21, 0x00	; 0
   14496:	61 e0       	ldi	r22, 0x01	; 1
   14498:	70 e0       	ldi	r23, 0x00	; 0
   1449a:	88 e9       	ldi	r24, 0x98	; 152
   1449c:	99 e1       	ldi	r25, 0x19	; 25
   1449e:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   144a2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   144a6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   144aa:	02 85       	ldd	r16, Z+10	; 0x0a
   144ac:	10 e0       	ldi	r17, 0x00	; 0
   144ae:	20 e0       	ldi	r18, 0x00	; 0
   144b0:	30 e0       	ldi	r19, 0x00	; 0
   144b2:	41 e0       	ldi	r20, 0x01	; 1
   144b4:	50 e0       	ldi	r21, 0x00	; 0
   144b6:	64 e0       	ldi	r22, 0x04	; 4
   144b8:	70 e0       	ldi	r23, 0x00	; 0
   144ba:	88 e9       	ldi	r24, 0x98	; 152
   144bc:	99 e1       	ldi	r25, 0x19	; 25
   144be:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   144c2:	88 e9       	ldi	r24, 0x98	; 152
   144c4:	99 e1       	ldi	r25, 0x19	; 25
   144c6:	1f 91       	pop	r17
   144c8:	0f 91       	pop	r16
   144ca:	08 95       	ret

000144cc <SS80UnitPack>:
   144cc:	0f 93       	push	r16
   144ce:	1f 93       	push	r17
   144d0:	23 e1       	ldi	r18, 0x13	; 19
   144d2:	30 e0       	ldi	r19, 0x00	; 0
   144d4:	fc 01       	movw	r30, r24
   144d6:	31 83       	std	Z+1, r19	; 0x01
   144d8:	20 83       	st	Z, r18
   144da:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   144de:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   144e2:	03 85       	ldd	r16, Z+11	; 0x0b
   144e4:	10 e0       	ldi	r17, 0x00	; 0
   144e6:	20 e0       	ldi	r18, 0x00	; 0
   144e8:	30 e0       	ldi	r19, 0x00	; 0
   144ea:	41 e0       	ldi	r20, 0x01	; 1
   144ec:	50 e0       	ldi	r21, 0x00	; 0
   144ee:	60 e0       	ldi	r22, 0x00	; 0
   144f0:	70 e0       	ldi	r23, 0x00	; 0
   144f2:	85 e8       	ldi	r24, 0x85	; 133
   144f4:	99 e1       	ldi	r25, 0x19	; 25
   144f6:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   144fa:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   144fe:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14502:	04 85       	ldd	r16, Z+12	; 0x0c
   14504:	15 85       	ldd	r17, Z+13	; 0x0d
   14506:	26 85       	ldd	r18, Z+14	; 0x0e
   14508:	37 85       	ldd	r19, Z+15	; 0x0f
   1450a:	43 e0       	ldi	r20, 0x03	; 3
   1450c:	50 e0       	ldi	r21, 0x00	; 0
   1450e:	61 e0       	ldi	r22, 0x01	; 1
   14510:	70 e0       	ldi	r23, 0x00	; 0
   14512:	85 e8       	ldi	r24, 0x85	; 133
   14514:	99 e1       	ldi	r25, 0x19	; 25
   14516:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1451a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1451e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14522:	00 89       	ldd	r16, Z+16	; 0x10
   14524:	11 89       	ldd	r17, Z+17	; 0x11
   14526:	20 e0       	ldi	r18, 0x00	; 0
   14528:	30 e0       	ldi	r19, 0x00	; 0
   1452a:	42 e0       	ldi	r20, 0x02	; 2
   1452c:	50 e0       	ldi	r21, 0x00	; 0
   1452e:	64 e0       	ldi	r22, 0x04	; 4
   14530:	70 e0       	ldi	r23, 0x00	; 0
   14532:	85 e8       	ldi	r24, 0x85	; 133
   14534:	99 e1       	ldi	r25, 0x19	; 25
   14536:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1453a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1453e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14542:	02 89       	ldd	r16, Z+18	; 0x12
   14544:	10 e0       	ldi	r17, 0x00	; 0
   14546:	20 e0       	ldi	r18, 0x00	; 0
   14548:	30 e0       	ldi	r19, 0x00	; 0
   1454a:	41 e0       	ldi	r20, 0x01	; 1
   1454c:	50 e0       	ldi	r21, 0x00	; 0
   1454e:	66 e0       	ldi	r22, 0x06	; 6
   14550:	70 e0       	ldi	r23, 0x00	; 0
   14552:	85 e8       	ldi	r24, 0x85	; 133
   14554:	99 e1       	ldi	r25, 0x19	; 25
   14556:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1455a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1455e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14562:	03 89       	ldd	r16, Z+19	; 0x13
   14564:	10 e0       	ldi	r17, 0x00	; 0
   14566:	20 e0       	ldi	r18, 0x00	; 0
   14568:	30 e0       	ldi	r19, 0x00	; 0
   1456a:	41 e0       	ldi	r20, 0x01	; 1
   1456c:	50 e0       	ldi	r21, 0x00	; 0
   1456e:	67 e0       	ldi	r22, 0x07	; 7
   14570:	70 e0       	ldi	r23, 0x00	; 0
   14572:	85 e8       	ldi	r24, 0x85	; 133
   14574:	99 e1       	ldi	r25, 0x19	; 25
   14576:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1457a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1457e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14582:	04 89       	ldd	r16, Z+20	; 0x14
   14584:	15 89       	ldd	r17, Z+21	; 0x15
   14586:	20 e0       	ldi	r18, 0x00	; 0
   14588:	30 e0       	ldi	r19, 0x00	; 0
   1458a:	42 e0       	ldi	r20, 0x02	; 2
   1458c:	50 e0       	ldi	r21, 0x00	; 0
   1458e:	68 e0       	ldi	r22, 0x08	; 8
   14590:	70 e0       	ldi	r23, 0x00	; 0
   14592:	85 e8       	ldi	r24, 0x85	; 133
   14594:	99 e1       	ldi	r25, 0x19	; 25
   14596:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1459a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1459e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   145a2:	06 89       	ldd	r16, Z+22	; 0x16
   145a4:	17 89       	ldd	r17, Z+23	; 0x17
   145a6:	20 e0       	ldi	r18, 0x00	; 0
   145a8:	30 e0       	ldi	r19, 0x00	; 0
   145aa:	42 e0       	ldi	r20, 0x02	; 2
   145ac:	50 e0       	ldi	r21, 0x00	; 0
   145ae:	6a e0       	ldi	r22, 0x0A	; 10
   145b0:	70 e0       	ldi	r23, 0x00	; 0
   145b2:	85 e8       	ldi	r24, 0x85	; 133
   145b4:	99 e1       	ldi	r25, 0x19	; 25
   145b6:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   145ba:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   145be:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   145c2:	00 8d       	ldd	r16, Z+24	; 0x18
   145c4:	11 8d       	ldd	r17, Z+25	; 0x19
   145c6:	20 e0       	ldi	r18, 0x00	; 0
   145c8:	30 e0       	ldi	r19, 0x00	; 0
   145ca:	42 e0       	ldi	r20, 0x02	; 2
   145cc:	50 e0       	ldi	r21, 0x00	; 0
   145ce:	6c e0       	ldi	r22, 0x0C	; 12
   145d0:	70 e0       	ldi	r23, 0x00	; 0
   145d2:	85 e8       	ldi	r24, 0x85	; 133
   145d4:	99 e1       	ldi	r25, 0x19	; 25
   145d6:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   145da:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   145de:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   145e2:	02 8d       	ldd	r16, Z+26	; 0x1a
   145e4:	13 8d       	ldd	r17, Z+27	; 0x1b
   145e6:	20 e0       	ldi	r18, 0x00	; 0
   145e8:	30 e0       	ldi	r19, 0x00	; 0
   145ea:	42 e0       	ldi	r20, 0x02	; 2
   145ec:	50 e0       	ldi	r21, 0x00	; 0
   145ee:	6e e0       	ldi	r22, 0x0E	; 14
   145f0:	70 e0       	ldi	r23, 0x00	; 0
   145f2:	85 e8       	ldi	r24, 0x85	; 133
   145f4:	99 e1       	ldi	r25, 0x19	; 25
   145f6:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   145fa:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   145fe:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14602:	04 8d       	ldd	r16, Z+28	; 0x1c
   14604:	10 e0       	ldi	r17, 0x00	; 0
   14606:	20 e0       	ldi	r18, 0x00	; 0
   14608:	30 e0       	ldi	r19, 0x00	; 0
   1460a:	41 e0       	ldi	r20, 0x01	; 1
   1460c:	50 e0       	ldi	r21, 0x00	; 0
   1460e:	60 e1       	ldi	r22, 0x10	; 16
   14610:	70 e0       	ldi	r23, 0x00	; 0
   14612:	85 e8       	ldi	r24, 0x85	; 133
   14614:	99 e1       	ldi	r25, 0x19	; 25
   14616:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1461a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1461e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14622:	05 8d       	ldd	r16, Z+29	; 0x1d
   14624:	10 e0       	ldi	r17, 0x00	; 0
   14626:	20 e0       	ldi	r18, 0x00	; 0
   14628:	30 e0       	ldi	r19, 0x00	; 0
   1462a:	41 e0       	ldi	r20, 0x01	; 1
   1462c:	50 e0       	ldi	r21, 0x00	; 0
   1462e:	61 e1       	ldi	r22, 0x11	; 17
   14630:	70 e0       	ldi	r23, 0x00	; 0
   14632:	85 e8       	ldi	r24, 0x85	; 133
   14634:	99 e1       	ldi	r25, 0x19	; 25
   14636:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1463a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1463e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14642:	06 8d       	ldd	r16, Z+30	; 0x1e
   14644:	10 e0       	ldi	r17, 0x00	; 0
   14646:	20 e0       	ldi	r18, 0x00	; 0
   14648:	30 e0       	ldi	r19, 0x00	; 0
   1464a:	41 e0       	ldi	r20, 0x01	; 1
   1464c:	50 e0       	ldi	r21, 0x00	; 0
   1464e:	62 e1       	ldi	r22, 0x12	; 18
   14650:	70 e0       	ldi	r23, 0x00	; 0
   14652:	85 e8       	ldi	r24, 0x85	; 133
   14654:	99 e1       	ldi	r25, 0x19	; 25
   14656:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   1465a:	85 e8       	ldi	r24, 0x85	; 133
   1465c:	99 e1       	ldi	r25, 0x19	; 25
   1465e:	1f 91       	pop	r17
   14660:	0f 91       	pop	r16
   14662:	08 95       	ret

00014664 <SS80VolumePack>:
   14664:	0f 93       	push	r16
   14666:	1f 93       	push	r17
   14668:	2d e0       	ldi	r18, 0x0D	; 13
   1466a:	30 e0       	ldi	r19, 0x00	; 0
   1466c:	fc 01       	movw	r30, r24
   1466e:	31 83       	std	Z+1, r19	; 0x01
   14670:	20 83       	st	Z, r18
   14672:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14676:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1467a:	07 8d       	ldd	r16, Z+31	; 0x1f
   1467c:	10 a1       	ldd	r17, Z+32	; 0x20
   1467e:	21 a1       	ldd	r18, Z+33	; 0x21
   14680:	32 a1       	ldd	r19, Z+34	; 0x22
   14682:	43 e0       	ldi	r20, 0x03	; 3
   14684:	50 e0       	ldi	r21, 0x00	; 0
   14686:	60 e0       	ldi	r22, 0x00	; 0
   14688:	70 e0       	ldi	r23, 0x00	; 0
   1468a:	88 e7       	ldi	r24, 0x78	; 120
   1468c:	99 e1       	ldi	r25, 0x19	; 25
   1468e:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   14692:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14696:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1469a:	03 a1       	ldd	r16, Z+35	; 0x23
   1469c:	10 e0       	ldi	r17, 0x00	; 0
   1469e:	20 e0       	ldi	r18, 0x00	; 0
   146a0:	30 e0       	ldi	r19, 0x00	; 0
   146a2:	41 e0       	ldi	r20, 0x01	; 1
   146a4:	50 e0       	ldi	r21, 0x00	; 0
   146a6:	63 e0       	ldi	r22, 0x03	; 3
   146a8:	70 e0       	ldi	r23, 0x00	; 0
   146aa:	88 e7       	ldi	r24, 0x78	; 120
   146ac:	99 e1       	ldi	r25, 0x19	; 25
   146ae:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   146b2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   146b6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   146ba:	04 a1       	ldd	r16, Z+36	; 0x24
   146bc:	15 a1       	ldd	r17, Z+37	; 0x25
   146be:	20 e0       	ldi	r18, 0x00	; 0
   146c0:	30 e0       	ldi	r19, 0x00	; 0
   146c2:	42 e0       	ldi	r20, 0x02	; 2
   146c4:	50 e0       	ldi	r21, 0x00	; 0
   146c6:	64 e0       	ldi	r22, 0x04	; 4
   146c8:	70 e0       	ldi	r23, 0x00	; 0
   146ca:	88 e7       	ldi	r24, 0x78	; 120
   146cc:	99 e1       	ldi	r25, 0x19	; 25
   146ce:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   146d2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   146d6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   146da:	06 a1       	ldd	r16, Z+38	; 0x26
   146dc:	17 a1       	ldd	r17, Z+39	; 0x27
   146de:	20 a5       	ldd	r18, Z+40	; 0x28
   146e0:	31 a5       	ldd	r19, Z+41	; 0x29
   146e2:	46 e0       	ldi	r20, 0x06	; 6
   146e4:	50 e0       	ldi	r21, 0x00	; 0
   146e6:	66 e0       	ldi	r22, 0x06	; 6
   146e8:	70 e0       	ldi	r23, 0x00	; 0
   146ea:	88 e7       	ldi	r24, 0x78	; 120
   146ec:	99 e1       	ldi	r25, 0x19	; 25
   146ee:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   146f2:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   146f6:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   146fa:	02 a5       	ldd	r16, Z+42	; 0x2a
   146fc:	10 e0       	ldi	r17, 0x00	; 0
   146fe:	20 e0       	ldi	r18, 0x00	; 0
   14700:	30 e0       	ldi	r19, 0x00	; 0
   14702:	41 e0       	ldi	r20, 0x01	; 1
   14704:	50 e0       	ldi	r21, 0x00	; 0
   14706:	6c e0       	ldi	r22, 0x0C	; 12
   14708:	70 e0       	ldi	r23, 0x00	; 0
   1470a:	88 e7       	ldi	r24, 0x78	; 120
   1470c:	99 e1       	ldi	r25, 0x19	; 25
   1470e:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   14712:	88 e7       	ldi	r24, 0x78	; 120
   14714:	99 e1       	ldi	r25, 0x19	; 25
   14716:	1f 91       	pop	r17
   14718:	0f 91       	pop	r16
   1471a:	08 95       	ret

0001471c <SS80_test_extended_status>:
   1471c:	9b 01       	movw	r18, r22
   1471e:	43 e0       	ldi	r20, 0x03	; 3
   14720:	35 95       	asr	r19
   14722:	27 95       	ror	r18
   14724:	4a 95       	dec	r20
   14726:	e1 f7       	brne	.-8      	; 0x14720 <SS80_test_extended_status+0x4>
   14728:	82 0f       	add	r24, r18
   1472a:	93 1f       	adc	r25, r19
   1472c:	67 70       	andi	r22, 0x07	; 7
   1472e:	77 27       	eor	r23, r23
   14730:	20 e8       	ldi	r18, 0x80	; 128
   14732:	30 e0       	ldi	r19, 0x00	; 0
   14734:	02 c0       	rjmp	.+4      	; 0x1473a <SS80_test_extended_status+0x1e>
   14736:	35 95       	asr	r19
   14738:	27 95       	ror	r18
   1473a:	6a 95       	dec	r22
   1473c:	e2 f7       	brpl	.-8      	; 0x14736 <SS80_test_extended_status+0x1a>
   1473e:	fc 01       	movw	r30, r24
   14740:	80 81       	ld	r24, Z
   14742:	28 23       	and	r18, r24
   14744:	81 e0       	ldi	r24, 0x01	; 1
   14746:	90 e0       	ldi	r25, 0x00	; 0
   14748:	11 f4       	brne	.+4      	; 0x1474e <SS80_test_extended_status+0x32>
   1474a:	80 e0       	ldi	r24, 0x00	; 0
   1474c:	90 e0       	ldi	r25, 0x00	; 0
   1474e:	08 95       	ret

00014750 <SS80_display_extended_status>:
   14750:	6f 92       	push	r6
   14752:	7f 92       	push	r7
   14754:	8f 92       	push	r8
   14756:	ef 92       	push	r14
   14758:	ff 92       	push	r15
   1475a:	0f 93       	push	r16
   1475c:	1f 93       	push	r17
   1475e:	cf 93       	push	r28
   14760:	df 93       	push	r29
   14762:	ad b7       	in	r26, 0x3d	; 61
   14764:	be b7       	in	r27, 0x3e	; 62
   14766:	17 97       	sbiw	r26, 0x07	; 7
   14768:	0f b6       	in	r0, 0x3f	; 63
   1476a:	f8 94       	cli
   1476c:	be bf       	out	0x3e, r27	; 62
   1476e:	0f be       	out	0x3f, r0	; 63
   14770:	ad bf       	out	0x3d, r26	; 61
   14772:	fc 01       	movw	r30, r24
   14774:	ac 01       	movw	r20, r24
   14776:	48 5f       	subi	r20, 0xF8	; 248
   14778:	5f 4f       	sbci	r21, 0xFF	; 255
   1477a:	20 e0       	ldi	r18, 0x00	; 0
   1477c:	30 e0       	ldi	r19, 0x00	; 0
   1477e:	a1 91       	ld	r26, Z+
   14780:	aa 23       	and	r26, r26
   14782:	11 f0       	breq	.+4      	; 0x14788 <SS80_display_extended_status+0x38>
   14784:	21 e0       	ldi	r18, 0x01	; 1
   14786:	30 e0       	ldi	r19, 0x00	; 0
   14788:	e4 17       	cp	r30, r20
   1478a:	f5 07       	cpc	r31, r21
   1478c:	c1 f7       	brne	.-16     	; 0x1477e <SS80_display_extended_status+0x2e>
   1478e:	23 2b       	or	r18, r19
   14790:	81 f1       	breq	.+96     	; 0x147f2 <SS80_display_extended_status+0xa2>
   14792:	ec 01       	movw	r28, r24
   14794:	ed b7       	in	r30, 0x3d	; 61
   14796:	fe b7       	in	r31, 0x3e	; 62
   14798:	75 83       	std	Z+5, r23	; 0x05
   1479a:	64 83       	std	Z+4, r22	; 0x04
   1479c:	87 e1       	ldi	r24, 0x17	; 23
   1479e:	94 e2       	ldi	r25, 0x24	; 36
   147a0:	a0 e0       	ldi	r26, 0x00	; 0
   147a2:	81 83       	std	Z+1, r24	; 0x01
   147a4:	92 83       	std	Z+2, r25	; 0x02
   147a6:	a3 83       	std	Z+3, r26	; 0x03
   147a8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   147ac:	0c e7       	ldi	r16, 0x7C	; 124
   147ae:	12 e0       	ldi	r17, 0x02	; 2
   147b0:	8c e0       	ldi	r24, 0x0C	; 12
   147b2:	94 e2       	ldi	r25, 0x24	; 36
   147b4:	3c 01       	movw	r6, r24
   147b6:	81 2c       	mov	r8, r1
   147b8:	f8 01       	movw	r30, r16
   147ba:	e0 80       	ld	r14, Z
   147bc:	f1 80       	ldd	r15, Z+1	; 0x01
   147be:	ff ef       	ldi	r31, 0xFF	; 255
   147c0:	ef 16       	cp	r14, r31
   147c2:	ff 06       	cpc	r15, r31
   147c4:	b1 f0       	breq	.+44     	; 0x147f2 <SS80_display_extended_status+0xa2>
   147c6:	b7 01       	movw	r22, r14
   147c8:	ce 01       	movw	r24, r28
   147ca:	a8 df       	rcall	.-176    	; 0x1471c <SS80_test_extended_status>
   147cc:	89 2b       	or	r24, r25
   147ce:	71 f0       	breq	.+28     	; 0x147ec <SS80_display_extended_status+0x9c>
   147d0:	f8 01       	movw	r30, r16
   147d2:	82 81       	ldd	r24, Z+2	; 0x02
   147d4:	93 81       	ldd	r25, Z+3	; 0x03
   147d6:	ed b7       	in	r30, 0x3d	; 61
   147d8:	fe b7       	in	r31, 0x3e	; 62
   147da:	97 83       	std	Z+7, r25	; 0x07
   147dc:	86 83       	std	Z+6, r24	; 0x06
   147de:	f5 82       	std	Z+5, r15	; 0x05
   147e0:	e4 82       	std	Z+4, r14	; 0x04
   147e2:	61 82       	std	Z+1, r6	; 0x01
   147e4:	72 82       	std	Z+2, r7	; 0x02
   147e6:	83 82       	std	Z+3, r8	; 0x03
   147e8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   147ec:	0c 5f       	subi	r16, 0xFC	; 252
   147ee:	1f 4f       	sbci	r17, 0xFF	; 255
   147f0:	e3 cf       	rjmp	.-58     	; 0x147b8 <SS80_display_extended_status+0x68>
   147f2:	ad b7       	in	r26, 0x3d	; 61
   147f4:	be b7       	in	r27, 0x3e	; 62
   147f6:	17 96       	adiw	r26, 0x07	; 7
   147f8:	0f b6       	in	r0, 0x3f	; 63
   147fa:	f8 94       	cli
   147fc:	be bf       	out	0x3e, r27	; 62
   147fe:	0f be       	out	0x3f, r0	; 63
   14800:	ad bf       	out	0x3d, r26	; 61
   14802:	df 91       	pop	r29
   14804:	cf 91       	pop	r28
   14806:	1f 91       	pop	r17
   14808:	0f 91       	pop	r16
   1480a:	ff 90       	pop	r15
   1480c:	ef 90       	pop	r14
   1480e:	8f 90       	pop	r8
   14810:	7f 90       	pop	r7
   14812:	6f 90       	pop	r6
   14814:	08 95       	ret

00014816 <SS80_send_status>:
   14816:	a9 e1       	ldi	r26, 0x19	; 25
   14818:	b0 e0       	ldi	r27, 0x00	; 0
   1481a:	e1 e1       	ldi	r30, 0x11	; 17
   1481c:	f4 ea       	ldi	r31, 0xA4	; 164
   1481e:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
   14822:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14826:	85 ff       	sbrs	r24, 5
   14828:	0a c0       	rjmp	.+20     	; 0x1483e <SS80_send_status+0x28>
   1482a:	88 ef       	ldi	r24, 0xF8	; 248
   1482c:	93 e2       	ldi	r25, 0x23	; 35
   1482e:	a0 e0       	ldi	r26, 0x00	; 0
   14830:	ed b7       	in	r30, 0x3d	; 61
   14832:	fe b7       	in	r31, 0x3e	; 62
   14834:	81 83       	std	Z+1, r24	; 0x01
   14836:	92 83       	std	Z+2, r25	; 0x02
   14838:	a3 83       	std	Z+3, r26	; 0x03
   1483a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1483e:	ce 01       	movw	r24, r28
   14840:	04 96       	adiw	r24, 0x04	; 4
   14842:	7c 01       	movw	r14, r24
   14844:	84 e1       	ldi	r24, 0x14	; 20
   14846:	f7 01       	movw	r30, r14
   14848:	11 92       	st	Z+, r1
   1484a:	8a 95       	dec	r24
   1484c:	e9 f7       	brne	.-6      	; 0x14848 <SS80_send_status+0x32>
   1484e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14852:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14856:	86 81       	ldd	r24, Z+6	; 0x06
   14858:	20 e1       	ldi	r18, 0x10	; 16
   1485a:	82 9f       	mul	r24, r18
   1485c:	c0 01       	movw	r24, r0
   1485e:	11 24       	eor	r1, r1
   14860:	95 81       	ldd	r25, Z+5	; 0x05
   14862:	9f 70       	andi	r25, 0x0F	; 15
   14864:	89 2b       	or	r24, r25
   14866:	8c 83       	std	Y+4, r24	; 0x04
   14868:	8f ef       	ldi	r24, 0xFF	; 255
   1486a:	8d 83       	std	Y+5, r24	; 0x05
   1486c:	83 81       	ldd	r24, Z+3	; 0x03
   1486e:	86 ff       	sbrs	r24, 6
   14870:	02 c0       	rjmp	.+4      	; 0x14876 <SS80_send_status+0x60>
   14872:	92 e0       	ldi	r25, 0x02	; 2
   14874:	9e 83       	std	Y+6, r25	; 0x06
   14876:	82 ff       	sbrs	r24, 2
   14878:	03 c0       	rjmp	.+6      	; 0x14880 <SS80_send_status+0x6a>
   1487a:	9e 81       	ldd	r25, Y+6	; 0x06
   1487c:	91 60       	ori	r25, 0x01	; 1
   1487e:	9e 83       	std	Y+6, r25	; 0x06
   14880:	80 ff       	sbrs	r24, 0
   14882:	02 c0       	rjmp	.+4      	; 0x14888 <SS80_send_status+0x72>
   14884:	82 e0       	ldi	r24, 0x02	; 2
   14886:	88 87       	std	Y+8, r24	; 0x08
   14888:	83 81       	ldd	r24, Z+3	; 0x03
   1488a:	81 ff       	sbrs	r24, 1
   1488c:	03 c0       	rjmp	.+6      	; 0x14894 <SS80_send_status+0x7e>
   1488e:	88 85       	ldd	r24, Y+8	; 0x08
   14890:	82 60       	ori	r24, 0x02	; 2
   14892:	88 87       	std	Y+8, r24	; 0x08
   14894:	83 81       	ldd	r24, Z+3	; 0x03
   14896:	83 ff       	sbrs	r24, 3
   14898:	02 c0       	rjmp	.+4      	; 0x1489e <SS80_send_status+0x88>
   1489a:	88 e0       	ldi	r24, 0x08	; 8
   1489c:	8a 87       	std	Y+10, r24	; 0x0a
   1489e:	83 81       	ldd	r24, Z+3	; 0x03
   148a0:	94 81       	ldd	r25, Z+4	; 0x04
   148a2:	89 2b       	or	r24, r25
   148a4:	59 f4       	brne	.+22     	; 0x148bc <SS80_send_status+0xa6>
   148a6:	07 81       	ldd	r16, Z+7	; 0x07
   148a8:	10 85       	ldd	r17, Z+8	; 0x08
   148aa:	21 85       	ldd	r18, Z+9	; 0x09
   148ac:	32 85       	ldd	r19, Z+10	; 0x0a
   148ae:	46 e0       	ldi	r20, 0x06	; 6
   148b0:	50 e0       	ldi	r21, 0x00	; 0
   148b2:	6a e0       	ldi	r22, 0x0A	; 10
   148b4:	70 e0       	ldi	r23, 0x00	; 0
   148b6:	c7 01       	movw	r24, r14
   148b8:	0e 94 a5 bc 	call	0x1794a	; 0x1794a <V2B_MSB>
   148bc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   148c0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   148c4:	83 81       	ldd	r24, Z+3	; 0x03
   148c6:	94 81       	ldd	r25, Z+4	; 0x04
   148c8:	89 2b       	or	r24, r25
   148ca:	11 f0       	breq	.+4      	; 0x148d0 <SS80_send_status+0xba>
   148cc:	81 e0       	ldi	r24, 0x01	; 1
   148ce:	82 83       	std	Z+2, r24	; 0x02
   148d0:	80 e0       	ldi	r24, 0x00	; 0
   148d2:	91 e0       	ldi	r25, 0x01	; 1
   148d4:	99 8f       	std	Y+25, r25	; 0x19
   148d6:	88 8f       	std	Y+24, r24	; 0x18
   148d8:	ae 01       	movw	r20, r28
   148da:	48 5e       	subi	r20, 0xE8	; 232
   148dc:	5f 4f       	sbci	r21, 0xFF	; 255
   148de:	64 e1       	ldi	r22, 0x14	; 20
   148e0:	70 e0       	ldi	r23, 0x00	; 0
   148e2:	c7 01       	movw	r24, r14
   148e4:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   148e8:	44 97       	sbiw	r24, 0x14	; 20
   148ea:	71 f0       	breq	.+28     	; 0x14908 <SS80_send_status+0xf2>
   148ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   148f0:	80 ff       	sbrs	r24, 0
   148f2:	0a c0       	rjmp	.+20     	; 0x14908 <SS80_send_status+0xf2>
   148f4:	8d ed       	ldi	r24, 0xDD	; 221
   148f6:	93 e2       	ldi	r25, 0x23	; 35
   148f8:	a0 e0       	ldi	r26, 0x00	; 0
   148fa:	ed b7       	in	r30, 0x3d	; 61
   148fc:	fe b7       	in	r31, 0x3e	; 62
   148fe:	81 83       	std	Z+1, r24	; 0x01
   14900:	92 83       	std	Z+2, r25	; 0x02
   14902:	a3 83       	std	Z+3, r26	; 0x03
   14904:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14908:	88 8d       	ldd	r24, Y+24	; 0x18
   1490a:	99 8d       	ldd	r25, Y+25	; 0x19
   1490c:	88 27       	eor	r24, r24
   1490e:	90 7d       	andi	r25, 0xD0	; 208
   14910:	69 96       	adiw	r28, 0x19	; 25
   14912:	e6 e0       	ldi	r30, 0x06	; 6
   14914:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00014918 <SS80_describe>:
   14918:	a7 e0       	ldi	r26, 0x07	; 7
   1491a:	b0 e0       	ldi	r27, 0x00	; 0
   1491c:	e2 e9       	ldi	r30, 0x92	; 146
   1491e:	f4 ea       	ldi	r31, 0xA4	; 164
   14920:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   14924:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14928:	85 ff       	sbrs	r24, 5
   1492a:	0a c0       	rjmp	.+20     	; 0x14940 <SS80_describe+0x28>
   1492c:	8c ec       	ldi	r24, 0xCC	; 204
   1492e:	93 e2       	ldi	r25, 0x23	; 35
   14930:	a0 e0       	ldi	r26, 0x00	; 0
   14932:	ed b7       	in	r30, 0x3d	; 61
   14934:	fe b7       	in	r31, 0x3e	; 62
   14936:	81 83       	std	Z+1, r24	; 0x01
   14938:	92 83       	std	Z+2, r25	; 0x02
   1493a:	a3 83       	std	Z+3, r26	; 0x03
   1493c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14940:	1f 82       	std	Y+7, r1	; 0x07
   14942:	1e 82       	std	Y+6, r1	; 0x06
   14944:	ce 01       	movw	r24, r28
   14946:	04 96       	adiw	r24, 0x04	; 4
   14948:	85 dd       	rcall	.-1270   	; 0x14454 <SS80ControllerPack>
   1494a:	6c 81       	ldd	r22, Y+4	; 0x04
   1494c:	7d 81       	ldd	r23, Y+5	; 0x05
   1494e:	ae 01       	movw	r20, r28
   14950:	4a 5f       	subi	r20, 0xFA	; 250
   14952:	5f 4f       	sbci	r21, 0xFF	; 255
   14954:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   14958:	2c 81       	ldd	r18, Y+4	; 0x04
   1495a:	3d 81       	ldd	r19, Y+5	; 0x05
   1495c:	82 17       	cp	r24, r18
   1495e:	93 07       	cpc	r25, r19
   14960:	39 f0       	breq	.+14     	; 0x14970 <SS80_describe+0x58>
   14962:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14966:	80 ff       	sbrs	r24, 0
   14968:	3c c0       	rjmp	.+120    	; 0x149e2 <SS80_describe+0xca>
   1496a:	89 ea       	ldi	r24, 0xA9	; 169
   1496c:	93 e2       	ldi	r25, 0x23	; 35
   1496e:	31 c0       	rjmp	.+98     	; 0x149d2 <SS80_describe+0xba>
   14970:	1f 82       	std	Y+7, r1	; 0x07
   14972:	1e 82       	std	Y+6, r1	; 0x06
   14974:	ce 01       	movw	r24, r28
   14976:	04 96       	adiw	r24, 0x04	; 4
   14978:	a9 dd       	rcall	.-1198   	; 0x144cc <SS80UnitPack>
   1497a:	6c 81       	ldd	r22, Y+4	; 0x04
   1497c:	7d 81       	ldd	r23, Y+5	; 0x05
   1497e:	ae 01       	movw	r20, r28
   14980:	4a 5f       	subi	r20, 0xFA	; 250
   14982:	5f 4f       	sbci	r21, 0xFF	; 255
   14984:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   14988:	2c 81       	ldd	r18, Y+4	; 0x04
   1498a:	3d 81       	ldd	r19, Y+5	; 0x05
   1498c:	82 17       	cp	r24, r18
   1498e:	93 07       	cpc	r25, r19
   14990:	39 f0       	breq	.+14     	; 0x149a0 <SS80_describe+0x88>
   14992:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14996:	80 ff       	sbrs	r24, 0
   14998:	24 c0       	rjmp	.+72     	; 0x149e2 <SS80_describe+0xca>
   1499a:	8c e8       	ldi	r24, 0x8C	; 140
   1499c:	93 e2       	ldi	r25, 0x23	; 35
   1499e:	19 c0       	rjmp	.+50     	; 0x149d2 <SS80_describe+0xba>
   149a0:	80 e0       	ldi	r24, 0x00	; 0
   149a2:	91 e0       	ldi	r25, 0x01	; 1
   149a4:	9f 83       	std	Y+7, r25	; 0x07
   149a6:	8e 83       	std	Y+6, r24	; 0x06
   149a8:	ce 01       	movw	r24, r28
   149aa:	04 96       	adiw	r24, 0x04	; 4
   149ac:	5b de       	rcall	.-842    	; 0x14664 <SS80VolumePack>
   149ae:	6c 81       	ldd	r22, Y+4	; 0x04
   149b0:	7d 81       	ldd	r23, Y+5	; 0x05
   149b2:	ae 01       	movw	r20, r28
   149b4:	4a 5f       	subi	r20, 0xFA	; 250
   149b6:	5f 4f       	sbci	r21, 0xFF	; 255
   149b8:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   149bc:	2c 81       	ldd	r18, Y+4	; 0x04
   149be:	3d 81       	ldd	r19, Y+5	; 0x05
   149c0:	82 17       	cp	r24, r18
   149c2:	93 07       	cpc	r25, r19
   149c4:	99 f0       	breq	.+38     	; 0x149ec <SS80_describe+0xd4>
   149c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149ca:	80 ff       	sbrs	r24, 0
   149cc:	0a c0       	rjmp	.+20     	; 0x149e2 <SS80_describe+0xca>
   149ce:	8d e6       	ldi	r24, 0x6D	; 109
   149d0:	93 e2       	ldi	r25, 0x23	; 35
   149d2:	a0 e0       	ldi	r26, 0x00	; 0
   149d4:	ed b7       	in	r30, 0x3d	; 61
   149d6:	fe b7       	in	r31, 0x3e	; 62
   149d8:	81 83       	std	Z+1, r24	; 0x01
   149da:	92 83       	std	Z+2, r25	; 0x02
   149dc:	a3 83       	std	Z+3, r26	; 0x03
   149de:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   149e2:	8e 81       	ldd	r24, Y+6	; 0x06
   149e4:	9f 81       	ldd	r25, Y+7	; 0x07
   149e6:	88 27       	eor	r24, r24
   149e8:	90 7d       	andi	r25, 0xD0	; 208
   149ea:	02 c0       	rjmp	.+4      	; 0x149f0 <SS80_describe+0xd8>
   149ec:	80 e0       	ldi	r24, 0x00	; 0
   149ee:	90 e0       	ldi	r25, 0x00	; 0
   149f0:	27 96       	adiw	r28, 0x07	; 7
   149f2:	e2 e0       	ldi	r30, 0x02	; 2
   149f4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000149f8 <SS80_Check_Unit>:
   149f8:	00 d0       	rcall	.+0      	; 0x149fa <SS80_Check_Unit+0x2>
   149fa:	00 d0       	rcall	.+0      	; 0x149fc <SS80_Check_Unit+0x4>
   149fc:	1f 92       	push	r1
   149fe:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14a02:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14a06:	88 23       	and	r24, r24
   14a08:	c9 f0       	breq	.+50     	; 0x14a3c <SS80_Check_Unit+0x44>
   14a0a:	8f 30       	cpi	r24, 0x0F	; 15
   14a0c:	b9 f0       	breq	.+46     	; 0x14a3c <SS80_Check_Unit+0x44>
   14a0e:	23 81       	ldd	r18, Z+3	; 0x03
   14a10:	34 81       	ldd	r19, Z+4	; 0x04
   14a12:	20 64       	ori	r18, 0x40	; 64
   14a14:	34 83       	std	Z+4, r19	; 0x04
   14a16:	23 83       	std	Z+3, r18	; 0x03
   14a18:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14a1c:	90 ff       	sbrs	r25, 0
   14a1e:	0f c0       	rjmp	.+30     	; 0x14a3e <SS80_Check_Unit+0x46>
   14a20:	90 e0       	ldi	r25, 0x00	; 0
   14a22:	ed b7       	in	r30, 0x3d	; 61
   14a24:	fe b7       	in	r31, 0x3e	; 62
   14a26:	95 83       	std	Z+5, r25	; 0x05
   14a28:	84 83       	std	Z+4, r24	; 0x04
   14a2a:	85 e5       	ldi	r24, 0x55	; 85
   14a2c:	93 e2       	ldi	r25, 0x23	; 35
   14a2e:	a0 e0       	ldi	r26, 0x00	; 0
   14a30:	81 83       	std	Z+1, r24	; 0x01
   14a32:	92 83       	std	Z+2, r25	; 0x02
   14a34:	a3 83       	std	Z+3, r26	; 0x03
   14a36:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14a3a:	01 c0       	rjmp	.+2      	; 0x14a3e <SS80_Check_Unit+0x46>
   14a3c:	85 83       	std	Z+5, r24	; 0x05
   14a3e:	0f 90       	pop	r0
   14a40:	0f 90       	pop	r0
   14a42:	0f 90       	pop	r0
   14a44:	0f 90       	pop	r0
   14a46:	0f 90       	pop	r0
   14a48:	08 95       	ret

00014a4a <SS80_Check_Volume>:
   14a4a:	00 d0       	rcall	.+0      	; 0x14a4c <SS80_Check_Volume+0x2>
   14a4c:	00 d0       	rcall	.+0      	; 0x14a4e <SS80_Check_Volume+0x4>
   14a4e:	1f 92       	push	r1
   14a50:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14a54:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14a58:	88 23       	and	r24, r24
   14a5a:	b9 f0       	breq	.+46     	; 0x14a8a <SS80_Check_Volume+0x40>
   14a5c:	23 81       	ldd	r18, Z+3	; 0x03
   14a5e:	34 81       	ldd	r19, Z+4	; 0x04
   14a60:	20 64       	ori	r18, 0x40	; 64
   14a62:	34 83       	std	Z+4, r19	; 0x04
   14a64:	23 83       	std	Z+3, r18	; 0x03
   14a66:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14a6a:	90 ff       	sbrs	r25, 0
   14a6c:	0f c0       	rjmp	.+30     	; 0x14a8c <SS80_Check_Volume+0x42>
   14a6e:	90 e0       	ldi	r25, 0x00	; 0
   14a70:	ed b7       	in	r30, 0x3d	; 61
   14a72:	fe b7       	in	r31, 0x3e	; 62
   14a74:	95 83       	std	Z+5, r25	; 0x05
   14a76:	84 83       	std	Z+4, r24	; 0x04
   14a78:	8b e3       	ldi	r24, 0x3B	; 59
   14a7a:	93 e2       	ldi	r25, 0x23	; 35
   14a7c:	a0 e0       	ldi	r26, 0x00	; 0
   14a7e:	81 83       	std	Z+1, r24	; 0x01
   14a80:	92 83       	std	Z+2, r25	; 0x02
   14a82:	a3 83       	std	Z+3, r26	; 0x03
   14a84:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14a88:	01 c0       	rjmp	.+2      	; 0x14a8c <SS80_Check_Volume+0x42>
   14a8a:	16 82       	std	Z+6, r1	; 0x06
   14a8c:	0f 90       	pop	r0
   14a8e:	0f 90       	pop	r0
   14a90:	0f 90       	pop	r0
   14a92:	0f 90       	pop	r0
   14a94:	0f 90       	pop	r0
   14a96:	08 95       	ret

00014a98 <SS80_Command_State>:
   14a98:	2f 92       	push	r2
   14a9a:	3f 92       	push	r3
   14a9c:	4f 92       	push	r4
   14a9e:	6f 92       	push	r6
   14aa0:	7f 92       	push	r7
   14aa2:	8f 92       	push	r8
   14aa4:	af 92       	push	r10
   14aa6:	bf 92       	push	r11
   14aa8:	cf 92       	push	r12
   14aaa:	ef 92       	push	r14
   14aac:	ff 92       	push	r15
   14aae:	0f 93       	push	r16
   14ab0:	1f 93       	push	r17
   14ab2:	cf 93       	push	r28
   14ab4:	df 93       	push	r29
   14ab6:	cd b7       	in	r28, 0x3d	; 61
   14ab8:	de b7       	in	r29, 0x3e	; 62
   14aba:	66 97       	sbiw	r28, 0x16	; 22
   14abc:	0f b6       	in	r0, 0x3f	; 63
   14abe:	f8 94       	cli
   14ac0:	de bf       	out	0x3e, r29	; 62
   14ac2:	0f be       	out	0x3f, r0	; 63
   14ac4:	cd bf       	out	0x3d, r28	; 61
   14ac6:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14aca:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14ace:	81 81       	ldd	r24, Z+1	; 0x01
   14ad0:	90 e0       	ldi	r25, 0x00	; 0
   14ad2:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
   14ad6:	80 e0       	ldi	r24, 0x00	; 0
   14ad8:	91 e0       	ldi	r25, 0x01	; 1
   14ada:	99 87       	std	Y+9, r25	; 0x09
   14adc:	88 87       	std	Y+8, r24	; 0x08
   14ade:	ae 01       	movw	r20, r28
   14ae0:	48 5f       	subi	r20, 0xF8	; 248
   14ae2:	5f 4f       	sbci	r21, 0xFF	; 255
   14ae4:	60 e0       	ldi	r22, 0x00	; 0
   14ae6:	72 e0       	ldi	r23, 0x02	; 2
   14ae8:	8a ee       	ldi	r24, 0xEA	; 234
   14aea:	9c e1       	ldi	r25, 0x1C	; 28
   14aec:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
   14af0:	9b 87       	std	Y+11, r25	; 0x0b
   14af2:	8a 87       	std	Y+10, r24	; 0x0a
   14af4:	88 85       	ldd	r24, Y+8	; 0x08
   14af6:	99 85       	ldd	r25, Y+9	; 0x09
   14af8:	9c 01       	movw	r18, r24
   14afa:	22 27       	eor	r18, r18
   14afc:	30 7d       	andi	r19, 0xD0	; 208
   14afe:	23 2b       	or	r18, r19
   14b00:	79 f0       	breq	.+30     	; 0x14b20 <SS80_Command_State+0x88>
   14b02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b06:	80 ff       	sbrs	r24, 0
   14b08:	21 c2       	rjmp	.+1090   	; 0x14f4c <SS80_Command_State+0x4b4>
   14b0a:	85 e1       	ldi	r24, 0x15	; 21
   14b0c:	93 e2       	ldi	r25, 0x23	; 35
   14b0e:	a0 e0       	ldi	r26, 0x00	; 0
   14b10:	ed b7       	in	r30, 0x3d	; 61
   14b12:	fe b7       	in	r31, 0x3e	; 62
   14b14:	81 83       	std	Z+1, r24	; 0x01
   14b16:	92 83       	std	Z+2, r25	; 0x02
   14b18:	a3 83       	std	Z+3, r26	; 0x03
   14b1a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14b1e:	16 c2       	rjmp	.+1068   	; 0x14f4c <SS80_Command_State+0x4b4>
   14b20:	2a 85       	ldd	r18, Y+10	; 0x0a
   14b22:	3b 85       	ldd	r19, Y+11	; 0x0b
   14b24:	23 2b       	or	r18, r19
   14b26:	09 f4       	brne	.+2      	; 0x14b2a <SS80_Command_State+0x92>
   14b28:	16 c2       	rjmp	.+1068   	; 0x14f56 <SS80_Command_State+0x4be>
   14b2a:	90 fd       	sbrc	r25, 0
   14b2c:	0e c0       	rjmp	.+28     	; 0x14b4a <SS80_Command_State+0xb2>
   14b2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b32:	80 ff       	sbrs	r24, 0
   14b34:	0a c0       	rjmp	.+20     	; 0x14b4a <SS80_Command_State+0xb2>
   14b36:	8c ef       	ldi	r24, 0xFC	; 252
   14b38:	92 e2       	ldi	r25, 0x22	; 34
   14b3a:	a0 e0       	ldi	r26, 0x00	; 0
   14b3c:	ed b7       	in	r30, 0x3d	; 61
   14b3e:	fe b7       	in	r31, 0x3e	; 62
   14b40:	81 83       	std	Z+1, r24	; 0x01
   14b42:	92 83       	std	Z+2, r25	; 0x02
   14b44:	a3 83       	std	Z+3, r26	; 0x03
   14b46:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14b4a:	e1 2c       	mov	r14, r1
   14b4c:	f1 2c       	mov	r15, r1
   14b4e:	80 e0       	ldi	r24, 0x00	; 0
   14b50:	92 e2       	ldi	r25, 0x22	; 34
   14b52:	9c 01       	movw	r18, r24
   14b54:	40 e0       	ldi	r20, 0x00	; 0
   14b56:	2e 87       	std	Y+14, r18	; 0x0e
   14b58:	3f 87       	std	Y+15, r19	; 0x0f
   14b5a:	48 8b       	std	Y+16, r20	; 0x10
   14b5c:	85 e2       	ldi	r24, 0x25	; 37
   14b5e:	92 e2       	ldi	r25, 0x22	; 34
   14b60:	9c 01       	movw	r18, r24
   14b62:	40 e0       	ldi	r20, 0x00	; 0
   14b64:	29 8b       	std	Y+17, r18	; 0x11
   14b66:	3a 8b       	std	Y+18, r19	; 0x12
   14b68:	4b 8b       	std	Y+19, r20	; 0x13
   14b6a:	8f e3       	ldi	r24, 0x3F	; 63
   14b6c:	92 e2       	ldi	r25, 0x22	; 34
   14b6e:	9c 01       	movw	r18, r24
   14b70:	40 e0       	ldi	r20, 0x00	; 0
   14b72:	2c 8b       	std	Y+20, r18	; 0x14
   14b74:	3d 8b       	std	Y+21, r19	; 0x15
   14b76:	4e 8b       	std	Y+22, r20	; 0x16
   14b78:	85 e5       	ldi	r24, 0x55	; 85
   14b7a:	92 e2       	ldi	r25, 0x22	; 34
   14b7c:	3c 01       	movw	r6, r24
   14b7e:	81 2c       	mov	r8, r1
   14b80:	83 e6       	ldi	r24, 0x63	; 99
   14b82:	92 e2       	ldi	r25, 0x22	; 34
   14b84:	5c 01       	movw	r10, r24
   14b86:	c1 2c       	mov	r12, r1
   14b88:	8f e7       	ldi	r24, 0x7F	; 127
   14b8a:	92 e2       	ldi	r25, 0x22	; 34
   14b8c:	1c 01       	movw	r2, r24
   14b8e:	41 2c       	mov	r4, r1
   14b90:	2a 85       	ldd	r18, Y+10	; 0x0a
   14b92:	3b 85       	ldd	r19, Y+11	; 0x0b
   14b94:	87 01       	movw	r16, r14
   14b96:	e2 16       	cp	r14, r18
   14b98:	f3 06       	cpc	r15, r19
   14b9a:	0c f0       	brlt	.+2      	; 0x14b9e <SS80_Command_State+0x106>
   14b9c:	b6 c1       	rjmp	.+876    	; 0x14f0a <SS80_Command_State+0x472>
   14b9e:	0f 5f       	subi	r16, 0xFF	; 255
   14ba0:	1f 4f       	sbci	r17, 0xFF	; 255
   14ba2:	f7 01       	movw	r30, r14
   14ba4:	e6 51       	subi	r30, 0x16	; 22
   14ba6:	f3 4e       	sbci	r31, 0xE3	; 227
   14ba8:	80 81       	ld	r24, Z
   14baa:	28 2f       	mov	r18, r24
   14bac:	30 e0       	ldi	r19, 0x00	; 0
   14bae:	a9 01       	movw	r20, r18
   14bb0:	40 52       	subi	r20, 0x20	; 32
   14bb2:	51 09       	sbc	r21, r1
   14bb4:	40 31       	cpi	r20, 0x10	; 16
   14bb6:	51 05       	cpc	r21, r1
   14bb8:	98 f4       	brcc	.+38     	; 0x14be0 <SS80_Command_State+0x148>
   14bba:	80 52       	subi	r24, 0x20	; 32
   14bbc:	1d df       	rcall	.-454    	; 0x149f8 <SS80_Check_Unit>
   14bbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bc2:	85 ff       	sbrs	r24, 5
   14bc4:	a0 c1       	rjmp	.+832    	; 0x14f06 <SS80_Command_State+0x46e>
   14bc6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14bca:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14bce:	85 81       	ldd	r24, Z+5	; 0x05
   14bd0:	90 e0       	ldi	r25, 0x00	; 0
   14bd2:	ed b7       	in	r30, 0x3d	; 61
   14bd4:	fe b7       	in	r31, 0x3e	; 62
   14bd6:	95 83       	std	Z+5, r25	; 0x05
   14bd8:	84 83       	std	Z+4, r24	; 0x04
   14bda:	86 ee       	ldi	r24, 0xE6	; 230
   14bdc:	92 e2       	ldi	r25, 0x22	; 34
   14bde:	19 c0       	rjmp	.+50     	; 0x14c12 <SS80_Command_State+0x17a>
   14be0:	a9 01       	movw	r20, r18
   14be2:	40 54       	subi	r20, 0x40	; 64
   14be4:	51 09       	sbc	r21, r1
   14be6:	40 31       	cpi	r20, 0x10	; 16
   14be8:	51 05       	cpc	r21, r1
   14bea:	d0 f4       	brcc	.+52     	; 0x14c20 <SS80_Command_State+0x188>
   14bec:	80 54       	subi	r24, 0x40	; 64
   14bee:	2d df       	rcall	.-422    	; 0x14a4a <SS80_Check_Volume>
   14bf0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bf4:	85 ff       	sbrs	r24, 5
   14bf6:	87 c1       	rjmp	.+782    	; 0x14f06 <SS80_Command_State+0x46e>
   14bf8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14bfc:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14c00:	86 81       	ldd	r24, Z+6	; 0x06
   14c02:	90 e0       	ldi	r25, 0x00	; 0
   14c04:	ed b7       	in	r30, 0x3d	; 61
   14c06:	fe b7       	in	r31, 0x3e	; 62
   14c08:	95 83       	std	Z+5, r25	; 0x05
   14c0a:	84 83       	std	Z+4, r24	; 0x04
   14c0c:	2d ec       	ldi	r18, 0xCD	; 205
   14c0e:	32 e2       	ldi	r19, 0x22	; 34
   14c10:	c9 01       	movw	r24, r18
   14c12:	a0 e0       	ldi	r26, 0x00	; 0
   14c14:	81 83       	std	Z+1, r24	; 0x01
   14c16:	92 83       	std	Z+2, r25	; 0x02
   14c18:	a3 83       	std	Z+3, r26	; 0x03
   14c1a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14c1e:	73 c1       	rjmp	.+742    	; 0x14f06 <SS80_Command_State+0x46e>
   14c20:	21 15       	cp	r18, r1
   14c22:	31 05       	cpc	r19, r1
   14c24:	79 f4       	brne	.+30     	; 0x14c44 <SS80_Command_State+0x1ac>
   14c26:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14c2a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14c2e:	81 e0       	ldi	r24, 0x01	; 1
   14c30:	90 e0       	ldi	r25, 0x00	; 0
   14c32:	91 83       	std	Z+1, r25	; 0x01
   14c34:	80 83       	st	Z, r24
   14c36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c3a:	85 ff       	sbrs	r24, 5
   14c3c:	66 c1       	rjmp	.+716    	; 0x14f0a <SS80_Command_State+0x472>
   14c3e:	85 eb       	ldi	r24, 0xB5	; 181
   14c40:	92 e2       	ldi	r25, 0x22	; 34
   14c42:	0f c0       	rjmp	.+30     	; 0x14c62 <SS80_Command_State+0x1ca>
   14c44:	22 30       	cpi	r18, 0x02	; 2
   14c46:	31 05       	cpc	r19, r1
   14c48:	a9 f4       	brne	.+42     	; 0x14c74 <SS80_Command_State+0x1dc>
   14c4a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14c4e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14c52:	31 83       	std	Z+1, r19	; 0x01
   14c54:	20 83       	st	Z, r18
   14c56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c5a:	85 ff       	sbrs	r24, 5
   14c5c:	56 c1       	rjmp	.+684    	; 0x14f0a <SS80_Command_State+0x472>
   14c5e:	8c e9       	ldi	r24, 0x9C	; 156
   14c60:	92 e2       	ldi	r25, 0x22	; 34
   14c62:	a0 e0       	ldi	r26, 0x00	; 0
   14c64:	ed b7       	in	r30, 0x3d	; 61
   14c66:	fe b7       	in	r31, 0x3e	; 62
   14c68:	81 83       	std	Z+1, r24	; 0x01
   14c6a:	92 83       	std	Z+2, r25	; 0x02
   14c6c:	a3 83       	std	Z+3, r26	; 0x03
   14c6e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14c72:	4b c1       	rjmp	.+662    	; 0x14f0a <SS80_Command_State+0x472>
   14c74:	20 31       	cpi	r18, 0x10	; 16
   14c76:	31 05       	cpc	r19, r1
   14c78:	b1 f5       	brne	.+108    	; 0x14ce6 <SS80_Command_State+0x24e>
   14c7a:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   14c7e:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   14c82:	3d 87       	std	Y+13, r19	; 0x0d
   14c84:	2c 87       	std	Y+12, r18	; 0x0c
   14c86:	46 e0       	ldi	r20, 0x06	; 6
   14c88:	50 e0       	ldi	r21, 0x00	; 0
   14c8a:	b8 01       	movw	r22, r16
   14c8c:	8a ee       	ldi	r24, 0xEA	; 234
   14c8e:	9c e1       	ldi	r25, 0x1C	; 28
   14c90:	0e 94 ce bc 	call	0x1799c	; 0x1799c <B2V_MSB>
   14c94:	ec 85       	ldd	r30, Y+12	; 0x0c
   14c96:	fd 85       	ldd	r31, Y+13	; 0x0d
   14c98:	67 83       	std	Z+7, r22	; 0x07
   14c9a:	70 87       	std	Z+8, r23	; 0x08
   14c9c:	81 87       	std	Z+9, r24	; 0x09
   14c9e:	92 87       	std	Z+10, r25	; 0x0a
   14ca0:	87 01       	movw	r16, r14
   14ca2:	09 5f       	subi	r16, 0xF9	; 249
   14ca4:	1f 4f       	sbci	r17, 0xFF	; 255
   14ca6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14caa:	85 ff       	sbrs	r24, 5
   14cac:	2c c1       	rjmp	.+600    	; 0x14f06 <SS80_Command_State+0x46e>
   14cae:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   14cb2:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   14cb6:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   14cba:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   14cbe:	fc 01       	movw	r30, r24
   14cc0:	a0 89       	ldd	r26, Z+16	; 0x10
   14cc2:	b1 89       	ldd	r27, Z+17	; 0x11
   14cc4:	f9 01       	movw	r30, r18
   14cc6:	27 81       	ldd	r18, Z+7	; 0x07
   14cc8:	30 85       	ldd	r19, Z+8	; 0x08
   14cca:	41 85       	ldd	r20, Z+9	; 0x09
   14ccc:	52 85       	ldd	r21, Z+10	; 0x0a
   14cce:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
   14cd2:	ed b7       	in	r30, 0x3d	; 61
   14cd4:	fe b7       	in	r31, 0x3e	; 62
   14cd6:	64 83       	std	Z+4, r22	; 0x04
   14cd8:	75 83       	std	Z+5, r23	; 0x05
   14cda:	86 83       	std	Z+6, r24	; 0x06
   14cdc:	97 83       	std	Z+7, r25	; 0x07
   14cde:	21 82       	std	Z+1, r2	; 0x01
   14ce0:	32 82       	std	Z+2, r3	; 0x02
   14ce2:	43 82       	std	Z+3, r4	; 0x03
   14ce4:	2e c0       	rjmp	.+92     	; 0x14d42 <SS80_Command_State+0x2aa>
   14ce6:	28 31       	cpi	r18, 0x18	; 24
   14ce8:	31 05       	cpc	r19, r1
   14cea:	71 f5       	brne	.+92     	; 0x14d48 <SS80_Command_State+0x2b0>
   14cec:	20 91 66 19 	lds	r18, 0x1966	; 0x801966 <SS80s>
   14cf0:	30 91 67 19 	lds	r19, 0x1967	; 0x801967 <SS80s+0x1>
   14cf4:	3d 87       	std	Y+13, r19	; 0x0d
   14cf6:	2c 87       	std	Y+12, r18	; 0x0c
   14cf8:	44 e0       	ldi	r20, 0x04	; 4
   14cfa:	50 e0       	ldi	r21, 0x00	; 0
   14cfc:	b8 01       	movw	r22, r16
   14cfe:	8a ee       	ldi	r24, 0xEA	; 234
   14d00:	9c e1       	ldi	r25, 0x1C	; 28
   14d02:	0e 94 ce bc 	call	0x1799c	; 0x1799c <B2V_MSB>
   14d06:	ec 85       	ldd	r30, Y+12	; 0x0c
   14d08:	fd 85       	ldd	r31, Y+13	; 0x0d
   14d0a:	63 87       	std	Z+11, r22	; 0x0b
   14d0c:	74 87       	std	Z+12, r23	; 0x0c
   14d0e:	85 87       	std	Z+13, r24	; 0x0d
   14d10:	96 87       	std	Z+14, r25	; 0x0e
   14d12:	87 01       	movw	r16, r14
   14d14:	0b 5f       	subi	r16, 0xFB	; 251
   14d16:	1f 4f       	sbci	r17, 0xFF	; 255
   14d18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d1c:	85 ff       	sbrs	r24, 5
   14d1e:	f3 c0       	rjmp	.+486    	; 0x14f06 <SS80_Command_State+0x46e>
   14d20:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14d24:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14d28:	83 85       	ldd	r24, Z+11	; 0x0b
   14d2a:	94 85       	ldd	r25, Z+12	; 0x0c
   14d2c:	a5 85       	ldd	r26, Z+13	; 0x0d
   14d2e:	b6 85       	ldd	r27, Z+14	; 0x0e
   14d30:	ed b7       	in	r30, 0x3d	; 61
   14d32:	fe b7       	in	r31, 0x3e	; 62
   14d34:	84 83       	std	Z+4, r24	; 0x04
   14d36:	95 83       	std	Z+5, r25	; 0x05
   14d38:	a6 83       	std	Z+6, r26	; 0x06
   14d3a:	b7 83       	std	Z+7, r27	; 0x07
   14d3c:	a1 82       	std	Z+1, r10	; 0x01
   14d3e:	b2 82       	std	Z+2, r11	; 0x02
   14d40:	c3 82       	std	Z+3, r12	; 0x03
   14d42:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14d46:	df c0       	rjmp	.+446    	; 0x14f06 <SS80_Command_State+0x46e>
   14d48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d4c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14d50:	24 33       	cpi	r18, 0x34	; 52
   14d52:	31 05       	cpc	r19, r1
   14d54:	41 f4       	brne	.+16     	; 0x14d66 <SS80_Command_State+0x2ce>
   14d56:	85 ff       	sbrs	r24, 5
   14d58:	d6 c0       	rjmp	.+428    	; 0x14f06 <SS80_Command_State+0x46e>
   14d5a:	ed b7       	in	r30, 0x3d	; 61
   14d5c:	fe b7       	in	r31, 0x3e	; 62
   14d5e:	61 82       	std	Z+1, r6	; 0x01
   14d60:	72 82       	std	Z+2, r7	; 0x02
   14d62:	83 82       	std	Z+3, r8	; 0x03
   14d64:	2b c0       	rjmp	.+86     	; 0x14dbc <SS80_Command_State+0x324>
   14d66:	29 33       	cpi	r18, 0x39	; 57
   14d68:	31 05       	cpc	r19, r1
   14d6a:	49 f4       	brne	.+18     	; 0x14d7e <SS80_Command_State+0x2e6>
   14d6c:	87 01       	movw	r16, r14
   14d6e:	0d 5f       	subi	r16, 0xFD	; 253
   14d70:	1f 4f       	sbci	r17, 0xFF	; 255
   14d72:	85 ff       	sbrs	r24, 5
   14d74:	c8 c0       	rjmp	.+400    	; 0x14f06 <SS80_Command_State+0x46e>
   14d76:	2c 89       	ldd	r18, Y+20	; 0x14
   14d78:	3d 89       	ldd	r19, Y+21	; 0x15
   14d7a:	4e 89       	ldd	r20, Y+22	; 0x16
   14d7c:	1a c0       	rjmp	.+52     	; 0x14db2 <SS80_Command_State+0x31a>
   14d7e:	2b 33       	cpi	r18, 0x3B	; 59
   14d80:	31 05       	cpc	r19, r1
   14d82:	49 f4       	brne	.+18     	; 0x14d96 <SS80_Command_State+0x2fe>
   14d84:	87 01       	movw	r16, r14
   14d86:	0e 5f       	subi	r16, 0xFE	; 254
   14d88:	1f 4f       	sbci	r17, 0xFF	; 255
   14d8a:	85 ff       	sbrs	r24, 5
   14d8c:	bc c0       	rjmp	.+376    	; 0x14f06 <SS80_Command_State+0x46e>
   14d8e:	29 89       	ldd	r18, Y+17	; 0x11
   14d90:	3a 89       	ldd	r19, Y+18	; 0x12
   14d92:	4b 89       	ldd	r20, Y+19	; 0x13
   14d94:	0e c0       	rjmp	.+28     	; 0x14db2 <SS80_Command_State+0x31a>
   14d96:	28 34       	cpi	r18, 0x48	; 72
   14d98:	31 05       	cpc	r19, r1
   14d9a:	99 f4       	brne	.+38     	; 0x14dc2 <SS80_Command_State+0x32a>
   14d9c:	87 01       	movw	r16, r14
   14d9e:	0e 5f       	subi	r16, 0xFE	; 254
   14da0:	1f 4f       	sbci	r17, 0xFF	; 255
   14da2:	80 73       	andi	r24, 0x30	; 48
   14da4:	99 27       	eor	r25, r25
   14da6:	89 2b       	or	r24, r25
   14da8:	09 f4       	brne	.+2      	; 0x14dac <SS80_Command_State+0x314>
   14daa:	ad c0       	rjmp	.+346    	; 0x14f06 <SS80_Command_State+0x46e>
   14dac:	2e 85       	ldd	r18, Y+14	; 0x0e
   14dae:	3f 85       	ldd	r19, Y+15	; 0x0f
   14db0:	48 89       	ldd	r20, Y+16	; 0x10
   14db2:	ed b7       	in	r30, 0x3d	; 61
   14db4:	fe b7       	in	r31, 0x3e	; 62
   14db6:	21 83       	std	Z+1, r18	; 0x01
   14db8:	32 83       	std	Z+2, r19	; 0x02
   14dba:	43 83       	std	Z+3, r20	; 0x03
   14dbc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14dc0:	a2 c0       	rjmp	.+324    	; 0x14f06 <SS80_Command_State+0x46e>
   14dc2:	24 30       	cpi	r18, 0x04	; 4
   14dc4:	31 05       	cpc	r19, r1
   14dc6:	41 f4       	brne	.+16     	; 0x14dd8 <SS80_Command_State+0x340>
   14dc8:	80 73       	andi	r24, 0x30	; 48
   14dca:	99 27       	eor	r25, r25
   14dcc:	89 2b       	or	r24, r25
   14dce:	09 f4       	brne	.+2      	; 0x14dd2 <SS80_Command_State+0x33a>
   14dd0:	9c c0       	rjmp	.+312    	; 0x14f0a <SS80_Command_State+0x472>
   14dd2:	8f ed       	ldi	r24, 0xDF	; 223
   14dd4:	91 e2       	ldi	r25, 0x21	; 33
   14dd6:	45 cf       	rjmp	.-374    	; 0x14c62 <SS80_Command_State+0x1ca>
   14dd8:	2e 30       	cpi	r18, 0x0E	; 14
   14dda:	31 05       	cpc	r19, r1
   14ddc:	29 f4       	brne	.+10     	; 0x14de8 <SS80_Command_State+0x350>
   14dde:	85 ff       	sbrs	r24, 5
   14de0:	94 c0       	rjmp	.+296    	; 0x14f0a <SS80_Command_State+0x472>
   14de2:	89 ec       	ldi	r24, 0xC9	; 201
   14de4:	91 e2       	ldi	r25, 0x21	; 33
   14de6:	3d cf       	rjmp	.-390    	; 0x14c62 <SS80_Command_State+0x1ca>
   14de8:	2f 30       	cpi	r18, 0x0F	; 15
   14dea:	31 05       	cpc	r19, r1
   14dec:	29 f4       	brne	.+10     	; 0x14df8 <SS80_Command_State+0x360>
   14dee:	85 ff       	sbrs	r24, 5
   14df0:	8c c0       	rjmp	.+280    	; 0x14f0a <SS80_Command_State+0x472>
   14df2:	8c ea       	ldi	r24, 0xAC	; 172
   14df4:	91 e2       	ldi	r25, 0x21	; 33
   14df6:	35 cf       	rjmp	.-406    	; 0x14c62 <SS80_Command_State+0x1ca>
   14df8:	21 33       	cpi	r18, 0x31	; 49
   14dfa:	31 05       	cpc	r19, r1
   14dfc:	59 f4       	brne	.+22     	; 0x14e14 <SS80_Command_State+0x37c>
   14dfe:	87 01       	movw	r16, r14
   14e00:	0d 5f       	subi	r16, 0xFD	; 253
   14e02:	1f 4f       	sbci	r17, 0xFF	; 255
   14e04:	80 73       	andi	r24, 0x30	; 48
   14e06:	99 27       	eor	r25, r25
   14e08:	89 2b       	or	r24, r25
   14e0a:	09 f4       	brne	.+2      	; 0x14e0e <SS80_Command_State+0x376>
   14e0c:	7e c0       	rjmp	.+252    	; 0x14f0a <SS80_Command_State+0x472>
   14e0e:	80 e9       	ldi	r24, 0x90	; 144
   14e10:	91 e2       	ldi	r25, 0x21	; 33
   14e12:	27 cf       	rjmp	.-434    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e14:	25 33       	cpi	r18, 0x35	; 53
   14e16:	31 05       	cpc	r19, r1
   14e18:	69 f4       	brne	.+26     	; 0x14e34 <SS80_Command_State+0x39c>
   14e1a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14e1e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14e22:	24 e0       	ldi	r18, 0x04	; 4
   14e24:	30 e0       	ldi	r19, 0x00	; 0
   14e26:	31 83       	std	Z+1, r19	; 0x01
   14e28:	20 83       	st	Z, r18
   14e2a:	85 ff       	sbrs	r24, 5
   14e2c:	6e c0       	rjmp	.+220    	; 0x14f0a <SS80_Command_State+0x472>
   14e2e:	8f e7       	ldi	r24, 0x7F	; 127
   14e30:	91 e2       	ldi	r25, 0x21	; 33
   14e32:	17 cf       	rjmp	.-466    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e34:	27 33       	cpi	r18, 0x37	; 55
   14e36:	31 05       	cpc	r19, r1
   14e38:	59 f4       	brne	.+22     	; 0x14e50 <SS80_Command_State+0x3b8>
   14e3a:	87 01       	movw	r16, r14
   14e3c:	0d 5f       	subi	r16, 0xFD	; 253
   14e3e:	1f 4f       	sbci	r17, 0xFF	; 255
   14e40:	80 73       	andi	r24, 0x30	; 48
   14e42:	99 27       	eor	r25, r25
   14e44:	89 2b       	or	r24, r25
   14e46:	09 f4       	brne	.+2      	; 0x14e4a <SS80_Command_State+0x3b2>
   14e48:	60 c0       	rjmp	.+192    	; 0x14f0a <SS80_Command_State+0x472>
   14e4a:	81 e6       	ldi	r24, 0x61	; 97
   14e4c:	91 e2       	ldi	r25, 0x21	; 33
   14e4e:	09 cf       	rjmp	.-494    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e50:	2e 33       	cpi	r18, 0x3E	; 62
   14e52:	31 05       	cpc	r19, r1
   14e54:	c1 f4       	brne	.+48     	; 0x14e86 <SS80_Command_State+0x3ee>
   14e56:	80 73       	andi	r24, 0x30	; 48
   14e58:	99 27       	eor	r25, r25
   14e5a:	89 2b       	or	r24, r25
   14e5c:	81 f0       	breq	.+32     	; 0x14e7e <SS80_Command_State+0x3e6>
   14e5e:	82 e4       	ldi	r24, 0x42	; 66
   14e60:	91 e2       	ldi	r25, 0x21	; 33
   14e62:	a0 e0       	ldi	r26, 0x00	; 0
   14e64:	ed b7       	in	r30, 0x3d	; 61
   14e66:	fe b7       	in	r31, 0x3e	; 62
   14e68:	81 83       	std	Z+1, r24	; 0x01
   14e6a:	92 83       	std	Z+2, r25	; 0x02
   14e6c:	a3 83       	std	Z+3, r26	; 0x03
   14e6e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14e72:	6c e6       	ldi	r22, 0x6C	; 108
   14e74:	70 e1       	ldi	r23, 0x10	; 16
   14e76:	c8 01       	movw	r24, r16
   14e78:	86 51       	subi	r24, 0x16	; 22
   14e7a:	93 4e       	sbci	r25, 0xE3	; 227
   14e7c:	69 dc       	rcall	.-1838   	; 0x14750 <SS80_display_extended_status>
   14e7e:	87 01       	movw	r16, r14
   14e80:	07 5f       	subi	r16, 0xF7	; 247
   14e82:	1f 4f       	sbci	r17, 0xFF	; 255
   14e84:	42 c0       	rjmp	.+132    	; 0x14f0a <SS80_Command_State+0x472>
   14e86:	2c 34       	cpi	r18, 0x4C	; 76
   14e88:	31 05       	cpc	r19, r1
   14e8a:	39 f4       	brne	.+14     	; 0x14e9a <SS80_Command_State+0x402>
   14e8c:	80 73       	andi	r24, 0x30	; 48
   14e8e:	99 27       	eor	r25, r25
   14e90:	89 2b       	or	r24, r25
   14e92:	d9 f1       	breq	.+118    	; 0x14f0a <SS80_Command_State+0x472>
   14e94:	87 e2       	ldi	r24, 0x27	; 39
   14e96:	91 e2       	ldi	r25, 0x21	; 33
   14e98:	e4 ce       	rjmp	.-568    	; 0x14c62 <SS80_Command_State+0x1ca>
   14e9a:	2d 34       	cpi	r18, 0x4D	; 77
   14e9c:	31 05       	cpc	r19, r1
   14e9e:	39 f4       	brne	.+14     	; 0x14eae <SS80_Command_State+0x416>
   14ea0:	80 73       	andi	r24, 0x30	; 48
   14ea2:	99 27       	eor	r25, r25
   14ea4:	89 2b       	or	r24, r25
   14ea6:	89 f1       	breq	.+98     	; 0x14f0a <SS80_Command_State+0x472>
   14ea8:	8e e0       	ldi	r24, 0x0E	; 14
   14eaa:	91 e2       	ldi	r25, 0x21	; 33
   14eac:	da ce       	rjmp	.-588    	; 0x14c62 <SS80_Command_State+0x1ca>
   14eae:	2d 30       	cpi	r18, 0x0D	; 13
   14eb0:	31 05       	cpc	r19, r1
   14eb2:	69 f4       	brne	.+26     	; 0x14ece <SS80_Command_State+0x436>
   14eb4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   14eb8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   14ebc:	23 e0       	ldi	r18, 0x03	; 3
   14ebe:	30 e0       	ldi	r19, 0x00	; 0
   14ec0:	31 83       	std	Z+1, r19	; 0x01
   14ec2:	20 83       	st	Z, r18
   14ec4:	85 ff       	sbrs	r24, 5
   14ec6:	21 c0       	rjmp	.+66     	; 0x14f0a <SS80_Command_State+0x472>
   14ec8:	87 ef       	ldi	r24, 0xF7	; 247
   14eca:	90 e2       	ldi	r25, 0x20	; 32
   14ecc:	ca ce       	rjmp	.-620    	; 0x14c62 <SS80_Command_State+0x1ca>
   14ece:	23 33       	cpi	r18, 0x33	; 51
   14ed0:	31 05       	cpc	r19, r1
   14ed2:	51 f4       	brne	.+20     	; 0x14ee8 <SS80_Command_State+0x450>
   14ed4:	87 01       	movw	r16, r14
   14ed6:	0c 5f       	subi	r16, 0xFC	; 252
   14ed8:	1f 4f       	sbci	r17, 0xFF	; 255
   14eda:	80 73       	andi	r24, 0x30	; 48
   14edc:	99 27       	eor	r25, r25
   14ede:	89 2b       	or	r24, r25
   14ee0:	a1 f0       	breq	.+40     	; 0x14f0a <SS80_Command_State+0x472>
   14ee2:	84 ed       	ldi	r24, 0xD4	; 212
   14ee4:	90 e2       	ldi	r25, 0x20	; 32
   14ee6:	bd ce       	rjmp	.-646    	; 0x14c62 <SS80_Command_State+0x1ca>
   14ee8:	80 ff       	sbrs	r24, 0
   14eea:	28 c0       	rjmp	.+80     	; 0x14f3c <SS80_Command_State+0x4a4>
   14eec:	ed b7       	in	r30, 0x3d	; 61
   14eee:	fe b7       	in	r31, 0x3e	; 62
   14ef0:	35 83       	std	Z+5, r19	; 0x05
   14ef2:	24 83       	std	Z+4, r18	; 0x04
   14ef4:	84 eb       	ldi	r24, 0xB4	; 180
   14ef6:	90 e2       	ldi	r25, 0x20	; 32
   14ef8:	a0 e0       	ldi	r26, 0x00	; 0
   14efa:	81 83       	std	Z+1, r24	; 0x01
   14efc:	92 83       	std	Z+2, r25	; 0x02
   14efe:	a3 83       	std	Z+3, r26	; 0x03
   14f00:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14f04:	02 c0       	rjmp	.+4      	; 0x14f0a <SS80_Command_State+0x472>
   14f06:	78 01       	movw	r14, r16
   14f08:	43 ce       	rjmp	.-890    	; 0x14b90 <SS80_Command_State+0xf8>
   14f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
   14f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
   14f0e:	08 17       	cp	r16, r24
   14f10:	19 07       	cpc	r17, r25
   14f12:	a1 f0       	breq	.+40     	; 0x14f3c <SS80_Command_State+0x4a4>
   14f14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f18:	80 ff       	sbrs	r24, 0
   14f1a:	10 c0       	rjmp	.+32     	; 0x14f3c <SS80_Command_State+0x4a4>
   14f1c:	2a 85       	ldd	r18, Y+10	; 0x0a
   14f1e:	3b 85       	ldd	r19, Y+11	; 0x0b
   14f20:	ed b7       	in	r30, 0x3d	; 61
   14f22:	fe b7       	in	r31, 0x3e	; 62
   14f24:	37 83       	std	Z+7, r19	; 0x07
   14f26:	26 83       	std	Z+6, r18	; 0x06
   14f28:	15 83       	std	Z+5, r17	; 0x05
   14f2a:	04 83       	std	Z+4, r16	; 0x04
   14f2c:	8c e7       	ldi	r24, 0x7C	; 124
   14f2e:	90 e2       	ldi	r25, 0x20	; 32
   14f30:	a0 e0       	ldi	r26, 0x00	; 0
   14f32:	81 83       	std	Z+1, r24	; 0x01
   14f34:	92 83       	std	Z+2, r25	; 0x02
   14f36:	a3 83       	std	Z+3, r26	; 0x03
   14f38:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   14f3c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   14f40:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   14f44:	81 81       	ldd	r24, Z+1	; 0x01
   14f46:	90 e0       	ldi	r25, 0x00	; 0
   14f48:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   14f4c:	88 85       	ldd	r24, Y+8	; 0x08
   14f4e:	99 85       	ldd	r25, Y+9	; 0x09
   14f50:	88 27       	eor	r24, r24
   14f52:	90 7d       	andi	r25, 0xD0	; 208
   14f54:	02 c0       	rjmp	.+4      	; 0x14f5a <SS80_Command_State+0x4c2>
   14f56:	80 e0       	ldi	r24, 0x00	; 0
   14f58:	90 e0       	ldi	r25, 0x00	; 0
   14f5a:	66 96       	adiw	r28, 0x16	; 22
   14f5c:	0f b6       	in	r0, 0x3f	; 63
   14f5e:	f8 94       	cli
   14f60:	de bf       	out	0x3e, r29	; 62
   14f62:	0f be       	out	0x3f, r0	; 63
   14f64:	cd bf       	out	0x3d, r28	; 61
   14f66:	df 91       	pop	r29
   14f68:	cf 91       	pop	r28
   14f6a:	1f 91       	pop	r17
   14f6c:	0f 91       	pop	r16
   14f6e:	ff 90       	pop	r15
   14f70:	ef 90       	pop	r14
   14f72:	cf 90       	pop	r12
   14f74:	bf 90       	pop	r11
   14f76:	af 90       	pop	r10
   14f78:	8f 90       	pop	r8
   14f7a:	7f 90       	pop	r7
   14f7c:	6f 90       	pop	r6
   14f7e:	4f 90       	pop	r4
   14f80:	3f 90       	pop	r3
   14f82:	2f 90       	pop	r2
   14f84:	08 95       	ret

00014f86 <SS80_cmd_seek>:
   14f86:	a7 e0       	ldi	r26, 0x07	; 7
   14f88:	b0 e0       	ldi	r27, 0x00	; 0
   14f8a:	e9 ec       	ldi	r30, 0xC9	; 201
   14f8c:	f7 ea       	ldi	r31, 0xA7	; 167
   14f8e:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__prologue_saves__+0x4>
   14f92:	c0 91 66 19 	lds	r28, 0x1966	; 0x801966 <SS80s>
   14f96:	d0 91 67 19 	lds	r29, 0x1967	; 0x801967 <SS80s+0x1>
   14f9a:	8f 80       	ldd	r8, Y+7	; 0x07
   14f9c:	98 84       	ldd	r9, Y+8	; 0x08
   14f9e:	a9 84       	ldd	r10, Y+9	; 0x09
   14fa0:	ba 84       	ldd	r11, Y+10	; 0x0a
   14fa2:	00 91 68 19 	lds	r16, 0x1968	; 0x801968 <SS80p>
   14fa6:	10 91 69 19 	lds	r17, 0x1969	; 0x801969 <SS80p+0x1>
   14faa:	f8 01       	movw	r30, r16
   14fac:	c0 88       	ldd	r12, Z+16	; 0x10
   14fae:	d1 88       	ldd	r13, Z+17	; 0x11
   14fb0:	e1 2c       	mov	r14, r1
   14fb2:	f1 2c       	mov	r15, r1
   14fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
   14fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
   14fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
   14fba:	9e 85       	ldd	r25, Y+14	; 0x0e
   14fbc:	a7 01       	movw	r20, r14
   14fbe:	96 01       	movw	r18, r12
   14fc0:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
   14fc4:	da 01       	movw	r26, r20
   14fc6:	c9 01       	movw	r24, r18
   14fc8:	88 0d       	add	r24, r8
   14fca:	99 1d       	adc	r25, r9
   14fcc:	aa 1d       	adc	r26, r10
   14fce:	bb 1d       	adc	r27, r11
   14fd0:	f8 01       	movw	r30, r16
   14fd2:	46 a0       	ldd	r4, Z+38	; 0x26
   14fd4:	57 a0       	ldd	r5, Z+39	; 0x27
   14fd6:	60 a4       	ldd	r6, Z+40	; 0x28
   14fd8:	71 a4       	ldd	r7, Z+41	; 0x29
   14fda:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   14fde:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14fe2:	48 16       	cp	r4, r24
   14fe4:	59 06       	cpc	r5, r25
   14fe6:	6a 06       	cpc	r6, r26
   14fe8:	7b 06       	cpc	r7, r27
   14fea:	f0 f4       	brcc	.+60     	; 0x15028 <SS80_cmd_seek+0xa2>
   14fec:	81 e0       	ldi	r24, 0x01	; 1
   14fee:	8a 83       	std	Y+2, r24	; 0x02
   14ff0:	8b 81       	ldd	r24, Y+3	; 0x03
   14ff2:	9c 81       	ldd	r25, Y+4	; 0x04
   14ff4:	84 60       	ori	r24, 0x04	; 4
   14ff6:	9c 83       	std	Y+4, r25	; 0x04
   14ff8:	8b 83       	std	Y+3, r24	; 0x03
   14ffa:	40 ff       	sbrs	r20, 0
   14ffc:	31 c0       	rjmp	.+98     	; 0x15060 <SS80_cmd_seek+0xda>
   14ffe:	a0 89       	ldd	r26, Z+16	; 0x10
   15000:	b1 89       	ldd	r27, Z+17	; 0x11
   15002:	a5 01       	movw	r20, r10
   15004:	94 01       	movw	r18, r8
   15006:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
   1500a:	ed b7       	in	r30, 0x3d	; 61
   1500c:	fe b7       	in	r31, 0x3e	; 62
   1500e:	64 83       	std	Z+4, r22	; 0x04
   15010:	75 83       	std	Z+5, r23	; 0x05
   15012:	86 83       	std	Z+6, r24	; 0x06
   15014:	97 83       	std	Z+7, r25	; 0x07
   15016:	89 e3       	ldi	r24, 0x39	; 57
   15018:	9f e1       	ldi	r25, 0x1F	; 31
   1501a:	a0 e0       	ldi	r26, 0x00	; 0
   1501c:	81 83       	std	Z+1, r24	; 0x01
   1501e:	92 83       	std	Z+2, r25	; 0x02
   15020:	a3 83       	std	Z+3, r26	; 0x03
   15022:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15026:	1c c0       	rjmp	.+56     	; 0x15060 <SS80_cmd_seek+0xda>
   15028:	ca 01       	movw	r24, r20
   1502a:	80 72       	andi	r24, 0x20	; 32
   1502c:	99 27       	eor	r25, r25
   1502e:	45 ff       	sbrs	r20, 5
   15030:	19 c0       	rjmp	.+50     	; 0x15064 <SS80_cmd_seek+0xde>
   15032:	a5 01       	movw	r20, r10
   15034:	94 01       	movw	r18, r8
   15036:	c7 01       	movw	r24, r14
   15038:	b6 01       	movw	r22, r12
   1503a:	0e 94 3e e2 	call	0x1c47c	; 0x1c47c <__mulsi3>
   1503e:	ed b7       	in	r30, 0x3d	; 61
   15040:	fe b7       	in	r31, 0x3e	; 62
   15042:	64 83       	std	Z+4, r22	; 0x04
   15044:	75 83       	std	Z+5, r23	; 0x05
   15046:	86 83       	std	Z+6, r24	; 0x06
   15048:	97 83       	std	Z+7, r25	; 0x07
   1504a:	85 e2       	ldi	r24, 0x25	; 37
   1504c:	9f e1       	ldi	r25, 0x1F	; 31
   1504e:	a0 e0       	ldi	r26, 0x00	; 0
   15050:	81 83       	std	Z+1, r24	; 0x01
   15052:	92 83       	std	Z+2, r25	; 0x02
   15054:	a3 83       	std	Z+3, r26	; 0x03
   15056:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1505a:	80 e0       	ldi	r24, 0x00	; 0
   1505c:	90 e0       	ldi	r25, 0x00	; 0
   1505e:	02 c0       	rjmp	.+4      	; 0x15064 <SS80_cmd_seek+0xde>
   15060:	81 e0       	ldi	r24, 0x01	; 1
   15062:	90 e0       	ldi	r25, 0x00	; 0
   15064:	cd b7       	in	r28, 0x3d	; 61
   15066:	de b7       	in	r29, 0x3e	; 62
   15068:	27 96       	adiw	r28, 0x07	; 7
   1506a:	e0 e1       	ldi	r30, 0x10	; 16
   1506c:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__epilogue_restores__+0x4>

00015070 <SS80_locate_and_write>:
   15070:	a3 e1       	ldi	r26, 0x13	; 19
   15072:	b0 e0       	ldi	r27, 0x00	; 0
   15074:	ee e3       	ldi	r30, 0x3E	; 62
   15076:	f8 ea       	ldi	r31, 0xA8	; 168
   15078:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   1507c:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15080:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15084:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   15088:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   1508c:	fc 01       	movw	r30, r24
   1508e:	a0 89       	ldd	r26, Z+16	; 0x10
   15090:	b1 89       	ldd	r27, Z+17	; 0x11
   15092:	f8 01       	movw	r30, r16
   15094:	27 81       	ldd	r18, Z+7	; 0x07
   15096:	30 85       	ldd	r19, Z+8	; 0x08
   15098:	41 85       	ldd	r20, Z+9	; 0x09
   1509a:	52 85       	ldd	r21, Z+10	; 0x0a
   1509c:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
   150a0:	4b 01       	movw	r8, r22
   150a2:	5c 01       	movw	r10, r24
   150a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150a8:	85 ff       	sbrs	r24, 5
   150aa:	16 c0       	rjmp	.+44     	; 0x150d8 <SS80_locate_and_write+0x68>
   150ac:	83 85       	ldd	r24, Z+11	; 0x0b
   150ae:	94 85       	ldd	r25, Z+12	; 0x0c
   150b0:	a5 85       	ldd	r26, Z+13	; 0x0d
   150b2:	b6 85       	ldd	r27, Z+14	; 0x0e
   150b4:	ed b7       	in	r30, 0x3d	; 61
   150b6:	fe b7       	in	r31, 0x3e	; 62
   150b8:	80 87       	std	Z+8, r24	; 0x08
   150ba:	91 87       	std	Z+9, r25	; 0x09
   150bc:	a2 87       	std	Z+10, r26	; 0x0a
   150be:	b3 87       	std	Z+11, r27	; 0x0b
   150c0:	84 82       	std	Z+4, r8	; 0x04
   150c2:	95 82       	std	Z+5, r9	; 0x05
   150c4:	a6 82       	std	Z+6, r10	; 0x06
   150c6:	b7 82       	std	Z+7, r11	; 0x07
   150c8:	8c eb       	ldi	r24, 0xBC	; 188
   150ca:	94 e2       	ldi	r25, 0x24	; 36
   150cc:	a0 e0       	ldi	r26, 0x00	; 0
   150ce:	81 83       	std	Z+1, r24	; 0x01
   150d0:	92 83       	std	Z+2, r25	; 0x02
   150d2:	a3 83       	std	Z+3, r26	; 0x03
   150d4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   150d8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   150dc:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   150e0:	12 82       	std	Z+2, r1	; 0x02
   150e2:	54 98       	cbi	0x0a, 4	; 10
   150e4:	4c 99       	sbic	0x09, 4	; 9
   150e6:	03 c0       	rjmp	.+6      	; 0x150ee <SS80_locate_and_write+0x7e>
   150e8:	80 e0       	ldi	r24, 0x00	; 0
   150ea:	90 e1       	ldi	r25, 0x10	; 16
   150ec:	4f c1       	rjmp	.+670    	; 0x1538c <SS80_locate_and_write+0x31c>
   150ee:	4b df       	rcall	.-362    	; 0x14f86 <SS80_cmd_seek>
   150f0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   150f4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   150f8:	89 2b       	or	r24, r25
   150fa:	41 f0       	breq	.+16     	; 0x1510c <SS80_locate_and_write+0x9c>
   150fc:	83 81       	ldd	r24, Z+3	; 0x03
   150fe:	94 81       	ldd	r25, Z+4	; 0x04
   15100:	82 60       	ori	r24, 0x02	; 2
   15102:	94 83       	std	Z+4, r25	; 0x04
   15104:	83 83       	std	Z+3, r24	; 0x03
   15106:	01 e0       	ldi	r16, 0x01	; 1
   15108:	10 e0       	ldi	r17, 0x00	; 0
   1510a:	02 c0       	rjmp	.+4      	; 0x15110 <SS80_locate_and_write+0xa0>
   1510c:	00 e0       	ldi	r16, 0x00	; 0
   1510e:	10 e0       	ldi	r17, 0x00	; 0
   15110:	23 84       	ldd	r2, Z+11	; 0x0b
   15112:	34 84       	ldd	r3, Z+12	; 0x0c
   15114:	1d 86       	std	Y+13, r1	; 0x0d
   15116:	1c 86       	std	Y+12, r1	; 0x0c
   15118:	41 2c       	mov	r4, r1
   1511a:	51 2c       	mov	r5, r1
   1511c:	32 01       	movw	r6, r4
   1511e:	8f e6       	ldi	r24, 0x6F	; 111
   15120:	94 e2       	ldi	r25, 0x24	; 36
   15122:	9c 01       	movw	r18, r24
   15124:	40 e0       	ldi	r20, 0x00	; 0
   15126:	2e 87       	std	Y+14, r18	; 0x0e
   15128:	3f 87       	std	Y+15, r19	; 0x0f
   1512a:	48 8b       	std	Y+16, r20	; 0x10
   1512c:	85 e9       	ldi	r24, 0x95	; 149
   1512e:	94 e2       	ldi	r25, 0x24	; 36
   15130:	9c 01       	movw	r18, r24
   15132:	40 e0       	ldi	r20, 0x00	; 0
   15134:	29 8b       	std	Y+17, r18	; 0x11
   15136:	3a 8b       	std	Y+18, r19	; 0x12
   15138:	4b 8b       	std	Y+19, r20	; 0x13
   1513a:	12 14       	cp	r1, r2
   1513c:	13 04       	cpc	r1, r3
   1513e:	0c f0       	brlt	.+2      	; 0x15142 <SS80_locate_and_write+0xd2>
   15140:	f5 c0       	rjmp	.+490    	; 0x1532c <SS80_locate_and_write+0x2bc>
   15142:	54 98       	cbi	0x0a, 4	; 10
   15144:	4c 9b       	sbis	0x09, 4	; 9
   15146:	d0 cf       	rjmp	.-96     	; 0x150e8 <SS80_locate_and_write+0x78>
   15148:	71 01       	movw	r14, r2
   1514a:	31 e0       	ldi	r19, 0x01	; 1
   1514c:	23 16       	cp	r2, r19
   1514e:	33 06       	cpc	r3, r19
   15150:	1c f0       	brlt	.+6      	; 0x15158 <SS80_locate_and_write+0xe8>
   15152:	e1 2c       	mov	r14, r1
   15154:	ff 24       	eor	r15, r15
   15156:	f3 94       	inc	r15
   15158:	ea ee       	ldi	r30, 0xEA	; 234
   1515a:	fc e1       	ldi	r31, 0x1C	; 28
   1515c:	20 e0       	ldi	r18, 0x00	; 0
   1515e:	32 e0       	ldi	r19, 0x02	; 2
   15160:	11 92       	st	Z+, r1
   15162:	21 50       	subi	r18, 0x01	; 1
   15164:	30 40       	sbci	r19, 0x00	; 0
   15166:	e1 f7       	brne	.-8      	; 0x15160 <SS80_locate_and_write+0xf0>
   15168:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1516c:	87 fd       	sbrc	r24, 7
   1516e:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   15172:	ae 01       	movw	r20, r28
   15174:	44 5f       	subi	r20, 0xF4	; 244
   15176:	5f 4f       	sbci	r21, 0xFF	; 255
   15178:	b7 01       	movw	r22, r14
   1517a:	8a ee       	ldi	r24, 0xEA	; 234
   1517c:	9c e1       	ldi	r25, 0x1C	; 28
   1517e:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
   15182:	6c 01       	movw	r12, r24
   15184:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15188:	87 ff       	sbrs	r24, 7
   1518a:	04 c0       	rjmp	.+8      	; 0x15194 <SS80_locate_and_write+0x124>
   1518c:	88 e8       	ldi	r24, 0x88	; 136
   1518e:	90 e1       	ldi	r25, 0x10	; 16
   15190:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   15194:	ce 14       	cp	r12, r14
   15196:	df 04       	cpc	r13, r15
   15198:	39 f1       	breq	.+78     	; 0x151e8 <SS80_locate_and_write+0x178>
   1519a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1519c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1519e:	9c 01       	movw	r18, r24
   151a0:	22 27       	eor	r18, r18
   151a2:	30 7d       	andi	r19, 0xD0	; 208
   151a4:	23 2b       	or	r18, r19
   151a6:	d1 f0       	breq	.+52     	; 0x151dc <SS80_locate_and_write+0x16c>
   151a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151ac:	80 ff       	sbrs	r24, 0
   151ae:	0a c0       	rjmp	.+20     	; 0x151c4 <SS80_locate_and_write+0x154>
   151b0:	89 ea       	ldi	r24, 0xA9	; 169
   151b2:	94 e2       	ldi	r25, 0x24	; 36
   151b4:	a0 e0       	ldi	r26, 0x00	; 0
   151b6:	ed b7       	in	r30, 0x3d	; 61
   151b8:	fe b7       	in	r31, 0x3e	; 62
   151ba:	81 83       	std	Z+1, r24	; 0x01
   151bc:	92 83       	std	Z+2, r25	; 0x02
   151be:	a3 83       	std	Z+3, r26	; 0x03
   151c0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   151c4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   151c8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   151cc:	83 81       	ldd	r24, Z+3	; 0x03
   151ce:	94 81       	ldd	r25, Z+4	; 0x04
   151d0:	82 60       	ori	r24, 0x02	; 2
   151d2:	94 83       	std	Z+4, r25	; 0x04
   151d4:	83 83       	std	Z+3, r24	; 0x03
   151d6:	81 e0       	ldi	r24, 0x01	; 1
   151d8:	82 83       	std	Z+2, r24	; 0x02
   151da:	99 c0       	rjmp	.+306    	; 0x1530e <SS80_locate_and_write+0x29e>
   151dc:	c1 14       	cp	r12, r1
   151de:	d1 04       	cpc	r13, r1
   151e0:	09 f0       	breq	.+2      	; 0x151e4 <SS80_locate_and_write+0x174>
   151e2:	d0 c0       	rjmp	.+416    	; 0x15384 <SS80_locate_and_write+0x314>
   151e4:	90 fd       	sbrc	r25, 0
   151e6:	93 c0       	rjmp	.+294    	; 0x1530e <SS80_locate_and_write+0x29e>
   151e8:	01 15       	cp	r16, r1
   151ea:	11 05       	cpc	r17, r1
   151ec:	09 f0       	breq	.+2      	; 0x151f0 <SS80_locate_and_write+0x180>
   151ee:	84 c0       	rjmp	.+264    	; 0x152f8 <SS80_locate_and_write+0x288>
   151f0:	c1 14       	cp	r12, r1
   151f2:	d1 04       	cpc	r13, r1
   151f4:	09 f4       	brne	.+2      	; 0x151f8 <SS80_locate_and_write+0x188>
   151f6:	82 c0       	rjmp	.+260    	; 0x152fc <SS80_locate_and_write+0x28c>
   151f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151fc:	86 fd       	sbrc	r24, 6
   151fe:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   15202:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   15206:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   1520a:	f3 e0       	ldi	r31, 0x03	; 3
   1520c:	ef 0e       	add	r14, r31
   1520e:	f1 1c       	adc	r15, r1
   15210:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15214:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15218:	86 01       	movw	r16, r12
   1521a:	2a ee       	ldi	r18, 0xEA	; 234
   1521c:	3c e1       	ldi	r19, 0x1C	; 28
   1521e:	b5 01       	movw	r22, r10
   15220:	a4 01       	movw	r20, r8
   15222:	82 81       	ldd	r24, Z+2	; 0x02
   15224:	93 81       	ldd	r25, Z+3	; 0x03
   15226:	0e 94 40 83 	call	0x10680	; 0x10680 <dbf_open_write>
   1522a:	7c 01       	movw	r14, r24
   1522c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15230:	86 ff       	sbrs	r24, 6
   15232:	04 c0       	rjmp	.+8      	; 0x1523c <SS80_locate_and_write+0x1cc>
   15234:	83 e9       	ldi	r24, 0x93	; 147
   15236:	90 e1       	ldi	r25, 0x10	; 16
   15238:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   1523c:	ce 14       	cp	r12, r14
   1523e:	df 04       	cpc	r13, r15
   15240:	39 f1       	breq	.+78     	; 0x15290 <SS80_locate_and_write+0x220>
   15242:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15246:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1524a:	83 81       	ldd	r24, Z+3	; 0x03
   1524c:	94 81       	ldd	r25, Z+4	; 0x04
   1524e:	82 60       	ori	r24, 0x02	; 2
   15250:	94 83       	std	Z+4, r25	; 0x04
   15252:	83 83       	std	Z+3, r24	; 0x03
   15254:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <mmc_wp_status>
   15258:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1525c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15260:	89 2b       	or	r24, r25
   15262:	29 f0       	breq	.+10     	; 0x1526e <SS80_locate_and_write+0x1fe>
   15264:	83 81       	ldd	r24, Z+3	; 0x03
   15266:	94 81       	ldd	r25, Z+4	; 0x04
   15268:	88 60       	ori	r24, 0x08	; 8
   1526a:	94 83       	std	Z+4, r25	; 0x04
   1526c:	83 83       	std	Z+3, r24	; 0x03
   1526e:	21 e0       	ldi	r18, 0x01	; 1
   15270:	22 83       	std	Z+2, r18	; 0x02
   15272:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15276:	80 ff       	sbrs	r24, 0
   15278:	27 c0       	rjmp	.+78     	; 0x152c8 <SS80_locate_and_write+0x258>
   1527a:	89 89       	ldd	r24, Y+17	; 0x11
   1527c:	9a 89       	ldd	r25, Y+18	; 0x12
   1527e:	ab 89       	ldd	r26, Y+19	; 0x13
   15280:	ed b7       	in	r30, 0x3d	; 61
   15282:	fe b7       	in	r31, 0x3e	; 62
   15284:	81 83       	std	Z+1, r24	; 0x01
   15286:	92 83       	std	Z+2, r25	; 0x02
   15288:	a3 83       	std	Z+3, r26	; 0x03
   1528a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1528e:	1c c0       	rjmp	.+56     	; 0x152c8 <SS80_locate_and_write+0x258>
   15290:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15294:	85 ff       	sbrs	r24, 5
   15296:	0c c0       	rjmp	.+24     	; 0x152b0 <SS80_locate_and_write+0x240>
   15298:	ed b7       	in	r30, 0x3d	; 61
   1529a:	fe b7       	in	r31, 0x3e	; 62
   1529c:	d5 82       	std	Z+5, r13	; 0x05
   1529e:	c4 82       	std	Z+4, r12	; 0x04
   152a0:	2e 85       	ldd	r18, Y+14	; 0x0e
   152a2:	3f 85       	ldd	r19, Y+15	; 0x0f
   152a4:	48 89       	ldd	r20, Y+16	; 0x10
   152a6:	21 83       	std	Z+1, r18	; 0x01
   152a8:	32 83       	std	Z+2, r19	; 0x02
   152aa:	43 83       	std	Z+3, r20	; 0x03
   152ac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   152b0:	c6 01       	movw	r24, r12
   152b2:	0d 2c       	mov	r0, r13
   152b4:	00 0c       	add	r0, r0
   152b6:	aa 0b       	sbc	r26, r26
   152b8:	bb 0b       	sbc	r27, r27
   152ba:	88 0e       	add	r8, r24
   152bc:	99 1e       	adc	r9, r25
   152be:	aa 1e       	adc	r10, r26
   152c0:	bb 1e       	adc	r11, r27
   152c2:	00 e0       	ldi	r16, 0x00	; 0
   152c4:	10 e0       	ldi	r17, 0x00	; 0
   152c6:	05 c0       	rjmp	.+10     	; 0x152d2 <SS80_locate_and_write+0x262>
   152c8:	ec 14       	cp	r14, r12
   152ca:	fd 04       	cpc	r15, r13
   152cc:	64 f0       	brlt	.+24     	; 0x152e6 <SS80_locate_and_write+0x276>
   152ce:	01 e0       	ldi	r16, 0x01	; 1
   152d0:	10 e0       	ldi	r17, 0x00	; 0
   152d2:	c7 01       	movw	r24, r14
   152d4:	0f 2c       	mov	r0, r15
   152d6:	00 0c       	add	r0, r0
   152d8:	aa 0b       	sbc	r26, r26
   152da:	bb 0b       	sbc	r27, r27
   152dc:	48 0e       	add	r4, r24
   152de:	59 1e       	adc	r5, r25
   152e0:	6a 1e       	adc	r6, r26
   152e2:	7b 1e       	adc	r7, r27
   152e4:	0b c0       	rjmp	.+22     	; 0x152fc <SS80_locate_and_write+0x28c>
   152e6:	c6 01       	movw	r24, r12
   152e8:	0d 2c       	mov	r0, r13
   152ea:	00 0c       	add	r0, r0
   152ec:	aa 0b       	sbc	r26, r26
   152ee:	bb 0b       	sbc	r27, r27
   152f0:	48 0e       	add	r4, r24
   152f2:	59 1e       	adc	r5, r25
   152f4:	6a 1e       	adc	r6, r26
   152f6:	7b 1e       	adc	r7, r27
   152f8:	01 e0       	ldi	r16, 0x01	; 1
   152fa:	10 e0       	ldi	r17, 0x00	; 0
   152fc:	2c 18       	sub	r2, r12
   152fe:	3d 08       	sbc	r3, r13
   15300:	8c 85       	ldd	r24, Y+12	; 0x0c
   15302:	9d 85       	ldd	r25, Y+13	; 0x0d
   15304:	90 ff       	sbrs	r25, 0
   15306:	19 cf       	rjmp	.-462    	; 0x1513a <SS80_locate_and_write+0xca>
   15308:	12 14       	cp	r1, r2
   1530a:	13 04       	cpc	r1, r3
   1530c:	7c f4       	brge	.+30     	; 0x1532c <SS80_locate_and_write+0x2bc>
   1530e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15312:	80 ff       	sbrs	r24, 0
   15314:	1d c0       	rjmp	.+58     	; 0x15350 <SS80_locate_and_write+0x2e0>
   15316:	87 e4       	ldi	r24, 0x47	; 71
   15318:	94 e2       	ldi	r25, 0x24	; 36
   1531a:	a0 e0       	ldi	r26, 0x00	; 0
   1531c:	ed b7       	in	r30, 0x3d	; 61
   1531e:	fe b7       	in	r31, 0x3e	; 62
   15320:	81 83       	std	Z+1, r24	; 0x01
   15322:	92 83       	std	Z+2, r25	; 0x02
   15324:	a3 83       	std	Z+3, r26	; 0x03
   15326:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1532a:	12 c0       	rjmp	.+36     	; 0x15350 <SS80_locate_and_write+0x2e0>
   1532c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15330:	85 ff       	sbrs	r24, 5
   15332:	0e c0       	rjmp	.+28     	; 0x15350 <SS80_locate_and_write+0x2e0>
   15334:	ed b7       	in	r30, 0x3d	; 61
   15336:	fe b7       	in	r31, 0x3e	; 62
   15338:	44 82       	std	Z+4, r4	; 0x04
   1533a:	55 82       	std	Z+5, r5	; 0x05
   1533c:	66 82       	std	Z+6, r6	; 0x06
   1533e:	77 82       	std	Z+7, r7	; 0x07
   15340:	8c e1       	ldi	r24, 0x1C	; 28
   15342:	94 e2       	ldi	r25, 0x24	; 36
   15344:	a0 e0       	ldi	r26, 0x00	; 0
   15346:	81 83       	std	Z+1, r24	; 0x01
   15348:	92 83       	std	Z+2, r25	; 0x02
   1534a:	a3 83       	std	Z+3, r26	; 0x03
   1534c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15350:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15354:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>
   15358:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1535c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15360:	20 89       	ldd	r18, Z+16	; 0x10
   15362:	31 89       	ldd	r19, Z+17	; 0x11
   15364:	40 e0       	ldi	r20, 0x00	; 0
   15366:	50 e0       	ldi	r21, 0x00	; 0
   15368:	c5 01       	movw	r24, r10
   1536a:	b4 01       	movw	r22, r8
   1536c:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
   15370:	f8 01       	movw	r30, r16
   15372:	27 83       	std	Z+7, r18	; 0x07
   15374:	30 87       	std	Z+8, r19	; 0x08
   15376:	41 87       	std	Z+9, r20	; 0x09
   15378:	52 87       	std	Z+10, r21	; 0x0a
   1537a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1537c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1537e:	88 27       	eor	r24, r24
   15380:	90 7d       	andi	r25, 0xD0	; 208
   15382:	04 c0       	rjmp	.+8      	; 0x1538c <SS80_locate_and_write+0x31c>
   15384:	01 2b       	or	r16, r17
   15386:	09 f4       	brne	.+2      	; 0x1538a <SS80_locate_and_write+0x31a>
   15388:	37 cf       	rjmp	.-402    	; 0x151f8 <SS80_locate_and_write+0x188>
   1538a:	b6 cf       	rjmp	.-148    	; 0x152f8 <SS80_locate_and_write+0x288>
   1538c:	63 96       	adiw	r28, 0x13	; 19
   1538e:	e2 e1       	ldi	r30, 0x12	; 18
   15390:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00015394 <SS80_Report>:
   15394:	a8 e0       	ldi	r26, 0x08	; 8
   15396:	b0 e0       	ldi	r27, 0x00	; 0
   15398:	e0 ed       	ldi	r30, 0xD0	; 208
   1539a:	f9 ea       	ldi	r31, 0xA9	; 169
   1539c:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   153a0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153a4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153a8:	82 81       	ldd	r24, Z+2	; 0x02
   153aa:	88 87       	std	Y+8, r24	; 0x08
   153ac:	80 e0       	ldi	r24, 0x00	; 0
   153ae:	91 e0       	ldi	r25, 0x01	; 1
   153b0:	9f 83       	std	Y+7, r25	; 0x07
   153b2:	8e 83       	std	Y+6, r24	; 0x06
   153b4:	ae 01       	movw	r20, r28
   153b6:	4a 5f       	subi	r20, 0xFA	; 250
   153b8:	5f 4f       	sbci	r21, 0xFF	; 255
   153ba:	61 e0       	ldi	r22, 0x01	; 1
   153bc:	70 e0       	ldi	r23, 0x00	; 0
   153be:	ce 01       	movw	r24, r28
   153c0:	08 96       	adiw	r24, 0x08	; 8
   153c2:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   153c6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   153ca:	01 97       	sbiw	r24, 0x01	; 1
   153cc:	89 f0       	breq	.+34     	; 0x153f0 <SS80_Report+0x5c>
   153ce:	20 ff       	sbrs	r18, 0
   153d0:	0a c0       	rjmp	.+20     	; 0x153e6 <SS80_Report+0x52>
   153d2:	8b e0       	ldi	r24, 0x0B	; 11
   153d4:	9f e1       	ldi	r25, 0x1F	; 31
   153d6:	a0 e0       	ldi	r26, 0x00	; 0
   153d8:	ed b7       	in	r30, 0x3d	; 61
   153da:	fe b7       	in	r31, 0x3e	; 62
   153dc:	81 83       	std	Z+1, r24	; 0x01
   153de:	92 83       	std	Z+2, r25	; 0x02
   153e0:	a3 83       	std	Z+3, r26	; 0x03
   153e2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   153e6:	8e 81       	ldd	r24, Y+6	; 0x06
   153e8:	9f 81       	ldd	r25, Y+7	; 0x07
   153ea:	88 27       	eor	r24, r24
   153ec:	90 7d       	andi	r25, 0xD0	; 208
   153ee:	1b c0       	rjmp	.+54     	; 0x15426 <SS80_Report+0x92>
   153f0:	25 ff       	sbrs	r18, 5
   153f2:	12 c0       	rjmp	.+36     	; 0x15418 <SS80_Report+0x84>
   153f4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   153f8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   153fc:	82 81       	ldd	r24, Z+2	; 0x02
   153fe:	90 e0       	ldi	r25, 0x00	; 0
   15400:	ed b7       	in	r30, 0x3d	; 61
   15402:	fe b7       	in	r31, 0x3e	; 62
   15404:	95 83       	std	Z+5, r25	; 0x05
   15406:	84 83       	std	Z+4, r24	; 0x04
   15408:	88 ef       	ldi	r24, 0xF8	; 248
   1540a:	9e e1       	ldi	r25, 0x1E	; 30
   1540c:	a0 e0       	ldi	r26, 0x00	; 0
   1540e:	81 83       	std	Z+1, r24	; 0x01
   15410:	92 83       	std	Z+2, r25	; 0x02
   15412:	a3 83       	std	Z+3, r26	; 0x03
   15414:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15418:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1541c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15420:	12 82       	std	Z+2, r1	; 0x02
   15422:	80 e0       	ldi	r24, 0x00	; 0
   15424:	90 e0       	ldi	r25, 0x00	; 0
   15426:	28 96       	adiw	r28, 0x08	; 8
   15428:	e2 e0       	ldi	r30, 0x02	; 2
   1542a:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

0001542e <Clear_Common>:
   1542e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15432:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15436:	25 81       	ldd	r18, Z+5	; 0x05
   15438:	30 e0       	ldi	r19, 0x00	; 0
   1543a:	28 17       	cp	r18, r24
   1543c:	39 07       	cpc	r19, r25
   1543e:	19 f0       	breq	.+6      	; 0x15446 <Clear_Common+0x18>
   15440:	0f 97       	sbiw	r24, 0x0f	; 15
   15442:	99 f4       	brne	.+38     	; 0x1546a <Clear_Common+0x3c>
   15444:	03 c0       	rjmp	.+6      	; 0x1544c <Clear_Common+0x1e>
   15446:	2f 30       	cpi	r18, 0x0F	; 15
   15448:	31 05       	cpc	r19, r1
   1544a:	09 f4       	brne	.+2      	; 0x1544e <Clear_Common+0x20>
   1544c:	15 82       	std	Z+5, r1	; 0x05
   1544e:	16 82       	std	Z+6, r1	; 0x06
   15450:	17 82       	std	Z+7, r1	; 0x07
   15452:	10 86       	std	Z+8, r1	; 0x08
   15454:	11 86       	std	Z+9, r1	; 0x09
   15456:	12 86       	std	Z+10, r1	; 0x0a
   15458:	13 86       	std	Z+11, r1	; 0x0b
   1545a:	14 86       	std	Z+12, r1	; 0x0c
   1545c:	15 86       	std	Z+13, r1	; 0x0d
   1545e:	16 86       	std	Z+14, r1	; 0x0e
   15460:	11 82       	std	Z+1, r1	; 0x01
   15462:	10 82       	st	Z, r1
   15464:	14 82       	std	Z+4, r1	; 0x04
   15466:	13 82       	std	Z+3, r1	; 0x03
   15468:	12 82       	std	Z+2, r1	; 0x02
   1546a:	08 95       	ret

0001546c <SS80_init>:
   1546c:	a5 e0       	ldi	r26, 0x05	; 5
   1546e:	b0 e0       	ldi	r27, 0x00	; 0
   15470:	ec e3       	ldi	r30, 0x3C	; 60
   15472:	fa ea       	ldi	r31, 0xAA	; 170
   15474:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
   15478:	0d ec       	ldi	r16, 0xCD	; 205
   1547a:	10 e2       	ldi	r17, 0x20	; 32
   1547c:	cb e0       	ldi	r28, 0x0B	; 11
   1547e:	d0 e0       	ldi	r29, 0x00	; 0
   15480:	82 e0       	ldi	r24, 0x02	; 2
   15482:	f8 2e       	mov	r15, r24
   15484:	85 ec       	ldi	r24, 0xC5	; 197
   15486:	95 e2       	ldi	r25, 0x25	; 37
   15488:	6c 01       	movw	r12, r24
   1548a:	e1 2c       	mov	r14, r1
   1548c:	f8 01       	movw	r30, r16
   1548e:	80 81       	ld	r24, Z
   15490:	83 30       	cpi	r24, 0x03	; 3
   15492:	29 f5       	brne	.+74     	; 0x154de <SS80_init+0x72>
   15494:	ce 01       	movw	r24, r28
   15496:	0e 94 af 95 	call	0x12b5e	; 0x12b5e <set_active_device>
   1549a:	89 2b       	or	r24, r25
   1549c:	01 f1       	breq	.+64     	; 0x154de <SS80_init+0x72>
   1549e:	8f e0       	ldi	r24, 0x0F	; 15
   154a0:	90 e0       	ldi	r25, 0x00	; 0
   154a2:	c5 df       	rcall	.-118    	; 0x1542e <Clear_Common>
   154a4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   154a8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   154ac:	f2 82       	std	Z+2, r15	; 0x02
   154ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154b2:	85 ff       	sbrs	r24, 5
   154b4:	0c c0       	rjmp	.+24     	; 0x154ce <SS80_init+0x62>
   154b6:	f8 01       	movw	r30, r16
   154b8:	81 81       	ldd	r24, Z+1	; 0x01
   154ba:	90 e0       	ldi	r25, 0x00	; 0
   154bc:	ed b7       	in	r30, 0x3d	; 61
   154be:	fe b7       	in	r31, 0x3e	; 62
   154c0:	95 83       	std	Z+5, r25	; 0x05
   154c2:	84 83       	std	Z+4, r24	; 0x04
   154c4:	c1 82       	std	Z+1, r12	; 0x01
   154c6:	d2 82       	std	Z+2, r13	; 0x02
   154c8:	e3 82       	std	Z+3, r14	; 0x03
   154ca:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   154ce:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   154d2:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   154d6:	81 81       	ldd	r24, Z+1	; 0x01
   154d8:	90 e0       	ldi	r25, 0x00	; 0
   154da:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
   154de:	21 97       	sbiw	r28, 0x01	; 1
   154e0:	0b 52       	subi	r16, 0x2B	; 43
   154e2:	11 09       	sbc	r17, r1
   154e4:	cf 3f       	cpi	r28, 0xFF	; 255
   154e6:	ff ef       	ldi	r31, 0xFF	; 255
   154e8:	df 07       	cpc	r29, r31
   154ea:	81 f6       	brne	.-96     	; 0x1548c <SS80_init+0x20>
   154ec:	cd b7       	in	r28, 0x3d	; 61
   154ee:	de b7       	in	r29, 0x3e	; 62
   154f0:	25 96       	adiw	r28, 0x05	; 5
   154f2:	e8 e0       	ldi	r30, 0x08	; 8
   154f4:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

000154f8 <SS80_Channel_Independent_Clear>:
   154f8:	9a df       	rcall	.-204    	; 0x1542e <Clear_Common>
   154fa:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   154fe:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15502:	81 81       	ldd	r24, Z+1	; 0x01
   15504:	90 e0       	ldi	r25, 0x00	; 0
   15506:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   1550a:	80 e0       	ldi	r24, 0x00	; 0
   1550c:	90 e0       	ldi	r25, 0x00	; 0
   1550e:	08 95       	ret

00015510 <SS80_Universal_Device_Clear>:
   15510:	8f e0       	ldi	r24, 0x0F	; 15
   15512:	90 e0       	ldi	r25, 0x00	; 0
   15514:	8c df       	rcall	.-232    	; 0x1542e <Clear_Common>
   15516:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1551a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1551e:	81 81       	ldd	r24, Z+1	; 0x01
   15520:	90 e0       	ldi	r25, 0x00	; 0
   15522:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   15526:	80 e0       	ldi	r24, 0x00	; 0
   15528:	90 e0       	ldi	r25, 0x00	; 0
   1552a:	08 95       	ret

0001552c <SS80_Selected_Device_Clear>:
   1552c:	cf 93       	push	r28
   1552e:	df 93       	push	r29
   15530:	00 d0       	rcall	.+0      	; 0x15532 <SS80_Selected_Device_Clear+0x6>
   15532:	1f 92       	push	r1
   15534:	ec 01       	movw	r28, r24
   15536:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1553a:	85 ff       	sbrs	r24, 5
   1553c:	0a c0       	rjmp	.+20     	; 0x15552 <SS80_Selected_Device_Clear+0x26>
   1553e:	8c ee       	ldi	r24, 0xEC	; 236
   15540:	9e e1       	ldi	r25, 0x1E	; 30
   15542:	a0 e0       	ldi	r26, 0x00	; 0
   15544:	ed b7       	in	r30, 0x3d	; 61
   15546:	fe b7       	in	r31, 0x3e	; 62
   15548:	81 83       	std	Z+1, r24	; 0x01
   1554a:	92 83       	std	Z+2, r25	; 0x02
   1554c:	a3 83       	std	Z+3, r26	; 0x03
   1554e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15552:	ce 01       	movw	r24, r28
   15554:	6c df       	rcall	.-296    	; 0x1542e <Clear_Common>
   15556:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1555a:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1555e:	81 81       	ldd	r24, Z+1	; 0x01
   15560:	90 e0       	ldi	r25, 0x00	; 0
   15562:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   15566:	80 e0       	ldi	r24, 0x00	; 0
   15568:	90 e0       	ldi	r25, 0x00	; 0
   1556a:	cd b7       	in	r28, 0x3d	; 61
   1556c:	de b7       	in	r29, 0x3e	; 62
   1556e:	23 96       	adiw	r28, 0x03	; 3
   15570:	e2 e0       	ldi	r30, 0x02	; 2
   15572:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00015576 <SS80_Amigo_Clear>:
   15576:	a6 e0       	ldi	r26, 0x06	; 6
   15578:	b0 e0       	ldi	r27, 0x00	; 0
   1557a:	e1 ec       	ldi	r30, 0xC1	; 193
   1557c:	fa ea       	ldi	r31, 0xAA	; 170
   1557e:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   15582:	1d 82       	std	Y+5, r1	; 0x05
   15584:	1c 82       	std	Y+4, r1	; 0x04
   15586:	ae 01       	movw	r20, r28
   15588:	4c 5f       	subi	r20, 0xFC	; 252
   1558a:	5f 4f       	sbci	r21, 0xFF	; 255
   1558c:	61 e0       	ldi	r22, 0x01	; 1
   1558e:	70 e0       	ldi	r23, 0x00	; 0
   15590:	ce 01       	movw	r24, r28
   15592:	06 96       	adiw	r24, 0x06	; 6
   15594:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
   15598:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1559c:	01 97       	sbiw	r24, 0x01	; 1
   1559e:	89 f0       	breq	.+34     	; 0x155c2 <SS80_Amigo_Clear+0x4c>
   155a0:	20 ff       	sbrs	r18, 0
   155a2:	0a c0       	rjmp	.+20     	; 0x155b8 <SS80_Amigo_Clear+0x42>
   155a4:	89 ed       	ldi	r24, 0xD9	; 217
   155a6:	9e e1       	ldi	r25, 0x1E	; 30
   155a8:	a0 e0       	ldi	r26, 0x00	; 0
   155aa:	ed b7       	in	r30, 0x3d	; 61
   155ac:	fe b7       	in	r31, 0x3e	; 62
   155ae:	81 83       	std	Z+1, r24	; 0x01
   155b0:	92 83       	std	Z+2, r25	; 0x02
   155b2:	a3 83       	std	Z+3, r26	; 0x03
   155b4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   155b8:	8c 81       	ldd	r24, Y+4	; 0x04
   155ba:	9d 81       	ldd	r25, Y+5	; 0x05
   155bc:	88 27       	eor	r24, r24
   155be:	90 7d       	andi	r25, 0xD0	; 208
   155c0:	19 c0       	rjmp	.+50     	; 0x155f4 <SS80_Amigo_Clear+0x7e>
   155c2:	25 ff       	sbrs	r18, 5
   155c4:	0a c0       	rjmp	.+20     	; 0x155da <SS80_Amigo_Clear+0x64>
   155c6:	8a ec       	ldi	r24, 0xCA	; 202
   155c8:	9e e1       	ldi	r25, 0x1E	; 30
   155ca:	a0 e0       	ldi	r26, 0x00	; 0
   155cc:	ed b7       	in	r30, 0x3d	; 61
   155ce:	fe b7       	in	r31, 0x3e	; 62
   155d0:	81 83       	std	Z+1, r24	; 0x01
   155d2:	92 83       	std	Z+2, r25	; 0x02
   155d4:	a3 83       	std	Z+3, r26	; 0x03
   155d6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   155da:	8f e0       	ldi	r24, 0x0F	; 15
   155dc:	90 e0       	ldi	r25, 0x00	; 0
   155de:	27 df       	rcall	.-434    	; 0x1542e <Clear_Common>
   155e0:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   155e4:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   155e8:	81 81       	ldd	r24, Z+1	; 0x01
   155ea:	90 e0       	ldi	r25, 0x00	; 0
   155ec:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   155f0:	80 e0       	ldi	r24, 0x00	; 0
   155f2:	90 e0       	ldi	r25, 0x00	; 0
   155f4:	26 96       	adiw	r28, 0x06	; 6
   155f6:	e2 e0       	ldi	r30, 0x02	; 2
   155f8:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000155fc <SS80_Cancel>:
   155fc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15600:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15604:	11 82       	std	Z+1, r1	; 0x01
   15606:	10 82       	st	Z, r1
   15608:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1560c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15610:	81 81       	ldd	r24, Z+1	; 0x01
   15612:	90 e0       	ldi	r25, 0x00	; 0
   15614:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   15618:	80 e0       	ldi	r24, 0x00	; 0
   1561a:	90 e0       	ldi	r25, 0x00	; 0
   1561c:	08 95       	ret

0001561e <SS80_Transparent_State>:
   1561e:	a9 e0       	ldi	r26, 0x09	; 9
   15620:	b0 e0       	ldi	r27, 0x00	; 0
   15622:	e5 e1       	ldi	r30, 0x15	; 21
   15624:	fb ea       	ldi	r31, 0xAB	; 171
   15626:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   1562a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   1562e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15632:	81 81       	ldd	r24, Z+1	; 0x01
   15634:	90 e0       	ldi	r25, 0x00	; 0
   15636:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
   1563a:	80 e0       	ldi	r24, 0x00	; 0
   1563c:	91 e0       	ldi	r25, 0x01	; 1
   1563e:	99 87       	std	Y+9, r25	; 0x09
   15640:	88 87       	std	Y+8, r24	; 0x08
   15642:	ae 01       	movw	r20, r28
   15644:	48 5f       	subi	r20, 0xF8	; 248
   15646:	5f 4f       	sbci	r21, 0xFF	; 255
   15648:	60 e0       	ldi	r22, 0x00	; 0
   1564a:	72 e0       	ldi	r23, 0x02	; 2
   1564c:	8a ee       	ldi	r24, 0xEA	; 234
   1564e:	9c e1       	ldi	r25, 0x1C	; 28
   15650:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
   15654:	7c 01       	movw	r14, r24
   15656:	88 85       	ldd	r24, Y+8	; 0x08
   15658:	99 85       	ldd	r25, Y+9	; 0x09
   1565a:	9c 01       	movw	r18, r24
   1565c:	22 27       	eor	r18, r18
   1565e:	30 7d       	andi	r19, 0xD0	; 208
   15660:	23 2b       	or	r18, r19
   15662:	79 f0       	breq	.+30     	; 0x15682 <SS80_Transparent_State+0x64>
   15664:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15668:	80 ff       	sbrs	r24, 0
   1566a:	da c0       	rjmp	.+436    	; 0x15820 <SS80_Transparent_State+0x202>
   1566c:	89 e6       	ldi	r24, 0x69	; 105
   1566e:	90 e2       	ldi	r25, 0x20	; 32
   15670:	a0 e0       	ldi	r26, 0x00	; 0
   15672:	ed b7       	in	r30, 0x3d	; 61
   15674:	fe b7       	in	r31, 0x3e	; 62
   15676:	81 83       	std	Z+1, r24	; 0x01
   15678:	92 83       	std	Z+2, r25	; 0x02
   1567a:	a3 83       	std	Z+3, r26	; 0x03
   1567c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15680:	cf c0       	rjmp	.+414    	; 0x15820 <SS80_Transparent_State+0x202>
   15682:	e1 14       	cp	r14, r1
   15684:	f1 04       	cpc	r15, r1
   15686:	09 f4       	brne	.+2      	; 0x1568a <SS80_Transparent_State+0x6c>
   15688:	d0 c0       	rjmp	.+416    	; 0x1582a <SS80_Transparent_State+0x20c>
   1568a:	90 fd       	sbrc	r25, 0
   1568c:	0e c0       	rjmp	.+28     	; 0x156aa <SS80_Transparent_State+0x8c>
   1568e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15692:	80 ff       	sbrs	r24, 0
   15694:	0a c0       	rjmp	.+20     	; 0x156aa <SS80_Transparent_State+0x8c>
   15696:	80 e5       	ldi	r24, 0x50	; 80
   15698:	90 e2       	ldi	r25, 0x20	; 32
   1569a:	a0 e0       	ldi	r26, 0x00	; 0
   1569c:	ed b7       	in	r30, 0x3d	; 61
   1569e:	fe b7       	in	r31, 0x3e	; 62
   156a0:	81 83       	std	Z+1, r24	; 0x01
   156a2:	92 83       	std	Z+2, r25	; 0x02
   156a4:	a3 83       	std	Z+3, r26	; 0x03
   156a6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   156aa:	8a ee       	ldi	r24, 0xEA	; 234
   156ac:	a8 2e       	mov	r10, r24
   156ae:	8c e1       	ldi	r24, 0x1C	; 28
   156b0:	b8 2e       	mov	r11, r24
   156b2:	00 e0       	ldi	r16, 0x00	; 0
   156b4:	10 e0       	ldi	r17, 0x00	; 0
   156b6:	0e 15       	cp	r16, r14
   156b8:	1f 05       	cpc	r17, r15
   156ba:	0c f0       	brlt	.+2      	; 0x156be <SS80_Transparent_State+0xa0>
   156bc:	9c c0       	rjmp	.+312    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   156be:	68 01       	movw	r12, r16
   156c0:	ff ef       	ldi	r31, 0xFF	; 255
   156c2:	cf 1a       	sub	r12, r31
   156c4:	df 0a       	sbc	r13, r31
   156c6:	f5 01       	movw	r30, r10
   156c8:	81 91       	ld	r24, Z+
   156ca:	5f 01       	movw	r10, r30
   156cc:	28 2f       	mov	r18, r24
   156ce:	30 e0       	ldi	r19, 0x00	; 0
   156d0:	a9 01       	movw	r20, r18
   156d2:	40 52       	subi	r20, 0x20	; 32
   156d4:	51 09       	sbc	r21, r1
   156d6:	40 31       	cpi	r20, 0x10	; 16
   156d8:	51 05       	cpc	r21, r1
   156da:	20 f4       	brcc	.+8      	; 0x156e4 <SS80_Transparent_State+0xc6>
   156dc:	80 52       	subi	r24, 0x20	; 32
   156de:	8c d9       	rcall	.-3304   	; 0x149f8 <SS80_Check_Unit>
   156e0:	86 01       	movw	r16, r12
   156e2:	e9 cf       	rjmp	.-46     	; 0x156b6 <SS80_Transparent_State+0x98>
   156e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   156ec:	21 30       	cpi	r18, 0x01	; 1
   156ee:	31 05       	cpc	r19, r1
   156f0:	c9 f4       	brne	.+50     	; 0x15724 <SS80_Transparent_State+0x106>
   156f2:	0e 5f       	subi	r16, 0xFE	; 254
   156f4:	1f 4f       	sbci	r17, 0xFF	; 255
   156f6:	80 73       	andi	r24, 0x30	; 48
   156f8:	99 27       	eor	r25, r25
   156fa:	89 2b       	or	r24, r25
   156fc:	51 f0       	breq	.+20     	; 0x15712 <SS80_Transparent_State+0xf4>
   156fe:	8b e2       	ldi	r24, 0x2B	; 43
   15700:	90 e2       	ldi	r25, 0x20	; 32
   15702:	a0 e0       	ldi	r26, 0x00	; 0
   15704:	ed b7       	in	r30, 0x3d	; 61
   15706:	fe b7       	in	r31, 0x3e	; 62
   15708:	81 83       	std	Z+1, r24	; 0x01
   1570a:	92 83       	std	Z+2, r25	; 0x02
   1570c:	a3 83       	std	Z+3, r26	; 0x03
   1570e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15712:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15716:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   1571a:	81 81       	ldd	r24, Z+1	; 0x01
   1571c:	90 e0       	ldi	r25, 0x00	; 0
   1571e:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   15722:	69 c0       	rjmp	.+210    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15724:	22 30       	cpi	r18, 0x02	; 2
   15726:	31 05       	cpc	r19, r1
   15728:	51 f4       	brne	.+20     	; 0x1573e <SS80_Transparent_State+0x120>
   1572a:	0b 5f       	subi	r16, 0xFB	; 251
   1572c:	1f 4f       	sbci	r17, 0xFF	; 255
   1572e:	80 73       	andi	r24, 0x30	; 48
   15730:	99 27       	eor	r25, r25
   15732:	89 2b       	or	r24, r25
   15734:	09 f4       	brne	.+2      	; 0x15738 <SS80_Transparent_State+0x11a>
   15736:	5f c0       	rjmp	.+190    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15738:	8e e0       	ldi	r24, 0x0E	; 14
   1573a:	90 e2       	ldi	r25, 0x20	; 32
   1573c:	0c c0       	rjmp	.+24     	; 0x15756 <SS80_Transparent_State+0x138>
   1573e:	23 30       	cpi	r18, 0x03	; 3
   15740:	31 05       	cpc	r19, r1
   15742:	91 f4       	brne	.+36     	; 0x15768 <SS80_Transparent_State+0x14a>
   15744:	0b 5f       	subi	r16, 0xFB	; 251
   15746:	1f 4f       	sbci	r17, 0xFF	; 255
   15748:	80 73       	andi	r24, 0x30	; 48
   1574a:	99 27       	eor	r25, r25
   1574c:	89 2b       	or	r24, r25
   1574e:	09 f4       	brne	.+2      	; 0x15752 <SS80_Transparent_State+0x134>
   15750:	52 c0       	rjmp	.+164    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15752:	80 ef       	ldi	r24, 0xF0	; 240
   15754:	9f e1       	ldi	r25, 0x1F	; 31
   15756:	a0 e0       	ldi	r26, 0x00	; 0
   15758:	ed b7       	in	r30, 0x3d	; 61
   1575a:	fe b7       	in	r31, 0x3e	; 62
   1575c:	81 83       	std	Z+1, r24	; 0x01
   1575e:	92 83       	std	Z+2, r25	; 0x02
   15760:	a3 83       	std	Z+3, r26	; 0x03
   15762:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15766:	47 c0       	rjmp	.+142    	; 0x157f6 <SS80_Transparent_State+0x1d8>
   15768:	28 30       	cpi	r18, 0x08	; 8
   1576a:	31 05       	cpc	r19, r1
   1576c:	e1 f4       	brne	.+56     	; 0x157a6 <SS80_Transparent_State+0x188>
   1576e:	85 ff       	sbrs	r24, 5
   15770:	12 c0       	rjmp	.+36     	; 0x15796 <SS80_Transparent_State+0x178>
   15772:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15776:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1577a:	85 81       	ldd	r24, Z+5	; 0x05
   1577c:	90 e0       	ldi	r25, 0x00	; 0
   1577e:	ed b7       	in	r30, 0x3d	; 61
   15780:	fe b7       	in	r31, 0x3e	; 62
   15782:	95 83       	std	Z+5, r25	; 0x05
   15784:	84 83       	std	Z+4, r24	; 0x04
   15786:	89 ec       	ldi	r24, 0xC9	; 201
   15788:	9f e1       	ldi	r25, 0x1F	; 31
   1578a:	a0 e0       	ldi	r26, 0x00	; 0
   1578c:	81 83       	std	Z+1, r24	; 0x01
   1578e:	92 83       	std	Z+2, r25	; 0x02
   15790:	a3 83       	std	Z+3, r26	; 0x03
   15792:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15796:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1579a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1579e:	85 81       	ldd	r24, Z+5	; 0x05
   157a0:	90 e0       	ldi	r25, 0x00	; 0
   157a2:	aa de       	rcall	.-684    	; 0x154f8 <SS80_Channel_Independent_Clear>
   157a4:	44 c0       	rjmp	.+136    	; 0x1582e <SS80_Transparent_State+0x210>
   157a6:	29 30       	cpi	r18, 0x09	; 9
   157a8:	31 05       	cpc	r19, r1
   157aa:	b1 f4       	brne	.+44     	; 0x157d8 <SS80_Transparent_State+0x1ba>
   157ac:	85 ff       	sbrs	r24, 5
   157ae:	12 c0       	rjmp	.+36     	; 0x157d4 <SS80_Transparent_State+0x1b6>
   157b0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   157b4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   157b8:	85 81       	ldd	r24, Z+5	; 0x05
   157ba:	90 e0       	ldi	r25, 0x00	; 0
   157bc:	ed b7       	in	r30, 0x3d	; 61
   157be:	fe b7       	in	r31, 0x3e	; 62
   157c0:	95 83       	std	Z+5, r25	; 0x05
   157c2:	84 83       	std	Z+4, r24	; 0x04
   157c4:	85 eb       	ldi	r24, 0xB5	; 181
   157c6:	9f e1       	ldi	r25, 0x1F	; 31
   157c8:	a0 e0       	ldi	r26, 0x00	; 0
   157ca:	81 83       	std	Z+1, r24	; 0x01
   157cc:	92 83       	std	Z+2, r25	; 0x02
   157ce:	a3 83       	std	Z+3, r26	; 0x03
   157d0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   157d4:	13 df       	rcall	.-474    	; 0x155fc <SS80_Cancel>
   157d6:	2b c0       	rjmp	.+86     	; 0x1582e <SS80_Transparent_State+0x210>
   157d8:	80 ff       	sbrs	r24, 0
   157da:	22 c0       	rjmp	.+68     	; 0x15820 <SS80_Transparent_State+0x202>
   157dc:	ed b7       	in	r30, 0x3d	; 61
   157de:	fe b7       	in	r31, 0x3e	; 62
   157e0:	35 83       	std	Z+5, r19	; 0x05
   157e2:	24 83       	std	Z+4, r18	; 0x04
   157e4:	85 e9       	ldi	r24, 0x95	; 149
   157e6:	9f e1       	ldi	r25, 0x1F	; 31
   157e8:	a0 e0       	ldi	r26, 0x00	; 0
   157ea:	81 83       	std	Z+1, r24	; 0x01
   157ec:	92 83       	std	Z+2, r25	; 0x02
   157ee:	a3 83       	std	Z+3, r26	; 0x03
   157f0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   157f4:	86 01       	movw	r16, r12
   157f6:	0e 15       	cp	r16, r14
   157f8:	1f 05       	cpc	r17, r15
   157fa:	91 f0       	breq	.+36     	; 0x15820 <SS80_Transparent_State+0x202>
   157fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15800:	80 ff       	sbrs	r24, 0
   15802:	0e c0       	rjmp	.+28     	; 0x15820 <SS80_Transparent_State+0x202>
   15804:	ed b7       	in	r30, 0x3d	; 61
   15806:	fe b7       	in	r31, 0x3e	; 62
   15808:	f7 82       	std	Z+7, r15	; 0x07
   1580a:	e6 82       	std	Z+6, r14	; 0x06
   1580c:	15 83       	std	Z+5, r17	; 0x05
   1580e:	04 83       	std	Z+4, r16	; 0x04
   15810:	89 e5       	ldi	r24, 0x59	; 89
   15812:	9f e1       	ldi	r25, 0x1F	; 31
   15814:	a0 e0       	ldi	r26, 0x00	; 0
   15816:	81 83       	std	Z+1, r24	; 0x01
   15818:	92 83       	std	Z+2, r25	; 0x02
   1581a:	a3 83       	std	Z+3, r26	; 0x03
   1581c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15820:	88 85       	ldd	r24, Y+8	; 0x08
   15822:	99 85       	ldd	r25, Y+9	; 0x09
   15824:	88 27       	eor	r24, r24
   15826:	90 7d       	andi	r25, 0xD0	; 208
   15828:	02 c0       	rjmp	.+4      	; 0x1582e <SS80_Transparent_State+0x210>
   1582a:	80 e0       	ldi	r24, 0x00	; 0
   1582c:	90 e0       	ldi	r25, 0x00	; 0
   1582e:	29 96       	adiw	r28, 0x09	; 9
   15830:	ea e0       	ldi	r30, 0x0A	; 10
   15832:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

00015836 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15836:	a6 e0       	ldi	r26, 0x06	; 6
   15838:	b0 e0       	ldi	r27, 0x00	; 0
   1583a:	e1 e2       	ldi	r30, 0x21	; 33
   1583c:	fc ea       	ldi	r31, 0xAC	; 172
   1583e:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15842:	80 e0       	ldi	r24, 0x00	; 0
   15844:	91 e0       	ldi	r25, 0x01	; 1
   15846:	9d 83       	std	Y+5, r25	; 0x05
   15848:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   1584a:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1584e:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15852:	81 e0       	ldi	r24, 0x01	; 1
   15854:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15856:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15858:	ae 01       	movw	r20, r28
   1585a:	4c 5f       	subi	r20, 0xFC	; 252
   1585c:	5f 4f       	sbci	r21, 0xFF	; 255
   1585e:	61 e0       	ldi	r22, 0x01	; 1
   15860:	70 e0       	ldi	r23, 0x00	; 0
   15862:	ce 01       	movw	r24, r28
   15864:	06 96       	adiw	r24, 0x06	; 6
   15866:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   1586a:	01 97       	sbiw	r24, 0x01	; 1
   1586c:	99 f0       	breq	.+38     	; 0x15894 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   1586e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15872:	80 ff       	sbrs	r24, 0
   15874:	0a c0       	rjmp	.+20     	; 0x1588a <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15876:	87 ea       	ldi	r24, 0xA7	; 167
   15878:	9e e1       	ldi	r25, 0x1E	; 30
   1587a:	a0 e0       	ldi	r26, 0x00	; 0
   1587c:	ed b7       	in	r30, 0x3d	; 61
   1587e:	fe b7       	in	r31, 0x3e	; 62
   15880:	81 83       	std	Z+1, r24	; 0x01
   15882:	92 83       	std	Z+2, r25	; 0x02
   15884:	a3 83       	std	Z+3, r26	; 0x03
   15886:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(status & ERROR_MASK);
   1588a:	8c 81       	ldd	r24, Y+4	; 0x04
   1588c:	9d 81       	ldd	r25, Y+5	; 0x05
   1588e:	88 27       	eor	r24, r24
   15890:	90 7d       	andi	r25, 0xD0	; 208
   15892:	07 c0       	rjmp	.+14     	; 0x158a2 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15894:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15898:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1589c:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   1589e:	80 e0       	ldi	r24, 0x00	; 0
   158a0:	90 e0       	ldi	r25, 0x00	; 0
}
   158a2:	26 96       	adiw	r28, 0x06	; 6
   158a4:	e2 e0       	ldi	r30, 0x02	; 2
   158a6:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000158aa <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   158aa:	a7 e1       	ldi	r26, 0x17	; 23
   158ac:	b0 e0       	ldi	r27, 0x00	; 0
   158ae:	eb e5       	ldi	r30, 0x5B	; 91
   158b0:	fc ea       	ldi	r31, 0xAC	; 172
   158b2:	0c 94 ee e2 	jmp	0x1c5dc	; 0x1c5dc <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   158b6:	60 91 66 19 	lds	r22, 0x1966	; 0x801966 <SS80s>
   158ba:	70 91 67 19 	lds	r23, 0x1967	; 0x801967 <SS80s+0x1>
   158be:	fb 01       	movw	r30, r22
   158c0:	27 81       	ldd	r18, Z+7	; 0x07
   158c2:	30 85       	ldd	r19, Z+8	; 0x08
   158c4:	41 85       	ldd	r20, Z+9	; 0x09
   158c6:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   158c8:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <SS80p>
   158cc:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <SS80p+0x1>
   158d0:	fc 01       	movw	r30, r24
   158d2:	a0 89       	ldd	r26, Z+16	; 0x10
   158d4:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   158d6:	fb 01       	movw	r30, r22
   158d8:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   158da:	1d 86       	std	Y+13, r1	; 0x0d
   158dc:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   158de:	54 98       	cbi	0x0a, 4	; 10
   158e0:	4c 99       	sbic	0x09, 4	; 9
   158e2:	03 c0       	rjmp	.+6      	; 0x158ea <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   158e4:	80 e0       	ldi	r24, 0x00	; 0
   158e6:	90 e1       	ldi	r25, 0x10	; 16
   158e8:	3e c1       	rjmp	.+636    	; 0x15b66 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   158ea:	0e 94 cd e2 	call	0x1c59a	; 0x1c59a <__muluhisi3>
   158ee:	4b 01       	movw	r8, r22
   158f0:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   158f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158f6:	85 ff       	sbrs	r24, 5
   158f8:	1a c0       	rjmp	.+52     	; 0x1592e <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   158fa:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   158fe:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15902:	83 85       	ldd	r24, Z+11	; 0x0b
   15904:	94 85       	ldd	r25, Z+12	; 0x0c
   15906:	a5 85       	ldd	r26, Z+13	; 0x0d
   15908:	b6 85       	ldd	r27, Z+14	; 0x0e
   1590a:	ed b7       	in	r30, 0x3d	; 61
   1590c:	fe b7       	in	r31, 0x3e	; 62
   1590e:	80 87       	std	Z+8, r24	; 0x08
   15910:	91 87       	std	Z+9, r25	; 0x09
   15912:	a2 87       	std	Z+10, r26	; 0x0a
   15914:	b3 87       	std	Z+11, r27	; 0x0b
   15916:	84 82       	std	Z+4, r8	; 0x04
   15918:	95 82       	std	Z+5, r9	; 0x05
   1591a:	a6 82       	std	Z+6, r10	; 0x06
   1591c:	b7 82       	std	Z+7, r11	; 0x07
   1591e:	81 e8       	ldi	r24, 0x81	; 129
   15920:	95 e2       	ldi	r25, 0x25	; 37
   15922:	a0 e0       	ldi	r26, 0x00	; 0
   15924:	81 83       	std	Z+1, r24	; 0x01
   15926:	92 83       	std	Z+2, r25	; 0x02
   15928:	a3 83       	std	Z+3, r26	; 0x03
   1592a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   1592e:	2b db       	rcall	.-2474   	; 0x14f86 <SS80_cmd_seek>
   15930:	89 2b       	or	r24, r25
   15932:	09 f0       	breq	.+2      	; 0x15936 <SS80_locate_and_read+0x8c>
   15934:	ae c0       	rjmp	.+348    	; 0x15a92 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15936:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   1593a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   1593e:	43 84       	ldd	r4, Z+11	; 0x0b
   15940:	54 84       	ldd	r5, Z+12	; 0x0c
   15942:	65 84       	ldd	r6, Z+13	; 0x0d
   15944:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15946:	1e 86       	std	Y+14, r1	; 0x0e
   15948:	1f 86       	std	Y+15, r1	; 0x0f
   1594a:	18 8a       	std	Y+16, r1	; 0x10
   1594c:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1594e:	83 e6       	ldi	r24, 0x63	; 99
   15950:	95 e2       	ldi	r25, 0x25	; 37
   15952:	9c 01       	movw	r18, r24
   15954:	40 e0       	ldi	r20, 0x00	; 0
   15956:	2a 8b       	std	Y+18, r18	; 0x12
   15958:	3b 8b       	std	Y+19, r19	; 0x13
   1595a:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   1595c:	33 24       	eor	r3, r3
   1595e:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15960:	82 e3       	ldi	r24, 0x32	; 50
   15962:	95 e2       	ldi	r25, 0x25	; 37
   15964:	9c 01       	movw	r18, r24
   15966:	40 e0       	ldi	r20, 0x00	; 0
   15968:	2d 8b       	std	Y+21, r18	; 0x15
   1596a:	3e 8b       	std	Y+22, r19	; 0x16
   1596c:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   1596e:	34 c0       	rjmp	.+104    	; 0x159d8 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15970:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15972:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   15976:	ae 01       	movw	r20, r28
   15978:	44 5f       	subi	r20, 0xF4	; 244
   1597a:	5f 4f       	sbci	r21, 0xFF	; 255
   1597c:	b6 01       	movw	r22, r12
   1597e:	8a ee       	ldi	r24, 0xEA	; 234
   15980:	9c e1       	ldi	r25, 0x1C	; 28
   15982:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   15986:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15988:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1598c:	87 ff       	sbrs	r24, 7
   1598e:	04 c0       	rjmp	.+8      	; 0x15998 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   15990:	89 ea       	ldi	r24, 0xA9	; 169
   15992:	90 e1       	ldi	r25, 0x10	; 16
   15994:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15998:	c0 16       	cp	r12, r16
   1599a:	d1 06       	cpc	r13, r17
   1599c:	09 f0       	breq	.+2      	; 0x159a0 <SS80_locate_and_read+0xf6>
   1599e:	82 c0       	rjmp	.+260    	; 0x15aa4 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   159a0:	0d 2c       	mov	r0, r13
   159a2:	00 0c       	add	r0, r0
   159a4:	ee 08       	sbc	r14, r14
   159a6:	ff 08       	sbc	r15, r15
   159a8:	8c 0c       	add	r8, r12
   159aa:	9d 1c       	adc	r9, r13
   159ac:	ae 1c       	adc	r10, r14
   159ae:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   159b0:	01 2e       	mov	r0, r17
   159b2:	00 0c       	add	r0, r0
   159b4:	22 0b       	sbc	r18, r18
   159b6:	33 0b       	sbc	r19, r19
   159b8:	8e 85       	ldd	r24, Y+14	; 0x0e
   159ba:	9f 85       	ldd	r25, Y+15	; 0x0f
   159bc:	a8 89       	ldd	r26, Y+16	; 0x10
   159be:	b9 89       	ldd	r27, Y+17	; 0x11
   159c0:	80 0f       	add	r24, r16
   159c2:	91 1f       	adc	r25, r17
   159c4:	a2 1f       	adc	r26, r18
   159c6:	b3 1f       	adc	r27, r19
   159c8:	8e 87       	std	Y+14, r24	; 0x0e
   159ca:	9f 87       	std	Y+15, r25	; 0x0f
   159cc:	a8 8b       	std	Y+16, r26	; 0x10
   159ce:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   159d0:	40 1a       	sub	r4, r16
   159d2:	51 0a       	sbc	r5, r17
   159d4:	62 0a       	sbc	r6, r18
   159d6:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   159d8:	41 14       	cp	r4, r1
   159da:	51 04       	cpc	r5, r1
   159dc:	61 04       	cpc	r6, r1
   159de:	71 04       	cpc	r7, r1
   159e0:	09 f4       	brne	.+2      	; 0x159e4 <SS80_locate_and_read+0x13a>
   159e2:	92 c0       	rjmp	.+292    	; 0x15b08 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   159e4:	54 98       	cbi	0x0a, 4	; 10
   159e6:	4c 9b       	sbis	0x09, 4	; 9
   159e8:	7d cf       	rjmp	.-262    	; 0x158e4 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   159ea:	31 e0       	ldi	r19, 0x01	; 1
   159ec:	43 16       	cp	r4, r19
   159ee:	53 06       	cpc	r5, r19
   159f0:	61 04       	cpc	r6, r1
   159f2:	71 04       	cpc	r7, r1
   159f4:	08 f4       	brcc	.+2      	; 0x159f8 <SS80_locate_and_read+0x14e>
   159f6:	4f c0       	rjmp	.+158    	; 0x15a96 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   159f8:	1d 86       	std	Y+13, r1	; 0x0d
   159fa:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   159fc:	c1 2c       	mov	r12, r1
   159fe:	dd 24       	eor	r13, r13
   15a00:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a06:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15a08:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15a0c:	e0 90 66 19 	lds	r14, 0x1966	; 0x801966 <SS80s>
   15a10:	f0 90 67 19 	lds	r15, 0x1967	; 0x801967 <SS80s+0x1>
   15a14:	43 e0       	ldi	r20, 0x03	; 3
   15a16:	e4 0e       	add	r14, r20
   15a18:	f1 1c       	adc	r15, r1
   15a1a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15a1e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15a22:	86 01       	movw	r16, r12
   15a24:	2a ee       	ldi	r18, 0xEA	; 234
   15a26:	3c e1       	ldi	r19, 0x1C	; 28
   15a28:	b5 01       	movw	r22, r10
   15a2a:	a4 01       	movw	r20, r8
   15a2c:	82 81       	ldd	r24, Z+2	; 0x02
   15a2e:	93 81       	ldd	r25, Z+3	; 0x03
   15a30:	0e 94 e9 82 	call	0x105d2	; 0x105d2 <dbf_open_read>
   15a34:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15a36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a3a:	86 ff       	sbrs	r24, 6
   15a3c:	04 c0       	rjmp	.+8      	; 0x15a46 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15a3e:	8e e9       	ldi	r24, 0x9E	; 158
   15a40:	90 e1       	ldi	r25, 0x10	; 16
   15a42:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15a46:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a4a:	85 ff       	sbrs	r24, 5
   15a4c:	0c c0       	rjmp	.+24     	; 0x15a66 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15a4e:	ed b7       	in	r30, 0x3d	; 61
   15a50:	fe b7       	in	r31, 0x3e	; 62
   15a52:	15 83       	std	Z+5, r17	; 0x05
   15a54:	04 83       	std	Z+4, r16	; 0x04
   15a56:	2a 89       	ldd	r18, Y+18	; 0x12
   15a58:	3b 89       	ldd	r19, Y+19	; 0x13
   15a5a:	4c 89       	ldd	r20, Y+20	; 0x14
   15a5c:	21 83       	std	Z+1, r18	; 0x01
   15a5e:	32 83       	std	Z+2, r19	; 0x02
   15a60:	43 83       	std	Z+3, r20	; 0x03
   15a62:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15a66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15a6a:	17 ff       	sbrs	r17, 7
   15a6c:	81 cf       	rjmp	.-254    	; 0x15970 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15a6e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15a72:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15a76:	91 e0       	ldi	r25, 0x01	; 1
   15a78:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15a7a:	80 ff       	sbrs	r24, 0
   15a7c:	0a c0       	rjmp	.+20     	; 0x15a92 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15a7e:	8b e4       	ldi	r24, 0x4B	; 75
   15a80:	95 e2       	ldi	r25, 0x25	; 37
   15a82:	a0 e0       	ldi	r26, 0x00	; 0
   15a84:	ed b7       	in	r30, 0x3d	; 61
   15a86:	fe b7       	in	r31, 0x3e	; 62
   15a88:	81 83       	std	Z+1, r24	; 0x01
   15a8a:	92 83       	std	Z+2, r25	; 0x02
   15a8c:	a3 83       	std	Z+3, r26	; 0x03
   15a8e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            return( SS80_error_return() );
   15a92:	d1 de       	rcall	.-606    	; 0x15836 <SS80_error_return>
   15a94:	68 c0       	rjmp	.+208    	; 0x15b66 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15a96:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15a98:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a9a:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a9c:	91 60       	ori	r25, 0x01	; 1
   15a9e:	9d 87       	std	Y+13, r25	; 0x0d
   15aa0:	8c 87       	std	Y+12, r24	; 0x0c
   15aa2:	af cf       	rjmp	.-162    	; 0x15a02 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15aa4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15aa8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15aac:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15aae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ab2:	80 ff       	sbrs	r24, 0
   15ab4:	0a c0       	rjmp	.+20     	; 0x15aca <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15ab6:	2d 89       	ldd	r18, Y+21	; 0x15
   15ab8:	3e 89       	ldd	r19, Y+22	; 0x16
   15aba:	4f 89       	ldd	r20, Y+23	; 0x17
   15abc:	ed b7       	in	r30, 0x3d	; 61
   15abe:	fe b7       	in	r31, 0x3e	; 62
   15ac0:	21 83       	std	Z+1, r18	; 0x01
   15ac2:	32 83       	std	Z+2, r19	; 0x02
   15ac4:	43 83       	std	Z+3, r20	; 0x03
   15ac6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            if(status & ERROR_MASK)
   15aca:	8c 85       	ldd	r24, Y+12	; 0x0c
   15acc:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ace:	88 27       	eor	r24, r24
   15ad0:	90 7d       	andi	r25, 0xD0	; 208
   15ad2:	89 2b       	or	r24, r25
   15ad4:	09 f4       	brne	.+2      	; 0x15ad8 <SS80_locate_and_read+0x22e>
   15ad6:	64 cf       	rjmp	.-312    	; 0x159a0 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15ad8:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15adc:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15ae0:	83 81       	ldd	r24, Z+3	; 0x03
   15ae2:	94 81       	ldd	r25, Z+4	; 0x04
   15ae4:	80 62       	ori	r24, 0x20	; 32
   15ae6:	94 83       	std	Z+4, r25	; 0x04
   15ae8:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15aea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aee:	80 ff       	sbrs	r24, 0
   15af0:	21 c0       	rjmp	.+66     	; 0x15b34 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15af2:	8d e0       	ldi	r24, 0x0D	; 13
   15af4:	95 e2       	ldi	r25, 0x25	; 37
   15af6:	a0 e0       	ldi	r26, 0x00	; 0
   15af8:	ed b7       	in	r30, 0x3d	; 61
   15afa:	fe b7       	in	r31, 0x3e	; 62
   15afc:	81 83       	std	Z+1, r24	; 0x01
   15afe:	92 83       	std	Z+2, r25	; 0x02
   15b00:	a3 83       	std	Z+3, r26	; 0x03
   15b02:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15b06:	16 c0       	rjmp	.+44     	; 0x15b34 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b08:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b0c:	85 ff       	sbrs	r24, 5
   15b0e:	12 c0       	rjmp	.+36     	; 0x15b34 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15b10:	8e 85       	ldd	r24, Y+14	; 0x0e
   15b12:	9f 85       	ldd	r25, Y+15	; 0x0f
   15b14:	a8 89       	ldd	r26, Y+16	; 0x10
   15b16:	b9 89       	ldd	r27, Y+17	; 0x11
   15b18:	ed b7       	in	r30, 0x3d	; 61
   15b1a:	fe b7       	in	r31, 0x3e	; 62
   15b1c:	84 83       	std	Z+4, r24	; 0x04
   15b1e:	95 83       	std	Z+5, r25	; 0x05
   15b20:	a6 83       	std	Z+6, r26	; 0x06
   15b22:	b7 83       	std	Z+7, r27	; 0x07
   15b24:	85 ee       	ldi	r24, 0xE5	; 229
   15b26:	94 e2       	ldi	r25, 0x24	; 36
   15b28:	a0 e0       	ldi	r26, 0x00	; 0
   15b2a:	81 83       	std	Z+1, r24	; 0x01
   15b2c:	92 83       	std	Z+2, r25	; 0x02
   15b2e:	a3 83       	std	Z+3, r26	; 0x03
   15b30:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15b34:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80s>
   15b38:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15b3c:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15b40:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15b44:	20 89       	ldd	r18, Z+16	; 0x10
   15b46:	31 89       	ldd	r19, Z+17	; 0x11
   15b48:	40 e0       	ldi	r20, 0x00	; 0
   15b4a:	50 e0       	ldi	r21, 0x00	; 0
   15b4c:	c5 01       	movw	r24, r10
   15b4e:	b4 01       	movw	r22, r8
   15b50:	0e 94 80 e2 	call	0x1c500	; 0x1c500 <__udivmodsi4>
   15b54:	f8 01       	movw	r30, r16
   15b56:	27 83       	std	Z+7, r18	; 0x07
   15b58:	30 87       	std	Z+8, r19	; 0x08
   15b5a:	41 87       	std	Z+9, r20	; 0x09
   15b5c:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15b5e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b60:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b62:	88 27       	eor	r24, r24
   15b64:	90 7d       	andi	r25, 0xD0	; 208
}
   15b66:	67 96       	adiw	r28, 0x17	; 23
   15b68:	e1 e1       	ldi	r30, 0x11	; 17
   15b6a:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__epilogue_restores__+0x2>

00015b6e <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15b6e:	cf 93       	push	r28
   15b70:	df 93       	push	r29
   15b72:	00 d0       	rcall	.+0      	; 0x15b74 <SS80_Execute_State+0x6>
   15b74:	00 d0       	rcall	.+0      	; 0x15b76 <SS80_Execute_State+0x8>
   15b76:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15b78:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15b7c:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15b80:	81 81       	ldd	r24, Z+1	; 0x01
   15b82:	90 e0       	ldi	r25, 0x00	; 0
   15b84:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
    switch(SS80s->estate)
   15b88:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15b8c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15b90:	80 81       	ld	r24, Z
   15b92:	91 81       	ldd	r25, Z+1	; 0x01
   15b94:	82 30       	cpi	r24, 0x02	; 2
   15b96:	91 05       	cpc	r25, r1
   15b98:	89 f0       	breq	.+34     	; 0x15bbc <SS80_Execute_State+0x4e>
   15b9a:	3c f4       	brge	.+14     	; 0x15baa <SS80_Execute_State+0x3c>
   15b9c:	00 97       	sbiw	r24, 0x00	; 0
   15b9e:	81 f1       	breq	.+96     	; 0x15c00 <SS80_Execute_State+0x92>
   15ba0:	81 30       	cpi	r24, 0x01	; 1
   15ba2:	91 05       	cpc	r25, r1
   15ba4:	b9 f4       	brne	.+46     	; 0x15bd4 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15ba6:	81 de       	rcall	.-766    	; 0x158aa <SS80_locate_and_read>
   15ba8:	0d c0       	rjmp	.+26     	; 0x15bc4 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15baa:	83 30       	cpi	r24, 0x03	; 3
   15bac:	91 05       	cpc	r25, r1
   15bae:	41 f0       	breq	.+16     	; 0x15bc0 <SS80_Execute_State+0x52>
   15bb0:	84 30       	cpi	r24, 0x04	; 4
   15bb2:	91 05       	cpc	r25, r1
   15bb4:	79 f4       	brne	.+30     	; 0x15bd4 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15bb6:	0e 94 8c a4 	call	0x14918	; 0x14918 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15bba:	04 c0       	rjmp	.+8      	; 0x15bc4 <SS80_Execute_State+0x56>
   15bbc:	59 da       	rcall	.-2894   	; 0x15070 <SS80_locate_and_write>
   15bbe:	02 c0       	rjmp	.+4      	; 0x15bc4 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15bc0:	0e 94 0b a4 	call	0x14816	; 0x14816 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15bc4:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15bc6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bca:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bce:	11 82       	std	Z+1, r1	; 0x01
   15bd0:	10 82       	st	Z, r1
            break;
   15bd2:	18 c0       	rjmp	.+48     	; 0x15c04 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15bd4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15bd8:	20 ff       	sbrs	r18, 0
   15bda:	0c c0       	rjmp	.+24     	; 0x15bf4 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15bdc:	ed b7       	in	r30, 0x3d	; 61
   15bde:	fe b7       	in	r31, 0x3e	; 62
   15be0:	95 83       	std	Z+5, r25	; 0x05
   15be2:	84 83       	std	Z+4, r24	; 0x04
   15be4:	89 ea       	ldi	r24, 0xA9	; 169
   15be6:	95 e2       	ldi	r25, 0x25	; 37
   15be8:	a0 e0       	ldi	r26, 0x00	; 0
   15bea:	81 83       	std	Z+1, r24	; 0x01
   15bec:	92 83       	std	Z+2, r25	; 0x02
   15bee:	a3 83       	std	Z+3, r26	; 0x03
   15bf0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            SS80s->estate = EXEC_IDLE;
   15bf4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80s>
   15bf8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80s+0x1>
   15bfc:	11 82       	std	Z+1, r1	; 0x01
   15bfe:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15c00:	c0 e0       	ldi	r28, 0x00	; 0
   15c02:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15c04:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15c08:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15c0c:	81 81       	ldd	r24, Z+1	; 0x01
   15c0e:	90 e0       	ldi	r25, 0x00	; 0
   15c10:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
    return(ret);
}
   15c14:	ce 01       	movw	r24, r28
   15c16:	cd b7       	in	r28, 0x3d	; 61
   15c18:	de b7       	in	r29, 0x3e	; 62
   15c1a:	25 96       	adiw	r28, 0x05	; 5
   15c1c:	e2 e0       	ldi	r30, 0x02	; 2
   15c1e:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00015c22 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15c22:	a9 e0       	ldi	r26, 0x09	; 9
   15c24:	b0 e0       	ldi	r27, 0x00	; 0
   15c26:	e7 e1       	ldi	r30, 0x17	; 23
   15c28:	fe ea       	ldi	r31, 0xAE	; 174
   15c2a:	0c 94 fc e2 	jmp	0x1c5f8	; 0x1c5f8 <__prologue_saves__+0x1e>
   15c2e:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15c30:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   15c34:	90 e0       	ldi	r25, 0x00	; 0
   15c36:	0e 94 b2 8a 	call	0x11564	; 0x11564 <SS80_is_MTA>
   15c3a:	89 2b       	or	r24, r25
   15c3c:	19 f0       	breq	.+6      	; 0x15c44 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15c3e:	15 36       	cpi	r17, 0x65	; 101
   15c40:	19 f5       	brne	.+70     	; 0x15c88 <SS80_COMMANDS+0x66>
   15c42:	09 c0       	rjmp	.+18     	; 0x15c56 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15c44:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15c48:	90 e0       	ldi	r25, 0x00	; 0
   15c4a:	0e 94 a1 8a 	call	0x11542	; 0x11542 <SS80_is_MLA>
   15c4e:	ec 01       	movw	r28, r24
   15c50:	89 2b       	or	r24, r25
   15c52:	a9 f7       	brne	.-22     	; 0x15c3e <SS80_COMMANDS+0x1c>
   15c54:	ad c0       	rjmp	.+346    	; 0x15db0 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15c56:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15c5a:	90 e0       	ldi	r25, 0x00	; 0
   15c5c:	0e 94 a1 8a 	call	0x11542	; 0x11542 <SS80_is_MLA>
   15c60:	89 2b       	or	r24, r25
   15c62:	09 f4       	brne	.+2      	; 0x15c66 <SS80_COMMANDS+0x44>
   15c64:	a2 c0       	rjmp	.+324    	; 0x15daa <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c6a:	85 ff       	sbrs	r24, 5
   15c6c:	0a c0       	rjmp	.+20     	; 0x15c82 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15c6e:	81 e9       	ldi	r24, 0x91	; 145
   15c70:	9e e1       	ldi	r25, 0x1E	; 30
   15c72:	a0 e0       	ldi	r26, 0x00	; 0
   15c74:	ed b7       	in	r30, 0x3d	; 61
   15c76:	fe b7       	in	r31, 0x3e	; 62
   15c78:	81 83       	std	Z+1, r24	; 0x01
   15c7a:	92 83       	std	Z+2, r25	; 0x02
   15c7c:	a3 83       	std	Z+3, r26	; 0x03
   15c7e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return ( SS80_Command_State() );
   15c82:	0e 94 4c a5 	call	0x14a98	; 0x14a98 <SS80_Command_State>
   15c86:	73 c0       	rjmp	.+230    	; 0x15d6e <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15c88:	1e 36       	cpi	r17, 0x6E	; 110
   15c8a:	01 f5       	brne	.+64     	; 0x15ccc <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15c8c:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15c90:	90 e0       	ldi	r25, 0x00	; 0
   15c92:	0e 94 a1 8a 	call	0x11542	; 0x11542 <SS80_is_MLA>
   15c96:	89 2b       	or	r24, r25
   15c98:	79 f0       	breq	.+30     	; 0x15cb8 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c9e:	85 ff       	sbrs	r24, 5
   15ca0:	13 c0       	rjmp	.+38     	; 0x15cc8 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15ca2:	8b e7       	ldi	r24, 0x7B	; 123
   15ca4:	9e e1       	ldi	r25, 0x1E	; 30
   15ca6:	a0 e0       	ldi	r26, 0x00	; 0
   15ca8:	ed b7       	in	r30, 0x3d	; 61
   15caa:	fe b7       	in	r31, 0x3e	; 62
   15cac:	81 83       	std	Z+1, r24	; 0x01
   15cae:	92 83       	std	Z+2, r25	; 0x02
   15cb0:	a3 83       	std	Z+3, r26	; 0x03
   15cb2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15cb6:	08 c0       	rjmp	.+16     	; 0x15cc8 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15cb8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   15cbc:	90 e0       	ldi	r25, 0x00	; 0
   15cbe:	0e 94 b2 8a 	call	0x11564	; 0x11564 <SS80_is_MTA>
   15cc2:	89 2b       	or	r24, r25
   15cc4:	51 f7       	brne	.-44     	; 0x15c9a <SS80_COMMANDS+0x78>
   15cc6:	71 c0       	rjmp	.+226    	; 0x15daa <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15cc8:	52 df       	rcall	.-348    	; 0x15b6e <SS80_Execute_State>
   15cca:	51 c0       	rjmp	.+162    	; 0x15d6e <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15ccc:	10 37       	cpi	r17, 0x70	; 112
   15cce:	b9 f5       	brne	.+110    	; 0x15d3e <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15cd0:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   15cd4:	90 e0       	ldi	r25, 0x00	; 0
   15cd6:	0e 94 b2 8a 	call	0x11564	; 0x11564 <SS80_is_MTA>
   15cda:	89 2b       	or	r24, r25
   15cdc:	81 f0       	breq	.+32     	; 0x15cfe <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15cde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ce2:	85 ff       	sbrs	r24, 5
   15ce4:	0a c0       	rjmp	.+20     	; 0x15cfa <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15ce6:	86 e6       	ldi	r24, 0x66	; 102
   15ce8:	9e e1       	ldi	r25, 0x1E	; 30
   15cea:	a0 e0       	ldi	r26, 0x00	; 0
   15cec:	ed b7       	in	r30, 0x3d	; 61
   15cee:	fe b7       	in	r31, 0x3e	; 62
   15cf0:	81 83       	std	Z+1, r24	; 0x01
   15cf2:	92 83       	std	Z+2, r25	; 0x02
   15cf4:	a3 83       	std	Z+3, r26	; 0x03
   15cf6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return( SS80_Report() );
   15cfa:	4c db       	rcall	.-2408   	; 0x15394 <SS80_Report>
   15cfc:	38 c0       	rjmp	.+112    	; 0x15d6e <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15cfe:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15d02:	90 e0       	ldi	r25, 0x00	; 0
   15d04:	0e 94 a1 8a 	call	0x11542	; 0x11542 <SS80_is_MLA>
   15d08:	89 2b       	or	r24, r25
   15d0a:	09 f4       	brne	.+2      	; 0x15d0e <SS80_COMMANDS+0xec>
   15d0c:	4e c0       	rjmp	.+156    	; 0x15daa <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d12:	85 ff       	sbrs	r24, 5
   15d14:	0a c0       	rjmp	.+20     	; 0x15d2a <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15d16:	87 e5       	ldi	r24, 0x57	; 87
   15d18:	9e e1       	ldi	r25, 0x1E	; 30
   15d1a:	a0 e0       	ldi	r26, 0x00	; 0
   15d1c:	ed b7       	in	r30, 0x3d	; 61
   15d1e:	fe b7       	in	r31, 0x3e	; 62
   15d20:	81 83       	std	Z+1, r24	; 0x01
   15d22:	92 83       	std	Z+2, r25	; 0x02
   15d24:	a3 83       	std	Z+3, r26	; 0x03
   15d26:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15d2a:	e0 91 68 19 	lds	r30, 0x1968	; 0x801968 <SS80p>
   15d2e:	f0 91 69 19 	lds	r31, 0x1969	; 0x801969 <SS80p+0x1>
   15d32:	81 81       	ldd	r24, Z+1	; 0x01
   15d34:	90 e0       	ldi	r25, 0x00	; 0
   15d36:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15d3a:	1d dc       	rcall	.-1990   	; 0x15576 <SS80_Amigo_Clear>
   15d3c:	18 c0       	rjmp	.+48     	; 0x15d6e <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15d3e:	12 37       	cpi	r17, 0x72	; 114
   15d40:	c1 f4       	brne	.+48     	; 0x15d72 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15d42:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15d46:	90 e0       	ldi	r25, 0x00	; 0
   15d48:	0e 94 a1 8a 	call	0x11542	; 0x11542 <SS80_is_MLA>
   15d4c:	89 2b       	or	r24, r25
   15d4e:	89 f0       	breq	.+34     	; 0x15d72 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d54:	85 ff       	sbrs	r24, 5
   15d56:	0a c0       	rjmp	.+20     	; 0x15d6c <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15d58:	83 e4       	ldi	r24, 0x43	; 67
   15d5a:	9e e1       	ldi	r25, 0x1E	; 30
   15d5c:	a0 e0       	ldi	r26, 0x00	; 0
   15d5e:	ed b7       	in	r30, 0x3d	; 61
   15d60:	fe b7       	in	r31, 0x3e	; 62
   15d62:	81 83       	std	Z+1, r24	; 0x01
   15d64:	92 83       	std	Z+2, r25	; 0x02
   15d66:	a3 83       	std	Z+3, r26	; 0x03
   15d68:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return( SS80_Transparent_State() );
   15d6c:	58 dc       	rcall	.-1872   	; 0x1561e <SS80_Transparent_State>
   15d6e:	ec 01       	movw	r28, r24
   15d70:	3b c0       	rjmp	.+118    	; 0x15de8 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15d72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d76:	80 ff       	sbrs	r24, 0
   15d78:	18 c0       	rjmp	.+48     	; 0x15daa <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15d7a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   15d7e:	90 e0       	ldi	r25, 0x00	; 0
   15d80:	ed b7       	in	r30, 0x3d	; 61
   15d82:	fe b7       	in	r31, 0x3e	; 62
   15d84:	91 87       	std	Z+9, r25	; 0x09
   15d86:	80 87       	std	Z+8, r24	; 0x08
   15d88:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15d8c:	90 e0       	ldi	r25, 0x00	; 0
   15d8e:	97 83       	std	Z+7, r25	; 0x07
   15d90:	86 83       	std	Z+6, r24	; 0x06
   15d92:	81 2f       	mov	r24, r17
   15d94:	90 e0       	ldi	r25, 0x00	; 0
   15d96:	95 83       	std	Z+5, r25	; 0x05
   15d98:	84 83       	std	Z+4, r24	; 0x04
   15d9a:	8f e0       	ldi	r24, 0x0F	; 15
   15d9c:	9e e1       	ldi	r25, 0x1E	; 30
   15d9e:	a0 e0       	ldi	r26, 0x00	; 0
   15da0:	81 83       	std	Z+1, r24	; 0x01
   15da2:	92 83       	std	Z+2, r25	; 0x02
   15da4:	a3 83       	std	Z+3, r26	; 0x03
   15da6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15daa:	c0 e0       	ldi	r28, 0x00	; 0
   15dac:	d0 e0       	ldi	r29, 0x00	; 0
   15dae:	1c c0       	rjmp	.+56     	; 0x15de8 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15db0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15db4:	80 ff       	sbrs	r24, 0
   15db6:	f9 cf       	rjmp	.-14     	; 0x15daa <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15db8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   15dbc:	90 e0       	ldi	r25, 0x00	; 0
   15dbe:	ed b7       	in	r30, 0x3d	; 61
   15dc0:	fe b7       	in	r31, 0x3e	; 62
   15dc2:	91 87       	std	Z+9, r25	; 0x09
   15dc4:	80 87       	std	Z+8, r24	; 0x08
   15dc6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   15dca:	90 e0       	ldi	r25, 0x00	; 0
   15dcc:	97 83       	std	Z+7, r25	; 0x07
   15dce:	86 83       	std	Z+6, r24	; 0x06
   15dd0:	81 2f       	mov	r24, r17
   15dd2:	90 e0       	ldi	r25, 0x00	; 0
   15dd4:	95 83       	std	Z+5, r25	; 0x05
   15dd6:	84 83       	std	Z+4, r24	; 0x04
   15dd8:	8b ed       	ldi	r24, 0xDB	; 219
   15dda:	9d e1       	ldi	r25, 0x1D	; 29
   15ddc:	a0 e0       	ldi	r26, 0x00	; 0
   15dde:	81 83       	std	Z+1, r24	; 0x01
   15de0:	92 83       	std	Z+2, r25	; 0x02
   15de2:	a3 83       	std	Z+3, r26	; 0x03
   15de4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15de8:	ce 01       	movw	r24, r28
   15dea:	cd b7       	in	r28, 0x3d	; 61
   15dec:	de b7       	in	r29, 0x3e	; 62
   15dee:	29 96       	adiw	r28, 0x09	; 9
   15df0:	e3 e0       	ldi	r30, 0x03	; 3
   15df2:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__epilogue_restores__+0x1e>

00015df6 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15df6:	cf 92       	push	r12
   15df8:	df 92       	push	r13
   15dfa:	ef 92       	push	r14
   15dfc:	0f 93       	push	r16
   15dfe:	1f 93       	push	r17
   15e00:	cf 93       	push	r28
   15e02:	df 93       	push	r29
   15e04:	00 d0       	rcall	.+0      	; 0x15e06 <amigo_overflow_check+0x10>
   15e06:	00 d0       	rcall	.+0      	; 0x15e08 <amigo_overflow_check+0x12>
   15e08:	1f 92       	push	r1
   15e0a:	ec 01       	movw	r28, r24
   15e0c:	8b 01       	movw	r16, r22
   15e0e:	80 e0       	ldi	r24, 0x00	; 0
   15e10:	90 e0       	ldi	r25, 0x00	; 0
   15e12:	23 e9       	ldi	r18, 0x93	; 147
   15e14:	3d e2       	ldi	r19, 0x2D	; 45
   15e16:	69 01       	movw	r12, r18
   15e18:	e1 2c       	mov	r14, r1
   15e1a:	2d 81       	ldd	r18, Y+5	; 0x05
   15e1c:	30 e0       	ldi	r19, 0x00	; 0
   15e1e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   15e22:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   15e26:	40 85       	ldd	r20, Z+8	; 0x08
   15e28:	51 85       	ldd	r21, Z+9	; 0x09
   15e2a:	24 17       	cp	r18, r20
   15e2c:	35 07       	cpc	r19, r21
   15e2e:	64 f1       	brlt	.+88     	; 0x15e88 <amigo_overflow_check+0x92>
   15e30:	1d 82       	std	Y+5, r1	; 0x05
   15e32:	2c 81       	ldd	r18, Y+4	; 0x04
   15e34:	2f 5f       	subi	r18, 0xFF	; 255
   15e36:	2c 83       	std	Y+4, r18	; 0x04
   15e38:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   15e3c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   15e40:	2c 81       	ldd	r18, Y+4	; 0x04
   15e42:	30 e0       	ldi	r19, 0x00	; 0
   15e44:	42 85       	ldd	r20, Z+10	; 0x0a
   15e46:	53 85       	ldd	r21, Z+11	; 0x0b
   15e48:	24 17       	cp	r18, r20
   15e4a:	35 07       	cpc	r19, r21
   15e4c:	34 f3       	brlt	.-52     	; 0x15e1a <amigo_overflow_check+0x24>
   15e4e:	1c 82       	std	Y+4, r1	; 0x04
   15e50:	2b 81       	ldd	r18, Y+3	; 0x03
   15e52:	2f 5f       	subi	r18, 0xFF	; 255
   15e54:	2b 83       	std	Y+3, r18	; 0x03
   15e56:	30 e0       	ldi	r19, 0x00	; 0
   15e58:	44 85       	ldd	r20, Z+12	; 0x0c
   15e5a:	55 85       	ldd	r21, Z+13	; 0x0d
   15e5c:	24 17       	cp	r18, r20
   15e5e:	35 07       	cpc	r19, r21
   15e60:	5c f3       	brlt	.-42     	; 0x15e38 <amigo_overflow_check+0x42>
   15e62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e66:	80 ff       	sbrs	r24, 0
   15e68:	0c c0       	rjmp	.+24     	; 0x15e82 <amigo_overflow_check+0x8c>
   15e6a:	01 15       	cp	r16, r1
   15e6c:	11 05       	cpc	r17, r1
   15e6e:	49 f0       	breq	.+18     	; 0x15e82 <amigo_overflow_check+0x8c>
   15e70:	ed b7       	in	r30, 0x3d	; 61
   15e72:	fe b7       	in	r31, 0x3e	; 62
   15e74:	15 83       	std	Z+5, r17	; 0x05
   15e76:	04 83       	std	Z+4, r16	; 0x04
   15e78:	c1 82       	std	Z+1, r12	; 0x01
   15e7a:	d2 82       	std	Z+2, r13	; 0x02
   15e7c:	e3 82       	std	Z+3, r14	; 0x03
   15e7e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15e82:	81 e0       	ldi	r24, 0x01	; 1
   15e84:	90 e0       	ldi	r25, 0x00	; 0
   15e86:	d8 cf       	rjmp	.-80     	; 0x15e38 <amigo_overflow_check+0x42>
   15e88:	0f 90       	pop	r0
   15e8a:	0f 90       	pop	r0
   15e8c:	0f 90       	pop	r0
   15e8e:	0f 90       	pop	r0
   15e90:	0f 90       	pop	r0
   15e92:	df 91       	pop	r29
   15e94:	cf 91       	pop	r28
   15e96:	1f 91       	pop	r17
   15e98:	0f 91       	pop	r16
   15e9a:	ef 90       	pop	r14
   15e9c:	df 90       	pop	r13
   15e9e:	cf 90       	pop	r12
   15ea0:	08 95       	ret

00015ea2 <amigo_chs_to_logical>:
   15ea2:	a1 e1       	ldi	r26, 0x11	; 17
   15ea4:	b0 e0       	ldi	r27, 0x00	; 0
   15ea6:	e7 e5       	ldi	r30, 0x57	; 87
   15ea8:	ff ea       	ldi	r31, 0xAF	; 175
   15eaa:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__prologue_saves__+0x8>
   15eae:	8b 01       	movw	r16, r22
   15eb0:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <AMIGOp>
   15eb4:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <AMIGOp+0x1>
   15eb8:	fb 01       	movw	r30, r22
   15eba:	40 85       	ldd	r20, Z+8	; 0x08
   15ebc:	51 85       	ldd	r21, Z+9	; 0x09
   15ebe:	fc 01       	movw	r30, r24
   15ec0:	c4 81       	ldd	r28, Z+4	; 0x04
   15ec2:	d0 e0       	ldi	r29, 0x00	; 0
   15ec4:	4c 9f       	mul	r20, r28
   15ec6:	90 01       	movw	r18, r0
   15ec8:	4d 9f       	mul	r20, r29
   15eca:	30 0d       	add	r19, r0
   15ecc:	5c 9f       	mul	r21, r28
   15ece:	30 0d       	add	r19, r0
   15ed0:	11 24       	eor	r1, r1
   15ed2:	49 01       	movw	r8, r18
   15ed4:	33 0f       	add	r19, r19
   15ed6:	aa 08       	sbc	r10, r10
   15ed8:	bb 08       	sbc	r11, r11
   15eda:	63 80       	ldd	r6, Z+3	; 0x03
   15edc:	71 2c       	mov	r7, r1
   15ede:	fb 01       	movw	r30, r22
   15ee0:	e2 84       	ldd	r14, Z+10	; 0x0a
   15ee2:	f3 84       	ldd	r15, Z+11	; 0x0b
   15ee4:	4e 9d       	mul	r20, r14
   15ee6:	d0 01       	movw	r26, r0
   15ee8:	4f 9d       	mul	r20, r15
   15eea:	b0 0d       	add	r27, r0
   15eec:	5e 9d       	mul	r21, r14
   15eee:	b0 0d       	add	r27, r0
   15ef0:	11 24       	eor	r1, r1
   15ef2:	a6 9d       	mul	r26, r6
   15ef4:	90 01       	movw	r18, r0
   15ef6:	a7 9d       	mul	r26, r7
   15ef8:	30 0d       	add	r19, r0
   15efa:	b6 9d       	mul	r27, r6
   15efc:	30 0d       	add	r19, r0
   15efe:	11 24       	eor	r1, r1
   15f00:	69 01       	movw	r12, r18
   15f02:	33 0f       	add	r19, r19
   15f04:	ee 08       	sbc	r14, r14
   15f06:	ff 08       	sbc	r15, r15
   15f08:	8c 0c       	add	r8, r12
   15f0a:	9d 1c       	adc	r9, r13
   15f0c:	ae 1c       	adc	r10, r14
   15f0e:	bf 1c       	adc	r11, r15
   15f10:	fc 01       	movw	r30, r24
   15f12:	f5 80       	ldd	r15, Z+5	; 0x05
   15f14:	a5 01       	movw	r20, r10
   15f16:	94 01       	movw	r18, r8
   15f18:	2f 0d       	add	r18, r15
   15f1a:	31 1d       	adc	r19, r1
   15f1c:	41 1d       	adc	r20, r1
   15f1e:	51 1d       	adc	r21, r1
   15f20:	fb 01       	movw	r30, r22
   15f22:	a6 81       	ldd	r26, Z+6	; 0x06
   15f24:	b7 81       	ldd	r27, Z+7	; 0x07
   15f26:	0e 94 d7 e2 	call	0x1c5ae	; 0x1c5ae <__mulshisi3>
   15f2a:	4b 01       	movw	r8, r22
   15f2c:	5c 01       	movw	r10, r24
   15f2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f32:	85 ff       	sbrs	r24, 5
   15f34:	22 c0       	rjmp	.+68     	; 0x15f7a <amigo_chs_to_logical+0xd8>
   15f36:	8f 2d       	mov	r24, r15
   15f38:	90 e0       	ldi	r25, 0x00	; 0
   15f3a:	ed b7       	in	r30, 0x3d	; 61
   15f3c:	fe b7       	in	r31, 0x3e	; 62
   15f3e:	91 8b       	std	Z+17, r25	; 0x11
   15f40:	80 8b       	std	Z+16, r24	; 0x10
   15f42:	d7 87       	std	Z+15, r29	; 0x0f
   15f44:	c6 87       	std	Z+14, r28	; 0x0e
   15f46:	75 86       	std	Z+13, r7	; 0x0d
   15f48:	64 86       	std	Z+12, r6	; 0x0c
   15f4a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   15f4e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   15f52:	81 81       	ldd	r24, Z+1	; 0x01
   15f54:	90 e0       	ldi	r25, 0x00	; 0
   15f56:	ed b7       	in	r30, 0x3d	; 61
   15f58:	fe b7       	in	r31, 0x3e	; 62
   15f5a:	93 87       	std	Z+11, r25	; 0x0b
   15f5c:	82 87       	std	Z+10, r24	; 0x0a
   15f5e:	86 82       	std	Z+6, r8	; 0x06
   15f60:	97 82       	std	Z+7, r9	; 0x07
   15f62:	a0 86       	std	Z+8, r10	; 0x08
   15f64:	b1 86       	std	Z+9, r11	; 0x09
   15f66:	15 83       	std	Z+5, r17	; 0x05
   15f68:	04 83       	std	Z+4, r16	; 0x04
   15f6a:	80 e4       	ldi	r24, 0x40	; 64
   15f6c:	9d e2       	ldi	r25, 0x2D	; 45
   15f6e:	a0 e0       	ldi	r26, 0x00	; 0
   15f70:	81 83       	std	Z+1, r24	; 0x01
   15f72:	92 83       	std	Z+2, r25	; 0x02
   15f74:	a3 83       	std	Z+3, r26	; 0x03
   15f76:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   15f7a:	c5 01       	movw	r24, r10
   15f7c:	b4 01       	movw	r22, r8
   15f7e:	cd b7       	in	r28, 0x3d	; 61
   15f80:	de b7       	in	r29, 0x3e	; 62
   15f82:	61 96       	adiw	r28, 0x11	; 17
   15f84:	ee e0       	ldi	r30, 0x0E	; 14
   15f86:	0c 94 0d e3 	jmp	0x1c61a	; 0x1c61a <__epilogue_restores__+0x8>

00015f8a <amigo_init>:
   15f8a:	ef 92       	push	r14
   15f8c:	ff 92       	push	r15
   15f8e:	0f 93       	push	r16
   15f90:	1f 93       	push	r17
   15f92:	cf 93       	push	r28
   15f94:	df 93       	push	r29
   15f96:	0d ec       	ldi	r16, 0xCD	; 205
   15f98:	10 e2       	ldi	r17, 0x20	; 32
   15f9a:	cb e0       	ldi	r28, 0x0B	; 11
   15f9c:	d0 e0       	ldi	r29, 0x00	; 0
   15f9e:	84 e0       	ldi	r24, 0x04	; 4
   15fa0:	f8 2e       	mov	r15, r24
   15fa2:	92 e0       	ldi	r25, 0x02	; 2
   15fa4:	e9 2e       	mov	r14, r25
   15fa6:	d8 01       	movw	r26, r16
   15fa8:	8c 91       	ld	r24, X
   15faa:	81 30       	cpi	r24, 0x01	; 1
   15fac:	31 f5       	brne	.+76     	; 0x15ffa <amigo_init+0x70>
   15fae:	ce 01       	movw	r24, r28
   15fb0:	0e 94 af 95 	call	0x12b5e	; 0x12b5e <set_active_device>
   15fb4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   15fb8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   15fbc:	10 82       	st	Z, r1
   15fbe:	9f 01       	movw	r18, r30
   15fc0:	27 5f       	subi	r18, 0xF7	; 247
   15fc2:	3f 4f       	sbci	r19, 0xFF	; 255
   15fc4:	d9 01       	movw	r26, r18
   15fc6:	8f 2d       	mov	r24, r15
   15fc8:	1d 92       	st	X+, r1
   15fca:	8a 95       	dec	r24
   15fcc:	e9 f7       	brne	.-6      	; 0x15fc8 <amigo_init+0x3e>
   15fce:	2c 5f       	subi	r18, 0xFC	; 252
   15fd0:	3f 4f       	sbci	r19, 0xFF	; 255
   15fd2:	d9 01       	movw	r26, r18
   15fd4:	8f 2d       	mov	r24, r15
   15fd6:	1d 92       	st	X+, r1
   15fd8:	8a 95       	dec	r24
   15fda:	e9 f7       	brne	.-6      	; 0x15fd6 <amigo_init+0x4c>
   15fdc:	11 82       	std	Z+1, r1	; 0x01
   15fde:	15 82       	std	Z+5, r1	; 0x05
   15fe0:	14 82       	std	Z+4, r1	; 0x04
   15fe2:	13 82       	std	Z+3, r1	; 0x03
   15fe4:	e6 82       	std	Z+6, r14	; 0x06
   15fe6:	10 86       	std	Z+8, r1	; 0x08
   15fe8:	17 82       	std	Z+7, r1	; 0x07
   15fea:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   15fee:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   15ff2:	81 81       	ldd	r24, Z+1	; 0x01
   15ff4:	90 e0       	ldi	r25, 0x00	; 0
   15ff6:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
   15ffa:	21 97       	sbiw	r28, 0x01	; 1
   15ffc:	0b 52       	subi	r16, 0x2B	; 43
   15ffe:	11 09       	sbc	r17, r1
   16000:	cf 3f       	cpi	r28, 0xFF	; 255
   16002:	af ef       	ldi	r26, 0xFF	; 255
   16004:	da 07       	cpc	r29, r26
   16006:	79 f6       	brne	.-98     	; 0x15fa6 <amigo_init+0x1c>
   16008:	cd b7       	in	r28, 0x3d	; 61
   1600a:	de b7       	in	r29, 0x3e	; 62
   1600c:	e6 e0       	ldi	r30, 0x06	; 6
   1600e:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00016012 <amigo_request_logical_address>:
   16012:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16016:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1601a:	15 86       	std	Z+13, r1	; 0x0d
   1601c:	83 81       	ldd	r24, Z+3	; 0x03
   1601e:	86 87       	std	Z+14, r24	; 0x0e
   16020:	84 81       	ldd	r24, Z+4	; 0x04
   16022:	87 87       	std	Z+15, r24	; 0x0f
   16024:	85 81       	ldd	r24, Z+5	; 0x05
   16026:	80 8b       	std	Z+16, r24	; 0x10
   16028:	80 e0       	ldi	r24, 0x00	; 0
   1602a:	90 e0       	ldi	r25, 0x00	; 0
   1602c:	08 95       	ret

0001602e <amigo_request_status>:
   1602e:	00 d0       	rcall	.+0      	; 0x16030 <amigo_request_status+0x2>
   16030:	1f 92       	push	r1
   16032:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16036:	85 ff       	sbrs	r24, 5
   16038:	0a c0       	rjmp	.+20     	; 0x1604e <amigo_request_status+0x20>
   1603a:	83 e1       	ldi	r24, 0x13	; 19
   1603c:	9e e2       	ldi	r25, 0x2E	; 46
   1603e:	a0 e0       	ldi	r26, 0x00	; 0
   16040:	ed b7       	in	r30, 0x3d	; 61
   16042:	fe b7       	in	r31, 0x3e	; 62
   16044:	81 83       	std	Z+1, r24	; 0x01
   16046:	92 83       	std	Z+2, r25	; 0x02
   16048:	a3 83       	std	Z+3, r26	; 0x03
   1604a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1604e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16052:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16056:	11 86       	std	Z+9, r1	; 0x09
   16058:	81 81       	ldd	r24, Z+1	; 0x01
   1605a:	82 87       	std	Z+10, r24	; 0x0a
   1605c:	8d e0       	ldi	r24, 0x0D	; 13
   1605e:	83 87       	std	Z+11, r24	; 0x0b
   16060:	14 86       	std	Z+12, r1	; 0x0c
   16062:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <mmc_wp_status>
   16066:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1606a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1606e:	89 2b       	or	r24, r25
   16070:	19 f0       	breq	.+6      	; 0x16078 <amigo_request_status+0x4a>
   16072:	84 85       	ldd	r24, Z+12	; 0x0c
   16074:	80 66       	ori	r24, 0x60	; 96
   16076:	84 87       	std	Z+12, r24	; 0x0c
   16078:	86 81       	ldd	r24, Z+6	; 0x06
   1607a:	82 30       	cpi	r24, 0x02	; 2
   1607c:	31 f4       	brne	.+12     	; 0x1608a <amigo_request_status+0x5c>
   1607e:	83 e1       	ldi	r24, 0x13	; 19
   16080:	81 87       	std	Z+9, r24	; 0x09
   16082:	84 85       	ldd	r24, Z+12	; 0x0c
   16084:	88 60       	ori	r24, 0x08	; 8
   16086:	84 87       	std	Z+12, r24	; 0x0c
   16088:	21 c0       	rjmp	.+66     	; 0x160cc <amigo_request_status+0x9e>
   1608a:	27 81       	ldd	r18, Z+7	; 0x07
   1608c:	30 85       	ldd	r19, Z+8	; 0x08
   1608e:	21 15       	cp	r18, r1
   16090:	31 05       	cpc	r19, r1
   16092:	11 f4       	brne	.+4      	; 0x16098 <amigo_request_status+0x6a>
   16094:	81 30       	cpi	r24, 0x01	; 1
   16096:	d1 f4       	brne	.+52     	; 0x160cc <amigo_request_status+0x9e>
   16098:	26 fd       	sbrc	r18, 6
   1609a:	0c c0       	rjmp	.+24     	; 0x160b4 <amigo_request_status+0x86>
   1609c:	25 ff       	sbrs	r18, 5
   1609e:	03 c0       	rjmp	.+6      	; 0x160a6 <amigo_request_status+0x78>
   160a0:	8a e0       	ldi	r24, 0x0A	; 10
   160a2:	81 87       	std	Z+9, r24	; 0x09
   160a4:	0d c0       	rjmp	.+26     	; 0x160c0 <amigo_request_status+0x92>
   160a6:	84 85       	ldd	r24, Z+12	; 0x0c
   160a8:	24 ff       	sbrs	r18, 4
   160aa:	02 c0       	rjmp	.+4      	; 0x160b0 <amigo_request_status+0x82>
   160ac:	83 60       	ori	r24, 0x03	; 3
   160ae:	07 c0       	rjmp	.+14     	; 0x160be <amigo_request_status+0x90>
   160b0:	21 ff       	sbrs	r18, 1
   160b2:	02 c0       	rjmp	.+4      	; 0x160b8 <amigo_request_status+0x8a>
   160b4:	83 e1       	ldi	r24, 0x13	; 19
   160b6:	f5 cf       	rjmp	.-22     	; 0x160a2 <amigo_request_status+0x74>
   160b8:	22 ff       	sbrs	r18, 2
   160ba:	02 c0       	rjmp	.+4      	; 0x160c0 <amigo_request_status+0x92>
   160bc:	84 60       	ori	r24, 0x04	; 4
   160be:	84 87       	std	Z+12, r24	; 0x0c
   160c0:	84 85       	ldd	r24, Z+12	; 0x0c
   160c2:	80 61       	ori	r24, 0x10	; 16
   160c4:	84 87       	std	Z+12, r24	; 0x0c
   160c6:	83 85       	ldd	r24, Z+11	; 0x0b
   160c8:	80 68       	ori	r24, 0x80	; 128
   160ca:	83 87       	std	Z+11, r24	; 0x0b
   160cc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   160d0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   160d4:	81 81       	ldd	r24, Z+1	; 0x01
   160d6:	90 e0       	ldi	r25, 0x00	; 0
   160d8:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   160dc:	80 e0       	ldi	r24, 0x00	; 0
   160de:	90 e0       	ldi	r25, 0x00	; 0
   160e0:	0f 90       	pop	r0
   160e2:	0f 90       	pop	r0
   160e4:	0f 90       	pop	r0
   160e6:	08 95       	ret

000160e8 <amigo_send_logical_address>:
   160e8:	a5 e0       	ldi	r26, 0x05	; 5
   160ea:	b0 e0       	ldi	r27, 0x00	; 0
   160ec:	ea e7       	ldi	r30, 0x7A	; 122
   160ee:	f0 eb       	ldi	r31, 0xB0	; 176
   160f0:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   160f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160f8:	85 ff       	sbrs	r24, 5
   160fa:	0a c0       	rjmp	.+20     	; 0x16110 <amigo_send_logical_address+0x28>
   160fc:	85 ef       	ldi	r24, 0xF5	; 245
   160fe:	9d e2       	ldi	r25, 0x2D	; 45
   16100:	a0 e0       	ldi	r26, 0x00	; 0
   16102:	ed b7       	in	r30, 0x3d	; 61
   16104:	fe b7       	in	r31, 0x3e	; 62
   16106:	81 83       	std	Z+1, r24	; 0x01
   16108:	92 83       	std	Z+2, r25	; 0x02
   1610a:	a3 83       	std	Z+3, r26	; 0x03
   1610c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16110:	80 e0       	ldi	r24, 0x00	; 0
   16112:	91 e0       	ldi	r25, 0x01	; 1
   16114:	9d 83       	std	Y+5, r25	; 0x05
   16116:	8c 83       	std	Y+4, r24	; 0x04
   16118:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1611c:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16120:	ae 01       	movw	r20, r28
   16122:	4c 5f       	subi	r20, 0xFC	; 252
   16124:	5f 4f       	sbci	r21, 0xFF	; 255
   16126:	64 e0       	ldi	r22, 0x04	; 4
   16128:	70 e0       	ldi	r23, 0x00	; 0
   1612a:	0d 96       	adiw	r24, 0x0d	; 13
   1612c:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   16130:	2c 81       	ldd	r18, Y+4	; 0x04
   16132:	3d 81       	ldd	r19, Y+5	; 0x05
   16134:	22 27       	eor	r18, r18
   16136:	30 7d       	andi	r19, 0xD0	; 208
   16138:	23 2b       	or	r18, r19
   1613a:	11 f4       	brne	.+4      	; 0x16140 <amigo_send_logical_address+0x58>
   1613c:	04 97       	sbiw	r24, 0x04	; 4
   1613e:	c9 f0       	breq	.+50     	; 0x16172 <amigo_send_logical_address+0x8a>
   16140:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16144:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16148:	87 81       	ldd	r24, Z+7	; 0x07
   1614a:	90 85       	ldd	r25, Z+8	; 0x08
   1614c:	80 62       	ori	r24, 0x20	; 32
   1614e:	90 87       	std	Z+8, r25	; 0x08
   16150:	87 83       	std	Z+7, r24	; 0x07
   16152:	81 e0       	ldi	r24, 0x01	; 1
   16154:	86 83       	std	Z+6, r24	; 0x06
   16156:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1615a:	80 ff       	sbrs	r24, 0
   1615c:	0a c0       	rjmp	.+20     	; 0x16172 <amigo_send_logical_address+0x8a>
   1615e:	8b ed       	ldi	r24, 0xDB	; 219
   16160:	9d e2       	ldi	r25, 0x2D	; 45
   16162:	a0 e0       	ldi	r26, 0x00	; 0
   16164:	ed b7       	in	r30, 0x3d	; 61
   16166:	fe b7       	in	r31, 0x3e	; 62
   16168:	81 83       	std	Z+1, r24	; 0x01
   1616a:	92 83       	std	Z+2, r25	; 0x02
   1616c:	a3 83       	std	Z+3, r26	; 0x03
   1616e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16172:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16176:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1617a:	81 81       	ldd	r24, Z+1	; 0x01
   1617c:	90 e0       	ldi	r25, 0x00	; 0
   1617e:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   16182:	8c 81       	ldd	r24, Y+4	; 0x04
   16184:	9d 81       	ldd	r25, Y+5	; 0x05
   16186:	88 27       	eor	r24, r24
   16188:	90 7d       	andi	r25, 0xD0	; 208
   1618a:	25 96       	adiw	r28, 0x05	; 5
   1618c:	e2 e0       	ldi	r30, 0x02	; 2
   1618e:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00016192 <amigo_send_status>:
   16192:	a5 e0       	ldi	r26, 0x05	; 5
   16194:	b0 e0       	ldi	r27, 0x00	; 0
   16196:	ef ec       	ldi	r30, 0xCF	; 207
   16198:	f0 eb       	ldi	r31, 0xB0	; 176
   1619a:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   1619e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161a2:	85 ff       	sbrs	r24, 5
   161a4:	0a c0       	rjmp	.+20     	; 0x161ba <amigo_send_status+0x28>
   161a6:	86 ec       	ldi	r24, 0xC6	; 198
   161a8:	9d e2       	ldi	r25, 0x2D	; 45
   161aa:	a0 e0       	ldi	r26, 0x00	; 0
   161ac:	ed b7       	in	r30, 0x3d	; 61
   161ae:	fe b7       	in	r31, 0x3e	; 62
   161b0:	81 83       	std	Z+1, r24	; 0x01
   161b2:	92 83       	std	Z+2, r25	; 0x02
   161b4:	a3 83       	std	Z+3, r26	; 0x03
   161b6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   161ba:	80 e0       	ldi	r24, 0x00	; 0
   161bc:	91 e0       	ldi	r25, 0x01	; 1
   161be:	9d 83       	std	Y+5, r25	; 0x05
   161c0:	8c 83       	std	Y+4, r24	; 0x04
   161c2:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   161c6:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   161ca:	ae 01       	movw	r20, r28
   161cc:	4c 5f       	subi	r20, 0xFC	; 252
   161ce:	5f 4f       	sbci	r21, 0xFF	; 255
   161d0:	64 e0       	ldi	r22, 0x04	; 4
   161d2:	70 e0       	ldi	r23, 0x00	; 0
   161d4:	09 96       	adiw	r24, 0x09	; 9
   161d6:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   161da:	2c 81       	ldd	r18, Y+4	; 0x04
   161dc:	3d 81       	ldd	r19, Y+5	; 0x05
   161de:	22 27       	eor	r18, r18
   161e0:	30 7d       	andi	r19, 0xD0	; 208
   161e2:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   161e6:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   161ea:	23 2b       	or	r18, r19
   161ec:	11 f4       	brne	.+4      	; 0x161f2 <amigo_send_status+0x60>
   161ee:	04 97       	sbiw	r24, 0x04	; 4
   161f0:	b1 f0       	breq	.+44     	; 0x1621e <amigo_send_status+0x8c>
   161f2:	87 81       	ldd	r24, Z+7	; 0x07
   161f4:	90 85       	ldd	r25, Z+8	; 0x08
   161f6:	80 62       	ori	r24, 0x20	; 32
   161f8:	90 87       	std	Z+8, r25	; 0x08
   161fa:	87 83       	std	Z+7, r24	; 0x07
   161fc:	81 e0       	ldi	r24, 0x01	; 1
   161fe:	86 83       	std	Z+6, r24	; 0x06
   16200:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16204:	80 ff       	sbrs	r24, 0
   16206:	0e c0       	rjmp	.+28     	; 0x16224 <amigo_send_status+0x92>
   16208:	8c ea       	ldi	r24, 0xAC	; 172
   1620a:	9d e2       	ldi	r25, 0x2D	; 45
   1620c:	a0 e0       	ldi	r26, 0x00	; 0
   1620e:	ed b7       	in	r30, 0x3d	; 61
   16210:	fe b7       	in	r31, 0x3e	; 62
   16212:	81 83       	std	Z+1, r24	; 0x01
   16214:	92 83       	std	Z+2, r25	; 0x02
   16216:	a3 83       	std	Z+3, r26	; 0x03
   16218:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1621c:	03 c0       	rjmp	.+6      	; 0x16224 <amigo_send_status+0x92>
   1621e:	10 86       	std	Z+8, r1	; 0x08
   16220:	17 82       	std	Z+7, r1	; 0x07
   16222:	16 82       	std	Z+6, r1	; 0x06
   16224:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16228:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1622c:	81 81       	ldd	r24, Z+1	; 0x01
   1622e:	90 e0       	ldi	r25, 0x00	; 0
   16230:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   16234:	8c 81       	ldd	r24, Y+4	; 0x04
   16236:	9d 81       	ldd	r25, Y+5	; 0x05
   16238:	88 27       	eor	r24, r24
   1623a:	90 7d       	andi	r25, 0xD0	; 208
   1623c:	25 96       	adiw	r28, 0x05	; 5
   1623e:	e2 e0       	ldi	r30, 0x02	; 2
   16240:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00016244 <amigo_increment>:
   16244:	a1 e1       	ldi	r26, 0x11	; 17
   16246:	b0 e0       	ldi	r27, 0x00	; 0
   16248:	e8 e2       	ldi	r30, 0x28	; 40
   1624a:	f1 eb       	ldi	r31, 0xB1	; 177
   1624c:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   16250:	bc 01       	movw	r22, r24
   16252:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16256:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1625a:	91 e1       	ldi	r25, 0x11	; 17
   1625c:	de 01       	movw	r26, r28
   1625e:	11 96       	adiw	r26, 0x01	; 1
   16260:	01 90       	ld	r0, Z+
   16262:	0d 92       	st	X+, r0
   16264:	9a 95       	dec	r25
   16266:	e1 f7       	brne	.-8      	; 0x16260 <amigo_increment+0x1c>
   16268:	9e 81       	ldd	r25, Y+6	; 0x06
   1626a:	9f 5f       	subi	r25, 0xFF	; 255
   1626c:	9e 83       	std	Y+6, r25	; 0x06
   1626e:	ce 01       	movw	r24, r28
   16270:	01 96       	adiw	r24, 0x01	; 1
   16272:	c1 dd       	rcall	.-1150   	; 0x15df6 <amigo_overflow_check>
   16274:	00 97       	sbiw	r24, 0x00	; 0
   16276:	59 f4       	brne	.+22     	; 0x1628e <amigo_increment+0x4a>
   16278:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   1627c:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   16280:	21 e1       	ldi	r18, 0x11	; 17
   16282:	fe 01       	movw	r30, r28
   16284:	31 96       	adiw	r30, 0x01	; 1
   16286:	01 90       	ld	r0, Z+
   16288:	0d 92       	st	X+, r0
   1628a:	2a 95       	dec	r18
   1628c:	e1 f7       	brne	.-8      	; 0x16286 <amigo_increment+0x42>
   1628e:	61 96       	adiw	r28, 0x11	; 17
   16290:	e2 e0       	ldi	r30, 0x02	; 2
   16292:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00016296 <amigo_seek>:
   16296:	0f 93       	push	r16
   16298:	1f 93       	push	r17
   1629a:	cf 93       	push	r28
   1629c:	df 93       	push	r29
   1629e:	ec 01       	movw	r28, r24
   162a0:	65 e8       	ldi	r22, 0x85	; 133
   162a2:	75 e1       	ldi	r23, 0x15	; 21
   162a4:	a8 dd       	rcall	.-1200   	; 0x15df6 <amigo_overflow_check>
   162a6:	8c 01       	movw	r16, r24
   162a8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   162ac:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   162b0:	89 2b       	or	r24, r25
   162b2:	41 f0       	breq	.+16     	; 0x162c4 <amigo_seek+0x2e>
   162b4:	81 e0       	ldi	r24, 0x01	; 1
   162b6:	86 83       	std	Z+6, r24	; 0x06
   162b8:	87 81       	ldd	r24, Z+7	; 0x07
   162ba:	90 85       	ldd	r25, Z+8	; 0x08
   162bc:	84 60       	ori	r24, 0x04	; 4
   162be:	90 87       	std	Z+8, r25	; 0x08
   162c0:	87 83       	std	Z+7, r24	; 0x07
   162c2:	06 c0       	rjmp	.+12     	; 0x162d0 <amigo_seek+0x3a>
   162c4:	8d 81       	ldd	r24, Y+5	; 0x05
   162c6:	85 83       	std	Z+5, r24	; 0x05
   162c8:	8c 81       	ldd	r24, Y+4	; 0x04
   162ca:	84 83       	std	Z+4, r24	; 0x04
   162cc:	8b 81       	ldd	r24, Y+3	; 0x03
   162ce:	83 83       	std	Z+3, r24	; 0x03
   162d0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   162d4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   162d8:	81 81       	ldd	r24, Z+1	; 0x01
   162da:	90 e0       	ldi	r25, 0x00	; 0
   162dc:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   162e0:	c8 01       	movw	r24, r16
   162e2:	df 91       	pop	r29
   162e4:	cf 91       	pop	r28
   162e6:	1f 91       	pop	r17
   162e8:	0f 91       	pop	r16
   162ea:	08 95       	ret

000162ec <amigo_verify>:
   162ec:	8f 92       	push	r8
   162ee:	9f 92       	push	r9
   162f0:	af 92       	push	r10
   162f2:	bf 92       	push	r11
   162f4:	ef 92       	push	r14
   162f6:	ff 92       	push	r15
   162f8:	0f 93       	push	r16
   162fa:	1f 93       	push	r17
   162fc:	cf 93       	push	r28
   162fe:	df 93       	push	r29
   16300:	ad b7       	in	r26, 0x3d	; 61
   16302:	be b7       	in	r27, 0x3e	; 62
   16304:	19 97       	sbiw	r26, 0x09	; 9
   16306:	0f b6       	in	r0, 0x3f	; 63
   16308:	f8 94       	cli
   1630a:	be bf       	out	0x3e, r27	; 62
   1630c:	0f be       	out	0x3f, r0	; 63
   1630e:	ad bf       	out	0x3d, r26	; 61
   16310:	7c 01       	movw	r14, r24
   16312:	6a e8       	ldi	r22, 0x8A	; 138
   16314:	75 e1       	ldi	r23, 0x15	; 21
   16316:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1631a:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   1631e:	c1 dd       	rcall	.-1150   	; 0x15ea2 <amigo_chs_to_logical>
   16320:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16324:	25 ff       	sbrs	r18, 5
   16326:	10 c0       	rjmp	.+32     	; 0x16348 <amigo_verify+0x5c>
   16328:	ed b7       	in	r30, 0x3d	; 61
   1632a:	fe b7       	in	r31, 0x3e	; 62
   1632c:	e0 86       	std	Z+8, r14	; 0x08
   1632e:	f1 86       	std	Z+9, r15	; 0x09
   16330:	64 83       	std	Z+4, r22	; 0x04
   16332:	75 83       	std	Z+5, r23	; 0x05
   16334:	86 83       	std	Z+6, r24	; 0x06
   16336:	97 83       	std	Z+7, r25	; 0x07
   16338:	8b e6       	ldi	r24, 0x6B	; 107
   1633a:	9d e2       	ldi	r25, 0x2D	; 45
   1633c:	a0 e0       	ldi	r26, 0x00	; 0
   1633e:	81 83       	std	Z+1, r24	; 0x01
   16340:	92 83       	std	Z+2, r25	; 0x02
   16342:	a3 83       	std	Z+3, r26	; 0x03
   16344:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16348:	e7 01       	movw	r28, r14
   1634a:	20 97       	sbiw	r28, 0x00	; 0
   1634c:	09 f4       	brne	.+2      	; 0x16350 <amigo_verify+0x64>
   1634e:	4b c0       	rjmp	.+150    	; 0x163e6 <amigo_verify+0xfa>
   16350:	67 e9       	ldi	r22, 0x97	; 151
   16352:	75 e1       	ldi	r23, 0x15	; 21
   16354:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16358:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   1635c:	a2 dd       	rcall	.-1212   	; 0x15ea2 <amigo_chs_to_logical>
   1635e:	4b 01       	movw	r8, r22
   16360:	5c 01       	movw	r10, r24
   16362:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16366:	86 fd       	sbrc	r24, 6
   16368:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   1636c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16370:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16374:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16378:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   1637c:	87 e0       	ldi	r24, 0x07	; 7
   1637e:	e8 0e       	add	r14, r24
   16380:	f1 1c       	adc	r15, r1
   16382:	06 81       	ldd	r16, Z+6	; 0x06
   16384:	17 81       	ldd	r17, Z+7	; 0x07
   16386:	2a ee       	ldi	r18, 0xEA	; 234
   16388:	3c e1       	ldi	r19, 0x1C	; 28
   1638a:	b5 01       	movw	r22, r10
   1638c:	a4 01       	movw	r20, r8
   1638e:	82 81       	ldd	r24, Z+2	; 0x02
   16390:	93 81       	ldd	r25, Z+3	; 0x03
   16392:	0e 94 e9 82 	call	0x105d2	; 0x105d2 <dbf_open_read>
   16396:	7c 01       	movw	r14, r24
   16398:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1639c:	86 ff       	sbrs	r24, 6
   1639e:	04 c0       	rjmp	.+8      	; 0x163a8 <amigo_verify+0xbc>
   163a0:	8e e9       	ldi	r24, 0x9E	; 158
   163a2:	90 e1       	ldi	r25, 0x10	; 16
   163a4:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   163a8:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <AMIGOs>
   163ac:	30 91 63 19 	lds	r19, 0x1963	; 0x801963 <AMIGOs+0x1>
   163b0:	f9 01       	movw	r30, r18
   163b2:	87 81       	ldd	r24, Z+7	; 0x07
   163b4:	90 85       	ldd	r25, Z+8	; 0x08
   163b6:	89 2b       	or	r24, r25
   163b8:	21 f0       	breq	.+8      	; 0x163c2 <amigo_verify+0xd6>
   163ba:	81 e0       	ldi	r24, 0x01	; 1
   163bc:	f9 01       	movw	r30, r18
   163be:	86 83       	std	Z+6, r24	; 0x06
   163c0:	15 c0       	rjmp	.+42     	; 0x163ec <amigo_verify+0x100>
   163c2:	80 91 64 19 	lds	r24, 0x1964	; 0x801964 <AMIGOp>
   163c6:	90 91 65 19 	lds	r25, 0x1965	; 0x801965 <AMIGOp+0x1>
   163ca:	fc 01       	movw	r30, r24
   163cc:	86 81       	ldd	r24, Z+6	; 0x06
   163ce:	97 81       	ldd	r25, Z+7	; 0x07
   163d0:	e8 16       	cp	r14, r24
   163d2:	f9 06       	cpc	r15, r25
   163d4:	91 f7       	brne	.-28     	; 0x163ba <amigo_verify+0xce>
   163d6:	8f e9       	ldi	r24, 0x9F	; 159
   163d8:	95 e1       	ldi	r25, 0x15	; 21
   163da:	34 df       	rcall	.-408    	; 0x16244 <amigo_increment>
   163dc:	21 97       	sbiw	r28, 0x01	; 1
   163de:	89 2b       	or	r24, r25
   163e0:	09 f4       	brne	.+2      	; 0x163e4 <amigo_verify+0xf8>
   163e2:	b3 cf       	rjmp	.-154    	; 0x1634a <amigo_verify+0x5e>
   163e4:	03 c0       	rjmp	.+6      	; 0x163ec <amigo_verify+0x100>
   163e6:	c0 e0       	ldi	r28, 0x00	; 0
   163e8:	d0 e0       	ldi	r29, 0x00	; 0
   163ea:	02 c0       	rjmp	.+4      	; 0x163f0 <amigo_verify+0x104>
   163ec:	c1 e0       	ldi	r28, 0x01	; 1
   163ee:	d0 e0       	ldi	r29, 0x00	; 0
   163f0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   163f4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   163f8:	81 81       	ldd	r24, Z+1	; 0x01
   163fa:	90 e0       	ldi	r25, 0x00	; 0
   163fc:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   16400:	ce 01       	movw	r24, r28
   16402:	ad b7       	in	r26, 0x3d	; 61
   16404:	be b7       	in	r27, 0x3e	; 62
   16406:	19 96       	adiw	r26, 0x09	; 9
   16408:	0f b6       	in	r0, 0x3f	; 63
   1640a:	f8 94       	cli
   1640c:	be bf       	out	0x3e, r27	; 62
   1640e:	0f be       	out	0x3f, r0	; 63
   16410:	ad bf       	out	0x3d, r26	; 61
   16412:	df 91       	pop	r29
   16414:	cf 91       	pop	r28
   16416:	1f 91       	pop	r17
   16418:	0f 91       	pop	r16
   1641a:	ff 90       	pop	r15
   1641c:	ef 90       	pop	r14
   1641e:	bf 90       	pop	r11
   16420:	af 90       	pop	r10
   16422:	9f 90       	pop	r9
   16424:	8f 90       	pop	r8
   16426:	08 95       	ret

00016428 <amigo_format>:
   16428:	ef 92       	push	r14
   1642a:	ff 92       	push	r15
   1642c:	0f 93       	push	r16
   1642e:	1f 93       	push	r17
   16430:	cf 93       	push	r28
   16432:	df 93       	push	r29
   16434:	00 d0       	rcall	.+0      	; 0x16436 <amigo_format+0xe>
   16436:	1f 92       	push	r1
   16438:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1643c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16440:	15 82       	std	Z+5, r1	; 0x05
   16442:	14 82       	std	Z+4, r1	; 0x04
   16444:	13 82       	std	Z+3, r1	; 0x03
   16446:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1644a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1644e:	46 81       	ldd	r20, Z+6	; 0x06
   16450:	57 81       	ldd	r21, Z+7	; 0x07
   16452:	68 2f       	mov	r22, r24
   16454:	70 e0       	ldi	r23, 0x00	; 0
   16456:	8a ee       	ldi	r24, 0xEA	; 234
   16458:	9c e1       	ldi	r25, 0x1C	; 28
   1645a:	0e 94 e5 e6 	call	0x1cdca	; 0x1cdca <memset>
   1645e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16462:	85 ff       	sbrs	r24, 5
   16464:	0a c0       	rjmp	.+20     	; 0x1647a <amigo_format+0x52>
   16466:	80 e3       	ldi	r24, 0x30	; 48
   16468:	9d e2       	ldi	r25, 0x2D	; 45
   1646a:	a0 e0       	ldi	r26, 0x00	; 0
   1646c:	ed b7       	in	r30, 0x3d	; 61
   1646e:	fe b7       	in	r31, 0x3e	; 62
   16470:	81 83       	std	Z+1, r24	; 0x01
   16472:	92 83       	std	Z+2, r25	; 0x02
   16474:	a3 83       	std	Z+3, r26	; 0x03
   16476:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1647a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1647e:	86 fd       	sbrc	r24, 6
   16480:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   16484:	66 ea       	ldi	r22, 0xA6	; 166
   16486:	75 e1       	ldi	r23, 0x15	; 21
   16488:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1648c:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16490:	08 dd       	rcall	.-1520   	; 0x15ea2 <amigo_chs_to_logical>
   16492:	ab 01       	movw	r20, r22
   16494:	bc 01       	movw	r22, r24
   16496:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1649a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1649e:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   164a2:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   164a6:	87 e0       	ldi	r24, 0x07	; 7
   164a8:	e8 0e       	add	r14, r24
   164aa:	f1 1c       	adc	r15, r1
   164ac:	06 81       	ldd	r16, Z+6	; 0x06
   164ae:	17 81       	ldd	r17, Z+7	; 0x07
   164b0:	2a ee       	ldi	r18, 0xEA	; 234
   164b2:	3c e1       	ldi	r19, 0x1C	; 28
   164b4:	82 81       	ldd	r24, Z+2	; 0x02
   164b6:	93 81       	ldd	r25, Z+3	; 0x03
   164b8:	0e 94 40 83 	call	0x10680	; 0x10680 <dbf_open_write>
   164bc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   164c0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   164c4:	27 81       	ldd	r18, Z+7	; 0x07
   164c6:	30 85       	ldd	r19, Z+8	; 0x08
   164c8:	21 15       	cp	r18, r1
   164ca:	31 05       	cpc	r19, r1
   164cc:	49 f4       	brne	.+18     	; 0x164e0 <amigo_format+0xb8>
   164ce:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <AMIGOp>
   164d2:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <AMIGOp+0x1>
   164d6:	4e 81       	ldd	r20, Y+6	; 0x06
   164d8:	5f 81       	ldd	r21, Y+7	; 0x07
   164da:	84 17       	cp	r24, r20
   164dc:	95 07       	cpc	r25, r21
   164de:	41 f0       	breq	.+16     	; 0x164f0 <amigo_format+0xc8>
   164e0:	22 60       	ori	r18, 0x02	; 2
   164e2:	30 87       	std	Z+8, r19	; 0x08
   164e4:	27 83       	std	Z+7, r18	; 0x07
   164e6:	81 e0       	ldi	r24, 0x01	; 1
   164e8:	86 83       	std	Z+6, r24	; 0x06
   164ea:	c1 e0       	ldi	r28, 0x01	; 1
   164ec:	d0 e0       	ldi	r29, 0x00	; 0
   164ee:	0f c0       	rjmp	.+30     	; 0x1650e <amigo_format+0xe6>
   164f0:	80 e0       	ldi	r24, 0x00	; 0
   164f2:	90 e0       	ldi	r25, 0x00	; 0
   164f4:	a7 de       	rcall	.-690    	; 0x16244 <amigo_increment>
   164f6:	89 2b       	or	r24, r25
   164f8:	29 f2       	breq	.-118    	; 0x16484 <amigo_format+0x5c>
   164fa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   164fe:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16502:	15 82       	std	Z+5, r1	; 0x05
   16504:	14 82       	std	Z+4, r1	; 0x04
   16506:	13 82       	std	Z+3, r1	; 0x03
   16508:	16 82       	std	Z+6, r1	; 0x06
   1650a:	c0 e0       	ldi	r28, 0x00	; 0
   1650c:	d0 e0       	ldi	r29, 0x00	; 0
   1650e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16512:	86 ff       	sbrs	r24, 6
   16514:	04 c0       	rjmp	.+8      	; 0x1651e <amigo_format+0xf6>
   16516:	86 ea       	ldi	r24, 0xA6	; 166
   16518:	95 e1       	ldi	r25, 0x15	; 21
   1651a:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   1651e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16522:	85 ff       	sbrs	r24, 5
   16524:	0a c0       	rjmp	.+20     	; 0x1653a <amigo_format+0x112>
   16526:	8b e1       	ldi	r24, 0x1B	; 27
   16528:	9d e2       	ldi	r25, 0x2D	; 45
   1652a:	a0 e0       	ldi	r26, 0x00	; 0
   1652c:	ed b7       	in	r30, 0x3d	; 61
   1652e:	fe b7       	in	r31, 0x3e	; 62
   16530:	81 83       	std	Z+1, r24	; 0x01
   16532:	92 83       	std	Z+2, r25	; 0x02
   16534:	a3 83       	std	Z+3, r26	; 0x03
   16536:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1653a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1653e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16542:	81 81       	ldd	r24, Z+1	; 0x01
   16544:	90 e0       	ldi	r25, 0x00	; 0
   16546:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   1654a:	ce 01       	movw	r24, r28
   1654c:	cd b7       	in	r28, 0x3d	; 61
   1654e:	de b7       	in	r29, 0x3e	; 62
   16550:	23 96       	adiw	r28, 0x03	; 3
   16552:	e6 e0       	ldi	r30, 0x06	; 6
   16554:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00016558 <amigo_buffered_read_command>:
   16558:	8f 92       	push	r8
   1655a:	9f 92       	push	r9
   1655c:	af 92       	push	r10
   1655e:	bf 92       	push	r11
   16560:	ef 92       	push	r14
   16562:	ff 92       	push	r15
   16564:	0f 93       	push	r16
   16566:	1f 93       	push	r17
   16568:	cf 93       	push	r28
   1656a:	df 93       	push	r29
   1656c:	00 d0       	rcall	.+0      	; 0x1656e <amigo_buffered_read_command+0x16>
   1656e:	00 d0       	rcall	.+0      	; 0x16570 <amigo_buffered_read_command+0x18>
   16570:	1f 92       	push	r1
   16572:	6d ea       	ldi	r22, 0xAD	; 173
   16574:	75 e1       	ldi	r23, 0x15	; 21
   16576:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   1657a:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   1657e:	91 dc       	rcall	.-1758   	; 0x15ea2 <amigo_chs_to_logical>
   16580:	4b 01       	movw	r8, r22
   16582:	5c 01       	movw	r10, r24
   16584:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16588:	85 ff       	sbrs	r24, 5
   1658a:	12 c0       	rjmp	.+36     	; 0x165b0 <amigo_buffered_read_command+0x58>
   1658c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16590:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16594:	80 81       	ld	r24, Z
   16596:	90 e0       	ldi	r25, 0x00	; 0
   16598:	ed b7       	in	r30, 0x3d	; 61
   1659a:	fe b7       	in	r31, 0x3e	; 62
   1659c:	95 83       	std	Z+5, r25	; 0x05
   1659e:	84 83       	std	Z+4, r24	; 0x04
   165a0:	89 e0       	ldi	r24, 0x09	; 9
   165a2:	9d e2       	ldi	r25, 0x2D	; 45
   165a4:	a0 e0       	ldi	r26, 0x00	; 0
   165a6:	81 83       	std	Z+1, r24	; 0x01
   165a8:	92 83       	std	Z+2, r25	; 0x02
   165aa:	a3 83       	std	Z+3, r26	; 0x03
   165ac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   165b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165b4:	86 fd       	sbrc	r24, 6
   165b6:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   165ba:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   165be:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   165c2:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   165c6:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   165ca:	87 e0       	ldi	r24, 0x07	; 7
   165cc:	e8 0e       	add	r14, r24
   165ce:	f1 1c       	adc	r15, r1
   165d0:	06 81       	ldd	r16, Z+6	; 0x06
   165d2:	17 81       	ldd	r17, Z+7	; 0x07
   165d4:	2a ee       	ldi	r18, 0xEA	; 234
   165d6:	3c e1       	ldi	r19, 0x1C	; 28
   165d8:	b5 01       	movw	r22, r10
   165da:	a4 01       	movw	r20, r8
   165dc:	82 81       	ldd	r24, Z+2	; 0x02
   165de:	93 81       	ldd	r25, Z+3	; 0x03
   165e0:	0e 94 e9 82 	call	0x105d2	; 0x105d2 <dbf_open_read>
   165e4:	7c 01       	movw	r14, r24
   165e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ea:	86 ff       	sbrs	r24, 6
   165ec:	04 c0       	rjmp	.+8      	; 0x165f6 <amigo_buffered_read_command+0x9e>
   165ee:	8e e9       	ldi	r24, 0x9E	; 158
   165f0:	90 e1       	ldi	r25, 0x10	; 16
   165f2:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   165f6:	c0 91 62 19 	lds	r28, 0x1962	; 0x801962 <AMIGOs>
   165fa:	d0 91 63 19 	lds	r29, 0x1963	; 0x801963 <AMIGOs+0x1>
   165fe:	8f 81       	ldd	r24, Y+7	; 0x07
   16600:	98 85       	ldd	r25, Y+8	; 0x08
   16602:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16606:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1660a:	89 2b       	or	r24, r25
   1660c:	29 f4       	brne	.+10     	; 0x16618 <amigo_buffered_read_command+0xc0>
   1660e:	86 81       	ldd	r24, Z+6	; 0x06
   16610:	97 81       	ldd	r25, Z+7	; 0x07
   16612:	e8 16       	cp	r14, r24
   16614:	f9 06       	cpc	r15, r25
   16616:	19 f0       	breq	.+6      	; 0x1661e <amigo_buffered_read_command+0xc6>
   16618:	81 e0       	ldi	r24, 0x01	; 1
   1661a:	8e 83       	std	Y+6, r24	; 0x06
   1661c:	14 c0       	rjmp	.+40     	; 0x16646 <amigo_buffered_read_command+0xee>
   1661e:	8d ea       	ldi	r24, 0xAD	; 173
   16620:	95 e1       	ldi	r25, 0x15	; 21
   16622:	10 de       	rcall	.-992    	; 0x16244 <amigo_increment>
   16624:	89 2b       	or	r24, r25
   16626:	59 f0       	breq	.+22     	; 0x1663e <amigo_buffered_read_command+0xe6>
   16628:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1662c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16630:	81 e0       	ldi	r24, 0x01	; 1
   16632:	86 83       	std	Z+6, r24	; 0x06
   16634:	87 81       	ldd	r24, Z+7	; 0x07
   16636:	90 85       	ldd	r25, Z+8	; 0x08
   16638:	84 60       	ori	r24, 0x04	; 4
   1663a:	90 87       	std	Z+8, r25	; 0x08
   1663c:	87 83       	std	Z+7, r24	; 0x07
   1663e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16642:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16646:	81 81       	ldd	r24, Z+1	; 0x01
   16648:	90 e0       	ldi	r25, 0x00	; 0
   1664a:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   1664e:	80 e0       	ldi	r24, 0x00	; 0
   16650:	90 e0       	ldi	r25, 0x00	; 0
   16652:	0f 90       	pop	r0
   16654:	0f 90       	pop	r0
   16656:	0f 90       	pop	r0
   16658:	0f 90       	pop	r0
   1665a:	0f 90       	pop	r0
   1665c:	df 91       	pop	r29
   1665e:	cf 91       	pop	r28
   16660:	1f 91       	pop	r17
   16662:	0f 91       	pop	r16
   16664:	ff 90       	pop	r15
   16666:	ef 90       	pop	r14
   16668:	bf 90       	pop	r11
   1666a:	af 90       	pop	r10
   1666c:	9f 90       	pop	r9
   1666e:	8f 90       	pop	r8
   16670:	08 95       	ret

00016672 <amigo_buffered_read_execute>:
   16672:	a5 e0       	ldi	r26, 0x05	; 5
   16674:	b0 e0       	ldi	r27, 0x00	; 0
   16676:	ef e3       	ldi	r30, 0x3F	; 63
   16678:	f3 eb       	ldi	r31, 0xB3	; 179
   1667a:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
   1667e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16682:	87 fd       	sbrc	r24, 7
   16684:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   16688:	80 e0       	ldi	r24, 0x00	; 0
   1668a:	91 e0       	ldi	r25, 0x01	; 1
   1668c:	9d 83       	std	Y+5, r25	; 0x05
   1668e:	8c 83       	std	Y+4, r24	; 0x04
   16690:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16694:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16698:	66 81       	ldd	r22, Z+6	; 0x06
   1669a:	77 81       	ldd	r23, Z+7	; 0x07
   1669c:	ae 01       	movw	r20, r28
   1669e:	4c 5f       	subi	r20, 0xFC	; 252
   166a0:	5f 4f       	sbci	r21, 0xFF	; 255
   166a2:	8a ee       	ldi	r24, 0xEA	; 234
   166a4:	9c e1       	ldi	r25, 0x1C	; 28
   166a6:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   166aa:	8c 01       	movw	r16, r24
   166ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166b0:	87 ff       	sbrs	r24, 7
   166b2:	04 c0       	rjmp	.+8      	; 0x166bc <amigo_buffered_read_execute+0x4a>
   166b4:	89 ea       	ldi	r24, 0xA9	; 169
   166b6:	90 e1       	ldi	r25, 0x10	; 16
   166b8:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   166bc:	8c 81       	ldd	r24, Y+4	; 0x04
   166be:	9d 81       	ldd	r25, Y+5	; 0x05
   166c0:	88 27       	eor	r24, r24
   166c2:	90 7d       	andi	r25, 0xD0	; 208
   166c4:	89 2b       	or	r24, r25
   166c6:	49 f4       	brne	.+18     	; 0x166da <amigo_buffered_read_execute+0x68>
   166c8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   166cc:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   166d0:	86 81       	ldd	r24, Z+6	; 0x06
   166d2:	97 81       	ldd	r25, Z+7	; 0x07
   166d4:	08 17       	cp	r16, r24
   166d6:	19 07       	cpc	r17, r25
   166d8:	c9 f0       	breq	.+50     	; 0x1670c <amigo_buffered_read_execute+0x9a>
   166da:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   166de:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   166e2:	81 e0       	ldi	r24, 0x01	; 1
   166e4:	86 83       	std	Z+6, r24	; 0x06
   166e6:	87 81       	ldd	r24, Z+7	; 0x07
   166e8:	90 85       	ldd	r25, Z+8	; 0x08
   166ea:	80 62       	ori	r24, 0x20	; 32
   166ec:	90 87       	std	Z+8, r25	; 0x08
   166ee:	87 83       	std	Z+7, r24	; 0x07
   166f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166f4:	80 ff       	sbrs	r24, 0
   166f6:	0a c0       	rjmp	.+20     	; 0x1670c <amigo_buffered_read_execute+0x9a>
   166f8:	8f ee       	ldi	r24, 0xEF	; 239
   166fa:	9c e2       	ldi	r25, 0x2C	; 44
   166fc:	a0 e0       	ldi	r26, 0x00	; 0
   166fe:	ed b7       	in	r30, 0x3d	; 61
   16700:	fe b7       	in	r31, 0x3e	; 62
   16702:	81 83       	std	Z+1, r24	; 0x01
   16704:	92 83       	std	Z+2, r25	; 0x02
   16706:	a3 83       	std	Z+3, r26	; 0x03
   16708:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1670c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16710:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16714:	81 81       	ldd	r24, Z+1	; 0x01
   16716:	90 e0       	ldi	r25, 0x00	; 0
   16718:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   1671c:	8c 81       	ldd	r24, Y+4	; 0x04
   1671e:	9d 81       	ldd	r25, Y+5	; 0x05
   16720:	25 96       	adiw	r28, 0x05	; 5
   16722:	e4 e0       	ldi	r30, 0x04	; 4
   16724:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00016728 <amigo_buffered_write>:
   16728:	8f 92       	push	r8
   1672a:	9f 92       	push	r9
   1672c:	af 92       	push	r10
   1672e:	bf 92       	push	r11
   16730:	ef 92       	push	r14
   16732:	ff 92       	push	r15
   16734:	0f 93       	push	r16
   16736:	1f 93       	push	r17
   16738:	cf 93       	push	r28
   1673a:	df 93       	push	r29
   1673c:	cd b7       	in	r28, 0x3d	; 61
   1673e:	de b7       	in	r29, 0x3e	; 62
   16740:	27 97       	sbiw	r28, 0x07	; 7
   16742:	0f b6       	in	r0, 0x3f	; 63
   16744:	f8 94       	cli
   16746:	de bf       	out	0x3e, r29	; 62
   16748:	0f be       	out	0x3f, r0	; 63
   1674a:	cd bf       	out	0x3d, r28	; 61
   1674c:	6b eb       	ldi	r22, 0xBB	; 187
   1674e:	75 e1       	ldi	r23, 0x15	; 21
   16750:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <AMIGOs>
   16754:	90 91 63 19 	lds	r25, 0x1963	; 0x801963 <AMIGOs+0x1>
   16758:	a4 db       	rcall	.-2232   	; 0x15ea2 <amigo_chs_to_logical>
   1675a:	4b 01       	movw	r8, r22
   1675c:	5c 01       	movw	r10, r24
   1675e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16762:	87 fd       	sbrc	r24, 7
   16764:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   16768:	1f 82       	std	Y+7, r1	; 0x07
   1676a:	1e 82       	std	Y+6, r1	; 0x06
   1676c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16770:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16774:	66 81       	ldd	r22, Z+6	; 0x06
   16776:	77 81       	ldd	r23, Z+7	; 0x07
   16778:	ae 01       	movw	r20, r28
   1677a:	4a 5f       	subi	r20, 0xFA	; 250
   1677c:	5f 4f       	sbci	r21, 0xFF	; 255
   1677e:	8a ee       	ldi	r24, 0xEA	; 234
   16780:	9c e1       	ldi	r25, 0x1C	; 28
   16782:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
   16786:	7c 01       	movw	r14, r24
   16788:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1678c:	85 ff       	sbrs	r24, 5
   1678e:	12 c0       	rjmp	.+36     	; 0x167b4 <amigo_buffered_write+0x8c>
   16790:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16794:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16798:	80 81       	ld	r24, Z
   1679a:	90 e0       	ldi	r25, 0x00	; 0
   1679c:	ed b7       	in	r30, 0x3d	; 61
   1679e:	fe b7       	in	r31, 0x3e	; 62
   167a0:	95 83       	std	Z+5, r25	; 0x05
   167a2:	84 83       	std	Z+4, r24	; 0x04
   167a4:	8d ed       	ldi	r24, 0xDD	; 221
   167a6:	9c e2       	ldi	r25, 0x2C	; 44
   167a8:	a0 e0       	ldi	r26, 0x00	; 0
   167aa:	81 83       	std	Z+1, r24	; 0x01
   167ac:	92 83       	std	Z+2, r25	; 0x02
   167ae:	a3 83       	std	Z+3, r26	; 0x03
   167b0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   167b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167b8:	87 ff       	sbrs	r24, 7
   167ba:	04 c0       	rjmp	.+8      	; 0x167c4 <amigo_buffered_write+0x9c>
   167bc:	8a ec       	ldi	r24, 0xCA	; 202
   167be:	95 e1       	ldi	r25, 0x15	; 21
   167c0:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   167c4:	8e 81       	ldd	r24, Y+6	; 0x06
   167c6:	9f 81       	ldd	r25, Y+7	; 0x07
   167c8:	88 27       	eor	r24, r24
   167ca:	90 7d       	andi	r25, 0xD0	; 208
   167cc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   167d0:	89 2b       	or	r24, r25
   167d2:	49 f4       	brne	.+18     	; 0x167e6 <amigo_buffered_write+0xbe>
   167d4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   167d8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   167dc:	86 81       	ldd	r24, Z+6	; 0x06
   167de:	97 81       	ldd	r25, Z+7	; 0x07
   167e0:	e8 16       	cp	r14, r24
   167e2:	f9 06       	cpc	r15, r25
   167e4:	c1 f0       	breq	.+48     	; 0x16816 <amigo_buffered_write+0xee>
   167e6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   167ea:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   167ee:	81 e0       	ldi	r24, 0x01	; 1
   167f0:	86 83       	std	Z+6, r24	; 0x06
   167f2:	87 81       	ldd	r24, Z+7	; 0x07
   167f4:	90 85       	ldd	r25, Z+8	; 0x08
   167f6:	80 62       	ori	r24, 0x20	; 32
   167f8:	90 87       	std	Z+8, r25	; 0x08
   167fa:	87 83       	std	Z+7, r24	; 0x07
   167fc:	20 ff       	sbrs	r18, 0
   167fe:	5e c0       	rjmp	.+188    	; 0x168bc <amigo_buffered_write+0x194>
   16800:	8e eb       	ldi	r24, 0xBE	; 190
   16802:	9c e2       	ldi	r25, 0x2C	; 44
   16804:	a0 e0       	ldi	r26, 0x00	; 0
   16806:	ed b7       	in	r30, 0x3d	; 61
   16808:	fe b7       	in	r31, 0x3e	; 62
   1680a:	81 83       	std	Z+1, r24	; 0x01
   1680c:	92 83       	std	Z+2, r25	; 0x02
   1680e:	a3 83       	std	Z+3, r26	; 0x03
   16810:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16814:	53 c0       	rjmp	.+166    	; 0x168bc <amigo_buffered_write+0x194>
   16816:	26 fd       	sbrc	r18, 6
   16818:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
   1681c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16820:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16824:	e0 90 62 19 	lds	r14, 0x1962	; 0x801962 <AMIGOs>
   16828:	f0 90 63 19 	lds	r15, 0x1963	; 0x801963 <AMIGOs+0x1>
   1682c:	87 e0       	ldi	r24, 0x07	; 7
   1682e:	e8 0e       	add	r14, r24
   16830:	f1 1c       	adc	r15, r1
   16832:	06 81       	ldd	r16, Z+6	; 0x06
   16834:	17 81       	ldd	r17, Z+7	; 0x07
   16836:	2a ee       	ldi	r18, 0xEA	; 234
   16838:	3c e1       	ldi	r19, 0x1C	; 28
   1683a:	b5 01       	movw	r22, r10
   1683c:	a4 01       	movw	r20, r8
   1683e:	82 81       	ldd	r24, Z+2	; 0x02
   16840:	93 81       	ldd	r25, Z+3	; 0x03
   16842:	0e 94 40 83 	call	0x10680	; 0x10680 <dbf_open_write>
   16846:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1684a:	86 ff       	sbrs	r24, 6
   1684c:	04 c0       	rjmp	.+8      	; 0x16856 <amigo_buffered_write+0x12e>
   1684e:	83 e9       	ldi	r24, 0x93	; 147
   16850:	90 e1       	ldi	r25, 0x10	; 16
   16852:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
   16856:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1685a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1685e:	87 81       	ldd	r24, Z+7	; 0x07
   16860:	90 85       	ldd	r25, Z+8	; 0x08
   16862:	89 2b       	or	r24, r25
   16864:	d9 f0       	breq	.+54     	; 0x1689c <amigo_buffered_write+0x174>
   16866:	81 e0       	ldi	r24, 0x01	; 1
   16868:	86 83       	std	Z+6, r24	; 0x06
   1686a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1686e:	80 ff       	sbrs	r24, 0
   16870:	0a c0       	rjmp	.+20     	; 0x16886 <amigo_buffered_write+0x15e>
   16872:	8e e9       	ldi	r24, 0x9E	; 158
   16874:	9c e2       	ldi	r25, 0x2C	; 44
   16876:	a0 e0       	ldi	r26, 0x00	; 0
   16878:	ed b7       	in	r30, 0x3d	; 61
   1687a:	fe b7       	in	r31, 0x3e	; 62
   1687c:	81 83       	std	Z+1, r24	; 0x01
   1687e:	92 83       	std	Z+2, r25	; 0x02
   16880:	a3 83       	std	Z+3, r26	; 0x03
   16882:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16886:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   1688a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1688e:	81 81       	ldd	r24, Z+1	; 0x01
   16890:	90 e0       	ldi	r25, 0x00	; 0
   16892:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   16896:	80 e0       	ldi	r24, 0x00	; 0
   16898:	90 e0       	ldi	r25, 0x00	; 0
   1689a:	1c c0       	rjmp	.+56     	; 0x168d4 <amigo_buffered_write+0x1ac>
   1689c:	8b eb       	ldi	r24, 0xBB	; 187
   1689e:	95 e1       	ldi	r25, 0x15	; 21
   168a0:	d1 dc       	rcall	.-1630   	; 0x16244 <amigo_increment>
   168a2:	89 2b       	or	r24, r25
   168a4:	59 f0       	breq	.+22     	; 0x168bc <amigo_buffered_write+0x194>
   168a6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   168aa:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   168ae:	81 e0       	ldi	r24, 0x01	; 1
   168b0:	86 83       	std	Z+6, r24	; 0x06
   168b2:	87 81       	ldd	r24, Z+7	; 0x07
   168b4:	90 85       	ldd	r25, Z+8	; 0x08
   168b6:	84 60       	ori	r24, 0x04	; 4
   168b8:	90 87       	std	Z+8, r25	; 0x08
   168ba:	87 83       	std	Z+7, r24	; 0x07
   168bc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   168c0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   168c4:	81 81       	ldd	r24, Z+1	; 0x01
   168c6:	90 e0       	ldi	r25, 0x00	; 0
   168c8:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   168cc:	8e 81       	ldd	r24, Y+6	; 0x06
   168ce:	9f 81       	ldd	r25, Y+7	; 0x07
   168d0:	88 27       	eor	r24, r24
   168d2:	90 7d       	andi	r25, 0xD0	; 208
   168d4:	27 96       	adiw	r28, 0x07	; 7
   168d6:	0f b6       	in	r0, 0x3f	; 63
   168d8:	f8 94       	cli
   168da:	de bf       	out	0x3e, r29	; 62
   168dc:	0f be       	out	0x3f, r0	; 63
   168de:	cd bf       	out	0x3d, r28	; 61
   168e0:	df 91       	pop	r29
   168e2:	cf 91       	pop	r28
   168e4:	1f 91       	pop	r17
   168e6:	0f 91       	pop	r16
   168e8:	ff 90       	pop	r15
   168ea:	ef 90       	pop	r14
   168ec:	bf 90       	pop	r11
   168ee:	af 90       	pop	r10
   168f0:	9f 90       	pop	r9
   168f2:	8f 90       	pop	r8
   168f4:	08 95       	ret

000168f6 <amigo_cmd_dsj>:
   168f6:	a8 e0       	ldi	r26, 0x08	; 8
   168f8:	b0 e0       	ldi	r27, 0x00	; 0
   168fa:	e1 e8       	ldi	r30, 0x81	; 129
   168fc:	f4 eb       	ldi	r31, 0xB4	; 180
   168fe:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   16902:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16906:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1690a:	86 81       	ldd	r24, Z+6	; 0x06
   1690c:	88 87       	std	Y+8, r24	; 0x08
   1690e:	80 e0       	ldi	r24, 0x00	; 0
   16910:	91 e0       	ldi	r25, 0x01	; 1
   16912:	9f 83       	std	Y+7, r25	; 0x07
   16914:	8e 83       	std	Y+6, r24	; 0x06
   16916:	ae 01       	movw	r20, r28
   16918:	4a 5f       	subi	r20, 0xFA	; 250
   1691a:	5f 4f       	sbci	r21, 0xFF	; 255
   1691c:	61 e0       	ldi	r22, 0x01	; 1
   1691e:	70 e0       	ldi	r23, 0x00	; 0
   16920:	ce 01       	movw	r24, r28
   16922:	08 96       	adiw	r24, 0x08	; 8
   16924:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
   16928:	2e 81       	ldd	r18, Y+6	; 0x06
   1692a:	3f 81       	ldd	r19, Y+7	; 0x07
   1692c:	22 27       	eor	r18, r18
   1692e:	30 7d       	andi	r19, 0xD0	; 208
   16930:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16934:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16938:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1693c:	23 2b       	or	r18, r19
   1693e:	11 f4       	brne	.+4      	; 0x16944 <amigo_cmd_dsj+0x4e>
   16940:	01 97       	sbiw	r24, 0x01	; 1
   16942:	c1 f0       	breq	.+48     	; 0x16974 <amigo_cmd_dsj+0x7e>
   16944:	81 e0       	ldi	r24, 0x01	; 1
   16946:	86 83       	std	Z+6, r24	; 0x06
   16948:	87 81       	ldd	r24, Z+7	; 0x07
   1694a:	90 85       	ldd	r25, Z+8	; 0x08
   1694c:	80 62       	ori	r24, 0x20	; 32
   1694e:	90 87       	std	Z+8, r25	; 0x08
   16950:	87 83       	std	Z+7, r24	; 0x07
   16952:	40 ff       	sbrs	r20, 0
   16954:	0a c0       	rjmp	.+20     	; 0x1696a <amigo_cmd_dsj+0x74>
   16956:	84 e8       	ldi	r24, 0x84	; 132
   16958:	9c e2       	ldi	r25, 0x2C	; 44
   1695a:	a0 e0       	ldi	r26, 0x00	; 0
   1695c:	ed b7       	in	r30, 0x3d	; 61
   1695e:	fe b7       	in	r31, 0x3e	; 62
   16960:	81 83       	std	Z+1, r24	; 0x01
   16962:	92 83       	std	Z+2, r25	; 0x02
   16964:	a3 83       	std	Z+3, r26	; 0x03
   16966:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1696a:	8e 81       	ldd	r24, Y+6	; 0x06
   1696c:	9f 81       	ldd	r25, Y+7	; 0x07
   1696e:	88 27       	eor	r24, r24
   16970:	90 7d       	andi	r25, 0xD0	; 208
   16972:	19 c0       	rjmp	.+50     	; 0x169a6 <amigo_cmd_dsj+0xb0>
   16974:	45 ff       	sbrs	r20, 5
   16976:	0e c0       	rjmp	.+28     	; 0x16994 <amigo_cmd_dsj+0x9e>
   16978:	86 81       	ldd	r24, Z+6	; 0x06
   1697a:	90 e0       	ldi	r25, 0x00	; 0
   1697c:	ed b7       	in	r30, 0x3d	; 61
   1697e:	fe b7       	in	r31, 0x3e	; 62
   16980:	95 83       	std	Z+5, r25	; 0x05
   16982:	84 83       	std	Z+4, r24	; 0x04
   16984:	87 e7       	ldi	r24, 0x77	; 119
   16986:	9c e2       	ldi	r25, 0x2C	; 44
   16988:	a0 e0       	ldi	r26, 0x00	; 0
   1698a:	81 83       	std	Z+1, r24	; 0x01
   1698c:	92 83       	std	Z+2, r25	; 0x02
   1698e:	a3 83       	std	Z+3, r26	; 0x03
   16990:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16994:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16998:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   1699c:	16 82       	std	Z+6, r1	; 0x06
   1699e:	10 86       	std	Z+8, r1	; 0x08
   169a0:	17 82       	std	Z+7, r1	; 0x07
   169a2:	80 e0       	ldi	r24, 0x00	; 0
   169a4:	90 e0       	ldi	r25, 0x00	; 0
   169a6:	28 96       	adiw	r28, 0x08	; 8
   169a8:	e2 e0       	ldi	r30, 0x02	; 2
   169aa:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000169ae <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   169ae:	00 d0       	rcall	.+0      	; 0x169b0 <amigo_cmd_clear+0x2>
   169b0:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   169b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169b6:	85 ff       	sbrs	r24, 5
   169b8:	0a c0       	rjmp	.+20     	; 0x169ce <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   169ba:	88 e6       	ldi	r24, 0x68	; 104
   169bc:	9c e2       	ldi	r25, 0x2C	; 44
   169be:	a0 e0       	ldi	r26, 0x00	; 0
   169c0:	ed b7       	in	r30, 0x3d	; 61
   169c2:	fe b7       	in	r31, 0x3e	; 62
   169c4:	81 83       	std	Z+1, r24	; 0x01
   169c6:	92 83       	std	Z+2, r25	; 0x02
   169c8:	a3 83       	std	Z+3, r26	; 0x03
   169ca:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
    AMIGOs->sector = 0;
   169ce:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   169d2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   169d6:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   169d8:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   169da:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   169dc:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   169de:	10 86       	std	Z+8, r1	; 0x08
   169e0:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   169e2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   169e6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   169ea:	81 81       	ldd	r24, Z+1	; 0x01
   169ec:	90 e0       	ldi	r25, 0x00	; 0
   169ee:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
    return(0);
}
   169f2:	80 e0       	ldi	r24, 0x00	; 0
   169f4:	90 e0       	ldi	r25, 0x00	; 0
   169f6:	0f 90       	pop	r0
   169f8:	0f 90       	pop	r0
   169fa:	0f 90       	pop	r0
   169fc:	08 95       	ret

000169fe <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   169fe:	af e0       	ldi	r26, 0x0F	; 15
   16a00:	b0 e0       	ldi	r27, 0x00	; 0
   16a02:	e5 e0       	ldi	r30, 0x05	; 5
   16a04:	f5 eb       	ldi	r31, 0xB5	; 181
   16a06:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
   16a0a:	c8 2f       	mov	r28, r24
   16a0c:	e6 2e       	mov	r14, r22
   16a0e:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16a10:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16a14:	90 e0       	ldi	r25, 0x00	; 0
   16a16:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   16a1a:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   16a1e:	f1 2c       	mov	r15, r1
   16a20:	d0 e0       	ldi	r29, 0x00	; 0
   16a22:	89 2b       	or	r24, r25
   16a24:	f1 f0       	breq	.+60     	; 0x16a62 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a26:	82 2f       	mov	r24, r18
   16a28:	90 e0       	ldi	r25, 0x00	; 0
   16a2a:	ed b7       	in	r30, 0x3d	; 61
   16a2c:	fe b7       	in	r31, 0x3e	; 62
   16a2e:	97 87       	std	Z+15, r25	; 0x0f
   16a30:	86 87       	std	Z+14, r24	; 0x0e
   16a32:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16a36:	90 e0       	ldi	r25, 0x00	; 0
   16a38:	95 87       	std	Z+13, r25	; 0x0d
   16a3a:	84 87       	std	Z+12, r24	; 0x0c
   16a3c:	13 87       	std	Z+11, r17	; 0x0b
   16a3e:	02 87       	std	Z+10, r16	; 0x0a
   16a40:	f1 86       	std	Z+9, r15	; 0x09
   16a42:	e0 86       	std	Z+8, r14	; 0x08
   16a44:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16a48:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a4c:	80 81       	ld	r24, Z
   16a4e:	90 e0       	ldi	r25, 0x00	; 0
   16a50:	ed b7       	in	r30, 0x3d	; 61
   16a52:	fe b7       	in	r31, 0x3e	; 62
   16a54:	97 83       	std	Z+7, r25	; 0x07
   16a56:	86 83       	std	Z+6, r24	; 0x06
   16a58:	d5 83       	std	Z+5, r29	; 0x05
   16a5a:	c4 83       	std	Z+4, r28	; 0x04
   16a5c:	81 e0       	ldi	r24, 0x01	; 1
   16a5e:	9c e2       	ldi	r25, 0x2C	; 44
   16a60:	51 c0       	rjmp	.+162    	; 0x16b04 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16a62:	82 2f       	mov	r24, r18
   16a64:	90 e0       	ldi	r25, 0x00	; 0
   16a66:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   16a6a:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   16a6e:	30 91 ee 1e 	lds	r19, 0x1EEE	; 0x801eee <talking>
   16a72:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   16a76:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   16a7a:	89 2b       	or	r24, r25
   16a7c:	b1 f0       	breq	.+44     	; 0x16aaa <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a7e:	83 2f       	mov	r24, r19
   16a80:	90 e0       	ldi	r25, 0x00	; 0
   16a82:	ed b7       	in	r30, 0x3d	; 61
   16a84:	fe b7       	in	r31, 0x3e	; 62
   16a86:	97 87       	std	Z+15, r25	; 0x0f
   16a88:	86 87       	std	Z+14, r24	; 0x0e
   16a8a:	30 e0       	ldi	r19, 0x00	; 0
   16a8c:	35 87       	std	Z+13, r19	; 0x0d
   16a8e:	24 87       	std	Z+12, r18	; 0x0c
   16a90:	13 87       	std	Z+11, r17	; 0x0b
   16a92:	02 87       	std	Z+10, r16	; 0x0a
   16a94:	f1 86       	std	Z+9, r15	; 0x09
   16a96:	e0 86       	std	Z+8, r14	; 0x08
   16a98:	8c 91       	ld	r24, X
   16a9a:	90 e0       	ldi	r25, 0x00	; 0
   16a9c:	97 83       	std	Z+7, r25	; 0x07
   16a9e:	86 83       	std	Z+6, r24	; 0x06
   16aa0:	d5 83       	std	Z+5, r29	; 0x05
   16aa2:	c4 83       	std	Z+4, r28	; 0x04
   16aa4:	8a e9       	ldi	r24, 0x9A	; 154
   16aa6:	9b e2       	ldi	r25, 0x2B	; 43
   16aa8:	2d c0       	rjmp	.+90     	; 0x16b04 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16aaa:	3f 35       	cpi	r19, 0x5F	; 95
   16aac:	b1 f4       	brne	.+44     	; 0x16ada <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16aae:	8f e5       	ldi	r24, 0x5F	; 95
   16ab0:	90 e0       	ldi	r25, 0x00	; 0
   16ab2:	ed b7       	in	r30, 0x3d	; 61
   16ab4:	fe b7       	in	r31, 0x3e	; 62
   16ab6:	97 87       	std	Z+15, r25	; 0x0f
   16ab8:	86 87       	std	Z+14, r24	; 0x0e
   16aba:	30 e0       	ldi	r19, 0x00	; 0
   16abc:	35 87       	std	Z+13, r19	; 0x0d
   16abe:	24 87       	std	Z+12, r18	; 0x0c
   16ac0:	13 87       	std	Z+11, r17	; 0x0b
   16ac2:	02 87       	std	Z+10, r16	; 0x0a
   16ac4:	f1 86       	std	Z+9, r15	; 0x09
   16ac6:	e0 86       	std	Z+8, r14	; 0x08
   16ac8:	8c 91       	ld	r24, X
   16aca:	90 e0       	ldi	r25, 0x00	; 0
   16acc:	97 83       	std	Z+7, r25	; 0x07
   16ace:	86 83       	std	Z+6, r24	; 0x06
   16ad0:	d5 83       	std	Z+5, r29	; 0x05
   16ad2:	c4 83       	std	Z+4, r28	; 0x04
   16ad4:	83 e3       	ldi	r24, 0x33	; 51
   16ad6:	9b e2       	ldi	r25, 0x2B	; 43
   16ad8:	15 c0       	rjmp	.+42     	; 0x16b04 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16ada:	83 2f       	mov	r24, r19
   16adc:	90 e0       	ldi	r25, 0x00	; 0
   16ade:	ed b7       	in	r30, 0x3d	; 61
   16ae0:	fe b7       	in	r31, 0x3e	; 62
   16ae2:	97 87       	std	Z+15, r25	; 0x0f
   16ae4:	86 87       	std	Z+14, r24	; 0x0e
   16ae6:	30 e0       	ldi	r19, 0x00	; 0
   16ae8:	35 87       	std	Z+13, r19	; 0x0d
   16aea:	24 87       	std	Z+12, r18	; 0x0c
   16aec:	13 87       	std	Z+11, r17	; 0x0b
   16aee:	02 87       	std	Z+10, r16	; 0x0a
   16af0:	f1 86       	std	Z+9, r15	; 0x09
   16af2:	e0 86       	std	Z+8, r14	; 0x08
   16af4:	8c 91       	ld	r24, X
   16af6:	90 e0       	ldi	r25, 0x00	; 0
   16af8:	97 83       	std	Z+7, r25	; 0x07
   16afa:	86 83       	std	Z+6, r24	; 0x06
   16afc:	d5 83       	std	Z+5, r29	; 0x05
   16afe:	c4 83       	std	Z+4, r28	; 0x04
   16b00:	8e ec       	ldi	r24, 0xCE	; 206
   16b02:	9a e2       	ldi	r25, 0x2A	; 42
   16b04:	a0 e0       	ldi	r26, 0x00	; 0
   16b06:	81 83       	std	Z+1, r24	; 0x01
   16b08:	92 83       	std	Z+2, r25	; 0x02
   16b0a:	a3 83       	std	Z+3, r26	; 0x03
   16b0c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16b10:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16b14:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16b18:	81 81       	ldd	r24, Z+1	; 0x01
   16b1a:	90 e0       	ldi	r25, 0x00	; 0
   16b1c:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
    return(0);
}
   16b20:	80 e0       	ldi	r24, 0x00	; 0
   16b22:	90 e0       	ldi	r25, 0x00	; 0
   16b24:	cd b7       	in	r28, 0x3d	; 61
   16b26:	de b7       	in	r29, 0x3e	; 62
   16b28:	2f 96       	adiw	r28, 0x0f	; 15
   16b2a:	e6 e0       	ldi	r30, 0x06	; 6
   16b2c:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00016b30 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16b30:	ab e0       	ldi	r26, 0x0B	; 11
   16b32:	b0 e0       	ldi	r27, 0x00	; 0
   16b34:	ee e9       	ldi	r30, 0x9E	; 158
   16b36:	f5 eb       	ldi	r31, 0xB5	; 181
   16b38:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   16b3c:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16b3e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16b42:	90 e0       	ldi	r25, 0x00	; 0
   16b44:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   16b48:	20 91 ee 1e 	lds	r18, 0x1EEE	; 0x801eee <talking>
   16b4c:	d0 e0       	ldi	r29, 0x00	; 0
   16b4e:	89 2b       	or	r24, r25
   16b50:	d1 f0       	breq	.+52     	; 0x16b86 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b52:	82 2f       	mov	r24, r18
   16b54:	90 e0       	ldi	r25, 0x00	; 0
   16b56:	ed b7       	in	r30, 0x3d	; 61
   16b58:	fe b7       	in	r31, 0x3e	; 62
   16b5a:	93 87       	std	Z+11, r25	; 0x0b
   16b5c:	82 87       	std	Z+10, r24	; 0x0a
   16b5e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16b62:	90 e0       	ldi	r25, 0x00	; 0
   16b64:	91 87       	std	Z+9, r25	; 0x09
   16b66:	80 87       	std	Z+8, r24	; 0x08
   16b68:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16b6c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b70:	80 81       	ld	r24, Z
   16b72:	90 e0       	ldi	r25, 0x00	; 0
   16b74:	ed b7       	in	r30, 0x3d	; 61
   16b76:	fe b7       	in	r31, 0x3e	; 62
   16b78:	97 83       	std	Z+7, r25	; 0x07
   16b7a:	86 83       	std	Z+6, r24	; 0x06
   16b7c:	d5 83       	std	Z+5, r29	; 0x05
   16b7e:	c4 83       	std	Z+4, r28	; 0x04
   16b80:	8e e7       	ldi	r24, 0x7E	; 126
   16b82:	9a e2       	ldi	r25, 0x2A	; 42
   16b84:	43 c0       	rjmp	.+134    	; 0x16c0c <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16b86:	82 2f       	mov	r24, r18
   16b88:	90 e0       	ldi	r25, 0x00	; 0
   16b8a:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   16b8e:	20 91 f0 1e 	lds	r18, 0x1EF0	; 0x801ef0 <listening>
   16b92:	40 91 ee 1e 	lds	r20, 0x1EEE	; 0x801eee <talking>
   16b96:	a0 91 62 19 	lds	r26, 0x1962	; 0x801962 <AMIGOs>
   16b9a:	b0 91 63 19 	lds	r27, 0x1963	; 0x801963 <AMIGOs+0x1>
   16b9e:	89 2b       	or	r24, r25
   16ba0:	89 f0       	breq	.+34     	; 0x16bc4 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16ba2:	50 e0       	ldi	r21, 0x00	; 0
   16ba4:	ed b7       	in	r30, 0x3d	; 61
   16ba6:	fe b7       	in	r31, 0x3e	; 62
   16ba8:	53 87       	std	Z+11, r21	; 0x0b
   16baa:	42 87       	std	Z+10, r20	; 0x0a
   16bac:	30 e0       	ldi	r19, 0x00	; 0
   16bae:	31 87       	std	Z+9, r19	; 0x09
   16bb0:	20 87       	std	Z+8, r18	; 0x08
   16bb2:	8c 91       	ld	r24, X
   16bb4:	90 e0       	ldi	r25, 0x00	; 0
   16bb6:	97 83       	std	Z+7, r25	; 0x07
   16bb8:	86 83       	std	Z+6, r24	; 0x06
   16bba:	d5 83       	std	Z+5, r29	; 0x05
   16bbc:	c4 83       	std	Z+4, r28	; 0x04
   16bbe:	8e e2       	ldi	r24, 0x2E	; 46
   16bc0:	9a e2       	ldi	r25, 0x2A	; 42
   16bc2:	24 c0       	rjmp	.+72     	; 0x16c0c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16bc4:	4f 35       	cpi	r20, 0x5F	; 95
   16bc6:	91 f4       	brne	.+36     	; 0x16bec <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16bc8:	8f e5       	ldi	r24, 0x5F	; 95
   16bca:	90 e0       	ldi	r25, 0x00	; 0
   16bcc:	ed b7       	in	r30, 0x3d	; 61
   16bce:	fe b7       	in	r31, 0x3e	; 62
   16bd0:	93 87       	std	Z+11, r25	; 0x0b
   16bd2:	82 87       	std	Z+10, r24	; 0x0a
   16bd4:	30 e0       	ldi	r19, 0x00	; 0
   16bd6:	31 87       	std	Z+9, r19	; 0x09
   16bd8:	20 87       	std	Z+8, r18	; 0x08
   16bda:	8c 91       	ld	r24, X
   16bdc:	90 e0       	ldi	r25, 0x00	; 0
   16bde:	97 83       	std	Z+7, r25	; 0x07
   16be0:	86 83       	std	Z+6, r24	; 0x06
   16be2:	d5 83       	std	Z+5, r29	; 0x05
   16be4:	c4 83       	std	Z+4, r28	; 0x04
   16be6:	8e ed       	ldi	r24, 0xDE	; 222
   16be8:	99 e2       	ldi	r25, 0x29	; 41
   16bea:	10 c0       	rjmp	.+32     	; 0x16c0c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16bec:	50 e0       	ldi	r21, 0x00	; 0
   16bee:	ed b7       	in	r30, 0x3d	; 61
   16bf0:	fe b7       	in	r31, 0x3e	; 62
   16bf2:	53 87       	std	Z+11, r21	; 0x0b
   16bf4:	42 87       	std	Z+10, r20	; 0x0a
   16bf6:	30 e0       	ldi	r19, 0x00	; 0
   16bf8:	31 87       	std	Z+9, r19	; 0x09
   16bfa:	20 87       	std	Z+8, r18	; 0x08
   16bfc:	8c 91       	ld	r24, X
   16bfe:	90 e0       	ldi	r25, 0x00	; 0
   16c00:	97 83       	std	Z+7, r25	; 0x07
   16c02:	86 83       	std	Z+6, r24	; 0x06
   16c04:	d5 83       	std	Z+5, r29	; 0x05
   16c06:	c4 83       	std	Z+4, r28	; 0x04
   16c08:	8d e8       	ldi	r24, 0x8D	; 141
   16c0a:	99 e2       	ldi	r25, 0x29	; 41
   16c0c:	a0 e0       	ldi	r26, 0x00	; 0
   16c0e:	81 83       	std	Z+1, r24	; 0x01
   16c10:	92 83       	std	Z+2, r25	; 0x02
   16c12:	a3 83       	std	Z+3, r26	; 0x03
   16c14:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16c18:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16c1c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16c20:	81 81       	ldd	r24, Z+1	; 0x01
   16c22:	90 e0       	ldi	r25, 0x00	; 0
   16c24:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
    return(0);
}
   16c28:	80 e0       	ldi	r24, 0x00	; 0
   16c2a:	90 e0       	ldi	r25, 0x00	; 0
   16c2c:	cd b7       	in	r28, 0x3d	; 61
   16c2e:	de b7       	in	r29, 0x3e	; 62
   16c30:	2b 96       	adiw	r28, 0x0b	; 11
   16c32:	e2 e0       	ldi	r30, 0x02	; 2
   16c34:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00016c38 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16c38:	8f 30       	cpi	r24, 0x0F	; 15
   16c3a:	29 f0       	breq	.+10     	; 0x16c46 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16c3c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c40:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c44:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16c46:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16c4a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16c4e:	81 81       	ldd	r24, Z+1	; 0x01
   16c50:	88 23       	and	r24, r24
   16c52:	29 f0       	breq	.+10     	; 0x16c5e <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16c54:	87 81       	ldd	r24, Z+7	; 0x07
   16c56:	90 85       	ldd	r25, Z+8	; 0x08
   16c58:	80 64       	ori	r24, 0x40	; 64
   16c5a:	90 87       	std	Z+8, r25	; 0x08
   16c5c:	87 83       	std	Z+7, r24	; 0x07
   16c5e:	08 95       	ret

00016c60 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16c60:	ac e1       	ldi	r26, 0x1C	; 28
   16c62:	b0 e0       	ldi	r27, 0x00	; 0
   16c64:	e6 e3       	ldi	r30, 0x36	; 54
   16c66:	f6 eb       	ldi	r31, 0xB6	; 182
   16c68:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
   16c6c:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16c6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c72:	85 ff       	sbrs	r24, 5
   16c74:	16 c0       	rjmp	.+44     	; 0x16ca2 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16c76:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16c7a:	90 e0       	ldi	r25, 0x00	; 0
   16c7c:	ed b7       	in	r30, 0x3d	; 61
   16c7e:	fe b7       	in	r31, 0x3e	; 62
   16c80:	91 87       	std	Z+9, r25	; 0x09
   16c82:	80 87       	std	Z+8, r24	; 0x08
   16c84:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16c88:	90 e0       	ldi	r25, 0x00	; 0
   16c8a:	97 83       	std	Z+7, r25	; 0x07
   16c8c:	86 83       	std	Z+6, r24	; 0x06
   16c8e:	f5 82       	std	Z+5, r15	; 0x05
   16c90:	e4 82       	std	Z+4, r14	; 0x04
   16c92:	8b e5       	ldi	r24, 0x5B	; 91
   16c94:	99 e2       	ldi	r25, 0x29	; 41
   16c96:	a0 e0       	ldi	r26, 0x00	; 0
   16c98:	81 83       	std	Z+1, r24	; 0x01
   16c9a:	92 83       	std	Z+2, r25	; 0x02
   16c9c:	a3 83       	std	Z+3, r26	; 0x03
   16c9e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16ca2:	fe e7       	ldi	r31, 0x7E	; 126
   16ca4:	ef 16       	cp	r14, r31
   16ca6:	f1 04       	cpc	r15, r1
   16ca8:	f1 f5       	brne	.+124    	; 0x16d26 <Amigo_Command+0xc6>
   16caa:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16cae:	90 e0       	ldi	r25, 0x00	; 0
   16cb0:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   16cb4:	89 2b       	or	r24, r25
   16cb6:	09 f4       	brne	.+2      	; 0x16cba <Amigo_Command+0x5a>
   16cb8:	86 c0       	rjmp	.+268    	; 0x16dc6 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16cba:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16cbe:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16cc2:	81 81       	ldd	r24, Z+1	; 0x01
   16cc4:	90 e0       	ldi	r25, 0x00	; 0
   16cc6:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
        status = EOI_FLAG;
   16cca:	80 e0       	ldi	r24, 0x00	; 0
   16ccc:	91 e0       	ldi	r25, 0x01	; 1
   16cce:	9c 8f       	std	Y+28, r25	; 0x1c
   16cd0:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16cd2:	ae 01       	movw	r20, r28
   16cd4:	45 5e       	subi	r20, 0xE5	; 229
   16cd6:	5f 4f       	sbci	r21, 0xFF	; 255
   16cd8:	60 e0       	ldi	r22, 0x00	; 0
   16cda:	72 e0       	ldi	r23, 0x02	; 2
   16cdc:	8a ee       	ldi	r24, 0xEA	; 234
   16cde:	9c e1       	ldi	r25, 0x1C	; 28
   16ce0:	0e 94 a1 89 	call	0x11342	; 0x11342 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16ce4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16ce8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16cec:	81 81       	ldd	r24, Z+1	; 0x01
   16cee:	90 e0       	ldi	r25, 0x00	; 0
   16cf0:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16cf8:	88 27       	eor	r24, r24
   16cfa:	90 7d       	andi	r25, 0xD0	; 208
   16cfc:	89 2b       	or	r24, r25
   16cfe:	09 f4       	brne	.+2      	; 0x16d02 <Amigo_Command+0xa2>
   16d00:	89 c2       	rjmp	.+1298   	; 0x17214 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16d02:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16d06:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16d0a:	81 e0       	ldi	r24, 0x01	; 1
   16d0c:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16d0e:	87 81       	ldd	r24, Z+7	; 0x07
   16d10:	90 85       	ldd	r25, Z+8	; 0x08
   16d12:	80 62       	ori	r24, 0x20	; 32
   16d14:	90 87       	std	Z+8, r25	; 0x08
   16d16:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16d18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d1c:	80 ff       	sbrs	r24, 0
   16d1e:	7a c2       	rjmp	.+1268   	; 0x17214 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16d20:	89 e3       	ldi	r24, 0x39	; 57
   16d22:	99 e2       	ldi	r25, 0x29	; 41
   16d24:	8e c0       	rjmp	.+284    	; 0x16e42 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16d26:	ff e7       	ldi	r31, 0x7F	; 127
   16d28:	ef 16       	cp	r14, r31
   16d2a:	f1 04       	cpc	r15, r1
   16d2c:	09 f0       	breq	.+2      	; 0x16d30 <Amigo_Command+0xd0>
   16d2e:	4b c0       	rjmp	.+150    	; 0x16dc6 <Amigo_Command+0x166>
   16d30:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16d34:	90 e0       	ldi	r25, 0x00	; 0
   16d36:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   16d3a:	89 2b       	or	r24, r25
   16d3c:	09 f4       	brne	.+2      	; 0x16d40 <Amigo_Command+0xe0>
   16d3e:	43 c0       	rjmp	.+134    	; 0x16dc6 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d40:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d44:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d48:	81 81       	ldd	r24, Z+1	; 0x01
   16d4a:	90 e0       	ldi	r25, 0x00	; 0
   16d4c:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16d50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d54:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16d56:	0e 94 97 83 	call	0x1072e	; 0x1072e <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16d5a:	80 e0       	ldi	r24, 0x00	; 0
   16d5c:	91 e0       	ldi	r25, 0x01	; 1
   16d5e:	9c 8f       	std	Y+28, r25	; 0x1c
   16d60:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d62:	ae 01       	movw	r20, r28
   16d64:	45 5e       	subi	r20, 0xE5	; 229
   16d66:	5f 4f       	sbci	r21, 0xFF	; 255
   16d68:	60 e0       	ldi	r22, 0x00	; 0
   16d6a:	72 e0       	ldi	r23, 0x02	; 2
   16d6c:	8a ee       	ldi	r24, 0xEA	; 234
   16d6e:	9c e1       	ldi	r25, 0x1C	; 28
   16d70:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16d74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d78:	87 ff       	sbrs	r24, 7
   16d7a:	04 c0       	rjmp	.+8      	; 0x16d84 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16d7c:	8a ec       	ldi	r24, 0xCA	; 202
   16d7e:	95 e1       	ldi	r25, 0x15	; 21
   16d80:	0e 94 a9 83 	call	0x10752	; 0x10752 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d84:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16d88:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16d8c:	81 81       	ldd	r24, Z+1	; 0x01
   16d8e:	90 e0       	ldi	r25, 0x00	; 0
   16d90:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16d98:	88 27       	eor	r24, r24
   16d9a:	90 7d       	andi	r25, 0xD0	; 208
   16d9c:	89 2b       	or	r24, r25
   16d9e:	09 f4       	brne	.+2      	; 0x16da2 <Amigo_Command+0x142>
   16da0:	39 c2       	rjmp	.+1138   	; 0x17214 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16da2:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16da6:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16daa:	81 e0       	ldi	r24, 0x01	; 1
   16dac:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16dae:	87 81       	ldd	r24, Z+7	; 0x07
   16db0:	90 85       	ldd	r25, Z+8	; 0x08
   16db2:	80 62       	ori	r24, 0x20	; 32
   16db4:	90 87       	std	Z+8, r25	; 0x08
   16db6:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16db8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dbc:	80 ff       	sbrs	r24, 0
   16dbe:	2a c2       	rjmp	.+1108   	; 0x17214 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16dc0:	88 e1       	ldi	r24, 0x18	; 24
   16dc2:	99 e2       	ldi	r25, 0x29	; 41
   16dc4:	3e c0       	rjmp	.+124    	; 0x16e42 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16dc6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   16dca:	90 e0       	ldi	r25, 0x00	; 0
   16dcc:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   16dd0:	89 2b       	or	r24, r25
   16dd2:	19 f4       	brne	.+6      	; 0x16dda <Amigo_Command+0x17a>
        return(0);
   16dd4:	80 e0       	ldi	r24, 0x00	; 0
   16dd6:	90 e0       	ldi	r25, 0x00	; 0
   16dd8:	25 c2       	rjmp	.+1098   	; 0x17224 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16dda:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   16dde:	90 e0       	ldi	r25, 0x00	; 0
   16de0:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   16de4:	89 2b       	or	r24, r25
   16de6:	b1 f7       	brne	.-20     	; 0x16dd4 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16de8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   16dec:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   16df0:	81 81       	ldd	r24, Z+1	; 0x01
   16df2:	90 e0       	ldi	r25, 0x00	; 0
   16df4:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16df8:	80 e0       	ldi	r24, 0x00	; 0
   16dfa:	91 e0       	ldi	r25, 0x01	; 1
   16dfc:	9c 8f       	std	Y+28, r25	; 0x1c
   16dfe:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e00:	ae 01       	movw	r20, r28
   16e02:	45 5e       	subi	r20, 0xE5	; 229
   16e04:	5f 4f       	sbci	r21, 0xFF	; 255
   16e06:	60 e0       	ldi	r22, 0x00	; 0
   16e08:	72 e0       	ldi	r23, 0x02	; 2
   16e0a:	8a ee       	ldi	r24, 0xEA	; 234
   16e0c:	9c e1       	ldi	r25, 0x1C	; 28
   16e0e:	0e 94 ff 88 	call	0x111fe	; 0x111fe <gpib_read_str>
   16e12:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16e18:	88 27       	eor	r24, r24
   16e1a:	90 7d       	andi	r25, 0xD0	; 208
   16e1c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16e20:	89 2b       	or	r24, r25
   16e22:	c1 f0       	breq	.+48     	; 0x16e54 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16e24:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e28:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e2c:	81 e0       	ldi	r24, 0x01	; 1
   16e2e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16e30:	87 81       	ldd	r24, Z+7	; 0x07
   16e32:	90 85       	ldd	r25, Z+8	; 0x08
   16e34:	80 62       	ori	r24, 0x20	; 32
   16e36:	90 87       	std	Z+8, r25	; 0x08
   16e38:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16e3a:	20 ff       	sbrs	r18, 0
   16e3c:	eb c1       	rjmp	.+982    	; 0x17214 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16e3e:	87 ef       	ldi	r24, 0xF7	; 247
   16e40:	98 e2       	ldi	r25, 0x28	; 40
   16e42:	a0 e0       	ldi	r26, 0x00	; 0
   16e44:	ed b7       	in	r30, 0x3d	; 61
   16e46:	fe b7       	in	r31, 0x3e	; 62
   16e48:	81 83       	std	Z+1, r24	; 0x01
   16e4a:	92 83       	std	Z+2, r25	; 0x02
   16e4c:	a3 83       	std	Z+3, r26	; 0x03
   16e4e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   16e52:	e0 c1       	rjmp	.+960    	; 0x17214 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e54:	25 ff       	sbrs	r18, 5
   16e56:	0e c0       	rjmp	.+28     	; 0x16e74 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16e58:	ed b7       	in	r30, 0x3d	; 61
   16e5a:	fe b7       	in	r31, 0x3e	; 62
   16e5c:	17 83       	std	Z+7, r17	; 0x07
   16e5e:	06 83       	std	Z+6, r16	; 0x06
   16e60:	f5 82       	std	Z+5, r15	; 0x05
   16e62:	e4 82       	std	Z+4, r14	; 0x04
   16e64:	88 ec       	ldi	r24, 0xC8	; 200
   16e66:	98 e2       	ldi	r25, 0x28	; 40
   16e68:	a0 e0       	ldi	r26, 0x00	; 0
   16e6a:	81 83       	std	Z+1, r24	; 0x01
   16e6c:	92 83       	std	Z+2, r25	; 0x02
   16e6e:	a3 83       	std	Z+3, r26	; 0x03
   16e70:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            secondary, len);
#endif
    if(!len)
   16e74:	01 15       	cp	r16, r1
   16e76:	11 05       	cpc	r17, r1
   16e78:	61 f4       	brne	.+24     	; 0x16e92 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16e7a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16e7e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16e82:	81 e0       	ldi	r24, 0x01	; 1
   16e84:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16e86:	87 81       	ldd	r24, Z+7	; 0x07
   16e88:	90 85       	ldd	r25, Z+8	; 0x08
   16e8a:	80 62       	ori	r24, 0x20	; 32
   16e8c:	90 87       	std	Z+8, r25	; 0x08
   16e8e:	87 83       	std	Z+7, r24	; 0x07
   16e90:	c1 c1       	rjmp	.+898    	; 0x17214 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16e92:	60 91 ea 1c 	lds	r22, 0x1CEA	; 0x801cea <gpib_iobuff>

    if (secondary == 0x68)
   16e96:	f8 e6       	ldi	r31, 0x68	; 104
   16e98:	ef 16       	cp	r14, r31
   16e9a:	f1 04       	cpc	r15, r1
   16e9c:	09 f0       	breq	.+2      	; 0x16ea0 <Amigo_Command+0x240>
   16e9e:	28 c1       	rjmp	.+592    	; 0x170f0 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16ea0:	61 11       	cpse	r22, r1
   16ea2:	2e c0       	rjmp	.+92     	; 0x16f00 <Amigo_Command+0x2a0>
   16ea4:	02 30       	cpi	r16, 0x02	; 2
   16ea6:	11 05       	cpc	r17, r1
   16ea8:	09 f0       	breq	.+2      	; 0x16eac <Amigo_Command+0x24c>
   16eaa:	b9 c1       	rjmp	.+882    	; 0x1721e <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16eac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eb0:	85 ff       	sbrs	r24, 5
   16eb2:	0a c0       	rjmp	.+20     	; 0x16ec8 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16eb4:	88 ea       	ldi	r24, 0xA8	; 168
   16eb6:	98 e2       	ldi	r25, 0x28	; 40
   16eb8:	a0 e0       	ldi	r26, 0x00	; 0
   16eba:	ed b7       	in	r30, 0x3d	; 61
   16ebc:	fe b7       	in	r31, 0x3e	; 62
   16ebe:	81 83       	std	Z+1, r24	; 0x01
   16ec0:	92 83       	std	Z+2, r25	; 0x02
   16ec2:	a3 83       	std	Z+3, r26	; 0x03
   16ec4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16ec8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16ecc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ed0:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16ed2:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16ed4:	10 86       	std	Z+8, r1	; 0x08
   16ed6:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16ed8:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16eda:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   16ede:	98 2f       	mov	r25, r24
   16ee0:	92 95       	swap	r25
   16ee2:	96 95       	lsr	r25
   16ee4:	96 95       	lsr	r25
   16ee6:	93 70       	andi	r25, 0x03	; 3
   16ee8:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16eea:	8f 73       	andi	r24, 0x3F	; 63
   16eec:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16eee:	ce 01       	movw	r24, r28
   16ef0:	0a 96       	adiw	r24, 0x0a	; 10
   16ef2:	d1 d9       	rcall	.-3166   	; 0x16296 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16ef4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16ef8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16efc:	85 e0       	ldi	r24, 0x05	; 5
   16efe:	19 c1       	rjmp	.+562    	; 0x17132 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16f00:	62 30       	cpi	r22, 0x02	; 2
   16f02:	09 f0       	breq	.+2      	; 0x16f06 <Amigo_Command+0x2a6>
   16f04:	3f c0       	rjmp	.+126    	; 0x16f84 <Amigo_Command+0x324>
   16f06:	05 30       	cpi	r16, 0x05	; 5
   16f08:	11 05       	cpc	r17, r1
   16f0a:	d1 f4       	brne	.+52     	; 0x16f40 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f10:	85 ff       	sbrs	r24, 5
   16f12:	0a c0       	rjmp	.+20     	; 0x16f28 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16f14:	84 e9       	ldi	r24, 0x94	; 148
   16f16:	98 e2       	ldi	r25, 0x28	; 40
   16f18:	a0 e0       	ldi	r26, 0x00	; 0
   16f1a:	ed b7       	in	r30, 0x3d	; 61
   16f1c:	fe b7       	in	r31, 0x3e	; 62
   16f1e:	81 83       	std	Z+1, r24	; 0x01
   16f20:	92 83       	std	Z+2, r25	; 0x02
   16f22:	a3 83       	std	Z+3, r26	; 0x03
   16f24:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f28:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   16f2c:	85 de       	rcall	.-758    	; 0x16c38 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16f2e:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   16f32:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16f34:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   16f38:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16f3a:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   16f3e:	1d c0       	rjmp	.+58     	; 0x16f7a <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16f40:	06 30       	cpi	r16, 0x06	; 6
   16f42:	11 05       	cpc	r17, r1
   16f44:	09 f0       	breq	.+2      	; 0x16f48 <Amigo_Command+0x2e8>
   16f46:	6b c1       	rjmp	.+726    	; 0x1721e <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f4c:	85 ff       	sbrs	r24, 5
   16f4e:	0a c0       	rjmp	.+20     	; 0x16f64 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16f50:	80 e8       	ldi	r24, 0x80	; 128
   16f52:	98 e2       	ldi	r25, 0x28	; 40
   16f54:	a0 e0       	ldi	r26, 0x00	; 0
   16f56:	ed b7       	in	r30, 0x3d	; 61
   16f58:	fe b7       	in	r31, 0x3e	; 62
   16f5a:	81 83       	std	Z+1, r24	; 0x01
   16f5c:	92 83       	std	Z+2, r25	; 0x02
   16f5e:	a3 83       	std	Z+3, r26	; 0x03
   16f60:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f64:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   16f68:	67 de       	rcall	.-818    	; 0x16c38 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16f6a:	80 91 ed 1c 	lds	r24, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   16f6e:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16f70:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   16f74:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16f76:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16f7a:	8f 87       	std	Y+15, r24	; 0x0f
   16f7c:	ce 01       	movw	r24, r28
   16f7e:	0a 96       	adiw	r24, 0x0a	; 10
   16f80:	8a d9       	rcall	.-3308   	; 0x16296 <amigo_seek>
   16f82:	d8 c0       	rjmp	.+432    	; 0x17134 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16f84:	63 30       	cpi	r22, 0x03	; 3
   16f86:	e9 f4       	brne	.+58     	; 0x16fc2 <Amigo_Command+0x362>
   16f88:	02 30       	cpi	r16, 0x02	; 2
   16f8a:	11 05       	cpc	r17, r1
   16f8c:	09 f0       	breq	.+2      	; 0x16f90 <Amigo_Command+0x330>
   16f8e:	47 c1       	rjmp	.+654    	; 0x1721e <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f94:	85 ff       	sbrs	r24, 5
   16f96:	0a c0       	rjmp	.+20     	; 0x16fac <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16f98:	87 e5       	ldi	r24, 0x57	; 87
   16f9a:	98 e2       	ldi	r25, 0x28	; 40
   16f9c:	a0 e0       	ldi	r26, 0x00	; 0
   16f9e:	ed b7       	in	r30, 0x3d	; 61
   16fa0:	fe b7       	in	r31, 0x3e	; 62
   16fa2:	81 83       	std	Z+1, r24	; 0x01
   16fa4:	92 83       	std	Z+2, r25	; 0x02
   16fa6:	a3 83       	std	Z+3, r26	; 0x03
   16fa8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fac:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            amigo_request_status();
   16fb0:	43 de       	rcall	.-890    	; 0x16c38 <amigo_check_unit>
   16fb2:	3d d8       	rcall	.-3974   	; 0x1602e <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16fb4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16fb8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16fbc:	83 e0       	ldi	r24, 0x03	; 3
   16fbe:	80 83       	st	Z, r24
   16fc0:	29 c1       	rjmp	.+594    	; 0x17214 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16fc2:	65 30       	cpi	r22, 0x05	; 5
   16fc4:	d9 f4       	brne	.+54     	; 0x16ffc <Amigo_Command+0x39c>
   16fc6:	02 30       	cpi	r16, 0x02	; 2
   16fc8:	11 05       	cpc	r17, r1
   16fca:	09 f0       	breq	.+2      	; 0x16fce <Amigo_Command+0x36e>
   16fcc:	28 c1       	rjmp	.+592    	; 0x1721e <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fd2:	85 ff       	sbrs	r24, 5
   16fd4:	0a c0       	rjmp	.+20     	; 0x16fea <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   16fd6:	86 e3       	ldi	r24, 0x36	; 54
   16fd8:	98 e2       	ldi	r25, 0x28	; 40
   16fda:	a0 e0       	ldi	r26, 0x00	; 0
   16fdc:	ed b7       	in	r30, 0x3d	; 61
   16fde:	fe b7       	in	r31, 0x3e	; 62
   16fe0:	81 83       	std	Z+1, r24	; 0x01
   16fe2:	92 83       	std	Z+2, r25	; 0x02
   16fe4:	a3 83       	std	Z+3, r26	; 0x03
   16fe6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fea:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   16fee:	24 de       	rcall	.-952    	; 0x16c38 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16ff0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   16ff4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   16ff8:	86 e0       	ldi	r24, 0x06	; 6
   16ffa:	e7 c0       	rjmp	.+462    	; 0x171ca <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   16ffc:	67 30       	cpi	r22, 0x07	; 7
   16ffe:	f9 f4       	brne	.+62     	; 0x1703e <Amigo_Command+0x3de>
   17000:	04 30       	cpi	r16, 0x04	; 4
   17002:	11 05       	cpc	r17, r1
   17004:	09 f0       	breq	.+2      	; 0x17008 <Amigo_Command+0x3a8>
   17006:	0b c1       	rjmp	.+534    	; 0x1721e <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17008:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1700c:	85 ff       	sbrs	r24, 5
   1700e:	0a c0       	rjmp	.+20     	; 0x17024 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   17010:	86 e2       	ldi	r24, 0x26	; 38
   17012:	98 e2       	ldi	r25, 0x28	; 40
   17014:	a0 e0       	ldi	r26, 0x00	; 0
   17016:	ed b7       	in	r30, 0x3d	; 61
   17018:	fe b7       	in	r31, 0x3e	; 62
   1701a:	81 83       	std	Z+1, r24	; 0x01
   1701c:	92 83       	std	Z+2, r25	; 0x02
   1701e:	a3 83       	std	Z+3, r26	; 0x03
   17020:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17024:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17028:	07 de       	rcall	.-1010   	; 0x16c38 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   1702a:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x2>
   1702e:	90 e0       	ldi	r25, 0x00	; 0
   17030:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17032:	88 27       	eor	r24, r24
   17034:	20 91 ed 1c 	lds	r18, 0x1CED	; 0x801ced <gpib_iobuff+0x3>
   17038:	82 2b       	or	r24, r18
   1703a:	58 d9       	rcall	.-3408   	; 0x162ec <amigo_verify>
   1703c:	f3 c0       	rjmp	.+486    	; 0x17224 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   1703e:	68 30       	cpi	r22, 0x08	; 8
   17040:	d9 f4       	brne	.+54     	; 0x17078 <Amigo_Command+0x418>
   17042:	02 30       	cpi	r16, 0x02	; 2
   17044:	11 05       	cpc	r17, r1
   17046:	09 f0       	breq	.+2      	; 0x1704a <Amigo_Command+0x3ea>
   17048:	ea c0       	rjmp	.+468    	; 0x1721e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1704a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1704e:	85 ff       	sbrs	r24, 5
   17050:	0a c0       	rjmp	.+20     	; 0x17066 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17052:	84 e0       	ldi	r24, 0x04	; 4
   17054:	98 e2       	ldi	r25, 0x28	; 40
   17056:	a0 e0       	ldi	r26, 0x00	; 0
   17058:	ed b7       	in	r30, 0x3d	; 61
   1705a:	fe b7       	in	r31, 0x3e	; 62
   1705c:	81 83       	std	Z+1, r24	; 0x01
   1705e:	92 83       	std	Z+2, r25	; 0x02
   17060:	a3 83       	std	Z+3, r26	; 0x03
   17062:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17066:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1706a:	e6 dd       	rcall	.-1076   	; 0x16c38 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1706c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17070:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17074:	88 e0       	ldi	r24, 0x08	; 8
   17076:	5d c0       	rjmp	.+186    	; 0x17132 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17078:	86 2f       	mov	r24, r22
   1707a:	8f 7d       	andi	r24, 0xDF	; 223
   1707c:	8b 30       	cpi	r24, 0x0B	; 11
   1707e:	d9 f4       	brne	.+54     	; 0x170b6 <Amigo_Command+0x456>
   17080:	02 30       	cpi	r16, 0x02	; 2
   17082:	11 05       	cpc	r17, r1
   17084:	09 f0       	breq	.+2      	; 0x17088 <Amigo_Command+0x428>
   17086:	cb c0       	rjmp	.+406    	; 0x1721e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17088:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1708c:	85 ff       	sbrs	r24, 5
   1708e:	0a c0       	rjmp	.+20     	; 0x170a4 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17090:	88 ee       	ldi	r24, 0xE8	; 232
   17092:	97 e2       	ldi	r25, 0x27	; 39
   17094:	a0 e0       	ldi	r26, 0x00	; 0
   17096:	ed b7       	in	r30, 0x3d	; 61
   17098:	fe b7       	in	r31, 0x3e	; 62
   1709a:	81 83       	std	Z+1, r24	; 0x01
   1709c:	92 83       	std	Z+2, r25	; 0x02
   1709e:	a3 83       	std	Z+3, r26	; 0x03
   170a0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170a4:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   170a8:	c7 dd       	rcall	.-1138   	; 0x16c38 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   170aa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170ae:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170b2:	8a e0       	ldi	r24, 0x0A	; 10
   170b4:	3e c0       	rjmp	.+124    	; 0x17132 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   170b6:	64 31       	cpi	r22, 0x14	; 20
   170b8:	09 f0       	breq	.+2      	; 0x170bc <Amigo_Command+0x45c>
   170ba:	b1 c0       	rjmp	.+354    	; 0x1721e <Amigo_Command+0x5be>
   170bc:	02 30       	cpi	r16, 0x02	; 2
   170be:	11 05       	cpc	r17, r1
   170c0:	09 f0       	breq	.+2      	; 0x170c4 <Amigo_Command+0x464>
   170c2:	ad c0       	rjmp	.+346    	; 0x1721e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170c8:	85 ff       	sbrs	r24, 5
   170ca:	0a c0       	rjmp	.+20     	; 0x170e0 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   170cc:	8f eb       	ldi	r24, 0xBF	; 191
   170ce:	97 e2       	ldi	r25, 0x27	; 39
   170d0:	a0 e0       	ldi	r26, 0x00	; 0
   170d2:	ed b7       	in	r30, 0x3d	; 61
   170d4:	fe b7       	in	r31, 0x3e	; 62
   170d6:	81 83       	std	Z+1, r24	; 0x01
   170d8:	92 83       	std	Z+2, r25	; 0x02
   170da:	a3 83       	std	Z+3, r26	; 0x03
   170dc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
            amigo_request_logical_address();
   170e0:	0e 94 09 b0 	call	0x16012	; 0x16012 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   170e4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   170e8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   170ec:	84 e0       	ldi	r24, 0x04	; 4
   170ee:	21 c0       	rjmp	.+66     	; 0x17132 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   170f0:	f9 e6       	ldi	r31, 0x69	; 105
   170f2:	ef 16       	cp	r14, r31
   170f4:	f1 04       	cpc	r15, r1
   170f6:	39 f5       	brne	.+78     	; 0x17146 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   170f8:	68 30       	cpi	r22, 0x08	; 8
   170fa:	09 f0       	breq	.+2      	; 0x170fe <Amigo_Command+0x49e>
   170fc:	90 c0       	rjmp	.+288    	; 0x1721e <Amigo_Command+0x5be>
   170fe:	02 30       	cpi	r16, 0x02	; 2
   17100:	11 05       	cpc	r17, r1
   17102:	09 f0       	breq	.+2      	; 0x17106 <Amigo_Command+0x4a6>
   17104:	8c c0       	rjmp	.+280    	; 0x1721e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17106:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1710a:	85 ff       	sbrs	r24, 5
   1710c:	0a c0       	rjmp	.+20     	; 0x17122 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   1710e:	8f e9       	ldi	r24, 0x9F	; 159
   17110:	97 e2       	ldi	r25, 0x27	; 39
   17112:	a0 e0       	ldi	r26, 0x00	; 0
   17114:	ed b7       	in	r30, 0x3d	; 61
   17116:	fe b7       	in	r31, 0x3e	; 62
   17118:	81 83       	std	Z+1, r24	; 0x01
   1711a:	92 83       	std	Z+2, r25	; 0x02
   1711c:	a3 83       	std	Z+3, r26	; 0x03
   1711e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17122:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   17126:	88 dd       	rcall	.-1264   	; 0x16c38 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17128:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1712c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17130:	89 e0       	ldi	r24, 0x09	; 9
   17132:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17134:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   17138:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   1713c:	81 81       	ldd	r24, Z+1	; 0x01
   1713e:	90 e0       	ldi	r25, 0x00	; 0
   17140:	0e 94 71 84 	call	0x108e2	; 0x108e2 <gpib_enable_PPR>
   17144:	67 c0       	rjmp	.+206    	; 0x17214 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17146:	fa e6       	ldi	r31, 0x6A	; 106
   17148:	ef 16       	cp	r14, r31
   1714a:	f1 04       	cpc	r15, r1
   1714c:	09 f0       	breq	.+2      	; 0x17150 <Amigo_Command+0x4f0>
   1714e:	40 c0       	rjmp	.+128    	; 0x171d0 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17150:	68 30       	cpi	r22, 0x08	; 8
   17152:	f1 f4       	brne	.+60     	; 0x17190 <Amigo_Command+0x530>
   17154:	02 30       	cpi	r16, 0x02	; 2
   17156:	11 05       	cpc	r17, r1
   17158:	09 f0       	breq	.+2      	; 0x1715c <Amigo_Command+0x4fc>
   1715a:	61 c0       	rjmp	.+194    	; 0x1721e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1715c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17160:	85 ff       	sbrs	r24, 5
   17162:	0a c0       	rjmp	.+20     	; 0x17178 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17164:	84 e7       	ldi	r24, 0x74	; 116
   17166:	97 e2       	ldi	r25, 0x27	; 39
   17168:	a0 e0       	ldi	r26, 0x00	; 0
   1716a:	ed b7       	in	r30, 0x3d	; 61
   1716c:	fe b7       	in	r31, 0x3e	; 62
   1716e:	81 83       	std	Z+1, r24	; 0x01
   17170:	92 83       	std	Z+2, r25	; 0x02
   17172:	a3 83       	std	Z+3, r26	; 0x03
   17174:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17178:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
   1717c:	5d dd       	rcall	.-1350   	; 0x16c38 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   1717e:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   17182:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17186:	82 e0       	ldi	r24, 0x02	; 2
   17188:	80 83       	st	Z, r24
            amigo_request_status();
   1718a:	0e 94 17 b0 	call	0x1602e	; 0x1602e <amigo_request_status>
   1718e:	42 c0       	rjmp	.+132    	; 0x17214 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17190:	65 30       	cpi	r22, 0x05	; 5
   17192:	09 f0       	breq	.+2      	; 0x17196 <Amigo_Command+0x536>
   17194:	44 c0       	rjmp	.+136    	; 0x1721e <Amigo_Command+0x5be>
   17196:	02 30       	cpi	r16, 0x02	; 2
   17198:	11 05       	cpc	r17, r1
   1719a:	09 f0       	breq	.+2      	; 0x1719e <Amigo_Command+0x53e>
   1719c:	40 c0       	rjmp	.+128    	; 0x1721e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1719e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171a2:	85 ff       	sbrs	r24, 5
   171a4:	0a c0       	rjmp	.+20     	; 0x171ba <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   171a6:	85 e5       	ldi	r24, 0x55	; 85
   171a8:	97 e2       	ldi	r25, 0x27	; 39
   171aa:	a0 e0       	ldi	r26, 0x00	; 0
   171ac:	ed b7       	in	r30, 0x3d	; 61
   171ae:	fe b7       	in	r31, 0x3e	; 62
   171b0:	81 83       	std	Z+1, r24	; 0x01
   171b2:	92 83       	std	Z+2, r25	; 0x02
   171b4:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171b6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   171ba:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   171be:	3c dd       	rcall	.-1416   	; 0x16c38 <amigo_check_unit>
   171c0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   171c4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   171c8:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   171ca:	80 83       	st	Z, r24
   171cc:	c5 d9       	rcall	.-3190   	; 0x16558 <amigo_buffered_read_command>
   171ce:	2a c0       	rjmp	.+84     	; 0x17224 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   171d0:	fc e6       	ldi	r31, 0x6C	; 108
   171d2:	ef 16       	cp	r14, r31
   171d4:	f1 04       	cpc	r15, r1
   171d6:	d1 f4       	brne	.+52     	; 0x1720c <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   171d8:	68 31       	cpi	r22, 0x18	; 24
   171da:	09 f5       	brne	.+66     	; 0x1721e <Amigo_Command+0x5be>
   171dc:	05 30       	cpi	r16, 0x05	; 5
   171de:	11 05       	cpc	r17, r1
   171e0:	f1 f4       	brne	.+60     	; 0x1721e <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171e6:	85 ff       	sbrs	r24, 5
   171e8:	0a c0       	rjmp	.+20     	; 0x171fe <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   171ea:	85 e4       	ldi	r24, 0x45	; 69
   171ec:	97 e2       	ldi	r25, 0x27	; 39
   171ee:	a0 e0       	ldi	r26, 0x00	; 0
   171f0:	ed b7       	in	r30, 0x3d	; 61
   171f2:	fe b7       	in	r31, 0x3e	; 62
   171f4:	81 83       	std	Z+1, r24	; 0x01
   171f6:	92 83       	std	Z+2, r25	; 0x02
   171f8:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171fa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   171fe:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17202:	1a dd       	rcall	.-1484   	; 0x16c38 <amigo_check_unit>
   17204:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x4>
   17208:	0f d9       	rcall	.-3554   	; 0x16428 <amigo_format>
   1720a:	04 c0       	rjmp	.+8      	; 0x17214 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   1720c:	f0 e7       	ldi	r31, 0x70	; 112
   1720e:	ef 16       	cp	r14, r31
   17210:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17212:	29 f4       	brne	.+10     	; 0x1721e <Amigo_Command+0x5be>
   17214:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17216:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17218:	88 27       	eor	r24, r24
   1721a:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   1721c:	03 c0       	rjmp	.+6      	; 0x17224 <Amigo_Command+0x5c4>
   1721e:	a8 01       	movw	r20, r16
   17220:	8e 2d       	mov	r24, r14
   17222:	ed db       	rcall	.-2086   	; 0x169fe <amigo_todo_op>
}
   17224:	6c 96       	adiw	r28, 0x1c	; 28
   17226:	e6 e0       	ldi	r30, 0x06	; 6
   17228:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0001722c <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   1722c:	a9 e0       	ldi	r26, 0x09	; 9
   1722e:	b0 e0       	ldi	r27, 0x00	; 0
   17230:	ec e1       	ldi	r30, 0x1C	; 28
   17232:	f9 eb       	ldi	r31, 0xB9	; 185
   17234:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   17238:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1723a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1723e:	85 ff       	sbrs	r24, 5
   17240:	16 c0       	rjmp	.+44     	; 0x1726e <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17242:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17246:	90 e0       	ldi	r25, 0x00	; 0
   17248:	ed b7       	in	r30, 0x3d	; 61
   1724a:	fe b7       	in	r31, 0x3e	; 62
   1724c:	91 87       	std	Z+9, r25	; 0x09
   1724e:	80 87       	std	Z+8, r24	; 0x08
   17250:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17254:	90 e0       	ldi	r25, 0x00	; 0
   17256:	97 83       	std	Z+7, r25	; 0x07
   17258:	86 83       	std	Z+6, r24	; 0x06
   1725a:	d5 83       	std	Z+5, r29	; 0x05
   1725c:	c4 83       	std	Z+4, r28	; 0x04
   1725e:	83 e1       	ldi	r24, 0x13	; 19
   17260:	97 e2       	ldi	r25, 0x27	; 39
   17262:	a0 e0       	ldi	r26, 0x00	; 0
   17264:	81 83       	std	Z+1, r24	; 0x01
   17266:	92 83       	std	Z+2, r25	; 0x02
   17268:	a3 83       	std	Z+3, r26	; 0x03
   1726a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1726e:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17272:	8f 35       	cpi	r24, 0x5F	; 95
   17274:	09 f4       	brne	.+2      	; 0x17278 <Amigo_Execute+0x4c>
   17276:	ad c0       	rjmp	.+346    	; 0x173d2 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17278:	90 e0       	ldi	r25, 0x00	; 0
   1727a:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   1727e:	89 2b       	or	r24, r25
   17280:	39 f0       	breq	.+14     	; 0x17290 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17282:	ce 01       	movw	r24, r28
   17284:	87 7f       	andi	r24, 0xF7	; 247
   17286:	80 36       	cpi	r24, 0x60	; 96
   17288:	91 05       	cpc	r25, r1
   1728a:	09 f0       	breq	.+2      	; 0x1728e <Amigo_Execute+0x62>
   1728c:	a2 c0       	rjmp	.+324    	; 0x173d2 <Amigo_Execute+0x1a6>
   1728e:	08 c0       	rjmp	.+16     	; 0x172a0 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17290:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17294:	90 e0       	ldi	r25, 0x00	; 0
   17296:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   1729a:	89 2b       	or	r24, r25
   1729c:	91 f7       	brne	.-28     	; 0x17282 <Amigo_Execute+0x56>
   1729e:	99 c0       	rjmp	.+306    	; 0x173d2 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   172a0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   172a4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   172a8:	81 81       	ldd	r24, Z+1	; 0x01
   172aa:	90 e0       	ldi	r25, 0x00	; 0
   172ac:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>

    if(secondary == 0x60)
   172b0:	c0 36       	cpi	r28, 0x60	; 96
   172b2:	d1 05       	cpc	r29, r1
   172b4:	09 f0       	breq	.+2      	; 0x172b8 <Amigo_Execute+0x8c>
   172b6:	4e c0       	rjmp	.+156    	; 0x17354 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   172b8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   172bc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   172c0:	e0 81       	ld	r30, Z
   172c2:	8e 2f       	mov	r24, r30
   172c4:	90 e0       	ldi	r25, 0x00	; 0
   172c6:	8b 30       	cpi	r24, 0x0B	; 11
   172c8:	91 05       	cpc	r25, r1
   172ca:	08 f0       	brcs	.+2      	; 0x172ce <Amigo_Execute+0xa2>
   172cc:	41 c0       	rjmp	.+130    	; 0x17350 <Amigo_Execute+0x124>
   172ce:	fc 01       	movw	r30, r24
   172d0:	ea 52       	subi	r30, 0x2A	; 42
   172d2:	ff 4f       	sbci	r31, 0xFF	; 255
   172d4:	0c 94 be e2 	jmp	0x1c57c	; 0x1c57c <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172dc:	85 ff       	sbrs	r24, 5
   172de:	18 c0       	rjmp	.+48     	; 0x17310 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   172e0:	83 ef       	ldi	r24, 0xF3	; 243
   172e2:	96 e2       	ldi	r25, 0x26	; 38
   172e4:	0d c0       	rjmp	.+26     	; 0x17300 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172ea:	85 ff       	sbrs	r24, 5
   172ec:	11 c0       	rjmp	.+34     	; 0x17310 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   172ee:	82 ed       	ldi	r24, 0xD2	; 210
   172f0:	96 e2       	ldi	r25, 0x26	; 38
   172f2:	06 c0       	rjmp	.+12     	; 0x17300 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172f8:	85 ff       	sbrs	r24, 5
   172fa:	0a c0       	rjmp	.+20     	; 0x17310 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   172fc:	83 eb       	ldi	r24, 0xB3	; 179
   172fe:	96 e2       	ldi	r25, 0x26	; 38
   17300:	a0 e0       	ldi	r26, 0x00	; 0
   17302:	ed b7       	in	r30, 0x3d	; 61
   17304:	fe b7       	in	r31, 0x3e	; 62
   17306:	81 83       	std	Z+1, r24	; 0x01
   17308:	92 83       	std	Z+2, r25	; 0x02
   1730a:	a3 83       	std	Z+3, r26	; 0x03
   1730c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17310:	b0 d9       	rcall	.-3232   	; 0x16672 <amigo_buffered_read_execute>
   17312:	61 c0       	rjmp	.+194    	; 0x173d6 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17314:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17318:	85 ff       	sbrs	r24, 5
   1731a:	18 c0       	rjmp	.+48     	; 0x1734c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   1731c:	81 e9       	ldi	r24, 0x91	; 145
   1731e:	96 e2       	ldi	r25, 0x26	; 38
   17320:	0d c0       	rjmp	.+26     	; 0x1733c <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17322:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17326:	85 ff       	sbrs	r24, 5
   17328:	11 c0       	rjmp	.+34     	; 0x1734c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   1732a:	85 e7       	ldi	r24, 0x75	; 117
   1732c:	96 e2       	ldi	r25, 0x26	; 38
   1732e:	06 c0       	rjmp	.+12     	; 0x1733c <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17330:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17334:	85 ff       	sbrs	r24, 5
   17336:	0a c0       	rjmp	.+20     	; 0x1734c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17338:	85 e5       	ldi	r24, 0x55	; 85
   1733a:	96 e2       	ldi	r25, 0x26	; 38
   1733c:	a0 e0       	ldi	r26, 0x00	; 0
   1733e:	ed b7       	in	r30, 0x3d	; 61
   17340:	fe b7       	in	r31, 0x3e	; 62
   17342:	81 83       	std	Z+1, r24	; 0x01
   17344:	92 83       	std	Z+2, r25	; 0x02
   17346:	a3 83       	std	Z+3, r26	; 0x03
   17348:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return ( amigo_buffered_write() );
   1734c:	ed d9       	rcall	.-3110   	; 0x16728 <amigo_buffered_write>
   1734e:	43 c0       	rjmp	.+134    	; 0x173d6 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17350:	80 e6       	ldi	r24, 0x60	; 96
   17352:	3d c0       	rjmp	.+122    	; 0x173ce <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17354:	c8 36       	cpi	r28, 0x68	; 104
   17356:	d1 05       	cpc	r29, r1
   17358:	e1 f5       	brne	.+120    	; 0x173d2 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   1735a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOs>
   1735e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOs+0x1>
   17362:	80 81       	ld	r24, Z
   17364:	82 30       	cpi	r24, 0x02	; 2
   17366:	81 f0       	breq	.+32     	; 0x17388 <Amigo_Execute+0x15c>
   17368:	18 f4       	brcc	.+6      	; 0x17370 <Amigo_Execute+0x144>
   1736a:	88 23       	and	r24, r24
   1736c:	91 f1       	breq	.+100    	; 0x173d2 <Amigo_Execute+0x1a6>
   1736e:	2e c0       	rjmp	.+92     	; 0x173cc <Amigo_Execute+0x1a0>
   17370:	83 30       	cpi	r24, 0x03	; 3
   17372:	19 f0       	breq	.+6      	; 0x1737a <Amigo_Execute+0x14e>
   17374:	84 30       	cpi	r24, 0x04	; 4
   17376:	c9 f0       	breq	.+50     	; 0x173aa <Amigo_Execute+0x17e>
   17378:	29 c0       	rjmp	.+82     	; 0x173cc <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1737a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1737e:	85 ff       	sbrs	r24, 5
   17380:	11 c0       	rjmp	.+34     	; 0x173a4 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17382:	8c e2       	ldi	r24, 0x2C	; 44
   17384:	96 e2       	ldi	r25, 0x26	; 38
   17386:	06 c0       	rjmp	.+12     	; 0x17394 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17388:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1738c:	85 ff       	sbrs	r24, 5
   1738e:	0a c0       	rjmp	.+20     	; 0x173a4 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17390:	81 e0       	ldi	r24, 0x01	; 1
   17392:	96 e2       	ldi	r25, 0x26	; 38
   17394:	a0 e0       	ldi	r26, 0x00	; 0
   17396:	ed b7       	in	r30, 0x3d	; 61
   17398:	fe b7       	in	r31, 0x3e	; 62
   1739a:	81 83       	std	Z+1, r24	; 0x01
   1739c:	92 83       	std	Z+2, r25	; 0x02
   1739e:	a3 83       	std	Z+3, r26	; 0x03
   173a0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return ( amigo_send_status() );
   173a4:	0e 94 c9 b0 	call	0x16192	; 0x16192 <amigo_send_status>
   173a8:	16 c0       	rjmp	.+44     	; 0x173d6 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ae:	85 ff       	sbrs	r24, 5
   173b0:	0a c0       	rjmp	.+20     	; 0x173c6 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   173b2:	88 ed       	ldi	r24, 0xD8	; 216
   173b4:	95 e2       	ldi	r25, 0x25	; 37
   173b6:	a0 e0       	ldi	r26, 0x00	; 0
   173b8:	ed b7       	in	r30, 0x3d	; 61
   173ba:	fe b7       	in	r31, 0x3e	; 62
   173bc:	81 83       	std	Z+1, r24	; 0x01
   173be:	92 83       	std	Z+2, r25	; 0x02
   173c0:	a3 83       	std	Z+3, r26	; 0x03
   173c2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   173c6:	0e 94 74 b0 	call	0x160e8	; 0x160e8 <amigo_send_logical_address>
   173ca:	05 c0       	rjmp	.+10     	; 0x173d6 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   173cc:	88 e6       	ldi	r24, 0x68	; 104
   173ce:	b0 db       	rcall	.-2208   	; 0x16b30 <amigo_todo>
   173d0:	02 c0       	rjmp	.+4      	; 0x173d6 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   173d2:	80 e0       	ldi	r24, 0x00	; 0
   173d4:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   173d6:	cd b7       	in	r28, 0x3d	; 61
   173d8:	de b7       	in	r29, 0x3e	; 62
   173da:	29 96       	adiw	r28, 0x09	; 9
   173dc:	e2 e0       	ldi	r30, 0x02	; 2
   173de:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000173e2 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   173e2:	cf 93       	push	r28
   173e4:	df 93       	push	r29
   173e6:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   173e8:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   173ec:	90 e0       	ldi	r25, 0x00	; 0
   173ee:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   173f2:	89 2b       	or	r24, r25
   173f4:	51 f0       	breq	.+20     	; 0x1740a <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   173f6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   173fa:	8f 35       	cpi	r24, 0x5F	; 95
   173fc:	71 f4       	brne	.+28     	; 0x1741a <AMIGO_COMMANDS+0x38>
   173fe:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17402:	90 e0       	ldi	r25, 0x00	; 0
   17404:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   17408:	08 c0       	rjmp	.+16     	; 0x1741a <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1740a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1740e:	90 e0       	ldi	r25, 0x00	; 0
   17410:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   17414:	89 2b       	or	r24, r25
   17416:	79 f7       	brne	.-34     	; 0x173f6 <AMIGO_COMMANDS+0x14>
   17418:	76 c0       	rjmp	.+236    	; 0x17506 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   1741a:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   1741e:	81 11       	cpse	r24, r1
   17420:	05 c0       	rjmp	.+10     	; 0x1742c <AMIGO_COMMANDS+0x4a>
   17422:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17426:	90 e0       	ldi	r25, 0x00	; 0
   17428:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1742c:	c0 36       	cpi	r28, 0x60	; 96
   1742e:	99 f4       	brne	.+38     	; 0x17456 <AMIGO_COMMANDS+0x74>
   17430:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   17434:	90 e0       	ldi	r25, 0x00	; 0
   17436:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   1743a:	89 2b       	or	r24, r25
   1743c:	19 f0       	breq	.+6      	; 0x17444 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   1743e:	80 e6       	ldi	r24, 0x60	; 96
   17440:	90 e0       	ldi	r25, 0x00	; 0
   17442:	14 c0       	rjmp	.+40     	; 0x1746c <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17444:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17448:	90 e0       	ldi	r25, 0x00	; 0
   1744a:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   1744e:	89 2b       	or	r24, r25
   17450:	09 f4       	brne	.+2      	; 0x17454 <AMIGO_COMMANDS+0x72>
   17452:	59 c0       	rjmp	.+178    	; 0x17506 <AMIGO_COMMANDS+0x124>
   17454:	f4 cf       	rjmp	.-24     	; 0x1743e <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17456:	c8 36       	cpi	r28, 0x68	; 104
   17458:	c1 f4       	brne	.+48     	; 0x1748a <AMIGO_COMMANDS+0xa8>
   1745a:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1745e:	90 e0       	ldi	r25, 0x00	; 0
   17460:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   17464:	89 2b       	or	r24, r25
   17466:	21 f0       	breq	.+8      	; 0x17470 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17468:	88 e6       	ldi	r24, 0x68	; 104
   1746a:	90 e0       	ldi	r25, 0x00	; 0
   1746c:	df de       	rcall	.-578    	; 0x1722c <Amigo_Execute>
   1746e:	0b c0       	rjmp	.+22     	; 0x17486 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17470:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17474:	90 e0       	ldi	r25, 0x00	; 0
   17476:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   1747a:	89 2b       	or	r24, r25
   1747c:	09 f4       	brne	.+2      	; 0x17480 <AMIGO_COMMANDS+0x9e>
   1747e:	43 c0       	rjmp	.+134    	; 0x17506 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17480:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17482:	90 e0       	ldi	r25, 0x00	; 0
   17484:	ed db       	rcall	.-2086   	; 0x16c60 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17486:	ec 01       	movw	r28, r24
   17488:	40 c0       	rjmp	.+128    	; 0x1750a <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   1748a:	c9 36       	cpi	r28, 0x69	; 105
   1748c:	51 f4       	brne	.+20     	; 0x174a2 <AMIGO_COMMANDS+0xc0>
   1748e:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   17492:	90 e0       	ldi	r25, 0x00	; 0
   17494:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   17498:	89 2b       	or	r24, r25
   1749a:	a9 f1       	breq	.+106    	; 0x17506 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1749c:	89 e6       	ldi	r24, 0x69	; 105
   1749e:	90 e0       	ldi	r25, 0x00	; 0
   174a0:	f1 cf       	rjmp	.-30     	; 0x17484 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   174a2:	ca 36       	cpi	r28, 0x6A	; 106
   174a4:	51 f4       	brne	.+20     	; 0x174ba <AMIGO_COMMANDS+0xd8>
   174a6:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174aa:	90 e0       	ldi	r25, 0x00	; 0
   174ac:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   174b0:	89 2b       	or	r24, r25
   174b2:	49 f1       	breq	.+82     	; 0x17506 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174b4:	8a e6       	ldi	r24, 0x6A	; 106
   174b6:	90 e0       	ldi	r25, 0x00	; 0
   174b8:	e5 cf       	rjmp	.-54     	; 0x17484 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   174ba:	cc 36       	cpi	r28, 0x6C	; 108
   174bc:	51 f4       	brne	.+20     	; 0x174d2 <AMIGO_COMMANDS+0xf0>
   174be:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174c2:	90 e0       	ldi	r25, 0x00	; 0
   174c4:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   174c8:	89 2b       	or	r24, r25
   174ca:	e9 f0       	breq	.+58     	; 0x17506 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174cc:	8c e6       	ldi	r24, 0x6C	; 108
   174ce:	90 e0       	ldi	r25, 0x00	; 0
   174d0:	d9 cf       	rjmp	.-78     	; 0x17484 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   174d2:	c0 37       	cpi	r28, 0x70	; 112
   174d4:	c1 f4       	brne	.+48     	; 0x17506 <AMIGO_COMMANDS+0x124>
   174d6:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   174da:	90 e0       	ldi	r25, 0x00	; 0
   174dc:	0e 94 e5 8a 	call	0x115ca	; 0x115ca <AMIGO_is_MTA>
   174e0:	ec 01       	movw	r28, r24
   174e2:	89 2b       	or	r24, r25
   174e4:	51 f0       	breq	.+20     	; 0x174fa <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174e6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <AMIGOp>
   174ea:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <AMIGOp+0x1>
   174ee:	81 81       	ldd	r24, Z+1	; 0x01
   174f0:	90 e0       	ldi	r25, 0x00	; 0
   174f2:	0e 94 a7 84 	call	0x1094e	; 0x1094e <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   174f6:	ff d9       	rcall	.-3074   	; 0x168f6 <amigo_cmd_dsj>
   174f8:	c6 cf       	rjmp	.-116    	; 0x17486 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   174fa:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   174fe:	90 e0       	ldi	r25, 0x00	; 0
   17500:	0e 94 d4 8a 	call	0x115a8	; 0x115a8 <AMIGO_is_MLA>
   17504:	02 c0       	rjmp	.+4      	; 0x1750a <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17506:	c0 e0       	ldi	r28, 0x00	; 0
   17508:	d0 e0       	ldi	r29, 0x00	; 0
}
   1750a:	ce 01       	movw	r24, r28
   1750c:	df 91       	pop	r29
   1750e:	cf 91       	pop	r28
   17510:	08 95       	ret

00017512 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17512:	ed e9       	ldi	r30, 0x9D	; 157
   17514:	f9 e1       	ldi	r31, 0x19	; 25
   17516:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17518:	10 82       	st	Z, r1
   1751a:	11 82       	std	Z+1, r1	; 0x01
   1751c:	12 82       	std	Z+2, r1	; 0x02
   1751e:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17520:	15 82       	std	Z+5, r1	; 0x05
   17522:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17524:	12 86       	std	Z+10, r1	; 0x0a
   17526:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17528:	14 86       	std	Z+12, r1	; 0x0c
   1752a:	13 86       	std	Z+11, r1	; 0x0b
   1752c:	08 95       	ret

0001752e <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   1752e:	cf 93       	push	r28
   17530:	df 93       	push	r29
   17532:	ad b7       	in	r26, 0x3d	; 61
   17534:	be b7       	in	r27, 0x3e	; 62
   17536:	17 97       	sbiw	r26, 0x07	; 7
   17538:	0f b6       	in	r0, 0x3f	; 63
   1753a:	f8 94       	cli
   1753c:	be bf       	out	0x3e, r27	; 62
   1753e:	0f be       	out	0x3f, r0	; 63
   17540:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17542:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0x9>
   17546:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xa>
   1754a:	21 15       	cp	r18, r1
   1754c:	31 05       	cpc	r19, r1
   1754e:	09 f4       	brne	.+2      	; 0x17552 <receive_plot_flush+0x24>
   17550:	45 c0       	rjmp	.+138    	; 0x175dc <receive_plot_flush+0xae>
   17552:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17556:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   1755a:	00 97       	sbiw	r24, 0x00	; 0
   1755c:	09 f4       	brne	.+2      	; 0x17560 <receive_plot_flush+0x32>
   1755e:	40 c0       	rjmp	.+128    	; 0x175e0 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17560:	ac 01       	movw	r20, r24
   17562:	61 e0       	ldi	r22, 0x01	; 1
   17564:	70 e0       	ldi	r23, 0x00	; 0
   17566:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   1756a:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   1756e:	0e 94 97 7a 	call	0xf52e	; 0xf52e <fwrite>
   17572:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17574:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   17578:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   1757c:	c8 17       	cp	r28, r24
   1757e:	d9 07       	cpc	r29, r25
   17580:	09 f1       	breq	.+66     	; 0x175c4 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17582:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17586:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1758a:	81 72       	andi	r24, 0x21	; 33
   1758c:	99 27       	eor	r25, r25
   1758e:	89 2b       	or	r24, r25
   17590:	b1 f0       	breq	.+44     	; 0x175be <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17592:	84 ed       	ldi	r24, 0xD4	; 212
   17594:	95 e1       	ldi	r25, 0x15	; 21
   17596:	0e 94 a0 76 	call	0xed40	; 0xed40 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1759a:	ed b7       	in	r30, 0x3d	; 61
   1759c:	fe b7       	in	r31, 0x3e	; 62
   1759e:	d7 83       	std	Z+7, r29	; 0x07
   175a0:	c6 83       	std	Z+6, r28	; 0x06
   175a2:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   175a6:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   175aa:	95 83       	std	Z+5, r25	; 0x05
   175ac:	84 83       	std	Z+4, r24	; 0x04
   175ae:	88 e6       	ldi	r24, 0x68	; 104
   175b0:	9e e2       	ldi	r25, 0x2E	; 46
   175b2:	a0 e0       	ldi	r26, 0x00	; 0
   175b4:	81 83       	std	Z+1, r24	; 0x01
   175b6:	92 83       	std	Z+2, r25	; 0x02
   175b8:	a3 83       	std	Z+3, r26	; 0x03
   175ba:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        }
        return(-1);
   175be:	8f ef       	ldi	r24, 0xFF	; 255
   175c0:	9f ef       	ldi	r25, 0xFF	; 255
   175c2:	0e c0       	rjmp	.+28     	; 0x175e0 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   175c4:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   175c8:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   175cc:	0e 94 ea 74 	call	0xe9d4	; 0xe9d4 <fileno>
    if(fno < 0)
   175d0:	97 fd       	sbrc	r25, 7
   175d2:	f5 cf       	rjmp	.-22     	; 0x175be <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   175d4:	0e 94 e1 79 	call	0xf3c2	; 0xf3c2 <syncfs>
    return (ret);
   175d8:	ce 01       	movw	r24, r28
   175da:	02 c0       	rjmp	.+4      	; 0x175e0 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   175dc:	80 e0       	ldi	r24, 0x00	; 0
   175de:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   175e0:	cd b7       	in	r28, 0x3d	; 61
   175e2:	de b7       	in	r29, 0x3e	; 62
   175e4:	27 96       	adiw	r28, 0x07	; 7
   175e6:	e2 e0       	ldi	r30, 0x02	; 2
   175e8:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000175ec <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   175ec:	ad b7       	in	r26, 0x3d	; 61
   175ee:	be b7       	in	r27, 0x3e	; 62
   175f0:	17 97       	sbiw	r26, 0x07	; 7
   175f2:	0f b6       	in	r0, 0x3f	; 63
   175f4:	f8 94       	cli
   175f6:	be bf       	out	0x3e, r27	; 62
   175f8:	0f be       	out	0x3f, r0	; 63
   175fa:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   175fc:	98 df       	rcall	.-208    	; 0x1752e <receive_plot_flush>
   175fe:	97 ff       	sbrs	r25, 7
   17600:	03 c0       	rjmp	.+6      	; 0x17608 <printer_close+0x1c>
        plot.error = 1;
   17602:	81 e0       	ldi	r24, 0x01	; 1
   17604:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17608:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1760c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17610:	81 72       	andi	r24, 0x21	; 33
   17612:	99 27       	eor	r25, r25
   17614:	89 2b       	or	r24, r25
   17616:	71 f0       	breq	.+28     	; 0x17634 <printer_close+0x48>
    {
        if(plot.error)
   17618:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0x8>
   1761c:	88 23       	and	r24, r24
   1761e:	51 f0       	breq	.+20     	; 0x17634 <printer_close+0x48>
            printf("ERROR durring write\n");
   17620:	87 e9       	ldi	r24, 0x97	; 151
   17622:	9e e2       	ldi	r25, 0x2E	; 46
   17624:	a0 e0       	ldi	r26, 0x00	; 0
   17626:	ed b7       	in	r30, 0x3d	; 61
   17628:	fe b7       	in	r31, 0x3e	; 62
   1762a:	81 83       	std	Z+1, r24	; 0x01
   1762c:	92 83       	std	Z+2, r25	; 0x02
   1762e:	a3 83       	std	Z+3, r26	; 0x03
   17630:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

    if(plot.fp)
   17634:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x9>
   17638:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xa>
   1763c:	00 97       	sbiw	r24, 0x00	; 0
   1763e:	e1 f0       	breq	.+56     	; 0x17678 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17640:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17644:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17648:	85 ff       	sbrs	r24, 5
   1764a:	16 c0       	rjmp	.+44     	; 0x17678 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   1764c:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   17650:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17654:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17658:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   1765c:	ed b7       	in	r30, 0x3d	; 61
   1765e:	fe b7       	in	r31, 0x3e	; 62
   17660:	84 83       	std	Z+4, r24	; 0x04
   17662:	95 83       	std	Z+5, r25	; 0x05
   17664:	a6 83       	std	Z+6, r26	; 0x06
   17666:	b7 83       	std	Z+7, r27	; 0x07
   17668:	89 e8       	ldi	r24, 0x89	; 137
   1766a:	9e e2       	ldi	r25, 0x2E	; 46
   1766c:	a0 e0       	ldi	r26, 0x00	; 0
   1766e:	81 83       	std	Z+1, r24	; 0x01
   17670:	92 83       	std	Z+2, r25	; 0x02
   17672:	a3 83       	std	Z+3, r26	; 0x03
   17674:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

    if(plot.buf)
   17678:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0xb>
   1767c:	90 91 a9 19 	lds	r25, 0x19A9	; 0x8019a9 <plot+0xc>
   17680:	00 97       	sbiw	r24, 0x00	; 0
   17682:	11 f0       	breq	.+4      	; 0x17688 <printer_close+0x9c>
        safefree(plot.buf);
   17684:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
    printer_init();
   17688:	44 df       	rcall	.-376    	; 0x17512 <printer_init>
}
   1768a:	ad b7       	in	r26, 0x3d	; 61
   1768c:	be b7       	in	r27, 0x3e	; 62
   1768e:	17 96       	adiw	r26, 0x07	; 7
   17690:	0f b6       	in	r0, 0x3f	; 63
   17692:	f8 94       	cli
   17694:	be bf       	out	0x3e, r27	; 62
   17696:	0f be       	out	0x3f, r0	; 63
   17698:	ad bf       	out	0x3d, r26	; 61
   1769a:	08 95       	ret

0001769c <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   1769c:	ad e5       	ldi	r26, 0x5D	; 93
   1769e:	b0 e0       	ldi	r27, 0x00	; 0
   176a0:	e4 e5       	ldi	r30, 0x54	; 84
   176a2:	fb eb       	ldi	r31, 0xBB	; 187
   176a4:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__prologue_saves__+0x18>
   176a8:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   176aa:	89 2b       	or	r24, r25
   176ac:	09 f0       	breq	.+2      	; 0x176b0 <printer_open+0x14>
   176ae:	4f c0       	rjmp	.+158    	; 0x1774e <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   176b0:	be 01       	movw	r22, r28
   176b2:	6e 5a       	subi	r22, 0xAE	; 174
   176b4:	7f 4f       	sbci	r23, 0xFF	; 255
   176b6:	80 e0       	ldi	r24, 0x00	; 0
   176b8:	90 e0       	ldi	r25, 0x00	; 0
   176ba:	0e 94 ee 31 	call	0x63dc	; 0x63dc <clock_gettime>
        seconds = ts.tv_sec;
   176be:	66 96       	adiw	r28, 0x16	; 22
   176c0:	8c ad       	ldd	r24, Y+60	; 0x3c
   176c2:	9d ad       	ldd	r25, Y+61	; 0x3d
   176c4:	ae ad       	ldd	r26, Y+62	; 0x3e
   176c6:	bf ad       	ldd	r27, Y+63	; 0x3f
   176c8:	66 97       	sbiw	r28, 0x16	; 22
   176ca:	6e 96       	adiw	r28, 0x1e	; 30
   176cc:	8c af       	std	Y+60, r24	; 0x3c
   176ce:	9d af       	std	Y+61, r25	; 0x3d
   176d0:	ae af       	std	Y+62, r26	; 0x3e
   176d2:	bf af       	std	Y+63, r27	; 0x3f
   176d4:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   176d6:	ce 01       	movw	r24, r28
   176d8:	86 5a       	subi	r24, 0xA6	; 166
   176da:	9f 4f       	sbci	r25, 0xFF	; 255
   176dc:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <gmtime>
   176e0:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   176e2:	fc 01       	movw	r30, r24
   176e4:	e6 80       	ldd	r14, Z+6	; 0x06
   176e6:	f7 80       	ldd	r15, Z+7	; 0x07
   176e8:	80 85       	ldd	r24, Z+8	; 0x08
   176ea:	91 85       	ldd	r25, Z+9	; 0x09
   176ec:	0e 94 b4 34 	call	0x6968	; 0x6968 <tm_mon_to_ascii>
   176f0:	f8 01       	movw	r30, r16
   176f2:	20 81       	ld	r18, Z
   176f4:	31 81       	ldd	r19, Z+1	; 0x01
   176f6:	ed b7       	in	r30, 0x3d	; 61
   176f8:	fe b7       	in	r31, 0x3e	; 62
   176fa:	31 8b       	std	Z+17, r19	; 0x11
   176fc:	20 8b       	std	Z+16, r18	; 0x10
   176fe:	f8 01       	movw	r30, r16
   17700:	22 81       	ldd	r18, Z+2	; 0x02
   17702:	33 81       	ldd	r19, Z+3	; 0x03
   17704:	ed b7       	in	r30, 0x3d	; 61
   17706:	fe b7       	in	r31, 0x3e	; 62
   17708:	37 87       	std	Z+15, r19	; 0x0f
   1770a:	26 87       	std	Z+14, r18	; 0x0e
   1770c:	f8 01       	movw	r30, r16
   1770e:	24 81       	ldd	r18, Z+4	; 0x04
   17710:	35 81       	ldd	r19, Z+5	; 0x05
   17712:	ed b7       	in	r30, 0x3d	; 61
   17714:	fe b7       	in	r31, 0x3e	; 62
   17716:	35 87       	std	Z+13, r19	; 0x0d
   17718:	24 87       	std	Z+12, r18	; 0x0c
   1771a:	f8 01       	movw	r30, r16
   1771c:	22 85       	ldd	r18, Z+10	; 0x0a
   1771e:	33 85       	ldd	r19, Z+11	; 0x0b
   17720:	24 59       	subi	r18, 0x94	; 148
   17722:	38 4f       	sbci	r19, 0xF8	; 248
   17724:	ed b7       	in	r30, 0x3d	; 61
   17726:	fe b7       	in	r31, 0x3e	; 62
   17728:	33 87       	std	Z+11, r19	; 0x0b
   1772a:	22 87       	std	Z+10, r18	; 0x0a
   1772c:	91 87       	std	Z+9, r25	; 0x09
   1772e:	80 87       	std	Z+8, r24	; 0x08
   17730:	f7 82       	std	Z+7, r15	; 0x07
   17732:	e6 82       	std	Z+6, r14	; 0x06
   17734:	8e ec       	ldi	r24, 0xCE	; 206
   17736:	9e e2       	ldi	r25, 0x2E	; 46
   17738:	a0 e0       	ldi	r26, 0x00	; 0
   1773a:	83 83       	std	Z+3, r24	; 0x03
   1773c:	94 83       	std	Z+4, r25	; 0x04
   1773e:	a5 83       	std	Z+5, r26	; 0x05
   17740:	8e 01       	movw	r16, r28
   17742:	0e 5e       	subi	r16, 0xEE	; 238
   17744:	1f 4f       	sbci	r17, 0xFF	; 255
   17746:	12 83       	std	Z+2, r17	; 0x02
   17748:	01 83       	std	Z+1, r16	; 0x01
   1774a:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1774e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17752:	85 ff       	sbrs	r24, 5
   17754:	0c c0       	rjmp	.+24     	; 0x1776e <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17756:	ed b7       	in	r30, 0x3d	; 61
   17758:	fe b7       	in	r31, 0x3e	; 62
   1775a:	15 83       	std	Z+5, r17	; 0x05
   1775c:	04 83       	std	Z+4, r16	; 0x04
   1775e:	88 eb       	ldi	r24, 0xB8	; 184
   17760:	9e e2       	ldi	r25, 0x2E	; 46
   17762:	a0 e0       	ldi	r26, 0x00	; 0
   17764:	81 83       	std	Z+1, r24	; 0x01
   17766:	92 83       	std	Z+2, r25	; 0x02
   17768:	a3 83       	std	Z+3, r26	; 0x03
   1776a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    plot.fp = fopen(ptr,"wb");
   1776e:	6c e0       	ldi	r22, 0x0C	; 12
   17770:	79 e0       	ldi	r23, 0x09	; 9
   17772:	c8 01       	movw	r24, r16
   17774:	0e 94 6f 7c 	call	0xf8de	; 0xf8de <fopen>
   17778:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xa>
   1777c:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x9>
    if(plot.fp == NULL)
   17780:	89 2b       	or	r24, r25
   17782:	b9 f4       	brne	.+46     	; 0x177b2 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17784:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17788:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1778c:	81 72       	andi	r24, 0x21	; 33
   1778e:	99 27       	eor	r25, r25
   17790:	89 2b       	or	r24, r25
   17792:	11 f1       	breq	.+68     	; 0x177d8 <printer_open+0x13c>
        {
            perror("open failed");
   17794:	8a e9       	ldi	r24, 0x9A	; 154
   17796:	9d e0       	ldi	r25, 0x0D	; 13
   17798:	0e 94 a0 76 	call	0xed40	; 0xed40 <perror>
            printf("exiting...\n");
   1779c:	8c ea       	ldi	r24, 0xAC	; 172
   1779e:	9e e2       	ldi	r25, 0x2E	; 46
   177a0:	a0 e0       	ldi	r26, 0x00	; 0
   177a2:	ed b7       	in	r30, 0x3d	; 61
   177a4:	fe b7       	in	r31, 0x3e	; 62
   177a6:	81 83       	std	Z+1, r24	; 0x01
   177a8:	92 83       	std	Z+2, r25	; 0x02
   177aa:	a3 83       	std	Z+3, r26	; 0x03
   177ac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   177b0:	13 c0       	rjmp	.+38     	; 0x177d8 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   177b2:	61 e0       	ldi	r22, 0x01	; 1
   177b4:	70 e0       	ldi	r23, 0x00	; 0
   177b6:	81 e0       	ldi	r24, 0x01	; 1
   177b8:	92 e0       	ldi	r25, 0x02	; 2
   177ba:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   177be:	90 93 a9 19 	sts	0x19A9, r25	; 0x8019a9 <plot+0xc>
   177c2:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0xb>
    if(plot.buf == NULL)
   177c6:	89 2b       	or	r24, r25
   177c8:	09 f4       	brne	.+2      	; 0x177cc <printer_open+0x130>
        printer_close();
   177ca:	10 df       	rcall	.-480    	; 0x175ec <printer_close>
    plot.size = 512;
   177cc:	80 e0       	ldi	r24, 0x00	; 0
   177ce:	92 e0       	ldi	r25, 0x02	; 2
   177d0:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0x7>
   177d4:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x6>
}
   177d8:	c3 5a       	subi	r28, 0xA3	; 163
   177da:	df 4f       	sbci	r29, 0xFF	; 255
   177dc:	e6 e0       	ldi	r30, 0x06	; 6
   177de:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

000177e2 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   177e2:	cf 93       	push	r28
   177e4:	df 93       	push	r29
   177e6:	ad b7       	in	r26, 0x3d	; 61
   177e8:	be b7       	in	r27, 0x3e	; 62
   177ea:	17 97       	sbiw	r26, 0x07	; 7
   177ec:	0f b6       	in	r0, 0x3f	; 63
   177ee:	f8 94       	cli
   177f0:	be bf       	out	0x3e, r27	; 62
   177f2:	0f be       	out	0x3f, r0	; 63
   177f4:	ad bf       	out	0x3d, r26	; 61
   177f6:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   177f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177fc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17800:	81 72       	andi	r24, 0x21	; 33
   17802:	99 27       	eor	r25, r25
   17804:	89 2b       	or	r24, r25
   17806:	c1 f0       	breq	.+48     	; 0x17838 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17808:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   1780c:	30 91 9e 19 	lds	r19, 0x199E	; 0x80199e <plot+0x1>
   17810:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x2>
   17814:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x3>
   17818:	81 11       	cpse	r24, r1
   1781a:	0e c0       	rjmp	.+28     	; 0x17838 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   1781c:	ed b7       	in	r30, 0x3d	; 61
   1781e:	fe b7       	in	r31, 0x3e	; 62
   17820:	84 83       	std	Z+4, r24	; 0x04
   17822:	35 83       	std	Z+5, r19	; 0x05
   17824:	26 83       	std	Z+6, r18	; 0x06
   17826:	97 83       	std	Z+7, r25	; 0x07
   17828:	81 e6       	ldi	r24, 0x61	; 97
   1782a:	9e e2       	ldi	r25, 0x2E	; 46
   1782c:	a0 e0       	ldi	r26, 0x00	; 0
   1782e:	81 83       	std	Z+1, r24	; 0x01
   17830:	92 83       	std	Z+2, r25	; 0x02
   17832:	a3 83       	std	Z+3, r26	; 0x03
   17834:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17838:	ce 01       	movw	r24, r28
   1783a:	88 27       	eor	r24, r24
   1783c:	97 7f       	andi	r25, 0xF7	; 247
   1783e:	89 2b       	or	r24, r25
   17840:	41 f0       	breq	.+16     	; 0x17852 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17842:	75 de       	rcall	.-790    	; 0x1752e <receive_plot_flush>
   17844:	89 2b       	or	r24, r25
   17846:	09 f4       	brne	.+2      	; 0x1784a <printer_buffer+0x68>
   17848:	3f c0       	rjmp	.+126    	; 0x178c8 <printer_buffer+0xe6>
            plot.error = 1;
   1784a:	81 e0       	ldi	r24, 0x01	; 1
   1784c:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
   17850:	3b c0       	rjmp	.+118    	; 0x178c8 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17852:	20 91 a8 19 	lds	r18, 0x19A8	; 0x8019a8 <plot+0xb>
   17856:	30 91 a9 19 	lds	r19, 0x19A9	; 0x8019a9 <plot+0xc>
   1785a:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x4>
   1785e:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x5>
   17862:	ac 01       	movw	r20, r24
   17864:	4f 5f       	subi	r20, 0xFF	; 255
   17866:	5f 4f       	sbci	r21, 0xFF	; 255
   17868:	50 93 a2 19 	sts	0x19A2, r21	; 0x8019a2 <plot+0x5>
   1786c:	40 93 a1 19 	sts	0x19A1, r20	; 0x8019a1 <plot+0x4>
   17870:	f9 01       	movw	r30, r18
   17872:	e8 0f       	add	r30, r24
   17874:	f9 1f       	adc	r31, r25
   17876:	c0 83       	st	Z, r28
        plot.count++;
   17878:	80 91 9d 19 	lds	r24, 0x199D	; 0x80199d <plot>
   1787c:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x1>
   17880:	a0 91 9f 19 	lds	r26, 0x199F	; 0x80199f <plot+0x2>
   17884:	b0 91 a0 19 	lds	r27, 0x19A0	; 0x8019a0 <plot+0x3>
   17888:	01 96       	adiw	r24, 0x01	; 1
   1788a:	a1 1d       	adc	r26, r1
   1788c:	b1 1d       	adc	r27, r1
   1788e:	80 93 9d 19 	sts	0x199D, r24	; 0x80199d <plot>
   17892:	90 93 9e 19 	sts	0x199E, r25	; 0x80199e <plot+0x1>
   17896:	a0 93 9f 19 	sts	0x199F, r26	; 0x80199f <plot+0x2>
   1789a:	b0 93 a0 19 	sts	0x19A0, r27	; 0x8019a0 <plot+0x3>

        if(plot.ind >= plot.size)
   1789e:	20 91 a1 19 	lds	r18, 0x19A1	; 0x8019a1 <plot+0x4>
   178a2:	30 91 a2 19 	lds	r19, 0x19A2	; 0x8019a2 <plot+0x5>
   178a6:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x6>
   178aa:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0x7>
   178ae:	28 17       	cp	r18, r24
   178b0:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   178b2:	54 f0       	brlt	.+20     	; 0x178c8 <printer_buffer+0xe6>
   178b4:	3c de       	rcall	.-904    	; 0x1752e <receive_plot_flush>
   178b6:	97 ff       	sbrs	r25, 7
   178b8:	03 c0       	rjmp	.+6      	; 0x178c0 <printer_buffer+0xde>
                plot.error = 1;
   178ba:	81 e0       	ldi	r24, 0x01	; 1
   178bc:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0x8>
            plot.ind  = 0;
   178c0:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <plot+0x5>
   178c4:	10 92 a1 19 	sts	0x19A1, r1	; 0x8019a1 <plot+0x4>
        }
    }
}
   178c8:	cd b7       	in	r28, 0x3d	; 61
   178ca:	de b7       	in	r29, 0x3e	; 62
   178cc:	27 96       	adiw	r28, 0x07	; 7
   178ce:	e2 e0       	ldi	r30, 0x02	; 2
   178d0:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000178d4 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   178d4:	cf 93       	push	r28
   178d6:	00 d0       	rcall	.+0      	; 0x178d8 <PRINTER_COMMANDS+0x4>
   178d8:	00 d0       	rcall	.+0      	; 0x178da <PRINTER_COMMANDS+0x6>
   178da:	1f 92       	push	r1
   178dc:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   178de:	80 91 f0 1e 	lds	r24, 0x1EF0	; 0x801ef0 <listening>
   178e2:	90 e0       	ldi	r25, 0x00	; 0
   178e4:	0e 94 07 8b 	call	0x1160e	; 0x1160e <PRINTER_is_MLA>
   178e8:	89 2b       	or	r24, r25
   178ea:	69 f0       	breq	.+26     	; 0x17906 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178f0:	85 ff       	sbrs	r24, 5
   178f2:	22 c0       	rjmp	.+68     	; 0x17938 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   178f4:	8c 2f       	mov	r24, r28
   178f6:	90 e0       	ldi	r25, 0x00	; 0
   178f8:	ed b7       	in	r30, 0x3d	; 61
   178fa:	fe b7       	in	r31, 0x3e	; 62
   178fc:	95 83       	std	Z+5, r25	; 0x05
   178fe:	84 83       	std	Z+4, r24	; 0x04
   17900:	85 e4       	ldi	r24, 0x45	; 69
   17902:	9e e2       	ldi	r25, 0x2E	; 46
   17904:	13 c0       	rjmp	.+38     	; 0x1792c <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17906:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <talking>
   1790a:	90 e0       	ldi	r25, 0x00	; 0
   1790c:	0e 94 18 8b 	call	0x11630	; 0x11630 <PRINTER_is_MTA>
   17910:	89 2b       	or	r24, r25
   17912:	91 f0       	breq	.+36     	; 0x17938 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17914:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17918:	85 ff       	sbrs	r24, 5
   1791a:	0e c0       	rjmp	.+28     	; 0x17938 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   1791c:	8c 2f       	mov	r24, r28
   1791e:	90 e0       	ldi	r25, 0x00	; 0
   17920:	ed b7       	in	r30, 0x3d	; 61
   17922:	fe b7       	in	r31, 0x3e	; 62
   17924:	95 83       	std	Z+5, r25	; 0x05
   17926:	84 83       	std	Z+4, r24	; 0x04
   17928:	8b e2       	ldi	r24, 0x2B	; 43
   1792a:	9e e2       	ldi	r25, 0x2E	; 46
   1792c:	a0 e0       	ldi	r26, 0x00	; 0
   1792e:	81 83       	std	Z+1, r24	; 0x01
   17930:	92 83       	std	Z+2, r25	; 0x02
   17932:	a3 83       	std	Z+3, r26	; 0x03
   17934:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17938:	80 e0       	ldi	r24, 0x00	; 0
   1793a:	90 e0       	ldi	r25, 0x00	; 0
   1793c:	0f 90       	pop	r0
   1793e:	0f 90       	pop	r0
   17940:	0f 90       	pop	r0
   17942:	0f 90       	pop	r0
   17944:	0f 90       	pop	r0
   17946:	cf 91       	pop	r28
   17948:	08 95       	ret

0001794a <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   1794a:	0f 93       	push	r16
   1794c:	1f 93       	push	r17
   1794e:	da 01       	movw	r26, r20
   17950:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17952:	b7 fd       	sbrc	r27, 7
   17954:	0b c0       	rjmp	.+22     	; 0x1796c <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17956:	fd 01       	movw	r30, r26
   17958:	e6 0f       	add	r30, r22
   1795a:	f7 1f       	adc	r31, r23
   1795c:	e8 0f       	add	r30, r24
   1795e:	f9 1f       	adc	r31, r25
   17960:	00 83       	st	Z, r16
        val >>= 8;
   17962:	01 2f       	mov	r16, r17
   17964:	12 2f       	mov	r17, r18
   17966:	23 2f       	mov	r18, r19
   17968:	33 27       	eor	r19, r19
   1796a:	f2 cf       	rjmp	.-28     	; 0x17950 <V2B_MSB+0x6>
    }
}
   1796c:	1f 91       	pop	r17
   1796e:	0f 91       	pop	r16
   17970:	08 95       	ret

00017972 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17972:	0f 93       	push	r16
   17974:	1f 93       	push	r17
   17976:	fc 01       	movw	r30, r24
   17978:	e6 0f       	add	r30, r22
   1797a:	f7 1f       	adc	r31, r23
   1797c:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   1797e:	cf 01       	movw	r24, r30
   17980:	86 1b       	sub	r24, r22
   17982:	97 0b       	sbc	r25, r23
   17984:	84 17       	cp	r24, r20
   17986:	95 07       	cpc	r25, r21
   17988:	34 f4       	brge	.+12     	; 0x17996 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   1798a:	01 93       	st	Z+, r16
        val >>= 8;
   1798c:	01 2f       	mov	r16, r17
   1798e:	12 2f       	mov	r17, r18
   17990:	23 2f       	mov	r18, r19
   17992:	33 27       	eor	r19, r19
   17994:	f4 cf       	rjmp	.-24     	; 0x1797e <V2B_LSB+0xc>
    }
}
   17996:	1f 91       	pop	r17
   17998:	0f 91       	pop	r16
   1799a:	08 95       	ret

0001799c <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   1799c:	cf 92       	push	r12
   1799e:	df 92       	push	r13
   179a0:	ef 92       	push	r14
   179a2:	ff 92       	push	r15
   179a4:	fc 01       	movw	r30, r24
   179a6:	e6 0f       	add	r30, r22
   179a8:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   179aa:	60 e0       	ldi	r22, 0x00	; 0
   179ac:	70 e0       	ldi	r23, 0x00	; 0
   179ae:	cb 01       	movw	r24, r22
   179b0:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   179b2:	9f 01       	movw	r18, r30
   179b4:	2a 1b       	sub	r18, r26
   179b6:	3b 0b       	sbc	r19, r27
   179b8:	24 17       	cp	r18, r20
   179ba:	35 07       	cpc	r19, r21
   179bc:	4c f4       	brge	.+18     	; 0x179d0 <B2V_MSB+0x34>
    {
        val <<= 8;
   179be:	cc 24       	eor	r12, r12
   179c0:	d6 2e       	mov	r13, r22
   179c2:	e7 2e       	mov	r14, r23
   179c4:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   179c6:	21 91       	ld	r18, Z+
   179c8:	c7 01       	movw	r24, r14
   179ca:	b6 01       	movw	r22, r12
   179cc:	62 2b       	or	r22, r18
   179ce:	f1 cf       	rjmp	.-30     	; 0x179b2 <B2V_MSB+0x16>
    }
    return(val);
}
   179d0:	ff 90       	pop	r15
   179d2:	ef 90       	pop	r14
   179d4:	df 90       	pop	r13
   179d6:	cf 90       	pop	r12
   179d8:	08 95       	ret

000179da <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   179da:	cf 92       	push	r12
   179dc:	df 92       	push	r13
   179de:	ef 92       	push	r14
   179e0:	ff 92       	push	r15
   179e2:	9c 01       	movw	r18, r24
   179e4:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   179e6:	60 e0       	ldi	r22, 0x00	; 0
   179e8:	70 e0       	ldi	r23, 0x00	; 0
   179ea:	cb 01       	movw	r24, r22
   179ec:	41 50       	subi	r20, 0x01	; 1
   179ee:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   179f0:	57 fd       	sbrc	r21, 7
   179f2:	0e c0       	rjmp	.+28     	; 0x17a10 <B2V_LSB+0x36>
    {
        val <<= 8;
   179f4:	cc 24       	eor	r12, r12
   179f6:	d6 2e       	mov	r13, r22
   179f8:	e7 2e       	mov	r14, r23
   179fa:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   179fc:	fa 01       	movw	r30, r20
   179fe:	ea 0f       	add	r30, r26
   17a00:	fb 1f       	adc	r31, r27
   17a02:	e2 0f       	add	r30, r18
   17a04:	f3 1f       	adc	r31, r19
   17a06:	e0 81       	ld	r30, Z
   17a08:	c7 01       	movw	r24, r14
   17a0a:	b6 01       	movw	r22, r12
   17a0c:	6e 2b       	or	r22, r30
   17a0e:	ee cf       	rjmp	.-36     	; 0x179ec <B2V_LSB+0x12>
    }
    return(val);
}
   17a10:	ff 90       	pop	r15
   17a12:	ef 90       	pop	r14
   17a14:	df 90       	pop	r13
   17a16:	cf 90       	pop	r12
   17a18:	08 95       	ret

00017a1a <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17a1a:	cf 93       	push	r28
   17a1c:	df 93       	push	r29
   17a1e:	00 d0       	rcall	.+0      	; 0x17a20 <lif_help+0x6>
   17a20:	1f 92       	push	r1
   17a22:	ec 01       	movw	r28, r24
   17a24:	86 e2       	ldi	r24, 0x26	; 38
   17a26:	93 e4       	ldi	r25, 0x43	; 67
   17a28:	a0 e0       	ldi	r26, 0x00	; 0
   17a2a:	ed b7       	in	r30, 0x3d	; 61
   17a2c:	fe b7       	in	r31, 0x3e	; 62
   17a2e:	81 83       	std	Z+1, r24	; 0x01
   17a30:	92 83       	std	Z+2, r25	; 0x02
   17a32:	a3 83       	std	Z+3, r26	; 0x03
   17a34:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17a38:	cd 2b       	or	r28, r29
   17a3a:	51 f0       	breq	.+20     	; 0x17a50 <lif_help+0x36>
   17a3c:	82 e6       	ldi	r24, 0x62	; 98
   17a3e:	91 e4       	ldi	r25, 0x41	; 65
   17a40:	a0 e0       	ldi	r26, 0x00	; 0
   17a42:	ed b7       	in	r30, 0x3d	; 61
   17a44:	fe b7       	in	r31, 0x3e	; 62
   17a46:	81 83       	std	Z+1, r24	; 0x01
   17a48:	92 83       	std	Z+2, r25	; 0x02
   17a4a:	a3 83       	std	Z+3, r26	; 0x03
   17a4c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17a50:	cd b7       	in	r28, 0x3d	; 61
   17a52:	de b7       	in	r29, 0x3e	; 62
   17a54:	23 96       	adiw	r28, 0x03	; 3
   17a56:	e2 e0       	ldi	r30, 0x02	; 2
   17a58:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00017a5c <lif_calloc>:
   17a5c:	cf 92       	push	r12
   17a5e:	df 92       	push	r13
   17a60:	ef 92       	push	r14
   17a62:	ff 92       	push	r15
   17a64:	cf 93       	push	r28
   17a66:	df 93       	push	r29
   17a68:	ad b7       	in	r26, 0x3d	; 61
   17a6a:	be b7       	in	r27, 0x3e	; 62
   17a6c:	17 97       	sbiw	r26, 0x07	; 7
   17a6e:	0f b6       	in	r0, 0x3f	; 63
   17a70:	f8 94       	cli
   17a72:	be bf       	out	0x3e, r27	; 62
   17a74:	0f be       	out	0x3f, r0	; 63
   17a76:	ad bf       	out	0x3d, r26	; 61
   17a78:	6b 01       	movw	r12, r22
   17a7a:	7c 01       	movw	r14, r24
   17a7c:	61 e0       	ldi	r22, 0x01	; 1
   17a7e:	70 e0       	ldi	r23, 0x00	; 0
   17a80:	c6 01       	movw	r24, r12
   17a82:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <safecalloc>
   17a86:	ec 01       	movw	r28, r24
   17a88:	89 2b       	or	r24, r25
   17a8a:	71 f4       	brne	.+28     	; 0x17aa8 <lif_calloc+0x4c>
   17a8c:	ed b7       	in	r30, 0x3d	; 61
   17a8e:	fe b7       	in	r31, 0x3e	; 62
   17a90:	c4 82       	std	Z+4, r12	; 0x04
   17a92:	d5 82       	std	Z+5, r13	; 0x05
   17a94:	e6 82       	std	Z+6, r14	; 0x06
   17a96:	f7 82       	std	Z+7, r15	; 0x07
   17a98:	8b ef       	ldi	r24, 0xFB	; 251
   17a9a:	90 e4       	ldi	r25, 0x40	; 64
   17a9c:	a0 e0       	ldi	r26, 0x00	; 0
   17a9e:	81 83       	std	Z+1, r24	; 0x01
   17aa0:	92 83       	std	Z+2, r25	; 0x02
   17aa2:	a3 83       	std	Z+3, r26	; 0x03
   17aa4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17aa8:	ce 01       	movw	r24, r28
   17aaa:	ad b7       	in	r26, 0x3d	; 61
   17aac:	be b7       	in	r27, 0x3e	; 62
   17aae:	17 96       	adiw	r26, 0x07	; 7
   17ab0:	0f b6       	in	r0, 0x3f	; 63
   17ab2:	f8 94       	cli
   17ab4:	be bf       	out	0x3e, r27	; 62
   17ab6:	0f be       	out	0x3f, r0	; 63
   17ab8:	ad bf       	out	0x3d, r26	; 61
   17aba:	df 91       	pop	r29
   17abc:	cf 91       	pop	r28
   17abe:	ff 90       	pop	r15
   17ac0:	ef 90       	pop	r14
   17ac2:	df 90       	pop	r13
   17ac4:	cf 90       	pop	r12
   17ac6:	08 95       	ret

00017ac8 <lif_free>:
   17ac8:	00 d0       	rcall	.+0      	; 0x17aca <lif_free+0x2>
   17aca:	1f 92       	push	r1
   17acc:	00 97       	sbiw	r24, 0x00	; 0
   17ace:	59 f4       	brne	.+22     	; 0x17ae6 <lif_free+0x1e>
   17ad0:	83 ee       	ldi	r24, 0xE3	; 227
   17ad2:	90 e4       	ldi	r25, 0x40	; 64
   17ad4:	a0 e0       	ldi	r26, 0x00	; 0
   17ad6:	ed b7       	in	r30, 0x3d	; 61
   17ad8:	fe b7       	in	r31, 0x3e	; 62
   17ada:	81 83       	std	Z+1, r24	; 0x01
   17adc:	92 83       	std	Z+2, r25	; 0x02
   17ade:	a3 83       	std	Z+3, r26	; 0x03
   17ae0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17ae4:	02 c0       	rjmp	.+4      	; 0x17aea <lif_free+0x22>
   17ae6:	0e 94 28 26 	call	0x4c50	; 0x4c50 <safefree>
   17aea:	0f 90       	pop	r0
   17aec:	0f 90       	pop	r0
   17aee:	0f 90       	pop	r0
   17af0:	08 95       	ret

00017af2 <lif_stralloc>:
   17af2:	0f 93       	push	r16
   17af4:	1f 93       	push	r17
   17af6:	cf 93       	push	r28
   17af8:	df 93       	push	r29
   17afa:	ec 01       	movw	r28, r24
   17afc:	fc 01       	movw	r30, r24
   17afe:	01 90       	ld	r0, Z+
   17b00:	00 20       	and	r0, r0
   17b02:	e9 f7       	brne	.-6      	; 0x17afe <lif_stralloc+0xc>
   17b04:	bf 01       	movw	r22, r30
   17b06:	68 1b       	sub	r22, r24
   17b08:	79 0b       	sbc	r23, r25
   17b0a:	6d 5f       	subi	r22, 0xFD	; 253
   17b0c:	7f 4f       	sbci	r23, 0xFF	; 255
   17b0e:	07 2e       	mov	r0, r23
   17b10:	00 0c       	add	r0, r0
   17b12:	88 0b       	sbc	r24, r24
   17b14:	99 0b       	sbc	r25, r25
   17b16:	a2 df       	rcall	.-188    	; 0x17a5c <lif_calloc>
   17b18:	8c 01       	movw	r16, r24
   17b1a:	00 97       	sbiw	r24, 0x00	; 0
   17b1c:	19 f0       	breq	.+6      	; 0x17b24 <lif_stralloc+0x32>
   17b1e:	be 01       	movw	r22, r28
   17b20:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
   17b24:	c8 01       	movw	r24, r16
   17b26:	df 91       	pop	r29
   17b28:	cf 91       	pop	r28
   17b2a:	1f 91       	pop	r17
   17b2c:	0f 91       	pop	r16
   17b2e:	08 95       	ret

00017b30 <lif_open>:
   17b30:	ef 92       	push	r14
   17b32:	ff 92       	push	r15
   17b34:	0f 93       	push	r16
   17b36:	1f 93       	push	r17
   17b38:	cf 93       	push	r28
   17b3a:	df 93       	push	r29
   17b3c:	ad b7       	in	r26, 0x3d	; 61
   17b3e:	be b7       	in	r27, 0x3e	; 62
   17b40:	17 97       	sbiw	r26, 0x07	; 7
   17b42:	0f b6       	in	r0, 0x3f	; 63
   17b44:	f8 94       	cli
   17b46:	be bf       	out	0x3e, r27	; 62
   17b48:	0f be       	out	0x3f, r0	; 63
   17b4a:	ad bf       	out	0x3d, r26	; 61
   17b4c:	8c 01       	movw	r16, r24
   17b4e:	7b 01       	movw	r14, r22
   17b50:	0e 94 6f 7c 	call	0xf8de	; 0xf8de <fopen>
   17b54:	ec 01       	movw	r28, r24
   17b56:	89 2b       	or	r24, r25
   17b58:	71 f4       	brne	.+28     	; 0x17b76 <lif_open+0x46>
   17b5a:	ed b7       	in	r30, 0x3d	; 61
   17b5c:	fe b7       	in	r31, 0x3e	; 62
   17b5e:	f7 82       	std	Z+7, r15	; 0x07
   17b60:	e6 82       	std	Z+6, r14	; 0x06
   17b62:	15 83       	std	Z+5, r17	; 0x05
   17b64:	04 83       	std	Z+4, r16	; 0x04
   17b66:	8e eb       	ldi	r24, 0xBE	; 190
   17b68:	90 e4       	ldi	r25, 0x40	; 64
   17b6a:	a0 e0       	ldi	r26, 0x00	; 0
   17b6c:	81 83       	std	Z+1, r24	; 0x01
   17b6e:	92 83       	std	Z+2, r25	; 0x02
   17b70:	a3 83       	std	Z+3, r26	; 0x03
   17b72:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17b76:	ce 01       	movw	r24, r28
   17b78:	cd b7       	in	r28, 0x3d	; 61
   17b7a:	de b7       	in	r29, 0x3e	; 62
   17b7c:	27 96       	adiw	r28, 0x07	; 7
   17b7e:	e6 e0       	ldi	r30, 0x06	; 6
   17b80:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00017b84 <lif_stat>:
   17b84:	0f 93       	push	r16
   17b86:	1f 93       	push	r17
   17b88:	cf 93       	push	r28
   17b8a:	df 93       	push	r29
   17b8c:	00 d0       	rcall	.+0      	; 0x17b8e <lif_stat+0xa>
   17b8e:	00 d0       	rcall	.+0      	; 0x17b90 <lif_stat+0xc>
   17b90:	1f 92       	push	r1
   17b92:	8c 01       	movw	r16, r24
   17b94:	d6 2f       	mov	r29, r22
   17b96:	c7 2f       	mov	r28, r23
   17b98:	0e 94 74 77 	call	0xeee8	; 0xeee8 <stat>
   17b9c:	97 ff       	sbrs	r25, 7
   17b9e:	0f c0       	rjmp	.+30     	; 0x17bbe <lif_stat+0x3a>
   17ba0:	ed b7       	in	r30, 0x3d	; 61
   17ba2:	fe b7       	in	r31, 0x3e	; 62
   17ba4:	15 83       	std	Z+5, r17	; 0x05
   17ba6:	04 83       	std	Z+4, r16	; 0x04
   17ba8:	85 ea       	ldi	r24, 0xA5	; 165
   17baa:	90 e4       	ldi	r25, 0x40	; 64
   17bac:	a0 e0       	ldi	r26, 0x00	; 0
   17bae:	81 83       	std	Z+1, r24	; 0x01
   17bb0:	92 83       	std	Z+2, r25	; 0x02
   17bb2:	a3 83       	std	Z+3, r26	; 0x03
   17bb4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17bb8:	80 e0       	ldi	r24, 0x00	; 0
   17bba:	90 e0       	ldi	r25, 0x00	; 0
   17bbc:	02 c0       	rjmp	.+4      	; 0x17bc2 <lif_stat+0x3e>
   17bbe:	8d 2f       	mov	r24, r29
   17bc0:	9c 2f       	mov	r25, r28
   17bc2:	cd b7       	in	r28, 0x3d	; 61
   17bc4:	de b7       	in	r29, 0x3e	; 62
   17bc6:	25 96       	adiw	r28, 0x05	; 5
   17bc8:	e4 e0       	ldi	r30, 0x04	; 4
   17bca:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00017bce <lif_seek_msg>:
   17bce:	a9 e0       	ldi	r26, 0x09	; 9
   17bd0:	b0 e0       	ldi	r27, 0x00	; 0
   17bd2:	ed ee       	ldi	r30, 0xED	; 237
   17bd4:	fd eb       	ldi	r31, 0xBD	; 189
   17bd6:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
   17bda:	ec 01       	movw	r28, r24
   17bdc:	6a 01       	movw	r12, r20
   17bde:	7b 01       	movw	r14, r22
   17be0:	89 01       	movw	r16, r18
   17be2:	0e 94 ae 78 	call	0xf15c	; 0xf15c <ftell>
   17be6:	6c 15       	cp	r22, r12
   17be8:	7d 05       	cpc	r23, r13
   17bea:	8e 05       	cpc	r24, r14
   17bec:	9f 05       	cpc	r25, r15
   17bee:	19 f4       	brne	.+6      	; 0x17bf6 <lif_seek_msg+0x28>
   17bf0:	81 e0       	ldi	r24, 0x01	; 1
   17bf2:	90 e0       	ldi	r25, 0x00	; 0
   17bf4:	1b c0       	rjmp	.+54     	; 0x17c2c <lif_seek_msg+0x5e>
   17bf6:	20 e0       	ldi	r18, 0x00	; 0
   17bf8:	30 e0       	ldi	r19, 0x00	; 0
   17bfa:	b7 01       	movw	r22, r14
   17bfc:	a6 01       	movw	r20, r12
   17bfe:	ce 01       	movw	r24, r28
   17c00:	0e 94 31 79 	call	0xf262	; 0xf262 <fseek>
   17c04:	97 ff       	sbrs	r25, 7
   17c06:	f4 cf       	rjmp	.-24     	; 0x17bf0 <lif_seek_msg+0x22>
   17c08:	ed b7       	in	r30, 0x3d	; 61
   17c0a:	fe b7       	in	r31, 0x3e	; 62
   17c0c:	c6 82       	std	Z+6, r12	; 0x06
   17c0e:	d7 82       	std	Z+7, r13	; 0x07
   17c10:	e0 86       	std	Z+8, r14	; 0x08
   17c12:	f1 86       	std	Z+9, r15	; 0x09
   17c14:	15 83       	std	Z+5, r17	; 0x05
   17c16:	04 83       	std	Z+4, r16	; 0x04
   17c18:	84 e8       	ldi	r24, 0x84	; 132
   17c1a:	90 e4       	ldi	r25, 0x40	; 64
   17c1c:	a0 e0       	ldi	r26, 0x00	; 0
   17c1e:	81 83       	std	Z+1, r24	; 0x01
   17c20:	92 83       	std	Z+2, r25	; 0x02
   17c22:	a3 83       	std	Z+3, r26	; 0x03
   17c24:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17c28:	80 e0       	ldi	r24, 0x00	; 0
   17c2a:	90 e0       	ldi	r25, 0x00	; 0
   17c2c:	cd b7       	in	r28, 0x3d	; 61
   17c2e:	de b7       	in	r29, 0x3e	; 62
   17c30:	29 96       	adiw	r28, 0x09	; 9
   17c32:	e8 e0       	ldi	r30, 0x08	; 8
   17c34:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

00017c38 <lif_read>:
   17c38:	af e0       	ldi	r26, 0x0F	; 15
   17c3a:	b0 e0       	ldi	r27, 0x00	; 0
   17c3c:	e2 e2       	ldi	r30, 0x22	; 34
   17c3e:	fe eb       	ldi	r31, 0xBE	; 190
   17c40:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
   17c44:	ec 01       	movw	r28, r24
   17c46:	7b 01       	movw	r14, r22
   17c48:	49 01       	movw	r8, r18
   17c4a:	5a 01       	movw	r10, r20
   17c4c:	28 81       	ld	r18, Y
   17c4e:	39 81       	ldd	r19, Y+1	; 0x01
   17c50:	b5 01       	movw	r22, r10
   17c52:	a4 01       	movw	r20, r8
   17c54:	8a 81       	ldd	r24, Y+2	; 0x02
   17c56:	9b 81       	ldd	r25, Y+3	; 0x03
   17c58:	ba df       	rcall	.-140    	; 0x17bce <lif_seek_msg>
   17c5a:	89 2b       	or	r24, r25
   17c5c:	a1 f1       	breq	.+104    	; 0x17cc6 <lif_read+0x8e>
   17c5e:	2a 81       	ldd	r18, Y+2	; 0x02
   17c60:	3b 81       	ldd	r19, Y+3	; 0x03
   17c62:	a8 01       	movw	r20, r16
   17c64:	61 e0       	ldi	r22, 0x01	; 1
   17c66:	70 e0       	ldi	r23, 0x00	; 0
   17c68:	c7 01       	movw	r24, r14
   17c6a:	0e 94 c5 79 	call	0xf38a	; 0xf38a <fread>
   17c6e:	6c 01       	movw	r12, r24
   17c70:	e1 2c       	mov	r14, r1
   17c72:	f1 2c       	mov	r15, r1
   17c74:	b8 01       	movw	r22, r16
   17c76:	01 2e       	mov	r0, r17
   17c78:	00 0c       	add	r0, r0
   17c7a:	88 0b       	sbc	r24, r24
   17c7c:	99 0b       	sbc	r25, r25
   17c7e:	c6 16       	cp	r12, r22
   17c80:	d7 06       	cpc	r13, r23
   17c82:	e8 06       	cpc	r14, r24
   17c84:	f9 06       	cpc	r15, r25
   17c86:	29 f1       	breq	.+74     	; 0x17cd2 <lif_read+0x9a>
   17c88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c8c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17c90:	92 ff       	sbrs	r25, 2
   17c92:	1d c0       	rjmp	.+58     	; 0x17cce <lif_read+0x96>
   17c94:	ed b7       	in	r30, 0x3d	; 61
   17c96:	fe b7       	in	r31, 0x3e	; 62
   17c98:	17 87       	std	Z+15, r17	; 0x0f
   17c9a:	06 87       	std	Z+14, r16	; 0x0e
   17c9c:	c2 86       	std	Z+10, r12	; 0x0a
   17c9e:	d3 86       	std	Z+11, r13	; 0x0b
   17ca0:	e4 86       	std	Z+12, r14	; 0x0c
   17ca2:	f5 86       	std	Z+13, r15	; 0x0d
   17ca4:	86 82       	std	Z+6, r8	; 0x06
   17ca6:	97 82       	std	Z+7, r9	; 0x07
   17ca8:	a0 86       	std	Z+8, r10	; 0x08
   17caa:	b1 86       	std	Z+9, r11	; 0x09
   17cac:	88 81       	ld	r24, Y
   17cae:	99 81       	ldd	r25, Y+1	; 0x01
   17cb0:	95 83       	std	Z+5, r25	; 0x05
   17cb2:	84 83       	std	Z+4, r24	; 0x04
   17cb4:	88 e4       	ldi	r24, 0x48	; 72
   17cb6:	90 e4       	ldi	r25, 0x40	; 64
   17cb8:	a0 e0       	ldi	r26, 0x00	; 0
   17cba:	81 83       	std	Z+1, r24	; 0x01
   17cbc:	92 83       	std	Z+2, r25	; 0x02
   17cbe:	a3 83       	std	Z+3, r26	; 0x03
   17cc0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17cc4:	04 c0       	rjmp	.+8      	; 0x17cce <lif_read+0x96>
   17cc6:	60 e0       	ldi	r22, 0x00	; 0
   17cc8:	70 e0       	ldi	r23, 0x00	; 0
   17cca:	cb 01       	movw	r24, r22
   17ccc:	02 c0       	rjmp	.+4      	; 0x17cd2 <lif_read+0x9a>
   17cce:	c7 01       	movw	r24, r14
   17cd0:	b6 01       	movw	r22, r12
   17cd2:	cd b7       	in	r28, 0x3d	; 61
   17cd4:	de b7       	in	r29, 0x3e	; 62
   17cd6:	2f 96       	adiw	r28, 0x0f	; 15
   17cd8:	ec e0       	ldi	r30, 0x0C	; 12
   17cda:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

00017cde <lif_write>:
   17cde:	8f 92       	push	r8
   17ce0:	9f 92       	push	r9
   17ce2:	af 92       	push	r10
   17ce4:	bf 92       	push	r11
   17ce6:	ef 92       	push	r14
   17ce8:	ff 92       	push	r15
   17cea:	0f 93       	push	r16
   17cec:	1f 93       	push	r17
   17cee:	cf 93       	push	r28
   17cf0:	df 93       	push	r29
   17cf2:	ad b7       	in	r26, 0x3d	; 61
   17cf4:	be b7       	in	r27, 0x3e	; 62
   17cf6:	1d 97       	sbiw	r26, 0x0d	; 13
   17cf8:	0f b6       	in	r0, 0x3f	; 63
   17cfa:	f8 94       	cli
   17cfc:	be bf       	out	0x3e, r27	; 62
   17cfe:	0f be       	out	0x3f, r0	; 63
   17d00:	ad bf       	out	0x3d, r26	; 61
   17d02:	7c 01       	movw	r14, r24
   17d04:	eb 01       	movw	r28, r22
   17d06:	49 01       	movw	r8, r18
   17d08:	5a 01       	movw	r10, r20
   17d0a:	fc 01       	movw	r30, r24
   17d0c:	20 81       	ld	r18, Z
   17d0e:	31 81       	ldd	r19, Z+1	; 0x01
   17d10:	b5 01       	movw	r22, r10
   17d12:	a4 01       	movw	r20, r8
   17d14:	82 81       	ldd	r24, Z+2	; 0x02
   17d16:	93 81       	ldd	r25, Z+3	; 0x03
   17d18:	5a df       	rcall	.-332    	; 0x17bce <lif_seek_msg>
   17d1a:	00 97       	sbiw	r24, 0x00	; 0
   17d1c:	81 f1       	breq	.+96     	; 0x17d7e <lif_write+0xa0>
   17d1e:	f7 01       	movw	r30, r14
   17d20:	22 81       	ldd	r18, Z+2	; 0x02
   17d22:	33 81       	ldd	r19, Z+3	; 0x03
   17d24:	a8 01       	movw	r20, r16
   17d26:	61 e0       	ldi	r22, 0x01	; 1
   17d28:	70 e0       	ldi	r23, 0x00	; 0
   17d2a:	ce 01       	movw	r24, r28
   17d2c:	0e 94 97 7a 	call	0xf52e	; 0xf52e <fwrite>
   17d30:	ec 01       	movw	r28, r24
   17d32:	08 17       	cp	r16, r24
   17d34:	19 07       	cpc	r17, r25
   17d36:	01 f1       	breq	.+64     	; 0x17d78 <lif_write+0x9a>
   17d38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d40:	92 ff       	sbrs	r25, 2
   17d42:	1c c0       	rjmp	.+56     	; 0x17d7c <lif_write+0x9e>
   17d44:	ed b7       	in	r30, 0x3d	; 61
   17d46:	fe b7       	in	r31, 0x3e	; 62
   17d48:	15 87       	std	Z+13, r17	; 0x0d
   17d4a:	04 87       	std	Z+12, r16	; 0x0c
   17d4c:	d3 87       	std	Z+11, r29	; 0x0b
   17d4e:	c2 87       	std	Z+10, r28	; 0x0a
   17d50:	86 82       	std	Z+6, r8	; 0x06
   17d52:	97 82       	std	Z+7, r9	; 0x07
   17d54:	a0 86       	std	Z+8, r10	; 0x08
   17d56:	b1 86       	std	Z+9, r11	; 0x09
   17d58:	f7 01       	movw	r30, r14
   17d5a:	80 81       	ld	r24, Z
   17d5c:	91 81       	ldd	r25, Z+1	; 0x01
   17d5e:	ed b7       	in	r30, 0x3d	; 61
   17d60:	fe b7       	in	r31, 0x3e	; 62
   17d62:	95 83       	std	Z+5, r25	; 0x05
   17d64:	84 83       	std	Z+4, r24	; 0x04
   17d66:	8b e0       	ldi	r24, 0x0B	; 11
   17d68:	90 e4       	ldi	r25, 0x40	; 64
   17d6a:	a0 e0       	ldi	r26, 0x00	; 0
   17d6c:	81 83       	std	Z+1, r24	; 0x01
   17d6e:	92 83       	std	Z+2, r25	; 0x02
   17d70:	a3 83       	std	Z+3, r26	; 0x03
   17d72:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   17d76:	02 c0       	rjmp	.+4      	; 0x17d7c <lif_write+0x9e>
   17d78:	c8 01       	movw	r24, r16
   17d7a:	01 c0       	rjmp	.+2      	; 0x17d7e <lif_write+0xa0>
   17d7c:	ce 01       	movw	r24, r28
   17d7e:	ad b7       	in	r26, 0x3d	; 61
   17d80:	be b7       	in	r27, 0x3e	; 62
   17d82:	1d 96       	adiw	r26, 0x0d	; 13
   17d84:	0f b6       	in	r0, 0x3f	; 63
   17d86:	f8 94       	cli
   17d88:	be bf       	out	0x3e, r27	; 62
   17d8a:	0f be       	out	0x3f, r0	; 63
   17d8c:	ad bf       	out	0x3d, r26	; 61
   17d8e:	df 91       	pop	r29
   17d90:	cf 91       	pop	r28
   17d92:	1f 91       	pop	r17
   17d94:	0f 91       	pop	r16
   17d96:	ff 90       	pop	r15
   17d98:	ef 90       	pop	r14
   17d9a:	bf 90       	pop	r11
   17d9c:	af 90       	pop	r10
   17d9e:	9f 90       	pop	r9
   17da0:	8f 90       	pop	r8
   17da2:	08 95       	ret

00017da4 <lif_chars>:
   17da4:	80 32       	cpi	r24, 0x20	; 32
   17da6:	91 05       	cpc	r25, r1
   17da8:	e1 f0       	breq	.+56     	; 0x17de2 <lif_chars+0x3e>
   17daa:	9c 01       	movw	r18, r24
   17dac:	21 56       	subi	r18, 0x61	; 97
   17dae:	31 09       	sbc	r19, r1
   17db0:	2a 31       	cpi	r18, 0x1A	; 26
   17db2:	31 05       	cpc	r19, r1
   17db4:	10 f4       	brcc	.+4      	; 0x17dba <lif_chars+0x16>
   17db6:	80 97       	sbiw	r24, 0x20	; 32
   17db8:	08 95       	ret
   17dba:	9c 01       	movw	r18, r24
   17dbc:	21 54       	subi	r18, 0x41	; 65
   17dbe:	31 09       	sbc	r19, r1
   17dc0:	2a 31       	cpi	r18, 0x1A	; 26
   17dc2:	31 05       	cpc	r19, r1
   17dc4:	c8 f0       	brcs	.+50     	; 0x17df8 <lif_chars+0x54>
   17dc6:	16 16       	cp	r1, r22
   17dc8:	17 06       	cpc	r1, r23
   17dca:	74 f4       	brge	.+28     	; 0x17de8 <lif_chars+0x44>
   17dcc:	2f 5e       	subi	r18, 0xEF	; 239
   17dce:	3f 4f       	sbci	r19, 0xFF	; 255
   17dd0:	2a 30       	cpi	r18, 0x0A	; 10
   17dd2:	31 05       	cpc	r19, r1
   17dd4:	88 f0       	brcs	.+34     	; 0x17df8 <lif_chars+0x54>
   17dd6:	8f 35       	cpi	r24, 0x5F	; 95
   17dd8:	91 05       	cpc	r25, r1
   17dda:	49 f0       	breq	.+18     	; 0x17dee <lif_chars+0x4a>
   17ddc:	8d 97       	sbiw	r24, 0x2d	; 45
   17dde:	21 f4       	brne	.+8      	; 0x17de8 <lif_chars+0x44>
   17de0:	09 c0       	rjmp	.+18     	; 0x17df4 <lif_chars+0x50>
   17de2:	80 e2       	ldi	r24, 0x20	; 32
   17de4:	90 e0       	ldi	r25, 0x00	; 0
   17de6:	08 95       	ret
   17de8:	80 e0       	ldi	r24, 0x00	; 0
   17dea:	90 e0       	ldi	r25, 0x00	; 0
   17dec:	08 95       	ret
   17dee:	8f e5       	ldi	r24, 0x5F	; 95
   17df0:	90 e0       	ldi	r25, 0x00	; 0
   17df2:	08 95       	ret
   17df4:	8d e2       	ldi	r24, 0x2D	; 45
   17df6:	90 e0       	ldi	r25, 0x00	; 0
   17df8:	08 95       	ret

00017dfa <lif_B2S>:
   17dfa:	a0 e0       	ldi	r26, 0x00	; 0
   17dfc:	b0 e0       	ldi	r27, 0x00	; 0
   17dfe:	e3 e0       	ldi	r30, 0x03	; 3
   17e00:	ff eb       	ldi	r31, 0xBF	; 191
   17e02:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
   17e06:	5c 01       	movw	r10, r24
   17e08:	6b 01       	movw	r12, r22
   17e0a:	ea 01       	movw	r28, r20
   17e0c:	4c 01       	movw	r8, r24
   17e0e:	ee 24       	eor	r14, r14
   17e10:	e3 94       	inc	r14
   17e12:	f1 2c       	mov	r15, r1
   17e14:	00 e0       	ldi	r16, 0x00	; 0
   17e16:	10 e0       	ldi	r17, 0x00	; 0
   17e18:	0c 17       	cp	r16, r28
   17e1a:	1d 07       	cpc	r17, r29
   17e1c:	6c f4       	brge	.+26     	; 0x17e38 <lif_B2S+0x3e>
   17e1e:	f4 01       	movw	r30, r8
   17e20:	81 91       	ld	r24, Z+
   17e22:	4f 01       	movw	r8, r30
   17e24:	b8 01       	movw	r22, r16
   17e26:	90 e0       	ldi	r25, 0x00	; 0
   17e28:	bd df       	rcall	.-134    	; 0x17da4 <lif_chars>
   17e2a:	89 2b       	or	r24, r25
   17e2c:	11 f4       	brne	.+4      	; 0x17e32 <lif_B2S+0x38>
   17e2e:	e1 2c       	mov	r14, r1
   17e30:	f1 2c       	mov	r15, r1
   17e32:	0f 5f       	subi	r16, 0xFF	; 255
   17e34:	1f 4f       	sbci	r17, 0xFF	; 255
   17e36:	f0 cf       	rjmp	.-32     	; 0x17e18 <lif_B2S+0x1e>
   17e38:	d6 01       	movw	r26, r12
   17e3a:	f5 01       	movw	r30, r10
   17e3c:	cf 01       	movw	r24, r30
   17e3e:	8a 19       	sub	r24, r10
   17e40:	9b 09       	sbc	r25, r11
   17e42:	8c 17       	cp	r24, r28
   17e44:	9d 07       	cpc	r25, r29
   17e46:	1c f4       	brge	.+6      	; 0x17e4e <lif_B2S+0x54>
   17e48:	81 91       	ld	r24, Z+
   17e4a:	8d 93       	st	X+, r24
   17e4c:	f7 cf       	rjmp	.-18     	; 0x17e3c <lif_B2S+0x42>
   17e4e:	d7 ff       	sbrs	r29, 7
   17e50:	02 c0       	rjmp	.+4      	; 0x17e56 <lif_B2S+0x5c>
   17e52:	c0 e0       	ldi	r28, 0x00	; 0
   17e54:	d0 e0       	ldi	r29, 0x00	; 0
   17e56:	cc 0d       	add	r28, r12
   17e58:	dd 1d       	adc	r29, r13
   17e5a:	18 82       	st	Y, r1
   17e5c:	c6 01       	movw	r24, r12
   17e5e:	0e 94 4f 30 	call	0x609e	; 0x609e <trim_tail>
   17e62:	c7 01       	movw	r24, r14
   17e64:	cd b7       	in	r28, 0x3d	; 61
   17e66:	de b7       	in	r29, 0x3e	; 62
   17e68:	ec e0       	ldi	r30, 0x0C	; 12
   17e6a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

00017e6e <lif_checkname>:
   17e6e:	ef 92       	push	r14
   17e70:	ff 92       	push	r15
   17e72:	0f 93       	push	r16
   17e74:	1f 93       	push	r17
   17e76:	cf 93       	push	r28
   17e78:	df 93       	push	r29
   17e7a:	7c 01       	movw	r14, r24
   17e7c:	ec 01       	movw	r28, r24
   17e7e:	01 e0       	ldi	r16, 0x01	; 1
   17e80:	10 e0       	ldi	r17, 0x00	; 0
   17e82:	be 01       	movw	r22, r28
   17e84:	6e 19       	sub	r22, r14
   17e86:	7f 09       	sbc	r23, r15
   17e88:	89 91       	ld	r24, Y+
   17e8a:	88 23       	and	r24, r24
   17e8c:	39 f0       	breq	.+14     	; 0x17e9c <lif_checkname+0x2e>
   17e8e:	90 e0       	ldi	r25, 0x00	; 0
   17e90:	89 df       	rcall	.-238    	; 0x17da4 <lif_chars>
   17e92:	89 2b       	or	r24, r25
   17e94:	b1 f7       	brne	.-20     	; 0x17e82 <lif_checkname+0x14>
   17e96:	00 e0       	ldi	r16, 0x00	; 0
   17e98:	10 e0       	ldi	r17, 0x00	; 0
   17e9a:	f3 cf       	rjmp	.-26     	; 0x17e82 <lif_checkname+0x14>
   17e9c:	c8 01       	movw	r24, r16
   17e9e:	cd b7       	in	r28, 0x3d	; 61
   17ea0:	de b7       	in	r29, 0x3e	; 62
   17ea2:	e6 e0       	ldi	r30, 0x06	; 6
   17ea4:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00017ea8 <lif_S2B>:
   17ea8:	fb 01       	movw	r30, r22
   17eaa:	dc 01       	movw	r26, r24
   17eac:	20 e0       	ldi	r18, 0x00	; 0
   17eae:	30 e0       	ldi	r19, 0x00	; 0
   17eb0:	61 91       	ld	r22, Z+
   17eb2:	61 11       	cpse	r22, r1
   17eb4:	05 c0       	rjmp	.+10     	; 0x17ec0 <lif_S2B+0x18>
   17eb6:	fc 01       	movw	r30, r24
   17eb8:	e2 0f       	add	r30, r18
   17eba:	f3 1f       	adc	r31, r19
   17ebc:	60 e2       	ldi	r22, 0x20	; 32
   17ebe:	08 c0       	rjmp	.+16     	; 0x17ed0 <lif_S2B+0x28>
   17ec0:	24 17       	cp	r18, r20
   17ec2:	35 07       	cpc	r19, r21
   17ec4:	24 f4       	brge	.+8      	; 0x17ece <lif_S2B+0x26>
   17ec6:	6d 93       	st	X+, r22
   17ec8:	2f 5f       	subi	r18, 0xFF	; 255
   17eca:	3f 4f       	sbci	r19, 0xFF	; 255
   17ecc:	f1 cf       	rjmp	.-30     	; 0x17eb0 <lif_S2B+0x8>
   17ece:	08 95       	ret
   17ed0:	9f 01       	movw	r18, r30
   17ed2:	28 1b       	sub	r18, r24
   17ed4:	39 0b       	sbc	r19, r25
   17ed6:	24 17       	cp	r18, r20
   17ed8:	35 07       	cpc	r19, r21
   17eda:	14 f4       	brge	.+4      	; 0x17ee0 <lif_S2B+0x38>
   17edc:	61 93       	st	Z+, r22
   17ede:	f8 cf       	rjmp	.-16     	; 0x17ed0 <lif_S2B+0x28>
   17ee0:	08 95       	ret

00017ee2 <lif_fixname>:
   17ee2:	a0 e0       	ldi	r26, 0x00	; 0
   17ee4:	b0 e0       	ldi	r27, 0x00	; 0
   17ee6:	e7 e7       	ldi	r30, 0x77	; 119
   17ee8:	ff eb       	ldi	r31, 0xBF	; 191
   17eea:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__prologue_saves__+0x12>
   17eee:	8c 01       	movw	r16, r24
   17ef0:	cb 01       	movw	r24, r22
   17ef2:	7a 01       	movw	r14, r20
   17ef4:	0e 94 40 75 	call	0xea80	; 0xea80 <basename>
   17ef8:	6c 01       	movw	r12, r24
   17efa:	e8 01       	movw	r28, r16
   17efc:	80 e2       	ldi	r24, 0x20	; 32
   17efe:	b8 2e       	mov	r11, r24
   17f00:	be 01       	movw	r22, r28
   17f02:	60 1b       	sub	r22, r16
   17f04:	71 0b       	sbc	r23, r17
   17f06:	f6 01       	movw	r30, r12
   17f08:	81 91       	ld	r24, Z+
   17f0a:	6f 01       	movw	r12, r30
   17f0c:	81 11       	cpse	r24, r1
   17f0e:	02 c0       	rjmp	.+4      	; 0x17f14 <lif_fixname+0x32>
   17f10:	20 e2       	ldi	r18, 0x20	; 32
   17f12:	0e c0       	rjmp	.+28     	; 0x17f30 <lif_fixname+0x4e>
   17f14:	1e 14       	cp	r1, r14
   17f16:	1f 04       	cpc	r1, r15
   17f18:	dc f7       	brge	.-10     	; 0x17f10 <lif_fixname+0x2e>
   17f1a:	8e 32       	cpi	r24, 0x2E	; 46
   17f1c:	c9 f3       	breq	.-14     	; 0x17f10 <lif_fixname+0x2e>
   17f1e:	90 e0       	ldi	r25, 0x00	; 0
   17f20:	41 df       	rcall	.-382    	; 0x17da4 <lif_chars>
   17f22:	88 23       	and	r24, r24
   17f24:	11 f0       	breq	.+4      	; 0x17f2a <lif_fixname+0x48>
   17f26:	88 83       	st	Y, r24
   17f28:	01 c0       	rjmp	.+2      	; 0x17f2c <lif_fixname+0x4a>
   17f2a:	b8 82       	st	Y, r11
   17f2c:	21 96       	adiw	r28, 0x01	; 1
   17f2e:	e8 cf       	rjmp	.-48     	; 0x17f00 <lif_fixname+0x1e>
   17f30:	ce 01       	movw	r24, r28
   17f32:	80 1b       	sub	r24, r16
   17f34:	91 0b       	sbc	r25, r17
   17f36:	8e 15       	cp	r24, r14
   17f38:	9f 05       	cpc	r25, r15
   17f3a:	14 f4       	brge	.+4      	; 0x17f40 <lif_fixname+0x5e>
   17f3c:	29 93       	st	Y+, r18
   17f3e:	f8 cf       	rjmp	.-16     	; 0x17f30 <lif_fixname+0x4e>
   17f40:	18 82       	st	Y, r1
   17f42:	f8 01       	movw	r30, r16
   17f44:	01 90       	ld	r0, Z+
   17f46:	00 20       	and	r0, r0
   17f48:	e9 f7       	brne	.-6      	; 0x17f44 <lif_fixname+0x62>
   17f4a:	cf 01       	movw	r24, r30
   17f4c:	01 97       	sbiw	r24, 0x01	; 1
   17f4e:	80 1b       	sub	r24, r16
   17f50:	91 0b       	sbc	r25, r17
   17f52:	cd b7       	in	r28, 0x3d	; 61
   17f54:	de b7       	in	r29, 0x3e	; 62
   17f56:	e9 e0       	ldi	r30, 0x09	; 9
   17f58:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__epilogue_restores__+0x12>

00017f5c <lif_vol2str>:
   17f5c:	ef 92       	push	r14
   17f5e:	ff 92       	push	r15
   17f60:	0f 93       	push	r16
   17f62:	1f 93       	push	r17
   17f64:	cf 93       	push	r28
   17f66:	df 93       	push	r29
   17f68:	7c 01       	movw	r14, r24
   17f6a:	eb 01       	movw	r28, r22
   17f6c:	fc 01       	movw	r30, r24
   17f6e:	04 a1       	ldd	r16, Z+36	; 0x24
   17f70:	15 a1       	ldd	r17, Z+37	; 0x25
   17f72:	20 e0       	ldi	r18, 0x00	; 0
   17f74:	30 e0       	ldi	r19, 0x00	; 0
   17f76:	42 e0       	ldi	r20, 0x02	; 2
   17f78:	50 e0       	ldi	r21, 0x00	; 0
   17f7a:	60 e0       	ldi	r22, 0x00	; 0
   17f7c:	70 e0       	ldi	r23, 0x00	; 0
   17f7e:	ce 01       	movw	r24, r28
   17f80:	e4 dc       	rcall	.-1592   	; 0x1794a <V2B_MSB>
   17f82:	b7 01       	movw	r22, r14
   17f84:	6a 5d       	subi	r22, 0xDA	; 218
   17f86:	7f 4f       	sbci	r23, 0xFF	; 255
   17f88:	46 e0       	ldi	r20, 0x06	; 6
   17f8a:	50 e0       	ldi	r21, 0x00	; 0
   17f8c:	ce 01       	movw	r24, r28
   17f8e:	02 96       	adiw	r24, 0x02	; 2
   17f90:	8b df       	rcall	.-234    	; 0x17ea8 <lif_S2B>
   17f92:	f7 01       	movw	r30, r14
   17f94:	05 a5       	ldd	r16, Z+45	; 0x2d
   17f96:	16 a5       	ldd	r17, Z+46	; 0x2e
   17f98:	27 a5       	ldd	r18, Z+47	; 0x2f
   17f9a:	30 a9       	ldd	r19, Z+48	; 0x30
   17f9c:	44 e0       	ldi	r20, 0x04	; 4
   17f9e:	50 e0       	ldi	r21, 0x00	; 0
   17fa0:	68 e0       	ldi	r22, 0x08	; 8
   17fa2:	70 e0       	ldi	r23, 0x00	; 0
   17fa4:	ce 01       	movw	r24, r28
   17fa6:	d1 dc       	rcall	.-1630   	; 0x1794a <V2B_MSB>
   17fa8:	f7 01       	movw	r30, r14
   17faa:	01 a9       	ldd	r16, Z+49	; 0x31
   17fac:	12 a9       	ldd	r17, Z+50	; 0x32
   17fae:	20 e0       	ldi	r18, 0x00	; 0
   17fb0:	30 e0       	ldi	r19, 0x00	; 0
   17fb2:	42 e0       	ldi	r20, 0x02	; 2
   17fb4:	50 e0       	ldi	r21, 0x00	; 0
   17fb6:	6c e0       	ldi	r22, 0x0C	; 12
   17fb8:	70 e0       	ldi	r23, 0x00	; 0
   17fba:	ce 01       	movw	r24, r28
   17fbc:	c6 dc       	rcall	.-1652   	; 0x1794a <V2B_MSB>
   17fbe:	00 e0       	ldi	r16, 0x00	; 0
   17fc0:	10 e0       	ldi	r17, 0x00	; 0
   17fc2:	98 01       	movw	r18, r16
   17fc4:	42 e0       	ldi	r20, 0x02	; 2
   17fc6:	50 e0       	ldi	r21, 0x00	; 0
   17fc8:	6e e0       	ldi	r22, 0x0E	; 14
   17fca:	70 e0       	ldi	r23, 0x00	; 0
   17fcc:	ce 01       	movw	r24, r28
   17fce:	bd dc       	rcall	.-1670   	; 0x1794a <V2B_MSB>
   17fd0:	f7 01       	movw	r30, r14
   17fd2:	05 a9       	ldd	r16, Z+53	; 0x35
   17fd4:	16 a9       	ldd	r17, Z+54	; 0x36
   17fd6:	27 a9       	ldd	r18, Z+55	; 0x37
   17fd8:	30 ad       	ldd	r19, Z+56	; 0x38
   17fda:	44 e0       	ldi	r20, 0x04	; 4
   17fdc:	50 e0       	ldi	r21, 0x00	; 0
   17fde:	60 e1       	ldi	r22, 0x10	; 16
   17fe0:	70 e0       	ldi	r23, 0x00	; 0
   17fe2:	ce 01       	movw	r24, r28
   17fe4:	b2 dc       	rcall	.-1692   	; 0x1794a <V2B_MSB>
   17fe6:	f7 01       	movw	r30, r14
   17fe8:	01 ad       	ldd	r16, Z+57	; 0x39
   17fea:	12 ad       	ldd	r17, Z+58	; 0x3a
   17fec:	20 e0       	ldi	r18, 0x00	; 0
   17fee:	30 e0       	ldi	r19, 0x00	; 0
   17ff0:	42 e0       	ldi	r20, 0x02	; 2
   17ff2:	50 e0       	ldi	r21, 0x00	; 0
   17ff4:	64 e1       	ldi	r22, 0x14	; 20
   17ff6:	70 e0       	ldi	r23, 0x00	; 0
   17ff8:	ce 01       	movw	r24, r28
   17ffa:	a7 dc       	rcall	.-1714   	; 0x1794a <V2B_MSB>
   17ffc:	00 e0       	ldi	r16, 0x00	; 0
   17ffe:	10 e0       	ldi	r17, 0x00	; 0
   18000:	98 01       	movw	r18, r16
   18002:	42 e0       	ldi	r20, 0x02	; 2
   18004:	50 e0       	ldi	r21, 0x00	; 0
   18006:	66 e1       	ldi	r22, 0x16	; 22
   18008:	70 e0       	ldi	r23, 0x00	; 0
   1800a:	ce 01       	movw	r24, r28
   1800c:	9e dc       	rcall	.-1732   	; 0x1794a <V2B_MSB>
   1800e:	f7 01       	movw	r30, r14
   18010:	fd 96       	adiw	r30, 0x3d	; 61
   18012:	00 81       	ld	r16, Z
   18014:	11 81       	ldd	r17, Z+1	; 0x01
   18016:	22 81       	ldd	r18, Z+2	; 0x02
   18018:	33 81       	ldd	r19, Z+3	; 0x03
   1801a:	44 e0       	ldi	r20, 0x04	; 4
   1801c:	50 e0       	ldi	r21, 0x00	; 0
   1801e:	68 e1       	ldi	r22, 0x18	; 24
   18020:	70 e0       	ldi	r23, 0x00	; 0
   18022:	ce 01       	movw	r24, r28
   18024:	92 dc       	rcall	.-1756   	; 0x1794a <V2B_MSB>
   18026:	f7 01       	movw	r30, r14
   18028:	ef 5b       	subi	r30, 0xBF	; 191
   1802a:	ff 4f       	sbci	r31, 0xFF	; 255
   1802c:	00 81       	ld	r16, Z
   1802e:	11 81       	ldd	r17, Z+1	; 0x01
   18030:	22 81       	ldd	r18, Z+2	; 0x02
   18032:	33 81       	ldd	r19, Z+3	; 0x03
   18034:	44 e0       	ldi	r20, 0x04	; 4
   18036:	50 e0       	ldi	r21, 0x00	; 0
   18038:	6c e1       	ldi	r22, 0x1C	; 28
   1803a:	70 e0       	ldi	r23, 0x00	; 0
   1803c:	ce 01       	movw	r24, r28
   1803e:	85 dc       	rcall	.-1782   	; 0x1794a <V2B_MSB>
   18040:	f7 01       	movw	r30, r14
   18042:	eb 5b       	subi	r30, 0xBB	; 187
   18044:	ff 4f       	sbci	r31, 0xFF	; 255
   18046:	00 81       	ld	r16, Z
   18048:	11 81       	ldd	r17, Z+1	; 0x01
   1804a:	22 81       	ldd	r18, Z+2	; 0x02
   1804c:	33 81       	ldd	r19, Z+3	; 0x03
   1804e:	44 e0       	ldi	r20, 0x04	; 4
   18050:	50 e0       	ldi	r21, 0x00	; 0
   18052:	60 e2       	ldi	r22, 0x20	; 32
   18054:	70 e0       	ldi	r23, 0x00	; 0
   18056:	ce 01       	movw	r24, r28
   18058:	78 dc       	rcall	.-1808   	; 0x1794a <V2B_MSB>
   1805a:	de 01       	movw	r26, r28
   1805c:	94 96       	adiw	r26, 0x24	; 36
   1805e:	f7 01       	movw	r30, r14
   18060:	e7 5b       	subi	r30, 0xB7	; 183
   18062:	ff 4f       	sbci	r31, 0xFF	; 255
   18064:	86 e0       	ldi	r24, 0x06	; 6
   18066:	01 90       	ld	r0, Z+
   18068:	0d 92       	st	X+, r0
   1806a:	8a 95       	dec	r24
   1806c:	e1 f7       	brne	.-8      	; 0x18066 <lif_vol2str+0x10a>
   1806e:	cd b7       	in	r28, 0x3d	; 61
   18070:	de b7       	in	r29, 0x3e	; 62
   18072:	e6 e0       	ldi	r30, 0x06	; 6
   18074:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

00018078 <lif_str2vol>:
   18078:	0f 93       	push	r16
   1807a:	1f 93       	push	r17
   1807c:	cf 93       	push	r28
   1807e:	df 93       	push	r29
   18080:	8c 01       	movw	r16, r24
   18082:	eb 01       	movw	r28, r22
   18084:	42 e0       	ldi	r20, 0x02	; 2
   18086:	50 e0       	ldi	r21, 0x00	; 0
   18088:	60 e0       	ldi	r22, 0x00	; 0
   1808a:	70 e0       	ldi	r23, 0x00	; 0
   1808c:	87 dc       	rcall	.-1778   	; 0x1799c <B2V_MSB>
   1808e:	7d a3       	std	Y+37, r23	; 0x25
   18090:	6c a3       	std	Y+36, r22	; 0x24
   18092:	be 01       	movw	r22, r28
   18094:	6a 5d       	subi	r22, 0xDA	; 218
   18096:	7f 4f       	sbci	r23, 0xFF	; 255
   18098:	46 e0       	ldi	r20, 0x06	; 6
   1809a:	50 e0       	ldi	r21, 0x00	; 0
   1809c:	c8 01       	movw	r24, r16
   1809e:	02 96       	adiw	r24, 0x02	; 2
   180a0:	ac de       	rcall	.-680    	; 0x17dfa <lif_B2S>
   180a2:	44 e0       	ldi	r20, 0x04	; 4
   180a4:	50 e0       	ldi	r21, 0x00	; 0
   180a6:	68 e0       	ldi	r22, 0x08	; 8
   180a8:	70 e0       	ldi	r23, 0x00	; 0
   180aa:	c8 01       	movw	r24, r16
   180ac:	77 dc       	rcall	.-1810   	; 0x1799c <B2V_MSB>
   180ae:	6d a7       	std	Y+45, r22	; 0x2d
   180b0:	7e a7       	std	Y+46, r23	; 0x2e
   180b2:	8f a7       	std	Y+47, r24	; 0x2f
   180b4:	98 ab       	std	Y+48, r25	; 0x30
   180b6:	42 e0       	ldi	r20, 0x02	; 2
   180b8:	50 e0       	ldi	r21, 0x00	; 0
   180ba:	6c e0       	ldi	r22, 0x0C	; 12
   180bc:	70 e0       	ldi	r23, 0x00	; 0
   180be:	c8 01       	movw	r24, r16
   180c0:	6d dc       	rcall	.-1830   	; 0x1799c <B2V_MSB>
   180c2:	7a ab       	std	Y+50, r23	; 0x32
   180c4:	69 ab       	std	Y+49, r22	; 0x31
   180c6:	42 e0       	ldi	r20, 0x02	; 2
   180c8:	50 e0       	ldi	r21, 0x00	; 0
   180ca:	6e e0       	ldi	r22, 0x0E	; 14
   180cc:	70 e0       	ldi	r23, 0x00	; 0
   180ce:	c8 01       	movw	r24, r16
   180d0:	65 dc       	rcall	.-1846   	; 0x1799c <B2V_MSB>
   180d2:	7c ab       	std	Y+52, r23	; 0x34
   180d4:	6b ab       	std	Y+51, r22	; 0x33
   180d6:	44 e0       	ldi	r20, 0x04	; 4
   180d8:	50 e0       	ldi	r21, 0x00	; 0
   180da:	60 e1       	ldi	r22, 0x10	; 16
   180dc:	70 e0       	ldi	r23, 0x00	; 0
   180de:	c8 01       	movw	r24, r16
   180e0:	5d dc       	rcall	.-1862   	; 0x1799c <B2V_MSB>
   180e2:	6d ab       	std	Y+53, r22	; 0x35
   180e4:	7e ab       	std	Y+54, r23	; 0x36
   180e6:	8f ab       	std	Y+55, r24	; 0x37
   180e8:	98 af       	std	Y+56, r25	; 0x38
   180ea:	42 e0       	ldi	r20, 0x02	; 2
   180ec:	50 e0       	ldi	r21, 0x00	; 0
   180ee:	64 e1       	ldi	r22, 0x14	; 20
   180f0:	70 e0       	ldi	r23, 0x00	; 0
   180f2:	c8 01       	movw	r24, r16
   180f4:	53 dc       	rcall	.-1882   	; 0x1799c <B2V_MSB>
   180f6:	7a af       	std	Y+58, r23	; 0x3a
   180f8:	69 af       	std	Y+57, r22	; 0x39
   180fa:	42 e0       	ldi	r20, 0x02	; 2
   180fc:	50 e0       	ldi	r21, 0x00	; 0
   180fe:	66 e1       	ldi	r22, 0x16	; 22
   18100:	70 e0       	ldi	r23, 0x00	; 0
   18102:	c8 01       	movw	r24, r16
   18104:	4b dc       	rcall	.-1898   	; 0x1799c <B2V_MSB>
   18106:	7c af       	std	Y+60, r23	; 0x3c
   18108:	6b af       	std	Y+59, r22	; 0x3b
   1810a:	44 e0       	ldi	r20, 0x04	; 4
   1810c:	50 e0       	ldi	r21, 0x00	; 0
   1810e:	68 e1       	ldi	r22, 0x18	; 24
   18110:	70 e0       	ldi	r23, 0x00	; 0
   18112:	c8 01       	movw	r24, r16
   18114:	43 dc       	rcall	.-1914   	; 0x1799c <B2V_MSB>
   18116:	fe 01       	movw	r30, r28
   18118:	fd 96       	adiw	r30, 0x3d	; 61
   1811a:	60 83       	st	Z, r22
   1811c:	71 83       	std	Z+1, r23	; 0x01
   1811e:	82 83       	std	Z+2, r24	; 0x02
   18120:	93 83       	std	Z+3, r25	; 0x03
   18122:	44 e0       	ldi	r20, 0x04	; 4
   18124:	50 e0       	ldi	r21, 0x00	; 0
   18126:	6c e1       	ldi	r22, 0x1C	; 28
   18128:	70 e0       	ldi	r23, 0x00	; 0
   1812a:	c8 01       	movw	r24, r16
   1812c:	37 dc       	rcall	.-1938   	; 0x1799c <B2V_MSB>
   1812e:	fe 01       	movw	r30, r28
   18130:	ef 5b       	subi	r30, 0xBF	; 191
   18132:	ff 4f       	sbci	r31, 0xFF	; 255
   18134:	60 83       	st	Z, r22
   18136:	71 83       	std	Z+1, r23	; 0x01
   18138:	82 83       	std	Z+2, r24	; 0x02
   1813a:	93 83       	std	Z+3, r25	; 0x03
   1813c:	44 e0       	ldi	r20, 0x04	; 4
   1813e:	50 e0       	ldi	r21, 0x00	; 0
   18140:	60 e2       	ldi	r22, 0x20	; 32
   18142:	70 e0       	ldi	r23, 0x00	; 0
   18144:	c8 01       	movw	r24, r16
   18146:	2a dc       	rcall	.-1964   	; 0x1799c <B2V_MSB>
   18148:	fe 01       	movw	r30, r28
   1814a:	eb 5b       	subi	r30, 0xBB	; 187
   1814c:	ff 4f       	sbci	r31, 0xFF	; 255
   1814e:	60 83       	st	Z, r22
   18150:	71 83       	std	Z+1, r23	; 0x01
   18152:	82 83       	std	Z+2, r24	; 0x02
   18154:	93 83       	std	Z+3, r25	; 0x03
   18156:	de 01       	movw	r26, r28
   18158:	a7 5b       	subi	r26, 0xB7	; 183
   1815a:	bf 4f       	sbci	r27, 0xFF	; 255
   1815c:	f8 01       	movw	r30, r16
   1815e:	b4 96       	adiw	r30, 0x24	; 36
   18160:	86 e0       	ldi	r24, 0x06	; 6
   18162:	01 90       	ld	r0, Z+
   18164:	0d 92       	st	X+, r0
   18166:	8a 95       	dec	r24
   18168:	e1 f7       	brne	.-8      	; 0x18162 <lif_str2vol+0xea>
   1816a:	df 91       	pop	r29
   1816c:	cf 91       	pop	r28
   1816e:	1f 91       	pop	r17
   18170:	0f 91       	pop	r16
   18172:	08 95       	ret

00018174 <lif_dir2str>:
   18174:	ef 92       	push	r14
   18176:	ff 92       	push	r15
   18178:	0f 93       	push	r16
   1817a:	1f 93       	push	r17
   1817c:	cf 93       	push	r28
   1817e:	df 93       	push	r29
   18180:	ec 01       	movw	r28, r24
   18182:	7b 01       	movw	r14, r22
   18184:	bc 01       	movw	r22, r24
   18186:	61 5b       	subi	r22, 0xB1	; 177
   18188:	7f 4f       	sbci	r23, 0xFF	; 255
   1818a:	4a e0       	ldi	r20, 0x0A	; 10
   1818c:	50 e0       	ldi	r21, 0x00	; 0
   1818e:	c7 01       	movw	r24, r14
   18190:	8b de       	rcall	.-746    	; 0x17ea8 <lif_S2B>
   18192:	fe 01       	movw	r30, r28
   18194:	e6 5a       	subi	r30, 0xA6	; 166
   18196:	ff 4f       	sbci	r31, 0xFF	; 255
   18198:	00 81       	ld	r16, Z
   1819a:	11 81       	ldd	r17, Z+1	; 0x01
   1819c:	20 e0       	ldi	r18, 0x00	; 0
   1819e:	30 e0       	ldi	r19, 0x00	; 0
   181a0:	42 e0       	ldi	r20, 0x02	; 2
   181a2:	50 e0       	ldi	r21, 0x00	; 0
   181a4:	6a e0       	ldi	r22, 0x0A	; 10
   181a6:	70 e0       	ldi	r23, 0x00	; 0
   181a8:	c7 01       	movw	r24, r14
   181aa:	cf db       	rcall	.-2146   	; 0x1794a <V2B_MSB>
   181ac:	fe 01       	movw	r30, r28
   181ae:	e4 5a       	subi	r30, 0xA4	; 164
   181b0:	ff 4f       	sbci	r31, 0xFF	; 255
   181b2:	00 81       	ld	r16, Z
   181b4:	11 81       	ldd	r17, Z+1	; 0x01
   181b6:	22 81       	ldd	r18, Z+2	; 0x02
   181b8:	33 81       	ldd	r19, Z+3	; 0x03
   181ba:	44 e0       	ldi	r20, 0x04	; 4
   181bc:	50 e0       	ldi	r21, 0x00	; 0
   181be:	6c e0       	ldi	r22, 0x0C	; 12
   181c0:	70 e0       	ldi	r23, 0x00	; 0
   181c2:	c7 01       	movw	r24, r14
   181c4:	c2 db       	rcall	.-2172   	; 0x1794a <V2B_MSB>
   181c6:	fe 01       	movw	r30, r28
   181c8:	e0 5a       	subi	r30, 0xA0	; 160
   181ca:	ff 4f       	sbci	r31, 0xFF	; 255
   181cc:	00 81       	ld	r16, Z
   181ce:	11 81       	ldd	r17, Z+1	; 0x01
   181d0:	22 81       	ldd	r18, Z+2	; 0x02
   181d2:	33 81       	ldd	r19, Z+3	; 0x03
   181d4:	44 e0       	ldi	r20, 0x04	; 4
   181d6:	50 e0       	ldi	r21, 0x00	; 0
   181d8:	60 e1       	ldi	r22, 0x10	; 16
   181da:	70 e0       	ldi	r23, 0x00	; 0
   181dc:	c7 01       	movw	r24, r14
   181de:	b5 db       	rcall	.-2198   	; 0x1794a <V2B_MSB>
   181e0:	d7 01       	movw	r26, r14
   181e2:	54 96       	adiw	r26, 0x14	; 20
   181e4:	fe 01       	movw	r30, r28
   181e6:	ec 59       	subi	r30, 0x9C	; 156
   181e8:	ff 4f       	sbci	r31, 0xFF	; 255
   181ea:	86 e0       	ldi	r24, 0x06	; 6
   181ec:	01 90       	ld	r0, Z+
   181ee:	0d 92       	st	X+, r0
   181f0:	8a 95       	dec	r24
   181f2:	e1 f7       	brne	.-8      	; 0x181ec <lif_dir2str+0x78>
   181f4:	fe 01       	movw	r30, r28
   181f6:	e6 59       	subi	r30, 0x96	; 150
   181f8:	ff 4f       	sbci	r31, 0xFF	; 255
   181fa:	00 81       	ld	r16, Z
   181fc:	11 81       	ldd	r17, Z+1	; 0x01
   181fe:	20 e0       	ldi	r18, 0x00	; 0
   18200:	30 e0       	ldi	r19, 0x00	; 0
   18202:	42 e0       	ldi	r20, 0x02	; 2
   18204:	50 e0       	ldi	r21, 0x00	; 0
   18206:	6a e1       	ldi	r22, 0x1A	; 26
   18208:	70 e0       	ldi	r23, 0x00	; 0
   1820a:	c7 01       	movw	r24, r14
   1820c:	9e db       	rcall	.-2244   	; 0x1794a <V2B_MSB>
   1820e:	fe 01       	movw	r30, r28
   18210:	e4 59       	subi	r30, 0x94	; 148
   18212:	ff 4f       	sbci	r31, 0xFF	; 255
   18214:	00 81       	ld	r16, Z
   18216:	11 81       	ldd	r17, Z+1	; 0x01
   18218:	20 e0       	ldi	r18, 0x00	; 0
   1821a:	30 e0       	ldi	r19, 0x00	; 0
   1821c:	42 e0       	ldi	r20, 0x02	; 2
   1821e:	50 e0       	ldi	r21, 0x00	; 0
   18220:	6c e1       	ldi	r22, 0x1C	; 28
   18222:	70 e0       	ldi	r23, 0x00	; 0
   18224:	c7 01       	movw	r24, r14
   18226:	a5 db       	rcall	.-2230   	; 0x17972 <V2B_LSB>
   18228:	c2 59       	subi	r28, 0x92	; 146
   1822a:	df 4f       	sbci	r29, 0xFF	; 255
   1822c:	08 81       	ld	r16, Y
   1822e:	19 81       	ldd	r17, Y+1	; 0x01
   18230:	20 e0       	ldi	r18, 0x00	; 0
   18232:	30 e0       	ldi	r19, 0x00	; 0
   18234:	42 e0       	ldi	r20, 0x02	; 2
   18236:	50 e0       	ldi	r21, 0x00	; 0
   18238:	6e e1       	ldi	r22, 0x1E	; 30
   1823a:	70 e0       	ldi	r23, 0x00	; 0
   1823c:	c7 01       	movw	r24, r14
   1823e:	99 db       	rcall	.-2254   	; 0x17972 <V2B_LSB>
   18240:	cd b7       	in	r28, 0x3d	; 61
   18242:	de b7       	in	r29, 0x3e	; 62
   18244:	e6 e0       	ldi	r30, 0x06	; 6
   18246:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0001824a <lif_str2dir>:
   1824a:	0f 93       	push	r16
   1824c:	1f 93       	push	r17
   1824e:	cf 93       	push	r28
   18250:	df 93       	push	r29
   18252:	8c 01       	movw	r16, r24
   18254:	eb 01       	movw	r28, r22
   18256:	61 5b       	subi	r22, 0xB1	; 177
   18258:	7f 4f       	sbci	r23, 0xFF	; 255
   1825a:	4a e0       	ldi	r20, 0x0A	; 10
   1825c:	50 e0       	ldi	r21, 0x00	; 0
   1825e:	cd dd       	rcall	.-1126   	; 0x17dfa <lif_B2S>
   18260:	42 e0       	ldi	r20, 0x02	; 2
   18262:	50 e0       	ldi	r21, 0x00	; 0
   18264:	6a e0       	ldi	r22, 0x0A	; 10
   18266:	70 e0       	ldi	r23, 0x00	; 0
   18268:	c8 01       	movw	r24, r16
   1826a:	98 db       	rcall	.-2256   	; 0x1799c <B2V_MSB>
   1826c:	fe 01       	movw	r30, r28
   1826e:	e6 5a       	subi	r30, 0xA6	; 166
   18270:	ff 4f       	sbci	r31, 0xFF	; 255
   18272:	71 83       	std	Z+1, r23	; 0x01
   18274:	60 83       	st	Z, r22
   18276:	44 e0       	ldi	r20, 0x04	; 4
   18278:	50 e0       	ldi	r21, 0x00	; 0
   1827a:	6c e0       	ldi	r22, 0x0C	; 12
   1827c:	70 e0       	ldi	r23, 0x00	; 0
   1827e:	c8 01       	movw	r24, r16
   18280:	8d db       	rcall	.-2278   	; 0x1799c <B2V_MSB>
   18282:	fe 01       	movw	r30, r28
   18284:	e4 5a       	subi	r30, 0xA4	; 164
   18286:	ff 4f       	sbci	r31, 0xFF	; 255
   18288:	60 83       	st	Z, r22
   1828a:	71 83       	std	Z+1, r23	; 0x01
   1828c:	82 83       	std	Z+2, r24	; 0x02
   1828e:	93 83       	std	Z+3, r25	; 0x03
   18290:	44 e0       	ldi	r20, 0x04	; 4
   18292:	50 e0       	ldi	r21, 0x00	; 0
   18294:	60 e1       	ldi	r22, 0x10	; 16
   18296:	70 e0       	ldi	r23, 0x00	; 0
   18298:	c8 01       	movw	r24, r16
   1829a:	80 db       	rcall	.-2304   	; 0x1799c <B2V_MSB>
   1829c:	fe 01       	movw	r30, r28
   1829e:	e0 5a       	subi	r30, 0xA0	; 160
   182a0:	ff 4f       	sbci	r31, 0xFF	; 255
   182a2:	60 83       	st	Z, r22
   182a4:	71 83       	std	Z+1, r23	; 0x01
   182a6:	82 83       	std	Z+2, r24	; 0x02
   182a8:	93 83       	std	Z+3, r25	; 0x03
   182aa:	de 01       	movw	r26, r28
   182ac:	ac 59       	subi	r26, 0x9C	; 156
   182ae:	bf 4f       	sbci	r27, 0xFF	; 255
   182b0:	f8 01       	movw	r30, r16
   182b2:	74 96       	adiw	r30, 0x14	; 20
   182b4:	86 e0       	ldi	r24, 0x06	; 6
   182b6:	01 90       	ld	r0, Z+
   182b8:	0d 92       	st	X+, r0
   182ba:	8a 95       	dec	r24
   182bc:	e1 f7       	brne	.-8      	; 0x182b6 <lif_str2dir+0x6c>
   182be:	42 e0       	ldi	r20, 0x02	; 2
   182c0:	50 e0       	ldi	r21, 0x00	; 0
   182c2:	6a e1       	ldi	r22, 0x1A	; 26
   182c4:	70 e0       	ldi	r23, 0x00	; 0
   182c6:	c8 01       	movw	r24, r16
   182c8:	69 db       	rcall	.-2350   	; 0x1799c <B2V_MSB>
   182ca:	fe 01       	movw	r30, r28
   182cc:	e6 59       	subi	r30, 0x96	; 150
   182ce:	ff 4f       	sbci	r31, 0xFF	; 255
   182d0:	71 83       	std	Z+1, r23	; 0x01
   182d2:	60 83       	st	Z, r22
   182d4:	42 e0       	ldi	r20, 0x02	; 2
   182d6:	50 e0       	ldi	r21, 0x00	; 0
   182d8:	6c e1       	ldi	r22, 0x1C	; 28
   182da:	70 e0       	ldi	r23, 0x00	; 0
   182dc:	c8 01       	movw	r24, r16
   182de:	7d db       	rcall	.-2310   	; 0x179da <B2V_LSB>
   182e0:	fe 01       	movw	r30, r28
   182e2:	e4 59       	subi	r30, 0x94	; 148
   182e4:	ff 4f       	sbci	r31, 0xFF	; 255
   182e6:	71 83       	std	Z+1, r23	; 0x01
   182e8:	60 83       	st	Z, r22
   182ea:	42 e0       	ldi	r20, 0x02	; 2
   182ec:	50 e0       	ldi	r21, 0x00	; 0
   182ee:	6e e1       	ldi	r22, 0x1E	; 30
   182f0:	70 e0       	ldi	r23, 0x00	; 0
   182f2:	c8 01       	movw	r24, r16
   182f4:	72 db       	rcall	.-2332   	; 0x179da <B2V_LSB>
   182f6:	c2 59       	subi	r28, 0x92	; 146
   182f8:	df 4f       	sbci	r29, 0xFF	; 255
   182fa:	79 83       	std	Y+1, r23	; 0x01
   182fc:	68 83       	st	Y, r22
   182fe:	df 91       	pop	r29
   18300:	cf 91       	pop	r28
   18302:	1f 91       	pop	r17
   18304:	0f 91       	pop	r16
   18306:	08 95       	ret

00018308 <lif_BIN2BCD>:
   18308:	6a e0       	ldi	r22, 0x0A	; 10
   1830a:	0e 94 4d e2 	call	0x1c49a	; 0x1c49a <__udivmodqi4>
   1830e:	82 95       	swap	r24
   18310:	80 7f       	andi	r24, 0xF0	; 240
   18312:	89 2b       	or	r24, r25
   18314:	08 95       	ret

00018316 <lif_BCD2BIN>:
   18316:	28 2f       	mov	r18, r24
   18318:	22 95       	swap	r18
   1831a:	2f 70       	andi	r18, 0x0F	; 15
   1831c:	8f 70       	andi	r24, 0x0F	; 15
   1831e:	90 e0       	ldi	r25, 0x00	; 0
   18320:	3a e0       	ldi	r19, 0x0A	; 10
   18322:	23 9f       	mul	r18, r19
   18324:	80 0d       	add	r24, r0
   18326:	91 1d       	adc	r25, r1
   18328:	11 24       	eor	r1, r1
   1832a:	08 95       	ret

0001832c <lif_time2lifbcd>:
   1832c:	aa e1       	ldi	r26, 0x1A	; 26
   1832e:	b0 e0       	ldi	r27, 0x00	; 0
   18330:	ec e9       	ldi	r30, 0x9C	; 156
   18332:	f1 ec       	ldi	r31, 0xC1	; 193
   18334:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
   18338:	8b 01       	movw	r16, r22
   1833a:	9c 01       	movw	r18, r24
   1833c:	6f 8b       	std	Y+23, r22	; 0x17
   1833e:	78 8f       	std	Y+24, r23	; 0x18
   18340:	89 8f       	std	Y+25, r24	; 0x19
   18342:	9a 8f       	std	Y+26, r25	; 0x1a
   18344:	67 2b       	or	r22, r23
   18346:	68 2b       	or	r22, r24
   18348:	69 2b       	or	r22, r25
   1834a:	41 f4       	brne	.+16     	; 0x1835c <lif_time2lifbcd+0x30>
   1834c:	fa 01       	movw	r30, r20
   1834e:	ca 01       	movw	r24, r20
   18350:	06 96       	adiw	r24, 0x06	; 6
   18352:	11 92       	st	Z+, r1
   18354:	e8 17       	cp	r30, r24
   18356:	f9 07       	cpc	r31, r25
   18358:	e1 f7       	brne	.-8      	; 0x18352 <lif_time2lifbcd+0x26>
   1835a:	26 c0       	rjmp	.+76     	; 0x183a8 <lif_time2lifbcd+0x7c>
   1835c:	8a 01       	movw	r16, r20
   1835e:	be 01       	movw	r22, r28
   18360:	6f 5f       	subi	r22, 0xFF	; 255
   18362:	7f 4f       	sbci	r23, 0xFF	; 255
   18364:	ce 01       	movw	r24, r28
   18366:	47 96       	adiw	r24, 0x17	; 23
   18368:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <gmtime_r>
   1836c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1836e:	9c 85       	ldd	r25, Y+12	; 0x0c
   18370:	64 e6       	ldi	r22, 0x64	; 100
   18372:	70 e0       	ldi	r23, 0x00	; 0
   18374:	0e 94 6d e2 	call	0x1c4da	; 0x1c4da <__divmodhi4>
   18378:	c7 df       	rcall	.-114    	; 0x18308 <lif_BIN2BCD>
   1837a:	f8 01       	movw	r30, r16
   1837c:	80 83       	st	Z, r24
   1837e:	89 85       	ldd	r24, Y+9	; 0x09
   18380:	8f 5f       	subi	r24, 0xFF	; 255
   18382:	c2 df       	rcall	.-124    	; 0x18308 <lif_BIN2BCD>
   18384:	f8 01       	movw	r30, r16
   18386:	81 83       	std	Z+1, r24	; 0x01
   18388:	8f 81       	ldd	r24, Y+7	; 0x07
   1838a:	be df       	rcall	.-132    	; 0x18308 <lif_BIN2BCD>
   1838c:	f8 01       	movw	r30, r16
   1838e:	82 83       	std	Z+2, r24	; 0x02
   18390:	8d 81       	ldd	r24, Y+5	; 0x05
   18392:	ba df       	rcall	.-140    	; 0x18308 <lif_BIN2BCD>
   18394:	f8 01       	movw	r30, r16
   18396:	83 83       	std	Z+3, r24	; 0x03
   18398:	8b 81       	ldd	r24, Y+3	; 0x03
   1839a:	b6 df       	rcall	.-148    	; 0x18308 <lif_BIN2BCD>
   1839c:	f8 01       	movw	r30, r16
   1839e:	84 83       	std	Z+4, r24	; 0x04
   183a0:	89 81       	ldd	r24, Y+1	; 0x01
   183a2:	b2 df       	rcall	.-156    	; 0x18308 <lif_BIN2BCD>
   183a4:	f8 01       	movw	r30, r16
   183a6:	85 83       	std	Z+5, r24	; 0x05
   183a8:	6a 96       	adiw	r28, 0x1a	; 26
   183aa:	e4 e0       	ldi	r30, 0x04	; 4
   183ac:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

000183b0 <lif_lifbcd2time>:
   183b0:	a6 e1       	ldi	r26, 0x16	; 22
   183b2:	b0 e0       	ldi	r27, 0x00	; 0
   183b4:	ee ed       	ldi	r30, 0xDE	; 222
   183b6:	f1 ec       	ldi	r31, 0xC1	; 193
   183b8:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   183bc:	8c 01       	movw	r16, r24
   183be:	7c 01       	movw	r14, r24
   183c0:	5c 01       	movw	r10, r24
   183c2:	26 e0       	ldi	r18, 0x06	; 6
   183c4:	a2 0e       	add	r10, r18
   183c6:	b1 1c       	adc	r11, r1
   183c8:	cc 24       	eor	r12, r12
   183ca:	c3 94       	inc	r12
   183cc:	d1 2c       	mov	r13, r1
   183ce:	f7 01       	movw	r30, r14
   183d0:	81 91       	ld	r24, Z+
   183d2:	7f 01       	movw	r14, r30
   183d4:	a0 df       	rcall	.-192    	; 0x18316 <lif_BCD2BIN>
   183d6:	89 2b       	or	r24, r25
   183d8:	11 f0       	breq	.+4      	; 0x183de <lif_lifbcd2time+0x2e>
   183da:	c1 2c       	mov	r12, r1
   183dc:	d1 2c       	mov	r13, r1
   183de:	ea 14       	cp	r14, r10
   183e0:	fb 04       	cpc	r15, r11
   183e2:	a9 f7       	brne	.-22     	; 0x183ce <lif_lifbcd2time+0x1e>
   183e4:	c1 14       	cp	r12, r1
   183e6:	d1 04       	cpc	r13, r1
   183e8:	61 f5       	brne	.+88     	; 0x18442 <lif_lifbcd2time+0x92>
   183ea:	f8 01       	movw	r30, r16
   183ec:	80 81       	ld	r24, Z
   183ee:	93 df       	rcall	.-218    	; 0x18316 <lif_BCD2BIN>
   183f0:	7c 01       	movw	r14, r24
   183f2:	f8 01       	movw	r30, r16
   183f4:	81 81       	ldd	r24, Z+1	; 0x01
   183f6:	8f df       	rcall	.-226    	; 0x18316 <lif_BCD2BIN>
   183f8:	01 97       	sbiw	r24, 0x01	; 1
   183fa:	f6 e4       	ldi	r31, 0x46	; 70
   183fc:	ef 16       	cp	r14, r31
   183fe:	f1 04       	cpc	r15, r1
   18400:	1c f4       	brge	.+6      	; 0x18408 <lif_lifbcd2time+0x58>
   18402:	24 e6       	ldi	r18, 0x64	; 100
   18404:	e2 0e       	add	r14, r18
   18406:	f1 1c       	adc	r15, r1
   18408:	fc 86       	std	Y+12, r15	; 0x0c
   1840a:	eb 86       	std	Y+11, r14	; 0x0b
   1840c:	9a 87       	std	Y+10, r25	; 0x0a
   1840e:	89 87       	std	Y+9, r24	; 0x09
   18410:	f8 01       	movw	r30, r16
   18412:	82 81       	ldd	r24, Z+2	; 0x02
   18414:	80 df       	rcall	.-256    	; 0x18316 <lif_BCD2BIN>
   18416:	98 87       	std	Y+8, r25	; 0x08
   18418:	8f 83       	std	Y+7, r24	; 0x07
   1841a:	f8 01       	movw	r30, r16
   1841c:	83 81       	ldd	r24, Z+3	; 0x03
   1841e:	7b df       	rcall	.-266    	; 0x18316 <lif_BCD2BIN>
   18420:	9e 83       	std	Y+6, r25	; 0x06
   18422:	8d 83       	std	Y+5, r24	; 0x05
   18424:	f8 01       	movw	r30, r16
   18426:	84 81       	ldd	r24, Z+4	; 0x04
   18428:	76 df       	rcall	.-276    	; 0x18316 <lif_BCD2BIN>
   1842a:	9c 83       	std	Y+4, r25	; 0x04
   1842c:	8b 83       	std	Y+3, r24	; 0x03
   1842e:	f8 01       	movw	r30, r16
   18430:	85 81       	ldd	r24, Z+5	; 0x05
   18432:	71 df       	rcall	.-286    	; 0x18316 <lif_BCD2BIN>
   18434:	9a 83       	std	Y+2, r25	; 0x02
   18436:	89 83       	std	Y+1, r24	; 0x01
   18438:	ce 01       	movw	r24, r28
   1843a:	01 96       	adiw	r24, 0x01	; 1
   1843c:	0e 94 97 38 	call	0x712e	; 0x712e <timegm>
   18440:	03 c0       	rjmp	.+6      	; 0x18448 <lif_lifbcd2time+0x98>
   18442:	60 e0       	ldi	r22, 0x00	; 0
   18444:	70 e0       	ldi	r23, 0x00	; 0
   18446:	cb 01       	movw	r24, r22
   18448:	66 96       	adiw	r28, 0x16	; 22
   1844a:	ea e0       	ldi	r30, 0x0A	; 10
   1844c:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

00018450 <lif_ctime_gmt>:
   18450:	a6 e1       	ldi	r26, 0x16	; 22
   18452:	b0 e0       	ldi	r27, 0x00	; 0
   18454:	ee e2       	ldi	r30, 0x2E	; 46
   18456:	f2 ec       	ldi	r31, 0xC2	; 194
   18458:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__prologue_saves__+0x1c>
   1845c:	20 e2       	ldi	r18, 0x20	; 32
   1845e:	ea ec       	ldi	r30, 0xCA	; 202
   18460:	f9 e1       	ldi	r31, 0x19	; 25
   18462:	df 01       	movw	r26, r30
   18464:	1d 92       	st	X+, r1
   18466:	2a 95       	dec	r18
   18468:	e9 f7       	brne	.-6      	; 0x18464 <lif_ctime_gmt+0x14>
   1846a:	be 01       	movw	r22, r28
   1846c:	6f 5f       	subi	r22, 0xFF	; 255
   1846e:	7f 4f       	sbci	r23, 0xFF	; 255
   18470:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <gmtime_r>
   18474:	6a ec       	ldi	r22, 0xCA	; 202
   18476:	79 e1       	ldi	r23, 0x19	; 25
   18478:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <asctime_r>
   1847c:	8c 01       	movw	r16, r24
   1847e:	0e 94 4f 30 	call	0x609e	; 0x609e <trim_tail>
   18482:	c8 01       	movw	r24, r16
   18484:	66 96       	adiw	r28, 0x16	; 22
   18486:	e4 e0       	ldi	r30, 0x04	; 4
   18488:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

0001848c <lif_lifbcd2timestr>:
   1848c:	a4 e0       	ldi	r26, 0x04	; 4
   1848e:	b0 e0       	ldi	r27, 0x00	; 0
   18490:	ec e4       	ldi	r30, 0x4C	; 76
   18492:	f2 ec       	ldi	r31, 0xC2	; 194
   18494:	0c 94 fd e2 	jmp	0x1c5fa	; 0x1c5fa <__prologue_saves__+0x20>
   18498:	20 e2       	ldi	r18, 0x20	; 32
   1849a:	ea ea       	ldi	r30, 0xAA	; 170
   1849c:	f9 e1       	ldi	r31, 0x19	; 25
   1849e:	df 01       	movw	r26, r30
   184a0:	1d 92       	st	X+, r1
   184a2:	2a 95       	dec	r18
   184a4:	e9 f7       	brne	.-6      	; 0x184a0 <lif_lifbcd2timestr+0x14>
   184a6:	84 df       	rcall	.-248    	; 0x183b0 <lif_lifbcd2time>
   184a8:	69 83       	std	Y+1, r22	; 0x01
   184aa:	7a 83       	std	Y+2, r23	; 0x02
   184ac:	8b 83       	std	Y+3, r24	; 0x03
   184ae:	9c 83       	std	Y+4, r25	; 0x04
   184b0:	67 2b       	or	r22, r23
   184b2:	68 2b       	or	r22, r24
   184b4:	69 2b       	or	r22, r25
   184b6:	29 f0       	breq	.+10     	; 0x184c2 <lif_lifbcd2timestr+0x36>
   184b8:	ce 01       	movw	r24, r28
   184ba:	01 96       	adiw	r24, 0x01	; 1
   184bc:	c9 df       	rcall	.-110    	; 0x18450 <lif_ctime_gmt>
   184be:	bc 01       	movw	r22, r24
   184c0:	02 c0       	rjmp	.+4      	; 0x184c6 <lif_lifbcd2timestr+0x3a>
   184c2:	67 ee       	ldi	r22, 0xE7	; 231
   184c4:	75 e1       	ldi	r23, 0x15	; 21
   184c6:	8a ea       	ldi	r24, 0xAA	; 170
   184c8:	99 e1       	ldi	r25, 0x19	; 25
   184ca:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <strcpy>
   184ce:	8a ea       	ldi	r24, 0xAA	; 170
   184d0:	99 e1       	ldi	r25, 0x19	; 25
   184d2:	24 96       	adiw	r28, 0x04	; 4
   184d4:	e2 e0       	ldi	r30, 0x02	; 2
   184d6:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

000184da <lif_image_clear>:
   184da:	20 e7       	ldi	r18, 0x70	; 112
   184dc:	fc 01       	movw	r30, r24
   184de:	11 92       	st	Z+, r1
   184e0:	2a 95       	dec	r18
   184e2:	e9 f7       	brne	.-6      	; 0x184de <lif_image_clear+0x4>
   184e4:	08 95       	ret

000184e6 <lif_dir_clear>:
   184e6:	81 5b       	subi	r24, 0xB1	; 177
   184e8:	9f 4f       	sbci	r25, 0xFF	; 255
   184ea:	21 e2       	ldi	r18, 0x21	; 33
   184ec:	fc 01       	movw	r30, r24
   184ee:	11 92       	st	Z+, r1
   184f0:	2a 95       	dec	r18
   184f2:	e9 f7       	brne	.-6      	; 0x184ee <lif_dir_clear+0x8>
   184f4:	08 95       	ret

000184f6 <lif_vol_clear>:
   184f6:	84 96       	adiw	r24, 0x24	; 36
   184f8:	2b e2       	ldi	r18, 0x2B	; 43
   184fa:	fc 01       	movw	r30, r24
   184fc:	11 92       	st	Z+, r1
   184fe:	2a 95       	dec	r18
   18500:	e9 f7       	brne	.-6      	; 0x184fc <lif_vol_clear+0x6>
   18502:	08 95       	ret

00018504 <lif_dump_vol>:
   18504:	cf 93       	push	r28
   18506:	df 93       	push	r29
   18508:	ad b7       	in	r26, 0x3d	; 61
   1850a:	be b7       	in	r27, 0x3e	; 62
   1850c:	17 97       	sbiw	r26, 0x07	; 7
   1850e:	0f b6       	in	r0, 0x3f	; 63
   18510:	f8 94       	cli
   18512:	be bf       	out	0x3e, r27	; 62
   18514:	0f be       	out	0x3f, r0	; 63
   18516:	ad bf       	out	0x3d, r26	; 61
   18518:	ec 01       	movw	r28, r24
   1851a:	ed b7       	in	r30, 0x3d	; 61
   1851c:	fe b7       	in	r31, 0x3e	; 62
   1851e:	75 83       	std	Z+5, r23	; 0x05
   18520:	64 83       	std	Z+4, r22	; 0x04
   18522:	86 e0       	ldi	r24, 0x06	; 6
   18524:	90 e4       	ldi	r25, 0x40	; 64
   18526:	a0 e0       	ldi	r26, 0x00	; 0
   18528:	81 83       	std	Z+1, r24	; 0x01
   1852a:	92 83       	std	Z+2, r25	; 0x02
   1852c:	a3 83       	std	Z+3, r26	; 0x03
   1852e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18532:	88 81       	ld	r24, Y
   18534:	99 81       	ldd	r25, Y+1	; 0x01
   18536:	ed b7       	in	r30, 0x3d	; 61
   18538:	fe b7       	in	r31, 0x3e	; 62
   1853a:	95 83       	std	Z+5, r25	; 0x05
   1853c:	84 83       	std	Z+4, r24	; 0x04
   1853e:	8c ee       	ldi	r24, 0xEC	; 236
   18540:	9f e3       	ldi	r25, 0x3F	; 63
   18542:	a0 e0       	ldi	r26, 0x00	; 0
   18544:	81 83       	std	Z+1, r24	; 0x01
   18546:	92 83       	std	Z+2, r25	; 0x02
   18548:	a3 83       	std	Z+3, r26	; 0x03
   1854a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1854e:	8c 81       	ldd	r24, Y+4	; 0x04
   18550:	9d 81       	ldd	r25, Y+5	; 0x05
   18552:	ae 81       	ldd	r26, Y+6	; 0x06
   18554:	bf 81       	ldd	r27, Y+7	; 0x07
   18556:	ed b7       	in	r30, 0x3d	; 61
   18558:	fe b7       	in	r31, 0x3e	; 62
   1855a:	84 83       	std	Z+4, r24	; 0x04
   1855c:	95 83       	std	Z+5, r25	; 0x05
   1855e:	a6 83       	std	Z+6, r26	; 0x06
   18560:	b7 83       	std	Z+7, r27	; 0x07
   18562:	8f ec       	ldi	r24, 0xCF	; 207
   18564:	9f e3       	ldi	r25, 0x3F	; 63
   18566:	a0 e0       	ldi	r26, 0x00	; 0
   18568:	81 83       	std	Z+1, r24	; 0x01
   1856a:	92 83       	std	Z+2, r25	; 0x02
   1856c:	a3 83       	std	Z+3, r26	; 0x03
   1856e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18572:	88 85       	ldd	r24, Y+8	; 0x08
   18574:	99 85       	ldd	r25, Y+9	; 0x09
   18576:	aa 85       	ldd	r26, Y+10	; 0x0a
   18578:	bb 85       	ldd	r27, Y+11	; 0x0b
   1857a:	ed b7       	in	r30, 0x3d	; 61
   1857c:	fe b7       	in	r31, 0x3e	; 62
   1857e:	84 83       	std	Z+4, r24	; 0x04
   18580:	95 83       	std	Z+5, r25	; 0x05
   18582:	a6 83       	std	Z+6, r26	; 0x06
   18584:	b7 83       	std	Z+7, r27	; 0x07
   18586:	82 eb       	ldi	r24, 0xB2	; 178
   18588:	9f e3       	ldi	r25, 0x3F	; 63
   1858a:	a0 e0       	ldi	r26, 0x00	; 0
   1858c:	81 83       	std	Z+1, r24	; 0x01
   1858e:	92 83       	std	Z+2, r25	; 0x02
   18590:	a3 83       	std	Z+3, r26	; 0x03
   18592:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18596:	8c 85       	ldd	r24, Y+12	; 0x0c
   18598:	9d 85       	ldd	r25, Y+13	; 0x0d
   1859a:	ae 85       	ldd	r26, Y+14	; 0x0e
   1859c:	bf 85       	ldd	r27, Y+15	; 0x0f
   1859e:	ed b7       	in	r30, 0x3d	; 61
   185a0:	fe b7       	in	r31, 0x3e	; 62
   185a2:	84 83       	std	Z+4, r24	; 0x04
   185a4:	95 83       	std	Z+5, r25	; 0x05
   185a6:	a6 83       	std	Z+6, r26	; 0x06
   185a8:	b7 83       	std	Z+7, r27	; 0x07
   185aa:	85 e9       	ldi	r24, 0x95	; 149
   185ac:	9f e3       	ldi	r25, 0x3F	; 63
   185ae:	a0 e0       	ldi	r26, 0x00	; 0
   185b0:	81 83       	std	Z+1, r24	; 0x01
   185b2:	92 83       	std	Z+2, r25	; 0x02
   185b4:	a3 83       	std	Z+3, r26	; 0x03
   185b6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   185ba:	88 89       	ldd	r24, Y+16	; 0x10
   185bc:	99 89       	ldd	r25, Y+17	; 0x11
   185be:	aa 89       	ldd	r26, Y+18	; 0x12
   185c0:	bb 89       	ldd	r27, Y+19	; 0x13
   185c2:	ed b7       	in	r30, 0x3d	; 61
   185c4:	fe b7       	in	r31, 0x3e	; 62
   185c6:	84 83       	std	Z+4, r24	; 0x04
   185c8:	95 83       	std	Z+5, r25	; 0x05
   185ca:	a6 83       	std	Z+6, r26	; 0x06
   185cc:	b7 83       	std	Z+7, r27	; 0x07
   185ce:	88 e7       	ldi	r24, 0x78	; 120
   185d0:	9f e3       	ldi	r25, 0x3F	; 63
   185d2:	a0 e0       	ldi	r26, 0x00	; 0
   185d4:	81 83       	std	Z+1, r24	; 0x01
   185d6:	92 83       	std	Z+2, r25	; 0x02
   185d8:	a3 83       	std	Z+3, r26	; 0x03
   185da:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   185de:	8c 89       	ldd	r24, Y+20	; 0x14
   185e0:	9d 89       	ldd	r25, Y+21	; 0x15
   185e2:	ae 89       	ldd	r26, Y+22	; 0x16
   185e4:	bf 89       	ldd	r27, Y+23	; 0x17
   185e6:	ed b7       	in	r30, 0x3d	; 61
   185e8:	fe b7       	in	r31, 0x3e	; 62
   185ea:	84 83       	std	Z+4, r24	; 0x04
   185ec:	95 83       	std	Z+5, r25	; 0x05
   185ee:	a6 83       	std	Z+6, r26	; 0x06
   185f0:	b7 83       	std	Z+7, r27	; 0x07
   185f2:	8b e5       	ldi	r24, 0x5B	; 91
   185f4:	9f e3       	ldi	r25, 0x3F	; 63
   185f6:	a0 e0       	ldi	r26, 0x00	; 0
   185f8:	81 83       	std	Z+1, r24	; 0x01
   185fa:	92 83       	std	Z+2, r25	; 0x02
   185fc:	a3 83       	std	Z+3, r26	; 0x03
   185fe:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18602:	88 8d       	ldd	r24, Y+24	; 0x18
   18604:	99 8d       	ldd	r25, Y+25	; 0x19
   18606:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18608:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1860a:	ed b7       	in	r30, 0x3d	; 61
   1860c:	fe b7       	in	r31, 0x3e	; 62
   1860e:	84 83       	std	Z+4, r24	; 0x04
   18610:	95 83       	std	Z+5, r25	; 0x05
   18612:	a6 83       	std	Z+6, r26	; 0x06
   18614:	b7 83       	std	Z+7, r27	; 0x07
   18616:	8e e3       	ldi	r24, 0x3E	; 62
   18618:	9f e3       	ldi	r25, 0x3F	; 63
   1861a:	a0 e0       	ldi	r26, 0x00	; 0
   1861c:	81 83       	std	Z+1, r24	; 0x01
   1861e:	92 83       	std	Z+2, r25	; 0x02
   18620:	a3 83       	std	Z+3, r26	; 0x03
   18622:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18626:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18628:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1862a:	09 2e       	mov	r0, r25
   1862c:	00 0c       	add	r0, r0
   1862e:	aa 0b       	sbc	r26, r26
   18630:	bb 0b       	sbc	r27, r27
   18632:	ed b7       	in	r30, 0x3d	; 61
   18634:	fe b7       	in	r31, 0x3e	; 62
   18636:	84 83       	std	Z+4, r24	; 0x04
   18638:	95 83       	std	Z+5, r25	; 0x05
   1863a:	a6 83       	std	Z+6, r26	; 0x06
   1863c:	b7 83       	std	Z+7, r27	; 0x07
   1863e:	81 e2       	ldi	r24, 0x21	; 33
   18640:	9f e3       	ldi	r25, 0x3F	; 63
   18642:	a0 e0       	ldi	r26, 0x00	; 0
   18644:	81 83       	std	Z+1, r24	; 0x01
   18646:	92 83       	std	Z+2, r25	; 0x02
   18648:	a3 83       	std	Z+3, r26	; 0x03
   1864a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1864e:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18650:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18652:	09 2e       	mov	r0, r25
   18654:	00 0c       	add	r0, r0
   18656:	aa 0b       	sbc	r26, r26
   18658:	bb 0b       	sbc	r27, r27
   1865a:	ed b7       	in	r30, 0x3d	; 61
   1865c:	fe b7       	in	r31, 0x3e	; 62
   1865e:	84 83       	std	Z+4, r24	; 0x04
   18660:	95 83       	std	Z+5, r25	; 0x05
   18662:	a6 83       	std	Z+6, r26	; 0x06
   18664:	b7 83       	std	Z+7, r27	; 0x07
   18666:	84 e0       	ldi	r24, 0x04	; 4
   18668:	9f e3       	ldi	r25, 0x3F	; 63
   1866a:	a0 e0       	ldi	r26, 0x00	; 0
   1866c:	81 83       	std	Z+1, r24	; 0x01
   1866e:	92 83       	std	Z+2, r25	; 0x02
   18670:	a3 83       	std	Z+3, r26	; 0x03
   18672:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18676:	ce 01       	movw	r24, r28
   18678:	86 96       	adiw	r24, 0x26	; 38
   1867a:	ed b7       	in	r30, 0x3d	; 61
   1867c:	fe b7       	in	r31, 0x3e	; 62
   1867e:	95 83       	std	Z+5, r25	; 0x05
   18680:	84 83       	std	Z+4, r24	; 0x04
   18682:	8a ee       	ldi	r24, 0xEA	; 234
   18684:	9e e3       	ldi	r25, 0x3E	; 62
   18686:	a0 e0       	ldi	r26, 0x00	; 0
   18688:	81 83       	std	Z+1, r24	; 0x01
   1868a:	92 83       	std	Z+2, r25	; 0x02
   1868c:	a3 83       	std	Z+3, r26	; 0x03
   1868e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18692:	8c a1       	ldd	r24, Y+36	; 0x24
   18694:	9d a1       	ldd	r25, Y+37	; 0x25
   18696:	ed b7       	in	r30, 0x3d	; 61
   18698:	fe b7       	in	r31, 0x3e	; 62
   1869a:	95 83       	std	Z+5, r25	; 0x05
   1869c:	84 83       	std	Z+4, r24	; 0x04
   1869e:	8e ec       	ldi	r24, 0xCE	; 206
   186a0:	9e e3       	ldi	r25, 0x3E	; 62
   186a2:	a0 e0       	ldi	r26, 0x00	; 0
   186a4:	81 83       	std	Z+1, r24	; 0x01
   186a6:	92 83       	std	Z+2, r25	; 0x02
   186a8:	a3 83       	std	Z+3, r26	; 0x03
   186aa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   186ae:	8d a5       	ldd	r24, Y+45	; 0x2d
   186b0:	9e a5       	ldd	r25, Y+46	; 0x2e
   186b2:	af a5       	ldd	r26, Y+47	; 0x2f
   186b4:	b8 a9       	ldd	r27, Y+48	; 0x30
   186b6:	ed b7       	in	r30, 0x3d	; 61
   186b8:	fe b7       	in	r31, 0x3e	; 62
   186ba:	84 83       	std	Z+4, r24	; 0x04
   186bc:	95 83       	std	Z+5, r25	; 0x05
   186be:	a6 83       	std	Z+6, r26	; 0x06
   186c0:	b7 83       	std	Z+7, r27	; 0x07
   186c2:	81 eb       	ldi	r24, 0xB1	; 177
   186c4:	9e e3       	ldi	r25, 0x3E	; 62
   186c6:	a0 e0       	ldi	r26, 0x00	; 0
   186c8:	81 83       	std	Z+1, r24	; 0x01
   186ca:	92 83       	std	Z+2, r25	; 0x02
   186cc:	a3 83       	std	Z+3, r26	; 0x03
   186ce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   186d2:	8d a9       	ldd	r24, Y+53	; 0x35
   186d4:	9e a9       	ldd	r25, Y+54	; 0x36
   186d6:	af a9       	ldd	r26, Y+55	; 0x37
   186d8:	b8 ad       	ldd	r27, Y+56	; 0x38
   186da:	ed b7       	in	r30, 0x3d	; 61
   186dc:	fe b7       	in	r31, 0x3e	; 62
   186de:	84 83       	std	Z+4, r24	; 0x04
   186e0:	95 83       	std	Z+5, r25	; 0x05
   186e2:	a6 83       	std	Z+6, r26	; 0x06
   186e4:	b7 83       	std	Z+7, r27	; 0x07
   186e6:	84 e9       	ldi	r24, 0x94	; 148
   186e8:	9e e3       	ldi	r25, 0x3E	; 62
   186ea:	a0 e0       	ldi	r26, 0x00	; 0
   186ec:	81 83       	std	Z+1, r24	; 0x01
   186ee:	92 83       	std	Z+2, r25	; 0x02
   186f0:	a3 83       	std	Z+3, r26	; 0x03
   186f2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   186f6:	89 a9       	ldd	r24, Y+49	; 0x31
   186f8:	9a a9       	ldd	r25, Y+50	; 0x32
   186fa:	ed b7       	in	r30, 0x3d	; 61
   186fc:	fe b7       	in	r31, 0x3e	; 62
   186fe:	95 83       	std	Z+5, r25	; 0x05
   18700:	84 83       	std	Z+4, r24	; 0x04
   18702:	88 e7       	ldi	r24, 0x78	; 120
   18704:	9e e3       	ldi	r25, 0x3E	; 62
   18706:	a0 e0       	ldi	r26, 0x00	; 0
   18708:	81 83       	std	Z+1, r24	; 0x01
   1870a:	92 83       	std	Z+2, r25	; 0x02
   1870c:	a3 83       	std	Z+3, r26	; 0x03
   1870e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18712:	89 ad       	ldd	r24, Y+57	; 0x39
   18714:	9a ad       	ldd	r25, Y+58	; 0x3a
   18716:	ed b7       	in	r30, 0x3d	; 61
   18718:	fe b7       	in	r31, 0x3e	; 62
   1871a:	95 83       	std	Z+5, r25	; 0x05
   1871c:	84 83       	std	Z+4, r24	; 0x04
   1871e:	8c e5       	ldi	r24, 0x5C	; 92
   18720:	9e e3       	ldi	r25, 0x3E	; 62
   18722:	a0 e0       	ldi	r26, 0x00	; 0
   18724:	81 83       	std	Z+1, r24	; 0x01
   18726:	92 83       	std	Z+2, r25	; 0x02
   18728:	a3 83       	std	Z+3, r26	; 0x03
   1872a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1872e:	ce 01       	movw	r24, r28
   18730:	87 5b       	subi	r24, 0xB7	; 183
   18732:	9f 4f       	sbci	r25, 0xFF	; 255
   18734:	ab de       	rcall	.-682    	; 0x1848c <lif_lifbcd2timestr>
   18736:	ed b7       	in	r30, 0x3d	; 61
   18738:	fe b7       	in	r31, 0x3e	; 62
   1873a:	95 83       	std	Z+5, r25	; 0x05
   1873c:	84 83       	std	Z+4, r24	; 0x04
   1873e:	82 e4       	ldi	r24, 0x42	; 66
   18740:	9e e3       	ldi	r25, 0x3E	; 62
   18742:	a0 e0       	ldi	r26, 0x00	; 0
   18744:	81 83       	std	Z+1, r24	; 0x01
   18746:	92 83       	std	Z+2, r25	; 0x02
   18748:	a3 83       	std	Z+3, r26	; 0x03
   1874a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1874e:	ce 01       	movw	r24, r28
   18750:	81 5b       	subi	r24, 0xB1	; 177
   18752:	9f 4f       	sbci	r25, 0xFF	; 255
   18754:	ed b7       	in	r30, 0x3d	; 61
   18756:	fe b7       	in	r31, 0x3e	; 62
   18758:	95 83       	std	Z+5, r25	; 0x05
   1875a:	84 83       	std	Z+4, r24	; 0x04
   1875c:	88 e2       	ldi	r24, 0x28	; 40
   1875e:	9e e3       	ldi	r25, 0x3E	; 62
   18760:	a0 e0       	ldi	r26, 0x00	; 0
   18762:	81 83       	std	Z+1, r24	; 0x01
   18764:	92 83       	std	Z+2, r25	; 0x02
   18766:	a3 83       	std	Z+3, r26	; 0x03
   18768:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1876c:	fe 01       	movw	r30, r28
   1876e:	e6 5a       	subi	r30, 0xA6	; 166
   18770:	ff 4f       	sbci	r31, 0xFF	; 255
   18772:	80 81       	ld	r24, Z
   18774:	91 81       	ldd	r25, Z+1	; 0x01
   18776:	ed b7       	in	r30, 0x3d	; 61
   18778:	fe b7       	in	r31, 0x3e	; 62
   1877a:	95 83       	std	Z+5, r25	; 0x05
   1877c:	84 83       	std	Z+4, r24	; 0x04
   1877e:	8c e0       	ldi	r24, 0x0C	; 12
   18780:	9e e3       	ldi	r25, 0x3E	; 62
   18782:	a0 e0       	ldi	r26, 0x00	; 0
   18784:	81 83       	std	Z+1, r24	; 0x01
   18786:	92 83       	std	Z+2, r25	; 0x02
   18788:	a3 83       	std	Z+3, r26	; 0x03
   1878a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1878e:	fe 01       	movw	r30, r28
   18790:	e6 59       	subi	r30, 0x96	; 150
   18792:	ff 4f       	sbci	r31, 0xFF	; 255
   18794:	80 81       	ld	r24, Z
   18796:	91 81       	ldd	r25, Z+1	; 0x01
   18798:	ed b7       	in	r30, 0x3d	; 61
   1879a:	fe b7       	in	r31, 0x3e	; 62
   1879c:	95 83       	std	Z+5, r25	; 0x05
   1879e:	84 83       	std	Z+4, r24	; 0x04
   187a0:	80 ef       	ldi	r24, 0xF0	; 240
   187a2:	9d e3       	ldi	r25, 0x3D	; 61
   187a4:	a0 e0       	ldi	r26, 0x00	; 0
   187a6:	81 83       	std	Z+1, r24	; 0x01
   187a8:	92 83       	std	Z+2, r25	; 0x02
   187aa:	a3 83       	std	Z+3, r26	; 0x03
   187ac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   187b0:	fe 01       	movw	r30, r28
   187b2:	e4 5a       	subi	r30, 0xA4	; 164
   187b4:	ff 4f       	sbci	r31, 0xFF	; 255
   187b6:	80 81       	ld	r24, Z
   187b8:	91 81       	ldd	r25, Z+1	; 0x01
   187ba:	a2 81       	ldd	r26, Z+2	; 0x02
   187bc:	b3 81       	ldd	r27, Z+3	; 0x03
   187be:	ed b7       	in	r30, 0x3d	; 61
   187c0:	fe b7       	in	r31, 0x3e	; 62
   187c2:	84 83       	std	Z+4, r24	; 0x04
   187c4:	95 83       	std	Z+5, r25	; 0x05
   187c6:	a6 83       	std	Z+6, r26	; 0x06
   187c8:	b7 83       	std	Z+7, r27	; 0x07
   187ca:	83 ed       	ldi	r24, 0xD3	; 211
   187cc:	9d e3       	ldi	r25, 0x3D	; 61
   187ce:	a0 e0       	ldi	r26, 0x00	; 0
   187d0:	81 83       	std	Z+1, r24	; 0x01
   187d2:	92 83       	std	Z+2, r25	; 0x02
   187d4:	a3 83       	std	Z+3, r26	; 0x03
   187d6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   187da:	fe 01       	movw	r30, r28
   187dc:	e0 5a       	subi	r30, 0xA0	; 160
   187de:	ff 4f       	sbci	r31, 0xFF	; 255
   187e0:	80 81       	ld	r24, Z
   187e2:	91 81       	ldd	r25, Z+1	; 0x01
   187e4:	a2 81       	ldd	r26, Z+2	; 0x02
   187e6:	b3 81       	ldd	r27, Z+3	; 0x03
   187e8:	ed b7       	in	r30, 0x3d	; 61
   187ea:	fe b7       	in	r31, 0x3e	; 62
   187ec:	84 83       	std	Z+4, r24	; 0x04
   187ee:	95 83       	std	Z+5, r25	; 0x05
   187f0:	a6 83       	std	Z+6, r26	; 0x06
   187f2:	b7 83       	std	Z+7, r27	; 0x07
   187f4:	86 eb       	ldi	r24, 0xB6	; 182
   187f6:	9d e3       	ldi	r25, 0x3D	; 61
   187f8:	a0 e0       	ldi	r26, 0x00	; 0
   187fa:	81 83       	std	Z+1, r24	; 0x01
   187fc:	92 83       	std	Z+2, r25	; 0x02
   187fe:	a3 83       	std	Z+3, r26	; 0x03
   18800:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18804:	fe 01       	movw	r30, r28
   18806:	e4 59       	subi	r30, 0x94	; 148
   18808:	ff 4f       	sbci	r31, 0xFF	; 255
   1880a:	80 81       	ld	r24, Z
   1880c:	91 81       	ldd	r25, Z+1	; 0x01
   1880e:	a0 e0       	ldi	r26, 0x00	; 0
   18810:	b0 e0       	ldi	r27, 0x00	; 0
   18812:	ed b7       	in	r30, 0x3d	; 61
   18814:	fe b7       	in	r31, 0x3e	; 62
   18816:	84 83       	std	Z+4, r24	; 0x04
   18818:	95 83       	std	Z+5, r25	; 0x05
   1881a:	a6 83       	std	Z+6, r26	; 0x06
   1881c:	b7 83       	std	Z+7, r27	; 0x07
   1881e:	89 e9       	ldi	r24, 0x99	; 153
   18820:	9d e3       	ldi	r25, 0x3D	; 61
   18822:	a0 e0       	ldi	r26, 0x00	; 0
   18824:	81 83       	std	Z+1, r24	; 0x01
   18826:	92 83       	std	Z+2, r25	; 0x02
   18828:	a3 83       	std	Z+3, r26	; 0x03
   1882a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1882e:	fe 01       	movw	r30, r28
   18830:	e2 59       	subi	r30, 0x92	; 146
   18832:	ff 4f       	sbci	r31, 0xFF	; 255
   18834:	80 81       	ld	r24, Z
   18836:	91 81       	ldd	r25, Z+1	; 0x01
   18838:	ed b7       	in	r30, 0x3d	; 61
   1883a:	fe b7       	in	r31, 0x3e	; 62
   1883c:	95 83       	std	Z+5, r25	; 0x05
   1883e:	84 83       	std	Z+4, r24	; 0x04
   18840:	8d e7       	ldi	r24, 0x7D	; 125
   18842:	9d e3       	ldi	r25, 0x3D	; 61
   18844:	a0 e0       	ldi	r26, 0x00	; 0
   18846:	81 83       	std	Z+1, r24	; 0x01
   18848:	92 83       	std	Z+2, r25	; 0x02
   1884a:	a3 83       	std	Z+3, r26	; 0x03
   1884c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18850:	ce 01       	movw	r24, r28
   18852:	8c 59       	subi	r24, 0x9C	; 156
   18854:	9f 4f       	sbci	r25, 0xFF	; 255
   18856:	1a de       	rcall	.-972    	; 0x1848c <lif_lifbcd2timestr>
   18858:	ed b7       	in	r30, 0x3d	; 61
   1885a:	fe b7       	in	r31, 0x3e	; 62
   1885c:	95 83       	std	Z+5, r25	; 0x05
   1885e:	84 83       	std	Z+4, r24	; 0x04
   18860:	83 e6       	ldi	r24, 0x63	; 99
   18862:	9d e3       	ldi	r25, 0x3D	; 61
   18864:	a0 e0       	ldi	r26, 0x00	; 0
   18866:	81 83       	std	Z+1, r24	; 0x01
   18868:	92 83       	std	Z+2, r25	; 0x02
   1886a:	a3 83       	std	Z+3, r26	; 0x03
   1886c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18870:	81 e6       	ldi	r24, 0x61	; 97
   18872:	9d e3       	ldi	r25, 0x3D	; 61
   18874:	a0 e0       	ldi	r26, 0x00	; 0
   18876:	ed b7       	in	r30, 0x3d	; 61
   18878:	fe b7       	in	r31, 0x3e	; 62
   1887a:	81 83       	std	Z+1, r24	; 0x01
   1887c:	92 83       	std	Z+2, r25	; 0x02
   1887e:	a3 83       	std	Z+3, r26	; 0x03
   18880:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18884:	cd b7       	in	r28, 0x3d	; 61
   18886:	de b7       	in	r29, 0x3e	; 62
   18888:	27 96       	adiw	r28, 0x07	; 7
   1888a:	e2 e0       	ldi	r30, 0x02	; 2
   1888c:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__epilogue_restores__+0x20>

00018890 <lif_check_volume>:
   18890:	0f 93       	push	r16
   18892:	1f 93       	push	r17
   18894:	cf 93       	push	r28
   18896:	df 93       	push	r29
   18898:	ad b7       	in	r26, 0x3d	; 61
   1889a:	be b7       	in	r27, 0x3e	; 62
   1889c:	17 97       	sbiw	r26, 0x07	; 7
   1889e:	0f b6       	in	r0, 0x3f	; 63
   188a0:	f8 94       	cli
   188a2:	be bf       	out	0x3e, r27	; 62
   188a4:	0f be       	out	0x3f, r0	; 63
   188a6:	ad bf       	out	0x3d, r26	; 61
   188a8:	ec 01       	movw	r28, r24
   188aa:	86 96       	adiw	r24, 0x26	; 38
   188ac:	e0 da       	rcall	.-2624   	; 0x17e6e <lif_checkname>
   188ae:	89 2b       	or	r24, r25
   188b0:	89 f4       	brne	.+34     	; 0x188d4 <lif_check_volume+0x44>
   188b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   188b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   188ba:	92 ff       	sbrs	r25, 2
   188bc:	0e c0       	rjmp	.+28     	; 0x188da <lif_check_volume+0x4a>
   188be:	82 e4       	ldi	r24, 0x42	; 66
   188c0:	9d e3       	ldi	r25, 0x3D	; 61
   188c2:	a0 e0       	ldi	r26, 0x00	; 0
   188c4:	ed b7       	in	r30, 0x3d	; 61
   188c6:	fe b7       	in	r31, 0x3e	; 62
   188c8:	81 83       	std	Z+1, r24	; 0x01
   188ca:	92 83       	std	Z+2, r25	; 0x02
   188cc:	a3 83       	std	Z+3, r26	; 0x03
   188ce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   188d2:	03 c0       	rjmp	.+6      	; 0x188da <lif_check_volume+0x4a>
   188d4:	81 e0       	ldi	r24, 0x01	; 1
   188d6:	90 e0       	ldi	r25, 0x00	; 0
   188d8:	02 c0       	rjmp	.+4      	; 0x188de <lif_check_volume+0x4e>
   188da:	80 e0       	ldi	r24, 0x00	; 0
   188dc:	90 e0       	ldi	r25, 0x00	; 0
   188de:	29 a9       	ldd	r18, Y+49	; 0x31
   188e0:	3a a9       	ldd	r19, Y+50	; 0x32
   188e2:	21 15       	cp	r18, r1
   188e4:	f0 e1       	ldi	r31, 0x10	; 16
   188e6:	3f 07       	cpc	r19, r31
   188e8:	a1 f0       	breq	.+40     	; 0x18912 <lif_check_volume+0x82>
   188ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   188ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   188f2:	92 ff       	sbrs	r25, 2
   188f4:	0c c0       	rjmp	.+24     	; 0x1890e <lif_check_volume+0x7e>
   188f6:	ed b7       	in	r30, 0x3d	; 61
   188f8:	fe b7       	in	r31, 0x3e	; 62
   188fa:	35 83       	std	Z+5, r19	; 0x05
   188fc:	24 83       	std	Z+4, r18	; 0x04
   188fe:	89 e0       	ldi	r24, 0x09	; 9
   18900:	9d e3       	ldi	r25, 0x3D	; 61
   18902:	a0 e0       	ldi	r26, 0x00	; 0
   18904:	81 83       	std	Z+1, r24	; 0x01
   18906:	92 83       	std	Z+2, r25	; 0x02
   18908:	a3 83       	std	Z+3, r26	; 0x03
   1890a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1890e:	80 e0       	ldi	r24, 0x00	; 0
   18910:	90 e0       	ldi	r25, 0x00	; 0
   18912:	29 ad       	ldd	r18, Y+57	; 0x39
   18914:	3a ad       	ldd	r19, Y+58	; 0x3a
   18916:	22 30       	cpi	r18, 0x02	; 2
   18918:	31 05       	cpc	r19, r1
   1891a:	a0 f0       	brcs	.+40     	; 0x18944 <lif_check_volume+0xb4>
   1891c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18920:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18924:	92 ff       	sbrs	r25, 2
   18926:	0c c0       	rjmp	.+24     	; 0x18940 <lif_check_volume+0xb0>
   18928:	ed b7       	in	r30, 0x3d	; 61
   1892a:	fe b7       	in	r31, 0x3e	; 62
   1892c:	35 83       	std	Z+5, r19	; 0x05
   1892e:	24 83       	std	Z+4, r18	; 0x04
   18930:	81 ef       	ldi	r24, 0xF1	; 241
   18932:	9c e3       	ldi	r25, 0x3C	; 60
   18934:	a0 e0       	ldi	r26, 0x00	; 0
   18936:	81 83       	std	Z+1, r24	; 0x01
   18938:	92 83       	std	Z+2, r25	; 0x02
   1893a:	a3 83       	std	Z+3, r26	; 0x03
   1893c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18940:	80 e0       	ldi	r24, 0x00	; 0
   18942:	90 e0       	ldi	r25, 0x00	; 0
   18944:	2b a9       	ldd	r18, Y+51	; 0x33
   18946:	3c a9       	ldd	r19, Y+52	; 0x34
   18948:	23 2b       	or	r18, r19
   1894a:	91 f0       	breq	.+36     	; 0x18970 <lif_check_volume+0xe0>
   1894c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18950:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18954:	92 ff       	sbrs	r25, 2
   18956:	0a c0       	rjmp	.+20     	; 0x1896c <lif_check_volume+0xdc>
   18958:	88 eb       	ldi	r24, 0xB8	; 184
   1895a:	9c e3       	ldi	r25, 0x3C	; 60
   1895c:	a0 e0       	ldi	r26, 0x00	; 0
   1895e:	ed b7       	in	r30, 0x3d	; 61
   18960:	fe b7       	in	r31, 0x3e	; 62
   18962:	81 83       	std	Z+1, r24	; 0x01
   18964:	92 83       	std	Z+2, r25	; 0x02
   18966:	a3 83       	std	Z+3, r26	; 0x03
   18968:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1896c:	80 e0       	ldi	r24, 0x00	; 0
   1896e:	90 e0       	ldi	r25, 0x00	; 0
   18970:	2b ad       	ldd	r18, Y+59	; 0x3b
   18972:	3c ad       	ldd	r19, Y+60	; 0x3c
   18974:	23 2b       	or	r18, r19
   18976:	91 f0       	breq	.+36     	; 0x1899c <lif_check_volume+0x10c>
   18978:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1897c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18980:	92 ff       	sbrs	r25, 2
   18982:	0a c0       	rjmp	.+20     	; 0x18998 <lif_check_volume+0x108>
   18984:	8f e7       	ldi	r24, 0x7F	; 127
   18986:	9c e3       	ldi	r25, 0x3C	; 60
   18988:	a0 e0       	ldi	r26, 0x00	; 0
   1898a:	ed b7       	in	r30, 0x3d	; 61
   1898c:	fe b7       	in	r31, 0x3e	; 62
   1898e:	81 83       	std	Z+1, r24	; 0x01
   18990:	92 83       	std	Z+2, r25	; 0x02
   18992:	a3 83       	std	Z+3, r26	; 0x03
   18994:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18998:	80 e0       	ldi	r24, 0x00	; 0
   1899a:	90 e0       	ldi	r25, 0x00	; 0
   1899c:	4d a5       	ldd	r20, Y+45	; 0x2d
   1899e:	5e a5       	ldd	r21, Y+46	; 0x2e
   189a0:	6f a5       	ldd	r22, Y+47	; 0x2f
   189a2:	78 a9       	ldd	r23, Y+48	; 0x30
   189a4:	45 2b       	or	r20, r21
   189a6:	46 2b       	or	r20, r22
   189a8:	47 2b       	or	r20, r23
   189aa:	b1 f4       	brne	.+44     	; 0x189d8 <lif_check_volume+0x148>
   189ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189b0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189b4:	92 ff       	sbrs	r25, 2
   189b6:	0e c0       	rjmp	.+28     	; 0x189d4 <lif_check_volume+0x144>
   189b8:	ed b7       	in	r30, 0x3d	; 61
   189ba:	fe b7       	in	r31, 0x3e	; 62
   189bc:	14 82       	std	Z+4, r1	; 0x04
   189be:	15 82       	std	Z+5, r1	; 0x05
   189c0:	16 82       	std	Z+6, r1	; 0x06
   189c2:	17 82       	std	Z+7, r1	; 0x07
   189c4:	8a e5       	ldi	r24, 0x5A	; 90
   189c6:	9c e3       	ldi	r25, 0x3C	; 60
   189c8:	a0 e0       	ldi	r26, 0x00	; 0
   189ca:	81 83       	std	Z+1, r24	; 0x01
   189cc:	92 83       	std	Z+2, r25	; 0x02
   189ce:	a3 83       	std	Z+3, r26	; 0x03
   189d0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   189d4:	80 e0       	ldi	r24, 0x00	; 0
   189d6:	90 e0       	ldi	r25, 0x00	; 0
   189d8:	4d a9       	ldd	r20, Y+53	; 0x35
   189da:	5e a9       	ldd	r21, Y+54	; 0x36
   189dc:	6f a9       	ldd	r22, Y+55	; 0x37
   189de:	78 ad       	ldd	r23, Y+56	; 0x38
   189e0:	45 2b       	or	r20, r21
   189e2:	46 2b       	or	r20, r22
   189e4:	47 2b       	or	r20, r23
   189e6:	91 f4       	brne	.+36     	; 0x18a0c <lif_check_volume+0x17c>
   189e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189f0:	92 ff       	sbrs	r25, 2
   189f2:	0a c0       	rjmp	.+20     	; 0x18a08 <lif_check_volume+0x178>
   189f4:	8b e2       	ldi	r24, 0x2B	; 43
   189f6:	9c e3       	ldi	r25, 0x3C	; 60
   189f8:	a0 e0       	ldi	r26, 0x00	; 0
   189fa:	ed b7       	in	r30, 0x3d	; 61
   189fc:	fe b7       	in	r31, 0x3e	; 62
   189fe:	81 83       	std	Z+1, r24	; 0x01
   18a00:	92 83       	std	Z+2, r25	; 0x02
   18a02:	a3 83       	std	Z+3, r26	; 0x03
   18a04:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18a08:	80 e0       	ldi	r24, 0x00	; 0
   18a0a:	90 e0       	ldi	r25, 0x00	; 0
   18a0c:	0d a5       	ldd	r16, Y+45	; 0x2d
   18a0e:	1e a5       	ldd	r17, Y+46	; 0x2e
   18a10:	2f a5       	ldd	r18, Y+47	; 0x2f
   18a12:	38 a9       	ldd	r19, Y+48	; 0x30
   18a14:	4d a9       	ldd	r20, Y+53	; 0x35
   18a16:	5e a9       	ldd	r21, Y+54	; 0x36
   18a18:	6f a9       	ldd	r22, Y+55	; 0x37
   18a1a:	78 ad       	ldd	r23, Y+56	; 0x38
   18a1c:	40 0f       	add	r20, r16
   18a1e:	51 1f       	adc	r21, r17
   18a20:	62 1f       	adc	r22, r18
   18a22:	73 1f       	adc	r23, r19
   18a24:	0c 81       	ldd	r16, Y+4	; 0x04
   18a26:	1d 81       	ldd	r17, Y+5	; 0x05
   18a28:	2e 81       	ldd	r18, Y+6	; 0x06
   18a2a:	3f 81       	ldd	r19, Y+7	; 0x07
   18a2c:	04 17       	cp	r16, r20
   18a2e:	15 07       	cpc	r17, r21
   18a30:	26 07       	cpc	r18, r22
   18a32:	37 07       	cpc	r19, r23
   18a34:	90 f4       	brcc	.+36     	; 0x18a5a <lif_check_volume+0x1ca>
   18a36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a3e:	92 ff       	sbrs	r25, 2
   18a40:	0a c0       	rjmp	.+20     	; 0x18a56 <lif_check_volume+0x1c6>
   18a42:	8f ef       	ldi	r24, 0xFF	; 255
   18a44:	9b e3       	ldi	r25, 0x3B	; 59
   18a46:	a0 e0       	ldi	r26, 0x00	; 0
   18a48:	ed b7       	in	r30, 0x3d	; 61
   18a4a:	fe b7       	in	r31, 0x3e	; 62
   18a4c:	81 83       	std	Z+1, r24	; 0x01
   18a4e:	92 83       	std	Z+2, r25	; 0x02
   18a50:	a3 83       	std	Z+3, r26	; 0x03
   18a52:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18a56:	80 e0       	ldi	r24, 0x00	; 0
   18a58:	90 e0       	ldi	r25, 0x00	; 0
   18a5a:	cd b7       	in	r28, 0x3d	; 61
   18a5c:	de b7       	in	r29, 0x3e	; 62
   18a5e:	27 96       	adiw	r28, 0x07	; 7
   18a60:	e4 e0       	ldi	r30, 0x04	; 4
   18a62:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__epilogue_restores__+0x1c>

00018a66 <lif_check_dir>:
   18a66:	a5 e1       	ldi	r26, 0x15	; 21
   18a68:	b0 e0       	ldi	r27, 0x00	; 0
   18a6a:	e9 e3       	ldi	r30, 0x39	; 57
   18a6c:	f5 ec       	ldi	r31, 0xC5	; 197
   18a6e:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   18a72:	6c 01       	movw	r12, r24
   18a74:	2a e5       	ldi	r18, 0x5A	; 90
   18a76:	c2 0e       	add	r12, r18
   18a78:	d1 1c       	adc	r13, r1
   18a7a:	f6 01       	movw	r30, r12
   18a7c:	20 81       	ld	r18, Z
   18a7e:	31 81       	ldd	r19, Z+1	; 0x01
   18a80:	21 50       	subi	r18, 0x01	; 1
   18a82:	31 09       	sbc	r19, r1
   18a84:	2e 3f       	cpi	r18, 0xFE	; 254
   18a86:	3f 4f       	sbci	r19, 0xFF	; 255
   18a88:	08 f0       	brcs	.+2      	; 0x18a8c <lif_check_dir+0x26>
   18a8a:	9a c1       	rjmp	.+820    	; 0x18dc0 <lif_check_dir+0x35a>
   18a8c:	9d 8b       	std	Y+21, r25	; 0x15
   18a8e:	8c 8b       	std	Y+20, r24	; 0x14
   18a90:	7c 01       	movw	r14, r24
   18a92:	2f e4       	ldi	r18, 0x4F	; 79
   18a94:	e2 0e       	add	r14, r18
   18a96:	f1 1c       	adc	r15, r1
   18a98:	c7 01       	movw	r24, r14
   18a9a:	e9 d9       	rcall	.-3118   	; 0x17e6e <lif_checkname>
   18a9c:	89 2b       	or	r24, r25
   18a9e:	99 f4       	brne	.+38     	; 0x18ac6 <lif_check_dir+0x60>
   18aa0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18aa4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18aa8:	92 ff       	sbrs	r25, 2
   18aaa:	0f c0       	rjmp	.+30     	; 0x18aca <lif_check_dir+0x64>
   18aac:	ed b7       	in	r30, 0x3d	; 61
   18aae:	fe b7       	in	r31, 0x3e	; 62
   18ab0:	f5 82       	std	Z+5, r15	; 0x05
   18ab2:	e4 82       	std	Z+4, r14	; 0x04
   18ab4:	8e ed       	ldi	r24, 0xDE	; 222
   18ab6:	9b e3       	ldi	r25, 0x3B	; 59
   18ab8:	a0 e0       	ldi	r26, 0x00	; 0
   18aba:	81 83       	std	Z+1, r24	; 0x01
   18abc:	92 83       	std	Z+2, r25	; 0x02
   18abe:	a3 83       	std	Z+3, r26	; 0x03
   18ac0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18ac4:	02 c0       	rjmp	.+4      	; 0x18aca <lif_check_dir+0x64>
   18ac6:	01 e0       	ldi	r16, 0x01	; 1
   18ac8:	01 c0       	rjmp	.+2      	; 0x18acc <lif_check_dir+0x66>
   18aca:	00 e0       	ldi	r16, 0x00	; 0
   18acc:	10 e0       	ldi	r17, 0x00	; 0
   18ace:	ec 89       	ldd	r30, Y+20	; 0x14
   18ad0:	fd 89       	ldd	r31, Y+21	; 0x15
   18ad2:	84 85       	ldd	r24, Z+12	; 0x0c
   18ad4:	95 85       	ldd	r25, Z+13	; 0x0d
   18ad6:	a6 85       	ldd	r26, Z+14	; 0x0e
   18ad8:	b7 85       	ldd	r27, Z+15	; 0x0f
   18ada:	00 97       	sbiw	r24, 0x00	; 0
   18adc:	a1 05       	cpc	r26, r1
   18ade:	b1 05       	cpc	r27, r1
   18ae0:	39 f1       	breq	.+78     	; 0x18b30 <lif_check_dir+0xca>
   18ae2:	e4 5a       	subi	r30, 0xA4	; 164
   18ae4:	ff 4f       	sbci	r31, 0xFF	; 255
   18ae6:	40 81       	ld	r20, Z
   18ae8:	51 81       	ldd	r21, Z+1	; 0x01
   18aea:	62 81       	ldd	r22, Z+2	; 0x02
   18aec:	73 81       	ldd	r23, Z+3	; 0x03
   18aee:	48 17       	cp	r20, r24
   18af0:	59 07       	cpc	r21, r25
   18af2:	6a 07       	cpc	r22, r26
   18af4:	7b 07       	cpc	r23, r27
   18af6:	e0 f4       	brcc	.+56     	; 0x18b30 <lif_check_dir+0xca>
   18af8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18afc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b00:	32 ff       	sbrs	r19, 2
   18b02:	14 c0       	rjmp	.+40     	; 0x18b2c <lif_check_dir+0xc6>
   18b04:	ed b7       	in	r30, 0x3d	; 61
   18b06:	fe b7       	in	r31, 0x3e	; 62
   18b08:	82 87       	std	Z+10, r24	; 0x0a
   18b0a:	93 87       	std	Z+11, r25	; 0x0b
   18b0c:	a4 87       	std	Z+12, r26	; 0x0c
   18b0e:	b5 87       	std	Z+13, r27	; 0x0d
   18b10:	46 83       	std	Z+6, r20	; 0x06
   18b12:	57 83       	std	Z+7, r21	; 0x07
   18b14:	60 87       	std	Z+8, r22	; 0x08
   18b16:	71 87       	std	Z+9, r23	; 0x09
   18b18:	f5 82       	std	Z+5, r15	; 0x05
   18b1a:	e4 82       	std	Z+4, r14	; 0x04
   18b1c:	8a e9       	ldi	r24, 0x9A	; 154
   18b1e:	9b e3       	ldi	r25, 0x3B	; 59
   18b20:	a0 e0       	ldi	r26, 0x00	; 0
   18b22:	81 83       	std	Z+1, r24	; 0x01
   18b24:	92 83       	std	Z+2, r25	; 0x02
   18b26:	a3 83       	std	Z+3, r26	; 0x03
   18b28:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18b2c:	00 e0       	ldi	r16, 0x00	; 0
   18b2e:	10 e0       	ldi	r17, 0x00	; 0
   18b30:	ec 89       	ldd	r30, Y+20	; 0x14
   18b32:	fd 89       	ldd	r31, Y+21	; 0x15
   18b34:	44 81       	ldd	r20, Z+4	; 0x04
   18b36:	55 81       	ldd	r21, Z+5	; 0x05
   18b38:	66 81       	ldd	r22, Z+6	; 0x06
   18b3a:	77 81       	ldd	r23, Z+7	; 0x07
   18b3c:	41 15       	cp	r20, r1
   18b3e:	51 05       	cpc	r21, r1
   18b40:	61 05       	cpc	r22, r1
   18b42:	71 05       	cpc	r23, r1
   18b44:	99 f1       	breq	.+102    	; 0x18bac <lif_check_dir+0x146>
   18b46:	e4 5a       	subi	r30, 0xA4	; 164
   18b48:	ff 4f       	sbci	r31, 0xFF	; 255
   18b4a:	80 80       	ld	r8, Z
   18b4c:	91 80       	ldd	r9, Z+1	; 0x01
   18b4e:	a2 80       	ldd	r10, Z+2	; 0x02
   18b50:	b3 80       	ldd	r11, Z+3	; 0x03
   18b52:	ec 89       	ldd	r30, Y+20	; 0x14
   18b54:	fd 89       	ldd	r31, Y+21	; 0x15
   18b56:	e0 5a       	subi	r30, 0xA0	; 160
   18b58:	ff 4f       	sbci	r31, 0xFF	; 255
   18b5a:	80 81       	ld	r24, Z
   18b5c:	91 81       	ldd	r25, Z+1	; 0x01
   18b5e:	a2 81       	ldd	r26, Z+2	; 0x02
   18b60:	b3 81       	ldd	r27, Z+3	; 0x03
   18b62:	88 0d       	add	r24, r8
   18b64:	99 1d       	adc	r25, r9
   18b66:	aa 1d       	adc	r26, r10
   18b68:	bb 1d       	adc	r27, r11
   18b6a:	48 17       	cp	r20, r24
   18b6c:	59 07       	cpc	r21, r25
   18b6e:	6a 07       	cpc	r22, r26
   18b70:	7b 07       	cpc	r23, r27
   18b72:	e0 f4       	brcc	.+56     	; 0x18bac <lif_check_dir+0x146>
   18b74:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18b78:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b7c:	32 ff       	sbrs	r19, 2
   18b7e:	14 c0       	rjmp	.+40     	; 0x18ba8 <lif_check_dir+0x142>
   18b80:	ed b7       	in	r30, 0x3d	; 61
   18b82:	fe b7       	in	r31, 0x3e	; 62
   18b84:	42 87       	std	Z+10, r20	; 0x0a
   18b86:	53 87       	std	Z+11, r21	; 0x0b
   18b88:	64 87       	std	Z+12, r22	; 0x0c
   18b8a:	75 87       	std	Z+13, r23	; 0x0d
   18b8c:	86 83       	std	Z+6, r24	; 0x06
   18b8e:	97 83       	std	Z+7, r25	; 0x07
   18b90:	a0 87       	std	Z+8, r26	; 0x08
   18b92:	b1 87       	std	Z+9, r27	; 0x09
   18b94:	f5 82       	std	Z+5, r15	; 0x05
   18b96:	e4 82       	std	Z+4, r14	; 0x04
   18b98:	89 e5       	ldi	r24, 0x59	; 89
   18b9a:	9b e3       	ldi	r25, 0x3B	; 59
   18b9c:	a0 e0       	ldi	r26, 0x00	; 0
   18b9e:	81 83       	std	Z+1, r24	; 0x01
   18ba0:	92 83       	std	Z+2, r25	; 0x02
   18ba2:	a3 83       	std	Z+3, r26	; 0x03
   18ba4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18ba8:	00 e0       	ldi	r16, 0x00	; 0
   18baa:	10 e0       	ldi	r17, 0x00	; 0
   18bac:	ec 89       	ldd	r30, Y+20	; 0x14
   18bae:	fd 89       	ldd	r31, Y+21	; 0x15
   18bb0:	e6 59       	subi	r30, 0x96	; 150
   18bb2:	ff 4f       	sbci	r31, 0xFF	; 255
   18bb4:	80 81       	ld	r24, Z
   18bb6:	91 81       	ldd	r25, Z+1	; 0x01
   18bb8:	81 30       	cpi	r24, 0x01	; 1
   18bba:	f0 e8       	ldi	r31, 0x80	; 128
   18bbc:	9f 07       	cpc	r25, r31
   18bbe:	b1 f0       	breq	.+44     	; 0x18bec <lif_check_dir+0x186>
   18bc0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18bc4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bc8:	32 ff       	sbrs	r19, 2
   18bca:	0e c0       	rjmp	.+28     	; 0x18be8 <lif_check_dir+0x182>
   18bcc:	ed b7       	in	r30, 0x3d	; 61
   18bce:	fe b7       	in	r31, 0x3e	; 62
   18bd0:	97 83       	std	Z+7, r25	; 0x07
   18bd2:	86 83       	std	Z+6, r24	; 0x06
   18bd4:	f5 82       	std	Z+5, r15	; 0x05
   18bd6:	e4 82       	std	Z+4, r14	; 0x04
   18bd8:	8b e2       	ldi	r24, 0x2B	; 43
   18bda:	9b e3       	ldi	r25, 0x3B	; 59
   18bdc:	a0 e0       	ldi	r26, 0x00	; 0
   18bde:	81 83       	std	Z+1, r24	; 0x01
   18be0:	92 83       	std	Z+2, r25	; 0x02
   18be2:	a3 83       	std	Z+3, r26	; 0x03
   18be4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18be8:	00 e0       	ldi	r16, 0x00	; 0
   18bea:	10 e0       	ldi	r17, 0x00	; 0
   18bec:	f6 01       	movw	r30, r12
   18bee:	80 81       	ld	r24, Z
   18bf0:	91 81       	ldd	r25, Z+1	; 0x01
   18bf2:	8c 7f       	andi	r24, 0xFC	; 252
   18bf4:	80 31       	cpi	r24, 0x10	; 16
   18bf6:	90 4e       	sbci	r25, 0xE0	; 224
   18bf8:	09 f0       	breq	.+2      	; 0x18bfc <lif_check_dir+0x196>
   18bfa:	b3 c0       	rjmp	.+358    	; 0x18d62 <lif_check_dir+0x2fc>
   18bfc:	cc 88       	ldd	r12, Y+20	; 0x14
   18bfe:	dd 88       	ldd	r13, Y+21	; 0x15
   18c00:	2c e6       	ldi	r18, 0x6C	; 108
   18c02:	c2 0e       	add	r12, r18
   18c04:	d1 1c       	adc	r13, r1
   18c06:	f6 01       	movw	r30, r12
   18c08:	80 81       	ld	r24, Z
   18c0a:	91 81       	ldd	r25, Z+1	; 0x01
   18c0c:	00 97       	sbiw	r24, 0x00	; 0
   18c0e:	09 f4       	brne	.+2      	; 0x18c12 <lif_check_dir+0x1ac>
   18c10:	a8 c0       	rjmp	.+336    	; 0x18d62 <lif_check_dir+0x2fc>
   18c12:	4c 01       	movw	r8, r24
   18c14:	a1 2c       	mov	r10, r1
   18c16:	b1 2c       	mov	r11, r1
   18c18:	77 27       	eor	r23, r23
   18c1a:	6b 2d       	mov	r22, r11
   18c1c:	5a 2d       	mov	r21, r10
   18c1e:	49 2d       	mov	r20, r9
   18c20:	9c 01       	movw	r18, r24
   18c22:	33 27       	eor	r19, r19
   18c24:	3b 8b       	std	Y+19, r19	; 0x13
   18c26:	2a 8b       	std	Y+18, r18	; 0x12
   18c28:	db 01       	movw	r26, r22
   18c2a:	ca 01       	movw	r24, r20
   18c2c:	23 2b       	or	r18, r19
   18c2e:	19 f0       	breq	.+6      	; 0x18c36 <lif_check_dir+0x1d0>
   18c30:	01 96       	adiw	r24, 0x01	; 1
   18c32:	a1 1d       	adc	r26, r1
   18c34:	b1 1d       	adc	r27, r1
   18c36:	2c 88       	ldd	r2, Y+20	; 0x14
   18c38:	3d 88       	ldd	r3, Y+21	; 0x15
   18c3a:	30 e6       	ldi	r19, 0x60	; 96
   18c3c:	23 0e       	add	r2, r19
   18c3e:	31 1c       	adc	r3, r1
   18c40:	f1 01       	movw	r30, r2
   18c42:	40 80       	ld	r4, Z
   18c44:	51 80       	ldd	r5, Z+1	; 0x01
   18c46:	62 80       	ldd	r6, Z+2	; 0x02
   18c48:	73 80       	ldd	r7, Z+3	; 0x03
   18c4a:	48 16       	cp	r4, r24
   18c4c:	59 06       	cpc	r5, r25
   18c4e:	6a 06       	cpc	r6, r26
   18c50:	7b 06       	cpc	r7, r27
   18c52:	40 f5       	brcc	.+80     	; 0x18ca4 <lif_check_dir+0x23e>
   18c54:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c58:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c5c:	32 ff       	sbrs	r19, 2
   18c5e:	20 c0       	rjmp	.+64     	; 0x18ca0 <lif_check_dir+0x23a>
   18c60:	2a 89       	ldd	r18, Y+18	; 0x12
   18c62:	3b 89       	ldd	r19, Y+19	; 0x13
   18c64:	23 2b       	or	r18, r19
   18c66:	21 f0       	breq	.+8      	; 0x18c70 <lif_check_dir+0x20a>
   18c68:	4f 5f       	subi	r20, 0xFF	; 255
   18c6a:	5f 4f       	sbci	r21, 0xFF	; 255
   18c6c:	6f 4f       	sbci	r22, 0xFF	; 255
   18c6e:	7f 4f       	sbci	r23, 0xFF	; 255
   18c70:	ed b7       	in	r30, 0x3d	; 61
   18c72:	fe b7       	in	r31, 0x3e	; 62
   18c74:	46 86       	std	Z+14, r4	; 0x0e
   18c76:	57 86       	std	Z+15, r5	; 0x0f
   18c78:	60 8a       	std	Z+16, r6	; 0x10
   18c7a:	71 8a       	std	Z+17, r7	; 0x11
   18c7c:	42 87       	std	Z+10, r20	; 0x0a
   18c7e:	53 87       	std	Z+11, r21	; 0x0b
   18c80:	64 87       	std	Z+12, r22	; 0x0c
   18c82:	75 87       	std	Z+13, r23	; 0x0d
   18c84:	86 82       	std	Z+6, r8	; 0x06
   18c86:	97 82       	std	Z+7, r9	; 0x07
   18c88:	a0 86       	std	Z+8, r10	; 0x08
   18c8a:	b1 86       	std	Z+9, r11	; 0x09
   18c8c:	f5 82       	std	Z+5, r15	; 0x05
   18c8e:	e4 82       	std	Z+4, r14	; 0x04
   18c90:	80 ee       	ldi	r24, 0xE0	; 224
   18c92:	9a e3       	ldi	r25, 0x3A	; 58
   18c94:	a0 e0       	ldi	r26, 0x00	; 0
   18c96:	81 83       	std	Z+1, r24	; 0x01
   18c98:	92 83       	std	Z+2, r25	; 0x02
   18c9a:	a3 83       	std	Z+3, r26	; 0x03
   18c9c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18ca0:	00 e0       	ldi	r16, 0x00	; 0
   18ca2:	10 e0       	ldi	r17, 0x00	; 0
   18ca4:	f6 01       	movw	r30, r12
   18ca6:	20 81       	ld	r18, Z
   18ca8:	31 81       	ldd	r19, Z+1	; 0x01
   18caa:	a9 01       	movw	r20, r18
   18cac:	60 e0       	ldi	r22, 0x00	; 0
   18cae:	70 e0       	ldi	r23, 0x00	; 0
   18cb0:	bb 27       	eor	r27, r27
   18cb2:	a7 2f       	mov	r26, r23
   18cb4:	96 2f       	mov	r25, r22
   18cb6:	85 2f       	mov	r24, r21
   18cb8:	f9 01       	movw	r30, r18
   18cba:	ff 27       	eor	r31, r31
   18cbc:	fb 8b       	std	Y+19, r31	; 0x13
   18cbe:	ea 8b       	std	Y+18, r30	; 0x12
   18cc0:	2c 01       	movw	r4, r24
   18cc2:	3d 01       	movw	r6, r26
   18cc4:	ef 2b       	or	r30, r31
   18cc6:	29 f0       	breq	.+10     	; 0x18cd2 <lif_check_dir+0x26c>
   18cc8:	ff ef       	ldi	r31, 0xFF	; 255
   18cca:	4f 1a       	sub	r4, r31
   18ccc:	5f 0a       	sbc	r5, r31
   18cce:	6f 0a       	sbc	r6, r31
   18cd0:	7f 0a       	sbc	r7, r31
   18cd2:	f1 01       	movw	r30, r2
   18cd4:	80 80       	ld	r8, Z
   18cd6:	91 80       	ldd	r9, Z+1	; 0x01
   18cd8:	a2 80       	ldd	r10, Z+2	; 0x02
   18cda:	b3 80       	ldd	r11, Z+3	; 0x03
   18cdc:	48 14       	cp	r4, r8
   18cde:	59 04       	cpc	r5, r9
   18ce0:	6a 04       	cpc	r6, r10
   18ce2:	7b 04       	cpc	r7, r11
   18ce4:	28 f5       	brcc	.+74     	; 0x18d30 <lif_check_dir+0x2ca>
   18ce6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18cea:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18cee:	32 ff       	sbrs	r19, 2
   18cf0:	1f c0       	rjmp	.+62     	; 0x18d30 <lif_check_dir+0x2ca>
   18cf2:	2a 89       	ldd	r18, Y+18	; 0x12
   18cf4:	3b 89       	ldd	r19, Y+19	; 0x13
   18cf6:	23 2b       	or	r18, r19
   18cf8:	19 f0       	breq	.+6      	; 0x18d00 <lif_check_dir+0x29a>
   18cfa:	01 96       	adiw	r24, 0x01	; 1
   18cfc:	a1 1d       	adc	r26, r1
   18cfe:	b1 1d       	adc	r27, r1
   18d00:	ed b7       	in	r30, 0x3d	; 61
   18d02:	fe b7       	in	r31, 0x3e	; 62
   18d04:	86 86       	std	Z+14, r8	; 0x0e
   18d06:	97 86       	std	Z+15, r9	; 0x0f
   18d08:	a0 8a       	std	Z+16, r10	; 0x10
   18d0a:	b1 8a       	std	Z+17, r11	; 0x11
   18d0c:	82 87       	std	Z+10, r24	; 0x0a
   18d0e:	93 87       	std	Z+11, r25	; 0x0b
   18d10:	a4 87       	std	Z+12, r26	; 0x0c
   18d12:	b5 87       	std	Z+13, r27	; 0x0d
   18d14:	46 83       	std	Z+6, r20	; 0x06
   18d16:	57 83       	std	Z+7, r21	; 0x07
   18d18:	60 87       	std	Z+8, r22	; 0x08
   18d1a:	71 87       	std	Z+9, r23	; 0x09
   18d1c:	f5 82       	std	Z+5, r15	; 0x05
   18d1e:	e4 82       	std	Z+4, r14	; 0x04
   18d20:	85 e9       	ldi	r24, 0x95	; 149
   18d22:	9a e3       	ldi	r25, 0x3A	; 58
   18d24:	a0 e0       	ldi	r26, 0x00	; 0
   18d26:	81 83       	std	Z+1, r24	; 0x01
   18d28:	92 83       	std	Z+2, r25	; 0x02
   18d2a:	a3 83       	std	Z+3, r26	; 0x03
   18d2c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18d30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18d34:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d38:	92 ff       	sbrs	r25, 2
   18d3a:	13 c0       	rjmp	.+38     	; 0x18d62 <lif_check_dir+0x2fc>
   18d3c:	f6 01       	movw	r30, r12
   18d3e:	80 81       	ld	r24, Z
   18d40:	91 81       	ldd	r25, Z+1	; 0x01
   18d42:	89 2b       	or	r24, r25
   18d44:	71 f4       	brne	.+28     	; 0x18d62 <lif_check_dir+0x2fc>
   18d46:	ed b7       	in	r30, 0x3d	; 61
   18d48:	fe b7       	in	r31, 0x3e	; 62
   18d4a:	f5 82       	std	Z+5, r15	; 0x05
   18d4c:	e4 82       	std	Z+4, r14	; 0x04
   18d4e:	8a e6       	ldi	r24, 0x6A	; 106
   18d50:	9a e3       	ldi	r25, 0x3A	; 58
   18d52:	a0 e0       	ldi	r26, 0x00	; 0
   18d54:	81 83       	std	Z+1, r24	; 0x01
   18d56:	92 83       	std	Z+2, r25	; 0x02
   18d58:	a3 83       	std	Z+3, r26	; 0x03
   18d5a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18d5e:	00 e0       	ldi	r16, 0x00	; 0
   18d60:	10 e0       	ldi	r17, 0x00	; 0
   18d62:	ec 89       	ldd	r30, Y+20	; 0x14
   18d64:	fd 89       	ldd	r31, Y+21	; 0x15
   18d66:	e2 59       	subi	r30, 0x92	; 146
   18d68:	ff 4f       	sbci	r31, 0xFF	; 255
   18d6a:	20 81       	ld	r18, Z
   18d6c:	31 81       	ldd	r19, Z+1	; 0x01
   18d6e:	21 15       	cp	r18, r1
   18d70:	f1 e0       	ldi	r31, 0x01	; 1
   18d72:	3f 07       	cpc	r19, r31
   18d74:	41 f1       	breq	.+80     	; 0x18dc6 <lif_check_dir+0x360>
   18d76:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18d7a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d7e:	ca 01       	movw	r24, r20
   18d80:	88 27       	eor	r24, r24
   18d82:	94 70       	andi	r25, 0x04	; 4
   18d84:	52 ff       	sbrs	r21, 2
   18d86:	20 c0       	rjmp	.+64     	; 0x18dc8 <lif_check_dir+0x362>
   18d88:	c9 01       	movw	r24, r18
   18d8a:	a0 e0       	ldi	r26, 0x00	; 0
   18d8c:	b0 e0       	ldi	r27, 0x00	; 0
   18d8e:	ed b7       	in	r30, 0x3d	; 61
   18d90:	fe b7       	in	r31, 0x3e	; 62
   18d92:	86 83       	std	Z+6, r24	; 0x06
   18d94:	97 83       	std	Z+7, r25	; 0x07
   18d96:	a0 87       	std	Z+8, r26	; 0x08
   18d98:	b1 87       	std	Z+9, r27	; 0x09
   18d9a:	ec 89       	ldd	r30, Y+20	; 0x14
   18d9c:	fd 89       	ldd	r31, Y+21	; 0x15
   18d9e:	80 81       	ld	r24, Z
   18da0:	91 81       	ldd	r25, Z+1	; 0x01
   18da2:	ed b7       	in	r30, 0x3d	; 61
   18da4:	fe b7       	in	r31, 0x3e	; 62
   18da6:	95 83       	std	Z+5, r25	; 0x05
   18da8:	84 83       	std	Z+4, r24	; 0x04
   18daa:	8e e3       	ldi	r24, 0x3E	; 62
   18dac:	9a e3       	ldi	r25, 0x3A	; 58
   18dae:	a0 e0       	ldi	r26, 0x00	; 0
   18db0:	81 83       	std	Z+1, r24	; 0x01
   18db2:	92 83       	std	Z+2, r25	; 0x02
   18db4:	a3 83       	std	Z+3, r26	; 0x03
   18db6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18dba:	80 e0       	ldi	r24, 0x00	; 0
   18dbc:	90 e0       	ldi	r25, 0x00	; 0
   18dbe:	04 c0       	rjmp	.+8      	; 0x18dc8 <lif_check_dir+0x362>
   18dc0:	81 e0       	ldi	r24, 0x01	; 1
   18dc2:	90 e0       	ldi	r25, 0x00	; 0
   18dc4:	01 c0       	rjmp	.+2      	; 0x18dc8 <lif_check_dir+0x362>
   18dc6:	c8 01       	movw	r24, r16
   18dc8:	65 96       	adiw	r28, 0x15	; 21
   18dca:	e2 e1       	ldi	r30, 0x12	; 18
   18dcc:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00018dd0 <lif_close_volume>:
   18dd0:	cf 93       	push	r28
   18dd2:	df 93       	push	r29
   18dd4:	00 97       	sbiw	r24, 0x00	; 0
   18dd6:	f9 f0       	breq	.+62     	; 0x18e16 <lif_close_volume+0x46>
   18dd8:	ec 01       	movw	r28, r24
   18dda:	8a 81       	ldd	r24, Y+2	; 0x02
   18ddc:	9b 81       	ldd	r25, Y+3	; 0x03
   18dde:	00 97       	sbiw	r24, 0x00	; 0
   18de0:	79 f0       	breq	.+30     	; 0x18e00 <lif_close_volume+0x30>
   18de2:	22 e0       	ldi	r18, 0x02	; 2
   18de4:	30 e0       	ldi	r19, 0x00	; 0
   18de6:	40 e0       	ldi	r20, 0x00	; 0
   18de8:	50 e0       	ldi	r21, 0x00	; 0
   18dea:	ba 01       	movw	r22, r20
   18dec:	0e 94 31 79 	call	0xf262	; 0xf262 <fseek>
   18df0:	8a 81       	ldd	r24, Y+2	; 0x02
   18df2:	9b 81       	ldd	r25, Y+3	; 0x03
   18df4:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
   18df8:	1b 82       	std	Y+3, r1	; 0x03
   18dfa:	1a 82       	std	Y+2, r1	; 0x02
   18dfc:	0e 94 14 7a 	call	0xf428	; 0xf428 <sync>
   18e00:	88 81       	ld	r24, Y
   18e02:	99 81       	ldd	r25, Y+1	; 0x01
   18e04:	00 97       	sbiw	r24, 0x00	; 0
   18e06:	11 f0       	breq	.+4      	; 0x18e0c <lif_close_volume+0x3c>
   18e08:	0e 94 64 bd 	call	0x17ac8	; 0x17ac8 <lif_free>
   18e0c:	ce 01       	movw	r24, r28
   18e0e:	73 db       	rcall	.-2330   	; 0x184f6 <lif_vol_clear>
   18e10:	ce 01       	movw	r24, r28
   18e12:	0e 94 64 bd 	call	0x17ac8	; 0x17ac8 <lif_free>
   18e16:	df 91       	pop	r29
   18e18:	cf 91       	pop	r28
   18e1a:	08 95       	ret

00018e1c <lif_checkdirindex>:
   18e1c:	cf 92       	push	r12
   18e1e:	df 92       	push	r13
   18e20:	ef 92       	push	r14
   18e22:	ff 92       	push	r15
   18e24:	cf 93       	push	r28
   18e26:	df 93       	push	r29
   18e28:	ad b7       	in	r26, 0x3d	; 61
   18e2a:	be b7       	in	r27, 0x3e	; 62
   18e2c:	17 97       	sbiw	r26, 0x07	; 7
   18e2e:	0f b6       	in	r0, 0x3f	; 63
   18e30:	f8 94       	cli
   18e32:	be bf       	out	0x3e, r27	; 62
   18e34:	0f be       	out	0x3f, r0	; 63
   18e36:	ad bf       	out	0x3d, r26	; 61
   18e38:	9b 01       	movw	r18, r22
   18e3a:	77 fd       	sbrc	r23, 7
   18e3c:	25 c0       	rjmp	.+74     	; 0x18e88 <lif_checkdirindex+0x6c>
   18e3e:	ab 01       	movw	r20, r22
   18e40:	77 0f       	add	r23, r23
   18e42:	66 0b       	sbc	r22, r22
   18e44:	77 0b       	sbc	r23, r23
   18e46:	e5 e0       	ldi	r30, 0x05	; 5
   18e48:	44 0f       	add	r20, r20
   18e4a:	55 1f       	adc	r21, r21
   18e4c:	66 1f       	adc	r22, r22
   18e4e:	77 1f       	adc	r23, r23
   18e50:	ea 95       	dec	r30
   18e52:	d1 f7       	brne	.-12     	; 0x18e48 <lif_checkdirindex+0x2c>
   18e54:	c5 2e       	mov	r12, r21
   18e56:	d6 2e       	mov	r13, r22
   18e58:	e7 2e       	mov	r14, r23
   18e5a:	ff 24       	eor	r15, r15
   18e5c:	55 27       	eor	r21, r21
   18e5e:	66 27       	eor	r22, r22
   18e60:	77 27       	eor	r23, r23
   18e62:	45 2b       	or	r20, r21
   18e64:	46 2b       	or	r20, r22
   18e66:	47 2b       	or	r20, r23
   18e68:	29 f0       	breq	.+10     	; 0x18e74 <lif_checkdirindex+0x58>
   18e6a:	4f ef       	ldi	r20, 0xFF	; 255
   18e6c:	c4 1a       	sub	r12, r20
   18e6e:	d4 0a       	sbc	r13, r20
   18e70:	e4 0a       	sbc	r14, r20
   18e72:	f4 0a       	sbc	r15, r20
   18e74:	fc 01       	movw	r30, r24
   18e76:	45 a9       	ldd	r20, Z+53	; 0x35
   18e78:	56 a9       	ldd	r21, Z+54	; 0x36
   18e7a:	67 a9       	ldd	r22, Z+55	; 0x37
   18e7c:	70 ad       	ldd	r23, Z+56	; 0x38
   18e7e:	4c 15       	cp	r20, r12
   18e80:	5d 05       	cpc	r21, r13
   18e82:	6e 05       	cpc	r22, r14
   18e84:	7f 05       	cpc	r23, r15
   18e86:	08 f5       	brcc	.+66     	; 0x18eca <lif_checkdirindex+0xae>
   18e88:	ec 01       	movw	r28, r24
   18e8a:	ed b7       	in	r30, 0x3d	; 61
   18e8c:	fe b7       	in	r31, 0x3e	; 62
   18e8e:	37 83       	std	Z+7, r19	; 0x07
   18e90:	26 83       	std	Z+6, r18	; 0x06
   18e92:	88 81       	ld	r24, Y
   18e94:	99 81       	ldd	r25, Y+1	; 0x01
   18e96:	95 83       	std	Z+5, r25	; 0x05
   18e98:	84 83       	std	Z+4, r24	; 0x04
   18e9a:	8b e7       	ldi	r24, 0x7B	; 123
   18e9c:	99 e3       	ldi	r25, 0x39	; 57
   18e9e:	a0 e0       	ldi	r26, 0x00	; 0
   18ea0:	81 83       	std	Z+1, r24	; 0x01
   18ea2:	92 83       	std	Z+2, r25	; 0x02
   18ea4:	a3 83       	std	Z+3, r26	; 0x03
   18ea6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18eaa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18eae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18eb2:	c9 01       	movw	r24, r18
   18eb4:	88 27       	eor	r24, r24
   18eb6:	94 70       	andi	r25, 0x04	; 4
   18eb8:	32 ff       	sbrs	r19, 2
   18eba:	09 c0       	rjmp	.+18     	; 0x18ece <lif_checkdirindex+0xb2>
   18ebc:	6f ee       	ldi	r22, 0xEF	; 239
   18ebe:	75 e1       	ldi	r23, 0x15	; 21
   18ec0:	ce 01       	movw	r24, r28
   18ec2:	20 db       	rcall	.-2496   	; 0x18504 <lif_dump_vol>
   18ec4:	80 e0       	ldi	r24, 0x00	; 0
   18ec6:	90 e0       	ldi	r25, 0x00	; 0
   18ec8:	02 c0       	rjmp	.+4      	; 0x18ece <lif_checkdirindex+0xb2>
   18eca:	81 e0       	ldi	r24, 0x01	; 1
   18ecc:	90 e0       	ldi	r25, 0x00	; 0
   18ece:	ad b7       	in	r26, 0x3d	; 61
   18ed0:	be b7       	in	r27, 0x3e	; 62
   18ed2:	17 96       	adiw	r26, 0x07	; 7
   18ed4:	0f b6       	in	r0, 0x3f	; 63
   18ed6:	f8 94       	cli
   18ed8:	be bf       	out	0x3e, r27	; 62
   18eda:	0f be       	out	0x3f, r0	; 63
   18edc:	ad bf       	out	0x3d, r26	; 61
   18ede:	df 91       	pop	r29
   18ee0:	cf 91       	pop	r28
   18ee2:	ff 90       	pop	r15
   18ee4:	ef 90       	pop	r14
   18ee6:	df 90       	pop	r13
   18ee8:	cf 90       	pop	r12
   18eea:	08 95       	ret

00018eec <lif_readdirindex>:
   18eec:	a5 e2       	ldi	r26, 0x25	; 37
   18eee:	b0 e0       	ldi	r27, 0x00	; 0
   18ef0:	ec e7       	ldi	r30, 0x7C	; 124
   18ef2:	f7 ec       	ldi	r31, 0xC7	; 199
   18ef4:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
   18ef8:	7c 01       	movw	r14, r24
   18efa:	6b 01       	movw	r12, r22
   18efc:	8f df       	rcall	.-226    	; 0x18e1c <lif_checkdirindex>
   18efe:	89 2b       	or	r24, r25
   18f00:	19 f4       	brne	.+6      	; 0x18f08 <lif_readdirindex+0x1c>
   18f02:	00 e0       	ldi	r16, 0x00	; 0
   18f04:	10 e0       	ldi	r17, 0x00	; 0
   18f06:	54 c0       	rjmp	.+168    	; 0x18fb0 <lif_readdirindex+0xc4>
   18f08:	f7 01       	movw	r30, r14
   18f0a:	85 a5       	ldd	r24, Z+45	; 0x2d
   18f0c:	96 a5       	ldd	r25, Z+46	; 0x2e
   18f0e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18f10:	b0 a9       	ldd	r27, Z+48	; 0x30
   18f12:	44 27       	eor	r20, r20
   18f14:	58 2f       	mov	r21, r24
   18f16:	69 2f       	mov	r22, r25
   18f18:	7a 2f       	mov	r23, r26
   18f1a:	c6 01       	movw	r24, r12
   18f1c:	0d 2c       	mov	r0, r13
   18f1e:	00 0c       	add	r0, r0
   18f20:	aa 0b       	sbc	r26, r26
   18f22:	bb 0b       	sbc	r27, r27
   18f24:	35 e0       	ldi	r19, 0x05	; 5
   18f26:	88 0f       	add	r24, r24
   18f28:	99 1f       	adc	r25, r25
   18f2a:	aa 1f       	adc	r26, r26
   18f2c:	bb 1f       	adc	r27, r27
   18f2e:	3a 95       	dec	r19
   18f30:	d1 f7       	brne	.-12     	; 0x18f26 <lif_readdirindex+0x3a>
   18f32:	9a 01       	movw	r18, r20
   18f34:	ab 01       	movw	r20, r22
   18f36:	28 0f       	add	r18, r24
   18f38:	39 1f       	adc	r19, r25
   18f3a:	4a 1f       	adc	r20, r26
   18f3c:	5b 1f       	adc	r21, r27
   18f3e:	00 e2       	ldi	r16, 0x20	; 32
   18f40:	10 e0       	ldi	r17, 0x00	; 0
   18f42:	be 01       	movw	r22, r28
   18f44:	6a 5f       	subi	r22, 0xFA	; 250
   18f46:	7f 4f       	sbci	r23, 0xFF	; 255
   18f48:	c7 01       	movw	r24, r14
   18f4a:	0e 94 1c be 	call	0x17c38	; 0x17c38 <lif_read>
   18f4e:	60 32       	cpi	r22, 0x20	; 32
   18f50:	71 05       	cpc	r23, r1
   18f52:	81 05       	cpc	r24, r1
   18f54:	91 05       	cpc	r25, r1
   18f56:	a8 f2       	brcs	.-86     	; 0x18f02 <lif_readdirindex+0x16>
   18f58:	b7 01       	movw	r22, r14
   18f5a:	ce 01       	movw	r24, r28
   18f5c:	06 96       	adiw	r24, 0x06	; 6
   18f5e:	75 d9       	rcall	.-3350   	; 0x1824a <lif_str2dir>
   18f60:	f7 01       	movw	r30, r14
   18f62:	e6 5a       	subi	r30, 0xA6	; 166
   18f64:	ff 4f       	sbci	r31, 0xFF	; 255
   18f66:	80 81       	ld	r24, Z
   18f68:	91 81       	ldd	r25, Z+1	; 0x01
   18f6a:	01 96       	adiw	r24, 0x01	; 1
   18f6c:	19 f4       	brne	.+6      	; 0x18f74 <lif_readdirindex+0x88>
   18f6e:	f7 01       	movw	r30, r14
   18f70:	d3 a2       	std	Z+35, r13	; 0x23
   18f72:	c2 a2       	std	Z+34, r12	; 0x22
   18f74:	c7 01       	movw	r24, r14
   18f76:	77 dd       	rcall	.-1298   	; 0x18a66 <lif_check_dir>
   18f78:	8c 01       	movw	r16, r24
   18f7a:	89 2b       	or	r24, r25
   18f7c:	b9 f4       	brne	.+46     	; 0x18fac <lif_readdirindex+0xc0>
   18f7e:	ed b7       	in	r30, 0x3d	; 61
   18f80:	fe b7       	in	r31, 0x3e	; 62
   18f82:	d5 82       	std	Z+5, r13	; 0x05
   18f84:	c4 82       	std	Z+4, r12	; 0x04
   18f86:	8b e5       	ldi	r24, 0x5B	; 91
   18f88:	99 e3       	ldi	r25, 0x39	; 57
   18f8a:	a0 e0       	ldi	r26, 0x00	; 0
   18f8c:	81 83       	std	Z+1, r24	; 0x01
   18f8e:	92 83       	std	Z+2, r25	; 0x02
   18f90:	a3 83       	std	Z+3, r26	; 0x03
   18f92:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   18f96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f9e:	92 ff       	sbrs	r25, 2
   18fa0:	b0 cf       	rjmp	.-160    	; 0x18f02 <lif_readdirindex+0x16>
   18fa2:	60 e0       	ldi	r22, 0x00	; 0
   18fa4:	76 e1       	ldi	r23, 0x16	; 22
   18fa6:	c7 01       	movw	r24, r14
   18fa8:	ad da       	rcall	.-2726   	; 0x18504 <lif_dump_vol>
   18faa:	02 c0       	rjmp	.+4      	; 0x18fb0 <lif_readdirindex+0xc4>
   18fac:	01 e0       	ldi	r16, 0x01	; 1
   18fae:	10 e0       	ldi	r17, 0x00	; 0
   18fb0:	c8 01       	movw	r24, r16
   18fb2:	a5 96       	adiw	r28, 0x25	; 37
   18fb4:	e8 e0       	ldi	r30, 0x08	; 8
   18fb6:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

00018fba <lif_writedirindex>:
   18fba:	a0 e2       	ldi	r26, 0x20	; 32
   18fbc:	b0 e0       	ldi	r27, 0x00	; 0
   18fbe:	e3 ee       	ldi	r30, 0xE3	; 227
   18fc0:	f7 ec       	ldi	r31, 0xC7	; 199
   18fc2:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   18fc6:	5c 01       	movw	r10, r24
   18fc8:	6b 01       	movw	r12, r22
   18fca:	4d dd       	rcall	.-1382   	; 0x18a66 <lif_check_dir>
   18fcc:	7c 01       	movw	r14, r24
   18fce:	89 2b       	or	r24, r25
   18fd0:	71 f4       	brne	.+28     	; 0x18fee <lif_writedirindex+0x34>
   18fd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fd6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fda:	92 fd       	sbrc	r25, 2
   18fdc:	03 c0       	rjmp	.+6      	; 0x18fe4 <lif_writedirindex+0x2a>
   18fde:	e1 2c       	mov	r14, r1
   18fe0:	f1 2c       	mov	r15, r1
   18fe2:	42 c0       	rjmp	.+132    	; 0x19068 <lif_writedirindex+0xae>
   18fe4:	61 e1       	ldi	r22, 0x11	; 17
   18fe6:	76 e1       	ldi	r23, 0x16	; 22
   18fe8:	c5 01       	movw	r24, r10
   18fea:	8c da       	rcall	.-2792   	; 0x18504 <lif_dump_vol>
   18fec:	3d c0       	rjmp	.+122    	; 0x19068 <lif_writedirindex+0xae>
   18fee:	b6 01       	movw	r22, r12
   18ff0:	c5 01       	movw	r24, r10
   18ff2:	14 df       	rcall	.-472    	; 0x18e1c <lif_checkdirindex>
   18ff4:	89 2b       	or	r24, r25
   18ff6:	99 f3       	breq	.-26     	; 0x18fde <lif_writedirindex+0x24>
   18ff8:	f5 01       	movw	r30, r10
   18ffa:	e6 5a       	subi	r30, 0xA6	; 166
   18ffc:	ff 4f       	sbci	r31, 0xFF	; 255
   18ffe:	80 81       	ld	r24, Z
   19000:	91 81       	ldd	r25, Z+1	; 0x01
   19002:	01 96       	adiw	r24, 0x01	; 1
   19004:	19 f4       	brne	.+6      	; 0x1900c <lif_writedirindex+0x52>
   19006:	f5 01       	movw	r30, r10
   19008:	d3 a2       	std	Z+35, r13	; 0x23
   1900a:	c2 a2       	std	Z+34, r12	; 0x22
   1900c:	f5 01       	movw	r30, r10
   1900e:	85 a5       	ldd	r24, Z+45	; 0x2d
   19010:	96 a5       	ldd	r25, Z+46	; 0x2e
   19012:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19014:	b0 a9       	ldd	r27, Z+48	; 0x30
   19016:	ba 2f       	mov	r27, r26
   19018:	a9 2f       	mov	r26, r25
   1901a:	98 2f       	mov	r25, r24
   1901c:	88 27       	eor	r24, r24
   1901e:	0d 2c       	mov	r0, r13
   19020:	00 0c       	add	r0, r0
   19022:	ee 08       	sbc	r14, r14
   19024:	ff 08       	sbc	r15, r15
   19026:	35 e0       	ldi	r19, 0x05	; 5
   19028:	cc 0c       	add	r12, r12
   1902a:	dd 1c       	adc	r13, r13
   1902c:	ee 1c       	adc	r14, r14
   1902e:	ff 1c       	adc	r15, r15
   19030:	3a 95       	dec	r19
   19032:	d1 f7       	brne	.-12     	; 0x19028 <lif_writedirindex+0x6e>
   19034:	c8 0e       	add	r12, r24
   19036:	d9 1e       	adc	r13, r25
   19038:	ea 1e       	adc	r14, r26
   1903a:	fb 1e       	adc	r15, r27
   1903c:	be 01       	movw	r22, r28
   1903e:	6f 5f       	subi	r22, 0xFF	; 255
   19040:	7f 4f       	sbci	r23, 0xFF	; 255
   19042:	c5 01       	movw	r24, r10
   19044:	97 d8       	rcall	.-3794   	; 0x18174 <lif_dir2str>
   19046:	00 e2       	ldi	r16, 0x20	; 32
   19048:	10 e0       	ldi	r17, 0x00	; 0
   1904a:	a7 01       	movw	r20, r14
   1904c:	96 01       	movw	r18, r12
   1904e:	be 01       	movw	r22, r28
   19050:	6f 5f       	subi	r22, 0xFF	; 255
   19052:	7f 4f       	sbci	r23, 0xFF	; 255
   19054:	c5 01       	movw	r24, r10
   19056:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
   1905a:	31 e0       	ldi	r19, 0x01	; 1
   1905c:	20 e0       	ldi	r18, 0x00	; 0
   1905e:	80 97       	sbiw	r24, 0x20	; 32
   19060:	0c f4       	brge	.+2      	; 0x19064 <lif_writedirindex+0xaa>
   19062:	30 e0       	ldi	r19, 0x00	; 0
   19064:	e3 2e       	mov	r14, r19
   19066:	f2 2e       	mov	r15, r18
   19068:	c7 01       	movw	r24, r14
   1906a:	a0 96       	adiw	r28, 0x20	; 32
   1906c:	ea e0       	ldi	r30, 0x0A	; 10
   1906e:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

00019072 <lif_writedirEOF>:
   19072:	0f 93       	push	r16
   19074:	1f 93       	push	r17
   19076:	cf 93       	push	r28
   19078:	df 93       	push	r29
   1907a:	ec 01       	movw	r28, r24
   1907c:	8b 01       	movw	r16, r22
   1907e:	33 da       	rcall	.-2970   	; 0x184e6 <lif_dir_clear>
   19080:	fe 01       	movw	r30, r28
   19082:	e6 5a       	subi	r30, 0xA6	; 166
   19084:	ff 4f       	sbci	r31, 0xFF	; 255
   19086:	8f ef       	ldi	r24, 0xFF	; 255
   19088:	9f ef       	ldi	r25, 0xFF	; 255
   1908a:	91 83       	std	Z+1, r25	; 0x01
   1908c:	80 83       	st	Z, r24
   1908e:	1b a3       	std	Y+35, r17	; 0x23
   19090:	0a a3       	std	Y+34, r16	; 0x22
   19092:	b8 01       	movw	r22, r16
   19094:	ce 01       	movw	r24, r28
   19096:	91 df       	rcall	.-222    	; 0x18fba <lif_writedirindex>
   19098:	df 91       	pop	r29
   1909a:	cf 91       	pop	r28
   1909c:	1f 91       	pop	r17
   1909e:	0f 91       	pop	r16
   190a0:	08 95       	ret

000190a2 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   190a2:	2f 92       	push	r2
   190a4:	3f 92       	push	r3
   190a6:	4f 92       	push	r4
   190a8:	5f 92       	push	r5
   190aa:	6f 92       	push	r6
   190ac:	7f 92       	push	r7
   190ae:	8f 92       	push	r8
   190b0:	af 92       	push	r10
   190b2:	bf 92       	push	r11
   190b4:	cf 92       	push	r12
   190b6:	df 92       	push	r13
   190b8:	ef 92       	push	r14
   190ba:	ff 92       	push	r15
   190bc:	0f 93       	push	r16
   190be:	1f 93       	push	r17
   190c0:	cf 93       	push	r28
   190c2:	df 93       	push	r29
   190c4:	cd b7       	in	r28, 0x3d	; 61
   190c6:	de b7       	in	r29, 0x3e	; 62
   190c8:	2f 97       	sbiw	r28, 0x0f	; 15
   190ca:	0f b6       	in	r0, 0x3f	; 63
   190cc:	f8 94       	cli
   190ce:	de bf       	out	0x3e, r29	; 62
   190d0:	0f be       	out	0x3f, r0	; 63
   190d2:	cd bf       	out	0x3d, r28	; 61
   190d4:	9f 87       	std	Y+15, r25	; 0x0f
   190d6:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   190d8:	fc 01       	movw	r30, r24
   190da:	24 84       	ldd	r2, Z+12	; 0x0c
   190dc:	35 84       	ldd	r3, Z+13	; 0x0d
   190de:	46 84       	ldd	r4, Z+14	; 0x0e
   190e0:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   190e2:	80 89       	ldd	r24, Z+16	; 0x10
   190e4:	91 89       	ldd	r25, Z+17	; 0x11
   190e6:	a2 89       	ldd	r26, Z+18	; 0x12
   190e8:	b3 89       	ldd	r27, Z+19	; 0x13
   190ea:	80 8f       	std	Z+24, r24	; 0x18
   190ec:	91 8f       	std	Z+25, r25	; 0x19
   190ee:	a2 8f       	std	Z+26, r26	; 0x1a
   190f0:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   190f2:	14 8a       	std	Z+20, r1	; 0x14
   190f4:	15 8a       	std	Z+21, r1	; 0x15
   190f6:	16 8a       	std	Z+22, r1	; 0x16
   190f8:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   190fa:	17 8e       	std	Z+31, r1	; 0x1f
   190fc:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   190fe:	15 8e       	std	Z+29, r1	; 0x1d
   19100:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   19102:	11 a2       	std	Z+33, r1	; 0x21
   19104:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19106:	13 a2       	std	Z+35, r1	; 0x23
   19108:	12 a2       	std	Z+34, r1	; 0x22
   1910a:	cc 24       	eor	r12, r12
   1910c:	c3 94       	inc	r12
   1910e:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   19110:	0f ef       	ldi	r16, 0xFF	; 255
   19112:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19114:	e6 5a       	subi	r30, 0xA6	; 166
   19116:	ff 4f       	sbci	r31, 0xFF	; 255
   19118:	f9 87       	std	Y+9, r31	; 0x09
   1911a:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   1911c:	ae 84       	ldd	r10, Y+14	; 0x0e
   1911e:	bf 84       	ldd	r11, Y+15	; 0x0f
   19120:	fc e5       	ldi	r31, 0x5C	; 92
   19122:	af 0e       	add	r10, r31
   19124:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19126:	8e 85       	ldd	r24, Y+14	; 0x0e
   19128:	9f 85       	ldd	r25, Y+15	; 0x0f
   1912a:	80 5a       	subi	r24, 0xA0	; 160
   1912c:	9f 4f       	sbci	r25, 0xFF	; 255
   1912e:	9b 87       	std	Y+11, r25	; 0x0b
   19130:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19132:	ee 85       	ldd	r30, Y+14	; 0x0e
   19134:	ff 85       	ldd	r31, Y+15	; 0x0f
   19136:	e1 5b       	subi	r30, 0xB1	; 177
   19138:	ff 4f       	sbci	r31, 0xFF	; 255
   1913a:	fd 87       	std	Y+13, r31	; 0x0d
   1913c:	ec 87       	std	Y+12, r30	; 0x0c
   1913e:	8e e0       	ldi	r24, 0x0E	; 14
   19140:	99 e3       	ldi	r25, 0x39	; 57
   19142:	3c 01       	movw	r6, r24
   19144:	81 2c       	mov	r8, r1
   19146:	76 01       	movw	r14, r12
   19148:	21 e0       	ldi	r18, 0x01	; 1
   1914a:	e2 1a       	sub	r14, r18
   1914c:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   1914e:	b7 01       	movw	r22, r14
   19150:	8e 85       	ldd	r24, Y+14	; 0x0e
   19152:	9f 85       	ldd	r25, Y+15	; 0x0f
   19154:	cb de       	rcall	.-618    	; 0x18eec <lif_readdirindex>
   19156:	89 2b       	or	r24, r25
   19158:	19 f4       	brne	.+6      	; 0x19160 <lif_updatefree+0xbe>
        {
            return(NULL);
   1915a:	80 e0       	ldi	r24, 0x00	; 0
   1915c:	90 e0       	ldi	r25, 0x00	; 0
   1915e:	93 c0       	rjmp	.+294    	; 0x19286 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19160:	e8 85       	ldd	r30, Y+8	; 0x08
   19162:	f9 85       	ldd	r31, Y+9	; 0x09
   19164:	80 81       	ld	r24, Z
   19166:	91 81       	ldd	r25, Z+1	; 0x01
   19168:	8f 3f       	cpi	r24, 0xFF	; 255
   1916a:	ff ef       	ldi	r31, 0xFF	; 255
   1916c:	9f 07       	cpc	r25, r31
   1916e:	c1 f4       	brne	.+48     	; 0x191a0 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19170:	ee 85       	ldd	r30, Y+14	; 0x0e
   19172:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   19174:	0f 3f       	cpi	r16, 0xFF	; 255
   19176:	2f ef       	ldi	r18, 0xFF	; 255
   19178:	12 07       	cpc	r17, r18
   1917a:	09 f4       	brne	.+2      	; 0x1917e <lif_updatefree+0xdc>
   1917c:	7a c0       	rjmp	.+244    	; 0x19272 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   1917e:	13 a3       	std	Z+35, r17	; 0x23
   19180:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19182:	e0 1a       	sub	r14, r16
   19184:	f1 0a       	sbc	r15, r17
   19186:	86 8d       	ldd	r24, Z+30	; 0x1e
   19188:	97 8d       	ldd	r25, Z+31	; 0x1f
   1918a:	8e 19       	sub	r24, r14
   1918c:	9f 09       	sbc	r25, r15
   1918e:	97 8f       	std	Z+31, r25	; 0x1f
   19190:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19192:	b8 01       	movw	r22, r16
   19194:	cf 01       	movw	r24, r30
   19196:	6d df       	rcall	.-294    	; 0x19072 <lif_writedirEOF>
   19198:	89 2b       	or	r24, r25
   1919a:	09 f0       	breq	.+2      	; 0x1919e <lif_updatefree+0xfc>
   1919c:	6c c0       	rjmp	.+216    	; 0x19276 <lif_updatefree+0x1d4>
   1919e:	dd cf       	rjmp	.-70     	; 0x1915a <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   191a0:	89 2b       	or	r24, r25
   191a2:	81 f4       	brne	.+32     	; 0x191c4 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   191a4:	0f 3f       	cpi	r16, 0xFF	; 255
   191a6:	ff ef       	ldi	r31, 0xFF	; 255
   191a8:	1f 07       	cpc	r17, r31
   191aa:	09 f4       	brne	.+2      	; 0x191ae <lif_updatefree+0x10c>
   191ac:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   191ae:	ee 85       	ldd	r30, Y+14	; 0x0e
   191b0:	ff 85       	ldd	r31, Y+15	; 0x0f
   191b2:	86 8d       	ldd	r24, Z+30	; 0x1e
   191b4:	97 8d       	ldd	r25, Z+31	; 0x1f
   191b6:	01 96       	adiw	r24, 0x01	; 1
   191b8:	97 8f       	std	Z+31, r25	; 0x1f
   191ba:	86 8f       	std	Z+30, r24	; 0x1e
   191bc:	ff ef       	ldi	r31, 0xFF	; 255
   191be:	cf 1a       	sub	r12, r31
   191c0:	df 0a       	sbc	r13, r31
   191c2:	c1 cf       	rjmp	.-126    	; 0x19146 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   191c4:	f5 01       	movw	r30, r10
   191c6:	80 81       	ld	r24, Z
   191c8:	91 81       	ldd	r25, Z+1	; 0x01
   191ca:	a2 81       	ldd	r26, Z+2	; 0x02
   191cc:	b3 81       	ldd	r27, Z+3	; 0x03
   191ce:	82 15       	cp	r24, r2
   191d0:	93 05       	cpc	r25, r3
   191d2:	a4 05       	cpc	r26, r4
   191d4:	b5 05       	cpc	r27, r5
   191d6:	c8 f4       	brcc	.+50     	; 0x1920a <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   191d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191dc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191e0:	92 ff       	sbrs	r25, 2
   191e2:	13 c0       	rjmp	.+38     	; 0x1920a <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   191e4:	8c 85       	ldd	r24, Y+12	; 0x0c
   191e6:	9d 85       	ldd	r25, Y+13	; 0x0d
   191e8:	ed b7       	in	r30, 0x3d	; 61
   191ea:	fe b7       	in	r31, 0x3e	; 62
   191ec:	97 83       	std	Z+7, r25	; 0x07
   191ee:	86 83       	std	Z+6, r24	; 0x06
   191f0:	ee 85       	ldd	r30, Y+14	; 0x0e
   191f2:	ff 85       	ldd	r31, Y+15	; 0x0f
   191f4:	80 81       	ld	r24, Z
   191f6:	91 81       	ldd	r25, Z+1	; 0x01
   191f8:	ed b7       	in	r30, 0x3d	; 61
   191fa:	fe b7       	in	r31, 0x3e	; 62
   191fc:	95 83       	std	Z+5, r25	; 0x05
   191fe:	84 83       	std	Z+4, r24	; 0x04
   19200:	61 82       	std	Z+1, r6	; 0x01
   19202:	72 82       	std	Z+2, r7	; 0x02
   19204:	83 82       	std	Z+3, r8	; 0x03
   19206:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   1920a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1920c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1920e:	80 81       	ld	r24, Z
   19210:	91 81       	ldd	r25, Z+1	; 0x01
   19212:	a2 81       	ldd	r26, Z+2	; 0x02
   19214:	b3 81       	ldd	r27, Z+3	; 0x03
   19216:	ee 85       	ldd	r30, Y+14	; 0x0e
   19218:	ff 85       	ldd	r31, Y+15	; 0x0f
   1921a:	44 89       	ldd	r20, Z+20	; 0x14
   1921c:	55 89       	ldd	r21, Z+21	; 0x15
   1921e:	66 89       	ldd	r22, Z+22	; 0x16
   19220:	77 89       	ldd	r23, Z+23	; 0x17
   19222:	48 0f       	add	r20, r24
   19224:	59 1f       	adc	r21, r25
   19226:	6a 1f       	adc	r22, r26
   19228:	7b 1f       	adc	r23, r27
   1922a:	44 8b       	std	Z+20, r20	; 0x14
   1922c:	55 8b       	std	Z+21, r21	; 0x15
   1922e:	66 8b       	std	Z+22, r22	; 0x16
   19230:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   19232:	40 8d       	ldd	r20, Z+24	; 0x18
   19234:	51 8d       	ldd	r21, Z+25	; 0x19
   19236:	62 8d       	ldd	r22, Z+26	; 0x1a
   19238:	73 8d       	ldd	r23, Z+27	; 0x1b
   1923a:	48 1b       	sub	r20, r24
   1923c:	59 0b       	sbc	r21, r25
   1923e:	6a 0b       	sbc	r22, r26
   19240:	7b 0b       	sbc	r23, r27
   19242:	40 8f       	std	Z+24, r20	; 0x18
   19244:	51 8f       	std	Z+25, r21	; 0x19
   19246:	62 8f       	std	Z+26, r22	; 0x1a
   19248:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   1924a:	24 8d       	ldd	r18, Z+28	; 0x1c
   1924c:	35 8d       	ldd	r19, Z+29	; 0x1d
   1924e:	2f 5f       	subi	r18, 0xFF	; 255
   19250:	3f 4f       	sbci	r19, 0xFF	; 255
   19252:	35 8f       	std	Z+29, r19	; 0x1d
   19254:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19256:	f5 01       	movw	r30, r10
   19258:	40 81       	ld	r20, Z
   1925a:	51 81       	ldd	r21, Z+1	; 0x01
   1925c:	62 81       	ldd	r22, Z+2	; 0x02
   1925e:	73 81       	ldd	r23, Z+3	; 0x03
   19260:	1c 01       	movw	r2, r24
   19262:	2d 01       	movw	r4, r26
   19264:	24 0e       	add	r2, r20
   19266:	35 1e       	adc	r3, r21
   19268:	46 1e       	adc	r4, r22
   1926a:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   1926c:	0f ef       	ldi	r16, 0xFF	; 255
   1926e:	1f ef       	ldi	r17, 0xFF	; 255
   19270:	a5 cf       	rjmp	.-182    	; 0x191bc <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19272:	f3 a2       	std	Z+35, r15	; 0x23
   19274:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19276:	8f ef       	ldi	r24, 0xFF	; 255
   19278:	9f ef       	ldi	r25, 0xFF	; 255
   1927a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1927c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1927e:	91 a3       	std	Z+33, r25	; 0x21
   19280:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19282:	8e 85       	ldd	r24, Y+14	; 0x0e
   19284:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19286:	2f 96       	adiw	r28, 0x0f	; 15
   19288:	0f b6       	in	r0, 0x3f	; 63
   1928a:	f8 94       	cli
   1928c:	de bf       	out	0x3e, r29	; 62
   1928e:	0f be       	out	0x3f, r0	; 63
   19290:	cd bf       	out	0x3d, r28	; 61
   19292:	df 91       	pop	r29
   19294:	cf 91       	pop	r28
   19296:	1f 91       	pop	r17
   19298:	0f 91       	pop	r16
   1929a:	ff 90       	pop	r15
   1929c:	ef 90       	pop	r14
   1929e:	df 90       	pop	r13
   192a0:	cf 90       	pop	r12
   192a2:	bf 90       	pop	r11
   192a4:	af 90       	pop	r10
   192a6:	8f 90       	pop	r8
   192a8:	7f 90       	pop	r7
   192aa:	6f 90       	pop	r6
   192ac:	5f 90       	pop	r5
   192ae:	4f 90       	pop	r4
   192b0:	3f 90       	pop	r3
   192b2:	2f 90       	pop	r2
   192b4:	08 95       	ret

000192b6 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   192b6:	a9 e2       	ldi	r26, 0x29	; 41
   192b8:	b1 e0       	ldi	r27, 0x01	; 1
   192ba:	e1 e6       	ldi	r30, 0x61	; 97
   192bc:	f9 ec       	ldi	r31, 0xC9	; 201
   192be:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   192c2:	4c 01       	movw	r8, r24
   192c4:	3b 01       	movw	r6, r22
   192c6:	19 01       	movw	r2, r18
   192c8:	2a 01       	movw	r4, r20
   192ca:	ca 5d       	subi	r28, 0xDA	; 218
   192cc:	de 4f       	sbci	r29, 0xFE	; 254
   192ce:	e8 82       	st	Y, r14
   192d0:	f9 82       	std	Y+1, r15	; 0x01
   192d2:	0a 83       	std	Y+2, r16	; 0x02
   192d4:	1b 83       	std	Y+3, r17	; 0x03
   192d6:	c6 52       	subi	r28, 0x26	; 38
   192d8:	d1 40       	sbci	r29, 0x01	; 1
   192da:	c2 5e       	subi	r28, 0xE2	; 226
   192dc:	de 4f       	sbci	r29, 0xFE	; 254
   192de:	a8 82       	st	Y, r10
   192e0:	b9 82       	std	Y+1, r11	; 0x01
   192e2:	ca 82       	std	Y+2, r12	; 0x02
   192e4:	db 82       	std	Y+3, r13	; 0x03
   192e6:	ce 51       	subi	r28, 0x1E	; 30
   192e8:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   192ea:	80 e0       	ldi	r24, 0x00	; 0
   192ec:	90 e0       	ldi	r25, 0x00	; 0
   192ee:	0e 94 32 36 	call	0x6c64	; 0x6c64 <time>
   192f2:	5b 01       	movw	r10, r22
   192f4:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   192f6:	64 e7       	ldi	r22, 0x74	; 116
   192f8:	70 e0       	ldi	r23, 0x00	; 0
   192fa:	80 e0       	ldi	r24, 0x00	; 0
   192fc:	90 e0       	ldi	r25, 0x00	; 0
   192fe:	0e 94 2e bd 	call	0x17a5c	; 0x17a5c <lif_calloc>
   19302:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19304:	89 2b       	or	r24, r25
   19306:	09 f4       	brne	.+2      	; 0x1930a <lif_create_volume+0x54>
   19308:	b6 c2       	rjmp	.+1388   	; 0x19876 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1930a:	c2 5e       	subi	r28, 0xE2	; 226
   1930c:	de 4f       	sbci	r29, 0xFE	; 254
   1930e:	28 81       	ld	r18, Y
   19310:	39 81       	ldd	r19, Y+1	; 0x01
   19312:	4a 81       	ldd	r20, Y+2	; 0x02
   19314:	5b 81       	ldd	r21, Y+3	; 0x03
   19316:	ce 51       	subi	r28, 0x1E	; 30
   19318:	d1 40       	sbci	r29, 0x01	; 1
   1931a:	ed b7       	in	r30, 0x3d	; 61
   1931c:	fe b7       	in	r31, 0x3e	; 62
   1931e:	20 8b       	std	Z+16, r18	; 0x10
   19320:	31 8b       	std	Z+17, r19	; 0x11
   19322:	42 8b       	std	Z+18, r20	; 0x12
   19324:	53 8b       	std	Z+19, r21	; 0x13
   19326:	ca 5d       	subi	r28, 0xDA	; 218
   19328:	de 4f       	sbci	r29, 0xFE	; 254
   1932a:	28 81       	ld	r18, Y
   1932c:	39 81       	ldd	r19, Y+1	; 0x01
   1932e:	4a 81       	ldd	r20, Y+2	; 0x02
   19330:	5b 81       	ldd	r21, Y+3	; 0x03
   19332:	c6 52       	subi	r28, 0x26	; 38
   19334:	d1 40       	sbci	r29, 0x01	; 1
   19336:	24 87       	std	Z+12, r18	; 0x0c
   19338:	35 87       	std	Z+13, r19	; 0x0d
   1933a:	46 87       	std	Z+14, r20	; 0x0e
   1933c:	57 87       	std	Z+15, r21	; 0x0f
   1933e:	20 86       	std	Z+8, r2	; 0x08
   19340:	31 86       	std	Z+9, r3	; 0x09
   19342:	42 86       	std	Z+10, r4	; 0x0a
   19344:	53 86       	std	Z+11, r5	; 0x0b
   19346:	77 82       	std	Z+7, r7	; 0x07
   19348:	66 82       	std	Z+6, r6	; 0x06
   1934a:	95 82       	std	Z+5, r9	; 0x05
   1934c:	84 82       	std	Z+4, r8	; 0x04
   1934e:	89 ee       	ldi	r24, 0xE9	; 233
   19350:	99 e3       	ldi	r25, 0x39	; 57
   19352:	a0 e0       	ldi	r26, 0x00	; 0
   19354:	81 83       	std	Z+1, r24	; 0x01
   19356:	92 83       	std	Z+2, r25	; 0x02
   19358:	a3 83       	std	Z+3, r26	; 0x03
   1935a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1935e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19362:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19366:	92 ff       	sbrs	r25, 2
   19368:	04 c0       	rjmp	.+8      	; 0x19372 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   1936a:	63 e2       	ldi	r22, 0x23	; 35
   1936c:	76 e1       	ldi	r23, 0x16	; 22
   1936e:	c7 01       	movw	r24, r14
   19370:	c9 d8       	rcall	.-3694   	; 0x18504 <lif_dump_vol>

    lif_image_clear(LIF);
   19372:	c7 01       	movw	r24, r14
   19374:	b2 d8       	rcall	.-3740   	; 0x184da <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19376:	80 e0       	ldi	r24, 0x00	; 0
   19378:	90 e8       	ldi	r25, 0x80	; 128
   1937a:	f7 01       	movw	r30, r14
   1937c:	95 a3       	std	Z+37, r25	; 0x25
   1937e:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19380:	46 e0       	ldi	r20, 0x06	; 6
   19382:	50 e0       	ldi	r21, 0x00	; 0
   19384:	b3 01       	movw	r22, r6
   19386:	c7 01       	movw	r24, r14
   19388:	86 96       	adiw	r24, 0x26	; 38
   1938a:	0e 94 71 bf 	call	0x17ee2	; 0x17ee2 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1938e:	f7 01       	movw	r30, r14
   19390:	25 a6       	std	Z+45, r2	; 0x2d
   19392:	36 a6       	std	Z+46, r3	; 0x2e
   19394:	47 a6       	std	Z+47, r4	; 0x2f
   19396:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19398:	ca 5d       	subi	r28, 0xDA	; 218
   1939a:	de 4f       	sbci	r29, 0xFE	; 254
   1939c:	28 81       	ld	r18, Y
   1939e:	39 81       	ldd	r19, Y+1	; 0x01
   193a0:	4a 81       	ldd	r20, Y+2	; 0x02
   193a2:	5b 81       	ldd	r21, Y+3	; 0x03
   193a4:	c6 52       	subi	r28, 0x26	; 38
   193a6:	d1 40       	sbci	r29, 0x01	; 1
   193a8:	25 ab       	std	Z+53, r18	; 0x35
   193aa:	36 ab       	std	Z+54, r19	; 0x36
   193ac:	47 ab       	std	Z+55, r20	; 0x37
   193ae:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   193b0:	80 e0       	ldi	r24, 0x00	; 0
   193b2:	90 e1       	ldi	r25, 0x10	; 16
   193b4:	92 ab       	std	Z+50, r25	; 0x32
   193b6:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   193b8:	fd 96       	adiw	r30, 0x3d	; 61
   193ba:	10 82       	st	Z, r1
   193bc:	11 82       	std	Z+1, r1	; 0x01
   193be:	12 82       	std	Z+2, r1	; 0x02
   193c0:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   193c2:	34 96       	adiw	r30, 0x04	; 4
   193c4:	10 82       	st	Z, r1
   193c6:	11 82       	std	Z+1, r1	; 0x01
   193c8:	12 82       	std	Z+2, r1	; 0x02
   193ca:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   193cc:	34 96       	adiw	r30, 0x04	; 4
   193ce:	10 82       	st	Z, r1
   193d0:	11 82       	std	Z+1, r1	; 0x01
   193d2:	12 82       	std	Z+2, r1	; 0x02
   193d4:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   193d6:	a7 01       	movw	r20, r14
   193d8:	47 5b       	subi	r20, 0xB7	; 183
   193da:	5f 4f       	sbci	r21, 0xFF	; 255
   193dc:	c6 01       	movw	r24, r12
   193de:	b5 01       	movw	r22, r10
   193e0:	0e 94 96 c1 	call	0x1832c	; 0x1832c <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   193e4:	c4 01       	movw	r24, r8
   193e6:	0e 94 79 bd 	call	0x17af2	; 0x17af2 <lif_stralloc>
   193ea:	d7 01       	movw	r26, r14
   193ec:	8d 93       	st	X+, r24
   193ee:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   193f0:	89 2b       	or	r24, r25
   193f2:	09 f4       	brne	.+2      	; 0x193f6 <lif_create_volume+0x140>
   193f4:	35 c2       	rjmp	.+1130   	; 0x19860 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   193f6:	c2 5e       	subi	r28, 0xE2	; 226
   193f8:	de 4f       	sbci	r29, 0xFE	; 254
   193fa:	28 81       	ld	r18, Y
   193fc:	39 81       	ldd	r19, Y+1	; 0x01
   193fe:	4a 81       	ldd	r20, Y+2	; 0x02
   19400:	5b 81       	ldd	r21, Y+3	; 0x03
   19402:	ce 51       	subi	r28, 0x1E	; 30
   19404:	d1 40       	sbci	r29, 0x01	; 1
   19406:	f7 01       	movw	r30, r14
   19408:	20 8b       	std	Z+16, r18	; 0x10
   1940a:	31 8b       	std	Z+17, r19	; 0x11
   1940c:	42 8b       	std	Z+18, r20	; 0x12
   1940e:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19410:	ca 5d       	subi	r28, 0xDA	; 218
   19412:	de 4f       	sbci	r29, 0xFE	; 254
   19414:	88 81       	ld	r24, Y
   19416:	99 81       	ldd	r25, Y+1	; 0x01
   19418:	aa 81       	ldd	r26, Y+2	; 0x02
   1941a:	bb 81       	ldd	r27, Y+3	; 0x03
   1941c:	c6 52       	subi	r28, 0x26	; 38
   1941e:	d1 40       	sbci	r29, 0x01	; 1
   19420:	82 0d       	add	r24, r2
   19422:	93 1d       	adc	r25, r3
   19424:	a4 1d       	adc	r26, r4
   19426:	b5 1d       	adc	r27, r5
   19428:	84 87       	std	Z+12, r24	; 0x0c
   1942a:	95 87       	std	Z+13, r25	; 0x0d
   1942c:	a6 87       	std	Z+14, r26	; 0x0e
   1942e:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19430:	82 0f       	add	r24, r18
   19432:	93 1f       	adc	r25, r19
   19434:	a4 1f       	adc	r26, r20
   19436:	b5 1f       	adc	r27, r21
   19438:	84 83       	std	Z+4, r24	; 0x04
   1943a:	95 83       	std	Z+5, r25	; 0x05
   1943c:	a6 83       	std	Z+6, r26	; 0x06
   1943e:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19440:	ba 2f       	mov	r27, r26
   19442:	a9 2f       	mov	r26, r25
   19444:	98 2f       	mov	r25, r24
   19446:	88 27       	eor	r24, r24
   19448:	80 87       	std	Z+8, r24	; 0x08
   1944a:	91 87       	std	Z+9, r25	; 0x09
   1944c:	a2 87       	std	Z+10, r26	; 0x0a
   1944e:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19450:	20 8f       	std	Z+24, r18	; 0x18
   19452:	31 8f       	std	Z+25, r19	; 0x19
   19454:	42 8f       	std	Z+26, r20	; 0x1a
   19456:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19458:	14 8a       	std	Z+20, r1	; 0x14
   1945a:	15 8a       	std	Z+21, r1	; 0x15
   1945c:	16 8a       	std	Z+22, r1	; 0x16
   1945e:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19460:	15 8e       	std	Z+29, r1	; 0x1d
   19462:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19464:	17 8e       	std	Z+31, r1	; 0x1f
   19466:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19468:	11 a2       	std	Z+33, r1	; 0x21
   1946a:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1946c:	13 a2       	std	Z+35, r1	; 0x23
   1946e:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19470:	61 2c       	mov	r6, r1
   19472:	77 24       	eor	r7, r7
   19474:	73 94       	inc	r7
   19476:	9e 01       	movw	r18, r28
   19478:	2c 5e       	subi	r18, 0xEC	; 236
   1947a:	3f 4f       	sbci	r19, 0xFF	; 255
   1947c:	49 01       	movw	r8, r18
   1947e:	d9 01       	movw	r26, r18
   19480:	f3 01       	movw	r30, r6
   19482:	1d 92       	st	X+, r1
   19484:	31 97       	sbiw	r30, 0x01	; 1
   19486:	e9 f7       	brne	.-6      	; 0x19482 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19488:	b9 01       	movw	r22, r18
   1948a:	c7 01       	movw	r24, r14
   1948c:	0e 94 ae bf 	call	0x17f5c	; 0x17f5c <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19490:	66 e1       	ldi	r22, 0x16	; 22
   19492:	79 e0       	ldi	r23, 0x09	; 9
   19494:	d7 01       	movw	r26, r14
   19496:	8d 91       	ld	r24, X+
   19498:	9c 91       	ld	r25, X
   1949a:	0e 94 98 bd 	call	0x17b30	; 0x17b30 <lif_open>
   1949e:	f7 01       	movw	r30, r14
   194a0:	93 83       	std	Z+3, r25	; 0x03
   194a2:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   194a4:	89 2b       	or	r24, r25
   194a6:	09 f4       	brne	.+2      	; 0x194aa <lif_create_volume+0x1f4>
   194a8:	db c1       	rjmp	.+950    	; 0x19860 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   194aa:	00 e0       	ldi	r16, 0x00	; 0
   194ac:	11 e0       	ldi	r17, 0x01	; 1
   194ae:	20 e0       	ldi	r18, 0x00	; 0
   194b0:	30 e0       	ldi	r19, 0x00	; 0
   194b2:	a9 01       	movw	r20, r18
   194b4:	b4 01       	movw	r22, r8
   194b6:	c7 01       	movw	r24, r14
   194b8:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
   194bc:	9c 01       	movw	r18, r24
   194be:	99 0f       	add	r25, r25
   194c0:	44 0b       	sbc	r20, r20
   194c2:	55 0b       	sbc	r21, r21
   194c4:	ca 5e       	subi	r28, 0xEA	; 234
   194c6:	de 4f       	sbci	r29, 0xFE	; 254
   194c8:	28 83       	st	Y, r18
   194ca:	39 83       	std	Y+1, r19	; 0x01
   194cc:	4a 83       	std	Y+2, r20	; 0x02
   194ce:	5b 83       	std	Y+3, r21	; 0x03
   194d0:	c6 51       	subi	r28, 0x16	; 22
   194d2:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   194d4:	2f 3f       	cpi	r18, 0xFF	; 255
   194d6:	31 05       	cpc	r19, r1
   194d8:	41 05       	cpc	r20, r1
   194da:	51 05       	cpc	r21, r1
   194dc:	09 f0       	breq	.+2      	; 0x194e0 <lif_create_volume+0x22a>
   194de:	0c f4       	brge	.+2      	; 0x194e2 <lif_create_volume+0x22c>
   194e0:	bf c1       	rjmp	.+894    	; 0x19860 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   194e2:	d4 01       	movw	r26, r8
   194e4:	f3 01       	movw	r30, r6
   194e6:	1d 92       	st	X+, r1
   194e8:	31 97       	sbiw	r30, 0x01	; 1
   194ea:	e9 f7       	brne	.-6      	; 0x194e6 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   194ec:	21 e0       	ldi	r18, 0x01	; 1
   194ee:	30 e0       	ldi	r19, 0x00	; 0
   194f0:	40 e0       	ldi	r20, 0x00	; 0
   194f2:	50 e0       	ldi	r21, 0x00	; 0
   194f4:	c6 5e       	subi	r28, 0xE6	; 230
   194f6:	de 4f       	sbci	r29, 0xFE	; 254
   194f8:	28 83       	st	Y, r18
   194fa:	39 83       	std	Y+1, r19	; 0x01
   194fc:	4a 83       	std	Y+2, r20	; 0x02
   194fe:	5b 83       	std	Y+3, r21	; 0x03
   19500:	ca 51       	subi	r28, 0x1A	; 26
   19502:	d1 40       	sbci	r29, 0x01	; 1
   19504:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19506:	8c ed       	ldi	r24, 0xDC	; 220
   19508:	99 e3       	ldi	r25, 0x39	; 57
   1950a:	3c 01       	movw	r6, r24
   1950c:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1950e:	c6 5e       	subi	r28, 0xE6	; 230
   19510:	de 4f       	sbci	r29, 0xFE	; 254
   19512:	88 81       	ld	r24, Y
   19514:	99 81       	ldd	r25, Y+1	; 0x01
   19516:	aa 81       	ldd	r26, Y+2	; 0x02
   19518:	bb 81       	ldd	r27, Y+3	; 0x03
   1951a:	ca 51       	subi	r28, 0x1A	; 26
   1951c:	d1 40       	sbci	r29, 0x01	; 1
   1951e:	82 15       	cp	r24, r2
   19520:	93 05       	cpc	r25, r3
   19522:	a4 05       	cpc	r26, r4
   19524:	b5 05       	cpc	r27, r5
   19526:	0c f0       	brlt	.+2      	; 0x1952a <lif_create_volume+0x274>
   19528:	55 c0       	rjmp	.+170    	; 0x195d4 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1952a:	00 e0       	ldi	r16, 0x00	; 0
   1952c:	11 e0       	ldi	r17, 0x01	; 1
   1952e:	ca 5e       	subi	r28, 0xEA	; 234
   19530:	de 4f       	sbci	r29, 0xFE	; 254
   19532:	28 81       	ld	r18, Y
   19534:	39 81       	ldd	r19, Y+1	; 0x01
   19536:	4a 81       	ldd	r20, Y+2	; 0x02
   19538:	5b 81       	ldd	r21, Y+3	; 0x03
   1953a:	c6 51       	subi	r28, 0x16	; 22
   1953c:	d1 40       	sbci	r29, 0x01	; 1
   1953e:	b6 01       	movw	r22, r12
   19540:	c7 01       	movw	r24, r14
   19542:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
   19546:	09 2e       	mov	r0, r25
   19548:	00 0c       	add	r0, r0
   1954a:	aa 0b       	sbc	r26, r26
   1954c:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1954e:	8f 3f       	cpi	r24, 0xFF	; 255
   19550:	91 05       	cpc	r25, r1
   19552:	a1 05       	cpc	r26, r1
   19554:	b1 05       	cpc	r27, r1
   19556:	09 f0       	breq	.+2      	; 0x1955a <lif_create_volume+0x2a4>
   19558:	0c f4       	brge	.+2      	; 0x1955c <lif_create_volume+0x2a6>
   1955a:	82 c1       	rjmp	.+772    	; 0x19860 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1955c:	ca 5e       	subi	r28, 0xEA	; 234
   1955e:	de 4f       	sbci	r29, 0xFE	; 254
   19560:	28 81       	ld	r18, Y
   19562:	39 81       	ldd	r19, Y+1	; 0x01
   19564:	4a 81       	ldd	r20, Y+2	; 0x02
   19566:	5b 81       	ldd	r21, Y+3	; 0x03
   19568:	c6 51       	subi	r28, 0x16	; 22
   1956a:	d1 40       	sbci	r29, 0x01	; 1
   1956c:	28 0f       	add	r18, r24
   1956e:	39 1f       	adc	r19, r25
   19570:	4a 1f       	adc	r20, r26
   19572:	5b 1f       	adc	r21, r27
   19574:	ca 5e       	subi	r28, 0xEA	; 234
   19576:	de 4f       	sbci	r29, 0xFE	; 254
   19578:	28 83       	st	Y, r18
   1957a:	39 83       	std	Y+1, r19	; 0x01
   1957c:	4a 83       	std	Y+2, r20	; 0x02
   1957e:	5b 83       	std	Y+3, r21	; 0x03
   19580:	c6 51       	subi	r28, 0x16	; 22
   19582:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19584:	c6 5e       	subi	r28, 0xE6	; 230
   19586:	de 4f       	sbci	r29, 0xFE	; 254
   19588:	88 81       	ld	r24, Y
   1958a:	99 81       	ldd	r25, Y+1	; 0x01
   1958c:	aa 81       	ldd	r26, Y+2	; 0x02
   1958e:	bb 81       	ldd	r27, Y+3	; 0x03
   19590:	ca 51       	subi	r28, 0x1A	; 26
   19592:	d1 40       	sbci	r29, 0x01	; 1
   19594:	ed b7       	in	r30, 0x3d	; 61
   19596:	fe b7       	in	r31, 0x3e	; 62
   19598:	84 83       	std	Z+4, r24	; 0x04
   1959a:	95 83       	std	Z+5, r25	; 0x05
   1959c:	a6 83       	std	Z+6, r26	; 0x06
   1959e:	b7 83       	std	Z+7, r27	; 0x07
   195a0:	61 82       	std	Z+1, r6	; 0x01
   195a2:	72 82       	std	Z+2, r7	; 0x02
   195a4:	83 82       	std	Z+3, r8	; 0x03
   195a6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   195aa:	c6 5e       	subi	r28, 0xE6	; 230
   195ac:	de 4f       	sbci	r29, 0xFE	; 254
   195ae:	28 81       	ld	r18, Y
   195b0:	39 81       	ldd	r19, Y+1	; 0x01
   195b2:	4a 81       	ldd	r20, Y+2	; 0x02
   195b4:	5b 81       	ldd	r21, Y+3	; 0x03
   195b6:	ca 51       	subi	r28, 0x1A	; 26
   195b8:	d1 40       	sbci	r29, 0x01	; 1
   195ba:	2f 5f       	subi	r18, 0xFF	; 255
   195bc:	3f 4f       	sbci	r19, 0xFF	; 255
   195be:	4f 4f       	sbci	r20, 0xFF	; 255
   195c0:	5f 4f       	sbci	r21, 0xFF	; 255
   195c2:	c6 5e       	subi	r28, 0xE6	; 230
   195c4:	de 4f       	sbci	r29, 0xFE	; 254
   195c6:	28 83       	st	Y, r18
   195c8:	39 83       	std	Y+1, r19	; 0x01
   195ca:	4a 83       	std	Y+2, r20	; 0x02
   195cc:	5b 83       	std	Y+3, r21	; 0x03
   195ce:	ca 51       	subi	r28, 0x1A	; 26
   195d0:	d1 40       	sbci	r29, 0x01	; 1
   195d2:	9d cf       	rjmp	.-198    	; 0x1950e <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   195d4:	c7 01       	movw	r24, r14
   195d6:	0e 94 73 c2 	call	0x184e6	; 0x184e6 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   195da:	8f ef       	ldi	r24, 0xFF	; 255
   195dc:	9f ef       	ldi	r25, 0xFF	; 255
   195de:	f7 01       	movw	r30, r14
   195e0:	e6 5a       	subi	r30, 0xA6	; 166
   195e2:	ff 4f       	sbci	r31, 0xFF	; 255
   195e4:	91 83       	std	Z+1, r25	; 0x01
   195e6:	80 83       	st	Z, r24
   195e8:	46 01       	movw	r8, r12
   195ea:	6e 01       	movw	r12, r28
   195ec:	9c ee       	ldi	r25, 0xEC	; 236
   195ee:	c9 1a       	sub	r12, r25
   195f0:	9e ef       	ldi	r25, 0xFE	; 254
   195f2:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   195f4:	b4 01       	movw	r22, r8
   195f6:	c7 01       	movw	r24, r14
   195f8:	0e 94 ba c0 	call	0x18174	; 0x18174 <lif_dir2str>
   195fc:	a0 e2       	ldi	r26, 0x20	; 32
   195fe:	8a 0e       	add	r8, r26
   19600:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19602:	c8 14       	cp	r12, r8
   19604:	d9 04       	cpc	r13, r9
   19606:	b1 f7       	brne	.-20     	; 0x195f4 <lif_create_volume+0x33e>
   19608:	a1 2c       	mov	r10, r1
   1960a:	b1 2c       	mov	r11, r1
   1960c:	65 01       	movw	r12, r10
   1960e:	fe 01       	movw	r30, r28
   19610:	74 96       	adiw	r30, 0x14	; 20
   19612:	cc 5e       	subi	r28, 0xEC	; 236
   19614:	de 4f       	sbci	r29, 0xFE	; 254
   19616:	f9 83       	std	Y+1, r31	; 0x01
   19618:	e8 83       	st	Y, r30
   1961a:	c4 51       	subi	r28, 0x14	; 20
   1961c:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1961e:	84 e6       	ldi	r24, 0x64	; 100
   19620:	28 2e       	mov	r2, r24
   19622:	31 2c       	mov	r3, r1
   19624:	41 2c       	mov	r4, r1
   19626:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19628:	8f ec       	ldi	r24, 0xCF	; 207
   1962a:	99 e3       	ldi	r25, 0x39	; 57
   1962c:	3c 01       	movw	r6, r24
   1962e:	81 2c       	mov	r8, r1
   19630:	c6 5e       	subi	r28, 0xE6	; 230
   19632:	de 4f       	sbci	r29, 0xFE	; 254
   19634:	28 81       	ld	r18, Y
   19636:	39 81       	ldd	r19, Y+1	; 0x01
   19638:	4a 81       	ldd	r20, Y+2	; 0x02
   1963a:	5b 81       	ldd	r21, Y+3	; 0x03
   1963c:	ca 51       	subi	r28, 0x1A	; 26
   1963e:	d1 40       	sbci	r29, 0x01	; 1
   19640:	2a 0d       	add	r18, r10
   19642:	3b 1d       	adc	r19, r11
   19644:	4c 1d       	adc	r20, r12
   19646:	5d 1d       	adc	r21, r13
   19648:	ce 5d       	subi	r28, 0xDE	; 222
   1964a:	de 4f       	sbci	r29, 0xFE	; 254
   1964c:	28 83       	st	Y, r18
   1964e:	39 83       	std	Y+1, r19	; 0x01
   19650:	4a 83       	std	Y+2, r20	; 0x02
   19652:	5b 83       	std	Y+3, r21	; 0x03
   19654:	c2 52       	subi	r28, 0x22	; 34
   19656:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19658:	ca 5d       	subi	r28, 0xDA	; 218
   1965a:	de 4f       	sbci	r29, 0xFE	; 254
   1965c:	88 81       	ld	r24, Y
   1965e:	99 81       	ldd	r25, Y+1	; 0x01
   19660:	aa 81       	ldd	r26, Y+2	; 0x02
   19662:	bb 81       	ldd	r27, Y+3	; 0x03
   19664:	c6 52       	subi	r28, 0x26	; 38
   19666:	d1 40       	sbci	r29, 0x01	; 1
   19668:	a8 16       	cp	r10, r24
   1966a:	b9 06       	cpc	r11, r25
   1966c:	ca 06       	cpc	r12, r26
   1966e:	db 06       	cpc	r13, r27
   19670:	0c f0       	brlt	.+2      	; 0x19674 <lif_create_volume+0x3be>
   19672:	58 c0       	rjmp	.+176    	; 0x19724 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19674:	00 e0       	ldi	r16, 0x00	; 0
   19676:	11 e0       	ldi	r17, 0x01	; 1
   19678:	ca 5e       	subi	r28, 0xEA	; 234
   1967a:	de 4f       	sbci	r29, 0xFE	; 254
   1967c:	28 81       	ld	r18, Y
   1967e:	39 81       	ldd	r19, Y+1	; 0x01
   19680:	4a 81       	ldd	r20, Y+2	; 0x02
   19682:	5b 81       	ldd	r21, Y+3	; 0x03
   19684:	c6 51       	subi	r28, 0x16	; 22
   19686:	d1 40       	sbci	r29, 0x01	; 1
   19688:	be 01       	movw	r22, r28
   1968a:	6c 5e       	subi	r22, 0xEC	; 236
   1968c:	7f 4f       	sbci	r23, 0xFF	; 255
   1968e:	c7 01       	movw	r24, r14
   19690:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
   19694:	09 2e       	mov	r0, r25
   19696:	00 0c       	add	r0, r0
   19698:	aa 0b       	sbc	r26, r26
   1969a:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1969c:	8f 3f       	cpi	r24, 0xFF	; 255
   1969e:	91 05       	cpc	r25, r1
   196a0:	a1 05       	cpc	r26, r1
   196a2:	b1 05       	cpc	r27, r1
   196a4:	09 f0       	breq	.+2      	; 0x196a8 <lif_create_volume+0x3f2>
   196a6:	0c f4       	brge	.+2      	; 0x196aa <lif_create_volume+0x3f4>
   196a8:	db c0       	rjmp	.+438    	; 0x19860 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   196aa:	ca 5e       	subi	r28, 0xEA	; 234
   196ac:	de 4f       	sbci	r29, 0xFE	; 254
   196ae:	28 81       	ld	r18, Y
   196b0:	39 81       	ldd	r19, Y+1	; 0x01
   196b2:	4a 81       	ldd	r20, Y+2	; 0x02
   196b4:	5b 81       	ldd	r21, Y+3	; 0x03
   196b6:	c6 51       	subi	r28, 0x16	; 22
   196b8:	d1 40       	sbci	r29, 0x01	; 1
   196ba:	28 0f       	add	r18, r24
   196bc:	39 1f       	adc	r19, r25
   196be:	4a 1f       	adc	r20, r26
   196c0:	5b 1f       	adc	r21, r27
   196c2:	ca 5e       	subi	r28, 0xEA	; 234
   196c4:	de 4f       	sbci	r29, 0xFE	; 254
   196c6:	28 83       	st	Y, r18
   196c8:	39 83       	std	Y+1, r19	; 0x01
   196ca:	4a 83       	std	Y+2, r20	; 0x02
   196cc:	5b 83       	std	Y+3, r21	; 0x03
   196ce:	c6 51       	subi	r28, 0x16	; 22
   196d0:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   196d2:	ce 5d       	subi	r28, 0xDE	; 222
   196d4:	de 4f       	sbci	r29, 0xFE	; 254
   196d6:	68 81       	ld	r22, Y
   196d8:	79 81       	ldd	r23, Y+1	; 0x01
   196da:	8a 81       	ldd	r24, Y+2	; 0x02
   196dc:	9b 81       	ldd	r25, Y+3	; 0x03
   196de:	c2 52       	subi	r28, 0x22	; 34
   196e0:	d1 40       	sbci	r29, 0x01	; 1
   196e2:	a2 01       	movw	r20, r4
   196e4:	91 01       	movw	r18, r2
   196e6:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
   196ea:	67 2b       	or	r22, r23
   196ec:	68 2b       	or	r22, r24
   196ee:	69 2b       	or	r22, r25
   196f0:	99 f4       	brne	.+38     	; 0x19718 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   196f2:	ce 5d       	subi	r28, 0xDE	; 222
   196f4:	de 4f       	sbci	r29, 0xFE	; 254
   196f6:	88 81       	ld	r24, Y
   196f8:	99 81       	ldd	r25, Y+1	; 0x01
   196fa:	aa 81       	ldd	r26, Y+2	; 0x02
   196fc:	bb 81       	ldd	r27, Y+3	; 0x03
   196fe:	c2 52       	subi	r28, 0x22	; 34
   19700:	d1 40       	sbci	r29, 0x01	; 1
   19702:	ed b7       	in	r30, 0x3d	; 61
   19704:	fe b7       	in	r31, 0x3e	; 62
   19706:	84 83       	std	Z+4, r24	; 0x04
   19708:	95 83       	std	Z+5, r25	; 0x05
   1970a:	a6 83       	std	Z+6, r26	; 0x06
   1970c:	b7 83       	std	Z+7, r27	; 0x07
   1970e:	61 82       	std	Z+1, r6	; 0x01
   19710:	72 82       	std	Z+2, r7	; 0x02
   19712:	83 82       	std	Z+3, r8	; 0x03
   19714:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19718:	ff ef       	ldi	r31, 0xFF	; 255
   1971a:	af 1a       	sub	r10, r31
   1971c:	bf 0a       	sbc	r11, r31
   1971e:	cf 0a       	sbc	r12, r31
   19720:	df 0a       	sbc	r13, r31
   19722:	86 cf       	rjmp	.-244    	; 0x19630 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19724:	80 e0       	ldi	r24, 0x00	; 0
   19726:	91 e0       	ldi	r25, 0x01	; 1
   19728:	cc 5e       	subi	r28, 0xEC	; 236
   1972a:	de 4f       	sbci	r29, 0xFE	; 254
   1972c:	a8 81       	ld	r26, Y
   1972e:	b9 81       	ldd	r27, Y+1	; 0x01
   19730:	c4 51       	subi	r28, 0x14	; 20
   19732:	d1 40       	sbci	r29, 0x01	; 1
   19734:	fc 01       	movw	r30, r24
   19736:	1d 92       	st	X+, r1
   19738:	31 97       	sbiw	r30, 0x01	; 1
   1973a:	e9 f7       	brne	.-6      	; 0x19736 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   1973c:	81 2c       	mov	r8, r1
   1973e:	91 2c       	mov	r9, r1
   19740:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19742:	82 ec       	ldi	r24, 0xC2	; 194
   19744:	99 e3       	ldi	r25, 0x39	; 57
   19746:	9c 01       	movw	r18, r24
   19748:	40 e0       	ldi	r20, 0x00	; 0
   1974a:	c6 5e       	subi	r28, 0xE6	; 230
   1974c:	de 4f       	sbci	r29, 0xFE	; 254
   1974e:	28 83       	st	Y, r18
   19750:	39 83       	std	Y+1, r19	; 0x01
   19752:	4a 83       	std	Y+2, r20	; 0x02
   19754:	ca 51       	subi	r28, 0x1A	; 26
   19756:	d1 40       	sbci	r29, 0x01	; 1
   19758:	ce 5d       	subi	r28, 0xDE	; 222
   1975a:	de 4f       	sbci	r29, 0xFE	; 254
   1975c:	48 80       	ld	r4, Y
   1975e:	59 80       	ldd	r5, Y+1	; 0x01
   19760:	6a 80       	ldd	r6, Y+2	; 0x02
   19762:	7b 80       	ldd	r7, Y+3	; 0x03
   19764:	c2 52       	subi	r28, 0x22	; 34
   19766:	d1 40       	sbci	r29, 0x01	; 1
   19768:	48 0c       	add	r4, r8
   1976a:	59 1c       	adc	r5, r9
   1976c:	6a 1c       	adc	r6, r10
   1976e:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19770:	c2 5e       	subi	r28, 0xE2	; 226
   19772:	de 4f       	sbci	r29, 0xFE	; 254
   19774:	28 81       	ld	r18, Y
   19776:	39 81       	ldd	r19, Y+1	; 0x01
   19778:	4a 81       	ldd	r20, Y+2	; 0x02
   1977a:	5b 81       	ldd	r21, Y+3	; 0x03
   1977c:	ce 51       	subi	r28, 0x1E	; 30
   1977e:	d1 40       	sbci	r29, 0x01	; 1
   19780:	82 16       	cp	r8, r18
   19782:	93 06       	cpc	r9, r19
   19784:	a4 06       	cpc	r10, r20
   19786:	b5 06       	cpc	r11, r21
   19788:	0c f0       	brlt	.+2      	; 0x1978c <lif_create_volume+0x4d6>
   1978a:	53 c0       	rjmp	.+166    	; 0x19832 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1978c:	00 e0       	ldi	r16, 0x00	; 0
   1978e:	11 e0       	ldi	r17, 0x01	; 1
   19790:	ca 5e       	subi	r28, 0xEA	; 234
   19792:	de 4f       	sbci	r29, 0xFE	; 254
   19794:	28 81       	ld	r18, Y
   19796:	39 81       	ldd	r19, Y+1	; 0x01
   19798:	4a 81       	ldd	r20, Y+2	; 0x02
   1979a:	5b 81       	ldd	r21, Y+3	; 0x03
   1979c:	c6 51       	subi	r28, 0x16	; 22
   1979e:	d1 40       	sbci	r29, 0x01	; 1
   197a0:	be 01       	movw	r22, r28
   197a2:	6c 5e       	subi	r22, 0xEC	; 236
   197a4:	7f 4f       	sbci	r23, 0xFF	; 255
   197a6:	c7 01       	movw	r24, r14
   197a8:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
   197ac:	09 2e       	mov	r0, r25
   197ae:	00 0c       	add	r0, r0
   197b0:	aa 0b       	sbc	r26, r26
   197b2:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   197b4:	8f 3f       	cpi	r24, 0xFF	; 255
   197b6:	91 05       	cpc	r25, r1
   197b8:	a1 05       	cpc	r26, r1
   197ba:	b1 05       	cpc	r27, r1
   197bc:	09 f0       	breq	.+2      	; 0x197c0 <lif_create_volume+0x50a>
   197be:	0c f4       	brge	.+2      	; 0x197c2 <lif_create_volume+0x50c>
   197c0:	4f c0       	rjmp	.+158    	; 0x19860 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   197c2:	ca 5e       	subi	r28, 0xEA	; 234
   197c4:	de 4f       	sbci	r29, 0xFE	; 254
   197c6:	28 81       	ld	r18, Y
   197c8:	39 81       	ldd	r19, Y+1	; 0x01
   197ca:	4a 81       	ldd	r20, Y+2	; 0x02
   197cc:	5b 81       	ldd	r21, Y+3	; 0x03
   197ce:	c6 51       	subi	r28, 0x16	; 22
   197d0:	d1 40       	sbci	r29, 0x01	; 1
   197d2:	28 0f       	add	r18, r24
   197d4:	39 1f       	adc	r19, r25
   197d6:	4a 1f       	adc	r20, r26
   197d8:	5b 1f       	adc	r21, r27
   197da:	ca 5e       	subi	r28, 0xEA	; 234
   197dc:	de 4f       	sbci	r29, 0xFE	; 254
   197de:	28 83       	st	Y, r18
   197e0:	39 83       	std	Y+1, r19	; 0x01
   197e2:	4a 83       	std	Y+2, r20	; 0x02
   197e4:	5b 83       	std	Y+3, r21	; 0x03
   197e6:	c6 51       	subi	r28, 0x16	; 22
   197e8:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   197ea:	c3 01       	movw	r24, r6
   197ec:	b2 01       	movw	r22, r4
   197ee:	24 e6       	ldi	r18, 0x64	; 100
   197f0:	30 e0       	ldi	r19, 0x00	; 0
   197f2:	40 e0       	ldi	r20, 0x00	; 0
   197f4:	50 e0       	ldi	r21, 0x00	; 0
   197f6:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
   197fa:	67 2b       	or	r22, r23
   197fc:	68 2b       	or	r22, r24
   197fe:	69 2b       	or	r22, r25
   19800:	91 f4       	brne	.+36     	; 0x19826 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19802:	ed b7       	in	r30, 0x3d	; 61
   19804:	fe b7       	in	r31, 0x3e	; 62
   19806:	44 82       	std	Z+4, r4	; 0x04
   19808:	55 82       	std	Z+5, r5	; 0x05
   1980a:	66 82       	std	Z+6, r6	; 0x06
   1980c:	77 82       	std	Z+7, r7	; 0x07
   1980e:	c6 5e       	subi	r28, 0xE6	; 230
   19810:	de 4f       	sbci	r29, 0xFE	; 254
   19812:	28 81       	ld	r18, Y
   19814:	39 81       	ldd	r19, Y+1	; 0x01
   19816:	4a 81       	ldd	r20, Y+2	; 0x02
   19818:	ca 51       	subi	r28, 0x1A	; 26
   1981a:	d1 40       	sbci	r29, 0x01	; 1
   1981c:	21 83       	std	Z+1, r18	; 0x01
   1981e:	32 83       	std	Z+2, r19	; 0x02
   19820:	43 83       	std	Z+3, r20	; 0x03
   19822:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19826:	ff ef       	ldi	r31, 0xFF	; 255
   19828:	8f 1a       	sub	r8, r31
   1982a:	9f 0a       	sbc	r9, r31
   1982c:	af 0a       	sbc	r10, r31
   1982e:	bf 0a       	sbc	r11, r31
   19830:	93 cf       	rjmp	.-218    	; 0x19758 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19832:	ed b7       	in	r30, 0x3d	; 61
   19834:	fe b7       	in	r31, 0x3e	; 62
   19836:	44 82       	std	Z+4, r4	; 0x04
   19838:	55 82       	std	Z+5, r5	; 0x05
   1983a:	66 82       	std	Z+6, r6	; 0x06
   1983c:	77 82       	std	Z+7, r7	; 0x07
   1983e:	85 eb       	ldi	r24, 0xB5	; 181
   19840:	99 e3       	ldi	r25, 0x39	; 57
   19842:	a0 e0       	ldi	r26, 0x00	; 0
   19844:	81 83       	std	Z+1, r24	; 0x01
   19846:	92 83       	std	Z+2, r25	; 0x02
   19848:	a3 83       	std	Z+3, r26	; 0x03
   1984a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1984e:	8f ef       	ldi	r24, 0xFF	; 255
   19850:	9f ef       	ldi	r25, 0xFF	; 255
   19852:	f7 01       	movw	r30, r14
   19854:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19856:	80 a3       	std	Z+32, r24	; 0x20
   19858:	c7 01       	movw	r24, r14
   1985a:	1a d8       	rcall	.-4044   	; 0x18890 <lif_check_volume>
   1985c:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1985e:	19 f4       	brne	.+6      	; 0x19866 <lif_create_volume+0x5b0>
   19860:	c7 01       	movw	r24, r14
   19862:	b6 da       	rcall	.-2708   	; 0x18dd0 <lif_close_volume>
   19864:	08 c0       	rjmp	.+16     	; 0x19876 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19866:	c7 01       	movw	r24, r14
   19868:	1c dc       	rcall	.-1992   	; 0x190a2 <lif_updatefree>
   1986a:	6c 01       	movw	r12, r24
   1986c:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1986e:	31 f4       	brne	.+12     	; 0x1987c <lif_create_volume+0x5c6>
   19870:	c7 01       	movw	r24, r14
   19872:	ae da       	rcall	.-2724   	; 0x18dd0 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19874:	04 c0       	rjmp	.+8      	; 0x1987e <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19876:	c1 2c       	mov	r12, r1
   19878:	d1 2c       	mov	r13, r1
   1987a:	01 c0       	rjmp	.+2      	; 0x1987e <lif_create_volume+0x5c8>
   1987c:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1987e:	c6 01       	movw	r24, r12
   19880:	c7 5d       	subi	r28, 0xD7	; 215
   19882:	de 4f       	sbci	r29, 0xFE	; 254
   19884:	e2 e1       	ldi	r30, 0x12	; 18
   19886:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0001988a <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1988a:	ad e1       	ldi	r26, 0x1D	; 29
   1988c:	b0 e0       	ldi	r27, 0x00	; 0
   1988e:	eb e4       	ldi	r30, 0x4B	; 75
   19890:	fc ec       	ldi	r31, 0xCC	; 204
   19892:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   19896:	9d 8f       	std	Y+29, r25	; 0x1d
   19898:	8c 8f       	std	Y+28, r24	; 0x1c
   1989a:	4a 01       	movw	r8, r20
   1989c:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1989e:	fc 01       	movw	r30, r24
   198a0:	c4 84       	ldd	r12, Z+12	; 0x0c
   198a2:	d5 84       	ldd	r13, Z+13	; 0x0d
   198a4:	e6 84       	ldd	r14, Z+14	; 0x0e
   198a6:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   198a8:	fc db       	rcall	.-2056   	; 0x190a2 <lif_updatefree>
   198aa:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198ac:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198ae:	40 8d       	ldd	r20, Z+24	; 0x18
   198b0:	51 8d       	ldd	r21, Z+25	; 0x19
   198b2:	62 8d       	ldd	r22, Z+26	; 0x1a
   198b4:	73 8d       	ldd	r23, Z+27	; 0x1b
   198b6:	89 2b       	or	r24, r25
   198b8:	99 f4       	brne	.+38     	; 0x198e0 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   198ba:	ed b7       	in	r30, 0x3d	; 61
   198bc:	fe b7       	in	r31, 0x3e	; 62
   198be:	80 86       	std	Z+8, r8	; 0x08
   198c0:	91 86       	std	Z+9, r9	; 0x09
   198c2:	a2 86       	std	Z+10, r10	; 0x0a
   198c4:	b3 86       	std	Z+11, r11	; 0x0b
   198c6:	44 83       	std	Z+4, r20	; 0x04
   198c8:	55 83       	std	Z+5, r21	; 0x05
   198ca:	66 83       	std	Z+6, r22	; 0x06
   198cc:	77 83       	std	Z+7, r23	; 0x07
   198ce:	86 ed       	ldi	r24, 0xD6	; 214
   198d0:	98 e3       	ldi	r25, 0x38	; 56
   198d2:	a0 e0       	ldi	r26, 0x00	; 0
   198d4:	81 83       	std	Z+1, r24	; 0x01
   198d6:	92 83       	std	Z+2, r25	; 0x02
   198d8:	a3 83       	std	Z+3, r26	; 0x03
   198da:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   198de:	2f c1       	rjmp	.+606    	; 0x19b3e <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   198e0:	48 15       	cp	r20, r8
   198e2:	59 05       	cpc	r21, r9
   198e4:	6a 05       	cpc	r22, r10
   198e6:	7b 05       	cpc	r23, r11
   198e8:	c4 f0       	brlt	.+48     	; 0x1991a <lif_newdir+0x90>
   198ea:	44 24       	eor	r4, r4
   198ec:	43 94       	inc	r4
   198ee:	51 2c       	mov	r5, r1
   198f0:	61 2c       	mov	r6, r1
   198f2:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   198f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   198f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   198f8:	86 5a       	subi	r24, 0xA6	; 166
   198fa:	9f 4f       	sbci	r25, 0xFF	; 255
   198fc:	9d 8b       	std	Y+21, r25	; 0x15
   198fe:	8c 8b       	std	Y+20, r24	; 0x14
   19900:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19902:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19904:	e4 5a       	subi	r30, 0xA4	; 164
   19906:	ff 4f       	sbci	r31, 0xFF	; 255
   19908:	fb 8b       	std	Y+19, r31	; 0x13
   1990a:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1990c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1990e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19910:	80 5a       	subi	r24, 0xA0	; 160
   19912:	9f 4f       	sbci	r25, 0xFF	; 255
   19914:	9f 8b       	std	Y+23, r25	; 0x17
   19916:	8e 8b       	std	Y+22, r24	; 0x16
   19918:	21 c0       	rjmp	.+66     	; 0x1995c <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1991a:	ed b7       	in	r30, 0x3d	; 61
   1991c:	fe b7       	in	r31, 0x3e	; 62
   1991e:	44 83       	std	Z+4, r20	; 0x04
   19920:	55 83       	std	Z+5, r21	; 0x05
   19922:	66 83       	std	Z+6, r22	; 0x06
   19924:	77 83       	std	Z+7, r23	; 0x07
   19926:	8d ea       	ldi	r24, 0xAD	; 173
   19928:	98 e3       	ldi	r25, 0x38	; 56
   1992a:	a0 e0       	ldi	r26, 0x00	; 0
   1992c:	81 83       	std	Z+1, r24	; 0x01
   1992e:	92 83       	std	Z+2, r25	; 0x02
   19930:	a3 83       	std	Z+3, r26	; 0x03
   19932:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   19936:	03 c1       	rjmp	.+518    	; 0x19b3e <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19938:	ec 89       	ldd	r30, Y+20	; 0x14
   1993a:	fd 89       	ldd	r31, Y+21	; 0x15
   1993c:	80 81       	ld	r24, Z
   1993e:	91 81       	ldd	r25, Z+1	; 0x01
   19940:	8f 3f       	cpi	r24, 0xFF	; 255
   19942:	ff ef       	ldi	r31, 0xFF	; 255
   19944:	9f 07       	cpc	r25, r31
   19946:	a1 f0       	breq	.+40     	; 0x19970 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19948:	89 2b       	or	r24, r25
   1994a:	09 f0       	breq	.+2      	; 0x1994e <lif_newdir+0xc4>
   1994c:	ce c0       	rjmp	.+412    	; 0x19aea <lif_newdir+0x260>
        {
            if(freestate == 0)
   1994e:	61 14       	cp	r6, r1
   19950:	71 04       	cpc	r7, r1
   19952:	09 f4       	brne	.+2      	; 0x19956 <lif_newdir+0xcc>
   19954:	c1 c0       	rjmp	.+386    	; 0x19ad8 <lif_newdir+0x24e>
   19956:	ff ef       	ldi	r31, 0xFF	; 255
   19958:	4f 1a       	sub	r4, r31
   1995a:	5f 0a       	sbc	r5, r31
   1995c:	82 01       	movw	r16, r4
   1995e:	01 50       	subi	r16, 0x01	; 1
   19960:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19962:	b8 01       	movw	r22, r16
   19964:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19966:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19968:	c1 da       	rcall	.-2686   	; 0x18eec <lif_readdirindex>
   1996a:	89 2b       	or	r24, r25
   1996c:	29 f7       	brne	.-54     	; 0x19938 <lif_newdir+0xae>
   1996e:	e7 c0       	rjmp	.+462    	; 0x19b3e <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19970:	22 e0       	ldi	r18, 0x02	; 2
   19972:	62 16       	cp	r6, r18
   19974:	71 04       	cpc	r7, r1
   19976:	09 f0       	breq	.+2      	; 0x1997a <lif_newdir+0xf0>
   19978:	46 c0       	rjmp	.+140    	; 0x19a06 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1997a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1997c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1997e:	0e 94 73 c2 	call	0x184e6	; 0x184e6 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19982:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19984:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19986:	e4 5a       	subi	r30, 0xA4	; 164
   19988:	ff 4f       	sbci	r31, 0xFF	; 255
   1998a:	88 8d       	ldd	r24, Y+24	; 0x18
   1998c:	80 83       	st	Z, r24
   1998e:	99 8d       	ldd	r25, Y+25	; 0x19
   19990:	91 83       	std	Z+1, r25	; 0x01
   19992:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19994:	22 83       	std	Z+2, r18	; 0x02
   19996:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19998:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1999a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1999c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1999e:	e0 5a       	subi	r30, 0xA0	; 160
   199a0:	ff 4f       	sbci	r31, 0xFF	; 255
   199a2:	80 82       	st	Z, r8
   199a4:	91 82       	std	Z+1, r9	; 0x01
   199a6:	a2 82       	std	Z+2, r10	; 0x02
   199a8:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   199aa:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199ac:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199ae:	84 89       	ldd	r24, Z+20	; 0x14
   199b0:	95 89       	ldd	r25, Z+21	; 0x15
   199b2:	a6 89       	ldd	r26, Z+22	; 0x16
   199b4:	b7 89       	ldd	r27, Z+23	; 0x17
   199b6:	88 0d       	add	r24, r8
   199b8:	99 1d       	adc	r25, r9
   199ba:	aa 1d       	adc	r26, r10
   199bc:	bb 1d       	adc	r27, r11
   199be:	84 8b       	std	Z+20, r24	; 0x14
   199c0:	95 8b       	std	Z+21, r25	; 0x15
   199c2:	a6 8b       	std	Z+22, r26	; 0x16
   199c4:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   199c6:	80 8d       	ldd	r24, Z+24	; 0x18
   199c8:	91 8d       	ldd	r25, Z+25	; 0x19
   199ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
   199cc:	b3 8d       	ldd	r27, Z+27	; 0x1b
   199ce:	88 19       	sub	r24, r8
   199d0:	99 09       	sbc	r25, r9
   199d2:	aa 09       	sbc	r26, r10
   199d4:	bb 09       	sbc	r27, r11
   199d6:	80 8f       	std	Z+24, r24	; 0x18
   199d8:	91 8f       	std	Z+25, r25	; 0x19
   199da:	a2 8f       	std	Z+26, r26	; 0x1a
   199dc:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   199de:	84 8d       	ldd	r24, Z+28	; 0x1c
   199e0:	95 8d       	ldd	r25, Z+29	; 0x1d
   199e2:	01 96       	adiw	r24, 0x01	; 1
   199e4:	95 8f       	std	Z+29, r25	; 0x1d
   199e6:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   199e8:	86 8d       	ldd	r24, Z+30	; 0x1e
   199ea:	97 8d       	ldd	r25, Z+31	; 0x1f
   199ec:	01 97       	sbiw	r24, 0x01	; 1
   199ee:	97 8f       	std	Z+31, r25	; 0x1f
   199f0:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   199f2:	20 a2       	std	Z+32, r2	; 0x20
   199f4:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   199f6:	b1 01       	movw	r22, r2
   199f8:	cf 01       	movw	r24, r30
   199fa:	df da       	rcall	.-2626   	; 0x18fba <lif_writedirindex>
   199fc:	89 2b       	or	r24, r25
   199fe:	09 f4       	brne	.+2      	; 0x19a02 <lif_newdir+0x178>
   19a00:	9e c0       	rjmp	.+316    	; 0x19b3e <lif_newdir+0x2b4>
   19a02:	c1 01       	movw	r24, r2
   19a04:	9e c0       	rjmp	.+316    	; 0x19b42 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19a06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a0a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19a0e:	92 ff       	sbrs	r25, 2
   19a10:	1e c0       	rjmp	.+60     	; 0x19a4e <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19a12:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a14:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a16:	80 8d       	ldd	r24, Z+24	; 0x18
   19a18:	91 8d       	ldd	r25, Z+25	; 0x19
   19a1a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a1c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a1e:	ed b7       	in	r30, 0x3d	; 61
   19a20:	fe b7       	in	r31, 0x3e	; 62
   19a22:	86 87       	std	Z+14, r24	; 0x0e
   19a24:	97 87       	std	Z+15, r25	; 0x0f
   19a26:	a0 8b       	std	Z+16, r26	; 0x10
   19a28:	b1 8b       	std	Z+17, r27	; 0x11
   19a2a:	82 86       	std	Z+10, r8	; 0x0a
   19a2c:	93 86       	std	Z+11, r9	; 0x0b
   19a2e:	a4 86       	std	Z+12, r10	; 0x0c
   19a30:	b5 86       	std	Z+13, r11	; 0x0d
   19a32:	c6 82       	std	Z+6, r12	; 0x06
   19a34:	d7 82       	std	Z+7, r13	; 0x07
   19a36:	e0 86       	std	Z+8, r14	; 0x08
   19a38:	f1 86       	std	Z+9, r15	; 0x09
   19a3a:	15 83       	std	Z+5, r17	; 0x05
   19a3c:	04 83       	std	Z+4, r16	; 0x04
   19a3e:	8c e5       	ldi	r24, 0x5C	; 92
   19a40:	98 e3       	ldi	r25, 0x38	; 56
   19a42:	a0 e0       	ldi	r26, 0x00	; 0
   19a44:	81 83       	std	Z+1, r24	; 0x01
   19a46:	92 83       	std	Z+2, r25	; 0x02
   19a48:	a3 83       	std	Z+3, r26	; 0x03
   19a4a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19a4e:	b8 01       	movw	r22, r16
   19a50:	6f 5f       	subi	r22, 0xFF	; 255
   19a52:	7f 4f       	sbci	r23, 0xFF	; 255
   19a54:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a56:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a58:	0c db       	rcall	.-2536   	; 0x19072 <lif_writedirEOF>
   19a5a:	89 2b       	or	r24, r25
   19a5c:	09 f4       	brne	.+2      	; 0x19a60 <lif_newdir+0x1d6>
   19a5e:	6f c0       	rjmp	.+222    	; 0x19b3e <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19a60:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a62:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a64:	0e 94 73 c2 	call	0x184e6	; 0x184e6 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19a68:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a6a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a6c:	e4 5a       	subi	r30, 0xA4	; 164
   19a6e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a70:	c0 82       	st	Z, r12
   19a72:	d1 82       	std	Z+1, r13	; 0x01
   19a74:	e2 82       	std	Z+2, r14	; 0x02
   19a76:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19a78:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a7a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a7c:	e0 5a       	subi	r30, 0xA0	; 160
   19a7e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a80:	80 82       	st	Z, r8
   19a82:	91 82       	std	Z+1, r9	; 0x01
   19a84:	a2 82       	std	Z+2, r10	; 0x02
   19a86:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19a88:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a8a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a8c:	84 89       	ldd	r24, Z+20	; 0x14
   19a8e:	95 89       	ldd	r25, Z+21	; 0x15
   19a90:	a6 89       	ldd	r26, Z+22	; 0x16
   19a92:	b7 89       	ldd	r27, Z+23	; 0x17
   19a94:	88 0d       	add	r24, r8
   19a96:	99 1d       	adc	r25, r9
   19a98:	aa 1d       	adc	r26, r10
   19a9a:	bb 1d       	adc	r27, r11
   19a9c:	84 8b       	std	Z+20, r24	; 0x14
   19a9e:	95 8b       	std	Z+21, r25	; 0x15
   19aa0:	a6 8b       	std	Z+22, r26	; 0x16
   19aa2:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19aa4:	80 8d       	ldd	r24, Z+24	; 0x18
   19aa6:	91 8d       	ldd	r25, Z+25	; 0x19
   19aa8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19aaa:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19aac:	88 19       	sub	r24, r8
   19aae:	99 09       	sbc	r25, r9
   19ab0:	aa 09       	sbc	r26, r10
   19ab2:	bb 09       	sbc	r27, r11
   19ab4:	80 8f       	std	Z+24, r24	; 0x18
   19ab6:	91 8f       	std	Z+25, r25	; 0x19
   19ab8:	a2 8f       	std	Z+26, r26	; 0x1a
   19aba:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19abc:	84 8d       	ldd	r24, Z+28	; 0x1c
   19abe:	95 8d       	ldd	r25, Z+29	; 0x1d
   19ac0:	01 96       	adiw	r24, 0x01	; 1
   19ac2:	95 8f       	std	Z+29, r25	; 0x1d
   19ac4:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19ac6:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19ac8:	00 a3       	std	Z+32, r16	; 0x20
   19aca:	b8 01       	movw	r22, r16
   19acc:	cf 01       	movw	r24, r30
   19ace:	75 da       	rcall	.-2838   	; 0x18fba <lif_writedirindex>
   19ad0:	89 2b       	or	r24, r25
   19ad2:	a9 f1       	breq	.+106    	; 0x19b3e <lif_newdir+0x2b4>
   19ad4:	c8 01       	movw	r24, r16
   19ad6:	35 c0       	rjmp	.+106    	; 0x19b42 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19ad8:	c8 8e       	std	Y+24, r12	; 0x18
   19ada:	d9 8e       	std	Y+25, r13	; 0x19
   19adc:	ea 8e       	std	Y+26, r14	; 0x1a
   19ade:	fb 8e       	std	Y+27, r15	; 0x1b
   19ae0:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19ae2:	66 24       	eor	r6, r6
   19ae4:	63 94       	inc	r6
   19ae6:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19ae8:	36 cf       	rjmp	.-404    	; 0x19956 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19aea:	f1 e0       	ldi	r31, 0x01	; 1
   19aec:	6f 16       	cp	r6, r31
   19aee:	71 04       	cpc	r7, r1
   19af0:	a9 f4       	brne	.+42     	; 0x19b1c <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19af2:	ea 89       	ldd	r30, Y+18	; 0x12
   19af4:	fb 89       	ldd	r31, Y+19	; 0x13
   19af6:	80 81       	ld	r24, Z
   19af8:	91 81       	ldd	r25, Z+1	; 0x01
   19afa:	a2 81       	ldd	r26, Z+2	; 0x02
   19afc:	b3 81       	ldd	r27, Z+3	; 0x03
   19afe:	8c 19       	sub	r24, r12
   19b00:	9d 09       	sbc	r25, r13
   19b02:	ae 09       	sbc	r26, r14
   19b04:	bf 09       	sbc	r27, r15
   19b06:	88 15       	cp	r24, r8
   19b08:	99 05       	cpc	r25, r9
   19b0a:	aa 05       	cpc	r26, r10
   19b0c:	bb 05       	cpc	r27, r11
   19b0e:	1c f4       	brge	.+6      	; 0x19b16 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19b10:	61 2c       	mov	r6, r1
   19b12:	71 2c       	mov	r7, r1
   19b14:	03 c0       	rjmp	.+6      	; 0x19b1c <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19b16:	82 e0       	ldi	r24, 0x02	; 2
   19b18:	68 2e       	mov	r6, r24
   19b1a:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19b1c:	ea 89       	ldd	r30, Y+18	; 0x12
   19b1e:	fb 89       	ldd	r31, Y+19	; 0x13
   19b20:	c0 80       	ld	r12, Z
   19b22:	d1 80       	ldd	r13, Z+1	; 0x01
   19b24:	e2 80       	ldd	r14, Z+2	; 0x02
   19b26:	f3 80       	ldd	r15, Z+3	; 0x03
   19b28:	ee 89       	ldd	r30, Y+22	; 0x16
   19b2a:	ff 89       	ldd	r31, Y+23	; 0x17
   19b2c:	80 81       	ld	r24, Z
   19b2e:	91 81       	ldd	r25, Z+1	; 0x01
   19b30:	a2 81       	ldd	r26, Z+2	; 0x02
   19b32:	b3 81       	ldd	r27, Z+3	; 0x03
   19b34:	c8 0e       	add	r12, r24
   19b36:	d9 1e       	adc	r13, r25
   19b38:	ea 1e       	adc	r14, r26
   19b3a:	fb 1e       	adc	r15, r27
   19b3c:	0c cf       	rjmp	.-488    	; 0x19956 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19b3e:	8f ef       	ldi	r24, 0xFF	; 255
   19b40:	9f ef       	ldi	r25, 0xFF	; 255
}
   19b42:	6d 96       	adiw	r28, 0x1d	; 29
   19b44:	e2 e1       	ldi	r30, 0x12	; 18
   19b46:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

00019b4a <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19b4a:	a9 e3       	ldi	r26, 0x39	; 57
   19b4c:	b1 e0       	ldi	r27, 0x01	; 1
   19b4e:	eb ea       	ldi	r30, 0xAB	; 171
   19b50:	fd ec       	ldi	r31, 0xCD	; 205
   19b52:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__prologue_saves__+0xc>
   19b56:	6c 01       	movw	r12, r24
   19b58:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19b5a:	be 01       	movw	r22, r28
   19b5c:	66 5f       	subi	r22, 0xF6	; 246
   19b5e:	7e 4f       	sbci	r23, 0xFE	; 254
   19b60:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <lif_stat>
   19b64:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19b66:	00 97       	sbiw	r24, 0x00	; 0
   19b68:	09 f1       	breq	.+66     	; 0x19bac <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19b6a:	fc 01       	movw	r30, r24
   19b6c:	80 8d       	ldd	r24, Z+24	; 0x18
   19b6e:	91 8d       	ldd	r25, Z+25	; 0x19
   19b70:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19b72:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19b74:	81 15       	cp	r24, r1
   19b76:	f2 e0       	ldi	r31, 0x02	; 2
   19b78:	9f 07       	cpc	r25, r31
   19b7a:	a1 05       	cpc	r26, r1
   19b7c:	b1 05       	cpc	r27, r1
   19b7e:	c8 f4       	brcc	.+50     	; 0x19bb2 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19b80:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19b84:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b88:	32 ff       	sbrs	r19, 2
   19b8a:	10 c0       	rjmp	.+32     	; 0x19bac <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19b8c:	ed b7       	in	r30, 0x3d	; 61
   19b8e:	fe b7       	in	r31, 0x3e	; 62
   19b90:	86 83       	std	Z+6, r24	; 0x06
   19b92:	97 83       	std	Z+7, r25	; 0x07
   19b94:	a0 87       	std	Z+8, r26	; 0x08
   19b96:	b1 87       	std	Z+9, r27	; 0x09
   19b98:	d5 82       	std	Z+5, r13	; 0x05
   19b9a:	c4 82       	std	Z+4, r12	; 0x04
   19b9c:	8d e1       	ldi	r24, 0x1D	; 29
   19b9e:	98 e3       	ldi	r25, 0x38	; 56
   19ba0:	a0 e0       	ldi	r26, 0x00	; 0
   19ba2:	81 83       	std	Z+1, r24	; 0x01
   19ba4:	92 83       	std	Z+2, r25	; 0x02
   19ba6:	a3 83       	std	Z+3, r26	; 0x03
   19ba8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(NULL);
   19bac:	00 e0       	ldi	r16, 0x00	; 0
   19bae:	10 e0       	ldi	r17, 0x00	; 0
   19bb0:	c6 c0       	rjmp	.+396    	; 0x19d3e <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19bb2:	64 e7       	ldi	r22, 0x74	; 116
   19bb4:	70 e0       	ldi	r23, 0x00	; 0
   19bb6:	80 e0       	ldi	r24, 0x00	; 0
   19bb8:	90 e0       	ldi	r25, 0x00	; 0
   19bba:	0e 94 2e bd 	call	0x17a5c	; 0x17a5c <lif_calloc>
   19bbe:	7c 01       	movw	r14, r24
    if(!LIF)
   19bc0:	89 2b       	or	r24, r25
   19bc2:	a1 f3       	breq	.-24     	; 0x19bac <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19bc4:	c6 01       	movw	r24, r12
   19bc6:	0e 94 79 bd 	call	0x17af2	; 0x17af2 <lif_stralloc>
   19bca:	f7 01       	movw	r30, r14
   19bcc:	91 83       	std	Z+1, r25	; 0x01
   19bce:	80 83       	st	Z, r24
    if(!LIF->name)
   19bd0:	00 97       	sbiw	r24, 0x00	; 0
   19bd2:	09 f4       	brne	.+2      	; 0x19bd6 <lif_open_volume+0x8c>
   19bd4:	5e c0       	rjmp	.+188    	; 0x19c92 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19bd6:	f5 01       	movw	r30, r10
   19bd8:	80 8c       	ldd	r8, Z+24	; 0x18
   19bda:	91 8c       	ldd	r9, Z+25	; 0x19
   19bdc:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19bde:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19be0:	f7 01       	movw	r30, r14
   19be2:	80 86       	std	Z+8, r8	; 0x08
   19be4:	91 86       	std	Z+9, r9	; 0x09
   19be6:	a2 86       	std	Z+10, r10	; 0x0a
   19be8:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19bea:	77 27       	eor	r23, r23
   19bec:	6b 2d       	mov	r22, r11
   19bee:	5a 2d       	mov	r21, r10
   19bf0:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19bf2:	88 20       	and	r8, r8
   19bf4:	21 f0       	breq	.+8      	; 0x19bfe <lif_open_volume+0xb4>
        ++sectors;
   19bf6:	4f 5f       	subi	r20, 0xFF	; 255
   19bf8:	5f 4f       	sbci	r21, 0xFF	; 255
   19bfa:	6f 4f       	sbci	r22, 0xFF	; 255
   19bfc:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19bfe:	f7 01       	movw	r30, r14
   19c00:	44 83       	std	Z+4, r20	; 0x04
   19c02:	55 83       	std	Z+5, r21	; 0x05
   19c04:	66 83       	std	Z+6, r22	; 0x06
   19c06:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19c08:	b8 01       	movw	r22, r16
   19c0a:	0e 94 98 bd 	call	0x17b30	; 0x17b30 <lif_open>
   19c0e:	f7 01       	movw	r30, r14
   19c10:	93 83       	std	Z+3, r25	; 0x03
   19c12:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19c14:	89 2b       	or	r24, r25
   19c16:	e9 f1       	breq	.+122    	; 0x19c92 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19c18:	00 e0       	ldi	r16, 0x00	; 0
   19c1a:	11 e0       	ldi	r17, 0x01	; 1
   19c1c:	20 e0       	ldi	r18, 0x00	; 0
   19c1e:	30 e0       	ldi	r19, 0x00	; 0
   19c20:	a9 01       	movw	r20, r18
   19c22:	be 01       	movw	r22, r28
   19c24:	66 5f       	subi	r22, 0xF6	; 246
   19c26:	7f 4f       	sbci	r23, 0xFF	; 255
   19c28:	c7 01       	movw	r24, r14
   19c2a:	0e 94 1c be 	call	0x17c38	; 0x17c38 <lif_read>
   19c2e:	6f 3f       	cpi	r22, 0xFF	; 255
   19c30:	71 05       	cpc	r23, r1
   19c32:	81 05       	cpc	r24, r1
   19c34:	91 05       	cpc	r25, r1
   19c36:	09 f0       	breq	.+2      	; 0x19c3a <lif_open_volume+0xf0>
   19c38:	6c f4       	brge	.+26     	; 0x19c54 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19c3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c3e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c42:	92 ff       	sbrs	r25, 2
   19c44:	26 c0       	rjmp	.+76     	; 0x19c92 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19c46:	ed b7       	in	r30, 0x3d	; 61
   19c48:	fe b7       	in	r31, 0x3e	; 62
   19c4a:	d5 82       	std	Z+5, r13	; 0x05
   19c4c:	c4 82       	std	Z+4, r12	; 0x04
   19c4e:	87 ee       	ldi	r24, 0xE7	; 231
   19c50:	97 e3       	ldi	r25, 0x37	; 55
   19c52:	19 c0       	rjmp	.+50     	; 0x19c86 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19c54:	b7 01       	movw	r22, r14
   19c56:	ce 01       	movw	r24, r28
   19c58:	0a 96       	adiw	r24, 0x0a	; 10
   19c5a:	0e 94 3c c0 	call	0x18078	; 0x18078 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19c5e:	c7 01       	movw	r24, r14
   19c60:	0e 94 48 c4 	call	0x18890	; 0x18890 <lif_check_volume>
   19c64:	89 2b       	or	r24, r25
   19c66:	c1 f4       	brne	.+48     	; 0x19c98 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19c68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c70:	92 ff       	sbrs	r25, 2
   19c72:	0f c0       	rjmp	.+30     	; 0x19c92 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19c74:	f7 01       	movw	r30, r14
   19c76:	80 81       	ld	r24, Z
   19c78:	91 81       	ldd	r25, Z+1	; 0x01
   19c7a:	ed b7       	in	r30, 0x3d	; 61
   19c7c:	fe b7       	in	r31, 0x3e	; 62
   19c7e:	95 83       	std	Z+5, r25	; 0x05
   19c80:	84 83       	std	Z+4, r24	; 0x04
   19c82:	84 eb       	ldi	r24, 0xB4	; 180
   19c84:	97 e3       	ldi	r25, 0x37	; 55
   19c86:	a0 e0       	ldi	r26, 0x00	; 0
   19c88:	81 83       	std	Z+1, r24	; 0x01
   19c8a:	92 83       	std	Z+2, r25	; 0x02
   19c8c:	a3 83       	std	Z+3, r26	; 0x03
   19c8e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19c92:	c7 01       	movw	r24, r14
   19c94:	9d d8       	rcall	.-3782   	; 0x18dd0 <lif_close_volume>
   19c96:	8a cf       	rjmp	.-236    	; 0x19bac <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19c98:	f7 01       	movw	r30, r14
   19c9a:	45 a5       	ldd	r20, Z+45	; 0x2d
   19c9c:	56 a5       	ldd	r21, Z+46	; 0x2e
   19c9e:	67 a5       	ldd	r22, Z+47	; 0x2f
   19ca0:	70 a9       	ldd	r23, Z+48	; 0x30
   19ca2:	85 a9       	ldd	r24, Z+53	; 0x35
   19ca4:	96 a9       	ldd	r25, Z+54	; 0x36
   19ca6:	a7 a9       	ldd	r26, Z+55	; 0x37
   19ca8:	b0 ad       	ldd	r27, Z+56	; 0x38
   19caa:	48 0f       	add	r20, r24
   19cac:	59 1f       	adc	r21, r25
   19cae:	6a 1f       	adc	r22, r26
   19cb0:	7b 1f       	adc	r23, r27
   19cb2:	44 87       	std	Z+12, r20	; 0x0c
   19cb4:	55 87       	std	Z+13, r21	; 0x0d
   19cb6:	66 87       	std	Z+14, r22	; 0x0e
   19cb8:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19cba:	84 81       	ldd	r24, Z+4	; 0x04
   19cbc:	95 81       	ldd	r25, Z+5	; 0x05
   19cbe:	a6 81       	ldd	r26, Z+6	; 0x06
   19cc0:	b7 81       	ldd	r27, Z+7	; 0x07
   19cc2:	84 1b       	sub	r24, r20
   19cc4:	95 0b       	sbc	r25, r21
   19cc6:	a6 0b       	sbc	r26, r22
   19cc8:	b7 0b       	sbc	r27, r23
   19cca:	80 8b       	std	Z+16, r24	; 0x10
   19ccc:	91 8b       	std	Z+17, r25	; 0x11
   19cce:	a2 8b       	std	Z+18, r26	; 0x12
   19cd0:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19cd2:	80 8f       	std	Z+24, r24	; 0x18
   19cd4:	91 8f       	std	Z+25, r25	; 0x19
   19cd6:	a2 8f       	std	Z+26, r26	; 0x1a
   19cd8:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19cda:	14 8a       	std	Z+20, r1	; 0x14
   19cdc:	15 8a       	std	Z+21, r1	; 0x15
   19cde:	16 8a       	std	Z+22, r1	; 0x16
   19ce0:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19ce2:	17 8e       	std	Z+31, r1	; 0x1f
   19ce4:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19ce6:	15 8e       	std	Z+29, r1	; 0x1d
   19ce8:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19cea:	11 a2       	std	Z+33, r1	; 0x21
   19cec:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19cee:	13 a2       	std	Z+35, r1	; 0x23
   19cf0:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19cf2:	c7 01       	movw	r24, r14
   19cf4:	d6 d9       	rcall	.-3156   	; 0x190a2 <lif_updatefree>
   19cf6:	8c 01       	movw	r16, r24
   19cf8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19cfc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d00:	01 15       	cp	r16, r1
   19d02:	11 05       	cpc	r17, r1
   19d04:	a1 f4       	brne	.+40     	; 0x19d2e <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19d06:	92 ff       	sbrs	r25, 2
   19d08:	0f c0       	rjmp	.+30     	; 0x19d28 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19d0a:	f7 01       	movw	r30, r14
   19d0c:	80 81       	ld	r24, Z
   19d0e:	91 81       	ldd	r25, Z+1	; 0x01
   19d10:	ed b7       	in	r30, 0x3d	; 61
   19d12:	fe b7       	in	r31, 0x3e	; 62
   19d14:	95 83       	std	Z+5, r25	; 0x05
   19d16:	84 83       	std	Z+4, r24	; 0x04
   19d18:	81 e8       	ldi	r24, 0x81	; 129
   19d1a:	97 e3       	ldi	r25, 0x37	; 55
   19d1c:	a0 e0       	ldi	r26, 0x00	; 0
   19d1e:	81 83       	std	Z+1, r24	; 0x01
   19d20:	92 83       	std	Z+2, r25	; 0x02
   19d22:	a3 83       	std	Z+3, r26	; 0x03
   19d24:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d28:	c7 01       	movw	r24, r14
   19d2a:	52 d8       	rcall	.-3932   	; 0x18dd0 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19d2c:	08 c0       	rjmp	.+16     	; 0x19d3e <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19d2e:	92 ff       	sbrs	r25, 2
   19d30:	05 c0       	rjmp	.+10     	; 0x19d3c <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19d32:	65 e3       	ldi	r22, 0x35	; 53
   19d34:	76 e1       	ldi	r23, 0x16	; 22
   19d36:	c7 01       	movw	r24, r14
   19d38:	0e 94 82 c2 	call	0x18504	; 0x18504 <lif_dump_vol>
   19d3c:	87 01       	movw	r16, r14
    return( LIF );
}
   19d3e:	c8 01       	movw	r24, r16
   19d40:	c7 5c       	subi	r28, 0xC7	; 199
   19d42:	de 4f       	sbci	r29, 0xFE	; 254
   19d44:	ec e0       	ldi	r30, 0x0C	; 12
   19d46:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__epilogue_restores__+0xc>

00019d4a <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19d4a:	2f 92       	push	r2
   19d4c:	3f 92       	push	r3
   19d4e:	4f 92       	push	r4
   19d50:	5f 92       	push	r5
   19d52:	6f 92       	push	r6
   19d54:	8f 92       	push	r8
   19d56:	9f 92       	push	r9
   19d58:	af 92       	push	r10
   19d5a:	bf 92       	push	r11
   19d5c:	cf 92       	push	r12
   19d5e:	df 92       	push	r13
   19d60:	ef 92       	push	r14
   19d62:	0f 93       	push	r16
   19d64:	1f 93       	push	r17
   19d66:	cf 93       	push	r28
   19d68:	df 93       	push	r29
   19d6a:	cd b7       	in	r28, 0x3d	; 61
   19d6c:	de b7       	in	r29, 0x3e	; 62
   19d6e:	af 97       	sbiw	r28, 0x2f	; 47
   19d70:	0f b6       	in	r0, 0x3f	; 63
   19d72:	f8 94       	cli
   19d74:	de bf       	out	0x3e, r29	; 62
   19d76:	0f be       	out	0x3f, r0	; 63
   19d78:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19d7a:	68 e0       	ldi	r22, 0x08	; 8
   19d7c:	79 e0       	ldi	r23, 0x09	; 9
   19d7e:	e5 de       	rcall	.-566    	; 0x19b4a <lif_open_volume>
   19d80:	9f a7       	std	Y+47, r25	; 0x2f
   19d82:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19d84:	00 97       	sbiw	r24, 0x00	; 0
   19d86:	09 f4       	brne	.+2      	; 0x19d8a <lif_dir+0x40>
   19d88:	9e c1       	rjmp	.+828    	; 0x1a0c6 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19d8a:	fc 01       	movw	r30, r24
   19d8c:	86 a1       	ldd	r24, Z+38	; 0x26
   19d8e:	88 23       	and	r24, r24
   19d90:	21 f0       	breq	.+8      	; 0x19d9a <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19d92:	8f 01       	movw	r16, r30
   19d94:	0a 5d       	subi	r16, 0xDA	; 218
   19d96:	1f 4f       	sbci	r17, 0xFF	; 255
   19d98:	02 c0       	rjmp	.+4      	; 0x19d9e <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19d9a:	07 ee       	ldi	r16, 0xE7	; 231
   19d9c:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19d9e:	8e a5       	ldd	r24, Y+46	; 0x2e
   19da0:	9f a5       	ldd	r25, Y+47	; 0x2f
   19da2:	87 5b       	subi	r24, 0xB7	; 183
   19da4:	9f 4f       	sbci	r25, 0xFF	; 255
   19da6:	0e 94 46 c2 	call	0x1848c	; 0x1848c <lif_lifbcd2timestr>
   19daa:	ed b7       	in	r30, 0x3d	; 61
   19dac:	fe b7       	in	r31, 0x3e	; 62
   19dae:	97 83       	std	Z+7, r25	; 0x07
   19db0:	86 83       	std	Z+6, r24	; 0x06
   19db2:	15 83       	std	Z+5, r17	; 0x05
   19db4:	04 83       	std	Z+4, r16	; 0x04
   19db6:	8a e6       	ldi	r24, 0x6A	; 106
   19db8:	97 e3       	ldi	r25, 0x37	; 55
   19dba:	a0 e0       	ldi	r26, 0x00	; 0
   19dbc:	81 83       	std	Z+1, r24	; 0x01
   19dbe:	92 83       	std	Z+2, r25	; 0x02
   19dc0:	a3 83       	std	Z+3, r26	; 0x03
   19dc2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19dc6:	8a e2       	ldi	r24, 0x2A	; 42
   19dc8:	97 e3       	ldi	r25, 0x37	; 55
   19dca:	a0 e0       	ldi	r26, 0x00	; 0
   19dcc:	ed b7       	in	r30, 0x3d	; 61
   19dce:	fe b7       	in	r31, 0x3e	; 62
   19dd0:	81 83       	std	Z+1, r24	; 0x01
   19dd2:	92 83       	std	Z+2, r25	; 0x02
   19dd4:	a3 83       	std	Z+3, r26	; 0x03
   19dd6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19dda:	00 e2       	ldi	r16, 0x20	; 32
   19ddc:	10 e0       	ldi	r17, 0x00	; 0
   19dde:	1f 8b       	std	Y+23, r17	; 0x17
   19de0:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19de2:	21 2c       	mov	r2, r1
   19de4:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19de6:	0e a5       	ldd	r16, Y+46	; 0x2e
   19de8:	1f a5       	ldd	r17, Y+47	; 0x2f
   19dea:	06 5a       	subi	r16, 0xA6	; 166
   19dec:	1f 4f       	sbci	r17, 0xFF	; 255
   19dee:	1d 8f       	std	Y+29, r17	; 0x1d
   19df0:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19df2:	0e a5       	ldd	r16, Y+46	; 0x2e
   19df4:	1f a5       	ldd	r17, Y+47	; 0x2f
   19df6:	00 5a       	subi	r16, 0xA0	; 160
   19df8:	1f 4f       	sbci	r17, 0xFF	; 255
   19dfa:	1d a3       	std	Y+37, r17	; 0x25
   19dfc:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19dfe:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e00:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e02:	04 59       	subi	r16, 0x94	; 148
   19e04:	1f 4f       	sbci	r17, 0xFF	; 255
   19e06:	1f a3       	std	Y+39, r17	; 0x27
   19e08:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19e0a:	8e ed       	ldi	r24, 0xDE	; 222
   19e0c:	96 e3       	ldi	r25, 0x36	; 54
   19e0e:	6c 01       	movw	r12, r24
   19e10:	e1 2c       	mov	r14, r1
   19e12:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e14:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e16:	01 5b       	subi	r16, 0xB1	; 177
   19e18:	1f 4f       	sbci	r17, 0xFF	; 255
   19e1a:	1f 8f       	std	Y+31, r17	; 0x1f
   19e1c:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19e1e:	8e ea       	ldi	r24, 0xAE	; 174
   19e20:	96 e3       	ldi	r25, 0x36	; 54
   19e22:	2c 01       	movw	r4, r24
   19e24:	61 2c       	mov	r6, r1
   19e26:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e28:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e2a:	04 5a       	subi	r16, 0xA4	; 164
   19e2c:	1f 4f       	sbci	r17, 0xFF	; 255
   19e2e:	19 a7       	std	Y+41, r17	; 0x29
   19e30:	08 a7       	std	Y+40, r16	; 0x28
   19e32:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e34:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e36:	02 59       	subi	r16, 0x92	; 146
   19e38:	1f 4f       	sbci	r17, 0xFF	; 255
   19e3a:	1b a7       	std	Y+43, r17	; 0x2b
   19e3c:	0a a7       	std	Y+42, r16	; 0x2a
   19e3e:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e40:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e42:	0c 59       	subi	r16, 0x9C	; 156
   19e44:	1f 4f       	sbci	r17, 0xFF	; 255
   19e46:	1d a7       	std	Y+45, r17	; 0x2d
   19e48:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19e4a:	b1 01       	movw	r22, r2
   19e4c:	8e a5       	ldd	r24, Y+46	; 0x2e
   19e4e:	9f a5       	ldd	r25, Y+47	; 0x2f
   19e50:	4d d8       	rcall	.-3942   	; 0x18eec <lif_readdirindex>
   19e52:	89 2b       	or	r24, r25
   19e54:	09 f4       	brne	.+2      	; 0x19e58 <lif_dir+0x10e>
   19e56:	ad c0       	rjmp	.+346    	; 0x19fb2 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e58:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19e5a:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19e5c:	8d 91       	ld	r24, X+
   19e5e:	9c 91       	ld	r25, X
   19e60:	8f 3f       	cpi	r24, 0xFF	; 255
   19e62:	bf ef       	ldi	r27, 0xFF	; 255
   19e64:	9b 07       	cpc	r25, r27
   19e66:	09 f4       	brne	.+2      	; 0x19e6a <lif_dir+0x120>
   19e68:	a4 c0       	rjmp	.+328    	; 0x19fb2 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19e6a:	ec a1       	ldd	r30, Y+36	; 0x24
   19e6c:	fd a1       	ldd	r31, Y+37	; 0x25
   19e6e:	40 81       	ld	r20, Z
   19e70:	51 81       	ldd	r21, Z+1	; 0x01
   19e72:	62 81       	ldd	r22, Z+2	; 0x02
   19e74:	73 81       	ldd	r23, Z+3	; 0x03
   19e76:	00 27       	eor	r16, r16
   19e78:	14 2f       	mov	r17, r20
   19e7a:	25 2f       	mov	r18, r21
   19e7c:	36 2f       	mov	r19, r22
   19e7e:	08 8f       	std	Y+24, r16	; 0x18
   19e80:	19 8f       	std	Y+25, r17	; 0x19
   19e82:	2a 8f       	std	Y+26, r18	; 0x1a
   19e84:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19e86:	8c 7f       	andi	r24, 0xFC	; 252
   19e88:	80 31       	cpi	r24, 0x10	; 16
   19e8a:	90 4e       	sbci	r25, 0xE0	; 224
   19e8c:	09 f0       	breq	.+2      	; 0x19e90 <lif_dir+0x146>
   19e8e:	4b c0       	rjmp	.+150    	; 0x19f26 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19e90:	ae a1       	ldd	r26, Y+38	; 0x26
   19e92:	bf a1       	ldd	r27, Y+39	; 0x27
   19e94:	8d 91       	ld	r24, X+
   19e96:	9c 91       	ld	r25, X
   19e98:	00 97       	sbiw	r24, 0x00	; 0
   19e9a:	b9 f0       	breq	.+46     	; 0x19eca <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19e9c:	4c 01       	movw	r8, r24
   19e9e:	a1 2c       	mov	r10, r1
   19ea0:	b1 2c       	mov	r11, r1
   19ea2:	33 27       	eor	r19, r19
   19ea4:	2b 2d       	mov	r18, r11
   19ea6:	1a 2d       	mov	r17, r10
   19ea8:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19eaa:	88 23       	and	r24, r24
   19eac:	21 f0       	breq	.+8      	; 0x19eb6 <lif_dir+0x16c>
        ++sectors;
   19eae:	0f 5f       	subi	r16, 0xFF	; 255
   19eb0:	1f 4f       	sbci	r17, 0xFF	; 255
   19eb2:	2f 4f       	sbci	r18, 0xFF	; 255
   19eb4:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19eb6:	40 17       	cp	r20, r16
   19eb8:	51 07       	cpc	r21, r17
   19eba:	62 07       	cpc	r22, r18
   19ebc:	73 07       	cpc	r23, r19
   19ebe:	29 f4       	brne	.+10     	; 0x19eca <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19ec0:	88 8e       	std	Y+24, r8	; 0x18
   19ec2:	99 8e       	std	Y+25, r9	; 0x19
   19ec4:	aa 8e       	std	Y+26, r10	; 0x1a
   19ec6:	bb 8e       	std	Y+27, r11	; 0x1b
   19ec8:	2e c0       	rjmp	.+92     	; 0x19f26 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19eca:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19ece:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ed2:	32 ff       	sbrs	r19, 2
   19ed4:	24 c0       	rjmp	.+72     	; 0x19f1e <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19ed6:	4c 01       	movw	r8, r24
   19ed8:	a1 2c       	mov	r10, r1
   19eda:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19edc:	33 27       	eor	r19, r19
   19ede:	2b 2d       	mov	r18, r11
   19ee0:	1a 2d       	mov	r17, r10
   19ee2:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19ee4:	88 23       	and	r24, r24
   19ee6:	21 f0       	breq	.+8      	; 0x19ef0 <lif_dir+0x1a6>
        ++sectors;
   19ee8:	0f 5f       	subi	r16, 0xFF	; 255
   19eea:	1f 4f       	sbci	r17, 0xFF	; 255
   19eec:	2f 4f       	sbci	r18, 0xFF	; 255
   19eee:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19ef0:	ed b7       	in	r30, 0x3d	; 61
   19ef2:	fe b7       	in	r31, 0x3e	; 62
   19ef4:	46 87       	std	Z+14, r20	; 0x0e
   19ef6:	57 87       	std	Z+15, r21	; 0x0f
   19ef8:	60 8b       	std	Z+16, r22	; 0x10
   19efa:	71 8b       	std	Z+17, r23	; 0x11
   19efc:	02 87       	std	Z+10, r16	; 0x0a
   19efe:	13 87       	std	Z+11, r17	; 0x0b
   19f00:	24 87       	std	Z+12, r18	; 0x0c
   19f02:	35 87       	std	Z+13, r19	; 0x0d
   19f04:	86 82       	std	Z+6, r8	; 0x06
   19f06:	97 82       	std	Z+7, r9	; 0x07
   19f08:	a0 86       	std	Z+8, r10	; 0x08
   19f0a:	b1 86       	std	Z+9, r11	; 0x09
   19f0c:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f0e:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f10:	15 83       	std	Z+5, r17	; 0x05
   19f12:	04 83       	std	Z+4, r16	; 0x04
   19f14:	c1 82       	std	Z+1, r12	; 0x01
   19f16:	d2 82       	std	Z+2, r13	; 0x02
   19f18:	e3 82       	std	Z+3, r14	; 0x03
   19f1a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19f1e:	01 e2       	ldi	r16, 0x21	; 33
   19f20:	10 e0       	ldi	r17, 0x00	; 0
   19f22:	1f 8b       	std	Y+23, r17	; 0x17
   19f24:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19f26:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19f28:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19f2a:	8d 90       	ld	r8, X+
   19f2c:	9c 90       	ld	r9, X
   19f2e:	81 14       	cp	r8, r1
   19f30:	91 04       	cpc	r9, r1
   19f32:	19 f0       	breq	.+6      	; 0x19f3a <lif_dir+0x1f0>
   19f34:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f36:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f38:	02 c0       	rjmp	.+4      	; 0x19f3e <lif_dir+0x1f4>
   19f3a:	04 e4       	ldi	r16, 0x44	; 68
   19f3c:	16 e1       	ldi	r17, 0x16	; 22
   19f3e:	a8 a5       	ldd	r26, Y+40	; 0x28
   19f40:	b9 a5       	ldd	r27, Y+41	; 0x29
   19f42:	8d 91       	ld	r24, X+
   19f44:	9d 91       	ld	r25, X+
   19f46:	0d 90       	ld	r0, X+
   19f48:	bc 91       	ld	r27, X
   19f4a:	a0 2d       	mov	r26, r0
   19f4c:	88 a3       	std	Y+32, r24	; 0x20
   19f4e:	99 a3       	std	Y+33, r25	; 0x21
   19f50:	aa a3       	std	Y+34, r26	; 0x22
   19f52:	bb a3       	std	Y+35, r27	; 0x23
   19f54:	ea a5       	ldd	r30, Y+42	; 0x2a
   19f56:	fb a5       	ldd	r31, Y+43	; 0x2b
   19f58:	a0 80       	ld	r10, Z
   19f5a:	b1 80       	ldd	r11, Z+1	; 0x01
   19f5c:	8c a5       	ldd	r24, Y+44	; 0x2c
   19f5e:	9d a5       	ldd	r25, Y+45	; 0x2d
   19f60:	0e 94 46 c2 	call	0x1848c	; 0x1848c <lif_lifbcd2timestr>
   19f64:	ed b7       	in	r30, 0x3d	; 61
   19f66:	fe b7       	in	r31, 0x3e	; 62
   19f68:	95 8b       	std	Z+21, r25	; 0x15
   19f6a:	84 8b       	std	Z+20, r24	; 0x14
   19f6c:	b3 8a       	std	Z+19, r11	; 0x13
   19f6e:	a2 8a       	std	Z+18, r10	; 0x12
   19f70:	2e 89       	ldd	r18, Y+22	; 0x16
   19f72:	3f 89       	ldd	r19, Y+23	; 0x17
   19f74:	31 8b       	std	Z+17, r19	; 0x11
   19f76:	20 8b       	std	Z+16, r18	; 0x10
   19f78:	88 8d       	ldd	r24, Y+24	; 0x18
   19f7a:	99 8d       	ldd	r25, Y+25	; 0x19
   19f7c:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19f7e:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19f80:	84 87       	std	Z+12, r24	; 0x0c
   19f82:	95 87       	std	Z+13, r25	; 0x0d
   19f84:	a6 87       	std	Z+14, r26	; 0x0e
   19f86:	b7 87       	std	Z+15, r27	; 0x0f
   19f88:	88 a1       	ldd	r24, Y+32	; 0x20
   19f8a:	99 a1       	ldd	r25, Y+33	; 0x21
   19f8c:	aa a1       	ldd	r26, Y+34	; 0x22
   19f8e:	bb a1       	ldd	r27, Y+35	; 0x23
   19f90:	80 87       	std	Z+8, r24	; 0x08
   19f92:	91 87       	std	Z+9, r25	; 0x09
   19f94:	a2 87       	std	Z+10, r26	; 0x0a
   19f96:	b3 87       	std	Z+11, r27	; 0x0b
   19f98:	97 82       	std	Z+7, r9	; 0x07
   19f9a:	86 82       	std	Z+6, r8	; 0x06
   19f9c:	15 83       	std	Z+5, r17	; 0x05
   19f9e:	04 83       	std	Z+4, r16	; 0x04
   19fa0:	41 82       	std	Z+1, r4	; 0x01
   19fa2:	52 82       	std	Z+2, r5	; 0x02
   19fa4:	63 82       	std	Z+3, r6	; 0x03
   19fa6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19faa:	ff ef       	ldi	r31, 0xFF	; 255
   19fac:	2f 1a       	sub	r2, r31
   19fae:	3f 0a       	sbc	r3, r31
    }
   19fb0:	4c cf       	rjmp	.-360    	; 0x19e4a <lif_dir+0x100>

    printf("\n");
   19fb2:	8c ea       	ldi	r24, 0xAC	; 172
   19fb4:	96 e3       	ldi	r25, 0x36	; 54
   19fb6:	a0 e0       	ldi	r26, 0x00	; 0
   19fb8:	ed b7       	in	r30, 0x3d	; 61
   19fba:	fe b7       	in	r31, 0x3e	; 62
   19fbc:	81 83       	std	Z+1, r24	; 0x01
   19fbe:	92 83       	std	Z+2, r25	; 0x02
   19fc0:	a3 83       	std	Z+3, r26	; 0x03
   19fc2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   19fc6:	ee a5       	ldd	r30, Y+46	; 0x2e
   19fc8:	ff a5       	ldd	r31, Y+47	; 0x2f
   19fca:	84 8d       	ldd	r24, Z+28	; 0x1c
   19fcc:	95 8d       	ldd	r25, Z+29	; 0x1d
   19fce:	09 2e       	mov	r0, r25
   19fd0:	00 0c       	add	r0, r0
   19fd2:	aa 0b       	sbc	r26, r26
   19fd4:	bb 0b       	sbc	r27, r27
   19fd6:	ed b7       	in	r30, 0x3d	; 61
   19fd8:	fe b7       	in	r31, 0x3e	; 62
   19fda:	84 83       	std	Z+4, r24	; 0x04
   19fdc:	95 83       	std	Z+5, r25	; 0x05
   19fde:	a6 83       	std	Z+6, r26	; 0x06
   19fe0:	b7 83       	std	Z+7, r27	; 0x07
   19fe2:	80 ea       	ldi	r24, 0xA0	; 160
   19fe4:	96 e3       	ldi	r25, 0x36	; 54
   19fe6:	a0 e0       	ldi	r26, 0x00	; 0
   19fe8:	81 83       	std	Z+1, r24	; 0x01
   19fea:	92 83       	std	Z+2, r25	; 0x02
   19fec:	a3 83       	std	Z+3, r26	; 0x03
   19fee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   19ff2:	ee a5       	ldd	r30, Y+46	; 0x2e
   19ff4:	ff a5       	ldd	r31, Y+47	; 0x2f
   19ff6:	86 8d       	ldd	r24, Z+30	; 0x1e
   19ff8:	97 8d       	ldd	r25, Z+31	; 0x1f
   19ffa:	09 2e       	mov	r0, r25
   19ffc:	00 0c       	add	r0, r0
   19ffe:	aa 0b       	sbc	r26, r26
   1a000:	bb 0b       	sbc	r27, r27
   1a002:	ed b7       	in	r30, 0x3d	; 61
   1a004:	fe b7       	in	r31, 0x3e	; 62
   1a006:	84 83       	std	Z+4, r24	; 0x04
   1a008:	95 83       	std	Z+5, r25	; 0x05
   1a00a:	a6 83       	std	Z+6, r26	; 0x06
   1a00c:	b7 83       	std	Z+7, r27	; 0x07
   1a00e:	83 e9       	ldi	r24, 0x93	; 147
   1a010:	96 e3       	ldi	r25, 0x36	; 54
   1a012:	a0 e0       	ldi	r26, 0x00	; 0
   1a014:	81 83       	std	Z+1, r24	; 0x01
   1a016:	92 83       	std	Z+2, r25	; 0x02
   1a018:	a3 83       	std	Z+3, r26	; 0x03
   1a01a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a01e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a020:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a022:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a024:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a026:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a028:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a02a:	ed b7       	in	r30, 0x3d	; 61
   1a02c:	fe b7       	in	r31, 0x3e	; 62
   1a02e:	84 83       	std	Z+4, r24	; 0x04
   1a030:	95 83       	std	Z+5, r25	; 0x05
   1a032:	a6 83       	std	Z+6, r26	; 0x06
   1a034:	b7 83       	std	Z+7, r27	; 0x07
   1a036:	82 e8       	ldi	r24, 0x82	; 130
   1a038:	96 e3       	ldi	r25, 0x36	; 54
   1a03a:	a0 e0       	ldi	r26, 0x00	; 0
   1a03c:	81 83       	std	Z+1, r24	; 0x01
   1a03e:	92 83       	std	Z+2, r25	; 0x02
   1a040:	a3 83       	std	Z+3, r26	; 0x03
   1a042:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a046:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a048:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a04a:	85 a9       	ldd	r24, Z+53	; 0x35
   1a04c:	96 a9       	ldd	r25, Z+54	; 0x36
   1a04e:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a050:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a052:	ed b7       	in	r30, 0x3d	; 61
   1a054:	fe b7       	in	r31, 0x3e	; 62
   1a056:	84 83       	std	Z+4, r24	; 0x04
   1a058:	95 83       	std	Z+5, r25	; 0x05
   1a05a:	a6 83       	std	Z+6, r26	; 0x06
   1a05c:	b7 83       	std	Z+7, r27	; 0x07
   1a05e:	8f e6       	ldi	r24, 0x6F	; 111
   1a060:	96 e3       	ldi	r25, 0x36	; 54
   1a062:	a0 e0       	ldi	r26, 0x00	; 0
   1a064:	81 83       	std	Z+1, r24	; 0x01
   1a066:	92 83       	std	Z+2, r25	; 0x02
   1a068:	a3 83       	std	Z+3, r26	; 0x03
   1a06a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a06e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a070:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a072:	84 89       	ldd	r24, Z+20	; 0x14
   1a074:	95 89       	ldd	r25, Z+21	; 0x15
   1a076:	a6 89       	ldd	r26, Z+22	; 0x16
   1a078:	b7 89       	ldd	r27, Z+23	; 0x17
   1a07a:	ed b7       	in	r30, 0x3d	; 61
   1a07c:	fe b7       	in	r31, 0x3e	; 62
   1a07e:	84 83       	std	Z+4, r24	; 0x04
   1a080:	95 83       	std	Z+5, r25	; 0x05
   1a082:	a6 83       	std	Z+6, r26	; 0x06
   1a084:	b7 83       	std	Z+7, r27	; 0x07
   1a086:	8c e5       	ldi	r24, 0x5C	; 92
   1a088:	96 e3       	ldi	r25, 0x36	; 54
   1a08a:	a0 e0       	ldi	r26, 0x00	; 0
   1a08c:	81 83       	std	Z+1, r24	; 0x01
   1a08e:	92 83       	std	Z+2, r25	; 0x02
   1a090:	a3 83       	std	Z+3, r26	; 0x03
   1a092:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a096:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a098:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a09a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a09c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a09e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0a0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0a2:	ed b7       	in	r30, 0x3d	; 61
   1a0a4:	fe b7       	in	r31, 0x3e	; 62
   1a0a6:	84 83       	std	Z+4, r24	; 0x04
   1a0a8:	95 83       	std	Z+5, r25	; 0x05
   1a0aa:	a6 83       	std	Z+6, r26	; 0x06
   1a0ac:	b7 83       	std	Z+7, r27	; 0x07
   1a0ae:	89 e4       	ldi	r24, 0x49	; 73
   1a0b0:	96 e3       	ldi	r25, 0x36	; 54
   1a0b2:	a0 e0       	ldi	r26, 0x00	; 0
   1a0b4:	81 83       	std	Z+1, r24	; 0x01
   1a0b6:	92 83       	std	Z+2, r25	; 0x02
   1a0b8:	a3 83       	std	Z+3, r26	; 0x03
   1a0ba:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a0be:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a0c0:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a0c2:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a0c6:	af 96       	adiw	r28, 0x2f	; 47
   1a0c8:	0f b6       	in	r0, 0x3f	; 63
   1a0ca:	f8 94       	cli
   1a0cc:	de bf       	out	0x3e, r29	; 62
   1a0ce:	0f be       	out	0x3f, r0	; 63
   1a0d0:	cd bf       	out	0x3d, r28	; 61
   1a0d2:	df 91       	pop	r29
   1a0d4:	cf 91       	pop	r28
   1a0d6:	1f 91       	pop	r17
   1a0d8:	0f 91       	pop	r16
   1a0da:	ef 90       	pop	r14
   1a0dc:	df 90       	pop	r13
   1a0de:	cf 90       	pop	r12
   1a0e0:	bf 90       	pop	r11
   1a0e2:	af 90       	pop	r10
   1a0e4:	9f 90       	pop	r9
   1a0e6:	8f 90       	pop	r8
   1a0e8:	6f 90       	pop	r6
   1a0ea:	5f 90       	pop	r5
   1a0ec:	4f 90       	pop	r4
   1a0ee:	3f 90       	pop	r3
   1a0f0:	2f 90       	pop	r2
   1a0f2:	08 95       	ret

0001a0f4 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a0f4:	a5 e0       	ldi	r26, 0x05	; 5
   1a0f6:	b0 e0       	ldi	r27, 0x00	; 0
   1a0f8:	e0 e8       	ldi	r30, 0x80	; 128
   1a0fa:	f0 ed       	ldi	r31, 0xD0	; 208
   1a0fc:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   1a100:	7c 01       	movw	r14, r24
   1a102:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a104:	cb 01       	movw	r24, r22
   1a106:	0e 94 37 bf 	call	0x17e6e	; 0x17e6e <lif_checkname>
   1a10a:	89 2b       	or	r24, r25
   1a10c:	69 f4       	brne	.+26     	; 0x1a128 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a10e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a112:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a116:	92 ff       	sbrs	r25, 2
   1a118:	48 c0       	rjmp	.+144    	; 0x1a1aa <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a11a:	ed b7       	in	r30, 0x3d	; 61
   1a11c:	fe b7       	in	r31, 0x3e	; 62
   1a11e:	d5 83       	std	Z+5, r29	; 0x05
   1a120:	c4 83       	std	Z+4, r28	; 0x04
   1a122:	82 e2       	ldi	r24, 0x22	; 34
   1a124:	96 e3       	ldi	r25, 0x36	; 54
   1a126:	15 c0       	rjmp	.+42     	; 0x1a152 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a128:	fe 01       	movw	r30, r28
   1a12a:	01 90       	ld	r0, Z+
   1a12c:	00 20       	and	r0, r0
   1a12e:	e9 f7       	brne	.-6      	; 0x1a12a <lif_find_file+0x36>
   1a130:	31 97       	sbiw	r30, 0x01	; 1
   1a132:	ec 1b       	sub	r30, r28
   1a134:	fd 0b       	sbc	r31, r29
   1a136:	3b 97       	sbiw	r30, 0x0b	; 11
   1a138:	98 f0       	brcs	.+38     	; 0x1a160 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a13a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a13e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a142:	92 ff       	sbrs	r25, 2
   1a144:	32 c0       	rjmp	.+100    	; 0x1a1aa <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a146:	ed b7       	in	r30, 0x3d	; 61
   1a148:	fe b7       	in	r31, 0x3e	; 62
   1a14a:	d5 83       	std	Z+5, r29	; 0x05
   1a14c:	c4 83       	std	Z+4, r28	; 0x04
   1a14e:	8d ef       	ldi	r24, 0xFD	; 253
   1a150:	95 e3       	ldi	r25, 0x35	; 53
   1a152:	a0 e0       	ldi	r26, 0x00	; 0
   1a154:	81 83       	std	Z+1, r24	; 0x01
   1a156:	92 83       	std	Z+2, r25	; 0x02
   1a158:	a3 83       	std	Z+3, r26	; 0x03
   1a15a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a15e:	25 c0       	rjmp	.+74     	; 0x1a1aa <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a160:	e1 14       	cp	r14, r1
   1a162:	f1 04       	cpc	r15, r1
   1a164:	11 f1       	breq	.+68     	; 0x1a1aa <lif_find_file+0xb6>
   1a166:	00 e0       	ldi	r16, 0x00	; 0
   1a168:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a16a:	67 01       	movw	r12, r14
   1a16c:	fa e5       	ldi	r31, 0x5A	; 90
   1a16e:	cf 0e       	add	r12, r31
   1a170:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a172:	57 01       	movw	r10, r14
   1a174:	2f e4       	ldi	r18, 0x4F	; 79
   1a176:	a2 0e       	add	r10, r18
   1a178:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a17a:	b8 01       	movw	r22, r16
   1a17c:	c7 01       	movw	r24, r14
   1a17e:	0e 94 76 c7 	call	0x18eec	; 0x18eec <lif_readdirindex>
   1a182:	89 2b       	or	r24, r25
   1a184:	91 f0       	breq	.+36     	; 0x1a1aa <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a186:	f6 01       	movw	r30, r12
   1a188:	80 81       	ld	r24, Z
   1a18a:	91 81       	ldd	r25, Z+1	; 0x01
   1a18c:	8f 3f       	cpi	r24, 0xFF	; 255
   1a18e:	ff ef       	ldi	r31, 0xFF	; 255
   1a190:	9f 07       	cpc	r25, r31
   1a192:	59 f0       	breq	.+22     	; 0x1a1aa <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a194:	89 2b       	or	r24, r25
   1a196:	31 f0       	breq	.+12     	; 0x1a1a4 <lif_find_file+0xb0>
   1a198:	be 01       	movw	r22, r28
   1a19a:	c5 01       	movw	r24, r10
   1a19c:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <strcasecmp>
   1a1a0:	89 2b       	or	r24, r25
   1a1a2:	31 f0       	breq	.+12     	; 0x1a1b0 <lif_find_file+0xbc>
            break;
        ++index;
   1a1a4:	0f 5f       	subi	r16, 0xFF	; 255
   1a1a6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a1a8:	e8 cf       	rjmp	.-48     	; 0x1a17a <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a1aa:	8f ef       	ldi	r24, 0xFF	; 255
   1a1ac:	9f ef       	ldi	r25, 0xFF	; 255
   1a1ae:	01 c0       	rjmp	.+2      	; 0x1a1b2 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1b0:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a1b2:	cd b7       	in	r28, 0x3d	; 61
   1a1b4:	de b7       	in	r29, 0x3e	; 62
   1a1b6:	25 96       	adiw	r28, 0x05	; 5
   1a1b8:	ea e0       	ldi	r30, 0x0A	; 10
   1a1ba:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0001a1be <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a1be:	a5 e0       	ldi	r26, 0x05	; 5
   1a1c0:	b0 e0       	ldi	r27, 0x00	; 0
   1a1c2:	e5 ee       	ldi	r30, 0xE5	; 229
   1a1c4:	f0 ed       	ldi	r31, 0xD0	; 208
   1a1c6:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__prologue_saves__+0x14>
   1a1ca:	6b 01       	movw	r12, r22
   1a1cc:	7c 01       	movw	r14, r24
   1a1ce:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a1d0:	20 e0       	ldi	r18, 0x00	; 0
   1a1d2:	31 e0       	ldi	r19, 0x01	; 1
   1a1d4:	40 e0       	ldi	r20, 0x00	; 0
   1a1d6:	50 e0       	ldi	r21, 0x00	; 0
   1a1d8:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
    if(!pos)
   1a1dc:	61 15       	cp	r22, r1
   1a1de:	71 05       	cpc	r23, r1
   1a1e0:	e1 f1       	breq	.+120    	; 0x1a25a <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a1e2:	c0 e0       	ldi	r28, 0x00	; 0
   1a1e4:	d1 e0       	ldi	r29, 0x01	; 1
   1a1e6:	c6 1b       	sub	r28, r22
   1a1e8:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a1ea:	f8 01       	movw	r30, r16
   1a1ec:	8f ee       	ldi	r24, 0xEF	; 239
   1a1ee:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a1f0:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a1f2:	cf 01       	movw	r24, r30
   1a1f4:	80 1b       	sub	r24, r16
   1a1f6:	91 0b       	sbc	r25, r17
   1a1f8:	8c 17       	cp	r24, r28
   1a1fa:	9d 07       	cpc	r25, r29
   1a1fc:	14 f4       	brge	.+4      	; 0x1a202 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a1fe:	21 93       	st	Z+, r18
   1a200:	f8 cf       	rjmp	.-16     	; 0x1a1f2 <lif_e010_pad_sector+0x34>
   1a202:	1c 16       	cp	r1, r28
   1a204:	1d 06       	cpc	r1, r29
   1a206:	14 f0       	brlt	.+4      	; 0x1a20c <lif_e010_pad_sector+0x4e>
   1a208:	c1 e0       	ldi	r28, 0x01	; 1
   1a20a:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a20c:	ce 01       	movw	r24, r28
   1a20e:	0d 2e       	mov	r0, r29
   1a210:	00 0c       	add	r0, r0
   1a212:	aa 0b       	sbc	r26, r26
   1a214:	bb 0b       	sbc	r27, r27
   1a216:	bc 01       	movw	r22, r24
   1a218:	cd 01       	movw	r24, r26
   1a21a:	6c 0d       	add	r22, r12
   1a21c:	7d 1d       	adc	r23, r13
   1a21e:	8e 1d       	adc	r24, r14
   1a220:	9f 1d       	adc	r25, r15
   1a222:	20 e0       	ldi	r18, 0x00	; 0
   1a224:	31 e0       	ldi	r19, 0x01	; 1
   1a226:	40 e0       	ldi	r20, 0x00	; 0
   1a228:	50 e0       	ldi	r21, 0x00	; 0
   1a22a:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a22e:	61 15       	cp	r22, r1
   1a230:	71 05       	cpc	r23, r1
   1a232:	b1 f0       	breq	.+44     	; 0x1a260 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a234:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a238:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a23c:	32 ff       	sbrs	r19, 2
   1a23e:	12 c0       	rjmp	.+36     	; 0x1a264 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a240:	ed b7       	in	r30, 0x3d	; 61
   1a242:	fe b7       	in	r31, 0x3e	; 62
   1a244:	75 83       	std	Z+5, r23	; 0x05
   1a246:	64 83       	std	Z+4, r22	; 0x04
   1a248:	84 ec       	ldi	r24, 0xC4	; 196
   1a24a:	95 e3       	ldi	r25, 0x35	; 53
   1a24c:	a0 e0       	ldi	r26, 0x00	; 0
   1a24e:	81 83       	std	Z+1, r24	; 0x01
   1a250:	92 83       	std	Z+2, r25	; 0x02
   1a252:	a3 83       	std	Z+3, r26	; 0x03
   1a254:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a258:	05 c0       	rjmp	.+10     	; 0x1a264 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a25a:	80 e0       	ldi	r24, 0x00	; 0
   1a25c:	90 e0       	ldi	r25, 0x00	; 0
   1a25e:	04 c0       	rjmp	.+8      	; 0x1a268 <lif_e010_pad_sector+0xaa>
   1a260:	ce 01       	movw	r24, r28
   1a262:	02 c0       	rjmp	.+4      	; 0x1a268 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a264:	8f ef       	ldi	r24, 0xFF	; 255
   1a266:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a268:	cd b7       	in	r28, 0x3d	; 61
   1a26a:	de b7       	in	r29, 0x3e	; 62
   1a26c:	25 96       	adiw	r28, 0x05	; 5
   1a26e:	e8 e0       	ldi	r30, 0x08	; 8
   1a270:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__epilogue_restores__+0x14>

0001a274 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a274:	a5 e0       	ldi	r26, 0x05	; 5
   1a276:	b0 e0       	ldi	r27, 0x00	; 0
   1a278:	e0 e4       	ldi	r30, 0x40	; 64
   1a27a:	f1 ed       	ldi	r31, 0xD1	; 209
   1a27c:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   1a280:	ec 01       	movw	r28, r24
   1a282:	4a 01       	movw	r8, r20
   1a284:	5b 01       	movw	r10, r22
   1a286:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a288:	fc 01       	movw	r30, r24
   1a28a:	01 90       	ld	r0, Z+
   1a28c:	00 20       	and	r0, r0
   1a28e:	e9 f7       	brne	.-6      	; 0x1a28a <lif_ascii_string_to_e010+0x16>
   1a290:	31 97       	sbiw	r30, 0x01	; 1
   1a292:	6f 01       	movw	r12, r30
   1a294:	c8 1a       	sub	r12, r24
   1a296:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a298:	41 2c       	mov	r4, r1
   1a29a:	51 2c       	mov	r5, r1
   1a29c:	32 01       	movw	r6, r4
   1a29e:	53 94       	inc	r5
   1a2a0:	cb 01       	movw	r24, r22
   1a2a2:	ba 01       	movw	r22, r20
   1a2a4:	a3 01       	movw	r20, r6
   1a2a6:	92 01       	movw	r18, r4
   1a2a8:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
   1a2ac:	21 2c       	mov	r2, r1
   1a2ae:	33 24       	eor	r3, r3
   1a2b0:	33 94       	inc	r3
   1a2b2:	c1 01       	movw	r24, r2
   1a2b4:	86 1b       	sub	r24, r22
   1a2b6:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a2b8:	86 30       	cpi	r24, 0x06	; 6
   1a2ba:	91 05       	cpc	r25, r1
   1a2bc:	20 f0       	brcs	.+8      	; 0x1a2c6 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a2be:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a2c0:	00 e0       	ldi	r16, 0x00	; 0
   1a2c2:	10 e0       	ldi	r17, 0x00	; 0
   1a2c4:	17 c0       	rjmp	.+46     	; 0x1a2f4 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a2c6:	a7 01       	movw	r20, r14
   1a2c8:	c5 01       	movw	r24, r10
   1a2ca:	b4 01       	movw	r22, r8
   1a2cc:	78 df       	rcall	.-272    	; 0x1a1be <lif_e010_pad_sector>
   1a2ce:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a2d0:	97 fd       	sbrc	r25, 7
   1a2d2:	83 c0       	rjmp	.+262    	; 0x1a3da <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a2d4:	09 2e       	mov	r0, r25
   1a2d6:	00 0c       	add	r0, r0
   1a2d8:	aa 0b       	sbc	r26, r26
   1a2da:	bb 0b       	sbc	r27, r27
   1a2dc:	bc 01       	movw	r22, r24
   1a2de:	cd 01       	movw	r24, r26
   1a2e0:	68 0d       	add	r22, r8
   1a2e2:	79 1d       	adc	r23, r9
   1a2e4:	8a 1d       	adc	r24, r10
   1a2e6:	9b 1d       	adc	r25, r11
   1a2e8:	a3 01       	movw	r20, r6
   1a2ea:	92 01       	movw	r18, r4
   1a2ec:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
   1a2f0:	26 1a       	sub	r2, r22
   1a2f2:	37 0a       	sbc	r3, r23
   1a2f4:	f7 01       	movw	r30, r14
   1a2f6:	e0 0f       	add	r30, r16
   1a2f8:	f1 1f       	adc	r31, r17
   1a2fa:	0d 5f       	subi	r16, 0xFD	; 253
   1a2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a2fe:	c6 01       	movw	r24, r12
   1a300:	02 96       	adiw	r24, 0x02	; 2
   1a302:	82 15       	cp	r24, r2
   1a304:	93 05       	cpc	r25, r3
   1a306:	84 f4       	brge	.+32     	; 0x1a328 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a308:	8f ed       	ldi	r24, 0xDF	; 223
   1a30a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a30c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a30e:	d2 82       	std	Z+2, r13	; 0x02
   1a310:	f7 01       	movw	r30, r14
   1a312:	e0 0f       	add	r30, r16
   1a314:	f1 1f       	adc	r31, r17
   1a316:	cf 01       	movw	r24, r30
   1a318:	8e 19       	sub	r24, r14
   1a31a:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a31c:	29 91       	ld	r18, Y+
   1a31e:	22 23       	and	r18, r18
   1a320:	09 f4       	brne	.+2      	; 0x1a324 <lif_ascii_string_to_e010+0xb0>
   1a322:	5b c0       	rjmp	.+182    	; 0x1a3da <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a324:	21 93       	st	Z+, r18
   1a326:	f7 cf       	rjmp	.-18     	; 0x1a316 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a328:	8f ec       	ldi	r24, 0xCF	; 207
   1a32a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a32c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a32e:	d2 82       	std	Z+2, r13	; 0x02
   1a330:	d7 01       	movw	r26, r14
   1a332:	a0 0f       	add	r26, r16
   1a334:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a336:	fe 01       	movw	r30, r28
   1a338:	81 91       	ld	r24, Z+
   1a33a:	81 11       	cpse	r24, r1
   1a33c:	0e c0       	rjmp	.+28     	; 0x1a35a <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a33e:	c8 01       	movw	r24, r16
   1a340:	01 2e       	mov	r0, r17
   1a342:	00 0c       	add	r0, r0
   1a344:	aa 0b       	sbc	r26, r26
   1a346:	bb 0b       	sbc	r27, r27
   1a348:	bc 01       	movw	r22, r24
   1a34a:	cd 01       	movw	r24, r26
   1a34c:	68 0d       	add	r22, r8
   1a34e:	79 1d       	adc	r23, r9
   1a350:	8a 1d       	adc	r24, r10
   1a352:	9b 1d       	adc	r25, r11
   1a354:	61 11       	cpse	r22, r1
   1a356:	09 c0       	rjmp	.+18     	; 0x1a36a <lif_ascii_string_to_e010+0xf6>
   1a358:	21 c0       	rjmp	.+66     	; 0x1a39c <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a35a:	02 15       	cp	r16, r2
   1a35c:	13 05       	cpc	r17, r3
   1a35e:	7c f7       	brge	.-34     	; 0x1a33e <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a360:	0f 5f       	subi	r16, 0xFF	; 255
   1a362:	1f 4f       	sbci	r17, 0xFF	; 255
   1a364:	8d 93       	st	X+, r24
   1a366:	ef 01       	movw	r28, r30
   1a368:	e6 cf       	rjmp	.-52     	; 0x1a336 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a36a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a36e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a372:	32 ff       	sbrs	r19, 2
   1a374:	30 c0       	rjmp	.+96     	; 0x1a3d6 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a376:	20 e0       	ldi	r18, 0x00	; 0
   1a378:	31 e0       	ldi	r19, 0x01	; 1
   1a37a:	40 e0       	ldi	r20, 0x00	; 0
   1a37c:	50 e0       	ldi	r21, 0x00	; 0
   1a37e:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__divmodsi4>
   1a382:	ed b7       	in	r30, 0x3d	; 61
   1a384:	fe b7       	in	r31, 0x3e	; 62
   1a386:	75 83       	std	Z+5, r23	; 0x05
   1a388:	64 83       	std	Z+4, r22	; 0x04
   1a38a:	80 ea       	ldi	r24, 0xA0	; 160
   1a38c:	95 e3       	ldi	r25, 0x35	; 53
   1a38e:	a0 e0       	ldi	r26, 0x00	; 0
   1a390:	81 83       	std	Z+1, r24	; 0x01
   1a392:	92 83       	std	Z+2, r25	; 0x02
   1a394:	a3 83       	std	Z+3, r26	; 0x03
   1a396:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a39a:	1d c0       	rjmp	.+58     	; 0x1a3d6 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a39c:	fe 01       	movw	r30, r28
   1a39e:	01 90       	ld	r0, Z+
   1a3a0:	00 20       	and	r0, r0
   1a3a2:	e9 f7       	brne	.-6      	; 0x1a39e <lif_ascii_string_to_e010+0x12a>
   1a3a4:	31 97       	sbiw	r30, 0x01	; 1
   1a3a6:	9f 01       	movw	r18, r30
   1a3a8:	2c 1b       	sub	r18, r28
   1a3aa:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a3ac:	d7 01       	movw	r26, r14
   1a3ae:	a0 0f       	add	r26, r16
   1a3b0:	b1 1f       	adc	r27, r17
   1a3b2:	8f e6       	ldi	r24, 0x6F	; 111
   1a3b4:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a3b6:	fd 01       	movw	r30, r26
   1a3b8:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a3ba:	32 83       	std	Z+2, r19	; 0x02
   1a3bc:	0d 5f       	subi	r16, 0xFD	; 253
   1a3be:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3c0:	f7 01       	movw	r30, r14
   1a3c2:	e0 0f       	add	r30, r16
   1a3c4:	f1 1f       	adc	r31, r17
   1a3c6:	cf 01       	movw	r24, r30
   1a3c8:	8e 19       	sub	r24, r14
   1a3ca:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a3cc:	29 91       	ld	r18, Y+
   1a3ce:	22 23       	and	r18, r18
   1a3d0:	21 f0       	breq	.+8      	; 0x1a3da <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a3d2:	21 93       	st	Z+, r18
   1a3d4:	f8 cf       	rjmp	.-16     	; 0x1a3c6 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a3d6:	8f ef       	ldi	r24, 0xFF	; 255
   1a3d8:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a3da:	cd b7       	in	r28, 0x3d	; 61
   1a3dc:	de b7       	in	r29, 0x3e	; 62
   1a3de:	25 96       	adiw	r28, 0x05	; 5
   1a3e0:	e2 e1       	ldi	r30, 0x12	; 18
   1a3e2:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0001a3e6 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a3e6:	ad e0       	ldi	r26, 0x0D	; 13
   1a3e8:	b3 e0       	ldi	r27, 0x03	; 3
   1a3ea:	e9 ef       	ldi	r30, 0xF9	; 249
   1a3ec:	f1 ed       	ldi	r31, 0xD1	; 209
   1a3ee:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   1a3f2:	5c 01       	movw	r10, r24
   1a3f4:	2a 01       	movw	r4, r20
   1a3f6:	3b 01       	movw	r6, r22
   1a3f8:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a3fa:	6e ef       	ldi	r22, 0xFE	; 254
   1a3fc:	78 e0       	ldi	r23, 0x08	; 8
   1a3fe:	0e 94 98 bd 	call	0x17b30	; 0x17b30 <lif_open>
   1a402:	c7 5f       	subi	r28, 0xF7	; 247
   1a404:	dc 4f       	sbci	r29, 0xFC	; 252
   1a406:	99 83       	std	Y+1, r25	; 0x01
   1a408:	88 83       	st	Y, r24
   1a40a:	c9 50       	subi	r28, 0x09	; 9
   1a40c:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a40e:	89 2b       	or	r24, r25
   1a410:	09 f4       	brne	.+2      	; 0x1a414 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a412:	63 c0       	rjmp	.+198    	; 0x1a4da <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a414:	81 2c       	mov	r8, r1
   1a416:	91 2c       	mov	r9, r1
   1a418:	c1 2c       	mov	r12, r1
   1a41a:	d1 2c       	mov	r13, r1
   1a41c:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a41e:	82 e9       	ldi	r24, 0x92	; 146
   1a420:	95 e3       	ldi	r25, 0x35	; 53
   1a422:	9c 01       	movw	r18, r24
   1a424:	40 e0       	ldi	r20, 0x00	; 0
   1a426:	c5 5f       	subi	r28, 0xF5	; 245
   1a428:	dc 4f       	sbci	r29, 0xFC	; 252
   1a42a:	28 83       	st	Y, r18
   1a42c:	39 83       	std	Y+1, r19	; 0x01
   1a42e:	4a 83       	std	Y+2, r20	; 0x02
   1a430:	cb 50       	subi	r28, 0x0B	; 11
   1a432:	d3 40       	sbci	r29, 0x03	; 3
   1a434:	14 c0       	rjmp	.+40     	; 0x1a45e <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a436:	c1 01       	movw	r24, r2
   1a438:	03 2c       	mov	r0, r3
   1a43a:	00 0c       	add	r0, r0
   1a43c:	aa 0b       	sbc	r26, r26
   1a43e:	bb 0b       	sbc	r27, r27
   1a440:	48 0e       	add	r4, r24
   1a442:	59 1e       	adc	r5, r25
   1a444:	6a 1e       	adc	r6, r26
   1a446:	7b 1e       	adc	r7, r27
        bytes += size;
   1a448:	c8 0e       	add	r12, r24
   1a44a:	d9 1e       	adc	r13, r25
   1a44c:	ea 1e       	adc	r14, r26
   1a44e:	fb 1e       	adc	r15, r27
        count += size;
   1a450:	82 0c       	add	r8, r2
   1a452:	93 1c       	adc	r9, r3

        if(count > 256)
   1a454:	31 e0       	ldi	r19, 0x01	; 1
   1a456:	83 16       	cp	r8, r19
   1a458:	93 06       	cpc	r9, r19
   1a45a:	0c f0       	brlt	.+2      	; 0x1a45e <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a45c:	43 c0       	rjmp	.+134    	; 0x1a4e4 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a45e:	c7 5f       	subi	r28, 0xF7	; 247
   1a460:	dc 4f       	sbci	r29, 0xFC	; 252
   1a462:	48 81       	ld	r20, Y
   1a464:	59 81       	ldd	r21, Y+1	; 0x01
   1a466:	c9 50       	subi	r28, 0x09	; 9
   1a468:	d3 40       	sbci	r29, 0x03	; 3
   1a46a:	6d ef       	ldi	r22, 0xFD	; 253
   1a46c:	70 e0       	ldi	r23, 0x00	; 0
   1a46e:	ce 01       	movw	r24, r28
   1a470:	88 5f       	subi	r24, 0xF8	; 248
   1a472:	9d 4f       	sbci	r25, 0xFD	; 253
   1a474:	0e 94 87 74 	call	0xe90e	; 0xe90e <fgets>
   1a478:	89 2b       	or	r24, r25
   1a47a:	09 f4       	brne	.+2      	; 0x1a47e <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a47c:	4b c0       	rjmp	.+150    	; 0x1a514 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a47e:	ce 01       	movw	r24, r28
   1a480:	88 5f       	subi	r24, 0xF8	; 248
   1a482:	9d 4f       	sbci	r25, 0xFD	; 253
   1a484:	0e 94 4f 30 	call	0x609e	; 0x609e <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a488:	6d e4       	ldi	r22, 0x4D	; 77
   1a48a:	76 e1       	ldi	r23, 0x16	; 22
   1a48c:	ce 01       	movw	r24, r28
   1a48e:	88 5f       	subi	r24, 0xF8	; 248
   1a490:	9d 4f       	sbci	r25, 0xFD	; 253
   1a492:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a496:	9e 01       	movw	r18, r28
   1a498:	28 5f       	subi	r18, 0xF8	; 248
   1a49a:	3f 4f       	sbci	r19, 0xFF	; 255
   1a49c:	b3 01       	movw	r22, r6
   1a49e:	a2 01       	movw	r20, r4
   1a4a0:	ce 01       	movw	r24, r28
   1a4a2:	88 5f       	subi	r24, 0xF8	; 248
   1a4a4:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4a6:	e6 de       	rcall	.-564    	; 0x1a274 <lif_ascii_string_to_e010>
   1a4a8:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a4aa:	a1 14       	cp	r10, r1
   1a4ac:	b1 04       	cpc	r11, r1
   1a4ae:	19 f2       	breq	.-122    	; 0x1a436 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a4b0:	8c 01       	movw	r16, r24
   1a4b2:	a3 01       	movw	r20, r6
   1a4b4:	92 01       	movw	r18, r4
   1a4b6:	be 01       	movw	r22, r28
   1a4b8:	68 5f       	subi	r22, 0xF8	; 248
   1a4ba:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4bc:	c5 01       	movw	r24, r10
   1a4be:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
            if(len < size)
   1a4c2:	82 15       	cp	r24, r2
   1a4c4:	93 05       	cpc	r25, r3
   1a4c6:	0c f0       	brlt	.+2      	; 0x1a4ca <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a4c8:	b6 cf       	rjmp	.-148    	; 0x1a436 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a4ca:	c7 5f       	subi	r28, 0xF7	; 247
   1a4cc:	dc 4f       	sbci	r29, 0xFC	; 252
   1a4ce:	88 81       	ld	r24, Y
   1a4d0:	99 81       	ldd	r25, Y+1	; 0x01
   1a4d2:	c9 50       	subi	r28, 0x09	; 9
   1a4d4:	d3 40       	sbci	r29, 0x03	; 3
   1a4d6:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
                return(-1);
   1a4da:	6f ef       	ldi	r22, 0xFF	; 255
   1a4dc:	7f ef       	ldi	r23, 0xFF	; 255
   1a4de:	8f ef       	ldi	r24, 0xFF	; 255
   1a4e0:	9f ef       	ldi	r25, 0xFF	; 255
   1a4e2:	84 c0       	rjmp	.+264    	; 0x1a5ec <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a4e4:	a1 14       	cp	r10, r1
   1a4e6:	b1 04       	cpc	r11, r1
   1a4e8:	91 f0       	breq	.+36     	; 0x1a50e <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a4ea:	ed b7       	in	r30, 0x3d	; 61
   1a4ec:	fe b7       	in	r31, 0x3e	; 62
   1a4ee:	c4 82       	std	Z+4, r12	; 0x04
   1a4f0:	d5 82       	std	Z+5, r13	; 0x05
   1a4f2:	e6 82       	std	Z+6, r14	; 0x06
   1a4f4:	f7 82       	std	Z+7, r15	; 0x07
   1a4f6:	c5 5f       	subi	r28, 0xF5	; 245
   1a4f8:	dc 4f       	sbci	r29, 0xFC	; 252
   1a4fa:	28 81       	ld	r18, Y
   1a4fc:	39 81       	ldd	r19, Y+1	; 0x01
   1a4fe:	4a 81       	ldd	r20, Y+2	; 0x02
   1a500:	cb 50       	subi	r28, 0x0B	; 11
   1a502:	d3 40       	sbci	r29, 0x03	; 3
   1a504:	21 83       	std	Z+1, r18	; 0x01
   1a506:	32 83       	std	Z+2, r19	; 0x02
   1a508:	43 83       	std	Z+3, r20	; 0x03
   1a50a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a50e:	81 2c       	mov	r8, r1
   1a510:	91 2c       	mov	r9, r1
   1a512:	a5 cf       	rjmp	.-182    	; 0x1a45e <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a514:	c7 5f       	subi	r28, 0xF7	; 247
   1a516:	dc 4f       	sbci	r29, 0xFC	; 252
   1a518:	88 81       	ld	r24, Y
   1a51a:	99 81       	ldd	r25, Y+1	; 0x01
   1a51c:	c9 50       	subi	r28, 0x09	; 9
   1a51e:	d3 40       	sbci	r29, 0x03	; 3
   1a520:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>

// Write EOF
    str[0] = 0;
   1a524:	c8 5f       	subi	r28, 0xF8	; 248
   1a526:	dd 4f       	sbci	r29, 0xFD	; 253
   1a528:	18 82       	st	Y, r1
   1a52a:	c8 50       	subi	r28, 0x08	; 8
   1a52c:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a52e:	9e 01       	movw	r18, r28
   1a530:	28 5f       	subi	r18, 0xF8	; 248
   1a532:	3f 4f       	sbci	r19, 0xFF	; 255
   1a534:	b3 01       	movw	r22, r6
   1a536:	a2 01       	movw	r20, r4
   1a538:	ce 01       	movw	r24, r28
   1a53a:	88 5f       	subi	r24, 0xF8	; 248
   1a53c:	9d 4f       	sbci	r25, 0xFD	; 253
   1a53e:	9a de       	rcall	.-716    	; 0x1a274 <lif_ascii_string_to_e010>
   1a540:	4c 01       	movw	r8, r24

    if(LIF)
   1a542:	a1 14       	cp	r10, r1
   1a544:	b1 04       	cpc	r11, r1
   1a546:	d1 f4       	brne	.+52     	; 0x1a57c <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a548:	c4 01       	movw	r24, r8
   1a54a:	09 2c       	mov	r0, r9
   1a54c:	00 0c       	add	r0, r0
   1a54e:	aa 0b       	sbc	r26, r26
   1a550:	bb 0b       	sbc	r27, r27
   1a552:	c8 0e       	add	r12, r24
   1a554:	d9 1e       	adc	r13, r25
   1a556:	ea 1e       	adc	r14, r26
   1a558:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a55a:	12 01       	movw	r2, r4
   1a55c:	23 01       	movw	r4, r6
   1a55e:	28 0e       	add	r2, r24
   1a560:	39 1e       	adc	r3, r25
   1a562:	4a 1e       	adc	r4, r26
   1a564:	5b 1e       	adc	r5, r27
   1a566:	ae 01       	movw	r20, r28
   1a568:	48 5f       	subi	r20, 0xF8	; 248
   1a56a:	5f 4f       	sbci	r21, 0xFF	; 255
   1a56c:	c2 01       	movw	r24, r4
   1a56e:	b1 01       	movw	r22, r2
   1a570:	26 de       	rcall	.-948    	; 0x1a1be <lif_e010_pad_sector>
   1a572:	3c 01       	movw	r6, r24
    if(LIF)
   1a574:	a1 14       	cp	r10, r1
   1a576:	b1 04       	cpc	r11, r1
   1a578:	e1 f4       	brne	.+56     	; 0x1a5b2 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a57a:	36 c0       	rjmp	.+108    	; 0x1a5e8 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a57c:	ed b7       	in	r30, 0x3d	; 61
   1a57e:	fe b7       	in	r31, 0x3e	; 62
   1a580:	c4 82       	std	Z+4, r12	; 0x04
   1a582:	d5 82       	std	Z+5, r13	; 0x05
   1a584:	e6 82       	std	Z+6, r14	; 0x06
   1a586:	f7 82       	std	Z+7, r15	; 0x07
   1a588:	84 e8       	ldi	r24, 0x84	; 132
   1a58a:	95 e3       	ldi	r25, 0x35	; 53
   1a58c:	a0 e0       	ldi	r26, 0x00	; 0
   1a58e:	81 83       	std	Z+1, r24	; 0x01
   1a590:	92 83       	std	Z+2, r25	; 0x02
   1a592:	a3 83       	std	Z+3, r26	; 0x03
   1a594:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a598:	84 01       	movw	r16, r8
   1a59a:	a3 01       	movw	r20, r6
   1a59c:	92 01       	movw	r18, r4
   1a59e:	be 01       	movw	r22, r28
   1a5a0:	68 5f       	subi	r22, 0xF8	; 248
   1a5a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5a4:	c5 01       	movw	r24, r10
   1a5a6:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
        if(len < size)
   1a5aa:	88 15       	cp	r24, r8
   1a5ac:	99 05       	cpc	r25, r9
   1a5ae:	64 f6       	brge	.-104    	; 0x1a548 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a5b0:	94 cf       	rjmp	.-216    	; 0x1a4da <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a5b2:	8c 01       	movw	r16, r24
   1a5b4:	a2 01       	movw	r20, r4
   1a5b6:	91 01       	movw	r18, r2
   1a5b8:	be 01       	movw	r22, r28
   1a5ba:	68 5f       	subi	r22, 0xF8	; 248
   1a5bc:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5be:	c5 01       	movw	r24, r10
   1a5c0:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
        if(len < size)
   1a5c4:	86 15       	cp	r24, r6
   1a5c6:	97 05       	cpc	r25, r7
   1a5c8:	0c f4       	brge	.+2      	; 0x1a5cc <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a5ca:	87 cf       	rjmp	.-242    	; 0x1a4da <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a5cc:	ed b7       	in	r30, 0x3d	; 61
   1a5ce:	fe b7       	in	r31, 0x3e	; 62
   1a5d0:	c4 82       	std	Z+4, r12	; 0x04
   1a5d2:	d5 82       	std	Z+5, r13	; 0x05
   1a5d4:	e6 82       	std	Z+6, r14	; 0x06
   1a5d6:	f7 82       	std	Z+7, r15	; 0x07
   1a5d8:	86 e7       	ldi	r24, 0x76	; 118
   1a5da:	95 e3       	ldi	r25, 0x35	; 53
   1a5dc:	a0 e0       	ldi	r26, 0x00	; 0
   1a5de:	81 83       	std	Z+1, r24	; 0x01
   1a5e0:	92 83       	std	Z+2, r25	; 0x02
   1a5e2:	a3 83       	std	Z+3, r26	; 0x03
   1a5e4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    return(bytes);
   1a5e8:	b6 01       	movw	r22, r12
   1a5ea:	c7 01       	movw	r24, r14
}
   1a5ec:	c3 5f       	subi	r28, 0xF3	; 243
   1a5ee:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5f0:	e2 e1       	ldi	r30, 0x12	; 18
   1a5f2:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0001a5f6 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a5f6:	ab e3       	ldi	r26, 0x3B	; 59
   1a5f8:	b0 e0       	ldi	r27, 0x00	; 0
   1a5fa:	e1 e0       	ldi	r30, 0x01	; 1
   1a5fc:	f3 ed       	ldi	r31, 0xD3	; 211
   1a5fe:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   1a602:	6c 01       	movw	r12, r24
   1a604:	1b 01       	movw	r2, r22
   1a606:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a608:	fc 01       	movw	r30, r24
   1a60a:	80 81       	ld	r24, Z
   1a60c:	81 11       	cpse	r24, r1
   1a60e:	03 c0       	rjmp	.+6      	; 0x1a616 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a610:	83 e4       	ldi	r24, 0x43	; 67
   1a612:	95 e3       	ldi	r25, 0x35	; 53
   1a614:	1a c0       	rjmp	.+52     	; 0x1a64a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a616:	fb 01       	movw	r30, r22
   1a618:	80 81       	ld	r24, Z
   1a61a:	81 11       	cpse	r24, r1
   1a61c:	03 c0       	rjmp	.+6      	; 0x1a624 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a61e:	85 e1       	ldi	r24, 0x15	; 21
   1a620:	95 e3       	ldi	r25, 0x35	; 53
   1a622:	13 c0       	rjmp	.+38     	; 0x1a64a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a624:	fa 01       	movw	r30, r20
   1a626:	80 81       	ld	r24, Z
   1a628:	81 11       	cpse	r24, r1
   1a62a:	03 c0       	rjmp	.+6      	; 0x1a632 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a62c:	86 ee       	ldi	r24, 0xE6	; 230
   1a62e:	94 e3       	ldi	r25, 0x34	; 52
   1a630:	0c c0       	rjmp	.+24     	; 0x1a64a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a632:	be 01       	movw	r22, r28
   1a634:	66 5f       	subi	r22, 0xF6	; 246
   1a636:	7f 4f       	sbci	r23, 0xFF	; 255
   1a638:	ca 01       	movw	r24, r20
   1a63a:	0e 94 c2 bd 	call	0x17b84	; 0x17b84 <lif_stat>
   1a63e:	9b af       	std	Y+59, r25	; 0x3b
   1a640:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a642:	89 2b       	or	r24, r25
   1a644:	59 f4       	brne	.+22     	; 0x1a65c <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a646:	86 eb       	ldi	r24, 0xB6	; 182
   1a648:	94 e3       	ldi	r25, 0x34	; 52
   1a64a:	a0 e0       	ldi	r26, 0x00	; 0
   1a64c:	ed b7       	in	r30, 0x3d	; 61
   1a64e:	fe b7       	in	r31, 0x3e	; 62
   1a650:	81 83       	std	Z+1, r24	; 0x01
   1a652:	92 83       	std	Z+2, r25	; 0x02
   1a654:	a3 83       	std	Z+3, r26	; 0x03
   1a656:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a65a:	01 c1       	rjmp	.+514    	; 0x1a85e <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a65c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a660:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a664:	92 ff       	sbrs	r25, 2
   1a666:	10 c0       	rjmp	.+32     	; 0x1a688 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a668:	ed b7       	in	r30, 0x3d	; 61
   1a66a:	fe b7       	in	r31, 0x3e	; 62
   1a66c:	f1 86       	std	Z+9, r15	; 0x09
   1a66e:	e0 86       	std	Z+8, r14	; 0x08
   1a670:	37 82       	std	Z+7, r3	; 0x07
   1a672:	26 82       	std	Z+6, r2	; 0x06
   1a674:	d5 82       	std	Z+5, r13	; 0x05
   1a676:	c4 82       	std	Z+4, r12	; 0x04
   1a678:	87 e8       	ldi	r24, 0x87	; 135
   1a67a:	94 e3       	ldi	r25, 0x34	; 52
   1a67c:	a0 e0       	ldi	r26, 0x00	; 0
   1a67e:	81 83       	std	Z+1, r24	; 0x01
   1a680:	92 83       	std	Z+2, r25	; 0x02
   1a682:	a3 83       	std	Z+3, r26	; 0x03
   1a684:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a688:	97 01       	movw	r18, r14
   1a68a:	40 e0       	ldi	r20, 0x00	; 0
   1a68c:	50 e0       	ldi	r21, 0x00	; 0
   1a68e:	ba 01       	movw	r22, r20
   1a690:	80 e0       	ldi	r24, 0x00	; 0
   1a692:	90 e0       	ldi	r25, 0x00	; 0
   1a694:	a8 de       	rcall	.-688    	; 0x1a3e6 <lif_add_ascii_file_as_e010_wrapper>
   1a696:	4b 01       	movw	r8, r22
   1a698:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a69a:	47 2e       	mov	r4, r23
   1a69c:	58 2e       	mov	r5, r24
   1a69e:	69 2e       	mov	r6, r25
   1a6a0:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a6a2:	66 23       	and	r22, r22
   1a6a4:	29 f0       	breq	.+10     	; 0x1a6b0 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a6a6:	ff ef       	ldi	r31, 0xFF	; 255
   1a6a8:	4f 1a       	sub	r4, r31
   1a6aa:	5f 0a       	sbc	r5, r31
   1a6ac:	6f 0a       	sbc	r6, r31
   1a6ae:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a6b0:	61 e0       	ldi	r22, 0x01	; 1
   1a6b2:	79 e0       	ldi	r23, 0x09	; 9
   1a6b4:	c6 01       	movw	r24, r12
   1a6b6:	49 da       	rcall	.-2926   	; 0x19b4a <lif_open_volume>
   1a6b8:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a6ba:	00 97       	sbiw	r24, 0x00	; 0
   1a6bc:	09 f4       	brne	.+2      	; 0x1a6c0 <lif_add_ascii_file_as_e010+0xca>
   1a6be:	cf c0       	rjmp	.+414    	; 0x1a85e <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a6c0:	b3 01       	movw	r22, r6
   1a6c2:	a2 01       	movw	r20, r4
   1a6c4:	e2 d8       	rcall	.-3644   	; 0x1988a <lif_newdir>
   1a6c6:	3c 01       	movw	r6, r24
    if(index == -1)
   1a6c8:	8f ef       	ldi	r24, 0xFF	; 255
   1a6ca:	68 16       	cp	r6, r24
   1a6cc:	78 06       	cpc	r7, r24
   1a6ce:	79 f4       	brne	.+30     	; 0x1a6ee <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a6d0:	ed b7       	in	r30, 0x3d	; 61
   1a6d2:	fe b7       	in	r31, 0x3e	; 62
   1a6d4:	f7 82       	std	Z+7, r15	; 0x07
   1a6d6:	e6 82       	std	Z+6, r14	; 0x06
   1a6d8:	d5 82       	std	Z+5, r13	; 0x05
   1a6da:	c4 82       	std	Z+4, r12	; 0x04
   1a6dc:	87 e5       	ldi	r24, 0x57	; 87
   1a6de:	94 e3       	ldi	r25, 0x34	; 52
   1a6e0:	a0 e0       	ldi	r26, 0x00	; 0
   1a6e2:	81 83       	std	Z+1, r24	; 0x01
   1a6e4:	92 83       	std	Z+2, r25	; 0x02
   1a6e6:	a3 83       	std	Z+3, r26	; 0x03
   1a6e8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a6ec:	a0 c0       	rjmp	.+320    	; 0x1a82e <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a6ee:	68 01       	movw	r12, r16
   1a6f0:	ff e4       	ldi	r31, 0x4F	; 79
   1a6f2:	cf 0e       	add	r12, r31
   1a6f4:	d1 1c       	adc	r13, r1
   1a6f6:	4a e0       	ldi	r20, 0x0A	; 10
   1a6f8:	50 e0       	ldi	r21, 0x00	; 0
   1a6fa:	b1 01       	movw	r22, r2
   1a6fc:	c6 01       	movw	r24, r12
   1a6fe:	0e 94 71 bf 	call	0x17ee2	; 0x17ee2 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a702:	80 e1       	ldi	r24, 0x10	; 16
   1a704:	90 ee       	ldi	r25, 0xE0	; 224
   1a706:	f8 01       	movw	r30, r16
   1a708:	e6 5a       	subi	r30, 0xA6	; 166
   1a70a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a70c:	91 83       	std	Z+1, r25	; 0x01
   1a70e:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a710:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a712:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a714:	60 a5       	ldd	r22, Z+40	; 0x28
   1a716:	71 a5       	ldd	r23, Z+41	; 0x29
   1a718:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a71a:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a71c:	a8 01       	movw	r20, r16
   1a71e:	4c 59       	subi	r20, 0x9C	; 156
   1a720:	5f 4f       	sbci	r21, 0xFF	; 255
   1a722:	0e 94 96 c1 	call	0x1832c	; 0x1832c <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a726:	81 e0       	ldi	r24, 0x01	; 1
   1a728:	90 e8       	ldi	r25, 0x80	; 128
   1a72a:	f8 01       	movw	r30, r16
   1a72c:	e6 59       	subi	r30, 0x96	; 150
   1a72e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a730:	91 83       	std	Z+1, r25	; 0x01
   1a732:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a734:	32 96       	adiw	r30, 0x02	; 2
   1a736:	91 82       	std	Z+1, r9	; 0x01
   1a738:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a73a:	80 e0       	ldi	r24, 0x00	; 0
   1a73c:	91 e0       	ldi	r25, 0x01	; 1
   1a73e:	32 96       	adiw	r30, 0x02	; 2
   1a740:	91 83       	std	Z+1, r25	; 0x01
   1a742:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a744:	58 01       	movw	r10, r16
   1a746:	fc e5       	ldi	r31, 0x5C	; 92
   1a748:	af 0e       	add	r10, r31
   1a74a:	b1 1c       	adc	r11, r1
   1a74c:	f5 01       	movw	r30, r10
   1a74e:	80 81       	ld	r24, Z
   1a750:	91 81       	ldd	r25, Z+1	; 0x01
   1a752:	a2 81       	ldd	r26, Z+2	; 0x02
   1a754:	b3 81       	ldd	r27, Z+3	; 0x03
   1a756:	22 24       	eor	r2, r2
   1a758:	38 2e       	mov	r3, r24
   1a75a:	49 2e       	mov	r4, r25
   1a75c:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a75e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a762:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a766:	92 ff       	sbrs	r25, 2
   1a768:	05 c0       	rjmp	.+10     	; 0x1a774 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a76a:	6f e4       	ldi	r22, 0x4F	; 79
   1a76c:	76 e1       	ldi	r23, 0x16	; 22
   1a76e:	c8 01       	movw	r24, r16
   1a770:	0e 94 82 c2 	call	0x18504	; 0x18504 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a774:	97 01       	movw	r18, r14
   1a776:	b2 01       	movw	r22, r4
   1a778:	a1 01       	movw	r20, r2
   1a77a:	c8 01       	movw	r24, r16
   1a77c:	34 de       	rcall	.-920    	; 0x1a3e6 <lif_add_ascii_file_as_e010_wrapper>
   1a77e:	4b 01       	movw	r8, r22
   1a780:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a782:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a786:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a78a:	92 ff       	sbrs	r25, 2
   1a78c:	4a c0       	rjmp	.+148    	; 0x1a822 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a78e:	80 e3       	ldi	r24, 0x30	; 48
   1a790:	94 e3       	ldi	r25, 0x34	; 52
   1a792:	a0 e0       	ldi	r26, 0x00	; 0
   1a794:	ed b7       	in	r30, 0x3d	; 61
   1a796:	fe b7       	in	r31, 0x3e	; 62
   1a798:	81 83       	std	Z+1, r24	; 0x01
   1a79a:	92 83       	std	Z+2, r25	; 0x02
   1a79c:	a3 83       	std	Z+3, r26	; 0x03
   1a79e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a7a2:	ed b7       	in	r30, 0x3d	; 61
   1a7a4:	fe b7       	in	r31, 0x3e	; 62
   1a7a6:	d5 82       	std	Z+5, r13	; 0x05
   1a7a8:	c4 82       	std	Z+4, r12	; 0x04
   1a7aa:	89 e1       	ldi	r24, 0x19	; 25
   1a7ac:	94 e3       	ldi	r25, 0x34	; 52
   1a7ae:	a0 e0       	ldi	r26, 0x00	; 0
   1a7b0:	81 83       	std	Z+1, r24	; 0x01
   1a7b2:	92 83       	std	Z+2, r25	; 0x02
   1a7b4:	a3 83       	std	Z+3, r26	; 0x03
   1a7b6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a7ba:	ed b7       	in	r30, 0x3d	; 61
   1a7bc:	fe b7       	in	r31, 0x3e	; 62
   1a7be:	75 82       	std	Z+5, r7	; 0x05
   1a7c0:	64 82       	std	Z+4, r6	; 0x04
   1a7c2:	82 e0       	ldi	r24, 0x02	; 2
   1a7c4:	94 e3       	ldi	r25, 0x34	; 52
   1a7c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a7c8:	81 83       	std	Z+1, r24	; 0x01
   1a7ca:	92 83       	std	Z+2, r25	; 0x02
   1a7cc:	a3 83       	std	Z+3, r26	; 0x03
   1a7ce:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a7d2:	f5 01       	movw	r30, r10
   1a7d4:	80 81       	ld	r24, Z
   1a7d6:	91 81       	ldd	r25, Z+1	; 0x01
   1a7d8:	a2 81       	ldd	r26, Z+2	; 0x02
   1a7da:	b3 81       	ldd	r27, Z+3	; 0x03
   1a7dc:	ed b7       	in	r30, 0x3d	; 61
   1a7de:	fe b7       	in	r31, 0x3e	; 62
   1a7e0:	84 83       	std	Z+4, r24	; 0x04
   1a7e2:	95 83       	std	Z+5, r25	; 0x05
   1a7e4:	a6 83       	std	Z+6, r26	; 0x06
   1a7e6:	b7 83       	std	Z+7, r27	; 0x07
   1a7e8:	89 ee       	ldi	r24, 0xE9	; 233
   1a7ea:	93 e3       	ldi	r25, 0x33	; 51
   1a7ec:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ee:	81 83       	std	Z+1, r24	; 0x01
   1a7f0:	92 83       	std	Z+2, r25	; 0x02
   1a7f2:	a3 83       	std	Z+3, r26	; 0x03
   1a7f4:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a7f8:	f8 01       	movw	r30, r16
   1a7fa:	e0 5a       	subi	r30, 0xA0	; 160
   1a7fc:	ff 4f       	sbci	r31, 0xFF	; 255
   1a7fe:	80 81       	ld	r24, Z
   1a800:	91 81       	ldd	r25, Z+1	; 0x01
   1a802:	a2 81       	ldd	r26, Z+2	; 0x02
   1a804:	b3 81       	ldd	r27, Z+3	; 0x03
   1a806:	ed b7       	in	r30, 0x3d	; 61
   1a808:	fe b7       	in	r31, 0x3e	; 62
   1a80a:	84 83       	std	Z+4, r24	; 0x04
   1a80c:	95 83       	std	Z+5, r25	; 0x05
   1a80e:	a6 83       	std	Z+6, r26	; 0x06
   1a810:	b7 83       	std	Z+7, r27	; 0x07
   1a812:	80 ed       	ldi	r24, 0xD0	; 208
   1a814:	93 e3       	ldi	r25, 0x33	; 51
   1a816:	a0 e0       	ldi	r26, 0x00	; 0
   1a818:	81 83       	std	Z+1, r24	; 0x01
   1a81a:	92 83       	std	Z+2, r25	; 0x02
   1a81c:	a3 83       	std	Z+3, r26	; 0x03
   1a81e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a822:	b3 01       	movw	r22, r6
   1a824:	c8 01       	movw	r24, r16
   1a826:	0e 94 dd c7 	call	0x18fba	; 0x18fba <lif_writedirindex>
   1a82a:	89 2b       	or	r24, r25
   1a82c:	21 f4       	brne	.+8      	; 0x1a836 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a82e:	c8 01       	movw	r24, r16
   1a830:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1a834:	14 c0       	rjmp	.+40     	; 0x1a85e <lif_add_ascii_file_as_e010+0x268>
   1a836:	c8 01       	movw	r24, r16
   1a838:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a83c:	ed b7       	in	r30, 0x3d	; 61
   1a83e:	fe b7       	in	r31, 0x3e	; 62
   1a840:	84 82       	std	Z+4, r8	; 0x04
   1a842:	95 82       	std	Z+5, r9	; 0x05
   1a844:	e6 82       	std	Z+6, r14	; 0x06
   1a846:	f7 82       	std	Z+7, r15	; 0x07
   1a848:	82 ec       	ldi	r24, 0xC2	; 194
   1a84a:	93 e3       	ldi	r25, 0x33	; 51
   1a84c:	a0 e0       	ldi	r26, 0x00	; 0
   1a84e:	81 83       	std	Z+1, r24	; 0x01
   1a850:	92 83       	std	Z+2, r25	; 0x02
   1a852:	a3 83       	std	Z+3, r26	; 0x03
   1a854:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

// Return file size
    return(bytes);
   1a858:	b4 01       	movw	r22, r8
   1a85a:	c7 01       	movw	r24, r14
   1a85c:	04 c0       	rjmp	.+8      	; 0x1a866 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a85e:	6f ef       	ldi	r22, 0xFF	; 255
   1a860:	7f ef       	ldi	r23, 0xFF	; 255
   1a862:	8f ef       	ldi	r24, 0xFF	; 255
   1a864:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a866:	eb 96       	adiw	r28, 0x3b	; 59
   1a868:	e2 e1       	ldi	r30, 0x12	; 18
   1a86a:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0001a86e <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a86e:	a7 e3       	ldi	r26, 0x37	; 55
   1a870:	b2 e0       	ldi	r27, 0x02	; 2
   1a872:	ed e3       	ldi	r30, 0x3D	; 61
   1a874:	f4 ed       	ldi	r31, 0xD4	; 212
   1a876:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   1a87a:	7c 01       	movw	r14, r24
   1a87c:	8b 01       	movw	r16, r22
   1a87e:	ca 5d       	subi	r28, 0xDA	; 218
   1a880:	dd 4f       	sbci	r29, 0xFD	; 253
   1a882:	59 83       	std	Y+1, r21	; 0x01
   1a884:	48 83       	st	Y, r20
   1a886:	c6 52       	subi	r28, 0x26	; 38
   1a888:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a88a:	62 e4       	ldi	r22, 0x42	; 66
   1a88c:	73 e0       	ldi	r23, 0x03	; 3
   1a88e:	5d d9       	rcall	.-3398   	; 0x19b4a <lif_open_volume>
   1a890:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a892:	00 97       	sbiw	r24, 0x00	; 0
   1a894:	69 f4       	brne	.+26     	; 0x1a8b0 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a896:	ed b7       	in	r30, 0x3d	; 61
   1a898:	fe b7       	in	r31, 0x3e	; 62
   1a89a:	f5 82       	std	Z+5, r15	; 0x05
   1a89c:	e4 82       	std	Z+4, r14	; 0x04
   1a89e:	8a ea       	ldi	r24, 0xAA	; 170
   1a8a0:	93 e3       	ldi	r25, 0x33	; 51
   1a8a2:	a0 e0       	ldi	r26, 0x00	; 0
   1a8a4:	81 83       	std	Z+1, r24	; 0x01
   1a8a6:	92 83       	std	Z+2, r25	; 0x02
   1a8a8:	a3 83       	std	Z+3, r26	; 0x03
   1a8aa:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a8ae:	13 c0       	rjmp	.+38     	; 0x1a8d6 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a8b0:	b8 01       	movw	r22, r16
   1a8b2:	20 dc       	rcall	.-1984   	; 0x1a0f4 <lif_find_file>
    if(index == -1)
   1a8b4:	01 96       	adiw	r24, 0x01	; 1
   1a8b6:	91 f4       	brne	.+36     	; 0x1a8dc <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a8b8:	ed b7       	in	r30, 0x3d	; 61
   1a8ba:	fe b7       	in	r31, 0x3e	; 62
   1a8bc:	15 83       	std	Z+5, r17	; 0x05
   1a8be:	04 83       	std	Z+4, r16	; 0x04
   1a8c0:	83 e9       	ldi	r24, 0x93	; 147
   1a8c2:	93 e3       	ldi	r25, 0x33	; 51
   1a8c4:	a0 e0       	ldi	r26, 0x00	; 0
   1a8c6:	81 83       	std	Z+1, r24	; 0x01
   1a8c8:	92 83       	std	Z+2, r25	; 0x02
   1a8ca:	a3 83       	std	Z+3, r26	; 0x03
   1a8cc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a8d0:	c6 01       	movw	r24, r12
   1a8d2:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a8d6:	80 e0       	ldi	r24, 0x00	; 0
   1a8d8:	90 e0       	ldi	r25, 0x00	; 0
   1a8da:	73 c2       	rjmp	.+1254   	; 0x1adc2 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a8dc:	f6 01       	movw	r30, r12
   1a8de:	e6 5a       	subi	r30, 0xA6	; 166
   1a8e0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8e2:	80 81       	ld	r24, Z
   1a8e4:	91 81       	ldd	r25, Z+1	; 0x01
   1a8e6:	9c 01       	movw	r18, r24
   1a8e8:	2c 7f       	andi	r18, 0xFC	; 252
   1a8ea:	20 31       	cpi	r18, 0x10	; 16
   1a8ec:	30 4e       	sbci	r19, 0xE0	; 224
   1a8ee:	a9 f0       	breq	.+42     	; 0x1a91a <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a8f0:	ed b7       	in	r30, 0x3d	; 61
   1a8f2:	fe b7       	in	r31, 0x3e	; 62
   1a8f4:	97 83       	std	Z+7, r25	; 0x07
   1a8f6:	86 83       	std	Z+6, r24	; 0x06
   1a8f8:	ca 5d       	subi	r28, 0xDA	; 218
   1a8fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8fc:	28 81       	ld	r18, Y
   1a8fe:	39 81       	ldd	r19, Y+1	; 0x01
   1a900:	c6 52       	subi	r28, 0x26	; 38
   1a902:	d2 40       	sbci	r29, 0x02	; 2
   1a904:	35 83       	std	Z+5, r19	; 0x05
   1a906:	24 83       	std	Z+4, r18	; 0x04
   1a908:	8b e5       	ldi	r24, 0x5B	; 91
   1a90a:	93 e3       	ldi	r25, 0x33	; 51
   1a90c:	a0 e0       	ldi	r26, 0x00	; 0
   1a90e:	81 83       	std	Z+1, r24	; 0x01
   1a910:	92 83       	std	Z+2, r25	; 0x02
   1a912:	a3 83       	std	Z+3, r26	; 0x03
   1a914:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1a918:	db cf       	rjmp	.-74     	; 0x1a8d0 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a91a:	f6 01       	movw	r30, r12
   1a91c:	e4 5a       	subi	r30, 0xA4	; 164
   1a91e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a920:	80 80       	ld	r8, Z
   1a922:	91 80       	ldd	r9, Z+1	; 0x01
   1a924:	a2 80       	ldd	r10, Z+2	; 0x02
   1a926:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a928:	34 96       	adiw	r30, 0x04	; 4
   1a92a:	80 81       	ld	r24, Z
   1a92c:	91 81       	ldd	r25, Z+1	; 0x01
   1a92e:	a2 81       	ldd	r26, Z+2	; 0x02
   1a930:	b3 81       	ldd	r27, Z+3	; 0x03
   1a932:	a5 01       	movw	r20, r10
   1a934:	94 01       	movw	r18, r8
   1a936:	28 0f       	add	r18, r24
   1a938:	39 1f       	adc	r19, r25
   1a93a:	4a 1f       	adc	r20, r26
   1a93c:	5b 1f       	adc	r21, r27
   1a93e:	c4 5d       	subi	r28, 0xD4	; 212
   1a940:	dd 4f       	sbci	r29, 0xFD	; 253
   1a942:	28 83       	st	Y, r18
   1a944:	39 83       	std	Y+1, r19	; 0x01
   1a946:	4a 83       	std	Y+2, r20	; 0x02
   1a948:	5b 83       	std	Y+3, r21	; 0x03
   1a94a:	cc 52       	subi	r28, 0x2C	; 44
   1a94c:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a94e:	c6 01       	movw	r24, r12
   1a950:	8c 59       	subi	r24, 0x9C	; 156
   1a952:	9f 4f       	sbci	r25, 0xFF	; 255
   1a954:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_lifbcd2time>
   1a958:	c8 5d       	subi	r28, 0xD8	; 216
   1a95a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a95c:	68 83       	st	Y, r22
   1a95e:	79 83       	std	Y+1, r23	; 0x01
   1a960:	8a 83       	std	Y+2, r24	; 0x02
   1a962:	9b 83       	std	Y+3, r25	; 0x03
   1a964:	c8 52       	subi	r28, 0x28	; 40
   1a966:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a968:	ba 2d       	mov	r27, r10
   1a96a:	a9 2d       	mov	r26, r9
   1a96c:	98 2d       	mov	r25, r8
   1a96e:	88 27       	eor	r24, r24
   1a970:	c2 5e       	subi	r28, 0xE2	; 226
   1a972:	dd 4f       	sbci	r29, 0xFD	; 253
   1a974:	88 83       	st	Y, r24
   1a976:	99 83       	std	Y+1, r25	; 0x01
   1a978:	aa 83       	std	Y+2, r26	; 0x02
   1a97a:	bb 83       	std	Y+3, r27	; 0x03
   1a97c:	ce 51       	subi	r28, 0x1E	; 30
   1a97e:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a980:	6c e0       	ldi	r22, 0x0C	; 12
   1a982:	79 e0       	ldi	r23, 0x09	; 9
   1a984:	ca 5d       	subi	r28, 0xDA	; 218
   1a986:	dd 4f       	sbci	r29, 0xFD	; 253
   1a988:	88 81       	ld	r24, Y
   1a98a:	99 81       	ldd	r25, Y+1	; 0x01
   1a98c:	c6 52       	subi	r28, 0x26	; 38
   1a98e:	d2 40       	sbci	r29, 0x02	; 2
   1a990:	0e 94 98 bd 	call	0x17b30	; 0x17b30 <lif_open>
   1a994:	cc 5d       	subi	r28, 0xDC	; 220
   1a996:	dd 4f       	sbci	r29, 0xFD	; 253
   1a998:	99 83       	std	Y+1, r25	; 0x01
   1a99a:	88 83       	st	Y, r24
   1a99c:	c4 52       	subi	r28, 0x24	; 36
   1a99e:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a9a0:	89 2b       	or	r24, r25
   1a9a2:	09 f4       	brne	.+2      	; 0x1a9a6 <lif_extract_e010_as_ascii+0x138>
   1a9a4:	95 cf       	rjmp	.-214    	; 0x1a8d0 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a9a6:	ca 5d       	subi	r28, 0xDA	; 218
   1a9a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9aa:	28 81       	ld	r18, Y
   1a9ac:	39 81       	ldd	r19, Y+1	; 0x01
   1a9ae:	c6 52       	subi	r28, 0x26	; 38
   1a9b0:	d2 40       	sbci	r29, 0x02	; 2
   1a9b2:	ed b7       	in	r30, 0x3d	; 61
   1a9b4:	fe b7       	in	r31, 0x3e	; 62
   1a9b6:	35 83       	std	Z+5, r19	; 0x05
   1a9b8:	24 83       	std	Z+4, r18	; 0x04
   1a9ba:	8b e4       	ldi	r24, 0x4B	; 75
   1a9bc:	93 e3       	ldi	r25, 0x33	; 51
   1a9be:	a0 e0       	ldi	r26, 0x00	; 0
   1a9c0:	81 83       	std	Z+1, r24	; 0x01
   1a9c2:	92 83       	std	Z+2, r25	; 0x02
   1a9c4:	a3 83       	std	Z+3, r26	; 0x03
   1a9c6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    bytes = 0;
    wind = 0;
   1a9ca:	21 2c       	mov	r2, r1
   1a9cc:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1a9ce:	ce 5d       	subi	r28, 0xDE	; 222
   1a9d0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9d2:	19 82       	std	Y+1, r1	; 0x01
   1a9d4:	18 82       	st	Y, r1
   1a9d6:	c2 52       	subi	r28, 0x22	; 34
   1a9d8:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1a9da:	ee 24       	eor	r14, r14
   1a9dc:	e3 94       	inc	r14
   1a9de:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1a9e0:	41 2c       	mov	r4, r1
   1a9e2:	51 2c       	mov	r5, r1
   1a9e4:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1a9e6:	8a e8       	ldi	r24, 0x8A	; 138
   1a9e8:	92 e3       	ldi	r25, 0x32	; 50
   1a9ea:	9c 01       	movw	r18, r24
   1a9ec:	40 e0       	ldi	r20, 0x00	; 0
   1a9ee:	ce 5c       	subi	r28, 0xCE	; 206
   1a9f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9f2:	28 83       	st	Y, r18
   1a9f4:	39 83       	std	Y+1, r19	; 0x01
   1a9f6:	4a 83       	std	Y+2, r20	; 0x02
   1a9f8:	c2 53       	subi	r28, 0x32	; 50
   1a9fa:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1a9fc:	88 e9       	ldi	r24, 0x98	; 152
   1a9fe:	92 e3       	ldi	r25, 0x32	; 50
   1aa00:	9c 01       	movw	r18, r24
   1aa02:	40 e0       	ldi	r20, 0x00	; 0
   1aa04:	cb 5c       	subi	r28, 0xCB	; 203
   1aa06:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa08:	28 83       	st	Y, r18
   1aa0a:	39 83       	std	Y+1, r19	; 0x01
   1aa0c:	4a 83       	std	Y+2, r20	; 0x02
   1aa0e:	c5 53       	subi	r28, 0x35	; 53
   1aa10:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aa12:	c2 5e       	subi	r28, 0xE2	; 226
   1aa14:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa16:	28 81       	ld	r18, Y
   1aa18:	39 81       	ldd	r19, Y+1	; 0x01
   1aa1a:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa1c:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa1e:	ce 51       	subi	r28, 0x1E	; 30
   1aa20:	d2 40       	sbci	r29, 0x02	; 2
   1aa22:	bb 27       	eor	r27, r27
   1aa24:	a5 2f       	mov	r26, r21
   1aa26:	94 2f       	mov	r25, r20
   1aa28:	83 2f       	mov	r24, r19
   1aa2a:	c4 5d       	subi	r28, 0xD4	; 212
   1aa2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa2e:	28 81       	ld	r18, Y
   1aa30:	39 81       	ldd	r19, Y+1	; 0x01
   1aa32:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa34:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa36:	cc 52       	subi	r28, 0x2C	; 44
   1aa38:	d2 40       	sbci	r29, 0x02	; 2
   1aa3a:	28 17       	cp	r18, r24
   1aa3c:	39 07       	cpc	r19, r25
   1aa3e:	4a 07       	cpc	r20, r26
   1aa40:	5b 07       	cpc	r21, r27
   1aa42:	08 f4       	brcc	.+2      	; 0x1aa46 <lif_extract_e010_as_ascii+0x1d8>
   1aa44:	51 c1       	rjmp	.+674    	; 0x1ace8 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1aa46:	00 e0       	ldi	r16, 0x00	; 0
   1aa48:	11 e0       	ldi	r17, 0x01	; 1
   1aa4a:	c2 5e       	subi	r28, 0xE2	; 226
   1aa4c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa4e:	28 81       	ld	r18, Y
   1aa50:	39 81       	ldd	r19, Y+1	; 0x01
   1aa52:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa54:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa56:	ce 51       	subi	r28, 0x1E	; 30
   1aa58:	d2 40       	sbci	r29, 0x02	; 2
   1aa5a:	be 01       	movw	r22, r28
   1aa5c:	60 5f       	subi	r22, 0xF0	; 240
   1aa5e:	7e 4f       	sbci	r23, 0xFE	; 254
   1aa60:	c6 01       	movw	r24, r12
   1aa62:	0e 94 1c be 	call	0x17c38	; 0x17c38 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1aa66:	6f 3f       	cpi	r22, 0xFF	; 255
   1aa68:	71 05       	cpc	r23, r1
   1aa6a:	09 f0       	breq	.+2      	; 0x1aa6e <lif_extract_e010_as_ascii+0x200>
   1aa6c:	0c f4       	brge	.+2      	; 0x1aa70 <lif_extract_e010_as_ascii+0x202>
   1aa6e:	3a c1       	rjmp	.+628    	; 0x1ace4 <lif_extract_e010_as_ascii+0x476>
   1aa70:	00 e0       	ldi	r16, 0x00	; 0
   1aa72:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1aa74:	ce 5d       	subi	r28, 0xDE	; 222
   1aa76:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa78:	88 81       	ld	r24, Y
   1aa7a:	99 81       	ldd	r25, Y+1	; 0x01
   1aa7c:	c2 52       	subi	r28, 0x22	; 34
   1aa7e:	d2 40       	sbci	r29, 0x02	; 2
   1aa80:	89 2b       	or	r24, r25
   1aa82:	09 f0       	breq	.+2      	; 0x1aa86 <lif_extract_e010_as_ascii+0x218>
   1aa84:	1b c1       	rjmp	.+566    	; 0x1acbc <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1aa86:	e0 e1       	ldi	r30, 0x10	; 16
   1aa88:	f1 e0       	ldi	r31, 0x01	; 1
   1aa8a:	ec 0f       	add	r30, r28
   1aa8c:	fd 1f       	adc	r31, r29
   1aa8e:	e0 0f       	add	r30, r16
   1aa90:	f1 1f       	adc	r31, r17
   1aa92:	80 81       	ld	r24, Z
   1aa94:	98 2f       	mov	r25, r24
   1aa96:	9f 7e       	andi	r25, 0xEF	; 239
   1aa98:	9f 3c       	cpi	r25, 0xCF	; 207
   1aa9a:	11 f0       	breq	.+4      	; 0x1aaa0 <lif_extract_e010_as_ascii+0x232>
   1aa9c:	8f 36       	cpi	r24, 0x6F	; 111
   1aa9e:	c9 f5       	brne	.+114    	; 0x1ab12 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1aaa0:	e0 e1       	ldi	r30, 0x10	; 16
   1aaa2:	f1 e0       	ldi	r31, 0x01	; 1
   1aaa4:	ec 0f       	add	r30, r28
   1aaa6:	fd 1f       	adc	r31, r29
   1aaa8:	e0 0f       	add	r30, r16
   1aaaa:	f1 1f       	adc	r31, r17
   1aaac:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1aaae:	f8 01       	movw	r30, r16
   1aab0:	32 96       	adiw	r30, 0x02	; 2
   1aab2:	40 e1       	ldi	r20, 0x10	; 16
   1aab4:	51 e0       	ldi	r21, 0x01	; 1
   1aab6:	4c 0f       	add	r20, r28
   1aab8:	5d 1f       	adc	r21, r29
   1aaba:	e4 0f       	add	r30, r20
   1aabc:	f5 1f       	adc	r31, r21
   1aabe:	0d 5f       	subi	r16, 0xFD	; 253
   1aac0:	1f 4f       	sbci	r17, 0xFF	; 255
   1aac2:	80 81       	ld	r24, Z
   1aac4:	b1 2c       	mov	r11, r1
   1aac6:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1aac8:	a1 14       	cp	r10, r1
   1aaca:	b1 04       	cpc	r11, r1
   1aacc:	09 f4       	brne	.+2      	; 0x1aad0 <lif_extract_e010_as_ascii+0x262>
   1aace:	ee c0       	rjmp	.+476    	; 0x1acac <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1aad0:	5f ef       	ldi	r21, 0xFF	; 255
   1aad2:	a5 16       	cp	r10, r21
   1aad4:	b1 04       	cpc	r11, r1
   1aad6:	09 f0       	breq	.+2      	; 0x1aada <lif_extract_e010_as_ascii+0x26c>
   1aad8:	7c f4       	brge	.+30     	; 0x1aaf8 <lif_extract_e010_as_ascii+0x28a>
   1aada:	c4 5e       	subi	r28, 0xE4	; 228
   1aadc:	dd 4f       	sbci	r29, 0xFD	; 253
   1aade:	19 82       	std	Y+1, r1	; 0x01
   1aae0:	18 82       	st	Y, r1
   1aae2:	cc 51       	subi	r28, 0x1C	; 28
   1aae4:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1aae6:	c5 01       	movw	r24, r10
   1aae8:	01 97       	sbiw	r24, 0x01	; 1
   1aaea:	c0 5d       	subi	r28, 0xD0	; 208
   1aaec:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaee:	99 83       	std	Y+1, r25	; 0x01
   1aaf0:	88 83       	st	Y, r24
   1aaf2:	c0 53       	subi	r28, 0x30	; 48
   1aaf4:	d2 40       	sbci	r29, 0x02	; 2
   1aaf6:	68 c0       	rjmp	.+208    	; 0x1abc8 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1aaf8:	ed b7       	in	r30, 0x3d	; 61
   1aafa:	fe b7       	in	r31, 0x3e	; 62
   1aafc:	b5 82       	std	Z+5, r11	; 0x05
   1aafe:	a4 82       	std	Z+4, r10	; 0x04
   1ab00:	86 e1       	ldi	r24, 0x16	; 22
   1ab02:	93 e3       	ldi	r25, 0x33	; 51
   1ab04:	a0 e0       	ldi	r26, 0x00	; 0
   1ab06:	81 83       	std	Z+1, r24	; 0x01
   1ab08:	92 83       	std	Z+2, r25	; 0x02
   1ab0a:	a3 83       	std	Z+3, r26	; 0x03
   1ab0c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1ab10:	1e c0       	rjmp	.+60     	; 0x1ab4e <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1ab12:	8f 3e       	cpi	r24, 0xEF	; 239
   1ab14:	09 f4       	brne	.+2      	; 0x1ab18 <lif_extract_e010_as_ascii+0x2aa>
   1ab16:	d2 c0       	rjmp	.+420    	; 0x1acbc <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1ab18:	ed b7       	in	r30, 0x3d	; 61
   1ab1a:	fe b7       	in	r31, 0x3e	; 62
   1ab1c:	13 87       	std	Z+11, r17	; 0x0b
   1ab1e:	02 87       	std	Z+10, r16	; 0x0a
   1ab20:	c2 5e       	subi	r28, 0xE2	; 226
   1ab22:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab24:	28 81       	ld	r18, Y
   1ab26:	39 81       	ldd	r19, Y+1	; 0x01
   1ab28:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab2a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab2c:	ce 51       	subi	r28, 0x1E	; 30
   1ab2e:	d2 40       	sbci	r29, 0x02	; 2
   1ab30:	26 83       	std	Z+6, r18	; 0x06
   1ab32:	37 83       	std	Z+7, r19	; 0x07
   1ab34:	40 87       	std	Z+8, r20	; 0x08
   1ab36:	51 87       	std	Z+9, r21	; 0x09
   1ab38:	90 e0       	ldi	r25, 0x00	; 0
   1ab3a:	95 83       	std	Z+5, r25	; 0x05
   1ab3c:	84 83       	std	Z+4, r24	; 0x04
   1ab3e:	80 ec       	ldi	r24, 0xC0	; 192
   1ab40:	92 e3       	ldi	r25, 0x32	; 50
   1ab42:	a0 e0       	ldi	r26, 0x00	; 0
   1ab44:	81 83       	std	Z+1, r24	; 0x01
   1ab46:	92 83       	std	Z+2, r25	; 0x02
   1ab48:	a3 83       	std	Z+3, r26	; 0x03
   1ab4a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                status = 0;
                done = 1;
   1ab4e:	21 e0       	ldi	r18, 0x01	; 1
   1ab50:	30 e0       	ldi	r19, 0x00	; 0
   1ab52:	ce 5d       	subi	r28, 0xDE	; 222
   1ab54:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab56:	39 83       	std	Y+1, r19	; 0x01
   1ab58:	28 83       	st	Y, r18
   1ab5a:	c2 52       	subi	r28, 0x22	; 34
   1ab5c:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ab5e:	e1 2c       	mov	r14, r1
   1ab60:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ab62:	ac c0       	rjmp	.+344    	; 0x1acbc <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ab64:	0f 3f       	cpi	r16, 0xFF	; 255
   1ab66:	11 05       	cpc	r17, r1
   1ab68:	11 f0       	breq	.+4      	; 0x1ab6e <lif_extract_e010_as_ascii+0x300>
   1ab6a:	0c f0       	brlt	.+2      	; 0x1ab6e <lif_extract_e010_as_ascii+0x300>
   1ab6c:	a7 c0       	rjmp	.+334    	; 0x1acbc <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab6e:	e0 e1       	ldi	r30, 0x10	; 16
   1ab70:	f1 e0       	ldi	r31, 0x01	; 1
   1ab72:	ec 0f       	add	r30, r28
   1ab74:	fd 1f       	adc	r31, r29
   1ab76:	e0 0f       	add	r30, r16
   1ab78:	f1 1f       	adc	r31, r17
   1ab7a:	20 81       	ld	r18, Z
   1ab7c:	a1 01       	movw	r20, r2
   1ab7e:	4f 5f       	subi	r20, 0xFF	; 255
   1ab80:	5f 4f       	sbci	r21, 0xFF	; 255
   1ab82:	4a 01       	movw	r8, r20
   1ab84:	2d 30       	cpi	r18, 0x0D	; 13
   1ab86:	51 f1       	breq	.+84     	; 0x1abdc <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ab88:	98 2d       	mov	r25, r8
   1ab8a:	89 2d       	mov	r24, r9
   1ab8c:	0f 5f       	subi	r16, 0xFF	; 255
   1ab8e:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab90:	ec e0       	ldi	r30, 0x0C	; 12
   1ab92:	f0 e0       	ldi	r31, 0x00	; 0
   1ab94:	ec 0f       	add	r30, r28
   1ab96:	fd 1f       	adc	r31, r29
   1ab98:	e2 0d       	add	r30, r2
   1ab9a:	f3 1d       	adc	r31, r3
   1ab9c:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1ab9e:	ef ef       	ldi	r30, 0xFF	; 255
   1aba0:	8e 16       	cp	r8, r30
   1aba2:	91 04       	cpc	r9, r1
   1aba4:	09 f0       	breq	.+2      	; 0x1aba8 <lif_extract_e010_as_ascii+0x33a>
   1aba6:	ac f5       	brge	.+106    	; 0x1ac12 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1aba8:	c4 5e       	subi	r28, 0xE4	; 228
   1abaa:	dd 4f       	sbci	r29, 0xFD	; 253
   1abac:	28 81       	ld	r18, Y
   1abae:	39 81       	ldd	r19, Y+1	; 0x01
   1abb0:	cc 51       	subi	r28, 0x1C	; 28
   1abb2:	d2 40       	sbci	r29, 0x02	; 2
   1abb4:	2f 5f       	subi	r18, 0xFF	; 255
   1abb6:	3f 4f       	sbci	r19, 0xFF	; 255
   1abb8:	c4 5e       	subi	r28, 0xE4	; 228
   1abba:	dd 4f       	sbci	r29, 0xFD	; 253
   1abbc:	39 83       	std	Y+1, r19	; 0x01
   1abbe:	28 83       	st	Y, r18
   1abc0:	cc 51       	subi	r28, 0x1C	; 28
   1abc2:	d2 40       	sbci	r29, 0x02	; 2
   1abc4:	29 2e       	mov	r2, r25
   1abc6:	38 2e       	mov	r3, r24
   1abc8:	c4 5e       	subi	r28, 0xE4	; 228
   1abca:	dd 4f       	sbci	r29, 0xFD	; 253
   1abcc:	48 81       	ld	r20, Y
   1abce:	59 81       	ldd	r21, Y+1	; 0x01
   1abd0:	cc 51       	subi	r28, 0x1C	; 28
   1abd2:	d2 40       	sbci	r29, 0x02	; 2
   1abd4:	4a 15       	cp	r20, r10
   1abd6:	5b 05       	cpc	r21, r11
   1abd8:	2c f2       	brlt	.-118    	; 0x1ab64 <lif_extract_e010_as_ascii+0x2f6>
   1abda:	62 c0       	rjmp	.+196    	; 0x1aca0 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1abdc:	c4 5e       	subi	r28, 0xE4	; 228
   1abde:	dd 4f       	sbci	r29, 0xFD	; 253
   1abe0:	88 81       	ld	r24, Y
   1abe2:	99 81       	ldd	r25, Y+1	; 0x01
   1abe4:	cc 51       	subi	r28, 0x1C	; 28
   1abe6:	d2 40       	sbci	r29, 0x02	; 2
   1abe8:	c0 5d       	subi	r28, 0xD0	; 208
   1abea:	dd 4f       	sbci	r29, 0xFD	; 253
   1abec:	a8 81       	ld	r26, Y
   1abee:	b9 81       	ldd	r27, Y+1	; 0x01
   1abf0:	c0 53       	subi	r28, 0x30	; 48
   1abf2:	d2 40       	sbci	r29, 0x02	; 2
   1abf4:	8a 17       	cp	r24, r26
   1abf6:	9b 07       	cpc	r25, r27
   1abf8:	39 f6       	brne	.-114    	; 0x1ab88 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1abfa:	ec e0       	ldi	r30, 0x0C	; 12
   1abfc:	f0 e0       	ldi	r31, 0x00	; 0
   1abfe:	ec 0f       	add	r30, r28
   1ac00:	fd 1f       	adc	r31, r29
   1ac02:	e2 0d       	add	r30, r2
   1ac04:	f3 1d       	adc	r31, r3
   1ac06:	ba e0       	ldi	r27, 0x0A	; 10
   1ac08:	b0 83       	st	Z, r27
                    ++ind;
   1ac0a:	0f 5f       	subi	r16, 0xFF	; 255
   1ac0c:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ac0e:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ac10:	47 c0       	rjmp	.+142    	; 0x1aca0 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ac12:	cc 5d       	subi	r28, 0xDC	; 220
   1ac14:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac16:	28 81       	ld	r18, Y
   1ac18:	39 81       	ldd	r19, Y+1	; 0x01
   1ac1a:	c4 52       	subi	r28, 0x24	; 36
   1ac1c:	d2 40       	sbci	r29, 0x02	; 2
   1ac1e:	a4 01       	movw	r20, r8
   1ac20:	61 e0       	ldi	r22, 0x01	; 1
   1ac22:	70 e0       	ldi	r23, 0x00	; 0
   1ac24:	ce 01       	movw	r24, r28
   1ac26:	0c 96       	adiw	r24, 0x0c	; 12
   1ac28:	0e 94 97 7a 	call	0xf52e	; 0xf52e <fwrite>
                    if(size < wind)
   1ac2c:	88 15       	cp	r24, r8
   1ac2e:	99 05       	cpc	r25, r9
   1ac30:	d4 f4       	brge	.+52     	; 0x1ac66 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ac32:	cb 5c       	subi	r28, 0xCB	; 203
   1ac34:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac36:	28 81       	ld	r18, Y
   1ac38:	39 81       	ldd	r19, Y+1	; 0x01
   1ac3a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac3c:	c5 53       	subi	r28, 0x35	; 53
   1ac3e:	d2 40       	sbci	r29, 0x02	; 2
   1ac40:	ed b7       	in	r30, 0x3d	; 61
   1ac42:	fe b7       	in	r31, 0x3e	; 62
   1ac44:	21 83       	std	Z+1, r18	; 0x01
   1ac46:	32 83       	std	Z+2, r19	; 0x02
   1ac48:	43 83       	std	Z+3, r20	; 0x03
   1ac4a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ac4e:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ac50:	21 e0       	ldi	r18, 0x01	; 1
   1ac52:	30 e0       	ldi	r19, 0x00	; 0
   1ac54:	ce 5d       	subi	r28, 0xDE	; 222
   1ac56:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac58:	39 83       	std	Y+1, r19	; 0x01
   1ac5a:	28 83       	st	Y, r18
   1ac5c:	c2 52       	subi	r28, 0x22	; 34
   1ac5e:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ac60:	e1 2c       	mov	r14, r1
   1ac62:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ac64:	1d c0       	rjmp	.+58     	; 0x1aca0 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ac66:	09 2e       	mov	r0, r25
   1ac68:	00 0c       	add	r0, r0
   1ac6a:	aa 0b       	sbc	r26, r26
   1ac6c:	bb 0b       	sbc	r27, r27
   1ac6e:	48 0e       	add	r4, r24
   1ac70:	59 1e       	adc	r5, r25
   1ac72:	6a 1e       	adc	r6, r26
   1ac74:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1ac76:	ed b7       	in	r30, 0x3d	; 61
   1ac78:	fe b7       	in	r31, 0x3e	; 62
   1ac7a:	44 82       	std	Z+4, r4	; 0x04
   1ac7c:	55 82       	std	Z+5, r5	; 0x05
   1ac7e:	66 82       	std	Z+6, r6	; 0x06
   1ac80:	77 82       	std	Z+7, r7	; 0x07
   1ac82:	ce 5c       	subi	r28, 0xCE	; 206
   1ac84:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac86:	28 81       	ld	r18, Y
   1ac88:	39 81       	ldd	r19, Y+1	; 0x01
   1ac8a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac8c:	c2 53       	subi	r28, 0x32	; 50
   1ac8e:	d2 40       	sbci	r29, 0x02	; 2
   1ac90:	21 83       	std	Z+1, r18	; 0x01
   1ac92:	32 83       	std	Z+2, r19	; 0x02
   1ac94:	43 83       	std	Z+3, r20	; 0x03
   1ac96:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
                    wind = 0;
   1ac9a:	90 e0       	ldi	r25, 0x00	; 0
   1ac9c:	80 e0       	ldi	r24, 0x00	; 0
   1ac9e:	84 cf       	rjmp	.-248    	; 0x1aba8 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1aca0:	0f 3f       	cpi	r16, 0xFF	; 255
   1aca2:	11 05       	cpc	r17, r1
   1aca4:	09 f0       	breq	.+2      	; 0x1aca8 <lif_extract_e010_as_ascii+0x43a>
   1aca6:	0c f4       	brge	.+2      	; 0x1acaa <lif_extract_e010_as_ascii+0x43c>
   1aca8:	e5 ce       	rjmp	.-566    	; 0x1aa74 <lif_extract_e010_as_ascii+0x206>
   1acaa:	08 c0       	rjmp	.+16     	; 0x1acbc <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1acac:	a1 e0       	ldi	r26, 0x01	; 1
   1acae:	b0 e0       	ldi	r27, 0x00	; 0
   1acb0:	ce 5d       	subi	r28, 0xDE	; 222
   1acb2:	dd 4f       	sbci	r29, 0xFD	; 253
   1acb4:	b9 83       	std	Y+1, r27	; 0x01
   1acb6:	a8 83       	st	Y, r26
   1acb8:	c2 52       	subi	r28, 0x22	; 34
   1acba:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1acbc:	c2 5e       	subi	r28, 0xE2	; 226
   1acbe:	dd 4f       	sbci	r29, 0xFD	; 253
   1acc0:	28 81       	ld	r18, Y
   1acc2:	39 81       	ldd	r19, Y+1	; 0x01
   1acc4:	4a 81       	ldd	r20, Y+2	; 0x02
   1acc6:	5b 81       	ldd	r21, Y+3	; 0x03
   1acc8:	ce 51       	subi	r28, 0x1E	; 30
   1acca:	d2 40       	sbci	r29, 0x02	; 2
   1accc:	3f 5f       	subi	r19, 0xFF	; 255
   1acce:	4f 4f       	sbci	r20, 0xFF	; 255
   1acd0:	5f 4f       	sbci	r21, 0xFF	; 255
   1acd2:	c2 5e       	subi	r28, 0xE2	; 226
   1acd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1acd6:	28 83       	st	Y, r18
   1acd8:	39 83       	std	Y+1, r19	; 0x01
   1acda:	4a 83       	std	Y+2, r20	; 0x02
   1acdc:	5b 83       	std	Y+3, r21	; 0x03
   1acde:	ce 51       	subi	r28, 0x1E	; 30
   1ace0:	d2 40       	sbci	r29, 0x02	; 2
   1ace2:	97 ce       	rjmp	.-722    	; 0x1aa12 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ace4:	e1 2c       	mov	r14, r1
   1ace6:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ace8:	c6 01       	movw	r24, r12
   1acea:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1acee:	21 14       	cp	r2, r1
   1acf0:	31 04       	cpc	r3, r1
   1acf2:	31 f1       	breq	.+76     	; 0x1ad40 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1acf4:	cc 5d       	subi	r28, 0xDC	; 220
   1acf6:	dd 4f       	sbci	r29, 0xFD	; 253
   1acf8:	28 81       	ld	r18, Y
   1acfa:	39 81       	ldd	r19, Y+1	; 0x01
   1acfc:	c4 52       	subi	r28, 0x24	; 36
   1acfe:	d2 40       	sbci	r29, 0x02	; 2
   1ad00:	a1 01       	movw	r20, r2
   1ad02:	61 e0       	ldi	r22, 0x01	; 1
   1ad04:	70 e0       	ldi	r23, 0x00	; 0
   1ad06:	ce 01       	movw	r24, r28
   1ad08:	0c 96       	adiw	r24, 0x0c	; 12
   1ad0a:	0e 94 97 7a 	call	0xf52e	; 0xf52e <fwrite>
   1ad0e:	8c 01       	movw	r16, r24
        if(size < wind)
   1ad10:	82 15       	cp	r24, r2
   1ad12:	93 05       	cpc	r25, r3
   1ad14:	64 f4       	brge	.+24     	; 0x1ad2e <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ad16:	82 e6       	ldi	r24, 0x62	; 98
   1ad18:	92 e3       	ldi	r25, 0x32	; 50
   1ad1a:	a0 e0       	ldi	r26, 0x00	; 0
   1ad1c:	ed b7       	in	r30, 0x3d	; 61
   1ad1e:	fe b7       	in	r31, 0x3e	; 62
   1ad20:	81 83       	std	Z+1, r24	; 0x01
   1ad22:	92 83       	std	Z+2, r25	; 0x02
   1ad24:	a3 83       	std	Z+3, r26	; 0x03
   1ad26:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            status = 0;
   1ad2a:	e1 2c       	mov	r14, r1
   1ad2c:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ad2e:	c8 01       	movw	r24, r16
   1ad30:	01 2e       	mov	r0, r17
   1ad32:	00 0c       	add	r0, r0
   1ad34:	aa 0b       	sbc	r26, r26
   1ad36:	bb 0b       	sbc	r27, r27
   1ad38:	48 0e       	add	r4, r24
   1ad3a:	59 1e       	adc	r5, r25
   1ad3c:	6a 1e       	adc	r6, r26
   1ad3e:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ad40:	cc 5d       	subi	r28, 0xDC	; 220
   1ad42:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad44:	88 81       	ld	r24, Y
   1ad46:	99 81       	ldd	r25, Y+1	; 0x01
   1ad48:	c4 52       	subi	r28, 0x24	; 36
   1ad4a:	d2 40       	sbci	r29, 0x02	; 2
   1ad4c:	0e 94 19 7b 	call	0xf632	; 0xf632 <fclose>
    if(t)
   1ad50:	c8 5d       	subi	r28, 0xD8	; 216
   1ad52:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad54:	28 81       	ld	r18, Y
   1ad56:	39 81       	ldd	r19, Y+1	; 0x01
   1ad58:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad5a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad5c:	c8 52       	subi	r28, 0x28	; 40
   1ad5e:	d2 40       	sbci	r29, 0x02	; 2
   1ad60:	21 15       	cp	r18, r1
   1ad62:	31 05       	cpc	r19, r1
   1ad64:	41 05       	cpc	r20, r1
   1ad66:	51 05       	cpc	r21, r1
   1ad68:	d9 f0       	breq	.+54     	; 0x1ada0 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ad6a:	c8 5e       	subi	r28, 0xE8	; 232
   1ad6c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad6e:	28 83       	st	Y, r18
   1ad70:	39 83       	std	Y+1, r19	; 0x01
   1ad72:	4a 83       	std	Y+2, r20	; 0x02
   1ad74:	5b 83       	std	Y+3, r21	; 0x03
   1ad76:	c8 51       	subi	r28, 0x18	; 24
   1ad78:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1ad7a:	cc 5e       	subi	r28, 0xEC	; 236
   1ad7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad7e:	28 83       	st	Y, r18
   1ad80:	39 83       	std	Y+1, r19	; 0x01
   1ad82:	4a 83       	std	Y+2, r20	; 0x02
   1ad84:	5b 83       	std	Y+3, r21	; 0x03
   1ad86:	c4 51       	subi	r28, 0x14	; 20
   1ad88:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1ad8a:	be 01       	movw	r22, r28
   1ad8c:	6c 5e       	subi	r22, 0xEC	; 236
   1ad8e:	7d 4f       	sbci	r23, 0xFD	; 253
   1ad90:	ca 5d       	subi	r28, 0xDA	; 218
   1ad92:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad94:	88 81       	ld	r24, Y
   1ad96:	99 81       	ldd	r25, Y+1	; 0x01
   1ad98:	c6 52       	subi	r28, 0x26	; 38
   1ad9a:	d2 40       	sbci	r29, 0x02	; 2
   1ad9c:	0e 94 56 78 	call	0xf0ac	; 0xf0ac <utime>
    }
    sync();
   1ada0:	0e 94 14 7a 	call	0xf428	; 0xf428 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1ada4:	ed b7       	in	r30, 0x3d	; 61
   1ada6:	fe b7       	in	r31, 0x3e	; 62
   1ada8:	44 82       	std	Z+4, r4	; 0x04
   1adaa:	55 82       	std	Z+5, r5	; 0x05
   1adac:	66 82       	std	Z+6, r6	; 0x06
   1adae:	77 82       	std	Z+7, r7	; 0x07
   1adb0:	84 e5       	ldi	r24, 0x54	; 84
   1adb2:	92 e3       	ldi	r25, 0x32	; 50
   1adb4:	a0 e0       	ldi	r26, 0x00	; 0
   1adb6:	81 83       	std	Z+1, r24	; 0x01
   1adb8:	92 83       	std	Z+2, r25	; 0x02
   1adba:	a3 83       	std	Z+3, r26	; 0x03
   1adbc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(status);
   1adc0:	c7 01       	movw	r24, r14
}
   1adc2:	c9 5c       	subi	r28, 0xC9	; 201
   1adc4:	dd 4f       	sbci	r29, 0xFD	; 253
   1adc6:	e2 e1       	ldi	r30, 0x12	; 18
   1adc8:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0001adcc <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1adcc:	a4 e1       	ldi	r26, 0x14	; 20
   1adce:	b1 e0       	ldi	r27, 0x01	; 1
   1add0:	ec ee       	ldi	r30, 0xEC	; 236
   1add2:	f6 ed       	ldi	r31, 0xD6	; 214
   1add4:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__prologue_saves__>
   1add8:	7c 01       	movw	r14, r24
   1adda:	8b 01       	movw	r16, r22
   1addc:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1adde:	62 e4       	ldi	r22, 0x42	; 66
   1ade0:	73 e0       	ldi	r23, 0x03	; 3
   1ade2:	0e 94 a5 cd 	call	0x19b4a	; 0x19b4a <lif_open_volume>
   1ade6:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ade8:	00 97       	sbiw	r24, 0x00	; 0
   1adea:	69 f4       	brne	.+26     	; 0x1ae06 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1adec:	ed b7       	in	r30, 0x3d	; 61
   1adee:	fe b7       	in	r31, 0x3e	; 62
   1adf0:	f5 82       	std	Z+5, r15	; 0x05
   1adf2:	e4 82       	std	Z+4, r14	; 0x04
   1adf4:	8c e3       	ldi	r24, 0x3C	; 60
   1adf6:	92 e3       	ldi	r25, 0x32	; 50
   1adf8:	a0 e0       	ldi	r26, 0x00	; 0
   1adfa:	81 83       	std	Z+1, r24	; 0x01
   1adfc:	92 83       	std	Z+2, r25	; 0x02
   1adfe:	a3 83       	std	Z+3, r26	; 0x03
   1ae00:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1ae04:	13 c0       	rjmp	.+38     	; 0x1ae2c <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ae06:	b8 01       	movw	r22, r16
   1ae08:	75 d9       	rcall	.-3350   	; 0x1a0f4 <lif_find_file>
    if(index == -1)
   1ae0a:	01 96       	adiw	r24, 0x01	; 1
   1ae0c:	91 f4       	brne	.+36     	; 0x1ae32 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ae0e:	ed b7       	in	r30, 0x3d	; 61
   1ae10:	fe b7       	in	r31, 0x3e	; 62
   1ae12:	15 83       	std	Z+5, r17	; 0x05
   1ae14:	04 83       	std	Z+4, r16	; 0x04
   1ae16:	89 e2       	ldi	r24, 0x29	; 41
   1ae18:	92 e3       	ldi	r25, 0x32	; 50
   1ae1a:	a0 e0       	ldi	r26, 0x00	; 0
   1ae1c:	81 83       	std	Z+1, r24	; 0x01
   1ae1e:	92 83       	std	Z+2, r25	; 0x02
   1ae20:	a3 83       	std	Z+3, r26	; 0x03
   1ae22:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae26:	c4 01       	movw	r24, r8
   1ae28:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ae2c:	00 e0       	ldi	r16, 0x00	; 0
   1ae2e:	10 e0       	ldi	r17, 0x00	; 0
   1ae30:	ff c0       	rjmp	.+510    	; 0x1b030 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ae32:	94 01       	movw	r18, r8
   1ae34:	20 5a       	subi	r18, 0xA0	; 160
   1ae36:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae38:	c0 5f       	subi	r28, 0xF0	; 240
   1ae3a:	de 4f       	sbci	r29, 0xFE	; 254
   1ae3c:	39 83       	std	Y+1, r19	; 0x01
   1ae3e:	28 83       	st	Y, r18
   1ae40:	c0 51       	subi	r28, 0x10	; 16
   1ae42:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ae44:	f9 01       	movw	r30, r18
   1ae46:	a0 80       	ld	r10, Z
   1ae48:	b1 80       	ldd	r11, Z+1	; 0x01
   1ae4a:	0b 2c       	mov	r0, r11
   1ae4c:	00 0c       	add	r0, r0
   1ae4e:	cc 08       	sbc	r12, r12
   1ae50:	dd 08       	sbc	r13, r13
   1ae52:	e1 2c       	mov	r14, r1
   1ae54:	f1 2c       	mov	r15, r1
   1ae56:	87 01       	movw	r16, r14
   1ae58:	e3 94       	inc	r14
   1ae5a:	21 e0       	ldi	r18, 0x01	; 1
   1ae5c:	30 e0       	ldi	r19, 0x00	; 0
   1ae5e:	40 e0       	ldi	r20, 0x00	; 0
   1ae60:	50 e0       	ldi	r21, 0x00	; 0
   1ae62:	64 e6       	ldi	r22, 0x64	; 100
   1ae64:	76 e1       	ldi	r23, 0x16	; 22
   1ae66:	c3 01       	movw	r24, r6
   1ae68:	0e 94 5b c9 	call	0x192b6	; 0x192b6 <lif_create_volume>
   1ae6c:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1ae6e:	89 2b       	or	r24, r25
   1ae70:	d1 f2       	breq	.-76     	; 0x1ae26 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1ae72:	81 e2       	ldi	r24, 0x21	; 33
   1ae74:	f4 01       	movw	r30, r8
   1ae76:	e1 5b       	subi	r30, 0xB1	; 177
   1ae78:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae7a:	d7 01       	movw	r26, r14
   1ae7c:	a1 5b       	subi	r26, 0xB1	; 177
   1ae7e:	bf 4f       	sbci	r27, 0xFF	; 255
   1ae80:	01 90       	ld	r0, Z+
   1ae82:	0d 92       	st	X+, r0
   1ae84:	8a 95       	dec	r24
   1ae86:	e1 f7       	brne	.-8      	; 0x1ae80 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1ae88:	82 e0       	ldi	r24, 0x02	; 2
   1ae8a:	90 e0       	ldi	r25, 0x00	; 0
   1ae8c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae8e:	b0 e0       	ldi	r27, 0x00	; 0
   1ae90:	f7 01       	movw	r30, r14
   1ae92:	e4 5a       	subi	r30, 0xA4	; 164
   1ae94:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae96:	80 83       	st	Z, r24
   1ae98:	91 83       	std	Z+1, r25	; 0x01
   1ae9a:	a2 83       	std	Z+2, r26	; 0x02
   1ae9c:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1ae9e:	c0 5f       	subi	r28, 0xF0	; 240
   1aea0:	de 4f       	sbci	r29, 0xFE	; 254
   1aea2:	e8 81       	ld	r30, Y
   1aea4:	f9 81       	ldd	r31, Y+1	; 0x01
   1aea6:	c0 51       	subi	r28, 0x10	; 16
   1aea8:	d1 40       	sbci	r29, 0x01	; 1
   1aeaa:	80 81       	ld	r24, Z
   1aeac:	91 81       	ldd	r25, Z+1	; 0x01
   1aeae:	a2 81       	ldd	r26, Z+2	; 0x02
   1aeb0:	b3 81       	ldd	r27, Z+3	; 0x03
   1aeb2:	f7 01       	movw	r30, r14
   1aeb4:	80 8b       	std	Z+16, r24	; 0x10
   1aeb6:	91 8b       	std	Z+17, r25	; 0x11
   1aeb8:	a2 8b       	std	Z+18, r26	; 0x12
   1aeba:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1aebc:	60 e0       	ldi	r22, 0x00	; 0
   1aebe:	70 e0       	ldi	r23, 0x00	; 0
   1aec0:	c7 01       	movw	r24, r14
   1aec2:	0e 94 dd c7 	call	0x18fba	; 0x18fba <lif_writedirindex>
   1aec6:	8c 01       	movw	r16, r24
   1aec8:	89 2b       	or	r24, r25
   1aeca:	41 f0       	breq	.+16     	; 0x1aedc <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1aecc:	61 e0       	ldi	r22, 0x01	; 1
   1aece:	70 e0       	ldi	r23, 0x00	; 0
   1aed0:	c7 01       	movw	r24, r14
   1aed2:	0e 94 39 c8 	call	0x19072	; 0x19072 <lif_writedirEOF>
   1aed6:	8c 01       	movw	r16, r24
   1aed8:	89 2b       	or	r24, r25
   1aeda:	39 f4       	brne	.+14     	; 0x1aeea <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aedc:	c4 01       	movw	r24, r8
   1aede:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1aee2:	c7 01       	movw	r24, r14
   1aee4:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1aee8:	a3 c0       	rjmp	.+326    	; 0x1b030 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1aeea:	f7 01       	movw	r30, r14
   1aeec:	44 84       	ldd	r4, Z+12	; 0x0c
   1aeee:	55 84       	ldd	r5, Z+13	; 0x0d
   1aef0:	66 84       	ldd	r6, Z+14	; 0x0e
   1aef2:	77 84       	ldd	r7, Z+15	; 0x0f
   1aef4:	76 2c       	mov	r7, r6
   1aef6:	65 2c       	mov	r6, r5
   1aef8:	54 2c       	mov	r5, r4
   1aefa:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1aefc:	f4 01       	movw	r30, r8
   1aefe:	e4 5a       	subi	r30, 0xA4	; 164
   1af00:	ff 4f       	sbci	r31, 0xFF	; 255
   1af02:	80 81       	ld	r24, Z
   1af04:	91 81       	ldd	r25, Z+1	; 0x01
   1af06:	a2 81       	ldd	r26, Z+2	; 0x02
   1af08:	b3 81       	ldd	r27, Z+3	; 0x03
   1af0a:	22 27       	eor	r18, r18
   1af0c:	38 2f       	mov	r19, r24
   1af0e:	49 2f       	mov	r20, r25
   1af10:	5a 2f       	mov	r21, r26
   1af12:	c4 5f       	subi	r28, 0xF4	; 244
   1af14:	de 4f       	sbci	r29, 0xFE	; 254
   1af16:	28 83       	st	Y, r18
   1af18:	39 83       	std	Y+1, r19	; 0x01
   1af1a:	4a 83       	std	Y+2, r20	; 0x02
   1af1c:	5b 83       	std	Y+3, r21	; 0x03
   1af1e:	cc 50       	subi	r28, 0x0C	; 12
   1af20:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af22:	21 2c       	mov	r2, r1
   1af24:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1af26:	8b e1       	ldi	r24, 0x1B	; 27
   1af28:	92 e3       	ldi	r25, 0x32	; 50
   1af2a:	9c 01       	movw	r18, r24
   1af2c:	40 e0       	ldi	r20, 0x00	; 0
   1af2e:	ce 5e       	subi	r28, 0xEE	; 238
   1af30:	de 4f       	sbci	r29, 0xFE	; 254
   1af32:	28 83       	st	Y, r18
   1af34:	39 83       	std	Y+1, r19	; 0x01
   1af36:	4a 83       	std	Y+2, r20	; 0x02
   1af38:	c2 51       	subi	r28, 0x12	; 18
   1af3a:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af3c:	c0 5f       	subi	r28, 0xF0	; 240
   1af3e:	de 4f       	sbci	r29, 0xFE	; 254
   1af40:	e8 81       	ld	r30, Y
   1af42:	f9 81       	ldd	r31, Y+1	; 0x01
   1af44:	c0 51       	subi	r28, 0x10	; 16
   1af46:	d1 40       	sbci	r29, 0x01	; 1
   1af48:	80 81       	ld	r24, Z
   1af4a:	91 81       	ldd	r25, Z+1	; 0x01
   1af4c:	28 16       	cp	r2, r24
   1af4e:	39 06       	cpc	r3, r25
   1af50:	0c f0       	brlt	.+2      	; 0x1af54 <lif_extract_lif_as_lif+0x188>
   1af52:	58 c0       	rjmp	.+176    	; 0x1b004 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1af54:	00 e0       	ldi	r16, 0x00	; 0
   1af56:	11 e0       	ldi	r17, 0x01	; 1
   1af58:	c4 5f       	subi	r28, 0xF4	; 244
   1af5a:	de 4f       	sbci	r29, 0xFE	; 254
   1af5c:	28 81       	ld	r18, Y
   1af5e:	39 81       	ldd	r19, Y+1	; 0x01
   1af60:	4a 81       	ldd	r20, Y+2	; 0x02
   1af62:	5b 81       	ldd	r21, Y+3	; 0x03
   1af64:	cc 50       	subi	r28, 0x0C	; 12
   1af66:	d1 40       	sbci	r29, 0x01	; 1
   1af68:	be 01       	movw	r22, r28
   1af6a:	68 5f       	subi	r22, 0xF8	; 248
   1af6c:	7f 4f       	sbci	r23, 0xFF	; 255
   1af6e:	c4 01       	movw	r24, r8
   1af70:	0e 94 1c be 	call	0x17c38	; 0x17c38 <lif_read>
   1af74:	5b 01       	movw	r10, r22
   1af76:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1af78:	6f 3f       	cpi	r22, 0xFF	; 255
   1af7a:	71 05       	cpc	r23, r1
   1af7c:	09 f0       	breq	.+2      	; 0x1af80 <lif_extract_lif_as_lif+0x1b4>
   1af7e:	2c f4       	brge	.+10     	; 0x1af8a <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af80:	c4 01       	movw	r24, r8
   1af82:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1af86:	c7 01       	movw	r24, r14
   1af88:	4f cf       	rjmp	.-354    	; 0x1ae28 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1af8a:	00 e0       	ldi	r16, 0x00	; 0
   1af8c:	11 e0       	ldi	r17, 0x01	; 1
   1af8e:	a3 01       	movw	r20, r6
   1af90:	92 01       	movw	r18, r4
   1af92:	be 01       	movw	r22, r28
   1af94:	68 5f       	subi	r22, 0xF8	; 248
   1af96:	7f 4f       	sbci	r23, 0xFF	; 255
   1af98:	c7 01       	movw	r24, r14
   1af9a:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1af9e:	c5 01       	movw	r24, r10
   1afa0:	0b 2c       	mov	r0, r11
   1afa2:	00 0c       	add	r0, r0
   1afa4:	aa 0b       	sbc	r26, r26
   1afa6:	bb 0b       	sbc	r27, r27
   1afa8:	48 0e       	add	r4, r24
   1afaa:	59 1e       	adc	r5, r25
   1afac:	6a 1e       	adc	r6, r26
   1afae:	7b 1e       	adc	r7, r27
        offset += size;
   1afb0:	c4 5f       	subi	r28, 0xF4	; 244
   1afb2:	de 4f       	sbci	r29, 0xFE	; 254
   1afb4:	28 81       	ld	r18, Y
   1afb6:	39 81       	ldd	r19, Y+1	; 0x01
   1afb8:	4a 81       	ldd	r20, Y+2	; 0x02
   1afba:	5b 81       	ldd	r21, Y+3	; 0x03
   1afbc:	cc 50       	subi	r28, 0x0C	; 12
   1afbe:	d1 40       	sbci	r29, 0x01	; 1
   1afc0:	28 0f       	add	r18, r24
   1afc2:	39 1f       	adc	r19, r25
   1afc4:	4a 1f       	adc	r20, r26
   1afc6:	5b 1f       	adc	r21, r27
   1afc8:	c4 5f       	subi	r28, 0xF4	; 244
   1afca:	de 4f       	sbci	r29, 0xFE	; 254
   1afcc:	28 83       	st	Y, r18
   1afce:	39 83       	std	Y+1, r19	; 0x01
   1afd0:	4a 83       	std	Y+2, r20	; 0x02
   1afd2:	5b 83       	std	Y+3, r21	; 0x03
   1afd4:	cc 50       	subi	r28, 0x0C	; 12
   1afd6:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1afd8:	ed b7       	in	r30, 0x3d	; 61
   1afda:	fe b7       	in	r31, 0x3e	; 62
   1afdc:	44 82       	std	Z+4, r4	; 0x04
   1afde:	55 82       	std	Z+5, r5	; 0x05
   1afe0:	66 82       	std	Z+6, r6	; 0x06
   1afe2:	77 82       	std	Z+7, r7	; 0x07
   1afe4:	ce 5e       	subi	r28, 0xEE	; 238
   1afe6:	de 4f       	sbci	r29, 0xFE	; 254
   1afe8:	28 81       	ld	r18, Y
   1afea:	39 81       	ldd	r19, Y+1	; 0x01
   1afec:	4a 81       	ldd	r20, Y+2	; 0x02
   1afee:	c2 51       	subi	r28, 0x12	; 18
   1aff0:	d1 40       	sbci	r29, 0x01	; 1
   1aff2:	21 83       	std	Z+1, r18	; 0x01
   1aff4:	32 83       	std	Z+2, r19	; 0x02
   1aff6:	43 83       	std	Z+3, r20	; 0x03
   1aff8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1affc:	ff ef       	ldi	r31, 0xFF	; 255
   1affe:	2f 1a       	sub	r2, r31
   1b000:	3f 0a       	sbc	r3, r31
   1b002:	9c cf       	rjmp	.-200    	; 0x1af3c <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b004:	c4 01       	movw	r24, r8
   1b006:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1b00a:	c7 01       	movw	r24, r14
   1b00c:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b010:	ed b7       	in	r30, 0x3d	; 61
   1b012:	fe b7       	in	r31, 0x3e	; 62
   1b014:	44 82       	std	Z+4, r4	; 0x04
   1b016:	55 82       	std	Z+5, r5	; 0x05
   1b018:	66 82       	std	Z+6, r6	; 0x06
   1b01a:	77 82       	std	Z+7, r7	; 0x07
   1b01c:	8d e0       	ldi	r24, 0x0D	; 13
   1b01e:	92 e3       	ldi	r25, 0x32	; 50
   1b020:	a0 e0       	ldi	r26, 0x00	; 0
   1b022:	81 83       	std	Z+1, r24	; 0x01
   1b024:	92 83       	std	Z+2, r25	; 0x02
   1b026:	a3 83       	std	Z+3, r26	; 0x03
   1b028:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(1);
   1b02c:	01 e0       	ldi	r16, 0x01	; 1
   1b02e:	10 e0       	ldi	r17, 0x00	; 0
}
   1b030:	c8 01       	movw	r24, r16
   1b032:	cc 5e       	subi	r28, 0xEC	; 236
   1b034:	de 4f       	sbci	r29, 0xFE	; 254
   1b036:	e2 e1       	ldi	r30, 0x12	; 18
   1b038:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__epilogue_restores__>

0001b03c <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b03c:	2f 92       	push	r2
   1b03e:	3f 92       	push	r3
   1b040:	4f 92       	push	r4
   1b042:	5f 92       	push	r5
   1b044:	6f 92       	push	r6
   1b046:	8f 92       	push	r8
   1b048:	9f 92       	push	r9
   1b04a:	af 92       	push	r10
   1b04c:	bf 92       	push	r11
   1b04e:	cf 92       	push	r12
   1b050:	df 92       	push	r13
   1b052:	ef 92       	push	r14
   1b054:	ff 92       	push	r15
   1b056:	0f 93       	push	r16
   1b058:	1f 93       	push	r17
   1b05a:	cf 93       	push	r28
   1b05c:	df 93       	push	r29
   1b05e:	cd b7       	in	r28, 0x3d	; 61
   1b060:	de b7       	in	r29, 0x3e	; 62
   1b062:	cd 51       	subi	r28, 0x1D	; 29
   1b064:	d1 40       	sbci	r29, 0x01	; 1
   1b066:	0f b6       	in	r0, 0x3f	; 63
   1b068:	f8 94       	cli
   1b06a:	de bf       	out	0x3e, r29	; 62
   1b06c:	0f be       	out	0x3f, r0	; 63
   1b06e:	cd bf       	out	0x3d, r28	; 61
   1b070:	5c 01       	movw	r10, r24
   1b072:	7b 01       	movw	r14, r22
   1b074:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b076:	dc 01       	movw	r26, r24
   1b078:	8c 91       	ld	r24, X
   1b07a:	81 11       	cpse	r24, r1
   1b07c:	03 c0       	rjmp	.+6      	; 0x1b084 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b07e:	8d ee       	ldi	r24, 0xED	; 237
   1b080:	91 e3       	ldi	r25, 0x31	; 49
   1b082:	06 c0       	rjmp	.+12     	; 0x1b090 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b084:	db 01       	movw	r26, r22
   1b086:	8c 91       	ld	r24, X
   1b088:	81 11       	cpse	r24, r1
   1b08a:	0b c0       	rjmp	.+22     	; 0x1b0a2 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b08c:	82 ed       	ldi	r24, 0xD2	; 210
   1b08e:	91 e3       	ldi	r25, 0x31	; 49
   1b090:	a0 e0       	ldi	r26, 0x00	; 0
   1b092:	ed b7       	in	r30, 0x3d	; 61
   1b094:	fe b7       	in	r31, 0x3e	; 62
   1b096:	81 83       	std	Z+1, r24	; 0x01
   1b098:	92 83       	std	Z+2, r25	; 0x02
   1b09a:	a3 83       	std	Z+3, r26	; 0x03
   1b09c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b0a0:	25 c1       	rjmp	.+586    	; 0x1b2ec <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b0a2:	da 01       	movw	r26, r20
   1b0a4:	8c 91       	ld	r24, X
   1b0a6:	81 11       	cpse	r24, r1
   1b0a8:	03 c0       	rjmp	.+6      	; 0x1b0b0 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b0aa:	86 eb       	ldi	r24, 0xB6	; 182
   1b0ac:	91 e3       	ldi	r25, 0x31	; 49
   1b0ae:	f0 cf       	rjmp	.-32     	; 0x1b090 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b0b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b0b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b0b8:	92 ff       	sbrs	r25, 2
   1b0ba:	10 c0       	rjmp	.+32     	; 0x1b0dc <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b0bc:	ed b7       	in	r30, 0x3d	; 61
   1b0be:	fe b7       	in	r31, 0x3e	; 62
   1b0c0:	51 87       	std	Z+9, r21	; 0x09
   1b0c2:	40 87       	std	Z+8, r20	; 0x08
   1b0c4:	77 83       	std	Z+7, r23	; 0x07
   1b0c6:	66 83       	std	Z+6, r22	; 0x06
   1b0c8:	b5 82       	std	Z+5, r11	; 0x05
   1b0ca:	a4 82       	std	Z+4, r10	; 0x04
   1b0cc:	87 e8       	ldi	r24, 0x87	; 135
   1b0ce:	91 e3       	ldi	r25, 0x31	; 49
   1b0d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b0d2:	81 83       	std	Z+1, r24	; 0x01
   1b0d4:	92 83       	std	Z+2, r25	; 0x02
   1b0d6:	a3 83       	std	Z+3, r26	; 0x03
   1b0d8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b0dc:	68 e0       	ldi	r22, 0x08	; 8
   1b0de:	79 e0       	ldi	r23, 0x09	; 9
   1b0e0:	c4 01       	movw	r24, r8
   1b0e2:	0e 94 a5 cd 	call	0x19b4a	; 0x19b4a <lif_open_volume>
   1b0e6:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b0e8:	00 97       	sbiw	r24, 0x00	; 0
   1b0ea:	09 f4       	brne	.+2      	; 0x1b0ee <lif_add_lif_file+0xb2>
   1b0ec:	ff c0       	rjmp	.+510    	; 0x1b2ec <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b0ee:	b7 01       	movw	r22, r14
   1b0f0:	01 d8       	rcall	.-4094   	; 0x1a0f4 <lif_find_file>
    if(index == -1)
   1b0f2:	01 96       	adiw	r24, 0x01	; 1
   1b0f4:	a1 f4       	brne	.+40     	; 0x1b11e <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b0f6:	ed b7       	in	r30, 0x3d	; 61
   1b0f8:	fe b7       	in	r31, 0x3e	; 62
   1b0fa:	f5 82       	std	Z+5, r15	; 0x05
   1b0fc:	e4 82       	std	Z+4, r14	; 0x04
   1b0fe:	84 e7       	ldi	r24, 0x74	; 116
   1b100:	91 e3       	ldi	r25, 0x31	; 49
   1b102:	a0 e0       	ldi	r26, 0x00	; 0
   1b104:	81 83       	std	Z+1, r24	; 0x01
   1b106:	92 83       	std	Z+2, r25	; 0x02
   1b108:	a3 83       	std	Z+3, r26	; 0x03
   1b10a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b10e:	c6 01       	movw	r24, r12
   1b110:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b114:	60 e0       	ldi	r22, 0x00	; 0
   1b116:	70 e0       	ldi	r23, 0x00	; 0
   1b118:	80 e0       	ldi	r24, 0x00	; 0
   1b11a:	90 e0       	ldi	r25, 0x00	; 0
   1b11c:	ff c0       	rjmp	.+510    	; 0x1b31c <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b11e:	68 e0       	ldi	r22, 0x08	; 8
   1b120:	79 e0       	ldi	r23, 0x09	; 9
   1b122:	c5 01       	movw	r24, r10
   1b124:	0e 94 a5 cd 	call	0x19b4a	; 0x19b4a <lif_open_volume>
   1b128:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b12a:	00 97       	sbiw	r24, 0x00	; 0
   1b12c:	09 f4       	brne	.+2      	; 0x1b130 <lif_add_lif_file+0xf4>
   1b12e:	de c0       	rjmp	.+444    	; 0x1b2ec <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b130:	f6 01       	movw	r30, r12
   1b132:	e0 5a       	subi	r30, 0xA0	; 160
   1b134:	ff 4f       	sbci	r31, 0xFF	; 255
   1b136:	40 81       	ld	r20, Z
   1b138:	51 81       	ldd	r21, Z+1	; 0x01
   1b13a:	62 81       	ldd	r22, Z+2	; 0x02
   1b13c:	73 81       	ldd	r23, Z+3	; 0x03
   1b13e:	0e 94 45 cc 	call	0x1988a	; 0x1988a <lif_newdir>
   1b142:	ca 5e       	subi	r28, 0xEA	; 234
   1b144:	de 4f       	sbci	r29, 0xFE	; 254
   1b146:	99 83       	std	Y+1, r25	; 0x01
   1b148:	88 83       	st	Y, r24
   1b14a:	c6 51       	subi	r28, 0x16	; 22
   1b14c:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b14e:	01 96       	adiw	r24, 0x01	; 1
   1b150:	79 f4       	brne	.+30     	; 0x1b170 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b152:	ed b7       	in	r30, 0x3d	; 61
   1b154:	fe b7       	in	r31, 0x3e	; 62
   1b156:	97 82       	std	Z+7, r9	; 0x07
   1b158:	86 82       	std	Z+6, r8	; 0x06
   1b15a:	b5 82       	std	Z+5, r11	; 0x05
   1b15c:	a4 82       	std	Z+4, r10	; 0x04
   1b15e:	84 e4       	ldi	r24, 0x44	; 68
   1b160:	91 e3       	ldi	r25, 0x31	; 49
   1b162:	a0 e0       	ldi	r26, 0x00	; 0
   1b164:	81 83       	std	Z+1, r24	; 0x01
   1b166:	92 83       	std	Z+2, r25	; 0x02
   1b168:	a3 83       	std	Z+3, r26	; 0x03
   1b16a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b16e:	a8 c0       	rjmp	.+336    	; 0x1b2c0 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b170:	c7 01       	movw	r24, r14
   1b172:	84 5a       	subi	r24, 0xA4	; 164
   1b174:	9f 4f       	sbci	r25, 0xFF	; 255
   1b176:	dc 01       	movw	r26, r24
   1b178:	4d 91       	ld	r20, X+
   1b17a:	5d 91       	ld	r21, X+
   1b17c:	6d 91       	ld	r22, X+
   1b17e:	7c 91       	ld	r23, X
   1b180:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b182:	21 e2       	ldi	r18, 0x21	; 33
   1b184:	f6 01       	movw	r30, r12
   1b186:	e1 5b       	subi	r30, 0xB1	; 177
   1b188:	ff 4f       	sbci	r31, 0xFF	; 255
   1b18a:	1d 97       	sbiw	r26, 0x0d	; 13
   1b18c:	01 90       	ld	r0, Z+
   1b18e:	0d 92       	st	X+, r0
   1b190:	2a 95       	dec	r18
   1b192:	e1 f7       	brne	.-8      	; 0x1b18c <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b194:	fc 01       	movw	r30, r24
   1b196:	40 83       	st	Z, r20
   1b198:	51 83       	std	Z+1, r21	; 0x01
   1b19a:	62 83       	std	Z+2, r22	; 0x02
   1b19c:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b19e:	b6 2f       	mov	r27, r22
   1b1a0:	a5 2f       	mov	r26, r21
   1b1a2:	94 2f       	mov	r25, r20
   1b1a4:	88 27       	eor	r24, r24
   1b1a6:	c2 5f       	subi	r28, 0xF2	; 242
   1b1a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b1aa:	88 83       	st	Y, r24
   1b1ac:	99 83       	std	Y+1, r25	; 0x01
   1b1ae:	aa 83       	std	Y+2, r26	; 0x02
   1b1b0:	bb 83       	std	Y+3, r27	; 0x03
   1b1b2:	ce 50       	subi	r28, 0x0E	; 14
   1b1b4:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b1b6:	f6 01       	movw	r30, r12
   1b1b8:	e4 5a       	subi	r30, 0xA4	; 164
   1b1ba:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1bc:	80 81       	ld	r24, Z
   1b1be:	91 81       	ldd	r25, Z+1	; 0x01
   1b1c0:	a2 81       	ldd	r26, Z+2	; 0x02
   1b1c2:	b3 81       	ldd	r27, Z+3	; 0x03
   1b1c4:	22 27       	eor	r18, r18
   1b1c6:	38 2f       	mov	r19, r24
   1b1c8:	49 2f       	mov	r20, r25
   1b1ca:	5a 2f       	mov	r21, r26
   1b1cc:	ce 5e       	subi	r28, 0xEE	; 238
   1b1ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b1d0:	28 83       	st	Y, r18
   1b1d2:	39 83       	std	Y+1, r19	; 0x01
   1b1d4:	4a 83       	std	Y+2, r20	; 0x02
   1b1d6:	5b 83       	std	Y+3, r21	; 0x03
   1b1d8:	c2 51       	subi	r28, 0x12	; 18
   1b1da:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1dc:	21 2c       	mov	r2, r1
   1b1de:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b1e0:	81 2c       	mov	r8, r1
   1b1e2:	91 2c       	mov	r9, r1
   1b1e4:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1e6:	a7 01       	movw	r20, r14
   1b1e8:	40 5a       	subi	r20, 0xA0	; 160
   1b1ea:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1ec:	c4 5e       	subi	r28, 0xE4	; 228
   1b1ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b1f0:	59 83       	std	Y+1, r21	; 0x01
   1b1f2:	48 83       	st	Y, r20
   1b1f4:	cc 51       	subi	r28, 0x1C	; 28
   1b1f6:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b1f8:	86 e3       	ldi	r24, 0x36	; 54
   1b1fa:	91 e3       	ldi	r25, 0x31	; 49
   1b1fc:	2c 01       	movw	r4, r24
   1b1fe:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b200:	27 c0       	rjmp	.+78     	; 0x1b250 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b202:	00 e0       	ldi	r16, 0x00	; 0
   1b204:	11 e0       	ldi	r17, 0x01	; 1
   1b206:	c8 5e       	subi	r28, 0xE8	; 232
   1b208:	de 4f       	sbci	r29, 0xFE	; 254
   1b20a:	28 81       	ld	r18, Y
   1b20c:	39 81       	ldd	r19, Y+1	; 0x01
   1b20e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b210:	5b 81       	ldd	r21, Y+3	; 0x03
   1b212:	c8 51       	subi	r28, 0x18	; 24
   1b214:	d1 40       	sbci	r29, 0x01	; 1
   1b216:	be 01       	movw	r22, r28
   1b218:	66 5f       	subi	r22, 0xF6	; 246
   1b21a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b21c:	c7 01       	movw	r24, r14
   1b21e:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b222:	8f 3f       	cpi	r24, 0xFF	; 255
   1b224:	91 05       	cpc	r25, r1
   1b226:	09 f0       	breq	.+2      	; 0x1b22a <lif_add_lif_file+0x1ee>
   1b228:	0c f4       	brge	.+2      	; 0x1b22c <lif_add_lif_file+0x1f0>
   1b22a:	4a c0       	rjmp	.+148    	; 0x1b2c0 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b22c:	5f ef       	ldi	r21, 0xFF	; 255
   1b22e:	95 1a       	sub	r9, r21
   1b230:	a5 0a       	sbc	r10, r21
   1b232:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b234:	ed b7       	in	r30, 0x3d	; 61
   1b236:	fe b7       	in	r31, 0x3e	; 62
   1b238:	84 82       	std	Z+4, r8	; 0x04
   1b23a:	95 82       	std	Z+5, r9	; 0x05
   1b23c:	a6 82       	std	Z+6, r10	; 0x06
   1b23e:	b7 82       	std	Z+7, r11	; 0x07
   1b240:	41 82       	std	Z+1, r4	; 0x01
   1b242:	52 82       	std	Z+2, r5	; 0x02
   1b244:	63 82       	std	Z+3, r6	; 0x03
   1b246:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b24a:	ff ef       	ldi	r31, 0xFF	; 255
   1b24c:	2f 1a       	sub	r2, r31
   1b24e:	3f 0a       	sbc	r3, r31
   1b250:	ce 5e       	subi	r28, 0xEE	; 238
   1b252:	de 4f       	sbci	r29, 0xFE	; 254
   1b254:	28 81       	ld	r18, Y
   1b256:	39 81       	ldd	r19, Y+1	; 0x01
   1b258:	4a 81       	ldd	r20, Y+2	; 0x02
   1b25a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b25c:	c2 51       	subi	r28, 0x12	; 18
   1b25e:	d1 40       	sbci	r29, 0x01	; 1
   1b260:	28 0d       	add	r18, r8
   1b262:	39 1d       	adc	r19, r9
   1b264:	4a 1d       	adc	r20, r10
   1b266:	5b 1d       	adc	r21, r11
   1b268:	c2 5f       	subi	r28, 0xF2	; 242
   1b26a:	de 4f       	sbci	r29, 0xFE	; 254
   1b26c:	88 81       	ld	r24, Y
   1b26e:	99 81       	ldd	r25, Y+1	; 0x01
   1b270:	aa 81       	ldd	r26, Y+2	; 0x02
   1b272:	bb 81       	ldd	r27, Y+3	; 0x03
   1b274:	ce 50       	subi	r28, 0x0E	; 14
   1b276:	d1 40       	sbci	r29, 0x01	; 1
   1b278:	88 0d       	add	r24, r8
   1b27a:	99 1d       	adc	r25, r9
   1b27c:	aa 1d       	adc	r26, r10
   1b27e:	bb 1d       	adc	r27, r11
   1b280:	c8 5e       	subi	r28, 0xE8	; 232
   1b282:	de 4f       	sbci	r29, 0xFE	; 254
   1b284:	88 83       	st	Y, r24
   1b286:	99 83       	std	Y+1, r25	; 0x01
   1b288:	aa 83       	std	Y+2, r26	; 0x02
   1b28a:	bb 83       	std	Y+3, r27	; 0x03
   1b28c:	c8 51       	subi	r28, 0x18	; 24
   1b28e:	d1 40       	sbci	r29, 0x01	; 1
   1b290:	c4 5e       	subi	r28, 0xE4	; 228
   1b292:	de 4f       	sbci	r29, 0xFE	; 254
   1b294:	a8 81       	ld	r26, Y
   1b296:	b9 81       	ldd	r27, Y+1	; 0x01
   1b298:	cc 51       	subi	r28, 0x1C	; 28
   1b29a:	d1 40       	sbci	r29, 0x01	; 1
   1b29c:	8d 91       	ld	r24, X+
   1b29e:	9c 91       	ld	r25, X
   1b2a0:	28 16       	cp	r2, r24
   1b2a2:	39 06       	cpc	r3, r25
   1b2a4:	94 f4       	brge	.+36     	; 0x1b2ca <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b2a6:	00 e0       	ldi	r16, 0x00	; 0
   1b2a8:	11 e0       	ldi	r17, 0x01	; 1
   1b2aa:	be 01       	movw	r22, r28
   1b2ac:	66 5f       	subi	r22, 0xF6	; 246
   1b2ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2b0:	c6 01       	movw	r24, r12
   1b2b2:	0e 94 1c be 	call	0x17c38	; 0x17c38 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b2b6:	6f 3f       	cpi	r22, 0xFF	; 255
   1b2b8:	71 05       	cpc	r23, r1
   1b2ba:	11 f0       	breq	.+4      	; 0x1b2c0 <lif_add_lif_file+0x284>
   1b2bc:	0c f0       	brlt	.+2      	; 0x1b2c0 <lif_add_lif_file+0x284>
   1b2be:	a1 cf       	rjmp	.-190    	; 0x1b202 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2c0:	c7 01       	movw	r24, r14
   1b2c2:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1b2c6:	c6 01       	movw	r24, r12
   1b2c8:	0f c0       	rjmp	.+30     	; 0x1b2e8 <lif_add_lif_file+0x2ac>
   1b2ca:	c6 01       	movw	r24, r12
   1b2cc:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b2d0:	ca 5e       	subi	r28, 0xEA	; 234
   1b2d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b2d4:	68 81       	ld	r22, Y
   1b2d6:	79 81       	ldd	r23, Y+1	; 0x01
   1b2d8:	c6 51       	subi	r28, 0x16	; 22
   1b2da:	d1 40       	sbci	r29, 0x01	; 1
   1b2dc:	c7 01       	movw	r24, r14
   1b2de:	0e 94 dd c7 	call	0x18fba	; 0x18fba <lif_writedirindex>
   1b2e2:	89 2b       	or	r24, r25
   1b2e4:	41 f4       	brne	.+16     	; 0x1b2f6 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2e6:	c7 01       	movw	r24, r14
   1b2e8:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b2ec:	6f ef       	ldi	r22, 0xFF	; 255
   1b2ee:	7f ef       	ldi	r23, 0xFF	; 255
   1b2f0:	8f ef       	ldi	r24, 0xFF	; 255
   1b2f2:	9f ef       	ldi	r25, 0xFF	; 255
   1b2f4:	13 c0       	rjmp	.+38     	; 0x1b31c <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2f6:	c7 01       	movw	r24, r14
   1b2f8:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b2fc:	ed b7       	in	r30, 0x3d	; 61
   1b2fe:	fe b7       	in	r31, 0x3e	; 62
   1b300:	84 82       	std	Z+4, r8	; 0x04
   1b302:	95 82       	std	Z+5, r9	; 0x05
   1b304:	a6 82       	std	Z+6, r10	; 0x06
   1b306:	b7 82       	std	Z+7, r11	; 0x07
   1b308:	88 e2       	ldi	r24, 0x28	; 40
   1b30a:	91 e3       	ldi	r25, 0x31	; 49
   1b30c:	a0 e0       	ldi	r26, 0x00	; 0
   1b30e:	81 83       	std	Z+1, r24	; 0x01
   1b310:	92 83       	std	Z+2, r25	; 0x02
   1b312:	a3 83       	std	Z+3, r26	; 0x03
   1b314:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(bytes);
   1b318:	b4 01       	movw	r22, r8
   1b31a:	c5 01       	movw	r24, r10
}
   1b31c:	c3 5e       	subi	r28, 0xE3	; 227
   1b31e:	de 4f       	sbci	r29, 0xFE	; 254
   1b320:	0f b6       	in	r0, 0x3f	; 63
   1b322:	f8 94       	cli
   1b324:	de bf       	out	0x3e, r29	; 62
   1b326:	0f be       	out	0x3f, r0	; 63
   1b328:	cd bf       	out	0x3d, r28	; 61
   1b32a:	df 91       	pop	r29
   1b32c:	cf 91       	pop	r28
   1b32e:	1f 91       	pop	r17
   1b330:	0f 91       	pop	r16
   1b332:	ff 90       	pop	r15
   1b334:	ef 90       	pop	r14
   1b336:	df 90       	pop	r13
   1b338:	cf 90       	pop	r12
   1b33a:	bf 90       	pop	r11
   1b33c:	af 90       	pop	r10
   1b33e:	9f 90       	pop	r9
   1b340:	8f 90       	pop	r8
   1b342:	6f 90       	pop	r6
   1b344:	5f 90       	pop	r5
   1b346:	4f 90       	pop	r4
   1b348:	3f 90       	pop	r3
   1b34a:	2f 90       	pop	r2
   1b34c:	08 95       	ret

0001b34e <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b34e:	ef 92       	push	r14
   1b350:	ff 92       	push	r15
   1b352:	0f 93       	push	r16
   1b354:	1f 93       	push	r17
   1b356:	cf 93       	push	r28
   1b358:	df 93       	push	r29
   1b35a:	ad b7       	in	r26, 0x3d	; 61
   1b35c:	be b7       	in	r27, 0x3e	; 62
   1b35e:	17 97       	sbiw	r26, 0x07	; 7
   1b360:	0f b6       	in	r0, 0x3f	; 63
   1b362:	f8 94       	cli
   1b364:	be bf       	out	0x3e, r27	; 62
   1b366:	0f be       	out	0x3f, r0	; 63
   1b368:	ad bf       	out	0x3d, r26	; 61
   1b36a:	7c 01       	movw	r14, r24
   1b36c:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b36e:	fc 01       	movw	r30, r24
   1b370:	80 81       	ld	r24, Z
   1b372:	81 11       	cpse	r24, r1
   1b374:	03 c0       	rjmp	.+6      	; 0x1b37c <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b376:	83 e0       	ldi	r24, 0x03	; 3
   1b378:	91 e3       	ldi	r25, 0x31	; 49
   1b37a:	06 c0       	rjmp	.+12     	; 0x1b388 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b37c:	fb 01       	movw	r30, r22
   1b37e:	80 81       	ld	r24, Z
   1b380:	81 11       	cpse	r24, r1
   1b382:	0b c0       	rjmp	.+22     	; 0x1b39a <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b384:	83 ee       	ldi	r24, 0xE3	; 227
   1b386:	90 e3       	ldi	r25, 0x30	; 48
   1b388:	a0 e0       	ldi	r26, 0x00	; 0
   1b38a:	ed b7       	in	r30, 0x3d	; 61
   1b38c:	fe b7       	in	r31, 0x3e	; 62
   1b38e:	81 83       	std	Z+1, r24	; 0x01
   1b390:	92 83       	std	Z+2, r25	; 0x02
   1b392:	a3 83       	std	Z+3, r26	; 0x03
   1b394:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b398:	68 c0       	rjmp	.+208    	; 0x1b46a <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b39a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b39e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b3a2:	92 ff       	sbrs	r25, 2
   1b3a4:	0e c0       	rjmp	.+28     	; 0x1b3c2 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b3a6:	ed b7       	in	r30, 0x3d	; 61
   1b3a8:	fe b7       	in	r31, 0x3e	; 62
   1b3aa:	77 83       	std	Z+7, r23	; 0x07
   1b3ac:	66 83       	std	Z+6, r22	; 0x06
   1b3ae:	f5 82       	std	Z+5, r15	; 0x05
   1b3b0:	e4 82       	std	Z+4, r14	; 0x04
   1b3b2:	84 ec       	ldi	r24, 0xC4	; 196
   1b3b4:	90 e3       	ldi	r25, 0x30	; 48
   1b3b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b3b8:	81 83       	std	Z+1, r24	; 0x01
   1b3ba:	92 83       	std	Z+2, r25	; 0x02
   1b3bc:	a3 83       	std	Z+3, r26	; 0x03
   1b3be:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b3c2:	68 e0       	ldi	r22, 0x08	; 8
   1b3c4:	79 e0       	ldi	r23, 0x09	; 9
   1b3c6:	c7 01       	movw	r24, r14
   1b3c8:	0e 94 a5 cd 	call	0x19b4a	; 0x19b4a <lif_open_volume>
   1b3cc:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b3ce:	00 97       	sbiw	r24, 0x00	; 0
   1b3d0:	09 f4       	brne	.+2      	; 0x1b3d4 <lif_del_file+0x86>
   1b3d2:	4b c0       	rjmp	.+150    	; 0x1b46a <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b3d4:	b8 01       	movw	r22, r16
   1b3d6:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <lif_find_file>
    if(index == -1)
   1b3da:	8f 3f       	cpi	r24, 0xFF	; 255
   1b3dc:	ff ef       	ldi	r31, 0xFF	; 255
   1b3de:	9f 07       	cpc	r25, r31
   1b3e0:	a1 f4       	brne	.+40     	; 0x1b40a <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3e2:	ce 01       	movw	r24, r28
   1b3e4:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b3e8:	ed b7       	in	r30, 0x3d	; 61
   1b3ea:	fe b7       	in	r31, 0x3e	; 62
   1b3ec:	17 83       	std	Z+7, r17	; 0x07
   1b3ee:	06 83       	std	Z+6, r16	; 0x06
   1b3f0:	f5 82       	std	Z+5, r15	; 0x05
   1b3f2:	e4 82       	std	Z+4, r14	; 0x04
   1b3f4:	8c e9       	ldi	r24, 0x9C	; 156
   1b3f6:	90 e3       	ldi	r25, 0x30	; 48
   1b3f8:	a0 e0       	ldi	r26, 0x00	; 0
   1b3fa:	81 83       	std	Z+1, r24	; 0x01
   1b3fc:	92 83       	std	Z+2, r25	; 0x02
   1b3fe:	a3 83       	std	Z+3, r26	; 0x03
   1b400:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        return(0);
   1b404:	80 e0       	ldi	r24, 0x00	; 0
   1b406:	90 e0       	ldi	r25, 0x00	; 0
   1b408:	32 c0       	rjmp	.+100    	; 0x1b46e <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b40a:	2a a1       	ldd	r18, Y+34	; 0x22
   1b40c:	3b a1       	ldd	r19, Y+35	; 0x23
   1b40e:	21 50       	subi	r18, 0x01	; 1
   1b410:	31 09       	sbc	r19, r1
   1b412:	fe 01       	movw	r30, r28
   1b414:	e6 5a       	subi	r30, 0xA6	; 166
   1b416:	ff 4f       	sbci	r31, 0xFF	; 255
   1b418:	82 17       	cp	r24, r18
   1b41a:	93 07       	cpc	r25, r19
   1b41c:	2c f0       	brlt	.+10     	; 0x1b428 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b41e:	2f ef       	ldi	r18, 0xFF	; 255
   1b420:	3f ef       	ldi	r19, 0xFF	; 255
   1b422:	31 83       	std	Z+1, r19	; 0x01
   1b424:	20 83       	st	Z, r18
   1b426:	02 c0       	rjmp	.+4      	; 0x1b42c <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b428:	11 82       	std	Z+1, r1	; 0x01
   1b42a:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b42c:	bc 01       	movw	r22, r24
   1b42e:	ce 01       	movw	r24, r28
   1b430:	0e 94 dd c7 	call	0x18fba	; 0x18fba <lif_writedirindex>
   1b434:	89 2b       	or	r24, r25
   1b436:	21 f4       	brne	.+8      	; 0x1b440 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b438:	ce 01       	movw	r24, r28
   1b43a:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1b43e:	15 c0       	rjmp	.+42     	; 0x1b46a <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b440:	ce 01       	movw	r24, r28
   1b442:	0e 94 51 c8 	call	0x190a2	; 0x190a2 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b446:	ce 01       	movw	r24, r28
   1b448:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b44c:	ed b7       	in	r30, 0x3d	; 61
   1b44e:	fe b7       	in	r31, 0x3e	; 62
   1b450:	15 83       	std	Z+5, r17	; 0x05
   1b452:	04 83       	std	Z+4, r16	; 0x04
   1b454:	8d e8       	ldi	r24, 0x8D	; 141
   1b456:	90 e3       	ldi	r25, 0x30	; 48
   1b458:	a0 e0       	ldi	r26, 0x00	; 0
   1b45a:	81 83       	std	Z+1, r24	; 0x01
   1b45c:	92 83       	std	Z+2, r25	; 0x02
   1b45e:	a3 83       	std	Z+3, r26	; 0x03
   1b460:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    return(1);
   1b464:	81 e0       	ldi	r24, 0x01	; 1
   1b466:	90 e0       	ldi	r25, 0x00	; 0
   1b468:	02 c0       	rjmp	.+4      	; 0x1b46e <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b46a:	8f ef       	ldi	r24, 0xFF	; 255
   1b46c:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b46e:	cd b7       	in	r28, 0x3d	; 61
   1b470:	de b7       	in	r29, 0x3e	; 62
   1b472:	27 96       	adiw	r28, 0x07	; 7
   1b474:	e6 e0       	ldi	r30, 0x06	; 6
   1b476:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__epilogue_restores__+0x18>

0001b47a <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b47a:	a7 e0       	ldi	r26, 0x07	; 7
   1b47c:	b0 e0       	ldi	r27, 0x00	; 0
   1b47e:	e3 e4       	ldi	r30, 0x43	; 67
   1b480:	fa ed       	ldi	r31, 0xDA	; 218
   1b482:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__prologue_saves__+0x10>
   1b486:	6c 01       	movw	r12, r24
   1b488:	8b 01       	movw	r16, r22
   1b48a:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b48c:	fc 01       	movw	r30, r24
   1b48e:	80 81       	ld	r24, Z
   1b490:	81 11       	cpse	r24, r1
   1b492:	03 c0       	rjmp	.+6      	; 0x1b49a <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b494:	85 e6       	ldi	r24, 0x65	; 101
   1b496:	90 e3       	ldi	r25, 0x30	; 48
   1b498:	06 c0       	rjmp	.+12     	; 0x1b4a6 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1b49a:	fb 01       	movw	r30, r22
   1b49c:	80 81       	ld	r24, Z
   1b49e:	81 11       	cpse	r24, r1
   1b4a0:	0b c0       	rjmp	.+22     	; 0x1b4b8 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b4a2:	8e e3       	ldi	r24, 0x3E	; 62
   1b4a4:	90 e3       	ldi	r25, 0x30	; 48
   1b4a6:	a0 e0       	ldi	r26, 0x00	; 0
   1b4a8:	ed b7       	in	r30, 0x3d	; 61
   1b4aa:	fe b7       	in	r31, 0x3e	; 62
   1b4ac:	81 83       	std	Z+1, r24	; 0x01
   1b4ae:	92 83       	std	Z+2, r25	; 0x02
   1b4b0:	a3 83       	std	Z+3, r26	; 0x03
   1b4b2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b4b6:	58 c0       	rjmp	.+176    	; 0x1b568 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1b4b8:	fa 01       	movw	r30, r20
   1b4ba:	80 81       	ld	r24, Z
   1b4bc:	81 11       	cpse	r24, r1
   1b4be:	03 c0       	rjmp	.+6      	; 0x1b4c6 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b4c0:	87 e1       	ldi	r24, 0x17	; 23
   1b4c2:	90 e3       	ldi	r25, 0x30	; 48
   1b4c4:	f0 cf       	rjmp	.-32     	; 0x1b4a6 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b4c6:	ca 01       	movw	r24, r20
   1b4c8:	0e 94 37 bf 	call	0x17e6e	; 0x17e6e <lif_checkname>
   1b4cc:	89 2b       	or	r24, r25
   1b4ce:	19 f4       	brne	.+6      	; 0x1b4d6 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b4d0:	81 ee       	ldi	r24, 0xE1	; 225
   1b4d2:	9f e2       	ldi	r25, 0x2F	; 47
   1b4d4:	e8 cf       	rjmp	.-48     	; 0x1b4a6 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b4d6:	68 e0       	ldi	r22, 0x08	; 8
   1b4d8:	79 e0       	ldi	r23, 0x09	; 9
   1b4da:	c6 01       	movw	r24, r12
   1b4dc:	0e 94 a5 cd 	call	0x19b4a	; 0x19b4a <lif_open_volume>
   1b4e0:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b4e2:	00 97       	sbiw	r24, 0x00	; 0
   1b4e4:	09 f4       	brne	.+2      	; 0x1b4e8 <lif_rename_file+0x6e>
   1b4e6:	40 c0       	rjmp	.+128    	; 0x1b568 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b4e8:	b8 01       	movw	r22, r16
   1b4ea:	0e 94 7a d0 	call	0x1a0f4	; 0x1a0f4 <lif_find_file>
   1b4ee:	5c 01       	movw	r10, r24
    if(index == -1)
   1b4f0:	01 96       	adiw	r24, 0x01	; 1
   1b4f2:	a1 f4       	brne	.+40     	; 0x1b51c <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b4f4:	ed b7       	in	r30, 0x3d	; 61
   1b4f6:	fe b7       	in	r31, 0x3e	; 62
   1b4f8:	17 83       	std	Z+7, r17	; 0x07
   1b4fa:	06 83       	std	Z+6, r16	; 0x06
   1b4fc:	d5 82       	std	Z+5, r13	; 0x05
   1b4fe:	c4 82       	std	Z+4, r12	; 0x04
   1b500:	88 eb       	ldi	r24, 0xB8	; 184
   1b502:	9f e2       	ldi	r25, 0x2F	; 47
   1b504:	a0 e0       	ldi	r26, 0x00	; 0
   1b506:	81 83       	std	Z+1, r24	; 0x01
   1b508:	92 83       	std	Z+2, r25	; 0x02
   1b50a:	a3 83       	std	Z+3, r26	; 0x03
   1b50c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b510:	ce 01       	movw	r24, r28
   1b512:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b516:	80 e0       	ldi	r24, 0x00	; 0
   1b518:	90 e0       	ldi	r25, 0x00	; 0
   1b51a:	28 c0       	rjmp	.+80     	; 0x1b56c <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b51c:	4a e0       	ldi	r20, 0x0A	; 10
   1b51e:	50 e0       	ldi	r21, 0x00	; 0
   1b520:	b7 01       	movw	r22, r14
   1b522:	ce 01       	movw	r24, r28
   1b524:	81 5b       	subi	r24, 0xB1	; 177
   1b526:	9f 4f       	sbci	r25, 0xFF	; 255
   1b528:	0e 94 71 bf 	call	0x17ee2	; 0x17ee2 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b52c:	b5 01       	movw	r22, r10
   1b52e:	ce 01       	movw	r24, r28
   1b530:	0e 94 dd c7 	call	0x18fba	; 0x18fba <lif_writedirindex>
   1b534:	89 2b       	or	r24, r25
   1b536:	21 f4       	brne	.+8      	; 0x1b540 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b538:	ce 01       	movw	r24, r28
   1b53a:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
   1b53e:	14 c0       	rjmp	.+40     	; 0x1b568 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b540:	ed b7       	in	r30, 0x3d	; 61
   1b542:	fe b7       	in	r31, 0x3e	; 62
   1b544:	f7 82       	std	Z+7, r15	; 0x07
   1b546:	e6 82       	std	Z+6, r14	; 0x06
   1b548:	15 83       	std	Z+5, r17	; 0x05
   1b54a:	04 83       	std	Z+4, r16	; 0x04
   1b54c:	81 ea       	ldi	r24, 0xA1	; 161
   1b54e:	9f e2       	ldi	r25, 0x2F	; 47
   1b550:	a0 e0       	ldi	r26, 0x00	; 0
   1b552:	81 83       	std	Z+1, r24	; 0x01
   1b554:	92 83       	std	Z+2, r25	; 0x02
   1b556:	a3 83       	std	Z+3, r26	; 0x03
   1b558:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b55c:	ce 01       	movw	r24, r28
   1b55e:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b562:	81 e0       	ldi	r24, 0x01	; 1
   1b564:	90 e0       	ldi	r25, 0x00	; 0
   1b566:	02 c0       	rjmp	.+4      	; 0x1b56c <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b568:	8f ef       	ldi	r24, 0xFF	; 255
   1b56a:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b56c:	cd b7       	in	r28, 0x3d	; 61
   1b56e:	de b7       	in	r29, 0x3e	; 62
   1b570:	27 96       	adiw	r28, 0x07	; 7
   1b572:	ea e0       	ldi	r30, 0x0A	; 10
   1b574:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__epilogue_restores__+0x10>

0001b578 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b578:	4f 92       	push	r4
   1b57a:	5f 92       	push	r5
   1b57c:	6f 92       	push	r6
   1b57e:	7f 92       	push	r7
   1b580:	af 92       	push	r10
   1b582:	bf 92       	push	r11
   1b584:	cf 92       	push	r12
   1b586:	df 92       	push	r13
   1b588:	ef 92       	push	r14
   1b58a:	ff 92       	push	r15
   1b58c:	0f 93       	push	r16
   1b58e:	1f 93       	push	r17
   1b590:	cf 93       	push	r28
   1b592:	df 93       	push	r29
   1b594:	ad b7       	in	r26, 0x3d	; 61
   1b596:	be b7       	in	r27, 0x3e	; 62
   1b598:	17 97       	sbiw	r26, 0x07	; 7
   1b59a:	0f b6       	in	r0, 0x3f	; 63
   1b59c:	f8 94       	cli
   1b59e:	be bf       	out	0x3e, r27	; 62
   1b5a0:	0f be       	out	0x3f, r0	; 63
   1b5a2:	ad bf       	out	0x3d, r26	; 61
   1b5a4:	27 01       	movw	r4, r14
   1b5a6:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b5a8:	dc 01       	movw	r26, r24
   1b5aa:	ec 91       	ld	r30, X
   1b5ac:	e1 11       	cpse	r30, r1
   1b5ae:	03 c0       	rjmp	.+6      	; 0x1b5b6 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b5b0:	88 e7       	ldi	r24, 0x78	; 120
   1b5b2:	9f e2       	ldi	r25, 0x2F	; 47
   1b5b4:	16 c0       	rjmp	.+44     	; 0x1b5e2 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b5b6:	db 01       	movw	r26, r22
   1b5b8:	ec 91       	ld	r30, X
   1b5ba:	e1 11       	cpse	r30, r1
   1b5bc:	03 c0       	rjmp	.+6      	; 0x1b5c4 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b5be:	83 e5       	ldi	r24, 0x53	; 83
   1b5c0:	9f e2       	ldi	r25, 0x2F	; 47
   1b5c2:	0f c0       	rjmp	.+30     	; 0x1b5e2 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b5c4:	21 15       	cp	r18, r1
   1b5c6:	31 05       	cpc	r19, r1
   1b5c8:	41 05       	cpc	r20, r1
   1b5ca:	51 05       	cpc	r21, r1
   1b5cc:	19 f4       	brne	.+6      	; 0x1b5d4 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b5ce:	80 e3       	ldi	r24, 0x30	; 48
   1b5d0:	9f e2       	ldi	r25, 0x2F	; 47
   1b5d2:	07 c0       	rjmp	.+14     	; 0x1b5e2 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b5d4:	e1 14       	cp	r14, r1
   1b5d6:	f1 04       	cpc	r15, r1
   1b5d8:	01 05       	cpc	r16, r1
   1b5da:	11 05       	cpc	r17, r1
   1b5dc:	59 f4       	brne	.+22     	; 0x1b5f4 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b5de:	80 e1       	ldi	r24, 0x10	; 16
   1b5e0:	9f e2       	ldi	r25, 0x2F	; 47
   1b5e2:	a0 e0       	ldi	r26, 0x00	; 0
   1b5e4:	ed b7       	in	r30, 0x3d	; 61
   1b5e6:	fe b7       	in	r31, 0x3e	; 62
   1b5e8:	81 83       	std	Z+1, r24	; 0x01
   1b5ea:	92 83       	std	Z+2, r25	; 0x02
   1b5ec:	a3 83       	std	Z+3, r26	; 0x03
   1b5ee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b5f2:	2b c0       	rjmp	.+86     	; 0x1b64a <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b5f4:	67 01       	movw	r12, r14
   1b5f6:	78 01       	movw	r14, r16
   1b5f8:	f2 e0       	ldi	r31, 0x02	; 2
   1b5fa:	cf 1a       	sub	r12, r31
   1b5fc:	d1 08       	sbc	r13, r1
   1b5fe:	e1 08       	sbc	r14, r1
   1b600:	f1 08       	sbc	r15, r1
   1b602:	56 01       	movw	r10, r12
   1b604:	67 01       	movw	r12, r14
   1b606:	a2 1a       	sub	r10, r18
   1b608:	b3 0a       	sbc	r11, r19
   1b60a:	c4 0a       	sbc	r12, r20
   1b60c:	d5 0a       	sbc	r13, r21
   1b60e:	79 01       	movw	r14, r18
   1b610:	8a 01       	movw	r16, r20
   1b612:	22 e0       	ldi	r18, 0x02	; 2
   1b614:	30 e0       	ldi	r19, 0x00	; 0
   1b616:	40 e0       	ldi	r20, 0x00	; 0
   1b618:	50 e0       	ldi	r21, 0x00	; 0
   1b61a:	0e 94 5b c9 	call	0x192b6	; 0x192b6 <lif_create_volume>
    if(LIF == NULL)
   1b61e:	00 97       	sbiw	r24, 0x00	; 0
   1b620:	a1 f0       	breq	.+40     	; 0x1b64a <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b622:	0e 94 e8 c6 	call	0x18dd0	; 0x18dd0 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b626:	82 01       	movw	r16, r4
   1b628:	d6 2d       	mov	r29, r6
   1b62a:	c7 2d       	mov	r28, r7
   1b62c:	ed b7       	in	r30, 0x3d	; 61
   1b62e:	fe b7       	in	r31, 0x3e	; 62
   1b630:	44 82       	std	Z+4, r4	; 0x04
   1b632:	15 83       	std	Z+5, r17	; 0x05
   1b634:	66 82       	std	Z+6, r6	; 0x06
   1b636:	77 82       	std	Z+7, r7	; 0x07
   1b638:	80 ef       	ldi	r24, 0xF0	; 240
   1b63a:	9e e2       	ldi	r25, 0x2E	; 46
   1b63c:	a0 e0       	ldi	r26, 0x00	; 0
   1b63e:	81 83       	std	Z+1, r24	; 0x01
   1b640:	92 83       	std	Z+2, r25	; 0x02
   1b642:	a3 83       	std	Z+3, r26	; 0x03
   1b644:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    return(end);
   1b648:	04 c0       	rjmp	.+8      	; 0x1b652 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b64a:	0f ef       	ldi	r16, 0xFF	; 255
   1b64c:	1f ef       	ldi	r17, 0xFF	; 255
   1b64e:	df ef       	ldi	r29, 0xFF	; 255
   1b650:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b652:	b8 01       	movw	r22, r16
   1b654:	8d 2f       	mov	r24, r29
   1b656:	9c 2f       	mov	r25, r28
   1b658:	ad b7       	in	r26, 0x3d	; 61
   1b65a:	be b7       	in	r27, 0x3e	; 62
   1b65c:	17 96       	adiw	r26, 0x07	; 7
   1b65e:	0f b6       	in	r0, 0x3f	; 63
   1b660:	f8 94       	cli
   1b662:	be bf       	out	0x3e, r27	; 62
   1b664:	0f be       	out	0x3f, r0	; 63
   1b666:	ad bf       	out	0x3d, r26	; 61
   1b668:	df 91       	pop	r29
   1b66a:	cf 91       	pop	r28
   1b66c:	1f 91       	pop	r17
   1b66e:	0f 91       	pop	r16
   1b670:	ff 90       	pop	r15
   1b672:	ef 90       	pop	r14
   1b674:	df 90       	pop	r13
   1b676:	cf 90       	pop	r12
   1b678:	bf 90       	pop	r11
   1b67a:	af 90       	pop	r10
   1b67c:	7f 90       	pop	r7
   1b67e:	6f 90       	pop	r6
   1b680:	5f 90       	pop	r5
   1b682:	4f 90       	pop	r4
   1b684:	08 95       	ret

0001b686 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b686:	a5 e0       	ldi	r26, 0x05	; 5
   1b688:	b0 e0       	ldi	r27, 0x00	; 0
   1b68a:	e8 e4       	ldi	r30, 0x48	; 72
   1b68c:	fb ed       	ldi	r31, 0xDB	; 219
   1b68e:	ab c7       	rjmp	.+3926   	; 0x1c5e6 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b690:	82 30       	cpi	r24, 0x02	; 2
   1b692:	91 05       	cpc	r25, r1
   1b694:	1c f4       	brge	.+6      	; 0x1b69c <lif_tests+0x16>
        return (0);
   1b696:	80 e0       	ldi	r24, 0x00	; 0
   1b698:	90 e0       	ldi	r25, 0x00	; 0
   1b69a:	8f c1       	rjmp	.+798    	; 0x1b9ba <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b69c:	fb 01       	movw	r30, r22
   1b69e:	e2 80       	ldd	r14, Z+2	; 0x02
   1b6a0:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b6a2:	e1 14       	cp	r14, r1
   1b6a4:	f1 04       	cpc	r15, r1
   1b6a6:	09 f4       	brne	.+2      	; 0x1b6aa <lif_tests+0x24>
   1b6a8:	86 c1       	rjmp	.+780    	; 0x1b9b6 <lif_tests+0x330>
   1b6aa:	f7 01       	movw	r30, r14
   1b6ac:	20 81       	ld	r18, Z
   1b6ae:	22 23       	and	r18, r18
   1b6b0:	09 f4       	brne	.+2      	; 0x1b6b4 <lif_tests+0x2e>
   1b6b2:	81 c1       	rjmp	.+770    	; 0x1b9b6 <lif_tests+0x330>
   1b6b4:	8b 01       	movw	r16, r22
   1b6b6:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1b6b8:	62 eb       	ldi	r22, 0xB2	; 178
   1b6ba:	76 e1       	ldi	r23, 0x16	; 22
   1b6bc:	f8 01       	movw	r30, r16
   1b6be:	80 81       	ld	r24, Z
   1b6c0:	91 81       	ldd	r25, Z+1	; 0x01
   1b6c2:	0e 94 bb 30 	call	0x6176	; 0x6176 <MATCHI_LEN>
   1b6c6:	89 2b       	or	r24, r25
   1b6c8:	d1 f0       	breq	.+52     	; 0x1b6fe <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b6ca:	6c e6       	ldi	r22, 0x6C	; 108
   1b6cc:	76 e1       	ldi	r23, 0x16	; 22
   1b6ce:	c7 01       	movw	r24, r14
   1b6d0:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1b6d4:	89 2b       	or	r24, r25
   1b6d6:	29 f0       	breq	.+10     	; 0x1b6e2 <lif_tests+0x5c>
		{
			lif_help(1);
   1b6d8:	81 e0       	ldi	r24, 0x01	; 1
   1b6da:	90 e0       	ldi	r25, 0x00	; 0
   1b6dc:	0e 94 0d bd 	call	0x17a1a	; 0x17a1a <lif_help>
   1b6e0:	6a c1       	rjmp	.+724    	; 0x1b9b6 <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b6e2:	6b e6       	ldi	r22, 0x6B	; 107
   1b6e4:	76 e1       	ldi	r23, 0x16	; 22
   1b6e6:	c7 01       	movw	r24, r14
   1b6e8:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1b6ec:	89 2b       	or	r24, r25
   1b6ee:	a1 f7       	brne	.-24     	; 0x1b6d8 <lif_tests+0x52>
   1b6f0:	61 e7       	ldi	r22, 0x71	; 113
   1b6f2:	76 e1       	ldi	r23, 0x16	; 22
   1b6f4:	c7 01       	movw	r24, r14
   1b6f6:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1b6fa:	89 2b       	or	r24, r25
   1b6fc:	69 f7       	brne	.-38     	; 0x1b6d8 <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b6fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b702:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b706:	9b 7f       	andi	r25, 0xFB	; 251
   1b708:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b70c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b710:	96 01       	movw	r18, r12
   1b712:	42 e0       	ldi	r20, 0x02	; 2
   1b714:	50 e0       	ldi	r21, 0x00	; 0
   1b716:	64 e7       	ldi	r22, 0x74	; 116
   1b718:	76 e1       	ldi	r23, 0x16	; 22
   1b71a:	c7 01       	movw	r24, r14
   1b71c:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b720:	89 2b       	or	r24, r25
   1b722:	79 f0       	breq	.+30     	; 0x1b742 <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1b724:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b728:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b72c:	94 60       	ori	r25, 0x04	; 4
   1b72e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b732:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b736:	f8 01       	movw	r30, r16
   1b738:	e4 80       	ldd	r14, Z+4	; 0x04
   1b73a:	f5 80       	ldd	r15, Z+5	; 0x05
   1b73c:	c3 e0       	ldi	r28, 0x03	; 3
   1b73e:	d0 e0       	ldi	r29, 0x00	; 0
   1b740:	02 c0       	rjmp	.+4      	; 0x1b746 <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b742:	c2 e0       	ldi	r28, 0x02	; 2
   1b744:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b746:	5e 01       	movw	r10, r28
   1b748:	f3 e0       	ldi	r31, 0x03	; 3
   1b74a:	af 0e       	add	r10, r31
   1b74c:	b1 1c       	adc	r11, r1
   1b74e:	96 01       	movw	r18, r12
   1b750:	a5 01       	movw	r20, r10
   1b752:	67 e7       	ldi	r22, 0x77	; 119
   1b754:	76 e1       	ldi	r23, 0x16	; 22
   1b756:	c7 01       	movw	r24, r14
   1b758:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b75c:	89 2b       	or	r24, r25
   1b75e:	61 f0       	breq	.+24     	; 0x1b778 <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b760:	cc 0f       	add	r28, r28
   1b762:	dd 1f       	adc	r29, r29
   1b764:	c0 0f       	add	r28, r16
   1b766:	d1 1f       	adc	r29, r17
   1b768:	4c 81       	ldd	r20, Y+4	; 0x04
   1b76a:	5d 81       	ldd	r21, Y+5	; 0x05
   1b76c:	6a 81       	ldd	r22, Y+2	; 0x02
   1b76e:	7b 81       	ldd	r23, Y+3	; 0x03
   1b770:	88 81       	ld	r24, Y
   1b772:	99 81       	ldd	r25, Y+1	; 0x01
   1b774:	63 dc       	rcall	.-1850   	; 0x1b03c <lif_add_lif_file>
   1b776:	1f c1       	rjmp	.+574    	; 0x1b9b6 <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b778:	96 01       	movw	r18, r12
   1b77a:	a5 01       	movw	r20, r10
   1b77c:	6e e7       	ldi	r22, 0x7E	; 126
   1b77e:	76 e1       	ldi	r23, 0x16	; 22
   1b780:	c7 01       	movw	r24, r14
   1b782:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b786:	89 2b       	or	r24, r25
   1b788:	69 f0       	breq	.+26     	; 0x1b7a4 <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b78a:	cc 0f       	add	r28, r28
   1b78c:	dd 1f       	adc	r29, r29
   1b78e:	c0 0f       	add	r28, r16
   1b790:	d1 1f       	adc	r29, r17
   1b792:	4c 81       	ldd	r20, Y+4	; 0x04
   1b794:	5d 81       	ldd	r21, Y+5	; 0x05
   1b796:	6a 81       	ldd	r22, Y+2	; 0x02
   1b798:	7b 81       	ldd	r23, Y+3	; 0x03
   1b79a:	88 81       	ld	r24, Y
   1b79c:	99 81       	ldd	r25, Y+1	; 0x01
   1b79e:	0e 94 fb d2 	call	0x1a5f6	; 0x1a5f6 <lif_add_ascii_file_as_e010>
   1b7a2:	09 c1       	rjmp	.+530    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b7a4:	96 01       	movw	r18, r12
   1b7a6:	a5 01       	movw	r20, r10
   1b7a8:	62 e8       	ldi	r22, 0x82	; 130
   1b7aa:	76 e1       	ldi	r23, 0x16	; 22
   1b7ac:	c7 01       	movw	r24, r14
   1b7ae:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b7b2:	89 2b       	or	r24, r25
   1b7b4:	09 f4       	brne	.+2      	; 0x1b7b8 <lif_tests+0x132>
   1b7b6:	42 c0       	rjmp	.+132    	; 0x1b83c <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b7b8:	ce 01       	movw	r24, r28
   1b7ba:	88 0f       	add	r24, r24
   1b7bc:	99 1f       	adc	r25, r25
   1b7be:	e8 01       	movw	r28, r16
   1b7c0:	c8 0f       	add	r28, r24
   1b7c2:	d9 1f       	adc	r29, r25
   1b7c4:	c8 80       	ld	r12, Y
   1b7c6:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b7c8:	aa 80       	ldd	r10, Y+2	; 0x02
   1b7ca:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b7cc:	0c 80       	ldd	r0, Y+4	; 0x04
   1b7ce:	dd 81       	ldd	r29, Y+5	; 0x05
   1b7d0:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b7d2:	6d e8       	ldi	r22, 0x8D	; 141
   1b7d4:	76 e1       	ldi	r23, 0x16	; 22
   1b7d6:	ce 01       	movw	r24, r28
   1b7d8:	0e 94 bb 30 	call	0x6176	; 0x6176 <MATCHI_LEN>
   1b7dc:	89 2b       	or	r24, r25
   1b7de:	09 f0       	breq	.+2      	; 0x1b7e2 <lif_tests+0x15c>
            model +=2;
   1b7e0:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b7e2:	40 e0       	ldi	r20, 0x00	; 0
   1b7e4:	50 e0       	ldi	r21, 0x00	; 0
   1b7e6:	60 e0       	ldi	r22, 0x00	; 0
   1b7e8:	70 e0       	ldi	r23, 0x00	; 0
   1b7ea:	ce 01       	movw	r24, r28
   1b7ec:	0e 94 64 a0 	call	0x140c8	; 0x140c8 <hpdir_find_drive>
   1b7f0:	89 2b       	or	r24, r25
   1b7f2:	b9 f0       	breq	.+46     	; 0x1b822 <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b7f4:	60 91 a4 21 	lds	r22, 0x21A4	; 0x8021a4 <hpdir+0xac>
   1b7f8:	70 91 a5 21 	lds	r23, 0x21A5	; 0x8021a5 <hpdir+0xad>
   1b7fc:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <hpdir+0xae>
   1b800:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <hpdir+0xaf>
   1b804:	0e 94 47 a0 	call	0x1408e	; 0x1408e <lif_dir_count>
   1b808:	9b 01       	movw	r18, r22
   1b80a:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b80c:	e0 90 a4 21 	lds	r14, 0x21A4	; 0x8021a4 <hpdir+0xac>
   1b810:	f0 90 a5 21 	lds	r15, 0x21A5	; 0x8021a5 <hpdir+0xad>
   1b814:	00 91 a6 21 	lds	r16, 0x21A6	; 0x8021a6 <hpdir+0xae>
   1b818:	10 91 a7 21 	lds	r17, 0x21A7	; 0x8021a7 <hpdir+0xaf>
   1b81c:	b5 01       	movw	r22, r10
   1b81e:	c6 01       	movw	r24, r12
   1b820:	2e c0       	rjmp	.+92     	; 0x1b87e <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b822:	ed b7       	in	r30, 0x3d	; 61
   1b824:	fe b7       	in	r31, 0x3e	; 62
   1b826:	d5 83       	std	Z+5, r29	; 0x05
   1b828:	c4 83       	std	Z+4, r28	; 0x04
   1b82a:	81 e4       	ldi	r24, 0x41	; 65
   1b82c:	91 e4       	ldi	r25, 0x41	; 65
   1b82e:	a0 e0       	ldi	r26, 0x00	; 0
   1b830:	81 83       	std	Z+1, r24	; 0x01
   1b832:	92 83       	std	Z+2, r25	; 0x02
   1b834:	a3 83       	std	Z+3, r26	; 0x03
   1b836:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b83a:	bd c0       	rjmp	.+378    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b83c:	96 01       	movw	r18, r12
   1b83e:	ae 01       	movw	r20, r28
   1b840:	4c 5f       	subi	r20, 0xFC	; 252
   1b842:	5f 4f       	sbci	r21, 0xFF	; 255
   1b844:	60 e9       	ldi	r22, 0x90	; 144
   1b846:	76 e1       	ldi	r23, 0x16	; 22
   1b848:	c7 01       	movw	r24, r14
   1b84a:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b84e:	89 2b       	or	r24, r25
   1b850:	c1 f0       	breq	.+48     	; 0x1b882 <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b852:	cc 0f       	add	r28, r28
   1b854:	dd 1f       	adc	r29, r29
   1b856:	c0 0f       	add	r28, r16
   1b858:	d1 1f       	adc	r29, r17
   1b85a:	8c 81       	ldd	r24, Y+4	; 0x04
   1b85c:	9d 81       	ldd	r25, Y+5	; 0x05
   1b85e:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <atol>
   1b862:	4b 01       	movw	r8, r22
   1b864:	5c 01       	movw	r10, r24
   1b866:	8e 81       	ldd	r24, Y+6	; 0x06
   1b868:	9f 81       	ldd	r25, Y+7	; 0x07
   1b86a:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <atol>
   1b86e:	7b 01       	movw	r14, r22
   1b870:	8c 01       	movw	r16, r24
   1b872:	6a 81       	ldd	r22, Y+2	; 0x02
   1b874:	7b 81       	ldd	r23, Y+3	; 0x03
   1b876:	a5 01       	movw	r20, r10
   1b878:	94 01       	movw	r18, r8
   1b87a:	88 81       	ld	r24, Y
   1b87c:	99 81       	ldd	r25, Y+1	; 0x01
   1b87e:	7c de       	rcall	.-776    	; 0x1b578 <lif_create_image>
   1b880:	9a c0       	rjmp	.+308    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b882:	96 01       	movw	r18, r12
   1b884:	ae 01       	movw	r20, r28
   1b886:	4e 5f       	subi	r20, 0xFE	; 254
   1b888:	5f 4f       	sbci	r21, 0xFF	; 255
   1b88a:	67 e9       	ldi	r22, 0x97	; 151
   1b88c:	76 e1       	ldi	r23, 0x16	; 22
   1b88e:	c7 01       	movw	r24, r14
   1b890:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b894:	89 2b       	or	r24, r25
   1b896:	51 f0       	breq	.+20     	; 0x1b8ac <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b898:	cc 0f       	add	r28, r28
   1b89a:	dd 1f       	adc	r29, r29
   1b89c:	c0 0f       	add	r28, r16
   1b89e:	d1 1f       	adc	r29, r17
   1b8a0:	6a 81       	ldd	r22, Y+2	; 0x02
   1b8a2:	7b 81       	ldd	r23, Y+3	; 0x03
   1b8a4:	88 81       	ld	r24, Y
   1b8a6:	99 81       	ldd	r25, Y+1	; 0x01
   1b8a8:	52 dd       	rcall	.-1372   	; 0x1b34e <lif_del_file>
   1b8aa:	85 c0       	rjmp	.+266    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b8ac:	96 01       	movw	r18, r12
   1b8ae:	ae 01       	movw	r20, r28
   1b8b0:	4f 5f       	subi	r20, 0xFF	; 255
   1b8b2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8b4:	68 ed       	ldi	r22, 0xD8	; 216
   1b8b6:	7b e0       	ldi	r23, 0x0B	; 11
   1b8b8:	c7 01       	movw	r24, r14
   1b8ba:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b8be:	89 2b       	or	r24, r25
   1b8c0:	49 f0       	breq	.+18     	; 0x1b8d4 <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1b8c2:	cc 0f       	add	r28, r28
   1b8c4:	dd 1f       	adc	r29, r29
   1b8c6:	c0 0f       	add	r28, r16
   1b8c8:	d1 1f       	adc	r29, r17
   1b8ca:	88 81       	ld	r24, Y
   1b8cc:	99 81       	ldd	r25, Y+1	; 0x01
   1b8ce:	0e 94 a5 ce 	call	0x19d4a	; 0x19d4a <lif_dir>
   1b8d2:	71 c0       	rjmp	.+226    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b8d4:	96 01       	movw	r18, r12
   1b8d6:	a5 01       	movw	r20, r10
   1b8d8:	6b e9       	ldi	r22, 0x9B	; 155
   1b8da:	76 e1       	ldi	r23, 0x16	; 22
   1b8dc:	c7 01       	movw	r24, r14
   1b8de:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b8e2:	89 2b       	or	r24, r25
   1b8e4:	71 f0       	breq	.+28     	; 0x1b902 <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b8e6:	ce 01       	movw	r24, r28
   1b8e8:	88 0f       	add	r24, r24
   1b8ea:	99 1f       	adc	r25, r25
   1b8ec:	e8 01       	movw	r28, r16
   1b8ee:	c8 0f       	add	r28, r24
   1b8f0:	d9 1f       	adc	r29, r25
   1b8f2:	4c 81       	ldd	r20, Y+4	; 0x04
   1b8f4:	5d 81       	ldd	r21, Y+5	; 0x05
   1b8f6:	6a 81       	ldd	r22, Y+2	; 0x02
   1b8f8:	7b 81       	ldd	r23, Y+3	; 0x03
   1b8fa:	88 81       	ld	r24, Y
   1b8fc:	99 81       	ldd	r25, Y+1	; 0x01
   1b8fe:	66 da       	rcall	.-2868   	; 0x1adcc <lif_extract_lif_as_lif>
   1b900:	5a c0       	rjmp	.+180    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b902:	96 01       	movw	r18, r12
   1b904:	a5 01       	movw	r20, r10
   1b906:	66 ea       	ldi	r22, 0xA6	; 166
   1b908:	76 e1       	ldi	r23, 0x16	; 22
   1b90a:	c7 01       	movw	r24, r14
   1b90c:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b910:	89 2b       	or	r24, r25
   1b912:	79 f0       	breq	.+30     	; 0x1b932 <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b914:	ce 01       	movw	r24, r28
   1b916:	88 0f       	add	r24, r24
   1b918:	99 1f       	adc	r25, r25
   1b91a:	e8 01       	movw	r28, r16
   1b91c:	c8 0f       	add	r28, r24
   1b91e:	d9 1f       	adc	r29, r25
   1b920:	4c 81       	ldd	r20, Y+4	; 0x04
   1b922:	5d 81       	ldd	r21, Y+5	; 0x05
   1b924:	6a 81       	ldd	r22, Y+2	; 0x02
   1b926:	7b 81       	ldd	r23, Y+3	; 0x03
   1b928:	88 81       	ld	r24, Y
   1b92a:	99 81       	ldd	r25, Y+1	; 0x01
   1b92c:	0e 94 37 d4 	call	0x1a86e	; 0x1a86e <lif_extract_e010_as_ascii>
   1b930:	42 c0       	rjmp	.+132    	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b932:	96 01       	movw	r18, r12
   1b934:	a5 01       	movw	r20, r10
   1b936:	65 ee       	ldi	r22, 0xE5	; 229
   1b938:	7b e0       	ldi	r23, 0x0B	; 11
   1b93a:	c7 01       	movw	r24, r14
   1b93c:	0e 94 91 30 	call	0x6122	; 0x6122 <MATCHARGS>
   1b940:	89 2b       	or	r24, r25
   1b942:	71 f0       	breq	.+28     	; 0x1b960 <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b944:	ce 01       	movw	r24, r28
   1b946:	88 0f       	add	r24, r24
   1b948:	99 1f       	adc	r25, r25
   1b94a:	e8 01       	movw	r28, r16
   1b94c:	c8 0f       	add	r28, r24
   1b94e:	d9 1f       	adc	r29, r25
   1b950:	4c 81       	ldd	r20, Y+4	; 0x04
   1b952:	5d 81       	ldd	r21, Y+5	; 0x05
   1b954:	6a 81       	ldd	r22, Y+2	; 0x02
   1b956:	7b 81       	ldd	r23, Y+3	; 0x03
   1b958:	88 81       	ld	r24, Y
   1b95a:	99 81       	ldd	r25, Y+1	; 0x01
   1b95c:	8e dd       	rcall	.-1252   	; 0x1b47a <lif_rename_file>
   1b95e:	2b c0       	rjmp	.+86     	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1b960:	6e ea       	ldi	r22, 0xAE	; 174
   1b962:	76 e1       	ldi	r23, 0x16	; 22
   1b964:	f8 01       	movw	r30, r16
   1b966:	80 81       	ld	r24, Z
   1b968:	91 81       	ldd	r25, Z+1	; 0x01
   1b96a:	0e 94 bb 30 	call	0x6176	; 0x6176 <MATCHI_LEN>
   1b96e:	89 2b       	or	r24, r25
   1b970:	09 f4       	brne	.+2      	; 0x1b974 <lif_tests+0x2ee>
   1b972:	91 ce       	rjmp	.-734    	; 0x1b696 <lif_tests+0x10>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b974:	6c e6       	ldi	r22, 0x6C	; 108
   1b976:	76 e1       	ldi	r23, 0x16	; 22
   1b978:	c7 01       	movw	r24, r14
   1b97a:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1b97e:	89 2b       	or	r24, r25
   1b980:	59 f0       	breq	.+22     	; 0x1b998 <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1b982:	84 e2       	ldi	r24, 0x24	; 36
   1b984:	91 e4       	ldi	r25, 0x41	; 65
   1b986:	a0 e0       	ldi	r26, 0x00	; 0
   1b988:	ed b7       	in	r30, 0x3d	; 61
   1b98a:	fe b7       	in	r31, 0x3e	; 62
   1b98c:	81 83       	std	Z+1, r24	; 0x01
   1b98e:	92 83       	std	Z+2, r25	; 0x02
   1b990:	a3 83       	std	Z+3, r26	; 0x03
   1b992:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1b996:	0f c0       	rjmp	.+30     	; 0x1b9b6 <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b998:	6b e6       	ldi	r22, 0x6B	; 107
   1b99a:	76 e1       	ldi	r23, 0x16	; 22
   1b99c:	c7 01       	movw	r24, r14
   1b99e:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1b9a2:	89 2b       	or	r24, r25
   1b9a4:	71 f7       	brne	.-36     	; 0x1b982 <lif_tests+0x2fc>
   1b9a6:	61 e7       	ldi	r22, 0x71	; 113
   1b9a8:	76 e1       	ldi	r23, 0x16	; 22
   1b9aa:	c7 01       	movw	r24, r14
   1b9ac:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1b9b0:	89 2b       	or	r24, r25
   1b9b2:	39 f7       	brne	.-50     	; 0x1b982 <lif_tests+0x2fc>
   1b9b4:	70 ce       	rjmp	.-800    	; 0x1b696 <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1b9b6:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1b9b8:	90 e0       	ldi	r25, 0x00	; 0
   1b9ba:	cd b7       	in	r28, 0x3d	; 61
   1b9bc:	de b7       	in	r29, 0x3e	; 62
   1b9be:	25 96       	adiw	r28, 0x05	; 5
   1b9c0:	ec e0       	ldi	r30, 0x0C	; 12
   1b9c2:	2d c6       	rjmp	.+3162   	; 0x1c61e <__epilogue_restores__+0xc>

0001b9c4 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1b9c4:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <lcd_display_time>
   1b9c8:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1b9cc:	01 96       	adiw	r24, 0x01	; 1
   1b9ce:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <lcd_display_time+0x1>
   1b9d2:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <lcd_display_time>
   1b9d6:	08 95       	ret

0001b9d8 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1b9d8:	00 d0       	rcall	.+0      	; 0x1b9da <copyright+0x2>
   1b9da:	00 d0       	rcall	.+0      	; 0x1b9dc <copyright+0x4>
   1b9dc:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b9de:	81 e0       	ldi	r24, 0x01	; 1
   1b9e0:	98 e4       	ldi	r25, 0x48	; 72
   1b9e2:	a0 e0       	ldi	r26, 0x00	; 0
   1b9e4:	ed b7       	in	r30, 0x3d	; 61
   1b9e6:	fe b7       	in	r31, 0x3e	; 62
   1b9e8:	81 83       	std	Z+1, r24	; 0x01
   1b9ea:	92 83       	std	Z+2, r25	; 0x02
   1b9ec:	a3 83       	std	Z+3, r26	; 0x03
   1b9ee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b9f2:	82 ee       	ldi	r24, 0xE2	; 226
   1b9f4:	97 e4       	ldi	r25, 0x47	; 71
   1b9f6:	a0 e0       	ldi	r26, 0x00	; 0
   1b9f8:	ed b7       	in	r30, 0x3d	; 61
   1b9fa:	fe b7       	in	r31, 0x3e	; 62
   1b9fc:	81 83       	std	Z+1, r24	; 0x01
   1b9fe:	92 83       	std	Z+2, r25	; 0x02
   1ba00:	a3 83       	std	Z+3, r26	; 0x03
   1ba02:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1ba06:	85 ec       	ldi	r24, 0xC5	; 197
   1ba08:	97 e4       	ldi	r25, 0x47	; 71
   1ba0a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba0c:	ed b7       	in	r30, 0x3d	; 61
   1ba0e:	fe b7       	in	r31, 0x3e	; 62
   1ba10:	81 83       	std	Z+1, r24	; 0x01
   1ba12:	92 83       	std	Z+2, r25	; 0x02
   1ba14:	a3 83       	std	Z+3, r26	; 0x03
   1ba16:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf(" GNU version 3\n");
   1ba1a:	85 eb       	ldi	r24, 0xB5	; 181
   1ba1c:	97 e4       	ldi	r25, 0x47	; 71
   1ba1e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba20:	ed b7       	in	r30, 0x3d	; 61
   1ba22:	fe b7       	in	r31, 0x3e	; 62
   1ba24:	81 83       	std	Z+1, r24	; 0x01
   1ba26:	92 83       	std	Z+2, r25	; 0x02
   1ba28:	a3 83       	std	Z+3, r26	; 0x03
   1ba2a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ba2e:	8e e8       	ldi	r24, 0x8E	; 142
   1ba30:	97 e4       	ldi	r25, 0x47	; 71
   1ba32:	a0 e0       	ldi	r26, 0x00	; 0
   1ba34:	ed b7       	in	r30, 0x3d	; 61
   1ba36:	fe b7       	in	r31, 0x3e	; 62
   1ba38:	81 83       	std	Z+1, r24	; 0x01
   1ba3a:	92 83       	std	Z+2, r25	; 0x02
   1ba3c:	a3 83       	std	Z+3, r26	; 0x03
   1ba3e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ba42:	86 eb       	ldi	r24, 0xB6	; 182
   1ba44:	96 e1       	ldi	r25, 0x16	; 22
   1ba46:	ed b7       	in	r30, 0x3d	; 61
   1ba48:	fe b7       	in	r31, 0x3e	; 62
   1ba4a:	95 83       	std	Z+5, r25	; 0x05
   1ba4c:	84 83       	std	Z+4, r24	; 0x04
   1ba4e:	84 e7       	ldi	r24, 0x74	; 116
   1ba50:	97 e4       	ldi	r25, 0x47	; 71
   1ba52:	a0 e0       	ldi	r26, 0x00	; 0
   1ba54:	81 83       	std	Z+1, r24	; 0x01
   1ba56:	92 83       	std	Z+2, r25	; 0x02
   1ba58:	a3 83       	std	Z+3, r26	; 0x03
   1ba5a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ba5e:	8a ed       	ldi	r24, 0xDA	; 218
   1ba60:	96 e1       	ldi	r25, 0x16	; 22
   1ba62:	ed b7       	in	r30, 0x3d	; 61
   1ba64:	fe b7       	in	r31, 0x3e	; 62
   1ba66:	95 83       	std	Z+5, r25	; 0x05
   1ba68:	84 83       	std	Z+4, r24	; 0x04
   1ba6a:	8a e5       	ldi	r24, 0x5A	; 90
   1ba6c:	97 e4       	ldi	r25, 0x47	; 71
   1ba6e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba70:	81 83       	std	Z+1, r24	; 0x01
   1ba72:	92 83       	std	Z+2, r25	; 0x02
   1ba74:	a3 83       	std	Z+3, r26	; 0x03
   1ba76:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("\n");
   1ba7a:	88 e5       	ldi	r24, 0x58	; 88
   1ba7c:	97 e4       	ldi	r25, 0x47	; 71
   1ba7e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba80:	ed b7       	in	r30, 0x3d	; 61
   1ba82:	fe b7       	in	r31, 0x3e	; 62
   1ba84:	81 83       	std	Z+1, r24	; 0x01
   1ba86:	92 83       	std	Z+2, r25	; 0x02
   1ba88:	a3 83       	std	Z+3, r26	; 0x03
   1ba8a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
}
   1ba8e:	0f 90       	pop	r0
   1ba90:	0f 90       	pop	r0
   1ba92:	0f 90       	pop	r0
   1ba94:	0f 90       	pop	r0
   1ba96:	0f 90       	pop	r0
   1ba98:	08 95       	ret

0001ba9a <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1ba9a:	a1 e1       	ldi	r26, 0x11	; 17
   1ba9c:	b0 e0       	ldi	r27, 0x00	; 0
   1ba9e:	e2 e5       	ldi	r30, 0x52	; 82
   1baa0:	fd ed       	ldi	r31, 0xDD	; 221
   1baa2:	a7 c5       	rjmp	.+2894   	; 0x1c5f2 <__prologue_saves__+0x18>
   1baa4:	ec 01       	movw	r28, r24
   1baa6:	7b 01       	movw	r14, r22
   1baa8:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1baaa:	60 e0       	ldi	r22, 0x00	; 0
   1baac:	70 e0       	ldi	r23, 0x00	; 0
   1baae:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <normalize>
    memset(buf,0,max);
   1bab2:	a8 01       	movw	r20, r16
   1bab4:	60 e0       	ldi	r22, 0x00	; 0
   1bab6:	70 e0       	ldi	r23, 0x00	; 0
   1bab8:	c7 01       	movw	r24, r14
   1baba:	0e 94 e5 e6 	call	0x1cdca	; 0x1cdca <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1babe:	88 85       	ldd	r24, Y+8	; 0x08
   1bac0:	99 85       	ldd	r25, Y+9	; 0x09
   1bac2:	0e 94 b4 34 	call	0x6968	; 0x6968 <tm_mon_to_ascii>
   1bac6:	28 81       	ld	r18, Y
   1bac8:	39 81       	ldd	r19, Y+1	; 0x01
   1baca:	ed b7       	in	r30, 0x3d	; 61
   1bacc:	fe b7       	in	r31, 0x3e	; 62
   1bace:	31 8b       	std	Z+17, r19	; 0x11
   1bad0:	20 8b       	std	Z+16, r18	; 0x10
   1bad2:	2a 81       	ldd	r18, Y+2	; 0x02
   1bad4:	3b 81       	ldd	r19, Y+3	; 0x03
   1bad6:	37 87       	std	Z+15, r19	; 0x0f
   1bad8:	26 87       	std	Z+14, r18	; 0x0e
   1bada:	2c 81       	ldd	r18, Y+4	; 0x04
   1badc:	3d 81       	ldd	r19, Y+5	; 0x05
   1bade:	35 87       	std	Z+13, r19	; 0x0d
   1bae0:	24 87       	std	Z+12, r18	; 0x0c
   1bae2:	2e 81       	ldd	r18, Y+6	; 0x06
   1bae4:	3f 81       	ldd	r19, Y+7	; 0x07
   1bae6:	33 87       	std	Z+11, r19	; 0x0b
   1bae8:	22 87       	std	Z+10, r18	; 0x0a
   1baea:	91 87       	std	Z+9, r25	; 0x09
   1baec:	80 87       	std	Z+8, r24	; 0x08
   1baee:	82 e4       	ldi	r24, 0x42	; 66
   1baf0:	97 e4       	ldi	r25, 0x47	; 71
   1baf2:	a0 e0       	ldi	r26, 0x00	; 0
   1baf4:	85 83       	std	Z+5, r24	; 0x05
   1baf6:	96 83       	std	Z+6, r25	; 0x06
   1baf8:	a7 83       	std	Z+7, r26	; 0x07
   1bafa:	01 50       	subi	r16, 0x01	; 1
   1bafc:	11 09       	sbc	r17, r1
   1bafe:	14 83       	std	Z+4, r17	; 0x04
   1bb00:	03 83       	std	Z+3, r16	; 0x03
   1bb02:	f2 82       	std	Z+2, r15	; 0x02
   1bb04:	e1 82       	std	Z+1, r14	; 0x01
   1bb06:	0e 94 08 45 	call	0x8a10	; 0x8a10 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bb0a:	c7 01       	movw	r24, r14
   1bb0c:	cd b7       	in	r28, 0x3d	; 61
   1bb0e:	de b7       	in	r29, 0x3e	; 62
   1bb10:	61 96       	adiw	r28, 0x11	; 17
   1bb12:	e6 e0       	ldi	r30, 0x06	; 6
   1bb14:	8a c5       	rjmp	.+2836   	; 0x1c62a <__epilogue_restores__+0x18>

0001bb16 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bb16:	cf 93       	push	r28
   1bb18:	00 d0       	rcall	.+0      	; 0x1bb1a <lcd_backlight+0x4>
   1bb1a:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bb1c:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bb20:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bb24:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bb28:	25 e0       	ldi	r18, 0x05	; 5
   1bb2a:	40 ef       	ldi	r20, 0xF0	; 240
   1bb2c:	52 e0       	ldi	r21, 0x02	; 2
   1bb2e:	60 e0       	ldi	r22, 0x00	; 0
   1bb30:	82 e7       	ldi	r24, 0x72	; 114
   1bb32:	0e 94 47 2b 	call	0x568e	; 0x568e <i2c_fn>
   1bb36:	c8 2f       	mov	r28, r24
   1bb38:	81 11       	cpse	r24, r1
   1bb3a:	0d c0       	rjmp	.+26     	; 0x1bb56 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bb3c:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bb40:	88 e2       	ldi	r24, 0x28	; 40
   1bb42:	97 e4       	ldi	r25, 0x47	; 71
   1bb44:	a0 e0       	ldi	r26, 0x00	; 0
   1bb46:	ed b7       	in	r30, 0x3d	; 61
   1bb48:	fe b7       	in	r31, 0x3e	; 62
   1bb4a:	81 83       	std	Z+1, r24	; 0x01
   1bb4c:	92 83       	std	Z+2, r25	; 0x02
   1bb4e:	a3 83       	std	Z+3, r26	; 0x03
   1bb50:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1bb54:	01 c0       	rjmp	.+2      	; 0x1bb58 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bb56:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bb58:	8c 2f       	mov	r24, r28
   1bb5a:	0f 90       	pop	r0
   1bb5c:	0f 90       	pop	r0
   1bb5e:	0f 90       	pop	r0
   1bb60:	cf 91       	pop	r28
   1bb62:	08 95       	ret

0001bb64 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bb64:	cf 93       	push	r28
   1bb66:	ad b7       	in	r26, 0x3d	; 61
   1bb68:	be b7       	in	r27, 0x3e	; 62
   1bb6a:	17 97       	sbiw	r26, 0x07	; 7
   1bb6c:	0f b6       	in	r0, 0x3f	; 63
   1bb6e:	f8 94       	cli
   1bb70:	be bf       	out	0x3e, r27	; 62
   1bb72:	0f be       	out	0x3f, r0	; 63
   1bb74:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bb76:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bb78:	8a e0       	ldi	r24, 0x0A	; 10
   1bb7a:	97 e4       	ldi	r25, 0x47	; 71
   1bb7c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb7e:	ed b7       	in	r30, 0x3d	; 61
   1bb80:	fe b7       	in	r31, 0x3e	; 62
   1bb82:	81 83       	std	Z+1, r24	; 0x01
   1bb84:	92 83       	std	Z+2, r25	; 0x02
   1bb86:	a3 83       	std	Z+3, r26	; 0x03
   1bb88:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bb8c:	61 e0       	ldi	r22, 0x01	; 1
   1bb8e:	70 e0       	ldi	r23, 0x00	; 0
   1bb90:	82 ee       	ldi	r24, 0xE2	; 226
   1bb92:	9c ed       	ldi	r25, 0xDC	; 220
   1bb94:	0e 94 de 32 	call	0x65bc	; 0x65bc <set_timers>
   1bb98:	01 96       	adiw	r24, 0x01	; 1
   1bb9a:	51 f4       	brne	.+20     	; 0x1bbb0 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bb9c:	84 ef       	ldi	r24, 0xF4	; 244
   1bb9e:	96 e4       	ldi	r25, 0x46	; 70
   1bba0:	a0 e0       	ldi	r26, 0x00	; 0
   1bba2:	ed b7       	in	r30, 0x3d	; 61
   1bba4:	fe b7       	in	r31, 0x3e	; 62
   1bba6:	81 83       	std	Z+1, r24	; 0x01
   1bba8:	92 83       	std	Z+2, r25	; 0x02
   1bbaa:	a3 83       	std	Z+3, r26	; 0x03
   1bbac:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

	i2c_init(100000);
   1bbb0:	60 ea       	ldi	r22, 0xA0	; 160
   1bbb2:	76 e8       	ldi	r23, 0x86	; 134
   1bbb4:	81 e0       	ldi	r24, 0x01	; 1
   1bbb6:	90 e0       	ldi	r25, 0x00	; 0
   1bbb8:	0e 94 4e 2a 	call	0x549c	; 0x549c <i2c_init>

	i2c_task_init();
   1bbbc:	0e 94 0f 2a 	call	0x541e	; 0x541e <i2c_task_init>

	cli();
   1bbc0:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bbc2:	8e ef       	ldi	r24, 0xFE	; 254
   1bbc4:	96 e1       	ldi	r25, 0x16	; 22
   1bbc6:	ed b7       	in	r30, 0x3d	; 61
   1bbc8:	fe b7       	in	r31, 0x3e	; 62
   1bbca:	97 83       	std	Z+7, r25	; 0x07
   1bbcc:	86 83       	std	Z+6, r24	; 0x06
   1bbce:	8e ee       	ldi	r24, 0xEE	; 238
   1bbd0:	96 e4       	ldi	r25, 0x46	; 70
   1bbd2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd4:	83 83       	std	Z+3, r24	; 0x03
   1bbd6:	94 83       	std	Z+4, r25	; 0x04
   1bbd8:	a5 83       	std	Z+5, r26	; 0x05
   1bbda:	8c e0       	ldi	r24, 0x0C	; 12
   1bbdc:	93 e0       	ldi	r25, 0x03	; 3
   1bbde:	92 83       	std	Z+2, r25	; 0x02
   1bbe0:	81 83       	std	Z+1, r24	; 0x01
   1bbe2:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bbe6:	8a e0       	ldi	r24, 0x0A	; 10
   1bbe8:	97 e1       	ldi	r25, 0x17	; 23
   1bbea:	ed b7       	in	r30, 0x3d	; 61
   1bbec:	fe b7       	in	r31, 0x3e	; 62
   1bbee:	97 83       	std	Z+7, r25	; 0x07
   1bbf0:	86 83       	std	Z+6, r24	; 0x06
   1bbf2:	88 ee       	ldi	r24, 0xE8	; 232
   1bbf4:	96 e4       	ldi	r25, 0x46	; 70
   1bbf6:	a0 e0       	ldi	r26, 0x00	; 0
   1bbf8:	83 83       	std	Z+3, r24	; 0x03
   1bbfa:	94 83       	std	Z+4, r25	; 0x04
   1bbfc:	a5 83       	std	Z+5, r26	; 0x05
   1bbfe:	85 ef       	ldi	r24, 0xF5	; 245
   1bc00:	92 e0       	ldi	r25, 0x02	; 2
   1bc02:	92 83       	std	Z+2, r25	; 0x02
   1bc04:	81 83       	std	Z+1, r24	; 0x01
   1bc06:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bc0a:	22 e0       	ldi	r18, 0x02	; 2
   1bc0c:	41 e2       	ldi	r20, 0x21	; 33
   1bc0e:	53 e0       	ldi	r21, 0x03	; 3
   1bc10:	60 e0       	ldi	r22, 0x00	; 0
   1bc12:	82 e7       	ldi	r24, 0x72	; 114
   1bc14:	0e 94 24 2a 	call	0x5448	; 0x5448 <i2c_task_op_add>
   1bc18:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x1>
   1bc1c:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bc20:	20 e1       	ldi	r18, 0x10	; 16
   1bc22:	4c e0       	ldi	r20, 0x0C	; 12
   1bc24:	53 e0       	ldi	r21, 0x03	; 3
   1bc26:	60 e0       	ldi	r22, 0x00	; 0
   1bc28:	82 e7       	ldi	r24, 0x72	; 114
   1bc2a:	0e 94 24 2a 	call	0x5448	; 0x5448 <i2c_task_op_add>
   1bc2e:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x3>
   1bc32:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bc36:	22 e0       	ldi	r18, 0x02	; 2
   1bc38:	4a e0       	ldi	r20, 0x0A	; 10
   1bc3a:	53 e0       	ldi	r21, 0x03	; 3
   1bc3c:	60 e0       	ldi	r22, 0x00	; 0
   1bc3e:	82 e7       	ldi	r24, 0x72	; 114
   1bc40:	0e 94 24 2a 	call	0x5448	; 0x5448 <i2c_task_op_add>
   1bc44:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x5>
   1bc48:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bc4c:	20 e1       	ldi	r18, 0x10	; 16
   1bc4e:	45 ef       	ldi	r20, 0xF5	; 245
   1bc50:	52 e0       	ldi	r21, 0x02	; 2
   1bc52:	60 e0       	ldi	r22, 0x00	; 0
   1bc54:	82 e7       	ldi	r24, 0x72	; 114
   1bc56:	0e 94 24 2a 	call	0x5448	; 0x5448 <i2c_task_op_add>
   1bc5a:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x7>
   1bc5e:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x6>

	SREG = sreg;
   1bc62:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bc64:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bc68:	68 ee       	ldi	r22, 0xE8	; 232
   1bc6a:	73 e0       	ldi	r23, 0x03	; 3
   1bc6c:	80 e0       	ldi	r24, 0x00	; 0
   1bc6e:	90 e0       	ldi	r25, 0x00	; 0
   1bc70:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bc74:	0e 94 c5 2a 	call	0x558a	; 0x558a <i2c_task_done>
   1bc78:	81 11       	cpse	r24, r1
   1bc7a:	0c c0       	rjmp	.+24     	; 0x1bc94 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bc7c:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bc80:	8e ec       	ldi	r24, 0xCE	; 206
   1bc82:	96 e4       	ldi	r25, 0x46	; 70
   1bc84:	a0 e0       	ldi	r26, 0x00	; 0
   1bc86:	ed b7       	in	r30, 0x3d	; 61
   1bc88:	fe b7       	in	r31, 0x3e	; 62
   1bc8a:	81 83       	std	Z+1, r24	; 0x01
   1bc8c:	92 83       	std	Z+2, r25	; 0x02
   1bc8e:	a3 83       	std	Z+3, r26	; 0x03
   1bc90:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
	}

    sep();
   1bc94:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
}
   1bc98:	ad b7       	in	r26, 0x3d	; 61
   1bc9a:	be b7       	in	r27, 0x3e	; 62
   1bc9c:	17 96       	adiw	r26, 0x07	; 7
   1bc9e:	0f b6       	in	r0, 0x3f	; 63
   1bca0:	f8 94       	cli
   1bca2:	be bf       	out	0x3e, r27	; 62
   1bca4:	0f be       	out	0x3f, r0	; 63
   1bca6:	ad bf       	out	0x3d, r26	; 61
   1bca8:	cf 91       	pop	r28
   1bcaa:	08 95       	ret

0001bcac <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1bcac:	af e2       	ldi	r26, 0x2F	; 47
   1bcae:	b0 e0       	ldi	r27, 0x00	; 0
   1bcb0:	eb e5       	ldi	r30, 0x5B	; 91
   1bcb2:	fe ed       	ldi	r31, 0xDE	; 222
   1bcb4:	a1 c4       	rjmp	.+2370   	; 0x1c5f8 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bcb6:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bcb8:	f8 94       	cli
	if(!mmc_ins_status())
   1bcba:	0e 94 1e 6d 	call	0xda3c	; 0xda3c <mmc_ins_status>
   1bcbe:	89 2b       	or	r24, r25
   1bcc0:	49 f4       	brne	.+18     	; 0x1bcd4 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1bcc2:	87 e1       	ldi	r24, 0x17	; 23
   1bcc4:	97 e1       	ldi	r25, 0x17	; 23
   1bcc6:	ed b7       	in	r30, 0x3d	; 61
   1bcc8:	fe b7       	in	r31, 0x3e	; 62
   1bcca:	97 83       	std	Z+7, r25	; 0x07
   1bccc:	86 83       	std	Z+6, r24	; 0x06
   1bcce:	88 ec       	ldi	r24, 0xC8	; 200
   1bcd0:	96 e4       	ldi	r25, 0x46	; 70
   1bcd2:	17 c0       	rjmp	.+46     	; 0x1bd02 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1bcd4:	be 01       	movw	r22, r28
   1bcd6:	68 5d       	subi	r22, 0xD8	; 216
   1bcd8:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcda:	80 e0       	ldi	r24, 0x00	; 0
   1bcdc:	90 e0       	ldi	r25, 0x00	; 0
   1bcde:	0e 94 ee 31 	call	0x63dc	; 0x63dc <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1bce2:	ce 01       	movw	r24, r28
   1bce4:	88 96       	adiw	r24, 0x28	; 40
   1bce6:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <gmtime>
   1bcea:	4f e1       	ldi	r20, 0x1F	; 31
   1bcec:	50 e0       	ldi	r21, 0x00	; 0
   1bcee:	be 01       	movw	r22, r28
   1bcf0:	68 5f       	subi	r22, 0xF8	; 248
   1bcf2:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcf4:	d2 de       	rcall	.-604    	; 0x1ba9a <lcd_time>
   1bcf6:	ed b7       	in	r30, 0x3d	; 61
   1bcf8:	fe b7       	in	r31, 0x3e	; 62
   1bcfa:	97 83       	std	Z+7, r25	; 0x07
   1bcfc:	86 83       	std	Z+6, r24	; 0x06
   1bcfe:	82 ec       	ldi	r24, 0xC2	; 194
   1bd00:	96 e4       	ldi	r25, 0x46	; 70
   1bd02:	a0 e0       	ldi	r26, 0x00	; 0
   1bd04:	83 83       	std	Z+3, r24	; 0x03
   1bd06:	94 83       	std	Z+4, r25	; 0x04
   1bd08:	a5 83       	std	Z+5, r26	; 0x05
   1bd0a:	85 ef       	ldi	r24, 0xF5	; 245
   1bd0c:	92 e0       	ldi	r25, 0x02	; 2
   1bd0e:	92 83       	std	Z+2, r25	; 0x02
   1bd10:	81 83       	std	Z+1, r24	; 0x01
   1bd12:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1bd16:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1bd18:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <i2c_task_run>
}
   1bd1c:	af 96       	adiw	r28, 0x2f	; 47
   1bd1e:	e3 e0       	ldi	r30, 0x03	; 3
   1bd20:	87 c4       	rjmp	.+2318   	; 0x1c630 <__epilogue_restores__+0x1e>

0001bd22 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1bd22:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1bd24:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1bd26:	20 91 ea 19 	lds	r18, 0x19EA	; 0x8019ea <lcd_display_time>
   1bd2a:	30 91 eb 19 	lds	r19, 0x19EB	; 0x8019eb <lcd_display_time+0x1>
   1bd2e:	25 36       	cpi	r18, 0x65	; 101
   1bd30:	31 05       	cpc	r19, r1
   1bd32:	3c f0       	brlt	.+14     	; 0x1bd42 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1bd34:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <lcd_display_time+0x1>
   1bd38:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <lcd_display_time>
		SREG = sreg;
   1bd3c:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1bd3e:	b6 cf       	rjmp	.-148    	; 0x1bcac <i2c_lcd_task>
		return;
   1bd40:	08 95       	ret
	}
	SREG = sreg;
   1bd42:	8f bf       	out	0x3f, r24	; 63
   1bd44:	08 95       	ret

0001bd46 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bd46:	00 d0       	rcall	.+0      	; 0x1bd48 <help+0x2>
   1bd48:	1f 92       	push	r1

    copyright();
   1bd4a:	46 de       	rcall	.-884    	; 0x1b9d8 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bd4c:	80 e0       	ldi	r24, 0x00	; 0
   1bd4e:	90 e0       	ldi	r25, 0x00	; 0
   1bd50:	0e 94 45 71 	call	0xe28a	; 0xe28a <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bd54:	80 e0       	ldi	r24, 0x00	; 0
   1bd56:	90 e0       	ldi	r25, 0x00	; 0
   1bd58:	0e 94 9b 7c 	call	0xf936	; 0xf936 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bd5c:	80 e0       	ldi	r24, 0x00	; 0
   1bd5e:	90 e0       	ldi	r25, 0x00	; 0
   1bd60:	0e 94 0d bd 	call	0x17a1a	; 0x17a1a <lif_help>
#endif
#ifdef TELEDISK
    td0_help(0);
#endif

    gpib_help(0);
   1bd64:	80 e0       	ldi	r24, 0x00	; 0
   1bd66:	90 e0       	ldi	r25, 0x00	; 0
   1bd68:	0e 94 f4 8f 	call	0x11fe8	; 0x11fe8 <gpib_help>

    printf(
   1bd6c:	8e e1       	ldi	r24, 0x1E	; 30
   1bd6e:	96 e4       	ldi	r25, 0x46	; 70
   1bd70:	a0 e0       	ldi	r26, 0x00	; 0
   1bd72:	ed b7       	in	r30, 0x3d	; 61
   1bd74:	fe b7       	in	r31, 0x3e	; 62
   1bd76:	81 83       	std	Z+1, r24	; 0x01
   1bd78:	92 83       	std	Z+2, r25	; 0x02
   1bd7a:	a3 83       	std	Z+3, r26	; 0x03
   1bd7c:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1bd80:	0f 90       	pop	r0
   1bd82:	0f 90       	pop	r0
   1bd84:	0f 90       	pop	r0
   1bd86:	08 95       	ret

0001bd88 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bd88:	6f 92       	push	r6
   1bd8a:	7f 92       	push	r7
   1bd8c:	8f 92       	push	r8
   1bd8e:	cf 92       	push	r12
   1bd90:	df 92       	push	r13
   1bd92:	ef 92       	push	r14
   1bd94:	ff 92       	push	r15
   1bd96:	0f 93       	push	r16
   1bd98:	1f 93       	push	r17
   1bd9a:	cf 93       	push	r28
   1bd9c:	df 93       	push	r29
   1bd9e:	cd b7       	in	r28, 0x3d	; 61
   1bda0:	de b7       	in	r29, 0x3e	; 62
   1bda2:	cb 56       	subi	r28, 0x6B	; 107
   1bda4:	d1 40       	sbci	r29, 0x01	; 1
   1bda6:	0f b6       	in	r0, 0x3f	; 63
   1bda8:	f8 94       	cli
   1bdaa:	de bf       	out	0x3e, r29	; 62
   1bdac:	0f be       	out	0x3f, r0	; 63
   1bdae:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bdb0:	8b e1       	ldi	r24, 0x1B	; 27
   1bdb2:	96 e4       	ldi	r25, 0x46	; 70
   1bdb4:	a0 e0       	ldi	r26, 0x00	; 0
   1bdb6:	ed b7       	in	r30, 0x3d	; 61
   1bdb8:	fe b7       	in	r31, 0x3e	; 62
   1bdba:	81 83       	std	Z+1, r24	; 0x01
   1bdbc:	92 83       	std	Z+2, r25	; 0x02
   1bdbe:	a3 83       	std	Z+3, r26	; 0x03
   1bdc0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

	memset(line,0,sizeof(line)-1);
   1bdc4:	8e 01       	movw	r16, r28
   1bdc6:	0a 5f       	subi	r16, 0xFA	; 250
   1bdc8:	1f 4f       	sbci	r17, 0xFF	; 255
   1bdca:	8f ef       	ldi	r24, 0xFF	; 255
   1bdcc:	f8 01       	movw	r30, r16
   1bdce:	11 92       	st	Z+, r1
   1bdd0:	8a 95       	dec	r24
   1bdd2:	e9 f7       	brne	.-6      	; 0x1bdce <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1bdd4:	40 91 bf 1c 	lds	r20, 0x1CBF	; 0x801cbf <__iob>
   1bdd8:	50 91 c0 1c 	lds	r21, 0x1CC0	; 0x801cc0 <__iob+0x1>
   1bddc:	6e ef       	ldi	r22, 0xFE	; 254
   1bdde:	70 e0       	ldi	r23, 0x00	; 0
   1bde0:	c8 01       	movw	r24, r16
   1bde2:	0e 94 87 74 	call	0xe90e	; 0xe90e <fgets>
    trim_tail(line);
   1bde6:	c8 01       	movw	r24, r16
   1bde8:	0e 94 4f 30 	call	0x609e	; 0x609e <trim_tail>
    argc = split_args(line,argv,50);
   1bdec:	42 e3       	ldi	r20, 0x32	; 50
   1bdee:	50 e0       	ldi	r21, 0x00	; 0
   1bdf0:	be 01       	movw	r22, r28
   1bdf2:	6a 5f       	subi	r22, 0xFA	; 250
   1bdf4:	7e 4f       	sbci	r23, 0xFE	; 254
   1bdf6:	c8 01       	movw	r24, r16
   1bdf8:	0e 94 d5 30 	call	0x61aa	; 0x61aa <split_args>
   1bdfc:	7c 01       	movw	r14, r24

	if(debug_input)
   1bdfe:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1be02:	81 11       	cpse	r24, r1
   1be04:	0a c0       	rjmp	.+20     	; 0x1be1a <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1be06:	ca 5f       	subi	r28, 0xFA	; 250
   1be08:	de 4f       	sbci	r29, 0xFE	; 254
   1be0a:	08 81       	ld	r16, Y
   1be0c:	19 81       	ldd	r17, Y+1	; 0x01
   1be0e:	c6 50       	subi	r28, 0x06	; 6
   1be10:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1be12:	01 15       	cp	r16, r1
   1be14:	11 05       	cpc	r17, r1
   1be16:	51 f5       	brne	.+84     	; 0x1be6c <user_task.part.1+0xe4>
   1be18:	b6 c0       	rjmp	.+364    	; 0x1bf86 <user_task.part.1+0x1fe>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1be1a:	ed b7       	in	r30, 0x3d	; 61
   1be1c:	fe b7       	in	r31, 0x3e	; 62
   1be1e:	f5 82       	std	Z+5, r15	; 0x05
   1be20:	e4 82       	std	Z+4, r14	; 0x04
   1be22:	86 e0       	ldi	r24, 0x06	; 6
   1be24:	96 e4       	ldi	r25, 0x46	; 70
   1be26:	a0 e0       	ldi	r26, 0x00	; 0
   1be28:	81 83       	std	Z+1, r24	; 0x01
   1be2a:	92 83       	std	Z+2, r25	; 0x02
   1be2c:	a3 83       	std	Z+3, r26	; 0x03
   1be2e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1be32:	ce 01       	movw	r24, r28
   1be34:	8a 5f       	subi	r24, 0xFA	; 250
   1be36:	9e 4f       	sbci	r25, 0xFE	; 254
   1be38:	6c 01       	movw	r12, r24
		for(i=0;i<argc;++i)
   1be3a:	00 e0       	ldi	r16, 0x00	; 0
   1be3c:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1be3e:	8d ef       	ldi	r24, 0xFD	; 253
   1be40:	95 e4       	ldi	r25, 0x45	; 69
   1be42:	3c 01       	movw	r6, r24
   1be44:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1be46:	0e 15       	cp	r16, r14
   1be48:	1f 05       	cpc	r17, r15
   1be4a:	ec f6       	brge	.-70     	; 0x1be06 <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1be4c:	f6 01       	movw	r30, r12
   1be4e:	81 91       	ld	r24, Z+
   1be50:	91 91       	ld	r25, Z+
   1be52:	6f 01       	movw	r12, r30
   1be54:	ed b7       	in	r30, 0x3d	; 61
   1be56:	fe b7       	in	r31, 0x3e	; 62
   1be58:	95 83       	std	Z+5, r25	; 0x05
   1be5a:	84 83       	std	Z+4, r24	; 0x04
   1be5c:	61 82       	std	Z+1, r6	; 0x01
   1be5e:	72 82       	std	Z+2, r7	; 0x02
   1be60:	83 82       	std	Z+3, r8	; 0x03
   1be62:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1be66:	0f 5f       	subi	r16, 0xFF	; 255
   1be68:	1f 4f       	sbci	r17, 0xFF	; 255
   1be6a:	ed cf       	rjmp	.-38     	; 0x1be46 <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1be6c:	1e 14       	cp	r1, r14
   1be6e:	1f 04       	cpc	r1, r15
   1be70:	0c f0       	brlt	.+2      	; 0x1be74 <user_task.part.1+0xec>
   1be72:	89 c0       	rjmp	.+274    	; 0x1bf86 <user_task.part.1+0x1fe>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1be74:	6c e2       	ldi	r22, 0x2C	; 44
   1be76:	77 e1       	ldi	r23, 0x17	; 23
   1be78:	c8 01       	movw	r24, r16
   1be7a:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1be7e:	89 2b       	or	r24, r25
   1be80:	d9 f0       	breq	.+54     	; 0x1beb8 <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1be82:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <debug_input>
   1be86:	91 e0       	ldi	r25, 0x01	; 1
   1be88:	81 11       	cpse	r24, r1
   1be8a:	90 e0       	ldi	r25, 0x00	; 0
   1be8c:	90 93 ec 19 	sts	0x19EC, r25	; 0x8019ec <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1be90:	88 23       	and	r24, r24
   1be92:	19 f0       	breq	.+6      	; 0x1be9a <user_task.part.1+0x112>
   1be94:	88 e2       	ldi	r24, 0x28	; 40
   1be96:	97 e1       	ldi	r25, 0x17	; 23
   1be98:	02 c0       	rjmp	.+4      	; 0x1be9e <user_task.part.1+0x116>
   1be9a:	85 e2       	ldi	r24, 0x25	; 37
   1be9c:	97 e1       	ldi	r25, 0x17	; 23
   1be9e:	ed b7       	in	r30, 0x3d	; 61
   1bea0:	fe b7       	in	r31, 0x3e	; 62
   1bea2:	95 83       	std	Z+5, r25	; 0x05
   1bea4:	84 83       	std	Z+4, r24	; 0x04
   1bea6:	88 ee       	ldi	r24, 0xE8	; 232
   1bea8:	95 e4       	ldi	r25, 0x45	; 69
   1beaa:	a0 e0       	ldi	r26, 0x00	; 0
   1beac:	81 83       	std	Z+1, r24	; 0x01
   1beae:	92 83       	std	Z+2, r25	; 0x02
   1beb0:	a3 83       	std	Z+3, r26	; 0x03
   1beb2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1beb6:	67 c0       	rjmp	.+206    	; 0x1bf86 <user_task.part.1+0x1fe>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1beb8:	62 e3       	ldi	r22, 0x32	; 50
   1beba:	77 e1       	ldi	r23, 0x17	; 23
   1bebc:	c8 01       	movw	r24, r16
   1bebe:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1bec2:	89 2b       	or	r24, r25
   1bec4:	f1 f0       	breq	.+60     	; 0x1bf02 <user_task.part.1+0x17a>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1bec6:	c8 5f       	subi	r28, 0xF8	; 248
   1bec8:	de 4f       	sbci	r29, 0xFE	; 254
   1beca:	e8 81       	ld	r30, Y
   1becc:	f9 81       	ldd	r31, Y+1	; 0x01
   1bece:	c8 50       	subi	r28, 0x08	; 8
   1bed0:	d1 40       	sbci	r29, 0x01	; 1
   1bed2:	80 81       	ld	r24, Z
   1bed4:	8d 33       	cpi	r24, 0x3D	; 61
   1bed6:	19 f4       	brne	.+6      	; 0x1bede <user_task.part.1+0x156>
            ++ind;
   1bed8:	82 e0       	ldi	r24, 0x02	; 2
   1beda:	90 e0       	ldi	r25, 0x00	; 0
   1bedc:	02 c0       	rjmp	.+4      	; 0x1bee2 <user_task.part.1+0x15a>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1bede:	81 e0       	ldi	r24, 0x01	; 1
   1bee0:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1bee2:	88 0f       	add	r24, r24
   1bee4:	99 1f       	adc	r25, r25
   1bee6:	e6 e0       	ldi	r30, 0x06	; 6
   1bee8:	f1 e0       	ldi	r31, 0x01	; 1
   1beea:	ec 0f       	add	r30, r28
   1beec:	fd 1f       	adc	r31, r29
   1beee:	e8 0f       	add	r30, r24
   1bef0:	f9 1f       	adc	r31, r25
   1bef2:	80 81       	ld	r24, Z
   1bef4:	91 81       	ldd	r25, Z+1	; 0x01
   1bef6:	0e 94 74 31 	call	0x62e8	; 0x62e8 <get_value>
		result = lcd_backlight(rgb);
   1befa:	0d de       	rcall	.-998    	; 0x1bb16 <lcd_backlight>
   1befc:	08 2f       	mov	r16, r24
   1befe:	10 e0       	ldi	r17, 0x00	; 0
   1bf00:	44 c0       	rjmp	.+136    	; 0x1bf8a <user_task.part.1+0x202>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1bf02:	6c e3       	ldi	r22, 0x3C	; 60
   1bf04:	77 e1       	ldi	r23, 0x17	; 23
   1bf06:	c8 01       	movw	r24, r16
   1bf08:	0e 94 69 30 	call	0x60d2	; 0x60d2 <MATCH>
   1bf0c:	89 2b       	or	r24, r25
   1bf0e:	19 f0       	breq	.+6      	; 0x1bf16 <user_task.part.1+0x18e>
    {
        PrintFree();
   1bf10:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <PrintFree>
   1bf14:	38 c0       	rjmp	.+112    	; 0x1bf86 <user_task.part.1+0x1fe>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1bf16:	63 ed       	ldi	r22, 0xD3	; 211
   1bf18:	7d e0       	ldi	r23, 0x0D	; 13
   1bf1a:	c8 01       	movw	r24, r16
   1bf1c:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1bf20:	89 2b       	or	r24, r25
   1bf22:	51 f0       	breq	.+20     	; 0x1bf38 <user_task.part.1+0x1b0>
    {
        cli();
   1bf24:	f8 94       	cli
        uart_rx_flush(0);
   1bf26:	80 e0       	ldi	r24, 0x00	; 0
   1bf28:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <uart_rx_flush>
        cli();
   1bf2c:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bf2e:	82 e0       	ldi	r24, 0x02	; 2
   1bf30:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bf32:	e0 e0       	ldi	r30, 0x00	; 0
   1bf34:	fc ef       	ldi	r31, 0xFC	; 252
   1bf36:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1bf38:	60 e4       	ldi	r22, 0x40	; 64
   1bf3a:	77 e1       	ldi	r23, 0x17	; 23
   1bf3c:	c8 01       	movw	r24, r16
   1bf3e:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1bf42:	89 2b       	or	r24, r25
   1bf44:	19 f0       	breq	.+6      	; 0x1bf4c <user_task.part.1+0x1c4>
    {
        setdate();
   1bf46:	0e 94 b8 39 	call	0x7370	; 0x7370 <setdate>
   1bf4a:	07 c0       	rjmp	.+14     	; 0x1bf5a <user_task.part.1+0x1d2>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1bf4c:	68 e4       	ldi	r22, 0x48	; 72
   1bf4e:	77 e1       	ldi	r23, 0x17	; 23
   1bf50:	c8 01       	movw	r24, r16
   1bf52:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1bf56:	89 2b       	or	r24, r25
   1bf58:	19 f0       	breq	.+6      	; 0x1bf60 <user_task.part.1+0x1d8>
    {
        display_clock();
   1bf5a:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <display_clock>
   1bf5e:	13 c0       	rjmp	.+38     	; 0x1bf86 <user_task.part.1+0x1fe>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bf60:	6c e6       	ldi	r22, 0x6C	; 108
   1bf62:	76 e1       	ldi	r23, 0x16	; 22
   1bf64:	c8 01       	movw	r24, r16
   1bf66:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1bf6a:	89 2b       	or	r24, r25
    {
        help();
   1bf6c:	11 f0       	breq	.+4      	; 0x1bf72 <user_task.part.1+0x1ea>
   1bf6e:	eb de       	rcall	.-554    	; 0x1bd46 <help>
   1bf70:	0a c0       	rjmp	.+20     	; 0x1bf86 <user_task.part.1+0x1fe>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bf72:	62 e7       	ldi	r22, 0x72	; 114
   1bf74:	76 e1       	ldi	r23, 0x16	; 22
   1bf76:	c8 01       	movw	r24, r16
   1bf78:	0e 94 7d 30 	call	0x60fa	; 0x60fa <MATCHI>
   1bf7c:	89 2b       	or	r24, r25
   1bf7e:	b9 f7       	brne	.-18     	; 0x1bf6e <user_task.part.1+0x1e6>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1bf80:	00 e0       	ldi	r16, 0x00	; 0
   1bf82:	10 e0       	ldi	r17, 0x00	; 0
   1bf84:	02 c0       	rjmp	.+4      	; 0x1bf8a <user_task.part.1+0x202>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1bf86:	01 e0       	ldi	r16, 0x01	; 1
   1bf88:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

	if( (ret = gpib_tests(argc,argv)) )
   1bf8a:	be 01       	movw	r22, r28
   1bf8c:	6a 5f       	subi	r22, 0xFA	; 250
   1bf8e:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf90:	c7 01       	movw	r24, r14
   1bf92:	0e 94 15 90 	call	0x1202a	; 0x1202a <gpib_tests>
   1bf96:	00 97       	sbiw	r24, 0x00	; 0
   1bf98:	51 f0       	breq	.+20     	; 0x1bfae <user_task.part.1+0x226>
    {
		if(ret < 0)
   1bf9a:	97 fd       	sbrc	r25, 7
   1bf9c:	03 c0       	rjmp	.+6      	; 0x1bfa4 <user_task.part.1+0x21c>
			result = -1;
		else
			result = 1;
   1bf9e:	01 e0       	ldi	r16, 0x01	; 1
   1bfa0:	10 e0       	ldi	r17, 0x00	; 0
   1bfa2:	02 c0       	rjmp	.+4      	; 0x1bfa8 <user_task.part.1+0x220>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1bfa4:	0f ef       	ldi	r16, 0xFF	; 255
   1bfa6:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1bfa8:	0e 94 29 8b 	call	0x11652	; 0x11652 <gpib_init_devices>
   1bfac:	0f c0       	rjmp	.+30     	; 0x1bfcc <user_task.part.1+0x244>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1bfae:	be 01       	movw	r22, r28
   1bfb0:	6a 5f       	subi	r22, 0xFA	; 250
   1bfb2:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfb4:	c7 01       	movw	r24, r14
   1bfb6:	0e 94 02 80 	call	0x10004	; 0x10004 <posix_tests>
   1bfba:	00 97       	sbiw	r24, 0x00	; 0
   1bfbc:	39 f0       	breq	.+14     	; 0x1bfcc <user_task.part.1+0x244>
	{
		if(ret < 0)
   1bfbe:	97 fd       	sbrc	r25, 7
   1bfc0:	03 c0       	rjmp	.+6      	; 0x1bfc8 <user_task.part.1+0x240>
			result = -1;
		else
			result = 1;
   1bfc2:	01 e0       	ldi	r16, 0x01	; 1
   1bfc4:	10 e0       	ldi	r17, 0x00	; 0
   1bfc6:	02 c0       	rjmp	.+4      	; 0x1bfcc <user_task.part.1+0x244>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1bfc8:	0f ef       	ldi	r16, 0xFF	; 255
   1bfca:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1bfcc:	be 01       	movw	r22, r28
   1bfce:	6a 5f       	subi	r22, 0xFA	; 250
   1bfd0:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfd2:	c7 01       	movw	r24, r14
   1bfd4:	0e 94 63 72 	call	0xe4c6	; 0xe4c6 <fatfs_tests>
   1bfd8:	00 97       	sbiw	r24, 0x00	; 0
   1bfda:	39 f0       	breq	.+14     	; 0x1bfea <user_task.part.1+0x262>
	{
		if(ret < 0)
   1bfdc:	97 fd       	sbrc	r25, 7
   1bfde:	03 c0       	rjmp	.+6      	; 0x1bfe6 <user_task.part.1+0x25e>
			result = -1;
		else
			result = 1;
   1bfe0:	01 e0       	ldi	r16, 0x01	; 1
   1bfe2:	10 e0       	ldi	r17, 0x00	; 0
   1bfe4:	02 c0       	rjmp	.+4      	; 0x1bfea <user_task.part.1+0x262>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1bfe6:	0f ef       	ldi	r16, 0xFF	; 255
   1bfe8:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1bfea:	be 01       	movw	r22, r28
   1bfec:	6a 5f       	subi	r22, 0xFA	; 250
   1bfee:	7e 4f       	sbci	r23, 0xFE	; 254
   1bff0:	c7 01       	movw	r24, r14
   1bff2:	49 db       	rcall	.-2414   	; 0x1b686 <lif_tests>
   1bff4:	00 97       	sbiw	r24, 0x00	; 0
   1bff6:	19 f0       	breq	.+6      	; 0x1bffe <user_task.part.1+0x276>
	{
		if(ret < 0)
   1bff8:	97 ff       	sbrs	r25, 7
   1bffa:	04 c0       	rjmp	.+8      	; 0x1c004 <user_task.part.1+0x27c>
   1bffc:	09 c0       	rjmp	.+18     	; 0x1c010 <user_task.part.1+0x288>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1bffe:	01 30       	cpi	r16, 0x01	; 1
   1c000:	11 05       	cpc	r17, r1
   1c002:	19 f4       	brne	.+6      	; 0x1c00a <user_task.part.1+0x282>
        printf("OK\n");
   1c004:	84 ee       	ldi	r24, 0xE4	; 228
   1c006:	95 e4       	ldi	r25, 0x45	; 69
   1c008:	05 c0       	rjmp	.+10     	; 0x1c014 <user_task.part.1+0x28c>
	else if(result == -1)
   1c00a:	0f 3f       	cpi	r16, 0xFF	; 255
   1c00c:	1f 4f       	sbci	r17, 0xFF	; 255
   1c00e:	59 f4       	brne	.+22     	; 0x1c026 <user_task.part.1+0x29e>
        printf("Command FAILED\n");
   1c010:	84 ed       	ldi	r24, 0xD4	; 212
   1c012:	95 e4       	ldi	r25, 0x45	; 69
   1c014:	a0 e0       	ldi	r26, 0x00	; 0
   1c016:	ed b7       	in	r30, 0x3d	; 61
   1c018:	fe b7       	in	r31, 0x3e	; 62
   1c01a:	81 83       	std	Z+1, r24	; 0x01
   1c01c:	92 83       	std	Z+2, r25	; 0x02
   1c01e:	a3 83       	std	Z+3, r26	; 0x03
   1c020:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1c024:	33 c0       	rjmp	.+102    	; 0x1c08c <user_task.part.1+0x304>
    else
	{
        printf("Invalid Command\n");
   1c026:	83 ec       	ldi	r24, 0xC3	; 195
   1c028:	95 e4       	ldi	r25, 0x45	; 69
   1c02a:	a0 e0       	ldi	r26, 0x00	; 0
   1c02c:	ed b7       	in	r30, 0x3d	; 61
   1c02e:	fe b7       	in	r31, 0x3e	; 62
   1c030:	81 83       	std	Z+1, r24	; 0x01
   1c032:	92 83       	std	Z+2, r25	; 0x02
   1c034:	a3 83       	std	Z+3, r26	; 0x03
   1c036:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c03a:	ed b7       	in	r30, 0x3d	; 61
   1c03c:	fe b7       	in	r31, 0x3e	; 62
   1c03e:	f5 82       	std	Z+5, r15	; 0x05
   1c040:	e4 82       	std	Z+4, r14	; 0x04
   1c042:	8a ea       	ldi	r24, 0xAA	; 170
   1c044:	95 e4       	ldi	r25, 0x45	; 69
   1c046:	a0 e0       	ldi	r26, 0x00	; 0
   1c048:	81 83       	std	Z+1, r24	; 0x01
   1c04a:	92 83       	std	Z+2, r25	; 0x02
   1c04c:	a3 83       	std	Z+3, r26	; 0x03
   1c04e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
   1c052:	8e 01       	movw	r16, r28
   1c054:	0a 5f       	subi	r16, 0xFA	; 250
   1c056:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c058:	c1 2c       	mov	r12, r1
   1c05a:	d1 2c       	mov	r13, r1
			printf("       [%s]\n", argv[i]);
   1c05c:	8d e9       	ldi	r24, 0x9D	; 157
   1c05e:	95 e4       	ldi	r25, 0x45	; 69
   1c060:	3c 01       	movw	r6, r24
   1c062:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c064:	ce 14       	cp	r12, r14
   1c066:	df 04       	cpc	r13, r15
   1c068:	8c f4       	brge	.+34     	; 0x1c08c <user_task.part.1+0x304>
			printf("       [%s]\n", argv[i]);
   1c06a:	f8 01       	movw	r30, r16
   1c06c:	81 91       	ld	r24, Z+
   1c06e:	91 91       	ld	r25, Z+
   1c070:	8f 01       	movw	r16, r30
   1c072:	ed b7       	in	r30, 0x3d	; 61
   1c074:	fe b7       	in	r31, 0x3e	; 62
   1c076:	95 83       	std	Z+5, r25	; 0x05
   1c078:	84 83       	std	Z+4, r24	; 0x04
   1c07a:	61 82       	std	Z+1, r6	; 0x01
   1c07c:	72 82       	std	Z+2, r7	; 0x02
   1c07e:	83 82       	std	Z+3, r8	; 0x03
   1c080:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c084:	ff ef       	ldi	r31, 0xFF	; 255
   1c086:	cf 1a       	sub	r12, r31
   1c088:	df 0a       	sbc	r13, r31
   1c08a:	ec cf       	rjmp	.-40     	; 0x1c064 <user_task.part.1+0x2dc>
			printf("       [%s]\n", argv[i]);
	}
}
   1c08c:	c5 59       	subi	r28, 0x95	; 149
   1c08e:	de 4f       	sbci	r29, 0xFE	; 254
   1c090:	0f b6       	in	r0, 0x3f	; 63
   1c092:	f8 94       	cli
   1c094:	de bf       	out	0x3e, r29	; 62
   1c096:	0f be       	out	0x3f, r0	; 63
   1c098:	cd bf       	out	0x3d, r28	; 61
   1c09a:	df 91       	pop	r29
   1c09c:	cf 91       	pop	r28
   1c09e:	1f 91       	pop	r17
   1c0a0:	0f 91       	pop	r16
   1c0a2:	ff 90       	pop	r15
   1c0a4:	ef 90       	pop	r14
   1c0a6:	df 90       	pop	r13
   1c0a8:	cf 90       	pop	r12
   1c0aa:	8f 90       	pop	r8
   1c0ac:	7f 90       	pop	r7
   1c0ae:	6f 90       	pop	r6
   1c0b0:	08 95       	ret

0001c0b2 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c0b2:	81 11       	cpse	r24, r1
        gpib_task();
   1c0b4:	0e 94 94 8f 	call	0x11f28	; 0x11f28 <gpib_task>

    if(!kbhit(0))
   1c0b8:	80 e0       	ldi	r24, 0x00	; 0
   1c0ba:	0e 94 12 28 	call	0x5024	; 0x5024 <uart_rx_count>
   1c0be:	89 2b       	or	r24, r25
   1c0c0:	09 f0       	breq	.+2      	; 0x1c0c4 <user_task+0x12>
   1c0c2:	62 ce       	rjmp	.-828    	; 0x1bd88 <user_task.part.1>
   1c0c4:	08 95       	ret

0001c0c6 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c0c6:	a3 e3       	ldi	r26, 0x33	; 51
   1c0c8:	b0 e0       	ldi	r27, 0x00	; 0
   1c0ca:	e8 e6       	ldi	r30, 0x68	; 104
   1c0cc:	f0 ee       	ldi	r31, 0xE0	; 224
   1c0ce:	8f c2       	rjmp	.+1310   	; 0x1c5ee <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c0d0:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c0d4:	46 98       	cbi	0x08, 6	; 8
   1c0d6:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c0d8:	0e 94 dc 83 	call	0x107b8	; 0x107b8 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c0dc:	40 e0       	ldi	r20, 0x00	; 0
   1c0de:	52 ec       	ldi	r21, 0xC2	; 194
   1c0e0:	61 e0       	ldi	r22, 0x01	; 1
   1c0e2:	70 e0       	ldi	r23, 0x00	; 0
   1c0e4:	80 e0       	ldi	r24, 0x00	; 0
   1c0e6:	0e 94 7d 27 	call	0x4efa	; 0x4efa <uart_init>
   1c0ea:	6b 01       	movw	r12, r22
   1c0ec:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c0ee:	68 ec       	ldi	r22, 0xC8	; 200
   1c0f0:	70 e0       	ldi	r23, 0x00	; 0
   1c0f2:	80 e0       	ldi	r24, 0x00	; 0
   1c0f4:	90 e0       	ldi	r25, 0x00	; 0
   1c0f6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <delayms>

    sep();
   1c0fa:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
    printf("Start\n");
   1c0fe:	86 e9       	ldi	r24, 0x96	; 150
   1c100:	95 e4       	ldi	r25, 0x45	; 69
   1c102:	a0 e0       	ldi	r26, 0x00	; 0
   1c104:	ed b7       	in	r30, 0x3d	; 61
   1c106:	fe b7       	in	r31, 0x3e	; 62
   1c108:	81 83       	std	Z+1, r24	; 0x01
   1c10a:	92 83       	std	Z+2, r25	; 0x02
   1c10c:	a3 83       	std	Z+3, r26	; 0x03
   1c10e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c112:	80 e0       	ldi	r24, 0x00	; 0
   1c114:	9d e2       	ldi	r25, 0x2D	; 45
   1c116:	a1 e3       	ldi	r26, 0x31	; 49
   1c118:	b1 e0       	ldi	r27, 0x01	; 1
   1c11a:	ed b7       	in	r30, 0x3d	; 61
   1c11c:	fe b7       	in	r31, 0x3e	; 62
   1c11e:	84 83       	std	Z+4, r24	; 0x04
   1c120:	95 83       	std	Z+5, r25	; 0x05
   1c122:	a6 83       	std	Z+6, r26	; 0x06
   1c124:	b7 83       	std	Z+7, r27	; 0x07
   1c126:	85 e8       	ldi	r24, 0x85	; 133
   1c128:	95 e4       	ldi	r25, 0x45	; 69
   1c12a:	a0 e0       	ldi	r26, 0x00	; 0
   1c12c:	81 83       	std	Z+1, r24	; 0x01
   1c12e:	92 83       	std	Z+2, r25	; 0x02
   1c130:	a3 83       	std	Z+3, r26	; 0x03
   1c132:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c136:	ed b7       	in	r30, 0x3d	; 61
   1c138:	fe b7       	in	r31, 0x3e	; 62
   1c13a:	c0 86       	std	Z+8, r12	; 0x08
   1c13c:	d1 86       	std	Z+9, r13	; 0x09
   1c13e:	e2 86       	std	Z+10, r14	; 0x0a
   1c140:	f3 86       	std	Z+11, r15	; 0x0b
   1c142:	80 e0       	ldi	r24, 0x00	; 0
   1c144:	92 ec       	ldi	r25, 0xC2	; 194
   1c146:	a1 e0       	ldi	r26, 0x01	; 1
   1c148:	b0 e0       	ldi	r27, 0x00	; 0
   1c14a:	84 83       	std	Z+4, r24	; 0x04
   1c14c:	95 83       	std	Z+5, r25	; 0x05
   1c14e:	a6 83       	std	Z+6, r26	; 0x06
   1c150:	b7 83       	std	Z+7, r27	; 0x07
   1c152:	8e e5       	ldi	r24, 0x5E	; 94
   1c154:	95 e4       	ldi	r25, 0x45	; 69
   1c156:	a0 e0       	ldi	r26, 0x00	; 0
   1c158:	81 83       	std	Z+1, r24	; 0x01
   1c15a:	92 83       	std	Z+2, r25	; 0x02
   1c15c:	a3 83       	std	Z+3, r26	; 0x03
   1c15e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    init_timers();
   1c162:	0e 94 25 34 	call	0x684a	; 0x684a <init_timers>

    sep();
   1c166:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c16a:	8f e3       	ldi	r24, 0x3F	; 63
   1c16c:	95 e4       	ldi	r25, 0x45	; 69
   1c16e:	a0 e0       	ldi	r26, 0x00	; 0
   1c170:	ed b7       	in	r30, 0x3d	; 61
   1c172:	fe b7       	in	r31, 0x3e	; 62
   1c174:	81 83       	std	Z+1, r24	; 0x01
   1c176:	92 83       	std	Z+2, r25	; 0x02
   1c178:	a3 83       	std	Z+3, r26	; 0x03
   1c17a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c17e:	82 e2       	ldi	r24, 0x22	; 34
   1c180:	95 e4       	ldi	r25, 0x45	; 69
   1c182:	a0 e0       	ldi	r26, 0x00	; 0
   1c184:	ed b7       	in	r30, 0x3d	; 61
   1c186:	fe b7       	in	r31, 0x3e	; 62
   1c188:	81 83       	std	Z+1, r24	; 0x01
   1c18a:	92 83       	std	Z+2, r25	; 0x02
   1c18c:	a3 83       	std	Z+3, r26	; 0x03
   1c18e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf(" GNU version 3\n");
   1c192:	82 e1       	ldi	r24, 0x12	; 18
   1c194:	95 e4       	ldi	r25, 0x45	; 69
   1c196:	a0 e0       	ldi	r26, 0x00	; 0
   1c198:	ed b7       	in	r30, 0x3d	; 61
   1c19a:	fe b7       	in	r31, 0x3e	; 62
   1c19c:	81 83       	std	Z+1, r24	; 0x01
   1c19e:	92 83       	std	Z+2, r25	; 0x02
   1c1a0:	a3 83       	std	Z+3, r26	; 0x03
   1c1a2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1a6:	8b ee       	ldi	r24, 0xEB	; 235
   1c1a8:	94 e4       	ldi	r25, 0x44	; 68
   1c1aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ac:	ed b7       	in	r30, 0x3d	; 61
   1c1ae:	fe b7       	in	r31, 0x3e	; 62
   1c1b0:	81 83       	std	Z+1, r24	; 0x01
   1c1b2:	92 83       	std	Z+2, r25	; 0x02
   1c1b4:	a3 83       	std	Z+3, r26	; 0x03
   1c1b6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1ba:	86 eb       	ldi	r24, 0xB6	; 182
   1c1bc:	96 e1       	ldi	r25, 0x16	; 22
   1c1be:	ed b7       	in	r30, 0x3d	; 61
   1c1c0:	fe b7       	in	r31, 0x3e	; 62
   1c1c2:	95 83       	std	Z+5, r25	; 0x05
   1c1c4:	84 83       	std	Z+4, r24	; 0x04
   1c1c6:	81 ed       	ldi	r24, 0xD1	; 209
   1c1c8:	94 e4       	ldi	r25, 0x44	; 68
   1c1ca:	a0 e0       	ldi	r26, 0x00	; 0
   1c1cc:	81 83       	std	Z+1, r24	; 0x01
   1c1ce:	92 83       	std	Z+2, r25	; 0x02
   1c1d0:	a3 83       	std	Z+3, r26	; 0x03
   1c1d2:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c1d6:	8a ed       	ldi	r24, 0xDA	; 218
   1c1d8:	96 e1       	ldi	r25, 0x16	; 22
   1c1da:	ed b7       	in	r30, 0x3d	; 61
   1c1dc:	fe b7       	in	r31, 0x3e	; 62
   1c1de:	95 83       	std	Z+5, r25	; 0x05
   1c1e0:	84 83       	std	Z+4, r24	; 0x04
   1c1e2:	87 eb       	ldi	r24, 0xB7	; 183
   1c1e4:	94 e4       	ldi	r25, 0x44	; 68
   1c1e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e8:	81 83       	std	Z+1, r24	; 0x01
   1c1ea:	92 83       	std	Z+2, r25	; 0x02
   1c1ec:	a3 83       	std	Z+3, r26	; 0x03
   1c1ee:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

    sep();
   1c1f2:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
    PrintFree();
   1c1f6:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <PrintFree>

    sep();
   1c1fa:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c1fe:	81 ea       	ldi	r24, 0xA1	; 161
   1c200:	94 e4       	ldi	r25, 0x44	; 68
   1c202:	a0 e0       	ldi	r26, 0x00	; 0
   1c204:	ed b7       	in	r30, 0x3d	; 61
   1c206:	fe b7       	in	r31, 0x3e	; 62
   1c208:	81 83       	std	Z+1, r24	; 0x01
   1c20a:	92 83       	std	Z+2, r25	; 0x02
   1c20c:	a3 83       	std	Z+3, r26	; 0x03
   1c20e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c212:	4b e0       	ldi	r20, 0x0B	; 11
   1c214:	50 e0       	ldi	r21, 0x00	; 0
   1c216:	60 e2       	ldi	r22, 0x20	; 32
   1c218:	71 ea       	ldi	r23, 0xA1	; 161
   1c21a:	87 e0       	ldi	r24, 0x07	; 7
   1c21c:	90 e0       	ldi	r25, 0x00	; 0
   1c21e:	0e 94 b1 24 	call	0x4962	; 0x4962 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c222:	8b e8       	ldi	r24, 0x8B	; 139
   1c224:	94 e4       	ldi	r25, 0x44	; 68
   1c226:	a0 e0       	ldi	r26, 0x00	; 0
   1c228:	ed b7       	in	r30, 0x3d	; 61
   1c22a:	fe b7       	in	r31, 0x3e	; 62
   1c22c:	81 83       	std	Z+1, r24	; 0x01
   1c22e:	92 83       	std	Z+2, r25	; 0x02
   1c230:	a3 83       	std	Z+3, r26	; 0x03
   1c232:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
	i2c_init(100000);
   1c236:	60 ea       	ldi	r22, 0xA0	; 160
   1c238:	76 e8       	ldi	r23, 0x86	; 134
   1c23a:	81 e0       	ldi	r24, 0x01	; 1
   1c23c:	90 e0       	ldi	r25, 0x00	; 0
   1c23e:	0e 94 4e 2a 	call	0x549c	; 0x549c <i2c_init>
    sep();
   1c242:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c246:	89 e7       	ldi	r24, 0x79	; 121
   1c248:	94 e4       	ldi	r25, 0x44	; 68
   1c24a:	a0 e0       	ldi	r26, 0x00	; 0
   1c24c:	ed b7       	in	r30, 0x3d	; 61
   1c24e:	fe b7       	in	r31, 0x3e	; 62
   1c250:	81 83       	std	Z+1, r24	; 0x01
   1c252:	92 83       	std	Z+2, r25	; 0x02
   1c254:	a3 83       	std	Z+3, r26	; 0x03
   1c256:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    clock_clear();
   1c25a:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <clock_clear>
    printf("Clock cleared\n");
   1c25e:	8a e6       	ldi	r24, 0x6A	; 106
   1c260:	94 e4       	ldi	r25, 0x44	; 68
   1c262:	a0 e0       	ldi	r26, 0x00	; 0
   1c264:	ed b7       	in	r30, 0x3d	; 61
   1c266:	fe b7       	in	r31, 0x3e	; 62
   1c268:	81 83       	std	Z+1, r24	; 0x01
   1c26a:	92 83       	std	Z+2, r25	; 0x02
   1c26c:	a3 83       	std	Z+3, r26	; 0x03
   1c26e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c272:	be 01       	movw	r22, r28
   1c274:	64 5d       	subi	r22, 0xD4	; 212
   1c276:	7f 4f       	sbci	r23, 0xFF	; 255
   1c278:	80 e0       	ldi	r24, 0x00	; 0
   1c27a:	90 e0       	ldi	r25, 0x00	; 0
   1c27c:	0e 94 82 34 	call	0x6904	; 0x6904 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c280:	88 a9       	ldd	r24, Y+48	; 0x30
   1c282:	99 a9       	ldd	r25, Y+49	; 0x31
   1c284:	aa a9       	ldd	r26, Y+50	; 0x32
   1c286:	bb a9       	ldd	r27, Y+51	; 0x33
   1c288:	ed b7       	in	r30, 0x3d	; 61
   1c28a:	fe b7       	in	r31, 0x3e	; 62
   1c28c:	84 83       	std	Z+4, r24	; 0x04
   1c28e:	95 83       	std	Z+5, r25	; 0x05
   1c290:	a6 83       	std	Z+6, r26	; 0x06
   1c292:	b7 83       	std	Z+7, r27	; 0x07
   1c294:	8c e3       	ldi	r24, 0x3C	; 60
   1c296:	94 e4       	ldi	r25, 0x44	; 68
   1c298:	a0 e0       	ldi	r26, 0x00	; 0
   1c29a:	81 83       	std	Z+1, r24	; 0x01
   1c29c:	92 83       	std	Z+2, r25	; 0x02
   1c29e:	a3 83       	std	Z+3, r26	; 0x03
   1c2a0:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c2a4:	80 e0       	ldi	r24, 0x00	; 0
   1c2a6:	90 e0       	ldi	r25, 0x00	; 0
   1c2a8:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <initialize_clock>
    display_clock();
   1c2ac:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <display_clock>
    sep();
   1c2b0:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c2b4:	57 dc       	rcall	.-1874   	; 0x1bb64 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c2b6:	84 e2       	ldi	r24, 0x24	; 36
   1c2b8:	94 e4       	ldi	r25, 0x44	; 68
   1c2ba:	a0 e0       	ldi	r26, 0x00	; 0
   1c2bc:	ed b7       	in	r30, 0x3d	; 61
   1c2be:	fe b7       	in	r31, 0x3e	; 62
   1c2c0:	81 83       	std	Z+1, r24	; 0x01
   1c2c2:	92 83       	std	Z+2, r25	; 0x02
   1c2c4:	a3 83       	std	Z+3, r26	; 0x03
   1c2c6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    if ( !mmc_init(1) )
   1c2ca:	81 e0       	ldi	r24, 0x01	; 1
   1c2cc:	90 e0       	ldi	r25, 0x00	; 0
   1c2ce:	0e 94 4f 6d 	call	0xda9e	; 0xda9e <mmc_init>
   1c2d2:	89 2b       	or	r24, r25
   1c2d4:	51 f4       	brne	.+20     	; 0x1c2ea <main+0x224>
		printf("MMC initialized\n");
   1c2d6:	83 e1       	ldi	r24, 0x13	; 19
   1c2d8:	94 e4       	ldi	r25, 0x44	; 68
   1c2da:	a0 e0       	ldi	r26, 0x00	; 0
   1c2dc:	ed b7       	in	r30, 0x3d	; 61
   1c2de:	fe b7       	in	r31, 0x3e	; 62
   1c2e0:	81 83       	std	Z+1, r24	; 0x01
   1c2e2:	92 83       	std	Z+2, r25	; 0x02
   1c2e4:	a3 83       	std	Z+3, r26	; 0x03
   1c2e6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    sep();
   1c2ea:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c2ee:	0e 94 dc 83 	call	0x107b8	; 0x107b8 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c2f2:	8d ef       	ldi	r24, 0xFD	; 253
   1c2f4:	93 e4       	ldi	r25, 0x43	; 67
   1c2f6:	a0 e0       	ldi	r26, 0x00	; 0
   1c2f8:	ed b7       	in	r30, 0x3d	; 61
   1c2fa:	fe b7       	in	r31, 0x3e	; 62
   1c2fc:	81 83       	std	Z+1, r24	; 0x01
   1c2fe:	92 83       	std	Z+2, r25	; 0x02
   1c300:	a3 83       	std	Z+3, r26	; 0x03
   1c302:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c306:	0e 94 89 ba 	call	0x17512	; 0x17512 <printer_init>
    printf("Printer initialized\n");
   1c30a:	88 ee       	ldi	r24, 0xE8	; 232
   1c30c:	93 e4       	ldi	r25, 0x43	; 67
   1c30e:	a0 e0       	ldi	r26, 0x00	; 0
   1c310:	ed b7       	in	r30, 0x3d	; 61
   1c312:	fe b7       	in	r31, 0x3e	; 62
   1c314:	81 83       	std	Z+1, r24	; 0x01
   1c316:	92 83       	std	Z+2, r25	; 0x02
   1c318:	a3 83       	std	Z+3, r26	; 0x03
   1c31a:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c31e:	86 ed       	ldi	r24, 0xD6	; 214
   1c320:	93 e4       	ldi	r25, 0x43	; 67
   1c322:	a0 e0       	ldi	r26, 0x00	; 0
   1c324:	ed b7       	in	r30, 0x3d	; 61
   1c326:	fe b7       	in	r31, 0x3e	; 62
   1c328:	81 83       	std	Z+1, r24	; 0x01
   1c32a:	92 83       	std	Z+2, r25	; 0x02
   1c32c:	a3 83       	std	Z+3, r26	; 0x03
   1c32e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    gpib_timer_init();
   1c332:	0e 94 f0 81 	call	0x103e0	; 0x103e0 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c336:	8e eb       	ldi	r24, 0xBE	; 190
   1c338:	93 e4       	ldi	r25, 0x43	; 67
   1c33a:	a0 e0       	ldi	r26, 0x00	; 0
   1c33c:	ed b7       	in	r30, 0x3d	; 61
   1c33e:	fe b7       	in	r31, 0x3e	; 62
   1c340:	81 83       	std	Z+1, r24	; 0x01
   1c342:	92 83       	std	Z+2, r25	; 0x02
   1c344:	a3 83       	std	Z+3, r26	; 0x03
   1c346:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c34a:	0e 94 54 8a 	call	0x114a8	; 0x114a8 <gpib_file_init>
    printf("GPIB File init done\n");
   1c34e:	89 ea       	ldi	r24, 0xA9	; 169
   1c350:	93 e4       	ldi	r25, 0x43	; 67
   1c352:	a0 e0       	ldi	r26, 0x00	; 0
   1c354:	ed b7       	in	r30, 0x3d	; 61
   1c356:	fe b7       	in	r31, 0x3e	; 62
   1c358:	81 83       	std	Z+1, r24	; 0x01
   1c35a:	92 83       	std	Z+2, r25	; 0x02
   1c35c:	a3 83       	std	Z+3, r26	; 0x03
   1c35e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c362:	0e 94 44 84 	call	0x10888	; 0x10888 <gpib_state_init>
    printf("GPIB State init done\n");
   1c366:	83 e9       	ldi	r24, 0x93	; 147
   1c368:	93 e4       	ldi	r25, 0x43	; 67
   1c36a:	a0 e0       	ldi	r26, 0x00	; 0
   1c36c:	ed b7       	in	r30, 0x3d	; 61
   1c36e:	fe b7       	in	r31, 0x3e	; 62
   1c370:	81 83       	std	Z+1, r24	; 0x01
   1c372:	92 83       	std	Z+2, r25	; 0x02
   1c374:	a3 83       	std	Z+3, r26	; 0x03
   1c376:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    sep();
   1c37a:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c37e:	80 e0       	ldi	r24, 0x00	; 0
   1c380:	90 e0       	ldi	r25, 0x00	; 0
   1c382:	0e 94 e4 91 	call	0x123c8	; 0x123c8 <display_Addresses>
    sep();
   1c386:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c38a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c38e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c392:	ed b7       	in	r30, 0x3d	; 61
   1c394:	fe b7       	in	r31, 0x3e	; 62
   1c396:	95 83       	std	Z+5, r25	; 0x05
   1c398:	84 83       	std	Z+4, r24	; 0x04
   1c39a:	8d e7       	ldi	r24, 0x7D	; 125
   1c39c:	93 e4       	ldi	r25, 0x43	; 67
   1c39e:	a0 e0       	ldi	r26, 0x00	; 0
   1c3a0:	81 83       	std	Z+1, r24	; 0x01
   1c3a2:	92 83       	std	Z+2, r25	; 0x02
   1c3a4:	a3 83       	std	Z+3, r26	; 0x03
   1c3a6:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
    sep();
   1c3aa:	0e 94 3f 30 	call	0x607e	; 0x607e <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c3ae:	0e 94 7c 9d 	call	0x13af8	; 0x13af8 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c3b2:	83 e0       	ldi	r24, 0x03	; 3
   1c3b4:	0e 94 59 95 	call	0x12ab2	; 0x12ab2 <count_drive_types>
   1c3b8:	8c 01       	movw	r16, r24
   1c3ba:	81 e0       	ldi	r24, 0x01	; 1
   1c3bc:	0e 94 59 95 	call	0x12ab2	; 0x12ab2 <count_drive_types>
   1c3c0:	ed b7       	in	r30, 0x3d	; 61
   1c3c2:	fe b7       	in	r31, 0x3e	; 62
   1c3c4:	91 87       	std	Z+9, r25	; 0x09
   1c3c6:	80 87       	std	Z+8, r24	; 0x08
   1c3c8:	17 83       	std	Z+7, r17	; 0x07
   1c3ca:	06 83       	std	Z+6, r16	; 0x06
   1c3cc:	8c e6       	ldi	r24, 0x6C	; 108
   1c3ce:	93 e4       	ldi	r25, 0x43	; 67
   1c3d0:	a0 e0       	ldi	r26, 0x00	; 0
   1c3d2:	83 83       	std	Z+3, r24	; 0x03
   1c3d4:	94 83       	std	Z+4, r25	; 0x04
   1c3d6:	a5 83       	std	Z+5, r26	; 0x05
   1c3d8:	8e 01       	movw	r16, r28
   1c3da:	04 5f       	subi	r16, 0xF4	; 244
   1c3dc:	1f 4f       	sbci	r17, 0xFF	; 255
   1c3de:	12 83       	std	Z+2, r17	; 0x02
   1c3e0:	01 83       	std	Z+1, r16	; 0x01
   1c3e2:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c3e6:	ed b7       	in	r30, 0x3d	; 61
   1c3e8:	fe b7       	in	r31, 0x3e	; 62
   1c3ea:	17 83       	std	Z+7, r17	; 0x07
   1c3ec:	06 83       	std	Z+6, r16	; 0x06
   1c3ee:	86 e6       	ldi	r24, 0x66	; 102
   1c3f0:	93 e4       	ldi	r25, 0x43	; 67
   1c3f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c3f4:	83 83       	std	Z+3, r24	; 0x03
   1c3f6:	94 83       	std	Z+4, r25	; 0x04
   1c3f8:	a5 83       	std	Z+5, r26	; 0x05
   1c3fa:	8c e0       	ldi	r24, 0x0C	; 12
   1c3fc:	93 e0       	ldi	r25, 0x03	; 3
   1c3fe:	92 83       	std	Z+2, r25	; 0x02
   1c400:	81 83       	std	Z+1, r24	; 0x01
   1c402:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c406:	8a e0       	ldi	r24, 0x0A	; 10
   1c408:	97 e1       	ldi	r25, 0x17	; 23
   1c40a:	ed b7       	in	r30, 0x3d	; 61
   1c40c:	fe b7       	in	r31, 0x3e	; 62
   1c40e:	97 83       	std	Z+7, r25	; 0x07
   1c410:	86 83       	std	Z+6, r24	; 0x06
   1c412:	80 e6       	ldi	r24, 0x60	; 96
   1c414:	93 e4       	ldi	r25, 0x43	; 67
   1c416:	a0 e0       	ldi	r26, 0x00	; 0
   1c418:	83 83       	std	Z+3, r24	; 0x03
   1c41a:	94 83       	std	Z+4, r25	; 0x04
   1c41c:	a5 83       	std	Z+5, r26	; 0x05
   1c41e:	85 ef       	ldi	r24, 0xF5	; 245
   1c420:	92 e0       	ldi	r25, 0x02	; 2
   1c422:	92 83       	std	Z+2, r25	; 0x02
   1c424:	81 83       	std	Z+1, r24	; 0x01
   1c426:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <sprintf_P>

	i2c_task_run();
   1c42a:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <i2c_task_run>
	delayms(1000);
   1c42e:	68 ee       	ldi	r22, 0xE8	; 232
   1c430:	73 e0       	ldi	r23, 0x03	; 3
   1c432:	80 e0       	ldi	r24, 0x00	; 0
   1c434:	90 e0       	ldi	r25, 0x00	; 0
   1c436:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c43a:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c_task+0x2>
   1c43e:	88 23       	and	r24, r24
   1c440:	21 f0       	breq	.+8      	; 0x1c44a <main+0x384>
   1c442:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c_task+0x3>
   1c446:	88 23       	and	r24, r24
   1c448:	61 f0       	breq	.+24     	; 0x1c462 <main+0x39c>
	{
		i2c_display_task_errors();
   1c44a:	0e 94 4b 2d 	call	0x5a96	; 0x5a96 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c44e:	86 e4       	ldi	r24, 0x46	; 70
   1c450:	93 e4       	ldi	r25, 0x43	; 67
   1c452:	a0 e0       	ldi	r26, 0x00	; 0
   1c454:	ed b7       	in	r30, 0x3d	; 61
   1c456:	fe b7       	in	r31, 0x3e	; 62
   1c458:	81 83       	std	Z+1, r24	; 0x01
   1c45a:	92 83       	std	Z+2, r25	; 0x02
   1c45c:	a3 83       	std	Z+3, r26	; 0x03
   1c45e:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c462:	82 e3       	ldi	r24, 0x32	; 50
   1c464:	93 e4       	ldi	r25, 0x43	; 67
   1c466:	a0 e0       	ldi	r26, 0x00	; 0
   1c468:	ed b7       	in	r30, 0x3d	; 61
   1c46a:	fe b7       	in	r31, 0x3e	; 62
   1c46c:	81 83       	std	Z+1, r24	; 0x01
   1c46e:	92 83       	std	Z+2, r25	; 0x02
   1c470:	a3 83       	std	Z+3, r26	; 0x03
   1c472:	0e 94 30 45 	call	0x8a60	; 0x8a60 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c476:	81 e0       	ldi	r24, 0x01	; 1
   1c478:	1c de       	rcall	.-968    	; 0x1c0b2 <user_task>
   1c47a:	fd cf       	rjmp	.-6      	; 0x1c476 <main+0x3b0>

0001c47c <__mulsi3>:
   1c47c:	db 01       	movw	r26, r22
   1c47e:	8f 93       	push	r24
   1c480:	9f 93       	push	r25
   1c482:	8b d0       	rcall	.+278    	; 0x1c59a <__muluhisi3>
   1c484:	bf 91       	pop	r27
   1c486:	af 91       	pop	r26
   1c488:	a2 9f       	mul	r26, r18
   1c48a:	80 0d       	add	r24, r0
   1c48c:	91 1d       	adc	r25, r1
   1c48e:	a3 9f       	mul	r26, r19
   1c490:	90 0d       	add	r25, r0
   1c492:	b2 9f       	mul	r27, r18
   1c494:	90 0d       	add	r25, r0
   1c496:	11 24       	eor	r1, r1
   1c498:	08 95       	ret

0001c49a <__udivmodqi4>:
   1c49a:	99 1b       	sub	r25, r25
   1c49c:	79 e0       	ldi	r23, 0x09	; 9
   1c49e:	04 c0       	rjmp	.+8      	; 0x1c4a8 <__udivmodqi4_ep>

0001c4a0 <__udivmodqi4_loop>:
   1c4a0:	99 1f       	adc	r25, r25
   1c4a2:	96 17       	cp	r25, r22
   1c4a4:	08 f0       	brcs	.+2      	; 0x1c4a8 <__udivmodqi4_ep>
   1c4a6:	96 1b       	sub	r25, r22

0001c4a8 <__udivmodqi4_ep>:
   1c4a8:	88 1f       	adc	r24, r24
   1c4aa:	7a 95       	dec	r23
   1c4ac:	c9 f7       	brne	.-14     	; 0x1c4a0 <__udivmodqi4_loop>
   1c4ae:	80 95       	com	r24
   1c4b0:	08 95       	ret

0001c4b2 <__udivmodhi4>:
   1c4b2:	aa 1b       	sub	r26, r26
   1c4b4:	bb 1b       	sub	r27, r27
   1c4b6:	51 e1       	ldi	r21, 0x11	; 17
   1c4b8:	07 c0       	rjmp	.+14     	; 0x1c4c8 <__udivmodhi4_ep>

0001c4ba <__udivmodhi4_loop>:
   1c4ba:	aa 1f       	adc	r26, r26
   1c4bc:	bb 1f       	adc	r27, r27
   1c4be:	a6 17       	cp	r26, r22
   1c4c0:	b7 07       	cpc	r27, r23
   1c4c2:	10 f0       	brcs	.+4      	; 0x1c4c8 <__udivmodhi4_ep>
   1c4c4:	a6 1b       	sub	r26, r22
   1c4c6:	b7 0b       	sbc	r27, r23

0001c4c8 <__udivmodhi4_ep>:
   1c4c8:	88 1f       	adc	r24, r24
   1c4ca:	99 1f       	adc	r25, r25
   1c4cc:	5a 95       	dec	r21
   1c4ce:	a9 f7       	brne	.-22     	; 0x1c4ba <__udivmodhi4_loop>
   1c4d0:	80 95       	com	r24
   1c4d2:	90 95       	com	r25
   1c4d4:	bc 01       	movw	r22, r24
   1c4d6:	cd 01       	movw	r24, r26
   1c4d8:	08 95       	ret

0001c4da <__divmodhi4>:
   1c4da:	97 fb       	bst	r25, 7
   1c4dc:	07 2e       	mov	r0, r23
   1c4de:	16 f4       	brtc	.+4      	; 0x1c4e4 <__divmodhi4+0xa>
   1c4e0:	00 94       	com	r0
   1c4e2:	06 d0       	rcall	.+12     	; 0x1c4f0 <__divmodhi4_neg1>
   1c4e4:	77 fd       	sbrc	r23, 7
   1c4e6:	08 d0       	rcall	.+16     	; 0x1c4f8 <__divmodhi4_neg2>
   1c4e8:	e4 df       	rcall	.-56     	; 0x1c4b2 <__udivmodhi4>
   1c4ea:	07 fc       	sbrc	r0, 7
   1c4ec:	05 d0       	rcall	.+10     	; 0x1c4f8 <__divmodhi4_neg2>
   1c4ee:	3e f4       	brtc	.+14     	; 0x1c4fe <__divmodhi4_exit>

0001c4f0 <__divmodhi4_neg1>:
   1c4f0:	90 95       	com	r25
   1c4f2:	81 95       	neg	r24
   1c4f4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4f6:	08 95       	ret

0001c4f8 <__divmodhi4_neg2>:
   1c4f8:	70 95       	com	r23
   1c4fa:	61 95       	neg	r22
   1c4fc:	7f 4f       	sbci	r23, 0xFF	; 255

0001c4fe <__divmodhi4_exit>:
   1c4fe:	08 95       	ret

0001c500 <__udivmodsi4>:
   1c500:	a1 e2       	ldi	r26, 0x21	; 33
   1c502:	1a 2e       	mov	r1, r26
   1c504:	aa 1b       	sub	r26, r26
   1c506:	bb 1b       	sub	r27, r27
   1c508:	fd 01       	movw	r30, r26
   1c50a:	0d c0       	rjmp	.+26     	; 0x1c526 <__udivmodsi4_ep>

0001c50c <__udivmodsi4_loop>:
   1c50c:	aa 1f       	adc	r26, r26
   1c50e:	bb 1f       	adc	r27, r27
   1c510:	ee 1f       	adc	r30, r30
   1c512:	ff 1f       	adc	r31, r31
   1c514:	a2 17       	cp	r26, r18
   1c516:	b3 07       	cpc	r27, r19
   1c518:	e4 07       	cpc	r30, r20
   1c51a:	f5 07       	cpc	r31, r21
   1c51c:	20 f0       	brcs	.+8      	; 0x1c526 <__udivmodsi4_ep>
   1c51e:	a2 1b       	sub	r26, r18
   1c520:	b3 0b       	sbc	r27, r19
   1c522:	e4 0b       	sbc	r30, r20
   1c524:	f5 0b       	sbc	r31, r21

0001c526 <__udivmodsi4_ep>:
   1c526:	66 1f       	adc	r22, r22
   1c528:	77 1f       	adc	r23, r23
   1c52a:	88 1f       	adc	r24, r24
   1c52c:	99 1f       	adc	r25, r25
   1c52e:	1a 94       	dec	r1
   1c530:	69 f7       	brne	.-38     	; 0x1c50c <__udivmodsi4_loop>
   1c532:	60 95       	com	r22
   1c534:	70 95       	com	r23
   1c536:	80 95       	com	r24
   1c538:	90 95       	com	r25
   1c53a:	9b 01       	movw	r18, r22
   1c53c:	ac 01       	movw	r20, r24
   1c53e:	bd 01       	movw	r22, r26
   1c540:	cf 01       	movw	r24, r30
   1c542:	08 95       	ret

0001c544 <__divmodsi4>:
   1c544:	05 2e       	mov	r0, r21
   1c546:	97 fb       	bst	r25, 7
   1c548:	16 f4       	brtc	.+4      	; 0x1c54e <__divmodsi4+0xa>
   1c54a:	00 94       	com	r0
   1c54c:	0f d0       	rcall	.+30     	; 0x1c56c <__negsi2>
   1c54e:	57 fd       	sbrc	r21, 7
   1c550:	05 d0       	rcall	.+10     	; 0x1c55c <__divmodsi4_neg2>
   1c552:	d6 df       	rcall	.-84     	; 0x1c500 <__udivmodsi4>
   1c554:	07 fc       	sbrc	r0, 7
   1c556:	02 d0       	rcall	.+4      	; 0x1c55c <__divmodsi4_neg2>
   1c558:	46 f4       	brtc	.+16     	; 0x1c56a <__divmodsi4_exit>
   1c55a:	08 c0       	rjmp	.+16     	; 0x1c56c <__negsi2>

0001c55c <__divmodsi4_neg2>:
   1c55c:	50 95       	com	r21
   1c55e:	40 95       	com	r20
   1c560:	30 95       	com	r19
   1c562:	21 95       	neg	r18
   1c564:	3f 4f       	sbci	r19, 0xFF	; 255
   1c566:	4f 4f       	sbci	r20, 0xFF	; 255
   1c568:	5f 4f       	sbci	r21, 0xFF	; 255

0001c56a <__divmodsi4_exit>:
   1c56a:	08 95       	ret

0001c56c <__negsi2>:
   1c56c:	90 95       	com	r25
   1c56e:	80 95       	com	r24
   1c570:	70 95       	com	r23
   1c572:	61 95       	neg	r22
   1c574:	7f 4f       	sbci	r23, 0xFF	; 255
   1c576:	8f 4f       	sbci	r24, 0xFF	; 255
   1c578:	9f 4f       	sbci	r25, 0xFF	; 255
   1c57a:	08 95       	ret

0001c57c <__tablejump2__>:
   1c57c:	ee 0f       	add	r30, r30
   1c57e:	ff 1f       	adc	r31, r31
   1c580:	00 24       	eor	r0, r0
   1c582:	00 1c       	adc	r0, r0
   1c584:	0b be       	out	0x3b, r0	; 59
   1c586:	07 90       	elpm	r0, Z+
   1c588:	f6 91       	elpm	r31, Z
   1c58a:	e0 2d       	mov	r30, r0
   1c58c:	09 94       	ijmp

0001c58e <__usmulhisi3>:
   1c58e:	6f d0       	rcall	.+222    	; 0x1c66e <__umulhisi3>

0001c590 <__usmulhisi3_tail>:
   1c590:	b7 ff       	sbrs	r27, 7
   1c592:	08 95       	ret
   1c594:	82 1b       	sub	r24, r18
   1c596:	93 0b       	sbc	r25, r19
   1c598:	08 95       	ret

0001c59a <__muluhisi3>:
   1c59a:	69 d0       	rcall	.+210    	; 0x1c66e <__umulhisi3>
   1c59c:	a5 9f       	mul	r26, r21
   1c59e:	90 0d       	add	r25, r0
   1c5a0:	b4 9f       	mul	r27, r20
   1c5a2:	90 0d       	add	r25, r0
   1c5a4:	a4 9f       	mul	r26, r20
   1c5a6:	80 0d       	add	r24, r0
   1c5a8:	91 1d       	adc	r25, r1
   1c5aa:	11 24       	eor	r1, r1
   1c5ac:	08 95       	ret

0001c5ae <__mulshisi3>:
   1c5ae:	b7 ff       	sbrs	r27, 7
   1c5b0:	f4 cf       	rjmp	.-24     	; 0x1c59a <__muluhisi3>

0001c5b2 <__mulohisi3>:
   1c5b2:	f3 df       	rcall	.-26     	; 0x1c59a <__muluhisi3>
   1c5b4:	82 1b       	sub	r24, r18
   1c5b6:	93 0b       	sbc	r25, r19
   1c5b8:	08 95       	ret

0001c5ba <__negdi2>:
   1c5ba:	60 95       	com	r22
   1c5bc:	70 95       	com	r23
   1c5be:	80 95       	com	r24
   1c5c0:	90 95       	com	r25
   1c5c2:	30 95       	com	r19
   1c5c4:	40 95       	com	r20
   1c5c6:	50 95       	com	r21
   1c5c8:	21 95       	neg	r18
   1c5ca:	3f 4f       	sbci	r19, 0xFF	; 255
   1c5cc:	4f 4f       	sbci	r20, 0xFF	; 255
   1c5ce:	5f 4f       	sbci	r21, 0xFF	; 255
   1c5d0:	6f 4f       	sbci	r22, 0xFF	; 255
   1c5d2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5d4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c5d6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5d8:	08 95       	ret

0001c5da <__prologue_saves__>:
   1c5da:	2f 92       	push	r2
   1c5dc:	3f 92       	push	r3
   1c5de:	4f 92       	push	r4
   1c5e0:	5f 92       	push	r5
   1c5e2:	6f 92       	push	r6
   1c5e4:	7f 92       	push	r7
   1c5e6:	8f 92       	push	r8
   1c5e8:	9f 92       	push	r9
   1c5ea:	af 92       	push	r10
   1c5ec:	bf 92       	push	r11
   1c5ee:	cf 92       	push	r12
   1c5f0:	df 92       	push	r13
   1c5f2:	ef 92       	push	r14
   1c5f4:	ff 92       	push	r15
   1c5f6:	0f 93       	push	r16
   1c5f8:	1f 93       	push	r17
   1c5fa:	cf 93       	push	r28
   1c5fc:	df 93       	push	r29
   1c5fe:	cd b7       	in	r28, 0x3d	; 61
   1c600:	de b7       	in	r29, 0x3e	; 62
   1c602:	ca 1b       	sub	r28, r26
   1c604:	db 0b       	sbc	r29, r27
   1c606:	0f b6       	in	r0, 0x3f	; 63
   1c608:	f8 94       	cli
   1c60a:	de bf       	out	0x3e, r29	; 62
   1c60c:	0f be       	out	0x3f, r0	; 63
   1c60e:	cd bf       	out	0x3d, r28	; 61
   1c610:	09 94       	ijmp

0001c612 <__epilogue_restores__>:
   1c612:	2a 88       	ldd	r2, Y+18	; 0x12
   1c614:	39 88       	ldd	r3, Y+17	; 0x11
   1c616:	48 88       	ldd	r4, Y+16	; 0x10
   1c618:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c61a:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c61c:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c61e:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c620:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c622:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c624:	b9 84       	ldd	r11, Y+9	; 0x09
   1c626:	c8 84       	ldd	r12, Y+8	; 0x08
   1c628:	df 80       	ldd	r13, Y+7	; 0x07
   1c62a:	ee 80       	ldd	r14, Y+6	; 0x06
   1c62c:	fd 80       	ldd	r15, Y+5	; 0x05
   1c62e:	0c 81       	ldd	r16, Y+4	; 0x04
   1c630:	1b 81       	ldd	r17, Y+3	; 0x03
   1c632:	aa 81       	ldd	r26, Y+2	; 0x02
   1c634:	b9 81       	ldd	r27, Y+1	; 0x01
   1c636:	ce 0f       	add	r28, r30
   1c638:	d1 1d       	adc	r29, r1
   1c63a:	0f b6       	in	r0, 0x3f	; 63
   1c63c:	f8 94       	cli
   1c63e:	de bf       	out	0x3e, r29	; 62
   1c640:	0f be       	out	0x3f, r0	; 63
   1c642:	cd bf       	out	0x3d, r28	; 61
   1c644:	ed 01       	movw	r28, r26
   1c646:	08 95       	ret

0001c648 <__xload_1>:
   1c648:	57 fd       	sbrc	r21, 7
   1c64a:	03 c0       	rjmp	.+6      	; 0x1c652 <__xload_1+0xa>
   1c64c:	5b bf       	out	0x3b, r21	; 59
   1c64e:	67 91       	elpm	r22, Z+
   1c650:	08 95       	ret
   1c652:	60 81       	ld	r22, Z
   1c654:	08 95       	ret

0001c656 <__cmpdi2_s8>:
   1c656:	00 24       	eor	r0, r0
   1c658:	a7 fd       	sbrc	r26, 7
   1c65a:	00 94       	com	r0
   1c65c:	2a 17       	cp	r18, r26
   1c65e:	30 05       	cpc	r19, r0
   1c660:	40 05       	cpc	r20, r0
   1c662:	50 05       	cpc	r21, r0
   1c664:	60 05       	cpc	r22, r0
   1c666:	70 05       	cpc	r23, r0
   1c668:	80 05       	cpc	r24, r0
   1c66a:	90 05       	cpc	r25, r0
   1c66c:	08 95       	ret

0001c66e <__umulhisi3>:
   1c66e:	a2 9f       	mul	r26, r18
   1c670:	b0 01       	movw	r22, r0
   1c672:	b3 9f       	mul	r27, r19
   1c674:	c0 01       	movw	r24, r0
   1c676:	a3 9f       	mul	r26, r19
   1c678:	70 0d       	add	r23, r0
   1c67a:	81 1d       	adc	r24, r1
   1c67c:	11 24       	eor	r1, r1
   1c67e:	91 1d       	adc	r25, r1
   1c680:	b2 9f       	mul	r27, r18
   1c682:	70 0d       	add	r23, r0
   1c684:	81 1d       	adc	r24, r1
   1c686:	11 24       	eor	r1, r1
   1c688:	91 1d       	adc	r25, r1
   1c68a:	08 95       	ret

0001c68c <__subsf3>:
   1c68c:	50 58       	subi	r21, 0x80	; 128

0001c68e <__addsf3>:
   1c68e:	bb 27       	eor	r27, r27
   1c690:	aa 27       	eor	r26, r26
   1c692:	0e d0       	rcall	.+28     	; 0x1c6b0 <__addsf3x>
   1c694:	75 c1       	rjmp	.+746    	; 0x1c980 <__fp_round>
   1c696:	66 d1       	rcall	.+716    	; 0x1c964 <__fp_pscA>
   1c698:	30 f0       	brcs	.+12     	; 0x1c6a6 <__addsf3+0x18>
   1c69a:	6b d1       	rcall	.+726    	; 0x1c972 <__fp_pscB>
   1c69c:	20 f0       	brcs	.+8      	; 0x1c6a6 <__addsf3+0x18>
   1c69e:	31 f4       	brne	.+12     	; 0x1c6ac <__addsf3+0x1e>
   1c6a0:	9f 3f       	cpi	r25, 0xFF	; 255
   1c6a2:	11 f4       	brne	.+4      	; 0x1c6a8 <__addsf3+0x1a>
   1c6a4:	1e f4       	brtc	.+6      	; 0x1c6ac <__addsf3+0x1e>
   1c6a6:	5b c1       	rjmp	.+694    	; 0x1c95e <__fp_nan>
   1c6a8:	0e f4       	brtc	.+2      	; 0x1c6ac <__addsf3+0x1e>
   1c6aa:	e0 95       	com	r30
   1c6ac:	e7 fb       	bst	r30, 7
   1c6ae:	51 c1       	rjmp	.+674    	; 0x1c952 <__fp_inf>

0001c6b0 <__addsf3x>:
   1c6b0:	e9 2f       	mov	r30, r25
   1c6b2:	77 d1       	rcall	.+750    	; 0x1c9a2 <__fp_split3>
   1c6b4:	80 f3       	brcs	.-32     	; 0x1c696 <__addsf3+0x8>
   1c6b6:	ba 17       	cp	r27, r26
   1c6b8:	62 07       	cpc	r22, r18
   1c6ba:	73 07       	cpc	r23, r19
   1c6bc:	84 07       	cpc	r24, r20
   1c6be:	95 07       	cpc	r25, r21
   1c6c0:	18 f0       	brcs	.+6      	; 0x1c6c8 <__addsf3x+0x18>
   1c6c2:	71 f4       	brne	.+28     	; 0x1c6e0 <__addsf3x+0x30>
   1c6c4:	9e f5       	brtc	.+102    	; 0x1c72c <__addsf3x+0x7c>
   1c6c6:	8f c1       	rjmp	.+798    	; 0x1c9e6 <__fp_zero>
   1c6c8:	0e f4       	brtc	.+2      	; 0x1c6cc <__addsf3x+0x1c>
   1c6ca:	e0 95       	com	r30
   1c6cc:	0b 2e       	mov	r0, r27
   1c6ce:	ba 2f       	mov	r27, r26
   1c6d0:	a0 2d       	mov	r26, r0
   1c6d2:	0b 01       	movw	r0, r22
   1c6d4:	b9 01       	movw	r22, r18
   1c6d6:	90 01       	movw	r18, r0
   1c6d8:	0c 01       	movw	r0, r24
   1c6da:	ca 01       	movw	r24, r20
   1c6dc:	a0 01       	movw	r20, r0
   1c6de:	11 24       	eor	r1, r1
   1c6e0:	ff 27       	eor	r31, r31
   1c6e2:	59 1b       	sub	r21, r25
   1c6e4:	99 f0       	breq	.+38     	; 0x1c70c <__addsf3x+0x5c>
   1c6e6:	59 3f       	cpi	r21, 0xF9	; 249
   1c6e8:	50 f4       	brcc	.+20     	; 0x1c6fe <__addsf3x+0x4e>
   1c6ea:	50 3e       	cpi	r21, 0xE0	; 224
   1c6ec:	68 f1       	brcs	.+90     	; 0x1c748 <__addsf3x+0x98>
   1c6ee:	1a 16       	cp	r1, r26
   1c6f0:	f0 40       	sbci	r31, 0x00	; 0
   1c6f2:	a2 2f       	mov	r26, r18
   1c6f4:	23 2f       	mov	r18, r19
   1c6f6:	34 2f       	mov	r19, r20
   1c6f8:	44 27       	eor	r20, r20
   1c6fa:	58 5f       	subi	r21, 0xF8	; 248
   1c6fc:	f3 cf       	rjmp	.-26     	; 0x1c6e4 <__addsf3x+0x34>
   1c6fe:	46 95       	lsr	r20
   1c700:	37 95       	ror	r19
   1c702:	27 95       	ror	r18
   1c704:	a7 95       	ror	r26
   1c706:	f0 40       	sbci	r31, 0x00	; 0
   1c708:	53 95       	inc	r21
   1c70a:	c9 f7       	brne	.-14     	; 0x1c6fe <__addsf3x+0x4e>
   1c70c:	7e f4       	brtc	.+30     	; 0x1c72c <__addsf3x+0x7c>
   1c70e:	1f 16       	cp	r1, r31
   1c710:	ba 0b       	sbc	r27, r26
   1c712:	62 0b       	sbc	r22, r18
   1c714:	73 0b       	sbc	r23, r19
   1c716:	84 0b       	sbc	r24, r20
   1c718:	ba f0       	brmi	.+46     	; 0x1c748 <__addsf3x+0x98>
   1c71a:	91 50       	subi	r25, 0x01	; 1
   1c71c:	a1 f0       	breq	.+40     	; 0x1c746 <__addsf3x+0x96>
   1c71e:	ff 0f       	add	r31, r31
   1c720:	bb 1f       	adc	r27, r27
   1c722:	66 1f       	adc	r22, r22
   1c724:	77 1f       	adc	r23, r23
   1c726:	88 1f       	adc	r24, r24
   1c728:	c2 f7       	brpl	.-16     	; 0x1c71a <__addsf3x+0x6a>
   1c72a:	0e c0       	rjmp	.+28     	; 0x1c748 <__addsf3x+0x98>
   1c72c:	ba 0f       	add	r27, r26
   1c72e:	62 1f       	adc	r22, r18
   1c730:	73 1f       	adc	r23, r19
   1c732:	84 1f       	adc	r24, r20
   1c734:	48 f4       	brcc	.+18     	; 0x1c748 <__addsf3x+0x98>
   1c736:	87 95       	ror	r24
   1c738:	77 95       	ror	r23
   1c73a:	67 95       	ror	r22
   1c73c:	b7 95       	ror	r27
   1c73e:	f7 95       	ror	r31
   1c740:	9e 3f       	cpi	r25, 0xFE	; 254
   1c742:	08 f0       	brcs	.+2      	; 0x1c746 <__addsf3x+0x96>
   1c744:	b3 cf       	rjmp	.-154    	; 0x1c6ac <__addsf3+0x1e>
   1c746:	93 95       	inc	r25
   1c748:	88 0f       	add	r24, r24
   1c74a:	08 f0       	brcs	.+2      	; 0x1c74e <__addsf3x+0x9e>
   1c74c:	99 27       	eor	r25, r25
   1c74e:	ee 0f       	add	r30, r30
   1c750:	97 95       	ror	r25
   1c752:	87 95       	ror	r24
   1c754:	08 95       	ret

0001c756 <__cmpsf2>:
   1c756:	d9 d0       	rcall	.+434    	; 0x1c90a <__fp_cmp>
   1c758:	08 f4       	brcc	.+2      	; 0x1c75c <__cmpsf2+0x6>
   1c75a:	81 e0       	ldi	r24, 0x01	; 1
   1c75c:	08 95       	ret

0001c75e <__divsf3>:
   1c75e:	0c d0       	rcall	.+24     	; 0x1c778 <__divsf3x>
   1c760:	0f c1       	rjmp	.+542    	; 0x1c980 <__fp_round>
   1c762:	07 d1       	rcall	.+526    	; 0x1c972 <__fp_pscB>
   1c764:	40 f0       	brcs	.+16     	; 0x1c776 <__divsf3+0x18>
   1c766:	fe d0       	rcall	.+508    	; 0x1c964 <__fp_pscA>
   1c768:	30 f0       	brcs	.+12     	; 0x1c776 <__divsf3+0x18>
   1c76a:	21 f4       	brne	.+8      	; 0x1c774 <__divsf3+0x16>
   1c76c:	5f 3f       	cpi	r21, 0xFF	; 255
   1c76e:	19 f0       	breq	.+6      	; 0x1c776 <__divsf3+0x18>
   1c770:	f0 c0       	rjmp	.+480    	; 0x1c952 <__fp_inf>
   1c772:	51 11       	cpse	r21, r1
   1c774:	39 c1       	rjmp	.+626    	; 0x1c9e8 <__fp_szero>
   1c776:	f3 c0       	rjmp	.+486    	; 0x1c95e <__fp_nan>

0001c778 <__divsf3x>:
   1c778:	14 d1       	rcall	.+552    	; 0x1c9a2 <__fp_split3>
   1c77a:	98 f3       	brcs	.-26     	; 0x1c762 <__divsf3+0x4>

0001c77c <__divsf3_pse>:
   1c77c:	99 23       	and	r25, r25
   1c77e:	c9 f3       	breq	.-14     	; 0x1c772 <__divsf3+0x14>
   1c780:	55 23       	and	r21, r21
   1c782:	b1 f3       	breq	.-20     	; 0x1c770 <__divsf3+0x12>
   1c784:	95 1b       	sub	r25, r21
   1c786:	55 0b       	sbc	r21, r21
   1c788:	bb 27       	eor	r27, r27
   1c78a:	aa 27       	eor	r26, r26
   1c78c:	62 17       	cp	r22, r18
   1c78e:	73 07       	cpc	r23, r19
   1c790:	84 07       	cpc	r24, r20
   1c792:	38 f0       	brcs	.+14     	; 0x1c7a2 <__divsf3_pse+0x26>
   1c794:	9f 5f       	subi	r25, 0xFF	; 255
   1c796:	5f 4f       	sbci	r21, 0xFF	; 255
   1c798:	22 0f       	add	r18, r18
   1c79a:	33 1f       	adc	r19, r19
   1c79c:	44 1f       	adc	r20, r20
   1c79e:	aa 1f       	adc	r26, r26
   1c7a0:	a9 f3       	breq	.-22     	; 0x1c78c <__divsf3_pse+0x10>
   1c7a2:	33 d0       	rcall	.+102    	; 0x1c80a <__divsf3_pse+0x8e>
   1c7a4:	0e 2e       	mov	r0, r30
   1c7a6:	3a f0       	brmi	.+14     	; 0x1c7b6 <__divsf3_pse+0x3a>
   1c7a8:	e0 e8       	ldi	r30, 0x80	; 128
   1c7aa:	30 d0       	rcall	.+96     	; 0x1c80c <__divsf3_pse+0x90>
   1c7ac:	91 50       	subi	r25, 0x01	; 1
   1c7ae:	50 40       	sbci	r21, 0x00	; 0
   1c7b0:	e6 95       	lsr	r30
   1c7b2:	00 1c       	adc	r0, r0
   1c7b4:	ca f7       	brpl	.-14     	; 0x1c7a8 <__divsf3_pse+0x2c>
   1c7b6:	29 d0       	rcall	.+82     	; 0x1c80a <__divsf3_pse+0x8e>
   1c7b8:	fe 2f       	mov	r31, r30
   1c7ba:	27 d0       	rcall	.+78     	; 0x1c80a <__divsf3_pse+0x8e>
   1c7bc:	66 0f       	add	r22, r22
   1c7be:	77 1f       	adc	r23, r23
   1c7c0:	88 1f       	adc	r24, r24
   1c7c2:	bb 1f       	adc	r27, r27
   1c7c4:	26 17       	cp	r18, r22
   1c7c6:	37 07       	cpc	r19, r23
   1c7c8:	48 07       	cpc	r20, r24
   1c7ca:	ab 07       	cpc	r26, r27
   1c7cc:	b0 e8       	ldi	r27, 0x80	; 128
   1c7ce:	09 f0       	breq	.+2      	; 0x1c7d2 <__divsf3_pse+0x56>
   1c7d0:	bb 0b       	sbc	r27, r27
   1c7d2:	80 2d       	mov	r24, r0
   1c7d4:	bf 01       	movw	r22, r30
   1c7d6:	ff 27       	eor	r31, r31
   1c7d8:	93 58       	subi	r25, 0x83	; 131
   1c7da:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7dc:	2a f0       	brmi	.+10     	; 0x1c7e8 <__divsf3_pse+0x6c>
   1c7de:	9e 3f       	cpi	r25, 0xFE	; 254
   1c7e0:	51 05       	cpc	r21, r1
   1c7e2:	68 f0       	brcs	.+26     	; 0x1c7fe <__divsf3_pse+0x82>
   1c7e4:	b6 c0       	rjmp	.+364    	; 0x1c952 <__fp_inf>
   1c7e6:	00 c1       	rjmp	.+512    	; 0x1c9e8 <__fp_szero>
   1c7e8:	5f 3f       	cpi	r21, 0xFF	; 255
   1c7ea:	ec f3       	brlt	.-6      	; 0x1c7e6 <__divsf3_pse+0x6a>
   1c7ec:	98 3e       	cpi	r25, 0xE8	; 232
   1c7ee:	dc f3       	brlt	.-10     	; 0x1c7e6 <__divsf3_pse+0x6a>
   1c7f0:	86 95       	lsr	r24
   1c7f2:	77 95       	ror	r23
   1c7f4:	67 95       	ror	r22
   1c7f6:	b7 95       	ror	r27
   1c7f8:	f7 95       	ror	r31
   1c7fa:	9f 5f       	subi	r25, 0xFF	; 255
   1c7fc:	c9 f7       	brne	.-14     	; 0x1c7f0 <__divsf3_pse+0x74>
   1c7fe:	88 0f       	add	r24, r24
   1c800:	91 1d       	adc	r25, r1
   1c802:	96 95       	lsr	r25
   1c804:	87 95       	ror	r24
   1c806:	97 f9       	bld	r25, 7
   1c808:	08 95       	ret
   1c80a:	e1 e0       	ldi	r30, 0x01	; 1
   1c80c:	66 0f       	add	r22, r22
   1c80e:	77 1f       	adc	r23, r23
   1c810:	88 1f       	adc	r24, r24
   1c812:	bb 1f       	adc	r27, r27
   1c814:	62 17       	cp	r22, r18
   1c816:	73 07       	cpc	r23, r19
   1c818:	84 07       	cpc	r24, r20
   1c81a:	ba 07       	cpc	r27, r26
   1c81c:	20 f0       	brcs	.+8      	; 0x1c826 <__divsf3_pse+0xaa>
   1c81e:	62 1b       	sub	r22, r18
   1c820:	73 0b       	sbc	r23, r19
   1c822:	84 0b       	sbc	r24, r20
   1c824:	ba 0b       	sbc	r27, r26
   1c826:	ee 1f       	adc	r30, r30
   1c828:	88 f7       	brcc	.-30     	; 0x1c80c <__divsf3_pse+0x90>
   1c82a:	e0 95       	com	r30
   1c82c:	08 95       	ret

0001c82e <__fixsfsi>:
   1c82e:	04 d0       	rcall	.+8      	; 0x1c838 <__fixunssfsi>
   1c830:	68 94       	set
   1c832:	b1 11       	cpse	r27, r1
   1c834:	d9 c0       	rjmp	.+434    	; 0x1c9e8 <__fp_szero>
   1c836:	08 95       	ret

0001c838 <__fixunssfsi>:
   1c838:	bc d0       	rcall	.+376    	; 0x1c9b2 <__fp_splitA>
   1c83a:	88 f0       	brcs	.+34     	; 0x1c85e <__fixunssfsi+0x26>
   1c83c:	9f 57       	subi	r25, 0x7F	; 127
   1c83e:	90 f0       	brcs	.+36     	; 0x1c864 <__fixunssfsi+0x2c>
   1c840:	b9 2f       	mov	r27, r25
   1c842:	99 27       	eor	r25, r25
   1c844:	b7 51       	subi	r27, 0x17	; 23
   1c846:	a0 f0       	brcs	.+40     	; 0x1c870 <__fixunssfsi+0x38>
   1c848:	d1 f0       	breq	.+52     	; 0x1c87e <__fixunssfsi+0x46>
   1c84a:	66 0f       	add	r22, r22
   1c84c:	77 1f       	adc	r23, r23
   1c84e:	88 1f       	adc	r24, r24
   1c850:	99 1f       	adc	r25, r25
   1c852:	1a f0       	brmi	.+6      	; 0x1c85a <__fixunssfsi+0x22>
   1c854:	ba 95       	dec	r27
   1c856:	c9 f7       	brne	.-14     	; 0x1c84a <__fixunssfsi+0x12>
   1c858:	12 c0       	rjmp	.+36     	; 0x1c87e <__fixunssfsi+0x46>
   1c85a:	b1 30       	cpi	r27, 0x01	; 1
   1c85c:	81 f0       	breq	.+32     	; 0x1c87e <__fixunssfsi+0x46>
   1c85e:	c3 d0       	rcall	.+390    	; 0x1c9e6 <__fp_zero>
   1c860:	b1 e0       	ldi	r27, 0x01	; 1
   1c862:	08 95       	ret
   1c864:	c0 c0       	rjmp	.+384    	; 0x1c9e6 <__fp_zero>
   1c866:	67 2f       	mov	r22, r23
   1c868:	78 2f       	mov	r23, r24
   1c86a:	88 27       	eor	r24, r24
   1c86c:	b8 5f       	subi	r27, 0xF8	; 248
   1c86e:	39 f0       	breq	.+14     	; 0x1c87e <__fixunssfsi+0x46>
   1c870:	b9 3f       	cpi	r27, 0xF9	; 249
   1c872:	cc f3       	brlt	.-14     	; 0x1c866 <__fixunssfsi+0x2e>
   1c874:	86 95       	lsr	r24
   1c876:	77 95       	ror	r23
   1c878:	67 95       	ror	r22
   1c87a:	b3 95       	inc	r27
   1c87c:	d9 f7       	brne	.-10     	; 0x1c874 <__fixunssfsi+0x3c>
   1c87e:	3e f4       	brtc	.+14     	; 0x1c88e <__fixunssfsi+0x56>
   1c880:	90 95       	com	r25
   1c882:	80 95       	com	r24
   1c884:	70 95       	com	r23
   1c886:	61 95       	neg	r22
   1c888:	7f 4f       	sbci	r23, 0xFF	; 255
   1c88a:	8f 4f       	sbci	r24, 0xFF	; 255
   1c88c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c88e:	08 95       	ret

0001c890 <__floatunsisf>:
   1c890:	e8 94       	clt
   1c892:	09 c0       	rjmp	.+18     	; 0x1c8a6 <__floatsisf+0x12>

0001c894 <__floatsisf>:
   1c894:	97 fb       	bst	r25, 7
   1c896:	3e f4       	brtc	.+14     	; 0x1c8a6 <__floatsisf+0x12>
   1c898:	90 95       	com	r25
   1c89a:	80 95       	com	r24
   1c89c:	70 95       	com	r23
   1c89e:	61 95       	neg	r22
   1c8a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8a2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c8a4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8a6:	99 23       	and	r25, r25
   1c8a8:	a9 f0       	breq	.+42     	; 0x1c8d4 <__floatsisf+0x40>
   1c8aa:	f9 2f       	mov	r31, r25
   1c8ac:	96 e9       	ldi	r25, 0x96	; 150
   1c8ae:	bb 27       	eor	r27, r27
   1c8b0:	93 95       	inc	r25
   1c8b2:	f6 95       	lsr	r31
   1c8b4:	87 95       	ror	r24
   1c8b6:	77 95       	ror	r23
   1c8b8:	67 95       	ror	r22
   1c8ba:	b7 95       	ror	r27
   1c8bc:	f1 11       	cpse	r31, r1
   1c8be:	f8 cf       	rjmp	.-16     	; 0x1c8b0 <__floatsisf+0x1c>
   1c8c0:	fa f4       	brpl	.+62     	; 0x1c900 <__floatsisf+0x6c>
   1c8c2:	bb 0f       	add	r27, r27
   1c8c4:	11 f4       	brne	.+4      	; 0x1c8ca <__floatsisf+0x36>
   1c8c6:	60 ff       	sbrs	r22, 0
   1c8c8:	1b c0       	rjmp	.+54     	; 0x1c900 <__floatsisf+0x6c>
   1c8ca:	6f 5f       	subi	r22, 0xFF	; 255
   1c8cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8ce:	8f 4f       	sbci	r24, 0xFF	; 255
   1c8d0:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8d2:	16 c0       	rjmp	.+44     	; 0x1c900 <__floatsisf+0x6c>
   1c8d4:	88 23       	and	r24, r24
   1c8d6:	11 f0       	breq	.+4      	; 0x1c8dc <__floatsisf+0x48>
   1c8d8:	96 e9       	ldi	r25, 0x96	; 150
   1c8da:	11 c0       	rjmp	.+34     	; 0x1c8fe <__floatsisf+0x6a>
   1c8dc:	77 23       	and	r23, r23
   1c8de:	21 f0       	breq	.+8      	; 0x1c8e8 <__floatsisf+0x54>
   1c8e0:	9e e8       	ldi	r25, 0x8E	; 142
   1c8e2:	87 2f       	mov	r24, r23
   1c8e4:	76 2f       	mov	r23, r22
   1c8e6:	05 c0       	rjmp	.+10     	; 0x1c8f2 <__floatsisf+0x5e>
   1c8e8:	66 23       	and	r22, r22
   1c8ea:	71 f0       	breq	.+28     	; 0x1c908 <__floatsisf+0x74>
   1c8ec:	96 e8       	ldi	r25, 0x86	; 134
   1c8ee:	86 2f       	mov	r24, r22
   1c8f0:	70 e0       	ldi	r23, 0x00	; 0
   1c8f2:	60 e0       	ldi	r22, 0x00	; 0
   1c8f4:	2a f0       	brmi	.+10     	; 0x1c900 <__floatsisf+0x6c>
   1c8f6:	9a 95       	dec	r25
   1c8f8:	66 0f       	add	r22, r22
   1c8fa:	77 1f       	adc	r23, r23
   1c8fc:	88 1f       	adc	r24, r24
   1c8fe:	da f7       	brpl	.-10     	; 0x1c8f6 <__floatsisf+0x62>
   1c900:	88 0f       	add	r24, r24
   1c902:	96 95       	lsr	r25
   1c904:	87 95       	ror	r24
   1c906:	97 f9       	bld	r25, 7
   1c908:	08 95       	ret

0001c90a <__fp_cmp>:
   1c90a:	99 0f       	add	r25, r25
   1c90c:	00 08       	sbc	r0, r0
   1c90e:	55 0f       	add	r21, r21
   1c910:	aa 0b       	sbc	r26, r26
   1c912:	e0 e8       	ldi	r30, 0x80	; 128
   1c914:	fe ef       	ldi	r31, 0xFE	; 254
   1c916:	16 16       	cp	r1, r22
   1c918:	17 06       	cpc	r1, r23
   1c91a:	e8 07       	cpc	r30, r24
   1c91c:	f9 07       	cpc	r31, r25
   1c91e:	c0 f0       	brcs	.+48     	; 0x1c950 <__fp_cmp+0x46>
   1c920:	12 16       	cp	r1, r18
   1c922:	13 06       	cpc	r1, r19
   1c924:	e4 07       	cpc	r30, r20
   1c926:	f5 07       	cpc	r31, r21
   1c928:	98 f0       	brcs	.+38     	; 0x1c950 <__fp_cmp+0x46>
   1c92a:	62 1b       	sub	r22, r18
   1c92c:	73 0b       	sbc	r23, r19
   1c92e:	84 0b       	sbc	r24, r20
   1c930:	95 0b       	sbc	r25, r21
   1c932:	39 f4       	brne	.+14     	; 0x1c942 <__fp_cmp+0x38>
   1c934:	0a 26       	eor	r0, r26
   1c936:	61 f0       	breq	.+24     	; 0x1c950 <__fp_cmp+0x46>
   1c938:	23 2b       	or	r18, r19
   1c93a:	24 2b       	or	r18, r20
   1c93c:	25 2b       	or	r18, r21
   1c93e:	21 f4       	brne	.+8      	; 0x1c948 <__fp_cmp+0x3e>
   1c940:	08 95       	ret
   1c942:	0a 26       	eor	r0, r26
   1c944:	09 f4       	brne	.+2      	; 0x1c948 <__fp_cmp+0x3e>
   1c946:	a1 40       	sbci	r26, 0x01	; 1
   1c948:	a6 95       	lsr	r26
   1c94a:	8f ef       	ldi	r24, 0xFF	; 255
   1c94c:	81 1d       	adc	r24, r1
   1c94e:	81 1d       	adc	r24, r1
   1c950:	08 95       	ret

0001c952 <__fp_inf>:
   1c952:	97 f9       	bld	r25, 7
   1c954:	9f 67       	ori	r25, 0x7F	; 127
   1c956:	80 e8       	ldi	r24, 0x80	; 128
   1c958:	70 e0       	ldi	r23, 0x00	; 0
   1c95a:	60 e0       	ldi	r22, 0x00	; 0
   1c95c:	08 95       	ret

0001c95e <__fp_nan>:
   1c95e:	9f ef       	ldi	r25, 0xFF	; 255
   1c960:	80 ec       	ldi	r24, 0xC0	; 192
   1c962:	08 95       	ret

0001c964 <__fp_pscA>:
   1c964:	00 24       	eor	r0, r0
   1c966:	0a 94       	dec	r0
   1c968:	16 16       	cp	r1, r22
   1c96a:	17 06       	cpc	r1, r23
   1c96c:	18 06       	cpc	r1, r24
   1c96e:	09 06       	cpc	r0, r25
   1c970:	08 95       	ret

0001c972 <__fp_pscB>:
   1c972:	00 24       	eor	r0, r0
   1c974:	0a 94       	dec	r0
   1c976:	12 16       	cp	r1, r18
   1c978:	13 06       	cpc	r1, r19
   1c97a:	14 06       	cpc	r1, r20
   1c97c:	05 06       	cpc	r0, r21
   1c97e:	08 95       	ret

0001c980 <__fp_round>:
   1c980:	09 2e       	mov	r0, r25
   1c982:	03 94       	inc	r0
   1c984:	00 0c       	add	r0, r0
   1c986:	11 f4       	brne	.+4      	; 0x1c98c <__fp_round+0xc>
   1c988:	88 23       	and	r24, r24
   1c98a:	52 f0       	brmi	.+20     	; 0x1c9a0 <__fp_round+0x20>
   1c98c:	bb 0f       	add	r27, r27
   1c98e:	40 f4       	brcc	.+16     	; 0x1c9a0 <__fp_round+0x20>
   1c990:	bf 2b       	or	r27, r31
   1c992:	11 f4       	brne	.+4      	; 0x1c998 <__fp_round+0x18>
   1c994:	60 ff       	sbrs	r22, 0
   1c996:	04 c0       	rjmp	.+8      	; 0x1c9a0 <__fp_round+0x20>
   1c998:	6f 5f       	subi	r22, 0xFF	; 255
   1c99a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c99c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c99e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9a0:	08 95       	ret

0001c9a2 <__fp_split3>:
   1c9a2:	57 fd       	sbrc	r21, 7
   1c9a4:	90 58       	subi	r25, 0x80	; 128
   1c9a6:	44 0f       	add	r20, r20
   1c9a8:	55 1f       	adc	r21, r21
   1c9aa:	59 f0       	breq	.+22     	; 0x1c9c2 <__fp_splitA+0x10>
   1c9ac:	5f 3f       	cpi	r21, 0xFF	; 255
   1c9ae:	71 f0       	breq	.+28     	; 0x1c9cc <__fp_splitA+0x1a>
   1c9b0:	47 95       	ror	r20

0001c9b2 <__fp_splitA>:
   1c9b2:	88 0f       	add	r24, r24
   1c9b4:	97 fb       	bst	r25, 7
   1c9b6:	99 1f       	adc	r25, r25
   1c9b8:	61 f0       	breq	.+24     	; 0x1c9d2 <__fp_splitA+0x20>
   1c9ba:	9f 3f       	cpi	r25, 0xFF	; 255
   1c9bc:	79 f0       	breq	.+30     	; 0x1c9dc <__fp_splitA+0x2a>
   1c9be:	87 95       	ror	r24
   1c9c0:	08 95       	ret
   1c9c2:	12 16       	cp	r1, r18
   1c9c4:	13 06       	cpc	r1, r19
   1c9c6:	14 06       	cpc	r1, r20
   1c9c8:	55 1f       	adc	r21, r21
   1c9ca:	f2 cf       	rjmp	.-28     	; 0x1c9b0 <__fp_split3+0xe>
   1c9cc:	46 95       	lsr	r20
   1c9ce:	f1 df       	rcall	.-30     	; 0x1c9b2 <__fp_splitA>
   1c9d0:	08 c0       	rjmp	.+16     	; 0x1c9e2 <__fp_splitA+0x30>
   1c9d2:	16 16       	cp	r1, r22
   1c9d4:	17 06       	cpc	r1, r23
   1c9d6:	18 06       	cpc	r1, r24
   1c9d8:	99 1f       	adc	r25, r25
   1c9da:	f1 cf       	rjmp	.-30     	; 0x1c9be <__fp_splitA+0xc>
   1c9dc:	86 95       	lsr	r24
   1c9de:	71 05       	cpc	r23, r1
   1c9e0:	61 05       	cpc	r22, r1
   1c9e2:	08 94       	sec
   1c9e4:	08 95       	ret

0001c9e6 <__fp_zero>:
   1c9e6:	e8 94       	clt

0001c9e8 <__fp_szero>:
   1c9e8:	bb 27       	eor	r27, r27
   1c9ea:	66 27       	eor	r22, r22
   1c9ec:	77 27       	eor	r23, r23
   1c9ee:	cb 01       	movw	r24, r22
   1c9f0:	97 f9       	bld	r25, 7
   1c9f2:	08 95       	ret

0001c9f4 <__gesf2>:
   1c9f4:	8a df       	rcall	.-236    	; 0x1c90a <__fp_cmp>
   1c9f6:	08 f4       	brcc	.+2      	; 0x1c9fa <__gesf2+0x6>
   1c9f8:	8f ef       	ldi	r24, 0xFF	; 255
   1c9fa:	08 95       	ret

0001c9fc <__mulsf3>:
   1c9fc:	0b d0       	rcall	.+22     	; 0x1ca14 <__mulsf3x>
   1c9fe:	c0 cf       	rjmp	.-128    	; 0x1c980 <__fp_round>
   1ca00:	b1 df       	rcall	.-158    	; 0x1c964 <__fp_pscA>
   1ca02:	28 f0       	brcs	.+10     	; 0x1ca0e <__mulsf3+0x12>
   1ca04:	b6 df       	rcall	.-148    	; 0x1c972 <__fp_pscB>
   1ca06:	18 f0       	brcs	.+6      	; 0x1ca0e <__mulsf3+0x12>
   1ca08:	95 23       	and	r25, r21
   1ca0a:	09 f0       	breq	.+2      	; 0x1ca0e <__mulsf3+0x12>
   1ca0c:	a2 cf       	rjmp	.-188    	; 0x1c952 <__fp_inf>
   1ca0e:	a7 cf       	rjmp	.-178    	; 0x1c95e <__fp_nan>
   1ca10:	11 24       	eor	r1, r1
   1ca12:	ea cf       	rjmp	.-44     	; 0x1c9e8 <__fp_szero>

0001ca14 <__mulsf3x>:
   1ca14:	c6 df       	rcall	.-116    	; 0x1c9a2 <__fp_split3>
   1ca16:	a0 f3       	brcs	.-24     	; 0x1ca00 <__mulsf3+0x4>

0001ca18 <__mulsf3_pse>:
   1ca18:	95 9f       	mul	r25, r21
   1ca1a:	d1 f3       	breq	.-12     	; 0x1ca10 <__mulsf3+0x14>
   1ca1c:	95 0f       	add	r25, r21
   1ca1e:	50 e0       	ldi	r21, 0x00	; 0
   1ca20:	55 1f       	adc	r21, r21
   1ca22:	62 9f       	mul	r22, r18
   1ca24:	f0 01       	movw	r30, r0
   1ca26:	72 9f       	mul	r23, r18
   1ca28:	bb 27       	eor	r27, r27
   1ca2a:	f0 0d       	add	r31, r0
   1ca2c:	b1 1d       	adc	r27, r1
   1ca2e:	63 9f       	mul	r22, r19
   1ca30:	aa 27       	eor	r26, r26
   1ca32:	f0 0d       	add	r31, r0
   1ca34:	b1 1d       	adc	r27, r1
   1ca36:	aa 1f       	adc	r26, r26
   1ca38:	64 9f       	mul	r22, r20
   1ca3a:	66 27       	eor	r22, r22
   1ca3c:	b0 0d       	add	r27, r0
   1ca3e:	a1 1d       	adc	r26, r1
   1ca40:	66 1f       	adc	r22, r22
   1ca42:	82 9f       	mul	r24, r18
   1ca44:	22 27       	eor	r18, r18
   1ca46:	b0 0d       	add	r27, r0
   1ca48:	a1 1d       	adc	r26, r1
   1ca4a:	62 1f       	adc	r22, r18
   1ca4c:	73 9f       	mul	r23, r19
   1ca4e:	b0 0d       	add	r27, r0
   1ca50:	a1 1d       	adc	r26, r1
   1ca52:	62 1f       	adc	r22, r18
   1ca54:	83 9f       	mul	r24, r19
   1ca56:	a0 0d       	add	r26, r0
   1ca58:	61 1d       	adc	r22, r1
   1ca5a:	22 1f       	adc	r18, r18
   1ca5c:	74 9f       	mul	r23, r20
   1ca5e:	33 27       	eor	r19, r19
   1ca60:	a0 0d       	add	r26, r0
   1ca62:	61 1d       	adc	r22, r1
   1ca64:	23 1f       	adc	r18, r19
   1ca66:	84 9f       	mul	r24, r20
   1ca68:	60 0d       	add	r22, r0
   1ca6a:	21 1d       	adc	r18, r1
   1ca6c:	82 2f       	mov	r24, r18
   1ca6e:	76 2f       	mov	r23, r22
   1ca70:	6a 2f       	mov	r22, r26
   1ca72:	11 24       	eor	r1, r1
   1ca74:	9f 57       	subi	r25, 0x7F	; 127
   1ca76:	50 40       	sbci	r21, 0x00	; 0
   1ca78:	8a f0       	brmi	.+34     	; 0x1ca9c <__mulsf3_pse+0x84>
   1ca7a:	e1 f0       	breq	.+56     	; 0x1cab4 <__mulsf3_pse+0x9c>
   1ca7c:	88 23       	and	r24, r24
   1ca7e:	4a f0       	brmi	.+18     	; 0x1ca92 <__mulsf3_pse+0x7a>
   1ca80:	ee 0f       	add	r30, r30
   1ca82:	ff 1f       	adc	r31, r31
   1ca84:	bb 1f       	adc	r27, r27
   1ca86:	66 1f       	adc	r22, r22
   1ca88:	77 1f       	adc	r23, r23
   1ca8a:	88 1f       	adc	r24, r24
   1ca8c:	91 50       	subi	r25, 0x01	; 1
   1ca8e:	50 40       	sbci	r21, 0x00	; 0
   1ca90:	a9 f7       	brne	.-22     	; 0x1ca7c <__mulsf3_pse+0x64>
   1ca92:	9e 3f       	cpi	r25, 0xFE	; 254
   1ca94:	51 05       	cpc	r21, r1
   1ca96:	70 f0       	brcs	.+28     	; 0x1cab4 <__mulsf3_pse+0x9c>
   1ca98:	5c cf       	rjmp	.-328    	; 0x1c952 <__fp_inf>
   1ca9a:	a6 cf       	rjmp	.-180    	; 0x1c9e8 <__fp_szero>
   1ca9c:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca9e:	ec f3       	brlt	.-6      	; 0x1ca9a <__mulsf3_pse+0x82>
   1caa0:	98 3e       	cpi	r25, 0xE8	; 232
   1caa2:	dc f3       	brlt	.-10     	; 0x1ca9a <__mulsf3_pse+0x82>
   1caa4:	86 95       	lsr	r24
   1caa6:	77 95       	ror	r23
   1caa8:	67 95       	ror	r22
   1caaa:	b7 95       	ror	r27
   1caac:	f7 95       	ror	r31
   1caae:	e7 95       	ror	r30
   1cab0:	9f 5f       	subi	r25, 0xFF	; 255
   1cab2:	c1 f7       	brne	.-16     	; 0x1caa4 <__mulsf3_pse+0x8c>
   1cab4:	fe 2b       	or	r31, r30
   1cab6:	88 0f       	add	r24, r24
   1cab8:	91 1d       	adc	r25, r1
   1caba:	96 95       	lsr	r25
   1cabc:	87 95       	ror	r24
   1cabe:	97 f9       	bld	r25, 7
   1cac0:	08 95       	ret

0001cac2 <round>:
   1cac2:	77 df       	rcall	.-274    	; 0x1c9b2 <__fp_splitA>
   1cac4:	e0 f0       	brcs	.+56     	; 0x1cafe <round+0x3c>
   1cac6:	9e 37       	cpi	r25, 0x7E	; 126
   1cac8:	d8 f0       	brcs	.+54     	; 0x1cb00 <round+0x3e>
   1caca:	96 39       	cpi	r25, 0x96	; 150
   1cacc:	b8 f4       	brcc	.+46     	; 0x1cafc <round+0x3a>
   1cace:	9e 38       	cpi	r25, 0x8E	; 142
   1cad0:	48 f4       	brcc	.+18     	; 0x1cae4 <round+0x22>
   1cad2:	67 2f       	mov	r22, r23
   1cad4:	78 2f       	mov	r23, r24
   1cad6:	88 27       	eor	r24, r24
   1cad8:	98 5f       	subi	r25, 0xF8	; 248
   1cada:	f9 cf       	rjmp	.-14     	; 0x1cace <round+0xc>
   1cadc:	86 95       	lsr	r24
   1cade:	77 95       	ror	r23
   1cae0:	67 95       	ror	r22
   1cae2:	93 95       	inc	r25
   1cae4:	95 39       	cpi	r25, 0x95	; 149
   1cae6:	d0 f3       	brcs	.-12     	; 0x1cadc <round+0x1a>
   1cae8:	b6 2f       	mov	r27, r22
   1caea:	b1 70       	andi	r27, 0x01	; 1
   1caec:	6b 0f       	add	r22, r27
   1caee:	71 1d       	adc	r23, r1
   1caf0:	81 1d       	adc	r24, r1
   1caf2:	20 f4       	brcc	.+8      	; 0x1cafc <round+0x3a>
   1caf4:	87 95       	ror	r24
   1caf6:	77 95       	ror	r23
   1caf8:	67 95       	ror	r22
   1cafa:	93 95       	inc	r25
   1cafc:	02 c0       	rjmp	.+4      	; 0x1cb02 <__fp_mintl>
   1cafe:	1c c0       	rjmp	.+56     	; 0x1cb38 <__fp_mpack>
   1cb00:	73 cf       	rjmp	.-282    	; 0x1c9e8 <__fp_szero>

0001cb02 <__fp_mintl>:
   1cb02:	88 23       	and	r24, r24
   1cb04:	71 f4       	brne	.+28     	; 0x1cb22 <__fp_mintl+0x20>
   1cb06:	77 23       	and	r23, r23
   1cb08:	21 f0       	breq	.+8      	; 0x1cb12 <__fp_mintl+0x10>
   1cb0a:	98 50       	subi	r25, 0x08	; 8
   1cb0c:	87 2b       	or	r24, r23
   1cb0e:	76 2f       	mov	r23, r22
   1cb10:	07 c0       	rjmp	.+14     	; 0x1cb20 <__fp_mintl+0x1e>
   1cb12:	66 23       	and	r22, r22
   1cb14:	11 f4       	brne	.+4      	; 0x1cb1a <__fp_mintl+0x18>
   1cb16:	99 27       	eor	r25, r25
   1cb18:	0d c0       	rjmp	.+26     	; 0x1cb34 <__fp_mintl+0x32>
   1cb1a:	90 51       	subi	r25, 0x10	; 16
   1cb1c:	86 2b       	or	r24, r22
   1cb1e:	70 e0       	ldi	r23, 0x00	; 0
   1cb20:	60 e0       	ldi	r22, 0x00	; 0
   1cb22:	2a f0       	brmi	.+10     	; 0x1cb2e <__fp_mintl+0x2c>
   1cb24:	9a 95       	dec	r25
   1cb26:	66 0f       	add	r22, r22
   1cb28:	77 1f       	adc	r23, r23
   1cb2a:	88 1f       	adc	r24, r24
   1cb2c:	da f7       	brpl	.-10     	; 0x1cb24 <__fp_mintl+0x22>
   1cb2e:	88 0f       	add	r24, r24
   1cb30:	96 95       	lsr	r25
   1cb32:	87 95       	ror	r24
   1cb34:	97 f9       	bld	r25, 7
   1cb36:	08 95       	ret

0001cb38 <__fp_mpack>:
   1cb38:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb3a:	31 f0       	breq	.+12     	; 0x1cb48 <__fp_mpack_finite+0xc>

0001cb3c <__fp_mpack_finite>:
   1cb3c:	91 50       	subi	r25, 0x01	; 1
   1cb3e:	20 f4       	brcc	.+8      	; 0x1cb48 <__fp_mpack_finite+0xc>
   1cb40:	87 95       	ror	r24
   1cb42:	77 95       	ror	r23
   1cb44:	67 95       	ror	r22
   1cb46:	b7 95       	ror	r27
   1cb48:	88 0f       	add	r24, r24
   1cb4a:	91 1d       	adc	r25, r1
   1cb4c:	96 95       	lsr	r25
   1cb4e:	87 95       	ror	r24
   1cb50:	97 f9       	bld	r25, 7
   1cb52:	08 95       	ret

0001cb54 <calloc>:
   1cb54:	0f 93       	push	r16
   1cb56:	1f 93       	push	r17
   1cb58:	cf 93       	push	r28
   1cb5a:	df 93       	push	r29
   1cb5c:	86 9f       	mul	r24, r22
   1cb5e:	80 01       	movw	r16, r0
   1cb60:	87 9f       	mul	r24, r23
   1cb62:	10 0d       	add	r17, r0
   1cb64:	96 9f       	mul	r25, r22
   1cb66:	10 0d       	add	r17, r0
   1cb68:	11 24       	eor	r1, r1
   1cb6a:	c8 01       	movw	r24, r16
   1cb6c:	0d d0       	rcall	.+26     	; 0x1cb88 <malloc>
   1cb6e:	ec 01       	movw	r28, r24
   1cb70:	00 97       	sbiw	r24, 0x00	; 0
   1cb72:	21 f0       	breq	.+8      	; 0x1cb7c <calloc+0x28>
   1cb74:	a8 01       	movw	r20, r16
   1cb76:	60 e0       	ldi	r22, 0x00	; 0
   1cb78:	70 e0       	ldi	r23, 0x00	; 0
   1cb7a:	27 d1       	rcall	.+590    	; 0x1cdca <memset>
   1cb7c:	ce 01       	movw	r24, r28
   1cb7e:	df 91       	pop	r29
   1cb80:	cf 91       	pop	r28
   1cb82:	1f 91       	pop	r17
   1cb84:	0f 91       	pop	r16
   1cb86:	08 95       	ret

0001cb88 <malloc>:
   1cb88:	0f 93       	push	r16
   1cb8a:	1f 93       	push	r17
   1cb8c:	cf 93       	push	r28
   1cb8e:	df 93       	push	r29
   1cb90:	82 30       	cpi	r24, 0x02	; 2
   1cb92:	91 05       	cpc	r25, r1
   1cb94:	10 f4       	brcc	.+4      	; 0x1cb9a <malloc+0x12>
   1cb96:	82 e0       	ldi	r24, 0x02	; 2
   1cb98:	90 e0       	ldi	r25, 0x00	; 0
   1cb9a:	e0 91 ae 21 	lds	r30, 0x21AE	; 0x8021ae <__flp>
   1cb9e:	f0 91 af 21 	lds	r31, 0x21AF	; 0x8021af <__flp+0x1>
   1cba2:	20 e0       	ldi	r18, 0x00	; 0
   1cba4:	30 e0       	ldi	r19, 0x00	; 0
   1cba6:	a0 e0       	ldi	r26, 0x00	; 0
   1cba8:	b0 e0       	ldi	r27, 0x00	; 0
   1cbaa:	30 97       	sbiw	r30, 0x00	; 0
   1cbac:	19 f1       	breq	.+70     	; 0x1cbf4 <malloc+0x6c>
   1cbae:	40 81       	ld	r20, Z
   1cbb0:	51 81       	ldd	r21, Z+1	; 0x01
   1cbb2:	02 81       	ldd	r16, Z+2	; 0x02
   1cbb4:	13 81       	ldd	r17, Z+3	; 0x03
   1cbb6:	48 17       	cp	r20, r24
   1cbb8:	59 07       	cpc	r21, r25
   1cbba:	c8 f0       	brcs	.+50     	; 0x1cbee <malloc+0x66>
   1cbbc:	84 17       	cp	r24, r20
   1cbbe:	95 07       	cpc	r25, r21
   1cbc0:	69 f4       	brne	.+26     	; 0x1cbdc <malloc+0x54>
   1cbc2:	10 97       	sbiw	r26, 0x00	; 0
   1cbc4:	31 f0       	breq	.+12     	; 0x1cbd2 <malloc+0x4a>
   1cbc6:	12 96       	adiw	r26, 0x02	; 2
   1cbc8:	0c 93       	st	X, r16
   1cbca:	12 97       	sbiw	r26, 0x02	; 2
   1cbcc:	13 96       	adiw	r26, 0x03	; 3
   1cbce:	1c 93       	st	X, r17
   1cbd0:	27 c0       	rjmp	.+78     	; 0x1cc20 <malloc+0x98>
   1cbd2:	00 93 ae 21 	sts	0x21AE, r16	; 0x8021ae <__flp>
   1cbd6:	10 93 af 21 	sts	0x21AF, r17	; 0x8021af <__flp+0x1>
   1cbda:	22 c0       	rjmp	.+68     	; 0x1cc20 <malloc+0x98>
   1cbdc:	21 15       	cp	r18, r1
   1cbde:	31 05       	cpc	r19, r1
   1cbe0:	19 f0       	breq	.+6      	; 0x1cbe8 <malloc+0x60>
   1cbe2:	42 17       	cp	r20, r18
   1cbe4:	53 07       	cpc	r21, r19
   1cbe6:	18 f4       	brcc	.+6      	; 0x1cbee <malloc+0x66>
   1cbe8:	9a 01       	movw	r18, r20
   1cbea:	bd 01       	movw	r22, r26
   1cbec:	ef 01       	movw	r28, r30
   1cbee:	df 01       	movw	r26, r30
   1cbf0:	f8 01       	movw	r30, r16
   1cbf2:	db cf       	rjmp	.-74     	; 0x1cbaa <malloc+0x22>
   1cbf4:	21 15       	cp	r18, r1
   1cbf6:	31 05       	cpc	r19, r1
   1cbf8:	f9 f0       	breq	.+62     	; 0x1cc38 <malloc+0xb0>
   1cbfa:	28 1b       	sub	r18, r24
   1cbfc:	39 0b       	sbc	r19, r25
   1cbfe:	24 30       	cpi	r18, 0x04	; 4
   1cc00:	31 05       	cpc	r19, r1
   1cc02:	80 f4       	brcc	.+32     	; 0x1cc24 <malloc+0x9c>
   1cc04:	8a 81       	ldd	r24, Y+2	; 0x02
   1cc06:	9b 81       	ldd	r25, Y+3	; 0x03
   1cc08:	61 15       	cp	r22, r1
   1cc0a:	71 05       	cpc	r23, r1
   1cc0c:	21 f0       	breq	.+8      	; 0x1cc16 <malloc+0x8e>
   1cc0e:	fb 01       	movw	r30, r22
   1cc10:	93 83       	std	Z+3, r25	; 0x03
   1cc12:	82 83       	std	Z+2, r24	; 0x02
   1cc14:	04 c0       	rjmp	.+8      	; 0x1cc1e <malloc+0x96>
   1cc16:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <__flp+0x1>
   1cc1a:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <__flp>
   1cc1e:	fe 01       	movw	r30, r28
   1cc20:	32 96       	adiw	r30, 0x02	; 2
   1cc22:	44 c0       	rjmp	.+136    	; 0x1ccac <malloc+0x124>
   1cc24:	fe 01       	movw	r30, r28
   1cc26:	e2 0f       	add	r30, r18
   1cc28:	f3 1f       	adc	r31, r19
   1cc2a:	81 93       	st	Z+, r24
   1cc2c:	91 93       	st	Z+, r25
   1cc2e:	22 50       	subi	r18, 0x02	; 2
   1cc30:	31 09       	sbc	r19, r1
   1cc32:	39 83       	std	Y+1, r19	; 0x01
   1cc34:	28 83       	st	Y, r18
   1cc36:	3a c0       	rjmp	.+116    	; 0x1ccac <malloc+0x124>
   1cc38:	20 91 ac 21 	lds	r18, 0x21AC	; 0x8021ac <__brkval>
   1cc3c:	30 91 ad 21 	lds	r19, 0x21AD	; 0x8021ad <__brkval+0x1>
   1cc40:	23 2b       	or	r18, r19
   1cc42:	41 f4       	brne	.+16     	; 0x1cc54 <malloc+0xcc>
   1cc44:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cc48:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cc4c:	30 93 ad 21 	sts	0x21AD, r19	; 0x8021ad <__brkval+0x1>
   1cc50:	20 93 ac 21 	sts	0x21AC, r18	; 0x8021ac <__brkval>
   1cc54:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1cc58:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1cc5c:	21 15       	cp	r18, r1
   1cc5e:	31 05       	cpc	r19, r1
   1cc60:	41 f4       	brne	.+16     	; 0x1cc72 <malloc+0xea>
   1cc62:	2d b7       	in	r18, 0x3d	; 61
   1cc64:	3e b7       	in	r19, 0x3e	; 62
   1cc66:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cc6a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cc6e:	24 1b       	sub	r18, r20
   1cc70:	35 0b       	sbc	r19, r21
   1cc72:	e0 91 ac 21 	lds	r30, 0x21AC	; 0x8021ac <__brkval>
   1cc76:	f0 91 ad 21 	lds	r31, 0x21AD	; 0x8021ad <__brkval+0x1>
   1cc7a:	e2 17       	cp	r30, r18
   1cc7c:	f3 07       	cpc	r31, r19
   1cc7e:	a0 f4       	brcc	.+40     	; 0x1cca8 <malloc+0x120>
   1cc80:	2e 1b       	sub	r18, r30
   1cc82:	3f 0b       	sbc	r19, r31
   1cc84:	28 17       	cp	r18, r24
   1cc86:	39 07       	cpc	r19, r25
   1cc88:	78 f0       	brcs	.+30     	; 0x1cca8 <malloc+0x120>
   1cc8a:	ac 01       	movw	r20, r24
   1cc8c:	4e 5f       	subi	r20, 0xFE	; 254
   1cc8e:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc90:	24 17       	cp	r18, r20
   1cc92:	35 07       	cpc	r19, r21
   1cc94:	48 f0       	brcs	.+18     	; 0x1cca8 <malloc+0x120>
   1cc96:	4e 0f       	add	r20, r30
   1cc98:	5f 1f       	adc	r21, r31
   1cc9a:	50 93 ad 21 	sts	0x21AD, r21	; 0x8021ad <__brkval+0x1>
   1cc9e:	40 93 ac 21 	sts	0x21AC, r20	; 0x8021ac <__brkval>
   1cca2:	81 93       	st	Z+, r24
   1cca4:	91 93       	st	Z+, r25
   1cca6:	02 c0       	rjmp	.+4      	; 0x1ccac <malloc+0x124>
   1cca8:	e0 e0       	ldi	r30, 0x00	; 0
   1ccaa:	f0 e0       	ldi	r31, 0x00	; 0
   1ccac:	cf 01       	movw	r24, r30
   1ccae:	df 91       	pop	r29
   1ccb0:	cf 91       	pop	r28
   1ccb2:	1f 91       	pop	r17
   1ccb4:	0f 91       	pop	r16
   1ccb6:	08 95       	ret

0001ccb8 <free>:
   1ccb8:	cf 93       	push	r28
   1ccba:	df 93       	push	r29
   1ccbc:	00 97       	sbiw	r24, 0x00	; 0
   1ccbe:	09 f4       	brne	.+2      	; 0x1ccc2 <free+0xa>
   1ccc0:	81 c0       	rjmp	.+258    	; 0x1cdc4 <free+0x10c>
   1ccc2:	fc 01       	movw	r30, r24
   1ccc4:	32 97       	sbiw	r30, 0x02	; 2
   1ccc6:	13 82       	std	Z+3, r1	; 0x03
   1ccc8:	12 82       	std	Z+2, r1	; 0x02
   1ccca:	a0 91 ae 21 	lds	r26, 0x21AE	; 0x8021ae <__flp>
   1ccce:	b0 91 af 21 	lds	r27, 0x21AF	; 0x8021af <__flp+0x1>
   1ccd2:	10 97       	sbiw	r26, 0x00	; 0
   1ccd4:	81 f4       	brne	.+32     	; 0x1ccf6 <free+0x3e>
   1ccd6:	20 81       	ld	r18, Z
   1ccd8:	31 81       	ldd	r19, Z+1	; 0x01
   1ccda:	82 0f       	add	r24, r18
   1ccdc:	93 1f       	adc	r25, r19
   1ccde:	20 91 ac 21 	lds	r18, 0x21AC	; 0x8021ac <__brkval>
   1cce2:	30 91 ad 21 	lds	r19, 0x21AD	; 0x8021ad <__brkval+0x1>
   1cce6:	28 17       	cp	r18, r24
   1cce8:	39 07       	cpc	r19, r25
   1ccea:	51 f5       	brne	.+84     	; 0x1cd40 <free+0x88>
   1ccec:	f0 93 ad 21 	sts	0x21AD, r31	; 0x8021ad <__brkval+0x1>
   1ccf0:	e0 93 ac 21 	sts	0x21AC, r30	; 0x8021ac <__brkval>
   1ccf4:	67 c0       	rjmp	.+206    	; 0x1cdc4 <free+0x10c>
   1ccf6:	ed 01       	movw	r28, r26
   1ccf8:	20 e0       	ldi	r18, 0x00	; 0
   1ccfa:	30 e0       	ldi	r19, 0x00	; 0
   1ccfc:	ce 17       	cp	r28, r30
   1ccfe:	df 07       	cpc	r29, r31
   1cd00:	40 f4       	brcc	.+16     	; 0x1cd12 <free+0x5a>
   1cd02:	4a 81       	ldd	r20, Y+2	; 0x02
   1cd04:	5b 81       	ldd	r21, Y+3	; 0x03
   1cd06:	9e 01       	movw	r18, r28
   1cd08:	41 15       	cp	r20, r1
   1cd0a:	51 05       	cpc	r21, r1
   1cd0c:	f1 f0       	breq	.+60     	; 0x1cd4a <free+0x92>
   1cd0e:	ea 01       	movw	r28, r20
   1cd10:	f5 cf       	rjmp	.-22     	; 0x1ccfc <free+0x44>
   1cd12:	d3 83       	std	Z+3, r29	; 0x03
   1cd14:	c2 83       	std	Z+2, r28	; 0x02
   1cd16:	40 81       	ld	r20, Z
   1cd18:	51 81       	ldd	r21, Z+1	; 0x01
   1cd1a:	84 0f       	add	r24, r20
   1cd1c:	95 1f       	adc	r25, r21
   1cd1e:	c8 17       	cp	r28, r24
   1cd20:	d9 07       	cpc	r29, r25
   1cd22:	59 f4       	brne	.+22     	; 0x1cd3a <free+0x82>
   1cd24:	88 81       	ld	r24, Y
   1cd26:	99 81       	ldd	r25, Y+1	; 0x01
   1cd28:	84 0f       	add	r24, r20
   1cd2a:	95 1f       	adc	r25, r21
   1cd2c:	02 96       	adiw	r24, 0x02	; 2
   1cd2e:	91 83       	std	Z+1, r25	; 0x01
   1cd30:	80 83       	st	Z, r24
   1cd32:	8a 81       	ldd	r24, Y+2	; 0x02
   1cd34:	9b 81       	ldd	r25, Y+3	; 0x03
   1cd36:	93 83       	std	Z+3, r25	; 0x03
   1cd38:	82 83       	std	Z+2, r24	; 0x02
   1cd3a:	21 15       	cp	r18, r1
   1cd3c:	31 05       	cpc	r19, r1
   1cd3e:	29 f4       	brne	.+10     	; 0x1cd4a <free+0x92>
   1cd40:	f0 93 af 21 	sts	0x21AF, r31	; 0x8021af <__flp+0x1>
   1cd44:	e0 93 ae 21 	sts	0x21AE, r30	; 0x8021ae <__flp>
   1cd48:	3d c0       	rjmp	.+122    	; 0x1cdc4 <free+0x10c>
   1cd4a:	e9 01       	movw	r28, r18
   1cd4c:	fb 83       	std	Y+3, r31	; 0x03
   1cd4e:	ea 83       	std	Y+2, r30	; 0x02
   1cd50:	49 91       	ld	r20, Y+
   1cd52:	59 91       	ld	r21, Y+
   1cd54:	c4 0f       	add	r28, r20
   1cd56:	d5 1f       	adc	r29, r21
   1cd58:	ec 17       	cp	r30, r28
   1cd5a:	fd 07       	cpc	r31, r29
   1cd5c:	61 f4       	brne	.+24     	; 0x1cd76 <free+0xbe>
   1cd5e:	80 81       	ld	r24, Z
   1cd60:	91 81       	ldd	r25, Z+1	; 0x01
   1cd62:	84 0f       	add	r24, r20
   1cd64:	95 1f       	adc	r25, r21
   1cd66:	02 96       	adiw	r24, 0x02	; 2
   1cd68:	e9 01       	movw	r28, r18
   1cd6a:	99 83       	std	Y+1, r25	; 0x01
   1cd6c:	88 83       	st	Y, r24
   1cd6e:	82 81       	ldd	r24, Z+2	; 0x02
   1cd70:	93 81       	ldd	r25, Z+3	; 0x03
   1cd72:	9b 83       	std	Y+3, r25	; 0x03
   1cd74:	8a 83       	std	Y+2, r24	; 0x02
   1cd76:	e0 e0       	ldi	r30, 0x00	; 0
   1cd78:	f0 e0       	ldi	r31, 0x00	; 0
   1cd7a:	12 96       	adiw	r26, 0x02	; 2
   1cd7c:	8d 91       	ld	r24, X+
   1cd7e:	9c 91       	ld	r25, X
   1cd80:	13 97       	sbiw	r26, 0x03	; 3
   1cd82:	00 97       	sbiw	r24, 0x00	; 0
   1cd84:	19 f0       	breq	.+6      	; 0x1cd8c <free+0xd4>
   1cd86:	fd 01       	movw	r30, r26
   1cd88:	dc 01       	movw	r26, r24
   1cd8a:	f7 cf       	rjmp	.-18     	; 0x1cd7a <free+0xc2>
   1cd8c:	8d 91       	ld	r24, X+
   1cd8e:	9c 91       	ld	r25, X
   1cd90:	11 97       	sbiw	r26, 0x01	; 1
   1cd92:	9d 01       	movw	r18, r26
   1cd94:	2e 5f       	subi	r18, 0xFE	; 254
   1cd96:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd98:	82 0f       	add	r24, r18
   1cd9a:	93 1f       	adc	r25, r19
   1cd9c:	20 91 ac 21 	lds	r18, 0x21AC	; 0x8021ac <__brkval>
   1cda0:	30 91 ad 21 	lds	r19, 0x21AD	; 0x8021ad <__brkval+0x1>
   1cda4:	28 17       	cp	r18, r24
   1cda6:	39 07       	cpc	r19, r25
   1cda8:	69 f4       	brne	.+26     	; 0x1cdc4 <free+0x10c>
   1cdaa:	30 97       	sbiw	r30, 0x00	; 0
   1cdac:	29 f4       	brne	.+10     	; 0x1cdb8 <free+0x100>
   1cdae:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <__flp+0x1>
   1cdb2:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <__flp>
   1cdb6:	02 c0       	rjmp	.+4      	; 0x1cdbc <free+0x104>
   1cdb8:	13 82       	std	Z+3, r1	; 0x03
   1cdba:	12 82       	std	Z+2, r1	; 0x02
   1cdbc:	b0 93 ad 21 	sts	0x21AD, r27	; 0x8021ad <__brkval+0x1>
   1cdc0:	a0 93 ac 21 	sts	0x21AC, r26	; 0x8021ac <__brkval>
   1cdc4:	df 91       	pop	r29
   1cdc6:	cf 91       	pop	r28
   1cdc8:	08 95       	ret

0001cdca <memset>:
   1cdca:	dc 01       	movw	r26, r24
   1cdcc:	01 c0       	rjmp	.+2      	; 0x1cdd0 <memset+0x6>
   1cdce:	6d 93       	st	X+, r22
   1cdd0:	41 50       	subi	r20, 0x01	; 1
   1cdd2:	50 40       	sbci	r21, 0x00	; 0
   1cdd4:	e0 f7       	brcc	.-8      	; 0x1cdce <memset+0x4>
   1cdd6:	08 95       	ret

0001cdd8 <_exit>:
   1cdd8:	f8 94       	cli

0001cdda <__stop_program>:
   1cdda:	ff cf       	rjmp	.-2      	; 0x1cdda <__stop_program>
