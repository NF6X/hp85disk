
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001666  00800100  0001d2d6  0001d36a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d2d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a58  00801766  00801766  0001e9d0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e9d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e9e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001798  00000000  00000000  0001ea24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000277d9  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000646d  00000000  00000000  00047995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012132  00000000  00000000  0004de02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000061c8  00000000  00000000  0005ff34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047d8  00000000  00000000  000660fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000264aa  00000000  00000000  0006a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001788  00000000  00000000  00090d7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 25 	jmp	0x4a54	; 0x4a54 <__ctors_end>
       4:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
       8:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
       c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      10:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      14:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      18:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      1c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      20:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      24:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      28:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      2c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      30:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      34:	0c 94 8a 35 	jmp	0x6b14	; 0x6b14 <__vector_13>
      38:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      3c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      40:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      44:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      48:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      4c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      50:	0c 94 5b 2c 	jmp	0x58b6	; 0x58b6 <__vector_20>
      54:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      58:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      5c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      60:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      64:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      68:	0c 94 2a 2f 	jmp	0x5e54	; 0x5e54 <__vector_26>
      6c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      70:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      74:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      78:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      7c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      80:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      84:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      88:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__bad_interrupt>
      8c:	31 45       	sbci	r19, 0x51	; 81
      8e:	8c 46       	sbci	r24, 0x6C	; 108
      90:	61 45       	sbci	r22, 0x51	; 81
      92:	65 46       	sbci	r22, 0x65	; 101
      94:	65 46       	sbci	r22, 0x65	; 101
      96:	8c 46       	sbci	r24, 0x6C	; 108
      98:	8c 46       	sbci	r24, 0x6C	; 108
      9a:	8c 46       	sbci	r24, 0x6C	; 108
      9c:	8c 46       	sbci	r24, 0x6C	; 108
      9e:	8c 46       	sbci	r24, 0x6C	; 108
      a0:	8c 46       	sbci	r24, 0x6C	; 108
      a2:	8c 46       	sbci	r24, 0x6C	; 108
      a4:	8c 46       	sbci	r24, 0x6C	; 108
      a6:	31 45       	sbci	r19, 0x51	; 81
      a8:	2b 45       	sbci	r18, 0x5B	; 91
      aa:	8c 46       	sbci	r24, 0x6C	; 108
      ac:	8c 46       	sbci	r24, 0x6C	; 108
      ae:	8c 46       	sbci	r24, 0x6C	; 108
      b0:	8c 46       	sbci	r24, 0x6C	; 108
      b2:	5b 45       	sbci	r21, 0x5B	; 91
      b4:	8c 46       	sbci	r24, 0x6C	; 108
      b6:	8c 46       	sbci	r24, 0x6C	; 108
      b8:	31 45       	sbci	r19, 0x51	; 81
      ba:	8c 46       	sbci	r24, 0x6C	; 108
      bc:	8c 46       	sbci	r24, 0x6C	; 108
      be:	8c 46       	sbci	r24, 0x6C	; 108
      c0:	8c 46       	sbci	r24, 0x6C	; 108
      c2:	8c 46       	sbci	r24, 0x6C	; 108
      c4:	8c 46       	sbci	r24, 0x6C	; 108
      c6:	8c 46       	sbci	r24, 0x6C	; 108
      c8:	8c 46       	sbci	r24, 0x6C	; 108
      ca:	8c 46       	sbci	r24, 0x6C	; 108
      cc:	31 45       	sbci	r19, 0x51	; 81
      ce:	87 46       	sbci	r24, 0x67	; 103
      d0:	61 45       	sbci	r22, 0x51	; 81
      d2:	65 46       	sbci	r22, 0x65	; 101
      d4:	65 46       	sbci	r22, 0x65	; 101
      d6:	8c 46       	sbci	r24, 0x6C	; 108
      d8:	8c 46       	sbci	r24, 0x6C	; 108
      da:	8c 46       	sbci	r24, 0x6C	; 108
      dc:	8c 46       	sbci	r24, 0x6C	; 108
      de:	8c 46       	sbci	r24, 0x6C	; 108
      e0:	8c 46       	sbci	r24, 0x6C	; 108
      e2:	8c 46       	sbci	r24, 0x6C	; 108
      e4:	8c 46       	sbci	r24, 0x6C	; 108
      e6:	31 45       	sbci	r19, 0x51	; 81
      e8:	2b 45       	sbci	r18, 0x5B	; 91
      ea:	8c 46       	sbci	r24, 0x6C	; 108
      ec:	8c 46       	sbci	r24, 0x6C	; 108
      ee:	82 46       	sbci	r24, 0x62	; 98
      f0:	8c 46       	sbci	r24, 0x6C	; 108
      f2:	5b 45       	sbci	r21, 0x5B	; 91
      f4:	8c 46       	sbci	r24, 0x6C	; 108
      f6:	8c 46       	sbci	r24, 0x6C	; 108
      f8:	31 45       	sbci	r19, 0x51	; 81
      fa:	ae 46       	sbci	r26, 0x6E	; 110
      fc:	95 47       	sbci	r25, 0x75	; 117
      fe:	a4 46       	sbci	r26, 0x64	; 100
     100:	02 47       	sbci	r16, 0x72	; 114
     102:	e9 46       	sbci	r30, 0x69	; 105
     104:	95 47       	sbci	r25, 0x75	; 117
     106:	95 47       	sbci	r25, 0x75	; 117
     108:	95 47       	sbci	r25, 0x75	; 117
     10a:	95 47       	sbci	r25, 0x75	; 117
     10c:	95 47       	sbci	r25, 0x75	; 117
     10e:	95 47       	sbci	r25, 0x75	; 117
     110:	95 47       	sbci	r25, 0x75	; 117
     112:	95 47       	sbci	r25, 0x75	; 117
     114:	b8 46       	sbci	r27, 0x68	; 104
     116:	cc 46       	sbci	r28, 0x6C	; 108
     118:	95 47       	sbci	r25, 0x75	; 117
     11a:	95 47       	sbci	r25, 0x75	; 117
     11c:	95 47       	sbci	r25, 0x75	; 117
     11e:	95 47       	sbci	r25, 0x75	; 117
     120:	a0 46       	sbci	r26, 0x60	; 96
     122:	95 47       	sbci	r25, 0x75	; 117
     124:	95 47       	sbci	r25, 0x75	; 117
     126:	cc 46       	sbci	r28, 0x6C	; 108
     128:	95 47       	sbci	r25, 0x75	; 117
     12a:	95 47       	sbci	r25, 0x75	; 117
     12c:	95 47       	sbci	r25, 0x75	; 117
     12e:	95 47       	sbci	r25, 0x75	; 117
     130:	95 47       	sbci	r25, 0x75	; 117
     132:	95 47       	sbci	r25, 0x75	; 117
     134:	95 47       	sbci	r25, 0x75	; 117
     136:	95 47       	sbci	r25, 0x75	; 117
     138:	95 47       	sbci	r25, 0x75	; 117
     13a:	ae 46       	sbci	r26, 0x6E	; 110
     13c:	30 47       	sbci	r19, 0x70	; 112
     13e:	a4 46       	sbci	r26, 0x64	; 100
     140:	02 47       	sbci	r16, 0x72	; 114
     142:	e9 46       	sbci	r30, 0x69	; 105
     144:	95 47       	sbci	r25, 0x75	; 117
     146:	95 47       	sbci	r25, 0x75	; 117
     148:	95 47       	sbci	r25, 0x75	; 117
     14a:	95 47       	sbci	r25, 0x75	; 117
     14c:	95 47       	sbci	r25, 0x75	; 117
     14e:	95 47       	sbci	r25, 0x75	; 117
     150:	95 47       	sbci	r25, 0x75	; 117
     152:	95 47       	sbci	r25, 0x75	; 117
     154:	b8 46       	sbci	r27, 0x68	; 104
     156:	cc 46       	sbci	r28, 0x6C	; 108
     158:	95 47       	sbci	r25, 0x75	; 117
     15a:	95 47       	sbci	r25, 0x75	; 117
     15c:	30 47       	sbci	r19, 0x70	; 112
     15e:	95 47       	sbci	r25, 0x75	; 117
     160:	a0 46       	sbci	r26, 0x60	; 96
     162:	95 47       	sbci	r25, 0x75	; 117
     164:	95 47       	sbci	r25, 0x75	; 117
     166:	cc 46       	sbci	r28, 0x6C	; 108
     168:	07 6c       	ori	r16, 0xC7	; 199
     16a:	11 6c       	ori	r17, 0xC1	; 193
     16c:	19 6c       	ori	r17, 0xC9	; 201
     16e:	1c 6c       	ori	r17, 0xCC	; 204
     170:	1f 6c       	ori	r17, 0xCF	; 207
     172:	22 6c       	ori	r18, 0xC2	; 194
     174:	25 6c       	ori	r18, 0xC5	; 197
     176:	28 6c       	ori	r18, 0xC8	; 200
     178:	2b 6c       	ori	r18, 0xCB	; 203
     17a:	76 88       	ldd	r7, Z+22	; 0x16
     17c:	9c 88       	ldd	r9, Y+20	; 0x14
     17e:	c3 88       	ldd	r12, Z+19	; 0x13
     180:	dd 88       	ldd	r13, Y+21	; 0x15
     182:	e6 88       	ldd	r14, Z+22	; 0x16
     184:	06 89       	ldd	r16, Z+22	; 0x16
     186:	1f 89       	ldd	r17, Y+23	; 0x17
     188:	2e 89       	ldd	r18, Y+22	; 0x16
     18a:	79 89       	ldd	r23, Y+17	; 0x11
     18c:	4b 89       	ldd	r20, Y+19	; 0x13
     18e:	67 8b       	std	Z+23, r22	; 0x17
     190:	6f 8b       	std	Y+23, r22	; 0x17
     192:	74 8b       	std	Z+20, r23	; 0x14
     194:	98 8b       	std	Y+16, r25	; 0x10
     196:	a2 8b       	std	Z+18, r26	; 0x12
     198:	ec 8b       	std	Y+20, r30	; 0x14
     19a:	b7 8b       	std	Z+23, r27	; 0x17
     19c:	b7 8b       	std	Z+23, r27	; 0x17
     19e:	af 8b       	std	Y+23, r26	; 0x17
     1a0:	01 99       	sbic	0x00, 1	; 0
     1a2:	33 9a       	sbi	0x06, 3	; 6
     1a4:	84 9a       	sbi	0x10, 4	; 16
     1a6:	f4 9a       	sbi	0x1e, 4	; 30
     1a8:	0b 9b       	sbis	0x01, 3	; 1
     1aa:	33 9b       	sbis	0x06, 3	; 6
     1ac:	32 9c       	mul	r3, r2
     1ae:	33 9e       	mul	r3, r19
     1b0:	33 9e       	mul	r3, r19
     1b2:	33 9e       	mul	r3, r19
     1b4:	99 9c       	mul	r9, r9
     1b6:	d1 9c       	mul	r13, r1
     1b8:	82 9d       	mul	r24, r2
     1ba:	af 9d       	mul	r26, r15
     1bc:	c0 99       	sbic	0x18, 0	; 24
     1be:	d9 99       	sbic	0x1b, 1	; 27
     1c0:	ee bd       	out	0x2e, r30	; 46
     1c2:	ad bd       	out	0x2d, r26	; 45
     1c4:	ad bd       	out	0x2d, r26	; 45
     1c6:	ad bd       	out	0x2d, r26	; 45
     1c8:	ad bd       	out	0x2d, r26	; 45
     1ca:	71 bd       	out	0x21, r23	; 33
     1cc:	78 bd       	out	0x28, r23	; 40
     1ce:	7f bd       	out	0x2f, r23	; 47
     1d0:	8f bd       	out	0x2f, r24	; 47
     1d2:	9d bd       	out	0x2d, r25	; 45
     1d4:	96 bd       	out	0x26, r25	; 38

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3740>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3735>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3766>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3757>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3751>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3736>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3734>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3732>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3730>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3728>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3726>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3724>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3722>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3720>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3744>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3737>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3730>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3722>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3720>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3712>:
     4bf:	72 74 63 5f 72 75 6e 5f 74 65 73 74 20 72 65 61     rtc_run_test rea
     4cf:	64 20 65 72 72 6f 72 0a 00                          d error..

000004d8 <__c.3870>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3704>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3783>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3781>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3779>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3777>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3775>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3773>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3753>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3751>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3742>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3737>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3717>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3992>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3990>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3988>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3986>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3984>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3977>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3975>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3973>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3971>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3969>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3960>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3958>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3954>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3952>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3923>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3921>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3919>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3917>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3915>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3913>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3892>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3767>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3735>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3764>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3762>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3760>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3757>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3755>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3753>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3740>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3712>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3784>:
     863:	0a 00                                               ..

00000865 <__c.3782>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3780>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3774>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3772>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3770>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3768>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3766>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3764>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3762>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3760>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3758>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3756>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3754>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3752>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3750>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3714>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3752>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3750>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3746>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3733>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3731>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3729>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3727>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3725>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3717>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3707>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3705>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.4066>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.4037>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.4035>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3931>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3929>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3927>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3925>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3923>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3921>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3919>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3917>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3915>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3913>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3911>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3790>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3719>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3712>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3866>:
     c90:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c9b <__c.3862>:
     c9b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cab:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     cbb:	68 0a 00                                            h..

00000cbe <__c.3859>:
     cbe:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000cce <__c.3854>:
     cce:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     cde:	5b 25 73 5d 0a 00                                   [%s]..

00000ce4 <__c.3852>:
     ce4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000cf2 <__c.3850>:
     cf2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d02:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d13 <__c.3837>:
     d13:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d23:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d2d <__c.3832>:
     d2d:	25 73 0a 00                                         %s..

00000d31 <__c.3830>:
     d31:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d41:	0a 00                                               ..

00000d43 <__c.3818>:
     d43:	0d 00                                               ..

00000d45 <__c.3816>:
     d45:	4d 6f 72 65 2e 2e 00                                More...

00000d4c <__c.3806>:
     d4c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     d5c:	2e 0a 00                                            ...

00000d5f <__c.3802>:
     d5f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d6e <__c.3799>:
     d6e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d7b <__c.3797>:
     d7b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d88 <__c.3795>:
     d88:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d98 <__c.3793>:
     d98:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000da5 <__c.3791>:
     da5:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000db5 <__c.3789>:
     db5:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000dc1 <__c.3778>:
     dc1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000dcc <__c.3776>:
     dcc:	0a 00                                               ..

00000dce <__c.3771>:
     dce:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dde <__c.3761>:
     dde:	25 73 0a 00                                         %s..

00000de2 <__c.3738>:
     de2:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     df2:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e02:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     e12:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     e22:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     e32:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     e42:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     e52:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     e62:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     e72:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     e82:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     e92:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000ea2 <__c.3736>:
     ea2:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000eae <__c.3927>:
     eae:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ebc <__c.3921>:
     ebc:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ec9 <__c.3914>:
     ec9:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ed7 <__c.3905>:
     ed7:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000ee4 <__c.3896>:
     ee4:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ef5 <__c.3882>:
     ef5:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f05:	5d 0a 00                                            ]..

00000f08 <__c.3864>:
     f08:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f18:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f25 <__c.4449>:
     f25:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f35:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f45:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f4d <__c.4444>:
     f4d:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f5d:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f67 <__c.4434>:
     f67:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f77:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f87:	28 25 64 29 5d 0a 00                                (%d)]..

00000f8e <__c.4430>:
     f8e:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f9e:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fae:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fbb <__c.4427>:
     fbb:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fcb:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fd4 <__c.4411>:
     fd4:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fdf <__c.4409>:
     fdf:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fea <__c.4407>:
     fea:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ff5 <__c.4403>:
     ff5:	20 20 20 20 20 00                                        .

00000ffb <__c.4401>:
     ffb:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001004 <__c.4359>:
    1004:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1014:	3e 0a 00                                            >..

00001017 <__c.4355>:
    1017:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1027:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001031 <__c.4351>:
    1031:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1041:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000104c <__c.4348>:
    104c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    105c:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001067 <__c.4343>:
    1067:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1077:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1087:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000108f <__c.4339>:
    108f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    109f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010a9 <__c.4322>:
    10a9:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10b9:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10c9:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000010d7 <__c.4317>:
    10d7:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000010e1 <__c.4315>:
    10e1:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000010ec <__c.4310>:
    10ec:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000010f8 <__c.4302>:
    10f8:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    1108:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1118:	5d 0a 00                                            ]..

0000111b <__c.4296>:
    111b:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    112b:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001136 <__c.4294>:
    1136:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1146:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1156:	72 61 6e 67 65 0a 00                                range..

0000115d <__c.4289>:
    115d:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    116d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001178 <__c.4287>:
    1178:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1188:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1198:	61 6e 67 65 0a 00                                   ange..

0000119e <__c.4282>:
    119e:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11ae:	5d 0a 00                                            ]..

000011b1 <__c.4277>:
    11b1:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011c2 <__c.4462>:
    11c2:	0a 00                                               ..

000011c4 <__c.4454>:
    11c4:	2e 00                                               ..

000011c6 <__c.4452>:
    11c6:	25 63 00                                            %c.

000011c9 <__c.4450>:
    11c9:	20 7c 20 00                                          | .

000011cd <__c.4445>:
    11cd:	20 25 30 32 58 00                                    %02X.

000011d3 <__c.4443>:
    11d3:	0a 00                                               ..

000011d5 <__c.4441>:
    11d5:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000011e1 <__c.4430>:
    11e1:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f2 <__c.4425>:
    11f2:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1202:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1212:	32 58 48 5d 0a 00                                   2XH]..

00001218 <__c.4423>:
    1218:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1228:	0a 00                                               ..

0000122a <__c.4421>:
    122a:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000123b <__c.4416>:
    123b:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001247 <__c.4414>:
    1247:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001257 <__c.4412>:
    1257:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1267:	52 5d 0a 00                                         R]..

0000126b <__c.4410>:
    126b:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    127b:	0a 00                                               ..

0000127d <__c.4408>:
    127d:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000128e <__c.4406>:
    128e:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001295 <__c.4401>:
    1295:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a1 <__c.4399>:
    12a1:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b1:	52 5d 0a 00                                         R]..

000012b5 <__c.4397>:
    12b5:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012c6 <__c.4395>:
    12c6:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12d6:	0a 00                                               ..

000012d8 <__c.4393>:
    12d8:	0a 00                                               ..

000012da <__c.4391>:
    12da:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e1 <__c.4386>:
    12e1:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    12f1:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000012fd <__c.4384>:
    12fd:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001304 <__c.4382>:
    1304:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001311 <__c.4380>:
    1311:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000131d <__c.4378>:
    131d:	5b 53 44 43 5d 0a 00                                [SDC]..

00001324 <__c.4376>:
    1324:	5b 53 50 44 5d 0a 00                                [SPD]..

0000132b <__c.4374>:
    132b:	5b 53 50 45 5d 0a 00                                [SPE]..

00001332 <__c.4372>:
    1332:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1342:	5d 0a 00                                            ]..

00001345 <__c.4370>:
    1345:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1355:	5d 0a 00                                            ]..

00001358 <__c.4365>:
    1358:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1368:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001372 <__c.4363>:
    1372:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1382:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001393 <__c.4336>:
    1393:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013a4 <__c.4334>:
    13a4:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013b1 <__c.4332>:
    13b1:	3c 42 55 53 3e 0a 00                                <BUS>..

000013b8 <__c.4330>:
    13b8:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013c3 <__c.4328>:
    13c3:	3c 49 46 43 3e 0a 00                                <IFC>..

000013ca <__c.4323>:
    13ca:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13da:	0a 00                                               ..

000013dc <__c.4321>:
    13dc:	44 6f 6e 65 0a 00                                   Done..

000013e2 <__c.4317>:
    13e2:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013ee <__c.4315>:
    13ee:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    13fe:	20 65 78 69 74 0a 00                                 exit..

00001405 <__c.4313>:
    1405:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1415:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1425:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001430 <__c.4311>:
    1430:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1440:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000144a <__c.4265>:
    144a:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    145a:	6f 74 65 63 74 65 64 0a 00                          otected..

00001463 <__c.4263>:
    1463:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001474 <__c.4261>:
    1474:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1484:	0a 00                                               ..

00001486 <__c.4479>:
    1486:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001493 <__c.4471>:
    1493:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    14a3:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    14b3:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    14c3:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    14d3:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    14e3:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    14f3:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    1503:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    1513:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    1523:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    1533:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    1543:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

0000154d <__c.4469>:
    154d:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001558 <__c.4931>:
    1558:	0a 00                                               ..

0000155a <__c.4926>:
    155a:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001562 <__c.4924>:
    1562:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1572:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1582:	0a 00                                               ..

00001584 <__c.4922>:
    1584:	53 53 38 30 2d 25 64 00                             SS80-%d.

0000158c <__c.4920>:
    158c:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    159c:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15ac:	0a 00                                               ..

000015ae <__c.4907>:
    15ae:	0a 00                                               ..

000015b0 <__c.4905>:
    15b0:	45 4e 44 0a 00                                      END..

000015b5 <__c.4900>:
    15b5:	0a 00                                               ..

000015b7 <__c.4898>:
    15b7:	45 4e 44 0a 00                                      END..

000015bc <__c.4896>:
    15bc:	20 20 45 4e 44 0a 00                                  END..

000015c3 <__c.4894>:
    15c3:	41 44 44 52 45 53 53 00                             ADDRESS.

000015cb <__c.4892>:
    15cb:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000015d5 <__c.4890>:
    15d5:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000015de <__c.4888>:
    15de:	20 20 45 4e 44 0a 00                                  END..

000015e5 <__c.4886>:
    15e5:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000015ee <__c.4884>:
    15ee:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000015f8 <__c.4882>:
    15f8:	48 45 41 44 53 00                                   HEADS.

000015fe <__c.4880>:
    15fe:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    160e:	4b 00                                               K.

00001610 <__c.4878>:
    1610:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00001621 <__c.4876>:
    1621:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

0000162d <__c.4874>:
    162d:	20 20 45 4e 44 0a 00                                  END..

00001634 <__c.4872>:
    1634:	49 44 00                                            ID.

00001637 <__c.4870>:
    1637:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001641 <__c.4868>:
    1641:	20 20 45 4e 44 0a 00                                  END..

00001648 <__c.4866>:
    1648:	46 49 4c 45 00                                      FILE.

0000164d <__c.4864>:
    164d:	50 50 52 00                                         PPR.

00001651 <__c.4862>:
    1651:	41 44 44 52 45 53 53 00                             ADDRESS.

00001659 <__c.4860>:
    1659:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001663 <__c.4858>:
    1663:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1673:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001682 <__c.4856>:
    1682:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

0000168c <__c.4854>:
    168c:	20 20 45 4e 44 0a 00                                  END..

00001693 <__c.4852>:
    1693:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

0000169c <__c.4850>:
    169c:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

000016a7 <__c.4848>:
    16a7:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

000016b8 <__c.4846>:
    16b8:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000016c3 <__c.4844>:
    16c3:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000016cc <__c.4842>:
    16cc:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000016d9 <__c.4840>:
    16d9:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000016e3 <__c.4838>:
    16e3:	20 20 45 4e 44 0a 00                                  END..

000016ea <__c.4836>:
    16ea:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    16fa:	53 00                                               S.

000016fc <__c.4834>:
    16fc:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

0000170a <__c.4832>:
    170a:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    171a:	56 45 00                                            VE.

0000171d <__c.4830>:
    171d:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00001729 <__c.4828>:
    1729:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    1739:	4d 45 00                                            ME.

0000173c <__c.4826>:
    173c:	43 4f 4e 54 49 4e 55 4f 55 53 5f 54 52 41 4e 53     CONTINUOUS_TRANS
    174c:	46 45 52 5f 52 41 54 45 00                          FER_RATE.

00001755 <__c.4824>:
    1755:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00001760 <__c.4822>:
    1760:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

0000176b <__c.4820>:
    176b:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

0000177b <__c.4818>:
    177b:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

0000178b <__c.4816>:
    178b:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00001799 <__c.4814>:
    1799:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

000017a3 <__c.4812>:
    17a3:	20 20 55 4e 49 54 0a 00                               UNIT..

000017ab <__c.4810>:
    17ab:	20 20 45 4e 44 0a 00                                  END..

000017b2 <__c.4808>:
    17b2:	54 59 50 45 00                                      TYPE.

000017b7 <__c.4806>:
    17b7:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000017c5 <__c.4804>:
    17c5:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000017d5 <__c.4802>:
    17d5:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000017e3 <__c.4800>:
    17e3:	20 20 45 4e 44 0a 00                                  END..

000017ea <__c.4798>:
    17ea:	49 44 00                                            ID.

000017ed <__c.4796>:
    17ed:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000017f7 <__c.4794>:
    17f7:	20 20 45 4e 44 0a 00                                  END..

000017fe <__c.4792>:
    17fe:	46 49 4c 45 00                                      FILE.

00001803 <__c.4790>:
    1803:	50 50 52 00                                         PPR.

00001807 <__c.4788>:
    1807:	41 44 44 52 45 53 53 00                             ADDRESS.

0000180f <__c.4786>:
    180f:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001819 <__c.4784>:
    1819:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1829:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001838 <__c.4782>:
    1838:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001841 <__c.4779>:
    1841:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1851:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001861 <__c.4771>:
    1861:	0a 00                                               ..

00001863 <__c.4766>:
    1863:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1873:	25 30 32 58 48 0a 00                                %02XH..

0000187a <__c.4764>:
    187a:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    188a:	25 30 32 58 48 0a 00                                %02XH..

00001891 <__c.4762>:
    1891:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    18a1:	25 30 32 58 48 0a 00                                %02XH..

000018a8 <__c.4760>:
    18a8:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    18b8:	25 30 32 58 48 0a 00                                %02XH..

000018bf <__c.4758>:
    18bf:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    18cf:	25 30 32 58 48 0a 00                                %02XH..

000018d6 <__c.4756>:
    18d6:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    18e6:	25 30 32 58 48 0a 00                                %02XH..

000018ed <__c.4754>:
    18ed:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    18fd:	25 30 32 58 48 0a 00                                %02XH..

00001904 <__c.4752>:
    1904:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    1914:	25 30 32 58 48 0a 00                                %02XH..

0000191b <__c.4750>:
    191b:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    192b:	25 30 32 58 48 0a 00                                %02XH..

00001932 <__c.4747>:
    1932:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1942:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1952:	0a 00                                               ..

00001954 <__c.4741>:
    1954:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1964:	0a 00                                               ..

00001966 <__c.4730>:
    1966:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    1976:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

0000197f <__c.4719>:
    197f:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    198f:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    199f:	2a 2a 2a 2a 2a 0a 00                                *****..

000019a6 <__c.4717>:
    19a6:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19b6:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019c3 <__c.4715>:
    19c3:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19d3:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    19e3:	0a 00                                               ..

000019e5 <__c.4711>:
    19e5:	46 61 74 61 6c 20 55 6e 65 78 70 65 63 74 65 64     Fatal Unexpected
    19f5:	20 53 54 41 54 45 20 25 64 20 61 74 20 6c 69 6e      STATE %d at lin
    1a05:	65 3a 25 64 0a 00                                   e:%d..

00001a0b <__c.4708>:
    1a0b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a1b:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a2b:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a3b <__c.4706>:
    1a3b:	46 61 74 61 6c 3a 20 41 4d 49 47 4f 20 42 59 54     Fatal: AMIGO BYT
    1a4b:	45 53 5f 50 45 52 5f 53 45 43 54 4f 52 20 3e 20     ES_PER_SECTOR > 
    1a5b:	30 78 31 30 30 30 2c 20 73 65 74 20 74 6f 20 32     0x1000, set to 2
    1a6b:	35 36 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        56 at line:%d..

00001a7a <__c.4703>:
    1a7a:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a8a:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a9a:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001aa9 <__c.4700>:
    1aa9:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1ab9:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1ac9:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ad9 <__c.4698>:
    1ad9:	57 61 72 6e 69 6e 67 20 41 4d 49 47 4f 20 41 44     Warning AMIGO AD
    1ae9:	44 52 45 53 53 3a 20 25 64 20 3e 20 37 2c 20 64     DRESS: %d > 7, d
    1af9:	69 73 61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a     isabled at line:
    1b09:	25 64 0a 00                                         %d..

00001b0d <__c.4696>:
    1b0d:	46 61 74 61 6c 20 41 4d 49 47 4f 20 41 44 44 52     Fatal AMIGO ADDR
    1b1d:	45 53 53 3a 20 25 64 20 3e 20 33 31 20 64 69 73     ESS: %d > 31 dis
    1b2d:	61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a 25 64     abled at line:%d
    1b3d:	0a 00                                               ..

00001b3f <__c.4694>:
    1b3f:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1b4f:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001b58 <__c.4691>:
    1b58:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b68:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1b78:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b86 <__c.4688>:
    1b86:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b96:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1ba6:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bb4 <__c.4685>:
    1bb4:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bc4:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bd4:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001be0 <__c.4683>:
    1be0:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 52 53     Fatal: SS80 BURS
    1bf0:	54 5f 53 49 5a 45 20 3e 20 30 2c 20 73 65 74 20     T_SIZE > 0, set 
    1c00:	74 6f 20 31 20 61 74 20 6c 69 6e 65 3a 25 64 0a     to 1 at line:%d.
	...

00001c11 <__c.4681>:
    1c11:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 46 46     Fatal: SS80 BUFF
    1c21:	45 52 45 44 5f 42 4c 4f 43 4b 53 20 3e 20 31 2c     ERED_BLOCKS > 1,
    1c31:	20 73 65 74 20 74 6f 20 31 20 61 74 20 6c 69 6e      set to 1 at lin
    1c41:	65 3a 25 64 0a 00                                   e:%d..

00001c47 <__c.4679>:
    1c47:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 59 54 45     Fatal: SS80 BYTE
    1c57:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 3e 20 30 78     S_PER_BLOCK > 0x
    1c67:	31 30 30 30 2c 20 73 65 74 20 74 6f 20 32 35 36     1000, set to 256
    1c77:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c84 <__c.4676>:
    1c84:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c94:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1ca4:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1cb4:	0a 00                                               ..

00001cb6 <__c.4673>:
    1cb6:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cc6:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1cd6:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ce4 <__c.4670>:
    1ce4:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cf4:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1d04:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001d12 <__c.4668>:
    1d12:	57 61 72 6e 69 6e 67 20 53 53 38 30 20 50 50 52     Warning SS80 PPR
    1d22:	20 3e 20 37 20 61 74 20 6c 69 6e 65 3a 25 64 0a      > 7 at line:%d.
	...

00001d33 <__c.4666>:
    1d33:	46 61 74 61 6c 20 53 53 38 30 20 41 44 44 52 45     Fatal SS80 ADDRE
    1d43:	53 53 20 3e 20 33 31 20 61 74 20 6c 69 6e 65 20     SS > 31 at line 
    1d53:	64 0a 00                                            d..

00001d56 <__c.4663>:
    1d56:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1d66:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1d76:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001d83 <__c.4660>:
    1d83:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d93:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1da3:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001db4 <__c.4658>:
    1db4:	46 61 74 61 6c 20 50 52 49 4e 54 45 52 20 41 44     Fatal PRINTER AD
    1dc4:	44 52 45 53 53 20 6f 75 74 20 6f 66 20 72 61 6e     DRESS out of ran
    1dd4:	67 65 3a 20 25 6c 64 20 64 69 73 61 62 6c 65 64     ge: %ld disabled
    1de4:	3a 25 64 0a 00                                      :%d..

00001de9 <__c.4655>:
    1de9:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1df9:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1e09:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001e13 <__c.4651>:
    1e13:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1e23:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1e33:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001e3b <__c.4649>:
    1e3b:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1e4b:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001e54 <__c.4645>:
    1e54:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1e64:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001e72 <__c.4643>:
    1e72:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001e7f <__c.4616>:
    1e7f:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1e8f:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1e9f:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1eaf:	6f 20 32 35 36 0a 00                                o 256..

00001eb6 <__c.4614>:
    1eb6:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1ec6:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1ed6:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1ee6:	20 32 35 36 0a 00                                    256..

00001eec <__c.4601>:
    1eec:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1efc:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001f0b <__c.4592>:
    1f0b:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    1f1b:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00001f2a <__c.4590>:
    1f2a:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    1f3a:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

00001f49 <__c.4588>:
    1f49:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    1f59:	20 76 61 6c 75 65 0a 00                              value..

00001f61 <__c.4565>:
    1f61:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1f71:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1f81:	0a 00                                               ..

00001f83 <__c.4557>:
    1f83:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1f93:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1fa3:	6c 6c 0a 00                                         ll..

00001fa7 <__c.4544>:
    1fa7:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1fb7:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1fc7:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001fd2 <__c.4542>:
    1fd2:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1fe2:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1ff2:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    2002:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

0000200a <__c.4540>:
    200a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    201a:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    202a:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    203a:	3a 25 73 0a 00                                      :%s..

0000203f <__c.4538>:
    203f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    204f:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    205f:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    206f:	55 4c 4c 0a 00                                      ULL..

00002074 <__c.4536>:
    2074:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    2084:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    2094:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    20a4:	66 20 72 61 6e 67 65 0a 00                          f range..

000020ad <__c.4534>:
    20ad:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    20bd:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    20cd:	6e 67 65 0a 00                                      nge..

000020d2 <__c.3767>:
    20d2:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

000020e3 <__c.3765>:
    20e3:	25 73 20 25 73 0a 00                                %s %s..

000020ea <__c.3761>:
    20ea:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    20fa:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00002107 <__c.4573>:
    2107:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    2117:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2127:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2137:	48 5d 0a 00                                         H]..

0000213b <__c.4571>:
    213b:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    214b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    215b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    216b:	48 5d 0a 00                                         H]..

0000216f <__c.4569>:
    216f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    217f:	74 5d 0a 00                                         t]..

00002183 <__c.4567>:
    2183:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002192 <__c.4565>:
    2192:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    21a2:	74 65 5d 0a 00                                      te]..

000021a7 <__c.4563>:
    21a7:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    21b7:	61 74 65 5d 0a 00                                   ate]..

000021bd <__c.4561>:
    21bd:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    21cd:	61 74 65 5d 0a 00                                   ate]..

000021d3 <__c.4556>:
    21d3:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    21e3:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    21f3:	5d 0a 00                                            ]..

000021f6 <__c.4549>:
    21f6:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    2206:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00002212 <__c.4542>:
    2212:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002221 <__c.4540>:
    2221:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2231:	5d 0a 00                                            ]..

00002234 <__c.4533>:
    2234:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00002240 <__c.4519>:
    2240:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    2250:	5d 0a 00                                            ]..

00002253 <__c.4517>:
    2253:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2263:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

0000226d <__c.4510>:
    226d:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    227d:	48 5d 0a 00                                         H]..

00002281 <__c.4508>:
    2281:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2291:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000022a1 <__c.4503>:
    22a1:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    22b1:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    22c1:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    22d1:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000022dd <__c.4500>:
    22dd:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    22ed:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000022fd <__c.4498>:
    22fd:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    230d:	29 5d 0a 00                                         )]..

00002311 <__c.4496>:
    2311:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2321:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2331:	28 25 64 29 5d 0a 00                                (%d)]..

00002338 <__c.4494>:
    2338:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2348:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00002356 <__c.4492>:
    2356:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2366:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002373 <__c.4489>:
    2373:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2383:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2393:	44 4f 5d 0a 00                                      DO]..

00002398 <__c.4486>:
    2398:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    23a8:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000023b1 <__c.4484>:
    23b1:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    23c1:	5d 0a 00                                            ]..

000023c4 <__c.4475>:
    23c4:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    23d4:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    23e4:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    23f4:	43 6f 64 65 73 5d 0a 00                             Codes]..

000023fc <__c.4472>:
    23fc:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    240c:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000241c <__c.4470>:
    241c:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    242c:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

0000243d <__c.4468>:
    243d:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    244d:	61 74 75 73 5d 0a 00                                atus]..

00002454 <__c.4466>:
    2454:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2464:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000246d <__c.4464>:
    246d:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    247d:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002488 <__c.4462>:
    2488:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2498:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000024a7 <__c.4460>:
    24a7:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    24b7:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000024c5 <__c.4458>:
    24c5:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000024d6 <__c.4456>:
    24d6:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    24e6:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000024f2 <__c.4454>:
    24f2:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2502:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000250f <__c.4452>:
    250f:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    251f:	2d 4f 50 5d 0a 00                                   -OP]..

00002525 <__c.4450>:
    2525:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2535:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002546 <__c.4448>:
    2546:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2556:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2566:	44 4f 5d 0a 00                                      DO]..

0000256b <__c.4446>:
    256b:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    257b:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002585 <__c.4444>:
    2585:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2595:	2d 4f 50 5d 0a 00                                   -OP]..

0000259b <__c.4442>:
    259b:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000025a9 <__c.4440>:
    25a9:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    25b9:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000025c5 <__c.4438>:
    25c5:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    25d5:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000025e2 <__c.4436>:
    25e2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25f2:	20 57 72 69 74 65 5d 0a 00                           Write]..

000025fb <__c.4433>:
    25fb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    260b:	20 52 65 61 64 5d 0a 00                              Read]..

00002613 <__c.4431>:
    2613:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2623:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000262c <__c.4428>:
    262c:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    263c:	25 64 29 5d 0a 00                                   %d)]..

00002642 <__c.4426>:
    2642:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2652:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000265b <__c.4424>:
    265b:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    266b:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    267b:	52 4f 52 5d 0a 00                                   ROR]..

00002681 <__c.4415>:
    2681:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2691:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

0000269b <__c.4410>:
    269b:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    26ab:	76 61 6c 69 64 5d 0a 00                             valid]..

000026b3 <__c.4405>:
    26b3:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    26c3:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000026d2 <__c.4403>:
    26d2:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    26e2:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000026ef <__c.4401>:
    26ef:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    26ff:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    270f:	5d 0a 00                                            ]..

00002712 <__c.4399>:
    2712:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002723 <__c.4391>:
    2723:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2733:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000273e <__c.4389>:
    273e:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    274e:	73 5d 0a 00                                         s]..

00002752 <__c.4379>:
    2752:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

0000275d <__c.4377>:
    275d:	25 73 3a 0a 00                                      %s:..

00002762 <__c.4352>:
    2762:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2772:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2782:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000278d <__c.4350>:
    278d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    279d:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    27ad:	49 4e 49 53 48 5d 0a 00                             INISH]..

000027b5 <__c.4346>:
    27b5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27c5:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    27d5:	58 48 29 5d 0a 00                                   XH)]..

000027db <__c.4344>:
    27db:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    27eb:	72 5d 0a 00                                         r]..

000027ef <__c.4340>:
    27ef:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    27ff:	5d 0a 00                                            ]..

00002802 <__c.4338>:
    2802:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2812:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2822:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000282b <__c.4326>:
    282b:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    283b:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    284b:	62 79 74 65 73 5d 0a 00                             bytes]..

00002853 <__c.4324>:
    2853:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2863:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2873:	53 48 5d 0a 00                                      SH]..

00002878 <__c.4319>:
    2878:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2888:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00002891 <__c.4317>:
    2891:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    28a1:	45 72 72 6f 72 5d 0a 00                             Error]..

000028a9 <__c.4315>:
    28a9:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    28b9:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000028c7 <__c.4313>:
    28c7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28d7:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    28e7:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000028ef <__c.4296>:
    28ef:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    28ff:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000290b <__c.4280>:
    290b:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    291b:	5d 0a 00                                            ]..

0000291e <__c.4255>:
    291e:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    292e:	0a 00                                               ..

00002930 <__c.4253>:
    2930:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

0000293d <__c.4410>:
    293d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    294d:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    295d:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002966 <__c.4407>:
    2966:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2976:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2986:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002991 <__c.4404>:
    2991:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29a1:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    29b1:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000029ba <__c.4399>:
    29ba:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    29ca:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000029da <__c.4396>:
    29da:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    29ea:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000029f6 <__c.4393>:
    29f6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2a06:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2a16:	0a 00                                               ..

00002a18 <__c.4390>:
    2a18:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a28:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002a37 <__c.4387>:
    2a37:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a47:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002a58 <__c.4384>:
    2a58:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a68:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002a78 <__c.4380>:
    2a78:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2a88:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2a98:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2aa8:	0a 00                                               ..

00002aaa <__c.4375>:
    2aaa:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002aba <__c.4372>:
    2aba:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2aca:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002ad9 <__c.4370>:
    2ad9:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2ae9:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2af9:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002b04 <__c.4368>:
    2b04:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2b14:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002b24 <__c.4366>:
    2b24:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2b34:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2b44:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b4d <__c.4364>:
    2b4d:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2b5d:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b69 <__c.4362>:
    2b69:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2b79:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2b89:	0a 00                                               ..

00002b8b <__c.4360>:
    2b8b:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002b9b <__c.4357>:
    2b9b:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2bab:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002bbc <__c.4355>:
    2bbc:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2bcc:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2bdc:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002be5 <__c.4353>:
    2be5:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2bf5:	36 5d 0a 00                                         6]..

00002bf9 <__c.4350>:
    2bf9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2c09:	35 5d 0a 00                                         5]..

00002c0d <__c.4347>:
    2c0d:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2c1d:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002c2d <__c.4344>:
    2c2d:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c3d:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2c4d:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002c5c <__c.4342>:
    2c5c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c6c:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c7d <__c.4340>:
    2c7d:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c8d:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c9e <__c.4338>:
    2c9e:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2cae:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2cbe:	0a 00                                               ..

00002cc0 <__c.4336>:
    2cc0:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2cd0:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2ce0:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2cf0:	0a 00                                               ..

00002cf2 <__c.4324>:
    2cf2:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2d02:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2d12:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2d22:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2d32:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002d43 <__c.4322>:
    2d43:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2d53:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d63:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d73:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d83:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d93 <__c.4320>:
    2d93:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2da3:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2db3:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2dc3:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2dd3:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002de3 <__c.4318>:
    2de3:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2df3:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e03:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2e13:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2e23:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e33 <__c.4313>:
    2e33:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2e43:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2e53:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2e63:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2e73:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2e83:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2e93:	58 48 5d 0a 00                                      XH]..

00002e98 <__c.4311>:
    2e98:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ea8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2eb8:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ec8:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ed8:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ee8:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ef8:	30 32 58 48 5d 0a 00                                02XH]..

00002eff <__c.4309>:
    2eff:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2f0f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f1f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f2f:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f3f:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f4f:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f5f:	30 32 58 48 5d 0a 00                                02XH]..

00002f66 <__c.4307>:
    2f66:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2f76:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f86:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f96:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2fa6:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2fb6:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2fc6:	30 32 58 48 5d 0a 00                                02XH]..

00002fcd <__c.4300>:
    2fcd:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002fdc <__c.4296>:
    2fdc:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2fec:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002ff6 <__c.4294>:
    2ff6:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00003006 <__c.4287>:
    3006:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00003013 <__c.4285>:
    3013:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    3023:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

0000302d <__c.4278>:
    302d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    303d:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

0000304c <__c.4271>:
    304c:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    305c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003066 <__c.4264>:
    3066:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3076:	6e 65 5d 0a 00                                      ne]..

0000307b <__c.4260>:
    307b:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000308b <__c.4219>:
    308b:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    309b:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    30ab:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000030b6 <__c.4249>:
    30b6:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    30c6:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    30d6:	25 30 34 58 48 5d 0a 00                             %04XH]..

000030de <__c.4226>:
    30de:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    30ee:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

000030f7 <__c.4212>:
    30f7:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3107:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003111 <__c.4210>:
    3111:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    3121:	75 73 5d 0a 00                                      us]..

00003126 <__c.4204>:
    3126:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3136:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003140 <__c.4202>:
    3140:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    3150:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

0000315e <__c.4196>:
    315e:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    316e:	74 61 74 75 73 5d 0a 00                             tatus]..

00003176 <__c.4218>:
    3176:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    3186:	74 65 73 0a 00                                      tes..

0000318b <__c.4216>:
    318b:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    319b:	0a 00                                               ..

0000319d <__c.4214>:
    319d:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    31ad:	0a 00                                               ..

000031af <__c.4209>:
    31af:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    31bf:	6e 65 64 0a 00                                      ned..

000031c4 <__c.4200>:
    31c4:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    31d4:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000031de <__c.4198>:
    31de:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    31ee:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

000031fa <__c.4193>:
    31fa:	25 30 38 6c 64 0d 00                                %08ld..

00003201 <__c.4187>:
    3201:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3211:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003222 <__c.4181>:
    3222:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003230 <__c.4179>:
    3230:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3240:	69 74 65 0a 00                                      ite..

00003245 <__c.4173>:
    3245:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00003251 <__c.4171>:
    3251:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    3261:	6f 3a 25 73 0a 00                                   o:%s..

00003267 <__c.4169>:
    3267:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3277:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3287:	74 00                                               t.

00003289 <__c.4837>:
    3289:	09 46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74     .Formating: wrot
    3299:	65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00        e %ld sectors..

000032a8 <__c.4835>:
    32a8:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32b8:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

000032c8 <__c.4833>:
    32c8:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32d8:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    32e8:	30 0a 00                                            0..

000032eb <__c.4831>:
    32eb:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32fb:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    330b:	70 74 79 0a 00                                      pty..

00003310 <__c.4829>:
    3310:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3320:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3330:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003339 <__c.4816>:
    3339:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3349:	20 25 31 30 73 0a 00                                 %10s..

00003350 <__c.4814>:
    3350:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3360:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3370:	74 20 66 6f 75 6e 64 0a 00                          t found..

00003379 <__c.4812>:
    3379:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3389:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3399:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33a9:	74 65 72 73 0a 00                                   ters..

000033af <__c.4810>:
    33af:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33bf:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    33cf:	65 6d 70 74 79 0a 00                                empty..

000033d6 <__c.4808>:
    33d6:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33e6:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    33f6:	65 6d 70 74 79 0a 00                                empty..

000033fd <__c.4806>:
    33fd:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    340d:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    341d:	20 65 6d 70 74 79 0a 00                              empty..

00003425 <__c.4797>:
    3425:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003434 <__c.4795>:
    3434:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3444:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3454:	20 66 6f 75 6e 64 0a 00                              found..

0000345c <__c.4793>:
    345c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    346c:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000347b <__c.4791>:
    347b:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    348b:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000349b <__c.4789>:
    349b:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34ab:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    34bb:	70 74 79 0a 00                                      pty..

000034c0 <__c.4781>:
    34c0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000034ce <__c.4776>:
    34ce:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034dc <__c.4774>:
    34dc:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34ec:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    34fc:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000350c <__c.4772>:
    350c:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    351c:	73 0a 00                                            s..

0000351f <__c.4770>:
    351f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    352f:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    353f:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000354e <__c.4768>:
    354e:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    355e:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000356a <__c.4766>:
    356a:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    357a:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003585 <__c.4764>:
    3585:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3595:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035a5 <__c.4747>:
    35a5:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035b3 <__c.4742>:
    35b3:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035c1 <__c.4740>:
    35c1:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    35d1:	73 0a 00                                            s..

000035d4 <__c.4738>:
    35d4:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35e4:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035ec <__c.4721>:
    35ec:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035fa <__c.4718>:
    35fa:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    360a:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    361a:	20 65 72 72 6f 72 0a 00                              error..

00003622 <__c.4710>:
    3622:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003630 <__c.4708>:
    3630:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3640:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3650:	20 65 72 72 6f 72 0a 00                              error..

00003658 <__c.4705>:
    3658:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3668:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3678:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3688:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3698:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36a8:	30 32 58 48 0a 00                                   02XH..

000036ae <__c.4703>:
    36ae:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36be:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    36ce:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    36de:	20 25 64 0a 00                                       %d..

000036e3 <__c.4699>:
    36e3:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000036f3 <__c.4697>:
    36f3:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3703:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3713:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3723:	30 78 45 30 31 33 0a 00                             0xE013..

0000372b <__c.4695>:
    372b:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    373b:	6e 64 3a 25 73 0a 00                                nd:%s..

00003742 <__c.4693>:
    3742:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3752:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000375a <__c.4669>:
    375a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003768 <__c.4667>:
    3768:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3778:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003781 <__c.4665>:
    3781:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3791:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000379a <__c.4663>:
    379a:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37aa:	20 20 25 34 64 0a 00                                  %4d..

000037b1 <__c.4661>:
    37b1:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    37c1:	20 20 20 25 73 0a 00                                   %s..

000037c8 <__c.4659>:
    37c8:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    37d8:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    37e8:	77 72 69 74 65 0a 00                                write..

000037ef <__c.4657>:
    37ef:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37ff:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    380f:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000381f <__c.4655>:
    381f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    382f:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    383f:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000384e <__c.4653>:
    384e:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385e:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    386e:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000387e <__c.4651>:
    387e:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    388e:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    389e:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038ad <__c.4649>:
    38ad:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38bd:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    38cd:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

000038db <__c.4647>:
    38db:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38eb:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    38fb:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    390b:	79 0a 00                                            y..

0000390e <__c.4633>:
    390e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000391c <__c.4631>:
    391c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000392a <__c.4626>:
    392a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003938 <__c.4609>:
    3938:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3948:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3958:	25 64 0a 00                                         %d..

0000395c <__c.4592>:
    395c:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    396c:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    397c:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    398c:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003995 <__c.4578>:
    3995:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39a5:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    39b5:	62 69 67 0a 00                                      big..

000039ba <__c.4576>:
    39ba:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39ca:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    39da:	63 74 65 72 73 0a 00                                cters..

000039e1 <__c.4569>:
    39e1:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    39f1:	73 0a 00                                            s..

000039f4 <__c.4567>:
    39f4:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a04:	73 0a 00                                            s..

00003a07 <__c.4565>:
    3a07:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3a17:	73 0a 00                                            s..

00003a1a <__c.4563>:
    3a1a:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003a2b <__c.4561>:
    3a2b:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a38 <__c.4559>:
    3a38:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a44 <__c.4557>:
    3a44:	0a 00                                               ..

00003a46 <__c.4554>:
    3a46:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a56:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a66:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a76 <__c.4552>:
    3a76:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a86:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a96:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3aa6:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3ab6:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003ac2 <__c.4549>:
    3ac2:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3ad2:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3ae2:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3af2:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b02 <__c.4547>:
    3b02:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b12:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b19 <__c.4537>:
    3b19:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b29:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b39:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b49:	64 0a 00                                            d..

00003b4c <__c.4535>:
    3b4c:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b5c:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b6c:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b7c:	64 0a 00                                            d..

00003b7f <__c.4533>:
    3b7f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b8f:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b9f:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3baf:	69 6c 65 64 0a 00                                   iled..

00003bb5 <__c.4531>:
    3bb5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bc5:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3bd5:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3be5:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003bf4 <__c.4518>:
    3bf4:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c04:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c14:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c24:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c34:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c45 <__c.4515>:
    3c45:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c55:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c65:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c6e <__c.4513>:
    3c6e:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c7e:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c8e:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c9e:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003ca6 <__c.4501>:
    3ca6:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3cb6:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3cc6:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3cd6:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3ce6:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003cf3 <__c.4476>:
    3cf3:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d03:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d13 <__c.4467>:
    3d13:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d23:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d33:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d43:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d4d <__c.4448>:
    3d4d:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003d5a <__c.4443>:
    3d5a:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d67 <__c.4438>:
    3d67:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d74 <__c.4430>:
    3d74:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003d81 <__c.4428>:
    3d81:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d91:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3da1:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3db1:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3dc1:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3dd1:	25 6c 64 0a 00                                      %ld..

00003dd6 <__c.4412>:
    3dd6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3de6:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3df6:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003e02 <__c.4410>:
    3e02:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e12:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e22:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003e2d <__c.4408>:
    3e2d:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e3d:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e4d:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e5d:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e6d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e78 <__c.4406>:
    3e78:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e88:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e98:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ea8:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3eb8:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003ec3 <__c.4404>:
    3ec3:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ed3:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3ee3:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003ef1 <__c.4402>:
    3ef1:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f01:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3f11:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3f21:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003f32 <__c.4400>:
    3f32:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f42:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f52:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3f62:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f72:	58 68 0a 00                                         Xh..

00003f76 <__c.4398>:
    3f76:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f86:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f97 <__c.4392>:
    3f97:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fa7:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3fb7:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003fc3 <__c.4390>:
    3fc3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fd3:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3fe3:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003ff2 <__c.4388>:
    3ff2:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4002:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    4012:	25 6c 64 0a 00                                      %ld..

00004017 <__c.4386>:
    4017:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4027:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4037:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    4047:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004050 <__c.4384>:
    4050:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4060:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4070:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    4080:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004089 <__c.4382>:
    4089:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    4099:	58 48 20 3e 20 31 0a 00                             XH > 1..

000040a1 <__c.4380>:
    40a1:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40b1:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    40c1:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    40d1:	64 20 31 30 30 30 48 0a 00                          d 1000H..

000040da <__c.4378>:
    40da:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    40ea:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

000040f9 <__c.4371>:
    40f9:	0a 00                                               ..

000040fb <__c.4369>:
    40fb:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    410b:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004115 <__c.4367>:
    4115:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4125:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004131 <__c.4365>:
    4131:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    4141:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000414e <__c.4363>:
    414e:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    415e:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000416b <__c.4361>:
    416b:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    417b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004188 <__c.4359>:
    4188:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4198:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000041a4 <__c.4357>:
    41a4:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    41b4:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041c0 <__c.4355>:
    41c0:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    41d0:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041da <__c.4353>:
    41da:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    41ea:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041f4 <__c.4351>:
    41f4:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4204:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004210 <__c.4349>:
    4210:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4220:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000422c <__c.4347>:
    422c:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    423c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004249 <__c.4345>:
    4249:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4259:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004266 <__c.4343>:
    4266:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4276:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004282 <__c.4341>:
    4282:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4292:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000429c <__c.4339>:
    429c:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    42ac:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042b9 <__c.4337>:
    42b9:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    42c9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042d6 <__c.4335>:
    42d6:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    42e6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042f3 <__c.4333>:
    42f3:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4303:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004310 <__c.4331>:
    4310:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4320:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000432d <__c.4329>:
    432d:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    433d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000434a <__c.4327>:
    434a:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    435a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004367 <__c.4325>:
    4367:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4377:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004384 <__c.4323>:
    4384:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4394:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000439e <__c.4321>:
    439e:	0a 25 73 0a 00                                      .%s..

000043a3 <__c.4198>:
    43a3:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    43b3:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    43c3:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    43d3:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000043e0 <__c.4189>:
    43e0:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    43f0:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4400:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4410:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000441c <__c.4180>:
    441c:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    442c:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000443d <__c.4173>:
    443d:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    444d:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004456 <__c.4167>:
    4456:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4466:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4476:	25 73 5d 0a 00                                      %s]..

0000447b <__c.4155>:
    447b:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    448b:	6f 69 6e 74 65 72 0a 00                             ointer..

00004493 <__c.4150>:
    4493:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    44a3:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    44b3:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000044bc <__c.4144>:
    44bc:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    44cc:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

000044dd <__c.4131>:
    44dd:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    44ed:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    44fd:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    450d:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    451d:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    452d:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    453d:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    454d:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    455d:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    456d:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    457d:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    458d:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    459d:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    45ad:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    45bd:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    45cd:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    45dd:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    45ed:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    45fd:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    460d:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    461d:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    462d:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    463d:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    464d:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    465d:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    466d:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    467d:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    468d:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    469d:	75 67 67 69 6e 67 0a 0a 00                          ugging...

000046a6 <__c.4129>:
    46a6:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

000046b0 <__c.4597>:
    46b0:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    46c0:	53 4b 0a 00                                         SK..

000046c4 <__c.4595>:
    46c4:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    46d4:	30 34 78 48 0a 00                                   04xH..

000046da <__c.4593>:
    46da:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    46ea:	64 6f 6e 65 0a 00                                   done..

000046f0 <__c.4591>:
    46f0:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4700:	6f 6e 65 0a 00                                      one..

00004705 <__c.4589>:
    4705:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4715:	61 6c 69 7a 65 64 0a 00                             alized..

0000471d <__c.4587>:
    471d:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    472d:	0a 00                                               ..

0000472f <__c.4585>:
    472f:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    473f:	7a 65 64 0a 00                                      zed..

00004744 <__c.4583>:
    4744:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4754:	69 7a 65 64 0a 00                                   ized..

0000475a <__c.4581>:
    475a:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000476b <__c.4579>:
    476b:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    477b:	20 73 74 61 72 74 0a 00                              start..

00004783 <__c.4577>:
    4783:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4793:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000479d <__c.4575>:
    479d:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    47ad:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

000047ba <__c.4573>:
    47ba:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    47ca:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000047d8 <__c.4571>:
    47d8:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    47e8:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

000047f5 <__c.4569>:
    47f5:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004804 <__c.4567>:
    4804:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4814:	0a 00                                               ..

00004816 <__c.4565>:
    4816:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4826:	20 62 75 73 0a 00                                    bus..

0000482c <__c.4563>:
    482c:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    483c:	20 62 75 73 0a 00                                    bus..

00004842 <__c.4561>:
    4842:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4852:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000485c <__c.4559>:
    485c:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    486c:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004876 <__c.4557>:
    4876:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4886:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4896:	35 64 69 73 6b 0a 00                                5disk..

0000489d <__c.4555>:
    489d:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048ad <__c.4553>:
    48ad:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    48bd:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000048ca <__c.4551>:
    48ca:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    48da:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000048e9 <__c.4549>:
    48e9:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    48f9:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4909:	3a 20 25 6c 64 0a 00                                : %ld..

00004910 <__c.4547>:
    4910:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004921 <__c.4545>:
    4921:	53 74 61 72 74 0a 00                                Start..

00004928 <__c.4537>:
    4928:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004934 <__c.4535>:
    4934:	0a 3e 00                                            .>.

00004937 <__c.4525>:
    4937:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    4947:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    4957:	65 0a 72 65 73 65 74 0a 0a 00                       e.reset...

00004961 <__c.4519>:
    4961:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

0000496c <__c.4517>:
    496c:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

0000497b <__c.4513>:
    497b:	0a 00                                               ..

0000497d <__c.4511>:
    497d:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    498d:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004997 <__c.4509>:
    4997:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    49a7:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000049b1 <__c.4507>:
    49b1:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    49c1:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    49d1:	35 64 69 73 6b 0a 00                                5disk..

000049d8 <__c.4505>:
    49d8:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000049e8 <__c.4503>:
    49e8:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    49f8:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004a05 <__c.4501>:
    4a05:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4a15:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004a24 <__c.4499>:
    4a24:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4a34:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4a44:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

00004a54 <__ctors_end>:
    4a54:	11 24       	eor	r1, r1
    4a56:	1f be       	out	0x3f, r1	; 63
    4a58:	cf ef       	ldi	r28, 0xFF	; 255
    4a5a:	d0 e4       	ldi	r29, 0x40	; 64
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	cd bf       	out	0x3d, r28	; 61

00004a60 <__do_copy_data>:
    4a60:	17 e1       	ldi	r17, 0x17	; 23
    4a62:	a0 e0       	ldi	r26, 0x00	; 0
    4a64:	b1 e0       	ldi	r27, 0x01	; 1
    4a66:	e6 ed       	ldi	r30, 0xD6	; 214
    4a68:	f2 ed       	ldi	r31, 0xD2	; 210
    4a6a:	01 e0       	ldi	r16, 0x01	; 1
    4a6c:	0b bf       	out	0x3b, r16	; 59
    4a6e:	02 c0       	rjmp	.+4      	; 0x4a74 <__do_copy_data+0x14>
    4a70:	07 90       	elpm	r0, Z+
    4a72:	0d 92       	st	X+, r0
    4a74:	a6 36       	cpi	r26, 0x66	; 102
    4a76:	b1 07       	cpc	r27, r17
    4a78:	d9 f7       	brne	.-10     	; 0x4a70 <__do_copy_data+0x10>

00004a7a <__do_clear_bss>:
    4a7a:	21 e2       	ldi	r18, 0x21	; 33
    4a7c:	a6 e6       	ldi	r26, 0x66	; 102
    4a7e:	b7 e1       	ldi	r27, 0x17	; 23
    4a80:	01 c0       	rjmp	.+2      	; 0x4a84 <.do_clear_bss_start>

00004a82 <.do_clear_bss_loop>:
    4a82:	1d 92       	st	X+, r1

00004a84 <.do_clear_bss_start>:
    4a84:	ae 3b       	cpi	r26, 0xBE	; 190
    4a86:	b2 07       	cpc	r27, r18
    4a88:	e1 f7       	brne	.-8      	; 0x4a82 <.do_clear_bss_loop>
    4a8a:	0e 94 c8 e1 	call	0x1c390	; 0x1c390 <main>
    4a8e:	0c 94 69 e9 	jmp	0x1d2d2	; 0x1d2d2 <_exit>

00004a92 <__bad_interrupt>:
    4a92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004a96 <vfprintf>:
    4a96:	2f 92       	push	r2
    4a98:	3f 92       	push	r3
    4a9a:	4f 92       	push	r4
    4a9c:	5f 92       	push	r5
    4a9e:	6f 92       	push	r6
    4aa0:	7f 92       	push	r7
    4aa2:	8f 92       	push	r8
    4aa4:	9f 92       	push	r9
    4aa6:	af 92       	push	r10
    4aa8:	bf 92       	push	r11
    4aaa:	cf 92       	push	r12
    4aac:	df 92       	push	r13
    4aae:	ef 92       	push	r14
    4ab0:	ff 92       	push	r15
    4ab2:	0f 93       	push	r16
    4ab4:	1f 93       	push	r17
    4ab6:	cf 93       	push	r28
    4ab8:	df 93       	push	r29
    4aba:	cd b7       	in	r28, 0x3d	; 61
    4abc:	de b7       	in	r29, 0x3e	; 62
    4abe:	60 97       	sbiw	r28, 0x10	; 16
    4ac0:	0f b6       	in	r0, 0x3f	; 63
    4ac2:	f8 94       	cli
    4ac4:	de bf       	out	0x3e, r29	; 62
    4ac6:	0f be       	out	0x3f, r0	; 63
    4ac8:	cd bf       	out	0x3d, r28	; 61
    4aca:	7c 01       	movw	r14, r24
    4acc:	1b 01       	movw	r2, r22
    4ace:	6a 01       	movw	r12, r20
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	17 82       	std	Z+7, r1	; 0x07
    4ad4:	16 82       	std	Z+6, r1	; 0x06
    4ad6:	83 81       	ldd	r24, Z+3	; 0x03
    4ad8:	81 ff       	sbrs	r24, 1
    4ada:	44 c3       	rjmp	.+1672   	; 0x5164 <vfprintf+0x6ce>
    4adc:	9e 01       	movw	r18, r28
    4ade:	2f 5f       	subi	r18, 0xFF	; 255
    4ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae2:	39 01       	movw	r6, r18
    4ae4:	f7 01       	movw	r30, r14
    4ae6:	93 81       	ldd	r25, Z+3	; 0x03
    4ae8:	f1 01       	movw	r30, r2
    4aea:	93 fd       	sbrc	r25, 3
    4aec:	85 91       	lpm	r24, Z+
    4aee:	93 ff       	sbrs	r25, 3
    4af0:	81 91       	ld	r24, Z+
    4af2:	1f 01       	movw	r2, r30
    4af4:	88 23       	and	r24, r24
    4af6:	09 f4       	brne	.+2      	; 0x4afa <vfprintf+0x64>
    4af8:	31 c3       	rjmp	.+1634   	; 0x515c <vfprintf+0x6c6>
    4afa:	85 32       	cpi	r24, 0x25	; 37
    4afc:	39 f4       	brne	.+14     	; 0x4b0c <vfprintf+0x76>
    4afe:	93 fd       	sbrc	r25, 3
    4b00:	85 91       	lpm	r24, Z+
    4b02:	93 ff       	sbrs	r25, 3
    4b04:	81 91       	ld	r24, Z+
    4b06:	1f 01       	movw	r2, r30
    4b08:	85 32       	cpi	r24, 0x25	; 37
    4b0a:	39 f4       	brne	.+14     	; 0x4b1a <vfprintf+0x84>
    4b0c:	b7 01       	movw	r22, r14
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4b14:	56 01       	movw	r10, r12
    4b16:	65 01       	movw	r12, r10
    4b18:	e5 cf       	rjmp	.-54     	; 0x4ae4 <vfprintf+0x4e>
    4b1a:	10 e0       	ldi	r17, 0x00	; 0
    4b1c:	51 2c       	mov	r5, r1
    4b1e:	91 2c       	mov	r9, r1
    4b20:	ff e1       	ldi	r31, 0x1F	; 31
    4b22:	f9 15       	cp	r31, r9
    4b24:	d8 f0       	brcs	.+54     	; 0x4b5c <vfprintf+0xc6>
    4b26:	8b 32       	cpi	r24, 0x2B	; 43
    4b28:	79 f0       	breq	.+30     	; 0x4b48 <vfprintf+0xb2>
    4b2a:	38 f4       	brcc	.+14     	; 0x4b3a <vfprintf+0xa4>
    4b2c:	80 32       	cpi	r24, 0x20	; 32
    4b2e:	79 f0       	breq	.+30     	; 0x4b4e <vfprintf+0xb8>
    4b30:	83 32       	cpi	r24, 0x23	; 35
    4b32:	a1 f4       	brne	.+40     	; 0x4b5c <vfprintf+0xc6>
    4b34:	f9 2d       	mov	r31, r9
    4b36:	f0 61       	ori	r31, 0x10	; 16
    4b38:	2e c0       	rjmp	.+92     	; 0x4b96 <vfprintf+0x100>
    4b3a:	8d 32       	cpi	r24, 0x2D	; 45
    4b3c:	61 f0       	breq	.+24     	; 0x4b56 <vfprintf+0xc0>
    4b3e:	80 33       	cpi	r24, 0x30	; 48
    4b40:	69 f4       	brne	.+26     	; 0x4b5c <vfprintf+0xc6>
    4b42:	29 2d       	mov	r18, r9
    4b44:	21 60       	ori	r18, 0x01	; 1
    4b46:	2d c0       	rjmp	.+90     	; 0x4ba2 <vfprintf+0x10c>
    4b48:	39 2d       	mov	r19, r9
    4b4a:	32 60       	ori	r19, 0x02	; 2
    4b4c:	93 2e       	mov	r9, r19
    4b4e:	89 2d       	mov	r24, r9
    4b50:	84 60       	ori	r24, 0x04	; 4
    4b52:	98 2e       	mov	r9, r24
    4b54:	2a c0       	rjmp	.+84     	; 0x4baa <vfprintf+0x114>
    4b56:	e9 2d       	mov	r30, r9
    4b58:	e8 60       	ori	r30, 0x08	; 8
    4b5a:	15 c0       	rjmp	.+42     	; 0x4b86 <vfprintf+0xf0>
    4b5c:	97 fc       	sbrc	r9, 7
    4b5e:	2d c0       	rjmp	.+90     	; 0x4bba <vfprintf+0x124>
    4b60:	20 ed       	ldi	r18, 0xD0	; 208
    4b62:	28 0f       	add	r18, r24
    4b64:	2a 30       	cpi	r18, 0x0A	; 10
    4b66:	88 f4       	brcc	.+34     	; 0x4b8a <vfprintf+0xf4>
    4b68:	96 fe       	sbrs	r9, 6
    4b6a:	06 c0       	rjmp	.+12     	; 0x4b78 <vfprintf+0xe2>
    4b6c:	3a e0       	ldi	r19, 0x0A	; 10
    4b6e:	13 9f       	mul	r17, r19
    4b70:	20 0d       	add	r18, r0
    4b72:	11 24       	eor	r1, r1
    4b74:	12 2f       	mov	r17, r18
    4b76:	19 c0       	rjmp	.+50     	; 0x4baa <vfprintf+0x114>
    4b78:	8a e0       	ldi	r24, 0x0A	; 10
    4b7a:	58 9e       	mul	r5, r24
    4b7c:	20 0d       	add	r18, r0
    4b7e:	11 24       	eor	r1, r1
    4b80:	52 2e       	mov	r5, r18
    4b82:	e9 2d       	mov	r30, r9
    4b84:	e0 62       	ori	r30, 0x20	; 32
    4b86:	9e 2e       	mov	r9, r30
    4b88:	10 c0       	rjmp	.+32     	; 0x4baa <vfprintf+0x114>
    4b8a:	8e 32       	cpi	r24, 0x2E	; 46
    4b8c:	31 f4       	brne	.+12     	; 0x4b9a <vfprintf+0x104>
    4b8e:	96 fc       	sbrc	r9, 6
    4b90:	e5 c2       	rjmp	.+1482   	; 0x515c <vfprintf+0x6c6>
    4b92:	f9 2d       	mov	r31, r9
    4b94:	f0 64       	ori	r31, 0x40	; 64
    4b96:	9f 2e       	mov	r9, r31
    4b98:	08 c0       	rjmp	.+16     	; 0x4baa <vfprintf+0x114>
    4b9a:	8c 36       	cpi	r24, 0x6C	; 108
    4b9c:	21 f4       	brne	.+8      	; 0x4ba6 <vfprintf+0x110>
    4b9e:	29 2d       	mov	r18, r9
    4ba0:	20 68       	ori	r18, 0x80	; 128
    4ba2:	92 2e       	mov	r9, r18
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <vfprintf+0x114>
    4ba6:	88 36       	cpi	r24, 0x68	; 104
    4ba8:	41 f4       	brne	.+16     	; 0x4bba <vfprintf+0x124>
    4baa:	f1 01       	movw	r30, r2
    4bac:	93 fd       	sbrc	r25, 3
    4bae:	85 91       	lpm	r24, Z+
    4bb0:	93 ff       	sbrs	r25, 3
    4bb2:	81 91       	ld	r24, Z+
    4bb4:	1f 01       	movw	r2, r30
    4bb6:	81 11       	cpse	r24, r1
    4bb8:	b3 cf       	rjmp	.-154    	; 0x4b20 <vfprintf+0x8a>
    4bba:	9b eb       	ldi	r25, 0xBB	; 187
    4bbc:	98 0f       	add	r25, r24
    4bbe:	93 30       	cpi	r25, 0x03	; 3
    4bc0:	20 f4       	brcc	.+8      	; 0x4bca <vfprintf+0x134>
    4bc2:	99 2d       	mov	r25, r9
    4bc4:	90 61       	ori	r25, 0x10	; 16
    4bc6:	80 5e       	subi	r24, 0xE0	; 224
    4bc8:	07 c0       	rjmp	.+14     	; 0x4bd8 <vfprintf+0x142>
    4bca:	9b e9       	ldi	r25, 0x9B	; 155
    4bcc:	98 0f       	add	r25, r24
    4bce:	93 30       	cpi	r25, 0x03	; 3
    4bd0:	08 f0       	brcs	.+2      	; 0x4bd4 <vfprintf+0x13e>
    4bd2:	66 c1       	rjmp	.+716    	; 0x4ea0 <vfprintf+0x40a>
    4bd4:	99 2d       	mov	r25, r9
    4bd6:	9f 7e       	andi	r25, 0xEF	; 239
    4bd8:	96 ff       	sbrs	r25, 6
    4bda:	16 e0       	ldi	r17, 0x06	; 6
    4bdc:	9f 73       	andi	r25, 0x3F	; 63
    4bde:	99 2e       	mov	r9, r25
    4be0:	85 36       	cpi	r24, 0x65	; 101
    4be2:	19 f4       	brne	.+6      	; 0x4bea <vfprintf+0x154>
    4be4:	90 64       	ori	r25, 0x40	; 64
    4be6:	99 2e       	mov	r9, r25
    4be8:	08 c0       	rjmp	.+16     	; 0x4bfa <vfprintf+0x164>
    4bea:	86 36       	cpi	r24, 0x66	; 102
    4bec:	21 f4       	brne	.+8      	; 0x4bf6 <vfprintf+0x160>
    4bee:	39 2f       	mov	r19, r25
    4bf0:	30 68       	ori	r19, 0x80	; 128
    4bf2:	93 2e       	mov	r9, r19
    4bf4:	02 c0       	rjmp	.+4      	; 0x4bfa <vfprintf+0x164>
    4bf6:	11 11       	cpse	r17, r1
    4bf8:	11 50       	subi	r17, 0x01	; 1
    4bfa:	97 fe       	sbrs	r9, 7
    4bfc:	07 c0       	rjmp	.+14     	; 0x4c0c <vfprintf+0x176>
    4bfe:	1c 33       	cpi	r17, 0x3C	; 60
    4c00:	50 f4       	brcc	.+20     	; 0x4c16 <vfprintf+0x180>
    4c02:	44 24       	eor	r4, r4
    4c04:	43 94       	inc	r4
    4c06:	41 0e       	add	r4, r17
    4c08:	27 e0       	ldi	r18, 0x07	; 7
    4c0a:	0b c0       	rjmp	.+22     	; 0x4c22 <vfprintf+0x18c>
    4c0c:	18 30       	cpi	r17, 0x08	; 8
    4c0e:	38 f0       	brcs	.+14     	; 0x4c1e <vfprintf+0x188>
    4c10:	27 e0       	ldi	r18, 0x07	; 7
    4c12:	17 e0       	ldi	r17, 0x07	; 7
    4c14:	05 c0       	rjmp	.+10     	; 0x4c20 <vfprintf+0x18a>
    4c16:	27 e0       	ldi	r18, 0x07	; 7
    4c18:	9c e3       	ldi	r25, 0x3C	; 60
    4c1a:	49 2e       	mov	r4, r25
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <vfprintf+0x18c>
    4c1e:	21 2f       	mov	r18, r17
    4c20:	41 2c       	mov	r4, r1
    4c22:	56 01       	movw	r10, r12
    4c24:	84 e0       	ldi	r24, 0x04	; 4
    4c26:	a8 0e       	add	r10, r24
    4c28:	b1 1c       	adc	r11, r1
    4c2a:	f6 01       	movw	r30, r12
    4c2c:	60 81       	ld	r22, Z
    4c2e:	71 81       	ldd	r23, Z+1	; 0x01
    4c30:	82 81       	ldd	r24, Z+2	; 0x02
    4c32:	93 81       	ldd	r25, Z+3	; 0x03
    4c34:	04 2d       	mov	r16, r4
    4c36:	a3 01       	movw	r20, r6
    4c38:	0e 94 16 e8 	call	0x1d02c	; 0x1d02c <__ftoa_engine>
    4c3c:	6c 01       	movw	r12, r24
    4c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    4c40:	fc 87       	std	Y+12, r31	; 0x0c
    4c42:	f0 ff       	sbrs	r31, 0
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <vfprintf+0x1b4>
    4c46:	f3 ff       	sbrs	r31, 3
    4c48:	06 c0       	rjmp	.+12     	; 0x4c56 <vfprintf+0x1c0>
    4c4a:	91 fc       	sbrc	r9, 1
    4c4c:	06 c0       	rjmp	.+12     	; 0x4c5a <vfprintf+0x1c4>
    4c4e:	92 fe       	sbrs	r9, 2
    4c50:	06 c0       	rjmp	.+12     	; 0x4c5e <vfprintf+0x1c8>
    4c52:	00 e2       	ldi	r16, 0x20	; 32
    4c54:	05 c0       	rjmp	.+10     	; 0x4c60 <vfprintf+0x1ca>
    4c56:	0d e2       	ldi	r16, 0x2D	; 45
    4c58:	03 c0       	rjmp	.+6      	; 0x4c60 <vfprintf+0x1ca>
    4c5a:	0b e2       	ldi	r16, 0x2B	; 43
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <vfprintf+0x1ca>
    4c5e:	00 e0       	ldi	r16, 0x00	; 0
    4c60:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c62:	8c 70       	andi	r24, 0x0C	; 12
    4c64:	19 f0       	breq	.+6      	; 0x4c6c <vfprintf+0x1d6>
    4c66:	01 11       	cpse	r16, r1
    4c68:	5a c2       	rjmp	.+1204   	; 0x511e <vfprintf+0x688>
    4c6a:	9b c2       	rjmp	.+1334   	; 0x51a2 <vfprintf+0x70c>
    4c6c:	97 fe       	sbrs	r9, 7
    4c6e:	10 c0       	rjmp	.+32     	; 0x4c90 <vfprintf+0x1fa>
    4c70:	4c 0c       	add	r4, r12
    4c72:	fc 85       	ldd	r31, Y+12	; 0x0c
    4c74:	f4 ff       	sbrs	r31, 4
    4c76:	04 c0       	rjmp	.+8      	; 0x4c80 <vfprintf+0x1ea>
    4c78:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7a:	81 33       	cpi	r24, 0x31	; 49
    4c7c:	09 f4       	brne	.+2      	; 0x4c80 <vfprintf+0x1ea>
    4c7e:	4a 94       	dec	r4
    4c80:	14 14       	cp	r1, r4
    4c82:	74 f5       	brge	.+92     	; 0x4ce0 <vfprintf+0x24a>
    4c84:	28 e0       	ldi	r18, 0x08	; 8
    4c86:	24 15       	cp	r18, r4
    4c88:	78 f5       	brcc	.+94     	; 0x4ce8 <vfprintf+0x252>
    4c8a:	88 e0       	ldi	r24, 0x08	; 8
    4c8c:	48 2e       	mov	r4, r24
    4c8e:	2c c0       	rjmp	.+88     	; 0x4ce8 <vfprintf+0x252>
    4c90:	96 fc       	sbrc	r9, 6
    4c92:	2a c0       	rjmp	.+84     	; 0x4ce8 <vfprintf+0x252>
    4c94:	81 2f       	mov	r24, r17
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	8c 15       	cp	r24, r12
    4c9a:	9d 05       	cpc	r25, r13
    4c9c:	9c f0       	brlt	.+38     	; 0x4cc4 <vfprintf+0x22e>
    4c9e:	3c ef       	ldi	r19, 0xFC	; 252
    4ca0:	c3 16       	cp	r12, r19
    4ca2:	3f ef       	ldi	r19, 0xFF	; 255
    4ca4:	d3 06       	cpc	r13, r19
    4ca6:	74 f0       	brlt	.+28     	; 0x4cc4 <vfprintf+0x22e>
    4ca8:	89 2d       	mov	r24, r9
    4caa:	80 68       	ori	r24, 0x80	; 128
    4cac:	98 2e       	mov	r9, r24
    4cae:	0a c0       	rjmp	.+20     	; 0x4cc4 <vfprintf+0x22e>
    4cb0:	e2 e0       	ldi	r30, 0x02	; 2
    4cb2:	f0 e0       	ldi	r31, 0x00	; 0
    4cb4:	ec 0f       	add	r30, r28
    4cb6:	fd 1f       	adc	r31, r29
    4cb8:	e1 0f       	add	r30, r17
    4cba:	f1 1d       	adc	r31, r1
    4cbc:	80 81       	ld	r24, Z
    4cbe:	80 33       	cpi	r24, 0x30	; 48
    4cc0:	19 f4       	brne	.+6      	; 0x4cc8 <vfprintf+0x232>
    4cc2:	11 50       	subi	r17, 0x01	; 1
    4cc4:	11 11       	cpse	r17, r1
    4cc6:	f4 cf       	rjmp	.-24     	; 0x4cb0 <vfprintf+0x21a>
    4cc8:	97 fe       	sbrs	r9, 7
    4cca:	0e c0       	rjmp	.+28     	; 0x4ce8 <vfprintf+0x252>
    4ccc:	44 24       	eor	r4, r4
    4cce:	43 94       	inc	r4
    4cd0:	41 0e       	add	r4, r17
    4cd2:	81 2f       	mov	r24, r17
    4cd4:	90 e0       	ldi	r25, 0x00	; 0
    4cd6:	c8 16       	cp	r12, r24
    4cd8:	d9 06       	cpc	r13, r25
    4cda:	2c f4       	brge	.+10     	; 0x4ce6 <vfprintf+0x250>
    4cdc:	1c 19       	sub	r17, r12
    4cde:	04 c0       	rjmp	.+8      	; 0x4ce8 <vfprintf+0x252>
    4ce0:	44 24       	eor	r4, r4
    4ce2:	43 94       	inc	r4
    4ce4:	01 c0       	rjmp	.+2      	; 0x4ce8 <vfprintf+0x252>
    4ce6:	10 e0       	ldi	r17, 0x00	; 0
    4ce8:	97 fe       	sbrs	r9, 7
    4cea:	06 c0       	rjmp	.+12     	; 0x4cf8 <vfprintf+0x262>
    4cec:	1c 14       	cp	r1, r12
    4cee:	1d 04       	cpc	r1, r13
    4cf0:	34 f4       	brge	.+12     	; 0x4cfe <vfprintf+0x268>
    4cf2:	c6 01       	movw	r24, r12
    4cf4:	01 96       	adiw	r24, 0x01	; 1
    4cf6:	05 c0       	rjmp	.+10     	; 0x4d02 <vfprintf+0x26c>
    4cf8:	85 e0       	ldi	r24, 0x05	; 5
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	02 c0       	rjmp	.+4      	; 0x4d02 <vfprintf+0x26c>
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	01 11       	cpse	r16, r1
    4d04:	01 96       	adiw	r24, 0x01	; 1
    4d06:	11 23       	and	r17, r17
    4d08:	31 f0       	breq	.+12     	; 0x4d16 <vfprintf+0x280>
    4d0a:	21 2f       	mov	r18, r17
    4d0c:	30 e0       	ldi	r19, 0x00	; 0
    4d0e:	2f 5f       	subi	r18, 0xFF	; 255
    4d10:	3f 4f       	sbci	r19, 0xFF	; 255
    4d12:	82 0f       	add	r24, r18
    4d14:	93 1f       	adc	r25, r19
    4d16:	25 2d       	mov	r18, r5
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	82 17       	cp	r24, r18
    4d1c:	93 07       	cpc	r25, r19
    4d1e:	14 f4       	brge	.+4      	; 0x4d24 <vfprintf+0x28e>
    4d20:	58 1a       	sub	r5, r24
    4d22:	01 c0       	rjmp	.+2      	; 0x4d26 <vfprintf+0x290>
    4d24:	51 2c       	mov	r5, r1
    4d26:	89 2d       	mov	r24, r9
    4d28:	89 70       	andi	r24, 0x09	; 9
    4d2a:	49 f4       	brne	.+18     	; 0x4d3e <vfprintf+0x2a8>
    4d2c:	55 20       	and	r5, r5
    4d2e:	39 f0       	breq	.+14     	; 0x4d3e <vfprintf+0x2a8>
    4d30:	b7 01       	movw	r22, r14
    4d32:	80 e2       	ldi	r24, 0x20	; 32
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4d3a:	5a 94       	dec	r5
    4d3c:	f7 cf       	rjmp	.-18     	; 0x4d2c <vfprintf+0x296>
    4d3e:	00 23       	and	r16, r16
    4d40:	29 f0       	breq	.+10     	; 0x4d4c <vfprintf+0x2b6>
    4d42:	b7 01       	movw	r22, r14
    4d44:	80 2f       	mov	r24, r16
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4d4c:	93 fc       	sbrc	r9, 3
    4d4e:	09 c0       	rjmp	.+18     	; 0x4d62 <vfprintf+0x2cc>
    4d50:	55 20       	and	r5, r5
    4d52:	39 f0       	breq	.+14     	; 0x4d62 <vfprintf+0x2cc>
    4d54:	b7 01       	movw	r22, r14
    4d56:	80 e3       	ldi	r24, 0x30	; 48
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4d5e:	5a 94       	dec	r5
    4d60:	f7 cf       	rjmp	.-18     	; 0x4d50 <vfprintf+0x2ba>
    4d62:	97 fe       	sbrs	r9, 7
    4d64:	4c c0       	rjmp	.+152    	; 0x4dfe <vfprintf+0x368>
    4d66:	46 01       	movw	r8, r12
    4d68:	d7 fe       	sbrs	r13, 7
    4d6a:	02 c0       	rjmp	.+4      	; 0x4d70 <vfprintf+0x2da>
    4d6c:	81 2c       	mov	r8, r1
    4d6e:	91 2c       	mov	r9, r1
    4d70:	c6 01       	movw	r24, r12
    4d72:	88 19       	sub	r24, r8
    4d74:	99 09       	sbc	r25, r9
    4d76:	f3 01       	movw	r30, r6
    4d78:	e8 0f       	add	r30, r24
    4d7a:	f9 1f       	adc	r31, r25
    4d7c:	fe 87       	std	Y+14, r31	; 0x0e
    4d7e:	ed 87       	std	Y+13, r30	; 0x0d
    4d80:	96 01       	movw	r18, r12
    4d82:	24 19       	sub	r18, r4
    4d84:	31 09       	sbc	r19, r1
    4d86:	38 8b       	std	Y+16, r19	; 0x10
    4d88:	2f 87       	std	Y+15, r18	; 0x0f
    4d8a:	01 2f       	mov	r16, r17
    4d8c:	10 e0       	ldi	r17, 0x00	; 0
    4d8e:	11 95       	neg	r17
    4d90:	01 95       	neg	r16
    4d92:	11 09       	sbc	r17, r1
    4d94:	3f ef       	ldi	r19, 0xFF	; 255
    4d96:	83 16       	cp	r8, r19
    4d98:	93 06       	cpc	r9, r19
    4d9a:	29 f4       	brne	.+10     	; 0x4da6 <vfprintf+0x310>
    4d9c:	b7 01       	movw	r22, r14
    4d9e:	8e e2       	ldi	r24, 0x2E	; 46
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4da6:	c8 14       	cp	r12, r8
    4da8:	d9 04       	cpc	r13, r9
    4daa:	4c f0       	brlt	.+18     	; 0x4dbe <vfprintf+0x328>
    4dac:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dae:	98 89       	ldd	r25, Y+16	; 0x10
    4db0:	88 15       	cp	r24, r8
    4db2:	99 05       	cpc	r25, r9
    4db4:	24 f4       	brge	.+8      	; 0x4dbe <vfprintf+0x328>
    4db6:	ed 85       	ldd	r30, Y+13	; 0x0d
    4db8:	fe 85       	ldd	r31, Y+14	; 0x0e
    4dba:	81 81       	ldd	r24, Z+1	; 0x01
    4dbc:	01 c0       	rjmp	.+2      	; 0x4dc0 <vfprintf+0x32a>
    4dbe:	80 e3       	ldi	r24, 0x30	; 48
    4dc0:	f1 e0       	ldi	r31, 0x01	; 1
    4dc2:	8f 1a       	sub	r8, r31
    4dc4:	91 08       	sbc	r9, r1
    4dc6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4dc8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4dca:	2f 5f       	subi	r18, 0xFF	; 255
    4dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dce:	3e 87       	std	Y+14, r19	; 0x0e
    4dd0:	2d 87       	std	Y+13, r18	; 0x0d
    4dd2:	80 16       	cp	r8, r16
    4dd4:	91 06       	cpc	r9, r17
    4dd6:	2c f0       	brlt	.+10     	; 0x4de2 <vfprintf+0x34c>
    4dd8:	b7 01       	movw	r22, r14
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4de0:	d9 cf       	rjmp	.-78     	; 0x4d94 <vfprintf+0x2fe>
    4de2:	c8 14       	cp	r12, r8
    4de4:	d9 04       	cpc	r13, r9
    4de6:	41 f4       	brne	.+16     	; 0x4df8 <vfprintf+0x362>
    4de8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dea:	96 33       	cpi	r25, 0x36	; 54
    4dec:	20 f4       	brcc	.+8      	; 0x4df6 <vfprintf+0x360>
    4dee:	95 33       	cpi	r25, 0x35	; 53
    4df0:	19 f4       	brne	.+6      	; 0x4df8 <vfprintf+0x362>
    4df2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4df4:	34 ff       	sbrs	r19, 4
    4df6:	81 e3       	ldi	r24, 0x31	; 49
    4df8:	b7 01       	movw	r22, r14
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	4e c0       	rjmp	.+156    	; 0x4e9a <vfprintf+0x404>
    4dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4e00:	81 33       	cpi	r24, 0x31	; 49
    4e02:	19 f0       	breq	.+6      	; 0x4e0a <vfprintf+0x374>
    4e04:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e06:	9f 7e       	andi	r25, 0xEF	; 239
    4e08:	9c 87       	std	Y+12, r25	; 0x0c
    4e0a:	b7 01       	movw	r22, r14
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e12:	11 11       	cpse	r17, r1
    4e14:	05 c0       	rjmp	.+10     	; 0x4e20 <vfprintf+0x38a>
    4e16:	94 fc       	sbrc	r9, 4
    4e18:	18 c0       	rjmp	.+48     	; 0x4e4a <vfprintf+0x3b4>
    4e1a:	85 e6       	ldi	r24, 0x65	; 101
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	17 c0       	rjmp	.+46     	; 0x4e4e <vfprintf+0x3b8>
    4e20:	b7 01       	movw	r22, r14
    4e22:	8e e2       	ldi	r24, 0x2E	; 46
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e2a:	1e 5f       	subi	r17, 0xFE	; 254
    4e2c:	82 e0       	ldi	r24, 0x02	; 2
    4e2e:	01 e0       	ldi	r16, 0x01	; 1
    4e30:	08 0f       	add	r16, r24
    4e32:	f3 01       	movw	r30, r6
    4e34:	e8 0f       	add	r30, r24
    4e36:	f1 1d       	adc	r31, r1
    4e38:	80 81       	ld	r24, Z
    4e3a:	b7 01       	movw	r22, r14
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e42:	80 2f       	mov	r24, r16
    4e44:	01 13       	cpse	r16, r17
    4e46:	f3 cf       	rjmp	.-26     	; 0x4e2e <vfprintf+0x398>
    4e48:	e6 cf       	rjmp	.-52     	; 0x4e16 <vfprintf+0x380>
    4e4a:	85 e4       	ldi	r24, 0x45	; 69
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	b7 01       	movw	r22, r14
    4e50:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e54:	d7 fc       	sbrc	r13, 7
    4e56:	06 c0       	rjmp	.+12     	; 0x4e64 <vfprintf+0x3ce>
    4e58:	c1 14       	cp	r12, r1
    4e5a:	d1 04       	cpc	r13, r1
    4e5c:	41 f4       	brne	.+16     	; 0x4e6e <vfprintf+0x3d8>
    4e5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e60:	e4 ff       	sbrs	r30, 4
    4e62:	05 c0       	rjmp	.+10     	; 0x4e6e <vfprintf+0x3d8>
    4e64:	d1 94       	neg	r13
    4e66:	c1 94       	neg	r12
    4e68:	d1 08       	sbc	r13, r1
    4e6a:	8d e2       	ldi	r24, 0x2D	; 45
    4e6c:	01 c0       	rjmp	.+2      	; 0x4e70 <vfprintf+0x3da>
    4e6e:	8b e2       	ldi	r24, 0x2B	; 43
    4e70:	b7 01       	movw	r22, r14
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e78:	80 e3       	ldi	r24, 0x30	; 48
    4e7a:	2a e0       	ldi	r18, 0x0A	; 10
    4e7c:	c2 16       	cp	r12, r18
    4e7e:	d1 04       	cpc	r13, r1
    4e80:	2c f0       	brlt	.+10     	; 0x4e8c <vfprintf+0x3f6>
    4e82:	8f 5f       	subi	r24, 0xFF	; 255
    4e84:	fa e0       	ldi	r31, 0x0A	; 10
    4e86:	cf 1a       	sub	r12, r31
    4e88:	d1 08       	sbc	r13, r1
    4e8a:	f7 cf       	rjmp	.-18     	; 0x4e7a <vfprintf+0x3e4>
    4e8c:	b7 01       	movw	r22, r14
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e94:	b7 01       	movw	r22, r14
    4e96:	c6 01       	movw	r24, r12
    4e98:	c0 96       	adiw	r24, 0x30	; 48
    4e9a:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4e9e:	54 c1       	rjmp	.+680    	; 0x5148 <vfprintf+0x6b2>
    4ea0:	83 36       	cpi	r24, 0x63	; 99
    4ea2:	31 f0       	breq	.+12     	; 0x4eb0 <vfprintf+0x41a>
    4ea4:	83 37       	cpi	r24, 0x73	; 115
    4ea6:	79 f0       	breq	.+30     	; 0x4ec6 <vfprintf+0x430>
    4ea8:	83 35       	cpi	r24, 0x53	; 83
    4eaa:	09 f0       	breq	.+2      	; 0x4eae <vfprintf+0x418>
    4eac:	56 c0       	rjmp	.+172    	; 0x4f5a <vfprintf+0x4c4>
    4eae:	20 c0       	rjmp	.+64     	; 0x4ef0 <vfprintf+0x45a>
    4eb0:	56 01       	movw	r10, r12
    4eb2:	32 e0       	ldi	r19, 0x02	; 2
    4eb4:	a3 0e       	add	r10, r19
    4eb6:	b1 1c       	adc	r11, r1
    4eb8:	f6 01       	movw	r30, r12
    4eba:	80 81       	ld	r24, Z
    4ebc:	89 83       	std	Y+1, r24	; 0x01
    4ebe:	01 e0       	ldi	r16, 0x01	; 1
    4ec0:	10 e0       	ldi	r17, 0x00	; 0
    4ec2:	63 01       	movw	r12, r6
    4ec4:	12 c0       	rjmp	.+36     	; 0x4eea <vfprintf+0x454>
    4ec6:	56 01       	movw	r10, r12
    4ec8:	f2 e0       	ldi	r31, 0x02	; 2
    4eca:	af 0e       	add	r10, r31
    4ecc:	b1 1c       	adc	r11, r1
    4ece:	f6 01       	movw	r30, r12
    4ed0:	c0 80       	ld	r12, Z
    4ed2:	d1 80       	ldd	r13, Z+1	; 0x01
    4ed4:	96 fe       	sbrs	r9, 6
    4ed6:	03 c0       	rjmp	.+6      	; 0x4ede <vfprintf+0x448>
    4ed8:	61 2f       	mov	r22, r17
    4eda:	70 e0       	ldi	r23, 0x00	; 0
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <vfprintf+0x44c>
    4ede:	6f ef       	ldi	r22, 0xFF	; 255
    4ee0:	7f ef       	ldi	r23, 0xFF	; 255
    4ee2:	c6 01       	movw	r24, r12
    4ee4:	0e 94 00 e9 	call	0x1d200	; 0x1d200 <strnlen>
    4ee8:	8c 01       	movw	r16, r24
    4eea:	f9 2d       	mov	r31, r9
    4eec:	ff 77       	andi	r31, 0x7F	; 127
    4eee:	14 c0       	rjmp	.+40     	; 0x4f18 <vfprintf+0x482>
    4ef0:	56 01       	movw	r10, r12
    4ef2:	22 e0       	ldi	r18, 0x02	; 2
    4ef4:	a2 0e       	add	r10, r18
    4ef6:	b1 1c       	adc	r11, r1
    4ef8:	f6 01       	movw	r30, r12
    4efa:	c0 80       	ld	r12, Z
    4efc:	d1 80       	ldd	r13, Z+1	; 0x01
    4efe:	96 fe       	sbrs	r9, 6
    4f00:	03 c0       	rjmp	.+6      	; 0x4f08 <vfprintf+0x472>
    4f02:	61 2f       	mov	r22, r17
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	02 c0       	rjmp	.+4      	; 0x4f0c <vfprintf+0x476>
    4f08:	6f ef       	ldi	r22, 0xFF	; 255
    4f0a:	7f ef       	ldi	r23, 0xFF	; 255
    4f0c:	c6 01       	movw	r24, r12
    4f0e:	0e 94 ee e8 	call	0x1d1dc	; 0x1d1dc <strnlen_P>
    4f12:	8c 01       	movw	r16, r24
    4f14:	f9 2d       	mov	r31, r9
    4f16:	f0 68       	ori	r31, 0x80	; 128
    4f18:	9f 2e       	mov	r9, r31
    4f1a:	f3 fd       	sbrc	r31, 3
    4f1c:	1a c0       	rjmp	.+52     	; 0x4f52 <vfprintf+0x4bc>
    4f1e:	85 2d       	mov	r24, r5
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	08 17       	cp	r16, r24
    4f24:	19 07       	cpc	r17, r25
    4f26:	a8 f4       	brcc	.+42     	; 0x4f52 <vfprintf+0x4bc>
    4f28:	b7 01       	movw	r22, r14
    4f2a:	80 e2       	ldi	r24, 0x20	; 32
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4f32:	5a 94       	dec	r5
    4f34:	f4 cf       	rjmp	.-24     	; 0x4f1e <vfprintf+0x488>
    4f36:	f6 01       	movw	r30, r12
    4f38:	97 fc       	sbrc	r9, 7
    4f3a:	85 91       	lpm	r24, Z+
    4f3c:	97 fe       	sbrs	r9, 7
    4f3e:	81 91       	ld	r24, Z+
    4f40:	6f 01       	movw	r12, r30
    4f42:	b7 01       	movw	r22, r14
    4f44:	90 e0       	ldi	r25, 0x00	; 0
    4f46:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    4f4a:	51 10       	cpse	r5, r1
    4f4c:	5a 94       	dec	r5
    4f4e:	01 50       	subi	r16, 0x01	; 1
    4f50:	11 09       	sbc	r17, r1
    4f52:	01 15       	cp	r16, r1
    4f54:	11 05       	cpc	r17, r1
    4f56:	79 f7       	brne	.-34     	; 0x4f36 <vfprintf+0x4a0>
    4f58:	f7 c0       	rjmp	.+494    	; 0x5148 <vfprintf+0x6b2>
    4f5a:	84 36       	cpi	r24, 0x64	; 100
    4f5c:	11 f0       	breq	.+4      	; 0x4f62 <vfprintf+0x4cc>
    4f5e:	89 36       	cpi	r24, 0x69	; 105
    4f60:	61 f5       	brne	.+88     	; 0x4fba <vfprintf+0x524>
    4f62:	56 01       	movw	r10, r12
    4f64:	97 fe       	sbrs	r9, 7
    4f66:	09 c0       	rjmp	.+18     	; 0x4f7a <vfprintf+0x4e4>
    4f68:	24 e0       	ldi	r18, 0x04	; 4
    4f6a:	a2 0e       	add	r10, r18
    4f6c:	b1 1c       	adc	r11, r1
    4f6e:	f6 01       	movw	r30, r12
    4f70:	60 81       	ld	r22, Z
    4f72:	71 81       	ldd	r23, Z+1	; 0x01
    4f74:	82 81       	ldd	r24, Z+2	; 0x02
    4f76:	93 81       	ldd	r25, Z+3	; 0x03
    4f78:	0a c0       	rjmp	.+20     	; 0x4f8e <vfprintf+0x4f8>
    4f7a:	f2 e0       	ldi	r31, 0x02	; 2
    4f7c:	af 0e       	add	r10, r31
    4f7e:	b1 1c       	adc	r11, r1
    4f80:	f6 01       	movw	r30, r12
    4f82:	60 81       	ld	r22, Z
    4f84:	71 81       	ldd	r23, Z+1	; 0x01
    4f86:	07 2e       	mov	r0, r23
    4f88:	00 0c       	add	r0, r0
    4f8a:	88 0b       	sbc	r24, r24
    4f8c:	99 0b       	sbc	r25, r25
    4f8e:	f9 2d       	mov	r31, r9
    4f90:	ff 76       	andi	r31, 0x6F	; 111
    4f92:	9f 2e       	mov	r9, r31
    4f94:	97 ff       	sbrs	r25, 7
    4f96:	09 c0       	rjmp	.+18     	; 0x4faa <vfprintf+0x514>
    4f98:	90 95       	com	r25
    4f9a:	80 95       	com	r24
    4f9c:	70 95       	com	r23
    4f9e:	61 95       	neg	r22
    4fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    4fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    4fa6:	f0 68       	ori	r31, 0x80	; 128
    4fa8:	9f 2e       	mov	r9, r31
    4faa:	2a e0       	ldi	r18, 0x0A	; 10
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	a3 01       	movw	r20, r6
    4fb0:	0e 94 0b e9 	call	0x1d216	; 0x1d216 <__ultoa_invert>
    4fb4:	c8 2e       	mov	r12, r24
    4fb6:	c6 18       	sub	r12, r6
    4fb8:	3f c0       	rjmp	.+126    	; 0x5038 <vfprintf+0x5a2>
    4fba:	09 2d       	mov	r16, r9
    4fbc:	85 37       	cpi	r24, 0x75	; 117
    4fbe:	21 f4       	brne	.+8      	; 0x4fc8 <vfprintf+0x532>
    4fc0:	0f 7e       	andi	r16, 0xEF	; 239
    4fc2:	2a e0       	ldi	r18, 0x0A	; 10
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	1d c0       	rjmp	.+58     	; 0x5002 <vfprintf+0x56c>
    4fc8:	09 7f       	andi	r16, 0xF9	; 249
    4fca:	8f 36       	cpi	r24, 0x6F	; 111
    4fcc:	91 f0       	breq	.+36     	; 0x4ff2 <vfprintf+0x55c>
    4fce:	18 f4       	brcc	.+6      	; 0x4fd6 <vfprintf+0x540>
    4fd0:	88 35       	cpi	r24, 0x58	; 88
    4fd2:	59 f0       	breq	.+22     	; 0x4fea <vfprintf+0x554>
    4fd4:	c3 c0       	rjmp	.+390    	; 0x515c <vfprintf+0x6c6>
    4fd6:	80 37       	cpi	r24, 0x70	; 112
    4fd8:	19 f0       	breq	.+6      	; 0x4fe0 <vfprintf+0x54a>
    4fda:	88 37       	cpi	r24, 0x78	; 120
    4fdc:	11 f0       	breq	.+4      	; 0x4fe2 <vfprintf+0x54c>
    4fde:	be c0       	rjmp	.+380    	; 0x515c <vfprintf+0x6c6>
    4fe0:	00 61       	ori	r16, 0x10	; 16
    4fe2:	04 ff       	sbrs	r16, 4
    4fe4:	09 c0       	rjmp	.+18     	; 0x4ff8 <vfprintf+0x562>
    4fe6:	04 60       	ori	r16, 0x04	; 4
    4fe8:	07 c0       	rjmp	.+14     	; 0x4ff8 <vfprintf+0x562>
    4fea:	94 fe       	sbrs	r9, 4
    4fec:	08 c0       	rjmp	.+16     	; 0x4ffe <vfprintf+0x568>
    4fee:	06 60       	ori	r16, 0x06	; 6
    4ff0:	06 c0       	rjmp	.+12     	; 0x4ffe <vfprintf+0x568>
    4ff2:	28 e0       	ldi	r18, 0x08	; 8
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	05 c0       	rjmp	.+10     	; 0x5002 <vfprintf+0x56c>
    4ff8:	20 e1       	ldi	r18, 0x10	; 16
    4ffa:	30 e0       	ldi	r19, 0x00	; 0
    4ffc:	02 c0       	rjmp	.+4      	; 0x5002 <vfprintf+0x56c>
    4ffe:	20 e1       	ldi	r18, 0x10	; 16
    5000:	32 e0       	ldi	r19, 0x02	; 2
    5002:	56 01       	movw	r10, r12
    5004:	07 ff       	sbrs	r16, 7
    5006:	09 c0       	rjmp	.+18     	; 0x501a <vfprintf+0x584>
    5008:	84 e0       	ldi	r24, 0x04	; 4
    500a:	a8 0e       	add	r10, r24
    500c:	b1 1c       	adc	r11, r1
    500e:	f6 01       	movw	r30, r12
    5010:	60 81       	ld	r22, Z
    5012:	71 81       	ldd	r23, Z+1	; 0x01
    5014:	82 81       	ldd	r24, Z+2	; 0x02
    5016:	93 81       	ldd	r25, Z+3	; 0x03
    5018:	08 c0       	rjmp	.+16     	; 0x502a <vfprintf+0x594>
    501a:	f2 e0       	ldi	r31, 0x02	; 2
    501c:	af 0e       	add	r10, r31
    501e:	b1 1c       	adc	r11, r1
    5020:	f6 01       	movw	r30, r12
    5022:	60 81       	ld	r22, Z
    5024:	71 81       	ldd	r23, Z+1	; 0x01
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	a3 01       	movw	r20, r6
    502c:	0e 94 0b e9 	call	0x1d216	; 0x1d216 <__ultoa_invert>
    5030:	c8 2e       	mov	r12, r24
    5032:	c6 18       	sub	r12, r6
    5034:	0f 77       	andi	r16, 0x7F	; 127
    5036:	90 2e       	mov	r9, r16
    5038:	96 fe       	sbrs	r9, 6
    503a:	0b c0       	rjmp	.+22     	; 0x5052 <vfprintf+0x5bc>
    503c:	09 2d       	mov	r16, r9
    503e:	0e 7f       	andi	r16, 0xFE	; 254
    5040:	c1 16       	cp	r12, r17
    5042:	50 f4       	brcc	.+20     	; 0x5058 <vfprintf+0x5c2>
    5044:	94 fe       	sbrs	r9, 4
    5046:	0a c0       	rjmp	.+20     	; 0x505c <vfprintf+0x5c6>
    5048:	92 fc       	sbrc	r9, 2
    504a:	08 c0       	rjmp	.+16     	; 0x505c <vfprintf+0x5c6>
    504c:	09 2d       	mov	r16, r9
    504e:	0e 7e       	andi	r16, 0xEE	; 238
    5050:	05 c0       	rjmp	.+10     	; 0x505c <vfprintf+0x5c6>
    5052:	dc 2c       	mov	r13, r12
    5054:	09 2d       	mov	r16, r9
    5056:	03 c0       	rjmp	.+6      	; 0x505e <vfprintf+0x5c8>
    5058:	dc 2c       	mov	r13, r12
    505a:	01 c0       	rjmp	.+2      	; 0x505e <vfprintf+0x5c8>
    505c:	d1 2e       	mov	r13, r17
    505e:	04 ff       	sbrs	r16, 4
    5060:	0d c0       	rjmp	.+26     	; 0x507c <vfprintf+0x5e6>
    5062:	fe 01       	movw	r30, r28
    5064:	ec 0d       	add	r30, r12
    5066:	f1 1d       	adc	r31, r1
    5068:	80 81       	ld	r24, Z
    506a:	80 33       	cpi	r24, 0x30	; 48
    506c:	11 f4       	brne	.+4      	; 0x5072 <vfprintf+0x5dc>
    506e:	09 7e       	andi	r16, 0xE9	; 233
    5070:	09 c0       	rjmp	.+18     	; 0x5084 <vfprintf+0x5ee>
    5072:	02 ff       	sbrs	r16, 2
    5074:	06 c0       	rjmp	.+12     	; 0x5082 <vfprintf+0x5ec>
    5076:	d3 94       	inc	r13
    5078:	d3 94       	inc	r13
    507a:	04 c0       	rjmp	.+8      	; 0x5084 <vfprintf+0x5ee>
    507c:	80 2f       	mov	r24, r16
    507e:	86 78       	andi	r24, 0x86	; 134
    5080:	09 f0       	breq	.+2      	; 0x5084 <vfprintf+0x5ee>
    5082:	d3 94       	inc	r13
    5084:	03 fd       	sbrc	r16, 3
    5086:	11 c0       	rjmp	.+34     	; 0x50aa <vfprintf+0x614>
    5088:	00 ff       	sbrs	r16, 0
    508a:	06 c0       	rjmp	.+12     	; 0x5098 <vfprintf+0x602>
    508c:	1c 2d       	mov	r17, r12
    508e:	d5 14       	cp	r13, r5
    5090:	80 f4       	brcc	.+32     	; 0x50b2 <vfprintf+0x61c>
    5092:	15 0d       	add	r17, r5
    5094:	1d 19       	sub	r17, r13
    5096:	0d c0       	rjmp	.+26     	; 0x50b2 <vfprintf+0x61c>
    5098:	d5 14       	cp	r13, r5
    509a:	58 f4       	brcc	.+22     	; 0x50b2 <vfprintf+0x61c>
    509c:	b7 01       	movw	r22, r14
    509e:	80 e2       	ldi	r24, 0x20	; 32
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    50a6:	d3 94       	inc	r13
    50a8:	f7 cf       	rjmp	.-18     	; 0x5098 <vfprintf+0x602>
    50aa:	d5 14       	cp	r13, r5
    50ac:	10 f4       	brcc	.+4      	; 0x50b2 <vfprintf+0x61c>
    50ae:	5d 18       	sub	r5, r13
    50b0:	01 c0       	rjmp	.+2      	; 0x50b4 <vfprintf+0x61e>
    50b2:	51 2c       	mov	r5, r1
    50b4:	04 ff       	sbrs	r16, 4
    50b6:	10 c0       	rjmp	.+32     	; 0x50d8 <vfprintf+0x642>
    50b8:	b7 01       	movw	r22, r14
    50ba:	80 e3       	ldi	r24, 0x30	; 48
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    50c2:	02 ff       	sbrs	r16, 2
    50c4:	17 c0       	rjmp	.+46     	; 0x50f4 <vfprintf+0x65e>
    50c6:	01 fd       	sbrc	r16, 1
    50c8:	03 c0       	rjmp	.+6      	; 0x50d0 <vfprintf+0x63a>
    50ca:	88 e7       	ldi	r24, 0x78	; 120
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	02 c0       	rjmp	.+4      	; 0x50d4 <vfprintf+0x63e>
    50d0:	88 e5       	ldi	r24, 0x58	; 88
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	b7 01       	movw	r22, r14
    50d6:	0c c0       	rjmp	.+24     	; 0x50f0 <vfprintf+0x65a>
    50d8:	80 2f       	mov	r24, r16
    50da:	86 78       	andi	r24, 0x86	; 134
    50dc:	59 f0       	breq	.+22     	; 0x50f4 <vfprintf+0x65e>
    50de:	01 ff       	sbrs	r16, 1
    50e0:	02 c0       	rjmp	.+4      	; 0x50e6 <vfprintf+0x650>
    50e2:	8b e2       	ldi	r24, 0x2B	; 43
    50e4:	01 c0       	rjmp	.+2      	; 0x50e8 <vfprintf+0x652>
    50e6:	80 e2       	ldi	r24, 0x20	; 32
    50e8:	07 fd       	sbrc	r16, 7
    50ea:	8d e2       	ldi	r24, 0x2D	; 45
    50ec:	b7 01       	movw	r22, r14
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    50f4:	c1 16       	cp	r12, r17
    50f6:	38 f4       	brcc	.+14     	; 0x5106 <vfprintf+0x670>
    50f8:	b7 01       	movw	r22, r14
    50fa:	80 e3       	ldi	r24, 0x30	; 48
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    5102:	11 50       	subi	r17, 0x01	; 1
    5104:	f7 cf       	rjmp	.-18     	; 0x50f4 <vfprintf+0x65e>
    5106:	ca 94       	dec	r12
    5108:	f3 01       	movw	r30, r6
    510a:	ec 0d       	add	r30, r12
    510c:	f1 1d       	adc	r31, r1
    510e:	80 81       	ld	r24, Z
    5110:	b7 01       	movw	r22, r14
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    5118:	c1 10       	cpse	r12, r1
    511a:	f5 cf       	rjmp	.-22     	; 0x5106 <vfprintf+0x670>
    511c:	15 c0       	rjmp	.+42     	; 0x5148 <vfprintf+0x6b2>
    511e:	f4 e0       	ldi	r31, 0x04	; 4
    5120:	f5 15       	cp	r31, r5
    5122:	60 f5       	brcc	.+88     	; 0x517c <vfprintf+0x6e6>
    5124:	84 e0       	ldi	r24, 0x04	; 4
    5126:	58 1a       	sub	r5, r24
    5128:	93 fe       	sbrs	r9, 3
    512a:	1f c0       	rjmp	.+62     	; 0x516a <vfprintf+0x6d4>
    512c:	01 11       	cpse	r16, r1
    512e:	27 c0       	rjmp	.+78     	; 0x517e <vfprintf+0x6e8>
    5130:	2c 85       	ldd	r18, Y+12	; 0x0c
    5132:	23 ff       	sbrs	r18, 3
    5134:	2a c0       	rjmp	.+84     	; 0x518a <vfprintf+0x6f4>
    5136:	06 ed       	ldi	r16, 0xD6	; 214
    5138:	11 e0       	ldi	r17, 0x01	; 1
    513a:	39 2d       	mov	r19, r9
    513c:	30 71       	andi	r19, 0x10	; 16
    513e:	93 2e       	mov	r9, r19
    5140:	f8 01       	movw	r30, r16
    5142:	84 91       	lpm	r24, Z
    5144:	81 11       	cpse	r24, r1
    5146:	24 c0       	rjmp	.+72     	; 0x5190 <vfprintf+0x6fa>
    5148:	55 20       	and	r5, r5
    514a:	09 f4       	brne	.+2      	; 0x514e <vfprintf+0x6b8>
    514c:	e4 cc       	rjmp	.-1592   	; 0x4b16 <vfprintf+0x80>
    514e:	b7 01       	movw	r22, r14
    5150:	80 e2       	ldi	r24, 0x20	; 32
    5152:	90 e0       	ldi	r25, 0x00	; 0
    5154:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    5158:	5a 94       	dec	r5
    515a:	f6 cf       	rjmp	.-20     	; 0x5148 <vfprintf+0x6b2>
    515c:	f7 01       	movw	r30, r14
    515e:	86 81       	ldd	r24, Z+6	; 0x06
    5160:	97 81       	ldd	r25, Z+7	; 0x07
    5162:	26 c0       	rjmp	.+76     	; 0x51b0 <vfprintf+0x71a>
    5164:	8f ef       	ldi	r24, 0xFF	; 255
    5166:	9f ef       	ldi	r25, 0xFF	; 255
    5168:	23 c0       	rjmp	.+70     	; 0x51b0 <vfprintf+0x71a>
    516a:	b7 01       	movw	r22, r14
    516c:	80 e2       	ldi	r24, 0x20	; 32
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    5174:	5a 94       	dec	r5
    5176:	51 10       	cpse	r5, r1
    5178:	f8 cf       	rjmp	.-16     	; 0x516a <vfprintf+0x6d4>
    517a:	d8 cf       	rjmp	.-80     	; 0x512c <vfprintf+0x696>
    517c:	51 2c       	mov	r5, r1
    517e:	b7 01       	movw	r22, r14
    5180:	80 2f       	mov	r24, r16
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    5188:	d3 cf       	rjmp	.-90     	; 0x5130 <vfprintf+0x69a>
    518a:	0a ed       	ldi	r16, 0xDA	; 218
    518c:	11 e0       	ldi	r17, 0x01	; 1
    518e:	d5 cf       	rjmp	.-86     	; 0x513a <vfprintf+0x6a4>
    5190:	91 10       	cpse	r9, r1
    5192:	80 52       	subi	r24, 0x20	; 32
    5194:	b7 01       	movw	r22, r14
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <fputc>
    519c:	0f 5f       	subi	r16, 0xFF	; 255
    519e:	1f 4f       	sbci	r17, 0xFF	; 255
    51a0:	cf cf       	rjmp	.-98     	; 0x5140 <vfprintf+0x6aa>
    51a2:	23 e0       	ldi	r18, 0x03	; 3
    51a4:	25 15       	cp	r18, r5
    51a6:	10 f4       	brcc	.+4      	; 0x51ac <vfprintf+0x716>
    51a8:	83 e0       	ldi	r24, 0x03	; 3
    51aa:	bd cf       	rjmp	.-134    	; 0x5126 <vfprintf+0x690>
    51ac:	51 2c       	mov	r5, r1
    51ae:	c0 cf       	rjmp	.-128    	; 0x5130 <vfprintf+0x69a>
    51b0:	60 96       	adiw	r28, 0x10	; 16
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	f8 94       	cli
    51b6:	de bf       	out	0x3e, r29	; 62
    51b8:	0f be       	out	0x3f, r0	; 63
    51ba:	cd bf       	out	0x3d, r28	; 61
    51bc:	df 91       	pop	r29
    51be:	cf 91       	pop	r28
    51c0:	1f 91       	pop	r17
    51c2:	0f 91       	pop	r16
    51c4:	ff 90       	pop	r15
    51c6:	ef 90       	pop	r14
    51c8:	df 90       	pop	r13
    51ca:	cf 90       	pop	r12
    51cc:	bf 90       	pop	r11
    51ce:	af 90       	pop	r10
    51d0:	9f 90       	pop	r9
    51d2:	8f 90       	pop	r8
    51d4:	7f 90       	pop	r7
    51d6:	6f 90       	pop	r6
    51d8:	5f 90       	pop	r5
    51da:	4f 90       	pop	r4
    51dc:	3f 90       	pop	r3
    51de:	2f 90       	pop	r2
    51e0:	08 95       	ret

000051e2 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    51e2:	e8 2f       	mov	r30, r24
    51e4:	e6 95       	lsr	r30
    51e6:	e6 95       	lsr	r30
    51e8:	e6 95       	lsr	r30
    51ea:	93 e0       	ldi	r25, 0x03	; 3
    51ec:	e9 9f       	mul	r30, r25
    51ee:	f0 01       	movw	r30, r0
    51f0:	11 24       	eor	r1, r1
    51f2:	32 a1       	ldd	r19, Z+34	; 0x22
    51f4:	28 2f       	mov	r18, r24
    51f6:	27 70       	andi	r18, 0x07	; 7
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	01 c0       	rjmp	.+2      	; 0x5200 <chip_select+0x1e>
    51fe:	88 0f       	add	r24, r24
    5200:	2a 95       	dec	r18
    5202:	ea f7       	brpl	.-6      	; 0x51fe <chip_select+0x1c>
    5204:	98 2f       	mov	r25, r24
    5206:	90 95       	com	r25
    5208:	93 23       	and	r25, r19
    520a:	92 a3       	std	Z+34, r25	; 0x22
    520c:	91 a1       	ldd	r25, Z+33	; 0x21
    520e:	89 2b       	or	r24, r25
    5210:	81 a3       	std	Z+33, r24	; 0x21
    5212:	08 95       	ret

00005214 <chip_deselect>:
    5214:	e8 2f       	mov	r30, r24
    5216:	e6 95       	lsr	r30
    5218:	e6 95       	lsr	r30
    521a:	e6 95       	lsr	r30
    521c:	93 e0       	ldi	r25, 0x03	; 3
    521e:	e9 9f       	mul	r30, r25
    5220:	f0 01       	movw	r30, r0
    5222:	11 24       	eor	r1, r1
    5224:	32 a1       	ldd	r19, Z+34	; 0x22
    5226:	28 2f       	mov	r18, r24
    5228:	27 70       	andi	r18, 0x07	; 7
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	01 c0       	rjmp	.+2      	; 0x5232 <chip_deselect+0x1e>
    5230:	88 0f       	add	r24, r24
    5232:	2a 95       	dec	r18
    5234:	ea f7       	brpl	.-6      	; 0x5230 <chip_deselect+0x1c>
    5236:	93 2f       	mov	r25, r19
    5238:	98 2b       	or	r25, r24
    523a:	92 a3       	std	Z+34, r25	; 0x22
    523c:	91 a1       	ldd	r25, Z+33	; 0x21
    523e:	89 2b       	or	r24, r25
    5240:	81 a3       	std	Z+33, r24	; 0x21
    5242:	08 95       	ret

00005244 <chip_select_init>:
    5244:	e7 cf       	rjmp	.-50     	; 0x5214 <chip_deselect>
    5246:	08 95       	ret

00005248 <spi_end>:
    5248:	cf 93       	push	r28
    524a:	c8 2f       	mov	r28, r24
    524c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5250:	8c 17       	cp	r24, r28
    5252:	a9 f0       	breq	.+42     	; 0x527e <spi_end+0x36>
    5254:	8f 3f       	cpi	r24, 0xFF	; 255
    5256:	99 f0       	breq	.+38     	; 0x527e <spi_end+0x36>
    5258:	1f 92       	push	r1
    525a:	cf 93       	push	r28
    525c:	1f 92       	push	r1
    525e:	8f 93       	push	r24
    5260:	88 ed       	ldi	r24, 0xD8	; 216
    5262:	92 e0       	ldi	r25, 0x02	; 2
    5264:	1f 92       	push	r1
    5266:	9f 93       	push	r25
    5268:	8f 93       	push	r24
    526a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    526e:	8d b7       	in	r24, 0x3d	; 61
    5270:	9e b7       	in	r25, 0x3e	; 62
    5272:	07 96       	adiw	r24, 0x07	; 7
    5274:	0f b6       	in	r0, 0x3f	; 63
    5276:	f8 94       	cli
    5278:	9e bf       	out	0x3e, r25	; 62
    527a:	0f be       	out	0x3f, r0	; 63
    527c:	8d bf       	out	0x3d, r24	; 61
    527e:	8c 2f       	mov	r24, r28
    5280:	c9 df       	rcall	.-110    	; 0x5214 <chip_deselect>
    5282:	8f ef       	ldi	r24, 0xFF	; 255
    5284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5288:	cf 91       	pop	r28
    528a:	08 95       	ret

0000528c <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    528c:	93 c4       	rjmp	.+2342   	; 0x5bb4 <SPI0_TX>
    528e:	08 95       	ret

00005290 <spi_RX_buffer>:
    5290:	bb c4       	rjmp	.+2422   	; 0x5c08 <SPI0_RX>
    5292:	08 95       	ret

00005294 <spi_TX>:
    5294:	a1 e0       	ldi	r26, 0x01	; 1
    5296:	b0 e0       	ldi	r27, 0x00	; 0
    5298:	e0 e5       	ldi	r30, 0x50	; 80
    529a:	f9 e2       	ldi	r31, 0x29	; 41
    529c:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    52a0:	89 83       	std	Y+1, r24	; 0x01
    52a2:	61 e0       	ldi	r22, 0x01	; 1
    52a4:	70 e0       	ldi	r23, 0x00	; 0
    52a6:	ce 01       	movw	r24, r28
    52a8:	01 96       	adiw	r24, 0x01	; 1
    52aa:	84 d4       	rcall	.+2312   	; 0x5bb4 <SPI0_TX>
    52ac:	21 96       	adiw	r28, 0x01	; 1
    52ae:	e2 e0       	ldi	r30, 0x02	; 2
    52b0:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

000052b4 <spi_init>:
    52b4:	cf 92       	push	r12
    52b6:	df 92       	push	r13
    52b8:	ef 92       	push	r14
    52ba:	ff 92       	push	r15
    52bc:	6b 01       	movw	r12, r22
    52be:	7c 01       	movw	r14, r24
    52c0:	84 2f       	mov	r24, r20
    52c2:	a8 df       	rcall	.-176    	; 0x5214 <chip_deselect>
    52c4:	8f ef       	ldi	r24, 0xFF	; 255
    52c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    52ca:	c7 01       	movw	r24, r14
    52cc:	b6 01       	movw	r22, r12
    52ce:	45 d4       	rcall	.+2186   	; 0x5b5a <SPI0_Init>
    52d0:	80 e0       	ldi	r24, 0x00	; 0
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	06 d4       	rcall	.+2060   	; 0x5ae2 <SPI0_Mode>
    52d6:	8f ef       	ldi	r24, 0xFF	; 255
    52d8:	dd df       	rcall	.-70     	; 0x5294 <spi_TX>
    52da:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    52de:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    52e2:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    52e6:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    52ea:	ff 90       	pop	r15
    52ec:	ef 90       	pop	r14
    52ee:	df 90       	pop	r13
    52f0:	cf 90       	pop	r12
    52f2:	08 95       	ret

000052f4 <spi_begin>:
    52f4:	cf 92       	push	r12
    52f6:	df 92       	push	r13
    52f8:	ef 92       	push	r14
    52fa:	ff 92       	push	r15
    52fc:	cf 93       	push	r28
    52fe:	df 93       	push	r29
    5300:	6b 01       	movw	r12, r22
    5302:	7c 01       	movw	r14, r24
    5304:	ea 01       	movw	r28, r20
    5306:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    530a:	8f 3f       	cpi	r24, 0xFF	; 255
    530c:	99 f0       	breq	.+38     	; 0x5334 <spi_begin+0x40>
    530e:	df 93       	push	r29
    5310:	4f 93       	push	r20
    5312:	1f 92       	push	r1
    5314:	8f 93       	push	r24
    5316:	86 ef       	ldi	r24, 0xF6	; 246
    5318:	92 e0       	ldi	r25, 0x02	; 2
    531a:	1f 92       	push	r1
    531c:	9f 93       	push	r25
    531e:	8f 93       	push	r24
    5320:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    5324:	8d b7       	in	r24, 0x3d	; 61
    5326:	9e b7       	in	r25, 0x3e	; 62
    5328:	07 96       	adiw	r24, 0x07	; 7
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	f8 94       	cli
    532e:	9e bf       	out	0x3e, r25	; 62
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	8d bf       	out	0x3d, r24	; 61
    5334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5338:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    533c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    5340:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5344:	8c 15       	cp	r24, r12
    5346:	9d 05       	cpc	r25, r13
    5348:	ae 05       	cpc	r26, r14
    534a:	bf 05       	cpc	r27, r15
    534c:	21 f0       	breq	.+8      	; 0x5356 <spi_begin+0x62>
    534e:	ae 01       	movw	r20, r28
    5350:	c7 01       	movw	r24, r14
    5352:	b6 01       	movw	r22, r12
    5354:	af df       	rcall	.-162    	; 0x52b4 <spi_init>
    5356:	8c 2f       	mov	r24, r28
    5358:	44 df       	rcall	.-376    	; 0x51e2 <chip_select>
    535a:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    535e:	df 91       	pop	r29
    5360:	cf 91       	pop	r28
    5362:	ff 90       	pop	r15
    5364:	ef 90       	pop	r14
    5366:	df 90       	pop	r13
    5368:	cf 90       	pop	r12
    536a:	08 95       	ret

0000536c <spi_TXRX>:
    536c:	a1 e0       	ldi	r26, 0x01	; 1
    536e:	b0 e0       	ldi	r27, 0x00	; 0
    5370:	ec eb       	ldi	r30, 0xBC	; 188
    5372:	f9 e2       	ldi	r31, 0x29	; 41
    5374:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    5378:	89 83       	std	Y+1, r24	; 0x01
    537a:	61 e0       	ldi	r22, 0x01	; 1
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	ce 01       	movw	r24, r28
    5380:	01 96       	adiw	r24, 0x01	; 1
    5382:	2c d4       	rcall	.+2136   	; 0x5bdc <SPI0_TXRX>
    5384:	89 81       	ldd	r24, Y+1	; 0x01
    5386:	21 96       	adiw	r28, 0x01	; 1
    5388:	e2 e0       	ldi	r30, 0x02	; 2
    538a:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000538e <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    538e:	a2 e0       	ldi	r26, 0x02	; 2
    5390:	b0 e0       	ldi	r27, 0x00	; 0
    5392:	ed ec       	ldi	r30, 0xCD	; 205
    5394:	f9 e2       	ldi	r31, 0x29	; 41
    5396:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    539a:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
    539e:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
    53a2:	21 15       	cp	r18, r1
    53a4:	31 05       	cpc	r19, r1
    53a6:	11 f4       	brne	.+4      	; 0x53ac <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53a8:	2e eb       	ldi	r18, 0xBE	; 190
    53aa:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    53ac:	ce 01       	movw	r24, r28
    53ae:	01 96       	adiw	r24, 0x01	; 1
    53b0:	82 1b       	sub	r24, r18
    53b2:	93 0b       	sbc	r25, r19
    53b4:	22 96       	adiw	r28, 0x02	; 2
    53b6:	e2 e0       	ldi	r30, 0x02	; 2
    53b8:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

000053bc <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    53bc:	a2 e0       	ldi	r26, 0x02	; 2
    53be:	b0 e0       	ldi	r27, 0x00	; 0
    53c0:	e4 ee       	ldi	r30, 0xE4	; 228
    53c2:	f9 e2       	ldi	r31, 0x29	; 41
    53c4:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    53c8:	e2 df       	rcall	.-60     	; 0x538e <freeRam>
    53ca:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    53cc:	9a 83       	std	Y+2, r25	; 0x02
    53ce:	9f 93       	push	r25
    53d0:	8f 93       	push	r24
    53d2:	8d e1       	ldi	r24, 0x1D	; 29
    53d4:	94 e0       	ldi	r25, 0x04	; 4
    53d6:	1f 92       	push	r1
    53d8:	9f 93       	push	r25
    53da:	8f 93       	push	r24
    53dc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    53e0:	8f ef       	ldi	r24, 0xFF	; 255
    53e2:	90 e4       	ldi	r25, 0x40	; 64
    53e4:	9f 93       	push	r25
    53e6:	8f 93       	push	r24
    53e8:	8a e0       	ldi	r24, 0x0A	; 10
    53ea:	94 e0       	ldi	r25, 0x04	; 4
    53ec:	1f 92       	push	r1
    53ee:	9f 93       	push	r25
    53f0:	8f 93       	push	r24
    53f2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    53f6:	ce 01       	movw	r24, r28
    53f8:	01 96       	adiw	r24, 0x01	; 1
    53fa:	9f 93       	push	r25
    53fc:	8f 93       	push	r24
    53fe:	87 ef       	ldi	r24, 0xF7	; 247
    5400:	93 e0       	ldi	r25, 0x03	; 3
    5402:	1f 92       	push	r1
    5404:	9f 93       	push	r25
    5406:	8f 93       	push	r24
    5408:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    540c:	8e eb       	ldi	r24, 0xBE	; 190
    540e:	91 e2       	ldi	r25, 0x21	; 33
    5410:	9f 93       	push	r25
    5412:	8f 93       	push	r24
    5414:	86 e6       	ldi	r24, 0x66	; 102
    5416:	97 e1       	ldi	r25, 0x17	; 23
    5418:	9f 93       	push	r25
    541a:	8f 93       	push	r24
    541c:	89 ed       	ldi	r24, 0xD9	; 217
    541e:	93 e0       	ldi	r25, 0x03	; 3
    5420:	1f 92       	push	r1
    5422:	9f 93       	push	r25
    5424:	8f 93       	push	r24
    5426:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    542a:	86 e6       	ldi	r24, 0x66	; 102
    542c:	97 e1       	ldi	r25, 0x17	; 23
    542e:	9f 93       	push	r25
    5430:	8f 93       	push	r24
    5432:	80 e0       	ldi	r24, 0x00	; 0
    5434:	91 e0       	ldi	r25, 0x01	; 1
    5436:	9f 93       	push	r25
    5438:	8f 93       	push	r24
    543a:	8b eb       	ldi	r24, 0xBB	; 187
    543c:	93 e0       	ldi	r25, 0x03	; 3
    543e:	1f 92       	push	r1
    5440:	9f 93       	push	r25
    5442:	8f 93       	push	r24
    5444:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5448:	80 e0       	ldi	r24, 0x00	; 0
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	9f 93       	push	r25
    544e:	8f 93       	push	r24
    5450:	8e eb       	ldi	r24, 0xBE	; 190
    5452:	91 e2       	ldi	r25, 0x21	; 33
    5454:	9f 93       	push	r25
    5456:	8f 93       	push	r24
    5458:	8d e9       	ldi	r24, 0x9D	; 157
    545a:	93 e0       	ldi	r25, 0x03	; 3
    545c:	1f 92       	push	r1
    545e:	9f 93       	push	r25
    5460:	8f 93       	push	r24
    5462:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    5466:	0f b6       	in	r0, 0x3f	; 63
    5468:	f8 94       	cli
    546a:	de bf       	out	0x3e, r29	; 62
    546c:	0f be       	out	0x3f, r0	; 63
    546e:	cd bf       	out	0x3d, r28	; 61
    5470:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_end+0x1>
    5474:	8f 93       	push	r24
    5476:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_end>
    547a:	8f 93       	push	r24
    547c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__malloc_heap_start+0x1>
    5480:	8f 93       	push	r24
    5482:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <__malloc_heap_start>
    5486:	8f 93       	push	r24
    5488:	8f e7       	ldi	r24, 0x7F	; 127
    548a:	93 e0       	ldi	r25, 0x03	; 3
    548c:	1f 92       	push	r1
    548e:	9f 93       	push	r25
    5490:	8f 93       	push	r24
    5492:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    5496:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <__brkval+0x1>
    549a:	8f 93       	push	r24
    549c:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <__brkval>
    54a0:	8f 93       	push	r24
    54a2:	8b e6       	ldi	r24, 0x6B	; 107
    54a4:	93 e0       	ldi	r25, 0x03	; 3
    54a6:	1f 92       	push	r1
    54a8:	9f 93       	push	r25
    54aa:	8f 93       	push	r24
    54ac:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

}
    54b0:	0f b6       	in	r0, 0x3f	; 63
    54b2:	f8 94       	cli
    54b4:	de bf       	out	0x3e, r29	; 62
    54b6:	0f be       	out	0x3f, r0	; 63
    54b8:	cd bf       	out	0x3d, r28	; 61
    54ba:	22 96       	adiw	r28, 0x02	; 2
    54bc:	e2 e0       	ldi	r30, 0x02	; 2
    54be:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

000054c2 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    54c2:	ef 92       	push	r14
    54c4:	ff 92       	push	r15
    54c6:	0f 93       	push	r16
    54c8:	1f 93       	push	r17
    54ca:	cf 93       	push	r28
    54cc:	df 93       	push	r29
    54ce:	18 2f       	mov	r17, r24
    54d0:	09 2f       	mov	r16, r25
    54d2:	f6 2e       	mov	r15, r22
    54d4:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    54d6:	0e 94 d7 e6 	call	0x1cdae	; 0x1cdae <calloc>
    54da:	ec 01       	movw	r28, r24
	if(!p)
    54dc:	89 2b       	or	r24, r25
    54de:	99 f4       	brne	.+38     	; 0x5506 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    54e0:	ef 92       	push	r14
    54e2:	ff 92       	push	r15
    54e4:	0f 93       	push	r16
    54e6:	1f 93       	push	r17
    54e8:	80 e5       	ldi	r24, 0x50	; 80
    54ea:	93 e0       	ldi	r25, 0x03	; 3
    54ec:	1f 92       	push	r1
    54ee:	9f 93       	push	r25
    54f0:	8f 93       	push	r24
    54f2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    54f6:	8d b7       	in	r24, 0x3d	; 61
    54f8:	9e b7       	in	r25, 0x3e	; 62
    54fa:	07 96       	adiw	r24, 0x07	; 7
    54fc:	0f b6       	in	r0, 0x3f	; 63
    54fe:	f8 94       	cli
    5500:	9e bf       	out	0x3e, r25	; 62
    5502:	0f be       	out	0x3f, r0	; 63
    5504:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5506:	ce 01       	movw	r24, r28
    5508:	cd b7       	in	r28, 0x3d	; 61
    550a:	de b7       	in	r29, 0x3e	; 62
    550c:	e6 e0       	ldi	r30, 0x06	; 6
    550e:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00005512 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	18 2f       	mov	r17, r24
    551c:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    551e:	61 e0       	ldi	r22, 0x01	; 1
    5520:	70 e0       	ldi	r23, 0x00	; 0
    5522:	0e 94 d7 e6 	call	0x1cdae	; 0x1cdae <calloc>
    5526:	ec 01       	movw	r28, r24
    if(!p)
    5528:	89 2b       	or	r24, r25
    552a:	71 f4       	brne	.+28     	; 0x5548 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    552c:	0f 93       	push	r16
    552e:	1f 93       	push	r17
    5530:	88 e3       	ldi	r24, 0x38	; 56
    5532:	93 e0       	ldi	r25, 0x03	; 3
    5534:	1f 92       	push	r1
    5536:	9f 93       	push	r25
    5538:	8f 93       	push	r24
    553a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    553e:	0f 90       	pop	r0
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	0f 90       	pop	r0
    5546:	0f 90       	pop	r0
    }
    return(p);
}
    5548:	ce 01       	movw	r24, r28
    554a:	df 91       	pop	r29
    554c:	cf 91       	pop	r28
    554e:	1f 91       	pop	r17
    5550:	0f 91       	pop	r16
    5552:	08 95       	ret

00005554 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5554:	00 97       	sbiw	r24, 0x00	; 0
    5556:	39 f1       	breq	.+78     	; 0x55a6 <safefree+0x52>
        return;

    if(__brkval)
    5558:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
    555c:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
    5560:	21 15       	cp	r18, r1
    5562:	31 05       	cpc	r19, r1
    5564:	11 f4       	brne	.+4      	; 0x556a <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5566:	2e eb       	ldi	r18, 0xBE	; 190
    5568:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    556a:	41 e2       	ldi	r20, 0x21	; 33
    556c:	8e 3b       	cpi	r24, 0xBE	; 190
    556e:	94 07       	cpc	r25, r20
    5570:	30 f0       	brcs	.+12     	; 0x557e <safefree+0x2a>
    5572:	28 17       	cp	r18, r24
    5574:	39 07       	cpc	r19, r25
    5576:	18 f0       	brcs	.+6      	; 0x557e <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    5578:	0c 94 89 e7 	jmp	0x1cf12	; 0x1cf12 <free>
        return;
    557c:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    557e:	3f 93       	push	r19
    5580:	2f 93       	push	r18
    5582:	9f 93       	push	r25
    5584:	8f 93       	push	r24
    5586:	83 e1       	ldi	r24, 0x13	; 19
    5588:	93 e0       	ldi	r25, 0x03	; 3
    558a:	1f 92       	push	r1
    558c:	9f 93       	push	r25
    558e:	8f 93       	push	r24
    5590:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    PrintFree();
    5594:	13 df       	rcall	.-474    	; 0x53bc <PrintFree>
    5596:	8d b7       	in	r24, 0x3d	; 61
    5598:	9e b7       	in	r25, 0x3e	; 62
    559a:	07 96       	adiw	r24, 0x07	; 7
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	9e bf       	out	0x3e, r25	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	8d bf       	out	0x3d, r24	; 61
    55a6:	08 95       	ret

000055a8 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    55a8:	64 36       	cpi	r22, 0x64	; 100
    55aa:	71 05       	cpc	r23, r1
    55ac:	81 05       	cpc	r24, r1
    55ae:	91 05       	cpc	r25, r1
    55b0:	58 f0       	brcs	.+22     	; 0x55c8 <delayus+0x20>
    {
        us -= 100U;
    55b2:	64 56       	subi	r22, 0x64	; 100
    55b4:	71 09       	sbc	r23, r1
    55b6:	81 09       	sbc	r24, r1
    55b8:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    55ba:	e3 ef       	ldi	r30, 0xF3	; 243
    55bc:	f1 e0       	ldi	r31, 0x01	; 1
    55be:	31 97       	sbiw	r30, 0x01	; 1
    55c0:	f1 f7       	brne	.-4      	; 0x55be <delayus+0x16>
    55c2:	00 c0       	rjmp	.+0      	; 0x55c4 <delayus+0x1c>
    55c4:	00 00       	nop
    55c6:	f0 cf       	rjmp	.-32     	; 0x55a8 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    55c8:	6a 30       	cpi	r22, 0x0A	; 10
    55ca:	71 05       	cpc	r23, r1
    55cc:	81 05       	cpc	r24, r1
    55ce:	91 05       	cpc	r25, r1
    55d0:	48 f0       	brcs	.+18     	; 0x55e4 <delayus+0x3c>
    {
        us -= 10U;
    55d2:	6a 50       	subi	r22, 0x0A	; 10
    55d4:	71 09       	sbc	r23, r1
    55d6:	81 09       	sbc	r24, r1
    55d8:	91 09       	sbc	r25, r1
    55da:	f2 e4       	ldi	r31, 0x42	; 66
    55dc:	fa 95       	dec	r31
    55de:	f1 f7       	brne	.-4      	; 0x55dc <delayus+0x34>
    55e0:	00 c0       	rjmp	.+0      	; 0x55e2 <delayus+0x3a>
    55e2:	f2 cf       	rjmp	.-28     	; 0x55c8 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    55e4:	61 15       	cp	r22, r1
    55e6:	71 05       	cpc	r23, r1
    55e8:	81 05       	cpc	r24, r1
    55ea:	91 05       	cpc	r25, r1
    55ec:	49 f0       	breq	.+18     	; 0x5600 <delayus+0x58>
    {
        --us;
    55ee:	61 50       	subi	r22, 0x01	; 1
    55f0:	71 09       	sbc	r23, r1
    55f2:	81 09       	sbc	r24, r1
    55f4:	91 09       	sbc	r25, r1
    55f6:	26 e0       	ldi	r18, 0x06	; 6
    55f8:	2a 95       	dec	r18
    55fa:	f1 f7       	brne	.-4      	; 0x55f8 <delayus+0x50>
    55fc:	00 c0       	rjmp	.+0      	; 0x55fe <delayus+0x56>
    55fe:	f2 cf       	rjmp	.-28     	; 0x55e4 <delayus+0x3c>
        _delay_us(1);
    }
}
    5600:	08 95       	ret

00005602 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5602:	61 15       	cp	r22, r1
    5604:	71 05       	cpc	r23, r1
    5606:	81 05       	cpc	r24, r1
    5608:	91 05       	cpc	r25, r1
    560a:	09 f4       	brne	.+2      	; 0x560e <delayms+0xc>
    560c:	41 c0       	rjmp	.+130    	; 0x5690 <delayms+0x8e>
    560e:	e3 ef       	ldi	r30, 0xF3	; 243
    5610:	f1 e0       	ldi	r31, 0x01	; 1
    5612:	31 97       	sbiw	r30, 0x01	; 1
    5614:	f1 f7       	brne	.-4      	; 0x5612 <delayms+0x10>
    5616:	00 c0       	rjmp	.+0      	; 0x5618 <delayms+0x16>
    5618:	00 00       	nop
    561a:	e3 ef       	ldi	r30, 0xF3	; 243
    561c:	f1 e0       	ldi	r31, 0x01	; 1
    561e:	31 97       	sbiw	r30, 0x01	; 1
    5620:	f1 f7       	brne	.-4      	; 0x561e <delayms+0x1c>
    5622:	00 c0       	rjmp	.+0      	; 0x5624 <delayms+0x22>
    5624:	00 00       	nop
    5626:	e3 ef       	ldi	r30, 0xF3	; 243
    5628:	f1 e0       	ldi	r31, 0x01	; 1
    562a:	31 97       	sbiw	r30, 0x01	; 1
    562c:	f1 f7       	brne	.-4      	; 0x562a <delayms+0x28>
    562e:	00 c0       	rjmp	.+0      	; 0x5630 <delayms+0x2e>
    5630:	00 00       	nop
    5632:	e3 ef       	ldi	r30, 0xF3	; 243
    5634:	f1 e0       	ldi	r31, 0x01	; 1
    5636:	31 97       	sbiw	r30, 0x01	; 1
    5638:	f1 f7       	brne	.-4      	; 0x5636 <delayms+0x34>
    563a:	00 c0       	rjmp	.+0      	; 0x563c <delayms+0x3a>
    563c:	00 00       	nop
    563e:	e3 ef       	ldi	r30, 0xF3	; 243
    5640:	f1 e0       	ldi	r31, 0x01	; 1
    5642:	31 97       	sbiw	r30, 0x01	; 1
    5644:	f1 f7       	brne	.-4      	; 0x5642 <delayms+0x40>
    5646:	00 c0       	rjmp	.+0      	; 0x5648 <delayms+0x46>
    5648:	00 00       	nop
    564a:	e3 ef       	ldi	r30, 0xF3	; 243
    564c:	f1 e0       	ldi	r31, 0x01	; 1
    564e:	31 97       	sbiw	r30, 0x01	; 1
    5650:	f1 f7       	brne	.-4      	; 0x564e <delayms+0x4c>
    5652:	00 c0       	rjmp	.+0      	; 0x5654 <delayms+0x52>
    5654:	00 00       	nop
    5656:	e3 ef       	ldi	r30, 0xF3	; 243
    5658:	f1 e0       	ldi	r31, 0x01	; 1
    565a:	31 97       	sbiw	r30, 0x01	; 1
    565c:	f1 f7       	brne	.-4      	; 0x565a <delayms+0x58>
    565e:	00 c0       	rjmp	.+0      	; 0x5660 <delayms+0x5e>
    5660:	00 00       	nop
    5662:	e3 ef       	ldi	r30, 0xF3	; 243
    5664:	f1 e0       	ldi	r31, 0x01	; 1
    5666:	31 97       	sbiw	r30, 0x01	; 1
    5668:	f1 f7       	brne	.-4      	; 0x5666 <delayms+0x64>
    566a:	00 c0       	rjmp	.+0      	; 0x566c <delayms+0x6a>
    566c:	00 00       	nop
    566e:	e3 ef       	ldi	r30, 0xF3	; 243
    5670:	f1 e0       	ldi	r31, 0x01	; 1
    5672:	31 97       	sbiw	r30, 0x01	; 1
    5674:	f1 f7       	brne	.-4      	; 0x5672 <delayms+0x70>
    5676:	00 c0       	rjmp	.+0      	; 0x5678 <delayms+0x76>
    5678:	00 00       	nop
    567a:	e3 ef       	ldi	r30, 0xF3	; 243
    567c:	f1 e0       	ldi	r31, 0x01	; 1
    567e:	31 97       	sbiw	r30, 0x01	; 1
    5680:	f1 f7       	brne	.-4      	; 0x567e <delayms+0x7c>
    5682:	00 c0       	rjmp	.+0      	; 0x5684 <delayms+0x82>
    5684:	00 00       	nop
    5686:	61 50       	subi	r22, 0x01	; 1
    5688:	71 09       	sbc	r23, r1
    568a:	81 09       	sbc	r24, r1
    568c:	91 09       	sbc	r25, r1
    568e:	b9 cf       	rjmp	.-142    	; 0x5602 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5690:	08 95       	ret

00005692 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    5692:	81 11       	cpse	r24, r1
    5694:	0e c0       	rjmp	.+28     	; 0x56b2 <uart_rx_flush+0x20>
    5696:	f8 94       	cli
    5698:	10 92 05 1a 	sts	0x1A05, r1	; 0x801a05 <uarts+0x4>
    569c:	10 92 04 1a 	sts	0x1A04, r1	; 0x801a04 <uarts+0x3>
    56a0:	10 92 01 1a 	sts	0x1A01, r1	; 0x801a01 <uarts>
    56a4:	10 92 02 1a 	sts	0x1A02, r1	; 0x801a02 <uarts+0x1>
    56a8:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <uarts+0x2>
    56ac:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <uarts+0x5>
    56b0:	78 94       	sei
    56b2:	08 95       	ret

000056b4 <uart_ubr>:
    56b4:	4f 92       	push	r4
    56b6:	5f 92       	push	r5
    56b8:	6f 92       	push	r6
    56ba:	7f 92       	push	r7
    56bc:	8f 92       	push	r8
    56be:	9f 92       	push	r9
    56c0:	af 92       	push	r10
    56c2:	bf 92       	push	r11
    56c4:	cf 92       	push	r12
    56c6:	df 92       	push	r13
    56c8:	ef 92       	push	r14
    56ca:	ff 92       	push	r15
    56cc:	cf 93       	push	r28
    56ce:	df 93       	push	r29
    56d0:	5a 01       	movw	r10, r20
    56d2:	e9 01       	movw	r28, r18
    56d4:	0e 94 75 e5 	call	0x1caea	; 0x1caea <__floatunsisf>
    56d8:	2b 01       	movw	r4, r22
    56da:	3c 01       	movw	r6, r24
    56dc:	20 e0       	ldi	r18, 0x00	; 0
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	40 e0       	ldi	r20, 0x00	; 0
    56e2:	51 e4       	ldi	r21, 0x41	; 65
    56e4:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    56e8:	9b 01       	movw	r18, r22
    56ea:	ac 01       	movw	r20, r24
    56ec:	60 e8       	ldi	r22, 0x80	; 128
    56ee:	76 e9       	ldi	r23, 0x96	; 150
    56f0:	88 e9       	ldi	r24, 0x98	; 152
    56f2:	9b e4       	ldi	r25, 0x4B	; 75
    56f4:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    56f8:	20 e0       	ldi	r18, 0x00	; 0
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	40 e8       	ldi	r20, 0x80	; 128
    56fe:	5f e3       	ldi	r21, 0x3F	; 63
    5700:	0e 94 73 e4 	call	0x1c8e6	; 0x1c8e6 <__subsf3>
    5704:	0e 94 8e e6 	call	0x1cd1c	; 0x1cd1c <round>
    5708:	0e 94 49 e5 	call	0x1ca92	; 0x1ca92 <__fixunssfsi>
    570c:	6b 01       	movw	r12, r22
    570e:	7c 01       	movw	r14, r24
    5710:	c1 14       	cp	r12, r1
    5712:	80 e1       	ldi	r24, 0x10	; 16
    5714:	d8 06       	cpc	r13, r24
    5716:	e1 04       	cpc	r14, r1
    5718:	f1 04       	cpc	r15, r1
    571a:	58 f4       	brcc	.+22     	; 0x5732 <uart_ubr+0x7e>
    571c:	81 e0       	ldi	r24, 0x01	; 1
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	f5 01       	movw	r30, r10
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	80 83       	st	Z, r24
    5726:	81 2c       	mov	r8, r1
    5728:	91 2c       	mov	r9, r1
    572a:	a1 2c       	mov	r10, r1
    572c:	21 e4       	ldi	r18, 0x41	; 65
    572e:	b2 2e       	mov	r11, r18
    5730:	31 c0       	rjmp	.+98     	; 0x5794 <uart_ubr+0xe0>
    5732:	f5 01       	movw	r30, r10
    5734:	11 82       	std	Z+1, r1	; 0x01
    5736:	10 82       	st	Z, r1
    5738:	20 e0       	ldi	r18, 0x00	; 0
    573a:	30 e0       	ldi	r19, 0x00	; 0
    573c:	40 e8       	ldi	r20, 0x80	; 128
    573e:	51 e4       	ldi	r21, 0x41	; 65
    5740:	c3 01       	movw	r24, r6
    5742:	b2 01       	movw	r22, r4
    5744:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    5748:	9b 01       	movw	r18, r22
    574a:	ac 01       	movw	r20, r24
    574c:	60 e8       	ldi	r22, 0x80	; 128
    574e:	76 e9       	ldi	r23, 0x96	; 150
    5750:	88 e9       	ldi	r24, 0x98	; 152
    5752:	9b e4       	ldi	r25, 0x4B	; 75
    5754:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    5758:	20 e0       	ldi	r18, 0x00	; 0
    575a:	30 e0       	ldi	r19, 0x00	; 0
    575c:	40 e8       	ldi	r20, 0x80	; 128
    575e:	5f e3       	ldi	r21, 0x3F	; 63
    5760:	0e 94 73 e4 	call	0x1c8e6	; 0x1c8e6 <__subsf3>
    5764:	0e 94 8e e6 	call	0x1cd1c	; 0x1cd1c <round>
    5768:	0e 94 49 e5 	call	0x1ca92	; 0x1ca92 <__fixunssfsi>
    576c:	6b 01       	movw	r12, r22
    576e:	7c 01       	movw	r14, r24
    5770:	81 2c       	mov	r8, r1
    5772:	91 2c       	mov	r9, r1
    5774:	90 e8       	ldi	r25, 0x80	; 128
    5776:	a9 2e       	mov	r10, r25
    5778:	91 e4       	ldi	r25, 0x41	; 65
    577a:	b9 2e       	mov	r11, r25
    577c:	c1 14       	cp	r12, r1
    577e:	f0 e1       	ldi	r31, 0x10	; 16
    5780:	df 06       	cpc	r13, r31
    5782:	e1 04       	cpc	r14, r1
    5784:	f1 04       	cpc	r15, r1
    5786:	30 f0       	brcs	.+12     	; 0x5794 <uart_ubr+0xe0>
    5788:	cc 24       	eor	r12, r12
    578a:	ca 94       	dec	r12
    578c:	8f e0       	ldi	r24, 0x0F	; 15
    578e:	d8 2e       	mov	r13, r24
    5790:	e1 2c       	mov	r14, r1
    5792:	f1 2c       	mov	r15, r1
    5794:	c7 01       	movw	r24, r14
    5796:	b6 01       	movw	r22, r12
    5798:	6f 5f       	subi	r22, 0xFF	; 255
    579a:	7f 4f       	sbci	r23, 0xFF	; 255
    579c:	8f 4f       	sbci	r24, 0xFF	; 255
    579e:	9f 4f       	sbci	r25, 0xFF	; 255
    57a0:	0e 94 75 e5 	call	0x1caea	; 0x1caea <__floatunsisf>
    57a4:	a5 01       	movw	r20, r10
    57a6:	94 01       	movw	r18, r8
    57a8:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    57ac:	9b 01       	movw	r18, r22
    57ae:	ac 01       	movw	r20, r24
    57b0:	60 e8       	ldi	r22, 0x80	; 128
    57b2:	76 e9       	ldi	r23, 0x96	; 150
    57b4:	88 e9       	ldi	r24, 0x98	; 152
    57b6:	9b e4       	ldi	r25, 0x4B	; 75
    57b8:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    57bc:	0e 94 49 e5 	call	0x1ca92	; 0x1ca92 <__fixunssfsi>
    57c0:	68 83       	st	Y, r22
    57c2:	79 83       	std	Y+1, r23	; 0x01
    57c4:	8a 83       	std	Y+2, r24	; 0x02
    57c6:	9b 83       	std	Y+3, r25	; 0x03
    57c8:	c6 01       	movw	r24, r12
    57ca:	df 91       	pop	r29
    57cc:	cf 91       	pop	r28
    57ce:	ff 90       	pop	r15
    57d0:	ef 90       	pop	r14
    57d2:	df 90       	pop	r13
    57d4:	cf 90       	pop	r12
    57d6:	bf 90       	pop	r11
    57d8:	af 90       	pop	r10
    57da:	9f 90       	pop	r9
    57dc:	8f 90       	pop	r8
    57de:	7f 90       	pop	r7
    57e0:	6f 90       	pop	r6
    57e2:	5f 90       	pop	r5
    57e4:	4f 90       	pop	r4
    57e6:	08 95       	ret

000057e8 <uart_init>:
    57e8:	a6 e0       	ldi	r26, 0x06	; 6
    57ea:	b0 e0       	ldi	r27, 0x00	; 0
    57ec:	ea ef       	ldi	r30, 0xFA	; 250
    57ee:	fb e2       	ldi	r31, 0x2B	; 43
    57f0:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    57f4:	1e 82       	std	Y+6, r1	; 0x06
    57f6:	1d 82       	std	Y+5, r1	; 0x05
    57f8:	81 11       	cpse	r24, r1
    57fa:	36 c0       	rjmp	.+108    	; 0x5868 <uart_init+0x80>
    57fc:	cb 01       	movw	r24, r22
    57fe:	ba 01       	movw	r22, r20
    5800:	9e 01       	movw	r18, r28
    5802:	2f 5f       	subi	r18, 0xFF	; 255
    5804:	3f 4f       	sbci	r19, 0xFF	; 255
    5806:	ae 01       	movw	r20, r28
    5808:	4b 5f       	subi	r20, 0xFB	; 251
    580a:	5f 4f       	sbci	r21, 0xFF	; 255
    580c:	53 df       	rcall	.-346    	; 0x56b4 <uart_ubr>
    580e:	f8 94       	cli
    5810:	10 92 05 1a 	sts	0x1A05, r1	; 0x801a05 <uarts+0x4>
    5814:	10 92 04 1a 	sts	0x1A04, r1	; 0x801a04 <uarts+0x3>
    5818:	10 92 01 1a 	sts	0x1A01, r1	; 0x801a01 <uarts>
    581c:	10 92 02 1a 	sts	0x1A02, r1	; 0x801a02 <uarts+0x1>
    5820:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <uarts+0x2>
    5824:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <uarts+0x5>
    5828:	78 94       	sei
    582a:	f8 94       	cli
    582c:	58 9a       	sbi	0x0b, 0	; 11
    582e:	59 9a       	sbi	0x0b, 1	; 11
    5830:	50 98       	cbi	0x0a, 0	; 10
    5832:	51 9a       	sbi	0x0a, 1	; 10
    5834:	28 e9       	ldi	r18, 0x98	; 152
    5836:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    583a:	2d 81       	ldd	r18, Y+5	; 0x05
    583c:	3e 81       	ldd	r19, Y+6	; 0x06
    583e:	23 2b       	or	r18, r19
    5840:	19 f0       	breq	.+6      	; 0x5848 <uart_init+0x60>
    5842:	22 e0       	ldi	r18, 0x02	; 2
    5844:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5848:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    584c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5850:	78 94       	sei
    5852:	69 ee       	ldi	r22, 0xE9	; 233
    5854:	7c e2       	ldi	r23, 0x2C	; 44
    5856:	8e ef       	ldi	r24, 0xFE	; 254
    5858:	9c e2       	ldi	r25, 0x2C	; 44
    585a:	0e 94 8a 7a 	call	0xf514	; 0xf514 <fdevopen>
    585e:	69 81       	ldd	r22, Y+1	; 0x01
    5860:	7a 81       	ldd	r23, Y+2	; 0x02
    5862:	8b 81       	ldd	r24, Y+3	; 0x03
    5864:	9c 81       	ldd	r25, Y+4	; 0x04
    5866:	03 c0       	rjmp	.+6      	; 0x586e <uart_init+0x86>
    5868:	60 e0       	ldi	r22, 0x00	; 0
    586a:	70 e0       	ldi	r23, 0x00	; 0
    586c:	cb 01       	movw	r24, r22
    586e:	26 96       	adiw	r28, 0x06	; 6
    5870:	e2 e0       	ldi	r30, 0x02	; 2
    5872:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00005876 <uart_rx_interrupt>:
    5876:	27 e5       	ldi	r18, 0x57	; 87
    5878:	82 9f       	mul	r24, r18
    587a:	c0 01       	movw	r24, r0
    587c:	11 24       	eor	r1, r1
    587e:	fc 01       	movw	r30, r24
    5880:	ef 5f       	subi	r30, 0xFF	; 255
    5882:	f5 4e       	sbci	r31, 0xE5	; 229
    5884:	83 81       	ldd	r24, Z+3	; 0x03
    5886:	94 81       	ldd	r25, Z+4	; 0x04
    5888:	80 35       	cpi	r24, 0x50	; 80
    588a:	91 05       	cpc	r25, r1
    588c:	84 f4       	brge	.+32     	; 0x58ae <uart_rx_interrupt+0x38>
    588e:	30 81       	ld	r19, Z
    5890:	21 e0       	ldi	r18, 0x01	; 1
    5892:	23 0f       	add	r18, r19
    5894:	20 83       	st	Z, r18
    5896:	df 01       	movw	r26, r30
    5898:	a3 0f       	add	r26, r19
    589a:	b1 1d       	adc	r27, r1
    589c:	16 96       	adiw	r26, 0x06	; 6
    589e:	6c 93       	st	X, r22
    58a0:	01 96       	adiw	r24, 0x01	; 1
    58a2:	94 83       	std	Z+4, r25	; 0x04
    58a4:	83 83       	std	Z+3, r24	; 0x03
    58a6:	20 35       	cpi	r18, 0x50	; 80
    58a8:	28 f0       	brcs	.+10     	; 0x58b4 <uart_rx_interrupt+0x3e>
    58aa:	10 82       	st	Z, r1
    58ac:	08 95       	ret
    58ae:	85 81       	ldd	r24, Z+5	; 0x05
    58b0:	81 60       	ori	r24, 0x01	; 1
    58b2:	85 83       	std	Z+5, r24	; 0x05
    58b4:	08 95       	ret

000058b6 <__vector_20>:
    58b6:	1f 92       	push	r1
    58b8:	0f 92       	push	r0
    58ba:	0f b6       	in	r0, 0x3f	; 63
    58bc:	0f 92       	push	r0
    58be:	11 24       	eor	r1, r1
    58c0:	0b b6       	in	r0, 0x3b	; 59
    58c2:	0f 92       	push	r0
    58c4:	2f 93       	push	r18
    58c6:	3f 93       	push	r19
    58c8:	4f 93       	push	r20
    58ca:	5f 93       	push	r21
    58cc:	6f 93       	push	r22
    58ce:	7f 93       	push	r23
    58d0:	8f 93       	push	r24
    58d2:	9f 93       	push	r25
    58d4:	af 93       	push	r26
    58d6:	bf 93       	push	r27
    58d8:	ef 93       	push	r30
    58da:	ff 93       	push	r31
    58dc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    58e0:	80 e0       	ldi	r24, 0x00	; 0
    58e2:	c9 df       	rcall	.-110    	; 0x5876 <uart_rx_interrupt>
    58e4:	ff 91       	pop	r31
    58e6:	ef 91       	pop	r30
    58e8:	bf 91       	pop	r27
    58ea:	af 91       	pop	r26
    58ec:	9f 91       	pop	r25
    58ee:	8f 91       	pop	r24
    58f0:	7f 91       	pop	r23
    58f2:	6f 91       	pop	r22
    58f4:	5f 91       	pop	r21
    58f6:	4f 91       	pop	r20
    58f8:	3f 91       	pop	r19
    58fa:	2f 91       	pop	r18
    58fc:	0f 90       	pop	r0
    58fe:	0b be       	out	0x3b, r0	; 59
    5900:	0f 90       	pop	r0
    5902:	0f be       	out	0x3f, r0	; 63
    5904:	0f 90       	pop	r0
    5906:	1f 90       	pop	r1
    5908:	18 95       	reti

0000590a <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    590a:	81 11       	cpse	r24, r1
    590c:	07 c0       	rjmp	.+14     	; 0x591c <uart_rx_count+0x12>
        return(EOF);

    cli();
    590e:	f8 94       	cli

    count = uarts[uart].rx_count;
    5910:	80 91 04 1a 	lds	r24, 0x1A04	; 0x801a04 <uarts+0x3>
    5914:	90 91 05 1a 	lds	r25, 0x1A05	; 0x801a05 <uarts+0x4>

    sei();
    5918:	78 94       	sei

    return (count );
    591a:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    591c:	8f ef       	ldi	r24, 0xFF	; 255
    591e:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5920:	08 95       	ret

00005922 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5922:	81 11       	cpse	r24, r1
    5924:	21 c0       	rjmp	.+66     	; 0x5968 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5926:	80 e0       	ldi	r24, 0x00	; 0
    5928:	f0 df       	rcall	.-32     	; 0x590a <uart_rx_count>
    592a:	18 16       	cp	r1, r24
    592c:	19 06       	cpc	r1, r25
    592e:	dc f7       	brge	.-10     	; 0x5926 <uart_get_tail+0x4>
		;

    cli();
    5930:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5932:	e0 91 02 1a 	lds	r30, 0x1A02	; 0x801a02 <uarts+0x1>
    5936:	91 e0       	ldi	r25, 0x01	; 1
    5938:	9e 0f       	add	r25, r30
    593a:	90 93 02 1a 	sts	0x1A02, r25	; 0x801a02 <uarts+0x1>
    593e:	f0 e0       	ldi	r31, 0x00	; 0
    5940:	ef 5f       	subi	r30, 0xFF	; 255
    5942:	f5 4e       	sbci	r31, 0xE5	; 229
    5944:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5946:	90 35       	cpi	r25, 0x50	; 80
    5948:	10 f0       	brcs	.+4      	; 0x594e <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    594a:	10 92 02 1a 	sts	0x1A02, r1	; 0x801a02 <uarts+0x1>
    uarts[uart].rx_count--;
    594e:	20 91 04 1a 	lds	r18, 0x1A04	; 0x801a04 <uarts+0x3>
    5952:	30 91 05 1a 	lds	r19, 0x1A05	; 0x801a05 <uarts+0x4>
    5956:	21 50       	subi	r18, 0x01	; 1
    5958:	31 09       	sbc	r19, r1
    595a:	30 93 05 1a 	sts	0x1A05, r19	; 0x801a05 <uarts+0x4>
    595e:	20 93 04 1a 	sts	0x1A04, r18	; 0x801a04 <uarts+0x3>
    sei();
    5962:	78 94       	sei

    return (c & 0xff);
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5968:	8f ef       	ldi	r24, 0xFF	; 255
    596a:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    596c:	08 95       	ret

0000596e <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    596e:	d9 df       	rcall	.-78     	; 0x5922 <uart_get_tail>
    5970:	99 27       	eor	r25, r25
    5972:	08 95       	ret

00005974 <uart_tx_byte>:
    5974:	61 11       	cpse	r22, r1
    5976:	09 c0       	rjmp	.+18     	; 0x598a <uart_tx_byte+0x16>
    5978:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    597c:	25 ff       	sbrs	r18, 5
    597e:	fc cf       	rjmp	.-8      	; 0x5978 <uart_tx_byte+0x4>
    5980:	28 2f       	mov	r18, r24
    5982:	2f 77       	andi	r18, 0x7F	; 127
    5984:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5988:	08 95       	ret
    598a:	61 30       	cpi	r22, 0x01	; 1
    598c:	49 f4       	brne	.+18     	; 0x59a0 <uart_tx_byte+0x2c>
    598e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5992:	25 ff       	sbrs	r18, 5
    5994:	fc cf       	rjmp	.-8      	; 0x598e <uart_tx_byte+0x1a>
    5996:	28 2f       	mov	r18, r24
    5998:	2f 77       	andi	r18, 0x7F	; 127
    599a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    599e:	08 95       	ret
    59a0:	8f ef       	ldi	r24, 0xFF	; 255
    59a2:	9f ef       	ldi	r25, 0xFF	; 255
    59a4:	08 95       	ret

000059a6 <uart_getchar>:
    59a6:	cf 93       	push	r28
    59a8:	81 11       	cpse	r24, r1
    59aa:	0f c0       	rjmp	.+30     	; 0x59ca <uart_getchar+0x24>
    59ac:	e0 df       	rcall	.-64     	; 0x596e <uart_rx_byte>
    59ae:	c8 2f       	mov	r28, r24
    59b0:	60 e0       	ldi	r22, 0x00	; 0
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	df df       	rcall	.-66     	; 0x5974 <uart_tx_byte>
    59b6:	cd 30       	cpi	r28, 0x0D	; 13
    59b8:	29 f4       	brne	.+10     	; 0x59c4 <uart_getchar+0x1e>
    59ba:	60 e0       	ldi	r22, 0x00	; 0
    59bc:	8a e0       	ldi	r24, 0x0A	; 10
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	d9 df       	rcall	.-78     	; 0x5974 <uart_tx_byte>
    59c2:	ca e0       	ldi	r28, 0x0A	; 10
    59c4:	8c 2f       	mov	r24, r28
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	02 c0       	rjmp	.+4      	; 0x59ce <uart_getchar+0x28>
    59ca:	8f ef       	ldi	r24, 0xFF	; 255
    59cc:	9f ef       	ldi	r25, 0xFF	; 255
    59ce:	cf 91       	pop	r28
    59d0:	08 95       	ret

000059d2 <uart0_getchar>:
    59d2:	80 e0       	ldi	r24, 0x00	; 0
    59d4:	e8 cf       	rjmp	.-48     	; 0x59a6 <uart_getchar>
    59d6:	08 95       	ret

000059d8 <uart_putchar>:
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	ec 01       	movw	r28, r24
    59e0:	16 2f       	mov	r17, r22
    59e2:	c8 df       	rcall	.-112    	; 0x5974 <uart_tx_byte>
    59e4:	ca 30       	cpi	r28, 0x0A	; 10
    59e6:	d1 05       	cpc	r29, r1
    59e8:	21 f4       	brne	.+8      	; 0x59f2 <uart_putchar+0x1a>
    59ea:	61 2f       	mov	r22, r17
    59ec:	8d e0       	ldi	r24, 0x0D	; 13
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	c1 df       	rcall	.-126    	; 0x5974 <uart_tx_byte>
    59f2:	ce 01       	movw	r24, r28
    59f4:	df 91       	pop	r29
    59f6:	cf 91       	pop	r28
    59f8:	1f 91       	pop	r17
    59fa:	08 95       	ret

000059fc <uart0_putchar>:
    59fc:	cf 93       	push	r28
    59fe:	df 93       	push	r29
    5a00:	ec 01       	movw	r28, r24
    5a02:	60 e0       	ldi	r22, 0x00	; 0
    5a04:	70 e0       	ldi	r23, 0x00	; 0
    5a06:	e8 df       	rcall	.-48     	; 0x59d8 <uart_putchar>
    5a08:	ce 01       	movw	r24, r28
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	08 95       	ret

00005a10 <uart_keyhit>:
    5a10:	7c cf       	rjmp	.-264    	; 0x590a <uart_rx_count>
    5a12:	08 95       	ret

00005a14 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5a14:	cf 92       	push	r12
    5a16:	df 92       	push	r13
    5a18:	ef 92       	push	r14
    5a1a:	ff 92       	push	r15
    5a1c:	6b 01       	movw	r12, r22
    5a1e:	7c 01       	movw	r14, r24
    5a20:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <SPI0_Speed_value>
    5a24:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <SPI0_Speed_value+0x1>
    5a28:	a0 91 6a 17 	lds	r26, 0x176A	; 0x80176a <SPI0_Speed_value+0x2>
    5a2c:	b0 91 6b 17 	lds	r27, 0x176B	; 0x80176b <SPI0_Speed_value+0x3>
    5a30:	8c 15       	cp	r24, r12
    5a32:	9d 05       	cpc	r25, r13
    5a34:	ae 05       	cpc	r26, r14
    5a36:	bf 05       	cpc	r27, r15
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <SPI0_Speed+0x28>
    5a3a:	4e c0       	rjmp	.+156    	; 0x5ad8 <SPI0_Speed+0xc4>
    5a3c:	60 e0       	ldi	r22, 0x00	; 0
    5a3e:	7d e2       	ldi	r23, 0x2D	; 45
    5a40:	81 e3       	ldi	r24, 0x31	; 49
    5a42:	91 e0       	ldi	r25, 0x01	; 1
    5a44:	a7 01       	movw	r20, r14
    5a46:	96 01       	movw	r18, r12
    5a48:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    5a4c:	20 38       	cpi	r18, 0x80	; 128
    5a4e:	31 05       	cpc	r19, r1
    5a50:	41 05       	cpc	r20, r1
    5a52:	51 05       	cpc	r21, r1
    5a54:	28 f4       	brcc	.+10     	; 0x5a60 <SPI0_Speed+0x4c>
    5a56:	20 34       	cpi	r18, 0x40	; 64
    5a58:	31 05       	cpc	r19, r1
    5a5a:	41 05       	cpc	r20, r1
    5a5c:	51 05       	cpc	r21, r1
    5a5e:	30 f0       	brcs	.+12     	; 0x5a6c <SPI0_Speed+0x58>
    5a60:	8d b5       	in	r24, 0x2d	; 45
    5a62:	8e 7f       	andi	r24, 0xFE	; 254
    5a64:	8d bd       	out	0x2d, r24	; 45
    5a66:	8c b5       	in	r24, 0x2c	; 44
    5a68:	82 60       	ori	r24, 0x02	; 2
    5a6a:	1b c0       	rjmp	.+54     	; 0x5aa2 <SPI0_Speed+0x8e>
    5a6c:	8d b5       	in	r24, 0x2d	; 45
    5a6e:	20 32       	cpi	r18, 0x20	; 32
    5a70:	31 05       	cpc	r19, r1
    5a72:	41 05       	cpc	r20, r1
    5a74:	51 05       	cpc	r21, r1
    5a76:	28 f0       	brcs	.+10     	; 0x5a82 <SPI0_Speed+0x6e>
    5a78:	81 60       	ori	r24, 0x01	; 1
    5a7a:	8d bd       	out	0x2d, r24	; 45
    5a7c:	8c b5       	in	r24, 0x2c	; 44
    5a7e:	82 60       	ori	r24, 0x02	; 2
    5a80:	1f c0       	rjmp	.+62     	; 0x5ac0 <SPI0_Speed+0xac>
    5a82:	20 31       	cpi	r18, 0x10	; 16
    5a84:	31 05       	cpc	r19, r1
    5a86:	41 05       	cpc	r20, r1
    5a88:	51 05       	cpc	r21, r1
    5a8a:	10 f0       	brcs	.+4      	; 0x5a90 <SPI0_Speed+0x7c>
    5a8c:	8e 7f       	andi	r24, 0xFE	; 254
    5a8e:	06 c0       	rjmp	.+12     	; 0x5a9c <SPI0_Speed+0x88>
    5a90:	28 30       	cpi	r18, 0x08	; 8
    5a92:	31 05       	cpc	r19, r1
    5a94:	41 05       	cpc	r20, r1
    5a96:	51 05       	cpc	r21, r1
    5a98:	40 f0       	brcs	.+16     	; 0x5aaa <SPI0_Speed+0x96>
    5a9a:	81 60       	ori	r24, 0x01	; 1
    5a9c:	8d bd       	out	0x2d, r24	; 45
    5a9e:	8c b5       	in	r24, 0x2c	; 44
    5aa0:	8d 7f       	andi	r24, 0xFD	; 253
    5aa2:	8c bd       	out	0x2c, r24	; 44
    5aa4:	8c b5       	in	r24, 0x2c	; 44
    5aa6:	81 60       	ori	r24, 0x01	; 1
    5aa8:	0e c0       	rjmp	.+28     	; 0x5ac6 <SPI0_Speed+0xb2>
    5aaa:	24 30       	cpi	r18, 0x04	; 4
    5aac:	31 05       	cpc	r19, r1
    5aae:	41 05       	cpc	r20, r1
    5ab0:	51 05       	cpc	r21, r1
    5ab2:	10 f0       	brcs	.+4      	; 0x5ab8 <SPI0_Speed+0xa4>
    5ab4:	8e 7f       	andi	r24, 0xFE	; 254
    5ab6:	01 c0       	rjmp	.+2      	; 0x5aba <SPI0_Speed+0xa6>
    5ab8:	81 60       	ori	r24, 0x01	; 1
    5aba:	8d bd       	out	0x2d, r24	; 45
    5abc:	8c b5       	in	r24, 0x2c	; 44
    5abe:	8d 7f       	andi	r24, 0xFD	; 253
    5ac0:	8c bd       	out	0x2c, r24	; 44
    5ac2:	8c b5       	in	r24, 0x2c	; 44
    5ac4:	8e 7f       	andi	r24, 0xFE	; 254
    5ac6:	8c bd       	out	0x2c, r24	; 44
    5ac8:	c0 92 68 17 	sts	0x1768, r12	; 0x801768 <SPI0_Speed_value>
    5acc:	d0 92 69 17 	sts	0x1769, r13	; 0x801769 <SPI0_Speed_value+0x1>
    5ad0:	e0 92 6a 17 	sts	0x176A, r14	; 0x80176a <SPI0_Speed_value+0x2>
    5ad4:	f0 92 6b 17 	sts	0x176B, r15	; 0x80176b <SPI0_Speed_value+0x3>
    5ad8:	ff 90       	pop	r15
    5ada:	ef 90       	pop	r14
    5adc:	df 90       	pop	r13
    5ade:	cf 90       	pop	r12
    5ae0:	08 95       	ret

00005ae2 <SPI0_Mode>:
    5ae2:	cf 93       	push	r28
    5ae4:	df 93       	push	r29
    5ae6:	ec 01       	movw	r28, r24
    5ae8:	81 30       	cpi	r24, 0x01	; 1
    5aea:	91 05       	cpc	r25, r1
    5aec:	71 f0       	breq	.+28     	; 0x5b0a <SPI0_Mode+0x28>
    5aee:	2c f4       	brge	.+10     	; 0x5afa <SPI0_Mode+0x18>
    5af0:	89 2b       	or	r24, r25
    5af2:	c1 f4       	brne	.+48     	; 0x5b24 <SPI0_Mode+0x42>
    5af4:	8c b5       	in	r24, 0x2c	; 44
    5af6:	87 7f       	andi	r24, 0xF7	; 247
    5af8:	11 c0       	rjmp	.+34     	; 0x5b1c <SPI0_Mode+0x3a>
    5afa:	82 30       	cpi	r24, 0x02	; 2
    5afc:	91 05       	cpc	r25, r1
    5afe:	61 f0       	breq	.+24     	; 0x5b18 <SPI0_Mode+0x36>
    5b00:	03 97       	sbiw	r24, 0x03	; 3
    5b02:	81 f4       	brne	.+32     	; 0x5b24 <SPI0_Mode+0x42>
    5b04:	8c b5       	in	r24, 0x2c	; 44
    5b06:	88 60       	ori	r24, 0x08	; 8
    5b08:	02 c0       	rjmp	.+4      	; 0x5b0e <SPI0_Mode+0x2c>
    5b0a:	8c b5       	in	r24, 0x2c	; 44
    5b0c:	87 7f       	andi	r24, 0xF7	; 247
    5b0e:	8c bd       	out	0x2c, r24	; 44
    5b10:	8c b5       	in	r24, 0x2c	; 44
    5b12:	84 60       	ori	r24, 0x04	; 4
    5b14:	8c bd       	out	0x2c, r24	; 44
    5b16:	14 c0       	rjmp	.+40     	; 0x5b40 <SPI0_Mode+0x5e>
    5b18:	8c b5       	in	r24, 0x2c	; 44
    5b1a:	88 60       	ori	r24, 0x08	; 8
    5b1c:	8c bd       	out	0x2c, r24	; 44
    5b1e:	8c b5       	in	r24, 0x2c	; 44
    5b20:	8b 7f       	andi	r24, 0xFB	; 251
    5b22:	f8 cf       	rjmp	.-16     	; 0x5b14 <SPI0_Mode+0x32>
    5b24:	df 93       	push	r29
    5b26:	cf 93       	push	r28
    5b28:	8a e2       	ldi	r24, 0x2A	; 42
    5b2a:	94 e0       	ldi	r25, 0x04	; 4
    5b2c:	1f 92       	push	r1
    5b2e:	9f 93       	push	r25
    5b30:	8f 93       	push	r24
    5b32:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    5b36:	0f 90       	pop	r0
    5b38:	0f 90       	pop	r0
    5b3a:	0f 90       	pop	r0
    5b3c:	0f 90       	pop	r0
    5b3e:	0f 90       	pop	r0
    5b40:	d0 93 67 17 	sts	0x1767, r29	; 0x801767 <__data_end+0x1>
    5b44:	c0 93 66 17 	sts	0x1766, r28	; 0x801766 <__data_end>
    5b48:	df 91       	pop	r29
    5b4a:	cf 91       	pop	r28
    5b4c:	08 95       	ret

00005b4e <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5b4e:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5b50:	0d b4       	in	r0, 0x2d	; 45
    5b52:	07 fe       	sbrs	r0, 7
    5b54:	fd cf       	rjmp	.-6      	; 0x5b50 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5b56:	8e b5       	in	r24, 0x2e	; 46
}
    5b58:	08 95       	ret

00005b5a <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5b5a:	cf 92       	push	r12
    5b5c:	df 92       	push	r13
    5b5e:	ef 92       	push	r14
    5b60:	ff 92       	push	r15
    5b62:	cf 93       	push	r28
    5b64:	df 93       	push	r29
    5b66:	1f 92       	push	r1
    5b68:	cd b7       	in	r28, 0x3d	; 61
    5b6a:	de b7       	in	r29, 0x3e	; 62
    5b6c:	6b 01       	movw	r12, r22
    5b6e:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    5b70:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    5b72:	2f 9a       	sbi	0x05, 7	; 5
    5b74:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5b76:	2d 9a       	sbi	0x05, 5	; 5
    5b78:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    5b7a:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    5b7c:	2c 98       	cbi	0x05, 4	; 5
    5b7e:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    5b80:	8c b5       	in	r24, 0x2c	; 44
    5b82:	80 61       	ori	r24, 0x10	; 16
    5b84:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    5b86:	8c b5       	in	r24, 0x2c	; 44
    5b88:	80 64       	ori	r24, 0x40	; 64
    5b8a:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    5b8c:	8d b5       	in	r24, 0x2d	; 45
    5b8e:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    5b90:	8e b5       	in	r24, 0x2e	; 46
    5b92:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5b94:	80 e0       	ldi	r24, 0x00	; 0
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	a4 df       	rcall	.-184    	; 0x5ae2 <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    5b9a:	c7 01       	movw	r24, r14
    5b9c:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    5b9e:	3a df       	rcall	.-396    	; 0x5a14 <SPI0_Speed>
    5ba0:	8f ef       	ldi	r24, 0xFF	; 255
    5ba2:	d5 df       	rcall	.-86     	; 0x5b4e <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    5ba4:	0f 90       	pop	r0
    5ba6:	df 91       	pop	r29
    5ba8:	cf 91       	pop	r28
    5baa:	ff 90       	pop	r15
    5bac:	ef 90       	pop	r14
    5bae:	df 90       	pop	r13
    5bb0:	cf 90       	pop	r12
    5bb2:	08 95       	ret

00005bb4 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5bb4:	0f 93       	push	r16
    5bb6:	1f 93       	push	r17
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	8c 01       	movw	r16, r24
    5bbe:	eb 01       	movw	r28, r22

    while(count > 0)
    5bc0:	1c 16       	cp	r1, r28
    5bc2:	1d 06       	cpc	r1, r29
    5bc4:	34 f4       	brge	.+12     	; 0x5bd2 <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5bc6:	f8 01       	movw	r30, r16
    5bc8:	81 91       	ld	r24, Z+
    5bca:	8f 01       	movw	r16, r30
    5bcc:	c0 df       	rcall	.-128    	; 0x5b4e <SPI0_TXRX_Byte>
		++data;
		--count;
    5bce:	21 97       	sbiw	r28, 0x01	; 1
    5bd0:	f7 cf       	rjmp	.-18     	; 0x5bc0 <SPI0_TX+0xc>
	}
}
    5bd2:	df 91       	pop	r29
    5bd4:	cf 91       	pop	r28
    5bd6:	1f 91       	pop	r17
    5bd8:	0f 91       	pop	r16
    5bda:	08 95       	ret

00005bdc <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5bdc:	0f 93       	push	r16
    5bde:	1f 93       	push	r17
    5be0:	cf 93       	push	r28
    5be2:	df 93       	push	r29
    5be4:	8c 01       	movw	r16, r24
    5be6:	eb 01       	movw	r28, r22

    while(count > 0)
    5be8:	1c 16       	cp	r1, r28
    5bea:	1d 06       	cpc	r1, r29
    5bec:	44 f4       	brge	.+16     	; 0x5bfe <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5bee:	f8 01       	movw	r30, r16
    5bf0:	80 81       	ld	r24, Z
    5bf2:	ad df       	rcall	.-166    	; 0x5b4e <SPI0_TXRX_Byte>
    5bf4:	f8 01       	movw	r30, r16
    5bf6:	81 93       	st	Z+, r24
    5bf8:	8f 01       	movw	r16, r30
		++data;
		--count;
    5bfa:	21 97       	sbiw	r28, 0x01	; 1
    5bfc:	f5 cf       	rjmp	.-22     	; 0x5be8 <SPI0_TXRX+0xc>
	}
}
    5bfe:	df 91       	pop	r29
    5c00:	cf 91       	pop	r28
    5c02:	1f 91       	pop	r17
    5c04:	0f 91       	pop	r16
    5c06:	08 95       	ret

00005c08 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5c08:	0f 93       	push	r16
    5c0a:	1f 93       	push	r17
    5c0c:	cf 93       	push	r28
    5c0e:	df 93       	push	r29
    5c10:	8c 01       	movw	r16, r24
    5c12:	eb 01       	movw	r28, r22

    while(count > 0)
    5c14:	1c 16       	cp	r1, r28
    5c16:	1d 06       	cpc	r1, r29
    5c18:	3c f4       	brge	.+14     	; 0x5c28 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5c1a:	8f ef       	ldi	r24, 0xFF	; 255
    5c1c:	98 df       	rcall	.-208    	; 0x5b4e <SPI0_TXRX_Byte>
    5c1e:	f8 01       	movw	r30, r16
    5c20:	81 93       	st	Z+, r24
    5c22:	8f 01       	movw	r16, r30
		++data;
		--count;
    5c24:	21 97       	sbiw	r28, 0x01	; 1
    5c26:	f6 cf       	rjmp	.-20     	; 0x5c14 <SPI0_RX+0xc>
	}
}
    5c28:	df 91       	pop	r29
    5c2a:	cf 91       	pop	r28
    5c2c:	1f 91       	pop	r17
    5c2e:	0f 91       	pop	r16
    5c30:	08 95       	ret

00005c32 <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5c32:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5c34:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5c36:	ec eb       	ldi	r30, 0xBC	; 188
    5c38:	f0 e0       	ldi	r31, 0x00	; 0
    5c3a:	90 81       	ld	r25, Z
    5c3c:	94 60       	ori	r25, 0x04	; 4
    5c3e:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5c40:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5c44:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5c48:	08 95       	ret

00005c4a <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c4a:	84 e9       	ldi	r24, 0x94	; 148
    5c4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c50:	08 95       	ret

00005c52 <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5c52:	94 ea       	ldi	r25, 0xA4	; 164
    5c54:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c58:	24 e6       	ldi	r18, 0x64	; 100
    5c5a:	62 9f       	mul	r22, r18
    5c5c:	b0 01       	movw	r22, r0
    5c5e:	11 24       	eor	r1, r1
    5c60:	61 50       	subi	r22, 0x01	; 1
    5c62:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5c64:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5c66:	40 e0       	ldi	r20, 0x00	; 0
    5c68:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5c6a:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5c6c:	2f 3f       	cpi	r18, 0xFF	; 255
    5c6e:	9f ef       	ldi	r25, 0xFF	; 255
    5c70:	39 07       	cpc	r19, r25
    5c72:	41 f1       	breq	.+80     	; 0x5cc4 <TWI_StartTransmission+0x72>
    5c74:	41 15       	cp	r20, r1
    5c76:	51 05       	cpc	r21, r1
    5c78:	f1 f4       	brne	.+60     	; 0x5cb6 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5c7a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c7e:	97 ff       	sbrs	r25, 7
    5c80:	13 c0       	rjmp	.+38     	; 0x5ca8 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5c82:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c86:	98 7f       	andi	r25, 0xF8	; 248
    5c88:	90 31       	cpi	r25, 0x10	; 16
    5c8a:	61 f0       	breq	.+24     	; 0x5ca4 <TWI_StartTransmission+0x52>
    5c8c:	98 33       	cpi	r25, 0x38	; 56
    5c8e:	39 f0       	breq	.+14     	; 0x5c9e <TWI_StartTransmission+0x4c>
    5c90:	98 30       	cpi	r25, 0x08	; 8
    5c92:	41 f0       	breq	.+16     	; 0x5ca4 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5c94:	84 e0       	ldi	r24, 0x04	; 4
    5c96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5c9a:	81 e0       	ldi	r24, 0x01	; 1
    5c9c:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5c9e:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5ca2:	06 c0       	rjmp	.+12     	; 0x5cb0 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5ca4:	41 e0       	ldi	r20, 0x01	; 1
    5ca6:	50 e0       	ldi	r21, 0x00	; 0
    5ca8:	92 e4       	ldi	r25, 0x42	; 66
    5caa:	9a 95       	dec	r25
    5cac:	f1 f7       	brne	.-4      	; 0x5caa <TWI_StartTransmission+0x58>
    5cae:	00 c0       	rjmp	.+0      	; 0x5cb0 <TWI_StartTransmission+0x5e>
    5cb0:	21 50       	subi	r18, 0x01	; 1
    5cb2:	31 09       	sbc	r19, r1
    5cb4:	db cf       	rjmp	.-74     	; 0x5c6c <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5cb6:	23 2b       	or	r18, r19
    5cb8:	29 f4       	brne	.+10     	; 0x5cc4 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5cba:	84 e0       	ldi	r24, 0x04	; 4
    5cbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5cc0:	82 e0       	ldi	r24, 0x02	; 2
    5cc2:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5cc4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5cc8:	84 e8       	ldi	r24, 0x84	; 132
    5cca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5cce:	6f 3f       	cpi	r22, 0xFF	; 255
    5cd0:	8f ef       	ldi	r24, 0xFF	; 255
    5cd2:	78 07       	cpc	r23, r24
    5cd4:	71 f0       	breq	.+28     	; 0x5cf2 <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5cd6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5cda:	cb 01       	movw	r24, r22
    5cdc:	01 97       	sbiw	r24, 0x01	; 1
    5cde:	27 fd       	sbrc	r18, 7
    5ce0:	06 c0       	rjmp	.+12     	; 0x5cee <TWI_StartTransmission+0x9c>
    5ce2:	22 e4       	ldi	r18, 0x42	; 66
    5ce4:	2a 95       	dec	r18
    5ce6:	f1 f7       	brne	.-4      	; 0x5ce4 <TWI_StartTransmission+0x92>
    5ce8:	00 c0       	rjmp	.+0      	; 0x5cea <TWI_StartTransmission+0x98>
    5cea:	bc 01       	movw	r22, r24
    5cec:	f0 cf       	rjmp	.-32     	; 0x5cce <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5cee:	67 2b       	or	r22, r23
    5cf0:	61 f0       	breq	.+24     	; 0x5d0a <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5cf2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5cf6:	88 7f       	andi	r24, 0xF8	; 248
    5cf8:	88 31       	cpi	r24, 0x18	; 24
    5cfa:	49 f0       	breq	.+18     	; 0x5d0e <TWI_StartTransmission+0xbc>
    5cfc:	80 34       	cpi	r24, 0x40	; 64
    5cfe:	39 f0       	breq	.+14     	; 0x5d0e <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d00:	84 e9       	ldi	r24, 0x94	; 148
    5d02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5d06:	84 e0       	ldi	r24, 0x04	; 4
    5d08:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5d0a:	83 e0       	ldi	r24, 0x03	; 3
    5d0c:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5d10:	08 95       	ret

00005d12 <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5d12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5d16:	84 e8       	ldi	r24, 0x84	; 132
    5d18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5d1c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5d20:	87 ff       	sbrs	r24, 7
    5d22:	fc cf       	rjmp	.-8      	; 0x5d1c <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5d24:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5d28:	98 7f       	andi	r25, 0xF8	; 248
    5d2a:	21 e0       	ldi	r18, 0x01	; 1
    5d2c:	30 e0       	ldi	r19, 0x00	; 0
    5d2e:	98 32       	cpi	r25, 0x28	; 40
    5d30:	11 f0       	breq	.+4      	; 0x5d36 <TWI_SendByte+0x24>
    5d32:	20 e0       	ldi	r18, 0x00	; 0
    5d34:	30 e0       	ldi	r19, 0x00	; 0
}
    5d36:	c9 01       	movw	r24, r18
    5d38:	08 95       	ret

00005d3a <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5d3a:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5d3c:	61 15       	cp	r22, r1
    5d3e:	71 05       	cpc	r23, r1
    5d40:	11 f4       	brne	.+4      	; 0x5d46 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5d42:	94 ec       	ldi	r25, 0xC4	; 196
    5d44:	01 c0       	rjmp	.+2      	; 0x5d48 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5d46:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5d48:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5d4c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5d50:	87 ff       	sbrs	r24, 7
    5d52:	fc cf       	rjmp	.-8      	; 0x5d4c <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5d54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d58:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5d5a:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5d5e:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5d60:	81 e0       	ldi	r24, 0x01	; 1
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	67 2b       	or	r22, r23
    5d66:	19 f0       	breq	.+6      	; 0x5d6e <TWI_ReceiveByte+0x34>
    5d68:	28 35       	cpi	r18, 0x58	; 88
    5d6a:	19 f4       	brne	.+6      	; 0x5d72 <TWI_ReceiveByte+0x38>
    5d6c:	03 c0       	rjmp	.+6      	; 0x5d74 <TWI_ReceiveByte+0x3a>
    5d6e:	20 35       	cpi	r18, 0x50	; 80
    5d70:	09 f0       	breq	.+2      	; 0x5d74 <TWI_ReceiveByte+0x3a>
    5d72:	80 e0       	ldi	r24, 0x00	; 0
}
    5d74:	08 95       	ret

00005d76 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5d76:	a0 e0       	ldi	r26, 0x00	; 0
    5d78:	b0 e0       	ldi	r27, 0x00	; 0
    5d7a:	e1 ec       	ldi	r30, 0xC1	; 193
    5d7c:	fe e2       	ldi	r31, 0x2E	; 46
    5d7e:	0c 94 30 e4 	jmp	0x1c860	; 0x1c860 <__prologue_saves__+0xe>
    5d82:	f8 2e       	mov	r15, r24
    5d84:	b6 2e       	mov	r11, r22
    5d86:	94 2e       	mov	r9, r20
    5d88:	a5 2e       	mov	r10, r21
    5d8a:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5d8c:	8e 7f       	andi	r24, 0xFE	; 254
    5d8e:	61 df       	rcall	.-318    	; 0x5c52 <TWI_StartTransmission>
    5d90:	d8 2f       	mov	r29, r24
    5d92:	81 11       	cpse	r24, r1
    5d94:	2b c0       	rjmp	.+86     	; 0x5dec <TWI_ReadPacket+0x76>
    5d96:	c9 2c       	mov	r12, r9
    5d98:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5d9a:	cc 23       	and	r28, r28
    5d9c:	39 f0       	breq	.+14     	; 0x5dac <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5d9e:	f6 01       	movw	r30, r12
    5da0:	81 91       	ld	r24, Z+
    5da2:	6f 01       	movw	r12, r30
    5da4:	b6 df       	rcall	.-148    	; 0x5d12 <TWI_SendByte>
    5da6:	c1 50       	subi	r28, 0x01	; 1
    5da8:	89 2b       	or	r24, r25
    5daa:	b9 f7       	brne	.-18     	; 0x5d9a <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5dac:	6b 2d       	mov	r22, r11
    5dae:	8f 2d       	mov	r24, r15
    5db0:	81 60       	ori	r24, 0x01	; 1
    5db2:	4f df       	rcall	.-354    	; 0x5c52 <TWI_StartTransmission>
    5db4:	d8 2f       	mov	r29, r24
    5db6:	81 11       	cpse	r24, r1
    5db8:	19 c0       	rjmp	.+50     	; 0x5dec <TWI_ReadPacket+0x76>
    5dba:	cf ef       	ldi	r28, 0xFF	; 255
    5dbc:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5dbe:	cf 3f       	cpi	r28, 0xFF	; 255
    5dc0:	91 f0       	breq	.+36     	; 0x5de6 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5dc2:	78 01       	movw	r14, r16
    5dc4:	ff ef       	ldi	r31, 0xFF	; 255
    5dc6:	ef 1a       	sub	r14, r31
    5dc8:	ff 0a       	sbc	r15, r31
    5dca:	61 e0       	ldi	r22, 0x01	; 1
    5dcc:	70 e0       	ldi	r23, 0x00	; 0
    5dce:	cc 23       	and	r28, r28
    5dd0:	11 f0       	breq	.+4      	; 0x5dd6 <TWI_ReadPacket+0x60>
    5dd2:	60 e0       	ldi	r22, 0x00	; 0
    5dd4:	70 e0       	ldi	r23, 0x00	; 0
    5dd6:	c8 01       	movw	r24, r16
    5dd8:	b0 df       	rcall	.-160    	; 0x5d3a <TWI_ReceiveByte>
    5dda:	c1 50       	subi	r28, 0x01	; 1
    5ddc:	89 2b       	or	r24, r25
    5dde:	11 f0       	breq	.+4      	; 0x5de4 <TWI_ReadPacket+0x6e>
    5de0:	87 01       	movw	r16, r14
    5de2:	ed cf       	rjmp	.-38     	; 0x5dbe <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5de4:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5de6:	84 e9       	ldi	r24, 0x94	; 148
    5de8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5dec:	8d 2f       	mov	r24, r29
    5dee:	cd b7       	in	r28, 0x3d	; 61
    5df0:	de b7       	in	r29, 0x3e	; 62
    5df2:	eb e0       	ldi	r30, 0x0B	; 11
    5df4:	0c 94 4c e4 	jmp	0x1c898	; 0x1c898 <__epilogue_restores__+0xe>

00005df8 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5df8:	a0 e0       	ldi	r26, 0x00	; 0
    5dfa:	b0 e0       	ldi	r27, 0x00	; 0
    5dfc:	e2 e0       	ldi	r30, 0x02	; 2
    5dfe:	ff e2       	ldi	r31, 0x2F	; 47
    5e00:	0c 94 32 e4 	jmp	0x1c864	; 0x1c864 <__prologue_saves__+0x12>
    5e04:	b4 2e       	mov	r11, r20
    5e06:	f5 2e       	mov	r15, r21
    5e08:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5e0a:	8e 7f       	andi	r24, 0xFE	; 254
    5e0c:	22 df       	rcall	.-444    	; 0x5c52 <TWI_StartTransmission>
    5e0e:	d8 2f       	mov	r29, r24
    5e10:	81 11       	cpse	r24, r1
    5e12:	1a c0       	rjmp	.+52     	; 0x5e48 <TWI_WritePacket+0x50>
    5e14:	cb 2c       	mov	r12, r11
    5e16:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5e18:	cc 23       	and	r28, r28
    5e1a:	41 f0       	breq	.+16     	; 0x5e2c <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5e1c:	f6 01       	movw	r30, r12
    5e1e:	81 91       	ld	r24, Z+
    5e20:	6f 01       	movw	r12, r30
    5e22:	77 df       	rcall	.-274    	; 0x5d12 <TWI_SendByte>
    5e24:	c1 50       	subi	r28, 0x01	; 1
    5e26:	89 2b       	or	r24, r25
    5e28:	b9 f7       	brne	.-18     	; 0x5e18 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5e2a:	d5 e0       	ldi	r29, 0x05	; 5
    5e2c:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5e2e:	ee 20       	and	r14, r14
    5e30:	41 f0       	breq	.+16     	; 0x5e42 <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5e32:	f6 01       	movw	r30, r12
    5e34:	81 91       	ld	r24, Z+
    5e36:	6f 01       	movw	r12, r30
    5e38:	6c df       	rcall	.-296    	; 0x5d12 <TWI_SendByte>
    5e3a:	ea 94       	dec	r14
    5e3c:	89 2b       	or	r24, r25
    5e3e:	b9 f7       	brne	.-18     	; 0x5e2e <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5e40:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5e42:	84 e9       	ldi	r24, 0x94	; 148
    5e44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5e48:	8d 2f       	mov	r24, r29
    5e4a:	cd b7       	in	r28, 0x3d	; 61
    5e4c:	de b7       	in	r29, 0x3e	; 62
    5e4e:	e9 e0       	ldi	r30, 0x09	; 9
    5e50:	0c 94 4e e4 	jmp	0x1c89c	; 0x1c89c <__epilogue_restores__+0x12>

00005e54 <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    5e54:	1f 92       	push	r1
    5e56:	0f 92       	push	r0
    5e58:	0f b6       	in	r0, 0x3f	; 63
    5e5a:	0f 92       	push	r0
    5e5c:	11 24       	eor	r1, r1
    5e5e:	0b b6       	in	r0, 0x3b	; 59
    5e60:	0f 92       	push	r0
    5e62:	2f 93       	push	r18
    5e64:	3f 93       	push	r19
    5e66:	4f 93       	push	r20
    5e68:	5f 93       	push	r21
    5e6a:	6f 93       	push	r22
    5e6c:	7f 93       	push	r23
    5e6e:	8f 93       	push	r24
    5e70:	9f 93       	push	r25
    5e72:	af 93       	push	r26
    5e74:	bf 93       	push	r27
    5e76:	ef 93       	push	r30
    5e78:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5e7a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5e7e:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    5e80:	e0 91 6c 17 	lds	r30, 0x176C	; 0x80176c <op>
    5e84:	f0 91 6d 17 	lds	r31, 0x176D	; 0x80176d <op+0x1>
    5e88:	30 97       	sbiw	r30, 0x00	; 0
    5e8a:	09 f4       	brne	.+2      	; 0x5e8e <__vector_26+0x3a>
    5e8c:	6f c0       	rjmp	.+222    	; 0x5f6c <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5e8e:	90 81       	ld	r25, Z
    5e90:	90 ff       	sbrs	r25, 0
    5e92:	39 c0       	rjmp	.+114    	; 0x5f06 <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    5e94:	80 34       	cpi	r24, 0x40	; 64
    5e96:	81 f0       	breq	.+32     	; 0x5eb8 <__vector_26+0x64>
    5e98:	38 f4       	brcc	.+14     	; 0x5ea8 <__vector_26+0x54>
    5e9a:	80 31       	cpi	r24, 0x10	; 16
    5e9c:	09 f4       	brne	.+2      	; 0x5ea0 <__vector_26+0x4c>
    5e9e:	45 c0       	rjmp	.+138    	; 0x5f2a <__vector_26+0xd6>
    5ea0:	88 33       	cpi	r24, 0x38	; 56
    5ea2:	09 f4       	brne	.+2      	; 0x5ea6 <__vector_26+0x52>
    5ea4:	94 c0       	rjmp	.+296    	; 0x5fce <__vector_26+0x17a>
    5ea6:	36 c0       	rjmp	.+108    	; 0x5f14 <__vector_26+0xc0>
    5ea8:	80 35       	cpi	r24, 0x50	; 80
    5eaa:	59 f0       	breq	.+22     	; 0x5ec2 <__vector_26+0x6e>
    5eac:	88 35       	cpi	r24, 0x58	; 88
    5eae:	f1 f0       	breq	.+60     	; 0x5eec <__vector_26+0x98>
    5eb0:	88 34       	cpi	r24, 0x48	; 72
    5eb2:	09 f0       	breq	.+2      	; 0x5eb6 <__vector_26+0x62>
    5eb4:	5b c0       	rjmp	.+182    	; 0x5f6c <__vector_26+0x118>
    5eb6:	54 c0       	rjmp	.+168    	; 0x5f60 <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5eb8:	81 81       	ldd	r24, Z+1	; 0x01
    5eba:	81 30       	cpi	r24, 0x01	; 1
    5ebc:	09 f0       	breq	.+2      	; 0x5ec0 <__vector_26+0x6c>
    5ebe:	4a c0       	rjmp	.+148    	; 0x5f54 <__vector_26+0x100>
    5ec0:	13 c0       	rjmp	.+38     	; 0x5ee8 <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    5ec2:	a3 81       	ldd	r26, Z+3	; 0x03
    5ec4:	b4 81       	ldd	r27, Z+4	; 0x04
    5ec6:	82 81       	ldd	r24, Z+2	; 0x02
    5ec8:	91 e0       	ldi	r25, 0x01	; 1
    5eca:	98 0f       	add	r25, r24
    5ecc:	92 83       	std	Z+2, r25	; 0x02
    5ece:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5ed2:	a8 0f       	add	r26, r24
    5ed4:	b1 1d       	adc	r27, r1
    5ed6:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    5ed8:	82 81       	ldd	r24, Z+2	; 0x02
    5eda:	21 81       	ldd	r18, Z+1	; 0x01
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	01 96       	adiw	r24, 0x01	; 1
    5ee0:	30 e0       	ldi	r19, 0x00	; 0
    5ee2:	82 17       	cp	r24, r18
    5ee4:	93 07       	cpc	r25, r19
    5ee6:	b1 f5       	brne	.+108    	; 0x5f54 <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    5ee8:	85 e8       	ldi	r24, 0x85	; 133
    5eea:	7c c0       	rjmp	.+248    	; 0x5fe4 <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    5eec:	83 81       	ldd	r24, Z+3	; 0x03
    5eee:	94 81       	ldd	r25, Z+4	; 0x04
    5ef0:	22 81       	ldd	r18, Z+2	; 0x02
    5ef2:	31 e0       	ldi	r19, 0x01	; 1
    5ef4:	32 0f       	add	r19, r18
    5ef6:	32 83       	std	Z+2, r19	; 0x02
    5ef8:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5efc:	fc 01       	movw	r30, r24
    5efe:	e2 0f       	add	r30, r18
    5f00:	f1 1d       	adc	r31, r1
    5f02:	30 83       	st	Z, r19
      goto next_op;
    5f04:	35 c0       	rjmp	.+106    	; 0x5f70 <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    5f06:	80 32       	cpi	r24, 0x20	; 32
    5f08:	59 f1       	breq	.+86     	; 0x5f60 <__vector_26+0x10c>
    5f0a:	38 f4       	brcc	.+14     	; 0x5f1a <__vector_26+0xc6>
    5f0c:	80 31       	cpi	r24, 0x10	; 16
    5f0e:	69 f0       	breq	.+26     	; 0x5f2a <__vector_26+0xd6>
    5f10:	88 31       	cpi	r24, 0x18	; 24
    5f12:	a1 f0       	breq	.+40     	; 0x5f3c <__vector_26+0xe8>
    5f14:	88 30       	cpi	r24, 0x08	; 8
    5f16:	51 f5       	brne	.+84     	; 0x5f6c <__vector_26+0x118>
    5f18:	08 c0       	rjmp	.+16     	; 0x5f2a <__vector_26+0xd6>
    5f1a:	80 33       	cpi	r24, 0x30	; 48
    5f1c:	e9 f0       	breq	.+58     	; 0x5f58 <__vector_26+0x104>
    5f1e:	88 33       	cpi	r24, 0x38	; 56
    5f20:	09 f4       	brne	.+2      	; 0x5f24 <__vector_26+0xd0>
    5f22:	55 c0       	rjmp	.+170    	; 0x5fce <__vector_26+0x17a>
    5f24:	88 32       	cpi	r24, 0x28	; 40
    5f26:	11 f5       	brne	.+68     	; 0x5f6c <__vector_26+0x118>
    5f28:	05 c0       	rjmp	.+10     	; 0x5f34 <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    5f2a:	81 81       	ldd	r24, Z+1	; 0x01
    5f2c:	88 23       	and	r24, r24
    5f2e:	f1 f0       	breq	.+60     	; 0x5f6c <__vector_26+0x118>
      op->bufpos = 0;
    5f30:	12 82       	std	Z+2, r1	; 0x02
    5f32:	0d c0       	rjmp	.+26     	; 0x5f4e <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    5f34:	92 81       	ldd	r25, Z+2	; 0x02
    5f36:	81 81       	ldd	r24, Z+1	; 0x01
    5f38:	98 17       	cp	r25, r24
    5f3a:	d0 f4       	brcc	.+52     	; 0x5f70 <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5f3c:	83 81       	ldd	r24, Z+3	; 0x03
    5f3e:	94 81       	ldd	r25, Z+4	; 0x04
    5f40:	22 81       	ldd	r18, Z+2	; 0x02
    5f42:	31 e0       	ldi	r19, 0x01	; 1
    5f44:	32 0f       	add	r19, r18
    5f46:	32 83       	std	Z+2, r19	; 0x02
    5f48:	fc 01       	movw	r30, r24
    5f4a:	e2 0f       	add	r30, r18
    5f4c:	f1 1d       	adc	r31, r1
    5f4e:	80 81       	ld	r24, Z
    5f50:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5f54:	85 ec       	ldi	r24, 0xC5	; 197
    5f56:	46 c0       	rjmp	.+140    	; 0x5fe4 <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5f58:	92 81       	ldd	r25, Z+2	; 0x02
    5f5a:	81 81       	ldd	r24, Z+1	; 0x01
    5f5c:	98 17       	cp	r25, r24
    5f5e:	40 f4       	brcc	.+16     	; 0x5f70 <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5f60:	e0 91 6e 17 	lds	r30, 0x176E	; 0x80176e <txn>
    5f64:	f0 91 6f 17 	lds	r31, 0x176F	; 0x80176f <txn+0x1>
    5f68:	83 e0       	ldi	r24, 0x03	; 3
    5f6a:	1d c0       	rjmp	.+58     	; 0x5fa6 <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5f6c:	0e 94 12 e8 	call	0x1d024	; 0x1d024 <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5f70:	e0 91 6e 17 	lds	r30, 0x176E	; 0x80176e <txn>
    5f74:	f0 91 6f 17 	lds	r31, 0x176F	; 0x80176f <txn+0x1>
    5f78:	84 81       	ldd	r24, Z+4	; 0x04
    5f7a:	8f 5f       	subi	r24, 0xFF	; 255
    5f7c:	84 83       	std	Z+4, r24	; 0x04
    5f7e:	93 81       	ldd	r25, Z+3	; 0x03
    5f80:	89 17       	cp	r24, r25
    5f82:	80 f4       	brcc	.+32     	; 0x5fa4 <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5f84:	84 81       	ldd	r24, Z+4	; 0x04
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	01 96       	adiw	r24, 0x01	; 1
    5f8a:	45 e0       	ldi	r20, 0x05	; 5
    5f8c:	48 9f       	mul	r20, r24
    5f8e:	90 01       	movw	r18, r0
    5f90:	49 9f       	mul	r20, r25
    5f92:	30 0d       	add	r19, r0
    5f94:	11 24       	eor	r1, r1
    5f96:	e2 0f       	add	r30, r18
    5f98:	f3 1f       	adc	r31, r19
    5f9a:	f0 93 6d 17 	sts	0x176D, r31	; 0x80176d <op+0x1>
    5f9e:	e0 93 6c 17 	sts	0x176C, r30	; 0x80176c <op>
    5fa2:	15 c0       	rjmp	.+42     	; 0x5fce <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5fa4:	81 e0       	ldi	r24, 0x01	; 1
    5fa6:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5fa8:	e0 91 6e 17 	lds	r30, 0x176E	; 0x80176e <txn>
    5fac:	f0 91 6f 17 	lds	r31, 0x176F	; 0x80176f <txn+0x1>
    5fb0:	80 81       	ld	r24, Z
    5fb2:	91 81       	ldd	r25, Z+1	; 0x01
    5fb4:	89 2b       	or	r24, r25
    5fb6:	69 f0       	breq	.+26     	; 0x5fd2 <__vector_26+0x17e>
    txn = txn->next;
    5fb8:	80 81       	ld	r24, Z
    5fba:	91 81       	ldd	r25, Z+1	; 0x01
    5fbc:	90 93 6f 17 	sts	0x176F, r25	; 0x80176f <txn+0x1>
    5fc0:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <txn>
    op = &txn->ops[0];
    5fc4:	05 96       	adiw	r24, 0x05	; 5
    5fc6:	90 93 6d 17 	sts	0x176D, r25	; 0x80176d <op+0x1>
    5fca:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5fce:	85 ee       	ldi	r24, 0xE5	; 229
    5fd0:	09 c0       	rjmp	.+18     	; 0x5fe4 <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5fd2:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <txn+0x1>
    5fd6:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <txn>
  op = NULL;
    5fda:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <op+0x1>
    5fde:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5fe2:	85 ed       	ldi	r24, 0xD5	; 213
    5fe4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5fe8:	ff 91       	pop	r31
    5fea:	ef 91       	pop	r30
    5fec:	bf 91       	pop	r27
    5fee:	af 91       	pop	r26
    5ff0:	9f 91       	pop	r25
    5ff2:	8f 91       	pop	r24
    5ff4:	7f 91       	pop	r23
    5ff6:	6f 91       	pop	r22
    5ff8:	5f 91       	pop	r21
    5ffa:	4f 91       	pop	r20
    5ffc:	3f 91       	pop	r19
    5ffe:	2f 91       	pop	r18
    6000:	0f 90       	pop	r0
    6002:	0b be       	out	0x3b, r0	; 59
    6004:	0f 90       	pop	r0
    6006:	0f be       	out	0x3f, r0	; 63
    6008:	0f 90       	pop	r0
    600a:	1f 90       	pop	r1
    600c:	18 95       	reti

0000600e <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    600e:	6a e0       	ldi	r22, 0x0A	; 10
    6010:	0e 94 74 e3 	call	0x1c6e8	; 0x1c6e8 <__udivmodqi4>
    6014:	82 95       	swap	r24
    6016:	80 7f       	andi	r24, 0xF0	; 240
    6018:	89 2b       	or	r24, r25
    601a:	08 95       	ret

0000601c <BCDtoBIN>:
    601c:	98 2f       	mov	r25, r24
    601e:	92 95       	swap	r25
    6020:	9f 70       	andi	r25, 0x0F	; 15
    6022:	8f 70       	andi	r24, 0x0F	; 15
    6024:	2a e0       	ldi	r18, 0x0A	; 10
    6026:	92 9f       	mul	r25, r18
    6028:	80 0d       	add	r24, r0
    602a:	11 24       	eor	r1, r1
    602c:	08 95       	ret

0000602e <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    602e:	cf 92       	push	r12
    6030:	df 92       	push	r13
    6032:	ef 92       	push	r14
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
    603c:	00 d0       	rcall	.+0      	; 0x603e <rtc_run+0x10>
    603e:	1f 92       	push	r1
    6040:	cd b7       	in	r28, 0x3d	; 61
    6042:	de b7       	in	r29, 0x3e	; 62
    6044:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    6046:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    6048:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    604a:	ee 24       	eor	r14, r14
    604c:	e3 94       	inc	r14
    604e:	8e 01       	movw	r16, r28
    6050:	0f 5f       	subi	r16, 0xFF	; 255
    6052:	1f 4f       	sbci	r17, 0xFF	; 255
    6054:	21 e0       	ldi	r18, 0x01	; 1
    6056:	ae 01       	movw	r20, r28
    6058:	4e 5f       	subi	r20, 0xFE	; 254
    605a:	5f 4f       	sbci	r21, 0xFF	; 255
    605c:	62 e3       	ldi	r22, 0x32	; 50
    605e:	81 ed       	ldi	r24, 0xD1	; 209
    6060:	8a de       	rcall	.-748    	; 0x5d76 <TWI_ReadPacket>
    6062:	88 23       	and	r24, r24
    6064:	19 f0       	breq	.+6      	; 0x606c <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    6066:	84 ea       	ldi	r24, 0xA4	; 164
    6068:	94 e0       	ldi	r25, 0x04	; 4
    606a:	2a c0       	rjmp	.+84     	; 0x60c0 <rtc_run+0x92>
    606c:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    606e:	9f ef       	ldi	r25, 0xFF	; 255
    6070:	c9 16       	cp	r12, r25
    6072:	d9 06       	cpc	r13, r25
    6074:	59 f4       	brne	.+22     	; 0x608c <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    6076:	08 2e       	mov	r0, r24
    6078:	00 0c       	add	r0, r0
    607a:	99 0b       	sbc	r25, r25
    607c:	80 95       	com	r24
    607e:	90 95       	com	r25
    6080:	89 2f       	mov	r24, r25
    6082:	88 1f       	adc	r24, r24
    6084:	88 27       	eor	r24, r24
    6086:	88 1f       	adc	r24, r24
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	26 c0       	rjmp	.+76     	; 0x60d8 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    608c:	8f 77       	andi	r24, 0x7F	; 127
    608e:	c1 14       	cp	r12, r1
    6090:	d1 04       	cpc	r13, r1
    6092:	11 f4       	brne	.+4      	; 0x6098 <rtc_run+0x6a>
    6094:	90 e8       	ldi	r25, 0x80	; 128
    6096:	01 c0       	rjmp	.+2      	; 0x609a <rtc_run+0x6c>
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	89 2b       	or	r24, r25
    609c:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    609e:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    60a0:	ee 24       	eor	r14, r14
    60a2:	e3 94       	inc	r14
    60a4:	8e 01       	movw	r16, r28
    60a6:	0f 5f       	subi	r16, 0xFF	; 255
    60a8:	1f 4f       	sbci	r17, 0xFF	; 255
    60aa:	21 e0       	ldi	r18, 0x01	; 1
    60ac:	ae 01       	movw	r20, r28
    60ae:	4d 5f       	subi	r20, 0xFD	; 253
    60b0:	5f 4f       	sbci	r21, 0xFF	; 255
    60b2:	62 e3       	ldi	r22, 0x32	; 50
    60b4:	80 ed       	ldi	r24, 0xD0	; 208
    60b6:	a0 de       	rcall	.-704    	; 0x5df8 <TWI_WritePacket>
    60b8:	88 23       	and	r24, r24
    60ba:	69 f0       	breq	.+26     	; 0x60d6 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    60bc:	86 e8       	ldi	r24, 0x86	; 134
    60be:	94 e0       	ldi	r25, 0x04	; 4
    60c0:	1f 92       	push	r1
    60c2:	9f 93       	push	r25
    60c4:	8f 93       	push	r24
    60c6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
    60ca:	0f 90       	pop	r0
    60cc:	0f 90       	pop	r0
    60ce:	0f 90       	pop	r0
    60d0:	8f ef       	ldi	r24, 0xFF	; 255
    60d2:	9f ef       	ldi	r25, 0xFF	; 255
    60d4:	01 c0       	rjmp	.+2      	; 0x60d8 <rtc_run+0xaa>
    60d6:	c6 01       	movw	r24, r12
    }
    return(run);
}
    60d8:	0f 90       	pop	r0
    60da:	0f 90       	pop	r0
    60dc:	0f 90       	pop	r0
    60de:	df 91       	pop	r29
    60e0:	cf 91       	pop	r28
    60e2:	1f 91       	pop	r17
    60e4:	0f 91       	pop	r16
    60e6:	ef 90       	pop	r14
    60e8:	df 90       	pop	r13
    60ea:	cf 90       	pop	r12
    60ec:	08 95       	ret

000060ee <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    60ee:	ef 92       	push	r14
    60f0:	0f 93       	push	r16
    60f2:	1f 93       	push	r17
    60f4:	cf 93       	push	r28
    60f6:	df 93       	push	r29
    60f8:	cd b7       	in	r28, 0x3d	; 61
    60fa:	de b7       	in	r29, 0x3e	; 62
    60fc:	29 97       	sbiw	r28, 0x09	; 9
    60fe:	0f b6       	in	r0, 0x3f	; 63
    6100:	f8 94       	cli
    6102:	de bf       	out	0x3e, r29	; 62
    6104:	0f be       	out	0x3f, r0	; 63
    6106:	cd bf       	out	0x3d, r28	; 61
    6108:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    610a:	fc 01       	movw	r30, r24
    610c:	80 81       	ld	r24, Z
    610e:	7f df       	rcall	.-258    	; 0x600e <BINtoBCD>
    6110:	8f 77       	andi	r24, 0x7F	; 127
    6112:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    6114:	f8 01       	movw	r30, r16
    6116:	82 81       	ldd	r24, Z+2	; 0x02
    6118:	7a df       	rcall	.-268    	; 0x600e <BINtoBCD>
    611a:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    611c:	8a 83       	std	Y+2, r24	; 0x02
    611e:	f8 01       	movw	r30, r16
    6120:	84 81       	ldd	r24, Z+4	; 0x04
    6122:	75 df       	rcall	.-278    	; 0x600e <BINtoBCD>
    6124:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    6126:	8b 83       	std	Y+3, r24	; 0x03
    6128:	f8 01       	movw	r30, r16
    612a:	84 85       	ldd	r24, Z+12	; 0x0c
    612c:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    612e:	8f 5f       	subi	r24, 0xFF	; 255
    6130:	8c 83       	std	Y+4, r24	; 0x04
    6132:	86 81       	ldd	r24, Z+6	; 0x06
    6134:	6c df       	rcall	.-296    	; 0x600e <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    6136:	8f 73       	andi	r24, 0x3F	; 63
    6138:	8d 83       	std	Y+5, r24	; 0x05
    613a:	f8 01       	movw	r30, r16
    613c:	80 85       	ldd	r24, Z+8	; 0x08
    613e:	8f 5f       	subi	r24, 0xFF	; 255
    6140:	66 df       	rcall	.-308    	; 0x600e <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    6142:	8f 71       	andi	r24, 0x1F	; 31
    6144:	8e 83       	std	Y+6, r24	; 0x06
    6146:	f8 01       	movw	r30, r16
    6148:	82 85       	ldd	r24, Z+10	; 0x0a
    614a:	84 56       	subi	r24, 0x64	; 100
    614c:	60 df       	rcall	.-320    	; 0x600e <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    614e:	8f 83       	std	Y+7, r24	; 0x07
    6150:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    6152:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    6154:	19 86       	std	Y+9, r1	; 0x09
    6156:	88 e0       	ldi	r24, 0x08	; 8
    6158:	e8 2e       	mov	r14, r24
    615a:	8e 01       	movw	r16, r28
    615c:	0f 5f       	subi	r16, 0xFF	; 255
    615e:	1f 4f       	sbci	r17, 0xFF	; 255
    6160:	21 e0       	ldi	r18, 0x01	; 1
    6162:	ae 01       	movw	r20, r28
    6164:	47 5f       	subi	r20, 0xF7	; 247
    6166:	5f 4f       	sbci	r21, 0xFF	; 255
    6168:	62 e3       	ldi	r22, 0x32	; 50
    616a:	80 ed       	ldi	r24, 0xD0	; 208
    616c:	45 de       	rcall	.-886    	; 0x5df8 <TWI_WritePacket>
    616e:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    6170:	61 f0       	breq	.+24     	; 0x618a <rtc_write+0x9c>
    6172:	87 e5       	ldi	r24, 0x57	; 87
    6174:	94 e0       	ldi	r25, 0x04	; 4
    6176:	1f 92       	push	r1
    6178:	9f 93       	push	r25
    617a:	8f 93       	push	r24
    617c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(0);
    6180:	0f 90       	pop	r0
    6182:	0f 90       	pop	r0
    6184:	0f 90       	pop	r0
    6186:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    6188:	01 c0       	rjmp	.+2      	; 0x618c <rtc_write+0x9e>
}
    618a:	81 e0       	ldi	r24, 0x01	; 1
    618c:	29 96       	adiw	r28, 0x09	; 9
    618e:	0f b6       	in	r0, 0x3f	; 63
    6190:	f8 94       	cli
    6192:	de bf       	out	0x3e, r29	; 62
    6194:	0f be       	out	0x3f, r0	; 63
    6196:	cd bf       	out	0x3d, r28	; 61
    6198:	df 91       	pop	r29
    619a:	cf 91       	pop	r28
    619c:	1f 91       	pop	r17
    619e:	0f 91       	pop	r16
    61a0:	ef 90       	pop	r14
    61a2:	08 95       	ret

000061a4 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    61a4:	a4 e0       	ldi	r26, 0x04	; 4
    61a6:	b0 e0       	ldi	r27, 0x00	; 0
    61a8:	e8 ed       	ldi	r30, 0xD8	; 216
    61aa:	f0 e3       	ldi	r31, 0x30	; 48
    61ac:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    61b0:	8c 01       	movw	r16, r24
    61b2:	49 83       	std	Y+1, r20	; 0x01
    61b4:	5a 83       	std	Y+2, r21	; 0x02
    61b6:	6b 83       	std	Y+3, r22	; 0x03
    61b8:	7c 83       	std	Y+4, r23	; 0x04
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    61ba:	61 e1       	ldi	r22, 0x11	; 17
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	39 dd       	rcall	.-1422   	; 0x5c32 <TWI_Init>

    if(!force)
    61c0:	01 15       	cp	r16, r1
    61c2:	11 05       	cpc	r17, r1
    61c4:	d9 f4       	brne	.+54     	; 0x61fc <rtc_init+0x58>
    {
        state = rtc_run(-1);
    61c6:	8f ef       	ldi	r24, 0xFF	; 255
    61c8:	9f ef       	ldi	r25, 0xFF	; 255
    61ca:	31 df       	rcall	.-414    	; 0x602e <rtc_run>
        if(state < 0)
    61cc:	87 ff       	sbrs	r24, 7
    61ce:	06 c0       	rjmp	.+12     	; 0x61dc <rtc_init+0x38>
        {
            rtc_ok = 0;
    61d0:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <rtc_ok+0x1>
    61d4:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <rtc_ok>
            return 0;
    61d8:	10 e0       	ldi	r17, 0x00	; 0
    61da:	2b c0       	rjmp	.+86     	; 0x6232 <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    61dc:	88 23       	and	r24, r24
    61de:	71 f0       	breq	.+28     	; 0x61fc <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    61e0:	05 c0       	rjmp	.+10     	; 0x61ec <rtc_init+0x48>
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	23 df       	rcall	.-442    	; 0x602e <rtc_run>
    61e8:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    61ea:	f2 cf       	rjmp	.-28     	; 0x61d0 <rtc_init+0x2c>
    61ec:	81 e0       	ldi	r24, 0x01	; 1
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <rtc_ok+0x1>
    61f4:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    61f8:	11 e0       	ldi	r17, 0x01	; 1
    61fa:	1b c0       	rjmp	.+54     	; 0x6232 <rtc_init+0x8e>
    61fc:	80 e0       	ldi	r24, 0x00	; 0
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	16 df       	rcall	.-468    	; 0x602e <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    6202:	97 fd       	sbrc	r25, 7
    6204:	e5 cf       	rjmp	.-54     	; 0x61d0 <rtc_init+0x2c>
    6206:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    6208:	01 96       	adiw	r24, 0x01	; 1
    620a:	0e 94 81 39 	call	0x7302	; 0x7302 <gmtime>
    620e:	6f df       	rcall	.-290    	; 0x60ee <rtc_write>
    6210:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    6212:	81 11       	cpse	r24, r1
    6214:	e6 cf       	rjmp	.-52     	; 0x61e2 <rtc_init+0x3e>
    6216:	88 e6       	ldi	r24, 0x68	; 104
    6218:	94 e0       	ldi	r25, 0x04	; 4
    621a:	1f 92       	push	r1
    621c:	9f 93       	push	r25
    621e:	8f 93       	push	r24
            rtc_ok = 0;
    6220:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    6224:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <rtc_ok+0x1>
            return 0;
    6228:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <rtc_ok>
    622c:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    622e:	0f 90       	pop	r0
    6230:	0f 90       	pop	r0
    6232:	81 2f       	mov	r24, r17
    6234:	24 96       	adiw	r28, 0x04	; 4
    6236:	e4 e0       	ldi	r30, 0x04	; 4
    6238:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

0000623c <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    623c:	cf 92       	push	r12
    623e:	df 92       	push	r13
    6240:	ef 92       	push	r14
    6242:	0f 93       	push	r16
    6244:	1f 93       	push	r17
    6246:	cf 93       	push	r28
    6248:	df 93       	push	r29
    624a:	cd b7       	in	r28, 0x3d	; 61
    624c:	de b7       	in	r29, 0x3e	; 62
    624e:	29 97       	sbiw	r28, 0x09	; 9
    6250:	0f b6       	in	r0, 0x3f	; 63
    6252:	f8 94       	cli
    6254:	de bf       	out	0x3e, r29	; 62
    6256:	0f be       	out	0x3f, r0	; 63
    6258:	cd bf       	out	0x3d, r28	; 61
    625a:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    625c:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    625e:	88 e0       	ldi	r24, 0x08	; 8
    6260:	e8 2e       	mov	r14, r24
    6262:	8e 01       	movw	r16, r28
    6264:	0f 5f       	subi	r16, 0xFF	; 255
    6266:	1f 4f       	sbci	r17, 0xFF	; 255
    6268:	21 e0       	ldi	r18, 0x01	; 1
    626a:	ae 01       	movw	r20, r28
    626c:	47 5f       	subi	r20, 0xF7	; 247
    626e:	5f 4f       	sbci	r21, 0xFF	; 255
    6270:	62 e3       	ldi	r22, 0x32	; 50
    6272:	81 ed       	ldi	r24, 0xD1	; 209
    6274:	80 dd       	rcall	.-1280   	; 0x5d76 <TWI_ReadPacket>
    6276:	88 23       	and	r24, r24
    6278:	61 f0       	breq	.+24     	; 0x6292 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    627a:	87 e4       	ldi	r24, 0x47	; 71
    627c:	94 e0       	ldi	r25, 0x04	; 4
    627e:	1f 92       	push	r1
    6280:	9f 93       	push	r25
    6282:	8f 93       	push	r24
    6284:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return 0;
    6288:	0f 90       	pop	r0
    628a:	0f 90       	pop	r0
    628c:	0f 90       	pop	r0
    628e:	80 e0       	ldi	r24, 0x00	; 0
    6290:	33 c0       	rjmp	.+102    	; 0x62f8 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    6292:	89 81       	ldd	r24, Y+1	; 0x01
    6294:	8f 77       	andi	r24, 0x7F	; 127
    6296:	c2 de       	rcall	.-636    	; 0x601c <BCDtoBIN>
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	f6 01       	movw	r30, r12
    629c:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    629e:	80 83       	st	Z, r24
    62a0:	8a 81       	ldd	r24, Y+2	; 0x02
    62a2:	8f 77       	andi	r24, 0x7F	; 127
    62a4:	bb de       	rcall	.-650    	; 0x601c <BCDtoBIN>
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    62aa:	93 83       	std	Z+3, r25	; 0x03
    62ac:	82 83       	std	Z+2, r24	; 0x02
    62ae:	8b 81       	ldd	r24, Y+3	; 0x03
    62b0:	8f 73       	andi	r24, 0x3F	; 63
    62b2:	b4 de       	rcall	.-664    	; 0x601c <BCDtoBIN>
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	f6 01       	movw	r30, r12
    62b8:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    62ba:	84 83       	std	Z+4, r24	; 0x04
    62bc:	8c 81       	ldd	r24, Y+4	; 0x04
    62be:	87 70       	andi	r24, 0x07	; 7
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    62c4:	95 87       	std	Z+13, r25	; 0x0d
    62c6:	84 87       	std	Z+12, r24	; 0x0c
    62c8:	8d 81       	ldd	r24, Y+5	; 0x05
    62ca:	8f 73       	andi	r24, 0x3F	; 63
    62cc:	a7 de       	rcall	.-690    	; 0x601c <BCDtoBIN>
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    62d2:	97 83       	std	Z+7, r25	; 0x07
    62d4:	86 83       	std	Z+6, r24	; 0x06
    62d6:	8e 81       	ldd	r24, Y+6	; 0x06
    62d8:	8f 71       	andi	r24, 0x1F	; 31
    62da:	a0 de       	rcall	.-704    	; 0x601c <BCDtoBIN>
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	01 97       	sbiw	r24, 0x01	; 1
    62e0:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    62e2:	91 87       	std	Z+9, r25	; 0x09
    62e4:	80 87       	std	Z+8, r24	; 0x08
    62e6:	8f 81       	ldd	r24, Y+7	; 0x07
    62e8:	99 de       	rcall	.-718    	; 0x601c <BCDtoBIN>
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	8c 59       	subi	r24, 0x9C	; 156
    62ee:	9f 4f       	sbci	r25, 0xFF	; 255
    62f0:	f6 01       	movw	r30, r12
    62f2:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    62f4:	82 87       	std	Z+10, r24	; 0x0a
}
    62f6:	81 e0       	ldi	r24, 0x01	; 1
    62f8:	29 96       	adiw	r28, 0x09	; 9
    62fa:	0f b6       	in	r0, 0x3f	; 63
    62fc:	f8 94       	cli
    62fe:	de bf       	out	0x3e, r29	; 62
    6300:	0f be       	out	0x3f, r0	; 63
    6302:	cd bf       	out	0x3d, r28	; 61
    6304:	df 91       	pop	r29
    6306:	cf 91       	pop	r28
    6308:	1f 91       	pop	r17
    630a:	0f 91       	pop	r16
    630c:	ef 90       	pop	r14
    630e:	df 90       	pop	r13
    6310:	cf 90       	pop	r12
    6312:	08 95       	ret

00006314 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    6314:	64 e1       	ldi	r22, 0x14	; 20
    6316:	9d dc       	rcall	.-1734   	; 0x5c52 <TWI_StartTransmission>
    6318:	81 11       	cpse	r24, r1
    631a:	07 c0       	rjmp	.+14     	; 0x632a <I2C_Start+0x16>
    631c:	81 e0       	ldi	r24, 0x01	; 1
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    6324:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    6328:	04 c0       	rjmp	.+8      	; 0x6332 <I2C_Start+0x1e>
    632a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    632e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    6332:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6336:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    633a:	08 95       	ret

0000633c <I2C_Stop>:
    633c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6340:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6344:	89 2b       	or	r24, r25
    6346:	09 f0       	breq	.+2      	; 0x634a <I2C_Stop+0xe>
    6348:	80 cc       	rjmp	.-1792   	; 0x5c4a <TWI_StopTransmission>
    634a:	08 95       	ret

0000634c <I2C_Send>:
    634c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    6350:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6354:	21 15       	cp	r18, r1
    6356:	31 05       	cpc	r19, r1
    6358:	41 f0       	breq	.+16     	; 0x636a <I2C_Send+0x1e>
    635a:	db dc       	rcall	.-1610   	; 0x5d12 <TWI_SendByte>
    635c:	51 e0       	ldi	r21, 0x01	; 1
    635e:	40 e0       	ldi	r20, 0x00	; 0
    6360:	89 2b       	or	r24, r25
    6362:	09 f0       	breq	.+2      	; 0x6366 <I2C_Send+0x1a>
    6364:	50 e0       	ldi	r21, 0x00	; 0
    6366:	25 2f       	mov	r18, r21
    6368:	34 2f       	mov	r19, r20
    636a:	c9 01       	movw	r24, r18
    636c:	08 95       	ret

0000636e <LCD_putb>:
    636e:	cf 93       	push	r28
    6370:	c8 2f       	mov	r28, r24
    6372:	84 ee       	ldi	r24, 0xE4	; 228
    6374:	cf df       	rcall	.-98     	; 0x6314 <I2C_Start>
    6376:	89 2b       	or	r24, r25
    6378:	19 f4       	brne	.+6      	; 0x6380 <LCD_putb+0x12>
    637a:	80 e0       	ldi	r24, 0x00	; 0
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	07 c0       	rjmp	.+14     	; 0x638e <LCD_putb+0x20>
    6380:	8c 2f       	mov	r24, r28
    6382:	e4 df       	rcall	.-56     	; 0x634c <I2C_Send>
    6384:	89 2b       	or	r24, r25
    6386:	c9 f3       	breq	.-14     	; 0x637a <LCD_putb+0xc>
    6388:	d9 df       	rcall	.-78     	; 0x633c <I2C_Stop>
    638a:	81 e0       	ldi	r24, 0x01	; 1
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	cf 91       	pop	r28
    6390:	08 95       	ret

00006392 <LCD_command>:
    6392:	cf 93       	push	r28
    6394:	c8 2f       	mov	r28, r24
    6396:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    639a:	bc df       	rcall	.-136    	; 0x6314 <I2C_Start>
    639c:	89 2b       	or	r24, r25
    639e:	51 f0       	breq	.+20     	; 0x63b4 <LCD_command+0x22>
    63a0:	8c e7       	ldi	r24, 0x7C	; 124
    63a2:	d4 df       	rcall	.-88     	; 0x634c <I2C_Send>
    63a4:	8c 2f       	mov	r24, r28
    63a6:	d2 df       	rcall	.-92     	; 0x634c <I2C_Send>
    63a8:	c9 df       	rcall	.-110    	; 0x633c <I2C_Stop>
    63aa:	6a e0       	ldi	r22, 0x0A	; 10
    63ac:	70 e0       	ldi	r23, 0x00	; 0
    63ae:	80 e0       	ldi	r24, 0x00	; 0
    63b0:	90 e0       	ldi	r25, 0x00	; 0
    63b2:	27 d9       	rcall	.-3506   	; 0x5602 <delayms>
    63b4:	cf 91       	pop	r28
    63b6:	08 95       	ret

000063b8 <LCD_specialCommand>:
    63b8:	cf 93       	push	r28
    63ba:	c8 2f       	mov	r28, r24
    63bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    63c0:	a9 df       	rcall	.-174    	; 0x6314 <I2C_Start>
    63c2:	89 2b       	or	r24, r25
    63c4:	51 f0       	breq	.+20     	; 0x63da <LCD_specialCommand+0x22>
    63c6:	8e ef       	ldi	r24, 0xFE	; 254
    63c8:	c1 df       	rcall	.-126    	; 0x634c <I2C_Send>
    63ca:	8c 2f       	mov	r24, r28
    63cc:	bf df       	rcall	.-130    	; 0x634c <I2C_Send>
    63ce:	b6 df       	rcall	.-148    	; 0x633c <I2C_Stop>
    63d0:	62 e3       	ldi	r22, 0x32	; 50
    63d2:	70 e0       	ldi	r23, 0x00	; 0
    63d4:	80 e0       	ldi	r24, 0x00	; 0
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	14 d9       	rcall	.-3544   	; 0x5602 <delayms>
    63da:	cf 91       	pop	r28
    63dc:	08 95       	ret

000063de <LCD_setCursor>:
    63de:	a8 e0       	ldi	r26, 0x08	; 8
    63e0:	b0 e0       	ldi	r27, 0x00	; 0
    63e2:	e5 ef       	ldi	r30, 0xF5	; 245
    63e4:	f1 e3       	ldi	r31, 0x31	; 49
    63e6:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    63ea:	98 e0       	ldi	r25, 0x08	; 8
    63ec:	ed e5       	ldi	r30, 0x5D	; 93
    63ee:	f2 e0       	ldi	r31, 0x02	; 2
    63f0:	de 01       	movw	r26, r28
    63f2:	11 96       	adiw	r26, 0x01	; 1
    63f4:	01 90       	ld	r0, Z+
    63f6:	0d 92       	st	X+, r0
    63f8:	9a 95       	dec	r25
    63fa:	e1 f7       	brne	.-8      	; 0x63f4 <LCD_setCursor+0x16>
    63fc:	64 30       	cpi	r22, 0x04	; 4
    63fe:	08 f0       	brcs	.+2      	; 0x6402 <LCD_setCursor+0x24>
    6400:	63 e0       	ldi	r22, 0x03	; 3
    6402:	fe 01       	movw	r30, r28
    6404:	31 96       	adiw	r30, 0x01	; 1
    6406:	e6 0f       	add	r30, r22
    6408:	f1 1d       	adc	r31, r1
    640a:	e6 0f       	add	r30, r22
    640c:	f1 1d       	adc	r31, r1
    640e:	90 81       	ld	r25, Z
    6410:	89 0f       	add	r24, r25
    6412:	80 68       	ori	r24, 0x80	; 128
    6414:	d1 df       	rcall	.-94     	; 0x63b8 <LCD_specialCommand>
    6416:	28 96       	adiw	r28, 0x08	; 8
    6418:	e2 e0       	ldi	r30, 0x02	; 2
    641a:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000641e <LCD_pos>:
    641e:	ea e0       	ldi	r30, 0x0A	; 10
    6420:	f1 e0       	ldi	r31, 0x01	; 1
    6422:	28 2f       	mov	r18, r24
    6424:	30 e0       	ldi	r19, 0x00	; 0
    6426:	31 83       	std	Z+1, r19	; 0x01
    6428:	20 83       	st	Z, r18
    642a:	26 2f       	mov	r18, r22
    642c:	30 e0       	ldi	r19, 0x00	; 0
    642e:	33 83       	std	Z+3, r19	; 0x03
    6430:	22 83       	std	Z+2, r18	; 0x02
    6432:	d5 cf       	rjmp	.-86     	; 0x63de <LCD_setCursor>
    6434:	08 95       	ret

00006436 <LCD_clear>:
    6436:	8d e2       	ldi	r24, 0x2D	; 45
    6438:	ac df       	rcall	.-168    	; 0x6392 <LCD_command>
    643a:	60 e0       	ldi	r22, 0x00	; 0
    643c:	80 e0       	ldi	r24, 0x00	; 0
    643e:	ef df       	rcall	.-34     	; 0x641e <LCD_pos>
    6440:	6a e0       	ldi	r22, 0x0A	; 10
    6442:	70 e0       	ldi	r23, 0x00	; 0
    6444:	80 e0       	ldi	r24, 0x00	; 0
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	dc c8       	rjmp	.-3656   	; 0x5602 <delayms>
    644a:	08 95       	ret

0000644c <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    644c:	1f 93       	push	r17
    644e:	cf 93       	push	r28
    6450:	df 93       	push	r29
    6452:	18 2f       	mov	r17, r24
    6454:	d6 2f       	mov	r29, r22
    6456:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    6458:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    645c:	5b df       	rcall	.-330    	; 0x6314 <I2C_Start>
    645e:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6460:	81 f0       	breq	.+32     	; 0x6482 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6462:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6464:	73 df       	rcall	.-282    	; 0x634c <I2C_Send>
    6466:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    6468:	71 df       	rcall	.-286    	; 0x634c <I2C_Send>
    646a:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    646c:	6f df       	rcall	.-290    	; 0x634c <I2C_Send>
    646e:	8d 2f       	mov	r24, r29
  delayms(10);
    6470:	6d df       	rcall	.-294    	; 0x634c <I2C_Send>
    6472:	8c 2f       	mov	r24, r28
    6474:	6b df       	rcall	.-298    	; 0x634c <I2C_Send>
    6476:	62 df       	rcall	.-316    	; 0x633c <I2C_Stop>
    6478:	6a e0       	ldi	r22, 0x0A	; 10
    647a:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    647c:	80 e0       	ldi	r24, 0x00	; 0
    647e:	90 e0       	ldi	r25, 0x00	; 0
    6480:	c0 d8       	rcall	.-3712   	; 0x5602 <delayms>
    6482:	df 91       	pop	r29
    6484:	cf 91       	pop	r28
    6486:	1f 91       	pop	r17
    6488:	08 95       	ret

0000648a <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    648a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    648e:	42 df       	rcall	.-380    	; 0x6314 <I2C_Start>
    6490:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6492:	61 f1       	breq	.+88     	; 0x64ec <LCD_init+0x62>
    6494:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    6496:	5a df       	rcall	.-332    	; 0x634c <I2C_Send>
    6498:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    649c:	88 60       	ori	r24, 0x08	; 8
    649e:	56 df       	rcall	.-340    	; 0x634c <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    64a0:	8e ef       	ldi	r24, 0xFE	; 254
    64a2:	54 df       	rcall	.-344    	; 0x634c <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    64a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    64a8:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    64aa:	50 df       	rcall	.-352    	; 0x634c <I2C_Send>
    64ac:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    64ae:	4e df       	rcall	.-356    	; 0x634c <I2C_Send>
    64b0:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    64b2:	4c df       	rcall	.-360    	; 0x634c <I2C_Send>
    64b4:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    64b6:	4a df       	rcall	.-364    	; 0x634c <I2C_Send>
    64b8:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    64ba:	48 df       	rcall	.-368    	; 0x634c <I2C_Send>
    64bc:	8e ef       	ldi	r24, 0xFE	; 254
    64be:	46 df       	rcall	.-372    	; 0x634c <I2C_Send>
    64c0:	80 e8       	ldi	r24, 0x80	; 128
    64c2:	44 df       	rcall	.-376    	; 0x634c <I2C_Send>
    64c4:	3b df       	rcall	.-394    	; 0x633c <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    64c6:	62 e3       	ldi	r22, 0x32	; 50
    64c8:	70 e0       	ldi	r23, 0x00	; 0
    64ca:	80 e0       	ldi	r24, 0x00	; 0
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	99 d8       	rcall	.-3790   	; 0x5602 <delayms>

  lcd.xpos = 0;
    64d0:	40 ec       	ldi	r20, 0xC0	; 192
    64d2:	60 ec       	ldi	r22, 0xC0	; 192
    64d4:	80 ec       	ldi	r24, 0xC0	; 192
    64d6:	ba df       	rcall	.-140    	; 0x644c <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    64d8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    64dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    64e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    64e4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    64e8:	81 e0       	ldi	r24, 0x01	; 1
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	08 95       	ret

000064ee <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29
    64f2:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    64f6:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    64fa:	21 97       	sbiw	r28, 0x01	; 1
    64fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    6500:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    6504:	c8 1b       	sub	r28, r24
    6506:	d9 0b       	sbc	r29, r25
    6508:	1c 16       	cp	r1, r28
    650a:	1d 06       	cpc	r1, r29
    650c:	24 f4       	brge	.+8      	; 0x6516 <lcd_cleareol+0x28>
    650e:	80 e2       	ldi	r24, 0x20	; 32
    6510:	2e df       	rcall	.-420    	; 0x636e <LCD_putb>
    6512:	21 97       	sbiw	r28, 0x01	; 1
    6514:	f9 cf       	rjmp	.-14     	; 0x6508 <lcd_cleareol+0x1a>
    6516:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    651a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    651e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6522:	01 97       	sbiw	r24, 0x01	; 1
    6524:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6528:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    652c:	78 df       	rcall	.-272    	; 0x641e <LCD_pos>
    652e:	df 91       	pop	r29
    6530:	cf 91       	pop	r28
    6532:	08 95       	ret

00006534 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6534:	cf 93       	push	r28
    6536:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    6538:	8f 37       	cpi	r24, 0x7F	; 127
    653a:	91 05       	cpc	r25, r1
    653c:	08 f0       	brcs	.+2      	; 0x6540 <lcd_putch+0xc>
    653e:	50 c0       	rjmp	.+160    	; 0x65e0 <lcd_putch+0xac>
    6540:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6542:	80 32       	cpi	r24, 0x20	; 32
    6544:	91 05       	cpc	r25, r1
    6546:	4c f1       	brlt	.+82     	; 0x659a <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    6548:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    654c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6550:	01 97       	sbiw	r24, 0x01	; 1
    6552:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    6556:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    655a:	82 1b       	sub	r24, r18
    655c:	93 0b       	sbc	r25, r19
    655e:	18 16       	cp	r1, r24
    6560:	19 06       	cpc	r1, r25
    6562:	7c f0       	brlt	.+30     	; 0x6582 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6564:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6568:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    656c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    6570:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    6574:	01 96       	adiw	r24, 0x01	; 1
    6576:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    657a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    657e:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6580:	4e df       	rcall	.-356    	; 0x641e <LCD_pos>
    6582:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6584:	f4 de       	rcall	.-536    	; 0x636e <LCD_putb>
    6586:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    658a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    658e:	01 96       	adiw	r24, 0x01	; 1
    6590:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6594:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    6598:	23 c0       	rjmp	.+70     	; 0x65e0 <lcd_putch+0xac>
    659a:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    659c:	91 05       	cpc	r25, r1
    659e:	91 f4       	brne	.+36     	; 0x65c4 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    65a0:	a6 df       	rcall	.-180    	; 0x64ee <lcd_cleareol>
    65a2:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    65a6:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    65aa:	6f 5f       	subi	r22, 0xFF	; 255
    65ac:	7f 4f       	sbci	r23, 0xFF	; 255
    65ae:	63 70       	andi	r22, 0x03	; 3
    65b0:	77 27       	eor	r23, r23
    65b2:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    65b6:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    65ba:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    65be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    65c2:	0c c0       	rjmp	.+24     	; 0x65dc <lcd_putch+0xa8>
	{
		LCD_clear();
    65c4:	0c 97       	sbiw	r24, 0x0c	; 12
    65c6:	61 f4       	brne	.+24     	; 0x65e0 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    65c8:	36 df       	rcall	.-404    	; 0x6436 <LCD_clear>
    65ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    65ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    65d2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    65d6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    65da:	60 e0       	ldi	r22, 0x00	; 0
    65dc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    65de:	1f df       	rcall	.-450    	; 0x641e <LCD_pos>
    65e0:	df 91       	pop	r29
    65e2:	cf 91       	pop	r28
    65e4:	08 95       	ret

000065e6 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    65e6:	fc 01       	movw	r30, r24
	p->sent++;
    65e8:	26 81       	ldd	r18, Z+6	; 0x06
    65ea:	37 81       	ldd	r19, Z+7	; 0x07
    65ec:	2f 5f       	subi	r18, 0xFF	; 255
    65ee:	3f 4f       	sbci	r19, 0xFF	; 255
    65f0:	37 83       	std	Z+7, r19	; 0x07
    65f2:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    65f4:	86 2f       	mov	r24, r22
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	9d cf       	rjmp	.-198    	; 0x6534 <lcd_putch>
    65fa:	08 95       	ret

000065fc <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    65fc:	a8 e0       	ldi	r26, 0x08	; 8
    65fe:	b0 e0       	ldi	r27, 0x00	; 0
    6600:	e4 e0       	ldi	r30, 0x04	; 4
    6602:	f3 e3       	ldi	r31, 0x33	; 51
    6604:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    6608:	9e 01       	movw	r18, r28
    660a:	23 5f       	subi	r18, 0xF3	; 243
    660c:	3f 4f       	sbci	r19, 0xFF	; 255
    660e:	f9 01       	movw	r30, r18
    6610:	41 91       	ld	r20, Z+
    6612:	51 91       	ld	r21, Z+
    6614:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6616:	83 ef       	ldi	r24, 0xF3	; 243
    6618:	92 e3       	ldi	r25, 0x32	; 50
    661a:	9a 83       	std	Y+2, r25	; 0x02
    661c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    661e:	18 86       	std	Y+8, r1	; 0x08
    6620:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6622:	60 e8       	ldi	r22, 0x80	; 128
    6624:	ce 01       	movw	r24, r28
    6626:	01 96       	adiw	r24, 0x01	; 1
    6628:	0e 94 b8 43 	call	0x8770	; 0x8770 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    662c:	8f 81       	ldd	r24, Y+7	; 0x07
    662e:	98 85       	ldd	r25, Y+8	; 0x08
    6630:	28 96       	adiw	r28, 0x08	; 8
    6632:	e2 e0       	ldi	r30, 0x02	; 2
    6634:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00006638 <sep>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    6638:	8e ef       	ldi	r24, 0xFE	; 254
    663a:	94 e0       	ldi	r25, 0x04	; 4
    663c:	1f 92       	push	r1
    663e:	9f 93       	push	r25
    6640:	8f 93       	push	r24
    6642:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    6646:	0f 90       	pop	r0
    6648:	0f 90       	pop	r0
    664a:	0f 90       	pop	r0
    664c:	08 95       	ret

0000664e <islower>:
    664e:	9c 01       	movw	r18, r24
    6650:	21 56       	subi	r18, 0x61	; 97
    6652:	31 09       	sbc	r19, r1
    6654:	81 e0       	ldi	r24, 0x01	; 1
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	2a 31       	cpi	r18, 0x1A	; 26
    665a:	31 05       	cpc	r19, r1
    665c:	10 f0       	brcs	.+4      	; 0x6662 <islower+0x14>
    665e:	80 e0       	ldi	r24, 0x00	; 0
    6660:	90 e0       	ldi	r25, 0x00	; 0
    6662:	08 95       	ret

00006664 <toupper>:
    6664:	cf 93       	push	r28
    6666:	df 93       	push	r29
    6668:	ec 01       	movw	r28, r24
    666a:	f1 df       	rcall	.-30     	; 0x664e <islower>
    666c:	89 2b       	or	r24, r25
    666e:	19 f0       	breq	.+6      	; 0x6676 <toupper+0x12>
    6670:	ce 01       	movw	r24, r28
    6672:	80 97       	sbiw	r24, 0x20	; 32
    6674:	01 c0       	rjmp	.+2      	; 0x6678 <toupper+0x14>
    6676:	ce 01       	movw	r24, r28
    6678:	df 91       	pop	r29
    667a:	cf 91       	pop	r28
    667c:	08 95       	ret

0000667e <strcpy>:
    667e:	fc 01       	movw	r30, r24
    6680:	db 01       	movw	r26, r22
    6682:	2d 91       	ld	r18, X+
    6684:	bd 01       	movw	r22, r26
    6686:	01 96       	adiw	r24, 0x01	; 1
    6688:	22 23       	and	r18, r18
    668a:	11 f0       	breq	.+4      	; 0x6690 <strcpy+0x12>
    668c:	20 83       	st	Z, r18
    668e:	f7 cf       	rjmp	.-18     	; 0x667e <strcpy>
    6690:	10 82       	st	Z, r1
    6692:	08 95       	ret

00006694 <strncpy>:
    6694:	db 01       	movw	r26, r22
    6696:	fc 01       	movw	r30, r24
    6698:	2d 91       	ld	r18, X+
    669a:	21 11       	cpse	r18, r1
    669c:	03 c0       	rjmp	.+6      	; 0x66a4 <strncpy+0x10>
    669e:	4e 0f       	add	r20, r30
    66a0:	5f 1f       	adc	r21, r31
    66a2:	08 c0       	rjmp	.+16     	; 0x66b4 <strncpy+0x20>
    66a4:	41 15       	cp	r20, r1
    66a6:	51 05       	cpc	r21, r1
    66a8:	21 f0       	breq	.+8      	; 0x66b2 <strncpy+0x1e>
    66aa:	21 93       	st	Z+, r18
    66ac:	41 50       	subi	r20, 0x01	; 1
    66ae:	51 09       	sbc	r21, r1
    66b0:	f3 cf       	rjmp	.-26     	; 0x6698 <strncpy+0x4>
    66b2:	08 95       	ret
    66b4:	4e 17       	cp	r20, r30
    66b6:	5f 07       	cpc	r21, r31
    66b8:	11 f0       	breq	.+4      	; 0x66be <strncpy+0x2a>
    66ba:	11 92       	st	Z+, r1
    66bc:	fb cf       	rjmp	.-10     	; 0x66b4 <strncpy+0x20>
    66be:	08 95       	ret

000066c0 <strcat>:
    66c0:	cf 93       	push	r28
    66c2:	df 93       	push	r29
    66c4:	d8 2f       	mov	r29, r24
    66c6:	c9 2f       	mov	r28, r25
    66c8:	28 2f       	mov	r18, r24
    66ca:	39 2f       	mov	r19, r25
    66cc:	c9 01       	movw	r24, r18
    66ce:	2f 5f       	subi	r18, 0xFF	; 255
    66d0:	3f 4f       	sbci	r19, 0xFF	; 255
    66d2:	fc 01       	movw	r30, r24
    66d4:	40 81       	ld	r20, Z
    66d6:	41 11       	cpse	r20, r1
    66d8:	f9 cf       	rjmp	.-14     	; 0x66cc <strcat+0xc>
    66da:	d1 df       	rcall	.-94     	; 0x667e <strcpy>
    66dc:	8d 2f       	mov	r24, r29
    66de:	9c 2f       	mov	r25, r28
    66e0:	df 91       	pop	r29
    66e2:	cf 91       	pop	r28
    66e4:	08 95       	ret

000066e6 <reverse>:
    66e6:	fc 01       	movw	r30, r24
    66e8:	01 90       	ld	r0, Z+
    66ea:	00 20       	and	r0, r0
    66ec:	e9 f7       	brne	.-6      	; 0x66e8 <reverse+0x2>
    66ee:	31 97       	sbiw	r30, 0x01	; 1
    66f0:	e8 1b       	sub	r30, r24
    66f2:	f9 0b       	sbc	r31, r25
    66f4:	af 01       	movw	r20, r30
    66f6:	55 95       	asr	r21
    66f8:	47 95       	ror	r20
    66fa:	e8 0f       	add	r30, r24
    66fc:	f9 1f       	adc	r31, r25
    66fe:	dc 01       	movw	r26, r24
    6700:	9d 01       	movw	r18, r26
    6702:	28 1b       	sub	r18, r24
    6704:	39 0b       	sbc	r19, r25
    6706:	24 17       	cp	r18, r20
    6708:	35 07       	cpc	r19, r21
    670a:	2c f4       	brge	.+10     	; 0x6716 <reverse+0x30>
    670c:	22 91       	ld	r18, -Z
    670e:	3c 91       	ld	r19, X
    6710:	30 83       	st	Z, r19
    6712:	2d 93       	st	X+, r18
    6714:	f5 cf       	rjmp	.-22     	; 0x6700 <reverse+0x1a>
    6716:	08 95       	ret

00006718 <strupper>:
    6718:	cf 93       	push	r28
    671a:	df 93       	push	r29
    671c:	ec 01       	movw	r28, r24
    671e:	88 81       	ld	r24, Y
    6720:	88 23       	and	r24, r24
    6722:	21 f0       	breq	.+8      	; 0x672c <strupper+0x14>
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	9e df       	rcall	.-196    	; 0x6664 <toupper>
    6728:	89 93       	st	Y+, r24
    672a:	f9 cf       	rjmp	.-14     	; 0x671e <strupper+0x6>
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	08 95       	ret

00006732 <trim_tail>:
    6732:	00 97       	sbiw	r24, 0x00	; 0
    6734:	69 f0       	breq	.+26     	; 0x6750 <trim_tail+0x1e>
    6736:	fc 01       	movw	r30, r24
    6738:	01 90       	ld	r0, Z+
    673a:	00 20       	and	r0, r0
    673c:	e9 f7       	brne	.-6      	; 0x6738 <trim_tail+0x6>
    673e:	31 97       	sbiw	r30, 0x01	; 1
    6740:	e8 17       	cp	r30, r24
    6742:	f9 07       	cpc	r31, r25
    6744:	29 f0       	breq	.+10     	; 0x6750 <trim_tail+0x1e>
    6746:	22 91       	ld	r18, -Z
    6748:	21 32       	cpi	r18, 0x21	; 33
    674a:	10 f4       	brcc	.+4      	; 0x6750 <trim_tail+0x1e>
    674c:	10 82       	st	Z, r1
    674e:	f8 cf       	rjmp	.-16     	; 0x6740 <trim_tail+0xe>
    6750:	08 95       	ret

00006752 <skipspaces>:
    6752:	00 97       	sbiw	r24, 0x00	; 0
    6754:	39 f0       	breq	.+14     	; 0x6764 <skipspaces+0x12>
    6756:	fc 01       	movw	r30, r24
    6758:	cf 01       	movw	r24, r30
    675a:	21 91       	ld	r18, Z+
    675c:	20 32       	cpi	r18, 0x20	; 32
    675e:	e1 f3       	breq	.-8      	; 0x6758 <skipspaces+0x6>
    6760:	29 30       	cpi	r18, 0x09	; 9
    6762:	d1 f3       	breq	.-12     	; 0x6758 <skipspaces+0x6>
    6764:	08 95       	ret

00006766 <strcmp>:
    6766:	dc 01       	movw	r26, r24
    6768:	fb 01       	movw	r30, r22
    676a:	2d 91       	ld	r18, X+
    676c:	41 91       	ld	r20, Z+
    676e:	50 e0       	ldi	r21, 0x00	; 0
    6770:	30 e0       	ldi	r19, 0x00	; 0
    6772:	c9 01       	movw	r24, r18
    6774:	84 1b       	sub	r24, r20
    6776:	95 0b       	sbc	r25, r21
    6778:	11 f4       	brne	.+4      	; 0x677e <strcmp+0x18>
    677a:	45 2b       	or	r20, r21
    677c:	b1 f7       	brne	.-20     	; 0x676a <strcmp+0x4>
    677e:	08 95       	ret

00006780 <strcasecmp>:
    6780:	ef 92       	push	r14
    6782:	ff 92       	push	r15
    6784:	0f 93       	push	r16
    6786:	1f 93       	push	r17
    6788:	cf 93       	push	r28
    678a:	df 93       	push	r29
    678c:	7c 01       	movw	r14, r24
    678e:	8b 01       	movw	r16, r22
    6790:	f7 01       	movw	r30, r14
    6792:	81 91       	ld	r24, Z+
    6794:	7f 01       	movw	r14, r30
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	65 df       	rcall	.-310    	; 0x6664 <toupper>
    679a:	ec 01       	movw	r28, r24
    679c:	f8 01       	movw	r30, r16
    679e:	81 91       	ld	r24, Z+
    67a0:	8f 01       	movw	r16, r30
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	5f df       	rcall	.-322    	; 0x6664 <toupper>
    67a6:	9c 01       	movw	r18, r24
    67a8:	ce 01       	movw	r24, r28
    67aa:	82 1b       	sub	r24, r18
    67ac:	93 0b       	sbc	r25, r19
    67ae:	11 f4       	brne	.+4      	; 0x67b4 <strcasecmp+0x34>
    67b0:	23 2b       	or	r18, r19
    67b2:	71 f7       	brne	.-36     	; 0x6790 <strcasecmp+0x10>
    67b4:	cd b7       	in	r28, 0x3d	; 61
    67b6:	de b7       	in	r29, 0x3e	; 62
    67b8:	e6 e0       	ldi	r30, 0x06	; 6
    67ba:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

000067be <strncasecmp>:
    67be:	a0 e0       	ldi	r26, 0x00	; 0
    67c0:	b0 e0       	ldi	r27, 0x00	; 0
    67c2:	e5 ee       	ldi	r30, 0xE5	; 229
    67c4:	f3 e3       	ldi	r31, 0x33	; 51
    67c6:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    67ca:	8c 01       	movw	r16, r24
    67cc:	7b 01       	movw	r14, r22
    67ce:	6c 01       	movw	r12, r24
    67d0:	c4 0e       	add	r12, r20
    67d2:	d5 1e       	adc	r13, r21
    67d4:	0c 15       	cp	r16, r12
    67d6:	1d 05       	cpc	r17, r13
    67d8:	99 f0       	breq	.+38     	; 0x6800 <strncasecmp+0x42>
    67da:	f8 01       	movw	r30, r16
    67dc:	81 91       	ld	r24, Z+
    67de:	8f 01       	movw	r16, r30
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	40 df       	rcall	.-384    	; 0x6664 <toupper>
    67e4:	ec 01       	movw	r28, r24
    67e6:	f7 01       	movw	r30, r14
    67e8:	81 91       	ld	r24, Z+
    67ea:	7f 01       	movw	r14, r30
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	3a df       	rcall	.-396    	; 0x6664 <toupper>
    67f0:	9c 01       	movw	r18, r24
    67f2:	ce 01       	movw	r24, r28
    67f4:	82 1b       	sub	r24, r18
    67f6:	93 0b       	sbc	r25, r19
    67f8:	29 f4       	brne	.+10     	; 0x6804 <strncasecmp+0x46>
    67fa:	23 2b       	or	r18, r19
    67fc:	59 f7       	brne	.-42     	; 0x67d4 <strncasecmp+0x16>
    67fe:	02 c0       	rjmp	.+4      	; 0x6804 <strncasecmp+0x46>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	cd b7       	in	r28, 0x3d	; 61
    6806:	de b7       	in	r29, 0x3e	; 62
    6808:	e8 e0       	ldi	r30, 0x08	; 8
    680a:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000680e <MATCH>:
    680e:	cf 93       	push	r28
    6810:	df 93       	push	r29
    6812:	fb 01       	movw	r30, r22
    6814:	01 90       	ld	r0, Z+
    6816:	00 20       	and	r0, r0
    6818:	e9 f7       	brne	.-6      	; 0x6814 <MATCH+0x6>
    681a:	31 97       	sbiw	r30, 0x01	; 1
    681c:	ef 01       	movw	r28, r30
    681e:	c6 1b       	sub	r28, r22
    6820:	d7 0b       	sbc	r29, r23
    6822:	a1 df       	rcall	.-190    	; 0x6766 <strcmp>
    6824:	89 2b       	or	r24, r25
    6826:	11 f4       	brne	.+4      	; 0x682c <MATCH+0x1e>
    6828:	ce 01       	movw	r24, r28
    682a:	02 c0       	rjmp	.+4      	; 0x6830 <MATCH+0x22>
    682c:	80 e0       	ldi	r24, 0x00	; 0
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	df 91       	pop	r29
    6832:	cf 91       	pop	r28
    6834:	08 95       	ret

00006836 <MATCHARGS>:
    6836:	ef 92       	push	r14
    6838:	ff 92       	push	r15
    683a:	0f 93       	push	r16
    683c:	1f 93       	push	r17
    683e:	cf 93       	push	r28
    6840:	df 93       	push	r29
    6842:	f6 2e       	mov	r15, r22
    6844:	e7 2e       	mov	r14, r23
    6846:	ea 01       	movw	r28, r20
    6848:	89 01       	movw	r16, r18
    684a:	e1 df       	rcall	.-62     	; 0x680e <MATCH>
    684c:	00 97       	sbiw	r24, 0x00	; 0
    684e:	e9 f0       	breq	.+58     	; 0x688a <MATCHARGS+0x54>
    6850:	0c 17       	cp	r16, r28
    6852:	1d 07       	cpc	r17, r29
    6854:	c4 f4       	brge	.+48     	; 0x6886 <MATCHARGS+0x50>
    6856:	1f 93       	push	r17
    6858:	0f 93       	push	r16
    685a:	df 93       	push	r29
    685c:	cf 93       	push	r28
    685e:	ef 92       	push	r14
    6860:	ff 92       	push	r15
    6862:	88 ed       	ldi	r24, 0xD8	; 216
    6864:	94 e0       	ldi	r25, 0x04	; 4
    6866:	1f 92       	push	r1
    6868:	9f 93       	push	r25
    686a:	8f 93       	push	r24
    686c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    6870:	8d b7       	in	r24, 0x3d	; 61
    6872:	9e b7       	in	r25, 0x3e	; 62
    6874:	09 96       	adiw	r24, 0x09	; 9
    6876:	0f b6       	in	r0, 0x3f	; 63
    6878:	f8 94       	cli
    687a:	9e bf       	out	0x3e, r25	; 62
    687c:	0f be       	out	0x3f, r0	; 63
    687e:	8d bf       	out	0x3d, r24	; 61
    6880:	80 e0       	ldi	r24, 0x00	; 0
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	02 c0       	rjmp	.+4      	; 0x688a <MATCHARGS+0x54>
    6886:	81 e0       	ldi	r24, 0x01	; 1
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	cd b7       	in	r28, 0x3d	; 61
    688c:	de b7       	in	r29, 0x3e	; 62
    688e:	e6 e0       	ldi	r30, 0x06	; 6
    6890:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00006894 <MATCHI>:
    6894:	cf 93       	push	r28
    6896:	df 93       	push	r29
    6898:	fb 01       	movw	r30, r22
    689a:	01 90       	ld	r0, Z+
    689c:	00 20       	and	r0, r0
    689e:	e9 f7       	brne	.-6      	; 0x689a <MATCHI+0x6>
    68a0:	31 97       	sbiw	r30, 0x01	; 1
    68a2:	ef 01       	movw	r28, r30
    68a4:	c6 1b       	sub	r28, r22
    68a6:	d7 0b       	sbc	r29, r23
    68a8:	6b df       	rcall	.-298    	; 0x6780 <strcasecmp>
    68aa:	89 2b       	or	r24, r25
    68ac:	11 f4       	brne	.+4      	; 0x68b2 <MATCHI+0x1e>
    68ae:	ce 01       	movw	r24, r28
    68b0:	02 c0       	rjmp	.+4      	; 0x68b6 <MATCHI+0x22>
    68b2:	80 e0       	ldi	r24, 0x00	; 0
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	df 91       	pop	r29
    68b8:	cf 91       	pop	r28
    68ba:	08 95       	ret

000068bc <MATCHI_LEN>:
    68bc:	cf 93       	push	r28
    68be:	df 93       	push	r29
    68c0:	00 97       	sbiw	r24, 0x00	; 0
    68c2:	89 f0       	breq	.+34     	; 0x68e6 <MATCHI_LEN+0x2a>
    68c4:	61 15       	cp	r22, r1
    68c6:	71 05       	cpc	r23, r1
    68c8:	71 f0       	breq	.+28     	; 0x68e6 <MATCHI_LEN+0x2a>
    68ca:	eb 01       	movw	r28, r22
    68cc:	09 90       	ld	r0, Y+
    68ce:	00 20       	and	r0, r0
    68d0:	e9 f7       	brne	.-6      	; 0x68cc <MATCHI_LEN+0x10>
    68d2:	21 97       	sbiw	r28, 0x01	; 1
    68d4:	c6 1b       	sub	r28, r22
    68d6:	d7 0b       	sbc	r29, r23
    68d8:	31 f0       	breq	.+12     	; 0x68e6 <MATCHI_LEN+0x2a>
    68da:	ae 01       	movw	r20, r28
    68dc:	70 df       	rcall	.-288    	; 0x67be <strncasecmp>
    68de:	89 2b       	or	r24, r25
    68e0:	11 f4       	brne	.+4      	; 0x68e6 <MATCHI_LEN+0x2a>
    68e2:	ce 01       	movw	r24, r28
    68e4:	02 c0       	rjmp	.+4      	; 0x68ea <MATCHI_LEN+0x2e>
    68e6:	80 e0       	ldi	r24, 0x00	; 0
    68e8:	90 e0       	ldi	r25, 0x00	; 0
    68ea:	df 91       	pop	r29
    68ec:	cf 91       	pop	r28
    68ee:	08 95       	ret

000068f0 <split_args>:
    68f0:	a0 e0       	ldi	r26, 0x00	; 0
    68f2:	b0 e0       	ldi	r27, 0x00	; 0
    68f4:	ee e7       	ldi	r30, 0x7E	; 126
    68f6:	f4 e3       	ldi	r31, 0x34	; 52
    68f8:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    68fc:	dc 01       	movw	r26, r24
    68fe:	6a 01       	movw	r12, r20
    6900:	8b 01       	movw	r16, r22
    6902:	fb 01       	movw	r30, r22
    6904:	80 e0       	ldi	r24, 0x00	; 0
    6906:	90 e0       	ldi	r25, 0x00	; 0
    6908:	8c 15       	cp	r24, r12
    690a:	9d 05       	cpc	r25, r13
    690c:	24 f4       	brge	.+8      	; 0x6916 <split_args+0x26>
    690e:	11 92       	st	Z+, r1
    6910:	11 92       	st	Z+, r1
    6912:	01 96       	adiw	r24, 0x01	; 1
    6914:	f9 cf       	rjmp	.-14     	; 0x6908 <split_args+0x18>
    6916:	c1 14       	cp	r12, r1
    6918:	d1 04       	cpc	r13, r1
    691a:	d9 f1       	breq	.+118    	; 0x6992 <split_args+0xa2>
    691c:	10 97       	sbiw	r26, 0x00	; 0
    691e:	c9 f1       	breq	.+114    	; 0x6992 <split_args+0xa2>
    6920:	ee 24       	eor	r14, r14
    6922:	e3 94       	inc	r14
    6924:	f1 2c       	mov	r15, r1
    6926:	c0 e0       	ldi	r28, 0x00	; 0
    6928:	d0 e0       	ldi	r29, 0x00	; 0
    692a:	8c 91       	ld	r24, X
    692c:	88 23       	and	r24, r24
    692e:	b1 f1       	breq	.+108    	; 0x699c <split_args+0xac>
    6930:	cc 15       	cp	r28, r12
    6932:	dd 05       	cpc	r29, r13
    6934:	9c f5       	brge	.+102    	; 0x699c <split_args+0xac>
    6936:	cd 01       	movw	r24, r26
    6938:	0c df       	rcall	.-488    	; 0x6752 <skipspaces>
    693a:	dc 01       	movw	r26, r24
    693c:	2c 91       	ld	r18, X
    693e:	22 23       	and	r18, r18
    6940:	69 f1       	breq	.+90     	; 0x699c <split_args+0xac>
    6942:	22 32       	cpi	r18, 0x22	; 34
    6944:	79 f4       	brne	.+30     	; 0x6964 <split_args+0x74>
    6946:	fc 01       	movw	r30, r24
    6948:	31 96       	adiw	r30, 0x01	; 1
    694a:	d8 01       	movw	r26, r16
    694c:	ed 93       	st	X+, r30
    694e:	fc 93       	st	X, r31
    6950:	df 01       	movw	r26, r30
    6952:	80 81       	ld	r24, Z
    6954:	31 96       	adiw	r30, 0x01	; 1
    6956:	88 23       	and	r24, r24
    6958:	a9 f0       	breq	.+42     	; 0x6984 <split_args+0x94>
    695a:	82 32       	cpi	r24, 0x22	; 34
    695c:	c9 f7       	brne	.-14     	; 0x6950 <split_args+0x60>
    695e:	1c 92       	st	X, r1
    6960:	df 01       	movw	r26, r30
    6962:	10 c0       	rjmp	.+32     	; 0x6984 <split_args+0x94>
    6964:	f8 01       	movw	r30, r16
    6966:	91 83       	std	Z+1, r25	; 0x01
    6968:	80 83       	st	Z, r24
    696a:	fc 01       	movw	r30, r24
    696c:	2e 2f       	mov	r18, r30
    696e:	9f 2f       	mov	r25, r31
    6970:	81 91       	ld	r24, Z+
    6972:	3f ed       	ldi	r19, 0xDF	; 223
    6974:	38 0f       	add	r19, r24
    6976:	3e 35       	cpi	r19, 0x5E	; 94
    6978:	c8 f3       	brcs	.-14     	; 0x696c <split_args+0x7c>
    697a:	88 23       	and	r24, r24
    697c:	69 f0       	breq	.+26     	; 0x6998 <split_args+0xa8>
    697e:	a2 2f       	mov	r26, r18
    6980:	b9 2f       	mov	r27, r25
    6982:	1d 92       	st	X+, r1
    6984:	21 96       	adiw	r28, 0x01	; 1
    6986:	ff ef       	ldi	r31, 0xFF	; 255
    6988:	ef 1a       	sub	r14, r31
    698a:	ff 0a       	sbc	r15, r31
    698c:	0e 5f       	subi	r16, 0xFE	; 254
    698e:	1f 4f       	sbci	r17, 0xFF	; 255
    6990:	cc cf       	rjmp	.-104    	; 0x692a <split_args+0x3a>
    6992:	80 e0       	ldi	r24, 0x00	; 0
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	03 c0       	rjmp	.+6      	; 0x699e <split_args+0xae>
    6998:	c7 01       	movw	r24, r14
    699a:	01 c0       	rjmp	.+2      	; 0x699e <split_args+0xae>
    699c:	ce 01       	movw	r24, r28
    699e:	cd b7       	in	r28, 0x3d	; 61
    69a0:	de b7       	in	r29, 0x3e	; 62
    69a2:	e8 e0       	ldi	r30, 0x08	; 8
    69a4:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

000069a8 <get_token>:
    69a8:	ef 92       	push	r14
    69aa:	ff 92       	push	r15
    69ac:	0f 93       	push	r16
    69ae:	1f 93       	push	r17
    69b0:	cf 93       	push	r28
    69b2:	df 93       	push	r29
    69b4:	eb 01       	movw	r28, r22
    69b6:	8a 01       	movw	r16, r20
    69b8:	18 82       	st	Y, r1
    69ba:	00 97       	sbiw	r24, 0x00	; 0
    69bc:	89 f1       	breq	.+98     	; 0x6a20 <get_token+0x78>
    69be:	fc 01       	movw	r30, r24
    69c0:	20 81       	ld	r18, Z
    69c2:	22 23       	and	r18, r18
    69c4:	79 f1       	breq	.+94     	; 0x6a24 <get_token+0x7c>
    69c6:	c5 de       	rcall	.-630    	; 0x6752 <skipspaces>
    69c8:	7c 01       	movw	r14, r24
    69ca:	b3 de       	rcall	.-666    	; 0x6732 <trim_tail>
    69cc:	f7 01       	movw	r30, r14
    69ce:	cf 01       	movw	r24, r30
    69d0:	21 91       	ld	r18, Z+
    69d2:	21 32       	cpi	r18, 0x21	; 33
    69d4:	e0 f0       	brcs	.+56     	; 0x6a0e <get_token+0x66>
    69d6:	10 16       	cp	r1, r16
    69d8:	11 06       	cpc	r1, r17
    69da:	cc f4       	brge	.+50     	; 0x6a0e <get_token+0x66>
    69dc:	22 32       	cpi	r18, 0x22	; 34
    69de:	79 f4       	brne	.+30     	; 0x69fe <get_token+0x56>
    69e0:	fc 01       	movw	r30, r24
    69e2:	31 96       	adiw	r30, 0x01	; 1
    69e4:	0c 0f       	add	r16, r28
    69e6:	1d 1f       	adc	r17, r29
    69e8:	cf 01       	movw	r24, r30
    69ea:	21 91       	ld	r18, Z+
    69ec:	22 23       	and	r18, r18
    69ee:	79 f0       	breq	.+30     	; 0x6a0e <get_token+0x66>
    69f0:	22 32       	cpi	r18, 0x22	; 34
    69f2:	59 f0       	breq	.+22     	; 0x6a0a <get_token+0x62>
    69f4:	c0 17       	cp	r28, r16
    69f6:	d1 07       	cpc	r29, r17
    69f8:	51 f0       	breq	.+20     	; 0x6a0e <get_token+0x66>
    69fa:	29 93       	st	Y+, r18
    69fc:	f5 cf       	rjmp	.-22     	; 0x69e8 <get_token+0x40>
    69fe:	2c 32       	cpi	r18, 0x2C	; 44
    6a00:	31 f0       	breq	.+12     	; 0x6a0e <get_token+0x66>
    6a02:	29 93       	st	Y+, r18
    6a04:	01 50       	subi	r16, 0x01	; 1
    6a06:	11 09       	sbc	r17, r1
    6a08:	e2 cf       	rjmp	.-60     	; 0x69ce <get_token+0x26>
    6a0a:	cf 01       	movw	r24, r30
    6a0c:	18 82       	st	Y, r1
    6a0e:	a1 de       	rcall	.-702    	; 0x6752 <skipspaces>
    6a10:	fc 01       	movw	r30, r24
    6a12:	80 81       	ld	r24, Z
    6a14:	8c 32       	cpi	r24, 0x2C	; 44
    6a16:	09 f4       	brne	.+2      	; 0x6a1a <get_token+0x72>
    6a18:	31 96       	adiw	r30, 0x01	; 1
    6a1a:	18 82       	st	Y, r1
    6a1c:	cf 01       	movw	r24, r30
    6a1e:	02 c0       	rjmp	.+4      	; 0x6a24 <get_token+0x7c>
    6a20:	80 e0       	ldi	r24, 0x00	; 0
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	cd b7       	in	r28, 0x3d	; 61
    6a26:	de b7       	in	r29, 0x3e	; 62
    6a28:	e6 e0       	ldi	r30, 0x06	; 6
    6a2a:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00006a2e <get_value>:
    6a2e:	a2 e0       	ldi	r26, 0x02	; 2
    6a30:	b0 e0       	ldi	r27, 0x00	; 0
    6a32:	ed e1       	ldi	r30, 0x1D	; 29
    6a34:	f5 e3       	ldi	r31, 0x35	; 53
    6a36:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    6a3a:	00 97       	sbiw	r24, 0x00	; 0
    6a3c:	79 f1       	breq	.+94     	; 0x6a9c <get_value+0x6e>
    6a3e:	fc 01       	movw	r30, r24
    6a40:	20 81       	ld	r18, Z
    6a42:	22 23       	and	r18, r18
    6a44:	59 f1       	breq	.+86     	; 0x6a9c <get_value+0x6e>
    6a46:	85 de       	rcall	.-758    	; 0x6752 <skipspaces>
    6a48:	8c 01       	movw	r16, r24
    6a4a:	60 e3       	ldi	r22, 0x30	; 48
    6a4c:	77 e0       	ldi	r23, 0x07	; 7
    6a4e:	36 df       	rcall	.-404    	; 0x68bc <MATCHI_LEN>
    6a50:	00 97       	sbiw	r24, 0x00	; 0
    6a52:	29 f0       	breq	.+10     	; 0x6a5e <get_value+0x30>
    6a54:	08 0f       	add	r16, r24
    6a56:	19 1f       	adc	r17, r25
    6a58:	40 e1       	ldi	r20, 0x10	; 16
    6a5a:	50 e0       	ldi	r21, 0x00	; 0
    6a5c:	18 c0       	rjmp	.+48     	; 0x6a8e <get_value+0x60>
    6a5e:	63 e3       	ldi	r22, 0x33	; 51
    6a60:	77 e0       	ldi	r23, 0x07	; 7
    6a62:	c8 01       	movw	r24, r16
    6a64:	2b df       	rcall	.-426    	; 0x68bc <MATCHI_LEN>
    6a66:	00 97       	sbiw	r24, 0x00	; 0
    6a68:	29 f0       	breq	.+10     	; 0x6a74 <get_value+0x46>
    6a6a:	08 0f       	add	r16, r24
    6a6c:	19 1f       	adc	r17, r25
    6a6e:	48 e0       	ldi	r20, 0x08	; 8
    6a70:	50 e0       	ldi	r21, 0x00	; 0
    6a72:	0d c0       	rjmp	.+26     	; 0x6a8e <get_value+0x60>
    6a74:	66 e3       	ldi	r22, 0x36	; 54
    6a76:	77 e0       	ldi	r23, 0x07	; 7
    6a78:	c8 01       	movw	r24, r16
    6a7a:	20 df       	rcall	.-448    	; 0x68bc <MATCHI_LEN>
    6a7c:	00 97       	sbiw	r24, 0x00	; 0
    6a7e:	29 f0       	breq	.+10     	; 0x6a8a <get_value+0x5c>
    6a80:	08 0f       	add	r16, r24
    6a82:	19 1f       	adc	r17, r25
    6a84:	42 e0       	ldi	r20, 0x02	; 2
    6a86:	50 e0       	ldi	r21, 0x00	; 0
    6a88:	02 c0       	rjmp	.+4      	; 0x6a8e <get_value+0x60>
    6a8a:	4a e0       	ldi	r20, 0x0A	; 10
    6a8c:	50 e0       	ldi	r21, 0x00	; 0
    6a8e:	be 01       	movw	r22, r28
    6a90:	6f 5f       	subi	r22, 0xFF	; 255
    6a92:	7f 4f       	sbci	r23, 0xFF	; 255
    6a94:	c8 01       	movw	r24, r16
    6a96:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    6a9a:	03 c0       	rjmp	.+6      	; 0x6aa2 <get_value+0x74>
    6a9c:	60 e0       	ldi	r22, 0x00	; 0
    6a9e:	70 e0       	ldi	r23, 0x00	; 0
    6aa0:	cb 01       	movw	r24, r22
    6aa2:	22 96       	adiw	r28, 0x02	; 2
    6aa4:	e4 e0       	ldi	r30, 0x04	; 4
    6aa6:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

00006aaa <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6aaa:	0f 93       	push	r16
    6aac:	1f 93       	push	r17
    6aae:	cf 93       	push	r28
    6ab0:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6ab2:	00 97       	sbiw	r24, 0x00	; 0
    6ab4:	99 f0       	breq	.+38     	; 0x6adc <stralloc+0x32>
    6ab6:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6ab8:	fc 01       	movw	r30, r24
    6aba:	01 90       	ld	r0, Z+
    6abc:	00 20       	and	r0, r0
    6abe:	e9 f7       	brne	.-6      	; 0x6aba <stralloc+0x10>
    6ac0:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6ac2:	61 e0       	ldi	r22, 0x01	; 1
    6ac4:	70 e0       	ldi	r23, 0x00	; 0
    6ac6:	8c 1b       	sub	r24, r28
    6ac8:	9d 0b       	sbc	r25, r29
    6aca:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
    6ace:	8c 01       	movw	r16, r24
    if(!ptr)
    6ad0:	00 97       	sbiw	r24, 0x00	; 0
    6ad2:	21 f0       	breq	.+8      	; 0x6adc <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6ad4:	be 01       	movw	r22, r28
    6ad6:	d3 dd       	rcall	.-1114   	; 0x667e <strcpy>
    return(ptr);
    6ad8:	c8 01       	movw	r24, r16
    6ada:	02 c0       	rjmp	.+4      	; 0x6ae0 <stralloc+0x36>
    6adc:	80 e0       	ldi	r24, 0x00	; 0
    6ade:	90 e0       	ldi	r25, 0x00	; 0
}
    6ae0:	df 91       	pop	r29
    6ae2:	cf 91       	pop	r28
    6ae4:	1f 91       	pop	r17
    6ae6:	0f 91       	pop	r16
    6ae8:	08 95       	ret

00006aea <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6aea:	78 94       	sei
    6aec:	08 95       	ret

00006aee <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6aee:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6af0:	89 e0       	ldi	r24, 0x09	; 9
    6af2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6af6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6afa:	8f e1       	ldi	r24, 0x1F	; 31
    6afc:	9e e4       	ldi	r25, 0x4E	; 78
    6afe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6b02:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6b06:	ef e6       	ldi	r30, 0x6F	; 111
    6b08:	f0 e0       	ldi	r31, 0x00	; 0
    6b0a:	80 81       	ld	r24, Z
    6b0c:	82 60       	ori	r24, 0x02	; 2
    6b0e:	80 83       	st	Z, r24
    sei();
    6b10:	78 94       	sei
    6b12:	08 95       	ret

00006b14 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6b14:	1f 92       	push	r1
    6b16:	0f 92       	push	r0
    6b18:	0f b6       	in	r0, 0x3f	; 63
    6b1a:	0f 92       	push	r0
    6b1c:	11 24       	eor	r1, r1
    6b1e:	0b b6       	in	r0, 0x3b	; 59
    6b20:	0f 92       	push	r0
    6b22:	2f 93       	push	r18
    6b24:	3f 93       	push	r19
    6b26:	4f 93       	push	r20
    6b28:	5f 93       	push	r21
    6b2a:	6f 93       	push	r22
    6b2c:	7f 93       	push	r23
    6b2e:	8f 93       	push	r24
    6b30:	9f 93       	push	r25
    6b32:	af 93       	push	r26
    6b34:	bf 93       	push	r27
    6b36:	ef 93       	push	r30
    execute_timers();
    6b38:	ff 93       	push	r31
}
    6b3a:	26 d2       	rcall	.+1100   	; 0x6f88 <execute_timers>
    6b3c:	ff 91       	pop	r31
    6b3e:	ef 91       	pop	r30
    6b40:	bf 91       	pop	r27
    6b42:	af 91       	pop	r26
    6b44:	9f 91       	pop	r25
    6b46:	8f 91       	pop	r24
    6b48:	7f 91       	pop	r23
    6b4a:	6f 91       	pop	r22
    6b4c:	5f 91       	pop	r21
    6b4e:	4f 91       	pop	r20
    6b50:	3f 91       	pop	r19
    6b52:	2f 91       	pop	r18
    6b54:	0f 90       	pop	r0
    6b56:	0b be       	out	0x3b, r0	; 59
    6b58:	0f 90       	pop	r0
    6b5a:	0f be       	out	0x3f, r0	; 63
    6b5c:	0f 90       	pop	r0
    6b5e:	1f 90       	pop	r1
    6b60:	18 95       	reti

00006b62 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6b62:	0f 93       	push	r16
    6b64:	1f 93       	push	r17
    6b66:	cf 93       	push	r28
    6b68:	df 93       	push	r29
    6b6a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    6b6c:	f8 94       	cli

    count1 = TCNT1;
    6b6e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6b72:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6b76:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    6b7a:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6b7e:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6b82:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6b86:	80 83       	st	Z, r24
    6b88:	91 83       	std	Z+1, r25	; 0x01
    6b8a:	a2 83       	std	Z+2, r26	; 0x02
    6b8c:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6b8e:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6b92:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6b96:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6b9a:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6b9e:	84 83       	std	Z+4, r24	; 0x04
    6ba0:	95 83       	std	Z+5, r25	; 0x05
    6ba2:	a6 83       	std	Z+6, r26	; 0x06
    6ba4:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6ba6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6baa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6bae:	b1 9b       	sbis	0x16, 1	; 22
    6bb0:	03 c0       	rjmp	.+6      	; 0x6bb8 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6bb2:	c0 e0       	ldi	r28, 0x00	; 0
    6bb4:	d0 e0       	ldi	r29, 0x00	; 0
    6bb6:	3f c0       	rjmp	.+126    	; 0x6c36 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6bb8:	82 17       	cp	r24, r18
    6bba:	93 07       	cpc	r25, r19
    6bbc:	d0 f1       	brcs	.+116    	; 0x6c32 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6bbe:	c0 e0       	ldi	r28, 0x00	; 0
    6bc0:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6bc2:	40 e0       	ldi	r20, 0x00	; 0
    6bc4:	50 e0       	ldi	r21, 0x00	; 0
    6bc6:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6bc8:	9a 01       	movw	r18, r20
    6bca:	ab 01       	movw	r20, r22
    6bcc:	28 0f       	add	r18, r24
    6bce:	39 1f       	adc	r19, r25
    6bd0:	41 1d       	adc	r20, r1
    6bd2:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6bd4:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6bd6:	a2 e3       	ldi	r26, 0x32	; 50
    6bd8:	b0 e0       	ldi	r27, 0x00	; 0
    6bda:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    6bde:	04 81       	ldd	r16, Z+4	; 0x04
    6be0:	15 81       	ldd	r17, Z+5	; 0x05
    6be2:	26 81       	ldd	r18, Z+6	; 0x06
    6be4:	37 81       	ldd	r19, Z+7	; 0x07
    6be6:	dc 01       	movw	r26, r24
    6be8:	cb 01       	movw	r24, r22
    6bea:	80 0f       	add	r24, r16
    6bec:	91 1f       	adc	r25, r17
    6bee:	a2 1f       	adc	r26, r18
    6bf0:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6bf2:	81 15       	cp	r24, r1
    6bf4:	2a ec       	ldi	r18, 0xCA	; 202
    6bf6:	92 07       	cpc	r25, r18
    6bf8:	2a e9       	ldi	r18, 0x9A	; 154
    6bfa:	a2 07       	cpc	r26, r18
    6bfc:	2b e3       	ldi	r18, 0x3B	; 59
    6bfe:	b2 07       	cpc	r27, r18
    6c00:	2c f4       	brge	.+10     	; 0x6c0c <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6c02:	84 83       	std	Z+4, r24	; 0x04
    6c04:	95 83       	std	Z+5, r25	; 0x05
    6c06:	a6 83       	std	Z+6, r26	; 0x06
    6c08:	b7 83       	std	Z+7, r27	; 0x07
    6c0a:	1a c0       	rjmp	.+52     	; 0x6c40 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6c0c:	9a 5c       	subi	r25, 0xCA	; 202
    6c0e:	aa 49       	sbci	r26, 0x9A	; 154
    6c10:	bb 43       	sbci	r27, 0x3B	; 59
    6c12:	84 83       	std	Z+4, r24	; 0x04
    6c14:	95 83       	std	Z+5, r25	; 0x05
    6c16:	a6 83       	std	Z+6, r26	; 0x06
    6c18:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6c1a:	80 81       	ld	r24, Z
    6c1c:	91 81       	ldd	r25, Z+1	; 0x01
    6c1e:	a2 81       	ldd	r26, Z+2	; 0x02
    6c20:	b3 81       	ldd	r27, Z+3	; 0x03
    6c22:	01 96       	adiw	r24, 0x01	; 1
    6c24:	a1 1d       	adc	r26, r1
    6c26:	b1 1d       	adc	r27, r1
    6c28:	80 83       	st	Z, r24
    6c2a:	91 83       	std	Z+1, r25	; 0x01
    6c2c:	a2 83       	std	Z+2, r26	; 0x02
    6c2e:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6c30:	07 c0       	rjmp	.+14     	; 0x6c40 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6c32:	cf ef       	ldi	r28, 0xFF	; 255
    6c34:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6c36:	40 e2       	ldi	r20, 0x20	; 32
    6c38:	5e e4       	ldi	r21, 0x4E	; 78
    6c3a:	60 e0       	ldi	r22, 0x00	; 0
    6c3c:	70 e0       	ldi	r23, 0x00	; 0
    6c3e:	c4 cf       	rjmp	.-120    	; 0x6bc8 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6c40:	ce 01       	movw	r24, r28
    6c42:	df 91       	pop	r29
    6c44:	cf 91       	pop	r28
    6c46:	1f 91       	pop	r17
    6c48:	0f 91       	pop	r16
    6c4a:	08 95       	ret

00006c4c <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6c4c:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6c50:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6c54:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6c58:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6c5c:	80 5c       	subi	r24, 0xC0	; 192
    6c5e:	9d 4b       	sbci	r25, 0xBD	; 189
    6c60:	a0 4f       	sbci	r26, 0xF0	; 240
    6c62:	bf 4f       	sbci	r27, 0xFF	; 255
    6c64:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    6c68:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    6c6c:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    6c70:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    6c74:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6c78:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6c7c:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6c80:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6c84:	81 15       	cp	r24, r1
    6c86:	9a 4c       	sbci	r25, 0xCA	; 202
    6c88:	aa 49       	sbci	r26, 0x9A	; 154
    6c8a:	bb 43       	sbci	r27, 0x3B	; 59
    6c8c:	dc f0       	brlt	.+54     	; 0x6cc4 <clock_task+0x78>
    6c8e:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    6c92:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6c96:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6c9a:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6c9e:	01 96       	adiw	r24, 0x01	; 1
    6ca0:	a1 1d       	adc	r26, r1
    6ca2:	b1 1d       	adc	r27, r1
    6ca4:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    6ca8:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    6cac:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    6cb0:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    6cb4:	10 92 5c 1a 	sts	0x1A5C, r1	; 0x801a5c <__clock+0x4>
    6cb8:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <__clock+0x5>
    6cbc:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <__clock+0x6>
    6cc0:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <__clock+0x7>
    6cc4:	08 95       	ret

00006cc6 <clock_settime.part.2>:
    6cc6:	fc 01       	movw	r30, r24
    6cc8:	84 81       	ldd	r24, Z+4	; 0x04
    6cca:	95 81       	ldd	r25, Z+5	; 0x05
    6ccc:	a6 81       	ldd	r26, Z+6	; 0x06
    6cce:	b7 81       	ldd	r27, Z+7	; 0x07
    6cd0:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock+0x4>
    6cd4:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x5>
    6cd8:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x6>
    6cdc:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x7>
    6ce0:	80 81       	ld	r24, Z
    6ce2:	91 81       	ldd	r25, Z+1	; 0x01
    6ce4:	a2 81       	ldd	r26, Z+2	; 0x02
    6ce6:	b3 81       	ldd	r27, Z+3	; 0x03
    6ce8:	80 93 58 1a 	sts	0x1A58, r24	; 0x801a58 <__clock>
    6cec:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <__clock+0x1>
    6cf0:	a0 93 5a 1a 	sts	0x1A5A, r26	; 0x801a5a <__clock+0x2>
    6cf4:	b0 93 5b 1a 	sts	0x1A5B, r27	; 0x801a5b <__clock+0x3>
    6cf8:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock+0x4>
    6cfc:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x5>
    6d00:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x6>
    6d04:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x7>
    6d08:	44 81       	ldd	r20, Z+4	; 0x04
    6d0a:	55 81       	ldd	r21, Z+5	; 0x05
    6d0c:	66 81       	ldd	r22, Z+6	; 0x06
    6d0e:	77 81       	ldd	r23, Z+7	; 0x07
    6d10:	48 17       	cp	r20, r24
    6d12:	59 07       	cpc	r21, r25
    6d14:	6a 07       	cpc	r22, r26
    6d16:	7b 07       	cpc	r23, r27
    6d18:	b9 f6       	brne	.-82     	; 0x6cc8 <clock_settime.part.2+0x2>
    6d1a:	80 91 58 1a 	lds	r24, 0x1A58	; 0x801a58 <__clock>
    6d1e:	90 91 59 1a 	lds	r25, 0x1A59	; 0x801a59 <__clock+0x1>
    6d22:	a0 91 5a 1a 	lds	r26, 0x1A5A	; 0x801a5a <__clock+0x2>
    6d26:	b0 91 5b 1a 	lds	r27, 0x1A5B	; 0x801a5b <__clock+0x3>
    6d2a:	40 81       	ld	r20, Z
    6d2c:	51 81       	ldd	r21, Z+1	; 0x01
    6d2e:	62 81       	ldd	r22, Z+2	; 0x02
    6d30:	73 81       	ldd	r23, Z+3	; 0x03
    6d32:	48 17       	cp	r20, r24
    6d34:	59 07       	cpc	r21, r25
    6d36:	6a 07       	cpc	r22, r26
    6d38:	7b 07       	cpc	r23, r27
    6d3a:	31 f6       	brne	.-116    	; 0x6cc8 <clock_settime.part.2+0x2>
    6d3c:	80 e0       	ldi	r24, 0x00	; 0
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	08 95       	ret

00006d42 <set_timers>:
    6d42:	00 97       	sbiw	r24, 0x00	; 0
    6d44:	79 f1       	breq	.+94     	; 0x6da4 <set_timers+0x62>
    6d46:	e0 e6       	ldi	r30, 0x60	; 96
    6d48:	fa e1       	ldi	r31, 0x1A	; 26
    6d4a:	4f ef       	ldi	r20, 0xFF	; 255
    6d4c:	5f ef       	ldi	r21, 0xFF	; 255
    6d4e:	20 e0       	ldi	r18, 0x00	; 0
    6d50:	30 e0       	ldi	r19, 0x00	; 0
    6d52:	60 81       	ld	r22, Z
    6d54:	71 81       	ldd	r23, Z+1	; 0x01
    6d56:	86 17       	cp	r24, r22
    6d58:	97 07       	cpc	r25, r23
    6d5a:	79 f0       	breq	.+30     	; 0x6d7a <set_timers+0x38>
    6d5c:	67 2b       	or	r22, r23
    6d5e:	71 f4       	brne	.+28     	; 0x6d7c <set_timers+0x3a>
    6d60:	f9 01       	movw	r30, r18
    6d62:	ee 0f       	add	r30, r30
    6d64:	ff 1f       	adc	r31, r31
    6d66:	e2 0f       	add	r30, r18
    6d68:	f3 1f       	adc	r31, r19
    6d6a:	e0 5a       	subi	r30, 0xA0	; 160
    6d6c:	f5 4e       	sbci	r31, 0xE5	; 229
    6d6e:	91 83       	std	Z+1, r25	; 0x01
    6d70:	80 83       	st	Z, r24
    6d72:	81 e0       	ldi	r24, 0x01	; 1
    6d74:	82 83       	std	Z+2, r24	; 0x02
    6d76:	c9 01       	movw	r24, r18
    6d78:	08 95       	ret
    6d7a:	a9 01       	movw	r20, r18
    6d7c:	2f 5f       	subi	r18, 0xFF	; 255
    6d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d80:	33 96       	adiw	r30, 0x03	; 3
    6d82:	28 30       	cpi	r18, 0x08	; 8
    6d84:	31 05       	cpc	r19, r1
    6d86:	29 f7       	brne	.-54     	; 0x6d52 <set_timers+0x10>
    6d88:	4f 3f       	cpi	r20, 0xFF	; 255
    6d8a:	8f ef       	ldi	r24, 0xFF	; 255
    6d8c:	58 07       	cpc	r21, r24
    6d8e:	69 f4       	brne	.+26     	; 0x6daa <set_timers+0x68>
    6d90:	8c eb       	ldi	r24, 0xBC	; 188
    6d92:	95 e0       	ldi	r25, 0x05	; 5
    6d94:	1f 92       	push	r1
    6d96:	9f 93       	push	r25
    6d98:	8f 93       	push	r24
    6d9a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    6d9e:	0f 90       	pop	r0
    6da0:	0f 90       	pop	r0
    6da2:	0f 90       	pop	r0
    6da4:	8f ef       	ldi	r24, 0xFF	; 255
    6da6:	9f ef       	ldi	r25, 0xFF	; 255
    6da8:	08 95       	ret
    6daa:	ca 01       	movw	r24, r20
    6dac:	08 95       	ret

00006dae <delete_all_timers>:
    6dae:	e0 e6       	ldi	r30, 0x60	; 96
    6db0:	fa e1       	ldi	r31, 0x1A	; 26
    6db2:	12 82       	std	Z+2, r1	; 0x02
    6db4:	11 82       	std	Z+1, r1	; 0x01
    6db6:	10 82       	st	Z, r1
    6db8:	33 96       	adiw	r30, 0x03	; 3
    6dba:	8a e1       	ldi	r24, 0x1A	; 26
    6dbc:	e8 37       	cpi	r30, 0x78	; 120
    6dbe:	f8 07       	cpc	r31, r24
    6dc0:	c1 f7       	brne	.-16     	; 0x6db2 <delete_all_timers+0x4>
    6dc2:	08 95       	ret

00006dc4 <subtract_timespec>:
    6dc4:	0f 93       	push	r16
    6dc6:	1f 93       	push	r17
    6dc8:	cf 93       	push	r28
    6dca:	df 93       	push	r29
    6dcc:	fc 01       	movw	r30, r24
    6dce:	84 81       	ldd	r24, Z+4	; 0x04
    6dd0:	95 81       	ldd	r25, Z+5	; 0x05
    6dd2:	a6 81       	ldd	r26, Z+6	; 0x06
    6dd4:	b7 81       	ldd	r27, Z+7	; 0x07
    6dd6:	eb 01       	movw	r28, r22
    6dd8:	0c 81       	ldd	r16, Y+4	; 0x04
    6dda:	1d 81       	ldd	r17, Y+5	; 0x05
    6ddc:	2e 81       	ldd	r18, Y+6	; 0x06
    6dde:	3f 81       	ldd	r19, Y+7	; 0x07
    6de0:	80 1b       	sub	r24, r16
    6de2:	91 0b       	sbc	r25, r17
    6de4:	a2 0b       	sbc	r26, r18
    6de6:	b3 0b       	sbc	r27, r19
    6de8:	b7 fd       	sbrc	r27, 7
    6dea:	05 c0       	rjmp	.+10     	; 0x6df6 <subtract_timespec+0x32>
    6dec:	84 83       	std	Z+4, r24	; 0x04
    6dee:	95 83       	std	Z+5, r25	; 0x05
    6df0:	a6 83       	std	Z+6, r26	; 0x06
    6df2:	b7 83       	std	Z+7, r27	; 0x07
    6df4:	12 c0       	rjmp	.+36     	; 0x6e1a <subtract_timespec+0x56>
    6df6:	96 53       	subi	r25, 0x36	; 54
    6df8:	a5 46       	sbci	r26, 0x65	; 101
    6dfa:	b4 4c       	sbci	r27, 0xC4	; 196
    6dfc:	84 83       	std	Z+4, r24	; 0x04
    6dfe:	95 83       	std	Z+5, r25	; 0x05
    6e00:	a6 83       	std	Z+6, r26	; 0x06
    6e02:	b7 83       	std	Z+7, r27	; 0x07
    6e04:	80 81       	ld	r24, Z
    6e06:	91 81       	ldd	r25, Z+1	; 0x01
    6e08:	a2 81       	ldd	r26, Z+2	; 0x02
    6e0a:	b3 81       	ldd	r27, Z+3	; 0x03
    6e0c:	01 97       	sbiw	r24, 0x01	; 1
    6e0e:	a1 09       	sbc	r26, r1
    6e10:	b1 09       	sbc	r27, r1
    6e12:	80 83       	st	Z, r24
    6e14:	91 83       	std	Z+1, r25	; 0x01
    6e16:	a2 83       	std	Z+2, r26	; 0x02
    6e18:	b3 83       	std	Z+3, r27	; 0x03
    6e1a:	80 81       	ld	r24, Z
    6e1c:	91 81       	ldd	r25, Z+1	; 0x01
    6e1e:	a2 81       	ldd	r26, Z+2	; 0x02
    6e20:	b3 81       	ldd	r27, Z+3	; 0x03
    6e22:	eb 01       	movw	r28, r22
    6e24:	48 81       	ld	r20, Y
    6e26:	59 81       	ldd	r21, Y+1	; 0x01
    6e28:	6a 81       	ldd	r22, Y+2	; 0x02
    6e2a:	7b 81       	ldd	r23, Y+3	; 0x03
    6e2c:	84 1b       	sub	r24, r20
    6e2e:	95 0b       	sbc	r25, r21
    6e30:	a6 0b       	sbc	r26, r22
    6e32:	b7 0b       	sbc	r27, r23
    6e34:	80 83       	st	Z, r24
    6e36:	91 83       	std	Z+1, r25	; 0x01
    6e38:	a2 83       	std	Z+2, r26	; 0x02
    6e3a:	b3 83       	std	Z+3, r27	; 0x03
    6e3c:	df 91       	pop	r29
    6e3e:	cf 91       	pop	r28
    6e40:	1f 91       	pop	r17
    6e42:	0f 91       	pop	r16
    6e44:	08 95       	ret

00006e46 <ts_to_str>:
    6e46:	fc 01       	movw	r30, r24
    6e48:	87 81       	ldd	r24, Z+7	; 0x07
    6e4a:	8f 93       	push	r24
    6e4c:	86 81       	ldd	r24, Z+6	; 0x06
    6e4e:	8f 93       	push	r24
    6e50:	85 81       	ldd	r24, Z+5	; 0x05
    6e52:	8f 93       	push	r24
    6e54:	84 81       	ldd	r24, Z+4	; 0x04
    6e56:	8f 93       	push	r24
    6e58:	83 81       	ldd	r24, Z+3	; 0x03
    6e5a:	8f 93       	push	r24
    6e5c:	82 81       	ldd	r24, Z+2	; 0x02
    6e5e:	8f 93       	push	r24
    6e60:	81 81       	ldd	r24, Z+1	; 0x01
    6e62:	8f 93       	push	r24
    6e64:	80 81       	ld	r24, Z
    6e66:	8f 93       	push	r24
    6e68:	82 eb       	ldi	r24, 0xB2	; 178
    6e6a:	95 e0       	ldi	r25, 0x05	; 5
    6e6c:	1f 92       	push	r1
    6e6e:	9f 93       	push	r25
    6e70:	8f 93       	push	r24
    6e72:	1f 92       	push	r1
    6e74:	8f e1       	ldi	r24, 0x1F	; 31
    6e76:	8f 93       	push	r24
    6e78:	88 e7       	ldi	r24, 0x78	; 120
    6e7a:	97 e1       	ldi	r25, 0x17	; 23
    6e7c:	9f 93       	push	r25
    6e7e:	8f 93       	push	r24
    6e80:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <snprintf_P>
    6e84:	8d b7       	in	r24, 0x3d	; 61
    6e86:	9e b7       	in	r25, 0x3e	; 62
    6e88:	0f 96       	adiw	r24, 0x0f	; 15
    6e8a:	0f b6       	in	r0, 0x3f	; 63
    6e8c:	f8 94       	cli
    6e8e:	9e bf       	out	0x3e, r25	; 62
    6e90:	0f be       	out	0x3f, r0	; 63
    6e92:	8d bf       	out	0x3d, r24	; 61
    6e94:	88 e7       	ldi	r24, 0x78	; 120
    6e96:	97 e1       	ldi	r25, 0x17	; 23
    6e98:	08 95       	ret

00006e9a <clock_elapsed_begin>:
    6e9a:	60 e7       	ldi	r22, 0x70	; 112
    6e9c:	77 e1       	ldi	r23, 0x17	; 23
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	5f ce       	rjmp	.-834    	; 0x6b62 <clock_gettime>
    6ea4:	08 95       	ret

00006ea6 <clock_elapsed_end>:
    6ea6:	a8 e0       	ldi	r26, 0x08	; 8
    6ea8:	b0 e0       	ldi	r27, 0x00	; 0
    6eaa:	e9 e5       	ldi	r30, 0x59	; 89
    6eac:	f7 e3       	ldi	r31, 0x37	; 55
    6eae:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    6eb2:	8c 01       	movw	r16, r24
    6eb4:	be 01       	movw	r22, r28
    6eb6:	6f 5f       	subi	r22, 0xFF	; 255
    6eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    6eba:	80 e0       	ldi	r24, 0x00	; 0
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	51 de       	rcall	.-862    	; 0x6b62 <clock_gettime>
    6ec0:	60 e7       	ldi	r22, 0x70	; 112
    6ec2:	77 e1       	ldi	r23, 0x17	; 23
    6ec4:	ce 01       	movw	r24, r28
    6ec6:	01 96       	adiw	r24, 0x01	; 1
    6ec8:	7d df       	rcall	.-262    	; 0x6dc4 <subtract_timespec>
    6eca:	01 15       	cp	r16, r1
    6ecc:	11 05       	cpc	r17, r1
    6ece:	c1 f0       	breq	.+48     	; 0x6f00 <clock_elapsed_end+0x5a>
    6ed0:	f8 01       	movw	r30, r16
    6ed2:	80 81       	ld	r24, Z
    6ed4:	88 23       	and	r24, r24
    6ed6:	a1 f0       	breq	.+40     	; 0x6f00 <clock_elapsed_end+0x5a>
    6ed8:	ce 01       	movw	r24, r28
    6eda:	01 96       	adiw	r24, 0x01	; 1
    6edc:	b4 df       	rcall	.-152    	; 0x6e46 <ts_to_str>
    6ede:	9f 93       	push	r25
    6ee0:	8f 93       	push	r24
    6ee2:	1f 93       	push	r17
    6ee4:	0f 93       	push	r16
    6ee6:	85 e9       	ldi	r24, 0x95	; 149
    6ee8:	95 e0       	ldi	r25, 0x05	; 5
    6eea:	1f 92       	push	r1
    6eec:	9f 93       	push	r25
    6eee:	8f 93       	push	r24
    6ef0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    6ef4:	0f b6       	in	r0, 0x3f	; 63
    6ef6:	f8 94       	cli
    6ef8:	de bf       	out	0x3e, r29	; 62
    6efa:	0f be       	out	0x3f, r0	; 63
    6efc:	cd bf       	out	0x3d, r28	; 61
    6efe:	11 c0       	rjmp	.+34     	; 0x6f22 <clock_elapsed_end+0x7c>
    6f00:	ce 01       	movw	r24, r28
    6f02:	01 96       	adiw	r24, 0x01	; 1
    6f04:	a0 df       	rcall	.-192    	; 0x6e46 <ts_to_str>
    6f06:	9f 93       	push	r25
    6f08:	8f 93       	push	r24
    6f0a:	8a e8       	ldi	r24, 0x8A	; 138
    6f0c:	95 e0       	ldi	r25, 0x05	; 5
    6f0e:	1f 92       	push	r1
    6f10:	9f 93       	push	r25
    6f12:	8f 93       	push	r24
    6f14:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    6f18:	0f 90       	pop	r0
    6f1a:	0f 90       	pop	r0
    6f1c:	0f 90       	pop	r0
    6f1e:	0f 90       	pop	r0
    6f20:	0f 90       	pop	r0
    6f22:	28 96       	adiw	r28, 0x08	; 8
    6f24:	e4 e0       	ldi	r30, 0x04	; 4
    6f26:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

00006f2a <clock_clear>:
    6f2a:	a8 e0       	ldi	r26, 0x08	; 8
    6f2c:	b0 e0       	ldi	r27, 0x00	; 0
    6f2e:	eb e9       	ldi	r30, 0x9B	; 155
    6f30:	f7 e3       	ldi	r31, 0x37	; 55
    6f32:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    6f36:	1d 82       	std	Y+5, r1	; 0x05
    6f38:	1e 82       	std	Y+6, r1	; 0x06
    6f3a:	1f 82       	std	Y+7, r1	; 0x07
    6f3c:	18 86       	std	Y+8, r1	; 0x08
    6f3e:	19 82       	std	Y+1, r1	; 0x01
    6f40:	1a 82       	std	Y+2, r1	; 0x02
    6f42:	1b 82       	std	Y+3, r1	; 0x03
    6f44:	1c 82       	std	Y+4, r1	; 0x04
    6f46:	ce 01       	movw	r24, r28
    6f48:	01 96       	adiw	r24, 0x01	; 1
    6f4a:	bd de       	rcall	.-646    	; 0x6cc6 <clock_settime.part.2>
    6f4c:	e8 e7       	ldi	r30, 0x78	; 120
    6f4e:	fa e1       	ldi	r31, 0x1A	; 26
    6f50:	11 82       	std	Z+1, r1	; 0x01
    6f52:	10 82       	st	Z, r1
    6f54:	13 82       	std	Z+3, r1	; 0x03
    6f56:	12 82       	std	Z+2, r1	; 0x02
    6f58:	28 96       	adiw	r28, 0x08	; 8
    6f5a:	e2 e0       	ldi	r30, 0x02	; 2
    6f5c:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00006f60 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6f60:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <timers_configured>
    6f64:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <timers_configured+0x1>
    6f68:	89 2b       	or	r24, r25
    6f6a:	69 f0       	breq	.+26     	; 0x6f86 <enable_timers+0x26>
    6f6c:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_enabled>
    6f70:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_enabled+0x1>
    6f74:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6f76:	39 f4       	brne	.+14     	; 0x6f86 <enable_timers+0x26>
        timers_enabled = 1;
    6f78:	b8 dd       	rcall	.-1168   	; 0x6aea <enable_system_task>
    6f7a:	81 e0       	ldi	r24, 0x01	; 1
    6f7c:	90 e0       	ldi	r25, 0x00	; 0
    6f7e:	90 93 9b 17 	sts	0x179B, r25	; 0x80179b <timers_enabled+0x1>
    6f82:	80 93 9a 17 	sts	0x179A, r24	; 0x80179a <timers_enabled>
    6f86:	08 95       	ret

00006f88 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6f88:	cf 93       	push	r28
    6f8a:	df 93       	push	r29
    6f8c:	c0 e6       	ldi	r28, 0x60	; 96
    6f8e:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6f90:	8a 81       	ldd	r24, Y+2	; 0x02
    6f92:	88 23       	and	r24, r24
    6f94:	29 f0       	breq	.+10     	; 0x6fa0 <execute_timers+0x18>
    6f96:	e8 81       	ld	r30, Y
    6f98:	f9 81       	ldd	r31, Y+1	; 0x01
    6f9a:	30 97       	sbiw	r30, 0x00	; 0
    6f9c:	09 f0       	breq	.+2      	; 0x6fa0 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6f9e:	09 95       	icall
    6fa0:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6fa2:	8a e1       	ldi	r24, 0x1A	; 26
    6fa4:	c8 37       	cpi	r28, 0x78	; 120
    6fa6:	d8 07       	cpc	r29, r24
    6fa8:	99 f7       	brne	.-26     	; 0x6f90 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6faa:	df 91       	pop	r29
    6fac:	cf 91       	pop	r28
    6fae:	08 95       	ret

00006fb0 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6fb0:	86 e7       	ldi	r24, 0x76	; 118
    6fb2:	95 e0       	ldi	r25, 0x05	; 5
    6fb4:	1f 92       	push	r1
    6fb6:	9f 93       	push	r25
    6fb8:	8f 93       	push	r24
    6fba:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    if(!timers_configured)
    6fbe:	0f 90       	pop	r0
    6fc0:	0f 90       	pop	r0
    6fc2:	0f 90       	pop	r0
    6fc4:	80 91 98 17 	lds	r24, 0x1798	; 0x801798 <timers_configured>
    6fc8:	90 91 99 17 	lds	r25, 0x1799	; 0x801799 <timers_configured+0x1>
    6fcc:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6fce:	a9 f4       	brne	.+42     	; 0x6ffa <init_timers+0x4a>
        timers_configured = 1;
    6fd0:	8e dd       	rcall	.-1252   	; 0x6aee <install_timers_isr>
    6fd2:	81 e0       	ldi	r24, 0x01	; 1
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	90 93 99 17 	sts	0x1799, r25	; 0x801799 <timers_configured+0x1>
    6fda:	80 93 98 17 	sts	0x1798, r24	; 0x801798 <timers_configured>
        timers_enabled = 0;
    6fde:	10 92 9b 17 	sts	0x179B, r1	; 0x80179b <timers_enabled+0x1>
    6fe2:	10 92 9a 17 	sts	0x179A, r1	; 0x80179a <timers_enabled>
        printf("Timers configured\n");
    6fe6:	83 e6       	ldi	r24, 0x63	; 99
    6fe8:	95 e0       	ldi	r25, 0x05	; 5
    6fea:	1f 92       	push	r1
    6fec:	9f 93       	push	r25
    6fee:	8f 93       	push	r24
    6ff0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    }

    delete_all_timers();
    6ff4:	0f 90       	pop	r0

    clock_clear();
    6ff6:	0f 90       	pop	r0
    6ff8:	0f 90       	pop	r0
    printf("Clock Init\n");
    6ffa:	d9 de       	rcall	.-590    	; 0x6dae <delete_all_timers>
    6ffc:	96 df       	rcall	.-212    	; 0x6f2a <clock_clear>
    6ffe:	87 e5       	ldi	r24, 0x57	; 87
    7000:	95 e0       	ldi	r25, 0x05	; 5
    7002:	1f 92       	push	r1
    7004:	9f 93       	push	r25
    7006:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    7008:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    700c:	61 e0       	ldi	r22, 0x01	; 1
    700e:	70 e0       	ldi	r23, 0x00	; 0
    7010:	86 e2       	ldi	r24, 0x26	; 38
    7012:	96 e3       	ldi	r25, 0x36	; 54
    7014:	96 de       	rcall	.-724    	; 0x6d42 <set_timers>
    7016:	0f 90       	pop	r0
    7018:	0f 90       	pop	r0
    701a:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    701c:	01 96       	adiw	r24, 0x01	; 1
    701e:	51 f4       	brne	.+20     	; 0x7034 <init_timers+0x84>
    7020:	8f e3       	ldi	r24, 0x3F	; 63
    7022:	95 e0       	ldi	r25, 0x05	; 5
    7024:	1f 92       	push	r1
    7026:	9f 93       	push	r25
    7028:	8f 93       	push	r24
    702a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    702e:	0f 90       	pop	r0
    printf("Clock Installed\n");
    7030:	0f 90       	pop	r0
    7032:	0f 90       	pop	r0
    7034:	8e e2       	ldi	r24, 0x2E	; 46
    7036:	95 e0       	ldi	r25, 0x05	; 5
    7038:	1f 92       	push	r1
    703a:	9f 93       	push	r25

    enable_timers();
    703c:	8f 93       	push	r24
    703e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    printf("Timers enabled\n");
    7042:	8e df       	rcall	.-228    	; 0x6f60 <enable_timers>
    7044:	8e e1       	ldi	r24, 0x1E	; 30
    7046:	95 e0       	ldi	r25, 0x05	; 5
    7048:	1f 92       	push	r1
    704a:	9f 93       	push	r25
    704c:	8f 93       	push	r24
}
    704e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7052:	0f 90       	pop	r0
    7054:	0f 90       	pop	r0
    7056:	0f 90       	pop	r0
    7058:	0f 90       	pop	r0
    705a:	0f 90       	pop	r0
    705c:	0f 90       	pop	r0
    705e:	08 95       	ret

00007060 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    7060:	fb 01       	movw	r30, r22
    7062:	10 82       	st	Z, r1
    7064:	11 82       	std	Z+1, r1	; 0x01
    7066:	12 82       	std	Z+2, r1	; 0x02
    7068:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    706a:	80 e4       	ldi	r24, 0x40	; 64
    706c:	92 e4       	ldi	r25, 0x42	; 66
    706e:	af e0       	ldi	r26, 0x0F	; 15
    7070:	b0 e0       	ldi	r27, 0x00	; 0
    7072:	84 83       	std	Z+4, r24	; 0x04
    7074:	95 83       	std	Z+5, r25	; 0x05
    7076:	a6 83       	std	Z+6, r26	; 0x06
    7078:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    707a:	80 e0       	ldi	r24, 0x00	; 0
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	08 95       	ret

00007080 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    7080:	89 2b       	or	r24, r25
    7082:	19 f4       	brne	.+6      	; 0x708a <clock_settime+0xa>
    7084:	cb 01       	movw	r24, r22
    7086:	1f ce       	rjmp	.-962    	; 0x6cc6 <clock_settime.part.2>
    7088:	08 95       	ret
        return(-1);
    708a:	8f ef       	ldi	r24, 0xFF	; 255
    708c:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    708e:	08 95       	ret

00007090 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    7090:	9c 01       	movw	r18, r24
    7092:	83 70       	andi	r24, 0x03	; 3
    7094:	99 27       	eor	r25, r25
    7096:	00 97       	sbiw	r24, 0x00	; 0
    7098:	69 f4       	brne	.+26     	; 0x70b4 <IS_Leap+0x24>
    709a:	2c 36       	cpi	r18, 0x6C	; 108
    709c:	47 e0       	ldi	r20, 0x07	; 7
    709e:	34 07       	cpc	r19, r20
    70a0:	59 f0       	breq	.+22     	; 0x70b8 <IS_Leap+0x28>
    70a2:	51 e0       	ldi	r21, 0x01	; 1
    70a4:	40 e0       	ldi	r20, 0x00	; 0
    70a6:	24 33       	cpi	r18, 0x34	; 52
    70a8:	38 40       	sbci	r19, 0x08	; 8
    70aa:	09 f4       	brne	.+2      	; 0x70ae <IS_Leap+0x1e>
    70ac:	50 e0       	ldi	r21, 0x00	; 0
    70ae:	85 2f       	mov	r24, r21
    70b0:	94 2f       	mov	r25, r20
    70b2:	08 95       	ret
    70b4:	80 e0       	ldi	r24, 0x00	; 0
    70b6:	90 e0       	ldi	r25, 0x00	; 0
    70b8:	08 95       	ret

000070ba <tm_mon_to_ascii>:
    70ba:	8c 30       	cpi	r24, 0x0C	; 12
    70bc:	91 05       	cpc	r25, r1
    70be:	40 f4       	brcc	.+16     	; 0x70d0 <tm_mon_to_ascii+0x16>
    70c0:	88 0f       	add	r24, r24
    70c2:	99 1f       	adc	r25, r25
    70c4:	fc 01       	movw	r30, r24
    70c6:	ee 5e       	subi	r30, 0xEE	; 238
    70c8:	fe 4f       	sbci	r31, 0xFE	; 254
    70ca:	80 81       	ld	r24, Z
    70cc:	91 81       	ldd	r25, Z+1	; 0x01
    70ce:	08 95       	ret
    70d0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    70d4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    70d8:	08 95       	ret

000070da <Days_Per_Month>:
    70da:	cf 93       	push	r28
    70dc:	df 93       	push	r29
    70de:	8c 30       	cpi	r24, 0x0C	; 12
    70e0:	91 05       	cpc	r25, r1
    70e2:	24 f0       	brlt	.+8      	; 0x70ec <Days_Per_Month+0x12>
    70e4:	6f 5f       	subi	r22, 0xFF	; 255
    70e6:	7f 4f       	sbci	r23, 0xFF	; 255
    70e8:	0c 97       	sbiw	r24, 0x0c	; 12
    70ea:	f9 cf       	rjmp	.-14     	; 0x70de <Days_Per_Month+0x4>
    70ec:	97 ff       	sbrs	r25, 7
    70ee:	04 c0       	rjmp	.+8      	; 0x70f8 <Days_Per_Month+0x1e>
    70f0:	61 50       	subi	r22, 0x01	; 1
    70f2:	71 09       	sbc	r23, r1
    70f4:	0c 96       	adiw	r24, 0x0c	; 12
    70f6:	fa cf       	rjmp	.-12     	; 0x70ec <Days_Per_Month+0x12>
    70f8:	fc 01       	movw	r30, r24
    70fa:	ee 0f       	add	r30, r30
    70fc:	ff 1f       	adc	r31, r31
    70fe:	eb 59       	subi	r30, 0x9B	; 155
    7100:	fd 4f       	sbci	r31, 0xFD	; 253
    7102:	c0 81       	ld	r28, Z
    7104:	d1 81       	ldd	r29, Z+1	; 0x01
    7106:	01 97       	sbiw	r24, 0x01	; 1
    7108:	29 f4       	brne	.+10     	; 0x7114 <Days_Per_Month+0x3a>
    710a:	cb 01       	movw	r24, r22
    710c:	c1 df       	rcall	.-126    	; 0x7090 <IS_Leap>
    710e:	89 2b       	or	r24, r25
    7110:	09 f0       	breq	.+2      	; 0x7114 <Days_Per_Month+0x3a>
    7112:	21 96       	adiw	r28, 0x01	; 1
    7114:	ce 01       	movw	r24, r28
    7116:	df 91       	pop	r29
    7118:	cf 91       	pop	r28
    711a:	08 95       	ret

0000711c <time_to_tm>:
    711c:	a0 e0       	ldi	r26, 0x00	; 0
    711e:	b0 e0       	ldi	r27, 0x00	; 0
    7120:	e4 e9       	ldi	r30, 0x94	; 148
    7122:	f8 e3       	ldi	r31, 0x38	; 56
    7124:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
    7128:	e8 01       	movw	r28, r16
    712a:	e6 e1       	ldi	r30, 0x16	; 22
    712c:	d8 01       	movw	r26, r16
    712e:	1d 92       	st	X+, r1
    7130:	ea 95       	dec	r30
    7132:	e9 f7       	brne	.-6      	; 0x712e <time_to_tm+0x12>
    7134:	61 15       	cp	r22, r1
    7136:	bd e5       	ldi	r27, 0x5D	; 93
    7138:	7b 07       	cpc	r23, r27
    713a:	bd ef       	ldi	r27, 0xFD	; 253
    713c:	8b 07       	cpc	r24, r27
    713e:	bf ef       	ldi	r27, 0xFF	; 255
    7140:	9b 07       	cpc	r25, r27
    7142:	08 f0       	brcs	.+2      	; 0x7146 <time_to_tm+0x2a>
    7144:	c0 c0       	rjmp	.+384    	; 0x72c6 <time_to_tm+0x1aa>
    7146:	6b 01       	movw	r12, r22
    7148:	7c 01       	movw	r14, r24
    714a:	c2 1a       	sub	r12, r18
    714c:	d3 0a       	sbc	r13, r19
    714e:	e4 0a       	sbc	r14, r20
    7150:	f5 0a       	sbc	r15, r21
    7152:	46 01       	movw	r8, r12
    7154:	57 01       	movw	r10, r14
    7156:	e0 e8       	ldi	r30, 0x80	; 128
    7158:	ce 16       	cp	r12, r30
    715a:	ee ea       	ldi	r30, 0xAE	; 174
    715c:	de 06       	cpc	r13, r30
    715e:	ee ef       	ldi	r30, 0xFE	; 254
    7160:	ee 06       	cpc	r14, r30
    7162:	ef ef       	ldi	r30, 0xFF	; 255
    7164:	fe 06       	cpc	r15, r30
    7166:	50 f0       	brcs	.+20     	; 0x717c <time_to_tm+0x60>
    7168:	80 e8       	ldi	r24, 0x80	; 128
    716a:	88 0e       	add	r8, r24
    716c:	81 e5       	ldi	r24, 0x51	; 81
    716e:	98 1e       	adc	r9, r24
    7170:	81 e0       	ldi	r24, 0x01	; 1
    7172:	a8 1e       	adc	r10, r24
    7174:	b1 1c       	adc	r11, r1
    7176:	01 e0       	ldi	r16, 0x01	; 1
    7178:	10 e0       	ldi	r17, 0x00	; 0
    717a:	02 c0       	rjmp	.+4      	; 0x7180 <time_to_tm+0x64>
    717c:	00 e0       	ldi	r16, 0x00	; 0
    717e:	10 e0       	ldi	r17, 0x00	; 0
    7180:	8c e3       	ldi	r24, 0x3C	; 60
    7182:	48 2e       	mov	r4, r24
    7184:	51 2c       	mov	r5, r1
    7186:	61 2c       	mov	r6, r1
    7188:	71 2c       	mov	r7, r1
    718a:	c5 01       	movw	r24, r10
    718c:	b4 01       	movw	r22, r8
    718e:	a3 01       	movw	r20, r6
    7190:	92 01       	movw	r18, r4
    7192:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    7196:	79 83       	std	Y+1, r23	; 0x01
    7198:	68 83       	st	Y, r22
    719a:	ca 01       	movw	r24, r20
    719c:	b9 01       	movw	r22, r18
    719e:	a3 01       	movw	r20, r6
    71a0:	92 01       	movw	r18, r4
    71a2:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    71a6:	7b 83       	std	Y+3, r23	; 0x03
    71a8:	6a 83       	std	Y+2, r22	; 0x02
    71aa:	c5 01       	movw	r24, r10
    71ac:	b4 01       	movw	r22, r8
    71ae:	20 e1       	ldi	r18, 0x10	; 16
    71b0:	3e e0       	ldi	r19, 0x0E	; 14
    71b2:	40 e0       	ldi	r20, 0x00	; 0
    71b4:	50 e0       	ldi	r21, 0x00	; 0
    71b6:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    71ba:	ca 01       	movw	r24, r20
    71bc:	b9 01       	movw	r22, r18
    71be:	28 e1       	ldi	r18, 0x18	; 24
    71c0:	30 e0       	ldi	r19, 0x00	; 0
    71c2:	40 e0       	ldi	r20, 0x00	; 0
    71c4:	50 e0       	ldi	r21, 0x00	; 0
    71c6:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    71ca:	7d 83       	std	Y+5, r23	; 0x05
    71cc:	6c 83       	std	Y+4, r22	; 0x04
    71ce:	01 15       	cp	r16, r1
    71d0:	11 05       	cpc	r17, r1
    71d2:	89 f0       	breq	.+34     	; 0x71f6 <time_to_tm+0xda>
    71d4:	85 e4       	ldi	r24, 0x45	; 69
    71d6:	90 e0       	ldi	r25, 0x00	; 0
    71d8:	9b 87       	std	Y+11, r25	; 0x0b
    71da:	8a 87       	std	Y+10, r24	; 0x0a
    71dc:	8b e0       	ldi	r24, 0x0B	; 11
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	99 87       	std	Y+9, r25	; 0x09
    71e2:	88 87       	std	Y+8, r24	; 0x08
    71e4:	8f e1       	ldi	r24, 0x1F	; 31
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	9f 83       	std	Y+7, r25	; 0x07
    71ea:	8e 83       	std	Y+6, r24	; 0x06
    71ec:	83 e0       	ldi	r24, 0x03	; 3
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	9d 87       	std	Y+13, r25	; 0x0d
    71f2:	8c 87       	std	Y+12, r24	; 0x0c
    71f4:	65 c0       	rjmp	.+202    	; 0x72c0 <time_to_tm+0x1a4>
    71f6:	c5 01       	movw	r24, r10
    71f8:	b4 01       	movw	r22, r8
    71fa:	20 e8       	ldi	r18, 0x80	; 128
    71fc:	31 e5       	ldi	r19, 0x51	; 81
    71fe:	41 e0       	ldi	r20, 0x01	; 1
    7200:	50 e0       	ldi	r21, 0x00	; 0
    7202:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    7206:	49 01       	movw	r8, r18
    7208:	5a 01       	movw	r10, r20
    720a:	ca 01       	movw	r24, r20
    720c:	b9 01       	movw	r22, r18
    720e:	6c 5f       	subi	r22, 0xFC	; 252
    7210:	7f 4f       	sbci	r23, 0xFF	; 255
    7212:	8f 4f       	sbci	r24, 0xFF	; 255
    7214:	9f 4f       	sbci	r25, 0xFF	; 255
    7216:	27 e0       	ldi	r18, 0x07	; 7
    7218:	30 e0       	ldi	r19, 0x00	; 0
    721a:	40 e0       	ldi	r20, 0x00	; 0
    721c:	50 e0       	ldi	r21, 0x00	; 0
    721e:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
    7222:	7d 87       	std	Y+13, r23	; 0x0d
    7224:	6c 87       	std	Y+12, r22	; 0x0c
    7226:	02 eb       	ldi	r16, 0xB2	; 178
    7228:	17 e0       	ldi	r17, 0x07	; 7
    722a:	c8 01       	movw	r24, r16
    722c:	31 df       	rcall	.-414    	; 0x7090 <IS_Leap>
    722e:	00 97       	sbiw	r24, 0x00	; 0
    7230:	19 f4       	brne	.+6      	; 0x7238 <time_to_tm+0x11c>
    7232:	4d e6       	ldi	r20, 0x6D	; 109
    7234:	51 e0       	ldi	r21, 0x01	; 1
    7236:	02 c0       	rjmp	.+4      	; 0x723c <time_to_tm+0x120>
    7238:	4e e6       	ldi	r20, 0x6E	; 110
    723a:	51 e0       	ldi	r21, 0x01	; 1
    723c:	05 2e       	mov	r0, r21
    723e:	00 0c       	add	r0, r0
    7240:	66 0b       	sbc	r22, r22
    7242:	77 0b       	sbc	r23, r23
    7244:	84 16       	cp	r8, r20
    7246:	95 06       	cpc	r9, r21
    7248:	a6 06       	cpc	r10, r22
    724a:	b7 06       	cpc	r11, r23
    724c:	3c f0       	brlt	.+14     	; 0x725c <time_to_tm+0x140>
    724e:	0f 5f       	subi	r16, 0xFF	; 255
    7250:	1f 4f       	sbci	r17, 0xFF	; 255
    7252:	84 1a       	sub	r8, r20
    7254:	95 0a       	sbc	r9, r21
    7256:	a6 0a       	sbc	r10, r22
    7258:	b7 0a       	sbc	r11, r23
    725a:	e7 cf       	rjmp	.-50     	; 0x722a <time_to_tm+0x10e>
    725c:	0c 56       	subi	r16, 0x6C	; 108
    725e:	17 40       	sbci	r17, 0x07	; 7
    7260:	1b 87       	std	Y+11, r17	; 0x0b
    7262:	0a 87       	std	Y+10, r16	; 0x0a
    7264:	9f 86       	std	Y+15, r9	; 0x0f
    7266:	8e 86       	std	Y+14, r8	; 0x0e
    7268:	e5 e6       	ldi	r30, 0x65	; 101
    726a:	f2 e0       	ldi	r31, 0x02	; 2
    726c:	20 e0       	ldi	r18, 0x00	; 0
    726e:	30 e0       	ldi	r19, 0x00	; 0
    7270:	18 14       	cp	r1, r8
    7272:	19 04       	cpc	r1, r9
    7274:	1a 04       	cpc	r1, r10
    7276:	1b 04       	cpc	r1, r11
    7278:	e4 f4       	brge	.+56     	; 0x72b2 <time_to_tm+0x196>
    727a:	2c 30       	cpi	r18, 0x0C	; 12
    727c:	31 05       	cpc	r19, r1
    727e:	c9 f0       	breq	.+50     	; 0x72b2 <time_to_tm+0x196>
    7280:	41 91       	ld	r20, Z+
    7282:	51 91       	ld	r21, Z+
    7284:	21 30       	cpi	r18, 0x01	; 1
    7286:	31 05       	cpc	r19, r1
    7288:	21 f4       	brne	.+8      	; 0x7292 <time_to_tm+0x176>
    728a:	00 97       	sbiw	r24, 0x00	; 0
    728c:	11 f0       	breq	.+4      	; 0x7292 <time_to_tm+0x176>
    728e:	4f 5f       	subi	r20, 0xFF	; 255
    7290:	5f 4f       	sbci	r21, 0xFF	; 255
    7292:	05 2e       	mov	r0, r21
    7294:	00 0c       	add	r0, r0
    7296:	66 0b       	sbc	r22, r22
    7298:	77 0b       	sbc	r23, r23
    729a:	84 16       	cp	r8, r20
    729c:	95 06       	cpc	r9, r21
    729e:	a6 06       	cpc	r10, r22
    72a0:	b7 06       	cpc	r11, r23
    72a2:	3c f0       	brlt	.+14     	; 0x72b2 <time_to_tm+0x196>
    72a4:	84 1a       	sub	r8, r20
    72a6:	95 0a       	sbc	r9, r21
    72a8:	a6 0a       	sbc	r10, r22
    72aa:	b7 0a       	sbc	r11, r23
    72ac:	2f 5f       	subi	r18, 0xFF	; 255
    72ae:	3f 4f       	sbci	r19, 0xFF	; 255
    72b0:	df cf       	rjmp	.-66     	; 0x7270 <time_to_tm+0x154>
    72b2:	39 87       	std	Y+9, r19	; 0x09
    72b4:	28 87       	std	Y+8, r18	; 0x08
    72b6:	af ef       	ldi	r26, 0xFF	; 255
    72b8:	8a 1a       	sub	r8, r26
    72ba:	9a 0a       	sbc	r9, r26
    72bc:	9f 82       	std	Y+7, r9	; 0x07
    72be:	8e 82       	std	Y+6, r8	; 0x06
    72c0:	b6 01       	movw	r22, r12
    72c2:	c7 01       	movw	r24, r14
    72c4:	04 c0       	rjmp	.+8      	; 0x72ce <time_to_tm+0x1b2>
    72c6:	6f ef       	ldi	r22, 0xFF	; 255
    72c8:	7f ef       	ldi	r23, 0xFF	; 255
    72ca:	8f ef       	ldi	r24, 0xFF	; 255
    72cc:	9f ef       	ldi	r25, 0xFF	; 255
    72ce:	cd b7       	in	r28, 0x3d	; 61
    72d0:	de b7       	in	r29, 0x3e	; 62
    72d2:	e0 e1       	ldi	r30, 0x10	; 16
    72d4:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

000072d8 <gmtime_r>:
    72d8:	0f 93       	push	r16
    72da:	1f 93       	push	r17
    72dc:	cf 93       	push	r28
    72de:	df 93       	push	r29
    72e0:	eb 01       	movw	r28, r22
    72e2:	fc 01       	movw	r30, r24
    72e4:	60 81       	ld	r22, Z
    72e6:	71 81       	ldd	r23, Z+1	; 0x01
    72e8:	82 81       	ldd	r24, Z+2	; 0x02
    72ea:	93 81       	ldd	r25, Z+3	; 0x03
    72ec:	8e 01       	movw	r16, r28
    72ee:	20 e0       	ldi	r18, 0x00	; 0
    72f0:	30 e0       	ldi	r19, 0x00	; 0
    72f2:	a9 01       	movw	r20, r18
    72f4:	13 df       	rcall	.-474    	; 0x711c <time_to_tm>
    72f6:	ce 01       	movw	r24, r28
    72f8:	df 91       	pop	r29
    72fa:	cf 91       	pop	r28
    72fc:	1f 91       	pop	r17
    72fe:	0f 91       	pop	r16
    7300:	08 95       	ret

00007302 <gmtime>:
    7302:	2a eb       	ldi	r18, 0xBA	; 186
    7304:	37 e1       	ldi	r19, 0x17	; 23
    7306:	30 93 d1 17 	sts	0x17D1, r19	; 0x8017d1 <p.3795+0x1>
    730a:	20 93 d0 17 	sts	0x17D0, r18	; 0x8017d0 <p.3795>
    730e:	b9 01       	movw	r22, r18
    7310:	e3 df       	rcall	.-58     	; 0x72d8 <gmtime_r>
    7312:	8a eb       	ldi	r24, 0xBA	; 186
    7314:	97 e1       	ldi	r25, 0x17	; 23
    7316:	08 95       	ret

00007318 <gettimezone>:
    7318:	e8 e7       	ldi	r30, 0x78	; 120
    731a:	fa e1       	ldi	r31, 0x1A	; 26
    731c:	20 81       	ld	r18, Z
    731e:	31 81       	ldd	r19, Z+1	; 0x01
    7320:	dc 01       	movw	r26, r24
    7322:	11 96       	adiw	r26, 0x01	; 1
    7324:	3c 93       	st	X, r19
    7326:	2e 93       	st	-X, r18
    7328:	22 81       	ldd	r18, Z+2	; 0x02
    732a:	33 81       	ldd	r19, Z+3	; 0x03
    732c:	13 96       	adiw	r26, 0x03	; 3
    732e:	3c 93       	st	X, r19
    7330:	2e 93       	st	-X, r18
    7332:	12 97       	sbiw	r26, 0x02	; 2
    7334:	80 e0       	ldi	r24, 0x00	; 0
    7336:	90 e0       	ldi	r25, 0x00	; 0
    7338:	08 95       	ret

0000733a <settimezone>:
    733a:	dc 01       	movw	r26, r24
    733c:	2d 91       	ld	r18, X+
    733e:	3c 91       	ld	r19, X
    7340:	11 97       	sbiw	r26, 0x01	; 1
    7342:	e8 e7       	ldi	r30, 0x78	; 120
    7344:	fa e1       	ldi	r31, 0x1A	; 26
    7346:	31 83       	std	Z+1, r19	; 0x01
    7348:	20 83       	st	Z, r18
    734a:	12 96       	adiw	r26, 0x02	; 2
    734c:	8d 91       	ld	r24, X+
    734e:	9c 91       	ld	r25, X
    7350:	13 97       	sbiw	r26, 0x03	; 3
    7352:	93 83       	std	Z+3, r25	; 0x03
    7354:	82 83       	std	Z+2, r24	; 0x02
    7356:	80 e0       	ldi	r24, 0x00	; 0
    7358:	90 e0       	ldi	r25, 0x00	; 0
    735a:	08 95       	ret

0000735c <gettimeofday>:
    735c:	a8 e0       	ldi	r26, 0x08	; 8
    735e:	b0 e0       	ldi	r27, 0x00	; 0
    7360:	e4 eb       	ldi	r30, 0xB4	; 180
    7362:	f9 e3       	ldi	r31, 0x39	; 57
    7364:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
    7368:	8c 01       	movw	r16, r24
    736a:	7b 01       	movw	r14, r22
    736c:	be 01       	movw	r22, r28
    736e:	6f 5f       	subi	r22, 0xFF	; 255
    7370:	7f 4f       	sbci	r23, 0xFF	; 255
    7372:	80 e0       	ldi	r24, 0x00	; 0
    7374:	90 e0       	ldi	r25, 0x00	; 0
    7376:	f5 db       	rcall	.-2070   	; 0x6b62 <clock_gettime>
    7378:	89 81       	ldd	r24, Y+1	; 0x01
    737a:	9a 81       	ldd	r25, Y+2	; 0x02
    737c:	ab 81       	ldd	r26, Y+3	; 0x03
    737e:	bc 81       	ldd	r27, Y+4	; 0x04
    7380:	f8 01       	movw	r30, r16
    7382:	80 83       	st	Z, r24
    7384:	91 83       	std	Z+1, r25	; 0x01
    7386:	a2 83       	std	Z+2, r26	; 0x02
    7388:	b3 83       	std	Z+3, r27	; 0x03
    738a:	6d 81       	ldd	r22, Y+5	; 0x05
    738c:	7e 81       	ldd	r23, Y+6	; 0x06
    738e:	8f 81       	ldd	r24, Y+7	; 0x07
    7390:	98 85       	ldd	r25, Y+8	; 0x08
    7392:	28 ee       	ldi	r18, 0xE8	; 232
    7394:	33 e0       	ldi	r19, 0x03	; 3
    7396:	40 e0       	ldi	r20, 0x00	; 0
    7398:	50 e0       	ldi	r21, 0x00	; 0
    739a:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
    739e:	f8 01       	movw	r30, r16
    73a0:	24 83       	std	Z+4, r18	; 0x04
    73a2:	35 83       	std	Z+5, r19	; 0x05
    73a4:	46 83       	std	Z+6, r20	; 0x06
    73a6:	57 83       	std	Z+7, r21	; 0x07
    73a8:	c7 01       	movw	r24, r14
    73aa:	b6 df       	rcall	.-148    	; 0x7318 <gettimezone>
    73ac:	80 e0       	ldi	r24, 0x00	; 0
    73ae:	90 e0       	ldi	r25, 0x00	; 0
    73b0:	28 96       	adiw	r28, 0x08	; 8
    73b2:	e6 e0       	ldi	r30, 0x06	; 6
    73b4:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

000073b8 <time>:
    73b8:	cf 93       	push	r28
    73ba:	df 93       	push	r29
    73bc:	ec 01       	movw	r28, r24
    73be:	6c e9       	ldi	r22, 0x9C	; 156
    73c0:	77 e1       	ldi	r23, 0x17	; 23
    73c2:	80 e0       	ldi	r24, 0x00	; 0
    73c4:	90 e0       	ldi	r25, 0x00	; 0
    73c6:	cd db       	rcall	.-2150   	; 0x6b62 <clock_gettime>
    73c8:	20 97       	sbiw	r28, 0x00	; 0
    73ca:	61 f0       	breq	.+24     	; 0x73e4 <time+0x2c>
    73cc:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <ts.3873>
    73d0:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <ts.3873+0x1>
    73d4:	a0 91 9e 17 	lds	r26, 0x179E	; 0x80179e <ts.3873+0x2>
    73d8:	b0 91 9f 17 	lds	r27, 0x179F	; 0x80179f <ts.3873+0x3>
    73dc:	88 83       	st	Y, r24
    73de:	99 83       	std	Y+1, r25	; 0x01
    73e0:	aa 83       	std	Y+2, r26	; 0x02
    73e2:	bb 83       	std	Y+3, r27	; 0x03
    73e4:	60 91 9c 17 	lds	r22, 0x179C	; 0x80179c <ts.3873>
    73e8:	70 91 9d 17 	lds	r23, 0x179D	; 0x80179d <ts.3873+0x1>
    73ec:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <ts.3873+0x2>
    73f0:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <ts.3873+0x3>
    73f4:	df 91       	pop	r29
    73f6:	cf 91       	pop	r28
    73f8:	08 95       	ret

000073fa <is_dst>:
    73fa:	cf 92       	push	r12
    73fc:	df 92       	push	r13
    73fe:	ef 92       	push	r14
    7400:	ff 92       	push	r15
    7402:	6b 01       	movw	r12, r22
    7404:	7c 01       	movw	r14, r24
    7406:	ff d3       	rcall	.+2046   	; 0x7c06 <set_dst>
    7408:	80 91 7c 1a 	lds	r24, 0x1A7C	; 0x801a7c <dst>
    740c:	90 91 7d 1a 	lds	r25, 0x1A7D	; 0x801a7d <dst+0x1>
    7410:	a0 91 7e 1a 	lds	r26, 0x1A7E	; 0x801a7e <dst+0x2>
    7414:	b0 91 7f 1a 	lds	r27, 0x1A7F	; 0x801a7f <dst+0x3>
    7418:	c8 16       	cp	r12, r24
    741a:	d9 06       	cpc	r13, r25
    741c:	ea 06       	cpc	r14, r26
    741e:	fb 06       	cpc	r15, r27
    7420:	88 f0       	brcs	.+34     	; 0x7444 <is_dst+0x4a>
    7422:	81 e0       	ldi	r24, 0x01	; 1
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	40 91 80 1a 	lds	r20, 0x1A80	; 0x801a80 <dst+0x4>
    742a:	50 91 81 1a 	lds	r21, 0x1A81	; 0x801a81 <dst+0x5>
    742e:	60 91 82 1a 	lds	r22, 0x1A82	; 0x801a82 <dst+0x6>
    7432:	70 91 83 1a 	lds	r23, 0x1A83	; 0x801a83 <dst+0x7>
    7436:	4c 15       	cp	r20, r12
    7438:	5d 05       	cpc	r21, r13
    743a:	6e 05       	cpc	r22, r14
    743c:	7f 05       	cpc	r23, r15
    743e:	20 f4       	brcc	.+8      	; 0x7448 <is_dst+0x4e>
    7440:	80 e0       	ldi	r24, 0x00	; 0
    7442:	02 c0       	rjmp	.+4      	; 0x7448 <is_dst+0x4e>
    7444:	80 e0       	ldi	r24, 0x00	; 0
    7446:	90 e0       	ldi	r25, 0x00	; 0
    7448:	ff 90       	pop	r15
    744a:	ef 90       	pop	r14
    744c:	df 90       	pop	r13
    744e:	cf 90       	pop	r12
    7450:	08 95       	ret

00007452 <localtime_r>:
    7452:	4f 92       	push	r4
    7454:	5f 92       	push	r5
    7456:	6f 92       	push	r6
    7458:	7f 92       	push	r7
    745a:	af 92       	push	r10
    745c:	bf 92       	push	r11
    745e:	cf 92       	push	r12
    7460:	df 92       	push	r13
    7462:	ef 92       	push	r14
    7464:	ff 92       	push	r15
    7466:	0f 93       	push	r16
    7468:	1f 93       	push	r17
    746a:	cf 93       	push	r28
    746c:	df 93       	push	r29
    746e:	00 d0       	rcall	.+0      	; 0x7470 <localtime_r+0x1e>
    7470:	00 d0       	rcall	.+0      	; 0x7472 <localtime_r+0x20>
    7472:	cd b7       	in	r28, 0x3d	; 61
    7474:	de b7       	in	r29, 0x3e	; 62
    7476:	5b 01       	movw	r10, r22
    7478:	fc 01       	movw	r30, r24
    747a:	40 80       	ld	r4, Z
    747c:	51 80       	ldd	r5, Z+1	; 0x01
    747e:	62 80       	ldd	r6, Z+2	; 0x02
    7480:	73 80       	ldd	r7, Z+3	; 0x03
    7482:	ce 01       	movw	r24, r28
    7484:	01 96       	adiw	r24, 0x01	; 1
    7486:	48 df       	rcall	.-368    	; 0x7318 <gettimezone>
    7488:	a9 81       	ldd	r26, Y+1	; 0x01
    748a:	ba 81       	ldd	r27, Y+2	; 0x02
    748c:	2c e3       	ldi	r18, 0x3C	; 60
    748e:	30 e0       	ldi	r19, 0x00	; 0
    7490:	0e 94 03 e4 	call	0x1c806	; 0x1c806 <__usmulhisi3>
    7494:	6b 01       	movw	r12, r22
    7496:	7c 01       	movw	r14, r24
    7498:	c3 01       	movw	r24, r6
    749a:	b2 01       	movw	r22, r4
    749c:	6c 19       	sub	r22, r12
    749e:	7d 09       	sbc	r23, r13
    74a0:	8e 09       	sbc	r24, r14
    74a2:	9f 09       	sbc	r25, r15
    74a4:	aa df       	rcall	.-172    	; 0x73fa <is_dst>
    74a6:	89 2b       	or	r24, r25
    74a8:	31 f0       	breq	.+12     	; 0x74b6 <localtime_r+0x64>
    74aa:	f0 e1       	ldi	r31, 0x10	; 16
    74ac:	cf 1a       	sub	r12, r31
    74ae:	fe e0       	ldi	r31, 0x0E	; 14
    74b0:	df 0a       	sbc	r13, r31
    74b2:	e1 08       	sbc	r14, r1
    74b4:	f1 08       	sbc	r15, r1
    74b6:	85 01       	movw	r16, r10
    74b8:	a7 01       	movw	r20, r14
    74ba:	96 01       	movw	r18, r12
    74bc:	c3 01       	movw	r24, r6
    74be:	b2 01       	movw	r22, r4
    74c0:	2d de       	rcall	.-934    	; 0x711c <time_to_tm>
    74c2:	c5 01       	movw	r24, r10
    74c4:	0f 90       	pop	r0
    74c6:	0f 90       	pop	r0
    74c8:	0f 90       	pop	r0
    74ca:	0f 90       	pop	r0
    74cc:	df 91       	pop	r29
    74ce:	cf 91       	pop	r28
    74d0:	1f 91       	pop	r17
    74d2:	0f 91       	pop	r16
    74d4:	ff 90       	pop	r15
    74d6:	ef 90       	pop	r14
    74d8:	df 90       	pop	r13
    74da:	cf 90       	pop	r12
    74dc:	bf 90       	pop	r11
    74de:	af 90       	pop	r10
    74e0:	7f 90       	pop	r7
    74e2:	6f 90       	pop	r6
    74e4:	5f 90       	pop	r5
    74e6:	4f 90       	pop	r4
    74e8:	08 95       	ret

000074ea <localtime>:
    74ea:	64 ea       	ldi	r22, 0xA4	; 164
    74ec:	77 e1       	ldi	r23, 0x17	; 23
    74ee:	b1 cf       	rjmp	.-158    	; 0x7452 <localtime_r>
    74f0:	08 95       	ret

000074f2 <normalize>:
    74f2:	aa e0       	ldi	r26, 0x0A	; 10
    74f4:	b0 e0       	ldi	r27, 0x00	; 0
    74f6:	ef e7       	ldi	r30, 0x7F	; 127
    74f8:	fa e3       	ldi	r31, 0x3A	; 58
    74fa:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    74fe:	7c 01       	movw	r14, r24
    7500:	7a 87       	std	Y+10, r23	; 0x0a
    7502:	69 87       	std	Y+9, r22	; 0x09
    7504:	f7 01       	movw	r30, r14
    7506:	80 81       	ld	r24, Z
    7508:	91 81       	ldd	r25, Z+1	; 0x01
    750a:	8c 33       	cpi	r24, 0x3C	; 60
    750c:	91 05       	cpc	r25, r1
    750e:	5c f0       	brlt	.+22     	; 0x7526 <normalize+0x34>
    7510:	f7 01       	movw	r30, r14
    7512:	22 81       	ldd	r18, Z+2	; 0x02
    7514:	33 81       	ldd	r19, Z+3	; 0x03
    7516:	2f 5f       	subi	r18, 0xFF	; 255
    7518:	3f 4f       	sbci	r19, 0xFF	; 255
    751a:	33 83       	std	Z+3, r19	; 0x03
    751c:	22 83       	std	Z+2, r18	; 0x02
    751e:	cc 97       	sbiw	r24, 0x3c	; 60
    7520:	91 83       	std	Z+1, r25	; 0x01
    7522:	80 83       	st	Z, r24
    7524:	ef cf       	rjmp	.-34     	; 0x7504 <normalize+0x12>
    7526:	f7 01       	movw	r30, r14
    7528:	01 90       	ld	r0, Z+
    752a:	f0 81       	ld	r31, Z
    752c:	e0 2d       	mov	r30, r0
    752e:	fe 83       	std	Y+6, r31	; 0x06
    7530:	ed 83       	std	Y+5, r30	; 0x05
    7532:	f7 ff       	sbrs	r31, 7
    7534:	0d c0       	rjmp	.+26     	; 0x7550 <normalize+0x5e>
    7536:	f7 01       	movw	r30, r14
    7538:	82 81       	ldd	r24, Z+2	; 0x02
    753a:	93 81       	ldd	r25, Z+3	; 0x03
    753c:	01 97       	sbiw	r24, 0x01	; 1
    753e:	93 83       	std	Z+3, r25	; 0x03
    7540:	82 83       	std	Z+2, r24	; 0x02
    7542:	6d 81       	ldd	r22, Y+5	; 0x05
    7544:	7e 81       	ldd	r23, Y+6	; 0x06
    7546:	64 5c       	subi	r22, 0xC4	; 196
    7548:	7f 4f       	sbci	r23, 0xFF	; 255
    754a:	71 83       	std	Z+1, r23	; 0x01
    754c:	60 83       	st	Z, r22
    754e:	eb cf       	rjmp	.-42     	; 0x7526 <normalize+0x34>
    7550:	f7 01       	movw	r30, r14
    7552:	82 81       	ldd	r24, Z+2	; 0x02
    7554:	93 81       	ldd	r25, Z+3	; 0x03
    7556:	8c 33       	cpi	r24, 0x3C	; 60
    7558:	91 05       	cpc	r25, r1
    755a:	5c f0       	brlt	.+22     	; 0x7572 <normalize+0x80>
    755c:	f7 01       	movw	r30, r14
    755e:	24 81       	ldd	r18, Z+4	; 0x04
    7560:	35 81       	ldd	r19, Z+5	; 0x05
    7562:	2f 5f       	subi	r18, 0xFF	; 255
    7564:	3f 4f       	sbci	r19, 0xFF	; 255
    7566:	35 83       	std	Z+5, r19	; 0x05
    7568:	24 83       	std	Z+4, r18	; 0x04
    756a:	cc 97       	sbiw	r24, 0x3c	; 60
    756c:	93 83       	std	Z+3, r25	; 0x03
    756e:	82 83       	std	Z+2, r24	; 0x02
    7570:	ef cf       	rjmp	.-34     	; 0x7550 <normalize+0x5e>
    7572:	f7 01       	movw	r30, r14
    7574:	22 80       	ldd	r2, Z+2	; 0x02
    7576:	33 80       	ldd	r3, Z+3	; 0x03
    7578:	37 fe       	sbrs	r3, 7
    757a:	0d c0       	rjmp	.+26     	; 0x7596 <normalize+0xa4>
    757c:	f7 01       	movw	r30, r14
    757e:	84 81       	ldd	r24, Z+4	; 0x04
    7580:	95 81       	ldd	r25, Z+5	; 0x05
    7582:	01 97       	sbiw	r24, 0x01	; 1
    7584:	95 83       	std	Z+5, r25	; 0x05
    7586:	84 83       	std	Z+4, r24	; 0x04
    7588:	fc e3       	ldi	r31, 0x3C	; 60
    758a:	2f 0e       	add	r2, r31
    758c:	31 1c       	adc	r3, r1
    758e:	f7 01       	movw	r30, r14
    7590:	33 82       	std	Z+3, r3	; 0x03
    7592:	22 82       	std	Z+2, r2	; 0x02
    7594:	ee cf       	rjmp	.-36     	; 0x7572 <normalize+0x80>
    7596:	f7 01       	movw	r30, r14
    7598:	84 81       	ldd	r24, Z+4	; 0x04
    759a:	95 81       	ldd	r25, Z+5	; 0x05
    759c:	88 31       	cpi	r24, 0x18	; 24
    759e:	91 05       	cpc	r25, r1
    75a0:	5c f0       	brlt	.+22     	; 0x75b8 <normalize+0xc6>
    75a2:	f7 01       	movw	r30, r14
    75a4:	26 81       	ldd	r18, Z+6	; 0x06
    75a6:	37 81       	ldd	r19, Z+7	; 0x07
    75a8:	2f 5f       	subi	r18, 0xFF	; 255
    75aa:	3f 4f       	sbci	r19, 0xFF	; 255
    75ac:	37 83       	std	Z+7, r19	; 0x07
    75ae:	26 83       	std	Z+6, r18	; 0x06
    75b0:	48 97       	sbiw	r24, 0x18	; 24
    75b2:	95 83       	std	Z+5, r25	; 0x05
    75b4:	84 83       	std	Z+4, r24	; 0x04
    75b6:	ef cf       	rjmp	.-34     	; 0x7596 <normalize+0xa4>
    75b8:	f7 01       	movw	r30, r14
    75ba:	04 81       	ldd	r16, Z+4	; 0x04
    75bc:	15 81       	ldd	r17, Z+5	; 0x05
    75be:	17 ff       	sbrs	r17, 7
    75c0:	0b c0       	rjmp	.+22     	; 0x75d8 <normalize+0xe6>
    75c2:	f7 01       	movw	r30, r14
    75c4:	86 81       	ldd	r24, Z+6	; 0x06
    75c6:	97 81       	ldd	r25, Z+7	; 0x07
    75c8:	01 97       	sbiw	r24, 0x01	; 1
    75ca:	97 83       	std	Z+7, r25	; 0x07
    75cc:	86 83       	std	Z+6, r24	; 0x06
    75ce:	08 5e       	subi	r16, 0xE8	; 232
    75d0:	1f 4f       	sbci	r17, 0xFF	; 255
    75d2:	15 83       	std	Z+5, r17	; 0x05
    75d4:	04 83       	std	Z+4, r16	; 0x04
    75d6:	f0 cf       	rjmp	.-32     	; 0x75b8 <normalize+0xc6>
    75d8:	f7 01       	movw	r30, r14
    75da:	80 85       	ldd	r24, Z+8	; 0x08
    75dc:	91 85       	ldd	r25, Z+9	; 0x09
    75de:	8c 30       	cpi	r24, 0x0C	; 12
    75e0:	91 05       	cpc	r25, r1
    75e2:	5c f0       	brlt	.+22     	; 0x75fa <normalize+0x108>
    75e4:	f7 01       	movw	r30, r14
    75e6:	22 85       	ldd	r18, Z+10	; 0x0a
    75e8:	33 85       	ldd	r19, Z+11	; 0x0b
    75ea:	2f 5f       	subi	r18, 0xFF	; 255
    75ec:	3f 4f       	sbci	r19, 0xFF	; 255
    75ee:	33 87       	std	Z+11, r19	; 0x0b
    75f0:	22 87       	std	Z+10, r18	; 0x0a
    75f2:	0c 97       	sbiw	r24, 0x0c	; 12
    75f4:	91 87       	std	Z+9, r25	; 0x09
    75f6:	80 87       	std	Z+8, r24	; 0x08
    75f8:	ef cf       	rjmp	.-34     	; 0x75d8 <normalize+0xe6>
    75fa:	f7 01       	movw	r30, r14
    75fc:	80 85       	ldd	r24, Z+8	; 0x08
    75fe:	91 85       	ldd	r25, Z+9	; 0x09
    7600:	97 ff       	sbrs	r25, 7
    7602:	2d c0       	rjmp	.+90     	; 0x765e <normalize+0x16c>
    7604:	f7 01       	movw	r30, r14
    7606:	22 85       	ldd	r18, Z+10	; 0x0a
    7608:	33 85       	ldd	r19, Z+11	; 0x0b
    760a:	21 50       	subi	r18, 0x01	; 1
    760c:	31 09       	sbc	r19, r1
    760e:	33 87       	std	Z+11, r19	; 0x0b
    7610:	22 87       	std	Z+10, r18	; 0x0a
    7612:	0c 96       	adiw	r24, 0x0c	; 12
    7614:	91 87       	std	Z+9, r25	; 0x09
    7616:	80 87       	std	Z+8, r24	; 0x08
    7618:	f0 cf       	rjmp	.-32     	; 0x75fa <normalize+0x108>
    761a:	f7 01       	movw	r30, r14
    761c:	c6 80       	ldd	r12, Z+6	; 0x06
    761e:	d7 80       	ldd	r13, Z+7	; 0x07
    7620:	a0 84       	ldd	r10, Z+8	; 0x08
    7622:	b1 84       	ldd	r11, Z+9	; 0x09
    7624:	b4 01       	movw	r22, r8
    7626:	c5 01       	movw	r24, r10
    7628:	58 dd       	rcall	.-1360   	; 0x70da <Days_Per_Month>
    762a:	8c 15       	cp	r24, r12
    762c:	9d 05       	cpc	r25, r13
    762e:	84 f5       	brge	.+96     	; 0x7690 <normalize+0x19e>
    7630:	c8 1a       	sub	r12, r24
    7632:	d9 0a       	sbc	r13, r25
    7634:	f7 01       	movw	r30, r14
    7636:	d7 82       	std	Z+7, r13	; 0x07
    7638:	c6 82       	std	Z+6, r12	; 0x06
    763a:	c5 01       	movw	r24, r10
    763c:	01 96       	adiw	r24, 0x01	; 1
    763e:	91 87       	std	Z+9, r25	; 0x09
    7640:	80 87       	std	Z+8, r24	; 0x08
    7642:	0c 97       	sbiw	r24, 0x0c	; 12
    7644:	54 f3       	brlt	.-44     	; 0x761a <normalize+0x128>
    7646:	fb e0       	ldi	r31, 0x0B	; 11
    7648:	af 1a       	sub	r10, r31
    764a:	b1 08       	sbc	r11, r1
    764c:	f7 01       	movw	r30, r14
    764e:	b1 86       	std	Z+9, r11	; 0x09
    7650:	a0 86       	std	Z+8, r10	; 0x08
    7652:	ff ef       	ldi	r31, 0xFF	; 255
    7654:	8f 1a       	sub	r8, r31
    7656:	9f 0a       	sbc	r9, r31
    7658:	f7 01       	movw	r30, r14
    765a:	93 86       	std	Z+11, r9	; 0x0b
    765c:	82 86       	std	Z+10, r8	; 0x0a
    765e:	f7 01       	movw	r30, r14
    7660:	82 84       	ldd	r8, Z+10	; 0x0a
    7662:	93 84       	ldd	r9, Z+11	; 0x0b
    7664:	da cf       	rjmp	.-76     	; 0x761a <normalize+0x128>
    7666:	f7 01       	movw	r30, r14
    7668:	80 85       	ldd	r24, Z+8	; 0x08
    766a:	91 85       	ldd	r25, Z+9	; 0x09
    766c:	9c 01       	movw	r18, r24
    766e:	21 50       	subi	r18, 0x01	; 1
    7670:	31 09       	sbc	r19, r1
    7672:	37 fd       	sbrc	r19, 7
    7674:	16 c0       	rjmp	.+44     	; 0x76a2 <normalize+0x1b0>
    7676:	31 87       	std	Z+9, r19	; 0x09
    7678:	20 87       	std	Z+8, r18	; 0x08
    767a:	f7 01       	movw	r30, r14
    767c:	62 85       	ldd	r22, Z+10	; 0x0a
    767e:	73 85       	ldd	r23, Z+11	; 0x0b
    7680:	80 85       	ldd	r24, Z+8	; 0x08
    7682:	91 85       	ldd	r25, Z+9	; 0x09
    7684:	2a dd       	rcall	.-1452   	; 0x70da <Days_Per_Month>
    7686:	88 0d       	add	r24, r8
    7688:	99 1d       	adc	r25, r9
    768a:	f7 01       	movw	r30, r14
    768c:	97 83       	std	Z+7, r25	; 0x07
    768e:	86 83       	std	Z+6, r24	; 0x06
    7690:	f7 01       	movw	r30, r14
    7692:	86 80       	ldd	r8, Z+6	; 0x06
    7694:	97 80       	ldd	r9, Z+7	; 0x07
    7696:	a2 84       	ldd	r10, Z+10	; 0x0a
    7698:	b3 84       	ldd	r11, Z+11	; 0x0b
    769a:	18 14       	cp	r1, r8
    769c:	19 04       	cpc	r1, r9
    769e:	1c f7       	brge	.-58     	; 0x7666 <normalize+0x174>
    76a0:	0b c0       	rjmp	.+22     	; 0x76b8 <normalize+0x1c6>
    76a2:	0b 96       	adiw	r24, 0x0b	; 11
    76a4:	f7 01       	movw	r30, r14
    76a6:	91 87       	std	Z+9, r25	; 0x09
    76a8:	80 87       	std	Z+8, r24	; 0x08
    76aa:	f1 e0       	ldi	r31, 0x01	; 1
    76ac:	af 1a       	sub	r10, r31
    76ae:	b1 08       	sbc	r11, r1
    76b0:	f7 01       	movw	r30, r14
    76b2:	b3 86       	std	Z+11, r11	; 0x0b
    76b4:	a2 86       	std	Z+10, r10	; 0x0a
    76b6:	e1 cf       	rjmp	.-62     	; 0x767a <normalize+0x188>
    76b8:	a5 01       	movw	r20, r10
    76ba:	44 59       	subi	r20, 0x94	; 148
    76bc:	58 4f       	sbci	r21, 0xF8	; 248
    76be:	58 87       	std	Y+8, r21	; 0x08
    76c0:	4f 83       	std	Y+7, r20	; 0x07
    76c2:	35 01       	movw	r6, r10
    76c4:	56 e4       	ldi	r21, 0x46	; 70
    76c6:	65 1a       	sub	r6, r21
    76c8:	71 08       	sbc	r7, r1
    76ca:	89 e8       	ldi	r24, 0x89	; 137
    76cc:	68 16       	cp	r6, r24
    76ce:	71 04       	cpc	r7, r1
    76d0:	08 f0       	brcs	.+2      	; 0x76d4 <normalize+0x1e2>
    76d2:	9b c0       	rjmp	.+310    	; 0x780a <normalize+0x318>
    76d4:	c0 84       	ldd	r12, Z+8	; 0x08
    76d6:	d1 84       	ldd	r13, Z+9	; 0x09
    76d8:	9c e0       	ldi	r25, 0x0C	; 12
    76da:	c9 16       	cp	r12, r25
    76dc:	d1 04       	cpc	r13, r1
    76de:	08 f0       	brcs	.+2      	; 0x76e2 <normalize+0x1f0>
    76e0:	94 c0       	rjmp	.+296    	; 0x780a <normalize+0x318>
    76e2:	24 01       	movw	r4, r8
    76e4:	e1 e0       	ldi	r30, 0x01	; 1
    76e6:	4e 1a       	sub	r4, r30
    76e8:	51 08       	sbc	r5, r1
    76ea:	6f 81       	ldd	r22, Y+7	; 0x07
    76ec:	78 85       	ldd	r23, Y+8	; 0x08
    76ee:	c6 01       	movw	r24, r12
    76f0:	f4 dc       	rcall	.-1560   	; 0x70da <Days_Per_Month>
    76f2:	48 16       	cp	r4, r24
    76f4:	59 06       	cpc	r5, r25
    76f6:	0c f0       	brlt	.+2      	; 0x76fa <normalize+0x208>
    76f8:	88 c0       	rjmp	.+272    	; 0x780a <normalize+0x318>
    76fa:	08 31       	cpi	r16, 0x18	; 24
    76fc:	11 05       	cpc	r17, r1
    76fe:	0c f0       	brlt	.+2      	; 0x7702 <normalize+0x210>
    7700:	84 c0       	rjmp	.+264    	; 0x780a <normalize+0x318>
    7702:	fc e3       	ldi	r31, 0x3C	; 60
    7704:	2f 16       	cp	r2, r31
    7706:	31 04       	cpc	r3, r1
    7708:	0c f0       	brlt	.+2      	; 0x770c <normalize+0x21a>
    770a:	7f c0       	rjmp	.+254    	; 0x780a <normalize+0x318>
    770c:	4d 81       	ldd	r20, Y+5	; 0x05
    770e:	5e 81       	ldd	r21, Y+6	; 0x06
    7710:	4c 33       	cpi	r20, 0x3C	; 60
    7712:	51 05       	cpc	r21, r1
    7714:	0c f0       	brlt	.+2      	; 0x7718 <normalize+0x226>
    7716:	79 c0       	rjmp	.+242    	; 0x780a <normalize+0x318>
    7718:	2d e6       	ldi	r18, 0x6D	; 109
    771a:	31 e0       	ldi	r19, 0x01	; 1
    771c:	d3 01       	movw	r26, r6
    771e:	0e 94 03 e4 	call	0x1c806	; 0x1c806 <__usmulhisi3>
    7722:	f6 01       	movw	r30, r12
    7724:	ee 0f       	add	r30, r30
    7726:	ff 1f       	adc	r31, r31
    7728:	e3 58       	subi	r30, 0x83	; 131
    772a:	fd 4f       	sbci	r31, 0xFD	; 253
    772c:	20 81       	ld	r18, Z
    772e:	31 81       	ldd	r19, Z+1	; 0x01
    7730:	dc 01       	movw	r26, r24
    7732:	cb 01       	movw	r24, r22
    7734:	82 0f       	add	r24, r18
    7736:	93 1f       	adc	r25, r19
    7738:	a1 1d       	adc	r26, r1
    773a:	b1 1d       	adc	r27, r1
    773c:	05 2c       	mov	r0, r5
    773e:	00 0c       	add	r0, r0
    7740:	66 08       	sbc	r6, r6
    7742:	77 08       	sbc	r7, r7
    7744:	48 0e       	add	r4, r24
    7746:	59 1e       	adc	r5, r25
    7748:	6a 1e       	adc	r6, r26
    774a:	7b 1e       	adc	r7, r27
    774c:	1a 14       	cp	r1, r10
    774e:	1b 04       	cpc	r1, r11
    7750:	1c f4       	brge	.+6      	; 0x7758 <normalize+0x266>
    7752:	51 e0       	ldi	r21, 0x01	; 1
    7754:	a5 1a       	sub	r10, r21
    7756:	b1 08       	sbc	r11, r1
    7758:	45 01       	movw	r8, r10
    775a:	95 94       	asr	r9
    775c:	87 94       	ror	r8
    775e:	95 94       	asr	r9
    7760:	87 94       	ror	r8
    7762:	88 ec       	ldi	r24, 0xC8	; 200
    7764:	a8 16       	cp	r10, r24
    7766:	b1 04       	cpc	r11, r1
    7768:	1c f0       	brlt	.+6      	; 0x7770 <normalize+0x27e>
    776a:	91 e0       	ldi	r25, 0x01	; 1
    776c:	89 1a       	sub	r8, r25
    776e:	91 08       	sbc	r9, r1
    7770:	09 2c       	mov	r0, r9
    7772:	00 0c       	add	r0, r0
    7774:	aa 08       	sbc	r10, r10
    7776:	bb 08       	sbc	r11, r11
    7778:	84 0c       	add	r8, r4
    777a:	95 1c       	adc	r9, r5
    777c:	a6 1c       	adc	r10, r6
    777e:	b7 1c       	adc	r11, r7
    7780:	24 01       	movw	r4, r8
    7782:	35 01       	movw	r6, r10
    7784:	e1 e1       	ldi	r30, 0x11	; 17
    7786:	4e 1a       	sub	r4, r30
    7788:	51 08       	sbc	r5, r1
    778a:	61 08       	sbc	r6, r1
    778c:	71 08       	sbc	r7, r1
    778e:	f2 e0       	ldi	r31, 0x02	; 2
    7790:	cf 16       	cp	r12, r31
    7792:	d1 04       	cpc	r13, r1
    7794:	64 f0       	brlt	.+24     	; 0x77ae <normalize+0x2bc>
    7796:	8f 81       	ldd	r24, Y+7	; 0x07
    7798:	98 85       	ldd	r25, Y+8	; 0x08
    779a:	7a dc       	rcall	.-1804   	; 0x7090 <IS_Leap>
    779c:	89 2b       	or	r24, r25
    779e:	39 f0       	breq	.+14     	; 0x77ae <normalize+0x2bc>
    77a0:	24 01       	movw	r4, r8
    77a2:	35 01       	movw	r6, r10
    77a4:	40 e1       	ldi	r20, 0x10	; 16
    77a6:	44 1a       	sub	r4, r20
    77a8:	51 08       	sbc	r5, r1
    77aa:	61 08       	sbc	r6, r1
    77ac:	71 08       	sbc	r7, r1
    77ae:	a8 e1       	ldi	r26, 0x18	; 24
    77b0:	b0 e0       	ldi	r27, 0x00	; 0
    77b2:	a3 01       	movw	r20, r6
    77b4:	92 01       	movw	r18, r4
    77b6:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    77ba:	01 2e       	mov	r0, r17
    77bc:	00 0c       	add	r0, r0
    77be:	22 0b       	sbc	r18, r18
    77c0:	33 0b       	sbc	r19, r19
    77c2:	a9 01       	movw	r20, r18
    77c4:	98 01       	movw	r18, r16
    77c6:	26 0f       	add	r18, r22
    77c8:	37 1f       	adc	r19, r23
    77ca:	48 1f       	adc	r20, r24
    77cc:	59 1f       	adc	r21, r25
    77ce:	ac e3       	ldi	r26, 0x3C	; 60
    77d0:	b0 e0       	ldi	r27, 0x00	; 0
    77d2:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    77d6:	81 01       	movw	r16, r2
    77d8:	03 2c       	mov	r0, r3
    77da:	00 0c       	add	r0, r0
    77dc:	22 0b       	sbc	r18, r18
    77de:	33 0b       	sbc	r19, r19
    77e0:	a9 01       	movw	r20, r18
    77e2:	98 01       	movw	r18, r16
    77e4:	26 0f       	add	r18, r22
    77e6:	37 1f       	adc	r19, r23
    77e8:	48 1f       	adc	r20, r24
    77ea:	59 1f       	adc	r21, r25
    77ec:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    77f0:	ed 81       	ldd	r30, Y+5	; 0x05
    77f2:	fe 81       	ldd	r31, Y+6	; 0x06
    77f4:	8f 01       	movw	r16, r30
    77f6:	ff 0f       	add	r31, r31
    77f8:	22 0b       	sbc	r18, r18
    77fa:	33 0b       	sbc	r19, r19
    77fc:	48 01       	movw	r8, r16
    77fe:	59 01       	movw	r10, r18
    7800:	86 0e       	add	r8, r22
    7802:	97 1e       	adc	r9, r23
    7804:	a8 1e       	adc	r10, r24
    7806:	b9 1e       	adc	r11, r25
    7808:	04 c0       	rjmp	.+8      	; 0x7812 <normalize+0x320>
    780a:	88 24       	eor	r8, r8
    780c:	8a 94       	dec	r8
    780e:	98 2c       	mov	r9, r8
    7810:	54 01       	movw	r10, r8
    7812:	49 85       	ldd	r20, Y+9	; 0x09
    7814:	5a 85       	ldd	r21, Y+10	; 0x0a
    7816:	45 2b       	or	r20, r21
    7818:	e9 f0       	breq	.+58     	; 0x7854 <normalize+0x362>
    781a:	ce 01       	movw	r24, r28
    781c:	01 96       	adiw	r24, 0x01	; 1
    781e:	7c dd       	rcall	.-1288   	; 0x7318 <gettimezone>
    7820:	a9 81       	ldd	r26, Y+1	; 0x01
    7822:	ba 81       	ldd	r27, Y+2	; 0x02
    7824:	2c e3       	ldi	r18, 0x3C	; 60
    7826:	30 e0       	ldi	r19, 0x00	; 0
    7828:	0e 94 03 e4 	call	0x1c806	; 0x1c806 <__usmulhisi3>
    782c:	2b 01       	movw	r4, r22
    782e:	3c 01       	movw	r6, r24
    7830:	c5 01       	movw	r24, r10
    7832:	b4 01       	movw	r22, r8
    7834:	e2 dd       	rcall	.-1084   	; 0x73fa <is_dst>
    7836:	89 2b       	or	r24, r25
    7838:	51 f0       	breq	.+20     	; 0x784e <normalize+0x35c>
    783a:	50 e1       	ldi	r21, 0x10	; 16
    783c:	45 1a       	sub	r4, r21
    783e:	5e e0       	ldi	r21, 0x0E	; 14
    7840:	55 0a       	sbc	r5, r21
    7842:	61 08       	sbc	r6, r1
    7844:	71 08       	sbc	r7, r1
    7846:	cc 24       	eor	r12, r12
    7848:	c3 94       	inc	r12
    784a:	d1 2c       	mov	r13, r1
    784c:	08 c0       	rjmp	.+16     	; 0x785e <normalize+0x36c>
    784e:	c1 2c       	mov	r12, r1
    7850:	d1 2c       	mov	r13, r1
    7852:	05 c0       	rjmp	.+10     	; 0x785e <normalize+0x36c>
    7854:	c1 2c       	mov	r12, r1
    7856:	d1 2c       	mov	r13, r1
    7858:	41 2c       	mov	r4, r1
    785a:	51 2c       	mov	r5, r1
    785c:	32 01       	movw	r6, r4
    785e:	87 01       	movw	r16, r14
    7860:	a3 01       	movw	r20, r6
    7862:	92 01       	movw	r18, r4
    7864:	c5 01       	movw	r24, r10
    7866:	b4 01       	movw	r22, r8
    7868:	59 dc       	rcall	.-1870   	; 0x711c <time_to_tm>
    786a:	c1 14       	cp	r12, r1
    786c:	d1 04       	cpc	r13, r1
    786e:	29 f0       	breq	.+10     	; 0x787a <normalize+0x388>
    7870:	21 e0       	ldi	r18, 0x01	; 1
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	f7 01       	movw	r30, r14
    7876:	31 8b       	std	Z+17, r19	; 0x11
    7878:	20 8b       	std	Z+16, r18	; 0x10
    787a:	2a 96       	adiw	r28, 0x0a	; 10
    787c:	e2 e1       	ldi	r30, 0x12	; 18
    787e:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00007882 <timegm>:
    7882:	60 e0       	ldi	r22, 0x00	; 0
    7884:	70 e0       	ldi	r23, 0x00	; 0
    7886:	35 ce       	rjmp	.-918    	; 0x74f2 <normalize>
    7888:	08 95       	ret

0000788a <setdate_r>:
    788a:	cf 92       	push	r12
    788c:	df 92       	push	r13
    788e:	ef 92       	push	r14
    7890:	ff 92       	push	r15
    7892:	cf 93       	push	r28
    7894:	df 93       	push	r29
    7896:	cd b7       	in	r28, 0x3d	; 61
    7898:	de b7       	in	r29, 0x3e	; 62
    789a:	a0 97       	sbiw	r28, 0x20	; 32
    789c:	0f b6       	in	r0, 0x3f	; 63
    789e:	f8 94       	cli
    78a0:	de bf       	out	0x3e, r29	; 62
    78a2:	0f be       	out	0x3f, r0	; 63
    78a4:	cd bf       	out	0x3d, r28	; 61
    78a6:	98 a3       	std	Y+32, r25	; 0x20
    78a8:	8f 8f       	std	Y+31, r24	; 0x1f
    78aa:	1a 82       	std	Y+2, r1	; 0x02
    78ac:	19 82       	std	Y+1, r1	; 0x01
    78ae:	1c 82       	std	Y+4, r1	; 0x04
    78b0:	1b 82       	std	Y+3, r1	; 0x03
    78b2:	1e 82       	std	Y+6, r1	; 0x06
    78b4:	1d 82       	std	Y+5, r1	; 0x05
    78b6:	18 86       	std	Y+8, r1	; 0x08
    78b8:	1f 82       	std	Y+7, r1	; 0x07
    78ba:	1a 86       	std	Y+10, r1	; 0x0a
    78bc:	19 86       	std	Y+9, r1	; 0x09
    78be:	1c 86       	std	Y+12, r1	; 0x0c
    78c0:	1b 86       	std	Y+11, r1	; 0x0b
    78c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    78c4:	98 a1       	ldd	r25, Y+32	; 0x20
    78c6:	fc 01       	movw	r30, r24
    78c8:	20 81       	ld	r18, Z
    78ca:	20 32       	cpi	r18, 0x20	; 32
    78cc:	21 f4       	brne	.+8      	; 0x78d6 <setdate_r+0x4c>
    78ce:	01 96       	adiw	r24, 0x01	; 1
    78d0:	98 a3       	std	Y+32, r25	; 0x20
    78d2:	8f 8f       	std	Y+31, r24	; 0x1f
    78d4:	f6 cf       	rjmp	.-20     	; 0x78c2 <setdate_r+0x38>
    78d6:	4a e0       	ldi	r20, 0x0A	; 10
    78d8:	50 e0       	ldi	r21, 0x00	; 0
    78da:	be 01       	movw	r22, r28
    78dc:	61 5e       	subi	r22, 0xE1	; 225
    78de:	7f 4f       	sbci	r23, 0xFF	; 255
    78e0:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    78e4:	7c 87       	std	Y+12, r23	; 0x0c
    78e6:	6b 87       	std	Y+11, r22	; 0x0b
    78e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    78ea:	98 a1       	ldd	r25, Y+32	; 0x20
    78ec:	fc 01       	movw	r30, r24
    78ee:	20 81       	ld	r18, Z
    78f0:	20 32       	cpi	r18, 0x20	; 32
    78f2:	21 f4       	brne	.+8      	; 0x78fc <setdate_r+0x72>
    78f4:	01 96       	adiw	r24, 0x01	; 1
    78f6:	98 a3       	std	Y+32, r25	; 0x20
    78f8:	8f 8f       	std	Y+31, r24	; 0x1f
    78fa:	f6 cf       	rjmp	.-20     	; 0x78e8 <setdate_r+0x5e>
    78fc:	4a e0       	ldi	r20, 0x0A	; 10
    78fe:	50 e0       	ldi	r21, 0x00	; 0
    7900:	be 01       	movw	r22, r28
    7902:	61 5e       	subi	r22, 0xE1	; 225
    7904:	7f 4f       	sbci	r23, 0xFF	; 255
    7906:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    790a:	7a 87       	std	Y+10, r23	; 0x0a
    790c:	69 87       	std	Y+9, r22	; 0x09
    790e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7910:	98 a1       	ldd	r25, Y+32	; 0x20
    7912:	fc 01       	movw	r30, r24
    7914:	20 81       	ld	r18, Z
    7916:	20 32       	cpi	r18, 0x20	; 32
    7918:	21 f4       	brne	.+8      	; 0x7922 <setdate_r+0x98>
    791a:	01 96       	adiw	r24, 0x01	; 1
    791c:	98 a3       	std	Y+32, r25	; 0x20
    791e:	8f 8f       	std	Y+31, r24	; 0x1f
    7920:	f6 cf       	rjmp	.-20     	; 0x790e <setdate_r+0x84>
    7922:	4a e0       	ldi	r20, 0x0A	; 10
    7924:	50 e0       	ldi	r21, 0x00	; 0
    7926:	be 01       	movw	r22, r28
    7928:	61 5e       	subi	r22, 0xE1	; 225
    792a:	7f 4f       	sbci	r23, 0xFF	; 255
    792c:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    7930:	78 87       	std	Y+8, r23	; 0x08
    7932:	6f 83       	std	Y+7, r22	; 0x07
    7934:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7936:	98 a1       	ldd	r25, Y+32	; 0x20
    7938:	fc 01       	movw	r30, r24
    793a:	20 81       	ld	r18, Z
    793c:	20 32       	cpi	r18, 0x20	; 32
    793e:	21 f4       	brne	.+8      	; 0x7948 <setdate_r+0xbe>
    7940:	01 96       	adiw	r24, 0x01	; 1
    7942:	98 a3       	std	Y+32, r25	; 0x20
    7944:	8f 8f       	std	Y+31, r24	; 0x1f
    7946:	f6 cf       	rjmp	.-20     	; 0x7934 <setdate_r+0xaa>
    7948:	4a e0       	ldi	r20, 0x0A	; 10
    794a:	50 e0       	ldi	r21, 0x00	; 0
    794c:	be 01       	movw	r22, r28
    794e:	61 5e       	subi	r22, 0xE1	; 225
    7950:	7f 4f       	sbci	r23, 0xFF	; 255
    7952:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    7956:	7e 83       	std	Y+6, r23	; 0x06
    7958:	6d 83       	std	Y+5, r22	; 0x05
    795a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    795c:	f8 a1       	ldd	r31, Y+32	; 0x20
    795e:	80 81       	ld	r24, Z
    7960:	88 23       	and	r24, r24
    7962:	39 f0       	breq	.+14     	; 0x7972 <setdate_r+0xe8>
    7964:	80 32       	cpi	r24, 0x20	; 32
    7966:	11 f0       	breq	.+4      	; 0x796c <setdate_r+0xe2>
    7968:	8a 33       	cpi	r24, 0x3A	; 58
    796a:	19 f4       	brne	.+6      	; 0x7972 <setdate_r+0xe8>
    796c:	31 96       	adiw	r30, 0x01	; 1
    796e:	f8 a3       	std	Y+32, r31	; 0x20
    7970:	ef 8f       	std	Y+31, r30	; 0x1f
    7972:	4a e0       	ldi	r20, 0x0A	; 10
    7974:	50 e0       	ldi	r21, 0x00	; 0
    7976:	be 01       	movw	r22, r28
    7978:	61 5e       	subi	r22, 0xE1	; 225
    797a:	7f 4f       	sbci	r23, 0xFF	; 255
    797c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    797e:	98 a1       	ldd	r25, Y+32	; 0x20
    7980:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    7984:	7c 83       	std	Y+4, r23	; 0x04
    7986:	6b 83       	std	Y+3, r22	; 0x03
    7988:	ef 8d       	ldd	r30, Y+31	; 0x1f
    798a:	f8 a1       	ldd	r31, Y+32	; 0x20
    798c:	80 81       	ld	r24, Z
    798e:	88 23       	and	r24, r24
    7990:	39 f0       	breq	.+14     	; 0x79a0 <setdate_r+0x116>
    7992:	80 32       	cpi	r24, 0x20	; 32
    7994:	11 f0       	breq	.+4      	; 0x799a <setdate_r+0x110>
    7996:	8a 33       	cpi	r24, 0x3A	; 58
    7998:	19 f4       	brne	.+6      	; 0x79a0 <setdate_r+0x116>
    799a:	31 96       	adiw	r30, 0x01	; 1
    799c:	f8 a3       	std	Y+32, r31	; 0x20
    799e:	ef 8f       	std	Y+31, r30	; 0x1f
    79a0:	4a e0       	ldi	r20, 0x0A	; 10
    79a2:	50 e0       	ldi	r21, 0x00	; 0
    79a4:	be 01       	movw	r22, r28
    79a6:	61 5e       	subi	r22, 0xE1	; 225
    79a8:	7f 4f       	sbci	r23, 0xFF	; 255
    79aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    79ac:	98 a1       	ldd	r25, Y+32	; 0x20
    79ae:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
    79b2:	7a 83       	std	Y+2, r23	; 0x02
    79b4:	69 83       	std	Y+1, r22	; 0x01
    79b6:	29 85       	ldd	r18, Y+9	; 0x09
    79b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    79ba:	21 50       	subi	r18, 0x01	; 1
    79bc:	31 09       	sbc	r19, r1
    79be:	3a 87       	std	Y+10, r19	; 0x0a
    79c0:	29 87       	std	Y+9, r18	; 0x09
    79c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    79c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    79c6:	ac 01       	movw	r20, r24
    79c8:	42 5b       	subi	r20, 0xB2	; 178
    79ca:	57 40       	sbci	r21, 0x07	; 7
    79cc:	45 34       	cpi	r20, 0x45	; 69
    79ce:	51 05       	cpc	r21, r1
    79d0:	28 f0       	brcs	.+10     	; 0x79dc <setdate_r+0x152>
    79d2:	9f 93       	push	r25
    79d4:	8f 93       	push	r24
    79d6:	8c e6       	ldi	r24, 0x6C	; 108
    79d8:	97 e0       	ldi	r25, 0x07	; 7
    79da:	2c c0       	rjmp	.+88     	; 0x7a34 <setdate_r+0x1aa>
    79dc:	8c 56       	subi	r24, 0x6C	; 108
    79de:	97 40       	sbci	r25, 0x07	; 7
    79e0:	9c 87       	std	Y+12, r25	; 0x0c
    79e2:	8b 87       	std	Y+11, r24	; 0x0b
    79e4:	2c 30       	cpi	r18, 0x0C	; 12
    79e6:	31 05       	cpc	r19, r1
    79e8:	28 f0       	brcs	.+10     	; 0x79f4 <setdate_r+0x16a>
    79ea:	9f 93       	push	r25
    79ec:	8f 93       	push	r24
    79ee:	8b e5       	ldi	r24, 0x5B	; 91
    79f0:	97 e0       	ldi	r25, 0x07	; 7
    79f2:	20 c0       	rjmp	.+64     	; 0x7a34 <setdate_r+0x1aa>
    79f4:	8f 81       	ldd	r24, Y+7	; 0x07
    79f6:	98 85       	ldd	r25, Y+8	; 0x08
    79f8:	9c 01       	movw	r18, r24
    79fa:	21 50       	subi	r18, 0x01	; 1
    79fc:	31 09       	sbc	r19, r1
    79fe:	2f 31       	cpi	r18, 0x1F	; 31
    7a00:	31 05       	cpc	r19, r1
    7a02:	28 f0       	brcs	.+10     	; 0x7a0e <setdate_r+0x184>
    7a04:	9f 93       	push	r25
    7a06:	8f 93       	push	r24
    7a08:	8a e4       	ldi	r24, 0x4A	; 74
    7a0a:	97 e0       	ldi	r25, 0x07	; 7
    7a0c:	13 c0       	rjmp	.+38     	; 0x7a34 <setdate_r+0x1aa>
    7a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    7a10:	9e 81       	ldd	r25, Y+6	; 0x06
    7a12:	88 31       	cpi	r24, 0x18	; 24
    7a14:	91 05       	cpc	r25, r1
    7a16:	28 f0       	brcs	.+10     	; 0x7a22 <setdate_r+0x198>
    7a18:	9f 93       	push	r25
    7a1a:	8f 93       	push	r24
    7a1c:	88 e3       	ldi	r24, 0x38	; 56
    7a1e:	97 e0       	ldi	r25, 0x07	; 7
    7a20:	09 c0       	rjmp	.+18     	; 0x7a34 <setdate_r+0x1aa>
    7a22:	8b 81       	ldd	r24, Y+3	; 0x03
    7a24:	9c 81       	ldd	r25, Y+4	; 0x04
    7a26:	8c 33       	cpi	r24, 0x3C	; 60
    7a28:	91 05       	cpc	r25, r1
    7a2a:	78 f0       	brcs	.+30     	; 0x7a4a <setdate_r+0x1c0>
    7a2c:	9f 93       	push	r25
    7a2e:	8f 93       	push	r24
    7a30:	87 e2       	ldi	r24, 0x27	; 39
    7a32:	97 e0       	ldi	r25, 0x07	; 7
    7a34:	1f 92       	push	r1
    7a36:	9f 93       	push	r25
    7a38:	8f 93       	push	r24
    7a3a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7a3e:	0f 90       	pop	r0
    7a40:	0f 90       	pop	r0
    7a42:	0f 90       	pop	r0
    7a44:	0f 90       	pop	r0
    7a46:	0f 90       	pop	r0
    7a48:	25 c0       	rjmp	.+74     	; 0x7a94 <setdate_r+0x20a>
    7a4a:	ce 01       	movw	r24, r28
    7a4c:	01 96       	adiw	r24, 0x01	; 1
    7a4e:	19 df       	rcall	.-462    	; 0x7882 <timegm>
    7a50:	6b 01       	movw	r12, r22
    7a52:	7c 01       	movw	r14, r24
    7a54:	6f 8b       	std	Y+23, r22	; 0x17
    7a56:	78 8f       	std	Y+24, r23	; 0x18
    7a58:	89 8f       	std	Y+25, r24	; 0x19
    7a5a:	9a 8f       	std	Y+26, r25	; 0x1a
    7a5c:	1b 8e       	std	Y+27, r1	; 0x1b
    7a5e:	1c 8e       	std	Y+28, r1	; 0x1c
    7a60:	1d 8e       	std	Y+29, r1	; 0x1d
    7a62:	1e 8e       	std	Y+30, r1	; 0x1e
    7a64:	be 01       	movw	r22, r28
    7a66:	69 5e       	subi	r22, 0xE9	; 233
    7a68:	7f 4f       	sbci	r23, 0xFF	; 255
    7a6a:	80 e0       	ldi	r24, 0x00	; 0
    7a6c:	90 e0       	ldi	r25, 0x00	; 0
    7a6e:	08 db       	rcall	.-2544   	; 0x7080 <clock_settime>
    7a70:	b7 01       	movw	r22, r14
    7a72:	a6 01       	movw	r20, r12
    7a74:	81 e0       	ldi	r24, 0x01	; 1
    7a76:	90 e0       	ldi	r25, 0x00	; 0
    7a78:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <rtc_init>
    7a7c:	81 11       	cpse	r24, r1
    7a7e:	0d c0       	rjmp	.+26     	; 0x7a9a <setdate_r+0x210>
    7a80:	80 e1       	ldi	r24, 0x10	; 16
    7a82:	97 e0       	ldi	r25, 0x07	; 7
    7a84:	1f 92       	push	r1
    7a86:	9f 93       	push	r25
    7a88:	8f 93       	push	r24
    7a8a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7a8e:	0f 90       	pop	r0
    7a90:	0f 90       	pop	r0
    7a92:	0f 90       	pop	r0
    7a94:	8f ef       	ldi	r24, 0xFF	; 255
    7a96:	9f ef       	ldi	r25, 0xFF	; 255
    7a98:	02 c0       	rjmp	.+4      	; 0x7a9e <setdate_r+0x214>
    7a9a:	80 e0       	ldi	r24, 0x00	; 0
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	a0 96       	adiw	r28, 0x20	; 32
    7aa0:	0f b6       	in	r0, 0x3f	; 63
    7aa2:	f8 94       	cli
    7aa4:	de bf       	out	0x3e, r29	; 62
    7aa6:	0f be       	out	0x3f, r0	; 63
    7aa8:	cd bf       	out	0x3d, r28	; 61
    7aaa:	df 91       	pop	r29
    7aac:	cf 91       	pop	r28
    7aae:	ff 90       	pop	r15
    7ab0:	ef 90       	pop	r14
    7ab2:	df 90       	pop	r13
    7ab4:	cf 90       	pop	r12
    7ab6:	08 95       	ret

00007ab8 <setdate>:
    7ab8:	a8 e2       	ldi	r26, 0x28	; 40
    7aba:	b0 e0       	ldi	r27, 0x00	; 0
    7abc:	e2 e6       	ldi	r30, 0x62	; 98
    7abe:	fd e3       	ldi	r31, 0x3D	; 61
    7ac0:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    7ac4:	8e e7       	ldi	r24, 0x7E	; 126
    7ac6:	97 e0       	ldi	r25, 0x07	; 7
    7ac8:	1f 92       	push	r1
    7aca:	9f 93       	push	r25
    7acc:	8f 93       	push	r24
    7ace:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7ad2:	40 91 cd 1c 	lds	r20, 0x1CCD	; 0x801ccd <__iob>
    7ad6:	50 91 ce 1c 	lds	r21, 0x1CCE	; 0x801cce <__iob+0x1>
    7ada:	67 e2       	ldi	r22, 0x27	; 39
    7adc:	70 e0       	ldi	r23, 0x00	; 0
    7ade:	ce 01       	movw	r24, r28
    7ae0:	01 96       	adiw	r24, 0x01	; 1
    7ae2:	0e 94 36 78 	call	0xf06c	; 0xf06c <fgets>
    7ae6:	ce 01       	movw	r24, r28
    7ae8:	01 96       	adiw	r24, 0x01	; 1
    7aea:	cf de       	rcall	.-610    	; 0x788a <setdate_r>
    7aec:	0f 90       	pop	r0
    7aee:	0f 90       	pop	r0
    7af0:	0f 90       	pop	r0
    7af2:	a8 96       	adiw	r28, 0x28	; 40
    7af4:	e2 e0       	ldi	r30, 0x02	; 2
    7af6:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00007afa <find_dst>:
    7afa:	a8 e2       	ldi	r26, 0x28	; 40
    7afc:	b0 e0       	ldi	r27, 0x00	; 0
    7afe:	e3 e8       	ldi	r30, 0x83	; 131
    7b00:	fd e3       	ldi	r31, 0x3D	; 61
    7b02:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    7b06:	3c 01       	movw	r6, r24
    7b08:	1a 01       	movw	r2, r20
    7b0a:	2b 01       	movw	r4, r22
    7b0c:	49 01       	movw	r8, r18
    7b0e:	1c a3       	std	Y+36, r17	; 0x24
    7b10:	0b a3       	std	Y+35, r16	; 0x23
    7b12:	de a2       	std	Y+38, r13	; 0x26
    7b14:	cd a2       	std	Y+37, r12	; 0x25
    7b16:	b8 a6       	std	Y+40, r11	; 0x28
    7b18:	af a2       	std	Y+39, r10	; 0x27
    7b1a:	be 01       	movw	r22, r28
    7b1c:	61 5e       	subi	r22, 0xE1	; 225
    7b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b20:	ce 01       	movw	r24, r28
    7b22:	47 96       	adiw	r24, 0x17	; 23
    7b24:	1b dc       	rcall	.-1994   	; 0x735c <gettimeofday>
    7b26:	af 8d       	ldd	r26, Y+31	; 0x1f
    7b28:	b8 a1       	ldd	r27, Y+32	; 0x20
    7b2a:	2c e3       	ldi	r18, 0x3C	; 60
    7b2c:	30 e0       	ldi	r19, 0x00	; 0
    7b2e:	0e 94 03 e4 	call	0x1c806	; 0x1c806 <__usmulhisi3>
    7b32:	5b 01       	movw	r10, r22
    7b34:	6c 01       	movw	r12, r24
    7b36:	61 14       	cp	r6, r1
    7b38:	71 04       	cpc	r7, r1
    7b3a:	31 f0       	breq	.+12     	; 0x7b48 <find_dst+0x4e>
    7b3c:	20 e1       	ldi	r18, 0x10	; 16
    7b3e:	a2 1a       	sub	r10, r18
    7b40:	2e e0       	ldi	r18, 0x0E	; 14
    7b42:	b2 0a       	sbc	r11, r18
    7b44:	c1 08       	sbc	r12, r1
    7b46:	d1 08       	sbc	r13, r1
    7b48:	81 14       	cp	r8, r1
    7b4a:	91 04       	cpc	r9, r1
    7b4c:	39 f0       	breq	.+14     	; 0x7b5c <find_dst+0x62>
    7b4e:	4c e6       	ldi	r20, 0x6C	; 108
    7b50:	84 1a       	sub	r8, r20
    7b52:	47 e0       	ldi	r20, 0x07	; 7
    7b54:	94 0a       	sbc	r9, r20
    7b56:	9c 86       	std	Y+12, r9	; 0x0c
    7b58:	8b 86       	std	Y+11, r8	; 0x0b
    7b5a:	11 c0       	rjmp	.+34     	; 0x7b7e <find_dst+0x84>
    7b5c:	21 14       	cp	r2, r1
    7b5e:	31 04       	cpc	r3, r1
    7b60:	41 04       	cpc	r4, r1
    7b62:	51 04       	cpc	r5, r1
    7b64:	21 f4       	brne	.+8      	; 0x7b6e <find_dst+0x74>
    7b66:	2f 88       	ldd	r2, Y+23	; 0x17
    7b68:	38 8c       	ldd	r3, Y+24	; 0x18
    7b6a:	49 8c       	ldd	r4, Y+25	; 0x19
    7b6c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7b6e:	8e 01       	movw	r16, r28
    7b70:	0f 5f       	subi	r16, 0xFF	; 255
    7b72:	1f 4f       	sbci	r17, 0xFF	; 255
    7b74:	a6 01       	movw	r20, r12
    7b76:	95 01       	movw	r18, r10
    7b78:	c2 01       	movw	r24, r4
    7b7a:	b1 01       	movw	r22, r2
    7b7c:	cf da       	rcall	.-2658   	; 0x711c <time_to_tm>
    7b7e:	8b a1       	ldd	r24, Y+35	; 0x23
    7b80:	9c a1       	ldd	r25, Y+36	; 0x24
    7b82:	01 97       	sbiw	r24, 0x01	; 1
    7b84:	9a 87       	std	Y+10, r25	; 0x0a
    7b86:	89 87       	std	Y+9, r24	; 0x09
    7b88:	81 e0       	ldi	r24, 0x01	; 1
    7b8a:	90 e0       	ldi	r25, 0x00	; 0
    7b8c:	98 87       	std	Y+8, r25	; 0x08
    7b8e:	8f 83       	std	Y+7, r24	; 0x07
    7b90:	8f a1       	ldd	r24, Y+39	; 0x27
    7b92:	98 a5       	ldd	r25, Y+40	; 0x28
    7b94:	9e 83       	std	Y+6, r25	; 0x06
    7b96:	8d 83       	std	Y+5, r24	; 0x05
    7b98:	1c 82       	std	Y+4, r1	; 0x04
    7b9a:	1b 82       	std	Y+3, r1	; 0x03
    7b9c:	1a 82       	std	Y+2, r1	; 0x02
    7b9e:	19 82       	std	Y+1, r1	; 0x01
    7ba0:	ce 01       	movw	r24, r28
    7ba2:	01 96       	adiw	r24, 0x01	; 1
    7ba4:	6e de       	rcall	.-804    	; 0x7882 <timegm>
    7ba6:	45 01       	movw	r8, r10
    7ba8:	56 01       	movw	r10, r12
    7baa:	86 0e       	add	r8, r22
    7bac:	97 1e       	adc	r9, r23
    7bae:	a8 1e       	adc	r10, r24
    7bb0:	b9 1e       	adc	r11, r25
    7bb2:	8e 01       	movw	r16, r28
    7bb4:	0f 5f       	subi	r16, 0xFF	; 255
    7bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    7bb8:	20 e0       	ldi	r18, 0x00	; 0
    7bba:	30 e0       	ldi	r19, 0x00	; 0
    7bbc:	a9 01       	movw	r20, r18
    7bbe:	c5 01       	movw	r24, r10
    7bc0:	b4 01       	movw	r22, r8
    7bc2:	ac da       	rcall	.-2728   	; 0x711c <time_to_tm>
    7bc4:	2d 85       	ldd	r18, Y+13	; 0x0d
    7bc6:	3e 85       	ldd	r19, Y+14	; 0x0e
    7bc8:	e7 e0       	ldi	r30, 0x07	; 7
    7bca:	f0 e0       	ldi	r31, 0x00	; 0
    7bcc:	c9 01       	movw	r24, r18
    7bce:	bf 01       	movw	r22, r30
    7bd0:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__divmodhi4>
    7bd4:	4d a1       	ldd	r20, Y+37	; 0x25
    7bd6:	5e a1       	ldd	r21, Y+38	; 0x26
    7bd8:	48 17       	cp	r20, r24
    7bda:	59 07       	cpc	r21, r25
    7bdc:	21 f4       	brne	.+8      	; 0x7be6 <find_dst+0xec>
    7bde:	51 e0       	ldi	r21, 0x01	; 1
    7be0:	e5 1a       	sub	r14, r21
    7be2:	f1 08       	sbc	r15, r1
    7be4:	51 f0       	breq	.+20     	; 0x7bfa <find_dst+0x100>
    7be6:	80 e8       	ldi	r24, 0x80	; 128
    7be8:	88 0e       	add	r8, r24
    7bea:	81 e5       	ldi	r24, 0x51	; 81
    7bec:	98 1e       	adc	r9, r24
    7bee:	81 e0       	ldi	r24, 0x01	; 1
    7bf0:	a8 1e       	adc	r10, r24
    7bf2:	b1 1c       	adc	r11, r1
    7bf4:	2f 5f       	subi	r18, 0xFF	; 255
    7bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    7bf8:	e9 cf       	rjmp	.-46     	; 0x7bcc <find_dst+0xd2>
    7bfa:	c5 01       	movw	r24, r10
    7bfc:	b4 01       	movw	r22, r8
    7bfe:	a8 96       	adiw	r28, 0x28	; 40
    7c00:	e2 e1       	ldi	r30, 0x12	; 18
    7c02:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00007c06 <set_dst>:
    7c06:	4f 92       	push	r4
    7c08:	5f 92       	push	r5
    7c0a:	6f 92       	push	r6
    7c0c:	7f 92       	push	r7
    7c0e:	af 92       	push	r10
    7c10:	bf 92       	push	r11
    7c12:	cf 92       	push	r12
    7c14:	df 92       	push	r13
    7c16:	ef 92       	push	r14
    7c18:	ff 92       	push	r15
    7c1a:	0f 93       	push	r16
    7c1c:	1f 93       	push	r17
    7c1e:	cf 93       	push	r28
    7c20:	df 93       	push	r29
    7c22:	cd b7       	in	r28, 0x3d	; 61
    7c24:	de b7       	in	r29, 0x3e	; 62
    7c26:	2c 97       	sbiw	r28, 0x0c	; 12
    7c28:	0f b6       	in	r0, 0x3f	; 63
    7c2a:	f8 94       	cli
    7c2c:	de bf       	out	0x3e, r29	; 62
    7c2e:	0f be       	out	0x3f, r0	; 63
    7c30:	cd bf       	out	0x3d, r28	; 61
    7c32:	2b 01       	movw	r4, r22
    7c34:	3c 01       	movw	r6, r24
    7c36:	67 2b       	or	r22, r23
    7c38:	68 2b       	or	r22, r24
    7c3a:	69 2b       	or	r22, r25
    7c3c:	51 f4       	brne	.+20     	; 0x7c52 <set_dst+0x4c>
    7c3e:	be 01       	movw	r22, r28
    7c40:	67 5f       	subi	r22, 0xF7	; 247
    7c42:	7f 4f       	sbci	r23, 0xFF	; 255
    7c44:	ce 01       	movw	r24, r28
    7c46:	01 96       	adiw	r24, 0x01	; 1
    7c48:	89 db       	rcall	.-2286   	; 0x735c <gettimeofday>
    7c4a:	49 80       	ldd	r4, Y+1	; 0x01
    7c4c:	5a 80       	ldd	r5, Y+2	; 0x02
    7c4e:	6b 80       	ldd	r6, Y+3	; 0x03
    7c50:	7c 80       	ldd	r7, Y+4	; 0x04
    7c52:	80 91 84 1a 	lds	r24, 0x1A84	; 0x801a84 <dst+0x8>
    7c56:	90 91 85 1a 	lds	r25, 0x1A85	; 0x801a85 <dst+0x9>
    7c5a:	a0 91 86 1a 	lds	r26, 0x1A86	; 0x801a86 <dst+0xa>
    7c5e:	b0 91 87 1a 	lds	r27, 0x1A87	; 0x801a87 <dst+0xb>
    7c62:	84 15       	cp	r24, r4
    7c64:	95 05       	cpc	r25, r5
    7c66:	a6 05       	cpc	r26, r6
    7c68:	b7 05       	cpc	r27, r7
    7c6a:	50 f0       	brcs	.+20     	; 0x7c80 <set_dst+0x7a>
    7c6c:	84 19       	sub	r24, r4
    7c6e:	95 09       	sbc	r25, r5
    7c70:	a6 09       	sbc	r26, r6
    7c72:	b7 09       	sbc	r27, r7
    7c74:	80 38       	cpi	r24, 0x80	; 128
    7c76:	91 45       	sbci	r25, 0x51	; 81
    7c78:	a1 40       	sbci	r26, 0x01	; 1
    7c7a:	b1 05       	cpc	r27, r1
    7c7c:	70 f4       	brcc	.+28     	; 0x7c9a <set_dst+0x94>
    7c7e:	42 c0       	rjmp	.+132    	; 0x7d04 <set_dst+0xfe>
    7c80:	a3 01       	movw	r20, r6
    7c82:	92 01       	movw	r18, r4
    7c84:	28 1b       	sub	r18, r24
    7c86:	39 0b       	sbc	r19, r25
    7c88:	4a 0b       	sbc	r20, r26
    7c8a:	5b 0b       	sbc	r21, r27
    7c8c:	da 01       	movw	r26, r20
    7c8e:	c9 01       	movw	r24, r18
    7c90:	80 38       	cpi	r24, 0x80	; 128
    7c92:	91 45       	sbci	r25, 0x51	; 81
    7c94:	a1 40       	sbci	r26, 0x01	; 1
    7c96:	b1 05       	cpc	r27, r1
    7c98:	a8 f1       	brcs	.+106    	; 0x7d04 <set_dst+0xfe>
    7c9a:	40 92 84 1a 	sts	0x1A84, r4	; 0x801a84 <dst+0x8>
    7c9e:	50 92 85 1a 	sts	0x1A85, r5	; 0x801a85 <dst+0x9>
    7ca2:	60 92 86 1a 	sts	0x1A86, r6	; 0x801a86 <dst+0xa>
    7ca6:	70 92 87 1a 	sts	0x1A87, r7	; 0x801a87 <dst+0xb>
    7caa:	82 e0       	ldi	r24, 0x02	; 2
    7cac:	a8 2e       	mov	r10, r24
    7cae:	b1 2c       	mov	r11, r1
    7cb0:	c1 2c       	mov	r12, r1
    7cb2:	d1 2c       	mov	r13, r1
    7cb4:	92 e0       	ldi	r25, 0x02	; 2
    7cb6:	e9 2e       	mov	r14, r25
    7cb8:	f1 2c       	mov	r15, r1
    7cba:	03 e0       	ldi	r16, 0x03	; 3
    7cbc:	10 e0       	ldi	r17, 0x00	; 0
    7cbe:	20 e0       	ldi	r18, 0x00	; 0
    7cc0:	30 e0       	ldi	r19, 0x00	; 0
    7cc2:	b3 01       	movw	r22, r6
    7cc4:	a2 01       	movw	r20, r4
    7cc6:	80 e0       	ldi	r24, 0x00	; 0
    7cc8:	90 e0       	ldi	r25, 0x00	; 0
    7cca:	17 df       	rcall	.-466    	; 0x7afa <find_dst>
    7ccc:	60 93 7c 1a 	sts	0x1A7C, r22	; 0x801a7c <dst>
    7cd0:	70 93 7d 1a 	sts	0x1A7D, r23	; 0x801a7d <dst+0x1>
    7cd4:	80 93 7e 1a 	sts	0x1A7E, r24	; 0x801a7e <dst+0x2>
    7cd8:	90 93 7f 1a 	sts	0x1A7F, r25	; 0x801a7f <dst+0x3>
    7cdc:	ee 24       	eor	r14, r14
    7cde:	e3 94       	inc	r14
    7ce0:	f1 2c       	mov	r15, r1
    7ce2:	0b e0       	ldi	r16, 0x0B	; 11
    7ce4:	10 e0       	ldi	r17, 0x00	; 0
    7ce6:	20 e0       	ldi	r18, 0x00	; 0
    7ce8:	30 e0       	ldi	r19, 0x00	; 0
    7cea:	b3 01       	movw	r22, r6
    7cec:	a2 01       	movw	r20, r4
    7cee:	81 e0       	ldi	r24, 0x01	; 1
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	03 df       	rcall	.-506    	; 0x7afa <find_dst>
    7cf4:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst+0x4>
    7cf8:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x5>
    7cfc:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x6>
    7d00:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x7>
    7d04:	2c 96       	adiw	r28, 0x0c	; 12
    7d06:	0f b6       	in	r0, 0x3f	; 63
    7d08:	f8 94       	cli
    7d0a:	de bf       	out	0x3e, r29	; 62
    7d0c:	0f be       	out	0x3f, r0	; 63
    7d0e:	cd bf       	out	0x3d, r28	; 61
    7d10:	df 91       	pop	r29
    7d12:	cf 91       	pop	r28
    7d14:	1f 91       	pop	r17
    7d16:	0f 91       	pop	r16
    7d18:	ff 90       	pop	r15
    7d1a:	ef 90       	pop	r14
    7d1c:	df 90       	pop	r13
    7d1e:	cf 90       	pop	r12
    7d20:	bf 90       	pop	r11
    7d22:	af 90       	pop	r10
    7d24:	7f 90       	pop	r7
    7d26:	6f 90       	pop	r6
    7d28:	5f 90       	pop	r5
    7d2a:	4f 90       	pop	r4
    7d2c:	08 95       	ret

00007d2e <asctime_r>:
    7d2e:	0f 93       	push	r16
    7d30:	1f 93       	push	r17
    7d32:	cf 93       	push	r28
    7d34:	df 93       	push	r29
    7d36:	ec 01       	movw	r28, r24
    7d38:	8b 01       	movw	r16, r22
    7d3a:	60 e0       	ldi	r22, 0x00	; 0
    7d3c:	70 e0       	ldi	r23, 0x00	; 0
    7d3e:	d9 db       	rcall	.-2126   	; 0x74f2 <normalize>
    7d40:	20 e2       	ldi	r18, 0x20	; 32
    7d42:	d8 01       	movw	r26, r16
    7d44:	82 2f       	mov	r24, r18
    7d46:	1d 92       	st	X+, r1
    7d48:	8a 95       	dec	r24
    7d4a:	e9 f7       	brne	.-6      	; 0x7d46 <asctime_r+0x18>
    7d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d50:	84 59       	subi	r24, 0x94	; 148
    7d52:	98 4f       	sbci	r25, 0xF8	; 248
    7d54:	9f 93       	push	r25
    7d56:	8f 93       	push	r24
    7d58:	89 81       	ldd	r24, Y+1	; 0x01
    7d5a:	8f 93       	push	r24
    7d5c:	88 81       	ld	r24, Y
    7d5e:	8f 93       	push	r24
    7d60:	8b 81       	ldd	r24, Y+3	; 0x03
    7d62:	8f 93       	push	r24
    7d64:	8a 81       	ldd	r24, Y+2	; 0x02
    7d66:	8f 93       	push	r24
    7d68:	8d 81       	ldd	r24, Y+5	; 0x05
    7d6a:	8f 93       	push	r24
    7d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    7d6e:	8f 93       	push	r24
    7d70:	8f 81       	ldd	r24, Y+7	; 0x07
    7d72:	8f 93       	push	r24
    7d74:	8e 81       	ldd	r24, Y+6	; 0x06
    7d76:	8f 93       	push	r24
    7d78:	e8 85       	ldd	r30, Y+8	; 0x08
    7d7a:	f9 85       	ldd	r31, Y+9	; 0x09
    7d7c:	ee 0f       	add	r30, r30
    7d7e:	ff 1f       	adc	r31, r31
    7d80:	ee 5e       	subi	r30, 0xEE	; 238
    7d82:	fe 4f       	sbci	r31, 0xFE	; 254
    7d84:	81 81       	ldd	r24, Z+1	; 0x01
    7d86:	8f 93       	push	r24
    7d88:	80 81       	ld	r24, Z
    7d8a:	8f 93       	push	r24
    7d8c:	ec 85       	ldd	r30, Y+12	; 0x0c
    7d8e:	fd 85       	ldd	r31, Y+13	; 0x0d
    7d90:	ee 0f       	add	r30, r30
    7d92:	ff 1f       	adc	r31, r31
    7d94:	e4 5d       	subi	r30, 0xD4	; 212
    7d96:	fe 4f       	sbci	r31, 0xFE	; 254
    7d98:	81 81       	ldd	r24, Z+1	; 0x01
    7d9a:	8f 93       	push	r24
    7d9c:	80 81       	ld	r24, Z
    7d9e:	8f 93       	push	r24
    7da0:	8f e9       	ldi	r24, 0x9F	; 159
    7da2:	97 e0       	ldi	r25, 0x07	; 7
    7da4:	1f 92       	push	r1
    7da6:	9f 93       	push	r25
    7da8:	8f 93       	push	r24
    7daa:	1f 92       	push	r1
    7dac:	2f 93       	push	r18
    7dae:	1f 93       	push	r17
    7db0:	0f 93       	push	r16
    7db2:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <snprintf_P>
    7db6:	ad b7       	in	r26, 0x3d	; 61
    7db8:	be b7       	in	r27, 0x3e	; 62
    7dba:	55 96       	adiw	r26, 0x15	; 21
    7dbc:	0f b6       	in	r0, 0x3f	; 63
    7dbe:	f8 94       	cli
    7dc0:	be bf       	out	0x3e, r27	; 62
    7dc2:	0f be       	out	0x3f, r0	; 63
    7dc4:	ad bf       	out	0x3d, r26	; 61
    7dc6:	c8 01       	movw	r24, r16
    7dc8:	df 91       	pop	r29
    7dca:	cf 91       	pop	r28
    7dcc:	1f 91       	pop	r17
    7dce:	0f 91       	pop	r16
    7dd0:	08 95       	ret

00007dd2 <asctime>:
    7dd2:	62 e1       	ldi	r22, 0x12	; 18
    7dd4:	78 e1       	ldi	r23, 0x18	; 24
    7dd6:	ab cf       	rjmp	.-170    	; 0x7d2e <asctime_r>
    7dd8:	08 95       	ret

00007dda <ctime_gm>:
    7dda:	a6 e1       	ldi	r26, 0x16	; 22
    7ddc:	b0 e0       	ldi	r27, 0x00	; 0
    7dde:	e3 ef       	ldi	r30, 0xF3	; 243
    7de0:	fe e3       	ldi	r31, 0x3E	; 62
    7de2:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    7de6:	be 01       	movw	r22, r28
    7de8:	6f 5f       	subi	r22, 0xFF	; 255
    7dea:	7f 4f       	sbci	r23, 0xFF	; 255
    7dec:	75 da       	rcall	.-2838   	; 0x72d8 <gmtime_r>
    7dee:	62 ed       	ldi	r22, 0xD2	; 210
    7df0:	77 e1       	ldi	r23, 0x17	; 23
    7df2:	9d df       	rcall	.-198    	; 0x7d2e <asctime_r>
    7df4:	66 96       	adiw	r28, 0x16	; 22
    7df6:	e2 e0       	ldi	r30, 0x02	; 2
    7df8:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00007dfc <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7dfc:	a2 e2       	ldi	r26, 0x22	; 34
    7dfe:	b0 e0       	ldi	r27, 0x00	; 0
    7e00:	e4 e0       	ldi	r30, 0x04	; 4
    7e02:	ff e3       	ldi	r31, 0x3F	; 63
    7e04:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    7e08:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7e0a:	40 e0       	ldi	r20, 0x00	; 0
    7e0c:	50 e0       	ldi	r21, 0x00	; 0
    7e0e:	ba 01       	movw	r22, r20
    7e10:	80 e0       	ldi	r24, 0x00	; 0
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <rtc_init>
    7e18:	81 11       	cpse	r24, r1
    7e1a:	27 c0       	rjmp	.+78     	; 0x7e6a <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7e1c:	8a e9       	ldi	r24, 0x9A	; 154
    7e1e:	96 e0       	ldi	r25, 0x06	; 6
    7e20:	1f 92       	push	r1
    7e22:	9f 93       	push	r25
    7e24:	8f 93       	push	r24
    7e26:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        printf("attempting rtc init\n");
    7e2a:	85 e8       	ldi	r24, 0x85	; 133
    7e2c:	96 e0       	ldi	r25, 0x06	; 6
    7e2e:	1f 92       	push	r1
    7e30:	9f 93       	push	r25
    7e32:	8f 93       	push	r24
    7e34:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7e38:	40 e0       	ldi	r20, 0x00	; 0
    7e3a:	50 e0       	ldi	r21, 0x00	; 0
    7e3c:	ba 01       	movw	r22, r20
    7e3e:	81 e0       	ldi	r24, 0x01	; 1
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <rtc_init>
    7e46:	0f 90       	pop	r0
    7e48:	0f 90       	pop	r0
    7e4a:	0f 90       	pop	r0
    7e4c:	0f 90       	pop	r0
    7e4e:	0f 90       	pop	r0
    7e50:	0f 90       	pop	r0
    7e52:	81 11       	cpse	r24, r1
    7e54:	0a c0       	rjmp	.+20     	; 0x7e6a <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7e56:	8e e6       	ldi	r24, 0x6E	; 110
    7e58:	96 e0       	ldi	r25, 0x06	; 6
    7e5a:	1f 92       	push	r1
    7e5c:	9f 93       	push	r25
    7e5e:	8f 93       	push	r24
    7e60:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7e64:	0f 90       	pop	r0
    7e66:	0f 90       	pop	r0
    7e68:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7e6a:	ce 01       	movw	r24, r28
    7e6c:	01 96       	adiw	r24, 0x01	; 1
    7e6e:	0e 94 1e 31 	call	0x623c	; 0x623c <rtc_read>
    7e72:	88 23       	and	r24, r24
    7e74:	51 f0       	breq	.+20     	; 0x7e8a <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7e76:	ce 01       	movw	r24, r28
    7e78:	01 96       	adiw	r24, 0x01	; 1
    7e7a:	03 dd       	rcall	.-1530   	; 0x7882 <timegm>
    7e7c:	6b 01       	movw	r12, r22
    7e7e:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7e80:	67 2b       	or	r22, r23
    7e82:	68 2b       	or	r22, r24
    7e84:	69 2b       	or	r22, r25
    7e86:	c1 f4       	brne	.+48     	; 0x7eb8 <initialize_clock+0xbc>
    7e88:	0a c0       	rjmp	.+20     	; 0x7e9e <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7e8a:	84 e5       	ldi	r24, 0x54	; 84
    7e8c:	96 e0       	ldi	r25, 0x06	; 6
    7e8e:	1f 92       	push	r1
    7e90:	9f 93       	push	r25
    7e92:	8f 93       	push	r24
    7e94:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7e98:	0f 90       	pop	r0
    7e9a:	0f 90       	pop	r0
    7e9c:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7e9e:	80 e3       	ldi	r24, 0x30	; 48
    7ea0:	96 e0       	ldi	r25, 0x06	; 6
    7ea2:	1f 92       	push	r1
    7ea4:	9f 93       	push	r25
    7ea6:	8f 93       	push	r24
    7ea8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7eac:	0f 90       	pop	r0
    7eae:	0f 90       	pop	r0
    7eb0:	0f 90       	pop	r0
    7eb2:	c1 2c       	mov	r12, r1
    7eb4:	d1 2c       	mov	r13, r1
    7eb6:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7eb8:	18 a3       	std	Y+32, r17	; 0x20
    7eba:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7ebc:	1a a2       	std	Y+34, r1	; 0x22
    7ebe:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7ec0:	ce 01       	movw	r24, r28
    7ec2:	4f 96       	adiw	r24, 0x1f	; 31
    7ec4:	3a da       	rcall	.-2956   	; 0x733a <settimezone>

    ts.tv_sec = seconds;
    7ec6:	cf 8a       	std	Y+23, r12	; 0x17
    7ec8:	d8 8e       	std	Y+24, r13	; 0x18
    7eca:	e9 8e       	std	Y+25, r14	; 0x19
    7ecc:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7ece:	1b 8e       	std	Y+27, r1	; 0x1b
    7ed0:	1c 8e       	std	Y+28, r1	; 0x1c
    7ed2:	1d 8e       	std	Y+29, r1	; 0x1d
    7ed4:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7ed6:	be 01       	movw	r22, r28
    7ed8:	69 5e       	subi	r22, 0xE9	; 233
    7eda:	7f 4f       	sbci	r23, 0xFF	; 255
    7edc:	80 e0       	ldi	r24, 0x00	; 0
    7ede:	90 e0       	ldi	r25, 0x00	; 0
    7ee0:	cf d8       	rcall	.-3682   	; 0x7080 <clock_settime>
}
    7ee2:	a2 96       	adiw	r28, 0x22	; 34
    7ee4:	e8 e0       	ldi	r30, 0x08	; 8
    7ee6:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

00007eea <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7eea:	a2 e2       	ldi	r26, 0x22	; 34
    7eec:	b0 e0       	ldi	r27, 0x00	; 0
    7eee:	eb e7       	ldi	r30, 0x7B	; 123
    7ef0:	ff e3       	ldi	r31, 0x3F	; 63
    7ef2:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7ef6:	ce 01       	movw	r24, r28
    7ef8:	01 96       	adiw	r24, 0x01	; 1
    7efa:	0e 94 1e 31 	call	0x623c	; 0x623c <rtc_read>
    7efe:	88 23       	and	r24, r24
    7f00:	21 f1       	breq	.+72     	; 0x7f4a <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7f02:	ce 01       	movw	r24, r28
    7f04:	01 96       	adiw	r24, 0x01	; 1
    7f06:	bd dc       	rcall	.-1670   	; 0x7882 <timegm>
    7f08:	6f 8f       	std	Y+31, r22	; 0x1f
    7f0a:	78 a3       	std	Y+32, r23	; 0x20
    7f0c:	89 a3       	std	Y+33, r24	; 0x21
    7f0e:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7f10:	9f 93       	push	r25
    7f12:	8f 93       	push	r24
    7f14:	7f 93       	push	r23
    7f16:	6f 93       	push	r22
    7f18:	8e e1       	ldi	r24, 0x1E	; 30
    7f1a:	96 e0       	ldi	r25, 0x06	; 6
    7f1c:	1f 92       	push	r1
    7f1e:	9f 93       	push	r25
    7f20:	8f 93       	push	r24
    7f22:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7f26:	ce 01       	movw	r24, r28
    7f28:	01 96       	adiw	r24, 0x01	; 1
    7f2a:	53 df       	rcall	.-346    	; 0x7dd2 <asctime>
    7f2c:	9f 93       	push	r25
    7f2e:	8f 93       	push	r24
    7f30:	8d e0       	ldi	r24, 0x0D	; 13
    7f32:	96 e0       	ldi	r25, 0x06	; 6
    7f34:	1f 92       	push	r1
    7f36:	9f 93       	push	r25
    7f38:	8f 93       	push	r24
    7f3a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7f3e:	0f b6       	in	r0, 0x3f	; 63
    7f40:	f8 94       	cli
    7f42:	de bf       	out	0x3e, r29	; 62
    7f44:	0f be       	out	0x3f, r0	; 63
    7f46:	cd bf       	out	0x3d, r28	; 61
    7f48:	0a c0       	rjmp	.+20     	; 0x7f5e <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7f4a:	8c ef       	ldi	r24, 0xFC	; 252
    7f4c:	95 e0       	ldi	r25, 0x05	; 5
    7f4e:	1f 92       	push	r1
    7f50:	9f 93       	push	r25
    7f52:	8f 93       	push	r24
    7f54:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    7f58:	0f 90       	pop	r0
    7f5a:	0f 90       	pop	r0
    7f5c:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7f5e:	be 01       	movw	r22, r28
    7f60:	69 5e       	subi	r22, 0xE9	; 233
    7f62:	7f 4f       	sbci	r23, 0xFF	; 255
    7f64:	80 e0       	ldi	r24, 0x00	; 0
    7f66:	90 e0       	ldi	r25, 0x00	; 0
    7f68:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <clock_gettime>
    seconds = ts.tv_sec;
    7f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    7f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    7f70:	29 8d       	ldd	r18, Y+25	; 0x19
    7f72:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7f74:	8f 8f       	std	Y+31, r24	; 0x1f
    7f76:	98 a3       	std	Y+32, r25	; 0x20
    7f78:	29 a3       	std	Y+33, r18	; 0x21
    7f7a:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7f7c:	3f 93       	push	r19
    7f7e:	2f 93       	push	r18
    7f80:	9f 93       	push	r25
    7f82:	8f 93       	push	r24
    7f84:	8a ee       	ldi	r24, 0xEA	; 234
    7f86:	95 e0       	ldi	r25, 0x05	; 5
    7f88:	1f 92       	push	r1
    7f8a:	9f 93       	push	r25
    7f8c:	8f 93       	push	r24
    7f8e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7f92:	ce 01       	movw	r24, r28
    7f94:	4f 96       	adiw	r24, 0x1f	; 31
    7f96:	b5 d9       	rcall	.-3222   	; 0x7302 <gmtime>
    7f98:	1c df       	rcall	.-456    	; 0x7dd2 <asctime>
    7f9a:	9f 93       	push	r25
    7f9c:	8f 93       	push	r24
    7f9e:	89 ed       	ldi	r24, 0xD9	; 217
    7fa0:	95 e0       	ldi	r25, 0x05	; 5
    7fa2:	1f 92       	push	r1
    7fa4:	9f 93       	push	r25
    7fa6:	8f 93       	push	r24
    7fa8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
    7fac:	0f b6       	in	r0, 0x3f	; 63
    7fae:	f8 94       	cli
    7fb0:	de bf       	out	0x3e, r29	; 62
    7fb2:	0f be       	out	0x3f, r0	; 63
    7fb4:	cd bf       	out	0x3d, r28	; 61
    7fb6:	a2 96       	adiw	r28, 0x22	; 34
    7fb8:	e2 e0       	ldi	r30, 0x02	; 2
    7fba:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00007fbe <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7fbe:	fc 01       	movw	r30, r24
    7fc0:	84 81       	ldd	r24, Z+4	; 0x04
    7fc2:	95 81       	ldd	r25, Z+5	; 0x05
    7fc4:	00 97       	sbiw	r24, 0x00	; 0
    7fc6:	79 f0       	breq	.+30     	; 0x7fe6 <_putc_buffer_fn+0x28>
    7fc8:	66 23       	and	r22, r22
    7fca:	69 f0       	breq	.+26     	; 0x7fe6 <_putc_buffer_fn+0x28>
    7fcc:	01 97       	sbiw	r24, 0x01	; 1
    7fce:	95 83       	std	Z+5, r25	; 0x05
    7fd0:	84 83       	std	Z+4, r24	; 0x04
    7fd2:	86 81       	ldd	r24, Z+6	; 0x06
    7fd4:	97 81       	ldd	r25, Z+7	; 0x07
    7fd6:	01 96       	adiw	r24, 0x01	; 1
    7fd8:	97 83       	std	Z+7, r25	; 0x07
    7fda:	86 83       	std	Z+6, r24	; 0x06
    7fdc:	a2 81       	ldd	r26, Z+2	; 0x02
    7fde:	b3 81       	ldd	r27, Z+3	; 0x03
    7fe0:	6d 93       	st	X+, r22
    7fe2:	b3 83       	std	Z+3, r27	; 0x03
    7fe4:	a2 83       	std	Z+2, r26	; 0x02
    7fe6:	02 80       	ldd	r0, Z+2	; 0x02
    7fe8:	f3 81       	ldd	r31, Z+3	; 0x03
    7fea:	e0 2d       	mov	r30, r0
    7fec:	10 82       	st	Z, r1
    7fee:	08 95       	ret

00007ff0 <_putc_fn>:
    7ff0:	fc 01       	movw	r30, r24
    7ff2:	26 81       	ldd	r18, Z+6	; 0x06
    7ff4:	37 81       	ldd	r19, Z+7	; 0x07
    7ff6:	2f 5f       	subi	r18, 0xFF	; 255
    7ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    7ffa:	37 83       	std	Z+7, r19	; 0x07
    7ffc:	26 83       	std	Z+6, r18	; 0x06
    7ffe:	86 2f       	mov	r24, r22
    8000:	90 e0       	ldi	r25, 0x00	; 0
    8002:	0c 94 30 78 	jmp	0xf060	; 0xf060 <putchar>
    8006:	08 95       	ret

00008008 <bin2num>:
    8008:	a0 e0       	ldi	r26, 0x00	; 0
    800a:	b0 e0       	ldi	r27, 0x00	; 0
    800c:	ea e0       	ldi	r30, 0x0A	; 10
    800e:	f0 e4       	ldi	r31, 0x40	; 64
    8010:	0c 94 30 e4 	jmp	0x1c860	; 0x1c860 <__prologue_saves__+0xe>
    8014:	ea 01       	movw	r28, r20
    8016:	53 e0       	ldi	r21, 0x03	; 3
    8018:	ee 0c       	add	r14, r14
    801a:	ff 1c       	adc	r15, r15
    801c:	5a 95       	dec	r21
    801e:	e1 f7       	brne	.-8      	; 0x8018 <bin2num+0x10>
    8020:	fc 01       	movw	r30, r24
    8022:	af 01       	movw	r20, r30
    8024:	48 1b       	sub	r20, r24
    8026:	59 0b       	sbc	r21, r25
    8028:	c4 17       	cp	r28, r20
    802a:	d5 07       	cpc	r29, r21
    802c:	14 f0       	brlt	.+4      	; 0x8032 <bin2num+0x2a>
    802e:	11 92       	st	Z+, r1
    8030:	f8 cf       	rjmp	.-16     	; 0x8022 <bin2num+0x1a>
    8032:	41 e0       	ldi	r20, 0x01	; 1
    8034:	e4 1a       	sub	r14, r20
    8036:	f1 08       	sbc	r15, r1
    8038:	5b 01       	movw	r10, r22
    803a:	42 e0       	ldi	r20, 0x02	; 2
    803c:	a4 1a       	sub	r10, r20
    803e:	b1 08       	sbc	r11, r1
    8040:	f7 fc       	sbrc	r15, 7
    8042:	3b c0       	rjmp	.+118    	; 0x80ba <bin2num+0xb2>
    8044:	f7 01       	movw	r30, r14
    8046:	43 e0       	ldi	r20, 0x03	; 3
    8048:	f5 95       	asr	r31
    804a:	e7 95       	ror	r30
    804c:	4a 95       	dec	r20
    804e:	e1 f7       	brne	.-8      	; 0x8048 <bin2num+0x40>
    8050:	e0 0f       	add	r30, r16
    8052:	f1 1f       	adc	r31, r17
    8054:	40 81       	ld	r20, Z
    8056:	50 e0       	ldi	r21, 0x00	; 0
    8058:	f7 01       	movw	r30, r14
    805a:	e7 70       	andi	r30, 0x07	; 7
    805c:	ff 27       	eor	r31, r31
    805e:	02 c0       	rjmp	.+4      	; 0x8064 <bin2num+0x5c>
    8060:	55 95       	asr	r21
    8062:	47 95       	ror	r20
    8064:	ea 95       	dec	r30
    8066:	e2 f7       	brpl	.-8      	; 0x8060 <bin2num+0x58>
    8068:	41 70       	andi	r20, 0x01	; 1
    806a:	55 27       	eor	r21, r21
    806c:	dc 01       	movw	r26, r24
    806e:	e0 e0       	ldi	r30, 0x00	; 0
    8070:	f0 e0       	ldi	r31, 0x00	; 0
    8072:	ec 17       	cp	r30, r28
    8074:	fd 07       	cpc	r31, r29
    8076:	ec f4       	brge	.+58     	; 0x80b2 <bin2num+0xaa>
    8078:	ea 15       	cp	r30, r10
    807a:	fb 05       	cpc	r31, r11
    807c:	4c f0       	brlt	.+18     	; 0x8090 <bin2num+0x88>
    807e:	dc 01       	movw	r26, r24
    8080:	ae 0f       	add	r26, r30
    8082:	bf 1f       	adc	r27, r31
    8084:	1c 92       	st	X, r1
    8086:	41 e0       	ldi	r20, 0x01	; 1
    8088:	e4 1a       	sub	r14, r20
    808a:	f1 08       	sbc	r15, r1
    808c:	ef 01       	movw	r28, r30
    808e:	d8 cf       	rjmp	.-80     	; 0x8040 <bin2num+0x38>
    8090:	9c 90       	ld	r9, X
    8092:	99 0c       	add	r9, r9
    8094:	94 2a       	or	r9, r20
    8096:	49 2d       	mov	r20, r9
    8098:	50 e0       	ldi	r21, 0x00	; 0
    809a:	42 17       	cp	r20, r18
    809c:	53 07       	cpc	r21, r19
    809e:	24 f0       	brlt	.+8      	; 0x80a8 <bin2num+0xa0>
    80a0:	92 1a       	sub	r9, r18
    80a2:	41 e0       	ldi	r20, 0x01	; 1
    80a4:	50 e0       	ldi	r21, 0x00	; 0
    80a6:	02 c0       	rjmp	.+4      	; 0x80ac <bin2num+0xa4>
    80a8:	40 e0       	ldi	r20, 0x00	; 0
    80aa:	50 e0       	ldi	r21, 0x00	; 0
    80ac:	9d 92       	st	X+, r9
    80ae:	31 96       	adiw	r30, 0x01	; 1
    80b0:	e0 cf       	rjmp	.-64     	; 0x8072 <bin2num+0x6a>
    80b2:	41 15       	cp	r20, r1
    80b4:	51 05       	cpc	r21, r1
    80b6:	01 f7       	brne	.-64     	; 0x8078 <bin2num+0x70>
    80b8:	e2 cf       	rjmp	.-60     	; 0x807e <bin2num+0x76>
    80ba:	fc 01       	movw	r30, r24
    80bc:	9f 01       	movw	r18, r30
    80be:	28 1b       	sub	r18, r24
    80c0:	39 0b       	sbc	r19, r25
    80c2:	2c 17       	cp	r18, r28
    80c4:	3d 07       	cpc	r19, r29
    80c6:	4c f4       	brge	.+18     	; 0x80da <bin2num+0xd2>
    80c8:	20 81       	ld	r18, Z
    80ca:	2a 30       	cpi	r18, 0x0A	; 10
    80cc:	10 f4       	brcc	.+4      	; 0x80d2 <bin2num+0xca>
    80ce:	20 5d       	subi	r18, 0xD0	; 208
    80d0:	01 c0       	rjmp	.+2      	; 0x80d4 <bin2num+0xcc>
    80d2:	29 5a       	subi	r18, 0xA9	; 169
    80d4:	20 83       	st	Z, r18
    80d6:	31 96       	adiw	r30, 0x01	; 1
    80d8:	f1 cf       	rjmp	.-30     	; 0x80bc <bin2num+0xb4>
    80da:	9e 01       	movw	r18, r28
    80dc:	d7 ff       	sbrs	r29, 7
    80de:	02 c0       	rjmp	.+4      	; 0x80e4 <bin2num+0xdc>
    80e0:	20 e0       	ldi	r18, 0x00	; 0
    80e2:	30 e0       	ldi	r19, 0x00	; 0
    80e4:	c1 14       	cp	r12, r1
    80e6:	d1 04       	cpc	r13, r1
    80e8:	61 f0       	breq	.+24     	; 0x8102 <bin2num+0xfa>
    80ea:	61 50       	subi	r22, 0x01	; 1
    80ec:	71 09       	sbc	r23, r1
    80ee:	26 17       	cp	r18, r22
    80f0:	37 07       	cpc	r19, r23
    80f2:	3c f4       	brge	.+14     	; 0x8102 <bin2num+0xfa>
    80f4:	fc 01       	movw	r30, r24
    80f6:	e2 0f       	add	r30, r18
    80f8:	f3 1f       	adc	r31, r19
    80fa:	c0 82       	st	Z, r12
    80fc:	21 96       	adiw	r28, 0x01	; 1
    80fe:	2f 5f       	subi	r18, 0xFF	; 255
    8100:	3f 4f       	sbci	r19, 0xFF	; 255
    8102:	fc 01       	movw	r30, r24
    8104:	e2 0f       	add	r30, r18
    8106:	f3 1f       	adc	r31, r19
    8108:	10 82       	st	Z, r1
    810a:	0e 94 73 33 	call	0x66e6	; 0x66e6 <reverse>
    810e:	ce 01       	movw	r24, r28
    8110:	cd b7       	in	r28, 0x3d	; 61
    8112:	de b7       	in	r29, 0x3e	; 62
    8114:	eb e0       	ldi	r30, 0x0B	; 11
    8116:	0c 94 4c e4 	jmp	0x1c898	; 0x1c898 <__epilogue_restores__+0xe>

0000811a <pch_init>:
    811a:	e8 e8       	ldi	r30, 0x88	; 136
    811c:	fa e1       	ldi	r31, 0x1A	; 26
    811e:	91 83       	std	Z+1, r25	; 0x01
    8120:	80 83       	st	Z, r24
    8122:	13 82       	std	Z+3, r1	; 0x03
    8124:	12 82       	std	Z+2, r1	; 0x02
    8126:	61 50       	subi	r22, 0x01	; 1
    8128:	71 09       	sbc	r23, r1
    812a:	75 83       	std	Z+5, r23	; 0x05
    812c:	64 83       	std	Z+4, r22	; 0x04
    812e:	fc 01       	movw	r30, r24
    8130:	10 82       	st	Z, r1
    8132:	08 95       	ret

00008134 <pch>:
    8134:	20 91 8a 1a 	lds	r18, 0x1A8A	; 0x801a8a <_pch+0x2>
    8138:	30 91 8b 1a 	lds	r19, 0x1A8B	; 0x801a8b <_pch+0x3>
    813c:	60 91 8c 1a 	lds	r22, 0x1A8C	; 0x801a8c <_pch+0x4>
    8140:	70 91 8d 1a 	lds	r23, 0x1A8D	; 0x801a8d <_pch+0x5>
    8144:	40 91 88 1a 	lds	r20, 0x1A88	; 0x801a88 <_pch>
    8148:	50 91 89 1a 	lds	r21, 0x1A89	; 0x801a89 <_pch+0x1>
    814c:	26 17       	cp	r18, r22
    814e:	37 07       	cpc	r19, r23
    8150:	64 f4       	brge	.+24     	; 0x816a <pch+0x36>
    8152:	b9 01       	movw	r22, r18
    8154:	6f 5f       	subi	r22, 0xFF	; 255
    8156:	7f 4f       	sbci	r23, 0xFF	; 255
    8158:	70 93 8b 1a 	sts	0x1A8B, r23	; 0x801a8b <_pch+0x3>
    815c:	60 93 8a 1a 	sts	0x1A8A, r22	; 0x801a8a <_pch+0x2>
    8160:	fa 01       	movw	r30, r20
    8162:	e2 0f       	add	r30, r18
    8164:	f3 1f       	adc	r31, r19
    8166:	80 83       	st	Z, r24
    8168:	04 c0       	rjmp	.+8      	; 0x8172 <pch+0x3e>
    816a:	fa 01       	movw	r30, r20
    816c:	e2 0f       	add	r30, r18
    816e:	f3 1f       	adc	r31, r19
    8170:	10 82       	st	Z, r1
    8172:	80 91 8a 1a 	lds	r24, 0x1A8A	; 0x801a8a <_pch+0x2>
    8176:	90 91 8b 1a 	lds	r25, 0x1A8B	; 0x801a8b <_pch+0x3>
    817a:	08 95       	ret

0000817c <p_ntoa>:
    817c:	af 92       	push	r10
    817e:	cf 92       	push	r12
    8180:	df 92       	push	r13
    8182:	ef 92       	push	r14
    8184:	ff 92       	push	r15
    8186:	0f 93       	push	r16
    8188:	1f 93       	push	r17
    818a:	cf 93       	push	r28
    818c:	df 93       	push	r29
    818e:	dc 01       	movw	r26, r24
    8190:	eb 01       	movw	r28, r22
    8192:	fa 01       	movw	r30, r20
    8194:	b9 01       	movw	r22, r18
    8196:	98 01       	movw	r18, r16
    8198:	a6 01       	movw	r20, r12
    819a:	9a 2d       	mov	r25, r10
    819c:	a5 fa       	bst	r10, 5
    819e:	cc 24       	eor	r12, r12
    81a0:	c0 f8       	bld	r12, 0
    81a2:	a6 fc       	sbrc	r10, 6
    81a4:	07 c0       	rjmp	.+14     	; 0x81b4 <p_ntoa+0x38>
    81a6:	a2 fc       	sbrc	r10, 2
    81a8:	08 c0       	rjmp	.+16     	; 0x81ba <p_ntoa+0x3e>
    81aa:	a4 fe       	sbrs	r10, 4
    81ac:	09 c0       	rjmp	.+18     	; 0x81c0 <p_ntoa+0x44>
    81ae:	00 e2       	ldi	r16, 0x20	; 32
    81b0:	10 e0       	ldi	r17, 0x00	; 0
    81b2:	08 c0       	rjmp	.+16     	; 0x81c4 <p_ntoa+0x48>
    81b4:	0d e2       	ldi	r16, 0x2D	; 45
    81b6:	10 e0       	ldi	r17, 0x00	; 0
    81b8:	05 c0       	rjmp	.+10     	; 0x81c4 <p_ntoa+0x48>
    81ba:	0b e2       	ldi	r16, 0x2B	; 43
    81bc:	10 e0       	ldi	r17, 0x00	; 0
    81be:	02 c0       	rjmp	.+4      	; 0x81c4 <p_ntoa+0x48>
    81c0:	00 e0       	ldi	r16, 0x00	; 0
    81c2:	10 e0       	ldi	r17, 0x00	; 0
    81c4:	95 ff       	sbrs	r25, 5
    81c6:	04 c0       	rjmp	.+8      	; 0x81d0 <p_ntoa+0x54>
    81c8:	89 2f       	mov	r24, r25
    81ca:	8a 70       	andi	r24, 0x0A	; 10
    81cc:	09 f0       	breq	.+2      	; 0x81d0 <p_ntoa+0x54>
    81ce:	c1 2c       	mov	r12, r1
    81d0:	c0 fa       	bst	r12, 0
    81d2:	95 f9       	bld	r25, 5
    81d4:	89 2f       	mov	r24, r25
    81d6:	82 70       	andi	r24, 0x02	; 2
    81d8:	c8 2e       	mov	r12, r24
    81da:	91 fd       	sbrc	r25, 1
    81dc:	02 c0       	rjmp	.+4      	; 0x81e2 <p_ntoa+0x66>
    81de:	40 e0       	ldi	r20, 0x00	; 0
    81e0:	50 e0       	ldi	r21, 0x00	; 0
    81e2:	89 2f       	mov	r24, r25
    81e4:	83 70       	andi	r24, 0x03	; 3
    81e6:	11 f4       	brne	.+4      	; 0x81ec <p_ntoa+0x70>
    81e8:	41 e0       	ldi	r20, 0x01	; 1
    81ea:	50 e0       	ldi	r21, 0x00	; 0
    81ec:	90 ff       	sbrs	r25, 0
    81ee:	0c c0       	rjmp	.+24     	; 0x8208 <p_ntoa+0x8c>
    81f0:	95 fd       	sbrc	r25, 5
    81f2:	05 c0       	rjmp	.+10     	; 0x81fe <p_ntoa+0x82>
    81f4:	c1 10       	cpse	r12, r1
    81f6:	08 c0       	rjmp	.+16     	; 0x8208 <p_ntoa+0x8c>
    81f8:	41 e0       	ldi	r20, 0x01	; 1
    81fa:	50 e0       	ldi	r21, 0x00	; 0
    81fc:	05 c0       	rjmp	.+10     	; 0x8208 <p_ntoa+0x8c>
    81fe:	94 75       	andi	r25, 0x54	; 84
    8200:	a7 01       	movw	r20, r14
    8202:	11 f0       	breq	.+4      	; 0x8208 <p_ntoa+0x8c>
    8204:	41 50       	subi	r20, 0x01	; 1
    8206:	51 09       	sbc	r21, r1
    8208:	68 01       	movw	r12, r16
    820a:	7e 01       	movw	r14, r28
    820c:	8d 01       	movw	r16, r26
    820e:	cf 01       	movw	r24, r30
    8210:	fb de       	rcall	.-522    	; 0x8008 <bin2num>
    8212:	df 91       	pop	r29
    8214:	cf 91       	pop	r28
    8216:	1f 91       	pop	r17
    8218:	0f 91       	pop	r16
    821a:	ff 90       	pop	r15
    821c:	ef 90       	pop	r14
    821e:	df 90       	pop	r13
    8220:	cf 90       	pop	r12
    8222:	af 90       	pop	r10
    8224:	08 95       	ret

00008226 <p_ftoa>:
    8226:	2f 92       	push	r2
    8228:	3f 92       	push	r3
    822a:	4f 92       	push	r4
    822c:	5f 92       	push	r5
    822e:	6f 92       	push	r6
    8230:	7f 92       	push	r7
    8232:	8f 92       	push	r8
    8234:	9f 92       	push	r9
    8236:	af 92       	push	r10
    8238:	bf 92       	push	r11
    823a:	cf 92       	push	r12
    823c:	ef 92       	push	r14
    823e:	ff 92       	push	r15
    8240:	0f 93       	push	r16
    8242:	1f 93       	push	r17
    8244:	cf 93       	push	r28
    8246:	df 93       	push	r29
    8248:	4b 01       	movw	r8, r22
    824a:	5c 01       	movw	r10, r24
    824c:	1a 01       	movw	r2, r20
    824e:	38 01       	movw	r6, r16
    8250:	c6 fa       	bst	r12, 6
    8252:	cc 27       	eor	r28, r28
    8254:	c0 f9       	bld	r28, 0
    8256:	b9 01       	movw	r22, r18
    8258:	ca 01       	movw	r24, r20
    825a:	5f df       	rcall	.-322    	; 0x811a <pch_init>
    825c:	20 e0       	ldi	r18, 0x00	; 0
    825e:	30 e0       	ldi	r19, 0x00	; 0
    8260:	a9 01       	movw	r20, r18
    8262:	c5 01       	movw	r24, r10
    8264:	b4 01       	movw	r22, r8
    8266:	0e 94 d8 e4 	call	0x1c9b0	; 0x1c9b0 <__cmpsf2>
    826a:	87 ff       	sbrs	r24, 7
    826c:	05 c0       	rjmp	.+10     	; 0x8278 <p_ftoa+0x52>
    826e:	b7 fa       	bst	r11, 7
    8270:	b0 94       	com	r11
    8272:	b7 f8       	bld	r11, 7
    8274:	b0 94       	com	r11
    8276:	c1 e0       	ldi	r28, 0x01	; 1
    8278:	c0 fb       	bst	r28, 0
    827a:	c6 f8       	bld	r12, 6
    827c:	c6 fe       	sbrs	r12, 6
    827e:	02 c0       	rjmp	.+4      	; 0x8284 <p_ftoa+0x5e>
    8280:	8d e2       	ldi	r24, 0x2D	; 45
    8282:	07 c0       	rjmp	.+14     	; 0x8292 <p_ftoa+0x6c>
    8284:	c2 fe       	sbrs	r12, 2
    8286:	02 c0       	rjmp	.+4      	; 0x828c <p_ftoa+0x66>
    8288:	8b e2       	ldi	r24, 0x2B	; 43
    828a:	03 c0       	rjmp	.+6      	; 0x8292 <p_ftoa+0x6c>
    828c:	c4 fe       	sbrs	r12, 4
    828e:	02 c0       	rjmp	.+4      	; 0x8294 <p_ftoa+0x6e>
    8290:	80 e2       	ldi	r24, 0x20	; 32
    8292:	50 df       	rcall	.-352    	; 0x8134 <pch>
    8294:	e7 01       	movw	r28, r14
    8296:	f7 fe       	sbrs	r15, 7
    8298:	02 c0       	rjmp	.+4      	; 0x829e <p_ftoa+0x78>
    829a:	c0 e0       	ldi	r28, 0x00	; 0
    829c:	d0 e0       	ldi	r29, 0x00	; 0
    829e:	20 e0       	ldi	r18, 0x00	; 0
    82a0:	30 e0       	ldi	r19, 0x00	; 0
    82a2:	a9 01       	movw	r20, r18
    82a4:	c5 01       	movw	r24, r10
    82a6:	b4 01       	movw	r22, r8
    82a8:	0e 94 d8 e4 	call	0x1c9b0	; 0x1c9b0 <__cmpsf2>
    82ac:	88 23       	and	r24, r24
    82ae:	d1 f1       	breq	.+116    	; 0x8324 <p_ftoa+0xfe>
    82b0:	c1 fe       	sbrs	r12, 1
    82b2:	11 c0       	rjmp	.+34     	; 0x82d6 <p_ftoa+0xb0>
    82b4:	8e 01       	movw	r16, r28
    82b6:	60 e0       	ldi	r22, 0x00	; 0
    82b8:	70 e0       	ldi	r23, 0x00	; 0
    82ba:	80 e0       	ldi	r24, 0x00	; 0
    82bc:	9f e3       	ldi	r25, 0x3F	; 63
    82be:	01 15       	cp	r16, r1
    82c0:	11 05       	cpc	r17, r1
    82c2:	69 f0       	breq	.+26     	; 0x82de <p_ftoa+0xb8>
    82c4:	20 e0       	ldi	r18, 0x00	; 0
    82c6:	30 e0       	ldi	r19, 0x00	; 0
    82c8:	40 e2       	ldi	r20, 0x20	; 32
    82ca:	51 e4       	ldi	r21, 0x41	; 65
    82cc:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    82d0:	01 50       	subi	r16, 0x01	; 1
    82d2:	11 09       	sbc	r17, r1
    82d4:	f4 cf       	rjmp	.-24     	; 0x82be <p_ftoa+0x98>
    82d6:	60 e0       	ldi	r22, 0x00	; 0
    82d8:	70 e0       	ldi	r23, 0x00	; 0
    82da:	80 e0       	ldi	r24, 0x00	; 0
    82dc:	9f e3       	ldi	r25, 0x3F	; 63
    82de:	9b 01       	movw	r18, r22
    82e0:	ac 01       	movw	r20, r24
    82e2:	c5 01       	movw	r24, r10
    82e4:	b4 01       	movw	r22, r8
    82e6:	0e 94 74 e4 	call	0x1c8e8	; 0x1c8e8 <__addsf3>
    82ea:	4b 01       	movw	r8, r22
    82ec:	5c 01       	movw	r10, r24
    82ee:	ee 24       	eor	r14, r14
    82f0:	e3 94       	inc	r14
    82f2:	f1 2c       	mov	r15, r1
    82f4:	20 e0       	ldi	r18, 0x00	; 0
    82f6:	30 e0       	ldi	r19, 0x00	; 0
    82f8:	40 e2       	ldi	r20, 0x20	; 32
    82fa:	51 e4       	ldi	r21, 0x41	; 65
    82fc:	c5 01       	movw	r24, r10
    82fe:	b4 01       	movw	r22, r8
    8300:	0e 94 27 e6 	call	0x1cc4e	; 0x1cc4e <__gesf2>
    8304:	87 fd       	sbrc	r24, 7
    8306:	11 c0       	rjmp	.+34     	; 0x832a <p_ftoa+0x104>
    8308:	2f ef       	ldi	r18, 0xFF	; 255
    830a:	e2 1a       	sub	r14, r18
    830c:	f2 0a       	sbc	r15, r18
    830e:	20 e0       	ldi	r18, 0x00	; 0
    8310:	30 e0       	ldi	r19, 0x00	; 0
    8312:	40 e2       	ldi	r20, 0x20	; 32
    8314:	51 e4       	ldi	r21, 0x41	; 65
    8316:	c5 01       	movw	r24, r10
    8318:	b4 01       	movw	r22, r8
    831a:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    831e:	4b 01       	movw	r8, r22
    8320:	5c 01       	movw	r10, r24
    8322:	e8 cf       	rjmp	.-48     	; 0x82f4 <p_ftoa+0xce>
    8324:	ee 24       	eor	r14, r14
    8326:	e3 94       	inc	r14
    8328:	f1 2c       	mov	r15, r1
    832a:	8c 2d       	mov	r24, r12
    832c:	88 72       	andi	r24, 0x28	; 40
    832e:	80 32       	cpi	r24, 0x20	; 32
    8330:	b9 f4       	brne	.+46     	; 0x8360 <p_ftoa+0x13a>
    8332:	83 01       	movw	r16, r6
    8334:	0e 19       	sub	r16, r14
    8336:	1f 09       	sbc	r17, r15
    8338:	80 91 8a 1a 	lds	r24, 0x1A8A	; 0x801a8a <_pch+0x2>
    833c:	90 91 8b 1a 	lds	r25, 0x1A8B	; 0x801a8b <_pch+0x3>
    8340:	08 1b       	sub	r16, r24
    8342:	19 0b       	sbc	r17, r25
    8344:	c1 fe       	sbrs	r12, 1
    8346:	06 c0       	rjmp	.+12     	; 0x8354 <p_ftoa+0x12e>
    8348:	20 97       	sbiw	r28, 0x00	; 0
    834a:	21 f0       	breq	.+8      	; 0x8354 <p_ftoa+0x12e>
    834c:	0c 1b       	sub	r16, r28
    834e:	1d 0b       	sbc	r17, r29
    8350:	01 50       	subi	r16, 0x01	; 1
    8352:	11 09       	sbc	r17, r1
    8354:	10 16       	cp	r1, r16
    8356:	11 06       	cpc	r1, r17
    8358:	1c f4       	brge	.+6      	; 0x8360 <p_ftoa+0x13a>
    835a:	80 e3       	ldi	r24, 0x30	; 48
    835c:	eb de       	rcall	.-554    	; 0x8134 <pch>
    835e:	f8 cf       	rjmp	.-16     	; 0x8350 <p_ftoa+0x12a>
    8360:	c5 01       	movw	r24, r10
    8362:	b4 01       	movw	r22, r8
    8364:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <__fixsfsi>
    8368:	2b 01       	movw	r4, r22
    836a:	3c 01       	movw	r6, r24
    836c:	80 e3       	ldi	r24, 0x30	; 48
    836e:	84 0d       	add	r24, r4
    8370:	e1 de       	rcall	.-574    	; 0x8134 <pch>
    8372:	b2 01       	movw	r22, r4
    8374:	55 0c       	add	r5, r5
    8376:	88 0b       	sbc	r24, r24
    8378:	99 0b       	sbc	r25, r25
    837a:	0e 94 77 e5 	call	0x1caee	; 0x1caee <__floatsisf>
    837e:	9b 01       	movw	r18, r22
    8380:	ac 01       	movw	r20, r24
    8382:	c5 01       	movw	r24, r10
    8384:	b4 01       	movw	r22, r8
    8386:	0e 94 73 e4 	call	0x1c8e6	; 0x1c8e6 <__subsf3>
    838a:	21 e0       	ldi	r18, 0x01	; 1
    838c:	e2 1a       	sub	r14, r18
    838e:	f1 08       	sbc	r15, r1
    8390:	20 e0       	ldi	r18, 0x00	; 0
    8392:	30 e0       	ldi	r19, 0x00	; 0
    8394:	40 e2       	ldi	r20, 0x20	; 32
    8396:	51 e4       	ldi	r21, 0x41	; 65
    8398:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    839c:	4b 01       	movw	r8, r22
    839e:	5c 01       	movw	r10, r24
    83a0:	e1 14       	cp	r14, r1
    83a2:	f1 04       	cpc	r15, r1
    83a4:	e9 f6       	brne	.-70     	; 0x8360 <p_ftoa+0x13a>
    83a6:	c1 fc       	sbrc	r12, 1
    83a8:	1c c0       	rjmp	.+56     	; 0x83e2 <p_ftoa+0x1bc>
    83aa:	80 e0       	ldi	r24, 0x00	; 0
    83ac:	c3 de       	rcall	.-634    	; 0x8134 <pch>
    83ae:	f1 01       	movw	r30, r2
    83b0:	01 90       	ld	r0, Z+
    83b2:	00 20       	and	r0, r0
    83b4:	e9 f7       	brne	.-6      	; 0x83b0 <p_ftoa+0x18a>
    83b6:	31 97       	sbiw	r30, 0x01	; 1
    83b8:	cf 01       	movw	r24, r30
    83ba:	82 19       	sub	r24, r2
    83bc:	93 09       	sbc	r25, r3
    83be:	df 91       	pop	r29
    83c0:	cf 91       	pop	r28
    83c2:	1f 91       	pop	r17
    83c4:	0f 91       	pop	r16
    83c6:	ff 90       	pop	r15
    83c8:	ef 90       	pop	r14
    83ca:	cf 90       	pop	r12
    83cc:	bf 90       	pop	r11
    83ce:	af 90       	pop	r10
    83d0:	9f 90       	pop	r9
    83d2:	8f 90       	pop	r8
    83d4:	7f 90       	pop	r7
    83d6:	6f 90       	pop	r6
    83d8:	5f 90       	pop	r5
    83da:	4f 90       	pop	r4
    83dc:	3f 90       	pop	r3
    83de:	2f 90       	pop	r2
    83e0:	08 95       	ret
    83e2:	20 97       	sbiw	r28, 0x00	; 0
    83e4:	11 f3       	breq	.-60     	; 0x83aa <p_ftoa+0x184>
    83e6:	8e e2       	ldi	r24, 0x2E	; 46
    83e8:	a5 de       	rcall	.-694    	; 0x8134 <pch>
    83ea:	c5 01       	movw	r24, r10
    83ec:	b4 01       	movw	r22, r8
    83ee:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <__fixsfsi>
    83f2:	2b 01       	movw	r4, r22
    83f4:	3c 01       	movw	r6, r24
    83f6:	07 2e       	mov	r0, r23
    83f8:	00 0c       	add	r0, r0
    83fa:	88 0b       	sbc	r24, r24
    83fc:	99 0b       	sbc	r25, r25
    83fe:	0e 94 77 e5 	call	0x1caee	; 0x1caee <__floatsisf>
    8402:	9b 01       	movw	r18, r22
    8404:	ac 01       	movw	r20, r24
    8406:	c5 01       	movw	r24, r10
    8408:	b4 01       	movw	r22, r8
    840a:	0e 94 73 e4 	call	0x1c8e6	; 0x1c8e6 <__subsf3>
    840e:	4b 01       	movw	r8, r22
    8410:	5c 01       	movw	r10, r24
    8412:	80 e3       	ldi	r24, 0x30	; 48
    8414:	84 0d       	add	r24, r4
    8416:	8e de       	rcall	.-740    	; 0x8134 <pch>
    8418:	21 97       	sbiw	r28, 0x01	; 1
    841a:	20 e0       	ldi	r18, 0x00	; 0
    841c:	30 e0       	ldi	r19, 0x00	; 0
    841e:	40 e2       	ldi	r20, 0x20	; 32
    8420:	51 e4       	ldi	r21, 0x41	; 65
    8422:	c5 01       	movw	r24, r10
    8424:	b4 01       	movw	r22, r8
    8426:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    842a:	4b 01       	movw	r8, r22
    842c:	5c 01       	movw	r10, r24
    842e:	20 97       	sbiw	r28, 0x00	; 0
    8430:	e1 f6       	brne	.-72     	; 0x83ea <p_ftoa+0x1c4>
    8432:	bb cf       	rjmp	.-138    	; 0x83aa <p_ftoa+0x184>

00008434 <p_etoa>:
    8434:	ad e0       	ldi	r26, 0x0D	; 13
    8436:	b0 e0       	ldi	r27, 0x00	; 0
    8438:	e0 e2       	ldi	r30, 0x20	; 32
    843a:	f2 e4       	ldi	r31, 0x42	; 66
    843c:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    8440:	4b 01       	movw	r8, r22
    8442:	5c 01       	movw	r10, r24
    8444:	5b 87       	std	Y+11, r21	; 0x0b
    8446:	4a 87       	std	Y+10, r20	; 0x0a
    8448:	1d 87       	std	Y+13, r17	; 0x0d
    844a:	0c 87       	std	Y+12, r16	; 0x0c
    844c:	3c 2c       	mov	r3, r12
    844e:	c6 fa       	bst	r12, 6
    8450:	11 27       	eor	r17, r17
    8452:	10 f9       	bld	r17, 0
    8454:	b9 01       	movw	r22, r18
    8456:	ca 01       	movw	r24, r20
    8458:	60 de       	rcall	.-832    	; 0x811a <pch_init>
    845a:	20 e0       	ldi	r18, 0x00	; 0
    845c:	30 e0       	ldi	r19, 0x00	; 0
    845e:	a9 01       	movw	r20, r18
    8460:	c5 01       	movw	r24, r10
    8462:	b4 01       	movw	r22, r8
    8464:	0e 94 d8 e4 	call	0x1c9b0	; 0x1c9b0 <__cmpsf2>
    8468:	87 ff       	sbrs	r24, 7
    846a:	05 c0       	rjmp	.+10     	; 0x8476 <p_etoa+0x42>
    846c:	b7 fa       	bst	r11, 7
    846e:	b0 94       	com	r11
    8470:	b7 f8       	bld	r11, 7
    8472:	b0 94       	com	r11
    8474:	11 e0       	ldi	r17, 0x01	; 1
    8476:	10 fb       	bst	r17, 0
    8478:	36 f8       	bld	r3, 6
    847a:	36 fe       	sbrs	r3, 6
    847c:	02 c0       	rjmp	.+4      	; 0x8482 <p_etoa+0x4e>
    847e:	8d e2       	ldi	r24, 0x2D	; 45
    8480:	07 c0       	rjmp	.+14     	; 0x8490 <p_etoa+0x5c>
    8482:	32 fe       	sbrs	r3, 2
    8484:	02 c0       	rjmp	.+4      	; 0x848a <p_etoa+0x56>
    8486:	8b e2       	ldi	r24, 0x2B	; 43
    8488:	03 c0       	rjmp	.+6      	; 0x8490 <p_etoa+0x5c>
    848a:	34 fe       	sbrs	r3, 4
    848c:	02 c0       	rjmp	.+4      	; 0x8492 <p_etoa+0x5e>
    848e:	80 e2       	ldi	r24, 0x20	; 32
    8490:	51 de       	rcall	.-862    	; 0x8134 <pch>
    8492:	37 01       	movw	r6, r14
    8494:	f7 fe       	sbrs	r15, 7
    8496:	02 c0       	rjmp	.+4      	; 0x849c <p_etoa+0x68>
    8498:	61 2c       	mov	r6, r1
    849a:	71 2c       	mov	r7, r1
    849c:	19 86       	std	Y+9, r1	; 0x09
    849e:	18 86       	std	Y+8, r1	; 0x08
    84a0:	20 e0       	ldi	r18, 0x00	; 0
    84a2:	30 e0       	ldi	r19, 0x00	; 0
    84a4:	a9 01       	movw	r20, r18
    84a6:	c5 01       	movw	r24, r10
    84a8:	b4 01       	movw	r22, r8
    84aa:	0e 94 d8 e4 	call	0x1c9b0	; 0x1c9b0 <__cmpsf2>
    84ae:	23 2d       	mov	r18, r3
    84b0:	22 70       	andi	r18, 0x02	; 2
    84b2:	22 2e       	mov	r2, r18
    84b4:	88 23       	and	r24, r24
    84b6:	09 f4       	brne	.+2      	; 0x84ba <p_etoa+0x86>
    84b8:	70 c0       	rjmp	.+224    	; 0x859a <p_etoa+0x166>
    84ba:	22 23       	and	r18, r18
    84bc:	b1 f0       	breq	.+44     	; 0x84ea <p_etoa+0xb6>
    84be:	83 01       	movw	r16, r6
    84c0:	c1 2c       	mov	r12, r1
    84c2:	d1 2c       	mov	r13, r1
    84c4:	e1 2c       	mov	r14, r1
    84c6:	2f e3       	ldi	r18, 0x3F	; 63
    84c8:	f2 2e       	mov	r15, r18
    84ca:	01 15       	cp	r16, r1
    84cc:	11 05       	cpc	r17, r1
    84ce:	91 f0       	breq	.+36     	; 0x84f4 <p_etoa+0xc0>
    84d0:	20 e0       	ldi	r18, 0x00	; 0
    84d2:	30 e0       	ldi	r19, 0x00	; 0
    84d4:	40 e2       	ldi	r20, 0x20	; 32
    84d6:	51 e4       	ldi	r21, 0x41	; 65
    84d8:	c7 01       	movw	r24, r14
    84da:	b6 01       	movw	r22, r12
    84dc:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    84e0:	6b 01       	movw	r12, r22
    84e2:	7c 01       	movw	r14, r24
    84e4:	01 50       	subi	r16, 0x01	; 1
    84e6:	11 09       	sbc	r17, r1
    84e8:	f0 cf       	rjmp	.-32     	; 0x84ca <p_etoa+0x96>
    84ea:	c1 2c       	mov	r12, r1
    84ec:	d1 2c       	mov	r13, r1
    84ee:	e1 2c       	mov	r14, r1
    84f0:	9f e3       	ldi	r25, 0x3F	; 63
    84f2:	f9 2e       	mov	r15, r25
    84f4:	41 2c       	mov	r4, r1
    84f6:	51 2c       	mov	r5, r1
    84f8:	82 01       	movw	r16, r4
    84fa:	01 50       	subi	r16, 0x01	; 1
    84fc:	11 09       	sbc	r17, r1
    84fe:	20 e0       	ldi	r18, 0x00	; 0
    8500:	30 e0       	ldi	r19, 0x00	; 0
    8502:	40 e8       	ldi	r20, 0x80	; 128
    8504:	5f e3       	ldi	r21, 0x3F	; 63
    8506:	c5 01       	movw	r24, r10
    8508:	b4 01       	movw	r22, r8
    850a:	0e 94 d8 e4 	call	0x1c9b0	; 0x1c9b0 <__cmpsf2>
    850e:	87 ff       	sbrs	r24, 7
    8510:	0c c0       	rjmp	.+24     	; 0x852a <p_etoa+0xf6>
    8512:	20 e0       	ldi	r18, 0x00	; 0
    8514:	30 e0       	ldi	r19, 0x00	; 0
    8516:	40 e2       	ldi	r20, 0x20	; 32
    8518:	51 e4       	ldi	r21, 0x41	; 65
    851a:	c5 01       	movw	r24, r10
    851c:	b4 01       	movw	r22, r8
    851e:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    8522:	4b 01       	movw	r8, r22
    8524:	5c 01       	movw	r10, r24
    8526:	28 01       	movw	r4, r16
    8528:	e7 cf       	rjmp	.-50     	; 0x84f8 <p_etoa+0xc4>
    852a:	82 01       	movw	r16, r4
    852c:	0f 5f       	subi	r16, 0xFF	; 255
    852e:	1f 4f       	sbci	r17, 0xFF	; 255
    8530:	20 e0       	ldi	r18, 0x00	; 0
    8532:	30 e0       	ldi	r19, 0x00	; 0
    8534:	40 e2       	ldi	r20, 0x20	; 32
    8536:	51 e4       	ldi	r21, 0x41	; 65
    8538:	c5 01       	movw	r24, r10
    853a:	b4 01       	movw	r22, r8
    853c:	0e 94 27 e6 	call	0x1cc4e	; 0x1cc4e <__gesf2>
    8540:	87 fd       	sbrc	r24, 7
    8542:	0c c0       	rjmp	.+24     	; 0x855c <p_etoa+0x128>
    8544:	20 e0       	ldi	r18, 0x00	; 0
    8546:	30 e0       	ldi	r19, 0x00	; 0
    8548:	40 e2       	ldi	r20, 0x20	; 32
    854a:	51 e4       	ldi	r21, 0x41	; 65
    854c:	c5 01       	movw	r24, r10
    854e:	b4 01       	movw	r22, r8
    8550:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    8554:	4b 01       	movw	r8, r22
    8556:	5c 01       	movw	r10, r24
    8558:	28 01       	movw	r4, r16
    855a:	e7 cf       	rjmp	.-50     	; 0x852a <p_etoa+0xf6>
    855c:	a7 01       	movw	r20, r14
    855e:	96 01       	movw	r18, r12
    8560:	c5 01       	movw	r24, r10
    8562:	b4 01       	movw	r22, r8
    8564:	0e 94 74 e4 	call	0x1c8e8	; 0x1c8e8 <__addsf3>
    8568:	4b 01       	movw	r8, r22
    856a:	5c 01       	movw	r10, r24
    856c:	82 01       	movw	r16, r4
    856e:	3f ef       	ldi	r19, 0xFF	; 255
    8570:	43 1a       	sub	r4, r19
    8572:	53 0a       	sbc	r5, r19
    8574:	20 e0       	ldi	r18, 0x00	; 0
    8576:	30 e0       	ldi	r19, 0x00	; 0
    8578:	40 e2       	ldi	r20, 0x20	; 32
    857a:	51 e4       	ldi	r21, 0x41	; 65
    857c:	0e 94 27 e6 	call	0x1cc4e	; 0x1cc4e <__gesf2>
    8580:	87 fd       	sbrc	r24, 7
    8582:	09 c0       	rjmp	.+18     	; 0x8596 <p_etoa+0x162>
    8584:	20 e0       	ldi	r18, 0x00	; 0
    8586:	30 e0       	ldi	r19, 0x00	; 0
    8588:	40 e2       	ldi	r20, 0x20	; 32
    858a:	51 e4       	ldi	r21, 0x41	; 65
    858c:	c5 01       	movw	r24, r10
    858e:	b4 01       	movw	r22, r8
    8590:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__divsf3>
    8594:	e9 cf       	rjmp	.-46     	; 0x8568 <p_etoa+0x134>
    8596:	08 87       	std	Y+8, r16	; 0x08
    8598:	19 87       	std	Y+9, r17	; 0x09
    859a:	85 e6       	ldi	r24, 0x65	; 101
    859c:	89 83       	std	Y+1, r24	; 0x01
    859e:	88 85       	ldd	r24, Y+8	; 0x08
    85a0:	99 85       	ldd	r25, Y+9	; 0x09
    85a2:	97 ff       	sbrs	r25, 7
    85a4:	08 c0       	rjmp	.+16     	; 0x85b6 <p_etoa+0x182>
    85a6:	91 95       	neg	r25
    85a8:	81 95       	neg	r24
    85aa:	91 09       	sbc	r25, r1
    85ac:	99 87       	std	Y+9, r25	; 0x09
    85ae:	88 87       	std	Y+8, r24	; 0x08
    85b0:	8d e2       	ldi	r24, 0x2D	; 45
    85b2:	90 e0       	ldi	r25, 0x00	; 0
    85b4:	02 c0       	rjmp	.+4      	; 0x85ba <p_etoa+0x186>
    85b6:	8b e2       	ldi	r24, 0x2B	; 43
    85b8:	90 e0       	ldi	r25, 0x00	; 0
    85ba:	6c 01       	movw	r12, r24
    85bc:	82 e0       	ldi	r24, 0x02	; 2
    85be:	e8 2e       	mov	r14, r24
    85c0:	f1 2c       	mov	r15, r1
    85c2:	8e 01       	movw	r16, r28
    85c4:	08 5f       	subi	r16, 0xF8	; 248
    85c6:	1f 4f       	sbci	r17, 0xFF	; 255
    85c8:	2a e0       	ldi	r18, 0x0A	; 10
    85ca:	30 e0       	ldi	r19, 0x00	; 0
    85cc:	42 e0       	ldi	r20, 0x02	; 2
    85ce:	50 e0       	ldi	r21, 0x00	; 0
    85d0:	65 e0       	ldi	r22, 0x05	; 5
    85d2:	70 e0       	ldi	r23, 0x00	; 0
    85d4:	ce 01       	movw	r24, r28
    85d6:	02 96       	adiw	r24, 0x02	; 2
    85d8:	17 dd       	rcall	.-1490   	; 0x8008 <bin2num>
    85da:	9c 01       	movw	r18, r24
    85dc:	93 2d       	mov	r25, r3
    85de:	98 72       	andi	r25, 0x28	; 40
    85e0:	90 32       	cpi	r25, 0x20	; 32
    85e2:	61 f0       	breq	.+24     	; 0x85fc <p_etoa+0x1c8>
    85e4:	c5 01       	movw	r24, r10
    85e6:	b4 01       	movw	r22, r8
    85e8:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <__fixsfsi>
    85ec:	6b 01       	movw	r12, r22
    85ee:	7c 01       	movw	r14, r24
    85f0:	80 e3       	ldi	r24, 0x30	; 48
    85f2:	8c 0d       	add	r24, r12
    85f4:	9f dd       	rcall	.-1218   	; 0x8134 <pch>
    85f6:	21 10       	cpse	r2, r1
    85f8:	20 c0       	rjmp	.+64     	; 0x863a <p_etoa+0x206>
    85fa:	5e c0       	rjmp	.+188    	; 0x86b8 <p_etoa+0x284>
    85fc:	80 91 8a 1a 	lds	r24, 0x1A8A	; 0x801a8a <_pch+0x2>
    8600:	90 91 8b 1a 	lds	r25, 0x1A8B	; 0x801a8b <_pch+0x3>
    8604:	0c 85       	ldd	r16, Y+12	; 0x0c
    8606:	1d 85       	ldd	r17, Y+13	; 0x0d
    8608:	08 1b       	sub	r16, r24
    860a:	19 0b       	sbc	r17, r25
    860c:	22 20       	and	r2, r2
    860e:	41 f0       	breq	.+16     	; 0x8620 <p_etoa+0x1ec>
    8610:	61 14       	cp	r6, r1
    8612:	71 04       	cpc	r7, r1
    8614:	29 f0       	breq	.+10     	; 0x8620 <p_etoa+0x1ec>
    8616:	06 19       	sub	r16, r6
    8618:	17 09       	sbc	r17, r7
    861a:	06 50       	subi	r16, 0x06	; 6
    861c:	11 09       	sbc	r17, r1
    861e:	02 c0       	rjmp	.+4      	; 0x8624 <p_etoa+0x1f0>
    8620:	05 50       	subi	r16, 0x05	; 5
    8622:	11 09       	sbc	r17, r1
    8624:	24 30       	cpi	r18, 0x04	; 4
    8626:	31 05       	cpc	r19, r1
    8628:	14 f0       	brlt	.+4      	; 0x862e <p_etoa+0x1fa>
    862a:	01 50       	subi	r16, 0x01	; 1
    862c:	11 09       	sbc	r17, r1
    862e:	10 16       	cp	r1, r16
    8630:	11 06       	cpc	r1, r17
    8632:	c4 f6       	brge	.-80     	; 0x85e4 <p_etoa+0x1b0>
    8634:	80 e3       	ldi	r24, 0x30	; 48
    8636:	7e dd       	rcall	.-1284   	; 0x8134 <pch>
    8638:	f8 cf       	rjmp	.-16     	; 0x862a <p_etoa+0x1f6>
    863a:	61 14       	cp	r6, r1
    863c:	71 04       	cpc	r7, r1
    863e:	09 f4       	brne	.+2      	; 0x8642 <p_etoa+0x20e>
    8640:	3b c0       	rjmp	.+118    	; 0x86b8 <p_etoa+0x284>
    8642:	b6 01       	movw	r22, r12
    8644:	dd 0c       	add	r13, r13
    8646:	88 0b       	sbc	r24, r24
    8648:	99 0b       	sbc	r25, r25
    864a:	0e 94 77 e5 	call	0x1caee	; 0x1caee <__floatsisf>
    864e:	9b 01       	movw	r18, r22
    8650:	ac 01       	movw	r20, r24
    8652:	c5 01       	movw	r24, r10
    8654:	b4 01       	movw	r22, r8
    8656:	0e 94 73 e4 	call	0x1c8e6	; 0x1c8e6 <__subsf3>
    865a:	20 e0       	ldi	r18, 0x00	; 0
    865c:	30 e0       	ldi	r19, 0x00	; 0
    865e:	40 e2       	ldi	r20, 0x20	; 32
    8660:	51 e4       	ldi	r21, 0x41	; 65
    8662:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    8666:	6b 01       	movw	r12, r22
    8668:	7c 01       	movw	r14, r24
    866a:	8e e2       	ldi	r24, 0x2E	; 46
    866c:	63 dd       	rcall	.-1338   	; 0x8134 <pch>
    866e:	c7 01       	movw	r24, r14
    8670:	b6 01       	movw	r22, r12
    8672:	0e 94 44 e5 	call	0x1ca88	; 0x1ca88 <__fixsfsi>
    8676:	4b 01       	movw	r8, r22
    8678:	5c 01       	movw	r10, r24
    867a:	07 2e       	mov	r0, r23
    867c:	00 0c       	add	r0, r0
    867e:	88 0b       	sbc	r24, r24
    8680:	99 0b       	sbc	r25, r25
    8682:	0e 94 77 e5 	call	0x1caee	; 0x1caee <__floatsisf>
    8686:	9b 01       	movw	r18, r22
    8688:	ac 01       	movw	r20, r24
    868a:	c7 01       	movw	r24, r14
    868c:	b6 01       	movw	r22, r12
    868e:	0e 94 73 e4 	call	0x1c8e6	; 0x1c8e6 <__subsf3>
    8692:	6b 01       	movw	r12, r22
    8694:	7c 01       	movw	r14, r24
    8696:	80 e3       	ldi	r24, 0x30	; 48
    8698:	88 0d       	add	r24, r8
    869a:	4c dd       	rcall	.-1384   	; 0x8134 <pch>
    869c:	20 e0       	ldi	r18, 0x00	; 0
    869e:	30 e0       	ldi	r19, 0x00	; 0
    86a0:	40 e2       	ldi	r20, 0x20	; 32
    86a2:	51 e4       	ldi	r21, 0x41	; 65
    86a4:	c7 01       	movw	r24, r14
    86a6:	b6 01       	movw	r22, r12
    86a8:	0e 94 2b e6 	call	0x1cc56	; 0x1cc56 <__mulsf3>
    86ac:	6b 01       	movw	r12, r22
    86ae:	7c 01       	movw	r14, r24
    86b0:	81 e0       	ldi	r24, 0x01	; 1
    86b2:	68 1a       	sub	r6, r24
    86b4:	71 08       	sbc	r7, r1
    86b6:	d9 f6       	brne	.-74     	; 0x866e <p_etoa+0x23a>
    86b8:	8e 01       	movw	r16, r28
    86ba:	0f 5f       	subi	r16, 0xFF	; 255
    86bc:	1f 4f       	sbci	r17, 0xFF	; 255
    86be:	f8 01       	movw	r30, r16
    86c0:	81 91       	ld	r24, Z+
    86c2:	8f 01       	movw	r16, r30
    86c4:	88 23       	and	r24, r24
    86c6:	11 f0       	breq	.+4      	; 0x86cc <p_etoa+0x298>
    86c8:	35 dd       	rcall	.-1430   	; 0x8134 <pch>
    86ca:	f9 cf       	rjmp	.-14     	; 0x86be <p_etoa+0x28a>
    86cc:	33 dd       	rcall	.-1434   	; 0x8134 <pch>
    86ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    86d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    86d2:	01 90       	ld	r0, Z+
    86d4:	00 20       	and	r0, r0
    86d6:	e9 f7       	brne	.-6      	; 0x86d2 <p_etoa+0x29e>
    86d8:	cf 01       	movw	r24, r30
    86da:	01 97       	sbiw	r24, 0x01	; 1
    86dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    86de:	3b 85       	ldd	r19, Y+11	; 0x0b
    86e0:	82 1b       	sub	r24, r18
    86e2:	93 0b       	sbc	r25, r19
    86e4:	2d 96       	adiw	r28, 0x0d	; 13
    86e6:	e2 e1       	ldi	r30, 0x12	; 18
    86e8:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

000086ec <_puts_pad>:
    86ec:	a0 e0       	ldi	r26, 0x00	; 0
    86ee:	b0 e0       	ldi	r27, 0x00	; 0
    86f0:	ec e7       	ldi	r30, 0x7C	; 124
    86f2:	f3 e4       	ldi	r31, 0x43	; 67
    86f4:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
    86f8:	6c 01       	movw	r12, r24
    86fa:	4b 01       	movw	r8, r22
    86fc:	79 01       	movw	r14, r18
    86fe:	24 17       	cp	r18, r20
    8700:	35 07       	cpc	r19, r21
    8702:	24 f4       	brge	.+8      	; 0x870c <_puts_pad+0x20>
    8704:	ea 01       	movw	r28, r20
    8706:	c2 1b       	sub	r28, r18
    8708:	d3 0b       	sbc	r29, r19
    870a:	02 c0       	rjmp	.+4      	; 0x8710 <_puts_pad+0x24>
    870c:	c0 e0       	ldi	r28, 0x00	; 0
    870e:	d0 e0       	ldi	r29, 0x00	; 0
    8710:	01 15       	cp	r16, r1
    8712:	11 05       	cpc	r17, r1
    8714:	49 f4       	brne	.+18     	; 0x8728 <_puts_pad+0x3c>
    8716:	21 97       	sbiw	r28, 0x01	; 1
    8718:	38 f0       	brcs	.+14     	; 0x8728 <_puts_pad+0x3c>
    871a:	d6 01       	movw	r26, r12
    871c:	ed 91       	ld	r30, X+
    871e:	fc 91       	ld	r31, X
    8720:	60 e2       	ldi	r22, 0x20	; 32
    8722:	c6 01       	movw	r24, r12
    8724:	09 95       	icall
    8726:	f7 cf       	rjmp	.-18     	; 0x8716 <_puts_pad+0x2a>
    8728:	54 01       	movw	r10, r8
    872a:	f5 01       	movw	r30, r10
    872c:	61 91       	ld	r22, Z+
    872e:	5f 01       	movw	r10, r30
    8730:	66 23       	and	r22, r22
    8732:	61 f0       	breq	.+24     	; 0x874c <_puts_pad+0x60>
    8734:	e1 14       	cp	r14, r1
    8736:	f1 04       	cpc	r15, r1
    8738:	49 f0       	breq	.+18     	; 0x874c <_puts_pad+0x60>
    873a:	d6 01       	movw	r26, r12
    873c:	ed 91       	ld	r30, X+
    873e:	fc 91       	ld	r31, X
    8740:	c6 01       	movw	r24, r12
    8742:	09 95       	icall
    8744:	b1 e0       	ldi	r27, 0x01	; 1
    8746:	eb 1a       	sub	r14, r27
    8748:	f1 08       	sbc	r15, r1
    874a:	ef cf       	rjmp	.-34     	; 0x872a <_puts_pad+0x3e>
    874c:	01 15       	cp	r16, r1
    874e:	11 05       	cpc	r17, r1
    8750:	51 f0       	breq	.+20     	; 0x8766 <_puts_pad+0x7a>
    8752:	20 97       	sbiw	r28, 0x00	; 0
    8754:	41 f0       	breq	.+16     	; 0x8766 <_puts_pad+0x7a>
    8756:	d6 01       	movw	r26, r12
    8758:	ed 91       	ld	r30, X+
    875a:	fc 91       	ld	r31, X
    875c:	60 e2       	ldi	r22, 0x20	; 32
    875e:	c6 01       	movw	r24, r12
    8760:	09 95       	icall
    8762:	21 97       	sbiw	r28, 0x01	; 1
    8764:	f6 cf       	rjmp	.-20     	; 0x8752 <_puts_pad+0x66>
    8766:	cd b7       	in	r28, 0x3d	; 61
    8768:	de b7       	in	r29, 0x3e	; 62
    876a:	ec e0       	ldi	r30, 0x0C	; 12
    876c:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

00008770 <_printf_fn>:
    8770:	ab e6       	ldi	r26, 0x6B	; 107
    8772:	b0 e0       	ldi	r27, 0x00	; 0
    8774:	ee eb       	ldi	r30, 0xBE	; 190
    8776:	f3 e4       	ldi	r31, 0x43	; 67
    8778:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    877c:	a5 96       	adiw	r28, 0x25	; 37
    877e:	9f af       	std	Y+63, r25	; 0x3f
    8780:	8e af       	std	Y+62, r24	; 0x3e
    8782:	a5 97       	sbiw	r28, 0x25	; 37
    8784:	6a 01       	movw	r12, r20
    8786:	e6 2e       	mov	r14, r22
    8788:	19 01       	movw	r2, r18
    878a:	a9 96       	adiw	r28, 0x29	; 41
    878c:	1c ae       	std	Y+60, r1	; 0x3c
    878e:	1d ae       	std	Y+61, r1	; 0x3d
    8790:	1e ae       	std	Y+62, r1	; 0x3e
    8792:	1f ae       	std	Y+63, r1	; 0x3f
    8794:	a9 97       	sbiw	r28, 0x29	; 41
    8796:	9e 01       	movw	r18, r28
    8798:	2f 5a       	subi	r18, 0xAF	; 175
    879a:	3f 4f       	sbci	r19, 0xFF	; 255
    879c:	67 96       	adiw	r28, 0x17	; 23
    879e:	3f af       	std	Y+63, r19	; 0x3f
    87a0:	2e af       	std	Y+62, r18	; 0x3e
    87a2:	67 97       	sbiw	r28, 0x17	; 23
    87a4:	ae 01       	movw	r20, r28
    87a6:	4d 5b       	subi	r20, 0xBD	; 189
    87a8:	5f 4f       	sbci	r21, 0xFF	; 255
    87aa:	69 96       	adiw	r28, 0x19	; 25
    87ac:	5f af       	std	Y+63, r21	; 0x3f
    87ae:	4e af       	std	Y+62, r20	; 0x3e
    87b0:	69 97       	sbiw	r28, 0x19	; 25
    87b2:	ce 01       	movw	r24, r28
    87b4:	85 5b       	subi	r24, 0xB5	; 181
    87b6:	9f 4f       	sbci	r25, 0xFF	; 255
    87b8:	6b 96       	adiw	r28, 0x1b	; 27
    87ba:	9f af       	std	Y+63, r25	; 0x3f
    87bc:	8e af       	std	Y+62, r24	; 0x3e
    87be:	6b 97       	sbiw	r28, 0x1b	; 27
    87c0:	de 01       	movw	r26, r28
    87c2:	ad 5a       	subi	r26, 0xAD	; 173
    87c4:	bf 4f       	sbci	r27, 0xFF	; 255
    87c6:	6d 96       	adiw	r28, 0x1d	; 29
    87c8:	bf af       	std	Y+63, r27	; 0x3f
    87ca:	ae af       	std	Y+62, r26	; 0x3e
    87cc:	6d 97       	sbiw	r28, 0x1d	; 29
    87ce:	f6 01       	movw	r30, r12
    87d0:	5e 2d       	mov	r21, r14
    87d2:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    87d6:	66 23       	and	r22, r22
    87d8:	09 f4       	brne	.+2      	; 0x87dc <_printf_fn+0x6c>
    87da:	df c3       	rjmp	.+1982   	; 0x8f9a <_printf_fn+0x82a>
    87dc:	ae 2d       	mov	r26, r14
    87de:	c6 01       	movw	r24, r12
    87e0:	01 96       	adiw	r24, 0x01	; 1
    87e2:	a1 1d       	adc	r26, r1
    87e4:	3c 01       	movw	r6, r24
    87e6:	8a 2e       	mov	r8, r26
    87e8:	65 32       	cpi	r22, 0x25	; 37
    87ea:	51 f0       	breq	.+20     	; 0x8800 <_printf_fn+0x90>
    87ec:	a5 96       	adiw	r28, 0x25	; 37
    87ee:	ae ad       	ldd	r26, Y+62	; 0x3e
    87f0:	bf ad       	ldd	r27, Y+63	; 0x3f
    87f2:	a5 97       	sbiw	r28, 0x25	; 37
    87f4:	ed 91       	ld	r30, X+
    87f6:	fc 91       	ld	r31, X
    87f8:	11 97       	sbiw	r26, 0x01	; 1
    87fa:	cd 01       	movw	r24, r26
    87fc:	09 95       	icall
    87fe:	99 c3       	rjmp	.+1842   	; 0x8f32 <_printf_fn+0x7c2>
    8800:	91 2c       	mov	r9, r1
    8802:	f3 01       	movw	r30, r6
    8804:	58 2d       	mov	r21, r8
    8806:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    880a:	63 32       	cpi	r22, 0x23	; 35
    880c:	19 f4       	brne	.+6      	; 0x8814 <_printf_fn+0xa4>
    880e:	68 94       	set
    8810:	97 f8       	bld	r9, 7
    8812:	04 c0       	rjmp	.+8      	; 0x881c <_printf_fn+0xac>
    8814:	6b 32       	cpi	r22, 0x2B	; 43
    8816:	39 f4       	brne	.+14     	; 0x8826 <_printf_fn+0xb6>
    8818:	68 94       	set
    881a:	92 f8       	bld	r9, 2
    881c:	bf ef       	ldi	r27, 0xFF	; 255
    881e:	6b 1a       	sub	r6, r27
    8820:	7b 0a       	sbc	r7, r27
    8822:	8b 0a       	sbc	r8, r27
    8824:	ee cf       	rjmp	.-36     	; 0x8802 <_printf_fn+0x92>
    8826:	6d 32       	cpi	r22, 0x2D	; 45
    8828:	a9 f4       	brne	.+42     	; 0x8854 <_printf_fn+0xe4>
    882a:	93 fc       	sbrc	r9, 3
    882c:	05 c0       	rjmp	.+10     	; 0x8838 <_printf_fn+0xc8>
    882e:	6d 32       	cpi	r22, 0x2D	; 45
    8830:	19 f4       	brne	.+6      	; 0x8838 <_printf_fn+0xc8>
    8832:	68 94       	set
    8834:	93 f8       	bld	r9, 3
    8836:	f2 cf       	rjmp	.-28     	; 0x881c <_printf_fn+0xac>
    8838:	94 fc       	sbrc	r9, 4
    883a:	05 c0       	rjmp	.+10     	; 0x8846 <_printf_fn+0xd6>
    883c:	60 32       	cpi	r22, 0x20	; 32
    883e:	19 f4       	brne	.+6      	; 0x8846 <_printf_fn+0xd6>
    8840:	68 94       	set
    8842:	94 f8       	bld	r9, 4
    8844:	eb cf       	rjmp	.-42     	; 0x881c <_printf_fn+0xac>
    8846:	95 fc       	sbrc	r9, 5
    8848:	e9 cf       	rjmp	.-46     	; 0x881c <_printf_fn+0xac>
    884a:	60 33       	cpi	r22, 0x30	; 48
    884c:	39 f7       	brne	.-50     	; 0x881c <_printf_fn+0xac>
    884e:	68 94       	set
    8850:	95 f8       	bld	r9, 5
    8852:	e4 cf       	rjmp	.-56     	; 0x881c <_printf_fn+0xac>
    8854:	86 2f       	mov	r24, r22
    8856:	8f 7e       	andi	r24, 0xEF	; 239
    8858:	80 32       	cpi	r24, 0x20	; 32
    885a:	39 f3       	breq	.-50     	; 0x882a <_printf_fn+0xba>
    885c:	70 e0       	ldi	r23, 0x00	; 0
    885e:	60 53       	subi	r22, 0x30	; 48
    8860:	71 09       	sbc	r23, r1
    8862:	41 2c       	mov	r4, r1
    8864:	51 2c       	mov	r5, r1
    8866:	6a 30       	cpi	r22, 0x0A	; 10
    8868:	71 05       	cpc	r23, r1
    886a:	e0 f4       	brcc	.+56     	; 0x88a4 <_printf_fn+0x134>
    886c:	2a e0       	ldi	r18, 0x0A	; 10
    886e:	f3 01       	movw	r30, r6
    8870:	58 2d       	mov	r21, r8
    8872:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    8876:	70 e0       	ldi	r23, 0x00	; 0
    8878:	cb 01       	movw	r24, r22
    887a:	c0 97       	sbiw	r24, 0x30	; 48
    887c:	0a 97       	sbiw	r24, 0x0a	; 10
    887e:	80 f4       	brcc	.+32     	; 0x88a0 <_printf_fn+0x130>
    8880:	ef ef       	ldi	r30, 0xFF	; 255
    8882:	6e 1a       	sub	r6, r30
    8884:	7e 0a       	sbc	r7, r30
    8886:	8e 0a       	sbc	r8, r30
    8888:	24 9d       	mul	r18, r4
    888a:	c0 01       	movw	r24, r0
    888c:	25 9d       	mul	r18, r5
    888e:	90 0d       	add	r25, r0
    8890:	11 24       	eor	r1, r1
    8892:	68 0f       	add	r22, r24
    8894:	79 1f       	adc	r23, r25
    8896:	2b 01       	movw	r4, r22
    8898:	f0 e3       	ldi	r31, 0x30	; 48
    889a:	4f 1a       	sub	r4, r31
    889c:	51 08       	sbc	r5, r1
    889e:	e7 cf       	rjmp	.-50     	; 0x886e <_printf_fn+0xfe>
    88a0:	68 94       	set
    88a2:	90 f8       	bld	r9, 0
    88a4:	f3 01       	movw	r30, r6
    88a6:	58 2d       	mov	r21, r8
    88a8:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    88ac:	6e 32       	cpi	r22, 0x2E	; 46
    88ae:	59 f5       	brne	.+86     	; 0x8906 <_printf_fn+0x196>
    88b0:	2f ef       	ldi	r18, 0xFF	; 255
    88b2:	62 1a       	sub	r6, r18
    88b4:	72 0a       	sbc	r7, r18
    88b6:	82 0a       	sbc	r8, r18
    88b8:	a1 96       	adiw	r28, 0x21	; 33
    88ba:	1f ae       	std	Y+63, r1	; 0x3f
    88bc:	1e ae       	std	Y+62, r1	; 0x3e
    88be:	a1 97       	sbiw	r28, 0x21	; 33
    88c0:	2a e0       	ldi	r18, 0x0A	; 10
    88c2:	f3 01       	movw	r30, r6
    88c4:	58 2d       	mov	r21, r8
    88c6:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    88ca:	70 e0       	ldi	r23, 0x00	; 0
    88cc:	cb 01       	movw	r24, r22
    88ce:	c0 97       	sbiw	r24, 0x30	; 48
    88d0:	0a 97       	sbiw	r24, 0x0a	; 10
    88d2:	b0 f4       	brcc	.+44     	; 0x8900 <_printf_fn+0x190>
    88d4:	3f ef       	ldi	r19, 0xFF	; 255
    88d6:	63 1a       	sub	r6, r19
    88d8:	73 0a       	sbc	r7, r19
    88da:	83 0a       	sbc	r8, r19
    88dc:	a1 96       	adiw	r28, 0x21	; 33
    88de:	4e ad       	ldd	r20, Y+62	; 0x3e
    88e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    88e2:	a1 97       	sbiw	r28, 0x21	; 33
    88e4:	24 9f       	mul	r18, r20
    88e6:	c0 01       	movw	r24, r0
    88e8:	25 9f       	mul	r18, r21
    88ea:	90 0d       	add	r25, r0
    88ec:	11 24       	eor	r1, r1
    88ee:	68 0f       	add	r22, r24
    88f0:	79 1f       	adc	r23, r25
    88f2:	cb 01       	movw	r24, r22
    88f4:	c0 97       	sbiw	r24, 0x30	; 48
    88f6:	a1 96       	adiw	r28, 0x21	; 33
    88f8:	9f af       	std	Y+63, r25	; 0x3f
    88fa:	8e af       	std	Y+62, r24	; 0x3e
    88fc:	a1 97       	sbiw	r28, 0x21	; 33
    88fe:	e1 cf       	rjmp	.-62     	; 0x88c2 <_printf_fn+0x152>
    8900:	68 94       	set
    8902:	91 f8       	bld	r9, 1
    8904:	04 c0       	rjmp	.+8      	; 0x890e <_printf_fn+0x19e>
    8906:	a1 96       	adiw	r28, 0x21	; 33
    8908:	1f ae       	std	Y+63, r1	; 0x3f
    890a:	1e ae       	std	Y+62, r1	; 0x3e
    890c:	a1 97       	sbiw	r28, 0x21	; 33
    890e:	f3 01       	movw	r30, r6
    8910:	58 2d       	mov	r21, r8
    8912:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    8916:	69 34       	cpi	r22, 0x49	; 73
    8918:	09 f0       	breq	.+2      	; 0x891c <_printf_fn+0x1ac>
    891a:	45 c0       	rjmp	.+138    	; 0x89a6 <_printf_fn+0x236>
    891c:	9f ef       	ldi	r25, 0xFF	; 255
    891e:	69 1a       	sub	r6, r25
    8920:	79 0a       	sbc	r7, r25
    8922:	89 0a       	sbc	r8, r25
    8924:	6f 96       	adiw	r28, 0x1f	; 31
    8926:	1f ae       	std	Y+63, r1	; 0x3f
    8928:	1e ae       	std	Y+62, r1	; 0x3e
    892a:	6f 97       	sbiw	r28, 0x1f	; 31
    892c:	2a e0       	ldi	r18, 0x0A	; 10
    892e:	f3 01       	movw	r30, r6
    8930:	58 2d       	mov	r21, r8
    8932:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    8936:	70 e0       	ldi	r23, 0x00	; 0
    8938:	cb 01       	movw	r24, r22
    893a:	c0 97       	sbiw	r24, 0x30	; 48
    893c:	0a 97       	sbiw	r24, 0x0a	; 10
    893e:	b8 f4       	brcc	.+46     	; 0x896e <_printf_fn+0x1fe>
    8940:	af ef       	ldi	r26, 0xFF	; 255
    8942:	6a 1a       	sub	r6, r26
    8944:	7a 0a       	sbc	r7, r26
    8946:	8a 0a       	sbc	r8, r26
    8948:	6f 96       	adiw	r28, 0x1f	; 31
    894a:	ee ad       	ldd	r30, Y+62	; 0x3e
    894c:	ff ad       	ldd	r31, Y+63	; 0x3f
    894e:	6f 97       	sbiw	r28, 0x1f	; 31
    8950:	2e 9f       	mul	r18, r30
    8952:	c0 01       	movw	r24, r0
    8954:	2f 9f       	mul	r18, r31
    8956:	90 0d       	add	r25, r0
    8958:	11 24       	eor	r1, r1
    895a:	68 0f       	add	r22, r24
    895c:	79 1f       	adc	r23, r25
    895e:	ab 01       	movw	r20, r22
    8960:	40 53       	subi	r20, 0x30	; 48
    8962:	51 09       	sbc	r21, r1
    8964:	6f 96       	adiw	r28, 0x1f	; 31
    8966:	5f af       	std	Y+63, r21	; 0x3f
    8968:	4e af       	std	Y+62, r20	; 0x3e
    896a:	6f 97       	sbiw	r28, 0x1f	; 31
    896c:	e0 cf       	rjmp	.-64     	; 0x892e <_printf_fn+0x1be>
    896e:	6f 96       	adiw	r28, 0x1f	; 31
    8970:	8e ad       	ldd	r24, Y+62	; 0x3e
    8972:	9f ad       	ldd	r25, Y+63	; 0x3f
    8974:	6f 97       	sbiw	r28, 0x1f	; 31
    8976:	00 97       	sbiw	r24, 0x00	; 0
    8978:	09 f4       	brne	.+2      	; 0x897c <_printf_fn+0x20c>
    897a:	4f c0       	rjmp	.+158    	; 0x8a1a <_printf_fn+0x2aa>
    897c:	87 70       	andi	r24, 0x07	; 7
    897e:	99 27       	eor	r25, r25
    8980:	89 2b       	or	r24, r25
    8982:	09 f0       	breq	.+2      	; 0x8986 <_printf_fn+0x216>
    8984:	46 c0       	rjmp	.+140    	; 0x8a12 <_printf_fn+0x2a2>
    8986:	6f 96       	adiw	r28, 0x1f	; 31
    8988:	ae ad       	ldd	r26, Y+62	; 0x3e
    898a:	bf ad       	ldd	r27, Y+63	; 0x3f
    898c:	6f 97       	sbiw	r28, 0x1f	; 31
    898e:	83 e0       	ldi	r24, 0x03	; 3
    8990:	b5 95       	asr	r27
    8992:	a7 95       	ror	r26
    8994:	8a 95       	dec	r24
    8996:	e1 f7       	brne	.-8      	; 0x8990 <_printf_fn+0x220>
    8998:	6f 96       	adiw	r28, 0x1f	; 31
    899a:	bf af       	std	Y+63, r27	; 0x3f
    899c:	ae af       	std	Y+62, r26	; 0x3e
    899e:	6f 97       	sbiw	r28, 0x1f	; 31
    89a0:	ab 2b       	or	r26, r27
    89a2:	d9 f1       	breq	.+118    	; 0x8a1a <_printf_fn+0x2aa>
    89a4:	27 c0       	rjmp	.+78     	; 0x89f4 <_printf_fn+0x284>
    89a6:	68 36       	cpi	r22, 0x68	; 104
    89a8:	29 f4       	brne	.+10     	; 0x89b4 <_printf_fn+0x244>
    89aa:	bf ef       	ldi	r27, 0xFF	; 255
    89ac:	6b 1a       	sub	r6, r27
    89ae:	7b 0a       	sbc	r7, r27
    89b0:	8b 0a       	sbc	r8, r27
    89b2:	c2 c2       	rjmp	.+1412   	; 0x8f38 <_printf_fn+0x7c8>
    89b4:	6c 36       	cpi	r22, 0x6C	; 108
    89b6:	09 f0       	breq	.+2      	; 0x89ba <_printf_fn+0x24a>
    89b8:	bf c2       	rjmp	.+1406   	; 0x8f38 <_printf_fn+0x7c8>
    89ba:	a8 2d       	mov	r26, r8
    89bc:	c3 01       	movw	r24, r6
    89be:	01 96       	adiw	r24, 0x01	; 1
    89c0:	a1 1d       	adc	r26, r1
    89c2:	fc 01       	movw	r30, r24
    89c4:	5a 2f       	mov	r21, r26
    89c6:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    89ca:	6c 36       	cpi	r22, 0x6C	; 108
    89cc:	49 f0       	breq	.+18     	; 0x89e0 <_printf_fn+0x270>
    89ce:	3c 01       	movw	r6, r24
    89d0:	8a 2e       	mov	r8, r26
    89d2:	24 e0       	ldi	r18, 0x04	; 4
    89d4:	30 e0       	ldi	r19, 0x00	; 0
    89d6:	6f 96       	adiw	r28, 0x1f	; 31
    89d8:	3f af       	std	Y+63, r19	; 0x3f
    89da:	2e af       	std	Y+62, r18	; 0x3e
    89dc:	6f 97       	sbiw	r28, 0x1f	; 31
    89de:	0a c0       	rjmp	.+20     	; 0x89f4 <_printf_fn+0x284>
    89e0:	32 e0       	ldi	r19, 0x02	; 2
    89e2:	63 0e       	add	r6, r19
    89e4:	71 1c       	adc	r7, r1
    89e6:	81 1c       	adc	r8, r1
    89e8:	48 e0       	ldi	r20, 0x08	; 8
    89ea:	50 e0       	ldi	r21, 0x00	; 0
    89ec:	6f 96       	adiw	r28, 0x1f	; 31
    89ee:	5f af       	std	Y+63, r21	; 0x3f
    89f0:	4e af       	std	Y+62, r20	; 0x3e
    89f2:	6f 97       	sbiw	r28, 0x1f	; 31
    89f4:	f3 01       	movw	r30, r6
    89f6:	58 2d       	mov	r21, r8
    89f8:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    89fc:	86 2f       	mov	r24, r22
    89fe:	90 e0       	ldi	r25, 0x00	; 0
    8a00:	a3 96       	adiw	r28, 0x23	; 35
    8a02:	9f af       	std	Y+63, r25	; 0x3f
    8a04:	8e af       	std	Y+62, r24	; 0x3e
    8a06:	a3 97       	sbiw	r28, 0x23	; 35
    8a08:	84 36       	cpi	r24, 0x64	; 100
    8a0a:	91 05       	cpc	r25, r1
    8a0c:	09 f4       	brne	.+2      	; 0x8a10 <_printf_fn+0x2a0>
    8a0e:	9b c2       	rjmp	.+1334   	; 0x8f46 <_printf_fn+0x7d6>
    8a10:	08 c0       	rjmp	.+16     	; 0x8a22 <_printf_fn+0x2b2>
    8a12:	6f 96       	adiw	r28, 0x1f	; 31
    8a14:	1f ae       	std	Y+63, r1	; 0x3f
    8a16:	1e ae       	std	Y+62, r1	; 0x3e
    8a18:	6f 97       	sbiw	r28, 0x1f	; 31
    8a1a:	a3 96       	adiw	r28, 0x23	; 35
    8a1c:	1f ae       	std	Y+63, r1	; 0x3f
    8a1e:	1e ae       	std	Y+62, r1	; 0x3e
    8a20:	a3 97       	sbiw	r28, 0x23	; 35
    8a22:	31 e0       	ldi	r19, 0x01	; 1
    8a24:	20 e0       	ldi	r18, 0x00	; 0
    8a26:	a3 96       	adiw	r28, 0x23	; 35
    8a28:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a2a:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a2c:	a3 97       	sbiw	r28, 0x23	; 35
    8a2e:	a4 34       	cpi	r26, 0x44	; 68
    8a30:	b1 05       	cpc	r27, r1
    8a32:	09 f0       	breq	.+2      	; 0x8a36 <_printf_fn+0x2c6>
    8a34:	30 e0       	ldi	r19, 0x00	; 0
    8a36:	83 2f       	mov	r24, r19
    8a38:	92 2f       	mov	r25, r18
    8a3a:	a3 96       	adiw	r28, 0x23	; 35
    8a3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a40:	a3 97       	sbiw	r28, 0x23	; 35
    8a42:	e2 54       	subi	r30, 0x42	; 66
    8a44:	f1 09       	sbc	r31, r1
    8a46:	e7 33       	cpi	r30, 0x37	; 55
    8a48:	f1 05       	cpc	r31, r1
    8a4a:	08 f0       	brcs	.+2      	; 0x8a4e <_printf_fn+0x2de>
    8a4c:	65 c1       	rjmp	.+714    	; 0x8d18 <_printf_fn+0x5a8>
    8a4e:	ea 5b       	subi	r30, 0xBA	; 186
    8a50:	ff 4f       	sbci	r31, 0xFF	; 255
    8a52:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
    8a56:	e2 e0       	ldi	r30, 0x02	; 2
    8a58:	f0 e0       	ldi	r31, 0x00	; 0
    8a5a:	6f 96       	adiw	r28, 0x1f	; 31
    8a5c:	ff af       	std	Y+63, r31	; 0x3f
    8a5e:	ee af       	std	Y+62, r30	; 0x3e
    8a60:	6f 97       	sbiw	r28, 0x1f	; 31
    8a62:	29 2d       	mov	r18, r9
    8a64:	28 72       	andi	r18, 0x28	; 40
    8a66:	28 32       	cpi	r18, 0x28	; 40
    8a68:	11 f4       	brne	.+4      	; 0x8a6e <_printf_fn+0x2fe>
    8a6a:	e8 94       	clt
    8a6c:	95 f8       	bld	r9, 5
    8a6e:	29 2d       	mov	r18, r9
    8a70:	22 72       	andi	r18, 0x22	; 34
    8a72:	22 32       	cpi	r18, 0x22	; 34
    8a74:	11 f4       	brne	.+4      	; 0x8a7a <_printf_fn+0x30a>
    8a76:	e8 94       	clt
    8a78:	95 f8       	bld	r9, 5
    8a7a:	29 2d       	mov	r18, r9
    8a7c:	21 72       	andi	r18, 0x21	; 33
    8a7e:	21 32       	cpi	r18, 0x21	; 33
    8a80:	59 f4       	brne	.+22     	; 0x8a98 <_printf_fn+0x328>
    8a82:	a1 96       	adiw	r28, 0x21	; 33
    8a84:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a86:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a88:	a1 97       	sbiw	r28, 0x21	; 33
    8a8a:	24 15       	cp	r18, r4
    8a8c:	35 05       	cpc	r19, r5
    8a8e:	24 f4       	brge	.+8      	; 0x8a98 <_printf_fn+0x328>
    8a90:	a1 96       	adiw	r28, 0x21	; 33
    8a92:	5f ae       	std	Y+63, r5	; 0x3f
    8a94:	4e ae       	std	Y+62, r4	; 0x3e
    8a96:	a1 97       	sbiw	r28, 0x21	; 33
    8a98:	29 2d       	mov	r18, r9
    8a9a:	23 72       	andi	r18, 0x23	; 35
    8a9c:	23 32       	cpi	r18, 0x23	; 35
    8a9e:	59 f4       	brne	.+22     	; 0x8ab6 <_printf_fn+0x346>
    8aa0:	a1 96       	adiw	r28, 0x21	; 33
    8aa2:	4e ad       	ldd	r20, Y+62	; 0x3e
    8aa4:	5f ad       	ldd	r21, Y+63	; 0x3f
    8aa6:	a1 97       	sbiw	r28, 0x21	; 33
    8aa8:	44 15       	cp	r20, r4
    8aaa:	55 05       	cpc	r21, r5
    8aac:	24 f4       	brge	.+8      	; 0x8ab6 <_printf_fn+0x346>
    8aae:	a1 96       	adiw	r28, 0x21	; 33
    8ab0:	5f ae       	std	Y+63, r5	; 0x3f
    8ab2:	4e ae       	std	Y+62, r4	; 0x3e
    8ab4:	a1 97       	sbiw	r28, 0x21	; 33
    8ab6:	e8 94       	clt
    8ab8:	94 f8       	bld	r9, 4
    8aba:	e8 94       	clt
    8abc:	92 f8       	bld	r9, 2
    8abe:	e8 94       	clt
    8ac0:	96 f8       	bld	r9, 6
    8ac2:	6f 96       	adiw	r28, 0x1f	; 31
    8ac4:	ae ad       	ldd	r26, Y+62	; 0x3e
    8ac6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ac8:	6f 97       	sbiw	r28, 0x1f	; 31
    8aca:	12 97       	sbiw	r26, 0x02	; 2
    8acc:	29 f5       	brne	.+74     	; 0x8b18 <_printf_fn+0x3a8>
    8ace:	51 01       	movw	r10, r2
    8ad0:	b2 e0       	ldi	r27, 0x02	; 2
    8ad2:	ab 0e       	add	r10, r27
    8ad4:	b1 1c       	adc	r11, r1
    8ad6:	f1 01       	movw	r30, r2
    8ad8:	80 81       	ld	r24, Z
    8ada:	91 81       	ldd	r25, Z+1	; 0x01
    8adc:	65 96       	adiw	r28, 0x15	; 21
    8ade:	9f af       	std	Y+63, r25	; 0x3f
    8ae0:	8e af       	std	Y+62, r24	; 0x3e
    8ae2:	65 97       	sbiw	r28, 0x15	; 21
    8ae4:	a3 96       	adiw	r28, 0x23	; 35
    8ae6:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ae8:	3f ad       	ldd	r19, Y+63	; 0x3f
    8aea:	a3 97       	sbiw	r28, 0x23	; 35
    8aec:	24 34       	cpi	r18, 0x44	; 68
    8aee:	31 05       	cpc	r19, r1
    8af0:	09 f0       	breq	.+2      	; 0x8af4 <_printf_fn+0x384>
    8af2:	c0 c0       	rjmp	.+384    	; 0x8c74 <_printf_fn+0x504>
    8af4:	97 ff       	sbrs	r25, 7
    8af6:	b8 c0       	rjmp	.+368    	; 0x8c68 <_printf_fn+0x4f8>
    8af8:	68 94       	set
    8afa:	96 f8       	bld	r9, 6
    8afc:	91 95       	neg	r25
    8afe:	81 95       	neg	r24
    8b00:	91 09       	sbc	r25, r1
    8b02:	65 96       	adiw	r28, 0x15	; 21
    8b04:	9f af       	std	Y+63, r25	; 0x3f
    8b06:	8e af       	std	Y+62, r24	; 0x3e
    8b08:	65 97       	sbiw	r28, 0x15	; 21
    8b0a:	42 e0       	ldi	r20, 0x02	; 2
    8b0c:	50 e0       	ldi	r21, 0x00	; 0
    8b0e:	6f 96       	adiw	r28, 0x1f	; 31
    8b10:	5f af       	std	Y+63, r21	; 0x3f
    8b12:	4e af       	std	Y+62, r20	; 0x3e
    8b14:	6f 97       	sbiw	r28, 0x1f	; 31
    8b16:	ae c0       	rjmp	.+348    	; 0x8c74 <_printf_fn+0x504>
    8b18:	6f 96       	adiw	r28, 0x1f	; 31
    8b1a:	ae ad       	ldd	r26, Y+62	; 0x3e
    8b1c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8b1e:	6f 97       	sbiw	r28, 0x1f	; 31
    8b20:	14 97       	sbiw	r26, 0x04	; 4
    8b22:	59 f5       	brne	.+86     	; 0x8b7a <_printf_fn+0x40a>
    8b24:	51 01       	movw	r10, r2
    8b26:	b4 e0       	ldi	r27, 0x04	; 4
    8b28:	ab 0e       	add	r10, r27
    8b2a:	b1 1c       	adc	r11, r1
    8b2c:	f1 01       	movw	r30, r2
    8b2e:	80 81       	ld	r24, Z
    8b30:	91 81       	ldd	r25, Z+1	; 0x01
    8b32:	a2 81       	ldd	r26, Z+2	; 0x02
    8b34:	b3 81       	ldd	r27, Z+3	; 0x03
    8b36:	2f 96       	adiw	r28, 0x0f	; 15
    8b38:	8c af       	std	Y+60, r24	; 0x3c
    8b3a:	9d af       	std	Y+61, r25	; 0x3d
    8b3c:	ae af       	std	Y+62, r26	; 0x3e
    8b3e:	bf af       	std	Y+63, r27	; 0x3f
    8b40:	2f 97       	sbiw	r28, 0x0f	; 15
    8b42:	a3 96       	adiw	r28, 0x23	; 35
    8b44:	2e ad       	ldd	r18, Y+62	; 0x3e
    8b46:	3f ad       	ldd	r19, Y+63	; 0x3f
    8b48:	a3 97       	sbiw	r28, 0x23	; 35
    8b4a:	24 34       	cpi	r18, 0x44	; 68
    8b4c:	31 05       	cpc	r19, r1
    8b4e:	09 f0       	breq	.+2      	; 0x8b52 <_printf_fn+0x3e2>
    8b50:	9e c0       	rjmp	.+316    	; 0x8c8e <_printf_fn+0x51e>
    8b52:	b7 ff       	sbrs	r27, 7
    8b54:	96 c0       	rjmp	.+300    	; 0x8c82 <_printf_fn+0x512>
    8b56:	68 94       	set
    8b58:	96 f8       	bld	r9, 6
    8b5a:	b0 95       	com	r27
    8b5c:	a0 95       	com	r26
    8b5e:	90 95       	com	r25
    8b60:	81 95       	neg	r24
    8b62:	9f 4f       	sbci	r25, 0xFF	; 255
    8b64:	af 4f       	sbci	r26, 0xFF	; 255
    8b66:	bf 4f       	sbci	r27, 0xFF	; 255
    8b68:	2f 96       	adiw	r28, 0x0f	; 15
    8b6a:	8c af       	std	Y+60, r24	; 0x3c
    8b6c:	9d af       	std	Y+61, r25	; 0x3d
    8b6e:	ae af       	std	Y+62, r26	; 0x3e
    8b70:	bf af       	std	Y+63, r27	; 0x3f
    8b72:	2f 97       	sbiw	r28, 0x0f	; 15
    8b74:	86 c0       	rjmp	.+268    	; 0x8c82 <_printf_fn+0x512>
    8b76:	81 e0       	ldi	r24, 0x01	; 1
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	6f 96       	adiw	r28, 0x1f	; 31
    8b7c:	ae ad       	ldd	r26, Y+62	; 0x3e
    8b7e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8b80:	6f 97       	sbiw	r28, 0x1f	; 31
    8b82:	51 01       	movw	r10, r2
    8b84:	18 97       	sbiw	r26, 0x08	; 8
    8b86:	09 f0       	breq	.+2      	; 0x8b8a <_printf_fn+0x41a>
    8b88:	89 c0       	rjmp	.+274    	; 0x8c9c <_printf_fn+0x52c>
    8b8a:	b8 e0       	ldi	r27, 0x08	; 8
    8b8c:	ab 0e       	add	r10, r27
    8b8e:	b1 1c       	adc	r11, r1
    8b90:	f1 01       	movw	r30, r2
    8b92:	f0 81       	ld	r31, Z
    8b94:	aa 96       	adiw	r28, 0x2a	; 42
    8b96:	ff af       	std	Y+63, r31	; 0x3f
    8b98:	aa 97       	sbiw	r28, 0x2a	; 42
    8b9a:	d1 01       	movw	r26, r2
    8b9c:	11 96       	adiw	r26, 0x01	; 1
    8b9e:	fc 90       	ld	r15, X
    8ba0:	11 97       	sbiw	r26, 0x01	; 1
    8ba2:	12 96       	adiw	r26, 0x02	; 2
    8ba4:	0c 91       	ld	r16, X
    8ba6:	12 97       	sbiw	r26, 0x02	; 2
    8ba8:	13 96       	adiw	r26, 0x03	; 3
    8baa:	1c 91       	ld	r17, X
    8bac:	13 97       	sbiw	r26, 0x03	; 3
    8bae:	14 96       	adiw	r26, 0x04	; 4
    8bb0:	bc 91       	ld	r27, X
    8bb2:	f1 01       	movw	r30, r2
    8bb4:	f5 81       	ldd	r31, Z+5	; 0x05
    8bb6:	ab 96       	adiw	r28, 0x2b	; 43
    8bb8:	ff af       	std	Y+63, r31	; 0x3f
    8bba:	ab 97       	sbiw	r28, 0x2b	; 43
    8bbc:	f1 01       	movw	r30, r2
    8bbe:	f6 81       	ldd	r31, Z+6	; 0x06
    8bc0:	ac 96       	adiw	r28, 0x2c	; 44
    8bc2:	ff af       	std	Y+63, r31	; 0x3f
    8bc4:	ac 97       	sbiw	r28, 0x2c	; 44
    8bc6:	f1 01       	movw	r30, r2
    8bc8:	37 80       	ldd	r3, Z+7	; 0x07
    8bca:	aa 96       	adiw	r28, 0x2a	; 42
    8bcc:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bce:	aa 97       	sbiw	r28, 0x2a	; 42
    8bd0:	24 96       	adiw	r28, 0x04	; 4
    8bd2:	ff af       	std	Y+63, r31	; 0x3f
    8bd4:	24 97       	sbiw	r28, 0x04	; 4
    8bd6:	25 96       	adiw	r28, 0x05	; 5
    8bd8:	ff ae       	std	Y+63, r15	; 0x3f
    8bda:	25 97       	sbiw	r28, 0x05	; 5
    8bdc:	26 96       	adiw	r28, 0x06	; 6
    8bde:	0f af       	std	Y+63, r16	; 0x3f
    8be0:	26 97       	sbiw	r28, 0x06	; 6
    8be2:	27 96       	adiw	r28, 0x07	; 7
    8be4:	1f af       	std	Y+63, r17	; 0x3f
    8be6:	27 97       	sbiw	r28, 0x07	; 7
    8be8:	28 96       	adiw	r28, 0x08	; 8
    8bea:	bf af       	std	Y+63, r27	; 0x3f
    8bec:	28 97       	sbiw	r28, 0x08	; 8
    8bee:	ab 96       	adiw	r28, 0x2b	; 43
    8bf0:	ef ad       	ldd	r30, Y+63	; 0x3f
    8bf2:	ab 97       	sbiw	r28, 0x2b	; 43
    8bf4:	29 96       	adiw	r28, 0x09	; 9
    8bf6:	ef af       	std	Y+63, r30	; 0x3f
    8bf8:	29 97       	sbiw	r28, 0x09	; 9
    8bfa:	ac 96       	adiw	r28, 0x2c	; 44
    8bfc:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bfe:	ac 97       	sbiw	r28, 0x2c	; 44
    8c00:	2a 96       	adiw	r28, 0x0a	; 10
    8c02:	ff af       	std	Y+63, r31	; 0x3f
    8c04:	2a 97       	sbiw	r28, 0x0a	; 10
    8c06:	2b 96       	adiw	r28, 0x0b	; 11
    8c08:	3f ae       	std	Y+63, r3	; 0x3f
    8c0a:	2b 97       	sbiw	r28, 0x0b	; 11
    8c0c:	89 2b       	or	r24, r25
    8c0e:	09 f4       	brne	.+2      	; 0x8c12 <_printf_fn+0x4a2>
    8c10:	50 c0       	rjmp	.+160    	; 0x8cb2 <_printf_fn+0x542>
    8c12:	aa 96       	adiw	r28, 0x2a	; 42
    8c14:	2f ad       	ldd	r18, Y+63	; 0x3f
    8c16:	aa 97       	sbiw	r28, 0x2a	; 42
    8c18:	3f 2d       	mov	r19, r15
    8c1a:	a8 01       	movw	r20, r16
    8c1c:	6b 2f       	mov	r22, r27
    8c1e:	7e 2f       	mov	r23, r30
    8c20:	8f 2f       	mov	r24, r31
    8c22:	93 2d       	mov	r25, r3
    8c24:	a0 e0       	ldi	r26, 0x00	; 0
    8c26:	0e 94 67 e4 	call	0x1c8ce	; 0x1c8ce <__cmpdi2_s8>
    8c2a:	0c f0       	brlt	.+2      	; 0x8c2e <_printf_fn+0x4be>
    8c2c:	42 c0       	rjmp	.+132    	; 0x8cb2 <_printf_fn+0x542>
    8c2e:	68 94       	set
    8c30:	96 f8       	bld	r9, 6
    8c32:	0e 94 19 e4 	call	0x1c832	; 0x1c832 <__negdi2>
    8c36:	24 96       	adiw	r28, 0x04	; 4
    8c38:	2f af       	std	Y+63, r18	; 0x3f
    8c3a:	24 97       	sbiw	r28, 0x04	; 4
    8c3c:	25 96       	adiw	r28, 0x05	; 5
    8c3e:	3f af       	std	Y+63, r19	; 0x3f
    8c40:	25 97       	sbiw	r28, 0x05	; 5
    8c42:	26 96       	adiw	r28, 0x06	; 6
    8c44:	4f af       	std	Y+63, r20	; 0x3f
    8c46:	26 97       	sbiw	r28, 0x06	; 6
    8c48:	27 96       	adiw	r28, 0x07	; 7
    8c4a:	5f af       	std	Y+63, r21	; 0x3f
    8c4c:	27 97       	sbiw	r28, 0x07	; 7
    8c4e:	28 96       	adiw	r28, 0x08	; 8
    8c50:	6f af       	std	Y+63, r22	; 0x3f
    8c52:	28 97       	sbiw	r28, 0x08	; 8
    8c54:	29 96       	adiw	r28, 0x09	; 9
    8c56:	7f af       	std	Y+63, r23	; 0x3f
    8c58:	29 97       	sbiw	r28, 0x09	; 9
    8c5a:	2a 96       	adiw	r28, 0x0a	; 10
    8c5c:	8f af       	std	Y+63, r24	; 0x3f
    8c5e:	2a 97       	sbiw	r28, 0x0a	; 10
    8c60:	2b 96       	adiw	r28, 0x0b	; 11
    8c62:	9f af       	std	Y+63, r25	; 0x3f
    8c64:	2b 97       	sbiw	r28, 0x0b	; 11
    8c66:	25 c0       	rjmp	.+74     	; 0x8cb2 <_printf_fn+0x542>
    8c68:	22 e0       	ldi	r18, 0x02	; 2
    8c6a:	30 e0       	ldi	r19, 0x00	; 0
    8c6c:	6f 96       	adiw	r28, 0x1f	; 31
    8c6e:	3f af       	std	Y+63, r19	; 0x3f
    8c70:	2e af       	std	Y+62, r18	; 0x3e
    8c72:	6f 97       	sbiw	r28, 0x1f	; 31
    8c74:	6c 96       	adiw	r28, 0x1c	; 28
    8c76:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c78:	6c 97       	sbiw	r28, 0x1c	; 28
    8c7a:	6d 96       	adiw	r28, 0x1d	; 29
    8c7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c7e:	6d 97       	sbiw	r28, 0x1d	; 29
    8c80:	1e c0       	rjmp	.+60     	; 0x8cbe <_printf_fn+0x54e>
    8c82:	44 e0       	ldi	r20, 0x04	; 4
    8c84:	50 e0       	ldi	r21, 0x00	; 0
    8c86:	6f 96       	adiw	r28, 0x1f	; 31
    8c88:	5f af       	std	Y+63, r21	; 0x3f
    8c8a:	4e af       	std	Y+62, r20	; 0x3e
    8c8c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c8e:	6a 96       	adiw	r28, 0x1a	; 26
    8c90:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c92:	6a 97       	sbiw	r28, 0x1a	; 26
    8c94:	6b 96       	adiw	r28, 0x1b	; 27
    8c96:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c98:	6b 97       	sbiw	r28, 0x1b	; 27
    8c9a:	11 c0       	rjmp	.+34     	; 0x8cbe <_printf_fn+0x54e>
    8c9c:	66 96       	adiw	r28, 0x16	; 22
    8c9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ca0:	66 97       	sbiw	r28, 0x16	; 22
    8ca2:	67 96       	adiw	r28, 0x17	; 23
    8ca4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ca6:	67 97       	sbiw	r28, 0x17	; 23
    8ca8:	a3 96       	adiw	r28, 0x23	; 35
    8caa:	1f ae       	std	Y+63, r1	; 0x3f
    8cac:	1e ae       	std	Y+62, r1	; 0x3e
    8cae:	a3 97       	sbiw	r28, 0x23	; 35
    8cb0:	06 c0       	rjmp	.+12     	; 0x8cbe <_printf_fn+0x54e>
    8cb2:	68 96       	adiw	r28, 0x18	; 24
    8cb4:	8f ad       	ldd	r24, Y+63	; 0x3f
    8cb6:	68 97       	sbiw	r28, 0x18	; 24
    8cb8:	69 96       	adiw	r28, 0x19	; 25
    8cba:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cbc:	69 97       	sbiw	r28, 0x19	; 25
    8cbe:	5f ef       	ldi	r21, 0xFF	; 255
    8cc0:	65 1a       	sub	r6, r21
    8cc2:	75 0a       	sbc	r7, r21
    8cc4:	85 0a       	sbc	r8, r21
    8cc6:	15 01       	movw	r2, r10
    8cc8:	2d c0       	rjmp	.+90     	; 0x8d24 <_printf_fn+0x5b4>
    8cca:	91 fc       	sbrc	r9, 1
    8ccc:	08 c0       	rjmp	.+16     	; 0x8cde <_printf_fn+0x56e>
    8cce:	68 94       	set
    8cd0:	91 f8       	bld	r9, 1
    8cd2:	86 e0       	ldi	r24, 0x06	; 6
    8cd4:	90 e0       	ldi	r25, 0x00	; 0
    8cd6:	a1 96       	adiw	r28, 0x21	; 33
    8cd8:	9f af       	std	Y+63, r25	; 0x3f
    8cda:	8e af       	std	Y+62, r24	; 0x3e
    8cdc:	a1 97       	sbiw	r28, 0x21	; 33
    8cde:	d1 01       	movw	r26, r2
    8ce0:	2d 91       	ld	r18, X+
    8ce2:	3d 91       	ld	r19, X+
    8ce4:	4d 91       	ld	r20, X+
    8ce6:	5c 91       	ld	r21, X
    8ce8:	a9 96       	adiw	r28, 0x29	; 41
    8cea:	2c af       	std	Y+60, r18	; 0x3c
    8cec:	3d af       	std	Y+61, r19	; 0x3d
    8cee:	4e af       	std	Y+62, r20	; 0x3e
    8cf0:	5f af       	std	Y+63, r21	; 0x3f
    8cf2:	a9 97       	sbiw	r28, 0x29	; 41
    8cf4:	bf ef       	ldi	r27, 0xFF	; 255
    8cf6:	6b 1a       	sub	r6, r27
    8cf8:	7b 0a       	sbc	r7, r27
    8cfa:	8b 0a       	sbc	r8, r27
    8cfc:	f1 01       	movw	r30, r2
    8cfe:	34 96       	adiw	r30, 0x04	; 4
    8d00:	1f 01       	movw	r2, r30
    8d02:	0a c0       	rjmp	.+20     	; 0x8d18 <_printf_fn+0x5a8>
    8d04:	ff ef       	ldi	r31, 0xFF	; 255
    8d06:	6f 1a       	sub	r6, r31
    8d08:	7f 0a       	sbc	r7, r31
    8d0a:	8f 0a       	sbc	r8, r31
    8d0c:	b0 c0       	rjmp	.+352    	; 0x8e6e <_printf_fn+0x6fe>
    8d0e:	2f ef       	ldi	r18, 0xFF	; 255
    8d10:	62 1a       	sub	r6, r18
    8d12:	72 0a       	sbc	r7, r18
    8d14:	82 0a       	sbc	r8, r18
    8d16:	b8 c0       	rjmp	.+368    	; 0x8e88 <_printf_fn+0x718>
    8d18:	66 96       	adiw	r28, 0x16	; 22
    8d1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8d1c:	66 97       	sbiw	r28, 0x16	; 22
    8d1e:	67 96       	adiw	r28, 0x17	; 23
    8d20:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d22:	67 97       	sbiw	r28, 0x17	; 23
    8d24:	a3 96       	adiw	r28, 0x23	; 35
    8d26:	ee ad       	ldd	r30, Y+62	; 0x3e
    8d28:	ff ad       	ldd	r31, Y+63	; 0x3f
    8d2a:	a3 97       	sbiw	r28, 0x23	; 35
    8d2c:	e2 54       	subi	r30, 0x42	; 66
    8d2e:	f1 09       	sbc	r31, r1
    8d30:	e7 33       	cpi	r30, 0x37	; 55
    8d32:	f1 05       	cpc	r31, r1
    8d34:	08 f0       	brcs	.+2      	; 0x8d38 <_printf_fn+0x5c8>
    8d36:	f9 c0       	rjmp	.+498    	; 0x8f2a <_printf_fn+0x7ba>
    8d38:	e3 58       	subi	r30, 0x83	; 131
    8d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    8d3c:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
    8d40:	e8 94       	clt
    8d42:	94 f8       	bld	r9, 4
    8d44:	e8 94       	clt
    8d46:	92 f8       	bld	r9, 2
    8d48:	a9 2c       	mov	r10, r9
    8d4a:	b1 2c       	mov	r11, r1
    8d4c:	a1 96       	adiw	r28, 0x21	; 33
    8d4e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8d50:	df ac       	ldd	r13, Y+63	; 0x3f
    8d52:	a1 97       	sbiw	r28, 0x21	; 33
    8d54:	72 01       	movw	r14, r4
    8d56:	0a e0       	ldi	r16, 0x0A	; 10
    8d58:	10 e0       	ldi	r17, 0x00	; 0
    8d5a:	13 c0       	rjmp	.+38     	; 0x8d82 <_printf_fn+0x612>
    8d5c:	a9 2c       	mov	r10, r9
    8d5e:	b1 2c       	mov	r11, r1
    8d60:	a1 96       	adiw	r28, 0x21	; 33
    8d62:	ce ac       	ldd	r12, Y+62	; 0x3e
    8d64:	df ac       	ldd	r13, Y+63	; 0x3f
    8d66:	a1 97       	sbiw	r28, 0x21	; 33
    8d68:	72 01       	movw	r14, r4
    8d6a:	02 e0       	ldi	r16, 0x02	; 2
    8d6c:	10 e0       	ldi	r17, 0x00	; 0
    8d6e:	09 c0       	rjmp	.+18     	; 0x8d82 <_printf_fn+0x612>
    8d70:	a9 2c       	mov	r10, r9
    8d72:	b1 2c       	mov	r11, r1
    8d74:	a1 96       	adiw	r28, 0x21	; 33
    8d76:	ce ac       	ldd	r12, Y+62	; 0x3e
    8d78:	df ac       	ldd	r13, Y+63	; 0x3f
    8d7a:	a1 97       	sbiw	r28, 0x21	; 33
    8d7c:	72 01       	movw	r14, r4
    8d7e:	08 e0       	ldi	r16, 0x08	; 8
    8d80:	10 e0       	ldi	r17, 0x00	; 0
    8d82:	22 e4       	ldi	r18, 0x42	; 66
    8d84:	30 e0       	ldi	r19, 0x00	; 0
    8d86:	ae 01       	movw	r20, r28
    8d88:	4f 5f       	subi	r20, 0xFF	; 255
    8d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    8d8c:	6f 96       	adiw	r28, 0x1f	; 31
    8d8e:	6e ad       	ldd	r22, Y+62	; 0x3e
    8d90:	7f ad       	ldd	r23, Y+63	; 0x3f
    8d92:	6f 97       	sbiw	r28, 0x1f	; 31
    8d94:	f3 d9       	rcall	.-3098   	; 0x817c <p_ntoa>
    8d96:	30 c0       	rjmp	.+96     	; 0x8df8 <_printf_fn+0x688>
    8d98:	a9 2c       	mov	r10, r9
    8d9a:	b1 2c       	mov	r11, r1
    8d9c:	a1 96       	adiw	r28, 0x21	; 33
    8d9e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8da0:	df ac       	ldd	r13, Y+63	; 0x3f
    8da2:	a1 97       	sbiw	r28, 0x21	; 33
    8da4:	72 01       	movw	r14, r4
    8da6:	00 e1       	ldi	r16, 0x10	; 16
    8da8:	10 e0       	ldi	r17, 0x00	; 0
    8daa:	22 e4       	ldi	r18, 0x42	; 66
    8dac:	30 e0       	ldi	r19, 0x00	; 0
    8dae:	ae 01       	movw	r20, r28
    8db0:	4f 5f       	subi	r20, 0xFF	; 255
    8db2:	5f 4f       	sbci	r21, 0xFF	; 255
    8db4:	6f 96       	adiw	r28, 0x1f	; 31
    8db6:	6e ad       	ldd	r22, Y+62	; 0x3e
    8db8:	7f ad       	ldd	r23, Y+63	; 0x3f
    8dba:	6f 97       	sbiw	r28, 0x1f	; 31
    8dbc:	df d9       	rcall	.-3138   	; 0x817c <p_ntoa>
    8dbe:	7c 01       	movw	r14, r24
    8dc0:	a3 96       	adiw	r28, 0x23	; 35
    8dc2:	6e ad       	ldd	r22, Y+62	; 0x3e
    8dc4:	7f ad       	ldd	r23, Y+63	; 0x3f
    8dc6:	a3 97       	sbiw	r28, 0x23	; 35
    8dc8:	67 7f       	andi	r22, 0xF7	; 247
    8dca:	60 35       	cpi	r22, 0x50	; 80
    8dcc:	71 05       	cpc	r23, r1
    8dce:	c9 f5       	brne	.+114    	; 0x8e42 <_printf_fn+0x6d2>
    8dd0:	34 c0       	rjmp	.+104    	; 0x8e3a <_printf_fn+0x6ca>
    8dd2:	c9 2c       	mov	r12, r9
    8dd4:	d1 2c       	mov	r13, r1
    8dd6:	a1 96       	adiw	r28, 0x21	; 33
    8dd8:	ee ac       	ldd	r14, Y+62	; 0x3e
    8dda:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ddc:	a1 97       	sbiw	r28, 0x21	; 33
    8dde:	82 01       	movw	r16, r4
    8de0:	22 e4       	ldi	r18, 0x42	; 66
    8de2:	30 e0       	ldi	r19, 0x00	; 0
    8de4:	ae 01       	movw	r20, r28
    8de6:	4f 5f       	subi	r20, 0xFF	; 255
    8de8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dea:	a9 96       	adiw	r28, 0x29	; 41
    8dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    8dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    8df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8df4:	a9 97       	sbiw	r28, 0x29	; 41
    8df6:	17 da       	rcall	.-3026   	; 0x8226 <p_ftoa>
    8df8:	93 fa       	bst	r9, 3
    8dfa:	00 27       	eor	r16, r16
    8dfc:	00 f9       	bld	r16, 0
    8dfe:	10 e0       	ldi	r17, 0x00	; 0
    8e00:	9c 01       	movw	r18, r24
    8e02:	24 c0       	rjmp	.+72     	; 0x8e4c <_printf_fn+0x6dc>
    8e04:	c9 2c       	mov	r12, r9
    8e06:	d1 2c       	mov	r13, r1
    8e08:	a1 96       	adiw	r28, 0x21	; 33
    8e0a:	ee ac       	ldd	r14, Y+62	; 0x3e
    8e0c:	ff ac       	ldd	r15, Y+63	; 0x3f
    8e0e:	a1 97       	sbiw	r28, 0x21	; 33
    8e10:	82 01       	movw	r16, r4
    8e12:	22 e4       	ldi	r18, 0x42	; 66
    8e14:	30 e0       	ldi	r19, 0x00	; 0
    8e16:	ae 01       	movw	r20, r28
    8e18:	4f 5f       	subi	r20, 0xFF	; 255
    8e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    8e1c:	a9 96       	adiw	r28, 0x29	; 41
    8e1e:	6c ad       	ldd	r22, Y+60	; 0x3c
    8e20:	7d ad       	ldd	r23, Y+61	; 0x3d
    8e22:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e24:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e26:	a9 97       	sbiw	r28, 0x29	; 41
    8e28:	05 db       	rcall	.-2550   	; 0x8434 <p_etoa>
    8e2a:	7c 01       	movw	r14, r24
    8e2c:	a3 96       	adiw	r28, 0x23	; 35
    8e2e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8e30:	5f ad       	ldd	r21, Y+63	; 0x3f
    8e32:	a3 97       	sbiw	r28, 0x23	; 35
    8e34:	45 34       	cpi	r20, 0x45	; 69
    8e36:	51 05       	cpc	r21, r1
    8e38:	21 f4       	brne	.+8      	; 0x8e42 <_printf_fn+0x6d2>
    8e3a:	ce 01       	movw	r24, r28
    8e3c:	01 96       	adiw	r24, 0x01	; 1
    8e3e:	0e 94 8c 33 	call	0x6718	; 0x6718 <strupper>
    8e42:	93 fa       	bst	r9, 3
    8e44:	00 27       	eor	r16, r16
    8e46:	00 f9       	bld	r16, 0
    8e48:	10 e0       	ldi	r17, 0x00	; 0
    8e4a:	97 01       	movw	r18, r14
    8e4c:	a2 01       	movw	r20, r4
    8e4e:	be 01       	movw	r22, r28
    8e50:	6f 5f       	subi	r22, 0xFF	; 255
    8e52:	7f 4f       	sbci	r23, 0xFF	; 255
    8e54:	a5 96       	adiw	r28, 0x25	; 37
    8e56:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e58:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e5a:	a5 97       	sbiw	r28, 0x25	; 37
    8e5c:	47 dc       	rcall	.-1906   	; 0x86ec <_puts_pad>
    8e5e:	69 c0       	rjmp	.+210    	; 0x8f32 <_printf_fn+0x7c2>
    8e60:	a3 96       	adiw	r28, 0x23	; 35
    8e62:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e64:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e66:	a3 97       	sbiw	r28, 0x23	; 35
    8e68:	83 37       	cpi	r24, 0x73	; 115
    8e6a:	91 05       	cpc	r25, r1
    8e6c:	69 f4       	brne	.+26     	; 0x8e88 <_printf_fn+0x718>
    8e6e:	71 01       	movw	r14, r2
    8e70:	92 e0       	ldi	r25, 0x02	; 2
    8e72:	e9 0e       	add	r14, r25
    8e74:	f1 1c       	adc	r15, r1
    8e76:	d1 01       	movw	r26, r2
    8e78:	6d 91       	ld	r22, X+
    8e7a:	7c 91       	ld	r23, X
    8e7c:	61 15       	cp	r22, r1
    8e7e:	71 05       	cpc	r23, r1
    8e80:	91 f4       	brne	.+36     	; 0x8ea6 <_printf_fn+0x736>
    8e82:	69 ee       	ldi	r22, 0xE9	; 233
    8e84:	77 e0       	ldi	r23, 0x07	; 7
    8e86:	0f c0       	rjmp	.+30     	; 0x8ea6 <_printf_fn+0x736>
    8e88:	71 01       	movw	r14, r2
    8e8a:	b2 e0       	ldi	r27, 0x02	; 2
    8e8c:	eb 0e       	add	r14, r27
    8e8e:	f1 1c       	adc	r15, r1
    8e90:	f1 01       	movw	r30, r2
    8e92:	80 81       	ld	r24, Z
    8e94:	60 96       	adiw	r28, 0x10	; 16
    8e96:	8f af       	std	Y+63, r24	; 0x3f
    8e98:	60 97       	sbiw	r28, 0x10	; 16
    8e9a:	61 96       	adiw	r28, 0x11	; 17
    8e9c:	1f ae       	std	Y+63, r1	; 0x3f
    8e9e:	61 97       	sbiw	r28, 0x11	; 17
    8ea0:	be 01       	movw	r22, r28
    8ea2:	61 5b       	subi	r22, 0xB1	; 177
    8ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    8ea6:	fb 01       	movw	r30, r22
    8ea8:	01 90       	ld	r0, Z+
    8eaa:	00 20       	and	r0, r0
    8eac:	e9 f7       	brne	.-6      	; 0x8ea8 <_printf_fn+0x738>
    8eae:	31 97       	sbiw	r30, 0x01	; 1
    8eb0:	e6 1b       	sub	r30, r22
    8eb2:	f7 0b       	sbc	r31, r23
    8eb4:	a1 96       	adiw	r28, 0x21	; 33
    8eb6:	2e ad       	ldd	r18, Y+62	; 0x3e
    8eb8:	3f ad       	ldd	r19, Y+63	; 0x3f
    8eba:	a1 97       	sbiw	r28, 0x21	; 33
    8ebc:	23 2b       	or	r18, r19
    8ebe:	21 f4       	brne	.+8      	; 0x8ec8 <_printf_fn+0x758>
    8ec0:	a1 96       	adiw	r28, 0x21	; 33
    8ec2:	ff af       	std	Y+63, r31	; 0x3f
    8ec4:	ee af       	std	Y+62, r30	; 0x3e
    8ec6:	a1 97       	sbiw	r28, 0x21	; 33
    8ec8:	a1 96       	adiw	r28, 0x21	; 33
    8eca:	4e ad       	ldd	r20, Y+62	; 0x3e
    8ecc:	5f ad       	ldd	r21, Y+63	; 0x3f
    8ece:	a1 97       	sbiw	r28, 0x21	; 33
    8ed0:	44 16       	cp	r4, r20
    8ed2:	55 06       	cpc	r5, r21
    8ed4:	3c f4       	brge	.+14     	; 0x8ee4 <_printf_fn+0x774>
    8ed6:	41 14       	cp	r4, r1
    8ed8:	51 04       	cpc	r5, r1
    8eda:	21 f0       	breq	.+8      	; 0x8ee4 <_printf_fn+0x774>
    8edc:	a1 96       	adiw	r28, 0x21	; 33
    8ede:	5f ae       	std	Y+63, r5	; 0x3f
    8ee0:	4e ae       	std	Y+62, r4	; 0x3e
    8ee2:	a1 97       	sbiw	r28, 0x21	; 33
    8ee4:	93 fa       	bst	r9, 3
    8ee6:	00 27       	eor	r16, r16
    8ee8:	00 f9       	bld	r16, 0
    8eea:	10 e0       	ldi	r17, 0x00	; 0
    8eec:	a1 96       	adiw	r28, 0x21	; 33
    8eee:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ef0:	3f ad       	ldd	r19, Y+63	; 0x3f
    8ef2:	a1 97       	sbiw	r28, 0x21	; 33
    8ef4:	a2 01       	movw	r20, r4
    8ef6:	a5 96       	adiw	r28, 0x25	; 37
    8ef8:	8e ad       	ldd	r24, Y+62	; 0x3e
    8efa:	9f ad       	ldd	r25, Y+63	; 0x3f
    8efc:	a5 97       	sbiw	r28, 0x25	; 37
    8efe:	f6 db       	rcall	.-2068   	; 0x86ec <_puts_pad>
    8f00:	17 01       	movw	r2, r14
    8f02:	17 c0       	rjmp	.+46     	; 0x8f32 <_printf_fn+0x7c2>
    8f04:	f6 01       	movw	r30, r12
    8f06:	5e 2d       	mov	r21, r14
    8f08:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
    8f0c:	66 23       	and	r22, r22
    8f0e:	89 f0       	breq	.+34     	; 0x8f32 <_printf_fn+0x7c2>
    8f10:	5f ef       	ldi	r21, 0xFF	; 255
    8f12:	c5 1a       	sub	r12, r21
    8f14:	d5 0a       	sbc	r13, r21
    8f16:	e5 0a       	sbc	r14, r21
    8f18:	a5 96       	adiw	r28, 0x25	; 37
    8f1a:	ae ad       	ldd	r26, Y+62	; 0x3e
    8f1c:	bf ad       	ldd	r27, Y+63	; 0x3f
    8f1e:	a5 97       	sbiw	r28, 0x25	; 37
    8f20:	ed 91       	ld	r30, X+
    8f22:	fc 91       	ld	r31, X
    8f24:	11 97       	sbiw	r26, 0x01	; 1
    8f26:	cd 01       	movw	r24, r26
    8f28:	09 95       	icall
    8f2a:	6c 14       	cp	r6, r12
    8f2c:	7d 04       	cpc	r7, r13
    8f2e:	8e 04       	cpc	r8, r14
    8f30:	48 f7       	brcc	.-46     	; 0x8f04 <_printf_fn+0x794>
    8f32:	e8 2c       	mov	r14, r8
    8f34:	63 01       	movw	r12, r6
    8f36:	4b cc       	rjmp	.-1898   	; 0x87ce <_printf_fn+0x5e>
    8f38:	e2 e0       	ldi	r30, 0x02	; 2
    8f3a:	f0 e0       	ldi	r31, 0x00	; 0
    8f3c:	6f 96       	adiw	r28, 0x1f	; 31
    8f3e:	ff af       	std	Y+63, r31	; 0x3f
    8f40:	ee af       	std	Y+62, r30	; 0x3e
    8f42:	6f 97       	sbiw	r28, 0x1f	; 31
    8f44:	57 cd       	rjmp	.-1362   	; 0x89f4 <_printf_fn+0x284>
    8f46:	6f 96       	adiw	r28, 0x1f	; 31
    8f48:	ee ad       	ldd	r30, Y+62	; 0x3e
    8f4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    8f4c:	6f 97       	sbiw	r28, 0x1f	; 31
    8f4e:	32 97       	sbiw	r30, 0x02	; 2
    8f50:	61 f4       	brne	.+24     	; 0x8f6a <_printf_fn+0x7fa>
    8f52:	51 01       	movw	r10, r2
    8f54:	f2 e0       	ldi	r31, 0x02	; 2
    8f56:	af 0e       	add	r10, r31
    8f58:	b1 1c       	adc	r11, r1
    8f5a:	d1 01       	movw	r26, r2
    8f5c:	8d 91       	ld	r24, X+
    8f5e:	9c 91       	ld	r25, X
    8f60:	65 96       	adiw	r28, 0x15	; 21
    8f62:	9f af       	std	Y+63, r25	; 0x3f
    8f64:	8e af       	std	Y+62, r24	; 0x3e
    8f66:	65 97       	sbiw	r28, 0x15	; 21
    8f68:	c5 cd       	rjmp	.-1142   	; 0x8af4 <_printf_fn+0x384>
    8f6a:	6f 96       	adiw	r28, 0x1f	; 31
    8f6c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8f6e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8f70:	6f 97       	sbiw	r28, 0x1f	; 31
    8f72:	24 30       	cpi	r18, 0x04	; 4
    8f74:	31 05       	cpc	r19, r1
    8f76:	09 f0       	breq	.+2      	; 0x8f7a <_printf_fn+0x80a>
    8f78:	fe cd       	rjmp	.-1028   	; 0x8b76 <_printf_fn+0x406>
    8f7a:	51 01       	movw	r10, r2
    8f7c:	f4 e0       	ldi	r31, 0x04	; 4
    8f7e:	af 0e       	add	r10, r31
    8f80:	b1 1c       	adc	r11, r1
    8f82:	f1 01       	movw	r30, r2
    8f84:	80 81       	ld	r24, Z
    8f86:	91 81       	ldd	r25, Z+1	; 0x01
    8f88:	a2 81       	ldd	r26, Z+2	; 0x02
    8f8a:	b3 81       	ldd	r27, Z+3	; 0x03
    8f8c:	2f 96       	adiw	r28, 0x0f	; 15
    8f8e:	8c af       	std	Y+60, r24	; 0x3c
    8f90:	9d af       	std	Y+61, r25	; 0x3d
    8f92:	ae af       	std	Y+62, r26	; 0x3e
    8f94:	bf af       	std	Y+63, r27	; 0x3f
    8f96:	2f 97       	sbiw	r28, 0x0f	; 15
    8f98:	dc cd       	rjmp	.-1096   	; 0x8b52 <_printf_fn+0x3e2>
    8f9a:	c5 59       	subi	r28, 0x95	; 149
    8f9c:	df 4f       	sbci	r29, 0xFF	; 255
    8f9e:	e2 e1       	ldi	r30, 0x12	; 18
    8fa0:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00008fa4 <vsnprintf_P>:
    8fa4:	a8 e0       	ldi	r26, 0x08	; 8
    8fa6:	b0 e0       	ldi	r27, 0x00	; 0
    8fa8:	e8 ed       	ldi	r30, 0xD8	; 216
    8faa:	f7 e4       	ldi	r31, 0x47	; 71
    8fac:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
    8fb0:	7c 01       	movw	r14, r24
    8fb2:	cb 01       	movw	r24, r22
    8fb4:	64 2f       	mov	r22, r20
    8fb6:	a9 01       	movw	r20, r18
    8fb8:	98 01       	movw	r18, r16
    8fba:	f7 01       	movw	r30, r14
    8fbc:	10 82       	st	Z, r1
    8fbe:	ef ed       	ldi	r30, 0xDF	; 223
    8fc0:	ff e3       	ldi	r31, 0x3F	; 63
    8fc2:	fa 83       	std	Y+2, r31	; 0x02
    8fc4:	e9 83       	std	Y+1, r30	; 0x01
    8fc6:	9e 83       	std	Y+6, r25	; 0x06
    8fc8:	8d 83       	std	Y+5, r24	; 0x05
    8fca:	18 86       	std	Y+8, r1	; 0x08
    8fcc:	1f 82       	std	Y+7, r1	; 0x07
    8fce:	fc 82       	std	Y+4, r15	; 0x04
    8fd0:	eb 82       	std	Y+3, r14	; 0x03
    8fd2:	ce 01       	movw	r24, r28
    8fd4:	01 96       	adiw	r24, 0x01	; 1
    8fd6:	cc db       	rcall	.-2152   	; 0x8770 <_printf_fn>
    8fd8:	f7 01       	movw	r30, r14
    8fda:	01 90       	ld	r0, Z+
    8fdc:	00 20       	and	r0, r0
    8fde:	e9 f7       	brne	.-6      	; 0x8fda <vsnprintf_P+0x36>
    8fe0:	cf 01       	movw	r24, r30
    8fe2:	01 97       	sbiw	r24, 0x01	; 1
    8fe4:	8e 19       	sub	r24, r14
    8fe6:	9f 09       	sbc	r25, r15
    8fe8:	28 96       	adiw	r28, 0x08	; 8
    8fea:	e6 e0       	ldi	r30, 0x06	; 6
    8fec:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00008ff0 <snprintf_P>:
    8ff0:	a0 e0       	ldi	r26, 0x00	; 0
    8ff2:	b0 e0       	ldi	r27, 0x00	; 0
    8ff4:	ee ef       	ldi	r30, 0xFE	; 254
    8ff6:	f7 e4       	ldi	r31, 0x47	; 71
    8ff8:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    8ffc:	8e 01       	movw	r16, r28
    8ffe:	02 5f       	subi	r16, 0xF2	; 242
    9000:	1f 4f       	sbci	r17, 0xFF	; 255
    9002:	2b 85       	ldd	r18, Y+11	; 0x0b
    9004:	3c 85       	ldd	r19, Y+12	; 0x0c
    9006:	4d 85       	ldd	r20, Y+13	; 0x0d
    9008:	69 85       	ldd	r22, Y+9	; 0x09
    900a:	7a 85       	ldd	r23, Y+10	; 0x0a
    900c:	8f 81       	ldd	r24, Y+7	; 0x07
    900e:	98 85       	ldd	r25, Y+8	; 0x08
    9010:	c9 df       	rcall	.-110    	; 0x8fa4 <vsnprintf_P>
    9012:	e4 e0       	ldi	r30, 0x04	; 4
    9014:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

00009018 <sprintf_P>:
    9018:	a0 e0       	ldi	r26, 0x00	; 0
    901a:	b0 e0       	ldi	r27, 0x00	; 0
    901c:	e2 e1       	ldi	r30, 0x12	; 18
    901e:	f8 e4       	ldi	r31, 0x48	; 72
    9020:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    9024:	8e 01       	movw	r16, r28
    9026:	04 5f       	subi	r16, 0xF4	; 244
    9028:	1f 4f       	sbci	r17, 0xFF	; 255
    902a:	29 85       	ldd	r18, Y+9	; 0x09
    902c:	3a 85       	ldd	r19, Y+10	; 0x0a
    902e:	4b 85       	ldd	r20, Y+11	; 0x0b
    9030:	60 e0       	ldi	r22, 0x00	; 0
    9032:	74 e0       	ldi	r23, 0x04	; 4
    9034:	8f 81       	ldd	r24, Y+7	; 0x07
    9036:	98 85       	ldd	r25, Y+8	; 0x08
    9038:	b5 df       	rcall	.-150    	; 0x8fa4 <vsnprintf_P>
    903a:	e4 e0       	ldi	r30, 0x04	; 4
    903c:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

00009040 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    9040:	a8 e0       	ldi	r26, 0x08	; 8
    9042:	b0 e0       	ldi	r27, 0x00	; 0
    9044:	e6 e2       	ldi	r30, 0x26	; 38
    9046:	f8 e4       	ldi	r31, 0x48	; 72
    9048:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    904c:	9e 01       	movw	r18, r28
    904e:	23 5f       	subi	r18, 0xF3	; 243
    9050:	3f 4f       	sbci	r19, 0xFF	; 255
    9052:	f9 01       	movw	r30, r18
    9054:	41 91       	ld	r20, Z+
    9056:	51 91       	ld	r21, Z+
    9058:	61 91       	ld	r22, Z+
    905a:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    905c:	88 ef       	ldi	r24, 0xF8	; 248
    905e:	9f e3       	ldi	r25, 0x3F	; 63
    9060:	9a 83       	std	Y+2, r25	; 0x02
    9062:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    9064:	18 86       	std	Y+8, r1	; 0x08
    9066:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    9068:	ce 01       	movw	r24, r28
    906a:	01 96       	adiw	r24, 0x01	; 1
    906c:	81 db       	rcall	.-2302   	; 0x8770 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    906e:	8f 81       	ldd	r24, Y+7	; 0x07
    9070:	98 85       	ldd	r25, Y+8	; 0x08
    9072:	28 96       	adiw	r28, 0x08	; 8
    9074:	e2 e0       	ldi	r30, 0x02	; 2
    9076:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000907a <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    907a:	9c 01       	movw	r18, r24
    907c:	20 53       	subi	r18, 0x30	; 48
    907e:	31 09       	sbc	r19, r1
    9080:	2a 30       	cpi	r18, 0x0A	; 10
    9082:	31 05       	cpc	r19, r1
    9084:	10 f4       	brcc	.+4      	; 0x908a <atodigit+0x10>
    9086:	c9 01       	movw	r24, r18
    9088:	10 c0       	rjmp	.+32     	; 0x90aa <atodigit+0x30>
    908a:	9c 01       	movw	r18, r24
    908c:	21 54       	subi	r18, 0x41	; 65
    908e:	31 09       	sbc	r19, r1
    9090:	26 30       	cpi	r18, 0x06	; 6
    9092:	31 05       	cpc	r19, r1
    9094:	10 f4       	brcc	.+4      	; 0x909a <atodigit+0x20>
    9096:	c7 97       	sbiw	r24, 0x37	; 55
    9098:	08 c0       	rjmp	.+16     	; 0x90aa <atodigit+0x30>
    909a:	9c 01       	movw	r18, r24
    909c:	21 56       	subi	r18, 0x61	; 97
    909e:	31 09       	sbc	r19, r1
    90a0:	26 30       	cpi	r18, 0x06	; 6
    90a2:	31 05       	cpc	r19, r1
    90a4:	28 f4       	brcc	.+10     	; 0x90b0 <atodigit+0x36>
    90a6:	87 55       	subi	r24, 0x57	; 87
    90a8:	91 09       	sbc	r25, r1
    90aa:	86 17       	cp	r24, r22
    90ac:	97 07       	cpc	r25, r23
    90ae:	14 f0       	brlt	.+4      	; 0x90b4 <atodigit+0x3a>
    90b0:	8f ef       	ldi	r24, 0xFF	; 255
    90b2:	9f ef       	ldi	r25, 0xFF	; 255
    90b4:	08 95       	ret

000090b6 <strtol>:
    90b6:	a0 e0       	ldi	r26, 0x00	; 0
    90b8:	b0 e0       	ldi	r27, 0x00	; 0
    90ba:	e1 e6       	ldi	r30, 0x61	; 97
    90bc:	f8 e4       	ldi	r31, 0x48	; 72
    90be:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    90c2:	2b 01       	movw	r4, r22
    90c4:	8a 01       	movw	r16, r20
    90c6:	ec 01       	movw	r28, r24
    90c8:	28 81       	ld	r18, Y
    90ca:	01 96       	adiw	r24, 0x01	; 1
    90cc:	20 32       	cpi	r18, 0x20	; 32
    90ce:	d9 f3       	breq	.-10     	; 0x90c6 <strtol+0x10>
    90d0:	29 30       	cpi	r18, 0x09	; 9
    90d2:	c9 f3       	breq	.-14     	; 0x90c6 <strtol+0x10>
    90d4:	2d 32       	cpi	r18, 0x2D	; 45
    90d6:	29 f4       	brne	.+10     	; 0x90e2 <strtol+0x2c>
    90d8:	ec 01       	movw	r28, r24
    90da:	66 24       	eor	r6, r6
    90dc:	63 94       	inc	r6
    90de:	71 2c       	mov	r7, r1
    90e0:	05 c0       	rjmp	.+10     	; 0x90ec <strtol+0x36>
    90e2:	2b 32       	cpi	r18, 0x2B	; 43
    90e4:	09 f4       	brne	.+2      	; 0x90e8 <strtol+0x32>
    90e6:	ec 01       	movw	r28, r24
    90e8:	61 2c       	mov	r6, r1
    90ea:	71 2c       	mov	r7, r1
    90ec:	9e 01       	movw	r18, r28
    90ee:	2f 5f       	subi	r18, 0xFF	; 255
    90f0:	3f 4f       	sbci	r19, 0xFF	; 255
    90f2:	88 81       	ld	r24, Y
    90f4:	80 33       	cpi	r24, 0x30	; 48
    90f6:	11 f4       	brne	.+4      	; 0x90fc <strtol+0x46>
    90f8:	e9 01       	movw	r28, r18
    90fa:	f8 cf       	rjmp	.-16     	; 0x90ec <strtol+0x36>
    90fc:	c1 2c       	mov	r12, r1
    90fe:	d1 2c       	mov	r13, r1
    9100:	76 01       	movw	r14, r12
    9102:	48 01       	movw	r8, r16
    9104:	01 2e       	mov	r0, r17
    9106:	00 0c       	add	r0, r0
    9108:	aa 08       	sbc	r10, r10
    910a:	bb 08       	sbc	r11, r11
    910c:	3c 2e       	mov	r3, r28
    910e:	2d 2e       	mov	r2, r29
    9110:	89 91       	ld	r24, Y+
    9112:	88 23       	and	r24, r24
    9114:	31 f0       	breq	.+12     	; 0x9122 <strtol+0x6c>
    9116:	b8 01       	movw	r22, r16
    9118:	90 e0       	ldi	r25, 0x00	; 0
    911a:	af df       	rcall	.-162    	; 0x907a <atodigit>
    911c:	fc 01       	movw	r30, r24
    911e:	97 ff       	sbrs	r25, 7
    9120:	0c c0       	rjmp	.+24     	; 0x913a <strtol+0x84>
    9122:	61 14       	cp	r6, r1
    9124:	71 04       	cpc	r7, r1
    9126:	c1 f0       	breq	.+48     	; 0x9158 <strtol+0xa2>
    9128:	f0 94       	com	r15
    912a:	e0 94       	com	r14
    912c:	d0 94       	com	r13
    912e:	c0 94       	com	r12
    9130:	c1 1c       	adc	r12, r1
    9132:	d1 1c       	adc	r13, r1
    9134:	e1 1c       	adc	r14, r1
    9136:	f1 1c       	adc	r15, r1
    9138:	0f c0       	rjmp	.+30     	; 0x9158 <strtol+0xa2>
    913a:	a5 01       	movw	r20, r10
    913c:	94 01       	movw	r18, r8
    913e:	c7 01       	movw	r24, r14
    9140:	b6 01       	movw	r22, r12
    9142:	0e 94 65 e3 	call	0x1c6ca	; 0x1c6ca <__mulsi3>
    9146:	6f 01       	movw	r12, r30
    9148:	ff 0f       	add	r31, r31
    914a:	ee 08       	sbc	r14, r14
    914c:	ff 08       	sbc	r15, r15
    914e:	c6 0e       	add	r12, r22
    9150:	d7 1e       	adc	r13, r23
    9152:	e8 1e       	adc	r14, r24
    9154:	f9 1e       	adc	r15, r25
    9156:	da cf       	rjmp	.-76     	; 0x910c <strtol+0x56>
    9158:	41 14       	cp	r4, r1
    915a:	51 04       	cpc	r5, r1
    915c:	19 f0       	breq	.+6      	; 0x9164 <strtol+0xae>
    915e:	f2 01       	movw	r30, r4
    9160:	30 82       	st	Z, r3
    9162:	21 82       	std	Z+1, r2	; 0x01
    9164:	c7 01       	movw	r24, r14
    9166:	b6 01       	movw	r22, r12
    9168:	cd b7       	in	r28, 0x3d	; 61
    916a:	de b7       	in	r29, 0x3e	; 62
    916c:	e2 e1       	ldi	r30, 0x12	; 18
    916e:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00009172 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9172:	4a e0       	ldi	r20, 0x0A	; 10
    9174:	50 e0       	ldi	r21, 0x00	; 0
    9176:	60 e0       	ldi	r22, 0x00	; 0
    9178:	70 e0       	ldi	r23, 0x00	; 0
    917a:	9d df       	rcall	.-198    	; 0x90b6 <strtol>
    return((int)num);
}
    917c:	cb 01       	movw	r24, r22
    917e:	08 95       	ret

00009180 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9180:	4a e0       	ldi	r20, 0x0A	; 10
    9182:	50 e0       	ldi	r21, 0x00	; 0
    9184:	60 e0       	ldi	r22, 0x00	; 0
    9186:	70 e0       	ldi	r23, 0x00	; 0
    9188:	96 cf       	rjmp	.-212    	; 0x90b6 <strtol>
    return(num);
}
    918a:	08 95       	ret

0000918c <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    918c:	fc 01       	movw	r30, r24
    918e:	62 81       	ldd	r22, Z+2	; 0x02
    9190:	73 81       	ldd	r23, Z+3	; 0x03
    9192:	cb 01       	movw	r24, r22
    9194:	a0 e0       	ldi	r26, 0x00	; 0
    9196:	b0 e0       	ldi	r27, 0x00	; 0
    9198:	ba 2f       	mov	r27, r26
    919a:	a9 2f       	mov	r26, r25
    919c:	98 2f       	mov	r25, r24
    919e:	88 27       	eor	r24, r24
    91a0:	21 81       	ldd	r18, Z+1	; 0x01
    91a2:	82 2b       	or	r24, r18
    91a4:	ba 2f       	mov	r27, r26
    91a6:	a9 2f       	mov	r26, r25
    91a8:	98 2f       	mov	r25, r24
    91aa:	88 27       	eor	r24, r24
    91ac:	20 81       	ld	r18, Z
    91ae:	bc 01       	movw	r22, r24
    91b0:	cd 01       	movw	r24, r26
    91b2:	62 2b       	or	r22, r18
    91b4:	08 95       	ret

000091b6 <st_dword>:
    91b6:	fc 01       	movw	r30, r24
    91b8:	40 83       	st	Z, r20
    91ba:	51 83       	std	Z+1, r21	; 0x01
    91bc:	62 83       	std	Z+2, r22	; 0x02
    91be:	73 83       	std	Z+3, r23	; 0x03
    91c0:	08 95       	ret

000091c2 <mem_set>:
    91c2:	48 0f       	add	r20, r24
    91c4:	59 1f       	adc	r21, r25
    91c6:	fc 01       	movw	r30, r24
    91c8:	61 93       	st	Z+, r22
    91ca:	cf 01       	movw	r24, r30
    91cc:	e4 17       	cp	r30, r20
    91ce:	f5 07       	cpc	r31, r21
    91d0:	d1 f7       	brne	.-12     	; 0x91c6 <mem_set+0x4>
    91d2:	08 95       	ret

000091d4 <mem_cmp>:
    91d4:	dc 01       	movw	r26, r24
    91d6:	fb 01       	movw	r30, r22
    91d8:	2d 91       	ld	r18, X+
    91da:	81 91       	ld	r24, Z+
    91dc:	30 e0       	ldi	r19, 0x00	; 0
    91de:	b9 01       	movw	r22, r18
    91e0:	68 1b       	sub	r22, r24
    91e2:	71 09       	sbc	r23, r1
    91e4:	cb 01       	movw	r24, r22
    91e6:	41 50       	subi	r20, 0x01	; 1
    91e8:	51 09       	sbc	r21, r1
    91ea:	11 f0       	breq	.+4      	; 0x91f0 <mem_cmp+0x1c>
    91ec:	00 97       	sbiw	r24, 0x00	; 0
    91ee:	a1 f3       	breq	.-24     	; 0x91d8 <mem_cmp+0x4>
    91f0:	08 95       	ret

000091f2 <tchar2uni>:
    91f2:	0f 93       	push	r16
    91f4:	1f 93       	push	r17
    91f6:	fc 01       	movw	r30, r24
    91f8:	a0 81       	ld	r26, Z
    91fa:	b1 81       	ldd	r27, Z+1	; 0x01
    91fc:	fd 01       	movw	r30, r26
    91fe:	31 96       	adiw	r30, 0x01	; 1
    9200:	4c 91       	ld	r20, X
    9202:	47 fd       	sbrc	r20, 7
    9204:	04 c0       	rjmp	.+8      	; 0x920e <tchar2uni+0x1c>
    9206:	50 e0       	ldi	r21, 0x00	; 0
    9208:	60 e0       	ldi	r22, 0x00	; 0
    920a:	70 e0       	ldi	r23, 0x00	; 0
    920c:	68 c0       	rjmp	.+208    	; 0x92de <tchar2uni+0xec>
    920e:	24 2f       	mov	r18, r20
    9210:	20 7e       	andi	r18, 0xE0	; 224
    9212:	20 3c       	cpi	r18, 0xC0	; 192
    9214:	39 f4       	brne	.+14     	; 0x9224 <tchar2uni+0x32>
    9216:	4f 71       	andi	r20, 0x1F	; 31
    9218:	50 e0       	ldi	r21, 0x00	; 0
    921a:	60 e0       	ldi	r22, 0x00	; 0
    921c:	70 e0       	ldi	r23, 0x00	; 0
    921e:	21 e0       	ldi	r18, 0x01	; 1
    9220:	30 e0       	ldi	r19, 0x00	; 0
    9222:	16 c0       	rjmp	.+44     	; 0x9250 <tchar2uni+0x5e>
    9224:	24 2f       	mov	r18, r20
    9226:	20 7f       	andi	r18, 0xF0	; 240
    9228:	20 3e       	cpi	r18, 0xE0	; 224
    922a:	39 f4       	brne	.+14     	; 0x923a <tchar2uni+0x48>
    922c:	4f 70       	andi	r20, 0x0F	; 15
    922e:	50 e0       	ldi	r21, 0x00	; 0
    9230:	60 e0       	ldi	r22, 0x00	; 0
    9232:	70 e0       	ldi	r23, 0x00	; 0
    9234:	22 e0       	ldi	r18, 0x02	; 2
    9236:	30 e0       	ldi	r19, 0x00	; 0
    9238:	0b c0       	rjmp	.+22     	; 0x9250 <tchar2uni+0x5e>
    923a:	24 2f       	mov	r18, r20
    923c:	28 7f       	andi	r18, 0xF8	; 248
    923e:	20 3f       	cpi	r18, 0xF0	; 240
    9240:	09 f0       	breq	.+2      	; 0x9244 <tchar2uni+0x52>
    9242:	54 c0       	rjmp	.+168    	; 0x92ec <tchar2uni+0xfa>
    9244:	47 70       	andi	r20, 0x07	; 7
    9246:	50 e0       	ldi	r21, 0x00	; 0
    9248:	60 e0       	ldi	r22, 0x00	; 0
    924a:	70 e0       	ldi	r23, 0x00	; 0
    924c:	23 e0       	ldi	r18, 0x03	; 3
    924e:	30 e0       	ldi	r19, 0x00	; 0
    9250:	31 96       	adiw	r30, 0x01	; 1
    9252:	df 01       	movw	r26, r30
    9254:	11 97       	sbiw	r26, 0x01	; 1
    9256:	ac 91       	ld	r26, X
    9258:	ba 2f       	mov	r27, r26
    925a:	b0 7c       	andi	r27, 0xC0	; 192
    925c:	b0 38       	cpi	r27, 0x80	; 128
    925e:	09 f0       	breq	.+2      	; 0x9262 <tchar2uni+0x70>
    9260:	45 c0       	rjmp	.+138    	; 0x92ec <tchar2uni+0xfa>
    9262:	b6 e0       	ldi	r27, 0x06	; 6
    9264:	44 0f       	add	r20, r20
    9266:	55 1f       	adc	r21, r21
    9268:	66 1f       	adc	r22, r22
    926a:	77 1f       	adc	r23, r23
    926c:	ba 95       	dec	r27
    926e:	d1 f7       	brne	.-12     	; 0x9264 <tchar2uni+0x72>
    9270:	af 73       	andi	r26, 0x3F	; 63
    9272:	4a 2b       	or	r20, r26
    9274:	21 50       	subi	r18, 0x01	; 1
    9276:	31 09       	sbc	r19, r1
    9278:	59 f7       	brne	.-42     	; 0x9250 <tchar2uni+0x5e>
    927a:	8a 01       	movw	r16, r20
    927c:	9b 01       	movw	r18, r22
    927e:	00 58       	subi	r16, 0x80	; 128
    9280:	11 09       	sbc	r17, r1
    9282:	21 09       	sbc	r18, r1
    9284:	31 09       	sbc	r19, r1
    9286:	00 38       	cpi	r16, 0x80	; 128
    9288:	1f 4f       	sbci	r17, 0xFF	; 255
    928a:	20 41       	sbci	r18, 0x10	; 16
    928c:	31 05       	cpc	r19, r1
    928e:	70 f5       	brcc	.+92     	; 0x92ec <tchar2uni+0xfa>
    9290:	8a 01       	movw	r16, r20
    9292:	9b 01       	movw	r18, r22
    9294:	18 5d       	subi	r17, 0xD8	; 216
    9296:	21 09       	sbc	r18, r1
    9298:	31 09       	sbc	r19, r1
    929a:	01 15       	cp	r16, r1
    929c:	18 40       	sbci	r17, 0x08	; 8
    929e:	21 05       	cpc	r18, r1
    92a0:	31 05       	cpc	r19, r1
    92a2:	20 f1       	brcs	.+72     	; 0x92ec <tchar2uni+0xfa>
    92a4:	41 15       	cp	r20, r1
    92a6:	51 05       	cpc	r21, r1
    92a8:	21 e0       	ldi	r18, 0x01	; 1
    92aa:	62 07       	cpc	r22, r18
    92ac:	71 05       	cpc	r23, r1
    92ae:	b8 f0       	brcs	.+46     	; 0x92de <tchar2uni+0xec>
    92b0:	8a 01       	movw	r16, r20
    92b2:	9b 01       	movw	r18, r22
    92b4:	21 50       	subi	r18, 0x01	; 1
    92b6:	31 09       	sbc	r19, r1
    92b8:	a6 e0       	ldi	r26, 0x06	; 6
    92ba:	00 0f       	add	r16, r16
    92bc:	11 1f       	adc	r17, r17
    92be:	22 1f       	adc	r18, r18
    92c0:	33 1f       	adc	r19, r19
    92c2:	aa 95       	dec	r26
    92c4:	d1 f7       	brne	.-12     	; 0x92ba <tchar2uni+0xc8>
    92c6:	00 27       	eor	r16, r16
    92c8:	11 27       	eor	r17, r17
    92ca:	33 70       	andi	r19, 0x03	; 3
    92cc:	53 70       	andi	r21, 0x03	; 3
    92ce:	66 27       	eor	r22, r22
    92d0:	77 27       	eor	r23, r23
    92d2:	5c 6d       	ori	r21, 0xDC	; 220
    92d4:	78 6d       	ori	r23, 0xD8	; 216
    92d6:	40 2b       	or	r20, r16
    92d8:	51 2b       	or	r21, r17
    92da:	62 2b       	or	r22, r18
    92dc:	73 2b       	or	r23, r19
    92de:	dc 01       	movw	r26, r24
    92e0:	ed 93       	st	X+, r30
    92e2:	fc 93       	st	X, r31
    92e4:	34 2f       	mov	r19, r20
    92e6:	25 2f       	mov	r18, r21
    92e8:	cb 01       	movw	r24, r22
    92ea:	04 c0       	rjmp	.+8      	; 0x92f4 <tchar2uni+0x102>
    92ec:	3f ef       	ldi	r19, 0xFF	; 255
    92ee:	2f ef       	ldi	r18, 0xFF	; 255
    92f0:	8f ef       	ldi	r24, 0xFF	; 255
    92f2:	9f ef       	ldi	r25, 0xFF	; 255
    92f4:	63 2f       	mov	r22, r19
    92f6:	72 2f       	mov	r23, r18
    92f8:	1f 91       	pop	r17
    92fa:	0f 91       	pop	r16
    92fc:	08 95       	ret

000092fe <clst2sect>:
    92fe:	0f 93       	push	r16
    9300:	1f 93       	push	r17
    9302:	fc 01       	movw	r30, r24
    9304:	9a 01       	movw	r18, r20
    9306:	ab 01       	movw	r20, r22
    9308:	22 50       	subi	r18, 0x02	; 2
    930a:	31 09       	sbc	r19, r1
    930c:	41 09       	sbc	r20, r1
    930e:	51 09       	sbc	r21, r1
    9310:	81 8d       	ldd	r24, Z+25	; 0x19
    9312:	92 8d       	ldd	r25, Z+26	; 0x1a
    9314:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9316:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9318:	02 97       	sbiw	r24, 0x02	; 2
    931a:	a1 09       	sbc	r26, r1
    931c:	b1 09       	sbc	r27, r1
    931e:	28 17       	cp	r18, r24
    9320:	39 07       	cpc	r19, r25
    9322:	4a 07       	cpc	r20, r26
    9324:	5b 07       	cpc	r21, r27
    9326:	68 f4       	brcc	.+26     	; 0x9342 <clst2sect+0x44>
    9328:	a1 85       	ldd	r26, Z+9	; 0x09
    932a:	b2 85       	ldd	r27, Z+10	; 0x0a
    932c:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    9330:	05 a5       	ldd	r16, Z+45	; 0x2d
    9332:	16 a5       	ldd	r17, Z+46	; 0x2e
    9334:	27 a5       	ldd	r18, Z+47	; 0x2f
    9336:	30 a9       	ldd	r19, Z+48	; 0x30
    9338:	60 0f       	add	r22, r16
    933a:	71 1f       	adc	r23, r17
    933c:	82 1f       	adc	r24, r18
    933e:	93 1f       	adc	r25, r19
    9340:	03 c0       	rjmp	.+6      	; 0x9348 <clst2sect+0x4a>
    9342:	60 e0       	ldi	r22, 0x00	; 0
    9344:	70 e0       	ldi	r23, 0x00	; 0
    9346:	cb 01       	movw	r24, r22
    9348:	1f 91       	pop	r17
    934a:	0f 91       	pop	r16
    934c:	08 95       	ret

0000934e <clmt_clust>:
    934e:	cf 93       	push	r28
    9350:	df 93       	push	r29
    9352:	fc 01       	movw	r30, r24
    9354:	c2 a1       	ldd	r28, Z+34	; 0x22
    9356:	d3 a1       	ldd	r29, Z+35	; 0x23
    9358:	24 96       	adiw	r28, 0x04	; 4
    935a:	cb 01       	movw	r24, r22
    935c:	ba 01       	movw	r22, r20
    935e:	29 e0       	ldi	r18, 0x09	; 9
    9360:	96 95       	lsr	r25
    9362:	87 95       	ror	r24
    9364:	77 95       	ror	r23
    9366:	67 95       	ror	r22
    9368:	2a 95       	dec	r18
    936a:	d1 f7       	brne	.-12     	; 0x9360 <clmt_clust+0x12>
    936c:	01 90       	ld	r0, Z+
    936e:	f0 81       	ld	r31, Z
    9370:	e0 2d       	mov	r30, r0
    9372:	21 85       	ldd	r18, Z+9	; 0x09
    9374:	32 85       	ldd	r19, Z+10	; 0x0a
    9376:	40 e0       	ldi	r20, 0x00	; 0
    9378:	50 e0       	ldi	r21, 0x00	; 0
    937a:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    937e:	88 81       	ld	r24, Y
    9380:	99 81       	ldd	r25, Y+1	; 0x01
    9382:	aa 81       	ldd	r26, Y+2	; 0x02
    9384:	bb 81       	ldd	r27, Y+3	; 0x03
    9386:	00 97       	sbiw	r24, 0x00	; 0
    9388:	a1 05       	cpc	r26, r1
    938a:	b1 05       	cpc	r27, r1
    938c:	b1 f0       	breq	.+44     	; 0x93ba <clmt_clust+0x6c>
    938e:	28 17       	cp	r18, r24
    9390:	39 07       	cpc	r19, r25
    9392:	4a 07       	cpc	r20, r26
    9394:	5b 07       	cpc	r21, r27
    9396:	30 f0       	brcs	.+12     	; 0x93a4 <clmt_clust+0x56>
    9398:	28 1b       	sub	r18, r24
    939a:	39 0b       	sbc	r19, r25
    939c:	4a 0b       	sbc	r20, r26
    939e:	5b 0b       	sbc	r21, r27
    93a0:	28 96       	adiw	r28, 0x08	; 8
    93a2:	ed cf       	rjmp	.-38     	; 0x937e <clmt_clust+0x30>
    93a4:	8c 81       	ldd	r24, Y+4	; 0x04
    93a6:	9d 81       	ldd	r25, Y+5	; 0x05
    93a8:	ae 81       	ldd	r26, Y+6	; 0x06
    93aa:	bf 81       	ldd	r27, Y+7	; 0x07
    93ac:	bc 01       	movw	r22, r24
    93ae:	cd 01       	movw	r24, r26
    93b0:	62 0f       	add	r22, r18
    93b2:	73 1f       	adc	r23, r19
    93b4:	84 1f       	adc	r24, r20
    93b6:	95 1f       	adc	r25, r21
    93b8:	03 c0       	rjmp	.+6      	; 0x93c0 <clmt_clust+0x72>
    93ba:	60 e0       	ldi	r22, 0x00	; 0
    93bc:	70 e0       	ldi	r23, 0x00	; 0
    93be:	cb 01       	movw	r24, r22
    93c0:	df 91       	pop	r29
    93c2:	cf 91       	pop	r28
    93c4:	08 95       	ret

000093c6 <sum_sfn>:
    93c6:	fc 01       	movw	r30, r24
    93c8:	9c 01       	movw	r18, r24
    93ca:	25 5f       	subi	r18, 0xF5	; 245
    93cc:	3f 4f       	sbci	r19, 0xFF	; 255
    93ce:	80 e0       	ldi	r24, 0x00	; 0
    93d0:	98 2f       	mov	r25, r24
    93d2:	90 fb       	bst	r25, 0
    93d4:	97 95       	ror	r25
    93d6:	97 f9       	bld	r25, 7
    93d8:	81 91       	ld	r24, Z+
    93da:	89 0f       	add	r24, r25
    93dc:	e2 17       	cp	r30, r18
    93de:	f3 07       	cpc	r31, r19
    93e0:	b9 f7       	brne	.-18     	; 0x93d0 <sum_sfn+0xa>
    93e2:	08 95       	ret

000093e4 <get_ldnumber>:
    93e4:	cf 93       	push	r28
    93e6:	df 93       	push	r29
    93e8:	dc 01       	movw	r26, r24
    93ea:	ed 91       	ld	r30, X+
    93ec:	fc 91       	ld	r31, X
    93ee:	11 97       	sbiw	r26, 0x01	; 1
    93f0:	30 97       	sbiw	r30, 0x00	; 0
    93f2:	f9 f0       	breq	.+62     	; 0x9432 <get_ldnumber+0x4e>
    93f4:	9f 01       	movw	r18, r30
    93f6:	2f 5f       	subi	r18, 0xFF	; 255
    93f8:	3f 4f       	sbci	r19, 0xFF	; 255
    93fa:	e9 01       	movw	r28, r18
    93fc:	21 97       	sbiw	r28, 0x01	; 1
    93fe:	88 81       	ld	r24, Y
    9400:	80 32       	cpi	r24, 0x20	; 32
    9402:	18 f0       	brcs	.+6      	; 0x940a <get_ldnumber+0x26>
    9404:	8a 33       	cpi	r24, 0x3A	; 58
    9406:	b9 f7       	brne	.-18     	; 0x93f6 <get_ldnumber+0x12>
    9408:	04 c0       	rjmp	.+8      	; 0x9412 <get_ldnumber+0x2e>
    940a:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <CurrVol>
    940e:	90 e0       	ldi	r25, 0x00	; 0
    9410:	12 c0       	rjmp	.+36     	; 0x9436 <get_ldnumber+0x52>
    9412:	90 81       	ld	r25, Z
    9414:	80 ed       	ldi	r24, 0xD0	; 208
    9416:	89 0f       	add	r24, r25
    9418:	8a 30       	cpi	r24, 0x0A	; 10
    941a:	58 f4       	brcc	.+22     	; 0x9432 <get_ldnumber+0x4e>
    941c:	32 96       	adiw	r30, 0x02	; 2
    941e:	2e 17       	cp	r18, r30
    9420:	3f 07       	cpc	r19, r31
    9422:	39 f4       	brne	.+14     	; 0x9432 <get_ldnumber+0x4e>
    9424:	90 33       	cpi	r25, 0x30	; 48
    9426:	29 f4       	brne	.+10     	; 0x9432 <get_ldnumber+0x4e>
    9428:	2d 93       	st	X+, r18
    942a:	3c 93       	st	X, r19
    942c:	80 e0       	ldi	r24, 0x00	; 0
    942e:	90 e0       	ldi	r25, 0x00	; 0
    9430:	02 c0       	rjmp	.+4      	; 0x9436 <get_ldnumber+0x52>
    9432:	8f ef       	ldi	r24, 0xFF	; 255
    9434:	9f ef       	ldi	r25, 0xFF	; 255
    9436:	df 91       	pop	r29
    9438:	cf 91       	pop	r28
    943a:	08 95       	ret

0000943c <validate>:
    943c:	0f 93       	push	r16
    943e:	1f 93       	push	r17
    9440:	cf 93       	push	r28
    9442:	df 93       	push	r29
    9444:	ec 01       	movw	r28, r24
    9446:	8b 01       	movw	r16, r22
    9448:	89 2b       	or	r24, r25
    944a:	f9 f0       	breq	.+62     	; 0x948a <validate+0x4e>
    944c:	e8 81       	ld	r30, Y
    944e:	f9 81       	ldd	r31, Y+1	; 0x01
    9450:	30 97       	sbiw	r30, 0x00	; 0
    9452:	d9 f0       	breq	.+54     	; 0x948a <validate+0x4e>
    9454:	80 81       	ld	r24, Z
    9456:	88 23       	and	r24, r24
    9458:	c1 f0       	breq	.+48     	; 0x948a <validate+0x4e>
    945a:	2a 81       	ldd	r18, Y+2	; 0x02
    945c:	3b 81       	ldd	r19, Y+3	; 0x03
    945e:	85 81       	ldd	r24, Z+5	; 0x05
    9460:	96 81       	ldd	r25, Z+6	; 0x06
    9462:	28 17       	cp	r18, r24
    9464:	39 07       	cpc	r19, r25
    9466:	89 f4       	brne	.+34     	; 0x948a <validate+0x4e>
    9468:	81 81       	ldd	r24, Z+1	; 0x01
    946a:	0e 94 39 6c 	call	0xd872	; 0xd872 <disk_status>
    946e:	80 fd       	sbrc	r24, 0
    9470:	0c c0       	rjmp	.+24     	; 0x948a <validate+0x4e>
    9472:	28 81       	ld	r18, Y
    9474:	39 81       	ldd	r19, Y+1	; 0x01
    9476:	80 e0       	ldi	r24, 0x00	; 0
    9478:	90 e0       	ldi	r25, 0x00	; 0
    947a:	f8 01       	movw	r30, r16
    947c:	31 83       	std	Z+1, r19	; 0x01
    947e:	20 83       	st	Z, r18
    9480:	df 91       	pop	r29
    9482:	cf 91       	pop	r28
    9484:	1f 91       	pop	r17
    9486:	0f 91       	pop	r16
    9488:	08 95       	ret
    948a:	89 e0       	ldi	r24, 0x09	; 9
    948c:	90 e0       	ldi	r25, 0x00	; 0
    948e:	20 e0       	ldi	r18, 0x00	; 0
    9490:	30 e0       	ldi	r19, 0x00	; 0
    9492:	f3 cf       	rjmp	.-26     	; 0x947a <validate+0x3e>

00009494 <mem_cpy.part.0>:
    9494:	fb 01       	movw	r30, r22
    9496:	48 0f       	add	r20, r24
    9498:	59 1f       	adc	r21, r25
    949a:	21 91       	ld	r18, Z+
    949c:	dc 01       	movw	r26, r24
    949e:	2d 93       	st	X+, r18
    94a0:	cd 01       	movw	r24, r26
    94a2:	a4 17       	cp	r26, r20
    94a4:	b5 07       	cpc	r27, r21
    94a6:	c9 f7       	brne	.-14     	; 0x949a <mem_cpy.part.0+0x6>
    94a8:	08 95       	ret

000094aa <put_utf>:
    94aa:	0f 93       	push	r16
    94ac:	1f 93       	push	r17
    94ae:	fa 01       	movw	r30, r20
    94b0:	60 38       	cpi	r22, 0x80	; 128
    94b2:	71 05       	cpc	r23, r1
    94b4:	81 05       	cpc	r24, r1
    94b6:	91 05       	cpc	r25, r1
    94b8:	30 f4       	brcc	.+12     	; 0x94c6 <put_utf+0x1c>
    94ba:	23 2b       	or	r18, r19
    94bc:	09 f4       	brne	.+2      	; 0x94c0 <put_utf+0x16>
    94be:	9e c0       	rjmp	.+316    	; 0x95fc <put_utf+0x152>
    94c0:	60 83       	st	Z, r22
    94c2:	81 e0       	ldi	r24, 0x01	; 1
    94c4:	9c c0       	rjmp	.+312    	; 0x95fe <put_utf+0x154>
    94c6:	61 15       	cp	r22, r1
    94c8:	48 e0       	ldi	r20, 0x08	; 8
    94ca:	74 07       	cpc	r23, r20
    94cc:	81 05       	cpc	r24, r1
    94ce:	91 05       	cpc	r25, r1
    94d0:	a0 f4       	brcc	.+40     	; 0x94fa <put_utf+0x50>
    94d2:	22 30       	cpi	r18, 0x02	; 2
    94d4:	31 05       	cpc	r19, r1
    94d6:	08 f4       	brcc	.+2      	; 0x94da <put_utf+0x30>
    94d8:	91 c0       	rjmp	.+290    	; 0x95fc <put_utf+0x152>
    94da:	8b 01       	movw	r16, r22
    94dc:	9c 01       	movw	r18, r24
    94de:	76 e0       	ldi	r23, 0x06	; 6
    94e0:	36 95       	lsr	r19
    94e2:	27 95       	ror	r18
    94e4:	17 95       	ror	r17
    94e6:	07 95       	ror	r16
    94e8:	7a 95       	dec	r23
    94ea:	d1 f7       	brne	.-12     	; 0x94e0 <put_utf+0x36>
    94ec:	00 6c       	ori	r16, 0xC0	; 192
    94ee:	00 83       	st	Z, r16
    94f0:	6f 73       	andi	r22, 0x3F	; 63
    94f2:	60 68       	ori	r22, 0x80	; 128
    94f4:	61 83       	std	Z+1, r22	; 0x01
    94f6:	82 e0       	ldi	r24, 0x02	; 2
    94f8:	82 c0       	rjmp	.+260    	; 0x95fe <put_utf+0x154>
    94fa:	61 15       	cp	r22, r1
    94fc:	71 05       	cpc	r23, r1
    94fe:	41 e0       	ldi	r20, 0x01	; 1
    9500:	84 07       	cpc	r24, r20
    9502:	91 05       	cpc	r25, r1
    9504:	58 f5       	brcc	.+86     	; 0x955c <put_utf+0xb2>
    9506:	23 30       	cpi	r18, 0x03	; 3
    9508:	31 05       	cpc	r19, r1
    950a:	08 f4       	brcc	.+2      	; 0x950e <put_utf+0x64>
    950c:	77 c0       	rjmp	.+238    	; 0x95fc <put_utf+0x152>
    950e:	8b 01       	movw	r16, r22
    9510:	9c 01       	movw	r18, r24
    9512:	18 5d       	subi	r17, 0xD8	; 216
    9514:	21 09       	sbc	r18, r1
    9516:	31 09       	sbc	r19, r1
    9518:	01 15       	cp	r16, r1
    951a:	18 40       	sbci	r17, 0x08	; 8
    951c:	21 05       	cpc	r18, r1
    951e:	31 05       	cpc	r19, r1
    9520:	08 f4       	brcc	.+2      	; 0x9524 <put_utf+0x7a>
    9522:	6c c0       	rjmp	.+216    	; 0x95fc <put_utf+0x152>
    9524:	8b 01       	movw	r16, r22
    9526:	9c 01       	movw	r18, r24
    9528:	4c e0       	ldi	r20, 0x0C	; 12
    952a:	36 95       	lsr	r19
    952c:	27 95       	ror	r18
    952e:	17 95       	ror	r17
    9530:	07 95       	ror	r16
    9532:	4a 95       	dec	r20
    9534:	d1 f7       	brne	.-12     	; 0x952a <put_utf+0x80>
    9536:	00 6e       	ori	r16, 0xE0	; 224
    9538:	00 83       	st	Z, r16
    953a:	8b 01       	movw	r16, r22
    953c:	9c 01       	movw	r18, r24
    953e:	56 e0       	ldi	r21, 0x06	; 6
    9540:	36 95       	lsr	r19
    9542:	27 95       	ror	r18
    9544:	17 95       	ror	r17
    9546:	07 95       	ror	r16
    9548:	5a 95       	dec	r21
    954a:	d1 f7       	brne	.-12     	; 0x9540 <put_utf+0x96>
    954c:	0f 73       	andi	r16, 0x3F	; 63
    954e:	00 68       	ori	r16, 0x80	; 128
    9550:	01 83       	std	Z+1, r16	; 0x01
    9552:	6f 73       	andi	r22, 0x3F	; 63
    9554:	60 68       	ori	r22, 0x80	; 128
    9556:	62 83       	std	Z+2, r22	; 0x02
    9558:	83 e0       	ldi	r24, 0x03	; 3
    955a:	51 c0       	rjmp	.+162    	; 0x95fe <put_utf+0x154>
    955c:	24 30       	cpi	r18, 0x04	; 4
    955e:	31 05       	cpc	r19, r1
    9560:	08 f4       	brcc	.+2      	; 0x9564 <put_utf+0xba>
    9562:	4c c0       	rjmp	.+152    	; 0x95fc <put_utf+0x152>
    9564:	8b 01       	movw	r16, r22
    9566:	9c 01       	movw	r18, r24
    9568:	00 27       	eor	r16, r16
    956a:	11 27       	eor	r17, r17
    956c:	38 5d       	subi	r19, 0xD8	; 216
    956e:	b6 e0       	ldi	r27, 0x06	; 6
    9570:	36 95       	lsr	r19
    9572:	27 95       	ror	r18
    9574:	17 95       	ror	r17
    9576:	07 95       	ror	r16
    9578:	ba 95       	dec	r27
    957a:	d1 f7       	brne	.-12     	; 0x9570 <put_utf+0xc6>
    957c:	01 15       	cp	r16, r1
    957e:	11 05       	cpc	r17, r1
    9580:	40 e1       	ldi	r20, 0x10	; 16
    9582:	24 07       	cpc	r18, r20
    9584:	31 05       	cpc	r19, r1
    9586:	d0 f5       	brcc	.+116    	; 0x95fc <put_utf+0x152>
    9588:	dc 01       	movw	r26, r24
    958a:	cb 01       	movw	r24, r22
    958c:	aa 27       	eor	r26, r26
    958e:	bb 27       	eor	r27, r27
    9590:	9c 5d       	subi	r25, 0xDC	; 220
    9592:	a1 09       	sbc	r26, r1
    9594:	b1 09       	sbc	r27, r1
    9596:	81 15       	cp	r24, r1
    9598:	44 e0       	ldi	r20, 0x04	; 4
    959a:	94 07       	cpc	r25, r20
    959c:	a1 05       	cpc	r26, r1
    959e:	b1 05       	cpc	r27, r1
    95a0:	68 f5       	brcc	.+90     	; 0x95fc <put_utf+0x152>
    95a2:	80 2b       	or	r24, r16
    95a4:	91 2b       	or	r25, r17
    95a6:	a2 2b       	or	r26, r18
    95a8:	b3 2b       	or	r27, r19
    95aa:	11 96       	adiw	r26, 0x01	; 1
    95ac:	ac 01       	movw	r20, r24
    95ae:	bd 01       	movw	r22, r26
    95b0:	22 e1       	ldi	r18, 0x12	; 18
    95b2:	76 95       	lsr	r23
    95b4:	67 95       	ror	r22
    95b6:	57 95       	ror	r21
    95b8:	47 95       	ror	r20
    95ba:	2a 95       	dec	r18
    95bc:	d1 f7       	brne	.-12     	; 0x95b2 <put_utf+0x108>
    95be:	40 6f       	ori	r20, 0xF0	; 240
    95c0:	40 83       	st	Z, r20
    95c2:	ac 01       	movw	r20, r24
    95c4:	bd 01       	movw	r22, r26
    95c6:	3c e0       	ldi	r19, 0x0C	; 12
    95c8:	76 95       	lsr	r23
    95ca:	67 95       	ror	r22
    95cc:	57 95       	ror	r21
    95ce:	47 95       	ror	r20
    95d0:	3a 95       	dec	r19
    95d2:	d1 f7       	brne	.-12     	; 0x95c8 <put_utf+0x11e>
    95d4:	4f 73       	andi	r20, 0x3F	; 63
    95d6:	40 68       	ori	r20, 0x80	; 128
    95d8:	41 83       	std	Z+1, r20	; 0x01
    95da:	ac 01       	movw	r20, r24
    95dc:	bd 01       	movw	r22, r26
    95de:	a6 e0       	ldi	r26, 0x06	; 6
    95e0:	76 95       	lsr	r23
    95e2:	67 95       	ror	r22
    95e4:	57 95       	ror	r21
    95e6:	47 95       	ror	r20
    95e8:	aa 95       	dec	r26
    95ea:	d1 f7       	brne	.-12     	; 0x95e0 <put_utf+0x136>
    95ec:	4f 73       	andi	r20, 0x3F	; 63
    95ee:	40 68       	ori	r20, 0x80	; 128
    95f0:	42 83       	std	Z+2, r20	; 0x02
    95f2:	8f 73       	andi	r24, 0x3F	; 63
    95f4:	80 68       	ori	r24, 0x80	; 128
    95f6:	83 83       	std	Z+3, r24	; 0x03
    95f8:	84 e0       	ldi	r24, 0x04	; 4
    95fa:	01 c0       	rjmp	.+2      	; 0x95fe <put_utf+0x154>
    95fc:	80 e0       	ldi	r24, 0x00	; 0
    95fe:	1f 91       	pop	r17
    9600:	0f 91       	pop	r16
    9602:	08 95       	ret

00009604 <get_fileinfo>:
    9604:	a0 e0       	ldi	r26, 0x00	; 0
    9606:	b0 e0       	ldi	r27, 0x00	; 0
    9608:	e8 e0       	ldi	r30, 0x08	; 8
    960a:	fb e4       	ldi	r31, 0x4B	; 75
    960c:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    9610:	dc 01       	movw	r26, r24
    9612:	6d 90       	ld	r6, X+
    9614:	7c 90       	ld	r7, X
    9616:	11 97       	sbiw	r26, 0x01	; 1
    9618:	fb 01       	movw	r30, r22
    961a:	16 8a       	std	Z+22, r1	; 0x16
    961c:	56 96       	adiw	r26, 0x16	; 22
    961e:	0d 91       	ld	r16, X+
    9620:	1d 91       	ld	r17, X+
    9622:	2d 91       	ld	r18, X+
    9624:	3c 91       	ld	r19, X
    9626:	59 97       	sbiw	r26, 0x19	; 25
    9628:	01 15       	cp	r16, r1
    962a:	11 05       	cpc	r17, r1
    962c:	21 05       	cpc	r18, r1
    962e:	31 05       	cpc	r19, r1
    9630:	09 f4       	brne	.+2      	; 0x9634 <get_fileinfo+0x30>
    9632:	fc c0       	rjmp	.+504    	; 0x982c <get_fileinfo+0x228>
    9634:	eb 01       	movw	r28, r22
    9636:	8c 01       	movw	r16, r24
    9638:	fc 01       	movw	r30, r24
    963a:	80 a5       	ldd	r24, Z+40	; 0x28
    963c:	91 a5       	ldd	r25, Z+41	; 0x29
    963e:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9640:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9642:	8f 3f       	cpi	r24, 0xFF	; 255
    9644:	9f 4f       	sbci	r25, 0xFF	; 255
    9646:	af 4f       	sbci	r26, 0xFF	; 255
    9648:	bf 4f       	sbci	r27, 0xFF	; 255
    964a:	09 f4       	brne	.+2      	; 0x964e <get_fileinfo+0x4a>
    964c:	49 c0       	rjmp	.+146    	; 0x96e0 <get_fileinfo+0xdc>
    964e:	a1 2c       	mov	r10, r1
    9650:	b1 2c       	mov	r11, r1
    9652:	c1 2c       	mov	r12, r1
    9654:	d1 2c       	mov	r13, r1
    9656:	e1 2c       	mov	r14, r1
    9658:	f1 2c       	mov	r15, r1
    965a:	88 24       	eor	r8, r8
    965c:	8a 94       	dec	r8
    965e:	91 2c       	mov	r9, r1
    9660:	d3 01       	movw	r26, r6
    9662:	1b 96       	adiw	r26, 0x0b	; 11
    9664:	ed 91       	ld	r30, X+
    9666:	fc 91       	ld	r31, X
    9668:	1c 97       	sbiw	r26, 0x0c	; 12
    966a:	ea 0d       	add	r30, r10
    966c:	fb 1d       	adc	r31, r11
    966e:	80 81       	ld	r24, Z
    9670:	91 81       	ldd	r25, Z+1	; 0x01
    9672:	00 97       	sbiw	r24, 0x00	; 0
    9674:	69 f1       	breq	.+90     	; 0x96d0 <get_fileinfo+0xcc>
    9676:	c1 14       	cp	r12, r1
    9678:	d1 04       	cpc	r13, r1
    967a:	29 f4       	brne	.+10     	; 0x9686 <get_fileinfo+0x82>
    967c:	9c 01       	movw	r18, r24
    967e:	38 5d       	subi	r19, 0xD8	; 216
    9680:	21 15       	cp	r18, r1
    9682:	38 40       	sbci	r19, 0x08	; 8
    9684:	f0 f0       	brcs	.+60     	; 0x96c2 <get_fileinfo+0xbe>
    9686:	a7 01       	movw	r20, r14
    9688:	4a 5e       	subi	r20, 0xEA	; 234
    968a:	5f 4f       	sbci	r21, 0xFF	; 255
    968c:	4c 0f       	add	r20, r28
    968e:	5d 1f       	adc	r21, r29
    9690:	16 01       	movw	r2, r12
    9692:	41 2c       	mov	r4, r1
    9694:	51 2c       	mov	r5, r1
    9696:	21 01       	movw	r4, r2
    9698:	33 24       	eor	r3, r3
    969a:	22 24       	eor	r2, r2
    969c:	a0 e0       	ldi	r26, 0x00	; 0
    969e:	b0 e0       	ldi	r27, 0x00	; 0
    96a0:	bc 01       	movw	r22, r24
    96a2:	cd 01       	movw	r24, r26
    96a4:	62 29       	or	r22, r2
    96a6:	73 29       	or	r23, r3
    96a8:	84 29       	or	r24, r4
    96aa:	95 29       	or	r25, r5
    96ac:	94 01       	movw	r18, r8
    96ae:	2e 19       	sub	r18, r14
    96b0:	3f 09       	sbc	r19, r15
    96b2:	fb de       	rcall	.-522    	; 0x94aa <put_utf>
    96b4:	90 e0       	ldi	r25, 0x00	; 0
    96b6:	00 97       	sbiw	r24, 0x00	; 0
    96b8:	49 f0       	breq	.+18     	; 0x96cc <get_fileinfo+0xc8>
    96ba:	e8 0e       	add	r14, r24
    96bc:	f9 1e       	adc	r15, r25
    96be:	80 e0       	ldi	r24, 0x00	; 0
    96c0:	90 e0       	ldi	r25, 0x00	; 0
    96c2:	a2 e0       	ldi	r26, 0x02	; 2
    96c4:	aa 0e       	add	r10, r26
    96c6:	b1 1c       	adc	r11, r1
    96c8:	6c 01       	movw	r12, r24
    96ca:	ca cf       	rjmp	.-108    	; 0x9660 <get_fileinfo+0x5c>
    96cc:	e1 2c       	mov	r14, r1
    96ce:	f1 2c       	mov	r15, r1
    96d0:	cd 28       	or	r12, r13
    96d2:	11 f0       	breq	.+4      	; 0x96d8 <get_fileinfo+0xd4>
    96d4:	e1 2c       	mov	r14, r1
    96d6:	f1 2c       	mov	r15, r1
    96d8:	fe 01       	movw	r30, r28
    96da:	ee 0d       	add	r30, r14
    96dc:	ff 1d       	adc	r31, r15
    96de:	16 8a       	std	Z+22, r1	; 0x16
    96e0:	e1 2c       	mov	r14, r1
    96e2:	f1 2c       	mov	r15, r1
    96e4:	80 e0       	ldi	r24, 0x00	; 0
    96e6:	90 e0       	ldi	r25, 0x00	; 0
    96e8:	2c e0       	ldi	r18, 0x0C	; 12
    96ea:	a2 2e       	mov	r10, r18
    96ec:	b1 2c       	mov	r11, r1
    96ee:	3e e2       	ldi	r19, 0x2E	; 46
    96f0:	93 2e       	mov	r9, r19
    96f2:	6c 01       	movw	r12, r24
    96f4:	bf ef       	ldi	r27, 0xFF	; 255
    96f6:	cb 1a       	sub	r12, r27
    96f8:	db 0a       	sbc	r13, r27
    96fa:	f8 01       	movw	r30, r16
    96fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    96fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    9700:	f9 01       	movw	r30, r18
    9702:	e8 0f       	add	r30, r24
    9704:	f9 1f       	adc	r31, r25
    9706:	80 81       	ld	r24, Z
    9708:	90 e0       	ldi	r25, 0x00	; 0
    970a:	80 32       	cpi	r24, 0x20	; 32
    970c:	91 05       	cpc	r25, r1
    970e:	71 f1       	breq	.+92     	; 0x976c <get_fileinfo+0x168>
    9710:	85 30       	cpi	r24, 0x05	; 5
    9712:	91 05       	cpc	r25, r1
    9714:	11 f4       	brne	.+4      	; 0x971a <get_fileinfo+0x116>
    9716:	85 ee       	ldi	r24, 0xE5	; 229
    9718:	90 e0       	ldi	r25, 0x00	; 0
    971a:	f9 e0       	ldi	r31, 0x09	; 9
    971c:	cf 16       	cp	r12, r31
    971e:	d1 04       	cpc	r13, r1
    9720:	59 f4       	brne	.+22     	; 0x9738 <get_fileinfo+0x134>
    9722:	2c e0       	ldi	r18, 0x0C	; 12
    9724:	e2 16       	cp	r14, r18
    9726:	f1 04       	cpc	r15, r1
    9728:	38 f4       	brcc	.+14     	; 0x9738 <get_fileinfo+0x134>
    972a:	fe 01       	movw	r30, r28
    972c:	ee 0d       	add	r30, r14
    972e:	ff 1d       	adc	r31, r15
    9730:	91 86       	std	Z+9, r9	; 0x09
    9732:	d7 01       	movw	r26, r14
    9734:	11 96       	adiw	r26, 0x01	; 1
    9736:	7d 01       	movw	r14, r26
    9738:	65 eb       	ldi	r22, 0xB5	; 181
    973a:	71 e0       	ldi	r23, 0x01	; 1
    973c:	0e 94 c2 6b 	call	0xd784	; 0xd784 <ff_oem2uni>
    9740:	00 97       	sbiw	r24, 0x00	; 0
    9742:	19 f4       	brne	.+6      	; 0x974a <get_fileinfo+0x146>
    9744:	e1 2c       	mov	r14, r1
    9746:	f1 2c       	mov	r15, r1
    9748:	16 c0       	rjmp	.+44     	; 0x9776 <get_fileinfo+0x172>
    974a:	a7 01       	movw	r20, r14
    974c:	47 5f       	subi	r20, 0xF7	; 247
    974e:	5f 4f       	sbci	r21, 0xFF	; 255
    9750:	4c 0f       	add	r20, r28
    9752:	5d 1f       	adc	r21, r29
    9754:	bc 01       	movw	r22, r24
    9756:	80 e0       	ldi	r24, 0x00	; 0
    9758:	90 e0       	ldi	r25, 0x00	; 0
    975a:	95 01       	movw	r18, r10
    975c:	2e 19       	sub	r18, r14
    975e:	3f 09       	sbc	r19, r15
    9760:	a4 de       	rcall	.-696    	; 0x94aa <put_utf>
    9762:	90 e0       	ldi	r25, 0x00	; 0
    9764:	00 97       	sbiw	r24, 0x00	; 0
    9766:	71 f3       	breq	.-36     	; 0x9744 <get_fileinfo+0x140>
    9768:	e8 0e       	add	r14, r24
    976a:	f9 1e       	adc	r15, r25
    976c:	c6 01       	movw	r24, r12
    976e:	8b 30       	cpi	r24, 0x0B	; 11
    9770:	91 05       	cpc	r25, r1
    9772:	09 f0       	breq	.+2      	; 0x9776 <get_fileinfo+0x172>
    9774:	be cf       	rjmp	.-132    	; 0x96f2 <get_fileinfo+0xee>
    9776:	fe 01       	movw	r30, r28
    9778:	ee 0d       	add	r30, r14
    977a:	ff 1d       	adc	r31, r15
    977c:	11 86       	std	Z+9, r1	; 0x09
    977e:	8e 89       	ldd	r24, Y+22	; 0x16
    9780:	81 11       	cpse	r24, r1
    9782:	39 c0       	rjmp	.+114    	; 0x97f6 <get_fileinfo+0x1f2>
    9784:	e1 14       	cp	r14, r1
    9786:	f1 04       	cpc	r15, r1
    9788:	31 f0       	breq	.+12     	; 0x9796 <get_fileinfo+0x192>
    978a:	fe 01       	movw	r30, r28
    978c:	39 96       	adiw	r30, 0x09	; 9
    978e:	58 e0       	ldi	r21, 0x08	; 8
    9790:	20 e0       	ldi	r18, 0x00	; 0
    9792:	30 e0       	ldi	r19, 0x00	; 0
    9794:	13 c0       	rjmp	.+38     	; 0x97bc <get_fileinfo+0x1b8>
    9796:	8f e3       	ldi	r24, 0x3F	; 63
    9798:	8e 8b       	std	Y+22, r24	; 0x16
    979a:	21 e0       	ldi	r18, 0x01	; 1
    979c:	30 e0       	ldi	r19, 0x00	; 0
    979e:	1e c0       	rjmp	.+60     	; 0x97dc <get_fileinfo+0x1d8>
    97a0:	90 e0       	ldi	r25, 0x00	; 0
    97a2:	8e 32       	cpi	r24, 0x2E	; 46
    97a4:	91 05       	cpc	r25, r1
    97a6:	09 f4       	brne	.+2      	; 0x97aa <get_fileinfo+0x1a6>
    97a8:	50 e1       	ldi	r21, 0x10	; 16
    97aa:	bc 01       	movw	r22, r24
    97ac:	61 54       	subi	r22, 0x41	; 65
    97ae:	71 09       	sbc	r23, r1
    97b0:	6a 31       	cpi	r22, 0x1A	; 26
    97b2:	71 05       	cpc	r23, r1
    97b4:	38 f0       	brcs	.+14     	; 0x97c4 <get_fileinfo+0x1c0>
    97b6:	84 87       	std	Z+12, r24	; 0x0c
    97b8:	2f 5f       	subi	r18, 0xFF	; 255
    97ba:	3f 4f       	sbci	r19, 0xFF	; 255
    97bc:	81 91       	ld	r24, Z+
    97be:	81 11       	cpse	r24, r1
    97c0:	ef cf       	rjmp	.-34     	; 0x97a0 <get_fileinfo+0x19c>
    97c2:	0c c0       	rjmp	.+24     	; 0x97dc <get_fileinfo+0x1d8>
    97c4:	d8 01       	movw	r26, r16
    97c6:	5a 96       	adiw	r26, 0x1a	; 26
    97c8:	6d 91       	ld	r22, X+
    97ca:	7c 91       	ld	r23, X
    97cc:	5b 97       	sbiw	r26, 0x1b	; 27
    97ce:	db 01       	movw	r26, r22
    97d0:	1c 96       	adiw	r26, 0x0c	; 12
    97d2:	4c 91       	ld	r20, X
    97d4:	45 23       	and	r20, r21
    97d6:	79 f3       	breq	.-34     	; 0x97b6 <get_fileinfo+0x1b2>
    97d8:	80 96       	adiw	r24, 0x20	; 32
    97da:	ed cf       	rjmp	.-38     	; 0x97b6 <get_fileinfo+0x1b2>
    97dc:	fe 01       	movw	r30, r28
    97de:	e2 0f       	add	r30, r18
    97e0:	f3 1f       	adc	r31, r19
    97e2:	16 8a       	std	Z+22, r1	; 0x16
    97e4:	d8 01       	movw	r26, r16
    97e6:	5a 96       	adiw	r26, 0x1a	; 26
    97e8:	ed 91       	ld	r30, X+
    97ea:	fc 91       	ld	r31, X
    97ec:	5b 97       	sbiw	r26, 0x1b	; 27
    97ee:	84 85       	ldd	r24, Z+12	; 0x0c
    97f0:	81 11       	cpse	r24, r1
    97f2:	01 c0       	rjmp	.+2      	; 0x97f6 <get_fileinfo+0x1f2>
    97f4:	19 86       	std	Y+9, r1	; 0x09
    97f6:	d8 01       	movw	r26, r16
    97f8:	5a 96       	adiw	r26, 0x1a	; 26
    97fa:	ed 91       	ld	r30, X+
    97fc:	fc 91       	ld	r31, X
    97fe:	5b 97       	sbiw	r26, 0x1b	; 27
    9800:	83 85       	ldd	r24, Z+11	; 0x0b
    9802:	88 87       	std	Y+8, r24	; 0x08
    9804:	5a 96       	adiw	r26, 0x1a	; 26
    9806:	0d 91       	ld	r16, X+
    9808:	1c 91       	ld	r17, X
    980a:	5b 97       	sbiw	r26, 0x1b	; 27
    980c:	c8 01       	movw	r24, r16
    980e:	4c 96       	adiw	r24, 0x1c	; 28
    9810:	bd dc       	rcall	.-1670   	; 0x918c <ld_dword>
    9812:	68 83       	st	Y, r22
    9814:	79 83       	std	Y+1, r23	; 0x01
    9816:	8a 83       	std	Y+2, r24	; 0x02
    9818:	9b 83       	std	Y+3, r25	; 0x03
    981a:	f8 01       	movw	r30, r16
    981c:	86 89       	ldd	r24, Z+22	; 0x16
    981e:	97 89       	ldd	r25, Z+23	; 0x17
    9820:	9f 83       	std	Y+7, r25	; 0x07
    9822:	8e 83       	std	Y+6, r24	; 0x06
    9824:	80 8d       	ldd	r24, Z+24	; 0x18
    9826:	91 8d       	ldd	r25, Z+25	; 0x19
    9828:	9d 83       	std	Y+5, r25	; 0x05
    982a:	8c 83       	std	Y+4, r24	; 0x04
    982c:	cd b7       	in	r28, 0x3d	; 61
    982e:	de b7       	in	r29, 0x3e	; 62
    9830:	e2 e1       	ldi	r30, 0x12	; 18
    9832:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00009836 <ld_clust.isra.4>:
    9836:	fb 01       	movw	r30, r22
    9838:	42 8d       	ldd	r20, Z+26	; 0x1a
    983a:	53 8d       	ldd	r21, Z+27	; 0x1b
    983c:	60 e0       	ldi	r22, 0x00	; 0
    983e:	70 e0       	ldi	r23, 0x00	; 0
    9840:	83 30       	cpi	r24, 0x03	; 3
    9842:	59 f4       	brne	.+22     	; 0x985a <ld_clust.isra.4+0x24>
    9844:	84 89       	ldd	r24, Z+20	; 0x14
    9846:	95 89       	ldd	r25, Z+21	; 0x15
    9848:	a0 e0       	ldi	r26, 0x00	; 0
    984a:	b0 e0       	ldi	r27, 0x00	; 0
    984c:	dc 01       	movw	r26, r24
    984e:	99 27       	eor	r25, r25
    9850:	88 27       	eor	r24, r24
    9852:	48 2b       	or	r20, r24
    9854:	59 2b       	or	r21, r25
    9856:	6a 2b       	or	r22, r26
    9858:	7b 2b       	or	r23, r27
    985a:	cb 01       	movw	r24, r22
    985c:	ba 01       	movw	r22, r20
    985e:	08 95       	ret

00009860 <st_clust.isra.5>:
    9860:	fb 01       	movw	r30, r22
    9862:	22 8f       	std	Z+26, r18	; 0x1a
    9864:	33 8f       	std	Z+27, r19	; 0x1b
    9866:	dc 01       	movw	r26, r24
    9868:	8c 91       	ld	r24, X
    986a:	83 30       	cpi	r24, 0x03	; 3
    986c:	29 f4       	brne	.+10     	; 0x9878 <st_clust.isra.5+0x18>
    986e:	ca 01       	movw	r24, r20
    9870:	aa 27       	eor	r26, r26
    9872:	bb 27       	eor	r27, r27
    9874:	84 8b       	std	Z+20, r24	; 0x14
    9876:	95 8b       	std	Z+21, r25	; 0x15
    9878:	08 95       	ret

0000987a <sync_window.part.6>:
    987a:	8f 92       	push	r8
    987c:	9f 92       	push	r9
    987e:	af 92       	push	r10
    9880:	bf 92       	push	r11
    9882:	ef 92       	push	r14
    9884:	ff 92       	push	r15
    9886:	0f 93       	push	r16
    9888:	1f 93       	push	r17
    988a:	cf 93       	push	r28
    988c:	df 93       	push	r29
    988e:	ec 01       	movw	r28, r24
    9890:	7c 01       	movw	r14, r24
    9892:	45 e3       	ldi	r20, 0x35	; 53
    9894:	e4 0e       	add	r14, r20
    9896:	f1 1c       	adc	r15, r1
    9898:	29 a9       	ldd	r18, Y+49	; 0x31
    989a:	3a a9       	ldd	r19, Y+50	; 0x32
    989c:	4b a9       	ldd	r20, Y+51	; 0x33
    989e:	5c a9       	ldd	r21, Y+52	; 0x34
    98a0:	01 e0       	ldi	r16, 0x01	; 1
    98a2:	10 e0       	ldi	r17, 0x00	; 0
    98a4:	b7 01       	movw	r22, r14
    98a6:	89 81       	ldd	r24, Y+1	; 0x01
    98a8:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    98ac:	89 2b       	or	r24, r25
    98ae:	41 f5       	brne	.+80     	; 0x9900 <sync_window.part.6+0x86>
    98b0:	1b 82       	std	Y+3, r1	; 0x03
    98b2:	09 a9       	ldd	r16, Y+49	; 0x31
    98b4:	1a a9       	ldd	r17, Y+50	; 0x32
    98b6:	2b a9       	ldd	r18, Y+51	; 0x33
    98b8:	3c a9       	ldd	r19, Y+52	; 0x34
    98ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    98bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    98be:	af 8d       	ldd	r26, Y+31	; 0x1f
    98c0:	b8 a1       	ldd	r27, Y+32	; 0x20
    98c2:	8d a0       	ldd	r8, Y+37	; 0x25
    98c4:	9e a0       	ldd	r9, Y+38	; 0x26
    98c6:	af a0       	ldd	r10, Y+39	; 0x27
    98c8:	b8 a4       	ldd	r11, Y+40	; 0x28
    98ca:	b9 01       	movw	r22, r18
    98cc:	a8 01       	movw	r20, r16
    98ce:	48 19       	sub	r20, r8
    98d0:	59 09       	sbc	r21, r9
    98d2:	6a 09       	sbc	r22, r10
    98d4:	7b 09       	sbc	r23, r11
    98d6:	48 17       	cp	r20, r24
    98d8:	59 07       	cpc	r21, r25
    98da:	6a 07       	cpc	r22, r26
    98dc:	7b 07       	cpc	r23, r27
    98de:	98 f4       	brcc	.+38     	; 0x9906 <sync_window.part.6+0x8c>
    98e0:	6a 81       	ldd	r22, Y+2	; 0x02
    98e2:	62 30       	cpi	r22, 0x02	; 2
    98e4:	81 f4       	brne	.+32     	; 0x9906 <sync_window.part.6+0x8c>
    98e6:	a9 01       	movw	r20, r18
    98e8:	98 01       	movw	r18, r16
    98ea:	28 0f       	add	r18, r24
    98ec:	39 1f       	adc	r19, r25
    98ee:	4a 1f       	adc	r20, r26
    98f0:	5b 1f       	adc	r21, r27
    98f2:	01 e0       	ldi	r16, 0x01	; 1
    98f4:	10 e0       	ldi	r17, 0x00	; 0
    98f6:	b7 01       	movw	r22, r14
    98f8:	89 81       	ldd	r24, Y+1	; 0x01
    98fa:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    98fe:	03 c0       	rjmp	.+6      	; 0x9906 <sync_window.part.6+0x8c>
    9900:	81 e0       	ldi	r24, 0x01	; 1
    9902:	90 e0       	ldi	r25, 0x00	; 0
    9904:	02 c0       	rjmp	.+4      	; 0x990a <sync_window.part.6+0x90>
    9906:	80 e0       	ldi	r24, 0x00	; 0
    9908:	90 e0       	ldi	r25, 0x00	; 0
    990a:	df 91       	pop	r29
    990c:	cf 91       	pop	r28
    990e:	1f 91       	pop	r17
    9910:	0f 91       	pop	r16
    9912:	ff 90       	pop	r15
    9914:	ef 90       	pop	r14
    9916:	bf 90       	pop	r11
    9918:	af 90       	pop	r10
    991a:	9f 90       	pop	r9
    991c:	8f 90       	pop	r8
    991e:	08 95       	ret

00009920 <sync_fs>:
    9920:	ef 92       	push	r14
    9922:	ff 92       	push	r15
    9924:	0f 93       	push	r16
    9926:	1f 93       	push	r17
    9928:	cf 93       	push	r28
    992a:	df 93       	push	r29
    992c:	ec 01       	movw	r28, r24
    992e:	8b 81       	ldd	r24, Y+3	; 0x03
    9930:	81 11       	cpse	r24, r1
    9932:	05 c0       	rjmp	.+10     	; 0x993e <sync_fs+0x1e>
    9934:	88 81       	ld	r24, Y
    9936:	83 30       	cpi	r24, 0x03	; 3
    9938:	09 f0       	breq	.+2      	; 0x993c <sync_fs+0x1c>
    993a:	52 c0       	rjmp	.+164    	; 0x99e0 <sync_fs+0xc0>
    993c:	06 c0       	rjmp	.+12     	; 0x994a <sync_fs+0x2a>
    993e:	ce 01       	movw	r24, r28
    9940:	9c df       	rcall	.-200    	; 0x987a <sync_window.part.6>
    9942:	00 97       	sbiw	r24, 0x00	; 0
    9944:	09 f0       	breq	.+2      	; 0x9948 <sync_fs+0x28>
    9946:	59 c0       	rjmp	.+178    	; 0x99fa <sync_fs+0xda>
    9948:	f5 cf       	rjmp	.-22     	; 0x9934 <sync_fs+0x14>
    994a:	8c 81       	ldd	r24, Y+4	; 0x04
    994c:	81 30       	cpi	r24, 0x01	; 1
    994e:	09 f0       	breq	.+2      	; 0x9952 <sync_fs+0x32>
    9950:	47 c0       	rjmp	.+142    	; 0x99e0 <sync_fs+0xc0>
    9952:	40 e0       	ldi	r20, 0x00	; 0
    9954:	52 e0       	ldi	r21, 0x02	; 2
    9956:	60 e0       	ldi	r22, 0x00	; 0
    9958:	70 e0       	ldi	r23, 0x00	; 0
    995a:	7e 01       	movw	r14, r28
    995c:	85 e3       	ldi	r24, 0x35	; 53
    995e:	e8 0e       	add	r14, r24
    9960:	f1 1c       	adc	r15, r1
    9962:	c7 01       	movw	r24, r14
    9964:	2e dc       	rcall	.-1956   	; 0x91c2 <mem_set>
    9966:	85 e5       	ldi	r24, 0x55	; 85
    9968:	fe 01       	movw	r30, r28
    996a:	ed 5c       	subi	r30, 0xCD	; 205
    996c:	fd 4f       	sbci	r31, 0xFD	; 253
    996e:	80 83       	st	Z, r24
    9970:	8a ea       	ldi	r24, 0xAA	; 170
    9972:	31 96       	adiw	r30, 0x01	; 1
    9974:	80 83       	st	Z, r24
    9976:	82 e5       	ldi	r24, 0x52	; 82
    9978:	8d ab       	std	Y+53, r24	; 0x35
    997a:	8e ab       	std	Y+54, r24	; 0x36
    997c:	81 e6       	ldi	r24, 0x61	; 97
    997e:	8f ab       	std	Y+55, r24	; 0x37
    9980:	91 e4       	ldi	r25, 0x41	; 65
    9982:	98 af       	std	Y+56, r25	; 0x38
    9984:	22 e7       	ldi	r18, 0x72	; 114
    9986:	7b 97       	sbiw	r30, 0x1b	; 27
    9988:	20 83       	st	Z, r18
    998a:	31 96       	adiw	r30, 0x01	; 1
    998c:	20 83       	st	Z, r18
    998e:	31 96       	adiw	r30, 0x01	; 1
    9990:	90 83       	st	Z, r25
    9992:	31 96       	adiw	r30, 0x01	; 1
    9994:	80 83       	st	Z, r24
    9996:	49 89       	ldd	r20, Y+17	; 0x11
    9998:	5a 89       	ldd	r21, Y+18	; 0x12
    999a:	6b 89       	ldd	r22, Y+19	; 0x13
    999c:	7c 89       	ldd	r23, Y+20	; 0x14
    999e:	ce 01       	movw	r24, r28
    99a0:	83 5e       	subi	r24, 0xE3	; 227
    99a2:	9d 4f       	sbci	r25, 0xFD	; 253
    99a4:	08 dc       	rcall	.-2032   	; 0x91b6 <st_dword>
    99a6:	4d 85       	ldd	r20, Y+13	; 0x0d
    99a8:	5e 85       	ldd	r21, Y+14	; 0x0e
    99aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    99ac:	78 89       	ldd	r23, Y+16	; 0x10
    99ae:	ce 01       	movw	r24, r28
    99b0:	8f 5d       	subi	r24, 0xDF	; 223
    99b2:	9d 4f       	sbci	r25, 0xFD	; 253
    99b4:	00 dc       	rcall	.-2048   	; 0x91b6 <st_dword>
    99b6:	89 a1       	ldd	r24, Y+33	; 0x21
    99b8:	9a a1       	ldd	r25, Y+34	; 0x22
    99ba:	ab a1       	ldd	r26, Y+35	; 0x23
    99bc:	bc a1       	ldd	r27, Y+36	; 0x24
    99be:	9c 01       	movw	r18, r24
    99c0:	ad 01       	movw	r20, r26
    99c2:	2f 5f       	subi	r18, 0xFF	; 255
    99c4:	3f 4f       	sbci	r19, 0xFF	; 255
    99c6:	4f 4f       	sbci	r20, 0xFF	; 255
    99c8:	5f 4f       	sbci	r21, 0xFF	; 255
    99ca:	29 ab       	std	Y+49, r18	; 0x31
    99cc:	3a ab       	std	Y+50, r19	; 0x32
    99ce:	4b ab       	std	Y+51, r20	; 0x33
    99d0:	5c ab       	std	Y+52, r21	; 0x34
    99d2:	01 e0       	ldi	r16, 0x01	; 1
    99d4:	10 e0       	ldi	r17, 0x00	; 0
    99d6:	b7 01       	movw	r22, r14
    99d8:	89 81       	ldd	r24, Y+1	; 0x01
    99da:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    99de:	1c 82       	std	Y+4, r1	; 0x04
    99e0:	40 e0       	ldi	r20, 0x00	; 0
    99e2:	50 e0       	ldi	r21, 0x00	; 0
    99e4:	60 e0       	ldi	r22, 0x00	; 0
    99e6:	89 81       	ldd	r24, Y+1	; 0x01
    99e8:	0e 94 65 6c 	call	0xd8ca	; 0xd8ca <disk_ioctl>
    99ec:	31 e0       	ldi	r19, 0x01	; 1
    99ee:	20 e0       	ldi	r18, 0x00	; 0
    99f0:	89 2b       	or	r24, r25
    99f2:	09 f4       	brne	.+2      	; 0x99f6 <sync_fs+0xd6>
    99f4:	30 e0       	ldi	r19, 0x00	; 0
    99f6:	83 2f       	mov	r24, r19
    99f8:	92 2f       	mov	r25, r18
    99fa:	cd b7       	in	r28, 0x3d	; 61
    99fc:	de b7       	in	r29, 0x3e	; 62
    99fe:	e6 e0       	ldi	r30, 0x06	; 6
    9a00:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00009a04 <dir_clear>:
    9a04:	4f 92       	push	r4
    9a06:	5f 92       	push	r5
    9a08:	6f 92       	push	r6
    9a0a:	7f 92       	push	r7
    9a0c:	af 92       	push	r10
    9a0e:	bf 92       	push	r11
    9a10:	cf 92       	push	r12
    9a12:	df 92       	push	r13
    9a14:	ef 92       	push	r14
    9a16:	ff 92       	push	r15
    9a18:	0f 93       	push	r16
    9a1a:	1f 93       	push	r17
    9a1c:	cf 93       	push	r28
    9a1e:	df 93       	push	r29
    9a20:	ec 01       	movw	r28, r24
    9a22:	6a 01       	movw	r12, r20
    9a24:	7b 01       	movw	r14, r22
    9a26:	8b 81       	ldd	r24, Y+3	; 0x03
    9a28:	81 11       	cpse	r24, r1
    9a2a:	28 c0       	rjmp	.+80     	; 0x9a7c <dir_clear+0x78>
    9a2c:	b7 01       	movw	r22, r14
    9a2e:	a6 01       	movw	r20, r12
    9a30:	ce 01       	movw	r24, r28
    9a32:	65 dc       	rcall	.-1846   	; 0x92fe <clst2sect>
    9a34:	2b 01       	movw	r4, r22
    9a36:	3c 01       	movw	r6, r24
    9a38:	69 ab       	std	Y+49, r22	; 0x31
    9a3a:	7a ab       	std	Y+50, r23	; 0x32
    9a3c:	8b ab       	std	Y+51, r24	; 0x33
    9a3e:	9c ab       	std	Y+52, r25	; 0x34
    9a40:	5e 01       	movw	r10, r28
    9a42:	25 e3       	ldi	r18, 0x35	; 53
    9a44:	a2 0e       	add	r10, r18
    9a46:	b1 1c       	adc	r11, r1
    9a48:	40 e0       	ldi	r20, 0x00	; 0
    9a4a:	52 e0       	ldi	r21, 0x02	; 2
    9a4c:	60 e0       	ldi	r22, 0x00	; 0
    9a4e:	70 e0       	ldi	r23, 0x00	; 0
    9a50:	c5 01       	movw	r24, r10
    9a52:	b7 db       	rcall	.-2194   	; 0x91c2 <mem_set>
    9a54:	09 85       	ldd	r16, Y+9	; 0x09
    9a56:	1a 85       	ldd	r17, Y+10	; 0x0a
    9a58:	c8 01       	movw	r24, r16
    9a5a:	a0 e0       	ldi	r26, 0x00	; 0
    9a5c:	b0 e0       	ldi	r27, 0x00	; 0
    9a5e:	39 e0       	ldi	r19, 0x09	; 9
    9a60:	88 0f       	add	r24, r24
    9a62:	99 1f       	adc	r25, r25
    9a64:	aa 1f       	adc	r26, r26
    9a66:	bb 1f       	adc	r27, r27
    9a68:	3a 95       	dec	r19
    9a6a:	d1 f7       	brne	.-12     	; 0x9a60 <dir_clear+0x5c>
    9a6c:	81 15       	cp	r24, r1
    9a6e:	90 48       	sbci	r25, 0x80	; 128
    9a70:	a1 05       	cpc	r26, r1
    9a72:	b1 05       	cpc	r27, r1
    9a74:	50 f0       	brcs	.+20     	; 0x9a8a <dir_clear+0x86>
    9a76:	00 e0       	ldi	r16, 0x00	; 0
    9a78:	10 e8       	ldi	r17, 0x80	; 128
    9a7a:	14 c0       	rjmp	.+40     	; 0x9aa4 <dir_clear+0xa0>
    9a7c:	ce 01       	movw	r24, r28
    9a7e:	fd de       	rcall	.-518    	; 0x987a <sync_window.part.6>
    9a80:	89 2b       	or	r24, r25
    9a82:	a1 f2       	breq	.-88     	; 0x9a2c <dir_clear+0x28>
    9a84:	81 e0       	ldi	r24, 0x01	; 1
    9a86:	90 e0       	ldi	r25, 0x00	; 0
    9a88:	56 c0       	rjmp	.+172    	; 0x9b36 <dir_clear+0x132>
    9a8a:	10 2f       	mov	r17, r16
    9a8c:	00 27       	eor	r16, r16
    9a8e:	11 0f       	add	r17, r17
    9a90:	09 c0       	rjmp	.+18     	; 0x9aa4 <dir_clear+0xa0>
    9a92:	c8 01       	movw	r24, r16
    9a94:	0e 94 89 6b 	call	0xd712	; 0xd712 <ff_memalloc>
    9a98:	6c 01       	movw	r12, r24
    9a9a:	00 97       	sbiw	r24, 0x00	; 0
    9a9c:	09 f0       	breq	.+2      	; 0x9aa0 <dir_clear+0x9c>
    9a9e:	40 c0       	rjmp	.+128    	; 0x9b20 <dir_clear+0x11c>
    9aa0:	16 95       	lsr	r17
    9aa2:	07 95       	ror	r16
    9aa4:	01 30       	cpi	r16, 0x01	; 1
    9aa6:	82 e0       	ldi	r24, 0x02	; 2
    9aa8:	18 07       	cpc	r17, r24
    9aaa:	98 f7       	brcc	.-26     	; 0x9a92 <dir_clear+0x8e>
    9aac:	e1 2c       	mov	r14, r1
    9aae:	f1 2c       	mov	r15, r1
    9ab0:	11 c0       	rjmp	.+34     	; 0x9ad4 <dir_clear+0xd0>
    9ab2:	01 e0       	ldi	r16, 0x01	; 1
    9ab4:	10 e0       	ldi	r17, 0x00	; 0
    9ab6:	a3 01       	movw	r20, r6
    9ab8:	92 01       	movw	r18, r4
    9aba:	2e 0d       	add	r18, r14
    9abc:	3f 1d       	adc	r19, r15
    9abe:	41 1d       	adc	r20, r1
    9ac0:	51 1d       	adc	r21, r1
    9ac2:	b5 01       	movw	r22, r10
    9ac4:	89 81       	ldd	r24, Y+1	; 0x01
    9ac6:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    9aca:	89 2b       	or	r24, r25
    9acc:	01 f5       	brne	.+64     	; 0x9b0e <dir_clear+0x10a>
    9ace:	2f ef       	ldi	r18, 0xFF	; 255
    9ad0:	e2 1a       	sub	r14, r18
    9ad2:	f2 0a       	sbc	r15, r18
    9ad4:	89 85       	ldd	r24, Y+9	; 0x09
    9ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    9ad8:	e8 16       	cp	r14, r24
    9ada:	f9 06       	cpc	r15, r25
    9adc:	50 f3       	brcs	.-44     	; 0x9ab2 <dir_clear+0xae>
    9ade:	17 c0       	rjmp	.+46     	; 0x9b0e <dir_clear+0x10a>
    9ae0:	85 01       	movw	r16, r10
    9ae2:	a3 01       	movw	r20, r6
    9ae4:	92 01       	movw	r18, r4
    9ae6:	2e 0d       	add	r18, r14
    9ae8:	3f 1d       	adc	r19, r15
    9aea:	41 1d       	adc	r20, r1
    9aec:	51 1d       	adc	r21, r1
    9aee:	b6 01       	movw	r22, r12
    9af0:	89 81       	ldd	r24, Y+1	; 0x01
    9af2:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    9af6:	89 2b       	or	r24, r25
    9af8:	39 f4       	brne	.+14     	; 0x9b08 <dir_clear+0x104>
    9afa:	ea 0c       	add	r14, r10
    9afc:	fb 1c       	adc	r15, r11
    9afe:	89 85       	ldd	r24, Y+9	; 0x09
    9b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    9b02:	e8 16       	cp	r14, r24
    9b04:	f9 06       	cpc	r15, r25
    9b06:	60 f3       	brcs	.-40     	; 0x9ae0 <dir_clear+0xdc>
    9b08:	c6 01       	movw	r24, r12
    9b0a:	0e 94 8c 6b 	call	0xd718	; 0xd718 <ff_memfree>
    9b0e:	81 e0       	ldi	r24, 0x01	; 1
    9b10:	90 e0       	ldi	r25, 0x00	; 0
    9b12:	29 85       	ldd	r18, Y+9	; 0x09
    9b14:	3a 85       	ldd	r19, Y+10	; 0x0a
    9b16:	2e 15       	cp	r18, r14
    9b18:	3f 05       	cpc	r19, r15
    9b1a:	69 f4       	brne	.+26     	; 0x9b36 <dir_clear+0x132>
    9b1c:	80 e0       	ldi	r24, 0x00	; 0
    9b1e:	0b c0       	rjmp	.+22     	; 0x9b36 <dir_clear+0x132>
    9b20:	a8 01       	movw	r20, r16
    9b22:	60 e0       	ldi	r22, 0x00	; 0
    9b24:	70 e0       	ldi	r23, 0x00	; 0
    9b26:	4d db       	rcall	.-2406   	; 0x91c2 <mem_set>
    9b28:	58 01       	movw	r10, r16
    9b2a:	ab 2c       	mov	r10, r11
    9b2c:	bb 24       	eor	r11, r11
    9b2e:	a6 94       	lsr	r10
    9b30:	e1 2c       	mov	r14, r1
    9b32:	f1 2c       	mov	r15, r1
    9b34:	e4 cf       	rjmp	.-56     	; 0x9afe <dir_clear+0xfa>
    9b36:	df 91       	pop	r29
    9b38:	cf 91       	pop	r28
    9b3a:	1f 91       	pop	r17
    9b3c:	0f 91       	pop	r16
    9b3e:	ff 90       	pop	r15
    9b40:	ef 90       	pop	r14
    9b42:	df 90       	pop	r13
    9b44:	cf 90       	pop	r12
    9b46:	bf 90       	pop	r11
    9b48:	af 90       	pop	r10
    9b4a:	7f 90       	pop	r7
    9b4c:	6f 90       	pop	r6
    9b4e:	5f 90       	pop	r5
    9b50:	4f 90       	pop	r4
    9b52:	08 95       	ret

00009b54 <move_window>:
    9b54:	a0 e0       	ldi	r26, 0x00	; 0
    9b56:	b0 e0       	ldi	r27, 0x00	; 0
    9b58:	e0 eb       	ldi	r30, 0xB0	; 176
    9b5a:	fd e4       	ldi	r31, 0x4D	; 77
    9b5c:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    9b60:	ec 01       	movw	r28, r24
    9b62:	6a 01       	movw	r12, r20
    9b64:	7b 01       	movw	r14, r22
    9b66:	89 a9       	ldd	r24, Y+49	; 0x31
    9b68:	9a a9       	ldd	r25, Y+50	; 0x32
    9b6a:	ab a9       	ldd	r26, Y+51	; 0x33
    9b6c:	bc a9       	ldd	r27, Y+52	; 0x34
    9b6e:	84 17       	cp	r24, r20
    9b70:	95 07       	cpc	r25, r21
    9b72:	a6 07       	cpc	r26, r22
    9b74:	b7 07       	cpc	r27, r23
    9b76:	11 f1       	breq	.+68     	; 0x9bbc <move_window+0x68>
    9b78:	8b 81       	ldd	r24, Y+3	; 0x03
    9b7a:	81 11       	cpse	r24, r1
    9b7c:	13 c0       	rjmp	.+38     	; 0x9ba4 <move_window+0x50>
    9b7e:	01 e0       	ldi	r16, 0x01	; 1
    9b80:	10 e0       	ldi	r17, 0x00	; 0
    9b82:	a7 01       	movw	r20, r14
    9b84:	96 01       	movw	r18, r12
    9b86:	be 01       	movw	r22, r28
    9b88:	6b 5c       	subi	r22, 0xCB	; 203
    9b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    9b8c:	89 81       	ldd	r24, Y+1	; 0x01
    9b8e:	0e 94 45 6c 	call	0xd88a	; 0xd88a <disk_read>
    9b92:	89 2b       	or	r24, r25
    9b94:	61 f0       	breq	.+24     	; 0x9bae <move_window+0x5a>
    9b96:	81 e0       	ldi	r24, 0x01	; 1
    9b98:	90 e0       	ldi	r25, 0x00	; 0
    9b9a:	cc 24       	eor	r12, r12
    9b9c:	ca 94       	dec	r12
    9b9e:	dc 2c       	mov	r13, r12
    9ba0:	76 01       	movw	r14, r12
    9ba2:	07 c0       	rjmp	.+14     	; 0x9bb2 <move_window+0x5e>
    9ba4:	ce 01       	movw	r24, r28
    9ba6:	69 de       	rcall	.-814    	; 0x987a <sync_window.part.6>
    9ba8:	00 97       	sbiw	r24, 0x00	; 0
    9baa:	51 f4       	brne	.+20     	; 0x9bc0 <move_window+0x6c>
    9bac:	e8 cf       	rjmp	.-48     	; 0x9b7e <move_window+0x2a>
    9bae:	80 e0       	ldi	r24, 0x00	; 0
    9bb0:	90 e0       	ldi	r25, 0x00	; 0
    9bb2:	c9 aa       	std	Y+49, r12	; 0x31
    9bb4:	da aa       	std	Y+50, r13	; 0x32
    9bb6:	eb aa       	std	Y+51, r14	; 0x33
    9bb8:	fc aa       	std	Y+52, r15	; 0x34
    9bba:	02 c0       	rjmp	.+4      	; 0x9bc0 <move_window+0x6c>
    9bbc:	80 e0       	ldi	r24, 0x00	; 0
    9bbe:	90 e0       	ldi	r25, 0x00	; 0
    9bc0:	cd b7       	in	r28, 0x3d	; 61
    9bc2:	de b7       	in	r29, 0x3e	; 62
    9bc4:	e8 e0       	ldi	r30, 0x08	; 8
    9bc6:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

00009bca <check_fs>:
    9bca:	cf 93       	push	r28
    9bcc:	df 93       	push	r29
    9bce:	ec 01       	movw	r28, r24
    9bd0:	1b 82       	std	Y+3, r1	; 0x03
    9bd2:	8f ef       	ldi	r24, 0xFF	; 255
    9bd4:	9f ef       	ldi	r25, 0xFF	; 255
    9bd6:	dc 01       	movw	r26, r24
    9bd8:	89 ab       	std	Y+49, r24	; 0x31
    9bda:	9a ab       	std	Y+50, r25	; 0x32
    9bdc:	ab ab       	std	Y+51, r26	; 0x33
    9bde:	bc ab       	std	Y+52, r27	; 0x34
    9be0:	ce 01       	movw	r24, r28
    9be2:	b8 df       	rcall	.-144    	; 0x9b54 <move_window>
    9be4:	89 2b       	or	r24, r25
    9be6:	19 f5       	brne	.+70     	; 0x9c2e <check_fs+0x64>
    9be8:	fe 01       	movw	r30, r28
    9bea:	ed 5c       	subi	r30, 0xCD	; 205
    9bec:	fd 4f       	sbci	r31, 0xFD	; 253
    9bee:	80 81       	ld	r24, Z
    9bf0:	91 81       	ldd	r25, Z+1	; 0x01
    9bf2:	85 35       	cpi	r24, 0x55	; 85
    9bf4:	9a 4a       	sbci	r25, 0xAA	; 170
    9bf6:	f1 f4       	brne	.+60     	; 0x9c34 <check_fs+0x6a>
    9bf8:	8d a9       	ldd	r24, Y+53	; 0x35
    9bfa:	8b 3e       	cpi	r24, 0xEB	; 235
    9bfc:	19 f0       	breq	.+6      	; 0x9c04 <check_fs+0x3a>
    9bfe:	88 5e       	subi	r24, 0xE8	; 232
    9c00:	82 30       	cpi	r24, 0x02	; 2
    9c02:	f0 f4       	brcc	.+60     	; 0x9c40 <check_fs+0x76>
    9c04:	43 e0       	ldi	r20, 0x03	; 3
    9c06:	50 e0       	ldi	r21, 0x00	; 0
    9c08:	6a e5       	ldi	r22, 0x5A	; 90
    9c0a:	78 e0       	ldi	r23, 0x08	; 8
    9c0c:	ce 01       	movw	r24, r28
    9c0e:	85 59       	subi	r24, 0x95	; 149
    9c10:	9f 4f       	sbci	r25, 0xFF	; 255
    9c12:	e0 da       	rcall	.-2624   	; 0x91d4 <mem_cmp>
    9c14:	89 2b       	or	r24, r25
    9c16:	89 f0       	breq	.+34     	; 0x9c3a <check_fs+0x70>
    9c18:	45 e0       	ldi	r20, 0x05	; 5
    9c1a:	50 e0       	ldi	r21, 0x00	; 0
    9c1c:	60 ef       	ldi	r22, 0xF0	; 240
    9c1e:	77 e0       	ldi	r23, 0x07	; 7
    9c20:	ce 01       	movw	r24, r28
    9c22:	89 57       	subi	r24, 0x79	; 121
    9c24:	9f 4f       	sbci	r25, 0xFF	; 255
    9c26:	d6 da       	rcall	.-2644   	; 0x91d4 <mem_cmp>
    9c28:	89 2b       	or	r24, r25
    9c2a:	51 f4       	brne	.+20     	; 0x9c40 <check_fs+0x76>
    9c2c:	06 c0       	rjmp	.+12     	; 0x9c3a <check_fs+0x70>
    9c2e:	84 e0       	ldi	r24, 0x04	; 4
    9c30:	90 e0       	ldi	r25, 0x00	; 0
    9c32:	08 c0       	rjmp	.+16     	; 0x9c44 <check_fs+0x7a>
    9c34:	83 e0       	ldi	r24, 0x03	; 3
    9c36:	90 e0       	ldi	r25, 0x00	; 0
    9c38:	05 c0       	rjmp	.+10     	; 0x9c44 <check_fs+0x7a>
    9c3a:	80 e0       	ldi	r24, 0x00	; 0
    9c3c:	90 e0       	ldi	r25, 0x00	; 0
    9c3e:	02 c0       	rjmp	.+4      	; 0x9c44 <check_fs+0x7a>
    9c40:	82 e0       	ldi	r24, 0x02	; 2
    9c42:	90 e0       	ldi	r25, 0x00	; 0
    9c44:	df 91       	pop	r29
    9c46:	cf 91       	pop	r28
    9c48:	08 95       	ret

00009c4a <mount_volume>:
    9c4a:	a0 e2       	ldi	r26, 0x20	; 32
    9c4c:	b0 e0       	ldi	r27, 0x00	; 0
    9c4e:	eb e2       	ldi	r30, 0x2B	; 43
    9c50:	fe e4       	ldi	r31, 0x4E	; 78
    9c52:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
    9c56:	5b 01       	movw	r10, r22
    9c58:	f4 2e       	mov	r15, r20
    9c5a:	db 01       	movw	r26, r22
    9c5c:	1d 92       	st	X+, r1
    9c5e:	1c 92       	st	X, r1
    9c60:	c1 db       	rcall	.-2174   	; 0x93e4 <get_ldnumber>
    9c62:	6c 01       	movw	r12, r24
    9c64:	97 fd       	sbrc	r25, 7
    9c66:	41 c2       	rjmp	.+1154   	; 0xa0ea <mount_volume+0x4a0>
    9c68:	fc 01       	movw	r30, r24
    9c6a:	ee 0f       	add	r30, r30
    9c6c:	ff 1f       	adc	r31, r31
    9c6e:	eb 5c       	subi	r30, 0xCB	; 203
    9c70:	f7 4e       	sbci	r31, 0xE7	; 231
    9c72:	00 81       	ld	r16, Z
    9c74:	11 81       	ldd	r17, Z+1	; 0x01
    9c76:	01 15       	cp	r16, r1
    9c78:	11 05       	cpc	r17, r1
    9c7a:	09 f4       	brne	.+2      	; 0x9c7e <mount_volume+0x34>
    9c7c:	39 c2       	rjmp	.+1138   	; 0xa0f0 <mount_volume+0x4a6>
    9c7e:	f5 01       	movw	r30, r10
    9c80:	11 83       	std	Z+1, r17	; 0x01
    9c82:	00 83       	st	Z, r16
    9c84:	ff 2d       	mov	r31, r15
    9c86:	fe 7f       	andi	r31, 0xFE	; 254
    9c88:	ff 2e       	mov	r15, r31
    9c8a:	d8 01       	movw	r26, r16
    9c8c:	8c 91       	ld	r24, X
    9c8e:	88 23       	and	r24, r24
    9c90:	71 f0       	breq	.+28     	; 0x9cae <mount_volume+0x64>
    9c92:	11 96       	adiw	r26, 0x01	; 1
    9c94:	8c 91       	ld	r24, X
    9c96:	0e 94 39 6c 	call	0xd872	; 0xd872 <disk_status>
    9c9a:	80 fd       	sbrc	r24, 0
    9c9c:	08 c0       	rjmp	.+16     	; 0x9cae <mount_volume+0x64>
    9c9e:	ff 20       	and	r15, r15
    9ca0:	09 f4       	brne	.+2      	; 0x9ca4 <mount_volume+0x5a>
    9ca2:	29 c2       	rjmp	.+1106   	; 0xa0f6 <mount_volume+0x4ac>
    9ca4:	82 ff       	sbrs	r24, 2
    9ca6:	27 c2       	rjmp	.+1102   	; 0xa0f6 <mount_volume+0x4ac>
    9ca8:	8a e0       	ldi	r24, 0x0A	; 10
    9caa:	90 e0       	ldi	r25, 0x00	; 0
    9cac:	2c c2       	rjmp	.+1112   	; 0xa106 <mount_volume+0x4bc>
    9cae:	f8 01       	movw	r30, r16
    9cb0:	10 82       	st	Z, r1
    9cb2:	c1 82       	std	Z+1, r12	; 0x01
    9cb4:	8c 2d       	mov	r24, r12
    9cb6:	0e 94 3f 6c 	call	0xd87e	; 0xd87e <disk_initialize>
    9cba:	80 fd       	sbrc	r24, 0
    9cbc:	1f c2       	rjmp	.+1086   	; 0xa0fc <mount_volume+0x4b2>
    9cbe:	ff 20       	and	r15, r15
    9cc0:	11 f0       	breq	.+4      	; 0x9cc6 <mount_volume+0x7c>
    9cc2:	82 fd       	sbrc	r24, 2
    9cc4:	f1 cf       	rjmp	.-30     	; 0x9ca8 <mount_volume+0x5e>
    9cc6:	40 e0       	ldi	r20, 0x00	; 0
    9cc8:	50 e0       	ldi	r21, 0x00	; 0
    9cca:	ba 01       	movw	r22, r20
    9ccc:	c8 01       	movw	r24, r16
    9cce:	7d df       	rcall	.-262    	; 0x9bca <check_fs>
    9cd0:	82 30       	cpi	r24, 0x02	; 2
    9cd2:	91 05       	cpc	r25, r1
    9cd4:	b9 f5       	brne	.+110    	; 0x9d44 <mount_volume+0xfa>
    9cd6:	68 01       	movw	r12, r16
    9cd8:	f5 e0       	ldi	r31, 0x05	; 5
    9cda:	cf 1a       	sub	r12, r31
    9cdc:	fe ef       	ldi	r31, 0xFE	; 254
    9cde:	df 0a       	sbc	r13, r31
    9ce0:	9e 01       	movw	r18, r28
    9ce2:	2f 5f       	subi	r18, 0xFF	; 255
    9ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    9ce6:	79 01       	movw	r14, r18
    9ce8:	48 01       	movw	r8, r16
    9cea:	35 ec       	ldi	r19, 0xC5	; 197
    9cec:	83 1a       	sub	r8, r19
    9cee:	3d ef       	ldi	r19, 0xFD	; 253
    9cf0:	93 0a       	sbc	r9, r19
    9cf2:	57 01       	movw	r10, r14
    9cf4:	c6 01       	movw	r24, r12
    9cf6:	4a da       	rcall	.-2924   	; 0x918c <ld_dword>
    9cf8:	d5 01       	movw	r26, r10
    9cfa:	6d 93       	st	X+, r22
    9cfc:	7d 93       	st	X+, r23
    9cfe:	8d 93       	st	X+, r24
    9d00:	9d 93       	st	X+, r25
    9d02:	5d 01       	movw	r10, r26
    9d04:	b0 e1       	ldi	r27, 0x10	; 16
    9d06:	cb 0e       	add	r12, r27
    9d08:	d1 1c       	adc	r13, r1
    9d0a:	c8 14       	cp	r12, r8
    9d0c:	d9 04       	cpc	r13, r9
    9d0e:	91 f7       	brne	.-28     	; 0x9cf4 <mount_volume+0xaa>
    9d10:	6e 01       	movw	r12, r28
    9d12:	e1 e1       	ldi	r30, 0x11	; 17
    9d14:	ce 0e       	add	r12, r30
    9d16:	d1 1c       	adc	r13, r1
    9d18:	d7 01       	movw	r26, r14
    9d1a:	4d 91       	ld	r20, X+
    9d1c:	5d 91       	ld	r21, X+
    9d1e:	6d 91       	ld	r22, X+
    9d20:	7d 91       	ld	r23, X+
    9d22:	7d 01       	movw	r14, r26
    9d24:	41 15       	cp	r20, r1
    9d26:	51 05       	cpc	r21, r1
    9d28:	61 05       	cpc	r22, r1
    9d2a:	71 05       	cpc	r23, r1
    9d2c:	31 f0       	breq	.+12     	; 0x9d3a <mount_volume+0xf0>
    9d2e:	c8 01       	movw	r24, r16
    9d30:	4c df       	rcall	.-360    	; 0x9bca <check_fs>
    9d32:	82 30       	cpi	r24, 0x02	; 2
    9d34:	91 05       	cpc	r25, r1
    9d36:	18 f4       	brcc	.+6      	; 0x9d3e <mount_volume+0xf4>
    9d38:	05 c0       	rjmp	.+10     	; 0x9d44 <mount_volume+0xfa>
    9d3a:	83 e0       	ldi	r24, 0x03	; 3
    9d3c:	90 e0       	ldi	r25, 0x00	; 0
    9d3e:	ce 14       	cp	r12, r14
    9d40:	df 04       	cpc	r13, r15
    9d42:	51 f7       	brne	.-44     	; 0x9d18 <mount_volume+0xce>
    9d44:	84 30       	cpi	r24, 0x04	; 4
    9d46:	91 05       	cpc	r25, r1
    9d48:	09 f4       	brne	.+2      	; 0x9d4c <mount_volume+0x102>
    9d4a:	db c1       	rjmp	.+950    	; 0xa102 <mount_volume+0x4b8>
    9d4c:	02 97       	sbiw	r24, 0x02	; 2
    9d4e:	18 f0       	brcs	.+6      	; 0x9d56 <mount_volume+0x10c>
    9d50:	8d e0       	ldi	r24, 0x0D	; 13
    9d52:	90 e0       	ldi	r25, 0x00	; 0
    9d54:	d8 c1       	rjmp	.+944    	; 0xa106 <mount_volume+0x4bc>
    9d56:	f8 01       	movw	r30, r16
    9d58:	e0 5c       	subi	r30, 0xC0	; 192
    9d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    9d5c:	80 81       	ld	r24, Z
    9d5e:	91 81       	ldd	r25, Z+1	; 0x01
    9d60:	81 15       	cp	r24, r1
    9d62:	92 40       	sbci	r25, 0x02	; 2
    9d64:	a9 f7       	brne	.-22     	; 0x9d50 <mount_volume+0x106>
    9d66:	3b 96       	adiw	r30, 0x0b	; 11
    9d68:	40 80       	ld	r4, Z
    9d6a:	51 80       	ldd	r5, Z+1	; 0x01
    9d6c:	41 14       	cp	r4, r1
    9d6e:	51 04       	cpc	r5, r1
    9d70:	19 f0       	breq	.+6      	; 0x9d78 <mount_volume+0x12e>
    9d72:	61 2c       	mov	r6, r1
    9d74:	71 2c       	mov	r7, r1
    9d76:	06 c0       	rjmp	.+12     	; 0x9d84 <mount_volume+0x13a>
    9d78:	c8 01       	movw	r24, r16
    9d7a:	87 5a       	subi	r24, 0xA7	; 167
    9d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    9d7e:	06 da       	rcall	.-3060   	; 0x918c <ld_dword>
    9d80:	2b 01       	movw	r4, r22
    9d82:	3c 01       	movw	r6, r24
    9d84:	d8 01       	movw	r26, r16
    9d86:	d1 96       	adiw	r26, 0x31	; 49
    9d88:	2d 91       	ld	r18, X+
    9d8a:	3d 91       	ld	r19, X+
    9d8c:	4d 91       	ld	r20, X+
    9d8e:	5c 91       	ld	r21, X
    9d90:	d4 97       	sbiw	r26, 0x34	; 52
    9d92:	29 8b       	std	Y+17, r18	; 0x11
    9d94:	3a 8b       	std	Y+18, r19	; 0x12
    9d96:	4b 8b       	std	Y+19, r20	; 0x13
    9d98:	5c 8b       	std	Y+20, r21	; 0x14
    9d9a:	f8 01       	movw	r30, r16
    9d9c:	45 8e       	std	Z+29, r4	; 0x1d
    9d9e:	56 8e       	std	Z+30, r5	; 0x1e
    9da0:	67 8e       	std	Z+31, r6	; 0x1f
    9da2:	70 a2       	std	Z+32, r7	; 0x20
    9da4:	eb 5b       	subi	r30, 0xBB	; 187
    9da6:	ff 4f       	sbci	r31, 0xFF	; 255
    9da8:	a0 80       	ld	r10, Z
    9daa:	12 96       	adiw	r26, 0x02	; 2
    9dac:	ac 92       	st	X, r10
    9dae:	12 97       	sbiw	r26, 0x02	; 2
    9db0:	8f ef       	ldi	r24, 0xFF	; 255
    9db2:	8a 0d       	add	r24, r10
    9db4:	82 30       	cpi	r24, 0x02	; 2
    9db6:	60 f6       	brcc	.-104    	; 0x9d50 <mount_volume+0x106>
    9db8:	33 97       	sbiw	r30, 0x03	; 3
    9dba:	b0 80       	ld	r11, Z
    9dbc:	8b 2d       	mov	r24, r11
    9dbe:	90 e0       	ldi	r25, 0x00	; 0
    9dc0:	f8 01       	movw	r30, r16
    9dc2:	92 87       	std	Z+10, r25	; 0x0a
    9dc4:	81 87       	std	Z+9, r24	; 0x09
    9dc6:	00 97       	sbiw	r24, 0x00	; 0
    9dc8:	19 f2       	breq	.-122    	; 0x9d50 <mount_volume+0x106>
    9dca:	9c 01       	movw	r18, r24
    9dcc:	21 50       	subi	r18, 0x01	; 1
    9dce:	31 09       	sbc	r19, r1
    9dd0:	82 23       	and	r24, r18
    9dd2:	93 23       	and	r25, r19
    9dd4:	89 2b       	or	r24, r25
    9dd6:	09 f0       	breq	.+2      	; 0x9dda <mount_volume+0x190>
    9dd8:	bb cf       	rjmp	.-138    	; 0x9d50 <mount_volume+0x106>
    9dda:	ea 5b       	subi	r30, 0xBA	; 186
    9ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    9dde:	80 80       	ld	r8, Z
    9de0:	91 80       	ldd	r9, Z+1	; 0x01
    9de2:	18 96       	adiw	r26, 0x08	; 8
    9de4:	9c 92       	st	X, r9
    9de6:	8e 92       	st	-X, r8
    9de8:	17 97       	sbiw	r26, 0x07	; 7
    9dea:	c4 01       	movw	r24, r8
    9dec:	8f 70       	andi	r24, 0x0F	; 15
    9dee:	99 27       	eor	r25, r25
    9df0:	89 2b       	or	r24, r25
    9df2:	09 f0       	breq	.+2      	; 0x9df6 <mount_volume+0x1ac>
    9df4:	ad cf       	rjmp	.-166    	; 0x9d50 <mount_volume+0x106>
    9df6:	32 96       	adiw	r30, 0x02	; 2
    9df8:	80 81       	ld	r24, Z
    9dfa:	91 81       	ldd	r25, Z+1	; 0x01
    9dfc:	6c 01       	movw	r12, r24
    9dfe:	e1 2c       	mov	r14, r1
    9e00:	f1 2c       	mov	r15, r1
    9e02:	89 2b       	or	r24, r25
    9e04:	31 f4       	brne	.+12     	; 0x9e12 <mount_volume+0x1c8>
    9e06:	c8 01       	movw	r24, r16
    9e08:	8b 5a       	subi	r24, 0xAB	; 171
    9e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e0c:	bf d9       	rcall	.-3202   	; 0x918c <ld_dword>
    9e0e:	6b 01       	movw	r12, r22
    9e10:	7c 01       	movw	r14, r24
    9e12:	f8 01       	movw	r30, r16
    9e14:	ed 5b       	subi	r30, 0xBD	; 189
    9e16:	ff 4f       	sbci	r31, 0xFF	; 255
    9e18:	01 90       	ld	r0, Z+
    9e1a:	f0 81       	ld	r31, Z
    9e1c:	e0 2d       	mov	r30, r0
    9e1e:	30 97       	sbiw	r30, 0x00	; 0
    9e20:	09 f4       	brne	.+2      	; 0x9e24 <mount_volume+0x1da>
    9e22:	96 cf       	rjmp	.-212    	; 0x9d50 <mount_volume+0x106>
    9e24:	aa 2d       	mov	r26, r10
    9e26:	b0 e0       	ldi	r27, 0x00	; 0
    9e28:	a3 01       	movw	r20, r6
    9e2a:	92 01       	movw	r18, r4
    9e2c:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    9e30:	69 8f       	std	Y+25, r22	; 0x19
    9e32:	7a 8f       	std	Y+26, r23	; 0x1a
    9e34:	8b 8f       	std	Y+27, r24	; 0x1b
    9e36:	9c 8f       	std	Y+28, r25	; 0x1c
    9e38:	9f 01       	movw	r18, r30
    9e3a:	40 e0       	ldi	r20, 0x00	; 0
    9e3c:	50 e0       	ldi	r21, 0x00	; 0
    9e3e:	2d 8f       	std	Y+29, r18	; 0x1d
    9e40:	3e 8f       	std	Y+30, r19	; 0x1e
    9e42:	4f 8f       	std	Y+31, r20	; 0x1f
    9e44:	58 a3       	std	Y+32, r21	; 0x20
    9e46:	c4 01       	movw	r24, r8
    9e48:	f4 e0       	ldi	r31, 0x04	; 4
    9e4a:	96 95       	lsr	r25
    9e4c:	87 95       	ror	r24
    9e4e:	fa 95       	dec	r31
    9e50:	e1 f7       	brne	.-8      	; 0x9e4a <mount_volume+0x200>
    9e52:	28 0f       	add	r18, r24
    9e54:	39 1f       	adc	r19, r25
    9e56:	41 1d       	adc	r20, r1
    9e58:	51 1d       	adc	r21, r1
    9e5a:	da 01       	movw	r26, r20
    9e5c:	c9 01       	movw	r24, r18
    9e5e:	29 8d       	ldd	r18, Y+25	; 0x19
    9e60:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9e62:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9e64:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9e66:	28 0f       	add	r18, r24
    9e68:	39 1f       	adc	r19, r25
    9e6a:	4a 1f       	adc	r20, r26
    9e6c:	5b 1f       	adc	r21, r27
    9e6e:	2d 8b       	std	Y+21, r18	; 0x15
    9e70:	3e 8b       	std	Y+22, r19	; 0x16
    9e72:	4f 8b       	std	Y+23, r20	; 0x17
    9e74:	58 8f       	std	Y+24, r21	; 0x18
    9e76:	c2 16       	cp	r12, r18
    9e78:	d3 06       	cpc	r13, r19
    9e7a:	e4 06       	cpc	r14, r20
    9e7c:	f5 06       	cpc	r15, r21
    9e7e:	08 f4       	brcc	.+2      	; 0x9e82 <mount_volume+0x238>
    9e80:	67 cf       	rjmp	.-306    	; 0x9d50 <mount_volume+0x106>
    9e82:	c7 01       	movw	r24, r14
    9e84:	b6 01       	movw	r22, r12
    9e86:	62 1b       	sub	r22, r18
    9e88:	73 0b       	sbc	r23, r19
    9e8a:	84 0b       	sbc	r24, r20
    9e8c:	95 0b       	sbc	r25, r21
    9e8e:	2b 2d       	mov	r18, r11
    9e90:	30 e0       	ldi	r19, 0x00	; 0
    9e92:	40 e0       	ldi	r20, 0x00	; 0
    9e94:	50 e0       	ldi	r21, 0x00	; 0
    9e96:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    9e9a:	da 01       	movw	r26, r20
    9e9c:	c9 01       	movw	r24, r18
    9e9e:	01 97       	sbiw	r24, 0x01	; 1
    9ea0:	a1 09       	sbc	r26, r1
    9ea2:	b1 09       	sbc	r27, r1
    9ea4:	85 3f       	cpi	r24, 0xF5	; 245
    9ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    9ea8:	af 4f       	sbci	r26, 0xFF	; 255
    9eaa:	bf 40       	sbci	r27, 0x0F	; 15
    9eac:	08 f0       	brcs	.+2      	; 0x9eb0 <mount_volume+0x266>
    9eae:	50 cf       	rjmp	.-352    	; 0x9d50 <mount_volume+0x106>
    9eb0:	26 3f       	cpi	r18, 0xF6	; 246
    9eb2:	8f ef       	ldi	r24, 0xFF	; 255
    9eb4:	38 07       	cpc	r19, r24
    9eb6:	41 05       	cpc	r20, r1
    9eb8:	51 05       	cpc	r21, r1
    9eba:	50 f4       	brcc	.+20     	; 0x9ed0 <mount_volume+0x286>
    9ebc:	26 3f       	cpi	r18, 0xF6	; 246
    9ebe:	9f e0       	ldi	r25, 0x0F	; 15
    9ec0:	39 07       	cpc	r19, r25
    9ec2:	41 05       	cpc	r20, r1
    9ec4:	51 05       	cpc	r21, r1
    9ec6:	40 f4       	brcc	.+16     	; 0x9ed8 <mount_volume+0x28e>
    9ec8:	aa 24       	eor	r10, r10
    9eca:	a3 94       	inc	r10
    9ecc:	b1 2c       	mov	r11, r1
    9ece:	07 c0       	rjmp	.+14     	; 0x9ede <mount_volume+0x294>
    9ed0:	73 e0       	ldi	r23, 0x03	; 3
    9ed2:	a7 2e       	mov	r10, r23
    9ed4:	b1 2c       	mov	r11, r1
    9ed6:	03 c0       	rjmp	.+6      	; 0x9ede <mount_volume+0x294>
    9ed8:	62 e0       	ldi	r22, 0x02	; 2
    9eda:	a6 2e       	mov	r10, r22
    9edc:	b1 2c       	mov	r11, r1
    9ede:	69 01       	movw	r12, r18
    9ee0:	7a 01       	movw	r14, r20
    9ee2:	a2 e0       	ldi	r26, 0x02	; 2
    9ee4:	ca 0e       	add	r12, r26
    9ee6:	d1 1c       	adc	r13, r1
    9ee8:	e1 1c       	adc	r14, r1
    9eea:	f1 1c       	adc	r15, r1
    9eec:	f8 01       	movw	r30, r16
    9eee:	c1 8e       	std	Z+25, r12	; 0x19
    9ef0:	d2 8e       	std	Z+26, r13	; 0x1a
    9ef2:	e3 8e       	std	Z+27, r14	; 0x1b
    9ef4:	f4 8e       	std	Z+28, r15	; 0x1c
    9ef6:	29 89       	ldd	r18, Y+17	; 0x11
    9ef8:	3a 89       	ldd	r19, Y+18	; 0x12
    9efa:	4b 89       	ldd	r20, Y+19	; 0x13
    9efc:	5c 89       	ldd	r21, Y+20	; 0x14
    9efe:	21 a3       	std	Z+33, r18	; 0x21
    9f00:	32 a3       	std	Z+34, r19	; 0x22
    9f02:	43 a3       	std	Z+35, r20	; 0x23
    9f04:	54 a3       	std	Z+36, r21	; 0x24
    9f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9f08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9f0a:	af 8d       	ldd	r26, Y+31	; 0x1f
    9f0c:	b8 a1       	ldd	r27, Y+32	; 0x20
    9f0e:	28 0f       	add	r18, r24
    9f10:	39 1f       	adc	r19, r25
    9f12:	4a 1f       	adc	r20, r26
    9f14:	5b 1f       	adc	r21, r27
    9f16:	2d 8f       	std	Y+29, r18	; 0x1d
    9f18:	3e 8f       	std	Y+30, r19	; 0x1e
    9f1a:	4f 8f       	std	Y+31, r20	; 0x1f
    9f1c:	58 a3       	std	Y+32, r21	; 0x20
    9f1e:	25 a3       	std	Z+37, r18	; 0x25
    9f20:	36 a3       	std	Z+38, r19	; 0x26
    9f22:	47 a3       	std	Z+39, r20	; 0x27
    9f24:	50 a7       	std	Z+40, r21	; 0x28
    9f26:	49 89       	ldd	r20, Y+17	; 0x11
    9f28:	5a 89       	ldd	r21, Y+18	; 0x12
    9f2a:	6b 89       	ldd	r22, Y+19	; 0x13
    9f2c:	7c 89       	ldd	r23, Y+20	; 0x14
    9f2e:	8d 89       	ldd	r24, Y+21	; 0x15
    9f30:	9e 89       	ldd	r25, Y+22	; 0x16
    9f32:	af 89       	ldd	r26, Y+23	; 0x17
    9f34:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f36:	48 0f       	add	r20, r24
    9f38:	59 1f       	adc	r21, r25
    9f3a:	6a 1f       	adc	r22, r26
    9f3c:	7b 1f       	adc	r23, r27
    9f3e:	45 a7       	std	Z+45, r20	; 0x2d
    9f40:	56 a7       	std	Z+46, r21	; 0x2e
    9f42:	67 a7       	std	Z+47, r22	; 0x2f
    9f44:	70 ab       	std	Z+48, r23	; 0x30
    9f46:	b3 e0       	ldi	r27, 0x03	; 3
    9f48:	ab 16       	cp	r10, r27
    9f4a:	b1 04       	cpc	r11, r1
    9f4c:	e1 f4       	brne	.+56     	; 0x9f86 <mount_volume+0x33c>
    9f4e:	e1 5a       	subi	r30, 0xA1	; 161
    9f50:	ff 4f       	sbci	r31, 0xFF	; 255
    9f52:	80 81       	ld	r24, Z
    9f54:	91 81       	ldd	r25, Z+1	; 0x01
    9f56:	89 2b       	or	r24, r25
    9f58:	09 f0       	breq	.+2      	; 0x9f5c <mount_volume+0x312>
    9f5a:	fa ce       	rjmp	.-524    	; 0x9d50 <mount_volume+0x106>
    9f5c:	81 14       	cp	r8, r1
    9f5e:	91 04       	cpc	r9, r1
    9f60:	09 f0       	breq	.+2      	; 0x9f64 <mount_volume+0x31a>
    9f62:	f6 ce       	rjmp	.-532    	; 0x9d50 <mount_volume+0x106>
    9f64:	c8 01       	movw	r24, r16
    9f66:	8f 59       	subi	r24, 0x9F	; 159
    9f68:	9f 4f       	sbci	r25, 0xFF	; 255
    9f6a:	10 d9       	rcall	.-3552   	; 0x918c <ld_dword>
    9f6c:	f8 01       	movw	r30, r16
    9f6e:	61 a7       	std	Z+41, r22	; 0x29
    9f70:	72 a7       	std	Z+42, r23	; 0x2a
    9f72:	83 a7       	std	Z+43, r24	; 0x2b
    9f74:	94 a7       	std	Z+44, r25	; 0x2c
    9f76:	42 e0       	ldi	r20, 0x02	; 2
    9f78:	cc 0c       	add	r12, r12
    9f7a:	dd 1c       	adc	r13, r13
    9f7c:	ee 1c       	adc	r14, r14
    9f7e:	ff 1c       	adc	r15, r15
    9f80:	4a 95       	dec	r20
    9f82:	d1 f7       	brne	.-12     	; 0x9f78 <mount_volume+0x32e>
    9f84:	33 c0       	rjmp	.+102    	; 0x9fec <mount_volume+0x3a2>
    9f86:	81 14       	cp	r8, r1
    9f88:	91 04       	cpc	r9, r1
    9f8a:	09 f4       	brne	.+2      	; 0x9f8e <mount_volume+0x344>
    9f8c:	e1 ce       	rjmp	.-574    	; 0x9d50 <mount_volume+0x106>
    9f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9f90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9f92:	af 8d       	ldd	r26, Y+31	; 0x1f
    9f94:	b8 a1       	ldd	r27, Y+32	; 0x20
    9f96:	29 8d       	ldd	r18, Y+25	; 0x19
    9f98:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9f9a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9f9c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9f9e:	82 0f       	add	r24, r18
    9fa0:	93 1f       	adc	r25, r19
    9fa2:	a4 1f       	adc	r26, r20
    9fa4:	b5 1f       	adc	r27, r21
    9fa6:	f8 01       	movw	r30, r16
    9fa8:	81 a7       	std	Z+41, r24	; 0x29
    9faa:	92 a7       	std	Z+42, r25	; 0x2a
    9fac:	a3 a7       	std	Z+43, r26	; 0x2b
    9fae:	b4 a7       	std	Z+44, r27	; 0x2c
    9fb0:	f2 e0       	ldi	r31, 0x02	; 2
    9fb2:	af 16       	cp	r10, r31
    9fb4:	b1 04       	cpc	r11, r1
    9fb6:	29 f4       	brne	.+10     	; 0x9fc2 <mount_volume+0x378>
    9fb8:	cc 0c       	add	r12, r12
    9fba:	dd 1c       	adc	r13, r13
    9fbc:	ee 1c       	adc	r14, r14
    9fbe:	ff 1c       	adc	r15, r15
    9fc0:	15 c0       	rjmp	.+42     	; 0x9fec <mount_volume+0x3a2>
    9fc2:	a3 e0       	ldi	r26, 0x03	; 3
    9fc4:	b0 e0       	ldi	r27, 0x00	; 0
    9fc6:	a7 01       	movw	r20, r14
    9fc8:	96 01       	movw	r18, r12
    9fca:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    9fce:	dc 01       	movw	r26, r24
    9fd0:	cb 01       	movw	r24, r22
    9fd2:	b6 95       	lsr	r27
    9fd4:	a7 95       	ror	r26
    9fd6:	97 95       	ror	r25
    9fd8:	87 95       	ror	r24
    9fda:	21 e0       	ldi	r18, 0x01	; 1
    9fdc:	c2 22       	and	r12, r18
    9fde:	dd 24       	eor	r13, r13
    9fe0:	ee 24       	eor	r14, r14
    9fe2:	ff 24       	eor	r15, r15
    9fe4:	c8 0e       	add	r12, r24
    9fe6:	d9 1e       	adc	r13, r25
    9fe8:	ea 1e       	adc	r14, r26
    9fea:	fb 1e       	adc	r15, r27
    9fec:	3f ef       	ldi	r19, 0xFF	; 255
    9fee:	c3 0e       	add	r12, r19
    9ff0:	31 e0       	ldi	r19, 0x01	; 1
    9ff2:	d3 1e       	adc	r13, r19
    9ff4:	e1 1c       	adc	r14, r1
    9ff6:	f1 1c       	adc	r15, r1
    9ff8:	89 e0       	ldi	r24, 0x09	; 9
    9ffa:	f6 94       	lsr	r15
    9ffc:	e7 94       	ror	r14
    9ffe:	d7 94       	ror	r13
    a000:	c7 94       	ror	r12
    a002:	8a 95       	dec	r24
    a004:	d1 f7       	brne	.-12     	; 0x9ffa <mount_volume+0x3b0>
    a006:	4c 14       	cp	r4, r12
    a008:	5d 04       	cpc	r5, r13
    a00a:	6e 04       	cpc	r6, r14
    a00c:	7f 04       	cpc	r7, r15
    a00e:	08 f4       	brcc	.+2      	; 0xa012 <mount_volume+0x3c8>
    a010:	9f ce       	rjmp	.-706    	; 0x9d50 <mount_volume+0x106>
    a012:	8f ef       	ldi	r24, 0xFF	; 255
    a014:	9f ef       	ldi	r25, 0xFF	; 255
    a016:	dc 01       	movw	r26, r24
    a018:	f8 01       	movw	r30, r16
    a01a:	81 8b       	std	Z+17, r24	; 0x11
    a01c:	92 8b       	std	Z+18, r25	; 0x12
    a01e:	a3 8b       	std	Z+19, r26	; 0x13
    a020:	b4 8b       	std	Z+20, r27	; 0x14
    a022:	85 87       	std	Z+13, r24	; 0x0d
    a024:	96 87       	std	Z+14, r25	; 0x0e
    a026:	a7 87       	std	Z+15, r26	; 0x0f
    a028:	b0 8b       	std	Z+16, r27	; 0x10
    a02a:	80 e8       	ldi	r24, 0x80	; 128
    a02c:	84 83       	std	Z+4, r24	; 0x04
    a02e:	f3 e0       	ldi	r31, 0x03	; 3
    a030:	af 16       	cp	r10, r31
    a032:	b1 04       	cpc	r11, r1
    a034:	09 f0       	breq	.+2      	; 0xa038 <mount_volume+0x3ee>
    a036:	44 c0       	rjmp	.+136    	; 0xa0c0 <mount_volume+0x476>
    a038:	f8 01       	movw	r30, r16
    a03a:	eb 59       	subi	r30, 0x9B	; 155
    a03c:	ff 4f       	sbci	r31, 0xFF	; 255
    a03e:	80 81       	ld	r24, Z
    a040:	91 81       	ldd	r25, Z+1	; 0x01
    a042:	01 97       	sbiw	r24, 0x01	; 1
    a044:	09 f0       	breq	.+2      	; 0xa048 <mount_volume+0x3fe>
    a046:	3c c0       	rjmp	.+120    	; 0xa0c0 <mount_volume+0x476>
    a048:	49 89       	ldd	r20, Y+17	; 0x11
    a04a:	5a 89       	ldd	r21, Y+18	; 0x12
    a04c:	6b 89       	ldd	r22, Y+19	; 0x13
    a04e:	7c 89       	ldd	r23, Y+20	; 0x14
    a050:	4f 5f       	subi	r20, 0xFF	; 255
    a052:	5f 4f       	sbci	r21, 0xFF	; 255
    a054:	6f 4f       	sbci	r22, 0xFF	; 255
    a056:	7f 4f       	sbci	r23, 0xFF	; 255
    a058:	c8 01       	movw	r24, r16
    a05a:	7c dd       	rcall	.-1288   	; 0x9b54 <move_window>
    a05c:	89 2b       	or	r24, r25
    a05e:	81 f5       	brne	.+96     	; 0xa0c0 <mount_volume+0x476>
    a060:	d8 01       	movw	r26, r16
    a062:	14 96       	adiw	r26, 0x04	; 4
    a064:	1c 92       	st	X, r1
    a066:	f8 01       	movw	r30, r16
    a068:	ed 5c       	subi	r30, 0xCD	; 205
    a06a:	fd 4f       	sbci	r31, 0xFD	; 253
    a06c:	80 81       	ld	r24, Z
    a06e:	91 81       	ldd	r25, Z+1	; 0x01
    a070:	85 35       	cpi	r24, 0x55	; 85
    a072:	9a 4a       	sbci	r25, 0xAA	; 170
    a074:	29 f5       	brne	.+74     	; 0xa0c0 <mount_volume+0x476>
    a076:	c8 01       	movw	r24, r16
    a078:	c5 96       	adiw	r24, 0x35	; 53
    a07a:	88 d8       	rcall	.-3824   	; 0x918c <ld_dword>
    a07c:	62 35       	cpi	r22, 0x52	; 82
    a07e:	72 45       	sbci	r23, 0x52	; 82
    a080:	81 46       	sbci	r24, 0x61	; 97
    a082:	91 44       	sbci	r25, 0x41	; 65
    a084:	e9 f4       	brne	.+58     	; 0xa0c0 <mount_volume+0x476>
    a086:	c8 01       	movw	r24, r16
    a088:	87 5e       	subi	r24, 0xE7	; 231
    a08a:	9d 4f       	sbci	r25, 0xFD	; 253
    a08c:	7f d8       	rcall	.-3842   	; 0x918c <ld_dword>
    a08e:	62 37       	cpi	r22, 0x72	; 114
    a090:	72 47       	sbci	r23, 0x72	; 114
    a092:	81 44       	sbci	r24, 0x41	; 65
    a094:	91 46       	sbci	r25, 0x61	; 97
    a096:	a1 f4       	brne	.+40     	; 0xa0c0 <mount_volume+0x476>
    a098:	c8 01       	movw	r24, r16
    a09a:	83 5e       	subi	r24, 0xE3	; 227
    a09c:	9d 4f       	sbci	r25, 0xFD	; 253
    a09e:	76 d8       	rcall	.-3860   	; 0x918c <ld_dword>
    a0a0:	d8 01       	movw	r26, r16
    a0a2:	51 96       	adiw	r26, 0x11	; 17
    a0a4:	6d 93       	st	X+, r22
    a0a6:	7d 93       	st	X+, r23
    a0a8:	8d 93       	st	X+, r24
    a0aa:	9c 93       	st	X, r25
    a0ac:	54 97       	sbiw	r26, 0x14	; 20
    a0ae:	c8 01       	movw	r24, r16
    a0b0:	8f 5d       	subi	r24, 0xDF	; 223
    a0b2:	9d 4f       	sbci	r25, 0xFD	; 253
    a0b4:	6b d8       	rcall	.-3882   	; 0x918c <ld_dword>
    a0b6:	f8 01       	movw	r30, r16
    a0b8:	65 87       	std	Z+13, r22	; 0x0d
    a0ba:	76 87       	std	Z+14, r23	; 0x0e
    a0bc:	87 87       	std	Z+15, r24	; 0x0f
    a0be:	90 8b       	std	Z+16, r25	; 0x10
    a0c0:	d8 01       	movw	r26, r16
    a0c2:	ac 92       	st	X, r10
    a0c4:	80 91 33 18 	lds	r24, 0x1833	; 0x801833 <Fsid>
    a0c8:	90 91 34 18 	lds	r25, 0x1834	; 0x801834 <Fsid+0x1>
    a0cc:	01 96       	adiw	r24, 0x01	; 1
    a0ce:	90 93 34 18 	sts	0x1834, r25	; 0x801834 <Fsid+0x1>
    a0d2:	80 93 33 18 	sts	0x1833, r24	; 0x801833 <Fsid>
    a0d6:	16 96       	adiw	r26, 0x06	; 6
    a0d8:	9c 93       	st	X, r25
    a0da:	8e 93       	st	-X, r24
    a0dc:	15 97       	sbiw	r26, 0x05	; 5
    a0de:	f8 01       	movw	r30, r16
    a0e0:	15 8a       	std	Z+21, r1	; 0x15
    a0e2:	16 8a       	std	Z+22, r1	; 0x16
    a0e4:	17 8a       	std	Z+23, r1	; 0x17
    a0e6:	10 8e       	std	Z+24, r1	; 0x18
    a0e8:	06 c0       	rjmp	.+12     	; 0xa0f6 <mount_volume+0x4ac>
    a0ea:	8b e0       	ldi	r24, 0x0B	; 11
    a0ec:	90 e0       	ldi	r25, 0x00	; 0
    a0ee:	0b c0       	rjmp	.+22     	; 0xa106 <mount_volume+0x4bc>
    a0f0:	8c e0       	ldi	r24, 0x0C	; 12
    a0f2:	90 e0       	ldi	r25, 0x00	; 0
    a0f4:	08 c0       	rjmp	.+16     	; 0xa106 <mount_volume+0x4bc>
    a0f6:	80 e0       	ldi	r24, 0x00	; 0
    a0f8:	90 e0       	ldi	r25, 0x00	; 0
    a0fa:	05 c0       	rjmp	.+10     	; 0xa106 <mount_volume+0x4bc>
    a0fc:	83 e0       	ldi	r24, 0x03	; 3
    a0fe:	90 e0       	ldi	r25, 0x00	; 0
    a100:	02 c0       	rjmp	.+4      	; 0xa106 <mount_volume+0x4bc>
    a102:	81 e0       	ldi	r24, 0x01	; 1
    a104:	90 e0       	ldi	r25, 0x00	; 0
    a106:	a0 96       	adiw	r28, 0x20	; 32
    a108:	e0 e1       	ldi	r30, 0x10	; 16
    a10a:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

0000a10e <put_fat>:
    a10e:	a6 e0       	ldi	r26, 0x06	; 6
    a110:	b0 e0       	ldi	r27, 0x00	; 0
    a112:	ed e8       	ldi	r30, 0x8D	; 141
    a114:	f0 e5       	ldi	r31, 0x50	; 80
    a116:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    a11a:	42 30       	cpi	r20, 0x02	; 2
    a11c:	51 05       	cpc	r21, r1
    a11e:	61 05       	cpc	r22, r1
    a120:	71 05       	cpc	r23, r1
    a122:	08 f4       	brcc	.+2      	; 0xa126 <put_fat+0x18>
    a124:	eb c0       	rjmp	.+470    	; 0xa2fc <put_fat+0x1ee>
    a126:	dc 01       	movw	r26, r24
    a128:	59 96       	adiw	r26, 0x19	; 25
    a12a:	cd 90       	ld	r12, X+
    a12c:	dd 90       	ld	r13, X+
    a12e:	ed 90       	ld	r14, X+
    a130:	fc 90       	ld	r15, X
    a132:	5c 97       	sbiw	r26, 0x1c	; 28
    a134:	4c 15       	cp	r20, r12
    a136:	5d 05       	cpc	r21, r13
    a138:	6e 05       	cpc	r22, r14
    a13a:	7f 05       	cpc	r23, r15
    a13c:	08 f0       	brcs	.+2      	; 0xa140 <put_fat+0x32>
    a13e:	de c0       	rjmp	.+444    	; 0xa2fc <put_fat+0x1ee>
    a140:	28 01       	movw	r4, r16
    a142:	39 01       	movw	r6, r18
    a144:	6a 01       	movw	r12, r20
    a146:	7b 01       	movw	r14, r22
    a148:	9e 83       	std	Y+6, r25	; 0x06
    a14a:	8d 83       	std	Y+5, r24	; 0x05
    a14c:	fc 01       	movw	r30, r24
    a14e:	80 81       	ld	r24, Z
    a150:	82 30       	cpi	r24, 0x02	; 2
    a152:	09 f4       	brne	.+2      	; 0xa156 <put_fat+0x48>
    a154:	73 c0       	rjmp	.+230    	; 0xa23c <put_fat+0x12e>
    a156:	83 30       	cpi	r24, 0x03	; 3
    a158:	09 f4       	brne	.+2      	; 0xa15c <put_fat+0x4e>
    a15a:	92 c0       	rjmp	.+292    	; 0xa280 <put_fat+0x172>
    a15c:	81 30       	cpi	r24, 0x01	; 1
    a15e:	09 f0       	breq	.+2      	; 0xa162 <put_fat+0x54>
    a160:	cd c0       	rjmp	.+410    	; 0xa2fc <put_fat+0x1ee>
    a162:	4a 01       	movw	r8, r20
    a164:	96 94       	lsr	r9
    a166:	87 94       	ror	r8
    a168:	84 0e       	add	r8, r20
    a16a:	95 1e       	adc	r9, r21
    a16c:	c4 01       	movw	r24, r8
    a16e:	89 2f       	mov	r24, r25
    a170:	99 27       	eor	r25, r25
    a172:	86 95       	lsr	r24
    a174:	45 a1       	ldd	r20, Z+37	; 0x25
    a176:	56 a1       	ldd	r21, Z+38	; 0x26
    a178:	67 a1       	ldd	r22, Z+39	; 0x27
    a17a:	70 a5       	ldd	r23, Z+40	; 0x28
    a17c:	48 0f       	add	r20, r24
    a17e:	59 1f       	adc	r21, r25
    a180:	61 1d       	adc	r22, r1
    a182:	71 1d       	adc	r23, r1
    a184:	cf 01       	movw	r24, r30
    a186:	e6 dc       	rcall	.-1588   	; 0x9b54 <move_window>
    a188:	5c 01       	movw	r10, r24
    a18a:	89 2b       	or	r24, r25
    a18c:	09 f0       	breq	.+2      	; 0xa190 <put_fat+0x82>
    a18e:	b9 c0       	rjmp	.+370    	; 0xa302 <put_fat+0x1f4>
    a190:	2d 80       	ldd	r2, Y+5	; 0x05
    a192:	3e 80       	ldd	r3, Y+6	; 0x06
    a194:	f5 e3       	ldi	r31, 0x35	; 53
    a196:	2f 0e       	add	r2, r31
    a198:	31 1c       	adc	r3, r1
    a19a:	84 01       	movw	r16, r8
    a19c:	0f 5f       	subi	r16, 0xFF	; 255
    a19e:	1f 4f       	sbci	r17, 0xFF	; 255
    a1a0:	21 e0       	ldi	r18, 0x01	; 1
    a1a2:	92 22       	and	r9, r18
    a1a4:	f1 01       	movw	r30, r2
    a1a6:	e8 0d       	add	r30, r8
    a1a8:	f9 1d       	adc	r31, r9
    a1aa:	d7 01       	movw	r26, r14
    a1ac:	c6 01       	movw	r24, r12
    a1ae:	81 70       	andi	r24, 0x01	; 1
    a1b0:	99 27       	eor	r25, r25
    a1b2:	aa 27       	eor	r26, r26
    a1b4:	bb 27       	eor	r27, r27
    a1b6:	89 83       	std	Y+1, r24	; 0x01
    a1b8:	9a 83       	std	Y+2, r25	; 0x02
    a1ba:	ab 83       	std	Y+3, r26	; 0x03
    a1bc:	bc 83       	std	Y+4, r27	; 0x04
    a1be:	c0 fe       	sbrs	r12, 0
    a1c0:	09 c0       	rjmp	.+18     	; 0xa1d4 <put_fat+0xc6>
    a1c2:	80 81       	ld	r24, Z
    a1c4:	28 2f       	mov	r18, r24
    a1c6:	2f 70       	andi	r18, 0x0F	; 15
    a1c8:	a0 e1       	ldi	r26, 0x10	; 16
    a1ca:	4a 9e       	mul	r4, r26
    a1cc:	c0 01       	movw	r24, r0
    a1ce:	11 24       	eor	r1, r1
    a1d0:	82 2b       	or	r24, r18
    a1d2:	01 c0       	rjmp	.+2      	; 0xa1d6 <put_fat+0xc8>
    a1d4:	84 2d       	mov	r24, r4
    a1d6:	80 83       	st	Z, r24
    a1d8:	81 e0       	ldi	r24, 0x01	; 1
    a1da:	ed 81       	ldd	r30, Y+5	; 0x05
    a1dc:	fe 81       	ldd	r31, Y+6	; 0x06
    a1de:	83 83       	std	Z+3, r24	; 0x03
    a1e0:	45 a1       	ldd	r20, Z+37	; 0x25
    a1e2:	56 a1       	ldd	r21, Z+38	; 0x26
    a1e4:	67 a1       	ldd	r22, Z+39	; 0x27
    a1e6:	70 a5       	ldd	r23, Z+40	; 0x28
    a1e8:	c8 01       	movw	r24, r16
    a1ea:	89 2f       	mov	r24, r25
    a1ec:	99 27       	eor	r25, r25
    a1ee:	86 95       	lsr	r24
    a1f0:	48 0f       	add	r20, r24
    a1f2:	59 1f       	adc	r21, r25
    a1f4:	61 1d       	adc	r22, r1
    a1f6:	71 1d       	adc	r23, r1
    a1f8:	cf 01       	movw	r24, r30
    a1fa:	ac dc       	rcall	.-1704   	; 0x9b54 <move_window>
    a1fc:	5c 01       	movw	r10, r24
    a1fe:	89 2b       	or	r24, r25
    a200:	09 f0       	breq	.+2      	; 0xa204 <put_fat+0xf6>
    a202:	7f c0       	rjmp	.+254    	; 0xa302 <put_fat+0x1f4>
    a204:	11 70       	andi	r17, 0x01	; 1
    a206:	f1 01       	movw	r30, r2
    a208:	e0 0f       	add	r30, r16
    a20a:	f1 1f       	adc	r31, r17
    a20c:	89 81       	ldd	r24, Y+1	; 0x01
    a20e:	9a 81       	ldd	r25, Y+2	; 0x02
    a210:	ab 81       	ldd	r26, Y+3	; 0x03
    a212:	bc 81       	ldd	r27, Y+4	; 0x04
    a214:	89 2b       	or	r24, r25
    a216:	8a 2b       	or	r24, r26
    a218:	8b 2b       	or	r24, r27
    a21a:	41 f0       	breq	.+16     	; 0xa22c <put_fat+0x11e>
    a21c:	54 e0       	ldi	r21, 0x04	; 4
    a21e:	76 94       	lsr	r7
    a220:	67 94       	ror	r6
    a222:	57 94       	ror	r5
    a224:	47 94       	ror	r4
    a226:	5a 95       	dec	r21
    a228:	d1 f7       	brne	.-12     	; 0xa21e <put_fat+0x110>
    a22a:	06 c0       	rjmp	.+12     	; 0xa238 <put_fat+0x12a>
    a22c:	00 81       	ld	r16, Z
    a22e:	00 7f       	andi	r16, 0xF0	; 240
    a230:	85 2d       	mov	r24, r5
    a232:	8f 70       	andi	r24, 0x0F	; 15
    a234:	40 2e       	mov	r4, r16
    a236:	48 2a       	or	r4, r24
    a238:	40 82       	st	Z, r4
    a23a:	5a c0       	rjmp	.+180    	; 0xa2f0 <put_fat+0x1e2>
    a23c:	77 27       	eor	r23, r23
    a23e:	6f 2d       	mov	r22, r15
    a240:	5e 2d       	mov	r21, r14
    a242:	4d 2d       	mov	r20, r13
    a244:	ed 81       	ldd	r30, Y+5	; 0x05
    a246:	fe 81       	ldd	r31, Y+6	; 0x06
    a248:	85 a1       	ldd	r24, Z+37	; 0x25
    a24a:	96 a1       	ldd	r25, Z+38	; 0x26
    a24c:	a7 a1       	ldd	r26, Z+39	; 0x27
    a24e:	b0 a5       	ldd	r27, Z+40	; 0x28
    a250:	48 0f       	add	r20, r24
    a252:	59 1f       	adc	r21, r25
    a254:	6a 1f       	adc	r22, r26
    a256:	7b 1f       	adc	r23, r27
    a258:	cf 01       	movw	r24, r30
    a25a:	7c dc       	rcall	.-1800   	; 0x9b54 <move_window>
    a25c:	5c 01       	movw	r10, r24
    a25e:	89 2b       	or	r24, r25
    a260:	09 f0       	breq	.+2      	; 0xa264 <put_fat+0x156>
    a262:	4f c0       	rjmp	.+158    	; 0xa302 <put_fat+0x1f4>
    a264:	ed 81       	ldd	r30, Y+5	; 0x05
    a266:	fe 81       	ldd	r31, Y+6	; 0x06
    a268:	f5 96       	adiw	r30, 0x35	; 53
    a26a:	cc 0c       	add	r12, r12
    a26c:	dd 1c       	adc	r13, r13
    a26e:	e8 94       	clt
    a270:	c0 f8       	bld	r12, 0
    a272:	21 e0       	ldi	r18, 0x01	; 1
    a274:	d2 22       	and	r13, r18
    a276:	ec 0d       	add	r30, r12
    a278:	fd 1d       	adc	r31, r13
    a27a:	40 82       	st	Z, r4
    a27c:	51 82       	std	Z+1, r5	; 0x01
    a27e:	38 c0       	rjmp	.+112    	; 0xa2f0 <put_fat+0x1e2>
    a280:	ed 81       	ldd	r30, Y+5	; 0x05
    a282:	fe 81       	ldd	r31, Y+6	; 0x06
    a284:	85 a1       	ldd	r24, Z+37	; 0x25
    a286:	96 a1       	ldd	r25, Z+38	; 0x26
    a288:	a7 a1       	ldd	r26, Z+39	; 0x27
    a28a:	b0 a5       	ldd	r27, Z+40	; 0x28
    a28c:	27 e0       	ldi	r18, 0x07	; 7
    a28e:	76 95       	lsr	r23
    a290:	67 95       	ror	r22
    a292:	57 95       	ror	r21
    a294:	47 95       	ror	r20
    a296:	2a 95       	dec	r18
    a298:	d1 f7       	brne	.-12     	; 0xa28e <put_fat+0x180>
    a29a:	48 0f       	add	r20, r24
    a29c:	59 1f       	adc	r21, r25
    a29e:	6a 1f       	adc	r22, r26
    a2a0:	7b 1f       	adc	r23, r27
    a2a2:	cf 01       	movw	r24, r30
    a2a4:	57 dc       	rcall	.-1874   	; 0x9b54 <move_window>
    a2a6:	5c 01       	movw	r10, r24
    a2a8:	89 2b       	or	r24, r25
    a2aa:	59 f5       	brne	.+86     	; 0xa302 <put_fat+0x1f4>
    a2ac:	4d 81       	ldd	r20, Y+5	; 0x05
    a2ae:	5e 81       	ldd	r21, Y+6	; 0x06
    a2b0:	4b 5c       	subi	r20, 0xCB	; 203
    a2b2:	5f 4f       	sbci	r21, 0xFF	; 255
    a2b4:	cc 0c       	add	r12, r12
    a2b6:	dd 1c       	adc	r13, r13
    a2b8:	cc 0c       	add	r12, r12
    a2ba:	dd 1c       	adc	r13, r13
    a2bc:	fc ef       	ldi	r31, 0xFC	; 252
    a2be:	cf 22       	and	r12, r31
    a2c0:	f1 e0       	ldi	r31, 0x01	; 1
    a2c2:	df 22       	and	r13, r31
    a2c4:	c4 0e       	add	r12, r20
    a2c6:	d5 1e       	adc	r13, r21
    a2c8:	c6 01       	movw	r24, r12
    a2ca:	0e 94 c6 48 	call	0x918c	; 0x918c <ld_dword>
    a2ce:	2f e0       	ldi	r18, 0x0F	; 15
    a2d0:	72 22       	and	r7, r18
    a2d2:	dc 01       	movw	r26, r24
    a2d4:	cb 01       	movw	r24, r22
    a2d6:	88 27       	eor	r24, r24
    a2d8:	99 27       	eor	r25, r25
    a2da:	aa 27       	eor	r26, r26
    a2dc:	b0 7f       	andi	r27, 0xF0	; 240
    a2de:	b3 01       	movw	r22, r6
    a2e0:	a2 01       	movw	r20, r4
    a2e2:	48 2b       	or	r20, r24
    a2e4:	59 2b       	or	r21, r25
    a2e6:	6a 2b       	or	r22, r26
    a2e8:	7b 2b       	or	r23, r27
    a2ea:	c6 01       	movw	r24, r12
    a2ec:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
    a2f0:	81 e0       	ldi	r24, 0x01	; 1
    a2f2:	ad 81       	ldd	r26, Y+5	; 0x05
    a2f4:	be 81       	ldd	r27, Y+6	; 0x06
    a2f6:	13 96       	adiw	r26, 0x03	; 3
    a2f8:	8c 93       	st	X, r24
    a2fa:	03 c0       	rjmp	.+6      	; 0xa302 <put_fat+0x1f4>
    a2fc:	82 e0       	ldi	r24, 0x02	; 2
    a2fe:	a8 2e       	mov	r10, r24
    a300:	b1 2c       	mov	r11, r1
    a302:	c5 01       	movw	r24, r10
    a304:	26 96       	adiw	r28, 0x06	; 6
    a306:	e2 e1       	ldi	r30, 0x12	; 18
    a308:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000a30c <get_fat.isra.10>:
    a30c:	a0 e0       	ldi	r26, 0x00	; 0
    a30e:	b0 e0       	ldi	r27, 0x00	; 0
    a310:	ec e8       	ldi	r30, 0x8C	; 140
    a312:	f1 e5       	ldi	r31, 0x51	; 81
    a314:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
    a318:	42 30       	cpi	r20, 0x02	; 2
    a31a:	51 05       	cpc	r21, r1
    a31c:	61 05       	cpc	r22, r1
    a31e:	71 05       	cpc	r23, r1
    a320:	08 f4       	brcc	.+2      	; 0xa324 <get_fat.isra.10+0x18>
    a322:	9f c0       	rjmp	.+318    	; 0xa462 <get_fat.isra.10+0x156>
    a324:	fc 01       	movw	r30, r24
    a326:	01 8d       	ldd	r16, Z+25	; 0x19
    a328:	12 8d       	ldd	r17, Z+26	; 0x1a
    a32a:	23 8d       	ldd	r18, Z+27	; 0x1b
    a32c:	34 8d       	ldd	r19, Z+28	; 0x1c
    a32e:	40 17       	cp	r20, r16
    a330:	51 07       	cpc	r21, r17
    a332:	62 07       	cpc	r22, r18
    a334:	73 07       	cpc	r23, r19
    a336:	08 f0       	brcs	.+2      	; 0xa33a <get_fat.isra.10+0x2e>
    a338:	94 c0       	rjmp	.+296    	; 0xa462 <get_fat.isra.10+0x156>
    a33a:	6a 01       	movw	r12, r20
    a33c:	7b 01       	movw	r14, r22
    a33e:	8c 01       	movw	r16, r24
    a340:	80 81       	ld	r24, Z
    a342:	82 30       	cpi	r24, 0x02	; 2
    a344:	09 f4       	brne	.+2      	; 0xa348 <get_fat.isra.10+0x3c>
    a346:	4b c0       	rjmp	.+150    	; 0xa3de <get_fat.isra.10+0xd2>
    a348:	83 30       	cpi	r24, 0x03	; 3
    a34a:	09 f4       	brne	.+2      	; 0xa34e <get_fat.isra.10+0x42>
    a34c:	67 c0       	rjmp	.+206    	; 0xa41c <get_fat.isra.10+0x110>
    a34e:	81 30       	cpi	r24, 0x01	; 1
    a350:	09 f0       	breq	.+2      	; 0xa354 <get_fat.isra.10+0x48>
    a352:	87 c0       	rjmp	.+270    	; 0xa462 <get_fat.isra.10+0x156>
    a354:	ea 01       	movw	r28, r20
    a356:	d6 95       	lsr	r29
    a358:	c7 95       	ror	r28
    a35a:	cc 0d       	add	r28, r12
    a35c:	dd 1d       	adc	r29, r13
    a35e:	ce 01       	movw	r24, r28
    a360:	89 2f       	mov	r24, r25
    a362:	99 27       	eor	r25, r25
    a364:	86 95       	lsr	r24
    a366:	45 a1       	ldd	r20, Z+37	; 0x25
    a368:	56 a1       	ldd	r21, Z+38	; 0x26
    a36a:	67 a1       	ldd	r22, Z+39	; 0x27
    a36c:	70 a5       	ldd	r23, Z+40	; 0x28
    a36e:	48 0f       	add	r20, r24
    a370:	59 1f       	adc	r21, r25
    a372:	61 1d       	adc	r22, r1
    a374:	71 1d       	adc	r23, r1
    a376:	cf 01       	movw	r24, r30
    a378:	ed db       	rcall	.-2086   	; 0x9b54 <move_window>
    a37a:	89 2b       	or	r24, r25
    a37c:	21 f0       	breq	.+8      	; 0xa386 <get_fat.isra.10+0x7a>
    a37e:	6f ef       	ldi	r22, 0xFF	; 255
    a380:	7f ef       	ldi	r23, 0xFF	; 255
    a382:	cb 01       	movw	r24, r22
    a384:	72 c0       	rjmp	.+228    	; 0xa46a <get_fat.isra.10+0x15e>
    a386:	5e 01       	movw	r10, r28
    a388:	ff ef       	ldi	r31, 0xFF	; 255
    a38a:	af 1a       	sub	r10, r31
    a38c:	bf 0a       	sbc	r11, r31
    a38e:	d1 70       	andi	r29, 0x01	; 1
    a390:	c0 0f       	add	r28, r16
    a392:	d1 1f       	adc	r29, r17
    a394:	cd a9       	ldd	r28, Y+53	; 0x35
    a396:	c5 01       	movw	r24, r10
    a398:	89 2f       	mov	r24, r25
    a39a:	99 27       	eor	r25, r25
    a39c:	86 95       	lsr	r24
    a39e:	f8 01       	movw	r30, r16
    a3a0:	45 a1       	ldd	r20, Z+37	; 0x25
    a3a2:	56 a1       	ldd	r21, Z+38	; 0x26
    a3a4:	67 a1       	ldd	r22, Z+39	; 0x27
    a3a6:	70 a5       	ldd	r23, Z+40	; 0x28
    a3a8:	48 0f       	add	r20, r24
    a3aa:	59 1f       	adc	r21, r25
    a3ac:	61 1d       	adc	r22, r1
    a3ae:	71 1d       	adc	r23, r1
    a3b0:	c8 01       	movw	r24, r16
    a3b2:	d0 db       	rcall	.-2144   	; 0x9b54 <move_window>
    a3b4:	89 2b       	or	r24, r25
    a3b6:	19 f7       	brne	.-58     	; 0xa37e <get_fat.isra.10+0x72>
    a3b8:	f1 e0       	ldi	r31, 0x01	; 1
    a3ba:	bf 22       	and	r11, r31
    a3bc:	f8 01       	movw	r30, r16
    a3be:	ea 0d       	add	r30, r10
    a3c0:	fb 1d       	adc	r31, r11
    a3c2:	85 a9       	ldd	r24, Z+53	; 0x35
    a3c4:	6c 2f       	mov	r22, r28
    a3c6:	70 e0       	ldi	r23, 0x00	; 0
    a3c8:	78 2b       	or	r23, r24
    a3ca:	c0 fe       	sbrs	r12, 0
    a3cc:	06 c0       	rjmp	.+12     	; 0xa3da <get_fat.isra.10+0xce>
    a3ce:	54 e0       	ldi	r21, 0x04	; 4
    a3d0:	76 95       	lsr	r23
    a3d2:	67 95       	ror	r22
    a3d4:	5a 95       	dec	r21
    a3d6:	e1 f7       	brne	.-8      	; 0xa3d0 <get_fat.isra.10+0xc4>
    a3d8:	1e c0       	rjmp	.+60     	; 0xa416 <get_fat.isra.10+0x10a>
    a3da:	7f 70       	andi	r23, 0x0F	; 15
    a3dc:	1c c0       	rjmp	.+56     	; 0xa416 <get_fat.isra.10+0x10a>
    a3de:	77 27       	eor	r23, r23
    a3e0:	6f 2d       	mov	r22, r15
    a3e2:	5e 2d       	mov	r21, r14
    a3e4:	4d 2d       	mov	r20, r13
    a3e6:	85 a1       	ldd	r24, Z+37	; 0x25
    a3e8:	96 a1       	ldd	r25, Z+38	; 0x26
    a3ea:	a7 a1       	ldd	r26, Z+39	; 0x27
    a3ec:	b0 a5       	ldd	r27, Z+40	; 0x28
    a3ee:	48 0f       	add	r20, r24
    a3f0:	59 1f       	adc	r21, r25
    a3f2:	6a 1f       	adc	r22, r26
    a3f4:	7b 1f       	adc	r23, r27
    a3f6:	cf 01       	movw	r24, r30
    a3f8:	ad db       	rcall	.-2214   	; 0x9b54 <move_window>
    a3fa:	89 2b       	or	r24, r25
    a3fc:	09 f0       	breq	.+2      	; 0xa400 <get_fat.isra.10+0xf4>
    a3fe:	bf cf       	rjmp	.-130    	; 0xa37e <get_fat.isra.10+0x72>
    a400:	cc 0c       	add	r12, r12
    a402:	dd 1c       	adc	r13, r13
    a404:	e8 94       	clt
    a406:	c0 f8       	bld	r12, 0
    a408:	f1 e0       	ldi	r31, 0x01	; 1
    a40a:	df 22       	and	r13, r31
    a40c:	f8 01       	movw	r30, r16
    a40e:	ec 0d       	add	r30, r12
    a410:	fd 1d       	adc	r31, r13
    a412:	65 a9       	ldd	r22, Z+53	; 0x35
    a414:	76 a9       	ldd	r23, Z+54	; 0x36
    a416:	80 e0       	ldi	r24, 0x00	; 0
    a418:	90 e0       	ldi	r25, 0x00	; 0
    a41a:	27 c0       	rjmp	.+78     	; 0xa46a <get_fat.isra.10+0x15e>
    a41c:	85 a1       	ldd	r24, Z+37	; 0x25
    a41e:	96 a1       	ldd	r25, Z+38	; 0x26
    a420:	a7 a1       	ldd	r26, Z+39	; 0x27
    a422:	b0 a5       	ldd	r27, Z+40	; 0x28
    a424:	27 e0       	ldi	r18, 0x07	; 7
    a426:	76 95       	lsr	r23
    a428:	67 95       	ror	r22
    a42a:	57 95       	ror	r21
    a42c:	47 95       	ror	r20
    a42e:	2a 95       	dec	r18
    a430:	d1 f7       	brne	.-12     	; 0xa426 <get_fat.isra.10+0x11a>
    a432:	48 0f       	add	r20, r24
    a434:	59 1f       	adc	r21, r25
    a436:	6a 1f       	adc	r22, r26
    a438:	7b 1f       	adc	r23, r27
    a43a:	cf 01       	movw	r24, r30
    a43c:	8b db       	rcall	.-2282   	; 0x9b54 <move_window>
    a43e:	89 2b       	or	r24, r25
    a440:	09 f0       	breq	.+2      	; 0xa444 <get_fat.isra.10+0x138>
    a442:	9d cf       	rjmp	.-198    	; 0xa37e <get_fat.isra.10+0x72>
    a444:	0b 5c       	subi	r16, 0xCB	; 203
    a446:	1f 4f       	sbci	r17, 0xFF	; 255
    a448:	cc 0c       	add	r12, r12
    a44a:	dd 1c       	adc	r13, r13
    a44c:	cc 0c       	add	r12, r12
    a44e:	dd 1c       	adc	r13, r13
    a450:	c6 01       	movw	r24, r12
    a452:	8c 7f       	andi	r24, 0xFC	; 252
    a454:	91 70       	andi	r25, 0x01	; 1
    a456:	80 0f       	add	r24, r16
    a458:	91 1f       	adc	r25, r17
    a45a:	0e 94 c6 48 	call	0x918c	; 0x918c <ld_dword>
    a45e:	9f 70       	andi	r25, 0x0F	; 15
    a460:	04 c0       	rjmp	.+8      	; 0xa46a <get_fat.isra.10+0x15e>
    a462:	61 e0       	ldi	r22, 0x01	; 1
    a464:	70 e0       	ldi	r23, 0x00	; 0
    a466:	80 e0       	ldi	r24, 0x00	; 0
    a468:	90 e0       	ldi	r25, 0x00	; 0
    a46a:	cd b7       	in	r28, 0x3d	; 61
    a46c:	de b7       	in	r29, 0x3e	; 62
    a46e:	ea e0       	ldi	r30, 0x0A	; 10
    a470:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0000a474 <dir_sdi>:
    a474:	a0 e0       	ldi	r26, 0x00	; 0
    a476:	b0 e0       	ldi	r27, 0x00	; 0
    a478:	e0 e4       	ldi	r30, 0x40	; 64
    a47a:	f2 e5       	ldi	r31, 0x52	; 82
    a47c:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
    a480:	ec 01       	movw	r28, r24
    a482:	6a 01       	movw	r12, r20
    a484:	7b 01       	movw	r14, r22
    a486:	41 15       	cp	r20, r1
    a488:	51 05       	cpc	r21, r1
    a48a:	80 e2       	ldi	r24, 0x20	; 32
    a48c:	68 07       	cpc	r22, r24
    a48e:	71 05       	cpc	r23, r1
    a490:	18 f0       	brcs	.+6      	; 0xa498 <dir_sdi+0x24>
    a492:	82 e0       	ldi	r24, 0x02	; 2
    a494:	90 e0       	ldi	r25, 0x00	; 0
    a496:	aa c0       	rjmp	.+340    	; 0xa5ec <dir_sdi+0x178>
    a498:	db 01       	movw	r26, r22
    a49a:	ca 01       	movw	r24, r20
    a49c:	8f 71       	andi	r24, 0x1F	; 31
    a49e:	99 27       	eor	r25, r25
    a4a0:	aa 27       	eor	r26, r26
    a4a2:	bb 27       	eor	r27, r27
    a4a4:	89 2b       	or	r24, r25
    a4a6:	8a 2b       	or	r24, r26
    a4a8:	8b 2b       	or	r24, r27
    a4aa:	99 f7       	brne	.-26     	; 0xa492 <dir_sdi+0x1e>
    a4ac:	08 81       	ld	r16, Y
    a4ae:	19 81       	ldd	r17, Y+1	; 0x01
    a4b0:	4e 87       	std	Y+14, r20	; 0x0e
    a4b2:	5f 87       	std	Y+15, r21	; 0x0f
    a4b4:	68 8b       	std	Y+16, r22	; 0x10
    a4b6:	79 8b       	std	Y+17, r23	; 0x11
    a4b8:	8e 80       	ldd	r8, Y+6	; 0x06
    a4ba:	9f 80       	ldd	r9, Y+7	; 0x07
    a4bc:	a8 84       	ldd	r10, Y+8	; 0x08
    a4be:	b9 84       	ldd	r11, Y+9	; 0x09
    a4c0:	81 14       	cp	r8, r1
    a4c2:	91 04       	cpc	r9, r1
    a4c4:	a1 04       	cpc	r10, r1
    a4c6:	b1 04       	cpc	r11, r1
    a4c8:	51 f5       	brne	.+84     	; 0xa51e <dir_sdi+0xaa>
    a4ca:	f8 01       	movw	r30, r16
    a4cc:	80 81       	ld	r24, Z
    a4ce:	83 30       	cpi	r24, 0x03	; 3
    a4d0:	40 f0       	brcs	.+16     	; 0xa4e2 <dir_sdi+0x6e>
    a4d2:	81 a5       	ldd	r24, Z+41	; 0x29
    a4d4:	92 a5       	ldd	r25, Z+42	; 0x2a
    a4d6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a4d8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a4da:	00 97       	sbiw	r24, 0x00	; 0
    a4dc:	a1 05       	cpc	r26, r1
    a4de:	b1 05       	cpc	r27, r1
    a4e0:	e1 f4       	brne	.+56     	; 0xa51a <dir_sdi+0xa6>
    a4e2:	f8 01       	movw	r30, r16
    a4e4:	87 81       	ldd	r24, Z+7	; 0x07
    a4e6:	90 85       	ldd	r25, Z+8	; 0x08
    a4e8:	a0 e0       	ldi	r26, 0x00	; 0
    a4ea:	b0 e0       	ldi	r27, 0x00	; 0
    a4ec:	b7 01       	movw	r22, r14
    a4ee:	a6 01       	movw	r20, r12
    a4f0:	25 e0       	ldi	r18, 0x05	; 5
    a4f2:	76 95       	lsr	r23
    a4f4:	67 95       	ror	r22
    a4f6:	57 95       	ror	r21
    a4f8:	47 95       	ror	r20
    a4fa:	2a 95       	dec	r18
    a4fc:	d1 f7       	brne	.-12     	; 0xa4f2 <dir_sdi+0x7e>
    a4fe:	48 17       	cp	r20, r24
    a500:	59 07       	cpc	r21, r25
    a502:	6a 07       	cpc	r22, r26
    a504:	7b 07       	cpc	r23, r27
    a506:	28 f6       	brcc	.-118    	; 0xa492 <dir_sdi+0x1e>
    a508:	81 a5       	ldd	r24, Z+41	; 0x29
    a50a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a50c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a50e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a510:	8e 8b       	std	Y+22, r24	; 0x16
    a512:	9f 8b       	std	Y+23, r25	; 0x17
    a514:	a8 8f       	std	Y+24, r26	; 0x18
    a516:	b9 8f       	std	Y+25, r27	; 0x19
    a518:	3e c0       	rjmp	.+124    	; 0xa596 <dir_sdi+0x122>
    a51a:	4c 01       	movw	r8, r24
    a51c:	5d 01       	movw	r10, r26
    a51e:	f8 01       	movw	r30, r16
    a520:	41 84       	ldd	r4, Z+9	; 0x09
    a522:	52 84       	ldd	r5, Z+10	; 0x0a
    a524:	61 2c       	mov	r6, r1
    a526:	71 2c       	mov	r7, r1
    a528:	39 e0       	ldi	r19, 0x09	; 9
    a52a:	44 0c       	add	r4, r4
    a52c:	55 1c       	adc	r5, r5
    a52e:	66 1c       	adc	r6, r6
    a530:	77 1c       	adc	r7, r7
    a532:	3a 95       	dec	r19
    a534:	d1 f7       	brne	.-12     	; 0xa52a <dir_sdi+0xb6>
    a536:	b5 01       	movw	r22, r10
    a538:	a4 01       	movw	r20, r8
    a53a:	c4 14       	cp	r12, r4
    a53c:	d5 04       	cpc	r13, r5
    a53e:	e6 04       	cpc	r14, r6
    a540:	f7 04       	cpc	r15, r7
    a542:	10 f1       	brcs	.+68     	; 0xa588 <dir_sdi+0x114>
    a544:	88 81       	ld	r24, Y
    a546:	99 81       	ldd	r25, Y+1	; 0x01
    a548:	e1 de       	rcall	.-574    	; 0xa30c <get_fat.isra.10>
    a54a:	4b 01       	movw	r8, r22
    a54c:	5c 01       	movw	r10, r24
    a54e:	6f 3f       	cpi	r22, 0xFF	; 255
    a550:	7f 4f       	sbci	r23, 0xFF	; 255
    a552:	8f 4f       	sbci	r24, 0xFF	; 255
    a554:	9f 4f       	sbci	r25, 0xFF	; 255
    a556:	09 f4       	brne	.+2      	; 0xa55a <dir_sdi+0xe6>
    a558:	47 c0       	rjmp	.+142    	; 0xa5e8 <dir_sdi+0x174>
    a55a:	82 e0       	ldi	r24, 0x02	; 2
    a55c:	88 16       	cp	r8, r24
    a55e:	91 04       	cpc	r9, r1
    a560:	a1 04       	cpc	r10, r1
    a562:	b1 04       	cpc	r11, r1
    a564:	08 f4       	brcc	.+2      	; 0xa568 <dir_sdi+0xf4>
    a566:	95 cf       	rjmp	.-214    	; 0xa492 <dir_sdi+0x1e>
    a568:	f8 01       	movw	r30, r16
    a56a:	81 8d       	ldd	r24, Z+25	; 0x19
    a56c:	92 8d       	ldd	r25, Z+26	; 0x1a
    a56e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a570:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a572:	88 16       	cp	r8, r24
    a574:	99 06       	cpc	r9, r25
    a576:	aa 06       	cpc	r10, r26
    a578:	bb 06       	cpc	r11, r27
    a57a:	08 f0       	brcs	.+2      	; 0xa57e <dir_sdi+0x10a>
    a57c:	8a cf       	rjmp	.-236    	; 0xa492 <dir_sdi+0x1e>
    a57e:	c4 18       	sub	r12, r4
    a580:	d5 08       	sbc	r13, r5
    a582:	e6 08       	sbc	r14, r6
    a584:	f7 08       	sbc	r15, r7
    a586:	d7 cf       	rjmp	.-82     	; 0xa536 <dir_sdi+0xc2>
    a588:	c8 01       	movw	r24, r16
    a58a:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    a58e:	6e 8b       	std	Y+22, r22	; 0x16
    a590:	7f 8b       	std	Y+23, r23	; 0x17
    a592:	88 8f       	std	Y+24, r24	; 0x18
    a594:	99 8f       	std	Y+25, r25	; 0x19
    a596:	8a 8a       	std	Y+18, r8	; 0x12
    a598:	9b 8a       	std	Y+19, r9	; 0x13
    a59a:	ac 8a       	std	Y+20, r10	; 0x14
    a59c:	bd 8a       	std	Y+21, r11	; 0x15
    a59e:	8e 89       	ldd	r24, Y+22	; 0x16
    a5a0:	9f 89       	ldd	r25, Y+23	; 0x17
    a5a2:	a8 8d       	ldd	r26, Y+24	; 0x18
    a5a4:	b9 8d       	ldd	r27, Y+25	; 0x19
    a5a6:	00 97       	sbiw	r24, 0x00	; 0
    a5a8:	a1 05       	cpc	r26, r1
    a5aa:	b1 05       	cpc	r27, r1
    a5ac:	09 f4       	brne	.+2      	; 0xa5b0 <dir_sdi+0x13c>
    a5ae:	71 cf       	rjmp	.-286    	; 0xa492 <dir_sdi+0x1e>
    a5b0:	b7 01       	movw	r22, r14
    a5b2:	a6 01       	movw	r20, r12
    a5b4:	29 e0       	ldi	r18, 0x09	; 9
    a5b6:	76 95       	lsr	r23
    a5b8:	67 95       	ror	r22
    a5ba:	57 95       	ror	r21
    a5bc:	47 95       	ror	r20
    a5be:	2a 95       	dec	r18
    a5c0:	d1 f7       	brne	.-12     	; 0xa5b6 <dir_sdi+0x142>
    a5c2:	84 0f       	add	r24, r20
    a5c4:	95 1f       	adc	r25, r21
    a5c6:	a6 1f       	adc	r26, r22
    a5c8:	b7 1f       	adc	r27, r23
    a5ca:	8e 8b       	std	Y+22, r24	; 0x16
    a5cc:	9f 8b       	std	Y+23, r25	; 0x17
    a5ce:	a8 8f       	std	Y+24, r26	; 0x18
    a5d0:	b9 8f       	std	Y+25, r27	; 0x19
    a5d2:	0b 5c       	subi	r16, 0xCB	; 203
    a5d4:	1f 4f       	sbci	r17, 0xFF	; 255
    a5d6:	f1 e0       	ldi	r31, 0x01	; 1
    a5d8:	df 22       	and	r13, r31
    a5da:	c0 0e       	add	r12, r16
    a5dc:	d1 1e       	adc	r13, r17
    a5de:	db 8e       	std	Y+27, r13	; 0x1b
    a5e0:	ca 8e       	std	Y+26, r12	; 0x1a
    a5e2:	80 e0       	ldi	r24, 0x00	; 0
    a5e4:	90 e0       	ldi	r25, 0x00	; 0
    a5e6:	02 c0       	rjmp	.+4      	; 0xa5ec <dir_sdi+0x178>
    a5e8:	81 e0       	ldi	r24, 0x01	; 1
    a5ea:	90 e0       	ldi	r25, 0x00	; 0
    a5ec:	cd b7       	in	r28, 0x3d	; 61
    a5ee:	de b7       	in	r29, 0x3e	; 62
    a5f0:	e0 e1       	ldi	r30, 0x10	; 16
    a5f2:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

0000a5f6 <create_chain>:
    a5f6:	a0 e0       	ldi	r26, 0x00	; 0
    a5f8:	b0 e0       	ldi	r27, 0x00	; 0
    a5fa:	e1 e0       	ldi	r30, 0x01	; 1
    a5fc:	f3 e5       	ldi	r31, 0x53	; 83
    a5fe:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
    a602:	8c 01       	movw	r16, r24
    a604:	2a 01       	movw	r4, r20
    a606:	3b 01       	movw	r6, r22
    a608:	fc 01       	movw	r30, r24
    a60a:	c0 81       	ld	r28, Z
    a60c:	d1 81       	ldd	r29, Z+1	; 0x01
    a60e:	41 15       	cp	r20, r1
    a610:	51 05       	cpc	r21, r1
    a612:	61 05       	cpc	r22, r1
    a614:	71 05       	cpc	r23, r1
    a616:	99 f4       	brne	.+38     	; 0xa63e <create_chain+0x48>
    a618:	8d 84       	ldd	r8, Y+13	; 0x0d
    a61a:	9e 84       	ldd	r9, Y+14	; 0x0e
    a61c:	af 84       	ldd	r10, Y+15	; 0x0f
    a61e:	b8 88       	ldd	r11, Y+16	; 0x10
    a620:	81 14       	cp	r8, r1
    a622:	91 04       	cpc	r9, r1
    a624:	a1 04       	cpc	r10, r1
    a626:	b1 04       	cpc	r11, r1
    a628:	51 f1       	breq	.+84     	; 0xa67e <create_chain+0x88>
    a62a:	89 8d       	ldd	r24, Y+25	; 0x19
    a62c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a62e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a630:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a632:	88 16       	cp	r8, r24
    a634:	99 06       	cpc	r9, r25
    a636:	aa 06       	cpc	r10, r26
    a638:	bb 06       	cpc	r11, r27
    a63a:	28 f1       	brcs	.+74     	; 0xa686 <create_chain+0x90>
    a63c:	20 c0       	rjmp	.+64     	; 0xa67e <create_chain+0x88>
    a63e:	ce 01       	movw	r24, r28
    a640:	65 de       	rcall	.-822    	; 0xa30c <get_fat.isra.10>
    a642:	62 30       	cpi	r22, 0x02	; 2
    a644:	71 05       	cpc	r23, r1
    a646:	81 05       	cpc	r24, r1
    a648:	91 05       	cpc	r25, r1
    a64a:	08 f4       	brcc	.+2      	; 0xa64e <create_chain+0x58>
    a64c:	ea c0       	rjmp	.+468    	; 0xa822 <create_chain+0x22c>
    a64e:	6f 3f       	cpi	r22, 0xFF	; 255
    a650:	ff ef       	ldi	r31, 0xFF	; 255
    a652:	7f 07       	cpc	r23, r31
    a654:	8f 07       	cpc	r24, r31
    a656:	9f 07       	cpc	r25, r31
    a658:	29 f4       	brne	.+10     	; 0xa664 <create_chain+0x6e>
    a65a:	4f ef       	ldi	r20, 0xFF	; 255
    a65c:	3f ef       	ldi	r19, 0xFF	; 255
    a65e:	2f ef       	ldi	r18, 0xFF	; 255
    a660:	9f ef       	ldi	r25, 0xFF	; 255
    a662:	e7 c0       	rjmp	.+462    	; 0xa832 <create_chain+0x23c>
    a664:	c9 8c       	ldd	r12, Y+25	; 0x19
    a666:	da 8c       	ldd	r13, Y+26	; 0x1a
    a668:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a66a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a66c:	6c 15       	cp	r22, r12
    a66e:	7d 05       	cpc	r23, r13
    a670:	8e 05       	cpc	r24, r14
    a672:	9f 05       	cpc	r25, r15
    a674:	08 f4       	brcc	.+2      	; 0xa678 <create_chain+0x82>
    a676:	da c0       	rjmp	.+436    	; 0xa82c <create_chain+0x236>
    a678:	53 01       	movw	r10, r6
    a67a:	42 01       	movw	r8, r4
    a67c:	04 c0       	rjmp	.+8      	; 0xa686 <create_chain+0x90>
    a67e:	81 2c       	mov	r8, r1
    a680:	91 2c       	mov	r9, r1
    a682:	54 01       	movw	r10, r8
    a684:	83 94       	inc	r8
    a686:	89 89       	ldd	r24, Y+17	; 0x11
    a688:	9a 89       	ldd	r25, Y+18	; 0x12
    a68a:	ab 89       	ldd	r26, Y+19	; 0x13
    a68c:	bc 89       	ldd	r27, Y+20	; 0x14
    a68e:	89 2b       	or	r24, r25
    a690:	8a 2b       	or	r24, r26
    a692:	8b 2b       	or	r24, r27
    a694:	11 f4       	brne	.+4      	; 0xa69a <create_chain+0xa4>
    a696:	40 e0       	ldi	r20, 0x00	; 0
    a698:	c5 c0       	rjmp	.+394    	; 0xa824 <create_chain+0x22e>
    a69a:	84 14       	cp	r8, r4
    a69c:	95 04       	cpc	r9, r5
    a69e:	a6 04       	cpc	r10, r6
    a6a0:	b7 04       	cpc	r11, r7
    a6a2:	09 f0       	breq	.+2      	; 0xa6a6 <create_chain+0xb0>
    a6a4:	46 c0       	rjmp	.+140    	; 0xa732 <create_chain+0x13c>
    a6a6:	75 01       	movw	r14, r10
    a6a8:	64 01       	movw	r12, r8
    a6aa:	2f ef       	ldi	r18, 0xFF	; 255
    a6ac:	c2 1a       	sub	r12, r18
    a6ae:	d2 0a       	sbc	r13, r18
    a6b0:	e2 0a       	sbc	r14, r18
    a6b2:	f2 0a       	sbc	r15, r18
    a6b4:	89 8d       	ldd	r24, Y+25	; 0x19
    a6b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a6b8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a6ba:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a6bc:	c8 16       	cp	r12, r24
    a6be:	d9 06       	cpc	r13, r25
    a6c0:	ea 06       	cpc	r14, r26
    a6c2:	fb 06       	cpc	r15, r27
    a6c4:	28 f0       	brcs	.+10     	; 0xa6d0 <create_chain+0xda>
    a6c6:	92 e0       	ldi	r25, 0x02	; 2
    a6c8:	c9 2e       	mov	r12, r25
    a6ca:	d1 2c       	mov	r13, r1
    a6cc:	e1 2c       	mov	r14, r1
    a6ce:	f1 2c       	mov	r15, r1
    a6d0:	b7 01       	movw	r22, r14
    a6d2:	a6 01       	movw	r20, r12
    a6d4:	f8 01       	movw	r30, r16
    a6d6:	80 81       	ld	r24, Z
    a6d8:	91 81       	ldd	r25, Z+1	; 0x01
    a6da:	18 de       	rcall	.-976    	; 0xa30c <get_fat.isra.10>
    a6dc:	61 30       	cpi	r22, 0x01	; 1
    a6de:	71 05       	cpc	r23, r1
    a6e0:	81 05       	cpc	r24, r1
    a6e2:	91 05       	cpc	r25, r1
    a6e4:	09 f4       	brne	.+2      	; 0xa6e8 <create_chain+0xf2>
    a6e6:	9d c0       	rjmp	.+314    	; 0xa822 <create_chain+0x22c>
    a6e8:	6f 3f       	cpi	r22, 0xFF	; 255
    a6ea:	ff ef       	ldi	r31, 0xFF	; 255
    a6ec:	7f 07       	cpc	r23, r31
    a6ee:	8f 07       	cpc	r24, r31
    a6f0:	9f 07       	cpc	r25, r31
    a6f2:	09 f4       	brne	.+2      	; 0xa6f6 <create_chain+0x100>
    a6f4:	b2 cf       	rjmp	.-156    	; 0xa65a <create_chain+0x64>
    a6f6:	67 2b       	or	r22, r23
    a6f8:	68 2b       	or	r22, r24
    a6fa:	69 2b       	or	r22, r25
    a6fc:	a9 f0       	breq	.+42     	; 0xa728 <create_chain+0x132>
    a6fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    a700:	9e 85       	ldd	r25, Y+14	; 0x0e
    a702:	af 85       	ldd	r26, Y+15	; 0x0f
    a704:	b8 89       	ldd	r27, Y+16	; 0x10
    a706:	82 30       	cpi	r24, 0x02	; 2
    a708:	91 05       	cpc	r25, r1
    a70a:	a1 05       	cpc	r26, r1
    a70c:	b1 05       	cpc	r27, r1
    a70e:	88 f0       	brcs	.+34     	; 0xa732 <create_chain+0x13c>
    a710:	49 8d       	ldd	r20, Y+25	; 0x19
    a712:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a714:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a716:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a718:	84 17       	cp	r24, r20
    a71a:	95 07       	cpc	r25, r21
    a71c:	a6 07       	cpc	r26, r22
    a71e:	b7 07       	cpc	r27, r23
    a720:	40 f4       	brcc	.+16     	; 0xa732 <create_chain+0x13c>
    a722:	4c 01       	movw	r8, r24
    a724:	5d 01       	movw	r10, r26
    a726:	05 c0       	rjmp	.+10     	; 0xa732 <create_chain+0x13c>
    a728:	c1 14       	cp	r12, r1
    a72a:	d1 04       	cpc	r13, r1
    a72c:	e1 04       	cpc	r14, r1
    a72e:	f1 04       	cpc	r15, r1
    a730:	c9 f5       	brne	.+114    	; 0xa7a4 <create_chain+0x1ae>
    a732:	75 01       	movw	r14, r10
    a734:	64 01       	movw	r12, r8
    a736:	2f ef       	ldi	r18, 0xFF	; 255
    a738:	c2 1a       	sub	r12, r18
    a73a:	d2 0a       	sbc	r13, r18
    a73c:	e2 0a       	sbc	r14, r18
    a73e:	f2 0a       	sbc	r15, r18
    a740:	89 8d       	ldd	r24, Y+25	; 0x19
    a742:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a744:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a746:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a748:	c8 16       	cp	r12, r24
    a74a:	d9 06       	cpc	r13, r25
    a74c:	ea 06       	cpc	r14, r26
    a74e:	fb 06       	cpc	r15, r27
    a750:	60 f0       	brcs	.+24     	; 0xa76a <create_chain+0x174>
    a752:	82 e0       	ldi	r24, 0x02	; 2
    a754:	88 16       	cp	r8, r24
    a756:	91 04       	cpc	r9, r1
    a758:	a1 04       	cpc	r10, r1
    a75a:	b1 04       	cpc	r11, r1
    a75c:	08 f4       	brcc	.+2      	; 0xa760 <create_chain+0x16a>
    a75e:	9b cf       	rjmp	.-202    	; 0xa696 <create_chain+0xa0>
    a760:	82 e0       	ldi	r24, 0x02	; 2
    a762:	c8 2e       	mov	r12, r24
    a764:	d1 2c       	mov	r13, r1
    a766:	e1 2c       	mov	r14, r1
    a768:	f1 2c       	mov	r15, r1
    a76a:	b7 01       	movw	r22, r14
    a76c:	a6 01       	movw	r20, r12
    a76e:	f8 01       	movw	r30, r16
    a770:	80 81       	ld	r24, Z
    a772:	91 81       	ldd	r25, Z+1	; 0x01
    a774:	cb dd       	rcall	.-1130   	; 0xa30c <get_fat.isra.10>
    a776:	61 15       	cp	r22, r1
    a778:	71 05       	cpc	r23, r1
    a77a:	81 05       	cpc	r24, r1
    a77c:	91 05       	cpc	r25, r1
    a77e:	91 f0       	breq	.+36     	; 0xa7a4 <create_chain+0x1ae>
    a780:	61 30       	cpi	r22, 0x01	; 1
    a782:	71 05       	cpc	r23, r1
    a784:	81 05       	cpc	r24, r1
    a786:	91 05       	cpc	r25, r1
    a788:	09 f4       	brne	.+2      	; 0xa78c <create_chain+0x196>
    a78a:	4b c0       	rjmp	.+150    	; 0xa822 <create_chain+0x22c>
    a78c:	6f 3f       	cpi	r22, 0xFF	; 255
    a78e:	7f 4f       	sbci	r23, 0xFF	; 255
    a790:	8f 4f       	sbci	r24, 0xFF	; 255
    a792:	9f 4f       	sbci	r25, 0xFF	; 255
    a794:	09 f4       	brne	.+2      	; 0xa798 <create_chain+0x1a2>
    a796:	61 cf       	rjmp	.-318    	; 0xa65a <create_chain+0x64>
    a798:	c8 14       	cp	r12, r8
    a79a:	d9 04       	cpc	r13, r9
    a79c:	ea 04       	cpc	r14, r10
    a79e:	fb 04       	cpc	r15, r11
    a7a0:	51 f6       	brne	.-108    	; 0xa736 <create_chain+0x140>
    a7a2:	79 cf       	rjmp	.-270    	; 0xa696 <create_chain+0xa0>
    a7a4:	0f ef       	ldi	r16, 0xFF	; 255
    a7a6:	1f ef       	ldi	r17, 0xFF	; 255
    a7a8:	98 01       	movw	r18, r16
    a7aa:	b7 01       	movw	r22, r14
    a7ac:	a6 01       	movw	r20, r12
    a7ae:	ce 01       	movw	r24, r28
    a7b0:	ae dc       	rcall	.-1700   	; 0xa10e <put_fat>
    a7b2:	00 97       	sbiw	r24, 0x00	; 0
    a7b4:	99 f5       	brne	.+102    	; 0xa81c <create_chain+0x226>
    a7b6:	41 14       	cp	r4, r1
    a7b8:	51 04       	cpc	r5, r1
    a7ba:	61 04       	cpc	r6, r1
    a7bc:	71 04       	cpc	r7, r1
    a7be:	e9 f4       	brne	.+58     	; 0xa7fa <create_chain+0x204>
    a7c0:	cd 86       	std	Y+13, r12	; 0x0d
    a7c2:	de 86       	std	Y+14, r13	; 0x0e
    a7c4:	ef 86       	std	Y+15, r14	; 0x0f
    a7c6:	f8 8a       	std	Y+16, r15	; 0x10
    a7c8:	89 89       	ldd	r24, Y+17	; 0x11
    a7ca:	9a 89       	ldd	r25, Y+18	; 0x12
    a7cc:	ab 89       	ldd	r26, Y+19	; 0x13
    a7ce:	bc 89       	ldd	r27, Y+20	; 0x14
    a7d0:	49 8d       	ldd	r20, Y+25	; 0x19
    a7d2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a7d4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a7d6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a7d8:	42 50       	subi	r20, 0x02	; 2
    a7da:	51 09       	sbc	r21, r1
    a7dc:	61 09       	sbc	r22, r1
    a7de:	71 09       	sbc	r23, r1
    a7e0:	48 17       	cp	r20, r24
    a7e2:	59 07       	cpc	r21, r25
    a7e4:	6a 07       	cpc	r22, r26
    a7e6:	7b 07       	cpc	r23, r27
    a7e8:	88 f0       	brcs	.+34     	; 0xa80c <create_chain+0x216>
    a7ea:	01 97       	sbiw	r24, 0x01	; 1
    a7ec:	a1 09       	sbc	r26, r1
    a7ee:	b1 09       	sbc	r27, r1
    a7f0:	89 8b       	std	Y+17, r24	; 0x11
    a7f2:	9a 8b       	std	Y+18, r25	; 0x12
    a7f4:	ab 8b       	std	Y+19, r26	; 0x13
    a7f6:	bc 8b       	std	Y+20, r27	; 0x14
    a7f8:	09 c0       	rjmp	.+18     	; 0xa80c <create_chain+0x216>
    a7fa:	97 01       	movw	r18, r14
    a7fc:	86 01       	movw	r16, r12
    a7fe:	b3 01       	movw	r22, r6
    a800:	a2 01       	movw	r20, r4
    a802:	ce 01       	movw	r24, r28
    a804:	84 dc       	rcall	.-1784   	; 0xa10e <put_fat>
    a806:	00 97       	sbiw	r24, 0x00	; 0
    a808:	d9 f2       	breq	.-74     	; 0xa7c0 <create_chain+0x1ca>
    a80a:	08 c0       	rjmp	.+16     	; 0xa81c <create_chain+0x226>
    a80c:	8c 81       	ldd	r24, Y+4	; 0x04
    a80e:	81 60       	ori	r24, 0x01	; 1
    a810:	8c 83       	std	Y+4, r24	; 0x04
    a812:	4c 2d       	mov	r20, r12
    a814:	3d 2d       	mov	r19, r13
    a816:	2e 2d       	mov	r18, r14
    a818:	9f 2d       	mov	r25, r15
    a81a:	0b c0       	rjmp	.+22     	; 0xa832 <create_chain+0x23c>
    a81c:	01 97       	sbiw	r24, 0x01	; 1
    a81e:	09 f4       	brne	.+2      	; 0xa822 <create_chain+0x22c>
    a820:	1c cf       	rjmp	.-456    	; 0xa65a <create_chain+0x64>
    a822:	41 e0       	ldi	r20, 0x01	; 1
    a824:	30 e0       	ldi	r19, 0x00	; 0
    a826:	20 e0       	ldi	r18, 0x00	; 0
    a828:	90 e0       	ldi	r25, 0x00	; 0
    a82a:	03 c0       	rjmp	.+6      	; 0xa832 <create_chain+0x23c>
    a82c:	46 2f       	mov	r20, r22
    a82e:	37 2f       	mov	r19, r23
    a830:	28 2f       	mov	r18, r24
    a832:	64 2f       	mov	r22, r20
    a834:	73 2f       	mov	r23, r19
    a836:	82 2f       	mov	r24, r18
    a838:	cd b7       	in	r28, 0x3d	; 61
    a83a:	de b7       	in	r29, 0x3e	; 62
    a83c:	e0 e1       	ldi	r30, 0x10	; 16
    a83e:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

0000a842 <remove_chain>:
    a842:	4f 92       	push	r4
    a844:	5f 92       	push	r5
    a846:	6f 92       	push	r6
    a848:	7f 92       	push	r7
    a84a:	af 92       	push	r10
    a84c:	bf 92       	push	r11
    a84e:	cf 92       	push	r12
    a850:	df 92       	push	r13
    a852:	ef 92       	push	r14
    a854:	ff 92       	push	r15
    a856:	0f 93       	push	r16
    a858:	1f 93       	push	r17
    a85a:	cf 93       	push	r28
    a85c:	df 93       	push	r29
    a85e:	5c 01       	movw	r10, r24
    a860:	6a 01       	movw	r12, r20
    a862:	7b 01       	movw	r14, r22
    a864:	b9 01       	movw	r22, r18
    a866:	a8 01       	movw	r20, r16
    a868:	22 e0       	ldi	r18, 0x02	; 2
    a86a:	c2 16       	cp	r12, r18
    a86c:	d1 04       	cpc	r13, r1
    a86e:	e1 04       	cpc	r14, r1
    a870:	f1 04       	cpc	r15, r1
    a872:	10 f4       	brcc	.+4      	; 0xa878 <remove_chain+0x36>
    a874:	22 e0       	ldi	r18, 0x02	; 2
    a876:	27 c0       	rjmp	.+78     	; 0xa8c6 <remove_chain+0x84>
    a878:	fc 01       	movw	r30, r24
    a87a:	c0 81       	ld	r28, Z
    a87c:	d1 81       	ldd	r29, Z+1	; 0x01
    a87e:	89 8d       	ldd	r24, Y+25	; 0x19
    a880:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a882:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a884:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a886:	c8 16       	cp	r12, r24
    a888:	d9 06       	cpc	r13, r25
    a88a:	ea 06       	cpc	r14, r26
    a88c:	fb 06       	cpc	r15, r27
    a88e:	90 f7       	brcc	.-28     	; 0xa874 <remove_chain+0x32>
    a890:	41 15       	cp	r20, r1
    a892:	51 05       	cpc	r21, r1
    a894:	61 05       	cpc	r22, r1
    a896:	71 05       	cpc	r23, r1
    a898:	41 f0       	breq	.+16     	; 0xa8aa <remove_chain+0x68>
    a89a:	0f ef       	ldi	r16, 0xFF	; 255
    a89c:	1f ef       	ldi	r17, 0xFF	; 255
    a89e:	98 01       	movw	r18, r16
    a8a0:	ce 01       	movw	r24, r28
    a8a2:	35 dc       	rcall	.-1942   	; 0xa10e <put_fat>
    a8a4:	00 97       	sbiw	r24, 0x00	; 0
    a8a6:	09 f0       	breq	.+2      	; 0xa8aa <remove_chain+0x68>
    a8a8:	4c c0       	rjmp	.+152    	; 0xa942 <remove_chain+0x100>
    a8aa:	b7 01       	movw	r22, r14
    a8ac:	a6 01       	movw	r20, r12
    a8ae:	f5 01       	movw	r30, r10
    a8b0:	80 81       	ld	r24, Z
    a8b2:	91 81       	ldd	r25, Z+1	; 0x01
    a8b4:	2b dd       	rcall	.-1450   	; 0xa30c <get_fat.isra.10>
    a8b6:	2b 01       	movw	r4, r22
    a8b8:	3c 01       	movw	r6, r24
    a8ba:	61 15       	cp	r22, r1
    a8bc:	71 05       	cpc	r23, r1
    a8be:	81 05       	cpc	r24, r1
    a8c0:	91 05       	cpc	r25, r1
    a8c2:	19 f4       	brne	.+6      	; 0xa8ca <remove_chain+0x88>
    a8c4:	20 e0       	ldi	r18, 0x00	; 0
    a8c6:	90 e0       	ldi	r25, 0x00	; 0
    a8c8:	3d c0       	rjmp	.+122    	; 0xa944 <remove_chain+0x102>
    a8ca:	61 30       	cpi	r22, 0x01	; 1
    a8cc:	71 05       	cpc	r23, r1
    a8ce:	81 05       	cpc	r24, r1
    a8d0:	91 05       	cpc	r25, r1
    a8d2:	81 f2       	breq	.-96     	; 0xa874 <remove_chain+0x32>
    a8d4:	6f 3f       	cpi	r22, 0xFF	; 255
    a8d6:	7f 4f       	sbci	r23, 0xFF	; 255
    a8d8:	8f 4f       	sbci	r24, 0xFF	; 255
    a8da:	9f 4f       	sbci	r25, 0xFF	; 255
    a8dc:	81 f1       	breq	.+96     	; 0xa93e <remove_chain+0xfc>
    a8de:	00 e0       	ldi	r16, 0x00	; 0
    a8e0:	10 e0       	ldi	r17, 0x00	; 0
    a8e2:	98 01       	movw	r18, r16
    a8e4:	b7 01       	movw	r22, r14
    a8e6:	a6 01       	movw	r20, r12
    a8e8:	ce 01       	movw	r24, r28
    a8ea:	11 dc       	rcall	.-2014   	; 0xa10e <put_fat>
    a8ec:	00 97       	sbiw	r24, 0x00	; 0
    a8ee:	49 f5       	brne	.+82     	; 0xa942 <remove_chain+0x100>
    a8f0:	89 89       	ldd	r24, Y+17	; 0x11
    a8f2:	9a 89       	ldd	r25, Y+18	; 0x12
    a8f4:	ab 89       	ldd	r26, Y+19	; 0x13
    a8f6:	bc 89       	ldd	r27, Y+20	; 0x14
    a8f8:	49 8d       	ldd	r20, Y+25	; 0x19
    a8fa:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a8fc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a8fe:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a900:	6a 01       	movw	r12, r20
    a902:	7b 01       	movw	r14, r22
    a904:	e2 e0       	ldi	r30, 0x02	; 2
    a906:	ce 1a       	sub	r12, r30
    a908:	d1 08       	sbc	r13, r1
    a90a:	e1 08       	sbc	r14, r1
    a90c:	f1 08       	sbc	r15, r1
    a90e:	8c 15       	cp	r24, r12
    a910:	9d 05       	cpc	r25, r13
    a912:	ae 05       	cpc	r26, r14
    a914:	bf 05       	cpc	r27, r15
    a916:	50 f4       	brcc	.+20     	; 0xa92c <remove_chain+0xea>
    a918:	01 96       	adiw	r24, 0x01	; 1
    a91a:	a1 1d       	adc	r26, r1
    a91c:	b1 1d       	adc	r27, r1
    a91e:	89 8b       	std	Y+17, r24	; 0x11
    a920:	9a 8b       	std	Y+18, r25	; 0x12
    a922:	ab 8b       	std	Y+19, r26	; 0x13
    a924:	bc 8b       	std	Y+20, r27	; 0x14
    a926:	8c 81       	ldd	r24, Y+4	; 0x04
    a928:	81 60       	ori	r24, 0x01	; 1
    a92a:	8c 83       	std	Y+4, r24	; 0x04
    a92c:	73 01       	movw	r14, r6
    a92e:	62 01       	movw	r12, r4
    a930:	44 16       	cp	r4, r20
    a932:	55 06       	cpc	r5, r21
    a934:	66 06       	cpc	r6, r22
    a936:	77 06       	cpc	r7, r23
    a938:	08 f4       	brcc	.+2      	; 0xa93c <remove_chain+0xfa>
    a93a:	b7 cf       	rjmp	.-146    	; 0xa8aa <remove_chain+0x68>
    a93c:	c3 cf       	rjmp	.-122    	; 0xa8c4 <remove_chain+0x82>
    a93e:	21 e0       	ldi	r18, 0x01	; 1
    a940:	c2 cf       	rjmp	.-124    	; 0xa8c6 <remove_chain+0x84>
    a942:	28 2f       	mov	r18, r24
    a944:	82 2f       	mov	r24, r18
    a946:	df 91       	pop	r29
    a948:	cf 91       	pop	r28
    a94a:	1f 91       	pop	r17
    a94c:	0f 91       	pop	r16
    a94e:	ff 90       	pop	r15
    a950:	ef 90       	pop	r14
    a952:	df 90       	pop	r13
    a954:	cf 90       	pop	r12
    a956:	bf 90       	pop	r11
    a958:	af 90       	pop	r10
    a95a:	7f 90       	pop	r7
    a95c:	6f 90       	pop	r6
    a95e:	5f 90       	pop	r5
    a960:	4f 90       	pop	r4
    a962:	08 95       	ret

0000a964 <dir_next>:
    a964:	4f 92       	push	r4
    a966:	5f 92       	push	r5
    a968:	6f 92       	push	r6
    a96a:	7f 92       	push	r7
    a96c:	af 92       	push	r10
    a96e:	bf 92       	push	r11
    a970:	cf 92       	push	r12
    a972:	df 92       	push	r13
    a974:	ef 92       	push	r14
    a976:	ff 92       	push	r15
    a978:	0f 93       	push	r16
    a97a:	1f 93       	push	r17
    a97c:	cf 93       	push	r28
    a97e:	df 93       	push	r29
    a980:	ec 01       	movw	r28, r24
    a982:	08 81       	ld	r16, Y
    a984:	19 81       	ldd	r17, Y+1	; 0x01
    a986:	ce 84       	ldd	r12, Y+14	; 0x0e
    a988:	df 84       	ldd	r13, Y+15	; 0x0f
    a98a:	e8 88       	ldd	r14, Y+16	; 0x10
    a98c:	f9 88       	ldd	r15, Y+17	; 0x11
    a98e:	80 e2       	ldi	r24, 0x20	; 32
    a990:	c8 0e       	add	r12, r24
    a992:	d1 1c       	adc	r13, r1
    a994:	e1 1c       	adc	r14, r1
    a996:	f1 1c       	adc	r15, r1
    a998:	c1 14       	cp	r12, r1
    a99a:	d1 04       	cpc	r13, r1
    a99c:	e0 e2       	ldi	r30, 0x20	; 32
    a99e:	ee 06       	cpc	r14, r30
    a9a0:	f1 04       	cpc	r15, r1
    a9a2:	20 f0       	brcs	.+8      	; 0xa9ac <dir_next+0x48>
    a9a4:	1e 8a       	std	Y+22, r1	; 0x16
    a9a6:	1f 8a       	std	Y+23, r1	; 0x17
    a9a8:	18 8e       	std	Y+24, r1	; 0x18
    a9aa:	19 8e       	std	Y+25, r1	; 0x19
    a9ac:	8e 89       	ldd	r24, Y+22	; 0x16
    a9ae:	9f 89       	ldd	r25, Y+23	; 0x17
    a9b0:	a8 8d       	ldd	r26, Y+24	; 0x18
    a9b2:	b9 8d       	ldd	r27, Y+25	; 0x19
    a9b4:	00 97       	sbiw	r24, 0x00	; 0
    a9b6:	a1 05       	cpc	r26, r1
    a9b8:	b1 05       	cpc	r27, r1
    a9ba:	09 f4       	brne	.+2      	; 0xa9be <dir_next+0x5a>
    a9bc:	a7 c0       	rjmp	.+334    	; 0xab0c <dir_next+0x1a8>
    a9be:	5b 01       	movw	r10, r22
    a9c0:	b7 01       	movw	r22, r14
    a9c2:	a6 01       	movw	r20, r12
    a9c4:	51 70       	andi	r21, 0x01	; 1
    a9c6:	66 27       	eor	r22, r22
    a9c8:	77 27       	eor	r23, r23
    a9ca:	45 2b       	or	r20, r21
    a9cc:	46 2b       	or	r20, r22
    a9ce:	47 2b       	or	r20, r23
    a9d0:	09 f0       	breq	.+2      	; 0xa9d4 <dir_next+0x70>
    a9d2:	8d c0       	rjmp	.+282    	; 0xaaee <dir_next+0x18a>
    a9d4:	01 96       	adiw	r24, 0x01	; 1
    a9d6:	a1 1d       	adc	r26, r1
    a9d8:	b1 1d       	adc	r27, r1
    a9da:	8e 8b       	std	Y+22, r24	; 0x16
    a9dc:	9f 8b       	std	Y+23, r25	; 0x17
    a9de:	a8 8f       	std	Y+24, r26	; 0x18
    a9e0:	b9 8f       	std	Y+25, r27	; 0x19
    a9e2:	4a 89       	ldd	r20, Y+18	; 0x12
    a9e4:	5b 89       	ldd	r21, Y+19	; 0x13
    a9e6:	6c 89       	ldd	r22, Y+20	; 0x14
    a9e8:	7d 89       	ldd	r23, Y+21	; 0x15
    a9ea:	f8 01       	movw	r30, r16
    a9ec:	41 15       	cp	r20, r1
    a9ee:	51 05       	cpc	r21, r1
    a9f0:	61 05       	cpc	r22, r1
    a9f2:	71 05       	cpc	r23, r1
    a9f4:	c1 f4       	brne	.+48     	; 0xaa26 <dir_next+0xc2>
    a9f6:	87 81       	ldd	r24, Z+7	; 0x07
    a9f8:	90 85       	ldd	r25, Z+8	; 0x08
    a9fa:	a0 e0       	ldi	r26, 0x00	; 0
    a9fc:	b0 e0       	ldi	r27, 0x00	; 0
    a9fe:	b7 01       	movw	r22, r14
    aa00:	a6 01       	movw	r20, r12
    aa02:	35 e0       	ldi	r19, 0x05	; 5
    aa04:	76 95       	lsr	r23
    aa06:	67 95       	ror	r22
    aa08:	57 95       	ror	r21
    aa0a:	47 95       	ror	r20
    aa0c:	3a 95       	dec	r19
    aa0e:	d1 f7       	brne	.-12     	; 0xaa04 <dir_next+0xa0>
    aa10:	48 17       	cp	r20, r24
    aa12:	59 07       	cpc	r21, r25
    aa14:	6a 07       	cpc	r22, r26
    aa16:	7b 07       	cpc	r23, r27
    aa18:	08 f4       	brcc	.+2      	; 0xaa1c <dir_next+0xb8>
    aa1a:	69 c0       	rjmp	.+210    	; 0xaaee <dir_next+0x18a>
    aa1c:	1e 8a       	std	Y+22, r1	; 0x16
    aa1e:	1f 8a       	std	Y+23, r1	; 0x17
    aa20:	18 8e       	std	Y+24, r1	; 0x18
    aa22:	19 8e       	std	Y+25, r1	; 0x19
    aa24:	73 c0       	rjmp	.+230    	; 0xab0c <dir_next+0x1a8>
    aa26:	81 85       	ldd	r24, Z+9	; 0x09
    aa28:	92 85       	ldd	r25, Z+10	; 0x0a
    aa2a:	01 97       	sbiw	r24, 0x01	; 1
    aa2c:	a0 e0       	ldi	r26, 0x00	; 0
    aa2e:	b0 e0       	ldi	r27, 0x00	; 0
    aa30:	26 01       	movw	r4, r12
    aa32:	37 01       	movw	r6, r14
    aa34:	29 e0       	ldi	r18, 0x09	; 9
    aa36:	76 94       	lsr	r7
    aa38:	67 94       	ror	r6
    aa3a:	57 94       	ror	r5
    aa3c:	47 94       	ror	r4
    aa3e:	2a 95       	dec	r18
    aa40:	d1 f7       	brne	.-12     	; 0xaa36 <dir_next+0xd2>
    aa42:	84 21       	and	r24, r4
    aa44:	95 21       	and	r25, r5
    aa46:	a6 21       	and	r26, r6
    aa48:	b7 21       	and	r27, r7
    aa4a:	89 2b       	or	r24, r25
    aa4c:	8a 2b       	or	r24, r26
    aa4e:	8b 2b       	or	r24, r27
    aa50:	09 f0       	breq	.+2      	; 0xaa54 <dir_next+0xf0>
    aa52:	4d c0       	rjmp	.+154    	; 0xaaee <dir_next+0x18a>
    aa54:	c8 01       	movw	r24, r16
    aa56:	5a dc       	rcall	.-1868   	; 0xa30c <get_fat.isra.10>
    aa58:	2b 01       	movw	r4, r22
    aa5a:	3c 01       	movw	r6, r24
    aa5c:	62 30       	cpi	r22, 0x02	; 2
    aa5e:	71 05       	cpc	r23, r1
    aa60:	81 05       	cpc	r24, r1
    aa62:	91 05       	cpc	r25, r1
    aa64:	18 f4       	brcc	.+6      	; 0xaa6c <dir_next+0x108>
    aa66:	82 e0       	ldi	r24, 0x02	; 2
    aa68:	90 e0       	ldi	r25, 0x00	; 0
    aa6a:	55 c0       	rjmp	.+170    	; 0xab16 <dir_next+0x1b2>
    aa6c:	8f ef       	ldi	r24, 0xFF	; 255
    aa6e:	48 16       	cp	r4, r24
    aa70:	58 06       	cpc	r5, r24
    aa72:	68 06       	cpc	r6, r24
    aa74:	78 06       	cpc	r7, r24
    aa76:	19 f4       	brne	.+6      	; 0xaa7e <dir_next+0x11a>
    aa78:	81 e0       	ldi	r24, 0x01	; 1
    aa7a:	90 e0       	ldi	r25, 0x00	; 0
    aa7c:	4c c0       	rjmp	.+152    	; 0xab16 <dir_next+0x1b2>
    aa7e:	f8 01       	movw	r30, r16
    aa80:	81 8d       	ldd	r24, Z+25	; 0x19
    aa82:	92 8d       	ldd	r25, Z+26	; 0x1a
    aa84:	a3 8d       	ldd	r26, Z+27	; 0x1b
    aa86:	b4 8d       	ldd	r27, Z+28	; 0x1c
    aa88:	48 16       	cp	r4, r24
    aa8a:	59 06       	cpc	r5, r25
    aa8c:	6a 06       	cpc	r6, r26
    aa8e:	7b 06       	cpc	r7, r27
    aa90:	08 f1       	brcs	.+66     	; 0xaad4 <dir_next+0x170>
    aa92:	ab 28       	or	r10, r11
    aa94:	19 f2       	breq	.-122    	; 0xaa1c <dir_next+0xb8>
    aa96:	4a 89       	ldd	r20, Y+18	; 0x12
    aa98:	5b 89       	ldd	r21, Y+19	; 0x13
    aa9a:	6c 89       	ldd	r22, Y+20	; 0x14
    aa9c:	7d 89       	ldd	r23, Y+21	; 0x15
    aa9e:	ce 01       	movw	r24, r28
    aaa0:	aa dd       	rcall	.-1196   	; 0xa5f6 <create_chain>
    aaa2:	2b 01       	movw	r4, r22
    aaa4:	3c 01       	movw	r6, r24
    aaa6:	61 15       	cp	r22, r1
    aaa8:	71 05       	cpc	r23, r1
    aaaa:	81 05       	cpc	r24, r1
    aaac:	91 05       	cpc	r25, r1
    aaae:	89 f1       	breq	.+98     	; 0xab12 <dir_next+0x1ae>
    aab0:	61 30       	cpi	r22, 0x01	; 1
    aab2:	71 05       	cpc	r23, r1
    aab4:	81 05       	cpc	r24, r1
    aab6:	91 05       	cpc	r25, r1
    aab8:	b1 f2       	breq	.-84     	; 0xaa66 <dir_next+0x102>
    aaba:	8f ef       	ldi	r24, 0xFF	; 255
    aabc:	48 16       	cp	r4, r24
    aabe:	58 06       	cpc	r5, r24
    aac0:	68 06       	cpc	r6, r24
    aac2:	78 06       	cpc	r7, r24
    aac4:	c9 f2       	breq	.-78     	; 0xaa78 <dir_next+0x114>
    aac6:	b3 01       	movw	r22, r6
    aac8:	a2 01       	movw	r20, r4
    aaca:	c8 01       	movw	r24, r16
    aacc:	0e 94 02 4d 	call	0x9a04	; 0x9a04 <dir_clear>
    aad0:	89 2b       	or	r24, r25
    aad2:	91 f6       	brne	.-92     	; 0xaa78 <dir_next+0x114>
    aad4:	4a 8a       	std	Y+18, r4	; 0x12
    aad6:	5b 8a       	std	Y+19, r5	; 0x13
    aad8:	6c 8a       	std	Y+20, r6	; 0x14
    aada:	7d 8a       	std	Y+21, r7	; 0x15
    aadc:	b3 01       	movw	r22, r6
    aade:	a2 01       	movw	r20, r4
    aae0:	c8 01       	movw	r24, r16
    aae2:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    aae6:	6e 8b       	std	Y+22, r22	; 0x16
    aae8:	7f 8b       	std	Y+23, r23	; 0x17
    aaea:	88 8f       	std	Y+24, r24	; 0x18
    aaec:	99 8f       	std	Y+25, r25	; 0x19
    aaee:	ce 86       	std	Y+14, r12	; 0x0e
    aaf0:	df 86       	std	Y+15, r13	; 0x0f
    aaf2:	e8 8a       	std	Y+16, r14	; 0x10
    aaf4:	f9 8a       	std	Y+17, r15	; 0x11
    aaf6:	0b 5c       	subi	r16, 0xCB	; 203
    aaf8:	1f 4f       	sbci	r17, 0xFF	; 255
    aafa:	e1 e0       	ldi	r30, 0x01	; 1
    aafc:	de 22       	and	r13, r30
    aafe:	c0 0e       	add	r12, r16
    ab00:	d1 1e       	adc	r13, r17
    ab02:	db 8e       	std	Y+27, r13	; 0x1b
    ab04:	ca 8e       	std	Y+26, r12	; 0x1a
    ab06:	80 e0       	ldi	r24, 0x00	; 0
    ab08:	90 e0       	ldi	r25, 0x00	; 0
    ab0a:	05 c0       	rjmp	.+10     	; 0xab16 <dir_next+0x1b2>
    ab0c:	84 e0       	ldi	r24, 0x04	; 4
    ab0e:	90 e0       	ldi	r25, 0x00	; 0
    ab10:	02 c0       	rjmp	.+4      	; 0xab16 <dir_next+0x1b2>
    ab12:	87 e0       	ldi	r24, 0x07	; 7
    ab14:	90 e0       	ldi	r25, 0x00	; 0
    ab16:	df 91       	pop	r29
    ab18:	cf 91       	pop	r28
    ab1a:	1f 91       	pop	r17
    ab1c:	0f 91       	pop	r16
    ab1e:	ff 90       	pop	r15
    ab20:	ef 90       	pop	r14
    ab22:	df 90       	pop	r13
    ab24:	cf 90       	pop	r12
    ab26:	bf 90       	pop	r11
    ab28:	af 90       	pop	r10
    ab2a:	7f 90       	pop	r7
    ab2c:	6f 90       	pop	r6
    ab2e:	5f 90       	pop	r5
    ab30:	4f 90       	pop	r4
    ab32:	08 95       	ret

0000ab34 <dir_alloc>:
    ab34:	a0 e0       	ldi	r26, 0x00	; 0
    ab36:	b0 e0       	ldi	r27, 0x00	; 0
    ab38:	e0 ea       	ldi	r30, 0xA0	; 160
    ab3a:	f5 e5       	ldi	r31, 0x55	; 85
    ab3c:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    ab40:	ec 01       	movw	r28, r24
    ab42:	6b 01       	movw	r12, r22
    ab44:	e8 80       	ld	r14, Y
    ab46:	f9 80       	ldd	r15, Y+1	; 0x01
    ab48:	40 e0       	ldi	r20, 0x00	; 0
    ab4a:	50 e0       	ldi	r21, 0x00	; 0
    ab4c:	ba 01       	movw	r22, r20
    ab4e:	92 dc       	rcall	.-1756   	; 0xa474 <dir_sdi>
    ab50:	00 97       	sbiw	r24, 0x00	; 0
    ab52:	01 f5       	brne	.+64     	; 0xab94 <dir_alloc+0x60>
    ab54:	00 e0       	ldi	r16, 0x00	; 0
    ab56:	10 e0       	ldi	r17, 0x00	; 0
    ab58:	4e 89       	ldd	r20, Y+22	; 0x16
    ab5a:	5f 89       	ldd	r21, Y+23	; 0x17
    ab5c:	68 8d       	ldd	r22, Y+24	; 0x18
    ab5e:	79 8d       	ldd	r23, Y+25	; 0x19
    ab60:	c7 01       	movw	r24, r14
    ab62:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    ab66:	00 97       	sbiw	r24, 0x00	; 0
    ab68:	a9 f4       	brne	.+42     	; 0xab94 <dir_alloc+0x60>
    ab6a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    ab6c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    ab6e:	20 81       	ld	r18, Z
    ab70:	25 3e       	cpi	r18, 0xE5	; 229
    ab72:	11 f0       	breq	.+4      	; 0xab78 <dir_alloc+0x44>
    ab74:	21 11       	cpse	r18, r1
    ab76:	06 c0       	rjmp	.+12     	; 0xab84 <dir_alloc+0x50>
    ab78:	0f 5f       	subi	r16, 0xFF	; 255
    ab7a:	1f 4f       	sbci	r17, 0xFF	; 255
    ab7c:	0c 15       	cp	r16, r12
    ab7e:	1d 05       	cpc	r17, r13
    ab80:	19 f4       	brne	.+6      	; 0xab88 <dir_alloc+0x54>
    ab82:	0d c0       	rjmp	.+26     	; 0xab9e <dir_alloc+0x6a>
    ab84:	00 e0       	ldi	r16, 0x00	; 0
    ab86:	10 e0       	ldi	r17, 0x00	; 0
    ab88:	61 e0       	ldi	r22, 0x01	; 1
    ab8a:	70 e0       	ldi	r23, 0x00	; 0
    ab8c:	ce 01       	movw	r24, r28
    ab8e:	ea de       	rcall	.-556    	; 0xa964 <dir_next>
    ab90:	00 97       	sbiw	r24, 0x00	; 0
    ab92:	11 f3       	breq	.-60     	; 0xab58 <dir_alloc+0x24>
    ab94:	84 30       	cpi	r24, 0x04	; 4
    ab96:	91 05       	cpc	r25, r1
    ab98:	11 f4       	brne	.+4      	; 0xab9e <dir_alloc+0x6a>
    ab9a:	87 e0       	ldi	r24, 0x07	; 7
    ab9c:	90 e0       	ldi	r25, 0x00	; 0
    ab9e:	cd b7       	in	r28, 0x3d	; 61
    aba0:	de b7       	in	r29, 0x3e	; 62
    aba2:	e8 e0       	ldi	r30, 0x08	; 8
    aba4:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000aba8 <dir_read>:
    aba8:	a0 e0       	ldi	r26, 0x00	; 0
    abaa:	b0 e0       	ldi	r27, 0x00	; 0
    abac:	ea ed       	ldi	r30, 0xDA	; 218
    abae:	f5 e5       	ldi	r31, 0x55	; 85
    abb0:	0c 94 2d e4 	jmp	0x1c85a	; 0x1c85a <__prologue_saves__+0x8>
    abb4:	ec 01       	movw	r28, r24
    abb6:	7b 01       	movw	r14, r22
    abb8:	a8 80       	ld	r10, Y
    abba:	b9 80       	ldd	r11, Y+1	; 0x01
    abbc:	dd 24       	eor	r13, r13
    abbe:	da 94       	dec	r13
    abc0:	1f ef       	ldi	r17, 0xFF	; 255
    abc2:	84 e0       	ldi	r24, 0x04	; 4
    abc4:	90 e0       	ldi	r25, 0x00	; 0
    abc6:	ad e0       	ldi	r26, 0x0D	; 13
    abc8:	ca 2e       	mov	r12, r26
    abca:	4e 89       	ldd	r20, Y+22	; 0x16
    abcc:	5f 89       	ldd	r21, Y+23	; 0x17
    abce:	68 8d       	ldd	r22, Y+24	; 0x18
    abd0:	79 8d       	ldd	r23, Y+25	; 0x19
    abd2:	41 15       	cp	r20, r1
    abd4:	51 05       	cpc	r21, r1
    abd6:	61 05       	cpc	r22, r1
    abd8:	71 05       	cpc	r23, r1
    abda:	09 f4       	brne	.+2      	; 0xabde <dir_read+0x36>
    abdc:	a3 c0       	rjmp	.+326    	; 0xad24 <dir_read+0x17c>
    abde:	c5 01       	movw	r24, r10
    abe0:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    abe4:	00 97       	sbiw	r24, 0x00	; 0
    abe6:	09 f0       	breq	.+2      	; 0xabea <dir_read+0x42>
    abe8:	9f c0       	rjmp	.+318    	; 0xad28 <dir_read+0x180>
    abea:	aa 8d       	ldd	r26, Y+26	; 0x1a
    abec:	bb 8d       	ldd	r27, Y+27	; 0x1b
    abee:	0c 91       	ld	r16, X
    abf0:	00 23       	and	r16, r16
    abf2:	09 f4       	brne	.+2      	; 0xabf6 <dir_read+0x4e>
    abf4:	a1 c0       	rjmp	.+322    	; 0xad38 <dir_read+0x190>
    abf6:	1b 96       	adiw	r26, 0x0b	; 11
    abf8:	8c 91       	ld	r24, X
    abfa:	1b 97       	sbiw	r26, 0x0b	; 11
    abfc:	8f 73       	andi	r24, 0x3F	; 63
    abfe:	8c 83       	std	Y+4, r24	; 0x04
    ac00:	05 3e       	cpi	r16, 0xE5	; 229
    ac02:	09 f4       	brne	.+2      	; 0xac06 <dir_read+0x5e>
    ac04:	86 c0       	rjmp	.+268    	; 0xad12 <dir_read+0x16a>
    ac06:	0e 32       	cpi	r16, 0x2E	; 46
    ac08:	09 f4       	brne	.+2      	; 0xac0c <dir_read+0x64>
    ac0a:	83 c0       	rjmp	.+262    	; 0xad12 <dir_read+0x16a>
    ac0c:	21 e0       	ldi	r18, 0x01	; 1
    ac0e:	30 e0       	ldi	r19, 0x00	; 0
    ac10:	98 2f       	mov	r25, r24
    ac12:	9f 71       	andi	r25, 0x1F	; 31
    ac14:	98 30       	cpi	r25, 0x08	; 8
    ac16:	11 f0       	breq	.+4      	; 0xac1c <dir_read+0x74>
    ac18:	20 e0       	ldi	r18, 0x00	; 0
    ac1a:	30 e0       	ldi	r19, 0x00	; 0
    ac1c:	2e 15       	cp	r18, r14
    ac1e:	3f 05       	cpc	r19, r15
    ac20:	09 f0       	breq	.+2      	; 0xac24 <dir_read+0x7c>
    ac22:	77 c0       	rjmp	.+238    	; 0xad12 <dir_read+0x16a>
    ac24:	8f 30       	cpi	r24, 0x0F	; 15
    ac26:	09 f0       	breq	.+2      	; 0xac2a <dir_read+0x82>
    ac28:	64 c0       	rjmp	.+200    	; 0xacf2 <dir_read+0x14a>
    ac2a:	06 ff       	sbrs	r16, 6
    ac2c:	0d c0       	rjmp	.+26     	; 0xac48 <dir_read+0xa0>
    ac2e:	1d 96       	adiw	r26, 0x0d	; 13
    ac30:	8c 91       	ld	r24, X
    ac32:	1d 97       	sbiw	r26, 0x0d	; 13
    ac34:	0f 7b       	andi	r16, 0xBF	; 191
    ac36:	4e 85       	ldd	r20, Y+14	; 0x0e
    ac38:	5f 85       	ldd	r21, Y+15	; 0x0f
    ac3a:	68 89       	ldd	r22, Y+16	; 0x10
    ac3c:	79 89       	ldd	r23, Y+17	; 0x11
    ac3e:	48 a7       	std	Y+40, r20	; 0x28
    ac40:	59 a7       	std	Y+41, r21	; 0x29
    ac42:	6a a7       	std	Y+42, r22	; 0x2a
    ac44:	7b a7       	std	Y+43, r23	; 0x2b
    ac46:	03 c0       	rjmp	.+6      	; 0xac4e <dir_read+0xa6>
    ac48:	10 13       	cpse	r17, r16
    ac4a:	63 c0       	rjmp	.+198    	; 0xad12 <dir_read+0x16a>
    ac4c:	8d 2d       	mov	r24, r13
    ac4e:	1d 96       	adiw	r26, 0x0d	; 13
    ac50:	dc 90       	ld	r13, X
    ac52:	1d 97       	sbiw	r26, 0x0d	; 13
    ac54:	d8 12       	cpse	r13, r24
    ac56:	5c c0       	rjmp	.+184    	; 0xad10 <dir_read+0x168>
    ac58:	5a 96       	adiw	r26, 0x1a	; 26
    ac5a:	8d 91       	ld	r24, X+
    ac5c:	9c 91       	ld	r25, X
    ac5e:	5b 97       	sbiw	r26, 0x1b	; 27
    ac60:	89 2b       	or	r24, r25
    ac62:	09 f0       	breq	.+2      	; 0xac66 <dir_read+0xbe>
    ac64:	56 c0       	rjmp	.+172    	; 0xad12 <dir_read+0x16a>
    ac66:	f5 01       	movw	r30, r10
    ac68:	63 85       	ldd	r22, Z+11	; 0x0b
    ac6a:	74 85       	ldd	r23, Z+12	; 0x0c
    ac6c:	8c 91       	ld	r24, X
    ac6e:	90 e0       	ldi	r25, 0x00	; 0
    ac70:	8f 7b       	andi	r24, 0xBF	; 191
    ac72:	01 97       	sbiw	r24, 0x01	; 1
    ac74:	c8 9e       	mul	r12, r24
    ac76:	90 01       	movw	r18, r0
    ac78:	c9 9e       	mul	r12, r25
    ac7a:	30 0d       	add	r19, r0
    ac7c:	11 24       	eor	r1, r1
    ac7e:	ff e4       	ldi	r31, 0x4F	; 79
    ac80:	6f 2e       	mov	r6, r31
    ac82:	f3 e0       	ldi	r31, 0x03	; 3
    ac84:	7f 2e       	mov	r7, r31
    ac86:	81 e0       	ldi	r24, 0x01	; 1
    ac88:	90 e0       	ldi	r25, 0x00	; 0
    ac8a:	f3 01       	movw	r30, r6
    ac8c:	41 91       	ld	r20, Z+
    ac8e:	3f 01       	movw	r6, r30
    ac90:	4d 01       	movw	r8, r26
    ac92:	84 0e       	add	r8, r20
    ac94:	91 1c       	adc	r9, r1
    ac96:	f4 01       	movw	r30, r8
    ac98:	40 81       	ld	r20, Z
    ac9a:	51 81       	ldd	r21, Z+1	; 0x01
    ac9c:	00 97       	sbiw	r24, 0x00	; 0
    ac9e:	81 f0       	breq	.+32     	; 0xacc0 <dir_read+0x118>
    aca0:	2f 3f       	cpi	r18, 0xFF	; 255
    aca2:	31 05       	cpc	r19, r1
    aca4:	09 f0       	breq	.+2      	; 0xaca8 <dir_read+0x100>
    aca6:	a8 f5       	brcc	.+106    	; 0xad12 <dir_read+0x16a>
    aca8:	c9 01       	movw	r24, r18
    acaa:	88 0f       	add	r24, r24
    acac:	99 1f       	adc	r25, r25
    acae:	86 0f       	add	r24, r22
    acb0:	97 1f       	adc	r25, r23
    acb2:	fc 01       	movw	r30, r24
    acb4:	51 83       	std	Z+1, r21	; 0x01
    acb6:	40 83       	st	Z, r20
    acb8:	ca 01       	movw	r24, r20
    acba:	2f 5f       	subi	r18, 0xFF	; 255
    acbc:	3f 4f       	sbci	r19, 0xFF	; 255
    acbe:	03 c0       	rjmp	.+6      	; 0xacc6 <dir_read+0x11e>
    acc0:	4f 3f       	cpi	r20, 0xFF	; 255
    acc2:	5f 4f       	sbci	r21, 0xFF	; 255
    acc4:	31 f5       	brne	.+76     	; 0xad12 <dir_read+0x16a>
    acc6:	4c e5       	ldi	r20, 0x5C	; 92
    acc8:	64 16       	cp	r6, r20
    acca:	43 e0       	ldi	r20, 0x03	; 3
    accc:	74 06       	cpc	r7, r20
    acce:	e9 f6       	brne	.-70     	; 0xac8a <dir_read+0xe2>
    acd0:	4c 91       	ld	r20, X
    acd2:	46 ff       	sbrs	r20, 6
    acd4:	2e c0       	rjmp	.+92     	; 0xad32 <dir_read+0x18a>
    acd6:	89 2b       	or	r24, r25
    acd8:	61 f1       	breq	.+88     	; 0xad32 <dir_read+0x18a>
    acda:	2f 3f       	cpi	r18, 0xFF	; 255
    acdc:	31 05       	cpc	r19, r1
    acde:	09 f0       	breq	.+2      	; 0xace2 <dir_read+0x13a>
    ace0:	c0 f4       	brcc	.+48     	; 0xad12 <dir_read+0x16a>
    ace2:	22 0f       	add	r18, r18
    ace4:	33 1f       	adc	r19, r19
    ace6:	fb 01       	movw	r30, r22
    ace8:	e2 0f       	add	r30, r18
    acea:	f3 1f       	adc	r31, r19
    acec:	11 82       	std	Z+1, r1	; 0x01
    acee:	10 82       	st	Z, r1
    acf0:	20 c0       	rjmp	.+64     	; 0xad32 <dir_read+0x18a>
    acf2:	11 11       	cpse	r17, r1
    acf4:	05 c0       	rjmp	.+10     	; 0xad00 <dir_read+0x158>
    acf6:	cd 01       	movw	r24, r26
    acf8:	0e 94 e3 49 	call	0x93c6	; 0x93c6 <sum_sfn>
    acfc:	d8 16       	cp	r13, r24
    acfe:	f9 f0       	breq	.+62     	; 0xad3e <dir_read+0x196>
    ad00:	8f ef       	ldi	r24, 0xFF	; 255
    ad02:	9f ef       	ldi	r25, 0xFF	; 255
    ad04:	dc 01       	movw	r26, r24
    ad06:	88 a7       	std	Y+40, r24	; 0x28
    ad08:	99 a7       	std	Y+41, r25	; 0x29
    ad0a:	aa a7       	std	Y+42, r26	; 0x2a
    ad0c:	bb a7       	std	Y+43, r27	; 0x2b
    ad0e:	17 c0       	rjmp	.+46     	; 0xad3e <dir_read+0x196>
    ad10:	d8 2e       	mov	r13, r24
    ad12:	1f ef       	ldi	r17, 0xFF	; 255
    ad14:	60 e0       	ldi	r22, 0x00	; 0
    ad16:	70 e0       	ldi	r23, 0x00	; 0
    ad18:	ce 01       	movw	r24, r28
    ad1a:	24 de       	rcall	.-952    	; 0xa964 <dir_next>
    ad1c:	00 97       	sbiw	r24, 0x00	; 0
    ad1e:	09 f4       	brne	.+2      	; 0xad22 <dir_read+0x17a>
    ad20:	54 cf       	rjmp	.-344    	; 0xabca <dir_read+0x22>
    ad22:	02 c0       	rjmp	.+4      	; 0xad28 <dir_read+0x180>
    ad24:	00 97       	sbiw	r24, 0x00	; 0
    ad26:	59 f0       	breq	.+22     	; 0xad3e <dir_read+0x196>
    ad28:	1e 8a       	std	Y+22, r1	; 0x16
    ad2a:	1f 8a       	std	Y+23, r1	; 0x17
    ad2c:	18 8e       	std	Y+24, r1	; 0x18
    ad2e:	19 8e       	std	Y+25, r1	; 0x19
    ad30:	08 c0       	rjmp	.+16     	; 0xad42 <dir_read+0x19a>
    ad32:	1f ef       	ldi	r17, 0xFF	; 255
    ad34:	10 0f       	add	r17, r16
    ad36:	ee cf       	rjmp	.-36     	; 0xad14 <dir_read+0x16c>
    ad38:	84 e0       	ldi	r24, 0x04	; 4
    ad3a:	90 e0       	ldi	r25, 0x00	; 0
    ad3c:	f5 cf       	rjmp	.-22     	; 0xad28 <dir_read+0x180>
    ad3e:	80 e0       	ldi	r24, 0x00	; 0
    ad40:	90 e0       	ldi	r25, 0x00	; 0
    ad42:	cd b7       	in	r28, 0x3d	; 61
    ad44:	de b7       	in	r29, 0x3e	; 62
    ad46:	ee e0       	ldi	r30, 0x0E	; 14
    ad48:	0c 94 49 e4 	jmp	0x1c892	; 0x1c892 <__epilogue_restores__+0x8>

0000ad4c <dir_remove>:
    ad4c:	a0 e0       	ldi	r26, 0x00	; 0
    ad4e:	b0 e0       	ldi	r27, 0x00	; 0
    ad50:	ec ea       	ldi	r30, 0xAC	; 172
    ad52:	f6 e5       	ldi	r31, 0x56	; 86
    ad54:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
    ad58:	ec 01       	movw	r28, r24
    ad5a:	08 81       	ld	r16, Y
    ad5c:	19 81       	ldd	r17, Y+1	; 0x01
    ad5e:	ce 84       	ldd	r12, Y+14	; 0x0e
    ad60:	df 84       	ldd	r13, Y+15	; 0x0f
    ad62:	e8 88       	ldd	r14, Y+16	; 0x10
    ad64:	f9 88       	ldd	r15, Y+17	; 0x11
    ad66:	48 a5       	ldd	r20, Y+40	; 0x28
    ad68:	59 a5       	ldd	r21, Y+41	; 0x29
    ad6a:	6a a5       	ldd	r22, Y+42	; 0x2a
    ad6c:	7b a5       	ldd	r23, Y+43	; 0x2b
    ad6e:	4f 3f       	cpi	r20, 0xFF	; 255
    ad70:	8f ef       	ldi	r24, 0xFF	; 255
    ad72:	58 07       	cpc	r21, r24
    ad74:	68 07       	cpc	r22, r24
    ad76:	78 07       	cpc	r23, r24
    ad78:	29 f4       	brne	.+10     	; 0xad84 <dir_remove+0x38>
    ad7a:	85 ee       	ldi	r24, 0xE5	; 229
    ad7c:	b8 2e       	mov	r11, r24
    ad7e:	aa 24       	eor	r10, r10
    ad80:	a3 94       	inc	r10
    ad82:	19 c0       	rjmp	.+50     	; 0xadb6 <dir_remove+0x6a>
    ad84:	ce 01       	movw	r24, r28
    ad86:	76 db       	rcall	.-2324   	; 0xa474 <dir_sdi>
    ad88:	00 97       	sbiw	r24, 0x00	; 0
    ad8a:	19 f5       	brne	.+70     	; 0xadd2 <dir_remove+0x86>
    ad8c:	f6 cf       	rjmp	.-20     	; 0xad7a <dir_remove+0x2e>
    ad8e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    ad90:	fb 8d       	ldd	r31, Y+27	; 0x1b
    ad92:	b0 82       	st	Z, r11
    ad94:	f8 01       	movw	r30, r16
    ad96:	a3 82       	std	Z+3, r10	; 0x03
    ad98:	4e 85       	ldd	r20, Y+14	; 0x0e
    ad9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    ad9c:	68 89       	ldd	r22, Y+16	; 0x10
    ad9e:	79 89       	ldd	r23, Y+17	; 0x11
    ada0:	4c 15       	cp	r20, r12
    ada2:	5d 05       	cpc	r21, r13
    ada4:	6e 05       	cpc	r22, r14
    ada6:	7f 05       	cpc	r23, r15
    ada8:	a0 f4       	brcc	.+40     	; 0xadd2 <dir_remove+0x86>
    adaa:	60 e0       	ldi	r22, 0x00	; 0
    adac:	70 e0       	ldi	r23, 0x00	; 0
    adae:	ce 01       	movw	r24, r28
    adb0:	d9 dd       	rcall	.-1102   	; 0xa964 <dir_next>
    adb2:	00 97       	sbiw	r24, 0x00	; 0
    adb4:	49 f4       	brne	.+18     	; 0xadc8 <dir_remove+0x7c>
    adb6:	4e 89       	ldd	r20, Y+22	; 0x16
    adb8:	5f 89       	ldd	r21, Y+23	; 0x17
    adba:	68 8d       	ldd	r22, Y+24	; 0x18
    adbc:	79 8d       	ldd	r23, Y+25	; 0x19
    adbe:	c8 01       	movw	r24, r16
    adc0:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    adc4:	00 97       	sbiw	r24, 0x00	; 0
    adc6:	19 f3       	breq	.-58     	; 0xad8e <dir_remove+0x42>
    adc8:	84 30       	cpi	r24, 0x04	; 4
    adca:	91 05       	cpc	r25, r1
    adcc:	11 f4       	brne	.+4      	; 0xadd2 <dir_remove+0x86>
    adce:	82 e0       	ldi	r24, 0x02	; 2
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	cd b7       	in	r28, 0x3d	; 61
    add4:	de b7       	in	r29, 0x3e	; 62
    add6:	ea e0       	ldi	r30, 0x0A	; 10
    add8:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0000addc <dir_find>:
    addc:	ac e0       	ldi	r26, 0x0C	; 12
    adde:	b0 e0       	ldi	r27, 0x00	; 0
    ade0:	e4 ef       	ldi	r30, 0xF4	; 244
    ade2:	f6 e5       	ldi	r31, 0x56	; 86
    ade4:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    ade8:	9c 87       	std	Y+12, r25	; 0x0c
    adea:	8b 87       	std	Y+11, r24	; 0x0b
    adec:	fc 01       	movw	r30, r24
    adee:	01 90       	ld	r0, Z+
    adf0:	f0 81       	ld	r31, Z
    adf2:	e0 2d       	mov	r30, r0
    adf4:	fc 83       	std	Y+4, r31	; 0x04
    adf6:	eb 83       	std	Y+3, r30	; 0x03
    adf8:	40 e0       	ldi	r20, 0x00	; 0
    adfa:	50 e0       	ldi	r21, 0x00	; 0
    adfc:	ba 01       	movw	r22, r20
    adfe:	3a db       	rcall	.-2444   	; 0xa474 <dir_sdi>
    ae00:	00 97       	sbiw	r24, 0x00	; 0
    ae02:	09 f0       	breq	.+2      	; 0xae06 <dir_find+0x2a>
    ae04:	e7 c0       	rjmp	.+462    	; 0xafd4 <dir_find+0x1f8>
    ae06:	8f ef       	ldi	r24, 0xFF	; 255
    ae08:	9f ef       	ldi	r25, 0xFF	; 255
    ae0a:	dc 01       	movw	r26, r24
    ae0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae0e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae10:	80 a7       	std	Z+40, r24	; 0x28
    ae12:	91 a7       	std	Z+41, r25	; 0x29
    ae14:	a2 a7       	std	Z+42, r26	; 0x2a
    ae16:	b3 a7       	std	Z+43, r27	; 0x2b
    ae18:	0f ef       	ldi	r16, 0xFF	; 255
    ae1a:	1f ef       	ldi	r17, 0xFF	; 255
    ae1c:	44 24       	eor	r4, r4
    ae1e:	4a 94       	dec	r4
    ae20:	54 2c       	mov	r5, r4
    ae22:	32 01       	movw	r6, r4
    ae24:	7c 96       	adiw	r30, 0x1c	; 28
    ae26:	fa 87       	std	Y+10, r31	; 0x0a
    ae28:	e9 87       	std	Y+9, r30	; 0x09
    ae2a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae2c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae2e:	46 89       	ldd	r20, Z+22	; 0x16
    ae30:	57 89       	ldd	r21, Z+23	; 0x17
    ae32:	60 8d       	ldd	r22, Z+24	; 0x18
    ae34:	71 8d       	ldd	r23, Z+25	; 0x19
    ae36:	8b 81       	ldd	r24, Y+3	; 0x03
    ae38:	9c 81       	ldd	r25, Y+4	; 0x04
    ae3a:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    ae3e:	00 97       	sbiw	r24, 0x00	; 0
    ae40:	09 f0       	breq	.+2      	; 0xae44 <dir_find+0x68>
    ae42:	c8 c0       	rjmp	.+400    	; 0xafd4 <dir_find+0x1f8>
    ae44:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae46:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae48:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ae4a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ae4c:	f7 01       	movw	r30, r14
    ae4e:	d0 80       	ld	r13, Z
    ae50:	dd 20       	and	r13, r13
    ae52:	09 f4       	brne	.+2      	; 0xae56 <dir_find+0x7a>
    ae54:	c1 c0       	rjmp	.+386    	; 0xafd8 <dir_find+0x1fc>
    ae56:	93 85       	ldd	r25, Z+11	; 0x0b
    ae58:	89 2f       	mov	r24, r25
    ae5a:	8f 73       	andi	r24, 0x3F	; 63
    ae5c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae5e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae60:	84 83       	std	Z+4, r24	; 0x04
    ae62:	f5 ee       	ldi	r31, 0xE5	; 229
    ae64:	df 16       	cp	r13, r31
    ae66:	09 f4       	brne	.+2      	; 0xae6a <dir_find+0x8e>
    ae68:	a6 c0       	rjmp	.+332    	; 0xafb6 <dir_find+0x1da>
    ae6a:	93 ff       	sbrs	r25, 3
    ae6c:	04 c0       	rjmp	.+8      	; 0xae76 <dir_find+0x9a>
    ae6e:	8f 30       	cpi	r24, 0x0F	; 15
    ae70:	09 f0       	breq	.+2      	; 0xae74 <dir_find+0x98>
    ae72:	a1 c0       	rjmp	.+322    	; 0xafb6 <dir_find+0x1da>
    ae74:	03 c0       	rjmp	.+6      	; 0xae7c <dir_find+0xa0>
    ae76:	8f 30       	cpi	r24, 0x0F	; 15
    ae78:	09 f0       	breq	.+2      	; 0xae7c <dir_find+0xa0>
    ae7a:	88 c0       	rjmp	.+272    	; 0xaf8c <dir_find+0x1b0>
    ae7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae80:	87 a1       	ldd	r24, Z+39	; 0x27
    ae82:	86 fd       	sbrc	r24, 6
    ae84:	9f c0       	rjmp	.+318    	; 0xafc4 <dir_find+0x1e8>
    ae86:	d6 fe       	sbrs	r13, 6
    ae88:	10 c0       	rjmp	.+32     	; 0xaeaa <dir_find+0xce>
    ae8a:	f7 01       	movw	r30, r14
    ae8c:	05 85       	ldd	r16, Z+13	; 0x0d
    ae8e:	fd 2d       	mov	r31, r13
    ae90:	ff 7b       	andi	r31, 0xBF	; 191
    ae92:	df 2e       	mov	r13, r31
    ae94:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae96:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae98:	86 85       	ldd	r24, Z+14	; 0x0e
    ae9a:	97 85       	ldd	r25, Z+15	; 0x0f
    ae9c:	a0 89       	ldd	r26, Z+16	; 0x10
    ae9e:	b1 89       	ldd	r27, Z+17	; 0x11
    aea0:	80 a7       	std	Z+40, r24	; 0x28
    aea2:	91 a7       	std	Z+41, r25	; 0x29
    aea4:	a2 a7       	std	Z+42, r26	; 0x2a
    aea6:	b3 a7       	std	Z+43, r27	; 0x2b
    aea8:	02 c0       	rjmp	.+4      	; 0xaeae <dir_find+0xd2>
    aeaa:	1d 11       	cpse	r17, r13
    aeac:	8a c0       	rjmp	.+276    	; 0xafc2 <dir_find+0x1e6>
    aeae:	f7 01       	movw	r30, r14
    aeb0:	c5 84       	ldd	r12, Z+13	; 0x0d
    aeb2:	c0 12       	cpse	r12, r16
    aeb4:	86 c0       	rjmp	.+268    	; 0xafc2 <dir_find+0x1e6>
    aeb6:	82 8d       	ldd	r24, Z+26	; 0x1a
    aeb8:	93 8d       	ldd	r25, Z+27	; 0x1b
    aeba:	89 2b       	or	r24, r25
    aebc:	09 f0       	breq	.+2      	; 0xaec0 <dir_find+0xe4>
    aebe:	91 c0       	rjmp	.+290    	; 0xafe2 <dir_find+0x206>
    aec0:	eb 81       	ldd	r30, Y+3	; 0x03
    aec2:	fc 81       	ldd	r31, Y+4	; 0x04
    aec4:	03 84       	ldd	r0, Z+11	; 0x0b
    aec6:	f4 85       	ldd	r31, Z+12	; 0x0c
    aec8:	e0 2d       	mov	r30, r0
    aeca:	fe 83       	std	Y+6, r31	; 0x06
    aecc:	ed 83       	std	Y+5, r30	; 0x05
    aece:	f7 01       	movw	r30, r14
    aed0:	80 81       	ld	r24, Z
    aed2:	8f 73       	andi	r24, 0x3F	; 63
    aed4:	90 e0       	ldi	r25, 0x00	; 0
    aed6:	01 97       	sbiw	r24, 0x01	; 1
    aed8:	fd e0       	ldi	r31, 0x0D	; 13
    aeda:	f8 9f       	mul	r31, r24
    aedc:	80 01       	movw	r16, r0
    aede:	f9 9f       	mul	r31, r25
    aee0:	10 0d       	add	r17, r0
    aee2:	11 24       	eor	r1, r1
    aee4:	2f e4       	ldi	r18, 0x4F	; 79
    aee6:	33 e0       	ldi	r19, 0x03	; 3
    aee8:	3a 83       	std	Y+2, r19	; 0x02
    aeea:	29 83       	std	Y+1, r18	; 0x01
    aeec:	81 e0       	ldi	r24, 0x01	; 1
    aeee:	90 e0       	ldi	r25, 0x00	; 0
    aef0:	e9 81       	ldd	r30, Y+1	; 0x01
    aef2:	fa 81       	ldd	r31, Y+2	; 0x02
    aef4:	21 91       	ld	r18, Z+
    aef6:	fa 83       	std	Y+2, r31	; 0x02
    aef8:	e9 83       	std	Y+1, r30	; 0x01
    aefa:	f7 01       	movw	r30, r14
    aefc:	e2 0f       	add	r30, r18
    aefe:	f1 1d       	adc	r31, r1
    af00:	20 80       	ld	r2, Z
    af02:	31 80       	ldd	r3, Z+1	; 0x01
    af04:	00 97       	sbiw	r24, 0x00	; 0
    af06:	39 f1       	breq	.+78     	; 0xaf56 <dir_find+0x17a>
    af08:	0f 3f       	cpi	r16, 0xFF	; 255
    af0a:	11 05       	cpc	r17, r1
    af0c:	11 f0       	breq	.+4      	; 0xaf12 <dir_find+0x136>
    af0e:	08 f0       	brcs	.+2      	; 0xaf12 <dir_find+0x136>
    af10:	68 c0       	rjmp	.+208    	; 0xafe2 <dir_find+0x206>
    af12:	b1 01       	movw	r22, r2
    af14:	80 e0       	ldi	r24, 0x00	; 0
    af16:	90 e0       	ldi	r25, 0x00	; 0
    af18:	0e 94 d7 6b 	call	0xd7ae	; 0xd7ae <ff_wtoupper>
    af1c:	4b 01       	movw	r8, r22
    af1e:	5c 01       	movw	r10, r24
    af20:	98 01       	movw	r18, r16
    af22:	2f 5f       	subi	r18, 0xFF	; 255
    af24:	3f 4f       	sbci	r19, 0xFF	; 255
    af26:	38 87       	std	Y+8, r19	; 0x08
    af28:	2f 83       	std	Y+7, r18	; 0x07
    af2a:	00 0f       	add	r16, r16
    af2c:	11 1f       	adc	r17, r17
    af2e:	ed 81       	ldd	r30, Y+5	; 0x05
    af30:	fe 81       	ldd	r31, Y+6	; 0x06
    af32:	e0 0f       	add	r30, r16
    af34:	f1 1f       	adc	r31, r17
    af36:	60 81       	ld	r22, Z
    af38:	71 81       	ldd	r23, Z+1	; 0x01
    af3a:	80 e0       	ldi	r24, 0x00	; 0
    af3c:	90 e0       	ldi	r25, 0x00	; 0
    af3e:	0e 94 d7 6b 	call	0xd7ae	; 0xd7ae <ff_wtoupper>
    af42:	86 16       	cp	r8, r22
    af44:	97 06       	cpc	r9, r23
    af46:	a8 06       	cpc	r10, r24
    af48:	b9 06       	cpc	r11, r25
    af4a:	09 f0       	breq	.+2      	; 0xaf4e <dir_find+0x172>
    af4c:	4a c0       	rjmp	.+148    	; 0xafe2 <dir_find+0x206>
    af4e:	c1 01       	movw	r24, r2
    af50:	0f 81       	ldd	r16, Y+7	; 0x07
    af52:	18 85       	ldd	r17, Y+8	; 0x08
    af54:	05 c0       	rjmp	.+10     	; 0xaf60 <dir_find+0x184>
    af56:	3f ef       	ldi	r19, 0xFF	; 255
    af58:	23 16       	cp	r2, r19
    af5a:	33 06       	cpc	r3, r19
    af5c:	09 f0       	breq	.+2      	; 0xaf60 <dir_find+0x184>
    af5e:	41 c0       	rjmp	.+130    	; 0xafe2 <dir_find+0x206>
    af60:	e9 81       	ldd	r30, Y+1	; 0x01
    af62:	fa 81       	ldd	r31, Y+2	; 0x02
    af64:	ec 55       	subi	r30, 0x5C	; 92
    af66:	f3 40       	sbci	r31, 0x03	; 3
    af68:	19 f6       	brne	.-122    	; 0xaef0 <dir_find+0x114>
    af6a:	f7 01       	movw	r30, r14
    af6c:	20 81       	ld	r18, Z
    af6e:	26 ff       	sbrs	r18, 6
    af70:	3a c0       	rjmp	.+116    	; 0xafe6 <dir_find+0x20a>
    af72:	89 2b       	or	r24, r25
    af74:	c1 f1       	breq	.+112    	; 0xafe6 <dir_find+0x20a>
    af76:	00 0f       	add	r16, r16
    af78:	11 1f       	adc	r17, r17
    af7a:	ed 81       	ldd	r30, Y+5	; 0x05
    af7c:	fe 81       	ldd	r31, Y+6	; 0x06
    af7e:	e0 0f       	add	r30, r16
    af80:	f1 1f       	adc	r31, r17
    af82:	80 81       	ld	r24, Z
    af84:	91 81       	ldd	r25, Z+1	; 0x01
    af86:	89 2b       	or	r24, r25
    af88:	71 f1       	breq	.+92     	; 0xafe6 <dir_find+0x20a>
    af8a:	2b c0       	rjmp	.+86     	; 0xafe2 <dir_find+0x206>
    af8c:	11 11       	cpse	r17, r1
    af8e:	05 c0       	rjmp	.+10     	; 0xaf9a <dir_find+0x1be>
    af90:	c7 01       	movw	r24, r14
    af92:	0e 94 e3 49 	call	0x93c6	; 0x93c6 <sum_sfn>
    af96:	08 17       	cp	r16, r24
    af98:	09 f1       	breq	.+66     	; 0xafdc <dir_find+0x200>
    af9a:	eb 85       	ldd	r30, Y+11	; 0x0b
    af9c:	fc 85       	ldd	r31, Y+12	; 0x0c
    af9e:	87 a1       	ldd	r24, Z+39	; 0x27
    afa0:	80 fd       	sbrc	r24, 0
    afa2:	09 c0       	rjmp	.+18     	; 0xafb6 <dir_find+0x1da>
    afa4:	4b e0       	ldi	r20, 0x0B	; 11
    afa6:	50 e0       	ldi	r21, 0x00	; 0
    afa8:	69 85       	ldd	r22, Y+9	; 0x09
    afaa:	7a 85       	ldd	r23, Y+10	; 0x0a
    afac:	c7 01       	movw	r24, r14
    afae:	0e 94 ea 48 	call	0x91d4	; 0x91d4 <mem_cmp>
    afb2:	89 2b       	or	r24, r25
    afb4:	99 f0       	breq	.+38     	; 0xafdc <dir_find+0x200>
    afb6:	eb 85       	ldd	r30, Y+11	; 0x0b
    afb8:	fc 85       	ldd	r31, Y+12	; 0x0c
    afba:	40 a6       	std	Z+40, r4	; 0x28
    afbc:	51 a6       	std	Z+41, r5	; 0x29
    afbe:	62 a6       	std	Z+42, r6	; 0x2a
    afc0:	73 a6       	std	Z+43, r7	; 0x2b
    afc2:	1f ef       	ldi	r17, 0xFF	; 255
    afc4:	60 e0       	ldi	r22, 0x00	; 0
    afc6:	70 e0       	ldi	r23, 0x00	; 0
    afc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    afca:	9c 85       	ldd	r25, Y+12	; 0x0c
    afcc:	cb dc       	rcall	.-1642   	; 0xa964 <dir_next>
    afce:	00 97       	sbiw	r24, 0x00	; 0
    afd0:	09 f4       	brne	.+2      	; 0xafd4 <dir_find+0x1f8>
    afd2:	2b cf       	rjmp	.-426    	; 0xae2a <dir_find+0x4e>
    afd4:	28 2f       	mov	r18, r24
    afd6:	0b c0       	rjmp	.+22     	; 0xafee <dir_find+0x212>
    afd8:	24 e0       	ldi	r18, 0x04	; 4
    afda:	01 c0       	rjmp	.+2      	; 0xafde <dir_find+0x202>
    afdc:	20 e0       	ldi	r18, 0x00	; 0
    afde:	90 e0       	ldi	r25, 0x00	; 0
    afe0:	06 c0       	rjmp	.+12     	; 0xafee <dir_find+0x212>
    afe2:	0c 2d       	mov	r16, r12
    afe4:	ee cf       	rjmp	.-36     	; 0xafc2 <dir_find+0x1e6>
    afe6:	1f ef       	ldi	r17, 0xFF	; 255
    afe8:	1d 0d       	add	r17, r13
    afea:	0c 2d       	mov	r16, r12
    afec:	eb cf       	rjmp	.-42     	; 0xafc4 <dir_find+0x1e8>
    afee:	82 2f       	mov	r24, r18
    aff0:	2c 96       	adiw	r28, 0x0c	; 12
    aff2:	e2 e1       	ldi	r30, 0x12	; 18
    aff4:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000aff8 <dir_register>:
    aff8:	a6 e1       	ldi	r26, 0x16	; 22
    affa:	b0 e0       	ldi	r27, 0x00	; 0
    affc:	e2 e0       	ldi	r30, 0x02	; 2
    affe:	f8 e5       	ldi	r31, 0x58	; 88
    b000:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    b004:	dc 01       	movw	r26, r24
    b006:	97 96       	adiw	r26, 0x27	; 39
    b008:	2c 91       	ld	r18, X
    b00a:	97 97       	sbiw	r26, 0x27	; 39
    b00c:	20 7a       	andi	r18, 0xA0	; 160
    b00e:	09 f0       	breq	.+2      	; 0xb012 <dir_register+0x1a>
    b010:	61 c1       	rjmp	.+706    	; 0xb2d4 <dir_register+0x2dc>
    b012:	cd 90       	ld	r12, X+
    b014:	dc 90       	ld	r13, X
    b016:	d6 01       	movw	r26, r12
    b018:	1b 96       	adiw	r26, 0x0b	; 11
    b01a:	ed 91       	ld	r30, X+
    b01c:	fc 91       	ld	r31, X
    b01e:	1c 97       	sbiw	r26, 0x0c	; 12
    b020:	81 2c       	mov	r8, r1
    b022:	91 2c       	mov	r9, r1
    b024:	21 91       	ld	r18, Z+
    b026:	31 91       	ld	r19, Z+
    b028:	23 2b       	or	r18, r19
    b02a:	21 f0       	breq	.+8      	; 0xb034 <dir_register+0x3c>
    b02c:	bf ef       	ldi	r27, 0xFF	; 255
    b02e:	8b 1a       	sub	r8, r27
    b030:	9b 0a       	sbc	r9, r27
    b032:	f8 cf       	rjmp	.-16     	; 0xb024 <dir_register+0x2c>
    b034:	8c 01       	movw	r16, r24
    b036:	5c 01       	movw	r10, r24
    b038:	ec e1       	ldi	r30, 0x1C	; 28
    b03a:	ae 0e       	add	r10, r30
    b03c:	b1 1c       	adc	r11, r1
    b03e:	4c e0       	ldi	r20, 0x0C	; 12
    b040:	50 e0       	ldi	r21, 0x00	; 0
    b042:	b5 01       	movw	r22, r10
    b044:	ce 01       	movw	r24, r28
    b046:	01 96       	adiw	r24, 0x01	; 1
    b048:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    b04c:	8c 85       	ldd	r24, Y+12	; 0x0c
    b04e:	80 ff       	sbrs	r24, 0
    b050:	96 c0       	rjmp	.+300    	; 0xb17e <dir_register+0x186>
    b052:	80 e4       	ldi	r24, 0x40	; 64
    b054:	d8 01       	movw	r26, r16
    b056:	97 96       	adiw	r26, 0x27	; 39
    b058:	8c 93       	st	X, r24
    b05a:	41 2c       	mov	r4, r1
    b05c:	51 2c       	mov	r5, r1
    b05e:	32 01       	movw	r6, r4
    b060:	43 94       	inc	r4
    b062:	72 01       	movw	r14, r4
    b064:	f6 01       	movw	r30, r12
    b066:	23 84       	ldd	r2, Z+11	; 0x0b
    b068:	34 84       	ldd	r3, Z+12	; 0x0c
    b06a:	4b e0       	ldi	r20, 0x0B	; 11
    b06c:	50 e0       	ldi	r21, 0x00	; 0
    b06e:	be 01       	movw	r22, r28
    b070:	6f 5f       	subi	r22, 0xFF	; 255
    b072:	7f 4f       	sbci	r23, 0xFF	; 255
    b074:	c5 01       	movw	r24, r10
    b076:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    b07a:	f6 e0       	ldi	r31, 0x06	; 6
    b07c:	4f 16       	cp	r4, r31
    b07e:	51 04       	cpc	r5, r1
    b080:	18 f1       	brcs	.+70     	; 0xb0c8 <dir_register+0xd0>
    b082:	f1 01       	movw	r30, r2
    b084:	b3 01       	movw	r22, r6
    b086:	a2 01       	movw	r20, r4
    b088:	81 91       	ld	r24, Z+
    b08a:	91 91       	ld	r25, Z+
    b08c:	00 97       	sbiw	r24, 0x00	; 0
    b08e:	d9 f0       	breq	.+54     	; 0xb0c6 <dir_register+0xce>
    b090:	20 e1       	ldi	r18, 0x10	; 16
    b092:	30 e0       	ldi	r19, 0x00	; 0
    b094:	44 0f       	add	r20, r20
    b096:	55 1f       	adc	r21, r21
    b098:	66 1f       	adc	r22, r22
    b09a:	77 1f       	adc	r23, r23
    b09c:	dc 01       	movw	r26, r24
    b09e:	a1 70       	andi	r26, 0x01	; 1
    b0a0:	bb 27       	eor	r27, r27
    b0a2:	4a 0f       	add	r20, r26
    b0a4:	5b 1f       	adc	r21, r27
    b0a6:	61 1d       	adc	r22, r1
    b0a8:	71 1d       	adc	r23, r1
    b0aa:	96 95       	lsr	r25
    b0ac:	87 95       	ror	r24
    b0ae:	60 ff       	sbrs	r22, 0
    b0b0:	06 c0       	rjmp	.+12     	; 0xb0be <dir_register+0xc6>
    b0b2:	a1 e2       	ldi	r26, 0x21	; 33
    b0b4:	4a 27       	eor	r20, r26
    b0b6:	a0 e1       	ldi	r26, 0x10	; 16
    b0b8:	5a 27       	eor	r21, r26
    b0ba:	a1 e0       	ldi	r26, 0x01	; 1
    b0bc:	6a 27       	eor	r22, r26
    b0be:	21 50       	subi	r18, 0x01	; 1
    b0c0:	31 09       	sbc	r19, r1
    b0c2:	41 f7       	brne	.-48     	; 0xb094 <dir_register+0x9c>
    b0c4:	e1 cf       	rjmp	.-62     	; 0xb088 <dir_register+0x90>
    b0c6:	7a 01       	movw	r14, r20
    b0c8:	fe 01       	movw	r30, r28
    b0ca:	75 96       	adiw	r30, 0x15	; 21
    b0cc:	27 e0       	ldi	r18, 0x07	; 7
    b0ce:	30 e0       	ldi	r19, 0x00	; 0
    b0d0:	9e 2d       	mov	r25, r14
    b0d2:	9f 70       	andi	r25, 0x0F	; 15
    b0d4:	80 e3       	ldi	r24, 0x30	; 48
    b0d6:	89 0f       	add	r24, r25
    b0d8:	8a 33       	cpi	r24, 0x3A	; 58
    b0da:	10 f0       	brcs	.+4      	; 0xb0e0 <dir_register+0xe8>
    b0dc:	87 e3       	ldi	r24, 0x37	; 55
    b0de:	89 0f       	add	r24, r25
    b0e0:	21 50       	subi	r18, 0x01	; 1
    b0e2:	31 09       	sbc	r19, r1
    b0e4:	82 93       	st	-Z, r24
    b0e6:	a4 e0       	ldi	r26, 0x04	; 4
    b0e8:	f6 94       	lsr	r15
    b0ea:	e7 94       	ror	r14
    b0ec:	aa 95       	dec	r26
    b0ee:	e1 f7       	brne	.-8      	; 0xb0e8 <dir_register+0xf0>
    b0f0:	e1 14       	cp	r14, r1
    b0f2:	f1 04       	cpc	r15, r1
    b0f4:	69 f7       	brne	.-38     	; 0xb0d0 <dir_register+0xd8>
    b0f6:	ed e0       	ldi	r30, 0x0D	; 13
    b0f8:	f0 e0       	ldi	r31, 0x00	; 0
    b0fa:	ec 0f       	add	r30, r28
    b0fc:	fd 1f       	adc	r31, r29
    b0fe:	e2 0f       	add	r30, r18
    b100:	f3 1f       	adc	r31, r19
    b102:	be e7       	ldi	r27, 0x7E	; 126
    b104:	b0 83       	st	Z, r27
    b106:	f5 01       	movw	r30, r10
    b108:	80 e0       	ldi	r24, 0x00	; 0
    b10a:	90 e0       	ldi	r25, 0x00	; 0
    b10c:	28 17       	cp	r18, r24
    b10e:	39 07       	cpc	r19, r25
    b110:	29 f0       	breq	.+10     	; 0xb11c <dir_register+0x124>
    b112:	41 91       	ld	r20, Z+
    b114:	40 32       	cpi	r20, 0x20	; 32
    b116:	11 f0       	breq	.+4      	; 0xb11c <dir_register+0x124>
    b118:	01 96       	adiw	r24, 0x01	; 1
    b11a:	f8 cf       	rjmp	.-16     	; 0xb10c <dir_register+0x114>
    b11c:	f5 01       	movw	r30, r10
    b11e:	e8 0f       	add	r30, r24
    b120:	f9 1f       	adc	r31, r25
    b122:	28 30       	cpi	r18, 0x08	; 8
    b124:	31 05       	cpc	r19, r1
    b126:	50 f4       	brcc	.+20     	; 0xb13c <dir_register+0x144>
    b128:	ad e0       	ldi	r26, 0x0D	; 13
    b12a:	b0 e0       	ldi	r27, 0x00	; 0
    b12c:	ac 0f       	add	r26, r28
    b12e:	bd 1f       	adc	r27, r29
    b130:	a2 0f       	add	r26, r18
    b132:	b3 1f       	adc	r27, r19
    b134:	8c 91       	ld	r24, X
    b136:	2f 5f       	subi	r18, 0xFF	; 255
    b138:	3f 4f       	sbci	r19, 0xFF	; 255
    b13a:	01 c0       	rjmp	.+2      	; 0xb13e <dir_register+0x146>
    b13c:	80 e2       	ldi	r24, 0x20	; 32
    b13e:	81 93       	st	Z+, r24
    b140:	cf 01       	movw	r24, r30
    b142:	8a 19       	sub	r24, r10
    b144:	9b 09       	sbc	r25, r11
    b146:	08 97       	sbiw	r24, 0x08	; 8
    b148:	60 f3       	brcs	.-40     	; 0xb122 <dir_register+0x12a>
    b14a:	c8 01       	movw	r24, r16
    b14c:	47 de       	rcall	.-882    	; 0xaddc <dir_find>
    b14e:	00 97       	sbiw	r24, 0x00	; 0
    b150:	71 f4       	brne	.+28     	; 0xb16e <dir_register+0x176>
    b152:	ef ef       	ldi	r30, 0xFF	; 255
    b154:	4e 1a       	sub	r4, r30
    b156:	5e 0a       	sbc	r5, r30
    b158:	6e 0a       	sbc	r6, r30
    b15a:	7e 0a       	sbc	r7, r30
    b15c:	f4 e6       	ldi	r31, 0x64	; 100
    b15e:	4f 16       	cp	r4, r31
    b160:	51 04       	cpc	r5, r1
    b162:	61 04       	cpc	r6, r1
    b164:	71 04       	cpc	r7, r1
    b166:	09 f0       	breq	.+2      	; 0xb16a <dir_register+0x172>
    b168:	7c cf       	rjmp	.-264    	; 0xb062 <dir_register+0x6a>
    b16a:	27 e0       	ldi	r18, 0x07	; 7
    b16c:	b4 c0       	rjmp	.+360    	; 0xb2d6 <dir_register+0x2de>
    b16e:	84 30       	cpi	r24, 0x04	; 4
    b170:	91 05       	cpc	r25, r1
    b172:	09 f0       	breq	.+2      	; 0xb176 <dir_register+0x17e>
    b174:	df c0       	rjmp	.+446    	; 0xb334 <dir_register+0x33c>
    b176:	8c 85       	ldd	r24, Y+12	; 0x0c
    b178:	d8 01       	movw	r26, r16
    b17a:	97 96       	adiw	r26, 0x27	; 39
    b17c:	8c 93       	st	X, r24
    b17e:	8c 85       	ldd	r24, Y+12	; 0x0c
    b180:	81 ff       	sbrs	r24, 1
    b182:	0b c0       	rjmp	.+22     	; 0xb19a <dir_register+0x1a2>
    b184:	c4 01       	movw	r24, r8
    b186:	0c 96       	adiw	r24, 0x0c	; 12
    b188:	6d e0       	ldi	r22, 0x0D	; 13
    b18a:	70 e0       	ldi	r23, 0x00	; 0
    b18c:	0e 94 80 e3 	call	0x1c700	; 0x1c700 <__udivmodhi4>
    b190:	7b 01       	movw	r14, r22
    b192:	bf ef       	ldi	r27, 0xFF	; 255
    b194:	eb 1a       	sub	r14, r27
    b196:	fb 0a       	sbc	r15, r27
    b198:	03 c0       	rjmp	.+6      	; 0xb1a0 <dir_register+0x1a8>
    b19a:	ee 24       	eor	r14, r14
    b19c:	e3 94       	inc	r14
    b19e:	f1 2c       	mov	r15, r1
    b1a0:	b7 01       	movw	r22, r14
    b1a2:	c8 01       	movw	r24, r16
    b1a4:	c7 dc       	rcall	.-1650   	; 0xab34 <dir_alloc>
    b1a6:	00 97       	sbiw	r24, 0x00	; 0
    b1a8:	09 f0       	breq	.+2      	; 0xb1ac <dir_register+0x1b4>
    b1aa:	c4 c0       	rjmp	.+392    	; 0xb334 <dir_register+0x33c>
    b1ac:	e1 e0       	ldi	r30, 0x01	; 1
    b1ae:	ee 1a       	sub	r14, r30
    b1b0:	f1 08       	sbc	r15, r1
    b1b2:	09 f4       	brne	.+2      	; 0xb1b6 <dir_register+0x1be>
    b1b4:	92 c0       	rjmp	.+292    	; 0xb2da <dir_register+0x2e2>
    b1b6:	d8 01       	movw	r26, r16
    b1b8:	1e 96       	adiw	r26, 0x0e	; 14
    b1ba:	4d 91       	ld	r20, X+
    b1bc:	5d 91       	ld	r21, X+
    b1be:	6d 91       	ld	r22, X+
    b1c0:	7c 91       	ld	r23, X
    b1c2:	51 97       	sbiw	r26, 0x11	; 17
    b1c4:	c7 01       	movw	r24, r14
    b1c6:	e5 e0       	ldi	r30, 0x05	; 5
    b1c8:	88 0f       	add	r24, r24
    b1ca:	99 1f       	adc	r25, r25
    b1cc:	ea 95       	dec	r30
    b1ce:	e1 f7       	brne	.-8      	; 0xb1c8 <dir_register+0x1d0>
    b1d0:	48 1b       	sub	r20, r24
    b1d2:	59 0b       	sbc	r21, r25
    b1d4:	61 09       	sbc	r22, r1
    b1d6:	71 09       	sbc	r23, r1
    b1d8:	c8 01       	movw	r24, r16
    b1da:	4c d9       	rcall	.-3432   	; 0xa474 <dir_sdi>
    b1dc:	00 97       	sbiw	r24, 0x00	; 0
    b1de:	09 f0       	breq	.+2      	; 0xb1e2 <dir_register+0x1ea>
    b1e0:	a9 c0       	rjmp	.+338    	; 0xb334 <dir_register+0x33c>
    b1e2:	c5 01       	movw	r24, r10
    b1e4:	0e 94 e3 49 	call	0x93c6	; 0x93c6 <sum_sfn>
    b1e8:	68 2e       	mov	r6, r24
    b1ea:	5f e0       	ldi	r21, 0x0F	; 15
    b1ec:	35 2e       	mov	r3, r21
    b1ee:	6d e0       	ldi	r22, 0x0D	; 13
    b1f0:	46 2e       	mov	r4, r22
    b1f2:	7c e5       	ldi	r23, 0x5C	; 92
    b1f4:	87 2e       	mov	r8, r23
    b1f6:	73 e0       	ldi	r23, 0x03	; 3
    b1f8:	97 2e       	mov	r9, r23
    b1fa:	55 24       	eor	r5, r5
    b1fc:	53 94       	inc	r5
    b1fe:	f8 01       	movw	r30, r16
    b200:	46 89       	ldd	r20, Z+22	; 0x16
    b202:	57 89       	ldd	r21, Z+23	; 0x17
    b204:	60 8d       	ldd	r22, Z+24	; 0x18
    b206:	71 8d       	ldd	r23, Z+25	; 0x19
    b208:	c6 01       	movw	r24, r12
    b20a:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    b20e:	00 97       	sbiw	r24, 0x00	; 0
    b210:	09 f0       	breq	.+2      	; 0xb214 <dir_register+0x21c>
    b212:	90 c0       	rjmp	.+288    	; 0xb334 <dir_register+0x33c>
    b214:	7e 2c       	mov	r7, r14
    b216:	d8 01       	movw	r26, r16
    b218:	5a 96       	adiw	r26, 0x1a	; 26
    b21a:	ed 91       	ld	r30, X+
    b21c:	fc 91       	ld	r31, X
    b21e:	5b 97       	sbiw	r26, 0x1b	; 27
    b220:	d6 01       	movw	r26, r12
    b222:	1b 96       	adiw	r26, 0x0b	; 11
    b224:	6d 91       	ld	r22, X+
    b226:	7c 91       	ld	r23, X
    b228:	1c 97       	sbiw	r26, 0x0c	; 12
    b22a:	65 86       	std	Z+13, r6	; 0x0d
    b22c:	33 86       	std	Z+11, r3	; 0x0b
    b22e:	14 86       	std	Z+12, r1	; 0x0c
    b230:	12 8e       	std	Z+26, r1	; 0x1a
    b232:	13 8e       	std	Z+27, r1	; 0x1b
    b234:	97 01       	movw	r18, r14
    b236:	33 27       	eor	r19, r19
    b238:	21 50       	subi	r18, 0x01	; 1
    b23a:	31 09       	sbc	r19, r1
    b23c:	42 9e       	mul	r4, r18
    b23e:	c0 01       	movw	r24, r0
    b240:	43 9e       	mul	r4, r19
    b242:	90 0d       	add	r25, r0
    b244:	11 24       	eor	r1, r1
    b246:	2f e4       	ldi	r18, 0x4F	; 79
    b248:	33 e0       	ldi	r19, 0x03	; 3
    b24a:	3e 8b       	std	Y+22, r19	; 0x16
    b24c:	2d 8b       	std	Y+21, r18	; 0x15
    b24e:	20 e0       	ldi	r18, 0x00	; 0
    b250:	30 e0       	ldi	r19, 0x00	; 0
    b252:	2f 3f       	cpi	r18, 0xFF	; 255
    b254:	4f ef       	ldi	r20, 0xFF	; 255
    b256:	34 07       	cpc	r19, r20
    b258:	49 f0       	breq	.+18     	; 0xb26c <dir_register+0x274>
    b25a:	9c 01       	movw	r18, r24
    b25c:	22 0f       	add	r18, r18
    b25e:	33 1f       	adc	r19, r19
    b260:	26 0f       	add	r18, r22
    b262:	37 1f       	adc	r19, r23
    b264:	d9 01       	movw	r26, r18
    b266:	2d 91       	ld	r18, X+
    b268:	3c 91       	ld	r19, X
    b26a:	01 96       	adiw	r24, 0x01	; 1
    b26c:	ad 89       	ldd	r26, Y+21	; 0x15
    b26e:	be 89       	ldd	r27, Y+22	; 0x16
    b270:	4d 91       	ld	r20, X+
    b272:	be 8b       	std	Y+22, r27	; 0x16
    b274:	ad 8b       	std	Y+21, r26	; 0x15
    b276:	df 01       	movw	r26, r30
    b278:	a4 0f       	add	r26, r20
    b27a:	b1 1d       	adc	r27, r1
    b27c:	2c 93       	st	X, r18
    b27e:	11 96       	adiw	r26, 0x01	; 1
    b280:	3c 93       	st	X, r19
    b282:	21 15       	cp	r18, r1
    b284:	31 05       	cpc	r19, r1
    b286:	11 f4       	brne	.+4      	; 0xb28c <dir_register+0x294>
    b288:	2f ef       	ldi	r18, 0xFF	; 255
    b28a:	3f ef       	ldi	r19, 0xFF	; 255
    b28c:	4d 89       	ldd	r20, Y+21	; 0x15
    b28e:	5e 89       	ldd	r21, Y+22	; 0x16
    b290:	84 16       	cp	r8, r20
    b292:	95 06       	cpc	r9, r21
    b294:	f1 f6       	brne	.-68     	; 0xb252 <dir_register+0x25a>
    b296:	2f 3f       	cpi	r18, 0xFF	; 255
    b298:	3f 4f       	sbci	r19, 0xFF	; 255
    b29a:	49 f0       	breq	.+18     	; 0xb2ae <dir_register+0x2b6>
    b29c:	88 0f       	add	r24, r24
    b29e:	99 1f       	adc	r25, r25
    b2a0:	db 01       	movw	r26, r22
    b2a2:	a8 0f       	add	r26, r24
    b2a4:	b9 1f       	adc	r27, r25
    b2a6:	8d 91       	ld	r24, X+
    b2a8:	9c 91       	ld	r25, X
    b2aa:	89 2b       	or	r24, r25
    b2ac:	19 f4       	brne	.+6      	; 0xb2b4 <dir_register+0x2bc>
    b2ae:	87 2d       	mov	r24, r7
    b2b0:	80 64       	ori	r24, 0x40	; 64
    b2b2:	78 2e       	mov	r7, r24
    b2b4:	70 82       	st	Z, r7
    b2b6:	d6 01       	movw	r26, r12
    b2b8:	13 96       	adiw	r26, 0x03	; 3
    b2ba:	5c 92       	st	X, r5
    b2bc:	60 e0       	ldi	r22, 0x00	; 0
    b2be:	70 e0       	ldi	r23, 0x00	; 0
    b2c0:	c8 01       	movw	r24, r16
    b2c2:	50 db       	rcall	.-2400   	; 0xa964 <dir_next>
    b2c4:	00 97       	sbiw	r24, 0x00	; 0
    b2c6:	b1 f5       	brne	.+108    	; 0xb334 <dir_register+0x33c>
    b2c8:	b1 e0       	ldi	r27, 0x01	; 1
    b2ca:	eb 1a       	sub	r14, r27
    b2cc:	f1 08       	sbc	r15, r1
    b2ce:	09 f0       	breq	.+2      	; 0xb2d2 <dir_register+0x2da>
    b2d0:	96 cf       	rjmp	.-212    	; 0xb1fe <dir_register+0x206>
    b2d2:	03 c0       	rjmp	.+6      	; 0xb2da <dir_register+0x2e2>
    b2d4:	26 e0       	ldi	r18, 0x06	; 6
    b2d6:	90 e0       	ldi	r25, 0x00	; 0
    b2d8:	2e c0       	rjmp	.+92     	; 0xb336 <dir_register+0x33e>
    b2da:	d8 01       	movw	r26, r16
    b2dc:	56 96       	adiw	r26, 0x16	; 22
    b2de:	4d 91       	ld	r20, X+
    b2e0:	5d 91       	ld	r21, X+
    b2e2:	6d 91       	ld	r22, X+
    b2e4:	7c 91       	ld	r23, X
    b2e6:	59 97       	sbiw	r26, 0x19	; 25
    b2e8:	c6 01       	movw	r24, r12
    b2ea:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    b2ee:	00 97       	sbiw	r24, 0x00	; 0
    b2f0:	09 f5       	brne	.+66     	; 0xb334 <dir_register+0x33c>
    b2f2:	40 e2       	ldi	r20, 0x20	; 32
    b2f4:	50 e0       	ldi	r21, 0x00	; 0
    b2f6:	60 e0       	ldi	r22, 0x00	; 0
    b2f8:	70 e0       	ldi	r23, 0x00	; 0
    b2fa:	f8 01       	movw	r30, r16
    b2fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    b2fe:	93 8d       	ldd	r25, Z+27	; 0x1b
    b300:	0e 94 e1 48 	call	0x91c2	; 0x91c2 <mem_set>
    b304:	4b e0       	ldi	r20, 0x0B	; 11
    b306:	50 e0       	ldi	r21, 0x00	; 0
    b308:	b5 01       	movw	r22, r10
    b30a:	d8 01       	movw	r26, r16
    b30c:	5a 96       	adiw	r26, 0x1a	; 26
    b30e:	8d 91       	ld	r24, X+
    b310:	9c 91       	ld	r25, X
    b312:	5b 97       	sbiw	r26, 0x1b	; 27
    b314:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    b318:	d8 01       	movw	r26, r16
    b31a:	5a 96       	adiw	r26, 0x1a	; 26
    b31c:	ed 91       	ld	r30, X+
    b31e:	fc 91       	ld	r31, X
    b320:	5b 97       	sbiw	r26, 0x1b	; 27
    b322:	97 96       	adiw	r26, 0x27	; 39
    b324:	8c 91       	ld	r24, X
    b326:	88 71       	andi	r24, 0x18	; 24
    b328:	84 87       	std	Z+12, r24	; 0x0c
    b32a:	81 e0       	ldi	r24, 0x01	; 1
    b32c:	f6 01       	movw	r30, r12
    b32e:	83 83       	std	Z+3, r24	; 0x03
    b330:	20 e0       	ldi	r18, 0x00	; 0
    b332:	d1 cf       	rjmp	.-94     	; 0xb2d6 <dir_register+0x2de>
    b334:	28 2f       	mov	r18, r24
    b336:	82 2f       	mov	r24, r18
    b338:	66 96       	adiw	r28, 0x16	; 22
    b33a:	e2 e1       	ldi	r30, 0x12	; 18
    b33c:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000b340 <follow_path>:
    b340:	aa e0       	ldi	r26, 0x0A	; 10
    b342:	b0 e0       	ldi	r27, 0x00	; 0
    b344:	e6 ea       	ldi	r30, 0xA6	; 166
    b346:	f9 e5       	ldi	r31, 0x59	; 89
    b348:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    b34c:	7c 01       	movw	r14, r24
    b34e:	3b 01       	movw	r6, r22
    b350:	dc 01       	movw	r26, r24
    b352:	0d 90       	ld	r0, X+
    b354:	bc 91       	ld	r27, X
    b356:	a0 2d       	mov	r26, r0
    b358:	be 83       	std	Y+6, r27	; 0x06
    b35a:	ad 83       	std	Y+5, r26	; 0x05
    b35c:	fb 01       	movw	r30, r22
    b35e:	80 81       	ld	r24, Z
    b360:	8f 32       	cpi	r24, 0x2F	; 47
    b362:	11 f0       	breq	.+4      	; 0xb368 <follow_path+0x28>
    b364:	8c 35       	cpi	r24, 0x5C	; 92
    b366:	11 f4       	brne	.+4      	; 0xb36c <follow_path+0x2c>
    b368:	93 01       	movw	r18, r6
    b36a:	0c c0       	rjmp	.+24     	; 0xb384 <follow_path+0x44>
    b36c:	ed 81       	ldd	r30, Y+5	; 0x05
    b36e:	fe 81       	ldd	r31, Y+6	; 0x06
    b370:	85 89       	ldd	r24, Z+21	; 0x15
    b372:	96 89       	ldd	r25, Z+22	; 0x16
    b374:	a7 89       	ldd	r26, Z+23	; 0x17
    b376:	b0 8d       	ldd	r27, Z+24	; 0x18
    b378:	f7 01       	movw	r30, r14
    b37a:	86 83       	std	Z+6, r24	; 0x06
    b37c:	97 83       	std	Z+7, r25	; 0x07
    b37e:	a0 87       	std	Z+8, r26	; 0x08
    b380:	b1 87       	std	Z+9, r27	; 0x09
    b382:	0e c0       	rjmp	.+28     	; 0xb3a0 <follow_path+0x60>
    b384:	39 01       	movw	r6, r18
    b386:	d9 01       	movw	r26, r18
    b388:	8c 91       	ld	r24, X
    b38a:	2f 5f       	subi	r18, 0xFF	; 255
    b38c:	3f 4f       	sbci	r19, 0xFF	; 255
    b38e:	8f 32       	cpi	r24, 0x2F	; 47
    b390:	c9 f3       	breq	.-14     	; 0xb384 <follow_path+0x44>
    b392:	8c 35       	cpi	r24, 0x5C	; 92
    b394:	b9 f3       	breq	.-18     	; 0xb384 <follow_path+0x44>
    b396:	f7 01       	movw	r30, r14
    b398:	16 82       	std	Z+6, r1	; 0x06
    b39a:	17 82       	std	Z+7, r1	; 0x07
    b39c:	10 86       	std	Z+8, r1	; 0x08
    b39e:	11 86       	std	Z+9, r1	; 0x09
    b3a0:	d3 01       	movw	r26, r6
    b3a2:	8c 91       	ld	r24, X
    b3a4:	80 32       	cpi	r24, 0x20	; 32
    b3a6:	58 f0       	brcs	.+22     	; 0xb3be <follow_path+0x7e>
    b3a8:	f7 01       	movw	r30, r14
    b3aa:	7c 96       	adiw	r30, 0x1c	; 28
    b3ac:	f8 87       	std	Y+8, r31	; 0x08
    b3ae:	ef 83       	std	Y+7, r30	; 0x07
    b3b0:	2d 81       	ldd	r18, Y+5	; 0x05
    b3b2:	3e 81       	ldd	r19, Y+6	; 0x06
    b3b4:	2b 5c       	subi	r18, 0xCB	; 203
    b3b6:	3f 4f       	sbci	r19, 0xFF	; 255
    b3b8:	3a 87       	std	Y+10, r19	; 0x0a
    b3ba:	29 87       	std	Y+9, r18	; 0x09
    b3bc:	98 c0       	rjmp	.+304    	; 0xb4ee <follow_path+0x1ae>
    b3be:	80 e8       	ldi	r24, 0x80	; 128
    b3c0:	d7 01       	movw	r26, r14
    b3c2:	97 96       	adiw	r26, 0x27	; 39
    b3c4:	8c 93       	st	X, r24
    b3c6:	40 e0       	ldi	r20, 0x00	; 0
    b3c8:	50 e0       	ldi	r21, 0x00	; 0
    b3ca:	ba 01       	movw	r22, r20
    b3cc:	c7 01       	movw	r24, r14
    b3ce:	52 d8       	rcall	.-3932   	; 0xa474 <dir_sdi>
    b3d0:	e9 c1       	rjmp	.+978    	; 0xb7a4 <follow_path+0x464>
    b3d2:	6c 35       	cpi	r22, 0x5C	; 92
    b3d4:	71 05       	cpc	r23, r1
    b3d6:	b9 f1       	breq	.+110    	; 0xb446 <follow_path+0x106>
    b3d8:	60 38       	cpi	r22, 0x80	; 128
    b3da:	71 05       	cpc	r23, r1
    b3dc:	28 f4       	brcc	.+10     	; 0xb3e8 <follow_path+0xa8>
    b3de:	e6 ef       	ldi	r30, 0xF6	; 246
    b3e0:	f7 e0       	ldi	r31, 0x07	; 7
    b3e2:	41 91       	ld	r20, Z+
    b3e4:	41 11       	cpse	r20, r1
    b3e6:	8d c0       	rjmp	.+282    	; 0xb502 <follow_path+0x1c2>
    b3e8:	0f 3f       	cpi	r16, 0xFF	; 255
    b3ea:	11 05       	cpc	r17, r1
    b3ec:	08 f0       	brcs	.+2      	; 0xb3f0 <follow_path+0xb0>
    b3ee:	bc c1       	rjmp	.+888    	; 0xb768 <follow_path+0x428>
    b3f0:	f8 01       	movw	r30, r16
    b3f2:	ee 0f       	add	r30, r30
    b3f4:	ff 1f       	adc	r31, r31
    b3f6:	ea 0d       	add	r30, r10
    b3f8:	fb 1d       	adc	r31, r11
    b3fa:	71 83       	std	Z+1, r23	; 0x01
    b3fc:	60 83       	st	Z, r22
    b3fe:	0f 5f       	subi	r16, 0xFF	; 255
    b400:	1f 4f       	sbci	r17, 0xFF	; 255
    b402:	ce 01       	movw	r24, r28
    b404:	01 96       	adiw	r24, 0x01	; 1
    b406:	0e 94 f9 48 	call	0x91f2	; 0x91f2 <tchar2uni>
    b40a:	6f 3f       	cpi	r22, 0xFF	; 255
    b40c:	bf ef       	ldi	r27, 0xFF	; 255
    b40e:	7b 07       	cpc	r23, r27
    b410:	8b 07       	cpc	r24, r27
    b412:	9b 07       	cpc	r25, r27
    b414:	09 f4       	brne	.+2      	; 0xb418 <follow_path+0xd8>
    b416:	a8 c1       	rjmp	.+848    	; 0xb768 <follow_path+0x428>
    b418:	61 15       	cp	r22, r1
    b41a:	71 05       	cpc	r23, r1
    b41c:	e1 e0       	ldi	r30, 0x01	; 1
    b41e:	8e 07       	cpc	r24, r30
    b420:	91 05       	cpc	r25, r1
    b422:	48 f0       	brcs	.+18     	; 0xb436 <follow_path+0xf6>
    b424:	f8 01       	movw	r30, r16
    b426:	ee 0f       	add	r30, r30
    b428:	ff 1f       	adc	r31, r31
    b42a:	ea 0d       	add	r30, r10
    b42c:	fb 1d       	adc	r31, r11
    b42e:	91 83       	std	Z+1, r25	; 0x01
    b430:	80 83       	st	Z, r24
    b432:	0f 5f       	subi	r16, 0xFF	; 255
    b434:	1f 4f       	sbci	r17, 0xFF	; 255
    b436:	9b 01       	movw	r18, r22
    b438:	60 32       	cpi	r22, 0x20	; 32
    b43a:	71 05       	cpc	r23, r1
    b43c:	08 f4       	brcc	.+2      	; 0xb440 <follow_path+0x100>
    b43e:	6b c0       	rjmp	.+214    	; 0xb516 <follow_path+0x1d6>
    b440:	6f 32       	cpi	r22, 0x2F	; 47
    b442:	71 05       	cpc	r23, r1
    b444:	31 f6       	brne	.-116    	; 0xb3d2 <follow_path+0x92>
    b446:	e9 81       	ldd	r30, Y+1	; 0x01
    b448:	fa 81       	ldd	r31, Y+2	; 0x02
    b44a:	80 81       	ld	r24, Z
    b44c:	8f 32       	cpi	r24, 0x2F	; 47
    b44e:	09 f4       	brne	.+2      	; 0xb452 <follow_path+0x112>
    b450:	5e c0       	rjmp	.+188    	; 0xb50e <follow_path+0x1ce>
    b452:	8c 35       	cpi	r24, 0x5C	; 92
    b454:	09 f4       	brne	.+2      	; 0xb458 <follow_path+0x118>
    b456:	5b c0       	rjmp	.+182    	; 0xb50e <follow_path+0x1ce>
    b458:	1b 82       	std	Y+3, r1	; 0x03
    b45a:	69 80       	ldd	r6, Y+1	; 0x01
    b45c:	7a 80       	ldd	r7, Y+2	; 0x02
    b45e:	f8 01       	movw	r30, r16
    b460:	ee 0f       	add	r30, r30
    b462:	ff 1f       	adc	r31, r31
    b464:	01 30       	cpi	r16, 0x01	; 1
    b466:	11 05       	cpc	r17, r1
    b468:	09 f0       	breq	.+2      	; 0xb46c <follow_path+0x12c>
    b46a:	58 c0       	rjmp	.+176    	; 0xb51c <follow_path+0x1dc>
    b46c:	d5 01       	movw	r26, r10
    b46e:	8d 91       	ld	r24, X+
    b470:	9c 91       	ld	r25, X
    b472:	8e 97       	sbiw	r24, 0x2e	; 46
    b474:	09 f0       	breq	.+2      	; 0xb478 <follow_path+0x138>
    b476:	5d c0       	rjmp	.+186    	; 0xb532 <follow_path+0x1f2>
    b478:	ea 0d       	add	r30, r10
    b47a:	fb 1d       	adc	r31, r11
    b47c:	11 82       	std	Z+1, r1	; 0x01
    b47e:	10 82       	st	Z, r1
    b480:	f7 01       	movw	r30, r14
    b482:	7c 96       	adiw	r30, 0x1c	; 28
    b484:	80 e0       	ldi	r24, 0x00	; 0
    b486:	90 e0       	ldi	r25, 0x00	; 0
    b488:	80 17       	cp	r24, r16
    b48a:	91 07       	cpc	r25, r17
    b48c:	08 f0       	brcs	.+2      	; 0xb490 <follow_path+0x150>
    b48e:	54 c0       	rjmp	.+168    	; 0xb538 <follow_path+0x1f8>
    b490:	2e e2       	ldi	r18, 0x2E	; 46
    b492:	21 93       	st	Z+, r18
    b494:	01 96       	adiw	r24, 0x01	; 1
    b496:	8b 30       	cpi	r24, 0x0B	; 11
    b498:	91 05       	cpc	r25, r1
    b49a:	b1 f7       	brne	.-20     	; 0xb488 <follow_path+0x148>
    b49c:	8b 81       	ldd	r24, Y+3	; 0x03
    b49e:	80 62       	ori	r24, 0x20	; 32
    b4a0:	f7 01       	movw	r30, r14
    b4a2:	87 a3       	std	Z+39, r24	; 0x27
    b4a4:	80 e0       	ldi	r24, 0x00	; 0
    b4a6:	90 e0       	ldi	r25, 0x00	; 0
    b4a8:	00 97       	sbiw	r24, 0x00	; 0
    b4aa:	09 f0       	breq	.+2      	; 0xb4ae <follow_path+0x16e>
    b4ac:	7b c1       	rjmp	.+758    	; 0xb7a4 <follow_path+0x464>
    b4ae:	c7 01       	movw	r24, r14
    b4b0:	95 dc       	rcall	.-1750   	; 0xaddc <dir_find>
    b4b2:	d7 01       	movw	r26, r14
    b4b4:	97 96       	adiw	r26, 0x27	; 39
    b4b6:	2c 91       	ld	r18, X
    b4b8:	97 97       	sbiw	r26, 0x27	; 39
    b4ba:	00 97       	sbiw	r24, 0x00	; 0
    b4bc:	09 f0       	breq	.+2      	; 0xb4c0 <follow_path+0x180>
    b4be:	57 c1       	rjmp	.+686    	; 0xb76e <follow_path+0x42e>
    b4c0:	22 fd       	sbrc	r18, 2
    b4c2:	70 c1       	rjmp	.+736    	; 0xb7a4 <follow_path+0x464>
    b4c4:	f7 01       	movw	r30, r14
    b4c6:	84 81       	ldd	r24, Z+4	; 0x04
    b4c8:	84 ff       	sbrs	r24, 4
    b4ca:	63 c1       	rjmp	.+710    	; 0xb792 <follow_path+0x452>
    b4cc:	66 85       	ldd	r22, Z+14	; 0x0e
    b4ce:	77 85       	ldd	r23, Z+15	; 0x0f
    b4d0:	71 70       	andi	r23, 0x01	; 1
    b4d2:	29 85       	ldd	r18, Y+9	; 0x09
    b4d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    b4d6:	62 0f       	add	r22, r18
    b4d8:	73 1f       	adc	r23, r19
    b4da:	ad 81       	ldd	r26, Y+5	; 0x05
    b4dc:	be 81       	ldd	r27, Y+6	; 0x06
    b4de:	8c 91       	ld	r24, X
    b4e0:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    b4e4:	f7 01       	movw	r30, r14
    b4e6:	66 83       	std	Z+6, r22	; 0x06
    b4e8:	77 83       	std	Z+7, r23	; 0x07
    b4ea:	80 87       	std	Z+8, r24	; 0x08
    b4ec:	91 87       	std	Z+9, r25	; 0x09
    b4ee:	7a 82       	std	Y+2, r7	; 0x02
    b4f0:	69 82       	std	Y+1, r6	; 0x01
    b4f2:	d7 01       	movw	r26, r14
    b4f4:	ed 91       	ld	r30, X+
    b4f6:	fc 91       	ld	r31, X
    b4f8:	a3 84       	ldd	r10, Z+11	; 0x0b
    b4fa:	b4 84       	ldd	r11, Z+12	; 0x0c
    b4fc:	00 e0       	ldi	r16, 0x00	; 0
    b4fe:	10 e0       	ldi	r17, 0x00	; 0
    b500:	80 cf       	rjmp	.-256    	; 0xb402 <follow_path+0xc2>
    b502:	50 e0       	ldi	r21, 0x00	; 0
    b504:	24 17       	cp	r18, r20
    b506:	35 07       	cpc	r19, r21
    b508:	09 f0       	breq	.+2      	; 0xb50c <follow_path+0x1cc>
    b50a:	6b cf       	rjmp	.-298    	; 0xb3e2 <follow_path+0xa2>
    b50c:	2d c1       	rjmp	.+602    	; 0xb768 <follow_path+0x428>
    b50e:	31 96       	adiw	r30, 0x01	; 1
    b510:	fa 83       	std	Y+2, r31	; 0x02
    b512:	e9 83       	std	Y+1, r30	; 0x01
    b514:	98 cf       	rjmp	.-208    	; 0xb446 <follow_path+0x106>
    b516:	f4 e0       	ldi	r31, 0x04	; 4
    b518:	fb 83       	std	Y+3, r31	; 0x03
    b51a:	9f cf       	rjmp	.-194    	; 0xb45a <follow_path+0x11a>
    b51c:	02 30       	cpi	r16, 0x02	; 2
    b51e:	11 05       	cpc	r17, r1
    b520:	41 f4       	brne	.+16     	; 0xb532 <follow_path+0x1f2>
    b522:	d5 01       	movw	r26, r10
    b524:	12 96       	adiw	r26, 0x02	; 2
    b526:	8d 91       	ld	r24, X+
    b528:	9c 91       	ld	r25, X
    b52a:	13 97       	sbiw	r26, 0x03	; 3
    b52c:	8e 97       	sbiw	r24, 0x2e	; 46
    b52e:	09 f4       	brne	.+2      	; 0xb532 <follow_path+0x1f2>
    b530:	9e cf       	rjmp	.-196    	; 0xb46e <follow_path+0x12e>
    b532:	ea 0d       	add	r30, r10
    b534:	fb 1d       	adc	r31, r11
    b536:	09 c0       	rjmp	.+18     	; 0xb54a <follow_path+0x20a>
    b538:	20 e2       	ldi	r18, 0x20	; 32
    b53a:	ab cf       	rjmp	.-170    	; 0xb492 <follow_path+0x152>
    b53c:	92 91       	ld	r25, -Z
    b53e:	82 91       	ld	r24, -Z
    b540:	80 32       	cpi	r24, 0x20	; 32
    b542:	91 05       	cpc	r25, r1
    b544:	31 f4       	brne	.+12     	; 0xb552 <follow_path+0x212>
    b546:	01 50       	subi	r16, 0x01	; 1
    b548:	11 09       	sbc	r17, r1
    b54a:	01 15       	cp	r16, r1
    b54c:	11 05       	cpc	r17, r1
    b54e:	b1 f7       	brne	.-20     	; 0xb53c <follow_path+0x1fc>
    b550:	02 c0       	rjmp	.+4      	; 0xb556 <follow_path+0x216>
    b552:	8e 97       	sbiw	r24, 0x2e	; 46
    b554:	c1 f3       	breq	.-16     	; 0xb546 <follow_path+0x206>
    b556:	f8 01       	movw	r30, r16
    b558:	ee 0f       	add	r30, r30
    b55a:	ff 1f       	adc	r31, r31
    b55c:	ea 0d       	add	r30, r10
    b55e:	fb 1d       	adc	r31, r11
    b560:	11 82       	std	Z+1, r1	; 0x01
    b562:	10 82       	st	Z, r1
    b564:	01 15       	cp	r16, r1
    b566:	11 05       	cpc	r17, r1
    b568:	09 f4       	brne	.+2      	; 0xb56c <follow_path+0x22c>
    b56a:	fe c0       	rjmp	.+508    	; 0xb768 <follow_path+0x428>
    b56c:	d5 01       	movw	r26, r10
    b56e:	41 2c       	mov	r4, r1
    b570:	51 2c       	mov	r5, r1
    b572:	8d 91       	ld	r24, X+
    b574:	9d 91       	ld	r25, X+
    b576:	80 32       	cpi	r24, 0x20	; 32
    b578:	91 05       	cpc	r25, r1
    b57a:	21 f4       	brne	.+8      	; 0xb584 <follow_path+0x244>
    b57c:	2f ef       	ldi	r18, 0xFF	; 255
    b57e:	42 1a       	sub	r4, r18
    b580:	52 0a       	sbc	r5, r18
    b582:	f7 cf       	rjmp	.-18     	; 0xb572 <follow_path+0x232>
    b584:	41 14       	cp	r4, r1
    b586:	51 04       	cpc	r5, r1
    b588:	11 f4       	brne	.+4      	; 0xb58e <follow_path+0x24e>
    b58a:	8e 97       	sbiw	r24, 0x2e	; 46
    b58c:	39 f4       	brne	.+14     	; 0xb59c <follow_path+0x25c>
    b58e:	3b 81       	ldd	r19, Y+3	; 0x03
    b590:	33 60       	ori	r19, 0x03	; 3
    b592:	3b 83       	std	Y+3, r19	; 0x03
    b594:	03 c0       	rjmp	.+6      	; 0xb59c <follow_path+0x25c>
    b596:	01 50       	subi	r16, 0x01	; 1
    b598:	11 09       	sbc	r17, r1
    b59a:	21 f0       	breq	.+8      	; 0xb5a4 <follow_path+0x264>
    b59c:	92 91       	ld	r25, -Z
    b59e:	82 91       	ld	r24, -Z
    b5a0:	8e 97       	sbiw	r24, 0x2e	; 46
    b5a2:	c9 f7       	brne	.-14     	; 0xb596 <follow_path+0x256>
    b5a4:	4b e0       	ldi	r20, 0x0B	; 11
    b5a6:	50 e0       	ldi	r21, 0x00	; 0
    b5a8:	60 e2       	ldi	r22, 0x20	; 32
    b5aa:	70 e0       	ldi	r23, 0x00	; 0
    b5ac:	8f 81       	ldd	r24, Y+7	; 0x07
    b5ae:	98 85       	ldd	r25, Y+8	; 0x08
    b5b0:	0e 94 e1 48 	call	0x91c2	; 0x91c2 <mem_set>
    b5b4:	48 e0       	ldi	r20, 0x08	; 8
    b5b6:	84 2e       	mov	r8, r20
    b5b8:	91 2c       	mov	r9, r1
    b5ba:	c1 2c       	mov	r12, r1
    b5bc:	d1 2c       	mov	r13, r1
    b5be:	1c 82       	std	Y+4, r1	; 0x04
    b5c0:	12 01       	movw	r2, r4
    b5c2:	8f ef       	ldi	r24, 0xFF	; 255
    b5c4:	28 1a       	sub	r2, r24
    b5c6:	38 0a       	sbc	r3, r24
    b5c8:	44 0c       	add	r4, r4
    b5ca:	55 1c       	adc	r5, r5
    b5cc:	f5 01       	movw	r30, r10
    b5ce:	e4 0d       	add	r30, r4
    b5d0:	f5 1d       	adc	r31, r5
    b5d2:	80 81       	ld	r24, Z
    b5d4:	91 81       	ldd	r25, Z+1	; 0x01
    b5d6:	00 97       	sbiw	r24, 0x00	; 0
    b5d8:	09 f4       	brne	.+2      	; 0xb5dc <follow_path+0x29c>
    b5da:	98 c0       	rjmp	.+304    	; 0xb70c <follow_path+0x3cc>
    b5dc:	80 32       	cpi	r24, 0x20	; 32
    b5de:	91 05       	cpc	r25, r1
    b5e0:	31 f0       	breq	.+12     	; 0xb5ee <follow_path+0x2ae>
    b5e2:	8e 32       	cpi	r24, 0x2E	; 46
    b5e4:	91 05       	cpc	r25, r1
    b5e6:	41 f4       	brne	.+16     	; 0xb5f8 <follow_path+0x2b8>
    b5e8:	20 16       	cp	r2, r16
    b5ea:	31 06       	cpc	r3, r17
    b5ec:	61 f0       	breq	.+24     	; 0xb606 <follow_path+0x2c6>
    b5ee:	9b 81       	ldd	r25, Y+3	; 0x03
    b5f0:	93 60       	ori	r25, 0x03	; 3
    b5f2:	9b 83       	std	Y+3, r25	; 0x03
    b5f4:	21 01       	movw	r4, r2
    b5f6:	e4 cf       	rjmp	.-56     	; 0xb5c0 <follow_path+0x280>
    b5f8:	c8 14       	cp	r12, r8
    b5fa:	d9 04       	cpc	r13, r9
    b5fc:	40 f4       	brcc	.+16     	; 0xb60e <follow_path+0x2ce>
    b5fe:	20 16       	cp	r2, r16
    b600:	31 06       	cpc	r3, r17
    b602:	31 f5       	brne	.+76     	; 0xb650 <follow_path+0x310>
    b604:	c9 c0       	rjmp	.+402    	; 0xb798 <follow_path+0x458>
    b606:	c8 14       	cp	r12, r8
    b608:	d9 04       	cpc	r13, r9
    b60a:	08 f4       	brcc	.+2      	; 0xb60e <follow_path+0x2ce>
    b60c:	c5 c0       	rjmp	.+394    	; 0xb798 <follow_path+0x458>
    b60e:	ab e0       	ldi	r26, 0x0B	; 11
    b610:	8a 16       	cp	r8, r26
    b612:	91 04       	cpc	r9, r1
    b614:	39 f4       	brne	.+14     	; 0xb624 <follow_path+0x2e4>
    b616:	bb 81       	ldd	r27, Y+3	; 0x03
    b618:	b3 60       	ori	r27, 0x03	; 3
    b61a:	bb 83       	std	Y+3, r27	; 0x03
    b61c:	2b e0       	ldi	r18, 0x0B	; 11
    b61e:	82 2e       	mov	r8, r18
    b620:	91 2c       	mov	r9, r1
    b622:	74 c0       	rjmp	.+232    	; 0xb70c <follow_path+0x3cc>
    b624:	20 16       	cp	r2, r16
    b626:	31 06       	cpc	r3, r17
    b628:	39 f0       	breq	.+14     	; 0xb638 <follow_path+0x2f8>
    b62a:	eb 81       	ldd	r30, Y+3	; 0x03
    b62c:	e3 60       	ori	r30, 0x03	; 3
    b62e:	eb 83       	std	Y+3, r30	; 0x03
    b630:	02 15       	cp	r16, r2
    b632:	13 05       	cpc	r17, r3
    b634:	08 f4       	brcc	.+2      	; 0xb638 <follow_path+0x2f8>
    b636:	6a c0       	rjmp	.+212    	; 0xb70c <follow_path+0x3cc>
    b638:	fc 81       	ldd	r31, Y+4	; 0x04
    b63a:	ff 0f       	add	r31, r31
    b63c:	ff 0f       	add	r31, r31
    b63e:	fc 83       	std	Y+4, r31	; 0x04
    b640:	18 01       	movw	r2, r16
    b642:	8b e0       	ldi	r24, 0x0B	; 11
    b644:	88 2e       	mov	r8, r24
    b646:	91 2c       	mov	r9, r1
    b648:	98 e0       	ldi	r25, 0x08	; 8
    b64a:	c9 2e       	mov	r12, r25
    b64c:	d1 2c       	mov	r13, r1
    b64e:	d2 cf       	rjmp	.-92     	; 0xb5f4 <follow_path+0x2b4>
    b650:	80 38       	cpi	r24, 0x80	; 128
    b652:	91 05       	cpc	r25, r1
    b654:	78 f1       	brcs	.+94     	; 0xb6b4 <follow_path+0x374>
    b656:	2b 81       	ldd	r18, Y+3	; 0x03
    b658:	22 60       	ori	r18, 0x02	; 2
    b65a:	52 2e       	mov	r5, r18
    b65c:	bc 01       	movw	r22, r24
    b65e:	80 e0       	ldi	r24, 0x00	; 0
    b660:	90 e0       	ldi	r25, 0x00	; 0
    b662:	45 eb       	ldi	r20, 0xB5	; 181
    b664:	51 e0       	ldi	r21, 0x01	; 1
    b666:	0e 94 8f 6b 	call	0xd71e	; 0xd71e <ff_uni2oem>
    b66a:	87 ff       	sbrs	r24, 7
    b66c:	08 c0       	rjmp	.+16     	; 0xb67e <follow_path+0x33e>
    b66e:	8f 77       	andi	r24, 0x7F	; 127
    b670:	99 27       	eor	r25, r25
    b672:	fc 01       	movw	r30, r24
    b674:	e1 53       	subi	r30, 0x31	; 49
    b676:	fd 4f       	sbci	r31, 0xFD	; 253
    b678:	80 81       	ld	r24, Z
    b67a:	90 e0       	ldi	r25, 0x00	; 0
    b67c:	18 c0       	rjmp	.+48     	; 0xb6ae <follow_path+0x36e>
    b67e:	8f 3f       	cpi	r24, 0xFF	; 255
    b680:	91 05       	cpc	r25, r1
    b682:	a9 f0       	breq	.+42     	; 0xb6ae <follow_path+0x36e>
    b684:	a0 f0       	brcs	.+40     	; 0xb6ae <follow_path+0x36e>
    b686:	94 01       	movw	r18, r8
    b688:	21 50       	subi	r18, 0x01	; 1
    b68a:	31 09       	sbc	r19, r1
    b68c:	c2 16       	cp	r12, r18
    b68e:	d3 06       	cpc	r13, r19
    b690:	28 f0       	brcs	.+10     	; 0xb69c <follow_path+0x35c>
    b692:	3b 81       	ldd	r19, Y+3	; 0x03
    b694:	33 60       	ori	r19, 0x03	; 3
    b696:	3b 83       	std	Y+3, r19	; 0x03
    b698:	64 01       	movw	r12, r8
    b69a:	ac cf       	rjmp	.-168    	; 0xb5f4 <follow_path+0x2b4>
    b69c:	f7 01       	movw	r30, r14
    b69e:	ec 0d       	add	r30, r12
    b6a0:	fd 1d       	adc	r31, r13
    b6a2:	94 8f       	std	Z+28, r25	; 0x1c
    b6a4:	d6 01       	movw	r26, r12
    b6a6:	11 96       	adiw	r26, 0x01	; 1
    b6a8:	6d 01       	movw	r12, r26
    b6aa:	5b 82       	std	Y+3, r5	; 0x03
    b6ac:	26 c0       	rjmp	.+76     	; 0xb6fa <follow_path+0x3ba>
    b6ae:	00 97       	sbiw	r24, 0x00	; 0
    b6b0:	59 f0       	breq	.+22     	; 0xb6c8 <follow_path+0x388>
    b6b2:	5b 82       	std	Y+3, r5	; 0x03
    b6b4:	ef ef       	ldi	r30, 0xFF	; 255
    b6b6:	f7 e0       	ldi	r31, 0x07	; 7
    b6b8:	21 91       	ld	r18, Z+
    b6ba:	22 23       	and	r18, r18
    b6bc:	59 f0       	breq	.+22     	; 0xb6d4 <follow_path+0x394>
    b6be:	30 e0       	ldi	r19, 0x00	; 0
    b6c0:	82 17       	cp	r24, r18
    b6c2:	93 07       	cpc	r25, r19
    b6c4:	c9 f7       	brne	.-14     	; 0xb6b8 <follow_path+0x378>
    b6c6:	5b 80       	ldd	r5, Y+3	; 0x03
    b6c8:	b5 2d       	mov	r27, r5
    b6ca:	b3 60       	ori	r27, 0x03	; 3
    b6cc:	bb 83       	std	Y+3, r27	; 0x03
    b6ce:	8f e5       	ldi	r24, 0x5F	; 95
    b6d0:	90 e0       	ldi	r25, 0x00	; 0
    b6d2:	13 c0       	rjmp	.+38     	; 0xb6fa <follow_path+0x3ba>
    b6d4:	9c 01       	movw	r18, r24
    b6d6:	21 54       	subi	r18, 0x41	; 65
    b6d8:	31 09       	sbc	r19, r1
    b6da:	2a 31       	cpi	r18, 0x1A	; 26
    b6dc:	31 05       	cpc	r19, r1
    b6de:	18 f4       	brcc	.+6      	; 0xb6e6 <follow_path+0x3a6>
    b6e0:	ec 81       	ldd	r30, Y+4	; 0x04
    b6e2:	e2 60       	ori	r30, 0x02	; 2
    b6e4:	ec 83       	std	Y+4, r30	; 0x04
    b6e6:	9c 01       	movw	r18, r24
    b6e8:	21 56       	subi	r18, 0x61	; 97
    b6ea:	31 09       	sbc	r19, r1
    b6ec:	2a 31       	cpi	r18, 0x1A	; 26
    b6ee:	31 05       	cpc	r19, r1
    b6f0:	20 f4       	brcc	.+8      	; 0xb6fa <follow_path+0x3ba>
    b6f2:	fc 81       	ldd	r31, Y+4	; 0x04
    b6f4:	f1 60       	ori	r31, 0x01	; 1
    b6f6:	fc 83       	std	Y+4, r31	; 0x04
    b6f8:	80 97       	sbiw	r24, 0x20	; 32
    b6fa:	f7 01       	movw	r30, r14
    b6fc:	ec 0d       	add	r30, r12
    b6fe:	fd 1d       	adc	r31, r13
    b700:	84 8f       	std	Z+28, r24	; 0x1c
    b702:	96 01       	movw	r18, r12
    b704:	2f 5f       	subi	r18, 0xFF	; 255
    b706:	3f 4f       	sbci	r19, 0xFF	; 255
    b708:	69 01       	movw	r12, r18
    b70a:	74 cf       	rjmp	.-280    	; 0xb5f4 <follow_path+0x2b4>
    b70c:	d7 01       	movw	r26, r14
    b70e:	5c 96       	adiw	r26, 0x1c	; 28
    b710:	8c 91       	ld	r24, X
    b712:	5c 97       	sbiw	r26, 0x1c	; 28
    b714:	85 3e       	cpi	r24, 0xE5	; 229
    b716:	19 f4       	brne	.+6      	; 0xb71e <follow_path+0x3de>
    b718:	e5 e0       	ldi	r30, 0x05	; 5
    b71a:	5c 96       	adiw	r26, 0x1c	; 28
    b71c:	ec 93       	st	X, r30
    b71e:	f8 e0       	ldi	r31, 0x08	; 8
    b720:	8f 16       	cp	r8, r31
    b722:	91 04       	cpc	r9, r1
    b724:	21 f4       	brne	.+8      	; 0xb72e <follow_path+0x3ee>
    b726:	2c 81       	ldd	r18, Y+4	; 0x04
    b728:	22 0f       	add	r18, r18
    b72a:	22 0f       	add	r18, r18
    b72c:	2c 83       	std	Y+4, r18	; 0x04
    b72e:	8c 81       	ldd	r24, Y+4	; 0x04
    b730:	8c 70       	andi	r24, 0x0C	; 12
    b732:	8c 30       	cpi	r24, 0x0C	; 12
    b734:	21 f0       	breq	.+8      	; 0xb73e <follow_path+0x3fe>
    b736:	8c 81       	ldd	r24, Y+4	; 0x04
    b738:	83 70       	andi	r24, 0x03	; 3
    b73a:	83 30       	cpi	r24, 0x03	; 3
    b73c:	19 f4       	brne	.+6      	; 0xb744 <follow_path+0x404>
    b73e:	3b 81       	ldd	r19, Y+3	; 0x03
    b740:	32 60       	ori	r19, 0x02	; 2
    b742:	3b 83       	std	Y+3, r19	; 0x03
    b744:	8b 81       	ldd	r24, Y+3	; 0x03
    b746:	81 fd       	sbrc	r24, 1
    b748:	0b c0       	rjmp	.+22     	; 0xb760 <follow_path+0x420>
    b74a:	9c 81       	ldd	r25, Y+4	; 0x04
    b74c:	90 ff       	sbrs	r25, 0
    b74e:	02 c0       	rjmp	.+4      	; 0xb754 <follow_path+0x414>
    b750:	80 61       	ori	r24, 0x10	; 16
    b752:	8b 83       	std	Y+3, r24	; 0x03
    b754:	ac 81       	ldd	r26, Y+4	; 0x04
    b756:	a2 ff       	sbrs	r26, 2
    b758:	03 c0       	rjmp	.+6      	; 0xb760 <follow_path+0x420>
    b75a:	bb 81       	ldd	r27, Y+3	; 0x03
    b75c:	b8 60       	ori	r27, 0x08	; 8
    b75e:	bb 83       	std	Y+3, r27	; 0x03
    b760:	2b 81       	ldd	r18, Y+3	; 0x03
    b762:	f7 01       	movw	r30, r14
    b764:	27 a3       	std	Z+39, r18	; 0x27
    b766:	9e ce       	rjmp	.-708    	; 0xb4a4 <follow_path+0x164>
    b768:	86 e0       	ldi	r24, 0x06	; 6
    b76a:	90 e0       	ldi	r25, 0x00	; 0
    b76c:	9d ce       	rjmp	.-710    	; 0xb4a8 <follow_path+0x168>
    b76e:	84 30       	cpi	r24, 0x04	; 4
    b770:	91 05       	cpc	r25, r1
    b772:	c1 f4       	brne	.+48     	; 0xb7a4 <follow_path+0x464>
    b774:	32 2f       	mov	r19, r18
    b776:	34 70       	andi	r19, 0x04	; 4
    b778:	25 ff       	sbrs	r18, 5
    b77a:	09 c0       	rjmp	.+18     	; 0xb78e <follow_path+0x44e>
    b77c:	33 23       	and	r19, r19
    b77e:	09 f4       	brne	.+2      	; 0xb782 <follow_path+0x442>
    b780:	b6 ce       	rjmp	.-660    	; 0xb4ee <follow_path+0x1ae>
    b782:	80 e8       	ldi	r24, 0x80	; 128
    b784:	97 96       	adiw	r26, 0x27	; 39
    b786:	8c 93       	st	X, r24
    b788:	80 e0       	ldi	r24, 0x00	; 0
    b78a:	90 e0       	ldi	r25, 0x00	; 0
    b78c:	0b c0       	rjmp	.+22     	; 0xb7a4 <follow_path+0x464>
    b78e:	31 11       	cpse	r19, r1
    b790:	09 c0       	rjmp	.+18     	; 0xb7a4 <follow_path+0x464>
    b792:	85 e0       	ldi	r24, 0x05	; 5
    b794:	90 e0       	ldi	r25, 0x00	; 0
    b796:	06 c0       	rjmp	.+12     	; 0xb7a4 <follow_path+0x464>
    b798:	fb e0       	ldi	r31, 0x0B	; 11
    b79a:	8f 16       	cp	r8, r31
    b79c:	91 04       	cpc	r9, r1
    b79e:	09 f0       	breq	.+2      	; 0xb7a2 <follow_path+0x462>
    b7a0:	4b cf       	rjmp	.-362    	; 0xb638 <follow_path+0x2f8>
    b7a2:	39 cf       	rjmp	.-398    	; 0xb616 <follow_path+0x2d6>
    b7a4:	2a 96       	adiw	r28, 0x0a	; 10
    b7a6:	e2 e1       	ldi	r30, 0x12	; 18
    b7a8:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000b7ac <f_mount>:
    b7ac:	a6 e0       	ldi	r26, 0x06	; 6
    b7ae:	b0 e0       	ldi	r27, 0x00	; 0
    b7b0:	ec ed       	ldi	r30, 0xDC	; 220
    b7b2:	fb e5       	ldi	r31, 0x5B	; 91
    b7b4:	0c 94 38 e4 	jmp	0x1c870	; 0x1c870 <__prologue_saves__+0x1e>
    b7b8:	9c 83       	std	Y+4, r25	; 0x04
    b7ba:	8b 83       	std	Y+3, r24	; 0x03
    b7bc:	7e 83       	std	Y+6, r23	; 0x06
    b7be:	6d 83       	std	Y+5, r22	; 0x05
    b7c0:	14 2f       	mov	r17, r20
    b7c2:	7a 83       	std	Y+2, r23	; 0x02
    b7c4:	69 83       	std	Y+1, r22	; 0x01
    b7c6:	ce 01       	movw	r24, r28
    b7c8:	01 96       	adiw	r24, 0x01	; 1
    b7ca:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <get_ldnumber>
    b7ce:	97 fd       	sbrc	r25, 7
    b7d0:	20 c0       	rjmp	.+64     	; 0xb812 <f_mount+0x66>
    b7d2:	88 0f       	add	r24, r24
    b7d4:	99 1f       	adc	r25, r25
    b7d6:	fc 01       	movw	r30, r24
    b7d8:	eb 5c       	subi	r30, 0xCB	; 203
    b7da:	f7 4e       	sbci	r31, 0xE7	; 231
    b7dc:	01 90       	ld	r0, Z+
    b7de:	f0 81       	ld	r31, Z
    b7e0:	e0 2d       	mov	r30, r0
    b7e2:	30 97       	sbiw	r30, 0x00	; 0
    b7e4:	09 f0       	breq	.+2      	; 0xb7e8 <f_mount+0x3c>
    b7e6:	10 82       	st	Z, r1
    b7e8:	eb 81       	ldd	r30, Y+3	; 0x03
    b7ea:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ec:	30 97       	sbiw	r30, 0x00	; 0
    b7ee:	09 f0       	breq	.+2      	; 0xb7f2 <f_mount+0x46>
    b7f0:	10 82       	st	Z, r1
    b7f2:	dc 01       	movw	r26, r24
    b7f4:	ab 5c       	subi	r26, 0xCB	; 203
    b7f6:	b7 4e       	sbci	r27, 0xE7	; 231
    b7f8:	ed 93       	st	X+, r30
    b7fa:	fc 93       	st	X, r31
    b7fc:	11 23       	and	r17, r17
    b7fe:	61 f0       	breq	.+24     	; 0xb818 <f_mount+0x6c>
    b800:	40 e0       	ldi	r20, 0x00	; 0
    b802:	be 01       	movw	r22, r28
    b804:	6d 5f       	subi	r22, 0xFD	; 253
    b806:	7f 4f       	sbci	r23, 0xFF	; 255
    b808:	ce 01       	movw	r24, r28
    b80a:	05 96       	adiw	r24, 0x05	; 5
    b80c:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    b810:	05 c0       	rjmp	.+10     	; 0xb81c <f_mount+0x70>
    b812:	8b e0       	ldi	r24, 0x0B	; 11
    b814:	90 e0       	ldi	r25, 0x00	; 0
    b816:	02 c0       	rjmp	.+4      	; 0xb81c <f_mount+0x70>
    b818:	80 e0       	ldi	r24, 0x00	; 0
    b81a:	90 e0       	ldi	r25, 0x00	; 0
    b81c:	26 96       	adiw	r28, 0x06	; 6
    b81e:	e3 e0       	ldi	r30, 0x03	; 3
    b820:	0c 94 54 e4 	jmp	0x1c8a8	; 0x1c8a8 <__epilogue_restores__+0x1e>

0000b824 <f_open>:
    b824:	a6 e3       	ldi	r26, 0x36	; 54
    b826:	b0 e0       	ldi	r27, 0x00	; 0
    b828:	e8 e1       	ldi	r30, 0x18	; 24
    b82a:	fc e5       	ldi	r31, 0x5C	; 92
    b82c:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    b830:	7a ab       	std	Y+50, r23	; 0x32
    b832:	69 ab       	std	Y+49, r22	; 0x31
    b834:	00 97       	sbiw	r24, 0x00	; 0
    b836:	09 f4       	brne	.+2      	; 0xb83a <f_open+0x16>
    b838:	96 c1       	rjmp	.+812    	; 0xbb66 <f_open+0x342>
    b83a:	74 2e       	mov	r7, r20
    b83c:	7c 01       	movw	r14, r24
    b83e:	24 2f       	mov	r18, r20
    b840:	2f 73       	andi	r18, 0x3F	; 63
    b842:	32 2e       	mov	r3, r18
    b844:	42 2f       	mov	r20, r18
    b846:	be 01       	movw	r22, r28
    b848:	61 5d       	subi	r22, 0xD1	; 209
    b84a:	7f 4f       	sbci	r23, 0xFF	; 255
    b84c:	ce 01       	movw	r24, r28
    b84e:	c1 96       	adiw	r24, 0x31	; 49
    b850:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    b854:	00 97       	sbiw	r24, 0x00	; 0
    b856:	09 f0       	breq	.+2      	; 0xb85a <f_open+0x36>
    b858:	80 c1       	rjmp	.+768    	; 0xbb5a <f_open+0x336>
    b85a:	8f a5       	ldd	r24, Y+47	; 0x2f
    b85c:	98 a9       	ldd	r25, Y+48	; 0x30
    b85e:	9a 83       	std	Y+2, r25	; 0x02
    b860:	89 83       	std	Y+1, r24	; 0x01
    b862:	80 e0       	ldi	r24, 0x00	; 0
    b864:	92 e0       	ldi	r25, 0x02	; 2
    b866:	0e 94 89 6b 	call	0xd712	; 0xd712 <ff_memalloc>
    b86a:	5c 01       	movw	r10, r24
    b86c:	00 97       	sbiw	r24, 0x00	; 0
    b86e:	09 f4       	brne	.+2      	; 0xb872 <f_open+0x4e>
    b870:	7c c1       	rjmp	.+760    	; 0xbb6a <f_open+0x346>
    b872:	ef a5       	ldd	r30, Y+47	; 0x2f
    b874:	f8 a9       	ldd	r31, Y+48	; 0x30
    b876:	94 87       	std	Z+12, r25	; 0x0c
    b878:	83 87       	std	Z+11, r24	; 0x0b
    b87a:	69 a9       	ldd	r22, Y+49	; 0x31
    b87c:	7a a9       	ldd	r23, Y+50	; 0x32
    b87e:	ce 01       	movw	r24, r28
    b880:	01 96       	adiw	r24, 0x01	; 1
    b882:	5e dd       	rcall	.-1348   	; 0xb340 <follow_path>
    b884:	8c 01       	movw	r16, r24
    b886:	89 2b       	or	r24, r25
    b888:	29 f4       	brne	.+10     	; 0xb894 <f_open+0x70>
    b88a:	88 a5       	ldd	r24, Y+40	; 0x28
    b88c:	87 ff       	sbrs	r24, 7
    b88e:	02 c0       	rjmp	.+4      	; 0xb894 <f_open+0x70>
    b890:	06 e0       	ldi	r16, 0x06	; 6
    b892:	10 e0       	ldi	r17, 0x00	; 0
    b894:	87 2d       	mov	r24, r7
    b896:	8c 71       	andi	r24, 0x1C	; 28
    b898:	09 f4       	brne	.+2      	; 0xb89c <f_open+0x78>
    b89a:	78 c0       	rjmp	.+240    	; 0xb98c <f_open+0x168>
    b89c:	01 15       	cp	r16, r1
    b89e:	11 05       	cpc	r17, r1
    b8a0:	79 f0       	breq	.+30     	; 0xb8c0 <f_open+0x9c>
    b8a2:	04 30       	cpi	r16, 0x04	; 4
    b8a4:	11 05       	cpc	r17, r1
    b8a6:	09 f0       	breq	.+2      	; 0xb8aa <f_open+0x86>
    b8a8:	70 c1       	rjmp	.+736    	; 0xbb8a <f_open+0x366>
    b8aa:	ce 01       	movw	r24, r28
    b8ac:	01 96       	adiw	r24, 0x01	; 1
    b8ae:	a4 db       	rcall	.-2232   	; 0xaff8 <dir_register>
    b8b0:	8c 01       	movw	r16, r24
    b8b2:	89 2b       	or	r24, r25
    b8b4:	09 f0       	breq	.+2      	; 0xb8b8 <f_open+0x94>
    b8b6:	69 c1       	rjmp	.+722    	; 0xbb8a <f_open+0x366>
    b8b8:	33 2d       	mov	r19, r3
    b8ba:	38 60       	ori	r19, 0x08	; 8
    b8bc:	33 2e       	mov	r3, r19
    b8be:	06 c0       	rjmp	.+12     	; 0xb8cc <f_open+0xa8>
    b8c0:	8d 81       	ldd	r24, Y+5	; 0x05
    b8c2:	81 71       	andi	r24, 0x11	; 17
    b8c4:	09 f0       	breq	.+2      	; 0xb8c8 <f_open+0xa4>
    b8c6:	5f c1       	rjmp	.+702    	; 0xbb86 <f_open+0x362>
    b8c8:	72 fc       	sbrc	r7, 2
    b8ca:	54 c1       	rjmp	.+680    	; 0xbb74 <f_open+0x350>
    b8cc:	33 fe       	sbrs	r3, 3
    b8ce:	6e c0       	rjmp	.+220    	; 0xb9ac <f_open+0x188>
    b8d0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b8d2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b8d4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b8d6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b8d8:	80 81       	ld	r24, Z
    b8da:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    b8de:	2b 01       	movw	r4, r22
    b8e0:	3c 01       	movw	r6, r24
    b8e2:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <get_fattime>
    b8e6:	ab 01       	movw	r20, r22
    b8e8:	bc 01       	movw	r22, r24
    b8ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b8ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b8ee:	0e 96       	adiw	r24, 0x0e	; 14
    b8f0:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
    b8f4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b8f6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b8f8:	80 e2       	ldi	r24, 0x20	; 32
    b8fa:	83 87       	std	Z+11, r24	; 0x0b
    b8fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b8fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b900:	af a5       	ldd	r26, Y+47	; 0x2f
    b902:	b8 a9       	ldd	r27, Y+48	; 0x30
    b904:	12 8e       	std	Z+26, r1	; 0x1a
    b906:	13 8e       	std	Z+27, r1	; 0x1b
    b908:	8c 91       	ld	r24, X
    b90a:	83 30       	cpi	r24, 0x03	; 3
    b90c:	11 f4       	brne	.+4      	; 0xb912 <f_open+0xee>
    b90e:	14 8a       	std	Z+20, r1	; 0x14
    b910:	15 8a       	std	Z+21, r1	; 0x15
    b912:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b914:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b916:	14 8e       	std	Z+28, r1	; 0x1c
    b918:	15 8e       	std	Z+29, r1	; 0x1d
    b91a:	16 8e       	std	Z+30, r1	; 0x1e
    b91c:	17 8e       	std	Z+31, r1	; 0x1f
    b91e:	81 e0       	ldi	r24, 0x01	; 1
    b920:	13 96       	adiw	r26, 0x03	; 3
    b922:	8c 93       	st	X, r24
    b924:	13 97       	sbiw	r26, 0x03	; 3
    b926:	41 14       	cp	r4, r1
    b928:	51 04       	cpc	r5, r1
    b92a:	61 04       	cpc	r6, r1
    b92c:	71 04       	cpc	r7, r1
    b92e:	d9 f1       	breq	.+118    	; 0xb9a6 <f_open+0x182>
    b930:	d1 96       	adiw	r26, 0x31	; 49
    b932:	2d 91       	ld	r18, X+
    b934:	3d 91       	ld	r19, X+
    b936:	4d 91       	ld	r20, X+
    b938:	5c 91       	ld	r21, X
    b93a:	d4 97       	sbiw	r26, 0x34	; 52
    b93c:	2b ab       	std	Y+51, r18	; 0x33
    b93e:	3c ab       	std	Y+52, r19	; 0x34
    b940:	4d ab       	std	Y+53, r20	; 0x35
    b942:	5e ab       	std	Y+54, r21	; 0x36
    b944:	00 e0       	ldi	r16, 0x00	; 0
    b946:	10 e0       	ldi	r17, 0x00	; 0
    b948:	98 01       	movw	r18, r16
    b94a:	b3 01       	movw	r22, r6
    b94c:	a2 01       	movw	r20, r4
    b94e:	ce 01       	movw	r24, r28
    b950:	01 96       	adiw	r24, 0x01	; 1
    b952:	0e 94 21 54 	call	0xa842	; 0xa842 <remove_chain>
    b956:	8c 01       	movw	r16, r24
    b958:	89 2b       	or	r24, r25
    b95a:	09 f0       	breq	.+2      	; 0xb95e <f_open+0x13a>
    b95c:	16 c1       	rjmp	.+556    	; 0xbb8a <f_open+0x366>
    b95e:	4b a9       	ldd	r20, Y+51	; 0x33
    b960:	5c a9       	ldd	r21, Y+52	; 0x34
    b962:	6d a9       	ldd	r22, Y+53	; 0x35
    b964:	7e a9       	ldd	r23, Y+54	; 0x36
    b966:	8f a5       	ldd	r24, Y+47	; 0x2f
    b968:	98 a9       	ldd	r25, Y+48	; 0x30
    b96a:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    b96e:	8c 01       	movw	r16, r24
    b970:	ef a5       	ldd	r30, Y+47	; 0x2f
    b972:	f8 a9       	ldd	r31, Y+48	; 0x30
    b974:	31 e0       	ldi	r19, 0x01	; 1
    b976:	43 1a       	sub	r4, r19
    b978:	51 08       	sbc	r5, r1
    b97a:	61 08       	sbc	r6, r1
    b97c:	71 08       	sbc	r7, r1
    b97e:	45 86       	std	Z+13, r4	; 0x0d
    b980:	56 86       	std	Z+14, r5	; 0x0e
    b982:	67 86       	std	Z+15, r6	; 0x0f
    b984:	70 8a       	std	Z+16, r7	; 0x10
    b986:	89 2b       	or	r24, r25
    b988:	61 f0       	breq	.+24     	; 0xb9a2 <f_open+0x17e>
    b98a:	ff c0       	rjmp	.+510    	; 0xbb8a <f_open+0x366>
    b98c:	01 15       	cp	r16, r1
    b98e:	11 05       	cpc	r17, r1
    b990:	09 f0       	breq	.+2      	; 0xb994 <f_open+0x170>
    b992:	fb c0       	rjmp	.+502    	; 0xbb8a <f_open+0x366>
    b994:	8d 81       	ldd	r24, Y+5	; 0x05
    b996:	84 fd       	sbrc	r24, 4
    b998:	f3 c0       	rjmp	.+486    	; 0xbb80 <f_open+0x35c>
    b99a:	71 fe       	sbrs	r7, 1
    b99c:	02 c0       	rjmp	.+4      	; 0xb9a2 <f_open+0x17e>
    b99e:	80 fd       	sbrc	r24, 0
    b9a0:	f2 c0       	rjmp	.+484    	; 0xbb86 <f_open+0x362>
    b9a2:	33 fe       	sbrs	r3, 3
    b9a4:	03 c0       	rjmp	.+6      	; 0xb9ac <f_open+0x188>
    b9a6:	43 2d       	mov	r20, r3
    b9a8:	40 64       	ori	r20, 0x40	; 64
    b9aa:	34 2e       	mov	r3, r20
    b9ac:	0f a5       	ldd	r16, Y+47	; 0x2f
    b9ae:	18 a9       	ldd	r17, Y+48	; 0x30
    b9b0:	f8 01       	movw	r30, r16
    b9b2:	81 a9       	ldd	r24, Z+49	; 0x31
    b9b4:	92 a9       	ldd	r25, Z+50	; 0x32
    b9b6:	a3 a9       	ldd	r26, Z+51	; 0x33
    b9b8:	b4 a9       	ldd	r27, Z+52	; 0x34
    b9ba:	f7 01       	movw	r30, r14
    b9bc:	84 8f       	std	Z+28, r24	; 0x1c
    b9be:	95 8f       	std	Z+29, r25	; 0x1d
    b9c0:	a6 8f       	std	Z+30, r26	; 0x1e
    b9c2:	b7 8f       	std	Z+31, r27	; 0x1f
    b9c4:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b9c6:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b9c8:	71 a2       	std	Z+33, r7	; 0x21
    b9ca:	60 a2       	std	Z+32, r6	; 0x20
    b9cc:	b3 01       	movw	r22, r6
    b9ce:	f8 01       	movw	r30, r16
    b9d0:	80 81       	ld	r24, Z
    b9d2:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    b9d6:	f7 01       	movw	r30, r14
    b9d8:	66 83       	std	Z+6, r22	; 0x06
    b9da:	77 83       	std	Z+7, r23	; 0x07
    b9dc:	80 87       	std	Z+8, r24	; 0x08
    b9de:	91 87       	std	Z+9, r25	; 0x09
    b9e0:	c3 01       	movw	r24, r6
    b9e2:	4c 96       	adiw	r24, 0x1c	; 28
    b9e4:	0e 94 c6 48 	call	0x918c	; 0x918c <ld_dword>
    b9e8:	f7 01       	movw	r30, r14
    b9ea:	62 87       	std	Z+10, r22	; 0x0a
    b9ec:	73 87       	std	Z+11, r23	; 0x0b
    b9ee:	84 87       	std	Z+12, r24	; 0x0c
    b9f0:	95 87       	std	Z+13, r25	; 0x0d
    b9f2:	13 a2       	std	Z+35, r1	; 0x23
    b9f4:	12 a2       	std	Z+34, r1	; 0x22
    b9f6:	11 83       	std	Z+1, r17	; 0x01
    b9f8:	00 83       	st	Z, r16
    b9fa:	f8 01       	movw	r30, r16
    b9fc:	85 81       	ldd	r24, Z+5	; 0x05
    b9fe:	96 81       	ldd	r25, Z+6	; 0x06
    ba00:	f7 01       	movw	r30, r14
    ba02:	93 83       	std	Z+3, r25	; 0x03
    ba04:	82 83       	std	Z+2, r24	; 0x02
    ba06:	36 86       	std	Z+14, r3	; 0x0e
    ba08:	17 86       	std	Z+15, r1	; 0x0f
    ba0a:	10 8e       	std	Z+24, r1	; 0x18
    ba0c:	11 8e       	std	Z+25, r1	; 0x19
    ba0e:	12 8e       	std	Z+26, r1	; 0x1a
    ba10:	13 8e       	std	Z+27, r1	; 0x1b
    ba12:	10 8a       	std	Z+16, r1	; 0x10
    ba14:	11 8a       	std	Z+17, r1	; 0x11
    ba16:	12 8a       	std	Z+18, r1	; 0x12
    ba18:	13 8a       	std	Z+19, r1	; 0x13
    ba1a:	67 01       	movw	r12, r14
    ba1c:	f4 e2       	ldi	r31, 0x24	; 36
    ba1e:	cf 0e       	add	r12, r31
    ba20:	d1 1c       	adc	r13, r1
    ba22:	40 e0       	ldi	r20, 0x00	; 0
    ba24:	52 e0       	ldi	r21, 0x02	; 2
    ba26:	60 e0       	ldi	r22, 0x00	; 0
    ba28:	70 e0       	ldi	r23, 0x00	; 0
    ba2a:	c6 01       	movw	r24, r12
    ba2c:	0e 94 e1 48 	call	0x91c2	; 0x91c2 <mem_set>
    ba30:	35 fc       	sbrc	r3, 5
    ba32:	03 c0       	rjmp	.+6      	; 0xba3a <f_open+0x216>
    ba34:	00 e0       	ldi	r16, 0x00	; 0
    ba36:	10 e0       	ldi	r17, 0x00	; 0
    ba38:	89 c0       	rjmp	.+274    	; 0xbb4c <f_open+0x328>
    ba3a:	f7 01       	movw	r30, r14
    ba3c:	62 84       	ldd	r6, Z+10	; 0x0a
    ba3e:	73 84       	ldd	r7, Z+11	; 0x0b
    ba40:	84 84       	ldd	r8, Z+12	; 0x0c
    ba42:	95 84       	ldd	r9, Z+13	; 0x0d
    ba44:	61 14       	cp	r6, r1
    ba46:	71 04       	cpc	r7, r1
    ba48:	81 04       	cpc	r8, r1
    ba4a:	91 04       	cpc	r9, r1
    ba4c:	99 f3       	breq	.-26     	; 0xba34 <f_open+0x210>
    ba4e:	60 8a       	std	Z+16, r6	; 0x10
    ba50:	71 8a       	std	Z+17, r7	; 0x11
    ba52:	82 8a       	std	Z+18, r8	; 0x12
    ba54:	93 8a       	std	Z+19, r9	; 0x13
    ba56:	ef a5       	ldd	r30, Y+47	; 0x2f
    ba58:	f8 a9       	ldd	r31, Y+48	; 0x30
    ba5a:	21 84       	ldd	r2, Z+9	; 0x09
    ba5c:	32 84       	ldd	r3, Z+10	; 0x0a
    ba5e:	c1 01       	movw	r24, r2
    ba60:	a0 e0       	ldi	r26, 0x00	; 0
    ba62:	b0 e0       	ldi	r27, 0x00	; 0
    ba64:	1c 01       	movw	r2, r24
    ba66:	2d 01       	movw	r4, r26
    ba68:	59 e0       	ldi	r21, 0x09	; 9
    ba6a:	22 0c       	add	r2, r2
    ba6c:	33 1c       	adc	r3, r3
    ba6e:	44 1c       	adc	r4, r4
    ba70:	55 1c       	adc	r5, r5
    ba72:	5a 95       	dec	r21
    ba74:	d1 f7       	brne	.-12     	; 0xba6a <f_open+0x246>
    ba76:	f7 01       	movw	r30, r14
    ba78:	46 81       	ldd	r20, Z+6	; 0x06
    ba7a:	57 81       	ldd	r21, Z+7	; 0x07
    ba7c:	60 85       	ldd	r22, Z+8	; 0x08
    ba7e:	71 85       	ldd	r23, Z+9	; 0x09
    ba80:	26 14       	cp	r2, r6
    ba82:	37 04       	cpc	r3, r7
    ba84:	48 04       	cpc	r4, r8
    ba86:	59 04       	cpc	r5, r9
    ba88:	f0 f4       	brcc	.+60     	; 0xbac6 <f_open+0x2a2>
    ba8a:	f7 01       	movw	r30, r14
    ba8c:	80 81       	ld	r24, Z
    ba8e:	91 81       	ldd	r25, Z+1	; 0x01
    ba90:	0e 94 86 51 	call	0xa30c	; 0xa30c <get_fat.isra.10>
    ba94:	ab 01       	movw	r20, r22
    ba96:	bc 01       	movw	r22, r24
    ba98:	d4 01       	movw	r26, r8
    ba9a:	c3 01       	movw	r24, r6
    ba9c:	82 19       	sub	r24, r2
    ba9e:	93 09       	sbc	r25, r3
    baa0:	a4 09       	sbc	r26, r4
    baa2:	b5 09       	sbc	r27, r5
    baa4:	3c 01       	movw	r6, r24
    baa6:	4d 01       	movw	r8, r26
    baa8:	42 30       	cpi	r20, 0x02	; 2
    baaa:	51 05       	cpc	r21, r1
    baac:	61 05       	cpc	r22, r1
    baae:	71 05       	cpc	r23, r1
    bab0:	08 f4       	brcc	.+2      	; 0xbab4 <f_open+0x290>
    bab2:	63 c0       	rjmp	.+198    	; 0xbb7a <f_open+0x356>
    bab4:	4f 3f       	cpi	r20, 0xFF	; 255
    bab6:	ff ef       	ldi	r31, 0xFF	; 255
    bab8:	5f 07       	cpc	r21, r31
    baba:	6f 07       	cpc	r22, r31
    babc:	7f 07       	cpc	r23, r31
    babe:	01 f7       	brne	.-64     	; 0xba80 <f_open+0x25c>
    bac0:	01 e0       	ldi	r16, 0x01	; 1
    bac2:	10 e0       	ldi	r17, 0x00	; 0
    bac4:	02 c0       	rjmp	.+4      	; 0xbaca <f_open+0x2a6>
    bac6:	00 e0       	ldi	r16, 0x00	; 0
    bac8:	10 e0       	ldi	r17, 0x00	; 0
    baca:	f7 01       	movw	r30, r14
    bacc:	44 8b       	std	Z+20, r20	; 0x14
    bace:	55 8b       	std	Z+21, r21	; 0x15
    bad0:	66 8b       	std	Z+22, r22	; 0x16
    bad2:	77 8b       	std	Z+23, r23	; 0x17
    bad4:	01 15       	cp	r16, r1
    bad6:	11 05       	cpc	r17, r1
    bad8:	c9 f5       	brne	.+114    	; 0xbb4c <f_open+0x328>
    bada:	d4 01       	movw	r26, r8
    badc:	c3 01       	movw	r24, r6
    bade:	91 70       	andi	r25, 0x01	; 1
    bae0:	aa 27       	eor	r26, r26
    bae2:	bb 27       	eor	r27, r27
    bae4:	89 2b       	or	r24, r25
    bae6:	8a 2b       	or	r24, r26
    bae8:	8b 2b       	or	r24, r27
    baea:	09 f4       	brne	.+2      	; 0xbaee <f_open+0x2ca>
    baec:	a3 cf       	rjmp	.-186    	; 0xba34 <f_open+0x210>
    baee:	4f a4       	ldd	r4, Y+47	; 0x2f
    baf0:	58 a8       	ldd	r5, Y+48	; 0x30
    baf2:	c2 01       	movw	r24, r4
    baf4:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    baf8:	61 15       	cp	r22, r1
    bafa:	71 05       	cpc	r23, r1
    bafc:	81 05       	cpc	r24, r1
    bafe:	91 05       	cpc	r25, r1
    bb00:	19 f1       	breq	.+70     	; 0xbb48 <f_open+0x324>
    bb02:	94 01       	movw	r18, r8
    bb04:	83 01       	movw	r16, r6
    bb06:	49 e0       	ldi	r20, 0x09	; 9
    bb08:	36 95       	lsr	r19
    bb0a:	27 95       	ror	r18
    bb0c:	17 95       	ror	r17
    bb0e:	07 95       	ror	r16
    bb10:	4a 95       	dec	r20
    bb12:	d1 f7       	brne	.-12     	; 0xbb08 <f_open+0x2e4>
    bb14:	a9 01       	movw	r20, r18
    bb16:	98 01       	movw	r18, r16
    bb18:	26 0f       	add	r18, r22
    bb1a:	37 1f       	adc	r19, r23
    bb1c:	48 1f       	adc	r20, r24
    bb1e:	59 1f       	adc	r21, r25
    bb20:	f7 01       	movw	r30, r14
    bb22:	20 8f       	std	Z+24, r18	; 0x18
    bb24:	31 8f       	std	Z+25, r19	; 0x19
    bb26:	42 8f       	std	Z+26, r20	; 0x1a
    bb28:	53 8f       	std	Z+27, r21	; 0x1b
    bb2a:	01 e0       	ldi	r16, 0x01	; 1
    bb2c:	10 e0       	ldi	r17, 0x00	; 0
    bb2e:	b6 01       	movw	r22, r12
    bb30:	f2 01       	movw	r30, r4
    bb32:	81 81       	ldd	r24, Z+1	; 0x01
    bb34:	0e 94 45 6c 	call	0xd88a	; 0xd88a <disk_read>
    bb38:	31 e0       	ldi	r19, 0x01	; 1
    bb3a:	20 e0       	ldi	r18, 0x00	; 0
    bb3c:	89 2b       	or	r24, r25
    bb3e:	09 f4       	brne	.+2      	; 0xbb42 <f_open+0x31e>
    bb40:	30 e0       	ldi	r19, 0x00	; 0
    bb42:	03 2f       	mov	r16, r19
    bb44:	12 2f       	mov	r17, r18
    bb46:	02 c0       	rjmp	.+4      	; 0xbb4c <f_open+0x328>
    bb48:	02 e0       	ldi	r16, 0x02	; 2
    bb4a:	10 e0       	ldi	r17, 0x00	; 0
    bb4c:	c5 01       	movw	r24, r10
    bb4e:	0e 94 8c 6b 	call	0xd718	; 0xd718 <ff_memfree>
    bb52:	01 15       	cp	r16, r1
    bb54:	11 05       	cpc	r17, r1
    bb56:	59 f0       	breq	.+22     	; 0xbb6e <f_open+0x34a>
    bb58:	01 c0       	rjmp	.+2      	; 0xbb5c <f_open+0x338>
    bb5a:	8c 01       	movw	r16, r24
    bb5c:	f7 01       	movw	r30, r14
    bb5e:	11 82       	std	Z+1, r1	; 0x01
    bb60:	10 82       	st	Z, r1
    bb62:	c8 01       	movw	r24, r16
    bb64:	16 c0       	rjmp	.+44     	; 0xbb92 <f_open+0x36e>
    bb66:	89 e0       	ldi	r24, 0x09	; 9
    bb68:	03 c0       	rjmp	.+6      	; 0xbb70 <f_open+0x34c>
    bb6a:	81 e1       	ldi	r24, 0x11	; 17
    bb6c:	01 c0       	rjmp	.+2      	; 0xbb70 <f_open+0x34c>
    bb6e:	80 e0       	ldi	r24, 0x00	; 0
    bb70:	90 e0       	ldi	r25, 0x00	; 0
    bb72:	0f c0       	rjmp	.+30     	; 0xbb92 <f_open+0x36e>
    bb74:	08 e0       	ldi	r16, 0x08	; 8
    bb76:	10 e0       	ldi	r17, 0x00	; 0
    bb78:	08 c0       	rjmp	.+16     	; 0xbb8a <f_open+0x366>
    bb7a:	02 e0       	ldi	r16, 0x02	; 2
    bb7c:	10 e0       	ldi	r17, 0x00	; 0
    bb7e:	a5 cf       	rjmp	.-182    	; 0xbaca <f_open+0x2a6>
    bb80:	04 e0       	ldi	r16, 0x04	; 4
    bb82:	10 e0       	ldi	r17, 0x00	; 0
    bb84:	02 c0       	rjmp	.+4      	; 0xbb8a <f_open+0x366>
    bb86:	07 e0       	ldi	r16, 0x07	; 7
    bb88:	10 e0       	ldi	r17, 0x00	; 0
    bb8a:	c5 01       	movw	r24, r10
    bb8c:	0e 94 8c 6b 	call	0xd718	; 0xd718 <ff_memfree>
    bb90:	e5 cf       	rjmp	.-54     	; 0xbb5c <f_open+0x338>
    bb92:	e6 96       	adiw	r28, 0x36	; 54
    bb94:	e2 e1       	ldi	r30, 0x12	; 18
    bb96:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000bb9a <f_read>:
    bb9a:	a6 e0       	ldi	r26, 0x06	; 6
    bb9c:	b0 e0       	ldi	r27, 0x00	; 0
    bb9e:	e3 ed       	ldi	r30, 0xD3	; 211
    bba0:	fd e5       	ldi	r31, 0x5D	; 93
    bba2:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    bba6:	7c 01       	movw	r14, r24
    bba8:	4b 01       	movw	r8, r22
    bbaa:	5a 01       	movw	r10, r20
    bbac:	3e 83       	std	Y+6, r19	; 0x06
    bbae:	2d 83       	std	Y+5, r18	; 0x05
    bbb0:	f9 01       	movw	r30, r18
    bbb2:	11 82       	std	Z+1, r1	; 0x01
    bbb4:	10 82       	st	Z, r1
    bbb6:	be 01       	movw	r22, r28
    bbb8:	6f 5f       	subi	r22, 0xFF	; 255
    bbba:	7f 4f       	sbci	r23, 0xFF	; 255
    bbbc:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    bbc0:	00 97       	sbiw	r24, 0x00	; 0
    bbc2:	09 f0       	breq	.+2      	; 0xbbc6 <f_read+0x2c>
    bbc4:	31 c1       	rjmp	.+610    	; 0xbe28 <f_read+0x28e>
    bbc6:	f7 01       	movw	r30, r14
    bbc8:	87 85       	ldd	r24, Z+15	; 0x0f
    bbca:	90 e0       	ldi	r25, 0x00	; 0
    bbcc:	00 97       	sbiw	r24, 0x00	; 0
    bbce:	09 f0       	breq	.+2      	; 0xbbd2 <f_read+0x38>
    bbd0:	2b c1       	rjmp	.+598    	; 0xbe28 <f_read+0x28e>
    bbd2:	86 85       	ldd	r24, Z+14	; 0x0e
    bbd4:	80 ff       	sbrs	r24, 0
    bbd6:	26 c1       	rjmp	.+588    	; 0xbe24 <f_read+0x28a>
    bbd8:	82 85       	ldd	r24, Z+10	; 0x0a
    bbda:	93 85       	ldd	r25, Z+11	; 0x0b
    bbdc:	a4 85       	ldd	r26, Z+12	; 0x0c
    bbde:	b5 85       	ldd	r27, Z+13	; 0x0d
    bbe0:	40 89       	ldd	r20, Z+16	; 0x10
    bbe2:	51 89       	ldd	r21, Z+17	; 0x11
    bbe4:	62 89       	ldd	r22, Z+18	; 0x12
    bbe6:	73 89       	ldd	r23, Z+19	; 0x13
    bbe8:	84 1b       	sub	r24, r20
    bbea:	95 0b       	sbc	r25, r21
    bbec:	a6 0b       	sbc	r26, r22
    bbee:	b7 0b       	sbc	r27, r23
    bbf0:	a5 01       	movw	r20, r10
    bbf2:	60 e0       	ldi	r22, 0x00	; 0
    bbf4:	70 e0       	ldi	r23, 0x00	; 0
    bbf6:	84 17       	cp	r24, r20
    bbf8:	95 07       	cpc	r25, r21
    bbfa:	a6 07       	cpc	r26, r22
    bbfc:	b7 07       	cpc	r27, r23
    bbfe:	08 f4       	brcc	.+2      	; 0xbc02 <f_read+0x68>
    bc00:	5c 01       	movw	r10, r24
    bc02:	17 01       	movw	r2, r14
    bc04:	f4 e2       	ldi	r31, 0x24	; 36
    bc06:	2f 0e       	add	r2, r31
    bc08:	31 1c       	adc	r3, r1
    bc0a:	a1 14       	cp	r10, r1
    bc0c:	b1 04       	cpc	r11, r1
    bc0e:	09 f4       	brne	.+2      	; 0xbc12 <f_read+0x78>
    bc10:	07 c1       	rjmp	.+526    	; 0xbe20 <f_read+0x286>
    bc12:	f7 01       	movw	r30, r14
    bc14:	40 89       	ldd	r20, Z+16	; 0x10
    bc16:	51 89       	ldd	r21, Z+17	; 0x11
    bc18:	62 89       	ldd	r22, Z+18	; 0x12
    bc1a:	73 89       	ldd	r23, Z+19	; 0x13
    bc1c:	db 01       	movw	r26, r22
    bc1e:	ca 01       	movw	r24, r20
    bc20:	91 70       	andi	r25, 0x01	; 1
    bc22:	aa 27       	eor	r26, r26
    bc24:	bb 27       	eor	r27, r27
    bc26:	89 2b       	or	r24, r25
    bc28:	8a 2b       	or	r24, r26
    bc2a:	8b 2b       	or	r24, r27
    bc2c:	09 f0       	breq	.+2      	; 0xbc30 <f_read+0x96>
    bc2e:	cb c0       	rjmp	.+406    	; 0xbdc6 <f_read+0x22c>
    bc30:	e9 81       	ldd	r30, Y+1	; 0x01
    bc32:	fa 81       	ldd	r31, Y+2	; 0x02
    bc34:	01 85       	ldd	r16, Z+9	; 0x09
    bc36:	12 85       	ldd	r17, Z+10	; 0x0a
    bc38:	01 50       	subi	r16, 0x01	; 1
    bc3a:	11 09       	sbc	r17, r1
    bc3c:	db 01       	movw	r26, r22
    bc3e:	ca 01       	movw	r24, r20
    bc40:	e9 e0       	ldi	r30, 0x09	; 9
    bc42:	b6 95       	lsr	r27
    bc44:	a7 95       	ror	r26
    bc46:	97 95       	ror	r25
    bc48:	87 95       	ror	r24
    bc4a:	ea 95       	dec	r30
    bc4c:	d1 f7       	brne	.-12     	; 0xbc42 <f_read+0xa8>
    bc4e:	08 23       	and	r16, r24
    bc50:	19 23       	and	r17, r25
    bc52:	01 15       	cp	r16, r1
    bc54:	11 05       	cpc	r17, r1
    bc56:	91 f5       	brne	.+100    	; 0xbcbc <f_read+0x122>
    bc58:	f7 01       	movw	r30, r14
    bc5a:	41 15       	cp	r20, r1
    bc5c:	51 05       	cpc	r21, r1
    bc5e:	61 05       	cpc	r22, r1
    bc60:	71 05       	cpc	r23, r1
    bc62:	29 f4       	brne	.+10     	; 0xbc6e <f_read+0xd4>
    bc64:	66 81       	ldd	r22, Z+6	; 0x06
    bc66:	77 81       	ldd	r23, Z+7	; 0x07
    bc68:	80 85       	ldd	r24, Z+8	; 0x08
    bc6a:	91 85       	ldd	r25, Z+9	; 0x09
    bc6c:	11 c0       	rjmp	.+34     	; 0xbc90 <f_read+0xf6>
    bc6e:	82 a1       	ldd	r24, Z+34	; 0x22
    bc70:	93 a1       	ldd	r25, Z+35	; 0x23
    bc72:	89 2b       	or	r24, r25
    bc74:	21 f0       	breq	.+8      	; 0xbc7e <f_read+0xe4>
    bc76:	c7 01       	movw	r24, r14
    bc78:	0e 94 a7 49 	call	0x934e	; 0x934e <clmt_clust>
    bc7c:	09 c0       	rjmp	.+18     	; 0xbc90 <f_read+0xf6>
    bc7e:	f7 01       	movw	r30, r14
    bc80:	44 89       	ldd	r20, Z+20	; 0x14
    bc82:	55 89       	ldd	r21, Z+21	; 0x15
    bc84:	66 89       	ldd	r22, Z+22	; 0x16
    bc86:	77 89       	ldd	r23, Z+23	; 0x17
    bc88:	80 81       	ld	r24, Z
    bc8a:	91 81       	ldd	r25, Z+1	; 0x01
    bc8c:	0e 94 86 51 	call	0xa30c	; 0xa30c <get_fat.isra.10>
    bc90:	62 30       	cpi	r22, 0x02	; 2
    bc92:	71 05       	cpc	r23, r1
    bc94:	81 05       	cpc	r24, r1
    bc96:	91 05       	cpc	r25, r1
    bc98:	10 f4       	brcc	.+4      	; 0xbc9e <f_read+0x104>
    bc9a:	82 e0       	ldi	r24, 0x02	; 2
    bc9c:	07 c0       	rjmp	.+14     	; 0xbcac <f_read+0x112>
    bc9e:	6f 3f       	cpi	r22, 0xFF	; 255
    bca0:	ff ef       	ldi	r31, 0xFF	; 255
    bca2:	7f 07       	cpc	r23, r31
    bca4:	8f 07       	cpc	r24, r31
    bca6:	9f 07       	cpc	r25, r31
    bca8:	21 f4       	brne	.+8      	; 0xbcb2 <f_read+0x118>
    bcaa:	81 e0       	ldi	r24, 0x01	; 1
    bcac:	f7 01       	movw	r30, r14
    bcae:	87 87       	std	Z+15, r24	; 0x0f
    bcb0:	ba c0       	rjmp	.+372    	; 0xbe26 <f_read+0x28c>
    bcb2:	f7 01       	movw	r30, r14
    bcb4:	64 8b       	std	Z+20, r22	; 0x14
    bcb6:	75 8b       	std	Z+21, r23	; 0x15
    bcb8:	86 8b       	std	Z+22, r24	; 0x16
    bcba:	97 8b       	std	Z+23, r25	; 0x17
    bcbc:	89 81       	ldd	r24, Y+1	; 0x01
    bcbe:	9a 81       	ldd	r25, Y+2	; 0x02
    bcc0:	9c 83       	std	Y+4, r25	; 0x04
    bcc2:	8b 83       	std	Y+3, r24	; 0x03
    bcc4:	f7 01       	movw	r30, r14
    bcc6:	44 89       	ldd	r20, Z+20	; 0x14
    bcc8:	55 89       	ldd	r21, Z+21	; 0x15
    bcca:	66 89       	ldd	r22, Z+22	; 0x16
    bccc:	77 89       	ldd	r23, Z+23	; 0x17
    bcce:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    bcd2:	61 15       	cp	r22, r1
    bcd4:	71 05       	cpc	r23, r1
    bcd6:	81 05       	cpc	r24, r1
    bcd8:	91 05       	cpc	r25, r1
    bcda:	f9 f2       	breq	.-66     	; 0xbc9a <f_read+0x100>
    bcdc:	2b 01       	movw	r4, r22
    bcde:	3c 01       	movw	r6, r24
    bce0:	40 0e       	add	r4, r16
    bce2:	51 1e       	adc	r5, r17
    bce4:	61 1c       	adc	r6, r1
    bce6:	71 1c       	adc	r7, r1
    bce8:	65 01       	movw	r12, r10
    bcea:	cd 2c       	mov	r12, r13
    bcec:	dd 24       	eor	r13, r13
    bcee:	c6 94       	lsr	r12
    bcf0:	c1 14       	cp	r12, r1
    bcf2:	d1 04       	cpc	r13, r1
    bcf4:	d1 f1       	breq	.+116    	; 0xbd6a <f_read+0x1d0>
    bcf6:	eb 81       	ldd	r30, Y+3	; 0x03
    bcf8:	fc 81       	ldd	r31, Y+4	; 0x04
    bcfa:	81 85       	ldd	r24, Z+9	; 0x09
    bcfc:	92 85       	ldd	r25, Z+10	; 0x0a
    bcfe:	98 01       	movw	r18, r16
    bd00:	2c 0d       	add	r18, r12
    bd02:	3d 1d       	adc	r19, r13
    bd04:	82 17       	cp	r24, r18
    bd06:	93 07       	cpc	r25, r19
    bd08:	18 f4       	brcc	.+6      	; 0xbd10 <f_read+0x176>
    bd0a:	6c 01       	movw	r12, r24
    bd0c:	c0 1a       	sub	r12, r16
    bd0e:	d1 0a       	sbc	r13, r17
    bd10:	86 01       	movw	r16, r12
    bd12:	a3 01       	movw	r20, r6
    bd14:	92 01       	movw	r18, r4
    bd16:	b4 01       	movw	r22, r8
    bd18:	eb 81       	ldd	r30, Y+3	; 0x03
    bd1a:	fc 81       	ldd	r31, Y+4	; 0x04
    bd1c:	81 81       	ldd	r24, Z+1	; 0x01
    bd1e:	0e 94 45 6c 	call	0xd88a	; 0xd88a <disk_read>
    bd22:	89 2b       	or	r24, r25
    bd24:	11 f6       	brne	.-124    	; 0xbcaa <f_read+0x110>
    bd26:	f7 01       	movw	r30, r14
    bd28:	86 85       	ldd	r24, Z+14	; 0x0e
    bd2a:	87 ff       	sbrs	r24, 7
    bd2c:	1a c0       	rjmp	.+52     	; 0xbd62 <f_read+0x1c8>
    bd2e:	80 8d       	ldd	r24, Z+24	; 0x18
    bd30:	91 8d       	ldd	r25, Z+25	; 0x19
    bd32:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bd34:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bd36:	84 19       	sub	r24, r4
    bd38:	95 09       	sbc	r25, r5
    bd3a:	a6 09       	sbc	r26, r6
    bd3c:	b7 09       	sbc	r27, r7
    bd3e:	a6 01       	movw	r20, r12
    bd40:	60 e0       	ldi	r22, 0x00	; 0
    bd42:	70 e0       	ldi	r23, 0x00	; 0
    bd44:	84 17       	cp	r24, r20
    bd46:	95 07       	cpc	r25, r21
    bd48:	a6 07       	cpc	r26, r22
    bd4a:	b7 07       	cpc	r27, r23
    bd4c:	50 f4       	brcc	.+20     	; 0xbd62 <f_read+0x1c8>
    bd4e:	98 2f       	mov	r25, r24
    bd50:	88 27       	eor	r24, r24
    bd52:	99 0f       	add	r25, r25
    bd54:	40 e0       	ldi	r20, 0x00	; 0
    bd56:	52 e0       	ldi	r21, 0x02	; 2
    bd58:	b1 01       	movw	r22, r2
    bd5a:	88 0d       	add	r24, r8
    bd5c:	99 1d       	adc	r25, r9
    bd5e:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    bd62:	dc 2c       	mov	r13, r12
    bd64:	cc 24       	eor	r12, r12
    bd66:	dd 0c       	add	r13, r13
    bd68:	41 c0       	rjmp	.+130    	; 0xbdec <f_read+0x252>
    bd6a:	f7 01       	movw	r30, r14
    bd6c:	20 8d       	ldd	r18, Z+24	; 0x18
    bd6e:	31 8d       	ldd	r19, Z+25	; 0x19
    bd70:	42 8d       	ldd	r20, Z+26	; 0x1a
    bd72:	53 8d       	ldd	r21, Z+27	; 0x1b
    bd74:	42 16       	cp	r4, r18
    bd76:	53 06       	cpc	r5, r19
    bd78:	64 06       	cpc	r6, r20
    bd7a:	75 06       	cpc	r7, r21
    bd7c:	f9 f0       	breq	.+62     	; 0xbdbc <f_read+0x222>
    bd7e:	86 85       	ldd	r24, Z+14	; 0x0e
    bd80:	87 ff       	sbrs	r24, 7
    bd82:	0f c0       	rjmp	.+30     	; 0xbda2 <f_read+0x208>
    bd84:	01 e0       	ldi	r16, 0x01	; 1
    bd86:	10 e0       	ldi	r17, 0x00	; 0
    bd88:	b1 01       	movw	r22, r2
    bd8a:	eb 81       	ldd	r30, Y+3	; 0x03
    bd8c:	fc 81       	ldd	r31, Y+4	; 0x04
    bd8e:	81 81       	ldd	r24, Z+1	; 0x01
    bd90:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    bd94:	89 2b       	or	r24, r25
    bd96:	09 f0       	breq	.+2      	; 0xbd9a <f_read+0x200>
    bd98:	88 cf       	rjmp	.-240    	; 0xbcaa <f_read+0x110>
    bd9a:	f7 01       	movw	r30, r14
    bd9c:	86 85       	ldd	r24, Z+14	; 0x0e
    bd9e:	8f 77       	andi	r24, 0x7F	; 127
    bda0:	86 87       	std	Z+14, r24	; 0x0e
    bda2:	e9 81       	ldd	r30, Y+1	; 0x01
    bda4:	fa 81       	ldd	r31, Y+2	; 0x02
    bda6:	01 e0       	ldi	r16, 0x01	; 1
    bda8:	10 e0       	ldi	r17, 0x00	; 0
    bdaa:	a3 01       	movw	r20, r6
    bdac:	92 01       	movw	r18, r4
    bdae:	b1 01       	movw	r22, r2
    bdb0:	81 81       	ldd	r24, Z+1	; 0x01
    bdb2:	0e 94 45 6c 	call	0xd88a	; 0xd88a <disk_read>
    bdb6:	89 2b       	or	r24, r25
    bdb8:	09 f0       	breq	.+2      	; 0xbdbc <f_read+0x222>
    bdba:	77 cf       	rjmp	.-274    	; 0xbcaa <f_read+0x110>
    bdbc:	f7 01       	movw	r30, r14
    bdbe:	40 8e       	std	Z+24, r4	; 0x18
    bdc0:	51 8e       	std	Z+25, r5	; 0x19
    bdc2:	62 8e       	std	Z+26, r6	; 0x1a
    bdc4:	73 8e       	std	Z+27, r7	; 0x1b
    bdc6:	f7 01       	movw	r30, r14
    bdc8:	60 89       	ldd	r22, Z+16	; 0x10
    bdca:	71 89       	ldd	r23, Z+17	; 0x11
    bdcc:	71 70       	andi	r23, 0x01	; 1
    bdce:	80 e0       	ldi	r24, 0x00	; 0
    bdd0:	92 e0       	ldi	r25, 0x02	; 2
    bdd2:	86 1b       	sub	r24, r22
    bdd4:	97 0b       	sbc	r25, r23
    bdd6:	65 01       	movw	r12, r10
    bdd8:	8a 15       	cp	r24, r10
    bdda:	9b 05       	cpc	r25, r11
    bddc:	08 f4       	brcc	.+2      	; 0xbde0 <f_read+0x246>
    bdde:	6c 01       	movw	r12, r24
    bde0:	62 0d       	add	r22, r2
    bde2:	73 1d       	adc	r23, r3
    bde4:	a6 01       	movw	r20, r12
    bde6:	c4 01       	movw	r24, r8
    bde8:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    bdec:	ac 18       	sub	r10, r12
    bdee:	bd 08       	sbc	r11, r13
    bdf0:	ed 81       	ldd	r30, Y+5	; 0x05
    bdf2:	fe 81       	ldd	r31, Y+6	; 0x06
    bdf4:	80 81       	ld	r24, Z
    bdf6:	91 81       	ldd	r25, Z+1	; 0x01
    bdf8:	8c 0d       	add	r24, r12
    bdfa:	9d 1d       	adc	r25, r13
    bdfc:	91 83       	std	Z+1, r25	; 0x01
    bdfe:	80 83       	st	Z, r24
    be00:	8c 0c       	add	r8, r12
    be02:	9d 1c       	adc	r9, r13
    be04:	f7 01       	movw	r30, r14
    be06:	80 89       	ldd	r24, Z+16	; 0x10
    be08:	91 89       	ldd	r25, Z+17	; 0x11
    be0a:	a2 89       	ldd	r26, Z+18	; 0x12
    be0c:	b3 89       	ldd	r27, Z+19	; 0x13
    be0e:	8c 0d       	add	r24, r12
    be10:	9d 1d       	adc	r25, r13
    be12:	a1 1d       	adc	r26, r1
    be14:	b1 1d       	adc	r27, r1
    be16:	80 8b       	std	Z+16, r24	; 0x10
    be18:	91 8b       	std	Z+17, r25	; 0x11
    be1a:	a2 8b       	std	Z+18, r26	; 0x12
    be1c:	b3 8b       	std	Z+19, r27	; 0x13
    be1e:	f5 ce       	rjmp	.-534    	; 0xbc0a <f_read+0x70>
    be20:	80 e0       	ldi	r24, 0x00	; 0
    be22:	01 c0       	rjmp	.+2      	; 0xbe26 <f_read+0x28c>
    be24:	87 e0       	ldi	r24, 0x07	; 7
    be26:	90 e0       	ldi	r25, 0x00	; 0
    be28:	26 96       	adiw	r28, 0x06	; 6
    be2a:	e2 e1       	ldi	r30, 0x12	; 18
    be2c:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000be30 <f_write>:
    be30:	a8 e0       	ldi	r26, 0x08	; 8
    be32:	b0 e0       	ldi	r27, 0x00	; 0
    be34:	ee e1       	ldi	r30, 0x1E	; 30
    be36:	ff e5       	ldi	r31, 0x5F	; 95
    be38:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    be3c:	7c 01       	movw	r14, r24
    be3e:	3b 01       	movw	r6, r22
    be40:	5a 01       	movw	r10, r20
    be42:	38 87       	std	Y+8, r19	; 0x08
    be44:	2f 83       	std	Y+7, r18	; 0x07
    be46:	f9 01       	movw	r30, r18
    be48:	11 82       	std	Z+1, r1	; 0x01
    be4a:	10 82       	st	Z, r1
    be4c:	be 01       	movw	r22, r28
    be4e:	6f 5f       	subi	r22, 0xFF	; 255
    be50:	7f 4f       	sbci	r23, 0xFF	; 255
    be52:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    be56:	00 97       	sbiw	r24, 0x00	; 0
    be58:	09 f0       	breq	.+2      	; 0xbe5c <f_write+0x2c>
    be5a:	7d c1       	rjmp	.+762    	; 0xc156 <f_write+0x326>
    be5c:	f7 01       	movw	r30, r14
    be5e:	87 85       	ldd	r24, Z+15	; 0x0f
    be60:	90 e0       	ldi	r25, 0x00	; 0
    be62:	00 97       	sbiw	r24, 0x00	; 0
    be64:	09 f0       	breq	.+2      	; 0xbe68 <f_write+0x38>
    be66:	77 c1       	rjmp	.+750    	; 0xc156 <f_write+0x326>
    be68:	86 85       	ldd	r24, Z+14	; 0x0e
    be6a:	81 ff       	sbrs	r24, 1
    be6c:	72 c1       	rjmp	.+740    	; 0xc152 <f_write+0x322>
    be6e:	80 89       	ldd	r24, Z+16	; 0x10
    be70:	91 89       	ldd	r25, Z+17	; 0x11
    be72:	a2 89       	ldd	r26, Z+18	; 0x12
    be74:	b3 89       	ldd	r27, Z+19	; 0x13
    be76:	ac 01       	movw	r20, r24
    be78:	bd 01       	movw	r22, r26
    be7a:	4a 0d       	add	r20, r10
    be7c:	5b 1d       	adc	r21, r11
    be7e:	61 1d       	adc	r22, r1
    be80:	71 1d       	adc	r23, r1
    be82:	48 17       	cp	r20, r24
    be84:	59 07       	cpc	r21, r25
    be86:	6a 07       	cpc	r22, r26
    be88:	7b 07       	cpc	r23, r27
    be8a:	18 f4       	brcc	.+6      	; 0xbe92 <f_write+0x62>
    be8c:	5c 01       	movw	r10, r24
    be8e:	a0 94       	com	r10
    be90:	b0 94       	com	r11
    be92:	97 01       	movw	r18, r14
    be94:	2c 5d       	subi	r18, 0xDC	; 220
    be96:	3f 4f       	sbci	r19, 0xFF	; 255
    be98:	3e 83       	std	Y+6, r19	; 0x06
    be9a:	2d 83       	std	Y+5, r18	; 0x05
    be9c:	a1 14       	cp	r10, r1
    be9e:	b1 04       	cpc	r11, r1
    bea0:	09 f4       	brne	.+2      	; 0xbea4 <f_write+0x74>
    bea2:	4d c0       	rjmp	.+154    	; 0xbf3e <f_write+0x10e>
    bea4:	f7 01       	movw	r30, r14
    bea6:	40 89       	ldd	r20, Z+16	; 0x10
    bea8:	51 89       	ldd	r21, Z+17	; 0x11
    beaa:	62 89       	ldd	r22, Z+18	; 0x12
    beac:	73 89       	ldd	r23, Z+19	; 0x13
    beae:	db 01       	movw	r26, r22
    beb0:	ca 01       	movw	r24, r20
    beb2:	91 70       	andi	r25, 0x01	; 1
    beb4:	aa 27       	eor	r26, r26
    beb6:	bb 27       	eor	r27, r27
    beb8:	89 2b       	or	r24, r25
    beba:	8a 2b       	or	r24, r26
    bebc:	8b 2b       	or	r24, r27
    bebe:	09 f0       	breq	.+2      	; 0xbec2 <f_write+0x92>
    bec0:	05 c1       	rjmp	.+522    	; 0xc0cc <f_write+0x29c>
    bec2:	e9 81       	ldd	r30, Y+1	; 0x01
    bec4:	fa 81       	ldd	r31, Y+2	; 0x02
    bec6:	81 84       	ldd	r8, Z+9	; 0x09
    bec8:	92 84       	ldd	r9, Z+10	; 0x0a
    beca:	f1 e0       	ldi	r31, 0x01	; 1
    becc:	8f 1a       	sub	r8, r31
    bece:	91 08       	sbc	r9, r1
    bed0:	db 01       	movw	r26, r22
    bed2:	ca 01       	movw	r24, r20
    bed4:	e9 e0       	ldi	r30, 0x09	; 9
    bed6:	b6 95       	lsr	r27
    bed8:	a7 95       	ror	r26
    beda:	97 95       	ror	r25
    bedc:	87 95       	ror	r24
    bede:	ea 95       	dec	r30
    bee0:	d1 f7       	brne	.-12     	; 0xbed6 <f_write+0xa6>
    bee2:	88 22       	and	r8, r24
    bee4:	99 22       	and	r9, r25
    bee6:	81 14       	cp	r8, r1
    bee8:	91 04       	cpc	r9, r1
    beea:	09 f0       	breq	.+2      	; 0xbeee <f_write+0xbe>
    beec:	51 c0       	rjmp	.+162    	; 0xbf90 <f_write+0x160>
    beee:	f7 01       	movw	r30, r14
    bef0:	41 15       	cp	r20, r1
    bef2:	51 05       	cpc	r21, r1
    bef4:	61 05       	cpc	r22, r1
    bef6:	71 05       	cpc	r23, r1
    bef8:	69 f4       	brne	.+26     	; 0xbf14 <f_write+0xe4>
    befa:	66 81       	ldd	r22, Z+6	; 0x06
    befc:	77 81       	ldd	r23, Z+7	; 0x07
    befe:	80 85       	ldd	r24, Z+8	; 0x08
    bf00:	91 85       	ldd	r25, Z+9	; 0x09
    bf02:	61 15       	cp	r22, r1
    bf04:	71 05       	cpc	r23, r1
    bf06:	81 05       	cpc	r24, r1
    bf08:	91 05       	cpc	r25, r1
    bf0a:	f9 f4       	brne	.+62     	; 0xbf4a <f_write+0x11a>
    bf0c:	40 e0       	ldi	r20, 0x00	; 0
    bf0e:	50 e0       	ldi	r21, 0x00	; 0
    bf10:	ba 01       	movw	r22, r20
    bf12:	0d c0       	rjmp	.+26     	; 0xbf2e <f_write+0xfe>
    bf14:	82 a1       	ldd	r24, Z+34	; 0x22
    bf16:	93 a1       	ldd	r25, Z+35	; 0x23
    bf18:	89 2b       	or	r24, r25
    bf1a:	21 f0       	breq	.+8      	; 0xbf24 <f_write+0xf4>
    bf1c:	c7 01       	movw	r24, r14
    bf1e:	0e 94 a7 49 	call	0x934e	; 0x934e <clmt_clust>
    bf22:	08 c0       	rjmp	.+16     	; 0xbf34 <f_write+0x104>
    bf24:	f7 01       	movw	r30, r14
    bf26:	44 89       	ldd	r20, Z+20	; 0x14
    bf28:	55 89       	ldd	r21, Z+21	; 0x15
    bf2a:	66 89       	ldd	r22, Z+22	; 0x16
    bf2c:	77 89       	ldd	r23, Z+23	; 0x17
    bf2e:	c7 01       	movw	r24, r14
    bf30:	0e 94 fb 52 	call	0xa5f6	; 0xa5f6 <create_chain>
    bf34:	61 15       	cp	r22, r1
    bf36:	71 05       	cpc	r23, r1
    bf38:	81 05       	cpc	r24, r1
    bf3a:	91 05       	cpc	r25, r1
    bf3c:	31 f4       	brne	.+12     	; 0xbf4a <f_write+0x11a>
    bf3e:	f7 01       	movw	r30, r14
    bf40:	86 85       	ldd	r24, Z+14	; 0x0e
    bf42:	80 64       	ori	r24, 0x40	; 64
    bf44:	86 87       	std	Z+14, r24	; 0x0e
    bf46:	80 e0       	ldi	r24, 0x00	; 0
    bf48:	05 c1       	rjmp	.+522    	; 0xc154 <f_write+0x324>
    bf4a:	61 30       	cpi	r22, 0x01	; 1
    bf4c:	71 05       	cpc	r23, r1
    bf4e:	81 05       	cpc	r24, r1
    bf50:	91 05       	cpc	r25, r1
    bf52:	11 f4       	brne	.+4      	; 0xbf58 <f_write+0x128>
    bf54:	82 e0       	ldi	r24, 0x02	; 2
    bf56:	07 c0       	rjmp	.+14     	; 0xbf66 <f_write+0x136>
    bf58:	6f 3f       	cpi	r22, 0xFF	; 255
    bf5a:	ff ef       	ldi	r31, 0xFF	; 255
    bf5c:	7f 07       	cpc	r23, r31
    bf5e:	8f 07       	cpc	r24, r31
    bf60:	9f 07       	cpc	r25, r31
    bf62:	21 f4       	brne	.+8      	; 0xbf6c <f_write+0x13c>
    bf64:	81 e0       	ldi	r24, 0x01	; 1
    bf66:	f7 01       	movw	r30, r14
    bf68:	87 87       	std	Z+15, r24	; 0x0f
    bf6a:	f4 c0       	rjmp	.+488    	; 0xc154 <f_write+0x324>
    bf6c:	f7 01       	movw	r30, r14
    bf6e:	64 8b       	std	Z+20, r22	; 0x14
    bf70:	75 8b       	std	Z+21, r23	; 0x15
    bf72:	86 8b       	std	Z+22, r24	; 0x16
    bf74:	97 8b       	std	Z+23, r25	; 0x17
    bf76:	06 81       	ldd	r16, Z+6	; 0x06
    bf78:	17 81       	ldd	r17, Z+7	; 0x07
    bf7a:	20 85       	ldd	r18, Z+8	; 0x08
    bf7c:	31 85       	ldd	r19, Z+9	; 0x09
    bf7e:	01 15       	cp	r16, r1
    bf80:	11 05       	cpc	r17, r1
    bf82:	21 05       	cpc	r18, r1
    bf84:	31 05       	cpc	r19, r1
    bf86:	21 f4       	brne	.+8      	; 0xbf90 <f_write+0x160>
    bf88:	66 83       	std	Z+6, r22	; 0x06
    bf8a:	77 83       	std	Z+7, r23	; 0x07
    bf8c:	80 87       	std	Z+8, r24	; 0x08
    bf8e:	91 87       	std	Z+9, r25	; 0x09
    bf90:	f7 01       	movw	r30, r14
    bf92:	86 85       	ldd	r24, Z+14	; 0x0e
    bf94:	87 ff       	sbrs	r24, 7
    bf96:	13 c0       	rjmp	.+38     	; 0xbfbe <f_write+0x18e>
    bf98:	20 8d       	ldd	r18, Z+24	; 0x18
    bf9a:	31 8d       	ldd	r19, Z+25	; 0x19
    bf9c:	42 8d       	ldd	r20, Z+26	; 0x1a
    bf9e:	53 8d       	ldd	r21, Z+27	; 0x1b
    bfa0:	e9 81       	ldd	r30, Y+1	; 0x01
    bfa2:	fa 81       	ldd	r31, Y+2	; 0x02
    bfa4:	01 e0       	ldi	r16, 0x01	; 1
    bfa6:	10 e0       	ldi	r17, 0x00	; 0
    bfa8:	6d 81       	ldd	r22, Y+5	; 0x05
    bfaa:	7e 81       	ldd	r23, Y+6	; 0x06
    bfac:	81 81       	ldd	r24, Z+1	; 0x01
    bfae:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    bfb2:	89 2b       	or	r24, r25
    bfb4:	b9 f6       	brne	.-82     	; 0xbf64 <f_write+0x134>
    bfb6:	f7 01       	movw	r30, r14
    bfb8:	86 85       	ldd	r24, Z+14	; 0x0e
    bfba:	8f 77       	andi	r24, 0x7F	; 127
    bfbc:	86 87       	std	Z+14, r24	; 0x0e
    bfbe:	29 81       	ldd	r18, Y+1	; 0x01
    bfc0:	3a 81       	ldd	r19, Y+2	; 0x02
    bfc2:	3c 83       	std	Y+4, r19	; 0x04
    bfc4:	2b 83       	std	Y+3, r18	; 0x03
    bfc6:	f7 01       	movw	r30, r14
    bfc8:	44 89       	ldd	r20, Z+20	; 0x14
    bfca:	55 89       	ldd	r21, Z+21	; 0x15
    bfcc:	66 89       	ldd	r22, Z+22	; 0x16
    bfce:	77 89       	ldd	r23, Z+23	; 0x17
    bfd0:	c9 01       	movw	r24, r18
    bfd2:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    bfd6:	61 15       	cp	r22, r1
    bfd8:	71 05       	cpc	r23, r1
    bfda:	81 05       	cpc	r24, r1
    bfdc:	91 05       	cpc	r25, r1
    bfde:	09 f4       	brne	.+2      	; 0xbfe2 <f_write+0x1b2>
    bfe0:	b9 cf       	rjmp	.-142    	; 0xbf54 <f_write+0x124>
    bfe2:	1b 01       	movw	r2, r22
    bfe4:	2c 01       	movw	r4, r24
    bfe6:	28 0c       	add	r2, r8
    bfe8:	39 1c       	adc	r3, r9
    bfea:	41 1c       	adc	r4, r1
    bfec:	51 1c       	adc	r5, r1
    bfee:	65 01       	movw	r12, r10
    bff0:	cd 2c       	mov	r12, r13
    bff2:	dd 24       	eor	r13, r13
    bff4:	c6 94       	lsr	r12
    bff6:	c1 14       	cp	r12, r1
    bff8:	d1 04       	cpc	r13, r1
    bffa:	f1 f1       	breq	.+124    	; 0xc078 <f_write+0x248>
    bffc:	eb 81       	ldd	r30, Y+3	; 0x03
    bffe:	fc 81       	ldd	r31, Y+4	; 0x04
    c000:	81 85       	ldd	r24, Z+9	; 0x09
    c002:	92 85       	ldd	r25, Z+10	; 0x0a
    c004:	94 01       	movw	r18, r8
    c006:	2c 0d       	add	r18, r12
    c008:	3d 1d       	adc	r19, r13
    c00a:	82 17       	cp	r24, r18
    c00c:	93 07       	cpc	r25, r19
    c00e:	18 f4       	brcc	.+6      	; 0xc016 <f_write+0x1e6>
    c010:	6c 01       	movw	r12, r24
    c012:	c8 18       	sub	r12, r8
    c014:	d9 08       	sbc	r13, r9
    c016:	86 01       	movw	r16, r12
    c018:	a2 01       	movw	r20, r4
    c01a:	91 01       	movw	r18, r2
    c01c:	b3 01       	movw	r22, r6
    c01e:	eb 81       	ldd	r30, Y+3	; 0x03
    c020:	fc 81       	ldd	r31, Y+4	; 0x04
    c022:	81 81       	ldd	r24, Z+1	; 0x01
    c024:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    c028:	89 2b       	or	r24, r25
    c02a:	09 f0       	breq	.+2      	; 0xc02e <f_write+0x1fe>
    c02c:	9b cf       	rjmp	.-202    	; 0xbf64 <f_write+0x134>
    c02e:	f7 01       	movw	r30, r14
    c030:	80 8d       	ldd	r24, Z+24	; 0x18
    c032:	91 8d       	ldd	r25, Z+25	; 0x19
    c034:	a2 8d       	ldd	r26, Z+26	; 0x1a
    c036:	b3 8d       	ldd	r27, Z+27	; 0x1b
    c038:	82 19       	sub	r24, r2
    c03a:	93 09       	sbc	r25, r3
    c03c:	a4 09       	sbc	r26, r4
    c03e:	b5 09       	sbc	r27, r5
    c040:	a6 01       	movw	r20, r12
    c042:	60 e0       	ldi	r22, 0x00	; 0
    c044:	70 e0       	ldi	r23, 0x00	; 0
    c046:	84 17       	cp	r24, r20
    c048:	95 07       	cpc	r25, r21
    c04a:	a6 07       	cpc	r26, r22
    c04c:	b7 07       	cpc	r27, r23
    c04e:	80 f4       	brcc	.+32     	; 0xc070 <f_write+0x240>
    c050:	98 2f       	mov	r25, r24
    c052:	88 27       	eor	r24, r24
    c054:	99 0f       	add	r25, r25
    c056:	b3 01       	movw	r22, r6
    c058:	68 0f       	add	r22, r24
    c05a:	79 1f       	adc	r23, r25
    c05c:	40 e0       	ldi	r20, 0x00	; 0
    c05e:	52 e0       	ldi	r21, 0x02	; 2
    c060:	8d 81       	ldd	r24, Y+5	; 0x05
    c062:	9e 81       	ldd	r25, Y+6	; 0x06
    c064:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    c068:	f7 01       	movw	r30, r14
    c06a:	86 85       	ldd	r24, Z+14	; 0x0e
    c06c:	8f 77       	andi	r24, 0x7F	; 127
    c06e:	86 87       	std	Z+14, r24	; 0x0e
    c070:	dc 2c       	mov	r13, r12
    c072:	cc 24       	eor	r12, r12
    c074:	dd 0c       	add	r13, r13
    c076:	43 c0       	rjmp	.+134    	; 0xc0fe <f_write+0x2ce>
    c078:	f7 01       	movw	r30, r14
    c07a:	80 8d       	ldd	r24, Z+24	; 0x18
    c07c:	91 8d       	ldd	r25, Z+25	; 0x19
    c07e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    c080:	b3 8d       	ldd	r27, Z+27	; 0x1b
    c082:	28 16       	cp	r2, r24
    c084:	39 06       	cpc	r3, r25
    c086:	4a 06       	cpc	r4, r26
    c088:	5b 06       	cpc	r5, r27
    c08a:	d9 f0       	breq	.+54     	; 0xc0c2 <f_write+0x292>
    c08c:	40 89       	ldd	r20, Z+16	; 0x10
    c08e:	51 89       	ldd	r21, Z+17	; 0x11
    c090:	62 89       	ldd	r22, Z+18	; 0x12
    c092:	73 89       	ldd	r23, Z+19	; 0x13
    c094:	82 85       	ldd	r24, Z+10	; 0x0a
    c096:	93 85       	ldd	r25, Z+11	; 0x0b
    c098:	a4 85       	ldd	r26, Z+12	; 0x0c
    c09a:	b5 85       	ldd	r27, Z+13	; 0x0d
    c09c:	48 17       	cp	r20, r24
    c09e:	59 07       	cpc	r21, r25
    c0a0:	6a 07       	cpc	r22, r26
    c0a2:	7b 07       	cpc	r23, r27
    c0a4:	70 f4       	brcc	.+28     	; 0xc0c2 <f_write+0x292>
    c0a6:	01 e0       	ldi	r16, 0x01	; 1
    c0a8:	10 e0       	ldi	r17, 0x00	; 0
    c0aa:	a2 01       	movw	r20, r4
    c0ac:	91 01       	movw	r18, r2
    c0ae:	6d 81       	ldd	r22, Y+5	; 0x05
    c0b0:	7e 81       	ldd	r23, Y+6	; 0x06
    c0b2:	eb 81       	ldd	r30, Y+3	; 0x03
    c0b4:	fc 81       	ldd	r31, Y+4	; 0x04
    c0b6:	81 81       	ldd	r24, Z+1	; 0x01
    c0b8:	0e 94 45 6c 	call	0xd88a	; 0xd88a <disk_read>
    c0bc:	89 2b       	or	r24, r25
    c0be:	09 f0       	breq	.+2      	; 0xc0c2 <f_write+0x292>
    c0c0:	51 cf       	rjmp	.-350    	; 0xbf64 <f_write+0x134>
    c0c2:	f7 01       	movw	r30, r14
    c0c4:	20 8e       	std	Z+24, r2	; 0x18
    c0c6:	31 8e       	std	Z+25, r3	; 0x19
    c0c8:	42 8e       	std	Z+26, r4	; 0x1a
    c0ca:	53 8e       	std	Z+27, r5	; 0x1b
    c0cc:	f7 01       	movw	r30, r14
    c0ce:	80 89       	ldd	r24, Z+16	; 0x10
    c0d0:	91 89       	ldd	r25, Z+17	; 0x11
    c0d2:	91 70       	andi	r25, 0x01	; 1
    c0d4:	20 e0       	ldi	r18, 0x00	; 0
    c0d6:	32 e0       	ldi	r19, 0x02	; 2
    c0d8:	28 1b       	sub	r18, r24
    c0da:	39 0b       	sbc	r19, r25
    c0dc:	65 01       	movw	r12, r10
    c0de:	2a 15       	cp	r18, r10
    c0e0:	3b 05       	cpc	r19, r11
    c0e2:	08 f4       	brcc	.+2      	; 0xc0e6 <f_write+0x2b6>
    c0e4:	69 01       	movw	r12, r18
    c0e6:	a6 01       	movw	r20, r12
    c0e8:	b3 01       	movw	r22, r6
    c0ea:	2d 81       	ldd	r18, Y+5	; 0x05
    c0ec:	3e 81       	ldd	r19, Y+6	; 0x06
    c0ee:	82 0f       	add	r24, r18
    c0f0:	93 1f       	adc	r25, r19
    c0f2:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    c0f6:	f7 01       	movw	r30, r14
    c0f8:	86 85       	ldd	r24, Z+14	; 0x0e
    c0fa:	80 68       	ori	r24, 0x80	; 128
    c0fc:	86 87       	std	Z+14, r24	; 0x0e
    c0fe:	ac 18       	sub	r10, r12
    c100:	bd 08       	sbc	r11, r13
    c102:	ef 81       	ldd	r30, Y+7	; 0x07
    c104:	f8 85       	ldd	r31, Y+8	; 0x08
    c106:	80 81       	ld	r24, Z
    c108:	91 81       	ldd	r25, Z+1	; 0x01
    c10a:	8c 0d       	add	r24, r12
    c10c:	9d 1d       	adc	r25, r13
    c10e:	91 83       	std	Z+1, r25	; 0x01
    c110:	80 83       	st	Z, r24
    c112:	6c 0c       	add	r6, r12
    c114:	7d 1c       	adc	r7, r13
    c116:	f7 01       	movw	r30, r14
    c118:	80 89       	ldd	r24, Z+16	; 0x10
    c11a:	91 89       	ldd	r25, Z+17	; 0x11
    c11c:	a2 89       	ldd	r26, Z+18	; 0x12
    c11e:	b3 89       	ldd	r27, Z+19	; 0x13
    c120:	8c 0d       	add	r24, r12
    c122:	9d 1d       	adc	r25, r13
    c124:	a1 1d       	adc	r26, r1
    c126:	b1 1d       	adc	r27, r1
    c128:	80 8b       	std	Z+16, r24	; 0x10
    c12a:	91 8b       	std	Z+17, r25	; 0x11
    c12c:	a2 8b       	std	Z+18, r26	; 0x12
    c12e:	b3 8b       	std	Z+19, r27	; 0x13
    c130:	42 85       	ldd	r20, Z+10	; 0x0a
    c132:	53 85       	ldd	r21, Z+11	; 0x0b
    c134:	64 85       	ldd	r22, Z+12	; 0x0c
    c136:	75 85       	ldd	r23, Z+13	; 0x0d
    c138:	48 17       	cp	r20, r24
    c13a:	59 07       	cpc	r21, r25
    c13c:	6a 07       	cpc	r22, r26
    c13e:	7b 07       	cpc	r23, r27
    c140:	10 f4       	brcc	.+4      	; 0xc146 <f_write+0x316>
    c142:	ac 01       	movw	r20, r24
    c144:	bd 01       	movw	r22, r26
    c146:	f7 01       	movw	r30, r14
    c148:	42 87       	std	Z+10, r20	; 0x0a
    c14a:	53 87       	std	Z+11, r21	; 0x0b
    c14c:	64 87       	std	Z+12, r22	; 0x0c
    c14e:	75 87       	std	Z+13, r23	; 0x0d
    c150:	a5 ce       	rjmp	.-694    	; 0xbe9c <f_write+0x6c>
    c152:	87 e0       	ldi	r24, 0x07	; 7
    c154:	90 e0       	ldi	r25, 0x00	; 0
    c156:	28 96       	adiw	r28, 0x08	; 8
    c158:	e2 e1       	ldi	r30, 0x12	; 18
    c15a:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000c15e <f_sync>:
    c15e:	8f 92       	push	r8
    c160:	9f 92       	push	r9
    c162:	af 92       	push	r10
    c164:	bf 92       	push	r11
    c166:	ef 92       	push	r14
    c168:	ff 92       	push	r15
    c16a:	0f 93       	push	r16
    c16c:	1f 93       	push	r17
    c16e:	cf 93       	push	r28
    c170:	df 93       	push	r29
    c172:	00 d0       	rcall	.+0      	; 0xc174 <f_sync+0x16>
    c174:	cd b7       	in	r28, 0x3d	; 61
    c176:	de b7       	in	r29, 0x3e	; 62
    c178:	7c 01       	movw	r14, r24
    c17a:	be 01       	movw	r22, r28
    c17c:	6f 5f       	subi	r22, 0xFF	; 255
    c17e:	7f 4f       	sbci	r23, 0xFF	; 255
    c180:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    c184:	00 97       	sbiw	r24, 0x00	; 0
    c186:	09 f0       	breq	.+2      	; 0xc18a <f_sync+0x2c>
    c188:	5d c0       	rjmp	.+186    	; 0xc244 <f_sync+0xe6>
    c18a:	f7 01       	movw	r30, r14
    c18c:	86 85       	ldd	r24, Z+14	; 0x0e
    c18e:	86 ff       	sbrs	r24, 6
    c190:	55 c0       	rjmp	.+170    	; 0xc23c <f_sync+0xde>
    c192:	87 ff       	sbrs	r24, 7
    c194:	15 c0       	rjmp	.+42     	; 0xc1c0 <f_sync+0x62>
    c196:	20 8d       	ldd	r18, Z+24	; 0x18
    c198:	31 8d       	ldd	r19, Z+25	; 0x19
    c19a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c19c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c19e:	e9 81       	ldd	r30, Y+1	; 0x01
    c1a0:	fa 81       	ldd	r31, Y+2	; 0x02
    c1a2:	01 e0       	ldi	r16, 0x01	; 1
    c1a4:	10 e0       	ldi	r17, 0x00	; 0
    c1a6:	b7 01       	movw	r22, r14
    c1a8:	6c 5d       	subi	r22, 0xDC	; 220
    c1aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c1ac:	81 81       	ldd	r24, Z+1	; 0x01
    c1ae:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    c1b2:	89 2b       	or	r24, r25
    c1b4:	09 f0       	breq	.+2      	; 0xc1b8 <f_sync+0x5a>
    c1b6:	44 c0       	rjmp	.+136    	; 0xc240 <f_sync+0xe2>
    c1b8:	f7 01       	movw	r30, r14
    c1ba:	86 85       	ldd	r24, Z+14	; 0x0e
    c1bc:	8f 77       	andi	r24, 0x7F	; 127
    c1be:	86 87       	std	Z+14, r24	; 0x0e
    c1c0:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <get_fattime>
    c1c4:	4b 01       	movw	r8, r22
    c1c6:	5c 01       	movw	r10, r24
    c1c8:	f7 01       	movw	r30, r14
    c1ca:	44 8d       	ldd	r20, Z+28	; 0x1c
    c1cc:	55 8d       	ldd	r21, Z+29	; 0x1d
    c1ce:	66 8d       	ldd	r22, Z+30	; 0x1e
    c1d0:	77 8d       	ldd	r23, Z+31	; 0x1f
    c1d2:	89 81       	ldd	r24, Y+1	; 0x01
    c1d4:	9a 81       	ldd	r25, Y+2	; 0x02
    c1d6:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    c1da:	00 97       	sbiw	r24, 0x00	; 0
    c1dc:	99 f5       	brne	.+102    	; 0xc244 <f_sync+0xe6>
    c1de:	f7 01       	movw	r30, r14
    c1e0:	00 a1       	ldd	r16, Z+32	; 0x20
    c1e2:	11 a1       	ldd	r17, Z+33	; 0x21
    c1e4:	f8 01       	movw	r30, r16
    c1e6:	83 85       	ldd	r24, Z+11	; 0x0b
    c1e8:	80 62       	ori	r24, 0x20	; 32
    c1ea:	83 87       	std	Z+11, r24	; 0x0b
    c1ec:	f7 01       	movw	r30, r14
    c1ee:	26 81       	ldd	r18, Z+6	; 0x06
    c1f0:	37 81       	ldd	r19, Z+7	; 0x07
    c1f2:	40 85       	ldd	r20, Z+8	; 0x08
    c1f4:	51 85       	ldd	r21, Z+9	; 0x09
    c1f6:	b8 01       	movw	r22, r16
    c1f8:	80 81       	ld	r24, Z
    c1fa:	91 81       	ldd	r25, Z+1	; 0x01
    c1fc:	0e 94 30 4c 	call	0x9860	; 0x9860 <st_clust.isra.5>
    c200:	f7 01       	movw	r30, r14
    c202:	42 85       	ldd	r20, Z+10	; 0x0a
    c204:	53 85       	ldd	r21, Z+11	; 0x0b
    c206:	64 85       	ldd	r22, Z+12	; 0x0c
    c208:	75 85       	ldd	r23, Z+13	; 0x0d
    c20a:	c8 01       	movw	r24, r16
    c20c:	4c 96       	adiw	r24, 0x1c	; 28
    c20e:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
    c212:	b5 01       	movw	r22, r10
    c214:	a4 01       	movw	r20, r8
    c216:	c8 01       	movw	r24, r16
    c218:	46 96       	adiw	r24, 0x16	; 22
    c21a:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
    c21e:	f8 01       	movw	r30, r16
    c220:	12 8a       	std	Z+18, r1	; 0x12
    c222:	13 8a       	std	Z+19, r1	; 0x13
    c224:	89 81       	ldd	r24, Y+1	; 0x01
    c226:	9a 81       	ldd	r25, Y+2	; 0x02
    c228:	21 e0       	ldi	r18, 0x01	; 1
    c22a:	fc 01       	movw	r30, r24
    c22c:	23 83       	std	Z+3, r18	; 0x03
    c22e:	0e 94 90 4c 	call	0x9920	; 0x9920 <sync_fs>
    c232:	f7 01       	movw	r30, r14
    c234:	26 85       	ldd	r18, Z+14	; 0x0e
    c236:	2f 7b       	andi	r18, 0xBF	; 191
    c238:	26 87       	std	Z+14, r18	; 0x0e
    c23a:	04 c0       	rjmp	.+8      	; 0xc244 <f_sync+0xe6>
    c23c:	80 e0       	ldi	r24, 0x00	; 0
    c23e:	01 c0       	rjmp	.+2      	; 0xc242 <f_sync+0xe4>
    c240:	81 e0       	ldi	r24, 0x01	; 1
    c242:	90 e0       	ldi	r25, 0x00	; 0
    c244:	0f 90       	pop	r0
    c246:	0f 90       	pop	r0
    c248:	df 91       	pop	r29
    c24a:	cf 91       	pop	r28
    c24c:	1f 91       	pop	r17
    c24e:	0f 91       	pop	r16
    c250:	ff 90       	pop	r15
    c252:	ef 90       	pop	r14
    c254:	bf 90       	pop	r11
    c256:	af 90       	pop	r10
    c258:	9f 90       	pop	r9
    c25a:	8f 90       	pop	r8
    c25c:	08 95       	ret

0000c25e <f_close>:
    c25e:	a2 e0       	ldi	r26, 0x02	; 2
    c260:	b0 e0       	ldi	r27, 0x00	; 0
    c262:	e5 e3       	ldi	r30, 0x35	; 53
    c264:	f1 e6       	ldi	r31, 0x61	; 97
    c266:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    c26a:	8c 01       	movw	r16, r24
    c26c:	78 df       	rcall	.-272    	; 0xc15e <f_sync>
    c26e:	00 97       	sbiw	r24, 0x00	; 0
    c270:	59 f4       	brne	.+22     	; 0xc288 <f_close+0x2a>
    c272:	be 01       	movw	r22, r28
    c274:	6f 5f       	subi	r22, 0xFF	; 255
    c276:	7f 4f       	sbci	r23, 0xFF	; 255
    c278:	c8 01       	movw	r24, r16
    c27a:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    c27e:	00 97       	sbiw	r24, 0x00	; 0
    c280:	19 f4       	brne	.+6      	; 0xc288 <f_close+0x2a>
    c282:	f8 01       	movw	r30, r16
    c284:	11 82       	std	Z+1, r1	; 0x01
    c286:	10 82       	st	Z, r1
    c288:	22 96       	adiw	r28, 0x02	; 2
    c28a:	e4 e0       	ldi	r30, 0x04	; 4
    c28c:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

0000c290 <f_chdir>:
    c290:	a2 e3       	ldi	r26, 0x32	; 50
    c292:	b0 e0       	ldi	r27, 0x00	; 0
    c294:	ee e4       	ldi	r30, 0x4E	; 78
    c296:	f1 e6       	ldi	r31, 0x61	; 97
    c298:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    c29c:	9a ab       	std	Y+50, r25	; 0x32
    c29e:	89 ab       	std	Y+49, r24	; 0x31
    c2a0:	40 e0       	ldi	r20, 0x00	; 0
    c2a2:	be 01       	movw	r22, r28
    c2a4:	61 5d       	subi	r22, 0xD1	; 209
    c2a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c2a8:	ce 01       	movw	r24, r28
    c2aa:	c1 96       	adiw	r24, 0x31	; 49
    c2ac:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    c2b0:	00 97       	sbiw	r24, 0x00	; 0
    c2b2:	09 f0       	breq	.+2      	; 0xc2b6 <f_chdir+0x26>
    c2b4:	44 c0       	rjmp	.+136    	; 0xc33e <f_chdir+0xae>
    c2b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    c2b8:	98 a9       	ldd	r25, Y+48	; 0x30
    c2ba:	9a 83       	std	Y+2, r25	; 0x02
    c2bc:	89 83       	std	Y+1, r24	; 0x01
    c2be:	80 e0       	ldi	r24, 0x00	; 0
    c2c0:	92 e0       	ldi	r25, 0x02	; 2
    c2c2:	0e 94 89 6b 	call	0xd712	; 0xd712 <ff_memalloc>
    c2c6:	7c 01       	movw	r14, r24
    c2c8:	00 97       	sbiw	r24, 0x00	; 0
    c2ca:	a9 f1       	breq	.+106    	; 0xc336 <f_chdir+0xa6>
    c2cc:	ef a5       	ldd	r30, Y+47	; 0x2f
    c2ce:	f8 a9       	ldd	r31, Y+48	; 0x30
    c2d0:	94 87       	std	Z+12, r25	; 0x0c
    c2d2:	83 87       	std	Z+11, r24	; 0x0b
    c2d4:	69 a9       	ldd	r22, Y+49	; 0x31
    c2d6:	7a a9       	ldd	r23, Y+50	; 0x32
    c2d8:	ce 01       	movw	r24, r28
    c2da:	01 96       	adiw	r24, 0x01	; 1
    c2dc:	31 d8       	rcall	.-3998   	; 0xb340 <follow_path>
    c2de:	8c 01       	movw	r16, r24
    c2e0:	89 2b       	or	r24, r25
    c2e2:	09 f5       	brne	.+66     	; 0xc326 <f_chdir+0x96>
    c2e4:	88 a5       	ldd	r24, Y+40	; 0x28
    c2e6:	87 ff       	sbrs	r24, 7
    c2e8:	0b c0       	rjmp	.+22     	; 0xc300 <f_chdir+0x70>
    c2ea:	ef a5       	ldd	r30, Y+47	; 0x2f
    c2ec:	f8 a9       	ldd	r31, Y+48	; 0x30
    c2ee:	8f 81       	ldd	r24, Y+7	; 0x07
    c2f0:	98 85       	ldd	r25, Y+8	; 0x08
    c2f2:	a9 85       	ldd	r26, Y+9	; 0x09
    c2f4:	ba 85       	ldd	r27, Y+10	; 0x0a
    c2f6:	85 8b       	std	Z+21, r24	; 0x15
    c2f8:	96 8b       	std	Z+22, r25	; 0x16
    c2fa:	a7 8b       	std	Z+23, r26	; 0x17
    c2fc:	b0 8f       	std	Z+24, r27	; 0x18
    c2fe:	13 c0       	rjmp	.+38     	; 0xc326 <f_chdir+0x96>
    c300:	8d 81       	ldd	r24, Y+5	; 0x05
    c302:	84 ff       	sbrs	r24, 4
    c304:	0e c0       	rjmp	.+28     	; 0xc322 <f_chdir+0x92>
    c306:	cf a4       	ldd	r12, Y+47	; 0x2f
    c308:	d8 a8       	ldd	r13, Y+48	; 0x30
    c30a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c30c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c30e:	f6 01       	movw	r30, r12
    c310:	80 81       	ld	r24, Z
    c312:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    c316:	f6 01       	movw	r30, r12
    c318:	65 8b       	std	Z+21, r22	; 0x15
    c31a:	76 8b       	std	Z+22, r23	; 0x16
    c31c:	87 8b       	std	Z+23, r24	; 0x17
    c31e:	90 8f       	std	Z+24, r25	; 0x18
    c320:	02 c0       	rjmp	.+4      	; 0xc326 <f_chdir+0x96>
    c322:	05 e0       	ldi	r16, 0x05	; 5
    c324:	10 e0       	ldi	r17, 0x00	; 0
    c326:	c7 01       	movw	r24, r14
    c328:	0e 94 8c 6b 	call	0xd718	; 0xd718 <ff_memfree>
    c32c:	04 30       	cpi	r16, 0x04	; 4
    c32e:	11 05       	cpc	r17, r1
    c330:	29 f4       	brne	.+10     	; 0xc33c <f_chdir+0xac>
    c332:	85 e0       	ldi	r24, 0x05	; 5
    c334:	01 c0       	rjmp	.+2      	; 0xc338 <f_chdir+0xa8>
    c336:	81 e1       	ldi	r24, 0x11	; 17
    c338:	90 e0       	ldi	r25, 0x00	; 0
    c33a:	01 c0       	rjmp	.+2      	; 0xc33e <f_chdir+0xae>
    c33c:	c8 01       	movw	r24, r16
    c33e:	e2 96       	adiw	r28, 0x32	; 50
    c340:	e8 e0       	ldi	r30, 0x08	; 8
    c342:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000c346 <f_getcwd>:
    c346:	a8 e4       	ldi	r26, 0x48	; 72
    c348:	b1 e0       	ldi	r27, 0x01	; 1
    c34a:	e9 ea       	ldi	r30, 0xA9	; 169
    c34c:	f1 e6       	ldi	r31, 0x61	; 97
    c34e:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    c352:	c9 5b       	subi	r28, 0xB9	; 185
    c354:	de 4f       	sbci	r29, 0xFE	; 254
    c356:	99 83       	std	Y+1, r25	; 0x01
    c358:	88 83       	st	Y, r24
    c35a:	c7 54       	subi	r28, 0x47	; 71
    c35c:	d1 40       	sbci	r29, 0x01	; 1
    c35e:	4b 01       	movw	r8, r22
    c360:	7c 01       	movw	r14, r24
    c362:	fc 01       	movw	r30, r24
    c364:	10 82       	st	Z, r1
    c366:	40 e0       	ldi	r20, 0x00	; 0
    c368:	be 01       	movw	r22, r28
    c36a:	6b 5b       	subi	r22, 0xBB	; 187
    c36c:	7e 4f       	sbci	r23, 0xFE	; 254
    c36e:	ce 01       	movw	r24, r28
    c370:	89 5b       	subi	r24, 0xB9	; 185
    c372:	9e 4f       	sbci	r25, 0xFE	; 254
    c374:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    c378:	1c 01       	movw	r2, r24
    c37a:	89 2b       	or	r24, r25
    c37c:	09 f0       	breq	.+2      	; 0xc380 <f_getcwd+0x3a>
    c37e:	03 c1       	rjmp	.+518    	; 0xc586 <f_getcwd+0x240>
    c380:	cb 5b       	subi	r28, 0xBB	; 187
    c382:	de 4f       	sbci	r29, 0xFE	; 254
    c384:	88 81       	ld	r24, Y
    c386:	99 81       	ldd	r25, Y+1	; 0x01
    c388:	c5 54       	subi	r28, 0x45	; 69
    c38a:	d1 40       	sbci	r29, 0x01	; 1
    c38c:	c9 5e       	subi	r28, 0xE9	; 233
    c38e:	de 4f       	sbci	r29, 0xFE	; 254
    c390:	99 83       	std	Y+1, r25	; 0x01
    c392:	88 83       	st	Y, r24
    c394:	c7 51       	subi	r28, 0x17	; 23
    c396:	d1 40       	sbci	r29, 0x01	; 1
    c398:	80 e0       	ldi	r24, 0x00	; 0
    c39a:	92 e0       	ldi	r25, 0x02	; 2
    c39c:	0e 94 89 6b 	call	0xd712	; 0xd712 <ff_memalloc>
    c3a0:	5c 01       	movw	r10, r24
    c3a2:	00 97       	sbiw	r24, 0x00	; 0
    c3a4:	09 f4       	brne	.+2      	; 0xc3a8 <f_getcwd+0x62>
    c3a6:	f3 c0       	rjmp	.+486    	; 0xc58e <f_getcwd+0x248>
    c3a8:	cb 5b       	subi	r28, 0xBB	; 187
    c3aa:	de 4f       	sbci	r29, 0xFE	; 254
    c3ac:	e8 81       	ld	r30, Y
    c3ae:	f9 81       	ldd	r31, Y+1	; 0x01
    c3b0:	c5 54       	subi	r28, 0x45	; 69
    c3b2:	d1 40       	sbci	r29, 0x01	; 1
    c3b4:	94 87       	std	Z+12, r25	; 0x0c
    c3b6:	83 87       	std	Z+11, r24	; 0x0b
    c3b8:	85 89       	ldd	r24, Z+21	; 0x15
    c3ba:	96 89       	ldd	r25, Z+22	; 0x16
    c3bc:	a7 89       	ldd	r26, Z+23	; 0x17
    c3be:	b0 8d       	ldd	r27, Z+24	; 0x18
    c3c0:	c3 5e       	subi	r28, 0xE3	; 227
    c3c2:	de 4f       	sbci	r29, 0xFE	; 254
    c3c4:	88 83       	st	Y, r24
    c3c6:	99 83       	std	Y+1, r25	; 0x01
    c3c8:	aa 83       	std	Y+2, r26	; 0x02
    c3ca:	bb 83       	std	Y+3, r27	; 0x03
    c3cc:	cd 51       	subi	r28, 0x1D	; 29
    c3ce:	d1 40       	sbci	r29, 0x01	; 1
    c3d0:	84 01       	movw	r16, r8
    c3d2:	ce 01       	movw	r24, r28
    c3d4:	01 96       	adiw	r24, 0x01	; 1
    c3d6:	6c 01       	movw	r12, r24
    c3d8:	c3 5e       	subi	r28, 0xE3	; 227
    c3da:	de 4f       	sbci	r29, 0xFE	; 254
    c3dc:	48 80       	ld	r4, Y
    c3de:	59 80       	ldd	r5, Y+1	; 0x01
    c3e0:	6a 80       	ldd	r6, Y+2	; 0x02
    c3e2:	7b 80       	ldd	r7, Y+3	; 0x03
    c3e4:	cd 51       	subi	r28, 0x1D	; 29
    c3e6:	d1 40       	sbci	r29, 0x01	; 1
    c3e8:	41 14       	cp	r4, r1
    c3ea:	51 04       	cpc	r5, r1
    c3ec:	61 04       	cpc	r6, r1
    c3ee:	71 04       	cpc	r7, r1
    c3f0:	09 f4       	brne	.+2      	; 0xc3f4 <f_getcwd+0xae>
    c3f2:	a3 c0       	rjmp	.+326    	; 0xc53a <f_getcwd+0x1f4>
    c3f4:	40 e2       	ldi	r20, 0x20	; 32
    c3f6:	50 e0       	ldi	r21, 0x00	; 0
    c3f8:	60 e0       	ldi	r22, 0x00	; 0
    c3fa:	70 e0       	ldi	r23, 0x00	; 0
    c3fc:	ce 01       	movw	r24, r28
    c3fe:	89 5e       	subi	r24, 0xE9	; 233
    c400:	9e 4f       	sbci	r25, 0xFE	; 254
    c402:	0e 94 3a 52 	call	0xa474	; 0xa474 <dir_sdi>
    c406:	00 97       	sbiw	r24, 0x00	; 0
    c408:	09 f0       	breq	.+2      	; 0xc40c <f_getcwd+0xc6>
    c40a:	c6 c0       	rjmp	.+396    	; 0xc598 <f_getcwd+0x252>
    c40c:	c3 5d       	subi	r28, 0xD3	; 211
    c40e:	de 4f       	sbci	r29, 0xFE	; 254
    c410:	48 81       	ld	r20, Y
    c412:	59 81       	ldd	r21, Y+1	; 0x01
    c414:	6a 81       	ldd	r22, Y+2	; 0x02
    c416:	7b 81       	ldd	r23, Y+3	; 0x03
    c418:	cd 52       	subi	r28, 0x2D	; 45
    c41a:	d1 40       	sbci	r29, 0x01	; 1
    c41c:	cb 5b       	subi	r28, 0xBB	; 187
    c41e:	de 4f       	sbci	r29, 0xFE	; 254
    c420:	88 81       	ld	r24, Y
    c422:	99 81       	ldd	r25, Y+1	; 0x01
    c424:	c5 54       	subi	r28, 0x45	; 69
    c426:	d1 40       	sbci	r29, 0x01	; 1
    c428:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    c42c:	00 97       	sbiw	r24, 0x00	; 0
    c42e:	09 f0       	breq	.+2      	; 0xc432 <f_getcwd+0xec>
    c430:	b3 c0       	rjmp	.+358    	; 0xc598 <f_getcwd+0x252>
    c432:	cf 5c       	subi	r28, 0xCF	; 207
    c434:	de 4f       	sbci	r29, 0xFE	; 254
    c436:	68 81       	ld	r22, Y
    c438:	79 81       	ldd	r23, Y+1	; 0x01
    c43a:	c1 53       	subi	r28, 0x31	; 49
    c43c:	d1 40       	sbci	r29, 0x01	; 1
    c43e:	cb 5b       	subi	r28, 0xBB	; 187
    c440:	de 4f       	sbci	r29, 0xFE	; 254
    c442:	e8 81       	ld	r30, Y
    c444:	f9 81       	ldd	r31, Y+1	; 0x01
    c446:	c5 54       	subi	r28, 0x45	; 69
    c448:	d1 40       	sbci	r29, 0x01	; 1
    c44a:	80 81       	ld	r24, Z
    c44c:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    c450:	c3 5e       	subi	r28, 0xE3	; 227
    c452:	de 4f       	sbci	r29, 0xFE	; 254
    c454:	68 83       	st	Y, r22
    c456:	79 83       	std	Y+1, r23	; 0x01
    c458:	8a 83       	std	Y+2, r24	; 0x02
    c45a:	9b 83       	std	Y+3, r25	; 0x03
    c45c:	cd 51       	subi	r28, 0x1D	; 29
    c45e:	d1 40       	sbci	r29, 0x01	; 1
    c460:	40 e0       	ldi	r20, 0x00	; 0
    c462:	50 e0       	ldi	r21, 0x00	; 0
    c464:	ba 01       	movw	r22, r20
    c466:	ce 01       	movw	r24, r28
    c468:	89 5e       	subi	r24, 0xE9	; 233
    c46a:	9e 4f       	sbci	r25, 0xFE	; 254
    c46c:	0e 94 3a 52 	call	0xa474	; 0xa474 <dir_sdi>
    c470:	00 97       	sbiw	r24, 0x00	; 0
    c472:	09 f0       	breq	.+2      	; 0xc476 <f_getcwd+0x130>
    c474:	91 c0       	rjmp	.+290    	; 0xc598 <f_getcwd+0x252>
    c476:	60 e0       	ldi	r22, 0x00	; 0
    c478:	70 e0       	ldi	r23, 0x00	; 0
    c47a:	ce 01       	movw	r24, r28
    c47c:	89 5e       	subi	r24, 0xE9	; 233
    c47e:	9e 4f       	sbci	r25, 0xFE	; 254
    c480:	0e 94 d4 55 	call	0xaba8	; 0xaba8 <dir_read>
    c484:	00 97       	sbiw	r24, 0x00	; 0
    c486:	09 f0       	breq	.+2      	; 0xc48a <f_getcwd+0x144>
    c488:	89 c0       	rjmp	.+274    	; 0xc59c <f_getcwd+0x256>
    c48a:	cf 5c       	subi	r28, 0xCF	; 207
    c48c:	de 4f       	sbci	r29, 0xFE	; 254
    c48e:	68 81       	ld	r22, Y
    c490:	79 81       	ldd	r23, Y+1	; 0x01
    c492:	c1 53       	subi	r28, 0x31	; 49
    c494:	d1 40       	sbci	r29, 0x01	; 1
    c496:	cb 5b       	subi	r28, 0xBB	; 187
    c498:	de 4f       	sbci	r29, 0xFE	; 254
    c49a:	e8 81       	ld	r30, Y
    c49c:	f9 81       	ldd	r31, Y+1	; 0x01
    c49e:	c5 54       	subi	r28, 0x45	; 69
    c4a0:	d1 40       	sbci	r29, 0x01	; 1
    c4a2:	80 81       	ld	r24, Z
    c4a4:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    c4a8:	46 16       	cp	r4, r22
    c4aa:	57 06       	cpc	r5, r23
    c4ac:	68 06       	cpc	r6, r24
    c4ae:	79 06       	cpc	r7, r25
    c4b0:	41 f4       	brne	.+16     	; 0xc4c2 <f_getcwd+0x17c>
    c4b2:	b6 01       	movw	r22, r12
    c4b4:	ce 01       	movw	r24, r28
    c4b6:	89 5e       	subi	r24, 0xE9	; 233
    c4b8:	9e 4f       	sbci	r25, 0xFE	; 254
    c4ba:	0e 94 02 4b 	call	0x9604	; 0x9604 <get_fileinfo>
    c4be:	f6 01       	movw	r30, r12
    c4c0:	0a c0       	rjmp	.+20     	; 0xc4d6 <f_getcwd+0x190>
    c4c2:	60 e0       	ldi	r22, 0x00	; 0
    c4c4:	70 e0       	ldi	r23, 0x00	; 0
    c4c6:	ce 01       	movw	r24, r28
    c4c8:	89 5e       	subi	r24, 0xE9	; 233
    c4ca:	9e 4f       	sbci	r25, 0xFE	; 254
    c4cc:	0e 94 b2 54 	call	0xa964	; 0xa964 <dir_next>
    c4d0:	00 97       	sbiw	r24, 0x00	; 0
    c4d2:	89 f2       	breq	.-94     	; 0xc476 <f_getcwd+0x130>
    c4d4:	63 c0       	rjmp	.+198    	; 0xc59c <f_getcwd+0x256>
    c4d6:	cf 01       	movw	r24, r30
    c4d8:	8c 19       	sub	r24, r12
    c4da:	9d 09       	sbc	r25, r13
    c4dc:	31 96       	adiw	r30, 0x01	; 1
    c4de:	25 89       	ldd	r18, Z+21	; 0x15
    c4e0:	21 11       	cpse	r18, r1
    c4e2:	f9 cf       	rjmp	.-14     	; 0xc4d6 <f_getcwd+0x190>
    c4e4:	9c 01       	movw	r18, r24
    c4e6:	2f 5f       	subi	r18, 0xFF	; 255
    c4e8:	3f 4f       	sbci	r19, 0xFF	; 255
    c4ea:	02 17       	cp	r16, r18
    c4ec:	13 07       	cpc	r17, r19
    c4ee:	08 f4       	brcc	.+2      	; 0xc4f2 <f_getcwd+0x1ac>
    c4f0:	51 c0       	rjmp	.+162    	; 0xc594 <f_getcwd+0x24e>
    c4f2:	f6 01       	movw	r30, r12
    c4f4:	e8 0f       	add	r30, r24
    c4f6:	f9 1f       	adc	r31, r25
    c4f8:	98 01       	movw	r18, r16
    c4fa:	ce 16       	cp	r12, r30
    c4fc:	df 06       	cpc	r13, r31
    c4fe:	71 f0       	breq	.+28     	; 0xc51c <f_getcwd+0x1d6>
    c500:	21 50       	subi	r18, 0x01	; 1
    c502:	31 09       	sbc	r19, r1
    c504:	45 89       	ldd	r20, Z+21	; 0x15
    c506:	c9 5b       	subi	r28, 0xB9	; 185
    c508:	de 4f       	sbci	r29, 0xFE	; 254
    c50a:	a8 81       	ld	r26, Y
    c50c:	b9 81       	ldd	r27, Y+1	; 0x01
    c50e:	c7 54       	subi	r28, 0x47	; 71
    c510:	d1 40       	sbci	r29, 0x01	; 1
    c512:	a2 0f       	add	r26, r18
    c514:	b3 1f       	adc	r27, r19
    c516:	4c 93       	st	X, r20
    c518:	31 97       	sbiw	r30, 0x01	; 1
    c51a:	ef cf       	rjmp	.-34     	; 0xc4fa <f_getcwd+0x1b4>
    c51c:	80 95       	com	r24
    c51e:	90 95       	com	r25
    c520:	08 0f       	add	r16, r24
    c522:	19 1f       	adc	r17, r25
    c524:	c9 5b       	subi	r28, 0xB9	; 185
    c526:	de 4f       	sbci	r29, 0xFE	; 254
    c528:	e8 81       	ld	r30, Y
    c52a:	f9 81       	ldd	r31, Y+1	; 0x01
    c52c:	c7 54       	subi	r28, 0x47	; 71
    c52e:	d1 40       	sbci	r29, 0x01	; 1
    c530:	e0 0f       	add	r30, r16
    c532:	f1 1f       	adc	r31, r17
    c534:	9f e2       	ldi	r25, 0x2F	; 47
    c536:	90 83       	st	Z, r25
    c538:	4f cf       	rjmp	.-354    	; 0xc3d8 <f_getcwd+0x92>
    c53a:	08 15       	cp	r16, r8
    c53c:	19 05       	cpc	r17, r9
    c53e:	61 f4       	brne	.+24     	; 0xc558 <f_getcwd+0x212>
    c540:	01 50       	subi	r16, 0x01	; 1
    c542:	11 09       	sbc	r17, r1
    c544:	c9 5b       	subi	r28, 0xB9	; 185
    c546:	de 4f       	sbci	r29, 0xFE	; 254
    c548:	e8 81       	ld	r30, Y
    c54a:	f9 81       	ldd	r31, Y+1	; 0x01
    c54c:	c7 54       	subi	r28, 0x47	; 71
    c54e:	d1 40       	sbci	r29, 0x01	; 1
    c550:	e0 0f       	add	r30, r16
    c552:	f1 1f       	adc	r31, r17
    c554:	8f e2       	ldi	r24, 0x2F	; 47
    c556:	80 83       	st	Z, r24
    c558:	ef ef       	ldi	r30, 0xFF	; 255
    c55a:	ee 1a       	sub	r14, r30
    c55c:	fe 0a       	sbc	r15, r30
    c55e:	c9 5b       	subi	r28, 0xB9	; 185
    c560:	de 4f       	sbci	r29, 0xFE	; 254
    c562:	e8 81       	ld	r30, Y
    c564:	f9 81       	ldd	r31, Y+1	; 0x01
    c566:	c7 54       	subi	r28, 0x47	; 71
    c568:	d1 40       	sbci	r29, 0x01	; 1
    c56a:	e0 0f       	add	r30, r16
    c56c:	f1 1f       	adc	r31, r17
    c56e:	80 81       	ld	r24, Z
    c570:	f7 01       	movw	r30, r14
    c572:	31 97       	sbiw	r30, 0x01	; 1
    c574:	80 83       	st	Z, r24
    c576:	0f 5f       	subi	r16, 0xFF	; 255
    c578:	1f 4f       	sbci	r17, 0xFF	; 255
    c57a:	08 15       	cp	r16, r8
    c57c:	19 05       	cpc	r17, r9
    c57e:	60 f3       	brcs	.-40     	; 0xc558 <f_getcwd+0x212>
    c580:	c5 01       	movw	r24, r10
    c582:	0e 94 8c 6b 	call	0xd718	; 0xd718 <ff_memfree>
    c586:	f7 01       	movw	r30, r14
    c588:	10 82       	st	Z, r1
    c58a:	c1 01       	movw	r24, r2
    c58c:	0d c0       	rjmp	.+26     	; 0xc5a8 <f_getcwd+0x262>
    c58e:	81 e1       	ldi	r24, 0x11	; 17
    c590:	90 e0       	ldi	r25, 0x00	; 0
    c592:	0a c0       	rjmp	.+20     	; 0xc5a8 <f_getcwd+0x262>
    c594:	81 e1       	ldi	r24, 0x11	; 17
    c596:	90 e0       	ldi	r25, 0x00	; 0
    c598:	1c 01       	movw	r2, r24
    c59a:	f2 cf       	rjmp	.-28     	; 0xc580 <f_getcwd+0x23a>
    c59c:	84 30       	cpi	r24, 0x04	; 4
    c59e:	91 05       	cpc	r25, r1
    c5a0:	d9 f7       	brne	.-10     	; 0xc598 <f_getcwd+0x252>
    c5a2:	82 e0       	ldi	r24, 0x02	; 2
    c5a4:	90 e0       	ldi	r25, 0x00	; 0
    c5a6:	f8 cf       	rjmp	.-16     	; 0xc598 <f_getcwd+0x252>
    c5a8:	c8 5b       	subi	r28, 0xB8	; 184
    c5aa:	de 4f       	sbci	r29, 0xFE	; 254
    c5ac:	e2 e1       	ldi	r30, 0x12	; 18
    c5ae:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000c5b2 <f_lseek>:
    c5b2:	aa e0       	ldi	r26, 0x0A	; 10
    c5b4:	b0 e0       	ldi	r27, 0x00	; 0
    c5b6:	ef ed       	ldi	r30, 0xDF	; 223
    c5b8:	f2 e6       	ldi	r31, 0x62	; 98
    c5ba:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    c5be:	1c 01       	movw	r2, r24
    c5c0:	6a 01       	movw	r12, r20
    c5c2:	7b 01       	movw	r14, r22
    c5c4:	be 01       	movw	r22, r28
    c5c6:	6f 5f       	subi	r22, 0xFF	; 255
    c5c8:	7f 4f       	sbci	r23, 0xFF	; 255
    c5ca:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    c5ce:	00 97       	sbiw	r24, 0x00	; 0
    c5d0:	09 f0       	breq	.+2      	; 0xc5d4 <f_lseek+0x22>
    c5d2:	c6 c2       	rjmp	.+1420   	; 0xcb60 <f_lseek+0x5ae>
    c5d4:	d1 01       	movw	r26, r2
    c5d6:	1f 96       	adiw	r26, 0x0f	; 15
    c5d8:	8c 91       	ld	r24, X
    c5da:	1f 97       	sbiw	r26, 0x0f	; 15
    c5dc:	90 e0       	ldi	r25, 0x00	; 0
    c5de:	00 97       	sbiw	r24, 0x00	; 0
    c5e0:	09 f0       	breq	.+2      	; 0xc5e4 <f_lseek+0x32>
    c5e2:	be c2       	rjmp	.+1404   	; 0xcb60 <f_lseek+0x5ae>
    c5e4:	92 96       	adiw	r26, 0x22	; 34
    c5e6:	ed 91       	ld	r30, X+
    c5e8:	fc 91       	ld	r31, X
    c5ea:	93 97       	sbiw	r26, 0x23	; 35
    c5ec:	30 97       	sbiw	r30, 0x00	; 0
    c5ee:	09 f4       	brne	.+2      	; 0xc5f2 <f_lseek+0x40>
    c5f0:	3a c1       	rjmp	.+628    	; 0xc866 <f_lseek+0x2b4>
    c5f2:	bf ef       	ldi	r27, 0xFF	; 255
    c5f4:	cb 16       	cp	r12, r27
    c5f6:	db 06       	cpc	r13, r27
    c5f8:	eb 06       	cpc	r14, r27
    c5fa:	fb 06       	cpc	r15, r27
    c5fc:	09 f0       	breq	.+2      	; 0xc600 <f_lseek+0x4e>
    c5fe:	9f c0       	rjmp	.+318    	; 0xc73e <f_lseek+0x18c>
    c600:	8f 01       	movw	r16, r30
    c602:	0c 5f       	subi	r16, 0xFC	; 252
    c604:	1f 4f       	sbci	r17, 0xFF	; 255
    c606:	20 81       	ld	r18, Z
    c608:	31 81       	ldd	r19, Z+1	; 0x01
    c60a:	42 81       	ldd	r20, Z+2	; 0x02
    c60c:	53 81       	ldd	r21, Z+3	; 0x03
    c60e:	2f 83       	std	Y+7, r18	; 0x07
    c610:	38 87       	std	Y+8, r19	; 0x08
    c612:	49 87       	std	Y+9, r20	; 0x09
    c614:	5a 87       	std	Y+10, r21	; 0x0a
    c616:	d1 01       	movw	r26, r2
    c618:	16 96       	adiw	r26, 0x06	; 6
    c61a:	8d 90       	ld	r8, X+
    c61c:	9d 90       	ld	r9, X+
    c61e:	ad 90       	ld	r10, X+
    c620:	bc 90       	ld	r11, X
    c622:	19 97       	sbiw	r26, 0x09	; 9
    c624:	52 e0       	ldi	r21, 0x02	; 2
    c626:	c5 2e       	mov	r12, r21
    c628:	d1 2c       	mov	r13, r1
    c62a:	e1 2c       	mov	r14, r1
    c62c:	f1 2c       	mov	r15, r1
    c62e:	81 14       	cp	r8, r1
    c630:	91 04       	cpc	r9, r1
    c632:	a1 04       	cpc	r10, r1
    c634:	b1 04       	cpc	r11, r1
    c636:	09 f4       	brne	.+2      	; 0xc63a <f_lseek+0x88>
    c638:	68 c0       	rjmp	.+208    	; 0xc70a <f_lseek+0x158>
    c63a:	24 01       	movw	r4, r8
    c63c:	35 01       	movw	r6, r10
    c63e:	1b 82       	std	Y+3, r1	; 0x03
    c640:	1c 82       	std	Y+4, r1	; 0x04
    c642:	1d 82       	std	Y+5, r1	; 0x05
    c644:	1e 82       	std	Y+6, r1	; 0x06
    c646:	2b 81       	ldd	r18, Y+3	; 0x03
    c648:	3c 81       	ldd	r19, Y+4	; 0x04
    c64a:	4d 81       	ldd	r20, Y+5	; 0x05
    c64c:	5e 81       	ldd	r21, Y+6	; 0x06
    c64e:	2f 5f       	subi	r18, 0xFF	; 255
    c650:	3f 4f       	sbci	r19, 0xFF	; 255
    c652:	4f 4f       	sbci	r20, 0xFF	; 255
    c654:	5f 4f       	sbci	r21, 0xFF	; 255
    c656:	2b 83       	std	Y+3, r18	; 0x03
    c658:	3c 83       	std	Y+4, r19	; 0x04
    c65a:	4d 83       	std	Y+5, r20	; 0x05
    c65c:	5e 83       	std	Y+6, r21	; 0x06
    c65e:	b3 01       	movw	r22, r6
    c660:	a2 01       	movw	r20, r4
    c662:	d1 01       	movw	r26, r2
    c664:	8d 91       	ld	r24, X+
    c666:	9c 91       	ld	r25, X
    c668:	0e 94 86 51 	call	0xa30c	; 0xa30c <get_fat.isra.10>
    c66c:	62 30       	cpi	r22, 0x02	; 2
    c66e:	71 05       	cpc	r23, r1
    c670:	81 05       	cpc	r24, r1
    c672:	91 05       	cpc	r25, r1
    c674:	20 f4       	brcc	.+8      	; 0xc67e <f_lseek+0xcc>
    c676:	82 e0       	ldi	r24, 0x02	; 2
    c678:	f1 01       	movw	r30, r2
    c67a:	87 87       	std	Z+15, r24	; 0x0f
    c67c:	0a c0       	rjmp	.+20     	; 0xc692 <f_lseek+0xe0>
    c67e:	6f 3f       	cpi	r22, 0xFF	; 255
    c680:	ff ef       	ldi	r31, 0xFF	; 255
    c682:	7f 07       	cpc	r23, r31
    c684:	8f 07       	cpc	r24, r31
    c686:	9f 07       	cpc	r25, r31
    c688:	31 f4       	brne	.+12     	; 0xc696 <f_lseek+0xe4>
    c68a:	81 e0       	ldi	r24, 0x01	; 1
    c68c:	d1 01       	movw	r26, r2
    c68e:	1f 96       	adiw	r26, 0x0f	; 15
    c690:	8c 93       	st	X, r24
    c692:	90 e0       	ldi	r25, 0x00	; 0
    c694:	65 c2       	rjmp	.+1226   	; 0xcb60 <f_lseek+0x5ae>
    c696:	a3 01       	movw	r20, r6
    c698:	92 01       	movw	r18, r4
    c69a:	2f 5f       	subi	r18, 0xFF	; 255
    c69c:	3f 4f       	sbci	r19, 0xFF	; 255
    c69e:	4f 4f       	sbci	r20, 0xFF	; 255
    c6a0:	5f 4f       	sbci	r21, 0xFF	; 255
    c6a2:	2b 01       	movw	r4, r22
    c6a4:	3c 01       	movw	r6, r24
    c6a6:	62 17       	cp	r22, r18
    c6a8:	73 07       	cpc	r23, r19
    c6aa:	84 07       	cpc	r24, r20
    c6ac:	95 07       	cpc	r25, r21
    c6ae:	59 f2       	breq	.-106    	; 0xc646 <f_lseek+0x94>
    c6b0:	b2 e0       	ldi	r27, 0x02	; 2
    c6b2:	cb 0e       	add	r12, r27
    c6b4:	d1 1c       	adc	r13, r1
    c6b6:	e1 1c       	adc	r14, r1
    c6b8:	f1 1c       	adc	r15, r1
    c6ba:	2f 81       	ldd	r18, Y+7	; 0x07
    c6bc:	38 85       	ldd	r19, Y+8	; 0x08
    c6be:	49 85       	ldd	r20, Y+9	; 0x09
    c6c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c6c2:	2c 15       	cp	r18, r12
    c6c4:	3d 05       	cpc	r19, r13
    c6c6:	4e 05       	cpc	r20, r14
    c6c8:	5f 05       	cpc	r21, r15
    c6ca:	88 f0       	brcs	.+34     	; 0xc6ee <f_lseek+0x13c>
    c6cc:	2b 81       	ldd	r18, Y+3	; 0x03
    c6ce:	3c 81       	ldd	r19, Y+4	; 0x04
    c6d0:	4d 81       	ldd	r20, Y+5	; 0x05
    c6d2:	5e 81       	ldd	r21, Y+6	; 0x06
    c6d4:	d8 01       	movw	r26, r16
    c6d6:	2d 93       	st	X+, r18
    c6d8:	3d 93       	st	X+, r19
    c6da:	4d 93       	st	X+, r20
    c6dc:	5c 93       	st	X, r21
    c6de:	13 97       	sbiw	r26, 0x03	; 3
    c6e0:	f8 01       	movw	r30, r16
    c6e2:	84 82       	std	Z+4, r8	; 0x04
    c6e4:	95 82       	std	Z+5, r9	; 0x05
    c6e6:	a6 82       	std	Z+6, r10	; 0x06
    c6e8:	b7 82       	std	Z+7, r11	; 0x07
    c6ea:	08 5f       	subi	r16, 0xF8	; 248
    c6ec:	1f 4f       	sbci	r17, 0xFF	; 255
    c6ee:	e9 81       	ldd	r30, Y+1	; 0x01
    c6f0:	fa 81       	ldd	r31, Y+2	; 0x02
    c6f2:	81 8c       	ldd	r8, Z+25	; 0x19
    c6f4:	92 8c       	ldd	r9, Z+26	; 0x1a
    c6f6:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c6f8:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c6fa:	68 15       	cp	r22, r8
    c6fc:	79 05       	cpc	r23, r9
    c6fe:	8a 05       	cpc	r24, r10
    c700:	9b 05       	cpc	r25, r11
    c702:	18 f4       	brcc	.+6      	; 0xc70a <f_lseek+0x158>
    c704:	4b 01       	movw	r8, r22
    c706:	5c 01       	movw	r10, r24
    c708:	98 cf       	rjmp	.-208    	; 0xc63a <f_lseek+0x88>
    c70a:	d1 01       	movw	r26, r2
    c70c:	92 96       	adiw	r26, 0x22	; 34
    c70e:	ed 91       	ld	r30, X+
    c710:	fc 91       	ld	r31, X
    c712:	93 97       	sbiw	r26, 0x23	; 35
    c714:	c0 82       	st	Z, r12
    c716:	d1 82       	std	Z+1, r13	; 0x01
    c718:	e2 82       	std	Z+2, r14	; 0x02
    c71a:	f3 82       	std	Z+3, r15	; 0x03
    c71c:	2f 81       	ldd	r18, Y+7	; 0x07
    c71e:	38 85       	ldd	r19, Y+8	; 0x08
    c720:	49 85       	ldd	r20, Y+9	; 0x09
    c722:	5a 85       	ldd	r21, Y+10	; 0x0a
    c724:	2c 15       	cp	r18, r12
    c726:	3d 05       	cpc	r19, r13
    c728:	4e 05       	cpc	r20, r14
    c72a:	5f 05       	cpc	r21, r15
    c72c:	08 f4       	brcc	.+2      	; 0xc730 <f_lseek+0x17e>
    c72e:	0f c2       	rjmp	.+1054   	; 0xcb4e <f_lseek+0x59c>
    c730:	d8 01       	movw	r26, r16
    c732:	1d 92       	st	X+, r1
    c734:	1d 92       	st	X+, r1
    c736:	1d 92       	st	X+, r1
    c738:	1c 92       	st	X, r1
    c73a:	13 97       	sbiw	r26, 0x03	; 3
    c73c:	06 c2       	rjmp	.+1036   	; 0xcb4a <f_lseek+0x598>
    c73e:	f1 01       	movw	r30, r2
    c740:	82 85       	ldd	r24, Z+10	; 0x0a
    c742:	93 85       	ldd	r25, Z+11	; 0x0b
    c744:	a4 85       	ldd	r26, Z+12	; 0x0c
    c746:	b5 85       	ldd	r27, Z+13	; 0x0d
    c748:	46 01       	movw	r8, r12
    c74a:	57 01       	movw	r10, r14
    c74c:	8c 15       	cp	r24, r12
    c74e:	9d 05       	cpc	r25, r13
    c750:	ae 05       	cpc	r26, r14
    c752:	bf 05       	cpc	r27, r15
    c754:	10 f4       	brcc	.+4      	; 0xc75a <f_lseek+0x1a8>
    c756:	4c 01       	movw	r8, r24
    c758:	5d 01       	movw	r10, r26
    c75a:	d1 01       	movw	r26, r2
    c75c:	50 96       	adiw	r26, 0x10	; 16
    c75e:	8d 92       	st	X+, r8
    c760:	9d 92       	st	X+, r9
    c762:	ad 92       	st	X+, r10
    c764:	bc 92       	st	X, r11
    c766:	53 97       	sbiw	r26, 0x13	; 19
    c768:	81 14       	cp	r8, r1
    c76a:	91 04       	cpc	r9, r1
    c76c:	a1 04       	cpc	r10, r1
    c76e:	b1 04       	cpc	r11, r1
    c770:	09 f4       	brne	.+2      	; 0xc774 <f_lseek+0x1c2>
    c772:	eb c1       	rjmp	.+982    	; 0xcb4a <f_lseek+0x598>
    c774:	24 01       	movw	r4, r8
    c776:	35 01       	movw	r6, r10
    c778:	b1 e0       	ldi	r27, 0x01	; 1
    c77a:	4b 1a       	sub	r4, r27
    c77c:	51 08       	sbc	r5, r1
    c77e:	61 08       	sbc	r6, r1
    c780:	71 08       	sbc	r7, r1
    c782:	b3 01       	movw	r22, r6
    c784:	a2 01       	movw	r20, r4
    c786:	c1 01       	movw	r24, r2
    c788:	0e 94 a7 49 	call	0x934e	; 0x934e <clmt_clust>
    c78c:	ab 01       	movw	r20, r22
    c78e:	bc 01       	movw	r22, r24
    c790:	f1 01       	movw	r30, r2
    c792:	44 8b       	std	Z+20, r20	; 0x14
    c794:	55 8b       	std	Z+21, r21	; 0x15
    c796:	66 8b       	std	Z+22, r22	; 0x16
    c798:	77 8b       	std	Z+23, r23	; 0x17
    c79a:	e9 80       	ldd	r14, Y+1	; 0x01
    c79c:	fa 80       	ldd	r15, Y+2	; 0x02
    c79e:	c7 01       	movw	r24, r14
    c7a0:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    c7a4:	61 15       	cp	r22, r1
    c7a6:	71 05       	cpc	r23, r1
    c7a8:	81 05       	cpc	r24, r1
    c7aa:	91 05       	cpc	r25, r1
    c7ac:	09 f4       	brne	.+2      	; 0xc7b0 <f_lseek+0x1fe>
    c7ae:	63 cf       	rjmp	.-314    	; 0xc676 <f_lseek+0xc4>
    c7b0:	95 01       	movw	r18, r10
    c7b2:	84 01       	movw	r16, r8
    c7b4:	11 70       	andi	r17, 0x01	; 1
    c7b6:	22 27       	eor	r18, r18
    c7b8:	33 27       	eor	r19, r19
    c7ba:	01 15       	cp	r16, r1
    c7bc:	11 05       	cpc	r17, r1
    c7be:	21 05       	cpc	r18, r1
    c7c0:	31 05       	cpc	r19, r1
    c7c2:	09 f4       	brne	.+2      	; 0xc7c6 <f_lseek+0x214>
    c7c4:	c2 c1       	rjmp	.+900    	; 0xcb4a <f_lseek+0x598>
    c7c6:	d7 01       	movw	r26, r14
    c7c8:	19 96       	adiw	r26, 0x09	; 9
    c7ca:	8d 90       	ld	r8, X+
    c7cc:	9c 90       	ld	r9, X
    c7ce:	1a 97       	sbiw	r26, 0x0a	; 10
    c7d0:	b1 e0       	ldi	r27, 0x01	; 1
    c7d2:	8b 1a       	sub	r8, r27
    c7d4:	91 08       	sbc	r9, r1
    c7d6:	a1 2c       	mov	r10, r1
    c7d8:	b1 2c       	mov	r11, r1
    c7da:	49 e0       	ldi	r20, 0x09	; 9
    c7dc:	76 94       	lsr	r7
    c7de:	67 94       	ror	r6
    c7e0:	57 94       	ror	r5
    c7e2:	47 94       	ror	r4
    c7e4:	4a 95       	dec	r20
    c7e6:	d1 f7       	brne	.-12     	; 0xc7dc <f_lseek+0x22a>
    c7e8:	48 20       	and	r4, r8
    c7ea:	59 20       	and	r5, r9
    c7ec:	6a 20       	and	r6, r10
    c7ee:	7b 20       	and	r7, r11
    c7f0:	53 01       	movw	r10, r6
    c7f2:	42 01       	movw	r8, r4
    c7f4:	86 0e       	add	r8, r22
    c7f6:	97 1e       	adc	r9, r23
    c7f8:	a8 1e       	adc	r10, r24
    c7fa:	b9 1e       	adc	r11, r25
    c7fc:	f1 01       	movw	r30, r2
    c7fe:	20 8d       	ldd	r18, Z+24	; 0x18
    c800:	31 8d       	ldd	r19, Z+25	; 0x19
    c802:	42 8d       	ldd	r20, Z+26	; 0x1a
    c804:	53 8d       	ldd	r21, Z+27	; 0x1b
    c806:	82 16       	cp	r8, r18
    c808:	93 06       	cpc	r9, r19
    c80a:	a4 06       	cpc	r10, r20
    c80c:	b5 06       	cpc	r11, r21
    c80e:	09 f4       	brne	.+2      	; 0xc812 <f_lseek+0x260>
    c810:	9c c1       	rjmp	.+824    	; 0xcb4a <f_lseek+0x598>
    c812:	86 85       	ldd	r24, Z+14	; 0x0e
    c814:	b1 01       	movw	r22, r2
    c816:	6c 5d       	subi	r22, 0xDC	; 220
    c818:	7f 4f       	sbci	r23, 0xFF	; 255
    c81a:	6b 01       	movw	r12, r22
    c81c:	87 ff       	sbrs	r24, 7
    c81e:	0e c0       	rjmp	.+28     	; 0xc83c <f_lseek+0x28a>
    c820:	01 e0       	ldi	r16, 0x01	; 1
    c822:	10 e0       	ldi	r17, 0x00	; 0
    c824:	d7 01       	movw	r26, r14
    c826:	11 96       	adiw	r26, 0x01	; 1
    c828:	8c 91       	ld	r24, X
    c82a:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <disk_write>
    c82e:	89 2b       	or	r24, r25
    c830:	09 f0       	breq	.+2      	; 0xc834 <f_lseek+0x282>
    c832:	2b cf       	rjmp	.-426    	; 0xc68a <f_lseek+0xd8>
    c834:	f1 01       	movw	r30, r2
    c836:	86 85       	ldd	r24, Z+14	; 0x0e
    c838:	8f 77       	andi	r24, 0x7F	; 127
    c83a:	86 87       	std	Z+14, r24	; 0x0e
    c83c:	e9 81       	ldd	r30, Y+1	; 0x01
    c83e:	fa 81       	ldd	r31, Y+2	; 0x02
    c840:	01 e0       	ldi	r16, 0x01	; 1
    c842:	10 e0       	ldi	r17, 0x00	; 0
    c844:	a5 01       	movw	r20, r10
    c846:	94 01       	movw	r18, r8
    c848:	b6 01       	movw	r22, r12
    c84a:	81 81       	ldd	r24, Z+1	; 0x01
    c84c:	0e 94 45 6c 	call	0xd88a	; 0xd88a <disk_read>
    c850:	89 2b       	or	r24, r25
    c852:	09 f0       	breq	.+2      	; 0xc856 <f_lseek+0x2a4>
    c854:	1a cf       	rjmp	.-460    	; 0xc68a <f_lseek+0xd8>
    c856:	d1 01       	movw	r26, r2
    c858:	58 96       	adiw	r26, 0x18	; 24
    c85a:	8d 92       	st	X+, r8
    c85c:	9d 92       	st	X+, r9
    c85e:	ad 92       	st	X+, r10
    c860:	bc 92       	st	X, r11
    c862:	5b 97       	sbiw	r26, 0x1b	; 27
    c864:	72 c1       	rjmp	.+740    	; 0xcb4a <f_lseek+0x598>
    c866:	f1 01       	movw	r30, r2
    c868:	82 85       	ldd	r24, Z+10	; 0x0a
    c86a:	93 85       	ldd	r25, Z+11	; 0x0b
    c86c:	a4 85       	ldd	r26, Z+12	; 0x0c
    c86e:	b5 85       	ldd	r27, Z+13	; 0x0d
    c870:	8c 15       	cp	r24, r12
    c872:	9d 05       	cpc	r25, r13
    c874:	ae 05       	cpc	r26, r14
    c876:	bf 05       	cpc	r27, r15
    c878:	28 f4       	brcc	.+10     	; 0xc884 <f_lseek+0x2d2>
    c87a:	26 85       	ldd	r18, Z+14	; 0x0e
    c87c:	21 fd       	sbrc	r18, 1
    c87e:	02 c0       	rjmp	.+4      	; 0xc884 <f_lseek+0x2d2>
    c880:	6c 01       	movw	r12, r24
    c882:	7d 01       	movw	r14, r26
    c884:	d1 01       	movw	r26, r2
    c886:	50 96       	adiw	r26, 0x10	; 16
    c888:	4d 90       	ld	r4, X+
    c88a:	5d 90       	ld	r5, X+
    c88c:	6d 90       	ld	r6, X+
    c88e:	7c 90       	ld	r7, X
    c890:	53 97       	sbiw	r26, 0x13	; 19
    c892:	f1 01       	movw	r30, r2
    c894:	10 8a       	std	Z+16, r1	; 0x10
    c896:	11 8a       	std	Z+17, r1	; 0x11
    c898:	12 8a       	std	Z+18, r1	; 0x12
    c89a:	13 8a       	std	Z+19, r1	; 0x13
    c89c:	c1 14       	cp	r12, r1
    c89e:	d1 04       	cpc	r13, r1
    c8a0:	e1 04       	cpc	r14, r1
    c8a2:	f1 04       	cpc	r15, r1
    c8a4:	09 f4       	brne	.+2      	; 0xc8a8 <f_lseek+0x2f6>
    c8a6:	55 c1       	rjmp	.+682    	; 0xcb52 <f_lseek+0x5a0>
    c8a8:	e9 81       	ldd	r30, Y+1	; 0x01
    c8aa:	fa 81       	ldd	r31, Y+2	; 0x02
    c8ac:	81 84       	ldd	r8, Z+9	; 0x09
    c8ae:	92 84       	ldd	r9, Z+10	; 0x0a
    c8b0:	a1 2c       	mov	r10, r1
    c8b2:	b1 2c       	mov	r11, r1
    c8b4:	39 e0       	ldi	r19, 0x09	; 9
    c8b6:	88 0c       	add	r8, r8
    c8b8:	99 1c       	adc	r9, r9
    c8ba:	aa 1c       	adc	r10, r10
    c8bc:	bb 1c       	adc	r11, r11
    c8be:	3a 95       	dec	r19
    c8c0:	d1 f7       	brne	.-12     	; 0xc8b6 <f_lseek+0x304>
    c8c2:	41 14       	cp	r4, r1
    c8c4:	51 04       	cpc	r5, r1
    c8c6:	61 04       	cpc	r6, r1
    c8c8:	71 04       	cpc	r7, r1
    c8ca:	09 f4       	brne	.+2      	; 0xc8ce <f_lseek+0x31c>
    c8cc:	3f c0       	rjmp	.+126    	; 0xc94c <f_lseek+0x39a>
    c8ce:	f1 e0       	ldi	r31, 0x01	; 1
    c8d0:	4f 1a       	sub	r4, r31
    c8d2:	51 08       	sbc	r5, r1
    c8d4:	61 08       	sbc	r6, r1
    c8d6:	71 08       	sbc	r7, r1
    c8d8:	c7 01       	movw	r24, r14
    c8da:	b6 01       	movw	r22, r12
    c8dc:	61 50       	subi	r22, 0x01	; 1
    c8de:	71 09       	sbc	r23, r1
    c8e0:	81 09       	sbc	r24, r1
    c8e2:	91 09       	sbc	r25, r1
    c8e4:	a5 01       	movw	r20, r10
    c8e6:	94 01       	movw	r18, r8
    c8e8:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    c8ec:	2b 83       	std	Y+3, r18	; 0x03
    c8ee:	3c 83       	std	Y+4, r19	; 0x04
    c8f0:	4d 83       	std	Y+5, r20	; 0x05
    c8f2:	5e 83       	std	Y+6, r21	; 0x06
    c8f4:	c3 01       	movw	r24, r6
    c8f6:	b2 01       	movw	r22, r4
    c8f8:	a5 01       	movw	r20, r10
    c8fa:	94 01       	movw	r18, r8
    c8fc:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
    c900:	6b 81       	ldd	r22, Y+3	; 0x03
    c902:	7c 81       	ldd	r23, Y+4	; 0x04
    c904:	8d 81       	ldd	r24, Y+5	; 0x05
    c906:	9e 81       	ldd	r25, Y+6	; 0x06
    c908:	62 17       	cp	r22, r18
    c90a:	73 07       	cpc	r23, r19
    c90c:	84 07       	cpc	r24, r20
    c90e:	95 07       	cpc	r25, r21
    c910:	e8 f0       	brcs	.+58     	; 0xc94c <f_lseek+0x39a>
    c912:	88 27       	eor	r24, r24
    c914:	99 27       	eor	r25, r25
    c916:	dc 01       	movw	r26, r24
    c918:	88 19       	sub	r24, r8
    c91a:	99 09       	sbc	r25, r9
    c91c:	aa 09       	sbc	r26, r10
    c91e:	bb 09       	sbc	r27, r11
    c920:	48 22       	and	r4, r24
    c922:	59 22       	and	r5, r25
    c924:	6a 22       	and	r6, r26
    c926:	7b 22       	and	r7, r27
    c928:	d1 01       	movw	r26, r2
    c92a:	50 96       	adiw	r26, 0x10	; 16
    c92c:	4d 92       	st	X+, r4
    c92e:	5d 92       	st	X+, r5
    c930:	6d 92       	st	X+, r6
    c932:	7c 92       	st	X, r7
    c934:	53 97       	sbiw	r26, 0x13	; 19
    c936:	c4 18       	sub	r12, r4
    c938:	d5 08       	sbc	r13, r5
    c93a:	e6 08       	sbc	r14, r6
    c93c:	f7 08       	sbc	r15, r7
    c93e:	54 96       	adiw	r26, 0x14	; 20
    c940:	4d 91       	ld	r20, X+
    c942:	5d 91       	ld	r21, X+
    c944:	6d 91       	ld	r22, X+
    c946:	7c 91       	ld	r23, X
    c948:	57 97       	sbiw	r26, 0x17	; 23
    c94a:	2b c0       	rjmp	.+86     	; 0xc9a2 <f_lseek+0x3f0>
    c94c:	f1 01       	movw	r30, r2
    c94e:	46 81       	ldd	r20, Z+6	; 0x06
    c950:	57 81       	ldd	r21, Z+7	; 0x07
    c952:	60 85       	ldd	r22, Z+8	; 0x08
    c954:	71 85       	ldd	r23, Z+9	; 0x09
    c956:	41 15       	cp	r20, r1
    c958:	51 05       	cpc	r21, r1
    c95a:	61 05       	cpc	r22, r1
    c95c:	71 05       	cpc	r23, r1
    c95e:	e1 f4       	brne	.+56     	; 0xc998 <f_lseek+0x3e6>
    c960:	40 e0       	ldi	r20, 0x00	; 0
    c962:	50 e0       	ldi	r21, 0x00	; 0
    c964:	ba 01       	movw	r22, r20
    c966:	c1 01       	movw	r24, r2
    c968:	0e 94 fb 52 	call	0xa5f6	; 0xa5f6 <create_chain>
    c96c:	ab 01       	movw	r20, r22
    c96e:	bc 01       	movw	r22, r24
    c970:	41 30       	cpi	r20, 0x01	; 1
    c972:	51 05       	cpc	r21, r1
    c974:	61 05       	cpc	r22, r1
    c976:	71 05       	cpc	r23, r1
    c978:	09 f4       	brne	.+2      	; 0xc97c <f_lseek+0x3ca>
    c97a:	7d ce       	rjmp	.-774    	; 0xc676 <f_lseek+0xc4>
    c97c:	4f 3f       	cpi	r20, 0xFF	; 255
    c97e:	ff ef       	ldi	r31, 0xFF	; 255
    c980:	5f 07       	cpc	r21, r31
    c982:	6f 07       	cpc	r22, r31
    c984:	7f 07       	cpc	r23, r31
    c986:	09 f4       	brne	.+2      	; 0xc98a <f_lseek+0x3d8>
    c988:	80 ce       	rjmp	.-768    	; 0xc68a <f_lseek+0xd8>
    c98a:	d1 01       	movw	r26, r2
    c98c:	16 96       	adiw	r26, 0x06	; 6
    c98e:	4d 93       	st	X+, r20
    c990:	5d 93       	st	X+, r21
    c992:	6d 93       	st	X+, r22
    c994:	7c 93       	st	X, r23
    c996:	19 97       	sbiw	r26, 0x09	; 9
    c998:	f1 01       	movw	r30, r2
    c99a:	44 8b       	std	Z+20, r20	; 0x14
    c99c:	55 8b       	std	Z+21, r21	; 0x15
    c99e:	66 8b       	std	Z+22, r22	; 0x16
    c9a0:	77 8b       	std	Z+23, r23	; 0x17
    c9a2:	41 15       	cp	r20, r1
    c9a4:	51 05       	cpc	r21, r1
    c9a6:	61 05       	cpc	r22, r1
    c9a8:	71 05       	cpc	r23, r1
    c9aa:	09 f0       	breq	.+2      	; 0xc9ae <f_lseek+0x3fc>
    c9ac:	40 c0       	rjmp	.+128    	; 0xca2e <f_lseek+0x47c>
    c9ae:	c1 2c       	mov	r12, r1
    c9b0:	d1 2c       	mov	r13, r1
    c9b2:	76 01       	movw	r14, r12
    c9b4:	79 c0       	rjmp	.+242    	; 0xcaa8 <f_lseek+0x4f6>
    c9b6:	c8 18       	sub	r12, r8
    c9b8:	d9 08       	sbc	r13, r9
    c9ba:	ea 08       	sbc	r14, r10
    c9bc:	fb 08       	sbc	r15, r11
    c9be:	f1 01       	movw	r30, r2
    c9c0:	80 89       	ldd	r24, Z+16	; 0x10
    c9c2:	91 89       	ldd	r25, Z+17	; 0x11
    c9c4:	a2 89       	ldd	r26, Z+18	; 0x12
    c9c6:	b3 89       	ldd	r27, Z+19	; 0x13
    c9c8:	88 0d       	add	r24, r8
    c9ca:	99 1d       	adc	r25, r9
    c9cc:	aa 1d       	adc	r26, r10
    c9ce:	bb 1d       	adc	r27, r11
    c9d0:	80 8b       	std	Z+16, r24	; 0x10
    c9d2:	91 8b       	std	Z+17, r25	; 0x11
    c9d4:	a2 8b       	std	Z+18, r26	; 0x12
    c9d6:	b3 8b       	std	Z+19, r27	; 0x13
    c9d8:	86 85       	ldd	r24, Z+14	; 0x0e
    c9da:	81 ff       	sbrs	r24, 1
    c9dc:	2f c0       	rjmp	.+94     	; 0xca3c <f_lseek+0x48a>
    c9de:	c1 01       	movw	r24, r2
    c9e0:	0e 94 fb 52 	call	0xa5f6	; 0xa5f6 <create_chain>
    c9e4:	ab 01       	movw	r20, r22
    c9e6:	bc 01       	movw	r22, r24
    c9e8:	41 15       	cp	r20, r1
    c9ea:	51 05       	cpc	r21, r1
    c9ec:	61 05       	cpc	r22, r1
    c9ee:	71 05       	cpc	r23, r1
    c9f0:	61 f1       	breq	.+88     	; 0xca4a <f_lseek+0x498>
    c9f2:	4f 3f       	cpi	r20, 0xFF	; 255
    c9f4:	bf ef       	ldi	r27, 0xFF	; 255
    c9f6:	5b 07       	cpc	r21, r27
    c9f8:	6b 07       	cpc	r22, r27
    c9fa:	7b 07       	cpc	r23, r27
    c9fc:	09 f4       	brne	.+2      	; 0xca00 <f_lseek+0x44e>
    c9fe:	45 ce       	rjmp	.-886    	; 0xc68a <f_lseek+0xd8>
    ca00:	42 30       	cpi	r20, 0x02	; 2
    ca02:	51 05       	cpc	r21, r1
    ca04:	61 05       	cpc	r22, r1
    ca06:	71 05       	cpc	r23, r1
    ca08:	08 f4       	brcc	.+2      	; 0xca0c <f_lseek+0x45a>
    ca0a:	35 ce       	rjmp	.-918    	; 0xc676 <f_lseek+0xc4>
    ca0c:	e9 81       	ldd	r30, Y+1	; 0x01
    ca0e:	fa 81       	ldd	r31, Y+2	; 0x02
    ca10:	81 8d       	ldd	r24, Z+25	; 0x19
    ca12:	92 8d       	ldd	r25, Z+26	; 0x1a
    ca14:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ca16:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ca18:	48 17       	cp	r20, r24
    ca1a:	59 07       	cpc	r21, r25
    ca1c:	6a 07       	cpc	r22, r26
    ca1e:	7b 07       	cpc	r23, r27
    ca20:	08 f0       	brcs	.+2      	; 0xca24 <f_lseek+0x472>
    ca22:	29 ce       	rjmp	.-942    	; 0xc676 <f_lseek+0xc4>
    ca24:	f1 01       	movw	r30, r2
    ca26:	44 8b       	std	Z+20, r20	; 0x14
    ca28:	55 8b       	std	Z+21, r21	; 0x15
    ca2a:	66 8b       	std	Z+22, r22	; 0x16
    ca2c:	77 8b       	std	Z+23, r23	; 0x17
    ca2e:	8c 14       	cp	r8, r12
    ca30:	9d 04       	cpc	r9, r13
    ca32:	ae 04       	cpc	r10, r14
    ca34:	bf 04       	cpc	r11, r15
    ca36:	08 f4       	brcc	.+2      	; 0xca3a <f_lseek+0x488>
    ca38:	be cf       	rjmp	.-132    	; 0xc9b6 <f_lseek+0x404>
    ca3a:	0a c0       	rjmp	.+20     	; 0xca50 <f_lseek+0x49e>
    ca3c:	80 81       	ld	r24, Z
    ca3e:	91 81       	ldd	r25, Z+1	; 0x01
    ca40:	0e 94 86 51 	call	0xa30c	; 0xa30c <get_fat.isra.10>
    ca44:	ab 01       	movw	r20, r22
    ca46:	bc 01       	movw	r22, r24
    ca48:	d4 cf       	rjmp	.-88     	; 0xc9f2 <f_lseek+0x440>
    ca4a:	c1 2c       	mov	r12, r1
    ca4c:	d1 2c       	mov	r13, r1
    ca4e:	76 01       	movw	r14, r12
    ca50:	f1 01       	movw	r30, r2
    ca52:	80 89       	ldd	r24, Z+16	; 0x10
    ca54:	91 89       	ldd	r25, Z+17	; 0x11
    ca56:	a2 89       	ldd	r26, Z+18	; 0x12
    ca58:	b3 89       	ldd	r27, Z+19	; 0x13
    ca5a:	8c 0d       	add	r24, r12
    ca5c:	9d 1d       	adc	r25, r13
    ca5e:	ae 1d       	adc	r26, r14
    ca60:	bf 1d       	adc	r27, r15
    ca62:	80 8b       	std	Z+16, r24	; 0x10
    ca64:	91 8b       	std	Z+17, r25	; 0x11
    ca66:	a2 8b       	std	Z+18, r26	; 0x12
    ca68:	b3 8b       	std	Z+19, r27	; 0x13
    ca6a:	d7 01       	movw	r26, r14
    ca6c:	c6 01       	movw	r24, r12
    ca6e:	91 70       	andi	r25, 0x01	; 1
    ca70:	aa 27       	eor	r26, r26
    ca72:	bb 27       	eor	r27, r27
    ca74:	89 2b       	or	r24, r25
    ca76:	8a 2b       	or	r24, r26
    ca78:	8b 2b       	or	r24, r27
    ca7a:	09 f4       	brne	.+2      	; 0xca7e <f_lseek+0x4cc>
    ca7c:	98 cf       	rjmp	.-208    	; 0xc9ae <f_lseek+0x3fc>
    ca7e:	89 81       	ldd	r24, Y+1	; 0x01
    ca80:	9a 81       	ldd	r25, Y+2	; 0x02
    ca82:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    ca86:	61 15       	cp	r22, r1
    ca88:	71 05       	cpc	r23, r1
    ca8a:	81 05       	cpc	r24, r1
    ca8c:	91 05       	cpc	r25, r1
    ca8e:	09 f4       	brne	.+2      	; 0xca92 <f_lseek+0x4e0>
    ca90:	f2 cd       	rjmp	.-1052   	; 0xc676 <f_lseek+0xc4>
    ca92:	29 e0       	ldi	r18, 0x09	; 9
    ca94:	f6 94       	lsr	r15
    ca96:	e7 94       	ror	r14
    ca98:	d7 94       	ror	r13
    ca9a:	c7 94       	ror	r12
    ca9c:	2a 95       	dec	r18
    ca9e:	d1 f7       	brne	.-12     	; 0xca94 <f_lseek+0x4e2>
    caa0:	c6 0e       	add	r12, r22
    caa2:	d7 1e       	adc	r13, r23
    caa4:	e8 1e       	adc	r14, r24
    caa6:	f9 1e       	adc	r15, r25
    caa8:	f1 01       	movw	r30, r2
    caaa:	80 89       	ldd	r24, Z+16	; 0x10
    caac:	91 89       	ldd	r25, Z+17	; 0x11
    caae:	a2 89       	ldd	r26, Z+18	; 0x12
    cab0:	b3 89       	ldd	r27, Z+19	; 0x13
    cab2:	42 85       	ldd	r20, Z+10	; 0x0a
    cab4:	53 85       	ldd	r21, Z+11	; 0x0b
    cab6:	64 85       	ldd	r22, Z+12	; 0x0c
    cab8:	75 85       	ldd	r23, Z+13	; 0x0d
    caba:	48 17       	cp	r20, r24
    cabc:	59 07       	cpc	r21, r25
    cabe:	6a 07       	cpc	r22, r26
    cac0:	7b 07       	cpc	r23, r27
    cac2:	38 f4       	brcc	.+14     	; 0xcad2 <f_lseek+0x520>
    cac4:	82 87       	std	Z+10, r24	; 0x0a
    cac6:	93 87       	std	Z+11, r25	; 0x0b
    cac8:	a4 87       	std	Z+12, r26	; 0x0c
    caca:	b5 87       	std	Z+13, r27	; 0x0d
    cacc:	26 85       	ldd	r18, Z+14	; 0x0e
    cace:	20 64       	ori	r18, 0x40	; 64
    cad0:	26 87       	std	Z+14, r18	; 0x0e
    cad2:	91 70       	andi	r25, 0x01	; 1
    cad4:	aa 27       	eor	r26, r26
    cad6:	bb 27       	eor	r27, r27
    cad8:	89 2b       	or	r24, r25
    cada:	8a 2b       	or	r24, r26
    cadc:	8b 2b       	or	r24, r27
    cade:	a9 f1       	breq	.+106    	; 0xcb4a <f_lseek+0x598>
    cae0:	d1 01       	movw	r26, r2
    cae2:	58 96       	adiw	r26, 0x18	; 24
    cae4:	2d 91       	ld	r18, X+
    cae6:	3d 91       	ld	r19, X+
    cae8:	4d 91       	ld	r20, X+
    caea:	5c 91       	ld	r21, X
    caec:	5b 97       	sbiw	r26, 0x1b	; 27
    caee:	2c 15       	cp	r18, r12
    caf0:	3d 05       	cpc	r19, r13
    caf2:	4e 05       	cpc	r20, r14
    caf4:	5f 05       	cpc	r21, r15
    caf6:	49 f1       	breq	.+82     	; 0xcb4a <f_lseek+0x598>
    caf8:	1e 96       	adiw	r26, 0x0e	; 14
    cafa:	8c 91       	ld	r24, X
    cafc:	f1 01       	movw	r30, r2
    cafe:	b4 96       	adiw	r30, 0x24	; 36
    cb00:	5f 01       	movw	r10, r30
    cb02:	87 ff       	sbrs	r24, 7
    cb04:	11 c0       	rjmp	.+34     	; 0xcb28 <f_lseek+0x576>
    cb06:	e9 81       	ldd	r30, Y+1	; 0x01
    cb08:	fa 81       	ldd	r31, Y+2	; 0x02
    cb0a:	01 e0       	ldi	r16, 0x01	; 1
    cb0c:	10 e0       	ldi	r17, 0x00	; 0
    cb0e:	b5 01       	movw	r22, r10
    cb10:	81 81       	ldd	r24, Z+1	; 0x01
    cb12:	cb d6       	rcall	.+3478   	; 0xd8aa <disk_write>
    cb14:	89 2b       	or	r24, r25
    cb16:	09 f0       	breq	.+2      	; 0xcb1a <f_lseek+0x568>
    cb18:	b8 cd       	rjmp	.-1168   	; 0xc68a <f_lseek+0xd8>
    cb1a:	d1 01       	movw	r26, r2
    cb1c:	1e 96       	adiw	r26, 0x0e	; 14
    cb1e:	8c 91       	ld	r24, X
    cb20:	1e 97       	sbiw	r26, 0x0e	; 14
    cb22:	8f 77       	andi	r24, 0x7F	; 127
    cb24:	1e 96       	adiw	r26, 0x0e	; 14
    cb26:	8c 93       	st	X, r24
    cb28:	e9 81       	ldd	r30, Y+1	; 0x01
    cb2a:	fa 81       	ldd	r31, Y+2	; 0x02
    cb2c:	01 e0       	ldi	r16, 0x01	; 1
    cb2e:	10 e0       	ldi	r17, 0x00	; 0
    cb30:	a7 01       	movw	r20, r14
    cb32:	96 01       	movw	r18, r12
    cb34:	b5 01       	movw	r22, r10
    cb36:	81 81       	ldd	r24, Z+1	; 0x01
    cb38:	a8 d6       	rcall	.+3408   	; 0xd88a <disk_read>
    cb3a:	89 2b       	or	r24, r25
    cb3c:	09 f0       	breq	.+2      	; 0xcb40 <f_lseek+0x58e>
    cb3e:	a5 cd       	rjmp	.-1206   	; 0xc68a <f_lseek+0xd8>
    cb40:	f1 01       	movw	r30, r2
    cb42:	c0 8e       	std	Z+24, r12	; 0x18
    cb44:	d1 8e       	std	Z+25, r13	; 0x19
    cb46:	e2 8e       	std	Z+26, r14	; 0x1a
    cb48:	f3 8e       	std	Z+27, r15	; 0x1b
    cb4a:	80 e0       	ldi	r24, 0x00	; 0
    cb4c:	a2 cd       	rjmp	.-1212   	; 0xc692 <f_lseek+0xe0>
    cb4e:	81 e1       	ldi	r24, 0x11	; 17
    cb50:	a0 cd       	rjmp	.-1216   	; 0xc692 <f_lseek+0xe0>
    cb52:	80 e0       	ldi	r24, 0x00	; 0
    cb54:	90 e0       	ldi	r25, 0x00	; 0
    cb56:	dc 01       	movw	r26, r24
    cb58:	c1 2c       	mov	r12, r1
    cb5a:	d1 2c       	mov	r13, r1
    cb5c:	76 01       	movw	r14, r12
    cb5e:	b9 cf       	rjmp	.-142    	; 0xcad2 <f_lseek+0x520>
    cb60:	2a 96       	adiw	r28, 0x0a	; 10
    cb62:	e2 e1       	ldi	r30, 0x12	; 18
    cb64:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000cb68 <f_opendir>:
    cb68:	a4 e0       	ldi	r26, 0x04	; 4
    cb6a:	b0 e0       	ldi	r27, 0x00	; 0
    cb6c:	ea eb       	ldi	r30, 0xBA	; 186
    cb6e:	f5 e6       	ldi	r31, 0x65	; 101
    cb70:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    cb74:	7c 83       	std	Y+4, r23	; 0x04
    cb76:	6b 83       	std	Y+3, r22	; 0x03
    cb78:	00 97       	sbiw	r24, 0x00	; 0
    cb7a:	09 f4       	brne	.+2      	; 0xcb7e <f_opendir+0x16>
    cb7c:	48 c0       	rjmp	.+144    	; 0xcc0e <f_opendir+0xa6>
    cb7e:	8c 01       	movw	r16, r24
    cb80:	40 e0       	ldi	r20, 0x00	; 0
    cb82:	be 01       	movw	r22, r28
    cb84:	6f 5f       	subi	r22, 0xFF	; 255
    cb86:	7f 4f       	sbci	r23, 0xFF	; 255
    cb88:	ce 01       	movw	r24, r28
    cb8a:	03 96       	adiw	r24, 0x03	; 3
    cb8c:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    cb90:	7c 01       	movw	r14, r24
    cb92:	89 2b       	or	r24, r25
    cb94:	b9 f5       	brne	.+110    	; 0xcc04 <f_opendir+0x9c>
    cb96:	89 81       	ldd	r24, Y+1	; 0x01
    cb98:	9a 81       	ldd	r25, Y+2	; 0x02
    cb9a:	f8 01       	movw	r30, r16
    cb9c:	91 83       	std	Z+1, r25	; 0x01
    cb9e:	80 83       	st	Z, r24
    cba0:	80 e0       	ldi	r24, 0x00	; 0
    cba2:	92 e0       	ldi	r25, 0x02	; 2
    cba4:	b6 d5       	rcall	.+2924   	; 0xd712 <ff_memalloc>
    cba6:	6c 01       	movw	r12, r24
    cba8:	00 97       	sbiw	r24, 0x00	; 0
    cbaa:	99 f1       	breq	.+102    	; 0xcc12 <f_opendir+0xaa>
    cbac:	e9 81       	ldd	r30, Y+1	; 0x01
    cbae:	fa 81       	ldd	r31, Y+2	; 0x02
    cbb0:	94 87       	std	Z+12, r25	; 0x0c
    cbb2:	83 87       	std	Z+11, r24	; 0x0b
    cbb4:	6b 81       	ldd	r22, Y+3	; 0x03
    cbb6:	7c 81       	ldd	r23, Y+4	; 0x04
    cbb8:	c8 01       	movw	r24, r16
    cbba:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    cbbe:	7c 01       	movw	r14, r24
    cbc0:	89 2b       	or	r24, r25
    cbc2:	b9 f4       	brne	.+46     	; 0xcbf2 <f_opendir+0x8a>
    cbc4:	f8 01       	movw	r30, r16
    cbc6:	87 a1       	ldd	r24, Z+39	; 0x27
    cbc8:	87 fd       	sbrc	r24, 7
    cbca:	28 c0       	rjmp	.+80     	; 0xcc1c <f_opendir+0xb4>
    cbcc:	84 81       	ldd	r24, Z+4	; 0x04
    cbce:	84 ff       	sbrs	r24, 4
    cbd0:	0d c0       	rjmp	.+26     	; 0xcbec <f_opendir+0x84>
    cbd2:	62 8d       	ldd	r22, Z+26	; 0x1a
    cbd4:	73 8d       	ldd	r23, Z+27	; 0x1b
    cbd6:	e9 81       	ldd	r30, Y+1	; 0x01
    cbd8:	fa 81       	ldd	r31, Y+2	; 0x02
    cbda:	80 81       	ld	r24, Z
    cbdc:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    cbe0:	f8 01       	movw	r30, r16
    cbe2:	66 83       	std	Z+6, r22	; 0x06
    cbe4:	77 83       	std	Z+7, r23	; 0x07
    cbe6:	80 87       	std	Z+8, r24	; 0x08
    cbe8:	91 87       	std	Z+9, r25	; 0x09
    cbea:	18 c0       	rjmp	.+48     	; 0xcc1c <f_opendir+0xb4>
    cbec:	95 e0       	ldi	r25, 0x05	; 5
    cbee:	e9 2e       	mov	r14, r25
    cbf0:	f1 2c       	mov	r15, r1
    cbf2:	c6 01       	movw	r24, r12
    cbf4:	91 d5       	rcall	.+2850   	; 0xd718 <ff_memfree>
    cbf6:	f4 e0       	ldi	r31, 0x04	; 4
    cbf8:	ef 16       	cp	r14, r31
    cbfa:	f1 04       	cpc	r15, r1
    cbfc:	f1 f0       	breq	.+60     	; 0xcc3a <f_opendir+0xd2>
    cbfe:	e1 14       	cp	r14, r1
    cc00:	f1 04       	cpc	r15, r1
    cc02:	49 f0       	breq	.+18     	; 0xcc16 <f_opendir+0xae>
    cc04:	f8 01       	movw	r30, r16
    cc06:	11 82       	std	Z+1, r1	; 0x01
    cc08:	10 82       	st	Z, r1
    cc0a:	c7 01       	movw	r24, r14
    cc0c:	1a c0       	rjmp	.+52     	; 0xcc42 <f_opendir+0xda>
    cc0e:	89 e0       	ldi	r24, 0x09	; 9
    cc10:	03 c0       	rjmp	.+6      	; 0xcc18 <f_opendir+0xb0>
    cc12:	81 e1       	ldi	r24, 0x11	; 17
    cc14:	01 c0       	rjmp	.+2      	; 0xcc18 <f_opendir+0xb0>
    cc16:	80 e0       	ldi	r24, 0x00	; 0
    cc18:	90 e0       	ldi	r25, 0x00	; 0
    cc1a:	13 c0       	rjmp	.+38     	; 0xcc42 <f_opendir+0xda>
    cc1c:	e9 81       	ldd	r30, Y+1	; 0x01
    cc1e:	fa 81       	ldd	r31, Y+2	; 0x02
    cc20:	85 81       	ldd	r24, Z+5	; 0x05
    cc22:	96 81       	ldd	r25, Z+6	; 0x06
    cc24:	f8 01       	movw	r30, r16
    cc26:	93 83       	std	Z+3, r25	; 0x03
    cc28:	82 83       	std	Z+2, r24	; 0x02
    cc2a:	40 e0       	ldi	r20, 0x00	; 0
    cc2c:	50 e0       	ldi	r21, 0x00	; 0
    cc2e:	ba 01       	movw	r22, r20
    cc30:	c8 01       	movw	r24, r16
    cc32:	0e 94 3a 52 	call	0xa474	; 0xa474 <dir_sdi>
    cc36:	7c 01       	movw	r14, r24
    cc38:	dc cf       	rjmp	.-72     	; 0xcbf2 <f_opendir+0x8a>
    cc3a:	85 e0       	ldi	r24, 0x05	; 5
    cc3c:	e8 2e       	mov	r14, r24
    cc3e:	f1 2c       	mov	r15, r1
    cc40:	e1 cf       	rjmp	.-62     	; 0xcc04 <f_opendir+0x9c>
    cc42:	24 96       	adiw	r28, 0x04	; 4
    cc44:	e8 e0       	ldi	r30, 0x08	; 8
    cc46:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000cc4a <f_closedir>:
    cc4a:	a2 e0       	ldi	r26, 0x02	; 2
    cc4c:	b0 e0       	ldi	r27, 0x00	; 0
    cc4e:	eb e2       	ldi	r30, 0x2B	; 43
    cc50:	f6 e6       	ldi	r31, 0x66	; 102
    cc52:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    cc56:	8c 01       	movw	r16, r24
    cc58:	be 01       	movw	r22, r28
    cc5a:	6f 5f       	subi	r22, 0xFF	; 255
    cc5c:	7f 4f       	sbci	r23, 0xFF	; 255
    cc5e:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    cc62:	00 97       	sbiw	r24, 0x00	; 0
    cc64:	19 f4       	brne	.+6      	; 0xcc6c <f_closedir+0x22>
    cc66:	f8 01       	movw	r30, r16
    cc68:	11 82       	std	Z+1, r1	; 0x01
    cc6a:	10 82       	st	Z, r1
    cc6c:	22 96       	adiw	r28, 0x02	; 2
    cc6e:	e4 e0       	ldi	r30, 0x04	; 4
    cc70:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

0000cc74 <f_readdir>:
    cc74:	a2 e0       	ldi	r26, 0x02	; 2
    cc76:	b0 e0       	ldi	r27, 0x00	; 0
    cc78:	e0 e4       	ldi	r30, 0x40	; 64
    cc7a:	f6 e6       	ldi	r31, 0x66	; 102
    cc7c:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
    cc80:	7c 01       	movw	r14, r24
    cc82:	5b 01       	movw	r10, r22
    cc84:	be 01       	movw	r22, r28
    cc86:	6f 5f       	subi	r22, 0xFF	; 255
    cc88:	7f 4f       	sbci	r23, 0xFF	; 255
    cc8a:	0e 94 1e 4a 	call	0x943c	; 0x943c <validate>
    cc8e:	00 97       	sbiw	r24, 0x00	; 0
    cc90:	89 f5       	brne	.+98     	; 0xccf4 <f_readdir+0x80>
    cc92:	a1 14       	cp	r10, r1
    cc94:	b1 04       	cpc	r11, r1
    cc96:	39 f4       	brne	.+14     	; 0xcca6 <f_readdir+0x32>
    cc98:	40 e0       	ldi	r20, 0x00	; 0
    cc9a:	50 e0       	ldi	r21, 0x00	; 0
    cc9c:	ba 01       	movw	r22, r20
    cc9e:	c7 01       	movw	r24, r14
    cca0:	0e 94 3a 52 	call	0xa474	; 0xa474 <dir_sdi>
    cca4:	27 c0       	rjmp	.+78     	; 0xccf4 <f_readdir+0x80>
    cca6:	80 e0       	ldi	r24, 0x00	; 0
    cca8:	92 e0       	ldi	r25, 0x02	; 2
    ccaa:	33 d5       	rcall	.+2662   	; 0xd712 <ff_memalloc>
    ccac:	6c 01       	movw	r12, r24
    ccae:	00 97       	sbiw	r24, 0x00	; 0
    ccb0:	f9 f0       	breq	.+62     	; 0xccf0 <f_readdir+0x7c>
    ccb2:	e9 81       	ldd	r30, Y+1	; 0x01
    ccb4:	fa 81       	ldd	r31, Y+2	; 0x02
    ccb6:	94 87       	std	Z+12, r25	; 0x0c
    ccb8:	83 87       	std	Z+11, r24	; 0x0b
    ccba:	60 e0       	ldi	r22, 0x00	; 0
    ccbc:	70 e0       	ldi	r23, 0x00	; 0
    ccbe:	c7 01       	movw	r24, r14
    ccc0:	0e 94 d4 55 	call	0xaba8	; 0xaba8 <dir_read>
    ccc4:	8c 01       	movw	r16, r24
    ccc6:	8b 7f       	andi	r24, 0xFB	; 251
    ccc8:	89 2b       	or	r24, r25
    ccca:	71 f4       	brne	.+28     	; 0xcce8 <f_readdir+0x74>
    cccc:	b5 01       	movw	r22, r10
    ccce:	c7 01       	movw	r24, r14
    ccd0:	0e 94 02 4b 	call	0x9604	; 0x9604 <get_fileinfo>
    ccd4:	60 e0       	ldi	r22, 0x00	; 0
    ccd6:	70 e0       	ldi	r23, 0x00	; 0
    ccd8:	c7 01       	movw	r24, r14
    ccda:	0e 94 b2 54 	call	0xa964	; 0xa964 <dir_next>
    ccde:	8c 01       	movw	r16, r24
    cce0:	04 97       	sbiw	r24, 0x04	; 4
    cce2:	11 f4       	brne	.+4      	; 0xcce8 <f_readdir+0x74>
    cce4:	00 e0       	ldi	r16, 0x00	; 0
    cce6:	10 e0       	ldi	r17, 0x00	; 0
    cce8:	c6 01       	movw	r24, r12
    ccea:	16 d5       	rcall	.+2604   	; 0xd718 <ff_memfree>
    ccec:	c8 01       	movw	r24, r16
    ccee:	02 c0       	rjmp	.+4      	; 0xccf4 <f_readdir+0x80>
    ccf0:	81 e1       	ldi	r24, 0x11	; 17
    ccf2:	90 e0       	ldi	r25, 0x00	; 0
    ccf4:	22 96       	adiw	r28, 0x02	; 2
    ccf6:	ea e0       	ldi	r30, 0x0A	; 10
    ccf8:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0000ccfc <f_stat>:
    ccfc:	a0 e3       	ldi	r26, 0x30	; 48
    ccfe:	b0 e0       	ldi	r27, 0x00	; 0
    cd00:	e4 e8       	ldi	r30, 0x84	; 132
    cd02:	f6 e6       	ldi	r31, 0x66	; 102
    cd04:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    cd08:	98 ab       	std	Y+48, r25	; 0x30
    cd0a:	8f a7       	std	Y+47, r24	; 0x2f
    cd0c:	6b 01       	movw	r12, r22
    cd0e:	40 e0       	ldi	r20, 0x00	; 0
    cd10:	be 01       	movw	r22, r28
    cd12:	6f 5f       	subi	r22, 0xFF	; 255
    cd14:	7f 4f       	sbci	r23, 0xFF	; 255
    cd16:	ce 01       	movw	r24, r28
    cd18:	8f 96       	adiw	r24, 0x2f	; 47
    cd1a:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    cd1e:	00 97       	sbiw	r24, 0x00	; 0
    cd20:	39 f5       	brne	.+78     	; 0xcd70 <f_stat+0x74>
    cd22:	80 e0       	ldi	r24, 0x00	; 0
    cd24:	92 e0       	ldi	r25, 0x02	; 2
    cd26:	f5 d4       	rcall	.+2538   	; 0xd712 <ff_memalloc>
    cd28:	7c 01       	movw	r14, r24
    cd2a:	00 97       	sbiw	r24, 0x00	; 0
    cd2c:	f9 f0       	breq	.+62     	; 0xcd6c <f_stat+0x70>
    cd2e:	e9 81       	ldd	r30, Y+1	; 0x01
    cd30:	fa 81       	ldd	r31, Y+2	; 0x02
    cd32:	94 87       	std	Z+12, r25	; 0x0c
    cd34:	83 87       	std	Z+11, r24	; 0x0b
    cd36:	6f a5       	ldd	r22, Y+47	; 0x2f
    cd38:	78 a9       	ldd	r23, Y+48	; 0x30
    cd3a:	ce 01       	movw	r24, r28
    cd3c:	01 96       	adiw	r24, 0x01	; 1
    cd3e:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    cd42:	8c 01       	movw	r16, r24
    cd44:	89 2b       	or	r24, r25
    cd46:	71 f4       	brne	.+28     	; 0xcd64 <f_stat+0x68>
    cd48:	88 a5       	ldd	r24, Y+40	; 0x28
    cd4a:	87 fd       	sbrc	r24, 7
    cd4c:	09 c0       	rjmp	.+18     	; 0xcd60 <f_stat+0x64>
    cd4e:	c1 14       	cp	r12, r1
    cd50:	d1 04       	cpc	r13, r1
    cd52:	41 f0       	breq	.+16     	; 0xcd64 <f_stat+0x68>
    cd54:	b6 01       	movw	r22, r12
    cd56:	ce 01       	movw	r24, r28
    cd58:	01 96       	adiw	r24, 0x01	; 1
    cd5a:	0e 94 02 4b 	call	0x9604	; 0x9604 <get_fileinfo>
    cd5e:	02 c0       	rjmp	.+4      	; 0xcd64 <f_stat+0x68>
    cd60:	06 e0       	ldi	r16, 0x06	; 6
    cd62:	10 e0       	ldi	r17, 0x00	; 0
    cd64:	c7 01       	movw	r24, r14
    cd66:	d8 d4       	rcall	.+2480   	; 0xd718 <ff_memfree>
    cd68:	c8 01       	movw	r24, r16
    cd6a:	02 c0       	rjmp	.+4      	; 0xcd70 <f_stat+0x74>
    cd6c:	81 e1       	ldi	r24, 0x11	; 17
    cd6e:	90 e0       	ldi	r25, 0x00	; 0
    cd70:	e0 96       	adiw	r28, 0x30	; 48
    cd72:	e8 e0       	ldi	r30, 0x08	; 8
    cd74:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000cd78 <f_getfree>:
    cd78:	aa e0       	ldi	r26, 0x0A	; 10
    cd7a:	b0 e0       	ldi	r27, 0x00	; 0
    cd7c:	e2 ec       	ldi	r30, 0xC2	; 194
    cd7e:	f6 e6       	ldi	r31, 0x66	; 102
    cd80:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    cd84:	9c 83       	std	Y+4, r25	; 0x04
    cd86:	8b 83       	std	Y+3, r24	; 0x03
    cd88:	7e 83       	std	Y+6, r23	; 0x06
    cd8a:	6d 83       	std	Y+5, r22	; 0x05
    cd8c:	7a 01       	movw	r14, r20
    cd8e:	40 e0       	ldi	r20, 0x00	; 0
    cd90:	be 01       	movw	r22, r28
    cd92:	6f 5f       	subi	r22, 0xFF	; 255
    cd94:	7f 4f       	sbci	r23, 0xFF	; 255
    cd96:	ce 01       	movw	r24, r28
    cd98:	03 96       	adiw	r24, 0x03	; 3
    cd9a:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    cd9e:	8c 01       	movw	r16, r24
    cda0:	89 2b       	or	r24, r25
    cda2:	09 f0       	breq	.+2      	; 0xcda6 <f_getfree+0x2e>
    cda4:	c3 c0       	rjmp	.+390    	; 0xcf2c <f_getfree+0x1b4>
    cda6:	69 80       	ldd	r6, Y+1	; 0x01
    cda8:	7a 80       	ldd	r7, Y+2	; 0x02
    cdaa:	d7 01       	movw	r26, r14
    cdac:	6d 92       	st	X+, r6
    cdae:	7c 92       	st	X, r7
    cdb0:	f3 01       	movw	r30, r6
    cdb2:	81 89       	ldd	r24, Z+17	; 0x11
    cdb4:	92 89       	ldd	r25, Z+18	; 0x12
    cdb6:	a3 89       	ldd	r26, Z+19	; 0x13
    cdb8:	b4 89       	ldd	r27, Z+20	; 0x14
    cdba:	81 8c       	ldd	r8, Z+25	; 0x19
    cdbc:	92 8c       	ldd	r9, Z+26	; 0x1a
    cdbe:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cdc0:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cdc2:	b5 01       	movw	r22, r10
    cdc4:	a4 01       	movw	r20, r8
    cdc6:	42 50       	subi	r20, 0x02	; 2
    cdc8:	51 09       	sbc	r21, r1
    cdca:	61 09       	sbc	r22, r1
    cdcc:	71 09       	sbc	r23, r1
    cdce:	48 17       	cp	r20, r24
    cdd0:	59 07       	cpc	r21, r25
    cdd2:	6a 07       	cpc	r22, r26
    cdd4:	7b 07       	cpc	r23, r27
    cdd6:	38 f0       	brcs	.+14     	; 0xcde6 <f_getfree+0x6e>
    cdd8:	ed 81       	ldd	r30, Y+5	; 0x05
    cdda:	fe 81       	ldd	r31, Y+6	; 0x06
    cddc:	80 83       	st	Z, r24
    cdde:	91 83       	std	Z+1, r25	; 0x01
    cde0:	a2 83       	std	Z+2, r26	; 0x02
    cde2:	b3 83       	std	Z+3, r27	; 0x03
    cde4:	a3 c0       	rjmp	.+326    	; 0xcf2c <f_getfree+0x1b4>
    cde6:	80 81       	ld	r24, Z
    cde8:	81 30       	cpi	r24, 0x01	; 1
    cdea:	a1 f5       	brne	.+104    	; 0xce54 <f_getfree+0xdc>
    cdec:	82 e0       	ldi	r24, 0x02	; 2
    cdee:	88 2e       	mov	r8, r24
    cdf0:	91 2c       	mov	r9, r1
    cdf2:	a1 2c       	mov	r10, r1
    cdf4:	b1 2c       	mov	r11, r1
    cdf6:	c1 2c       	mov	r12, r1
    cdf8:	d1 2c       	mov	r13, r1
    cdfa:	76 01       	movw	r14, r12
    cdfc:	b5 01       	movw	r22, r10
    cdfe:	a4 01       	movw	r20, r8
    ce00:	c3 01       	movw	r24, r6
    ce02:	0e 94 86 51 	call	0xa30c	; 0xa30c <get_fat.isra.10>
    ce06:	6f 3f       	cpi	r22, 0xFF	; 255
    ce08:	bf ef       	ldi	r27, 0xFF	; 255
    ce0a:	7b 07       	cpc	r23, r27
    ce0c:	8b 07       	cpc	r24, r27
    ce0e:	9b 07       	cpc	r25, r27
    ce10:	09 f4       	brne	.+2      	; 0xce14 <f_getfree+0x9c>
    ce12:	75 c0       	rjmp	.+234    	; 0xcefe <f_getfree+0x186>
    ce14:	61 30       	cpi	r22, 0x01	; 1
    ce16:	71 05       	cpc	r23, r1
    ce18:	81 05       	cpc	r24, r1
    ce1a:	91 05       	cpc	r25, r1
    ce1c:	09 f4       	brne	.+2      	; 0xce20 <f_getfree+0xa8>
    ce1e:	72 c0       	rjmp	.+228    	; 0xcf04 <f_getfree+0x18c>
    ce20:	67 2b       	or	r22, r23
    ce22:	68 2b       	or	r22, r24
    ce24:	69 2b       	or	r22, r25
    ce26:	29 f4       	brne	.+10     	; 0xce32 <f_getfree+0xba>
    ce28:	ef ef       	ldi	r30, 0xFF	; 255
    ce2a:	ce 1a       	sub	r12, r30
    ce2c:	de 0a       	sbc	r13, r30
    ce2e:	ee 0a       	sbc	r14, r30
    ce30:	fe 0a       	sbc	r15, r30
    ce32:	ff ef       	ldi	r31, 0xFF	; 255
    ce34:	8f 1a       	sub	r8, r31
    ce36:	9f 0a       	sbc	r9, r31
    ce38:	af 0a       	sbc	r10, r31
    ce3a:	bf 0a       	sbc	r11, r31
    ce3c:	e9 81       	ldd	r30, Y+1	; 0x01
    ce3e:	fa 81       	ldd	r31, Y+2	; 0x02
    ce40:	81 8d       	ldd	r24, Z+25	; 0x19
    ce42:	92 8d       	ldd	r25, Z+26	; 0x1a
    ce44:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ce46:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ce48:	88 16       	cp	r8, r24
    ce4a:	99 06       	cpc	r9, r25
    ce4c:	aa 06       	cpc	r10, r26
    ce4e:	bb 06       	cpc	r11, r27
    ce50:	a8 f2       	brcs	.-86     	; 0xcdfc <f_getfree+0x84>
    ce52:	5c c0       	rjmp	.+184    	; 0xcf0c <f_getfree+0x194>
    ce54:	45 a0       	ldd	r4, Z+37	; 0x25
    ce56:	56 a0       	ldd	r5, Z+38	; 0x26
    ce58:	67 a0       	ldd	r6, Z+39	; 0x27
    ce5a:	70 a4       	ldd	r7, Z+40	; 0x28
    ce5c:	21 2c       	mov	r2, r1
    ce5e:	31 2c       	mov	r3, r1
    ce60:	c1 2c       	mov	r12, r1
    ce62:	d1 2c       	mov	r13, r1
    ce64:	76 01       	movw	r14, r12
    ce66:	21 14       	cp	r2, r1
    ce68:	31 04       	cpc	r3, r1
    ce6a:	b1 f4       	brne	.+44     	; 0xce98 <f_getfree+0x120>
    ce6c:	d3 01       	movw	r26, r6
    ce6e:	c2 01       	movw	r24, r4
    ce70:	01 96       	adiw	r24, 0x01	; 1
    ce72:	a1 1d       	adc	r26, r1
    ce74:	b1 1d       	adc	r27, r1
    ce76:	8f 83       	std	Y+7, r24	; 0x07
    ce78:	98 87       	std	Y+8, r25	; 0x08
    ce7a:	a9 87       	std	Y+9, r26	; 0x09
    ce7c:	ba 87       	std	Y+10, r27	; 0x0a
    ce7e:	b3 01       	movw	r22, r6
    ce80:	a2 01       	movw	r20, r4
    ce82:	89 81       	ldd	r24, Y+1	; 0x01
    ce84:	9a 81       	ldd	r25, Y+2	; 0x02
    ce86:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    ce8a:	00 97       	sbiw	r24, 0x00	; 0
    ce8c:	09 f0       	breq	.+2      	; 0xce90 <f_getfree+0x118>
    ce8e:	3d c0       	rjmp	.+122    	; 0xcf0a <f_getfree+0x192>
    ce90:	4f 80       	ldd	r4, Y+7	; 0x07
    ce92:	58 84       	ldd	r5, Y+8	; 0x08
    ce94:	69 84       	ldd	r6, Y+9	; 0x09
    ce96:	7a 84       	ldd	r7, Y+10	; 0x0a
    ce98:	e9 81       	ldd	r30, Y+1	; 0x01
    ce9a:	fa 81       	ldd	r31, Y+2	; 0x02
    ce9c:	80 81       	ld	r24, Z
    ce9e:	82 30       	cpi	r24, 0x02	; 2
    cea0:	79 f4       	brne	.+30     	; 0xcec0 <f_getfree+0x148>
    cea2:	e2 0d       	add	r30, r2
    cea4:	f3 1d       	adc	r31, r3
    cea6:	85 a9       	ldd	r24, Z+53	; 0x35
    cea8:	96 a9       	ldd	r25, Z+54	; 0x36
    ceaa:	89 2b       	or	r24, r25
    ceac:	29 f4       	brne	.+10     	; 0xceb8 <f_getfree+0x140>
    ceae:	9f ef       	ldi	r25, 0xFF	; 255
    ceb0:	c9 1a       	sub	r12, r25
    ceb2:	d9 0a       	sbc	r13, r25
    ceb4:	e9 0a       	sbc	r14, r25
    ceb6:	f9 0a       	sbc	r15, r25
    ceb8:	a2 e0       	ldi	r26, 0x02	; 2
    ceba:	2a 0e       	add	r2, r26
    cebc:	31 1c       	adc	r3, r1
    cebe:	15 c0       	rjmp	.+42     	; 0xceea <f_getfree+0x172>
    cec0:	cf 01       	movw	r24, r30
    cec2:	c5 96       	adiw	r24, 0x35	; 53
    cec4:	82 0d       	add	r24, r2
    cec6:	93 1d       	adc	r25, r3
    cec8:	0e 94 c6 48 	call	0x918c	; 0x918c <ld_dword>
    cecc:	dc 01       	movw	r26, r24
    cece:	cb 01       	movw	r24, r22
    ced0:	bf 70       	andi	r27, 0x0F	; 15
    ced2:	89 2b       	or	r24, r25
    ced4:	8a 2b       	or	r24, r26
    ced6:	8b 2b       	or	r24, r27
    ced8:	29 f4       	brne	.+10     	; 0xcee4 <f_getfree+0x16c>
    ceda:	bf ef       	ldi	r27, 0xFF	; 255
    cedc:	cb 1a       	sub	r12, r27
    cede:	db 0a       	sbc	r13, r27
    cee0:	eb 0a       	sbc	r14, r27
    cee2:	fb 0a       	sbc	r15, r27
    cee4:	e4 e0       	ldi	r30, 0x04	; 4
    cee6:	2e 0e       	add	r2, r30
    cee8:	31 1c       	adc	r3, r1
    ceea:	f1 e0       	ldi	r31, 0x01	; 1
    ceec:	3f 22       	and	r3, r31
    ceee:	21 e0       	ldi	r18, 0x01	; 1
    cef0:	82 1a       	sub	r8, r18
    cef2:	91 08       	sbc	r9, r1
    cef4:	a1 08       	sbc	r10, r1
    cef6:	b1 08       	sbc	r11, r1
    cef8:	09 f0       	breq	.+2      	; 0xcefc <f_getfree+0x184>
    cefa:	b5 cf       	rjmp	.-150    	; 0xce66 <f_getfree+0xee>
    cefc:	07 c0       	rjmp	.+14     	; 0xcf0c <f_getfree+0x194>
    cefe:	01 e0       	ldi	r16, 0x01	; 1
    cf00:	10 e0       	ldi	r17, 0x00	; 0
    cf02:	04 c0       	rjmp	.+8      	; 0xcf0c <f_getfree+0x194>
    cf04:	02 e0       	ldi	r16, 0x02	; 2
    cf06:	10 e0       	ldi	r17, 0x00	; 0
    cf08:	01 c0       	rjmp	.+2      	; 0xcf0c <f_getfree+0x194>
    cf0a:	8c 01       	movw	r16, r24
    cf0c:	ad 81       	ldd	r26, Y+5	; 0x05
    cf0e:	be 81       	ldd	r27, Y+6	; 0x06
    cf10:	cd 92       	st	X+, r12
    cf12:	dd 92       	st	X+, r13
    cf14:	ed 92       	st	X+, r14
    cf16:	fc 92       	st	X, r15
    cf18:	13 97       	sbiw	r26, 0x03	; 3
    cf1a:	e9 81       	ldd	r30, Y+1	; 0x01
    cf1c:	fa 81       	ldd	r31, Y+2	; 0x02
    cf1e:	c1 8a       	std	Z+17, r12	; 0x11
    cf20:	d2 8a       	std	Z+18, r13	; 0x12
    cf22:	e3 8a       	std	Z+19, r14	; 0x13
    cf24:	f4 8a       	std	Z+20, r15	; 0x14
    cf26:	84 81       	ldd	r24, Z+4	; 0x04
    cf28:	81 60       	ori	r24, 0x01	; 1
    cf2a:	84 83       	std	Z+4, r24	; 0x04
    cf2c:	c8 01       	movw	r24, r16
    cf2e:	2a 96       	adiw	r28, 0x0a	; 10
    cf30:	e2 e1       	ldi	r30, 0x12	; 18
    cf32:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0000cf36 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cf36:	a0 e6       	ldi	r26, 0x60	; 96
    cf38:	b0 e0       	ldi	r27, 0x00	; 0
    cf3a:	e1 ea       	ldi	r30, 0xA1	; 161
    cf3c:	f7 e6       	ldi	r31, 0x67	; 103
    cf3e:	0c 94 30 e4 	jmp	0x1c860	; 0x1c860 <__prologue_saves__+0xe>
    cf42:	a1 96       	adiw	r28, 0x21	; 33
    cf44:	9f af       	std	Y+63, r25	; 0x3f
    cf46:	8e af       	std	Y+62, r24	; 0x3e
    cf48:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cf4a:	42 e0       	ldi	r20, 0x02	; 2
    cf4c:	be 01       	movw	r22, r28
    cf4e:	63 5a       	subi	r22, 0xA3	; 163
    cf50:	7f 4f       	sbci	r23, 0xFF	; 255
    cf52:	ce 01       	movw	r24, r28
    cf54:	81 5a       	subi	r24, 0xA1	; 161
    cf56:	9f 4f       	sbci	r25, 0xFF	; 255
    cf58:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
	if (res == FR_OK) {
    cf5c:	00 97       	sbiw	r24, 0x00	; 0
    cf5e:	09 f0       	breq	.+2      	; 0xcf62 <f_unlink+0x2c>
    cf60:	8c c0       	rjmp	.+280    	; 0xd07a <f_unlink+0x144>
		dj.obj.fs = fs;
    cf62:	6f 96       	adiw	r28, 0x1f	; 31
    cf64:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf66:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf68:	6f 97       	sbiw	r28, 0x1f	; 31
    cf6a:	98 ab       	std	Y+48, r25	; 0x30
    cf6c:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cf6e:	80 e0       	ldi	r24, 0x00	; 0
    cf70:	92 e0       	ldi	r25, 0x02	; 2
    cf72:	cf d3       	rcall	.+1950   	; 0xd712 <ff_memalloc>
    cf74:	5c 01       	movw	r10, r24
    cf76:	00 97       	sbiw	r24, 0x00	; 0
    cf78:	09 f4       	brne	.+2      	; 0xcf7c <f_unlink+0x46>
    cf7a:	49 c0       	rjmp	.+146    	; 0xd00e <f_unlink+0xd8>
    cf7c:	6f 96       	adiw	r28, 0x1f	; 31
    cf7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf80:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf82:	6f 97       	sbiw	r28, 0x1f	; 31
    cf84:	94 87       	std	Z+12, r25	; 0x0c
    cf86:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cf88:	a1 96       	adiw	r28, 0x21	; 33
    cf8a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cf8c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cf8e:	a1 97       	sbiw	r28, 0x21	; 33
    cf90:	ce 01       	movw	r24, r28
    cf92:	8f 96       	adiw	r24, 0x2f	; 47
    cf94:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    cf98:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cf9a:	89 2b       	or	r24, r25
    cf9c:	a1 f5       	brne	.+104    	; 0xd006 <f_unlink+0xd0>
    cf9e:	67 96       	adiw	r28, 0x17	; 23
    cfa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    cfa2:	67 97       	sbiw	r28, 0x17	; 23
    cfa4:	85 fd       	sbrc	r24, 5
    cfa6:	36 c0       	rjmp	.+108    	; 0xd014 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cfa8:	87 fd       	sbrc	r24, 7
    cfaa:	34 c0       	rjmp	.+104    	; 0xd014 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cfac:	9b a8       	ldd	r9, Y+51	; 0x33
    cfae:	90 fc       	sbrc	r9, 0
    cfb0:	40 c0       	rjmp	.+128    	; 0xd032 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cfb2:	6f 96       	adiw	r28, 0x1f	; 31
    cfb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    cfb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    cfb8:	6f 97       	sbiw	r28, 0x1f	; 31
    cfba:	2b 96       	adiw	r28, 0x0b	; 11
    cfbc:	6e ad       	ldd	r22, Y+62	; 0x3e
    cfbe:	7f ad       	ldd	r23, Y+63	; 0x3f
    cfc0:	2b 97       	sbiw	r28, 0x0b	; 11
    cfc2:	f8 01       	movw	r30, r16
    cfc4:	80 81       	ld	r24, Z
    cfc6:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    cfca:	6b 01       	movw	r12, r22
    cfcc:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cfce:	94 fe       	sbrs	r9, 4
    cfd0:	33 c0       	rjmp	.+102    	; 0xd038 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cfd2:	f8 01       	movw	r30, r16
    cfd4:	85 89       	ldd	r24, Z+21	; 0x15
    cfd6:	96 89       	ldd	r25, Z+22	; 0x16
    cfd8:	a7 89       	ldd	r26, Z+23	; 0x17
    cfda:	b0 8d       	ldd	r27, Z+24	; 0x18
    cfdc:	c8 16       	cp	r12, r24
    cfde:	d9 06       	cpc	r13, r25
    cfe0:	ea 06       	cpc	r14, r26
    cfe2:	fb 06       	cpc	r15, r27
    cfe4:	31 f1       	breq	.+76     	; 0xd032 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cfe6:	1a 83       	std	Y+2, r17	; 0x02
    cfe8:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cfea:	cf 82       	std	Y+7, r12	; 0x07
    cfec:	d8 86       	std	Y+8, r13	; 0x08
    cfee:	e9 86       	std	Y+9, r14	; 0x09
    cff0:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cff2:	40 e0       	ldi	r20, 0x00	; 0
    cff4:	50 e0       	ldi	r21, 0x00	; 0
    cff6:	ba 01       	movw	r22, r20
    cff8:	ce 01       	movw	r24, r28
    cffa:	01 96       	adiw	r24, 0x01	; 1
    cffc:	0e 94 3a 52 	call	0xa474	; 0xa474 <dir_sdi>
    d000:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    d002:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d004:	51 f0       	breq	.+20     	; 0xd01a <f_unlink+0xe4>
    d006:	c5 01       	movw	r24, r10
    d008:	87 d3       	rcall	.+1806   	; 0xd718 <ff_memfree>
    d00a:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d00c:	36 c0       	rjmp	.+108    	; 0xd07a <f_unlink+0x144>
    d00e:	81 e1       	ldi	r24, 0x11	; 17
    d010:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    d012:	33 c0       	rjmp	.+102    	; 0xd07a <f_unlink+0x144>
    d014:	06 e0       	ldi	r16, 0x06	; 6
    d016:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    d018:	f6 cf       	rjmp	.-20     	; 0xd006 <f_unlink+0xd0>
    d01a:	60 e0       	ldi	r22, 0x00	; 0
    d01c:	70 e0       	ldi	r23, 0x00	; 0
    d01e:	ce 01       	movw	r24, r28
    d020:	01 96       	adiw	r24, 0x01	; 1
    d022:	0e 94 d4 55 	call	0xaba8	; 0xaba8 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    d026:	8c 01       	movw	r16, r24
    d028:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    d02a:	19 f0       	breq	.+6      	; 0xd032 <f_unlink+0xfc>
    d02c:	04 97       	sbiw	r24, 0x04	; 4
    d02e:	21 f0       	breq	.+8      	; 0xd038 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    d030:	ea cf       	rjmp	.-44     	; 0xd006 <f_unlink+0xd0>
    d032:	07 e0       	ldi	r16, 0x07	; 7
    d034:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    d036:	e7 cf       	rjmp	.-50     	; 0xd006 <f_unlink+0xd0>
    d038:	ce 01       	movw	r24, r28
    d03a:	8f 96       	adiw	r24, 0x2f	; 47
    d03c:	0e 94 a6 56 	call	0xad4c	; 0xad4c <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    d040:	8c 01       	movw	r16, r24
    d042:	89 2b       	or	r24, r25
    d044:	01 f7       	brne	.-64     	; 0xd006 <f_unlink+0xd0>
    d046:	c1 14       	cp	r12, r1
    d048:	d1 04       	cpc	r13, r1
    d04a:	e1 04       	cpc	r14, r1
    d04c:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    d04e:	41 f4       	brne	.+16     	; 0xd060 <f_unlink+0x12a>
    d050:	6f 96       	adiw	r28, 0x1f	; 31
    d052:	8e ad       	ldd	r24, Y+62	; 0x3e
    d054:	9f ad       	ldd	r25, Y+63	; 0x3f
    d056:	6f 97       	sbiw	r28, 0x1f	; 31
    d058:	0e 94 90 4c 	call	0x9920	; 0x9920 <sync_fs>
    d05c:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    d05e:	d3 cf       	rjmp	.-90     	; 0xd006 <f_unlink+0xd0>
    d060:	00 e0       	ldi	r16, 0x00	; 0
    d062:	10 e0       	ldi	r17, 0x00	; 0
    d064:	98 01       	movw	r18, r16
    d066:	b7 01       	movw	r22, r14
    d068:	a6 01       	movw	r20, r12
    d06a:	ce 01       	movw	r24, r28
    d06c:	8f 96       	adiw	r24, 0x2f	; 47
    d06e:	0e 94 21 54 	call	0xa842	; 0xa842 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    d072:	8c 01       	movw	r16, r24
    d074:	89 2b       	or	r24, r25
    d076:	39 f6       	brne	.-114    	; 0xd006 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d078:	eb cf       	rjmp	.-42     	; 0xd050 <f_unlink+0x11a>
    d07a:	c0 5a       	subi	r28, 0xA0	; 160
    d07c:	df 4f       	sbci	r29, 0xFF	; 255
    d07e:	eb e0       	ldi	r30, 0x0B	; 11
    d080:	0c 94 4c e4 	jmp	0x1c898	; 0x1c898 <__epilogue_restores__+0xe>

0000d084 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    d084:	a0 e4       	ldi	r26, 0x40	; 64
    d086:	b0 e0       	ldi	r27, 0x00	; 0
    d088:	e8 e4       	ldi	r30, 0x48	; 72
    d08a:	f8 e6       	ldi	r31, 0x68	; 104
    d08c:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
    d090:	21 96       	adiw	r28, 0x01	; 1
    d092:	9f af       	std	Y+63, r25	; 0x3f
    d094:	8e af       	std	Y+62, r24	; 0x3e
    d096:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d098:	42 e0       	ldi	r20, 0x02	; 2
    d09a:	be 01       	movw	r22, r28
    d09c:	63 5c       	subi	r22, 0xC3	; 195
    d09e:	7f 4f       	sbci	r23, 0xFF	; 255
    d0a0:	ce 01       	movw	r24, r28
    d0a2:	cf 96       	adiw	r24, 0x3f	; 63
    d0a4:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
	if (res == FR_OK) {
    d0a8:	00 97       	sbiw	r24, 0x00	; 0
    d0aa:	09 f0       	breq	.+2      	; 0xd0ae <f_mkdir+0x2a>
    d0ac:	d6 c0       	rjmp	.+428    	; 0xd25a <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    d0ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0b2:	9a 83       	std	Y+2, r25	; 0x02
    d0b4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d0b6:	80 e0       	ldi	r24, 0x00	; 0
    d0b8:	92 e0       	ldi	r25, 0x02	; 2
    d0ba:	2b d3       	rcall	.+1622   	; 0xd712 <ff_memalloc>
    d0bc:	6c 01       	movw	r12, r24
    d0be:	00 97       	sbiw	r24, 0x00	; 0
    d0c0:	e9 f0       	breq	.+58     	; 0xd0fc <f_mkdir+0x78>
    d0c2:	ed ad       	ldd	r30, Y+61	; 0x3d
    d0c4:	fe ad       	ldd	r31, Y+62	; 0x3e
    d0c6:	94 87       	std	Z+12, r25	; 0x0c
    d0c8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    d0ca:	21 96       	adiw	r28, 0x01	; 1
    d0cc:	6e ad       	ldd	r22, Y+62	; 0x3e
    d0ce:	7f ad       	ldd	r23, Y+63	; 0x3f
    d0d0:	21 97       	sbiw	r28, 0x01	; 1
    d0d2:	ce 01       	movw	r24, r28
    d0d4:	01 96       	adiw	r24, 0x01	; 1
    d0d6:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    d0da:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    d0dc:	89 2b       	or	r24, r25
    d0de:	89 f0       	breq	.+34     	; 0xd102 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    d0e0:	84 e0       	ldi	r24, 0x04	; 4
    d0e2:	e8 16       	cp	r14, r24
    d0e4:	f1 04       	cpc	r15, r1
    d0e6:	31 f4       	brne	.+12     	; 0xd0f4 <f_mkdir+0x70>
    d0e8:	88 a5       	ldd	r24, Y+40	; 0x28
    d0ea:	85 ff       	sbrs	r24, 5
    d0ec:	0e c0       	rjmp	.+28     	; 0xd10a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    d0ee:	26 e0       	ldi	r18, 0x06	; 6
    d0f0:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    d0f2:	f1 2c       	mov	r15, r1
    d0f4:	c6 01       	movw	r24, r12
    d0f6:	10 d3       	rcall	.+1568   	; 0xd718 <ff_memfree>
    d0f8:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0fa:	af c0       	rjmp	.+350    	; 0xd25a <f_mkdir+0x1d6>
    d0fc:	81 e1       	ldi	r24, 0x11	; 17
    d0fe:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    d100:	ac c0       	rjmp	.+344    	; 0xd25a <f_mkdir+0x1d6>
    d102:	38 e0       	ldi	r19, 0x08	; 8
    d104:	e3 2e       	mov	r14, r19
    d106:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    d108:	f5 cf       	rjmp	.-22     	; 0xd0f4 <f_mkdir+0x70>
    d10a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d10c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d10e:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    d110:	8f a7       	std	Y+47, r24	; 0x2f
    d112:	40 e0       	ldi	r20, 0x00	; 0
    d114:	50 e0       	ldi	r21, 0x00	; 0
    d116:	ba 01       	movw	r22, r20
    d118:	ce 01       	movw	r24, r28
    d11a:	8f 96       	adiw	r24, 0x2f	; 47
    d11c:	0e 94 fb 52 	call	0xa5f6	; 0xa5f6 <create_chain>
    d120:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    d122:	5c 01       	movw	r10, r24
    d124:	67 2b       	or	r22, r23
    d126:	68 2b       	or	r22, r24
    d128:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    d12a:	09 f1       	breq	.+66     	; 0xd16e <f_mkdir+0xea>
    d12c:	e1 e0       	ldi	r30, 0x01	; 1
    d12e:	8e 16       	cp	r8, r30
    d130:	91 04       	cpc	r9, r1
    d132:	a1 04       	cpc	r10, r1
    d134:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    d136:	61 f0       	breq	.+24     	; 0xd150 <f_mkdir+0xcc>
    d138:	ff ef       	ldi	r31, 0xFF	; 255
    d13a:	8f 16       	cp	r8, r31
    d13c:	9f 06       	cpc	r9, r31
    d13e:	af 06       	cpc	r10, r31
    d140:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    d142:	d9 f4       	brne	.+54     	; 0xd17a <f_mkdir+0xf6>
    d144:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <get_fattime>
    d148:	ee 24       	eor	r14, r14
    d14a:	e3 94       	inc	r14
    d14c:	f1 2c       	mov	r15, r1
    d14e:	05 c0       	rjmp	.+10     	; 0xd15a <f_mkdir+0xd6>
    d150:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    d154:	92 e0       	ldi	r25, 0x02	; 2
    d156:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    d158:	f1 2c       	mov	r15, r1
    d15a:	00 e0       	ldi	r16, 0x00	; 0
    d15c:	10 e0       	ldi	r17, 0x00	; 0
    d15e:	98 01       	movw	r18, r16
    d160:	b5 01       	movw	r22, r10
    d162:	a4 01       	movw	r20, r8
    d164:	ce 01       	movw	r24, r28
    d166:	8f 96       	adiw	r24, 0x2f	; 47
    d168:	0e 94 21 54 	call	0xa842	; 0xa842 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    d16c:	c3 cf       	rjmp	.-122    	; 0xd0f4 <f_mkdir+0x70>
    d16e:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    d172:	87 e0       	ldi	r24, 0x07	; 7
    d174:	e8 2e       	mov	r14, r24
    d176:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    d178:	f0 cf       	rjmp	.-32     	; 0xd15a <f_mkdir+0xd6>
    d17a:	0e 94 77 72 	call	0xe4ee	; 0xe4ee <get_fattime>
    d17e:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    d180:	3c 01       	movw	r6, r24
    d182:	b5 01       	movw	r22, r10
    d184:	a4 01       	movw	r20, r8
    d186:	8d ad       	ldd	r24, Y+61	; 0x3d
    d188:	9e ad       	ldd	r25, Y+62	; 0x3e
    d18a:	0e 94 02 4d 	call	0x9a04	; 0x9a04 <dir_clear>
				if (res == FR_OK) {
    d18e:	7c 01       	movw	r14, r24
    d190:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    d192:	19 f7       	brne	.-58     	; 0xd15a <f_mkdir+0xd6>
    d194:	8d ad       	ldd	r24, Y+61	; 0x3d
    d196:	9e ad       	ldd	r25, Y+62	; 0x3e
    d198:	4b e0       	ldi	r20, 0x0B	; 11
    d19a:	50 e0       	ldi	r21, 0x00	; 0
    d19c:	60 e2       	ldi	r22, 0x20	; 32
    d19e:	70 e0       	ldi	r23, 0x00	; 0
    d1a0:	c5 96       	adiw	r24, 0x35	; 53
    d1a2:	0e 94 e1 48 	call	0x91c2	; 0x91c2 <mem_set>
						fs->win[DIR_Name] = '.';
    d1a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    d1a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    d1aa:	1e e2       	ldi	r17, 0x2E	; 46
    d1ac:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    d1ae:	15 ab       	std	Z+53, r17	; 0x35
    d1b0:	e0 5c       	subi	r30, 0xC0	; 192
    d1b2:	ff 4f       	sbci	r31, 0xFF	; 255
    d1b4:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    d1b6:	20 83       	st	Z, r18
    d1b8:	b3 01       	movw	r22, r6
    d1ba:	a2 01       	movw	r20, r4
    d1bc:	85 5b       	subi	r24, 0xB5	; 181
    d1be:	9f 4f       	sbci	r25, 0xFF	; 255
    d1c0:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
						st_clust(fs, fs->win, dcl);
    d1c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    d1c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    d1c8:	bc 01       	movw	r22, r24
    d1ca:	6b 5c       	subi	r22, 0xCB	; 203
    d1cc:	7f 4f       	sbci	r23, 0xFF	; 255
    d1ce:	a5 01       	movw	r20, r10
    d1d0:	94 01       	movw	r18, r8
    d1d2:	0e 94 30 4c 	call	0x9860	; 0x9860 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    d1d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    d1d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    d1da:	bc 01       	movw	r22, r24
    d1dc:	6b 5c       	subi	r22, 0xCB	; 203
    d1de:	7f 4f       	sbci	r23, 0xFF	; 255
    d1e0:	40 e2       	ldi	r20, 0x20	; 32
    d1e2:	50 e0       	ldi	r21, 0x00	; 0
    d1e4:	8b 5a       	subi	r24, 0xAB	; 171
    d1e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d1e8:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    d1ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    d1ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    d1f0:	fc 01       	movw	r30, r24
    d1f2:	ea 5a       	subi	r30, 0xAA	; 170
    d1f4:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    d1f6:	10 83       	st	Z, r17
    d1f8:	2f 81       	ldd	r18, Y+7	; 0x07
    d1fa:	38 85       	ldd	r19, Y+8	; 0x08
    d1fc:	49 85       	ldd	r20, Y+9	; 0x09
    d1fe:	5a 85       	ldd	r21, Y+10	; 0x0a
    d200:	bc 01       	movw	r22, r24
    d202:	6b 5a       	subi	r22, 0xAB	; 171
    d204:	7f 4f       	sbci	r23, 0xFF	; 255
    d206:	0e 94 30 4c 	call	0x9860	; 0x9860 <st_clust.isra.5>
						fs->wflag = 1;
    d20a:	ed ad       	ldd	r30, Y+61	; 0x3d
    d20c:	fe ad       	ldd	r31, Y+62	; 0x3e
    d20e:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    d210:	83 83       	std	Z+3, r24	; 0x03
    d212:	ce 01       	movw	r24, r28
    d214:	01 96       	adiw	r24, 0x01	; 1
    d216:	0e 94 fc 57 	call	0xaff8	; 0xaff8 <dir_register>
				}
			}
			if (res == FR_OK) {
    d21a:	7c 01       	movw	r14, r24
    d21c:	89 2b       	or	r24, r25
    d21e:	09 f0       	breq	.+2      	; 0xd222 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    d220:	9c cf       	rjmp	.-200    	; 0xd15a <f_mkdir+0xd6>
    d222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d226:	b3 01       	movw	r22, r6
    d228:	a2 01       	movw	r20, r4
    d22a:	46 96       	adiw	r24, 0x16	; 22
    d22c:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    d230:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d232:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d234:	a5 01       	movw	r20, r10
    d236:	94 01       	movw	r18, r8
    d238:	8d ad       	ldd	r24, Y+61	; 0x3d
    d23a:	9e ad       	ldd	r25, Y+62	; 0x3e
    d23c:	0e 94 30 4c 	call	0x9860	; 0x9860 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    d240:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d242:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d244:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    d246:	83 87       	std	Z+11, r24	; 0x0b
    d248:	8d ad       	ldd	r24, Y+61	; 0x3d
    d24a:	9e ad       	ldd	r25, Y+62	; 0x3e
    d24c:	21 e0       	ldi	r18, 0x01	; 1
    d24e:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    d250:	23 83       	std	Z+3, r18	; 0x03
    d252:	0e 94 90 4c 	call	0x9920	; 0x9920 <sync_fs>
    d256:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d258:	4d cf       	rjmp	.-358    	; 0xd0f4 <f_mkdir+0x70>
    d25a:	c0 5c       	subi	r28, 0xC0	; 192
    d25c:	df 4f       	sbci	r29, 0xFF	; 255
    d25e:	e0 e1       	ldi	r30, 0x10	; 16
    d260:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

0000d264 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    d264:	a2 e8       	ldi	r26, 0x82	; 130
    d266:	b0 e0       	ldi	r27, 0x00	; 0
    d268:	e8 e3       	ldi	r30, 0x38	; 56
    d26a:	f9 e6       	ldi	r31, 0x69	; 105
    d26c:	0c 94 32 e4 	jmp	0x1c864	; 0x1c864 <__prologue_saves__+0x12>
    d270:	c1 58       	subi	r28, 0x81	; 129
    d272:	df 4f       	sbci	r29, 0xFF	; 255
    d274:	99 83       	std	Y+1, r25	; 0x01
    d276:	88 83       	st	Y, r24
    d278:	cf 57       	subi	r28, 0x7F	; 127
    d27a:	d0 40       	sbci	r29, 0x00	; 0
    d27c:	cf 57       	subi	r28, 0x7F	; 127
    d27e:	df 4f       	sbci	r29, 0xFF	; 255
    d280:	79 83       	std	Y+1, r23	; 0x01
    d282:	68 83       	st	Y, r22
    d284:	c1 58       	subi	r28, 0x81	; 129
    d286:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d288:	ce 01       	movw	r24, r28
    d28a:	8f 57       	subi	r24, 0x7F	; 127
    d28c:	9f 4f       	sbci	r25, 0xFF	; 255
    d28e:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d292:	42 e0       	ldi	r20, 0x02	; 2
    d294:	be 01       	movw	r22, r28
    d296:	63 58       	subi	r22, 0x83	; 131
    d298:	7f 4f       	sbci	r23, 0xFF	; 255
    d29a:	ce 01       	movw	r24, r28
    d29c:	81 58       	subi	r24, 0x81	; 129
    d29e:	9f 4f       	sbci	r25, 0xFF	; 255
    d2a0:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
	if (res == FR_OK) {
    d2a4:	00 97       	sbiw	r24, 0x00	; 0
    d2a6:	09 f0       	breq	.+2      	; 0xd2aa <f_rename+0x46>
    d2a8:	ed c0       	rjmp	.+474    	; 0xd484 <f_rename+0x220>
		djo.obj.fs = fs;
    d2aa:	ef 96       	adiw	r28, 0x3f	; 63
    d2ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    d2ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    d2b0:	ef 97       	sbiw	r28, 0x3f	; 63
    d2b2:	98 ab       	std	Y+48, r25	; 0x30
    d2b4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d2b6:	80 e0       	ldi	r24, 0x00	; 0
    d2b8:	92 e0       	ldi	r25, 0x02	; 2
    d2ba:	2b d2       	rcall	.+1110   	; 0xd712 <ff_memalloc>
    d2bc:	6c 01       	movw	r12, r24
    d2be:	00 97       	sbiw	r24, 0x00	; 0
    d2c0:	f1 f0       	breq	.+60     	; 0xd2fe <f_rename+0x9a>
    d2c2:	ef 96       	adiw	r28, 0x3f	; 63
    d2c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    d2c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    d2c8:	ef 97       	sbiw	r28, 0x3f	; 63
    d2ca:	94 87       	std	Z+12, r25	; 0x0c
    d2cc:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d2ce:	c1 58       	subi	r28, 0x81	; 129
    d2d0:	df 4f       	sbci	r29, 0xFF	; 255
    d2d2:	68 81       	ld	r22, Y
    d2d4:	79 81       	ldd	r23, Y+1	; 0x01
    d2d6:	cf 57       	subi	r28, 0x7F	; 127
    d2d8:	d0 40       	sbci	r29, 0x00	; 0
    d2da:	ce 01       	movw	r24, r28
    d2dc:	8f 96       	adiw	r24, 0x2f	; 47
    d2de:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    d2e2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d2e4:	89 2b       	or	r24, r25
    d2e6:	39 f4       	brne	.+14     	; 0xd2f6 <f_rename+0x92>
    d2e8:	67 96       	adiw	r28, 0x17	; 23
    d2ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    d2ec:	67 97       	sbiw	r28, 0x17	; 23
    d2ee:	80 7a       	andi	r24, 0xA0	; 160
    d2f0:	49 f0       	breq	.+18     	; 0xd304 <f_rename+0xa0>
    d2f2:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d2f4:	10 e0       	ldi	r17, 0x00	; 0
    d2f6:	c6 01       	movw	r24, r12
    d2f8:	0f d2       	rcall	.+1054   	; 0xd718 <ff_memfree>
    d2fa:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d2fc:	c3 c0       	rjmp	.+390    	; 0xd484 <f_rename+0x220>
    d2fe:	81 e1       	ldi	r24, 0x11	; 17
    d300:	90 e0       	ldi	r25, 0x00	; 0
    d302:	c0 c0       	rjmp	.+384    	; 0xd484 <f_rename+0x220>
    d304:	2b 96       	adiw	r28, 0x0b	; 11
    d306:	6e ad       	ldd	r22, Y+62	; 0x3e
    d308:	7f ad       	ldd	r23, Y+63	; 0x3f
    d30a:	2b 97       	sbiw	r28, 0x0b	; 11
    d30c:	40 e2       	ldi	r20, 0x20	; 32
    d30e:	50 e0       	ldi	r21, 0x00	; 0
    d310:	ce 01       	movw	r24, r28
    d312:	83 5a       	subi	r24, 0xA3	; 163
    d314:	9f 4f       	sbci	r25, 0xFF	; 255
    d316:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
    d31a:	4e e2       	ldi	r20, 0x2E	; 46
    d31c:	50 e0       	ldi	r21, 0x00	; 0
    d31e:	be 01       	movw	r22, r28
    d320:	61 5d       	subi	r22, 0xD1	; 209
    d322:	7f 4f       	sbci	r23, 0xFF	; 255
    d324:	ce 01       	movw	r24, r28
    d326:	01 96       	adiw	r24, 0x01	; 1
    d328:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d32c:	cf 57       	subi	r28, 0x7F	; 127
    d32e:	df 4f       	sbci	r29, 0xFF	; 255
    d330:	68 81       	ld	r22, Y
    d332:	79 81       	ldd	r23, Y+1	; 0x01
    d334:	c1 58       	subi	r28, 0x81	; 129
    d336:	d0 40       	sbci	r29, 0x00	; 0
    d338:	ce 01       	movw	r24, r28
    d33a:	01 96       	adiw	r24, 0x01	; 1
    d33c:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d340:	8c 01       	movw	r16, r24
    d342:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d344:	f9 f4       	brne	.+62     	; 0xd384 <f_rename+0x120>
    d346:	4f 81       	ldd	r20, Y+7	; 0x07
    d348:	58 85       	ldd	r21, Y+8	; 0x08
    d34a:	69 85       	ldd	r22, Y+9	; 0x09
    d34c:	7a 85       	ldd	r23, Y+10	; 0x0a
    d34e:	8d a9       	ldd	r24, Y+53	; 0x35
    d350:	9e a9       	ldd	r25, Y+54	; 0x36
    d352:	af a9       	ldd	r26, Y+55	; 0x37
    d354:	b8 ad       	ldd	r27, Y+56	; 0x38
    d356:	48 17       	cp	r20, r24
    d358:	59 07       	cpc	r21, r25
    d35a:	6a 07       	cpc	r22, r26
    d35c:	7b 07       	cpc	r23, r27
    d35e:	09 f0       	breq	.+2      	; 0xd362 <f_rename+0xfe>
    d360:	8b c0       	rjmp	.+278    	; 0xd478 <f_rename+0x214>
    d362:	4f 85       	ldd	r20, Y+15	; 0x0f
    d364:	58 89       	ldd	r21, Y+16	; 0x10
    d366:	69 89       	ldd	r22, Y+17	; 0x11
    d368:	7a 89       	ldd	r23, Y+18	; 0x12
    d36a:	21 96       	adiw	r28, 0x01	; 1
    d36c:	8c ad       	ldd	r24, Y+60	; 0x3c
    d36e:	9d ad       	ldd	r25, Y+61	; 0x3d
    d370:	ae ad       	ldd	r26, Y+62	; 0x3e
    d372:	bf ad       	ldd	r27, Y+63	; 0x3f
    d374:	21 97       	sbiw	r28, 0x01	; 1
    d376:	48 17       	cp	r20, r24
    d378:	59 07       	cpc	r21, r25
    d37a:	6a 07       	cpc	r22, r26
    d37c:	7b 07       	cpc	r23, r27
    d37e:	09 f0       	breq	.+2      	; 0xd382 <f_rename+0x11e>
    d380:	7b c0       	rjmp	.+246    	; 0xd478 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d382:	04 c0       	rjmp	.+8      	; 0xd38c <f_rename+0x128>
    d384:	04 30       	cpi	r16, 0x04	; 4
    d386:	11 05       	cpc	r17, r1
    d388:	09 f0       	breq	.+2      	; 0xd38c <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d38a:	b5 cf       	rjmp	.-150    	; 0xd2f6 <f_rename+0x92>
    d38c:	ce 01       	movw	r24, r28
    d38e:	01 96       	adiw	r24, 0x01	; 1
    d390:	0e 94 fc 57 	call	0xaff8	; 0xaff8 <dir_register>
					if (res == FR_OK) {
    d394:	8c 01       	movw	r16, r24
    d396:	89 2b       	or	r24, r25
    d398:	09 f0       	breq	.+2      	; 0xd39c <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d39a:	ad cf       	rjmp	.-166    	; 0xd2f6 <f_rename+0x92>
    d39c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d39e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d3a0:	6d e5       	ldi	r22, 0x5D	; 93
    d3a2:	70 e0       	ldi	r23, 0x00	; 0
    d3a4:	6c 0f       	add	r22, r28
    d3a6:	7d 1f       	adc	r23, r29
    d3a8:	63 5f       	subi	r22, 0xF3	; 243
    d3aa:	7f 4f       	sbci	r23, 0xFF	; 255
    d3ac:	43 e1       	ldi	r20, 0x13	; 19
    d3ae:	50 e0       	ldi	r21, 0x00	; 0
    d3b0:	c8 01       	movw	r24, r16
    d3b2:	0d 96       	adiw	r24, 0x0d	; 13
    d3b4:	0e 94 4a 4a 	call	0x9494	; 0x9494 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d3b8:	a9 96       	adiw	r28, 0x29	; 41
    d3ba:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d3bc:	a9 97       	sbiw	r28, 0x29	; 41
    d3be:	84 ff       	sbrs	r24, 4
    d3c0:	80 62       	ori	r24, 0x20	; 32
    d3c2:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d3c4:	83 87       	std	Z+11, r24	; 0x0b
    d3c6:	ef 96       	adiw	r28, 0x3f	; 63
    d3c8:	ee ac       	ldd	r14, Y+62	; 0x3e
    d3ca:	ff ac       	ldd	r15, Y+63	; 0x3f
    d3cc:	ef 97       	sbiw	r28, 0x3f	; 63
    d3ce:	bb 24       	eor	r11, r11
    d3d0:	b3 94       	inc	r11
    d3d2:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d3d4:	b3 82       	std	Z+3, r11	; 0x03
    d3d6:	f8 01       	movw	r30, r16
    d3d8:	83 85       	ldd	r24, Z+11	; 0x0b
    d3da:	84 ff       	sbrs	r24, 4
    d3dc:	3d c0       	rjmp	.+122    	; 0xd458 <f_rename+0x1f4>
    d3de:	4d a9       	ldd	r20, Y+53	; 0x35
    d3e0:	5e a9       	ldd	r21, Y+54	; 0x36
    d3e2:	6f a9       	ldd	r22, Y+55	; 0x37
    d3e4:	78 ad       	ldd	r23, Y+56	; 0x38
    d3e6:	8f 81       	ldd	r24, Y+7	; 0x07
    d3e8:	98 85       	ldd	r25, Y+8	; 0x08
    d3ea:	a9 85       	ldd	r26, Y+9	; 0x09
    d3ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    d3ee:	48 17       	cp	r20, r24
    d3f0:	59 07       	cpc	r21, r25
    d3f2:	6a 07       	cpc	r22, r26
    d3f4:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d3f6:	81 f1       	breq	.+96     	; 0xd458 <f_rename+0x1f4>
    d3f8:	b8 01       	movw	r22, r16
    d3fa:	f7 01       	movw	r30, r14
    d3fc:	80 81       	ld	r24, Z
    d3fe:	0e 94 1b 4c 	call	0x9836	; 0x9836 <ld_clust.isra.4>
    d402:	ab 01       	movw	r20, r22
    d404:	bc 01       	movw	r22, r24
    d406:	c7 01       	movw	r24, r14
    d408:	0e 94 7f 49 	call	0x92fe	; 0x92fe <clst2sect>
    d40c:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d40e:	bc 01       	movw	r22, r24
    d410:	41 15       	cp	r20, r1
    d412:	51 05       	cpc	r21, r1
    d414:	61 05       	cpc	r22, r1
    d416:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d418:	91 f1       	breq	.+100    	; 0xd47e <f_rename+0x21a>
    d41a:	c7 01       	movw	r24, r14
    d41c:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d420:	8c 01       	movw	r16, r24
    d422:	89 2b       	or	r24, r25
    d424:	09 f0       	breq	.+2      	; 0xd428 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d426:	67 cf       	rjmp	.-306    	; 0xd2f6 <f_rename+0x92>
    d428:	ef 96       	adiw	r28, 0x3f	; 63
    d42a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d42c:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d42e:	ef 97       	sbiw	r28, 0x3f	; 63
    d430:	fc 01       	movw	r30, r24
    d432:	ea 5a       	subi	r30, 0xAA	; 170
    d434:	ff 4f       	sbci	r31, 0xFF	; 255
    d436:	20 81       	ld	r18, Z
    d438:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d43a:	71 f4       	brne	.+28     	; 0xd458 <f_rename+0x1f4>
    d43c:	2f 81       	ldd	r18, Y+7	; 0x07
    d43e:	38 85       	ldd	r19, Y+8	; 0x08
    d440:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d442:	5a 85       	ldd	r21, Y+10	; 0x0a
    d444:	bc 01       	movw	r22, r24
    d446:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d448:	7f 4f       	sbci	r23, 0xFF	; 255
    d44a:	0e 94 30 4c 	call	0x9860	; 0x9860 <st_clust.isra.5>
									fs->wflag = 1;
    d44e:	ef 96       	adiw	r28, 0x3f	; 63
    d450:	ee ad       	ldd	r30, Y+62	; 0x3e
    d452:	ff ad       	ldd	r31, Y+63	; 0x3f
    d454:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d456:	b3 82       	std	Z+3, r11	; 0x03
    d458:	ce 01       	movw	r24, r28
    d45a:	8f 96       	adiw	r24, 0x2f	; 47
    d45c:	0e 94 a6 56 	call	0xad4c	; 0xad4c <dir_remove>
				if (res == FR_OK) {
    d460:	8c 01       	movw	r16, r24
    d462:	89 2b       	or	r24, r25
    d464:	09 f0       	breq	.+2      	; 0xd468 <f_rename+0x204>
					res = sync_fs(fs);
    d466:	47 cf       	rjmp	.-370    	; 0xd2f6 <f_rename+0x92>
    d468:	ef 96       	adiw	r28, 0x3f	; 63
    d46a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d46c:	9f ad       	ldd	r25, Y+63	; 0x3f
    d46e:	ef 97       	sbiw	r28, 0x3f	; 63
    d470:	0e 94 90 4c 	call	0x9920	; 0x9920 <sync_fs>
    d474:	8c 01       	movw	r16, r24
    d476:	3f cf       	rjmp	.-386    	; 0xd2f6 <f_rename+0x92>
    d478:	08 e0       	ldi	r16, 0x08	; 8
    d47a:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d47c:	3c cf       	rjmp	.-392    	; 0xd2f6 <f_rename+0x92>
    d47e:	02 e0       	ldi	r16, 0x02	; 2
    d480:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d482:	39 cf       	rjmp	.-398    	; 0xd2f6 <f_rename+0x92>
    d484:	ce 57       	subi	r28, 0x7E	; 126
    d486:	df 4f       	sbci	r29, 0xFF	; 255
    d488:	e9 e0       	ldi	r30, 0x09	; 9
    d48a:	0c 94 4e e4 	jmp	0x1c89c	; 0x1c89c <__epilogue_restores__+0x12>

0000d48e <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d48e:	a2 e3       	ldi	r26, 0x32	; 50
    d490:	b0 e0       	ldi	r27, 0x00	; 0
    d492:	ed e4       	ldi	r30, 0x4D	; 77
    d494:	fa e6       	ldi	r31, 0x6A	; 106
    d496:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    d49a:	9a ab       	std	Y+50, r25	; 0x32
    d49c:	89 ab       	std	Y+49, r24	; 0x31
    d49e:	e6 2e       	mov	r14, r22
    d4a0:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d4a2:	42 e0       	ldi	r20, 0x02	; 2
    d4a4:	be 01       	movw	r22, r28
    d4a6:	61 5d       	subi	r22, 0xD1	; 209
    d4a8:	7f 4f       	sbci	r23, 0xFF	; 255
    d4aa:	ce 01       	movw	r24, r28
    d4ac:	c1 96       	adiw	r24, 0x31	; 49
    d4ae:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
	if (res == FR_OK) {
    d4b2:	00 97       	sbiw	r24, 0x00	; 0
    d4b4:	a9 f5       	brne	.+106    	; 0xd520 <f_chmod+0x92>
		dj.obj.fs = fs;
    d4b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d4b8:	98 a9       	ldd	r25, Y+48	; 0x30
    d4ba:	9a 83       	std	Y+2, r25	; 0x02
    d4bc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d4be:	80 e0       	ldi	r24, 0x00	; 0
    d4c0:	92 e0       	ldi	r25, 0x02	; 2
    d4c2:	27 d1       	rcall	.+590    	; 0xd712 <ff_memalloc>
    d4c4:	6c 01       	movw	r12, r24
    d4c6:	00 97       	sbiw	r24, 0x00	; 0
    d4c8:	b1 f0       	breq	.+44     	; 0xd4f6 <f_chmod+0x68>
    d4ca:	ef a5       	ldd	r30, Y+47	; 0x2f
    d4cc:	f8 a9       	ldd	r31, Y+48	; 0x30
    d4ce:	94 87       	std	Z+12, r25	; 0x0c
    d4d0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d4d2:	69 a9       	ldd	r22, Y+49	; 0x31
    d4d4:	7a a9       	ldd	r23, Y+50	; 0x32
    d4d6:	ce 01       	movw	r24, r28
    d4d8:	01 96       	adiw	r24, 0x01	; 1
    d4da:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    d4de:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d4e0:	89 2b       	or	r24, r25
    d4e2:	29 f4       	brne	.+10     	; 0xd4ee <f_chmod+0x60>
    d4e4:	88 a5       	ldd	r24, Y+40	; 0x28
    d4e6:	80 7a       	andi	r24, 0xA0	; 160
    d4e8:	49 f0       	breq	.+18     	; 0xd4fc <f_chmod+0x6e>
    d4ea:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d4ec:	10 e0       	ldi	r17, 0x00	; 0
    d4ee:	c6 01       	movw	r24, r12
    d4f0:	13 d1       	rcall	.+550    	; 0xd718 <ff_memfree>
    d4f2:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d4f4:	15 c0       	rjmp	.+42     	; 0xd520 <f_chmod+0x92>
    d4f6:	81 e1       	ldi	r24, 0x11	; 17
    d4f8:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d4fa:	12 c0       	rjmp	.+36     	; 0xd520 <f_chmod+0x92>
    d4fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d4fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d500:	83 85       	ldd	r24, Z+11	; 0x0b
    d502:	6e 2d       	mov	r22, r14
    d504:	68 27       	eor	r22, r24
    d506:	6f 21       	and	r22, r15
    d508:	67 72       	andi	r22, 0x27	; 39
    d50a:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d50c:	63 87       	std	Z+11, r22	; 0x0b
    d50e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d510:	98 a9       	ldd	r25, Y+48	; 0x30
    d512:	21 e0       	ldi	r18, 0x01	; 1
    d514:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d516:	23 83       	std	Z+3, r18	; 0x03
    d518:	0e 94 90 4c 	call	0x9920	; 0x9920 <sync_fs>
    d51c:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d51e:	e7 cf       	rjmp	.-50     	; 0xd4ee <f_chmod+0x60>
    d520:	e2 96       	adiw	r28, 0x32	; 50
    d522:	e8 e0       	ldi	r30, 0x08	; 8
    d524:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000d528 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d528:	a2 e3       	ldi	r26, 0x32	; 50
    d52a:	b0 e0       	ldi	r27, 0x00	; 0
    d52c:	ea e9       	ldi	r30, 0x9A	; 154
    d52e:	fa e6       	ldi	r31, 0x6A	; 106
    d530:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    d534:	9a ab       	std	Y+50, r25	; 0x32
    d536:	89 ab       	std	Y+49, r24	; 0x31
    d538:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d53a:	42 e0       	ldi	r20, 0x02	; 2
    d53c:	be 01       	movw	r22, r28
    d53e:	61 5d       	subi	r22, 0xD1	; 209
    d540:	7f 4f       	sbci	r23, 0xFF	; 255
    d542:	ce 01       	movw	r24, r28
    d544:	c1 96       	adiw	r24, 0x31	; 49
    d546:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
	if (res == FR_OK) {
    d54a:	00 97       	sbiw	r24, 0x00	; 0
    d54c:	09 f0       	breq	.+2      	; 0xd550 <f_utime+0x28>
    d54e:	41 c0       	rjmp	.+130    	; 0xd5d2 <f_utime+0xaa>
		dj.obj.fs = fs;
    d550:	8f a5       	ldd	r24, Y+47	; 0x2f
    d552:	98 a9       	ldd	r25, Y+48	; 0x30
    d554:	9a 83       	std	Y+2, r25	; 0x02
    d556:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d558:	80 e0       	ldi	r24, 0x00	; 0
    d55a:	92 e0       	ldi	r25, 0x02	; 2
    d55c:	da d0       	rcall	.+436    	; 0xd712 <ff_memalloc>
    d55e:	7c 01       	movw	r14, r24
    d560:	00 97       	sbiw	r24, 0x00	; 0
    d562:	b1 f0       	breq	.+44     	; 0xd590 <f_utime+0x68>
    d564:	ef a5       	ldd	r30, Y+47	; 0x2f
    d566:	f8 a9       	ldd	r31, Y+48	; 0x30
    d568:	94 87       	std	Z+12, r25	; 0x0c
    d56a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d56c:	69 a9       	ldd	r22, Y+49	; 0x31
    d56e:	7a a9       	ldd	r23, Y+50	; 0x32
    d570:	ce 01       	movw	r24, r28
    d572:	01 96       	adiw	r24, 0x01	; 1
    d574:	0e 94 a0 59 	call	0xb340	; 0xb340 <follow_path>
    d578:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d57a:	89 2b       	or	r24, r25
    d57c:	29 f4       	brne	.+10     	; 0xd588 <f_utime+0x60>
    d57e:	88 a5       	ldd	r24, Y+40	; 0x28
    d580:	80 7a       	andi	r24, 0xA0	; 160
    d582:	49 f0       	breq	.+18     	; 0xd596 <f_utime+0x6e>
    d584:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d586:	10 e0       	ldi	r17, 0x00	; 0
    d588:	c7 01       	movw	r24, r14
    d58a:	c6 d0       	rcall	.+396    	; 0xd718 <ff_memfree>
    d58c:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d58e:	21 c0       	rjmp	.+66     	; 0xd5d2 <f_utime+0xaa>
    d590:	81 e1       	ldi	r24, 0x11	; 17
    d592:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d594:	1e c0       	rjmp	.+60     	; 0xd5d2 <f_utime+0xaa>
    d596:	f6 01       	movw	r30, r12
    d598:	44 81       	ldd	r20, Z+4	; 0x04
    d59a:	55 81       	ldd	r21, Z+5	; 0x05
    d59c:	60 e0       	ldi	r22, 0x00	; 0
    d59e:	70 e0       	ldi	r23, 0x00	; 0
    d5a0:	ba 01       	movw	r22, r20
    d5a2:	55 27       	eor	r21, r21
    d5a4:	44 27       	eor	r20, r20
    d5a6:	86 81       	ldd	r24, Z+6	; 0x06
    d5a8:	97 81       	ldd	r25, Z+7	; 0x07
    d5aa:	a0 e0       	ldi	r26, 0x00	; 0
    d5ac:	b0 e0       	ldi	r27, 0x00	; 0
    d5ae:	48 2b       	or	r20, r24
    d5b0:	59 2b       	or	r21, r25
    d5b2:	6a 2b       	or	r22, r26
    d5b4:	7b 2b       	or	r23, r27
    d5b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d5b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d5ba:	46 96       	adiw	r24, 0x16	; 22
    d5bc:	0e 94 db 48 	call	0x91b6	; 0x91b6 <st_dword>
				fs->wflag = 1;
    d5c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d5c2:	98 a9       	ldd	r25, Y+48	; 0x30
    d5c4:	21 e0       	ldi	r18, 0x01	; 1
    d5c6:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d5c8:	23 83       	std	Z+3, r18	; 0x03
    d5ca:	0e 94 90 4c 	call	0x9920	; 0x9920 <sync_fs>
    d5ce:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d5d0:	db cf       	rjmp	.-74     	; 0xd588 <f_utime+0x60>
    d5d2:	e2 96       	adiw	r28, 0x32	; 50
    d5d4:	e8 e0       	ldi	r30, 0x08	; 8
    d5d6:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000d5da <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d5da:	a2 e3       	ldi	r26, 0x32	; 50
    d5dc:	b0 e0       	ldi	r27, 0x00	; 0
    d5de:	e3 ef       	ldi	r30, 0xF3	; 243
    d5e0:	fa e6       	ldi	r31, 0x6A	; 106
    d5e2:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
    d5e6:	9a ab       	std	Y+50, r25	; 0x32
    d5e8:	89 ab       	std	Y+49, r24	; 0x31
    d5ea:	6b 01       	movw	r12, r22
    d5ec:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d5ee:	40 e0       	ldi	r20, 0x00	; 0
    d5f0:	be 01       	movw	r22, r28
    d5f2:	61 5d       	subi	r22, 0xD1	; 209
    d5f4:	7f 4f       	sbci	r23, 0xFF	; 255
    d5f6:	ce 01       	movw	r24, r28
    d5f8:	c1 96       	adiw	r24, 0x31	; 49
    d5fa:	0e 94 25 4e 	call	0x9c4a	; 0x9c4a <mount_volume>
    d5fe:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d600:	89 2b       	or	r24, r25
    d602:	09 f0       	breq	.+2      	; 0xd606 <f_getlabel+0x2c>
    d604:	81 c0       	rjmp	.+258    	; 0xd708 <f_getlabel+0x12e>
    d606:	c1 14       	cp	r12, r1
    d608:	d1 04       	cpc	r13, r1
    d60a:	09 f4       	brne	.+2      	; 0xd60e <f_getlabel+0x34>
    d60c:	53 c0       	rjmp	.+166    	; 0xd6b4 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d60e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d610:	98 a9       	ldd	r25, Y+48	; 0x30
    d612:	9a 83       	std	Y+2, r25	; 0x02
    d614:	89 83       	std	Y+1, r24	; 0x01
    d616:	1f 82       	std	Y+7, r1	; 0x07
    d618:	18 86       	std	Y+8, r1	; 0x08
    d61a:	19 86       	std	Y+9, r1	; 0x09
    d61c:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d61e:	40 e0       	ldi	r20, 0x00	; 0
    d620:	50 e0       	ldi	r21, 0x00	; 0
    d622:	ba 01       	movw	r22, r20
    d624:	ce 01       	movw	r24, r28
    d626:	01 96       	adiw	r24, 0x01	; 1
    d628:	0e 94 3a 52 	call	0xa474	; 0xa474 <dir_sdi>
		if (res == FR_OK) {
    d62c:	00 97       	sbiw	r24, 0x00	; 0
    d62e:	e9 f5       	brne	.+122    	; 0xd6aa <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d630:	61 e0       	ldi	r22, 0x01	; 1
    d632:	70 e0       	ldi	r23, 0x00	; 0
    d634:	ce 01       	movw	r24, r28
    d636:	01 96       	adiw	r24, 0x01	; 1
    d638:	0e 94 d4 55 	call	0xaba8	; 0xaba8 <dir_read>
		 	if (res == FR_OK) {
    d63c:	00 97       	sbiw	r24, 0x00	; 0
    d63e:	a9 f5       	brne	.+106    	; 0xd6aa <f_getlabel+0xd0>
    d640:	00 e0       	ldi	r16, 0x00	; 0
    d642:	10 e0       	ldi	r17, 0x00	; 0
    d644:	80 e0       	ldi	r24, 0x00	; 0
    d646:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d648:	4c 01       	movw	r8, r24
    d64a:	2f ef       	ldi	r18, 0xFF	; 255
    d64c:	82 1a       	sub	r8, r18
    d64e:	92 0a       	sbc	r9, r18
    d650:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d652:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d654:	f9 01       	movw	r30, r18
    d656:	e8 0f       	add	r30, r24
    d658:	f9 1f       	adc	r31, r25
    d65a:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d65c:	65 eb       	ldi	r22, 0xB5	; 181
    d65e:	71 e0       	ldi	r23, 0x01	; 1
    d660:	90 e0       	ldi	r25, 0x00	; 0
    d662:	90 d0       	rcall	.+288    	; 0xd784 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d664:	00 97       	sbiw	r24, 0x00	; 0
    d666:	19 f4       	brne	.+6      	; 0xd66e <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d668:	00 e0       	ldi	r16, 0x00	; 0
    d66a:	10 e0       	ldi	r17, 0x00	; 0
    d66c:	13 c0       	rjmp	.+38     	; 0xd694 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d66e:	bc 01       	movw	r22, r24
    d670:	80 e0       	ldi	r24, 0x00	; 0
    d672:	90 e0       	ldi	r25, 0x00	; 0
    d674:	24 e0       	ldi	r18, 0x04	; 4
    d676:	30 e0       	ldi	r19, 0x00	; 0
    d678:	a6 01       	movw	r20, r12
    d67a:	40 0f       	add	r20, r16
    d67c:	51 1f       	adc	r21, r17
    d67e:	0e 94 55 4a 	call	0x94aa	; 0x94aa <put_utf>
    d682:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d684:	00 97       	sbiw	r24, 0x00	; 0
    d686:	81 f3       	breq	.-32     	; 0xd668 <f_getlabel+0x8e>
						di += wc;
    d688:	08 0f       	add	r16, r24
    d68a:	19 1f       	adc	r17, r25
    d68c:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d68e:	8b 30       	cpi	r24, 0x0B	; 11
    d690:	91 05       	cpc	r25, r1
    d692:	d1 f6       	brne	.-76     	; 0xd648 <f_getlabel+0x6e>
    d694:	f6 01       	movw	r30, r12
    d696:	e0 0f       	add	r30, r16
    d698:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d69a:	10 82       	st	Z, r1
						if (di == 0) break;
    d69c:	ce 16       	cp	r12, r30
    d69e:	df 06       	cpc	r13, r31
    d6a0:	49 f0       	breq	.+18     	; 0xd6b4 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d6a2:	82 91       	ld	r24, -Z
    d6a4:	80 32       	cpi	r24, 0x20	; 32
    d6a6:	c9 f3       	breq	.-14     	; 0xd69a <f_getlabel+0xc0>
    d6a8:	05 c0       	rjmp	.+10     	; 0xd6b4 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d6aa:	84 30       	cpi	r24, 0x04	; 4
    d6ac:	91 05       	cpc	r25, r1
    d6ae:	59 f5       	brne	.+86     	; 0xd706 <f_getlabel+0x12c>
			label[0] = 0;
    d6b0:	f6 01       	movw	r30, r12
    d6b2:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d6b4:	a1 14       	cp	r10, r1
    d6b6:	b1 04       	cpc	r11, r1
    d6b8:	39 f1       	breq	.+78     	; 0xd708 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d6ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    d6bc:	98 a9       	ldd	r25, Y+48	; 0x30
    d6be:	fc 01       	movw	r30, r24
    d6c0:	41 a1       	ldd	r20, Z+33	; 0x21
    d6c2:	52 a1       	ldd	r21, Z+34	; 0x22
    d6c4:	63 a1       	ldd	r22, Z+35	; 0x23
    d6c6:	74 a1       	ldd	r23, Z+36	; 0x24
    d6c8:	0e 94 aa 4d 	call	0x9b54	; 0x9b54 <move_window>
    d6cc:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d6ce:	89 2b       	or	r24, r25
    d6d0:	d9 f4       	brne	.+54     	; 0xd708 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d6d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    d6d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    d6d6:	80 81       	ld	r24, Z
    d6d8:	83 30       	cpi	r24, 0x03	; 3
    d6da:	29 f0       	breq	.+10     	; 0xd6e6 <f_getlabel+0x10c>
    d6dc:	84 30       	cpi	r24, 0x04	; 4
    d6de:	31 f0       	breq	.+12     	; 0xd6ec <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d6e0:	87 e2       	ldi	r24, 0x27	; 39
    d6e2:	90 e0       	ldi	r25, 0x00	; 0
    d6e4:	05 c0       	rjmp	.+10     	; 0xd6f0 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d6e6:	83 e4       	ldi	r24, 0x43	; 67
    d6e8:	90 e0       	ldi	r25, 0x00	; 0
    d6ea:	02 c0       	rjmp	.+4      	; 0xd6f0 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d6ec:	84 e6       	ldi	r24, 0x64	; 100
    d6ee:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d6f0:	f5 96       	adiw	r30, 0x35	; 53
    d6f2:	8e 0f       	add	r24, r30
    d6f4:	9f 1f       	adc	r25, r31
    d6f6:	0e 94 c6 48 	call	0x918c	; 0x918c <ld_dword>
    d6fa:	f5 01       	movw	r30, r10
    d6fc:	60 83       	st	Z, r22
    d6fe:	71 83       	std	Z+1, r23	; 0x01
    d700:	82 83       	std	Z+2, r24	; 0x02
    d702:	93 83       	std	Z+3, r25	; 0x03
    d704:	01 c0       	rjmp	.+2      	; 0xd708 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d706:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d708:	c7 01       	movw	r24, r14
    d70a:	e2 96       	adiw	r28, 0x32	; 50
    d70c:	ec e0       	ldi	r30, 0x0C	; 12
    d70e:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

0000d712 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d712:	0c 94 89 2a 	jmp	0x5512	; 0x5512 <safemalloc>
}
    d716:	08 95       	ret

0000d718 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d718:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <safefree>
    d71c:	08 95       	ret

0000d71e <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d71e:	cf 92       	push	r12
    d720:	df 92       	push	r13
    d722:	ef 92       	push	r14
    d724:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d726:	60 38       	cpi	r22, 0x80	; 128
    d728:	71 05       	cpc	r23, r1
    d72a:	81 05       	cpc	r24, r1
    d72c:	91 05       	cpc	r25, r1
    d72e:	10 f4       	brcc	.+4      	; 0xd734 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d730:	cb 01       	movw	r24, r22
    d732:	23 c0       	rjmp	.+70     	; 0xd77a <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d734:	61 15       	cp	r22, r1
    d736:	71 05       	cpc	r23, r1
    d738:	21 e0       	ldi	r18, 0x01	; 1
    d73a:	82 07       	cpc	r24, r18
    d73c:	91 05       	cpc	r25, r1
    d73e:	d8 f4       	brcc	.+54     	; 0xd776 <ff_uni2oem+0x58>
    d740:	45 3b       	cpi	r20, 0xB5	; 181
    d742:	51 40       	sbci	r21, 0x01	; 1
    d744:	c1 f4       	brne	.+48     	; 0xd776 <ff_uni2oem+0x58>
    d746:	ea e0       	ldi	r30, 0x0A	; 10
    d748:	f6 e0       	ldi	r31, 0x06	; 6
    d74a:	20 e0       	ldi	r18, 0x00	; 0
    d74c:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d74e:	c1 90       	ld	r12, Z+
    d750:	d1 90       	ld	r13, Z+
    d752:	e1 2c       	mov	r14, r1
    d754:	f1 2c       	mov	r15, r1
    d756:	6c 15       	cp	r22, r12
    d758:	7d 05       	cpc	r23, r13
    d75a:	8e 05       	cpc	r24, r14
    d75c:	9f 05       	cpc	r25, r15
    d75e:	29 f0       	breq	.+10     	; 0xd76a <ff_uni2oem+0x4c>
    d760:	2f 5f       	subi	r18, 0xFF	; 255
    d762:	3f 4f       	sbci	r19, 0xFF	; 255
    d764:	20 38       	cpi	r18, 0x80	; 128
    d766:	31 05       	cpc	r19, r1
    d768:	91 f7       	brne	.-28     	; 0xd74e <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d76a:	b9 01       	movw	r22, r18
    d76c:	60 58       	subi	r22, 0x80	; 128
    d76e:	7f 4f       	sbci	r23, 0xFF	; 255
    d770:	cb 01       	movw	r24, r22
    d772:	99 27       	eor	r25, r25
    d774:	02 c0       	rjmp	.+4      	; 0xd77a <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d776:	80 e0       	ldi	r24, 0x00	; 0
    d778:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d77a:	ff 90       	pop	r15
    d77c:	ef 90       	pop	r14
    d77e:	df 90       	pop	r13
    d780:	cf 90       	pop	r12
    d782:	08 95       	ret

0000d784 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d784:	80 38       	cpi	r24, 0x80	; 128
    d786:	91 05       	cpc	r25, r1
    d788:	88 f0       	brcs	.+34     	; 0xd7ac <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d78a:	65 3b       	cpi	r22, 0xB5	; 181
    d78c:	71 40       	sbci	r23, 0x01	; 1
    d78e:	61 f4       	brne	.+24     	; 0xd7a8 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d790:	8f 3f       	cpi	r24, 0xFF	; 255
    d792:	91 05       	cpc	r25, r1
    d794:	09 f0       	breq	.+2      	; 0xd798 <ff_oem2uni+0x14>
    d796:	40 f4       	brcc	.+16     	; 0xd7a8 <ff_oem2uni+0x24>
    d798:	88 0f       	add	r24, r24
    d79a:	99 1f       	adc	r25, r25
    d79c:	fc 01       	movw	r30, r24
    d79e:	e6 5f       	subi	r30, 0xF6	; 246
    d7a0:	fa 4f       	sbci	r31, 0xFA	; 250
    d7a2:	80 81       	ld	r24, Z
    d7a4:	91 81       	ldd	r25, Z+1	; 0x01
    d7a6:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d7a8:	80 e0       	ldi	r24, 0x00	; 0
    d7aa:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d7ac:	08 95       	ret

0000d7ae <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d7ae:	61 15       	cp	r22, r1
    d7b0:	71 05       	cpc	r23, r1
    d7b2:	21 e0       	ldi	r18, 0x01	; 1
    d7b4:	82 07       	cpc	r24, r18
    d7b6:	91 05       	cpc	r25, r1
    d7b8:	08 f0       	brcs	.+2      	; 0xd7bc <ff_wtoupper+0xe>
    d7ba:	5a c0       	rjmp	.+180    	; 0xd870 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d7bc:	61 15       	cp	r22, r1
    d7be:	80 e1       	ldi	r24, 0x10	; 16
    d7c0:	78 07       	cpc	r23, r24
    d7c2:	18 f0       	brcs	.+6      	; 0xd7ca <ff_wtoupper+0x1c>
    d7c4:	ac e5       	ldi	r26, 0x5C	; 92
    d7c6:	b3 e0       	ldi	r27, 0x03	; 3
    d7c8:	02 c0       	rjmp	.+4      	; 0xd7ce <ff_wtoupper+0x20>
    d7ca:	a8 e1       	ldi	r26, 0x18	; 24
    d7cc:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d7ce:	2d 91       	ld	r18, X+
    d7d0:	3c 91       	ld	r19, X
    d7d2:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d7d4:	21 15       	cp	r18, r1
    d7d6:	31 05       	cpc	r19, r1
    d7d8:	09 f4       	brne	.+2      	; 0xd7dc <ff_wtoupper+0x2e>
    d7da:	48 c0       	rjmp	.+144    	; 0xd86c <ff_wtoupper+0xbe>
    d7dc:	62 17       	cp	r22, r18
    d7de:	73 07       	cpc	r23, r19
    d7e0:	08 f4       	brcc	.+2      	; 0xd7e4 <ff_wtoupper+0x36>
    d7e2:	44 c0       	rjmp	.+136    	; 0xd86c <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d7e4:	14 96       	adiw	r26, 0x04	; 4
    d7e6:	fd 01       	movw	r30, r26
    d7e8:	32 97       	sbiw	r30, 0x02	; 2
    d7ea:	80 81       	ld	r24, Z
    d7ec:	91 81       	ldd	r25, Z+1	; 0x01
    d7ee:	e9 2f       	mov	r30, r25
    d7f0:	ff 27       	eor	r31, r31
    d7f2:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d7f4:	a9 01       	movw	r20, r18
    d7f6:	48 0f       	add	r20, r24
    d7f8:	59 1f       	adc	r21, r25
    d7fa:	64 17       	cp	r22, r20
    d7fc:	75 07       	cpc	r23, r21
    d7fe:	70 f5       	brcc	.+92     	; 0xd85c <ff_wtoupper+0xae>
				switch (cmd) {
    d800:	e9 30       	cpi	r30, 0x09	; 9
    d802:	f1 05       	cpc	r31, r1
    d804:	98 f5       	brcc	.+102    	; 0xd86c <ff_wtoupper+0xbe>
    d806:	ec 54       	subi	r30, 0x4C	; 76
    d808:	ff 4f       	sbci	r31, 0xFF	; 255
    d80a:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d80e:	62 1b       	sub	r22, r18
    d810:	73 0b       	sbc	r23, r19
    d812:	fb 01       	movw	r30, r22
    d814:	ee 0f       	add	r30, r30
    d816:	ff 1f       	adc	r31, r31
    d818:	ea 0f       	add	r30, r26
    d81a:	fb 1f       	adc	r31, r27
    d81c:	60 81       	ld	r22, Z
    d81e:	71 81       	ldd	r23, Z+1	; 0x01
    d820:	25 c0       	rjmp	.+74     	; 0xd86c <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d822:	cb 01       	movw	r24, r22
    d824:	82 1b       	sub	r24, r18
    d826:	93 0b       	sbc	r25, r19
    d828:	81 70       	andi	r24, 0x01	; 1
    d82a:	99 27       	eor	r25, r25
    d82c:	68 1b       	sub	r22, r24
    d82e:	79 0b       	sbc	r23, r25
    d830:	1d c0       	rjmp	.+58     	; 0xd86c <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d832:	60 51       	subi	r22, 0x10	; 16
    d834:	71 09       	sbc	r23, r1
    d836:	1a c0       	rjmp	.+52     	; 0xd86c <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d838:	60 52       	subi	r22, 0x20	; 32
    d83a:	71 09       	sbc	r23, r1
    d83c:	17 c0       	rjmp	.+46     	; 0xd86c <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d83e:	60 53       	subi	r22, 0x30	; 48
    d840:	71 09       	sbc	r23, r1
    d842:	14 c0       	rjmp	.+40     	; 0xd86c <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d844:	6a 51       	subi	r22, 0x1A	; 26
    d846:	71 09       	sbc	r23, r1
    d848:	11 c0       	rjmp	.+34     	; 0xd86c <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d84a:	68 5f       	subi	r22, 0xF8	; 248
    d84c:	7f 4f       	sbci	r23, 0xFF	; 255
    d84e:	0e c0       	rjmp	.+28     	; 0xd86c <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d850:	60 55       	subi	r22, 0x50	; 80
    d852:	71 09       	sbc	r23, r1
    d854:	0b c0       	rjmp	.+22     	; 0xd86c <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d856:	60 56       	subi	r22, 0x60	; 96
    d858:	7c 41       	sbci	r23, 0x1C	; 28
    d85a:	08 c0       	rjmp	.+16     	; 0xd86c <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d85c:	ef 2b       	or	r30, r31
    d85e:	09 f0       	breq	.+2      	; 0xd862 <ff_wtoupper+0xb4>
    d860:	b6 cf       	rjmp	.-148    	; 0xd7ce <ff_wtoupper+0x20>
    d862:	88 0f       	add	r24, r24
    d864:	99 1f       	adc	r25, r25
    d866:	a8 0f       	add	r26, r24
    d868:	b9 1f       	adc	r27, r25
    d86a:	b1 cf       	rjmp	.-158    	; 0xd7ce <ff_wtoupper+0x20>
		}
		uni = uc;
    d86c:	80 e0       	ldi	r24, 0x00	; 0
    d86e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d870:	08 95       	ret

0000d872 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d872:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d874:	02 c0       	rjmp	.+4      	; 0xd87a <disk_status+0x8>
    d876:	9b c1       	rjmp	.+822    	; 0xdbae <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d878:	08 95       	ret
}
    d87a:	81 e0       	ldi	r24, 0x01	; 1
    d87c:	08 95       	ret

0000d87e <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d87e:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d880:	02 c0       	rjmp	.+4      	; 0xd886 <disk_initialize+0x8>
    d882:	f8 c0       	rjmp	.+496    	; 0xda74 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d884:	08 95       	ret
}
    d886:	81 e0       	ldi	r24, 0x01	; 1
    d888:	08 95       	ret

0000d88a <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d88a:	0f 93       	push	r16
    d88c:	1f 93       	push	r17
    d88e:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d890:	81 11       	cpse	r24, r1
    d892:	06 c0       	rjmp	.+12     	; 0xd8a0 <disk_read+0x16>
    d894:	ba 01       	movw	r22, r20
    d896:	a9 01       	movw	r20, r18
    d898:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d89a:	98 01       	movw	r18, r16
    d89c:	8b d1       	rcall	.+790    	; 0xdbb4 <mmc_disk_read>
    d89e:	02 c0       	rjmp	.+4      	; 0xd8a4 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d8a0:	84 e0       	ldi	r24, 0x04	; 4
    d8a2:	90 e0       	ldi	r25, 0x00	; 0
}
    d8a4:	1f 91       	pop	r17
    d8a6:	0f 91       	pop	r16
    d8a8:	08 95       	ret

0000d8aa <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d8aa:	0f 93       	push	r16
    d8ac:	1f 93       	push	r17
    d8ae:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d8b0:	81 11       	cpse	r24, r1
    d8b2:	06 c0       	rjmp	.+12     	; 0xd8c0 <disk_write+0x16>
    d8b4:	ba 01       	movw	r22, r20
    d8b6:	a9 01       	movw	r20, r18
    d8b8:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d8ba:	98 01       	movw	r18, r16
    d8bc:	c1 d1       	rcall	.+898    	; 0xdc40 <mmc_disk_write>
    d8be:	02 c0       	rjmp	.+4      	; 0xd8c4 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d8c0:	84 e0       	ldi	r24, 0x04	; 4
    d8c2:	90 e0       	ldi	r25, 0x00	; 0
}
    d8c4:	1f 91       	pop	r17
    d8c6:	0f 91       	pop	r16
    d8c8:	08 95       	ret

0000d8ca <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d8ca:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d8cc:	81 11       	cpse	r24, r1
    d8ce:	04 c0       	rjmp	.+8      	; 0xd8d8 <disk_ioctl+0xe>
    d8d0:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d8d2:	89 2f       	mov	r24, r25
    d8d4:	1a c2       	rjmp	.+1076   	; 0xdd0a <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d8d6:	08 95       	ret
    d8d8:	84 e0       	ldi	r24, 0x04	; 4
}
    d8da:	90 e0       	ldi	r25, 0x00	; 0
    d8dc:	08 95       	ret

0000d8de <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d8de:	cd c4       	rjmp	.+2458   	; 0xe27a <mmc_spi_TXRX>
    d8e0:	08 95       	ret

0000d8e2 <deselect>:
    d8e2:	a2 d4       	rcall	.+2372   	; 0xe228 <mmc_spi_end>
    d8e4:	8f ef       	ldi	r24, 0xFF	; 255
    d8e6:	fb df       	rcall	.-10     	; 0xd8de <xchg_spi>
    d8e8:	8f ef       	ldi	r24, 0xFF	; 255
    d8ea:	f9 cf       	rjmp	.-14     	; 0xd8de <xchg_spi>
    d8ec:	08 95       	ret

0000d8ee <rcvr_datablock>:
    d8ee:	0f 93       	push	r16
    d8f0:	1f 93       	push	r17
    d8f2:	cf 93       	push	r28
    d8f4:	df 93       	push	r29
    d8f6:	ec 01       	movw	r28, r24
    d8f8:	8b 01       	movw	r16, r22
    d8fa:	46 9a       	sbi	0x08, 6	; 8
    d8fc:	3e 9a       	sbi	0x07, 6	; 7
    d8fe:	88 ee       	ldi	r24, 0xE8	; 232
    d900:	93 e0       	ldi	r25, 0x03	; 3
    d902:	be d4       	rcall	.+2428   	; 0xe280 <mmc_set_ms_timeout>
    d904:	8f ef       	ldi	r24, 0xFF	; 255
    d906:	b9 d4       	rcall	.+2418   	; 0xe27a <mmc_spi_TXRX>
    d908:	8f 3f       	cpi	r24, 0xFF	; 255
    d90a:	31 f4       	brne	.+12     	; 0xd918 <rcvr_datablock+0x2a>
    d90c:	c0 d4       	rcall	.+2432   	; 0xe28e <mmc_test_timeout>
    d90e:	89 2b       	or	r24, r25
    d910:	c9 f3       	breq	.-14     	; 0xd904 <rcvr_datablock+0x16>
    d912:	80 e0       	ldi	r24, 0x00	; 0
    d914:	90 e0       	ldi	r25, 0x00	; 0
    d916:	0d c0       	rjmp	.+26     	; 0xd932 <rcvr_datablock+0x44>
    d918:	8e 3f       	cpi	r24, 0xFE	; 254
    d91a:	d9 f7       	brne	.-10     	; 0xd912 <rcvr_datablock+0x24>
    d91c:	b8 01       	movw	r22, r16
    d91e:	ce 01       	movw	r24, r28
    d920:	a9 d4       	rcall	.+2386   	; 0xe274 <mmc_spi_RX_buffer>
    d922:	8f ef       	ldi	r24, 0xFF	; 255
    d924:	dc df       	rcall	.-72     	; 0xd8de <xchg_spi>
    d926:	8f ef       	ldi	r24, 0xFF	; 255
    d928:	da df       	rcall	.-76     	; 0xd8de <xchg_spi>
    d92a:	46 98       	cbi	0x08, 6	; 8
    d92c:	3e 9a       	sbi	0x07, 6	; 7
    d92e:	81 e0       	ldi	r24, 0x01	; 1
    d930:	90 e0       	ldi	r25, 0x00	; 0
    d932:	df 91       	pop	r29
    d934:	cf 91       	pop	r28
    d936:	1f 91       	pop	r17
    d938:	0f 91       	pop	r16
    d93a:	08 95       	ret

0000d93c <wait_ready>:
    d93c:	cf 93       	push	r28
    d93e:	a0 d4       	rcall	.+2368   	; 0xe280 <mmc_set_ms_timeout>
    d940:	8f ef       	ldi	r24, 0xFF	; 255
    d942:	9b d4       	rcall	.+2358   	; 0xe27a <mmc_spi_TXRX>
    d944:	c8 2f       	mov	r28, r24
    d946:	8f 3f       	cpi	r24, 0xFF	; 255
    d948:	19 f0       	breq	.+6      	; 0xd950 <wait_ready+0x14>
    d94a:	a1 d4       	rcall	.+2370   	; 0xe28e <mmc_test_timeout>
    d94c:	89 2b       	or	r24, r25
    d94e:	c1 f3       	breq	.-16     	; 0xd940 <wait_ready+0x4>
    d950:	81 e0       	ldi	r24, 0x01	; 1
    d952:	90 e0       	ldi	r25, 0x00	; 0
    d954:	cf 3f       	cpi	r28, 0xFF	; 255
    d956:	11 f0       	breq	.+4      	; 0xd95c <wait_ready+0x20>
    d958:	80 e0       	ldi	r24, 0x00	; 0
    d95a:	90 e0       	ldi	r25, 0x00	; 0
    d95c:	cf 91       	pop	r28
    d95e:	08 95       	ret

0000d960 <select>:
    d960:	cf 93       	push	r28
    d962:	df 93       	push	r29
    d964:	54 d4       	rcall	.+2216   	; 0xe20e <mmc_spi_begin>
    d966:	8f ef       	ldi	r24, 0xFF	; 255
    d968:	ba df       	rcall	.-140    	; 0xd8de <xchg_spi>
    d96a:	88 ee       	ldi	r24, 0xE8	; 232
    d96c:	93 e0       	ldi	r25, 0x03	; 3
    d96e:	e6 df       	rcall	.-52     	; 0xd93c <wait_ready>
    d970:	ec 01       	movw	r28, r24
    d972:	89 2b       	or	r24, r25
    d974:	61 f4       	brne	.+24     	; 0xd98e <select+0x2e>
    d976:	8c eb       	ldi	r24, 0xBC	; 188
    d978:	97 e0       	ldi	r25, 0x07	; 7
    d97a:	1f 92       	push	r1
    d97c:	9f 93       	push	r25
    d97e:	8f 93       	push	r24
    d980:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    d984:	ae df       	rcall	.-164    	; 0xd8e2 <deselect>
    d986:	0f 90       	pop	r0
    d988:	0f 90       	pop	r0
    d98a:	0f 90       	pop	r0
    d98c:	02 c0       	rjmp	.+4      	; 0xd992 <select+0x32>
    d98e:	c1 e0       	ldi	r28, 0x01	; 1
    d990:	d0 e0       	ldi	r29, 0x00	; 0
    d992:	ce 01       	movw	r24, r28
    d994:	df 91       	pop	r29
    d996:	cf 91       	pop	r28
    d998:	08 95       	ret

0000d99a <send_cmd>:
    d99a:	ff 92       	push	r15
    d99c:	0f 93       	push	r16
    d99e:	1f 93       	push	r17
    d9a0:	cf 93       	push	r28
    d9a2:	df 93       	push	r29
    d9a4:	c8 2f       	mov	r28, r24
    d9a6:	d4 2f       	mov	r29, r20
    d9a8:	15 2f       	mov	r17, r21
    d9aa:	06 2f       	mov	r16, r22
    d9ac:	f7 2e       	mov	r15, r23
    d9ae:	87 ff       	sbrs	r24, 7
    d9b0:	08 c0       	rjmp	.+16     	; 0xd9c2 <send_cmd+0x28>
    d9b2:	40 e0       	ldi	r20, 0x00	; 0
    d9b4:	50 e0       	ldi	r21, 0x00	; 0
    d9b6:	ba 01       	movw	r22, r20
    d9b8:	87 e3       	ldi	r24, 0x37	; 55
    d9ba:	ef df       	rcall	.-34     	; 0xd99a <send_cmd>
    d9bc:	82 30       	cpi	r24, 0x02	; 2
    d9be:	58 f5       	brcc	.+86     	; 0xda16 <send_cmd+0x7c>
    d9c0:	cf 77       	andi	r28, 0x7F	; 127
    d9c2:	cc 30       	cpi	r28, 0x0C	; 12
    d9c4:	71 f4       	brne	.+28     	; 0xd9e2 <send_cmd+0x48>
    d9c6:	8c 2f       	mov	r24, r28
    d9c8:	80 64       	ori	r24, 0x40	; 64
    d9ca:	89 df       	rcall	.-238    	; 0xd8de <xchg_spi>
    d9cc:	8f 2d       	mov	r24, r15
    d9ce:	87 df       	rcall	.-242    	; 0xd8de <xchg_spi>
    d9d0:	80 2f       	mov	r24, r16
    d9d2:	85 df       	rcall	.-246    	; 0xd8de <xchg_spi>
    d9d4:	81 2f       	mov	r24, r17
    d9d6:	83 df       	rcall	.-250    	; 0xd8de <xchg_spi>
    d9d8:	8d 2f       	mov	r24, r29
    d9da:	81 df       	rcall	.-254    	; 0xd8de <xchg_spi>
    d9dc:	cc 23       	and	r28, r28
    d9de:	c9 f0       	breq	.+50     	; 0xda12 <send_cmd+0x78>
    d9e0:	06 c0       	rjmp	.+12     	; 0xd9ee <send_cmd+0x54>
    d9e2:	7f df       	rcall	.-258    	; 0xd8e2 <deselect>
    d9e4:	bd df       	rcall	.-134    	; 0xd960 <select>
    d9e6:	89 2b       	or	r24, r25
    d9e8:	71 f7       	brne	.-36     	; 0xd9c6 <send_cmd+0x2c>
    d9ea:	8f ef       	ldi	r24, 0xFF	; 255
    d9ec:	14 c0       	rjmp	.+40     	; 0xda16 <send_cmd+0x7c>
    d9ee:	c8 30       	cpi	r28, 0x08	; 8
    d9f0:	11 f4       	brne	.+4      	; 0xd9f6 <send_cmd+0x5c>
    d9f2:	87 e8       	ldi	r24, 0x87	; 135
    d9f4:	01 c0       	rjmp	.+2      	; 0xd9f8 <send_cmd+0x5e>
    d9f6:	81 e0       	ldi	r24, 0x01	; 1
    d9f8:	72 df       	rcall	.-284    	; 0xd8de <xchg_spi>
    d9fa:	cc 30       	cpi	r28, 0x0C	; 12
    d9fc:	11 f4       	brne	.+4      	; 0xda02 <send_cmd+0x68>
    d9fe:	8f ef       	ldi	r24, 0xFF	; 255
    da00:	6e df       	rcall	.-292    	; 0xd8de <xchg_spi>
    da02:	ca e0       	ldi	r28, 0x0A	; 10
    da04:	8f ef       	ldi	r24, 0xFF	; 255
    da06:	39 d4       	rcall	.+2162   	; 0xe27a <mmc_spi_TXRX>
    da08:	87 ff       	sbrs	r24, 7
    da0a:	05 c0       	rjmp	.+10     	; 0xda16 <send_cmd+0x7c>
    da0c:	c1 50       	subi	r28, 0x01	; 1
    da0e:	d1 f7       	brne	.-12     	; 0xda04 <send_cmd+0x6a>
    da10:	02 c0       	rjmp	.+4      	; 0xda16 <send_cmd+0x7c>
    da12:	85 e9       	ldi	r24, 0x95	; 149
    da14:	f5 cf       	rjmp	.-22     	; 0xda00 <send_cmd+0x66>
    da16:	cd b7       	in	r28, 0x3d	; 61
    da18:	de b7       	in	r29, 0x3e	; 62
    da1a:	e5 e0       	ldi	r30, 0x05	; 5
    da1c:	0c 94 52 e4 	jmp	0x1c8a4	; 0x1c8a4 <__epilogue_restores__+0x1a>

0000da20 <xmit_datablock>:
    da20:	0f 93       	push	r16
    da22:	1f 93       	push	r17
    da24:	cf 93       	push	r28
    da26:	8c 01       	movw	r16, r24
    da28:	c6 2f       	mov	r28, r22
    da2a:	2c 9a       	sbi	0x05, 4	; 5
    da2c:	24 9a       	sbi	0x04, 4	; 4
    da2e:	88 ee       	ldi	r24, 0xE8	; 232
    da30:	93 e0       	ldi	r25, 0x03	; 3
    da32:	84 df       	rcall	.-248    	; 0xd93c <wait_ready>
    da34:	89 2b       	or	r24, r25
    da36:	19 f4       	brne	.+6      	; 0xda3e <xmit_datablock+0x1e>
    da38:	80 e0       	ldi	r24, 0x00	; 0
    da3a:	90 e0       	ldi	r25, 0x00	; 0
    da3c:	17 c0       	rjmp	.+46     	; 0xda6c <xmit_datablock+0x4c>
    da3e:	8c 2f       	mov	r24, r28
    da40:	4e df       	rcall	.-356    	; 0xd8de <xchg_spi>
    da42:	cd 3f       	cpi	r28, 0xFD	; 253
    da44:	29 f4       	brne	.+10     	; 0xda50 <xmit_datablock+0x30>
    da46:	46 98       	cbi	0x08, 6	; 8
    da48:	3e 9a       	sbi	0x07, 6	; 7
    da4a:	81 e0       	ldi	r24, 0x01	; 1
    da4c:	90 e0       	ldi	r25, 0x00	; 0
    da4e:	0e c0       	rjmp	.+28     	; 0xda6c <xmit_datablock+0x4c>
    da50:	60 e0       	ldi	r22, 0x00	; 0
    da52:	72 e0       	ldi	r23, 0x02	; 2
    da54:	c8 01       	movw	r24, r16
    da56:	0b d4       	rcall	.+2070   	; 0xe26e <mmc_spi_TX_buffer>
    da58:	8f ef       	ldi	r24, 0xFF	; 255
    da5a:	41 df       	rcall	.-382    	; 0xd8de <xchg_spi>
    da5c:	8f ef       	ldi	r24, 0xFF	; 255
    da5e:	3f df       	rcall	.-386    	; 0xd8de <xchg_spi>
    da60:	8f ef       	ldi	r24, 0xFF	; 255
    da62:	0b d4       	rcall	.+2070   	; 0xe27a <mmc_spi_TXRX>
    da64:	8f 71       	andi	r24, 0x1F	; 31
    da66:	85 30       	cpi	r24, 0x05	; 5
    da68:	39 f7       	brne	.-50     	; 0xda38 <xmit_datablock+0x18>
    da6a:	ed cf       	rjmp	.-38     	; 0xda46 <xmit_datablock+0x26>
    da6c:	cf 91       	pop	r28
    da6e:	1f 91       	pop	r17
    da70:	0f 91       	pop	r16
    da72:	08 95       	ret

0000da74 <mmc_disk_initialize>:
    da74:	a4 e0       	ldi	r26, 0x04	; 4
    da76:	b0 e0       	ldi	r27, 0x00	; 0
    da78:	e0 e4       	ldi	r30, 0x40	; 64
    da7a:	fd e6       	ldi	r31, 0x6D	; 109
    da7c:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    da80:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da84:	81 fd       	sbrc	r24, 1
    da86:	8d c0       	rjmp	.+282    	; 0xdba2 <mmc_disk_initialize+0x12e>
    da88:	d3 d3       	rcall	.+1958   	; 0xe230 <mmc_slow>
    da8a:	1a e0       	ldi	r17, 0x0A	; 10
    da8c:	8f ef       	ldi	r24, 0xFF	; 255
    da8e:	27 df       	rcall	.-434    	; 0xd8de <xchg_spi>
    da90:	11 50       	subi	r17, 0x01	; 1
    da92:	e1 f7       	brne	.-8      	; 0xda8c <mmc_disk_initialize+0x18>
    da94:	40 e0       	ldi	r20, 0x00	; 0
    da96:	50 e0       	ldi	r21, 0x00	; 0
    da98:	ba 01       	movw	r22, r20
    da9a:	80 e0       	ldi	r24, 0x00	; 0
    da9c:	7e df       	rcall	.-260    	; 0xd99a <send_cmd>
    da9e:	81 30       	cpi	r24, 0x01	; 1
    daa0:	09 f0       	breq	.+2      	; 0xdaa4 <mmc_disk_initialize+0x30>
    daa2:	6f c0       	rjmp	.+222    	; 0xdb82 <mmc_disk_initialize+0x10e>
    daa4:	80 ed       	ldi	r24, 0xD0	; 208
    daa6:	97 e0       	ldi	r25, 0x07	; 7
    daa8:	eb d3       	rcall	.+2006   	; 0xe280 <mmc_set_ms_timeout>
    daaa:	4a ea       	ldi	r20, 0xAA	; 170
    daac:	51 e0       	ldi	r21, 0x01	; 1
    daae:	60 e0       	ldi	r22, 0x00	; 0
    dab0:	70 e0       	ldi	r23, 0x00	; 0
    dab2:	88 e0       	ldi	r24, 0x08	; 8
    dab4:	72 df       	rcall	.-284    	; 0xd99a <send_cmd>
    dab6:	81 30       	cpi	r24, 0x01	; 1
    dab8:	09 f0       	breq	.+2      	; 0xdabc <mmc_disk_initialize+0x48>
    daba:	3d c0       	rjmp	.+122    	; 0xdb36 <mmc_disk_initialize+0xc2>
    dabc:	8e 01       	movw	r16, r28
    dabe:	0f 5f       	subi	r16, 0xFF	; 255
    dac0:	1f 4f       	sbci	r17, 0xFF	; 255
    dac2:	6e 01       	movw	r12, r28
    dac4:	85 e0       	ldi	r24, 0x05	; 5
    dac6:	c8 0e       	add	r12, r24
    dac8:	d1 1c       	adc	r13, r1
    daca:	78 01       	movw	r14, r16
    dacc:	8f ef       	ldi	r24, 0xFF	; 255
    dace:	d5 d3       	rcall	.+1962   	; 0xe27a <mmc_spi_TXRX>
    dad0:	f7 01       	movw	r30, r14
    dad2:	81 93       	st	Z+, r24
    dad4:	7f 01       	movw	r14, r30
    dad6:	ce 16       	cp	r12, r30
    dad8:	df 06       	cpc	r13, r31
    dada:	c1 f7       	brne	.-16     	; 0xdacc <mmc_disk_initialize+0x58>
    dadc:	8b 81       	ldd	r24, Y+3	; 0x03
    dade:	81 30       	cpi	r24, 0x01	; 1
    dae0:	09 f0       	breq	.+2      	; 0xdae4 <mmc_disk_initialize+0x70>
    dae2:	4f c0       	rjmp	.+158    	; 0xdb82 <mmc_disk_initialize+0x10e>
    dae4:	8c 81       	ldd	r24, Y+4	; 0x04
    dae6:	8a 3a       	cpi	r24, 0xAA	; 170
    dae8:	09 f0       	breq	.+2      	; 0xdaec <mmc_disk_initialize+0x78>
    daea:	4b c0       	rjmp	.+150    	; 0xdb82 <mmc_disk_initialize+0x10e>
    daec:	d0 d3       	rcall	.+1952   	; 0xe28e <mmc_test_timeout>
    daee:	89 2b       	or	r24, r25
    daf0:	29 f0       	breq	.+10     	; 0xdafc <mmc_disk_initialize+0x88>
    daf2:	cd d3       	rcall	.+1946   	; 0xe28e <mmc_test_timeout>
    daf4:	89 2b       	or	r24, r25
    daf6:	09 f0       	breq	.+2      	; 0xdafa <mmc_disk_initialize+0x86>
    daf8:	44 c0       	rjmp	.+136    	; 0xdb82 <mmc_disk_initialize+0x10e>
    dafa:	09 c0       	rjmp	.+18     	; 0xdb0e <mmc_disk_initialize+0x9a>
    dafc:	40 e0       	ldi	r20, 0x00	; 0
    dafe:	50 e0       	ldi	r21, 0x00	; 0
    db00:	60 e0       	ldi	r22, 0x00	; 0
    db02:	70 e4       	ldi	r23, 0x40	; 64
    db04:	89 ea       	ldi	r24, 0xA9	; 169
    db06:	49 df       	rcall	.-366    	; 0xd99a <send_cmd>
    db08:	81 11       	cpse	r24, r1
    db0a:	f0 cf       	rjmp	.-32     	; 0xdaec <mmc_disk_initialize+0x78>
    db0c:	f2 cf       	rjmp	.-28     	; 0xdaf2 <mmc_disk_initialize+0x7e>
    db0e:	40 e0       	ldi	r20, 0x00	; 0
    db10:	50 e0       	ldi	r21, 0x00	; 0
    db12:	ba 01       	movw	r22, r20
    db14:	8a e3       	ldi	r24, 0x3A	; 58
    db16:	41 df       	rcall	.-382    	; 0xd99a <send_cmd>
    db18:	81 11       	cpse	r24, r1
    db1a:	33 c0       	rjmp	.+102    	; 0xdb82 <mmc_disk_initialize+0x10e>
    db1c:	8f ef       	ldi	r24, 0xFF	; 255
    db1e:	ad d3       	rcall	.+1882   	; 0xe27a <mmc_spi_TXRX>
    db20:	f8 01       	movw	r30, r16
    db22:	81 93       	st	Z+, r24
    db24:	8f 01       	movw	r16, r30
    db26:	ce 16       	cp	r12, r30
    db28:	df 06       	cpc	r13, r31
    db2a:	c1 f7       	brne	.-16     	; 0xdb1c <mmc_disk_initialize+0xa8>
    db2c:	89 81       	ldd	r24, Y+1	; 0x01
    db2e:	86 fd       	sbrc	r24, 6
    db30:	2a c0       	rjmp	.+84     	; 0xdb86 <mmc_disk_initialize+0x112>
    db32:	14 e0       	ldi	r17, 0x04	; 4
    db34:	29 c0       	rjmp	.+82     	; 0xdb88 <mmc_disk_initialize+0x114>
    db36:	80 ed       	ldi	r24, 0xD0	; 208
    db38:	97 e0       	ldi	r25, 0x07	; 7
    db3a:	a2 d3       	rcall	.+1860   	; 0xe280 <mmc_set_ms_timeout>
    db3c:	40 e0       	ldi	r20, 0x00	; 0
    db3e:	50 e0       	ldi	r21, 0x00	; 0
    db40:	ba 01       	movw	r22, r20
    db42:	89 ea       	ldi	r24, 0xA9	; 169
    db44:	2a df       	rcall	.-428    	; 0xd99a <send_cmd>
    db46:	82 30       	cpi	r24, 0x02	; 2
    db48:	18 f0       	brcs	.+6      	; 0xdb50 <mmc_disk_initialize+0xdc>
    db4a:	11 e0       	ldi	r17, 0x01	; 1
    db4c:	01 e0       	ldi	r16, 0x01	; 1
    db4e:	02 c0       	rjmp	.+4      	; 0xdb54 <mmc_disk_initialize+0xe0>
    db50:	12 e0       	ldi	r17, 0x02	; 2
    db52:	09 ea       	ldi	r16, 0xA9	; 169
    db54:	9c d3       	rcall	.+1848   	; 0xe28e <mmc_test_timeout>
    db56:	89 2b       	or	r24, r25
    db58:	21 f0       	breq	.+8      	; 0xdb62 <mmc_disk_initialize+0xee>
    db5a:	99 d3       	rcall	.+1842   	; 0xe28e <mmc_test_timeout>
    db5c:	89 2b       	or	r24, r25
    db5e:	89 f4       	brne	.+34     	; 0xdb82 <mmc_disk_initialize+0x10e>
    db60:	08 c0       	rjmp	.+16     	; 0xdb72 <mmc_disk_initialize+0xfe>
    db62:	40 e0       	ldi	r20, 0x00	; 0
    db64:	50 e0       	ldi	r21, 0x00	; 0
    db66:	ba 01       	movw	r22, r20
    db68:	80 2f       	mov	r24, r16
    db6a:	17 df       	rcall	.-466    	; 0xd99a <send_cmd>
    db6c:	81 11       	cpse	r24, r1
    db6e:	f2 cf       	rjmp	.-28     	; 0xdb54 <mmc_disk_initialize+0xe0>
    db70:	f4 cf       	rjmp	.-24     	; 0xdb5a <mmc_disk_initialize+0xe6>
    db72:	40 e0       	ldi	r20, 0x00	; 0
    db74:	52 e0       	ldi	r21, 0x02	; 2
    db76:	60 e0       	ldi	r22, 0x00	; 0
    db78:	70 e0       	ldi	r23, 0x00	; 0
    db7a:	80 e1       	ldi	r24, 0x10	; 16
    db7c:	0e df       	rcall	.-484    	; 0xd99a <send_cmd>
    db7e:	88 23       	and	r24, r24
    db80:	19 f0       	breq	.+6      	; 0xdb88 <mmc_disk_initialize+0x114>
    db82:	10 e0       	ldi	r17, 0x00	; 0
    db84:	01 c0       	rjmp	.+2      	; 0xdb88 <mmc_disk_initialize+0x114>
    db86:	1c e0       	ldi	r17, 0x0C	; 12
    db88:	10 93 37 18 	sts	0x1837, r17	; 0x801837 <CardType>
    db8c:	aa de       	rcall	.-684    	; 0xd8e2 <deselect>
    db8e:	11 23       	and	r17, r17
    db90:	39 f0       	breq	.+14     	; 0xdba0 <mmc_disk_initialize+0x12c>
    db92:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    db96:	8e 7f       	andi	r24, 0xFE	; 254
    db98:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    db9c:	5b d3       	rcall	.+1718   	; 0xe254 <mmc_fast>
    db9e:	01 c0       	rjmp	.+2      	; 0xdba2 <mmc_disk_initialize+0x12e>
    dba0:	33 d4       	rcall	.+2150   	; 0xe408 <mmc_power_off>
    dba2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dba6:	24 96       	adiw	r28, 0x04	; 4
    dba8:	e8 e0       	ldi	r30, 0x08	; 8
    dbaa:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000dbae <mmc_disk_status>:
    dbae:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dbb2:	08 95       	ret

0000dbb4 <mmc_disk_read>:
    dbb4:	ef 92       	push	r14
    dbb6:	ff 92       	push	r15
    dbb8:	1f 93       	push	r17
    dbba:	cf 93       	push	r28
    dbbc:	df 93       	push	r29
    dbbe:	7c 01       	movw	r14, r24
    dbc0:	e9 01       	movw	r28, r18
    dbc2:	20 97       	sbiw	r28, 0x00	; 0
    dbc4:	19 f4       	brne	.+6      	; 0xdbcc <mmc_disk_read+0x18>
    dbc6:	8d de       	rcall	.-742    	; 0xd8e2 <deselect>
    dbc8:	84 e0       	ldi	r24, 0x04	; 4
    dbca:	06 c0       	rjmp	.+12     	; 0xdbd8 <mmc_disk_read+0x24>
    dbcc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dbd0:	80 ff       	sbrs	r24, 0
    dbd2:	04 c0       	rjmp	.+8      	; 0xdbdc <mmc_disk_read+0x28>
    dbd4:	86 de       	rcall	.-756    	; 0xd8e2 <deselect>
    dbd6:	83 e0       	ldi	r24, 0x03	; 3
    dbd8:	90 e0       	ldi	r25, 0x00	; 0
    dbda:	2c c0       	rjmp	.+88     	; 0xdc34 <mmc_disk_read+0x80>
    dbdc:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <CardType>
    dbe0:	83 fd       	sbrc	r24, 3
    dbe2:	07 c0       	rjmp	.+14     	; 0xdbf2 <mmc_disk_read+0x3e>
    dbe4:	89 e0       	ldi	r24, 0x09	; 9
    dbe6:	44 0f       	add	r20, r20
    dbe8:	55 1f       	adc	r21, r21
    dbea:	66 1f       	adc	r22, r22
    dbec:	77 1f       	adc	r23, r23
    dbee:	8a 95       	dec	r24
    dbf0:	d1 f7       	brne	.-12     	; 0xdbe6 <mmc_disk_read+0x32>
    dbf2:	c2 30       	cpi	r28, 0x02	; 2
    dbf4:	d1 05       	cpc	r29, r1
    dbf6:	10 f4       	brcc	.+4      	; 0xdbfc <mmc_disk_read+0x48>
    dbf8:	11 e1       	ldi	r17, 0x11	; 17
    dbfa:	01 c0       	rjmp	.+2      	; 0xdbfe <mmc_disk_read+0x4a>
    dbfc:	12 e1       	ldi	r17, 0x12	; 18
    dbfe:	81 2f       	mov	r24, r17
    dc00:	cc de       	rcall	.-616    	; 0xd99a <send_cmd>
    dc02:	81 11       	cpse	r24, r1
    dc04:	11 c0       	rjmp	.+34     	; 0xdc28 <mmc_disk_read+0x74>
    dc06:	60 e0       	ldi	r22, 0x00	; 0
    dc08:	72 e0       	ldi	r23, 0x02	; 2
    dc0a:	c7 01       	movw	r24, r14
    dc0c:	70 de       	rcall	.-800    	; 0xd8ee <rcvr_datablock>
    dc0e:	89 2b       	or	r24, r25
    dc10:	21 f0       	breq	.+8      	; 0xdc1a <mmc_disk_read+0x66>
    dc12:	8e ef       	ldi	r24, 0xFE	; 254
    dc14:	f8 1a       	sub	r15, r24
    dc16:	21 97       	sbiw	r28, 0x01	; 1
    dc18:	b1 f7       	brne	.-20     	; 0xdc06 <mmc_disk_read+0x52>
    dc1a:	12 31       	cpi	r17, 0x12	; 18
    dc1c:	29 f4       	brne	.+10     	; 0xdc28 <mmc_disk_read+0x74>
    dc1e:	40 e0       	ldi	r20, 0x00	; 0
    dc20:	50 e0       	ldi	r21, 0x00	; 0
    dc22:	ba 01       	movw	r22, r20
    dc24:	8c e0       	ldi	r24, 0x0C	; 12
    dc26:	b9 de       	rcall	.-654    	; 0xd99a <send_cmd>
    dc28:	5c de       	rcall	.-840    	; 0xd8e2 <deselect>
    dc2a:	81 e0       	ldi	r24, 0x01	; 1
    dc2c:	90 e0       	ldi	r25, 0x00	; 0
    dc2e:	cd 2b       	or	r28, r29
    dc30:	09 f4       	brne	.+2      	; 0xdc34 <mmc_disk_read+0x80>
    dc32:	80 e0       	ldi	r24, 0x00	; 0
    dc34:	df 91       	pop	r29
    dc36:	cf 91       	pop	r28
    dc38:	1f 91       	pop	r17
    dc3a:	ff 90       	pop	r15
    dc3c:	ef 90       	pop	r14
    dc3e:	08 95       	ret

0000dc40 <mmc_disk_write>:
    dc40:	a0 e0       	ldi	r26, 0x00	; 0
    dc42:	b0 e0       	ldi	r27, 0x00	; 0
    dc44:	e6 e2       	ldi	r30, 0x26	; 38
    dc46:	fe e6       	ldi	r31, 0x6E	; 110
    dc48:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    dc4c:	8c 01       	movw	r16, r24
    dc4e:	6a 01       	movw	r12, r20
    dc50:	7b 01       	movw	r14, r22
    dc52:	e9 01       	movw	r28, r18
    dc54:	20 97       	sbiw	r28, 0x00	; 0
    dc56:	19 f4       	brne	.+6      	; 0xdc5e <mmc_disk_write+0x1e>
    dc58:	44 de       	rcall	.-888    	; 0xd8e2 <deselect>
    dc5a:	84 e0       	ldi	r24, 0x04	; 4
    dc5c:	06 c0       	rjmp	.+12     	; 0xdc6a <mmc_disk_write+0x2a>
    dc5e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dc62:	80 ff       	sbrs	r24, 0
    dc64:	04 c0       	rjmp	.+8      	; 0xdc6e <mmc_disk_write+0x2e>
    dc66:	3d de       	rcall	.-902    	; 0xd8e2 <deselect>
    dc68:	83 e0       	ldi	r24, 0x03	; 3
    dc6a:	90 e0       	ldi	r25, 0x00	; 0
    dc6c:	49 c0       	rjmp	.+146    	; 0xdd00 <mmc_disk_write+0xc0>
    dc6e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dc72:	82 ff       	sbrs	r24, 2
    dc74:	03 c0       	rjmp	.+6      	; 0xdc7c <mmc_disk_write+0x3c>
    dc76:	35 de       	rcall	.-918    	; 0xd8e2 <deselect>
    dc78:	82 e0       	ldi	r24, 0x02	; 2
    dc7a:	f7 cf       	rjmp	.-18     	; 0xdc6a <mmc_disk_write+0x2a>
    dc7c:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <CardType>
    dc80:	83 fd       	sbrc	r24, 3
    dc82:	07 c0       	rjmp	.+14     	; 0xdc92 <mmc_disk_write+0x52>
    dc84:	99 e0       	ldi	r25, 0x09	; 9
    dc86:	cc 0c       	add	r12, r12
    dc88:	dd 1c       	adc	r13, r13
    dc8a:	ee 1c       	adc	r14, r14
    dc8c:	ff 1c       	adc	r15, r15
    dc8e:	9a 95       	dec	r25
    dc90:	d1 f7       	brne	.-12     	; 0xdc86 <mmc_disk_write+0x46>
    dc92:	c1 30       	cpi	r28, 0x01	; 1
    dc94:	d1 05       	cpc	r29, r1
    dc96:	89 f4       	brne	.+34     	; 0xdcba <mmc_disk_write+0x7a>
    dc98:	b7 01       	movw	r22, r14
    dc9a:	a6 01       	movw	r20, r12
    dc9c:	88 e1       	ldi	r24, 0x18	; 24
    dc9e:	7d de       	rcall	.-774    	; 0xd99a <send_cmd>
    dca0:	81 11       	cpse	r24, r1
    dca2:	26 c0       	rjmp	.+76     	; 0xdcf0 <mmc_disk_write+0xb0>
    dca4:	6e ef       	ldi	r22, 0xFE	; 254
    dca6:	c8 01       	movw	r24, r16
    dca8:	bb de       	rcall	.-650    	; 0xda20 <xmit_datablock>
    dcaa:	31 e0       	ldi	r19, 0x01	; 1
    dcac:	20 e0       	ldi	r18, 0x00	; 0
    dcae:	89 2b       	or	r24, r25
    dcb0:	09 f0       	breq	.+2      	; 0xdcb4 <mmc_disk_write+0x74>
    dcb2:	30 e0       	ldi	r19, 0x00	; 0
    dcb4:	c3 2f       	mov	r28, r19
    dcb6:	d2 2f       	mov	r29, r18
    dcb8:	1d c0       	rjmp	.+58     	; 0xdcf4 <mmc_disk_write+0xb4>
    dcba:	86 70       	andi	r24, 0x06	; 6
    dcbc:	29 f0       	breq	.+10     	; 0xdcc8 <mmc_disk_write+0x88>
    dcbe:	ae 01       	movw	r20, r28
    dcc0:	60 e0       	ldi	r22, 0x00	; 0
    dcc2:	70 e0       	ldi	r23, 0x00	; 0
    dcc4:	87 e9       	ldi	r24, 0x97	; 151
    dcc6:	69 de       	rcall	.-814    	; 0xd99a <send_cmd>
    dcc8:	b7 01       	movw	r22, r14
    dcca:	a6 01       	movw	r20, r12
    dccc:	89 e1       	ldi	r24, 0x19	; 25
    dcce:	65 de       	rcall	.-822    	; 0xd99a <send_cmd>
    dcd0:	81 11       	cpse	r24, r1
    dcd2:	10 c0       	rjmp	.+32     	; 0xdcf4 <mmc_disk_write+0xb4>
    dcd4:	6c ef       	ldi	r22, 0xFC	; 252
    dcd6:	c8 01       	movw	r24, r16
    dcd8:	a3 de       	rcall	.-698    	; 0xda20 <xmit_datablock>
    dcda:	89 2b       	or	r24, r25
    dcdc:	19 f0       	breq	.+6      	; 0xdce4 <mmc_disk_write+0xa4>
    dcde:	1e 5f       	subi	r17, 0xFE	; 254
    dce0:	21 97       	sbiw	r28, 0x01	; 1
    dce2:	c1 f7       	brne	.-16     	; 0xdcd4 <mmc_disk_write+0x94>
    dce4:	6d ef       	ldi	r22, 0xFD	; 253
    dce6:	80 e0       	ldi	r24, 0x00	; 0
    dce8:	90 e0       	ldi	r25, 0x00	; 0
    dcea:	9a de       	rcall	.-716    	; 0xda20 <xmit_datablock>
    dcec:	89 2b       	or	r24, r25
    dcee:	11 f4       	brne	.+4      	; 0xdcf4 <mmc_disk_write+0xb4>
    dcf0:	c1 e0       	ldi	r28, 0x01	; 1
    dcf2:	d0 e0       	ldi	r29, 0x00	; 0
    dcf4:	f6 dd       	rcall	.-1044   	; 0xd8e2 <deselect>
    dcf6:	81 e0       	ldi	r24, 0x01	; 1
    dcf8:	90 e0       	ldi	r25, 0x00	; 0
    dcfa:	cd 2b       	or	r28, r29
    dcfc:	09 f4       	brne	.+2      	; 0xdd00 <mmc_disk_write+0xc0>
    dcfe:	80 e0       	ldi	r24, 0x00	; 0
    dd00:	cd b7       	in	r28, 0x3d	; 61
    dd02:	de b7       	in	r29, 0x3e	; 62
    dd04:	e8 e0       	ldi	r30, 0x08	; 8
    dd06:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000dd0a <mmc_disk_ioctl>:
    dd0a:	a0 e1       	ldi	r26, 0x10	; 16
    dd0c:	b0 e0       	ldi	r27, 0x00	; 0
    dd0e:	eb e8       	ldi	r30, 0x8B	; 139
    dd10:	fe e6       	ldi	r31, 0x6E	; 110
    dd12:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    dd16:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    dd1a:	90 fd       	sbrc	r25, 0
    dd1c:	2b c2       	rjmp	.+1110   	; 0xe174 <mmc_disk_ioctl+0x46a>
    dd1e:	8b 01       	movw	r16, r22
    dd20:	83 33       	cpi	r24, 0x33	; 51
    dd22:	09 f4       	brne	.+2      	; 0xdd26 <mmc_disk_ioctl+0x1c>
    dd24:	01 c1       	rjmp	.+514    	; 0xdf28 <mmc_disk_ioctl+0x21e>
    dd26:	a0 f4       	brcc	.+40     	; 0xdd50 <mmc_disk_ioctl+0x46>
    dd28:	83 30       	cpi	r24, 0x03	; 3
    dd2a:	09 f4       	brne	.+2      	; 0xdd2e <mmc_disk_ioctl+0x24>
    dd2c:	85 c0       	rjmp	.+266    	; 0xde38 <mmc_disk_ioctl+0x12e>
    dd2e:	28 f4       	brcc	.+10     	; 0xdd3a <mmc_disk_ioctl+0x30>
    dd30:	88 23       	and	r24, r24
    dd32:	11 f1       	breq	.+68     	; 0xdd78 <mmc_disk_ioctl+0x6e>
    dd34:	81 30       	cpi	r24, 0x01	; 1
    dd36:	11 f1       	breq	.+68     	; 0xdd7c <mmc_disk_ioctl+0x72>
    dd38:	1f c2       	rjmp	.+1086   	; 0xe178 <mmc_disk_ioctl+0x46e>
    dd3a:	87 30       	cpi	r24, 0x07	; 7
    dd3c:	09 f4       	brne	.+2      	; 0xdd40 <mmc_disk_ioctl+0x36>
    dd3e:	2a c1       	rjmp	.+596    	; 0xdf94 <mmc_disk_ioctl+0x28a>
    dd40:	82 33       	cpi	r24, 0x32	; 50
    dd42:	09 f0       	breq	.+2      	; 0xdd46 <mmc_disk_ioctl+0x3c>
    dd44:	19 c2       	rjmp	.+1074   	; 0xe178 <mmc_disk_ioctl+0x46e>
    dd46:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <CardType>
    dd4a:	fb 01       	movw	r30, r22
    dd4c:	80 83       	st	Z, r24
    dd4e:	28 c1       	rjmp	.+592    	; 0xdfa0 <mmc_disk_ioctl+0x296>
    dd50:	86 33       	cpi	r24, 0x36	; 54
    dd52:	09 f4       	brne	.+2      	; 0xdd56 <mmc_disk_ioctl+0x4c>
    dd54:	0c c1       	rjmp	.+536    	; 0xdf6e <mmc_disk_ioctl+0x264>
    dd56:	38 f4       	brcc	.+14     	; 0xdd66 <mmc_disk_ioctl+0x5c>
    dd58:	84 33       	cpi	r24, 0x34	; 52
    dd5a:	09 f4       	brne	.+2      	; 0xdd5e <mmc_disk_ioctl+0x54>
    dd5c:	ea c0       	rjmp	.+468    	; 0xdf32 <mmc_disk_ioctl+0x228>
    dd5e:	85 33       	cpi	r24, 0x35	; 53
    dd60:	09 f4       	brne	.+2      	; 0xdd64 <mmc_disk_ioctl+0x5a>
    dd62:	f1 c0       	rjmp	.+482    	; 0xdf46 <mmc_disk_ioctl+0x23c>
    dd64:	09 c2       	rjmp	.+1042   	; 0xe178 <mmc_disk_ioctl+0x46e>
    dd66:	88 33       	cpi	r24, 0x38	; 56
    dd68:	09 f4       	brne	.+2      	; 0xdd6c <mmc_disk_ioctl+0x62>
    dd6a:	74 c1       	rjmp	.+744    	; 0xe054 <mmc_disk_ioctl+0x34a>
    dd6c:	08 f4       	brcc	.+2      	; 0xdd70 <mmc_disk_ioctl+0x66>
    dd6e:	1a c1       	rjmp	.+564    	; 0xdfa4 <mmc_disk_ioctl+0x29a>
    dd70:	89 33       	cpi	r24, 0x39	; 57
    dd72:	09 f4       	brne	.+2      	; 0xdd76 <mmc_disk_ioctl+0x6c>
    dd74:	bc c1       	rjmp	.+888    	; 0xe0ee <mmc_disk_ioctl+0x3e4>
    dd76:	00 c2       	rjmp	.+1024   	; 0xe178 <mmc_disk_ioctl+0x46e>
    dd78:	f3 dd       	rcall	.-1050   	; 0xd960 <select>
    dd7a:	06 c1       	rjmp	.+524    	; 0xdf88 <mmc_disk_ioctl+0x27e>
    dd7c:	40 e0       	ldi	r20, 0x00	; 0
    dd7e:	50 e0       	ldi	r21, 0x00	; 0
    dd80:	ba 01       	movw	r22, r20
    dd82:	89 e0       	ldi	r24, 0x09	; 9
    dd84:	0a de       	rcall	.-1004   	; 0xd99a <send_cmd>
    dd86:	81 11       	cpse	r24, r1
    dd88:	f1 c1       	rjmp	.+994    	; 0xe16c <mmc_disk_ioctl+0x462>
    dd8a:	60 e1       	ldi	r22, 0x10	; 16
    dd8c:	70 e0       	ldi	r23, 0x00	; 0
    dd8e:	ce 01       	movw	r24, r28
    dd90:	01 96       	adiw	r24, 0x01	; 1
    dd92:	ad dd       	rcall	.-1190   	; 0xd8ee <rcvr_datablock>
    dd94:	89 2b       	or	r24, r25
    dd96:	09 f4       	brne	.+2      	; 0xdd9a <mmc_disk_ioctl+0x90>
    dd98:	e9 c1       	rjmp	.+978    	; 0xe16c <mmc_disk_ioctl+0x462>
    dd9a:	99 81       	ldd	r25, Y+1	; 0x01
    dd9c:	92 95       	swap	r25
    dd9e:	96 95       	lsr	r25
    dda0:	96 95       	lsr	r25
    dda2:	93 70       	andi	r25, 0x03	; 3
    dda4:	29 85       	ldd	r18, Y+9	; 0x09
    dda6:	4a 85       	ldd	r20, Y+10	; 0x0a
    dda8:	88 85       	ldd	r24, Y+8	; 0x08
    ddaa:	91 30       	cpi	r25, 0x01	; 1
    ddac:	d9 f4       	brne	.+54     	; 0xdde4 <mmc_disk_ioctl+0xda>
    ddae:	30 e0       	ldi	r19, 0x00	; 0
    ddb0:	32 2f       	mov	r19, r18
    ddb2:	22 27       	eor	r18, r18
    ddb4:	24 0f       	add	r18, r20
    ddb6:	31 1d       	adc	r19, r1
    ddb8:	8f 73       	andi	r24, 0x3F	; 63
    ddba:	90 e0       	ldi	r25, 0x00	; 0
    ddbc:	a0 e0       	ldi	r26, 0x00	; 0
    ddbe:	b0 e0       	ldi	r27, 0x00	; 0
    ddc0:	dc 01       	movw	r26, r24
    ddc2:	99 27       	eor	r25, r25
    ddc4:	88 27       	eor	r24, r24
    ddc6:	01 96       	adiw	r24, 0x01	; 1
    ddc8:	a1 1d       	adc	r26, r1
    ddca:	b1 1d       	adc	r27, r1
    ddcc:	82 0f       	add	r24, r18
    ddce:	93 1f       	adc	r25, r19
    ddd0:	a1 1d       	adc	r26, r1
    ddd2:	b1 1d       	adc	r27, r1
    ddd4:	fa e0       	ldi	r31, 0x0A	; 10
    ddd6:	88 0f       	add	r24, r24
    ddd8:	99 1f       	adc	r25, r25
    ddda:	aa 1f       	adc	r26, r26
    dddc:	bb 1f       	adc	r27, r27
    ddde:	fa 95       	dec	r31
    dde0:	d1 f7       	brne	.-12     	; 0xddd6 <mmc_disk_ioctl+0xcc>
    dde2:	9b c0       	rjmp	.+310    	; 0xdf1a <mmc_disk_ioctl+0x210>
    dde4:	22 95       	swap	r18
    dde6:	26 95       	lsr	r18
    dde8:	26 95       	lsr	r18
    ddea:	23 70       	andi	r18, 0x03	; 3
    ddec:	f4 e0       	ldi	r31, 0x04	; 4
    ddee:	8f 9f       	mul	r24, r31
    ddf0:	c0 01       	movw	r24, r0
    ddf2:	11 24       	eor	r1, r1
    ddf4:	82 0f       	add	r24, r18
    ddf6:	91 1d       	adc	r25, r1
    ddf8:	01 96       	adiw	r24, 0x01	; 1
    ddfa:	2f 81       	ldd	r18, Y+7	; 0x07
    ddfc:	23 70       	andi	r18, 0x03	; 3
    ddfe:	30 e0       	ldi	r19, 0x00	; 0
    de00:	32 2f       	mov	r19, r18
    de02:	22 27       	eor	r18, r18
    de04:	33 0f       	add	r19, r19
    de06:	33 0f       	add	r19, r19
    de08:	82 0f       	add	r24, r18
    de0a:	93 1f       	adc	r25, r19
    de0c:	a0 e0       	ldi	r26, 0x00	; 0
    de0e:	b0 e0       	ldi	r27, 0x00	; 0
    de10:	2e 81       	ldd	r18, Y+6	; 0x06
    de12:	32 2f       	mov	r19, r18
    de14:	3f 70       	andi	r19, 0x0F	; 15
    de16:	2b 85       	ldd	r18, Y+11	; 0x0b
    de18:	22 1f       	adc	r18, r18
    de1a:	22 27       	eor	r18, r18
    de1c:	22 1f       	adc	r18, r18
    de1e:	23 0f       	add	r18, r19
    de20:	43 70       	andi	r20, 0x03	; 3
    de22:	44 0f       	add	r20, r20
    de24:	42 0f       	add	r20, r18
    de26:	47 50       	subi	r20, 0x07	; 7
    de28:	04 c0       	rjmp	.+8      	; 0xde32 <mmc_disk_ioctl+0x128>
    de2a:	88 0f       	add	r24, r24
    de2c:	99 1f       	adc	r25, r25
    de2e:	aa 1f       	adc	r26, r26
    de30:	bb 1f       	adc	r27, r27
    de32:	4a 95       	dec	r20
    de34:	d2 f7       	brpl	.-12     	; 0xde2a <mmc_disk_ioctl+0x120>
    de36:	71 c0       	rjmp	.+226    	; 0xdf1a <mmc_disk_ioctl+0x210>
    de38:	80 91 37 18 	lds	r24, 0x1837	; 0x801837 <CardType>
    de3c:	40 e0       	ldi	r20, 0x00	; 0
    de3e:	50 e0       	ldi	r21, 0x00	; 0
    de40:	ba 01       	movw	r22, r20
    de42:	82 ff       	sbrs	r24, 2
    de44:	24 c0       	rjmp	.+72     	; 0xde8e <mmc_disk_ioctl+0x184>
    de46:	8d e8       	ldi	r24, 0x8D	; 141
    de48:	a8 dd       	rcall	.-1200   	; 0xd99a <send_cmd>
    de4a:	81 11       	cpse	r24, r1
    de4c:	8f c1       	rjmp	.+798    	; 0xe16c <mmc_disk_ioctl+0x462>
    de4e:	8f ef       	ldi	r24, 0xFF	; 255
    de50:	46 dd       	rcall	.-1396   	; 0xd8de <xchg_spi>
    de52:	60 e1       	ldi	r22, 0x10	; 16
    de54:	70 e0       	ldi	r23, 0x00	; 0
    de56:	ce 01       	movw	r24, r28
    de58:	01 96       	adiw	r24, 0x01	; 1
    de5a:	49 dd       	rcall	.-1390   	; 0xd8ee <rcvr_datablock>
    de5c:	89 2b       	or	r24, r25
    de5e:	09 f4       	brne	.+2      	; 0xde62 <mmc_disk_ioctl+0x158>
    de60:	85 c1       	rjmp	.+778    	; 0xe16c <mmc_disk_ioctl+0x462>
    de62:	50 e3       	ldi	r21, 0x30	; 48
    de64:	f5 2e       	mov	r15, r21
    de66:	8f ef       	ldi	r24, 0xFF	; 255
    de68:	3a dd       	rcall	.-1420   	; 0xd8de <xchg_spi>
    de6a:	fa 94       	dec	r15
    de6c:	f1 10       	cpse	r15, r1
    de6e:	fb cf       	rjmp	.-10     	; 0xde66 <mmc_disk_ioctl+0x15c>
    de70:	2b 85       	ldd	r18, Y+11	; 0x0b
    de72:	22 95       	swap	r18
    de74:	2f 70       	andi	r18, 0x0F	; 15
    de76:	80 e1       	ldi	r24, 0x10	; 16
    de78:	90 e0       	ldi	r25, 0x00	; 0
    de7a:	a0 e0       	ldi	r26, 0x00	; 0
    de7c:	b0 e0       	ldi	r27, 0x00	; 0
    de7e:	04 c0       	rjmp	.+8      	; 0xde88 <mmc_disk_ioctl+0x17e>
    de80:	88 0f       	add	r24, r24
    de82:	99 1f       	adc	r25, r25
    de84:	aa 1f       	adc	r26, r26
    de86:	bb 1f       	adc	r27, r27
    de88:	2a 95       	dec	r18
    de8a:	d2 f7       	brpl	.-12     	; 0xde80 <mmc_disk_ioctl+0x176>
    de8c:	46 c0       	rjmp	.+140    	; 0xdf1a <mmc_disk_ioctl+0x210>
    de8e:	89 e0       	ldi	r24, 0x09	; 9
    de90:	84 dd       	rcall	.-1272   	; 0xd99a <send_cmd>
    de92:	81 11       	cpse	r24, r1
    de94:	6b c1       	rjmp	.+726    	; 0xe16c <mmc_disk_ioctl+0x462>
    de96:	60 e1       	ldi	r22, 0x10	; 16
    de98:	70 e0       	ldi	r23, 0x00	; 0
    de9a:	ce 01       	movw	r24, r28
    de9c:	01 96       	adiw	r24, 0x01	; 1
    de9e:	27 dd       	rcall	.-1458   	; 0xd8ee <rcvr_datablock>
    dea0:	89 2b       	or	r24, r25
    dea2:	09 f4       	brne	.+2      	; 0xdea6 <mmc_disk_ioctl+0x19c>
    dea4:	63 c1       	rjmp	.+710    	; 0xe16c <mmc_disk_ioctl+0x462>
    dea6:	90 91 37 18 	lds	r25, 0x1837	; 0x801837 <CardType>
    deaa:	2b 85       	ldd	r18, Y+11	; 0x0b
    deac:	8c 85       	ldd	r24, Y+12	; 0x0c
    deae:	91 ff       	sbrs	r25, 1
    deb0:	16 c0       	rjmp	.+44     	; 0xdede <mmc_disk_ioctl+0x1d4>
    deb2:	2f 73       	andi	r18, 0x3F	; 63
    deb4:	88 1f       	adc	r24, r24
    deb6:	88 27       	eor	r24, r24
    deb8:	88 1f       	adc	r24, r24
    deba:	90 e0       	ldi	r25, 0x00	; 0
    debc:	01 96       	adiw	r24, 0x01	; 1
    debe:	82 0f       	add	r24, r18
    dec0:	91 1d       	adc	r25, r1
    dec2:	82 0f       	add	r24, r18
    dec4:	91 1d       	adc	r25, r1
    dec6:	2e 85       	ldd	r18, Y+14	; 0x0e
    dec8:	22 95       	swap	r18
    deca:	26 95       	lsr	r18
    decc:	26 95       	lsr	r18
    dece:	23 70       	andi	r18, 0x03	; 3
    ded0:	21 50       	subi	r18, 0x01	; 1
    ded2:	02 c0       	rjmp	.+4      	; 0xded8 <mmc_disk_ioctl+0x1ce>
    ded4:	88 0f       	add	r24, r24
    ded6:	99 1f       	adc	r25, r25
    ded8:	2a 95       	dec	r18
    deda:	e2 f7       	brpl	.-8      	; 0xded4 <mmc_disk_ioctl+0x1ca>
    dedc:	1c c0       	rjmp	.+56     	; 0xdf16 <mmc_disk_ioctl+0x20c>
    dede:	38 2f       	mov	r19, r24
    dee0:	33 70       	andi	r19, 0x03	; 3
    dee2:	82 95       	swap	r24
    dee4:	86 95       	lsr	r24
    dee6:	87 70       	andi	r24, 0x07	; 7
    dee8:	90 e0       	ldi	r25, 0x00	; 0
    deea:	f8 e0       	ldi	r31, 0x08	; 8
    deec:	3f 9f       	mul	r19, r31
    deee:	80 0d       	add	r24, r0
    def0:	91 1d       	adc	r25, r1
    def2:	11 24       	eor	r1, r1
    def4:	01 96       	adiw	r24, 0x01	; 1
    def6:	2c 77       	andi	r18, 0x7C	; 124
    def8:	30 e0       	ldi	r19, 0x00	; 0
    defa:	35 95       	asr	r19
    defc:	27 95       	ror	r18
    defe:	35 95       	asr	r19
    df00:	27 95       	ror	r18
    df02:	2f 5f       	subi	r18, 0xFF	; 255
    df04:	3f 4f       	sbci	r19, 0xFF	; 255
    df06:	82 9f       	mul	r24, r18
    df08:	a0 01       	movw	r20, r0
    df0a:	83 9f       	mul	r24, r19
    df0c:	50 0d       	add	r21, r0
    df0e:	92 9f       	mul	r25, r18
    df10:	50 0d       	add	r21, r0
    df12:	11 24       	eor	r1, r1
    df14:	ca 01       	movw	r24, r20
    df16:	a0 e0       	ldi	r26, 0x00	; 0
    df18:	b0 e0       	ldi	r27, 0x00	; 0
    df1a:	f8 01       	movw	r30, r16
    df1c:	80 83       	st	Z, r24
    df1e:	91 83       	std	Z+1, r25	; 0x01
    df20:	a2 83       	std	Z+2, r26	; 0x02
    df22:	b3 83       	std	Z+3, r27	; 0x03
    df24:	00 e0       	ldi	r16, 0x00	; 0
    df26:	23 c1       	rjmp	.+582    	; 0xe16e <mmc_disk_ioctl+0x464>
    df28:	40 e0       	ldi	r20, 0x00	; 0
    df2a:	50 e0       	ldi	r21, 0x00	; 0
    df2c:	ba 01       	movw	r22, r20
    df2e:	89 e0       	ldi	r24, 0x09	; 9
    df30:	04 c0       	rjmp	.+8      	; 0xdf3a <mmc_disk_ioctl+0x230>
    df32:	40 e0       	ldi	r20, 0x00	; 0
    df34:	50 e0       	ldi	r21, 0x00	; 0
    df36:	ba 01       	movw	r22, r20
    df38:	8a e0       	ldi	r24, 0x0A	; 10
    df3a:	2f dd       	rcall	.-1442   	; 0xd99a <send_cmd>
    df3c:	81 11       	cpse	r24, r1
    df3e:	16 c1       	rjmp	.+556    	; 0xe16c <mmc_disk_ioctl+0x462>
    df40:	60 e1       	ldi	r22, 0x10	; 16
    df42:	70 e0       	ldi	r23, 0x00	; 0
    df44:	1f c0       	rjmp	.+62     	; 0xdf84 <mmc_disk_ioctl+0x27a>
    df46:	40 e0       	ldi	r20, 0x00	; 0
    df48:	50 e0       	ldi	r21, 0x00	; 0
    df4a:	ba 01       	movw	r22, r20
    df4c:	8a e3       	ldi	r24, 0x3A	; 58
    df4e:	25 dd       	rcall	.-1462   	; 0xd99a <send_cmd>
    df50:	81 11       	cpse	r24, r1
    df52:	0c c1       	rjmp	.+536    	; 0xe16c <mmc_disk_ioctl+0x462>
    df54:	78 01       	movw	r14, r16
    df56:	f4 e0       	ldi	r31, 0x04	; 4
    df58:	ef 0e       	add	r14, r31
    df5a:	f1 1c       	adc	r15, r1
    df5c:	8f ef       	ldi	r24, 0xFF	; 255
    df5e:	8d d1       	rcall	.+794    	; 0xe27a <mmc_spi_TXRX>
    df60:	f8 01       	movw	r30, r16
    df62:	81 93       	st	Z+, r24
    df64:	8f 01       	movw	r16, r30
    df66:	ee 15       	cp	r30, r14
    df68:	ff 05       	cpc	r31, r15
    df6a:	c1 f7       	brne	.-16     	; 0xdf5c <mmc_disk_ioctl+0x252>
    df6c:	db cf       	rjmp	.-74     	; 0xdf24 <mmc_disk_ioctl+0x21a>
    df6e:	40 e0       	ldi	r20, 0x00	; 0
    df70:	50 e0       	ldi	r21, 0x00	; 0
    df72:	ba 01       	movw	r22, r20
    df74:	8d e8       	ldi	r24, 0x8D	; 141
    df76:	11 dd       	rcall	.-1502   	; 0xd99a <send_cmd>
    df78:	81 11       	cpse	r24, r1
    df7a:	f8 c0       	rjmp	.+496    	; 0xe16c <mmc_disk_ioctl+0x462>
    df7c:	8f ef       	ldi	r24, 0xFF	; 255
    df7e:	af dc       	rcall	.-1698   	; 0xd8de <xchg_spi>
    df80:	60 e4       	ldi	r22, 0x40	; 64
    df82:	70 e0       	ldi	r23, 0x00	; 0
    df84:	c8 01       	movw	r24, r16
    df86:	b3 dc       	rcall	.-1690   	; 0xd8ee <rcvr_datablock>
    df88:	01 e0       	ldi	r16, 0x01	; 1
    df8a:	10 e0       	ldi	r17, 0x00	; 0
    df8c:	89 2b       	or	r24, r25
    df8e:	09 f4       	brne	.+2      	; 0xdf92 <mmc_disk_ioctl+0x288>
    df90:	ef c0       	rjmp	.+478    	; 0xe170 <mmc_disk_ioctl+0x466>
    df92:	ea c0       	rjmp	.+468    	; 0xe168 <mmc_disk_ioctl+0x45e>
    df94:	39 d2       	rcall	.+1138   	; 0xe408 <mmc_power_off>
    df96:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    df9a:	81 60       	ori	r24, 0x01	; 1
    df9c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    dfa0:	00 e0       	ldi	r16, 0x00	; 0
    dfa2:	eb c0       	rjmp	.+470    	; 0xe17a <mmc_disk_ioctl+0x470>
    dfa4:	fb 01       	movw	r30, r22
    dfa6:	43 81       	ldd	r20, Z+3	; 0x03
    dfa8:	54 81       	ldd	r21, Z+4	; 0x04
    dfaa:	65 81       	ldd	r22, Z+5	; 0x05
    dfac:	76 81       	ldd	r23, Z+6	; 0x06
    dfae:	39 e0       	ldi	r19, 0x09	; 9
    dfb0:	44 0f       	add	r20, r20
    dfb2:	55 1f       	adc	r21, r21
    dfb4:	66 1f       	adc	r22, r22
    dfb6:	77 1f       	adc	r23, r23
    dfb8:	3a 95       	dec	r19
    dfba:	d1 f7       	brne	.-12     	; 0xdfb0 <mmc_disk_ioctl+0x2a6>
    dfbc:	70 68       	ori	r23, 0x80	; 128
    dfbe:	80 81       	ld	r24, Z
    dfc0:	90 e0       	ldi	r25, 0x00	; 0
    dfc2:	a0 e0       	ldi	r26, 0x00	; 0
    dfc4:	b0 e0       	ldi	r27, 0x00	; 0
    dfc6:	2c e1       	ldi	r18, 0x1C	; 28
    dfc8:	88 0f       	add	r24, r24
    dfca:	99 1f       	adc	r25, r25
    dfcc:	aa 1f       	adc	r26, r26
    dfce:	bb 1f       	adc	r27, r27
    dfd0:	2a 95       	dec	r18
    dfd2:	d1 f7       	brne	.-12     	; 0xdfc8 <mmc_disk_ioctl+0x2be>
    dfd4:	48 2b       	or	r20, r24
    dfd6:	59 2b       	or	r21, r25
    dfd8:	6a 2b       	or	r22, r26
    dfda:	7b 2b       	or	r23, r27
    dfdc:	81 81       	ldd	r24, Z+1	; 0x01
    dfde:	92 81       	ldd	r25, Z+2	; 0x02
    dfe0:	01 97       	sbiw	r24, 0x01	; 1
    dfe2:	91 70       	andi	r25, 0x01	; 1
    dfe4:	a0 e0       	ldi	r26, 0x00	; 0
    dfe6:	b0 e0       	ldi	r27, 0x00	; 0
    dfe8:	48 2b       	or	r20, r24
    dfea:	59 2b       	or	r21, r25
    dfec:	6a 2b       	or	r22, r26
    dfee:	7b 2b       	or	r23, r27
    dff0:	80 e3       	ldi	r24, 0x30	; 48
    dff2:	d3 dc       	rcall	.-1626   	; 0xd99a <send_cmd>
    dff4:	81 11       	cpse	r24, r1
    dff6:	ba c0       	rjmp	.+372    	; 0xe16c <mmc_disk_ioctl+0x462>
    dff8:	88 ee       	ldi	r24, 0xE8	; 232
    dffa:	93 e0       	ldi	r25, 0x03	; 3
    dffc:	41 d1       	rcall	.+642    	; 0xe280 <mmc_set_ms_timeout>
    dffe:	8f ef       	ldi	r24, 0xFF	; 255
    e000:	3c d1       	rcall	.+632    	; 0xe27a <mmc_spi_TXRX>
    e002:	8f 3f       	cpi	r24, 0xFF	; 255
    e004:	21 f4       	brne	.+8      	; 0xe00e <mmc_disk_ioctl+0x304>
    e006:	43 d1       	rcall	.+646    	; 0xe28e <mmc_test_timeout>
    e008:	89 2b       	or	r24, r25
    e00a:	c9 f3       	breq	.-14     	; 0xdffe <mmc_disk_ioctl+0x2f4>
    e00c:	af c0       	rjmp	.+350    	; 0xe16c <mmc_disk_ioctl+0x462>
    e00e:	8e 3f       	cpi	r24, 0xFE	; 254
    e010:	09 f0       	breq	.+2      	; 0xe014 <mmc_disk_ioctl+0x30a>
    e012:	ac c0       	rjmp	.+344    	; 0xe16c <mmc_disk_ioctl+0x462>
    e014:	f8 01       	movw	r30, r16
    e016:	e7 80       	ldd	r14, Z+7	; 0x07
    e018:	f0 84       	ldd	r15, Z+8	; 0x08
    e01a:	c1 80       	ldd	r12, Z+1	; 0x01
    e01c:	d2 80       	ldd	r13, Z+2	; 0x02
    e01e:	ce 0c       	add	r12, r14
    e020:	df 1c       	adc	r13, r15
    e022:	ce 14       	cp	r12, r14
    e024:	df 04       	cpc	r13, r15
    e026:	31 f0       	breq	.+12     	; 0xe034 <mmc_disk_ioctl+0x32a>
    e028:	8f ef       	ldi	r24, 0xFF	; 255
    e02a:	27 d1       	rcall	.+590    	; 0xe27a <mmc_spi_TXRX>
    e02c:	f7 01       	movw	r30, r14
    e02e:	81 93       	st	Z+, r24
    e030:	7f 01       	movw	r14, r30
    e032:	f7 cf       	rjmp	.-18     	; 0xe022 <mmc_disk_ioctl+0x318>
    e034:	f8 01       	movw	r30, r16
    e036:	81 81       	ldd	r24, Z+1	; 0x01
    e038:	92 81       	ldd	r25, Z+2	; 0x02
    e03a:	02 e0       	ldi	r16, 0x02	; 2
    e03c:	12 e0       	ldi	r17, 0x02	; 2
    e03e:	08 1b       	sub	r16, r24
    e040:	19 0b       	sbc	r17, r25
    e042:	01 15       	cp	r16, r1
    e044:	11 05       	cpc	r17, r1
    e046:	09 f4       	brne	.+2      	; 0xe04a <mmc_disk_ioctl+0x340>
    e048:	6d cf       	rjmp	.-294    	; 0xdf24 <mmc_disk_ioctl+0x21a>
    e04a:	8f ef       	ldi	r24, 0xFF	; 255
    e04c:	48 dc       	rcall	.-1904   	; 0xd8de <xchg_spi>
    e04e:	01 50       	subi	r16, 0x01	; 1
    e050:	11 09       	sbc	r17, r1
    e052:	f7 cf       	rjmp	.-18     	; 0xe042 <mmc_disk_ioctl+0x338>
    e054:	fb 01       	movw	r30, r22
    e056:	43 81       	ldd	r20, Z+3	; 0x03
    e058:	54 81       	ldd	r21, Z+4	; 0x04
    e05a:	65 81       	ldd	r22, Z+5	; 0x05
    e05c:	76 81       	ldd	r23, Z+6	; 0x06
    e05e:	39 e0       	ldi	r19, 0x09	; 9
    e060:	44 0f       	add	r20, r20
    e062:	55 1f       	adc	r21, r21
    e064:	66 1f       	adc	r22, r22
    e066:	77 1f       	adc	r23, r23
    e068:	3a 95       	dec	r19
    e06a:	d1 f7       	brne	.-12     	; 0xe060 <mmc_disk_ioctl+0x356>
    e06c:	70 68       	ori	r23, 0x80	; 128
    e06e:	80 81       	ld	r24, Z
    e070:	90 e0       	ldi	r25, 0x00	; 0
    e072:	a0 e0       	ldi	r26, 0x00	; 0
    e074:	b0 e0       	ldi	r27, 0x00	; 0
    e076:	2c e1       	ldi	r18, 0x1C	; 28
    e078:	88 0f       	add	r24, r24
    e07a:	99 1f       	adc	r25, r25
    e07c:	aa 1f       	adc	r26, r26
    e07e:	bb 1f       	adc	r27, r27
    e080:	2a 95       	dec	r18
    e082:	d1 f7       	brne	.-12     	; 0xe078 <mmc_disk_ioctl+0x36e>
    e084:	48 2b       	or	r20, r24
    e086:	59 2b       	or	r21, r25
    e088:	6a 2b       	or	r22, r26
    e08a:	7b 2b       	or	r23, r27
    e08c:	81 81       	ldd	r24, Z+1	; 0x01
    e08e:	92 81       	ldd	r25, Z+2	; 0x02
    e090:	01 97       	sbiw	r24, 0x01	; 1
    e092:	91 70       	andi	r25, 0x01	; 1
    e094:	a0 e0       	ldi	r26, 0x00	; 0
    e096:	b0 e0       	ldi	r27, 0x00	; 0
    e098:	48 2b       	or	r20, r24
    e09a:	59 2b       	or	r21, r25
    e09c:	6a 2b       	or	r22, r26
    e09e:	7b 2b       	or	r23, r27
    e0a0:	81 e3       	ldi	r24, 0x31	; 49
    e0a2:	7b dc       	rcall	.-1802   	; 0xd99a <send_cmd>
    e0a4:	81 11       	cpse	r24, r1
    e0a6:	62 c0       	rjmp	.+196    	; 0xe16c <mmc_disk_ioctl+0x462>
    e0a8:	8f ef       	ldi	r24, 0xFF	; 255
    e0aa:	19 dc       	rcall	.-1998   	; 0xd8de <xchg_spi>
    e0ac:	8e ef       	ldi	r24, 0xFE	; 254
    e0ae:	17 dc       	rcall	.-2002   	; 0xd8de <xchg_spi>
    e0b0:	f8 01       	movw	r30, r16
    e0b2:	e7 80       	ldd	r14, Z+7	; 0x07
    e0b4:	f0 84       	ldd	r15, Z+8	; 0x08
    e0b6:	c1 80       	ldd	r12, Z+1	; 0x01
    e0b8:	d2 80       	ldd	r13, Z+2	; 0x02
    e0ba:	ce 0c       	add	r12, r14
    e0bc:	df 1c       	adc	r13, r15
    e0be:	ec 14       	cp	r14, r12
    e0c0:	fd 04       	cpc	r15, r13
    e0c2:	29 f0       	breq	.+10     	; 0xe0ce <mmc_disk_ioctl+0x3c4>
    e0c4:	f7 01       	movw	r30, r14
    e0c6:	81 91       	ld	r24, Z+
    e0c8:	7f 01       	movw	r14, r30
    e0ca:	09 dc       	rcall	.-2030   	; 0xd8de <xchg_spi>
    e0cc:	f8 cf       	rjmp	.-16     	; 0xe0be <mmc_disk_ioctl+0x3b4>
    e0ce:	f8 01       	movw	r30, r16
    e0d0:	81 81       	ldd	r24, Z+1	; 0x01
    e0d2:	92 81       	ldd	r25, Z+2	; 0x02
    e0d4:	02 e0       	ldi	r16, 0x02	; 2
    e0d6:	12 e0       	ldi	r17, 0x02	; 2
    e0d8:	08 1b       	sub	r16, r24
    e0da:	19 0b       	sbc	r17, r25
    e0dc:	8f ef       	ldi	r24, 0xFF	; 255
    e0de:	01 15       	cp	r16, r1
    e0e0:	11 05       	cpc	r17, r1
    e0e2:	09 f4       	brne	.+2      	; 0xe0e6 <mmc_disk_ioctl+0x3dc>
    e0e4:	3b c0       	rjmp	.+118    	; 0xe15c <mmc_disk_ioctl+0x452>
    e0e6:	fb db       	rcall	.-2058   	; 0xd8de <xchg_spi>
    e0e8:	01 50       	subi	r16, 0x01	; 1
    e0ea:	11 09       	sbc	r17, r1
    e0ec:	f7 cf       	rjmp	.-18     	; 0xe0dc <mmc_disk_ioctl+0x3d2>
    e0ee:	fb 01       	movw	r30, r22
    e0f0:	43 81       	ldd	r20, Z+3	; 0x03
    e0f2:	54 81       	ldd	r21, Z+4	; 0x04
    e0f4:	65 81       	ldd	r22, Z+5	; 0x05
    e0f6:	76 81       	ldd	r23, Z+6	; 0x06
    e0f8:	89 e0       	ldi	r24, 0x09	; 9
    e0fa:	44 0f       	add	r20, r20
    e0fc:	55 1f       	adc	r21, r21
    e0fe:	66 1f       	adc	r22, r22
    e100:	77 1f       	adc	r23, r23
    e102:	8a 95       	dec	r24
    e104:	d1 f7       	brne	.-12     	; 0xe0fa <mmc_disk_ioctl+0x3f0>
    e106:	74 68       	ori	r23, 0x84	; 132
    e108:	80 81       	ld	r24, Z
    e10a:	90 e0       	ldi	r25, 0x00	; 0
    e10c:	a0 e0       	ldi	r26, 0x00	; 0
    e10e:	b0 e0       	ldi	r27, 0x00	; 0
    e110:	2c e1       	ldi	r18, 0x1C	; 28
    e112:	88 0f       	add	r24, r24
    e114:	99 1f       	adc	r25, r25
    e116:	aa 1f       	adc	r26, r26
    e118:	bb 1f       	adc	r27, r27
    e11a:	2a 95       	dec	r18
    e11c:	d1 f7       	brne	.-12     	; 0xe112 <mmc_disk_ioctl+0x408>
    e11e:	48 2b       	or	r20, r24
    e120:	59 2b       	or	r21, r25
    e122:	6a 2b       	or	r22, r26
    e124:	7b 2b       	or	r23, r27
    e126:	82 81       	ldd	r24, Z+2	; 0x02
    e128:	90 e0       	ldi	r25, 0x00	; 0
    e12a:	a0 e0       	ldi	r26, 0x00	; 0
    e12c:	b0 e0       	ldi	r27, 0x00	; 0
    e12e:	48 2b       	or	r20, r24
    e130:	59 2b       	or	r21, r25
    e132:	6a 2b       	or	r22, r26
    e134:	7b 2b       	or	r23, r27
    e136:	81 e3       	ldi	r24, 0x31	; 49
    e138:	30 dc       	rcall	.-1952   	; 0xd99a <send_cmd>
    e13a:	81 11       	cpse	r24, r1
    e13c:	17 c0       	rjmp	.+46     	; 0xe16c <mmc_disk_ioctl+0x462>
    e13e:	8f ef       	ldi	r24, 0xFF	; 255
    e140:	ce db       	rcall	.-2148   	; 0xd8de <xchg_spi>
    e142:	8e ef       	ldi	r24, 0xFE	; 254
    e144:	cc db       	rcall	.-2152   	; 0xd8de <xchg_spi>
    e146:	f8 01       	movw	r30, r16
    e148:	81 81       	ldd	r24, Z+1	; 0x01
    e14a:	c9 db       	rcall	.-2158   	; 0xd8de <xchg_spi>
    e14c:	01 e0       	ldi	r16, 0x01	; 1
    e14e:	12 e0       	ldi	r17, 0x02	; 2
    e150:	8f ef       	ldi	r24, 0xFF	; 255
    e152:	c5 db       	rcall	.-2166   	; 0xd8de <xchg_spi>
    e154:	01 50       	subi	r16, 0x01	; 1
    e156:	11 09       	sbc	r17, r1
    e158:	d9 f7       	brne	.-10     	; 0xe150 <mmc_disk_ioctl+0x446>
    e15a:	8f ef       	ldi	r24, 0xFF	; 255
    e15c:	8e d0       	rcall	.+284    	; 0xe27a <mmc_spi_TXRX>
    e15e:	8f 71       	andi	r24, 0x1F	; 31
    e160:	01 e0       	ldi	r16, 0x01	; 1
    e162:	10 e0       	ldi	r17, 0x00	; 0
    e164:	85 30       	cpi	r24, 0x05	; 5
    e166:	21 f4       	brne	.+8      	; 0xe170 <mmc_disk_ioctl+0x466>
    e168:	00 e0       	ldi	r16, 0x00	; 0
    e16a:	02 c0       	rjmp	.+4      	; 0xe170 <mmc_disk_ioctl+0x466>
    e16c:	01 e0       	ldi	r16, 0x01	; 1
    e16e:	10 e0       	ldi	r17, 0x00	; 0
    e170:	b8 db       	rcall	.-2192   	; 0xd8e2 <deselect>
    e172:	04 c0       	rjmp	.+8      	; 0xe17c <mmc_disk_ioctl+0x472>
    e174:	03 e0       	ldi	r16, 0x03	; 3
    e176:	01 c0       	rjmp	.+2      	; 0xe17a <mmc_disk_ioctl+0x470>
    e178:	04 e0       	ldi	r16, 0x04	; 4
    e17a:	10 e0       	ldi	r17, 0x00	; 0
    e17c:	c8 01       	movw	r24, r16
    e17e:	60 96       	adiw	r28, 0x10	; 16
    e180:	e8 e0       	ldi	r30, 0x08	; 8
    e182:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000e186 <mmc_disk_timerproc>:
    e186:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <Timer1>
    e18a:	88 23       	and	r24, r24
    e18c:	19 f0       	breq	.+6      	; 0xe194 <mmc_disk_timerproc+0xe>
    e18e:	81 50       	subi	r24, 0x01	; 1
    e190:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <Timer1>
    e194:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <Timer2>
    e198:	88 23       	and	r24, r24
    e19a:	19 f0       	breq	.+6      	; 0xe1a2 <mmc_disk_timerproc+0x1c>
    e19c:	81 50       	subi	r24, 0x01	; 1
    e19e:	80 93 38 18 	sts	0x1838, r24	; 0x801838 <Timer2>
    e1a2:	08 95       	ret

0000e1a4 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e1a4:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_mmc_timeout>
    e1a8:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_mmc_timeout+0x1>
    e1ac:	00 97       	sbiw	r24, 0x00	; 0
    e1ae:	29 f0       	breq	.+10     	; 0xe1ba <mmc_task+0x16>
    e1b0:	01 97       	sbiw	r24, 0x01	; 1
    e1b2:	90 93 41 18 	sts	0x1841, r25	; 0x801841 <_mmc_timeout+0x1>
    e1b6:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <_mmc_timeout>
    e1ba:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <_mmc_pre>
    e1be:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <_mmc_pre+0x1>
    e1c2:	8a 30       	cpi	r24, 0x0A	; 10
    e1c4:	91 05       	cpc	r25, r1
    e1c6:	30 f4       	brcc	.+12     	; 0xe1d4 <mmc_task+0x30>
    e1c8:	01 96       	adiw	r24, 0x01	; 1
    e1ca:	90 93 3b 18 	sts	0x183B, r25	; 0x80183b <_mmc_pre+0x1>
    e1ce:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <_mmc_pre>
    e1d2:	08 95       	ret
    e1d4:	10 92 3b 18 	sts	0x183B, r1	; 0x80183b <_mmc_pre+0x1>
    e1d8:	10 92 3a 18 	sts	0x183A, r1	; 0x80183a <_mmc_pre>
    e1dc:	d4 cf       	rjmp	.-88     	; 0xe186 <mmc_disk_timerproc>
    e1de:	08 95       	ret

0000e1e0 <mmc_install_timer>:
    e1e0:	10 92 41 18 	sts	0x1841, r1	; 0x801841 <_mmc_timeout+0x1>
    e1e4:	10 92 40 18 	sts	0x1840, r1	; 0x801840 <_mmc_timeout>
    e1e8:	61 e0       	ldi	r22, 0x01	; 1
    e1ea:	70 e0       	ldi	r23, 0x00	; 0
    e1ec:	82 ed       	ldi	r24, 0xD2	; 210
    e1ee:	90 e7       	ldi	r25, 0x70	; 112
    e1f0:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <set_timers>
    e1f4:	01 96       	adiw	r24, 0x01	; 1
    e1f6:	51 f4       	brne	.+20     	; 0xe20c <mmc_install_timer+0x2c>
    e1f8:	87 e4       	ldi	r24, 0x47	; 71
    e1fa:	98 e0       	ldi	r25, 0x08	; 8
    e1fc:	1f 92       	push	r1
    e1fe:	9f 93       	push	r25
    e200:	8f 93       	push	r24
    e202:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e206:	0f 90       	pop	r0
    e208:	0f 90       	pop	r0
    e20a:	0f 90       	pop	r0
    e20c:	08 95       	ret

0000e20e <mmc_spi_begin>:
    e20e:	60 91 3c 18 	lds	r22, 0x183C	; 0x80183c <_mmc_clock>
    e212:	70 91 3d 18 	lds	r23, 0x183D	; 0x80183d <_mmc_clock+0x1>
    e216:	80 91 3e 18 	lds	r24, 0x183E	; 0x80183e <_mmc_clock+0x2>
    e21a:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <_mmc_clock+0x3>
    e21e:	4b e0       	ldi	r20, 0x0B	; 11
    e220:	50 e0       	ldi	r21, 0x00	; 0
    e222:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <spi_begin>
    e226:	08 95       	ret

0000e228 <mmc_spi_end>:
    e228:	8b e0       	ldi	r24, 0x0B	; 11
    e22a:	0c 94 24 29 	jmp	0x5248	; 0x5248 <spi_end>
    e22e:	08 95       	ret

0000e230 <mmc_slow>:
    e230:	80 e2       	ldi	r24, 0x20	; 32
    e232:	91 ea       	ldi	r25, 0xA1	; 161
    e234:	a7 e0       	ldi	r26, 0x07	; 7
    e236:	b0 e0       	ldi	r27, 0x00	; 0
    e238:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <_mmc_clock>
    e23c:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <_mmc_clock+0x1>
    e240:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <_mmc_clock+0x2>
    e244:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <_mmc_clock+0x3>
    e248:	08 95       	ret

0000e24a <mmc_spi_init>:
    e24a:	8b e0       	ldi	r24, 0x0B	; 11
    e24c:	0e 94 22 29 	call	0x5244	; 0x5244 <chip_select_init>
    e250:	ef cf       	rjmp	.-34     	; 0xe230 <mmc_slow>
    e252:	08 95       	ret

0000e254 <mmc_fast>:
    e254:	80 ea       	ldi	r24, 0xA0	; 160
    e256:	95 e2       	ldi	r25, 0x25	; 37
    e258:	a6 e2       	ldi	r26, 0x26	; 38
    e25a:	b0 e0       	ldi	r27, 0x00	; 0
    e25c:	80 93 3c 18 	sts	0x183C, r24	; 0x80183c <_mmc_clock>
    e260:	90 93 3d 18 	sts	0x183D, r25	; 0x80183d <_mmc_clock+0x1>
    e264:	a0 93 3e 18 	sts	0x183E, r26	; 0x80183e <_mmc_clock+0x2>
    e268:	b0 93 3f 18 	sts	0x183F, r27	; 0x80183f <_mmc_clock+0x3>
    e26c:	08 95       	ret

0000e26e <mmc_spi_TX_buffer>:
    e26e:	0c 94 46 29 	jmp	0x528c	; 0x528c <spi_TX_buffer>
    e272:	08 95       	ret

0000e274 <mmc_spi_RX_buffer>:
    e274:	0c 94 48 29 	jmp	0x5290	; 0x5290 <spi_RX_buffer>
    e278:	08 95       	ret

0000e27a <mmc_spi_TXRX>:
    e27a:	0c 94 b6 29 	jmp	0x536c	; 0x536c <spi_TXRX>
    e27e:	08 95       	ret

0000e280 <mmc_set_ms_timeout>:
    e280:	f8 94       	cli
    e282:	90 93 41 18 	sts	0x1841, r25	; 0x801841 <_mmc_timeout+0x1>
    e286:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <_mmc_timeout>
    e28a:	78 94       	sei
    e28c:	08 95       	ret

0000e28e <mmc_test_timeout>:
    e28e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e292:	81 fd       	sbrc	r24, 1
    e294:	15 c0       	rjmp	.+42     	; 0xe2c0 <mmc_test_timeout+0x32>
    e296:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <_mmc_timeout>
    e29a:	90 91 41 18 	lds	r25, 0x1841	; 0x801841 <_mmc_timeout+0x1>
    e29e:	89 2b       	or	r24, r25
    e2a0:	91 f4       	brne	.+36     	; 0xe2c6 <mmc_test_timeout+0x38>
    e2a2:	8a e3       	ldi	r24, 0x3A	; 58
    e2a4:	98 e0       	ldi	r25, 0x08	; 8
    e2a6:	1f 92       	push	r1
    e2a8:	9f 93       	push	r25
    e2aa:	8f 93       	push	r24
    e2ac:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e2b0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e2b4:	83 60       	ori	r24, 0x03	; 3
    e2b6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e2ba:	0f 90       	pop	r0
    e2bc:	0f 90       	pop	r0
    e2be:	0f 90       	pop	r0
    e2c0:	81 e0       	ldi	r24, 0x01	; 1
    e2c2:	90 e0       	ldi	r25, 0x00	; 0
    e2c4:	08 95       	ret
    e2c6:	80 e0       	ldi	r24, 0x00	; 0
    e2c8:	90 e0       	ldi	r25, 0x00	; 0
    e2ca:	08 95       	ret

0000e2cc <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e2cc:	a4 e0       	ldi	r26, 0x04	; 4
    e2ce:	b0 e0       	ldi	r27, 0x00	; 0
    e2d0:	ec e6       	ldi	r30, 0x6C	; 108
    e2d2:	f1 e7       	ldi	r31, 0x71	; 113
    e2d4:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
    e2d8:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e2da:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    e2de:	b5 df       	rcall	.-150    	; 0xe24a <mmc_spi_init>
    e2e0:	e1 14       	cp	r14, r1
    e2e2:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e2e4:	51 f0       	breq	.+20     	; 0xe2fa <mmc_init+0x2e>
    e2e6:	8a e2       	ldi	r24, 0x2A	; 42
    e2e8:	98 e0       	ldi	r25, 0x08	; 8
    e2ea:	1f 92       	push	r1
    e2ec:	9f 93       	push	r25
    e2ee:	8f 93       	push	r24
    e2f0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e2f4:	0f 90       	pop	r0
    e2f6:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e2f8:	0f 90       	pop	r0
    e2fa:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <mmc_init_flag>
    e2fe:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <mmc_init_flag+0x1>
        mmc_install_timer();
    e302:	89 2b       	or	r24, r25
    e304:	09 f4       	brne	.+2      	; 0xe308 <mmc_init+0x3c>

    if( verbose)
    e306:	6c df       	rcall	.-296    	; 0xe1e0 <mmc_install_timer>
    e308:	e1 14       	cp	r14, r1
    e30a:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e30c:	b9 f0       	breq	.+46     	; 0xe33c <mmc_init+0x70>
    e30e:	8e e1       	ldi	r24, 0x1E	; 30
    e310:	98 e0       	ldi	r25, 0x08	; 8
    e312:	1f 92       	push	r1
    e314:	9f 93       	push	r25
    e316:	8f 93       	push	r24
    e318:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e31c:	81 e0       	ldi	r24, 0x01	; 1
    e31e:	8f 93       	push	r24
    e320:	85 eb       	ldi	r24, 0xB5	; 181
    e322:	8f 93       	push	r24
    e324:	8d e0       	ldi	r24, 0x0D	; 13
    e326:	98 e0       	ldi	r25, 0x08	; 8
    e328:	1f 92       	push	r1
    e32a:	9f 93       	push	r25
    e32c:	8f 93       	push	r24
    e32e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e332:	0f b6       	in	r0, 0x3f	; 63
    e334:	f8 94       	cli
    e336:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e338:	0f be       	out	0x3f, r0	; 63
    e33a:	cd bf       	out	0x3d, r28	; 61
    e33c:	80 e0       	ldi	r24, 0x00	; 0
    e33e:	9f da       	rcall	.-2754   	; 0xd87e <disk_initialize>
    e340:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e342:	10 e0       	ldi	r17, 0x00	; 0
    e344:	01 15       	cp	r16, r1
        put_rc(rc);
    e346:	11 05       	cpc	r17, r1
    e348:	19 f0       	breq	.+6      	; 0xe350 <mmc_init+0x84>
    e34a:	c8 01       	movw	r24, r16
    e34c:	e3 d0       	rcall	.+454    	; 0xe514 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e34e:	0e c0       	rjmp	.+28     	; 0xe36c <mmc_init+0xa0>
    e350:	40 e0       	ldi	r20, 0x00	; 0
    e352:	6a e3       	ldi	r22, 0x3A	; 58
    e354:	78 e0       	ldi	r23, 0x08	; 8
    e356:	8e e8       	ldi	r24, 0x8E	; 142
    e358:	9a e1       	ldi	r25, 0x1A	; 26
    e35a:	0e 94 d6 5b 	call	0xb7ac	; 0xb7ac <f_mount>

    if( rc != RES_OK || verbose)
    e35e:	8c 01       	movw	r16, r24
    e360:	89 2b       	or	r24, r25
    e362:	21 f4       	brne	.+8      	; 0xe36c <mmc_init+0xa0>
    e364:	e1 14       	cp	r14, r1
    e366:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e368:	09 f4       	brne	.+2      	; 0xe36c <mmc_init+0xa0>
    e36a:	43 c0       	rjmp	.+134    	; 0xe3f2 <mmc_init+0x126>
    e36c:	c8 01       	movw	r24, r16

    if (verbose )
    e36e:	d2 d0       	rcall	.+420    	; 0xe514 <put_rc>
    e370:	e1 14       	cp	r14, r1
    e372:	f1 04       	cpc	r15, r1
    e374:	09 f4       	brne	.+2      	; 0xe378 <mmc_init+0xac>
    {
        DWORD blksize = 0;
    e376:	3d c0       	rjmp	.+122    	; 0xe3f2 <mmc_init+0x126>
    e378:	19 82       	std	Y+1, r1	; 0x01
    e37a:	1a 82       	std	Y+2, r1	; 0x02
    e37c:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e37e:	1c 82       	std	Y+4, r1	; 0x04
    e380:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e382:	11 05       	cpc	r17, r1
    e384:	61 f5       	brne	.+88     	; 0xe3de <mmc_init+0x112>
    e386:	ae 01       	movw	r20, r28
    e388:	4f 5f       	subi	r20, 0xFF	; 255
    e38a:	5f 4f       	sbci	r21, 0xFF	; 255
    e38c:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e38e:	80 e0       	ldi	r24, 0x00	; 0
    e390:	9c da       	rcall	.-2760   	; 0xd8ca <disk_ioctl>
            {
                put_rc( rc );
    e392:	8c 01       	movw	r16, r24
    e394:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e396:	61 f0       	breq	.+24     	; 0xe3b0 <mmc_init+0xe4>
    e398:	bd d0       	rcall	.+378    	; 0xe514 <put_rc>
    e39a:	8f ee       	ldi	r24, 0xEF	; 239
    e39c:	97 e0       	ldi	r25, 0x07	; 7
    e39e:	1f 92       	push	r1
    e3a0:	9f 93       	push	r25
    e3a2:	8f 93       	push	r24
    e3a4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e3a8:	0f 90       	pop	r0
    e3aa:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e3ac:	0f 90       	pop	r0
    e3ae:	17 c0       	rjmp	.+46     	; 0xe3de <mmc_init+0x112>
    e3b0:	8c 81       	ldd	r24, Y+4	; 0x04
    e3b2:	8f 93       	push	r24
    e3b4:	8b 81       	ldd	r24, Y+3	; 0x03
    e3b6:	8f 93       	push	r24
    e3b8:	8a 81       	ldd	r24, Y+2	; 0x02
    e3ba:	8f 93       	push	r24
    e3bc:	89 81       	ldd	r24, Y+1	; 0x01
    e3be:	8f 93       	push	r24
    e3c0:	8a ed       	ldi	r24, 0xDA	; 218
    e3c2:	97 e0       	ldi	r25, 0x07	; 7
    e3c4:	1f 92       	push	r1
    e3c6:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e3c8:	8f 93       	push	r24
    e3ca:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e3ce:	8a e3       	ldi	r24, 0x3A	; 58
    e3d0:	98 e0       	ldi	r25, 0x08	; 8
    e3d2:	2e d1       	rcall	.+604    	; 0xe630 <fatfs_status>
    e3d4:	0f b6       	in	r0, 0x3f	; 63
    e3d6:	f8 94       	cli
    e3d8:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e3da:	0f be       	out	0x3f, r0	; 63
    e3dc:	cd bf       	out	0x3d, r28	; 61
    e3de:	8c ec       	ldi	r24, 0xCC	; 204
    e3e0:	97 e0       	ldi	r25, 0x07	; 7
    e3e2:	1f 92       	push	r1
    e3e4:	9f 93       	push	r25
    e3e6:	8f 93       	push	r24
    e3e8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e3ec:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e3ee:	0f 90       	pop	r0
    e3f0:	0f 90       	pop	r0
    e3f2:	81 e0       	ldi	r24, 0x01	; 1
    e3f4:	90 e0       	ldi	r25, 0x00	; 0
    e3f6:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e3fa:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <mmc_init_flag>
    e3fe:	c8 01       	movw	r24, r16
    e400:	24 96       	adiw	r28, 0x04	; 4
    e402:	e6 e0       	ldi	r30, 0x06	; 6
    e404:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

0000e408 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e408:	08 95       	ret

0000e40a <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e40a:	81 e0       	ldi	r24, 0x01	; 1
    e40c:	90 e0       	ldi	r25, 0x00	; 0
    e40e:	08 95       	ret

0000e410 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e410:	80 e0       	ldi	r24, 0x00	; 0
    e412:	90 e0       	ldi	r25, 0x00	; 0
    e414:	08 95       	ret

0000e416 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e416:	0f 93       	push	r16
    e418:	1f 93       	push	r17
    e41a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e41c:	46 81       	ldd	r20, Z+6	; 0x06
    e41e:	57 81       	ldd	r21, Z+7	; 0x07
    e420:	05 2e       	mov	r0, r21
    e422:	00 0c       	add	r0, r0
    e424:	66 0b       	sbc	r22, r22
    e426:	77 0b       	sbc	r23, r23
    e428:	ba 01       	movw	r22, r20
    e42a:	55 27       	eor	r21, r21
    e42c:	44 27       	eor	r20, r20
    e42e:	84 81       	ldd	r24, Z+4	; 0x04
    e430:	95 81       	ldd	r25, Z+5	; 0x05
    e432:	09 2e       	mov	r0, r25
    e434:	00 0c       	add	r0, r0
    e436:	aa 0b       	sbc	r26, r26
    e438:	bb 0b       	sbc	r27, r27
    e43a:	2b e0       	ldi	r18, 0x0B	; 11
    e43c:	88 0f       	add	r24, r24
    e43e:	99 1f       	adc	r25, r25
    e440:	aa 1f       	adc	r26, r26
    e442:	bb 1f       	adc	r27, r27
    e444:	2a 95       	dec	r18
    e446:	d1 f7       	brne	.-12     	; 0xe43c <tm_to_fat+0x26>
    e448:	48 2b       	or	r20, r24
    e44a:	59 2b       	or	r21, r25
    e44c:	6a 2b       	or	r22, r26
    e44e:	7b 2b       	or	r23, r27
    e450:	82 81       	ldd	r24, Z+2	; 0x02
    e452:	93 81       	ldd	r25, Z+3	; 0x03
    e454:	09 2e       	mov	r0, r25
    e456:	00 0c       	add	r0, r0
    e458:	aa 0b       	sbc	r26, r26
    e45a:	bb 0b       	sbc	r27, r27
    e45c:	35 e0       	ldi	r19, 0x05	; 5
    e45e:	88 0f       	add	r24, r24
    e460:	99 1f       	adc	r25, r25
    e462:	aa 1f       	adc	r26, r26
    e464:	bb 1f       	adc	r27, r27
    e466:	3a 95       	dec	r19
    e468:	d1 f7       	brne	.-12     	; 0xe45e <tm_to_fat+0x48>
    e46a:	48 2b       	or	r20, r24
    e46c:	59 2b       	or	r21, r25
    e46e:	6a 2b       	or	r22, r26
    e470:	7b 2b       	or	r23, r27
    e472:	80 81       	ld	r24, Z
    e474:	91 81       	ldd	r25, Z+1	; 0x01
    e476:	09 2e       	mov	r0, r25
    e478:	00 0c       	add	r0, r0
    e47a:	aa 0b       	sbc	r26, r26
    e47c:	bb 0b       	sbc	r27, r27
    e47e:	b6 95       	lsr	r27
    e480:	a7 95       	ror	r26
    e482:	97 95       	ror	r25
    e484:	87 95       	ror	r24
    e486:	84 2b       	or	r24, r20
    e488:	95 2b       	or	r25, r21
    e48a:	a6 2b       	or	r26, r22
    e48c:	b7 2b       	or	r27, r23
    e48e:	02 85       	ldd	r16, Z+10	; 0x0a
    e490:	13 85       	ldd	r17, Z+11	; 0x0b
    e492:	00 55       	subi	r16, 0x50	; 80
    e494:	11 09       	sbc	r17, r1
    e496:	01 2e       	mov	r0, r17
    e498:	00 0c       	add	r0, r0
    e49a:	22 0b       	sbc	r18, r18
    e49c:	33 0b       	sbc	r19, r19
    e49e:	49 e1       	ldi	r20, 0x19	; 25
    e4a0:	00 0f       	add	r16, r16
    e4a2:	11 1f       	adc	r17, r17
    e4a4:	22 1f       	adc	r18, r18
    e4a6:	33 1f       	adc	r19, r19
    e4a8:	4a 95       	dec	r20
    e4aa:	d1 f7       	brne	.-12     	; 0xe4a0 <tm_to_fat+0x8a>
    e4ac:	ac 01       	movw	r20, r24
    e4ae:	bd 01       	movw	r22, r26
    e4b0:	40 2b       	or	r20, r16
    e4b2:	51 2b       	or	r21, r17
    e4b4:	62 2b       	or	r22, r18
    e4b6:	73 2b       	or	r23, r19
    e4b8:	80 85       	ldd	r24, Z+8	; 0x08
    e4ba:	91 85       	ldd	r25, Z+9	; 0x09
    e4bc:	09 2e       	mov	r0, r25
    e4be:	00 0c       	add	r0, r0
    e4c0:	aa 0b       	sbc	r26, r26
    e4c2:	bb 0b       	sbc	r27, r27
    e4c4:	01 96       	adiw	r24, 0x01	; 1
    e4c6:	a1 1d       	adc	r26, r1
    e4c8:	b1 1d       	adc	r27, r1
    e4ca:	e5 e1       	ldi	r30, 0x15	; 21
    e4cc:	88 0f       	add	r24, r24
    e4ce:	99 1f       	adc	r25, r25
    e4d0:	aa 1f       	adc	r26, r26
    e4d2:	bb 1f       	adc	r27, r27
    e4d4:	ea 95       	dec	r30
    e4d6:	d1 f7       	brne	.-12     	; 0xe4cc <tm_to_fat+0xb6>
    e4d8:	8a 01       	movw	r16, r20
    e4da:	9b 01       	movw	r18, r22
    e4dc:	08 2b       	or	r16, r24
    e4de:	19 2b       	or	r17, r25
    e4e0:	2a 2b       	or	r18, r26
    e4e2:	3b 2b       	or	r19, r27
    e4e4:	c9 01       	movw	r24, r18
    e4e6:	b8 01       	movw	r22, r16
}
    e4e8:	1f 91       	pop	r17
    e4ea:	0f 91       	pop	r16
    e4ec:	08 95       	ret

0000e4ee <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e4ee:	a4 e0       	ldi	r26, 0x04	; 4
    e4f0:	b0 e0       	ldi	r27, 0x00	; 0
    e4f2:	ed e7       	ldi	r30, 0x7D	; 125
    e4f4:	f2 e7       	ldi	r31, 0x72	; 114
    e4f6:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e4fa:	ce 01       	movw	r24, r28
    e4fc:	01 96       	adiw	r24, 0x01	; 1
    e4fe:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <time>
    return( tm_to_fat(localtime(&t)));
    e502:	ce 01       	movw	r24, r28
    e504:	01 96       	adiw	r24, 0x01	; 1
    e506:	0e 94 75 3a 	call	0x74ea	; 0x74ea <localtime>
    e50a:	85 df       	rcall	.-246    	; 0xe416 <tm_to_fat>
}
    e50c:	24 96       	adiw	r28, 0x04	; 4
    e50e:	e2 e0       	ldi	r30, 0x02	; 2
    e510:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000e514 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e514:	9f 93       	push	r25
    e516:	8f 93       	push	r24
    e518:	87 e5       	ldi	r24, 0x57	; 87
    e51a:	9a e0       	ldi	r25, 0x0A	; 10
    e51c:	1f 92       	push	r1
    e51e:	9f 93       	push	r25
    e520:	8f 93       	push	r24
    e522:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
}
    e526:	0f 90       	pop	r0
    e528:	0f 90       	pop	r0
    e52a:	0f 90       	pop	r0
    e52c:	0f 90       	pop	r0
    e52e:	0f 90       	pop	r0
    e530:	08 95       	ret

0000e532 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e532:	a4 e4       	ldi	r26, 0x44	; 68
    e534:	b1 e0       	ldi	r27, 0x01	; 1
    e536:	ef e9       	ldi	r30, 0x9F	; 159
    e538:	f2 e7       	ldi	r31, 0x72	; 114
    e53a:	0c 94 34 e4 	jmp	0x1c868	; 0x1c868 <__prologue_saves__+0x16>
    e53e:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e540:	bc 01       	movw	r22, r24
    e542:	ce 01       	movw	r24, r28
    e544:	89 5e       	subi	r24, 0xE9	; 233
    e546:	9e 4f       	sbci	r25, 0xFE	; 254
    e548:	0e 94 b4 65 	call	0xcb68	; 0xcb68 <f_opendir>
    if (fr == FR_OK) {
    e54c:	00 97       	sbiw	r24, 0x00	; 0
    e54e:	09 f0       	breq	.+2      	; 0xe552 <fatfs_scan_files+0x20>
    e550:	5b c0       	rjmp	.+182    	; 0xe608 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e552:	8f e2       	ldi	r24, 0x2F	; 47
    e554:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e556:	be 01       	movw	r22, r28
    e558:	6f 5f       	subi	r22, 0xFF	; 255
    e55a:	7f 4f       	sbci	r23, 0xFF	; 255
    e55c:	ce 01       	movw	r24, r28
    e55e:	89 5e       	subi	r24, 0xE9	; 233
    e560:	9e 4f       	sbci	r25, 0xFE	; 254
    e562:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <f_readdir>
    e566:	00 97       	sbiw	r24, 0x00	; 0
    e568:	09 f0       	breq	.+2      	; 0xe56c <fatfs_scan_files+0x3a>
    e56a:	4e c0       	rjmp	.+156    	; 0xe608 <fatfs_scan_files+0xd6>
    e56c:	2f 89       	ldd	r18, Y+23	; 0x17
    e56e:	22 23       	and	r18, r18
    e570:	09 f4       	brne	.+2      	; 0xe574 <fatfs_scan_files+0x42>
    e572:	4a c0       	rjmp	.+148    	; 0xe608 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e574:	89 85       	ldd	r24, Y+9	; 0x09
    e576:	84 ff       	sbrs	r24, 4
    e578:	25 c0       	rjmp	.+74     	; 0xe5c4 <fatfs_scan_files+0x92>
                AccDirs++;
    e57a:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccDirs>
    e57e:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccDirs+0x1>
    e582:	01 96       	adiw	r24, 0x01	; 1
    e584:	90 93 c8 1c 	sts	0x1CC8, r25	; 0x801cc8 <AccDirs+0x1>
    e588:	80 93 c7 1c 	sts	0x1CC7, r24	; 0x801cc7 <AccDirs>
                i = strlen(path);
    e58c:	f8 01       	movw	r30, r16
    e58e:	01 90       	ld	r0, Z+
    e590:	00 20       	and	r0, r0
    e592:	e9 f7       	brne	.-6      	; 0xe58e <fatfs_scan_files+0x5c>
    e594:	31 97       	sbiw	r30, 0x01	; 1
    e596:	e0 1b       	sub	r30, r16
    e598:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e59a:	78 01       	movw	r14, r16
    e59c:	ee 0e       	add	r14, r30
    e59e:	ff 1e       	adc	r15, r31
    e5a0:	d7 01       	movw	r26, r14
    e5a2:	dc 92       	st	X, r13
    e5a4:	cf 01       	movw	r24, r30
    e5a6:	01 96       	adiw	r24, 0x01	; 1
    e5a8:	be 01       	movw	r22, r28
    e5aa:	69 5e       	subi	r22, 0xE9	; 233
    e5ac:	7f 4f       	sbci	r23, 0xFF	; 255
    e5ae:	80 0f       	add	r24, r16
    e5b0:	91 1f       	adc	r25, r17
    e5b2:	0e 94 3f 33 	call	0x667e	; 0x667e <strcpy>
                fr = fatfs_scan_files(path);
    e5b6:	c8 01       	movw	r24, r16
    e5b8:	bc df       	rcall	.-136    	; 0xe532 <fatfs_scan_files>
                path[i] = 0;
    e5ba:	f7 01       	movw	r30, r14
    e5bc:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e5be:	00 97       	sbiw	r24, 0x00	; 0
    e5c0:	51 f2       	breq	.-108    	; 0xe556 <fatfs_scan_files+0x24>
    e5c2:	22 c0       	rjmp	.+68     	; 0xe608 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e5c4:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <AccFiles>
    e5c8:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <AccFiles+0x1>
    e5cc:	01 96       	adiw	r24, 0x01	; 1
    e5ce:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <AccFiles+0x1>
    e5d2:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <AccFiles>
                AccSize += info.fsize;
    e5d6:	40 91 c3 1c 	lds	r20, 0x1CC3	; 0x801cc3 <AccSize>
    e5da:	50 91 c4 1c 	lds	r21, 0x1CC4	; 0x801cc4 <AccSize+0x1>
    e5de:	60 91 c5 1c 	lds	r22, 0x1CC5	; 0x801cc5 <AccSize+0x2>
    e5e2:	70 91 c6 1c 	lds	r23, 0x1CC6	; 0x801cc6 <AccSize+0x3>
    e5e6:	89 81       	ldd	r24, Y+1	; 0x01
    e5e8:	9a 81       	ldd	r25, Y+2	; 0x02
    e5ea:	ab 81       	ldd	r26, Y+3	; 0x03
    e5ec:	bc 81       	ldd	r27, Y+4	; 0x04
    e5ee:	84 0f       	add	r24, r20
    e5f0:	95 1f       	adc	r25, r21
    e5f2:	a6 1f       	adc	r26, r22
    e5f4:	b7 1f       	adc	r27, r23
    e5f6:	80 93 c3 1c 	sts	0x1CC3, r24	; 0x801cc3 <AccSize>
    e5fa:	90 93 c4 1c 	sts	0x1CC4, r25	; 0x801cc4 <AccSize+0x1>
    e5fe:	a0 93 c5 1c 	sts	0x1CC5, r26	; 0x801cc5 <AccSize+0x2>
    e602:	b0 93 c6 1c 	sts	0x1CC6, r27	; 0x801cc6 <AccSize+0x3>
    e606:	a7 cf       	rjmp	.-178    	; 0xe556 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e608:	cc 5b       	subi	r28, 0xBC	; 188
    e60a:	de 4f       	sbci	r29, 0xFE	; 254
    e60c:	e7 e0       	ldi	r30, 0x07	; 7
    e60e:	0c 94 50 e4 	jmp	0x1c8a0	; 0x1c8a0 <__epilogue_restores__+0x16>

0000e612 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e612:	01 97       	sbiw	r24, 0x01	; 1
    e614:	84 30       	cpi	r24, 0x04	; 4
    e616:	91 05       	cpc	r25, r1
    e618:	40 f4       	brcc	.+16     	; 0xe62a <fatfs_fstype+0x18>
    e61a:	88 0f       	add	r24, r24
    e61c:	99 1f       	adc	r25, r25
    e61e:	fc 01       	movw	r30, r24
    e620:	e6 5f       	subi	r30, 0xF6	; 246
    e622:	f8 4f       	sbci	r31, 0xF8	; 248
    e624:	80 81       	ld	r24, Z
    e626:	91 81       	ldd	r25, Z+1	; 0x01
    e628:	08 95       	ret
    char *ptr;
    switch(type)
    e62a:	8c e3       	ldi	r24, 0x3C	; 60
    e62c:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e62e:	08 95       	ret

0000e630 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e630:	a4 e2       	ldi	r26, 0x24	; 36
    e632:	b0 e0       	ldi	r27, 0x00	; 0
    e634:	ee e1       	ldi	r30, 0x1E	; 30
    e636:	f3 e7       	ldi	r31, 0x73	; 115
    e638:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    e63c:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e63e:	fc 01       	movw	r30, r24
    e640:	21 91       	ld	r18, Z+
    e642:	cf 01       	movw	r24, r30
    e644:	20 32       	cpi	r18, 0x20	; 32
    e646:	d1 f3       	breq	.-12     	; 0xe63c <fatfs_status+0xc>
    e648:	29 30       	cpi	r18, 0x09	; 9
    e64a:	c1 f3       	breq	.-16     	; 0xe63c <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e64c:	1f 93       	push	r17
    e64e:	0f 93       	push	r16
    e650:	86 e4       	ldi	r24, 0x46	; 70
    e652:	9a e0       	ldi	r25, 0x0A	; 10
    e654:	1f 92       	push	r1
    e656:	9f 93       	push	r25
    e658:	8f 93       	push	r24
    e65a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e65e:	ae 01       	movw	r20, r28
    e660:	4d 5d       	subi	r20, 0xDD	; 221
    e662:	5f 4f       	sbci	r21, 0xFF	; 255
    e664:	be 01       	movw	r22, r28
    e666:	61 5e       	subi	r22, 0xE1	; 225
    e668:	7f 4f       	sbci	r23, 0xFF	; 255
    e66a:	c8 01       	movw	r24, r16
    e66c:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <f_getfree>
    if (res)
    e670:	0f 90       	pop	r0
    e672:	0f 90       	pop	r0
    e674:	0f 90       	pop	r0
    e676:	0f 90       	pop	r0
    e678:	0f 90       	pop	r0
    e67a:	00 97       	sbiw	r24, 0x00	; 0
    e67c:	09 f0       	breq	.+2      	; 0xe680 <fatfs_status+0x50>
    e67e:	e8 c0       	rjmp	.+464    	; 0xe850 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e680:	eb a1       	ldd	r30, Y+35	; 0x23
    e682:	fc a1       	ldd	r31, Y+36	; 0x24
    e684:	80 81       	ld	r24, Z
    e686:	90 e0       	ldi	r25, 0x00	; 0
    e688:	c4 df       	rcall	.-120    	; 0xe612 <fatfs_fstype>
    e68a:	9f 93       	push	r25
    e68c:	8f 93       	push	r24
    e68e:	88 e2       	ldi	r24, 0x28	; 40
    e690:	9a e0       	ldi	r25, 0x0A	; 10
    e692:	1f 92       	push	r1
    e694:	9f 93       	push	r25
    e696:	8f 93       	push	r24
    e698:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e69c:	eb a1       	ldd	r30, Y+35	; 0x23
    e69e:	fc a1       	ldd	r31, Y+36	; 0x24
    e6a0:	81 85       	ldd	r24, Z+9	; 0x09
    e6a2:	92 85       	ldd	r25, Z+10	; 0x0a
    e6a4:	a0 e0       	ldi	r26, 0x00	; 0
    e6a6:	b0 e0       	ldi	r27, 0x00	; 0
    e6a8:	49 e0       	ldi	r20, 0x09	; 9
    e6aa:	88 0f       	add	r24, r24
    e6ac:	99 1f       	adc	r25, r25
    e6ae:	aa 1f       	adc	r26, r26
    e6b0:	bb 1f       	adc	r27, r27
    e6b2:	4a 95       	dec	r20
    e6b4:	d1 f7       	brne	.-12     	; 0xe6aa <fatfs_status+0x7a>
    e6b6:	bf 93       	push	r27
    e6b8:	af 93       	push	r26
    e6ba:	9f 93       	push	r25
    e6bc:	8f 93       	push	r24
    e6be:	89 e0       	ldi	r24, 0x09	; 9
    e6c0:	9a e0       	ldi	r25, 0x0A	; 10
    e6c2:	1f 92       	push	r1
    e6c4:	9f 93       	push	r25
    e6c6:	8f 93       	push	r24
    e6c8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e6cc:	eb a1       	ldd	r30, Y+35	; 0x23
    e6ce:	fc a1       	ldd	r31, Y+36	; 0x24
    e6d0:	82 81       	ldd	r24, Z+2	; 0x02
    e6d2:	1f 92       	push	r1
    e6d4:	8f 93       	push	r24
    e6d6:	8b ee       	ldi	r24, 0xEB	; 235
    e6d8:	99 e0       	ldi	r25, 0x09	; 9
    e6da:	1f 92       	push	r1
    e6dc:	9f 93       	push	r25
    e6de:	8f 93       	push	r24
    e6e0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e6e4:	eb a1       	ldd	r30, Y+35	; 0x23
    e6e6:	fc a1       	ldd	r31, Y+36	; 0x24
    e6e8:	80 85       	ldd	r24, Z+8	; 0x08
    e6ea:	8f 93       	push	r24
    e6ec:	87 81       	ldd	r24, Z+7	; 0x07
    e6ee:	8f 93       	push	r24
    e6f0:	8d ec       	ldi	r24, 0xCD	; 205
    e6f2:	99 e0       	ldi	r25, 0x09	; 9
    e6f4:	1f 92       	push	r1
    e6f6:	9f 93       	push	r25
    e6f8:	8f 93       	push	r24
    e6fa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e6fe:	eb a1       	ldd	r30, Y+35	; 0x23
    e700:	fc a1       	ldd	r31, Y+36	; 0x24
    e702:	80 a1       	ldd	r24, Z+32	; 0x20
    e704:	8f 93       	push	r24
    e706:	87 8d       	ldd	r24, Z+31	; 0x1f
    e708:	8f 93       	push	r24
    e70a:	86 8d       	ldd	r24, Z+30	; 0x1e
    e70c:	8f 93       	push	r24
    e70e:	85 8d       	ldd	r24, Z+29	; 0x1d
    e710:	8f 93       	push	r24
    e712:	8e ea       	ldi	r24, 0xAE	; 174
    e714:	99 e0       	ldi	r25, 0x09	; 9
    e716:	1f 92       	push	r1
    e718:	9f 93       	push	r25
    e71a:	8f 93       	push	r24
    e71c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e720:	eb a1       	ldd	r30, Y+35	; 0x23
    e722:	fc a1       	ldd	r31, Y+36	; 0x24
    e724:	81 8d       	ldd	r24, Z+25	; 0x19
    e726:	92 8d       	ldd	r25, Z+26	; 0x1a
    e728:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e72a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e72c:	02 97       	sbiw	r24, 0x02	; 2
    e72e:	a1 09       	sbc	r26, r1
    e730:	b1 09       	sbc	r27, r1
    e732:	bf 93       	push	r27
    e734:	af 93       	push	r26
    e736:	9f 93       	push	r25
    e738:	8f 93       	push	r24
    e73a:	8f e8       	ldi	r24, 0x8F	; 143
    e73c:	99 e0       	ldi	r25, 0x09	; 9
    e73e:	1f 92       	push	r1
    e740:	9f 93       	push	r25
    e742:	8f 93       	push	r24
    e744:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e748:	0f b6       	in	r0, 0x3f	; 63
    e74a:	f8 94       	cli
    e74c:	de bf       	out	0x3e, r29	; 62
    e74e:	0f be       	out	0x3f, r0	; 63
    e750:	cd bf       	out	0x3d, r28	; 61
    e752:	eb a1       	ldd	r30, Y+35	; 0x23
    e754:	fc a1       	ldd	r31, Y+36	; 0x24
    e756:	80 a5       	ldd	r24, Z+40	; 0x28
    e758:	8f 93       	push	r24
    e75a:	87 a1       	ldd	r24, Z+39	; 0x27
    e75c:	8f 93       	push	r24
    e75e:	86 a1       	ldd	r24, Z+38	; 0x26
    e760:	8f 93       	push	r24
    e762:	85 a1       	ldd	r24, Z+37	; 0x25
    e764:	8f 93       	push	r24
    e766:	80 e7       	ldi	r24, 0x70	; 112
    e768:	99 e0       	ldi	r25, 0x09	; 9
    e76a:	1f 92       	push	r1
    e76c:	9f 93       	push	r25
    e76e:	8f 93       	push	r24
    e770:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e774:	eb a1       	ldd	r30, Y+35	; 0x23
    e776:	fc a1       	ldd	r31, Y+36	; 0x24
    e778:	84 a5       	ldd	r24, Z+44	; 0x2c
    e77a:	8f 93       	push	r24
    e77c:	83 a5       	ldd	r24, Z+43	; 0x2b
    e77e:	8f 93       	push	r24
    e780:	82 a5       	ldd	r24, Z+42	; 0x2a
    e782:	8f 93       	push	r24
    e784:	81 a5       	ldd	r24, Z+41	; 0x29
    e786:	8f 93       	push	r24
    e788:	81 e5       	ldi	r24, 0x51	; 81
    e78a:	99 e0       	ldi	r25, 0x09	; 9
    e78c:	1f 92       	push	r1
    e78e:	9f 93       	push	r25
    e790:	8f 93       	push	r24
    e792:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e796:	eb a1       	ldd	r30, Y+35	; 0x23
    e798:	fc a1       	ldd	r31, Y+36	; 0x24
    e79a:	80 a9       	ldd	r24, Z+48	; 0x30
    e79c:	8f 93       	push	r24
    e79e:	87 a5       	ldd	r24, Z+47	; 0x2f
    e7a0:	8f 93       	push	r24
    e7a2:	86 a5       	ldd	r24, Z+46	; 0x2e
    e7a4:	8f 93       	push	r24
    e7a6:	85 a5       	ldd	r24, Z+45	; 0x2d
    e7a8:	8f 93       	push	r24
    e7aa:	82 e3       	ldi	r24, 0x32	; 50
    e7ac:	99 e0       	ldi	r25, 0x09	; 9
    e7ae:	1f 92       	push	r1
    e7b0:	9f 93       	push	r25
    e7b2:	8f 93       	push	r24
    e7b4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e7b8:	ae 01       	movw	r20, r28
    e7ba:	45 5e       	subi	r20, 0xE5	; 229
    e7bc:	5f 4f       	sbci	r21, 0xFF	; 255
    e7be:	be 01       	movw	r22, r28
    e7c0:	6f 5f       	subi	r22, 0xFF	; 255
    e7c2:	7f 4f       	sbci	r23, 0xFF	; 255
    e7c4:	c8 01       	movw	r24, r16
    e7c6:	0e 94 ed 6a 	call	0xd5da	; 0xd5da <f_getlabel>
    if (res)
    e7ca:	0f b6       	in	r0, 0x3f	; 63
    e7cc:	f8 94       	cli
    e7ce:	de bf       	out	0x3e, r29	; 62
    e7d0:	0f be       	out	0x3f, r0	; 63
    e7d2:	cd bf       	out	0x3d, r28	; 61
    e7d4:	00 97       	sbiw	r24, 0x00	; 0
    e7d6:	e1 f5       	brne	.+120    	; 0xe850 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e7d8:	89 81       	ldd	r24, Y+1	; 0x01
    e7da:	81 11       	cpse	r24, r1
    e7dc:	03 c0       	rjmp	.+6      	; 0xe7e4 <fatfs_status+0x1b4>
    e7de:	84 e4       	ldi	r24, 0x44	; 68
    e7e0:	98 e0       	ldi	r25, 0x08	; 8
    e7e2:	02 c0       	rjmp	.+4      	; 0xe7e8 <fatfs_status+0x1b8>
    e7e4:	ce 01       	movw	r24, r28
    e7e6:	01 96       	adiw	r24, 0x01	; 1
    e7e8:	9f 93       	push	r25
    e7ea:	8f 93       	push	r24
    e7ec:	84 e1       	ldi	r24, 0x14	; 20
    e7ee:	99 e0       	ldi	r25, 0x09	; 9
    e7f0:	1f 92       	push	r1
    e7f2:	9f 93       	push	r25
    e7f4:	8f 93       	push	r24
    e7f6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e7fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e7fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e7fe:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e800:	be 8d       	ldd	r27, Y+30	; 0x1e
    e802:	9f 93       	push	r25
    e804:	8f 93       	push	r24
    e806:	cd 01       	movw	r24, r26
    e808:	aa 27       	eor	r26, r26
    e80a:	bb 27       	eor	r27, r27
    e80c:	9f 93       	push	r25
    e80e:	8f 93       	push	r24
    e810:	8f ee       	ldi	r24, 0xEF	; 239
    e812:	98 e0       	ldi	r25, 0x08	; 8
    e814:	1f 92       	push	r1
    e816:	9f 93       	push	r25
    e818:	8f 93       	push	r24
    e81a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e81e:	10 92 c8 1c 	sts	0x1CC8, r1	; 0x801cc8 <AccDirs+0x1>
    e822:	10 92 c7 1c 	sts	0x1CC7, r1	; 0x801cc7 <AccDirs>
    e826:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <AccFiles+0x1>
    e82a:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <AccFiles>
    e82e:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccSize>
    e832:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccSize+0x1>
    e836:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <AccSize+0x2>
    e83a:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e83e:	c8 01       	movw	r24, r16
    if (res)
    e840:	78 de       	rcall	.-784    	; 0xe532 <fatfs_scan_files>
    e842:	0f b6       	in	r0, 0x3f	; 63
    e844:	f8 94       	cli
    e846:	de bf       	out	0x3e, r29	; 62
    e848:	0f be       	out	0x3f, r0	; 63
    e84a:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e84c:	00 97       	sbiw	r24, 0x00	; 0
    e84e:	11 f0       	breq	.+4      	; 0xe854 <fatfs_status+0x224>
        return;
    e850:	61 de       	rcall	.-830    	; 0xe514 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e852:	56 c0       	rjmp	.+172    	; 0xe900 <fatfs_status+0x2d0>
    e854:	0b a1       	ldd	r16, Y+35	; 0x23
    e856:	1c a1       	ldd	r17, Y+36	; 0x24
    e858:	f8 01       	movw	r30, r16
    e85a:	c1 84       	ldd	r12, Z+9	; 0x09
    e85c:	d2 84       	ldd	r13, Z+10	; 0x0a
    e85e:	e1 2c       	mov	r14, r1
    e860:	f1 2c       	mov	r15, r1
    e862:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e864:	78 a1       	ldd	r23, Y+32	; 0x20
    e866:	89 a1       	ldd	r24, Y+33	; 0x21
    e868:	9a a1       	ldd	r25, Y+34	; 0x22
    e86a:	a7 01       	movw	r20, r14
    e86c:	96 01       	movw	r18, r12
    e86e:	0e 94 65 e3 	call	0x1c6ca	; 0x1c6ca <__mulsi3>
    e872:	22 e0       	ldi	r18, 0x02	; 2
    e874:	30 e0       	ldi	r19, 0x00	; 0
    e876:	40 e0       	ldi	r20, 0x00	; 0
    e878:	50 e0       	ldi	r21, 0x00	; 0
    e87a:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
    e87e:	5f 93       	push	r21
    e880:	4f 93       	push	r20
    e882:	3f 93       	push	r19
    e884:	2f 93       	push	r18
    e886:	f8 01       	movw	r30, r16
    e888:	81 8d       	ldd	r24, Z+25	; 0x19
    e88a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e88c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e88e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e890:	9c 01       	movw	r18, r24
    e892:	ad 01       	movw	r20, r26
    e894:	22 50       	subi	r18, 0x02	; 2
    e896:	31 09       	sbc	r19, r1
    e898:	41 09       	sbc	r20, r1
    e89a:	51 09       	sbc	r21, r1
    e89c:	c7 01       	movw	r24, r14
    e89e:	b6 01       	movw	r22, r12
    e8a0:	0e 94 65 e3 	call	0x1c6ca	; 0x1c6ca <__mulsi3>
    e8a4:	dc 01       	movw	r26, r24
    e8a6:	cb 01       	movw	r24, r22
    e8a8:	b6 95       	lsr	r27
    e8aa:	a7 95       	ror	r26
    e8ac:	97 95       	ror	r25
    e8ae:	87 95       	ror	r24
    e8b0:	bf 93       	push	r27
    e8b2:	af 93       	push	r26
    e8b4:	9f 93       	push	r25
    e8b6:	8f 93       	push	r24
    e8b8:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <AccDirs+0x1>
    e8bc:	8f 93       	push	r24
    e8be:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccDirs>
    e8c2:	8f 93       	push	r24
    e8c4:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <AccSize+0x3>
    e8c8:	8f 93       	push	r24
    e8ca:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccSize+0x2>
    e8ce:	8f 93       	push	r24
    e8d0:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <AccSize+0x1>
    e8d4:	8f 93       	push	r24
    e8d6:	80 91 c3 1c 	lds	r24, 0x1CC3	; 0x801cc3 <AccSize>
    e8da:	8f 93       	push	r24
    e8dc:	80 91 ca 1c 	lds	r24, 0x1CCA	; 0x801cca <AccFiles+0x1>
    e8e0:	8f 93       	push	r24
    e8e2:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <AccFiles>
    e8e6:	8f 93       	push	r24
    e8e8:	82 ea       	ldi	r24, 0xA2	; 162
    e8ea:	98 e0       	ldi	r25, 0x08	; 8
    e8ec:	1f 92       	push	r1
    e8ee:	9f 93       	push	r25
    e8f0:	8f 93       	push	r24
    e8f2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    e8f6:	0f b6       	in	r0, 0x3f	; 63
    e8f8:	f8 94       	cli
    e8fa:	de bf       	out	0x3e, r29	; 62
    e8fc:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e8fe:	cd bf       	out	0x3d, r28	; 61
    e900:	a4 96       	adiw	r28, 0x24	; 36
    e902:	e8 e0       	ldi	r30, 0x08	; 8
    e904:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000e908 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e908:	a6 e0       	ldi	r26, 0x06	; 6
    e90a:	b0 e0       	ldi	r27, 0x00	; 0
    e90c:	ea e8       	ldi	r30, 0x8A	; 138
    e90e:	f4 e7       	ldi	r31, 0x74	; 116
    e910:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    e914:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e916:	86 89       	ldd	r24, Z+22	; 0x16
    e918:	81 11       	cpse	r24, r1
    e91a:	0b c0       	rjmp	.+22     	; 0xe932 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    e91c:	87 e8       	ldi	r24, 0x87	; 135
    e91e:	98 e0       	ldi	r25, 0x08	; 8
    e920:	1f 92       	push	r1
    e922:	9f 93       	push	r25
    e924:	8f 93       	push	r24
    e926:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return;
    e92a:	0f 90       	pop	r0
    e92c:	0f 90       	pop	r0
    e92e:	0f 90       	pop	r0
    e930:	6e c0       	rjmp	.+220    	; 0xea0e <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e932:	80 85       	ldd	r24, Z+8	; 0x08
    e934:	84 fd       	sbrc	r24, 4
    e936:	02 c0       	rjmp	.+4      	; 0xe93c <fatfs_filinfo_list+0x34>
    e938:	9d e2       	ldi	r25, 0x2D	; 45
    e93a:	01 c0       	rjmp	.+2      	; 0xe93e <fatfs_filinfo_list+0x36>
    e93c:	94 e4       	ldi	r25, 0x44	; 68
    e93e:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e940:	80 fd       	sbrc	r24, 0
    e942:	02 c0       	rjmp	.+4      	; 0xe948 <fatfs_filinfo_list+0x40>
    e944:	9d e2       	ldi	r25, 0x2D	; 45
    e946:	01 c0       	rjmp	.+2      	; 0xe94a <fatfs_filinfo_list+0x42>
    e948:	92 e5       	ldi	r25, 0x52	; 82
    e94a:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e94c:	81 fd       	sbrc	r24, 1
    e94e:	02 c0       	rjmp	.+4      	; 0xe954 <fatfs_filinfo_list+0x4c>
    e950:	9d e2       	ldi	r25, 0x2D	; 45
    e952:	01 c0       	rjmp	.+2      	; 0xe956 <fatfs_filinfo_list+0x4e>
    e954:	98 e4       	ldi	r25, 0x48	; 72
    e956:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e958:	82 fd       	sbrc	r24, 2
    e95a:	02 c0       	rjmp	.+4      	; 0xe960 <fatfs_filinfo_list+0x58>
    e95c:	9d e2       	ldi	r25, 0x2D	; 45
    e95e:	01 c0       	rjmp	.+2      	; 0xe962 <fatfs_filinfo_list+0x5a>
    e960:	93 e5       	ldi	r25, 0x53	; 83
    e962:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e964:	85 fd       	sbrc	r24, 5
    e966:	02 c0       	rjmp	.+4      	; 0xe96c <fatfs_filinfo_list+0x64>
    e968:	8d e2       	ldi	r24, 0x2D	; 45
    e96a:	01 c0       	rjmp	.+2      	; 0xe96e <fatfs_filinfo_list+0x66>
    e96c:	81 e4       	ldi	r24, 0x41	; 65
    e96e:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    e970:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e972:	46 81       	ldd	r20, Z+6	; 0x06
    e974:	57 81       	ldd	r21, Z+7	; 0x07
    e976:	84 81       	ldd	r24, Z+4	; 0x04
    e978:	95 81       	ldd	r25, Z+5	; 0x05
    e97a:	9f 01       	movw	r18, r30
    e97c:	2a 5e       	subi	r18, 0xEA	; 234
    e97e:	3f 4f       	sbci	r19, 0xFF	; 255
    e980:	3f 93       	push	r19
    e982:	2f 93       	push	r18
    e984:	23 81       	ldd	r18, Z+3	; 0x03
    e986:	2f 93       	push	r18
    e988:	22 81       	ldd	r18, Z+2	; 0x02
    e98a:	2f 93       	push	r18
    e98c:	21 81       	ldd	r18, Z+1	; 0x01
    e98e:	2f 93       	push	r18
    e990:	20 81       	ld	r18, Z
    e992:	2f 93       	push	r18
    e994:	9a 01       	movw	r18, r20
    e996:	45 e0       	ldi	r20, 0x05	; 5
    e998:	36 95       	lsr	r19
    e99a:	27 95       	ror	r18
    e99c:	4a 95       	dec	r20
    e99e:	e1 f7       	brne	.-8      	; 0xe998 <fatfs_filinfo_list+0x90>
    e9a0:	2f 73       	andi	r18, 0x3F	; 63
    e9a2:	33 27       	eor	r19, r19
    e9a4:	3f 93       	push	r19
    e9a6:	2f 93       	push	r18
    e9a8:	25 2f       	mov	r18, r21
    e9aa:	26 95       	lsr	r18
    e9ac:	26 95       	lsr	r18
    e9ae:	26 95       	lsr	r18
    e9b0:	1f 92       	push	r1
    e9b2:	2f 93       	push	r18
    e9b4:	9c 01       	movw	r18, r24
    e9b6:	2f 71       	andi	r18, 0x1F	; 31
    e9b8:	33 27       	eor	r19, r19
    e9ba:	3f 93       	push	r19
    e9bc:	2f 93       	push	r18
    e9be:	9c 01       	movw	r18, r24
    e9c0:	55 e0       	ldi	r21, 0x05	; 5
    e9c2:	36 95       	lsr	r19
    e9c4:	27 95       	ror	r18
    e9c6:	5a 95       	dec	r21
    e9c8:	e1 f7       	brne	.-8      	; 0xe9c2 <fatfs_filinfo_list+0xba>
    e9ca:	2f 70       	andi	r18, 0x0F	; 15
    e9cc:	33 27       	eor	r19, r19
    e9ce:	3f 93       	push	r19
    e9d0:	2f 93       	push	r18
    e9d2:	89 2f       	mov	r24, r25
    e9d4:	99 27       	eor	r25, r25
    e9d6:	86 95       	lsr	r24
    e9d8:	84 54       	subi	r24, 0x44	; 68
    e9da:	98 4f       	sbci	r25, 0xF8	; 248
    e9dc:	9f 93       	push	r25
    e9de:	8f 93       	push	r24
    e9e0:	ce 01       	movw	r24, r28
    e9e2:	01 96       	adiw	r24, 0x01	; 1
    e9e4:	9f 93       	push	r25
    e9e6:	8f 93       	push	r24
    e9e8:	85 e6       	ldi	r24, 0x65	; 101
    e9ea:	98 e0       	ldi	r25, 0x08	; 8
    e9ec:	1f 92       	push	r1
    e9ee:	9f 93       	push	r25
    e9f0:	8f 93       	push	r24
    e9f2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e9f6:	83 e6       	ldi	r24, 0x63	; 99
    e9f8:	98 e0       	ldi	r25, 0x08	; 8
    e9fa:	1f 92       	push	r1
    e9fc:	9f 93       	push	r25
    e9fe:	8f 93       	push	r24
    ea00:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    ea04:	0f b6       	in	r0, 0x3f	; 63
    ea06:	f8 94       	cli
    ea08:	de bf       	out	0x3e, r29	; 62
    ea0a:	0f be       	out	0x3f, r0	; 63
    ea0c:	cd bf       	out	0x3d, r28	; 61
}
    ea0e:	26 96       	adiw	r28, 0x06	; 6
    ea10:	e2 e0       	ldi	r30, 0x02	; 2
    ea12:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000ea16 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    ea16:	cf 93       	push	r28
    ea18:	df 93       	push	r29
    ea1a:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    ea1c:	88 ea       	ldi	r24, 0xA8	; 168
    ea1e:	9b e0       	ldi	r25, 0x0B	; 11
    ea20:	1f 92       	push	r1
    ea22:	9f 93       	push	r25
    ea24:	8f 93       	push	r24
    ea26:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    
    if(full)
    ea2a:	0f 90       	pop	r0
    ea2c:	0f 90       	pop	r0
    ea2e:	0f 90       	pop	r0
    ea30:	cd 2b       	or	r28, r29
    ea32:	51 f0       	breq	.+20     	; 0xea48 <fatfs_help+0x32>
    {
        printf(
    ea34:	8c e2       	ldi	r24, 0x2C	; 44
    ea36:	9b e0       	ldi	r25, 0x0B	; 11
    ea38:	1f 92       	push	r1
    ea3a:	9f 93       	push	r25
    ea3c:	8f 93       	push	r24
    ea3e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    ea42:	0f 90       	pop	r0
    ea44:	0f 90       	pop	r0
    ea46:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    ea48:	df 91       	pop	r29
    ea4a:	cf 91       	pop	r28
    ea4c:	08 95       	ret

0000ea4e <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    ea4e:	aa e4       	ldi	r26, 0x4A	; 74
    ea50:	b2 e0       	ldi	r27, 0x02	; 2
    ea52:	ed e2       	ldi	r30, 0x2D	; 45
    ea54:	f5 e7       	ldi	r31, 0x75	; 117
    ea56:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    ea5a:	8e 01       	movw	r16, r28
    ea5c:	09 5e       	subi	r16, 0xE9	; 233
    ea5e:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    ea60:	00 97       	sbiw	r24, 0x00	; 0
    ea62:	21 f0       	breq	.+8      	; 0xea6c <fatfs_ls+0x1e>
    ea64:	fc 01       	movw	r30, r24
    ea66:	20 81       	ld	r18, Z
    ea68:	21 11       	cpse	r18, r1
    ea6a:	03 c0       	rjmp	.+6      	; 0xea72 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    ea6c:	63 e6       	ldi	r22, 0x63	; 99
    ea6e:	72 e1       	ldi	r23, 0x12	; 18
    ea70:	01 c0       	rjmp	.+2      	; 0xea74 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    ea72:	bc 01       	movw	r22, r24
    ea74:	c8 01       	movw	r24, r16
    ea76:	0e 94 3f 33 	call	0x667e	; 0x667e <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    ea7a:	1f 93       	push	r17
    ea7c:	0f 93       	push	r16
    ea7e:	8c e9       	ldi	r24, 0x9C	; 156
    ea80:	9a e0       	ldi	r25, 0x0A	; 10
    ea82:	1f 92       	push	r1
    ea84:	9f 93       	push	r25
    ea86:	8f 93       	push	r24
    ea88:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    res = f_opendir(&dirs, buff);
    ea8c:	b8 01       	movw	r22, r16
    ea8e:	ce 01       	movw	r24, r28
    ea90:	89 5e       	subi	r24, 0xE9	; 233
    ea92:	9d 4f       	sbci	r25, 0xFD	; 253
    ea94:	0e 94 b4 65 	call	0xcb68	; 0xcb68 <f_opendir>
    if (res) { put_rc(res); return; }
    ea98:	0f 90       	pop	r0
    ea9a:	0f 90       	pop	r0
    ea9c:	0f 90       	pop	r0
    ea9e:	0f 90       	pop	r0
    eaa0:	0f 90       	pop	r0
    eaa2:	00 97       	sbiw	r24, 0x00	; 0
    eaa4:	11 f0       	breq	.+4      	; 0xeaaa <fatfs_ls+0x5c>
    eaa6:	36 dd       	rcall	.-1428   	; 0xe514 <put_rc>
    p1 = s1 = s2 = 0;
    eaa8:	9a c0       	rjmp	.+308    	; 0xebde <fatfs_ls+0x190>
    eaaa:	cb 5b       	subi	r28, 0xBB	; 187
    eaac:	dd 4f       	sbci	r29, 0xFD	; 253
    eaae:	18 82       	st	Y, r1
    eab0:	19 82       	std	Y+1, r1	; 0x01
    eab2:	1a 82       	std	Y+2, r1	; 0x02
    eab4:	1b 82       	std	Y+3, r1	; 0x03
    eab6:	c5 54       	subi	r28, 0x45	; 69
    eab8:	d2 40       	sbci	r29, 0x02	; 2
    eaba:	c1 2c       	mov	r12, r1
    eabc:	d1 2c       	mov	r13, r1
    eabe:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    eac0:	f1 2c       	mov	r15, r1
    eac2:	be 01       	movw	r22, r28
    eac4:	6f 5f       	subi	r22, 0xFF	; 255
    eac6:	7f 4f       	sbci	r23, 0xFF	; 255
    eac8:	ce 01       	movw	r24, r28
    eaca:	89 5e       	subi	r24, 0xE9	; 233
    eacc:	9d 4f       	sbci	r25, 0xFD	; 253
    eace:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    ead2:	89 2b       	or	r24, r25
    ead4:	49 f5       	brne	.+82     	; 0xeb28 <fatfs_ls+0xda>
    ead6:	8f 89       	ldd	r24, Y+23	; 0x17
    ead8:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    eada:	31 f1       	breq	.+76     	; 0xeb28 <fatfs_ls+0xda>
    eadc:	89 85       	ldd	r24, Y+9	; 0x09
    eade:	84 ff       	sbrs	r24, 4
        {
            s2++;
    eae0:	04 c0       	rjmp	.+8      	; 0xeaea <fatfs_ls+0x9c>
    eae2:	ff ef       	ldi	r31, 0xFF	; 255
    eae4:	cf 1a       	sub	r12, r31
    eae6:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    eae8:	1b c0       	rjmp	.+54     	; 0xeb20 <fatfs_ls+0xd2>
    eaea:	2f ef       	ldi	r18, 0xFF	; 255
    eaec:	e2 1a       	sub	r14, r18
    eaee:	f2 0a       	sbc	r15, r18
    eaf0:	49 81       	ldd	r20, Y+1	; 0x01
    eaf2:	5a 81       	ldd	r21, Y+2	; 0x02
    eaf4:	6b 81       	ldd	r22, Y+3	; 0x03
    eaf6:	7c 81       	ldd	r23, Y+4	; 0x04
    eaf8:	cb 5b       	subi	r28, 0xBB	; 187
    eafa:	dd 4f       	sbci	r29, 0xFD	; 253
    eafc:	88 81       	ld	r24, Y
    eafe:	99 81       	ldd	r25, Y+1	; 0x01
    eb00:	aa 81       	ldd	r26, Y+2	; 0x02
    eb02:	bb 81       	ldd	r27, Y+3	; 0x03
    eb04:	c5 54       	subi	r28, 0x45	; 69
    eb06:	d2 40       	sbci	r29, 0x02	; 2
    eb08:	84 0f       	add	r24, r20
    eb0a:	95 1f       	adc	r25, r21
    eb0c:	a6 1f       	adc	r26, r22
    eb0e:	b7 1f       	adc	r27, r23
    eb10:	cb 5b       	subi	r28, 0xBB	; 187
    eb12:	dd 4f       	sbci	r29, 0xFD	; 253
    eb14:	88 83       	st	Y, r24
    eb16:	99 83       	std	Y+1, r25	; 0x01
    eb18:	aa 83       	std	Y+2, r26	; 0x02
    eb1a:	bb 83       	std	Y+3, r27	; 0x03
    eb1c:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    eb1e:	d2 40       	sbci	r29, 0x02	; 2
    eb20:	ce 01       	movw	r24, r28
    eb22:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    eb24:	f1 de       	rcall	.-542    	; 0xe908 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    eb26:	cd cf       	rjmp	.-102    	; 0xeac2 <fatfs_ls+0x74>
    eb28:	df 92       	push	r13
    eb2a:	cf 92       	push	r12
    eb2c:	c8 5b       	subi	r28, 0xB8	; 184
    eb2e:	dd 4f       	sbci	r29, 0xFD	; 253
    eb30:	88 81       	ld	r24, Y
    eb32:	c8 54       	subi	r28, 0x48	; 72
    eb34:	d2 40       	sbci	r29, 0x02	; 2
    eb36:	8f 93       	push	r24
    eb38:	c9 5b       	subi	r28, 0xB9	; 185
    eb3a:	dd 4f       	sbci	r29, 0xFD	; 253
    eb3c:	88 81       	ld	r24, Y
    eb3e:	c7 54       	subi	r28, 0x47	; 71
    eb40:	d2 40       	sbci	r29, 0x02	; 2
    eb42:	8f 93       	push	r24
    eb44:	ca 5b       	subi	r28, 0xBA	; 186
    eb46:	dd 4f       	sbci	r29, 0xFD	; 253
    eb48:	88 81       	ld	r24, Y
    eb4a:	c6 54       	subi	r28, 0x46	; 70
    eb4c:	d2 40       	sbci	r29, 0x02	; 2
    eb4e:	8f 93       	push	r24
    eb50:	cb 5b       	subi	r28, 0xBB	; 187
    eb52:	dd 4f       	sbci	r29, 0xFD	; 253
    eb54:	88 81       	ld	r24, Y
    eb56:	c5 54       	subi	r28, 0x45	; 69
    eb58:	d2 40       	sbci	r29, 0x02	; 2
    eb5a:	8f 93       	push	r24
    eb5c:	ff 92       	push	r15
    eb5e:	ef 92       	push	r14
    eb60:	83 e7       	ldi	r24, 0x73	; 115
    eb62:	9a e0       	ldi	r25, 0x0A	; 10
    eb64:	1f 92       	push	r1
    eb66:	9f 93       	push	r25
    eb68:	8f 93       	push	r24
    eb6a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    eb6e:	ae 01       	movw	r20, r28
    eb70:	47 5b       	subi	r20, 0xB7	; 183
    eb72:	5d 4f       	sbci	r21, 0xFD	; 253
    eb74:	be 01       	movw	r22, r28
    eb76:	6b 5b       	subi	r22, 0xBB	; 187
    eb78:	7d 4f       	sbci	r23, 0xFD	; 253
    eb7a:	c8 01       	movw	r24, r16
    eb7c:	0e 94 bc 66 	call	0xcd78	; 0xcd78 <f_getfree>
    eb80:	0f b6       	in	r0, 0x3f	; 63
    eb82:	f8 94       	cli
    eb84:	de bf       	out	0x3e, r29	; 62
    eb86:	0f be       	out	0x3f, r0	; 63
    eb88:	cd bf       	out	0x3d, r28	; 61
    eb8a:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    eb8c:	41 f5       	brne	.+80     	; 0xebde <fatfs_ls+0x190>
    eb8e:	c7 5b       	subi	r28, 0xB7	; 183
    eb90:	dd 4f       	sbci	r29, 0xFD	; 253
    eb92:	e8 81       	ld	r30, Y
    eb94:	f9 81       	ldd	r31, Y+1	; 0x01
    eb96:	c9 54       	subi	r28, 0x49	; 73
    eb98:	d2 40       	sbci	r29, 0x02	; 2
    eb9a:	a1 85       	ldd	r26, Z+9	; 0x09
    eb9c:	b2 85       	ldd	r27, Z+10	; 0x0a
    eb9e:	cb 5b       	subi	r28, 0xBB	; 187
    eba0:	dd 4f       	sbci	r29, 0xFD	; 253
    eba2:	28 81       	ld	r18, Y
    eba4:	39 81       	ldd	r19, Y+1	; 0x01
    eba6:	4a 81       	ldd	r20, Y+2	; 0x02
    eba8:	5b 81       	ldd	r21, Y+3	; 0x03
    ebaa:	c5 54       	subi	r28, 0x45	; 69
    ebac:	d2 40       	sbci	r29, 0x02	; 2
    ebae:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
    ebb2:	22 e0       	ldi	r18, 0x02	; 2
    ebb4:	30 e0       	ldi	r19, 0x00	; 0
    ebb6:	40 e0       	ldi	r20, 0x00	; 0
    ebb8:	50 e0       	ldi	r21, 0x00	; 0
    ebba:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
    ebbe:	5f 93       	push	r21
    ebc0:	4f 93       	push	r20
    ebc2:	3f 93       	push	r19
    ebc4:	2f 93       	push	r18
    ebc6:	8e e5       	ldi	r24, 0x5E	; 94
    ebc8:	9a e0       	ldi	r25, 0x0A	; 10
    ebca:	1f 92       	push	r1
    ebcc:	9f 93       	push	r25
    ebce:	8f 93       	push	r24
    ebd0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    ebd4:	0f b6       	in	r0, 0x3f	; 63
    ebd6:	f8 94       	cli
    ebd8:	de bf       	out	0x3e, r29	; 62
    ebda:	0f be       	out	0x3f, r0	; 63
}
    ebdc:	cd bf       	out	0x3d, r28	; 61
    ebde:	c6 5b       	subi	r28, 0xB6	; 182
    ebe0:	dd 4f       	sbci	r29, 0xFD	; 253
    ebe2:	e8 e0       	ldi	r30, 0x08	; 8
    ebe4:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000ebe8 <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    ebe8:	8c ef       	ldi	r24, 0xFC	; 252
    ebea:	9a e0       	ldi	r25, 0x0A	; 10
    ebec:	1f 92       	push	r1
    ebee:	9f 93       	push	r25
    ebf0:	8f 93       	push	r24
    ebf2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("START MMC TEST\n");
    ebf6:	8c ee       	ldi	r24, 0xEC	; 236
    ebf8:	9a e0       	ldi	r25, 0x0A	; 10
    ebfa:	1f 92       	push	r1
    ebfc:	9f 93       	push	r25
    ebfe:	8f 93       	push	r24
    ec00:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    fatfs_status("/");
    ec04:	8a e3       	ldi	r24, 0x3A	; 58
    ec06:	98 e0       	ldi	r25, 0x08	; 8
    ec08:	13 dd       	rcall	.-1498   	; 0xe630 <fatfs_status>
    printf("MMC Directory List\n");
    ec0a:	88 ed       	ldi	r24, 0xD8	; 216
    ec0c:	9a e0       	ldi	r25, 0x0A	; 10
    ec0e:	1f 92       	push	r1
    ec10:	9f 93       	push	r25
    ec12:	8f 93       	push	r24
    ec14:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    fatfs_ls("/");
    ec18:	8a e3       	ldi	r24, 0x3A	; 58
    ec1a:	98 e0       	ldi	r25, 0x08	; 8
    ec1c:	18 df       	rcall	.-464    	; 0xea4e <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    ec1e:	8a ec       	ldi	r24, 0xCA	; 202
    ec20:	9a e0       	ldi	r25, 0x0A	; 10
    ec22:	1f 92       	push	r1
    ec24:	9f 93       	push	r25
    ec26:	8f 93       	push	r24
    ec28:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("==============================\n");
    ec2c:	8a ea       	ldi	r24, 0xAA	; 170
    ec2e:	9a e0       	ldi	r25, 0x0A	; 10
    ec30:	1f 92       	push	r1
    ec32:	9f 93       	push	r25
    ec34:	8f 93       	push	r24
    ec36:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
    ec3a:	8d b7       	in	r24, 0x3d	; 61
    ec3c:	9e b7       	in	r25, 0x3e	; 62
    ec3e:	0f 96       	adiw	r24, 0x0f	; 15
    ec40:	0f b6       	in	r0, 0x3f	; 63
    ec42:	f8 94       	cli
    ec44:	9e bf       	out	0x3e, r25	; 62
    ec46:	0f be       	out	0x3f, r0	; 63
    ec48:	8d bf       	out	0x3d, r24	; 61
    ec4a:	08 95       	ret

0000ec4c <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ec4c:	ef 92       	push	r14
    ec4e:	ff 92       	push	r15
    ec50:	0f 93       	push	r16
    ec52:	1f 93       	push	r17
    ec54:	cf 93       	push	r28
    ec56:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    ec58:	fb 01       	movw	r30, r22
    ec5a:	20 81       	ld	r18, Z
    ec5c:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ec5e:	21 15       	cp	r18, r1
    ec60:	31 05       	cpc	r19, r1
    ec62:	19 f4       	brne	.+6      	; 0xec6a <fatfs_tests+0x1e>
        return(0);
    ec64:	80 e0       	ldi	r24, 0x00	; 0
    ec66:	90 e0       	ldi	r25, 0x00	; 0
    ec68:	77 c0       	rjmp	.+238    	; 0xed58 <fatfs_tests+0x10c>
    ec6a:	eb 01       	movw	r28, r22
    ec6c:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    ec6e:	6e e5       	ldi	r22, 0x5E	; 94
    ec70:	78 e0       	ldi	r23, 0x08	; 8
    ec72:	c9 01       	movw	r24, r18
    ec74:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
    ec78:	89 2b       	or	r24, r25
    ec7a:	a1 f3       	breq	.-24     	; 0xec64 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    ec7c:	ea 80       	ldd	r14, Y+2	; 0x02
    ec7e:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    ec80:	e1 14       	cp	r14, r1
    ec82:	f1 04       	cpc	r15, r1
    ec84:	21 f4       	brne	.+8      	; 0xec8e <fatfs_tests+0x42>
        {
            fatfs_help(1);
    ec86:	81 e0       	ldi	r24, 0x01	; 1
    ec88:	90 e0       	ldi	r25, 0x00	; 0
    ec8a:	c5 de       	rcall	.-630    	; 0xea16 <fatfs_help>
    ec8c:	63 c0       	rjmp	.+198    	; 0xed54 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    ec8e:	64 e1       	ldi	r22, 0x14	; 20
    ec90:	76 e1       	ldi	r23, 0x16	; 22
    ec92:	c7 01       	movw	r24, r14
    ec94:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
    ec98:	89 2b       	or	r24, r25
    ec9a:	a9 f7       	brne	.-22     	; 0xec86 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    ec9c:	98 01       	movw	r18, r16
    ec9e:	42 e0       	ldi	r20, 0x02	; 2
    eca0:	50 e0       	ldi	r21, 0x00	; 0
    eca2:	64 e6       	ldi	r22, 0x64	; 100
    eca4:	78 e0       	ldi	r23, 0x08	; 8
    eca6:	c7 01       	movw	r24, r14
    eca8:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
    ecac:	89 2b       	or	r24, r25
    ecae:	51 f1       	breq	.+84     	; 0xed04 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    ecb0:	1f 93       	push	r17
    ecb2:	0f 93       	push	r16
    ecb4:	1f 92       	push	r1
    ecb6:	82 e0       	ldi	r24, 0x02	; 2
    ecb8:	8f 93       	push	r24
    ecba:	8c e1       	ldi	r24, 0x1C	; 28
    ecbc:	9b e0       	ldi	r25, 0x0B	; 11
    ecbe:	1f 92       	push	r1
    ecc0:	9f 93       	push	r25
    ecc2:	8f 93       	push	r24
    ecc4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    ecc8:	7e 01       	movw	r14, r28
    ecca:	f4 e0       	ldi	r31, 0x04	; 4
    eccc:	ef 0e       	add	r14, r31
    ecce:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ecd0:	8d b7       	in	r24, 0x3d	; 61
    ecd2:	9e b7       	in	r25, 0x3e	; 62
    ecd4:	07 96       	adiw	r24, 0x07	; 7
    ecd6:	0f b6       	in	r0, 0x3f	; 63
    ecd8:	f8 94       	cli
    ecda:	9e bf       	out	0x3e, r25	; 62
    ecdc:	0f be       	out	0x3f, r0	; 63
    ecde:	8d bf       	out	0x3d, r24	; 61
    ece0:	c2 e0       	ldi	r28, 0x02	; 2
    ece2:	d0 e0       	ldi	r29, 0x00	; 0
    ece4:	c0 17       	cp	r28, r16
    ece6:	d1 07       	cpc	r29, r17
    ece8:	3c f4       	brge	.+14     	; 0xecf8 <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ecea:	f7 01       	movw	r30, r14
    ecec:	81 91       	ld	r24, Z+
    ecee:	91 91       	ld	r25, Z+
    ecf0:	7f 01       	movw	r14, r30
    ecf2:	ad de       	rcall	.-678    	; 0xea4e <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ecf4:	21 96       	adiw	r28, 0x01	; 1
    ecf6:	f6 cf       	rjmp	.-20     	; 0xece4 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ecf8:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ecfa:	61 f5       	brne	.+88     	; 0xed54 <fatfs_tests+0x108>
    ecfc:	84 e3       	ldi	r24, 0x34	; 52
    ecfe:	97 e1       	ldi	r25, 0x17	; 23
    ed00:	a6 de       	rcall	.-692    	; 0xea4e <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ed02:	28 c0       	rjmp	.+80     	; 0xed54 <fatfs_tests+0x108>
    ed04:	98 01       	movw	r18, r16
    ed06:	42 e0       	ldi	r20, 0x02	; 2
    ed08:	50 e0       	ldi	r21, 0x00	; 0
    ed0a:	67 e6       	ldi	r22, 0x67	; 103
    ed0c:	78 e0       	ldi	r23, 0x08	; 8
    ed0e:	c7 01       	movw	r24, r14
    ed10:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
    {
        mmc_test();
    ed14:	89 2b       	or	r24, r25
    ed16:	11 f0       	breq	.+4      	; 0xed1c <fatfs_tests+0xd0>
    ed18:	67 df       	rcall	.-306    	; 0xebe8 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ed1a:	1c c0       	rjmp	.+56     	; 0xed54 <fatfs_tests+0x108>
    ed1c:	98 01       	movw	r18, r16
    ed1e:	42 e0       	ldi	r20, 0x02	; 2
    ed20:	50 e0       	ldi	r21, 0x00	; 0
    ed22:	60 e7       	ldi	r22, 0x70	; 112
    ed24:	78 e0       	ldi	r23, 0x08	; 8
    ed26:	c7 01       	movw	r24, r14
    ed28:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
    {
        mmc_init(1);
    ed2c:	89 2b       	or	r24, r25
    ed2e:	21 f0       	breq	.+8      	; 0xed38 <fatfs_tests+0xec>
    ed30:	81 e0       	ldi	r24, 0x01	; 1
    ed32:	90 e0       	ldi	r25, 0x00	; 0
    ed34:	cb da       	rcall	.-2666   	; 0xe2cc <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ed36:	0e c0       	rjmp	.+28     	; 0xed54 <fatfs_tests+0x108>
    ed38:	98 01       	movw	r18, r16
    ed3a:	43 e0       	ldi	r20, 0x03	; 3
    ed3c:	50 e0       	ldi	r21, 0x00	; 0
    ed3e:	69 e7       	ldi	r22, 0x79	; 121
    ed40:	78 e0       	ldi	r23, 0x08	; 8
    ed42:	c7 01       	movw	r24, r14
    ed44:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
    ed48:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ed4a:	09 f4       	brne	.+2      	; 0xed4e <fatfs_tests+0x102>
    ed4c:	8b cf       	rjmp	.-234    	; 0xec64 <fatfs_tests+0x18>
    ed4e:	8c 81       	ldd	r24, Y+4	; 0x04
    ed50:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ed52:	6e dc       	rcall	.-1828   	; 0xe630 <fatfs_status>
    ed54:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ed56:	90 e0       	ldi	r25, 0x00	; 0
    ed58:	cd b7       	in	r28, 0x3d	; 61
    ed5a:	de b7       	in	r29, 0x3e	; 62
    ed5c:	e6 e0       	ldi	r30, 0x06	; 6
    ed5e:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

0000ed62 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ed62:	8f 92       	push	r8
    ed64:	9f 92       	push	r9
    ed66:	af 92       	push	r10
    ed68:	bf 92       	push	r11
    ed6a:	ef 92       	push	r14
    ed6c:	ff 92       	push	r15
    ed6e:	0f 93       	push	r16
    ed70:	1f 93       	push	r17
    ed72:	cf 93       	push	r28
    ed74:	df 93       	push	r29
    ed76:	00 d0       	rcall	.+0      	; 0xed78 <fatfs_getc+0x16>
    ed78:	1f 92       	push	r1
    ed7a:	cd b7       	in	r28, 0x3d	; 61
    ed7c:	de b7       	in	r29, 0x3e	; 62
    ed7e:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    ed82:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    ed86:	00 97       	sbiw	r24, 0x00	; 0
    ed88:	39 f4       	brne	.+14     	; 0xed98 <fatfs_getc+0x36>
    ed8a:	89 e0       	ldi	r24, 0x09	; 9
    ed8c:	90 e0       	ldi	r25, 0x00	; 0
    ed8e:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    ed92:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    ed96:	2f c0       	rjmp	.+94     	; 0xedf6 <fatfs_getc+0x94>
    ed98:	fc 01       	movw	r30, r24
    ed9a:	e4 84       	ldd	r14, Z+12	; 0x0c
    ed9c:	f5 84       	ldd	r15, Z+13	; 0x0d
    ed9e:	e1 14       	cp	r14, r1
    eda0:	f1 04       	cpc	r15, r1
    eda2:	99 f3       	breq	.-26     	; 0xed8a <fatfs_getc+0x28>
    eda4:	8c 01       	movw	r16, r24
    eda6:	9e 01       	movw	r18, r28
    eda8:	2f 5f       	subi	r18, 0xFF	; 255
    edaa:	3f 4f       	sbci	r19, 0xFF	; 255
    edac:	41 e0       	ldi	r20, 0x01	; 1
    edae:	50 e0       	ldi	r21, 0x00	; 0
    edb0:	be 01       	movw	r22, r28
    edb2:	6d 5f       	subi	r22, 0xFD	; 253
    edb4:	7f 4f       	sbci	r23, 0xFF	; 255
    edb6:	c7 01       	movw	r24, r14
    edb8:	0e 94 cd 5d 	call	0xbb9a	; 0xbb9a <f_read>
    edbc:	00 97       	sbiw	r24, 0x00	; 0
    edbe:	31 f4       	brne	.+12     	; 0xedcc <fatfs_getc+0x6a>
    edc0:	29 81       	ldd	r18, Y+1	; 0x01
    edc2:	3a 81       	ldd	r19, Y+2	; 0x02
    edc4:	21 30       	cpi	r18, 0x01	; 1
    edc6:	31 05       	cpc	r19, r1
    edc8:	c9 f0       	breq	.+50     	; 0xedfc <fatfs_getc+0x9a>
    edca:	03 c0       	rjmp	.+6      	; 0xedd2 <fatfs_getc+0x70>
    edcc:	84 31       	cpi	r24, 0x14	; 20
    edce:	91 05       	cpc	r25, r1
    edd0:	40 f4       	brcc	.+16     	; 0xede2 <fatfs_getc+0x80>
    edd2:	fc 01       	movw	r30, r24
    edd4:	ee 5e       	subi	r30, 0xEE	; 238
    edd6:	f8 4f       	sbci	r31, 0xF8	; 248
    edd8:	80 81       	ld	r24, Z
    edda:	08 2e       	mov	r0, r24
    eddc:	00 0c       	add	r0, r0
    edde:	99 0b       	sbc	r25, r25
    ede0:	02 c0       	rjmp	.+4      	; 0xede6 <fatfs_getc+0x84>
    ede2:	83 e2       	ldi	r24, 0x23	; 35
    ede4:	90 e0       	ldi	r25, 0x00	; 0
    ede6:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    edea:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    edee:	f8 01       	movw	r30, r16
    edf0:	83 81       	ldd	r24, Z+3	; 0x03
    edf2:	80 62       	ori	r24, 0x20	; 32
    edf4:	83 83       	std	Z+3, r24	; 0x03
    edf6:	8f ef       	ldi	r24, 0xFF	; 255
    edf8:	9f ef       	ldi	r25, 0xFF	; 255
    edfa:	28 c0       	rjmp	.+80     	; 0xee4c <fatfs_getc+0xea>
    edfc:	8b 81       	ldd	r24, Y+3	; 0x03
    edfe:	8d 30       	cpi	r24, 0x0D	; 13
    ee00:	01 f5       	brne	.+64     	; 0xee42 <fatfs_getc+0xe0>
    ee02:	f7 01       	movw	r30, r14
    ee04:	80 88       	ldd	r8, Z+16	; 0x10
    ee06:	91 88       	ldd	r9, Z+17	; 0x11
    ee08:	a2 88       	ldd	r10, Z+18	; 0x12
    ee0a:	b3 88       	ldd	r11, Z+19	; 0x13
    ee0c:	9e 01       	movw	r18, r28
    ee0e:	2f 5f       	subi	r18, 0xFF	; 255
    ee10:	3f 4f       	sbci	r19, 0xFF	; 255
    ee12:	41 e0       	ldi	r20, 0x01	; 1
    ee14:	50 e0       	ldi	r21, 0x00	; 0
    ee16:	be 01       	movw	r22, r28
    ee18:	6d 5f       	subi	r22, 0xFD	; 253
    ee1a:	7f 4f       	sbci	r23, 0xFF	; 255
    ee1c:	c7 01       	movw	r24, r14
    ee1e:	0e 94 cd 5d 	call	0xbb9a	; 0xbb9a <f_read>
    ee22:	89 2b       	or	r24, r25
    ee24:	89 f4       	brne	.+34     	; 0xee48 <fatfs_getc+0xe6>
    ee26:	89 81       	ldd	r24, Y+1	; 0x01
    ee28:	9a 81       	ldd	r25, Y+2	; 0x02
    ee2a:	01 97       	sbiw	r24, 0x01	; 1
    ee2c:	69 f4       	brne	.+26     	; 0xee48 <fatfs_getc+0xe6>
    ee2e:	8b 81       	ldd	r24, Y+3	; 0x03
    ee30:	8a 30       	cpi	r24, 0x0A	; 10
    ee32:	31 f0       	breq	.+12     	; 0xee40 <fatfs_getc+0xde>
    ee34:	b5 01       	movw	r22, r10
    ee36:	a4 01       	movw	r20, r8
    ee38:	c7 01       	movw	r24, r14
    ee3a:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <f_lseek>
    ee3e:	04 c0       	rjmp	.+8      	; 0xee48 <fatfs_getc+0xe6>
    ee40:	8b 83       	std	Y+3, r24	; 0x03
    ee42:	8b 81       	ldd	r24, Y+3	; 0x03
    ee44:	90 e0       	ldi	r25, 0x00	; 0
    ee46:	02 c0       	rjmp	.+4      	; 0xee4c <fatfs_getc+0xea>
    ee48:	8a e0       	ldi	r24, 0x0A	; 10
    ee4a:	90 e0       	ldi	r25, 0x00	; 0
    ee4c:	0f 90       	pop	r0
    ee4e:	0f 90       	pop	r0
    ee50:	0f 90       	pop	r0
    ee52:	df 91       	pop	r29
    ee54:	cf 91       	pop	r28
    ee56:	1f 91       	pop	r17
    ee58:	0f 91       	pop	r16
    ee5a:	ff 90       	pop	r15
    ee5c:	ef 90       	pop	r14
    ee5e:	bf 90       	pop	r11
    ee60:	af 90       	pop	r10
    ee62:	9f 90       	pop	r9
    ee64:	8f 90       	pop	r8
    ee66:	08 95       	ret

0000ee68 <fatfs_putc>:
    ee68:	a3 e0       	ldi	r26, 0x03	; 3
    ee6a:	b0 e0       	ldi	r27, 0x00	; 0
    ee6c:	ea e3       	ldi	r30, 0x3A	; 58
    ee6e:	f7 e7       	ldi	r31, 0x77	; 119
    ee70:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    ee74:	8b 83       	std	Y+3, r24	; 0x03
    ee76:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    ee7a:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    ee7e:	61 15       	cp	r22, r1
    ee80:	71 05       	cpc	r23, r1
    ee82:	39 f4       	brne	.+14     	; 0xee92 <fatfs_putc+0x2a>
    ee84:	89 e0       	ldi	r24, 0x09	; 9
    ee86:	90 e0       	ldi	r25, 0x00	; 0
    ee88:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    ee8c:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    ee90:	2d c0       	rjmp	.+90     	; 0xeeec <fatfs_putc+0x84>
    ee92:	fb 01       	movw	r30, r22
    ee94:	84 85       	ldd	r24, Z+12	; 0x0c
    ee96:	95 85       	ldd	r25, Z+13	; 0x0d
    ee98:	00 97       	sbiw	r24, 0x00	; 0
    ee9a:	a1 f3       	breq	.-24     	; 0xee84 <fatfs_putc+0x1c>
    ee9c:	8b 01       	movw	r16, r22
    ee9e:	9e 01       	movw	r18, r28
    eea0:	2f 5f       	subi	r18, 0xFF	; 255
    eea2:	3f 4f       	sbci	r19, 0xFF	; 255
    eea4:	41 e0       	ldi	r20, 0x01	; 1
    eea6:	50 e0       	ldi	r21, 0x00	; 0
    eea8:	be 01       	movw	r22, r28
    eeaa:	6d 5f       	subi	r22, 0xFD	; 253
    eeac:	7f 4f       	sbci	r23, 0xFF	; 255
    eeae:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <f_write>
    eeb2:	00 97       	sbiw	r24, 0x00	; 0
    eeb4:	31 f4       	brne	.+12     	; 0xeec2 <fatfs_putc+0x5a>
    eeb6:	29 81       	ldd	r18, Y+1	; 0x01
    eeb8:	3a 81       	ldd	r19, Y+2	; 0x02
    eeba:	21 30       	cpi	r18, 0x01	; 1
    eebc:	31 05       	cpc	r19, r1
    eebe:	c9 f0       	breq	.+50     	; 0xeef2 <fatfs_putc+0x8a>
    eec0:	03 c0       	rjmp	.+6      	; 0xeec8 <fatfs_putc+0x60>
    eec2:	84 31       	cpi	r24, 0x14	; 20
    eec4:	91 05       	cpc	r25, r1
    eec6:	40 f4       	brcc	.+16     	; 0xeed8 <fatfs_putc+0x70>
    eec8:	fc 01       	movw	r30, r24
    eeca:	ee 5e       	subi	r30, 0xEE	; 238
    eecc:	f8 4f       	sbci	r31, 0xF8	; 248
    eece:	80 81       	ld	r24, Z
    eed0:	08 2e       	mov	r0, r24
    eed2:	00 0c       	add	r0, r0
    eed4:	99 0b       	sbc	r25, r25
    eed6:	02 c0       	rjmp	.+4      	; 0xeedc <fatfs_putc+0x74>
    eed8:	83 e2       	ldi	r24, 0x23	; 35
    eeda:	90 e0       	ldi	r25, 0x00	; 0
    eedc:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    eee0:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    eee4:	f8 01       	movw	r30, r16
    eee6:	83 81       	ldd	r24, Z+3	; 0x03
    eee8:	80 62       	ori	r24, 0x20	; 32
    eeea:	83 83       	std	Z+3, r24	; 0x03
    eeec:	8f ef       	ldi	r24, 0xFF	; 255
    eeee:	9f ef       	ldi	r25, 0xFF	; 255
    eef0:	02 c0       	rjmp	.+4      	; 0xeef6 <fatfs_putc+0x8e>
    eef2:	8b 81       	ldd	r24, Y+3	; 0x03
    eef4:	90 e0       	ldi	r25, 0x00	; 0
    eef6:	23 96       	adiw	r28, 0x03	; 3
    eef8:	e4 e0       	ldi	r30, 0x04	; 4
    eefa:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

0000eefe <fgetc>:
    eefe:	cf 93       	push	r28
    ef00:	df 93       	push	r29
    ef02:	ec 01       	movw	r28, r24
    ef04:	00 97       	sbiw	r24, 0x00	; 0
    ef06:	39 f4       	brne	.+14     	; 0xef16 <fgetc+0x18>
    ef08:	89 e0       	ldi	r24, 0x09	; 9
    ef0a:	90 e0       	ldi	r25, 0x00	; 0
    ef0c:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    ef10:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    ef14:	40 c0       	rjmp	.+128    	; 0xef96 <fgetc+0x98>
    ef16:	2b 81       	ldd	r18, Y+3	; 0x03
    ef18:	20 ff       	sbrs	r18, 0
    ef1a:	3d c0       	rjmp	.+122    	; 0xef96 <fgetc+0x98>
    ef1c:	26 ff       	sbrs	r18, 6
    ef1e:	0a c0       	rjmp	.+20     	; 0xef34 <fgetc+0x36>
    ef20:	2f 7b       	andi	r18, 0xBF	; 191
    ef22:	2b 83       	std	Y+3, r18	; 0x03
    ef24:	8e 81       	ldd	r24, Y+6	; 0x06
    ef26:	9f 81       	ldd	r25, Y+7	; 0x07
    ef28:	01 96       	adiw	r24, 0x01	; 1
    ef2a:	9f 83       	std	Y+7, r25	; 0x07
    ef2c:	8e 83       	std	Y+6, r24	; 0x06
    ef2e:	8a 81       	ldd	r24, Y+2	; 0x02
    ef30:	90 e0       	ldi	r25, 0x00	; 0
    ef32:	33 c0       	rjmp	.+102    	; 0xef9a <fgetc+0x9c>
    ef34:	22 ff       	sbrs	r18, 2
    ef36:	0d c0       	rjmp	.+26     	; 0xef52 <fgetc+0x54>
    ef38:	e8 81       	ld	r30, Y
    ef3a:	f9 81       	ldd	r31, Y+1	; 0x01
    ef3c:	80 81       	ld	r24, Z
    ef3e:	90 e0       	ldi	r25, 0x00	; 0
    ef40:	00 97       	sbiw	r24, 0x00	; 0
    ef42:	19 f4       	brne	.+6      	; 0xef4a <fgetc+0x4c>
    ef44:	20 62       	ori	r18, 0x20	; 32
    ef46:	2b 83       	std	Y+3, r18	; 0x03
    ef48:	26 c0       	rjmp	.+76     	; 0xef96 <fgetc+0x98>
    ef4a:	31 96       	adiw	r30, 0x01	; 1
    ef4c:	f9 83       	std	Y+1, r31	; 0x01
    ef4e:	e8 83       	st	Y, r30
    ef50:	1b c0       	rjmp	.+54     	; 0xef88 <fgetc+0x8a>
    ef52:	ea 85       	ldd	r30, Y+10	; 0x0a
    ef54:	fb 85       	ldd	r31, Y+11	; 0x0b
    ef56:	30 97       	sbiw	r30, 0x00	; 0
    ef58:	59 f4       	brne	.+22     	; 0xef70 <fgetc+0x72>
    ef5a:	88 e7       	ldi	r24, 0x78	; 120
    ef5c:	9c e0       	ldi	r25, 0x0C	; 12
    ef5e:	1f 92       	push	r1
    ef60:	9f 93       	push	r25
    ef62:	8f 93       	push	r24
    ef64:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    ef68:	0f 90       	pop	r0
    ef6a:	0f 90       	pop	r0
    ef6c:	0f 90       	pop	r0
    ef6e:	13 c0       	rjmp	.+38     	; 0xef96 <fgetc+0x98>
    ef70:	09 95       	icall
    ef72:	97 ff       	sbrs	r25, 7
    ef74:	09 c0       	rjmp	.+18     	; 0xef88 <fgetc+0x8a>
    ef76:	2b 81       	ldd	r18, Y+3	; 0x03
    ef78:	02 96       	adiw	r24, 0x02	; 2
    ef7a:	11 f0       	breq	.+4      	; 0xef80 <fgetc+0x82>
    ef7c:	80 e2       	ldi	r24, 0x20	; 32
    ef7e:	01 c0       	rjmp	.+2      	; 0xef82 <fgetc+0x84>
    ef80:	80 e1       	ldi	r24, 0x10	; 16
    ef82:	82 2b       	or	r24, r18
    ef84:	8b 83       	std	Y+3, r24	; 0x03
    ef86:	07 c0       	rjmp	.+14     	; 0xef96 <fgetc+0x98>
    ef88:	2e 81       	ldd	r18, Y+6	; 0x06
    ef8a:	3f 81       	ldd	r19, Y+7	; 0x07
    ef8c:	2f 5f       	subi	r18, 0xFF	; 255
    ef8e:	3f 4f       	sbci	r19, 0xFF	; 255
    ef90:	3f 83       	std	Y+7, r19	; 0x07
    ef92:	2e 83       	std	Y+6, r18	; 0x06
    ef94:	02 c0       	rjmp	.+4      	; 0xef9a <fgetc+0x9c>
    ef96:	8f ef       	ldi	r24, 0xFF	; 255
    ef98:	9f ef       	ldi	r25, 0xFF	; 255
    ef9a:	df 91       	pop	r29
    ef9c:	cf 91       	pop	r28
    ef9e:	08 95       	ret

0000efa0 <fputc>:
    efa0:	cf 93       	push	r28
    efa2:	df 93       	push	r29
    efa4:	eb 01       	movw	r28, r22
    efa6:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    efaa:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    efae:	20 91 cf 1c 	lds	r18, 0x1CCF	; 0x801ccf <__iob+0x2>
    efb2:	30 91 d0 1c 	lds	r19, 0x1CD0	; 0x801cd0 <__iob+0x3>
    efb6:	62 17       	cp	r22, r18
    efb8:	73 07       	cpc	r23, r19
    efba:	49 f0       	breq	.+18     	; 0xefce <fputc+0x2e>
    efbc:	20 91 d1 1c 	lds	r18, 0x1CD1	; 0x801cd1 <__iob+0x4>
    efc0:	30 91 d2 1c 	lds	r19, 0x1CD2	; 0x801cd2 <__iob+0x5>
    efc4:	62 17       	cp	r22, r18
    efc6:	73 07       	cpc	r23, r19
    efc8:	11 f0       	breq	.+4      	; 0xefce <fputc+0x2e>
    efca:	4e df       	rcall	.-356    	; 0xee68 <fatfs_putc>
    efcc:	33 c0       	rjmp	.+102    	; 0xf034 <fputc+0x94>
    efce:	2b 81       	ldd	r18, Y+3	; 0x03
    efd0:	21 ff       	sbrs	r18, 1
    efd2:	2e c0       	rjmp	.+92     	; 0xf030 <fputc+0x90>
    efd4:	22 ff       	sbrs	r18, 2
    efd6:	10 c0       	rjmp	.+32     	; 0xeff8 <fputc+0x58>
    efd8:	4e 81       	ldd	r20, Y+6	; 0x06
    efda:	5f 81       	ldd	r21, Y+7	; 0x07
    efdc:	2c 81       	ldd	r18, Y+4	; 0x04
    efde:	3d 81       	ldd	r19, Y+5	; 0x05
    efe0:	42 17       	cp	r20, r18
    efe2:	53 07       	cpc	r21, r19
    efe4:	f4 f4       	brge	.+60     	; 0xf022 <fputc+0x82>
    efe6:	e8 81       	ld	r30, Y
    efe8:	f9 81       	ldd	r31, Y+1	; 0x01
    efea:	9f 01       	movw	r18, r30
    efec:	2f 5f       	subi	r18, 0xFF	; 255
    efee:	3f 4f       	sbci	r19, 0xFF	; 255
    eff0:	39 83       	std	Y+1, r19	; 0x01
    eff2:	28 83       	st	Y, r18
    eff4:	80 83       	st	Z, r24
    eff6:	15 c0       	rjmp	.+42     	; 0xf022 <fputc+0x82>
    eff8:	e8 85       	ldd	r30, Y+8	; 0x08
    effa:	f9 85       	ldd	r31, Y+9	; 0x09
    effc:	30 97       	sbiw	r30, 0x00	; 0
    effe:	59 f4       	brne	.+22     	; 0xf016 <fputc+0x76>
    f000:	80 e6       	ldi	r24, 0x60	; 96
    f002:	9c e0       	ldi	r25, 0x0C	; 12
    f004:	1f 92       	push	r1
    f006:	9f 93       	push	r25
    f008:	8f 93       	push	r24
    f00a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    f00e:	0f 90       	pop	r0
    f010:	0f 90       	pop	r0
    f012:	0f 90       	pop	r0
    f014:	0d c0       	rjmp	.+26     	; 0xf030 <fputc+0x90>
    f016:	be 01       	movw	r22, r28
    f018:	09 95       	icall
    f01a:	8f 3f       	cpi	r24, 0xFF	; 255
    f01c:	2f ef       	ldi	r18, 0xFF	; 255
    f01e:	92 07       	cpc	r25, r18
    f020:	39 f0       	breq	.+14     	; 0xf030 <fputc+0x90>
    f022:	2e 81       	ldd	r18, Y+6	; 0x06
    f024:	3f 81       	ldd	r19, Y+7	; 0x07
    f026:	2f 5f       	subi	r18, 0xFF	; 255
    f028:	3f 4f       	sbci	r19, 0xFF	; 255
    f02a:	3f 83       	std	Y+7, r19	; 0x07
    f02c:	2e 83       	std	Y+6, r18	; 0x06
    f02e:	02 c0       	rjmp	.+4      	; 0xf034 <fputc+0x94>
    f030:	8f ef       	ldi	r24, 0xFF	; 255
    f032:	9f ef       	ldi	r25, 0xFF	; 255
    f034:	df 91       	pop	r29
    f036:	cf 91       	pop	r28
    f038:	08 95       	ret

0000f03a <_fprintf_putc>:
    f03a:	fc 01       	movw	r30, r24
    f03c:	86 2f       	mov	r24, r22
    f03e:	26 81       	ldd	r18, Z+6	; 0x06
    f040:	37 81       	ldd	r19, Z+7	; 0x07
    f042:	2f 5f       	subi	r18, 0xFF	; 255
    f044:	3f 4f       	sbci	r19, 0xFF	; 255
    f046:	37 83       	std	Z+7, r19	; 0x07
    f048:	26 83       	std	Z+6, r18	; 0x06
    f04a:	62 81       	ldd	r22, Z+2	; 0x02
    f04c:	73 81       	ldd	r23, Z+3	; 0x03
    f04e:	90 e0       	ldi	r25, 0x00	; 0
    f050:	a7 cf       	rjmp	.-178    	; 0xefa0 <fputc>
    f052:	08 95       	ret

0000f054 <getchar>:
    f054:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob>
    f058:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x1>
    f05c:	50 cf       	rjmp	.-352    	; 0xeefe <fgetc>
    f05e:	08 95       	ret

0000f060 <putchar>:
    f060:	60 91 cf 1c 	lds	r22, 0x1CCF	; 0x801ccf <__iob+0x2>
    f064:	70 91 d0 1c 	lds	r23, 0x1CD0	; 0x801cd0 <__iob+0x3>
    f068:	9b cf       	rjmp	.-202    	; 0xefa0 <fputc>
    f06a:	08 95       	ret

0000f06c <fgets>:
    f06c:	a0 e0       	ldi	r26, 0x00	; 0
    f06e:	b0 e0       	ldi	r27, 0x00	; 0
    f070:	ec e3       	ldi	r30, 0x3C	; 60
    f072:	f8 e7       	ldi	r31, 0x78	; 120
    f074:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
    f078:	7c 01       	movw	r14, r24
    f07a:	6a 01       	movw	r12, r20
    f07c:	8b 01       	movw	r16, r22
    f07e:	c0 e0       	ldi	r28, 0x00	; 0
    f080:	d0 e0       	ldi	r29, 0x00	; 0
    f082:	01 15       	cp	r16, r1
    f084:	11 05       	cpc	r17, r1
    f086:	41 f0       	breq	.+16     	; 0xf098 <fgets+0x2c>
    f088:	c6 01       	movw	r24, r12
    f08a:	39 df       	rcall	.-398    	; 0xeefe <fgetc>
    f08c:	8f 3f       	cpi	r24, 0xFF	; 255
    f08e:	2f ef       	ldi	r18, 0xFF	; 255
    f090:	92 07       	cpc	r25, r18
    f092:	39 f4       	brne	.+14     	; 0xf0a2 <fgets+0x36>
    f094:	20 97       	sbiw	r28, 0x00	; 0
    f096:	b9 f0       	breq	.+46     	; 0xf0c6 <fgets+0x5a>
    f098:	ce 0d       	add	r28, r14
    f09a:	df 1d       	adc	r29, r15
    f09c:	18 82       	st	Y, r1
    f09e:	c7 01       	movw	r24, r14
    f0a0:	14 c0       	rjmp	.+40     	; 0xf0ca <fgets+0x5e>
    f0a2:	8a 30       	cpi	r24, 0x0A	; 10
    f0a4:	91 05       	cpc	r25, r1
    f0a6:	c1 f3       	breq	.-16     	; 0xf098 <fgets+0x2c>
    f0a8:	88 30       	cpi	r24, 0x08	; 8
    f0aa:	91 05       	cpc	r25, r1
    f0ac:	21 f4       	brne	.+8      	; 0xf0b6 <fgets+0x4a>
    f0ae:	20 97       	sbiw	r28, 0x00	; 0
    f0b0:	39 f0       	breq	.+14     	; 0xf0c0 <fgets+0x54>
    f0b2:	21 97       	sbiw	r28, 0x01	; 1
    f0b4:	05 c0       	rjmp	.+10     	; 0xf0c0 <fgets+0x54>
    f0b6:	f7 01       	movw	r30, r14
    f0b8:	ec 0f       	add	r30, r28
    f0ba:	fd 1f       	adc	r31, r29
    f0bc:	80 83       	st	Z, r24
    f0be:	21 96       	adiw	r28, 0x01	; 1
    f0c0:	01 50       	subi	r16, 0x01	; 1
    f0c2:	11 09       	sbc	r17, r1
    f0c4:	de cf       	rjmp	.-68     	; 0xf082 <fgets+0x16>
    f0c6:	80 e0       	ldi	r24, 0x00	; 0
    f0c8:	90 e0       	ldi	r25, 0x00	; 0
    f0ca:	cd b7       	in	r28, 0x3d	; 61
    f0cc:	de b7       	in	r29, 0x3e	; 62
    f0ce:	e8 e0       	ldi	r30, 0x08	; 8
    f0d0:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0000f0d4 <fputs>:
    f0d4:	0f 93       	push	r16
    f0d6:	1f 93       	push	r17
    f0d8:	cf 93       	push	r28
    f0da:	df 93       	push	r29
    f0dc:	8b 01       	movw	r16, r22
    f0de:	ec 01       	movw	r28, r24
    f0e0:	89 91       	ld	r24, Y+
    f0e2:	88 23       	and	r24, r24
    f0e4:	41 f0       	breq	.+16     	; 0xf0f6 <fputs+0x22>
    f0e6:	b8 01       	movw	r22, r16
    f0e8:	90 e0       	ldi	r25, 0x00	; 0
    f0ea:	5a df       	rcall	.-332    	; 0xefa0 <fputc>
    f0ec:	8f 3f       	cpi	r24, 0xFF	; 255
    f0ee:	2f ef       	ldi	r18, 0xFF	; 255
    f0f0:	92 07       	cpc	r25, r18
    f0f2:	b1 f7       	brne	.-20     	; 0xf0e0 <fputs+0xc>
    f0f4:	02 c0       	rjmp	.+4      	; 0xf0fa <fputs+0x26>
    f0f6:	80 e0       	ldi	r24, 0x00	; 0
    f0f8:	90 e0       	ldi	r25, 0x00	; 0
    f0fa:	df 91       	pop	r29
    f0fc:	cf 91       	pop	r28
    f0fe:	1f 91       	pop	r17
    f100:	0f 91       	pop	r16
    f102:	08 95       	ret

0000f104 <puts>:
    f104:	cf 93       	push	r28
    f106:	df 93       	push	r29
    f108:	ec 01       	movw	r28, r24
    f10a:	89 91       	ld	r24, Y+
    f10c:	60 91 cf 1c 	lds	r22, 0x1CCF	; 0x801ccf <__iob+0x2>
    f110:	70 91 d0 1c 	lds	r23, 0x1CD0	; 0x801cd0 <__iob+0x3>
    f114:	88 23       	and	r24, r24
    f116:	39 f0       	breq	.+14     	; 0xf126 <puts+0x22>
    f118:	90 e0       	ldi	r25, 0x00	; 0
    f11a:	42 df       	rcall	.-380    	; 0xefa0 <fputc>
    f11c:	8f 3f       	cpi	r24, 0xFF	; 255
    f11e:	2f ef       	ldi	r18, 0xFF	; 255
    f120:	92 07       	cpc	r25, r18
    f122:	99 f7       	brne	.-26     	; 0xf10a <puts+0x6>
    f124:	03 c0       	rjmp	.+6      	; 0xf12c <puts+0x28>
    f126:	8a e0       	ldi	r24, 0x0A	; 10
    f128:	90 e0       	ldi	r25, 0x00	; 0
    f12a:	3a df       	rcall	.-396    	; 0xefa0 <fputc>
    f12c:	df 91       	pop	r29
    f12e:	cf 91       	pop	r28
    f130:	08 95       	ret

0000f132 <fileno>:
    f132:	00 97       	sbiw	r24, 0x00	; 0
    f134:	39 f4       	brne	.+14     	; 0xf144 <fileno+0x12>
    f136:	89 e0       	ldi	r24, 0x09	; 9
    f138:	90 e0       	ldi	r25, 0x00	; 0
    f13a:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f13e:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f142:	0e c0       	rjmp	.+28     	; 0xf160 <fileno+0x2e>
    f144:	ed ec       	ldi	r30, 0xCD	; 205
    f146:	fc e1       	ldi	r31, 0x1C	; 28
    f148:	20 e0       	ldi	r18, 0x00	; 0
    f14a:	30 e0       	ldi	r19, 0x00	; 0
    f14c:	41 91       	ld	r20, Z+
    f14e:	51 91       	ld	r21, Z+
    f150:	84 17       	cp	r24, r20
    f152:	95 07       	cpc	r25, r21
    f154:	41 f0       	breq	.+16     	; 0xf166 <fileno+0x34>
    f156:	2f 5f       	subi	r18, 0xFF	; 255
    f158:	3f 4f       	sbci	r19, 0xFF	; 255
    f15a:	20 31       	cpi	r18, 0x10	; 16
    f15c:	31 05       	cpc	r19, r1
    f15e:	b1 f7       	brne	.-20     	; 0xf14c <fileno+0x1a>
    f160:	8f ef       	ldi	r24, 0xFF	; 255
    f162:	9f ef       	ldi	r25, 0xFF	; 255
    f164:	08 95       	ret
    f166:	c9 01       	movw	r24, r18
    f168:	08 95       	ret

0000f16a <fileno_to_stream>:
    f16a:	80 31       	cpi	r24, 0x10	; 16
    f16c:	91 05       	cpc	r25, r1
    f16e:	48 f4       	brcc	.+18     	; 0xf182 <fileno_to_stream+0x18>
    f170:	88 0f       	add	r24, r24
    f172:	99 1f       	adc	r25, r25
    f174:	fc 01       	movw	r30, r24
    f176:	e3 53       	subi	r30, 0x33	; 51
    f178:	f3 4e       	sbci	r31, 0xE3	; 227
    f17a:	80 81       	ld	r24, Z
    f17c:	91 81       	ldd	r25, Z+1	; 0x01
    f17e:	00 97       	sbiw	r24, 0x00	; 0
    f180:	41 f4       	brne	.+16     	; 0xf192 <fileno_to_stream+0x28>
    f182:	89 e0       	ldi	r24, 0x09	; 9
    f184:	90 e0       	ldi	r25, 0x00	; 0
    f186:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f18a:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f18e:	80 e0       	ldi	r24, 0x00	; 0
    f190:	90 e0       	ldi	r25, 0x00	; 0
    f192:	08 95       	ret

0000f194 <mctime>:
    f194:	a4 e0       	ldi	r26, 0x04	; 4
    f196:	b0 e0       	ldi	r27, 0x00	; 0
    f198:	e0 ed       	ldi	r30, 0xD0	; 208
    f19a:	f8 e7       	ldi	r31, 0x78	; 120
    f19c:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    f1a0:	69 83       	std	Y+1, r22	; 0x01
    f1a2:	7a 83       	std	Y+2, r23	; 0x02
    f1a4:	8b 83       	std	Y+3, r24	; 0x03
    f1a6:	9c 83       	std	Y+4, r25	; 0x04
    f1a8:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f1ac:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f1b0:	ce 01       	movw	r24, r28
    f1b2:	01 96       	adiw	r24, 0x01	; 1
    f1b4:	0e 94 ed 3e 	call	0x7dda	; 0x7dda <ctime_gm>
    f1b8:	fc 01       	movw	r30, r24
    f1ba:	01 90       	ld	r0, Z+
    f1bc:	00 20       	and	r0, r0
    f1be:	e9 f7       	brne	.-6      	; 0xf1ba <mctime+0x26>
    f1c0:	31 97       	sbiw	r30, 0x01	; 1
    f1c2:	e8 1b       	sub	r30, r24
    f1c4:	f9 0b       	sbc	r31, r25
    f1c6:	39 f0       	breq	.+14     	; 0xf1d6 <mctime+0x42>
    f1c8:	31 97       	sbiw	r30, 0x01	; 1
    f1ca:	e8 0f       	add	r30, r24
    f1cc:	f9 1f       	adc	r31, r25
    f1ce:	20 81       	ld	r18, Z
    f1d0:	2a 30       	cpi	r18, 0x0A	; 10
    f1d2:	09 f4       	brne	.+2      	; 0xf1d6 <mctime+0x42>
    f1d4:	10 82       	st	Z, r1
    f1d6:	24 96       	adiw	r28, 0x04	; 4
    f1d8:	e2 e0       	ldi	r30, 0x02	; 2
    f1da:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000f1de <basename>:
    f1de:	00 97       	sbiw	r24, 0x00	; 0
    f1e0:	49 f0       	breq	.+18     	; 0xf1f4 <basename+0x16>
    f1e2:	fc 01       	movw	r30, r24
    f1e4:	21 91       	ld	r18, Z+
    f1e6:	22 23       	and	r18, r18
    f1e8:	21 f0       	breq	.+8      	; 0xf1f2 <basename+0x14>
    f1ea:	2f 32       	cpi	r18, 0x2F	; 47
    f1ec:	d9 f7       	brne	.-10     	; 0xf1e4 <basename+0x6>
    f1ee:	cf 01       	movw	r24, r30
    f1f0:	f9 cf       	rjmp	.-14     	; 0xf1e4 <basename+0x6>
    f1f2:	08 95       	ret
    f1f4:	84 e3       	ldi	r24, 0x34	; 52
    f1f6:	97 e1       	ldi	r25, 0x17	; 23
    f1f8:	08 95       	ret

0000f1fa <chdir>:
    f1fa:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f1fe:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f202:	0e 94 48 61 	call	0xc290	; 0xc290 <f_chdir>
    f206:	00 97       	sbiw	r24, 0x00	; 0
    f208:	a1 f0       	breq	.+40     	; 0xf232 <chdir+0x38>
    f20a:	84 31       	cpi	r24, 0x14	; 20
    f20c:	91 05       	cpc	r25, r1
    f20e:	40 f4       	brcc	.+16     	; 0xf220 <chdir+0x26>
    f210:	fc 01       	movw	r30, r24
    f212:	ee 5e       	subi	r30, 0xEE	; 238
    f214:	f8 4f       	sbci	r31, 0xF8	; 248
    f216:	80 81       	ld	r24, Z
    f218:	08 2e       	mov	r0, r24
    f21a:	00 0c       	add	r0, r0
    f21c:	99 0b       	sbc	r25, r25
    f21e:	02 c0       	rjmp	.+4      	; 0xf224 <chdir+0x2a>
    f220:	83 e2       	ldi	r24, 0x23	; 35
    f222:	90 e0       	ldi	r25, 0x00	; 0
    f224:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f228:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f22c:	8f ef       	ldi	r24, 0xFF	; 255
    f22e:	9f ef       	ldi	r25, 0xFF	; 255
    f230:	08 95       	ret
    f232:	80 e0       	ldi	r24, 0x00	; 0
    f234:	90 e0       	ldi	r25, 0x00	; 0
    f236:	08 95       	ret

0000f238 <chmod>:
    f238:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f23c:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f240:	42 79       	andi	r20, 0x92	; 146
    f242:	55 27       	eor	r21, r21
    f244:	66 27       	eor	r22, r22
    f246:	77 27       	eor	r23, r23
    f248:	45 2b       	or	r20, r21
    f24a:	46 2b       	or	r20, r22
    f24c:	47 2b       	or	r20, r23
    f24e:	19 f0       	breq	.+6      	; 0xf256 <chmod+0x1e>
    f250:	80 e0       	ldi	r24, 0x00	; 0
    f252:	90 e0       	ldi	r25, 0x00	; 0
    f254:	08 95       	ret
    f256:	41 e0       	ldi	r20, 0x01	; 1
    f258:	61 e0       	ldi	r22, 0x01	; 1
    f25a:	0e 94 47 6a 	call	0xd48e	; 0xd48e <f_chmod>
    f25e:	00 97       	sbiw	r24, 0x00	; 0
    f260:	b9 f3       	breq	.-18     	; 0xf250 <chmod+0x18>
    f262:	84 31       	cpi	r24, 0x14	; 20
    f264:	91 05       	cpc	r25, r1
    f266:	40 f4       	brcc	.+16     	; 0xf278 <chmod+0x40>
    f268:	fc 01       	movw	r30, r24
    f26a:	ee 5e       	subi	r30, 0xEE	; 238
    f26c:	f8 4f       	sbci	r31, 0xF8	; 248
    f26e:	80 81       	ld	r24, Z
    f270:	08 2e       	mov	r0, r24
    f272:	00 0c       	add	r0, r0
    f274:	99 0b       	sbc	r25, r25
    f276:	02 c0       	rjmp	.+4      	; 0xf27c <chmod+0x44>
    f278:	83 e2       	ldi	r24, 0x23	; 35
    f27a:	90 e0       	ldi	r25, 0x00	; 0
    f27c:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f280:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f284:	8f ef       	ldi	r24, 0xFF	; 255
    f286:	9f ef       	ldi	r25, 0xFF	; 255
    f288:	08 95       	ret

0000f28a <getcwd>:
    f28a:	cf 93       	push	r28
    f28c:	df 93       	push	r29
    f28e:	d8 2f       	mov	r29, r24
    f290:	c9 2f       	mov	r28, r25
    f292:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f296:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f29a:	0e 94 a3 61 	call	0xc346	; 0xc346 <f_getcwd>
    f29e:	00 97       	sbiw	r24, 0x00	; 0
    f2a0:	a1 f0       	breq	.+40     	; 0xf2ca <getcwd+0x40>
    f2a2:	84 31       	cpi	r24, 0x14	; 20
    f2a4:	91 05       	cpc	r25, r1
    f2a6:	40 f4       	brcc	.+16     	; 0xf2b8 <getcwd+0x2e>
    f2a8:	fc 01       	movw	r30, r24
    f2aa:	ee 5e       	subi	r30, 0xEE	; 238
    f2ac:	f8 4f       	sbci	r31, 0xF8	; 248
    f2ae:	80 81       	ld	r24, Z
    f2b0:	08 2e       	mov	r0, r24
    f2b2:	00 0c       	add	r0, r0
    f2b4:	99 0b       	sbc	r25, r25
    f2b6:	02 c0       	rjmp	.+4      	; 0xf2bc <getcwd+0x32>
    f2b8:	83 e2       	ldi	r24, 0x23	; 35
    f2ba:	90 e0       	ldi	r25, 0x00	; 0
    f2bc:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f2c0:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f2c4:	80 e0       	ldi	r24, 0x00	; 0
    f2c6:	90 e0       	ldi	r25, 0x00	; 0
    f2c8:	02 c0       	rjmp	.+4      	; 0xf2ce <getcwd+0x44>
    f2ca:	8d 2f       	mov	r24, r29
    f2cc:	9c 2f       	mov	r25, r28
    f2ce:	df 91       	pop	r29
    f2d0:	cf 91       	pop	r28
    f2d2:	08 95       	ret

0000f2d4 <mkdir>:
    f2d4:	cf 93       	push	r28
    f2d6:	df 93       	push	r29
    f2d8:	ec 01       	movw	r28, r24
    f2da:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f2de:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f2e2:	41 15       	cp	r20, r1
    f2e4:	51 05       	cpc	r21, r1
    f2e6:	61 05       	cpc	r22, r1
    f2e8:	71 05       	cpc	r23, r1
    f2ea:	41 f4       	brne	.+16     	; 0xf2fc <mkdir+0x28>
    f2ec:	ce 01       	movw	r24, r28
    f2ee:	0e 94 42 68 	call	0xd084	; 0xd084 <f_mkdir>
    f2f2:	00 97       	sbiw	r24, 0x00	; 0
    f2f4:	39 f4       	brne	.+14     	; 0xf304 <mkdir+0x30>
    f2f6:	80 e0       	ldi	r24, 0x00	; 0
    f2f8:	90 e0       	ldi	r25, 0x00	; 0
    f2fa:	17 c0       	rjmp	.+46     	; 0xf32a <mkdir+0x56>
    f2fc:	9d df       	rcall	.-198    	; 0xf238 <chmod>
    f2fe:	89 2b       	or	r24, r25
    f300:	a9 f3       	breq	.-22     	; 0xf2ec <mkdir+0x18>
    f302:	11 c0       	rjmp	.+34     	; 0xf326 <mkdir+0x52>
    f304:	84 31       	cpi	r24, 0x14	; 20
    f306:	91 05       	cpc	r25, r1
    f308:	40 f4       	brcc	.+16     	; 0xf31a <mkdir+0x46>
    f30a:	fc 01       	movw	r30, r24
    f30c:	ee 5e       	subi	r30, 0xEE	; 238
    f30e:	f8 4f       	sbci	r31, 0xF8	; 248
    f310:	80 81       	ld	r24, Z
    f312:	08 2e       	mov	r0, r24
    f314:	00 0c       	add	r0, r0
    f316:	99 0b       	sbc	r25, r25
    f318:	02 c0       	rjmp	.+4      	; 0xf31e <mkdir+0x4a>
    f31a:	83 e2       	ldi	r24, 0x23	; 35
    f31c:	90 e0       	ldi	r25, 0x00	; 0
    f31e:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f322:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f326:	8f ef       	ldi	r24, 0xFF	; 255
    f328:	9f ef       	ldi	r25, 0xFF	; 255
    f32a:	df 91       	pop	r29
    f32c:	cf 91       	pop	r28
    f32e:	08 95       	ret

0000f330 <rename>:
    f330:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f334:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f338:	0e 94 32 69 	call	0xd264	; 0xd264 <f_rename>
    f33c:	00 97       	sbiw	r24, 0x00	; 0
    f33e:	a1 f0       	breq	.+40     	; 0xf368 <rename+0x38>
    f340:	84 31       	cpi	r24, 0x14	; 20
    f342:	91 05       	cpc	r25, r1
    f344:	40 f4       	brcc	.+16     	; 0xf356 <rename+0x26>
    f346:	fc 01       	movw	r30, r24
    f348:	ee 5e       	subi	r30, 0xEE	; 238
    f34a:	f8 4f       	sbci	r31, 0xF8	; 248
    f34c:	80 81       	ld	r24, Z
    f34e:	08 2e       	mov	r0, r24
    f350:	00 0c       	add	r0, r0
    f352:	99 0b       	sbc	r25, r25
    f354:	02 c0       	rjmp	.+4      	; 0xf35a <rename+0x2a>
    f356:	83 e2       	ldi	r24, 0x23	; 35
    f358:	90 e0       	ldi	r25, 0x00	; 0
    f35a:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f35e:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f362:	8f ef       	ldi	r24, 0xFF	; 255
    f364:	9f ef       	ldi	r25, 0xFF	; 255
    f366:	08 95       	ret
    f368:	80 e0       	ldi	r24, 0x00	; 0
    f36a:	90 e0       	ldi	r25, 0x00	; 0
    f36c:	08 95       	ret

0000f36e <unlink>:
    f36e:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f372:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f376:	0e 94 9b 67 	call	0xcf36	; 0xcf36 <f_unlink>
    f37a:	00 97       	sbiw	r24, 0x00	; 0
    f37c:	a1 f0       	breq	.+40     	; 0xf3a6 <unlink+0x38>
    f37e:	84 31       	cpi	r24, 0x14	; 20
    f380:	91 05       	cpc	r25, r1
    f382:	40 f4       	brcc	.+16     	; 0xf394 <unlink+0x26>
    f384:	fc 01       	movw	r30, r24
    f386:	ee 5e       	subi	r30, 0xEE	; 238
    f388:	f8 4f       	sbci	r31, 0xF8	; 248
    f38a:	80 81       	ld	r24, Z
    f38c:	08 2e       	mov	r0, r24
    f38e:	00 0c       	add	r0, r0
    f390:	99 0b       	sbc	r25, r25
    f392:	02 c0       	rjmp	.+4      	; 0xf398 <unlink+0x2a>
    f394:	83 e2       	ldi	r24, 0x23	; 35
    f396:	90 e0       	ldi	r25, 0x00	; 0
    f398:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f39c:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f3a0:	8f ef       	ldi	r24, 0xFF	; 255
    f3a2:	9f ef       	ldi	r25, 0xFF	; 255
    f3a4:	08 95       	ret
    f3a6:	80 e0       	ldi	r24, 0x00	; 0
    f3a8:	90 e0       	ldi	r25, 0x00	; 0
    f3aa:	08 95       	ret

0000f3ac <rmdir>:
    f3ac:	e0 cf       	rjmp	.-64     	; 0xf36e <unlink>
    f3ae:	08 95       	ret

0000f3b0 <closedir>:
    f3b0:	0e 94 25 66 	call	0xcc4a	; 0xcc4a <f_closedir>
    f3b4:	00 97       	sbiw	r24, 0x00	; 0
    f3b6:	a1 f0       	breq	.+40     	; 0xf3e0 <closedir+0x30>
    f3b8:	84 31       	cpi	r24, 0x14	; 20
    f3ba:	91 05       	cpc	r25, r1
    f3bc:	40 f4       	brcc	.+16     	; 0xf3ce <closedir+0x1e>
    f3be:	fc 01       	movw	r30, r24
    f3c0:	ee 5e       	subi	r30, 0xEE	; 238
    f3c2:	f8 4f       	sbci	r31, 0xF8	; 248
    f3c4:	80 81       	ld	r24, Z
    f3c6:	08 2e       	mov	r0, r24
    f3c8:	00 0c       	add	r0, r0
    f3ca:	99 0b       	sbc	r25, r25
    f3cc:	02 c0       	rjmp	.+4      	; 0xf3d2 <closedir+0x22>
    f3ce:	83 e2       	ldi	r24, 0x23	; 35
    f3d0:	90 e0       	ldi	r25, 0x00	; 0
    f3d2:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f3d6:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f3da:	8f ef       	ldi	r24, 0xFF	; 255
    f3dc:	9f ef       	ldi	r25, 0xFF	; 255
    f3de:	08 95       	ret
    f3e0:	80 e0       	ldi	r24, 0x00	; 0
    f3e2:	90 e0       	ldi	r25, 0x00	; 0
    f3e4:	08 95       	ret

0000f3e6 <opendir>:
    f3e6:	bc 01       	movw	r22, r24
    f3e8:	83 e4       	ldi	r24, 0x43	; 67
    f3ea:	99 e1       	ldi	r25, 0x19	; 25
    f3ec:	0e 94 b4 65 	call	0xcb68	; 0xcb68 <f_opendir>
    f3f0:	00 97       	sbiw	r24, 0x00	; 0
    f3f2:	a1 f0       	breq	.+40     	; 0xf41c <opendir+0x36>
    f3f4:	84 31       	cpi	r24, 0x14	; 20
    f3f6:	91 05       	cpc	r25, r1
    f3f8:	40 f4       	brcc	.+16     	; 0xf40a <opendir+0x24>
    f3fa:	fc 01       	movw	r30, r24
    f3fc:	ee 5e       	subi	r30, 0xEE	; 238
    f3fe:	f8 4f       	sbci	r31, 0xF8	; 248
    f400:	80 81       	ld	r24, Z
    f402:	08 2e       	mov	r0, r24
    f404:	00 0c       	add	r0, r0
    f406:	99 0b       	sbc	r25, r25
    f408:	02 c0       	rjmp	.+4      	; 0xf40e <opendir+0x28>
    f40a:	83 e2       	ldi	r24, 0x23	; 35
    f40c:	90 e0       	ldi	r25, 0x00	; 0
    f40e:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f412:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f416:	80 e0       	ldi	r24, 0x00	; 0
    f418:	90 e0       	ldi	r25, 0x00	; 0
    f41a:	08 95       	ret
    f41c:	83 e4       	ldi	r24, 0x43	; 67
    f41e:	99 e1       	ldi	r25, 0x19	; 25
    f420:	08 95       	ret

0000f422 <readdir>:
    f422:	a6 e1       	ldi	r26, 0x16	; 22
    f424:	b1 e0       	ldi	r27, 0x01	; 1
    f426:	e7 e1       	ldi	r30, 0x17	; 23
    f428:	fa e7       	ldi	r31, 0x7A	; 122
    f42a:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    f42e:	10 92 44 18 	sts	0x1844, r1	; 0x801844 <_de>
    f432:	be 01       	movw	r22, r28
    f434:	6f 5f       	subi	r22, 0xFF	; 255
    f436:	7f 4f       	sbci	r23, 0xFF	; 255
    f438:	0e 94 3a 66 	call	0xcc74	; 0xcc74 <f_readdir>
    f43c:	00 97       	sbiw	r24, 0x00	; 0
    f43e:	a1 f0       	breq	.+40     	; 0xf468 <readdir+0x46>
    f440:	84 31       	cpi	r24, 0x14	; 20
    f442:	91 05       	cpc	r25, r1
    f444:	40 f4       	brcc	.+16     	; 0xf456 <readdir+0x34>
    f446:	fc 01       	movw	r30, r24
    f448:	ee 5e       	subi	r30, 0xEE	; 238
    f44a:	f8 4f       	sbci	r31, 0xF8	; 248
    f44c:	80 81       	ld	r24, Z
    f44e:	08 2e       	mov	r0, r24
    f450:	00 0c       	add	r0, r0
    f452:	99 0b       	sbc	r25, r25
    f454:	02 c0       	rjmp	.+4      	; 0xf45a <readdir+0x38>
    f456:	83 e2       	ldi	r24, 0x23	; 35
    f458:	90 e0       	ldi	r25, 0x00	; 0
    f45a:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f45e:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f462:	80 e0       	ldi	r24, 0x00	; 0
    f464:	90 e0       	ldi	r25, 0x00	; 0
    f466:	16 c0       	rjmp	.+44     	; 0xf494 <readdir+0x72>
    f468:	be 01       	movw	r22, r28
    f46a:	69 5e       	subi	r22, 0xE9	; 233
    f46c:	7f 4f       	sbci	r23, 0xFF	; 255
    f46e:	fb 01       	movw	r30, r22
    f470:	01 90       	ld	r0, Z+
    f472:	00 20       	and	r0, r0
    f474:	e9 f7       	brne	.-6      	; 0xf470 <readdir+0x4e>
    f476:	31 97       	sbiw	r30, 0x01	; 1
    f478:	8f 01       	movw	r16, r30
    f47a:	06 1b       	sub	r16, r22
    f47c:	17 0b       	sbc	r17, r23
    f47e:	a8 01       	movw	r20, r16
    f480:	84 e4       	ldi	r24, 0x44	; 68
    f482:	98 e1       	ldi	r25, 0x18	; 24
    f484:	0e 94 4a 33 	call	0x6694	; 0x6694 <strncpy>
    f488:	f8 01       	movw	r30, r16
    f48a:	ec 5b       	subi	r30, 0xBC	; 188
    f48c:	f7 4e       	sbci	r31, 0xE7	; 231
    f48e:	10 82       	st	Z, r1
    f490:	84 e4       	ldi	r24, 0x44	; 68
    f492:	98 e1       	ldi	r25, 0x18	; 24
    f494:	ca 5e       	subi	r28, 0xEA	; 234
    f496:	de 4f       	sbci	r29, 0xFE	; 254
    f498:	e4 e0       	ldi	r30, 0x04	; 4
    f49a:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

0000f49e <perror>:
    f49e:	e0 91 cb 1c 	lds	r30, 0x1CCB	; 0x801ccb <errno>
    f4a2:	f0 91 cc 1c 	lds	r31, 0x1CCC	; 0x801ccc <errno+0x1>
    f4a6:	e3 32       	cpi	r30, 0x23	; 35
    f4a8:	f1 05       	cpc	r31, r1
    f4aa:	38 f4       	brcc	.+14     	; 0xf4ba <perror+0x1c>
    f4ac:	ee 0f       	add	r30, r30
    f4ae:	ff 1f       	adc	r31, r31
    f4b0:	e3 5c       	subi	r30, 0xC3	; 195
    f4b2:	fe 4f       	sbci	r31, 0xFE	; 254
    f4b4:	20 81       	ld	r18, Z
    f4b6:	31 81       	ldd	r19, Z+1	; 0x01
    f4b8:	04 c0       	rjmp	.+8      	; 0xf4c2 <perror+0x24>
    f4ba:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    f4be:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    f4c2:	00 97       	sbiw	r24, 0x00	; 0
    f4c4:	c1 f0       	breq	.+48     	; 0xf4f6 <perror+0x58>
    f4c6:	fc 01       	movw	r30, r24
    f4c8:	40 81       	ld	r20, Z
    f4ca:	44 23       	and	r20, r20
    f4cc:	a1 f0       	breq	.+40     	; 0xf4f6 <perror+0x58>
    f4ce:	3f 93       	push	r19
    f4d0:	2f 93       	push	r18
    f4d2:	9f 93       	push	r25
    f4d4:	8f 93       	push	r24
    f4d6:	87 ed       	ldi	r24, 0xD7	; 215
    f4d8:	9b e0       	ldi	r25, 0x0B	; 11
    f4da:	1f 92       	push	r1
    f4dc:	9f 93       	push	r25
    f4de:	8f 93       	push	r24
    f4e0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    f4e4:	8d b7       	in	r24, 0x3d	; 61
    f4e6:	9e b7       	in	r25, 0x3e	; 62
    f4e8:	07 96       	adiw	r24, 0x07	; 7
    f4ea:	0f b6       	in	r0, 0x3f	; 63
    f4ec:	f8 94       	cli
    f4ee:	9e bf       	out	0x3e, r25	; 62
    f4f0:	0f be       	out	0x3f, r0	; 63
    f4f2:	8d bf       	out	0x3d, r24	; 61
    f4f4:	08 95       	ret
    f4f6:	3f 93       	push	r19
    f4f8:	2f 93       	push	r18
    f4fa:	83 ed       	ldi	r24, 0xD3	; 211
    f4fc:	9b e0       	ldi	r25, 0x0B	; 11
    f4fe:	1f 92       	push	r1
    f500:	9f 93       	push	r25
    f502:	8f 93       	push	r24
    f504:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    f508:	0f 90       	pop	r0
    f50a:	0f 90       	pop	r0
    f50c:	0f 90       	pop	r0
    f50e:	0f 90       	pop	r0
    f510:	0f 90       	pop	r0
    f512:	08 95       	ret

0000f514 <fdevopen>:
    f514:	0f 93       	push	r16
    f516:	1f 93       	push	r17
    f518:	cf 93       	push	r28
    f51a:	df 93       	push	r29
    f51c:	00 97       	sbiw	r24, 0x00	; 0
    f51e:	31 f4       	brne	.+12     	; 0xf52c <fdevopen+0x18>
    f520:	61 15       	cp	r22, r1
    f522:	71 05       	cpc	r23, r1
    f524:	19 f4       	brne	.+6      	; 0xf52c <fdevopen+0x18>
    f526:	80 e0       	ldi	r24, 0x00	; 0
    f528:	90 e0       	ldi	r25, 0x00	; 0
    f52a:	3a c0       	rjmp	.+116    	; 0xf5a0 <fdevopen+0x8c>
    f52c:	8b 01       	movw	r16, r22
    f52e:	ec 01       	movw	r28, r24
    f530:	6e e0       	ldi	r22, 0x0E	; 14
    f532:	70 e0       	ldi	r23, 0x00	; 0
    f534:	81 e0       	ldi	r24, 0x01	; 1
    f536:	90 e0       	ldi	r25, 0x00	; 0
    f538:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
    f53c:	fc 01       	movw	r30, r24
    f53e:	89 2b       	or	r24, r25
    f540:	91 f3       	breq	.-28     	; 0xf526 <fdevopen+0x12>
    f542:	80 e8       	ldi	r24, 0x80	; 128
    f544:	83 83       	std	Z+3, r24	; 0x03
    f546:	01 15       	cp	r16, r1
    f548:	11 05       	cpc	r17, r1
    f54a:	71 f0       	breq	.+28     	; 0xf568 <fdevopen+0x54>
    f54c:	13 87       	std	Z+11, r17	; 0x0b
    f54e:	02 87       	std	Z+10, r16	; 0x0a
    f550:	81 e8       	ldi	r24, 0x81	; 129
    f552:	83 83       	std	Z+3, r24	; 0x03
    f554:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob>
    f558:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x1>
    f55c:	89 2b       	or	r24, r25
    f55e:	21 f4       	brne	.+8      	; 0xf568 <fdevopen+0x54>
    f560:	f0 93 ce 1c 	sts	0x1CCE, r31	; 0x801cce <__iob+0x1>
    f564:	e0 93 cd 1c 	sts	0x1CCD, r30	; 0x801ccd <__iob>
    f568:	20 97       	sbiw	r28, 0x00	; 0
    f56a:	c9 f0       	breq	.+50     	; 0xf59e <fdevopen+0x8a>
    f56c:	d1 87       	std	Z+9, r29	; 0x09
    f56e:	c0 87       	std	Z+8, r28	; 0x08
    f570:	83 81       	ldd	r24, Z+3	; 0x03
    f572:	82 60       	ori	r24, 0x02	; 2
    f574:	83 83       	std	Z+3, r24	; 0x03
    f576:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x2>
    f57a:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x3>
    f57e:	89 2b       	or	r24, r25
    f580:	21 f4       	brne	.+8      	; 0xf58a <fdevopen+0x76>
    f582:	f0 93 d0 1c 	sts	0x1CD0, r31	; 0x801cd0 <__iob+0x3>
    f586:	e0 93 cf 1c 	sts	0x1CCF, r30	; 0x801ccf <__iob+0x2>
    f58a:	80 91 d1 1c 	lds	r24, 0x1CD1	; 0x801cd1 <__iob+0x4>
    f58e:	90 91 d2 1c 	lds	r25, 0x1CD2	; 0x801cd2 <__iob+0x5>
    f592:	89 2b       	or	r24, r25
    f594:	21 f4       	brne	.+8      	; 0xf59e <fdevopen+0x8a>
    f596:	f0 93 d2 1c 	sts	0x1CD2, r31	; 0x801cd2 <__iob+0x5>
    f59a:	e0 93 d1 1c 	sts	0x1CD1, r30	; 0x801cd1 <__iob+0x4>
    f59e:	cf 01       	movw	r24, r30
    f5a0:	df 91       	pop	r29
    f5a2:	cf 91       	pop	r28
    f5a4:	1f 91       	pop	r17
    f5a6:	0f 91       	pop	r16
    f5a8:	08 95       	ret

0000f5aa <fat_time_to_unix>:
    f5aa:	a6 e1       	ldi	r26, 0x16	; 22
    f5ac:	b0 e0       	ldi	r27, 0x00	; 0
    f5ae:	eb ed       	ldi	r30, 0xDB	; 219
    f5b0:	fa e7       	ldi	r31, 0x7A	; 122
    f5b2:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
    f5b6:	fe 01       	movw	r30, r28
    f5b8:	31 96       	adiw	r30, 0x01	; 1
    f5ba:	26 e1       	ldi	r18, 0x16	; 22
    f5bc:	df 01       	movw	r26, r30
    f5be:	1d 92       	st	X+, r1
    f5c0:	2a 95       	dec	r18
    f5c2:	e9 f7       	brne	.-6      	; 0xf5be <fat_time_to_unix+0x14>
    f5c4:	9b 01       	movw	r18, r22
    f5c6:	22 0f       	add	r18, r18
    f5c8:	33 1f       	adc	r19, r19
    f5ca:	2e 73       	andi	r18, 0x3E	; 62
    f5cc:	33 27       	eor	r19, r19
    f5ce:	3a 83       	std	Y+2, r19	; 0x02
    f5d0:	29 83       	std	Y+1, r18	; 0x01
    f5d2:	9b 01       	movw	r18, r22
    f5d4:	55 e0       	ldi	r21, 0x05	; 5
    f5d6:	36 95       	lsr	r19
    f5d8:	27 95       	ror	r18
    f5da:	5a 95       	dec	r21
    f5dc:	e1 f7       	brne	.-8      	; 0xf5d6 <fat_time_to_unix+0x2c>
    f5de:	2f 73       	andi	r18, 0x3F	; 63
    f5e0:	33 27       	eor	r19, r19
    f5e2:	3c 83       	std	Y+4, r19	; 0x04
    f5e4:	2b 83       	std	Y+3, r18	; 0x03
    f5e6:	27 2f       	mov	r18, r23
    f5e8:	26 95       	lsr	r18
    f5ea:	26 95       	lsr	r18
    f5ec:	26 95       	lsr	r18
    f5ee:	2d 83       	std	Y+5, r18	; 0x05
    f5f0:	1e 82       	std	Y+6, r1	; 0x06
    f5f2:	9c 01       	movw	r18, r24
    f5f4:	2f 71       	andi	r18, 0x1F	; 31
    f5f6:	33 27       	eor	r19, r19
    f5f8:	38 87       	std	Y+8, r19	; 0x08
    f5fa:	2f 83       	std	Y+7, r18	; 0x07
    f5fc:	9c 01       	movw	r18, r24
    f5fe:	65 e0       	ldi	r22, 0x05	; 5
    f600:	36 95       	lsr	r19
    f602:	27 95       	ror	r18
    f604:	6a 95       	dec	r22
    f606:	e1 f7       	brne	.-8      	; 0xf600 <fat_time_to_unix+0x56>
    f608:	2f 70       	andi	r18, 0x0F	; 15
    f60a:	33 27       	eor	r19, r19
    f60c:	21 50       	subi	r18, 0x01	; 1
    f60e:	31 09       	sbc	r19, r1
    f610:	3a 87       	std	Y+10, r19	; 0x0a
    f612:	29 87       	std	Y+9, r18	; 0x09
    f614:	9c 01       	movw	r18, r24
    f616:	23 2f       	mov	r18, r19
    f618:	33 27       	eor	r19, r19
    f61a:	26 95       	lsr	r18
    f61c:	20 5b       	subi	r18, 0xB0	; 176
    f61e:	3f 4f       	sbci	r19, 0xFF	; 255
    f620:	3c 87       	std	Y+12, r19	; 0x0c
    f622:	2b 87       	std	Y+11, r18	; 0x0b
    f624:	cf 01       	movw	r24, r30
    f626:	0e 94 41 3c 	call	0x7882	; 0x7882 <timegm>
    f62a:	66 96       	adiw	r28, 0x16	; 22
    f62c:	e2 e0       	ldi	r30, 0x02	; 2
    f62e:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0000f632 <stat>:
    f632:	a6 e1       	ldi	r26, 0x16	; 22
    f634:	b1 e0       	ldi	r27, 0x01	; 1
    f636:	ef e1       	ldi	r30, 0x1F	; 31
    f638:	fb e7       	ldi	r31, 0x7B	; 123
    f63a:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
    f63e:	7c 01       	movw	r14, r24
    f640:	8b 01       	movw	r16, r22
    f642:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f646:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f64a:	6a e3       	ldi	r22, 0x3A	; 58
    f64c:	78 e0       	ldi	r23, 0x08	; 8
    f64e:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    f652:	89 2b       	or	r24, r25
    f654:	39 f0       	breq	.+14     	; 0xf664 <stat+0x32>
    f656:	63 e6       	ldi	r22, 0x63	; 99
    f658:	72 e1       	ldi	r23, 0x12	; 18
    f65a:	c7 01       	movw	r24, r14
    f65c:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    f660:	89 2b       	or	r24, r25
    f662:	d1 f4       	brne	.+52     	; 0xf698 <stat+0x66>
    f664:	f8 01       	movw	r30, r16
    f666:	14 a2       	std	Z+36, r1	; 0x24
    f668:	15 a2       	std	Z+37, r1	; 0x25
    f66a:	16 a2       	std	Z+38, r1	; 0x26
    f66c:	17 a2       	std	Z+39, r1	; 0x27
    f66e:	10 a6       	std	Z+40, r1	; 0x28
    f670:	11 a6       	std	Z+41, r1	; 0x29
    f672:	12 a6       	std	Z+42, r1	; 0x2a
    f674:	13 a6       	std	Z+43, r1	; 0x2b
    f676:	14 a6       	std	Z+44, r1	; 0x2c
    f678:	15 a6       	std	Z+45, r1	; 0x2d
    f67a:	16 a6       	std	Z+46, r1	; 0x2e
    f67c:	17 a6       	std	Z+47, r1	; 0x2f
    f67e:	11 8a       	std	Z+17, r1	; 0x11
    f680:	10 8a       	std	Z+16, r1	; 0x10
    f682:	13 8a       	std	Z+19, r1	; 0x13
    f684:	12 8a       	std	Z+18, r1	; 0x12
    f686:	10 8e       	std	Z+24, r1	; 0x18
    f688:	11 8e       	std	Z+25, r1	; 0x19
    f68a:	12 8e       	std	Z+26, r1	; 0x1a
    f68c:	13 8e       	std	Z+27, r1	; 0x1b
    f68e:	80 e0       	ldi	r24, 0x00	; 0
    f690:	90 e4       	ldi	r25, 0x40	; 64
    f692:	a0 e0       	ldi	r26, 0x00	; 0
    f694:	b0 e0       	ldi	r27, 0x00	; 0
    f696:	4e c0       	rjmp	.+156    	; 0xf734 <stat+0x102>
    f698:	be 01       	movw	r22, r28
    f69a:	6f 5f       	subi	r22, 0xFF	; 255
    f69c:	7f 4f       	sbci	r23, 0xFF	; 255
    f69e:	c7 01       	movw	r24, r14
    f6a0:	0e 94 7e 66 	call	0xccfc	; 0xccfc <f_stat>
    f6a4:	00 97       	sbiw	r24, 0x00	; 0
    f6a6:	a1 f0       	breq	.+40     	; 0xf6d0 <stat+0x9e>
    f6a8:	84 31       	cpi	r24, 0x14	; 20
    f6aa:	91 05       	cpc	r25, r1
    f6ac:	40 f4       	brcc	.+16     	; 0xf6be <stat+0x8c>
    f6ae:	fc 01       	movw	r30, r24
    f6b0:	ee 5e       	subi	r30, 0xEE	; 238
    f6b2:	f8 4f       	sbci	r31, 0xF8	; 248
    f6b4:	80 81       	ld	r24, Z
    f6b6:	08 2e       	mov	r0, r24
    f6b8:	00 0c       	add	r0, r0
    f6ba:	99 0b       	sbc	r25, r25
    f6bc:	02 c0       	rjmp	.+4      	; 0xf6c2 <stat+0x90>
    f6be:	83 e2       	ldi	r24, 0x23	; 35
    f6c0:	90 e0       	ldi	r25, 0x00	; 0
    f6c2:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f6c6:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f6ca:	8f ef       	ldi	r24, 0xFF	; 255
    f6cc:	9f ef       	ldi	r25, 0xFF	; 255
    f6ce:	38 c0       	rjmp	.+112    	; 0xf740 <stat+0x10e>
    f6d0:	89 81       	ldd	r24, Y+1	; 0x01
    f6d2:	9a 81       	ldd	r25, Y+2	; 0x02
    f6d4:	ab 81       	ldd	r26, Y+3	; 0x03
    f6d6:	bc 81       	ldd	r27, Y+4	; 0x04
    f6d8:	f8 01       	movw	r30, r16
    f6da:	80 8f       	std	Z+24, r24	; 0x18
    f6dc:	91 8f       	std	Z+25, r25	; 0x19
    f6de:	a2 8f       	std	Z+26, r26	; 0x1a
    f6e0:	b3 8f       	std	Z+27, r27	; 0x1b
    f6e2:	6f 81       	ldd	r22, Y+7	; 0x07
    f6e4:	78 85       	ldd	r23, Y+8	; 0x08
    f6e6:	8d 81       	ldd	r24, Y+5	; 0x05
    f6e8:	9e 81       	ldd	r25, Y+6	; 0x06
    f6ea:	5f df       	rcall	.-322    	; 0xf5aa <fat_time_to_unix>
    f6ec:	f8 01       	movw	r30, r16
    f6ee:	64 a3       	std	Z+36, r22	; 0x24
    f6f0:	75 a3       	std	Z+37, r23	; 0x25
    f6f2:	86 a3       	std	Z+38, r24	; 0x26
    f6f4:	97 a3       	std	Z+39, r25	; 0x27
    f6f6:	60 a7       	std	Z+40, r22	; 0x28
    f6f8:	71 a7       	std	Z+41, r23	; 0x29
    f6fa:	82 a7       	std	Z+42, r24	; 0x2a
    f6fc:	93 a7       	std	Z+43, r25	; 0x2b
    f6fe:	64 a7       	std	Z+44, r22	; 0x2c
    f700:	75 a7       	std	Z+45, r23	; 0x2d
    f702:	86 a7       	std	Z+46, r24	; 0x2e
    f704:	97 a7       	std	Z+47, r25	; 0x2f
    f706:	29 85       	ldd	r18, Y+9	; 0x09
    f708:	20 fd       	sbrc	r18, 0
    f70a:	03 c0       	rjmp	.+6      	; 0xf712 <stat+0xe0>
    f70c:	8f ef       	ldi	r24, 0xFF	; 255
    f70e:	91 e0       	ldi	r25, 0x01	; 1
    f710:	02 c0       	rjmp	.+4      	; 0xf716 <stat+0xe4>
    f712:	8d e6       	ldi	r24, 0x6D	; 109
    f714:	91 e0       	ldi	r25, 0x01	; 1
    f716:	48 ee       	ldi	r20, 0xE8	; 232
    f718:	53 e0       	ldi	r21, 0x03	; 3
    f71a:	f8 01       	movw	r30, r16
    f71c:	51 8b       	std	Z+17, r21	; 0x11
    f71e:	40 8b       	std	Z+16, r20	; 0x10
    f720:	53 8b       	std	Z+19, r21	; 0x13
    f722:	42 8b       	std	Z+18, r20	; 0x12
    f724:	24 ff       	sbrs	r18, 4
    f726:	02 c0       	rjmp	.+4      	; 0xf72c <stat+0xfa>
    f728:	90 64       	ori	r25, 0x40	; 64
    f72a:	01 c0       	rjmp	.+2      	; 0xf72e <stat+0xfc>
    f72c:	90 68       	ori	r25, 0x80	; 128
    f72e:	a0 e0       	ldi	r26, 0x00	; 0
    f730:	b0 e0       	ldi	r27, 0x00	; 0
    f732:	f8 01       	movw	r30, r16
    f734:	80 87       	std	Z+8, r24	; 0x08
    f736:	91 87       	std	Z+9, r25	; 0x09
    f738:	a2 87       	std	Z+10, r26	; 0x0a
    f73a:	b3 87       	std	Z+11, r27	; 0x0b
    f73c:	80 e0       	ldi	r24, 0x00	; 0
    f73e:	90 e0       	ldi	r25, 0x00	; 0
    f740:	ca 5e       	subi	r28, 0xEA	; 234
    f742:	de 4f       	sbci	r29, 0xFE	; 254
    f744:	e6 e0       	ldi	r30, 0x06	; 6
    f746:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

0000f74a <unix_time_to_fat>:
    f74a:	a4 e0       	ldi	r26, 0x04	; 4
    f74c:	b0 e0       	ldi	r27, 0x00	; 0
    f74e:	eb ea       	ldi	r30, 0xAB	; 171
    f750:	fb e7       	ldi	r31, 0x7B	; 123
    f752:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
    f756:	69 83       	std	Y+1, r22	; 0x01
    f758:	7a 83       	std	Y+2, r23	; 0x02
    f75a:	8b 83       	std	Y+3, r24	; 0x03
    f75c:	9c 83       	std	Y+4, r25	; 0x04
    f75e:	7a 01       	movw	r14, r20
    f760:	89 01       	movw	r16, r18
    f762:	ce 01       	movw	r24, r28
    f764:	01 96       	adiw	r24, 0x01	; 1
    f766:	0e 94 81 39 	call	0x7302	; 0x7302 <gmtime>
    f76a:	fc 01       	movw	r30, r24
    f76c:	22 85       	ldd	r18, Z+10	; 0x0a
    f76e:	33 85       	ldd	r19, Z+11	; 0x0b
    f770:	20 55       	subi	r18, 0x50	; 80
    f772:	31 09       	sbc	r19, r1
    f774:	c9 01       	movw	r24, r18
    f776:	98 2f       	mov	r25, r24
    f778:	88 27       	eor	r24, r24
    f77a:	99 0f       	add	r25, r25
    f77c:	20 85       	ldd	r18, Z+8	; 0x08
    f77e:	31 85       	ldd	r19, Z+9	; 0x09
    f780:	2f 5f       	subi	r18, 0xFF	; 255
    f782:	3f 4f       	sbci	r19, 0xFF	; 255
    f784:	45 e0       	ldi	r20, 0x05	; 5
    f786:	22 0f       	add	r18, r18
    f788:	33 1f       	adc	r19, r19
    f78a:	4a 95       	dec	r20
    f78c:	e1 f7       	brne	.-8      	; 0xf786 <unix_time_to_fat+0x3c>
    f78e:	28 2b       	or	r18, r24
    f790:	39 2b       	or	r19, r25
    f792:	86 81       	ldd	r24, Z+6	; 0x06
    f794:	97 81       	ldd	r25, Z+7	; 0x07
    f796:	28 2b       	or	r18, r24
    f798:	39 2b       	or	r19, r25
    f79a:	d7 01       	movw	r26, r14
    f79c:	2d 93       	st	X+, r18
    f79e:	3c 93       	st	X, r19
    f7a0:	84 81       	ldd	r24, Z+4	; 0x04
    f7a2:	20 e0       	ldi	r18, 0x00	; 0
    f7a4:	30 e0       	ldi	r19, 0x00	; 0
    f7a6:	38 2f       	mov	r19, r24
    f7a8:	33 0f       	add	r19, r19
    f7aa:	33 0f       	add	r19, r19
    f7ac:	33 0f       	add	r19, r19
    f7ae:	82 81       	ldd	r24, Z+2	; 0x02
    f7b0:	93 81       	ldd	r25, Z+3	; 0x03
    f7b2:	55 e0       	ldi	r21, 0x05	; 5
    f7b4:	88 0f       	add	r24, r24
    f7b6:	99 1f       	adc	r25, r25
    f7b8:	5a 95       	dec	r21
    f7ba:	e1 f7       	brne	.-8      	; 0xf7b4 <unix_time_to_fat+0x6a>
    f7bc:	82 2b       	or	r24, r18
    f7be:	93 2b       	or	r25, r19
    f7c0:	20 81       	ld	r18, Z
    f7c2:	31 81       	ldd	r19, Z+1	; 0x01
    f7c4:	36 95       	lsr	r19
    f7c6:	27 95       	ror	r18
    f7c8:	82 2b       	or	r24, r18
    f7ca:	93 2b       	or	r25, r19
    f7cc:	f8 01       	movw	r30, r16
    f7ce:	91 83       	std	Z+1, r25	; 0x01
    f7d0:	80 83       	st	Z, r24
    f7d2:	24 96       	adiw	r28, 0x04	; 4
    f7d4:	e6 e0       	ldi	r30, 0x06	; 6
    f7d6:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

0000f7da <utime>:
    f7da:	aa e1       	ldi	r26, 0x1A	; 26
    f7dc:	b1 e0       	ldi	r27, 0x01	; 1
    f7de:	e3 ef       	ldi	r30, 0xF3	; 243
    f7e0:	fb e7       	ldi	r31, 0x7B	; 123
    f7e2:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
    f7e6:	8c 01       	movw	r16, r24
    f7e8:	61 15       	cp	r22, r1
    f7ea:	71 05       	cpc	r23, r1
    f7ec:	31 f0       	breq	.+12     	; 0xf7fa <utime+0x20>
    f7ee:	fb 01       	movw	r30, r22
    f7f0:	64 81       	ldd	r22, Z+4	; 0x04
    f7f2:	75 81       	ldd	r23, Z+5	; 0x05
    f7f4:	86 81       	ldd	r24, Z+6	; 0x06
    f7f6:	97 81       	ldd	r25, Z+7	; 0x07
    f7f8:	04 c0       	rjmp	.+8      	; 0xf802 <utime+0x28>
    f7fa:	80 e0       	ldi	r24, 0x00	; 0
    f7fc:	90 e0       	ldi	r25, 0x00	; 0
    f7fe:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <time>
    f802:	9e 01       	movw	r18, r28
    f804:	29 5e       	subi	r18, 0xE9	; 233
    f806:	3e 4f       	sbci	r19, 0xFE	; 254
    f808:	ae 01       	movw	r20, r28
    f80a:	47 5e       	subi	r20, 0xE7	; 231
    f80c:	5e 4f       	sbci	r21, 0xFE	; 254
    f80e:	9d df       	rcall	.-198    	; 0xf74a <unix_time_to_fat>
    f810:	c7 5e       	subi	r28, 0xE7	; 231
    f812:	de 4f       	sbci	r29, 0xFE	; 254
    f814:	88 81       	ld	r24, Y
    f816:	99 81       	ldd	r25, Y+1	; 0x01
    f818:	c9 51       	subi	r28, 0x19	; 25
    f81a:	d1 40       	sbci	r29, 0x01	; 1
    f81c:	9e 83       	std	Y+6, r25	; 0x06
    f81e:	8d 83       	std	Y+5, r24	; 0x05
    f820:	c9 5e       	subi	r28, 0xE9	; 233
    f822:	de 4f       	sbci	r29, 0xFE	; 254
    f824:	88 81       	ld	r24, Y
    f826:	99 81       	ldd	r25, Y+1	; 0x01
    f828:	c7 51       	subi	r28, 0x17	; 23
    f82a:	d1 40       	sbci	r29, 0x01	; 1
    f82c:	98 87       	std	Y+8, r25	; 0x08
    f82e:	8f 83       	std	Y+7, r24	; 0x07
    f830:	be 01       	movw	r22, r28
    f832:	6f 5f       	subi	r22, 0xFF	; 255
    f834:	7f 4f       	sbci	r23, 0xFF	; 255
    f836:	c8 01       	movw	r24, r16
    f838:	0e 94 94 6a 	call	0xd528	; 0xd528 <f_utime>
    f83c:	84 31       	cpi	r24, 0x14	; 20
    f83e:	91 05       	cpc	r25, r1
    f840:	40 f4       	brcc	.+16     	; 0xf852 <utime+0x78>
    f842:	fc 01       	movw	r30, r24
    f844:	ee 5e       	subi	r30, 0xEE	; 238
    f846:	f8 4f       	sbci	r31, 0xF8	; 248
    f848:	80 81       	ld	r24, Z
    f84a:	08 2e       	mov	r0, r24
    f84c:	00 0c       	add	r0, r0
    f84e:	99 0b       	sbc	r25, r25
    f850:	02 c0       	rjmp	.+4      	; 0xf856 <utime+0x7c>
    f852:	83 e2       	ldi	r24, 0x23	; 35
    f854:	90 e0       	ldi	r25, 0x00	; 0
    f856:	c6 5e       	subi	r28, 0xE6	; 230
    f858:	de 4f       	sbci	r29, 0xFE	; 254
    f85a:	e4 e0       	ldi	r30, 0x04	; 4
    f85c:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

0000f860 <fileno_to_fatfs>:
    f860:	83 30       	cpi	r24, 0x03	; 3
    f862:	91 05       	cpc	r25, r1
    f864:	48 f4       	brcc	.+18     	; 0xf878 <fileno_to_fatfs+0x18>
    f866:	89 e0       	ldi	r24, 0x09	; 9
    f868:	90 e0       	ldi	r25, 0x00	; 0
    f86a:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f86e:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f872:	80 e0       	ldi	r24, 0x00	; 0
    f874:	90 e0       	ldi	r25, 0x00	; 0
    f876:	08 95       	ret
    f878:	78 dc       	rcall	.-1808   	; 0xf16a <fileno_to_stream>
    f87a:	00 97       	sbiw	r24, 0x00	; 0
    f87c:	d1 f3       	breq	.-12     	; 0xf872 <fileno_to_fatfs+0x12>
    f87e:	fc 01       	movw	r30, r24
    f880:	84 85       	ldd	r24, Z+12	; 0x0c
    f882:	95 85       	ldd	r25, Z+13	; 0x0d
    f884:	00 97       	sbiw	r24, 0x00	; 0
    f886:	79 f3       	breq	.-34     	; 0xf866 <fileno_to_fatfs+0x6>
    f888:	08 95       	ret

0000f88a <ftell>:
    f88a:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f88e:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f892:	4f dc       	rcall	.-1890   	; 0xf132 <fileno>
    f894:	83 30       	cpi	r24, 0x03	; 3
    f896:	91 05       	cpc	r25, r1
    f898:	48 f0       	brcs	.+18     	; 0xf8ac <ftell+0x22>
    f89a:	e2 df       	rcall	.-60     	; 0xf860 <fileno_to_fatfs>
    f89c:	00 97       	sbiw	r24, 0x00	; 0
    f89e:	51 f4       	brne	.+20     	; 0xf8b4 <ftell+0x2a>
    f8a0:	89 e0       	ldi	r24, 0x09	; 9
    f8a2:	90 e0       	ldi	r25, 0x00	; 0
    f8a4:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f8a8:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f8ac:	6f ef       	ldi	r22, 0xFF	; 255
    f8ae:	7f ef       	ldi	r23, 0xFF	; 255
    f8b0:	cb 01       	movw	r24, r22
    f8b2:	08 95       	ret
    f8b4:	fc 01       	movw	r30, r24
    f8b6:	60 89       	ldd	r22, Z+16	; 0x10
    f8b8:	71 89       	ldd	r23, Z+17	; 0x11
    f8ba:	82 89       	ldd	r24, Z+18	; 0x12
    f8bc:	93 89       	ldd	r25, Z+19	; 0x13
    f8be:	08 95       	ret

0000f8c0 <lseek>:
    f8c0:	a0 e0       	ldi	r26, 0x00	; 0
    f8c2:	b0 e0       	ldi	r27, 0x00	; 0
    f8c4:	e6 e6       	ldi	r30, 0x66	; 102
    f8c6:	fc e7       	ldi	r31, 0x7C	; 124
    f8c8:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
    f8cc:	5c 01       	movw	r10, r24
    f8ce:	6a 01       	movw	r12, r20
    f8d0:	7b 01       	movw	r14, r22
    f8d2:	89 01       	movw	r16, r18
    f8d4:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f8d8:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    f8dc:	c1 df       	rcall	.-126    	; 0xf860 <fileno_to_fatfs>
    f8de:	ec 01       	movw	r28, r24
    f8e0:	89 2b       	or	r24, r25
    f8e2:	19 f4       	brne	.+6      	; 0xf8ea <lseek+0x2a>
    f8e4:	88 e1       	ldi	r24, 0x18	; 24
    f8e6:	90 e0       	ldi	r25, 0x00	; 0
    f8e8:	26 c0       	rjmp	.+76     	; 0xf936 <lseek+0x76>
    f8ea:	83 e0       	ldi	r24, 0x03	; 3
    f8ec:	a8 16       	cp	r10, r24
    f8ee:	b1 04       	cpc	r11, r1
    f8f0:	d0 f1       	brcs	.+116    	; 0xf966 <lseek+0xa6>
    f8f2:	c5 01       	movw	r24, r10
    f8f4:	3a dc       	rcall	.-1932   	; 0xf16a <fileno_to_stream>
    f8f6:	fc 01       	movw	r30, r24
    f8f8:	93 81       	ldd	r25, Z+3	; 0x03
    f8fa:	90 64       	ori	r25, 0x40	; 64
    f8fc:	93 83       	std	Z+3, r25	; 0x03
    f8fe:	02 30       	cpi	r16, 0x02	; 2
    f900:	11 05       	cpc	r17, r1
    f902:	a9 f5       	brne	.+106    	; 0xf96e <lseek+0xae>
    f904:	8a 85       	ldd	r24, Y+10	; 0x0a
    f906:	9b 85       	ldd	r25, Y+11	; 0x0b
    f908:	ac 85       	ldd	r26, Y+12	; 0x0c
    f90a:	bd 85       	ldd	r27, Y+13	; 0x0d
    f90c:	c8 0e       	add	r12, r24
    f90e:	d9 1e       	adc	r13, r25
    f910:	ea 1e       	adc	r14, r26
    f912:	fb 1e       	adc	r15, r27
    f914:	b7 01       	movw	r22, r14
    f916:	a6 01       	movw	r20, r12
    f918:	ce 01       	movw	r24, r28
    f91a:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <f_lseek>
    f91e:	00 97       	sbiw	r24, 0x00	; 0
    f920:	79 f0       	breq	.+30     	; 0xf940 <lseek+0x80>
    f922:	84 31       	cpi	r24, 0x14	; 20
    f924:	91 05       	cpc	r25, r1
    f926:	58 f5       	brcc	.+86     	; 0xf97e <lseek+0xbe>
    f928:	fc 01       	movw	r30, r24
    f92a:	ee 5e       	subi	r30, 0xEE	; 238
    f92c:	f8 4f       	sbci	r31, 0xF8	; 248
    f92e:	80 81       	ld	r24, Z
    f930:	08 2e       	mov	r0, r24
    f932:	00 0c       	add	r0, r0
    f934:	99 0b       	sbc	r25, r25
    f936:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    f93a:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    f93e:	13 c0       	rjmp	.+38     	; 0xf966 <lseek+0xa6>
    f940:	68 89       	ldd	r22, Y+16	; 0x10
    f942:	79 89       	ldd	r23, Y+17	; 0x11
    f944:	8a 89       	ldd	r24, Y+18	; 0x12
    f946:	9b 89       	ldd	r25, Y+19	; 0x13
    f948:	c6 16       	cp	r12, r22
    f94a:	d7 06       	cpc	r13, r23
    f94c:	e8 06       	cpc	r14, r24
    f94e:	f9 06       	cpc	r15, r25
    f950:	c9 f0       	breq	.+50     	; 0xf984 <lseek+0xc4>
    f952:	84 e5       	ldi	r24, 0x54	; 84
    f954:	9c e0       	ldi	r25, 0x0C	; 12
    f956:	1f 92       	push	r1
    f958:	9f 93       	push	r25
    f95a:	8f 93       	push	r24
    f95c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    f960:	0f 90       	pop	r0
    f962:	0f 90       	pop	r0
    f964:	0f 90       	pop	r0
    f966:	6f ef       	ldi	r22, 0xFF	; 255
    f968:	7f ef       	ldi	r23, 0xFF	; 255
    f96a:	cb 01       	movw	r24, r22
    f96c:	0b c0       	rjmp	.+22     	; 0xf984 <lseek+0xc4>
    f96e:	01 30       	cpi	r16, 0x01	; 1
    f970:	11 05       	cpc	r17, r1
    f972:	81 f6       	brne	.-96     	; 0xf914 <lseek+0x54>
    f974:	88 89       	ldd	r24, Y+16	; 0x10
    f976:	99 89       	ldd	r25, Y+17	; 0x11
    f978:	aa 89       	ldd	r26, Y+18	; 0x12
    f97a:	bb 89       	ldd	r27, Y+19	; 0x13
    f97c:	c7 cf       	rjmp	.-114    	; 0xf90c <lseek+0x4c>
    f97e:	83 e2       	ldi	r24, 0x23	; 35
    f980:	90 e0       	ldi	r25, 0x00	; 0
    f982:	d9 cf       	rjmp	.-78     	; 0xf936 <lseek+0x76>
    f984:	cd b7       	in	r28, 0x3d	; 61
    f986:	de b7       	in	r29, 0x3e	; 62
    f988:	ea e0       	ldi	r30, 0x0A	; 10
    f98a:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0000f98e <fseek>:
    f98e:	cf 92       	push	r12
    f990:	df 92       	push	r13
    f992:	ef 92       	push	r14
    f994:	ff 92       	push	r15
    f996:	cf 93       	push	r28
    f998:	df 93       	push	r29
    f99a:	6a 01       	movw	r12, r20
    f99c:	7b 01       	movw	r14, r22
    f99e:	e9 01       	movw	r28, r18
    f9a0:	c8 db       	rcall	.-2160   	; 0xf132 <fileno>
    f9a2:	97 fd       	sbrc	r25, 7
    f9a4:	12 c0       	rjmp	.+36     	; 0xf9ca <fseek+0x3c>
    f9a6:	9e 01       	movw	r18, r28
    f9a8:	b7 01       	movw	r22, r14
    f9aa:	a6 01       	movw	r20, r12
    f9ac:	89 df       	rcall	.-238    	; 0xf8c0 <lseek>
    f9ae:	21 e0       	ldi	r18, 0x01	; 1
    f9b0:	30 e0       	ldi	r19, 0x00	; 0
    f9b2:	6f 3f       	cpi	r22, 0xFF	; 255
    f9b4:	7f 4f       	sbci	r23, 0xFF	; 255
    f9b6:	8f 4f       	sbci	r24, 0xFF	; 255
    f9b8:	9f 4f       	sbci	r25, 0xFF	; 255
    f9ba:	11 f0       	breq	.+4      	; 0xf9c0 <fseek+0x32>
    f9bc:	20 e0       	ldi	r18, 0x00	; 0
    f9be:	30 e0       	ldi	r19, 0x00	; 0
    f9c0:	88 27       	eor	r24, r24
    f9c2:	99 27       	eor	r25, r25
    f9c4:	82 1b       	sub	r24, r18
    f9c6:	93 0b       	sbc	r25, r19
    f9c8:	02 c0       	rjmp	.+4      	; 0xf9ce <fseek+0x40>
    f9ca:	8f ef       	ldi	r24, 0xFF	; 255
    f9cc:	9f ef       	ldi	r25, 0xFF	; 255
    f9ce:	df 91       	pop	r29
    f9d0:	cf 91       	pop	r28
    f9d2:	ff 90       	pop	r15
    f9d4:	ef 90       	pop	r14
    f9d6:	df 90       	pop	r13
    f9d8:	cf 90       	pop	r12
    f9da:	08 95       	ret

0000f9dc <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f9dc:	a2 e0       	ldi	r26, 0x02	; 2
    f9de:	b0 e0       	ldi	r27, 0x00	; 0
    f9e0:	e4 ef       	ldi	r30, 0xF4	; 244
    f9e2:	fc e7       	ldi	r31, 0x7C	; 124
    f9e4:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
    f9e8:	5c 01       	movw	r10, r24
    f9ea:	8b 01       	movw	r16, r22
    f9ec:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f9ee:	fb 01       	movw	r30, r22
    f9f0:	10 82       	st	Z, r1

    errno = 0;
    f9f2:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    f9f6:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f9fa:	b7 db       	rcall	.-2194   	; 0xf16a <fileno_to_stream>
    if(stream == stdin)
    f9fc:	7c 01       	movw	r14, r24
    f9fe:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob>
    fa02:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x1>
    fa06:	e8 16       	cp	r14, r24
    fa08:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    fa0a:	c9 f4       	brne	.+50     	; 0xfa3e <read+0x62>
    fa0c:	f7 01       	movw	r30, r14
    fa0e:	83 81       	ldd	r24, Z+3	; 0x03
    fa10:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    fa12:	83 83       	std	Z+3, r24	; 0x03
    fa14:	1a 82       	std	Y+2, r1	; 0x02
    fa16:	19 82       	std	Y+1, r1	; 0x01
    fa18:	c0 0e       	add	r12, r16
        while(count--)
    fa1a:	d1 1e       	adc	r13, r17
    fa1c:	0c 15       	cp	r16, r12
    fa1e:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    fa20:	09 f4       	brne	.+2      	; 0xfa24 <read+0x48>
    fa22:	3d c0       	rjmp	.+122    	; 0xfa9e <read+0xc2>
            if(ret < 0)
    fa24:	c7 01       	movw	r24, r14
    fa26:	6b da       	rcall	.-2858   	; 0xeefe <fgetc>
                break;
            
            *ptr++ = ret;
    fa28:	97 fd       	sbrc	r25, 7
    fa2a:	39 c0       	rjmp	.+114    	; 0xfa9e <read+0xc2>
    fa2c:	f8 01       	movw	r30, r16
            ++size;
    fa2e:	81 93       	st	Z+, r24
    fa30:	8f 01       	movw	r16, r30
    fa32:	89 81       	ldd	r24, Y+1	; 0x01
    fa34:	9a 81       	ldd	r25, Y+2	; 0x02
    fa36:	01 96       	adiw	r24, 0x01	; 1
    fa38:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    fa3a:	89 83       	std	Y+1, r24	; 0x01
    fa3c:	ef cf       	rjmp	.-34     	; 0xfa1c <read+0x40>
    fa3e:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x2>
    fa42:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x3>
    fa46:	e8 16       	cp	r14, r24
    fa48:	f9 06       	cpc	r15, r25
    fa4a:	71 f1       	breq	.+92     	; 0xfaa8 <read+0xcc>
    fa4c:	80 91 d1 1c 	lds	r24, 0x1CD1	; 0x801cd1 <__iob+0x4>
    fa50:	90 91 d2 1c 	lds	r25, 0x1CD2	; 0x801cd2 <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa54:	e8 16       	cp	r14, r24
    fa56:	f9 06       	cpc	r15, r25
    fa58:	39 f1       	breq	.+78     	; 0xfaa8 <read+0xcc>
    if ( fh == NULL )
    fa5a:	c5 01       	movw	r24, r10
    fa5c:	01 df       	rcall	.-510    	; 0xf860 <fileno_to_fatfs>
    {
        errno = EBADF;
    fa5e:	00 97       	sbiw	r24, 0x00	; 0
    fa60:	19 f4       	brne	.+6      	; 0xfa68 <read+0x8c>
    fa62:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    fa64:	90 e0       	ldi	r25, 0x00	; 0
    fa66:	16 c0       	rjmp	.+44     	; 0xfa94 <read+0xb8>
    fa68:	9e 01       	movw	r18, r28
    fa6a:	2f 5f       	subi	r18, 0xFF	; 255
    fa6c:	3f 4f       	sbci	r19, 0xFF	; 255
    fa6e:	a6 01       	movw	r20, r12
    fa70:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    fa72:	0e 94 cd 5d 	call	0xbb9a	; 0xbb9a <f_read>
    fa76:	00 97       	sbiw	r24, 0x00	; 0
    fa78:	91 f0       	breq	.+36     	; 0xfa9e <read+0xc2>
    fa7a:	84 31       	cpi	r24, 0x14	; 20
    fa7c:	91 05       	cpc	r25, r1
    fa7e:	40 f4       	brcc	.+16     	; 0xfa90 <read+0xb4>
    fa80:	fc 01       	movw	r30, r24
    fa82:	ee 5e       	subi	r30, 0xEE	; 238
    fa84:	f8 4f       	sbci	r31, 0xF8	; 248
    fa86:	80 81       	ld	r24, Z
    fa88:	08 2e       	mov	r0, r24
    fa8a:	00 0c       	add	r0, r0
    fa8c:	99 0b       	sbc	r25, r25
    fa8e:	02 c0       	rjmp	.+4      	; 0xfa94 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    fa90:	83 e2       	ldi	r24, 0x23	; 35
    fa92:	90 e0       	ldi	r25, 0x00	; 0
    fa94:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fa98:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fa9c:	05 c0       	rjmp	.+10     	; 0xfaa8 <read+0xcc>
    fa9e:	69 81       	ldd	r22, Y+1	; 0x01
    faa0:	7a 81       	ldd	r23, Y+2	; 0x02
    faa2:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    faa4:	90 e0       	ldi	r25, 0x00	; 0
    faa6:	03 c0       	rjmp	.+6      	; 0xfaae <read+0xd2>
    faa8:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    faaa:	7f ef       	ldi	r23, 0xFF	; 255
    faac:	cb 01       	movw	r24, r22
    faae:	22 96       	adiw	r28, 0x02	; 2
    fab0:	ea e0       	ldi	r30, 0x0A	; 10
    fab2:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0000fab6 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fab6:	0f 93       	push	r16
    fab8:	1f 93       	push	r17
    faba:	cf 93       	push	r28
    fabc:	df 93       	push	r29
    fabe:	ec 01       	movw	r28, r24
    fac0:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fac2:	64 9f       	mul	r22, r20
    fac4:	80 01       	movw	r16, r0
    fac6:	65 9f       	mul	r22, r21
    fac8:	10 0d       	add	r17, r0
    faca:	74 9f       	mul	r23, r20
    facc:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    face:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    fad0:	30 db       	rcall	.-2464   	; 0xf132 <fileno>
    fad2:	a8 01       	movw	r20, r16
    fad4:	be 01       	movw	r22, r28
    if(ret < 0)
    fad6:	82 df       	rcall	.-252    	; 0xf9dc <read>
    fad8:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fada:	02 c0       	rjmp	.+4      	; 0xfae0 <fread+0x2a>
    fadc:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    fade:	02 c0       	rjmp	.+4      	; 0xfae4 <fread+0x2e>
    fae0:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fae2:	90 e0       	ldi	r25, 0x00	; 0
    fae4:	df 91       	pop	r29
    fae6:	cf 91       	pop	r28
    fae8:	1f 91       	pop	r17
    faea:	0f 91       	pop	r16
    faec:	08 95       	ret

0000faee <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    faee:	cf 93       	push	r28
    faf0:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    faf2:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    faf6:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fafa:	83 30       	cpi	r24, 0x03	; 3
    fafc:	91 05       	cpc	r25, r1
    fafe:	18 f4       	brcc	.+6      	; 0xfb06 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    fb00:	89 e0       	ldi	r24, 0x09	; 9
    fb02:	90 e0       	ldi	r25, 0x00	; 0
    fb04:	18 c0       	rjmp	.+48     	; 0xfb36 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    fb06:	ec 01       	movw	r28, r24
    fb08:	30 db       	rcall	.-2464   	; 0xf16a <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    fb0a:	fc 01       	movw	r30, r24
    fb0c:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fb0e:	90 64       	ori	r25, 0x40	; 64
    fb10:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    fb12:	ce 01       	movw	r24, r28
    fb14:	a5 de       	rcall	.-694    	; 0xf860 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    fb16:	00 97       	sbiw	r24, 0x00	; 0
    fb18:	99 f3       	breq	.-26     	; 0xfb00 <syncfs+0x12>
    if (res != FR_OK)
    fb1a:	0e 94 af 60 	call	0xc15e	; 0xc15e <f_sync>
    fb1e:	00 97       	sbiw	r24, 0x00	; 0
    fb20:	a1 f0       	breq	.+40     	; 0xfb4a <syncfs+0x5c>
    fb22:	84 31       	cpi	r24, 0x14	; 20
    fb24:	91 05       	cpc	r25, r1
    fb26:	70 f4       	brcc	.+28     	; 0xfb44 <syncfs+0x56>
    fb28:	fc 01       	movw	r30, r24
    fb2a:	ee 5e       	subi	r30, 0xEE	; 238
    fb2c:	f8 4f       	sbci	r31, 0xF8	; 248
    fb2e:	80 81       	ld	r24, Z
    fb30:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    fb32:	00 0c       	add	r0, r0
    fb34:	99 0b       	sbc	r25, r25
    fb36:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
        return(-1);
    fb3a:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    fb3e:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    fb40:	9f ef       	ldi	r25, 0xFF	; 255
    fb42:	05 c0       	rjmp	.+10     	; 0xfb4e <syncfs+0x60>
    fb44:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    fb46:	90 e0       	ldi	r25, 0x00	; 0
    fb48:	f6 cf       	rjmp	.-20     	; 0xfb36 <syncfs+0x48>
}
    fb4a:	80 e0       	ldi	r24, 0x00	; 0
    fb4c:	90 e0       	ldi	r25, 0x00	; 0
    fb4e:	df 91       	pop	r29
    fb50:	cf 91       	pop	r28
    fb52:	08 95       	ret

0000fb54 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    fb54:	cf 93       	push	r28
    fb56:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    fb58:	c0 e0       	ldi	r28, 0x00	; 0
    fb5a:	d0 e0       	ldi	r29, 0x00	; 0
    fb5c:	21 96       	adiw	r28, 0x01	; 1
    fb5e:	c0 31       	cpi	r28, 0x10	; 16
    fb60:	d1 05       	cpc	r29, r1
    fb62:	51 f0       	breq	.+20     	; 0xfb78 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fb64:	c3 30       	cpi	r28, 0x03	; 3
    fb66:	d1 05       	cpc	r29, r1
    fb68:	cc f3       	brlt	.-14     	; 0xfb5c <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    fb6a:	ce 01       	movw	r24, r28
    fb6c:	79 de       	rcall	.-782    	; 0xf860 <fileno_to_fatfs>
        if(fh == NULL)
    fb6e:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    fb70:	a9 f3       	breq	.-22     	; 0xfb5c <sync+0x8>
    fb72:	ce 01       	movw	r24, r28
    fb74:	bc df       	rcall	.-136    	; 0xfaee <syncfs>
    }
}
    fb76:	f2 cf       	rjmp	.-28     	; 0xfb5c <sync+0x8>
    fb78:	df 91       	pop	r29
    fb7a:	cf 91       	pop	r28
    fb7c:	08 95       	ret

0000fb7e <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    fb7e:	a2 e0       	ldi	r26, 0x02	; 2
    fb80:	b0 e0       	ldi	r27, 0x00	; 0
    fb82:	e5 ec       	ldi	r30, 0xC5	; 197
    fb84:	fd e7       	ldi	r31, 0x7D	; 125
    fb86:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
    fb8a:	8c 01       	movw	r16, r24
    fb8c:	b6 2e       	mov	r11, r22
    fb8e:	f7 2e       	mov	r15, r23
    fb90:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    fb92:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    fb96:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    fb9a:	e7 da       	rcall	.-2610   	; 0xf16a <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    fb9c:	6c 01       	movw	r12, r24
    fb9e:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x2>
    fba2:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x3>
    fba6:	c8 16       	cp	r12, r24
    fba8:	d9 06       	cpc	r13, r25
    fbaa:	39 f0       	breq	.+14     	; 0xfbba <write+0x3c>
    fbac:	80 91 d1 1c 	lds	r24, 0x1CD1	; 0x801cd1 <__iob+0x4>
    fbb0:	90 91 d2 1c 	lds	r25, 0x1CD2	; 0x801cd2 <__iob+0x5>
    fbb4:	c8 16       	cp	r12, r24
    fbb6:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    fbb8:	d1 f4       	brne	.+52     	; 0xfbee <write+0x70>
    fbba:	1a 82       	std	Y+2, r1	; 0x02
    fbbc:	19 82       	std	Y+1, r1	; 0x01
    fbbe:	0b 2d       	mov	r16, r11
    fbc0:	1f 2d       	mov	r17, r15
    fbc2:	78 01       	movw	r14, r16
    fbc4:	e8 0c       	add	r14, r8
        while(count--)
    fbc6:	f9 1c       	adc	r15, r9
    fbc8:	0e 15       	cp	r16, r14
    fbca:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    fbcc:	d1 f1       	breq	.+116    	; 0xfc42 <write+0xc4>
    fbce:	f8 01       	movw	r30, r16
    fbd0:	a1 90       	ld	r10, Z+
    fbd2:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    fbd4:	b1 2c       	mov	r11, r1
    fbd6:	b6 01       	movw	r22, r12
    fbd8:	c5 01       	movw	r24, r10
            if(c != ret)
    fbda:	e2 d9       	rcall	.-3132   	; 0xefa0 <fputc>
    fbdc:	a8 16       	cp	r10, r24
    fbde:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fbe0:	81 f5       	brne	.+96     	; 0xfc42 <write+0xc4>
    fbe2:	89 81       	ldd	r24, Y+1	; 0x01
    fbe4:	9a 81       	ldd	r25, Y+2	; 0x02
    fbe6:	01 96       	adiw	r24, 0x01	; 1
    fbe8:	9a 83       	std	Y+2, r25	; 0x02
    fbea:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    fbec:	ed cf       	rjmp	.-38     	; 0xfbc8 <write+0x4a>
    fbee:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob>
    fbf2:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x1>
    fbf6:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fbf8:	d9 06       	cpc	r13, r25
    fbfa:	41 f1       	breq	.+80     	; 0xfc4c <write+0xce>
    fbfc:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    fbfe:	30 de       	rcall	.-928    	; 0xf860 <fileno_to_fatfs>
    fc00:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    fc02:	19 f4       	brne	.+6      	; 0xfc0a <write+0x8c>
    fc04:	89 e0       	ldi	r24, 0x09	; 9
    fc06:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    fc08:	17 c0       	rjmp	.+46     	; 0xfc38 <write+0xba>
    fc0a:	9e 01       	movw	r18, r28
    fc0c:	2f 5f       	subi	r18, 0xFF	; 255
    fc0e:	3f 4f       	sbci	r19, 0xFF	; 255
    fc10:	a4 01       	movw	r20, r8
    fc12:	6b 2d       	mov	r22, r11
    fc14:	7f 2d       	mov	r23, r15
    fc16:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <f_write>
    if(res != FR_OK)
    fc1a:	00 97       	sbiw	r24, 0x00	; 0
    fc1c:	91 f0       	breq	.+36     	; 0xfc42 <write+0xc4>
    fc1e:	84 31       	cpi	r24, 0x14	; 20
    fc20:	91 05       	cpc	r25, r1
    fc22:	40 f4       	brcc	.+16     	; 0xfc34 <write+0xb6>
    fc24:	fc 01       	movw	r30, r24
    fc26:	ee 5e       	subi	r30, 0xEE	; 238
    fc28:	f8 4f       	sbci	r31, 0xF8	; 248
    fc2a:	80 81       	ld	r24, Z
    fc2c:	08 2e       	mov	r0, r24
    fc2e:	00 0c       	add	r0, r0
    fc30:	99 0b       	sbc	r25, r25
    fc32:	02 c0       	rjmp	.+4      	; 0xfc38 <write+0xba>
    fc34:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    fc36:	90 e0       	ldi	r25, 0x00	; 0
    fc38:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fc3c:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fc40:	05 c0       	rjmp	.+10     	; 0xfc4c <write+0xce>
    fc42:	69 81       	ldd	r22, Y+1	; 0x01
    fc44:	7a 81       	ldd	r23, Y+2	; 0x02
    fc46:	80 e0       	ldi	r24, 0x00	; 0
    fc48:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    fc4a:	03 c0       	rjmp	.+6      	; 0xfc52 <write+0xd4>
    fc4c:	6f ef       	ldi	r22, 0xFF	; 255
    fc4e:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fc50:	cb 01       	movw	r24, r22
    fc52:	22 96       	adiw	r28, 0x02	; 2
    fc54:	ec e0       	ldi	r30, 0x0C	; 12
    fc56:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

0000fc5a <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fc5a:	0f 93       	push	r16
    fc5c:	1f 93       	push	r17
    fc5e:	cf 93       	push	r28
    fc60:	df 93       	push	r29
    fc62:	ec 01       	movw	r28, r24
    fc64:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fc66:	64 9f       	mul	r22, r20
    fc68:	80 01       	movw	r16, r0
    fc6a:	65 9f       	mul	r22, r21
    fc6c:	10 0d       	add	r17, r0
    fc6e:	74 9f       	mul	r23, r20
    fc70:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fc72:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    fc74:	5e da       	rcall	.-2884   	; 0xf132 <fileno>
    fc76:	a8 01       	movw	r20, r16
    fc78:	be 01       	movw	r22, r28

    if(ret < 0)
    fc7a:	81 df       	rcall	.-254    	; 0xfb7e <write>
    fc7c:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fc7e:	02 c0       	rjmp	.+4      	; 0xfc84 <fwrite+0x2a>
    fc80:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fc82:	02 c0       	rjmp	.+4      	; 0xfc88 <fwrite+0x2e>
    fc84:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fc86:	90 e0       	ldi	r25, 0x00	; 0
    fc88:	df 91       	pop	r29
    fc8a:	cf 91       	pop	r28
    fc8c:	1f 91       	pop	r17
    fc8e:	0f 91       	pop	r16
    fc90:	08 95       	ret

0000fc92 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fc92:	0f 93       	push	r16
    fc94:	1f 93       	push	r17
    fc96:	cf 93       	push	r28
    fc98:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fc9a:	83 30       	cpi	r24, 0x03	; 3
    fc9c:	91 05       	cpc	r25, r1
    fc9e:	48 f4       	brcc	.+18     	; 0xfcb2 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fca0:	89 e0       	ldi	r24, 0x09	; 9
    fca2:	90 e0       	ldi	r25, 0x00	; 0
    fca4:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fca8:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
        return(-1);
    fcac:	8f ef       	ldi	r24, 0xFF	; 255
    fcae:	9f ef       	ldi	r25, 0xFF	; 255
    fcb0:	20 c0       	rjmp	.+64     	; 0xfcf2 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fcb2:	ec 01       	movw	r28, r24
    fcb4:	5a da       	rcall	.-2892   	; 0xf16a <fileno_to_stream>
    if(stream == NULL)
    fcb6:	8c 01       	movw	r16, r24
    fcb8:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fcba:	c1 f3       	breq	.-16     	; 0xfcac <free_file_descriptor+0x1a>
    fcbc:	f8 01       	movw	r30, r16
    fcbe:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fcc0:	95 85       	ldd	r25, Z+13	; 0x0d
    fcc2:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fcc4:	11 f0       	breq	.+4      	; 0xfcca <free_file_descriptor+0x38>
    fcc6:	0e 94 aa 2a 	call	0x5554	; 0x5554 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fcca:	f8 01       	movw	r30, r16
    fccc:	80 81       	ld	r24, Z
    fcce:	91 81       	ldd	r25, Z+1	; 0x01
    fcd0:	00 97       	sbiw	r24, 0x00	; 0
    fcd2:	21 f0       	breq	.+8      	; 0xfcdc <free_file_descriptor+0x4a>
    fcd4:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fcd6:	27 fd       	sbrc	r18, 7
    fcd8:	0e 94 aa 2a 	call	0x5554	; 0x5554 <safefree>
    }

    __iob[fileno]  = NULL;
    fcdc:	fe 01       	movw	r30, r28
    fcde:	ee 0f       	add	r30, r30
    fce0:	ff 1f       	adc	r31, r31
    fce2:	e3 53       	subi	r30, 0x33	; 51
    fce4:	f3 4e       	sbci	r31, 0xE3	; 227
    fce6:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fce8:	10 82       	st	Z, r1
    fcea:	c8 01       	movw	r24, r16
    fcec:	0e 94 aa 2a 	call	0x5554	; 0x5554 <safefree>
    return(fileno);
}
    fcf0:	ce 01       	movw	r24, r28
    fcf2:	df 91       	pop	r29
    fcf4:	cf 91       	pop	r28
    fcf6:	1f 91       	pop	r17
    fcf8:	0f 91       	pop	r16
    fcfa:	08 95       	ret

0000fcfc <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fcfc:	0f 93       	push	r16
    fcfe:	1f 93       	push	r17
    fd00:	cf 93       	push	r28
    fd02:	df 93       	push	r29
    fd04:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fd06:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    fd0a:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fd0e:	2d da       	rcall	.-2982   	; 0xf16a <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fd10:	89 2b       	or	r24, r25
    fd12:	d9 f0       	breq	.+54     	; 0xfd4a <close+0x4e>
    if(fh == NULL)
    fd14:	c8 01       	movw	r24, r16
    fd16:	a4 dd       	rcall	.-1208   	; 0xf860 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fd18:	00 97       	sbiw	r24, 0x00	; 0
    fd1a:	b9 f0       	breq	.+46     	; 0xfd4a <close+0x4e>
    free_file_descriptor(fileno);
    fd1c:	0e 94 2f 61 	call	0xc25e	; 0xc25e <f_close>
    fd20:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fd22:	c8 01       	movw	r24, r16
    fd24:	b6 df       	rcall	.-148    	; 0xfc92 <free_file_descriptor>
    fd26:	20 97       	sbiw	r28, 0x00	; 0
    fd28:	99 f0       	breq	.+38     	; 0xfd50 <close+0x54>
    fd2a:	c4 31       	cpi	r28, 0x14	; 20
    fd2c:	d1 05       	cpc	r29, r1
    fd2e:	38 f4       	brcc	.+14     	; 0xfd3e <close+0x42>
    fd30:	ce 5e       	subi	r28, 0xEE	; 238
    fd32:	d8 4f       	sbci	r29, 0xF8	; 248
    fd34:	88 81       	ld	r24, Y
    fd36:	08 2e       	mov	r0, r24
    fd38:	00 0c       	add	r0, r0
    fd3a:	99 0b       	sbc	r25, r25
    fd3c:	02 c0       	rjmp	.+4      	; 0xfd42 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fd3e:	83 e2       	ldi	r24, 0x23	; 35
    fd40:	90 e0       	ldi	r25, 0x00	; 0
    fd42:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
        return(-1);
    fd46:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    fd4a:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fd4c:	9f ef       	ldi	r25, 0xFF	; 255
    fd4e:	02 c0       	rjmp	.+4      	; 0xfd54 <close+0x58>
}
    fd50:	80 e0       	ldi	r24, 0x00	; 0
    fd52:	90 e0       	ldi	r25, 0x00	; 0
    fd54:	df 91       	pop	r29
    fd56:	cf 91       	pop	r28
    fd58:	1f 91       	pop	r17
    fd5a:	0f 91       	pop	r16
    fd5c:	08 95       	ret

0000fd5e <fclose>:
    fd5e:	e9 d9       	rcall	.-3118   	; 0xf132 <fileno>
    fd60:	97 fd       	sbrc	r25, 7
    fd62:	02 c0       	rjmp	.+4      	; 0xfd68 <fclose+0xa>
    fd64:	cb cf       	rjmp	.-106    	; 0xfcfc <close>
    fd66:	08 95       	ret
    fd68:	8f ef       	ldi	r24, 0xFF	; 255
    fd6a:	9f ef       	ldi	r25, 0xFF	; 255
    fd6c:	08 95       	ret

0000fd6e <new_file_descriptor>:
    fd6e:	0f 93       	push	r16
    fd70:	1f 93       	push	r17
    fd72:	cf 93       	push	r28
    fd74:	df 93       	push	r29
    fd76:	ed ec       	ldi	r30, 0xCD	; 205
    fd78:	fc e1       	ldi	r31, 0x1C	; 28
    fd7a:	c0 e0       	ldi	r28, 0x00	; 0
    fd7c:	d0 e0       	ldi	r29, 0x00	; 0
    fd7e:	21 96       	adiw	r28, 0x01	; 1
    fd80:	c0 31       	cpi	r28, 0x10	; 16
    fd82:	d1 05       	cpc	r29, r1
    fd84:	49 f0       	breq	.+18     	; 0xfd98 <new_file_descriptor+0x2a>
    fd86:	c3 30       	cpi	r28, 0x03	; 3
    fd88:	d1 05       	cpc	r29, r1
    fd8a:	24 f0       	brlt	.+8      	; 0xfd94 <new_file_descriptor+0x26>
    fd8c:	82 81       	ldd	r24, Z+2	; 0x02
    fd8e:	93 81       	ldd	r25, Z+3	; 0x03
    fd90:	89 2b       	or	r24, r25
    fd92:	59 f0       	breq	.+22     	; 0xfdaa <new_file_descriptor+0x3c>
    fd94:	32 96       	adiw	r30, 0x02	; 2
    fd96:	f3 cf       	rjmp	.-26     	; 0xfd7e <new_file_descriptor+0x10>
    fd98:	87 e1       	ldi	r24, 0x17	; 23
    fd9a:	90 e0       	ldi	r25, 0x00	; 0
    fd9c:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fda0:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    fda4:	8f ef       	ldi	r24, 0xFF	; 255
    fda6:	9f ef       	ldi	r25, 0xFF	; 255
    fda8:	22 c0       	rjmp	.+68     	; 0xfdee <new_file_descriptor+0x80>
    fdaa:	61 e0       	ldi	r22, 0x01	; 1
    fdac:	70 e0       	ldi	r23, 0x00	; 0
    fdae:	8e e0       	ldi	r24, 0x0E	; 14
    fdb0:	90 e0       	ldi	r25, 0x00	; 0
    fdb2:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
    fdb6:	8c 01       	movw	r16, r24
    fdb8:	89 2b       	or	r24, r25
    fdba:	59 f0       	breq	.+22     	; 0xfdd2 <new_file_descriptor+0x64>
    fdbc:	61 e0       	ldi	r22, 0x01	; 1
    fdbe:	70 e0       	ldi	r23, 0x00	; 0
    fdc0:	84 e2       	ldi	r24, 0x24	; 36
    fdc2:	92 e0       	ldi	r25, 0x02	; 2
    fdc4:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
    fdc8:	00 97       	sbiw	r24, 0x00	; 0
    fdca:	31 f4       	brne	.+12     	; 0xfdd8 <new_file_descriptor+0x6a>
    fdcc:	c8 01       	movw	r24, r16
    fdce:	0e 94 aa 2a 	call	0x5554	; 0x5554 <safefree>
    fdd2:	8c e0       	ldi	r24, 0x0C	; 12
    fdd4:	90 e0       	ldi	r25, 0x00	; 0
    fdd6:	e2 cf       	rjmp	.-60     	; 0xfd9c <new_file_descriptor+0x2e>
    fdd8:	fe 01       	movw	r30, r28
    fdda:	ee 0f       	add	r30, r30
    fddc:	ff 1f       	adc	r31, r31
    fdde:	e3 53       	subi	r30, 0x33	; 51
    fde0:	f3 4e       	sbci	r31, 0xE3	; 227
    fde2:	11 83       	std	Z+1, r17	; 0x01
    fde4:	00 83       	st	Z, r16
    fde6:	f8 01       	movw	r30, r16
    fde8:	95 87       	std	Z+13, r25	; 0x0d
    fdea:	84 87       	std	Z+12, r24	; 0x0c
    fdec:	ce 01       	movw	r24, r28
    fdee:	df 91       	pop	r29
    fdf0:	cf 91       	pop	r28
    fdf2:	1f 91       	pop	r17
    fdf4:	0f 91       	pop	r16
    fdf6:	08 95       	ret

0000fdf8 <open>:
    fdf8:	a0 e0       	ldi	r26, 0x00	; 0
    fdfa:	b0 e0       	ldi	r27, 0x00	; 0
    fdfc:	e2 e0       	ldi	r30, 0x02	; 2
    fdfe:	ff e7       	ldi	r31, 0x7F	; 127
    fe00:	0c 94 2d e4 	jmp	0x1c85a	; 0x1c85a <__prologue_saves__+0x8>
    fe04:	5c 01       	movw	r10, r24
    fe06:	6b 01       	movw	r12, r22
    fe08:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno+0x1>
    fe0c:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <errno>
    fe10:	7b 01       	movw	r14, r22
    fe12:	83 e0       	ldi	r24, 0x03	; 3
    fe14:	e8 22       	and	r14, r24
    fe16:	ff 24       	eor	r15, r15
    fe18:	e2 e0       	ldi	r30, 0x02	; 2
    fe1a:	ee 16       	cp	r14, r30
    fe1c:	f1 04       	cpc	r15, r1
    fe1e:	31 f0       	breq	.+12     	; 0xfe2c <open+0x34>
    fe20:	e1 14       	cp	r14, r1
    fe22:	f1 04       	cpc	r15, r1
    fe24:	31 f0       	breq	.+12     	; 0xfe32 <open+0x3a>
    fe26:	02 e0       	ldi	r16, 0x02	; 2
    fe28:	10 e0       	ldi	r17, 0x00	; 0
    fe2a:	05 c0       	rjmp	.+10     	; 0xfe36 <open+0x3e>
    fe2c:	03 e0       	ldi	r16, 0x03	; 3
    fe2e:	10 e0       	ldi	r17, 0x00	; 0
    fe30:	02 c0       	rjmp	.+4      	; 0xfe36 <open+0x3e>
    fe32:	01 e0       	ldi	r16, 0x01	; 1
    fe34:	10 e0       	ldi	r17, 0x00	; 0
    fe36:	c6 fe       	sbrs	r12, 6
    fe38:	05 c0       	rjmp	.+10     	; 0xfe44 <open+0x4c>
    fe3a:	d1 fe       	sbrs	r13, 1
    fe3c:	02 c0       	rjmp	.+4      	; 0xfe42 <open+0x4a>
    fe3e:	08 60       	ori	r16, 0x08	; 8
    fe40:	01 c0       	rjmp	.+2      	; 0xfe44 <open+0x4c>
    fe42:	00 61       	ori	r16, 0x10	; 16
    fe44:	94 df       	rcall	.-216    	; 0xfd6e <new_file_descriptor>
    fe46:	3c 01       	movw	r6, r24
    fe48:	90 d9       	rcall	.-3296   	; 0xf16a <fileno_to_stream>
    fe4a:	ec 01       	movw	r28, r24
    fe4c:	c3 01       	movw	r24, r6
    fe4e:	20 97       	sbiw	r28, 0x00	; 0
    fe50:	09 f4       	brne	.+2      	; 0xfe54 <open+0x5c>
    fe52:	48 c0       	rjmp	.+144    	; 0xfee4 <open+0xec>
    fe54:	05 dd       	rcall	.-1526   	; 0xf860 <fileno_to_fatfs>
    fe56:	4c 01       	movw	r8, r24
    fe58:	00 97       	sbiw	r24, 0x00	; 0
    fe5a:	59 f4       	brne	.+22     	; 0xfe72 <open+0x7a>
    fe5c:	c3 01       	movw	r24, r6
    fe5e:	19 df       	rcall	.-462    	; 0xfc92 <free_file_descriptor>
    fe60:	89 e0       	ldi	r24, 0x09	; 9
    fe62:	90 e0       	ldi	r25, 0x00	; 0
    fe64:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fe68:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    fe6c:	8f ef       	ldi	r24, 0xFF	; 255
    fe6e:	9f ef       	ldi	r25, 0xFF	; 255
    fe70:	5d c0       	rjmp	.+186    	; 0xff2c <__DATA_REGION_LENGTH__+0x2c>
    fe72:	40 2f       	mov	r20, r16
    fe74:	b5 01       	movw	r22, r10
    fe76:	0e 94 12 5c 	call	0xb824	; 0xb824 <f_open>
    fe7a:	00 97       	sbiw	r24, 0x00	; 0
    fe7c:	91 f0       	breq	.+36     	; 0xfea2 <open+0xaa>
    fe7e:	84 31       	cpi	r24, 0x14	; 20
    fe80:	91 05       	cpc	r25, r1
    fe82:	40 f4       	brcc	.+16     	; 0xfe94 <open+0x9c>
    fe84:	fc 01       	movw	r30, r24
    fe86:	ee 5e       	subi	r30, 0xEE	; 238
    fe88:	f8 4f       	sbci	r31, 0xF8	; 248
    fe8a:	80 81       	ld	r24, Z
    fe8c:	08 2e       	mov	r0, r24
    fe8e:	00 0c       	add	r0, r0
    fe90:	99 0b       	sbc	r25, r25
    fe92:	02 c0       	rjmp	.+4      	; 0xfe98 <open+0xa0>
    fe94:	83 e2       	ldi	r24, 0x23	; 35
    fe96:	90 e0       	ldi	r25, 0x00	; 0
    fe98:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fe9c:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    fea0:	20 c0       	rjmp	.+64     	; 0xfee2 <open+0xea>
    fea2:	d2 fe       	sbrs	r13, 2
    fea4:	21 c0       	rjmp	.+66     	; 0xfee8 <open+0xf0>
    fea6:	f4 01       	movw	r30, r8
    fea8:	42 85       	ldd	r20, Z+10	; 0x0a
    feaa:	53 85       	ldd	r21, Z+11	; 0x0b
    feac:	64 85       	ldd	r22, Z+12	; 0x0c
    feae:	75 85       	ldd	r23, Z+13	; 0x0d
    feb0:	c4 01       	movw	r24, r8
    feb2:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <f_lseek>
    feb6:	00 97       	sbiw	r24, 0x00	; 0
    feb8:	b9 f0       	breq	.+46     	; 0xfee8 <open+0xf0>
    feba:	84 31       	cpi	r24, 0x14	; 20
    febc:	91 05       	cpc	r25, r1
    febe:	40 f4       	brcc	.+16     	; 0xfed0 <open+0xd8>
    fec0:	fc 01       	movw	r30, r24
    fec2:	ee 5e       	subi	r30, 0xEE	; 238
    fec4:	f8 4f       	sbci	r31, 0xF8	; 248
    fec6:	80 81       	ld	r24, Z
    fec8:	08 2e       	mov	r0, r24
    feca:	00 0c       	add	r0, r0
    fecc:	99 0b       	sbc	r25, r25
    fece:	02 c0       	rjmp	.+4      	; 0xfed4 <open+0xdc>
    fed0:	83 e2       	ldi	r24, 0x23	; 35
    fed2:	90 e0       	ldi	r25, 0x00	; 0
    fed4:	90 93 cc 1c 	sts	0x1CCC, r25	; 0x801ccc <errno+0x1>
    fed8:	80 93 cb 1c 	sts	0x1CCB, r24	; 0x801ccb <errno>
    fedc:	c4 01       	movw	r24, r8
    fede:	0e 94 2f 61 	call	0xc25e	; 0xc25e <f_close>
    fee2:	c3 01       	movw	r24, r6
    fee4:	d6 de       	rcall	.-596    	; 0xfc92 <free_file_descriptor>
    fee6:	c2 cf       	rjmp	.-124    	; 0xfe6c <open+0x74>
    fee8:	f2 e0       	ldi	r31, 0x02	; 2
    feea:	ef 16       	cp	r14, r31
    feec:	f1 04       	cpc	r15, r1
    feee:	51 f4       	brne	.+20     	; 0xff04 <__DATA_REGION_LENGTH__+0x4>
    fef0:	84 e3       	ldi	r24, 0x34	; 52
    fef2:	97 e7       	ldi	r25, 0x77	; 119
    fef4:	99 87       	std	Y+9, r25	; 0x09
    fef6:	88 87       	std	Y+8, r24	; 0x08
    fef8:	81 eb       	ldi	r24, 0xB1	; 177
    fefa:	96 e7       	ldi	r25, 0x76	; 118
    fefc:	9b 87       	std	Y+11, r25	; 0x0b
    fefe:	8a 87       	std	Y+10, r24	; 0x0a
    ff00:	83 e0       	ldi	r24, 0x03	; 3
    ff02:	12 c0       	rjmp	.+36     	; 0xff28 <__DATA_REGION_LENGTH__+0x28>
    ff04:	e1 14       	cp	r14, r1
    ff06:	f1 04       	cpc	r15, r1
    ff08:	41 f4       	brne	.+16     	; 0xff1a <__DATA_REGION_LENGTH__+0x1a>
    ff0a:	19 86       	std	Y+9, r1	; 0x09
    ff0c:	18 86       	std	Y+8, r1	; 0x08
    ff0e:	81 eb       	ldi	r24, 0xB1	; 177
    ff10:	96 e7       	ldi	r25, 0x76	; 118
    ff12:	9b 87       	std	Y+11, r25	; 0x0b
    ff14:	8a 87       	std	Y+10, r24	; 0x0a
    ff16:	81 e0       	ldi	r24, 0x01	; 1
    ff18:	07 c0       	rjmp	.+14     	; 0xff28 <__DATA_REGION_LENGTH__+0x28>
    ff1a:	84 e3       	ldi	r24, 0x34	; 52
    ff1c:	97 e7       	ldi	r25, 0x77	; 119
    ff1e:	99 87       	std	Y+9, r25	; 0x09
    ff20:	88 87       	std	Y+8, r24	; 0x08
    ff22:	1b 86       	std	Y+11, r1	; 0x0b
    ff24:	1a 86       	std	Y+10, r1	; 0x0a
    ff26:	82 e0       	ldi	r24, 0x02	; 2
    ff28:	8b 83       	std	Y+3, r24	; 0x03
    ff2a:	c3 01       	movw	r24, r6
    ff2c:	cd b7       	in	r28, 0x3d	; 61
    ff2e:	de b7       	in	r29, 0x3e	; 62
    ff30:	ee e0       	ldi	r30, 0x0E	; 14
    ff32:	0c 94 49 e4 	jmp	0x1c892	; 0x1c892 <__epilogue_restores__+0x8>

0000ff36 <posix_fopen_modes_to_open>:
    ff36:	cf 93       	push	r28
    ff38:	df 93       	push	r29
    ff3a:	ec 01       	movw	r28, r24
    ff3c:	63 e4       	ldi	r22, 0x43	; 67
    ff3e:	77 e0       	ldi	r23, 0x07	; 7
    ff40:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff44:	00 97       	sbiw	r24, 0x00	; 0
    ff46:	09 f4       	brne	.+2      	; 0xff4a <posix_fopen_modes_to_open+0x14>
    ff48:	5d c0       	rjmp	.+186    	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    ff4a:	68 e8       	ldi	r22, 0x88	; 136
    ff4c:	78 e0       	ldi	r23, 0x08	; 8
    ff4e:	ce 01       	movw	r24, r28
    ff50:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff54:	00 97       	sbiw	r24, 0x00	; 0
    ff56:	09 f4       	brne	.+2      	; 0xff5a <posix_fopen_modes_to_open+0x24>
    ff58:	55 c0       	rjmp	.+170    	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    ff5a:	6b e8       	ldi	r22, 0x8B	; 139
    ff5c:	78 e0       	ldi	r23, 0x08	; 8
    ff5e:	ce 01       	movw	r24, r28
    ff60:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff64:	89 2b       	or	r24, r25
    ff66:	09 f4       	brne	.+2      	; 0xff6a <posix_fopen_modes_to_open+0x34>
    ff68:	42 c0       	rjmp	.+132    	; 0xffee <posix_fopen_modes_to_open+0xb8>
    ff6a:	6e e8       	ldi	r22, 0x8E	; 142
    ff6c:	78 e0       	ldi	r23, 0x08	; 8
    ff6e:	ce 01       	movw	r24, r28
    ff70:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff74:	89 2b       	or	r24, r25
    ff76:	d9 f1       	breq	.+118    	; 0xffee <posix_fopen_modes_to_open+0xb8>
    ff78:	62 e9       	ldi	r22, 0x92	; 146
    ff7a:	78 e0       	ldi	r23, 0x08	; 8
    ff7c:	ce 01       	movw	r24, r28
    ff7e:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff82:	89 2b       	or	r24, r25
    ff84:	a1 f1       	breq	.+104    	; 0xffee <posix_fopen_modes_to_open+0xb8>
    ff86:	67 e4       	ldi	r22, 0x47	; 71
    ff88:	7a e0       	ldi	r23, 0x0A	; 10
    ff8a:	ce 01       	movw	r24, r28
    ff8c:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff90:	89 2b       	or	r24, r25
    ff92:	81 f1       	breq	.+96     	; 0xfff4 <posix_fopen_modes_to_open+0xbe>
    ff94:	66 e9       	ldi	r22, 0x96	; 150
    ff96:	78 e0       	ldi	r23, 0x08	; 8
    ff98:	ce 01       	movw	r24, r28
    ff9a:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ff9e:	89 2b       	or	r24, r25
    ffa0:	49 f1       	breq	.+82     	; 0xfff4 <posix_fopen_modes_to_open+0xbe>
    ffa2:	69 e9       	ldi	r22, 0x99	; 153
    ffa4:	78 e0       	ldi	r23, 0x08	; 8
    ffa6:	ce 01       	movw	r24, r28
    ffa8:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ffac:	89 2b       	or	r24, r25
    ffae:	29 f1       	breq	.+74     	; 0xfffa <posix_fopen_modes_to_open+0xc4>
    ffb0:	6c e9       	ldi	r22, 0x9C	; 156
    ffb2:	78 e0       	ldi	r23, 0x08	; 8
    ffb4:	ce 01       	movw	r24, r28
    ffb6:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ffba:	89 2b       	or	r24, r25
    ffbc:	f1 f0       	breq	.+60     	; 0xfffa <posix_fopen_modes_to_open+0xc4>
    ffbe:	60 ea       	ldi	r22, 0xA0	; 160
    ffc0:	78 e0       	ldi	r23, 0x08	; 8
    ffc2:	ce 01       	movw	r24, r28
    ffc4:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ffc8:	89 2b       	or	r24, r25
    ffca:	b9 f0       	breq	.+46     	; 0xfffa <posix_fopen_modes_to_open+0xc4>
    ffcc:	64 e9       	ldi	r22, 0x94	; 148
    ffce:	72 e1       	ldi	r23, 0x12	; 18
    ffd0:	ce 01       	movw	r24, r28
    ffd2:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ffd6:	89 2b       	or	r24, r25
    ffd8:	99 f0       	breq	.+38     	; 0x10000 <__EEPROM_REGION_LENGTH__>
    ffda:	64 ea       	ldi	r22, 0xA4	; 164
    ffdc:	78 e0       	ldi	r23, 0x08	; 8
    ffde:	ce 01       	movw	r24, r28
    ffe0:	0e 94 b3 33 	call	0x6766	; 0x6766 <strcmp>
    ffe4:	89 2b       	or	r24, r25
    ffe6:	61 f0       	breq	.+24     	; 0x10000 <__EEPROM_REGION_LENGTH__>
    ffe8:	8f ef       	ldi	r24, 0xFF	; 255
    ffea:	9f ef       	ldi	r25, 0xFF	; 255
    ffec:	0b c0       	rjmp	.+22     	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    ffee:	82 e0       	ldi	r24, 0x02	; 2
    fff0:	92 e0       	ldi	r25, 0x02	; 2
    fff2:	08 c0       	rjmp	.+16     	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    fff4:	81 e4       	ldi	r24, 0x41	; 65
    fff6:	92 e0       	ldi	r25, 0x02	; 2
    fff8:	05 c0       	rjmp	.+10     	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    fffa:	82 e4       	ldi	r24, 0x42	; 66
    fffc:	92 e0       	ldi	r25, 0x02	; 2
    fffe:	02 c0       	rjmp	.+4      	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
   10000:	81 e4       	ldi	r24, 0x41	; 65
   10002:	94 e0       	ldi	r25, 0x04	; 4
   10004:	df 91       	pop	r29
   10006:	cf 91       	pop	r28
   10008:	08 95       	ret

0001000a <fopen>:
   1000a:	cf 93       	push	r28
   1000c:	df 93       	push	r29
   1000e:	ec 01       	movw	r28, r24
   10010:	cb 01       	movw	r24, r22
   10012:	91 df       	rcall	.-222    	; 0xff36 <posix_fopen_modes_to_open>
   10014:	bc 01       	movw	r22, r24
   10016:	ce 01       	movw	r24, r28
   10018:	ef de       	rcall	.-546    	; 0xfdf8 <open>
   1001a:	a7 d8       	rcall	.-3762   	; 0xf16a <fileno_to_stream>
   1001c:	df 91       	pop	r29
   1001e:	cf 91       	pop	r28
   10020:	08 95       	ret

00010022 <fprintf>:
   10022:	a8 e0       	ldi	r26, 0x08	; 8
   10024:	b0 e0       	ldi	r27, 0x00	; 0
   10026:	e7 e1       	ldi	r30, 0x17	; 23
   10028:	f0 e8       	ldi	r31, 0x80	; 128
   1002a:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   1002e:	8d e1       	ldi	r24, 0x1D	; 29
   10030:	98 e7       	ldi	r25, 0x78	; 120
   10032:	9a 83       	std	Y+2, r25	; 0x02
   10034:	89 83       	std	Y+1, r24	; 0x01
   10036:	18 86       	std	Y+8, r1	; 0x08
   10038:	1f 82       	std	Y+7, r1	; 0x07
   1003a:	8d 85       	ldd	r24, Y+13	; 0x0d
   1003c:	9e 85       	ldd	r25, Y+14	; 0x0e
   1003e:	9c 83       	std	Y+4, r25	; 0x04
   10040:	8b 83       	std	Y+3, r24	; 0x03
   10042:	4f 85       	ldd	r20, Y+15	; 0x0f
   10044:	58 89       	ldd	r21, Y+16	; 0x10
   10046:	60 e8       	ldi	r22, 0x80	; 128
   10048:	9e 01       	movw	r18, r28
   1004a:	2f 5e       	subi	r18, 0xEF	; 239
   1004c:	3f 4f       	sbci	r19, 0xFF	; 255
   1004e:	ce 01       	movw	r24, r28
   10050:	01 96       	adiw	r24, 0x01	; 1
   10052:	0e 94 b8 43 	call	0x8770	; 0x8770 <_printf_fn>
   10056:	8f 81       	ldd	r24, Y+7	; 0x07
   10058:	98 85       	ldd	r25, Y+8	; 0x08
   1005a:	28 96       	adiw	r28, 0x08	; 8
   1005c:	e2 e0       	ldi	r30, 0x02	; 2
   1005e:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00010062 <posix_help>:
   10062:	cf 93       	push	r28
   10064:	df 93       	push	r29
   10066:	ec 01       	movw	r28, r24
   10068:	82 ea       	ldi	r24, 0xA2	; 162
   1006a:	9e e0       	ldi	r25, 0x0E	; 14
   1006c:	1f 92       	push	r1
   1006e:	9f 93       	push	r25
   10070:	8f 93       	push	r24
   10072:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10076:	0f 90       	pop	r0
   10078:	0f 90       	pop	r0
   1007a:	0f 90       	pop	r0
   1007c:	cd 2b       	or	r28, r29
   1007e:	51 f0       	breq	.+20     	; 0x10094 <posix_help+0x32>
   10080:	82 ee       	ldi	r24, 0xE2	; 226
   10082:	9d e0       	ldi	r25, 0x0D	; 13
   10084:	1f 92       	push	r1
   10086:	9f 93       	push	r25
   10088:	8f 93       	push	r24
   1008a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1008e:	0f 90       	pop	r0
   10090:	0f 90       	pop	r0
   10092:	0f 90       	pop	r0
   10094:	df 91       	pop	r29
   10096:	cf 91       	pop	r28
   10098:	08 95       	ret

0001009a <copy>:
   1009a:	4f 92       	push	r4
   1009c:	5f 92       	push	r5
   1009e:	6f 92       	push	r6
   100a0:	8f 92       	push	r8
   100a2:	9f 92       	push	r9
   100a4:	af 92       	push	r10
   100a6:	bf 92       	push	r11
   100a8:	cf 92       	push	r12
   100aa:	df 92       	push	r13
   100ac:	ef 92       	push	r14
   100ae:	ff 92       	push	r15
   100b0:	0f 93       	push	r16
   100b2:	1f 93       	push	r17
   100b4:	cf 93       	push	r28
   100b6:	df 93       	push	r29
   100b8:	18 2f       	mov	r17, r24
   100ba:	09 2f       	mov	r16, r25
   100bc:	eb 01       	movw	r28, r22
   100be:	9f 93       	push	r25
   100c0:	8f 93       	push	r24
   100c2:	85 eb       	ldi	r24, 0xB5	; 181
   100c4:	9d e0       	ldi	r25, 0x0D	; 13
   100c6:	1f 92       	push	r1
   100c8:	9f 93       	push	r25
   100ca:	8f 93       	push	r24
   100cc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   100d0:	68 e8       	ldi	r22, 0x88	; 136
   100d2:	78 e0       	ldi	r23, 0x08	; 8
   100d4:	81 2f       	mov	r24, r17
   100d6:	90 2f       	mov	r25, r16
   100d8:	98 df       	rcall	.-208    	; 0x1000a <fopen>
   100da:	7c 01       	movw	r14, r24
   100dc:	0f 90       	pop	r0
   100de:	0f 90       	pop	r0
   100e0:	0f 90       	pop	r0
   100e2:	0f 90       	pop	r0
   100e4:	0f 90       	pop	r0
   100e6:	89 2b       	or	r24, r25
   100e8:	51 f4       	brne	.+20     	; 0x100fe <copy+0x64>
   100ea:	0f 93       	push	r16
   100ec:	1f 93       	push	r17
   100ee:	85 ea       	ldi	r24, 0xA5	; 165
   100f0:	9d e0       	ldi	r25, 0x0D	; 13
   100f2:	1f 92       	push	r1
   100f4:	9f 93       	push	r25
   100f6:	8f 93       	push	r24
   100f8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   100fc:	21 c0       	rjmp	.+66     	; 0x10140 <copy+0xa6>
   100fe:	df 93       	push	r29
   10100:	cf 93       	push	r28
   10102:	88 e9       	ldi	r24, 0x98	; 152
   10104:	9d e0       	ldi	r25, 0x0D	; 13
   10106:	1f 92       	push	r1
   10108:	9f 93       	push	r25
   1010a:	8f 93       	push	r24
   1010c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10110:	66 e9       	ldi	r22, 0x96	; 150
   10112:	78 e0       	ldi	r23, 0x08	; 8
   10114:	ce 01       	movw	r24, r28
   10116:	79 df       	rcall	.-270    	; 0x1000a <fopen>
   10118:	8c 01       	movw	r16, r24
   1011a:	0f 90       	pop	r0
   1011c:	0f 90       	pop	r0
   1011e:	0f 90       	pop	r0
   10120:	0f 90       	pop	r0
   10122:	0f 90       	pop	r0
   10124:	89 2b       	or	r24, r25
   10126:	b1 f4       	brne	.+44     	; 0x10154 <copy+0xba>
   10128:	df 93       	push	r29
   1012a:	cf 93       	push	r28
   1012c:	88 e8       	ldi	r24, 0x88	; 136
   1012e:	9d e0       	ldi	r25, 0x0D	; 13
   10130:	1f 92       	push	r1
   10132:	9f 93       	push	r25
   10134:	8f 93       	push	r24
   10136:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1013a:	80 e0       	ldi	r24, 0x00	; 0
   1013c:	90 e0       	ldi	r25, 0x00	; 0
   1013e:	0f de       	rcall	.-994    	; 0xfd5e <fclose>
   10140:	0f 90       	pop	r0
   10142:	0f 90       	pop	r0
   10144:	0f 90       	pop	r0
   10146:	0f 90       	pop	r0
   10148:	0f 90       	pop	r0
   1014a:	60 e0       	ldi	r22, 0x00	; 0
   1014c:	70 e0       	ldi	r23, 0x00	; 0
   1014e:	80 e0       	ldi	r24, 0x00	; 0
   10150:	90 e0       	ldi	r25, 0x00	; 0
   10152:	73 c0       	rjmp	.+230    	; 0x1023a <copy+0x1a0>
   10154:	61 e0       	ldi	r22, 0x01	; 1
   10156:	70 e0       	ldi	r23, 0x00	; 0
   10158:	80 e0       	ldi	r24, 0x00	; 0
   1015a:	92 e0       	ldi	r25, 0x02	; 2
   1015c:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   10160:	6c 01       	movw	r12, r24
   10162:	89 2b       	or	r24, r25
   10164:	29 f4       	brne	.+10     	; 0x10170 <copy+0xd6>
   10166:	c7 01       	movw	r24, r14
   10168:	fa dd       	rcall	.-1036   	; 0xfd5e <fclose>
   1016a:	c8 01       	movw	r24, r16
   1016c:	f8 dd       	rcall	.-1040   	; 0xfd5e <fclose>
   1016e:	ed cf       	rjmp	.-38     	; 0x1014a <copy+0xb0>
   10170:	8b e7       	ldi	r24, 0x7B	; 123
   10172:	9d e0       	ldi	r25, 0x0D	; 13
   10174:	1f 92       	push	r1
   10176:	9f 93       	push	r25
   10178:	8f 93       	push	r24
   1017a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1017e:	0f 90       	pop	r0
   10180:	0f 90       	pop	r0
   10182:	0f 90       	pop	r0
   10184:	81 2c       	mov	r8, r1
   10186:	91 2c       	mov	r9, r1
   10188:	54 01       	movw	r10, r8
   1018a:	8f e5       	ldi	r24, 0x5F	; 95
   1018c:	9d e0       	ldi	r25, 0x0D	; 13
   1018e:	2c 01       	movw	r4, r24
   10190:	97 01       	movw	r18, r14
   10192:	40 e0       	ldi	r20, 0x00	; 0
   10194:	52 e0       	ldi	r21, 0x02	; 2
   10196:	61 e0       	ldi	r22, 0x01	; 1
   10198:	70 e0       	ldi	r23, 0x00	; 0
   1019a:	c6 01       	movw	r24, r12
   1019c:	8c dc       	rcall	.-1768   	; 0xfab6 <fread>
   1019e:	ec 01       	movw	r28, r24
   101a0:	18 16       	cp	r1, r24
   101a2:	19 06       	cpc	r1, r25
   101a4:	74 f5       	brge	.+92     	; 0x10202 <copy+0x168>
   101a6:	98 01       	movw	r18, r16
   101a8:	ae 01       	movw	r20, r28
   101aa:	61 e0       	ldi	r22, 0x01	; 1
   101ac:	70 e0       	ldi	r23, 0x00	; 0
   101ae:	c6 01       	movw	r24, r12
   101b0:	54 dd       	rcall	.-1368   	; 0xfc5a <fwrite>
   101b2:	8c 17       	cp	r24, r28
   101b4:	9d 07       	cpc	r25, r29
   101b6:	5c f4       	brge	.+22     	; 0x101ce <copy+0x134>
   101b8:	8e e6       	ldi	r24, 0x6E	; 110
   101ba:	9d e0       	ldi	r25, 0x0D	; 13
   101bc:	1f 92       	push	r1
   101be:	9f 93       	push	r25
   101c0:	8f 93       	push	r24
   101c2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   101c6:	0f 90       	pop	r0
   101c8:	0f 90       	pop	r0
   101ca:	0f 90       	pop	r0
   101cc:	1a c0       	rjmp	.+52     	; 0x10202 <copy+0x168>
   101ce:	ce 01       	movw	r24, r28
   101d0:	dd 0f       	add	r29, r29
   101d2:	aa 0b       	sbc	r26, r26
   101d4:	bb 0b       	sbc	r27, r27
   101d6:	88 0e       	add	r8, r24
   101d8:	99 1e       	adc	r9, r25
   101da:	aa 1e       	adc	r10, r26
   101dc:	bb 1e       	adc	r11, r27
   101de:	bf 92       	push	r11
   101e0:	af 92       	push	r10
   101e2:	9f 92       	push	r9
   101e4:	8f 92       	push	r8
   101e6:	1f 92       	push	r1
   101e8:	5f 92       	push	r5
   101ea:	4f 92       	push	r4
   101ec:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   101f0:	8d b7       	in	r24, 0x3d	; 61
   101f2:	9e b7       	in	r25, 0x3e	; 62
   101f4:	07 96       	adiw	r24, 0x07	; 7
   101f6:	0f b6       	in	r0, 0x3f	; 63
   101f8:	f8 94       	cli
   101fa:	9e bf       	out	0x3e, r25	; 62
   101fc:	0f be       	out	0x3f, r0	; 63
   101fe:	8d bf       	out	0x3d, r24	; 61
   10200:	c7 cf       	rjmp	.-114    	; 0x10190 <copy+0xf6>
   10202:	bf 92       	push	r11
   10204:	af 92       	push	r10
   10206:	9f 92       	push	r9
   10208:	8f 92       	push	r8
   1020a:	8c e4       	ldi	r24, 0x4C	; 76
   1020c:	9d e0       	ldi	r25, 0x0D	; 13
   1020e:	1f 92       	push	r1
   10210:	9f 93       	push	r25
   10212:	8f 93       	push	r24
   10214:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10218:	c6 01       	movw	r24, r12
   1021a:	0e 94 aa 2a 	call	0x5554	; 0x5554 <safefree>
   1021e:	c7 01       	movw	r24, r14
   10220:	9e dd       	rcall	.-1220   	; 0xfd5e <fclose>
   10222:	c8 01       	movw	r24, r16
   10224:	9c dd       	rcall	.-1224   	; 0xfd5e <fclose>
   10226:	8d b7       	in	r24, 0x3d	; 61
   10228:	9e b7       	in	r25, 0x3e	; 62
   1022a:	07 96       	adiw	r24, 0x07	; 7
   1022c:	0f b6       	in	r0, 0x3f	; 63
   1022e:	f8 94       	cli
   10230:	9e bf       	out	0x3e, r25	; 62
   10232:	0f be       	out	0x3f, r0	; 63
   10234:	8d bf       	out	0x3d, r24	; 61
   10236:	b4 01       	movw	r22, r8
   10238:	c5 01       	movw	r24, r10
   1023a:	df 91       	pop	r29
   1023c:	cf 91       	pop	r28
   1023e:	1f 91       	pop	r17
   10240:	0f 91       	pop	r16
   10242:	ff 90       	pop	r15
   10244:	ef 90       	pop	r14
   10246:	df 90       	pop	r13
   10248:	cf 90       	pop	r12
   1024a:	bf 90       	pop	r11
   1024c:	af 90       	pop	r10
   1024e:	9f 90       	pop	r9
   10250:	8f 90       	pop	r8
   10252:	6f 90       	pop	r6
   10254:	5f 90       	pop	r5
   10256:	4f 90       	pop	r4
   10258:	08 95       	ret

0001025a <testpage>:
   1025a:	cf 93       	push	r28
   1025c:	df 93       	push	r29
   1025e:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
   10262:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
   10266:	82 17       	cp	r24, r18
   10268:	93 07       	cpc	r25, r19
   1026a:	3c f1       	brlt	.+78     	; 0x102ba <testpage+0x60>
   1026c:	85 e4       	ldi	r24, 0x45	; 69
   1026e:	9d e0       	ldi	r25, 0x0D	; 13
   10270:	1f 92       	push	r1
   10272:	9f 93       	push	r25
   10274:	8f 93       	push	r24
   10276:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1027a:	0e 94 2a 78 	call	0xf054	; 0xf054 <getchar>
   1027e:	ec 01       	movw	r28, r24
   10280:	83 e4       	ldi	r24, 0x43	; 67
   10282:	9d e0       	ldi	r25, 0x0D	; 13
   10284:	1f 92       	push	r1
   10286:	9f 93       	push	r25
   10288:	8f 93       	push	r24
   1028a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1028e:	0f 90       	pop	r0
   10290:	0f 90       	pop	r0
   10292:	0f 90       	pop	r0
   10294:	0f 90       	pop	r0
   10296:	0f 90       	pop	r0
   10298:	0f 90       	pop	r0
   1029a:	c1 37       	cpi	r28, 0x71	; 113
   1029c:	d1 05       	cpc	r29, r1
   1029e:	41 f0       	breq	.+16     	; 0x102b0 <testpage+0x56>
   102a0:	2a 97       	sbiw	r28, 0x0a	; 10
   102a2:	49 f4       	brne	.+18     	; 0x102b6 <testpage+0x5c>
   102a4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
   102a8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
   102ac:	01 97       	sbiw	r24, 0x01	; 1
   102ae:	05 c0       	rjmp	.+10     	; 0x102ba <testpage+0x60>
   102b0:	8f ef       	ldi	r24, 0xFF	; 255
   102b2:	9f ef       	ldi	r25, 0xFF	; 255
   102b4:	02 c0       	rjmp	.+4      	; 0x102ba <testpage+0x60>
   102b6:	80 e0       	ldi	r24, 0x00	; 0
   102b8:	90 e0       	ldi	r25, 0x00	; 0
   102ba:	df 91       	pop	r29
   102bc:	cf 91       	pop	r28
   102be:	08 95       	ret

000102c0 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   102c0:	a0 e0       	ldi	r26, 0x00	; 0
   102c2:	b1 e0       	ldi	r27, 0x01	; 1
   102c4:	e6 e6       	ldi	r30, 0x66	; 102
   102c6:	f1 e8       	ldi	r31, 0x81	; 129
   102c8:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   102cc:	18 2f       	mov	r17, r24
   102ce:	09 2f       	mov	r16, r25
   102d0:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   102d2:	68 e8       	ldi	r22, 0x88	; 136
   102d4:	78 e0       	ldi	r23, 0x08	; 8
   102d6:	99 de       	rcall	.-718    	; 0x1000a <fopen>
   102d8:	7c 01       	movw	r14, r24
    if (!fp)
   102da:	89 2b       	or	r24, r25
   102dc:	41 f0       	breq	.+16     	; 0x102ee <cat+0x2e>
   102de:	c1 2c       	mov	r12, r1
   102e0:	d1 2c       	mov	r13, r1
   102e2:	a1 2c       	mov	r10, r1
   102e4:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   102e6:	8e 01       	movw	r16, r28
   102e8:	0f 5f       	subi	r16, 0xFF	; 255
   102ea:	1f 4f       	sbci	r17, 0xFF	; 255
   102ec:	24 c0       	rjmp	.+72     	; 0x10336 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   102ee:	0f 93       	push	r16
   102f0:	1f 93       	push	r17
   102f2:	8e ec       	ldi	r24, 0xCE	; 206
   102f4:	9d e0       	ldi	r25, 0x0D	; 13
   102f6:	1f 92       	push	r1
   102f8:	9f 93       	push	r25
   102fa:	8f 93       	push	r24
   102fc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(0);
   10300:	0f 90       	pop	r0
   10302:	0f 90       	pop	r0
   10304:	0f 90       	pop	r0
   10306:	0f 90       	pop	r0
   10308:	0f 90       	pop	r0
   1030a:	c1 2c       	mov	r12, r1
   1030c:	d1 2c       	mov	r13, r1
   1030e:	76 01       	movw	r14, r12
   10310:	3e c0       	rjmp	.+124    	; 0x1038e <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10312:	c8 01       	movw	r24, r16
   10314:	0e 94 99 33 	call	0x6732	; 0x6732 <trim_tail>
        size += strlen(line);
   10318:	f8 01       	movw	r30, r16
   1031a:	01 90       	ld	r0, Z+
   1031c:	00 20       	and	r0, r0
   1031e:	e9 f7       	brne	.-6      	; 0x1031a <cat+0x5a>
   10320:	31 97       	sbiw	r30, 0x01	; 1
   10322:	e0 1b       	sub	r30, r16
   10324:	f1 0b       	sbc	r31, r17
   10326:	ce 0e       	add	r12, r30
   10328:	df 1e       	adc	r13, r31
        puts(line);
   1032a:	c8 01       	movw	r24, r16
   1032c:	0e 94 82 78 	call	0xf104	; 0xf104 <puts>
        if(dopage)
   10330:	81 14       	cp	r8, r1
   10332:	91 04       	cpc	r9, r1
   10334:	49 f4       	brne	.+18     	; 0x10348 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10336:	a7 01       	movw	r20, r14
   10338:	6e ef       	ldi	r22, 0xFE	; 254
   1033a:	70 e0       	ldi	r23, 0x00	; 0
   1033c:	c8 01       	movw	r24, r16
   1033e:	0e 94 36 78 	call	0xf06c	; 0xf06c <fgets>
   10342:	89 2b       	or	r24, r25
   10344:	31 f7       	brne	.-52     	; 0x10312 <cat+0x52>
   10346:	06 c0       	rjmp	.+12     	; 0x10354 <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10348:	c5 01       	movw	r24, r10
   1034a:	01 96       	adiw	r24, 0x01	; 1
   1034c:	86 df       	rcall	.-244    	; 0x1025a <testpage>
   1034e:	5c 01       	movw	r10, r24
            if(count < 0)
   10350:	97 ff       	sbrs	r25, 7
   10352:	f1 cf       	rjmp	.-30     	; 0x10336 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10354:	8c ec       	ldi	r24, 0xCC	; 204
   10356:	9d e0       	ldi	r25, 0x0D	; 13
   10358:	1f 92       	push	r1
   1035a:	9f 93       	push	r25
   1035c:	8f 93       	push	r24
   1035e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    fclose(fp);
   10362:	c7 01       	movw	r24, r14
   10364:	fc dc       	rcall	.-1544   	; 0xfd5e <fclose>
    printf("%ld bytes\n", (long)size);
   10366:	0d 2c       	mov	r0, r13
   10368:	00 0c       	add	r0, r0
   1036a:	ee 08       	sbc	r14, r14
   1036c:	ff 08       	sbc	r15, r15
   1036e:	ff 92       	push	r15
   10370:	ef 92       	push	r14
   10372:	df 92       	push	r13
   10374:	cf 92       	push	r12
   10376:	81 ec       	ldi	r24, 0xC1	; 193
   10378:	9d e0       	ldi	r25, 0x0D	; 13
   1037a:	1f 92       	push	r1
   1037c:	9f 93       	push	r25
   1037e:	8f 93       	push	r24
   10380:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    return(size);
   10384:	0f b6       	in	r0, 0x3f	; 63
   10386:	f8 94       	cli
   10388:	de bf       	out	0x3e, r29	; 62
   1038a:	0f be       	out	0x3f, r0	; 63
   1038c:	cd bf       	out	0x3d, r28	; 61
}
   1038e:	c7 01       	movw	r24, r14
   10390:	b6 01       	movw	r22, r12
   10392:	d3 95       	inc	r29
   10394:	ec e0       	ldi	r30, 0x0C	; 12
   10396:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

0001039a <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1039a:	4f 92       	push	r4
   1039c:	5f 92       	push	r5
   1039e:	6f 92       	push	r6
   103a0:	7f 92       	push	r7
   103a2:	af 92       	push	r10
   103a4:	bf 92       	push	r11
   103a6:	cf 92       	push	r12
   103a8:	df 92       	push	r13
   103aa:	ef 92       	push	r14
   103ac:	ff 92       	push	r15
   103ae:	0f 93       	push	r16
   103b0:	1f 93       	push	r17
   103b2:	cf 93       	push	r28
   103b4:	df 93       	push	r29
   103b6:	cd b7       	in	r28, 0x3d	; 61
   103b8:	de b7       	in	r29, 0x3e	; 62
   103ba:	ec 97       	sbiw	r28, 0x3c	; 60
   103bc:	0f b6       	in	r0, 0x3f	; 63
   103be:	f8 94       	cli
   103c0:	de bf       	out	0x3e, r29	; 62
   103c2:	0f be       	out	0x3f, r0	; 63
   103c4:	cd bf       	out	0x3d, r28	; 61
   103c6:	8c 01       	movw	r16, r24
   103c8:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   103ca:	be 01       	movw	r22, r28
   103cc:	6f 5f       	subi	r22, 0xFF	; 255
   103ce:	7f 4f       	sbci	r23, 0xFF	; 255
   103d0:	30 d9       	rcall	.-3488   	; 0xf632 <stat>
   103d2:	01 96       	adiw	r24, 0x01	; 1
   103d4:	89 f4       	brne	.+34     	; 0x103f8 <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   103d6:	1f 93       	push	r17
   103d8:	0f 93       	push	r16
   103da:	81 e3       	ldi	r24, 0x31	; 49
   103dc:	9d e0       	ldi	r25, 0x0D	; 13
   103de:	1f 92       	push	r1
   103e0:	9f 93       	push	r25
   103e2:	8f 93       	push	r24
   103e4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(0);
   103e8:	0f 90       	pop	r0
   103ea:	0f 90       	pop	r0
   103ec:	0f 90       	pop	r0
   103ee:	0f 90       	pop	r0
   103f0:	0f 90       	pop	r0
   103f2:	80 e0       	ldi	r24, 0x00	; 0
   103f4:	90 e0       	ldi	r25, 0x00	; 0
   103f6:	79 c0       	rjmp	.+242    	; 0x104ea <ls_info+0x150>
    }

    if(!verbose)
   103f8:	ef 28       	or	r14, r15
   103fa:	91 f4       	brne	.+36     	; 0x10420 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   103fc:	c8 01       	movw	r24, r16
   103fe:	0e 94 ef 78 	call	0xf1de	; 0xf1de <basename>
   10402:	9f 93       	push	r25
   10404:	8f 93       	push	r24
   10406:	8d e2       	ldi	r24, 0x2D	; 45
   10408:	9d e0       	ldi	r25, 0x0D	; 13
   1040a:	1f 92       	push	r1
   1040c:	9f 93       	push	r25
   1040e:	8f 93       	push	r24
   10410:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(1);
   10414:	0f 90       	pop	r0
   10416:	0f 90       	pop	r0
   10418:	0f 90       	pop	r0
   1041a:	0f 90       	pop	r0
   1041c:	0f 90       	pop	r0
   1041e:	63 c0       	rjmp	.+198    	; 0x104e6 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10420:	49 84       	ldd	r4, Y+9	; 0x09
   10422:	5a 84       	ldd	r5, Y+10	; 0x0a
   10424:	6b 84       	ldd	r6, Y+11	; 0x0b
   10426:	7c 84       	ldd	r7, Y+12	; 0x0c
   10428:	d3 01       	movw	r26, r6
   1042a:	c2 01       	movw	r24, r4
   1042c:	88 27       	eor	r24, r24
   1042e:	90 7f       	andi	r25, 0xF0	; 240
   10430:	aa 27       	eor	r26, r26
   10432:	bb 27       	eor	r27, r27
   10434:	81 15       	cp	r24, r1
   10436:	90 44       	sbci	r25, 0x40	; 64
   10438:	a1 05       	cpc	r26, r1
   1043a:	b1 05       	cpc	r27, r1
   1043c:	11 f4       	brne	.+4      	; 0x10442 <ls_info+0xa8>
        *p++ = 'd';
   1043e:	84 e6       	ldi	r24, 0x64	; 100
   10440:	01 c0       	rjmp	.+2      	; 0x10444 <ls_info+0xaa>
    else
        *p++ = '-';
   10442:	8d e2       	ldi	r24, 0x2D	; 45
   10444:	89 ab       	std	Y+49, r24	; 0x31
   10446:	fe 01       	movw	r30, r28
   10448:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1044a:	e1 2c       	mov	r14, r1
   1044c:	ff 24       	eor	r15, r15
   1044e:	f3 94       	inc	r15
   10450:	20 e0       	ldi	r18, 0x00	; 0
   10452:	30 e0       	ldi	r19, 0x00	; 0
   10454:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10456:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10458:	53 e0       	ldi	r21, 0x03	; 3
   1045a:	c5 2e       	mov	r12, r21
   1045c:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   1045e:	c7 01       	movw	r24, r14
   10460:	a0 e0       	ldi	r26, 0x00	; 0
   10462:	b0 e0       	ldi	r27, 0x00	; 0
   10464:	84 21       	and	r24, r4
   10466:	95 21       	and	r25, r5
   10468:	a6 21       	and	r26, r6
   1046a:	b7 21       	and	r27, r7
   1046c:	89 2b       	or	r24, r25
   1046e:	8a 2b       	or	r24, r26
   10470:	8b 2b       	or	r24, r27
   10472:	51 f0       	breq	.+20     	; 0x10488 <ls_info+0xee>
            *p++ = cm[ i % 3];
   10474:	c9 01       	movw	r24, r18
   10476:	b6 01       	movw	r22, r12
   10478:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__divmodhi4>
   1047c:	dc 01       	movw	r26, r24
   1047e:	a0 5d       	subi	r26, 0xD0	; 208
   10480:	b4 4f       	sbci	r27, 0xF4	; 244
   10482:	8c 91       	ld	r24, X
   10484:	81 83       	std	Z+1, r24	; 0x01
   10486:	01 c0       	rjmp	.+2      	; 0x1048a <ls_info+0xf0>
        else
            *p++ = '-';
   10488:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   1048a:	f6 94       	lsr	r15
   1048c:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   1048e:	2f 5f       	subi	r18, 0xFF	; 255
   10490:	3f 4f       	sbci	r19, 0xFF	; 255
   10492:	31 96       	adiw	r30, 0x01	; 1
   10494:	29 30       	cpi	r18, 0x09	; 9
   10496:	31 05       	cpc	r19, r1
   10498:	11 f7       	brne	.-60     	; 0x1045e <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   1049a:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   1049c:	c8 01       	movw	r24, r16
   1049e:	0e 94 ef 78 	call	0xf1de	; 0xf1de <basename>
   104a2:	18 2f       	mov	r17, r24
   104a4:	09 2f       	mov	r16, r25
   104a6:	69 a5       	ldd	r22, Y+41	; 0x29
   104a8:	7a a5       	ldd	r23, Y+42	; 0x2a
   104aa:	8b a5       	ldd	r24, Y+43	; 0x2b
   104ac:	9c a5       	ldd	r25, Y+44	; 0x2c
   104ae:	0e 94 ca 78 	call	0xf194	; 0xf194 <mctime>
   104b2:	0f 93       	push	r16
   104b4:	1f 93       	push	r17
   104b6:	9f 93       	push	r25
   104b8:	8f 93       	push	r24
   104ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
   104bc:	8f 93       	push	r24
   104be:	8b 8d       	ldd	r24, Y+27	; 0x1b
   104c0:	8f 93       	push	r24
   104c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
   104c4:	8f 93       	push	r24
   104c6:	89 8d       	ldd	r24, Y+25	; 0x19
   104c8:	8f 93       	push	r24
   104ca:	bf 92       	push	r11
   104cc:	af 92       	push	r10
   104ce:	83 e1       	ldi	r24, 0x13	; 19
   104d0:	9d e0       	ldi	r25, 0x0D	; 13
   104d2:	1f 92       	push	r1
   104d4:	9f 93       	push	r25
   104d6:	8f 93       	push	r24
   104d8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   104dc:	0f b6       	in	r0, 0x3f	; 63
   104de:	f8 94       	cli
   104e0:	de bf       	out	0x3e, r29	; 62
   104e2:	0f be       	out	0x3f, r0	; 63
   104e4:	cd bf       	out	0x3d, r28	; 61
   104e6:	81 e0       	ldi	r24, 0x01	; 1
   104e8:	90 e0       	ldi	r25, 0x00	; 0
}
   104ea:	ec 96       	adiw	r28, 0x3c	; 60
   104ec:	0f b6       	in	r0, 0x3f	; 63
   104ee:	f8 94       	cli
   104f0:	de bf       	out	0x3e, r29	; 62
   104f2:	0f be       	out	0x3f, r0	; 63
   104f4:	cd bf       	out	0x3d, r28	; 61
   104f6:	df 91       	pop	r29
   104f8:	cf 91       	pop	r28
   104fa:	1f 91       	pop	r17
   104fc:	0f 91       	pop	r16
   104fe:	ff 90       	pop	r15
   10500:	ef 90       	pop	r14
   10502:	df 90       	pop	r13
   10504:	cf 90       	pop	r12
   10506:	bf 90       	pop	r11
   10508:	af 90       	pop	r10
   1050a:	7f 90       	pop	r7
   1050c:	6f 90       	pop	r6
   1050e:	5f 90       	pop	r5
   10510:	4f 90       	pop	r4
   10512:	08 95       	ret

00010514 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10514:	2f 92       	push	r2
   10516:	3f 92       	push	r3
   10518:	4f 92       	push	r4
   1051a:	5f 92       	push	r5
   1051c:	6f 92       	push	r6
   1051e:	8f 92       	push	r8
   10520:	9f 92       	push	r9
   10522:	af 92       	push	r10
   10524:	bf 92       	push	r11
   10526:	cf 92       	push	r12
   10528:	df 92       	push	r13
   1052a:	ef 92       	push	r14
   1052c:	ff 92       	push	r15
   1052e:	0f 93       	push	r16
   10530:	1f 93       	push	r17
   10532:	cf 93       	push	r28
   10534:	df 93       	push	r29
   10536:	cd b7       	in	r28, 0x3d	; 61
   10538:	de b7       	in	r29, 0x3e	; 62
   1053a:	c2 53       	subi	r28, 0x32	; 50
   1053c:	d1 40       	sbci	r29, 0x01	; 1
   1053e:	0f b6       	in	r0, 0x3f	; 63
   10540:	f8 94       	cli
   10542:	de bf       	out	0x3e, r29	; 62
   10544:	0f be       	out	0x3f, r0	; 63
   10546:	cd bf       	out	0x3d, r28	; 61
   10548:	7c 01       	movw	r14, r24
   1054a:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   1054c:	19 82       	std	Y+1, r1	; 0x01
   1054e:	8e 01       	movw	r16, r28
   10550:	0f 5f       	subi	r16, 0xFF	; 255
   10552:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10554:	00 97       	sbiw	r24, 0x00	; 0
   10556:	91 f4       	brne	.+36     	; 0x1057c <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10558:	6e ef       	ldi	r22, 0xFE	; 254
   1055a:	70 e0       	ldi	r23, 0x00	; 0
   1055c:	c8 01       	movw	r24, r16
   1055e:	0e 94 45 79 	call	0xf28a	; 0xf28a <getcwd>
   10562:	89 2b       	or	r24, r25
   10564:	d1 f4       	brne	.+52     	; 0x1059a <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10566:	82 ef       	ldi	r24, 0xF2	; 242
   10568:	9c e0       	ldi	r25, 0x0C	; 12
   1056a:	1f 92       	push	r1
   1056c:	9f 93       	push	r25
   1056e:	8f 93       	push	r24
   10570:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            return(0); 
   10574:	0f 90       	pop	r0
   10576:	0f 90       	pop	r0
   10578:	0f 90       	pop	r0
   1057a:	3b c0       	rjmp	.+118    	; 0x105f2 <ls+0xde>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1057c:	fc 01       	movw	r30, r24
   1057e:	80 81       	ld	r24, Z
   10580:	88 23       	and	r24, r24
   10582:	51 f3       	breq	.-44     	; 0x10558 <ls+0x44>
   10584:	63 e6       	ldi	r22, 0x63	; 99
   10586:	72 e1       	ldi	r23, 0x12	; 18
   10588:	c7 01       	movw	r24, r14
   1058a:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   1058e:	89 2b       	or	r24, r25
   10590:	19 f7       	brne	.-58     	; 0x10558 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10592:	b7 01       	movw	r22, r14
   10594:	c8 01       	movw	r24, r16
   10596:	0e 94 3f 33 	call	0x667e	; 0x667e <strcpy>
    }
    len = strlen(fullpath);
   1059a:	f8 01       	movw	r30, r16
   1059c:	01 90       	ld	r0, Z+
   1059e:	00 20       	and	r0, r0
   105a0:	e9 f7       	brne	.-6      	; 0x1059c <ls+0x88>
   105a2:	31 97       	sbiw	r30, 0x01	; 1
   105a4:	1f 01       	movw	r2, r30
   105a6:	20 1a       	sub	r2, r16
   105a8:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   105aa:	1f 93       	push	r17
   105ac:	0f 93       	push	r16
   105ae:	84 ee       	ldi	r24, 0xE4	; 228
   105b0:	9c e0       	ldi	r25, 0x0C	; 12
   105b2:	1f 92       	push	r1
   105b4:	9f 93       	push	r25
   105b6:	8f 93       	push	r24
   105b8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    if (stat(fullpath, &st)) 
   105bc:	be 01       	movw	r22, r28
   105be:	6f 5f       	subi	r22, 0xFF	; 255
   105c0:	7e 4f       	sbci	r23, 0xFE	; 254
   105c2:	c8 01       	movw	r24, r16
   105c4:	36 d8       	rcall	.-3988   	; 0xf632 <stat>
   105c6:	7c 01       	movw	r14, r24
   105c8:	0f 90       	pop	r0
   105ca:	0f 90       	pop	r0
   105cc:	0f 90       	pop	r0
   105ce:	0f 90       	pop	r0
   105d0:	0f 90       	pop	r0
   105d2:	89 2b       	or	r24, r25
   105d4:	89 f0       	breq	.+34     	; 0x105f8 <ls+0xe4>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   105d6:	1f 93       	push	r17
   105d8:	0f 93       	push	r16
   105da:	8e ec       	ldi	r24, 0xCE	; 206
   105dc:	9c e0       	ldi	r25, 0x0C	; 12
   105de:	1f 92       	push	r1
   105e0:	9f 93       	push	r25
   105e2:	8f 93       	push	r24
   105e4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(0); 
   105e8:	0f 90       	pop	r0
   105ea:	0f 90       	pop	r0
   105ec:	0f 90       	pop	r0
   105ee:	0f 90       	pop	r0
   105f0:	0f 90       	pop	r0
   105f2:	e1 2c       	mov	r14, r1
   105f4:	f1 2c       	mov	r15, r1
   105f6:	8f c0       	rjmp	.+286    	; 0x10716 <ls+0x202>
    }

    switch (st.st_mode & S_IFMT) 
   105f8:	c7 5f       	subi	r28, 0xF7	; 247
   105fa:	de 4f       	sbci	r29, 0xFE	; 254
   105fc:	88 81       	ld	r24, Y
   105fe:	99 81       	ldd	r25, Y+1	; 0x01
   10600:	aa 81       	ldd	r26, Y+2	; 0x02
   10602:	bb 81       	ldd	r27, Y+3	; 0x03
   10604:	c9 50       	subi	r28, 0x09	; 9
   10606:	d1 40       	sbci	r29, 0x01	; 1
   10608:	88 27       	eor	r24, r24
   1060a:	90 7f       	andi	r25, 0xF0	; 240
   1060c:	aa 27       	eor	r26, r26
   1060e:	bb 27       	eor	r27, r27
   10610:	81 15       	cp	r24, r1
   10612:	f0 e4       	ldi	r31, 0x40	; 64
   10614:	9f 07       	cpc	r25, r31
   10616:	a1 05       	cpc	r26, r1
   10618:	b1 05       	cpc	r27, r1
   1061a:	51 f0       	breq	.+20     	; 0x10630 <ls+0x11c>
   1061c:	81 15       	cp	r24, r1
   1061e:	90 48       	sbci	r25, 0x80	; 128
   10620:	a1 05       	cpc	r26, r1
   10622:	b1 05       	cpc	r27, r1
   10624:	09 f0       	breq	.+2      	; 0x10628 <ls+0x114>
   10626:	67 c0       	rjmp	.+206    	; 0x106f6 <ls+0x1e2>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10628:	b4 01       	movw	r22, r8
   1062a:	c8 01       	movw	r24, r16
   1062c:	b6 de       	rcall	.-660    	; 0x1039a <ls_info>
   1062e:	63 c0       	rjmp	.+198    	; 0x106f6 <ls+0x1e2>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10630:	c8 01       	movw	r24, r16
   10632:	0e 94 f3 79 	call	0xf3e6	; 0xf3e6 <opendir>
   10636:	5c 01       	movw	r10, r24
        if(!dirp)
   10638:	89 2b       	or	r24, r25
   1063a:	79 f0       	breq	.+30     	; 0x1065a <ls+0x146>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   1063c:	e1 2c       	mov	r14, r1
   1063e:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10640:	c8 01       	movw	r24, r16
   10642:	82 0d       	add	r24, r2
   10644:	93 1d       	adc	r25, r3
   10646:	cf 5c       	subi	r28, 0xCF	; 207
   10648:	de 4f       	sbci	r29, 0xFE	; 254
   1064a:	99 83       	std	Y+1, r25	; 0x01
   1064c:	88 83       	st	Y, r24
   1064e:	c1 53       	subi	r28, 0x31	; 49
   10650:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10652:	8b e9       	ldi	r24, 0x9B	; 155
   10654:	9c e0       	ldi	r25, 0x0C	; 12
   10656:	2c 01       	movw	r4, r24
   10658:	27 c0       	rjmp	.+78     	; 0x106a8 <ls+0x194>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   1065a:	8e eb       	ldi	r24, 0xBE	; 190
   1065c:	9c e0       	ldi	r25, 0x0C	; 12
   1065e:	1f 92       	push	r1
   10660:	9f 93       	push	r25
   10662:	8f 93       	push	r24
   10664:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            return(0);
   10668:	0f 90       	pop	r0
   1066a:	0f 90       	pop	r0
   1066c:	0f 90       	pop	r0
   1066e:	53 c0       	rjmp	.+166    	; 0x10716 <ls+0x202>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10670:	f6 01       	movw	r30, r12
   10672:	80 81       	ld	r24, Z
   10674:	88 23       	and	r24, r24
   10676:	f1 f0       	breq	.+60     	; 0x106b4 <ls+0x1a0>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   10678:	f6 01       	movw	r30, r12
   1067a:	01 90       	ld	r0, Z+
   1067c:	00 20       	and	r0, r0
   1067e:	e9 f7       	brne	.-6      	; 0x1067a <ls+0x166>
   10680:	31 97       	sbiw	r30, 0x01	; 1
   10682:	ec 19       	sub	r30, r12
   10684:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   10686:	e2 0d       	add	r30, r2
   10688:	f3 1d       	adc	r31, r3
   1068a:	ef 3f       	cpi	r30, 0xFF	; 255
   1068c:	f1 05       	cpc	r31, r1
   1068e:	b4 f0       	brlt	.+44     	; 0x106bc <ls+0x1a8>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10690:	df 92       	push	r13
   10692:	cf 92       	push	r12
   10694:	1f 92       	push	r1
   10696:	5f 92       	push	r5
   10698:	4f 92       	push	r4
   1069a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                continue;
   1069e:	0f 90       	pop	r0
   106a0:	0f 90       	pop	r0
   106a2:	0f 90       	pop	r0
   106a4:	0f 90       	pop	r0
   106a6:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   106a8:	c5 01       	movw	r24, r10
   106aa:	0e 94 11 7a 	call	0xf422	; 0xf422 <readdir>
   106ae:	6c 01       	movw	r12, r24
   106b0:	89 2b       	or	r24, r25
   106b2:	f1 f6       	brne	.-68     	; 0x10670 <ls+0x15c>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   106b4:	c5 01       	movw	r24, r10
   106b6:	0e 94 d8 79 	call	0xf3b0	; 0xf3b0 <closedir>
        break;
   106ba:	1f c0       	rjmp	.+62     	; 0x106fa <ls+0x1e6>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   106bc:	6a e3       	ldi	r22, 0x3A	; 58
   106be:	78 e0       	ldi	r23, 0x08	; 8
   106c0:	c8 01       	movw	r24, r16
   106c2:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   106c6:	89 2b       	or	r24, r25
   106c8:	29 f4       	brne	.+10     	; 0x106d4 <ls+0x1c0>
            {
                strcat(fullpath,"/");
   106ca:	6a e3       	ldi	r22, 0x3A	; 58
   106cc:	78 e0       	ldi	r23, 0x08	; 8
   106ce:	c8 01       	movw	r24, r16
   106d0:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
            }
            strcat(fullpath,de->d_name);
   106d4:	b6 01       	movw	r22, r12
   106d6:	c8 01       	movw	r24, r16
   106d8:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
            files +=ls_info(fullpath,verbose);
   106dc:	b4 01       	movw	r22, r8
   106de:	c8 01       	movw	r24, r16
   106e0:	5c de       	rcall	.-840    	; 0x1039a <ls_info>
   106e2:	e8 0e       	add	r14, r24
   106e4:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   106e6:	cf 5c       	subi	r28, 0xCF	; 207
   106e8:	de 4f       	sbci	r29, 0xFE	; 254
   106ea:	e8 81       	ld	r30, Y
   106ec:	f9 81       	ldd	r31, Y+1	; 0x01
   106ee:	c1 53       	subi	r28, 0x31	; 49
   106f0:	d1 40       	sbci	r29, 0x01	; 1
   106f2:	10 82       	st	Z, r1
   106f4:	d9 cf       	rjmp	.-78     	; 0x106a8 <ls+0x194>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   106f6:	e1 2c       	mov	r14, r1
   106f8:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   106fa:	ff 92       	push	r15
   106fc:	ef 92       	push	r14
   106fe:	80 e9       	ldi	r24, 0x90	; 144
   10700:	9c e0       	ldi	r25, 0x0C	; 12
   10702:	1f 92       	push	r1
   10704:	9f 93       	push	r25
   10706:	8f 93       	push	r24
   10708:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    return(files);
   1070c:	0f 90       	pop	r0
   1070e:	0f 90       	pop	r0
   10710:	0f 90       	pop	r0
   10712:	0f 90       	pop	r0
   10714:	0f 90       	pop	r0
}
   10716:	c7 01       	movw	r24, r14
   10718:	ce 5c       	subi	r28, 0xCE	; 206
   1071a:	de 4f       	sbci	r29, 0xFE	; 254
   1071c:	0f b6       	in	r0, 0x3f	; 63
   1071e:	f8 94       	cli
   10720:	de bf       	out	0x3e, r29	; 62
   10722:	0f be       	out	0x3f, r0	; 63
   10724:	cd bf       	out	0x3d, r28	; 61
   10726:	df 91       	pop	r29
   10728:	cf 91       	pop	r28
   1072a:	1f 91       	pop	r17
   1072c:	0f 91       	pop	r16
   1072e:	ff 90       	pop	r15
   10730:	ef 90       	pop	r14
   10732:	df 90       	pop	r13
   10734:	cf 90       	pop	r12
   10736:	bf 90       	pop	r11
   10738:	af 90       	pop	r10
   1073a:	9f 90       	pop	r9
   1073c:	8f 90       	pop	r8
   1073e:	6f 90       	pop	r6
   10740:	5f 90       	pop	r5
   10742:	4f 90       	pop	r4
   10744:	3f 90       	pop	r3
   10746:	2f 90       	pop	r2
   10748:	08 95       	ret

0001074a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1074a:	a0 e0       	ldi	r26, 0x00	; 0
   1074c:	b1 e0       	ldi	r27, 0x01	; 1
   1074e:	eb ea       	ldi	r30, 0xAB	; 171
   10750:	f3 e8       	ldi	r31, 0x83	; 131
   10752:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10756:	fb 01       	movw	r30, r22
   10758:	c0 80       	ld	r12, Z
   1075a:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1075c:	c1 14       	cp	r12, r1
   1075e:	d1 04       	cpc	r13, r1
   10760:	19 f4       	brne	.+6      	; 0x10768 <posix_tests+0x1e>
        return(0);
   10762:	80 e0       	ldi	r24, 0x00	; 0
   10764:	90 e0       	ldi	r25, 0x00	; 0
   10766:	67 c1       	rjmp	.+718    	; 0x10a36 <posix_tests+0x2ec>
   10768:	4b 01       	movw	r8, r22
   1076a:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   1076c:	64 e3       	ldi	r22, 0x34	; 52
   1076e:	7b e0       	ldi	r23, 0x0B	; 11
   10770:	c6 01       	movw	r24, r12
   10772:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   10776:	89 2b       	or	r24, r25
   10778:	a9 f0       	breq	.+42     	; 0x107a4 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   1077a:	f4 01       	movw	r30, r8
   1077c:	c2 80       	ldd	r12, Z+2	; 0x02
   1077e:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10780:	c1 14       	cp	r12, r1
   10782:	d1 04       	cpc	r13, r1
   10784:	21 f4       	brne	.+8      	; 0x1078e <posix_tests+0x44>
        {
            posix_help(1);
   10786:	81 e0       	ldi	r24, 0x01	; 1
   10788:	90 e0       	ldi	r25, 0x00	; 0
   1078a:	6b dc       	rcall	.-1834   	; 0x10062 <posix_help>
   1078c:	52 c1       	rjmp	.+676    	; 0x10a32 <posix_tests+0x2e8>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1078e:	64 e1       	ldi	r22, 0x14	; 20
   10790:	76 e1       	ldi	r23, 0x16	; 22
   10792:	c6 01       	movw	r24, r12
   10794:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   10798:	89 2b       	or	r24, r25
   1079a:	a9 f7       	brne	.-22     	; 0x10786 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   1079c:	42 e0       	ldi	r20, 0x02	; 2
   1079e:	64 2e       	mov	r6, r20
   107a0:	71 2c       	mov	r7, r1
   107a2:	03 c0       	rjmp	.+6      	; 0x107aa <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   107a4:	66 24       	eor	r6, r6
   107a6:	63 94       	inc	r6
   107a8:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   107aa:	73 01       	movw	r14, r6
   107ac:	ff ef       	ldi	r31, 0xFF	; 255
   107ae:	ef 1a       	sub	r14, r31
   107b0:	ff 0a       	sbc	r15, r31
   107b2:	98 01       	movw	r18, r16
   107b4:	a7 01       	movw	r20, r14
   107b6:	6a e3       	ldi	r22, 0x3A	; 58
   107b8:	7b e0       	ldi	r23, 0x0B	; 11
   107ba:	c6 01       	movw	r24, r12
   107bc:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   107c0:	89 2b       	or	r24, r25
   107c2:	a1 f1       	breq	.+104    	; 0x1082c <posix_tests+0xe2>
   107c4:	73 01       	movw	r14, r6
   107c6:	ee 0c       	add	r14, r14
   107c8:	ff 1c       	adc	r15, r15
   107ca:	e8 0c       	add	r14, r8
   107cc:	f9 1c       	adc	r15, r9
   107ce:	57 01       	movw	r10, r14
   107d0:	47 01       	movw	r8, r14
   107d2:	63 01       	movw	r12, r6
   107d4:	41 2c       	mov	r4, r1
   107d6:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   107d8:	c0 16       	cp	r12, r16
   107da:	d1 06       	cpc	r13, r17
   107dc:	1c f5       	brge	.+70     	; 0x10824 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   107de:	6e e3       	ldi	r22, 0x3E	; 62
   107e0:	7b e0       	ldi	r23, 0x0B	; 11
   107e2:	f4 01       	movw	r30, r8
   107e4:	81 91       	ld	r24, Z+
   107e6:	91 91       	ld	r25, Z+
   107e8:	4f 01       	movw	r8, r30
   107ea:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   107ee:	89 2b       	or	r24, r25
   107f0:	19 f0       	breq	.+6      	; 0x107f8 <posix_tests+0xae>
                page = 1;
   107f2:	44 24       	eor	r4, r4
   107f4:	43 94       	inc	r4
   107f6:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   107f8:	ff ef       	ldi	r31, 0xFF	; 255
   107fa:	cf 1a       	sub	r12, r31
   107fc:	df 0a       	sbc	r13, r31
   107fe:	ec cf       	rjmp	.-40     	; 0x107d8 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10800:	6e e3       	ldi	r22, 0x3E	; 62
   10802:	7b e0       	ldi	r23, 0x0B	; 11
   10804:	f5 01       	movw	r30, r10
   10806:	81 91       	ld	r24, Z+
   10808:	91 91       	ld	r25, Z+
   1080a:	5f 01       	movw	r10, r30
   1080c:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   10810:	89 2b       	or	r24, r25
   10812:	29 f4       	brne	.+10     	; 0x1081e <posix_tests+0xd4>
                cat(argv[ind], page);
   10814:	b2 01       	movw	r22, r4
   10816:	f7 01       	movw	r30, r14
   10818:	80 81       	ld	r24, Z
   1081a:	91 81       	ldd	r25, Z+1	; 0x01
   1081c:	51 dd       	rcall	.-1374   	; 0x102c0 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1081e:	ff ef       	ldi	r31, 0xFF	; 255
   10820:	6f 1a       	sub	r6, r31
   10822:	7f 0a       	sbc	r7, r31
   10824:	60 16       	cp	r6, r16
   10826:	71 06       	cpc	r7, r17
   10828:	5c f3       	brlt	.-42     	; 0x10800 <posix_tests+0xb6>
   1082a:	03 c1       	rjmp	.+518    	; 0x10a32 <posix_tests+0x2e8>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1082c:	53 01       	movw	r10, r6
   1082e:	82 e0       	ldi	r24, 0x02	; 2
   10830:	a8 0e       	add	r10, r24
   10832:	b1 1c       	adc	r11, r1
   10834:	98 01       	movw	r18, r16
   10836:	a5 01       	movw	r20, r10
   10838:	61 e4       	ldi	r22, 0x41	; 65
   1083a:	7b e0       	ldi	r23, 0x0B	; 11
   1083c:	c6 01       	movw	r24, r12
   1083e:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   10842:	89 2b       	or	r24, r25
   10844:	61 f0       	breq	.+24     	; 0x1085e <posix_tests+0x114>
    {
        copy(argv[ind],argv[ind+1]);
   10846:	ee 0c       	add	r14, r14
   10848:	ff 1c       	adc	r15, r15
   1084a:	f4 01       	movw	r30, r8
   1084c:	ee 0d       	add	r30, r14
   1084e:	ff 1d       	adc	r31, r15
   10850:	60 81       	ld	r22, Z
   10852:	71 81       	ldd	r23, Z+1	; 0x01
   10854:	32 97       	sbiw	r30, 0x02	; 2
   10856:	80 81       	ld	r24, Z
   10858:	91 81       	ldd	r25, Z+1	; 0x01
   1085a:	1f dc       	rcall	.-1986   	; 0x1009a <copy>
   1085c:	ea c0       	rjmp	.+468    	; 0x10a32 <posix_tests+0x2e8>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1085e:	98 01       	movw	r18, r16
   10860:	a7 01       	movw	r20, r14
   10862:	66 e4       	ldi	r22, 0x46	; 70
   10864:	7b e0       	ldi	r23, 0x0B	; 11
   10866:	c6 01       	movw	r24, r12
   10868:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1086c:	89 2b       	or	r24, r25
   1086e:	59 f0       	breq	.+22     	; 0x10886 <posix_tests+0x13c>
    {
        chdir(argv[ind]);
   10870:	73 01       	movw	r14, r6
   10872:	ee 0c       	add	r14, r14
   10874:	ff 1c       	adc	r15, r15
   10876:	f4 01       	movw	r30, r8
   10878:	ee 0d       	add	r30, r14
   1087a:	ff 1d       	adc	r31, r15
   1087c:	80 81       	ld	r24, Z
   1087e:	91 81       	ldd	r25, Z+1	; 0x01
   10880:	0e 94 fd 78 	call	0xf1fa	; 0xf1fa <chdir>
   10884:	d6 c0       	rjmp	.+428    	; 0x10a32 <posix_tests+0x2e8>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10886:	98 01       	movw	r18, r16
   10888:	a3 01       	movw	r20, r6
   1088a:	64 e6       	ldi	r22, 0x64	; 100
   1088c:	78 e0       	ldi	r23, 0x08	; 8
   1088e:	c6 01       	movw	r24, r12
   10890:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   10894:	89 2b       	or	r24, r25
   10896:	69 f1       	breq	.+90     	; 0x108f2 <posix_tests+0x1a8>
   10898:	73 01       	movw	r14, r6
   1089a:	ee 0c       	add	r14, r14
   1089c:	ff 1c       	adc	r15, r15
   1089e:	e8 0c       	add	r14, r8
   108a0:	f9 1c       	adc	r15, r9
   108a2:	c1 2c       	mov	r12, r1
   108a4:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   108a6:	c6 01       	movw	r24, r12
   108a8:	86 0d       	add	r24, r6
   108aa:	97 1d       	adc	r25, r7
   108ac:	80 17       	cp	r24, r16
   108ae:	91 07       	cpc	r25, r17
   108b0:	b4 f4       	brge	.+44     	; 0x108de <posix_tests+0x194>
        {
            if(!MATCH(argv[i],"-l"))
   108b2:	69 e4       	ldi	r22, 0x49	; 73
   108b4:	7b e0       	ldi	r23, 0x0B	; 11
   108b6:	f7 01       	movw	r30, r14
   108b8:	80 81       	ld	r24, Z
   108ba:	91 81       	ldd	r25, Z+1	; 0x01
   108bc:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   108c0:	89 2b       	or	r24, r25
   108c2:	31 f4       	brne	.+12     	; 0x108d0 <posix_tests+0x186>
                ls(argv[i],1);
   108c4:	61 e0       	ldi	r22, 0x01	; 1
   108c6:	70 e0       	ldi	r23, 0x00	; 0
   108c8:	f7 01       	movw	r30, r14
   108ca:	80 81       	ld	r24, Z
   108cc:	91 81       	ldd	r25, Z+1	; 0x01
   108ce:	22 de       	rcall	.-956    	; 0x10514 <ls>
            ++args;
   108d0:	ff ef       	ldi	r31, 0xFF	; 255
   108d2:	cf 1a       	sub	r12, r31
   108d4:	df 0a       	sbc	r13, r31
   108d6:	82 e0       	ldi	r24, 0x02	; 2
   108d8:	e8 0e       	add	r14, r24
   108da:	f1 1c       	adc	r15, r1
   108dc:	e4 cf       	rjmp	.-56     	; 0x108a6 <posix_tests+0x15c>
        }
        if(!args)
   108de:	c1 14       	cp	r12, r1
   108e0:	d1 04       	cpc	r13, r1
   108e2:	09 f0       	breq	.+2      	; 0x108e6 <posix_tests+0x19c>
        {
            ls("",1);
   108e4:	a6 c0       	rjmp	.+332    	; 0x10a32 <posix_tests+0x2e8>
   108e6:	61 e0       	ldi	r22, 0x01	; 1
   108e8:	70 e0       	ldi	r23, 0x00	; 0
   108ea:	84 e3       	ldi	r24, 0x34	; 52
   108ec:	97 e1       	ldi	r25, 0x17	; 23
   108ee:	12 de       	rcall	.-988    	; 0x10514 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   108f0:	a0 c0       	rjmp	.+320    	; 0x10a32 <posix_tests+0x2e8>
   108f2:	98 01       	movw	r18, r16
   108f4:	a7 01       	movw	r20, r14
   108f6:	6c e4       	ldi	r22, 0x4C	; 76
   108f8:	7b e0       	ldi	r23, 0x0B	; 11
   108fa:	c6 01       	movw	r24, r12
   108fc:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   10900:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10902:	19 f1       	breq	.+70     	; 0x1094a <posix_tests+0x200>
   10904:	e0 16       	cp	r14, r16
   10906:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10908:	7c f4       	brge	.+30     	; 0x10928 <posix_tests+0x1de>
   1090a:	ee 0c       	add	r14, r14
   1090c:	ff 1c       	adc	r15, r15
   1090e:	f4 01       	movw	r30, r8
   10910:	ee 0d       	add	r30, r14
   10912:	ff 1d       	adc	r31, r15
   10914:	48 e0       	ldi	r20, 0x08	; 8
   10916:	50 e0       	ldi	r21, 0x00	; 0
   10918:	60 e0       	ldi	r22, 0x00	; 0
   1091a:	70 e0       	ldi	r23, 0x00	; 0
   1091c:	80 81       	ld	r24, Z
   1091e:	91 81       	ldd	r25, Z+1	; 0x01
   10920:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <strtol>
   10924:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10926:	02 c0       	rjmp	.+4      	; 0x1092c <posix_tests+0x1e2>
   10928:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   1092a:	51 e0       	ldi	r21, 0x01	; 1
   1092c:	05 2e       	mov	r0, r21
   1092e:	00 0c       	add	r0, r0
   10930:	66 0b       	sbc	r22, r22
   10932:	77 0b       	sbc	r23, r23
   10934:	73 01       	movw	r14, r6
   10936:	ee 0c       	add	r14, r14
   10938:	ff 1c       	adc	r15, r15
   1093a:	f4 01       	movw	r30, r8
   1093c:	ee 0d       	add	r30, r14
   1093e:	ff 1d       	adc	r31, r15
   10940:	80 81       	ld	r24, Z
   10942:	91 81       	ldd	r25, Z+1	; 0x01
   10944:	0e 94 6a 79 	call	0xf2d4	; 0xf2d4 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10948:	74 c0       	rjmp	.+232    	; 0x10a32 <posix_tests+0x2e8>
   1094a:	98 01       	movw	r18, r16
   1094c:	a7 01       	movw	r20, r14
   1094e:	62 e5       	ldi	r22, 0x52	; 82
   10950:	7b e0       	ldi	r23, 0x0B	; 11
   10952:	c6 01       	movw	r24, r12
   10954:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   10958:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   1095a:	79 f0       	breq	.+30     	; 0x1097a <posix_tests+0x230>
   1095c:	73 01       	movw	r14, r6
   1095e:	ee 0c       	add	r14, r14
   10960:	ff 1c       	adc	r15, r15
   10962:	f4 01       	movw	r30, r8
   10964:	ee 0d       	add	r30, r14
   10966:	ff 1d       	adc	r31, r15
   10968:	80 81       	ld	r24, Z
   1096a:	91 81       	ldd	r25, Z+1	; 0x01
   1096c:	0e 94 b9 48 	call	0x9172	; 0x9172 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10970:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   10974:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10978:	5c c0       	rjmp	.+184    	; 0x10a32 <posix_tests+0x2e8>
   1097a:	98 01       	movw	r18, r16
   1097c:	a3 01       	movw	r20, r6
   1097e:	67 e5       	ldi	r22, 0x57	; 87
   10980:	7b e0       	ldi	r23, 0x0B	; 11
   10982:	c6 01       	movw	r24, r12
   10984:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   10988:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1098a:	a9 f0       	breq	.+42     	; 0x109b6 <posix_tests+0x26c>
   1098c:	6e ef       	ldi	r22, 0xFE	; 254
   1098e:	70 e0       	ldi	r23, 0x00	; 0
   10990:	ce 01       	movw	r24, r28
   10992:	01 96       	adiw	r24, 0x01	; 1
   10994:	0e 94 45 79 	call	0xf28a	; 0xf28a <getcwd>
   10998:	9f 93       	push	r25
   1099a:	8f 93       	push	r24
   1099c:	8e ed       	ldi	r24, 0xDE	; 222
   1099e:	9d e0       	ldi	r25, 0x0D	; 13
   109a0:	1f 92       	push	r1
   109a2:	9f 93       	push	r25
   109a4:	8f 93       	push	r24
   109a6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   109aa:	0f 90       	pop	r0
   109ac:	0f 90       	pop	r0
   109ae:	0f 90       	pop	r0
   109b0:	0f 90       	pop	r0
   109b2:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   109b4:	3e c0       	rjmp	.+124    	; 0x10a32 <posix_tests+0x2e8>
   109b6:	98 01       	movw	r18, r16
   109b8:	a5 01       	movw	r20, r10
   109ba:	6b e5       	ldi	r22, 0x5B	; 91
   109bc:	7b e0       	ldi	r23, 0x0B	; 11
   109be:	c6 01       	movw	r24, r12
   109c0:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   109c4:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   109c6:	69 f0       	breq	.+26     	; 0x109e2 <posix_tests+0x298>
   109c8:	ee 0c       	add	r14, r14
   109ca:	ff 1c       	adc	r15, r15
   109cc:	f4 01       	movw	r30, r8
   109ce:	ee 0d       	add	r30, r14
   109d0:	ff 1d       	adc	r31, r15
   109d2:	60 81       	ld	r22, Z
   109d4:	71 81       	ldd	r23, Z+1	; 0x01
   109d6:	32 97       	sbiw	r30, 0x02	; 2
   109d8:	80 81       	ld	r24, Z
   109da:	91 81       	ldd	r25, Z+1	; 0x01
   109dc:	0e 94 98 79 	call	0xf330	; 0xf330 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   109e0:	28 c0       	rjmp	.+80     	; 0x10a32 <posix_tests+0x2e8>
   109e2:	98 01       	movw	r18, r16
   109e4:	a7 01       	movw	r20, r14
   109e6:	62 e6       	ldi	r22, 0x62	; 98
   109e8:	7b e0       	ldi	r23, 0x0B	; 11
   109ea:	c6 01       	movw	r24, r12
   109ec:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   109f0:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   109f2:	59 f0       	breq	.+22     	; 0x10a0a <posix_tests+0x2c0>
   109f4:	73 01       	movw	r14, r6
   109f6:	ee 0c       	add	r14, r14
   109f8:	ff 1c       	adc	r15, r15
   109fa:	f4 01       	movw	r30, r8
   109fc:	ee 0d       	add	r30, r14
   109fe:	ff 1d       	adc	r31, r15
   10a00:	80 81       	ld	r24, Z
   10a02:	91 81       	ldd	r25, Z+1	; 0x01
   10a04:	0e 94 b7 79 	call	0xf36e	; 0xf36e <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10a08:	14 c0       	rjmp	.+40     	; 0x10a32 <posix_tests+0x2e8>
   10a0a:	98 01       	movw	r18, r16
   10a0c:	a7 01       	movw	r20, r14
   10a0e:	65 e6       	ldi	r22, 0x65	; 101
   10a10:	7b e0       	ldi	r23, 0x0B	; 11
   10a12:	c6 01       	movw	r24, r12
   10a14:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   10a18:	89 2b       	or	r24, r25
   10a1a:	09 f4       	brne	.+2      	; 0x10a1e <posix_tests+0x2d4>
    {
        rmdir(argv[ind]);
   10a1c:	a2 ce       	rjmp	.-700    	; 0x10762 <posix_tests+0x18>
   10a1e:	73 01       	movw	r14, r6
   10a20:	ee 0c       	add	r14, r14
   10a22:	ff 1c       	adc	r15, r15
   10a24:	f4 01       	movw	r30, r8
   10a26:	ee 0d       	add	r30, r14
   10a28:	ff 1d       	adc	r31, r15
   10a2a:	80 81       	ld	r24, Z
   10a2c:	91 81       	ldd	r25, Z+1	; 0x01
   10a2e:	0e 94 d6 79 	call	0xf3ac	; 0xf3ac <rmdir>
        return(1);
   10a32:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   10a34:	90 e0       	ldi	r25, 0x00	; 0
   10a36:	d3 95       	inc	r29
   10a38:	e0 e1       	ldi	r30, 0x10	; 16
   10a3a:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

00010a3e <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10a3e:	61 e0       	ldi	r22, 0x01	; 1
   10a40:	70 e0       	ldi	r23, 0x00	; 0
   10a42:	8c eb       	ldi	r24, 0xBC	; 188
   10a44:	96 e8       	ldi	r25, 0x86	; 134
   10a46:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <set_timers>
   10a4a:	01 96       	adiw	r24, 0x01	; 1
   10a4c:	51 f4       	brne	.+20     	; 0x10a62 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   10a4e:	88 e0       	ldi	r24, 0x08	; 8
   10a50:	9f e0       	ldi	r25, 0x0F	; 15
   10a52:	1f 92       	push	r1
   10a54:	9f 93       	push	r25
   10a56:	8f 93       	push	r24
   10a58:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10a5c:	0f 90       	pop	r0
   10a5e:	0f 90       	pop	r0

    gpib_timer_reset();
   10a60:	0f 90       	pop	r0
   10a62:	78 c1       	rjmp	.+752    	; 0x10d54 <gpib_timer_reset>
   10a64:	08 95       	ret

00010a66 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10a66:	28 2f       	mov	r18, r24
   10a68:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10a6a:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10a6c:	88 0f       	add	r24, r24
        if(mask & 1)
   10a6e:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10a70:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10a72:	26 95       	lsr	r18
   10a74:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10a76:	d1 f7       	brne	.-12     	; 0x10a6c <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10a78:	08 95       	ret

00010a7a <ppr_set>:
   10a7a:	f5 df       	rcall	.-22     	; 0x10a66 <reverse_8bits>
   10a7c:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_ppr_reg>
   10a80:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <SPI0_TXRX_Byte>
   10a84:	2a 9a       	sbi	0x05, 2	; 5
   10a86:	22 9a       	sbi	0x04, 2	; 4
   10a88:	2a 98       	cbi	0x05, 2	; 5
   10a8a:	22 9a       	sbi	0x04, 2	; 4
   10a8c:	08 95       	ret

00010a8e <ppr_reg>:
   10a8e:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_ppr_reg>
   10a92:	e9 cf       	rjmp	.-46     	; 0x10a66 <reverse_8bits>
   10a94:	08 95       	ret

00010a96 <ppr_init>:
   10a96:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10a9a:	81 ff       	sbrs	r24, 1
   10a9c:	0a c0       	rjmp	.+20     	; 0x10ab2 <ppr_init+0x1c>
   10a9e:	85 ef       	ldi	r24, 0xF5	; 245
   10aa0:	9e e0       	ldi	r25, 0x0E	; 14
   10aa2:	1f 92       	push	r1
   10aa4:	9f 93       	push	r25
   10aa6:	8f 93       	push	r24
   10aa8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10aac:	0f 90       	pop	r0
   10aae:	0f 90       	pop	r0
   10ab0:	0f 90       	pop	r0
   10ab2:	80 e0       	ldi	r24, 0x00	; 0
   10ab4:	e2 cf       	rjmp	.-60     	; 0x10a7a <ppr_set>
   10ab6:	08 95       	ret

00010ab8 <ppr_bit_set>:
   10ab8:	21 e0       	ldi	r18, 0x01	; 1
   10aba:	30 e0       	ldi	r19, 0x00	; 0
   10abc:	01 c0       	rjmp	.+2      	; 0x10ac0 <ppr_bit_set+0x8>
   10abe:	22 0f       	add	r18, r18
   10ac0:	8a 95       	dec	r24
   10ac2:	ea f7       	brpl	.-6      	; 0x10abe <ppr_bit_set+0x6>
   10ac4:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_ppr_reg>
   10ac8:	82 2b       	or	r24, r18
   10aca:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_ppr_reg>
   10ace:	d5 cf       	rjmp	.-86     	; 0x10a7a <ppr_set>
   10ad0:	08 95       	ret

00010ad2 <ppr_bit_clr>:
   10ad2:	21 e0       	ldi	r18, 0x01	; 1
   10ad4:	30 e0       	ldi	r19, 0x00	; 0
   10ad6:	01 c0       	rjmp	.+2      	; 0x10ada <ppr_bit_clr+0x8>
   10ad8:	22 0f       	add	r18, r18
   10ada:	8a 95       	dec	r24
   10adc:	ea f7       	brpl	.-6      	; 0x10ad8 <ppr_bit_clr+0x6>
   10ade:	20 95       	com	r18
   10ae0:	80 91 71 19 	lds	r24, 0x1971	; 0x801971 <_ppr_reg>
   10ae4:	82 23       	and	r24, r18
   10ae6:	80 93 71 19 	sts	0x1971, r24	; 0x801971 <_ppr_reg>
   10aea:	c7 cf       	rjmp	.-114    	; 0x10a7a <ppr_set>
   10aec:	08 95       	ret

00010aee <dbf_open>:
   10aee:	0f 93       	push	r16
   10af0:	1f 93       	push	r17
   10af2:	cf 93       	push	r28
   10af4:	df 93       	push	r29
   10af6:	16 2f       	mov	r17, r22
   10af8:	07 2f       	mov	r16, r23
   10afa:	0e 94 12 5c 	call	0xb824	; 0xb824 <f_open>
   10afe:	ec 01       	movw	r28, r24
   10b00:	89 2b       	or	r24, r25
   10b02:	89 f0       	breq	.+34     	; 0x10b26 <dbf_open+0x38>
   10b04:	0f 93       	push	r16
   10b06:	1f 93       	push	r17
   10b08:	84 ee       	ldi	r24, 0xE4	; 228
   10b0a:	9e e0       	ldi	r25, 0x0E	; 14
   10b0c:	1f 92       	push	r1
   10b0e:	9f 93       	push	r25
   10b10:	8f 93       	push	r24
   10b12:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10b16:	ce 01       	movw	r24, r28
   10b18:	0e 94 8a 72 	call	0xe514	; 0xe514 <put_rc>
   10b1c:	0f 90       	pop	r0
   10b1e:	0f 90       	pop	r0
   10b20:	0f 90       	pop	r0
   10b22:	0f 90       	pop	r0
   10b24:	0f 90       	pop	r0
   10b26:	ce 01       	movw	r24, r28
   10b28:	df 91       	pop	r29
   10b2a:	cf 91       	pop	r28
   10b2c:	1f 91       	pop	r17
   10b2e:	0f 91       	pop	r16
   10b30:	08 95       	ret

00010b32 <dbf_read>:
   10b32:	cf 93       	push	r28
   10b34:	df 93       	push	r29
   10b36:	0e 94 cd 5d 	call	0xbb9a	; 0xbb9a <f_read>
   10b3a:	ec 01       	movw	r28, r24
   10b3c:	89 2b       	or	r24, r25
   10b3e:	69 f0       	breq	.+26     	; 0x10b5a <dbf_read+0x28>
   10b40:	87 ed       	ldi	r24, 0xD7	; 215
   10b42:	9e e0       	ldi	r25, 0x0E	; 14
   10b44:	1f 92       	push	r1
   10b46:	9f 93       	push	r25
   10b48:	8f 93       	push	r24
   10b4a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10b4e:	ce 01       	movw	r24, r28
   10b50:	0e 94 8a 72 	call	0xe514	; 0xe514 <put_rc>
   10b54:	0f 90       	pop	r0
   10b56:	0f 90       	pop	r0
   10b58:	0f 90       	pop	r0
   10b5a:	ce 01       	movw	r24, r28
   10b5c:	df 91       	pop	r29
   10b5e:	cf 91       	pop	r28
   10b60:	08 95       	ret

00010b62 <dbf_write>:
   10b62:	cf 93       	push	r28
   10b64:	df 93       	push	r29
   10b66:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <f_write>
   10b6a:	ec 01       	movw	r28, r24
   10b6c:	89 2b       	or	r24, r25
   10b6e:	69 f0       	breq	.+26     	; 0x10b8a <dbf_write+0x28>
   10b70:	89 ec       	ldi	r24, 0xC9	; 201
   10b72:	9e e0       	ldi	r25, 0x0E	; 14
   10b74:	1f 92       	push	r1
   10b76:	9f 93       	push	r25
   10b78:	8f 93       	push	r24
   10b7a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10b7e:	ce 01       	movw	r24, r28
   10b80:	0e 94 8a 72 	call	0xe514	; 0xe514 <put_rc>
   10b84:	0f 90       	pop	r0
   10b86:	0f 90       	pop	r0
   10b88:	0f 90       	pop	r0
   10b8a:	ce 01       	movw	r24, r28
   10b8c:	df 91       	pop	r29
   10b8e:	cf 91       	pop	r28
   10b90:	08 95       	ret

00010b92 <dbf_lseek>:
   10b92:	cf 93       	push	r28
   10b94:	df 93       	push	r29
   10b96:	0e 94 d9 62 	call	0xc5b2	; 0xc5b2 <f_lseek>
   10b9a:	ec 01       	movw	r28, r24
   10b9c:	89 2b       	or	r24, r25
   10b9e:	69 f0       	breq	.+26     	; 0x10bba <dbf_lseek+0x28>
   10ba0:	8c eb       	ldi	r24, 0xBC	; 188
   10ba2:	9e e0       	ldi	r25, 0x0E	; 14
   10ba4:	1f 92       	push	r1
   10ba6:	9f 93       	push	r25
   10ba8:	8f 93       	push	r24
   10baa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10bae:	ce 01       	movw	r24, r28
   10bb0:	0e 94 8a 72 	call	0xe514	; 0xe514 <put_rc>
   10bb4:	0f 90       	pop	r0
   10bb6:	0f 90       	pop	r0
   10bb8:	0f 90       	pop	r0
   10bba:	ce 01       	movw	r24, r28
   10bbc:	df 91       	pop	r29
   10bbe:	cf 91       	pop	r28
   10bc0:	08 95       	ret

00010bc2 <dbf_close>:
   10bc2:	cf 93       	push	r28
   10bc4:	df 93       	push	r29
   10bc6:	0e 94 2f 61 	call	0xc25e	; 0xc25e <f_close>
   10bca:	ec 01       	movw	r28, r24
   10bcc:	89 2b       	or	r24, r25
   10bce:	69 f0       	breq	.+26     	; 0x10bea <dbf_close+0x28>
   10bd0:	8e ea       	ldi	r24, 0xAE	; 174
   10bd2:	9e e0       	ldi	r25, 0x0E	; 14
   10bd4:	1f 92       	push	r1
   10bd6:	9f 93       	push	r25
   10bd8:	8f 93       	push	r24
   10bda:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10bde:	ce 01       	movw	r24, r28
   10be0:	0e 94 8a 72 	call	0xe514	; 0xe514 <put_rc>
   10be4:	0f 90       	pop	r0
   10be6:	0f 90       	pop	r0
   10be8:	0f 90       	pop	r0
   10bea:	ce 01       	movw	r24, r28
   10bec:	df 91       	pop	r29
   10bee:	cf 91       	pop	r28
   10bf0:	08 95       	ret

00010bf2 <dbf_open_read>:
   10bf2:	a6 e2       	ldi	r26, 0x26	; 38
   10bf4:	b2 e0       	ldi	r27, 0x02	; 2
   10bf6:	ef ef       	ldi	r30, 0xFF	; 255
   10bf8:	f5 e8       	ldi	r31, 0x85	; 133
   10bfa:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   10bfe:	4a 01       	movw	r8, r20
   10c00:	5b 01       	movw	r10, r22
   10c02:	69 01       	movw	r12, r18
   10c04:	cb 5d       	subi	r28, 0xDB	; 219
   10c06:	dd 4f       	sbci	r29, 0xFD	; 253
   10c08:	19 82       	std	Y+1, r1	; 0x01
   10c0a:	18 82       	st	Y, r1
   10c0c:	c5 52       	subi	r28, 0x25	; 37
   10c0e:	d2 40       	sbci	r29, 0x02	; 2
   10c10:	43 e0       	ldi	r20, 0x03	; 3
   10c12:	bc 01       	movw	r22, r24
   10c14:	ce 01       	movw	r24, r28
   10c16:	01 96       	adiw	r24, 0x01	; 1
   10c18:	6a df       	rcall	.-300    	; 0x10aee <dbf_open>
   10c1a:	89 2b       	or	r24, r25
   10c1c:	19 f0       	breq	.+6      	; 0x10c24 <dbf_open_read+0x32>
   10c1e:	81 e1       	ldi	r24, 0x11	; 17
   10c20:	90 e0       	ldi	r25, 0x00	; 0
   10c22:	2f c0       	rjmp	.+94     	; 0x10c82 <dbf_open_read+0x90>
   10c24:	b5 01       	movw	r22, r10
   10c26:	a4 01       	movw	r20, r8
   10c28:	ce 01       	movw	r24, r28
   10c2a:	01 96       	adiw	r24, 0x01	; 1
   10c2c:	b2 df       	rcall	.-156    	; 0x10b92 <dbf_lseek>
   10c2e:	89 2b       	or	r24, r25
   10c30:	59 f0       	breq	.+22     	; 0x10c48 <dbf_open_read+0x56>
   10c32:	85 e0       	ldi	r24, 0x05	; 5
   10c34:	90 e0       	ldi	r25, 0x00	; 0
   10c36:	f7 01       	movw	r30, r14
   10c38:	91 83       	std	Z+1, r25	; 0x01
   10c3a:	80 83       	st	Z, r24
   10c3c:	ce 01       	movw	r24, r28
   10c3e:	01 96       	adiw	r24, 0x01	; 1
   10c40:	c0 df       	rcall	.-128    	; 0x10bc2 <dbf_close>
   10c42:	8f ef       	ldi	r24, 0xFF	; 255
   10c44:	9f ef       	ldi	r25, 0xFF	; 255
   10c46:	27 c0       	rjmp	.+78     	; 0x10c96 <dbf_open_read+0xa4>
   10c48:	9e 01       	movw	r18, r28
   10c4a:	2b 5d       	subi	r18, 0xDB	; 219
   10c4c:	3d 4f       	sbci	r19, 0xFD	; 253
   10c4e:	a8 01       	movw	r20, r16
   10c50:	b6 01       	movw	r22, r12
   10c52:	ce 01       	movw	r24, r28
   10c54:	01 96       	adiw	r24, 0x01	; 1
   10c56:	6d df       	rcall	.-294    	; 0x10b32 <dbf_read>
   10c58:	89 2b       	or	r24, r25
   10c5a:	49 f4       	brne	.+18     	; 0x10c6e <dbf_open_read+0x7c>
   10c5c:	cb 5d       	subi	r28, 0xDB	; 219
   10c5e:	dd 4f       	sbci	r29, 0xFD	; 253
   10c60:	88 81       	ld	r24, Y
   10c62:	99 81       	ldd	r25, Y+1	; 0x01
   10c64:	c5 52       	subi	r28, 0x25	; 37
   10c66:	d2 40       	sbci	r29, 0x02	; 2
   10c68:	08 17       	cp	r16, r24
   10c6a:	19 07       	cpc	r17, r25
   10c6c:	19 f0       	breq	.+6      	; 0x10c74 <dbf_open_read+0x82>
   10c6e:	81 e0       	ldi	r24, 0x01	; 1
   10c70:	90 e0       	ldi	r25, 0x00	; 0
   10c72:	e1 cf       	rjmp	.-62     	; 0x10c36 <dbf_open_read+0x44>
   10c74:	ce 01       	movw	r24, r28
   10c76:	01 96       	adiw	r24, 0x01	; 1
   10c78:	a4 df       	rcall	.-184    	; 0x10bc2 <dbf_close>
   10c7a:	89 2b       	or	r24, r25
   10c7c:	31 f0       	breq	.+12     	; 0x10c8a <dbf_open_read+0x98>
   10c7e:	80 e1       	ldi	r24, 0x10	; 16
   10c80:	90 e0       	ldi	r25, 0x00	; 0
   10c82:	f7 01       	movw	r30, r14
   10c84:	91 83       	std	Z+1, r25	; 0x01
   10c86:	80 83       	st	Z, r24
   10c88:	dc cf       	rjmp	.-72     	; 0x10c42 <dbf_open_read+0x50>
   10c8a:	cb 5d       	subi	r28, 0xDB	; 219
   10c8c:	dd 4f       	sbci	r29, 0xFD	; 253
   10c8e:	88 81       	ld	r24, Y
   10c90:	99 81       	ldd	r25, Y+1	; 0x01
   10c92:	c5 52       	subi	r28, 0x25	; 37
   10c94:	d2 40       	sbci	r29, 0x02	; 2
   10c96:	ca 5d       	subi	r28, 0xDA	; 218
   10c98:	dd 4f       	sbci	r29, 0xFD	; 253
   10c9a:	ec e0       	ldi	r30, 0x0C	; 12
   10c9c:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

00010ca0 <dbf_open_write>:
   10ca0:	a6 e2       	ldi	r26, 0x26	; 38
   10ca2:	b2 e0       	ldi	r27, 0x02	; 2
   10ca4:	e6 e5       	ldi	r30, 0x56	; 86
   10ca6:	f6 e8       	ldi	r31, 0x86	; 134
   10ca8:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   10cac:	4a 01       	movw	r8, r20
   10cae:	5b 01       	movw	r10, r22
   10cb0:	69 01       	movw	r12, r18
   10cb2:	cb 5d       	subi	r28, 0xDB	; 219
   10cb4:	dd 4f       	sbci	r29, 0xFD	; 253
   10cb6:	19 82       	std	Y+1, r1	; 0x01
   10cb8:	18 82       	st	Y, r1
   10cba:	c5 52       	subi	r28, 0x25	; 37
   10cbc:	d2 40       	sbci	r29, 0x02	; 2
   10cbe:	43 e0       	ldi	r20, 0x03	; 3
   10cc0:	bc 01       	movw	r22, r24
   10cc2:	ce 01       	movw	r24, r28
   10cc4:	01 96       	adiw	r24, 0x01	; 1
   10cc6:	13 df       	rcall	.-474    	; 0x10aee <dbf_open>
   10cc8:	89 2b       	or	r24, r25
   10cca:	19 f0       	breq	.+6      	; 0x10cd2 <dbf_open_write+0x32>
   10ccc:	81 e1       	ldi	r24, 0x11	; 17
   10cce:	90 e0       	ldi	r25, 0x00	; 0
   10cd0:	2f c0       	rjmp	.+94     	; 0x10d30 <dbf_open_write+0x90>
   10cd2:	b5 01       	movw	r22, r10
   10cd4:	a4 01       	movw	r20, r8
   10cd6:	ce 01       	movw	r24, r28
   10cd8:	01 96       	adiw	r24, 0x01	; 1
   10cda:	5b df       	rcall	.-330    	; 0x10b92 <dbf_lseek>
   10cdc:	89 2b       	or	r24, r25
   10cde:	59 f0       	breq	.+22     	; 0x10cf6 <dbf_open_write+0x56>
   10ce0:	85 e0       	ldi	r24, 0x05	; 5
   10ce2:	90 e0       	ldi	r25, 0x00	; 0
   10ce4:	f7 01       	movw	r30, r14
   10ce6:	91 83       	std	Z+1, r25	; 0x01
   10ce8:	80 83       	st	Z, r24
   10cea:	ce 01       	movw	r24, r28
   10cec:	01 96       	adiw	r24, 0x01	; 1
   10cee:	69 df       	rcall	.-302    	; 0x10bc2 <dbf_close>
   10cf0:	8f ef       	ldi	r24, 0xFF	; 255
   10cf2:	9f ef       	ldi	r25, 0xFF	; 255
   10cf4:	27 c0       	rjmp	.+78     	; 0x10d44 <dbf_open_write+0xa4>
   10cf6:	9e 01       	movw	r18, r28
   10cf8:	2b 5d       	subi	r18, 0xDB	; 219
   10cfa:	3d 4f       	sbci	r19, 0xFD	; 253
   10cfc:	a8 01       	movw	r20, r16
   10cfe:	b6 01       	movw	r22, r12
   10d00:	ce 01       	movw	r24, r28
   10d02:	01 96       	adiw	r24, 0x01	; 1
   10d04:	2e df       	rcall	.-420    	; 0x10b62 <dbf_write>
   10d06:	89 2b       	or	r24, r25
   10d08:	49 f4       	brne	.+18     	; 0x10d1c <dbf_open_write+0x7c>
   10d0a:	cb 5d       	subi	r28, 0xDB	; 219
   10d0c:	dd 4f       	sbci	r29, 0xFD	; 253
   10d0e:	88 81       	ld	r24, Y
   10d10:	99 81       	ldd	r25, Y+1	; 0x01
   10d12:	c5 52       	subi	r28, 0x25	; 37
   10d14:	d2 40       	sbci	r29, 0x02	; 2
   10d16:	08 17       	cp	r16, r24
   10d18:	19 07       	cpc	r17, r25
   10d1a:	19 f0       	breq	.+6      	; 0x10d22 <dbf_open_write+0x82>
   10d1c:	81 e0       	ldi	r24, 0x01	; 1
   10d1e:	90 e0       	ldi	r25, 0x00	; 0
   10d20:	e1 cf       	rjmp	.-62     	; 0x10ce4 <dbf_open_write+0x44>
   10d22:	ce 01       	movw	r24, r28
   10d24:	01 96       	adiw	r24, 0x01	; 1
   10d26:	4d df       	rcall	.-358    	; 0x10bc2 <dbf_close>
   10d28:	89 2b       	or	r24, r25
   10d2a:	31 f0       	breq	.+12     	; 0x10d38 <dbf_open_write+0x98>
   10d2c:	80 e1       	ldi	r24, 0x10	; 16
   10d2e:	90 e0       	ldi	r25, 0x00	; 0
   10d30:	f7 01       	movw	r30, r14
   10d32:	91 83       	std	Z+1, r25	; 0x01
   10d34:	80 83       	st	Z, r24
   10d36:	dc cf       	rjmp	.-72     	; 0x10cf0 <dbf_open_write+0x50>
   10d38:	cb 5d       	subi	r28, 0xDB	; 219
   10d3a:	dd 4f       	sbci	r29, 0xFD	; 253
   10d3c:	88 81       	ld	r24, Y
   10d3e:	99 81       	ldd	r25, Y+1	; 0x01
   10d40:	c5 52       	subi	r28, 0x25	; 37
   10d42:	d2 40       	sbci	r29, 0x02	; 2
   10d44:	ca 5d       	subi	r28, 0xDA	; 218
   10d46:	dd 4f       	sbci	r29, 0xFD	; 253
   10d48:	ec e0       	ldi	r30, 0x0C	; 12
   10d4a:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

00010d4e <gpib_timer_elapsed_begin>:
   10d4e:	0c 94 4d 37 	jmp	0x6e9a	; 0x6e9a <clock_elapsed_begin>
   10d52:	08 95       	ret

00010d54 <gpib_timer_reset>:
   10d54:	f8 94       	cli
   10d56:	ed ee       	ldi	r30, 0xED	; 237
   10d58:	fc e1       	ldi	r31, 0x1C	; 28
   10d5a:	10 82       	st	Z, r1
   10d5c:	11 82       	std	Z+1, r1	; 0x01
   10d5e:	12 82       	std	Z+2, r1	; 0x02
   10d60:	13 82       	std	Z+3, r1	; 0x03
   10d62:	14 82       	std	Z+4, r1	; 0x04
   10d64:	15 82       	std	Z+5, r1	; 0x05
   10d66:	16 82       	std	Z+6, r1	; 0x06
   10d68:	17 82       	std	Z+7, r1	; 0x07
   10d6a:	81 e0       	ldi	r24, 0x01	; 1
   10d6c:	80 87       	std	Z+8, r24	; 0x08
   10d6e:	78 94       	sei
   10d70:	08 95       	ret

00010d72 <gpib_timer_elapsed_end>:
   10d72:	0c 94 53 37 	jmp	0x6ea6	; 0x6ea6 <clock_elapsed_end>
   10d76:	08 95       	ret

00010d78 <gpib_timer_task>:
   10d78:	f8 94       	cli
   10d7a:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_timer+0x4>
   10d7e:	90 91 f2 1c 	lds	r25, 0x1CF2	; 0x801cf2 <gpib_timer+0x5>
   10d82:	a0 91 f3 1c 	lds	r26, 0x1CF3	; 0x801cf3 <gpib_timer+0x6>
   10d86:	b0 91 f4 1c 	lds	r27, 0x1CF4	; 0x801cf4 <gpib_timer+0x7>
   10d8a:	89 2b       	or	r24, r25
   10d8c:	8a 2b       	or	r24, r26
   10d8e:	8b 2b       	or	r24, r27
   10d90:	a1 f0       	breq	.+40     	; 0x10dba <gpib_timer_task+0x42>
   10d92:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_timer+0x4>
   10d96:	90 91 f2 1c 	lds	r25, 0x1CF2	; 0x801cf2 <gpib_timer+0x5>
   10d9a:	a0 91 f3 1c 	lds	r26, 0x1CF3	; 0x801cf3 <gpib_timer+0x6>
   10d9e:	b0 91 f4 1c 	lds	r27, 0x1CF4	; 0x801cf4 <gpib_timer+0x7>
   10da2:	01 97       	sbiw	r24, 0x01	; 1
   10da4:	a1 09       	sbc	r26, r1
   10da6:	b1 09       	sbc	r27, r1
   10da8:	80 93 f1 1c 	sts	0x1CF1, r24	; 0x801cf1 <gpib_timer+0x4>
   10dac:	90 93 f2 1c 	sts	0x1CF2, r25	; 0x801cf2 <gpib_timer+0x5>
   10db0:	a0 93 f3 1c 	sts	0x1CF3, r26	; 0x801cf3 <gpib_timer+0x6>
   10db4:	b0 93 f4 1c 	sts	0x1CF4, r27	; 0x801cf4 <gpib_timer+0x7>
   10db8:	03 c0       	rjmp	.+6      	; 0x10dc0 <gpib_timer_task+0x48>
   10dba:	81 e0       	ldi	r24, 0x01	; 1
   10dbc:	80 93 f5 1c 	sts	0x1CF5, r24	; 0x801cf5 <gpib_timer+0x8>
   10dc0:	78 94       	sei
   10dc2:	08 95       	ret

00010dc4 <gpib_timeout_set>:
   10dc4:	f8 94       	cli
   10dc6:	ed ee       	ldi	r30, 0xED	; 237
   10dc8:	fc e1       	ldi	r31, 0x1C	; 28
   10dca:	64 83       	std	Z+4, r22	; 0x04
   10dcc:	75 83       	std	Z+5, r23	; 0x05
   10dce:	86 83       	std	Z+6, r24	; 0x06
   10dd0:	97 83       	std	Z+7, r25	; 0x07
   10dd2:	10 86       	std	Z+8, r1	; 0x08
   10dd4:	78 94       	sei
   10dd6:	08 95       	ret

00010dd8 <gpib_bus_read_init>:
   10dd8:	54 98       	cbi	0x0a, 4	; 10
   10dda:	57 98       	cbi	0x0a, 7	; 10
   10ddc:	45 98       	cbi	0x08, 5	; 8
   10dde:	3d 9a       	sbi	0x07, 5	; 7
   10de0:	11 b8       	out	0x01, r1	; 1
   10de2:	2f ef       	ldi	r18, 0xFF	; 255
   10de4:	22 b9       	out	0x02, r18	; 2
   10de6:	43 98       	cbi	0x08, 3	; 8
   10de8:	3b 9a       	sbi	0x07, 3	; 7
   10dea:	21 98       	cbi	0x04, 1	; 4
   10dec:	56 98       	cbi	0x0a, 6	; 10
   10dee:	20 98       	cbi	0x04, 0	; 4
   10df0:	55 98       	cbi	0x0a, 5	; 10
   10df2:	89 2b       	or	r24, r25
   10df4:	39 f4       	brne	.+14     	; 0x10e04 <gpib_bus_read_init+0x2c>
   10df6:	52 98       	cbi	0x0a, 2	; 10
   10df8:	53 98       	cbi	0x0a, 3	; 10
   10dfa:	8d e0       	ldi	r24, 0x0D	; 13
   10dfc:	8a 95       	dec	r24
   10dfe:	f1 f7       	brne	.-4      	; 0x10dfc <gpib_bus_read_init+0x24>
   10e00:	00 00       	nop
   10e02:	04 c0       	rjmp	.+8      	; 0x10e0c <gpib_bus_read_init+0x34>
   10e04:	5b 98       	cbi	0x0b, 3	; 11
   10e06:	53 9a       	sbi	0x0a, 3	; 10
   10e08:	5a 98       	cbi	0x0b, 2	; 11
   10e0a:	52 9a       	sbi	0x0a, 2	; 10
   10e0c:	42 98       	cbi	0x08, 2	; 8
   10e0e:	3a 9a       	sbi	0x07, 2	; 7
   10e10:	44 9a       	sbi	0x08, 4	; 8
   10e12:	3c 9a       	sbi	0x07, 4	; 7
   10e14:	8d e0       	ldi	r24, 0x0D	; 13
   10e16:	8a 95       	dec	r24
   10e18:	f1 f7       	brne	.-4      	; 0x10e16 <gpib_bus_read_init+0x3e>
   10e1a:	00 00       	nop
   10e1c:	08 95       	ret

00010e1e <gpib_bus_init>:
   10e1e:	10 92 72 19 	sts	0x1972, r1	; 0x801972 <gpib_unread_f>
   10e22:	11 b8       	out	0x01, r1	; 1
   10e24:	8f ef       	ldi	r24, 0xFF	; 255
   10e26:	82 b9       	out	0x02, r24	; 2
   10e28:	21 98       	cbi	0x04, 1	; 4
   10e2a:	52 98       	cbi	0x0a, 2	; 10
   10e2c:	53 98       	cbi	0x0a, 3	; 10
   10e2e:	54 98       	cbi	0x0a, 4	; 10
   10e30:	57 98       	cbi	0x0a, 7	; 10
   10e32:	56 98       	cbi	0x0a, 6	; 10
   10e34:	20 98       	cbi	0x04, 0	; 4
   10e36:	55 98       	cbi	0x0a, 5	; 10
   10e38:	45 98       	cbi	0x08, 5	; 8
   10e3a:	3d 9a       	sbi	0x07, 5	; 7
   10e3c:	43 98       	cbi	0x08, 3	; 8
   10e3e:	3b 9a       	sbi	0x07, 3	; 7
   10e40:	42 98       	cbi	0x08, 2	; 8
   10e42:	3a 9a       	sbi	0x07, 2	; 7
   10e44:	44 9a       	sbi	0x08, 4	; 8
   10e46:	3c 9a       	sbi	0x07, 4	; 7
   10e48:	8d e0       	ldi	r24, 0x0D	; 13
   10e4a:	8a 95       	dec	r24
   10e4c:	f1 f7       	brne	.-4      	; 0x10e4a <gpib_bus_init+0x2c>
   10e4e:	00 00       	nop
   10e50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e54:	82 ff       	sbrs	r24, 2
   10e56:	0a c0       	rjmp	.+20     	; 0x10e6c <gpib_bus_init+0x4e>
   10e58:	81 eb       	ldi	r24, 0xB1	; 177
   10e5a:	91 e1       	ldi	r25, 0x11	; 17
   10e5c:	1f 92       	push	r1
   10e5e:	9f 93       	push	r25
   10e60:	8f 93       	push	r24
   10e62:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10e66:	0f 90       	pop	r0
   10e68:	0f 90       	pop	r0
   10e6a:	0f 90       	pop	r0
   10e6c:	08 95       	ret

00010e6e <gpib_state_init>:
   10e6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e72:	82 ff       	sbrs	r24, 2
   10e74:	0a c0       	rjmp	.+20     	; 0x10e8a <gpib_state_init+0x1c>
   10e76:	8e e9       	ldi	r24, 0x9E	; 158
   10e78:	91 e1       	ldi	r25, 0x11	; 17
   10e7a:	1f 92       	push	r1
   10e7c:	9f 93       	push	r25
   10e7e:	8f 93       	push	r24
   10e80:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10e84:	0f 90       	pop	r0
   10e86:	0f 90       	pop	r0
   10e88:	0f 90       	pop	r0
   10e8a:	05 de       	rcall	.-1014   	; 0x10a96 <ppr_init>
   10e8c:	0e 94 69 91 	call	0x122d2	; 0x122d2 <listen_cleanup>
   10e90:	0e 94 79 92 	call	0x124f2	; 0x124f2 <talk_cleanup>
   10e94:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <spoll>
   10e98:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <talking>
   10e9c:	10 92 ff 1e 	sts	0x1EFF, r1	; 0x801eff <talking_last>
   10ea0:	10 92 fe 1e 	sts	0x1EFE, r1	; 0x801efe <listening>
   10ea4:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <listening_last>
   10ea8:	10 92 f7 1c 	sts	0x1CF7, r1	; 0x801cf7 <lastcmd+0x1>
   10eac:	10 92 f6 1c 	sts	0x1CF6, r1	; 0x801cf6 <lastcmd>
   10eb0:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <current+0x1>
   10eb4:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <current>
   10eb8:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <secondary>
   10ebc:	08 95       	ret

00010ebe <gpib_enable_PPR>:
   10ebe:	cf 93       	push	r28
   10ec0:	df 93       	push	r29
   10ec2:	ec 01       	movw	r28, r24
   10ec4:	88 30       	cpi	r24, 0x08	; 8
   10ec6:	91 05       	cpc	r25, r1
   10ec8:	78 f0       	brcs	.+30     	; 0x10ee8 <gpib_enable_PPR+0x2a>
   10eca:	df 93       	push	r29
   10ecc:	cf 93       	push	r28
   10ece:	88 e7       	ldi	r24, 0x78	; 120
   10ed0:	91 e1       	ldi	r25, 0x11	; 17
   10ed2:	1f 92       	push	r1
   10ed4:	9f 93       	push	r25
   10ed6:	8f 93       	push	r24
   10ed8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10edc:	0f 90       	pop	r0
   10ede:	0f 90       	pop	r0
   10ee0:	0f 90       	pop	r0
   10ee2:	0f 90       	pop	r0
   10ee4:	0f 90       	pop	r0
   10ee6:	19 c0       	rjmp	.+50     	; 0x10f1a <gpib_enable_PPR+0x5c>
   10ee8:	e7 dd       	rcall	.-1074   	; 0x10ab8 <ppr_bit_set>
   10eea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10eee:	81 ff       	sbrs	r24, 1
   10ef0:	14 c0       	rjmp	.+40     	; 0x10f1a <gpib_enable_PPR+0x5c>
   10ef2:	cd dd       	rcall	.-1126   	; 0x10a8e <ppr_reg>
   10ef4:	1f 92       	push	r1
   10ef6:	8f 93       	push	r24
   10ef8:	df 93       	push	r29
   10efa:	cf 93       	push	r28
   10efc:	8d e5       	ldi	r24, 0x5D	; 93
   10efe:	91 e1       	ldi	r25, 0x11	; 17
   10f00:	1f 92       	push	r1
   10f02:	9f 93       	push	r25
   10f04:	8f 93       	push	r24
   10f06:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10f0a:	8d b7       	in	r24, 0x3d	; 61
   10f0c:	9e b7       	in	r25, 0x3e	; 62
   10f0e:	07 96       	adiw	r24, 0x07	; 7
   10f10:	0f b6       	in	r0, 0x3f	; 63
   10f12:	f8 94       	cli
   10f14:	9e bf       	out	0x3e, r25	; 62
   10f16:	0f be       	out	0x3f, r0	; 63
   10f18:	8d bf       	out	0x3d, r24	; 61
   10f1a:	df 91       	pop	r29
   10f1c:	cf 91       	pop	r28
   10f1e:	08 95       	ret

00010f20 <gpib_disable_PPR>:
   10f20:	cf 93       	push	r28
   10f22:	df 93       	push	r29
   10f24:	ec 01       	movw	r28, r24
   10f26:	88 30       	cpi	r24, 0x08	; 8
   10f28:	91 05       	cpc	r25, r1
   10f2a:	78 f0       	brcs	.+30     	; 0x10f4a <gpib_disable_PPR+0x2a>
   10f2c:	df 93       	push	r29
   10f2e:	cf 93       	push	r28
   10f30:	86 e3       	ldi	r24, 0x36	; 54
   10f32:	91 e1       	ldi	r25, 0x11	; 17
   10f34:	1f 92       	push	r1
   10f36:	9f 93       	push	r25
   10f38:	8f 93       	push	r24
   10f3a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10f3e:	0f 90       	pop	r0
   10f40:	0f 90       	pop	r0
   10f42:	0f 90       	pop	r0
   10f44:	0f 90       	pop	r0
   10f46:	0f 90       	pop	r0
   10f48:	19 c0       	rjmp	.+50     	; 0x10f7c <gpib_disable_PPR+0x5c>
   10f4a:	c3 dd       	rcall	.-1146   	; 0x10ad2 <ppr_bit_clr>
   10f4c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f50:	81 ff       	sbrs	r24, 1
   10f52:	14 c0       	rjmp	.+40     	; 0x10f7c <gpib_disable_PPR+0x5c>
   10f54:	9c dd       	rcall	.-1224   	; 0x10a8e <ppr_reg>
   10f56:	1f 92       	push	r1
   10f58:	8f 93       	push	r24
   10f5a:	df 93       	push	r29
   10f5c:	cf 93       	push	r28
   10f5e:	8b e1       	ldi	r24, 0x1B	; 27
   10f60:	91 e1       	ldi	r25, 0x11	; 17
   10f62:	1f 92       	push	r1
   10f64:	9f 93       	push	r25
   10f66:	8f 93       	push	r24
   10f68:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10f6c:	8d b7       	in	r24, 0x3d	; 61
   10f6e:	9e b7       	in	r25, 0x3e	; 62
   10f70:	07 96       	adiw	r24, 0x07	; 7
   10f72:	0f b6       	in	r0, 0x3f	; 63
   10f74:	f8 94       	cli
   10f76:	9e bf       	out	0x3e, r25	; 62
   10f78:	0f be       	out	0x3f, r0	; 63
   10f7a:	8d bf       	out	0x3d, r24	; 61
   10f7c:	df 91       	pop	r29
   10f7e:	cf 91       	pop	r28
   10f80:	08 95       	ret

00010f82 <gpib_assert_ifc>:
   10f82:	5c 98       	cbi	0x0b, 4	; 11
   10f84:	54 9a       	sbi	0x0a, 4	; 10
   10f86:	6a ef       	ldi	r22, 0xFA	; 250
   10f88:	70 e0       	ldi	r23, 0x00	; 0
   10f8a:	80 e0       	ldi	r24, 0x00	; 0
   10f8c:	90 e0       	ldi	r25, 0x00	; 0
   10f8e:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <delayus>
   10f92:	54 98       	cbi	0x0a, 4	; 10
   10f94:	6a ef       	ldi	r22, 0xFA	; 250
   10f96:	70 e0       	ldi	r23, 0x00	; 0
   10f98:	80 e0       	ldi	r24, 0x00	; 0
   10f9a:	90 e0       	ldi	r25, 0x00	; 0
   10f9c:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <delayus>
   10fa0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10fa4:	82 ff       	sbrs	r24, 2
   10fa6:	0a c0       	rjmp	.+20     	; 0x10fbc <gpib_assert_ifc+0x3a>
   10fa8:	8c ee       	ldi	r24, 0xEC	; 236
   10faa:	90 e1       	ldi	r25, 0x10	; 16
   10fac:	1f 92       	push	r1
   10fae:	9f 93       	push	r25
   10fb0:	8f 93       	push	r24
   10fb2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10fb6:	0f 90       	pop	r0
   10fb8:	0f 90       	pop	r0
   10fba:	0f 90       	pop	r0
   10fbc:	08 95       	ret

00010fbe <gpib_unread>:
   10fbe:	cf 93       	push	r28
   10fc0:	df 93       	push	r29
   10fc2:	ec 01       	movw	r28, r24
   10fc4:	80 91 72 19 	lds	r24, 0x1972	; 0x801972 <gpib_unread_f>
   10fc8:	81 11       	cpse	r24, r1
   10fca:	08 c0       	rjmp	.+16     	; 0x10fdc <gpib_unread+0x1e>
   10fcc:	d0 93 01 1f 	sts	0x1F01, r29	; 0x801f01 <gpib_unread_data+0x1>
   10fd0:	c0 93 00 1f 	sts	0x1F00, r28	; 0x801f00 <gpib_unread_data>
   10fd4:	81 e0       	ldi	r24, 0x01	; 1
   10fd6:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <gpib_unread_f>
   10fda:	12 c0       	rjmp	.+36     	; 0x11000 <gpib_unread+0x42>
   10fdc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10fe0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10fe4:	85 70       	andi	r24, 0x05	; 5
   10fe6:	99 27       	eor	r25, r25
   10fe8:	89 2b       	or	r24, r25
   10fea:	51 f0       	breq	.+20     	; 0x11000 <gpib_unread+0x42>
   10fec:	89 ea       	ldi	r24, 0xA9	; 169
   10fee:	90 e1       	ldi	r25, 0x10	; 16
   10ff0:	1f 92       	push	r1
   10ff2:	9f 93       	push	r25
   10ff4:	8f 93       	push	r24
   10ff6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   10ffa:	0f 90       	pop	r0
   10ffc:	0f 90       	pop	r0
   10ffe:	0f 90       	pop	r0
   11000:	ce 01       	movw	r24, r28
   11002:	df 91       	pop	r29
   11004:	cf 91       	pop	r28
   11006:	08 95       	ret

00011008 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   11008:	11 b8       	out	0x01, r1	; 1
   1100a:	80 b1       	in	r24, 0x00	; 0
   1100c:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   1100e:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   11010:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   11012:	08 95       	ret

00011014 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   11014:	4e 99       	sbic	0x09, 6	; 9
   11016:	03 c0       	rjmp	.+6      	; 0x1101e <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   11018:	80 e0       	ldi	r24, 0x00	; 0
   1101a:	94 e0       	ldi	r25, 0x04	; 4
   1101c:	02 c0       	rjmp	.+4      	; 0x11022 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   1101e:	80 e0       	ldi	r24, 0x00	; 0
   11020:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   11022:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11024:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11026:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11028:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   1102a:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   1102c:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   1102e:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11030:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11032:	08 95       	ret

00011034 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11034:	19 99       	sbic	0x03, 1	; 3
   11036:	03 c0       	rjmp	.+6      	; 0x1103e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11038:	80 e0       	ldi	r24, 0x00	; 0
   1103a:	90 e2       	ldi	r25, 0x20	; 32
   1103c:	02 c0       	rjmp	.+4      	; 0x11042 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   1103e:	80 e0       	ldi	r24, 0x00	; 0
   11040:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11042:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11044:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11046:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11048:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   1104a:	08 95       	ret

0001104c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   1104c:	2f 92       	push	r2
   1104e:	3f 92       	push	r3
   11050:	4f 92       	push	r4
   11052:	6f 92       	push	r6
   11054:	7f 92       	push	r7
   11056:	8f 92       	push	r8
   11058:	cf 92       	push	r12
   1105a:	df 92       	push	r13
   1105c:	ef 92       	push	r14
   1105e:	1f 93       	push	r17
   11060:	cf 93       	push	r28
   11062:	df 93       	push	r29
   11064:	cd b7       	in	r28, 0x3d	; 61
   11066:	de b7       	in	r29, 0x3e	; 62
   11068:	28 97       	sbiw	r28, 0x08	; 8
   1106a:	0f b6       	in	r0, 0x3f	; 63
   1106c:	f8 94       	cli
   1106e:	de bf       	out	0x3e, r29	; 62
   11070:	0f be       	out	0x3f, r0	; 63
   11072:	cd bf       	out	0x3d, r28	; 61
   11074:	98 87       	std	Y+8, r25	; 0x08
   11076:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11078:	80 e0       	ldi	r24, 0x00	; 0
   1107a:	90 e0       	ldi	r25, 0x00	; 0
   1107c:	ad de       	rcall	.-678    	; 0x10dd8 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   1107e:	64 ef       	ldi	r22, 0xF4	; 244
   11080:	71 e0       	ldi	r23, 0x01	; 1
   11082:	80 e0       	ldi	r24, 0x00	; 0
   11084:	90 e0       	ldi	r25, 0x00	; 0
   11086:	9e de       	rcall	.-708    	; 0x10dc4 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11088:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   1108a:	87 e1       	ldi	r24, 0x17	; 23
   1108c:	90 e1       	ldi	r25, 0x10	; 16
   1108e:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11090:	81 e3       	ldi	r24, 0x31	; 49
   11092:	90 e1       	ldi	r25, 0x10	; 16
   11094:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11096:	8c e4       	ldi	r24, 0x4C	; 76
   11098:	90 e1       	ldi	r25, 0x10	; 16
   1109a:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   1109c:	87 e6       	ldi	r24, 0x67	; 103
   1109e:	90 e1       	ldi	r25, 0x10	; 16
   110a0:	9c 01       	movw	r18, r24
   110a2:	40 e0       	ldi	r20, 0x00	; 0
   110a4:	29 83       	std	Y+1, r18	; 0x01
   110a6:	3a 83       	std	Y+2, r19	; 0x02
   110a8:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   110aa:	8f e8       	ldi	r24, 0x8F	; 143
   110ac:	90 e1       	ldi	r25, 0x10	; 16
   110ae:	9c 01       	movw	r18, r24
   110b0:	40 e0       	ldi	r20, 0x00	; 0
   110b2:	2c 83       	std	Y+4, r18	; 0x04
   110b4:	3d 83       	std	Y+5, r19	; 0x05
   110b6:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   110b8:	80 e0       	ldi	r24, 0x00	; 0
   110ba:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <uart_keyhit>
   110be:	89 2b       	or	r24, r25
   110c0:	09 f0       	breq	.+2      	; 0x110c4 <gpib_write_byte+0x78>
   110c2:	17 c1       	rjmp	.+558    	; 0x112f2 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   110c4:	4c 99       	sbic	0x09, 4	; 9
   110c6:	07 c0       	rjmp	.+14     	; 0x110d6 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   110c8:	8f 81       	ldd	r24, Y+7	; 0x07
   110ca:	98 85       	ldd	r25, Y+8	; 0x08
   110cc:	90 61       	ori	r25, 0x10	; 16
   110ce:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   110d0:	8f 83       	std	Y+7, r24	; 0x07
   110d2:	a5 de       	rcall	.-694    	; 0x10e1e <gpib_bus_init>
            break;
   110d4:	0e c1       	rjmp	.+540    	; 0x112f2 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   110d6:	81 2f       	mov	r24, r17
   110d8:	90 e0       	ldi	r25, 0x00	; 0
   110da:	8a 30       	cpi	r24, 0x0A	; 10
   110dc:	91 05       	cpc	r25, r1
   110de:	08 f0       	brcs	.+2      	; 0x110e2 <gpib_write_byte+0x96>
   110e0:	fe c0       	rjmp	.+508    	; 0x112de <gpib_write_byte+0x292>
   110e2:	fc 01       	movw	r30, r24
   110e4:	e3 54       	subi	r30, 0x43	; 67
   110e6:	ff 4f       	sbci	r31, 0xFF	; 255
   110e8:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   110ec:	19 9b       	sbis	0x03, 1	; 3
   110ee:	12 c0       	rjmp	.+36     	; 0x11114 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   110f0:	42 9a       	sbi	0x08, 2	; 8
   110f2:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   110f4:	44 98       	cbi	0x08, 4	; 8
   110f6:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   110f8:	2f 81       	ldd	r18, Y+7	; 0x07
   110fa:	38 85       	ldd	r19, Y+8	; 0x08
   110fc:	32 ff       	sbrs	r19, 2
   110fe:	03 c0       	rjmp	.+6      	; 0x11106 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11100:	5e 98       	cbi	0x0b, 6	; 11
   11102:	56 9a       	sbi	0x0a, 6	; 10
   11104:	01 c0       	rjmp	.+2      	; 0x11108 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11106:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11108:	64 ef       	ldi	r22, 0xF4	; 244
   1110a:	71 e0       	ldi	r23, 0x01	; 1
   1110c:	80 e0       	ldi	r24, 0x00	; 0
   1110e:	90 e0       	ldi	r25, 0x00	; 0
   11110:	59 de       	rcall	.-846    	; 0x10dc4 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11112:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11114:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11118:	88 23       	and	r24, r24
   1111a:	71 f2       	breq	.-100    	; 0x110b8 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   1111c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11120:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11124:	85 70       	andi	r24, 0x05	; 5
   11126:	99 27       	eor	r25, r25
   11128:	89 2b       	or	r24, r25
   1112a:	39 f1       	breq	.+78     	; 0x1117a <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   1112c:	1f 92       	push	r1
   1112e:	3d 81       	ldd	r19, Y+5	; 0x05
   11130:	3f 93       	push	r19
   11132:	4c 81       	ldd	r20, Y+4	; 0x04
   11134:	4f 93       	push	r20
   11136:	1c c0       	rjmp	.+56     	; 0x11170 <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11138:	4a 9b       	sbis	0x09, 2	; 9
   1113a:	08 c0       	rjmp	.+16     	; 0x1114c <gpib_write_byte+0x100>
   1113c:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   1113e:	06 c0       	rjmp	.+12     	; 0x1114c <gpib_write_byte+0x100>
   11140:	64 ef       	ldi	r22, 0xF4	; 244
   11142:	71 e0       	ldi	r23, 0x01	; 1
   11144:	80 e0       	ldi	r24, 0x00	; 0
   11146:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11148:	3d de       	rcall	.-902    	; 0x10dc4 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1114a:	12 e0       	ldi	r17, 0x02	; 2
   1114c:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11150:	88 23       	and	r24, r24
   11152:	09 f4       	brne	.+2      	; 0x11156 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11154:	b1 cf       	rjmp	.-158    	; 0x110b8 <gpib_write_byte+0x6c>
   11156:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1115a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1115e:	85 70       	andi	r24, 0x05	; 5
   11160:	99 27       	eor	r25, r25
   11162:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11164:	51 f0       	breq	.+20     	; 0x1117a <gpib_write_byte+0x12e>
   11166:	1f 92       	push	r1
   11168:	9a 81       	ldd	r25, Y+2	; 0x02
   1116a:	9f 93       	push	r25
   1116c:	29 81       	ldd	r18, Y+1	; 0x01
   1116e:	2f 93       	push	r18
   11170:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11174:	0f 90       	pop	r0
   11176:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11178:	0f 90       	pop	r0
   1117a:	8f 81       	ldd	r24, Y+7	; 0x07
   1117c:	98 85       	ldd	r25, Y+8	; 0x08
   1117e:	90 64       	ori	r25, 0x40	; 64
   11180:	98 87       	std	Y+8, r25	; 0x08
   11182:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11184:	b4 c0       	rjmp	.+360    	; 0x112ee <gpib_write_byte+0x2a2>
   11186:	2f 81       	ldd	r18, Y+7	; 0x07
   11188:	38 85       	ldd	r19, Y+8	; 0x08
   1118a:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   1118c:	03 c0       	rjmp	.+6      	; 0x11194 <gpib_write_byte+0x148>
   1118e:	28 98       	cbi	0x05, 0	; 5
   11190:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11192:	01 c0       	rjmp	.+2      	; 0x11196 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11194:	20 98       	cbi	0x04, 0	; 4
   11196:	8f ef       	ldi	r24, 0xFF	; 255
   11198:	81 b9       	out	0x01, r24	; 1
   1119a:	8f 81       	ldd	r24, Y+7	; 0x07
   1119c:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   1119e:	82 b9       	out	0x02, r24	; 2
   111a0:	43 9a       	sbi	0x08, 3	; 8
   111a2:	3b 9a       	sbi	0x07, 3	; 7
   111a4:	3d e0       	ldi	r19, 0x0D	; 13
   111a6:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   111a8:	f1 f7       	brne	.-4      	; 0x111a6 <gpib_write_byte+0x15a>
   111aa:	00 00       	nop
   111ac:	64 ef       	ldi	r22, 0xF4	; 244
   111ae:	71 e0       	ldi	r23, 0x01	; 1
   111b0:	80 e0       	ldi	r24, 0x00	; 0
   111b2:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   111b4:	07 de       	rcall	.-1010   	; 0x10dc4 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   111b6:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   111b8:	7f cf       	rjmp	.-258    	; 0x110b8 <gpib_write_byte+0x6c>
   111ba:	29 98       	cbi	0x05, 1	; 5
   111bc:	21 9a       	sbi	0x04, 1	; 4
   111be:	64 ef       	ldi	r22, 0xF4	; 244
   111c0:	71 e0       	ldi	r23, 0x01	; 1
   111c2:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   111c4:	90 e0       	ldi	r25, 0x00	; 0
   111c6:	fe dd       	rcall	.-1028   	; 0x10dc4 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   111c8:	14 e0       	ldi	r17, 0x04	; 4
   111ca:	76 cf       	rjmp	.-276    	; 0x110b8 <gpib_write_byte+0x6c>
   111cc:	4a 99       	sbic	0x09, 2	; 9
   111ce:	07 c0       	rjmp	.+14     	; 0x111de <gpib_write_byte+0x192>
   111d0:	64 ef       	ldi	r22, 0xF4	; 244
   111d2:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   111d4:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   111d6:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   111d8:	f5 dd       	rcall	.-1046   	; 0x10dc4 <gpib_timeout_set>
   111da:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   111dc:	6d cf       	rjmp	.-294    	; 0x110b8 <gpib_write_byte+0x6c>
   111de:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   111e2:	88 23       	and	r24, r24
   111e4:	09 f4       	brne	.+2      	; 0x111e8 <gpib_write_byte+0x19c>
   111e6:	68 cf       	rjmp	.-304    	; 0x110b8 <gpib_write_byte+0x6c>
   111e8:	8f 81       	ldd	r24, Y+7	; 0x07
   111ea:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   111ec:	90 64       	ori	r25, 0x40	; 64
   111ee:	98 87       	std	Y+8, r25	; 0x08
   111f0:	8f 83       	std	Y+7, r24	; 0x07
   111f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   111f6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   111fa:	85 70       	andi	r24, 0x05	; 5
   111fc:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   111fe:	89 2b       	or	r24, r25
   11200:	09 f4       	brne	.+2      	; 0x11204 <gpib_write_byte+0x1b8>
   11202:	75 c0       	rjmp	.+234    	; 0x112ee <gpib_write_byte+0x2a2>
   11204:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11206:	3f 92       	push	r3
   11208:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1120a:	3f c0       	rjmp	.+126    	; 0x1128a <gpib_write_byte+0x23e>
   1120c:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   1120e:	6b c0       	rjmp	.+214    	; 0x112e6 <gpib_write_byte+0x29a>
   11210:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11214:	88 23       	and	r24, r24
   11216:	09 f4       	brne	.+2      	; 0x1121a <gpib_write_byte+0x1ce>
   11218:	4f cf       	rjmp	.-354    	; 0x110b8 <gpib_write_byte+0x6c>
   1121a:	2f 81       	ldd	r18, Y+7	; 0x07
   1121c:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   1121e:	30 64       	ori	r19, 0x40	; 64
   11220:	38 87       	std	Y+8, r19	; 0x08
   11222:	2f 83       	std	Y+7, r18	; 0x07
   11224:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11228:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1122c:	85 70       	andi	r24, 0x05	; 5
   1122e:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11230:	89 2b       	or	r24, r25
   11232:	09 f4       	brne	.+2      	; 0x11236 <gpib_write_byte+0x1ea>
   11234:	5c c0       	rjmp	.+184    	; 0x112ee <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11236:	1f 92       	push	r1
   11238:	7f 92       	push	r7
   1123a:	6f 92       	push	r6
   1123c:	26 c0       	rjmp	.+76     	; 0x1128a <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   1123e:	21 98       	cbi	0x04, 1	; 4
   11240:	3d e0       	ldi	r19, 0x0D	; 13
   11242:	3a 95       	dec	r19
   11244:	f1 f7       	brne	.-4      	; 0x11242 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   11246:	00 00       	nop
   11248:	80 e0       	ldi	r24, 0x00	; 0
   1124a:	90 e0       	ldi	r25, 0x00	; 0
   1124c:	c5 dd       	rcall	.-1142   	; 0x10dd8 <gpib_bus_read_init>
   1124e:	64 ef       	ldi	r22, 0xF4	; 244
   11250:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11252:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11254:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11256:	b6 dd       	rcall	.-1172   	; 0x10dc4 <gpib_timeout_set>
   11258:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1125a:	2e cf       	rjmp	.-420    	; 0x110b8 <gpib_write_byte+0x6c>
   1125c:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   1125e:	45 c0       	rjmp	.+138    	; 0x112ea <gpib_write_byte+0x29e>
   11260:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11264:	88 23       	and	r24, r24
   11266:	09 f4       	brne	.+2      	; 0x1126a <gpib_write_byte+0x21e>
   11268:	27 cf       	rjmp	.-434    	; 0x110b8 <gpib_write_byte+0x6c>
   1126a:	8f 81       	ldd	r24, Y+7	; 0x07
   1126c:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   1126e:	90 64       	ori	r25, 0x40	; 64
   11270:	98 87       	std	Y+8, r25	; 0x08
   11272:	8f 83       	std	Y+7, r24	; 0x07
   11274:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11278:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1127c:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   1127e:	99 27       	eor	r25, r25
   11280:	89 2b       	or	r24, r25
   11282:	a9 f1       	breq	.+106    	; 0x112ee <gpib_write_byte+0x2a2>
   11284:	1f 92       	push	r1
   11286:	df 92       	push	r13
   11288:	cf 92       	push	r12
   1128a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1128e:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   11290:	0f 90       	pop	r0
   11292:	0f 90       	pop	r0
   11294:	2c c0       	rjmp	.+88     	; 0x112ee <gpib_write_byte+0x2a2>
   11296:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1129a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1129e:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   112a0:	99 27       	eor	r25, r25
   112a2:	89 2b       	or	r24, r25
   112a4:	c1 f0       	breq	.+48     	; 0x112d6 <gpib_write_byte+0x28a>
   112a6:	99 b1       	in	r25, 0x09	; 9
   112a8:	89 b1       	in	r24, 0x09	; 9
   112aa:	93 fb       	bst	r25, 3
   112ac:	99 27       	eor	r25, r25
   112ae:	90 f9       	bld	r25, 0
   112b0:	1f 92       	push	r1
   112b2:	9f 93       	push	r25
   112b4:	82 fb       	bst	r24, 2
   112b6:	88 27       	eor	r24, r24
   112b8:	80 f9       	bld	r24, 0
   112ba:	1f 92       	push	r1
   112bc:	8f 93       	push	r24
   112be:	84 e0       	ldi	r24, 0x04	; 4
   112c0:	90 e1       	ldi	r25, 0x10	; 16
   112c2:	1f 92       	push	r1
   112c4:	9f 93       	push	r25
   112c6:	8f 93       	push	r24
   112c8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   112cc:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   112ce:	f8 94       	cli
   112d0:	de bf       	out	0x3e, r29	; 62
   112d2:	0f be       	out	0x3f, r0	; 63
   112d4:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   112d6:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   112d8:	90 e0       	ldi	r25, 0x00	; 0
   112da:	7e dd       	rcall	.-1284   	; 0x10dd8 <gpib_bus_read_init>
   112dc:	0a c0       	rjmp	.+20     	; 0x112f2 <gpib_write_byte+0x2a6>
   112de:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   112e0:	09 f0       	breq	.+2      	; 0x112e4 <gpib_write_byte+0x298>
   112e2:	ea ce       	rjmp	.-556    	; 0x110b8 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   112e4:	06 c0       	rjmp	.+12     	; 0x112f2 <gpib_write_byte+0x2a6>
   112e6:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   112e8:	e7 ce       	rjmp	.-562    	; 0x110b8 <gpib_write_byte+0x6c>
   112ea:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   112ec:	e5 ce       	rjmp	.-566    	; 0x110b8 <gpib_write_byte+0x6c>
   112ee:	19 e0       	ldi	r17, 0x09	; 9
   112f0:	e3 ce       	rjmp	.-570    	; 0x110b8 <gpib_write_byte+0x6c>
   112f2:	8f 81       	ldd	r24, Y+7	; 0x07
   112f4:	98 85       	ldd	r25, Y+8	; 0x08
   112f6:	28 96       	adiw	r28, 0x08	; 8
   112f8:	0f b6       	in	r0, 0x3f	; 63
   112fa:	f8 94       	cli
   112fc:	de bf       	out	0x3e, r29	; 62
   112fe:	0f be       	out	0x3f, r0	; 63
   11300:	cd bf       	out	0x3d, r28	; 61
   11302:	df 91       	pop	r29
   11304:	cf 91       	pop	r28
   11306:	1f 91       	pop	r17
   11308:	ef 90       	pop	r14
   1130a:	df 90       	pop	r13
   1130c:	cf 90       	pop	r12
   1130e:	8f 90       	pop	r8
   11310:	7f 90       	pop	r7
   11312:	6f 90       	pop	r6
   11314:	4f 90       	pop	r4
   11316:	3f 90       	pop	r3
   11318:	2f 90       	pop	r2
   1131a:	08 95       	ret

0001131c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1131c:	cf 93       	push	r28
   1131e:	df 93       	push	r29
   11320:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11322:	89 2b       	or	r24, r25
   11324:	21 f4       	brne	.+8      	; 0x1132e <gpib_decode_header+0x12>
        fo = stdout;
   11326:	c0 91 cf 1c 	lds	r28, 0x1CCF	; 0x801ccf <__iob+0x2>
   1132a:	d0 91 d0 1c 	lds	r29, 0x1CD0	; 0x801cd0 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   1132e:	be 01       	movw	r22, r28
   11330:	87 e7       	ldi	r24, 0x77	; 119
   11332:	9b e0       	ldi	r25, 0x0B	; 11
   11334:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11338:	be 01       	movw	r22, r28
   1133a:	84 ea       	ldi	r24, 0xA4	; 164
   1133c:	9b e0       	ldi	r25, 0x0B	; 11
   1133e:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11342:	be 01       	movw	r22, r28
   11344:	84 eb       	ldi	r24, 0xB4	; 180
   11346:	9b e0       	ldi	r25, 0x0B	; 11
   11348:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   1134c:	be 01       	movw	r22, r28
   1134e:	88 ec       	ldi	r24, 0xC8	; 200
   11350:	9b e0       	ldi	r25, 0x0B	; 11
   11352:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11356:	be 01       	movw	r22, r28
   11358:	8b ee       	ldi	r24, 0xEB	; 235
   1135a:	9b e0       	ldi	r25, 0x0B	; 11
   1135c:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"     A = ATN\n");
   11360:	be 01       	movw	r22, r28
   11362:	85 e1       	ldi	r24, 0x15	; 21
   11364:	9c e0       	ldi	r25, 0x0C	; 12
   11366:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"      E = EOI\n");
   1136a:	be 01       	movw	r22, r28
   1136c:	83 e2       	ldi	r24, 0x23	; 35
   1136e:	9c e0       	ldi	r25, 0x0C	; 12
   11370:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"       S = SRQ\n");
   11374:	be 01       	movw	r22, r28
   11376:	82 e3       	ldi	r24, 0x32	; 50
   11378:	9c e0       	ldi	r25, 0x0C	; 12
   1137a:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"        R = REN\n");
   1137e:	be 01       	movw	r22, r28
   11380:	82 e4       	ldi	r24, 0x42	; 66
   11382:	9c e0       	ldi	r25, 0x0C	; 12
   11384:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"         I = IFC\n");
   11388:	be 01       	movw	r22, r28
   1138a:	83 e5       	ldi	r24, 0x53	; 83
   1138c:	9c e0       	ldi	r25, 0x0C	; 12
   1138e:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11392:	be 01       	movw	r22, r28
   11394:	85 e6       	ldi	r24, 0x65	; 101
   11396:	9c e0       	ldi	r25, 0x0C	; 12
   11398:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1139c:	be 01       	movw	r22, r28
   1139e:	87 e8       	ldi	r24, 0x87	; 135
   113a0:	9c e0       	ldi	r25, 0x0C	; 12
   113a2:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   113a6:	be 01       	movw	r22, r28
   113a8:	8f e9       	ldi	r24, 0x9F	; 159
   113aa:	9c e0       	ldi	r25, 0x0C	; 12
   113ac:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
    fprintf(fo,"              GPIB commands\n");
   113b0:	be 01       	movw	r22, r28
   113b2:	8a eb       	ldi	r24, 0xBA	; 186
   113b4:	9c e0       	ldi	r25, 0x0C	; 12
   113b6:	0e 94 6a 78 	call	0xf0d4	; 0xf0d4 <fputs>
}
   113ba:	df 91       	pop	r29
   113bc:	cf 91       	pop	r28
   113be:	08 95       	ret

000113c0 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   113c0:	a0 e8       	ldi	r26, 0x80	; 128
   113c2:	b0 e0       	ldi	r27, 0x00	; 0
   113c4:	e6 ee       	ldi	r30, 0xE6	; 230
   113c6:	f9 e8       	ldi	r31, 0x89	; 137
   113c8:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   113cc:	8c 01       	movw	r16, r24
   113ce:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   113d0:	19 82       	std	Y+1, r1	; 0x01
   113d2:	4c 01       	movw	r8, r24
   113d4:	88 24       	eor	r8, r8
   113d6:	44 e0       	ldi	r20, 0x04	; 4
   113d8:	94 22       	and	r9, r20
   113da:	ce 01       	movw	r24, r28
   113dc:	01 96       	adiw	r24, 0x01	; 1
   113de:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   113e0:	62 30       	cpi	r22, 0x02	; 2
   113e2:	71 05       	cpc	r23, r1
   113e4:	f0 f4       	brcc	.+60     	; 0x11422 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   113e6:	81 14       	cp	r8, r1
   113e8:	91 04       	cpc	r9, r1
   113ea:	29 f4       	brne	.+10     	; 0x113f6 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   113ec:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   113ee:	90 ee       	ldi	r25, 0xE0	; 224
   113f0:	90 0f       	add	r25, r16
   113f2:	9f 35       	cpi	r25, 0x5F	; 95
   113f4:	08 f0       	brcs	.+2      	; 0x113f8 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   113f6:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   113f8:	1f 92       	push	r1
   113fa:	8f 93       	push	r24
   113fc:	c8 01       	movw	r24, r16
   113fe:	99 27       	eor	r25, r25
   11400:	9f 93       	push	r25
   11402:	8f 93       	push	r24
   11404:	8b ef       	ldi	r24, 0xFB	; 251
   11406:	9f e0       	ldi	r25, 0x0F	; 15
   11408:	1f 92       	push	r1
   1140a:	9f 93       	push	r25
   1140c:	8f 93       	push	r24
   1140e:	df 92       	push	r13
   11410:	cf 92       	push	r12
   11412:	0e 94 0c 48 	call	0x9018	; 0x9018 <sprintf_P>
   11416:	0f b6       	in	r0, 0x3f	; 63
   11418:	f8 94       	cli
   1141a:	de bf       	out	0x3e, r29	; 62
   1141c:	0f be       	out	0x3f, r0	; 63
   1141e:	cd bf       	out	0x3d, r28	; 61
   11420:	0e c0       	rjmp	.+28     	; 0x1143e <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11422:	85 ef       	ldi	r24, 0xF5	; 245
   11424:	9f e0       	ldi	r25, 0x0F	; 15
   11426:	1f 92       	push	r1
   11428:	9f 93       	push	r25
   1142a:	8f 93       	push	r24
   1142c:	df 92       	push	r13
   1142e:	cf 92       	push	r12
   11430:	0e 94 0c 48 	call	0x9018	; 0x9018 <sprintf_P>
   11434:	0f 90       	pop	r0
   11436:	0f 90       	pop	r0
   11438:	0f 90       	pop	r0
   1143a:	0f 90       	pop	r0
   1143c:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   1143e:	f6 01       	movw	r30, r12
   11440:	01 90       	ld	r0, Z+
   11442:	00 20       	and	r0, r0
   11444:	e9 f7       	brne	.-6      	; 0x11440 <gpib_trace_display+0x80>
   11446:	31 97       	sbiw	r30, 0x01	; 1
   11448:	cf 01       	movw	r24, r30
   1144a:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   1144c:	81 14       	cp	r8, r1
   1144e:	91 04       	cpc	r9, r1
   11450:	11 f0       	breq	.+4      	; 0x11456 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   11452:	21 e4       	ldi	r18, 0x41	; 65
   11454:	01 c0       	rjmp	.+2      	; 0x11458 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   11456:	2d e2       	ldi	r18, 0x2D	; 45
   11458:	20 83       	st	Z, r18
   1145a:	dc 01       	movw	r26, r24
   1145c:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   1145e:	10 ff       	sbrs	r17, 0
   11460:	02 c0       	rjmp	.+4      	; 0x11466 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   11462:	25 e4       	ldi	r18, 0x45	; 69
   11464:	01 c0       	rjmp	.+2      	; 0x11468 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   11466:	2d e2       	ldi	r18, 0x2D	; 45
   11468:	fc 01       	movw	r30, r24
   1146a:	20 83       	st	Z, r18
   1146c:	fd 01       	movw	r30, r26
   1146e:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11470:	11 ff       	sbrs	r17, 1
   11472:	02 c0       	rjmp	.+4      	; 0x11478 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   11474:	83 e5       	ldi	r24, 0x53	; 83
   11476:	01 c0       	rjmp	.+2      	; 0x1147a <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   11478:	8d e2       	ldi	r24, 0x2D	; 45
   1147a:	8c 93       	st	X, r24
   1147c:	df 01       	movw	r26, r30
   1147e:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11480:	13 ff       	sbrs	r17, 3
   11482:	02 c0       	rjmp	.+4      	; 0x11488 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   11484:	82 e5       	ldi	r24, 0x52	; 82
   11486:	01 c0       	rjmp	.+2      	; 0x1148a <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   11488:	8d e2       	ldi	r24, 0x2D	; 45
   1148a:	80 83       	st	Z, r24
   1148c:	fd 01       	movw	r30, r26
   1148e:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11490:	14 ff       	sbrs	r17, 4
   11492:	02 c0       	rjmp	.+4      	; 0x11498 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   11494:	89 e4       	ldi	r24, 0x49	; 73
   11496:	01 c0       	rjmp	.+2      	; 0x1149a <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   11498:	8d e2       	ldi	r24, 0x2D	; 45
   1149a:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   1149c:	a1 14       	cp	r10, r1
   1149e:	b1 04       	cpc	r11, r1
   114a0:	d1 f4       	brne	.+52     	; 0x114d6 <gpib_trace_display+0x116>
   114a2:	df 01       	movw	r26, r30
   114a4:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   114a6:	15 ff       	sbrs	r17, 5
   114a8:	02 c0       	rjmp	.+4      	; 0x114ae <gpib_trace_display+0xee>
            *tmp++ = 'P';
   114aa:	80 e5       	ldi	r24, 0x50	; 80
   114ac:	01 c0       	rjmp	.+2      	; 0x114b0 <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   114ae:	8d e2       	ldi	r24, 0x2D	; 45
   114b0:	80 83       	st	Z, r24
   114b2:	fd 01       	movw	r30, r26
   114b4:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   114b6:	16 ff       	sbrs	r17, 6
   114b8:	02 c0       	rjmp	.+4      	; 0x114be <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   114ba:	84 e5       	ldi	r24, 0x54	; 84
   114bc:	01 c0       	rjmp	.+2      	; 0x114c0 <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   114be:	8d e2       	ldi	r24, 0x2D	; 45
   114c0:	8c 93       	st	X, r24
   114c2:	cf 01       	movw	r24, r30
   114c4:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   114c6:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   114c8:	17 ff       	sbrs	r17, 7
   114ca:	02 c0       	rjmp	.+4      	; 0x114d0 <gpib_trace_display+0x110>
            *tmp++ = 'B';
   114cc:	82 e4       	ldi	r24, 0x42	; 66
   114ce:	01 c0       	rjmp	.+2      	; 0x114d2 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   114d0:	8d e2       	ldi	r24, 0x2D	; 45
   114d2:	80 83       	st	Z, r24
   114d4:	08 c0       	rjmp	.+16     	; 0x114e6 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   114d6:	8d e2       	ldi	r24, 0x2D	; 45
   114d8:	80 83       	st	Z, r24
        *tmp++ = '-';
   114da:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   114dc:	7f 01       	movw	r14, r30
   114de:	43 e0       	ldi	r20, 0x03	; 3
   114e0:	e4 0e       	add	r14, r20
   114e2:	f1 1c       	adc	r15, r1
   114e4:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   114e6:	f7 01       	movw	r30, r14
   114e8:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   114ea:	f1 e0       	ldi	r31, 0x01	; 1
   114ec:	af 1a       	sub	r10, r31
   114ee:	b1 08       	sbc	r11, r1
   114f0:	42 e0       	ldi	r20, 0x02	; 2
   114f2:	a4 16       	cp	r10, r20
   114f4:	b1 04       	cpc	r11, r1
   114f6:	f0 f4       	brcc	.+60     	; 0x11534 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   114f8:	15 ff       	sbrs	r17, 5
   114fa:	03 c0       	rjmp	.+6      	; 0x11502 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   114fc:	67 ed       	ldi	r22, 0xD7	; 215
   114fe:	7c e0       	ldi	r23, 0x0C	; 12
   11500:	02 c0       	rjmp	.+4      	; 0x11506 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11502:	64 e3       	ldi	r22, 0x34	; 52
   11504:	78 e0       	ldi	r23, 0x08	; 8
   11506:	c6 01       	movw	r24, r12
   11508:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
        if(status & NRFD_FLAG)
   1150c:	16 ff       	sbrs	r17, 6
   1150e:	03 c0       	rjmp	.+6      	; 0x11516 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11510:	6d ed       	ldi	r22, 0xDD	; 221
   11512:	7c e0       	ldi	r23, 0x0C	; 12
   11514:	02 c0       	rjmp	.+4      	; 0x1151a <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11516:	64 e3       	ldi	r22, 0x34	; 52
   11518:	78 e0       	ldi	r23, 0x08	; 8
   1151a:	c6 01       	movw	r24, r12
   1151c:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
        if(status & NDAC_FLAG)
   11520:	17 ff       	sbrs	r17, 7
   11522:	03 c0       	rjmp	.+6      	; 0x1152a <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11524:	63 ee       	ldi	r22, 0xE3	; 227
   11526:	7c e0       	ldi	r23, 0x0C	; 12
   11528:	02 c0       	rjmp	.+4      	; 0x1152e <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   1152a:	64 e3       	ldi	r22, 0x34	; 52
   1152c:	78 e0       	ldi	r23, 0x08	; 8
   1152e:	c6 01       	movw	r24, r12
   11530:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
    }

    if( (status & ATN_FLAG) )
   11534:	81 14       	cp	r8, r1
   11536:	91 04       	cpc	r9, r1
   11538:	09 f4       	brne	.+2      	; 0x1153c <gpib_trace_display+0x17c>
   1153a:	58 c0       	rjmp	.+176    	; 0x115ec <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   1153c:	c8 01       	movw	r24, r16
   1153e:	8f 77       	andi	r24, 0x7F	; 127
   11540:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11542:	9c 01       	movw	r18, r24
   11544:	20 52       	subi	r18, 0x20	; 32
   11546:	31 09       	sbc	r19, r1
   11548:	2f 31       	cpi	r18, 0x1F	; 31
   1154a:	31 05       	cpc	r19, r1
   1154c:	38 f4       	brcc	.+14     	; 0x1155c <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   1154e:	0f 71       	andi	r16, 0x1F	; 31
   11550:	11 27       	eor	r17, r17
   11552:	1f 93       	push	r17
   11554:	0f 93       	push	r16
   11556:	8a ee       	ldi	r24, 0xEA	; 234
   11558:	9f e0       	ldi	r25, 0x0F	; 15
   1155a:	0c c0       	rjmp	.+24     	; 0x11574 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1155c:	9c 01       	movw	r18, r24
   1155e:	20 54       	subi	r18, 0x40	; 64
   11560:	31 09       	sbc	r19, r1
   11562:	2f 30       	cpi	r18, 0x0F	; 15
   11564:	31 05       	cpc	r19, r1
   11566:	98 f4       	brcc	.+38     	; 0x1158e <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11568:	0f 71       	andi	r16, 0x1F	; 31
   1156a:	11 27       	eor	r17, r17
   1156c:	1f 93       	push	r17
   1156e:	0f 93       	push	r16
   11570:	8f ed       	ldi	r24, 0xDF	; 223
   11572:	9f e0       	ldi	r25, 0x0F	; 15
   11574:	1f 92       	push	r1
   11576:	9f 93       	push	r25
   11578:	8f 93       	push	r24
   1157a:	ff 92       	push	r15
   1157c:	ef 92       	push	r14
   1157e:	0e 94 0c 48 	call	0x9018	; 0x9018 <sprintf_P>
   11582:	0f b6       	in	r0, 0x3f	; 63
   11584:	f8 94       	cli
   11586:	de bf       	out	0x3e, r29	; 62
   11588:	0f be       	out	0x3f, r0	; 63
   1158a:	cd bf       	out	0x3d, r28	; 61
   1158c:	2f c0       	rjmp	.+94     	; 0x115ec <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   1158e:	9c 01       	movw	r18, r24
   11590:	20 56       	subi	r18, 0x60	; 96
   11592:	31 09       	sbc	r19, r1
   11594:	20 31       	cpi	r18, 0x10	; 16
   11596:	31 05       	cpc	r19, r1
   11598:	28 f0       	brcs	.+10     	; 0x115a4 <gpib_trace_display+0x1e4>
   1159a:	e9 e8       	ldi	r30, 0x89	; 137
   1159c:	f1 e0       	ldi	r31, 0x01	; 1
   1159e:	00 e0       	ldi	r16, 0x00	; 0
   115a0:	10 e0       	ldi	r17, 0x00	; 0
   115a2:	09 c0       	rjmp	.+18     	; 0x115b6 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   115a4:	0f 71       	andi	r16, 0x1F	; 31
   115a6:	11 27       	eor	r17, r17
   115a8:	1f 93       	push	r17
   115aa:	0f 93       	push	r16
   115ac:	84 ed       	ldi	r24, 0xD4	; 212
   115ae:	9f e0       	ldi	r25, 0x0F	; 15
   115b0:	e1 cf       	rjmp	.-62     	; 0x11574 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   115b2:	0f 5f       	subi	r16, 0xFF	; 255
   115b4:	1f 4f       	sbci	r17, 0xFF	; 255
   115b6:	20 81       	ld	r18, Z
   115b8:	31 81       	ldd	r19, Z+1	; 0x01
   115ba:	2f 3f       	cpi	r18, 0xFF	; 255
   115bc:	4f ef       	ldi	r20, 0xFF	; 255
   115be:	34 07       	cpc	r19, r20
   115c0:	a9 f0       	breq	.+42     	; 0x115ec <gpib_trace_display+0x22c>
   115c2:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   115c4:	82 17       	cp	r24, r18
   115c6:	93 07       	cpc	r25, r19
   115c8:	a1 f7       	brne	.-24     	; 0x115b2 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   115ca:	68 e3       	ldi	r22, 0x38	; 56
   115cc:	78 e0       	ldi	r23, 0x08	; 8
   115ce:	c7 01       	movw	r24, r14
   115d0:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   115d4:	00 0f       	add	r16, r16
   115d6:	11 1f       	adc	r17, r17
   115d8:	00 0f       	add	r16, r16
   115da:	11 1f       	adc	r17, r17
   115dc:	f8 01       	movw	r30, r16
   115de:	e7 57       	subi	r30, 0x77	; 119
   115e0:	fe 4f       	sbci	r31, 0xFE	; 254
   115e2:	62 81       	ldd	r22, Z+2	; 0x02
   115e4:	73 81       	ldd	r23, Z+3	; 0x03
   115e6:	c7 01       	movw	r24, r14
   115e8:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   115ec:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <gpib_log_fp>
   115f0:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <gpib_log_fp+0x1>
   115f4:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x2>
   115f8:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x3>
   115fc:	23 2b       	or	r18, r19
   115fe:	21 f4       	brne	.+8      	; 0x11608 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   11600:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <gpib_log_fp+0x1>
   11604:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11608:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <gpib_log_fp>
   1160c:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <gpib_log_fp+0x1>
   11610:	82 17       	cp	r24, r18
   11612:	93 07       	cpc	r25, r19
   11614:	19 f0       	breq	.+6      	; 0x1161c <gpib_trace_display+0x25c>
        puts(str);
   11616:	c6 01       	movw	r24, r12
   11618:	0e 94 82 78 	call	0xf104	; 0xf104 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1161c:	df 92       	push	r13
   1161e:	cf 92       	push	r12
   11620:	89 ee       	ldi	r24, 0xE9	; 233
   11622:	9c e0       	ldi	r25, 0x0C	; 12
   11624:	9f 93       	push	r25
   11626:	8f 93       	push	r24
   11628:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <gpib_log_fp+0x1>
   1162c:	8f 93       	push	r24
   1162e:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <gpib_log_fp>
   11632:	8f 93       	push	r24
   11634:	0e 94 11 80 	call	0x10022	; 0x10022 <fprintf>
}
   11638:	0f 90       	pop	r0
   1163a:	0f 90       	pop	r0
   1163c:	0f 90       	pop	r0
   1163e:	0f 90       	pop	r0
   11640:	0f 90       	pop	r0
   11642:	0f 90       	pop	r0
   11644:	c0 58       	subi	r28, 0x80	; 128
   11646:	df 4f       	sbci	r29, 0xFF	; 255
   11648:	ec e0       	ldi	r30, 0x0C	; 12
   1164a:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

0001164e <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1164e:	af 92       	push	r10
   11650:	bf 92       	push	r11
   11652:	cf 92       	push	r12
   11654:	df 92       	push	r13
   11656:	ff 92       	push	r15
   11658:	0f 93       	push	r16
   1165a:	1f 93       	push	r17
   1165c:	cf 93       	push	r28
   1165e:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   11660:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <gpib_unread_f>
   11664:	22 23       	and	r18, r18
   11666:	39 f0       	breq	.+14     	; 0x11676 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   11668:	10 92 72 19 	sts	0x1972, r1	; 0x801972 <gpib_unread_f>
        return(gpib_unread_data);
   1166c:	80 91 00 1f 	lds	r24, 0x1F00	; 0x801f00 <gpib_unread_data>
   11670:	90 91 01 1f 	lds	r25, 0x1F01	; 0x801f01 <gpib_unread_data+0x1>
   11674:	b8 c0       	rjmp	.+368    	; 0x117e6 <gpib_read_byte+0x198>
   11676:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11678:	81 e0       	ldi	r24, 0x01	; 1
   1167a:	90 e0       	ldi	r25, 0x00	; 0
   1167c:	ad db       	rcall	.-2214   	; 0x10dd8 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1167e:	c1 14       	cp	r12, r1
   11680:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11682:	51 f0       	breq	.+20     	; 0x11698 <gpib_read_byte+0x4a>
   11684:	c7 dc       	rcall	.-1650   	; 0x11014 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11686:	8c 01       	movw	r16, r24
   11688:	d5 dc       	rcall	.-1622   	; 0x11034 <gpib_handshake_pin_read>
   1168a:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   1168c:	19 2b       	or	r17, r25
   1168e:	62 e0       	ldi	r22, 0x02	; 2
   11690:	70 e0       	ldi	r23, 0x00	; 0
   11692:	c8 01       	movw	r24, r16
   11694:	95 de       	rcall	.-726    	; 0x113c0 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11696:	02 c0       	rjmp	.+4      	; 0x1169c <gpib_read_byte+0x4e>
   11698:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1169a:	10 e0       	ldi	r17, 0x00	; 0
   1169c:	f1 2c       	mov	r15, r1
   1169e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   116a0:	d0 e0       	ldi	r29, 0x00	; 0
   116a2:	80 e0       	ldi	r24, 0x00	; 0
   116a4:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <uart_keyhit>
   116a8:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   116aa:	09 f0       	breq	.+2      	; 0x116ae <gpib_read_byte+0x60>
   116ac:	78 c0       	rjmp	.+240    	; 0x1179e <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   116ae:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   116b0:	03 c0       	rjmp	.+6      	; 0x116b8 <gpib_read_byte+0x6a>
   116b2:	d0 61       	ori	r29, 0x10	; 16
   116b4:	b4 db       	rcall	.-2200   	; 0x10e1e <gpib_bus_init>
            break;
        }


        switch(rx_state)
   116b6:	73 c0       	rjmp	.+230    	; 0x1179e <gpib_read_byte+0x150>
   116b8:	8f 2d       	mov	r24, r15
   116ba:	90 e0       	ldi	r25, 0x00	; 0
   116bc:	89 30       	cpi	r24, 0x09	; 9
   116be:	91 05       	cpc	r25, r1
   116c0:	08 f0       	brcs	.+2      	; 0x116c4 <gpib_read_byte+0x76>
   116c2:	51 c0       	rjmp	.+162    	; 0x11766 <gpib_read_byte+0x118>
   116c4:	fc 01       	movw	r30, r24
   116c6:	e9 53       	subi	r30, 0x39	; 57
   116c8:	ff 4f       	sbci	r31, 0xFF	; 255
   116ca:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
   116ce:	52 98       	cbi	0x0a, 2	; 10
   116d0:	8d e0       	ldi	r24, 0x0D	; 13
   116d2:	8a 95       	dec	r24
   116d4:	f1 f7       	brne	.-4      	; 0x116d2 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   116d6:	00 00       	nop
   116d8:	ff 24       	eor	r15, r15
   116da:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   116dc:	7f c0       	rjmp	.+254    	; 0x117dc <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   116de:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   116e0:	7d c0       	rjmp	.+250    	; 0x117dc <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   116e2:	62 e0       	ldi	r22, 0x02	; 2
   116e4:	f6 2e       	mov	r15, r22
   116e6:	7a c0       	rjmp	.+244    	; 0x117dc <gpib_read_byte+0x18e>
   116e8:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   116ea:	52 9a       	sbi	0x0a, 2	; 10
   116ec:	8d dc       	rcall	.-1766   	; 0x11008 <gpib_bus_read>
   116ee:	a8 2e       	mov	r10, r24
   116f0:	b1 2c       	mov	r11, r1
                ch |= control_last;
   116f2:	90 dc       	rcall	.-1760   	; 0x11014 <gpib_control_pin_read>
   116f4:	8c 01       	movw	r16, r24

                if(trace)
   116f6:	c8 2b       	or	r28, r24
   116f8:	d9 2b       	or	r29, r25
   116fa:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   116fc:	db 29       	or	r29, r11
   116fe:	c1 14       	cp	r12, r1
   11700:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11702:	49 f0       	breq	.+18     	; 0x11716 <gpib_read_byte+0xc8>
   11704:	97 dc       	rcall	.-1746   	; 0x11034 <gpib_handshake_pin_read>
   11706:	08 2b       	or	r16, r24
   11708:	19 2b       	or	r17, r25
   1170a:	61 e0       	ldi	r22, 0x01	; 1
   1170c:	70 e0       	ldi	r23, 0x00	; 0
   1170e:	c5 01       	movw	r24, r10
   11710:	80 2b       	or	r24, r16
   11712:	91 2b       	or	r25, r17
   11714:	55 de       	rcall	.-854    	; 0x113c0 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11716:	53 98       	cbi	0x0a, 3	; 10
   11718:	8d e0       	ldi	r24, 0x0D	; 13
   1171a:	8a 95       	dec	r24
   1171c:	f1 f7       	brne	.-4      	; 0x1171a <gpib_read_byte+0xcc>
   1171e:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11720:	64 ef       	ldi	r22, 0xF4	; 244
   11722:	71 e0       	ldi	r23, 0x01	; 1
   11724:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11726:	90 e0       	ldi	r25, 0x00	; 0
   11728:	4d db       	rcall	.-2406   	; 0x10dc4 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1172a:	54 e0       	ldi	r21, 0x04	; 4
   1172c:	f5 2e       	mov	r15, r21
   1172e:	56 c0       	rjmp	.+172    	; 0x117dc <gpib_read_byte+0x18e>
   11730:	4b 9b       	sbis	0x09, 3	; 9
   11732:	0c c0       	rjmp	.+24     	; 0x1174c <gpib_read_byte+0xfe>
   11734:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11736:	71 e0       	ldi	r23, 0x01	; 1
   11738:	80 e0       	ldi	r24, 0x00	; 0
   1173a:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1173c:	43 db       	rcall	.-2426   	; 0x10dc4 <gpib_timeout_set>
   1173e:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   11740:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11742:	04 c0       	rjmp	.+8      	; 0x1174c <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   11744:	19 9b       	sbis	0x03, 1	; 3
   11746:	02 c0       	rjmp	.+4      	; 0x1174c <gpib_read_byte+0xfe>
   11748:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   1174a:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1174c:	80 91 f5 1c 	lds	r24, 0x1CF5	; 0x801cf5 <gpib_timer+0x8>
   11750:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   11752:	09 f4       	brne	.+2      	; 0x11756 <gpib_read_byte+0x108>
   11754:	43 c0       	rjmp	.+134    	; 0x117dc <gpib_read_byte+0x18e>
   11756:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   11758:	27 e0       	ldi	r18, 0x07	; 7
   1175a:	f2 2e       	mov	r15, r18
   1175c:	3f c0       	rjmp	.+126    	; 0x117dc <gpib_read_byte+0x18e>
   1175e:	81 e0       	ldi	r24, 0x01	; 1
   11760:	90 e0       	ldi	r25, 0x00	; 0
   11762:	3a db       	rcall	.-2444   	; 0x10dd8 <gpib_bus_read_init>
   11764:	04 c0       	rjmp	.+8      	; 0x1176e <gpib_read_byte+0x120>
   11766:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11768:	d1 04       	cpc	r13, r1
   1176a:	99 f0       	breq	.+38     	; 0x11792 <gpib_read_byte+0x144>
   1176c:	05 c0       	rjmp	.+10     	; 0x11778 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1176e:	c1 14       	cp	r12, r1
   11770:	d1 04       	cpc	r13, r1
   11772:	a9 f0       	breq	.+42     	; 0x1179e <gpib_read_byte+0x150>
   11774:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11776:	f9 2e       	mov	r15, r25
   11778:	4d dc       	rcall	.-1894   	; 0x11014 <gpib_control_pin_read>
   1177a:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1177c:	5b dc       	rcall	.-1866   	; 0x11034 <gpib_handshake_pin_read>
   1177e:	a8 2a       	or	r10, r24
   11780:	b9 2a       	or	r11, r25
   11782:	a0 16       	cp	r10, r16
   11784:	b1 06       	cpc	r11, r17
   11786:	31 f0       	breq	.+12     	; 0x11794 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11788:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1178a:	70 e0       	ldi	r23, 0x00	; 0
   1178c:	c5 01       	movw	r24, r10
   1178e:	18 de       	rcall	.-976    	; 0x113c0 <gpib_trace_display>
   11790:	01 c0       	rjmp	.+2      	; 0x11794 <gpib_read_byte+0x146>
   11792:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11794:	88 e0       	ldi	r24, 0x08	; 8
   11796:	f8 16       	cp	r15, r24
   11798:	11 f0       	breq	.+4      	; 0x1179e <gpib_read_byte+0x150>
   1179a:	85 01       	movw	r16, r10
   1179c:	82 cf       	rjmp	.-252    	; 0x116a2 <gpib_read_byte+0x54>
   1179e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <current>
   117a2:	90 91 fb 1e 	lds	r25, 0x1EFB	; 0x801efb <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   117a6:	90 93 f7 1c 	sts	0x1CF7, r25	; 0x801cf7 <lastcmd+0x1>
   117aa:	80 93 f6 1c 	sts	0x1CF6, r24	; 0x801cf6 <lastcmd>
   117ae:	ce 01       	movw	r24, r28
   117b0:	88 27       	eor	r24, r24
        current = 0;
   117b2:	90 7d       	andi	r25, 0xD0	; 208
   117b4:	89 2b       	or	r24, r25
   117b6:	11 f4       	brne	.+4      	; 0x117bc <gpib_read_byte+0x16e>
   117b8:	d2 fd       	sbrc	r29, 2
   117ba:	05 c0       	rjmp	.+10     	; 0x117c6 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   117bc:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <current+0x1>
   117c0:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <current>
   117c4:	07 c0       	rjmp	.+14     	; 0x117d4 <gpib_read_byte+0x186>
   117c6:	ce 01       	movw	r24, r28
   117c8:	8f 77       	andi	r24, 0x7F	; 127
   117ca:	99 27       	eor	r25, r25
   117cc:	90 93 fb 1e 	sts	0x1EFB, r25	; 0x801efb <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   117d0:	80 93 fa 1e 	sts	0x1EFA, r24	; 0x801efa <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   117d4:	ce 01       	movw	r24, r28
   117d6:	07 c0       	rjmp	.+14     	; 0x117e6 <gpib_read_byte+0x198>
   117d8:	86 e0       	ldi	r24, 0x06	; 6
   117da:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   117dc:	c1 14       	cp	r12, r1
   117de:	d1 04       	cpc	r13, r1
   117e0:	09 f4       	brne	.+2      	; 0x117e4 <gpib_read_byte+0x196>
   117e2:	5f cf       	rjmp	.-322    	; 0x116a2 <gpib_read_byte+0x54>
   117e4:	c9 cf       	rjmp	.-110    	; 0x11778 <gpib_read_byte+0x12a>
   117e6:	df 91       	pop	r29
   117e8:	cf 91       	pop	r28
   117ea:	1f 91       	pop	r17
   117ec:	0f 91       	pop	r16
   117ee:	ff 90       	pop	r15
   117f0:	df 90       	pop	r13
   117f2:	cf 90       	pop	r12
   117f4:	bf 90       	pop	r11
   117f6:	af 90       	pop	r10
   117f8:	08 95       	ret

000117fa <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   117fa:	60 e0       	ldi	r22, 0x00	; 0
   117fc:	70 e0       	ldi	r23, 0x00	; 0
   117fe:	e0 cd       	rjmp	.-1088   	; 0x113c0 <gpib_trace_display>
   11800:	08 95       	ret

00011802 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11802:	a0 e0       	ldi	r26, 0x00	; 0
   11804:	b0 e0       	ldi	r27, 0x00	; 0
   11806:	e7 e0       	ldi	r30, 0x07	; 7
   11808:	fc e8       	ldi	r31, 0x8C	; 140
   1180a:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   1180e:	5b 01       	movw	r10, r22
   11810:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11812:	fa 01       	movw	r30, r20
   11814:	20 81       	ld	r18, Z
   11816:	31 81       	ldd	r19, Z+1	; 0x01
   11818:	22 27       	eor	r18, r18
   1181a:	31 83       	std	Z+1, r19	; 0x01
   1181c:	20 83       	st	Z, r18

    if(!size)
   1181e:	67 2b       	or	r22, r23
   11820:	21 f0       	breq	.+8      	; 0x1182a <gpib_read_str+0x28>
   11822:	7c 01       	movw	r14, r24
   11824:	c0 e0       	ldi	r28, 0x00	; 0
   11826:	d0 e0       	ldi	r29, 0x00	; 0
   11828:	28 c0       	rjmp	.+80     	; 0x1187a <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   1182a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1182e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11832:	85 70       	andi	r24, 0x05	; 5
   11834:	99 27       	eor	r25, r25
   11836:	89 2b       	or	r24, r25
   11838:	09 f4       	brne	.+2      	; 0x1183c <gpib_read_str+0x3a>
   1183a:	89 c0       	rjmp	.+274    	; 0x1194e <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   1183c:	8b eb       	ldi	r24, 0xBB	; 187
   1183e:	9f e0       	ldi	r25, 0x0F	; 15
   11840:	1f 92       	push	r1
   11842:	9f 93       	push	r25
   11844:	8f 93       	push	r24
   11846:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1184a:	0f 90       	pop	r0
   1184c:	0f 90       	pop	r0
   1184e:	0f 90       	pop	r0
   11850:	7e c0       	rjmp	.+252    	; 0x1194e <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11852:	80 27       	eor	r24, r16
   11854:	91 27       	eor	r25, r17
   11856:	92 fd       	sbrc	r25, 2
   11858:	2e c0       	rjmp	.+92     	; 0x118b6 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1185a:	c8 01       	movw	r24, r16
   1185c:	88 27       	eor	r24, r24
   1185e:	94 70       	andi	r25, 0x04	; 4
   11860:	12 ff       	sbrs	r17, 2
   11862:	49 c0       	rjmp	.+146    	; 0x118f6 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   11864:	20 2f       	mov	r18, r16
   11866:	2f 77       	andi	r18, 0x7F	; 127
   11868:	f7 01       	movw	r30, r14
   1186a:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   1186c:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1186e:	89 2b       	or	r24, r25
   11870:	09 f4       	brne	.+2      	; 0x11874 <gpib_read_str+0x72>
   11872:	44 c0       	rjmp	.+136    	; 0x118fc <gpib_read_str+0xfa>
   11874:	ff ef       	ldi	r31, 0xFF	; 255
   11876:	ef 1a       	sub	r14, r31
   11878:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1187a:	ca 15       	cp	r28, r10
   1187c:	db 05       	cpc	r29, r11
   1187e:	0c f0       	brlt	.+2      	; 0x11882 <gpib_read_str+0x80>
   11880:	47 c0       	rjmp	.+142    	; 0x11910 <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   11882:	80 e0       	ldi	r24, 0x00	; 0
   11884:	90 e0       	ldi	r25, 0x00	; 0
   11886:	e3 de       	rcall	.-570    	; 0x1164e <gpib_read_byte>
   11888:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   1188a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1188e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11892:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   11894:	02 c0       	rjmp	.+4      	; 0x1189a <gpib_read_str+0x98>
   11896:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   11898:	b0 df       	rcall	.-160    	; 0x117fa <gpib_decode>
   1189a:	98 01       	movw	r18, r16
   1189c:	22 27       	eor	r18, r18
   1189e:	30 7d       	andi	r19, 0xD0	; 208
   118a0:	f6 01       	movw	r30, r12
   118a2:	80 81       	ld	r24, Z
   118a4:	91 81       	ldd	r25, Z+1	; 0x01
   118a6:	21 15       	cp	r18, r1
   118a8:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   118aa:	99 f2       	breq	.-90     	; 0x11852 <gpib_read_str+0x50>
   118ac:	82 2b       	or	r24, r18
   118ae:	93 2b       	or	r25, r19
   118b0:	91 83       	std	Z+1, r25	; 0x01
            break;
   118b2:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   118b4:	30 c0       	rjmp	.+96     	; 0x11916 <gpib_read_str+0x114>
   118b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   118ba:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   118be:	85 70       	andi	r24, 0x05	; 5
   118c0:	99 27       	eor	r25, r25
   118c2:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   118c4:	a9 f0       	breq	.+42     	; 0x118f0 <gpib_read_str+0xee>
   118c6:	c8 01       	movw	r24, r16
   118c8:	99 27       	eor	r25, r25
   118ca:	9f 93       	push	r25
   118cc:	8f 93       	push	r24
   118ce:	df 93       	push	r29
   118d0:	cf 93       	push	r28
   118d2:	8e e8       	ldi	r24, 0x8E	; 142
   118d4:	9f e0       	ldi	r25, 0x0F	; 15
   118d6:	1f 92       	push	r1
   118d8:	9f 93       	push	r25
   118da:	8f 93       	push	r24
   118dc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   118e0:	ed b7       	in	r30, 0x3d	; 61
   118e2:	fe b7       	in	r31, 0x3e	; 62
   118e4:	37 96       	adiw	r30, 0x07	; 7
   118e6:	0f b6       	in	r0, 0x3f	; 63
   118e8:	f8 94       	cli
   118ea:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   118ec:	0f be       	out	0x3f, r0	; 63
   118ee:	ed bf       	out	0x3d, r30	; 61
   118f0:	c8 01       	movw	r24, r16
            break;
   118f2:	65 db       	rcall	.-2358   	; 0x10fbe <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   118f4:	10 c0       	rjmp	.+32     	; 0x11916 <gpib_read_str+0x114>
   118f6:	f7 01       	movw	r30, r14
   118f8:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   118fa:	b8 cf       	rjmp	.-144    	; 0x1186c <gpib_read_str+0x6a>
   118fc:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   118fe:	ba cf       	rjmp	.-140    	; 0x11874 <gpib_read_str+0x72>
   11900:	f6 01       	movw	r30, r12
   11902:	80 81       	ld	r24, Z
   11904:	91 81       	ldd	r25, Z+1	; 0x01
   11906:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11908:	24 c0       	rjmp	.+72     	; 0x11952 <gpib_read_str+0x150>
   1190a:	91 60       	ori	r25, 0x01	; 1
   1190c:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1190e:	80 83       	st	Z, r24
   11910:	ca 15       	cp	r28, r10
   11912:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   11914:	f1 f0       	breq	.+60     	; 0x11952 <gpib_read_str+0x150>
   11916:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1191a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1191e:	85 70       	andi	r24, 0x05	; 5
   11920:	99 27       	eor	r25, r25
   11922:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11924:	b1 f0       	breq	.+44     	; 0x11952 <gpib_read_str+0x150>
   11926:	bf 92       	push	r11
   11928:	af 92       	push	r10
   1192a:	df 93       	push	r29
   1192c:	cf 93       	push	r28
   1192e:	87 e6       	ldi	r24, 0x67	; 103
   11930:	9f e0       	ldi	r25, 0x0F	; 15
   11932:	1f 92       	push	r1
   11934:	9f 93       	push	r25
   11936:	8f 93       	push	r24
   11938:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1193c:	ed b7       	in	r30, 0x3d	; 61
   1193e:	fe b7       	in	r31, 0x3e	; 62
   11940:	37 96       	adiw	r30, 0x07	; 7
   11942:	0f b6       	in	r0, 0x3f	; 63
   11944:	f8 94       	cli
   11946:	fe bf       	out	0x3e, r31	; 62
   11948:	0f be       	out	0x3f, r0	; 63
   1194a:	ed bf       	out	0x3d, r30	; 61
   1194c:	02 c0       	rjmp	.+4      	; 0x11952 <gpib_read_str+0x150>
   1194e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   11950:	d0 e0       	ldi	r29, 0x00	; 0
   11952:	ce 01       	movw	r24, r28
   11954:	cd b7       	in	r28, 0x3d	; 61
   11956:	de b7       	in	r29, 0x3e	; 62
   11958:	ea e0       	ldi	r30, 0x0A	; 10
   1195a:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0001195e <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1195e:	a0 e0       	ldi	r26, 0x00	; 0
   11960:	b0 e0       	ldi	r27, 0x00	; 0
   11962:	e5 eb       	ldi	r30, 0xB5	; 181
   11964:	fc e8       	ldi	r31, 0x8C	; 140
   11966:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   1196a:	8b 01       	movw	r16, r22
   1196c:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1196e:	fa 01       	movw	r30, r20
   11970:	20 81       	ld	r18, Z
   11972:	31 81       	ldd	r19, Z+1	; 0x01
   11974:	22 27       	eor	r18, r18
   11976:	31 83       	std	Z+1, r19	; 0x01
   11978:	20 83       	st	Z, r18

    if(!size)
   1197a:	67 2b       	or	r22, r23
   1197c:	21 f0       	breq	.+8      	; 0x11986 <gpib_write_str+0x28>
   1197e:	6c 01       	movw	r12, r24
   11980:	c0 e0       	ldi	r28, 0x00	; 0
   11982:	d0 e0       	ldi	r29, 0x00	; 0
   11984:	35 c0       	rjmp	.+106    	; 0x119f0 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   11986:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1198a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1198e:	85 70       	andi	r24, 0x05	; 5
   11990:	99 27       	eor	r25, r25
   11992:	89 2b       	or	r24, r25
   11994:	09 f4       	brne	.+2      	; 0x11998 <gpib_write_str+0x3a>
   11996:	54 c0       	rjmp	.+168    	; 0x11a40 <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   11998:	8d e4       	ldi	r24, 0x4D	; 77
   1199a:	9f e0       	ldi	r25, 0x0F	; 15
   1199c:	1f 92       	push	r1
   1199e:	9f 93       	push	r25
   119a0:	8f 93       	push	r24
   119a2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   119a6:	0f 90       	pop	r0
   119a8:	0f 90       	pop	r0
   119aa:	0f 90       	pop	r0
   119ac:	49 c0       	rjmp	.+146    	; 0x11a40 <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   119ae:	21 96       	adiw	r28, 0x01	; 1
   119b0:	f6 01       	movw	r30, r12
   119b2:	81 91       	ld	r24, Z+
   119b4:	6f 01       	movw	r12, r30
   119b6:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   119b8:	f7 01       	movw	r30, r14
   119ba:	20 81       	ld	r18, Z
   119bc:	31 81       	ldd	r19, Z+1	; 0x01
   119be:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   119c0:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   119c2:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   119c4:	19 c0       	rjmp	.+50     	; 0x119f8 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   119c6:	42 db       	rcall	.-2428   	; 0x1104c <gpib_write_byte>
   119c8:	5c 01       	movw	r10, r24
   119ca:	aa 24       	eor	r10, r10
   119cc:	f0 ed       	ldi	r31, 0xD0	; 208
   119ce:	bf 22       	and	r11, r31
   119d0:	f7 01       	movw	r30, r14
   119d2:	20 81       	ld	r18, Z
   119d4:	31 81       	ldd	r19, Z+1	; 0x01
   119d6:	2a 29       	or	r18, r10
   119d8:	3b 29       	or	r19, r11
   119da:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   119dc:	20 83       	st	Z, r18
   119de:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   119e2:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   119e6:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   119e8:	08 df       	rcall	.-496    	; 0x117fa <gpib_decode>
   119ea:	a1 14       	cp	r10, r1
   119ec:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   119ee:	49 f4       	brne	.+18     	; 0x11a02 <gpib_write_str+0xa4>
   119f0:	c0 17       	cp	r28, r16
   119f2:	d1 07       	cpc	r29, r17
   119f4:	e4 f2       	brlt	.-72     	; 0x119ae <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   119f6:	05 c0       	rjmp	.+10     	; 0x11a02 <gpib_write_str+0xa4>
   119f8:	0c 17       	cp	r16, r28
   119fa:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   119fc:	21 f7       	brne	.-56     	; 0x119c6 <gpib_write_str+0x68>
   119fe:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11a00:	e2 cf       	rjmp	.-60     	; 0x119c6 <gpib_write_str+0x68>
   11a02:	c0 17       	cp	r28, r16
   11a04:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11a06:	f1 f0       	breq	.+60     	; 0x11a44 <gpib_write_str+0xe6>
   11a08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11a0c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a10:	85 70       	andi	r24, 0x05	; 5
   11a12:	99 27       	eor	r25, r25
   11a14:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11a16:	b1 f0       	breq	.+44     	; 0x11a44 <gpib_write_str+0xe6>
   11a18:	1f 93       	push	r17
   11a1a:	0f 93       	push	r16
   11a1c:	df 93       	push	r29
   11a1e:	cf 93       	push	r28
   11a20:	85 e2       	ldi	r24, 0x25	; 37
   11a22:	9f e0       	ldi	r25, 0x0F	; 15
   11a24:	1f 92       	push	r1
   11a26:	9f 93       	push	r25
   11a28:	8f 93       	push	r24
   11a2a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11a2e:	8d b7       	in	r24, 0x3d	; 61
   11a30:	9e b7       	in	r25, 0x3e	; 62
   11a32:	07 96       	adiw	r24, 0x07	; 7
   11a34:	0f b6       	in	r0, 0x3f	; 63
   11a36:	f8 94       	cli
   11a38:	9e bf       	out	0x3e, r25	; 62
   11a3a:	0f be       	out	0x3f, r0	; 63
   11a3c:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   11a3e:	02 c0       	rjmp	.+4      	; 0x11a44 <gpib_write_str+0xe6>
   11a40:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11a42:	d0 e0       	ldi	r29, 0x00	; 0
   11a44:	ce 01       	movw	r24, r28
   11a46:	cd b7       	in	r28, 0x3d	; 61
   11a48:	de b7       	in	r29, 0x3e	; 62
   11a4a:	ea e0       	ldi	r30, 0x0A	; 10
   11a4c:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

00011a50 <gpib_file_init>:
   11a50:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   11a54:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   11a58:	8f eb       	ldi	r24, 0xBF	; 191
   11a5a:	91 e0       	ldi	r25, 0x01	; 1
   11a5c:	0e 94 ed 97 	call	0x12fda	; 0x12fda <Read_Config>
   11a60:	18 16       	cp	r1, r24
   11a62:	19 06       	cpc	r1, r25
   11a64:	b4 f4       	brge	.+44     	; 0x11a92 <gpib_file_init+0x42>
   11a66:	9f 93       	push	r25
   11a68:	8f 93       	push	r24
   11a6a:	8f eb       	ldi	r24, 0xBF	; 191
   11a6c:	91 e0       	ldi	r25, 0x01	; 1
   11a6e:	9f 93       	push	r25
   11a70:	8f 93       	push	r24
   11a72:	84 e7       	ldi	r24, 0x74	; 116
   11a74:	94 e1       	ldi	r25, 0x14	; 20
   11a76:	1f 92       	push	r1
   11a78:	9f 93       	push	r25
   11a7a:	8f 93       	push	r24
   11a7c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11a80:	8d b7       	in	r24, 0x3d	; 61
   11a82:	9e b7       	in	r25, 0x3e	; 62
   11a84:	07 96       	adiw	r24, 0x07	; 7
   11a86:	0f b6       	in	r0, 0x3f	; 63
   11a88:	f8 94       	cli
   11a8a:	9e bf       	out	0x3e, r25	; 62
   11a8c:	0f be       	out	0x3f, r0	; 63
   11a8e:	8d bf       	out	0x3d, r24	; 61
   11a90:	12 c0       	rjmp	.+36     	; 0x11ab6 <gpib_file_init+0x66>
   11a92:	89 2b       	or	r24, r25
   11a94:	81 f0       	breq	.+32     	; 0x11ab6 <gpib_file_init+0x66>
   11a96:	8f eb       	ldi	r24, 0xBF	; 191
   11a98:	91 e0       	ldi	r25, 0x01	; 1
   11a9a:	9f 93       	push	r25
   11a9c:	8f 93       	push	r24
   11a9e:	83 e6       	ldi	r24, 0x63	; 99
   11aa0:	94 e1       	ldi	r25, 0x14	; 20
   11aa2:	1f 92       	push	r1
   11aa4:	9f 93       	push	r25
   11aa6:	8f 93       	push	r24
   11aa8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11aac:	0f 90       	pop	r0
   11aae:	0f 90       	pop	r0
   11ab0:	0f 90       	pop	r0
   11ab2:	0f 90       	pop	r0
   11ab4:	0f 90       	pop	r0
   11ab6:	0e 94 b0 96 	call	0x12d60	; 0x12d60 <set_Config_Defaults>
   11aba:	0e 94 08 72 	call	0xe410	; 0xe410 <mmc_wp_status>
   11abe:	89 2b       	or	r24, r25
   11ac0:	51 f0       	breq	.+20     	; 0x11ad6 <gpib_file_init+0x86>
   11ac2:	8a e4       	ldi	r24, 0x4A	; 74
   11ac4:	94 e1       	ldi	r25, 0x14	; 20
   11ac6:	1f 92       	push	r1
   11ac8:	9f 93       	push	r25
   11aca:	8f 93       	push	r24
   11acc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11ad0:	0f 90       	pop	r0
   11ad2:	0f 90       	pop	r0
   11ad4:	0f 90       	pop	r0
   11ad6:	08 95       	ret

00011ad8 <SS80_is_MLA>:
   11ad8:	40 e2       	ldi	r20, 0x20	; 32
   11ada:	50 e0       	ldi	r21, 0x00	; 0
   11adc:	bc 01       	movw	r22, r24
   11ade:	83 e0       	ldi	r24, 0x03	; 3
   11ae0:	90 e0       	ldi	r25, 0x00	; 0
   11ae2:	8a d6       	rcall	.+3348   	; 0x127f8 <find_device>
   11ae4:	8f 3f       	cpi	r24, 0xFF	; 255
   11ae6:	2f ef       	ldi	r18, 0xFF	; 255
   11ae8:	92 07       	cpc	r25, r18
   11aea:	11 f0       	breq	.+4      	; 0x11af0 <SS80_is_MLA+0x18>
   11aec:	af c6       	rjmp	.+3422   	; 0x1284c <set_active_device>
   11aee:	08 95       	ret
   11af0:	80 e0       	ldi	r24, 0x00	; 0
   11af2:	90 e0       	ldi	r25, 0x00	; 0
   11af4:	08 95       	ret

00011af6 <SS80_is_MTA>:
   11af6:	40 e4       	ldi	r20, 0x40	; 64
   11af8:	50 e0       	ldi	r21, 0x00	; 0
   11afa:	bc 01       	movw	r22, r24
   11afc:	83 e0       	ldi	r24, 0x03	; 3
   11afe:	90 e0       	ldi	r25, 0x00	; 0
   11b00:	7b d6       	rcall	.+3318   	; 0x127f8 <find_device>
   11b02:	8f 3f       	cpi	r24, 0xFF	; 255
   11b04:	2f ef       	ldi	r18, 0xFF	; 255
   11b06:	92 07       	cpc	r25, r18
   11b08:	11 f0       	breq	.+4      	; 0x11b0e <SS80_is_MTA+0x18>
   11b0a:	a0 c6       	rjmp	.+3392   	; 0x1284c <set_active_device>
   11b0c:	08 95       	ret
   11b0e:	80 e0       	ldi	r24, 0x00	; 0
   11b10:	90 e0       	ldi	r25, 0x00	; 0
   11b12:	08 95       	ret

00011b14 <SS80_is_MSA>:
   11b14:	40 e6       	ldi	r20, 0x60	; 96
   11b16:	50 e0       	ldi	r21, 0x00	; 0
   11b18:	bc 01       	movw	r22, r24
   11b1a:	83 e0       	ldi	r24, 0x03	; 3
   11b1c:	90 e0       	ldi	r25, 0x00	; 0
   11b1e:	6c d6       	rcall	.+3288   	; 0x127f8 <find_device>
   11b20:	8f 3f       	cpi	r24, 0xFF	; 255
   11b22:	2f ef       	ldi	r18, 0xFF	; 255
   11b24:	92 07       	cpc	r25, r18
   11b26:	11 f0       	breq	.+4      	; 0x11b2c <SS80_is_MSA+0x18>
   11b28:	91 c6       	rjmp	.+3362   	; 0x1284c <set_active_device>
   11b2a:	08 95       	ret
   11b2c:	80 e0       	ldi	r24, 0x00	; 0
   11b2e:	90 e0       	ldi	r25, 0x00	; 0
   11b30:	08 95       	ret

00011b32 <AMIGO_is_MLA>:
   11b32:	40 e2       	ldi	r20, 0x20	; 32
   11b34:	50 e0       	ldi	r21, 0x00	; 0
   11b36:	bc 01       	movw	r22, r24
   11b38:	81 e0       	ldi	r24, 0x01	; 1
   11b3a:	90 e0       	ldi	r25, 0x00	; 0
   11b3c:	5d d6       	rcall	.+3258   	; 0x127f8 <find_device>
   11b3e:	8f 3f       	cpi	r24, 0xFF	; 255
   11b40:	2f ef       	ldi	r18, 0xFF	; 255
   11b42:	92 07       	cpc	r25, r18
   11b44:	11 f0       	breq	.+4      	; 0x11b4a <AMIGO_is_MLA+0x18>
   11b46:	82 c6       	rjmp	.+3332   	; 0x1284c <set_active_device>
   11b48:	08 95       	ret
   11b4a:	80 e0       	ldi	r24, 0x00	; 0
   11b4c:	90 e0       	ldi	r25, 0x00	; 0
   11b4e:	08 95       	ret

00011b50 <AMIGO_is_MTA>:
   11b50:	40 e4       	ldi	r20, 0x40	; 64
   11b52:	50 e0       	ldi	r21, 0x00	; 0
   11b54:	bc 01       	movw	r22, r24
   11b56:	81 e0       	ldi	r24, 0x01	; 1
   11b58:	90 e0       	ldi	r25, 0x00	; 0
   11b5a:	4e d6       	rcall	.+3228   	; 0x127f8 <find_device>
   11b5c:	8f 3f       	cpi	r24, 0xFF	; 255
   11b5e:	2f ef       	ldi	r18, 0xFF	; 255
   11b60:	92 07       	cpc	r25, r18
   11b62:	11 f0       	breq	.+4      	; 0x11b68 <AMIGO_is_MTA+0x18>
   11b64:	73 c6       	rjmp	.+3302   	; 0x1284c <set_active_device>
   11b66:	08 95       	ret
   11b68:	80 e0       	ldi	r24, 0x00	; 0
   11b6a:	90 e0       	ldi	r25, 0x00	; 0
   11b6c:	08 95       	ret

00011b6e <AMIGO_is_MSA>:
   11b6e:	40 e6       	ldi	r20, 0x60	; 96
   11b70:	50 e0       	ldi	r21, 0x00	; 0
   11b72:	bc 01       	movw	r22, r24
   11b74:	81 e0       	ldi	r24, 0x01	; 1
   11b76:	90 e0       	ldi	r25, 0x00	; 0
   11b78:	3f d6       	rcall	.+3198   	; 0x127f8 <find_device>
   11b7a:	8f 3f       	cpi	r24, 0xFF	; 255
   11b7c:	2f ef       	ldi	r18, 0xFF	; 255
   11b7e:	92 07       	cpc	r25, r18
   11b80:	11 f0       	breq	.+4      	; 0x11b86 <AMIGO_is_MSA+0x18>
   11b82:	64 c6       	rjmp	.+3272   	; 0x1284c <set_active_device>
   11b84:	08 95       	ret
   11b86:	80 e0       	ldi	r24, 0x00	; 0
   11b88:	90 e0       	ldi	r25, 0x00	; 0
   11b8a:	08 95       	ret

00011b8c <PRINTER_is_MLA>:
   11b8c:	40 e2       	ldi	r20, 0x20	; 32
   11b8e:	50 e0       	ldi	r21, 0x00	; 0
   11b90:	bc 01       	movw	r22, r24
   11b92:	84 e0       	ldi	r24, 0x04	; 4
   11b94:	90 e0       	ldi	r25, 0x00	; 0
   11b96:	30 d6       	rcall	.+3168   	; 0x127f8 <find_device>
   11b98:	8f 3f       	cpi	r24, 0xFF	; 255
   11b9a:	2f ef       	ldi	r18, 0xFF	; 255
   11b9c:	92 07       	cpc	r25, r18
   11b9e:	11 f0       	breq	.+4      	; 0x11ba4 <PRINTER_is_MLA+0x18>
   11ba0:	55 c6       	rjmp	.+3242   	; 0x1284c <set_active_device>
   11ba2:	08 95       	ret
   11ba4:	80 e0       	ldi	r24, 0x00	; 0
   11ba6:	90 e0       	ldi	r25, 0x00	; 0
   11ba8:	08 95       	ret

00011baa <PRINTER_is_MTA>:
   11baa:	40 e4       	ldi	r20, 0x40	; 64
   11bac:	50 e0       	ldi	r21, 0x00	; 0
   11bae:	bc 01       	movw	r22, r24
   11bb0:	84 e0       	ldi	r24, 0x04	; 4
   11bb2:	90 e0       	ldi	r25, 0x00	; 0
   11bb4:	21 d6       	rcall	.+3138   	; 0x127f8 <find_device>
   11bb6:	8f 3f       	cpi	r24, 0xFF	; 255
   11bb8:	2f ef       	ldi	r18, 0xFF	; 255
   11bba:	92 07       	cpc	r25, r18
   11bbc:	11 f0       	breq	.+4      	; 0x11bc2 <PRINTER_is_MTA+0x18>
   11bbe:	46 c6       	rjmp	.+3212   	; 0x1284c <set_active_device>
   11bc0:	08 95       	ret
   11bc2:	80 e0       	ldi	r24, 0x00	; 0
   11bc4:	90 e0       	ldi	r25, 0x00	; 0
   11bc6:	08 95       	ret

00011bc8 <gpib_init_devices>:
   11bc8:	2a d9       	rcall	.-3500   	; 0x10e1e <gpib_bus_init>
   11bca:	0e 94 85 ae 	call	0x15d0a	; 0x15d0a <SS80_init>
   11bce:	0e 94 0b b4 	call	0x16816	; 0x16816 <amigo_init>
   11bd2:	0c 94 f2 be 	jmp	0x17de4	; 0x17de4 <printer_close>
   11bd6:	08 95       	ret

00011bd8 <gpib_trace_task>:
   11bd8:	0f 93       	push	r16
   11bda:	1f 93       	push	r17
   11bdc:	cf 93       	push	r28
   11bde:	df 93       	push	r29
   11be0:	eb 01       	movw	r28, r22
   11be2:	00 97       	sbiw	r24, 0x00	; 0
   11be4:	09 f4       	brne	.+2      	; 0x11be8 <gpib_trace_task+0x10>
   11be6:	42 c0       	rjmp	.+132    	; 0x11c6c <gpib_trace_task+0x94>
   11be8:	fc 01       	movw	r30, r24
   11bea:	20 81       	ld	r18, Z
   11bec:	22 23       	and	r18, r18
   11bee:	f1 f1       	breq	.+124    	; 0x11c6c <gpib_trace_task+0x94>
   11bf0:	0e 94 a9 33 	call	0x6752	; 0x6752 <skipspaces>
   11bf4:	8c 01       	movw	r16, r24
   11bf6:	1f 93       	push	r17
   11bf8:	8f 93       	push	r24
   11bfa:	80 e3       	ldi	r24, 0x30	; 48
   11bfc:	94 e1       	ldi	r25, 0x14	; 20
   11bfe:	1f 92       	push	r1
   11c00:	9f 93       	push	r25
   11c02:	8f 93       	push	r24
   11c04:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11c08:	0f 90       	pop	r0
   11c0a:	0f 90       	pop	r0
   11c0c:	0f 90       	pop	r0
   11c0e:	0f 90       	pop	r0
   11c10:	0f 90       	pop	r0
   11c12:	20 97       	sbiw	r28, 0x00	; 0
   11c14:	51 f0       	breq	.+20     	; 0x11c2a <gpib_trace_task+0x52>
   11c16:	85 e0       	ldi	r24, 0x05	; 5
   11c18:	94 e1       	ldi	r25, 0x14	; 20
   11c1a:	1f 92       	push	r1
   11c1c:	9f 93       	push	r25
   11c1e:	8f 93       	push	r24
   11c20:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11c24:	0f 90       	pop	r0
   11c26:	0f 90       	pop	r0
   11c28:	0f 90       	pop	r0
   11c2a:	8e ee       	ldi	r24, 0xEE	; 238
   11c2c:	93 e1       	ldi	r25, 0x13	; 19
   11c2e:	1f 92       	push	r1
   11c30:	9f 93       	push	r25
   11c32:	8f 93       	push	r24
   11c34:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11c38:	66 e9       	ldi	r22, 0x96	; 150
   11c3a:	78 e0       	ldi	r23, 0x08	; 8
   11c3c:	c8 01       	movw	r24, r16
   11c3e:	0e 94 05 80 	call	0x1000a	; 0x1000a <fopen>
   11c42:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <gpib_log_fp+0x1>
   11c46:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <gpib_log_fp>
   11c4a:	0f 90       	pop	r0
   11c4c:	0f 90       	pop	r0
   11c4e:	0f 90       	pop	r0
   11c50:	89 2b       	or	r24, r25
   11c52:	a1 f4       	brne	.+40     	; 0x11c7c <gpib_trace_task+0xa4>
   11c54:	8d e1       	ldi	r24, 0x1D	; 29
   11c56:	9d e0       	ldi	r25, 0x0D	; 13
   11c58:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <perror>
   11c5c:	82 ee       	ldi	r24, 0xE2	; 226
   11c5e:	93 e1       	ldi	r25, 0x13	; 19
   11c60:	1f 92       	push	r1
   11c62:	9f 93       	push	r25
   11c64:	8f 93       	push	r24
   11c66:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11c6a:	3b c0       	rjmp	.+118    	; 0x11ce2 <gpib_trace_task+0x10a>
   11c6c:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x2>
   11c70:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x3>
   11c74:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <gpib_log_fp+0x1>
   11c78:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <gpib_log_fp>
   11c7c:	f8 d8       	rcall	.-3600   	; 0x10e6e <gpib_state_init>
   11c7e:	a4 df       	rcall	.-184    	; 0x11bc8 <gpib_init_devices>
   11c80:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <gpib_log_fp>
   11c84:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <gpib_log_fp+0x1>
   11c88:	49 db       	rcall	.-2414   	; 0x1131c <gpib_decode_header>
   11c8a:	80 e0       	ldi	r24, 0x00	; 0
   11c8c:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <uart_keyhit>
   11c90:	89 2b       	or	r24, r25
   11c92:	31 f4       	brne	.+12     	; 0x11ca0 <gpib_trace_task+0xc8>
   11c94:	ce 01       	movw	r24, r28
   11c96:	db dc       	rcall	.-1610   	; 0x1164e <gpib_read_byte>
   11c98:	20 97       	sbiw	r28, 0x00	; 0
   11c9a:	b9 f7       	brne	.-18     	; 0x11c8a <gpib_trace_task+0xb2>
   11c9c:	ae dd       	rcall	.-1188   	; 0x117fa <gpib_decode>
   11c9e:	f5 cf       	rjmp	.-22     	; 0x11c8a <gpib_trace_task+0xb2>
   11ca0:	8c ed       	ldi	r24, 0xDC	; 220
   11ca2:	93 e1       	ldi	r25, 0x13	; 19
   11ca4:	1f 92       	push	r1
   11ca6:	9f 93       	push	r25
   11ca8:	8f 93       	push	r24
   11caa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11cae:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <gpib_log_fp>
   11cb2:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <gpib_log_fp+0x1>
   11cb6:	0f 90       	pop	r0
   11cb8:	0f 90       	pop	r0
   11cba:	0f 90       	pop	r0
   11cbc:	00 97       	sbiw	r24, 0x00	; 0
   11cbe:	a1 f0       	breq	.+40     	; 0x11ce8 <gpib_trace_task+0x110>
   11cc0:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
   11cc4:	8a ec       	ldi	r24, 0xCA	; 202
   11cc6:	93 e1       	ldi	r25, 0x13	; 19
   11cc8:	1f 92       	push	r1
   11cca:	9f 93       	push	r25
   11ccc:	8f 93       	push	r24
   11cce:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11cd2:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x2>
   11cd6:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x3>
   11cda:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <gpib_log_fp+0x1>
   11cde:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <gpib_log_fp>
   11ce2:	0f 90       	pop	r0
   11ce4:	0f 90       	pop	r0
   11ce6:	0f 90       	pop	r0
   11ce8:	df 91       	pop	r29
   11cea:	cf 91       	pop	r28
   11cec:	1f 91       	pop	r17
   11cee:	0f 91       	pop	r16
   11cf0:	08 95       	ret

00011cf2 <gpib_error_test>:
   11cf2:	ef 92       	push	r14
   11cf4:	ff 92       	push	r15
   11cf6:	0f 93       	push	r16
   11cf8:	1f 93       	push	r17
   11cfa:	cf 93       	push	r28
   11cfc:	df 93       	push	r29
   11cfe:	7c 01       	movw	r14, r24
   11d00:	ec 01       	movw	r28, r24
   11d02:	cc 27       	eor	r28, r28
   11d04:	d0 7d       	andi	r29, 0xD0	; 208
   11d06:	20 97       	sbiw	r28, 0x00	; 0
   11d08:	61 f0       	breq	.+24     	; 0x11d22 <gpib_error_test+0x30>
   11d0a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d0e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d12:	8e 72       	andi	r24, 0x2E	; 46
   11d14:	99 27       	eor	r25, r25
   11d16:	87 01       	movw	r16, r14
   11d18:	00 27       	eor	r16, r16
   11d1a:	10 71       	andi	r17, 0x10	; 16
   11d1c:	89 2b       	or	r24, r25
   11d1e:	59 f4       	brne	.+22     	; 0x11d36 <gpib_error_test+0x44>
   11d20:	17 c0       	rjmp	.+46     	; 0x11d50 <gpib_error_test+0x5e>
   11d22:	80 e0       	ldi	r24, 0x00	; 0
   11d24:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <uart_keyhit>
   11d28:	89 2b       	or	r24, r25
   11d2a:	79 f7       	brne	.-34     	; 0x11d0a <gpib_error_test+0x18>
   11d2c:	0e 94 05 72 	call	0xe40a	; 0xe40a <mmc_ins_status>
   11d30:	01 97       	sbiw	r24, 0x01	; 1
   11d32:	59 f7       	brne	.-42     	; 0x11d0a <gpib_error_test+0x18>
   11d34:	62 c0       	rjmp	.+196    	; 0x11dfa <gpib_error_test+0x108>
   11d36:	01 15       	cp	r16, r1
   11d38:	11 05       	cpc	r17, r1
   11d3a:	51 f0       	breq	.+20     	; 0x11d50 <gpib_error_test+0x5e>
   11d3c:	83 ec       	ldi	r24, 0xC3	; 195
   11d3e:	93 e1       	ldi	r25, 0x13	; 19
   11d40:	1f 92       	push	r1
   11d42:	9f 93       	push	r25
   11d44:	8f 93       	push	r24
   11d46:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11d4a:	0f 90       	pop	r0
   11d4c:	0f 90       	pop	r0
   11d4e:	0f 90       	pop	r0
   11d50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d54:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d58:	85 70       	andi	r24, 0x05	; 5
   11d5a:	99 27       	eor	r25, r25
   11d5c:	89 2b       	or	r24, r25
   11d5e:	c1 f0       	breq	.+48     	; 0x11d90 <gpib_error_test+0x9e>
   11d60:	f6 fe       	sbrs	r15, 6
   11d62:	0a c0       	rjmp	.+20     	; 0x11d78 <gpib_error_test+0x86>
   11d64:	88 eb       	ldi	r24, 0xB8	; 184
   11d66:	93 e1       	ldi	r25, 0x13	; 19
   11d68:	1f 92       	push	r1
   11d6a:	9f 93       	push	r25
   11d6c:	8f 93       	push	r24
   11d6e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11d72:	0f 90       	pop	r0
   11d74:	0f 90       	pop	r0
   11d76:	0f 90       	pop	r0
   11d78:	d7 ff       	sbrs	r29, 7
   11d7a:	0a c0       	rjmp	.+20     	; 0x11d90 <gpib_error_test+0x9e>
   11d7c:	81 eb       	ldi	r24, 0xB1	; 177
   11d7e:	93 e1       	ldi	r25, 0x13	; 19
   11d80:	1f 92       	push	r1
   11d82:	9f 93       	push	r25
   11d84:	8f 93       	push	r24
   11d86:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11d8a:	0f 90       	pop	r0
   11d8c:	0f 90       	pop	r0
   11d8e:	0f 90       	pop	r0
   11d90:	80 e0       	ldi	r24, 0x00	; 0
   11d92:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <uart_keyhit>
   11d96:	89 2b       	or	r24, r25
   11d98:	51 f0       	breq	.+20     	; 0x11dae <gpib_error_test+0xbc>
   11d9a:	84 ea       	ldi	r24, 0xA4	; 164
   11d9c:	93 e1       	ldi	r25, 0x13	; 19
   11d9e:	1f 92       	push	r1
   11da0:	9f 93       	push	r25
   11da2:	8f 93       	push	r24
   11da4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11da8:	0f 90       	pop	r0
   11daa:	0f 90       	pop	r0
   11dac:	0f 90       	pop	r0
   11dae:	0e 94 05 72 	call	0xe40a	; 0xe40a <mmc_ins_status>
   11db2:	01 97       	sbiw	r24, 0x01	; 1
   11db4:	51 f0       	breq	.+20     	; 0x11dca <gpib_error_test+0xd8>
   11db6:	83 e9       	ldi	r24, 0x93	; 147
   11db8:	93 e1       	ldi	r25, 0x13	; 19
   11dba:	1f 92       	push	r1
   11dbc:	9f 93       	push	r25
   11dbe:	8f 93       	push	r24
   11dc0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11dc4:	0f 90       	pop	r0
   11dc6:	0f 90       	pop	r0
   11dc8:	0f 90       	pop	r0
   11dca:	01 15       	cp	r16, r1
   11dcc:	11 05       	cpc	r17, r1
   11dce:	09 f0       	breq	.+2      	; 0x11dd2 <gpib_error_test+0xe0>
   11dd0:	fb de       	rcall	.-522    	; 0x11bc8 <gpib_init_devices>
   11dd2:	80 e0       	ldi	r24, 0x00	; 0
   11dd4:	0e 94 08 2d 	call	0x5a10	; 0x5a10 <uart_keyhit>
   11dd8:	89 2b       	or	r24, r25
   11dda:	11 f0       	breq	.+4      	; 0x11de0 <gpib_error_test+0xee>
   11ddc:	f5 de       	rcall	.-534    	; 0x11bc8 <gpib_init_devices>
   11dde:	0b c0       	rjmp	.+22     	; 0x11df6 <gpib_error_test+0x104>
   11de0:	0e 94 05 72 	call	0xe40a	; 0xe40a <mmc_ins_status>
   11de4:	01 97       	sbiw	r24, 0x01	; 1
   11de6:	39 f4       	brne	.+14     	; 0x11df6 <gpib_error_test+0x104>
   11de8:	01 15       	cp	r16, r1
   11dea:	11 05       	cpc	r17, r1
   11dec:	31 f0       	breq	.+12     	; 0x11dfa <gpib_error_test+0x108>
   11dee:	54 98       	cbi	0x0a, 4	; 10
   11df0:	4c 9b       	sbis	0x09, 4	; 9
   11df2:	fd cf       	rjmp	.-6      	; 0x11dee <gpib_error_test+0xfc>
   11df4:	02 c0       	rjmp	.+4      	; 0x11dfa <gpib_error_test+0x108>
   11df6:	c1 e0       	ldi	r28, 0x01	; 1
   11df8:	d0 e0       	ldi	r29, 0x00	; 0
   11dfa:	ce 01       	movw	r24, r28
   11dfc:	cd b7       	in	r28, 0x3d	; 61
   11dfe:	de b7       	in	r29, 0x3e	; 62
   11e00:	e6 e0       	ldi	r30, 0x06	; 6
   11e02:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00011e06 <GPIB_COMMANDS>:
   11e06:	1f 93       	push	r17
   11e08:	cf 93       	push	r28
   11e0a:	df 93       	push	r29
   11e0c:	ec 01       	movw	r28, r24
   11e0e:	16 2f       	mov	r17, r22
   11e10:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   11e14:	8f 35       	cpi	r24, 0x5F	; 95
   11e16:	91 f0       	breq	.+36     	; 0x11e3c <GPIB_COMMANDS+0x36>
   11e18:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   11e1c:	90 e0       	ldi	r25, 0x00	; 0
   11e1e:	89 de       	rcall	.-750    	; 0x11b32 <AMIGO_is_MLA>
   11e20:	89 2b       	or	r24, r25
   11e22:	c9 f4       	brne	.+50     	; 0x11e56 <GPIB_COMMANDS+0x50>
   11e24:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   11e28:	90 e0       	ldi	r25, 0x00	; 0
   11e2a:	56 de       	rcall	.-852    	; 0x11ad8 <SS80_is_MLA>
   11e2c:	89 2b       	or	r24, r25
   11e2e:	11 f5       	brne	.+68     	; 0x11e74 <GPIB_COMMANDS+0x6e>
   11e30:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   11e34:	90 e0       	ldi	r25, 0x00	; 0
   11e36:	aa de       	rcall	.-684    	; 0x11b8c <PRINTER_is_MLA>
   11e38:	89 2b       	or	r24, r25
   11e3a:	59 f5       	brne	.+86     	; 0x11e92 <GPIB_COMMANDS+0x8c>
   11e3c:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   11e40:	8f 33       	cpi	r24, 0x3F	; 63
   11e42:	19 f4       	brne	.+6      	; 0x11e4a <GPIB_COMMANDS+0x44>
   11e44:	80 e0       	ldi	r24, 0x00	; 0
   11e46:	90 e0       	ldi	r25, 0x00	; 0
   11e48:	2e c0       	rjmp	.+92     	; 0x11ea6 <GPIB_COMMANDS+0xa0>
   11e4a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   11e4e:	90 e0       	ldi	r25, 0x00	; 0
   11e50:	7f de       	rcall	.-770    	; 0x11b50 <AMIGO_is_MTA>
   11e52:	89 2b       	or	r24, r25
   11e54:	49 f0       	breq	.+18     	; 0x11e68 <GPIB_COMMANDS+0x62>
   11e56:	11 23       	and	r17, r17
   11e58:	11 f0       	breq	.+4      	; 0x11e5e <GPIB_COMMANDS+0x58>
   11e5a:	ce 01       	movw	r24, r28
   11e5c:	b0 d8       	rcall	.-3744   	; 0x10fbe <gpib_unread>
   11e5e:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <secondary>
   11e62:	0e 94 f3 bd 	call	0x17be6	; 0x17be6 <AMIGO_COMMANDS>
   11e66:	1d c0       	rjmp	.+58     	; 0x11ea2 <GPIB_COMMANDS+0x9c>
   11e68:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   11e6c:	90 e0       	ldi	r25, 0x00	; 0
   11e6e:	43 de       	rcall	.-890    	; 0x11af6 <SS80_is_MTA>
   11e70:	89 2b       	or	r24, r25
   11e72:	49 f0       	breq	.+18     	; 0x11e86 <GPIB_COMMANDS+0x80>
   11e74:	11 23       	and	r17, r17
   11e76:	11 f0       	breq	.+4      	; 0x11e7c <GPIB_COMMANDS+0x76>
   11e78:	ce 01       	movw	r24, r28
   11e7a:	a1 d8       	rcall	.-3774   	; 0x10fbe <gpib_unread>
   11e7c:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <secondary>
   11e80:	0e 94 65 b2 	call	0x164ca	; 0x164ca <SS80_COMMANDS>
   11e84:	0e c0       	rjmp	.+28     	; 0x11ea2 <GPIB_COMMANDS+0x9c>
   11e86:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   11e8a:	90 e0       	ldi	r25, 0x00	; 0
   11e8c:	8e de       	rcall	.-740    	; 0x11baa <PRINTER_is_MTA>
   11e8e:	89 2b       	or	r24, r25
   11e90:	c9 f2       	breq	.-78     	; 0x11e44 <GPIB_COMMANDS+0x3e>
   11e92:	11 23       	and	r17, r17
   11e94:	11 f0       	breq	.+4      	; 0x11e9a <GPIB_COMMANDS+0x94>
   11e96:	ce 01       	movw	r24, r28
   11e98:	92 d8       	rcall	.-3804   	; 0x10fbe <gpib_unread>
   11e9a:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <secondary>
   11e9e:	0e 94 53 c0 	call	0x180a6	; 0x180a6 <PRINTER_COMMANDS>
   11ea2:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <secondary>
   11ea6:	df 91       	pop	r29
   11ea8:	cf 91       	pop	r28
   11eaa:	1f 91       	pop	r17
   11eac:	08 95       	ret

00011eae <Send_Identify>:
   11eae:	a4 e0       	ldi	r26, 0x04	; 4
   11eb0:	b0 e0       	ldi	r27, 0x00	; 0
   11eb2:	ed e5       	ldi	r30, 0x5D	; 93
   11eb4:	ff e8       	ldi	r31, 0x8F	; 143
   11eb6:	0c 94 34 e4 	jmp	0x1c868	; 0x1c868 <__prologue_saves__+0x16>
   11eba:	d8 2e       	mov	r13, r24
   11ebc:	7b 01       	movw	r14, r22
   11ebe:	80 e0       	ldi	r24, 0x00	; 0
   11ec0:	91 e0       	ldi	r25, 0x01	; 1
   11ec2:	9c 83       	std	Y+4, r25	; 0x04
   11ec4:	8b 83       	std	Y+3, r24	; 0x03
   11ec6:	8b 01       	movw	r16, r22
   11ec8:	20 e0       	ldi	r18, 0x00	; 0
   11eca:	30 e0       	ldi	r19, 0x00	; 0
   11ecc:	42 e0       	ldi	r20, 0x02	; 2
   11ece:	50 e0       	ldi	r21, 0x00	; 0
   11ed0:	60 e0       	ldi	r22, 0x00	; 0
   11ed2:	70 e0       	ldi	r23, 0x00	; 0
   11ed4:	ce 01       	movw	r24, r28
   11ed6:	01 96       	adiw	r24, 0x01	; 1
   11ed8:	e7 d3       	rcall	.+1998   	; 0x126a8 <V2B_MSB>
   11eda:	ae 01       	movw	r20, r28
   11edc:	4d 5f       	subi	r20, 0xFD	; 253
   11ede:	5f 4f       	sbci	r21, 0xFF	; 255
   11ee0:	62 e0       	ldi	r22, 0x02	; 2
   11ee2:	70 e0       	ldi	r23, 0x00	; 0
   11ee4:	ce 01       	movw	r24, r28
   11ee6:	01 96       	adiw	r24, 0x01	; 1
   11ee8:	3a dd       	rcall	.-1420   	; 0x1195e <gpib_write_str>
   11eea:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11eee:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ef2:	02 97       	sbiw	r24, 0x02	; 2
   11ef4:	59 f0       	breq	.+22     	; 0x11f0c <Send_Identify+0x5e>
   11ef6:	25 70       	andi	r18, 0x05	; 5
   11ef8:	33 27       	eor	r19, r19
   11efa:	23 2b       	or	r18, r19
   11efc:	c9 f0       	breq	.+50     	; 0x11f30 <Send_Identify+0x82>
   11efe:	ff 92       	push	r15
   11f00:	ef 92       	push	r14
   11f02:	1f 92       	push	r1
   11f04:	df 92       	push	r13
   11f06:	82 e7       	ldi	r24, 0x72	; 114
   11f08:	93 e1       	ldi	r25, 0x13	; 19
   11f0a:	08 c0       	rjmp	.+16     	; 0x11f1c <Send_Identify+0x6e>
   11f0c:	22 ff       	sbrs	r18, 2
   11f0e:	10 c0       	rjmp	.+32     	; 0x11f30 <Send_Identify+0x82>
   11f10:	ff 92       	push	r15
   11f12:	ef 92       	push	r14
   11f14:	1f 92       	push	r1
   11f16:	df 92       	push	r13
   11f18:	88 e5       	ldi	r24, 0x58	; 88
   11f1a:	93 e1       	ldi	r25, 0x13	; 19
   11f1c:	1f 92       	push	r1
   11f1e:	9f 93       	push	r25
   11f20:	8f 93       	push	r24
   11f22:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11f26:	0f b6       	in	r0, 0x3f	; 63
   11f28:	f8 94       	cli
   11f2a:	de bf       	out	0x3e, r29	; 62
   11f2c:	0f be       	out	0x3f, r0	; 63
   11f2e:	cd bf       	out	0x3d, r28	; 61
   11f30:	8b 81       	ldd	r24, Y+3	; 0x03
   11f32:	9c 81       	ldd	r25, Y+4	; 0x04
   11f34:	88 27       	eor	r24, r24
   11f36:	90 7d       	andi	r25, 0xD0	; 208
   11f38:	24 96       	adiw	r28, 0x04	; 4
   11f3a:	e7 e0       	ldi	r30, 0x07	; 7
   11f3c:	0c 94 50 e4 	jmp	0x1c8a0	; 0x1c8a0 <__epilogue_restores__+0x16>

00011f40 <GPIB>:
   11f40:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11f44:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f48:	85 30       	cpi	r24, 0x05	; 5
   11f4a:	89 f4       	brne	.+34     	; 0x11f6e <GPIB+0x2e>
   11f4c:	24 71       	andi	r18, 0x14	; 20
   11f4e:	33 27       	eor	r19, r19
   11f50:	23 2b       	or	r18, r19
   11f52:	51 f0       	breq	.+20     	; 0x11f68 <GPIB+0x28>
   11f54:	85 e4       	ldi	r24, 0x45	; 69
   11f56:	93 e1       	ldi	r25, 0x13	; 19
   11f58:	1f 92       	push	r1
   11f5a:	9f 93       	push	r25
   11f5c:	8f 93       	push	r24
   11f5e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11f62:	0f 90       	pop	r0
   11f64:	0f 90       	pop	r0
   11f66:	0f 90       	pop	r0
   11f68:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <spoll>
   11f6c:	9d c0       	rjmp	.+314    	; 0x120a8 <GPIB+0x168>
   11f6e:	85 31       	cpi	r24, 0x15	; 21
   11f70:	39 f4       	brne	.+14     	; 0x11f80 <GPIB+0x40>
   11f72:	24 71       	andi	r18, 0x14	; 20
   11f74:	33 27       	eor	r19, r19
   11f76:	23 2b       	or	r18, r19
   11f78:	b9 f3       	breq	.-18     	; 0x11f68 <GPIB+0x28>
   11f7a:	82 e3       	ldi	r24, 0x32	; 50
   11f7c:	93 e1       	ldi	r25, 0x13	; 19
   11f7e:	ec cf       	rjmp	.-40     	; 0x11f58 <GPIB+0x18>
   11f80:	88 31       	cpi	r24, 0x18	; 24
   11f82:	c9 f4       	brne	.+50     	; 0x11fb6 <GPIB+0x76>
   11f84:	22 ff       	sbrs	r18, 2
   11f86:	0a c0       	rjmp	.+20     	; 0x11f9c <GPIB+0x5c>
   11f88:	8b e2       	ldi	r24, 0x2B	; 43
   11f8a:	93 e1       	ldi	r25, 0x13	; 19
   11f8c:	1f 92       	push	r1
   11f8e:	9f 93       	push	r25
   11f90:	8f 93       	push	r24
   11f92:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11f96:	0f 90       	pop	r0
   11f98:	0f 90       	pop	r0
   11f9a:	0f 90       	pop	r0
   11f9c:	81 e0       	ldi	r24, 0x01	; 1
   11f9e:	80 93 f9 1e 	sts	0x1EF9, r24	; 0x801ef9 <spoll>
   11fa2:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   11fa6:	90 e0       	ldi	r25, 0x00	; 0
   11fa8:	a6 dd       	rcall	.-1204   	; 0x11af6 <SS80_is_MTA>
   11faa:	89 2b       	or	r24, r25
   11fac:	09 f4       	brne	.+2      	; 0x11fb0 <GPIB+0x70>
   11fae:	7c c0       	rjmp	.+248    	; 0x120a8 <GPIB+0x168>
   11fb0:	0c 94 18 ae 	jmp	0x15c30	; 0x15c30 <SS80_Report>
   11fb4:	08 95       	ret
   11fb6:	89 31       	cpi	r24, 0x19	; 25
   11fb8:	29 f4       	brne	.+10     	; 0x11fc4 <GPIB+0x84>
   11fba:	22 ff       	sbrs	r18, 2
   11fbc:	d5 cf       	rjmp	.-86     	; 0x11f68 <GPIB+0x28>
   11fbe:	84 e2       	ldi	r24, 0x24	; 36
   11fc0:	93 e1       	ldi	r25, 0x13	; 19
   11fc2:	ca cf       	rjmp	.-108    	; 0x11f58 <GPIB+0x18>
   11fc4:	84 30       	cpi	r24, 0x04	; 4
   11fc6:	09 f0       	breq	.+2      	; 0x11fca <GPIB+0x8a>
   11fc8:	48 c0       	rjmp	.+144    	; 0x1205a <GPIB+0x11a>
   11fca:	22 ff       	sbrs	r18, 2
   11fcc:	0a c0       	rjmp	.+20     	; 0x11fe2 <GPIB+0xa2>
   11fce:	8d e1       	ldi	r24, 0x1D	; 29
   11fd0:	93 e1       	ldi	r25, 0x13	; 19
   11fd2:	1f 92       	push	r1
   11fd4:	9f 93       	push	r25
   11fd6:	8f 93       	push	r24
   11fd8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   11fdc:	0f 90       	pop	r0
   11fde:	0f 90       	pop	r0
   11fe0:	0f 90       	pop	r0
   11fe2:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   11fe6:	90 e0       	ldi	r25, 0x00	; 0
   11fe8:	77 dd       	rcall	.-1298   	; 0x11ad8 <SS80_is_MLA>
   11fea:	89 2b       	or	r24, r25
   11fec:	d9 f0       	breq	.+54     	; 0x12024 <GPIB+0xe4>
   11fee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11ff2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ff6:	84 72       	andi	r24, 0x24	; 36
   11ff8:	99 27       	eor	r25, r25
   11ffa:	89 2b       	or	r24, r25
   11ffc:	51 f0       	breq	.+20     	; 0x12012 <GPIB+0xd2>
   11ffe:	81 e1       	ldi	r24, 0x11	; 17
   12000:	93 e1       	ldi	r25, 0x13	; 19
   12002:	1f 92       	push	r1
   12004:	9f 93       	push	r25
   12006:	8f 93       	push	r24
   12008:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1200c:	0f 90       	pop	r0
   1200e:	0f 90       	pop	r0
   12010:	0f 90       	pop	r0
   12012:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   12016:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1201a:	85 81       	ldd	r24, Z+5	; 0x05
   1201c:	90 e0       	ldi	r25, 0x00	; 0
   1201e:	0c 94 e6 ae 	jmp	0x15dcc	; 0x15dcc <SS80_Selected_Device_Clear>
   12022:	08 95       	ret
   12024:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   12028:	90 e0       	ldi	r25, 0x00	; 0
   1202a:	83 dd       	rcall	.-1274   	; 0x11b32 <AMIGO_is_MLA>
   1202c:	89 2b       	or	r24, r25
   1202e:	e1 f1       	breq	.+120    	; 0x120a8 <GPIB+0x168>
   12030:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12034:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12038:	84 72       	andi	r24, 0x24	; 36
   1203a:	99 27       	eor	r25, r25
   1203c:	89 2b       	or	r24, r25
   1203e:	51 f0       	breq	.+20     	; 0x12054 <GPIB+0x114>
   12040:	84 e0       	ldi	r24, 0x04	; 4
   12042:	93 e1       	ldi	r25, 0x13	; 19
   12044:	1f 92       	push	r1
   12046:	9f 93       	push	r25
   12048:	8f 93       	push	r24
   1204a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1204e:	0f 90       	pop	r0
   12050:	0f 90       	pop	r0
   12052:	0f 90       	pop	r0
   12054:	0c 94 c6 b8 	jmp	0x1718c	; 0x1718c <amigo_cmd_clear>
   12058:	08 95       	ret
   1205a:	84 31       	cpi	r24, 0x14	; 20
   1205c:	99 f4       	brne	.+38     	; 0x12084 <GPIB+0x144>
   1205e:	22 ff       	sbrs	r18, 2
   12060:	0a c0       	rjmp	.+20     	; 0x12076 <GPIB+0x136>
   12062:	8d ef       	ldi	r24, 0xFD	; 253
   12064:	92 e1       	ldi	r25, 0x12	; 18
   12066:	1f 92       	push	r1
   12068:	9f 93       	push	r25
   1206a:	8f 93       	push	r24
   1206c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12070:	0f 90       	pop	r0
   12072:	0f 90       	pop	r0
   12074:	0f 90       	pop	r0
   12076:	0e 94 d8 ae 	call	0x15db0	; 0x15db0 <SS80_Universal_Device_Clear>
   1207a:	0e 94 c6 b8 	call	0x1718c	; 0x1718c <amigo_cmd_clear>
   1207e:	0e 94 f2 be 	call	0x17de4	; 0x17de4 <printer_close>
   12082:	12 c0       	rjmp	.+36     	; 0x120a8 <GPIB+0x168>
   12084:	25 71       	andi	r18, 0x15	; 21
   12086:	33 27       	eor	r19, r19
   12088:	23 2b       	or	r18, r19
   1208a:	71 f0       	breq	.+28     	; 0x120a8 <GPIB+0x168>
   1208c:	1f 92       	push	r1
   1208e:	8f 93       	push	r24
   12090:	81 ee       	ldi	r24, 0xE1	; 225
   12092:	92 e1       	ldi	r25, 0x12	; 18
   12094:	1f 92       	push	r1
   12096:	9f 93       	push	r25
   12098:	8f 93       	push	r24
   1209a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1209e:	0f 90       	pop	r0
   120a0:	0f 90       	pop	r0
   120a2:	0f 90       	pop	r0
   120a4:	0f 90       	pop	r0
   120a6:	0f 90       	pop	r0
   120a8:	80 e0       	ldi	r24, 0x00	; 0
   120aa:	90 e0       	ldi	r25, 0x00	; 0
   120ac:	08 95       	ret

000120ae <GPIB_TALK>:
   120ae:	0f 93       	push	r16
   120b0:	1f 93       	push	r17
   120b2:	cf 93       	push	r28
   120b4:	c8 2f       	mov	r28, r24
   120b6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   120ba:	80 93 ff 1e 	sts	0x1EFF, r24	; 0x801eff <talking_last>
   120be:	c0 93 fc 1e 	sts	0x1EFC, r28	; 0x801efc <talking>
   120c2:	cf 35       	cpi	r28, 0x5F	; 95
   120c4:	79 f4       	brne	.+30     	; 0x120e4 <GPIB_TALK+0x36>
   120c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   120ca:	82 ff       	sbrs	r24, 2
   120cc:	7f c0       	rjmp	.+254    	; 0x121cc <GPIB_TALK+0x11e>
   120ce:	8e e8       	ldi	r24, 0x8E	; 142
   120d0:	92 e1       	ldi	r25, 0x12	; 18
   120d2:	1f 92       	push	r1
   120d4:	9f 93       	push	r25
   120d6:	8f 93       	push	r24
   120d8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   120dc:	0f 90       	pop	r0
   120de:	0f 90       	pop	r0
   120e0:	0f 90       	pop	r0
   120e2:	74 c0       	rjmp	.+232    	; 0x121cc <GPIB_TALK+0x11e>
   120e4:	0c 2f       	mov	r16, r28
   120e6:	10 e0       	ldi	r17, 0x00	; 0
   120e8:	c8 01       	movw	r24, r16
   120ea:	05 dd       	rcall	.-1526   	; 0x11af6 <SS80_is_MTA>
   120ec:	89 2b       	or	r24, r25
   120ee:	f1 f0       	breq	.+60     	; 0x1212c <GPIB_TALK+0x7e>
   120f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   120f4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   120f8:	84 72       	andi	r24, 0x24	; 36
   120fa:	99 27       	eor	r25, r25
   120fc:	89 2b       	or	r24, r25
   120fe:	71 f0       	breq	.+28     	; 0x1211c <GPIB_TALK+0x6e>
   12100:	1f 92       	push	r1
   12102:	cf 93       	push	r28
   12104:	8d e7       	ldi	r24, 0x7D	; 125
   12106:	92 e1       	ldi	r25, 0x12	; 18
   12108:	1f 92       	push	r1
   1210a:	9f 93       	push	r25
   1210c:	8f 93       	push	r24
   1210e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12112:	0f 90       	pop	r0
   12114:	0f 90       	pop	r0
   12116:	0f 90       	pop	r0
   12118:	0f 90       	pop	r0
   1211a:	0f 90       	pop	r0
   1211c:	80 91 f9 1e 	lds	r24, 0x1EF9	; 0x801ef9 <spoll>
   12120:	88 23       	and	r24, r24
   12122:	09 f4       	brne	.+2      	; 0x12126 <GPIB_TALK+0x78>
   12124:	53 c0       	rjmp	.+166    	; 0x121cc <GPIB_TALK+0x11e>
   12126:	0e 94 18 ae 	call	0x15c30	; 0x15c30 <SS80_Report>
   1212a:	50 c0       	rjmp	.+160    	; 0x121cc <GPIB_TALK+0x11e>
   1212c:	c8 01       	movw	r24, r16
   1212e:	10 dd       	rcall	.-1504   	; 0x11b50 <AMIGO_is_MTA>
   12130:	89 2b       	or	r24, r25
   12132:	71 f0       	breq	.+28     	; 0x12150 <GPIB_TALK+0xa2>
   12134:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12138:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1213c:	84 72       	andi	r24, 0x24	; 36
   1213e:	99 27       	eor	r25, r25
   12140:	89 2b       	or	r24, r25
   12142:	09 f4       	brne	.+2      	; 0x12146 <GPIB_TALK+0x98>
   12144:	43 c0       	rjmp	.+134    	; 0x121cc <GPIB_TALK+0x11e>
   12146:	1f 92       	push	r1
   12148:	cf 93       	push	r28
   1214a:	8b e6       	ldi	r24, 0x6B	; 107
   1214c:	92 e1       	ldi	r25, 0x12	; 18
   1214e:	34 c0       	rjmp	.+104    	; 0x121b8 <GPIB_TALK+0x10a>
   12150:	c8 01       	movw	r24, r16
   12152:	2b dd       	rcall	.-1450   	; 0x11baa <PRINTER_is_MTA>
   12154:	89 2b       	or	r24, r25
   12156:	69 f0       	breq	.+26     	; 0x12172 <GPIB_TALK+0xc4>
   12158:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1215c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12160:	84 72       	andi	r24, 0x24	; 36
   12162:	99 27       	eor	r25, r25
   12164:	89 2b       	or	r24, r25
   12166:	91 f1       	breq	.+100    	; 0x121cc <GPIB_TALK+0x11e>
   12168:	1f 92       	push	r1
   1216a:	cf 93       	push	r28
   1216c:	87 e5       	ldi	r24, 0x57	; 87
   1216e:	92 e1       	ldi	r25, 0x12	; 18
   12170:	23 c0       	rjmp	.+70     	; 0x121b8 <GPIB_TALK+0x10a>
   12172:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   12176:	90 e0       	ldi	r25, 0x00	; 0
   12178:	09 dd       	rcall	.-1518   	; 0x11b8c <PRINTER_is_MLA>
   1217a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1217e:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12182:	89 2b       	or	r24, r25
   12184:	99 f0       	breq	.+38     	; 0x121ac <GPIB_TALK+0xfe>
   12186:	24 72       	andi	r18, 0x24	; 36
   12188:	33 27       	eor	r19, r19
   1218a:	23 2b       	or	r18, r19
   1218c:	51 f0       	breq	.+20     	; 0x121a2 <GPIB_TALK+0xf4>
   1218e:	87 e4       	ldi	r24, 0x47	; 71
   12190:	92 e1       	ldi	r25, 0x12	; 18
   12192:	1f 92       	push	r1
   12194:	9f 93       	push	r25
   12196:	8f 93       	push	r24
   12198:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1219c:	0f 90       	pop	r0
   1219e:	0f 90       	pop	r0
   121a0:	0f 90       	pop	r0
   121a2:	80 e0       	ldi	r24, 0x00	; 0
   121a4:	90 e0       	ldi	r25, 0x00	; 0
   121a6:	0e 94 3f bf 	call	0x17e7e	; 0x17e7e <printer_open>
   121aa:	10 c0       	rjmp	.+32     	; 0x121cc <GPIB_TALK+0x11e>
   121ac:	22 ff       	sbrs	r18, 2
   121ae:	0e c0       	rjmp	.+28     	; 0x121cc <GPIB_TALK+0x11e>
   121b0:	1f 92       	push	r1
   121b2:	cf 93       	push	r28
   121b4:	8b e3       	ldi	r24, 0x3B	; 59
   121b6:	92 e1       	ldi	r25, 0x12	; 18
   121b8:	1f 92       	push	r1
   121ba:	9f 93       	push	r25
   121bc:	8f 93       	push	r24
   121be:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   121c2:	0f 90       	pop	r0
   121c4:	0f 90       	pop	r0
   121c6:	0f 90       	pop	r0
   121c8:	0f 90       	pop	r0
   121ca:	0f 90       	pop	r0
   121cc:	80 e0       	ldi	r24, 0x00	; 0
   121ce:	90 e0       	ldi	r25, 0x00	; 0
   121d0:	cf 91       	pop	r28
   121d2:	1f 91       	pop	r17
   121d4:	0f 91       	pop	r16
   121d6:	08 95       	ret

000121d8 <GPIB_SECONDARY_ADDRESS>:
   121d8:	0f 93       	push	r16
   121da:	1f 93       	push	r17
   121dc:	cf 93       	push	r28
   121de:	c8 2f       	mov	r28, r24
   121e0:	08 2f       	mov	r16, r24
   121e2:	10 e0       	ldi	r17, 0x00	; 0
   121e4:	c8 01       	movw	r24, r16
   121e6:	96 dc       	rcall	.-1748   	; 0x11b14 <SS80_is_MSA>
   121e8:	89 2b       	or	r24, r25
   121ea:	19 f1       	breq	.+70     	; 0x12232 <GPIB_SECONDARY_ADDRESS+0x5a>
   121ec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   121f0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   121f4:	84 72       	andi	r24, 0x24	; 36
   121f6:	99 27       	eor	r25, r25
   121f8:	89 2b       	or	r24, r25
   121fa:	71 f0       	breq	.+28     	; 0x12218 <GPIB_SECONDARY_ADDRESS+0x40>
   121fc:	1f 92       	push	r1
   121fe:	cf 93       	push	r28
   12200:	8a e2       	ldi	r24, 0x2A	; 42
   12202:	92 e1       	ldi	r25, 0x12	; 18
   12204:	1f 92       	push	r1
   12206:	9f 93       	push	r25
   12208:	8f 93       	push	r24
   1220a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1220e:	0f 90       	pop	r0
   12210:	0f 90       	pop	r0
   12212:	0f 90       	pop	r0
   12214:	0f 90       	pop	r0
   12216:	0f 90       	pop	r0
   12218:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   1221c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   12220:	81 81       	ldd	r24, Z+1	; 0x01
   12222:	90 e0       	ldi	r25, 0x00	; 0
   12224:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   12228:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   1222c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   12230:	27 c0       	rjmp	.+78     	; 0x12280 <GPIB_SECONDARY_ADDRESS+0xa8>
   12232:	c8 01       	movw	r24, r16
   12234:	9c dc       	rcall	.-1736   	; 0x11b6e <AMIGO_is_MSA>
   12236:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1223a:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1223e:	89 2b       	or	r24, r25
   12240:	21 f1       	breq	.+72     	; 0x1228a <GPIB_SECONDARY_ADDRESS+0xb2>
   12242:	c9 01       	movw	r24, r18
   12244:	84 72       	andi	r24, 0x24	; 36
   12246:	99 27       	eor	r25, r25
   12248:	89 2b       	or	r24, r25
   1224a:	71 f0       	breq	.+28     	; 0x12268 <GPIB_SECONDARY_ADDRESS+0x90>
   1224c:	1f 92       	push	r1
   1224e:	cf 93       	push	r28
   12250:	88 e1       	ldi	r24, 0x18	; 24
   12252:	92 e1       	ldi	r25, 0x12	; 18
   12254:	1f 92       	push	r1
   12256:	9f 93       	push	r25
   12258:	8f 93       	push	r24
   1225a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1225e:	0f 90       	pop	r0
   12260:	0f 90       	pop	r0
   12262:	0f 90       	pop	r0
   12264:	0f 90       	pop	r0
   12266:	0f 90       	pop	r0
   12268:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1226c:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   12270:	81 81       	ldd	r24, Z+1	; 0x01
   12272:	90 e0       	ldi	r25, 0x00	; 0
   12274:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   12278:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1227c:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   12280:	64 81       	ldd	r22, Z+4	; 0x04
   12282:	75 81       	ldd	r23, Z+5	; 0x05
   12284:	8c 2f       	mov	r24, r28
   12286:	13 de       	rcall	.-986    	; 0x11eae <Send_Identify>
   12288:	20 c0       	rjmp	.+64     	; 0x122ca <GPIB_SECONDARY_ADDRESS+0xf2>
   1228a:	c9 01       	movw	r24, r18
   1228c:	84 72       	andi	r24, 0x24	; 36
   1228e:	99 27       	eor	r25, r25
   12290:	00 97       	sbiw	r24, 0x00	; 0
   12292:	d9 f0       	breq	.+54     	; 0x122ca <GPIB_SECONDARY_ADDRESS+0xf2>
   12294:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   12298:	1f 92       	push	r1
   1229a:	8f 93       	push	r24
   1229c:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   122a0:	1f 92       	push	r1
   122a2:	8f 93       	push	r24
   122a4:	1f 92       	push	r1
   122a6:	cf 93       	push	r28
   122a8:	82 ef       	ldi	r24, 0xF2	; 242
   122aa:	91 e1       	ldi	r25, 0x11	; 17
   122ac:	1f 92       	push	r1
   122ae:	9f 93       	push	r25
   122b0:	8f 93       	push	r24
   122b2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   122b6:	8d b7       	in	r24, 0x3d	; 61
   122b8:	9e b7       	in	r25, 0x3e	; 62
   122ba:	09 96       	adiw	r24, 0x09	; 9
   122bc:	0f b6       	in	r0, 0x3f	; 63
   122be:	f8 94       	cli
   122c0:	9e bf       	out	0x3e, r25	; 62
   122c2:	0f be       	out	0x3f, r0	; 63
   122c4:	8d bf       	out	0x3d, r24	; 61
   122c6:	80 e0       	ldi	r24, 0x00	; 0
   122c8:	90 e0       	ldi	r25, 0x00	; 0
   122ca:	cf 91       	pop	r28
   122cc:	1f 91       	pop	r17
   122ce:	0f 91       	pop	r16
   122d0:	08 95       	ret

000122d2 <listen_cleanup>:
   122d2:	60 91 f8 1e 	lds	r22, 0x1EF8	; 0x801ef8 <listening_last>
   122d6:	66 23       	and	r22, r22
   122d8:	e1 f0       	breq	.+56     	; 0x12312 <listen_cleanup+0x40>
   122da:	70 e0       	ldi	r23, 0x00	; 0
   122dc:	40 e2       	ldi	r20, 0x20	; 32
   122de:	50 e0       	ldi	r21, 0x00	; 0
   122e0:	84 e0       	ldi	r24, 0x04	; 4
   122e2:	90 e0       	ldi	r25, 0x00	; 0
   122e4:	89 d2       	rcall	.+1298   	; 0x127f8 <find_device>
   122e6:	01 96       	adiw	r24, 0x01	; 1
   122e8:	a1 f0       	breq	.+40     	; 0x12312 <listen_cleanup+0x40>
   122ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   122ee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   122f2:	84 72       	andi	r24, 0x24	; 36
   122f4:	99 27       	eor	r25, r25
   122f6:	89 2b       	or	r24, r25
   122f8:	51 f0       	breq	.+20     	; 0x1230e <listen_cleanup+0x3c>
   122fa:	81 ee       	ldi	r24, 0xE1	; 225
   122fc:	91 e1       	ldi	r25, 0x11	; 17
   122fe:	1f 92       	push	r1
   12300:	9f 93       	push	r25
   12302:	8f 93       	push	r24
   12304:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12308:	0f 90       	pop	r0
   1230a:	0f 90       	pop	r0
   1230c:	0f 90       	pop	r0
   1230e:	0c 94 f2 be 	jmp	0x17de4	; 0x17de4 <printer_close>
   12312:	08 95       	ret

00012314 <GPIB_LISTEN>:
   12314:	0f 93       	push	r16
   12316:	1f 93       	push	r17
   12318:	cf 93       	push	r28
   1231a:	c8 2f       	mov	r28, r24
   1231c:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   12320:	80 93 f8 1e 	sts	0x1EF8, r24	; 0x801ef8 <listening_last>
   12324:	c0 93 fe 1e 	sts	0x1EFE, r28	; 0x801efe <listening>
   12328:	d4 df       	rcall	.-88     	; 0x122d2 <listen_cleanup>
   1232a:	cf 33       	cpi	r28, 0x3F	; 63
   1232c:	19 f5       	brne	.+70     	; 0x12374 <GPIB_LISTEN+0x60>
   1232e:	10 92 fe 1e 	sts	0x1EFE, r1	; 0x801efe <listening>
   12332:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12336:	82 ff       	sbrs	r24, 2
   12338:	75 c0       	rjmp	.+234    	; 0x12424 <GPIB_LISTEN+0x110>
   1233a:	8a ed       	ldi	r24, 0xDA	; 218
   1233c:	92 e1       	ldi	r25, 0x12	; 18
   1233e:	1f 92       	push	r1
   12340:	9f 93       	push	r25
   12342:	8f 93       	push	r24
   12344:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12348:	0f 90       	pop	r0
   1234a:	0f 90       	pop	r0
   1234c:	0f 90       	pop	r0
   1234e:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <lastcmd>
   12352:	90 91 f7 1c 	lds	r25, 0x1CF7	; 0x801cf7 <lastcmd+0x1>
   12356:	8f 35       	cpi	r24, 0x5F	; 95
   12358:	91 05       	cpc	r25, r1
   1235a:	09 f0       	breq	.+2      	; 0x1235e <GPIB_LISTEN+0x4a>
   1235c:	63 c0       	rjmp	.+198    	; 0x12424 <GPIB_LISTEN+0x110>
   1235e:	88 ed       	ldi	r24, 0xD8	; 216
   12360:	92 e1       	ldi	r25, 0x12	; 18
   12362:	1f 92       	push	r1
   12364:	9f 93       	push	r25
   12366:	8f 93       	push	r24
   12368:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1236c:	0f 90       	pop	r0
   1236e:	0f 90       	pop	r0
   12370:	0f 90       	pop	r0
   12372:	58 c0       	rjmp	.+176    	; 0x12424 <GPIB_LISTEN+0x110>
   12374:	0c 2f       	mov	r16, r28
   12376:	10 e0       	ldi	r17, 0x00	; 0
   12378:	c8 01       	movw	r24, r16
   1237a:	db db       	rcall	.-2122   	; 0x11b32 <AMIGO_is_MLA>
   1237c:	89 2b       	or	r24, r25
   1237e:	71 f0       	breq	.+28     	; 0x1239c <GPIB_LISTEN+0x88>
   12380:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12384:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12388:	84 72       	andi	r24, 0x24	; 36
   1238a:	99 27       	eor	r25, r25
   1238c:	89 2b       	or	r24, r25
   1238e:	09 f4       	brne	.+2      	; 0x12392 <GPIB_LISTEN+0x7e>
   12390:	49 c0       	rjmp	.+146    	; 0x12424 <GPIB_LISTEN+0x110>
   12392:	1f 92       	push	r1
   12394:	cf 93       	push	r28
   12396:	86 ec       	ldi	r24, 0xC6	; 198
   12398:	92 e1       	ldi	r25, 0x12	; 18
   1239a:	3a c0       	rjmp	.+116    	; 0x12410 <GPIB_LISTEN+0xfc>
   1239c:	c8 01       	movw	r24, r16
   1239e:	9c db       	rcall	.-2248   	; 0x11ad8 <SS80_is_MLA>
   123a0:	89 2b       	or	r24, r25
   123a2:	69 f0       	breq	.+26     	; 0x123be <GPIB_LISTEN+0xaa>
   123a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   123a8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   123ac:	84 72       	andi	r24, 0x24	; 36
   123ae:	99 27       	eor	r25, r25
   123b0:	89 2b       	or	r24, r25
   123b2:	c1 f1       	breq	.+112    	; 0x12424 <GPIB_LISTEN+0x110>
   123b4:	1f 92       	push	r1
   123b6:	cf 93       	push	r28
   123b8:	85 eb       	ldi	r24, 0xB5	; 181
   123ba:	92 e1       	ldi	r25, 0x12	; 18
   123bc:	29 c0       	rjmp	.+82     	; 0x12410 <GPIB_LISTEN+0xfc>
   123be:	c8 01       	movw	r24, r16
   123c0:	e5 db       	rcall	.-2102   	; 0x11b8c <PRINTER_is_MLA>
   123c2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   123c6:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   123ca:	89 2b       	or	r24, r25
   123cc:	d9 f0       	breq	.+54     	; 0x12404 <GPIB_LISTEN+0xf0>
   123ce:	24 72       	andi	r18, 0x24	; 36
   123d0:	33 27       	eor	r19, r19
   123d2:	23 2b       	or	r18, r19
   123d4:	71 f0       	breq	.+28     	; 0x123f2 <GPIB_LISTEN+0xde>
   123d6:	1f 92       	push	r1
   123d8:	cf 93       	push	r28
   123da:	81 ea       	ldi	r24, 0xA1	; 161
   123dc:	92 e1       	ldi	r25, 0x12	; 18
   123de:	1f 92       	push	r1
   123e0:	9f 93       	push	r25
   123e2:	8f 93       	push	r24
   123e4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   123e8:	0f 90       	pop	r0
   123ea:	0f 90       	pop	r0
   123ec:	0f 90       	pop	r0
   123ee:	0f 90       	pop	r0
   123f0:	0f 90       	pop	r0
   123f2:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   123f6:	8f 35       	cpi	r24, 0x5F	; 95
   123f8:	a9 f0       	breq	.+42     	; 0x12424 <GPIB_LISTEN+0x110>
   123fa:	80 e0       	ldi	r24, 0x00	; 0
   123fc:	90 e0       	ldi	r25, 0x00	; 0
   123fe:	0e 94 3f bf 	call	0x17e7e	; 0x17e7e <printer_open>
   12402:	10 c0       	rjmp	.+32     	; 0x12424 <GPIB_LISTEN+0x110>
   12404:	22 ff       	sbrs	r18, 2
   12406:	0e c0       	rjmp	.+28     	; 0x12424 <GPIB_LISTEN+0x110>
   12408:	1f 92       	push	r1
   1240a:	cf 93       	push	r28
   1240c:	85 e9       	ldi	r24, 0x95	; 149
   1240e:	92 e1       	ldi	r25, 0x12	; 18
   12410:	1f 92       	push	r1
   12412:	9f 93       	push	r25
   12414:	8f 93       	push	r24
   12416:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1241a:	0f 90       	pop	r0
   1241c:	0f 90       	pop	r0
   1241e:	0f 90       	pop	r0
   12420:	0f 90       	pop	r0
   12422:	0f 90       	pop	r0
   12424:	80 e0       	ldi	r24, 0x00	; 0
   12426:	90 e0       	ldi	r25, 0x00	; 0
   12428:	cf 91       	pop	r28
   1242a:	1f 91       	pop	r17
   1242c:	0f 91       	pop	r16
   1242e:	08 95       	ret

00012430 <gpib_task>:
   12430:	cf 93       	push	r28
   12432:	df 93       	push	r29
   12434:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <gpib_state_init>
   12438:	c7 db       	rcall	.-2162   	; 0x11bc8 <gpib_init_devices>
   1243a:	10 92 74 19 	sts	0x1974, r1	; 0x801974 <gpib_log_fp+0x1>
   1243e:	10 92 73 19 	sts	0x1973, r1	; 0x801973 <gpib_log_fp>
   12442:	80 e0       	ldi	r24, 0x00	; 0
   12444:	90 e0       	ldi	r25, 0x00	; 0
   12446:	03 d9       	rcall	.-3578   	; 0x1164e <gpib_read_byte>
   12448:	ec 01       	movw	r28, r24
   1244a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1244e:	83 ff       	sbrs	r24, 3
   12450:	02 c0       	rjmp	.+4      	; 0x12456 <gpib_task+0x26>
   12452:	ce 01       	movw	r24, r28
   12454:	d2 d9       	rcall	.-3164   	; 0x117fa <gpib_decode>
   12456:	ce 01       	movw	r24, r28
   12458:	4c dc       	rcall	.-1896   	; 0x11cf2 <gpib_error_test>
   1245a:	9c 01       	movw	r18, r24
   1245c:	23 70       	andi	r18, 0x03	; 3
   1245e:	33 27       	eor	r19, r19
   12460:	23 2b       	or	r18, r19
   12462:	09 f0       	breq	.+2      	; 0x12466 <gpib_task+0x36>
   12464:	43 c0       	rjmp	.+134    	; 0x124ec <gpib_task+0xbc>
   12466:	89 2b       	or	r24, r25
   12468:	61 f7       	brne	.-40     	; 0x12442 <gpib_task+0x12>
   1246a:	d2 ff       	sbrs	r29, 2
   1246c:	26 c0       	rjmp	.+76     	; 0x124ba <gpib_task+0x8a>
   1246e:	8c 2f       	mov	r24, r28
   12470:	8f 77       	andi	r24, 0x7F	; 127
   12472:	80 32       	cpi	r24, 0x20	; 32
   12474:	10 f4       	brcc	.+4      	; 0x1247a <gpib_task+0x4a>
   12476:	64 dd       	rcall	.-1336   	; 0x11f40 <GPIB>
   12478:	e4 cf       	rjmp	.-56     	; 0x12442 <gpib_task+0x12>
   1247a:	90 ee       	ldi	r25, 0xE0	; 224
   1247c:	98 0f       	add	r25, r24
   1247e:	90 32       	cpi	r25, 0x20	; 32
   12480:	10 f4       	brcc	.+4      	; 0x12486 <gpib_task+0x56>
   12482:	48 df       	rcall	.-368    	; 0x12314 <GPIB_LISTEN>
   12484:	de cf       	rjmp	.-68     	; 0x12442 <gpib_task+0x12>
   12486:	90 ec       	ldi	r25, 0xC0	; 192
   12488:	98 0f       	add	r25, r24
   1248a:	90 32       	cpi	r25, 0x20	; 32
   1248c:	10 f4       	brcc	.+4      	; 0x12492 <gpib_task+0x62>
   1248e:	0f de       	rcall	.-994    	; 0x120ae <GPIB_TALK>
   12490:	d8 cf       	rjmp	.-80     	; 0x12442 <gpib_task+0x12>
   12492:	90 91 fe 1e 	lds	r25, 0x1EFE	; 0x801efe <listening>
   12496:	99 23       	and	r25, r25
   12498:	59 f0       	breq	.+22     	; 0x124b0 <gpib_task+0x80>
   1249a:	20 91 f6 1c 	lds	r18, 0x1CF6	; 0x801cf6 <lastcmd>
   1249e:	30 91 f7 1c 	lds	r19, 0x1CF7	; 0x801cf7 <lastcmd+0x1>
   124a2:	2f 35       	cpi	r18, 0x5F	; 95
   124a4:	31 05       	cpc	r19, r1
   124a6:	21 f4       	brne	.+8      	; 0x124b0 <gpib_task+0x80>
   124a8:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <secondary>
   124ac:	95 de       	rcall	.-726    	; 0x121d8 <GPIB_SECONDARY_ADDRESS>
   124ae:	c9 cf       	rjmp	.-110    	; 0x12442 <gpib_task+0x12>
   124b0:	80 93 fd 1e 	sts	0x1EFD, r24	; 0x801efd <secondary>
   124b4:	60 e0       	ldi	r22, 0x00	; 0
   124b6:	90 e0       	ldi	r25, 0x00	; 0
   124b8:	12 c0       	rjmp	.+36     	; 0x124de <gpib_task+0xae>
   124ba:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   124be:	90 e0       	ldi	r25, 0x00	; 0
   124c0:	65 db       	rcall	.-2358   	; 0x11b8c <PRINTER_is_MLA>
   124c2:	89 2b       	or	r24, r25
   124c4:	29 f0       	breq	.+10     	; 0x124d0 <gpib_task+0xa0>
   124c6:	ce 01       	movw	r24, r28
   124c8:	99 27       	eor	r25, r25
   124ca:	0e 94 e0 bf 	call	0x17fc0	; 0x17fc0 <printer_buffer>
   124ce:	b9 cf       	rjmp	.-142    	; 0x12442 <gpib_task+0x12>
   124d0:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <secondary>
   124d4:	88 23       	and	r24, r24
   124d6:	09 f4       	brne	.+2      	; 0x124da <gpib_task+0xaa>
   124d8:	b4 cf       	rjmp	.-152    	; 0x12442 <gpib_task+0x12>
   124da:	61 e0       	ldi	r22, 0x01	; 1
   124dc:	ce 01       	movw	r24, r28
   124de:	93 dc       	rcall	.-1754   	; 0x11e06 <GPIB_COMMANDS>
   124e0:	08 dc       	rcall	.-2032   	; 0x11cf2 <gpib_error_test>
   124e2:	83 70       	andi	r24, 0x03	; 3
   124e4:	99 27       	eor	r25, r25
   124e6:	89 2b       	or	r24, r25
   124e8:	09 f4       	brne	.+2      	; 0x124ec <gpib_task+0xbc>
   124ea:	ab cf       	rjmp	.-170    	; 0x12442 <gpib_task+0x12>
   124ec:	df 91       	pop	r29
   124ee:	cf 91       	pop	r28
   124f0:	08 95       	ret

000124f2 <talk_cleanup>:
   124f2:	08 95       	ret

000124f4 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   124f4:	cf 93       	push	r28
   124f6:	df 93       	push	r29
   124f8:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   124fa:	8d e4       	ldi	r24, 0x4D	; 77
   124fc:	95 e1       	ldi	r25, 0x15	; 21
   124fe:	1f 92       	push	r1
   12500:	9f 93       	push	r25
   12502:	8f 93       	push	r24
   12504:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    if(full)
   12508:	0f 90       	pop	r0
   1250a:	0f 90       	pop	r0
   1250c:	0f 90       	pop	r0
   1250e:	cd 2b       	or	r28, r29
   12510:	51 f0       	breq	.+20     	; 0x12526 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12512:	83 e9       	ldi	r24, 0x93	; 147
   12514:	94 e1       	ldi	r25, 0x14	; 20
   12516:	1f 92       	push	r1
   12518:	9f 93       	push	r25
   1251a:	8f 93       	push	r24
   1251c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12520:	0f 90       	pop	r0
   12522:	0f 90       	pop	r0
   12524:	0f 90       	pop	r0
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   12526:	df 91       	pop	r29
   12528:	cf 91       	pop	r28
   1252a:	08 95       	ret

0001252c <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1252c:	ef 92       	push	r14
   1252e:	ff 92       	push	r15
   12530:	0f 93       	push	r16
   12532:	1f 93       	push	r17
   12534:	cf 93       	push	r28
   12536:	df 93       	push	r29
   12538:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1253a:	fb 01       	movw	r30, r22
   1253c:	80 81       	ld	r24, Z
   1253e:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12540:	00 97       	sbiw	r24, 0x00	; 0
   12542:	19 f4       	brne	.+6      	; 0x1254a <gpib_tests+0x1e>
        return(0);
   12544:	80 e0       	ldi	r24, 0x00	; 0
   12546:	90 e0       	ldi	r25, 0x00	; 0
   12548:	aa c0       	rjmp	.+340    	; 0x1269e <gpib_tests+0x172>
   1254a:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1254c:	69 e2       	ldi	r22, 0x29	; 41
   1254e:	7d e0       	ldi	r23, 0x0D	; 13
   12550:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   12554:	89 2b       	or	r24, r25
   12556:	b1 f3       	breq	.-20     	; 0x12544 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   12558:	f7 01       	movw	r30, r14
   1255a:	c2 81       	ldd	r28, Z+2	; 0x02
   1255c:	d3 81       	ldd	r29, Z+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   1255e:	20 97       	sbiw	r28, 0x00	; 0
   12560:	21 f4       	brne	.+8      	; 0x1256a <gpib_tests+0x3e>
    {
        gpib_help(1);
   12562:	81 e0       	ldi	r24, 0x01	; 1
   12564:	90 e0       	ldi	r25, 0x00	; 0
   12566:	c6 df       	rcall	.-116    	; 0x124f4 <gpib_help>
   12568:	98 c0       	rjmp	.+304    	; 0x1269a <gpib_tests+0x16e>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   1256a:	64 e1       	ldi	r22, 0x14	; 20
   1256c:	76 e1       	ldi	r23, 0x16	; 22
   1256e:	ce 01       	movw	r24, r28
   12570:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   12574:	89 2b       	or	r24, r25
   12576:	a9 f7       	brne	.-22     	; 0x12562 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12578:	98 01       	movw	r18, r16
   1257a:	42 e0       	ldi	r20, 0x02	; 2
   1257c:	50 e0       	ldi	r21, 0x00	; 0
   1257e:	6e e2       	ldi	r22, 0x2E	; 46
   12580:	7d e0       	ldi	r23, 0x0D	; 13
   12582:	ce 01       	movw	r24, r28
   12584:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   12588:	89 2b       	or	r24, r25
   1258a:	19 f0       	breq	.+6      	; 0x12592 <gpib_tests+0x66>
    {
        display_Addresses();
   1258c:	0e 94 3e 9f 	call	0x13e7c	; 0x13e7c <display_Addresses>
   12590:	84 c0       	rjmp	.+264    	; 0x1269a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   12592:	98 01       	movw	r18, r16
   12594:	42 e0       	ldi	r20, 0x02	; 2
   12596:	50 e0       	ldi	r21, 0x00	; 0
   12598:	68 e3       	ldi	r22, 0x38	; 56
   1259a:	7d e0       	ldi	r23, 0x0D	; 13
   1259c:	ce 01       	movw	r24, r28
   1259e:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   125a2:	89 2b       	or	r24, r25
   125a4:	19 f0       	breq	.+6      	; 0x125ac <gpib_tests+0x80>
    {
        display_Config();
   125a6:	0e 94 39 a0 	call	0x14072	; 0x14072 <display_Config>
   125aa:	77 c0       	rjmp	.+238    	; 0x1269a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   125ac:	98 01       	movw	r18, r16
   125ae:	43 e0       	ldi	r20, 0x03	; 3
   125b0:	50 e0       	ldi	r21, 0x00	; 0
   125b2:	6f e3       	ldi	r22, 0x3F	; 63
   125b4:	7d e0       	ldi	r23, 0x0D	; 13
   125b6:	ce 01       	movw	r24, r28
   125b8:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   125bc:	89 2b       	or	r24, r25
   125be:	c1 f0       	breq	.+48     	; 0x125f0 <gpib_tests+0xc4>
    {
        debuglevel = get_value(argv[ind]);
   125c0:	f7 01       	movw	r30, r14
   125c2:	84 81       	ldd	r24, Z+4	; 0x04
   125c4:	95 81       	ldd	r25, Z+5	; 0x05
   125c6:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   125ca:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   125ce:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   125d2:	7f 93       	push	r23
   125d4:	6f 93       	push	r22
   125d6:	86 e8       	ldi	r24, 0x86	; 134
   125d8:	94 e1       	ldi	r25, 0x14	; 20
   125da:	1f 92       	push	r1
   125dc:	9f 93       	push	r25
   125de:	8f 93       	push	r24
   125e0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(1);
   125e4:	0f 90       	pop	r0
   125e6:	0f 90       	pop	r0
   125e8:	0f 90       	pop	r0
   125ea:	0f 90       	pop	r0
   125ec:	0f 90       	pop	r0
   125ee:	55 c0       	rjmp	.+170    	; 0x1269a <gpib_tests+0x16e>
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   125f0:	98 01       	movw	r18, r16
   125f2:	42 e0       	ldi	r20, 0x02	; 2
   125f4:	50 e0       	ldi	r21, 0x00	; 0
   125f6:	65 e4       	ldi	r22, 0x45	; 69
   125f8:	7d e0       	ldi	r23, 0x0D	; 13
   125fa:	ce 01       	movw	r24, r28
   125fc:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   12600:	89 2b       	or	r24, r25
   12602:	19 f0       	breq	.+6      	; 0x1260a <gpib_tests+0xde>
    {
        gpib_timer_elapsed_begin();
   12604:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   12608:	48 c0       	rjmp	.+144    	; 0x1269a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   1260a:	98 01       	movw	r18, r16
   1260c:	42 e0       	ldi	r20, 0x02	; 2
   1260e:	50 e0       	ldi	r21, 0x00	; 0
   12610:	63 e5       	ldi	r22, 0x53	; 83
   12612:	7d e0       	ldi	r23, 0x0D	; 13
   12614:	ce 01       	movw	r24, r28
   12616:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1261a:	89 2b       	or	r24, r25
   1261c:	29 f0       	breq	.+10     	; 0x12628 <gpib_tests+0xfc>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1261e:	8b e5       	ldi	r24, 0x5B	; 91
   12620:	9d e0       	ldi	r25, 0x0D	; 13
   12622:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   12626:	39 c0       	rjmp	.+114    	; 0x1269a <gpib_tests+0x16e>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   12628:	98 01       	movw	r18, r16
   1262a:	42 e0       	ldi	r20, 0x02	; 2
   1262c:	50 e0       	ldi	r21, 0x00	; 0
   1262e:	69 e6       	ldi	r22, 0x69	; 105
   12630:	7d e0       	ldi	r23, 0x0D	; 13
   12632:	ce 01       	movw	r24, r28
   12634:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   12638:	89 2b       	or	r24, r25
   1263a:	19 f0       	breq	.+6      	; 0x12642 <gpib_tests+0x116>
    {
        gpib_assert_ifc();
   1263c:	0e 94 c1 87 	call	0x10f82	; 0x10f82 <gpib_assert_ifc>
   12640:	2c c0       	rjmp	.+88     	; 0x1269a <gpib_tests+0x16e>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12642:	98 01       	movw	r18, r16
   12644:	42 e0       	ldi	r20, 0x02	; 2
   12646:	50 e0       	ldi	r21, 0x00	; 0
   12648:	6d e6       	ldi	r22, 0x6D	; 109
   1264a:	7d e0       	ldi	r23, 0x0D	; 13
   1264c:	ce 01       	movw	r24, r28
   1264e:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   12652:	89 2b       	or	r24, r25
    {
        gpib_task();
   12654:	11 f0       	breq	.+4      	; 0x1265a <gpib_tests+0x12e>
   12656:	ec de       	rcall	.-552    	; 0x12430 <gpib_task>
   12658:	20 c0       	rjmp	.+64     	; 0x1269a <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1265a:	98 01       	movw	r18, r16
   1265c:	43 e0       	ldi	r20, 0x03	; 3
   1265e:	50 e0       	ldi	r21, 0x00	; 0
   12660:	62 e7       	ldi	r22, 0x72	; 114
   12662:	7d e0       	ldi	r23, 0x0D	; 13
   12664:	ce 01       	movw	r24, r28
   12666:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1266a:	89 2b       	or	r24, r25
   1266c:	09 f4       	brne	.+2      	; 0x12670 <gpib_tests+0x144>
   1266e:	6a cf       	rjmp	.-300    	; 0x12544 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12670:	f7 01       	movw	r30, r14
   12672:	86 81       	ldd	r24, Z+6	; 0x06
   12674:	97 81       	ldd	r25, Z+7	; 0x07
   12676:	00 97       	sbiw	r24, 0x00	; 0
   12678:	51 f0       	breq	.+20     	; 0x1268e <gpib_tests+0x162>
   1267a:	68 e7       	ldi	r22, 0x78	; 120
   1267c:	7d e0       	ldi	r23, 0x0D	; 13
   1267e:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12682:	61 e0       	ldi	r22, 0x01	; 1
   12684:	70 e0       	ldi	r23, 0x00	; 0
   12686:	89 2b       	or	r24, r25
   12688:	21 f4       	brne	.+8      	; 0x12692 <gpib_tests+0x166>
   1268a:	60 e0       	ldi	r22, 0x00	; 0
   1268c:	02 c0       	rjmp	.+4      	; 0x12692 <gpib_tests+0x166>
   1268e:	60 e0       	ldi	r22, 0x00	; 0
   12690:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12692:	f7 01       	movw	r30, r14
   12694:	84 81       	ldd	r24, Z+4	; 0x04
   12696:	95 81       	ldd	r25, Z+5	; 0x05
   12698:	9f da       	rcall	.-2754   	; 0x11bd8 <gpib_trace_task>
        return(1);
   1269a:	81 e0       	ldi	r24, 0x01	; 1
   1269c:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1269e:	cd b7       	in	r28, 0x3d	; 61
   126a0:	de b7       	in	r29, 0x3e	; 62
   126a2:	e6 e0       	ldi	r30, 0x06	; 6
   126a4:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

000126a8 <V2B_MSB>:
   126a8:	0f 93       	push	r16
   126aa:	1f 93       	push	r17
   126ac:	da 01       	movw	r26, r20
   126ae:	11 97       	sbiw	r26, 0x01	; 1
   126b0:	b7 fd       	sbrc	r27, 7
   126b2:	0b c0       	rjmp	.+22     	; 0x126ca <V2B_MSB+0x22>
   126b4:	fd 01       	movw	r30, r26
   126b6:	e6 0f       	add	r30, r22
   126b8:	f7 1f       	adc	r31, r23
   126ba:	e8 0f       	add	r30, r24
   126bc:	f9 1f       	adc	r31, r25
   126be:	00 83       	st	Z, r16
   126c0:	01 2f       	mov	r16, r17
   126c2:	12 2f       	mov	r17, r18
   126c4:	23 2f       	mov	r18, r19
   126c6:	33 27       	eor	r19, r19
   126c8:	f2 cf       	rjmp	.-28     	; 0x126ae <V2B_MSB+0x6>
   126ca:	1f 91       	pop	r17
   126cc:	0f 91       	pop	r16
   126ce:	08 95       	ret

000126d0 <V2B_LSB>:
   126d0:	0f 93       	push	r16
   126d2:	1f 93       	push	r17
   126d4:	fc 01       	movw	r30, r24
   126d6:	e6 0f       	add	r30, r22
   126d8:	f7 1f       	adc	r31, r23
   126da:	bf 01       	movw	r22, r30
   126dc:	cf 01       	movw	r24, r30
   126de:	86 1b       	sub	r24, r22
   126e0:	97 0b       	sbc	r25, r23
   126e2:	84 17       	cp	r24, r20
   126e4:	95 07       	cpc	r25, r21
   126e6:	34 f4       	brge	.+12     	; 0x126f4 <V2B_LSB+0x24>
   126e8:	01 93       	st	Z+, r16
   126ea:	01 2f       	mov	r16, r17
   126ec:	12 2f       	mov	r17, r18
   126ee:	23 2f       	mov	r18, r19
   126f0:	33 27       	eor	r19, r19
   126f2:	f4 cf       	rjmp	.-24     	; 0x126dc <V2B_LSB+0xc>
   126f4:	1f 91       	pop	r17
   126f6:	0f 91       	pop	r16
   126f8:	08 95       	ret

000126fa <B2V_MSB>:
   126fa:	cf 92       	push	r12
   126fc:	df 92       	push	r13
   126fe:	ef 92       	push	r14
   12700:	ff 92       	push	r15
   12702:	fc 01       	movw	r30, r24
   12704:	e6 0f       	add	r30, r22
   12706:	f7 1f       	adc	r31, r23
   12708:	60 e0       	ldi	r22, 0x00	; 0
   1270a:	70 e0       	ldi	r23, 0x00	; 0
   1270c:	cb 01       	movw	r24, r22
   1270e:	df 01       	movw	r26, r30
   12710:	9f 01       	movw	r18, r30
   12712:	2a 1b       	sub	r18, r26
   12714:	3b 0b       	sbc	r19, r27
   12716:	24 17       	cp	r18, r20
   12718:	35 07       	cpc	r19, r21
   1271a:	4c f4       	brge	.+18     	; 0x1272e <B2V_MSB+0x34>
   1271c:	cc 24       	eor	r12, r12
   1271e:	d6 2e       	mov	r13, r22
   12720:	e7 2e       	mov	r14, r23
   12722:	f8 2e       	mov	r15, r24
   12724:	21 91       	ld	r18, Z+
   12726:	c7 01       	movw	r24, r14
   12728:	b6 01       	movw	r22, r12
   1272a:	62 2b       	or	r22, r18
   1272c:	f1 cf       	rjmp	.-30     	; 0x12710 <B2V_MSB+0x16>
   1272e:	ff 90       	pop	r15
   12730:	ef 90       	pop	r14
   12732:	df 90       	pop	r13
   12734:	cf 90       	pop	r12
   12736:	08 95       	ret

00012738 <B2V_LSB>:
   12738:	cf 92       	push	r12
   1273a:	df 92       	push	r13
   1273c:	ef 92       	push	r14
   1273e:	ff 92       	push	r15
   12740:	9c 01       	movw	r18, r24
   12742:	db 01       	movw	r26, r22
   12744:	60 e0       	ldi	r22, 0x00	; 0
   12746:	70 e0       	ldi	r23, 0x00	; 0
   12748:	cb 01       	movw	r24, r22
   1274a:	41 50       	subi	r20, 0x01	; 1
   1274c:	51 09       	sbc	r21, r1
   1274e:	57 fd       	sbrc	r21, 7
   12750:	0e c0       	rjmp	.+28     	; 0x1276e <B2V_LSB+0x36>
   12752:	cc 24       	eor	r12, r12
   12754:	d6 2e       	mov	r13, r22
   12756:	e7 2e       	mov	r14, r23
   12758:	f8 2e       	mov	r15, r24
   1275a:	fa 01       	movw	r30, r20
   1275c:	ea 0f       	add	r30, r26
   1275e:	fb 1f       	adc	r31, r27
   12760:	e2 0f       	add	r30, r18
   12762:	f3 1f       	adc	r31, r19
   12764:	e0 81       	ld	r30, Z
   12766:	c7 01       	movw	r24, r14
   12768:	b6 01       	movw	r22, r12
   1276a:	6e 2b       	or	r22, r30
   1276c:	ee cf       	rjmp	.-36     	; 0x1274a <B2V_LSB+0x12>
   1276e:	ff 90       	pop	r15
   12770:	ef 90       	pop	r14
   12772:	df 90       	pop	r13
   12774:	cf 90       	pop	r12
   12776:	08 95       	ret

00012778 <find_type>:
   12778:	e2 e0       	ldi	r30, 0x02	; 2
   1277a:	ff e1       	ldi	r31, 0x1F	; 31
   1277c:	20 e0       	ldi	r18, 0x00	; 0
   1277e:	30 e0       	ldi	r19, 0x00	; 0
   12780:	40 81       	ld	r20, Z
   12782:	50 e0       	ldi	r21, 0x00	; 0
   12784:	48 17       	cp	r20, r24
   12786:	59 07       	cpc	r21, r25
   12788:	49 f0       	breq	.+18     	; 0x1279c <find_type+0x24>
   1278a:	2f 5f       	subi	r18, 0xFF	; 255
   1278c:	3f 4f       	sbci	r19, 0xFF	; 255
   1278e:	bb 96       	adiw	r30, 0x2b	; 43
   12790:	2c 30       	cpi	r18, 0x0C	; 12
   12792:	31 05       	cpc	r19, r1
   12794:	a9 f7       	brne	.-22     	; 0x12780 <find_type+0x8>
   12796:	8f ef       	ldi	r24, 0xFF	; 255
   12798:	9f ef       	ldi	r25, 0xFF	; 255
   1279a:	08 95       	ret
   1279c:	c9 01       	movw	r24, r18
   1279e:	08 95       	ret

000127a0 <count_drive_types>:
   127a0:	28 2f       	mov	r18, r24
   127a2:	e2 e0       	ldi	r30, 0x02	; 2
   127a4:	ff e1       	ldi	r31, 0x1F	; 31
   127a6:	80 e0       	ldi	r24, 0x00	; 0
   127a8:	90 e0       	ldi	r25, 0x00	; 0
   127aa:	30 81       	ld	r19, Z
   127ac:	32 13       	cpse	r19, r18
   127ae:	01 c0       	rjmp	.+2      	; 0x127b2 <count_drive_types+0x12>
   127b0:	01 96       	adiw	r24, 0x01	; 1
   127b2:	bb 96       	adiw	r30, 0x2b	; 43
   127b4:	31 e2       	ldi	r19, 0x21	; 33
   127b6:	e6 30       	cpi	r30, 0x06	; 6
   127b8:	f3 07       	cpc	r31, r19
   127ba:	b9 f7       	brne	.-18     	; 0x127aa <count_drive_types+0xa>
   127bc:	08 95       	ret

000127be <type_to_str>:
   127be:	00 97       	sbiw	r24, 0x00	; 0
   127c0:	59 f0       	breq	.+22     	; 0x127d8 <type_to_str+0x1a>
   127c2:	81 30       	cpi	r24, 0x01	; 1
   127c4:	91 05       	cpc	r25, r1
   127c6:	59 f0       	breq	.+22     	; 0x127de <type_to_str+0x20>
   127c8:	83 30       	cpi	r24, 0x03	; 3
   127ca:	91 05       	cpc	r25, r1
   127cc:	59 f0       	breq	.+22     	; 0x127e4 <type_to_str+0x26>
   127ce:	04 97       	sbiw	r24, 0x04	; 4
   127d0:	61 f0       	breq	.+24     	; 0x127ea <type_to_str+0x2c>
   127d2:	86 ea       	ldi	r24, 0xA6	; 166
   127d4:	9d e0       	ldi	r25, 0x0D	; 13
   127d6:	08 95       	ret
   127d8:	8c e7       	ldi	r24, 0x7C	; 124
   127da:	9d e0       	ldi	r25, 0x0D	; 13
   127dc:	08 95       	ret
   127de:	84 e8       	ldi	r24, 0x84	; 132
   127e0:	9d e0       	ldi	r25, 0x0D	; 13
   127e2:	08 95       	ret
   127e4:	8c e9       	ldi	r24, 0x9C	; 156
   127e6:	9d e0       	ldi	r25, 0x0D	; 13
   127e8:	08 95       	ret
   127ea:	8f e8       	ldi	r24, 0x8F	; 143
   127ec:	9d e0       	ldi	r25, 0x0D	; 13
   127ee:	08 95       	ret

000127f0 <find_free>:
   127f0:	80 e0       	ldi	r24, 0x00	; 0
   127f2:	90 e0       	ldi	r25, 0x00	; 0
   127f4:	c1 cf       	rjmp	.-126    	; 0x12778 <find_type>
   127f6:	08 95       	ret

000127f8 <find_device>:
   127f8:	9b 01       	movw	r18, r22
   127fa:	20 52       	subi	r18, 0x20	; 32
   127fc:	31 09       	sbc	r19, r1
   127fe:	2f 35       	cpi	r18, 0x5F	; 95
   12800:	31 05       	cpc	r19, r1
   12802:	f8 f4       	brcc	.+62     	; 0x12842 <find_device+0x4a>
   12804:	64 17       	cp	r22, r20
   12806:	75 07       	cpc	r23, r21
   12808:	e4 f0       	brlt	.+56     	; 0x12842 <find_device+0x4a>
   1280a:	9a 01       	movw	r18, r20
   1280c:	22 5e       	subi	r18, 0xE2	; 226
   1280e:	3f 4f       	sbci	r19, 0xFF	; 255
   12810:	26 17       	cp	r18, r22
   12812:	37 07       	cpc	r19, r23
   12814:	b4 f0       	brlt	.+44     	; 0x12842 <find_device+0x4a>
   12816:	64 1b       	sub	r22, r20
   12818:	75 0b       	sbc	r23, r21
   1281a:	e2 e0       	ldi	r30, 0x02	; 2
   1281c:	ff e1       	ldi	r31, 0x1F	; 31
   1281e:	20 e0       	ldi	r18, 0x00	; 0
   12820:	30 e0       	ldi	r19, 0x00	; 0
   12822:	40 81       	ld	r20, Z
   12824:	50 e0       	ldi	r21, 0x00	; 0
   12826:	48 17       	cp	r20, r24
   12828:	59 07       	cpc	r21, r25
   1282a:	29 f4       	brne	.+10     	; 0x12836 <find_device+0x3e>
   1282c:	41 81       	ldd	r20, Z+1	; 0x01
   1282e:	50 e0       	ldi	r21, 0x00	; 0
   12830:	64 17       	cp	r22, r20
   12832:	75 07       	cpc	r23, r21
   12834:	49 f0       	breq	.+18     	; 0x12848 <find_device+0x50>
   12836:	2f 5f       	subi	r18, 0xFF	; 255
   12838:	3f 4f       	sbci	r19, 0xFF	; 255
   1283a:	bb 96       	adiw	r30, 0x2b	; 43
   1283c:	2c 30       	cpi	r18, 0x0C	; 12
   1283e:	31 05       	cpc	r19, r1
   12840:	81 f7       	brne	.-32     	; 0x12822 <find_device+0x2a>
   12842:	8f ef       	ldi	r24, 0xFF	; 255
   12844:	9f ef       	ldi	r25, 0xFF	; 255
   12846:	08 95       	ret
   12848:	c9 01       	movw	r24, r18
   1284a:	08 95       	ret

0001284c <set_active_device>:
   1284c:	1f 93       	push	r17
   1284e:	cf 93       	push	r28
   12850:	df 93       	push	r29
   12852:	8f 3f       	cpi	r24, 0xFF	; 255
   12854:	2f ef       	ldi	r18, 0xFF	; 255
   12856:	92 07       	cpc	r25, r18
   12858:	09 f4       	brne	.+2      	; 0x1285c <set_active_device+0x10>
   1285a:	fa c0       	rjmp	.+500    	; 0x12a50 <set_active_device+0x204>
   1285c:	ec 01       	movw	r28, r24
   1285e:	0c 97       	sbiw	r24, 0x0c	; 12
   12860:	c0 f0       	brcs	.+48     	; 0x12892 <set_active_device+0x46>
   12862:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12866:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1286a:	9c 01       	movw	r18, r24
   1286c:	21 70       	andi	r18, 0x01	; 1
   1286e:	33 27       	eor	r19, r19
   12870:	80 ff       	sbrs	r24, 0
   12872:	f0 c0       	rjmp	.+480    	; 0x12a54 <set_active_device+0x208>
   12874:	df 93       	push	r29
   12876:	cf 93       	push	r28
   12878:	8d ea       	ldi	r24, 0xAD	; 173
   1287a:	90 e2       	ldi	r25, 0x20	; 32
   1287c:	1f 92       	push	r1
   1287e:	9f 93       	push	r25
   12880:	8f 93       	push	r24
   12882:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12886:	0f 90       	pop	r0
   12888:	0f 90       	pop	r0
   1288a:	0f 90       	pop	r0
   1288c:	0f 90       	pop	r0
   1288e:	0f 90       	pop	r0
   12890:	df c0       	rjmp	.+446    	; 0x12a50 <set_active_device+0x204>
   12892:	8b e2       	ldi	r24, 0x2B	; 43
   12894:	8c 9f       	mul	r24, r28
   12896:	f0 01       	movw	r30, r0
   12898:	8d 9f       	mul	r24, r29
   1289a:	f0 0d       	add	r31, r0
   1289c:	11 24       	eor	r1, r1
   1289e:	ee 5f       	subi	r30, 0xFE	; 254
   128a0:	f0 4e       	sbci	r31, 0xE0	; 224
   128a2:	81 81       	ldd	r24, Z+1	; 0x01
   128a4:	8f 31       	cpi	r24, 0x1F	; 31
   128a6:	e8 f0       	brcs	.+58     	; 0x128e2 <set_active_device+0x96>
   128a8:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   128ac:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   128b0:	9a 01       	movw	r18, r20
   128b2:	21 70       	andi	r18, 0x01	; 1
   128b4:	33 27       	eor	r19, r19
   128b6:	40 ff       	sbrs	r20, 0
   128b8:	cd c0       	rjmp	.+410    	; 0x12a54 <set_active_device+0x208>
   128ba:	1f 92       	push	r1
   128bc:	8f 93       	push	r24
   128be:	df 93       	push	r29
   128c0:	cf 93       	push	r28
   128c2:	84 e7       	ldi	r24, 0x74	; 116
   128c4:	90 e2       	ldi	r25, 0x20	; 32
   128c6:	1f 92       	push	r1
   128c8:	9f 93       	push	r25
   128ca:	8f 93       	push	r24
   128cc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   128d0:	8d b7       	in	r24, 0x3d	; 61
   128d2:	9e b7       	in	r25, 0x3e	; 62
   128d4:	07 96       	adiw	r24, 0x07	; 7
   128d6:	0f b6       	in	r0, 0x3f	; 63
   128d8:	f8 94       	cli
   128da:	9e bf       	out	0x3e, r25	; 62
   128dc:	0f be       	out	0x3f, r0	; 63
   128de:	8d bf       	out	0x3d, r24	; 61
   128e0:	b7 c0       	rjmp	.+366    	; 0x12a50 <set_active_device+0x204>
   128e2:	10 81       	ld	r17, Z
   128e4:	81 2f       	mov	r24, r17
   128e6:	90 e0       	ldi	r25, 0x00	; 0
   128e8:	27 a1       	ldd	r18, Z+39	; 0x27
   128ea:	30 a5       	ldd	r19, Z+40	; 0x28
   128ec:	21 15       	cp	r18, r1
   128ee:	31 05       	cpc	r19, r1
   128f0:	01 f5       	brne	.+64     	; 0x12932 <set_active_device+0xe6>
   128f2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   128f6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   128fa:	9a 01       	movw	r18, r20
   128fc:	21 70       	andi	r18, 0x01	; 1
   128fe:	33 27       	eor	r19, r19
   12900:	40 ff       	sbrs	r20, 0
   12902:	a8 c0       	rjmp	.+336    	; 0x12a54 <set_active_device+0x208>
   12904:	5c df       	rcall	.-328    	; 0x127be <type_to_str>
   12906:	9f 93       	push	r25
   12908:	8f 93       	push	r24
   1290a:	1f 92       	push	r1
   1290c:	1f 93       	push	r17
   1290e:	df 93       	push	r29
   12910:	cf 93       	push	r28
   12912:	8f e3       	ldi	r24, 0x3F	; 63
   12914:	90 e2       	ldi	r25, 0x20	; 32
   12916:	1f 92       	push	r1
   12918:	9f 93       	push	r25
   1291a:	8f 93       	push	r24
   1291c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12920:	8d b7       	in	r24, 0x3d	; 61
   12922:	9e b7       	in	r25, 0x3e	; 62
   12924:	09 96       	adiw	r24, 0x09	; 9
   12926:	0f b6       	in	r0, 0x3f	; 63
   12928:	f8 94       	cli
   1292a:	9e bf       	out	0x3e, r25	; 62
   1292c:	0f be       	out	0x3f, r0	; 63
   1292e:	8d bf       	out	0x3d, r24	; 61
   12930:	8f c0       	rjmp	.+286    	; 0x12a50 <set_active_device+0x204>
   12932:	00 97       	sbiw	r24, 0x00	; 0
   12934:	11 f5       	brne	.+68     	; 0x1297a <set_active_device+0x12e>
   12936:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1293a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1293e:	9c 01       	movw	r18, r24
   12940:	21 70       	andi	r18, 0x01	; 1
   12942:	33 27       	eor	r19, r19
   12944:	80 ff       	sbrs	r24, 0
   12946:	86 c0       	rjmp	.+268    	; 0x12a54 <set_active_device+0x208>
   12948:	80 e0       	ldi	r24, 0x00	; 0
   1294a:	90 e0       	ldi	r25, 0x00	; 0
   1294c:	38 df       	rcall	.-400    	; 0x127be <type_to_str>
   1294e:	9f 93       	push	r25
   12950:	8f 93       	push	r24
   12952:	1f 92       	push	r1
   12954:	1f 92       	push	r1
   12956:	df 93       	push	r29
   12958:	cf 93       	push	r28
   1295a:	8a e0       	ldi	r24, 0x0A	; 10
   1295c:	90 e2       	ldi	r25, 0x20	; 32
   1295e:	1f 92       	push	r1
   12960:	9f 93       	push	r25
   12962:	8f 93       	push	r24
   12964:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12968:	8d b7       	in	r24, 0x3d	; 61
   1296a:	9e b7       	in	r25, 0x3e	; 62
   1296c:	09 96       	adiw	r24, 0x09	; 9
   1296e:	0f b6       	in	r0, 0x3f	; 63
   12970:	f8 94       	cli
   12972:	9e bf       	out	0x3e, r25	; 62
   12974:	0f be       	out	0x3f, r0	; 63
   12976:	8d bf       	out	0x3d, r24	; 61
   12978:	6b c0       	rjmp	.+214    	; 0x12a50 <set_active_device+0x204>
   1297a:	84 30       	cpi	r24, 0x04	; 4
   1297c:	91 05       	cpc	r25, r1
   1297e:	29 f4       	brne	.+10     	; 0x1298a <set_active_device+0x13e>
   12980:	30 93 80 19 	sts	0x1980, r19	; 0x801980 <PRINTERp+0x1>
   12984:	20 93 7f 19 	sts	0x197F, r18	; 0x80197f <PRINTERp>
   12988:	41 c0       	rjmp	.+130    	; 0x12a0c <set_active_device+0x1c0>
   1298a:	41 2f       	mov	r20, r17
   1298c:	4d 7f       	andi	r20, 0xFD	; 253
   1298e:	41 30       	cpi	r20, 0x01	; 1
   12990:	09 f0       	breq	.+2      	; 0x12994 <set_active_device+0x148>
   12992:	3f c0       	rjmp	.+126    	; 0x12a12 <set_active_device+0x1c6>
   12994:	41 a5       	ldd	r20, Z+41	; 0x29
   12996:	52 a5       	ldd	r21, Z+42	; 0x2a
   12998:	41 15       	cp	r20, r1
   1299a:	51 05       	cpc	r21, r1
   1299c:	01 f5       	brne	.+64     	; 0x129de <set_active_device+0x192>
   1299e:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   129a2:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   129a6:	9a 01       	movw	r18, r20
   129a8:	21 70       	andi	r18, 0x01	; 1
   129aa:	33 27       	eor	r19, r19
   129ac:	40 ff       	sbrs	r20, 0
   129ae:	52 c0       	rjmp	.+164    	; 0x12a54 <set_active_device+0x208>
   129b0:	06 df       	rcall	.-500    	; 0x127be <type_to_str>
   129b2:	9f 93       	push	r25
   129b4:	8f 93       	push	r24
   129b6:	1f 92       	push	r1
   129b8:	1f 93       	push	r17
   129ba:	df 93       	push	r29
   129bc:	cf 93       	push	r28
   129be:	82 ed       	ldi	r24, 0xD2	; 210
   129c0:	9f e1       	ldi	r25, 0x1F	; 31
   129c2:	1f 92       	push	r1
   129c4:	9f 93       	push	r25
   129c6:	8f 93       	push	r24
   129c8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   129cc:	8d b7       	in	r24, 0x3d	; 61
   129ce:	9e b7       	in	r25, 0x3e	; 62
   129d0:	09 96       	adiw	r24, 0x09	; 9
   129d2:	0f b6       	in	r0, 0x3f	; 63
   129d4:	f8 94       	cli
   129d6:	9e bf       	out	0x3e, r25	; 62
   129d8:	0f be       	out	0x3f, r0	; 63
   129da:	8d bf       	out	0x3d, r24	; 61
   129dc:	39 c0       	rjmp	.+114    	; 0x12a50 <set_active_device+0x204>
   129de:	81 30       	cpi	r24, 0x01	; 1
   129e0:	91 05       	cpc	r25, r1
   129e2:	49 f4       	brne	.+18     	; 0x129f6 <set_active_device+0x1aa>
   129e4:	30 93 7a 19 	sts	0x197A, r19	; 0x80197a <AMIGOp+0x1>
   129e8:	20 93 79 19 	sts	0x1979, r18	; 0x801979 <AMIGOp>
   129ec:	50 93 78 19 	sts	0x1978, r21	; 0x801978 <AMIGOs+0x1>
   129f0:	40 93 77 19 	sts	0x1977, r20	; 0x801977 <AMIGOs>
   129f4:	0b c0       	rjmp	.+22     	; 0x12a0c <set_active_device+0x1c0>
   129f6:	83 30       	cpi	r24, 0x03	; 3
   129f8:	91 05       	cpc	r25, r1
   129fa:	59 f4       	brne	.+22     	; 0x12a12 <set_active_device+0x1c6>
   129fc:	30 93 7e 19 	sts	0x197E, r19	; 0x80197e <SS80p+0x1>
   12a00:	20 93 7d 19 	sts	0x197D, r18	; 0x80197d <SS80p>
   12a04:	50 93 7c 19 	sts	0x197C, r21	; 0x80197c <SS80s+0x1>
   12a08:	40 93 7b 19 	sts	0x197B, r20	; 0x80197b <SS80s>
   12a0c:	21 e0       	ldi	r18, 0x01	; 1
   12a0e:	30 e0       	ldi	r19, 0x00	; 0
   12a10:	21 c0       	rjmp	.+66     	; 0x12a54 <set_active_device+0x208>
   12a12:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12a16:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12a1a:	9a 01       	movw	r18, r20
   12a1c:	21 70       	andi	r18, 0x01	; 1
   12a1e:	33 27       	eor	r19, r19
   12a20:	40 ff       	sbrs	r20, 0
   12a22:	18 c0       	rjmp	.+48     	; 0x12a54 <set_active_device+0x208>
   12a24:	cc de       	rcall	.-616    	; 0x127be <type_to_str>
   12a26:	9f 93       	push	r25
   12a28:	8f 93       	push	r24
   12a2a:	1f 92       	push	r1
   12a2c:	1f 93       	push	r17
   12a2e:	df 93       	push	r29
   12a30:	cf 93       	push	r28
   12a32:	87 ea       	ldi	r24, 0xA7	; 167
   12a34:	9f e1       	ldi	r25, 0x1F	; 31
   12a36:	1f 92       	push	r1
   12a38:	9f 93       	push	r25
   12a3a:	8f 93       	push	r24
   12a3c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12a40:	8d b7       	in	r24, 0x3d	; 61
   12a42:	9e b7       	in	r25, 0x3e	; 62
   12a44:	09 96       	adiw	r24, 0x09	; 9
   12a46:	0f b6       	in	r0, 0x3f	; 63
   12a48:	f8 94       	cli
   12a4a:	9e bf       	out	0x3e, r25	; 62
   12a4c:	0f be       	out	0x3f, r0	; 63
   12a4e:	8d bf       	out	0x3d, r24	; 61
   12a50:	20 e0       	ldi	r18, 0x00	; 0
   12a52:	30 e0       	ldi	r19, 0x00	; 0
   12a54:	c9 01       	movw	r24, r18
   12a56:	df 91       	pop	r29
   12a58:	cf 91       	pop	r28
   12a5a:	1f 91       	pop	r17
   12a5c:	08 95       	ret

00012a5e <SS80_Set_Defaults>:
   12a5e:	0f 93       	push	r16
   12a60:	1f 93       	push	r17
   12a62:	cf 93       	push	r28
   12a64:	df 93       	push	r29
   12a66:	ec 01       	movw	r28, r24
   12a68:	82 e0       	ldi	r24, 0x02	; 2
   12a6a:	90 e0       	ldi	r25, 0x00	; 0
   12a6c:	85 de       	rcall	.-758    	; 0x12778 <find_type>
   12a6e:	97 fd       	sbrc	r25, 7
   12a70:	6b c0       	rjmp	.+214    	; 0x12b48 <SS80_Set_Defaults+0xea>
   12a72:	2b e2       	ldi	r18, 0x2B	; 43
   12a74:	2c 9f       	mul	r18, r28
   12a76:	f0 01       	movw	r30, r0
   12a78:	2d 9f       	mul	r18, r29
   12a7a:	f0 0d       	add	r31, r0
   12a7c:	11 24       	eor	r1, r1
   12a7e:	ee 5f       	subi	r30, 0xFE	; 254
   12a80:	f0 4e       	sbci	r31, 0xE0	; 224
   12a82:	c7 a1       	ldd	r28, Z+39	; 0x27
   12a84:	d0 a5       	ldd	r29, Z+40	; 0x28
   12a86:	28 9f       	mul	r18, r24
   12a88:	f0 01       	movw	r30, r0
   12a8a:	29 9f       	mul	r18, r25
   12a8c:	f0 0d       	add	r31, r0
   12a8e:	11 24       	eor	r1, r1
   12a90:	ee 5f       	subi	r30, 0xFE	; 254
   12a92:	f0 4e       	sbci	r31, 0xE0	; 224
   12a94:	07 a1       	ldd	r16, Z+39	; 0x27
   12a96:	10 a5       	ldd	r17, Z+40	; 0x28
   12a98:	f8 01       	movw	r30, r16
   12a9a:	80 81       	ld	r24, Z
   12a9c:	88 83       	st	Y, r24
   12a9e:	81 81       	ldd	r24, Z+1	; 0x01
   12aa0:	89 83       	std	Y+1, r24	; 0x01
   12aa2:	82 81       	ldd	r24, Z+2	; 0x02
   12aa4:	93 81       	ldd	r25, Z+3	; 0x03
   12aa6:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <stralloc>
   12aaa:	9b 83       	std	Y+3, r25	; 0x03
   12aac:	8a 83       	std	Y+2, r24	; 0x02
   12aae:	f8 01       	movw	r30, r16
   12ab0:	84 81       	ldd	r24, Z+4	; 0x04
   12ab2:	95 81       	ldd	r25, Z+5	; 0x05
   12ab4:	9d 83       	std	Y+5, r25	; 0x05
   12ab6:	8c 83       	std	Y+4, r24	; 0x04
   12ab8:	86 81       	ldd	r24, Z+6	; 0x06
   12aba:	97 81       	ldd	r25, Z+7	; 0x07
   12abc:	9f 83       	std	Y+7, r25	; 0x07
   12abe:	8e 83       	std	Y+6, r24	; 0x06
   12ac0:	80 85       	ldd	r24, Z+8	; 0x08
   12ac2:	91 85       	ldd	r25, Z+9	; 0x09
   12ac4:	99 87       	std	Y+9, r25	; 0x09
   12ac6:	88 87       	std	Y+8, r24	; 0x08
   12ac8:	82 85       	ldd	r24, Z+10	; 0x0a
   12aca:	8a 87       	std	Y+10, r24	; 0x0a
   12acc:	83 85       	ldd	r24, Z+11	; 0x0b
   12ace:	8b 87       	std	Y+11, r24	; 0x0b
   12ad0:	84 85       	ldd	r24, Z+12	; 0x0c
   12ad2:	95 85       	ldd	r25, Z+13	; 0x0d
   12ad4:	a6 85       	ldd	r26, Z+14	; 0x0e
   12ad6:	b7 85       	ldd	r27, Z+15	; 0x0f
   12ad8:	8c 87       	std	Y+12, r24	; 0x0c
   12ada:	9d 87       	std	Y+13, r25	; 0x0d
   12adc:	ae 87       	std	Y+14, r26	; 0x0e
   12ade:	bf 87       	std	Y+15, r27	; 0x0f
   12ae0:	80 89       	ldd	r24, Z+16	; 0x10
   12ae2:	91 89       	ldd	r25, Z+17	; 0x11
   12ae4:	99 8b       	std	Y+17, r25	; 0x11
   12ae6:	88 8b       	std	Y+16, r24	; 0x10
   12ae8:	82 89       	ldd	r24, Z+18	; 0x12
   12aea:	8a 8b       	std	Y+18, r24	; 0x12
   12aec:	83 89       	ldd	r24, Z+19	; 0x13
   12aee:	8b 8b       	std	Y+19, r24	; 0x13
   12af0:	84 89       	ldd	r24, Z+20	; 0x14
   12af2:	95 89       	ldd	r25, Z+21	; 0x15
   12af4:	9d 8b       	std	Y+21, r25	; 0x15
   12af6:	8c 8b       	std	Y+20, r24	; 0x14
   12af8:	86 89       	ldd	r24, Z+22	; 0x16
   12afa:	97 89       	ldd	r25, Z+23	; 0x17
   12afc:	9f 8b       	std	Y+23, r25	; 0x17
   12afe:	8e 8b       	std	Y+22, r24	; 0x16
   12b00:	80 8d       	ldd	r24, Z+24	; 0x18
   12b02:	91 8d       	ldd	r25, Z+25	; 0x19
   12b04:	99 8f       	std	Y+25, r25	; 0x19
   12b06:	88 8f       	std	Y+24, r24	; 0x18
   12b08:	82 8d       	ldd	r24, Z+26	; 0x1a
   12b0a:	93 8d       	ldd	r25, Z+27	; 0x1b
   12b0c:	9b 8f       	std	Y+27, r25	; 0x1b
   12b0e:	8a 8f       	std	Y+26, r24	; 0x1a
   12b10:	84 8d       	ldd	r24, Z+28	; 0x1c
   12b12:	8c 8f       	std	Y+28, r24	; 0x1c
   12b14:	85 8d       	ldd	r24, Z+29	; 0x1d
   12b16:	8d 8f       	std	Y+29, r24	; 0x1d
   12b18:	87 8d       	ldd	r24, Z+31	; 0x1f
   12b1a:	90 a1       	ldd	r25, Z+32	; 0x20
   12b1c:	a1 a1       	ldd	r26, Z+33	; 0x21
   12b1e:	b2 a1       	ldd	r27, Z+34	; 0x22
   12b20:	8f 8f       	std	Y+31, r24	; 0x1f
   12b22:	98 a3       	std	Y+32, r25	; 0x20
   12b24:	a9 a3       	std	Y+33, r26	; 0x21
   12b26:	ba a3       	std	Y+34, r27	; 0x22
   12b28:	83 a1       	ldd	r24, Z+35	; 0x23
   12b2a:	8b a3       	std	Y+35, r24	; 0x23
   12b2c:	84 a1       	ldd	r24, Z+36	; 0x24
   12b2e:	95 a1       	ldd	r25, Z+37	; 0x25
   12b30:	9d a3       	std	Y+37, r25	; 0x25
   12b32:	8c a3       	std	Y+36, r24	; 0x24
   12b34:	86 a1       	ldd	r24, Z+38	; 0x26
   12b36:	97 a1       	ldd	r25, Z+39	; 0x27
   12b38:	a0 a5       	ldd	r26, Z+40	; 0x28
   12b3a:	b1 a5       	ldd	r27, Z+41	; 0x29
   12b3c:	8e a3       	std	Y+38, r24	; 0x26
   12b3e:	9f a3       	std	Y+39, r25	; 0x27
   12b40:	a8 a7       	std	Y+40, r26	; 0x28
   12b42:	b9 a7       	std	Y+41, r27	; 0x29
   12b44:	82 a5       	ldd	r24, Z+42	; 0x2a
   12b46:	8a a7       	std	Y+42, r24	; 0x2a
   12b48:	df 91       	pop	r29
   12b4a:	cf 91       	pop	r28
   12b4c:	1f 91       	pop	r17
   12b4e:	0f 91       	pop	r16
   12b50:	08 95       	ret

00012b52 <alloc_device>:
   12b52:	0f 93       	push	r16
   12b54:	1f 93       	push	r17
   12b56:	cf 93       	push	r28
   12b58:	df 93       	push	r29
   12b5a:	ec 01       	movw	r28, r24
   12b5c:	49 de       	rcall	.-878    	; 0x127f0 <find_free>
   12b5e:	8c 01       	movw	r16, r24
   12b60:	0f 3f       	cpi	r16, 0xFF	; 255
   12b62:	8f ef       	ldi	r24, 0xFF	; 255
   12b64:	18 07       	cpc	r17, r24
   12b66:	99 f4       	brne	.+38     	; 0x12b8e <alloc_device+0x3c>
   12b68:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12b6c:	80 ff       	sbrs	r24, 0
   12b6e:	9e c0       	rjmp	.+316    	; 0x12cac <alloc_device+0x15a>
   12b70:	df 93       	push	r29
   12b72:	cf 93       	push	r28
   12b74:	83 e8       	ldi	r24, 0x83	; 131
   12b76:	9f e1       	ldi	r25, 0x1F	; 31
   12b78:	1f 92       	push	r1
   12b7a:	9f 93       	push	r25
   12b7c:	8f 93       	push	r24
   12b7e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12b82:	0f 90       	pop	r0
   12b84:	0f 90       	pop	r0
   12b86:	0f 90       	pop	r0
   12b88:	0f 90       	pop	r0
   12b8a:	0f 90       	pop	r0
   12b8c:	8f c0       	rjmp	.+286    	; 0x12cac <alloc_device+0x15a>
   12b8e:	c2 30       	cpi	r28, 0x02	; 2
   12b90:	d1 05       	cpc	r29, r1
   12b92:	c1 f1       	breq	.+112    	; 0x12c04 <alloc_device+0xb2>
   12b94:	dc f4       	brge	.+54     	; 0x12bcc <alloc_device+0x7a>
   12b96:	c1 30       	cpi	r28, 0x01	; 1
   12b98:	d1 05       	cpc	r29, r1
   12b9a:	09 f0       	breq	.+2      	; 0x12b9e <alloc_device+0x4c>
   12b9c:	6c c0       	rjmp	.+216    	; 0x12c76 <alloc_device+0x124>
   12b9e:	8b e2       	ldi	r24, 0x2B	; 43
   12ba0:	80 9f       	mul	r24, r16
   12ba2:	e0 01       	movw	r28, r0
   12ba4:	81 9f       	mul	r24, r17
   12ba6:	d0 0d       	add	r29, r0
   12ba8:	11 24       	eor	r1, r1
   12baa:	ce 5f       	subi	r28, 0xFE	; 254
   12bac:	d0 4e       	sbci	r29, 0xE0	; 224
   12bae:	81 e0       	ldi	r24, 0x01	; 1
   12bb0:	88 83       	st	Y, r24
   12bb2:	61 e0       	ldi	r22, 0x01	; 1
   12bb4:	70 e0       	ldi	r23, 0x00	; 0
   12bb6:	85 e1       	ldi	r24, 0x15	; 21
   12bb8:	90 e0       	ldi	r25, 0x00	; 0
   12bba:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   12bbe:	98 a7       	std	Y+40, r25	; 0x28
   12bc0:	8f a3       	std	Y+39, r24	; 0x27
   12bc2:	61 e0       	ldi	r22, 0x01	; 1
   12bc4:	70 e0       	ldi	r23, 0x00	; 0
   12bc6:	88 e1       	ldi	r24, 0x18	; 24
   12bc8:	90 e0       	ldi	r25, 0x00	; 0
   12bca:	50 c0       	rjmp	.+160    	; 0x12c6c <alloc_device+0x11a>
   12bcc:	c3 30       	cpi	r28, 0x03	; 3
   12bce:	d1 05       	cpc	r29, r1
   12bd0:	81 f1       	breq	.+96     	; 0x12c32 <alloc_device+0xe0>
   12bd2:	c4 30       	cpi	r28, 0x04	; 4
   12bd4:	d1 05       	cpc	r29, r1
   12bd6:	09 f0       	breq	.+2      	; 0x12bda <alloc_device+0x88>
   12bd8:	4e c0       	rjmp	.+156    	; 0x12c76 <alloc_device+0x124>
   12bda:	8b e2       	ldi	r24, 0x2B	; 43
   12bdc:	80 9f       	mul	r24, r16
   12bde:	e0 01       	movw	r28, r0
   12be0:	81 9f       	mul	r24, r17
   12be2:	d0 0d       	add	r29, r0
   12be4:	11 24       	eor	r1, r1
   12be6:	ce 5f       	subi	r28, 0xFE	; 254
   12be8:	d0 4e       	sbci	r29, 0xE0	; 224
   12bea:	84 e0       	ldi	r24, 0x04	; 4
   12bec:	88 83       	st	Y, r24
   12bee:	61 e0       	ldi	r22, 0x01	; 1
   12bf0:	70 e0       	ldi	r23, 0x00	; 0
   12bf2:	8b e0       	ldi	r24, 0x0B	; 11
   12bf4:	90 e0       	ldi	r25, 0x00	; 0
   12bf6:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   12bfa:	98 a7       	std	Y+40, r25	; 0x28
   12bfc:	8f a3       	std	Y+39, r24	; 0x27
   12bfe:	1a a6       	std	Y+42, r1	; 0x2a
   12c00:	19 a6       	std	Y+41, r1	; 0x29
   12c02:	54 c0       	rjmp	.+168    	; 0x12cac <alloc_device+0x15a>
   12c04:	8b e2       	ldi	r24, 0x2B	; 43
   12c06:	80 9f       	mul	r24, r16
   12c08:	e0 01       	movw	r28, r0
   12c0a:	81 9f       	mul	r24, r17
   12c0c:	d0 0d       	add	r29, r0
   12c0e:	11 24       	eor	r1, r1
   12c10:	ce 5f       	subi	r28, 0xFE	; 254
   12c12:	d0 4e       	sbci	r29, 0xE0	; 224
   12c14:	82 e0       	ldi	r24, 0x02	; 2
   12c16:	88 83       	st	Y, r24
   12c18:	61 e0       	ldi	r22, 0x01	; 1
   12c1a:	70 e0       	ldi	r23, 0x00	; 0
   12c1c:	82 e3       	ldi	r24, 0x32	; 50
   12c1e:	90 e0       	ldi	r25, 0x00	; 0
   12c20:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   12c24:	98 a7       	std	Y+40, r25	; 0x28
   12c26:	8f a3       	std	Y+39, r24	; 0x27
   12c28:	61 e0       	ldi	r22, 0x01	; 1
   12c2a:	70 e0       	ldi	r23, 0x00	; 0
   12c2c:	86 e1       	ldi	r24, 0x16	; 22
   12c2e:	90 e0       	ldi	r25, 0x00	; 0
   12c30:	1d c0       	rjmp	.+58     	; 0x12c6c <alloc_device+0x11a>
   12c32:	8b e2       	ldi	r24, 0x2B	; 43
   12c34:	80 9f       	mul	r24, r16
   12c36:	e0 01       	movw	r28, r0
   12c38:	81 9f       	mul	r24, r17
   12c3a:	d0 0d       	add	r29, r0
   12c3c:	11 24       	eor	r1, r1
   12c3e:	ce 5f       	subi	r28, 0xFE	; 254
   12c40:	d0 4e       	sbci	r29, 0xE0	; 224
   12c42:	83 e0       	ldi	r24, 0x03	; 3
   12c44:	88 83       	st	Y, r24
   12c46:	61 e0       	ldi	r22, 0x01	; 1
   12c48:	70 e0       	ldi	r23, 0x00	; 0
   12c4a:	82 e3       	ldi	r24, 0x32	; 50
   12c4c:	90 e0       	ldi	r25, 0x00	; 0
   12c4e:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   12c52:	98 a7       	std	Y+40, r25	; 0x28
   12c54:	8f a3       	std	Y+39, r24	; 0x27
   12c56:	61 e0       	ldi	r22, 0x01	; 1
   12c58:	70 e0       	ldi	r23, 0x00	; 0
   12c5a:	86 e1       	ldi	r24, 0x16	; 22
   12c5c:	90 e0       	ldi	r25, 0x00	; 0
   12c5e:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   12c62:	9a a7       	std	Y+42, r25	; 0x2a
   12c64:	89 a7       	std	Y+41, r24	; 0x29
   12c66:	c8 01       	movw	r24, r16
   12c68:	fa de       	rcall	.-524    	; 0x12a5e <SS80_Set_Defaults>
   12c6a:	20 c0       	rjmp	.+64     	; 0x12cac <alloc_device+0x15a>
   12c6c:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   12c70:	9a a7       	std	Y+42, r25	; 0x2a
   12c72:	89 a7       	std	Y+41, r24	; 0x29
   12c74:	1b c0       	rjmp	.+54     	; 0x12cac <alloc_device+0x15a>
   12c76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12c7a:	80 ff       	sbrs	r24, 0
   12c7c:	15 c0       	rjmp	.+42     	; 0x12ca8 <alloc_device+0x156>
   12c7e:	ce 01       	movw	r24, r28
   12c80:	9e dd       	rcall	.-1220   	; 0x127be <type_to_str>
   12c82:	9f 93       	push	r25
   12c84:	8f 93       	push	r24
   12c86:	df 93       	push	r29
   12c88:	cf 93       	push	r28
   12c8a:	81 e6       	ldi	r24, 0x61	; 97
   12c8c:	9f e1       	ldi	r25, 0x1F	; 31
   12c8e:	1f 92       	push	r1
   12c90:	9f 93       	push	r25
   12c92:	8f 93       	push	r24
   12c94:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12c98:	8d b7       	in	r24, 0x3d	; 61
   12c9a:	9e b7       	in	r25, 0x3e	; 62
   12c9c:	07 96       	adiw	r24, 0x07	; 7
   12c9e:	0f b6       	in	r0, 0x3f	; 63
   12ca0:	f8 94       	cli
   12ca2:	9e bf       	out	0x3e, r25	; 62
   12ca4:	0f be       	out	0x3f, r0	; 63
   12ca6:	8d bf       	out	0x3d, r24	; 61
   12ca8:	0f ef       	ldi	r16, 0xFF	; 255
   12caa:	1f ef       	ldi	r17, 0xFF	; 255
   12cac:	c8 01       	movw	r24, r16
   12cae:	df 91       	pop	r29
   12cb0:	cf 91       	pop	r28
   12cb2:	1f 91       	pop	r17
   12cb4:	0f 91       	pop	r16
   12cb6:	08 95       	ret

00012cb8 <init_Devices>:
   12cb8:	cf 93       	push	r28
   12cba:	df 93       	push	r29
   12cbc:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <stack_ind+0x1>
   12cc0:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <stack_ind>
   12cc4:	e2 e0       	ldi	r30, 0x02	; 2
   12cc6:	ff e1       	ldi	r31, 0x1F	; 31
   12cc8:	9f ef       	ldi	r25, 0xFF	; 255
   12cca:	80 e2       	ldi	r24, 0x20	; 32
   12ccc:	10 82       	st	Z, r1
   12cce:	11 82       	std	Z+1, r1	; 0x01
   12cd0:	92 83       	std	Z+2, r25	; 0x02
   12cd2:	13 82       	std	Z+3, r1	; 0x03
   12cd4:	14 82       	std	Z+4, r1	; 0x04
   12cd6:	15 82       	std	Z+5, r1	; 0x05
   12cd8:	16 82       	std	Z+6, r1	; 0x06
   12cda:	df 01       	movw	r26, r30
   12cdc:	17 96       	adiw	r26, 0x07	; 7
   12cde:	ed 01       	movw	r28, r26
   12ce0:	28 2f       	mov	r18, r24
   12ce2:	19 92       	st	Y+, r1
   12ce4:	2a 95       	dec	r18
   12ce6:	e9 f7       	brne	.-6      	; 0x12ce2 <init_Devices+0x2a>
   12ce8:	10 a6       	std	Z+40, r1	; 0x28
   12cea:	17 a2       	std	Z+39, r1	; 0x27
   12cec:	12 a6       	std	Z+42, r1	; 0x2a
   12cee:	11 a6       	std	Z+41, r1	; 0x29
   12cf0:	bb 96       	adiw	r30, 0x2b	; 43
   12cf2:	c1 e2       	ldi	r28, 0x21	; 33
   12cf4:	e6 30       	cpi	r30, 0x06	; 6
   12cf6:	fc 07       	cpc	r31, r28
   12cf8:	49 f7       	brne	.-46     	; 0x12ccc <init_Devices+0x14>
   12cfa:	df 91       	pop	r29
   12cfc:	cf 91       	pop	r28
   12cfe:	08 95       	ret

00012d00 <push_state>:
   12d00:	20 91 8b 19 	lds	r18, 0x198B	; 0x80198b <stack_ind>
   12d04:	30 91 8c 19 	lds	r19, 0x198C	; 0x80198c <stack_ind+0x1>
   12d08:	25 30       	cpi	r18, 0x05	; 5
   12d0a:	31 05       	cpc	r19, r1
   12d0c:	7c f4       	brge	.+30     	; 0x12d2c <push_state+0x2c>
   12d0e:	a9 01       	movw	r20, r18
   12d10:	4f 5f       	subi	r20, 0xFF	; 255
   12d12:	5f 4f       	sbci	r21, 0xFF	; 255
   12d14:	50 93 8c 19 	sts	0x198C, r21	; 0x80198c <stack_ind+0x1>
   12d18:	40 93 8b 19 	sts	0x198B, r20	; 0x80198b <stack_ind>
   12d1c:	22 0f       	add	r18, r18
   12d1e:	33 1f       	adc	r19, r19
   12d20:	f9 01       	movw	r30, r18
   12d22:	ef 57       	subi	r30, 0x7F	; 127
   12d24:	f6 4e       	sbci	r31, 0xE6	; 230
   12d26:	80 83       	st	Z, r24
   12d28:	91 83       	std	Z+1, r25	; 0x01
   12d2a:	08 95       	ret
   12d2c:	80 e0       	ldi	r24, 0x00	; 0
   12d2e:	90 e0       	ldi	r25, 0x00	; 0
   12d30:	08 95       	ret

00012d32 <pop_state>:
   12d32:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <stack_ind>
   12d36:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <stack_ind+0x1>
   12d3a:	18 16       	cp	r1, r24
   12d3c:	19 06       	cpc	r1, r25
   12d3e:	6c f4       	brge	.+26     	; 0x12d5a <pop_state+0x28>
   12d40:	01 97       	sbiw	r24, 0x01	; 1
   12d42:	90 93 8c 19 	sts	0x198C, r25	; 0x80198c <stack_ind+0x1>
   12d46:	80 93 8b 19 	sts	0x198B, r24	; 0x80198b <stack_ind>
   12d4a:	88 0f       	add	r24, r24
   12d4c:	99 1f       	adc	r25, r25
   12d4e:	fc 01       	movw	r30, r24
   12d50:	ef 57       	subi	r30, 0x7F	; 127
   12d52:	f6 4e       	sbci	r31, 0xE6	; 230
   12d54:	80 81       	ld	r24, Z
   12d56:	91 81       	ldd	r25, Z+1	; 0x01
   12d58:	08 95       	ret
   12d5a:	80 e0       	ldi	r24, 0x00	; 0
   12d5c:	90 e0       	ldi	r25, 0x00	; 0
   12d5e:	08 95       	ret

00012d60 <set_Config_Defaults>:
   12d60:	08 95       	ret

00012d62 <hpdir_set_device>:
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12d62:	2b e2       	ldi	r18, 0x2B	; 43
   12d64:	28 9f       	mul	r18, r24
   12d66:	f0 01       	movw	r30, r0
   12d68:	29 9f       	mul	r18, r25
   12d6a:	f0 0d       	add	r31, r0
   12d6c:	11 24       	eor	r1, r1
   12d6e:	ee 5f       	subi	r30, 0xFE	; 254
   12d70:	f0 4e       	sbci	r31, 0xE0	; 224
   12d72:	20 81       	ld	r18, Z
   12d74:	23 30       	cpi	r18, 0x03	; 3
   12d76:	a9 f5       	brne	.+106    	; 0x12de2 <hpdir_set_device+0x80>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12d78:	07 a0       	ldd	r0, Z+39	; 0x27
   12d7a:	f0 a5       	ldd	r31, Z+40	; 0x28
   12d7c:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12d7e:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <hpdir+0x80>
   12d82:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <hpdir+0x81>
   12d86:	35 83       	std	Z+5, r19	; 0x05
   12d88:	24 83       	std	Z+4, r18	; 0x04
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12d8a:	40 91 92 21 	lds	r20, 0x2192	; 0x802192 <hpdir+0x8c>
   12d8e:	50 91 93 21 	lds	r21, 0x2193	; 0x802193 <hpdir+0x8d>
   12d92:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <hpdir+0x8e>
   12d96:	70 91 95 21 	lds	r23, 0x2195	; 0x802195 <hpdir+0x8f>
   12d9a:	44 87       	std	Z+12, r20	; 0x0c
   12d9c:	55 87       	std	Z+13, r21	; 0x0d
   12d9e:	66 87       	std	Z+14, r22	; 0x0e
   12da0:	77 87       	std	Z+15, r23	; 0x0f
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12da2:	20 91 a6 21 	lds	r18, 0x21A6	; 0x8021a6 <hpdir+0xa0>
   12da6:	30 91 a7 21 	lds	r19, 0x21A7	; 0x8021a7 <hpdir+0xa1>
   12daa:	31 8b       	std	Z+17, r19	; 0x11
   12dac:	20 8b       	std	Z+16, r18	; 0x10

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12dae:	17 8e       	std	Z+31, r1	; 0x1f
   12db0:	10 a2       	std	Z+32, r1	; 0x20
   12db2:	11 a2       	std	Z+33, r1	; 0x21
   12db4:	12 a2       	std	Z+34, r1	; 0x22
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12db6:	13 a2       	std	Z+35, r1	; 0x23
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12db8:	15 a2       	std	Z+37, r1	; 0x25
   12dba:	14 a2       	std	Z+36, r1	; 0x24

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12dbc:	40 91 b2 21 	lds	r20, 0x21B2	; 0x8021b2 <hpdir+0xac>
   12dc0:	50 91 b3 21 	lds	r21, 0x21B3	; 0x8021b3 <hpdir+0xad>
   12dc4:	60 91 b4 21 	lds	r22, 0x21B4	; 0x8021b4 <hpdir+0xae>
   12dc8:	70 91 b5 21 	lds	r23, 0x21B5	; 0x8021b5 <hpdir+0xaf>
   12dcc:	41 50       	subi	r20, 0x01	; 1
   12dce:	51 09       	sbc	r21, r1
   12dd0:	61 09       	sbc	r22, r1
   12dd2:	71 09       	sbc	r23, r1
   12dd4:	46 a3       	std	Z+38, r20	; 0x26
   12dd6:	57 a3       	std	Z+39, r21	; 0x27
   12dd8:	60 a7       	std	Z+40, r22	; 0x28
   12dda:	71 a7       	std	Z+41, r23	; 0x29
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12ddc:	e0 e0       	ldi	r30, 0x00	; 0
   12dde:	f0 e0       	ldi	r31, 0x00	; 0
   12de0:	11 c0       	rjmp	.+34     	; 0x12e04 <hpdir_set_device+0xa2>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12de2:	21 30       	cpi	r18, 0x01	; 1
   12de4:	21 f4       	brne	.+8      	; 0x12dee <hpdir_set_device+0x8c>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12de6:	07 a0       	ldd	r0, Z+39	; 0x27
   12de8:	f0 a5       	ldd	r31, Z+40	; 0x28
   12dea:	e0 2d       	mov	r30, r0
   12dec:	0b c0       	rjmp	.+22     	; 0x12e04 <hpdir_set_device+0xa2>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12dee:	8c ee       	ldi	r24, 0xEC	; 236
   12df0:	9e e1       	ldi	r25, 0x1E	; 30
   12df2:	1f 92       	push	r1
   12df4:	9f 93       	push	r25
   12df6:	8f 93       	push	r24
   12df8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
		return;
   12dfc:	0f 90       	pop	r0
   12dfe:	0f 90       	pop	r0
   12e00:	0f 90       	pop	r0
   12e02:	08 95       	ret

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12e04:	2b e2       	ldi	r18, 0x2B	; 43
   12e06:	28 9f       	mul	r18, r24
   12e08:	d0 01       	movw	r26, r0
   12e0a:	29 9f       	mul	r18, r25
   12e0c:	b0 0d       	add	r27, r0
   12e0e:	11 24       	eor	r1, r1
   12e10:	ae 5f       	subi	r26, 0xFE	; 254
   12e12:	b0 4e       	sbci	r27, 0xE0	; 224
   12e14:	2c 91       	ld	r18, X
   12e16:	21 30       	cpi	r18, 0x01	; 1
   12e18:	f1 f4       	brne	.+60     	; 0x12e56 <hpdir_set_device+0xf4>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12e1a:	20 91 86 21 	lds	r18, 0x2186	; 0x802186 <hpdir+0x80>
   12e1e:	30 91 87 21 	lds	r19, 0x2187	; 0x802187 <hpdir+0x81>
   12e22:	35 83       	std	Z+5, r19	; 0x05
   12e24:	24 83       	std	Z+4, r18	; 0x04
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12e26:	20 91 a6 21 	lds	r18, 0x21A6	; 0x8021a6 <hpdir+0xa0>
   12e2a:	30 91 a7 21 	lds	r19, 0x21A7	; 0x8021a7 <hpdir+0xa1>
   12e2e:	37 83       	std	Z+7, r19	; 0x07
   12e30:	26 83       	std	Z+6, r18	; 0x06
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12e32:	20 91 a2 21 	lds	r18, 0x21A2	; 0x8021a2 <hpdir+0x9c>
   12e36:	30 91 a3 21 	lds	r19, 0x21A3	; 0x8021a3 <hpdir+0x9d>
   12e3a:	31 87       	std	Z+9, r19	; 0x09
   12e3c:	20 87       	std	Z+8, r18	; 0x08
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12e3e:	20 91 9e 21 	lds	r18, 0x219E	; 0x80219e <hpdir+0x98>
   12e42:	30 91 9f 21 	lds	r19, 0x219F	; 0x80219f <hpdir+0x99>
   12e46:	33 87       	std	Z+11, r19	; 0x0b
   12e48:	22 87       	std	Z+10, r18	; 0x0a
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12e4a:	20 91 9a 21 	lds	r18, 0x219A	; 0x80219a <hpdir+0x94>
   12e4e:	30 91 9b 21 	lds	r19, 0x219B	; 0x80219b <hpdir+0x95>
   12e52:	35 87       	std	Z+13, r19	; 0x0d
   12e54:	24 87       	std	Z+12, r18	; 0x0c
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12e56:	4b e2       	ldi	r20, 0x2B	; 43
   12e58:	48 9f       	mul	r20, r24
   12e5a:	90 01       	movw	r18, r0
   12e5c:	49 9f       	mul	r20, r25
   12e5e:	30 0d       	add	r19, r0
   12e60:	11 24       	eor	r1, r1
   12e62:	f9 01       	movw	r30, r18
   12e64:	ee 5f       	subi	r30, 0xFE	; 254
   12e66:	f0 4e       	sbci	r31, 0xE0	; 224
   12e68:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <hpdir+0xac>
   12e6c:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <hpdir+0xad>
   12e70:	a0 91 b4 21 	lds	r26, 0x21B4	; 0x8021b4 <hpdir+0xae>
   12e74:	b0 91 b5 21 	lds	r27, 0x21B5	; 0x8021b5 <hpdir+0xaf>
   12e78:	83 83       	std	Z+3, r24	; 0x03
   12e7a:	94 83       	std	Z+4, r25	; 0x04
   12e7c:	a5 83       	std	Z+5, r26	; 0x05
   12e7e:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12e80:	4e e1       	ldi	r20, 0x1E	; 30
   12e82:	50 e0       	ldi	r21, 0x00	; 0
   12e84:	66 e0       	ldi	r22, 0x06	; 6
   12e86:	71 e2       	ldi	r23, 0x21	; 33
   12e88:	c9 01       	movw	r24, r18
   12e8a:	87 5f       	subi	r24, 0xF7	; 247
   12e8c:	90 4e       	sbci	r25, 0xE0	; 224
   12e8e:	0c 94 4a 33 	jmp	0x6694	; 0x6694 <strncpy>
   12e92:	08 95       	ret

00012e94 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12e94:	cf 93       	push	r28
   12e96:	df 93       	push	r29
   12e98:	ec 01       	movw	r28, r24
   12e9a:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12e9c:	41 e0       	ldi	r20, 0x01	; 1
   12e9e:	50 e0       	ldi	r21, 0x00	; 0
   12ea0:	60 e0       	ldi	r22, 0x00	; 0
   12ea2:	70 e0       	ldi	r23, 0x00	; 0
   12ea4:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <hpdir_find_drive>
   12ea8:	89 2b       	or	r24, r25
   12eaa:	11 f0       	breq	.+4      	; 0x12eb0 <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12eac:	ce 01       	movw	r24, r28
   12eae:	59 df       	rcall	.-334    	; 0x12d62 <hpdir_set_device>
}
   12eb0:	df 91       	pop	r29
   12eb2:	cf 91       	pop	r28
   12eb4:	08 95       	ret

00012eb6 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12eb6:	4f 92       	push	r4
   12eb8:	5f 92       	push	r5
   12eba:	6f 92       	push	r6
   12ebc:	7f 92       	push	r7
   12ebe:	8f 92       	push	r8
   12ec0:	af 92       	push	r10
   12ec2:	bf 92       	push	r11
   12ec4:	cf 92       	push	r12
   12ec6:	df 92       	push	r13
   12ec8:	ef 92       	push	r14
   12eca:	0f 93       	push	r16
   12ecc:	1f 93       	push	r17
   12ece:	cf 93       	push	r28
   12ed0:	df 93       	push	r29
   12ed2:	c2 e0       	ldi	r28, 0x02	; 2
   12ed4:	df e1       	ldi	r29, 0x1F	; 31
   12ed6:	86 e0       	ldi	r24, 0x06	; 6
   12ed8:	48 2e       	mov	r4, r24
   12eda:	81 e2       	ldi	r24, 0x21	; 33
   12edc:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12ede:	a1 2c       	mov	r10, r1
   12ee0:	bb 24       	eor	r11, r11
   12ee2:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12ee4:	8f e7       	ldi	r24, 0x7F	; 127
   12ee6:	9e e1       	ldi	r25, 0x1E	; 30
   12ee8:	6c 01       	movw	r12, r24
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12eea:	86 eb       	ldi	r24, 0xB6	; 182
   12eec:	9e e1       	ldi	r25, 0x1E	; 30
   12eee:	3c 01       	movw	r6, r24
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12ef0:	88 81       	ld	r24, Y
   12ef2:	88 23       	and	r24, r24
   12ef4:	09 f4       	brne	.+2      	; 0x12ef8 <Post_Config+0x42>
   12ef6:	5d c0       	rjmp	.+186    	; 0x12fb2 <Post_Config+0xfc>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12ef8:	83 30       	cpi	r24, 0x03	; 3
   12efa:	11 f5       	brne	.+68     	; 0x12f40 <Post_Config+0x8a>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12efc:	0f a1       	ldd	r16, Y+39	; 0x27
   12efe:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12f00:	f8 01       	movw	r30, r16
   12f02:	80 89       	ldd	r24, Z+16	; 0x10
   12f04:	91 89       	ldd	r25, Z+17	; 0x11
   12f06:	81 15       	cp	r24, r1
   12f08:	91 40       	sbci	r25, 0x01	; 1
   12f0a:	71 f0       	breq	.+28     	; 0x12f28 <Post_Config+0x72>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12f0c:	ce 01       	movw	r24, r28
   12f0e:	07 96       	adiw	r24, 0x07	; 7
   12f10:	9f 93       	push	r25
   12f12:	8f 93       	push	r24
   12f14:	1f 92       	push	r1
   12f16:	7f 92       	push	r7
   12f18:	6f 92       	push	r6
   12f1a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12f1e:	0f 90       	pop	r0
   12f20:	0f 90       	pop	r0
   12f22:	0f 90       	pop	r0
   12f24:	0f 90       	pop	r0
   12f26:	0f 90       	pop	r0
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
			Devices[i].BLOCKS = sectors;
   12f28:	f8 01       	movw	r30, r16
   12f2a:	86 a1       	ldd	r24, Z+38	; 0x26
   12f2c:	97 a1       	ldd	r25, Z+39	; 0x27
   12f2e:	a0 a5       	ldd	r26, Z+40	; 0x28
   12f30:	b1 a5       	ldd	r27, Z+41	; 0x29
   12f32:	01 96       	adiw	r24, 0x01	; 1
   12f34:	a1 1d       	adc	r26, r1
   12f36:	b1 1d       	adc	r27, r1
   12f38:	8b 83       	std	Y+3, r24	; 0x03
   12f3a:	9c 83       	std	Y+4, r25	; 0x04
   12f3c:	ad 83       	std	Y+5, r26	; 0x05
   12f3e:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12f40:	88 81       	ld	r24, Y
   12f42:	81 30       	cpi	r24, 0x01	; 1
   12f44:	b1 f5       	brne	.+108    	; 0x12fb2 <Post_Config+0xfc>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12f46:	0f a1       	ldd	r16, Y+39	; 0x27
   12f48:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12f4a:	f8 01       	movw	r30, r16
   12f4c:	86 81       	ldd	r24, Z+6	; 0x06
   12f4e:	97 81       	ldd	r25, Z+7	; 0x07
   12f50:	81 15       	cp	r24, r1
   12f52:	91 40       	sbci	r25, 0x01	; 1
   12f54:	89 f0       	breq	.+34     	; 0x12f78 <Post_Config+0xc2>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12f56:	f8 01       	movw	r30, r16
   12f58:	b7 82       	std	Z+7, r11	; 0x07
   12f5a:	a6 82       	std	Z+6, r10	; 0x06
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12f5c:	ce 01       	movw	r24, r28
   12f5e:	07 96       	adiw	r24, 0x07	; 7
   12f60:	9f 93       	push	r25
   12f62:	8f 93       	push	r24
   12f64:	1f 92       	push	r1
   12f66:	df 92       	push	r13
   12f68:	cf 92       	push	r12
   12f6a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   12f6e:	0f 90       	pop	r0
   12f70:	0f 90       	pop	r0
   12f72:	0f 90       	pop	r0
   12f74:	0f 90       	pop	r0
   12f76:	0f 90       	pop	r0
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12f78:	f8 01       	movw	r30, r16
   12f7a:	20 85       	ldd	r18, Z+8	; 0x08
   12f7c:	31 85       	ldd	r19, Z+9	; 0x09
   12f7e:	82 85       	ldd	r24, Z+10	; 0x0a
   12f80:	93 85       	ldd	r25, Z+11	; 0x0b
   12f82:	28 9f       	mul	r18, r24
   12f84:	a0 01       	movw	r20, r0
   12f86:	29 9f       	mul	r18, r25
   12f88:	50 0d       	add	r21, r0
   12f8a:	38 9f       	mul	r19, r24
   12f8c:	50 0d       	add	r21, r0
   12f8e:	11 24       	eor	r1, r1
   12f90:	24 85       	ldd	r18, Z+12	; 0x0c
   12f92:	35 85       	ldd	r19, Z+13	; 0x0d
   12f94:	42 9f       	mul	r20, r18
   12f96:	c0 01       	movw	r24, r0
   12f98:	43 9f       	mul	r20, r19
   12f9a:	90 0d       	add	r25, r0
   12f9c:	52 9f       	mul	r21, r18
   12f9e:	90 0d       	add	r25, r0
   12fa0:	11 24       	eor	r1, r1
   12fa2:	09 2e       	mov	r0, r25
   12fa4:	00 0c       	add	r0, r0
   12fa6:	aa 0b       	sbc	r26, r26
   12fa8:	bb 0b       	sbc	r27, r27
   12faa:	8b 83       	std	Y+3, r24	; 0x03
   12fac:	9c 83       	std	Y+4, r25	; 0x04
   12fae:	ad 83       	std	Y+5, r26	; 0x05
   12fb0:	be 83       	std	Y+6, r27	; 0x06
   12fb2:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12fb4:	4c 16       	cp	r4, r28
   12fb6:	5d 06       	cpc	r5, r29
   12fb8:	09 f0       	breq	.+2      	; 0x12fbc <Post_Config+0x106>
   12fba:	9a cf       	rjmp	.-204    	; 0x12ef0 <Post_Config+0x3a>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12fbc:	df 91       	pop	r29
   12fbe:	cf 91       	pop	r28
   12fc0:	1f 91       	pop	r17
   12fc2:	0f 91       	pop	r16
   12fc4:	ef 90       	pop	r14
   12fc6:	df 90       	pop	r13
   12fc8:	cf 90       	pop	r12
   12fca:	bf 90       	pop	r11
   12fcc:	af 90       	pop	r10
   12fce:	8f 90       	pop	r8
   12fd0:	7f 90       	pop	r7
   12fd2:	6f 90       	pop	r6
   12fd4:	5f 90       	pop	r5
   12fd6:	4f 90       	pop	r4
   12fd8:	08 95       	ret

00012fda <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12fda:	ac e9       	ldi	r26, 0x9C	; 156
   12fdc:	b1 e0       	ldi	r27, 0x01	; 1
   12fde:	e3 ef       	ldi	r30, 0xF3	; 243
   12fe0:	f7 e9       	ldi	r31, 0x97	; 151
   12fe2:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   12fe6:	18 2f       	mov	r17, r24
    char *ptr;
    char str[128];
    char token[128];
    char arg[128];

    init_Devices();
   12fe8:	09 2f       	mov	r16, r25

    lines = 0;
   12fea:	66 de       	rcall	.-820    	; 0x12cb8 <init_Devices>
   12fec:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <lines+0x1>
   12ff0:	10 92 75 19 	sts	0x1975, r1	; 0x801975 <lines>

    printf("Reading: %s\n", name);
   12ff4:	0f 93       	push	r16
   12ff6:	1f 93       	push	r17
   12ff8:	82 e7       	ldi	r24, 0x72	; 114
   12ffa:	9e e1       	ldi	r25, 0x1E	; 30
   12ffc:	1f 92       	push	r1
   12ffe:	9f 93       	push	r25
   13000:	8f 93       	push	r24
   13002:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    cfg = fopen(name, "rb");
   13006:	68 e8       	ldi	r22, 0x88	; 136
   13008:	78 e0       	ldi	r23, 0x08	; 8
   1300a:	81 2f       	mov	r24, r17
   1300c:	90 2f       	mov	r25, r16
   1300e:	0e 94 05 80 	call	0x1000a	; 0x1000a <fopen>
   13012:	c7 57       	subi	r28, 0x77	; 119
   13014:	de 4f       	sbci	r29, 0xFE	; 254
   13016:	99 83       	std	Y+1, r25	; 0x01
   13018:	88 83       	st	Y, r24
   1301a:	c9 58       	subi	r28, 0x89	; 137
    if(cfg == NULL)
   1301c:	d1 40       	sbci	r29, 0x01	; 1
   1301e:	0f 90       	pop	r0
   13020:	0f 90       	pop	r0
   13022:	0f 90       	pop	r0
   13024:	0f 90       	pop	r0
   13026:	0f 90       	pop	r0
   13028:	89 2b       	or	r24, r25
   1302a:	09 f4       	brne	.+2      	; 0x1302e <Read_Config+0x54>
   1302c:	5b c0       	rjmp	.+182    	; 0x130e4 <Read_Config+0x10a>
   1302e:	cf 57       	subi	r28, 0x7F	; 127
   13030:	de 4f       	sbci	r29, 0xFE	; 254
   13032:	19 82       	std	Y+1, r1	; 0x01
   13034:	18 82       	st	Y, r1
   13036:	c1 58       	subi	r28, 0x81	; 129
   13038:	d1 40       	sbci	r29, 0x01	; 1
   1303a:	81 2c       	mov	r8, r1
   1303c:	91 2c       	mov	r9, r1
   1303e:	c9 57       	subi	r28, 0x79	; 121
   13040:	de 4f       	sbci	r29, 0xFE	; 254
   13042:	19 82       	std	Y+1, r1	; 0x01
   13044:	18 82       	st	Y, r1
   13046:	c7 58       	subi	r28, 0x87	; 135
   13048:	d1 40       	sbci	r29, 0x01	; 1
   1304a:	a1 2c       	mov	r10, r1
   1304c:	b1 2c       	mov	r11, r1
   1304e:	e1 2c       	mov	r14, r1
   13050:	f1 2c       	mov	r15, r1
   13052:	c1 2c       	mov	r12, r1
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13054:	d1 2c       	mov	r13, r1
   13056:	1e 01       	movw	r2, r28
   13058:	21 e0       	ldi	r18, 0x01	; 1
   1305a:	22 0e       	add	r2, r18
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   1305c:	32 1e       	adc	r3, r18
   1305e:	85 ee       	ldi	r24, 0xE5	; 229
   13060:	99 e1       	ldi	r25, 0x19	; 25
   13062:	9c 01       	movw	r18, r24
   13064:	40 e0       	ldi	r20, 0x00	; 0
   13066:	c5 57       	subi	r28, 0x75	; 117
   13068:	de 4f       	sbci	r29, 0xFE	; 254
   1306a:	28 83       	st	Y, r18
   1306c:	39 83       	std	Y+1, r19	; 0x01
   1306e:	4a 83       	std	Y+2, r20	; 0x02
   13070:	cb 58       	subi	r28, 0x8B	; 139
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   13072:	d1 40       	sbci	r29, 0x01	; 1
   13074:	8b e0       	ldi	r24, 0x0B	; 11
   13076:	9a e1       	ldi	r25, 0x1A	; 26
   13078:	9c 01       	movw	r18, r24
   1307a:	40 e0       	ldi	r20, 0x00	; 0
   1307c:	c2 57       	subi	r28, 0x72	; 114
   1307e:	de 4f       	sbci	r29, 0xFE	; 254
   13080:	28 83       	st	Y, r18
   13082:	39 83       	std	Y+1, r19	; 0x01
   13084:	4a 83       	std	Y+2, r20	; 0x02
   13086:	ce 58       	subi	r28, 0x8E	; 142
        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
            {
                if(val.w > 0x1000)
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   13088:	d1 40       	sbci	r29, 0x01	; 1
   1308a:	8b e3       	ldi	r24, 0x3B	; 59
   1308c:	9a e1       	ldi	r25, 0x1A	; 26
   1308e:	9c 01       	movw	r18, r24
   13090:	40 e0       	ldi	r20, 0x00	; 0
   13092:	cf 56       	subi	r28, 0x6F	; 111
   13094:	de 4f       	sbci	r29, 0xFE	; 254
   13096:	28 83       	st	Y, r18
   13098:	39 83       	std	Y+1, r19	; 0x01
   1309a:	4a 83       	std	Y+2, r20	; 0x02
   1309c:	c1 59       	subi	r28, 0x91	; 145
            {
                AMIGOp->CONFIG.ID = val.w;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   1309e:	d1 40       	sbci	r29, 0x01	; 1
   130a0:	8a e7       	ldi	r24, 0x7A	; 122
   130a2:	9a e1       	ldi	r25, 0x1A	; 26
   130a4:	9c 01       	movw	r18, r24
   130a6:	40 e0       	ldi	r20, 0x00	; 0
   130a8:	cc 56       	subi	r28, 0x6C	; 108
   130aa:	de 4f       	sbci	r29, 0xFE	; 254
   130ac:	28 83       	st	Y, r18
   130ae:	39 83       	std	Y+1, r19	; 0x01
   130b0:	4a 83       	std	Y+2, r20	; 0x02
   130b2:	c4 59       	subi	r28, 0x94	; 148
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   130b4:	d1 40       	sbci	r29, 0x01	; 1
   130b6:	89 ea       	ldi	r24, 0xA9	; 169
   130b8:	9a e1       	ldi	r25, 0x1A	; 26
   130ba:	9c 01       	movw	r18, r24
   130bc:	40 e0       	ldi	r20, 0x00	; 0
   130be:	c9 56       	subi	r28, 0x69	; 105
   130c0:	de 4f       	sbci	r29, 0xFE	; 254
   130c2:	28 83       	st	Y, r18
   130c4:	39 83       	std	Y+1, r19	; 0x01
   130c6:	4a 83       	std	Y+2, r20	; 0x02
   130c8:	c7 59       	subi	r28, 0x97	; 151
            }
            else if( MATCHI (token,"PPR") )
            {
                if(val.b > 7)
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   130ca:	d1 40       	sbci	r29, 0x01	; 1
   130cc:	89 ed       	ldi	r24, 0xD9	; 217
   130ce:	9a e1       	ldi	r25, 0x1A	; 26
   130d0:	9c 01       	movw	r18, r24
   130d2:	40 e0       	ldi	r20, 0x00	; 0
   130d4:	c6 56       	subi	r28, 0x66	; 102
   130d6:	de 4f       	sbci	r29, 0xFE	; 254
   130d8:	28 83       	st	Y, r18
   130da:	39 83       	std	Y+1, r19	; 0x01
   130dc:	4a 83       	std	Y+2, r20	; 0x02
   130de:	ca 59       	subi	r28, 0x9A	; 154
   130e0:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   130e2:	2c c0       	rjmp	.+88     	; 0x1313c <Read_Config+0x162>
   130e4:	8e ec       	ldi	r24, 0xCE	; 206
   130e6:	9d e0       	ldi	r25, 0x0D	; 13
   130e8:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <perror>
        printf("Read_Config: open(%s) failed\n", name);
   130ec:	0f 93       	push	r16
   130ee:	1f 93       	push	r17
   130f0:	84 e5       	ldi	r24, 0x54	; 84
   130f2:	9e e1       	ldi	r25, 0x1E	; 30
   130f4:	1f 92       	push	r1
   130f6:	9f 93       	push	r25
   130f8:	8f 93       	push	r24
   130fa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        set_Config_Defaults();
        return(errors);
   130fe:	0f 90       	pop	r0
   13100:	0f 90       	pop	r0
   13102:	0f 90       	pop	r0
   13104:	0f 90       	pop	r0
   13106:	0f 90       	pop	r0
   13108:	81 e0       	ldi	r24, 0x01	; 1
   1310a:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   1310c:	1a c6       	rjmp	.+3124   	; 0x13d42 <Read_Config+0xd68>
   1310e:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13112:	90 91 76 19 	lds	r25, 0x1976	; 0x801976 <lines+0x1>
   13116:	01 96       	adiw	r24, 0x01	; 1
   13118:	90 93 76 19 	sts	0x1976, r25	; 0x801976 <lines+0x1>
   1311c:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <lines>

        ptr = str;

        trim_tail(ptr);
   13120:	c1 01       	movw	r24, r2
   13122:	0e 94 99 33 	call	0x6732	; 0x6732 <trim_tail>
        ptr = skipspaces(ptr);
   13126:	c1 01       	movw	r24, r2
   13128:	0e 94 a9 33 	call	0x6752	; 0x6752 <skipspaces>
        len = strlen(ptr);
   1312c:	fc 01       	movw	r30, r24
   1312e:	01 90       	ld	r0, Z+
   13130:	00 20       	and	r0, r0
   13132:	e9 f7       	brne	.-6      	; 0x1312e <Read_Config+0x154>

        if(!len)
   13134:	31 97       	sbiw	r30, 0x01	; 1
   13136:	8e 17       	cp	r24, r30
   13138:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1313a:	71 f4       	brne	.+28     	; 0x13158 <Read_Config+0x17e>
   1313c:	c7 57       	subi	r28, 0x77	; 119
   1313e:	de 4f       	sbci	r29, 0xFE	; 254
   13140:	48 81       	ld	r20, Y
   13142:	59 81       	ldd	r21, Y+1	; 0x01
   13144:	c9 58       	subi	r28, 0x89	; 137
   13146:	d1 40       	sbci	r29, 0x01	; 1
   13148:	6e e7       	ldi	r22, 0x7E	; 126
   1314a:	70 e0       	ldi	r23, 0x00	; 0
   1314c:	c1 01       	movw	r24, r2
   1314e:	0e 94 36 78 	call	0xf06c	; 0xf06c <fgets>
   13152:	89 2b       	or	r24, r25
   13154:	e1 f6       	brne	.-72     	; 0x1310e <Read_Config+0x134>

        if(!len)
            continue;

        // Skip comments
        if(*ptr == '#')
   13156:	a7 c5       	rjmp	.+2894   	; 0x13ca6 <Read_Config+0xccc>
   13158:	dc 01       	movw	r26, r24
   1315a:	2c 91       	ld	r18, X
   1315c:	23 32       	cpi	r18, 0x23	; 35
            continue;

		*token = 0;
   1315e:	71 f3       	breq	.-36     	; 0x1313c <Read_Config+0x162>
   13160:	8e 01       	movw	r16, r28
   13162:	0f 57       	subi	r16, 0x7F	; 127
   13164:	1f 4f       	sbci	r17, 0xFF	; 255
   13166:	f8 01       	movw	r30, r16
		*arg = 0;
   13168:	10 82       	st	Z, r1
		val.l = 0;

		// To save on code we process a token and optional argument here
		ptr = get_token(ptr,token, sizeof(token)-2);
   1316a:	19 82       	std	Y+1, r1	; 0x01
   1316c:	4e e7       	ldi	r20, 0x7E	; 126
   1316e:	50 e0       	ldi	r21, 0x00	; 0
   13170:	b8 01       	movw	r22, r16
   13172:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>

		// Argument
		ptr = get_token(ptr,arg, sizeof(arg)-2);
   13176:	4e e7       	ldi	r20, 0x7E	; 126
   13178:	50 e0       	ldi	r21, 0x00	; 0
   1317a:	be 01       	movw	r22, r28
   1317c:	6f 5f       	subi	r22, 0xFF	; 255
   1317e:	7f 4f       	sbci	r23, 0xFF	; 255
   13180:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		if( MATCHI(arg,"=") )
   13184:	3c 01       	movw	r6, r24
   13186:	61 ee       	ldi	r22, 0xE1	; 225
   13188:	7d e0       	ldi	r23, 0x0D	; 13
   1318a:	ce 01       	movw	r24, r28
   1318c:	01 96       	adiw	r24, 0x01	; 1
   1318e:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   13192:	89 2b       	or	r24, r25
			ptr = get_token(ptr,arg,sizeof(arg)-2);
   13194:	41 f0       	breq	.+16     	; 0x131a6 <Read_Config+0x1cc>
   13196:	4e e7       	ldi	r20, 0x7E	; 126
   13198:	50 e0       	ldi	r21, 0x00	; 0
   1319a:	be 01       	movw	r22, r28
   1319c:	6f 5f       	subi	r22, 0xFF	; 255
   1319e:	7f 4f       	sbci	r23, 0xFF	; 255
   131a0:	c3 01       	movw	r24, r6
   131a2:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		val.l = get_value(arg);
   131a6:	ce 01       	movw	r24, r28
   131a8:	01 96       	adiw	r24, 0x01	; 1
   131aa:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   131ae:	cd 57       	subi	r28, 0x7D	; 125
   131b0:	de 4f       	sbci	r29, 0xFE	; 254
   131b2:	68 83       	st	Y, r22
   131b4:	c3 58       	subi	r28, 0x83	; 131
   131b6:	d1 40       	sbci	r29, 0x01	; 1
   131b8:	cc 57       	subi	r28, 0x7C	; 124
   131ba:	de 4f       	sbci	r29, 0xFE	; 254
   131bc:	78 83       	st	Y, r23
   131be:	c4 58       	subi	r28, 0x84	; 132
   131c0:	d1 40       	sbci	r29, 0x01	; 1
   131c2:	cb 57       	subi	r28, 0x7B	; 123
   131c4:	de 4f       	sbci	r29, 0xFE	; 254
   131c6:	88 83       	st	Y, r24
   131c8:	c5 58       	subi	r28, 0x85	; 133
   131ca:	d1 40       	sbci	r29, 0x01	; 1
   131cc:	ca 57       	subi	r28, 0x7A	; 122
   131ce:	de 4f       	sbci	r29, 0xFE	; 254
   131d0:	98 83       	st	Y, r25
   131d2:	c6 58       	subi	r28, 0x86	; 134
   131d4:	d1 40       	sbci	r29, 0x01	; 1
   131d6:	2b 01       	movw	r4, r22

        //FIXME check for state and last state
        if( MATCHI(token,"END") )
   131d8:	3c 01       	movw	r6, r24
   131da:	63 ee       	ldi	r22, 0xE3	; 227
   131dc:	7d e0       	ldi	r23, 0x0D	; 13
   131de:	c8 01       	movw	r24, r16
   131e0:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
        {
            state = pop_state();
   131e4:	89 2b       	or	r24, r25
   131e6:	19 f0       	breq	.+6      	; 0x131ee <Read_Config+0x214>
   131e8:	a4 dd       	rcall	.-1208   	; 0x12d32 <pop_state>
            continue;
   131ea:	6c 01       	movw	r12, r24
        }

        switch(state)
   131ec:	a7 cf       	rjmp	.-178    	; 0x1313c <Read_Config+0x162>
   131ee:	f0 e1       	ldi	r31, 0x10	; 16
   131f0:	cf 16       	cp	r12, r31
   131f2:	d1 04       	cpc	r13, r1
   131f4:	08 f0       	brcs	.+2      	; 0x131f8 <Read_Config+0x21e>
   131f6:	37 c5       	rjmp	.+2670   	; 0x13c66 <Read_Config+0xc8c>
   131f8:	f6 01       	movw	r30, r12
   131fa:	e0 53       	subi	r30, 0x30	; 48
   131fc:	ff 4f       	sbci	r31, 0xFF	; 255
   131fe:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
        {
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
   13202:	67 ee       	ldi	r22, 0xE7	; 231
   13204:	7d e0       	ldi	r23, 0x0D	; 13
   13206:	c8 01       	movw	r24, r16
   13208:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                push_state(state);
   1320c:	89 2b       	or	r24, r25
   1320e:	a9 f0       	breq	.+42     	; 0x1323a <Read_Config+0x260>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   13210:	80 e0       	ldi	r24, 0x00	; 0
   13212:	90 e0       	ldi	r25, 0x00	; 0
   13214:	75 dd       	rcall	.-1302   	; 0x12d00 <push_state>
   13216:	82 e0       	ldi	r24, 0x02	; 2
   13218:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   1321a:	9b dc       	rcall	.-1738   	; 0x12b52 <alloc_device>
   1321c:	5c 01       	movw	r10, r24
   1321e:	01 96       	adiw	r24, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   13220:	09 f4       	brne	.+2      	; 0x13224 <Read_Config+0x24a>
   13222:	8c cf       	rjmp	.-232    	; 0x1313c <Read_Config+0x162>
   13224:	8b e2       	ldi	r24, 0x2B	; 43
   13226:	8a 9d       	mul	r24, r10
   13228:	f0 01       	movw	r30, r0
   1322a:	8b 9d       	mul	r24, r11
   1322c:	f0 0d       	add	r31, r0
   1322e:	11 24       	eor	r1, r1
   13230:	ee 5f       	subi	r30, 0xFE	; 254
   13232:	f0 4e       	sbci	r31, 0xE0	; 224
   13234:	87 a0       	ldd	r8, Z+39	; 0x27
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   13236:	90 a4       	ldd	r9, Z+40	; 0x28
   13238:	29 c0       	rjmp	.+82     	; 0x1328c <Read_Config+0x2b2>
   1323a:	64 ef       	ldi	r22, 0xF4	; 244
   1323c:	7d e0       	ldi	r23, 0x0D	; 13
   1323e:	c8 01       	movw	r24, r16
   13240:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                push_state(state);
   13244:	89 2b       	or	r24, r25
   13246:	d1 f0       	breq	.+52     	; 0x1327c <Read_Config+0x2a2>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   13248:	80 e0       	ldi	r24, 0x00	; 0
   1324a:	90 e0       	ldi	r25, 0x00	; 0
   1324c:	59 dd       	rcall	.-1358   	; 0x12d00 <push_state>
   1324e:	83 e0       	ldi	r24, 0x03	; 3
   13250:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13252:	7f dc       	rcall	.-1794   	; 0x12b52 <alloc_device>
   13254:	5c 01       	movw	r10, r24
   13256:	01 96       	adiw	r24, 0x01	; 1
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   13258:	09 f4       	brne	.+2      	; 0x1325c <Read_Config+0x282>
   1325a:	70 cf       	rjmp	.-288    	; 0x1313c <Read_Config+0x162>
   1325c:	8b e2       	ldi	r24, 0x2B	; 43
   1325e:	8a 9d       	mul	r24, r10
   13260:	f0 01       	movw	r30, r0
   13262:	8b 9d       	mul	r24, r11
   13264:	f0 0d       	add	r31, r0
   13266:	11 24       	eor	r1, r1
   13268:	ee 5f       	subi	r30, 0xFE	; 254
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
   1326a:	f0 4e       	sbci	r31, 0xE0	; 224
   1326c:	87 a0       	ldd	r8, Z+39	; 0x27
   1326e:	90 a4       	ldd	r9, Z+40	; 0x28
   13270:	be 01       	movw	r22, r28
   13272:	6f 5f       	subi	r22, 0xFF	; 255
   13274:	7f 4f       	sbci	r23, 0xFF	; 255
   13276:	c5 01       	movw	r24, r10
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   13278:	0d de       	rcall	.-998    	; 0x12e94 <hpdir_set_parameters>
   1327a:	08 c0       	rjmp	.+16     	; 0x1328c <Read_Config+0x2b2>
   1327c:	69 ef       	ldi	r22, 0xF9	; 249
   1327e:	7d e0       	ldi	r23, 0x0D	; 13
   13280:	c8 01       	movw	r24, r16
   13282:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   13286:	89 2b       	or	r24, r25
            {
                push_state(state);
				state = SS80_STATE;
   13288:	f9 f6       	brne	.-66     	; 0x13248 <Read_Config+0x26e>
   1328a:	04 c0       	rjmp	.+8      	; 0x13294 <Read_Config+0x2ba>
   1328c:	cc 24       	eor	r12, r12
   1328e:	c3 94       	inc	r12
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
   13290:	d1 2c       	mov	r13, r1
   13292:	54 cf       	rjmp	.-344    	; 0x1313c <Read_Config+0x162>
   13294:	6e ef       	ldi	r22, 0xFE	; 254
   13296:	7d e0       	ldi	r23, 0x0D	; 13
   13298:	c8 01       	movw	r24, r16
            {
                push_state(state);
   1329a:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   1329e:	89 2b       	or	r24, r25
   132a0:	19 f1       	breq	.+70     	; 0x132e8 <Read_Config+0x30e>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   132a2:	80 e0       	ldi	r24, 0x00	; 0
   132a4:	90 e0       	ldi	r25, 0x00	; 0
   132a6:	2c dd       	rcall	.-1448   	; 0x12d00 <push_state>
   132a8:	81 e0       	ldi	r24, 0x01	; 1
   132aa:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   132ac:	52 dc       	rcall	.-1884   	; 0x12b52 <alloc_device>
   132ae:	5c 01       	movw	r10, r24
   132b0:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   132b2:	09 f4       	brne	.+2      	; 0x132b6 <Read_Config+0x2dc>
   132b4:	43 cf       	rjmp	.-378    	; 0x1313c <Read_Config+0x162>
   132b6:	8b e2       	ldi	r24, 0x2B	; 43
   132b8:	8a 9d       	mul	r24, r10
   132ba:	f0 01       	movw	r30, r0
   132bc:	8b 9d       	mul	r24, r11
   132be:	f0 0d       	add	r31, r0
   132c0:	11 24       	eor	r1, r1
   132c2:	ee 5f       	subi	r30, 0xFE	; 254
   132c4:	f0 4e       	sbci	r31, 0xE0	; 224
   132c6:	87 a1       	ldd	r24, Z+39	; 0x27
   132c8:	90 a5       	ldd	r25, Z+40	; 0x28
   132ca:	cf 57       	subi	r28, 0x7F	; 127
   132cc:	de 4f       	sbci	r29, 0xFE	; 254
   132ce:	99 83       	std	Y+1, r25	; 0x01
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
   132d0:	88 83       	st	Y, r24
   132d2:	c1 58       	subi	r28, 0x81	; 129
   132d4:	d1 40       	sbci	r29, 0x01	; 1
   132d6:	be 01       	movw	r22, r28
   132d8:	6f 5f       	subi	r22, 0xFF	; 255
   132da:	7f 4f       	sbci	r23, 0xFF	; 255

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
            {
                push_state(state);
                state = AMIGO_STATE;
   132dc:	c5 01       	movw	r24, r10
   132de:	da dd       	rcall	.-1100   	; 0x12e94 <hpdir_set_parameters>
   132e0:	9a e0       	ldi	r25, 0x0A	; 10
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
				}
			}
#endif
            else if( MATCHI (token,"PRINTER") )
   132e2:	c9 2e       	mov	r12, r25
   132e4:	d1 2c       	mov	r13, r1
   132e6:	2a cf       	rjmp	.-428    	; 0x1313c <Read_Config+0x162>
   132e8:	64 e0       	ldi	r22, 0x04	; 4
   132ea:	7e e0       	ldi	r23, 0x0E	; 14
   132ec:	c8 01       	movw	r24, r16
            {
                push_state(state);
   132ee:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   132f2:	89 2b       	or	r24, r25
   132f4:	01 f1       	breq	.+64     	; 0x13336 <Read_Config+0x35c>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   132f6:	80 e0       	ldi	r24, 0x00	; 0
   132f8:	90 e0       	ldi	r25, 0x00	; 0
   132fa:	02 dd       	rcall	.-1532   	; 0x12d00 <push_state>
   132fc:	84 e0       	ldi	r24, 0x04	; 4
   132fe:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   13300:	28 dc       	rcall	.-1968   	; 0x12b52 <alloc_device>
   13302:	5c 01       	movw	r10, r24
   13304:	9f ef       	ldi	r25, 0xFF	; 255
   13306:	a9 16       	cp	r10, r25
   13308:	b9 06       	cpc	r11, r25
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1330a:	09 f4       	brne	.+2      	; 0x1330e <Read_Config+0x334>
   1330c:	17 cf       	rjmp	.-466    	; 0x1313c <Read_Config+0x162>
   1330e:	8b e2       	ldi	r24, 0x2B	; 43
   13310:	8a 9d       	mul	r24, r10
   13312:	f0 01       	movw	r30, r0
   13314:	8b 9d       	mul	r24, r11
   13316:	f0 0d       	add	r31, r0
   13318:	11 24       	eor	r1, r1
   1331a:	ee 5f       	subi	r30, 0xFE	; 254
   1331c:	f0 4e       	sbci	r31, 0xE0	; 224
   1331e:	a7 a1       	ldd	r26, Z+39	; 0x27
   13320:	b0 a5       	ldd	r27, Z+40	; 0x28
   13322:	c9 57       	subi	r28, 0x79	; 121
   13324:	de 4f       	sbci	r29, 0xFE	; 254
   13326:	b9 83       	std	Y+1, r27	; 0x01
   13328:	a8 83       	st	Y, r26
			}
#endif
            else if( MATCHI (token,"PRINTER") )
            {
                push_state(state);
                state = PRINTER_STATE;
   1332a:	c7 58       	subi	r28, 0x87	; 135
   1332c:	d1 40       	sbci	r29, 0x01	; 1
   1332e:	8e e0       	ldi	r24, 0x0E	; 14
   13330:	c8 2e       	mov	r12, r24
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( MATCHI (token,"DEBUG") )
   13332:	d1 2c       	mov	r13, r1
   13334:	03 cf       	rjmp	.-506    	; 0x1313c <Read_Config+0x162>
   13336:	6c e0       	ldi	r22, 0x0C	; 12
   13338:	7e e0       	ldi	r23, 0x0E	; 14
   1333a:	c8 01       	movw	r24, r16
   1333c:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
				debuglevel = val.w;
   13340:	89 2b       	or	r24, r25
   13342:	29 f0       	breq	.+10     	; 0x1334e <Read_Config+0x374>
   13344:	50 92 be 01 	sts	0x01BE, r5	; 0x8001be <debuglevel+0x1>
   13348:	40 92 bd 01 	sts	0x01BD, r4	; 0x8001bd <debuglevel>
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   1334c:	f7 ce       	rjmp	.-530    	; 0x1313c <Read_Config+0x162>
   1334e:	62 e1       	ldi	r22, 0x12	; 18
   13350:	7e e0       	ldi	r23, 0x0E	; 14
   13352:	c8 01       	movw	r24, r16
   13354:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   13358:	30 91 76 19 	lds	r19, 0x1976	; 0x801976 <lines+0x1>
   1335c:	20 91 75 19 	lds	r18, 0x1975	; 0x801975 <lines>
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   13360:	89 2b       	or	r24, r25
   13362:	39 f0       	breq	.+14     	; 0x13372 <Read_Config+0x398>
   13364:	3f 93       	push	r19
   13366:	2f 93       	push	r18
   13368:	3f 92       	push	r3
   1336a:	2f 92       	push	r2
   1336c:	8b e3       	ldi	r24, 0x3B	; 59
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", str,lines);
   1336e:	9e e1       	ldi	r25, 0x1E	; 30
   13370:	29 c3       	rjmp	.+1618   	; 0x139c4 <Read_Config+0x9ea>
   13372:	3f 93       	push	r19
   13374:	2f 93       	push	r18
   13376:	3f 92       	push	r3
   13378:	2f 92       	push	r2
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if( MATCHI (token,"CONFIG") )
   1337a:	83 e1       	ldi	r24, 0x13	; 19
   1337c:	9e e1       	ldi	r25, 0x1E	; 30
   1337e:	d5 c2       	rjmp	.+1450   	; 0x1392a <Read_Config+0x950>
   13380:	6a e2       	ldi	r22, 0x2A	; 42
   13382:	7e e0       	ldi	r23, 0x0E	; 14
   13384:	c8 01       	movw	r24, r16
   13386:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                push_state(state);
   1338a:	89 2b       	or	r24, r25
   1338c:	39 f0       	breq	.+14     	; 0x1339c <Read_Config+0x3c2>
   1338e:	8e e0       	ldi	r24, 0x0E	; 14
                state = PRINTER_CONFIG;
   13390:	90 e0       	ldi	r25, 0x00	; 0
   13392:	b6 dc       	rcall	.-1684   	; 0x12d00 <push_state>
   13394:	bf e0       	ldi	r27, 0x0F	; 15
   13396:	cb 2e       	mov	r12, r27
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", str,lines);
   13398:	d1 2c       	mov	r13, r1
   1339a:	d0 ce       	rjmp	.-608    	; 0x1313c <Read_Config+0x162>
   1339c:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   133a0:	8f 93       	push	r24
   133a2:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   133a6:	8f 93       	push	r24
   133a8:	3f 92       	push	r3
   133aa:	2f 92       	push	r2
   133ac:	89 ee       	ldi	r24, 0xE9	; 233
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( MATCHI (token,"ADDRESS") )
   133ae:	9d e1       	ldi	r25, 0x1D	; 29
   133b0:	f4 c2       	rjmp	.+1512   	; 0x1399a <Read_Config+0x9c0>
   133b2:	62 e2       	ldi	r22, 0x22	; 34
   133b4:	7e e0       	ldi	r23, 0x0E	; 14
   133b6:	c8 01       	movw	r24, r16
   133b8:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   133bc:	89 2b       	or	r24, r25
            {
				if(val.b > 31)
   133be:	09 f4       	brne	.+2      	; 0x133c2 <Read_Config+0x3e8>
   133c0:	47 c0       	rjmp	.+142    	; 0x13450 <Read_Config+0x476>
   133c2:	9f e1       	ldi	r25, 0x1F	; 31
				{
					printf("Fatal PRINTER ADDRESS out of range: %ld disabled:%d\n", val.l, lines);
   133c4:	94 15       	cp	r25, r4
   133c6:	78 f5       	brcc	.+94     	; 0x13426 <Read_Config+0x44c>
   133c8:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   133cc:	8f 93       	push	r24
   133ce:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   133d2:	8f 93       	push	r24
   133d4:	ca 57       	subi	r28, 0x7A	; 122
   133d6:	de 4f       	sbci	r29, 0xFE	; 254
   133d8:	a8 81       	ld	r26, Y
   133da:	c6 58       	subi	r28, 0x86	; 134
   133dc:	d1 40       	sbci	r29, 0x01	; 1
   133de:	af 93       	push	r26
   133e0:	cb 57       	subi	r28, 0x7B	; 123
   133e2:	de 4f       	sbci	r29, 0xFE	; 254
   133e4:	b8 81       	ld	r27, Y
   133e6:	c5 58       	subi	r28, 0x85	; 133
   133e8:	d1 40       	sbci	r29, 0x01	; 1
   133ea:	bf 93       	push	r27
   133ec:	cc 57       	subi	r28, 0x7C	; 124
   133ee:	de 4f       	sbci	r29, 0xFE	; 254
   133f0:	e8 81       	ld	r30, Y
   133f2:	c4 58       	subi	r28, 0x84	; 132
   133f4:	d1 40       	sbci	r29, 0x01	; 1
   133f6:	ef 93       	push	r30
   133f8:	cd 57       	subi	r28, 0x7D	; 125
   133fa:	de 4f       	sbci	r29, 0xFE	; 254
   133fc:	f8 81       	ld	r31, Y
   133fe:	c3 58       	subi	r28, 0x83	; 131
   13400:	d1 40       	sbci	r29, 0x01	; 1
   13402:	ff 93       	push	r31
   13404:	84 eb       	ldi	r24, 0xB4	; 180
   13406:	9d e1       	ldi	r25, 0x1D	; 29
   13408:	1f 92       	push	r1
   1340a:	9f 93       	push	r25
   1340c:	8f 93       	push	r24
					val.b = 0xff;
   1340e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                    ++errors;
   13412:	44 24       	eor	r4, r4
   13414:	4a 94       	dec	r4
   13416:	2f ef       	ldi	r18, 0xFF	; 255
   13418:	e2 1a       	sub	r14, r18
   1341a:	f2 0a       	sbc	r15, r18
   1341c:	0f b6       	in	r0, 0x3f	; 63
   1341e:	f8 94       	cli
   13420:	de bf       	out	0x3e, r29	; 62
				}
                Devices[index].ADDRESS = val.b;
   13422:	0f be       	out	0x3f, r0	; 63
   13424:	cd bf       	out	0x3d, r28	; 61
   13426:	8b e2       	ldi	r24, 0x2B	; 43
   13428:	8a 9d       	mul	r24, r10
   1342a:	f0 01       	movw	r30, r0
   1342c:	8b 9d       	mul	r24, r11
   1342e:	f0 0d       	add	r31, r0
   13430:	11 24       	eor	r1, r1
   13432:	ee 5f       	subi	r30, 0xFE	; 254
                PRINTERp->HEADER.ADDRESS  = val.b;
   13434:	f0 4e       	sbci	r31, 0xE0	; 224
   13436:	41 82       	std	Z+1, r4	; 0x01
   13438:	c9 57       	subi	r28, 0x79	; 121
   1343a:	de 4f       	sbci	r29, 0xFE	; 254
   1343c:	a8 81       	ld	r26, Y
   1343e:	b9 81       	ldd	r27, Y+1	; 0x01
   13440:	c7 58       	subi	r28, 0x87	; 135
                // NO PPR
                Devices[index].PPR = 0xff;
   13442:	d1 40       	sbci	r29, 0x01	; 1
   13444:	4c 92       	st	X, r4
                PRINTERp->HEADER.PPR = 0xff;
   13446:	8f ef       	ldi	r24, 0xFF	; 255
   13448:	82 83       	std	Z+2, r24	; 0x02
   1344a:	11 96       	adiw	r26, 0x01	; 1
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", str,lines);
   1344c:	8c 93       	st	X, r24
   1344e:	76 ce       	rjmp	.-788    	; 0x1313c <Read_Config+0x162>
   13450:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13454:	8f 93       	push	r24
   13456:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   1345a:	8f 93       	push	r24
   1345c:	3f 92       	push	r3
   1345e:	2f 92       	push	r2
                ++errors;
            }
            break;

        case SS80_STATE:
            if( MATCHI (token,"HEADER") )
   13460:	83 e8       	ldi	r24, 0x83	; 131
   13462:	9d e1       	ldi	r25, 0x1D	; 29
   13464:	d4 c0       	rjmp	.+424    	; 0x1360e <Read_Config+0x634>
   13466:	61 e3       	ldi	r22, 0x31	; 49
   13468:	7e e0       	ldi	r23, 0x0E	; 14
   1346a:	c8 01       	movw	r24, r16
   1346c:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                push_state(state);
   13470:	89 2b       	or	r24, r25
   13472:	39 f0       	breq	.+14     	; 0x13482 <Read_Config+0x4a8>
                state = SS80_HEADER;
   13474:	81 e0       	ldi	r24, 0x01	; 1
   13476:	90 e0       	ldi	r25, 0x00	; 0
   13478:	43 dc       	rcall	.-1914   	; 0x12d00 <push_state>
   1347a:	a2 e0       	ldi	r26, 0x02	; 2
            }
            else if( MATCHI (token,"CONFIG") )
   1347c:	ca 2e       	mov	r12, r26
   1347e:	d1 2c       	mov	r13, r1
   13480:	5d ce       	rjmp	.-838    	; 0x1313c <Read_Config+0x162>
   13482:	6a e2       	ldi	r22, 0x2A	; 42
   13484:	7e e0       	ldi	r23, 0x0E	; 14
   13486:	c8 01       	movw	r24, r16
   13488:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                push_state(state);
   1348c:	89 2b       	or	r24, r25
   1348e:	39 f0       	breq	.+14     	; 0x1349e <Read_Config+0x4c4>
                state = SS80_CONFIG;
   13490:	81 e0       	ldi	r24, 0x01	; 1
   13492:	90 e0       	ldi	r25, 0x00	; 0
   13494:	35 dc       	rcall	.-1942   	; 0x12d00 <push_state>
   13496:	f3 e0       	ldi	r31, 0x03	; 3
            }
            else if( MATCHI (token,"CONTROLLER") )
   13498:	cf 2e       	mov	r12, r31
   1349a:	d1 2c       	mov	r13, r1
   1349c:	4f ce       	rjmp	.-866    	; 0x1313c <Read_Config+0x162>
   1349e:	68 e3       	ldi	r22, 0x38	; 56
   134a0:	7e e0       	ldi	r23, 0x0E	; 14
   134a2:	c8 01       	movw	r24, r16
   134a4:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                push_state(state);
   134a8:	89 2b       	or	r24, r25
   134aa:	39 f0       	breq	.+14     	; 0x134ba <Read_Config+0x4e0>
                state = SS80_CONTROLLER;
   134ac:	81 e0       	ldi	r24, 0x01	; 1
   134ae:	90 e0       	ldi	r25, 0x00	; 0
   134b0:	27 dc       	rcall	.-1970   	; 0x12d00 <push_state>
   134b2:	e4 e0       	ldi	r30, 0x04	; 4
            }
            else if( MATCHI (token,"UNIT") )
   134b4:	ce 2e       	mov	r12, r30
   134b6:	d1 2c       	mov	r13, r1
   134b8:	41 ce       	rjmp	.-894    	; 0x1313c <Read_Config+0x162>
   134ba:	63 e4       	ldi	r22, 0x43	; 67
   134bc:	7e e0       	ldi	r23, 0x0E	; 14
   134be:	c8 01       	movw	r24, r16
            {
                push_state(state);
   134c0:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   134c4:	89 2b       	or	r24, r25
                state = SS80_UNIT;
   134c6:	39 f0       	breq	.+14     	; 0x134d6 <Read_Config+0x4fc>
   134c8:	81 e0       	ldi	r24, 0x01	; 1
   134ca:	90 e0       	ldi	r25, 0x00	; 0
   134cc:	19 dc       	rcall	.-1998   	; 0x12d00 <push_state>
            }
            else if( MATCHI (token,"VOLUME") )
   134ce:	75 e0       	ldi	r23, 0x05	; 5
   134d0:	c7 2e       	mov	r12, r23
   134d2:	d1 2c       	mov	r13, r1
   134d4:	33 ce       	rjmp	.-922    	; 0x1313c <Read_Config+0x162>
   134d6:	68 e4       	ldi	r22, 0x48	; 72
   134d8:	7e e0       	ldi	r23, 0x0E	; 14
   134da:	c8 01       	movw	r24, r16
            {
                push_state(state);
   134dc:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   134e0:	89 2b       	or	r24, r25
   134e2:	39 f0       	breq	.+14     	; 0x134f2 <Read_Config+0x518>
                state = SS80_VOLUME;
   134e4:	81 e0       	ldi	r24, 0x01	; 1
   134e6:	90 e0       	ldi	r25, 0x00	; 0
   134e8:	0b dc       	rcall	.-2026   	; 0x12d00 <push_state>
   134ea:	66 e0       	ldi	r22, 0x06	; 6
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", str,lines);
   134ec:	c6 2e       	mov	r12, r22
   134ee:	d1 2c       	mov	r13, r1
   134f0:	25 ce       	rjmp	.-950    	; 0x1313c <Read_Config+0x162>
   134f2:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   134f6:	8f 93       	push	r24
   134f8:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   134fc:	8f 93       	push	r24
   134fe:	3f 92       	push	r3
   13500:	2f 92       	push	r2
            }
            break;


        case SS80_HEADER:
            if( MATCHI (token,"ADDRESS") )
   13502:	86 e5       	ldi	r24, 0x56	; 86
   13504:	9d e1       	ldi	r25, 0x1D	; 29
   13506:	11 c2       	rjmp	.+1058   	; 0x1392a <Read_Config+0x950>
   13508:	62 e2       	ldi	r22, 0x22	; 34
   1350a:	7e e0       	ldi	r23, 0x0E	; 14
   1350c:	c8 01       	movw	r24, r16
   1350e:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                if(val.b > 31)
   13512:	89 2b       	or	r24, r25
   13514:	29 f1       	breq	.+74     	; 0x13560 <Read_Config+0x586>
				{
					printf("Fatal SS80 ADDRESS > 31 at line d\n", lines);
   13516:	3f e1       	ldi	r19, 0x1F	; 31
   13518:	34 15       	cp	r19, r4
   1351a:	b8 f4       	brcc	.+46     	; 0x1354a <Read_Config+0x570>
   1351c:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13520:	8f 93       	push	r24
   13522:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13526:	8f 93       	push	r24
   13528:	83 e3       	ldi	r24, 0x33	; 51
   1352a:	9d e1       	ldi	r25, 0x1D	; 29
   1352c:	1f 92       	push	r1
   1352e:	9f 93       	push	r25
					val.b = 0xff;
   13530:	8f 93       	push	r24
   13532:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
					++errors;
   13536:	44 24       	eor	r4, r4
   13538:	4a 94       	dec	r4
   1353a:	4f ef       	ldi	r20, 0xFF	; 255
   1353c:	e4 1a       	sub	r14, r20
   1353e:	f4 0a       	sbc	r15, r20
   13540:	0f 90       	pop	r0
   13542:	0f 90       	pop	r0
				}
                Devices[index].ADDRESS = val.b;
   13544:	0f 90       	pop	r0
   13546:	0f 90       	pop	r0
   13548:	0f 90       	pop	r0
   1354a:	8b e2       	ldi	r24, 0x2B	; 43
   1354c:	8a 9d       	mul	r24, r10
   1354e:	f0 01       	movw	r30, r0
   13550:	8b 9d       	mul	r24, r11
   13552:	f0 0d       	add	r31, r0
   13554:	11 24       	eor	r1, r1
                SS80p->HEADER.ADDRESS  = val.b;
   13556:	ee 5f       	subi	r30, 0xFE	; 254
   13558:	f0 4e       	sbci	r31, 0xE0	; 224
            }
            else if( MATCHI (token,"PPR") )
   1355a:	41 82       	std	Z+1, r4	; 0x01
   1355c:	d4 01       	movw	r26, r8
   1355e:	6a c2       	rjmp	.+1236   	; 0x13a34 <Read_Config+0xa5a>
   13560:	6f e4       	ldi	r22, 0x4F	; 79
   13562:	7e e0       	ldi	r23, 0x0E	; 14
   13564:	c8 01       	movw	r24, r16
   13566:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                if(val.b > 7)
   1356a:	89 2b       	or	r24, r25
   1356c:	29 f1       	breq	.+74     	; 0x135b8 <Read_Config+0x5de>
				{
					printf("Warning SS80 PPR > 7 at line:%d\n", lines);
   1356e:	b7 e0       	ldi	r27, 0x07	; 7
   13570:	b4 15       	cp	r27, r4
   13572:	b8 f4       	brcc	.+46     	; 0x135a2 <Read_Config+0x5c8>
   13574:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13578:	8f 93       	push	r24
   1357a:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   1357e:	8f 93       	push	r24
   13580:	82 e1       	ldi	r24, 0x12	; 18
   13582:	9d e1       	ldi	r25, 0x1D	; 29
   13584:	1f 92       	push	r1
   13586:	9f 93       	push	r25
					val.b = 0xff;
   13588:	8f 93       	push	r24
   1358a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
					++errors;
   1358e:	44 24       	eor	r4, r4
   13590:	4a 94       	dec	r4
   13592:	ef ef       	ldi	r30, 0xFF	; 255
   13594:	ee 1a       	sub	r14, r30
   13596:	fe 0a       	sbc	r15, r30
   13598:	0f 90       	pop	r0
   1359a:	0f 90       	pop	r0
				}
                Devices[index].PPR = val.b;
   1359c:	0f 90       	pop	r0
   1359e:	0f 90       	pop	r0
   135a0:	0f 90       	pop	r0
   135a2:	8b e2       	ldi	r24, 0x2B	; 43
   135a4:	8a 9d       	mul	r24, r10
   135a6:	f0 01       	movw	r30, r0
   135a8:	8b 9d       	mul	r24, r11
   135aa:	f0 0d       	add	r31, r0
   135ac:	11 24       	eor	r1, r1
                SS80p->HEADER.PPR = val.b;
   135ae:	ee 5f       	subi	r30, 0xFE	; 254
   135b0:	f0 4e       	sbci	r31, 0xE0	; 224
            }
            else if( MATCHI (token,"FILE") )
   135b2:	42 82       	std	Z+2, r4	; 0x02
   135b4:	d4 01       	movw	r26, r8
   135b6:	7a c2       	rjmp	.+1268   	; 0x13aac <Read_Config+0xad2>
   135b8:	63 e5       	ldi	r22, 0x53	; 83
   135ba:	7e e0       	ldi	r23, 0x0E	; 14
   135bc:	c8 01       	movw	r24, r16
   135be:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->HEADER.NAME = stralloc(arg);
   135c2:	89 2b       	or	r24, r25
   135c4:	31 f0       	breq	.+12     	; 0x135d2 <Read_Config+0x5f8>
   135c6:	ce 01       	movw	r24, r28
   135c8:	01 96       	adiw	r24, 0x01	; 1
   135ca:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <stralloc>
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", token,lines);
   135ce:	f4 01       	movw	r30, r8
   135d0:	81 c2       	rjmp	.+1282   	; 0x13ad4 <Read_Config+0xafa>
   135d2:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   135d6:	8f 93       	push	r24
   135d8:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   135dc:	8f 93       	push	r24
   135de:	1f 93       	push	r17
   135e0:	0f 93       	push	r16
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( MATCHI (token,"ID") )
   135e2:	84 ee       	ldi	r24, 0xE4	; 228
   135e4:	9c e1       	ldi	r25, 0x1C	; 28
   135e6:	a1 c1       	rjmp	.+834    	; 0x1392a <Read_Config+0x950>
   135e8:	68 e5       	ldi	r22, 0x58	; 88
   135ea:	7e e0       	ldi	r23, 0x0E	; 14
   135ec:	c8 01       	movw	r24, r16
   135ee:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->CONFIG.ID = val.w;
   135f2:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", str,lines);
   135f4:	11 f0       	breq	.+4      	; 0x135fa <Read_Config+0x620>
   135f6:	d4 01       	movw	r26, r8
   135f8:	92 c2       	rjmp	.+1316   	; 0x13b1e <Read_Config+0xb44>
   135fa:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   135fe:	8f 93       	push	r24
   13600:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13604:	8f 93       	push	r24
   13606:	3f 92       	push	r3
   13608:	2f 92       	push	r2
   1360a:	86 eb       	ldi	r24, 0xB6	; 182
   1360c:	9c e1       	ldi	r25, 0x1C	; 28
   1360e:	1f 92       	push	r1
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( MATCHI (token,"UNITS_INSTALLED") )
   13610:	9f 93       	push	r25
   13612:	8f 93       	push	r24
   13614:	3d c3       	rjmp	.+1658   	; 0x13c90 <Read_Config+0xcb6>
   13616:	6b e5       	ldi	r22, 0x5B	; 91
   13618:	7e e0       	ldi	r23, 0x0E	; 14
   1361a:	c8 01       	movw	r24, r16
   1361c:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13620:	89 2b       	or	r24, r25
            }
            else if( MATCHI (token,"TRANSFER_RATE") )
   13622:	11 f0       	breq	.+4      	; 0x13628 <Read_Config+0x64e>
   13624:	d4 01       	movw	r26, r8
   13626:	cd c2       	rjmp	.+1434   	; 0x13bc2 <Read_Config+0xbe8>
   13628:	6c ed       	ldi	r22, 0xDC	; 220
   1362a:	7e e0       	ldi	r23, 0x0E	; 14
   1362c:	c8 01       	movw	r24, r16
   1362e:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13632:	89 2b       	or	r24, r25
            }
            else if( MATCHI (token,"TYPE") )
   13634:	11 f0       	breq	.+4      	; 0x1363a <Read_Config+0x660>
   13636:	f4 01       	movw	r30, r8
   13638:	d6 c2       	rjmp	.+1452   	; 0x13be6 <Read_Config+0xc0c>
   1363a:	6e ea       	ldi	r22, 0xAE	; 174
   1363c:	7d e0       	ldi	r23, 0x0D	; 13
   1363e:	c8 01       	movw	r24, r16
   13640:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->CONTROLLER.TYPE = val.w;
   13644:	89 2b       	or	r24, r25
   13646:	21 f0       	breq	.+8      	; 0x13650 <Read_Config+0x676>
   13648:	d4 01       	movw	r26, r8
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", token,lines);
   1364a:	1a 96       	adiw	r26, 0x0a	; 10
   1364c:	4c 92       	st	X, r4
   1364e:	76 cd       	rjmp	.-1300   	; 0x1313c <Read_Config+0x162>
   13650:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13654:	8f 93       	push	r24
   13656:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   1365a:	8f 93       	push	r24
   1365c:	1f 93       	push	r17
   1365e:	0f 93       	push	r16
            }
            break;


        case SS80_UNIT:
            if( MATCHI (token,"UNIT_TYPE") )
   13660:	84 e8       	ldi	r24, 0x84	; 132
   13662:	9c e1       	ldi	r25, 0x1C	; 28
   13664:	d4 cf       	rjmp	.-88     	; 0x1360e <Read_Config+0x634>
   13666:	6b e6       	ldi	r22, 0x6B	; 107
   13668:	7e e0       	ldi	r23, 0x0E	; 14
   1366a:	c8 01       	movw	r24, r16
   1366c:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.UNIT_TYPE = val.w;
   13670:	89 2b       	or	r24, r25
   13672:	21 f0       	breq	.+8      	; 0x1367c <Read_Config+0x6a2>
   13674:	d4 01       	movw	r26, r8
            }
            else if( MATCHI (token,"DEVICE_NUMBER") )
   13676:	1b 96       	adiw	r26, 0x0b	; 11
   13678:	4c 92       	st	X, r4
   1367a:	60 cd       	rjmp	.-1344   	; 0x1313c <Read_Config+0x162>
   1367c:	65 e7       	ldi	r22, 0x75	; 117
   1367e:	7e e0       	ldi	r23, 0x0E	; 14
   13680:	c8 01       	movw	r24, r16
   13682:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.DEVICE_NUMBER = val.l;
   13686:	89 2b       	or	r24, r25
   13688:	d1 f0       	breq	.+52     	; 0x136be <Read_Config+0x6e4>
   1368a:	cd 57       	subi	r28, 0x7D	; 125
   1368c:	de 4f       	sbci	r29, 0xFE	; 254
   1368e:	28 81       	ld	r18, Y
   13690:	c3 58       	subi	r28, 0x83	; 131
   13692:	d1 40       	sbci	r29, 0x01	; 1
   13694:	f4 01       	movw	r30, r8
   13696:	24 87       	std	Z+12, r18	; 0x0c
   13698:	cc 57       	subi	r28, 0x7C	; 124
   1369a:	de 4f       	sbci	r29, 0xFE	; 254
   1369c:	38 81       	ld	r19, Y
   1369e:	c4 58       	subi	r28, 0x84	; 132
   136a0:	d1 40       	sbci	r29, 0x01	; 1
   136a2:	35 87       	std	Z+13, r19	; 0x0d
   136a4:	cb 57       	subi	r28, 0x7B	; 123
   136a6:	de 4f       	sbci	r29, 0xFE	; 254
   136a8:	48 81       	ld	r20, Y
   136aa:	c5 58       	subi	r28, 0x85	; 133
   136ac:	d1 40       	sbci	r29, 0x01	; 1
   136ae:	46 87       	std	Z+14, r20	; 0x0e
   136b0:	ca 57       	subi	r28, 0x7A	; 122
   136b2:	de 4f       	sbci	r29, 0xFE	; 254
   136b4:	88 81       	ld	r24, Y
   136b6:	c6 58       	subi	r28, 0x86	; 134
            }
            else if( MATCHI (token,"BYTES_PER_BLOCK") )
   136b8:	d1 40       	sbci	r29, 0x01	; 1
   136ba:	87 87       	std	Z+15, r24	; 0x0f
   136bc:	3f cd       	rjmp	.-1410   	; 0x1313c <Read_Config+0x162>
   136be:	63 e8       	ldi	r22, 0x83	; 131
   136c0:	7e e0       	ldi	r23, 0x0E	; 14
   136c2:	c8 01       	movw	r24, r16
   136c4:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                if(val.w > 0x1000)
   136c8:	89 2b       	or	r24, r25
   136ca:	09 f1       	breq	.+66     	; 0x1370e <Read_Config+0x734>
   136cc:	91 e0       	ldi	r25, 0x01	; 1
   136ce:	49 16       	cp	r4, r25
				{
					printf("Fatal: SS80 BYTES_PER_BLOCK > 0x1000, set to 256 at line:%d\n", lines);
   136d0:	90 e1       	ldi	r25, 0x10	; 16
   136d2:	59 06       	cpc	r5, r25
   136d4:	c0 f0       	brcs	.+48     	; 0x13706 <Read_Config+0x72c>
   136d6:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   136da:	8f 93       	push	r24
   136dc:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   136e0:	8f 93       	push	r24
   136e2:	87 e4       	ldi	r24, 0x47	; 71
   136e4:	9c e1       	ldi	r25, 0x1C	; 28
   136e6:	1f 92       	push	r1
   136e8:	9f 93       	push	r25
					val.w = 256;
   136ea:	8f 93       	push	r24
   136ec:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                    ++errors;
   136f0:	41 2c       	mov	r4, r1
   136f2:	55 24       	eor	r5, r5
   136f4:	53 94       	inc	r5
   136f6:	af ef       	ldi	r26, 0xFF	; 255
   136f8:	ea 1a       	sub	r14, r26
   136fa:	fa 0a       	sbc	r15, r26
   136fc:	0f 90       	pop	r0
   136fe:	0f 90       	pop	r0
				}
                SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13700:	0f 90       	pop	r0
   13702:	0f 90       	pop	r0
   13704:	0f 90       	pop	r0
   13706:	f4 01       	movw	r30, r8
            }
            else if( MATCHI (token,"BUFFERED_BLOCKS") )
   13708:	51 8a       	std	Z+17, r5	; 0x11
   1370a:	40 8a       	std	Z+16, r4	; 0x10
   1370c:	17 cd       	rjmp	.-1490   	; 0x1313c <Read_Config+0x162>
   1370e:	63 e9       	ldi	r22, 0x93	; 147
   13710:	7e e0       	ldi	r23, 0x0E	; 14
   13712:	c8 01       	movw	r24, r16
   13714:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
				if(val.b > 1)
   13718:	89 2b       	or	r24, r25
   1371a:	f9 f0       	breq	.+62     	; 0x1375a <Read_Config+0x780>
				{
					printf("Fatal: SS80 BUFFERED_BLOCKS > 1, set to 1 at line:%d\n", lines);
   1371c:	f1 e0       	ldi	r31, 0x01	; 1
   1371e:	f4 15       	cp	r31, r4
   13720:	c0 f4       	brcc	.+48     	; 0x13752 <Read_Config+0x778>
   13722:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13726:	8f 93       	push	r24
   13728:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   1372c:	8f 93       	push	r24
   1372e:	81 e1       	ldi	r24, 0x11	; 17
   13730:	9c e1       	ldi	r25, 0x1C	; 28
   13732:	1f 92       	push	r1
   13734:	9f 93       	push	r25
                    ++errors;
   13736:	8f 93       	push	r24
   13738:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
					val.w = 1;
   1373c:	2f ef       	ldi	r18, 0xFF	; 255
   1373e:	e2 1a       	sub	r14, r18
   13740:	f2 0a       	sbc	r15, r18
   13742:	44 24       	eor	r4, r4
   13744:	43 94       	inc	r4
   13746:	51 2c       	mov	r5, r1
   13748:	0f 90       	pop	r0
   1374a:	0f 90       	pop	r0
				}
                SS80p->UNIT.BUFFERED_BLOCKS = val.b;
   1374c:	0f 90       	pop	r0
   1374e:	0f 90       	pop	r0
   13750:	0f 90       	pop	r0
   13752:	d4 01       	movw	r26, r8
            }
            else if( MATCHI (token,"BURST_SIZE") )
   13754:	52 96       	adiw	r26, 0x12	; 18
   13756:	4c 92       	st	X, r4
   13758:	f1 cc       	rjmp	.-1566   	; 0x1313c <Read_Config+0x162>
   1375a:	63 ea       	ldi	r22, 0xA3	; 163
   1375c:	7e e0       	ldi	r23, 0x0E	; 14
   1375e:	c8 01       	movw	r24, r16
   13760:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
				if(val.b > 0)
   13764:	89 2b       	or	r24, r25
				{
					printf("Fatal: SS80 BURST_SIZE > 0, set to 1 at line:%d\n", lines);
   13766:	e1 f0       	breq	.+56     	; 0x137a0 <Read_Config+0x7c6>
   13768:	44 20       	and	r4, r4
   1376a:	b9 f0       	breq	.+46     	; 0x1379a <Read_Config+0x7c0>
   1376c:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13770:	8f 93       	push	r24
   13772:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13776:	8f 93       	push	r24
   13778:	80 ee       	ldi	r24, 0xE0	; 224
   1377a:	9b e1       	ldi	r25, 0x1B	; 27
   1377c:	1f 92       	push	r1
   1377e:	9f 93       	push	r25
                    ++errors;
   13780:	8f 93       	push	r24
   13782:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
					val.w = 0;
   13786:	bf ef       	ldi	r27, 0xFF	; 255
   13788:	eb 1a       	sub	r14, r27
   1378a:	fb 0a       	sbc	r15, r27
   1378c:	41 2c       	mov	r4, r1
   1378e:	51 2c       	mov	r5, r1
   13790:	0f 90       	pop	r0
   13792:	0f 90       	pop	r0
				}
                SS80p->UNIT.BURST_SIZE = val.b;
   13794:	0f 90       	pop	r0
   13796:	0f 90       	pop	r0
   13798:	0f 90       	pop	r0
            }
            else if( MATCHI (token,"BLOCK_TIME") )
   1379a:	f4 01       	movw	r30, r8
   1379c:	43 8a       	std	Z+19, r4	; 0x13
   1379e:	ce cc       	rjmp	.-1636   	; 0x1313c <Read_Config+0x162>
   137a0:	6e ea       	ldi	r22, 0xAE	; 174
   137a2:	7e e0       	ldi	r23, 0x0E	; 14
   137a4:	c8 01       	movw	r24, r16
   137a6:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
   137aa:	89 2b       	or	r24, r25
   137ac:	31 f0       	breq	.+12     	; 0x137ba <Read_Config+0x7e0>
   137ae:	d4 01       	movw	r26, r8
   137b0:	55 96       	adiw	r26, 0x15	; 21
   137b2:	5c 92       	st	X, r5
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   137b4:	4e 92       	st	-X, r4
   137b6:	54 97       	sbiw	r26, 0x14	; 20
   137b8:	c1 cc       	rjmp	.-1662   	; 0x1313c <Read_Config+0x162>
   137ba:	69 eb       	ldi	r22, 0xB9	; 185
   137bc:	7e e0       	ldi	r23, 0x0E	; 14
   137be:	c8 01       	movw	r24, r16
   137c0:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   137c4:	89 2b       	or	r24, r25
   137c6:	21 f0       	breq	.+8      	; 0x137d0 <Read_Config+0x7f6>
   137c8:	f4 01       	movw	r30, r8
            }
            else if( MATCHI (token,"BLOCK_TIME") )
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   137ca:	57 8a       	std	Z+23, r5	; 0x17
   137cc:	46 8a       	std	Z+22, r4	; 0x16
   137ce:	b6 cc       	rjmp	.-1684   	; 0x1313c <Read_Config+0x162>
   137d0:	62 ed       	ldi	r22, 0xD2	; 210
   137d2:	7e e0       	ldi	r23, 0x0E	; 14
   137d4:	c8 01       	movw	r24, r16
   137d6:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
            }
            else if( MATCHI (token,"OPTIMAL_RETRY_TIME") )
   137da:	89 2b       	or	r24, r25
   137dc:	a9 f7       	brne	.-22     	; 0x137c8 <Read_Config+0x7ee>
   137de:	6a ee       	ldi	r22, 0xEA	; 234
   137e0:	7e e0       	ldi	r23, 0x0E	; 14
   137e2:	c8 01       	movw	r24, r16
   137e4:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   137e8:	89 2b       	or	r24, r25
   137ea:	31 f0       	breq	.+12     	; 0x137f8 <Read_Config+0x81e>
   137ec:	d4 01       	movw	r26, r8
   137ee:	59 96       	adiw	r26, 0x19	; 25
   137f0:	5c 92       	st	X, r5
            }
            else if( MATCHI (token,"ACCESS_TIME") )
   137f2:	4e 92       	st	-X, r4
   137f4:	58 97       	sbiw	r26, 0x18	; 24
   137f6:	a2 cc       	rjmp	.-1724   	; 0x1313c <Read_Config+0x162>
   137f8:	6d ef       	ldi	r22, 0xFD	; 253
   137fa:	7e e0       	ldi	r23, 0x0E	; 14
   137fc:	c8 01       	movw	r24, r16
   137fe:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.ACCESS_TIME = val.w;
   13802:	89 2b       	or	r24, r25
   13804:	21 f0       	breq	.+8      	; 0x1380e <Read_Config+0x834>
   13806:	f4 01       	movw	r30, r8
            }
            else if( MATCHI (token,"MAXIMUM_INTERLEAVE") )
   13808:	53 8e       	std	Z+27, r5	; 0x1b
   1380a:	42 8e       	std	Z+26, r4	; 0x1a
   1380c:	97 cc       	rjmp	.-1746   	; 0x1313c <Read_Config+0x162>
   1380e:	69 e0       	ldi	r22, 0x09	; 9
   13810:	7f e0       	ldi	r23, 0x0F	; 15
   13812:	c8 01       	movw	r24, r16
   13814:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13818:	89 2b       	or	r24, r25
   1381a:	21 f0       	breq	.+8      	; 0x13824 <Read_Config+0x84a>
   1381c:	d4 01       	movw	r26, r8
            }
            else if( MATCHI (token,"FIXED_VOLUMES") )
   1381e:	5c 96       	adiw	r26, 0x1c	; 28
   13820:	4c 92       	st	X, r4
   13822:	8c cc       	rjmp	.-1768   	; 0x1313c <Read_Config+0x162>
   13824:	6c e1       	ldi	r22, 0x1C	; 28
   13826:	7f e0       	ldi	r23, 0x0F	; 15
   13828:	c8 01       	movw	r24, r16
   1382a:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.FIXED_VOLUMES = val.b;
   1382e:	89 2b       	or	r24, r25
   13830:	19 f0       	breq	.+6      	; 0x13838 <Read_Config+0x85e>
            }
            else if( MATCHI (token,"REMOVABLE_VOLUMES") )
   13832:	f4 01       	movw	r30, r8
   13834:	45 8e       	std	Z+29, r4	; 0x1d
   13836:	82 cc       	rjmp	.-1788   	; 0x1313c <Read_Config+0x162>
   13838:	6a e2       	ldi	r22, 0x2A	; 42
   1383a:	7f e0       	ldi	r23, 0x0F	; 15
   1383c:	c8 01       	movw	r24, r16
   1383e:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13842:	89 2b       	or	r24, r25
   13844:	21 f0       	breq	.+8      	; 0x1384e <Read_Config+0x874>
   13846:	d4 01       	movw	r26, r8
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", token,lines);
   13848:	5e 96       	adiw	r26, 0x1e	; 30
   1384a:	4c 92       	st	X, r4
   1384c:	77 cc       	rjmp	.-1810   	; 0x1313c <Read_Config+0x162>
   1384e:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13852:	8f 93       	push	r24
   13854:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13858:	8f 93       	push	r24
   1385a:	1f 93       	push	r17
   1385c:	0f 93       	push	r16
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( MATCHI (token,"MAX_CYLINDER") )
   1385e:	84 eb       	ldi	r24, 0xB4	; 180
   13860:	9b e1       	ldi	r25, 0x1B	; 27
   13862:	d5 ce       	rjmp	.-598    	; 0x1360e <Read_Config+0x634>
   13864:	6c e3       	ldi	r22, 0x3C	; 60
   13866:	7f e0       	ldi	r23, 0x0F	; 15
   13868:	c8 01       	movw	r24, r16
   1386a:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->VOLUME.MAX_CYLINDER = val.l;
   1386e:	89 2b       	or	r24, r25
   13870:	09 f1       	breq	.+66     	; 0x138b4 <Read_Config+0x8da>
   13872:	cd 57       	subi	r28, 0x7D	; 125
   13874:	de 4f       	sbci	r29, 0xFE	; 254
   13876:	e8 81       	ld	r30, Y
   13878:	c3 58       	subi	r28, 0x83	; 131
   1387a:	d1 40       	sbci	r29, 0x01	; 1
   1387c:	d4 01       	movw	r26, r8
   1387e:	5f 96       	adiw	r26, 0x1f	; 31
   13880:	ec 93       	st	X, r30
   13882:	5f 97       	sbiw	r26, 0x1f	; 31
   13884:	cc 57       	subi	r28, 0x7C	; 124
   13886:	de 4f       	sbci	r29, 0xFE	; 254
   13888:	f8 81       	ld	r31, Y
   1388a:	c4 58       	subi	r28, 0x84	; 132
   1388c:	d1 40       	sbci	r29, 0x01	; 1
   1388e:	90 96       	adiw	r26, 0x20	; 32
   13890:	fc 93       	st	X, r31
   13892:	90 97       	sbiw	r26, 0x20	; 32
   13894:	cb 57       	subi	r28, 0x7B	; 123
   13896:	de 4f       	sbci	r29, 0xFE	; 254
   13898:	28 81       	ld	r18, Y
   1389a:	c5 58       	subi	r28, 0x85	; 133
   1389c:	d1 40       	sbci	r29, 0x01	; 1
   1389e:	91 96       	adiw	r26, 0x21	; 33
   138a0:	2c 93       	st	X, r18
   138a2:	91 97       	sbiw	r26, 0x21	; 33
   138a4:	ca 57       	subi	r28, 0x7A	; 122
   138a6:	de 4f       	sbci	r29, 0xFE	; 254
   138a8:	38 81       	ld	r19, Y
   138aa:	c6 58       	subi	r28, 0x86	; 134
   138ac:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"MAX_HEAD") )
   138ae:	92 96       	adiw	r26, 0x22	; 34
   138b0:	3c 93       	st	X, r19
   138b2:	44 cc       	rjmp	.-1912   	; 0x1313c <Read_Config+0x162>
   138b4:	69 e4       	ldi	r22, 0x49	; 73
   138b6:	7f e0       	ldi	r23, 0x0F	; 15
   138b8:	c8 01       	movw	r24, r16
   138ba:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->VOLUME.MAX_HEAD = val.b;
   138be:	89 2b       	or	r24, r25
   138c0:	21 f0       	breq	.+8      	; 0x138ca <Read_Config+0x8f0>
   138c2:	d4 01       	movw	r26, r8
            }
            else if( MATCHI (token,"MAX_SECTOR") )
   138c4:	93 96       	adiw	r26, 0x23	; 35
   138c6:	4c 92       	st	X, r4
   138c8:	39 cc       	rjmp	.-1934   	; 0x1313c <Read_Config+0x162>
   138ca:	62 e5       	ldi	r22, 0x52	; 82
   138cc:	7f e0       	ldi	r23, 0x0F	; 15
   138ce:	c8 01       	movw	r24, r16
   138d0:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->VOLUME.MAX_SECTOR = val.w;
   138d4:	89 2b       	or	r24, r25
   138d6:	21 f0       	breq	.+8      	; 0x138e0 <Read_Config+0x906>
   138d8:	f4 01       	movw	r30, r8
            }
            else if( MATCHI (token,"MAX_BLOCK_NUMBER") )
   138da:	55 a2       	std	Z+37, r5	; 0x25
   138dc:	44 a2       	std	Z+36, r4	; 0x24
   138de:	2e cc       	rjmp	.-1956   	; 0x1313c <Read_Config+0x162>
   138e0:	6d e5       	ldi	r22, 0x5D	; 93
   138e2:	7f e0       	ldi	r23, 0x0F	; 15
   138e4:	c8 01       	movw	r24, r16
   138e6:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val.w;
   138ea:	89 2b       	or	r24, r25
   138ec:	51 f0       	breq	.+20     	; 0x13902 <Read_Config+0x928>
   138ee:	61 2c       	mov	r6, r1
   138f0:	71 2c       	mov	r7, r1
   138f2:	d4 01       	movw	r26, r8
   138f4:	96 96       	adiw	r26, 0x26	; 38
   138f6:	4d 92       	st	X+, r4
   138f8:	5d 92       	st	X+, r5
   138fa:	6d 92       	st	X+, r6
            }
            else if( MATCHI (token,"INTERLEAVE") )
   138fc:	7c 92       	st	X, r7
   138fe:	99 97       	sbiw	r26, 0x29	; 41
   13900:	1d cc       	rjmp	.-1990   	; 0x1313c <Read_Config+0x162>
   13902:	61 e1       	ldi	r22, 0x11	; 17
   13904:	7f e0       	ldi	r23, 0x0F	; 15
   13906:	c8 01       	movw	r24, r16
   13908:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                SS80p->VOLUME.INTERLEAVE = val.b;
   1390c:	89 2b       	or	r24, r25
   1390e:	19 f0       	breq	.+6      	; 0x13916 <Read_Config+0x93c>

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", token,lines);
   13910:	f4 01       	movw	r30, r8
   13912:	42 a6       	std	Z+42, r4	; 0x2a
   13914:	13 cc       	rjmp	.-2010   	; 0x1313c <Read_Config+0x162>
   13916:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   1391a:	8f 93       	push	r24
   1391c:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13920:	8f 93       	push	r24
   13922:	1f 93       	push	r17
   13924:	0f 93       	push	r16
   13926:	86 e8       	ldi	r24, 0x86	; 134
   13928:	9b e1       	ldi	r25, 0x1B	; 27
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if( MATCHI (token,"HEADER") )
   1392a:	1f 92       	push	r1
   1392c:	9f 93       	push	r25
   1392e:	8f 93       	push	r24
   13930:	10 c1       	rjmp	.+544    	; 0x13b52 <Read_Config+0xb78>
   13932:	61 e3       	ldi	r22, 0x31	; 49
   13934:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13936:	c8 01       	movw	r24, r16
   13938:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   1393c:	89 2b       	or	r24, r25
                state = AMIGO_HEADER;
   1393e:	39 f0       	breq	.+14     	; 0x1394e <Read_Config+0x974>
   13940:	8a e0       	ldi	r24, 0x0A	; 10
   13942:	90 e0       	ldi	r25, 0x00	; 0
   13944:	dd d9       	rcall	.-3142   	; 0x12d00 <push_state>
            }
            else if( MATCHI (token,"CONFIG") )
   13946:	3b e0       	ldi	r19, 0x0B	; 11
   13948:	c3 2e       	mov	r12, r19
   1394a:	d1 2c       	mov	r13, r1
   1394c:	f7 cb       	rjmp	.-2066   	; 0x1313c <Read_Config+0x162>
   1394e:	6a e2       	ldi	r22, 0x2A	; 42
   13950:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13952:	c8 01       	movw	r24, r16
   13954:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   13958:	89 2b       	or	r24, r25
                state = AMIGO_CONFIG;
   1395a:	39 f0       	breq	.+14     	; 0x1396a <Read_Config+0x990>
   1395c:	8a e0       	ldi	r24, 0x0A	; 10
   1395e:	90 e0       	ldi	r25, 0x00	; 0
   13960:	cf d9       	rcall	.-3170   	; 0x12d00 <push_state>
            }
            else if( MATCHI (token,"GEOMETRY") )
   13962:	2c e0       	ldi	r18, 0x0C	; 12
   13964:	c2 2e       	mov	r12, r18
   13966:	d1 2c       	mov	r13, r1
   13968:	e9 cb       	rjmp	.-2094   	; 0x1313c <Read_Config+0x162>
   1396a:	6e e6       	ldi	r22, 0x6E	; 110
   1396c:	7f e0       	ldi	r23, 0x0F	; 15
   1396e:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13970:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   13974:	89 2b       	or	r24, r25
   13976:	39 f0       	breq	.+14     	; 0x13986 <Read_Config+0x9ac>
                state = AMIGO_GEOMETRY;
   13978:	8a e0       	ldi	r24, 0x0A	; 10
   1397a:	90 e0       	ldi	r25, 0x00	; 0
   1397c:	c1 d9       	rcall	.-3198   	; 0x12d00 <push_state>
   1397e:	9d e0       	ldi	r25, 0x0D	; 13
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", str,lines);
   13980:	c9 2e       	mov	r12, r25
   13982:	d1 2c       	mov	r13, r1
   13984:	db cb       	rjmp	.-2122   	; 0x1313c <Read_Config+0x162>
   13986:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   1398a:	8f 93       	push	r24
   1398c:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13990:	8f 93       	push	r24
   13992:	3f 92       	push	r3
   13994:	2f 92       	push	r2
   13996:	88 e5       	ldi	r24, 0x58	; 88
   13998:	9b e1       	ldi	r25, 0x1B	; 27
   1399a:	1f 92       	push	r1
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( MATCHI (token,"DRIVE") )
   1399c:	9f 93       	push	r25
   1399e:	8f 93       	push	r24
   139a0:	5c c1       	rjmp	.+696    	; 0x13c5a <Read_Config+0xc80>
   139a2:	67 e7       	ldi	r22, 0x77	; 119
   139a4:	7f e0       	ldi	r23, 0x0F	; 15
   139a6:	c8 01       	movw	r24, r16
   139a8:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                //skip this
                printf("Skipping %s, at line:%d\n", str,lines);
   139ac:	89 2b       	or	r24, r25
   139ae:	81 f0       	breq	.+32     	; 0x139d0 <Read_Config+0x9f6>
   139b0:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   139b4:	8f 93       	push	r24
   139b6:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   139ba:	8f 93       	push	r24
   139bc:	3f 92       	push	r3
   139be:	2f 92       	push	r2
   139c0:	8f e3       	ldi	r24, 0x3F	; 63
   139c2:	9b e1       	ldi	r25, 0x1B	; 27
   139c4:	1f 92       	push	r1
   139c6:	9f 93       	push	r25
   139c8:	8f 93       	push	r24
            }
            else if( MATCHI (token,"ADDRESS") )
   139ca:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   139ce:	65 c1       	rjmp	.+714    	; 0x13c9a <Read_Config+0xcc0>
   139d0:	62 e2       	ldi	r22, 0x22	; 34
   139d2:	7e e0       	ldi	r23, 0x0E	; 14
   139d4:	c8 01       	movw	r24, r16
   139d6:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                if(val.b > 31)
   139da:	89 2b       	or	r24, r25
   139dc:	69 f1       	breq	.+90     	; 0x13a38 <Read_Config+0xa5e>
				{
					printf("Fatal AMIGO ADDRESS: %d > 31 disabled at line:%d\n", str,lines);
   139de:	bf e1       	ldi	r27, 0x1F	; 31
   139e0:	b4 15       	cp	r27, r4
   139e2:	c8 f4       	brcc	.+50     	; 0x13a16 <Read_Config+0xa3c>
   139e4:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   139e8:	8f 93       	push	r24
   139ea:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   139ee:	8f 93       	push	r24
   139f0:	3f 92       	push	r3
   139f2:	2f 92       	push	r2
   139f4:	8d e0       	ldi	r24, 0x0D	; 13
   139f6:	9b e1       	ldi	r25, 0x1B	; 27
   139f8:	1f 92       	push	r1
   139fa:	9f 93       	push	r25
					val.b = 0xff;
   139fc:	8f 93       	push	r24
   139fe:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
					++errors;
   13a02:	44 24       	eor	r4, r4
   13a04:	4a 94       	dec	r4
   13a06:	ef ef       	ldi	r30, 0xFF	; 255
   13a08:	ee 1a       	sub	r14, r30
   13a0a:	fe 0a       	sbc	r15, r30
   13a0c:	0f b6       	in	r0, 0x3f	; 63
   13a0e:	f8 94       	cli
				}
                Devices[index].ADDRESS = val.b;
   13a10:	de bf       	out	0x3e, r29	; 62
   13a12:	0f be       	out	0x3f, r0	; 63
   13a14:	cd bf       	out	0x3d, r28	; 61
   13a16:	8b e2       	ldi	r24, 0x2B	; 43
   13a18:	8a 9d       	mul	r24, r10
   13a1a:	f0 01       	movw	r30, r0
   13a1c:	8b 9d       	mul	r24, r11
   13a1e:	f0 0d       	add	r31, r0
   13a20:	11 24       	eor	r1, r1
                AMIGOp->HEADER.ADDRESS = val.b;
   13a22:	ee 5f       	subi	r30, 0xFE	; 254
   13a24:	f0 4e       	sbci	r31, 0xE0	; 224
   13a26:	41 82       	std	Z+1, r4	; 0x01
   13a28:	cf 57       	subi	r28, 0x7F	; 127
   13a2a:	de 4f       	sbci	r29, 0xFE	; 254
   13a2c:	a8 81       	ld	r26, Y
   13a2e:	b9 81       	ldd	r27, Y+1	; 0x01
   13a30:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( MATCHI (token,"PPR") )
   13a32:	d1 40       	sbci	r29, 0x01	; 1
   13a34:	4c 92       	st	X, r4
   13a36:	82 cb       	rjmp	.-2300   	; 0x1313c <Read_Config+0x162>
   13a38:	6f e4       	ldi	r22, 0x4F	; 79
   13a3a:	7e e0       	ldi	r23, 0x0E	; 14
   13a3c:	c8 01       	movw	r24, r16
   13a3e:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                if(val.b > 7)
   13a42:	89 2b       	or	r24, r25
   13a44:	b1 f1       	breq	.+108    	; 0x13ab2 <Read_Config+0xad8>
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   13a46:	b7 e0       	ldi	r27, 0x07	; 7
   13a48:	b4 15       	cp	r27, r4
   13a4a:	08 f5       	brcc	.+66     	; 0x13a8e <Read_Config+0xab4>
   13a4c:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13a50:	8f 93       	push	r24
   13a52:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13a56:	8f 93       	push	r24
   13a58:	3f 92       	push	r3
   13a5a:	2f 92       	push	r2
   13a5c:	1f 92       	push	r1
   13a5e:	c5 56       	subi	r28, 0x65	; 101
   13a60:	de 4f       	sbci	r29, 0xFE	; 254
   13a62:	e8 81       	ld	r30, Y
   13a64:	cb 59       	subi	r28, 0x9B	; 155
   13a66:	d1 40       	sbci	r29, 0x01	; 1
   13a68:	ef 93       	push	r30
   13a6a:	c6 56       	subi	r28, 0x66	; 102
   13a6c:	de 4f       	sbci	r29, 0xFE	; 254
   13a6e:	f8 81       	ld	r31, Y
   13a70:	ca 59       	subi	r28, 0x9A	; 154
   13a72:	d1 40       	sbci	r29, 0x01	; 1
					val.b = 0xff;
   13a74:	ff 93       	push	r31
   13a76:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
					++errors;
   13a7a:	44 24       	eor	r4, r4
   13a7c:	4a 94       	dec	r4
   13a7e:	2f ef       	ldi	r18, 0xFF	; 255
   13a80:	e2 1a       	sub	r14, r18
   13a82:	f2 0a       	sbc	r15, r18
   13a84:	0f b6       	in	r0, 0x3f	; 63
   13a86:	f8 94       	cli
				}
                Devices[index].PPR = val.b;
   13a88:	de bf       	out	0x3e, r29	; 62
   13a8a:	0f be       	out	0x3f, r0	; 63
   13a8c:	cd bf       	out	0x3d, r28	; 61
   13a8e:	8b e2       	ldi	r24, 0x2B	; 43
   13a90:	8a 9d       	mul	r24, r10
   13a92:	f0 01       	movw	r30, r0
   13a94:	8b 9d       	mul	r24, r11
   13a96:	f0 0d       	add	r31, r0
   13a98:	11 24       	eor	r1, r1
                AMIGOp->HEADER.PPR = val.b;
   13a9a:	ee 5f       	subi	r30, 0xFE	; 254
   13a9c:	f0 4e       	sbci	r31, 0xE0	; 224
   13a9e:	42 82       	std	Z+2, r4	; 0x02
   13aa0:	cf 57       	subi	r28, 0x7F	; 127
   13aa2:	de 4f       	sbci	r29, 0xFE	; 254
   13aa4:	a8 81       	ld	r26, Y
   13aa6:	b9 81       	ldd	r27, Y+1	; 0x01
   13aa8:	c1 58       	subi	r28, 0x81	; 129
   13aaa:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"FILE") )
   13aac:	11 96       	adiw	r26, 0x01	; 1
   13aae:	4c 92       	st	X, r4
   13ab0:	45 cb       	rjmp	.-2422   	; 0x1313c <Read_Config+0x162>
   13ab2:	63 e5       	ldi	r22, 0x53	; 83
   13ab4:	7e e0       	ldi	r23, 0x0E	; 14
   13ab6:	c8 01       	movw	r24, r16
   13ab8:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
   13abc:	89 2b       	or	r24, r25
   13abe:	69 f0       	breq	.+26     	; 0x13ada <Read_Config+0xb00>
   13ac0:	ce 01       	movw	r24, r28
   13ac2:	01 96       	adiw	r24, 0x01	; 1
   13ac4:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <stralloc>
   13ac8:	cf 57       	subi	r28, 0x7F	; 127
   13aca:	de 4f       	sbci	r29, 0xFE	; 254
   13acc:	e8 81       	ld	r30, Y
   13ace:	f9 81       	ldd	r31, Y+1	; 0x01
   13ad0:	c1 58       	subi	r28, 0x81	; 129
   13ad2:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   13ad4:	93 83       	std	Z+3, r25	; 0x03
   13ad6:	82 83       	std	Z+2, r24	; 0x02
   13ad8:	31 cb       	rjmp	.-2462   	; 0x1313c <Read_Config+0x162>
   13ada:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13ade:	8f 93       	push	r24
   13ae0:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13ae4:	8f 93       	push	r24
   13ae6:	3f 92       	push	r3
   13ae8:	2f 92       	push	r2
   13aea:	1f 92       	push	r1
   13aec:	c8 56       	subi	r28, 0x68	; 104
   13aee:	de 4f       	sbci	r29, 0xFE	; 254
   13af0:	f8 81       	ld	r31, Y
   13af2:	c8 59       	subi	r28, 0x98	; 152
   13af4:	d1 40       	sbci	r29, 0x01	; 1
   13af6:	ff 93       	push	r31
   13af8:	c9 56       	subi	r28, 0x69	; 105
   13afa:	de 4f       	sbci	r29, 0xFE	; 254
   13afc:	28 81       	ld	r18, Y
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( MATCHI (token,"ID") )
   13afe:	c7 59       	subi	r28, 0x97	; 151
   13b00:	d1 40       	sbci	r29, 0x01	; 1
   13b02:	aa c0       	rjmp	.+340    	; 0x13c58 <Read_Config+0xc7e>
   13b04:	68 e5       	ldi	r22, 0x58	; 88
   13b06:	7e e0       	ldi	r23, 0x0E	; 14
   13b08:	c8 01       	movw	r24, r16
   13b0a:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                AMIGOp->CONFIG.ID = val.w;
   13b0e:	89 2b       	or	r24, r25
   13b10:	59 f0       	breq	.+22     	; 0x13b28 <Read_Config+0xb4e>
   13b12:	cf 57       	subi	r28, 0x7F	; 127
   13b14:	de 4f       	sbci	r29, 0xFE	; 254
   13b16:	a8 81       	ld	r26, Y
   13b18:	b9 81       	ldd	r27, Y+1	; 0x01
   13b1a:	c1 58       	subi	r28, 0x81	; 129
   13b1c:	d1 40       	sbci	r29, 0x01	; 1
   13b1e:	15 96       	adiw	r26, 0x05	; 5
   13b20:	5c 92       	st	X, r5
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   13b22:	4e 92       	st	-X, r4
   13b24:	14 97       	sbiw	r26, 0x04	; 4
   13b26:	0a cb       	rjmp	.-2540   	; 0x1313c <Read_Config+0x162>
   13b28:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13b2c:	8f 93       	push	r24
   13b2e:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13b32:	8f 93       	push	r24
   13b34:	3f 92       	push	r3
   13b36:	2f 92       	push	r2
   13b38:	1f 92       	push	r1
   13b3a:	cb 56       	subi	r28, 0x6B	; 107
   13b3c:	de 4f       	sbci	r29, 0xFE	; 254
   13b3e:	b8 81       	ld	r27, Y
   13b40:	c5 59       	subi	r28, 0x95	; 149
   13b42:	d1 40       	sbci	r29, 0x01	; 1
   13b44:	bf 93       	push	r27
   13b46:	cc 56       	subi	r28, 0x6C	; 108
   13b48:	de 4f       	sbci	r29, 0xFE	; 254
   13b4a:	e8 81       	ld	r30, Y
   13b4c:	c4 59       	subi	r28, 0x94	; 148
   13b4e:	d1 40       	sbci	r29, 0x01	; 1
                ++errors;
   13b50:	ef 93       	push	r30
   13b52:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13b56:	ff ef       	ldi	r31, 0xFF	; 255
            }
            break;

        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
   13b58:	ef 1a       	sub	r14, r31
   13b5a:	ff 0a       	sbc	r15, r31
   13b5c:	9e c0       	rjmp	.+316    	; 0x13c9a <Read_Config+0xcc0>
   13b5e:	6d e7       	ldi	r22, 0x7D	; 125
   13b60:	7f e0       	ldi	r23, 0x0F	; 15
   13b62:	c8 01       	movw	r24, r16
   13b64:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                if(val.w > 0x1000)
   13b68:	89 2b       	or	r24, r25
   13b6a:	81 f1       	breq	.+96     	; 0x13bcc <Read_Config+0xbf2>
   13b6c:	31 e0       	ldi	r19, 0x01	; 1
   13b6e:	43 16       	cp	r4, r19
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   13b70:	30 e1       	ldi	r19, 0x10	; 16
   13b72:	53 06       	cpc	r5, r19
   13b74:	00 f1       	brcs	.+64     	; 0x13bb6 <Read_Config+0xbdc>
   13b76:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13b7a:	8f 93       	push	r24
   13b7c:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13b80:	8f 93       	push	r24
   13b82:	1f 92       	push	r1
   13b84:	ce 56       	subi	r28, 0x6E	; 110
   13b86:	de 4f       	sbci	r29, 0xFE	; 254
   13b88:	48 81       	ld	r20, Y
   13b8a:	c2 59       	subi	r28, 0x92	; 146
   13b8c:	d1 40       	sbci	r29, 0x01	; 1
   13b8e:	4f 93       	push	r20
   13b90:	cf 56       	subi	r28, 0x6F	; 111
   13b92:	de 4f       	sbci	r29, 0xFE	; 254
   13b94:	88 81       	ld	r24, Y
   13b96:	c1 59       	subi	r28, 0x91	; 145
   13b98:	d1 40       	sbci	r29, 0x01	; 1
					val.w = 256;
   13b9a:	8f 93       	push	r24
   13b9c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                    ++errors;
   13ba0:	41 2c       	mov	r4, r1
   13ba2:	55 24       	eor	r5, r5
   13ba4:	53 94       	inc	r5
   13ba6:	9f ef       	ldi	r25, 0xFF	; 255
   13ba8:	e9 1a       	sub	r14, r25
   13baa:	f9 0a       	sbc	r15, r25
   13bac:	0f 90       	pop	r0
   13bae:	0f 90       	pop	r0
				}
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13bb0:	0f 90       	pop	r0
   13bb2:	0f 90       	pop	r0
   13bb4:	0f 90       	pop	r0
   13bb6:	cf 57       	subi	r28, 0x7F	; 127
   13bb8:	de 4f       	sbci	r29, 0xFE	; 254
   13bba:	a8 81       	ld	r26, Y
   13bbc:	b9 81       	ldd	r27, Y+1	; 0x01
   13bbe:	c1 58       	subi	r28, 0x81	; 129
   13bc0:	d1 40       	sbci	r29, 0x01	; 1
   13bc2:	17 96       	adiw	r26, 0x07	; 7
   13bc4:	5c 92       	st	X, r5
            }
            else if( MATCHI (token,"SECTORS_PER_TRACK") )
   13bc6:	4e 92       	st	-X, r4
   13bc8:	16 97       	sbiw	r26, 0x06	; 6
   13bca:	b8 ca       	rjmp	.-2704   	; 0x1313c <Read_Config+0x162>
   13bcc:	6e e8       	ldi	r22, 0x8E	; 142
   13bce:	7f e0       	ldi	r23, 0x0F	; 15
   13bd0:	c8 01       	movw	r24, r16
   13bd2:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13bd6:	89 2b       	or	r24, r25
   13bd8:	49 f0       	breq	.+18     	; 0x13bec <Read_Config+0xc12>
   13bda:	cf 57       	subi	r28, 0x7F	; 127
   13bdc:	de 4f       	sbci	r29, 0xFE	; 254
   13bde:	e8 81       	ld	r30, Y
   13be0:	f9 81       	ldd	r31, Y+1	; 0x01
   13be2:	c1 58       	subi	r28, 0x81	; 129
   13be4:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"HEADS") )
   13be6:	51 86       	std	Z+9, r5	; 0x09
   13be8:	40 86       	std	Z+8, r4	; 0x08
   13bea:	a8 ca       	rjmp	.-2736   	; 0x1313c <Read_Config+0x162>
   13bec:	60 ea       	ldi	r22, 0xA0	; 160
   13bee:	7f e0       	ldi	r23, 0x0F	; 15
   13bf0:	c8 01       	movw	r24, r16
   13bf2:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                AMIGOp->GEOMETRY.HEADS = val.w;
   13bf6:	89 2b       	or	r24, r25
   13bf8:	59 f0       	breq	.+22     	; 0x13c10 <Read_Config+0xc36>
   13bfa:	cf 57       	subi	r28, 0x7F	; 127
   13bfc:	de 4f       	sbci	r29, 0xFE	; 254
   13bfe:	a8 81       	ld	r26, Y
   13c00:	b9 81       	ldd	r27, Y+1	; 0x01
   13c02:	c1 58       	subi	r28, 0x81	; 129
   13c04:	d1 40       	sbci	r29, 0x01	; 1
   13c06:	1b 96       	adiw	r26, 0x0b	; 11
   13c08:	5c 92       	st	X, r5
            }
            else if( MATCHI (token,"CYLINDERS") )
   13c0a:	4e 92       	st	-X, r4
   13c0c:	1a 97       	sbiw	r26, 0x0a	; 10
   13c0e:	96 ca       	rjmp	.-2772   	; 0x1313c <Read_Config+0x162>
   13c10:	66 ea       	ldi	r22, 0xA6	; 166
   13c12:	7f e0       	ldi	r23, 0x0F	; 15
   13c14:	c8 01       	movw	r24, r16
   13c16:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13c1a:	89 2b       	or	r24, r25
   13c1c:	49 f0       	breq	.+18     	; 0x13c30 <Read_Config+0xc56>
   13c1e:	cf 57       	subi	r28, 0x7F	; 127
   13c20:	de 4f       	sbci	r29, 0xFE	; 254
   13c22:	e8 81       	ld	r30, Y
   13c24:	f9 81       	ldd	r31, Y+1	; 0x01
   13c26:	c1 58       	subi	r28, 0x81	; 129
   13c28:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   13c2a:	55 86       	std	Z+13, r5	; 0x0d
   13c2c:	44 86       	std	Z+12, r4	; 0x0c
   13c2e:	86 ca       	rjmp	.-2804   	; 0x1313c <Read_Config+0x162>
   13c30:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13c34:	8f 93       	push	r24
   13c36:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13c3a:	8f 93       	push	r24
   13c3c:	3f 92       	push	r3
   13c3e:	2f 92       	push	r2
   13c40:	1f 92       	push	r1
   13c42:	c1 57       	subi	r28, 0x71	; 113
   13c44:	de 4f       	sbci	r29, 0xFE	; 254
   13c46:	f8 81       	ld	r31, Y
   13c48:	cf 58       	subi	r28, 0x8F	; 143
   13c4a:	d1 40       	sbci	r29, 0x01	; 1
   13c4c:	ff 93       	push	r31
   13c4e:	c2 57       	subi	r28, 0x72	; 114
   13c50:	de 4f       	sbci	r29, 0xFE	; 254
   13c52:	28 81       	ld	r18, Y
   13c54:	ce 58       	subi	r28, 0x8E	; 142
   13c56:	d1 40       	sbci	r29, 0x01	; 1
                ++errors;
   13c58:	2f 93       	push	r18
   13c5a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13c5e:	3f ef       	ldi	r19, 0xFF	; 255
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   13c60:	e3 1a       	sub	r14, r19
   13c62:	f3 0a       	sbc	r15, r19
   13c64:	1a c0       	rjmp	.+52     	; 0x13c9a <Read_Config+0xcc0>
   13c66:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13c6a:	8f 93       	push	r24
   13c6c:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13c70:	8f 93       	push	r24
   13c72:	df 92       	push	r13
   13c74:	cf 92       	push	r12
   13c76:	1f 92       	push	r1
   13c78:	c4 57       	subi	r28, 0x74	; 116
   13c7a:	de 4f       	sbci	r29, 0xFE	; 254
   13c7c:	98 81       	ld	r25, Y
   13c7e:	cc 58       	subi	r28, 0x8C	; 140
   13c80:	d1 40       	sbci	r29, 0x01	; 1
   13c82:	9f 93       	push	r25
   13c84:	c5 57       	subi	r28, 0x75	; 117
   13c86:	de 4f       	sbci	r29, 0xFE	; 254
   13c88:	a8 81       	ld	r26, Y
   13c8a:	cb 58       	subi	r28, 0x8B	; 139
   13c8c:	d1 40       	sbci	r29, 0x01	; 1
            ++errors;
   13c8e:	af 93       	push	r26
   13c90:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            break;
   13c94:	bf ef       	ldi	r27, 0xFF	; 255
   13c96:	eb 1a       	sub	r14, r27
   13c98:	fb 0a       	sbc	r15, r27
   13c9a:	0f b6       	in	r0, 0x3f	; 63
   13c9c:	f8 94       	cli
   13c9e:	de bf       	out	0x3e, r29	; 62

        } // switch
    } //while
    if(state != START_STATE)
   13ca0:	0f be       	out	0x3f, r0	; 63
   13ca2:	cd bf       	out	0x3d, r28	; 61
   13ca4:	4b ca       	rjmp	.-2922   	; 0x1313c <Read_Config+0x162>
    {
        printf("Missing END statement at line:%d\n", lines);
   13ca6:	c1 14       	cp	r12, r1
   13ca8:	d1 04       	cpc	r13, r1
   13caa:	a9 f0       	breq	.+42     	; 0x13cd6 <Read_Config+0xcfc>
   13cac:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13cb0:	8f 93       	push	r24
   13cb2:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13cb6:	8f 93       	push	r24
   13cb8:	83 ec       	ldi	r24, 0xC3	; 195
   13cba:	99 e1       	ldi	r25, 0x19	; 25
   13cbc:	1f 92       	push	r1
   13cbe:	9f 93       	push	r25
        ++errors;
   13cc0:	8f 93       	push	r24
   13cc2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13cc6:	ff ef       	ldi	r31, 0xFF	; 255
   13cc8:	ef 1a       	sub	r14, r31
   13cca:	ff 0a       	sbc	r15, r31
   13ccc:	0f 90       	pop	r0
   13cce:	0f 90       	pop	r0
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13cd0:	0f 90       	pop	r0
   13cd2:	0f 90       	pop	r0
   13cd4:	0f 90       	pop	r0
   13cd6:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines+0x1>
   13cda:	8f 93       	push	r24
   13cdc:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <lines>
   13ce0:	8f 93       	push	r24
   13ce2:	86 ea       	ldi	r24, 0xA6	; 166
   13ce4:	99 e1       	ldi	r25, 0x19	; 25
   13ce6:	1f 92       	push	r1
   13ce8:	9f 93       	push	r25
    if(errors)
   13cea:	8f 93       	push	r24
   13cec:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13cf0:	0f 90       	pop	r0
   13cf2:	0f 90       	pop	r0
   13cf4:	0f 90       	pop	r0
   13cf6:	0f 90       	pop	r0
   13cf8:	0f 90       	pop	r0
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13cfa:	e1 14       	cp	r14, r1
   13cfc:	f1 04       	cpc	r15, r1
   13cfe:	71 f0       	breq	.+28     	; 0x13d1c <Read_Config+0xd42>
   13d00:	ff 92       	push	r15
   13d02:	ef 92       	push	r14
   13d04:	8f e7       	ldi	r24, 0x7F	; 127
   13d06:	99 e1       	ldi	r25, 0x19	; 25
   13d08:	1f 92       	push	r1
   13d0a:	9f 93       	push	r25
   13d0c:	8f 93       	push	r24
   13d0e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13d12:	0f 90       	pop	r0

    ret = fclose(cfg);
   13d14:	0f 90       	pop	r0
   13d16:	0f 90       	pop	r0
   13d18:	0f 90       	pop	r0
   13d1a:	0f 90       	pop	r0
   13d1c:	c7 57       	subi	r28, 0x77	; 119
   13d1e:	de 4f       	sbci	r29, 0xFE	; 254
   13d20:	88 81       	ld	r24, Y
   13d22:	99 81       	ldd	r25, Y+1	; 0x01
    if(ret == EOF)
   13d24:	c9 58       	subi	r28, 0x89	; 137
   13d26:	d1 40       	sbci	r29, 0x01	; 1
    {
        perror("Read_Config - close error");
   13d28:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
   13d2c:	01 96       	adiw	r24, 0x01	; 1
   13d2e:	39 f4       	brne	.+14     	; 0x13d3e <Read_Config+0xd64>
        ++errors;
   13d30:	80 eb       	ldi	r24, 0xB0	; 176
   13d32:	9f e0       	ldi	r25, 0x0F	; 15
   13d34:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <perror>
    }

	// Post process device values
	Post_Config();
   13d38:	3f ef       	ldi	r19, 0xFF	; 255

    return(errors);
   13d3a:	e3 1a       	sub	r14, r19
}
   13d3c:	f3 0a       	sbc	r15, r19
   13d3e:	bb d8       	rcall	.-3722   	; 0x12eb6 <Post_Config>
   13d40:	c7 01       	movw	r24, r14
   13d42:	c4 56       	subi	r28, 0x64	; 100
   13d44:	de 4f       	sbci	r29, 0xFE	; 254
   13d46:	e2 e1       	ldi	r30, 0x12	; 18
   13d48:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00013d4c <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   13d4c:	cf 92       	push	r12
   13d4e:	df 92       	push	r13
   13d50:	ef 92       	push	r14
   13d52:	0f 93       	push	r16
   13d54:	1f 93       	push	r17
   13d56:	cf 93       	push	r28
   13d58:	df 93       	push	r29
   13d5a:	cd b7       	in	r28, 0x3d	; 61
   13d5c:	de b7       	in	r29, 0x3e	; 62
   13d5e:	c0 54       	subi	r28, 0x40	; 64
   13d60:	d1 09       	sbc	r29, r1
   13d62:	0f b6       	in	r0, 0x3f	; 63
   13d64:	f8 94       	cli
   13d66:	de bf       	out	0x3e, r29	; 62
   13d68:	0f be       	out	0x3f, r0	; 63
   13d6a:	cd bf       	out	0x3d, r28	; 61
   13d6c:	6b 01       	movw	r12, r22
   13d6e:	e8 2e       	mov	r14, r24
   13d70:	75 2f       	mov	r23, r21
   13d72:	de 01       	movw	r26, r28
   13d74:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   13d76:	80 e0       	ldi	r24, 0x00	; 0
   13d78:	90 e0       	ldi	r25, 0x00	; 0
   13d7a:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   13d7c:	f6 01       	movw	r30, r12
   13d7e:	5e 2d       	mov	r21, r14
   13d80:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
   13d84:	66 23       	and	r22, r22
   13d86:	51 f0       	breq	.+20     	; 0x13d9c <print_var_P+0x50>
   13d88:	8e 33       	cpi	r24, 0x3E	; 62
   13d8a:	91 05       	cpc	r25, r1
   13d8c:	39 f0       	breq	.+14     	; 0x13d9c <print_var_P+0x50>
        tmp[i++] = *str++;
   13d8e:	01 96       	adiw	r24, 0x01	; 1
   13d90:	5f ef       	ldi	r21, 0xFF	; 255
   13d92:	c5 1a       	sub	r12, r21
   13d94:	d5 0a       	sbc	r13, r21
   13d96:	e5 0a       	sbc	r14, r21
   13d98:	6d 93       	st	X+, r22
   13d9a:	f0 cf       	rjmp	.-32     	; 0x13d7c <print_var_P+0x30>
    tmp[i++] = 0;
   13d9c:	f8 01       	movw	r30, r16
   13d9e:	e8 0f       	add	r30, r24
   13da0:	f9 1f       	adc	r31, r25
   13da2:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   13da4:	7f 93       	push	r23
   13da6:	4f 93       	push	r20
   13da8:	3f 93       	push	r19
   13daa:	2f 93       	push	r18
   13dac:	7f 93       	push	r23
   13dae:	4f 93       	push	r20
   13db0:	3f 93       	push	r19
   13db2:	2f 93       	push	r18
   13db4:	1f 93       	push	r17
   13db6:	0f 93       	push	r16
   13db8:	86 e6       	ldi	r24, 0x66	; 102
   13dba:	99 e1       	ldi	r25, 0x19	; 25
   13dbc:	1f 92       	push	r1
   13dbe:	9f 93       	push	r25
   13dc0:	8f 93       	push	r24
   13dc2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
   13dc6:	0f b6       	in	r0, 0x3f	; 63
   13dc8:	f8 94       	cli
   13dca:	de bf       	out	0x3e, r29	; 62
   13dcc:	0f be       	out	0x3f, r0	; 63
   13dce:	cd bf       	out	0x3d, r28	; 61
   13dd0:	c0 5c       	subi	r28, 0xC0	; 192
   13dd2:	df 4f       	sbci	r29, 0xFF	; 255
   13dd4:	0f b6       	in	r0, 0x3f	; 63
   13dd6:	f8 94       	cli
   13dd8:	de bf       	out	0x3e, r29	; 62
   13dda:	0f be       	out	0x3f, r0	; 63
   13ddc:	cd bf       	out	0x3d, r28	; 61
   13dde:	df 91       	pop	r29
   13de0:	cf 91       	pop	r28
   13de2:	1f 91       	pop	r17
   13de4:	0f 91       	pop	r16
   13de6:	ef 90       	pop	r14
   13de8:	df 90       	pop	r13
   13dea:	cf 90       	pop	r12
   13dec:	08 95       	ret

00013dee <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   13dee:	cf 92       	push	r12
   13df0:	df 92       	push	r13
   13df2:	ef 92       	push	r14
   13df4:	cf 93       	push	r28
   13df6:	df 93       	push	r29
   13df8:	cd b7       	in	r28, 0x3d	; 61
   13dfa:	de b7       	in	r29, 0x3e	; 62
   13dfc:	c0 54       	subi	r28, 0x40	; 64
   13dfe:	d1 09       	sbc	r29, r1
   13e00:	0f b6       	in	r0, 0x3f	; 63
   13e02:	f8 94       	cli
   13e04:	de bf       	out	0x3e, r29	; 62
   13e06:	0f be       	out	0x3f, r0	; 63
   13e08:	cd bf       	out	0x3d, r28	; 61
   13e0a:	6b 01       	movw	r12, r22
   13e0c:	e8 2e       	mov	r14, r24
   13e0e:	75 2f       	mov	r23, r21
   13e10:	de 01       	movw	r26, r28
   13e12:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   13e14:	80 e0       	ldi	r24, 0x00	; 0
   13e16:	90 e0       	ldi	r25, 0x00	; 0
   13e18:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   13e1a:	f6 01       	movw	r30, r12
   13e1c:	5e 2d       	mov	r21, r14
   13e1e:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__xload_1>
   13e22:	66 23       	and	r22, r22
   13e24:	51 f0       	breq	.+20     	; 0x13e3a <print_str_P+0x4c>
   13e26:	8e 33       	cpi	r24, 0x3E	; 62
   13e28:	91 05       	cpc	r25, r1
   13e2a:	39 f0       	breq	.+14     	; 0x13e3a <print_str_P+0x4c>
        tmp[i++] = *str++;
   13e2c:	01 96       	adiw	r24, 0x01	; 1
   13e2e:	5f ef       	ldi	r21, 0xFF	; 255
   13e30:	c5 1a       	sub	r12, r21
   13e32:	d5 0a       	sbc	r13, r21
   13e34:	e5 0a       	sbc	r14, r21
   13e36:	6d 93       	st	X+, r22
   13e38:	f0 cf       	rjmp	.-32     	; 0x13e1a <print_str_P+0x2c>
    tmp[i++] = 0;
   13e3a:	f9 01       	movw	r30, r18
   13e3c:	e8 0f       	add	r30, r24
   13e3e:	f9 1f       	adc	r31, r25
   13e40:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   13e42:	7f 93       	push	r23
   13e44:	4f 93       	push	r20
   13e46:	3f 93       	push	r19
   13e48:	2f 93       	push	r18
   13e4a:	84 e5       	ldi	r24, 0x54	; 84
   13e4c:	99 e1       	ldi	r25, 0x19	; 25
   13e4e:	1f 92       	push	r1
   13e50:	9f 93       	push	r25
   13e52:	8f 93       	push	r24
   13e54:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
   13e58:	0f b6       	in	r0, 0x3f	; 63
   13e5a:	f8 94       	cli
   13e5c:	de bf       	out	0x3e, r29	; 62
   13e5e:	0f be       	out	0x3f, r0	; 63
   13e60:	cd bf       	out	0x3d, r28	; 61
   13e62:	c0 5c       	subi	r28, 0xC0	; 192
   13e64:	df 4f       	sbci	r29, 0xFF	; 255
   13e66:	0f b6       	in	r0, 0x3f	; 63
   13e68:	f8 94       	cli
   13e6a:	de bf       	out	0x3e, r29	; 62
   13e6c:	0f be       	out	0x3f, r0	; 63
   13e6e:	cd bf       	out	0x3d, r28	; 61
   13e70:	df 91       	pop	r29
   13e72:	cf 91       	pop	r28
   13e74:	ef 90       	pop	r14
   13e76:	df 90       	pop	r13
   13e78:	cf 90       	pop	r12
   13e7a:	08 95       	ret

00013e7c <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   13e7c:	2f 92       	push	r2
   13e7e:	3f 92       	push	r3
   13e80:	4f 92       	push	r4
   13e82:	6f 92       	push	r6
   13e84:	7f 92       	push	r7
   13e86:	8f 92       	push	r8
   13e88:	af 92       	push	r10
   13e8a:	bf 92       	push	r11
   13e8c:	cf 92       	push	r12
   13e8e:	df 92       	push	r13
   13e90:	ef 92       	push	r14
   13e92:	0f 93       	push	r16
   13e94:	1f 93       	push	r17
   13e96:	cf 93       	push	r28
   13e98:	df 93       	push	r29
   13e9a:	cd b7       	in	r28, 0x3d	; 61
   13e9c:	de b7       	in	r29, 0x3e	; 62
   13e9e:	2b 97       	sbiw	r28, 0x0b	; 11
   13ea0:	0f b6       	in	r0, 0x3f	; 63
   13ea2:	f8 94       	cli
   13ea4:	de bf       	out	0x3e, r29	; 62
   13ea6:	0f be       	out	0x3f, r0	; 63
   13ea8:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   13eaa:	82 e3       	ldi	r24, 0x32	; 50
   13eac:	99 e1       	ldi	r25, 0x19	; 25
   13eae:	1f 92       	push	r1
   13eb0:	9f 93       	push	r25
   13eb2:	8f 93       	push	r24
   13eb4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13eb8:	02 e0       	ldi	r16, 0x02	; 2
   13eba:	1f e1       	ldi	r17, 0x1F	; 31
   13ebc:	0f 90       	pop	r0
   13ebe:	0f 90       	pop	r0
   13ec0:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13ec2:	81 e9       	ldi	r24, 0x91	; 145
   13ec4:	98 e1       	ldi	r25, 0x18	; 24
   13ec6:	9c 01       	movw	r18, r24
   13ec8:	40 e0       	ldi	r20, 0x00	; 0
   13eca:	29 83       	std	Y+1, r18	; 0x01
   13ecc:	3a 83       	std	Y+2, r19	; 0x02
   13ece:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13ed0:	8a e7       	ldi	r24, 0x7A	; 122
   13ed2:	98 e1       	ldi	r25, 0x18	; 24
   13ed4:	9c 01       	movw	r18, r24
   13ed6:	40 e0       	ldi	r20, 0x00	; 0
   13ed8:	2c 83       	std	Y+4, r18	; 0x04
   13eda:	3d 83       	std	Y+5, r19	; 0x05
   13edc:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13ede:	83 e6       	ldi	r24, 0x63	; 99
   13ee0:	98 e1       	ldi	r25, 0x18	; 24
   13ee2:	9c 01       	movw	r18, r24
   13ee4:	40 e0       	ldi	r20, 0x00	; 0
   13ee6:	2f 83       	std	Y+7, r18	; 0x07
   13ee8:	38 87       	std	Y+8, r19	; 0x08
   13eea:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13eec:	86 ed       	ldi	r24, 0xD6	; 214
   13eee:	98 e1       	ldi	r25, 0x18	; 24
   13ef0:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13ef2:	8f eb       	ldi	r24, 0xBF	; 191
   13ef4:	98 e1       	ldi	r25, 0x18	; 24
   13ef6:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13ef8:	88 ea       	ldi	r24, 0xA8	; 168
   13efa:	98 e1       	ldi	r25, 0x18	; 24
   13efc:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13efe:	8b e1       	ldi	r24, 0x1B	; 27
   13f00:	a8 2e       	mov	r10, r24
   13f02:	89 e1       	ldi	r24, 0x19	; 25
   13f04:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13f06:	f8 01       	movw	r30, r16
   13f08:	80 81       	ld	r24, Z
   13f0a:	88 23       	and	r24, r24
   13f0c:	09 f4       	brne	.+2      	; 0x13f10 <display_Addresses+0x94>
   13f0e:	8a c0       	rjmp	.+276    	; 0x14024 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   13f10:	f1 81       	ldd	r31, Z+1	; 0x01
   13f12:	2f 2f       	mov	r18, r31
   13f14:	30 e0       	ldi	r19, 0x00	; 0
   13f16:	3b 87       	std	Y+11, r19	; 0x0b
   13f18:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   13f1a:	83 30       	cpi	r24, 0x03	; 3
   13f1c:	49 f5       	brne	.+82     	; 0x13f70 <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13f1e:	c9 01       	movw	r24, r18
   13f20:	80 96       	adiw	r24, 0x20	; 32
   13f22:	9f 93       	push	r25
   13f24:	8f 93       	push	r24
   13f26:	c5 01       	movw	r24, r10
   13f28:	1f 92       	push	r1
   13f2a:	9f 93       	push	r25
   13f2c:	af 92       	push	r10
   13f2e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   13f32:	8a 85       	ldd	r24, Y+10	; 0x0a
   13f34:	9b 85       	ldd	r25, Y+11	; 0x0b
   13f36:	80 5c       	subi	r24, 0xC0	; 192
   13f38:	9f 4f       	sbci	r25, 0xFF	; 255
   13f3a:	9f 93       	push	r25
   13f3c:	8f 93       	push	r24
   13f3e:	84 e0       	ldi	r24, 0x04	; 4
   13f40:	99 e1       	ldi	r25, 0x19	; 25
   13f42:	1f 92       	push	r1
   13f44:	9f 93       	push	r25
   13f46:	8f 93       	push	r24
   13f48:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   13f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
   13f4e:	9b 85       	ldd	r25, Y+11	; 0x0b
   13f50:	80 5a       	subi	r24, 0xA0	; 160
   13f52:	9f 4f       	sbci	r25, 0xFF	; 255
   13f54:	9f 93       	push	r25
   13f56:	8f 93       	push	r24
   13f58:	8d ee       	ldi	r24, 0xED	; 237
   13f5a:	98 e1       	ldi	r25, 0x18	; 24
   13f5c:	1f 92       	push	r1
   13f5e:	9f 93       	push	r25
   13f60:	8f 93       	push	r24
   13f62:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13f66:	0f b6       	in	r0, 0x3f	; 63
   13f68:	f8 94       	cli
   13f6a:	de bf       	out	0x3e, r29	; 62
   13f6c:	0f be       	out	0x3f, r0	; 63
   13f6e:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13f70:	f8 01       	movw	r30, r16
   13f72:	80 81       	ld	r24, Z
   13f74:	81 30       	cpi	r24, 0x01	; 1
   13f76:	29 f5       	brne	.+74     	; 0x13fc2 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13f78:	8a 85       	ldd	r24, Y+10	; 0x0a
   13f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
   13f7c:	80 96       	adiw	r24, 0x20	; 32
   13f7e:	9f 93       	push	r25
   13f80:	8f 93       	push	r24
   13f82:	1f 92       	push	r1
   13f84:	df 92       	push	r13
   13f86:	cf 92       	push	r12
   13f88:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
   13f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
   13f90:	80 5c       	subi	r24, 0xC0	; 192
   13f92:	9f 4f       	sbci	r25, 0xFF	; 255
   13f94:	9f 93       	push	r25
   13f96:	8f 93       	push	r24
   13f98:	1f 92       	push	r1
   13f9a:	7f 92       	push	r7
   13f9c:	6f 92       	push	r6
   13f9e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
   13fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
   13fa6:	80 5a       	subi	r24, 0xA0	; 160
   13fa8:	9f 4f       	sbci	r25, 0xFF	; 255
   13faa:	9f 93       	push	r25
   13fac:	8f 93       	push	r24
   13fae:	1f 92       	push	r1
   13fb0:	3f 92       	push	r3
   13fb2:	2f 92       	push	r2
   13fb4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   13fb8:	0f b6       	in	r0, 0x3f	; 63
   13fba:	f8 94       	cli
   13fbc:	de bf       	out	0x3e, r29	; 62
   13fbe:	0f be       	out	0x3f, r0	; 63
   13fc0:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   13fc2:	f8 01       	movw	r30, r16
   13fc4:	80 81       	ld	r24, Z
   13fc6:	84 30       	cpi	r24, 0x04	; 4
   13fc8:	69 f5       	brne	.+90     	; 0x14024 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13fca:	8a 85       	ldd	r24, Y+10	; 0x0a
   13fcc:	9b 85       	ldd	r25, Y+11	; 0x0b
   13fce:	80 96       	adiw	r24, 0x20	; 32
   13fd0:	9f 93       	push	r25
   13fd2:	8f 93       	push	r24
   13fd4:	1f 92       	push	r1
   13fd6:	fa 81       	ldd	r31, Y+2	; 0x02
   13fd8:	ff 93       	push	r31
   13fda:	29 81       	ldd	r18, Y+1	; 0x01
   13fdc:	2f 93       	push	r18
   13fde:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13fe2:	8a 85       	ldd	r24, Y+10	; 0x0a
   13fe4:	9b 85       	ldd	r25, Y+11	; 0x0b
   13fe6:	80 5c       	subi	r24, 0xC0	; 192
   13fe8:	9f 4f       	sbci	r25, 0xFF	; 255
   13fea:	9f 93       	push	r25
   13fec:	8f 93       	push	r24
   13fee:	1f 92       	push	r1
   13ff0:	3d 81       	ldd	r19, Y+5	; 0x05
   13ff2:	3f 93       	push	r19
   13ff4:	4c 81       	ldd	r20, Y+4	; 0x04
   13ff6:	4f 93       	push	r20
   13ff8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13ffc:	8a 85       	ldd	r24, Y+10	; 0x0a
   13ffe:	9b 85       	ldd	r25, Y+11	; 0x0b
   14000:	80 5a       	subi	r24, 0xA0	; 160
   14002:	9f 4f       	sbci	r25, 0xFF	; 255
   14004:	9b 87       	std	Y+11, r25	; 0x0b
   14006:	8a 87       	std	Y+10, r24	; 0x0a
   14008:	9f 93       	push	r25
   1400a:	8f 93       	push	r24
   1400c:	1f 92       	push	r1
   1400e:	98 85       	ldd	r25, Y+8	; 0x08
   14010:	9f 93       	push	r25
   14012:	ef 81       	ldd	r30, Y+7	; 0x07
   14014:	ef 93       	push	r30
   14016:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1401a:	0f b6       	in	r0, 0x3f	; 63
   1401c:	f8 94       	cli
   1401e:	de bf       	out	0x3e, r29	; 62
   14020:	0f be       	out	0x3f, r0	; 63
   14022:	cd bf       	out	0x3d, r28	; 61
   14024:	05 5d       	subi	r16, 0xD5	; 213
   14026:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   14028:	31 e2       	ldi	r19, 0x21	; 33
   1402a:	06 30       	cpi	r16, 0x06	; 6
   1402c:	13 07       	cpc	r17, r19
   1402e:	09 f0       	breq	.+2      	; 0x14032 <display_Addresses+0x1b6>
   14030:	6a cf       	rjmp	.-300    	; 0x13f06 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   14032:	81 e6       	ldi	r24, 0x61	; 97
   14034:	98 e1       	ldi	r25, 0x18	; 24
   14036:	1f 92       	push	r1
   14038:	9f 93       	push	r25
   1403a:	8f 93       	push	r24
   1403c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
   14040:	0f 90       	pop	r0
   14042:	0f 90       	pop	r0
   14044:	0f 90       	pop	r0
   14046:	2b 96       	adiw	r28, 0x0b	; 11
   14048:	0f b6       	in	r0, 0x3f	; 63
   1404a:	f8 94       	cli
   1404c:	de bf       	out	0x3e, r29	; 62
   1404e:	0f be       	out	0x3f, r0	; 63
   14050:	cd bf       	out	0x3d, r28	; 61
   14052:	df 91       	pop	r29
   14054:	cf 91       	pop	r28
   14056:	1f 91       	pop	r17
   14058:	0f 91       	pop	r16
   1405a:	ef 90       	pop	r14
   1405c:	df 90       	pop	r13
   1405e:	cf 90       	pop	r12
   14060:	bf 90       	pop	r11
   14062:	af 90       	pop	r10
   14064:	8f 90       	pop	r8
   14066:	7f 90       	pop	r7
   14068:	6f 90       	pop	r6
   1406a:	4f 90       	pop	r4
   1406c:	3f 90       	pop	r3
   1406e:	2f 90       	pop	r2
   14070:	08 95       	ret

00014072 <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   14072:	2f 92       	push	r2
   14074:	3f 92       	push	r3
   14076:	4f 92       	push	r4
   14078:	6f 92       	push	r6
   1407a:	7f 92       	push	r7
   1407c:	8f 92       	push	r8
   1407e:	af 92       	push	r10
   14080:	bf 92       	push	r11
   14082:	cf 92       	push	r12
   14084:	df 92       	push	r13
   14086:	ef 92       	push	r14
   14088:	0f 93       	push	r16
   1408a:	1f 93       	push	r17
   1408c:	cf 93       	push	r28
   1408e:	df 93       	push	r29
   14090:	cd b7       	in	r28, 0x3d	; 61
   14092:	de b7       	in	r29, 0x3e	; 62
   14094:	2b 97       	sbiw	r28, 0x0b	; 11
   14096:	0f b6       	in	r0, 0x3f	; 63
   14098:	f8 94       	cli
   1409a:	de bf       	out	0x3e, r29	; 62
   1409c:	0f be       	out	0x3f, r0	; 63
   1409e:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   140a0:	81 e4       	ldi	r24, 0x41	; 65
   140a2:	98 e1       	ldi	r25, 0x18	; 24
   140a4:	1f 92       	push	r1
   140a6:	9f 93       	push	r25
   140a8:	8f 93       	push	r24
   140aa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   140ae:	02 e0       	ldi	r16, 0x02	; 2
   140b0:	1f e1       	ldi	r17, 0x1F	; 31
   140b2:	0f 90       	pop	r0
   140b4:	0f 90       	pop	r0
   140b6:	0f 90       	pop	r0
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   140b8:	87 eb       	ldi	r24, 0xB7	; 183
   140ba:	95 e1       	ldi	r25, 0x15	; 21
   140bc:	9c 01       	movw	r18, r24
   140be:	40 e0       	ldi	r20, 0x00	; 0
   140c0:	29 83       	std	Y+1, r18	; 0x01
   140c2:	3a 83       	std	Y+2, r19	; 0x02
   140c4:	4b 83       	std	Y+3, r20	; 0x03
		printf("\n");
   140c6:	85 eb       	ldi	r24, 0xB5	; 181
   140c8:	95 e1       	ldi	r25, 0x15	; 21
   140ca:	9c 01       	movw	r18, r24
   140cc:	40 e0       	ldi	r20, 0x00	; 0
   140ce:	2c 83       	std	Y+4, r18	; 0x04
   140d0:	3d 83       	std	Y+5, r19	; 0x05
   140d2:	4e 83       	std	Y+6, r20	; 0x06

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   140d4:	85 ed       	ldi	r24, 0xD5	; 213
   140d6:	95 e1       	ldi	r25, 0x15	; 21
   140d8:	9c 01       	movw	r18, r24
   140da:	40 e0       	ldi	r20, 0x00	; 0
   140dc:	2f 83       	std	Y+7, r18	; 0x07
   140de:	38 87       	std	Y+8, r19	; 0x08
   140e0:	49 87       	std	Y+9, r20	; 0x09
            printf("  CONFIG\n");
   140e2:	8b ec       	ldi	r24, 0xCB	; 203
   140e4:	95 e1       	ldi	r25, 0x15	; 21
   140e6:	1c 01       	movw	r2, r24
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   140e8:	83 ec       	ldi	r24, 0xC3	; 195
   140ea:	95 e1       	ldi	r25, 0x15	; 21
   140ec:	3c 01       	movw	r6, r24
   140ee:	81 2c       	mov	r8, r1
			printf("  END\n");
   140f0:	8c eb       	ldi	r24, 0xBC	; 188
   140f2:	95 e1       	ldi	r25, 0x15	; 21
   140f4:	6c 01       	movw	r12, r24
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO %s\n", Devices[i].model);
   140f6:	82 e8       	ldi	r24, 0x82	; 130
   140f8:	a8 2e       	mov	r10, r24
   140fa:	86 e1       	ldi	r24, 0x16	; 22
   140fc:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   140fe:	f8 01       	movw	r30, r16
   14100:	80 81       	ld	r24, Z
   14102:	88 23       	and	r24, r24
   14104:	09 f4       	brne	.+2      	; 0x14108 <display_Config+0x96>
   14106:	60 c2       	rjmp	.+1216   	; 0x145c8 <display_Config+0x556>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14108:	83 30       	cpi	r24, 0x03	; 3
   1410a:	09 f0       	breq	.+2      	; 0x1410e <display_Config+0x9c>
   1410c:	6a c1       	rjmp	.+724    	; 0x143e2 <display_Config+0x370>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1410e:	27 a1       	ldd	r18, Z+39	; 0x27
   14110:	30 a5       	ldd	r19, Z+40	; 0x28
   14112:	3b 87       	std	Y+11, r19	; 0x0b
   14114:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80 %s\n", Devices[i].model);
   14116:	c8 01       	movw	r24, r16
   14118:	07 96       	adiw	r24, 0x07	; 7
   1411a:	9f 93       	push	r25
   1411c:	8f 93       	push	r24
   1411e:	88 e3       	ldi	r24, 0x38	; 56
   14120:	98 e1       	ldi	r25, 0x18	; 24
   14122:	1f 92       	push	r1
   14124:	9f 93       	push	r25
   14126:	8f 93       	push	r24
   14128:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   1412c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1412e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14130:	80 81       	ld	r24, Z
   14132:	1f 92       	push	r1
   14134:	8f 93       	push	r24
   14136:	89 e1       	ldi	r24, 0x19	; 25
   14138:	98 e1       	ldi	r25, 0x18	; 24
   1413a:	1f 92       	push	r1
   1413c:	9f 93       	push	r25
   1413e:	8f 93       	push	r24
   14140:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  CONFIG\n");
   14144:	8f e0       	ldi	r24, 0x0F	; 15
   14146:	98 e1       	ldi	r25, 0x18	; 24
   14148:	1f 92       	push	r1
   1414a:	9f 93       	push	r25
   1414c:	8f 93       	push	r24
   1414e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   14152:	ea 85       	ldd	r30, Y+10	; 0x0a
   14154:	fb 85       	ldd	r31, Y+11	; 0x0b
   14156:	20 81       	ld	r18, Z
   14158:	30 e0       	ldi	r19, 0x00	; 0
   1415a:	40 e0       	ldi	r20, 0x00	; 0
   1415c:	50 e0       	ldi	r21, 0x00	; 0
   1415e:	67 e0       	ldi	r22, 0x07	; 7
   14160:	78 e1       	ldi	r23, 0x18	; 24
   14162:	80 e0       	ldi	r24, 0x00	; 0
   14164:	f3 dd       	rcall	.-1050   	; 0x13d4c <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   14166:	ea 85       	ldd	r30, Y+10	; 0x0a
   14168:	fb 85       	ldd	r31, Y+11	; 0x0b
   1416a:	21 81       	ldd	r18, Z+1	; 0x01
   1416c:	30 e0       	ldi	r19, 0x00	; 0
   1416e:	40 e0       	ldi	r20, 0x00	; 0
   14170:	50 e0       	ldi	r21, 0x00	; 0
   14172:	63 e0       	ldi	r22, 0x03	; 3
   14174:	78 e1       	ldi	r23, 0x18	; 24
   14176:	80 e0       	ldi	r24, 0x00	; 0
   14178:	e9 dd       	rcall	.-1070   	; 0x13d4c <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   1417a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1417c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1417e:	42 81       	ldd	r20, Z+2	; 0x02
   14180:	53 81       	ldd	r21, Z+3	; 0x03
   14182:	6e ef       	ldi	r22, 0xFE	; 254
   14184:	77 e1       	ldi	r23, 0x17	; 23
   14186:	80 e0       	ldi	r24, 0x00	; 0
   14188:	32 de       	rcall	.-924    	; 0x13dee <print_str_P>
			printf("  END\n");
   1418a:	87 ef       	ldi	r24, 0xF7	; 247
   1418c:	97 e1       	ldi	r25, 0x17	; 23
   1418e:	1f 92       	push	r1
   14190:	9f 93       	push	r25
   14192:	8f 93       	push	r24
   14194:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  HEADER\n");
   14198:	8d ee       	ldi	r24, 0xED	; 237
   1419a:	97 e1       	ldi	r25, 0x17	; 23
   1419c:	1f 92       	push	r1
   1419e:	9f 93       	push	r25
   141a0:	8f 93       	push	r24
   141a2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   141a6:	ea 85       	ldd	r30, Y+10	; 0x0a
   141a8:	fb 85       	ldd	r31, Y+11	; 0x0b
   141aa:	24 81       	ldd	r18, Z+4	; 0x04
   141ac:	35 81       	ldd	r19, Z+5	; 0x05
   141ae:	40 e0       	ldi	r20, 0x00	; 0
   141b0:	50 e0       	ldi	r21, 0x00	; 0
   141b2:	6a ee       	ldi	r22, 0xEA	; 234
   141b4:	77 e1       	ldi	r23, 0x17	; 23
   141b6:	80 e0       	ldi	r24, 0x00	; 0
   141b8:	c9 dd       	rcall	.-1134   	; 0x13d4c <print_var_P>
			printf("  END\n");
   141ba:	83 ee       	ldi	r24, 0xE3	; 227
   141bc:	97 e1       	ldi	r25, 0x17	; 23
   141be:	1f 92       	push	r1
   141c0:	9f 93       	push	r25
   141c2:	8f 93       	push	r24
   141c4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  CONTROLLER\n");
   141c8:	85 ed       	ldi	r24, 0xD5	; 213
   141ca:	97 e1       	ldi	r25, 0x17	; 23
   141cc:	1f 92       	push	r1
   141ce:	9f 93       	push	r25
   141d0:	8f 93       	push	r24
   141d2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   141d6:	ea 85       	ldd	r30, Y+10	; 0x0a
   141d8:	fb 85       	ldd	r31, Y+11	; 0x0b
   141da:	26 81       	ldd	r18, Z+6	; 0x06
   141dc:	37 81       	ldd	r19, Z+7	; 0x07
   141de:	40 e0       	ldi	r20, 0x00	; 0
   141e0:	50 e0       	ldi	r21, 0x00	; 0
   141e2:	65 ec       	ldi	r22, 0xC5	; 197
   141e4:	77 e1       	ldi	r23, 0x17	; 23
   141e6:	80 e0       	ldi	r24, 0x00	; 0
   141e8:	b1 dd       	rcall	.-1182   	; 0x13d4c <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   141ea:	ea 85       	ldd	r30, Y+10	; 0x0a
   141ec:	fb 85       	ldd	r31, Y+11	; 0x0b
   141ee:	20 85       	ldd	r18, Z+8	; 0x08
   141f0:	31 85       	ldd	r19, Z+9	; 0x09
   141f2:	40 e0       	ldi	r20, 0x00	; 0
   141f4:	50 e0       	ldi	r21, 0x00	; 0
   141f6:	67 eb       	ldi	r22, 0xB7	; 183
   141f8:	77 e1       	ldi	r23, 0x17	; 23
   141fa:	80 e0       	ldi	r24, 0x00	; 0
   141fc:	a7 dd       	rcall	.-1202   	; 0x13d4c <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   141fe:	ea 85       	ldd	r30, Y+10	; 0x0a
   14200:	fb 85       	ldd	r31, Y+11	; 0x0b
   14202:	22 85       	ldd	r18, Z+10	; 0x0a
   14204:	30 e0       	ldi	r19, 0x00	; 0
   14206:	40 e0       	ldi	r20, 0x00	; 0
   14208:	50 e0       	ldi	r21, 0x00	; 0
   1420a:	62 eb       	ldi	r22, 0xB2	; 178
   1420c:	77 e1       	ldi	r23, 0x17	; 23
   1420e:	80 e0       	ldi	r24, 0x00	; 0
   14210:	9d dd       	rcall	.-1222   	; 0x13d4c <print_var_P>
			printf("  END\n");
   14212:	8b ea       	ldi	r24, 0xAB	; 171
   14214:	97 e1       	ldi	r25, 0x17	; 23
   14216:	1f 92       	push	r1
   14218:	9f 93       	push	r25
   1421a:	8f 93       	push	r24
   1421c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  UNIT\n");
   14220:	83 ea       	ldi	r24, 0xA3	; 163
   14222:	97 e1       	ldi	r25, 0x17	; 23
   14224:	1f 92       	push	r1
   14226:	9f 93       	push	r25
   14228:	8f 93       	push	r24
   1422a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   1422e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14230:	fb 85       	ldd	r31, Y+11	; 0x0b
   14232:	23 85       	ldd	r18, Z+11	; 0x0b
   14234:	30 e0       	ldi	r19, 0x00	; 0
   14236:	40 e0       	ldi	r20, 0x00	; 0
   14238:	50 e0       	ldi	r21, 0x00	; 0
   1423a:	69 e9       	ldi	r22, 0x99	; 153
   1423c:	77 e1       	ldi	r23, 0x17	; 23
   1423e:	80 e0       	ldi	r24, 0x00	; 0
   14240:	85 dd       	rcall	.-1270   	; 0x13d4c <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   14242:	ea 85       	ldd	r30, Y+10	; 0x0a
   14244:	fb 85       	ldd	r31, Y+11	; 0x0b
   14246:	24 85       	ldd	r18, Z+12	; 0x0c
   14248:	35 85       	ldd	r19, Z+13	; 0x0d
   1424a:	46 85       	ldd	r20, Z+14	; 0x0e
   1424c:	57 85       	ldd	r21, Z+15	; 0x0f
   1424e:	6b e8       	ldi	r22, 0x8B	; 139
   14250:	77 e1       	ldi	r23, 0x17	; 23
   14252:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   14254:	7b dd       	rcall	.-1290   	; 0x13d4c <print_var_P>
   14256:	ea 85       	ldd	r30, Y+10	; 0x0a
   14258:	fb 85       	ldd	r31, Y+11	; 0x0b
   1425a:	20 89       	ldd	r18, Z+16	; 0x10
   1425c:	31 89       	ldd	r19, Z+17	; 0x11
   1425e:	40 e0       	ldi	r20, 0x00	; 0
   14260:	50 e0       	ldi	r21, 0x00	; 0
   14262:	6b e7       	ldi	r22, 0x7B	; 123
   14264:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   14266:	80 e0       	ldi	r24, 0x00	; 0
   14268:	71 dd       	rcall	.-1310   	; 0x13d4c <print_var_P>
   1426a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1426c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1426e:	22 89       	ldd	r18, Z+18	; 0x12
   14270:	30 e0       	ldi	r19, 0x00	; 0
   14272:	40 e0       	ldi	r20, 0x00	; 0
   14274:	50 e0       	ldi	r21, 0x00	; 0
   14276:	6b e6       	ldi	r22, 0x6B	; 107
   14278:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   1427a:	80 e0       	ldi	r24, 0x00	; 0
   1427c:	67 dd       	rcall	.-1330   	; 0x13d4c <print_var_P>
   1427e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14280:	fb 85       	ldd	r31, Y+11	; 0x0b
   14282:	23 89       	ldd	r18, Z+19	; 0x13
   14284:	30 e0       	ldi	r19, 0x00	; 0
   14286:	40 e0       	ldi	r20, 0x00	; 0
   14288:	50 e0       	ldi	r21, 0x00	; 0
   1428a:	60 e6       	ldi	r22, 0x60	; 96
   1428c:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   1428e:	80 e0       	ldi	r24, 0x00	; 0
   14290:	5d dd       	rcall	.-1350   	; 0x13d4c <print_var_P>
   14292:	ea 85       	ldd	r30, Y+10	; 0x0a
   14294:	fb 85       	ldd	r31, Y+11	; 0x0b
   14296:	24 89       	ldd	r18, Z+20	; 0x14
   14298:	35 89       	ldd	r19, Z+21	; 0x15
   1429a:	40 e0       	ldi	r20, 0x00	; 0
   1429c:	50 e0       	ldi	r21, 0x00	; 0
   1429e:	65 e5       	ldi	r22, 0x55	; 85
   142a0:	77 e1       	ldi	r23, 0x17	; 23
                print_var("CONTINUOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINUOUS_TRANSFER_RATE);
   142a2:	80 e0       	ldi	r24, 0x00	; 0
   142a4:	53 dd       	rcall	.-1370   	; 0x13d4c <print_var_P>
   142a6:	ea 85       	ldd	r30, Y+10	; 0x0a
   142a8:	fb 85       	ldd	r31, Y+11	; 0x0b
   142aa:	26 89       	ldd	r18, Z+22	; 0x16
   142ac:	37 89       	ldd	r19, Z+23	; 0x17
   142ae:	40 e0       	ldi	r20, 0x00	; 0
   142b0:	50 e0       	ldi	r21, 0x00	; 0
   142b2:	6c e3       	ldi	r22, 0x3C	; 60
   142b4:	77 e1       	ldi	r23, 0x17	; 23
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   142b6:	80 e0       	ldi	r24, 0x00	; 0
   142b8:	49 dd       	rcall	.-1390   	; 0x13d4c <print_var_P>
   142ba:	ea 85       	ldd	r30, Y+10	; 0x0a
   142bc:	fb 85       	ldd	r31, Y+11	; 0x0b
   142be:	20 8d       	ldd	r18, Z+24	; 0x18
   142c0:	31 8d       	ldd	r19, Z+25	; 0x19
   142c2:	40 e0       	ldi	r20, 0x00	; 0
   142c4:	50 e0       	ldi	r21, 0x00	; 0
   142c6:	69 e2       	ldi	r22, 0x29	; 41
   142c8:	77 e1       	ldi	r23, 0x17	; 23
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   142ca:	80 e0       	ldi	r24, 0x00	; 0
   142cc:	3f dd       	rcall	.-1410   	; 0x13d4c <print_var_P>
   142ce:	ea 85       	ldd	r30, Y+10	; 0x0a
   142d0:	fb 85       	ldd	r31, Y+11	; 0x0b
   142d2:	22 8d       	ldd	r18, Z+26	; 0x1a
   142d4:	33 8d       	ldd	r19, Z+27	; 0x1b
   142d6:	40 e0       	ldi	r20, 0x00	; 0
   142d8:	50 e0       	ldi	r21, 0x00	; 0
   142da:	6d e1       	ldi	r22, 0x1D	; 29
   142dc:	77 e1       	ldi	r23, 0x17	; 23
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   142de:	80 e0       	ldi	r24, 0x00	; 0
   142e0:	35 dd       	rcall	.-1430   	; 0x13d4c <print_var_P>
   142e2:	ea 85       	ldd	r30, Y+10	; 0x0a
   142e4:	fb 85       	ldd	r31, Y+11	; 0x0b
   142e6:	24 8d       	ldd	r18, Z+28	; 0x1c
   142e8:	30 e0       	ldi	r19, 0x00	; 0
   142ea:	40 e0       	ldi	r20, 0x00	; 0
   142ec:	50 e0       	ldi	r21, 0x00	; 0
   142ee:	6a e0       	ldi	r22, 0x0A	; 10
   142f0:	77 e1       	ldi	r23, 0x17	; 23
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   142f2:	80 e0       	ldi	r24, 0x00	; 0
   142f4:	2b dd       	rcall	.-1450   	; 0x13d4c <print_var_P>
   142f6:	ea 85       	ldd	r30, Y+10	; 0x0a
   142f8:	fb 85       	ldd	r31, Y+11	; 0x0b
   142fa:	25 8d       	ldd	r18, Z+29	; 0x1d
   142fc:	30 e0       	ldi	r19, 0x00	; 0
   142fe:	40 e0       	ldi	r20, 0x00	; 0
   14300:	50 e0       	ldi	r21, 0x00	; 0
   14302:	6c ef       	ldi	r22, 0xFC	; 252
   14304:	76 e1       	ldi	r23, 0x16	; 22
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   14306:	80 e0       	ldi	r24, 0x00	; 0
   14308:	21 dd       	rcall	.-1470   	; 0x13d4c <print_var_P>
   1430a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1430c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1430e:	26 8d       	ldd	r18, Z+30	; 0x1e
   14310:	30 e0       	ldi	r19, 0x00	; 0
   14312:	40 e0       	ldi	r20, 0x00	; 0
   14314:	50 e0       	ldi	r21, 0x00	; 0
   14316:	6a ee       	ldi	r22, 0xEA	; 234
   14318:	76 e1       	ldi	r23, 0x16	; 22
   1431a:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   1431c:	17 dd       	rcall	.-1490   	; 0x13d4c <print_var_P>
   1431e:	83 ee       	ldi	r24, 0xE3	; 227
   14320:	96 e1       	ldi	r25, 0x16	; 22
   14322:	1f 92       	push	r1
   14324:	9f 93       	push	r25
   14326:	8f 93       	push	r24
   14328:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            printf("  VOLUME\n");
   1432c:	0f b6       	in	r0, 0x3f	; 63
   1432e:	f8 94       	cli
   14330:	de bf       	out	0x3e, r29	; 62
   14332:	0f be       	out	0x3f, r0	; 63
   14334:	cd bf       	out	0x3d, r28	; 61
   14336:	89 ed       	ldi	r24, 0xD9	; 217
   14338:	96 e1       	ldi	r25, 0x16	; 22
   1433a:	1f 92       	push	r1
   1433c:	9f 93       	push	r25
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   1433e:	8f 93       	push	r24
   14340:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14344:	ea 85       	ldd	r30, Y+10	; 0x0a
   14346:	fb 85       	ldd	r31, Y+11	; 0x0b
   14348:	27 8d       	ldd	r18, Z+31	; 0x1f
   1434a:	30 a1       	ldd	r19, Z+32	; 0x20
   1434c:	41 a1       	ldd	r20, Z+33	; 0x21
   1434e:	52 a1       	ldd	r21, Z+34	; 0x22
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   14350:	6c ec       	ldi	r22, 0xCC	; 204
   14352:	76 e1       	ldi	r23, 0x16	; 22
   14354:	80 e0       	ldi	r24, 0x00	; 0
   14356:	fa dc       	rcall	.-1548   	; 0x13d4c <print_var_P>
   14358:	ea 85       	ldd	r30, Y+10	; 0x0a
   1435a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1435c:	23 a1       	ldd	r18, Z+35	; 0x23
   1435e:	30 e0       	ldi	r19, 0x00	; 0
   14360:	40 e0       	ldi	r20, 0x00	; 0
   14362:	50 e0       	ldi	r21, 0x00	; 0
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   14364:	63 ec       	ldi	r22, 0xC3	; 195
   14366:	76 e1       	ldi	r23, 0x16	; 22
   14368:	80 e0       	ldi	r24, 0x00	; 0
   1436a:	f0 dc       	rcall	.-1568   	; 0x13d4c <print_var_P>
   1436c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1436e:	fb 85       	ldd	r31, Y+11	; 0x0b
   14370:	24 a1       	ldd	r18, Z+36	; 0x24
   14372:	35 a1       	ldd	r19, Z+37	; 0x25
   14374:	40 e0       	ldi	r20, 0x00	; 0
   14376:	50 e0       	ldi	r21, 0x00	; 0
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   14378:	68 eb       	ldi	r22, 0xB8	; 184
   1437a:	76 e1       	ldi	r23, 0x16	; 22
   1437c:	80 e0       	ldi	r24, 0x00	; 0
   1437e:	e6 dc       	rcall	.-1588   	; 0x13d4c <print_var_P>
   14380:	ea 85       	ldd	r30, Y+10	; 0x0a
   14382:	fb 85       	ldd	r31, Y+11	; 0x0b
   14384:	26 a1       	ldd	r18, Z+38	; 0x26
   14386:	37 a1       	ldd	r19, Z+39	; 0x27
   14388:	40 a5       	ldd	r20, Z+40	; 0x28
   1438a:	51 a5       	ldd	r21, Z+41	; 0x29
   1438c:	67 ea       	ldi	r22, 0xA7	; 167
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   1438e:	76 e1       	ldi	r23, 0x16	; 22
   14390:	80 e0       	ldi	r24, 0x00	; 0
   14392:	dc dc       	rcall	.-1608   	; 0x13d4c <print_var_P>
   14394:	ea 85       	ldd	r30, Y+10	; 0x0a
   14396:	fb 85       	ldd	r31, Y+11	; 0x0b
   14398:	22 a5       	ldd	r18, Z+42	; 0x2a
   1439a:	30 e0       	ldi	r19, 0x00	; 0
   1439c:	40 e0       	ldi	r20, 0x00	; 0
   1439e:	50 e0       	ldi	r21, 0x00	; 0
   143a0:	6c e9       	ldi	r22, 0x9C	; 156
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   143a2:	76 e1       	ldi	r23, 0x16	; 22
   143a4:	80 e0       	ldi	r24, 0x00	; 0
   143a6:	d2 dc       	rcall	.-1628   	; 0x13d4c <print_var_P>
   143a8:	ea 85       	ldd	r30, Y+10	; 0x0a
   143aa:	fb 85       	ldd	r31, Y+11	; 0x0b
   143ac:	86 a1       	ldd	r24, Z+38	; 0x26
   143ae:	97 a1       	ldd	r25, Z+39	; 0x27
   143b0:	a0 a5       	ldd	r26, Z+40	; 0x28
   143b2:	b1 a5       	ldd	r27, Z+41	; 0x29
   143b4:	9c 01       	movw	r18, r24
   143b6:	ad 01       	movw	r20, r26
   143b8:	2f 5f       	subi	r18, 0xFF	; 255
   143ba:	3f 4f       	sbci	r19, 0xFF	; 255
   143bc:	4f 4f       	sbci	r20, 0xFF	; 255
   143be:	5f 4f       	sbci	r21, 0xFF	; 255
   143c0:	63 e9       	ldi	r22, 0x93	; 147
   143c2:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   143c4:	80 e0       	ldi	r24, 0x00	; 0
   143c6:	c2 dc       	rcall	.-1660   	; 0x13d4c <print_var_P>
   143c8:	8c e8       	ldi	r24, 0x8C	; 140
   143ca:	96 e1       	ldi	r25, 0x16	; 22
   143cc:	1f 92       	push	r1
   143ce:	9f 93       	push	r25
   143d0:	8f 93       	push	r24
   143d2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   143d6:	0f 90       	pop	r0
   143d8:	0f 90       	pop	r0
   143da:	0f 90       	pop	r0
   143dc:	0f 90       	pop	r0
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   143de:	0f 90       	pop	r0
   143e0:	0f 90       	pop	r0
   143e2:	f8 01       	movw	r30, r16
   143e4:	80 81       	ld	r24, Z
   143e6:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   143e8:	09 f0       	breq	.+2      	; 0x143ec <display_Config+0x37a>
   143ea:	b3 c0       	rjmp	.+358    	; 0x14552 <display_Config+0x4e0>
   143ec:	27 a1       	ldd	r18, Z+39	; 0x27
   143ee:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("AMIGO %s\n", Devices[i].model);
   143f0:	3b 87       	std	Y+11, r19	; 0x0b
   143f2:	2a 87       	std	Y+10, r18	; 0x0a
   143f4:	c8 01       	movw	r24, r16
   143f6:	07 96       	adiw	r24, 0x07	; 7
   143f8:	9f 93       	push	r25
   143fa:	8f 93       	push	r24
   143fc:	c5 01       	movw	r24, r10
   143fe:	1f 92       	push	r1
   14400:	9f 93       	push	r25
   14402:	af 92       	push	r10
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   14404:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14408:	ea 85       	ldd	r30, Y+10	; 0x0a
   1440a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1440c:	80 81       	ld	r24, Z
   1440e:	1f 92       	push	r1
   14410:	8f 93       	push	r24
   14412:	83 e6       	ldi	r24, 0x63	; 99
   14414:	96 e1       	ldi	r25, 0x16	; 22
   14416:	1f 92       	push	r1
   14418:	9f 93       	push	r25
            printf("  HEADER\n");
   1441a:	8f 93       	push	r24
   1441c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14420:	89 e5       	ldi	r24, 0x59	; 89
   14422:	96 e1       	ldi	r25, 0x16	; 22
   14424:	1f 92       	push	r1
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   14426:	9f 93       	push	r25
   14428:	8f 93       	push	r24
   1442a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1442e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14430:	fb 85       	ldd	r31, Y+11	; 0x0b
   14432:	20 81       	ld	r18, Z
   14434:	30 e0       	ldi	r19, 0x00	; 0
   14436:	40 e0       	ldi	r20, 0x00	; 0
   14438:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   1443a:	61 e5       	ldi	r22, 0x51	; 81
   1443c:	76 e1       	ldi	r23, 0x16	; 22
   1443e:	80 e0       	ldi	r24, 0x00	; 0
   14440:	85 dc       	rcall	.-1782   	; 0x13d4c <print_var_P>
   14442:	ea 85       	ldd	r30, Y+10	; 0x0a
   14444:	fb 85       	ldd	r31, Y+11	; 0x0b
   14446:	21 81       	ldd	r18, Z+1	; 0x01
   14448:	30 e0       	ldi	r19, 0x00	; 0
   1444a:	40 e0       	ldi	r20, 0x00	; 0
   1444c:	50 e0       	ldi	r21, 0x00	; 0
   1444e:	6d e4       	ldi	r22, 0x4D	; 77
                print_str("FILE", AMIGOp->HEADER.NAME);
   14450:	76 e1       	ldi	r23, 0x16	; 22
   14452:	80 e0       	ldi	r24, 0x00	; 0
   14454:	7b dc       	rcall	.-1802   	; 0x13d4c <print_var_P>
   14456:	ea 85       	ldd	r30, Y+10	; 0x0a
   14458:	fb 85       	ldd	r31, Y+11	; 0x0b
   1445a:	42 81       	ldd	r20, Z+2	; 0x02
   1445c:	53 81       	ldd	r21, Z+3	; 0x03
   1445e:	68 e4       	ldi	r22, 0x48	; 72
			printf("  END\n");
   14460:	76 e1       	ldi	r23, 0x16	; 22
   14462:	80 e0       	ldi	r24, 0x00	; 0
   14464:	c4 dc       	rcall	.-1656   	; 0x13dee <print_str_P>
   14466:	81 e4       	ldi	r24, 0x41	; 65
   14468:	96 e1       	ldi	r25, 0x16	; 22
   1446a:	1f 92       	push	r1
   1446c:	9f 93       	push	r25
            printf("  CONFIG\n");
   1446e:	8f 93       	push	r24
   14470:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14474:	87 e3       	ldi	r24, 0x37	; 55
   14476:	96 e1       	ldi	r25, 0x16	; 22
   14478:	1f 92       	push	r1
   1447a:	9f 93       	push	r25
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   1447c:	8f 93       	push	r24
   1447e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14482:	ea 85       	ldd	r30, Y+10	; 0x0a
   14484:	fb 85       	ldd	r31, Y+11	; 0x0b
   14486:	24 81       	ldd	r18, Z+4	; 0x04
   14488:	35 81       	ldd	r19, Z+5	; 0x05
   1448a:	40 e0       	ldi	r20, 0x00	; 0
   1448c:	50 e0       	ldi	r21, 0x00	; 0
   1448e:	64 e3       	ldi	r22, 0x34	; 52
			printf("  END\n");
   14490:	76 e1       	ldi	r23, 0x16	; 22
   14492:	80 e0       	ldi	r24, 0x00	; 0
   14494:	5b dc       	rcall	.-1866   	; 0x13d4c <print_var_P>
   14496:	8d e2       	ldi	r24, 0x2D	; 45
   14498:	96 e1       	ldi	r25, 0x16	; 22
   1449a:	1f 92       	push	r1
   1449c:	9f 93       	push	r25
            printf("  GEOMETRY\n");
   1449e:	8f 93       	push	r24
   144a0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   144a4:	81 e2       	ldi	r24, 0x21	; 33
   144a6:	96 e1       	ldi	r25, 0x16	; 22
   144a8:	1f 92       	push	r1
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   144aa:	9f 93       	push	r25
   144ac:	8f 93       	push	r24
   144ae:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   144b2:	ea 85       	ldd	r30, Y+10	; 0x0a
   144b4:	fb 85       	ldd	r31, Y+11	; 0x0b
   144b6:	26 81       	ldd	r18, Z+6	; 0x06
   144b8:	37 81       	ldd	r19, Z+7	; 0x07
   144ba:	03 2e       	mov	r0, r19
   144bc:	00 0c       	add	r0, r0
   144be:	44 0b       	sbc	r20, r20
   144c0:	55 0b       	sbc	r21, r21
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   144c2:	60 e1       	ldi	r22, 0x10	; 16
   144c4:	76 e1       	ldi	r23, 0x16	; 22
   144c6:	80 e0       	ldi	r24, 0x00	; 0
   144c8:	41 dc       	rcall	.-1918   	; 0x13d4c <print_var_P>
   144ca:	ea 85       	ldd	r30, Y+10	; 0x0a
   144cc:	fb 85       	ldd	r31, Y+11	; 0x0b
   144ce:	20 85       	ldd	r18, Z+8	; 0x08
   144d0:	31 85       	ldd	r19, Z+9	; 0x09
   144d2:	03 2e       	mov	r0, r19
   144d4:	00 0c       	add	r0, r0
   144d6:	44 0b       	sbc	r20, r20
   144d8:	55 0b       	sbc	r21, r21
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   144da:	6e ef       	ldi	r22, 0xFE	; 254
   144dc:	75 e1       	ldi	r23, 0x15	; 21
   144de:	80 e0       	ldi	r24, 0x00	; 0
   144e0:	35 dc       	rcall	.-1942   	; 0x13d4c <print_var_P>
   144e2:	ea 85       	ldd	r30, Y+10	; 0x0a
   144e4:	fb 85       	ldd	r31, Y+11	; 0x0b
   144e6:	22 85       	ldd	r18, Z+10	; 0x0a
   144e8:	33 85       	ldd	r19, Z+11	; 0x0b
   144ea:	03 2e       	mov	r0, r19
   144ec:	00 0c       	add	r0, r0
   144ee:	44 0b       	sbc	r20, r20
   144f0:	55 0b       	sbc	r21, r21
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   144f2:	68 ef       	ldi	r22, 0xF8	; 248
   144f4:	75 e1       	ldi	r23, 0x15	; 21
   144f6:	80 e0       	ldi	r24, 0x00	; 0
   144f8:	29 dc       	rcall	.-1966   	; 0x13d4c <print_var_P>
   144fa:	ea 85       	ldd	r30, Y+10	; 0x0a
   144fc:	fb 85       	ldd	r31, Y+11	; 0x0b
   144fe:	24 85       	ldd	r18, Z+12	; 0x0c
   14500:	35 85       	ldd	r19, Z+13	; 0x0d
   14502:	03 2e       	mov	r0, r19
   14504:	00 0c       	add	r0, r0
   14506:	44 0b       	sbc	r20, r20
   14508:	55 0b       	sbc	r21, r21
   1450a:	6e ee       	ldi	r22, 0xEE	; 238
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   1450c:	75 e1       	ldi	r23, 0x15	; 21
   1450e:	80 e0       	ldi	r24, 0x00	; 0
   14510:	1d dc       	rcall	.-1990   	; 0x13d4c <print_var_P>
   14512:	ea 85       	ldd	r30, Y+10	; 0x0a
   14514:	fb 85       	ldd	r31, Y+11	; 0x0b
   14516:	24 85       	ldd	r18, Z+12	; 0x0c
   14518:	35 85       	ldd	r19, Z+13	; 0x0d
   1451a:	a0 85       	ldd	r26, Z+8	; 0x08
   1451c:	b1 85       	ldd	r27, Z+9	; 0x09
   1451e:	0e 94 ee e3 	call	0x1c7dc	; 0x1c7dc <__mulhisi3>
   14522:	9b 01       	movw	r18, r22
   14524:	ac 01       	movw	r20, r24
   14526:	a2 85       	ldd	r26, Z+10	; 0x0a
   14528:	b3 85       	ldd	r27, Z+11	; 0x0b
   1452a:	0e 94 13 e4 	call	0x1c826	; 0x1c826 <__mulshisi3>
   1452e:	9b 01       	movw	r18, r22
   14530:	ac 01       	movw	r20, r24
   14532:	65 ee       	ldi	r22, 0xE5	; 229
   14534:	75 e1       	ldi	r23, 0x15	; 21
			printf("  END\n");
   14536:	80 e0       	ldi	r24, 0x00	; 0
   14538:	09 dc       	rcall	.-2030   	; 0x13d4c <print_var_P>
   1453a:	8e ed       	ldi	r24, 0xDE	; 222
   1453c:	95 e1       	ldi	r25, 0x15	; 21
   1453e:	1f 92       	push	r1
   14540:	9f 93       	push	r25
   14542:	8f 93       	push	r24
   14544:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14548:	0f b6       	in	r0, 0x3f	; 63
   1454a:	f8 94       	cli
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   1454c:	de bf       	out	0x3e, r29	; 62
   1454e:	0f be       	out	0x3f, r0	; 63
   14550:	cd bf       	out	0x3d, r28	; 61
   14552:	f8 01       	movw	r30, r16
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   14554:	80 81       	ld	r24, Z
   14556:	84 30       	cpi	r24, 0x04	; 4
   14558:	19 f5       	brne	.+70     	; 0x145a0 <display_Config+0x52e>
   1455a:	27 a1       	ldd	r18, Z+39	; 0x27

            printf("PRINTER\n");
   1455c:	30 a5       	ldd	r19, Z+40	; 0x28
   1455e:	3b 87       	std	Y+11, r19	; 0x0b
   14560:	2a 87       	std	Y+10, r18	; 0x0a
   14562:	1f 92       	push	r1
   14564:	38 85       	ldd	r19, Y+8	; 0x08
   14566:	3f 93       	push	r19
   14568:	4f 81       	ldd	r20, Y+7	; 0x07
            printf("  CONFIG\n");
   1456a:	4f 93       	push	r20
   1456c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14570:	1f 92       	push	r1
   14572:	3f 92       	push	r3
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14574:	2f 92       	push	r2
   14576:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1457a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1457c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1457e:	20 81       	ld	r18, Z
   14580:	30 e0       	ldi	r19, 0x00	; 0
   14582:	40 e0       	ldi	r20, 0x00	; 0
   14584:	50 e0       	ldi	r21, 0x00	; 0
   14586:	88 2d       	mov	r24, r8
			printf("  END\n");
   14588:	b3 01       	movw	r22, r6
   1458a:	e0 db       	rcall	.-2112   	; 0x13d4c <print_var_P>
   1458c:	1f 92       	push	r1
   1458e:	df 92       	push	r13
   14590:	cf 92       	push	r12
   14592:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14596:	0f b6       	in	r0, 0x3f	; 63
   14598:	f8 94       	cli
   1459a:	de bf       	out	0x3e, r29	; 62
        }
		printf("END\n");
   1459c:	0f be       	out	0x3f, r0	; 63
   1459e:	cd bf       	out	0x3d, r28	; 61
   145a0:	1f 92       	push	r1
   145a2:	3a 81       	ldd	r19, Y+2	; 0x02
   145a4:	3f 93       	push	r19
   145a6:	49 81       	ldd	r20, Y+1	; 0x01
   145a8:	4f 93       	push	r20
		printf("\n");
   145aa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   145ae:	1f 92       	push	r1
   145b0:	8d 81       	ldd	r24, Y+5	; 0x05
   145b2:	8f 93       	push	r24
   145b4:	9c 81       	ldd	r25, Y+4	; 0x04
   145b6:	9f 93       	push	r25
   145b8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   145bc:	0f 90       	pop	r0
   145be:	0f 90       	pop	r0
   145c0:	0f 90       	pop	r0
   145c2:	0f 90       	pop	r0
   145c4:	0f 90       	pop	r0
   145c6:	0f 90       	pop	r0
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   145c8:	05 5d       	subi	r16, 0xD5	; 213
   145ca:	1f 4f       	sbci	r17, 0xFF	; 255
   145cc:	e1 e2       	ldi	r30, 0x21	; 33
   145ce:	06 30       	cpi	r16, 0x06	; 6
   145d0:	1e 07       	cpc	r17, r30
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   145d2:	09 f0       	breq	.+2      	; 0x145d6 <display_Config+0x564>
   145d4:	94 cd       	rjmp	.-1240   	; 0x140fe <display_Config+0x8c>
   145d6:	80 eb       	ldi	r24, 0xB0	; 176
   145d8:	95 e1       	ldi	r25, 0x15	; 21
   145da:	1f 92       	push	r1
   145dc:	9f 93       	push	r25
   145de:	8f 93       	push	r24
    printf("\n");
   145e0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   145e4:	8e ea       	ldi	r24, 0xAE	; 174
   145e6:	95 e1       	ldi	r25, 0x15	; 21
   145e8:	1f 92       	push	r1
   145ea:	9f 93       	push	r25
   145ec:	8f 93       	push	r24
}
   145ee:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   145f2:	0f 90       	pop	r0
   145f4:	0f 90       	pop	r0
   145f6:	0f 90       	pop	r0
   145f8:	0f 90       	pop	r0
   145fa:	0f 90       	pop	r0
   145fc:	0f 90       	pop	r0
   145fe:	2b 96       	adiw	r28, 0x0b	; 11
   14600:	0f b6       	in	r0, 0x3f	; 63
   14602:	f8 94       	cli
   14604:	de bf       	out	0x3e, r29	; 62
   14606:	0f be       	out	0x3f, r0	; 63
   14608:	cd bf       	out	0x3d, r28	; 61
   1460a:	df 91       	pop	r29
   1460c:	cf 91       	pop	r28
   1460e:	1f 91       	pop	r17
   14610:	0f 91       	pop	r16
   14612:	ef 90       	pop	r14
   14614:	df 90       	pop	r13
   14616:	cf 90       	pop	r12
   14618:	bf 90       	pop	r11
   1461a:	af 90       	pop	r10
   1461c:	8f 90       	pop	r8
   1461e:	7f 90       	pop	r7
   14620:	6f 90       	pop	r6
   14622:	4f 90       	pop	r4
   14624:	3f 90       	pop	r3
   14626:	2f 90       	pop	r2
   14628:	08 95       	ret

0001462a <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   1462a:	2f 92       	push	r2
   1462c:	3f 92       	push	r3
   1462e:	4f 92       	push	r4
   14630:	5f 92       	push	r5
   14632:	6f 92       	push	r6
   14634:	7f 92       	push	r7
   14636:	8f 92       	push	r8
   14638:	af 92       	push	r10
   1463a:	bf 92       	push	r11
   1463c:	cf 92       	push	r12
   1463e:	df 92       	push	r13
   14640:	ef 92       	push	r14
   14642:	ff 92       	push	r15
   14644:	0f 93       	push	r16
   14646:	1f 93       	push	r17
   14648:	cf 93       	push	r28
   1464a:	df 93       	push	r29
   1464c:	cd b7       	in	r28, 0x3d	; 61
   1464e:	de b7       	in	r29, 0x3e	; 62
   14650:	cd 55       	subi	r28, 0x5D	; 93
   14652:	d1 09       	sbc	r29, r1
   14654:	0f b6       	in	r0, 0x3f	; 63
   14656:	f8 94       	cli
   14658:	de bf       	out	0x3e, r29	; 62
   1465a:	0f be       	out	0x3f, r0	; 63
   1465c:	cd bf       	out	0x3d, r28	; 61
   1465e:	82 e0       	ldi	r24, 0x02	; 2
   14660:	a8 2e       	mov	r10, r24
   14662:	8f e1       	ldi	r24, 0x1F	; 31
   14664:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   14666:	21 e0       	ldi	r18, 0x01	; 1
   14668:	30 e0       	ldi	r19, 0x00	; 0
   1466a:	65 96       	adiw	r28, 0x15	; 21
   1466c:	3f af       	std	Y+63, r19	; 0x3f
   1466e:	2e af       	std	Y+62, r18	; 0x3e
   14670:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   14672:	81 e0       	ldi	r24, 0x01	; 1
   14674:	90 e0       	ldi	r25, 0x00	; 0
   14676:	63 96       	adiw	r28, 0x13	; 19
   14678:	9f af       	std	Y+63, r25	; 0x3f
   1467a:	8e af       	std	Y+62, r24	; 0x3e
   1467c:	63 97       	sbiw	r28, 0x13	; 19
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   1467e:	8a e5       	ldi	r24, 0x5A	; 90
   14680:	95 e1       	ldi	r25, 0x15	; 21
   14682:	9c 01       	movw	r18, r24
   14684:	40 e0       	ldi	r20, 0x00	; 0
   14686:	68 96       	adiw	r28, 0x18	; 24
   14688:	2d af       	std	Y+61, r18	; 0x3d
   1468a:	3e af       	std	Y+62, r19	; 0x3e
   1468c:	4f af       	std	Y+63, r20	; 0x3f
   1468e:	68 97       	sbiw	r28, 0x18	; 24
   14690:	2e 01       	movw	r4, r28
   14692:	31 e3       	ldi	r19, 0x31	; 49
   14694:	43 0e       	add	r4, r19
   14696:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14698:	82 e6       	ldi	r24, 0x62	; 98
   1469a:	95 e1       	ldi	r25, 0x15	; 21
   1469c:	9c 01       	movw	r18, r24
   1469e:	40 e0       	ldi	r20, 0x00	; 0
   146a0:	6b 96       	adiw	r28, 0x1b	; 27
   146a2:	2d af       	std	Y+61, r18	; 0x3d
   146a4:	3e af       	std	Y+62, r19	; 0x3e
   146a6:	4f af       	std	Y+63, r20	; 0x3f
   146a8:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   146aa:	84 e8       	ldi	r24, 0x84	; 132
   146ac:	95 e1       	ldi	r25, 0x15	; 21
   146ae:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   146b0:	8c e8       	ldi	r24, 0x8C	; 140
   146b2:	95 e1       	ldi	r25, 0x15	; 21
   146b4:	9c 01       	movw	r18, r24
   146b6:	40 e0       	ldi	r20, 0x00	; 0
   146b8:	6e 96       	adiw	r28, 0x1e	; 30
   146ba:	2d af       	std	Y+61, r18	; 0x3d
   146bc:	3e af       	std	Y+62, r19	; 0x3e
   146be:	4f af       	std	Y+63, r20	; 0x3f
   146c0:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   146c2:	f5 01       	movw	r30, r10
   146c4:	80 81       	ld	r24, Z
   146c6:	88 23       	and	r24, r24
   146c8:	09 f4       	brne	.+2      	; 0x146cc <format_drives+0xa2>
   146ca:	a9 c0       	rjmp	.+338    	; 0x1481e <format_drives+0x1f4>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   146cc:	83 30       	cpi	r24, 0x03	; 3
   146ce:	09 f0       	breq	.+2      	; 0x146d2 <format_drives+0xa8>
   146d0:	4a c0       	rjmp	.+148    	; 0x14766 <format_drives+0x13c>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   146d2:	27 a0       	ldd	r2, Z+39	; 0x27
   146d4:	30 a4       	ldd	r3, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   146d6:	be 01       	movw	r22, r28
   146d8:	6f 5f       	subi	r22, 0xFF	; 255
   146da:	7f 4f       	sbci	r23, 0xFF	; 255
   146dc:	f1 01       	movw	r30, r2
   146de:	82 81       	ldd	r24, Z+2	; 0x02
   146e0:	93 81       	ldd	r25, Z+3	; 0x03
   146e2:	0e 94 19 7b 	call	0xf632	; 0xf632 <stat>
   146e6:	01 96       	adiw	r24, 0x01	; 1
   146e8:	a9 f5       	brne	.+106    	; 0x14754 <format_drives+0x12a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   146ea:	f1 01       	movw	r30, r2
   146ec:	80 89       	ldd	r24, Z+16	; 0x10
   146ee:	91 89       	ldd	r25, Z+17	; 0x11
   146f0:	81 15       	cp	r24, r1
   146f2:	91 40       	sbci	r25, 0x01	; 1
   146f4:	49 f0       	breq	.+18     	; 0x14708 <format_drives+0xde>
                {
                    printf("Can not use non 256 byte sectors\n");
   146f6:	1f 92       	push	r1
   146f8:	6d 96       	adiw	r28, 0x1d	; 29
   146fa:	2f ad       	ldd	r18, Y+63	; 0x3f
   146fc:	6d 97       	sbiw	r28, 0x1d	; 29
   146fe:	2f 93       	push	r18
   14700:	6c 96       	adiw	r28, 0x1c	; 28
   14702:	3f ad       	ldd	r19, Y+63	; 0x3f
   14704:	6c 97       	sbiw	r28, 0x1c	; 28
   14706:	4f c0       	rjmp	.+158    	; 0x147a6 <format_drives+0x17c>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14708:	f5 01       	movw	r30, r10
   1470a:	c3 80       	ldd	r12, Z+3	; 0x03
   1470c:	d4 80       	ldd	r13, Z+4	; 0x04
   1470e:	e5 80       	ldd	r14, Z+5	; 0x05
   14710:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"SS80-%d", ss80);
   14712:	63 96       	adiw	r28, 0x13	; 19
   14714:	ff ad       	ldd	r31, Y+63	; 0x3f
   14716:	63 97       	sbiw	r28, 0x13	; 19
   14718:	ff 93       	push	r31
   1471a:	62 96       	adiw	r28, 0x12	; 18
   1471c:	2f ad       	ldd	r18, Y+63	; 0x3f
   1471e:	62 97       	sbiw	r28, 0x12	; 18
   14720:	2f 93       	push	r18
   14722:	1f 92       	push	r1
   14724:	7f 92       	push	r7
   14726:	6f 92       	push	r6
   14728:	5f 92       	push	r5
   1472a:	4f 92       	push	r4
   1472c:	0e 94 0c 48 	call	0x9018	; 0x9018 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14730:	c7 01       	movw	r24, r14
   14732:	b6 01       	movw	r22, r12
   14734:	1e d1       	rcall	.+572    	; 0x14972 <lif_dir_count>
   14736:	9b 01       	movw	r18, r22
   14738:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   1473a:	87 01       	movw	r16, r14
   1473c:	76 01       	movw	r14, r12
   1473e:	b2 01       	movw	r22, r4
   14740:	f1 01       	movw	r30, r2
   14742:	82 81       	ldd	r24, Z+2	; 0x02
   14744:	93 81       	ldd	r25, Z+3	; 0x03
   14746:	0e 94 49 de 	call	0x1bc92	; 0x1bc92 <lif_create_image>
   1474a:	0f b6       	in	r0, 0x3f	; 63
   1474c:	f8 94       	cli
   1474e:	de bf       	out	0x3e, r29	; 62
   14750:	0f be       	out	0x3f, r0	; 63
   14752:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   14754:	63 96       	adiw	r28, 0x13	; 19
   14756:	8e ad       	ldd	r24, Y+62	; 0x3e
   14758:	9f ad       	ldd	r25, Y+63	; 0x3f
   1475a:	63 97       	sbiw	r28, 0x13	; 19
   1475c:	01 96       	adiw	r24, 0x01	; 1
   1475e:	63 96       	adiw	r28, 0x13	; 19
   14760:	9f af       	std	Y+63, r25	; 0x3f
   14762:	8e af       	std	Y+62, r24	; 0x3e
   14764:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14766:	f5 01       	movw	r30, r10
   14768:	80 81       	ld	r24, Z
   1476a:	81 30       	cpi	r24, 0x01	; 1
   1476c:	09 f0       	breq	.+2      	; 0x14770 <format_drives+0x146>
   1476e:	57 c0       	rjmp	.+174    	; 0x1481e <format_drives+0x1f4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14770:	27 a0       	ldd	r2, Z+39	; 0x27
   14772:	30 a4       	ldd	r3, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   14774:	be 01       	movw	r22, r28
   14776:	6f 5f       	subi	r22, 0xFF	; 255
   14778:	7f 4f       	sbci	r23, 0xFF	; 255
   1477a:	f1 01       	movw	r30, r2
   1477c:	82 81       	ldd	r24, Z+2	; 0x02
   1477e:	93 81       	ldd	r25, Z+3	; 0x03
   14780:	0e 94 19 7b 	call	0xf632	; 0xf632 <stat>
   14784:	01 96       	adiw	r24, 0x01	; 1
   14786:	09 f0       	breq	.+2      	; 0x1478a <format_drives+0x160>
   14788:	41 c0       	rjmp	.+130    	; 0x1480c <format_drives+0x1e2>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   1478a:	f1 01       	movw	r30, r2
   1478c:	86 81       	ldd	r24, Z+6	; 0x06
   1478e:	97 81       	ldd	r25, Z+7	; 0x07
   14790:	81 15       	cp	r24, r1
   14792:	91 40       	sbci	r25, 0x01	; 1
   14794:	79 f0       	breq	.+30     	; 0x147b4 <format_drives+0x18a>
                {
                    printf("Can not use non 256 byte sectors\n");
   14796:	1f 92       	push	r1
   14798:	6a 96       	adiw	r28, 0x1a	; 26
   1479a:	2f ad       	ldd	r18, Y+63	; 0x3f
   1479c:	6a 97       	sbiw	r28, 0x1a	; 26
   1479e:	2f 93       	push	r18
   147a0:	69 96       	adiw	r28, 0x19	; 25
   147a2:	3f ad       	ldd	r19, Y+63	; 0x3f
   147a4:	69 97       	sbiw	r28, 0x19	; 25
   147a6:	3f 93       	push	r19
   147a8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                    continue;
   147ac:	0f 90       	pop	r0
   147ae:	0f 90       	pop	r0
   147b0:	0f 90       	pop	r0
   147b2:	35 c0       	rjmp	.+106    	; 0x1481e <format_drives+0x1f4>
                }
                sectors = Devices[i].BLOCKS;
   147b4:	f5 01       	movw	r30, r10
   147b6:	c3 80       	ldd	r12, Z+3	; 0x03
   147b8:	d4 80       	ldd	r13, Z+4	; 0x04
   147ba:	e5 80       	ldd	r14, Z+5	; 0x05
   147bc:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"AMIGO%d", amigo);
   147be:	65 96       	adiw	r28, 0x15	; 21
   147c0:	ff ad       	ldd	r31, Y+63	; 0x3f
   147c2:	65 97       	sbiw	r28, 0x15	; 21
   147c4:	ff 93       	push	r31
   147c6:	64 96       	adiw	r28, 0x14	; 20
   147c8:	2f ad       	ldd	r18, Y+63	; 0x3f
   147ca:	64 97       	sbiw	r28, 0x14	; 20
   147cc:	2f 93       	push	r18
   147ce:	1f 92       	push	r1
   147d0:	67 96       	adiw	r28, 0x17	; 23
   147d2:	3f ad       	ldd	r19, Y+63	; 0x3f
   147d4:	67 97       	sbiw	r28, 0x17	; 23
   147d6:	3f 93       	push	r19
   147d8:	66 96       	adiw	r28, 0x16	; 22
   147da:	4f ad       	ldd	r20, Y+63	; 0x3f
   147dc:	66 97       	sbiw	r28, 0x16	; 22
   147de:	4f 93       	push	r20
   147e0:	5f 92       	push	r5
   147e2:	4f 92       	push	r4
   147e4:	0e 94 0c 48 	call	0x9018	; 0x9018 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   147e8:	c7 01       	movw	r24, r14
   147ea:	b6 01       	movw	r22, r12
   147ec:	c2 d0       	rcall	.+388    	; 0x14972 <lif_dir_count>
   147ee:	9b 01       	movw	r18, r22
   147f0:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   147f2:	87 01       	movw	r16, r14
   147f4:	76 01       	movw	r14, r12
   147f6:	b2 01       	movw	r22, r4
   147f8:	f1 01       	movw	r30, r2
   147fa:	82 81       	ldd	r24, Z+2	; 0x02
   147fc:	93 81       	ldd	r25, Z+3	; 0x03
   147fe:	0e 94 49 de 	call	0x1bc92	; 0x1bc92 <lif_create_image>
   14802:	0f b6       	in	r0, 0x3f	; 63
   14804:	f8 94       	cli
   14806:	de bf       	out	0x3e, r29	; 62
   14808:	0f be       	out	0x3f, r0	; 63
   1480a:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   1480c:	65 96       	adiw	r28, 0x15	; 21
   1480e:	8e ad       	ldd	r24, Y+62	; 0x3e
   14810:	9f ad       	ldd	r25, Y+63	; 0x3f
   14812:	65 97       	sbiw	r28, 0x15	; 21
   14814:	01 96       	adiw	r24, 0x01	; 1
   14816:	65 96       	adiw	r28, 0x15	; 21
   14818:	9f af       	std	Y+63, r25	; 0x3f
   1481a:	8e af       	std	Y+62, r24	; 0x3e
   1481c:	65 97       	sbiw	r28, 0x15	; 21
   1481e:	9b e2       	ldi	r25, 0x2B	; 43
   14820:	a9 0e       	add	r10, r25
   14822:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14824:	e6 e0       	ldi	r30, 0x06	; 6
   14826:	f1 e2       	ldi	r31, 0x21	; 33
   14828:	ea 15       	cp	r30, r10
   1482a:	fb 05       	cpc	r31, r11
   1482c:	09 f0       	breq	.+2      	; 0x14830 <format_drives+0x206>
   1482e:	49 cf       	rjmp	.-366    	; 0x146c2 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   14830:	88 e5       	ldi	r24, 0x58	; 88
   14832:	95 e1       	ldi	r25, 0x15	; 21
   14834:	1f 92       	push	r1
   14836:	9f 93       	push	r25
   14838:	8f 93       	push	r24
   1483a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
   1483e:	0f 90       	pop	r0
   14840:	0f 90       	pop	r0
   14842:	0f 90       	pop	r0
   14844:	c3 5a       	subi	r28, 0xA3	; 163
   14846:	df 4f       	sbci	r29, 0xFF	; 255
   14848:	0f b6       	in	r0, 0x3f	; 63
   1484a:	f8 94       	cli
   1484c:	de bf       	out	0x3e, r29	; 62
   1484e:	0f be       	out	0x3f, r0	; 63
   14850:	cd bf       	out	0x3d, r28	; 61
   14852:	df 91       	pop	r29
   14854:	cf 91       	pop	r28
   14856:	1f 91       	pop	r17
   14858:	0f 91       	pop	r16
   1485a:	ff 90       	pop	r15
   1485c:	ef 90       	pop	r14
   1485e:	df 90       	pop	r13
   14860:	cf 90       	pop	r12
   14862:	bf 90       	pop	r11
   14864:	af 90       	pop	r10
   14866:	8f 90       	pop	r8
   14868:	7f 90       	pop	r7
   1486a:	6f 90       	pop	r6
   1486c:	5f 90       	pop	r5
   1486e:	4f 90       	pop	r4
   14870:	3f 90       	pop	r3
   14872:	2f 90       	pop	r2
   14874:	08 95       	ret

00014876 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14876:	8f e1       	ldi	r24, 0x1F	; 31
   14878:	e6 e0       	ldi	r30, 0x06	; 6
   1487a:	f1 e2       	ldi	r31, 0x21	; 33
   1487c:	df 01       	movw	r26, r30
   1487e:	98 2f       	mov	r25, r24
   14880:	1d 92       	st	X+, r1
   14882:	9a 95       	dec	r25
   14884:	e9 f7       	brne	.-6      	; 0x14880 <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14886:	9f e3       	ldi	r25, 0x3F	; 63
   14888:	e6 e2       	ldi	r30, 0x26	; 38
   1488a:	f1 e2       	ldi	r31, 0x21	; 33
   1488c:	df 01       	movw	r26, r30
   1488e:	1d 92       	st	X+, r1
   14890:	9a 95       	dec	r25
   14892:	e9 f7       	brne	.-6      	; 0x1488e <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14894:	e6 e6       	ldi	r30, 0x66	; 102
   14896:	f1 e2       	ldi	r31, 0x21	; 33
   14898:	df 01       	movw	r26, r30
   1489a:	1d 92       	st	X+, r1
   1489c:	8a 95       	dec	r24
   1489e:	e9 f7       	brne	.-6      	; 0x1489a <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   148a0:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x80>
   148a4:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x81>
   148a8:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x82>
   148ac:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   148b0:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x84>
   148b4:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x85>
   148b8:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x86>
   148bc:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   148c0:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x88>
   148c4:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x89>
   148c8:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x8a>
   148cc:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   148d0:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x8c>
   148d4:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x8d>
   148d8:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x8e>
   148dc:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   148e0:	81 e0       	ldi	r24, 0x01	; 1
   148e2:	90 e8       	ldi	r25, 0x80	; 128
   148e4:	a0 e0       	ldi	r26, 0x00	; 0
   148e6:	b0 e0       	ldi	r27, 0x00	; 0
   148e8:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0x90>
   148ec:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0x91>
   148f0:	a0 93 98 21 	sts	0x2198, r26	; 0x802198 <hpdir+0x92>
   148f4:	b0 93 99 21 	sts	0x2199, r27	; 0x802199 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   148f8:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x94>
   148fc:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x95>
   14900:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x96>
   14904:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14908:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x98>
   1490c:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x99>
   14910:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0x9a>
   14914:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14918:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0x9c>
   1491c:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0x9d>
   14920:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0x9e>
   14924:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   14928:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0xa0>
   1492c:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xa1>
   14930:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0xa2>
   14934:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   14938:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0xa4>
   1493c:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <hpdir+0xa5>
   14940:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <hpdir+0xa6>
   14944:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   14948:	81 e0       	ldi	r24, 0x01	; 1
   1494a:	90 e0       	ldi	r25, 0x00	; 0
   1494c:	a0 e0       	ldi	r26, 0x00	; 0
   1494e:	b0 e0       	ldi	r27, 0x00	; 0
   14950:	80 93 ae 21 	sts	0x21AE, r24	; 0x8021ae <hpdir+0xa8>
   14954:	90 93 af 21 	sts	0x21AF, r25	; 0x8021af <hpdir+0xa9>
   14958:	a0 93 b0 21 	sts	0x21B0, r26	; 0x8021b0 <hpdir+0xaa>
   1495c:	b0 93 b1 21 	sts	0x21B1, r27	; 0x8021b1 <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   14960:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <hpdir+0xac>
   14964:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <hpdir+0xad>
   14968:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <hpdir+0xae>
   1496c:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <hpdir+0xaf>
   14970:	08 95       	ret

00014972 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   14972:	20 e0       	ldi	r18, 0x00	; 0
   14974:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14976:	61 15       	cp	r22, r1
   14978:	71 05       	cpc	r23, r1
   1497a:	81 05       	cpc	r24, r1
   1497c:	91 05       	cpc	r25, r1
   1497e:	39 f0       	breq	.+14     	; 0x1498e <lif_dir_count+0x1c>
	{
		scale++;
   14980:	2f 5f       	subi	r18, 0xFF	; 255
   14982:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14984:	95 95       	asr	r25
   14986:	87 95       	ror	r24
   14988:	77 95       	ror	r23
   1498a:	67 95       	ror	r22
   1498c:	f4 cf       	rjmp	.-24     	; 0x14976 <lif_dir_count+0x4>
	}
	scale>>=1;
   1498e:	35 95       	asr	r19
   14990:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14992:	61 e0       	ldi	r22, 0x01	; 1
   14994:	70 e0       	ldi	r23, 0x00	; 0
   14996:	80 e0       	ldi	r24, 0x00	; 0
   14998:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   1499a:	21 50       	subi	r18, 0x01	; 1
   1499c:	31 09       	sbc	r19, r1
   1499e:	28 f0       	brcs	.+10     	; 0x149aa <lif_dir_count+0x38>
		num <<=1;
   149a0:	66 0f       	add	r22, r22
   149a2:	77 1f       	adc	r23, r23
   149a4:	88 1f       	adc	r24, r24
   149a6:	99 1f       	adc	r25, r25
   149a8:	f8 cf       	rjmp	.-16     	; 0x1499a <lif_dir_count+0x28>
	return(num);
}
   149aa:	08 95       	ret

000149ac <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   149ac:	a1 e8       	ldi	r26, 0x81	; 129
   149ae:	b1 e0       	ldi	r27, 0x01	; 1
   149b0:	ec ed       	ldi	r30, 0xDC	; 220
   149b2:	f4 ea       	ldi	r31, 0xA4	; 164
   149b4:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   149b8:	98 2e       	mov	r9, r24
   149ba:	59 2e       	mov	r5, r25
   149bc:	1b 01       	movw	r2, r22
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   149be:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   149c0:	5a df       	rcall	.-332    	; 0x14876 <hpdir_init>
   149c2:	68 e8       	ldi	r22, 0x88	; 136
   149c4:	78 e0       	ldi	r23, 0x08	; 8
   149c6:	8b ec       	ldi	r24, 0xCB	; 203
   149c8:	9f e0       	ldi	r25, 0x0F	; 15
   149ca:	0e 94 05 80 	call	0x1000a	; 0x1000a <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   149ce:	7c 01       	movw	r14, r24
   149d0:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   149d2:	49 f4       	brne	.+18     	; 0x149e6 <hpdir_find_drive+0x3a>
   149d4:	68 e8       	ldi	r22, 0x88	; 136
   149d6:	78 e0       	ldi	r23, 0x08	; 8
   149d8:	8a ec       	ldi	r24, 0xCA	; 202
   149da:	9f e0       	ldi	r25, 0x0F	; 15
   149dc:	0e 94 05 80 	call	0x1000a	; 0x1000a <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   149e0:	7c 01       	movw	r14, r24
   149e2:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   149e4:	51 f0       	breq	.+20     	; 0x149fa <hpdir_find_drive+0x4e>
   149e6:	c1 2c       	mov	r12, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   149e8:	d1 2c       	mov	r13, r1
   149ea:	8e 01       	movw	r16, r28
   149ec:	0f 5f       	subi	r16, 0xFF	; 255
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   149ee:	1e 4f       	sbci	r17, 0xFE	; 254
   149f0:	83 ee       	ldi	r24, 0xE3	; 227
   149f2:	90 e2       	ldi	r25, 0x20	; 32
   149f4:	3c 01       	movw	r6, r24
   149f6:	81 2c       	mov	r8, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   149f8:	1f c0       	rjmp	.+62     	; 0x14a38 <hpdir_find_drive+0x8c>
   149fa:	a1 14       	cp	r10, r1
   149fc:	b1 04       	cpc	r11, r1
   149fe:	09 f4       	brne	.+2      	; 0x14a02 <hpdir_find_drive+0x56>
			printf("Error: hpdir.ini not found!\n");
   14a00:	7a c1       	rjmp	.+756    	; 0x14cf6 <hpdir_find_drive+0x34a>
   14a02:	8a ee       	ldi	r24, 0xEA	; 234
   14a04:	90 e2       	ldi	r25, 0x20	; 32
   14a06:	1f 92       	push	r1
   14a08:	9f 93       	push	r25
   14a0a:	8f 93       	push	r24
   14a0c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14a10:	0f 90       	pop	r0
   14a12:	0f 90       	pop	r0
   14a14:	0f 90       	pop	r0
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14a16:	6f c1       	rjmp	.+734    	; 0x14cf6 <hpdir_find_drive+0x34a>
   14a18:	ce 01       	movw	r24, r28
   14a1a:	01 96       	adiw	r24, 0x01	; 1
   14a1c:	0e 94 99 33 	call	0x6732	; 0x6732 <trim_tail>
        ptr = skipspaces(ptr);
   14a20:	ce 01       	movw	r24, r28
   14a22:	01 96       	adiw	r24, 0x01	; 1
   14a24:	0e 94 a9 33 	call	0x6752	; 0x6752 <skipspaces>

        len = strlen(ptr);
   14a28:	fc 01       	movw	r30, r24
   14a2a:	01 90       	ld	r0, Z+
   14a2c:	00 20       	and	r0, r0
   14a2e:	e9 f7       	brne	.-6      	; 0x14a2a <hpdir_find_drive+0x7e>
        if(!len)
   14a30:	31 97       	sbiw	r30, 0x01	; 1
   14a32:	8e 17       	cp	r24, r30
   14a34:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14a36:	51 f4       	brne	.+20     	; 0x14a4c <hpdir_find_drive+0xa0>
   14a38:	a7 01       	movw	r20, r14
   14a3a:	6e ef       	ldi	r22, 0xFE	; 254
   14a3c:	70 e0       	ldi	r23, 0x00	; 0
   14a3e:	ce 01       	movw	r24, r28
   14a40:	01 96       	adiw	r24, 0x01	; 1
   14a42:	0e 94 36 78 	call	0xf06c	; 0xf06c <fgets>
   14a46:	89 2b       	or	r24, r25
   14a48:	39 f7       	brne	.-50     	; 0x14a18 <hpdir_find_drive+0x6c>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14a4a:	0c c0       	rjmp	.+24     	; 0x14a64 <hpdir_find_drive+0xb8>
   14a4c:	fc 01       	movw	r30, r24
   14a4e:	20 81       	ld	r18, Z
   14a50:	2b 33       	cpi	r18, 0x3B	; 59
   14a52:	91 f3       	breq	.-28     	; 0x14a38 <hpdir_find_drive+0x8c>
   14a54:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14a56:	81 f3       	breq	.-32     	; 0x14a38 <hpdir_find_drive+0x8c>
   14a58:	2b 35       	cpi	r18, 0x5B	; 91
   14a5a:	31 f4       	brne	.+12     	; 0x14a68 <hpdir_find_drive+0xbc>
   14a5c:	f1 e0       	ldi	r31, 0x01	; 1
   14a5e:	cf 16       	cp	r12, r31
   14a60:	d1 04       	cpc	r13, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14a62:	11 f4       	brne	.+4      	; 0x14a68 <hpdir_find_drive+0xbc>
   14a64:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14a66:	41 c1       	rjmp	.+642    	; 0x14cea <hpdir_find_drive+0x33e>
   14a68:	4e e7       	ldi	r20, 0x7E	; 126
   14a6a:	50 e0       	ldi	r21, 0x00	; 0
   14a6c:	b8 01       	movw	r22, r16
   14a6e:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
   14a72:	cf 57       	subi	r28, 0x7F	; 127
   14a74:	de 4f       	sbci	r29, 0xFE	; 254
   14a76:	88 83       	st	Y, r24
   14a78:	c1 58       	subi	r28, 0x81	; 129
   14a7a:	d1 40       	sbci	r29, 0x01	; 1

        if(MATCHI(token,"[driveinfo]"))
   14a7c:	49 2e       	mov	r4, r25
   14a7e:	65 ed       	ldi	r22, 0xD5	; 213
   14a80:	7f e0       	ldi	r23, 0x0F	; 15
   14a82:	c8 01       	movw	r24, r16
   14a84:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
   14a88:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14a8a:	21 f0       	breq	.+8      	; 0x14a94 <hpdir_find_drive+0xe8>
   14a8c:	cc 24       	eor	r12, r12
   14a8e:	c3 94       	inc	r12
   14a90:	d1 2c       	mov	r13, r1
            continue;
        }

		if( driveinfo != 1)
   14a92:	d2 cf       	rjmp	.-92     	; 0x14a38 <hpdir_find_drive+0x8c>
   14a94:	21 e0       	ldi	r18, 0x01	; 1
   14a96:	c2 16       	cp	r12, r18
   14a98:	d1 04       	cpc	r13, r1
			continue;

        if(list)
   14a9a:	71 f6       	brne	.-100    	; 0x14a38 <hpdir_find_drive+0x8c>
   14a9c:	21 14       	cp	r2, r1
   14a9e:	31 04       	cpc	r3, r1
        {
            printf("%s %s\n", token, ptr);
   14aa0:	a1 f0       	breq	.+40     	; 0x14aca <hpdir_find_drive+0x11e>
   14aa2:	4f 92       	push	r4
   14aa4:	cf 57       	subi	r28, 0x7F	; 127
   14aa6:	de 4f       	sbci	r29, 0xFE	; 254
   14aa8:	88 81       	ld	r24, Y
   14aaa:	c1 58       	subi	r28, 0x81	; 129
   14aac:	d1 40       	sbci	r29, 0x01	; 1
   14aae:	8f 93       	push	r24
   14ab0:	1f 93       	push	r17
   14ab2:	0f 93       	push	r16
   14ab4:	1f 92       	push	r1
   14ab6:	7f 92       	push	r7
   14ab8:	6f 92       	push	r6
   14aba:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            continue;
   14abe:	0f b6       	in	r0, 0x3f	; 63
   14ac0:	f8 94       	cli
   14ac2:	de bf       	out	0x3e, r29	; 62
   14ac4:	0f be       	out	0x3f, r0	; 63
   14ac6:	cd bf       	out	0x3d, r28	; 61
        }

		if ( ! MATCHI(model,token) )
   14ac8:	b7 cf       	rjmp	.-146    	; 0x14a38 <hpdir_find_drive+0x8c>
   14aca:	b8 01       	movw	r22, r16
   14acc:	89 2d       	mov	r24, r9
   14ace:	95 2d       	mov	r25, r5
   14ad0:	0e 94 4a 34 	call	0x6894	; 0x6894 <MATCHI>
			continue;

		hpdir_init();
   14ad4:	89 2b       	or	r24, r25
   14ad6:	d1 f2       	breq	.-76     	; 0x14a8c <hpdir_find_drive+0xe0>

		if(verbose)
   14ad8:	ce de       	rcall	.-612    	; 0x14876 <hpdir_init>
   14ada:	a1 14       	cp	r10, r1
   14adc:	b1 04       	cpc	r11, r1
			printf("Found Model: %s\n", model);
   14ade:	71 f0       	breq	.+28     	; 0x14afc <hpdir_find_drive+0x150>
   14ae0:	5f 92       	push	r5
   14ae2:	9f 92       	push	r9
   14ae4:	82 ed       	ldi	r24, 0xD2	; 210
   14ae6:	90 e2       	ldi	r25, 0x20	; 32
   14ae8:	1f 92       	push	r1
   14aea:	9f 93       	push	r25
   14aec:	8f 93       	push	r24
   14aee:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   14af2:	0f 90       	pop	r0
   14af4:	0f 90       	pop	r0
   14af6:	0f 90       	pop	r0
   14af8:	0f 90       	pop	r0

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14afa:	0f 90       	pop	r0
   14afc:	4e e1       	ldi	r20, 0x1E	; 30
   14afe:	50 e0       	ldi	r21, 0x00	; 0
   14b00:	b8 01       	movw	r22, r16
   14b02:	86 e0       	ldi	r24, 0x06	; 6
   14b04:	91 e2       	ldi	r25, 0x21	; 33
   14b06:	0e 94 4a 33 	call	0x6694	; 0x6694 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14b0a:	4e e7       	ldi	r20, 0x7E	; 126
   14b0c:	50 e0       	ldi	r21, 0x00	; 0
   14b0e:	b8 01       	movw	r22, r16
   14b10:	cf 57       	subi	r28, 0x7F	; 127
   14b12:	de 4f       	sbci	r29, 0xFE	; 254
   14b14:	88 81       	ld	r24, Y
   14b16:	c1 58       	subi	r28, 0x81	; 129
   14b18:	d1 40       	sbci	r29, 0x01	; 1
   14b1a:	94 2d       	mov	r25, r4
   14b1c:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14b20:	4e e3       	ldi	r20, 0x3E	; 62
   14b22:	50 e0       	ldi	r21, 0x00	; 0
   14b24:	66 e2       	ldi	r22, 0x26	; 38
   14b26:	71 e2       	ldi	r23, 0x21	; 33
   14b28:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14b2c:	4e e1       	ldi	r20, 0x1E	; 30
   14b2e:	50 e0       	ldi	r21, 0x00	; 0
   14b30:	66 e6       	ldi	r22, 0x66	; 102
   14b32:	71 e2       	ldi	r23, 0x21	; 33
   14b34:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14b38:	4e e7       	ldi	r20, 0x7E	; 126
   14b3a:	50 e0       	ldi	r21, 0x00	; 0
   14b3c:	b8 01       	movw	r22, r16
   14b3e:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.ID = get_value(token);
   14b42:	6c 01       	movw	r12, r24
   14b44:	c8 01       	movw	r24, r16
   14b46:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14b4a:	60 93 86 21 	sts	0x2186, r22	; 0x802186 <hpdir+0x80>
   14b4e:	70 93 87 21 	sts	0x2187, r23	; 0x802187 <hpdir+0x81>
   14b52:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <hpdir+0x82>
   14b56:	90 93 89 21 	sts	0x2189, r25	; 0x802189 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14b5a:	4e e7       	ldi	r20, 0x7E	; 126
   14b5c:	50 e0       	ldi	r21, 0x00	; 0
   14b5e:	b8 01       	movw	r22, r16
   14b60:	c6 01       	movw	r24, r12
   14b62:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.mask_stat2 = get_value(token);
   14b66:	6c 01       	movw	r12, r24
   14b68:	c8 01       	movw	r24, r16
   14b6a:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14b6e:	60 93 8a 21 	sts	0x218A, r22	; 0x80218a <hpdir+0x84>
   14b72:	70 93 8b 21 	sts	0x218B, r23	; 0x80218b <hpdir+0x85>
   14b76:	80 93 8c 21 	sts	0x218C, r24	; 0x80218c <hpdir+0x86>
   14b7a:	90 93 8d 21 	sts	0x218D, r25	; 0x80218d <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14b7e:	4e e7       	ldi	r20, 0x7E	; 126
   14b80:	50 e0       	ldi	r21, 0x00	; 0
   14b82:	b8 01       	movw	r22, r16
   14b84:	c6 01       	movw	r24, r12
   14b86:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.id_stat2 = get_value(token);
   14b8a:	6c 01       	movw	r12, r24
   14b8c:	c8 01       	movw	r24, r16
   14b8e:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14b92:	60 93 8e 21 	sts	0x218E, r22	; 0x80218e <hpdir+0x88>
   14b96:	70 93 8f 21 	sts	0x218F, r23	; 0x80218f <hpdir+0x89>
   14b9a:	80 93 90 21 	sts	0x2190, r24	; 0x802190 <hpdir+0x8a>
   14b9e:	90 93 91 21 	sts	0x2191, r25	; 0x802191 <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14ba2:	4e e7       	ldi	r20, 0x7E	; 126
   14ba4:	50 e0       	ldi	r21, 0x00	; 0
   14ba6:	b8 01       	movw	r22, r16
   14ba8:	c6 01       	movw	r24, r12
   14baa:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14bae:	6c 01       	movw	r12, r24
   14bb0:	c8 01       	movw	r24, r16
   14bb2:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14bb6:	60 93 92 21 	sts	0x2192, r22	; 0x802192 <hpdir+0x8c>
   14bba:	70 93 93 21 	sts	0x2193, r23	; 0x802193 <hpdir+0x8d>
   14bbe:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <hpdir+0x8e>
   14bc2:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14bc6:	4e e7       	ldi	r20, 0x7E	; 126
   14bc8:	50 e0       	ldi	r21, 0x00	; 0
   14bca:	b8 01       	movw	r22, r16
   14bcc:	c6 01       	movw	r24, r12
   14bce:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14bd2:	6c 01       	movw	r12, r24
   14bd4:	c8 01       	movw	r24, r16
   14bd6:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14bda:	60 93 96 21 	sts	0x2196, r22	; 0x802196 <hpdir+0x90>
   14bde:	70 93 97 21 	sts	0x2197, r23	; 0x802197 <hpdir+0x91>
   14be2:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <hpdir+0x92>
   14be6:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14bea:	4e e7       	ldi	r20, 0x7E	; 126
   14bec:	50 e0       	ldi	r21, 0x00	; 0
   14bee:	b8 01       	movw	r22, r16
   14bf0:	c6 01       	movw	r24, r12
   14bf2:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.CYLINDERS = get_value(token);
   14bf6:	6c 01       	movw	r12, r24
   14bf8:	c8 01       	movw	r24, r16
   14bfa:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14bfe:	60 93 9a 21 	sts	0x219A, r22	; 0x80219a <hpdir+0x94>
   14c02:	70 93 9b 21 	sts	0x219B, r23	; 0x80219b <hpdir+0x95>
   14c06:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <hpdir+0x96>
   14c0a:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14c0e:	4e e7       	ldi	r20, 0x7E	; 126
   14c10:	50 e0       	ldi	r21, 0x00	; 0
   14c12:	b8 01       	movw	r22, r16
   14c14:	c6 01       	movw	r24, r12
   14c16:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.HEADS = get_value(token);
   14c1a:	6c 01       	movw	r12, r24
   14c1c:	c8 01       	movw	r24, r16
   14c1e:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14c22:	60 93 9e 21 	sts	0x219E, r22	; 0x80219e <hpdir+0x98>
   14c26:	70 93 9f 21 	sts	0x219F, r23	; 0x80219f <hpdir+0x99>
   14c2a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <hpdir+0x9a>
   14c2e:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14c32:	4e e7       	ldi	r20, 0x7E	; 126
   14c34:	50 e0       	ldi	r21, 0x00	; 0
   14c36:	b8 01       	movw	r22, r16
   14c38:	c6 01       	movw	r24, r12
   14c3a:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.SECTORS = get_value(token);
   14c3e:	6c 01       	movw	r12, r24
   14c40:	c8 01       	movw	r24, r16
   14c42:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14c46:	60 93 a2 21 	sts	0x21A2, r22	; 0x8021a2 <hpdir+0x9c>
   14c4a:	70 93 a3 21 	sts	0x21A3, r23	; 0x8021a3 <hpdir+0x9d>
   14c4e:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <hpdir+0x9e>
   14c52:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14c56:	4e e7       	ldi	r20, 0x7E	; 126
   14c58:	50 e0       	ldi	r21, 0x00	; 0
   14c5a:	b8 01       	movw	r22, r16
   14c5c:	c6 01       	movw	r24, r12
   14c5e:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14c62:	6c 01       	movw	r12, r24
   14c64:	c8 01       	movw	r24, r16
   14c66:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14c6a:	60 93 a6 21 	sts	0x21A6, r22	; 0x8021a6 <hpdir+0xa0>
   14c6e:	70 93 a7 21 	sts	0x21A7, r23	; 0x8021a7 <hpdir+0xa1>
   14c72:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <hpdir+0xa2>
   14c76:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   14c7a:	4e e7       	ldi	r20, 0x7E	; 126
   14c7c:	50 e0       	ldi	r21, 0x00	; 0
   14c7e:	b8 01       	movw	r22, r16
   14c80:	c6 01       	movw	r24, r12
   14c82:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <get_token>
		hpdir.INTERLEAVE = get_value(token);
   14c86:	c8 01       	movw	r24, r16
   14c88:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <get_value>
   14c8c:	60 93 aa 21 	sts	0x21AA, r22	; 0x8021aa <hpdir+0xa4>
   14c90:	70 93 ab 21 	sts	0x21AB, r23	; 0x8021ab <hpdir+0xa5>
   14c94:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <hpdir+0xa6>
   14c98:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14c9c:	20 91 9a 21 	lds	r18, 0x219A	; 0x80219a <hpdir+0x94>
   14ca0:	30 91 9b 21 	lds	r19, 0x219B	; 0x80219b <hpdir+0x95>
   14ca4:	40 91 9c 21 	lds	r20, 0x219C	; 0x80219c <hpdir+0x96>
   14ca8:	50 91 9d 21 	lds	r21, 0x219D	; 0x80219d <hpdir+0x97>
   14cac:	60 91 9e 21 	lds	r22, 0x219E	; 0x80219e <hpdir+0x98>
   14cb0:	70 91 9f 21 	lds	r23, 0x219F	; 0x80219f <hpdir+0x99>
   14cb4:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <hpdir+0x9a>
   14cb8:	90 91 a1 21 	lds	r25, 0x21A1	; 0x8021a1 <hpdir+0x9b>
   14cbc:	0e 94 65 e3 	call	0x1c6ca	; 0x1c6ca <__mulsi3>
   14cc0:	9b 01       	movw	r18, r22
   14cc2:	ac 01       	movw	r20, r24
   14cc4:	60 91 a2 21 	lds	r22, 0x21A2	; 0x8021a2 <hpdir+0x9c>
   14cc8:	70 91 a3 21 	lds	r23, 0x21A3	; 0x8021a3 <hpdir+0x9d>
   14ccc:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <hpdir+0x9e>
   14cd0:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <hpdir+0x9f>
   14cd4:	0e 94 65 e3 	call	0x1c6ca	; 0x1c6ca <__mulsi3>
   14cd8:	60 93 b2 21 	sts	0x21B2, r22	; 0x8021b2 <hpdir+0xac>
   14cdc:	70 93 b3 21 	sts	0x21B3, r23	; 0x8021b3 <hpdir+0xad>
   14ce0:	80 93 b4 21 	sts	0x21B4, r24	; 0x8021b4 <hpdir+0xae>
   14ce4:	90 93 b5 21 	sts	0x21B5, r25	; 0x8021b5 <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14ce8:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14cea:	10 e0       	ldi	r17, 0x00	; 0
   14cec:	c7 01       	movw	r24, r14
   14cee:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
	return(found);
   14cf2:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   14cf4:	02 c0       	rjmp	.+4      	; 0x14cfa <hpdir_find_drive+0x34e>
   14cf6:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14cf8:	90 e0       	ldi	r25, 0x00	; 0
   14cfa:	cf 57       	subi	r28, 0x7F	; 127
   14cfc:	de 4f       	sbci	r29, 0xFE	; 254
   14cfe:	e2 e1       	ldi	r30, 0x12	; 18
   14d00:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00014d04 <SS80ControllerPack>:
   14d04:	0f 93       	push	r16
   14d06:	1f 93       	push	r17
   14d08:	25 e0       	ldi	r18, 0x05	; 5
   14d0a:	30 e0       	ldi	r19, 0x00	; 0
   14d0c:	fc 01       	movw	r30, r24
   14d0e:	31 83       	std	Z+1, r19	; 0x01
   14d10:	20 83       	st	Z, r18
   14d12:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14d16:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14d1a:	06 81       	ldd	r16, Z+6	; 0x06
   14d1c:	17 81       	ldd	r17, Z+7	; 0x07
   14d1e:	20 e0       	ldi	r18, 0x00	; 0
   14d20:	30 e0       	ldi	r19, 0x00	; 0
   14d22:	42 e0       	ldi	r20, 0x02	; 2
   14d24:	50 e0       	ldi	r21, 0x00	; 0
   14d26:	60 e0       	ldi	r22, 0x00	; 0
   14d28:	70 e0       	ldi	r23, 0x00	; 0
   14d2a:	8d ea       	ldi	r24, 0xAD	; 173
   14d2c:	99 e1       	ldi	r25, 0x19	; 25
   14d2e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14d32:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14d36:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14d3a:	00 85       	ldd	r16, Z+8	; 0x08
   14d3c:	11 85       	ldd	r17, Z+9	; 0x09
   14d3e:	20 e0       	ldi	r18, 0x00	; 0
   14d40:	30 e0       	ldi	r19, 0x00	; 0
   14d42:	42 e0       	ldi	r20, 0x02	; 2
   14d44:	50 e0       	ldi	r21, 0x00	; 0
   14d46:	61 e0       	ldi	r22, 0x01	; 1
   14d48:	70 e0       	ldi	r23, 0x00	; 0
   14d4a:	8d ea       	ldi	r24, 0xAD	; 173
   14d4c:	99 e1       	ldi	r25, 0x19	; 25
   14d4e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14d52:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14d56:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14d5a:	02 85       	ldd	r16, Z+10	; 0x0a
   14d5c:	10 e0       	ldi	r17, 0x00	; 0
   14d5e:	20 e0       	ldi	r18, 0x00	; 0
   14d60:	30 e0       	ldi	r19, 0x00	; 0
   14d62:	41 e0       	ldi	r20, 0x01	; 1
   14d64:	50 e0       	ldi	r21, 0x00	; 0
   14d66:	64 e0       	ldi	r22, 0x04	; 4
   14d68:	70 e0       	ldi	r23, 0x00	; 0
   14d6a:	8d ea       	ldi	r24, 0xAD	; 173
   14d6c:	99 e1       	ldi	r25, 0x19	; 25
   14d6e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14d72:	8d ea       	ldi	r24, 0xAD	; 173
   14d74:	99 e1       	ldi	r25, 0x19	; 25
   14d76:	1f 91       	pop	r17
   14d78:	0f 91       	pop	r16
   14d7a:	08 95       	ret

00014d7c <SS80UnitPack>:
   14d7c:	0f 93       	push	r16
   14d7e:	1f 93       	push	r17
   14d80:	23 e1       	ldi	r18, 0x13	; 19
   14d82:	30 e0       	ldi	r19, 0x00	; 0
   14d84:	fc 01       	movw	r30, r24
   14d86:	31 83       	std	Z+1, r19	; 0x01
   14d88:	20 83       	st	Z, r18
   14d8a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14d8e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14d92:	03 85       	ldd	r16, Z+11	; 0x0b
   14d94:	10 e0       	ldi	r17, 0x00	; 0
   14d96:	20 e0       	ldi	r18, 0x00	; 0
   14d98:	30 e0       	ldi	r19, 0x00	; 0
   14d9a:	41 e0       	ldi	r20, 0x01	; 1
   14d9c:	50 e0       	ldi	r21, 0x00	; 0
   14d9e:	60 e0       	ldi	r22, 0x00	; 0
   14da0:	70 e0       	ldi	r23, 0x00	; 0
   14da2:	8a e9       	ldi	r24, 0x9A	; 154
   14da4:	99 e1       	ldi	r25, 0x19	; 25
   14da6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14daa:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14dae:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14db2:	04 85       	ldd	r16, Z+12	; 0x0c
   14db4:	15 85       	ldd	r17, Z+13	; 0x0d
   14db6:	26 85       	ldd	r18, Z+14	; 0x0e
   14db8:	37 85       	ldd	r19, Z+15	; 0x0f
   14dba:	43 e0       	ldi	r20, 0x03	; 3
   14dbc:	50 e0       	ldi	r21, 0x00	; 0
   14dbe:	61 e0       	ldi	r22, 0x01	; 1
   14dc0:	70 e0       	ldi	r23, 0x00	; 0
   14dc2:	8a e9       	ldi	r24, 0x9A	; 154
   14dc4:	99 e1       	ldi	r25, 0x19	; 25
   14dc6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14dca:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14dce:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14dd2:	00 89       	ldd	r16, Z+16	; 0x10
   14dd4:	11 89       	ldd	r17, Z+17	; 0x11
   14dd6:	20 e0       	ldi	r18, 0x00	; 0
   14dd8:	30 e0       	ldi	r19, 0x00	; 0
   14dda:	42 e0       	ldi	r20, 0x02	; 2
   14ddc:	50 e0       	ldi	r21, 0x00	; 0
   14dde:	64 e0       	ldi	r22, 0x04	; 4
   14de0:	70 e0       	ldi	r23, 0x00	; 0
   14de2:	8a e9       	ldi	r24, 0x9A	; 154
   14de4:	99 e1       	ldi	r25, 0x19	; 25
   14de6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14dea:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14dee:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14df2:	02 89       	ldd	r16, Z+18	; 0x12
   14df4:	10 e0       	ldi	r17, 0x00	; 0
   14df6:	20 e0       	ldi	r18, 0x00	; 0
   14df8:	30 e0       	ldi	r19, 0x00	; 0
   14dfa:	41 e0       	ldi	r20, 0x01	; 1
   14dfc:	50 e0       	ldi	r21, 0x00	; 0
   14dfe:	66 e0       	ldi	r22, 0x06	; 6
   14e00:	70 e0       	ldi	r23, 0x00	; 0
   14e02:	8a e9       	ldi	r24, 0x9A	; 154
   14e04:	99 e1       	ldi	r25, 0x19	; 25
   14e06:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14e0a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14e0e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14e12:	03 89       	ldd	r16, Z+19	; 0x13
   14e14:	10 e0       	ldi	r17, 0x00	; 0
   14e16:	20 e0       	ldi	r18, 0x00	; 0
   14e18:	30 e0       	ldi	r19, 0x00	; 0
   14e1a:	41 e0       	ldi	r20, 0x01	; 1
   14e1c:	50 e0       	ldi	r21, 0x00	; 0
   14e1e:	67 e0       	ldi	r22, 0x07	; 7
   14e20:	70 e0       	ldi	r23, 0x00	; 0
   14e22:	8a e9       	ldi	r24, 0x9A	; 154
   14e24:	99 e1       	ldi	r25, 0x19	; 25
   14e26:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14e2a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14e2e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14e32:	04 89       	ldd	r16, Z+20	; 0x14
   14e34:	15 89       	ldd	r17, Z+21	; 0x15
   14e36:	20 e0       	ldi	r18, 0x00	; 0
   14e38:	30 e0       	ldi	r19, 0x00	; 0
   14e3a:	42 e0       	ldi	r20, 0x02	; 2
   14e3c:	50 e0       	ldi	r21, 0x00	; 0
   14e3e:	68 e0       	ldi	r22, 0x08	; 8
   14e40:	70 e0       	ldi	r23, 0x00	; 0
   14e42:	8a e9       	ldi	r24, 0x9A	; 154
   14e44:	99 e1       	ldi	r25, 0x19	; 25
   14e46:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14e4a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14e4e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14e52:	06 89       	ldd	r16, Z+22	; 0x16
   14e54:	17 89       	ldd	r17, Z+23	; 0x17
   14e56:	20 e0       	ldi	r18, 0x00	; 0
   14e58:	30 e0       	ldi	r19, 0x00	; 0
   14e5a:	42 e0       	ldi	r20, 0x02	; 2
   14e5c:	50 e0       	ldi	r21, 0x00	; 0
   14e5e:	6a e0       	ldi	r22, 0x0A	; 10
   14e60:	70 e0       	ldi	r23, 0x00	; 0
   14e62:	8a e9       	ldi	r24, 0x9A	; 154
   14e64:	99 e1       	ldi	r25, 0x19	; 25
   14e66:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14e6a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14e6e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14e72:	00 8d       	ldd	r16, Z+24	; 0x18
   14e74:	11 8d       	ldd	r17, Z+25	; 0x19
   14e76:	20 e0       	ldi	r18, 0x00	; 0
   14e78:	30 e0       	ldi	r19, 0x00	; 0
   14e7a:	42 e0       	ldi	r20, 0x02	; 2
   14e7c:	50 e0       	ldi	r21, 0x00	; 0
   14e7e:	6c e0       	ldi	r22, 0x0C	; 12
   14e80:	70 e0       	ldi	r23, 0x00	; 0
   14e82:	8a e9       	ldi	r24, 0x9A	; 154
   14e84:	99 e1       	ldi	r25, 0x19	; 25
   14e86:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14e8a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14e8e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14e92:	02 8d       	ldd	r16, Z+26	; 0x1a
   14e94:	13 8d       	ldd	r17, Z+27	; 0x1b
   14e96:	20 e0       	ldi	r18, 0x00	; 0
   14e98:	30 e0       	ldi	r19, 0x00	; 0
   14e9a:	42 e0       	ldi	r20, 0x02	; 2
   14e9c:	50 e0       	ldi	r21, 0x00	; 0
   14e9e:	6e e0       	ldi	r22, 0x0E	; 14
   14ea0:	70 e0       	ldi	r23, 0x00	; 0
   14ea2:	8a e9       	ldi	r24, 0x9A	; 154
   14ea4:	99 e1       	ldi	r25, 0x19	; 25
   14ea6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14eaa:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14eae:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14eb2:	04 8d       	ldd	r16, Z+28	; 0x1c
   14eb4:	10 e0       	ldi	r17, 0x00	; 0
   14eb6:	20 e0       	ldi	r18, 0x00	; 0
   14eb8:	30 e0       	ldi	r19, 0x00	; 0
   14eba:	41 e0       	ldi	r20, 0x01	; 1
   14ebc:	50 e0       	ldi	r21, 0x00	; 0
   14ebe:	60 e1       	ldi	r22, 0x10	; 16
   14ec0:	70 e0       	ldi	r23, 0x00	; 0
   14ec2:	8a e9       	ldi	r24, 0x9A	; 154
   14ec4:	99 e1       	ldi	r25, 0x19	; 25
   14ec6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14eca:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14ece:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14ed2:	05 8d       	ldd	r16, Z+29	; 0x1d
   14ed4:	10 e0       	ldi	r17, 0x00	; 0
   14ed6:	20 e0       	ldi	r18, 0x00	; 0
   14ed8:	30 e0       	ldi	r19, 0x00	; 0
   14eda:	41 e0       	ldi	r20, 0x01	; 1
   14edc:	50 e0       	ldi	r21, 0x00	; 0
   14ede:	61 e1       	ldi	r22, 0x11	; 17
   14ee0:	70 e0       	ldi	r23, 0x00	; 0
   14ee2:	8a e9       	ldi	r24, 0x9A	; 154
   14ee4:	99 e1       	ldi	r25, 0x19	; 25
   14ee6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14eea:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14eee:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14ef2:	06 8d       	ldd	r16, Z+30	; 0x1e
   14ef4:	10 e0       	ldi	r17, 0x00	; 0
   14ef6:	20 e0       	ldi	r18, 0x00	; 0
   14ef8:	30 e0       	ldi	r19, 0x00	; 0
   14efa:	41 e0       	ldi	r20, 0x01	; 1
   14efc:	50 e0       	ldi	r21, 0x00	; 0
   14efe:	62 e1       	ldi	r22, 0x12	; 18
   14f00:	70 e0       	ldi	r23, 0x00	; 0
   14f02:	8a e9       	ldi	r24, 0x9A	; 154
   14f04:	99 e1       	ldi	r25, 0x19	; 25
   14f06:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14f0a:	8a e9       	ldi	r24, 0x9A	; 154
   14f0c:	99 e1       	ldi	r25, 0x19	; 25
   14f0e:	1f 91       	pop	r17
   14f10:	0f 91       	pop	r16
   14f12:	08 95       	ret

00014f14 <SS80VolumePack>:
   14f14:	0f 93       	push	r16
   14f16:	1f 93       	push	r17
   14f18:	2d e0       	ldi	r18, 0x0D	; 13
   14f1a:	30 e0       	ldi	r19, 0x00	; 0
   14f1c:	fc 01       	movw	r30, r24
   14f1e:	31 83       	std	Z+1, r19	; 0x01
   14f20:	20 83       	st	Z, r18
   14f22:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14f26:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14f2a:	07 8d       	ldd	r16, Z+31	; 0x1f
   14f2c:	10 a1       	ldd	r17, Z+32	; 0x20
   14f2e:	21 a1       	ldd	r18, Z+33	; 0x21
   14f30:	32 a1       	ldd	r19, Z+34	; 0x22
   14f32:	43 e0       	ldi	r20, 0x03	; 3
   14f34:	50 e0       	ldi	r21, 0x00	; 0
   14f36:	60 e0       	ldi	r22, 0x00	; 0
   14f38:	70 e0       	ldi	r23, 0x00	; 0
   14f3a:	8d e8       	ldi	r24, 0x8D	; 141
   14f3c:	99 e1       	ldi	r25, 0x19	; 25
   14f3e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14f42:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14f46:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14f4a:	03 a1       	ldd	r16, Z+35	; 0x23
   14f4c:	10 e0       	ldi	r17, 0x00	; 0
   14f4e:	20 e0       	ldi	r18, 0x00	; 0
   14f50:	30 e0       	ldi	r19, 0x00	; 0
   14f52:	41 e0       	ldi	r20, 0x01	; 1
   14f54:	50 e0       	ldi	r21, 0x00	; 0
   14f56:	63 e0       	ldi	r22, 0x03	; 3
   14f58:	70 e0       	ldi	r23, 0x00	; 0
   14f5a:	8d e8       	ldi	r24, 0x8D	; 141
   14f5c:	99 e1       	ldi	r25, 0x19	; 25
   14f5e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14f62:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14f66:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14f6a:	04 a1       	ldd	r16, Z+36	; 0x24
   14f6c:	15 a1       	ldd	r17, Z+37	; 0x25
   14f6e:	20 e0       	ldi	r18, 0x00	; 0
   14f70:	30 e0       	ldi	r19, 0x00	; 0
   14f72:	42 e0       	ldi	r20, 0x02	; 2
   14f74:	50 e0       	ldi	r21, 0x00	; 0
   14f76:	64 e0       	ldi	r22, 0x04	; 4
   14f78:	70 e0       	ldi	r23, 0x00	; 0
   14f7a:	8d e8       	ldi	r24, 0x8D	; 141
   14f7c:	99 e1       	ldi	r25, 0x19	; 25
   14f7e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14f82:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14f86:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14f8a:	06 a1       	ldd	r16, Z+38	; 0x26
   14f8c:	17 a1       	ldd	r17, Z+39	; 0x27
   14f8e:	20 a5       	ldd	r18, Z+40	; 0x28
   14f90:	31 a5       	ldd	r19, Z+41	; 0x29
   14f92:	46 e0       	ldi	r20, 0x06	; 6
   14f94:	50 e0       	ldi	r21, 0x00	; 0
   14f96:	66 e0       	ldi	r22, 0x06	; 6
   14f98:	70 e0       	ldi	r23, 0x00	; 0
   14f9a:	8d e8       	ldi	r24, 0x8D	; 141
   14f9c:	99 e1       	ldi	r25, 0x19	; 25
   14f9e:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14fa2:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   14fa6:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   14faa:	02 a5       	ldd	r16, Z+42	; 0x2a
   14fac:	10 e0       	ldi	r17, 0x00	; 0
   14fae:	20 e0       	ldi	r18, 0x00	; 0
   14fb0:	30 e0       	ldi	r19, 0x00	; 0
   14fb2:	41 e0       	ldi	r20, 0x01	; 1
   14fb4:	50 e0       	ldi	r21, 0x00	; 0
   14fb6:	6c e0       	ldi	r22, 0x0C	; 12
   14fb8:	70 e0       	ldi	r23, 0x00	; 0
   14fba:	8d e8       	ldi	r24, 0x8D	; 141
   14fbc:	99 e1       	ldi	r25, 0x19	; 25
   14fbe:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   14fc2:	8d e8       	ldi	r24, 0x8D	; 141
   14fc4:	99 e1       	ldi	r25, 0x19	; 25
   14fc6:	1f 91       	pop	r17
   14fc8:	0f 91       	pop	r16
   14fca:	08 95       	ret

00014fcc <SS80_test_extended_status>:
   14fcc:	9b 01       	movw	r18, r22
   14fce:	43 e0       	ldi	r20, 0x03	; 3
   14fd0:	35 95       	asr	r19
   14fd2:	27 95       	ror	r18
   14fd4:	4a 95       	dec	r20
   14fd6:	e1 f7       	brne	.-8      	; 0x14fd0 <SS80_test_extended_status+0x4>
   14fd8:	82 0f       	add	r24, r18
   14fda:	93 1f       	adc	r25, r19
   14fdc:	67 70       	andi	r22, 0x07	; 7
   14fde:	77 27       	eor	r23, r23
   14fe0:	20 e8       	ldi	r18, 0x80	; 128
   14fe2:	30 e0       	ldi	r19, 0x00	; 0
   14fe4:	02 c0       	rjmp	.+4      	; 0x14fea <SS80_test_extended_status+0x1e>
   14fe6:	35 95       	asr	r19
   14fe8:	27 95       	ror	r18
   14fea:	6a 95       	dec	r22
   14fec:	e2 f7       	brpl	.-8      	; 0x14fe6 <SS80_test_extended_status+0x1a>
   14fee:	fc 01       	movw	r30, r24
   14ff0:	80 81       	ld	r24, Z
   14ff2:	28 23       	and	r18, r24
   14ff4:	81 e0       	ldi	r24, 0x01	; 1
   14ff6:	90 e0       	ldi	r25, 0x00	; 0
   14ff8:	11 f4       	brne	.+4      	; 0x14ffe <SS80_test_extended_status+0x32>
   14ffa:	80 e0       	ldi	r24, 0x00	; 0
   14ffc:	90 e0       	ldi	r25, 0x00	; 0
   14ffe:	08 95       	ret

00015000 <SS80_display_extended_status>:
   15000:	6f 92       	push	r6
   15002:	7f 92       	push	r7
   15004:	8f 92       	push	r8
   15006:	ef 92       	push	r14
   15008:	ff 92       	push	r15
   1500a:	0f 93       	push	r16
   1500c:	1f 93       	push	r17
   1500e:	cf 93       	push	r28
   15010:	df 93       	push	r29
   15012:	fc 01       	movw	r30, r24
   15014:	ac 01       	movw	r20, r24
   15016:	48 5f       	subi	r20, 0xF8	; 248
   15018:	5f 4f       	sbci	r21, 0xFF	; 255
   1501a:	20 e0       	ldi	r18, 0x00	; 0
   1501c:	30 e0       	ldi	r19, 0x00	; 0
   1501e:	a1 91       	ld	r26, Z+
   15020:	aa 23       	and	r26, r26
   15022:	11 f0       	breq	.+4      	; 0x15028 <SS80_display_extended_status+0x28>
   15024:	21 e0       	ldi	r18, 0x01	; 1
   15026:	30 e0       	ldi	r19, 0x00	; 0
   15028:	e4 17       	cp	r30, r20
   1502a:	f5 07       	cpc	r31, r21
   1502c:	c1 f7       	brne	.-16     	; 0x1501e <SS80_display_extended_status+0x1e>
   1502e:	23 2b       	or	r18, r19
   15030:	a1 f1       	breq	.+104    	; 0x1509a <SS80_display_extended_status+0x9a>
   15032:	8c 01       	movw	r16, r24
   15034:	7f 93       	push	r23
   15036:	6f 93       	push	r22
   15038:	8d e5       	ldi	r24, 0x5D	; 93
   1503a:	97 e2       	ldi	r25, 0x27	; 39
   1503c:	1f 92       	push	r1
   1503e:	9f 93       	push	r25
   15040:	8f 93       	push	r24
   15042:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15046:	cb ec       	ldi	r28, 0xCB	; 203
   15048:	d1 e0       	ldi	r29, 0x01	; 1
   1504a:	0f 90       	pop	r0
   1504c:	0f 90       	pop	r0
   1504e:	0f 90       	pop	r0
   15050:	0f 90       	pop	r0
   15052:	0f 90       	pop	r0
   15054:	82 e5       	ldi	r24, 0x52	; 82
   15056:	97 e2       	ldi	r25, 0x27	; 39
   15058:	3c 01       	movw	r6, r24
   1505a:	e8 80       	ld	r14, Y
   1505c:	f9 80       	ldd	r15, Y+1	; 0x01
   1505e:	9f ef       	ldi	r25, 0xFF	; 255
   15060:	e9 16       	cp	r14, r25
   15062:	f9 06       	cpc	r15, r25
   15064:	d1 f0       	breq	.+52     	; 0x1509a <SS80_display_extended_status+0x9a>
   15066:	b7 01       	movw	r22, r14
   15068:	c8 01       	movw	r24, r16
   1506a:	b0 df       	rcall	.-160    	; 0x14fcc <SS80_test_extended_status>
   1506c:	89 2b       	or	r24, r25
   1506e:	99 f0       	breq	.+38     	; 0x15096 <SS80_display_extended_status+0x96>
   15070:	8b 81       	ldd	r24, Y+3	; 0x03
   15072:	8f 93       	push	r24
   15074:	8a 81       	ldd	r24, Y+2	; 0x02
   15076:	8f 93       	push	r24
   15078:	ff 92       	push	r15
   1507a:	ef 92       	push	r14
   1507c:	1f 92       	push	r1
   1507e:	7f 92       	push	r7
   15080:	6f 92       	push	r6
   15082:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15086:	8d b7       	in	r24, 0x3d	; 61
   15088:	9e b7       	in	r25, 0x3e	; 62
   1508a:	07 96       	adiw	r24, 0x07	; 7
   1508c:	0f b6       	in	r0, 0x3f	; 63
   1508e:	f8 94       	cli
   15090:	9e bf       	out	0x3e, r25	; 62
   15092:	0f be       	out	0x3f, r0	; 63
   15094:	8d bf       	out	0x3d, r24	; 61
   15096:	24 96       	adiw	r28, 0x04	; 4
   15098:	e0 cf       	rjmp	.-64     	; 0x1505a <SS80_display_extended_status+0x5a>
   1509a:	df 91       	pop	r29
   1509c:	cf 91       	pop	r28
   1509e:	1f 91       	pop	r17
   150a0:	0f 91       	pop	r16
   150a2:	ff 90       	pop	r15
   150a4:	ef 90       	pop	r14
   150a6:	8f 90       	pop	r8
   150a8:	7f 90       	pop	r7
   150aa:	6f 90       	pop	r6
   150ac:	08 95       	ret

000150ae <SS80_send_status>:
   150ae:	a6 e1       	ldi	r26, 0x16	; 22
   150b0:	b0 e0       	ldi	r27, 0x00	; 0
   150b2:	ed e5       	ldi	r30, 0x5D	; 93
   150b4:	f8 ea       	ldi	r31, 0xA8	; 168
   150b6:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
   150ba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   150be:	85 ff       	sbrs	r24, 5
   150c0:	0a c0       	rjmp	.+20     	; 0x150d6 <SS80_send_status+0x28>
   150c2:	8e e3       	ldi	r24, 0x3E	; 62
   150c4:	97 e2       	ldi	r25, 0x27	; 39
   150c6:	1f 92       	push	r1
   150c8:	9f 93       	push	r25
   150ca:	8f 93       	push	r24
   150cc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   150d0:	0f 90       	pop	r0
   150d2:	0f 90       	pop	r0
   150d4:	0f 90       	pop	r0
   150d6:	ce 01       	movw	r24, r28
   150d8:	01 96       	adiw	r24, 0x01	; 1
   150da:	7c 01       	movw	r14, r24
   150dc:	84 e1       	ldi	r24, 0x14	; 20
   150de:	f7 01       	movw	r30, r14
   150e0:	11 92       	st	Z+, r1
   150e2:	8a 95       	dec	r24
   150e4:	e9 f7       	brne	.-6      	; 0x150e0 <SS80_send_status+0x32>
   150e6:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   150ea:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   150ee:	86 81       	ldd	r24, Z+6	; 0x06
   150f0:	20 e1       	ldi	r18, 0x10	; 16
   150f2:	82 9f       	mul	r24, r18
   150f4:	c0 01       	movw	r24, r0
   150f6:	11 24       	eor	r1, r1
   150f8:	95 81       	ldd	r25, Z+5	; 0x05
   150fa:	9f 70       	andi	r25, 0x0F	; 15
   150fc:	89 2b       	or	r24, r25
   150fe:	89 83       	std	Y+1, r24	; 0x01
   15100:	8f ef       	ldi	r24, 0xFF	; 255
   15102:	8a 83       	std	Y+2, r24	; 0x02
   15104:	83 81       	ldd	r24, Z+3	; 0x03
   15106:	86 ff       	sbrs	r24, 6
   15108:	02 c0       	rjmp	.+4      	; 0x1510e <SS80_send_status+0x60>
   1510a:	92 e0       	ldi	r25, 0x02	; 2
   1510c:	9b 83       	std	Y+3, r25	; 0x03
   1510e:	82 ff       	sbrs	r24, 2
   15110:	03 c0       	rjmp	.+6      	; 0x15118 <SS80_send_status+0x6a>
   15112:	9b 81       	ldd	r25, Y+3	; 0x03
   15114:	91 60       	ori	r25, 0x01	; 1
   15116:	9b 83       	std	Y+3, r25	; 0x03
   15118:	80 ff       	sbrs	r24, 0
   1511a:	02 c0       	rjmp	.+4      	; 0x15120 <SS80_send_status+0x72>
   1511c:	82 e0       	ldi	r24, 0x02	; 2
   1511e:	8d 83       	std	Y+5, r24	; 0x05
   15120:	83 81       	ldd	r24, Z+3	; 0x03
   15122:	81 ff       	sbrs	r24, 1
   15124:	03 c0       	rjmp	.+6      	; 0x1512c <SS80_send_status+0x7e>
   15126:	8d 81       	ldd	r24, Y+5	; 0x05
   15128:	82 60       	ori	r24, 0x02	; 2
   1512a:	8d 83       	std	Y+5, r24	; 0x05
   1512c:	83 81       	ldd	r24, Z+3	; 0x03
   1512e:	83 ff       	sbrs	r24, 3
   15130:	02 c0       	rjmp	.+4      	; 0x15136 <SS80_send_status+0x88>
   15132:	88 e0       	ldi	r24, 0x08	; 8
   15134:	8f 83       	std	Y+7, r24	; 0x07
   15136:	83 81       	ldd	r24, Z+3	; 0x03
   15138:	94 81       	ldd	r25, Z+4	; 0x04
   1513a:	89 2b       	or	r24, r25
   1513c:	59 f4       	brne	.+22     	; 0x15154 <SS80_send_status+0xa6>
   1513e:	07 81       	ldd	r16, Z+7	; 0x07
   15140:	10 85       	ldd	r17, Z+8	; 0x08
   15142:	21 85       	ldd	r18, Z+9	; 0x09
   15144:	32 85       	ldd	r19, Z+10	; 0x0a
   15146:	46 e0       	ldi	r20, 0x06	; 6
   15148:	50 e0       	ldi	r21, 0x00	; 0
   1514a:	6a e0       	ldi	r22, 0x0A	; 10
   1514c:	70 e0       	ldi	r23, 0x00	; 0
   1514e:	c7 01       	movw	r24, r14
   15150:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   15154:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15158:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1515c:	83 81       	ldd	r24, Z+3	; 0x03
   1515e:	94 81       	ldd	r25, Z+4	; 0x04
   15160:	89 2b       	or	r24, r25
   15162:	11 f0       	breq	.+4      	; 0x15168 <SS80_send_status+0xba>
   15164:	81 e0       	ldi	r24, 0x01	; 1
   15166:	82 83       	std	Z+2, r24	; 0x02
   15168:	80 e0       	ldi	r24, 0x00	; 0
   1516a:	91 e0       	ldi	r25, 0x01	; 1
   1516c:	9e 8b       	std	Y+22, r25	; 0x16
   1516e:	8d 8b       	std	Y+21, r24	; 0x15
   15170:	ae 01       	movw	r20, r28
   15172:	4b 5e       	subi	r20, 0xEB	; 235
   15174:	5f 4f       	sbci	r21, 0xFF	; 255
   15176:	64 e1       	ldi	r22, 0x14	; 20
   15178:	70 e0       	ldi	r23, 0x00	; 0
   1517a:	c7 01       	movw	r24, r14
   1517c:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   15180:	44 97       	sbiw	r24, 0x14	; 20
   15182:	71 f0       	breq	.+28     	; 0x151a0 <SS80_send_status+0xf2>
   15184:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15188:	80 ff       	sbrs	r24, 0
   1518a:	0a c0       	rjmp	.+20     	; 0x151a0 <SS80_send_status+0xf2>
   1518c:	83 e2       	ldi	r24, 0x23	; 35
   1518e:	97 e2       	ldi	r25, 0x27	; 39
   15190:	1f 92       	push	r1
   15192:	9f 93       	push	r25
   15194:	8f 93       	push	r24
   15196:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1519a:	0f 90       	pop	r0
   1519c:	0f 90       	pop	r0
   1519e:	0f 90       	pop	r0
   151a0:	8d 89       	ldd	r24, Y+21	; 0x15
   151a2:	9e 89       	ldd	r25, Y+22	; 0x16
   151a4:	88 27       	eor	r24, r24
   151a6:	90 7d       	andi	r25, 0xD0	; 208
   151a8:	66 96       	adiw	r28, 0x16	; 22
   151aa:	e6 e0       	ldi	r30, 0x06	; 6
   151ac:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

000151b0 <SS80_describe>:
   151b0:	a4 e0       	ldi	r26, 0x04	; 4
   151b2:	b0 e0       	ldi	r27, 0x00	; 0
   151b4:	ee ed       	ldi	r30, 0xDE	; 222
   151b6:	f8 ea       	ldi	r31, 0xA8	; 168
   151b8:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   151bc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   151c0:	85 ff       	sbrs	r24, 5
   151c2:	0a c0       	rjmp	.+20     	; 0x151d8 <SS80_describe+0x28>
   151c4:	82 e1       	ldi	r24, 0x12	; 18
   151c6:	97 e2       	ldi	r25, 0x27	; 39
   151c8:	1f 92       	push	r1
   151ca:	9f 93       	push	r25
   151cc:	8f 93       	push	r24
   151ce:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   151d2:	0f 90       	pop	r0
   151d4:	0f 90       	pop	r0
   151d6:	0f 90       	pop	r0
   151d8:	1c 82       	std	Y+4, r1	; 0x04
   151da:	1b 82       	std	Y+3, r1	; 0x03
   151dc:	ce 01       	movw	r24, r28
   151de:	01 96       	adiw	r24, 0x01	; 1
   151e0:	91 dd       	rcall	.-1246   	; 0x14d04 <SS80ControllerPack>
   151e2:	69 81       	ldd	r22, Y+1	; 0x01
   151e4:	7a 81       	ldd	r23, Y+2	; 0x02
   151e6:	ae 01       	movw	r20, r28
   151e8:	4d 5f       	subi	r20, 0xFD	; 253
   151ea:	5f 4f       	sbci	r21, 0xFF	; 255
   151ec:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   151f0:	29 81       	ldd	r18, Y+1	; 0x01
   151f2:	3a 81       	ldd	r19, Y+2	; 0x02
   151f4:	82 17       	cp	r24, r18
   151f6:	93 07       	cpc	r25, r19
   151f8:	39 f0       	breq	.+14     	; 0x15208 <SS80_describe+0x58>
   151fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   151fe:	80 ff       	sbrs	r24, 0
   15200:	3c c0       	rjmp	.+120    	; 0x1527a <SS80_describe+0xca>
   15202:	8f ee       	ldi	r24, 0xEF	; 239
   15204:	96 e2       	ldi	r25, 0x26	; 38
   15206:	31 c0       	rjmp	.+98     	; 0x1526a <SS80_describe+0xba>
   15208:	1c 82       	std	Y+4, r1	; 0x04
   1520a:	1b 82       	std	Y+3, r1	; 0x03
   1520c:	ce 01       	movw	r24, r28
   1520e:	01 96       	adiw	r24, 0x01	; 1
   15210:	b5 dd       	rcall	.-1174   	; 0x14d7c <SS80UnitPack>
   15212:	69 81       	ldd	r22, Y+1	; 0x01
   15214:	7a 81       	ldd	r23, Y+2	; 0x02
   15216:	ae 01       	movw	r20, r28
   15218:	4d 5f       	subi	r20, 0xFD	; 253
   1521a:	5f 4f       	sbci	r21, 0xFF	; 255
   1521c:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   15220:	29 81       	ldd	r18, Y+1	; 0x01
   15222:	3a 81       	ldd	r19, Y+2	; 0x02
   15224:	82 17       	cp	r24, r18
   15226:	93 07       	cpc	r25, r19
   15228:	39 f0       	breq	.+14     	; 0x15238 <SS80_describe+0x88>
   1522a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1522e:	80 ff       	sbrs	r24, 0
   15230:	24 c0       	rjmp	.+72     	; 0x1527a <SS80_describe+0xca>
   15232:	82 ed       	ldi	r24, 0xD2	; 210
   15234:	96 e2       	ldi	r25, 0x26	; 38
   15236:	19 c0       	rjmp	.+50     	; 0x1526a <SS80_describe+0xba>
   15238:	80 e0       	ldi	r24, 0x00	; 0
   1523a:	91 e0       	ldi	r25, 0x01	; 1
   1523c:	9c 83       	std	Y+4, r25	; 0x04
   1523e:	8b 83       	std	Y+3, r24	; 0x03
   15240:	ce 01       	movw	r24, r28
   15242:	01 96       	adiw	r24, 0x01	; 1
   15244:	67 de       	rcall	.-818    	; 0x14f14 <SS80VolumePack>
   15246:	69 81       	ldd	r22, Y+1	; 0x01
   15248:	7a 81       	ldd	r23, Y+2	; 0x02
   1524a:	ae 01       	movw	r20, r28
   1524c:	4d 5f       	subi	r20, 0xFD	; 253
   1524e:	5f 4f       	sbci	r21, 0xFF	; 255
   15250:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   15254:	29 81       	ldd	r18, Y+1	; 0x01
   15256:	3a 81       	ldd	r19, Y+2	; 0x02
   15258:	82 17       	cp	r24, r18
   1525a:	93 07       	cpc	r25, r19
   1525c:	99 f0       	breq	.+38     	; 0x15284 <SS80_describe+0xd4>
   1525e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15262:	80 ff       	sbrs	r24, 0
   15264:	0a c0       	rjmp	.+20     	; 0x1527a <SS80_describe+0xca>
   15266:	83 eb       	ldi	r24, 0xB3	; 179
   15268:	96 e2       	ldi	r25, 0x26	; 38
   1526a:	1f 92       	push	r1
   1526c:	9f 93       	push	r25
   1526e:	8f 93       	push	r24
   15270:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15274:	0f 90       	pop	r0
   15276:	0f 90       	pop	r0
   15278:	0f 90       	pop	r0
   1527a:	8b 81       	ldd	r24, Y+3	; 0x03
   1527c:	9c 81       	ldd	r25, Y+4	; 0x04
   1527e:	88 27       	eor	r24, r24
   15280:	90 7d       	andi	r25, 0xD0	; 208
   15282:	02 c0       	rjmp	.+4      	; 0x15288 <SS80_describe+0xd8>
   15284:	80 e0       	ldi	r24, 0x00	; 0
   15286:	90 e0       	ldi	r25, 0x00	; 0
   15288:	24 96       	adiw	r28, 0x04	; 4
   1528a:	e2 e0       	ldi	r30, 0x02	; 2
   1528c:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00015290 <SS80_Check_Unit>:
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   15290:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15294:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15298:	88 23       	and	r24, r24
   1529a:	d1 f0       	breq	.+52     	; 0x152d0 <SS80_Check_Unit+0x40>
   1529c:	8f 30       	cpi	r24, 0x0F	; 15
   1529e:	c1 f0       	breq	.+48     	; 0x152d0 <SS80_Check_Unit+0x40>
   152a0:	23 81       	ldd	r18, Z+3	; 0x03
   152a2:	34 81       	ldd	r19, Z+4	; 0x04
   152a4:	20 64       	ori	r18, 0x40	; 64
   152a6:	34 83       	std	Z+4, r19	; 0x04
   152a8:	23 83       	std	Z+3, r18	; 0x03
   152aa:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   152ae:	90 ff       	sbrs	r25, 0
   152b0:	10 c0       	rjmp	.+32     	; 0x152d2 <SS80_Check_Unit+0x42>
   152b2:	1f 92       	push	r1
   152b4:	8f 93       	push	r24
   152b6:	8b e9       	ldi	r24, 0x9B	; 155
   152b8:	96 e2       	ldi	r25, 0x26	; 38
   152ba:	1f 92       	push	r1
   152bc:	9f 93       	push	r25
   152be:	8f 93       	push	r24
   152c0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   152c4:	0f 90       	pop	r0
   152c6:	0f 90       	pop	r0
   152c8:	0f 90       	pop	r0
   152ca:	0f 90       	pop	r0
   152cc:	0f 90       	pop	r0
   152ce:	08 95       	ret
   152d0:	85 83       	std	Z+5, r24	; 0x05
   152d2:	08 95       	ret

000152d4 <SS80_Check_Volume>:
   152d4:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   152d8:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   152dc:	88 23       	and	r24, r24
   152de:	c1 f0       	breq	.+48     	; 0x15310 <SS80_Check_Volume+0x3c>
   152e0:	23 81       	ldd	r18, Z+3	; 0x03
   152e2:	34 81       	ldd	r19, Z+4	; 0x04
   152e4:	20 64       	ori	r18, 0x40	; 64
   152e6:	34 83       	std	Z+4, r19	; 0x04
   152e8:	23 83       	std	Z+3, r18	; 0x03
   152ea:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   152ee:	90 ff       	sbrs	r25, 0
   152f0:	10 c0       	rjmp	.+32     	; 0x15312 <SS80_Check_Volume+0x3e>
   152f2:	1f 92       	push	r1
   152f4:	8f 93       	push	r24
   152f6:	81 e8       	ldi	r24, 0x81	; 129
   152f8:	96 e2       	ldi	r25, 0x26	; 38
   152fa:	1f 92       	push	r1
   152fc:	9f 93       	push	r25
   152fe:	8f 93       	push	r24
   15300:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15304:	0f 90       	pop	r0
   15306:	0f 90       	pop	r0
   15308:	0f 90       	pop	r0
   1530a:	0f 90       	pop	r0
   1530c:	0f 90       	pop	r0
   1530e:	08 95       	ret
   15310:	16 82       	std	Z+6, r1	; 0x06
   15312:	08 95       	ret

00015314 <SS80_Command_State>:
   15314:	2f 92       	push	r2
   15316:	3f 92       	push	r3
   15318:	4f 92       	push	r4
   1531a:	6f 92       	push	r6
   1531c:	7f 92       	push	r7
   1531e:	8f 92       	push	r8
   15320:	af 92       	push	r10
   15322:	bf 92       	push	r11
   15324:	cf 92       	push	r12
   15326:	df 92       	push	r13
   15328:	ef 92       	push	r14
   1532a:	ff 92       	push	r15
   1532c:	0f 93       	push	r16
   1532e:	1f 93       	push	r17
   15330:	cf 93       	push	r28
   15332:	df 93       	push	r29
   15334:	cd b7       	in	r28, 0x3d	; 61
   15336:	de b7       	in	r29, 0x3e	; 62
   15338:	60 97       	sbiw	r28, 0x10	; 16
   1533a:	0f b6       	in	r0, 0x3f	; 63
   1533c:	f8 94       	cli
   1533e:	de bf       	out	0x3e, r29	; 62
   15340:	0f be       	out	0x3f, r0	; 63
   15342:	cd bf       	out	0x3d, r28	; 61
   15344:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15348:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   1534c:	81 81       	ldd	r24, Z+1	; 0x01
   1534e:	90 e0       	ldi	r25, 0x00	; 0
   15350:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   15354:	80 e0       	ldi	r24, 0x00	; 0
   15356:	91 e0       	ldi	r25, 0x01	; 1
   15358:	9a 83       	std	Y+2, r25	; 0x02
   1535a:	89 83       	std	Y+1, r24	; 0x01
   1535c:	ae 01       	movw	r20, r28
   1535e:	4f 5f       	subi	r20, 0xFF	; 255
   15360:	5f 4f       	sbci	r21, 0xFF	; 255
   15362:	60 e0       	ldi	r22, 0x00	; 0
   15364:	72 e0       	ldi	r23, 0x02	; 2
   15366:	88 ef       	ldi	r24, 0xF8	; 248
   15368:	9c e1       	ldi	r25, 0x1C	; 28
   1536a:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
   1536e:	6c 01       	movw	r12, r24
   15370:	89 81       	ldd	r24, Y+1	; 0x01
   15372:	9a 81       	ldd	r25, Y+2	; 0x02
   15374:	9c 01       	movw	r18, r24
   15376:	22 27       	eor	r18, r18
   15378:	30 7d       	andi	r19, 0xD0	; 208
   1537a:	23 2b       	or	r18, r19
   1537c:	79 f0       	breq	.+30     	; 0x1539c <SS80_Command_State+0x88>
   1537e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15382:	80 ff       	sbrs	r24, 0
   15384:	21 c2       	rjmp	.+1090   	; 0x157c8 <SS80_Command_State+0x4b4>
   15386:	8b e5       	ldi	r24, 0x5B	; 91
   15388:	96 e2       	ldi	r25, 0x26	; 38
   1538a:	1f 92       	push	r1
   1538c:	9f 93       	push	r25
   1538e:	8f 93       	push	r24
   15390:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15394:	0f 90       	pop	r0
   15396:	0f 90       	pop	r0
   15398:	0f 90       	pop	r0
   1539a:	16 c2       	rjmp	.+1068   	; 0x157c8 <SS80_Command_State+0x4b4>
   1539c:	c1 14       	cp	r12, r1
   1539e:	d1 04       	cpc	r13, r1
   153a0:	09 f4       	brne	.+2      	; 0x153a4 <SS80_Command_State+0x90>
   153a2:	17 c2       	rjmp	.+1070   	; 0x157d2 <SS80_Command_State+0x4be>
   153a4:	90 fd       	sbrc	r25, 0
   153a6:	0e c0       	rjmp	.+28     	; 0x153c4 <SS80_Command_State+0xb0>
   153a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   153ac:	80 ff       	sbrs	r24, 0
   153ae:	0a c0       	rjmp	.+20     	; 0x153c4 <SS80_Command_State+0xb0>
   153b0:	82 e4       	ldi	r24, 0x42	; 66
   153b2:	96 e2       	ldi	r25, 0x26	; 38
   153b4:	1f 92       	push	r1
   153b6:	9f 93       	push	r25
   153b8:	8f 93       	push	r24
   153ba:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   153be:	0f 90       	pop	r0
   153c0:	0f 90       	pop	r0
   153c2:	0f 90       	pop	r0
   153c4:	e1 2c       	mov	r14, r1
   153c6:	f1 2c       	mov	r15, r1
   153c8:	86 e4       	ldi	r24, 0x46	; 70
   153ca:	95 e2       	ldi	r25, 0x25	; 37
   153cc:	9c 01       	movw	r18, r24
   153ce:	40 e0       	ldi	r20, 0x00	; 0
   153d0:	2d 83       	std	Y+5, r18	; 0x05
   153d2:	3e 83       	std	Y+6, r19	; 0x06
   153d4:	4f 83       	std	Y+7, r20	; 0x07
   153d6:	8b e6       	ldi	r24, 0x6B	; 107
   153d8:	95 e2       	ldi	r25, 0x25	; 37
   153da:	9c 01       	movw	r18, r24
   153dc:	40 e0       	ldi	r20, 0x00	; 0
   153de:	28 87       	std	Y+8, r18	; 0x08
   153e0:	39 87       	std	Y+9, r19	; 0x09
   153e2:	4a 87       	std	Y+10, r20	; 0x0a
   153e4:	85 e8       	ldi	r24, 0x85	; 133
   153e6:	95 e2       	ldi	r25, 0x25	; 37
   153e8:	9c 01       	movw	r18, r24
   153ea:	40 e0       	ldi	r20, 0x00	; 0
   153ec:	2b 87       	std	Y+11, r18	; 0x0b
   153ee:	3c 87       	std	Y+12, r19	; 0x0c
   153f0:	4d 87       	std	Y+13, r20	; 0x0d
   153f2:	8b e9       	ldi	r24, 0x9B	; 155
   153f4:	95 e2       	ldi	r25, 0x25	; 37
   153f6:	3c 01       	movw	r6, r24
   153f8:	89 ea       	ldi	r24, 0xA9	; 169
   153fa:	95 e2       	ldi	r25, 0x25	; 37
   153fc:	9c 01       	movw	r18, r24
   153fe:	40 e0       	ldi	r20, 0x00	; 0
   15400:	2e 87       	std	Y+14, r18	; 0x0e
   15402:	3f 87       	std	Y+15, r19	; 0x0f
   15404:	48 8b       	std	Y+16, r20	; 0x10
   15406:	85 ec       	ldi	r24, 0xC5	; 197
   15408:	95 e2       	ldi	r25, 0x25	; 37
   1540a:	1c 01       	movw	r2, r24
   1540c:	83 e1       	ldi	r24, 0x13	; 19
   1540e:	a8 2e       	mov	r10, r24
   15410:	86 e2       	ldi	r24, 0x26	; 38
   15412:	b8 2e       	mov	r11, r24
   15414:	87 01       	movw	r16, r14
   15416:	ec 14       	cp	r14, r12
   15418:	fd 04       	cpc	r15, r13
   1541a:	0c f0       	brlt	.+2      	; 0x1541e <SS80_Command_State+0x10a>
   1541c:	b6 c1       	rjmp	.+876    	; 0x1578a <SS80_Command_State+0x476>
   1541e:	0f 5f       	subi	r16, 0xFF	; 255
   15420:	1f 4f       	sbci	r17, 0xFF	; 255
   15422:	f7 01       	movw	r30, r14
   15424:	e8 50       	subi	r30, 0x08	; 8
   15426:	f3 4e       	sbci	r31, 0xE3	; 227
   15428:	80 81       	ld	r24, Z
   1542a:	28 2f       	mov	r18, r24
   1542c:	30 e0       	ldi	r19, 0x00	; 0
   1542e:	a9 01       	movw	r20, r18
   15430:	40 52       	subi	r20, 0x20	; 32
   15432:	51 09       	sbc	r21, r1
   15434:	40 31       	cpi	r20, 0x10	; 16
   15436:	51 05       	cpc	r21, r1
   15438:	80 f4       	brcc	.+32     	; 0x1545a <SS80_Command_State+0x146>
   1543a:	80 52       	subi	r24, 0x20	; 32
   1543c:	29 df       	rcall	.-430    	; 0x15290 <SS80_Check_Unit>
   1543e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15442:	85 ff       	sbrs	r24, 5
   15444:	a0 c1       	rjmp	.+832    	; 0x15786 <SS80_Command_State+0x472>
   15446:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1544a:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1544e:	85 81       	ldd	r24, Z+5	; 0x05
   15450:	1f 92       	push	r1
   15452:	8f 93       	push	r24
   15454:	8c e2       	ldi	r24, 0x2C	; 44
   15456:	96 e2       	ldi	r25, 0x26	; 38
   15458:	14 c0       	rjmp	.+40     	; 0x15482 <SS80_Command_State+0x16e>
   1545a:	a9 01       	movw	r20, r18
   1545c:	40 54       	subi	r20, 0x40	; 64
   1545e:	51 09       	sbc	r21, r1
   15460:	40 31       	cpi	r20, 0x10	; 16
   15462:	51 05       	cpc	r21, r1
   15464:	c8 f4       	brcc	.+50     	; 0x15498 <SS80_Command_State+0x184>
   15466:	80 54       	subi	r24, 0x40	; 64
   15468:	35 df       	rcall	.-406    	; 0x152d4 <SS80_Check_Volume>
   1546a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1546e:	85 ff       	sbrs	r24, 5
   15470:	8a c1       	rjmp	.+788    	; 0x15786 <SS80_Command_State+0x472>
   15472:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15476:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1547a:	86 81       	ldd	r24, Z+6	; 0x06
   1547c:	1f 92       	push	r1
   1547e:	8f 93       	push	r24
   15480:	c5 01       	movw	r24, r10
   15482:	1f 92       	push	r1
   15484:	9f 93       	push	r25
   15486:	8f 93       	push	r24
   15488:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1548c:	0f 90       	pop	r0
   1548e:	0f 90       	pop	r0
   15490:	0f 90       	pop	r0
   15492:	0f 90       	pop	r0
   15494:	0f 90       	pop	r0
   15496:	77 c1       	rjmp	.+750    	; 0x15786 <SS80_Command_State+0x472>
   15498:	21 15       	cp	r18, r1
   1549a:	31 05       	cpc	r19, r1
   1549c:	79 f4       	brne	.+30     	; 0x154bc <SS80_Command_State+0x1a8>
   1549e:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   154a2:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   154a6:	81 e0       	ldi	r24, 0x01	; 1
   154a8:	90 e0       	ldi	r25, 0x00	; 0
   154aa:	91 83       	std	Z+1, r25	; 0x01
   154ac:	80 83       	st	Z, r24
   154ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   154b2:	85 ff       	sbrs	r24, 5
   154b4:	6a c1       	rjmp	.+724    	; 0x1578a <SS80_Command_State+0x476>
   154b6:	8b ef       	ldi	r24, 0xFB	; 251
   154b8:	95 e2       	ldi	r25, 0x25	; 37
   154ba:	0f c0       	rjmp	.+30     	; 0x154da <SS80_Command_State+0x1c6>
   154bc:	22 30       	cpi	r18, 0x02	; 2
   154be:	31 05       	cpc	r19, r1
   154c0:	a9 f4       	brne	.+42     	; 0x154ec <SS80_Command_State+0x1d8>
   154c2:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   154c6:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   154ca:	31 83       	std	Z+1, r19	; 0x01
   154cc:	20 83       	st	Z, r18
   154ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   154d2:	85 ff       	sbrs	r24, 5
   154d4:	5a c1       	rjmp	.+692    	; 0x1578a <SS80_Command_State+0x476>
   154d6:	82 ee       	ldi	r24, 0xE2	; 226
   154d8:	95 e2       	ldi	r25, 0x25	; 37
   154da:	1f 92       	push	r1
   154dc:	9f 93       	push	r25
   154de:	8f 93       	push	r24
   154e0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   154e4:	0f 90       	pop	r0
   154e6:	0f 90       	pop	r0
   154e8:	0f 90       	pop	r0
   154ea:	4f c1       	rjmp	.+670    	; 0x1578a <SS80_Command_State+0x476>
   154ec:	20 31       	cpi	r18, 0x10	; 16
   154ee:	31 05       	cpc	r19, r1
   154f0:	a1 f5       	brne	.+104    	; 0x1555a <SS80_Command_State+0x246>
   154f2:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <SS80s>
   154f6:	90 91 7c 19 	lds	r25, 0x197C	; 0x80197c <SS80s+0x1>
   154fa:	9c 83       	std	Y+4, r25	; 0x04
   154fc:	8b 83       	std	Y+3, r24	; 0x03
   154fe:	46 e0       	ldi	r20, 0x06	; 6
   15500:	50 e0       	ldi	r21, 0x00	; 0
   15502:	b8 01       	movw	r22, r16
   15504:	88 ef       	ldi	r24, 0xF8	; 248
   15506:	9c e1       	ldi	r25, 0x1C	; 28
   15508:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   1550c:	eb 81       	ldd	r30, Y+3	; 0x03
   1550e:	fc 81       	ldd	r31, Y+4	; 0x04
   15510:	67 83       	std	Z+7, r22	; 0x07
   15512:	70 87       	std	Z+8, r23	; 0x08
   15514:	81 87       	std	Z+9, r24	; 0x09
   15516:	92 87       	std	Z+10, r25	; 0x0a
   15518:	87 01       	movw	r16, r14
   1551a:	09 5f       	subi	r16, 0xF9	; 249
   1551c:	1f 4f       	sbci	r17, 0xFF	; 255
   1551e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15522:	85 ff       	sbrs	r24, 5
   15524:	30 c1       	rjmp	.+608    	; 0x15786 <SS80_Command_State+0x472>
   15526:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1552a:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1552e:	a0 91 7d 19 	lds	r26, 0x197D	; 0x80197d <SS80p>
   15532:	b0 91 7e 19 	lds	r27, 0x197E	; 0x80197e <SS80p+0x1>
   15536:	50 96       	adiw	r26, 0x10	; 16
   15538:	0d 90       	ld	r0, X+
   1553a:	bc 91       	ld	r27, X
   1553c:	a0 2d       	mov	r26, r0
   1553e:	27 81       	ldd	r18, Z+7	; 0x07
   15540:	30 85       	ldd	r19, Z+8	; 0x08
   15542:	41 85       	ldd	r20, Z+9	; 0x09
   15544:	52 85       	ldd	r21, Z+10	; 0x0a
   15546:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
   1554a:	9f 93       	push	r25
   1554c:	8f 93       	push	r24
   1554e:	7f 93       	push	r23
   15550:	6f 93       	push	r22
   15552:	1f 92       	push	r1
   15554:	3f 92       	push	r3
   15556:	2f 92       	push	r2
   15558:	2e c0       	rjmp	.+92     	; 0x155b6 <SS80_Command_State+0x2a2>
   1555a:	28 31       	cpi	r18, 0x18	; 24
   1555c:	31 05       	cpc	r19, r1
   1555e:	99 f5       	brne	.+102    	; 0x155c6 <SS80_Command_State+0x2b2>
   15560:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <SS80s>
   15564:	90 91 7c 19 	lds	r25, 0x197C	; 0x80197c <SS80s+0x1>
   15568:	9c 83       	std	Y+4, r25	; 0x04
   1556a:	8b 83       	std	Y+3, r24	; 0x03
   1556c:	44 e0       	ldi	r20, 0x04	; 4
   1556e:	50 e0       	ldi	r21, 0x00	; 0
   15570:	b8 01       	movw	r22, r16
   15572:	88 ef       	ldi	r24, 0xF8	; 248
   15574:	9c e1       	ldi	r25, 0x1C	; 28
   15576:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   1557a:	eb 81       	ldd	r30, Y+3	; 0x03
   1557c:	fc 81       	ldd	r31, Y+4	; 0x04
   1557e:	63 87       	std	Z+11, r22	; 0x0b
   15580:	74 87       	std	Z+12, r23	; 0x0c
   15582:	85 87       	std	Z+13, r24	; 0x0d
   15584:	96 87       	std	Z+14, r25	; 0x0e
   15586:	87 01       	movw	r16, r14
   15588:	0b 5f       	subi	r16, 0xFB	; 251
   1558a:	1f 4f       	sbci	r17, 0xFF	; 255
   1558c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15590:	85 ff       	sbrs	r24, 5
   15592:	f9 c0       	rjmp	.+498    	; 0x15786 <SS80_Command_State+0x472>
   15594:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15598:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1559c:	86 85       	ldd	r24, Z+14	; 0x0e
   1559e:	8f 93       	push	r24
   155a0:	85 85       	ldd	r24, Z+13	; 0x0d
   155a2:	8f 93       	push	r24
   155a4:	84 85       	ldd	r24, Z+12	; 0x0c
   155a6:	8f 93       	push	r24
   155a8:	83 85       	ldd	r24, Z+11	; 0x0b
   155aa:	8f 93       	push	r24
   155ac:	1f 92       	push	r1
   155ae:	ff 85       	ldd	r31, Y+15	; 0x0f
   155b0:	ff 93       	push	r31
   155b2:	2e 85       	ldd	r18, Y+14	; 0x0e
   155b4:	2f 93       	push	r18
   155b6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   155ba:	0f b6       	in	r0, 0x3f	; 63
   155bc:	f8 94       	cli
   155be:	de bf       	out	0x3e, r29	; 62
   155c0:	0f be       	out	0x3f, r0	; 63
   155c2:	cd bf       	out	0x3d, r28	; 61
   155c4:	e0 c0       	rjmp	.+448    	; 0x15786 <SS80_Command_State+0x472>
   155c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155ca:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   155ce:	24 33       	cpi	r18, 0x34	; 52
   155d0:	31 05       	cpc	r19, r1
   155d2:	31 f4       	brne	.+12     	; 0x155e0 <SS80_Command_State+0x2cc>
   155d4:	85 ff       	sbrs	r24, 5
   155d6:	d7 c0       	rjmp	.+430    	; 0x15786 <SS80_Command_State+0x472>
   155d8:	1f 92       	push	r1
   155da:	7f 92       	push	r7
   155dc:	6f 92       	push	r6
   155de:	2c c0       	rjmp	.+88     	; 0x15638 <SS80_Command_State+0x324>
   155e0:	29 33       	cpi	r18, 0x39	; 57
   155e2:	31 05       	cpc	r19, r1
   155e4:	59 f4       	brne	.+22     	; 0x155fc <SS80_Command_State+0x2e8>
   155e6:	87 01       	movw	r16, r14
   155e8:	0d 5f       	subi	r16, 0xFD	; 253
   155ea:	1f 4f       	sbci	r17, 0xFF	; 255
   155ec:	85 ff       	sbrs	r24, 5
   155ee:	cb c0       	rjmp	.+406    	; 0x15786 <SS80_Command_State+0x472>
   155f0:	1f 92       	push	r1
   155f2:	9c 85       	ldd	r25, Y+12	; 0x0c
   155f4:	9f 93       	push	r25
   155f6:	eb 85       	ldd	r30, Y+11	; 0x0b
   155f8:	ef 93       	push	r30
   155fa:	1e c0       	rjmp	.+60     	; 0x15638 <SS80_Command_State+0x324>
   155fc:	2b 33       	cpi	r18, 0x3B	; 59
   155fe:	31 05       	cpc	r19, r1
   15600:	59 f4       	brne	.+22     	; 0x15618 <SS80_Command_State+0x304>
   15602:	87 01       	movw	r16, r14
   15604:	0e 5f       	subi	r16, 0xFE	; 254
   15606:	1f 4f       	sbci	r17, 0xFF	; 255
   15608:	85 ff       	sbrs	r24, 5
   1560a:	bd c0       	rjmp	.+378    	; 0x15786 <SS80_Command_State+0x472>
   1560c:	1f 92       	push	r1
   1560e:	f9 85       	ldd	r31, Y+9	; 0x09
   15610:	ff 93       	push	r31
   15612:	28 85       	ldd	r18, Y+8	; 0x08
   15614:	2f 93       	push	r18
   15616:	10 c0       	rjmp	.+32     	; 0x15638 <SS80_Command_State+0x324>
   15618:	28 34       	cpi	r18, 0x48	; 72
   1561a:	31 05       	cpc	r19, r1
   1561c:	99 f4       	brne	.+38     	; 0x15644 <SS80_Command_State+0x330>
   1561e:	87 01       	movw	r16, r14
   15620:	0e 5f       	subi	r16, 0xFE	; 254
   15622:	1f 4f       	sbci	r17, 0xFF	; 255
   15624:	80 73       	andi	r24, 0x30	; 48
   15626:	99 27       	eor	r25, r25
   15628:	89 2b       	or	r24, r25
   1562a:	09 f4       	brne	.+2      	; 0x1562e <SS80_Command_State+0x31a>
   1562c:	ac c0       	rjmp	.+344    	; 0x15786 <SS80_Command_State+0x472>
   1562e:	1f 92       	push	r1
   15630:	3e 81       	ldd	r19, Y+6	; 0x06
   15632:	3f 93       	push	r19
   15634:	4d 81       	ldd	r20, Y+5	; 0x05
   15636:	4f 93       	push	r20
   15638:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1563c:	0f 90       	pop	r0
   1563e:	0f 90       	pop	r0
   15640:	0f 90       	pop	r0
   15642:	a1 c0       	rjmp	.+322    	; 0x15786 <SS80_Command_State+0x472>
   15644:	24 30       	cpi	r18, 0x04	; 4
   15646:	31 05       	cpc	r19, r1
   15648:	41 f4       	brne	.+16     	; 0x1565a <SS80_Command_State+0x346>
   1564a:	80 73       	andi	r24, 0x30	; 48
   1564c:	99 27       	eor	r25, r25
   1564e:	89 2b       	or	r24, r25
   15650:	09 f4       	brne	.+2      	; 0x15654 <SS80_Command_State+0x340>
   15652:	9b c0       	rjmp	.+310    	; 0x1578a <SS80_Command_State+0x476>
   15654:	85 e2       	ldi	r24, 0x25	; 37
   15656:	95 e2       	ldi	r25, 0x25	; 37
   15658:	40 cf       	rjmp	.-384    	; 0x154da <SS80_Command_State+0x1c6>
   1565a:	2e 30       	cpi	r18, 0x0E	; 14
   1565c:	31 05       	cpc	r19, r1
   1565e:	29 f4       	brne	.+10     	; 0x1566a <SS80_Command_State+0x356>
   15660:	85 ff       	sbrs	r24, 5
   15662:	93 c0       	rjmp	.+294    	; 0x1578a <SS80_Command_State+0x476>
   15664:	8f e0       	ldi	r24, 0x0F	; 15
   15666:	95 e2       	ldi	r25, 0x25	; 37
   15668:	38 cf       	rjmp	.-400    	; 0x154da <SS80_Command_State+0x1c6>
   1566a:	2f 30       	cpi	r18, 0x0F	; 15
   1566c:	31 05       	cpc	r19, r1
   1566e:	29 f4       	brne	.+10     	; 0x1567a <SS80_Command_State+0x366>
   15670:	85 ff       	sbrs	r24, 5
   15672:	8b c0       	rjmp	.+278    	; 0x1578a <SS80_Command_State+0x476>
   15674:	82 ef       	ldi	r24, 0xF2	; 242
   15676:	94 e2       	ldi	r25, 0x24	; 36
   15678:	30 cf       	rjmp	.-416    	; 0x154da <SS80_Command_State+0x1c6>
   1567a:	21 33       	cpi	r18, 0x31	; 49
   1567c:	31 05       	cpc	r19, r1
   1567e:	41 f4       	brne	.+16     	; 0x15690 <SS80_Command_State+0x37c>
   15680:	87 01       	movw	r16, r14
   15682:	0d 5f       	subi	r16, 0xFD	; 253
   15684:	1f 4f       	sbci	r17, 0xFF	; 255
   15686:	85 ff       	sbrs	r24, 5
   15688:	80 c0       	rjmp	.+256    	; 0x1578a <SS80_Command_State+0x476>
   1568a:	86 ed       	ldi	r24, 0xD6	; 214
   1568c:	94 e2       	ldi	r25, 0x24	; 36
   1568e:	25 cf       	rjmp	.-438    	; 0x154da <SS80_Command_State+0x1c6>
   15690:	25 33       	cpi	r18, 0x35	; 53
   15692:	31 05       	cpc	r19, r1
   15694:	69 f4       	brne	.+26     	; 0x156b0 <SS80_Command_State+0x39c>
   15696:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1569a:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1569e:	24 e0       	ldi	r18, 0x04	; 4
   156a0:	30 e0       	ldi	r19, 0x00	; 0
   156a2:	31 83       	std	Z+1, r19	; 0x01
   156a4:	20 83       	st	Z, r18
   156a6:	85 ff       	sbrs	r24, 5
   156a8:	70 c0       	rjmp	.+224    	; 0x1578a <SS80_Command_State+0x476>
   156aa:	85 ec       	ldi	r24, 0xC5	; 197
   156ac:	94 e2       	ldi	r25, 0x24	; 36
   156ae:	15 cf       	rjmp	.-470    	; 0x154da <SS80_Command_State+0x1c6>
   156b0:	27 33       	cpi	r18, 0x37	; 55
   156b2:	31 05       	cpc	r19, r1
   156b4:	59 f4       	brne	.+22     	; 0x156cc <SS80_Command_State+0x3b8>
   156b6:	87 01       	movw	r16, r14
   156b8:	0d 5f       	subi	r16, 0xFD	; 253
   156ba:	1f 4f       	sbci	r17, 0xFF	; 255
   156bc:	80 73       	andi	r24, 0x30	; 48
   156be:	99 27       	eor	r25, r25
   156c0:	89 2b       	or	r24, r25
   156c2:	09 f4       	brne	.+2      	; 0x156c6 <SS80_Command_State+0x3b2>
   156c4:	62 c0       	rjmp	.+196    	; 0x1578a <SS80_Command_State+0x476>
   156c6:	87 ea       	ldi	r24, 0xA7	; 167
   156c8:	94 e2       	ldi	r25, 0x24	; 36
   156ca:	07 cf       	rjmp	.-498    	; 0x154da <SS80_Command_State+0x1c6>
   156cc:	2e 33       	cpi	r18, 0x3E	; 62
   156ce:	31 05       	cpc	r19, r1
   156d0:	c1 f4       	brne	.+48     	; 0x15702 <SS80_Command_State+0x3ee>
   156d2:	80 73       	andi	r24, 0x30	; 48
   156d4:	99 27       	eor	r25, r25
   156d6:	89 2b       	or	r24, r25
   156d8:	81 f0       	breq	.+32     	; 0x156fa <SS80_Command_State+0x3e6>
   156da:	88 e8       	ldi	r24, 0x88	; 136
   156dc:	94 e2       	ldi	r25, 0x24	; 36
   156de:	1f 92       	push	r1
   156e0:	9f 93       	push	r25
   156e2:	8f 93       	push	r24
   156e4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   156e8:	61 ee       	ldi	r22, 0xE1	; 225
   156ea:	7f e0       	ldi	r23, 0x0F	; 15
   156ec:	c8 01       	movw	r24, r16
   156ee:	88 50       	subi	r24, 0x08	; 8
   156f0:	93 4e       	sbci	r25, 0xE3	; 227
   156f2:	86 dc       	rcall	.-1780   	; 0x15000 <SS80_display_extended_status>
   156f4:	0f 90       	pop	r0
   156f6:	0f 90       	pop	r0
   156f8:	0f 90       	pop	r0
   156fa:	87 01       	movw	r16, r14
   156fc:	07 5f       	subi	r16, 0xF7	; 247
   156fe:	1f 4f       	sbci	r17, 0xFF	; 255
   15700:	44 c0       	rjmp	.+136    	; 0x1578a <SS80_Command_State+0x476>
   15702:	2c 34       	cpi	r18, 0x4C	; 76
   15704:	31 05       	cpc	r19, r1
   15706:	39 f4       	brne	.+14     	; 0x15716 <SS80_Command_State+0x402>
   15708:	80 73       	andi	r24, 0x30	; 48
   1570a:	99 27       	eor	r25, r25
   1570c:	89 2b       	or	r24, r25
   1570e:	e9 f1       	breq	.+122    	; 0x1578a <SS80_Command_State+0x476>
   15710:	8d e6       	ldi	r24, 0x6D	; 109
   15712:	94 e2       	ldi	r25, 0x24	; 36
   15714:	e2 ce       	rjmp	.-572    	; 0x154da <SS80_Command_State+0x1c6>
   15716:	2d 34       	cpi	r18, 0x4D	; 77
   15718:	31 05       	cpc	r19, r1
   1571a:	39 f4       	brne	.+14     	; 0x1572a <SS80_Command_State+0x416>
   1571c:	80 73       	andi	r24, 0x30	; 48
   1571e:	99 27       	eor	r25, r25
   15720:	89 2b       	or	r24, r25
   15722:	99 f1       	breq	.+102    	; 0x1578a <SS80_Command_State+0x476>
   15724:	84 e5       	ldi	r24, 0x54	; 84
   15726:	94 e2       	ldi	r25, 0x24	; 36
   15728:	d8 ce       	rjmp	.-592    	; 0x154da <SS80_Command_State+0x1c6>
   1572a:	2d 30       	cpi	r18, 0x0D	; 13
   1572c:	31 05       	cpc	r19, r1
   1572e:	69 f4       	brne	.+26     	; 0x1574a <SS80_Command_State+0x436>
   15730:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15734:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15738:	23 e0       	ldi	r18, 0x03	; 3
   1573a:	30 e0       	ldi	r19, 0x00	; 0
   1573c:	31 83       	std	Z+1, r19	; 0x01
   1573e:	20 83       	st	Z, r18
   15740:	85 ff       	sbrs	r24, 5
   15742:	23 c0       	rjmp	.+70     	; 0x1578a <SS80_Command_State+0x476>
   15744:	8d e3       	ldi	r24, 0x3D	; 61
   15746:	94 e2       	ldi	r25, 0x24	; 36
   15748:	c8 ce       	rjmp	.-624    	; 0x154da <SS80_Command_State+0x1c6>
   1574a:	23 33       	cpi	r18, 0x33	; 51
   1574c:	31 05       	cpc	r19, r1
   1574e:	51 f4       	brne	.+20     	; 0x15764 <SS80_Command_State+0x450>
   15750:	87 01       	movw	r16, r14
   15752:	0c 5f       	subi	r16, 0xFC	; 252
   15754:	1f 4f       	sbci	r17, 0xFF	; 255
   15756:	80 73       	andi	r24, 0x30	; 48
   15758:	99 27       	eor	r25, r25
   1575a:	89 2b       	or	r24, r25
   1575c:	b1 f0       	breq	.+44     	; 0x1578a <SS80_Command_State+0x476>
   1575e:	8c e1       	ldi	r24, 0x1C	; 28
   15760:	94 e2       	ldi	r25, 0x24	; 36
   15762:	bb ce       	rjmp	.-650    	; 0x154da <SS80_Command_State+0x1c6>
   15764:	80 ff       	sbrs	r24, 0
   15766:	28 c0       	rjmp	.+80     	; 0x157b8 <SS80_Command_State+0x4a4>
   15768:	3f 93       	push	r19
   1576a:	2f 93       	push	r18
   1576c:	8c ef       	ldi	r24, 0xFC	; 252
   1576e:	93 e2       	ldi	r25, 0x23	; 35
   15770:	1f 92       	push	r1
   15772:	9f 93       	push	r25
   15774:	8f 93       	push	r24
   15776:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1577a:	0f 90       	pop	r0
   1577c:	0f 90       	pop	r0
   1577e:	0f 90       	pop	r0
   15780:	0f 90       	pop	r0
   15782:	0f 90       	pop	r0
   15784:	02 c0       	rjmp	.+4      	; 0x1578a <SS80_Command_State+0x476>
   15786:	78 01       	movw	r14, r16
   15788:	45 ce       	rjmp	.-886    	; 0x15414 <SS80_Command_State+0x100>
   1578a:	0c 15       	cp	r16, r12
   1578c:	1d 05       	cpc	r17, r13
   1578e:	a1 f0       	breq	.+40     	; 0x157b8 <SS80_Command_State+0x4a4>
   15790:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15794:	80 ff       	sbrs	r24, 0
   15796:	10 c0       	rjmp	.+32     	; 0x157b8 <SS80_Command_State+0x4a4>
   15798:	df 92       	push	r13
   1579a:	cf 92       	push	r12
   1579c:	1f 93       	push	r17
   1579e:	0f 93       	push	r16
   157a0:	84 ec       	ldi	r24, 0xC4	; 196
   157a2:	93 e2       	ldi	r25, 0x23	; 35
   157a4:	1f 92       	push	r1
   157a6:	9f 93       	push	r25
   157a8:	8f 93       	push	r24
   157aa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   157ae:	0f b6       	in	r0, 0x3f	; 63
   157b0:	f8 94       	cli
   157b2:	de bf       	out	0x3e, r29	; 62
   157b4:	0f be       	out	0x3f, r0	; 63
   157b6:	cd bf       	out	0x3d, r28	; 61
   157b8:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   157bc:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   157c0:	81 81       	ldd	r24, Z+1	; 0x01
   157c2:	90 e0       	ldi	r25, 0x00	; 0
   157c4:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   157c8:	89 81       	ldd	r24, Y+1	; 0x01
   157ca:	9a 81       	ldd	r25, Y+2	; 0x02
   157cc:	88 27       	eor	r24, r24
   157ce:	90 7d       	andi	r25, 0xD0	; 208
   157d0:	02 c0       	rjmp	.+4      	; 0x157d6 <SS80_Command_State+0x4c2>
   157d2:	80 e0       	ldi	r24, 0x00	; 0
   157d4:	90 e0       	ldi	r25, 0x00	; 0
   157d6:	60 96       	adiw	r28, 0x10	; 16
   157d8:	0f b6       	in	r0, 0x3f	; 63
   157da:	f8 94       	cli
   157dc:	de bf       	out	0x3e, r29	; 62
   157de:	0f be       	out	0x3f, r0	; 63
   157e0:	cd bf       	out	0x3d, r28	; 61
   157e2:	df 91       	pop	r29
   157e4:	cf 91       	pop	r28
   157e6:	1f 91       	pop	r17
   157e8:	0f 91       	pop	r16
   157ea:	ff 90       	pop	r15
   157ec:	ef 90       	pop	r14
   157ee:	df 90       	pop	r13
   157f0:	cf 90       	pop	r12
   157f2:	bf 90       	pop	r11
   157f4:	af 90       	pop	r10
   157f6:	8f 90       	pop	r8
   157f8:	7f 90       	pop	r7
   157fa:	6f 90       	pop	r6
   157fc:	4f 90       	pop	r4
   157fe:	3f 90       	pop	r3
   15800:	2f 90       	pop	r2
   15802:	08 95       	ret

00015804 <SS80_cmd_seek>:
   15804:	a0 e0       	ldi	r26, 0x00	; 0
   15806:	b0 e0       	ldi	r27, 0x00	; 0
   15808:	e8 e0       	ldi	r30, 0x08	; 8
   1580a:	fc ea       	ldi	r31, 0xAC	; 172
   1580c:	0c 94 2b e4 	jmp	0x1c856	; 0x1c856 <__prologue_saves__+0x4>
   15810:	c0 91 7b 19 	lds	r28, 0x197B	; 0x80197b <SS80s>
   15814:	d0 91 7c 19 	lds	r29, 0x197C	; 0x80197c <SS80s+0x1>
   15818:	8f 80       	ldd	r8, Y+7	; 0x07
   1581a:	98 84       	ldd	r9, Y+8	; 0x08
   1581c:	a9 84       	ldd	r10, Y+9	; 0x09
   1581e:	ba 84       	ldd	r11, Y+10	; 0x0a
   15820:	00 91 7d 19 	lds	r16, 0x197D	; 0x80197d <SS80p>
   15824:	10 91 7e 19 	lds	r17, 0x197E	; 0x80197e <SS80p+0x1>
   15828:	f8 01       	movw	r30, r16
   1582a:	c0 88       	ldd	r12, Z+16	; 0x10
   1582c:	d1 88       	ldd	r13, Z+17	; 0x11
   1582e:	e1 2c       	mov	r14, r1
   15830:	f1 2c       	mov	r15, r1
   15832:	6b 85       	ldd	r22, Y+11	; 0x0b
   15834:	7c 85       	ldd	r23, Y+12	; 0x0c
   15836:	8d 85       	ldd	r24, Y+13	; 0x0d
   15838:	9e 85       	ldd	r25, Y+14	; 0x0e
   1583a:	a7 01       	movw	r20, r14
   1583c:	96 01       	movw	r18, r12
   1583e:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
   15842:	da 01       	movw	r26, r20
   15844:	c9 01       	movw	r24, r18
   15846:	88 0d       	add	r24, r8
   15848:	99 1d       	adc	r25, r9
   1584a:	aa 1d       	adc	r26, r10
   1584c:	bb 1d       	adc	r27, r11
   1584e:	f8 01       	movw	r30, r16
   15850:	46 a0       	ldd	r4, Z+38	; 0x26
   15852:	57 a0       	ldd	r5, Z+39	; 0x27
   15854:	60 a4       	ldd	r6, Z+40	; 0x28
   15856:	71 a4       	ldd	r7, Z+41	; 0x29
   15858:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1585c:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   15860:	48 16       	cp	r4, r24
   15862:	59 06       	cpc	r5, r25
   15864:	6a 06       	cpc	r6, r26
   15866:	7b 06       	cpc	r7, r27
   15868:	18 f5       	brcc	.+70     	; 0x158b0 <SS80_cmd_seek+0xac>
   1586a:	81 e0       	ldi	r24, 0x01	; 1
   1586c:	8a 83       	std	Y+2, r24	; 0x02
   1586e:	8b 81       	ldd	r24, Y+3	; 0x03
   15870:	9c 81       	ldd	r25, Y+4	; 0x04
   15872:	84 60       	ori	r24, 0x04	; 4
   15874:	9c 83       	std	Y+4, r25	; 0x04
   15876:	8b 83       	std	Y+3, r24	; 0x03
   15878:	40 ff       	sbrs	r20, 0
   1587a:	3b c0       	rjmp	.+118    	; 0x158f2 <SS80_cmd_seek+0xee>
   1587c:	a0 89       	ldd	r26, Z+16	; 0x10
   1587e:	b1 89       	ldd	r27, Z+17	; 0x11
   15880:	a5 01       	movw	r20, r10
   15882:	94 01       	movw	r18, r8
   15884:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
   15888:	9f 93       	push	r25
   1588a:	8f 93       	push	r24
   1588c:	7f 93       	push	r23
   1588e:	6f 93       	push	r22
   15890:	81 e8       	ldi	r24, 0x81	; 129
   15892:	92 e2       	ldi	r25, 0x22	; 34
   15894:	1f 92       	push	r1
   15896:	9f 93       	push	r25
   15898:	8f 93       	push	r24
   1589a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1589e:	8d b7       	in	r24, 0x3d	; 61
   158a0:	9e b7       	in	r25, 0x3e	; 62
   158a2:	07 96       	adiw	r24, 0x07	; 7
   158a4:	0f b6       	in	r0, 0x3f	; 63
   158a6:	f8 94       	cli
   158a8:	9e bf       	out	0x3e, r25	; 62
   158aa:	0f be       	out	0x3f, r0	; 63
   158ac:	8d bf       	out	0x3d, r24	; 61
   158ae:	21 c0       	rjmp	.+66     	; 0x158f2 <SS80_cmd_seek+0xee>
   158b0:	ca 01       	movw	r24, r20
   158b2:	80 72       	andi	r24, 0x20	; 32
   158b4:	99 27       	eor	r25, r25
   158b6:	45 ff       	sbrs	r20, 5
   158b8:	1e c0       	rjmp	.+60     	; 0x158f6 <SS80_cmd_seek+0xf2>
   158ba:	a5 01       	movw	r20, r10
   158bc:	94 01       	movw	r18, r8
   158be:	c7 01       	movw	r24, r14
   158c0:	b6 01       	movw	r22, r12
   158c2:	0e 94 65 e3 	call	0x1c6ca	; 0x1c6ca <__mulsi3>
   158c6:	9f 93       	push	r25
   158c8:	8f 93       	push	r24
   158ca:	7f 93       	push	r23
   158cc:	6f 93       	push	r22
   158ce:	8d e6       	ldi	r24, 0x6D	; 109
   158d0:	92 e2       	ldi	r25, 0x22	; 34
   158d2:	1f 92       	push	r1
   158d4:	9f 93       	push	r25
   158d6:	8f 93       	push	r24
   158d8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   158dc:	ed b7       	in	r30, 0x3d	; 61
   158de:	fe b7       	in	r31, 0x3e	; 62
   158e0:	37 96       	adiw	r30, 0x07	; 7
   158e2:	0f b6       	in	r0, 0x3f	; 63
   158e4:	f8 94       	cli
   158e6:	fe bf       	out	0x3e, r31	; 62
   158e8:	0f be       	out	0x3f, r0	; 63
   158ea:	ed bf       	out	0x3d, r30	; 61
   158ec:	80 e0       	ldi	r24, 0x00	; 0
   158ee:	90 e0       	ldi	r25, 0x00	; 0
   158f0:	02 c0       	rjmp	.+4      	; 0x158f6 <SS80_cmd_seek+0xf2>
   158f2:	81 e0       	ldi	r24, 0x01	; 1
   158f4:	90 e0       	ldi	r25, 0x00	; 0
   158f6:	cd b7       	in	r28, 0x3d	; 61
   158f8:	de b7       	in	r29, 0x3e	; 62
   158fa:	e0 e1       	ldi	r30, 0x10	; 16
   158fc:	0c 94 47 e4 	jmp	0x1c88e	; 0x1c88e <__epilogue_restores__+0x4>

00015900 <SS80_locate_and_write>:
   15900:	a8 e0       	ldi	r26, 0x08	; 8
   15902:	b0 e0       	ldi	r27, 0x00	; 0
   15904:	e6 e8       	ldi	r30, 0x86	; 134
   15906:	fc ea       	ldi	r31, 0xAC	; 172
   15908:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   1590c:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15910:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15914:	a0 91 7d 19 	lds	r26, 0x197D	; 0x80197d <SS80p>
   15918:	b0 91 7e 19 	lds	r27, 0x197E	; 0x80197e <SS80p+0x1>
   1591c:	50 96       	adiw	r26, 0x10	; 16
   1591e:	0d 90       	ld	r0, X+
   15920:	bc 91       	ld	r27, X
   15922:	a0 2d       	mov	r26, r0
   15924:	27 81       	ldd	r18, Z+7	; 0x07
   15926:	30 85       	ldd	r19, Z+8	; 0x08
   15928:	41 85       	ldd	r20, Z+9	; 0x09
   1592a:	52 85       	ldd	r21, Z+10	; 0x0a
   1592c:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
   15930:	4b 01       	movw	r8, r22
   15932:	5c 01       	movw	r10, r24
   15934:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15938:	85 ff       	sbrs	r24, 5
   1593a:	18 c0       	rjmp	.+48     	; 0x1596c <SS80_locate_and_write+0x6c>
   1593c:	86 85       	ldd	r24, Z+14	; 0x0e
   1593e:	8f 93       	push	r24
   15940:	85 85       	ldd	r24, Z+13	; 0x0d
   15942:	8f 93       	push	r24
   15944:	84 85       	ldd	r24, Z+12	; 0x0c
   15946:	8f 93       	push	r24
   15948:	83 85       	ldd	r24, Z+11	; 0x0b
   1594a:	8f 93       	push	r24
   1594c:	bf 92       	push	r11
   1594e:	af 92       	push	r10
   15950:	9f 92       	push	r9
   15952:	8f 92       	push	r8
   15954:	82 e0       	ldi	r24, 0x02	; 2
   15956:	98 e2       	ldi	r25, 0x28	; 40
   15958:	1f 92       	push	r1
   1595a:	9f 93       	push	r25
   1595c:	8f 93       	push	r24
   1595e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15962:	0f b6       	in	r0, 0x3f	; 63
   15964:	f8 94       	cli
   15966:	de bf       	out	0x3e, r29	; 62
   15968:	0f be       	out	0x3f, r0	; 63
   1596a:	cd bf       	out	0x3d, r28	; 61
   1596c:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15970:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   15974:	12 82       	std	Z+2, r1	; 0x02
   15976:	54 98       	cbi	0x0a, 4	; 10
   15978:	4c 99       	sbic	0x09, 4	; 9
   1597a:	03 c0       	rjmp	.+6      	; 0x15982 <SS80_locate_and_write+0x82>
   1597c:	80 e0       	ldi	r24, 0x00	; 0
   1597e:	90 e1       	ldi	r25, 0x10	; 16
   15980:	53 c1       	rjmp	.+678    	; 0x15c28 <SS80_locate_and_write+0x328>
   15982:	40 df       	rcall	.-384    	; 0x15804 <SS80_cmd_seek>
   15984:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15988:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1598c:	89 2b       	or	r24, r25
   1598e:	41 f0       	breq	.+16     	; 0x159a0 <SS80_locate_and_write+0xa0>
   15990:	83 81       	ldd	r24, Z+3	; 0x03
   15992:	94 81       	ldd	r25, Z+4	; 0x04
   15994:	82 60       	ori	r24, 0x02	; 2
   15996:	94 83       	std	Z+4, r25	; 0x04
   15998:	83 83       	std	Z+3, r24	; 0x03
   1599a:	01 e0       	ldi	r16, 0x01	; 1
   1599c:	10 e0       	ldi	r17, 0x00	; 0
   1599e:	02 c0       	rjmp	.+4      	; 0x159a4 <SS80_locate_and_write+0xa4>
   159a0:	00 e0       	ldi	r16, 0x00	; 0
   159a2:	10 e0       	ldi	r17, 0x00	; 0
   159a4:	23 84       	ldd	r2, Z+11	; 0x0b
   159a6:	34 84       	ldd	r3, Z+12	; 0x0c
   159a8:	1a 82       	std	Y+2, r1	; 0x02
   159aa:	19 82       	std	Y+1, r1	; 0x01
   159ac:	41 2c       	mov	r4, r1
   159ae:	51 2c       	mov	r5, r1
   159b0:	32 01       	movw	r6, r4
   159b2:	85 eb       	ldi	r24, 0xB5	; 181
   159b4:	97 e2       	ldi	r25, 0x27	; 39
   159b6:	9c 01       	movw	r18, r24
   159b8:	40 e0       	ldi	r20, 0x00	; 0
   159ba:	2b 83       	std	Y+3, r18	; 0x03
   159bc:	3c 83       	std	Y+4, r19	; 0x04
   159be:	4d 83       	std	Y+5, r20	; 0x05
   159c0:	8b ed       	ldi	r24, 0xDB	; 219
   159c2:	97 e2       	ldi	r25, 0x27	; 39
   159c4:	9c 01       	movw	r18, r24
   159c6:	40 e0       	ldi	r20, 0x00	; 0
   159c8:	2e 83       	std	Y+6, r18	; 0x06
   159ca:	3f 83       	std	Y+7, r19	; 0x07
   159cc:	48 87       	std	Y+8, r20	; 0x08
   159ce:	12 14       	cp	r1, r2
   159d0:	13 04       	cpc	r1, r3
   159d2:	0c f0       	brlt	.+2      	; 0x159d6 <SS80_locate_and_write+0xd6>
   159d4:	f7 c0       	rjmp	.+494    	; 0x15bc4 <SS80_locate_and_write+0x2c4>
   159d6:	54 98       	cbi	0x0a, 4	; 10
   159d8:	4c 9b       	sbis	0x09, 4	; 9
   159da:	d0 cf       	rjmp	.-96     	; 0x1597c <SS80_locate_and_write+0x7c>
   159dc:	71 01       	movw	r14, r2
   159de:	31 e0       	ldi	r19, 0x01	; 1
   159e0:	23 16       	cp	r2, r19
   159e2:	33 06       	cpc	r3, r19
   159e4:	1c f0       	brlt	.+6      	; 0x159ec <SS80_locate_and_write+0xec>
   159e6:	e1 2c       	mov	r14, r1
   159e8:	ff 24       	eor	r15, r15
   159ea:	f3 94       	inc	r15
   159ec:	e8 ef       	ldi	r30, 0xF8	; 248
   159ee:	fc e1       	ldi	r31, 0x1C	; 28
   159f0:	20 e0       	ldi	r18, 0x00	; 0
   159f2:	32 e0       	ldi	r19, 0x02	; 2
   159f4:	11 92       	st	Z+, r1
   159f6:	21 50       	subi	r18, 0x01	; 1
   159f8:	30 40       	sbci	r19, 0x00	; 0
   159fa:	e1 f7       	brne	.-8      	; 0x159f4 <SS80_locate_and_write+0xf4>
   159fc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a00:	87 fd       	sbrc	r24, 7
   15a02:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   15a06:	ae 01       	movw	r20, r28
   15a08:	4f 5f       	subi	r20, 0xFF	; 255
   15a0a:	5f 4f       	sbci	r21, 0xFF	; 255
   15a0c:	b7 01       	movw	r22, r14
    return ( uart_rx_count( uart ) );
   15a0e:	88 ef       	ldi	r24, 0xF8	; 248
}
   15a10:	9c e1       	ldi	r25, 0x1C	; 28
   15a12:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
   15a16:	6c 01       	movw	r12, r24
   15a18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a1c:	87 ff       	sbrs	r24, 7
   15a1e:	04 c0       	rjmp	.+8      	; 0x15a28 <SS80_locate_and_write+0x128>
   15a20:	8d ef       	ldi	r24, 0xFD	; 253
   15a22:	9f e0       	ldi	r25, 0x0F	; 15
   15a24:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   15a28:	ce 14       	cp	r12, r14
   15a2a:	df 04       	cpc	r13, r15
   15a2c:	39 f1       	breq	.+78     	; 0x15a7c <SS80_locate_and_write+0x17c>
   15a2e:	89 81       	ldd	r24, Y+1	; 0x01
   15a30:	9a 81       	ldd	r25, Y+2	; 0x02
   15a32:	9c 01       	movw	r18, r24
   15a34:	22 27       	eor	r18, r18
   15a36:	30 7d       	andi	r19, 0xD0	; 208
   15a38:	23 2b       	or	r18, r19
   15a3a:	d1 f0       	breq	.+52     	; 0x15a70 <SS80_locate_and_write+0x170>
   15a3c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a40:	80 ff       	sbrs	r24, 0
   15a42:	0a c0       	rjmp	.+20     	; 0x15a58 <SS80_locate_and_write+0x158>
   15a44:	8f ee       	ldi	r24, 0xEF	; 239
   15a46:	97 e2       	ldi	r25, 0x27	; 39
   15a48:	1f 92       	push	r1
   15a4a:	9f 93       	push	r25
   15a4c:	8f 93       	push	r24
   15a4e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15a52:	0f 90       	pop	r0
   15a54:	0f 90       	pop	r0
   15a56:	0f 90       	pop	r0
   15a58:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15a5c:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15a60:	83 81       	ldd	r24, Z+3	; 0x03
   15a62:	94 81       	ldd	r25, Z+4	; 0x04
   15a64:	82 60       	ori	r24, 0x02	; 2
   15a66:	94 83       	std	Z+4, r25	; 0x04
   15a68:	83 83       	std	Z+3, r24	; 0x03
   15a6a:	81 e0       	ldi	r24, 0x01	; 1
   15a6c:	82 83       	std	Z+2, r24	; 0x02
   15a6e:	9b c0       	rjmp	.+310    	; 0x15ba6 <SS80_locate_and_write+0x2a6>
   15a70:	c1 14       	cp	r12, r1
   15a72:	d1 04       	cpc	r13, r1
   15a74:	09 f0       	breq	.+2      	; 0x15a78 <SS80_locate_and_write+0x178>
   15a76:	d4 c0       	rjmp	.+424    	; 0x15c20 <SS80_locate_and_write+0x320>
   15a78:	90 fd       	sbrc	r25, 0
   15a7a:	95 c0       	rjmp	.+298    	; 0x15ba6 <SS80_locate_and_write+0x2a6>
   15a7c:	01 15       	cp	r16, r1
   15a7e:	11 05       	cpc	r17, r1
   15a80:	09 f0       	breq	.+2      	; 0x15a84 <SS80_locate_and_write+0x184>
   15a82:	86 c0       	rjmp	.+268    	; 0x15b90 <SS80_locate_and_write+0x290>
   15a84:	c1 14       	cp	r12, r1
   15a86:	d1 04       	cpc	r13, r1
   15a88:	09 f4       	brne	.+2      	; 0x15a8c <SS80_locate_and_write+0x18c>
   15a8a:	84 c0       	rjmp	.+264    	; 0x15b94 <SS80_locate_and_write+0x294>
   15a8c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a90:	86 fd       	sbrc	r24, 6
   15a92:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   15a96:	e0 90 7b 19 	lds	r14, 0x197B	; 0x80197b <SS80s>
   15a9a:	f0 90 7c 19 	lds	r15, 0x197C	; 0x80197c <SS80s+0x1>
   15a9e:	33 e0       	ldi	r19, 0x03	; 3
   15aa0:	e3 0e       	add	r14, r19
   15aa2:	f1 1c       	adc	r15, r1
   15aa4:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15aa8:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15aac:	86 01       	movw	r16, r12
   15aae:	28 ef       	ldi	r18, 0xF8	; 248
   15ab0:	3c e1       	ldi	r19, 0x1C	; 28
   15ab2:	b5 01       	movw	r22, r10
   15ab4:	a4 01       	movw	r20, r8
   15ab6:	82 81       	ldd	r24, Z+2	; 0x02
   15ab8:	93 81       	ldd	r25, Z+3	; 0x03
   15aba:	0e 94 50 86 	call	0x10ca0	; 0x10ca0 <dbf_open_write>
   15abe:	7c 01       	movw	r14, r24
   15ac0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ac4:	86 ff       	sbrs	r24, 6
   15ac6:	04 c0       	rjmp	.+8      	; 0x15ad0 <SS80_locate_and_write+0x1d0>
   15ac8:	87 e0       	ldi	r24, 0x07	; 7
   15aca:	90 e1       	ldi	r25, 0x10	; 16
   15acc:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   15ad0:	ce 14       	cp	r12, r14
   15ad2:	df 04       	cpc	r13, r15
   15ad4:	39 f1       	breq	.+78     	; 0x15b24 <SS80_locate_and_write+0x224>
   15ad6:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15ada:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15ade:	83 81       	ldd	r24, Z+3	; 0x03
   15ae0:	94 81       	ldd	r25, Z+4	; 0x04
   15ae2:	82 60       	ori	r24, 0x02	; 2
   15ae4:	94 83       	std	Z+4, r25	; 0x04
   15ae6:	83 83       	std	Z+3, r24	; 0x03
   15ae8:	0e 94 08 72 	call	0xe410	; 0xe410 <mmc_wp_status>
   15aec:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15af0:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15af4:	89 2b       	or	r24, r25
   15af6:	29 f0       	breq	.+10     	; 0x15b02 <SS80_locate_and_write+0x202>
   15af8:	83 81       	ldd	r24, Z+3	; 0x03
   15afa:	94 81       	ldd	r25, Z+4	; 0x04
   15afc:	88 60       	ori	r24, 0x08	; 8
   15afe:	94 83       	std	Z+4, r25	; 0x04
   15b00:	83 83       	std	Z+3, r24	; 0x03
   15b02:	41 e0       	ldi	r20, 0x01	; 1
   15b04:	42 83       	std	Z+2, r20	; 0x02
   15b06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b0a:	80 ff       	sbrs	r24, 0
   15b0c:	29 c0       	rjmp	.+82     	; 0x15b60 <SS80_locate_and_write+0x260>
   15b0e:	1f 92       	push	r1
   15b10:	8f 81       	ldd	r24, Y+7	; 0x07
   15b12:	8f 93       	push	r24
   15b14:	9e 81       	ldd	r25, Y+6	; 0x06
   15b16:	9f 93       	push	r25
   15b18:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15b1c:	0f 90       	pop	r0
   15b1e:	0f 90       	pop	r0
   15b20:	0f 90       	pop	r0
   15b22:	1e c0       	rjmp	.+60     	; 0x15b60 <SS80_locate_and_write+0x260>
   15b24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b28:	85 ff       	sbrs	r24, 5
   15b2a:	0e c0       	rjmp	.+28     	; 0x15b48 <SS80_locate_and_write+0x248>
   15b2c:	df 92       	push	r13
   15b2e:	cf 92       	push	r12
   15b30:	1f 92       	push	r1
   15b32:	ec 81       	ldd	r30, Y+4	; 0x04
   15b34:	ef 93       	push	r30
   15b36:	fb 81       	ldd	r31, Y+3	; 0x03
   15b38:	ff 93       	push	r31
   15b3a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15b3e:	0f 90       	pop	r0
   15b40:	0f 90       	pop	r0
   15b42:	0f 90       	pop	r0
   15b44:	0f 90       	pop	r0
   15b46:	0f 90       	pop	r0
   15b48:	c6 01       	movw	r24, r12
   15b4a:	0d 2c       	mov	r0, r13
   15b4c:	00 0c       	add	r0, r0
   15b4e:	aa 0b       	sbc	r26, r26
   15b50:	bb 0b       	sbc	r27, r27
   15b52:	88 0e       	add	r8, r24
   15b54:	99 1e       	adc	r9, r25
   15b56:	aa 1e       	adc	r10, r26
   15b58:	bb 1e       	adc	r11, r27
   15b5a:	00 e0       	ldi	r16, 0x00	; 0
   15b5c:	10 e0       	ldi	r17, 0x00	; 0
   15b5e:	05 c0       	rjmp	.+10     	; 0x15b6a <SS80_locate_and_write+0x26a>
   15b60:	ec 14       	cp	r14, r12
   15b62:	fd 04       	cpc	r15, r13
   15b64:	64 f0       	brlt	.+24     	; 0x15b7e <SS80_locate_and_write+0x27e>
   15b66:	01 e0       	ldi	r16, 0x01	; 1
   15b68:	10 e0       	ldi	r17, 0x00	; 0
   15b6a:	c7 01       	movw	r24, r14
   15b6c:	0f 2c       	mov	r0, r15
   15b6e:	00 0c       	add	r0, r0
   15b70:	aa 0b       	sbc	r26, r26
   15b72:	bb 0b       	sbc	r27, r27
   15b74:	48 0e       	add	r4, r24
   15b76:	59 1e       	adc	r5, r25
   15b78:	6a 1e       	adc	r6, r26
   15b7a:	7b 1e       	adc	r7, r27
   15b7c:	0b c0       	rjmp	.+22     	; 0x15b94 <SS80_locate_and_write+0x294>
   15b7e:	c6 01       	movw	r24, r12
   15b80:	0d 2c       	mov	r0, r13
   15b82:	00 0c       	add	r0, r0
   15b84:	aa 0b       	sbc	r26, r26
   15b86:	bb 0b       	sbc	r27, r27
   15b88:	48 0e       	add	r4, r24
   15b8a:	59 1e       	adc	r5, r25
   15b8c:	6a 1e       	adc	r6, r26
   15b8e:	7b 1e       	adc	r7, r27
   15b90:	01 e0       	ldi	r16, 0x01	; 1
   15b92:	10 e0       	ldi	r17, 0x00	; 0
   15b94:	2c 18       	sub	r2, r12
   15b96:	3d 08       	sbc	r3, r13
   15b98:	89 81       	ldd	r24, Y+1	; 0x01
   15b9a:	9a 81       	ldd	r25, Y+2	; 0x02
   15b9c:	90 ff       	sbrs	r25, 0
   15b9e:	17 cf       	rjmp	.-466    	; 0x159ce <SS80_locate_and_write+0xce>
   15ba0:	12 14       	cp	r1, r2
   15ba2:	13 04       	cpc	r1, r3
   15ba4:	7c f4       	brge	.+30     	; 0x15bc4 <SS80_locate_and_write+0x2c4>
   15ba6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15baa:	80 ff       	sbrs	r24, 0
   15bac:	1f c0       	rjmp	.+62     	; 0x15bec <SS80_locate_and_write+0x2ec>
   15bae:	8d e8       	ldi	r24, 0x8D	; 141
   15bb0:	97 e2       	ldi	r25, 0x27	; 39
   15bb2:	1f 92       	push	r1
   15bb4:	9f 93       	push	r25
   15bb6:	8f 93       	push	r24
   15bb8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15bbc:	0f 90       	pop	r0
   15bbe:	0f 90       	pop	r0
   15bc0:	0f 90       	pop	r0
   15bc2:	14 c0       	rjmp	.+40     	; 0x15bec <SS80_locate_and_write+0x2ec>
   15bc4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15bc8:	85 ff       	sbrs	r24, 5
   15bca:	10 c0       	rjmp	.+32     	; 0x15bec <SS80_locate_and_write+0x2ec>
   15bcc:	7f 92       	push	r7
   15bce:	6f 92       	push	r6
   15bd0:	5f 92       	push	r5
   15bd2:	4f 92       	push	r4
   15bd4:	82 e6       	ldi	r24, 0x62	; 98
   15bd6:	97 e2       	ldi	r25, 0x27	; 39
   15bd8:	1f 92       	push	r1
   15bda:	9f 93       	push	r25
   15bdc:	8f 93       	push	r24
   15bde:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15be2:	0f b6       	in	r0, 0x3f	; 63
   15be4:	f8 94       	cli
   15be6:	de bf       	out	0x3e, r29	; 62
   15be8:	0f be       	out	0x3f, r0	; 63
   15bea:	cd bf       	out	0x3d, r28	; 61
   15bec:	00 91 7b 19 	lds	r16, 0x197B	; 0x80197b <SS80s>
   15bf0:	10 91 7c 19 	lds	r17, 0x197C	; 0x80197c <SS80s+0x1>
   15bf4:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15bf8:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15bfc:	20 89       	ldd	r18, Z+16	; 0x10
   15bfe:	31 89       	ldd	r19, Z+17	; 0x11
   15c00:	40 e0       	ldi	r20, 0x00	; 0
   15c02:	50 e0       	ldi	r21, 0x00	; 0
   15c04:	c5 01       	movw	r24, r10
   15c06:	b4 01       	movw	r22, r8
   15c08:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
   15c0c:	f8 01       	movw	r30, r16
   15c0e:	27 83       	std	Z+7, r18	; 0x07
   15c10:	30 87       	std	Z+8, r19	; 0x08
   15c12:	41 87       	std	Z+9, r20	; 0x09
   15c14:	52 87       	std	Z+10, r21	; 0x0a
   15c16:	89 81       	ldd	r24, Y+1	; 0x01
   15c18:	9a 81       	ldd	r25, Y+2	; 0x02
   15c1a:	88 27       	eor	r24, r24
   15c1c:	90 7d       	andi	r25, 0xD0	; 208
   15c1e:	04 c0       	rjmp	.+8      	; 0x15c28 <SS80_locate_and_write+0x328>
   15c20:	01 2b       	or	r16, r17
   15c22:	09 f4       	brne	.+2      	; 0x15c26 <SS80_locate_and_write+0x326>
   15c24:	33 cf       	rjmp	.-410    	; 0x15a8c <SS80_locate_and_write+0x18c>
   15c26:	b4 cf       	rjmp	.-152    	; 0x15b90 <SS80_locate_and_write+0x290>
   15c28:	28 96       	adiw	r28, 0x08	; 8
   15c2a:	e2 e1       	ldi	r30, 0x12	; 18
   15c2c:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00015c30 <SS80_Report>:
   15c30:	a3 e0       	ldi	r26, 0x03	; 3
   15c32:	b0 e0       	ldi	r27, 0x00	; 0
   15c34:	ee e1       	ldi	r30, 0x1E	; 30
   15c36:	fe ea       	ldi	r31, 0xAE	; 174
   15c38:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   15c3c:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15c40:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15c44:	82 81       	ldd	r24, Z+2	; 0x02
   15c46:	8b 83       	std	Y+3, r24	; 0x03
   15c48:	80 e0       	ldi	r24, 0x00	; 0
   15c4a:	91 e0       	ldi	r25, 0x01	; 1
   15c4c:	9a 83       	std	Y+2, r25	; 0x02
   15c4e:	89 83       	std	Y+1, r24	; 0x01
   15c50:	ae 01       	movw	r20, r28
   15c52:	4f 5f       	subi	r20, 0xFF	; 255
   15c54:	5f 4f       	sbci	r21, 0xFF	; 255
   15c56:	61 e0       	ldi	r22, 0x01	; 1
   15c58:	70 e0       	ldi	r23, 0x00	; 0
   15c5a:	ce 01       	movw	r24, r28
   15c5c:	03 96       	adiw	r24, 0x03	; 3
   15c5e:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   15c62:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15c66:	01 97       	sbiw	r24, 0x01	; 1
   15c68:	89 f0       	breq	.+34     	; 0x15c8c <SS80_Report+0x5c>
   15c6a:	20 ff       	sbrs	r18, 0
   15c6c:	0a c0       	rjmp	.+20     	; 0x15c82 <SS80_Report+0x52>
   15c6e:	83 e5       	ldi	r24, 0x53	; 83
   15c70:	92 e2       	ldi	r25, 0x22	; 34
   15c72:	1f 92       	push	r1
   15c74:	9f 93       	push	r25
   15c76:	8f 93       	push	r24
   15c78:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15c7c:	0f 90       	pop	r0
   15c7e:	0f 90       	pop	r0
   15c80:	0f 90       	pop	r0
   15c82:	89 81       	ldd	r24, Y+1	; 0x01
   15c84:	9a 81       	ldd	r25, Y+2	; 0x02
   15c86:	88 27       	eor	r24, r24
   15c88:	90 7d       	andi	r25, 0xD0	; 208
   15c8a:	1c c0       	rjmp	.+56     	; 0x15cc4 <SS80_Report+0x94>
   15c8c:	25 ff       	sbrs	r18, 5
   15c8e:	13 c0       	rjmp	.+38     	; 0x15cb6 <SS80_Report+0x86>
   15c90:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15c94:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15c98:	82 81       	ldd	r24, Z+2	; 0x02
   15c9a:	1f 92       	push	r1
   15c9c:	8f 93       	push	r24
   15c9e:	80 e4       	ldi	r24, 0x40	; 64
   15ca0:	92 e2       	ldi	r25, 0x22	; 34
   15ca2:	1f 92       	push	r1
   15ca4:	9f 93       	push	r25
   15ca6:	8f 93       	push	r24
   15ca8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15cac:	0f 90       	pop	r0
   15cae:	0f 90       	pop	r0
   15cb0:	0f 90       	pop	r0
   15cb2:	0f 90       	pop	r0
   15cb4:	0f 90       	pop	r0
   15cb6:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15cba:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15cbe:	12 82       	std	Z+2, r1	; 0x02
   15cc0:	80 e0       	ldi	r24, 0x00	; 0
   15cc2:	90 e0       	ldi	r25, 0x00	; 0
   15cc4:	23 96       	adiw	r28, 0x03	; 3
   15cc6:	e2 e0       	ldi	r30, 0x02	; 2
   15cc8:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00015ccc <Clear_Common>:
   15ccc:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15cd0:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15cd4:	25 81       	ldd	r18, Z+5	; 0x05
   15cd6:	30 e0       	ldi	r19, 0x00	; 0
   15cd8:	28 17       	cp	r18, r24
   15cda:	39 07       	cpc	r19, r25
   15cdc:	19 f0       	breq	.+6      	; 0x15ce4 <Clear_Common+0x18>
   15cde:	0f 97       	sbiw	r24, 0x0f	; 15
   15ce0:	99 f4       	brne	.+38     	; 0x15d08 <Clear_Common+0x3c>
   15ce2:	03 c0       	rjmp	.+6      	; 0x15cea <Clear_Common+0x1e>
   15ce4:	2f 30       	cpi	r18, 0x0F	; 15
   15ce6:	31 05       	cpc	r19, r1
   15ce8:	09 f4       	brne	.+2      	; 0x15cec <Clear_Common+0x20>
   15cea:	15 82       	std	Z+5, r1	; 0x05
   15cec:	16 82       	std	Z+6, r1	; 0x06
   15cee:	17 82       	std	Z+7, r1	; 0x07
   15cf0:	10 86       	std	Z+8, r1	; 0x08
   15cf2:	11 86       	std	Z+9, r1	; 0x09
   15cf4:	12 86       	std	Z+10, r1	; 0x0a
   15cf6:	13 86       	std	Z+11, r1	; 0x0b
   15cf8:	14 86       	std	Z+12, r1	; 0x0c
   15cfa:	15 86       	std	Z+13, r1	; 0x0d
   15cfc:	16 86       	std	Z+14, r1	; 0x0e
   15cfe:	11 82       	std	Z+1, r1	; 0x01
   15d00:	10 82       	st	Z, r1
   15d02:	14 82       	std	Z+4, r1	; 0x04
   15d04:	13 82       	std	Z+3, r1	; 0x03
   15d06:	12 82       	std	Z+2, r1	; 0x02
   15d08:	08 95       	ret

00015d0a <SS80_init>:
   15d0a:	a0 e0       	ldi	r26, 0x00	; 0
   15d0c:	b0 e0       	ldi	r27, 0x00	; 0
   15d0e:	eb e8       	ldi	r30, 0x8B	; 139
   15d10:	fe ea       	ldi	r31, 0xAE	; 174
   15d12:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
   15d16:	0b ed       	ldi	r16, 0xDB	; 219
   15d18:	10 e2       	ldi	r17, 0x20	; 32
   15d1a:	cb e0       	ldi	r28, 0x0B	; 11
   15d1c:	d0 e0       	ldi	r29, 0x00	; 0
   15d1e:	82 e0       	ldi	r24, 0x02	; 2
   15d20:	f8 2e       	mov	r15, r24
   15d22:	8b e0       	ldi	r24, 0x0B	; 11
   15d24:	99 e2       	ldi	r25, 0x29	; 41
   15d26:	6c 01       	movw	r12, r24
   15d28:	e1 2c       	mov	r14, r1
   15d2a:	f8 01       	movw	r30, r16
   15d2c:	80 81       	ld	r24, Z
   15d2e:	83 30       	cpi	r24, 0x03	; 3
   15d30:	39 f5       	brne	.+78     	; 0x15d80 <SS80_init+0x76>
   15d32:	ce 01       	movw	r24, r28
   15d34:	0e 94 26 94 	call	0x1284c	; 0x1284c <set_active_device>
   15d38:	89 2b       	or	r24, r25
   15d3a:	11 f1       	breq	.+68     	; 0x15d80 <SS80_init+0x76>
   15d3c:	8f e0       	ldi	r24, 0x0F	; 15
   15d3e:	90 e0       	ldi	r25, 0x00	; 0
   15d40:	c5 df       	rcall	.-118    	; 0x15ccc <Clear_Common>
   15d42:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15d46:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15d4a:	f2 82       	std	Z+2, r15	; 0x02
   15d4c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d50:	85 ff       	sbrs	r24, 5
   15d52:	0e c0       	rjmp	.+28     	; 0x15d70 <SS80_init+0x66>
   15d54:	f8 01       	movw	r30, r16
   15d56:	81 81       	ldd	r24, Z+1	; 0x01
   15d58:	1f 92       	push	r1
   15d5a:	8f 93       	push	r24
   15d5c:	1f 92       	push	r1
   15d5e:	df 92       	push	r13
   15d60:	cf 92       	push	r12
   15d62:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15d66:	0f 90       	pop	r0
   15d68:	0f 90       	pop	r0
   15d6a:	0f 90       	pop	r0
   15d6c:	0f 90       	pop	r0
   15d6e:	0f 90       	pop	r0
   15d70:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15d74:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15d78:	81 81       	ldd	r24, Z+1	; 0x01
   15d7a:	90 e0       	ldi	r25, 0x00	; 0
   15d7c:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   15d80:	21 97       	sbiw	r28, 0x01	; 1
   15d82:	0b 52       	subi	r16, 0x2B	; 43
   15d84:	11 09       	sbc	r17, r1
   15d86:	cf 3f       	cpi	r28, 0xFF	; 255
   15d88:	ff ef       	ldi	r31, 0xFF	; 255
   15d8a:	df 07       	cpc	r29, r31
   15d8c:	71 f6       	brne	.-100    	; 0x15d2a <SS80_init+0x20>
   15d8e:	cd b7       	in	r28, 0x3d	; 61
   15d90:	de b7       	in	r29, 0x3e	; 62
   15d92:	e8 e0       	ldi	r30, 0x08	; 8
   15d94:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

00015d98 <SS80_Channel_Independent_Clear>:
   15d98:	99 df       	rcall	.-206    	; 0x15ccc <Clear_Common>
   15d9a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15d9e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15da2:	81 81       	ldd	r24, Z+1	; 0x01
   15da4:	90 e0       	ldi	r25, 0x00	; 0
   15da6:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   15daa:	80 e0       	ldi	r24, 0x00	; 0
   15dac:	90 e0       	ldi	r25, 0x00	; 0
   15dae:	08 95       	ret

00015db0 <SS80_Universal_Device_Clear>:
   15db0:	8f e0       	ldi	r24, 0x0F	; 15
   15db2:	90 e0       	ldi	r25, 0x00	; 0
   15db4:	8b df       	rcall	.-234    	; 0x15ccc <Clear_Common>
   15db6:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15dba:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15dbe:	81 81       	ldd	r24, Z+1	; 0x01
   15dc0:	90 e0       	ldi	r25, 0x00	; 0
   15dc2:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   15dc6:	80 e0       	ldi	r24, 0x00	; 0
   15dc8:	90 e0       	ldi	r25, 0x00	; 0
   15dca:	08 95       	ret

00015dcc <SS80_Selected_Device_Clear>:
   15dcc:	cf 93       	push	r28
   15dce:	df 93       	push	r29
   15dd0:	ec 01       	movw	r28, r24
   15dd2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15dd6:	85 ff       	sbrs	r24, 5
   15dd8:	0a c0       	rjmp	.+20     	; 0x15dee <SS80_Selected_Device_Clear+0x22>
   15dda:	84 e3       	ldi	r24, 0x34	; 52
   15ddc:	92 e2       	ldi	r25, 0x22	; 34
   15dde:	1f 92       	push	r1
   15de0:	9f 93       	push	r25
   15de2:	8f 93       	push	r24
   15de4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15de8:	0f 90       	pop	r0
   15dea:	0f 90       	pop	r0
   15dec:	0f 90       	pop	r0
   15dee:	ce 01       	movw	r24, r28
   15df0:	6d df       	rcall	.-294    	; 0x15ccc <Clear_Common>
   15df2:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15df6:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15dfa:	81 81       	ldd	r24, Z+1	; 0x01
   15dfc:	90 e0       	ldi	r25, 0x00	; 0
   15dfe:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   15e02:	80 e0       	ldi	r24, 0x00	; 0
   15e04:	90 e0       	ldi	r25, 0x00	; 0
   15e06:	df 91       	pop	r29
   15e08:	cf 91       	pop	r28
   15e0a:	08 95       	ret

00015e0c <SS80_Amigo_Clear>:
   15e0c:	a3 e0       	ldi	r26, 0x03	; 3
   15e0e:	b0 e0       	ldi	r27, 0x00	; 0
   15e10:	ec e0       	ldi	r30, 0x0C	; 12
   15e12:	ff ea       	ldi	r31, 0xAF	; 175
   15e14:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   15e18:	1a 82       	std	Y+2, r1	; 0x02
   15e1a:	19 82       	std	Y+1, r1	; 0x01
   15e1c:	ae 01       	movw	r20, r28
   15e1e:	4f 5f       	subi	r20, 0xFF	; 255
   15e20:	5f 4f       	sbci	r21, 0xFF	; 255
   15e22:	61 e0       	ldi	r22, 0x01	; 1
   15e24:	70 e0       	ldi	r23, 0x00	; 0
   15e26:	ce 01       	movw	r24, r28
   15e28:	03 96       	adiw	r24, 0x03	; 3
   15e2a:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
   15e2e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15e32:	01 97       	sbiw	r24, 0x01	; 1
   15e34:	89 f0       	breq	.+34     	; 0x15e58 <SS80_Amigo_Clear+0x4c>
   15e36:	20 ff       	sbrs	r18, 0
   15e38:	0a c0       	rjmp	.+20     	; 0x15e4e <SS80_Amigo_Clear+0x42>
   15e3a:	81 e2       	ldi	r24, 0x21	; 33
   15e3c:	92 e2       	ldi	r25, 0x22	; 34
   15e3e:	1f 92       	push	r1
   15e40:	9f 93       	push	r25
   15e42:	8f 93       	push	r24
   15e44:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15e48:	0f 90       	pop	r0
   15e4a:	0f 90       	pop	r0
   15e4c:	0f 90       	pop	r0
   15e4e:	89 81       	ldd	r24, Y+1	; 0x01
   15e50:	9a 81       	ldd	r25, Y+2	; 0x02
   15e52:	88 27       	eor	r24, r24
   15e54:	90 7d       	andi	r25, 0xD0	; 208
   15e56:	19 c0       	rjmp	.+50     	; 0x15e8a <SS80_Amigo_Clear+0x7e>
   15e58:	25 ff       	sbrs	r18, 5
   15e5a:	0a c0       	rjmp	.+20     	; 0x15e70 <SS80_Amigo_Clear+0x64>
   15e5c:	82 e1       	ldi	r24, 0x12	; 18
   15e5e:	92 e2       	ldi	r25, 0x22	; 34
   15e60:	1f 92       	push	r1
   15e62:	9f 93       	push	r25
   15e64:	8f 93       	push	r24
   15e66:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15e6a:	0f 90       	pop	r0
   15e6c:	0f 90       	pop	r0
   15e6e:	0f 90       	pop	r0
   15e70:	8f e0       	ldi	r24, 0x0F	; 15
   15e72:	90 e0       	ldi	r25, 0x00	; 0
   15e74:	2b df       	rcall	.-426    	; 0x15ccc <Clear_Common>
   15e76:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15e7a:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15e7e:	81 81       	ldd	r24, Z+1	; 0x01
   15e80:	90 e0       	ldi	r25, 0x00	; 0
   15e82:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   15e86:	80 e0       	ldi	r24, 0x00	; 0
   15e88:	90 e0       	ldi	r25, 0x00	; 0
   15e8a:	23 96       	adiw	r28, 0x03	; 3
   15e8c:	e2 e0       	ldi	r30, 0x02	; 2
   15e8e:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00015e92 <SS80_Cancel>:
   15e92:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   15e96:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   15e9a:	11 82       	std	Z+1, r1	; 0x01
   15e9c:	10 82       	st	Z, r1
   15e9e:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15ea2:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15ea6:	81 81       	ldd	r24, Z+1	; 0x01
   15ea8:	90 e0       	ldi	r25, 0x00	; 0
   15eaa:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   15eae:	80 e0       	ldi	r24, 0x00	; 0
   15eb0:	90 e0       	ldi	r25, 0x00	; 0
   15eb2:	08 95       	ret

00015eb4 <SS80_Transparent_State>:
   15eb4:	a2 e0       	ldi	r26, 0x02	; 2
   15eb6:	b0 e0       	ldi	r27, 0x00	; 0
   15eb8:	e0 e6       	ldi	r30, 0x60	; 96
   15eba:	ff ea       	ldi	r31, 0xAF	; 175
   15ebc:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   15ec0:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15ec4:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15ec8:	81 81       	ldd	r24, Z+1	; 0x01
   15eca:	90 e0       	ldi	r25, 0x00	; 0
   15ecc:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   15ed0:	80 e0       	ldi	r24, 0x00	; 0
   15ed2:	91 e0       	ldi	r25, 0x01	; 1
   15ed4:	9a 83       	std	Y+2, r25	; 0x02
   15ed6:	89 83       	std	Y+1, r24	; 0x01
   15ed8:	ae 01       	movw	r20, r28
   15eda:	4f 5f       	subi	r20, 0xFF	; 255
   15edc:	5f 4f       	sbci	r21, 0xFF	; 255
   15ede:	60 e0       	ldi	r22, 0x00	; 0
   15ee0:	72 e0       	ldi	r23, 0x02	; 2
   15ee2:	88 ef       	ldi	r24, 0xF8	; 248
   15ee4:	9c e1       	ldi	r25, 0x1C	; 28
   15ee6:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
   15eea:	7c 01       	movw	r14, r24
   15eec:	89 81       	ldd	r24, Y+1	; 0x01
   15eee:	9a 81       	ldd	r25, Y+2	; 0x02
   15ef0:	9c 01       	movw	r18, r24
   15ef2:	22 27       	eor	r18, r18
   15ef4:	30 7d       	andi	r19, 0xD0	; 208
   15ef6:	23 2b       	or	r18, r19
   15ef8:	79 f0       	breq	.+30     	; 0x15f18 <SS80_Transparent_State+0x64>
   15efa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15efe:	80 ff       	sbrs	r24, 0
   15f00:	e0 c0       	rjmp	.+448    	; 0x160c2 <SS80_Transparent_State+0x20e>
   15f02:	81 eb       	ldi	r24, 0xB1	; 177
   15f04:	93 e2       	ldi	r25, 0x23	; 35
   15f06:	1f 92       	push	r1
   15f08:	9f 93       	push	r25
   15f0a:	8f 93       	push	r24
   15f0c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15f10:	0f 90       	pop	r0
   15f12:	0f 90       	pop	r0
   15f14:	0f 90       	pop	r0
   15f16:	d5 c0       	rjmp	.+426    	; 0x160c2 <SS80_Transparent_State+0x20e>
   15f18:	e1 14       	cp	r14, r1
   15f1a:	f1 04       	cpc	r15, r1
   15f1c:	09 f4       	brne	.+2      	; 0x15f20 <SS80_Transparent_State+0x6c>
   15f1e:	d6 c0       	rjmp	.+428    	; 0x160cc <SS80_Transparent_State+0x218>
   15f20:	90 fd       	sbrc	r25, 0
   15f22:	0e c0       	rjmp	.+28     	; 0x15f40 <SS80_Transparent_State+0x8c>
   15f24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f28:	80 ff       	sbrs	r24, 0
   15f2a:	0a c0       	rjmp	.+20     	; 0x15f40 <SS80_Transparent_State+0x8c>
   15f2c:	88 e9       	ldi	r24, 0x98	; 152
   15f2e:	93 e2       	ldi	r25, 0x23	; 35
   15f30:	1f 92       	push	r1
   15f32:	9f 93       	push	r25
   15f34:	8f 93       	push	r24
   15f36:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15f3a:	0f 90       	pop	r0
   15f3c:	0f 90       	pop	r0
   15f3e:	0f 90       	pop	r0
   15f40:	88 ef       	ldi	r24, 0xF8	; 248
   15f42:	a8 2e       	mov	r10, r24
   15f44:	8c e1       	ldi	r24, 0x1C	; 28
   15f46:	b8 2e       	mov	r11, r24
   15f48:	00 e0       	ldi	r16, 0x00	; 0
   15f4a:	10 e0       	ldi	r17, 0x00	; 0
   15f4c:	0e 15       	cp	r16, r14
   15f4e:	1f 05       	cpc	r17, r15
   15f50:	0c f0       	brlt	.+2      	; 0x15f54 <SS80_Transparent_State+0xa0>
   15f52:	a0 c0       	rjmp	.+320    	; 0x16094 <SS80_Transparent_State+0x1e0>
   15f54:	68 01       	movw	r12, r16
   15f56:	8f ef       	ldi	r24, 0xFF	; 255
   15f58:	c8 1a       	sub	r12, r24
   15f5a:	d8 0a       	sbc	r13, r24
   15f5c:	f5 01       	movw	r30, r10
   15f5e:	81 91       	ld	r24, Z+
   15f60:	5f 01       	movw	r10, r30
   15f62:	28 2f       	mov	r18, r24
   15f64:	30 e0       	ldi	r19, 0x00	; 0
   15f66:	a9 01       	movw	r20, r18
   15f68:	40 52       	subi	r20, 0x20	; 32
   15f6a:	51 09       	sbc	r21, r1
   15f6c:	40 31       	cpi	r20, 0x10	; 16
   15f6e:	51 05       	cpc	r21, r1
   15f70:	20 f4       	brcc	.+8      	; 0x15f7a <SS80_Transparent_State+0xc6>
   15f72:	80 52       	subi	r24, 0x20	; 32
   15f74:	8d d9       	rcall	.-3302   	; 0x15290 <SS80_Check_Unit>
   15f76:	86 01       	movw	r16, r12
   15f78:	e9 cf       	rjmp	.-46     	; 0x15f4c <SS80_Transparent_State+0x98>
   15f7a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f7e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   15f82:	21 30       	cpi	r18, 0x01	; 1
   15f84:	31 05       	cpc	r19, r1
   15f86:	c9 f4       	brne	.+50     	; 0x15fba <SS80_Transparent_State+0x106>
   15f88:	0e 5f       	subi	r16, 0xFE	; 254
   15f8a:	1f 4f       	sbci	r17, 0xFF	; 255
   15f8c:	80 73       	andi	r24, 0x30	; 48
   15f8e:	99 27       	eor	r25, r25
   15f90:	89 2b       	or	r24, r25
   15f92:	51 f0       	breq	.+20     	; 0x15fa8 <SS80_Transparent_State+0xf4>
   15f94:	83 e7       	ldi	r24, 0x73	; 115
   15f96:	93 e2       	ldi	r25, 0x23	; 35
   15f98:	1f 92       	push	r1
   15f9a:	9f 93       	push	r25
   15f9c:	8f 93       	push	r24
   15f9e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15fa2:	0f 90       	pop	r0
   15fa4:	0f 90       	pop	r0
   15fa6:	0f 90       	pop	r0
   15fa8:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   15fac:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   15fb0:	81 81       	ldd	r24, Z+1	; 0x01
   15fb2:	90 e0       	ldi	r25, 0x00	; 0
   15fb4:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   15fb8:	6d c0       	rjmp	.+218    	; 0x16094 <SS80_Transparent_State+0x1e0>
   15fba:	22 30       	cpi	r18, 0x02	; 2
   15fbc:	31 05       	cpc	r19, r1
   15fbe:	51 f4       	brne	.+20     	; 0x15fd4 <SS80_Transparent_State+0x120>
   15fc0:	0b 5f       	subi	r16, 0xFB	; 251
   15fc2:	1f 4f       	sbci	r17, 0xFF	; 255
   15fc4:	80 73       	andi	r24, 0x30	; 48
   15fc6:	99 27       	eor	r25, r25
   15fc8:	89 2b       	or	r24, r25
   15fca:	09 f4       	brne	.+2      	; 0x15fce <SS80_Transparent_State+0x11a>
   15fcc:	63 c0       	rjmp	.+198    	; 0x16094 <SS80_Transparent_State+0x1e0>
   15fce:	86 e5       	ldi	r24, 0x56	; 86
   15fd0:	93 e2       	ldi	r25, 0x23	; 35
   15fd2:	0c c0       	rjmp	.+24     	; 0x15fec <SS80_Transparent_State+0x138>
   15fd4:	23 30       	cpi	r18, 0x03	; 3
   15fd6:	31 05       	cpc	r19, r1
   15fd8:	91 f4       	brne	.+36     	; 0x15ffe <SS80_Transparent_State+0x14a>
   15fda:	0b 5f       	subi	r16, 0xFB	; 251
   15fdc:	1f 4f       	sbci	r17, 0xFF	; 255
   15fde:	80 73       	andi	r24, 0x30	; 48
   15fe0:	99 27       	eor	r25, r25
   15fe2:	89 2b       	or	r24, r25
   15fe4:	09 f4       	brne	.+2      	; 0x15fe8 <SS80_Transparent_State+0x134>
   15fe6:	56 c0       	rjmp	.+172    	; 0x16094 <SS80_Transparent_State+0x1e0>
   15fe8:	88 e3       	ldi	r24, 0x38	; 56
   15fea:	93 e2       	ldi	r25, 0x23	; 35
   15fec:	1f 92       	push	r1
   15fee:	9f 93       	push	r25
   15ff0:	8f 93       	push	r24
   15ff2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   15ff6:	0f 90       	pop	r0
   15ff8:	0f 90       	pop	r0
   15ffa:	0f 90       	pop	r0
   15ffc:	4b c0       	rjmp	.+150    	; 0x16094 <SS80_Transparent_State+0x1e0>
   15ffe:	28 30       	cpi	r18, 0x08	; 8
   16000:	31 05       	cpc	r19, r1
   16002:	e9 f4       	brne	.+58     	; 0x1603e <SS80_Transparent_State+0x18a>
   16004:	85 ff       	sbrs	r24, 5
   16006:	13 c0       	rjmp	.+38     	; 0x1602e <SS80_Transparent_State+0x17a>
   16008:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1600c:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16010:	85 81       	ldd	r24, Z+5	; 0x05
   16012:	1f 92       	push	r1
   16014:	8f 93       	push	r24
   16016:	81 e1       	ldi	r24, 0x11	; 17
   16018:	93 e2       	ldi	r25, 0x23	; 35
   1601a:	1f 92       	push	r1
   1601c:	9f 93       	push	r25
   1601e:	8f 93       	push	r24
   16020:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16024:	0f 90       	pop	r0
   16026:	0f 90       	pop	r0
   16028:	0f 90       	pop	r0
   1602a:	0f 90       	pop	r0
   1602c:	0f 90       	pop	r0
   1602e:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   16032:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16036:	85 81       	ldd	r24, Z+5	; 0x05
   16038:	90 e0       	ldi	r25, 0x00	; 0
   1603a:	ae de       	rcall	.-676    	; 0x15d98 <SS80_Channel_Independent_Clear>
   1603c:	49 c0       	rjmp	.+146    	; 0x160d0 <SS80_Transparent_State+0x21c>
   1603e:	29 30       	cpi	r18, 0x09	; 9
   16040:	31 05       	cpc	r19, r1
   16042:	b9 f4       	brne	.+46     	; 0x16072 <SS80_Transparent_State+0x1be>
   16044:	85 ff       	sbrs	r24, 5
   16046:	13 c0       	rjmp	.+38     	; 0x1606e <SS80_Transparent_State+0x1ba>
   16048:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1604c:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16050:	85 81       	ldd	r24, Z+5	; 0x05
   16052:	1f 92       	push	r1
   16054:	8f 93       	push	r24
   16056:	8d ef       	ldi	r24, 0xFD	; 253
   16058:	92 e2       	ldi	r25, 0x22	; 34
   1605a:	1f 92       	push	r1
   1605c:	9f 93       	push	r25
   1605e:	8f 93       	push	r24
   16060:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16064:	0f 90       	pop	r0
   16066:	0f 90       	pop	r0
   16068:	0f 90       	pop	r0
   1606a:	0f 90       	pop	r0
   1606c:	0f 90       	pop	r0
   1606e:	11 df       	rcall	.-478    	; 0x15e92 <SS80_Cancel>
   16070:	2f c0       	rjmp	.+94     	; 0x160d0 <SS80_Transparent_State+0x21c>
   16072:	80 ff       	sbrs	r24, 0
   16074:	26 c0       	rjmp	.+76     	; 0x160c2 <SS80_Transparent_State+0x20e>
   16076:	3f 93       	push	r19
   16078:	2f 93       	push	r18
   1607a:	8d ed       	ldi	r24, 0xDD	; 221
   1607c:	92 e2       	ldi	r25, 0x22	; 34
   1607e:	1f 92       	push	r1
   16080:	9f 93       	push	r25
   16082:	8f 93       	push	r24
   16084:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16088:	0f 90       	pop	r0
   1608a:	0f 90       	pop	r0
   1608c:	0f 90       	pop	r0
   1608e:	0f 90       	pop	r0
   16090:	0f 90       	pop	r0
   16092:	86 01       	movw	r16, r12
   16094:	0e 15       	cp	r16, r14
   16096:	1f 05       	cpc	r17, r15
   16098:	a1 f0       	breq	.+40     	; 0x160c2 <SS80_Transparent_State+0x20e>
   1609a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1609e:	80 ff       	sbrs	r24, 0
   160a0:	10 c0       	rjmp	.+32     	; 0x160c2 <SS80_Transparent_State+0x20e>
   160a2:	ff 92       	push	r15
   160a4:	ef 92       	push	r14
   160a6:	1f 93       	push	r17
   160a8:	0f 93       	push	r16
   160aa:	81 ea       	ldi	r24, 0xA1	; 161
   160ac:	92 e2       	ldi	r25, 0x22	; 34
   160ae:	1f 92       	push	r1
   160b0:	9f 93       	push	r25
   160b2:	8f 93       	push	r24
   160b4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   160b8:	0f b6       	in	r0, 0x3f	; 63
   160ba:	f8 94       	cli
   160bc:	de bf       	out	0x3e, r29	; 62
   160be:	0f be       	out	0x3f, r0	; 63
   160c0:	cd bf       	out	0x3d, r28	; 61
   160c2:	89 81       	ldd	r24, Y+1	; 0x01
   160c4:	9a 81       	ldd	r25, Y+2	; 0x02
   160c6:	88 27       	eor	r24, r24
   160c8:	90 7d       	andi	r25, 0xD0	; 208
   160ca:	02 c0       	rjmp	.+4      	; 0x160d0 <SS80_Transparent_State+0x21c>
   160cc:	80 e0       	ldi	r24, 0x00	; 0
   160ce:	90 e0       	ldi	r25, 0x00	; 0
   160d0:	22 96       	adiw	r28, 0x02	; 2
   160d2:	ea e0       	ldi	r30, 0x0A	; 10
   160d4:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

000160d8 <SS80_error_return>:
   160d8:	a3 e0       	ldi	r26, 0x03	; 3
   160da:	b0 e0       	ldi	r27, 0x00	; 0
   160dc:	e2 e7       	ldi	r30, 0x72	; 114
   160de:	f0 eb       	ldi	r31, 0xB0	; 176
   160e0:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   160e4:	80 e0       	ldi	r24, 0x00	; 0
   160e6:	91 e0       	ldi	r25, 0x01	; 1
   160e8:	9a 83       	std	Y+2, r25	; 0x02
   160ea:	89 83       	std	Y+1, r24	; 0x01
   160ec:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   160f0:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   160f4:	81 e0       	ldi	r24, 0x01	; 1
   160f6:	82 83       	std	Z+2, r24	; 0x02
   160f8:	8b 83       	std	Y+3, r24	; 0x03
   160fa:	ae 01       	movw	r20, r28
   160fc:	4f 5f       	subi	r20, 0xFF	; 255
   160fe:	5f 4f       	sbci	r21, 0xFF	; 255
   16100:	61 e0       	ldi	r22, 0x01	; 1
   16102:	70 e0       	ldi	r23, 0x00	; 0
   16104:	ce 01       	movw	r24, r28
   16106:	03 96       	adiw	r24, 0x03	; 3
   16108:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   1610c:	01 97       	sbiw	r24, 0x01	; 1
   1610e:	99 f0       	breq	.+38     	; 0x16136 <SS80_error_return+0x5e>
   16110:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16114:	80 ff       	sbrs	r24, 0
   16116:	0a c0       	rjmp	.+20     	; 0x1612c <SS80_error_return+0x54>
   16118:	83 ed       	ldi	r24, 0xD3	; 211
   1611a:	91 e2       	ldi	r25, 0x21	; 33
   1611c:	1f 92       	push	r1
   1611e:	9f 93       	push	r25
   16120:	8f 93       	push	r24
   16122:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16126:	0f 90       	pop	r0
   16128:	0f 90       	pop	r0
   1612a:	0f 90       	pop	r0
   1612c:	89 81       	ldd	r24, Y+1	; 0x01
   1612e:	9a 81       	ldd	r25, Y+2	; 0x02
   16130:	88 27       	eor	r24, r24
   16132:	90 7d       	andi	r25, 0xD0	; 208
   16134:	07 c0       	rjmp	.+14     	; 0x16144 <SS80_error_return+0x6c>
   16136:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1613a:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1613e:	12 82       	std	Z+2, r1	; 0x02
   16140:	80 e0       	ldi	r24, 0x00	; 0
   16142:	90 e0       	ldi	r25, 0x00	; 0
   16144:	23 96       	adiw	r28, 0x03	; 3
   16146:	e2 e0       	ldi	r30, 0x02	; 2
   16148:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0001614c <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   1614c:	ac e0       	ldi	r26, 0x0C	; 12
   1614e:	b0 e0       	ldi	r27, 0x00	; 0
   16150:	ec ea       	ldi	r30, 0xAC	; 172
   16152:	f0 eb       	ldi	r31, 0xB0	; 176
   16154:	0c 94 2a e4 	jmp	0x1c854	; 0x1c854 <__prologue_saves__+0x2>
   16158:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1615c:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16160:	27 81       	ldd	r18, Z+7	; 0x07
   16162:	30 85       	ldd	r19, Z+8	; 0x08
   16164:	41 85       	ldd	r20, Z+9	; 0x09
   16166:	52 85       	ldd	r21, Z+10	; 0x0a
   16168:	a0 91 7d 19 	lds	r26, 0x197D	; 0x80197d <SS80p>
   1616c:	b0 91 7e 19 	lds	r27, 0x197E	; 0x80197e <SS80p+0x1>
   16170:	50 96       	adiw	r26, 0x10	; 16
   16172:	0d 90       	ld	r0, X+
   16174:	bc 91       	ld	r27, X
   16176:	a0 2d       	mov	r26, r0
   16178:	12 82       	std	Z+2, r1	; 0x02
   1617a:	1a 82       	std	Y+2, r1	; 0x02
   1617c:	19 82       	std	Y+1, r1	; 0x01
   1617e:	54 98       	cbi	0x0a, 4	; 10
   16180:	4c 99       	sbic	0x09, 4	; 9
   16182:	03 c0       	rjmp	.+6      	; 0x1618a <SS80_locate_and_read+0x3e>
   16184:	80 e0       	ldi	r24, 0x00	; 0
   16186:	90 e1       	ldi	r25, 0x10	; 16
   16188:	46 c1       	rjmp	.+652    	; 0x16416 <SS80_locate_and_read+0x2ca>
   1618a:	0e 94 09 e4 	call	0x1c812	; 0x1c812 <__muluhisi3>
   1618e:	4b 01       	movw	r8, r22
   16190:	5c 01       	movw	r10, r24
   16192:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16196:	85 ff       	sbrs	r24, 5
   16198:	1c c0       	rjmp	.+56     	; 0x161d2 <SS80_locate_and_read+0x86>
   1619a:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1619e:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   161a2:	86 85       	ldd	r24, Z+14	; 0x0e
   161a4:	8f 93       	push	r24
   161a6:	85 85       	ldd	r24, Z+13	; 0x0d
   161a8:	8f 93       	push	r24
   161aa:	84 85       	ldd	r24, Z+12	; 0x0c
   161ac:	8f 93       	push	r24
   161ae:	83 85       	ldd	r24, Z+11	; 0x0b
   161b0:	8f 93       	push	r24
   161b2:	bf 92       	push	r11
   161b4:	af 92       	push	r10
   161b6:	9f 92       	push	r9
   161b8:	8f 92       	push	r8
   161ba:	87 ec       	ldi	r24, 0xC7	; 199
   161bc:	98 e2       	ldi	r25, 0x28	; 40
   161be:	1f 92       	push	r1
   161c0:	9f 93       	push	r25
   161c2:	8f 93       	push	r24
   161c4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   161c8:	0f b6       	in	r0, 0x3f	; 63
   161ca:	f8 94       	cli
   161cc:	de bf       	out	0x3e, r29	; 62
   161ce:	0f be       	out	0x3f, r0	; 63
   161d0:	cd bf       	out	0x3d, r28	; 61
   161d2:	18 db       	rcall	.-2512   	; 0x15804 <SS80_cmd_seek>
   161d4:	89 2b       	or	r24, r25
   161d6:	09 f0       	breq	.+2      	; 0x161da <SS80_locate_and_read+0x8e>
   161d8:	b0 c0       	rjmp	.+352    	; 0x1633a <SS80_locate_and_read+0x1ee>
   161da:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   161de:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   161e2:	43 84       	ldd	r4, Z+11	; 0x0b
   161e4:	54 84       	ldd	r5, Z+12	; 0x0c
   161e6:	65 84       	ldd	r6, Z+13	; 0x0d
   161e8:	76 84       	ldd	r7, Z+14	; 0x0e
   161ea:	1b 82       	std	Y+3, r1	; 0x03
   161ec:	1c 82       	std	Y+4, r1	; 0x04
   161ee:	1d 82       	std	Y+5, r1	; 0x05
   161f0:	1e 82       	std	Y+6, r1	; 0x06
   161f2:	89 ea       	ldi	r24, 0xA9	; 169
   161f4:	98 e2       	ldi	r25, 0x28	; 40
   161f6:	9c 01       	movw	r18, r24
   161f8:	40 e0       	ldi	r20, 0x00	; 0
   161fa:	2f 83       	std	Y+7, r18	; 0x07
   161fc:	38 87       	std	Y+8, r19	; 0x08
   161fe:	49 87       	std	Y+9, r20	; 0x09
   16200:	33 24       	eor	r3, r3
   16202:	33 94       	inc	r3
   16204:	88 e7       	ldi	r24, 0x78	; 120
   16206:	98 e2       	ldi	r25, 0x28	; 40
   16208:	9c 01       	movw	r18, r24
   1620a:	40 e0       	ldi	r20, 0x00	; 0
   1620c:	2a 87       	std	Y+10, r18	; 0x0a
   1620e:	3b 87       	std	Y+11, r19	; 0x0b
   16210:	4c 87       	std	Y+12, r20	; 0x0c
   16212:	34 c0       	rjmp	.+104    	; 0x1627c <SS80_locate_and_read+0x130>
   16214:	86 fd       	sbrc	r24, 6
   16216:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   1621a:	ae 01       	movw	r20, r28
   1621c:	4f 5f       	subi	r20, 0xFF	; 255
   1621e:	5f 4f       	sbci	r21, 0xFF	; 255
   16220:	b6 01       	movw	r22, r12
   16222:	88 ef       	ldi	r24, 0xF8	; 248
   16224:	9c e1       	ldi	r25, 0x1C	; 28
   16226:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   1622a:	8c 01       	movw	r16, r24
   1622c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16230:	86 ff       	sbrs	r24, 6
   16232:	04 c0       	rjmp	.+8      	; 0x1623c <SS80_locate_and_read+0xf0>
   16234:	8c e1       	ldi	r24, 0x1C	; 28
   16236:	90 e1       	ldi	r25, 0x10	; 16
   16238:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   1623c:	c0 16       	cp	r12, r16
   1623e:	d1 06       	cpc	r13, r17
   16240:	09 f0       	breq	.+2      	; 0x16244 <SS80_locate_and_read+0xf8>
   16242:	84 c0       	rjmp	.+264    	; 0x1634c <SS80_locate_and_read+0x200>
   16244:	0d 2c       	mov	r0, r13
   16246:	00 0c       	add	r0, r0
   16248:	ee 08       	sbc	r14, r14
   1624a:	ff 08       	sbc	r15, r15
   1624c:	8c 0c       	add	r8, r12
   1624e:	9d 1c       	adc	r9, r13
   16250:	ae 1c       	adc	r10, r14
   16252:	bf 1c       	adc	r11, r15
   16254:	01 2e       	mov	r0, r17
   16256:	00 0c       	add	r0, r0
   16258:	22 0b       	sbc	r18, r18
   1625a:	33 0b       	sbc	r19, r19
   1625c:	8b 81       	ldd	r24, Y+3	; 0x03
   1625e:	9c 81       	ldd	r25, Y+4	; 0x04
   16260:	ad 81       	ldd	r26, Y+5	; 0x05
   16262:	be 81       	ldd	r27, Y+6	; 0x06
   16264:	80 0f       	add	r24, r16
   16266:	91 1f       	adc	r25, r17
   16268:	a2 1f       	adc	r26, r18
   1626a:	b3 1f       	adc	r27, r19
   1626c:	8b 83       	std	Y+3, r24	; 0x03
   1626e:	9c 83       	std	Y+4, r25	; 0x04
   16270:	ad 83       	std	Y+5, r26	; 0x05
   16272:	be 83       	std	Y+6, r27	; 0x06
   16274:	40 1a       	sub	r4, r16
   16276:	51 0a       	sbc	r5, r17
   16278:	62 0a       	sbc	r6, r18
   1627a:	73 0a       	sbc	r7, r19
   1627c:	41 14       	cp	r4, r1
   1627e:	51 04       	cpc	r5, r1
   16280:	61 04       	cpc	r6, r1
   16282:	71 04       	cpc	r7, r1
   16284:	09 f4       	brne	.+2      	; 0x16288 <SS80_locate_and_read+0x13c>
   16286:	94 c0       	rjmp	.+296    	; 0x163b0 <SS80_locate_and_read+0x264>
   16288:	54 98       	cbi	0x0a, 4	; 10
   1628a:	4c 9b       	sbis	0x09, 4	; 9
   1628c:	7b cf       	rjmp	.-266    	; 0x16184 <SS80_locate_and_read+0x38>
   1628e:	31 e0       	ldi	r19, 0x01	; 1
   16290:	43 16       	cp	r4, r19
   16292:	53 06       	cpc	r5, r19
   16294:	61 04       	cpc	r6, r1
   16296:	71 04       	cpc	r7, r1
   16298:	08 f4       	brcc	.+2      	; 0x1629c <SS80_locate_and_read+0x150>
   1629a:	51 c0       	rjmp	.+162    	; 0x1633e <SS80_locate_and_read+0x1f2>
   1629c:	1a 82       	std	Y+2, r1	; 0x02
   1629e:	19 82       	std	Y+1, r1	; 0x01
   162a0:	c1 2c       	mov	r12, r1
   162a2:	dd 24       	eor	r13, r13
   162a4:	d3 94       	inc	r13
   162a6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162aa:	86 fd       	sbrc	r24, 6
   162ac:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   162b0:	e0 90 7b 19 	lds	r14, 0x197B	; 0x80197b <SS80s>
   162b4:	f0 90 7c 19 	lds	r15, 0x197C	; 0x80197c <SS80s+0x1>
   162b8:	43 e0       	ldi	r20, 0x03	; 3
   162ba:	e4 0e       	add	r14, r20
   162bc:	f1 1c       	adc	r15, r1
   162be:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   162c2:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   162c6:	86 01       	movw	r16, r12
   162c8:	28 ef       	ldi	r18, 0xF8	; 248
   162ca:	3c e1       	ldi	r19, 0x1C	; 28
   162cc:	b5 01       	movw	r22, r10
   162ce:	a4 01       	movw	r20, r8
   162d0:	82 81       	ldd	r24, Z+2	; 0x02
   162d2:	93 81       	ldd	r25, Z+3	; 0x03
   162d4:	0e 94 f9 85 	call	0x10bf2	; 0x10bf2 <dbf_open_read>
   162d8:	8c 01       	movw	r16, r24
   162da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162de:	86 ff       	sbrs	r24, 6
   162e0:	04 c0       	rjmp	.+8      	; 0x162ea <SS80_locate_and_read+0x19e>
   162e2:	82 e1       	ldi	r24, 0x12	; 18
   162e4:	90 e1       	ldi	r25, 0x10	; 16
   162e6:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   162ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162ee:	85 ff       	sbrs	r24, 5
   162f0:	0e c0       	rjmp	.+28     	; 0x1630e <SS80_locate_and_read+0x1c2>
   162f2:	1f 93       	push	r17
   162f4:	0f 93       	push	r16
   162f6:	1f 92       	push	r1
   162f8:	88 85       	ldd	r24, Y+8	; 0x08
   162fa:	8f 93       	push	r24
   162fc:	9f 81       	ldd	r25, Y+7	; 0x07
   162fe:	9f 93       	push	r25
   16300:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16304:	0f 90       	pop	r0
   16306:	0f 90       	pop	r0
   16308:	0f 90       	pop	r0
   1630a:	0f 90       	pop	r0
   1630c:	0f 90       	pop	r0
   1630e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16312:	17 ff       	sbrs	r17, 7
   16314:	7f cf       	rjmp	.-258    	; 0x16214 <SS80_locate_and_read+0xc8>
   16316:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   1631a:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1631e:	91 e0       	ldi	r25, 0x01	; 1
   16320:	92 83       	std	Z+2, r25	; 0x02
   16322:	80 ff       	sbrs	r24, 0
   16324:	0a c0       	rjmp	.+20     	; 0x1633a <SS80_locate_and_read+0x1ee>
   16326:	81 e9       	ldi	r24, 0x91	; 145
   16328:	98 e2       	ldi	r25, 0x28	; 40
   1632a:	1f 92       	push	r1
   1632c:	9f 93       	push	r25
   1632e:	8f 93       	push	r24
   16330:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16334:	0f 90       	pop	r0
   16336:	0f 90       	pop	r0
   16338:	0f 90       	pop	r0
   1633a:	ce de       	rcall	.-612    	; 0x160d8 <SS80_error_return>
   1633c:	6c c0       	rjmp	.+216    	; 0x16416 <SS80_locate_and_read+0x2ca>
   1633e:	62 01       	movw	r12, r4
   16340:	89 81       	ldd	r24, Y+1	; 0x01
   16342:	9a 81       	ldd	r25, Y+2	; 0x02
   16344:	91 60       	ori	r25, 0x01	; 1
   16346:	9a 83       	std	Y+2, r25	; 0x02
   16348:	89 83       	std	Y+1, r24	; 0x01
   1634a:	ad cf       	rjmp	.-166    	; 0x162a6 <SS80_locate_and_read+0x15a>
   1634c:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   16350:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16354:	32 82       	std	Z+2, r3	; 0x02
   16356:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1635a:	80 ff       	sbrs	r24, 0
   1635c:	0a c0       	rjmp	.+20     	; 0x16372 <SS80_locate_and_read+0x226>
   1635e:	1f 92       	push	r1
   16360:	ab 85       	ldd	r26, Y+11	; 0x0b
   16362:	af 93       	push	r26
   16364:	ba 85       	ldd	r27, Y+10	; 0x0a
   16366:	bf 93       	push	r27
   16368:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1636c:	0f 90       	pop	r0
   1636e:	0f 90       	pop	r0
   16370:	0f 90       	pop	r0
   16372:	89 81       	ldd	r24, Y+1	; 0x01
   16374:	9a 81       	ldd	r25, Y+2	; 0x02
   16376:	88 27       	eor	r24, r24
   16378:	90 7d       	andi	r25, 0xD0	; 208
   1637a:	89 2b       	or	r24, r25
   1637c:	09 f4       	brne	.+2      	; 0x16380 <SS80_locate_and_read+0x234>
   1637e:	62 cf       	rjmp	.-316    	; 0x16244 <SS80_locate_and_read+0xf8>
   16380:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   16384:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16388:	83 81       	ldd	r24, Z+3	; 0x03
   1638a:	94 81       	ldd	r25, Z+4	; 0x04
   1638c:	80 62       	ori	r24, 0x20	; 32
   1638e:	94 83       	std	Z+4, r25	; 0x04
   16390:	83 83       	std	Z+3, r24	; 0x03
   16392:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16396:	80 ff       	sbrs	r24, 0
   16398:	23 c0       	rjmp	.+70     	; 0x163e0 <SS80_locate_and_read+0x294>
   1639a:	83 e5       	ldi	r24, 0x53	; 83
   1639c:	98 e2       	ldi	r25, 0x28	; 40
   1639e:	1f 92       	push	r1
   163a0:	9f 93       	push	r25
   163a2:	8f 93       	push	r24
   163a4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   163a8:	0f 90       	pop	r0
   163aa:	0f 90       	pop	r0
   163ac:	0f 90       	pop	r0
   163ae:	18 c0       	rjmp	.+48     	; 0x163e0 <SS80_locate_and_read+0x294>
   163b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   163b4:	85 ff       	sbrs	r24, 5
   163b6:	14 c0       	rjmp	.+40     	; 0x163e0 <SS80_locate_and_read+0x294>
   163b8:	9e 81       	ldd	r25, Y+6	; 0x06
   163ba:	9f 93       	push	r25
   163bc:	ad 81       	ldd	r26, Y+5	; 0x05
   163be:	af 93       	push	r26
   163c0:	bc 81       	ldd	r27, Y+4	; 0x04
   163c2:	bf 93       	push	r27
   163c4:	eb 81       	ldd	r30, Y+3	; 0x03
   163c6:	ef 93       	push	r30
   163c8:	8b e2       	ldi	r24, 0x2B	; 43
   163ca:	98 e2       	ldi	r25, 0x28	; 40
   163cc:	1f 92       	push	r1
   163ce:	9f 93       	push	r25
   163d0:	8f 93       	push	r24
   163d2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   163d6:	0f b6       	in	r0, 0x3f	; 63
   163d8:	f8 94       	cli
   163da:	de bf       	out	0x3e, r29	; 62
   163dc:	0f be       	out	0x3f, r0	; 63
   163de:	cd bf       	out	0x3d, r28	; 61
   163e0:	00 91 7b 19 	lds	r16, 0x197B	; 0x80197b <SS80s>
   163e4:	10 91 7c 19 	lds	r17, 0x197C	; 0x80197c <SS80s+0x1>
   163e8:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   163ec:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   163f0:	20 89       	ldd	r18, Z+16	; 0x10
   163f2:	31 89       	ldd	r19, Z+17	; 0x11
   163f4:	40 e0       	ldi	r20, 0x00	; 0
   163f6:	50 e0       	ldi	r21, 0x00	; 0
   163f8:	c5 01       	movw	r24, r10
   163fa:	b4 01       	movw	r22, r8
   163fc:	0e 94 a7 e3 	call	0x1c74e	; 0x1c74e <__udivmodsi4>
   16400:	d8 01       	movw	r26, r16
   16402:	17 96       	adiw	r26, 0x07	; 7
   16404:	2d 93       	st	X+, r18
   16406:	3d 93       	st	X+, r19
   16408:	4d 93       	st	X+, r20
   1640a:	5c 93       	st	X, r21
   1640c:	1a 97       	sbiw	r26, 0x0a	; 10
   1640e:	89 81       	ldd	r24, Y+1	; 0x01
   16410:	9a 81       	ldd	r25, Y+2	; 0x02
   16412:	88 27       	eor	r24, r24
   16414:	90 7d       	andi	r25, 0xD0	; 208
   16416:	2c 96       	adiw	r28, 0x0c	; 12
   16418:	e1 e1       	ldi	r30, 0x11	; 17
   1641a:	0c 94 46 e4 	jmp	0x1c88c	; 0x1c88c <__epilogue_restores__+0x2>

0001641e <SS80_Execute_State>:
   1641e:	cf 93       	push	r28
   16420:	df 93       	push	r29
   16422:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   16426:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   1642a:	81 81       	ldd	r24, Z+1	; 0x01
   1642c:	90 e0       	ldi	r25, 0x00	; 0
   1642e:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   16432:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   16436:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   1643a:	80 81       	ld	r24, Z
   1643c:	91 81       	ldd	r25, Z+1	; 0x01
   1643e:	82 30       	cpi	r24, 0x02	; 2
   16440:	91 05       	cpc	r25, r1
   16442:	89 f0       	breq	.+34     	; 0x16466 <SS80_Execute_State+0x48>
   16444:	3c f4       	brge	.+14     	; 0x16454 <SS80_Execute_State+0x36>
   16446:	00 97       	sbiw	r24, 0x00	; 0
   16448:	91 f1       	breq	.+100    	; 0x164ae <SS80_Execute_State+0x90>
   1644a:	81 30       	cpi	r24, 0x01	; 1
   1644c:	91 05       	cpc	r25, r1
   1644e:	b9 f4       	brne	.+46     	; 0x1647e <SS80_Execute_State+0x60>
   16450:	7d de       	rcall	.-774    	; 0x1614c <SS80_locate_and_read>
   16452:	0d c0       	rjmp	.+26     	; 0x1646e <SS80_Execute_State+0x50>
   16454:	83 30       	cpi	r24, 0x03	; 3
   16456:	91 05       	cpc	r25, r1
   16458:	41 f0       	breq	.+16     	; 0x1646a <SS80_Execute_State+0x4c>
   1645a:	84 30       	cpi	r24, 0x04	; 4
   1645c:	91 05       	cpc	r25, r1
   1645e:	79 f4       	brne	.+30     	; 0x1647e <SS80_Execute_State+0x60>
   16460:	0e 94 d8 a8 	call	0x151b0	; 0x151b0 <SS80_describe>
   16464:	04 c0       	rjmp	.+8      	; 0x1646e <SS80_Execute_State+0x50>
   16466:	4c da       	rcall	.-2920   	; 0x15900 <SS80_locate_and_write>
   16468:	02 c0       	rjmp	.+4      	; 0x1646e <SS80_Execute_State+0x50>
   1646a:	0e 94 57 a8 	call	0x150ae	; 0x150ae <SS80_send_status>
   1646e:	ec 01       	movw	r28, r24
   16470:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   16474:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   16478:	11 82       	std	Z+1, r1	; 0x01
   1647a:	10 82       	st	Z, r1
   1647c:	1a c0       	rjmp	.+52     	; 0x164b2 <SS80_Execute_State+0x94>
   1647e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16482:	20 ff       	sbrs	r18, 0
   16484:	0e c0       	rjmp	.+28     	; 0x164a2 <SS80_Execute_State+0x84>
   16486:	9f 93       	push	r25
   16488:	8f 93       	push	r24
   1648a:	8f ee       	ldi	r24, 0xEF	; 239
   1648c:	98 e2       	ldi	r25, 0x28	; 40
   1648e:	1f 92       	push	r1
   16490:	9f 93       	push	r25
   16492:	8f 93       	push	r24
   16494:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16498:	0f 90       	pop	r0
   1649a:	0f 90       	pop	r0
   1649c:	0f 90       	pop	r0
   1649e:	0f 90       	pop	r0
   164a0:	0f 90       	pop	r0
   164a2:	e0 91 7b 19 	lds	r30, 0x197B	; 0x80197b <SS80s>
   164a6:	f0 91 7c 19 	lds	r31, 0x197C	; 0x80197c <SS80s+0x1>
   164aa:	11 82       	std	Z+1, r1	; 0x01
   164ac:	10 82       	st	Z, r1
   164ae:	c0 e0       	ldi	r28, 0x00	; 0
   164b0:	d0 e0       	ldi	r29, 0x00	; 0
   164b2:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   164b6:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   164ba:	81 81       	ldd	r24, Z+1	; 0x01
   164bc:	90 e0       	ldi	r25, 0x00	; 0
   164be:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   164c2:	ce 01       	movw	r24, r28
   164c4:	df 91       	pop	r29
   164c6:	cf 91       	pop	r28
   164c8:	08 95       	ret

000164ca <SS80_COMMANDS>:
   164ca:	1f 93       	push	r17
   164cc:	cf 93       	push	r28
   164ce:	df 93       	push	r29
   164d0:	18 2f       	mov	r17, r24
   164d2:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   164d6:	90 e0       	ldi	r25, 0x00	; 0
   164d8:	0e 94 7b 8d 	call	0x11af6	; 0x11af6 <SS80_is_MTA>
   164dc:	89 2b       	or	r24, r25
   164de:	19 f0       	breq	.+6      	; 0x164e6 <SS80_COMMANDS+0x1c>
   164e0:	15 36       	cpi	r17, 0x65	; 101
   164e2:	19 f5       	brne	.+70     	; 0x1652a <SS80_COMMANDS+0x60>
   164e4:	09 c0       	rjmp	.+18     	; 0x164f8 <SS80_COMMANDS+0x2e>
   164e6:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   164ea:	90 e0       	ldi	r25, 0x00	; 0
   164ec:	0e 94 6c 8d 	call	0x11ad8	; 0x11ad8 <SS80_is_MLA>
   164f0:	ec 01       	movw	r28, r24
   164f2:	89 2b       	or	r24, r25
   164f4:	a9 f7       	brne	.-22     	; 0x164e0 <SS80_COMMANDS+0x16>
   164f6:	ae c0       	rjmp	.+348    	; 0x16654 <SS80_COMMANDS+0x18a>
   164f8:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   164fc:	90 e0       	ldi	r25, 0x00	; 0
   164fe:	0e 94 6c 8d 	call	0x11ad8	; 0x11ad8 <SS80_is_MLA>
   16502:	89 2b       	or	r24, r25
   16504:	09 f4       	brne	.+2      	; 0x16508 <SS80_COMMANDS+0x3e>
   16506:	a3 c0       	rjmp	.+326    	; 0x1664e <SS80_COMMANDS+0x184>
   16508:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1650c:	85 ff       	sbrs	r24, 5
   1650e:	0a c0       	rjmp	.+20     	; 0x16524 <SS80_COMMANDS+0x5a>
   16510:	8d eb       	ldi	r24, 0xBD	; 189
   16512:	91 e2       	ldi	r25, 0x21	; 33
   16514:	1f 92       	push	r1
   16516:	9f 93       	push	r25
   16518:	8f 93       	push	r24
   1651a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1651e:	0f 90       	pop	r0
   16520:	0f 90       	pop	r0
   16522:	0f 90       	pop	r0
   16524:	0e 94 8a a9 	call	0x15314	; 0x15314 <SS80_Command_State>
   16528:	73 c0       	rjmp	.+230    	; 0x16610 <SS80_COMMANDS+0x146>
   1652a:	1e 36       	cpi	r17, 0x6E	; 110
   1652c:	01 f5       	brne	.+64     	; 0x1656e <SS80_COMMANDS+0xa4>
   1652e:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   16532:	90 e0       	ldi	r25, 0x00	; 0
   16534:	0e 94 6c 8d 	call	0x11ad8	; 0x11ad8 <SS80_is_MLA>
   16538:	89 2b       	or	r24, r25
   1653a:	79 f0       	breq	.+30     	; 0x1655a <SS80_COMMANDS+0x90>
   1653c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16540:	85 ff       	sbrs	r24, 5
   16542:	13 c0       	rjmp	.+38     	; 0x1656a <SS80_COMMANDS+0xa0>
   16544:	87 ea       	ldi	r24, 0xA7	; 167
   16546:	91 e2       	ldi	r25, 0x21	; 33
   16548:	1f 92       	push	r1
   1654a:	9f 93       	push	r25
   1654c:	8f 93       	push	r24
   1654e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16552:	0f 90       	pop	r0
   16554:	0f 90       	pop	r0
   16556:	0f 90       	pop	r0
   16558:	08 c0       	rjmp	.+16     	; 0x1656a <SS80_COMMANDS+0xa0>
   1655a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   1655e:	90 e0       	ldi	r25, 0x00	; 0
   16560:	0e 94 7b 8d 	call	0x11af6	; 0x11af6 <SS80_is_MTA>
   16564:	89 2b       	or	r24, r25
   16566:	51 f7       	brne	.-44     	; 0x1653c <SS80_COMMANDS+0x72>
   16568:	72 c0       	rjmp	.+228    	; 0x1664e <SS80_COMMANDS+0x184>
   1656a:	59 df       	rcall	.-334    	; 0x1641e <SS80_Execute_State>
   1656c:	51 c0       	rjmp	.+162    	; 0x16610 <SS80_COMMANDS+0x146>
   1656e:	10 37       	cpi	r17, 0x70	; 112
   16570:	b9 f5       	brne	.+110    	; 0x165e0 <SS80_COMMANDS+0x116>
   16572:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   16576:	90 e0       	ldi	r25, 0x00	; 0
   16578:	0e 94 7b 8d 	call	0x11af6	; 0x11af6 <SS80_is_MTA>
   1657c:	89 2b       	or	r24, r25
   1657e:	81 f0       	breq	.+32     	; 0x165a0 <SS80_COMMANDS+0xd6>
   16580:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16584:	85 ff       	sbrs	r24, 5
   16586:	0a c0       	rjmp	.+20     	; 0x1659c <SS80_COMMANDS+0xd2>
   16588:	82 e9       	ldi	r24, 0x92	; 146
   1658a:	91 e2       	ldi	r25, 0x21	; 33
   1658c:	1f 92       	push	r1
   1658e:	9f 93       	push	r25
   16590:	8f 93       	push	r24
   16592:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16596:	0f 90       	pop	r0
   16598:	0f 90       	pop	r0
   1659a:	0f 90       	pop	r0
   1659c:	49 db       	rcall	.-2414   	; 0x15c30 <SS80_Report>
   1659e:	38 c0       	rjmp	.+112    	; 0x16610 <SS80_COMMANDS+0x146>
   165a0:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   165a4:	90 e0       	ldi	r25, 0x00	; 0
   165a6:	0e 94 6c 8d 	call	0x11ad8	; 0x11ad8 <SS80_is_MLA>
   165aa:	89 2b       	or	r24, r25
   165ac:	09 f4       	brne	.+2      	; 0x165b0 <SS80_COMMANDS+0xe6>
   165ae:	4f c0       	rjmp	.+158    	; 0x1664e <SS80_COMMANDS+0x184>
   165b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165b4:	85 ff       	sbrs	r24, 5
   165b6:	0a c0       	rjmp	.+20     	; 0x165cc <SS80_COMMANDS+0x102>
   165b8:	83 e8       	ldi	r24, 0x83	; 131
   165ba:	91 e2       	ldi	r25, 0x21	; 33
   165bc:	1f 92       	push	r1
   165be:	9f 93       	push	r25
   165c0:	8f 93       	push	r24
   165c2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   165c6:	0f 90       	pop	r0
   165c8:	0f 90       	pop	r0
   165ca:	0f 90       	pop	r0
   165cc:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <SS80p>
   165d0:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <SS80p+0x1>
   165d4:	81 81       	ldd	r24, Z+1	; 0x01
   165d6:	90 e0       	ldi	r25, 0x00	; 0
   165d8:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   165dc:	17 dc       	rcall	.-2002   	; 0x15e0c <SS80_Amigo_Clear>
   165de:	18 c0       	rjmp	.+48     	; 0x16610 <SS80_COMMANDS+0x146>
   165e0:	12 37       	cpi	r17, 0x72	; 114
   165e2:	c1 f4       	brne	.+48     	; 0x16614 <SS80_COMMANDS+0x14a>
   165e4:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   165e8:	90 e0       	ldi	r25, 0x00	; 0
   165ea:	0e 94 6c 8d 	call	0x11ad8	; 0x11ad8 <SS80_is_MLA>
   165ee:	89 2b       	or	r24, r25
   165f0:	89 f0       	breq	.+34     	; 0x16614 <SS80_COMMANDS+0x14a>
   165f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165f6:	85 ff       	sbrs	r24, 5
   165f8:	0a c0       	rjmp	.+20     	; 0x1660e <SS80_COMMANDS+0x144>
   165fa:	8f e6       	ldi	r24, 0x6F	; 111
   165fc:	91 e2       	ldi	r25, 0x21	; 33
   165fe:	1f 92       	push	r1
   16600:	9f 93       	push	r25
   16602:	8f 93       	push	r24
   16604:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16608:	0f 90       	pop	r0
   1660a:	0f 90       	pop	r0
   1660c:	0f 90       	pop	r0
   1660e:	52 dc       	rcall	.-1884   	; 0x15eb4 <SS80_Transparent_State>
   16610:	ec 01       	movw	r28, r24
   16612:	3d c0       	rjmp	.+122    	; 0x1668e <SS80_COMMANDS+0x1c4>
   16614:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16618:	80 ff       	sbrs	r24, 0
   1661a:	19 c0       	rjmp	.+50     	; 0x1664e <SS80_COMMANDS+0x184>
   1661c:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   16620:	1f 92       	push	r1
   16622:	8f 93       	push	r24
   16624:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   16628:	1f 92       	push	r1
   1662a:	8f 93       	push	r24
   1662c:	1f 92       	push	r1
   1662e:	1f 93       	push	r17
   16630:	8b e3       	ldi	r24, 0x3B	; 59
   16632:	91 e2       	ldi	r25, 0x21	; 33
   16634:	1f 92       	push	r1
   16636:	9f 93       	push	r25
   16638:	8f 93       	push	r24
   1663a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1663e:	8d b7       	in	r24, 0x3d	; 61
   16640:	9e b7       	in	r25, 0x3e	; 62
   16642:	09 96       	adiw	r24, 0x09	; 9
   16644:	0f b6       	in	r0, 0x3f	; 63
   16646:	f8 94       	cli
   16648:	9e bf       	out	0x3e, r25	; 62
   1664a:	0f be       	out	0x3f, r0	; 63
   1664c:	8d bf       	out	0x3d, r24	; 61
   1664e:	c0 e0       	ldi	r28, 0x00	; 0
   16650:	d0 e0       	ldi	r29, 0x00	; 0
   16652:	1d c0       	rjmp	.+58     	; 0x1668e <SS80_COMMANDS+0x1c4>
   16654:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16658:	80 ff       	sbrs	r24, 0
   1665a:	f9 cf       	rjmp	.-14     	; 0x1664e <SS80_COMMANDS+0x184>
   1665c:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   16660:	1f 92       	push	r1
   16662:	8f 93       	push	r24
   16664:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   16668:	1f 92       	push	r1
   1666a:	8f 93       	push	r24
   1666c:	1f 92       	push	r1
   1666e:	1f 93       	push	r17
   16670:	87 e0       	ldi	r24, 0x07	; 7
   16672:	91 e2       	ldi	r25, 0x21	; 33
   16674:	1f 92       	push	r1
   16676:	9f 93       	push	r25
   16678:	8f 93       	push	r24
   1667a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1667e:	8d b7       	in	r24, 0x3d	; 61
   16680:	9e b7       	in	r25, 0x3e	; 62
   16682:	09 96       	adiw	r24, 0x09	; 9
   16684:	0f b6       	in	r0, 0x3f	; 63
   16686:	f8 94       	cli
   16688:	9e bf       	out	0x3e, r25	; 62
   1668a:	0f be       	out	0x3f, r0	; 63
   1668c:	8d bf       	out	0x3d, r24	; 61
   1668e:	ce 01       	movw	r24, r28
   16690:	df 91       	pop	r29
   16692:	cf 91       	pop	r28
   16694:	1f 91       	pop	r17
   16696:	08 95       	ret

00016698 <amigo_overflow_check>:
   16698:	cf 92       	push	r12
   1669a:	df 92       	push	r13
   1669c:	ef 92       	push	r14
   1669e:	0f 93       	push	r16
   166a0:	1f 93       	push	r17
   166a2:	cf 93       	push	r28
   166a4:	df 93       	push	r29
   166a6:	ec 01       	movw	r28, r24
   166a8:	8b 01       	movw	r16, r22
   166aa:	80 e0       	ldi	r24, 0x00	; 0
   166ac:	90 e0       	ldi	r25, 0x00	; 0
   166ae:	2e ed       	ldi	r18, 0xDE	; 222
   166b0:	30 e3       	ldi	r19, 0x30	; 48
   166b2:	69 01       	movw	r12, r18
   166b4:	2d 81       	ldd	r18, Y+5	; 0x05
   166b6:	30 e0       	ldi	r19, 0x00	; 0
   166b8:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   166bc:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   166c0:	40 85       	ldd	r20, Z+8	; 0x08
   166c2:	51 85       	ldd	r21, Z+9	; 0x09
   166c4:	24 17       	cp	r18, r20
   166c6:	35 07       	cpc	r19, r21
   166c8:	7c f1       	brlt	.+94     	; 0x16728 <amigo_overflow_check+0x90>
   166ca:	1d 82       	std	Y+5, r1	; 0x05
   166cc:	2c 81       	ldd	r18, Y+4	; 0x04
   166ce:	2f 5f       	subi	r18, 0xFF	; 255
   166d0:	2c 83       	std	Y+4, r18	; 0x04
   166d2:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   166d6:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   166da:	2c 81       	ldd	r18, Y+4	; 0x04
   166dc:	30 e0       	ldi	r19, 0x00	; 0
   166de:	42 85       	ldd	r20, Z+10	; 0x0a
   166e0:	53 85       	ldd	r21, Z+11	; 0x0b
   166e2:	24 17       	cp	r18, r20
   166e4:	35 07       	cpc	r19, r21
   166e6:	34 f3       	brlt	.-52     	; 0x166b4 <amigo_overflow_check+0x1c>
   166e8:	1c 82       	std	Y+4, r1	; 0x04
   166ea:	2b 81       	ldd	r18, Y+3	; 0x03
   166ec:	2f 5f       	subi	r18, 0xFF	; 255
   166ee:	2b 83       	std	Y+3, r18	; 0x03
   166f0:	30 e0       	ldi	r19, 0x00	; 0
   166f2:	44 85       	ldd	r20, Z+12	; 0x0c
   166f4:	55 85       	ldd	r21, Z+13	; 0x0d
   166f6:	24 17       	cp	r18, r20
   166f8:	35 07       	cpc	r19, r21
   166fa:	5c f3       	brlt	.-42     	; 0x166d2 <amigo_overflow_check+0x3a>
   166fc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16700:	80 ff       	sbrs	r24, 0
   16702:	0f c0       	rjmp	.+30     	; 0x16722 <amigo_overflow_check+0x8a>
   16704:	01 15       	cp	r16, r1
   16706:	11 05       	cpc	r17, r1
   16708:	61 f0       	breq	.+24     	; 0x16722 <amigo_overflow_check+0x8a>
   1670a:	1f 93       	push	r17
   1670c:	0f 93       	push	r16
   1670e:	1f 92       	push	r1
   16710:	df 92       	push	r13
   16712:	cf 92       	push	r12
   16714:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16718:	0f 90       	pop	r0
   1671a:	0f 90       	pop	r0
   1671c:	0f 90       	pop	r0
   1671e:	0f 90       	pop	r0
   16720:	0f 90       	pop	r0
   16722:	81 e0       	ldi	r24, 0x01	; 1
   16724:	90 e0       	ldi	r25, 0x00	; 0
   16726:	d5 cf       	rjmp	.-86     	; 0x166d2 <amigo_overflow_check+0x3a>
   16728:	df 91       	pop	r29
   1672a:	cf 91       	pop	r28
   1672c:	1f 91       	pop	r17
   1672e:	0f 91       	pop	r16
   16730:	ef 90       	pop	r14
   16732:	df 90       	pop	r13
   16734:	cf 90       	pop	r12
   16736:	08 95       	ret

00016738 <amigo_chs_to_logical>:
   16738:	a0 e0       	ldi	r26, 0x00	; 0
   1673a:	b0 e0       	ldi	r27, 0x00	; 0
   1673c:	e2 ea       	ldi	r30, 0xA2	; 162
   1673e:	f3 eb       	ldi	r31, 0xB3	; 179
   16740:	0c 94 32 e4 	jmp	0x1c864	; 0x1c864 <__prologue_saves__+0x12>
   16744:	dc 01       	movw	r26, r24
   16746:	d6 2f       	mov	r29, r22
   16748:	17 2f       	mov	r17, r23
   1674a:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1674e:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16752:	80 85       	ldd	r24, Z+8	; 0x08
   16754:	91 85       	ldd	r25, Z+9	; 0x09
   16756:	14 96       	adiw	r26, 0x04	; 4
   16758:	cc 91       	ld	r28, X
   1675a:	14 97       	sbiw	r26, 0x04	; 4
   1675c:	c8 9f       	mul	r28, r24
   1675e:	90 01       	movw	r18, r0
   16760:	c9 9f       	mul	r28, r25
   16762:	30 0d       	add	r19, r0
   16764:	11 24       	eor	r1, r1
   16766:	a9 01       	movw	r20, r18
   16768:	33 0f       	add	r19, r19
   1676a:	66 0b       	sbc	r22, r22
   1676c:	77 0b       	sbc	r23, r23
   1676e:	13 96       	adiw	r26, 0x03	; 3
   16770:	0c 91       	ld	r16, X
   16772:	13 97       	sbiw	r26, 0x03	; 3
   16774:	22 85       	ldd	r18, Z+10	; 0x0a
   16776:	33 85       	ldd	r19, Z+11	; 0x0b
   16778:	82 9f       	mul	r24, r18
   1677a:	70 01       	movw	r14, r0
   1677c:	83 9f       	mul	r24, r19
   1677e:	f0 0c       	add	r15, r0
   16780:	92 9f       	mul	r25, r18
   16782:	f0 0c       	add	r15, r0
   16784:	11 24       	eor	r1, r1
   16786:	0e 9d       	mul	r16, r14
   16788:	90 01       	movw	r18, r0
   1678a:	0f 9d       	mul	r16, r15
   1678c:	30 0d       	add	r19, r0
   1678e:	11 24       	eor	r1, r1
   16790:	69 01       	movw	r12, r18
   16792:	33 0f       	add	r19, r19
   16794:	ee 08       	sbc	r14, r14
   16796:	ff 08       	sbc	r15, r15
   16798:	4c 0d       	add	r20, r12
   1679a:	5d 1d       	adc	r21, r13
   1679c:	6e 1d       	adc	r22, r14
   1679e:	7f 1d       	adc	r23, r15
   167a0:	15 96       	adiw	r26, 0x05	; 5
   167a2:	bc 90       	ld	r11, X
   167a4:	9a 01       	movw	r18, r20
   167a6:	ab 01       	movw	r20, r22
   167a8:	2b 0d       	add	r18, r11
   167aa:	31 1d       	adc	r19, r1
   167ac:	41 1d       	adc	r20, r1
   167ae:	51 1d       	adc	r21, r1
   167b0:	a6 81       	ldd	r26, Z+6	; 0x06
   167b2:	b7 81       	ldd	r27, Z+7	; 0x07
   167b4:	0e 94 13 e4 	call	0x1c826	; 0x1c826 <__mulshisi3>
   167b8:	6b 01       	movw	r12, r22
   167ba:	7c 01       	movw	r14, r24
   167bc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167c0:	85 ff       	sbrs	r24, 5
   167c2:	22 c0       	rjmp	.+68     	; 0x16808 <amigo_chs_to_logical+0xd0>
   167c4:	1f 92       	push	r1
   167c6:	bf 92       	push	r11
   167c8:	1f 92       	push	r1
   167ca:	cf 93       	push	r28
   167cc:	1f 92       	push	r1
   167ce:	0f 93       	push	r16
   167d0:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   167d4:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   167d8:	81 81       	ldd	r24, Z+1	; 0x01
   167da:	1f 92       	push	r1
   167dc:	8f 93       	push	r24
   167de:	ff 92       	push	r15
   167e0:	ef 92       	push	r14
   167e2:	df 92       	push	r13
   167e4:	cf 92       	push	r12
   167e6:	1f 93       	push	r17
   167e8:	df 93       	push	r29
   167ea:	8b e8       	ldi	r24, 0x8B	; 139
   167ec:	90 e3       	ldi	r25, 0x30	; 48
   167ee:	1f 92       	push	r1
   167f0:	9f 93       	push	r25
   167f2:	8f 93       	push	r24
   167f4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   167f8:	8d b7       	in	r24, 0x3d	; 61
   167fa:	9e b7       	in	r25, 0x3e	; 62
   167fc:	41 96       	adiw	r24, 0x11	; 17
   167fe:	0f b6       	in	r0, 0x3f	; 63
   16800:	f8 94       	cli
   16802:	9e bf       	out	0x3e, r25	; 62
   16804:	0f be       	out	0x3f, r0	; 63
   16806:	8d bf       	out	0x3d, r24	; 61
   16808:	b6 01       	movw	r22, r12
   1680a:	c7 01       	movw	r24, r14
   1680c:	cd b7       	in	r28, 0x3d	; 61
   1680e:	de b7       	in	r29, 0x3e	; 62
   16810:	e9 e0       	ldi	r30, 0x09	; 9
   16812:	0c 94 4e e4 	jmp	0x1c89c	; 0x1c89c <__epilogue_restores__+0x12>

00016816 <amigo_init>:
   16816:	ef 92       	push	r14
   16818:	ff 92       	push	r15
   1681a:	0f 93       	push	r16
   1681c:	1f 93       	push	r17
   1681e:	cf 93       	push	r28
   16820:	df 93       	push	r29
   16822:	0b ed       	ldi	r16, 0xDB	; 219
   16824:	10 e2       	ldi	r17, 0x20	; 32
   16826:	cb e0       	ldi	r28, 0x0B	; 11
   16828:	d0 e0       	ldi	r29, 0x00	; 0
   1682a:	84 e0       	ldi	r24, 0x04	; 4
   1682c:	f8 2e       	mov	r15, r24
   1682e:	92 e0       	ldi	r25, 0x02	; 2
   16830:	e9 2e       	mov	r14, r25
   16832:	d8 01       	movw	r26, r16
   16834:	8c 91       	ld	r24, X
   16836:	81 30       	cpi	r24, 0x01	; 1
   16838:	31 f5       	brne	.+76     	; 0x16886 <amigo_init+0x70>
   1683a:	ce 01       	movw	r24, r28
   1683c:	0e 94 26 94 	call	0x1284c	; 0x1284c <set_active_device>
   16840:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16844:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16848:	10 82       	st	Z, r1
   1684a:	9f 01       	movw	r18, r30
   1684c:	27 5f       	subi	r18, 0xF7	; 247
   1684e:	3f 4f       	sbci	r19, 0xFF	; 255
   16850:	d9 01       	movw	r26, r18
   16852:	8f 2d       	mov	r24, r15
   16854:	1d 92       	st	X+, r1
   16856:	8a 95       	dec	r24
   16858:	e9 f7       	brne	.-6      	; 0x16854 <amigo_init+0x3e>
   1685a:	2c 5f       	subi	r18, 0xFC	; 252
   1685c:	3f 4f       	sbci	r19, 0xFF	; 255
   1685e:	d9 01       	movw	r26, r18
   16860:	8f 2d       	mov	r24, r15
   16862:	1d 92       	st	X+, r1
   16864:	8a 95       	dec	r24
   16866:	e9 f7       	brne	.-6      	; 0x16862 <amigo_init+0x4c>
   16868:	11 82       	std	Z+1, r1	; 0x01
   1686a:	15 82       	std	Z+5, r1	; 0x05
   1686c:	14 82       	std	Z+4, r1	; 0x04
   1686e:	13 82       	std	Z+3, r1	; 0x03
   16870:	e6 82       	std	Z+6, r14	; 0x06
   16872:	10 86       	std	Z+8, r1	; 0x08
   16874:	17 82       	std	Z+7, r1	; 0x07
   16876:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1687a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   1687e:	81 81       	ldd	r24, Z+1	; 0x01
   16880:	90 e0       	ldi	r25, 0x00	; 0
   16882:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
   16886:	21 97       	sbiw	r28, 0x01	; 1
   16888:	0b 52       	subi	r16, 0x2B	; 43
   1688a:	11 09       	sbc	r17, r1
   1688c:	cf 3f       	cpi	r28, 0xFF	; 255
   1688e:	af ef       	ldi	r26, 0xFF	; 255
   16890:	da 07       	cpc	r29, r26
   16892:	79 f6       	brne	.-98     	; 0x16832 <amigo_init+0x1c>
   16894:	cd b7       	in	r28, 0x3d	; 61
   16896:	de b7       	in	r29, 0x3e	; 62
   16898:	e6 e0       	ldi	r30, 0x06	; 6
   1689a:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

0001689e <amigo_request_logical_address>:
   1689e:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   168a2:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   168a6:	15 86       	std	Z+13, r1	; 0x0d
   168a8:	83 81       	ldd	r24, Z+3	; 0x03
   168aa:	86 87       	std	Z+14, r24	; 0x0e
   168ac:	84 81       	ldd	r24, Z+4	; 0x04
   168ae:	87 87       	std	Z+15, r24	; 0x0f
   168b0:	85 81       	ldd	r24, Z+5	; 0x05
   168b2:	80 8b       	std	Z+16, r24	; 0x10
   168b4:	80 e0       	ldi	r24, 0x00	; 0
   168b6:	90 e0       	ldi	r25, 0x00	; 0
   168b8:	08 95       	ret

000168ba <amigo_request_status>:
   168ba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168be:	85 ff       	sbrs	r24, 5
   168c0:	0a c0       	rjmp	.+20     	; 0x168d6 <amigo_request_status+0x1c>
   168c2:	8e e5       	ldi	r24, 0x5E	; 94
   168c4:	91 e3       	ldi	r25, 0x31	; 49
   168c6:	1f 92       	push	r1
   168c8:	9f 93       	push	r25
   168ca:	8f 93       	push	r24
   168cc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   168d0:	0f 90       	pop	r0
   168d2:	0f 90       	pop	r0
   168d4:	0f 90       	pop	r0
   168d6:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   168da:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   168de:	11 86       	std	Z+9, r1	; 0x09
   168e0:	81 81       	ldd	r24, Z+1	; 0x01
   168e2:	82 87       	std	Z+10, r24	; 0x0a
   168e4:	8d e0       	ldi	r24, 0x0D	; 13
   168e6:	83 87       	std	Z+11, r24	; 0x0b
   168e8:	14 86       	std	Z+12, r1	; 0x0c
   168ea:	0e 94 08 72 	call	0xe410	; 0xe410 <mmc_wp_status>
   168ee:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   168f2:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   168f6:	89 2b       	or	r24, r25
   168f8:	19 f0       	breq	.+6      	; 0x16900 <amigo_request_status+0x46>
   168fa:	84 85       	ldd	r24, Z+12	; 0x0c
   168fc:	80 66       	ori	r24, 0x60	; 96
   168fe:	84 87       	std	Z+12, r24	; 0x0c
   16900:	86 81       	ldd	r24, Z+6	; 0x06
   16902:	82 30       	cpi	r24, 0x02	; 2
   16904:	31 f4       	brne	.+12     	; 0x16912 <amigo_request_status+0x58>
   16906:	83 e1       	ldi	r24, 0x13	; 19
   16908:	81 87       	std	Z+9, r24	; 0x09
   1690a:	84 85       	ldd	r24, Z+12	; 0x0c
   1690c:	88 60       	ori	r24, 0x08	; 8
   1690e:	84 87       	std	Z+12, r24	; 0x0c
   16910:	21 c0       	rjmp	.+66     	; 0x16954 <amigo_request_status+0x9a>
   16912:	27 81       	ldd	r18, Z+7	; 0x07
   16914:	30 85       	ldd	r19, Z+8	; 0x08
   16916:	21 15       	cp	r18, r1
   16918:	31 05       	cpc	r19, r1
   1691a:	11 f4       	brne	.+4      	; 0x16920 <amigo_request_status+0x66>
   1691c:	81 30       	cpi	r24, 0x01	; 1
   1691e:	d1 f4       	brne	.+52     	; 0x16954 <amigo_request_status+0x9a>
   16920:	26 fd       	sbrc	r18, 6
   16922:	0c c0       	rjmp	.+24     	; 0x1693c <amigo_request_status+0x82>
   16924:	25 ff       	sbrs	r18, 5
   16926:	03 c0       	rjmp	.+6      	; 0x1692e <amigo_request_status+0x74>
   16928:	8a e0       	ldi	r24, 0x0A	; 10
   1692a:	81 87       	std	Z+9, r24	; 0x09
   1692c:	0d c0       	rjmp	.+26     	; 0x16948 <amigo_request_status+0x8e>
   1692e:	84 85       	ldd	r24, Z+12	; 0x0c
   16930:	24 ff       	sbrs	r18, 4
   16932:	02 c0       	rjmp	.+4      	; 0x16938 <amigo_request_status+0x7e>
   16934:	83 60       	ori	r24, 0x03	; 3
   16936:	07 c0       	rjmp	.+14     	; 0x16946 <amigo_request_status+0x8c>
   16938:	21 ff       	sbrs	r18, 1
   1693a:	02 c0       	rjmp	.+4      	; 0x16940 <amigo_request_status+0x86>
   1693c:	83 e1       	ldi	r24, 0x13	; 19
   1693e:	f5 cf       	rjmp	.-22     	; 0x1692a <amigo_request_status+0x70>
   16940:	22 ff       	sbrs	r18, 2
   16942:	02 c0       	rjmp	.+4      	; 0x16948 <amigo_request_status+0x8e>
   16944:	84 60       	ori	r24, 0x04	; 4
   16946:	84 87       	std	Z+12, r24	; 0x0c
   16948:	84 85       	ldd	r24, Z+12	; 0x0c
   1694a:	80 61       	ori	r24, 0x10	; 16
   1694c:	84 87       	std	Z+12, r24	; 0x0c
   1694e:	83 85       	ldd	r24, Z+11	; 0x0b
   16950:	80 68       	ori	r24, 0x80	; 128
   16952:	83 87       	std	Z+11, r24	; 0x0b
   16954:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16958:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   1695c:	81 81       	ldd	r24, Z+1	; 0x01
   1695e:	90 e0       	ldi	r25, 0x00	; 0
   16960:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16964:	80 e0       	ldi	r24, 0x00	; 0
   16966:	90 e0       	ldi	r25, 0x00	; 0
   16968:	08 95       	ret

0001696a <amigo_send_logical_address>:
   1696a:	a2 e0       	ldi	r26, 0x02	; 2
   1696c:	b0 e0       	ldi	r27, 0x00	; 0
   1696e:	eb eb       	ldi	r30, 0xBB	; 187
   16970:	f4 eb       	ldi	r31, 0xB4	; 180
   16972:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   16976:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1697a:	85 ff       	sbrs	r24, 5
   1697c:	0a c0       	rjmp	.+20     	; 0x16992 <amigo_send_logical_address+0x28>
   1697e:	80 e4       	ldi	r24, 0x40	; 64
   16980:	91 e3       	ldi	r25, 0x31	; 49
   16982:	1f 92       	push	r1
   16984:	9f 93       	push	r25
   16986:	8f 93       	push	r24
   16988:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1698c:	0f 90       	pop	r0
   1698e:	0f 90       	pop	r0
   16990:	0f 90       	pop	r0
   16992:	80 e0       	ldi	r24, 0x00	; 0
   16994:	91 e0       	ldi	r25, 0x01	; 1
   16996:	9a 83       	std	Y+2, r25	; 0x02
   16998:	89 83       	std	Y+1, r24	; 0x01
   1699a:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   1699e:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   169a2:	ae 01       	movw	r20, r28
   169a4:	4f 5f       	subi	r20, 0xFF	; 255
   169a6:	5f 4f       	sbci	r21, 0xFF	; 255
   169a8:	64 e0       	ldi	r22, 0x04	; 4
   169aa:	70 e0       	ldi	r23, 0x00	; 0
   169ac:	0d 96       	adiw	r24, 0x0d	; 13
   169ae:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   169b2:	29 81       	ldd	r18, Y+1	; 0x01
   169b4:	3a 81       	ldd	r19, Y+2	; 0x02
   169b6:	22 27       	eor	r18, r18
   169b8:	30 7d       	andi	r19, 0xD0	; 208
   169ba:	23 2b       	or	r18, r19
   169bc:	49 f0       	breq	.+18     	; 0x169d0 <amigo_send_logical_address+0x66>
   169be:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   169c2:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   169c6:	27 81       	ldd	r18, Z+7	; 0x07
   169c8:	30 85       	ldd	r19, Z+8	; 0x08
   169ca:	20 62       	ori	r18, 0x20	; 32
   169cc:	30 87       	std	Z+8, r19	; 0x08
   169ce:	27 83       	std	Z+7, r18	; 0x07
   169d0:	04 97       	sbiw	r24, 0x04	; 4
   169d2:	c9 f0       	breq	.+50     	; 0x16a06 <amigo_send_logical_address+0x9c>
   169d4:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   169d8:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   169dc:	87 81       	ldd	r24, Z+7	; 0x07
   169de:	90 85       	ldd	r25, Z+8	; 0x08
   169e0:	80 62       	ori	r24, 0x20	; 32
   169e2:	90 87       	std	Z+8, r25	; 0x08
   169e4:	87 83       	std	Z+7, r24	; 0x07
   169e6:	81 e0       	ldi	r24, 0x01	; 1
   169e8:	86 83       	std	Z+6, r24	; 0x06
   169ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169ee:	80 ff       	sbrs	r24, 0
   169f0:	0a c0       	rjmp	.+20     	; 0x16a06 <amigo_send_logical_address+0x9c>
   169f2:	86 e2       	ldi	r24, 0x26	; 38
   169f4:	91 e3       	ldi	r25, 0x31	; 49
   169f6:	1f 92       	push	r1
   169f8:	9f 93       	push	r25
   169fa:	8f 93       	push	r24
   169fc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16a00:	0f 90       	pop	r0
   16a02:	0f 90       	pop	r0
   16a04:	0f 90       	pop	r0
   16a06:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16a0a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16a0e:	81 81       	ldd	r24, Z+1	; 0x01
   16a10:	90 e0       	ldi	r25, 0x00	; 0
   16a12:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16a16:	89 81       	ldd	r24, Y+1	; 0x01
   16a18:	9a 81       	ldd	r25, Y+2	; 0x02
   16a1a:	88 27       	eor	r24, r24
   16a1c:	90 7d       	andi	r25, 0xD0	; 208
   16a1e:	22 96       	adiw	r28, 0x02	; 2
   16a20:	e2 e0       	ldi	r30, 0x02	; 2
   16a22:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00016a26 <amigo_send_status>:
   16a26:	a2 e0       	ldi	r26, 0x02	; 2
   16a28:	b0 e0       	ldi	r27, 0x00	; 0
   16a2a:	e9 e1       	ldi	r30, 0x19	; 25
   16a2c:	f5 eb       	ldi	r31, 0xB5	; 181
   16a2e:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   16a32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16a36:	85 ff       	sbrs	r24, 5
   16a38:	0a c0       	rjmp	.+20     	; 0x16a4e <amigo_send_status+0x28>
   16a3a:	81 e1       	ldi	r24, 0x11	; 17
   16a3c:	91 e3       	ldi	r25, 0x31	; 49
   16a3e:	1f 92       	push	r1
   16a40:	9f 93       	push	r25
   16a42:	8f 93       	push	r24
   16a44:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16a48:	0f 90       	pop	r0
   16a4a:	0f 90       	pop	r0
   16a4c:	0f 90       	pop	r0
   16a4e:	80 e0       	ldi	r24, 0x00	; 0
   16a50:	91 e0       	ldi	r25, 0x01	; 1
   16a52:	9a 83       	std	Y+2, r25	; 0x02
   16a54:	89 83       	std	Y+1, r24	; 0x01
   16a56:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   16a5a:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   16a5e:	ae 01       	movw	r20, r28
   16a60:	4f 5f       	subi	r20, 0xFF	; 255
   16a62:	5f 4f       	sbci	r21, 0xFF	; 255
   16a64:	64 e0       	ldi	r22, 0x04	; 4
   16a66:	70 e0       	ldi	r23, 0x00	; 0
   16a68:	09 96       	adiw	r24, 0x09	; 9
   16a6a:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   16a6e:	29 81       	ldd	r18, Y+1	; 0x01
   16a70:	3a 81       	ldd	r19, Y+2	; 0x02
   16a72:	22 27       	eor	r18, r18
   16a74:	30 7d       	andi	r19, 0xD0	; 208
   16a76:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16a7a:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16a7e:	23 2b       	or	r18, r19
   16a80:	29 f0       	breq	.+10     	; 0x16a8c <amigo_send_status+0x66>
   16a82:	27 81       	ldd	r18, Z+7	; 0x07
   16a84:	30 85       	ldd	r19, Z+8	; 0x08
   16a86:	20 62       	ori	r18, 0x20	; 32
   16a88:	30 87       	std	Z+8, r19	; 0x08
   16a8a:	27 83       	std	Z+7, r18	; 0x07
   16a8c:	04 97       	sbiw	r24, 0x04	; 4
   16a8e:	b1 f0       	breq	.+44     	; 0x16abc <amigo_send_status+0x96>
   16a90:	87 81       	ldd	r24, Z+7	; 0x07
   16a92:	90 85       	ldd	r25, Z+8	; 0x08
   16a94:	80 62       	ori	r24, 0x20	; 32
   16a96:	90 87       	std	Z+8, r25	; 0x08
   16a98:	87 83       	std	Z+7, r24	; 0x07
   16a9a:	81 e0       	ldi	r24, 0x01	; 1
   16a9c:	86 83       	std	Z+6, r24	; 0x06
   16a9e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16aa2:	80 ff       	sbrs	r24, 0
   16aa4:	0e c0       	rjmp	.+28     	; 0x16ac2 <amigo_send_status+0x9c>
   16aa6:	87 ef       	ldi	r24, 0xF7	; 247
   16aa8:	90 e3       	ldi	r25, 0x30	; 48
   16aaa:	1f 92       	push	r1
   16aac:	9f 93       	push	r25
   16aae:	8f 93       	push	r24
   16ab0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16ab4:	0f 90       	pop	r0
   16ab6:	0f 90       	pop	r0
   16ab8:	0f 90       	pop	r0
   16aba:	03 c0       	rjmp	.+6      	; 0x16ac2 <amigo_send_status+0x9c>
   16abc:	10 86       	std	Z+8, r1	; 0x08
   16abe:	17 82       	std	Z+7, r1	; 0x07
   16ac0:	16 82       	std	Z+6, r1	; 0x06
   16ac2:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16ac6:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16aca:	81 81       	ldd	r24, Z+1	; 0x01
   16acc:	90 e0       	ldi	r25, 0x00	; 0
   16ace:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16ad2:	89 81       	ldd	r24, Y+1	; 0x01
   16ad4:	9a 81       	ldd	r25, Y+2	; 0x02
   16ad6:	88 27       	eor	r24, r24
   16ad8:	90 7d       	andi	r25, 0xD0	; 208
   16ada:	22 96       	adiw	r28, 0x02	; 2
   16adc:	e2 e0       	ldi	r30, 0x02	; 2
   16ade:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00016ae2 <amigo_increment>:
   16ae2:	a1 e1       	ldi	r26, 0x11	; 17
   16ae4:	b0 e0       	ldi	r27, 0x00	; 0
   16ae6:	e7 e7       	ldi	r30, 0x77	; 119
   16ae8:	f5 eb       	ldi	r31, 0xB5	; 181
   16aea:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   16aee:	bc 01       	movw	r22, r24
   16af0:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16af4:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16af8:	91 e1       	ldi	r25, 0x11	; 17
   16afa:	de 01       	movw	r26, r28
   16afc:	11 96       	adiw	r26, 0x01	; 1
   16afe:	01 90       	ld	r0, Z+
   16b00:	0d 92       	st	X+, r0
   16b02:	9a 95       	dec	r25
   16b04:	e1 f7       	brne	.-8      	; 0x16afe <amigo_increment+0x1c>
   16b06:	9e 81       	ldd	r25, Y+6	; 0x06
   16b08:	9f 5f       	subi	r25, 0xFF	; 255
   16b0a:	9e 83       	std	Y+6, r25	; 0x06
   16b0c:	ce 01       	movw	r24, r28
   16b0e:	01 96       	adiw	r24, 0x01	; 1
   16b10:	c3 dd       	rcall	.-1146   	; 0x16698 <amigo_overflow_check>
   16b12:	00 97       	sbiw	r24, 0x00	; 0
   16b14:	59 f4       	brne	.+22     	; 0x16b2c <amigo_increment+0x4a>
   16b16:	a0 91 77 19 	lds	r26, 0x1977	; 0x801977 <AMIGOs>
   16b1a:	b0 91 78 19 	lds	r27, 0x1978	; 0x801978 <AMIGOs+0x1>
   16b1e:	21 e1       	ldi	r18, 0x11	; 17
   16b20:	fe 01       	movw	r30, r28
   16b22:	31 96       	adiw	r30, 0x01	; 1
   16b24:	01 90       	ld	r0, Z+
   16b26:	0d 92       	st	X+, r0
   16b28:	2a 95       	dec	r18
   16b2a:	e1 f7       	brne	.-8      	; 0x16b24 <amigo_increment+0x42>
   16b2c:	61 96       	adiw	r28, 0x11	; 17
   16b2e:	e2 e0       	ldi	r30, 0x02	; 2
   16b30:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00016b34 <amigo_seek>:
   16b34:	0f 93       	push	r16
   16b36:	1f 93       	push	r17
   16b38:	cf 93       	push	r28
   16b3a:	df 93       	push	r29
   16b3c:	ec 01       	movw	r28, r24
   16b3e:	68 ef       	ldi	r22, 0xF8	; 248
   16b40:	74 e1       	ldi	r23, 0x14	; 20
   16b42:	aa dd       	rcall	.-1196   	; 0x16698 <amigo_overflow_check>
   16b44:	8c 01       	movw	r16, r24
   16b46:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16b4a:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16b4e:	89 2b       	or	r24, r25
   16b50:	41 f0       	breq	.+16     	; 0x16b62 <amigo_seek+0x2e>
   16b52:	81 e0       	ldi	r24, 0x01	; 1
   16b54:	86 83       	std	Z+6, r24	; 0x06
   16b56:	87 81       	ldd	r24, Z+7	; 0x07
   16b58:	90 85       	ldd	r25, Z+8	; 0x08
   16b5a:	84 60       	ori	r24, 0x04	; 4
   16b5c:	90 87       	std	Z+8, r25	; 0x08
   16b5e:	87 83       	std	Z+7, r24	; 0x07
   16b60:	06 c0       	rjmp	.+12     	; 0x16b6e <amigo_seek+0x3a>
   16b62:	8d 81       	ldd	r24, Y+5	; 0x05
   16b64:	85 83       	std	Z+5, r24	; 0x05
   16b66:	8c 81       	ldd	r24, Y+4	; 0x04
   16b68:	84 83       	std	Z+4, r24	; 0x04
   16b6a:	8b 81       	ldd	r24, Y+3	; 0x03
   16b6c:	83 83       	std	Z+3, r24	; 0x03
   16b6e:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16b72:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16b76:	81 81       	ldd	r24, Z+1	; 0x01
   16b78:	90 e0       	ldi	r25, 0x00	; 0
   16b7a:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16b7e:	c8 01       	movw	r24, r16
   16b80:	df 91       	pop	r29
   16b82:	cf 91       	pop	r28
   16b84:	1f 91       	pop	r17
   16b86:	0f 91       	pop	r16
   16b88:	08 95       	ret

00016b8a <amigo_verify>:
   16b8a:	8f 92       	push	r8
   16b8c:	9f 92       	push	r9
   16b8e:	af 92       	push	r10
   16b90:	bf 92       	push	r11
   16b92:	ef 92       	push	r14
   16b94:	ff 92       	push	r15
   16b96:	0f 93       	push	r16
   16b98:	1f 93       	push	r17
   16b9a:	cf 93       	push	r28
   16b9c:	df 93       	push	r29
   16b9e:	7c 01       	movw	r14, r24
   16ba0:	6d ef       	ldi	r22, 0xFD	; 253
   16ba2:	74 e1       	ldi	r23, 0x14	; 20
   16ba4:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   16ba8:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   16bac:	c5 dd       	rcall	.-1142   	; 0x16738 <amigo_chs_to_logical>
   16bae:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16bb2:	25 ff       	sbrs	r18, 5
   16bb4:	15 c0       	rjmp	.+42     	; 0x16be0 <amigo_verify+0x56>
   16bb6:	ff 92       	push	r15
   16bb8:	ef 92       	push	r14
   16bba:	9f 93       	push	r25
   16bbc:	8f 93       	push	r24
   16bbe:	7f 93       	push	r23
   16bc0:	6f 93       	push	r22
   16bc2:	86 eb       	ldi	r24, 0xB6	; 182
   16bc4:	90 e3       	ldi	r25, 0x30	; 48
   16bc6:	1f 92       	push	r1
   16bc8:	9f 93       	push	r25
   16bca:	8f 93       	push	r24
   16bcc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16bd0:	8d b7       	in	r24, 0x3d	; 61
   16bd2:	9e b7       	in	r25, 0x3e	; 62
   16bd4:	09 96       	adiw	r24, 0x09	; 9
   16bd6:	0f b6       	in	r0, 0x3f	; 63
   16bd8:	f8 94       	cli
   16bda:	9e bf       	out	0x3e, r25	; 62
   16bdc:	0f be       	out	0x3f, r0	; 63
   16bde:	8d bf       	out	0x3d, r24	; 61
   16be0:	e7 01       	movw	r28, r14
   16be2:	20 97       	sbiw	r28, 0x00	; 0
   16be4:	09 f4       	brne	.+2      	; 0x16be8 <amigo_verify+0x5e>
   16be6:	49 c0       	rjmp	.+146    	; 0x16c7a <amigo_verify+0xf0>
   16be8:	6a e0       	ldi	r22, 0x0A	; 10
   16bea:	75 e1       	ldi	r23, 0x15	; 21
   16bec:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   16bf0:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   16bf4:	a1 dd       	rcall	.-1214   	; 0x16738 <amigo_chs_to_logical>
   16bf6:	4b 01       	movw	r8, r22
   16bf8:	5c 01       	movw	r10, r24
   16bfa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16bfe:	86 fd       	sbrc	r24, 6
   16c00:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   16c04:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16c08:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16c0c:	e0 90 77 19 	lds	r14, 0x1977	; 0x801977 <AMIGOs>
   16c10:	f0 90 78 19 	lds	r15, 0x1978	; 0x801978 <AMIGOs+0x1>
   16c14:	97 e0       	ldi	r25, 0x07	; 7
   16c16:	e9 0e       	add	r14, r25
   16c18:	f1 1c       	adc	r15, r1
   16c1a:	06 81       	ldd	r16, Z+6	; 0x06
   16c1c:	17 81       	ldd	r17, Z+7	; 0x07
   16c1e:	28 ef       	ldi	r18, 0xF8	; 248
   16c20:	3c e1       	ldi	r19, 0x1C	; 28
   16c22:	b5 01       	movw	r22, r10
   16c24:	a4 01       	movw	r20, r8
   16c26:	82 81       	ldd	r24, Z+2	; 0x02
   16c28:	93 81       	ldd	r25, Z+3	; 0x03
   16c2a:	0e 94 f9 85 	call	0x10bf2	; 0x10bf2 <dbf_open_read>
   16c2e:	7c 01       	movw	r14, r24
   16c30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c34:	86 ff       	sbrs	r24, 6
   16c36:	04 c0       	rjmp	.+8      	; 0x16c40 <amigo_verify+0xb6>
   16c38:	82 e1       	ldi	r24, 0x12	; 18
   16c3a:	90 e1       	ldi	r25, 0x10	; 16
   16c3c:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   16c40:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16c44:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16c48:	86 81       	ldd	r24, Z+6	; 0x06
   16c4a:	97 81       	ldd	r25, Z+7	; 0x07
   16c4c:	e8 16       	cp	r14, r24
   16c4e:	f9 06       	cpc	r15, r25
   16c50:	61 f0       	breq	.+24     	; 0x16c6a <amigo_verify+0xe0>
   16c52:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16c56:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16c5a:	81 e0       	ldi	r24, 0x01	; 1
   16c5c:	86 83       	std	Z+6, r24	; 0x06
   16c5e:	87 81       	ldd	r24, Z+7	; 0x07
   16c60:	90 85       	ldd	r25, Z+8	; 0x08
   16c62:	81 60       	ori	r24, 0x01	; 1
   16c64:	90 87       	std	Z+8, r25	; 0x08
   16c66:	87 83       	std	Z+7, r24	; 0x07
   16c68:	0b c0       	rjmp	.+22     	; 0x16c80 <amigo_verify+0xf6>
   16c6a:	82 e1       	ldi	r24, 0x12	; 18
   16c6c:	95 e1       	ldi	r25, 0x15	; 21
   16c6e:	39 df       	rcall	.-398    	; 0x16ae2 <amigo_increment>
   16c70:	21 97       	sbiw	r28, 0x01	; 1
   16c72:	89 2b       	or	r24, r25
   16c74:	09 f4       	brne	.+2      	; 0x16c78 <amigo_verify+0xee>
   16c76:	b5 cf       	rjmp	.-150    	; 0x16be2 <amigo_verify+0x58>
   16c78:	03 c0       	rjmp	.+6      	; 0x16c80 <amigo_verify+0xf6>
   16c7a:	c0 e0       	ldi	r28, 0x00	; 0
   16c7c:	d0 e0       	ldi	r29, 0x00	; 0
   16c7e:	02 c0       	rjmp	.+4      	; 0x16c84 <amigo_verify+0xfa>
   16c80:	c1 e0       	ldi	r28, 0x01	; 1
   16c82:	d0 e0       	ldi	r29, 0x00	; 0
   16c84:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16c88:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16c8c:	81 81       	ldd	r24, Z+1	; 0x01
   16c8e:	90 e0       	ldi	r25, 0x00	; 0
   16c90:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16c94:	ce 01       	movw	r24, r28
   16c96:	df 91       	pop	r29
   16c98:	cf 91       	pop	r28
   16c9a:	1f 91       	pop	r17
   16c9c:	0f 91       	pop	r16
   16c9e:	ff 90       	pop	r15
   16ca0:	ef 90       	pop	r14
   16ca2:	bf 90       	pop	r11
   16ca4:	af 90       	pop	r10
   16ca6:	9f 90       	pop	r9
   16ca8:	8f 90       	pop	r8
   16caa:	08 95       	ret

00016cac <amigo_format>:
   16cac:	ef 92       	push	r14
   16cae:	ff 92       	push	r15
   16cb0:	0f 93       	push	r16
   16cb2:	1f 93       	push	r17
   16cb4:	cf 93       	push	r28
   16cb6:	df 93       	push	r29
   16cb8:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16cbc:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16cc0:	15 82       	std	Z+5, r1	; 0x05
   16cc2:	14 82       	std	Z+4, r1	; 0x04
   16cc4:	13 82       	std	Z+3, r1	; 0x03
   16cc6:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16cca:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16cce:	46 81       	ldd	r20, Z+6	; 0x06
   16cd0:	57 81       	ldd	r21, Z+7	; 0x07
   16cd2:	68 2f       	mov	r22, r24
   16cd4:	70 e0       	ldi	r23, 0x00	; 0
   16cd6:	88 ef       	ldi	r24, 0xF8	; 248
   16cd8:	9c e1       	ldi	r25, 0x1C	; 28
   16cda:	0e 94 f9 e8 	call	0x1d1f2	; 0x1d1f2 <memset>
   16cde:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16ce2:	85 ff       	sbrs	r24, 5
   16ce4:	0a c0       	rjmp	.+20     	; 0x16cfa <amigo_format+0x4e>
   16ce6:	8b e7       	ldi	r24, 0x7B	; 123
   16ce8:	90 e3       	ldi	r25, 0x30	; 48
   16cea:	1f 92       	push	r1
   16cec:	9f 93       	push	r25
   16cee:	8f 93       	push	r24
   16cf0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16cf4:	0f 90       	pop	r0
   16cf6:	0f 90       	pop	r0
   16cf8:	0f 90       	pop	r0
   16cfa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16cfe:	86 fd       	sbrc	r24, 6
   16d00:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   16d04:	69 e1       	ldi	r22, 0x19	; 25
   16d06:	75 e1       	ldi	r23, 0x15	; 21
   16d08:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   16d0c:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   16d10:	13 dd       	rcall	.-1498   	; 0x16738 <amigo_chs_to_logical>
   16d12:	ab 01       	movw	r20, r22
   16d14:	bc 01       	movw	r22, r24
   16d16:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16d1a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16d1e:	e0 90 77 19 	lds	r14, 0x1977	; 0x801977 <AMIGOs>
   16d22:	f0 90 78 19 	lds	r15, 0x1978	; 0x801978 <AMIGOs+0x1>
   16d26:	87 e0       	ldi	r24, 0x07	; 7
   16d28:	e8 0e       	add	r14, r24
   16d2a:	f1 1c       	adc	r15, r1
   16d2c:	06 81       	ldd	r16, Z+6	; 0x06
   16d2e:	17 81       	ldd	r17, Z+7	; 0x07
   16d30:	28 ef       	ldi	r18, 0xF8	; 248
   16d32:	3c e1       	ldi	r19, 0x1C	; 28
   16d34:	82 81       	ldd	r24, Z+2	; 0x02
   16d36:	93 81       	ldd	r25, Z+3	; 0x03
   16d38:	0e 94 50 86 	call	0x10ca0	; 0x10ca0 <dbf_open_write>
   16d3c:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16d40:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16d44:	26 81       	ldd	r18, Z+6	; 0x06
   16d46:	37 81       	ldd	r19, Z+7	; 0x07
   16d48:	82 17       	cp	r24, r18
   16d4a:	93 07       	cpc	r25, r19
   16d4c:	71 f0       	breq	.+28     	; 0x16d6a <amigo_format+0xbe>
   16d4e:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16d52:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16d56:	87 81       	ldd	r24, Z+7	; 0x07
   16d58:	90 85       	ldd	r25, Z+8	; 0x08
   16d5a:	82 60       	ori	r24, 0x02	; 2
   16d5c:	90 87       	std	Z+8, r25	; 0x08
   16d5e:	87 83       	std	Z+7, r24	; 0x07
   16d60:	81 e0       	ldi	r24, 0x01	; 1
   16d62:	86 83       	std	Z+6, r24	; 0x06
   16d64:	c1 e0       	ldi	r28, 0x01	; 1
   16d66:	d0 e0       	ldi	r29, 0x00	; 0
   16d68:	0f c0       	rjmp	.+30     	; 0x16d88 <amigo_format+0xdc>
   16d6a:	80 e0       	ldi	r24, 0x00	; 0
   16d6c:	90 e0       	ldi	r25, 0x00	; 0
   16d6e:	b9 de       	rcall	.-654    	; 0x16ae2 <amigo_increment>
   16d70:	89 2b       	or	r24, r25
   16d72:	41 f2       	breq	.-112    	; 0x16d04 <amigo_format+0x58>
   16d74:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16d78:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16d7c:	15 82       	std	Z+5, r1	; 0x05
   16d7e:	14 82       	std	Z+4, r1	; 0x04
   16d80:	13 82       	std	Z+3, r1	; 0x03
   16d82:	16 82       	std	Z+6, r1	; 0x06
   16d84:	c0 e0       	ldi	r28, 0x00	; 0
   16d86:	d0 e0       	ldi	r29, 0x00	; 0
   16d88:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d8c:	86 ff       	sbrs	r24, 6
   16d8e:	04 c0       	rjmp	.+8      	; 0x16d98 <amigo_format+0xec>
   16d90:	89 e1       	ldi	r24, 0x19	; 25
   16d92:	95 e1       	ldi	r25, 0x15	; 21
   16d94:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   16d98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d9c:	85 ff       	sbrs	r24, 5
   16d9e:	0a c0       	rjmp	.+20     	; 0x16db4 <amigo_format+0x108>
   16da0:	86 e6       	ldi	r24, 0x66	; 102
   16da2:	90 e3       	ldi	r25, 0x30	; 48
   16da4:	1f 92       	push	r1
   16da6:	9f 93       	push	r25
   16da8:	8f 93       	push	r24
   16daa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16dae:	0f 90       	pop	r0
   16db0:	0f 90       	pop	r0
   16db2:	0f 90       	pop	r0
   16db4:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16db8:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16dbc:	81 81       	ldd	r24, Z+1	; 0x01
   16dbe:	90 e0       	ldi	r25, 0x00	; 0
   16dc0:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16dc4:	ce 01       	movw	r24, r28
   16dc6:	cd b7       	in	r28, 0x3d	; 61
   16dc8:	de b7       	in	r29, 0x3e	; 62
   16dca:	e6 e0       	ldi	r30, 0x06	; 6
   16dcc:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00016dd0 <amigo_buffered_read>:
   16dd0:	8f 92       	push	r8
   16dd2:	9f 92       	push	r9
   16dd4:	af 92       	push	r10
   16dd6:	bf 92       	push	r11
   16dd8:	ef 92       	push	r14
   16dda:	ff 92       	push	r15
   16ddc:	0f 93       	push	r16
   16dde:	1f 93       	push	r17
   16de0:	cf 93       	push	r28
   16de2:	df 93       	push	r29
   16de4:	00 d0       	rcall	.+0      	; 0x16de6 <amigo_buffered_read+0x16>
   16de6:	cd b7       	in	r28, 0x3d	; 61
   16de8:	de b7       	in	r29, 0x3e	; 62
   16dea:	60 e2       	ldi	r22, 0x20	; 32
   16dec:	75 e1       	ldi	r23, 0x15	; 21
   16dee:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   16df2:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   16df6:	a0 dc       	rcall	.-1728   	; 0x16738 <amigo_chs_to_logical>
   16df8:	4b 01       	movw	r8, r22
   16dfa:	5c 01       	movw	r10, r24
   16dfc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e00:	86 fd       	sbrc	r24, 6
   16e02:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   16e06:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16e0a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16e0e:	e0 90 77 19 	lds	r14, 0x1977	; 0x801977 <AMIGOs>
   16e12:	f0 90 78 19 	lds	r15, 0x1978	; 0x801978 <AMIGOs+0x1>
   16e16:	87 e0       	ldi	r24, 0x07	; 7
   16e18:	e8 0e       	add	r14, r24
   16e1a:	f1 1c       	adc	r15, r1
   16e1c:	06 81       	ldd	r16, Z+6	; 0x06
   16e1e:	17 81       	ldd	r17, Z+7	; 0x07
   16e20:	28 ef       	ldi	r18, 0xF8	; 248
   16e22:	3c e1       	ldi	r19, 0x1C	; 28
   16e24:	b5 01       	movw	r22, r10
   16e26:	a4 01       	movw	r20, r8
   16e28:	82 81       	ldd	r24, Z+2	; 0x02
   16e2a:	93 81       	ldd	r25, Z+3	; 0x03
   16e2c:	0e 94 f9 85 	call	0x10bf2	; 0x10bf2 <dbf_open_read>
   16e30:	7c 01       	movw	r14, r24
   16e32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e36:	86 ff       	sbrs	r24, 6
   16e38:	04 c0       	rjmp	.+8      	; 0x16e42 <amigo_buffered_read+0x72>
   16e3a:	82 e1       	ldi	r24, 0x12	; 18
   16e3c:	90 e1       	ldi	r25, 0x10	; 16
   16e3e:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   16e42:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16e46:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16e4a:	86 81       	ldd	r24, Z+6	; 0x06
   16e4c:	97 81       	ldd	r25, Z+7	; 0x07
   16e4e:	e8 16       	cp	r14, r24
   16e50:	f9 06       	cpc	r15, r25
   16e52:	39 f0       	breq	.+14     	; 0x16e62 <amigo_buffered_read+0x92>
   16e54:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16e58:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16e5c:	81 e0       	ldi	r24, 0x01	; 1
   16e5e:	86 83       	std	Z+6, r24	; 0x06
   16e60:	6c c0       	rjmp	.+216    	; 0x16f3a <amigo_buffered_read+0x16a>
   16e62:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e66:	87 fd       	sbrc	r24, 7
   16e68:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   16e6c:	80 e0       	ldi	r24, 0x00	; 0
   16e6e:	91 e0       	ldi	r25, 0x01	; 1
   16e70:	9a 83       	std	Y+2, r25	; 0x02
   16e72:	89 83       	std	Y+1, r24	; 0x01
   16e74:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16e78:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16e7c:	66 81       	ldd	r22, Z+6	; 0x06
   16e7e:	77 81       	ldd	r23, Z+7	; 0x07
   16e80:	ae 01       	movw	r20, r28
   16e82:	4f 5f       	subi	r20, 0xFF	; 255
   16e84:	5f 4f       	sbci	r21, 0xFF	; 255
   16e86:	88 ef       	ldi	r24, 0xF8	; 248
   16e88:	9c e1       	ldi	r25, 0x1C	; 28
   16e8a:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   16e8e:	7c 01       	movw	r14, r24
   16e90:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e94:	87 ff       	sbrs	r24, 7
   16e96:	04 c0       	rjmp	.+8      	; 0x16ea0 <amigo_buffered_read+0xd0>
   16e98:	8e e2       	ldi	r24, 0x2E	; 46
   16e9a:	95 e1       	ldi	r25, 0x15	; 21
   16e9c:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   16ea0:	89 81       	ldd	r24, Y+1	; 0x01
   16ea2:	9a 81       	ldd	r25, Y+2	; 0x02
   16ea4:	88 27       	eor	r24, r24
   16ea6:	90 7d       	andi	r25, 0xD0	; 208
   16ea8:	89 2b       	or	r24, r25
   16eaa:	49 f4       	brne	.+18     	; 0x16ebe <amigo_buffered_read+0xee>
   16eac:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16eb0:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16eb4:	86 81       	ldd	r24, Z+6	; 0x06
   16eb6:	97 81       	ldd	r25, Z+7	; 0x07
   16eb8:	e8 16       	cp	r14, r24
   16eba:	f9 06       	cpc	r15, r25
   16ebc:	31 f1       	breq	.+76     	; 0x16f0a <amigo_buffered_read+0x13a>
   16ebe:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16ec2:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16ec6:	81 e0       	ldi	r24, 0x01	; 1
   16ec8:	86 83       	std	Z+6, r24	; 0x06
   16eca:	87 81       	ldd	r24, Z+7	; 0x07
   16ecc:	90 85       	ldd	r25, Z+8	; 0x08
   16ece:	80 62       	ori	r24, 0x20	; 32
   16ed0:	90 87       	std	Z+8, r25	; 0x08
   16ed2:	87 83       	std	Z+7, r24	; 0x07
   16ed4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16ed8:	80 ff       	sbrs	r24, 0
   16eda:	0a c0       	rjmp	.+20     	; 0x16ef0 <amigo_buffered_read+0x120>
   16edc:	8c e4       	ldi	r24, 0x4C	; 76
   16ede:	90 e3       	ldi	r25, 0x30	; 48
   16ee0:	1f 92       	push	r1
   16ee2:	9f 93       	push	r25
   16ee4:	8f 93       	push	r24
   16ee6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   16eea:	0f 90       	pop	r0
   16eec:	0f 90       	pop	r0
   16eee:	0f 90       	pop	r0
   16ef0:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16ef4:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16ef8:	81 81       	ldd	r24, Z+1	; 0x01
   16efa:	90 e0       	ldi	r25, 0x00	; 0
   16efc:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16f00:	89 81       	ldd	r24, Y+1	; 0x01
   16f02:	9a 81       	ldd	r25, Y+2	; 0x02
   16f04:	88 27       	eor	r24, r24
   16f06:	90 7d       	andi	r25, 0xD0	; 208
   16f08:	1a c0       	rjmp	.+52     	; 0x16f3e <amigo_buffered_read+0x16e>
   16f0a:	80 e2       	ldi	r24, 0x20	; 32
   16f0c:	95 e1       	ldi	r25, 0x15	; 21
   16f0e:	e9 dd       	rcall	.-1070   	; 0x16ae2 <amigo_increment>
   16f10:	89 2b       	or	r24, r25
   16f12:	59 f0       	breq	.+22     	; 0x16f2a <amigo_buffered_read+0x15a>
   16f14:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16f18:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16f1c:	81 e0       	ldi	r24, 0x01	; 1
   16f1e:	86 83       	std	Z+6, r24	; 0x06
   16f20:	87 81       	ldd	r24, Z+7	; 0x07
   16f22:	90 85       	ldd	r25, Z+8	; 0x08
   16f24:	84 60       	ori	r24, 0x04	; 4
   16f26:	90 87       	std	Z+8, r25	; 0x08
   16f28:	87 83       	std	Z+7, r24	; 0x07
   16f2a:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16f2e:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16f32:	81 81       	ldd	r24, Z+1	; 0x01
   16f34:	90 e0       	ldi	r25, 0x00	; 0
   16f36:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   16f3a:	80 e0       	ldi	r24, 0x00	; 0
   16f3c:	90 e0       	ldi	r25, 0x00	; 0
   16f3e:	0f 90       	pop	r0
   16f40:	0f 90       	pop	r0
   16f42:	df 91       	pop	r29
   16f44:	cf 91       	pop	r28
   16f46:	1f 91       	pop	r17
   16f48:	0f 91       	pop	r16
   16f4a:	ff 90       	pop	r15
   16f4c:	ef 90       	pop	r14
   16f4e:	bf 90       	pop	r11
   16f50:	af 90       	pop	r10
   16f52:	9f 90       	pop	r9
   16f54:	8f 90       	pop	r8
   16f56:	08 95       	ret

00016f58 <amigo_buffered_write>:
   16f58:	8f 92       	push	r8
   16f5a:	9f 92       	push	r9
   16f5c:	af 92       	push	r10
   16f5e:	bf 92       	push	r11
   16f60:	ef 92       	push	r14
   16f62:	ff 92       	push	r15
   16f64:	0f 93       	push	r16
   16f66:	1f 93       	push	r17
   16f68:	cf 93       	push	r28
   16f6a:	df 93       	push	r29
   16f6c:	00 d0       	rcall	.+0      	; 0x16f6e <amigo_buffered_write+0x16>
   16f6e:	cd b7       	in	r28, 0x3d	; 61
   16f70:	de b7       	in	r29, 0x3e	; 62
   16f72:	69 e3       	ldi	r22, 0x39	; 57
   16f74:	75 e1       	ldi	r23, 0x15	; 21
   16f76:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <AMIGOs>
   16f7a:	90 91 78 19 	lds	r25, 0x1978	; 0x801978 <AMIGOs+0x1>
   16f7e:	dc db       	rcall	.-2120   	; 0x16738 <amigo_chs_to_logical>
   16f80:	4b 01       	movw	r8, r22
   16f82:	5c 01       	movw	r10, r24
   16f84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f88:	87 fd       	sbrc	r24, 7
   16f8a:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   16f8e:	1a 82       	std	Y+2, r1	; 0x02
   16f90:	19 82       	std	Y+1, r1	; 0x01
   16f92:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16f96:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16f9a:	66 81       	ldd	r22, Z+6	; 0x06
   16f9c:	77 81       	ldd	r23, Z+7	; 0x07
   16f9e:	ae 01       	movw	r20, r28
   16fa0:	4f 5f       	subi	r20, 0xFF	; 255
   16fa2:	5f 4f       	sbci	r21, 0xFF	; 255
   16fa4:	88 ef       	ldi	r24, 0xF8	; 248
   16fa6:	9c e1       	ldi	r25, 0x1C	; 28
   16fa8:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
   16fac:	7c 01       	movw	r14, r24
   16fae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fb2:	87 ff       	sbrs	r24, 7
   16fb4:	04 c0       	rjmp	.+8      	; 0x16fbe <amigo_buffered_write+0x66>
   16fb6:	88 e4       	ldi	r24, 0x48	; 72
   16fb8:	95 e1       	ldi	r25, 0x15	; 21
   16fba:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   16fbe:	89 81       	ldd	r24, Y+1	; 0x01
   16fc0:	9a 81       	ldd	r25, Y+2	; 0x02
   16fc2:	88 27       	eor	r24, r24
   16fc4:	90 7d       	andi	r25, 0xD0	; 208
   16fc6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16fca:	89 2b       	or	r24, r25
   16fcc:	49 f4       	brne	.+18     	; 0x16fe0 <amigo_buffered_write+0x88>
   16fce:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   16fd2:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   16fd6:	86 81       	ldd	r24, Z+6	; 0x06
   16fd8:	97 81       	ldd	r25, Z+7	; 0x07
   16fda:	e8 16       	cp	r14, r24
   16fdc:	f9 06       	cpc	r15, r25
   16fde:	c1 f0       	breq	.+48     	; 0x17010 <amigo_buffered_write+0xb8>
   16fe0:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   16fe4:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   16fe8:	81 e0       	ldi	r24, 0x01	; 1
   16fea:	86 83       	std	Z+6, r24	; 0x06
   16fec:	87 81       	ldd	r24, Z+7	; 0x07
   16fee:	90 85       	ldd	r25, Z+8	; 0x08
   16ff0:	80 62       	ori	r24, 0x20	; 32
   16ff2:	90 87       	std	Z+8, r25	; 0x08
   16ff4:	87 83       	std	Z+7, r24	; 0x07
   16ff6:	20 ff       	sbrs	r18, 0
   16ff8:	4e c0       	rjmp	.+156    	; 0x17096 <amigo_buffered_write+0x13e>
   16ffa:	8d e2       	ldi	r24, 0x2D	; 45
   16ffc:	90 e3       	ldi	r25, 0x30	; 48
   16ffe:	1f 92       	push	r1
   17000:	9f 93       	push	r25
   17002:	8f 93       	push	r24
   17004:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17008:	0f 90       	pop	r0
   1700a:	0f 90       	pop	r0
   1700c:	0f 90       	pop	r0
   1700e:	43 c0       	rjmp	.+134    	; 0x17096 <amigo_buffered_write+0x13e>
   17010:	26 fd       	sbrc	r18, 6
   17012:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
   17016:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1701a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   1701e:	e0 90 77 19 	lds	r14, 0x1977	; 0x801977 <AMIGOs>
   17022:	f0 90 78 19 	lds	r15, 0x1978	; 0x801978 <AMIGOs+0x1>
   17026:	87 e0       	ldi	r24, 0x07	; 7
   17028:	e8 0e       	add	r14, r24
   1702a:	f1 1c       	adc	r15, r1
   1702c:	06 81       	ldd	r16, Z+6	; 0x06
   1702e:	17 81       	ldd	r17, Z+7	; 0x07
   17030:	28 ef       	ldi	r18, 0xF8	; 248
   17032:	3c e1       	ldi	r19, 0x1C	; 28
   17034:	b5 01       	movw	r22, r10
   17036:	a4 01       	movw	r20, r8
   17038:	82 81       	ldd	r24, Z+2	; 0x02
   1703a:	93 81       	ldd	r25, Z+3	; 0x03
   1703c:	0e 94 50 86 	call	0x10ca0	; 0x10ca0 <dbf_open_write>
   17040:	7c 01       	movw	r14, r24
   17042:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17046:	86 ff       	sbrs	r24, 6
   17048:	04 c0       	rjmp	.+8      	; 0x17052 <amigo_buffered_write+0xfa>
   1704a:	87 e0       	ldi	r24, 0x07	; 7
   1704c:	90 e1       	ldi	r25, 0x10	; 16
   1704e:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
   17052:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   17056:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   1705a:	86 81       	ldd	r24, Z+6	; 0x06
   1705c:	97 81       	ldd	r25, Z+7	; 0x07
   1705e:	e8 16       	cp	r14, r24
   17060:	f9 06       	cpc	r15, r25
   17062:	49 f0       	breq	.+18     	; 0x17076 <amigo_buffered_write+0x11e>
   17064:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17068:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   1706c:	81 e0       	ldi	r24, 0x01	; 1
   1706e:	86 83       	std	Z+6, r24	; 0x06
   17070:	80 e0       	ldi	r24, 0x00	; 0
   17072:	90 e0       	ldi	r25, 0x00	; 0
   17074:	1c c0       	rjmp	.+56     	; 0x170ae <amigo_buffered_write+0x156>
   17076:	89 e3       	ldi	r24, 0x39	; 57
   17078:	95 e1       	ldi	r25, 0x15	; 21
   1707a:	33 dd       	rcall	.-1434   	; 0x16ae2 <amigo_increment>
   1707c:	89 2b       	or	r24, r25
   1707e:	59 f0       	breq	.+22     	; 0x17096 <amigo_buffered_write+0x13e>
   17080:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17084:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17088:	81 e0       	ldi	r24, 0x01	; 1
   1708a:	86 83       	std	Z+6, r24	; 0x06
   1708c:	87 81       	ldd	r24, Z+7	; 0x07
   1708e:	90 85       	ldd	r25, Z+8	; 0x08
   17090:	84 60       	ori	r24, 0x04	; 4
   17092:	90 87       	std	Z+8, r25	; 0x08
   17094:	87 83       	std	Z+7, r24	; 0x07
   17096:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1709a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   1709e:	81 81       	ldd	r24, Z+1	; 0x01
   170a0:	90 e0       	ldi	r25, 0x00	; 0
   170a2:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   170a6:	89 81       	ldd	r24, Y+1	; 0x01
   170a8:	9a 81       	ldd	r25, Y+2	; 0x02
   170aa:	88 27       	eor	r24, r24
   170ac:	90 7d       	andi	r25, 0xD0	; 208
   170ae:	0f 90       	pop	r0
   170b0:	0f 90       	pop	r0
   170b2:	df 91       	pop	r29
   170b4:	cf 91       	pop	r28
   170b6:	1f 91       	pop	r17
   170b8:	0f 91       	pop	r16
   170ba:	ff 90       	pop	r15
   170bc:	ef 90       	pop	r14
   170be:	bf 90       	pop	r11
   170c0:	af 90       	pop	r10
   170c2:	9f 90       	pop	r9
   170c4:	8f 90       	pop	r8
   170c6:	08 95       	ret

000170c8 <amigo_cmd_dsj>:
   170c8:	a3 e0       	ldi	r26, 0x03	; 3
   170ca:	b0 e0       	ldi	r27, 0x00	; 0
   170cc:	ea e6       	ldi	r30, 0x6A	; 106
   170ce:	f8 eb       	ldi	r31, 0xB8	; 184
   170d0:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   170d4:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   170d8:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   170dc:	86 81       	ldd	r24, Z+6	; 0x06
   170de:	8b 83       	std	Y+3, r24	; 0x03
   170e0:	80 e0       	ldi	r24, 0x00	; 0
   170e2:	91 e0       	ldi	r25, 0x01	; 1
   170e4:	9a 83       	std	Y+2, r25	; 0x02
   170e6:	89 83       	std	Y+1, r24	; 0x01
   170e8:	ae 01       	movw	r20, r28
   170ea:	4f 5f       	subi	r20, 0xFF	; 255
   170ec:	5f 4f       	sbci	r21, 0xFF	; 255
   170ee:	61 e0       	ldi	r22, 0x01	; 1
   170f0:	70 e0       	ldi	r23, 0x00	; 0
   170f2:	ce 01       	movw	r24, r28
   170f4:	03 96       	adiw	r24, 0x03	; 3
   170f6:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
   170fa:	29 81       	ldd	r18, Y+1	; 0x01
   170fc:	3a 81       	ldd	r19, Y+2	; 0x02
   170fe:	22 27       	eor	r18, r18
   17100:	30 7d       	andi	r19, 0xD0	; 208
   17102:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17106:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   1710a:	23 2b       	or	r18, r19
   1710c:	29 f0       	breq	.+10     	; 0x17118 <amigo_cmd_dsj+0x50>
   1710e:	27 81       	ldd	r18, Z+7	; 0x07
   17110:	30 85       	ldd	r19, Z+8	; 0x08
   17112:	20 62       	ori	r18, 0x20	; 32
   17114:	30 87       	std	Z+8, r19	; 0x08
   17116:	27 83       	std	Z+7, r18	; 0x07
   17118:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1711c:	01 97       	sbiw	r24, 0x01	; 1
   1711e:	c1 f0       	breq	.+48     	; 0x17150 <amigo_cmd_dsj+0x88>
   17120:	81 e0       	ldi	r24, 0x01	; 1
   17122:	86 83       	std	Z+6, r24	; 0x06
   17124:	87 81       	ldd	r24, Z+7	; 0x07
   17126:	90 85       	ldd	r25, Z+8	; 0x08
   17128:	80 62       	ori	r24, 0x20	; 32
   1712a:	90 87       	std	Z+8, r25	; 0x08
   1712c:	87 83       	std	Z+7, r24	; 0x07
   1712e:	20 ff       	sbrs	r18, 0
   17130:	0a c0       	rjmp	.+20     	; 0x17146 <amigo_cmd_dsj+0x7e>
   17132:	83 e1       	ldi	r24, 0x13	; 19
   17134:	90 e3       	ldi	r25, 0x30	; 48
   17136:	1f 92       	push	r1
   17138:	9f 93       	push	r25
   1713a:	8f 93       	push	r24
   1713c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17140:	0f 90       	pop	r0
   17142:	0f 90       	pop	r0
   17144:	0f 90       	pop	r0
   17146:	89 81       	ldd	r24, Y+1	; 0x01
   17148:	9a 81       	ldd	r25, Y+2	; 0x02
   1714a:	88 27       	eor	r24, r24
   1714c:	90 7d       	andi	r25, 0xD0	; 208
   1714e:	1a c0       	rjmp	.+52     	; 0x17184 <amigo_cmd_dsj+0xbc>
   17150:	25 ff       	sbrs	r18, 5
   17152:	0f c0       	rjmp	.+30     	; 0x17172 <amigo_cmd_dsj+0xaa>
   17154:	86 81       	ldd	r24, Z+6	; 0x06
   17156:	1f 92       	push	r1
   17158:	8f 93       	push	r24
   1715a:	86 e0       	ldi	r24, 0x06	; 6
   1715c:	90 e3       	ldi	r25, 0x30	; 48
   1715e:	1f 92       	push	r1
   17160:	9f 93       	push	r25
   17162:	8f 93       	push	r24
   17164:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17168:	0f 90       	pop	r0
   1716a:	0f 90       	pop	r0
   1716c:	0f 90       	pop	r0
   1716e:	0f 90       	pop	r0
   17170:	0f 90       	pop	r0
   17172:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17176:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   1717a:	16 82       	std	Z+6, r1	; 0x06
   1717c:	10 86       	std	Z+8, r1	; 0x08
   1717e:	17 82       	std	Z+7, r1	; 0x07
   17180:	80 e0       	ldi	r24, 0x00	; 0
   17182:	90 e0       	ldi	r25, 0x00	; 0
   17184:	23 96       	adiw	r28, 0x03	; 3
   17186:	e2 e0       	ldi	r30, 0x02	; 2
   17188:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

0001718c <amigo_cmd_clear>:
   1718c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17190:	85 ff       	sbrs	r24, 5
   17192:	0a c0       	rjmp	.+20     	; 0x171a8 <amigo_cmd_clear+0x1c>
   17194:	8d ec       	ldi	r24, 0xCD	; 205
   17196:	9f e2       	ldi	r25, 0x2F	; 47
   17198:	1f 92       	push	r1
   1719a:	9f 93       	push	r25
   1719c:	8f 93       	push	r24
   1719e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   171a2:	0f 90       	pop	r0
   171a4:	0f 90       	pop	r0
   171a6:	0f 90       	pop	r0
   171a8:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   171ac:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   171b0:	15 82       	std	Z+5, r1	; 0x05
   171b2:	14 82       	std	Z+4, r1	; 0x04
   171b4:	13 82       	std	Z+3, r1	; 0x03
   171b6:	16 82       	std	Z+6, r1	; 0x06
   171b8:	10 86       	std	Z+8, r1	; 0x08
   171ba:	17 82       	std	Z+7, r1	; 0x07
   171bc:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   171c0:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   171c4:	81 81       	ldd	r24, Z+1	; 0x01
   171c6:	90 e0       	ldi	r25, 0x00	; 0
   171c8:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
   171cc:	80 e0       	ldi	r24, 0x00	; 0
   171ce:	90 e0       	ldi	r25, 0x00	; 0
   171d0:	08 95       	ret

000171d2 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   171d2:	0f 93       	push	r16
   171d4:	1f 93       	push	r17
   171d6:	cf 93       	push	r28
   171d8:	df 93       	push	r29
   171da:	c8 2f       	mov	r28, r24
   171dc:	d6 2f       	mov	r29, r22
   171de:	14 2f       	mov	r17, r20
   171e0:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   171e2:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   171e6:	90 e0       	ldi	r25, 0x00	; 0
   171e8:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   171ec:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <talking>
   171f0:	89 2b       	or	r24, r25
   171f2:	19 f1       	breq	.+70     	; 0x1723a <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   171f4:	1f 92       	push	r1
   171f6:	2f 93       	push	r18
   171f8:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   171fc:	1f 92       	push	r1
   171fe:	8f 93       	push	r24
   17200:	0f 93       	push	r16
   17202:	1f 93       	push	r17
   17204:	1f 92       	push	r1
   17206:	df 93       	push	r29
   17208:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1720c:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17210:	80 81       	ld	r24, Z
   17212:	1f 92       	push	r1
   17214:	8f 93       	push	r24
   17216:	1f 92       	push	r1
   17218:	cf 93       	push	r28
   1721a:	86 e6       	ldi	r24, 0x66	; 102
   1721c:	9f e2       	ldi	r25, 0x2F	; 47
   1721e:	1f 92       	push	r1
   17220:	9f 93       	push	r25
   17222:	8f 93       	push	r24
   17224:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17228:	8d b7       	in	r24, 0x3d	; 61
   1722a:	9e b7       	in	r25, 0x3e	; 62
   1722c:	0f 96       	adiw	r24, 0x0f	; 15
   1722e:	0f b6       	in	r0, 0x3f	; 63
   17230:	f8 94       	cli
   17232:	9e bf       	out	0x3e, r25	; 62
   17234:	0f be       	out	0x3f, r0	; 63
   17236:	8d bf       	out	0x3d, r24	; 61
   17238:	66 c0       	rjmp	.+204    	; 0x17306 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   1723a:	82 2f       	mov	r24, r18
   1723c:	90 e0       	ldi	r25, 0x00	; 0
   1723e:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17242:	30 91 fe 1e 	lds	r19, 0x1EFE	; 0x801efe <listening>
   17246:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <talking>
   1724a:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1724e:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17252:	89 2b       	or	r24, r25
   17254:	e9 f0       	breq	.+58     	; 0x17290 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17256:	1f 92       	push	r1
   17258:	2f 93       	push	r18
   1725a:	1f 92       	push	r1
   1725c:	3f 93       	push	r19
   1725e:	0f 93       	push	r16
   17260:	1f 93       	push	r17
   17262:	1f 92       	push	r1
   17264:	df 93       	push	r29
   17266:	80 81       	ld	r24, Z
   17268:	1f 92       	push	r1
   1726a:	8f 93       	push	r24
   1726c:	1f 92       	push	r1
   1726e:	cf 93       	push	r28
   17270:	8f ef       	ldi	r24, 0xFF	; 255
   17272:	9e e2       	ldi	r25, 0x2E	; 46
   17274:	1f 92       	push	r1
   17276:	9f 93       	push	r25
   17278:	8f 93       	push	r24
   1727a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1727e:	8d b7       	in	r24, 0x3d	; 61
   17280:	9e b7       	in	r25, 0x3e	; 62
   17282:	0f 96       	adiw	r24, 0x0f	; 15
   17284:	0f b6       	in	r0, 0x3f	; 63
   17286:	f8 94       	cli
   17288:	9e bf       	out	0x3e, r25	; 62
   1728a:	0f be       	out	0x3f, r0	; 63
   1728c:	8d bf       	out	0x3d, r24	; 61
   1728e:	3b c0       	rjmp	.+118    	; 0x17306 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   17290:	2f 35       	cpi	r18, 0x5F	; 95
   17292:	e9 f4       	brne	.+58     	; 0x172ce <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17294:	1f 92       	push	r1
   17296:	2f 93       	push	r18
   17298:	1f 92       	push	r1
   1729a:	3f 93       	push	r19
   1729c:	0f 93       	push	r16
   1729e:	1f 93       	push	r17
   172a0:	1f 92       	push	r1
   172a2:	df 93       	push	r29
   172a4:	80 81       	ld	r24, Z
   172a6:	1f 92       	push	r1
   172a8:	8f 93       	push	r24
   172aa:	1f 92       	push	r1
   172ac:	cf 93       	push	r28
   172ae:	88 e9       	ldi	r24, 0x98	; 152
   172b0:	9e e2       	ldi	r25, 0x2E	; 46
   172b2:	1f 92       	push	r1
   172b4:	9f 93       	push	r25
   172b6:	8f 93       	push	r24
   172b8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   172bc:	8d b7       	in	r24, 0x3d	; 61
   172be:	9e b7       	in	r25, 0x3e	; 62
   172c0:	0f 96       	adiw	r24, 0x0f	; 15
   172c2:	0f b6       	in	r0, 0x3f	; 63
   172c4:	f8 94       	cli
   172c6:	9e bf       	out	0x3e, r25	; 62
   172c8:	0f be       	out	0x3f, r0	; 63
   172ca:	8d bf       	out	0x3d, r24	; 61
   172cc:	1c c0       	rjmp	.+56     	; 0x17306 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   172ce:	1f 92       	push	r1
   172d0:	2f 93       	push	r18
   172d2:	1f 92       	push	r1
   172d4:	3f 93       	push	r19
   172d6:	0f 93       	push	r16
   172d8:	1f 93       	push	r17
   172da:	1f 92       	push	r1
   172dc:	df 93       	push	r29
   172de:	80 81       	ld	r24, Z
   172e0:	1f 92       	push	r1
   172e2:	8f 93       	push	r24
   172e4:	1f 92       	push	r1
   172e6:	cf 93       	push	r28
   172e8:	83 e3       	ldi	r24, 0x33	; 51
   172ea:	9e e2       	ldi	r25, 0x2E	; 46
   172ec:	1f 92       	push	r1
   172ee:	9f 93       	push	r25
   172f0:	8f 93       	push	r24
   172f2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   172f6:	8d b7       	in	r24, 0x3d	; 61
   172f8:	9e b7       	in	r25, 0x3e	; 62
   172fa:	0f 96       	adiw	r24, 0x0f	; 15
   172fc:	0f b6       	in	r0, 0x3f	; 63
   172fe:	f8 94       	cli
   17300:	9e bf       	out	0x3e, r25	; 62
   17302:	0f be       	out	0x3f, r0	; 63
   17304:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17306:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   1730a:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   1730e:	81 81       	ldd	r24, Z+1	; 0x01
   17310:	90 e0       	ldi	r25, 0x00	; 0
   17312:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
    return(0);
}
   17316:	80 e0       	ldi	r24, 0x00	; 0
   17318:	90 e0       	ldi	r25, 0x00	; 0
   1731a:	df 91       	pop	r29
   1731c:	cf 91       	pop	r28
   1731e:	1f 91       	pop	r17
   17320:	0f 91       	pop	r16
   17322:	08 95       	ret

00017324 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17324:	cf 93       	push	r28
   17326:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17328:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   1732c:	90 e0       	ldi	r25, 0x00	; 0
   1732e:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17332:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <talking>
   17336:	89 2b       	or	r24, r25
   17338:	f9 f0       	breq	.+62     	; 0x17378 <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1733a:	1f 92       	push	r1
   1733c:	2f 93       	push	r18
   1733e:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17342:	1f 92       	push	r1
   17344:	8f 93       	push	r24
   17346:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1734a:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   1734e:	80 81       	ld	r24, Z
   17350:	1f 92       	push	r1
   17352:	8f 93       	push	r24
   17354:	1f 92       	push	r1
   17356:	cf 93       	push	r28
   17358:	83 ee       	ldi	r24, 0xE3	; 227
   1735a:	9d e2       	ldi	r25, 0x2D	; 45
   1735c:	1f 92       	push	r1
   1735e:	9f 93       	push	r25
   17360:	8f 93       	push	r24
   17362:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17366:	8d b7       	in	r24, 0x3d	; 61
   17368:	9e b7       	in	r25, 0x3e	; 62
   1736a:	0b 96       	adiw	r24, 0x0b	; 11
   1736c:	0f b6       	in	r0, 0x3f	; 63
   1736e:	f8 94       	cli
   17370:	9e bf       	out	0x3e, r25	; 62
   17372:	0f be       	out	0x3f, r0	; 63
   17374:	8d bf       	out	0x3d, r24	; 61
   17376:	5a c0       	rjmp	.+180    	; 0x1742c <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   17378:	82 2f       	mov	r24, r18
   1737a:	90 e0       	ldi	r25, 0x00	; 0
   1737c:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17380:	30 91 fe 1e 	lds	r19, 0x1EFE	; 0x801efe <listening>
   17384:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <talking>
   17388:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1738c:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17390:	89 2b       	or	r24, r25
   17392:	c9 f0       	breq	.+50     	; 0x173c6 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17394:	1f 92       	push	r1
   17396:	2f 93       	push	r18
   17398:	1f 92       	push	r1
   1739a:	3f 93       	push	r19
   1739c:	80 81       	ld	r24, Z
   1739e:	1f 92       	push	r1
   173a0:	8f 93       	push	r24
   173a2:	1f 92       	push	r1
   173a4:	cf 93       	push	r28
   173a6:	83 e9       	ldi	r24, 0x93	; 147
   173a8:	9d e2       	ldi	r25, 0x2D	; 45
   173aa:	1f 92       	push	r1
   173ac:	9f 93       	push	r25
   173ae:	8f 93       	push	r24
   173b0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   173b4:	8d b7       	in	r24, 0x3d	; 61
   173b6:	9e b7       	in	r25, 0x3e	; 62
   173b8:	0b 96       	adiw	r24, 0x0b	; 11
   173ba:	0f b6       	in	r0, 0x3f	; 63
   173bc:	f8 94       	cli
   173be:	9e bf       	out	0x3e, r25	; 62
   173c0:	0f be       	out	0x3f, r0	; 63
   173c2:	8d bf       	out	0x3d, r24	; 61
   173c4:	33 c0       	rjmp	.+102    	; 0x1742c <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   173c6:	2f 35       	cpi	r18, 0x5F	; 95
   173c8:	c9 f4       	brne	.+50     	; 0x173fc <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173ca:	1f 92       	push	r1
   173cc:	2f 93       	push	r18
   173ce:	1f 92       	push	r1
   173d0:	3f 93       	push	r19
   173d2:	80 81       	ld	r24, Z
   173d4:	1f 92       	push	r1
   173d6:	8f 93       	push	r24
   173d8:	1f 92       	push	r1
   173da:	cf 93       	push	r28
   173dc:	83 e4       	ldi	r24, 0x43	; 67
   173de:	9d e2       	ldi	r25, 0x2D	; 45
   173e0:	1f 92       	push	r1
   173e2:	9f 93       	push	r25
   173e4:	8f 93       	push	r24
   173e6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   173ea:	8d b7       	in	r24, 0x3d	; 61
   173ec:	9e b7       	in	r25, 0x3e	; 62
   173ee:	0b 96       	adiw	r24, 0x0b	; 11
   173f0:	0f b6       	in	r0, 0x3f	; 63
   173f2:	f8 94       	cli
   173f4:	9e bf       	out	0x3e, r25	; 62
   173f6:	0f be       	out	0x3f, r0	; 63
   173f8:	8d bf       	out	0x3d, r24	; 61
   173fa:	18 c0       	rjmp	.+48     	; 0x1742c <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173fc:	1f 92       	push	r1
   173fe:	2f 93       	push	r18
   17400:	1f 92       	push	r1
   17402:	3f 93       	push	r19
   17404:	80 81       	ld	r24, Z
   17406:	1f 92       	push	r1
   17408:	8f 93       	push	r24
   1740a:	1f 92       	push	r1
   1740c:	cf 93       	push	r28
   1740e:	82 ef       	ldi	r24, 0xF2	; 242
   17410:	9c e2       	ldi	r25, 0x2C	; 44
   17412:	1f 92       	push	r1
   17414:	9f 93       	push	r25
   17416:	8f 93       	push	r24
   17418:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1741c:	8d b7       	in	r24, 0x3d	; 61
   1741e:	9e b7       	in	r25, 0x3e	; 62
   17420:	0b 96       	adiw	r24, 0x0b	; 11
   17422:	0f b6       	in	r0, 0x3f	; 63
   17424:	f8 94       	cli
   17426:	9e bf       	out	0x3e, r25	; 62
   17428:	0f be       	out	0x3f, r0	; 63
   1742a:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1742c:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   17430:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   17434:	81 81       	ldd	r24, Z+1	; 0x01
   17436:	90 e0       	ldi	r25, 0x00	; 0
   17438:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
    return(0);
}
   1743c:	80 e0       	ldi	r24, 0x00	; 0
   1743e:	90 e0       	ldi	r25, 0x00	; 0
   17440:	cf 91       	pop	r28
   17442:	08 95       	ret

00017444 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17444:	8f 30       	cpi	r24, 0x0F	; 15
   17446:	29 f0       	breq	.+10     	; 0x17452 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17448:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1744c:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17450:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17452:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17456:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   1745a:	81 81       	ldd	r24, Z+1	; 0x01
   1745c:	88 23       	and	r24, r24
   1745e:	29 f0       	breq	.+10     	; 0x1746a <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17460:	87 81       	ldd	r24, Z+7	; 0x07
   17462:	90 85       	ldd	r25, Z+8	; 0x08
   17464:	80 64       	ori	r24, 0x40	; 64
   17466:	90 87       	std	Z+8, r25	; 0x08
   17468:	87 83       	std	Z+7, r24	; 0x07
   1746a:	08 95       	ret

0001746c <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   1746c:	a3 e1       	ldi	r26, 0x13	; 19
   1746e:	b0 e0       	ldi	r27, 0x00	; 0
   17470:	ec e3       	ldi	r30, 0x3C	; 60
   17472:	fa eb       	ldi	r31, 0xBA	; 186
   17474:	0c 94 35 e4 	jmp	0x1c86a	; 0x1c86a <__prologue_saves__+0x18>
   17478:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   1747a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1747e:	85 ff       	sbrs	r24, 5
   17480:	16 c0       	rjmp	.+44     	; 0x174ae <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   17482:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17486:	1f 92       	push	r1
   17488:	8f 93       	push	r24
   1748a:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   1748e:	1f 92       	push	r1
   17490:	8f 93       	push	r24
   17492:	ff 92       	push	r15
   17494:	ef 92       	push	r14
   17496:	80 ec       	ldi	r24, 0xC0	; 192
   17498:	9c e2       	ldi	r25, 0x2C	; 44
   1749a:	1f 92       	push	r1
   1749c:	9f 93       	push	r25
   1749e:	8f 93       	push	r24
   174a0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   174a4:	0f b6       	in	r0, 0x3f	; 63
   174a6:	f8 94       	cli
   174a8:	de bf       	out	0x3e, r29	; 62
   174aa:	0f be       	out	0x3f, r0	; 63
   174ac:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   174ae:	9e e7       	ldi	r25, 0x7E	; 126
   174b0:	e9 16       	cp	r14, r25
   174b2:	f1 04       	cpc	r15, r1
   174b4:	f1 f5       	brne	.+124    	; 0x17532 <Amigo_Command+0xc6>
   174b6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   174ba:	90 e0       	ldi	r25, 0x00	; 0
   174bc:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   174c0:	89 2b       	or	r24, r25
   174c2:	09 f4       	brne	.+2      	; 0x174c6 <Amigo_Command+0x5a>
   174c4:	86 c0       	rjmp	.+268    	; 0x175d2 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174c6:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   174ca:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   174ce:	81 81       	ldd	r24, Z+1	; 0x01
   174d0:	90 e0       	ldi	r25, 0x00	; 0
   174d2:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
        status = EOI_FLAG;
   174d6:	80 e0       	ldi	r24, 0x00	; 0
   174d8:	91 e0       	ldi	r25, 0x01	; 1
   174da:	9b 8b       	std	Y+19, r25	; 0x13
   174dc:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   174de:	ae 01       	movw	r20, r28
   174e0:	4e 5e       	subi	r20, 0xEE	; 238
   174e2:	5f 4f       	sbci	r21, 0xFF	; 255
   174e4:	60 e0       	ldi	r22, 0x00	; 0
   174e6:	72 e0       	ldi	r23, 0x02	; 2
   174e8:	88 ef       	ldi	r24, 0xF8	; 248
   174ea:	9c e1       	ldi	r25, 0x1C	; 28
   174ec:	0e 94 af 8c 	call	0x1195e	; 0x1195e <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   174f0:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   174f4:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   174f8:	81 81       	ldd	r24, Z+1	; 0x01
   174fa:	90 e0       	ldi	r25, 0x00	; 0
   174fc:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17500:	8a 89       	ldd	r24, Y+18	; 0x12
   17502:	9b 89       	ldd	r25, Y+19	; 0x13
   17504:	88 27       	eor	r24, r24
   17506:	90 7d       	andi	r25, 0xD0	; 208
   17508:	89 2b       	or	r24, r25
   1750a:	09 f4       	brne	.+2      	; 0x1750e <Amigo_Command+0xa2>
   1750c:	89 c2       	rjmp	.+1298   	; 0x17a20 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1750e:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17512:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17516:	81 e0       	ldi	r24, 0x01	; 1
   17518:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1751a:	87 81       	ldd	r24, Z+7	; 0x07
   1751c:	90 85       	ldd	r25, Z+8	; 0x08
   1751e:	80 62       	ori	r24, 0x20	; 32
   17520:	90 87       	std	Z+8, r25	; 0x08
   17522:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17524:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17528:	80 ff       	sbrs	r24, 0
   1752a:	7a c2       	rjmp	.+1268   	; 0x17a20 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   1752c:	8e e9       	ldi	r24, 0x9E	; 158
   1752e:	9c e2       	ldi	r25, 0x2C	; 44
   17530:	8e c0       	rjmp	.+284    	; 0x1764e <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17532:	8f e7       	ldi	r24, 0x7F	; 127
   17534:	e8 16       	cp	r14, r24
   17536:	f1 04       	cpc	r15, r1
   17538:	09 f0       	breq	.+2      	; 0x1753c <Amigo_Command+0xd0>
   1753a:	4b c0       	rjmp	.+150    	; 0x175d2 <Amigo_Command+0x166>
   1753c:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17540:	90 e0       	ldi	r25, 0x00	; 0
   17542:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17546:	89 2b       	or	r24, r25
   17548:	09 f4       	brne	.+2      	; 0x1754c <Amigo_Command+0xe0>
   1754a:	43 c0       	rjmp	.+134    	; 0x175d2 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1754c:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   17550:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   17554:	81 81       	ldd	r24, Z+1	; 0x01
   17556:	90 e0       	ldi	r25, 0x00	; 0
   17558:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   1755c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17560:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17562:	0e 94 a7 86 	call	0x10d4e	; 0x10d4e <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17566:	80 e0       	ldi	r24, 0x00	; 0
   17568:	91 e0       	ldi	r25, 0x01	; 1
   1756a:	9b 8b       	std	Y+19, r25	; 0x13
   1756c:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1756e:	ae 01       	movw	r20, r28
   17570:	4e 5e       	subi	r20, 0xEE	; 238
   17572:	5f 4f       	sbci	r21, 0xFF	; 255
   17574:	60 e0       	ldi	r22, 0x00	; 0
   17576:	72 e0       	ldi	r23, 0x02	; 2
   17578:	88 ef       	ldi	r24, 0xF8	; 248
   1757a:	9c e1       	ldi	r25, 0x1C	; 28
   1757c:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   17580:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17584:	87 ff       	sbrs	r24, 7
   17586:	04 c0       	rjmp	.+8      	; 0x17590 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   17588:	88 e4       	ldi	r24, 0x48	; 72
   1758a:	95 e1       	ldi	r25, 0x15	; 21
   1758c:	0e 94 b9 86 	call	0x10d72	; 0x10d72 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17590:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   17594:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   17598:	81 81       	ldd	r24, Z+1	; 0x01
   1759a:	90 e0       	ldi	r25, 0x00	; 0
   1759c:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
        if(status & ERROR_MASK)
   175a0:	8a 89       	ldd	r24, Y+18	; 0x12
   175a2:	9b 89       	ldd	r25, Y+19	; 0x13
   175a4:	88 27       	eor	r24, r24
   175a6:	90 7d       	andi	r25, 0xD0	; 208
   175a8:	89 2b       	or	r24, r25
   175aa:	09 f4       	brne	.+2      	; 0x175ae <Amigo_Command+0x142>
   175ac:	39 c2       	rjmp	.+1138   	; 0x17a20 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   175ae:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   175b2:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   175b6:	81 e0       	ldi	r24, 0x01	; 1
   175b8:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   175ba:	87 81       	ldd	r24, Z+7	; 0x07
   175bc:	90 85       	ldd	r25, Z+8	; 0x08
   175be:	80 62       	ori	r24, 0x20	; 32
   175c0:	90 87       	std	Z+8, r25	; 0x08
   175c2:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   175c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   175c8:	80 ff       	sbrs	r24, 0
   175ca:	2a c2       	rjmp	.+1108   	; 0x17a20 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   175cc:	8d e7       	ldi	r24, 0x7D	; 125
   175ce:	9c e2       	ldi	r25, 0x2C	; 44
   175d0:	3e c0       	rjmp	.+124    	; 0x1764e <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   175d2:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   175d6:	90 e0       	ldi	r25, 0x00	; 0
   175d8:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   175dc:	89 2b       	or	r24, r25
   175de:	19 f4       	brne	.+6      	; 0x175e6 <Amigo_Command+0x17a>
        return(0);
   175e0:	80 e0       	ldi	r24, 0x00	; 0
   175e2:	90 e0       	ldi	r25, 0x00	; 0
   175e4:	25 c2       	rjmp	.+1098   	; 0x17a30 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   175e6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   175ea:	90 e0       	ldi	r25, 0x00	; 0
   175ec:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   175f0:	89 2b       	or	r24, r25
   175f2:	b1 f7       	brne	.-20     	; 0x175e0 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   175f4:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   175f8:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   175fc:	81 81       	ldd	r24, Z+1	; 0x01
   175fe:	90 e0       	ldi	r25, 0x00	; 0
   17600:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17604:	80 e0       	ldi	r24, 0x00	; 0
   17606:	91 e0       	ldi	r25, 0x01	; 1
   17608:	9b 8b       	std	Y+19, r25	; 0x13
   1760a:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1760c:	ae 01       	movw	r20, r28
   1760e:	4e 5e       	subi	r20, 0xEE	; 238
   17610:	5f 4f       	sbci	r21, 0xFF	; 255
   17612:	60 e0       	ldi	r22, 0x00	; 0
   17614:	72 e0       	ldi	r23, 0x02	; 2
   17616:	88 ef       	ldi	r24, 0xF8	; 248
   17618:	9c e1       	ldi	r25, 0x1C	; 28
   1761a:	0e 94 01 8c 	call	0x11802	; 0x11802 <gpib_read_str>
   1761e:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17620:	8a 89       	ldd	r24, Y+18	; 0x12
   17622:	9b 89       	ldd	r25, Y+19	; 0x13
   17624:	88 27       	eor	r24, r24
   17626:	90 7d       	andi	r25, 0xD0	; 208
   17628:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1762c:	89 2b       	or	r24, r25
   1762e:	c1 f0       	breq	.+48     	; 0x17660 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17630:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17634:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17638:	81 e0       	ldi	r24, 0x01	; 1
   1763a:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1763c:	87 81       	ldd	r24, Z+7	; 0x07
   1763e:	90 85       	ldd	r25, Z+8	; 0x08
   17640:	80 62       	ori	r24, 0x20	; 32
   17642:	90 87       	std	Z+8, r25	; 0x08
   17644:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   17646:	20 ff       	sbrs	r18, 0
   17648:	eb c1       	rjmp	.+982    	; 0x17a20 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   1764a:	8c e5       	ldi	r24, 0x5C	; 92
   1764c:	9c e2       	ldi	r25, 0x2C	; 44
   1764e:	1f 92       	push	r1
   17650:	9f 93       	push	r25
   17652:	8f 93       	push	r24
   17654:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17658:	0f 90       	pop	r0
   1765a:	0f 90       	pop	r0
   1765c:	0f 90       	pop	r0
   1765e:	e0 c1       	rjmp	.+960    	; 0x17a20 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   17660:	25 ff       	sbrs	r18, 5
   17662:	10 c0       	rjmp	.+32     	; 0x17684 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17664:	1f 93       	push	r17
   17666:	0f 93       	push	r16
   17668:	ff 92       	push	r15
   1766a:	ef 92       	push	r14
   1766c:	8d e2       	ldi	r24, 0x2D	; 45
   1766e:	9c e2       	ldi	r25, 0x2C	; 44
   17670:	1f 92       	push	r1
   17672:	9f 93       	push	r25
   17674:	8f 93       	push	r24
   17676:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1767a:	0f b6       	in	r0, 0x3f	; 63
   1767c:	f8 94       	cli
   1767e:	de bf       	out	0x3e, r29	; 62
   17680:	0f be       	out	0x3f, r0	; 63
   17682:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   17684:	01 15       	cp	r16, r1
   17686:	11 05       	cpc	r17, r1
   17688:	61 f4       	brne	.+24     	; 0x176a2 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   1768a:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1768e:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17692:	81 e0       	ldi	r24, 0x01	; 1
   17694:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17696:	87 81       	ldd	r24, Z+7	; 0x07
   17698:	90 85       	ldd	r25, Z+8	; 0x08
   1769a:	80 62       	ori	r24, 0x20	; 32
   1769c:	90 87       	std	Z+8, r25	; 0x08
   1769e:	87 83       	std	Z+7, r24	; 0x07
   176a0:	bf c1       	rjmp	.+894    	; 0x17a20 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   176a2:	60 91 f8 1c 	lds	r22, 0x1CF8	; 0x801cf8 <gpib_iobuff>

    if (secondary == 0x68)
   176a6:	98 e6       	ldi	r25, 0x68	; 104
   176a8:	e9 16       	cp	r14, r25
   176aa:	f1 04       	cpc	r15, r1
   176ac:	09 f0       	breq	.+2      	; 0x176b0 <Amigo_Command+0x244>
   176ae:	28 c1       	rjmp	.+592    	; 0x17900 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   176b0:	61 11       	cpse	r22, r1
   176b2:	2e c0       	rjmp	.+92     	; 0x17710 <Amigo_Command+0x2a4>
   176b4:	02 30       	cpi	r16, 0x02	; 2
   176b6:	11 05       	cpc	r17, r1
   176b8:	09 f0       	breq	.+2      	; 0x176bc <Amigo_Command+0x250>
   176ba:	b7 c1       	rjmp	.+878    	; 0x17a2a <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   176bc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   176c0:	85 ff       	sbrs	r24, 5
   176c2:	0a c0       	rjmp	.+20     	; 0x176d8 <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   176c4:	8d e0       	ldi	r24, 0x0D	; 13
   176c6:	9c e2       	ldi	r25, 0x2C	; 44
   176c8:	1f 92       	push	r1
   176ca:	9f 93       	push	r25
   176cc:	8f 93       	push	r24
   176ce:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   176d2:	0f 90       	pop	r0
   176d4:	0f 90       	pop	r0
   176d6:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   176d8:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   176dc:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   176e0:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   176e2:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   176e4:	10 86       	std	Z+8, r1	; 0x08
   176e6:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   176e8:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   176ea:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
   176ee:	98 2f       	mov	r25, r24
   176f0:	92 95       	swap	r25
   176f2:	96 95       	lsr	r25
   176f4:	96 95       	lsr	r25
   176f6:	93 70       	andi	r25, 0x03	; 3
   176f8:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   176fa:	8f 73       	andi	r24, 0x3F	; 63
   176fc:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   176fe:	ce 01       	movw	r24, r28
   17700:	01 96       	adiw	r24, 0x01	; 1
   17702:	18 da       	rcall	.-3024   	; 0x16b34 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17704:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17708:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   1770c:	85 e0       	ldi	r24, 0x05	; 5
   1770e:	5c c1       	rjmp	.+696    	; 0x179c8 <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17710:	62 30       	cpi	r22, 0x02	; 2
   17712:	09 f0       	breq	.+2      	; 0x17716 <Amigo_Command+0x2aa>
   17714:	3f c0       	rjmp	.+126    	; 0x17794 <Amigo_Command+0x328>
   17716:	05 30       	cpi	r16, 0x05	; 5
   17718:	11 05       	cpc	r17, r1
   1771a:	d1 f4       	brne	.+52     	; 0x17750 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   1771c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17720:	85 ff       	sbrs	r24, 5
   17722:	0a c0       	rjmp	.+20     	; 0x17738 <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   17724:	89 ef       	ldi	r24, 0xF9	; 249
   17726:	9b e2       	ldi	r25, 0x2B	; 43
   17728:	1f 92       	push	r1
   1772a:	9f 93       	push	r25
   1772c:	8f 93       	push	r24
   1772e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17732:	0f 90       	pop	r0
   17734:	0f 90       	pop	r0
   17736:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17738:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
   1773c:	83 de       	rcall	.-762    	; 0x17444 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   1773e:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x2>
   17742:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17744:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x3>
   17748:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   1774a:	80 91 fc 1c 	lds	r24, 0x1CFC	; 0x801cfc <gpib_iobuff+0x4>
   1774e:	1d c0       	rjmp	.+58     	; 0x1778a <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17750:	06 30       	cpi	r16, 0x06	; 6
   17752:	11 05       	cpc	r17, r1
   17754:	09 f0       	breq	.+2      	; 0x17758 <Amigo_Command+0x2ec>
   17756:	69 c1       	rjmp	.+722    	; 0x17a2a <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17758:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1775c:	85 ff       	sbrs	r24, 5
   1775e:	0a c0       	rjmp	.+20     	; 0x17774 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   17760:	85 ee       	ldi	r24, 0xE5	; 229
   17762:	9b e2       	ldi	r25, 0x2B	; 43
   17764:	1f 92       	push	r1
   17766:	9f 93       	push	r25
   17768:	8f 93       	push	r24
   1776a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1776e:	0f 90       	pop	r0
   17770:	0f 90       	pop	r0
   17772:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17774:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
   17778:	65 de       	rcall	.-822    	; 0x17444 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1777a:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x3>
   1777e:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17780:	80 91 fc 1c 	lds	r24, 0x1CFC	; 0x801cfc <gpib_iobuff+0x4>
   17784:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17786:	80 91 fd 1c 	lds	r24, 0x1CFD	; 0x801cfd <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1778a:	8e 83       	std	Y+6, r24	; 0x06
   1778c:	ce 01       	movw	r24, r28
   1778e:	01 96       	adiw	r24, 0x01	; 1
   17790:	d1 d9       	rcall	.-3166   	; 0x16b34 <amigo_seek>
   17792:	1b c1       	rjmp	.+566    	; 0x179ca <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17794:	63 30       	cpi	r22, 0x03	; 3
   17796:	e9 f4       	brne	.+58     	; 0x177d2 <Amigo_Command+0x366>
   17798:	02 30       	cpi	r16, 0x02	; 2
   1779a:	11 05       	cpc	r17, r1
   1779c:	09 f0       	breq	.+2      	; 0x177a0 <Amigo_Command+0x334>
   1779e:	45 c1       	rjmp	.+650    	; 0x17a2a <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   177a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   177a4:	85 ff       	sbrs	r24, 5
   177a6:	0a c0       	rjmp	.+20     	; 0x177bc <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   177a8:	8c eb       	ldi	r24, 0xBC	; 188
   177aa:	9b e2       	ldi	r25, 0x2B	; 43
   177ac:	1f 92       	push	r1
   177ae:	9f 93       	push	r25
   177b0:	8f 93       	push	r24
   177b2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   177b6:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177b8:	0f 90       	pop	r0
   177ba:	0f 90       	pop	r0
   177bc:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            amigo_request_status();
   177c0:	41 de       	rcall	.-894    	; 0x17444 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   177c2:	7b d8       	rcall	.-3850   	; 0x168ba <amigo_request_status>
   177c4:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   177c8:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   177cc:	83 e0       	ldi	r24, 0x03	; 3
   177ce:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   177d0:	27 c1       	rjmp	.+590    	; 0x17a20 <Amigo_Command+0x5b4>
   177d2:	65 30       	cpi	r22, 0x05	; 5
   177d4:	d9 f4       	brne	.+54     	; 0x1780c <Amigo_Command+0x3a0>
   177d6:	02 30       	cpi	r16, 0x02	; 2
   177d8:	11 05       	cpc	r17, r1
   177da:	09 f0       	breq	.+2      	; 0x177de <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   177dc:	26 c1       	rjmp	.+588    	; 0x17a2a <Amigo_Command+0x5be>
   177de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   177e2:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   177e4:	0a c0       	rjmp	.+20     	; 0x177fa <Amigo_Command+0x38e>
   177e6:	8b e9       	ldi	r24, 0x9B	; 155
   177e8:	9b e2       	ldi	r25, 0x2B	; 43
   177ea:	1f 92       	push	r1
   177ec:	9f 93       	push	r25
   177ee:	8f 93       	push	r24
   177f0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   177f4:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177f6:	0f 90       	pop	r0
   177f8:	0f 90       	pop	r0
   177fa:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   177fe:	22 de       	rcall	.-956    	; 0x17444 <amigo_check_unit>
   17800:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17804:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17808:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   1780a:	de c0       	rjmp	.+444    	; 0x179c8 <Amigo_Command+0x55c>
   1780c:	67 30       	cpi	r22, 0x07	; 7
   1780e:	f9 f4       	brne	.+62     	; 0x1784e <Amigo_Command+0x3e2>
   17810:	04 30       	cpi	r16, 0x04	; 4
   17812:	11 05       	cpc	r17, r1
   17814:	09 f0       	breq	.+2      	; 0x17818 <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17816:	09 c1       	rjmp	.+530    	; 0x17a2a <Amigo_Command+0x5be>
   17818:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1781c:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   1781e:	0a c0       	rjmp	.+20     	; 0x17834 <Amigo_Command+0x3c8>
   17820:	8b e8       	ldi	r24, 0x8B	; 139
   17822:	9b e2       	ldi	r25, 0x2B	; 43
   17824:	1f 92       	push	r1
   17826:	9f 93       	push	r25
   17828:	8f 93       	push	r24
   1782a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1782e:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17830:	0f 90       	pop	r0
   17832:	0f 90       	pop	r0
   17834:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17838:	05 de       	rcall	.-1014   	; 0x17444 <amigo_check_unit>
   1783a:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1783e:	90 e0       	ldi	r25, 0x00	; 0
   17840:	98 2f       	mov	r25, r24
   17842:	88 27       	eor	r24, r24
   17844:	20 91 fb 1c 	lds	r18, 0x1CFB	; 0x801cfb <gpib_iobuff+0x3>
   17848:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   1784a:	9f d9       	rcall	.-3266   	; 0x16b8a <amigo_verify>
   1784c:	f1 c0       	rjmp	.+482    	; 0x17a30 <Amigo_Command+0x5c4>
   1784e:	68 30       	cpi	r22, 0x08	; 8
   17850:	d9 f4       	brne	.+54     	; 0x17888 <Amigo_Command+0x41c>
   17852:	02 30       	cpi	r16, 0x02	; 2
   17854:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17856:	09 f0       	breq	.+2      	; 0x1785a <Amigo_Command+0x3ee>
   17858:	e8 c0       	rjmp	.+464    	; 0x17a2a <Amigo_Command+0x5be>
   1785a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   1785e:	85 ff       	sbrs	r24, 5
   17860:	0a c0       	rjmp	.+20     	; 0x17876 <Amigo_Command+0x40a>
   17862:	89 e6       	ldi	r24, 0x69	; 105
   17864:	9b e2       	ldi	r25, 0x2B	; 43
   17866:	1f 92       	push	r1
   17868:	9f 93       	push	r25
   1786a:	8f 93       	push	r24
   1786c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17870:	0f 90       	pop	r0
   17872:	0f 90       	pop	r0
   17874:	0f 90       	pop	r0
   17876:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1787a:	e4 dd       	rcall	.-1080   	; 0x17444 <amigo_check_unit>
   1787c:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17880:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17884:	88 e0       	ldi	r24, 0x08	; 8
   17886:	a0 c0       	rjmp	.+320    	; 0x179c8 <Amigo_Command+0x55c>
   17888:	86 2f       	mov	r24, r22
   1788a:	8f 7d       	andi	r24, 0xDF	; 223
   1788c:	8b 30       	cpi	r24, 0x0B	; 11
   1788e:	d9 f4       	brne	.+54     	; 0x178c6 <Amigo_Command+0x45a>
   17890:	02 30       	cpi	r16, 0x02	; 2
   17892:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17894:	09 f0       	breq	.+2      	; 0x17898 <Amigo_Command+0x42c>
   17896:	c9 c0       	rjmp	.+402    	; 0x17a2a <Amigo_Command+0x5be>
   17898:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   1789c:	85 ff       	sbrs	r24, 5
   1789e:	0a c0       	rjmp	.+20     	; 0x178b4 <Amigo_Command+0x448>
   178a0:	8d e4       	ldi	r24, 0x4D	; 77
   178a2:	9b e2       	ldi	r25, 0x2B	; 43
   178a4:	1f 92       	push	r1
   178a6:	9f 93       	push	r25
   178a8:	8f 93       	push	r24
   178aa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178ae:	0f 90       	pop	r0
   178b0:	0f 90       	pop	r0
   178b2:	0f 90       	pop	r0
   178b4:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   178b8:	c5 dd       	rcall	.-1142   	; 0x17444 <amigo_check_unit>
   178ba:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   178be:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   178c2:	8a e0       	ldi	r24, 0x0A	; 10
   178c4:	81 c0       	rjmp	.+258    	; 0x179c8 <Amigo_Command+0x55c>
   178c6:	64 31       	cpi	r22, 0x14	; 20
   178c8:	09 f0       	breq	.+2      	; 0x178cc <Amigo_Command+0x460>
   178ca:	af c0       	rjmp	.+350    	; 0x17a2a <Amigo_Command+0x5be>
   178cc:	02 30       	cpi	r16, 0x02	; 2
   178ce:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   178d0:	09 f0       	breq	.+2      	; 0x178d4 <Amigo_Command+0x468>
   178d2:	ab c0       	rjmp	.+342    	; 0x17a2a <Amigo_Command+0x5be>
   178d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   178d8:	85 ff       	sbrs	r24, 5
   178da:	0a c0       	rjmp	.+20     	; 0x178f0 <Amigo_Command+0x484>
   178dc:	84 e2       	ldi	r24, 0x24	; 36
   178de:	9b e2       	ldi	r25, 0x2B	; 43
   178e0:	1f 92       	push	r1
   178e2:	9f 93       	push	r25
   178e4:	8f 93       	push	r24
   178e6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   178ea:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   178ec:	0f 90       	pop	r0
   178ee:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   178f0:	0e 94 4f b4 	call	0x1689e	; 0x1689e <amigo_request_logical_address>
   178f4:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   178f8:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   178fc:	84 e0       	ldi	r24, 0x04	; 4
   178fe:	64 c0       	rjmp	.+200    	; 0x179c8 <Amigo_Command+0x55c>
   17900:	89 e6       	ldi	r24, 0x69	; 105
   17902:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   17904:	f1 04       	cpc	r15, r1
   17906:	f1 f4       	brne	.+60     	; 0x17944 <Amigo_Command+0x4d8>
   17908:	68 30       	cpi	r22, 0x08	; 8
   1790a:	09 f0       	breq	.+2      	; 0x1790e <Amigo_Command+0x4a2>
   1790c:	8e c0       	rjmp	.+284    	; 0x17a2a <Amigo_Command+0x5be>
   1790e:	02 30       	cpi	r16, 0x02	; 2
   17910:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17912:	09 f0       	breq	.+2      	; 0x17916 <Amigo_Command+0x4aa>
   17914:	8a c0       	rjmp	.+276    	; 0x17a2a <Amigo_Command+0x5be>
   17916:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   1791a:	85 ff       	sbrs	r24, 5
   1791c:	0a c0       	rjmp	.+20     	; 0x17932 <Amigo_Command+0x4c6>
   1791e:	84 e0       	ldi	r24, 0x04	; 4
   17920:	9b e2       	ldi	r25, 0x2B	; 43
   17922:	1f 92       	push	r1
   17924:	9f 93       	push	r25
   17926:	8f 93       	push	r24
   17928:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1792c:	0f 90       	pop	r0
   1792e:	0f 90       	pop	r0
   17930:	0f 90       	pop	r0
   17932:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17936:	86 dd       	rcall	.-1268   	; 0x17444 <amigo_check_unit>
   17938:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   1793c:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17940:	89 e0       	ldi	r24, 0x09	; 9
   17942:	42 c0       	rjmp	.+132    	; 0x179c8 <Amigo_Command+0x55c>
   17944:	9a e6       	ldi	r25, 0x6A	; 106
   17946:	e9 16       	cp	r14, r25
   17948:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   1794a:	09 f0       	breq	.+2      	; 0x1794e <Amigo_Command+0x4e2>
   1794c:	47 c0       	rjmp	.+142    	; 0x179dc <Amigo_Command+0x570>
   1794e:	68 30       	cpi	r22, 0x08	; 8
   17950:	f1 f4       	brne	.+60     	; 0x1798e <Amigo_Command+0x522>
   17952:	02 30       	cpi	r16, 0x02	; 2
   17954:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17956:	09 f0       	breq	.+2      	; 0x1795a <Amigo_Command+0x4ee>
   17958:	68 c0       	rjmp	.+208    	; 0x17a2a <Amigo_Command+0x5be>
   1795a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1795e:	85 ff       	sbrs	r24, 5
   17960:	0a c0       	rjmp	.+20     	; 0x17976 <Amigo_Command+0x50a>
   17962:	89 ed       	ldi	r24, 0xD9	; 217
   17964:	9a e2       	ldi	r25, 0x2A	; 42
   17966:	1f 92       	push	r1
   17968:	9f 93       	push	r25
   1796a:	8f 93       	push	r24
   1796c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17970:	0f 90       	pop	r0
   17972:	0f 90       	pop	r0
   17974:	0f 90       	pop	r0
   17976:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   1797a:	64 dd       	rcall	.-1336   	; 0x17444 <amigo_check_unit>
   1797c:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17980:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
            amigo_request_status();
   17984:	82 e0       	ldi	r24, 0x02	; 2
   17986:	80 83       	st	Z, r24
   17988:	0e 94 5d b4 	call	0x168ba	; 0x168ba <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   1798c:	49 c0       	rjmp	.+146    	; 0x17a20 <Amigo_Command+0x5b4>
   1798e:	65 30       	cpi	r22, 0x05	; 5
   17990:	09 f0       	breq	.+2      	; 0x17994 <Amigo_Command+0x528>
   17992:	4b c0       	rjmp	.+150    	; 0x17a2a <Amigo_Command+0x5be>
   17994:	02 30       	cpi	r16, 0x02	; 2
   17996:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17998:	09 f0       	breq	.+2      	; 0x1799c <Amigo_Command+0x530>
   1799a:	47 c0       	rjmp	.+142    	; 0x17a2a <Amigo_Command+0x5be>
   1799c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   179a0:	85 ff       	sbrs	r24, 5
   179a2:	0a c0       	rjmp	.+20     	; 0x179b8 <Amigo_Command+0x54c>
   179a4:	8a eb       	ldi	r24, 0xBA	; 186
   179a6:	9a e2       	ldi	r25, 0x2A	; 42
   179a8:	1f 92       	push	r1
   179aa:	9f 93       	push	r25
   179ac:	8f 93       	push	r24
   179ae:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179b2:	0f 90       	pop	r0
   179b4:	0f 90       	pop	r0
   179b6:	0f 90       	pop	r0
   179b8:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   179bc:	43 dd       	rcall	.-1402   	; 0x17444 <amigo_check_unit>
   179be:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   179c2:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   179c6:	87 e0       	ldi	r24, 0x07	; 7
   179c8:	80 83       	st	Z, r24
   179ca:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   179ce:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   179d2:	81 81       	ldd	r24, Z+1	; 0x01
   179d4:	90 e0       	ldi	r25, 0x00	; 0
   179d6:	0e 94 5f 87 	call	0x10ebe	; 0x10ebe <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   179da:	22 c0       	rjmp	.+68     	; 0x17a20 <Amigo_Command+0x5b4>
   179dc:	8c e6       	ldi	r24, 0x6C	; 108
   179de:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   179e0:	f1 04       	cpc	r15, r1
   179e2:	d1 f4       	brne	.+52     	; 0x17a18 <Amigo_Command+0x5ac>
   179e4:	68 31       	cpi	r22, 0x18	; 24
   179e6:	09 f5       	brne	.+66     	; 0x17a2a <Amigo_Command+0x5be>
   179e8:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   179ea:	11 05       	cpc	r17, r1
   179ec:	f1 f4       	brne	.+60     	; 0x17a2a <Amigo_Command+0x5be>
   179ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   179f2:	85 ff       	sbrs	r24, 5
   179f4:	0a c0       	rjmp	.+20     	; 0x17a0a <Amigo_Command+0x59e>
   179f6:	8a ea       	ldi	r24, 0xAA	; 170
   179f8:	9a e2       	ldi	r25, 0x2A	; 42
   179fa:	1f 92       	push	r1
   179fc:	9f 93       	push	r25
   179fe:	8f 93       	push	r24
   17a00:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a04:	0f 90       	pop	r0
   17a06:	0f 90       	pop	r0
   17a08:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17a0a:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x1>
   17a0e:	1a dd       	rcall	.-1484   	; 0x17444 <amigo_check_unit>
   17a10:	80 91 fc 1c 	lds	r24, 0x1CFC	; 0x801cfc <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17a14:	4b d9       	rcall	.-3434   	; 0x16cac <amigo_format>
   17a16:	04 c0       	rjmp	.+8      	; 0x17a20 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17a18:	90 e7       	ldi	r25, 0x70	; 112
   17a1a:	e9 16       	cp	r14, r25
   17a1c:	f1 04       	cpc	r15, r1
   17a1e:	29 f4       	brne	.+10     	; 0x17a2a <Amigo_Command+0x5be>
   17a20:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   17a22:	9b 89       	ldd	r25, Y+19	; 0x13
   17a24:	88 27       	eor	r24, r24
   17a26:	90 7d       	andi	r25, 0xD0	; 208
   17a28:	03 c0       	rjmp	.+6      	; 0x17a30 <Amigo_Command+0x5c4>
}
   17a2a:	a8 01       	movw	r20, r16
   17a2c:	8e 2d       	mov	r24, r14
   17a2e:	d1 db       	rcall	.-2142   	; 0x171d2 <amigo_todo_op>
   17a30:	63 96       	adiw	r28, 0x13	; 19
   17a32:	e6 e0       	ldi	r30, 0x06	; 6
   17a34:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00017a38 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17a38:	cf 93       	push	r28
   17a3a:	df 93       	push	r29
   17a3c:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17a3e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a42:	85 ff       	sbrs	r24, 5
   17a44:	19 c0       	rjmp	.+50     	; 0x17a78 <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17a46:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17a4a:	1f 92       	push	r1
   17a4c:	8f 93       	push	r24
   17a4e:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17a52:	1f 92       	push	r1
   17a54:	8f 93       	push	r24
   17a56:	df 93       	push	r29
   17a58:	cf 93       	push	r28
   17a5a:	88 e7       	ldi	r24, 0x78	; 120
   17a5c:	9a e2       	ldi	r25, 0x2A	; 42
   17a5e:	1f 92       	push	r1
   17a60:	9f 93       	push	r25
   17a62:	8f 93       	push	r24
   17a64:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17a68:	8d b7       	in	r24, 0x3d	; 61
   17a6a:	9e b7       	in	r25, 0x3e	; 62
   17a6c:	09 96       	adiw	r24, 0x09	; 9
   17a6e:	0f b6       	in	r0, 0x3f	; 63
   17a70:	f8 94       	cli
   17a72:	9e bf       	out	0x3e, r25	; 62
   17a74:	0f be       	out	0x3f, r0	; 63
   17a76:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17a78:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17a7c:	8f 35       	cpi	r24, 0x5F	; 95
   17a7e:	09 f4       	brne	.+2      	; 0x17a82 <Amigo_Execute+0x4a>
   17a80:	ad c0       	rjmp	.+346    	; 0x17bdc <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a82:	90 e0       	ldi	r25, 0x00	; 0
   17a84:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17a88:	89 2b       	or	r24, r25
   17a8a:	39 f0       	breq	.+14     	; 0x17a9a <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17a8c:	ce 01       	movw	r24, r28
   17a8e:	87 7f       	andi	r24, 0xF7	; 247
   17a90:	80 36       	cpi	r24, 0x60	; 96
   17a92:	91 05       	cpc	r25, r1
   17a94:	09 f0       	breq	.+2      	; 0x17a98 <Amigo_Execute+0x60>
   17a96:	a2 c0       	rjmp	.+324    	; 0x17bdc <Amigo_Execute+0x1a4>
   17a98:	08 c0       	rjmp	.+16     	; 0x17aaa <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17a9a:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17a9e:	90 e0       	ldi	r25, 0x00	; 0
   17aa0:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17aa4:	89 2b       	or	r24, r25
   17aa6:	91 f7       	brne	.-28     	; 0x17a8c <Amigo_Execute+0x54>
   17aa8:	99 c0       	rjmp	.+306    	; 0x17bdc <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17aaa:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   17aae:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   17ab2:	81 81       	ldd	r24, Z+1	; 0x01
   17ab4:	90 e0       	ldi	r25, 0x00	; 0
   17ab6:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>

    if(secondary == 0x60)
   17aba:	c0 36       	cpi	r28, 0x60	; 96
   17abc:	d1 05       	cpc	r29, r1
   17abe:	09 f0       	breq	.+2      	; 0x17ac2 <Amigo_Execute+0x8a>
   17ac0:	4e c0       	rjmp	.+156    	; 0x17b5e <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   17ac2:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17ac6:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17aca:	e0 81       	ld	r30, Z
   17acc:	8e 2f       	mov	r24, r30
   17ace:	90 e0       	ldi	r25, 0x00	; 0
   17ad0:	8b 30       	cpi	r24, 0x0B	; 11
   17ad2:	91 05       	cpc	r25, r1
   17ad4:	08 f0       	brcs	.+2      	; 0x17ad8 <Amigo_Execute+0xa0>
   17ad6:	41 c0       	rjmp	.+130    	; 0x17b5a <Amigo_Execute+0x122>
   17ad8:	fc 01       	movw	r30, r24
   17ada:	e0 52       	subi	r30, 0x20	; 32
   17adc:	ff 4f       	sbci	r31, 0xFF	; 255
   17ade:	0c 94 e5 e3 	jmp	0x1c7ca	; 0x1c7ca <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17ae2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ae6:	85 ff       	sbrs	r24, 5
   17ae8:	18 c0       	rjmp	.+48     	; 0x17b1a <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17aea:	88 e5       	ldi	r24, 0x58	; 88
   17aec:	9a e2       	ldi	r25, 0x2A	; 42
   17aee:	0d c0       	rjmp	.+26     	; 0x17b0a <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17af0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17af4:	85 ff       	sbrs	r24, 5
   17af6:	11 c0       	rjmp	.+34     	; 0x17b1a <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17af8:	87 e3       	ldi	r24, 0x37	; 55
   17afa:	9a e2       	ldi	r25, 0x2A	; 42
   17afc:	06 c0       	rjmp	.+12     	; 0x17b0a <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17afe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b02:	85 ff       	sbrs	r24, 5
   17b04:	0a c0       	rjmp	.+20     	; 0x17b1a <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   17b06:	88 e1       	ldi	r24, 0x18	; 24
   17b08:	9a e2       	ldi	r25, 0x2A	; 42
   17b0a:	1f 92       	push	r1
   17b0c:	9f 93       	push	r25
   17b0e:	8f 93       	push	r24
   17b10:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17b14:	0f 90       	pop	r0
   17b16:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   17b18:	0f 90       	pop	r0
   17b1a:	5a d9       	rcall	.-3404   	; 0x16dd0 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b1c:	61 c0       	rjmp	.+194    	; 0x17be0 <Amigo_Execute+0x1a8>
   17b1e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b22:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17b24:	18 c0       	rjmp	.+48     	; 0x17b56 <Amigo_Execute+0x11e>
   17b26:	86 ef       	ldi	r24, 0xF6	; 246
   17b28:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17b2a:	0d c0       	rjmp	.+26     	; 0x17b46 <Amigo_Execute+0x10e>
   17b2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b30:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17b32:	11 c0       	rjmp	.+34     	; 0x17b56 <Amigo_Execute+0x11e>
   17b34:	8a ed       	ldi	r24, 0xDA	; 218
   17b36:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b38:	06 c0       	rjmp	.+12     	; 0x17b46 <Amigo_Execute+0x10e>
   17b3a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b3e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17b40:	0a c0       	rjmp	.+20     	; 0x17b56 <Amigo_Execute+0x11e>
   17b42:	8a eb       	ldi	r24, 0xBA	; 186
   17b44:	99 e2       	ldi	r25, 0x29	; 41
   17b46:	1f 92       	push	r1
   17b48:	9f 93       	push	r25
   17b4a:	8f 93       	push	r24
   17b4c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17b50:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   17b52:	0f 90       	pop	r0
   17b54:	0f 90       	pop	r0
   17b56:	00 da       	rcall	.-3072   	; 0x16f58 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17b58:	43 c0       	rjmp	.+134    	; 0x17be0 <Amigo_Execute+0x1a8>
   17b5a:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17b5c:	3d c0       	rjmp	.+122    	; 0x17bd8 <Amigo_Execute+0x1a0>
   17b5e:	c8 36       	cpi	r28, 0x68	; 104
   17b60:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17b62:	e1 f5       	brne	.+120    	; 0x17bdc <Amigo_Execute+0x1a4>
   17b64:	e0 91 77 19 	lds	r30, 0x1977	; 0x801977 <AMIGOs>
   17b68:	f0 91 78 19 	lds	r31, 0x1978	; 0x801978 <AMIGOs+0x1>
   17b6c:	80 81       	ld	r24, Z
   17b6e:	82 30       	cpi	r24, 0x02	; 2
   17b70:	81 f0       	breq	.+32     	; 0x17b92 <Amigo_Execute+0x15a>
   17b72:	18 f4       	brcc	.+6      	; 0x17b7a <Amigo_Execute+0x142>
   17b74:	88 23       	and	r24, r24
   17b76:	91 f1       	breq	.+100    	; 0x17bdc <Amigo_Execute+0x1a4>
   17b78:	2e c0       	rjmp	.+92     	; 0x17bd6 <Amigo_Execute+0x19e>
   17b7a:	83 30       	cpi	r24, 0x03	; 3
   17b7c:	19 f0       	breq	.+6      	; 0x17b84 <Amigo_Execute+0x14c>
   17b7e:	84 30       	cpi	r24, 0x04	; 4
   17b80:	c9 f0       	breq	.+50     	; 0x17bb4 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b82:	29 c0       	rjmp	.+82     	; 0x17bd6 <Amigo_Execute+0x19e>
   17b84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b88:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17b8a:	11 c0       	rjmp	.+34     	; 0x17bae <Amigo_Execute+0x176>
   17b8c:	81 e9       	ldi	r24, 0x91	; 145
   17b8e:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b90:	06 c0       	rjmp	.+12     	; 0x17b9e <Amigo_Execute+0x166>
   17b92:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b96:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17b98:	0a c0       	rjmp	.+20     	; 0x17bae <Amigo_Execute+0x176>
   17b9a:	86 e6       	ldi	r24, 0x66	; 102
   17b9c:	99 e2       	ldi	r25, 0x29	; 41
   17b9e:	1f 92       	push	r1
   17ba0:	9f 93       	push	r25
   17ba2:	8f 93       	push	r24
   17ba4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17ba8:	0f 90       	pop	r0
   17baa:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   17bac:	0f 90       	pop	r0
   17bae:	0e 94 13 b5 	call	0x16a26	; 0x16a26 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17bb2:	16 c0       	rjmp	.+44     	; 0x17be0 <Amigo_Execute+0x1a8>
   17bb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17bb8:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17bba:	0a c0       	rjmp	.+20     	; 0x17bd0 <Amigo_Execute+0x198>
   17bbc:	8d e3       	ldi	r24, 0x3D	; 61
   17bbe:	99 e2       	ldi	r25, 0x29	; 41
   17bc0:	1f 92       	push	r1
   17bc2:	9f 93       	push	r25
   17bc4:	8f 93       	push	r24
   17bc6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17bca:	0f 90       	pop	r0
   17bcc:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   17bce:	0f 90       	pop	r0
   17bd0:	0e 94 b5 b4 	call	0x1696a	; 0x1696a <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17bd4:	05 c0       	rjmp	.+10     	; 0x17be0 <Amigo_Execute+0x1a8>
   17bd6:	88 e6       	ldi	r24, 0x68	; 104
   17bd8:	a5 db       	rcall	.-2230   	; 0x17324 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17bda:	02 c0       	rjmp	.+4      	; 0x17be0 <Amigo_Execute+0x1a8>
   17bdc:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17bde:	90 e0       	ldi	r25, 0x00	; 0
   17be0:	df 91       	pop	r29
   17be2:	cf 91       	pop	r28
   17be4:	08 95       	ret

00017be6 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17be6:	cf 93       	push	r28
   17be8:	df 93       	push	r29
   17bea:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17bec:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17bf0:	90 e0       	ldi	r25, 0x00	; 0
   17bf2:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17bf6:	89 2b       	or	r24, r25
   17bf8:	51 f0       	breq	.+20     	; 0x17c0e <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17bfa:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17bfe:	8f 35       	cpi	r24, 0x5F	; 95
   17c00:	71 f4       	brne	.+28     	; 0x17c1e <AMIGO_COMMANDS+0x38>
   17c02:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17c06:	90 e0       	ldi	r25, 0x00	; 0
   17c08:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17c0c:	08 c0       	rjmp	.+16     	; 0x17c1e <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17c0e:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17c12:	90 e0       	ldi	r25, 0x00	; 0
   17c14:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17c18:	89 2b       	or	r24, r25
   17c1a:	79 f7       	brne	.-34     	; 0x17bfa <AMIGO_COMMANDS+0x14>
   17c1c:	76 c0       	rjmp	.+236    	; 0x17d0a <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17c1e:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17c22:	81 11       	cpse	r24, r1
   17c24:	05 c0       	rjmp	.+10     	; 0x17c30 <AMIGO_COMMANDS+0x4a>
   17c26:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17c2a:	90 e0       	ldi	r25, 0x00	; 0
   17c2c:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c30:	c0 36       	cpi	r28, 0x60	; 96
   17c32:	99 f4       	brne	.+38     	; 0x17c5a <AMIGO_COMMANDS+0x74>
   17c34:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17c38:	90 e0       	ldi	r25, 0x00	; 0
   17c3a:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17c3e:	89 2b       	or	r24, r25
   17c40:	19 f0       	breq	.+6      	; 0x17c48 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17c42:	80 e6       	ldi	r24, 0x60	; 96
   17c44:	90 e0       	ldi	r25, 0x00	; 0
   17c46:	14 c0       	rjmp	.+40     	; 0x17c70 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c48:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17c4c:	90 e0       	ldi	r25, 0x00	; 0
   17c4e:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17c52:	89 2b       	or	r24, r25
   17c54:	09 f4       	brne	.+2      	; 0x17c58 <AMIGO_COMMANDS+0x72>
   17c56:	59 c0       	rjmp	.+178    	; 0x17d0a <AMIGO_COMMANDS+0x124>
   17c58:	f4 cf       	rjmp	.-24     	; 0x17c42 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17c5a:	c8 36       	cpi	r28, 0x68	; 104
   17c5c:	c1 f4       	brne	.+48     	; 0x17c8e <AMIGO_COMMANDS+0xa8>
   17c5e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17c62:	90 e0       	ldi	r25, 0x00	; 0
   17c64:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17c68:	89 2b       	or	r24, r25
   17c6a:	21 f0       	breq	.+8      	; 0x17c74 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17c6c:	88 e6       	ldi	r24, 0x68	; 104
   17c6e:	90 e0       	ldi	r25, 0x00	; 0
   17c70:	e3 de       	rcall	.-570    	; 0x17a38 <Amigo_Execute>
   17c72:	0b c0       	rjmp	.+22     	; 0x17c8a <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   17c74:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17c78:	90 e0       	ldi	r25, 0x00	; 0
   17c7a:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17c7e:	89 2b       	or	r24, r25
   17c80:	09 f4       	brne	.+2      	; 0x17c84 <AMIGO_COMMANDS+0x9e>
   17c82:	43 c0       	rjmp	.+134    	; 0x17d0a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17c84:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17c86:	90 e0       	ldi	r25, 0x00	; 0
   17c88:	f1 db       	rcall	.-2078   	; 0x1746c <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17c8a:	ec 01       	movw	r28, r24
   17c8c:	40 c0       	rjmp	.+128    	; 0x17d0e <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17c8e:	c9 36       	cpi	r28, 0x69	; 105
   17c90:	51 f4       	brne	.+20     	; 0x17ca6 <AMIGO_COMMANDS+0xc0>
   17c92:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17c96:	90 e0       	ldi	r25, 0x00	; 0
   17c98:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17c9c:	89 2b       	or	r24, r25
   17c9e:	a9 f1       	breq	.+106    	; 0x17d0a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ca0:	89 e6       	ldi	r24, 0x69	; 105
   17ca2:	90 e0       	ldi	r25, 0x00	; 0
   17ca4:	f1 cf       	rjmp	.-30     	; 0x17c88 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17ca6:	ca 36       	cpi	r28, 0x6A	; 106
   17ca8:	51 f4       	brne	.+20     	; 0x17cbe <AMIGO_COMMANDS+0xd8>
   17caa:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17cae:	90 e0       	ldi	r25, 0x00	; 0
   17cb0:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17cb4:	89 2b       	or	r24, r25
   17cb6:	49 f1       	breq	.+82     	; 0x17d0a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cb8:	8a e6       	ldi	r24, 0x6A	; 106
   17cba:	90 e0       	ldi	r25, 0x00	; 0
   17cbc:	e5 cf       	rjmp	.-54     	; 0x17c88 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17cbe:	cc 36       	cpi	r28, 0x6C	; 108
   17cc0:	51 f4       	brne	.+20     	; 0x17cd6 <AMIGO_COMMANDS+0xf0>
   17cc2:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17cc6:	90 e0       	ldi	r25, 0x00	; 0
   17cc8:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17ccc:	89 2b       	or	r24, r25
   17cce:	e9 f0       	breq	.+58     	; 0x17d0a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cd0:	8c e6       	ldi	r24, 0x6C	; 108
   17cd2:	90 e0       	ldi	r25, 0x00	; 0
   17cd4:	d9 cf       	rjmp	.-78     	; 0x17c88 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17cd6:	c0 37       	cpi	r28, 0x70	; 112
   17cd8:	c1 f4       	brne	.+48     	; 0x17d0a <AMIGO_COMMANDS+0x124>
   17cda:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   17cde:	90 e0       	ldi	r25, 0x00	; 0
   17ce0:	0e 94 a8 8d 	call	0x11b50	; 0x11b50 <AMIGO_is_MTA>
   17ce4:	ec 01       	movw	r28, r24
   17ce6:	89 2b       	or	r24, r25
   17ce8:	51 f0       	breq	.+20     	; 0x17cfe <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17cea:	e0 91 79 19 	lds	r30, 0x1979	; 0x801979 <AMIGOp>
   17cee:	f0 91 7a 19 	lds	r31, 0x197A	; 0x80197a <AMIGOp+0x1>
   17cf2:	81 81       	ldd	r24, Z+1	; 0x01
   17cf4:	90 e0       	ldi	r25, 0x00	; 0
   17cf6:	0e 94 90 87 	call	0x10f20	; 0x10f20 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17cfa:	e6 d9       	rcall	.-3124   	; 0x170c8 <amigo_cmd_dsj>
   17cfc:	c6 cf       	rjmp	.-116    	; 0x17c8a <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17cfe:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   17d02:	90 e0       	ldi	r25, 0x00	; 0
   17d04:	0e 94 99 8d 	call	0x11b32	; 0x11b32 <AMIGO_is_MLA>
   17d08:	02 c0       	rjmp	.+4      	; 0x17d0e <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   17d0a:	c0 e0       	ldi	r28, 0x00	; 0
   17d0c:	d0 e0       	ldi	r29, 0x00	; 0
}
   17d0e:	ce 01       	movw	r24, r28
   17d10:	df 91       	pop	r29
   17d12:	cf 91       	pop	r28
   17d14:	08 95       	ret

00017d16 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17d16:	e2 eb       	ldi	r30, 0xB2	; 178
   17d18:	f9 e1       	ldi	r31, 0x19	; 25
   17d1a:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17d1c:	10 82       	st	Z, r1
   17d1e:	11 82       	std	Z+1, r1	; 0x01
   17d20:	12 82       	std	Z+2, r1	; 0x02
   17d22:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17d24:	15 82       	std	Z+5, r1	; 0x05
   17d26:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17d28:	12 86       	std	Z+10, r1	; 0x0a
   17d2a:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17d2c:	14 86       	std	Z+12, r1	; 0x0c
   17d2e:	13 86       	std	Z+11, r1	; 0x0b
   17d30:	08 95       	ret

00017d32 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17d32:	cf 93       	push	r28
   17d34:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17d36:	20 91 bb 19 	lds	r18, 0x19BB	; 0x8019bb <plot+0x9>
   17d3a:	30 91 bc 19 	lds	r19, 0x19BC	; 0x8019bc <plot+0xa>
   17d3e:	21 15       	cp	r18, r1
   17d40:	31 05       	cpc	r19, r1
   17d42:	09 f4       	brne	.+2      	; 0x17d46 <receive_plot_flush+0x14>
   17d44:	4a c0       	rjmp	.+148    	; 0x17dda <receive_plot_flush+0xa8>
   17d46:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <plot+0x4>
   17d4a:	90 91 b7 19 	lds	r25, 0x19B7	; 0x8019b7 <plot+0x5>
   17d4e:	00 97       	sbiw	r24, 0x00	; 0
   17d50:	09 f4       	brne	.+2      	; 0x17d54 <receive_plot_flush+0x22>
   17d52:	45 c0       	rjmp	.+138    	; 0x17dde <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17d54:	ac 01       	movw	r20, r24
   17d56:	61 e0       	ldi	r22, 0x01	; 1
   17d58:	70 e0       	ldi	r23, 0x00	; 0
   17d5a:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <plot+0xb>
   17d5e:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <plot+0xc>
   17d62:	0e 94 2d 7e 	call	0xfc5a	; 0xfc5a <fwrite>
   17d66:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17d68:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <plot+0x4>
   17d6c:	90 91 b7 19 	lds	r25, 0x19B7	; 0x8019b7 <plot+0x5>
   17d70:	c8 17       	cp	r28, r24
   17d72:	d9 07       	cpc	r29, r25
   17d74:	31 f1       	breq	.+76     	; 0x17dc2 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   17d76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d7a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   17d7e:	81 72       	andi	r24, 0x21	; 33
   17d80:	99 27       	eor	r25, r25
   17d82:	89 2b       	or	r24, r25
   17d84:	d9 f0       	breq	.+54     	; 0x17dbc <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   17d86:	86 e5       	ldi	r24, 0x56	; 86
   17d88:	95 e1       	ldi	r25, 0x15	; 21
   17d8a:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17d8e:	df 93       	push	r29
   17d90:	cf 93       	push	r28
   17d92:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot+0x5>
   17d96:	8f 93       	push	r24
   17d98:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <plot+0x4>
   17d9c:	8f 93       	push	r24
   17d9e:	81 e0       	ldi	r24, 0x01	; 1
   17da0:	92 e3       	ldi	r25, 0x32	; 50
   17da2:	1f 92       	push	r1
   17da4:	9f 93       	push	r25
   17da6:	8f 93       	push	r24
   17da8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17dac:	8d b7       	in	r24, 0x3d	; 61
   17dae:	9e b7       	in	r25, 0x3e	; 62
   17db0:	07 96       	adiw	r24, 0x07	; 7
   17db2:	0f b6       	in	r0, 0x3f	; 63
   17db4:	f8 94       	cli
   17db6:	9e bf       	out	0x3e, r25	; 62
   17db8:	0f be       	out	0x3f, r0	; 63
   17dba:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   17dbc:	8f ef       	ldi	r24, 0xFF	; 255
   17dbe:	9f ef       	ldi	r25, 0xFF	; 255
   17dc0:	0e c0       	rjmp	.+28     	; 0x17dde <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   17dc2:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x9>
   17dc6:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <plot+0xa>
   17dca:	0e 94 99 78 	call	0xf132	; 0xf132 <fileno>
    if(fno < 0)
   17dce:	97 fd       	sbrc	r25, 7
   17dd0:	f5 cf       	rjmp	.-22     	; 0x17dbc <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   17dd2:	0e 94 77 7d 	call	0xfaee	; 0xfaee <syncfs>
    return (ret);
   17dd6:	ce 01       	movw	r24, r28
   17dd8:	02 c0       	rjmp	.+4      	; 0x17dde <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17dda:	80 e0       	ldi	r24, 0x00	; 0
   17ddc:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   17dde:	df 91       	pop	r29
   17de0:	cf 91       	pop	r28
   17de2:	08 95       	ret

00017de4 <printer_close>:
   17de4:	a6 df       	rcall	.-180    	; 0x17d32 <receive_plot_flush>
   17de6:	97 ff       	sbrs	r25, 7
   17de8:	03 c0       	rjmp	.+6      	; 0x17df0 <printer_close+0xc>
   17dea:	81 e0       	ldi	r24, 0x01	; 1
   17dec:	80 93 ba 19 	sts	0x19BA, r24	; 0x8019ba <plot+0x8>
   17df0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17df4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   17df8:	81 72       	andi	r24, 0x21	; 33
   17dfa:	99 27       	eor	r25, r25
   17dfc:	89 2b       	or	r24, r25
   17dfe:	71 f0       	breq	.+28     	; 0x17e1c <printer_close+0x38>
   17e00:	80 91 ba 19 	lds	r24, 0x19BA	; 0x8019ba <plot+0x8>
   17e04:	88 23       	and	r24, r24
   17e06:	51 f0       	breq	.+20     	; 0x17e1c <printer_close+0x38>
   17e08:	80 e3       	ldi	r24, 0x30	; 48
   17e0a:	92 e3       	ldi	r25, 0x32	; 50
   17e0c:	1f 92       	push	r1
   17e0e:	9f 93       	push	r25
   17e10:	8f 93       	push	r24
   17e12:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17e16:	0f 90       	pop	r0
   17e18:	0f 90       	pop	r0
   17e1a:	0f 90       	pop	r0
   17e1c:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x9>
   17e20:	90 91 bc 19 	lds	r25, 0x19BC	; 0x8019bc <plot+0xa>
   17e24:	00 97       	sbiw	r24, 0x00	; 0
   17e26:	09 f1       	breq	.+66     	; 0x17e6a <printer_close+0x86>
   17e28:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
   17e2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e30:	85 ff       	sbrs	r24, 5
   17e32:	1b c0       	rjmp	.+54     	; 0x17e6a <printer_close+0x86>
   17e34:	80 91 b5 19 	lds	r24, 0x19B5	; 0x8019b5 <plot+0x3>
   17e38:	8f 93       	push	r24
   17e3a:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <plot+0x2>
   17e3e:	8f 93       	push	r24
   17e40:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot+0x1>
   17e44:	8f 93       	push	r24
   17e46:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot>
   17e4a:	8f 93       	push	r24
   17e4c:	82 e2       	ldi	r24, 0x22	; 34
   17e4e:	92 e3       	ldi	r25, 0x32	; 50
   17e50:	1f 92       	push	r1
   17e52:	9f 93       	push	r25
   17e54:	8f 93       	push	r24
   17e56:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17e5a:	8d b7       	in	r24, 0x3d	; 61
   17e5c:	9e b7       	in	r25, 0x3e	; 62
   17e5e:	07 96       	adiw	r24, 0x07	; 7
   17e60:	0f b6       	in	r0, 0x3f	; 63
   17e62:	f8 94       	cli
   17e64:	9e bf       	out	0x3e, r25	; 62
   17e66:	0f be       	out	0x3f, r0	; 63
   17e68:	8d bf       	out	0x3d, r24	; 61
   17e6a:	80 91 bd 19 	lds	r24, 0x19BD	; 0x8019bd <plot+0xb>
   17e6e:	90 91 be 19 	lds	r25, 0x19BE	; 0x8019be <plot+0xc>
   17e72:	00 97       	sbiw	r24, 0x00	; 0
   17e74:	11 f0       	breq	.+4      	; 0x17e7a <printer_close+0x96>
   17e76:	0e 94 aa 2a 	call	0x5554	; 0x5554 <safefree>
   17e7a:	4d cf       	rjmp	.-358    	; 0x17d16 <printer_init>
   17e7c:	08 95       	ret

00017e7e <printer_open>:
   17e7e:	ac e4       	ldi	r26, 0x4C	; 76
   17e80:	b0 e0       	ldi	r27, 0x00	; 0
   17e82:	e5 e4       	ldi	r30, 0x45	; 69
   17e84:	ff eb       	ldi	r31, 0xBF	; 191
   17e86:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   17e8a:	8c 01       	movw	r16, r24
   17e8c:	89 2b       	or	r24, r25
   17e8e:	09 f0       	breq	.+2      	; 0x17e92 <printer_open+0x14>
   17e90:	4b c0       	rjmp	.+150    	; 0x17f28 <printer_open+0xaa>
   17e92:	be 01       	movw	r22, r28
   17e94:	6f 5b       	subi	r22, 0xBF	; 191
   17e96:	7f 4f       	sbci	r23, 0xFF	; 255
   17e98:	80 e0       	ldi	r24, 0x00	; 0
   17e9a:	90 e0       	ldi	r25, 0x00	; 0
   17e9c:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <clock_gettime>
   17ea0:	25 96       	adiw	r28, 0x05	; 5
   17ea2:	8c ad       	ldd	r24, Y+60	; 0x3c
   17ea4:	9d ad       	ldd	r25, Y+61	; 0x3d
   17ea6:	ae ad       	ldd	r26, Y+62	; 0x3e
   17ea8:	bf ad       	ldd	r27, Y+63	; 0x3f
   17eaa:	25 97       	sbiw	r28, 0x05	; 5
   17eac:	2d 96       	adiw	r28, 0x0d	; 13
   17eae:	8c af       	std	Y+60, r24	; 0x3c
   17eb0:	9d af       	std	Y+61, r25	; 0x3d
   17eb2:	ae af       	std	Y+62, r26	; 0x3e
   17eb4:	bf af       	std	Y+63, r27	; 0x3f
   17eb6:	2d 97       	sbiw	r28, 0x0d	; 13
   17eb8:	ce 01       	movw	r24, r28
   17eba:	87 5b       	subi	r24, 0xB7	; 183
   17ebc:	9f 4f       	sbci	r25, 0xFF	; 255
   17ebe:	0e 94 81 39 	call	0x7302	; 0x7302 <gmtime>
   17ec2:	8c 01       	movw	r16, r24
   17ec4:	fc 01       	movw	r30, r24
   17ec6:	90 80       	ld	r9, Z
   17ec8:	81 80       	ldd	r8, Z+1	; 0x01
   17eca:	b2 80       	ldd	r11, Z+2	; 0x02
   17ecc:	a3 80       	ldd	r10, Z+3	; 0x03
   17ece:	d4 80       	ldd	r13, Z+4	; 0x04
   17ed0:	c5 80       	ldd	r12, Z+5	; 0x05
   17ed2:	e2 84       	ldd	r14, Z+10	; 0x0a
   17ed4:	f3 84       	ldd	r15, Z+11	; 0x0b
   17ed6:	f4 e9       	ldi	r31, 0x94	; 148
   17ed8:	ef 1a       	sub	r14, r31
   17eda:	f8 ef       	ldi	r31, 0xF8	; 248
   17edc:	ff 0a       	sbc	r15, r31
   17ede:	fc 01       	movw	r30, r24
   17ee0:	80 85       	ldd	r24, Z+8	; 0x08
   17ee2:	91 85       	ldd	r25, Z+9	; 0x09
   17ee4:	0e 94 5d 38 	call	0x70ba	; 0x70ba <tm_mon_to_ascii>
   17ee8:	8f 92       	push	r8
   17eea:	9f 92       	push	r9
   17eec:	af 92       	push	r10
   17eee:	bf 92       	push	r11
   17ef0:	cf 92       	push	r12
   17ef2:	df 92       	push	r13
   17ef4:	ff 92       	push	r15
   17ef6:	ef 92       	push	r14
   17ef8:	9f 93       	push	r25
   17efa:	8f 93       	push	r24
   17efc:	f8 01       	movw	r30, r16
   17efe:	87 81       	ldd	r24, Z+7	; 0x07
   17f00:	8f 93       	push	r24
   17f02:	86 81       	ldd	r24, Z+6	; 0x06
   17f04:	8f 93       	push	r24
   17f06:	87 e6       	ldi	r24, 0x67	; 103
   17f08:	92 e3       	ldi	r25, 0x32	; 50
   17f0a:	1f 92       	push	r1
   17f0c:	9f 93       	push	r25
   17f0e:	8f 93       	push	r24
   17f10:	8e 01       	movw	r16, r28
   17f12:	0f 5f       	subi	r16, 0xFF	; 255
   17f14:	1f 4f       	sbci	r17, 0xFF	; 255
   17f16:	1f 93       	push	r17
   17f18:	0f 93       	push	r16
   17f1a:	0e 94 0c 48 	call	0x9018	; 0x9018 <sprintf_P>
   17f1e:	0f b6       	in	r0, 0x3f	; 63
   17f20:	f8 94       	cli
   17f22:	de bf       	out	0x3e, r29	; 62
   17f24:	0f be       	out	0x3f, r0	; 63
   17f26:	cd bf       	out	0x3d, r28	; 61
   17f28:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f2c:	85 ff       	sbrs	r24, 5
   17f2e:	0e c0       	rjmp	.+28     	; 0x17f4c <printer_open+0xce>
   17f30:	1f 93       	push	r17
   17f32:	0f 93       	push	r16
   17f34:	81 e5       	ldi	r24, 0x51	; 81
   17f36:	92 e3       	ldi	r25, 0x32	; 50
   17f38:	1f 92       	push	r1
   17f3a:	9f 93       	push	r25
   17f3c:	8f 93       	push	r24
   17f3e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17f42:	0f 90       	pop	r0
   17f44:	0f 90       	pop	r0
   17f46:	0f 90       	pop	r0
   17f48:	0f 90       	pop	r0
   17f4a:	0f 90       	pop	r0
   17f4c:	66 e9       	ldi	r22, 0x96	; 150
   17f4e:	78 e0       	ldi	r23, 0x08	; 8
   17f50:	c8 01       	movw	r24, r16
   17f52:	0e 94 05 80 	call	0x1000a	; 0x1000a <fopen>
   17f56:	90 93 bc 19 	sts	0x19BC, r25	; 0x8019bc <plot+0xa>
   17f5a:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <plot+0x9>
   17f5e:	89 2b       	or	r24, r25
   17f60:	b9 f4       	brne	.+46     	; 0x17f90 <printer_open+0x112>
   17f62:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f66:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   17f6a:	81 72       	andi	r24, 0x21	; 33
   17f6c:	99 27       	eor	r25, r25
   17f6e:	89 2b       	or	r24, r25
   17f70:	11 f1       	breq	.+68     	; 0x17fb6 <printer_open+0x138>
   17f72:	8d e1       	ldi	r24, 0x1D	; 29
   17f74:	9d e0       	ldi	r25, 0x0D	; 13
   17f76:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <perror>
   17f7a:	85 e4       	ldi	r24, 0x45	; 69
   17f7c:	92 e3       	ldi	r25, 0x32	; 50
   17f7e:	1f 92       	push	r1
   17f80:	9f 93       	push	r25
   17f82:	8f 93       	push	r24
   17f84:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   17f88:	0f 90       	pop	r0
   17f8a:	0f 90       	pop	r0
   17f8c:	0f 90       	pop	r0
   17f8e:	13 c0       	rjmp	.+38     	; 0x17fb6 <printer_open+0x138>
   17f90:	61 e0       	ldi	r22, 0x01	; 1
   17f92:	70 e0       	ldi	r23, 0x00	; 0
   17f94:	81 e0       	ldi	r24, 0x01	; 1
   17f96:	92 e0       	ldi	r25, 0x02	; 2
   17f98:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   17f9c:	90 93 be 19 	sts	0x19BE, r25	; 0x8019be <plot+0xc>
   17fa0:	80 93 bd 19 	sts	0x19BD, r24	; 0x8019bd <plot+0xb>
   17fa4:	89 2b       	or	r24, r25
   17fa6:	09 f4       	brne	.+2      	; 0x17faa <printer_open+0x12c>
   17fa8:	1d df       	rcall	.-454    	; 0x17de4 <printer_close>
   17faa:	80 e0       	ldi	r24, 0x00	; 0
   17fac:	92 e0       	ldi	r25, 0x02	; 2
   17fae:	90 93 b9 19 	sts	0x19B9, r25	; 0x8019b9 <plot+0x7>
   17fb2:	80 93 b8 19 	sts	0x19B8, r24	; 0x8019b8 <plot+0x6>
   17fb6:	c4 5b       	subi	r28, 0xB4	; 180
   17fb8:	df 4f       	sbci	r29, 0xFF	; 255
   17fba:	ec e0       	ldi	r30, 0x0C	; 12
   17fbc:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

00017fc0 <printer_buffer>:
   17fc0:	cf 93       	push	r28
   17fc2:	df 93       	push	r29
   17fc4:	ec 01       	movw	r28, r24
   17fc6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17fca:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   17fce:	81 72       	andi	r24, 0x21	; 33
   17fd0:	99 27       	eor	r25, r25
   17fd2:	89 2b       	or	r24, r25
   17fd4:	e9 f0       	breq	.+58     	; 0x18010 <printer_buffer+0x50>
   17fd6:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot>
   17fda:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <plot+0x1>
   17fde:	20 91 b4 19 	lds	r18, 0x19B4	; 0x8019b4 <plot+0x2>
   17fe2:	30 91 b5 19 	lds	r19, 0x19B5	; 0x8019b5 <plot+0x3>
   17fe6:	81 11       	cpse	r24, r1
   17fe8:	13 c0       	rjmp	.+38     	; 0x18010 <printer_buffer+0x50>
   17fea:	3f 93       	push	r19
   17fec:	2f 93       	push	r18
   17fee:	9f 93       	push	r25
   17ff0:	8f 93       	push	r24
   17ff2:	8a ef       	ldi	r24, 0xFA	; 250
   17ff4:	91 e3       	ldi	r25, 0x31	; 49
   17ff6:	1f 92       	push	r1
   17ff8:	9f 93       	push	r25
   17ffa:	8f 93       	push	r24
   17ffc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18000:	8d b7       	in	r24, 0x3d	; 61
   18002:	9e b7       	in	r25, 0x3e	; 62
   18004:	07 96       	adiw	r24, 0x07	; 7
   18006:	0f b6       	in	r0, 0x3f	; 63
   18008:	f8 94       	cli
   1800a:	9e bf       	out	0x3e, r25	; 62
   1800c:	0f be       	out	0x3f, r0	; 63
   1800e:	8d bf       	out	0x3d, r24	; 61
   18010:	ce 01       	movw	r24, r28
   18012:	88 27       	eor	r24, r24
   18014:	97 7f       	andi	r25, 0xF7	; 247
   18016:	89 2b       	or	r24, r25
   18018:	41 f0       	breq	.+16     	; 0x1802a <printer_buffer+0x6a>
   1801a:	8b de       	rcall	.-746    	; 0x17d32 <receive_plot_flush>
   1801c:	89 2b       	or	r24, r25
   1801e:	09 f4       	brne	.+2      	; 0x18022 <printer_buffer+0x62>
   18020:	3f c0       	rjmp	.+126    	; 0x180a0 <printer_buffer+0xe0>
   18022:	81 e0       	ldi	r24, 0x01	; 1
   18024:	80 93 ba 19 	sts	0x19BA, r24	; 0x8019ba <plot+0x8>
   18028:	3b c0       	rjmp	.+118    	; 0x180a0 <printer_buffer+0xe0>
   1802a:	20 91 bd 19 	lds	r18, 0x19BD	; 0x8019bd <plot+0xb>
   1802e:	30 91 be 19 	lds	r19, 0x19BE	; 0x8019be <plot+0xc>
   18032:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <plot+0x4>
   18036:	90 91 b7 19 	lds	r25, 0x19B7	; 0x8019b7 <plot+0x5>
   1803a:	ac 01       	movw	r20, r24
   1803c:	4f 5f       	subi	r20, 0xFF	; 255
   1803e:	5f 4f       	sbci	r21, 0xFF	; 255
   18040:	50 93 b7 19 	sts	0x19B7, r21	; 0x8019b7 <plot+0x5>
   18044:	40 93 b6 19 	sts	0x19B6, r20	; 0x8019b6 <plot+0x4>
   18048:	f9 01       	movw	r30, r18
   1804a:	e8 0f       	add	r30, r24
   1804c:	f9 1f       	adc	r31, r25
   1804e:	c0 83       	st	Z, r28
   18050:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot>
   18054:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <plot+0x1>
   18058:	a0 91 b4 19 	lds	r26, 0x19B4	; 0x8019b4 <plot+0x2>
   1805c:	b0 91 b5 19 	lds	r27, 0x19B5	; 0x8019b5 <plot+0x3>
   18060:	01 96       	adiw	r24, 0x01	; 1
   18062:	a1 1d       	adc	r26, r1
   18064:	b1 1d       	adc	r27, r1
   18066:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot>
   1806a:	90 93 b3 19 	sts	0x19B3, r25	; 0x8019b3 <plot+0x1>
   1806e:	a0 93 b4 19 	sts	0x19B4, r26	; 0x8019b4 <plot+0x2>
   18072:	b0 93 b5 19 	sts	0x19B5, r27	; 0x8019b5 <plot+0x3>
   18076:	20 91 b6 19 	lds	r18, 0x19B6	; 0x8019b6 <plot+0x4>
   1807a:	30 91 b7 19 	lds	r19, 0x19B7	; 0x8019b7 <plot+0x5>
   1807e:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <plot+0x6>
   18082:	90 91 b9 19 	lds	r25, 0x19B9	; 0x8019b9 <plot+0x7>
   18086:	28 17       	cp	r18, r24
   18088:	39 07       	cpc	r19, r25
   1808a:	54 f0       	brlt	.+20     	; 0x180a0 <printer_buffer+0xe0>
   1808c:	52 de       	rcall	.-860    	; 0x17d32 <receive_plot_flush>
   1808e:	97 ff       	sbrs	r25, 7
   18090:	03 c0       	rjmp	.+6      	; 0x18098 <printer_buffer+0xd8>
   18092:	81 e0       	ldi	r24, 0x01	; 1
   18094:	80 93 ba 19 	sts	0x19BA, r24	; 0x8019ba <plot+0x8>
   18098:	10 92 b7 19 	sts	0x19B7, r1	; 0x8019b7 <plot+0x5>
   1809c:	10 92 b6 19 	sts	0x19B6, r1	; 0x8019b6 <plot+0x4>
   180a0:	df 91       	pop	r29
   180a2:	cf 91       	pop	r28
   180a4:	08 95       	ret

000180a6 <PRINTER_COMMANDS>:
   180a6:	cf 93       	push	r28
   180a8:	c8 2f       	mov	r28, r24
   180aa:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <listening>
   180ae:	90 e0       	ldi	r25, 0x00	; 0
   180b0:	0e 94 c6 8d 	call	0x11b8c	; 0x11b8c <PRINTER_is_MLA>
   180b4:	89 2b       	or	r24, r25
   180b6:	49 f0       	breq	.+18     	; 0x180ca <PRINTER_COMMANDS+0x24>
   180b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   180bc:	85 ff       	sbrs	r24, 5
   180be:	1e c0       	rjmp	.+60     	; 0x180fc <PRINTER_COMMANDS+0x56>
   180c0:	1f 92       	push	r1
   180c2:	cf 93       	push	r28
   180c4:	8e ed       	ldi	r24, 0xDE	; 222
   180c6:	91 e3       	ldi	r25, 0x31	; 49
   180c8:	0f c0       	rjmp	.+30     	; 0x180e8 <PRINTER_COMMANDS+0x42>
   180ca:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <talking>
   180ce:	90 e0       	ldi	r25, 0x00	; 0
   180d0:	0e 94 d5 8d 	call	0x11baa	; 0x11baa <PRINTER_is_MTA>
   180d4:	89 2b       	or	r24, r25
   180d6:	91 f0       	breq	.+36     	; 0x180fc <PRINTER_COMMANDS+0x56>
   180d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   180dc:	85 ff       	sbrs	r24, 5
   180de:	0e c0       	rjmp	.+28     	; 0x180fc <PRINTER_COMMANDS+0x56>
   180e0:	1f 92       	push	r1
   180e2:	cf 93       	push	r28
   180e4:	84 ec       	ldi	r24, 0xC4	; 196
   180e6:	91 e3       	ldi	r25, 0x31	; 49
   180e8:	1f 92       	push	r1
   180ea:	9f 93       	push	r25
   180ec:	8f 93       	push	r24
   180ee:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   180f2:	0f 90       	pop	r0
   180f4:	0f 90       	pop	r0
   180f6:	0f 90       	pop	r0
   180f8:	0f 90       	pop	r0
   180fa:	0f 90       	pop	r0
   180fc:	80 e0       	ldi	r24, 0x00	; 0
   180fe:	90 e0       	ldi	r25, 0x00	; 0
   18100:	cf 91       	pop	r28
   18102:	08 95       	ret

00018104 <lif_help>:
   18104:	cf 93       	push	r28
   18106:	df 93       	push	r29
   18108:	ec 01       	movw	r28, r24
   1810a:	86 ea       	ldi	r24, 0xA6	; 166
   1810c:	96 e4       	ldi	r25, 0x46	; 70
   1810e:	1f 92       	push	r1
   18110:	9f 93       	push	r25
   18112:	8f 93       	push	r24
   18114:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18118:	0f 90       	pop	r0
   1811a:	0f 90       	pop	r0
   1811c:	0f 90       	pop	r0
   1811e:	cd 2b       	or	r28, r29
   18120:	51 f0       	breq	.+20     	; 0x18136 <lif_help+0x32>
   18122:	8d ed       	ldi	r24, 0xDD	; 221
   18124:	94 e4       	ldi	r25, 0x44	; 68
   18126:	1f 92       	push	r1
   18128:	9f 93       	push	r25
   1812a:	8f 93       	push	r24
   1812c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18130:	0f 90       	pop	r0
   18132:	0f 90       	pop	r0
   18134:	0f 90       	pop	r0
   18136:	df 91       	pop	r29
   18138:	cf 91       	pop	r28
   1813a:	08 95       	ret

0001813c <lif_calloc>:
   1813c:	ef 92       	push	r14
   1813e:	ff 92       	push	r15
   18140:	0f 93       	push	r16
   18142:	1f 93       	push	r17
   18144:	cf 93       	push	r28
   18146:	df 93       	push	r29
   18148:	16 2f       	mov	r17, r22
   1814a:	07 2f       	mov	r16, r23
   1814c:	f8 2e       	mov	r15, r24
   1814e:	e9 2e       	mov	r14, r25
   18150:	61 e0       	ldi	r22, 0x01	; 1
   18152:	70 e0       	ldi	r23, 0x00	; 0
   18154:	81 2f       	mov	r24, r17
   18156:	90 2f       	mov	r25, r16
   18158:	0e 94 61 2a 	call	0x54c2	; 0x54c2 <safecalloc>
   1815c:	ec 01       	movw	r28, r24
   1815e:	89 2b       	or	r24, r25
   18160:	99 f4       	brne	.+38     	; 0x18188 <lif_calloc+0x4c>
   18162:	ef 92       	push	r14
   18164:	ff 92       	push	r15
   18166:	0f 93       	push	r16
   18168:	1f 93       	push	r17
   1816a:	83 e9       	ldi	r24, 0x93	; 147
   1816c:	94 e4       	ldi	r25, 0x44	; 68
   1816e:	1f 92       	push	r1
   18170:	9f 93       	push	r25
   18172:	8f 93       	push	r24
   18174:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18178:	8d b7       	in	r24, 0x3d	; 61
   1817a:	9e b7       	in	r25, 0x3e	; 62
   1817c:	07 96       	adiw	r24, 0x07	; 7
   1817e:	0f b6       	in	r0, 0x3f	; 63
   18180:	f8 94       	cli
   18182:	9e bf       	out	0x3e, r25	; 62
   18184:	0f be       	out	0x3f, r0	; 63
   18186:	8d bf       	out	0x3d, r24	; 61
   18188:	ce 01       	movw	r24, r28
   1818a:	cd b7       	in	r28, 0x3d	; 61
   1818c:	de b7       	in	r29, 0x3e	; 62
   1818e:	e6 e0       	ldi	r30, 0x06	; 6
   18190:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00018194 <lif_free>:
   18194:	00 97       	sbiw	r24, 0x00	; 0
   18196:	59 f4       	brne	.+22     	; 0x181ae <lif_free+0x1a>
   18198:	8b e7       	ldi	r24, 0x7B	; 123
   1819a:	94 e4       	ldi	r25, 0x44	; 68
   1819c:	1f 92       	push	r1
   1819e:	9f 93       	push	r25
   181a0:	8f 93       	push	r24
   181a2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   181a6:	0f 90       	pop	r0
   181a8:	0f 90       	pop	r0
   181aa:	0f 90       	pop	r0
   181ac:	08 95       	ret
   181ae:	0c 94 aa 2a 	jmp	0x5554	; 0x5554 <safefree>
   181b2:	08 95       	ret

000181b4 <lif_stralloc>:
   181b4:	0f 93       	push	r16
   181b6:	1f 93       	push	r17
   181b8:	cf 93       	push	r28
   181ba:	df 93       	push	r29
   181bc:	ec 01       	movw	r28, r24
   181be:	fc 01       	movw	r30, r24
   181c0:	01 90       	ld	r0, Z+
   181c2:	00 20       	and	r0, r0
   181c4:	e9 f7       	brne	.-6      	; 0x181c0 <lif_stralloc+0xc>
   181c6:	bf 01       	movw	r22, r30
   181c8:	68 1b       	sub	r22, r24
   181ca:	79 0b       	sbc	r23, r25
   181cc:	6d 5f       	subi	r22, 0xFD	; 253
   181ce:	7f 4f       	sbci	r23, 0xFF	; 255
   181d0:	07 2e       	mov	r0, r23
   181d2:	00 0c       	add	r0, r0
   181d4:	88 0b       	sbc	r24, r24
   181d6:	99 0b       	sbc	r25, r25
   181d8:	b1 df       	rcall	.-158    	; 0x1813c <lif_calloc>
   181da:	8c 01       	movw	r16, r24
   181dc:	00 97       	sbiw	r24, 0x00	; 0
   181de:	19 f0       	breq	.+6      	; 0x181e6 <lif_stralloc+0x32>
   181e0:	be 01       	movw	r22, r28
   181e2:	0e 94 3f 33 	call	0x667e	; 0x667e <strcpy>
   181e6:	c8 01       	movw	r24, r16
   181e8:	df 91       	pop	r29
   181ea:	cf 91       	pop	r28
   181ec:	1f 91       	pop	r17
   181ee:	0f 91       	pop	r16
   181f0:	08 95       	ret

000181f2 <lif_open>:
   181f2:	ef 92       	push	r14
   181f4:	ff 92       	push	r15
   181f6:	0f 93       	push	r16
   181f8:	1f 93       	push	r17
   181fa:	cf 93       	push	r28
   181fc:	df 93       	push	r29
   181fe:	18 2f       	mov	r17, r24
   18200:	09 2f       	mov	r16, r25
   18202:	f6 2e       	mov	r15, r22
   18204:	e7 2e       	mov	r14, r23
   18206:	0e 94 05 80 	call	0x1000a	; 0x1000a <fopen>
   1820a:	ec 01       	movw	r28, r24
   1820c:	89 2b       	or	r24, r25
   1820e:	99 f4       	brne	.+38     	; 0x18236 <lif_open+0x44>
   18210:	ef 92       	push	r14
   18212:	ff 92       	push	r15
   18214:	0f 93       	push	r16
   18216:	1f 93       	push	r17
   18218:	86 e5       	ldi	r24, 0x56	; 86
   1821a:	94 e4       	ldi	r25, 0x44	; 68
   1821c:	1f 92       	push	r1
   1821e:	9f 93       	push	r25
   18220:	8f 93       	push	r24
   18222:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18226:	8d b7       	in	r24, 0x3d	; 61
   18228:	9e b7       	in	r25, 0x3e	; 62
   1822a:	07 96       	adiw	r24, 0x07	; 7
   1822c:	0f b6       	in	r0, 0x3f	; 63
   1822e:	f8 94       	cli
   18230:	9e bf       	out	0x3e, r25	; 62
   18232:	0f be       	out	0x3f, r0	; 63
   18234:	8d bf       	out	0x3d, r24	; 61
   18236:	ce 01       	movw	r24, r28
   18238:	cd b7       	in	r28, 0x3d	; 61
   1823a:	de b7       	in	r29, 0x3e	; 62
   1823c:	e6 e0       	ldi	r30, 0x06	; 6
   1823e:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00018242 <lif_stat>:
   18242:	0f 93       	push	r16
   18244:	1f 93       	push	r17
   18246:	cf 93       	push	r28
   18248:	df 93       	push	r29
   1824a:	18 2f       	mov	r17, r24
   1824c:	09 2f       	mov	r16, r25
   1824e:	d6 2f       	mov	r29, r22
   18250:	c7 2f       	mov	r28, r23
   18252:	0e 94 19 7b 	call	0xf632	; 0xf632 <stat>
   18256:	97 ff       	sbrs	r25, 7
   18258:	11 c0       	rjmp	.+34     	; 0x1827c <lif_stat+0x3a>
   1825a:	0f 93       	push	r16
   1825c:	1f 93       	push	r17
   1825e:	8d e3       	ldi	r24, 0x3D	; 61
   18260:	94 e4       	ldi	r25, 0x44	; 68
   18262:	1f 92       	push	r1
   18264:	9f 93       	push	r25
   18266:	8f 93       	push	r24
   18268:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1826c:	0f 90       	pop	r0
   1826e:	0f 90       	pop	r0
   18270:	0f 90       	pop	r0
   18272:	0f 90       	pop	r0
   18274:	0f 90       	pop	r0
   18276:	80 e0       	ldi	r24, 0x00	; 0
   18278:	90 e0       	ldi	r25, 0x00	; 0
   1827a:	02 c0       	rjmp	.+4      	; 0x18280 <lif_stat+0x3e>
   1827c:	8d 2f       	mov	r24, r29
   1827e:	9c 2f       	mov	r25, r28
   18280:	df 91       	pop	r29
   18282:	cf 91       	pop	r28
   18284:	1f 91       	pop	r17
   18286:	0f 91       	pop	r16
   18288:	08 95       	ret

0001828a <lif_seek_msg>:
   1828a:	a0 e0       	ldi	r26, 0x00	; 0
   1828c:	b0 e0       	ldi	r27, 0x00	; 0
   1828e:	eb e4       	ldi	r30, 0x4B	; 75
   18290:	f1 ec       	ldi	r31, 0xC1	; 193
   18292:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
   18296:	ec 01       	movw	r28, r24
   18298:	6a 01       	movw	r12, r20
   1829a:	7b 01       	movw	r14, r22
   1829c:	12 2f       	mov	r17, r18
   1829e:	03 2f       	mov	r16, r19
   182a0:	0e 94 45 7c 	call	0xf88a	; 0xf88a <ftell>
   182a4:	6c 15       	cp	r22, r12
   182a6:	7d 05       	cpc	r23, r13
   182a8:	8e 05       	cpc	r24, r14
   182aa:	9f 05       	cpc	r25, r15
   182ac:	19 f4       	brne	.+6      	; 0x182b4 <lif_seek_msg+0x2a>
   182ae:	81 e0       	ldi	r24, 0x01	; 1
   182b0:	90 e0       	ldi	r25, 0x00	; 0
   182b2:	20 c0       	rjmp	.+64     	; 0x182f4 <lif_seek_msg+0x6a>
   182b4:	20 e0       	ldi	r18, 0x00	; 0
   182b6:	30 e0       	ldi	r19, 0x00	; 0
   182b8:	b7 01       	movw	r22, r14
   182ba:	a6 01       	movw	r20, r12
   182bc:	ce 01       	movw	r24, r28
   182be:	0e 94 c7 7c 	call	0xf98e	; 0xf98e <fseek>
   182c2:	97 ff       	sbrs	r25, 7
   182c4:	f4 cf       	rjmp	.-24     	; 0x182ae <lif_seek_msg+0x24>
   182c6:	ff 92       	push	r15
   182c8:	ef 92       	push	r14
   182ca:	df 92       	push	r13
   182cc:	cf 92       	push	r12
   182ce:	0f 93       	push	r16
   182d0:	1f 93       	push	r17
   182d2:	8c e1       	ldi	r24, 0x1C	; 28
   182d4:	94 e4       	ldi	r25, 0x44	; 68
   182d6:	1f 92       	push	r1
   182d8:	9f 93       	push	r25
   182da:	8f 93       	push	r24
   182dc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   182e0:	8d b7       	in	r24, 0x3d	; 61
   182e2:	9e b7       	in	r25, 0x3e	; 62
   182e4:	09 96       	adiw	r24, 0x09	; 9
   182e6:	0f b6       	in	r0, 0x3f	; 63
   182e8:	f8 94       	cli
   182ea:	9e bf       	out	0x3e, r25	; 62
   182ec:	0f be       	out	0x3f, r0	; 63
   182ee:	8d bf       	out	0x3d, r24	; 61
   182f0:	80 e0       	ldi	r24, 0x00	; 0
   182f2:	90 e0       	ldi	r25, 0x00	; 0
   182f4:	cd b7       	in	r28, 0x3d	; 61
   182f6:	de b7       	in	r29, 0x3e	; 62
   182f8:	e8 e0       	ldi	r30, 0x08	; 8
   182fa:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

000182fe <lif_read>:
   182fe:	a0 e0       	ldi	r26, 0x00	; 0
   18300:	b0 e0       	ldi	r27, 0x00	; 0
   18302:	e5 e8       	ldi	r30, 0x85	; 133
   18304:	f1 ec       	ldi	r31, 0xC1	; 193
   18306:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   1830a:	ec 01       	movw	r28, r24
   1830c:	7b 01       	movw	r14, r22
   1830e:	b2 2e       	mov	r11, r18
   18310:	a3 2e       	mov	r10, r19
   18312:	94 2e       	mov	r9, r20
   18314:	85 2e       	mov	r8, r21
   18316:	28 81       	ld	r18, Y
   18318:	39 81       	ldd	r19, Y+1	; 0x01
   1831a:	4b 2d       	mov	r20, r11
   1831c:	5a 2d       	mov	r21, r10
   1831e:	69 2d       	mov	r22, r9
   18320:	78 2d       	mov	r23, r8
   18322:	8a 81       	ldd	r24, Y+2	; 0x02
   18324:	9b 81       	ldd	r25, Y+3	; 0x03
   18326:	b1 df       	rcall	.-158    	; 0x1828a <lif_seek_msg>
   18328:	89 2b       	or	r24, r25
   1832a:	b9 f1       	breq	.+110    	; 0x1839a <lif_read+0x9c>
   1832c:	2a 81       	ldd	r18, Y+2	; 0x02
   1832e:	3b 81       	ldd	r19, Y+3	; 0x03
   18330:	a8 01       	movw	r20, r16
   18332:	61 e0       	ldi	r22, 0x01	; 1
   18334:	70 e0       	ldi	r23, 0x00	; 0
   18336:	c7 01       	movw	r24, r14
   18338:	0e 94 5b 7d 	call	0xfab6	; 0xfab6 <fread>
   1833c:	6c 01       	movw	r12, r24
   1833e:	e1 2c       	mov	r14, r1
   18340:	f1 2c       	mov	r15, r1
   18342:	b8 01       	movw	r22, r16
   18344:	01 2e       	mov	r0, r17
   18346:	00 0c       	add	r0, r0
   18348:	88 0b       	sbc	r24, r24
   1834a:	99 0b       	sbc	r25, r25
   1834c:	c6 16       	cp	r12, r22
   1834e:	d7 06       	cpc	r13, r23
   18350:	e8 06       	cpc	r14, r24
   18352:	f9 06       	cpc	r15, r25
   18354:	41 f1       	breq	.+80     	; 0x183a6 <lif_read+0xa8>
   18356:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1835a:	80 ff       	sbrs	r24, 0
   1835c:	22 c0       	rjmp	.+68     	; 0x183a2 <lif_read+0xa4>
   1835e:	1f 93       	push	r17
   18360:	0f 93       	push	r16
   18362:	1f 92       	push	r1
   18364:	1f 92       	push	r1
   18366:	df 92       	push	r13
   18368:	cf 92       	push	r12
   1836a:	8f 92       	push	r8
   1836c:	9f 92       	push	r9
   1836e:	af 92       	push	r10
   18370:	bf 92       	push	r11
   18372:	89 81       	ldd	r24, Y+1	; 0x01
   18374:	8f 93       	push	r24
   18376:	88 81       	ld	r24, Y
   18378:	8f 93       	push	r24
   1837a:	80 ee       	ldi	r24, 0xE0	; 224
   1837c:	93 e4       	ldi	r25, 0x43	; 67
   1837e:	1f 92       	push	r1
   18380:	9f 93       	push	r25
   18382:	8f 93       	push	r24
   18384:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18388:	8d b7       	in	r24, 0x3d	; 61
   1838a:	9e b7       	in	r25, 0x3e	; 62
   1838c:	0f 96       	adiw	r24, 0x0f	; 15
   1838e:	0f b6       	in	r0, 0x3f	; 63
   18390:	f8 94       	cli
   18392:	9e bf       	out	0x3e, r25	; 62
   18394:	0f be       	out	0x3f, r0	; 63
   18396:	8d bf       	out	0x3d, r24	; 61
   18398:	04 c0       	rjmp	.+8      	; 0x183a2 <lif_read+0xa4>
   1839a:	60 e0       	ldi	r22, 0x00	; 0
   1839c:	70 e0       	ldi	r23, 0x00	; 0
   1839e:	cb 01       	movw	r24, r22
   183a0:	02 c0       	rjmp	.+4      	; 0x183a6 <lif_read+0xa8>
   183a2:	c7 01       	movw	r24, r14
   183a4:	b6 01       	movw	r22, r12
   183a6:	cd b7       	in	r28, 0x3d	; 61
   183a8:	de b7       	in	r29, 0x3e	; 62
   183aa:	ec e0       	ldi	r30, 0x0C	; 12
   183ac:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

000183b0 <lif_write>:
   183b0:	a0 e0       	ldi	r26, 0x00	; 0
   183b2:	b0 e0       	ldi	r27, 0x00	; 0
   183b4:	ee ed       	ldi	r30, 0xDE	; 222
   183b6:	f1 ec       	ldi	r31, 0xC1	; 193
   183b8:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   183bc:	7c 01       	movw	r14, r24
   183be:	eb 01       	movw	r28, r22
   183c0:	d2 2e       	mov	r13, r18
   183c2:	c3 2e       	mov	r12, r19
   183c4:	b4 2e       	mov	r11, r20
   183c6:	a5 2e       	mov	r10, r21
   183c8:	fc 01       	movw	r30, r24
   183ca:	20 81       	ld	r18, Z
   183cc:	31 81       	ldd	r19, Z+1	; 0x01
   183ce:	4d 2d       	mov	r20, r13
   183d0:	5c 2d       	mov	r21, r12
   183d2:	6b 2d       	mov	r22, r11
   183d4:	7a 2d       	mov	r23, r10
   183d6:	82 81       	ldd	r24, Z+2	; 0x02
   183d8:	93 81       	ldd	r25, Z+3	; 0x03
   183da:	57 df       	rcall	.-338    	; 0x1828a <lif_seek_msg>
   183dc:	00 97       	sbiw	r24, 0x00	; 0
   183de:	89 f1       	breq	.+98     	; 0x18442 <lif_write+0x92>
   183e0:	f7 01       	movw	r30, r14
   183e2:	22 81       	ldd	r18, Z+2	; 0x02
   183e4:	33 81       	ldd	r19, Z+3	; 0x03
   183e6:	a8 01       	movw	r20, r16
   183e8:	61 e0       	ldi	r22, 0x01	; 1
   183ea:	70 e0       	ldi	r23, 0x00	; 0
   183ec:	ce 01       	movw	r24, r28
   183ee:	0e 94 2d 7e 	call	0xfc5a	; 0xfc5a <fwrite>
   183f2:	ec 01       	movw	r28, r24
   183f4:	08 17       	cp	r16, r24
   183f6:	19 07       	cpc	r17, r25
   183f8:	09 f1       	breq	.+66     	; 0x1843c <lif_write+0x8c>
   183fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   183fe:	80 ff       	sbrs	r24, 0
   18400:	1f c0       	rjmp	.+62     	; 0x18440 <lif_write+0x90>
   18402:	1f 93       	push	r17
   18404:	0f 93       	push	r16
   18406:	df 93       	push	r29
   18408:	cf 93       	push	r28
   1840a:	af 92       	push	r10
   1840c:	bf 92       	push	r11
   1840e:	cf 92       	push	r12
   18410:	df 92       	push	r13
   18412:	f7 01       	movw	r30, r14
   18414:	81 81       	ldd	r24, Z+1	; 0x01
   18416:	8f 93       	push	r24
   18418:	80 81       	ld	r24, Z
   1841a:	8f 93       	push	r24
   1841c:	83 ea       	ldi	r24, 0xA3	; 163
   1841e:	93 e4       	ldi	r25, 0x43	; 67
   18420:	1f 92       	push	r1
   18422:	9f 93       	push	r25
   18424:	8f 93       	push	r24
   18426:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1842a:	8d b7       	in	r24, 0x3d	; 61
   1842c:	9e b7       	in	r25, 0x3e	; 62
   1842e:	0d 96       	adiw	r24, 0x0d	; 13
   18430:	0f b6       	in	r0, 0x3f	; 63
   18432:	f8 94       	cli
   18434:	9e bf       	out	0x3e, r25	; 62
   18436:	0f be       	out	0x3f, r0	; 63
   18438:	8d bf       	out	0x3d, r24	; 61
   1843a:	02 c0       	rjmp	.+4      	; 0x18440 <lif_write+0x90>
   1843c:	c8 01       	movw	r24, r16
   1843e:	01 c0       	rjmp	.+2      	; 0x18442 <lif_write+0x92>
   18440:	ce 01       	movw	r24, r28
   18442:	cd b7       	in	r28, 0x3d	; 61
   18444:	de b7       	in	r29, 0x3e	; 62
   18446:	ea e0       	ldi	r30, 0x0A	; 10
   18448:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0001844c <lif_chars>:
   1844c:	80 32       	cpi	r24, 0x20	; 32
   1844e:	91 05       	cpc	r25, r1
   18450:	e1 f0       	breq	.+56     	; 0x1848a <lif_chars+0x3e>
   18452:	9c 01       	movw	r18, r24
   18454:	21 56       	subi	r18, 0x61	; 97
   18456:	31 09       	sbc	r19, r1
   18458:	2a 31       	cpi	r18, 0x1A	; 26
   1845a:	31 05       	cpc	r19, r1
   1845c:	10 f4       	brcc	.+4      	; 0x18462 <lif_chars+0x16>
   1845e:	80 97       	sbiw	r24, 0x20	; 32
   18460:	08 95       	ret
   18462:	9c 01       	movw	r18, r24
   18464:	21 54       	subi	r18, 0x41	; 65
   18466:	31 09       	sbc	r19, r1
   18468:	2a 31       	cpi	r18, 0x1A	; 26
   1846a:	31 05       	cpc	r19, r1
   1846c:	c8 f0       	brcs	.+50     	; 0x184a0 <lif_chars+0x54>
   1846e:	16 16       	cp	r1, r22
   18470:	17 06       	cpc	r1, r23
   18472:	74 f4       	brge	.+28     	; 0x18490 <lif_chars+0x44>
   18474:	2f 5e       	subi	r18, 0xEF	; 239
   18476:	3f 4f       	sbci	r19, 0xFF	; 255
   18478:	2a 30       	cpi	r18, 0x0A	; 10
   1847a:	31 05       	cpc	r19, r1
   1847c:	88 f0       	brcs	.+34     	; 0x184a0 <lif_chars+0x54>
   1847e:	8f 35       	cpi	r24, 0x5F	; 95
   18480:	91 05       	cpc	r25, r1
   18482:	49 f0       	breq	.+18     	; 0x18496 <lif_chars+0x4a>
   18484:	8d 97       	sbiw	r24, 0x2d	; 45
   18486:	21 f4       	brne	.+8      	; 0x18490 <lif_chars+0x44>
   18488:	09 c0       	rjmp	.+18     	; 0x1849c <lif_chars+0x50>
   1848a:	80 e2       	ldi	r24, 0x20	; 32
   1848c:	90 e0       	ldi	r25, 0x00	; 0
   1848e:	08 95       	ret
   18490:	80 e0       	ldi	r24, 0x00	; 0
   18492:	90 e0       	ldi	r25, 0x00	; 0
   18494:	08 95       	ret
   18496:	8f e5       	ldi	r24, 0x5F	; 95
   18498:	90 e0       	ldi	r25, 0x00	; 0
   1849a:	08 95       	ret
   1849c:	8d e2       	ldi	r24, 0x2D	; 45
   1849e:	90 e0       	ldi	r25, 0x00	; 0
   184a0:	08 95       	ret

000184a2 <lif_B2S>:
   184a2:	a0 e0       	ldi	r26, 0x00	; 0
   184a4:	b0 e0       	ldi	r27, 0x00	; 0
   184a6:	e7 e5       	ldi	r30, 0x57	; 87
   184a8:	f2 ec       	ldi	r31, 0xC2	; 194
   184aa:	0c 94 2f e4 	jmp	0x1c85e	; 0x1c85e <__prologue_saves__+0xc>
   184ae:	5c 01       	movw	r10, r24
   184b0:	6b 01       	movw	r12, r22
   184b2:	ea 01       	movw	r28, r20
   184b4:	4c 01       	movw	r8, r24
   184b6:	ee 24       	eor	r14, r14
   184b8:	e3 94       	inc	r14
   184ba:	f1 2c       	mov	r15, r1
   184bc:	00 e0       	ldi	r16, 0x00	; 0
   184be:	10 e0       	ldi	r17, 0x00	; 0
   184c0:	0c 17       	cp	r16, r28
   184c2:	1d 07       	cpc	r17, r29
   184c4:	6c f4       	brge	.+26     	; 0x184e0 <lif_B2S+0x3e>
   184c6:	f4 01       	movw	r30, r8
   184c8:	81 91       	ld	r24, Z+
   184ca:	4f 01       	movw	r8, r30
   184cc:	b8 01       	movw	r22, r16
   184ce:	90 e0       	ldi	r25, 0x00	; 0
   184d0:	bd df       	rcall	.-134    	; 0x1844c <lif_chars>
   184d2:	89 2b       	or	r24, r25
   184d4:	11 f4       	brne	.+4      	; 0x184da <lif_B2S+0x38>
   184d6:	e1 2c       	mov	r14, r1
   184d8:	f1 2c       	mov	r15, r1
   184da:	0f 5f       	subi	r16, 0xFF	; 255
   184dc:	1f 4f       	sbci	r17, 0xFF	; 255
   184de:	f0 cf       	rjmp	.-32     	; 0x184c0 <lif_B2S+0x1e>
   184e0:	d6 01       	movw	r26, r12
   184e2:	f5 01       	movw	r30, r10
   184e4:	cf 01       	movw	r24, r30
   184e6:	8a 19       	sub	r24, r10
   184e8:	9b 09       	sbc	r25, r11
   184ea:	8c 17       	cp	r24, r28
   184ec:	9d 07       	cpc	r25, r29
   184ee:	1c f4       	brge	.+6      	; 0x184f6 <lif_B2S+0x54>
   184f0:	81 91       	ld	r24, Z+
   184f2:	8d 93       	st	X+, r24
   184f4:	f7 cf       	rjmp	.-18     	; 0x184e4 <lif_B2S+0x42>
   184f6:	d7 ff       	sbrs	r29, 7
   184f8:	02 c0       	rjmp	.+4      	; 0x184fe <lif_B2S+0x5c>
   184fa:	c0 e0       	ldi	r28, 0x00	; 0
   184fc:	d0 e0       	ldi	r29, 0x00	; 0
   184fe:	cc 0d       	add	r28, r12
   18500:	dd 1d       	adc	r29, r13
   18502:	18 82       	st	Y, r1
   18504:	c6 01       	movw	r24, r12
   18506:	0e 94 99 33 	call	0x6732	; 0x6732 <trim_tail>
   1850a:	c7 01       	movw	r24, r14
   1850c:	cd b7       	in	r28, 0x3d	; 61
   1850e:	de b7       	in	r29, 0x3e	; 62
   18510:	ec e0       	ldi	r30, 0x0C	; 12
   18512:	0c 94 4b e4 	jmp	0x1c896	; 0x1c896 <__epilogue_restores__+0xc>

00018516 <lif_checkname>:
   18516:	ef 92       	push	r14
   18518:	ff 92       	push	r15
   1851a:	0f 93       	push	r16
   1851c:	1f 93       	push	r17
   1851e:	cf 93       	push	r28
   18520:	df 93       	push	r29
   18522:	7c 01       	movw	r14, r24
   18524:	ec 01       	movw	r28, r24
   18526:	01 e0       	ldi	r16, 0x01	; 1
   18528:	10 e0       	ldi	r17, 0x00	; 0
   1852a:	be 01       	movw	r22, r28
   1852c:	6e 19       	sub	r22, r14
   1852e:	7f 09       	sbc	r23, r15
   18530:	89 91       	ld	r24, Y+
   18532:	88 23       	and	r24, r24
   18534:	39 f0       	breq	.+14     	; 0x18544 <lif_checkname+0x2e>
   18536:	90 e0       	ldi	r25, 0x00	; 0
   18538:	89 df       	rcall	.-238    	; 0x1844c <lif_chars>
   1853a:	89 2b       	or	r24, r25
   1853c:	b1 f7       	brne	.-20     	; 0x1852a <lif_checkname+0x14>
   1853e:	00 e0       	ldi	r16, 0x00	; 0
   18540:	10 e0       	ldi	r17, 0x00	; 0
   18542:	f3 cf       	rjmp	.-26     	; 0x1852a <lif_checkname+0x14>
   18544:	c8 01       	movw	r24, r16
   18546:	cd b7       	in	r28, 0x3d	; 61
   18548:	de b7       	in	r29, 0x3e	; 62
   1854a:	e6 e0       	ldi	r30, 0x06	; 6
   1854c:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00018550 <lif_S2B>:
   18550:	fb 01       	movw	r30, r22
   18552:	dc 01       	movw	r26, r24
   18554:	20 e0       	ldi	r18, 0x00	; 0
   18556:	30 e0       	ldi	r19, 0x00	; 0
   18558:	61 91       	ld	r22, Z+
   1855a:	61 11       	cpse	r22, r1
   1855c:	05 c0       	rjmp	.+10     	; 0x18568 <lif_S2B+0x18>
   1855e:	fc 01       	movw	r30, r24
   18560:	e2 0f       	add	r30, r18
   18562:	f3 1f       	adc	r31, r19
   18564:	60 e2       	ldi	r22, 0x20	; 32
   18566:	08 c0       	rjmp	.+16     	; 0x18578 <lif_S2B+0x28>
   18568:	24 17       	cp	r18, r20
   1856a:	35 07       	cpc	r19, r21
   1856c:	24 f4       	brge	.+8      	; 0x18576 <lif_S2B+0x26>
   1856e:	6d 93       	st	X+, r22
   18570:	2f 5f       	subi	r18, 0xFF	; 255
   18572:	3f 4f       	sbci	r19, 0xFF	; 255
   18574:	f1 cf       	rjmp	.-30     	; 0x18558 <lif_S2B+0x8>
   18576:	08 95       	ret
   18578:	9f 01       	movw	r18, r30
   1857a:	28 1b       	sub	r18, r24
   1857c:	39 0b       	sbc	r19, r25
   1857e:	24 17       	cp	r18, r20
   18580:	35 07       	cpc	r19, r21
   18582:	14 f4       	brge	.+4      	; 0x18588 <lif_S2B+0x38>
   18584:	61 93       	st	Z+, r22
   18586:	f8 cf       	rjmp	.-16     	; 0x18578 <lif_S2B+0x28>
   18588:	08 95       	ret

0001858a <lif_fixname>:
   1858a:	a0 e0       	ldi	r26, 0x00	; 0
   1858c:	b0 e0       	ldi	r27, 0x00	; 0
   1858e:	eb ec       	ldi	r30, 0xCB	; 203
   18590:	f2 ec       	ldi	r31, 0xC2	; 194
   18592:	0c 94 32 e4 	jmp	0x1c864	; 0x1c864 <__prologue_saves__+0x12>
   18596:	8c 01       	movw	r16, r24
   18598:	cb 01       	movw	r24, r22
   1859a:	7a 01       	movw	r14, r20
   1859c:	0e 94 ef 78 	call	0xf1de	; 0xf1de <basename>
   185a0:	6c 01       	movw	r12, r24
   185a2:	e8 01       	movw	r28, r16
   185a4:	80 e2       	ldi	r24, 0x20	; 32
   185a6:	b8 2e       	mov	r11, r24
   185a8:	be 01       	movw	r22, r28
   185aa:	60 1b       	sub	r22, r16
   185ac:	71 0b       	sbc	r23, r17
   185ae:	f6 01       	movw	r30, r12
   185b0:	81 91       	ld	r24, Z+
   185b2:	6f 01       	movw	r12, r30
   185b4:	81 11       	cpse	r24, r1
   185b6:	02 c0       	rjmp	.+4      	; 0x185bc <lif_fixname+0x32>
   185b8:	20 e2       	ldi	r18, 0x20	; 32
   185ba:	0e c0       	rjmp	.+28     	; 0x185d8 <lif_fixname+0x4e>
   185bc:	1e 14       	cp	r1, r14
   185be:	1f 04       	cpc	r1, r15
   185c0:	dc f7       	brge	.-10     	; 0x185b8 <lif_fixname+0x2e>
   185c2:	8e 32       	cpi	r24, 0x2E	; 46
   185c4:	c9 f3       	breq	.-14     	; 0x185b8 <lif_fixname+0x2e>
   185c6:	90 e0       	ldi	r25, 0x00	; 0
   185c8:	41 df       	rcall	.-382    	; 0x1844c <lif_chars>
   185ca:	88 23       	and	r24, r24
   185cc:	11 f0       	breq	.+4      	; 0x185d2 <lif_fixname+0x48>
   185ce:	88 83       	st	Y, r24
   185d0:	01 c0       	rjmp	.+2      	; 0x185d4 <lif_fixname+0x4a>
   185d2:	b8 82       	st	Y, r11
   185d4:	21 96       	adiw	r28, 0x01	; 1
   185d6:	e8 cf       	rjmp	.-48     	; 0x185a8 <lif_fixname+0x1e>
   185d8:	ce 01       	movw	r24, r28
   185da:	80 1b       	sub	r24, r16
   185dc:	91 0b       	sbc	r25, r17
   185de:	8e 15       	cp	r24, r14
   185e0:	9f 05       	cpc	r25, r15
   185e2:	14 f4       	brge	.+4      	; 0x185e8 <lif_fixname+0x5e>
   185e4:	29 93       	st	Y+, r18
   185e6:	f8 cf       	rjmp	.-16     	; 0x185d8 <lif_fixname+0x4e>
   185e8:	18 82       	st	Y, r1
   185ea:	f8 01       	movw	r30, r16
   185ec:	01 90       	ld	r0, Z+
   185ee:	00 20       	and	r0, r0
   185f0:	e9 f7       	brne	.-6      	; 0x185ec <lif_fixname+0x62>
   185f2:	cf 01       	movw	r24, r30
   185f4:	01 97       	sbiw	r24, 0x01	; 1
   185f6:	80 1b       	sub	r24, r16
   185f8:	91 0b       	sbc	r25, r17
   185fa:	cd b7       	in	r28, 0x3d	; 61
   185fc:	de b7       	in	r29, 0x3e	; 62
   185fe:	e9 e0       	ldi	r30, 0x09	; 9
   18600:	0c 94 4e e4 	jmp	0x1c89c	; 0x1c89c <__epilogue_restores__+0x12>

00018604 <lif_vol2str>:
   18604:	ef 92       	push	r14
   18606:	ff 92       	push	r15
   18608:	0f 93       	push	r16
   1860a:	1f 93       	push	r17
   1860c:	cf 93       	push	r28
   1860e:	df 93       	push	r29
   18610:	7c 01       	movw	r14, r24
   18612:	eb 01       	movw	r28, r22
   18614:	fc 01       	movw	r30, r24
   18616:	04 a1       	ldd	r16, Z+36	; 0x24
   18618:	15 a1       	ldd	r17, Z+37	; 0x25
   1861a:	20 e0       	ldi	r18, 0x00	; 0
   1861c:	30 e0       	ldi	r19, 0x00	; 0
   1861e:	42 e0       	ldi	r20, 0x02	; 2
   18620:	50 e0       	ldi	r21, 0x00	; 0
   18622:	60 e0       	ldi	r22, 0x00	; 0
   18624:	70 e0       	ldi	r23, 0x00	; 0
   18626:	ce 01       	movw	r24, r28
   18628:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   1862c:	b7 01       	movw	r22, r14
   1862e:	6a 5d       	subi	r22, 0xDA	; 218
   18630:	7f 4f       	sbci	r23, 0xFF	; 255
   18632:	46 e0       	ldi	r20, 0x06	; 6
   18634:	50 e0       	ldi	r21, 0x00	; 0
   18636:	ce 01       	movw	r24, r28
   18638:	02 96       	adiw	r24, 0x02	; 2
   1863a:	8a df       	rcall	.-236    	; 0x18550 <lif_S2B>
   1863c:	f7 01       	movw	r30, r14
   1863e:	05 a5       	ldd	r16, Z+45	; 0x2d
   18640:	16 a5       	ldd	r17, Z+46	; 0x2e
   18642:	27 a5       	ldd	r18, Z+47	; 0x2f
   18644:	30 a9       	ldd	r19, Z+48	; 0x30
   18646:	44 e0       	ldi	r20, 0x04	; 4
   18648:	50 e0       	ldi	r21, 0x00	; 0
   1864a:	68 e0       	ldi	r22, 0x08	; 8
   1864c:	70 e0       	ldi	r23, 0x00	; 0
   1864e:	ce 01       	movw	r24, r28
   18650:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   18654:	f7 01       	movw	r30, r14
   18656:	01 a9       	ldd	r16, Z+49	; 0x31
   18658:	12 a9       	ldd	r17, Z+50	; 0x32
   1865a:	20 e0       	ldi	r18, 0x00	; 0
   1865c:	30 e0       	ldi	r19, 0x00	; 0
   1865e:	42 e0       	ldi	r20, 0x02	; 2
   18660:	50 e0       	ldi	r21, 0x00	; 0
   18662:	6c e0       	ldi	r22, 0x0C	; 12
   18664:	70 e0       	ldi	r23, 0x00	; 0
   18666:	ce 01       	movw	r24, r28
   18668:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   1866c:	00 e0       	ldi	r16, 0x00	; 0
   1866e:	10 e0       	ldi	r17, 0x00	; 0
   18670:	98 01       	movw	r18, r16
   18672:	42 e0       	ldi	r20, 0x02	; 2
   18674:	50 e0       	ldi	r21, 0x00	; 0
   18676:	6e e0       	ldi	r22, 0x0E	; 14
   18678:	70 e0       	ldi	r23, 0x00	; 0
   1867a:	ce 01       	movw	r24, r28
   1867c:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   18680:	f7 01       	movw	r30, r14
   18682:	05 a9       	ldd	r16, Z+53	; 0x35
   18684:	16 a9       	ldd	r17, Z+54	; 0x36
   18686:	27 a9       	ldd	r18, Z+55	; 0x37
   18688:	30 ad       	ldd	r19, Z+56	; 0x38
   1868a:	44 e0       	ldi	r20, 0x04	; 4
   1868c:	50 e0       	ldi	r21, 0x00	; 0
   1868e:	60 e1       	ldi	r22, 0x10	; 16
   18690:	70 e0       	ldi	r23, 0x00	; 0
   18692:	ce 01       	movw	r24, r28
   18694:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   18698:	f7 01       	movw	r30, r14
   1869a:	01 ad       	ldd	r16, Z+57	; 0x39
   1869c:	12 ad       	ldd	r17, Z+58	; 0x3a
   1869e:	20 e0       	ldi	r18, 0x00	; 0
   186a0:	30 e0       	ldi	r19, 0x00	; 0
   186a2:	42 e0       	ldi	r20, 0x02	; 2
   186a4:	50 e0       	ldi	r21, 0x00	; 0
   186a6:	64 e1       	ldi	r22, 0x14	; 20
   186a8:	70 e0       	ldi	r23, 0x00	; 0
   186aa:	ce 01       	movw	r24, r28
   186ac:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   186b0:	00 e0       	ldi	r16, 0x00	; 0
   186b2:	10 e0       	ldi	r17, 0x00	; 0
   186b4:	98 01       	movw	r18, r16
   186b6:	42 e0       	ldi	r20, 0x02	; 2
   186b8:	50 e0       	ldi	r21, 0x00	; 0
   186ba:	66 e1       	ldi	r22, 0x16	; 22
   186bc:	70 e0       	ldi	r23, 0x00	; 0
   186be:	ce 01       	movw	r24, r28
   186c0:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   186c4:	f7 01       	movw	r30, r14
   186c6:	fd 96       	adiw	r30, 0x3d	; 61
   186c8:	00 81       	ld	r16, Z
   186ca:	11 81       	ldd	r17, Z+1	; 0x01
   186cc:	22 81       	ldd	r18, Z+2	; 0x02
   186ce:	33 81       	ldd	r19, Z+3	; 0x03
   186d0:	44 e0       	ldi	r20, 0x04	; 4
   186d2:	50 e0       	ldi	r21, 0x00	; 0
   186d4:	68 e1       	ldi	r22, 0x18	; 24
   186d6:	70 e0       	ldi	r23, 0x00	; 0
   186d8:	ce 01       	movw	r24, r28
   186da:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   186de:	f7 01       	movw	r30, r14
   186e0:	ef 5b       	subi	r30, 0xBF	; 191
   186e2:	ff 4f       	sbci	r31, 0xFF	; 255
   186e4:	00 81       	ld	r16, Z
   186e6:	11 81       	ldd	r17, Z+1	; 0x01
   186e8:	22 81       	ldd	r18, Z+2	; 0x02
   186ea:	33 81       	ldd	r19, Z+3	; 0x03
   186ec:	44 e0       	ldi	r20, 0x04	; 4
   186ee:	50 e0       	ldi	r21, 0x00	; 0
   186f0:	6c e1       	ldi	r22, 0x1C	; 28
   186f2:	70 e0       	ldi	r23, 0x00	; 0
   186f4:	ce 01       	movw	r24, r28
   186f6:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   186fa:	f7 01       	movw	r30, r14
   186fc:	eb 5b       	subi	r30, 0xBB	; 187
   186fe:	ff 4f       	sbci	r31, 0xFF	; 255
   18700:	00 81       	ld	r16, Z
   18702:	11 81       	ldd	r17, Z+1	; 0x01
   18704:	22 81       	ldd	r18, Z+2	; 0x02
   18706:	33 81       	ldd	r19, Z+3	; 0x03
   18708:	44 e0       	ldi	r20, 0x04	; 4
   1870a:	50 e0       	ldi	r21, 0x00	; 0
   1870c:	60 e2       	ldi	r22, 0x20	; 32
   1870e:	70 e0       	ldi	r23, 0x00	; 0
   18710:	ce 01       	movw	r24, r28
   18712:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   18716:	de 01       	movw	r26, r28
   18718:	94 96       	adiw	r26, 0x24	; 36
   1871a:	f7 01       	movw	r30, r14
   1871c:	e7 5b       	subi	r30, 0xB7	; 183
   1871e:	ff 4f       	sbci	r31, 0xFF	; 255
   18720:	86 e0       	ldi	r24, 0x06	; 6
   18722:	01 90       	ld	r0, Z+
   18724:	0d 92       	st	X+, r0
   18726:	8a 95       	dec	r24
   18728:	e1 f7       	brne	.-8      	; 0x18722 <lif_vol2str+0x11e>
   1872a:	cd b7       	in	r28, 0x3d	; 61
   1872c:	de b7       	in	r29, 0x3e	; 62
   1872e:	e6 e0       	ldi	r30, 0x06	; 6
   18730:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00018734 <lif_str2vol>:
   18734:	0f 93       	push	r16
   18736:	1f 93       	push	r17
   18738:	cf 93       	push	r28
   1873a:	df 93       	push	r29
   1873c:	8c 01       	movw	r16, r24
   1873e:	eb 01       	movw	r28, r22
   18740:	42 e0       	ldi	r20, 0x02	; 2
   18742:	50 e0       	ldi	r21, 0x00	; 0
   18744:	60 e0       	ldi	r22, 0x00	; 0
   18746:	70 e0       	ldi	r23, 0x00	; 0
   18748:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   1874c:	7d a3       	std	Y+37, r23	; 0x25
   1874e:	6c a3       	std	Y+36, r22	; 0x24
   18750:	be 01       	movw	r22, r28
   18752:	6a 5d       	subi	r22, 0xDA	; 218
   18754:	7f 4f       	sbci	r23, 0xFF	; 255
   18756:	46 e0       	ldi	r20, 0x06	; 6
   18758:	50 e0       	ldi	r21, 0x00	; 0
   1875a:	c8 01       	movw	r24, r16
   1875c:	02 96       	adiw	r24, 0x02	; 2
   1875e:	a1 de       	rcall	.-702    	; 0x184a2 <lif_B2S>
   18760:	44 e0       	ldi	r20, 0x04	; 4
   18762:	50 e0       	ldi	r21, 0x00	; 0
   18764:	68 e0       	ldi	r22, 0x08	; 8
   18766:	70 e0       	ldi	r23, 0x00	; 0
   18768:	c8 01       	movw	r24, r16
   1876a:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   1876e:	6d a7       	std	Y+45, r22	; 0x2d
   18770:	7e a7       	std	Y+46, r23	; 0x2e
   18772:	8f a7       	std	Y+47, r24	; 0x2f
   18774:	98 ab       	std	Y+48, r25	; 0x30
   18776:	42 e0       	ldi	r20, 0x02	; 2
   18778:	50 e0       	ldi	r21, 0x00	; 0
   1877a:	6c e0       	ldi	r22, 0x0C	; 12
   1877c:	70 e0       	ldi	r23, 0x00	; 0
   1877e:	c8 01       	movw	r24, r16
   18780:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   18784:	7a ab       	std	Y+50, r23	; 0x32
   18786:	69 ab       	std	Y+49, r22	; 0x31
   18788:	42 e0       	ldi	r20, 0x02	; 2
   1878a:	50 e0       	ldi	r21, 0x00	; 0
   1878c:	6e e0       	ldi	r22, 0x0E	; 14
   1878e:	70 e0       	ldi	r23, 0x00	; 0
   18790:	c8 01       	movw	r24, r16
   18792:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   18796:	7c ab       	std	Y+52, r23	; 0x34
   18798:	6b ab       	std	Y+51, r22	; 0x33
   1879a:	44 e0       	ldi	r20, 0x04	; 4
   1879c:	50 e0       	ldi	r21, 0x00	; 0
   1879e:	60 e1       	ldi	r22, 0x10	; 16
   187a0:	70 e0       	ldi	r23, 0x00	; 0
   187a2:	c8 01       	movw	r24, r16
   187a4:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   187a8:	6d ab       	std	Y+53, r22	; 0x35
   187aa:	7e ab       	std	Y+54, r23	; 0x36
   187ac:	8f ab       	std	Y+55, r24	; 0x37
   187ae:	98 af       	std	Y+56, r25	; 0x38
   187b0:	42 e0       	ldi	r20, 0x02	; 2
   187b2:	50 e0       	ldi	r21, 0x00	; 0
   187b4:	64 e1       	ldi	r22, 0x14	; 20
   187b6:	70 e0       	ldi	r23, 0x00	; 0
   187b8:	c8 01       	movw	r24, r16
   187ba:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   187be:	7a af       	std	Y+58, r23	; 0x3a
   187c0:	69 af       	std	Y+57, r22	; 0x39
   187c2:	42 e0       	ldi	r20, 0x02	; 2
   187c4:	50 e0       	ldi	r21, 0x00	; 0
   187c6:	66 e1       	ldi	r22, 0x16	; 22
   187c8:	70 e0       	ldi	r23, 0x00	; 0
   187ca:	c8 01       	movw	r24, r16
   187cc:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   187d0:	7c af       	std	Y+60, r23	; 0x3c
   187d2:	6b af       	std	Y+59, r22	; 0x3b
   187d4:	44 e0       	ldi	r20, 0x04	; 4
   187d6:	50 e0       	ldi	r21, 0x00	; 0
   187d8:	68 e1       	ldi	r22, 0x18	; 24
   187da:	70 e0       	ldi	r23, 0x00	; 0
   187dc:	c8 01       	movw	r24, r16
   187de:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   187e2:	fe 01       	movw	r30, r28
   187e4:	fd 96       	adiw	r30, 0x3d	; 61
   187e6:	60 83       	st	Z, r22
   187e8:	71 83       	std	Z+1, r23	; 0x01
   187ea:	82 83       	std	Z+2, r24	; 0x02
   187ec:	93 83       	std	Z+3, r25	; 0x03
   187ee:	44 e0       	ldi	r20, 0x04	; 4
   187f0:	50 e0       	ldi	r21, 0x00	; 0
   187f2:	6c e1       	ldi	r22, 0x1C	; 28
   187f4:	70 e0       	ldi	r23, 0x00	; 0
   187f6:	c8 01       	movw	r24, r16
   187f8:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   187fc:	fe 01       	movw	r30, r28
   187fe:	ef 5b       	subi	r30, 0xBF	; 191
   18800:	ff 4f       	sbci	r31, 0xFF	; 255
   18802:	60 83       	st	Z, r22
   18804:	71 83       	std	Z+1, r23	; 0x01
   18806:	82 83       	std	Z+2, r24	; 0x02
   18808:	93 83       	std	Z+3, r25	; 0x03
   1880a:	44 e0       	ldi	r20, 0x04	; 4
   1880c:	50 e0       	ldi	r21, 0x00	; 0
   1880e:	60 e2       	ldi	r22, 0x20	; 32
   18810:	70 e0       	ldi	r23, 0x00	; 0
   18812:	c8 01       	movw	r24, r16
   18814:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   18818:	fe 01       	movw	r30, r28
   1881a:	eb 5b       	subi	r30, 0xBB	; 187
   1881c:	ff 4f       	sbci	r31, 0xFF	; 255
   1881e:	60 83       	st	Z, r22
   18820:	71 83       	std	Z+1, r23	; 0x01
   18822:	82 83       	std	Z+2, r24	; 0x02
   18824:	93 83       	std	Z+3, r25	; 0x03
   18826:	de 01       	movw	r26, r28
   18828:	a7 5b       	subi	r26, 0xB7	; 183
   1882a:	bf 4f       	sbci	r27, 0xFF	; 255
   1882c:	f8 01       	movw	r30, r16
   1882e:	b4 96       	adiw	r30, 0x24	; 36
   18830:	86 e0       	ldi	r24, 0x06	; 6
   18832:	01 90       	ld	r0, Z+
   18834:	0d 92       	st	X+, r0
   18836:	8a 95       	dec	r24
   18838:	e1 f7       	brne	.-8      	; 0x18832 <lif_str2vol+0xfe>
   1883a:	df 91       	pop	r29
   1883c:	cf 91       	pop	r28
   1883e:	1f 91       	pop	r17
   18840:	0f 91       	pop	r16
   18842:	08 95       	ret

00018844 <lif_dir2str>:
   18844:	ef 92       	push	r14
   18846:	ff 92       	push	r15
   18848:	0f 93       	push	r16
   1884a:	1f 93       	push	r17
   1884c:	cf 93       	push	r28
   1884e:	df 93       	push	r29
   18850:	ec 01       	movw	r28, r24
   18852:	7b 01       	movw	r14, r22
   18854:	bc 01       	movw	r22, r24
   18856:	61 5b       	subi	r22, 0xB1	; 177
   18858:	7f 4f       	sbci	r23, 0xFF	; 255
   1885a:	4a e0       	ldi	r20, 0x0A	; 10
   1885c:	50 e0       	ldi	r21, 0x00	; 0
   1885e:	c7 01       	movw	r24, r14
   18860:	77 de       	rcall	.-786    	; 0x18550 <lif_S2B>
   18862:	fe 01       	movw	r30, r28
   18864:	e6 5a       	subi	r30, 0xA6	; 166
   18866:	ff 4f       	sbci	r31, 0xFF	; 255
   18868:	00 81       	ld	r16, Z
   1886a:	11 81       	ldd	r17, Z+1	; 0x01
   1886c:	20 e0       	ldi	r18, 0x00	; 0
   1886e:	30 e0       	ldi	r19, 0x00	; 0
   18870:	42 e0       	ldi	r20, 0x02	; 2
   18872:	50 e0       	ldi	r21, 0x00	; 0
   18874:	6a e0       	ldi	r22, 0x0A	; 10
   18876:	70 e0       	ldi	r23, 0x00	; 0
   18878:	c7 01       	movw	r24, r14
   1887a:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   1887e:	fe 01       	movw	r30, r28
   18880:	e4 5a       	subi	r30, 0xA4	; 164
   18882:	ff 4f       	sbci	r31, 0xFF	; 255
   18884:	00 81       	ld	r16, Z
   18886:	11 81       	ldd	r17, Z+1	; 0x01
   18888:	22 81       	ldd	r18, Z+2	; 0x02
   1888a:	33 81       	ldd	r19, Z+3	; 0x03
   1888c:	44 e0       	ldi	r20, 0x04	; 4
   1888e:	50 e0       	ldi	r21, 0x00	; 0
   18890:	6c e0       	ldi	r22, 0x0C	; 12
   18892:	70 e0       	ldi	r23, 0x00	; 0
   18894:	c7 01       	movw	r24, r14
   18896:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   1889a:	fe 01       	movw	r30, r28
   1889c:	e0 5a       	subi	r30, 0xA0	; 160
   1889e:	ff 4f       	sbci	r31, 0xFF	; 255
   188a0:	00 81       	ld	r16, Z
   188a2:	11 81       	ldd	r17, Z+1	; 0x01
   188a4:	22 81       	ldd	r18, Z+2	; 0x02
   188a6:	33 81       	ldd	r19, Z+3	; 0x03
   188a8:	44 e0       	ldi	r20, 0x04	; 4
   188aa:	50 e0       	ldi	r21, 0x00	; 0
   188ac:	60 e1       	ldi	r22, 0x10	; 16
   188ae:	70 e0       	ldi	r23, 0x00	; 0
   188b0:	c7 01       	movw	r24, r14
   188b2:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   188b6:	d7 01       	movw	r26, r14
   188b8:	54 96       	adiw	r26, 0x14	; 20
   188ba:	fe 01       	movw	r30, r28
   188bc:	ec 59       	subi	r30, 0x9C	; 156
   188be:	ff 4f       	sbci	r31, 0xFF	; 255
   188c0:	86 e0       	ldi	r24, 0x06	; 6
   188c2:	01 90       	ld	r0, Z+
   188c4:	0d 92       	st	X+, r0
   188c6:	8a 95       	dec	r24
   188c8:	e1 f7       	brne	.-8      	; 0x188c2 <lif_dir2str+0x7e>
   188ca:	fe 01       	movw	r30, r28
   188cc:	e6 59       	subi	r30, 0x96	; 150
   188ce:	ff 4f       	sbci	r31, 0xFF	; 255
   188d0:	00 81       	ld	r16, Z
   188d2:	11 81       	ldd	r17, Z+1	; 0x01
   188d4:	20 e0       	ldi	r18, 0x00	; 0
   188d6:	30 e0       	ldi	r19, 0x00	; 0
   188d8:	42 e0       	ldi	r20, 0x02	; 2
   188da:	50 e0       	ldi	r21, 0x00	; 0
   188dc:	6a e1       	ldi	r22, 0x1A	; 26
   188de:	70 e0       	ldi	r23, 0x00	; 0
   188e0:	c7 01       	movw	r24, r14
   188e2:	0e 94 54 93 	call	0x126a8	; 0x126a8 <V2B_MSB>
   188e6:	fe 01       	movw	r30, r28
   188e8:	e4 59       	subi	r30, 0x94	; 148
   188ea:	ff 4f       	sbci	r31, 0xFF	; 255
   188ec:	00 81       	ld	r16, Z
   188ee:	11 81       	ldd	r17, Z+1	; 0x01
   188f0:	20 e0       	ldi	r18, 0x00	; 0
   188f2:	30 e0       	ldi	r19, 0x00	; 0
   188f4:	42 e0       	ldi	r20, 0x02	; 2
   188f6:	50 e0       	ldi	r21, 0x00	; 0
   188f8:	6c e1       	ldi	r22, 0x1C	; 28
   188fa:	70 e0       	ldi	r23, 0x00	; 0
   188fc:	c7 01       	movw	r24, r14
   188fe:	0e 94 68 93 	call	0x126d0	; 0x126d0 <V2B_LSB>
   18902:	c2 59       	subi	r28, 0x92	; 146
   18904:	df 4f       	sbci	r29, 0xFF	; 255
   18906:	08 81       	ld	r16, Y
   18908:	19 81       	ldd	r17, Y+1	; 0x01
   1890a:	20 e0       	ldi	r18, 0x00	; 0
   1890c:	30 e0       	ldi	r19, 0x00	; 0
   1890e:	42 e0       	ldi	r20, 0x02	; 2
   18910:	50 e0       	ldi	r21, 0x00	; 0
   18912:	6e e1       	ldi	r22, 0x1E	; 30
   18914:	70 e0       	ldi	r23, 0x00	; 0
   18916:	c7 01       	movw	r24, r14
   18918:	0e 94 68 93 	call	0x126d0	; 0x126d0 <V2B_LSB>
   1891c:	cd b7       	in	r28, 0x3d	; 61
   1891e:	de b7       	in	r29, 0x3e	; 62
   18920:	e6 e0       	ldi	r30, 0x06	; 6
   18922:	0c 94 51 e4 	jmp	0x1c8a2	; 0x1c8a2 <__epilogue_restores__+0x18>

00018926 <lif_str2dir>:
   18926:	0f 93       	push	r16
   18928:	1f 93       	push	r17
   1892a:	cf 93       	push	r28
   1892c:	df 93       	push	r29
   1892e:	8c 01       	movw	r16, r24
   18930:	eb 01       	movw	r28, r22
   18932:	61 5b       	subi	r22, 0xB1	; 177
   18934:	7f 4f       	sbci	r23, 0xFF	; 255
   18936:	4a e0       	ldi	r20, 0x0A	; 10
   18938:	50 e0       	ldi	r21, 0x00	; 0
   1893a:	b3 dd       	rcall	.-1178   	; 0x184a2 <lif_B2S>
   1893c:	42 e0       	ldi	r20, 0x02	; 2
   1893e:	50 e0       	ldi	r21, 0x00	; 0
   18940:	6a e0       	ldi	r22, 0x0A	; 10
   18942:	70 e0       	ldi	r23, 0x00	; 0
   18944:	c8 01       	movw	r24, r16
   18946:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   1894a:	fe 01       	movw	r30, r28
   1894c:	e6 5a       	subi	r30, 0xA6	; 166
   1894e:	ff 4f       	sbci	r31, 0xFF	; 255
   18950:	71 83       	std	Z+1, r23	; 0x01
   18952:	60 83       	st	Z, r22
   18954:	44 e0       	ldi	r20, 0x04	; 4
   18956:	50 e0       	ldi	r21, 0x00	; 0
   18958:	6c e0       	ldi	r22, 0x0C	; 12
   1895a:	70 e0       	ldi	r23, 0x00	; 0
   1895c:	c8 01       	movw	r24, r16
   1895e:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   18962:	fe 01       	movw	r30, r28
   18964:	e4 5a       	subi	r30, 0xA4	; 164
   18966:	ff 4f       	sbci	r31, 0xFF	; 255
   18968:	60 83       	st	Z, r22
   1896a:	71 83       	std	Z+1, r23	; 0x01
   1896c:	82 83       	std	Z+2, r24	; 0x02
   1896e:	93 83       	std	Z+3, r25	; 0x03
   18970:	44 e0       	ldi	r20, 0x04	; 4
   18972:	50 e0       	ldi	r21, 0x00	; 0
   18974:	60 e1       	ldi	r22, 0x10	; 16
   18976:	70 e0       	ldi	r23, 0x00	; 0
   18978:	c8 01       	movw	r24, r16
   1897a:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   1897e:	fe 01       	movw	r30, r28
   18980:	e0 5a       	subi	r30, 0xA0	; 160
   18982:	ff 4f       	sbci	r31, 0xFF	; 255
   18984:	60 83       	st	Z, r22
   18986:	71 83       	std	Z+1, r23	; 0x01
   18988:	82 83       	std	Z+2, r24	; 0x02
   1898a:	93 83       	std	Z+3, r25	; 0x03
   1898c:	de 01       	movw	r26, r28
   1898e:	ac 59       	subi	r26, 0x9C	; 156
   18990:	bf 4f       	sbci	r27, 0xFF	; 255
   18992:	f8 01       	movw	r30, r16
   18994:	74 96       	adiw	r30, 0x14	; 20
   18996:	86 e0       	ldi	r24, 0x06	; 6
   18998:	01 90       	ld	r0, Z+
   1899a:	0d 92       	st	X+, r0
   1899c:	8a 95       	dec	r24
   1899e:	e1 f7       	brne	.-8      	; 0x18998 <lif_str2dir+0x72>
   189a0:	42 e0       	ldi	r20, 0x02	; 2
   189a2:	50 e0       	ldi	r21, 0x00	; 0
   189a4:	6a e1       	ldi	r22, 0x1A	; 26
   189a6:	70 e0       	ldi	r23, 0x00	; 0
   189a8:	c8 01       	movw	r24, r16
   189aa:	0e 94 7d 93 	call	0x126fa	; 0x126fa <B2V_MSB>
   189ae:	fe 01       	movw	r30, r28
   189b0:	e6 59       	subi	r30, 0x96	; 150
   189b2:	ff 4f       	sbci	r31, 0xFF	; 255
   189b4:	71 83       	std	Z+1, r23	; 0x01
   189b6:	60 83       	st	Z, r22
   189b8:	42 e0       	ldi	r20, 0x02	; 2
   189ba:	50 e0       	ldi	r21, 0x00	; 0
   189bc:	6c e1       	ldi	r22, 0x1C	; 28
   189be:	70 e0       	ldi	r23, 0x00	; 0
   189c0:	c8 01       	movw	r24, r16
   189c2:	0e 94 9c 93 	call	0x12738	; 0x12738 <B2V_LSB>
   189c6:	fe 01       	movw	r30, r28
   189c8:	e4 59       	subi	r30, 0x94	; 148
   189ca:	ff 4f       	sbci	r31, 0xFF	; 255
   189cc:	71 83       	std	Z+1, r23	; 0x01
   189ce:	60 83       	st	Z, r22
   189d0:	42 e0       	ldi	r20, 0x02	; 2
   189d2:	50 e0       	ldi	r21, 0x00	; 0
   189d4:	6e e1       	ldi	r22, 0x1E	; 30
   189d6:	70 e0       	ldi	r23, 0x00	; 0
   189d8:	c8 01       	movw	r24, r16
   189da:	0e 94 9c 93 	call	0x12738	; 0x12738 <B2V_LSB>
   189de:	c2 59       	subi	r28, 0x92	; 146
   189e0:	df 4f       	sbci	r29, 0xFF	; 255
   189e2:	79 83       	std	Y+1, r23	; 0x01
   189e4:	68 83       	st	Y, r22
   189e6:	df 91       	pop	r29
   189e8:	cf 91       	pop	r28
   189ea:	1f 91       	pop	r17
   189ec:	0f 91       	pop	r16
   189ee:	08 95       	ret

000189f0 <lif_BIN2BCD>:
   189f0:	6a e0       	ldi	r22, 0x0A	; 10
   189f2:	0e 94 74 e3 	call	0x1c6e8	; 0x1c6e8 <__udivmodqi4>
   189f6:	82 95       	swap	r24
   189f8:	80 7f       	andi	r24, 0xF0	; 240
   189fa:	89 2b       	or	r24, r25
   189fc:	08 95       	ret

000189fe <lif_BCD2BIN>:
   189fe:	28 2f       	mov	r18, r24
   18a00:	22 95       	swap	r18
   18a02:	2f 70       	andi	r18, 0x0F	; 15
   18a04:	8f 70       	andi	r24, 0x0F	; 15
   18a06:	90 e0       	ldi	r25, 0x00	; 0
   18a08:	3a e0       	ldi	r19, 0x0A	; 10
   18a0a:	23 9f       	mul	r18, r19
   18a0c:	80 0d       	add	r24, r0
   18a0e:	91 1d       	adc	r25, r1
   18a10:	11 24       	eor	r1, r1
   18a12:	08 95       	ret

00018a14 <lif_time2lifbcd>:
   18a14:	aa e1       	ldi	r26, 0x1A	; 26
   18a16:	b0 e0       	ldi	r27, 0x00	; 0
   18a18:	e0 e1       	ldi	r30, 0x10	; 16
   18a1a:	f5 ec       	ldi	r31, 0xC5	; 197
   18a1c:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
   18a20:	8b 01       	movw	r16, r22
   18a22:	9c 01       	movw	r18, r24
   18a24:	6f 8b       	std	Y+23, r22	; 0x17
   18a26:	78 8f       	std	Y+24, r23	; 0x18
   18a28:	89 8f       	std	Y+25, r24	; 0x19
   18a2a:	9a 8f       	std	Y+26, r25	; 0x1a
   18a2c:	67 2b       	or	r22, r23
   18a2e:	68 2b       	or	r22, r24
   18a30:	69 2b       	or	r22, r25
   18a32:	41 f4       	brne	.+16     	; 0x18a44 <lif_time2lifbcd+0x30>
   18a34:	fa 01       	movw	r30, r20
   18a36:	ca 01       	movw	r24, r20
   18a38:	06 96       	adiw	r24, 0x06	; 6
   18a3a:	11 92       	st	Z+, r1
   18a3c:	e8 17       	cp	r30, r24
   18a3e:	f9 07       	cpc	r31, r25
   18a40:	e1 f7       	brne	.-8      	; 0x18a3a <lif_time2lifbcd+0x26>
   18a42:	26 c0       	rjmp	.+76     	; 0x18a90 <lif_time2lifbcd+0x7c>
   18a44:	8a 01       	movw	r16, r20
   18a46:	be 01       	movw	r22, r28
   18a48:	6f 5f       	subi	r22, 0xFF	; 255
   18a4a:	7f 4f       	sbci	r23, 0xFF	; 255
   18a4c:	ce 01       	movw	r24, r28
   18a4e:	47 96       	adiw	r24, 0x17	; 23
   18a50:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <gmtime_r>
   18a54:	8b 85       	ldd	r24, Y+11	; 0x0b
   18a56:	9c 85       	ldd	r25, Y+12	; 0x0c
   18a58:	64 e6       	ldi	r22, 0x64	; 100
   18a5a:	70 e0       	ldi	r23, 0x00	; 0
   18a5c:	0e 94 94 e3 	call	0x1c728	; 0x1c728 <__divmodhi4>
   18a60:	c7 df       	rcall	.-114    	; 0x189f0 <lif_BIN2BCD>
   18a62:	f8 01       	movw	r30, r16
   18a64:	80 83       	st	Z, r24
   18a66:	89 85       	ldd	r24, Y+9	; 0x09
   18a68:	8f 5f       	subi	r24, 0xFF	; 255
   18a6a:	c2 df       	rcall	.-124    	; 0x189f0 <lif_BIN2BCD>
   18a6c:	f8 01       	movw	r30, r16
   18a6e:	81 83       	std	Z+1, r24	; 0x01
   18a70:	8f 81       	ldd	r24, Y+7	; 0x07
   18a72:	be df       	rcall	.-132    	; 0x189f0 <lif_BIN2BCD>
   18a74:	f8 01       	movw	r30, r16
   18a76:	82 83       	std	Z+2, r24	; 0x02
   18a78:	8d 81       	ldd	r24, Y+5	; 0x05
   18a7a:	ba df       	rcall	.-140    	; 0x189f0 <lif_BIN2BCD>
   18a7c:	f8 01       	movw	r30, r16
   18a7e:	83 83       	std	Z+3, r24	; 0x03
   18a80:	8b 81       	ldd	r24, Y+3	; 0x03
   18a82:	b6 df       	rcall	.-148    	; 0x189f0 <lif_BIN2BCD>
   18a84:	f8 01       	movw	r30, r16
   18a86:	84 83       	std	Z+4, r24	; 0x04
   18a88:	89 81       	ldd	r24, Y+1	; 0x01
   18a8a:	b2 df       	rcall	.-156    	; 0x189f0 <lif_BIN2BCD>
   18a8c:	f8 01       	movw	r30, r16
   18a8e:	85 83       	std	Z+5, r24	; 0x05
   18a90:	6a 96       	adiw	r28, 0x1a	; 26
   18a92:	e4 e0       	ldi	r30, 0x04	; 4
   18a94:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

00018a98 <lif_lifbcd2time>:
   18a98:	a6 e1       	ldi	r26, 0x16	; 22
   18a9a:	b0 e0       	ldi	r27, 0x00	; 0
   18a9c:	e2 e5       	ldi	r30, 0x52	; 82
   18a9e:	f5 ec       	ldi	r31, 0xC5	; 197
   18aa0:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   18aa4:	8c 01       	movw	r16, r24
   18aa6:	7c 01       	movw	r14, r24
   18aa8:	5c 01       	movw	r10, r24
   18aaa:	26 e0       	ldi	r18, 0x06	; 6
   18aac:	a2 0e       	add	r10, r18
   18aae:	b1 1c       	adc	r11, r1
   18ab0:	cc 24       	eor	r12, r12
   18ab2:	c3 94       	inc	r12
   18ab4:	d1 2c       	mov	r13, r1
   18ab6:	f7 01       	movw	r30, r14
   18ab8:	81 91       	ld	r24, Z+
   18aba:	7f 01       	movw	r14, r30
   18abc:	a0 df       	rcall	.-192    	; 0x189fe <lif_BCD2BIN>
   18abe:	89 2b       	or	r24, r25
   18ac0:	11 f0       	breq	.+4      	; 0x18ac6 <lif_lifbcd2time+0x2e>
   18ac2:	c1 2c       	mov	r12, r1
   18ac4:	d1 2c       	mov	r13, r1
   18ac6:	ea 14       	cp	r14, r10
   18ac8:	fb 04       	cpc	r15, r11
   18aca:	a9 f7       	brne	.-22     	; 0x18ab6 <lif_lifbcd2time+0x1e>
   18acc:	c1 14       	cp	r12, r1
   18ace:	d1 04       	cpc	r13, r1
   18ad0:	61 f5       	brne	.+88     	; 0x18b2a <lif_lifbcd2time+0x92>
   18ad2:	f8 01       	movw	r30, r16
   18ad4:	80 81       	ld	r24, Z
   18ad6:	93 df       	rcall	.-218    	; 0x189fe <lif_BCD2BIN>
   18ad8:	7c 01       	movw	r14, r24
   18ada:	f8 01       	movw	r30, r16
   18adc:	81 81       	ldd	r24, Z+1	; 0x01
   18ade:	8f df       	rcall	.-226    	; 0x189fe <lif_BCD2BIN>
   18ae0:	01 97       	sbiw	r24, 0x01	; 1
   18ae2:	f6 e4       	ldi	r31, 0x46	; 70
   18ae4:	ef 16       	cp	r14, r31
   18ae6:	f1 04       	cpc	r15, r1
   18ae8:	1c f4       	brge	.+6      	; 0x18af0 <lif_lifbcd2time+0x58>
   18aea:	24 e6       	ldi	r18, 0x64	; 100
   18aec:	e2 0e       	add	r14, r18
   18aee:	f1 1c       	adc	r15, r1
   18af0:	fc 86       	std	Y+12, r15	; 0x0c
   18af2:	eb 86       	std	Y+11, r14	; 0x0b
   18af4:	9a 87       	std	Y+10, r25	; 0x0a
   18af6:	89 87       	std	Y+9, r24	; 0x09
   18af8:	f8 01       	movw	r30, r16
   18afa:	82 81       	ldd	r24, Z+2	; 0x02
   18afc:	80 df       	rcall	.-256    	; 0x189fe <lif_BCD2BIN>
   18afe:	98 87       	std	Y+8, r25	; 0x08
   18b00:	8f 83       	std	Y+7, r24	; 0x07
   18b02:	f8 01       	movw	r30, r16
   18b04:	83 81       	ldd	r24, Z+3	; 0x03
   18b06:	7b df       	rcall	.-266    	; 0x189fe <lif_BCD2BIN>
   18b08:	9e 83       	std	Y+6, r25	; 0x06
   18b0a:	8d 83       	std	Y+5, r24	; 0x05
   18b0c:	f8 01       	movw	r30, r16
   18b0e:	84 81       	ldd	r24, Z+4	; 0x04
   18b10:	76 df       	rcall	.-276    	; 0x189fe <lif_BCD2BIN>
   18b12:	9c 83       	std	Y+4, r25	; 0x04
   18b14:	8b 83       	std	Y+3, r24	; 0x03
   18b16:	f8 01       	movw	r30, r16
   18b18:	85 81       	ldd	r24, Z+5	; 0x05
   18b1a:	71 df       	rcall	.-286    	; 0x189fe <lif_BCD2BIN>
   18b1c:	9a 83       	std	Y+2, r25	; 0x02
   18b1e:	89 83       	std	Y+1, r24	; 0x01
   18b20:	ce 01       	movw	r24, r28
   18b22:	01 96       	adiw	r24, 0x01	; 1
   18b24:	0e 94 41 3c 	call	0x7882	; 0x7882 <timegm>
   18b28:	03 c0       	rjmp	.+6      	; 0x18b30 <lif_lifbcd2time+0x98>
   18b2a:	60 e0       	ldi	r22, 0x00	; 0
   18b2c:	70 e0       	ldi	r23, 0x00	; 0
   18b2e:	cb 01       	movw	r24, r22
   18b30:	66 96       	adiw	r28, 0x16	; 22
   18b32:	ea e0       	ldi	r30, 0x0A	; 10
   18b34:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

00018b38 <lif_ctime_gmt>:
   18b38:	a6 e1       	ldi	r26, 0x16	; 22
   18b3a:	b0 e0       	ldi	r27, 0x00	; 0
   18b3c:	e2 ea       	ldi	r30, 0xA2	; 162
   18b3e:	f5 ec       	ldi	r31, 0xC5	; 197
   18b40:	0c 94 37 e4 	jmp	0x1c86e	; 0x1c86e <__prologue_saves__+0x1c>
   18b44:	20 e2       	ldi	r18, 0x20	; 32
   18b46:	ef ed       	ldi	r30, 0xDF	; 223
   18b48:	f9 e1       	ldi	r31, 0x19	; 25
   18b4a:	df 01       	movw	r26, r30
   18b4c:	1d 92       	st	X+, r1
   18b4e:	2a 95       	dec	r18
   18b50:	e9 f7       	brne	.-6      	; 0x18b4c <lif_ctime_gmt+0x14>
   18b52:	be 01       	movw	r22, r28
   18b54:	6f 5f       	subi	r22, 0xFF	; 255
   18b56:	7f 4f       	sbci	r23, 0xFF	; 255
   18b58:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <gmtime_r>
   18b5c:	6f ed       	ldi	r22, 0xDF	; 223
   18b5e:	79 e1       	ldi	r23, 0x19	; 25
   18b60:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <asctime_r>
   18b64:	8c 01       	movw	r16, r24
   18b66:	0e 94 99 33 	call	0x6732	; 0x6732 <trim_tail>
   18b6a:	c8 01       	movw	r24, r16
   18b6c:	66 96       	adiw	r28, 0x16	; 22
   18b6e:	e4 e0       	ldi	r30, 0x04	; 4
   18b70:	0c 94 53 e4 	jmp	0x1c8a6	; 0x1c8a6 <__epilogue_restores__+0x1c>

00018b74 <lif_lifbcd2timestr>:
   18b74:	a4 e0       	ldi	r26, 0x04	; 4
   18b76:	b0 e0       	ldi	r27, 0x00	; 0
   18b78:	e0 ec       	ldi	r30, 0xC0	; 192
   18b7a:	f5 ec       	ldi	r31, 0xC5	; 197
   18b7c:	0c 94 39 e4 	jmp	0x1c872	; 0x1c872 <__prologue_saves__+0x20>
   18b80:	20 e2       	ldi	r18, 0x20	; 32
   18b82:	ef eb       	ldi	r30, 0xBF	; 191
   18b84:	f9 e1       	ldi	r31, 0x19	; 25
   18b86:	df 01       	movw	r26, r30
   18b88:	1d 92       	st	X+, r1
   18b8a:	2a 95       	dec	r18
   18b8c:	e9 f7       	brne	.-6      	; 0x18b88 <lif_lifbcd2timestr+0x14>
   18b8e:	84 df       	rcall	.-248    	; 0x18a98 <lif_lifbcd2time>
   18b90:	69 83       	std	Y+1, r22	; 0x01
   18b92:	7a 83       	std	Y+2, r23	; 0x02
   18b94:	8b 83       	std	Y+3, r24	; 0x03
   18b96:	9c 83       	std	Y+4, r25	; 0x04
   18b98:	67 2b       	or	r22, r23
   18b9a:	68 2b       	or	r22, r24
   18b9c:	69 2b       	or	r22, r25
   18b9e:	29 f0       	breq	.+10     	; 0x18baa <lif_lifbcd2timestr+0x36>
   18ba0:	ce 01       	movw	r24, r28
   18ba2:	01 96       	adiw	r24, 0x01	; 1
   18ba4:	c9 df       	rcall	.-110    	; 0x18b38 <lif_ctime_gmt>
   18ba6:	bc 01       	movw	r22, r24
   18ba8:	02 c0       	rjmp	.+4      	; 0x18bae <lif_lifbcd2timestr+0x3a>
   18baa:	6f e8       	ldi	r22, 0x8F	; 143
   18bac:	75 e1       	ldi	r23, 0x15	; 21
   18bae:	8f eb       	ldi	r24, 0xBF	; 191
   18bb0:	99 e1       	ldi	r25, 0x19	; 25
   18bb2:	0e 94 3f 33 	call	0x667e	; 0x667e <strcpy>
   18bb6:	8f eb       	ldi	r24, 0xBF	; 191
   18bb8:	99 e1       	ldi	r25, 0x19	; 25
   18bba:	24 96       	adiw	r28, 0x04	; 4
   18bbc:	e2 e0       	ldi	r30, 0x02	; 2
   18bbe:	0c 94 55 e4 	jmp	0x1c8aa	; 0x1c8aa <__epilogue_restores__+0x20>

00018bc2 <lif_image_clear>:
   18bc2:	20 e7       	ldi	r18, 0x70	; 112
   18bc4:	fc 01       	movw	r30, r24
   18bc6:	11 92       	st	Z+, r1
   18bc8:	2a 95       	dec	r18
   18bca:	e9 f7       	brne	.-6      	; 0x18bc6 <lif_image_clear+0x4>
   18bcc:	08 95       	ret

00018bce <lif_dir_clear>:
   18bce:	81 5b       	subi	r24, 0xB1	; 177
   18bd0:	9f 4f       	sbci	r25, 0xFF	; 255
   18bd2:	21 e2       	ldi	r18, 0x21	; 33
   18bd4:	fc 01       	movw	r30, r24
   18bd6:	11 92       	st	Z+, r1
   18bd8:	2a 95       	dec	r18
   18bda:	e9 f7       	brne	.-6      	; 0x18bd6 <lif_dir_clear+0x8>
   18bdc:	08 95       	ret

00018bde <lif_vol_clear>:
   18bde:	84 96       	adiw	r24, 0x24	; 36
   18be0:	2b e2       	ldi	r18, 0x2B	; 43
   18be2:	fc 01       	movw	r30, r24
   18be4:	11 92       	st	Z+, r1
   18be6:	2a 95       	dec	r18
   18be8:	e9 f7       	brne	.-6      	; 0x18be4 <lif_vol_clear+0x6>
   18bea:	08 95       	ret

00018bec <lif_dump_vol>:
   18bec:	cf 93       	push	r28
   18bee:	df 93       	push	r29
   18bf0:	ec 01       	movw	r28, r24
   18bf2:	7f 93       	push	r23
   18bf4:	6f 93       	push	r22
   18bf6:	8e e9       	ldi	r24, 0x9E	; 158
   18bf8:	93 e4       	ldi	r25, 0x43	; 67
   18bfa:	1f 92       	push	r1
   18bfc:	9f 93       	push	r25
   18bfe:	8f 93       	push	r24
   18c00:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18c04:	89 81       	ldd	r24, Y+1	; 0x01
   18c06:	8f 93       	push	r24
   18c08:	88 81       	ld	r24, Y
   18c0a:	8f 93       	push	r24
   18c0c:	84 e8       	ldi	r24, 0x84	; 132
   18c0e:	93 e4       	ldi	r25, 0x43	; 67
   18c10:	1f 92       	push	r1
   18c12:	9f 93       	push	r25
   18c14:	8f 93       	push	r24
   18c16:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18c1a:	8f 81       	ldd	r24, Y+7	; 0x07
   18c1c:	8f 93       	push	r24
   18c1e:	8e 81       	ldd	r24, Y+6	; 0x06
   18c20:	8f 93       	push	r24
   18c22:	8d 81       	ldd	r24, Y+5	; 0x05
   18c24:	8f 93       	push	r24
   18c26:	8c 81       	ldd	r24, Y+4	; 0x04
   18c28:	8f 93       	push	r24
   18c2a:	87 e6       	ldi	r24, 0x67	; 103
   18c2c:	93 e4       	ldi	r25, 0x43	; 67
   18c2e:	1f 92       	push	r1
   18c30:	9f 93       	push	r25
   18c32:	8f 93       	push	r24
   18c34:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18c38:	8b 85       	ldd	r24, Y+11	; 0x0b
   18c3a:	8f 93       	push	r24
   18c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
   18c3e:	8f 93       	push	r24
   18c40:	89 85       	ldd	r24, Y+9	; 0x09
   18c42:	8f 93       	push	r24
   18c44:	88 85       	ldd	r24, Y+8	; 0x08
   18c46:	8f 93       	push	r24
   18c48:	8a e4       	ldi	r24, 0x4A	; 74
   18c4a:	93 e4       	ldi	r25, 0x43	; 67
   18c4c:	1f 92       	push	r1
   18c4e:	9f 93       	push	r25
   18c50:	8f 93       	push	r24
   18c52:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18c56:	8f 85       	ldd	r24, Y+15	; 0x0f
   18c58:	8f 93       	push	r24
   18c5a:	8e 85       	ldd	r24, Y+14	; 0x0e
   18c5c:	8f 93       	push	r24
   18c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
   18c60:	8f 93       	push	r24
   18c62:	8c 85       	ldd	r24, Y+12	; 0x0c
   18c64:	8f 93       	push	r24
   18c66:	8d e2       	ldi	r24, 0x2D	; 45
   18c68:	93 e4       	ldi	r25, 0x43	; 67
   18c6a:	1f 92       	push	r1
   18c6c:	9f 93       	push	r25
   18c6e:	8f 93       	push	r24
   18c70:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18c74:	8b 89       	ldd	r24, Y+19	; 0x13
   18c76:	8f 93       	push	r24
   18c78:	8a 89       	ldd	r24, Y+18	; 0x12
   18c7a:	8f 93       	push	r24
   18c7c:	89 89       	ldd	r24, Y+17	; 0x11
   18c7e:	8f 93       	push	r24
   18c80:	88 89       	ldd	r24, Y+16	; 0x10
   18c82:	8f 93       	push	r24
   18c84:	80 e1       	ldi	r24, 0x10	; 16
   18c86:	93 e4       	ldi	r25, 0x43	; 67
   18c88:	1f 92       	push	r1
   18c8a:	9f 93       	push	r25
   18c8c:	8f 93       	push	r24
   18c8e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18c92:	8d b7       	in	r24, 0x3d	; 61
   18c94:	9e b7       	in	r25, 0x3e	; 62
   18c96:	86 96       	adiw	r24, 0x26	; 38
   18c98:	0f b6       	in	r0, 0x3f	; 63
   18c9a:	f8 94       	cli
   18c9c:	9e bf       	out	0x3e, r25	; 62
   18c9e:	0f be       	out	0x3f, r0	; 63
   18ca0:	8d bf       	out	0x3d, r24	; 61
   18ca2:	8f 89       	ldd	r24, Y+23	; 0x17
   18ca4:	8f 93       	push	r24
   18ca6:	8e 89       	ldd	r24, Y+22	; 0x16
   18ca8:	8f 93       	push	r24
   18caa:	8d 89       	ldd	r24, Y+21	; 0x15
   18cac:	8f 93       	push	r24
   18cae:	8c 89       	ldd	r24, Y+20	; 0x14
   18cb0:	8f 93       	push	r24
   18cb2:	83 ef       	ldi	r24, 0xF3	; 243
   18cb4:	92 e4       	ldi	r25, 0x42	; 66
   18cb6:	1f 92       	push	r1
   18cb8:	9f 93       	push	r25
   18cba:	8f 93       	push	r24
   18cbc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   18cc2:	8f 93       	push	r24
   18cc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
   18cc6:	8f 93       	push	r24
   18cc8:	89 8d       	ldd	r24, Y+25	; 0x19
   18cca:	8f 93       	push	r24
   18ccc:	88 8d       	ldd	r24, Y+24	; 0x18
   18cce:	8f 93       	push	r24
   18cd0:	86 ed       	ldi	r24, 0xD6	; 214
   18cd2:	92 e4       	ldi	r25, 0x42	; 66
   18cd4:	1f 92       	push	r1
   18cd6:	9f 93       	push	r25
   18cd8:	8f 93       	push	r24
   18cda:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18cde:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18ce0:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18ce2:	09 2e       	mov	r0, r25
   18ce4:	00 0c       	add	r0, r0
   18ce6:	aa 0b       	sbc	r26, r26
   18ce8:	bb 0b       	sbc	r27, r27
   18cea:	bf 93       	push	r27
   18cec:	af 93       	push	r26
   18cee:	9f 93       	push	r25
   18cf0:	8f 93       	push	r24
   18cf2:	89 eb       	ldi	r24, 0xB9	; 185
   18cf4:	92 e4       	ldi	r25, 0x42	; 66
   18cf6:	1f 92       	push	r1
   18cf8:	9f 93       	push	r25
   18cfa:	8f 93       	push	r24
   18cfc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18d00:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18d02:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18d04:	09 2e       	mov	r0, r25
   18d06:	00 0c       	add	r0, r0
   18d08:	aa 0b       	sbc	r26, r26
   18d0a:	bb 0b       	sbc	r27, r27
   18d0c:	bf 93       	push	r27
   18d0e:	af 93       	push	r26
   18d10:	9f 93       	push	r25
   18d12:	8f 93       	push	r24
   18d14:	8c e9       	ldi	r24, 0x9C	; 156
   18d16:	92 e4       	ldi	r25, 0x42	; 66
   18d18:	1f 92       	push	r1
   18d1a:	9f 93       	push	r25
   18d1c:	8f 93       	push	r24
   18d1e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18d22:	ce 01       	movw	r24, r28
   18d24:	86 96       	adiw	r24, 0x26	; 38
   18d26:	9f 93       	push	r25
   18d28:	8f 93       	push	r24
   18d2a:	82 e8       	ldi	r24, 0x82	; 130
   18d2c:	92 e4       	ldi	r25, 0x42	; 66
   18d2e:	1f 92       	push	r1
   18d30:	9f 93       	push	r25
   18d32:	8f 93       	push	r24
   18d34:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18d38:	8d b7       	in	r24, 0x3d	; 61
   18d3a:	9e b7       	in	r25, 0x3e	; 62
   18d3c:	81 96       	adiw	r24, 0x21	; 33
   18d3e:	0f b6       	in	r0, 0x3f	; 63
   18d40:	f8 94       	cli
   18d42:	9e bf       	out	0x3e, r25	; 62
   18d44:	0f be       	out	0x3f, r0	; 63
   18d46:	8d bf       	out	0x3d, r24	; 61
   18d48:	8d a1       	ldd	r24, Y+37	; 0x25
   18d4a:	8f 93       	push	r24
   18d4c:	8c a1       	ldd	r24, Y+36	; 0x24
   18d4e:	8f 93       	push	r24
   18d50:	86 e6       	ldi	r24, 0x66	; 102
   18d52:	92 e4       	ldi	r25, 0x42	; 66
   18d54:	1f 92       	push	r1
   18d56:	9f 93       	push	r25
   18d58:	8f 93       	push	r24
   18d5a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18d5e:	88 a9       	ldd	r24, Y+48	; 0x30
   18d60:	8f 93       	push	r24
   18d62:	8f a5       	ldd	r24, Y+47	; 0x2f
   18d64:	8f 93       	push	r24
   18d66:	8e a5       	ldd	r24, Y+46	; 0x2e
   18d68:	8f 93       	push	r24
   18d6a:	8d a5       	ldd	r24, Y+45	; 0x2d
   18d6c:	8f 93       	push	r24
   18d6e:	89 e4       	ldi	r24, 0x49	; 73
   18d70:	92 e4       	ldi	r25, 0x42	; 66
   18d72:	1f 92       	push	r1
   18d74:	9f 93       	push	r25
   18d76:	8f 93       	push	r24
   18d78:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18d7c:	88 ad       	ldd	r24, Y+56	; 0x38
   18d7e:	8f 93       	push	r24
   18d80:	8f a9       	ldd	r24, Y+55	; 0x37
   18d82:	8f 93       	push	r24
   18d84:	8e a9       	ldd	r24, Y+54	; 0x36
   18d86:	8f 93       	push	r24
   18d88:	8d a9       	ldd	r24, Y+53	; 0x35
   18d8a:	8f 93       	push	r24
   18d8c:	8c e2       	ldi	r24, 0x2C	; 44
   18d8e:	92 e4       	ldi	r25, 0x42	; 66
   18d90:	1f 92       	push	r1
   18d92:	9f 93       	push	r25
   18d94:	8f 93       	push	r24
   18d96:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18d9a:	8a a9       	ldd	r24, Y+50	; 0x32
   18d9c:	8f 93       	push	r24
   18d9e:	89 a9       	ldd	r24, Y+49	; 0x31
   18da0:	8f 93       	push	r24
   18da2:	80 e1       	ldi	r24, 0x10	; 16
   18da4:	92 e4       	ldi	r25, 0x42	; 66
   18da6:	1f 92       	push	r1
   18da8:	9f 93       	push	r25
   18daa:	8f 93       	push	r24
   18dac:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18db0:	8a ad       	ldd	r24, Y+58	; 0x3a
   18db2:	8f 93       	push	r24
   18db4:	89 ad       	ldd	r24, Y+57	; 0x39
   18db6:	8f 93       	push	r24
   18db8:	84 ef       	ldi	r24, 0xF4	; 244
   18dba:	91 e4       	ldi	r25, 0x41	; 65
   18dbc:	1f 92       	push	r1
   18dbe:	9f 93       	push	r25
   18dc0:	8f 93       	push	r24
   18dc2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18dc6:	ce 01       	movw	r24, r28
   18dc8:	87 5b       	subi	r24, 0xB7	; 183
   18dca:	9f 4f       	sbci	r25, 0xFF	; 255
   18dcc:	d3 de       	rcall	.-602    	; 0x18b74 <lif_lifbcd2timestr>
   18dce:	9f 93       	push	r25
   18dd0:	8f 93       	push	r24
   18dd2:	8a ed       	ldi	r24, 0xDA	; 218
   18dd4:	91 e4       	ldi	r25, 0x41	; 65
   18dd6:	1f 92       	push	r1
   18dd8:	9f 93       	push	r25
   18dda:	8f 93       	push	r24
   18ddc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18de0:	8d b7       	in	r24, 0x3d	; 61
   18de2:	9e b7       	in	r25, 0x3e	; 62
   18de4:	82 96       	adiw	r24, 0x22	; 34
   18de6:	0f b6       	in	r0, 0x3f	; 63
   18de8:	f8 94       	cli
   18dea:	9e bf       	out	0x3e, r25	; 62
   18dec:	0f be       	out	0x3f, r0	; 63
   18dee:	8d bf       	out	0x3d, r24	; 61
   18df0:	ce 01       	movw	r24, r28
   18df2:	81 5b       	subi	r24, 0xB1	; 177
   18df4:	9f 4f       	sbci	r25, 0xFF	; 255
   18df6:	9f 93       	push	r25
   18df8:	8f 93       	push	r24
   18dfa:	80 ec       	ldi	r24, 0xC0	; 192
   18dfc:	91 e4       	ldi	r25, 0x41	; 65
   18dfe:	1f 92       	push	r1
   18e00:	9f 93       	push	r25
   18e02:	8f 93       	push	r24
   18e04:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18e08:	fe 01       	movw	r30, r28
   18e0a:	e6 5a       	subi	r30, 0xA6	; 166
   18e0c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e0e:	81 81       	ldd	r24, Z+1	; 0x01
   18e10:	8f 93       	push	r24
   18e12:	80 81       	ld	r24, Z
   18e14:	8f 93       	push	r24
   18e16:	84 ea       	ldi	r24, 0xA4	; 164
   18e18:	91 e4       	ldi	r25, 0x41	; 65
   18e1a:	1f 92       	push	r1
   18e1c:	9f 93       	push	r25
   18e1e:	8f 93       	push	r24
   18e20:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18e24:	fe 01       	movw	r30, r28
   18e26:	e6 59       	subi	r30, 0x96	; 150
   18e28:	ff 4f       	sbci	r31, 0xFF	; 255
   18e2a:	81 81       	ldd	r24, Z+1	; 0x01
   18e2c:	8f 93       	push	r24
   18e2e:	80 81       	ld	r24, Z
   18e30:	8f 93       	push	r24
   18e32:	88 e8       	ldi	r24, 0x88	; 136
   18e34:	91 e4       	ldi	r25, 0x41	; 65
   18e36:	1f 92       	push	r1
   18e38:	9f 93       	push	r25
   18e3a:	8f 93       	push	r24
   18e3c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18e40:	fe 01       	movw	r30, r28
   18e42:	e4 5a       	subi	r30, 0xA4	; 164
   18e44:	ff 4f       	sbci	r31, 0xFF	; 255
   18e46:	83 81       	ldd	r24, Z+3	; 0x03
   18e48:	8f 93       	push	r24
   18e4a:	82 81       	ldd	r24, Z+2	; 0x02
   18e4c:	8f 93       	push	r24
   18e4e:	81 81       	ldd	r24, Z+1	; 0x01
   18e50:	8f 93       	push	r24
   18e52:	80 81       	ld	r24, Z
   18e54:	8f 93       	push	r24
   18e56:	8b e6       	ldi	r24, 0x6B	; 107
   18e58:	91 e4       	ldi	r25, 0x41	; 65
   18e5a:	1f 92       	push	r1
   18e5c:	9f 93       	push	r25
   18e5e:	8f 93       	push	r24
   18e60:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18e64:	fe 01       	movw	r30, r28
   18e66:	e0 5a       	subi	r30, 0xA0	; 160
   18e68:	ff 4f       	sbci	r31, 0xFF	; 255
   18e6a:	83 81       	ldd	r24, Z+3	; 0x03
   18e6c:	8f 93       	push	r24
   18e6e:	82 81       	ldd	r24, Z+2	; 0x02
   18e70:	8f 93       	push	r24
   18e72:	81 81       	ldd	r24, Z+1	; 0x01
   18e74:	8f 93       	push	r24
   18e76:	80 81       	ld	r24, Z
   18e78:	8f 93       	push	r24
   18e7a:	8e e4       	ldi	r24, 0x4E	; 78
   18e7c:	91 e4       	ldi	r25, 0x41	; 65
   18e7e:	1f 92       	push	r1
   18e80:	9f 93       	push	r25
   18e82:	8f 93       	push	r24
   18e84:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18e88:	fe 01       	movw	r30, r28
   18e8a:	e4 59       	subi	r30, 0x94	; 148
   18e8c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e8e:	80 81       	ld	r24, Z
   18e90:	91 81       	ldd	r25, Z+1	; 0x01
   18e92:	1f 92       	push	r1
   18e94:	1f 92       	push	r1
   18e96:	9f 93       	push	r25
   18e98:	8f 93       	push	r24
   18e9a:	81 e3       	ldi	r24, 0x31	; 49
   18e9c:	91 e4       	ldi	r25, 0x41	; 65
   18e9e:	1f 92       	push	r1
   18ea0:	9f 93       	push	r25
   18ea2:	8f 93       	push	r24
   18ea4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18ea8:	8d b7       	in	r24, 0x3d	; 61
   18eaa:	9e b7       	in	r25, 0x3e	; 62
   18eac:	84 96       	adiw	r24, 0x24	; 36
   18eae:	0f b6       	in	r0, 0x3f	; 63
   18eb0:	f8 94       	cli
   18eb2:	9e bf       	out	0x3e, r25	; 62
   18eb4:	0f be       	out	0x3f, r0	; 63
   18eb6:	8d bf       	out	0x3d, r24	; 61
   18eb8:	fe 01       	movw	r30, r28
   18eba:	e2 59       	subi	r30, 0x92	; 146
   18ebc:	ff 4f       	sbci	r31, 0xFF	; 255
   18ebe:	81 81       	ldd	r24, Z+1	; 0x01
   18ec0:	8f 93       	push	r24
   18ec2:	80 81       	ld	r24, Z
   18ec4:	8f 93       	push	r24
   18ec6:	85 e1       	ldi	r24, 0x15	; 21
   18ec8:	91 e4       	ldi	r25, 0x41	; 65
   18eca:	1f 92       	push	r1
   18ecc:	9f 93       	push	r25
   18ece:	8f 93       	push	r24
   18ed0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18ed4:	ce 01       	movw	r24, r28
   18ed6:	8c 59       	subi	r24, 0x9C	; 156
   18ed8:	9f 4f       	sbci	r25, 0xFF	; 255
   18eda:	4c de       	rcall	.-872    	; 0x18b74 <lif_lifbcd2timestr>
   18edc:	9f 93       	push	r25
   18ede:	8f 93       	push	r24
   18ee0:	8b ef       	ldi	r24, 0xFB	; 251
   18ee2:	90 e4       	ldi	r25, 0x40	; 64
   18ee4:	1f 92       	push	r1
   18ee6:	9f 93       	push	r25
   18ee8:	8f 93       	push	r24
   18eea:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18eee:	89 ef       	ldi	r24, 0xF9	; 249
   18ef0:	90 e4       	ldi	r25, 0x40	; 64
   18ef2:	1f 92       	push	r1
   18ef4:	9f 93       	push	r25
   18ef6:	8f 93       	push	r24
   18ef8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18efc:	8d b7       	in	r24, 0x3d	; 61
   18efe:	9e b7       	in	r25, 0x3e	; 62
   18f00:	0d 96       	adiw	r24, 0x0d	; 13
   18f02:	0f b6       	in	r0, 0x3f	; 63
   18f04:	f8 94       	cli
   18f06:	9e bf       	out	0x3e, r25	; 62
   18f08:	0f be       	out	0x3f, r0	; 63
   18f0a:	8d bf       	out	0x3d, r24	; 61
   18f0c:	df 91       	pop	r29
   18f0e:	cf 91       	pop	r28
   18f10:	08 95       	ret

00018f12 <lif_check_volume>:
   18f12:	0f 93       	push	r16
   18f14:	1f 93       	push	r17
   18f16:	cf 93       	push	r28
   18f18:	df 93       	push	r29
   18f1a:	ec 01       	movw	r28, r24
   18f1c:	86 96       	adiw	r24, 0x26	; 38
   18f1e:	fb da       	rcall	.-2570   	; 0x18516 <lif_checkname>
   18f20:	89 2b       	or	r24, r25
   18f22:	79 f4       	brne	.+30     	; 0x18f42 <lif_check_volume+0x30>
   18f24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18f28:	80 ff       	sbrs	r24, 0
   18f2a:	0e c0       	rjmp	.+28     	; 0x18f48 <lif_check_volume+0x36>
   18f2c:	8a ed       	ldi	r24, 0xDA	; 218
   18f2e:	90 e4       	ldi	r25, 0x40	; 64
   18f30:	1f 92       	push	r1
   18f32:	9f 93       	push	r25
   18f34:	8f 93       	push	r24
   18f36:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18f3a:	0f 90       	pop	r0
   18f3c:	0f 90       	pop	r0
   18f3e:	0f 90       	pop	r0
   18f40:	03 c0       	rjmp	.+6      	; 0x18f48 <lif_check_volume+0x36>
   18f42:	81 e0       	ldi	r24, 0x01	; 1
   18f44:	90 e0       	ldi	r25, 0x00	; 0
   18f46:	02 c0       	rjmp	.+4      	; 0x18f4c <lif_check_volume+0x3a>
   18f48:	80 e0       	ldi	r24, 0x00	; 0
   18f4a:	90 e0       	ldi	r25, 0x00	; 0
   18f4c:	29 a9       	ldd	r18, Y+49	; 0x31
   18f4e:	3a a9       	ldd	r19, Y+50	; 0x32
   18f50:	21 15       	cp	r18, r1
   18f52:	40 e1       	ldi	r20, 0x10	; 16
   18f54:	34 07       	cpc	r19, r20
   18f56:	a1 f0       	breq	.+40     	; 0x18f80 <lif_check_volume+0x6e>
   18f58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18f5c:	80 ff       	sbrs	r24, 0
   18f5e:	0e c0       	rjmp	.+28     	; 0x18f7c <lif_check_volume+0x6a>
   18f60:	3f 93       	push	r19
   18f62:	2f 93       	push	r18
   18f64:	81 ea       	ldi	r24, 0xA1	; 161
   18f66:	90 e4       	ldi	r25, 0x40	; 64
   18f68:	1f 92       	push	r1
   18f6a:	9f 93       	push	r25
   18f6c:	8f 93       	push	r24
   18f6e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18f72:	0f 90       	pop	r0
   18f74:	0f 90       	pop	r0
   18f76:	0f 90       	pop	r0
   18f78:	0f 90       	pop	r0
   18f7a:	0f 90       	pop	r0
   18f7c:	80 e0       	ldi	r24, 0x00	; 0
   18f7e:	90 e0       	ldi	r25, 0x00	; 0
   18f80:	29 ad       	ldd	r18, Y+57	; 0x39
   18f82:	3a ad       	ldd	r19, Y+58	; 0x3a
   18f84:	22 30       	cpi	r18, 0x02	; 2
   18f86:	31 05       	cpc	r19, r1
   18f88:	a0 f0       	brcs	.+40     	; 0x18fb2 <lif_check_volume+0xa0>
   18f8a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18f8e:	80 ff       	sbrs	r24, 0
   18f90:	0e c0       	rjmp	.+28     	; 0x18fae <lif_check_volume+0x9c>
   18f92:	3f 93       	push	r19
   18f94:	2f 93       	push	r18
   18f96:	89 e8       	ldi	r24, 0x89	; 137
   18f98:	90 e4       	ldi	r25, 0x40	; 64
   18f9a:	1f 92       	push	r1
   18f9c:	9f 93       	push	r25
   18f9e:	8f 93       	push	r24
   18fa0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18fa4:	0f 90       	pop	r0
   18fa6:	0f 90       	pop	r0
   18fa8:	0f 90       	pop	r0
   18faa:	0f 90       	pop	r0
   18fac:	0f 90       	pop	r0
   18fae:	80 e0       	ldi	r24, 0x00	; 0
   18fb0:	90 e0       	ldi	r25, 0x00	; 0
   18fb2:	2b a9       	ldd	r18, Y+51	; 0x33
   18fb4:	3c a9       	ldd	r19, Y+52	; 0x34
   18fb6:	23 2b       	or	r18, r19
   18fb8:	81 f0       	breq	.+32     	; 0x18fda <lif_check_volume+0xc8>
   18fba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18fbe:	80 ff       	sbrs	r24, 0
   18fc0:	0a c0       	rjmp	.+20     	; 0x18fd6 <lif_check_volume+0xc4>
   18fc2:	80 e5       	ldi	r24, 0x50	; 80
   18fc4:	90 e4       	ldi	r25, 0x40	; 64
   18fc6:	1f 92       	push	r1
   18fc8:	9f 93       	push	r25
   18fca:	8f 93       	push	r24
   18fcc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18fd0:	0f 90       	pop	r0
   18fd2:	0f 90       	pop	r0
   18fd4:	0f 90       	pop	r0
   18fd6:	80 e0       	ldi	r24, 0x00	; 0
   18fd8:	90 e0       	ldi	r25, 0x00	; 0
   18fda:	2b ad       	ldd	r18, Y+59	; 0x3b
   18fdc:	3c ad       	ldd	r19, Y+60	; 0x3c
   18fde:	23 2b       	or	r18, r19
   18fe0:	81 f0       	breq	.+32     	; 0x19002 <lif_check_volume+0xf0>
   18fe2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18fe6:	80 ff       	sbrs	r24, 0
   18fe8:	0a c0       	rjmp	.+20     	; 0x18ffe <lif_check_volume+0xec>
   18fea:	87 e1       	ldi	r24, 0x17	; 23
   18fec:	90 e4       	ldi	r25, 0x40	; 64
   18fee:	1f 92       	push	r1
   18ff0:	9f 93       	push	r25
   18ff2:	8f 93       	push	r24
   18ff4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   18ff8:	0f 90       	pop	r0
   18ffa:	0f 90       	pop	r0
   18ffc:	0f 90       	pop	r0
   18ffe:	80 e0       	ldi	r24, 0x00	; 0
   19000:	90 e0       	ldi	r25, 0x00	; 0
   19002:	4d a5       	ldd	r20, Y+45	; 0x2d
   19004:	5e a5       	ldd	r21, Y+46	; 0x2e
   19006:	6f a5       	ldd	r22, Y+47	; 0x2f
   19008:	78 a9       	ldd	r23, Y+48	; 0x30
   1900a:	45 2b       	or	r20, r21
   1900c:	46 2b       	or	r20, r22
   1900e:	47 2b       	or	r20, r23
   19010:	c9 f4       	brne	.+50     	; 0x19044 <lif_check_volume+0x132>
   19012:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19016:	80 ff       	sbrs	r24, 0
   19018:	13 c0       	rjmp	.+38     	; 0x19040 <lif_check_volume+0x12e>
   1901a:	1f 92       	push	r1
   1901c:	1f 92       	push	r1
   1901e:	1f 92       	push	r1
   19020:	1f 92       	push	r1
   19022:	82 ef       	ldi	r24, 0xF2	; 242
   19024:	9f e3       	ldi	r25, 0x3F	; 63
   19026:	1f 92       	push	r1
   19028:	9f 93       	push	r25
   1902a:	8f 93       	push	r24
   1902c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19030:	8d b7       	in	r24, 0x3d	; 61
   19032:	9e b7       	in	r25, 0x3e	; 62
   19034:	07 96       	adiw	r24, 0x07	; 7
   19036:	0f b6       	in	r0, 0x3f	; 63
   19038:	f8 94       	cli
   1903a:	9e bf       	out	0x3e, r25	; 62
   1903c:	0f be       	out	0x3f, r0	; 63
   1903e:	8d bf       	out	0x3d, r24	; 61
   19040:	80 e0       	ldi	r24, 0x00	; 0
   19042:	90 e0       	ldi	r25, 0x00	; 0
   19044:	4d a9       	ldd	r20, Y+53	; 0x35
   19046:	5e a9       	ldd	r21, Y+54	; 0x36
   19048:	6f a9       	ldd	r22, Y+55	; 0x37
   1904a:	78 ad       	ldd	r23, Y+56	; 0x38
   1904c:	45 2b       	or	r20, r21
   1904e:	46 2b       	or	r20, r22
   19050:	47 2b       	or	r20, r23
   19052:	81 f4       	brne	.+32     	; 0x19074 <lif_check_volume+0x162>
   19054:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19058:	80 ff       	sbrs	r24, 0
   1905a:	0a c0       	rjmp	.+20     	; 0x19070 <lif_check_volume+0x15e>
   1905c:	83 ec       	ldi	r24, 0xC3	; 195
   1905e:	9f e3       	ldi	r25, 0x3F	; 63
   19060:	1f 92       	push	r1
   19062:	9f 93       	push	r25
   19064:	8f 93       	push	r24
   19066:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1906a:	0f 90       	pop	r0
   1906c:	0f 90       	pop	r0
   1906e:	0f 90       	pop	r0
   19070:	80 e0       	ldi	r24, 0x00	; 0
   19072:	90 e0       	ldi	r25, 0x00	; 0
   19074:	0d a5       	ldd	r16, Y+45	; 0x2d
   19076:	1e a5       	ldd	r17, Y+46	; 0x2e
   19078:	2f a5       	ldd	r18, Y+47	; 0x2f
   1907a:	38 a9       	ldd	r19, Y+48	; 0x30
   1907c:	4d a9       	ldd	r20, Y+53	; 0x35
   1907e:	5e a9       	ldd	r21, Y+54	; 0x36
   19080:	6f a9       	ldd	r22, Y+55	; 0x37
   19082:	78 ad       	ldd	r23, Y+56	; 0x38
   19084:	40 0f       	add	r20, r16
   19086:	51 1f       	adc	r21, r17
   19088:	62 1f       	adc	r22, r18
   1908a:	73 1f       	adc	r23, r19
   1908c:	0c 81       	ldd	r16, Y+4	; 0x04
   1908e:	1d 81       	ldd	r17, Y+5	; 0x05
   19090:	2e 81       	ldd	r18, Y+6	; 0x06
   19092:	3f 81       	ldd	r19, Y+7	; 0x07
   19094:	04 17       	cp	r16, r20
   19096:	15 07       	cpc	r17, r21
   19098:	26 07       	cpc	r18, r22
   1909a:	37 07       	cpc	r19, r23
   1909c:	80 f4       	brcc	.+32     	; 0x190be <lif_check_volume+0x1ac>
   1909e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   190a2:	80 ff       	sbrs	r24, 0
   190a4:	0a c0       	rjmp	.+20     	; 0x190ba <lif_check_volume+0x1a8>
   190a6:	87 e9       	ldi	r24, 0x97	; 151
   190a8:	9f e3       	ldi	r25, 0x3F	; 63
   190aa:	1f 92       	push	r1
   190ac:	9f 93       	push	r25
   190ae:	8f 93       	push	r24
   190b0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   190b4:	0f 90       	pop	r0
   190b6:	0f 90       	pop	r0
   190b8:	0f 90       	pop	r0
   190ba:	80 e0       	ldi	r24, 0x00	; 0
   190bc:	90 e0       	ldi	r25, 0x00	; 0
   190be:	df 91       	pop	r29
   190c0:	cf 91       	pop	r28
   190c2:	1f 91       	pop	r17
   190c4:	0f 91       	pop	r16
   190c6:	08 95       	ret

000190c8 <lif_check_dir>:
   190c8:	a4 e0       	ldi	r26, 0x04	; 4
   190ca:	b0 e0       	ldi	r27, 0x00	; 0
   190cc:	ea e6       	ldi	r30, 0x6A	; 106
   190ce:	f8 ec       	ldi	r31, 0xC8	; 200
   190d0:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   190d4:	6c 01       	movw	r12, r24
   190d6:	2a e5       	ldi	r18, 0x5A	; 90
   190d8:	c2 0e       	add	r12, r18
   190da:	d1 1c       	adc	r13, r1
   190dc:	f6 01       	movw	r30, r12
   190de:	20 81       	ld	r18, Z
   190e0:	31 81       	ldd	r19, Z+1	; 0x01
   190e2:	21 50       	subi	r18, 0x01	; 1
   190e4:	31 09       	sbc	r19, r1
   190e6:	2e 3f       	cpi	r18, 0xFE	; 254
   190e8:	3f 4f       	sbci	r19, 0xFF	; 255
   190ea:	08 f0       	brcs	.+2      	; 0x190ee <lif_check_dir+0x26>
   190ec:	98 c1       	rjmp	.+816    	; 0x1941e <lif_check_dir+0x356>
   190ee:	9c 83       	std	Y+4, r25	; 0x04
   190f0:	8b 83       	std	Y+3, r24	; 0x03
   190f2:	8c 01       	movw	r16, r24
   190f4:	01 5b       	subi	r16, 0xB1	; 177
   190f6:	1f 4f       	sbci	r17, 0xFF	; 255
   190f8:	c8 01       	movw	r24, r16
   190fa:	0d da       	rcall	.-3046   	; 0x18516 <lif_checkname>
   190fc:	89 2b       	or	r24, r25
   190fe:	99 f4       	brne	.+38     	; 0x19126 <lif_check_dir+0x5e>
   19100:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19104:	80 ff       	sbrs	r24, 0
   19106:	12 c0       	rjmp	.+36     	; 0x1912c <lif_check_dir+0x64>
   19108:	1f 93       	push	r17
   1910a:	0f 93       	push	r16
   1910c:	86 e7       	ldi	r24, 0x76	; 118
   1910e:	9f e3       	ldi	r25, 0x3F	; 63
   19110:	1f 92       	push	r1
   19112:	9f 93       	push	r25
   19114:	8f 93       	push	r24
   19116:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1911a:	0f 90       	pop	r0
   1911c:	0f 90       	pop	r0
   1911e:	0f 90       	pop	r0
   19120:	0f 90       	pop	r0
   19122:	0f 90       	pop	r0
   19124:	03 c0       	rjmp	.+6      	; 0x1912c <lif_check_dir+0x64>
   19126:	ee 24       	eor	r14, r14
   19128:	e3 94       	inc	r14
   1912a:	01 c0       	rjmp	.+2      	; 0x1912e <lif_check_dir+0x66>
   1912c:	e1 2c       	mov	r14, r1
   1912e:	f1 2c       	mov	r15, r1
   19130:	eb 81       	ldd	r30, Y+3	; 0x03
   19132:	fc 81       	ldd	r31, Y+4	; 0x04
   19134:	84 85       	ldd	r24, Z+12	; 0x0c
   19136:	95 85       	ldd	r25, Z+13	; 0x0d
   19138:	a6 85       	ldd	r26, Z+14	; 0x0e
   1913a:	b7 85       	ldd	r27, Z+15	; 0x0f
   1913c:	00 97       	sbiw	r24, 0x00	; 0
   1913e:	a1 05       	cpc	r26, r1
   19140:	b1 05       	cpc	r27, r1
   19142:	39 f1       	breq	.+78     	; 0x19192 <lif_check_dir+0xca>
   19144:	e4 5a       	subi	r30, 0xA4	; 164
   19146:	ff 4f       	sbci	r31, 0xFF	; 255
   19148:	40 81       	ld	r20, Z
   1914a:	51 81       	ldd	r21, Z+1	; 0x01
   1914c:	62 81       	ldd	r22, Z+2	; 0x02
   1914e:	73 81       	ldd	r23, Z+3	; 0x03
   19150:	48 17       	cp	r20, r24
   19152:	59 07       	cpc	r21, r25
   19154:	6a 07       	cpc	r22, r26
   19156:	7b 07       	cpc	r23, r27
   19158:	e0 f4       	brcc	.+56     	; 0x19192 <lif_check_dir+0xca>
   1915a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1915e:	20 ff       	sbrs	r18, 0
   19160:	16 c0       	rjmp	.+44     	; 0x1918e <lif_check_dir+0xc6>
   19162:	bf 93       	push	r27
   19164:	af 93       	push	r26
   19166:	9f 93       	push	r25
   19168:	8f 93       	push	r24
   1916a:	7f 93       	push	r23
   1916c:	6f 93       	push	r22
   1916e:	5f 93       	push	r21
   19170:	4f 93       	push	r20
   19172:	1f 93       	push	r17
   19174:	0f 93       	push	r16
   19176:	82 e3       	ldi	r24, 0x32	; 50
   19178:	9f e3       	ldi	r25, 0x3F	; 63
   1917a:	1f 92       	push	r1
   1917c:	9f 93       	push	r25
   1917e:	8f 93       	push	r24
   19180:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19184:	0f b6       	in	r0, 0x3f	; 63
   19186:	f8 94       	cli
   19188:	de bf       	out	0x3e, r29	; 62
   1918a:	0f be       	out	0x3f, r0	; 63
   1918c:	cd bf       	out	0x3d, r28	; 61
   1918e:	e1 2c       	mov	r14, r1
   19190:	f1 2c       	mov	r15, r1
   19192:	eb 81       	ldd	r30, Y+3	; 0x03
   19194:	fc 81       	ldd	r31, Y+4	; 0x04
   19196:	44 81       	ldd	r20, Z+4	; 0x04
   19198:	55 81       	ldd	r21, Z+5	; 0x05
   1919a:	66 81       	ldd	r22, Z+6	; 0x06
   1919c:	77 81       	ldd	r23, Z+7	; 0x07
   1919e:	41 15       	cp	r20, r1
   191a0:	51 05       	cpc	r21, r1
   191a2:	61 05       	cpc	r22, r1
   191a4:	71 05       	cpc	r23, r1
   191a6:	99 f1       	breq	.+102    	; 0x1920e <lif_check_dir+0x146>
   191a8:	e4 5a       	subi	r30, 0xA4	; 164
   191aa:	ff 4f       	sbci	r31, 0xFF	; 255
   191ac:	80 80       	ld	r8, Z
   191ae:	91 80       	ldd	r9, Z+1	; 0x01
   191b0:	a2 80       	ldd	r10, Z+2	; 0x02
   191b2:	b3 80       	ldd	r11, Z+3	; 0x03
   191b4:	eb 81       	ldd	r30, Y+3	; 0x03
   191b6:	fc 81       	ldd	r31, Y+4	; 0x04
   191b8:	e0 5a       	subi	r30, 0xA0	; 160
   191ba:	ff 4f       	sbci	r31, 0xFF	; 255
   191bc:	80 81       	ld	r24, Z
   191be:	91 81       	ldd	r25, Z+1	; 0x01
   191c0:	a2 81       	ldd	r26, Z+2	; 0x02
   191c2:	b3 81       	ldd	r27, Z+3	; 0x03
   191c4:	88 0d       	add	r24, r8
   191c6:	99 1d       	adc	r25, r9
   191c8:	aa 1d       	adc	r26, r10
   191ca:	bb 1d       	adc	r27, r11
   191cc:	48 17       	cp	r20, r24
   191ce:	59 07       	cpc	r21, r25
   191d0:	6a 07       	cpc	r22, r26
   191d2:	7b 07       	cpc	r23, r27
   191d4:	e0 f4       	brcc	.+56     	; 0x1920e <lif_check_dir+0x146>
   191d6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   191da:	20 ff       	sbrs	r18, 0
   191dc:	16 c0       	rjmp	.+44     	; 0x1920a <lif_check_dir+0x142>
   191de:	7f 93       	push	r23
   191e0:	6f 93       	push	r22
   191e2:	5f 93       	push	r21
   191e4:	4f 93       	push	r20
   191e6:	bf 93       	push	r27
   191e8:	af 93       	push	r26
   191ea:	9f 93       	push	r25
   191ec:	8f 93       	push	r24
   191ee:	1f 93       	push	r17
   191f0:	0f 93       	push	r16
   191f2:	81 ef       	ldi	r24, 0xF1	; 241
   191f4:	9e e3       	ldi	r25, 0x3E	; 62
   191f6:	1f 92       	push	r1
   191f8:	9f 93       	push	r25
   191fa:	8f 93       	push	r24
   191fc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19200:	0f b6       	in	r0, 0x3f	; 63
   19202:	f8 94       	cli
   19204:	de bf       	out	0x3e, r29	; 62
   19206:	0f be       	out	0x3f, r0	; 63
   19208:	cd bf       	out	0x3d, r28	; 61
   1920a:	e1 2c       	mov	r14, r1
   1920c:	f1 2c       	mov	r15, r1
   1920e:	eb 81       	ldd	r30, Y+3	; 0x03
   19210:	fc 81       	ldd	r31, Y+4	; 0x04
   19212:	e6 59       	subi	r30, 0x96	; 150
   19214:	ff 4f       	sbci	r31, 0xFF	; 255
   19216:	80 81       	ld	r24, Z
   19218:	91 81       	ldd	r25, Z+1	; 0x01
   1921a:	81 30       	cpi	r24, 0x01	; 1
   1921c:	30 e8       	ldi	r19, 0x80	; 128
   1921e:	93 07       	cpc	r25, r19
   19220:	b1 f0       	breq	.+44     	; 0x1924e <lif_check_dir+0x186>
   19222:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19226:	20 ff       	sbrs	r18, 0
   19228:	10 c0       	rjmp	.+32     	; 0x1924a <lif_check_dir+0x182>
   1922a:	9f 93       	push	r25
   1922c:	8f 93       	push	r24
   1922e:	1f 93       	push	r17
   19230:	0f 93       	push	r16
   19232:	83 ec       	ldi	r24, 0xC3	; 195
   19234:	9e e3       	ldi	r25, 0x3E	; 62
   19236:	1f 92       	push	r1
   19238:	9f 93       	push	r25
   1923a:	8f 93       	push	r24
   1923c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19240:	0f b6       	in	r0, 0x3f	; 63
   19242:	f8 94       	cli
   19244:	de bf       	out	0x3e, r29	; 62
   19246:	0f be       	out	0x3f, r0	; 63
   19248:	cd bf       	out	0x3d, r28	; 61
   1924a:	e1 2c       	mov	r14, r1
   1924c:	f1 2c       	mov	r15, r1
   1924e:	f6 01       	movw	r30, r12
   19250:	80 81       	ld	r24, Z
   19252:	91 81       	ldd	r25, Z+1	; 0x01
   19254:	8c 7f       	andi	r24, 0xFC	; 252
   19256:	80 31       	cpi	r24, 0x10	; 16
   19258:	90 4e       	sbci	r25, 0xE0	; 224
   1925a:	09 f0       	breq	.+2      	; 0x1925e <lif_check_dir+0x196>
   1925c:	b3 c0       	rjmp	.+358    	; 0x193c4 <lif_check_dir+0x2fc>
   1925e:	cb 80       	ldd	r12, Y+3	; 0x03
   19260:	dc 80       	ldd	r13, Y+4	; 0x04
   19262:	2c e6       	ldi	r18, 0x6C	; 108
   19264:	c2 0e       	add	r12, r18
   19266:	d1 1c       	adc	r13, r1
   19268:	f6 01       	movw	r30, r12
   1926a:	20 81       	ld	r18, Z
   1926c:	31 81       	ldd	r19, Z+1	; 0x01
   1926e:	21 15       	cp	r18, r1
   19270:	31 05       	cpc	r19, r1
   19272:	09 f4       	brne	.+2      	; 0x19276 <lif_check_dir+0x1ae>
   19274:	a7 c0       	rjmp	.+334    	; 0x193c4 <lif_check_dir+0x2fc>
   19276:	49 01       	movw	r8, r18
   19278:	a1 2c       	mov	r10, r1
   1927a:	b1 2c       	mov	r11, r1
   1927c:	bb 27       	eor	r27, r27
   1927e:	ab 2d       	mov	r26, r11
   19280:	9a 2d       	mov	r25, r10
   19282:	89 2d       	mov	r24, r9
   19284:	33 27       	eor	r19, r19
   19286:	2c 01       	movw	r4, r24
   19288:	3d 01       	movw	r6, r26
   1928a:	21 15       	cp	r18, r1
   1928c:	31 05       	cpc	r19, r1
   1928e:	29 f0       	breq	.+10     	; 0x1929a <lif_check_dir+0x1d2>
   19290:	ff ef       	ldi	r31, 0xFF	; 255
   19292:	4f 1a       	sub	r4, r31
   19294:	5f 0a       	sbc	r5, r31
   19296:	6f 0a       	sbc	r6, r31
   19298:	7f 0a       	sbc	r7, r31
   1929a:	2b 80       	ldd	r2, Y+3	; 0x03
   1929c:	3c 80       	ldd	r3, Y+4	; 0x04
   1929e:	40 e6       	ldi	r20, 0x60	; 96
   192a0:	24 0e       	add	r2, r20
   192a2:	31 1c       	adc	r3, r1
   192a4:	f1 01       	movw	r30, r2
   192a6:	40 81       	ld	r20, Z
   192a8:	51 81       	ldd	r21, Z+1	; 0x01
   192aa:	62 81       	ldd	r22, Z+2	; 0x02
   192ac:	73 81       	ldd	r23, Z+3	; 0x03
   192ae:	44 15       	cp	r20, r4
   192b0:	55 05       	cpc	r21, r5
   192b2:	66 05       	cpc	r22, r6
   192b4:	77 05       	cpc	r23, r7
   192b6:	28 f5       	brcc	.+74     	; 0x19302 <lif_check_dir+0x23a>
   192b8:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   192bc:	e0 ff       	sbrs	r30, 0
   192be:	1f c0       	rjmp	.+62     	; 0x192fe <lif_check_dir+0x236>
   192c0:	23 2b       	or	r18, r19
   192c2:	19 f0       	breq	.+6      	; 0x192ca <lif_check_dir+0x202>
   192c4:	01 96       	adiw	r24, 0x01	; 1
   192c6:	a1 1d       	adc	r26, r1
   192c8:	b1 1d       	adc	r27, r1
   192ca:	7f 93       	push	r23
   192cc:	6f 93       	push	r22
   192ce:	5f 93       	push	r21
   192d0:	4f 93       	push	r20
   192d2:	bf 93       	push	r27
   192d4:	af 93       	push	r26
   192d6:	9f 93       	push	r25
   192d8:	8f 93       	push	r24
   192da:	1f 92       	push	r1
   192dc:	1f 92       	push	r1
   192de:	9f 92       	push	r9
   192e0:	8f 92       	push	r8
   192e2:	1f 93       	push	r17
   192e4:	0f 93       	push	r16
   192e6:	88 e7       	ldi	r24, 0x78	; 120
   192e8:	9e e3       	ldi	r25, 0x3E	; 62
   192ea:	1f 92       	push	r1
   192ec:	9f 93       	push	r25
   192ee:	8f 93       	push	r24
   192f0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   192f4:	0f b6       	in	r0, 0x3f	; 63
   192f6:	f8 94       	cli
   192f8:	de bf       	out	0x3e, r29	; 62
   192fa:	0f be       	out	0x3f, r0	; 63
   192fc:	cd bf       	out	0x3d, r28	; 61
   192fe:	e1 2c       	mov	r14, r1
   19300:	f1 2c       	mov	r15, r1
   19302:	f6 01       	movw	r30, r12
   19304:	20 81       	ld	r18, Z
   19306:	31 81       	ldd	r19, Z+1	; 0x01
   19308:	49 01       	movw	r8, r18
   1930a:	a1 2c       	mov	r10, r1
   1930c:	b1 2c       	mov	r11, r1
   1930e:	bb 27       	eor	r27, r27
   19310:	ab 2d       	mov	r26, r11
   19312:	9a 2d       	mov	r25, r10
   19314:	89 2d       	mov	r24, r9
   19316:	a9 01       	movw	r20, r18
   19318:	55 27       	eor	r21, r21
   1931a:	5a 83       	std	Y+2, r21	; 0x02
   1931c:	49 83       	std	Y+1, r20	; 0x01
   1931e:	2c 01       	movw	r4, r24
   19320:	3d 01       	movw	r6, r26
   19322:	45 2b       	or	r20, r21
   19324:	29 f0       	breq	.+10     	; 0x19330 <lif_check_dir+0x268>
   19326:	5f ef       	ldi	r21, 0xFF	; 255
   19328:	45 1a       	sub	r4, r21
   1932a:	55 0a       	sbc	r5, r21
   1932c:	65 0a       	sbc	r6, r21
   1932e:	75 0a       	sbc	r7, r21
   19330:	f1 01       	movw	r30, r2
   19332:	40 81       	ld	r20, Z
   19334:	51 81       	ldd	r21, Z+1	; 0x01
   19336:	62 81       	ldd	r22, Z+2	; 0x02
   19338:	73 81       	ldd	r23, Z+3	; 0x03
   1933a:	44 16       	cp	r4, r20
   1933c:	55 06       	cpc	r5, r21
   1933e:	66 06       	cpc	r6, r22
   19340:	77 06       	cpc	r7, r23
   19342:	38 f5       	brcc	.+78     	; 0x19392 <lif_check_dir+0x2ca>
   19344:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19348:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1934c:	32 ff       	sbrs	r19, 2
   1934e:	21 c0       	rjmp	.+66     	; 0x19392 <lif_check_dir+0x2ca>
   19350:	29 81       	ldd	r18, Y+1	; 0x01
   19352:	3a 81       	ldd	r19, Y+2	; 0x02
   19354:	23 2b       	or	r18, r19
   19356:	19 f0       	breq	.+6      	; 0x1935e <lif_check_dir+0x296>
   19358:	01 96       	adiw	r24, 0x01	; 1
   1935a:	a1 1d       	adc	r26, r1
   1935c:	b1 1d       	adc	r27, r1
   1935e:	7f 93       	push	r23
   19360:	6f 93       	push	r22
   19362:	5f 93       	push	r21
   19364:	4f 93       	push	r20
   19366:	bf 93       	push	r27
   19368:	af 93       	push	r26
   1936a:	9f 93       	push	r25
   1936c:	8f 93       	push	r24
   1936e:	1f 92       	push	r1
   19370:	1f 92       	push	r1
   19372:	9f 92       	push	r9
   19374:	8f 92       	push	r8
   19376:	1f 93       	push	r17
   19378:	0f 93       	push	r16
   1937a:	8d e2       	ldi	r24, 0x2D	; 45
   1937c:	9e e3       	ldi	r25, 0x3E	; 62
   1937e:	1f 92       	push	r1
   19380:	9f 93       	push	r25
   19382:	8f 93       	push	r24
   19384:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19388:	0f b6       	in	r0, 0x3f	; 63
   1938a:	f8 94       	cli
   1938c:	de bf       	out	0x3e, r29	; 62
   1938e:	0f be       	out	0x3f, r0	; 63
   19390:	cd bf       	out	0x3d, r28	; 61
   19392:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19396:	80 ff       	sbrs	r24, 0
   19398:	15 c0       	rjmp	.+42     	; 0x193c4 <lif_check_dir+0x2fc>
   1939a:	f6 01       	movw	r30, r12
   1939c:	80 81       	ld	r24, Z
   1939e:	91 81       	ldd	r25, Z+1	; 0x01
   193a0:	89 2b       	or	r24, r25
   193a2:	81 f4       	brne	.+32     	; 0x193c4 <lif_check_dir+0x2fc>
   193a4:	1f 93       	push	r17
   193a6:	0f 93       	push	r16
   193a8:	82 e0       	ldi	r24, 0x02	; 2
   193aa:	9e e3       	ldi	r25, 0x3E	; 62
   193ac:	1f 92       	push	r1
   193ae:	9f 93       	push	r25
   193b0:	8f 93       	push	r24
   193b2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   193b6:	0f 90       	pop	r0
   193b8:	0f 90       	pop	r0
   193ba:	0f 90       	pop	r0
   193bc:	0f 90       	pop	r0
   193be:	0f 90       	pop	r0
   193c0:	e1 2c       	mov	r14, r1
   193c2:	f1 2c       	mov	r15, r1
   193c4:	eb 81       	ldd	r30, Y+3	; 0x03
   193c6:	fc 81       	ldd	r31, Y+4	; 0x04
   193c8:	e2 59       	subi	r30, 0x92	; 146
   193ca:	ff 4f       	sbci	r31, 0xFF	; 255
   193cc:	20 81       	ld	r18, Z
   193ce:	31 81       	ldd	r19, Z+1	; 0x01
   193d0:	21 15       	cp	r18, r1
   193d2:	f1 e0       	ldi	r31, 0x01	; 1
   193d4:	3f 07       	cpc	r19, r31
   193d6:	31 f1       	breq	.+76     	; 0x19424 <lif_check_dir+0x35c>
   193d8:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   193dc:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   193e0:	ca 01       	movw	r24, r20
   193e2:	81 70       	andi	r24, 0x01	; 1
   193e4:	99 27       	eor	r25, r25
   193e6:	40 ff       	sbrs	r20, 0
   193e8:	1e c0       	rjmp	.+60     	; 0x19426 <lif_check_dir+0x35e>
   193ea:	c9 01       	movw	r24, r18
   193ec:	1f 92       	push	r1
   193ee:	1f 92       	push	r1
   193f0:	9f 93       	push	r25
   193f2:	2f 93       	push	r18
   193f4:	eb 81       	ldd	r30, Y+3	; 0x03
   193f6:	fc 81       	ldd	r31, Y+4	; 0x04
   193f8:	81 81       	ldd	r24, Z+1	; 0x01
   193fa:	8f 93       	push	r24
   193fc:	80 81       	ld	r24, Z
   193fe:	8f 93       	push	r24
   19400:	86 ed       	ldi	r24, 0xD6	; 214
   19402:	9d e3       	ldi	r25, 0x3D	; 61
   19404:	1f 92       	push	r1
   19406:	9f 93       	push	r25
   19408:	8f 93       	push	r24
   1940a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1940e:	0f b6       	in	r0, 0x3f	; 63
   19410:	f8 94       	cli
   19412:	de bf       	out	0x3e, r29	; 62
   19414:	0f be       	out	0x3f, r0	; 63
   19416:	cd bf       	out	0x3d, r28	; 61
   19418:	80 e0       	ldi	r24, 0x00	; 0
   1941a:	90 e0       	ldi	r25, 0x00	; 0
   1941c:	04 c0       	rjmp	.+8      	; 0x19426 <lif_check_dir+0x35e>
   1941e:	81 e0       	ldi	r24, 0x01	; 1
   19420:	90 e0       	ldi	r25, 0x00	; 0
   19422:	01 c0       	rjmp	.+2      	; 0x19426 <lif_check_dir+0x35e>
   19424:	c7 01       	movw	r24, r14
   19426:	24 96       	adiw	r28, 0x04	; 4
   19428:	e2 e1       	ldi	r30, 0x12	; 18
   1942a:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001942e <lif_close_volume>:
   1942e:	cf 93       	push	r28
   19430:	df 93       	push	r29
   19432:	00 97       	sbiw	r24, 0x00	; 0
   19434:	f9 f0       	breq	.+62     	; 0x19474 <lif_close_volume+0x46>
   19436:	ec 01       	movw	r28, r24
   19438:	8a 81       	ldd	r24, Y+2	; 0x02
   1943a:	9b 81       	ldd	r25, Y+3	; 0x03
   1943c:	00 97       	sbiw	r24, 0x00	; 0
   1943e:	79 f0       	breq	.+30     	; 0x1945e <lif_close_volume+0x30>
   19440:	22 e0       	ldi	r18, 0x02	; 2
   19442:	30 e0       	ldi	r19, 0x00	; 0
   19444:	40 e0       	ldi	r20, 0x00	; 0
   19446:	50 e0       	ldi	r21, 0x00	; 0
   19448:	ba 01       	movw	r22, r20
   1944a:	0e 94 c7 7c 	call	0xf98e	; 0xf98e <fseek>
   1944e:	8a 81       	ldd	r24, Y+2	; 0x02
   19450:	9b 81       	ldd	r25, Y+3	; 0x03
   19452:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
   19456:	1b 82       	std	Y+3, r1	; 0x03
   19458:	1a 82       	std	Y+2, r1	; 0x02
   1945a:	0e 94 aa 7d 	call	0xfb54	; 0xfb54 <sync>
   1945e:	88 81       	ld	r24, Y
   19460:	99 81       	ldd	r25, Y+1	; 0x01
   19462:	00 97       	sbiw	r24, 0x00	; 0
   19464:	11 f0       	breq	.+4      	; 0x1946a <lif_close_volume+0x3c>
   19466:	0e 94 ca c0 	call	0x18194	; 0x18194 <lif_free>
   1946a:	ce 01       	movw	r24, r28
   1946c:	b8 db       	rcall	.-2192   	; 0x18bde <lif_vol_clear>
   1946e:	ce 01       	movw	r24, r28
   19470:	0e 94 ca c0 	call	0x18194	; 0x18194 <lif_free>
   19474:	df 91       	pop	r29
   19476:	cf 91       	pop	r28
   19478:	08 95       	ret

0001947a <lif_checkdirindex>:
   1947a:	a0 e0       	ldi	r26, 0x00	; 0
   1947c:	b0 e0       	ldi	r27, 0x00	; 0
   1947e:	e3 e4       	ldi	r30, 0x43	; 67
   19480:	fa ec       	ldi	r31, 0xCA	; 202
   19482:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
   19486:	77 fd       	sbrc	r23, 7
   19488:	26 c0       	rjmp	.+76     	; 0x194d6 <lif_checkdirindex+0x5c>
   1948a:	8b 01       	movw	r16, r22
   1948c:	07 2e       	mov	r0, r23
   1948e:	00 0c       	add	r0, r0
   19490:	22 0b       	sbc	r18, r18
   19492:	33 0b       	sbc	r19, r19
   19494:	45 e0       	ldi	r20, 0x05	; 5
   19496:	00 0f       	add	r16, r16
   19498:	11 1f       	adc	r17, r17
   1949a:	22 1f       	adc	r18, r18
   1949c:	33 1f       	adc	r19, r19
   1949e:	4a 95       	dec	r20
   194a0:	d1 f7       	brne	.-12     	; 0x19496 <lif_checkdirindex+0x1c>
   194a2:	c1 2e       	mov	r12, r17
   194a4:	d2 2e       	mov	r13, r18
   194a6:	e3 2e       	mov	r14, r19
   194a8:	ff 24       	eor	r15, r15
   194aa:	11 27       	eor	r17, r17
   194ac:	22 27       	eor	r18, r18
   194ae:	33 27       	eor	r19, r19
   194b0:	01 2b       	or	r16, r17
   194b2:	02 2b       	or	r16, r18
   194b4:	03 2b       	or	r16, r19
   194b6:	29 f0       	breq	.+10     	; 0x194c2 <lif_checkdirindex+0x48>
   194b8:	2f ef       	ldi	r18, 0xFF	; 255
   194ba:	c2 1a       	sub	r12, r18
   194bc:	d2 0a       	sbc	r13, r18
   194be:	e2 0a       	sbc	r14, r18
   194c0:	f2 0a       	sbc	r15, r18
   194c2:	fc 01       	movw	r30, r24
   194c4:	05 a9       	ldd	r16, Z+53	; 0x35
   194c6:	16 a9       	ldd	r17, Z+54	; 0x36
   194c8:	27 a9       	ldd	r18, Z+55	; 0x37
   194ca:	30 ad       	ldd	r19, Z+56	; 0x38
   194cc:	0c 15       	cp	r16, r12
   194ce:	1d 05       	cpc	r17, r13
   194d0:	2e 05       	cpc	r18, r14
   194d2:	3f 05       	cpc	r19, r15
   194d4:	30 f5       	brcc	.+76     	; 0x19522 <lif_checkdirindex+0xa8>
   194d6:	ec 01       	movw	r28, r24
   194d8:	7f 93       	push	r23
   194da:	6f 93       	push	r22
   194dc:	89 81       	ldd	r24, Y+1	; 0x01
   194de:	8f 93       	push	r24
   194e0:	88 81       	ld	r24, Y
   194e2:	8f 93       	push	r24
   194e4:	83 e1       	ldi	r24, 0x13	; 19
   194e6:	9d e3       	ldi	r25, 0x3D	; 61
   194e8:	1f 92       	push	r1
   194ea:	9f 93       	push	r25
   194ec:	8f 93       	push	r24
   194ee:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   194f2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   194f6:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   194fa:	8d b7       	in	r24, 0x3d	; 61
   194fc:	9e b7       	in	r25, 0x3e	; 62
   194fe:	07 96       	adiw	r24, 0x07	; 7
   19500:	0f b6       	in	r0, 0x3f	; 63
   19502:	f8 94       	cli
   19504:	9e bf       	out	0x3e, r25	; 62
   19506:	0f be       	out	0x3f, r0	; 63
   19508:	8d bf       	out	0x3d, r24	; 61
   1950a:	c9 01       	movw	r24, r18
   1950c:	88 27       	eor	r24, r24
   1950e:	94 70       	andi	r25, 0x04	; 4
   19510:	32 ff       	sbrs	r19, 2
   19512:	09 c0       	rjmp	.+18     	; 0x19526 <lif_checkdirindex+0xac>
   19514:	67 e9       	ldi	r22, 0x97	; 151
   19516:	75 e1       	ldi	r23, 0x15	; 21
   19518:	ce 01       	movw	r24, r28
   1951a:	68 db       	rcall	.-2352   	; 0x18bec <lif_dump_vol>
   1951c:	80 e0       	ldi	r24, 0x00	; 0
   1951e:	90 e0       	ldi	r25, 0x00	; 0
   19520:	02 c0       	rjmp	.+4      	; 0x19526 <lif_checkdirindex+0xac>
   19522:	81 e0       	ldi	r24, 0x01	; 1
   19524:	90 e0       	ldi	r25, 0x00	; 0
   19526:	cd b7       	in	r28, 0x3d	; 61
   19528:	de b7       	in	r29, 0x3e	; 62
   1952a:	e8 e0       	ldi	r30, 0x08	; 8
   1952c:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

00019530 <lif_readdirindex>:
   19530:	a0 e2       	ldi	r26, 0x20	; 32
   19532:	b0 e0       	ldi	r27, 0x00	; 0
   19534:	ee e9       	ldi	r30, 0x9E	; 158
   19536:	fa ec       	ldi	r31, 0xCA	; 202
   19538:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
   1953c:	7c 01       	movw	r14, r24
   1953e:	6b 01       	movw	r12, r22
   19540:	9c df       	rcall	.-200    	; 0x1947a <lif_checkdirindex>
   19542:	89 2b       	or	r24, r25
   19544:	19 f4       	brne	.+6      	; 0x1954c <lif_readdirindex+0x1c>
   19546:	00 e0       	ldi	r16, 0x00	; 0
   19548:	10 e0       	ldi	r17, 0x00	; 0
   1954a:	56 c0       	rjmp	.+172    	; 0x195f8 <lif_readdirindex+0xc8>
   1954c:	f7 01       	movw	r30, r14
   1954e:	85 a5       	ldd	r24, Z+45	; 0x2d
   19550:	96 a5       	ldd	r25, Z+46	; 0x2e
   19552:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19554:	b0 a9       	ldd	r27, Z+48	; 0x30
   19556:	44 27       	eor	r20, r20
   19558:	58 2f       	mov	r21, r24
   1955a:	69 2f       	mov	r22, r25
   1955c:	7a 2f       	mov	r23, r26
   1955e:	c6 01       	movw	r24, r12
   19560:	0d 2c       	mov	r0, r13
   19562:	00 0c       	add	r0, r0
   19564:	aa 0b       	sbc	r26, r26
   19566:	bb 0b       	sbc	r27, r27
   19568:	35 e0       	ldi	r19, 0x05	; 5
   1956a:	88 0f       	add	r24, r24
   1956c:	99 1f       	adc	r25, r25
   1956e:	aa 1f       	adc	r26, r26
   19570:	bb 1f       	adc	r27, r27
   19572:	3a 95       	dec	r19
   19574:	d1 f7       	brne	.-12     	; 0x1956a <lif_readdirindex+0x3a>
   19576:	9a 01       	movw	r18, r20
   19578:	ab 01       	movw	r20, r22
   1957a:	28 0f       	add	r18, r24
   1957c:	39 1f       	adc	r19, r25
   1957e:	4a 1f       	adc	r20, r26
   19580:	5b 1f       	adc	r21, r27
   19582:	00 e2       	ldi	r16, 0x20	; 32
   19584:	10 e0       	ldi	r17, 0x00	; 0
   19586:	be 01       	movw	r22, r28
   19588:	6f 5f       	subi	r22, 0xFF	; 255
   1958a:	7f 4f       	sbci	r23, 0xFF	; 255
   1958c:	c7 01       	movw	r24, r14
   1958e:	0e 94 7f c1 	call	0x182fe	; 0x182fe <lif_read>
   19592:	60 32       	cpi	r22, 0x20	; 32
   19594:	71 05       	cpc	r23, r1
   19596:	81 05       	cpc	r24, r1
   19598:	91 05       	cpc	r25, r1
   1959a:	a8 f2       	brcs	.-86     	; 0x19546 <lif_readdirindex+0x16>
   1959c:	b7 01       	movw	r22, r14
   1959e:	ce 01       	movw	r24, r28
   195a0:	01 96       	adiw	r24, 0x01	; 1
   195a2:	c1 d9       	rcall	.-3198   	; 0x18926 <lif_str2dir>
   195a4:	f7 01       	movw	r30, r14
   195a6:	e6 5a       	subi	r30, 0xA6	; 166
   195a8:	ff 4f       	sbci	r31, 0xFF	; 255
   195aa:	80 81       	ld	r24, Z
   195ac:	91 81       	ldd	r25, Z+1	; 0x01
   195ae:	01 96       	adiw	r24, 0x01	; 1
   195b0:	19 f4       	brne	.+6      	; 0x195b8 <lif_readdirindex+0x88>
   195b2:	f7 01       	movw	r30, r14
   195b4:	d3 a2       	std	Z+35, r13	; 0x23
   195b6:	c2 a2       	std	Z+34, r12	; 0x22
   195b8:	c7 01       	movw	r24, r14
   195ba:	86 dd       	rcall	.-1268   	; 0x190c8 <lif_check_dir>
   195bc:	8c 01       	movw	r16, r24
   195be:	89 2b       	or	r24, r25
   195c0:	c9 f4       	brne	.+50     	; 0x195f4 <lif_readdirindex+0xc4>
   195c2:	df 92       	push	r13
   195c4:	cf 92       	push	r12
   195c6:	83 ef       	ldi	r24, 0xF3	; 243
   195c8:	9c e3       	ldi	r25, 0x3C	; 60
   195ca:	1f 92       	push	r1
   195cc:	9f 93       	push	r25
   195ce:	8f 93       	push	r24
   195d0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   195d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   195d8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   195dc:	0f 90       	pop	r0
   195de:	0f 90       	pop	r0
   195e0:	0f 90       	pop	r0
   195e2:	0f 90       	pop	r0
   195e4:	0f 90       	pop	r0
   195e6:	92 ff       	sbrs	r25, 2
   195e8:	ae cf       	rjmp	.-164    	; 0x19546 <lif_readdirindex+0x16>
   195ea:	68 ea       	ldi	r22, 0xA8	; 168
   195ec:	75 e1       	ldi	r23, 0x15	; 21
   195ee:	c7 01       	movw	r24, r14
   195f0:	fd da       	rcall	.-2566   	; 0x18bec <lif_dump_vol>
   195f2:	02 c0       	rjmp	.+4      	; 0x195f8 <lif_readdirindex+0xc8>
   195f4:	01 e0       	ldi	r16, 0x01	; 1
   195f6:	10 e0       	ldi	r17, 0x00	; 0
   195f8:	c8 01       	movw	r24, r16
   195fa:	a0 96       	adiw	r28, 0x20	; 32
   195fc:	e8 e0       	ldi	r30, 0x08	; 8
   195fe:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

00019602 <lif_writedirindex>:
   19602:	a0 e2       	ldi	r26, 0x20	; 32
   19604:	b0 e0       	ldi	r27, 0x00	; 0
   19606:	e7 e0       	ldi	r30, 0x07	; 7
   19608:	fb ec       	ldi	r31, 0xCB	; 203
   1960a:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   1960e:	5c 01       	movw	r10, r24
   19610:	6b 01       	movw	r12, r22
   19612:	5a dd       	rcall	.-1356   	; 0x190c8 <lif_check_dir>
   19614:	7c 01       	movw	r14, r24
   19616:	89 2b       	or	r24, r25
   19618:	71 f4       	brne	.+28     	; 0x19636 <lif_writedirindex+0x34>
   1961a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1961e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19622:	92 fd       	sbrc	r25, 2
   19624:	03 c0       	rjmp	.+6      	; 0x1962c <lif_writedirindex+0x2a>
   19626:	e1 2c       	mov	r14, r1
   19628:	f1 2c       	mov	r15, r1
   1962a:	42 c0       	rjmp	.+132    	; 0x196b0 <lif_writedirindex+0xae>
   1962c:	69 eb       	ldi	r22, 0xB9	; 185
   1962e:	75 e1       	ldi	r23, 0x15	; 21
   19630:	c5 01       	movw	r24, r10
   19632:	dc da       	rcall	.-2632   	; 0x18bec <lif_dump_vol>
   19634:	3d c0       	rjmp	.+122    	; 0x196b0 <lif_writedirindex+0xae>
   19636:	b6 01       	movw	r22, r12
   19638:	c5 01       	movw	r24, r10
   1963a:	1f df       	rcall	.-450    	; 0x1947a <lif_checkdirindex>
   1963c:	89 2b       	or	r24, r25
   1963e:	99 f3       	breq	.-26     	; 0x19626 <lif_writedirindex+0x24>
   19640:	f5 01       	movw	r30, r10
   19642:	e6 5a       	subi	r30, 0xA6	; 166
   19644:	ff 4f       	sbci	r31, 0xFF	; 255
   19646:	80 81       	ld	r24, Z
   19648:	91 81       	ldd	r25, Z+1	; 0x01
   1964a:	01 96       	adiw	r24, 0x01	; 1
   1964c:	19 f4       	brne	.+6      	; 0x19654 <lif_writedirindex+0x52>
   1964e:	f5 01       	movw	r30, r10
   19650:	d3 a2       	std	Z+35, r13	; 0x23
   19652:	c2 a2       	std	Z+34, r12	; 0x22
   19654:	f5 01       	movw	r30, r10
   19656:	85 a5       	ldd	r24, Z+45	; 0x2d
   19658:	96 a5       	ldd	r25, Z+46	; 0x2e
   1965a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1965c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1965e:	ba 2f       	mov	r27, r26
   19660:	a9 2f       	mov	r26, r25
   19662:	98 2f       	mov	r25, r24
   19664:	88 27       	eor	r24, r24
   19666:	0d 2c       	mov	r0, r13
   19668:	00 0c       	add	r0, r0
   1966a:	ee 08       	sbc	r14, r14
   1966c:	ff 08       	sbc	r15, r15
   1966e:	35 e0       	ldi	r19, 0x05	; 5
   19670:	cc 0c       	add	r12, r12
   19672:	dd 1c       	adc	r13, r13
   19674:	ee 1c       	adc	r14, r14
   19676:	ff 1c       	adc	r15, r15
   19678:	3a 95       	dec	r19
   1967a:	d1 f7       	brne	.-12     	; 0x19670 <lif_writedirindex+0x6e>
   1967c:	c8 0e       	add	r12, r24
   1967e:	d9 1e       	adc	r13, r25
   19680:	ea 1e       	adc	r14, r26
   19682:	fb 1e       	adc	r15, r27
   19684:	be 01       	movw	r22, r28
   19686:	6f 5f       	subi	r22, 0xFF	; 255
   19688:	7f 4f       	sbci	r23, 0xFF	; 255
   1968a:	c5 01       	movw	r24, r10
   1968c:	db d8       	rcall	.-3658   	; 0x18844 <lif_dir2str>
   1968e:	00 e2       	ldi	r16, 0x20	; 32
   19690:	10 e0       	ldi	r17, 0x00	; 0
   19692:	a7 01       	movw	r20, r14
   19694:	96 01       	movw	r18, r12
   19696:	be 01       	movw	r22, r28
   19698:	6f 5f       	subi	r22, 0xFF	; 255
   1969a:	7f 4f       	sbci	r23, 0xFF	; 255
   1969c:	c5 01       	movw	r24, r10
   1969e:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
   196a2:	31 e0       	ldi	r19, 0x01	; 1
   196a4:	20 e0       	ldi	r18, 0x00	; 0
   196a6:	80 97       	sbiw	r24, 0x20	; 32
   196a8:	0c f4       	brge	.+2      	; 0x196ac <lif_writedirindex+0xaa>
   196aa:	30 e0       	ldi	r19, 0x00	; 0
   196ac:	e3 2e       	mov	r14, r19
   196ae:	f2 2e       	mov	r15, r18
   196b0:	c7 01       	movw	r24, r14
   196b2:	a0 96       	adiw	r28, 0x20	; 32
   196b4:	ea e0       	ldi	r30, 0x0A	; 10
   196b6:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

000196ba <lif_writedirEOF>:
   196ba:	0f 93       	push	r16
   196bc:	1f 93       	push	r17
   196be:	cf 93       	push	r28
   196c0:	df 93       	push	r29
   196c2:	ec 01       	movw	r28, r24
   196c4:	8b 01       	movw	r16, r22
   196c6:	83 da       	rcall	.-2810   	; 0x18bce <lif_dir_clear>
   196c8:	fe 01       	movw	r30, r28
   196ca:	e6 5a       	subi	r30, 0xA6	; 166
   196cc:	ff 4f       	sbci	r31, 0xFF	; 255
   196ce:	8f ef       	ldi	r24, 0xFF	; 255
   196d0:	9f ef       	ldi	r25, 0xFF	; 255
   196d2:	91 83       	std	Z+1, r25	; 0x01
   196d4:	80 83       	st	Z, r24
   196d6:	1b a3       	std	Y+35, r17	; 0x23
   196d8:	0a a3       	std	Y+34, r16	; 0x22
   196da:	b8 01       	movw	r22, r16
   196dc:	ce 01       	movw	r24, r28
   196de:	91 df       	rcall	.-222    	; 0x19602 <lif_writedirindex>
   196e0:	df 91       	pop	r29
   196e2:	cf 91       	pop	r28
   196e4:	1f 91       	pop	r17
   196e6:	0f 91       	pop	r16
   196e8:	08 95       	ret

000196ea <lif_updatefree>:
   196ea:	2f 92       	push	r2
   196ec:	3f 92       	push	r3
   196ee:	4f 92       	push	r4
   196f0:	5f 92       	push	r5
   196f2:	6f 92       	push	r6
   196f4:	7f 92       	push	r7
   196f6:	8f 92       	push	r8
   196f8:	af 92       	push	r10
   196fa:	bf 92       	push	r11
   196fc:	cf 92       	push	r12
   196fe:	df 92       	push	r13
   19700:	ef 92       	push	r14
   19702:	ff 92       	push	r15
   19704:	0f 93       	push	r16
   19706:	1f 93       	push	r17
   19708:	cf 93       	push	r28
   1970a:	df 93       	push	r29
   1970c:	cd b7       	in	r28, 0x3d	; 61
   1970e:	de b7       	in	r29, 0x3e	; 62
   19710:	28 97       	sbiw	r28, 0x08	; 8
   19712:	0f b6       	in	r0, 0x3f	; 63
   19714:	f8 94       	cli
   19716:	de bf       	out	0x3e, r29	; 62
   19718:	0f be       	out	0x3f, r0	; 63
   1971a:	cd bf       	out	0x3d, r28	; 61
   1971c:	98 87       	std	Y+8, r25	; 0x08
   1971e:	8f 83       	std	Y+7, r24	; 0x07
   19720:	fc 01       	movw	r30, r24
   19722:	24 84       	ldd	r2, Z+12	; 0x0c
   19724:	35 84       	ldd	r3, Z+13	; 0x0d
   19726:	46 84       	ldd	r4, Z+14	; 0x0e
   19728:	57 84       	ldd	r5, Z+15	; 0x0f
   1972a:	80 89       	ldd	r24, Z+16	; 0x10
   1972c:	91 89       	ldd	r25, Z+17	; 0x11
   1972e:	a2 89       	ldd	r26, Z+18	; 0x12
   19730:	b3 89       	ldd	r27, Z+19	; 0x13
   19732:	80 8f       	std	Z+24, r24	; 0x18
   19734:	91 8f       	std	Z+25, r25	; 0x19
   19736:	a2 8f       	std	Z+26, r26	; 0x1a
   19738:	b3 8f       	std	Z+27, r27	; 0x1b
   1973a:	14 8a       	std	Z+20, r1	; 0x14
   1973c:	15 8a       	std	Z+21, r1	; 0x15
   1973e:	16 8a       	std	Z+22, r1	; 0x16
   19740:	17 8a       	std	Z+23, r1	; 0x17
   19742:	17 8e       	std	Z+31, r1	; 0x1f
   19744:	16 8e       	std	Z+30, r1	; 0x1e
   19746:	15 8e       	std	Z+29, r1	; 0x1d
   19748:	14 8e       	std	Z+28, r1	; 0x1c
   1974a:	11 a2       	std	Z+33, r1	; 0x21
   1974c:	10 a2       	std	Z+32, r1	; 0x20
   1974e:	13 a2       	std	Z+35, r1	; 0x23
   19750:	12 a2       	std	Z+34, r1	; 0x22
   19752:	cc 24       	eor	r12, r12
   19754:	c3 94       	inc	r12
   19756:	d1 2c       	mov	r13, r1
   19758:	0f ef       	ldi	r16, 0xFF	; 255
   1975a:	1f ef       	ldi	r17, 0xFF	; 255
   1975c:	e6 5a       	subi	r30, 0xA6	; 166
   1975e:	ff 4f       	sbci	r31, 0xFF	; 255
   19760:	fc 83       	std	Y+4, r31	; 0x04
   19762:	eb 83       	std	Y+3, r30	; 0x03
   19764:	af 80       	ldd	r10, Y+7	; 0x07
   19766:	b8 84       	ldd	r11, Y+8	; 0x08
   19768:	fc e5       	ldi	r31, 0x5C	; 92
   1976a:	af 0e       	add	r10, r31
   1976c:	b1 1c       	adc	r11, r1
   1976e:	8f 81       	ldd	r24, Y+7	; 0x07
   19770:	98 85       	ldd	r25, Y+8	; 0x08
   19772:	80 5a       	subi	r24, 0xA0	; 160
   19774:	9f 4f       	sbci	r25, 0xFF	; 255
   19776:	9e 83       	std	Y+6, r25	; 0x06
   19778:	8d 83       	std	Y+5, r24	; 0x05
   1977a:	ef 81       	ldd	r30, Y+7	; 0x07
   1977c:	f8 85       	ldd	r31, Y+8	; 0x08
   1977e:	e1 5b       	subi	r30, 0xB1	; 177
   19780:	ff 4f       	sbci	r31, 0xFF	; 255
   19782:	fa 83       	std	Y+2, r31	; 0x02
   19784:	e9 83       	std	Y+1, r30	; 0x01
   19786:	86 ea       	ldi	r24, 0xA6	; 166
   19788:	9c e3       	ldi	r25, 0x3C	; 60
   1978a:	3c 01       	movw	r6, r24
   1978c:	76 01       	movw	r14, r12
   1978e:	21 e0       	ldi	r18, 0x01	; 1
   19790:	e2 1a       	sub	r14, r18
   19792:	f1 08       	sbc	r15, r1
   19794:	b7 01       	movw	r22, r14
   19796:	8f 81       	ldd	r24, Y+7	; 0x07
   19798:	98 85       	ldd	r25, Y+8	; 0x08
   1979a:	ca de       	rcall	.-620    	; 0x19530 <lif_readdirindex>
   1979c:	89 2b       	or	r24, r25
   1979e:	19 f4       	brne	.+6      	; 0x197a6 <lif_updatefree+0xbc>
   197a0:	80 e0       	ldi	r24, 0x00	; 0
   197a2:	90 e0       	ldi	r25, 0x00	; 0
   197a4:	92 c0       	rjmp	.+292    	; 0x198ca <lif_updatefree+0x1e0>
   197a6:	eb 81       	ldd	r30, Y+3	; 0x03
   197a8:	fc 81       	ldd	r31, Y+4	; 0x04
   197aa:	80 81       	ld	r24, Z
   197ac:	91 81       	ldd	r25, Z+1	; 0x01
   197ae:	8f 3f       	cpi	r24, 0xFF	; 255
   197b0:	ff ef       	ldi	r31, 0xFF	; 255
   197b2:	9f 07       	cpc	r25, r31
   197b4:	c1 f4       	brne	.+48     	; 0x197e6 <lif_updatefree+0xfc>
   197b6:	ef 81       	ldd	r30, Y+7	; 0x07
   197b8:	f8 85       	ldd	r31, Y+8	; 0x08
   197ba:	0f 3f       	cpi	r16, 0xFF	; 255
   197bc:	2f ef       	ldi	r18, 0xFF	; 255
   197be:	12 07       	cpc	r17, r18
   197c0:	09 f4       	brne	.+2      	; 0x197c4 <lif_updatefree+0xda>
   197c2:	79 c0       	rjmp	.+242    	; 0x198b6 <lif_updatefree+0x1cc>
   197c4:	13 a3       	std	Z+35, r17	; 0x23
   197c6:	02 a3       	std	Z+34, r16	; 0x22
   197c8:	e0 1a       	sub	r14, r16
   197ca:	f1 0a       	sbc	r15, r17
   197cc:	86 8d       	ldd	r24, Z+30	; 0x1e
   197ce:	97 8d       	ldd	r25, Z+31	; 0x1f
   197d0:	8e 19       	sub	r24, r14
   197d2:	9f 09       	sbc	r25, r15
   197d4:	97 8f       	std	Z+31, r25	; 0x1f
   197d6:	86 8f       	std	Z+30, r24	; 0x1e
   197d8:	b8 01       	movw	r22, r16
   197da:	cf 01       	movw	r24, r30
   197dc:	6e df       	rcall	.-292    	; 0x196ba <lif_writedirEOF>
   197de:	89 2b       	or	r24, r25
   197e0:	09 f0       	breq	.+2      	; 0x197e4 <lif_updatefree+0xfa>
   197e2:	6b c0       	rjmp	.+214    	; 0x198ba <lif_updatefree+0x1d0>
   197e4:	dd cf       	rjmp	.-70     	; 0x197a0 <lif_updatefree+0xb6>
   197e6:	89 2b       	or	r24, r25
   197e8:	81 f4       	brne	.+32     	; 0x1980a <lif_updatefree+0x120>
   197ea:	0f 3f       	cpi	r16, 0xFF	; 255
   197ec:	ff ef       	ldi	r31, 0xFF	; 255
   197ee:	1f 07       	cpc	r17, r31
   197f0:	09 f4       	brne	.+2      	; 0x197f4 <lif_updatefree+0x10a>
   197f2:	87 01       	movw	r16, r14
   197f4:	ef 81       	ldd	r30, Y+7	; 0x07
   197f6:	f8 85       	ldd	r31, Y+8	; 0x08
   197f8:	86 8d       	ldd	r24, Z+30	; 0x1e
   197fa:	97 8d       	ldd	r25, Z+31	; 0x1f
   197fc:	01 96       	adiw	r24, 0x01	; 1
   197fe:	97 8f       	std	Z+31, r25	; 0x1f
   19800:	86 8f       	std	Z+30, r24	; 0x1e
   19802:	ff ef       	ldi	r31, 0xFF	; 255
   19804:	cf 1a       	sub	r12, r31
   19806:	df 0a       	sbc	r13, r31
   19808:	c1 cf       	rjmp	.-126    	; 0x1978c <lif_updatefree+0xa2>
   1980a:	f5 01       	movw	r30, r10
   1980c:	80 81       	ld	r24, Z
   1980e:	91 81       	ldd	r25, Z+1	; 0x01
   19810:	a2 81       	ldd	r26, Z+2	; 0x02
   19812:	b3 81       	ldd	r27, Z+3	; 0x03
   19814:	82 15       	cp	r24, r2
   19816:	93 05       	cpc	r25, r3
   19818:	a4 05       	cpc	r26, r4
   1981a:	b5 05       	cpc	r27, r5
   1981c:	c0 f4       	brcc	.+48     	; 0x1984e <lif_updatefree+0x164>
   1981e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19822:	80 ff       	sbrs	r24, 0
   19824:	14 c0       	rjmp	.+40     	; 0x1984e <lif_updatefree+0x164>
   19826:	fa 81       	ldd	r31, Y+2	; 0x02
   19828:	ff 93       	push	r31
   1982a:	29 81       	ldd	r18, Y+1	; 0x01
   1982c:	2f 93       	push	r18
   1982e:	ef 81       	ldd	r30, Y+7	; 0x07
   19830:	f8 85       	ldd	r31, Y+8	; 0x08
   19832:	81 81       	ldd	r24, Z+1	; 0x01
   19834:	8f 93       	push	r24
   19836:	80 81       	ld	r24, Z
   19838:	8f 93       	push	r24
   1983a:	1f 92       	push	r1
   1983c:	7f 92       	push	r7
   1983e:	6f 92       	push	r6
   19840:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19844:	0f b6       	in	r0, 0x3f	; 63
   19846:	f8 94       	cli
   19848:	de bf       	out	0x3e, r29	; 62
   1984a:	0f be       	out	0x3f, r0	; 63
   1984c:	cd bf       	out	0x3d, r28	; 61
   1984e:	ed 81       	ldd	r30, Y+5	; 0x05
   19850:	fe 81       	ldd	r31, Y+6	; 0x06
   19852:	80 81       	ld	r24, Z
   19854:	91 81       	ldd	r25, Z+1	; 0x01
   19856:	a2 81       	ldd	r26, Z+2	; 0x02
   19858:	b3 81       	ldd	r27, Z+3	; 0x03
   1985a:	ef 81       	ldd	r30, Y+7	; 0x07
   1985c:	f8 85       	ldd	r31, Y+8	; 0x08
   1985e:	44 89       	ldd	r20, Z+20	; 0x14
   19860:	55 89       	ldd	r21, Z+21	; 0x15
   19862:	66 89       	ldd	r22, Z+22	; 0x16
   19864:	77 89       	ldd	r23, Z+23	; 0x17
   19866:	48 0f       	add	r20, r24
   19868:	59 1f       	adc	r21, r25
   1986a:	6a 1f       	adc	r22, r26
   1986c:	7b 1f       	adc	r23, r27
   1986e:	44 8b       	std	Z+20, r20	; 0x14
   19870:	55 8b       	std	Z+21, r21	; 0x15
   19872:	66 8b       	std	Z+22, r22	; 0x16
   19874:	77 8b       	std	Z+23, r23	; 0x17
   19876:	40 8d       	ldd	r20, Z+24	; 0x18
   19878:	51 8d       	ldd	r21, Z+25	; 0x19
   1987a:	62 8d       	ldd	r22, Z+26	; 0x1a
   1987c:	73 8d       	ldd	r23, Z+27	; 0x1b
   1987e:	48 1b       	sub	r20, r24
   19880:	59 0b       	sbc	r21, r25
   19882:	6a 0b       	sbc	r22, r26
   19884:	7b 0b       	sbc	r23, r27
   19886:	40 8f       	std	Z+24, r20	; 0x18
   19888:	51 8f       	std	Z+25, r21	; 0x19
   1988a:	62 8f       	std	Z+26, r22	; 0x1a
   1988c:	73 8f       	std	Z+27, r23	; 0x1b
   1988e:	24 8d       	ldd	r18, Z+28	; 0x1c
   19890:	35 8d       	ldd	r19, Z+29	; 0x1d
   19892:	2f 5f       	subi	r18, 0xFF	; 255
   19894:	3f 4f       	sbci	r19, 0xFF	; 255
   19896:	35 8f       	std	Z+29, r19	; 0x1d
   19898:	24 8f       	std	Z+28, r18	; 0x1c
   1989a:	f5 01       	movw	r30, r10
   1989c:	40 81       	ld	r20, Z
   1989e:	51 81       	ldd	r21, Z+1	; 0x01
   198a0:	62 81       	ldd	r22, Z+2	; 0x02
   198a2:	73 81       	ldd	r23, Z+3	; 0x03
   198a4:	1c 01       	movw	r2, r24
   198a6:	2d 01       	movw	r4, r26
   198a8:	24 0e       	add	r2, r20
   198aa:	35 1e       	adc	r3, r21
   198ac:	46 1e       	adc	r4, r22
   198ae:	57 1e       	adc	r5, r23
   198b0:	0f ef       	ldi	r16, 0xFF	; 255
   198b2:	1f ef       	ldi	r17, 0xFF	; 255
   198b4:	a6 cf       	rjmp	.-180    	; 0x19802 <lif_updatefree+0x118>
   198b6:	f3 a2       	std	Z+35, r15	; 0x23
   198b8:	e2 a2       	std	Z+34, r14	; 0x22
   198ba:	8f ef       	ldi	r24, 0xFF	; 255
   198bc:	9f ef       	ldi	r25, 0xFF	; 255
   198be:	ef 81       	ldd	r30, Y+7	; 0x07
   198c0:	f8 85       	ldd	r31, Y+8	; 0x08
   198c2:	91 a3       	std	Z+33, r25	; 0x21
   198c4:	80 a3       	std	Z+32, r24	; 0x20
   198c6:	8f 81       	ldd	r24, Y+7	; 0x07
   198c8:	98 85       	ldd	r25, Y+8	; 0x08
   198ca:	28 96       	adiw	r28, 0x08	; 8
   198cc:	0f b6       	in	r0, 0x3f	; 63
   198ce:	f8 94       	cli
   198d0:	de bf       	out	0x3e, r29	; 62
   198d2:	0f be       	out	0x3f, r0	; 63
   198d4:	cd bf       	out	0x3d, r28	; 61
   198d6:	df 91       	pop	r29
   198d8:	cf 91       	pop	r28
   198da:	1f 91       	pop	r17
   198dc:	0f 91       	pop	r16
   198de:	ff 90       	pop	r15
   198e0:	ef 90       	pop	r14
   198e2:	df 90       	pop	r13
   198e4:	cf 90       	pop	r12
   198e6:	bf 90       	pop	r11
   198e8:	af 90       	pop	r10
   198ea:	8f 90       	pop	r8
   198ec:	7f 90       	pop	r7
   198ee:	6f 90       	pop	r6
   198f0:	5f 90       	pop	r5
   198f2:	4f 90       	pop	r4
   198f4:	3f 90       	pop	r3
   198f6:	2f 90       	pop	r2
   198f8:	08 95       	ret

000198fa <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   198fa:	a6 e1       	ldi	r26, 0x16	; 22
   198fc:	b1 e0       	ldi	r27, 0x01	; 1
   198fe:	e3 e8       	ldi	r30, 0x83	; 131
   19900:	fc ec       	ldi	r31, 0xCC	; 204
   19902:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   19906:	4c 01       	movw	r8, r24
   19908:	1b 01       	movw	r2, r22
   1990a:	29 01       	movw	r4, r18
   1990c:	3a 01       	movw	r6, r20
   1990e:	cd 5e       	subi	r28, 0xED	; 237
   19910:	de 4f       	sbci	r29, 0xFE	; 254
   19912:	e8 82       	st	Y, r14
   19914:	f9 82       	std	Y+1, r15	; 0x01
   19916:	0a 83       	std	Y+2, r16	; 0x02
   19918:	1b 83       	std	Y+3, r17	; 0x03
   1991a:	c3 51       	subi	r28, 0x13	; 19
   1991c:	d1 40       	sbci	r29, 0x01	; 1
   1991e:	c5 5f       	subi	r28, 0xF5	; 245
   19920:	de 4f       	sbci	r29, 0xFE	; 254
   19922:	a8 82       	st	Y, r10
   19924:	b9 82       	std	Y+1, r11	; 0x01
   19926:	ca 82       	std	Y+2, r12	; 0x02
   19928:	db 82       	std	Y+3, r13	; 0x03
   1992a:	cb 50       	subi	r28, 0x0B	; 11
   1992c:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1992e:	80 e0       	ldi	r24, 0x00	; 0
   19930:	90 e0       	ldi	r25, 0x00	; 0
   19932:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <time>
   19936:	6b 01       	movw	r12, r22
   19938:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1993a:	64 e7       	ldi	r22, 0x74	; 116
   1993c:	70 e0       	ldi	r23, 0x00	; 0
   1993e:	80 e0       	ldi	r24, 0x00	; 0
   19940:	90 e0       	ldi	r25, 0x00	; 0
   19942:	0e 94 9e c0 	call	0x1813c	; 0x1813c <lif_calloc>
   19946:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   19948:	89 2b       	or	r24, r25
   1994a:	09 f4       	brne	.+2      	; 0x1994e <lif_create_volume+0x54>
   1994c:	f9 c2       	rjmp	.+1522   	; 0x19f40 <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1994e:	c2 5f       	subi	r28, 0xF2	; 242
   19950:	de 4f       	sbci	r29, 0xFE	; 254
   19952:	28 81       	ld	r18, Y
   19954:	ce 50       	subi	r28, 0x0E	; 14
   19956:	d1 40       	sbci	r29, 0x01	; 1
   19958:	2f 93       	push	r18
   1995a:	c3 5f       	subi	r28, 0xF3	; 243
   1995c:	de 4f       	sbci	r29, 0xFE	; 254
   1995e:	38 81       	ld	r19, Y
   19960:	cd 50       	subi	r28, 0x0D	; 13
   19962:	d1 40       	sbci	r29, 0x01	; 1
   19964:	3f 93       	push	r19
   19966:	c4 5f       	subi	r28, 0xF4	; 244
   19968:	de 4f       	sbci	r29, 0xFE	; 254
   1996a:	48 81       	ld	r20, Y
   1996c:	cc 50       	subi	r28, 0x0C	; 12
   1996e:	d1 40       	sbci	r29, 0x01	; 1
   19970:	4f 93       	push	r20
   19972:	c5 5f       	subi	r28, 0xF5	; 245
   19974:	de 4f       	sbci	r29, 0xFE	; 254
   19976:	58 81       	ld	r21, Y
   19978:	cb 50       	subi	r28, 0x0B	; 11
   1997a:	d1 40       	sbci	r29, 0x01	; 1
   1997c:	5f 93       	push	r21
   1997e:	ca 5e       	subi	r28, 0xEA	; 234
   19980:	de 4f       	sbci	r29, 0xFE	; 254
   19982:	88 81       	ld	r24, Y
   19984:	c6 51       	subi	r28, 0x16	; 22
   19986:	d1 40       	sbci	r29, 0x01	; 1
   19988:	8f 93       	push	r24
   1998a:	cb 5e       	subi	r28, 0xEB	; 235
   1998c:	de 4f       	sbci	r29, 0xFE	; 254
   1998e:	98 81       	ld	r25, Y
   19990:	c5 51       	subi	r28, 0x15	; 21
   19992:	d1 40       	sbci	r29, 0x01	; 1
   19994:	9f 93       	push	r25
   19996:	cc 5e       	subi	r28, 0xEC	; 236
   19998:	de 4f       	sbci	r29, 0xFE	; 254
   1999a:	a8 81       	ld	r26, Y
   1999c:	c4 51       	subi	r28, 0x14	; 20
   1999e:	d1 40       	sbci	r29, 0x01	; 1
   199a0:	af 93       	push	r26
   199a2:	cd 5e       	subi	r28, 0xED	; 237
   199a4:	de 4f       	sbci	r29, 0xFE	; 254
   199a6:	b8 81       	ld	r27, Y
   199a8:	c3 51       	subi	r28, 0x13	; 19
   199aa:	d1 40       	sbci	r29, 0x01	; 1
   199ac:	bf 93       	push	r27
   199ae:	7f 92       	push	r7
   199b0:	6f 92       	push	r6
   199b2:	5f 92       	push	r5
   199b4:	4f 92       	push	r4
   199b6:	3f 92       	push	r3
   199b8:	2f 92       	push	r2
   199ba:	9f 92       	push	r9
   199bc:	8f 92       	push	r8
   199be:	81 e8       	ldi	r24, 0x81	; 129
   199c0:	9d e3       	ldi	r25, 0x3D	; 61
   199c2:	1f 92       	push	r1
   199c4:	9f 93       	push	r25
   199c6:	8f 93       	push	r24
   199c8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   199cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   199d0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   199d4:	0f b6       	in	r0, 0x3f	; 63
   199d6:	f8 94       	cli
   199d8:	de bf       	out	0x3e, r29	; 62
   199da:	0f be       	out	0x3f, r0	; 63
   199dc:	cd bf       	out	0x3d, r28	; 61
   199de:	92 ff       	sbrs	r25, 2
   199e0:	04 c0       	rjmp	.+8      	; 0x199ea <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   199e2:	6b ec       	ldi	r22, 0xCB	; 203
   199e4:	75 e1       	ldi	r23, 0x15	; 21
   199e6:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   199e8:	01 d9       	rcall	.-3582   	; 0x18bec <lif_dump_vol>
   199ea:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   199ec:	ea d8       	rcall	.-3628   	; 0x18bc2 <lif_image_clear>
   199ee:	80 e0       	ldi	r24, 0x00	; 0
   199f0:	90 e8       	ldi	r25, 0x80	; 128
   199f2:	d5 01       	movw	r26, r10
   199f4:	95 96       	adiw	r26, 0x25	; 37
   199f6:	9c 93       	st	X, r25
   199f8:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   199fa:	94 97       	sbiw	r26, 0x24	; 36
   199fc:	46 e0       	ldi	r20, 0x06	; 6
   199fe:	50 e0       	ldi	r21, 0x00	; 0
   19a00:	b1 01       	movw	r22, r2
   19a02:	c5 01       	movw	r24, r10
   19a04:	86 96       	adiw	r24, 0x26	; 38
   19a06:	0e 94 c5 c2 	call	0x1858a	; 0x1858a <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19a0a:	f5 01       	movw	r30, r10
   19a0c:	45 a6       	std	Z+45, r4	; 0x2d
   19a0e:	56 a6       	std	Z+46, r5	; 0x2e
   19a10:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19a12:	70 aa       	std	Z+48, r7	; 0x30
   19a14:	cd 5e       	subi	r28, 0xED	; 237
   19a16:	de 4f       	sbci	r29, 0xFE	; 254
   19a18:	28 81       	ld	r18, Y
   19a1a:	39 81       	ldd	r19, Y+1	; 0x01
   19a1c:	4a 81       	ldd	r20, Y+2	; 0x02
   19a1e:	5b 81       	ldd	r21, Y+3	; 0x03
   19a20:	c3 51       	subi	r28, 0x13	; 19
   19a22:	d1 40       	sbci	r29, 0x01	; 1
   19a24:	25 ab       	std	Z+53, r18	; 0x35
   19a26:	36 ab       	std	Z+54, r19	; 0x36
   19a28:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19a2a:	50 af       	std	Z+56, r21	; 0x38
   19a2c:	80 e0       	ldi	r24, 0x00	; 0
   19a2e:	90 e1       	ldi	r25, 0x10	; 16
   19a30:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19a32:	81 ab       	std	Z+49, r24	; 0x31
   19a34:	fd 96       	adiw	r30, 0x3d	; 61
   19a36:	10 82       	st	Z, r1
   19a38:	11 82       	std	Z+1, r1	; 0x01
   19a3a:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19a3c:	13 82       	std	Z+3, r1	; 0x03
   19a3e:	34 96       	adiw	r30, 0x04	; 4
   19a40:	10 82       	st	Z, r1
   19a42:	11 82       	std	Z+1, r1	; 0x01
   19a44:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19a46:	13 82       	std	Z+3, r1	; 0x03
   19a48:	34 96       	adiw	r30, 0x04	; 4
   19a4a:	10 82       	st	Z, r1
   19a4c:	11 82       	std	Z+1, r1	; 0x01
   19a4e:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19a50:	13 82       	std	Z+3, r1	; 0x03
   19a52:	a5 01       	movw	r20, r10
   19a54:	47 5b       	subi	r20, 0xB7	; 183
   19a56:	5f 4f       	sbci	r21, 0xFF	; 255
   19a58:	c7 01       	movw	r24, r14
   19a5a:	b6 01       	movw	r22, r12
   19a5c:	0e 94 0a c5 	call	0x18a14	; 0x18a14 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19a60:	c4 01       	movw	r24, r8
   19a62:	0e 94 da c0 	call	0x181b4	; 0x181b4 <lif_stralloc>
   19a66:	f5 01       	movw	r30, r10
   19a68:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   19a6a:	80 83       	st	Z, r24
   19a6c:	89 2b       	or	r24, r25
   19a6e:	09 f4       	brne	.+2      	; 0x19a72 <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19a70:	5c c2       	rjmp	.+1208   	; 0x19f2a <lif_create_volume+0x630>
   19a72:	c5 5f       	subi	r28, 0xF5	; 245
   19a74:	de 4f       	sbci	r29, 0xFE	; 254
   19a76:	28 81       	ld	r18, Y
   19a78:	39 81       	ldd	r19, Y+1	; 0x01
   19a7a:	4a 81       	ldd	r20, Y+2	; 0x02
   19a7c:	5b 81       	ldd	r21, Y+3	; 0x03
   19a7e:	cb 50       	subi	r28, 0x0B	; 11
   19a80:	d1 40       	sbci	r29, 0x01	; 1
   19a82:	20 8b       	std	Z+16, r18	; 0x10
   19a84:	31 8b       	std	Z+17, r19	; 0x11
   19a86:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19a88:	53 8b       	std	Z+19, r21	; 0x13
   19a8a:	cd 5e       	subi	r28, 0xED	; 237
   19a8c:	de 4f       	sbci	r29, 0xFE	; 254
   19a8e:	88 81       	ld	r24, Y
   19a90:	99 81       	ldd	r25, Y+1	; 0x01
   19a92:	aa 81       	ldd	r26, Y+2	; 0x02
   19a94:	bb 81       	ldd	r27, Y+3	; 0x03
   19a96:	c3 51       	subi	r28, 0x13	; 19
   19a98:	d1 40       	sbci	r29, 0x01	; 1
   19a9a:	84 0d       	add	r24, r4
   19a9c:	95 1d       	adc	r25, r5
   19a9e:	a6 1d       	adc	r26, r6
   19aa0:	b7 1d       	adc	r27, r7
   19aa2:	f5 01       	movw	r30, r10
   19aa4:	84 87       	std	Z+12, r24	; 0x0c
   19aa6:	95 87       	std	Z+13, r25	; 0x0d
   19aa8:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19aaa:	b7 87       	std	Z+15, r27	; 0x0f
   19aac:	82 0f       	add	r24, r18
   19aae:	93 1f       	adc	r25, r19
   19ab0:	a4 1f       	adc	r26, r20
   19ab2:	b5 1f       	adc	r27, r21
   19ab4:	84 83       	std	Z+4, r24	; 0x04
   19ab6:	95 83       	std	Z+5, r25	; 0x05
   19ab8:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19aba:	b7 83       	std	Z+7, r27	; 0x07
   19abc:	ba 2f       	mov	r27, r26
   19abe:	a9 2f       	mov	r26, r25
   19ac0:	98 2f       	mov	r25, r24
   19ac2:	88 27       	eor	r24, r24
   19ac4:	80 87       	std	Z+8, r24	; 0x08
   19ac6:	91 87       	std	Z+9, r25	; 0x09
   19ac8:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19aca:	b3 87       	std	Z+11, r27	; 0x0b
   19acc:	20 8f       	std	Z+24, r18	; 0x18
   19ace:	31 8f       	std	Z+25, r19	; 0x19
   19ad0:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19ad2:	53 8f       	std	Z+27, r21	; 0x1b
   19ad4:	14 8a       	std	Z+20, r1	; 0x14
   19ad6:	15 8a       	std	Z+21, r1	; 0x15
   19ad8:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19ada:	17 8a       	std	Z+23, r1	; 0x17
   19adc:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19ade:	14 8e       	std	Z+28, r1	; 0x1c
   19ae0:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19ae2:	16 8e       	std	Z+30, r1	; 0x1e
   19ae4:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19ae6:	10 a2       	std	Z+32, r1	; 0x20
   19ae8:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19aea:	12 a2       	std	Z+34, r1	; 0x22
   19aec:	c1 2c       	mov	r12, r1
   19aee:	dd 24       	eor	r13, r13
   19af0:	d3 94       	inc	r13
   19af2:	9e 01       	movw	r18, r28
   19af4:	2f 5f       	subi	r18, 0xFF	; 255
   19af6:	3f 4f       	sbci	r19, 0xFF	; 255
   19af8:	79 01       	movw	r14, r18
   19afa:	d9 01       	movw	r26, r18
   19afc:	f6 01       	movw	r30, r12
   19afe:	1d 92       	st	X+, r1
   19b00:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19b02:	e9 f7       	brne	.-6      	; 0x19afe <lif_create_volume+0x204>
   19b04:	b9 01       	movw	r22, r18
   19b06:	c5 01       	movw	r24, r10
   19b08:	0e 94 02 c3 	call	0x18604	; 0x18604 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19b0c:	60 ea       	ldi	r22, 0xA0	; 160
   19b0e:	78 e0       	ldi	r23, 0x08	; 8
   19b10:	d5 01       	movw	r26, r10
   19b12:	8d 91       	ld	r24, X+
   19b14:	9c 91       	ld	r25, X
   19b16:	0e 94 f9 c0 	call	0x181f2	; 0x181f2 <lif_open>
   19b1a:	f5 01       	movw	r30, r10
   19b1c:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19b1e:	82 83       	std	Z+2, r24	; 0x02
   19b20:	89 2b       	or	r24, r25
   19b22:	09 f4       	brne	.+2      	; 0x19b26 <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19b24:	02 c2       	rjmp	.+1028   	; 0x19f2a <lif_create_volume+0x630>
   19b26:	00 e0       	ldi	r16, 0x00	; 0
   19b28:	11 e0       	ldi	r17, 0x01	; 1
   19b2a:	20 e0       	ldi	r18, 0x00	; 0
   19b2c:	30 e0       	ldi	r19, 0x00	; 0
   19b2e:	a9 01       	movw	r20, r18
   19b30:	b7 01       	movw	r22, r14
   19b32:	c5 01       	movw	r24, r10
   19b34:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
   19b38:	9c 01       	movw	r18, r24
   19b3a:	99 0f       	add	r25, r25
   19b3c:	44 0b       	sbc	r20, r20
   19b3e:	55 0b       	sbc	r21, r21
   19b40:	c9 5f       	subi	r28, 0xF9	; 249
   19b42:	de 4f       	sbci	r29, 0xFE	; 254
   19b44:	28 83       	st	Y, r18
   19b46:	39 83       	std	Y+1, r19	; 0x01
   19b48:	4a 83       	std	Y+2, r20	; 0x02
   19b4a:	5b 83       	std	Y+3, r21	; 0x03
   19b4c:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   19b4e:	d1 40       	sbci	r29, 0x01	; 1
   19b50:	2f 3f       	cpi	r18, 0xFF	; 255
   19b52:	31 05       	cpc	r19, r1
   19b54:	41 05       	cpc	r20, r1
   19b56:	51 05       	cpc	r21, r1
   19b58:	09 f0       	breq	.+2      	; 0x19b5c <lif_create_volume+0x262>
   19b5a:	0c f4       	brge	.+2      	; 0x19b5e <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19b5c:	e6 c1       	rjmp	.+972    	; 0x19f2a <lif_create_volume+0x630>
   19b5e:	d7 01       	movw	r26, r14
   19b60:	f6 01       	movw	r30, r12
   19b62:	1d 92       	st	X+, r1
   19b64:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19b66:	e9 f7       	brne	.-6      	; 0x19b62 <lif_create_volume+0x268>
   19b68:	21 e0       	ldi	r18, 0x01	; 1
   19b6a:	30 e0       	ldi	r19, 0x00	; 0
   19b6c:	40 e0       	ldi	r20, 0x00	; 0
   19b6e:	50 e0       	ldi	r21, 0x00	; 0
   19b70:	cd 5f       	subi	r28, 0xFD	; 253
   19b72:	de 4f       	sbci	r29, 0xFE	; 254
   19b74:	28 83       	st	Y, r18
   19b76:	39 83       	std	Y+1, r19	; 0x01
   19b78:	4a 83       	std	Y+2, r20	; 0x02
   19b7a:	5b 83       	std	Y+3, r21	; 0x03
   19b7c:	c3 50       	subi	r28, 0x03	; 3
   19b7e:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19b80:	47 01       	movw	r8, r14
   19b82:	84 e7       	ldi	r24, 0x74	; 116
   19b84:	9d e3       	ldi	r25, 0x3D	; 61


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19b86:	6c 01       	movw	r12, r24
   19b88:	cd 5f       	subi	r28, 0xFD	; 253
   19b8a:	de 4f       	sbci	r29, 0xFE	; 254
   19b8c:	88 81       	ld	r24, Y
   19b8e:	99 81       	ldd	r25, Y+1	; 0x01
   19b90:	aa 81       	ldd	r26, Y+2	; 0x02
   19b92:	bb 81       	ldd	r27, Y+3	; 0x03
   19b94:	c3 50       	subi	r28, 0x03	; 3
   19b96:	d1 40       	sbci	r29, 0x01	; 1
   19b98:	84 15       	cp	r24, r4
   19b9a:	95 05       	cpc	r25, r5
   19b9c:	a6 05       	cpc	r26, r6
   19b9e:	b7 05       	cpc	r27, r7
   19ba0:	0c f0       	brlt	.+2      	; 0x19ba4 <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19ba2:	64 c0       	rjmp	.+200    	; 0x19c6c <lif_create_volume+0x372>
   19ba4:	00 e0       	ldi	r16, 0x00	; 0
   19ba6:	11 e0       	ldi	r17, 0x01	; 1
   19ba8:	c9 5f       	subi	r28, 0xF9	; 249
   19baa:	de 4f       	sbci	r29, 0xFE	; 254
   19bac:	28 81       	ld	r18, Y
   19bae:	39 81       	ldd	r19, Y+1	; 0x01
   19bb0:	4a 81       	ldd	r20, Y+2	; 0x02
   19bb2:	5b 81       	ldd	r21, Y+3	; 0x03
   19bb4:	c7 50       	subi	r28, 0x07	; 7
   19bb6:	d1 40       	sbci	r29, 0x01	; 1
   19bb8:	b4 01       	movw	r22, r8
   19bba:	c5 01       	movw	r24, r10
   19bbc:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
   19bc0:	09 2e       	mov	r0, r25
   19bc2:	00 0c       	add	r0, r0
   19bc4:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19bc6:	bb 0b       	sbc	r27, r27
   19bc8:	8f 3f       	cpi	r24, 0xFF	; 255
   19bca:	91 05       	cpc	r25, r1
   19bcc:	a1 05       	cpc	r26, r1
   19bce:	b1 05       	cpc	r27, r1
   19bd0:	09 f0       	breq	.+2      	; 0x19bd4 <lif_create_volume+0x2da>
   19bd2:	0c f4       	brge	.+2      	; 0x19bd6 <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19bd4:	aa c1       	rjmp	.+852    	; 0x19f2a <lif_create_volume+0x630>
   19bd6:	c9 5f       	subi	r28, 0xF9	; 249
   19bd8:	de 4f       	sbci	r29, 0xFE	; 254
   19bda:	28 81       	ld	r18, Y
   19bdc:	39 81       	ldd	r19, Y+1	; 0x01
   19bde:	4a 81       	ldd	r20, Y+2	; 0x02
   19be0:	5b 81       	ldd	r21, Y+3	; 0x03
   19be2:	c7 50       	subi	r28, 0x07	; 7
   19be4:	d1 40       	sbci	r29, 0x01	; 1
   19be6:	28 0f       	add	r18, r24
   19be8:	39 1f       	adc	r19, r25
   19bea:	4a 1f       	adc	r20, r26
   19bec:	5b 1f       	adc	r21, r27
   19bee:	c9 5f       	subi	r28, 0xF9	; 249
   19bf0:	de 4f       	sbci	r29, 0xFE	; 254
   19bf2:	28 83       	st	Y, r18
   19bf4:	39 83       	std	Y+1, r19	; 0x01
   19bf6:	4a 83       	std	Y+2, r20	; 0x02
   19bf8:	5b 83       	std	Y+3, r21	; 0x03
   19bfa:	c7 50       	subi	r28, 0x07	; 7
            printf("\tWrote: %ld\r", count);
   19bfc:	d1 40       	sbci	r29, 0x01	; 1
   19bfe:	ca 5f       	subi	r28, 0xFA	; 250
   19c00:	de 4f       	sbci	r29, 0xFE	; 254
   19c02:	38 81       	ld	r19, Y
   19c04:	c6 50       	subi	r28, 0x06	; 6
   19c06:	d1 40       	sbci	r29, 0x01	; 1
   19c08:	3f 93       	push	r19
   19c0a:	cb 5f       	subi	r28, 0xFB	; 251
   19c0c:	de 4f       	sbci	r29, 0xFE	; 254
   19c0e:	48 81       	ld	r20, Y
   19c10:	c5 50       	subi	r28, 0x05	; 5
   19c12:	d1 40       	sbci	r29, 0x01	; 1
   19c14:	4f 93       	push	r20
   19c16:	cc 5f       	subi	r28, 0xFC	; 252
   19c18:	de 4f       	sbci	r29, 0xFE	; 254
   19c1a:	58 81       	ld	r21, Y
   19c1c:	c4 50       	subi	r28, 0x04	; 4
   19c1e:	d1 40       	sbci	r29, 0x01	; 1
   19c20:	5f 93       	push	r21
   19c22:	cd 5f       	subi	r28, 0xFD	; 253
   19c24:	de 4f       	sbci	r29, 0xFE	; 254
   19c26:	88 81       	ld	r24, Y
   19c28:	c3 50       	subi	r28, 0x03	; 3
   19c2a:	d1 40       	sbci	r29, 0x01	; 1
   19c2c:	8f 93       	push	r24
   19c2e:	1f 92       	push	r1
   19c30:	df 92       	push	r13
   19c32:	cf 92       	push	r12
   19c34:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c38:	cd 5f       	subi	r28, 0xFD	; 253
   19c3a:	de 4f       	sbci	r29, 0xFE	; 254
   19c3c:	28 81       	ld	r18, Y
   19c3e:	39 81       	ldd	r19, Y+1	; 0x01
   19c40:	4a 81       	ldd	r20, Y+2	; 0x02
   19c42:	5b 81       	ldd	r21, Y+3	; 0x03
   19c44:	c3 50       	subi	r28, 0x03	; 3
   19c46:	d1 40       	sbci	r29, 0x01	; 1
   19c48:	2f 5f       	subi	r18, 0xFF	; 255
   19c4a:	3f 4f       	sbci	r19, 0xFF	; 255
   19c4c:	4f 4f       	sbci	r20, 0xFF	; 255
   19c4e:	5f 4f       	sbci	r21, 0xFF	; 255
   19c50:	cd 5f       	subi	r28, 0xFD	; 253
   19c52:	de 4f       	sbci	r29, 0xFE	; 254
   19c54:	28 83       	st	Y, r18
   19c56:	39 83       	std	Y+1, r19	; 0x01
   19c58:	4a 83       	std	Y+2, r20	; 0x02
   19c5a:	5b 83       	std	Y+3, r21	; 0x03
   19c5c:	c3 50       	subi	r28, 0x03	; 3
   19c5e:	d1 40       	sbci	r29, 0x01	; 1
   19c60:	0f b6       	in	r0, 0x3f	; 63
   19c62:	f8 94       	cli
   19c64:	de bf       	out	0x3e, r29	; 62
   19c66:	0f be       	out	0x3f, r0	; 63
   19c68:	cd bf       	out	0x3d, r28	; 61
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19c6a:	8e cf       	rjmp	.-228    	; 0x19b88 <lif_create_volume+0x28e>
   19c6c:	c5 01       	movw	r24, r10
   19c6e:	0e 94 e7 c5 	call	0x18bce	; 0x18bce <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19c72:	8f ef       	ldi	r24, 0xFF	; 255
   19c74:	9f ef       	ldi	r25, 0xFF	; 255
   19c76:	f5 01       	movw	r30, r10
   19c78:	e6 5a       	subi	r30, 0xA6	; 166
   19c7a:	ff 4f       	sbci	r31, 0xFF	; 255
   19c7c:	91 83       	std	Z+1, r25	; 0x01
   19c7e:	80 83       	st	Z, r24
   19c80:	74 01       	movw	r14, r8
   19c82:	6e 01       	movw	r12, r28
   19c84:	91 e0       	ldi	r25, 0x01	; 1
   19c86:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19c88:	d9 1e       	adc	r13, r25
   19c8a:	b7 01       	movw	r22, r14
   19c8c:	c5 01       	movw	r24, r10
   19c8e:	0e 94 22 c4 	call	0x18844	; 0x18844 <lif_dir2str>
   19c92:	a0 e2       	ldi	r26, 0x20	; 32
   19c94:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19c96:	f1 1c       	adc	r15, r1
   19c98:	ce 14       	cp	r12, r14
   19c9a:	df 04       	cpc	r13, r15
   19c9c:	b1 f7       	brne	.-20     	; 0x19c8a <lif_create_volume+0x390>
   19c9e:	c1 2c       	mov	r12, r1
   19ca0:	d1 2c       	mov	r13, r1
   19ca2:	76 01       	movw	r14, r12
   19ca4:	fe 01       	movw	r30, r28
   19ca6:	31 96       	adiw	r30, 0x01	; 1
   19ca8:	cf 5f       	subi	r28, 0xFF	; 255
   19caa:	de 4f       	sbci	r29, 0xFE	; 254
   19cac:	f9 83       	std	Y+1, r31	; 0x01
   19cae:	e8 83       	st	Y, r30
   19cb0:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19cb2:	d1 40       	sbci	r29, 0x01	; 1
   19cb4:	84 e6       	ldi	r24, 0x64	; 100
   19cb6:	28 2e       	mov	r2, r24
   19cb8:	31 2c       	mov	r3, r1
   19cba:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19cbc:	51 2c       	mov	r5, r1
   19cbe:	87 e6       	ldi	r24, 0x67	; 103
   19cc0:	9d e3       	ldi	r25, 0x3D	; 61
   19cc2:	3c 01       	movw	r6, r24
   19cc4:	81 2c       	mov	r8, r1
   19cc6:	cd 5f       	subi	r28, 0xFD	; 253
   19cc8:	de 4f       	sbci	r29, 0xFE	; 254
   19cca:	28 81       	ld	r18, Y
   19ccc:	39 81       	ldd	r19, Y+1	; 0x01
   19cce:	4a 81       	ldd	r20, Y+2	; 0x02
   19cd0:	5b 81       	ldd	r21, Y+3	; 0x03
   19cd2:	c3 50       	subi	r28, 0x03	; 3
   19cd4:	d1 40       	sbci	r29, 0x01	; 1
   19cd6:	2c 0d       	add	r18, r12
   19cd8:	3d 1d       	adc	r19, r13
   19cda:	4e 1d       	adc	r20, r14
   19cdc:	5f 1d       	adc	r21, r15
   19cde:	c1 5f       	subi	r28, 0xF1	; 241
   19ce0:	de 4f       	sbci	r29, 0xFE	; 254
   19ce2:	28 83       	st	Y, r18
   19ce4:	39 83       	std	Y+1, r19	; 0x01
   19ce6:	4a 83       	std	Y+2, r20	; 0x02
   19ce8:	5b 83       	std	Y+3, r21	; 0x03
   19cea:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19cec:	d1 40       	sbci	r29, 0x01	; 1
   19cee:	cd 5e       	subi	r28, 0xED	; 237
   19cf0:	de 4f       	sbci	r29, 0xFE	; 254
   19cf2:	88 81       	ld	r24, Y
   19cf4:	99 81       	ldd	r25, Y+1	; 0x01
   19cf6:	aa 81       	ldd	r26, Y+2	; 0x02
   19cf8:	bb 81       	ldd	r27, Y+3	; 0x03
   19cfa:	c3 51       	subi	r28, 0x13	; 19
   19cfc:	d1 40       	sbci	r29, 0x01	; 1
   19cfe:	c8 16       	cp	r12, r24
   19d00:	d9 06       	cpc	r13, r25
   19d02:	ea 06       	cpc	r14, r26
   19d04:	fb 06       	cpc	r15, r27
   19d06:	0c f0       	brlt	.+2      	; 0x19d0a <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19d08:	67 c0       	rjmp	.+206    	; 0x19dd8 <lif_create_volume+0x4de>
   19d0a:	00 e0       	ldi	r16, 0x00	; 0
   19d0c:	11 e0       	ldi	r17, 0x01	; 1
   19d0e:	c9 5f       	subi	r28, 0xF9	; 249
   19d10:	de 4f       	sbci	r29, 0xFE	; 254
   19d12:	28 81       	ld	r18, Y
   19d14:	39 81       	ldd	r19, Y+1	; 0x01
   19d16:	4a 81       	ldd	r20, Y+2	; 0x02
   19d18:	5b 81       	ldd	r21, Y+3	; 0x03
   19d1a:	c7 50       	subi	r28, 0x07	; 7
   19d1c:	d1 40       	sbci	r29, 0x01	; 1
   19d1e:	be 01       	movw	r22, r28
   19d20:	6f 5f       	subi	r22, 0xFF	; 255
   19d22:	7f 4f       	sbci	r23, 0xFF	; 255
   19d24:	c5 01       	movw	r24, r10
   19d26:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
   19d2a:	09 2e       	mov	r0, r25
   19d2c:	00 0c       	add	r0, r0
   19d2e:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19d30:	bb 0b       	sbc	r27, r27
   19d32:	8f 3f       	cpi	r24, 0xFF	; 255
   19d34:	91 05       	cpc	r25, r1
   19d36:	a1 05       	cpc	r26, r1
   19d38:	b1 05       	cpc	r27, r1
   19d3a:	09 f0       	breq	.+2      	; 0x19d3e <lif_create_volume+0x444>
   19d3c:	0c f4       	brge	.+2      	; 0x19d40 <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19d3e:	f5 c0       	rjmp	.+490    	; 0x19f2a <lif_create_volume+0x630>
   19d40:	c9 5f       	subi	r28, 0xF9	; 249
   19d42:	de 4f       	sbci	r29, 0xFE	; 254
   19d44:	28 81       	ld	r18, Y
   19d46:	39 81       	ldd	r19, Y+1	; 0x01
   19d48:	4a 81       	ldd	r20, Y+2	; 0x02
   19d4a:	5b 81       	ldd	r21, Y+3	; 0x03
   19d4c:	c7 50       	subi	r28, 0x07	; 7
   19d4e:	d1 40       	sbci	r29, 0x01	; 1
   19d50:	28 0f       	add	r18, r24
   19d52:	39 1f       	adc	r19, r25
   19d54:	4a 1f       	adc	r20, r26
   19d56:	5b 1f       	adc	r21, r27
   19d58:	c9 5f       	subi	r28, 0xF9	; 249
   19d5a:	de 4f       	sbci	r29, 0xFE	; 254
   19d5c:	28 83       	st	Y, r18
   19d5e:	39 83       	std	Y+1, r19	; 0x01
   19d60:	4a 83       	std	Y+2, r20	; 0x02
   19d62:	5b 83       	std	Y+3, r21	; 0x03
   19d64:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   19d66:	d1 40       	sbci	r29, 0x01	; 1
   19d68:	c1 5f       	subi	r28, 0xF1	; 241
   19d6a:	de 4f       	sbci	r29, 0xFE	; 254
   19d6c:	68 81       	ld	r22, Y
   19d6e:	79 81       	ldd	r23, Y+1	; 0x01
   19d70:	8a 81       	ldd	r24, Y+2	; 0x02
   19d72:	9b 81       	ldd	r25, Y+3	; 0x03
   19d74:	cf 50       	subi	r28, 0x0F	; 15
   19d76:	d1 40       	sbci	r29, 0x01	; 1
   19d78:	a2 01       	movw	r20, r4
   19d7a:	91 01       	movw	r18, r2
   19d7c:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
   19d80:	67 2b       	or	r22, r23
   19d82:	68 2b       	or	r22, r24
   19d84:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19d86:	11 f5       	brne	.+68     	; 0x19dcc <lif_create_volume+0x4d2>
   19d88:	ce 5e       	subi	r28, 0xEE	; 238
   19d8a:	de 4f       	sbci	r29, 0xFE	; 254
   19d8c:	38 81       	ld	r19, Y
   19d8e:	c2 51       	subi	r28, 0x12	; 18
   19d90:	d1 40       	sbci	r29, 0x01	; 1
   19d92:	3f 93       	push	r19
   19d94:	cf 5e       	subi	r28, 0xEF	; 239
   19d96:	de 4f       	sbci	r29, 0xFE	; 254
   19d98:	48 81       	ld	r20, Y
   19d9a:	c1 51       	subi	r28, 0x11	; 17
   19d9c:	d1 40       	sbci	r29, 0x01	; 1
   19d9e:	4f 93       	push	r20
   19da0:	c0 5f       	subi	r28, 0xF0	; 240
   19da2:	de 4f       	sbci	r29, 0xFE	; 254
   19da4:	58 81       	ld	r21, Y
   19da6:	c0 51       	subi	r28, 0x10	; 16
   19da8:	d1 40       	sbci	r29, 0x01	; 1
   19daa:	5f 93       	push	r21
   19dac:	c1 5f       	subi	r28, 0xF1	; 241
   19dae:	de 4f       	sbci	r29, 0xFE	; 254
   19db0:	88 81       	ld	r24, Y
   19db2:	cf 50       	subi	r28, 0x0F	; 15
   19db4:	d1 40       	sbci	r29, 0x01	; 1
   19db6:	8f 93       	push	r24
   19db8:	1f 92       	push	r1
   19dba:	7f 92       	push	r7
   19dbc:	6f 92       	push	r6
   19dbe:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19dc2:	0f b6       	in	r0, 0x3f	; 63
   19dc4:	f8 94       	cli
   19dc6:	de bf       	out	0x3e, r29	; 62
   19dc8:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19dca:	cd bf       	out	0x3d, r28	; 61
   19dcc:	bf ef       	ldi	r27, 0xFF	; 255
   19dce:	cb 1a       	sub	r12, r27
   19dd0:	db 0a       	sbc	r13, r27
   19dd2:	eb 0a       	sbc	r14, r27
   19dd4:	fb 0a       	sbc	r15, r27
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19dd6:	77 cf       	rjmp	.-274    	; 0x19cc6 <lif_create_volume+0x3cc>
   19dd8:	80 e0       	ldi	r24, 0x00	; 0
   19dda:	91 e0       	ldi	r25, 0x01	; 1
   19ddc:	cf 5f       	subi	r28, 0xFF	; 255
   19dde:	de 4f       	sbci	r29, 0xFE	; 254
   19de0:	a8 81       	ld	r26, Y
   19de2:	b9 81       	ldd	r27, Y+1	; 0x01
   19de4:	c1 50       	subi	r28, 0x01	; 1
   19de6:	d1 40       	sbci	r29, 0x01	; 1
   19de8:	fc 01       	movw	r30, r24
   19dea:	1d 92       	st	X+, r1
   19dec:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   19dee:	e9 f7       	brne	.-6      	; 0x19dea <lif_create_volume+0x4f0>
   19df0:	41 2c       	mov	r4, r1
   19df2:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19df4:	32 01       	movw	r6, r4
   19df6:	8a e5       	ldi	r24, 0x5A	; 90
   19df8:	9d e3       	ldi	r25, 0x3D	; 61
   19dfa:	9c 01       	movw	r18, r24
   19dfc:	40 e0       	ldi	r20, 0x00	; 0
   19dfe:	cd 5f       	subi	r28, 0xFD	; 253
   19e00:	de 4f       	sbci	r29, 0xFE	; 254
   19e02:	28 83       	st	Y, r18
   19e04:	39 83       	std	Y+1, r19	; 0x01
   19e06:	4a 83       	std	Y+2, r20	; 0x02
   19e08:	c3 50       	subi	r28, 0x03	; 3
   19e0a:	d1 40       	sbci	r29, 0x01	; 1
   19e0c:	c1 5f       	subi	r28, 0xF1	; 241
   19e0e:	de 4f       	sbci	r29, 0xFE	; 254
   19e10:	c8 80       	ld	r12, Y
   19e12:	d9 80       	ldd	r13, Y+1	; 0x01
   19e14:	ea 80       	ldd	r14, Y+2	; 0x02
   19e16:	fb 80       	ldd	r15, Y+3	; 0x03
   19e18:	cf 50       	subi	r28, 0x0F	; 15
   19e1a:	d1 40       	sbci	r29, 0x01	; 1
   19e1c:	c4 0c       	add	r12, r4
   19e1e:	d5 1c       	adc	r13, r5
   19e20:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19e22:	f7 1c       	adc	r15, r7
   19e24:	c5 5f       	subi	r28, 0xF5	; 245
   19e26:	de 4f       	sbci	r29, 0xFE	; 254
   19e28:	28 81       	ld	r18, Y
   19e2a:	39 81       	ldd	r19, Y+1	; 0x01
   19e2c:	4a 81       	ldd	r20, Y+2	; 0x02
   19e2e:	5b 81       	ldd	r21, Y+3	; 0x03
   19e30:	cb 50       	subi	r28, 0x0B	; 11
   19e32:	d1 40       	sbci	r29, 0x01	; 1
   19e34:	42 16       	cp	r4, r18
   19e36:	53 06       	cpc	r5, r19
   19e38:	64 06       	cpc	r6, r20
   19e3a:	75 06       	cpc	r7, r21
   19e3c:	0c f0       	brlt	.+2      	; 0x19e40 <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19e3e:	59 c0       	rjmp	.+178    	; 0x19ef2 <lif_create_volume+0x5f8>
   19e40:	00 e0       	ldi	r16, 0x00	; 0
   19e42:	11 e0       	ldi	r17, 0x01	; 1
   19e44:	c9 5f       	subi	r28, 0xF9	; 249
   19e46:	de 4f       	sbci	r29, 0xFE	; 254
   19e48:	28 81       	ld	r18, Y
   19e4a:	39 81       	ldd	r19, Y+1	; 0x01
   19e4c:	4a 81       	ldd	r20, Y+2	; 0x02
   19e4e:	5b 81       	ldd	r21, Y+3	; 0x03
   19e50:	c7 50       	subi	r28, 0x07	; 7
   19e52:	d1 40       	sbci	r29, 0x01	; 1
   19e54:	be 01       	movw	r22, r28
   19e56:	6f 5f       	subi	r22, 0xFF	; 255
   19e58:	7f 4f       	sbci	r23, 0xFF	; 255
   19e5a:	c5 01       	movw	r24, r10
   19e5c:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
   19e60:	09 2e       	mov	r0, r25
   19e62:	00 0c       	add	r0, r0
   19e64:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19e66:	bb 0b       	sbc	r27, r27
   19e68:	8f 3f       	cpi	r24, 0xFF	; 255
   19e6a:	91 05       	cpc	r25, r1
   19e6c:	a1 05       	cpc	r26, r1
   19e6e:	b1 05       	cpc	r27, r1
   19e70:	09 f0       	breq	.+2      	; 0x19e74 <lif_create_volume+0x57a>
   19e72:	0c f4       	brge	.+2      	; 0x19e76 <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e74:	5a c0       	rjmp	.+180    	; 0x19f2a <lif_create_volume+0x630>
   19e76:	c9 5f       	subi	r28, 0xF9	; 249
   19e78:	de 4f       	sbci	r29, 0xFE	; 254
   19e7a:	28 81       	ld	r18, Y
   19e7c:	39 81       	ldd	r19, Y+1	; 0x01
   19e7e:	4a 81       	ldd	r20, Y+2	; 0x02
   19e80:	5b 81       	ldd	r21, Y+3	; 0x03
   19e82:	c7 50       	subi	r28, 0x07	; 7
   19e84:	d1 40       	sbci	r29, 0x01	; 1
   19e86:	28 0f       	add	r18, r24
   19e88:	39 1f       	adc	r19, r25
   19e8a:	4a 1f       	adc	r20, r26
   19e8c:	5b 1f       	adc	r21, r27
   19e8e:	c9 5f       	subi	r28, 0xF9	; 249
   19e90:	de 4f       	sbci	r29, 0xFE	; 254
   19e92:	28 83       	st	Y, r18
   19e94:	39 83       	std	Y+1, r19	; 0x01
   19e96:	4a 83       	std	Y+2, r20	; 0x02
   19e98:	5b 83       	std	Y+3, r21	; 0x03
   19e9a:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   19e9c:	d1 40       	sbci	r29, 0x01	; 1
   19e9e:	c7 01       	movw	r24, r14
   19ea0:	b6 01       	movw	r22, r12
   19ea2:	24 e6       	ldi	r18, 0x64	; 100
   19ea4:	30 e0       	ldi	r19, 0x00	; 0
   19ea6:	40 e0       	ldi	r20, 0x00	; 0
   19ea8:	50 e0       	ldi	r21, 0x00	; 0
   19eaa:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
   19eae:	67 2b       	or	r22, r23
   19eb0:	68 2b       	or	r22, r24
   19eb2:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19eb4:	c1 f4       	brne	.+48     	; 0x19ee6 <lif_create_volume+0x5ec>
   19eb6:	ff 92       	push	r15
   19eb8:	ef 92       	push	r14
   19eba:	df 92       	push	r13
   19ebc:	cf 92       	push	r12
   19ebe:	1f 92       	push	r1
   19ec0:	cc 5f       	subi	r28, 0xFC	; 252
   19ec2:	de 4f       	sbci	r29, 0xFE	; 254
   19ec4:	38 81       	ld	r19, Y
   19ec6:	c4 50       	subi	r28, 0x04	; 4
   19ec8:	d1 40       	sbci	r29, 0x01	; 1
   19eca:	3f 93       	push	r19
   19ecc:	cd 5f       	subi	r28, 0xFD	; 253
   19ece:	de 4f       	sbci	r29, 0xFE	; 254
   19ed0:	48 81       	ld	r20, Y
   19ed2:	c3 50       	subi	r28, 0x03	; 3
   19ed4:	d1 40       	sbci	r29, 0x01	; 1
   19ed6:	4f 93       	push	r20
   19ed8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   19edc:	0f b6       	in	r0, 0x3f	; 63
   19ede:	f8 94       	cli
   19ee0:	de bf       	out	0x3e, r29	; 62
   19ee2:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19ee4:	cd bf       	out	0x3d, r28	; 61
   19ee6:	9f ef       	ldi	r25, 0xFF	; 255
   19ee8:	49 1a       	sub	r4, r25
   19eea:	59 0a       	sbc	r5, r25
   19eec:	69 0a       	sbc	r6, r25
   19eee:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19ef0:	8d cf       	rjmp	.-230    	; 0x19e0c <lif_create_volume+0x512>
   19ef2:	ff 92       	push	r15
   19ef4:	ef 92       	push	r14
   19ef6:	df 92       	push	r13
   19ef8:	cf 92       	push	r12
   19efa:	8d e4       	ldi	r24, 0x4D	; 77
   19efc:	9d e3       	ldi	r25, 0x3D	; 61
   19efe:	1f 92       	push	r1
   19f00:	9f 93       	push	r25
   19f02:	8f 93       	push	r24
   19f04:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   19f08:	8f ef       	ldi	r24, 0xFF	; 255
   19f0a:	9f ef       	ldi	r25, 0xFF	; 255
   19f0c:	d5 01       	movw	r26, r10
   19f0e:	91 96       	adiw	r26, 0x21	; 33
   19f10:	9c 93       	st	X, r25
   19f12:	8e 93       	st	-X, r24
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19f14:	90 97       	sbiw	r26, 0x20	; 32
   19f16:	c5 01       	movw	r24, r10
   19f18:	0e 94 89 c7 	call	0x18f12	; 0x18f12 <lif_check_volume>
   19f1c:	0f b6       	in	r0, 0x3f	; 63
   19f1e:	f8 94       	cli
   19f20:	de bf       	out	0x3e, r29	; 62
   19f22:	0f be       	out	0x3f, r0	; 63
   19f24:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f26:	89 2b       	or	r24, r25
   19f28:	19 f4       	brne	.+6      	; 0x19f30 <lif_create_volume+0x636>
   19f2a:	c5 01       	movw	r24, r10
   19f2c:	80 da       	rcall	.-2816   	; 0x1942e <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   19f2e:	08 c0       	rjmp	.+16     	; 0x19f40 <lif_create_volume+0x646>
   19f30:	c5 01       	movw	r24, r10
   19f32:	db db       	rcall	.-2122   	; 0x196ea <lif_updatefree>
   19f34:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f36:	89 2b       	or	r24, r25
   19f38:	31 f4       	brne	.+12     	; 0x19f46 <lif_create_volume+0x64c>
   19f3a:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19f3c:	78 da       	rcall	.-2832   	; 0x1942e <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19f3e:	04 c0       	rjmp	.+8      	; 0x19f48 <lif_create_volume+0x64e>
   19f40:	e1 2c       	mov	r14, r1
   19f42:	f1 2c       	mov	r15, r1
   19f44:	01 c0       	rjmp	.+2      	; 0x19f48 <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19f46:	75 01       	movw	r14, r10
   19f48:	c7 01       	movw	r24, r14
   19f4a:	ca 5e       	subi	r28, 0xEA	; 234
   19f4c:	de 4f       	sbci	r29, 0xFE	; 254
   19f4e:	e2 e1       	ldi	r30, 0x12	; 18
   19f50:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

00019f54 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19f54:	ac e0       	ldi	r26, 0x0C	; 12
   19f56:	b0 e0       	ldi	r27, 0x00	; 0
   19f58:	e0 eb       	ldi	r30, 0xB0	; 176
   19f5a:	ff ec       	ldi	r31, 0xCF	; 207
   19f5c:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   19f60:	9c 87       	std	Y+12, r25	; 0x0c
   19f62:	8b 87       	std	Y+11, r24	; 0x0b
   19f64:	6a 01       	movw	r12, r20
   19f66:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   19f68:	fc 01       	movw	r30, r24
   19f6a:	84 84       	ldd	r8, Z+12	; 0x0c
   19f6c:	95 84       	ldd	r9, Z+13	; 0x0d
   19f6e:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   19f70:	b7 84       	ldd	r11, Z+15	; 0x0f
   19f72:	bb db       	rcall	.-2186   	; 0x196ea <lif_updatefree>
   19f74:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19f76:	b1 f4       	brne	.+44     	; 0x19fa4 <lif_newdir+0x50>
   19f78:	ff 92       	push	r15
   19f7a:	ef 92       	push	r14
   19f7c:	df 92       	push	r13
   19f7e:	cf 92       	push	r12
   19f80:	eb 85       	ldd	r30, Y+11	; 0x0b
   19f82:	fc 85       	ldd	r31, Y+12	; 0x0c
   19f84:	83 8d       	ldd	r24, Z+27	; 0x1b
   19f86:	8f 93       	push	r24
   19f88:	82 8d       	ldd	r24, Z+26	; 0x1a
   19f8a:	8f 93       	push	r24
   19f8c:	81 8d       	ldd	r24, Z+25	; 0x19
   19f8e:	8f 93       	push	r24
   19f90:	80 8d       	ldd	r24, Z+24	; 0x18
   19f92:	8f 93       	push	r24
   19f94:	8e e6       	ldi	r24, 0x6E	; 110
   19f96:	9c e3       	ldi	r25, 0x3C	; 60
   19f98:	1f 92       	push	r1
   19f9a:	9f 93       	push	r25
   19f9c:	8f 93       	push	r24
   19f9e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19fa2:	2c c0       	rjmp	.+88     	; 0x19ffc <lif_newdir+0xa8>
   19fa4:	eb 85       	ldd	r30, Y+11	; 0x0b
   19fa6:	fc 85       	ldd	r31, Y+12	; 0x0c
   19fa8:	80 8d       	ldd	r24, Z+24	; 0x18
   19faa:	91 8d       	ldd	r25, Z+25	; 0x19
   19fac:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19fae:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19fb0:	8c 15       	cp	r24, r12
   19fb2:	9d 05       	cpc	r25, r13
   19fb4:	ae 05       	cpc	r26, r14
   19fb6:	bf 05       	cpc	r27, r15
   19fb8:	b4 f0       	brlt	.+44     	; 0x19fe6 <lif_newdir+0x92>
   19fba:	44 24       	eor	r4, r4
   19fbc:	43 94       	inc	r4
   19fbe:	51 2c       	mov	r5, r1
   19fc0:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19fc2:	71 2c       	mov	r7, r1
   19fc4:	e6 5a       	subi	r30, 0xA6	; 166
   19fc6:	ff 4f       	sbci	r31, 0xFF	; 255
   19fc8:	fc 83       	std	Y+4, r31	; 0x04
   19fca:	eb 83       	std	Y+3, r30	; 0x03
   19fcc:	8b 85       	ldd	r24, Y+11	; 0x0b
   19fce:	9c 85       	ldd	r25, Y+12	; 0x0c
   19fd0:	84 5a       	subi	r24, 0xA4	; 164
   19fd2:	9f 4f       	sbci	r25, 0xFF	; 255
   19fd4:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19fd6:	89 83       	std	Y+1, r24	; 0x01
   19fd8:	eb 85       	ldd	r30, Y+11	; 0x0b
   19fda:	fc 85       	ldd	r31, Y+12	; 0x0c
   19fdc:	e0 5a       	subi	r30, 0xA0	; 160
   19fde:	ff 4f       	sbci	r31, 0xFF	; 255
   19fe0:	fe 83       	std	Y+6, r31	; 0x06
   19fe2:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19fe4:	23 c0       	rjmp	.+70     	; 0x1a02c <lif_newdir+0xd8>
   19fe6:	bf 93       	push	r27
   19fe8:	af 93       	push	r26
   19fea:	9f 93       	push	r25
   19fec:	8f 93       	push	r24
   19fee:	85 e4       	ldi	r24, 0x45	; 69
   19ff0:	9c e3       	ldi	r25, 0x3C	; 60
   19ff2:	1f 92       	push	r1
   19ff4:	9f 93       	push	r25
   19ff6:	8f 93       	push	r24
   19ff8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
   19ffc:	0f b6       	in	r0, 0x3f	; 63
   19ffe:	f8 94       	cli
   1a000:	de bf       	out	0x3e, r29	; 62
   1a002:	0f be       	out	0x3f, r0	; 63
   1a004:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a006:	05 c1       	rjmp	.+522    	; 0x1a212 <lif_newdir+0x2be>
   1a008:	eb 81       	ldd	r30, Y+3	; 0x03
   1a00a:	fc 81       	ldd	r31, Y+4	; 0x04
   1a00c:	80 81       	ld	r24, Z
   1a00e:	91 81       	ldd	r25, Z+1	; 0x01
   1a010:	8f 3f       	cpi	r24, 0xFF	; 255
   1a012:	ff ef       	ldi	r31, 0xFF	; 255
   1a014:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a016:	a1 f0       	breq	.+40     	; 0x1a040 <lif_newdir+0xec>
   1a018:	89 2b       	or	r24, r25
   1a01a:	09 f0       	breq	.+2      	; 0x1a01e <lif_newdir+0xca>
        {
            if(freestate == 0)
   1a01c:	d0 c0       	rjmp	.+416    	; 0x1a1be <lif_newdir+0x26a>
   1a01e:	61 14       	cp	r6, r1
   1a020:	71 04       	cpc	r7, r1
   1a022:	09 f4       	brne	.+2      	; 0x1a026 <lif_newdir+0xd2>
   1a024:	c3 c0       	rjmp	.+390    	; 0x1a1ac <lif_newdir+0x258>
   1a026:	9f ef       	ldi	r25, 0xFF	; 255
   1a028:	49 1a       	sub	r4, r25
   1a02a:	59 0a       	sbc	r5, r25
   1a02c:	82 01       	movw	r16, r4
   1a02e:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a030:	11 09       	sbc	r17, r1
   1a032:	b8 01       	movw	r22, r16
   1a034:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a036:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a038:	7b da       	rcall	.-2826   	; 0x19530 <lif_readdirindex>
   1a03a:	89 2b       	or	r24, r25
   1a03c:	29 f7       	brne	.-54     	; 0x1a008 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a03e:	e9 c0       	rjmp	.+466    	; 0x1a212 <lif_newdir+0x2be>
   1a040:	22 e0       	ldi	r18, 0x02	; 2
   1a042:	62 16       	cp	r6, r18
   1a044:	71 04       	cpc	r7, r1
   1a046:	09 f0       	breq	.+2      	; 0x1a04a <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a048:	46 c0       	rjmp	.+140    	; 0x1a0d6 <lif_newdir+0x182>
   1a04a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a04c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a04e:	0e 94 e7 c5 	call	0x18bce	; 0x18bce <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a052:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a054:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a056:	e4 5a       	subi	r30, 0xA4	; 164
   1a058:	ff 4f       	sbci	r31, 0xFF	; 255
   1a05a:	8f 81       	ldd	r24, Y+7	; 0x07
   1a05c:	80 83       	st	Z, r24
   1a05e:	98 85       	ldd	r25, Y+8	; 0x08
   1a060:	91 83       	std	Z+1, r25	; 0x01
   1a062:	29 85       	ldd	r18, Y+9	; 0x09
   1a064:	22 83       	std	Z+2, r18	; 0x02
   1a066:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1a068:	83 83       	std	Z+3, r24	; 0x03
   1a06a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a06c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a06e:	e0 5a       	subi	r30, 0xA0	; 160
   1a070:	ff 4f       	sbci	r31, 0xFF	; 255
   1a072:	c0 82       	st	Z, r12
   1a074:	d1 82       	std	Z+1, r13	; 0x01
   1a076:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1a078:	f3 82       	std	Z+3, r15	; 0x03
   1a07a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a07c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a07e:	84 89       	ldd	r24, Z+20	; 0x14
   1a080:	95 89       	ldd	r25, Z+21	; 0x15
   1a082:	a6 89       	ldd	r26, Z+22	; 0x16
   1a084:	b7 89       	ldd	r27, Z+23	; 0x17
   1a086:	8c 0d       	add	r24, r12
   1a088:	9d 1d       	adc	r25, r13
   1a08a:	ae 1d       	adc	r26, r14
   1a08c:	bf 1d       	adc	r27, r15
   1a08e:	84 8b       	std	Z+20, r24	; 0x14
   1a090:	95 8b       	std	Z+21, r25	; 0x15
   1a092:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a094:	b7 8b       	std	Z+23, r27	; 0x17
   1a096:	80 8d       	ldd	r24, Z+24	; 0x18
   1a098:	91 8d       	ldd	r25, Z+25	; 0x19
   1a09a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a09c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a09e:	8c 19       	sub	r24, r12
   1a0a0:	9d 09       	sbc	r25, r13
   1a0a2:	ae 09       	sbc	r26, r14
   1a0a4:	bf 09       	sbc	r27, r15
   1a0a6:	80 8f       	std	Z+24, r24	; 0x18
   1a0a8:	91 8f       	std	Z+25, r25	; 0x19
   1a0aa:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a0ac:	b3 8f       	std	Z+27, r27	; 0x1b
   1a0ae:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a0b0:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a0b2:	01 96       	adiw	r24, 0x01	; 1
   1a0b4:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a0b6:	84 8f       	std	Z+28, r24	; 0x1c
   1a0b8:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a0ba:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a0bc:	01 97       	sbiw	r24, 0x01	; 1
   1a0be:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a0c0:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a0c2:	20 a2       	std	Z+32, r2	; 0x20
   1a0c4:	31 a2       	std	Z+33, r3	; 0x21
   1a0c6:	b1 01       	movw	r22, r2
   1a0c8:	cf 01       	movw	r24, r30
   1a0ca:	9b da       	rcall	.-2762   	; 0x19602 <lif_writedirindex>
   1a0cc:	89 2b       	or	r24, r25
   1a0ce:	09 f4       	brne	.+2      	; 0x1a0d2 <lif_newdir+0x17e>
   1a0d0:	a0 c0       	rjmp	.+320    	; 0x1a212 <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a0d2:	c1 01       	movw	r24, r2
   1a0d4:	a0 c0       	rjmp	.+320    	; 0x1a216 <lif_newdir+0x2c2>
   1a0d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a0da:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a0de:	92 ff       	sbrs	r25, 2
   1a0e0:	20 c0       	rjmp	.+64     	; 0x1a122 <lif_newdir+0x1ce>
   1a0e2:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a0e4:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a0e6:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a0e8:	8f 93       	push	r24
   1a0ea:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a0ec:	8f 93       	push	r24
   1a0ee:	81 8d       	ldd	r24, Z+25	; 0x19
   1a0f0:	8f 93       	push	r24
   1a0f2:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0f4:	8f 93       	push	r24
   1a0f6:	ff 92       	push	r15
   1a0f8:	ef 92       	push	r14
   1a0fa:	df 92       	push	r13
   1a0fc:	cf 92       	push	r12
   1a0fe:	bf 92       	push	r11
   1a100:	af 92       	push	r10
   1a102:	9f 92       	push	r9
   1a104:	8f 92       	push	r8
   1a106:	1f 93       	push	r17
   1a108:	0f 93       	push	r16
   1a10a:	84 ef       	ldi	r24, 0xF4	; 244
   1a10c:	9b e3       	ldi	r25, 0x3B	; 59
   1a10e:	1f 92       	push	r1
   1a110:	9f 93       	push	r25
   1a112:	8f 93       	push	r24
   1a114:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a118:	0f b6       	in	r0, 0x3f	; 63
   1a11a:	f8 94       	cli
   1a11c:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a11e:	0f be       	out	0x3f, r0	; 63
   1a120:	cd bf       	out	0x3d, r28	; 61
   1a122:	b8 01       	movw	r22, r16
   1a124:	6f 5f       	subi	r22, 0xFF	; 255
   1a126:	7f 4f       	sbci	r23, 0xFF	; 255
   1a128:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a12a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a12c:	c6 da       	rcall	.-2676   	; 0x196ba <lif_writedirEOF>
   1a12e:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a130:	09 f4       	brne	.+2      	; 0x1a134 <lif_newdir+0x1e0>
   1a132:	6f c0       	rjmp	.+222    	; 0x1a212 <lif_newdir+0x2be>
   1a134:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a136:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1a138:	0e 94 e7 c5 	call	0x18bce	; 0x18bce <lif_dir_clear>
   1a13c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a13e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a140:	e4 5a       	subi	r30, 0xA4	; 164
   1a142:	ff 4f       	sbci	r31, 0xFF	; 255
   1a144:	80 82       	st	Z, r8
   1a146:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a148:	a2 82       	std	Z+2, r10	; 0x02
   1a14a:	b3 82       	std	Z+3, r11	; 0x03
   1a14c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a14e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a150:	e0 5a       	subi	r30, 0xA0	; 160
   1a152:	ff 4f       	sbci	r31, 0xFF	; 255
   1a154:	c0 82       	st	Z, r12
   1a156:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1a158:	e2 82       	std	Z+2, r14	; 0x02
   1a15a:	f3 82       	std	Z+3, r15	; 0x03
   1a15c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a15e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a160:	84 89       	ldd	r24, Z+20	; 0x14
   1a162:	95 89       	ldd	r25, Z+21	; 0x15
   1a164:	a6 89       	ldd	r26, Z+22	; 0x16
   1a166:	b7 89       	ldd	r27, Z+23	; 0x17
   1a168:	8c 0d       	add	r24, r12
   1a16a:	9d 1d       	adc	r25, r13
   1a16c:	ae 1d       	adc	r26, r14
   1a16e:	bf 1d       	adc	r27, r15
   1a170:	84 8b       	std	Z+20, r24	; 0x14
   1a172:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a174:	a6 8b       	std	Z+22, r26	; 0x16
   1a176:	b7 8b       	std	Z+23, r27	; 0x17
   1a178:	80 8d       	ldd	r24, Z+24	; 0x18
   1a17a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a17c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a17e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a180:	8c 19       	sub	r24, r12
   1a182:	9d 09       	sbc	r25, r13
   1a184:	ae 09       	sbc	r26, r14
   1a186:	bf 09       	sbc	r27, r15
   1a188:	80 8f       	std	Z+24, r24	; 0x18
   1a18a:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a18c:	a2 8f       	std	Z+26, r26	; 0x1a
   1a18e:	b3 8f       	std	Z+27, r27	; 0x1b
   1a190:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a192:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a194:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a196:	95 8f       	std	Z+29, r25	; 0x1d
   1a198:	84 8f       	std	Z+28, r24	; 0x1c
   1a19a:	11 a3       	std	Z+33, r17	; 0x21
   1a19c:	00 a3       	std	Z+32, r16	; 0x20
   1a19e:	b8 01       	movw	r22, r16
   1a1a0:	cf 01       	movw	r24, r30
   1a1a2:	2f da       	rcall	.-2978   	; 0x19602 <lif_writedirindex>
   1a1a4:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a1a6:	a9 f1       	breq	.+106    	; 0x1a212 <lif_newdir+0x2be>
   1a1a8:	c8 01       	movw	r24, r16
   1a1aa:	35 c0       	rjmp	.+106    	; 0x1a216 <lif_newdir+0x2c2>
   1a1ac:	8f 82       	std	Y+7, r8	; 0x07
   1a1ae:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a1b0:	a9 86       	std	Y+9, r10	; 0x09
   1a1b2:	ba 86       	std	Y+10, r11	; 0x0a
   1a1b4:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a1b6:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a1b8:	63 94       	inc	r6
   1a1ba:	71 2c       	mov	r7, r1
   1a1bc:	34 cf       	rjmp	.-408    	; 0x1a026 <lif_newdir+0xd2>
   1a1be:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a1c0:	6f 16       	cp	r6, r31
   1a1c2:	71 04       	cpc	r7, r1
   1a1c4:	a9 f4       	brne	.+42     	; 0x1a1f0 <lif_newdir+0x29c>
   1a1c6:	e9 81       	ldd	r30, Y+1	; 0x01
   1a1c8:	fa 81       	ldd	r31, Y+2	; 0x02
   1a1ca:	80 81       	ld	r24, Z
   1a1cc:	91 81       	ldd	r25, Z+1	; 0x01
   1a1ce:	a2 81       	ldd	r26, Z+2	; 0x02
   1a1d0:	b3 81       	ldd	r27, Z+3	; 0x03
   1a1d2:	88 19       	sub	r24, r8
   1a1d4:	99 09       	sbc	r25, r9
   1a1d6:	aa 09       	sbc	r26, r10
   1a1d8:	bb 09       	sbc	r27, r11
   1a1da:	8c 15       	cp	r24, r12
   1a1dc:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a1de:	ae 05       	cpc	r26, r14
   1a1e0:	bf 05       	cpc	r27, r15
   1a1e2:	1c f4       	brge	.+6      	; 0x1a1ea <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a1e4:	61 2c       	mov	r6, r1
   1a1e6:	71 2c       	mov	r7, r1
   1a1e8:	03 c0       	rjmp	.+6      	; 0x1a1f0 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a1ea:	82 e0       	ldi	r24, 0x02	; 2
   1a1ec:	68 2e       	mov	r6, r24
   1a1ee:	71 2c       	mov	r7, r1
   1a1f0:	e9 81       	ldd	r30, Y+1	; 0x01
   1a1f2:	fa 81       	ldd	r31, Y+2	; 0x02
   1a1f4:	80 80       	ld	r8, Z
   1a1f6:	91 80       	ldd	r9, Z+1	; 0x01
   1a1f8:	a2 80       	ldd	r10, Z+2	; 0x02
   1a1fa:	b3 80       	ldd	r11, Z+3	; 0x03
   1a1fc:	ed 81       	ldd	r30, Y+5	; 0x05
   1a1fe:	fe 81       	ldd	r31, Y+6	; 0x06
   1a200:	80 81       	ld	r24, Z
   1a202:	91 81       	ldd	r25, Z+1	; 0x01
   1a204:	a2 81       	ldd	r26, Z+2	; 0x02
   1a206:	b3 81       	ldd	r27, Z+3	; 0x03
   1a208:	88 0e       	add	r8, r24
   1a20a:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a20c:	aa 1e       	adc	r10, r26
   1a20e:	bb 1e       	adc	r11, r27
}
   1a210:	0a cf       	rjmp	.-492    	; 0x1a026 <lif_newdir+0xd2>
   1a212:	8f ef       	ldi	r24, 0xFF	; 255
   1a214:	9f ef       	ldi	r25, 0xFF	; 255
   1a216:	2c 96       	adiw	r28, 0x0c	; 12
   1a218:	e2 e1       	ldi	r30, 0x12	; 18
   1a21a:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001a21e <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a21e:	a0 e3       	ldi	r26, 0x30	; 48
   1a220:	b1 e0       	ldi	r27, 0x01	; 1
   1a222:	e5 e1       	ldi	r30, 0x15	; 21
   1a224:	f1 ed       	ldi	r31, 0xD1	; 209
   1a226:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   1a22a:	b8 2e       	mov	r11, r24
   1a22c:	a9 2e       	mov	r10, r25
   1a22e:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a230:	be 01       	movw	r22, r28
   1a232:	6f 5f       	subi	r22, 0xFF	; 255
   1a234:	7e 4f       	sbci	r23, 0xFE	; 254
   1a236:	0e 94 21 c1 	call	0x18242	; 0x18242 <lif_stat>
   1a23a:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1a23c:	00 97       	sbiw	r24, 0x00	; 0
   1a23e:	09 f1       	breq	.+66     	; 0x1a282 <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a240:	fc 01       	movw	r30, r24
   1a242:	80 8d       	ldd	r24, Z+24	; 0x18
   1a244:	91 8d       	ldd	r25, Z+25	; 0x19
   1a246:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a248:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a24a:	81 15       	cp	r24, r1
   1a24c:	f2 e0       	ldi	r31, 0x02	; 2
   1a24e:	9f 07       	cpc	r25, r31
   1a250:	a1 05       	cpc	r26, r1
   1a252:	b1 05       	cpc	r27, r1
   1a254:	c8 f4       	brcc	.+50     	; 0x1a288 <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1a256:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a25a:	20 ff       	sbrs	r18, 0
   1a25c:	12 c0       	rjmp	.+36     	; 0x1a282 <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a25e:	bf 93       	push	r27
   1a260:	af 93       	push	r26
   1a262:	9f 93       	push	r25
   1a264:	8f 93       	push	r24
   1a266:	af 92       	push	r10
   1a268:	bf 92       	push	r11
   1a26a:	85 eb       	ldi	r24, 0xB5	; 181
   1a26c:	9b e3       	ldi	r25, 0x3B	; 59
   1a26e:	1f 92       	push	r1
   1a270:	9f 93       	push	r25
   1a272:	8f 93       	push	r24
   1a274:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a278:	0f b6       	in	r0, 0x3f	; 63
   1a27a:	f8 94       	cli
   1a27c:	de bf       	out	0x3e, r29	; 62
   1a27e:	0f be       	out	0x3f, r0	; 63
   1a280:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1a282:	00 e0       	ldi	r16, 0x00	; 0
   1a284:	10 e0       	ldi	r17, 0x00	; 0
   1a286:	c5 c0       	rjmp	.+394    	; 0x1a412 <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a288:	64 e7       	ldi	r22, 0x74	; 116
   1a28a:	70 e0       	ldi	r23, 0x00	; 0
   1a28c:	80 e0       	ldi	r24, 0x00	; 0
   1a28e:	90 e0       	ldi	r25, 0x00	; 0
   1a290:	0e 94 9e c0 	call	0x1813c	; 0x1813c <lif_calloc>
   1a294:	7c 01       	movw	r14, r24
    if(!LIF)
   1a296:	89 2b       	or	r24, r25
   1a298:	a1 f3       	breq	.-24     	; 0x1a282 <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a29a:	8b 2d       	mov	r24, r11
   1a29c:	9a 2d       	mov	r25, r10
   1a29e:	0e 94 da c0 	call	0x181b4	; 0x181b4 <lif_stralloc>
   1a2a2:	f7 01       	movw	r30, r14
   1a2a4:	91 83       	std	Z+1, r25	; 0x01
   1a2a6:	80 83       	st	Z, r24
    if(!LIF->name)
   1a2a8:	00 97       	sbiw	r24, 0x00	; 0
   1a2aa:	09 f4       	brne	.+2      	; 0x1a2ae <lif_open_volume+0x90>
   1a2ac:	5a c0       	rjmp	.+180    	; 0x1a362 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a2ae:	f8 01       	movw	r30, r16
   1a2b0:	00 8d       	ldd	r16, Z+24	; 0x18
   1a2b2:	11 8d       	ldd	r17, Z+25	; 0x19
   1a2b4:	22 8d       	ldd	r18, Z+26	; 0x1a
   1a2b6:	33 8d       	ldd	r19, Z+27	; 0x1b
   1a2b8:	f7 01       	movw	r30, r14
   1a2ba:	00 87       	std	Z+8, r16	; 0x08
   1a2bc:	11 87       	std	Z+9, r17	; 0x09
   1a2be:	22 87       	std	Z+10, r18	; 0x0a
   1a2c0:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a2c2:	77 27       	eor	r23, r23
   1a2c4:	63 2f       	mov	r22, r19
   1a2c6:	52 2f       	mov	r21, r18
   1a2c8:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a2ca:	00 23       	and	r16, r16
   1a2cc:	21 f0       	breq	.+8      	; 0x1a2d6 <lif_open_volume+0xb8>
        ++sectors;
   1a2ce:	4f 5f       	subi	r20, 0xFF	; 255
   1a2d0:	5f 4f       	sbci	r21, 0xFF	; 255
   1a2d2:	6f 4f       	sbci	r22, 0xFF	; 255
   1a2d4:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a2d6:	f7 01       	movw	r30, r14
   1a2d8:	44 83       	std	Z+4, r20	; 0x04
   1a2da:	55 83       	std	Z+5, r21	; 0x05
   1a2dc:	66 83       	std	Z+6, r22	; 0x06
   1a2de:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a2e0:	b6 01       	movw	r22, r12
   1a2e2:	0e 94 f9 c0 	call	0x181f2	; 0x181f2 <lif_open>
   1a2e6:	f7 01       	movw	r30, r14
   1a2e8:	93 83       	std	Z+3, r25	; 0x03
   1a2ea:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a2ec:	89 2b       	or	r24, r25
   1a2ee:	c9 f1       	breq	.+114    	; 0x1a362 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a2f0:	00 e0       	ldi	r16, 0x00	; 0
   1a2f2:	11 e0       	ldi	r17, 0x01	; 1
   1a2f4:	20 e0       	ldi	r18, 0x00	; 0
   1a2f6:	30 e0       	ldi	r19, 0x00	; 0
   1a2f8:	a9 01       	movw	r20, r18
   1a2fa:	be 01       	movw	r22, r28
   1a2fc:	6f 5f       	subi	r22, 0xFF	; 255
   1a2fe:	7f 4f       	sbci	r23, 0xFF	; 255
   1a300:	c7 01       	movw	r24, r14
   1a302:	0e 94 7f c1 	call	0x182fe	; 0x182fe <lif_read>
   1a306:	6f 3f       	cpi	r22, 0xFF	; 255
   1a308:	71 05       	cpc	r23, r1
   1a30a:	81 05       	cpc	r24, r1
   1a30c:	91 05       	cpc	r25, r1
   1a30e:	09 f0       	breq	.+2      	; 0x1a312 <lif_open_volume+0xf4>
   1a310:	4c f4       	brge	.+18     	; 0x1a324 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1a312:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a316:	80 ff       	sbrs	r24, 0
   1a318:	24 c0       	rjmp	.+72     	; 0x1a362 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a31a:	af 92       	push	r10
   1a31c:	bf 92       	push	r11
   1a31e:	8f e7       	ldi	r24, 0x7F	; 127
   1a320:	9b e3       	ldi	r25, 0x3B	; 59
   1a322:	15 c0       	rjmp	.+42     	; 0x1a34e <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a324:	b7 01       	movw	r22, r14
   1a326:	ce 01       	movw	r24, r28
   1a328:	01 96       	adiw	r24, 0x01	; 1
   1a32a:	0e 94 9a c3 	call	0x18734	; 0x18734 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a32e:	c7 01       	movw	r24, r14
   1a330:	0e 94 89 c7 	call	0x18f12	; 0x18f12 <lif_check_volume>
   1a334:	89 2b       	or	r24, r25
   1a336:	c1 f4       	brne	.+48     	; 0x1a368 <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1a338:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a33c:	80 ff       	sbrs	r24, 0
   1a33e:	11 c0       	rjmp	.+34     	; 0x1a362 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a340:	f7 01       	movw	r30, r14
   1a342:	81 81       	ldd	r24, Z+1	; 0x01
   1a344:	8f 93       	push	r24
   1a346:	80 81       	ld	r24, Z
   1a348:	8f 93       	push	r24
   1a34a:	8c e4       	ldi	r24, 0x4C	; 76
   1a34c:	9b e3       	ldi	r25, 0x3B	; 59
   1a34e:	1f 92       	push	r1
   1a350:	9f 93       	push	r25
   1a352:	8f 93       	push	r24
   1a354:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a358:	0f 90       	pop	r0
   1a35a:	0f 90       	pop	r0
   1a35c:	0f 90       	pop	r0
   1a35e:	0f 90       	pop	r0
   1a360:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a362:	c7 01       	movw	r24, r14
   1a364:	64 d8       	rcall	.-3896   	; 0x1942e <lif_close_volume>
   1a366:	8d cf       	rjmp	.-230    	; 0x1a282 <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a368:	f7 01       	movw	r30, r14
   1a36a:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a36c:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a36e:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a370:	70 a9       	ldd	r23, Z+48	; 0x30
   1a372:	85 a9       	ldd	r24, Z+53	; 0x35
   1a374:	96 a9       	ldd	r25, Z+54	; 0x36
   1a376:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a378:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a37a:	48 0f       	add	r20, r24
   1a37c:	59 1f       	adc	r21, r25
   1a37e:	6a 1f       	adc	r22, r26
   1a380:	7b 1f       	adc	r23, r27
   1a382:	44 87       	std	Z+12, r20	; 0x0c
   1a384:	55 87       	std	Z+13, r21	; 0x0d
   1a386:	66 87       	std	Z+14, r22	; 0x0e
   1a388:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a38a:	84 81       	ldd	r24, Z+4	; 0x04
   1a38c:	95 81       	ldd	r25, Z+5	; 0x05
   1a38e:	a6 81       	ldd	r26, Z+6	; 0x06
   1a390:	b7 81       	ldd	r27, Z+7	; 0x07
   1a392:	84 1b       	sub	r24, r20
   1a394:	95 0b       	sbc	r25, r21
   1a396:	a6 0b       	sbc	r26, r22
   1a398:	b7 0b       	sbc	r27, r23
   1a39a:	80 8b       	std	Z+16, r24	; 0x10
   1a39c:	91 8b       	std	Z+17, r25	; 0x11
   1a39e:	a2 8b       	std	Z+18, r26	; 0x12
   1a3a0:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a3a2:	80 8f       	std	Z+24, r24	; 0x18
   1a3a4:	91 8f       	std	Z+25, r25	; 0x19
   1a3a6:	a2 8f       	std	Z+26, r26	; 0x1a
   1a3a8:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a3aa:	14 8a       	std	Z+20, r1	; 0x14
   1a3ac:	15 8a       	std	Z+21, r1	; 0x15
   1a3ae:	16 8a       	std	Z+22, r1	; 0x16
   1a3b0:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a3b2:	17 8e       	std	Z+31, r1	; 0x1f
   1a3b4:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a3b6:	15 8e       	std	Z+29, r1	; 0x1d
   1a3b8:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a3ba:	11 a2       	std	Z+33, r1	; 0x21
   1a3bc:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a3be:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a3c0:	12 a2       	std	Z+34, r1	; 0x22
   1a3c2:	c7 01       	movw	r24, r14
   1a3c4:	92 d9       	rcall	.-3292   	; 0x196ea <lif_updatefree>
   1a3c6:	8c 01       	movw	r16, r24
   1a3c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a3cc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a3d0:	01 15       	cp	r16, r1
   1a3d2:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a3d4:	b1 f4       	brne	.+44     	; 0x1a402 <lif_open_volume+0x1e4>
   1a3d6:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a3d8:	11 c0       	rjmp	.+34     	; 0x1a3fc <lif_open_volume+0x1de>
   1a3da:	f7 01       	movw	r30, r14
   1a3dc:	81 81       	ldd	r24, Z+1	; 0x01
   1a3de:	8f 93       	push	r24
   1a3e0:	80 81       	ld	r24, Z
   1a3e2:	8f 93       	push	r24
   1a3e4:	89 e1       	ldi	r24, 0x19	; 25
   1a3e6:	9b e3       	ldi	r25, 0x3B	; 59
   1a3e8:	1f 92       	push	r1
   1a3ea:	9f 93       	push	r25
   1a3ec:	8f 93       	push	r24
   1a3ee:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a3f2:	0f 90       	pop	r0
   1a3f4:	0f 90       	pop	r0
   1a3f6:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a3f8:	0f 90       	pop	r0
   1a3fa:	0f 90       	pop	r0
   1a3fc:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a3fe:	17 d8       	rcall	.-4050   	; 0x1942e <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a400:	08 c0       	rjmp	.+16     	; 0x1a412 <lif_open_volume+0x1f4>
   1a402:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a404:	05 c0       	rjmp	.+10     	; 0x1a410 <lif_open_volume+0x1f2>
   1a406:	6d ed       	ldi	r22, 0xDD	; 221
   1a408:	75 e1       	ldi	r23, 0x15	; 21
   1a40a:	c7 01       	movw	r24, r14
   1a40c:	0e 94 f6 c5 	call	0x18bec	; 0x18bec <lif_dump_vol>
    return( LIF );
}
   1a410:	87 01       	movw	r16, r14
   1a412:	c8 01       	movw	r24, r16
   1a414:	c0 5d       	subi	r28, 0xD0	; 208
   1a416:	de 4f       	sbci	r29, 0xFE	; 254
   1a418:	ea e0       	ldi	r30, 0x0A	; 10
   1a41a:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0001a41e <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a41e:	a1 e1       	ldi	r26, 0x11	; 17
   1a420:	b0 e0       	ldi	r27, 0x00	; 0
   1a422:	e5 e1       	ldi	r30, 0x15	; 21
   1a424:	f2 ed       	ldi	r31, 0xD2	; 210
   1a426:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a42a:	62 e9       	ldi	r22, 0x92	; 146
   1a42c:	78 e0       	ldi	r23, 0x08	; 8
   1a42e:	f7 de       	rcall	.-530    	; 0x1a21e <lif_open_volume>
   1a430:	99 8b       	std	Y+17, r25	; 0x11
   1a432:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1a434:	00 97       	sbiw	r24, 0x00	; 0
   1a436:	09 f4       	brne	.+2      	; 0x1a43a <lif_dir+0x1c>
   1a438:	82 c1       	rjmp	.+772    	; 0x1a73e <lif_dir+0x320>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a43a:	fc 01       	movw	r30, r24
   1a43c:	86 a1       	ldd	r24, Z+38	; 0x26
   1a43e:	88 23       	and	r24, r24
   1a440:	21 f0       	breq	.+8      	; 0x1a44a <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a442:	8f 01       	movw	r16, r30
   1a444:	0a 5d       	subi	r16, 0xDA	; 218
   1a446:	1f 4f       	sbci	r17, 0xFF	; 255
   1a448:	02 c0       	rjmp	.+4      	; 0x1a44e <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1a44a:	0f e8       	ldi	r16, 0x8F	; 143
   1a44c:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a44e:	88 89       	ldd	r24, Y+16	; 0x10
   1a450:	99 89       	ldd	r25, Y+17	; 0x11
   1a452:	87 5b       	subi	r24, 0xB7	; 183
   1a454:	9f 4f       	sbci	r25, 0xFF	; 255
   1a456:	0e 94 ba c5 	call	0x18b74	; 0x18b74 <lif_lifbcd2timestr>
   1a45a:	9f 93       	push	r25
   1a45c:	8f 93       	push	r24
   1a45e:	1f 93       	push	r17
   1a460:	0f 93       	push	r16
   1a462:	82 e0       	ldi	r24, 0x02	; 2
   1a464:	9b e3       	ldi	r25, 0x3B	; 59
   1a466:	1f 92       	push	r1
   1a468:	9f 93       	push	r25
   1a46a:	8f 93       	push	r24
   1a46c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a470:	82 ec       	ldi	r24, 0xC2	; 194
   1a472:	9a e3       	ldi	r25, 0x3A	; 58
   1a474:	1f 92       	push	r1
   1a476:	9f 93       	push	r25
   1a478:	8f 93       	push	r24
   1a47a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a47e:	0f b6       	in	r0, 0x3f	; 63
   1a480:	f8 94       	cli
   1a482:	de bf       	out	0x3e, r29	; 62
   1a484:	0f be       	out	0x3f, r0	; 63
   1a486:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a488:	60 e2       	ldi	r22, 0x20	; 32
   1a48a:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a48c:	00 e0       	ldi	r16, 0x00	; 0
   1a48e:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a490:	88 89       	ldd	r24, Y+16	; 0x10
   1a492:	99 89       	ldd	r25, Y+17	; 0x11
   1a494:	86 5a       	subi	r24, 0xA6	; 166
   1a496:	9f 4f       	sbci	r25, 0xFF	; 255
   1a498:	9c 83       	std	Y+4, r25	; 0x04
   1a49a:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a49c:	e8 89       	ldd	r30, Y+16	; 0x10
   1a49e:	f9 89       	ldd	r31, Y+17	; 0x11
   1a4a0:	e0 5a       	subi	r30, 0xA0	; 160
   1a4a2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4a4:	fb 87       	std	Y+11, r31	; 0x0b
   1a4a6:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a4a8:	28 89       	ldd	r18, Y+16	; 0x10
   1a4aa:	39 89       	ldd	r19, Y+17	; 0x11
   1a4ac:	24 59       	subi	r18, 0x94	; 148
   1a4ae:	3f 4f       	sbci	r19, 0xFF	; 255
   1a4b0:	3d 87       	std	Y+13, r19	; 0x0d
   1a4b2:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a4b4:	88 89       	ldd	r24, Y+16	; 0x10
   1a4b6:	99 89       	ldd	r25, Y+17	; 0x11
   1a4b8:	81 5b       	subi	r24, 0xB1	; 177
   1a4ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1a4bc:	9a 83       	std	Y+2, r25	; 0x02
   1a4be:	89 83       	std	Y+1, r24	; 0x01
   1a4c0:	86 e7       	ldi	r24, 0x76	; 118
   1a4c2:	9a e3       	ldi	r25, 0x3A	; 58
   1a4c4:	3c 01       	movw	r6, r24
   1a4c6:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a4c8:	e8 89       	ldd	r30, Y+16	; 0x10
   1a4ca:	f9 89       	ldd	r31, Y+17	; 0x11
   1a4cc:	ec 59       	subi	r30, 0x9C	; 156
   1a4ce:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4d0:	ff 87       	std	Y+15, r31	; 0x0f
   1a4d2:	ee 87       	std	Y+14, r30	; 0x0e
   1a4d4:	28 89       	ldd	r18, Y+16	; 0x10
   1a4d6:	39 89       	ldd	r19, Y+17	; 0x11
   1a4d8:	22 59       	subi	r18, 0x92	; 146
   1a4da:	3f 4f       	sbci	r19, 0xFF	; 255
   1a4dc:	3e 83       	std	Y+6, r19	; 0x06
   1a4de:	2d 83       	std	Y+5, r18	; 0x05
   1a4e0:	a8 88       	ldd	r10, Y+16	; 0x10
   1a4e2:	b9 88       	ldd	r11, Y+17	; 0x11
   1a4e4:	3c e5       	ldi	r19, 0x5C	; 92
   1a4e6:	a3 0e       	add	r10, r19
   1a4e8:	b1 1c       	adc	r11, r1
   1a4ea:	86 e4       	ldi	r24, 0x46	; 70
   1a4ec:	9a e3       	ldi	r25, 0x3A	; 58
   1a4ee:	9c 01       	movw	r18, r24
   1a4f0:	40 e0       	ldi	r20, 0x00	; 0
   1a4f2:	2f 83       	std	Y+7, r18	; 0x07
   1a4f4:	38 87       	std	Y+8, r19	; 0x08
   1a4f6:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a4f8:	b8 01       	movw	r22, r16
   1a4fa:	88 89       	ldd	r24, Y+16	; 0x10
   1a4fc:	99 89       	ldd	r25, Y+17	; 0x11
   1a4fe:	18 d8       	rcall	.-4048   	; 0x19530 <lif_readdirindex>
   1a500:	89 2b       	or	r24, r25
   1a502:	09 f4       	brne	.+2      	; 0x1a506 <lif_dir+0xe8>
   1a504:	9d c0       	rjmp	.+314    	; 0x1a640 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a506:	eb 81       	ldd	r30, Y+3	; 0x03
   1a508:	fc 81       	ldd	r31, Y+4	; 0x04
   1a50a:	20 81       	ld	r18, Z
   1a50c:	31 81       	ldd	r19, Z+1	; 0x01
   1a50e:	2f 3f       	cpi	r18, 0xFF	; 255
   1a510:	ff ef       	ldi	r31, 0xFF	; 255
   1a512:	3f 07       	cpc	r19, r31
   1a514:	09 f4       	brne	.+2      	; 0x1a518 <lif_dir+0xfa>
   1a516:	94 c0       	rjmp	.+296    	; 0x1a640 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a518:	ea 85       	ldd	r30, Y+10	; 0x0a
   1a51a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1a51c:	80 81       	ld	r24, Z
   1a51e:	91 81       	ldd	r25, Z+1	; 0x01
   1a520:	a2 81       	ldd	r26, Z+2	; 0x02
   1a522:	b3 81       	ldd	r27, Z+3	; 0x03
   1a524:	cc 24       	eor	r12, r12
   1a526:	d8 2e       	mov	r13, r24
   1a528:	e9 2e       	mov	r14, r25
   1a52a:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a52c:	2c 7f       	andi	r18, 0xFC	; 252
   1a52e:	20 31       	cpi	r18, 0x10	; 16
   1a530:	30 4e       	sbci	r19, 0xE0	; 224
   1a532:	09 f0       	breq	.+2      	; 0x1a536 <lif_dir+0x118>
   1a534:	4b c0       	rjmp	.+150    	; 0x1a5cc <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a536:	ec 85       	ldd	r30, Y+12	; 0x0c
   1a538:	fd 85       	ldd	r31, Y+13	; 0x0d
   1a53a:	20 81       	ld	r18, Z
   1a53c:	31 81       	ldd	r19, Z+1	; 0x01
   1a53e:	21 15       	cp	r18, r1
   1a540:	31 05       	cpc	r19, r1
   1a542:	a9 f0       	breq	.+42     	; 0x1a56e <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a544:	19 01       	movw	r2, r18
   1a546:	41 2c       	mov	r4, r1
   1a548:	51 2c       	mov	r5, r1
   1a54a:	77 27       	eor	r23, r23
   1a54c:	65 2d       	mov	r22, r5
   1a54e:	54 2d       	mov	r21, r4
   1a550:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a552:	22 23       	and	r18, r18
   1a554:	21 f0       	breq	.+8      	; 0x1a55e <lif_dir+0x140>
        ++sectors;
   1a556:	4f 5f       	subi	r20, 0xFF	; 255
   1a558:	5f 4f       	sbci	r21, 0xFF	; 255
   1a55a:	6f 4f       	sbci	r22, 0xFF	; 255
   1a55c:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a55e:	84 17       	cp	r24, r20
   1a560:	95 07       	cpc	r25, r21
   1a562:	a6 07       	cpc	r26, r22
   1a564:	b7 07       	cpc	r27, r23
   1a566:	19 f4       	brne	.+6      	; 0x1a56e <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1a568:	72 01       	movw	r14, r4
   1a56a:	61 01       	movw	r12, r2
   1a56c:	2f c0       	rjmp	.+94     	; 0x1a5cc <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a56e:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a572:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a576:	52 ff       	sbrs	r21, 2
   1a578:	27 c0       	rjmp	.+78     	; 0x1a5c8 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a57a:	19 01       	movw	r2, r18
   1a57c:	41 2c       	mov	r4, r1
   1a57e:	51 2c       	mov	r5, r1
   1a580:	77 27       	eor	r23, r23
   1a582:	65 2d       	mov	r22, r5
   1a584:	54 2d       	mov	r21, r4
   1a586:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a588:	22 23       	and	r18, r18
   1a58a:	21 f0       	breq	.+8      	; 0x1a594 <lif_dir+0x176>
        ++sectors;
   1a58c:	4f 5f       	subi	r20, 0xFF	; 255
   1a58e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a590:	6f 4f       	sbci	r22, 0xFF	; 255
   1a592:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a594:	bf 93       	push	r27
   1a596:	af 93       	push	r26
   1a598:	9f 93       	push	r25
   1a59a:	8f 93       	push	r24
   1a59c:	7f 93       	push	r23
   1a59e:	6f 93       	push	r22
   1a5a0:	5f 93       	push	r21
   1a5a2:	4f 93       	push	r20
   1a5a4:	1f 92       	push	r1
   1a5a6:	1f 92       	push	r1
   1a5a8:	3f 92       	push	r3
   1a5aa:	2f 92       	push	r2
   1a5ac:	fa 81       	ldd	r31, Y+2	; 0x02
   1a5ae:	ff 93       	push	r31
   1a5b0:	29 81       	ldd	r18, Y+1	; 0x01
   1a5b2:	2f 93       	push	r18
   1a5b4:	1f 92       	push	r1
   1a5b6:	7f 92       	push	r7
   1a5b8:	6f 92       	push	r6
   1a5ba:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a5be:	0f b6       	in	r0, 0x3f	; 63
   1a5c0:	f8 94       	cli
   1a5c2:	de bf       	out	0x3e, r29	; 62
   1a5c4:	0f be       	out	0x3f, r0	; 63
   1a5c6:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a5c8:	81 e2       	ldi	r24, 0x21	; 33
   1a5ca:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a5cc:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a5ce:	9f 85       	ldd	r25, Y+15	; 0x0f
   1a5d0:	0e 94 ba c5 	call	0x18b74	; 0x18b74 <lif_lifbcd2timestr>
   1a5d4:	ed 81       	ldd	r30, Y+5	; 0x05
   1a5d6:	fe 81       	ldd	r31, Y+6	; 0x06
   1a5d8:	a0 81       	ld	r26, Z
   1a5da:	b1 81       	ldd	r27, Z+1	; 0x01
   1a5dc:	f5 01       	movw	r30, r10
   1a5de:	60 81       	ld	r22, Z
   1a5e0:	71 81       	ldd	r23, Z+1	; 0x01
   1a5e2:	52 80       	ldd	r5, Z+2	; 0x02
   1a5e4:	43 80       	ldd	r4, Z+3	; 0x03
   1a5e6:	eb 81       	ldd	r30, Y+3	; 0x03
   1a5e8:	fc 81       	ldd	r31, Y+4	; 0x04
   1a5ea:	40 81       	ld	r20, Z
   1a5ec:	51 81       	ldd	r21, Z+1	; 0x01
   1a5ee:	41 15       	cp	r20, r1
   1a5f0:	51 05       	cpc	r21, r1
   1a5f2:	19 f0       	breq	.+6      	; 0x1a5fa <lif_dir+0x1dc>
   1a5f4:	29 81       	ldd	r18, Y+1	; 0x01
   1a5f6:	3a 81       	ldd	r19, Y+2	; 0x02
   1a5f8:	02 c0       	rjmp	.+4      	; 0x1a5fe <lif_dir+0x1e0>
   1a5fa:	2c ee       	ldi	r18, 0xEC	; 236
   1a5fc:	35 e1       	ldi	r19, 0x15	; 21
   1a5fe:	9f 93       	push	r25
   1a600:	8f 93       	push	r24
   1a602:	bf 93       	push	r27
   1a604:	af 93       	push	r26
   1a606:	1f 92       	push	r1
   1a608:	9f 92       	push	r9
   1a60a:	ff 92       	push	r15
   1a60c:	ef 92       	push	r14
   1a60e:	df 92       	push	r13
   1a610:	cf 92       	push	r12
   1a612:	4f 92       	push	r4
   1a614:	5f 92       	push	r5
   1a616:	7f 93       	push	r23
   1a618:	6f 93       	push	r22
   1a61a:	5f 93       	push	r21
   1a61c:	4f 93       	push	r20
   1a61e:	3f 93       	push	r19
   1a620:	2f 93       	push	r18
   1a622:	1f 92       	push	r1
   1a624:	f8 85       	ldd	r31, Y+8	; 0x08
   1a626:	ff 93       	push	r31
   1a628:	2f 81       	ldd	r18, Y+7	; 0x07
   1a62a:	2f 93       	push	r18
   1a62c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a630:	0f 5f       	subi	r16, 0xFF	; 255
   1a632:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1a634:	0f b6       	in	r0, 0x3f	; 63
   1a636:	f8 94       	cli
   1a638:	de bf       	out	0x3e, r29	; 62
   1a63a:	0f be       	out	0x3f, r0	; 63
   1a63c:	cd bf       	out	0x3d, r28	; 61
   1a63e:	5c cf       	rjmp	.-328    	; 0x1a4f8 <lif_dir+0xda>

    printf("\n");
   1a640:	84 e4       	ldi	r24, 0x44	; 68
   1a642:	9a e3       	ldi	r25, 0x3A	; 58
   1a644:	1f 92       	push	r1
   1a646:	9f 93       	push	r25
   1a648:	8f 93       	push	r24
   1a64a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a64e:	e8 89       	ldd	r30, Y+16	; 0x10
   1a650:	f9 89       	ldd	r31, Y+17	; 0x11
   1a652:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a654:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a656:	09 2e       	mov	r0, r25
   1a658:	00 0c       	add	r0, r0
   1a65a:	aa 0b       	sbc	r26, r26
   1a65c:	bb 0b       	sbc	r27, r27
   1a65e:	bf 93       	push	r27
   1a660:	af 93       	push	r26
   1a662:	9f 93       	push	r25
   1a664:	8f 93       	push	r24
   1a666:	88 e3       	ldi	r24, 0x38	; 56
   1a668:	9a e3       	ldi	r25, 0x3A	; 58
   1a66a:	1f 92       	push	r1
   1a66c:	9f 93       	push	r25
   1a66e:	8f 93       	push	r24
   1a670:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a674:	e8 89       	ldd	r30, Y+16	; 0x10
   1a676:	f9 89       	ldd	r31, Y+17	; 0x11
   1a678:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a67a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a67c:	09 2e       	mov	r0, r25
   1a67e:	00 0c       	add	r0, r0
   1a680:	aa 0b       	sbc	r26, r26
   1a682:	bb 0b       	sbc	r27, r27
   1a684:	bf 93       	push	r27
   1a686:	af 93       	push	r26
   1a688:	9f 93       	push	r25
   1a68a:	8f 93       	push	r24
   1a68c:	8b e2       	ldi	r24, 0x2B	; 43
   1a68e:	9a e3       	ldi	r25, 0x3A	; 58
   1a690:	1f 92       	push	r1
   1a692:	9f 93       	push	r25
   1a694:	8f 93       	push	r24
   1a696:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a69a:	e8 89       	ldd	r30, Y+16	; 0x10
   1a69c:	f9 89       	ldd	r31, Y+17	; 0x11
   1a69e:	80 a9       	ldd	r24, Z+48	; 0x30
   1a6a0:	8f 93       	push	r24
   1a6a2:	87 a5       	ldd	r24, Z+47	; 0x2f
   1a6a4:	8f 93       	push	r24
   1a6a6:	86 a5       	ldd	r24, Z+46	; 0x2e
   1a6a8:	8f 93       	push	r24
   1a6aa:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a6ac:	8f 93       	push	r24
   1a6ae:	8a e1       	ldi	r24, 0x1A	; 26
   1a6b0:	9a e3       	ldi	r25, 0x3A	; 58
   1a6b2:	1f 92       	push	r1
   1a6b4:	9f 93       	push	r25
   1a6b6:	8f 93       	push	r24
   1a6b8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a6bc:	e8 89       	ldd	r30, Y+16	; 0x10
   1a6be:	f9 89       	ldd	r31, Y+17	; 0x11
   1a6c0:	80 ad       	ldd	r24, Z+56	; 0x38
   1a6c2:	8f 93       	push	r24
   1a6c4:	87 a9       	ldd	r24, Z+55	; 0x37
   1a6c6:	8f 93       	push	r24
   1a6c8:	86 a9       	ldd	r24, Z+54	; 0x36
   1a6ca:	8f 93       	push	r24
   1a6cc:	85 a9       	ldd	r24, Z+53	; 0x35
   1a6ce:	8f 93       	push	r24
   1a6d0:	87 e0       	ldi	r24, 0x07	; 7
   1a6d2:	9a e3       	ldi	r25, 0x3A	; 58
   1a6d4:	1f 92       	push	r1
   1a6d6:	9f 93       	push	r25
   1a6d8:	8f 93       	push	r24
   1a6da:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a6de:	e8 89       	ldd	r30, Y+16	; 0x10
   1a6e0:	f9 89       	ldd	r31, Y+17	; 0x11
   1a6e2:	87 89       	ldd	r24, Z+23	; 0x17
   1a6e4:	8f 93       	push	r24
   1a6e6:	86 89       	ldd	r24, Z+22	; 0x16
   1a6e8:	8f 93       	push	r24
   1a6ea:	85 89       	ldd	r24, Z+21	; 0x15
   1a6ec:	8f 93       	push	r24
   1a6ee:	84 89       	ldd	r24, Z+20	; 0x14
   1a6f0:	8f 93       	push	r24
   1a6f2:	84 ef       	ldi	r24, 0xF4	; 244
   1a6f4:	99 e3       	ldi	r25, 0x39	; 57
   1a6f6:	1f 92       	push	r1
   1a6f8:	9f 93       	push	r25
   1a6fa:	8f 93       	push	r24
   1a6fc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a700:	0f b6       	in	r0, 0x3f	; 63
   1a702:	f8 94       	cli
   1a704:	de bf       	out	0x3e, r29	; 62
   1a706:	0f be       	out	0x3f, r0	; 63
   1a708:	cd bf       	out	0x3d, r28	; 61
   1a70a:	e8 89       	ldd	r30, Y+16	; 0x10
   1a70c:	f9 89       	ldd	r31, Y+17	; 0x11
   1a70e:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a710:	8f 93       	push	r24
   1a712:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a714:	8f 93       	push	r24
   1a716:	81 8d       	ldd	r24, Z+25	; 0x19
   1a718:	8f 93       	push	r24
   1a71a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a71c:	8f 93       	push	r24
   1a71e:	81 ee       	ldi	r24, 0xE1	; 225
   1a720:	99 e3       	ldi	r25, 0x39	; 57
   1a722:	1f 92       	push	r1
   1a724:	9f 93       	push	r25
   1a726:	8f 93       	push	r24
   1a728:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a72c:	88 89       	ldd	r24, Y+16	; 0x10
   1a72e:	99 89       	ldd	r25, Y+17	; 0x11
   1a730:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1a734:	0f b6       	in	r0, 0x3f	; 63
   1a736:	f8 94       	cli
   1a738:	de bf       	out	0x3e, r29	; 62
   1a73a:	0f be       	out	0x3f, r0	; 63
   1a73c:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a73e:	61 96       	adiw	r28, 0x11	; 17
   1a740:	e2 e1       	ldi	r30, 0x12	; 18
   1a742:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001a746 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a746:	a0 e0       	ldi	r26, 0x00	; 0
   1a748:	b0 e0       	ldi	r27, 0x00	; 0
   1a74a:	e9 ea       	ldi	r30, 0xA9	; 169
   1a74c:	f3 ed       	ldi	r31, 0xD3	; 211
   1a74e:	0c 94 31 e4 	jmp	0x1c862	; 0x1c862 <__prologue_saves__+0x10>
   1a752:	7c 01       	movw	r14, r24
   1a754:	16 2f       	mov	r17, r22
   1a756:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1a758:	86 2f       	mov	r24, r22
   1a75a:	97 2f       	mov	r25, r23
   1a75c:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_checkname>
   1a760:	89 2b       	or	r24, r25
   1a762:	49 f4       	brne	.+18     	; 0x1a776 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1a764:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a768:	80 ff       	sbrs	r24, 0
   1a76a:	48 c0       	rjmp	.+144    	; 0x1a7fc <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a76c:	0f 93       	push	r16
   1a76e:	1f 93       	push	r17
   1a770:	8a eb       	ldi	r24, 0xBA	; 186
   1a772:	99 e3       	ldi	r25, 0x39	; 57
   1a774:	13 c0       	rjmp	.+38     	; 0x1a79c <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a776:	a1 2f       	mov	r26, r17
   1a778:	b0 2f       	mov	r27, r16
   1a77a:	fd 01       	movw	r30, r26
   1a77c:	01 90       	ld	r0, Z+
   1a77e:	00 20       	and	r0, r0
   1a780:	e9 f7       	brne	.-6      	; 0x1a77c <lif_find_file+0x36>
   1a782:	31 97       	sbiw	r30, 0x01	; 1
   1a784:	ea 1b       	sub	r30, r26
   1a786:	fb 0b       	sbc	r31, r27
   1a788:	3b 97       	sbiw	r30, 0x0b	; 11
   1a78a:	98 f0       	brcs	.+38     	; 0x1a7b2 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1a78c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a790:	80 ff       	sbrs	r24, 0
   1a792:	34 c0       	rjmp	.+104    	; 0x1a7fc <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a794:	0f 93       	push	r16
   1a796:	1f 93       	push	r17
   1a798:	85 e9       	ldi	r24, 0x95	; 149
   1a79a:	99 e3       	ldi	r25, 0x39	; 57
   1a79c:	1f 92       	push	r1
   1a79e:	9f 93       	push	r25
   1a7a0:	8f 93       	push	r24
   1a7a2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a7a6:	0f 90       	pop	r0
   1a7a8:	0f 90       	pop	r0
   1a7aa:	0f 90       	pop	r0
   1a7ac:	0f 90       	pop	r0
   1a7ae:	0f 90       	pop	r0
   1a7b0:	25 c0       	rjmp	.+74     	; 0x1a7fc <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a7b2:	e1 14       	cp	r14, r1
   1a7b4:	f1 04       	cpc	r15, r1
   1a7b6:	11 f1       	breq	.+68     	; 0x1a7fc <lif_find_file+0xb6>
   1a7b8:	c0 e0       	ldi	r28, 0x00	; 0
   1a7ba:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a7bc:	67 01       	movw	r12, r14
   1a7be:	2a e5       	ldi	r18, 0x5A	; 90
   1a7c0:	c2 0e       	add	r12, r18
   1a7c2:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a7c4:	57 01       	movw	r10, r14
   1a7c6:	8f e4       	ldi	r24, 0x4F	; 79
   1a7c8:	a8 0e       	add	r10, r24
   1a7ca:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a7cc:	be 01       	movw	r22, r28
   1a7ce:	c7 01       	movw	r24, r14
   1a7d0:	0e 94 98 ca 	call	0x19530	; 0x19530 <lif_readdirindex>
   1a7d4:	89 2b       	or	r24, r25
   1a7d6:	91 f0       	breq	.+36     	; 0x1a7fc <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a7d8:	f6 01       	movw	r30, r12
   1a7da:	80 81       	ld	r24, Z
   1a7dc:	91 81       	ldd	r25, Z+1	; 0x01
   1a7de:	8f 3f       	cpi	r24, 0xFF	; 255
   1a7e0:	ff ef       	ldi	r31, 0xFF	; 255
   1a7e2:	9f 07       	cpc	r25, r31
   1a7e4:	59 f0       	breq	.+22     	; 0x1a7fc <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a7e6:	89 2b       	or	r24, r25
   1a7e8:	39 f0       	breq	.+14     	; 0x1a7f8 <lif_find_file+0xb2>
   1a7ea:	61 2f       	mov	r22, r17
   1a7ec:	70 2f       	mov	r23, r16
   1a7ee:	c5 01       	movw	r24, r10
   1a7f0:	0e 94 c0 33 	call	0x6780	; 0x6780 <strcasecmp>
   1a7f4:	89 2b       	or	r24, r25
   1a7f6:	29 f0       	breq	.+10     	; 0x1a802 <lif_find_file+0xbc>
            break;
        ++index;
   1a7f8:	21 96       	adiw	r28, 0x01	; 1
   1a7fa:	e8 cf       	rjmp	.-48     	; 0x1a7cc <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a7fc:	8f ef       	ldi	r24, 0xFF	; 255
   1a7fe:	9f ef       	ldi	r25, 0xFF	; 255
   1a800:	01 c0       	rjmp	.+2      	; 0x1a804 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a802:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1a804:	cd b7       	in	r28, 0x3d	; 61
   1a806:	de b7       	in	r29, 0x3e	; 62
   1a808:	ea e0       	ldi	r30, 0x0A	; 10
   1a80a:	0c 94 4d e4 	jmp	0x1c89a	; 0x1c89a <__epilogue_restores__+0x10>

0001a80e <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a80e:	a0 e0       	ldi	r26, 0x00	; 0
   1a810:	b0 e0       	ldi	r27, 0x00	; 0
   1a812:	ed e0       	ldi	r30, 0x0D	; 13
   1a814:	f4 ed       	ldi	r31, 0xD4	; 212
   1a816:	0c 94 33 e4 	jmp	0x1c866	; 0x1c866 <__prologue_saves__+0x14>
   1a81a:	6b 01       	movw	r12, r22
   1a81c:	7c 01       	movw	r14, r24
   1a81e:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a820:	20 e0       	ldi	r18, 0x00	; 0
   1a822:	31 e0       	ldi	r19, 0x01	; 1
   1a824:	40 e0       	ldi	r20, 0x00	; 0
   1a826:	50 e0       	ldi	r21, 0x00	; 0
   1a828:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
    if(!pos)
   1a82c:	61 15       	cp	r22, r1
   1a82e:	71 05       	cpc	r23, r1
   1a830:	e1 f1       	breq	.+120    	; 0x1a8aa <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a832:	c0 e0       	ldi	r28, 0x00	; 0
   1a834:	d1 e0       	ldi	r29, 0x01	; 1
   1a836:	c6 1b       	sub	r28, r22
   1a838:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1a83a:	f8 01       	movw	r30, r16
   1a83c:	8f ee       	ldi	r24, 0xEF	; 239
   1a83e:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a840:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a842:	cf 01       	movw	r24, r30
   1a844:	80 1b       	sub	r24, r16
   1a846:	91 0b       	sbc	r25, r17
   1a848:	8c 17       	cp	r24, r28
   1a84a:	9d 07       	cpc	r25, r29
   1a84c:	14 f4       	brge	.+4      	; 0x1a852 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a84e:	21 93       	st	Z+, r18
   1a850:	f8 cf       	rjmp	.-16     	; 0x1a842 <lif_e010_pad_sector+0x34>
   1a852:	1c 16       	cp	r1, r28
   1a854:	1d 06       	cpc	r1, r29
   1a856:	14 f0       	brlt	.+4      	; 0x1a85c <lif_e010_pad_sector+0x4e>
   1a858:	c1 e0       	ldi	r28, 0x01	; 1
   1a85a:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a85c:	ce 01       	movw	r24, r28
   1a85e:	0d 2e       	mov	r0, r29
   1a860:	00 0c       	add	r0, r0
   1a862:	aa 0b       	sbc	r26, r26
   1a864:	bb 0b       	sbc	r27, r27
   1a866:	bc 01       	movw	r22, r24
   1a868:	cd 01       	movw	r24, r26
   1a86a:	6c 0d       	add	r22, r12
   1a86c:	7d 1d       	adc	r23, r13
   1a86e:	8e 1d       	adc	r24, r14
   1a870:	9f 1d       	adc	r25, r15
   1a872:	20 e0       	ldi	r18, 0x00	; 0
   1a874:	31 e0       	ldi	r19, 0x01	; 1
   1a876:	40 e0       	ldi	r20, 0x00	; 0
   1a878:	50 e0       	ldi	r21, 0x00	; 0
   1a87a:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1a87e:	61 15       	cp	r22, r1
   1a880:	71 05       	cpc	r23, r1
   1a882:	b1 f0       	breq	.+44     	; 0x1a8b0 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1a884:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a888:	20 ff       	sbrs	r18, 0
   1a88a:	14 c0       	rjmp	.+40     	; 0x1a8b4 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a88c:	7f 93       	push	r23
   1a88e:	6f 93       	push	r22
   1a890:	8c e5       	ldi	r24, 0x5C	; 92
   1a892:	99 e3       	ldi	r25, 0x39	; 57
   1a894:	1f 92       	push	r1
   1a896:	9f 93       	push	r25
   1a898:	8f 93       	push	r24
   1a89a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a89e:	0f 90       	pop	r0
   1a8a0:	0f 90       	pop	r0
   1a8a2:	0f 90       	pop	r0
   1a8a4:	0f 90       	pop	r0
   1a8a6:	0f 90       	pop	r0
   1a8a8:	05 c0       	rjmp	.+10     	; 0x1a8b4 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a8aa:	80 e0       	ldi	r24, 0x00	; 0
   1a8ac:	90 e0       	ldi	r25, 0x00	; 0
   1a8ae:	04 c0       	rjmp	.+8      	; 0x1a8b8 <lif_e010_pad_sector+0xaa>
   1a8b0:	ce 01       	movw	r24, r28
   1a8b2:	02 c0       	rjmp	.+4      	; 0x1a8b8 <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a8b4:	8f ef       	ldi	r24, 0xFF	; 255
   1a8b6:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a8b8:	cd b7       	in	r28, 0x3d	; 61
   1a8ba:	de b7       	in	r29, 0x3e	; 62
   1a8bc:	e8 e0       	ldi	r30, 0x08	; 8
   1a8be:	0c 94 4f e4 	jmp	0x1c89e	; 0x1c89e <__epilogue_restores__+0x14>

0001a8c2 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a8c2:	a0 e0       	ldi	r26, 0x00	; 0
   1a8c4:	b0 e0       	ldi	r27, 0x00	; 0
   1a8c6:	e7 e6       	ldi	r30, 0x67	; 103
   1a8c8:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8ca:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   1a8ce:	ec 01       	movw	r28, r24
   1a8d0:	4a 01       	movw	r8, r20
   1a8d2:	5b 01       	movw	r10, r22
   1a8d4:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1a8d6:	fc 01       	movw	r30, r24
   1a8d8:	01 90       	ld	r0, Z+
   1a8da:	00 20       	and	r0, r0
   1a8dc:	e9 f7       	brne	.-6      	; 0x1a8d8 <lif_ascii_string_to_e010+0x16>
   1a8de:	31 97       	sbiw	r30, 0x01	; 1
   1a8e0:	6f 01       	movw	r12, r30
   1a8e2:	c8 1a       	sub	r12, r24
   1a8e4:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a8e6:	41 2c       	mov	r4, r1
   1a8e8:	51 2c       	mov	r5, r1
   1a8ea:	32 01       	movw	r6, r4
   1a8ec:	53 94       	inc	r5
   1a8ee:	cb 01       	movw	r24, r22
   1a8f0:	ba 01       	movw	r22, r20
   1a8f2:	a3 01       	movw	r20, r6
   1a8f4:	92 01       	movw	r18, r4
   1a8f6:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
   1a8fa:	21 2c       	mov	r2, r1
   1a8fc:	33 24       	eor	r3, r3
   1a8fe:	33 94       	inc	r3
   1a900:	c1 01       	movw	r24, r2
   1a902:	86 1b       	sub	r24, r22
   1a904:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a906:	86 30       	cpi	r24, 0x06	; 6
   1a908:	91 05       	cpc	r25, r1
   1a90a:	20 f0       	brcs	.+8      	; 0x1a914 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a90c:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1a90e:	00 e0       	ldi	r16, 0x00	; 0
   1a910:	10 e0       	ldi	r17, 0x00	; 0
   1a912:	17 c0       	rjmp	.+46     	; 0x1a942 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a914:	a7 01       	movw	r20, r14
   1a916:	c5 01       	movw	r24, r10
   1a918:	b4 01       	movw	r22, r8
   1a91a:	79 df       	rcall	.-270    	; 0x1a80e <lif_e010_pad_sector>
   1a91c:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a91e:	97 fd       	sbrc	r25, 7
   1a920:	84 c0       	rjmp	.+264    	; 0x1aa2a <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a922:	09 2e       	mov	r0, r25
   1a924:	00 0c       	add	r0, r0
   1a926:	aa 0b       	sbc	r26, r26
   1a928:	bb 0b       	sbc	r27, r27
   1a92a:	bc 01       	movw	r22, r24
   1a92c:	cd 01       	movw	r24, r26
   1a92e:	68 0d       	add	r22, r8
   1a930:	79 1d       	adc	r23, r9
   1a932:	8a 1d       	adc	r24, r10
   1a934:	9b 1d       	adc	r25, r11
   1a936:	a3 01       	movw	r20, r6
   1a938:	92 01       	movw	r18, r4
   1a93a:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
   1a93e:	26 1a       	sub	r2, r22
   1a940:	37 0a       	sbc	r3, r23
   1a942:	f7 01       	movw	r30, r14
   1a944:	e0 0f       	add	r30, r16
   1a946:	f1 1f       	adc	r31, r17
   1a948:	0d 5f       	subi	r16, 0xFD	; 253
   1a94a:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1a94c:	c6 01       	movw	r24, r12
   1a94e:	02 96       	adiw	r24, 0x02	; 2
   1a950:	82 15       	cp	r24, r2
   1a952:	93 05       	cpc	r25, r3
   1a954:	84 f4       	brge	.+32     	; 0x1a976 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a956:	8f ed       	ldi	r24, 0xDF	; 223
   1a958:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a95a:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a95c:	d2 82       	std	Z+2, r13	; 0x02
   1a95e:	f7 01       	movw	r30, r14
   1a960:	e0 0f       	add	r30, r16
   1a962:	f1 1f       	adc	r31, r17
   1a964:	cf 01       	movw	r24, r30
   1a966:	8e 19       	sub	r24, r14
   1a968:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1a96a:	29 91       	ld	r18, Y+
   1a96c:	22 23       	and	r18, r18
   1a96e:	09 f4       	brne	.+2      	; 0x1a972 <lif_ascii_string_to_e010+0xb0>
   1a970:	5c c0       	rjmp	.+184    	; 0x1aa2a <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1a972:	21 93       	st	Z+, r18
   1a974:	f7 cf       	rjmp	.-18     	; 0x1a964 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1a976:	8f ec       	ldi	r24, 0xCF	; 207
   1a978:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a97a:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a97c:	d2 82       	std	Z+2, r13	; 0x02
   1a97e:	d7 01       	movw	r26, r14
   1a980:	a0 0f       	add	r26, r16
   1a982:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a984:	fe 01       	movw	r30, r28
   1a986:	81 91       	ld	r24, Z+
   1a988:	81 11       	cpse	r24, r1
   1a98a:	0e c0       	rjmp	.+28     	; 0x1a9a8 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a98c:	c8 01       	movw	r24, r16
   1a98e:	01 2e       	mov	r0, r17
   1a990:	00 0c       	add	r0, r0
   1a992:	aa 0b       	sbc	r26, r26
   1a994:	bb 0b       	sbc	r27, r27
   1a996:	bc 01       	movw	r22, r24
   1a998:	cd 01       	movw	r24, r26
   1a99a:	68 0d       	add	r22, r8
   1a99c:	79 1d       	adc	r23, r9
   1a99e:	8a 1d       	adc	r24, r10
   1a9a0:	9b 1d       	adc	r25, r11
   1a9a2:	61 11       	cpse	r22, r1
   1a9a4:	09 c0       	rjmp	.+18     	; 0x1a9b8 <lif_ascii_string_to_e010+0xf6>
   1a9a6:	21 c0       	rjmp	.+66     	; 0x1a9ea <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a9a8:	02 15       	cp	r16, r2
   1a9aa:	13 05       	cpc	r17, r3
   1a9ac:	7c f7       	brge	.-34     	; 0x1a98c <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a9ae:	0f 5f       	subi	r16, 0xFF	; 255
   1a9b0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9b2:	8d 93       	st	X+, r24
   1a9b4:	ef 01       	movw	r28, r30
   1a9b6:	e6 cf       	rjmp	.-52     	; 0x1a984 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1a9b8:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a9bc:	20 ff       	sbrs	r18, 0
   1a9be:	33 c0       	rjmp	.+102    	; 0x1aa26 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a9c0:	20 e0       	ldi	r18, 0x00	; 0
   1a9c2:	31 e0       	ldi	r19, 0x01	; 1
   1a9c4:	40 e0       	ldi	r20, 0x00	; 0
   1a9c6:	50 e0       	ldi	r21, 0x00	; 0
   1a9c8:	0e 94 c9 e3 	call	0x1c792	; 0x1c792 <__divmodsi4>
   1a9cc:	7f 93       	push	r23
   1a9ce:	6f 93       	push	r22
   1a9d0:	88 e3       	ldi	r24, 0x38	; 56
   1a9d2:	99 e3       	ldi	r25, 0x39	; 57
   1a9d4:	1f 92       	push	r1
   1a9d6:	9f 93       	push	r25
   1a9d8:	8f 93       	push	r24
   1a9da:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1a9de:	0f 90       	pop	r0
   1a9e0:	0f 90       	pop	r0
   1a9e2:	0f 90       	pop	r0
   1a9e4:	0f 90       	pop	r0
   1a9e6:	0f 90       	pop	r0
   1a9e8:	1e c0       	rjmp	.+60     	; 0x1aa26 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1a9ea:	fe 01       	movw	r30, r28
   1a9ec:	01 90       	ld	r0, Z+
   1a9ee:	00 20       	and	r0, r0
   1a9f0:	e9 f7       	brne	.-6      	; 0x1a9ec <lif_ascii_string_to_e010+0x12a>
   1a9f2:	31 97       	sbiw	r30, 0x01	; 1
   1a9f4:	ec 1b       	sub	r30, r28
   1a9f6:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1a9f8:	d7 01       	movw	r26, r14
   1a9fa:	a0 0f       	add	r26, r16
   1a9fc:	b1 1f       	adc	r27, r17
   1a9fe:	8f e6       	ldi	r24, 0x6F	; 111
   1aa00:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1aa02:	11 96       	adiw	r26, 0x01	; 1
   1aa04:	ec 93       	st	X, r30
   1aa06:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1aa08:	12 96       	adiw	r26, 0x02	; 2
   1aa0a:	fc 93       	st	X, r31
   1aa0c:	0d 5f       	subi	r16, 0xFD	; 253
   1aa0e:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa10:	f7 01       	movw	r30, r14
   1aa12:	e0 0f       	add	r30, r16
   1aa14:	f1 1f       	adc	r31, r17
   1aa16:	cf 01       	movw	r24, r30
   1aa18:	8e 19       	sub	r24, r14
   1aa1a:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1aa1c:	29 91       	ld	r18, Y+
   1aa1e:	22 23       	and	r18, r18
   1aa20:	21 f0       	breq	.+8      	; 0x1aa2a <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1aa22:	21 93       	st	Z+, r18
   1aa24:	f8 cf       	rjmp	.-16     	; 0x1aa16 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1aa26:	8f ef       	ldi	r24, 0xFF	; 255
   1aa28:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1aa2a:	cd b7       	in	r28, 0x3d	; 61
   1aa2c:	de b7       	in	r29, 0x3e	; 62
   1aa2e:	e2 e1       	ldi	r30, 0x12	; 18
   1aa30:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001aa34 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1aa34:	a6 e0       	ldi	r26, 0x06	; 6
   1aa36:	b3 e0       	ldi	r27, 0x03	; 3
   1aa38:	e0 e2       	ldi	r30, 0x20	; 32
   1aa3a:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa3c:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   1aa40:	7c 01       	movw	r14, r24
   1aa42:	4a 01       	movw	r8, r20
   1aa44:	5b 01       	movw	r10, r22
   1aa46:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1aa48:	68 e8       	ldi	r22, 0x88	; 136
   1aa4a:	78 e0       	ldi	r23, 0x08	; 8
   1aa4c:	0e 94 f9 c0 	call	0x181f2	; 0x181f2 <lif_open>
   1aa50:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1aa52:	89 2b       	or	r24, r25
   1aa54:	09 f4       	brne	.+2      	; 0x1aa58 <lif_add_ascii_file_as_e010_wrapper+0x24>
   1aa56:	6b c0       	rjmp	.+214    	; 0x1ab2e <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1aa58:	21 2c       	mov	r2, r1
   1aa5a:	31 2c       	mov	r3, r1
   1aa5c:	41 2c       	mov	r4, r1
   1aa5e:	51 2c       	mov	r5, r1
   1aa60:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1aa62:	8a e2       	ldi	r24, 0x2A	; 42
   1aa64:	99 e3       	ldi	r25, 0x39	; 57
   1aa66:	9c 01       	movw	r18, r24
   1aa68:	40 e0       	ldi	r20, 0x00	; 0
   1aa6a:	cc 5f       	subi	r28, 0xFC	; 252
   1aa6c:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa6e:	28 83       	st	Y, r18
   1aa70:	39 83       	std	Y+1, r19	; 0x01
   1aa72:	4a 83       	std	Y+2, r20	; 0x02
   1aa74:	c4 50       	subi	r28, 0x04	; 4
   1aa76:	d3 40       	sbci	r29, 0x03	; 3
   1aa78:	1a c0       	rjmp	.+52     	; 0x1aaae <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1aa7a:	ce 5f       	subi	r28, 0xFE	; 254
   1aa7c:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa7e:	28 81       	ld	r18, Y
   1aa80:	39 81       	ldd	r19, Y+1	; 0x01
   1aa82:	c2 50       	subi	r28, 0x02	; 2
   1aa84:	d3 40       	sbci	r29, 0x03	; 3
   1aa86:	c9 01       	movw	r24, r18
   1aa88:	03 2e       	mov	r0, r19
   1aa8a:	00 0c       	add	r0, r0
   1aa8c:	aa 0b       	sbc	r26, r26
   1aa8e:	bb 0b       	sbc	r27, r27
   1aa90:	88 0e       	add	r8, r24
   1aa92:	99 1e       	adc	r9, r25
   1aa94:	aa 1e       	adc	r10, r26
   1aa96:	bb 1e       	adc	r11, r27
        bytes += size;
   1aa98:	48 0e       	add	r4, r24
   1aa9a:	59 1e       	adc	r5, r25
   1aa9c:	6a 1e       	adc	r6, r26
   1aa9e:	7b 1e       	adc	r7, r27
        count += size;
   1aaa0:	22 0e       	add	r2, r18
   1aaa2:	33 1e       	adc	r3, r19

        if(count > 256)
   1aaa4:	31 e0       	ldi	r19, 0x01	; 1
   1aaa6:	23 16       	cp	r2, r19
   1aaa8:	33 06       	cpc	r3, r19
   1aaaa:	0c f0       	brlt	.+2      	; 0x1aaae <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1aaac:	45 c0       	rjmp	.+138    	; 0x1ab38 <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1aaae:	a6 01       	movw	r20, r12
   1aab0:	6d ef       	ldi	r22, 0xFD	; 253
   1aab2:	70 e0       	ldi	r23, 0x00	; 0
   1aab4:	ce 01       	movw	r24, r28
   1aab6:	8f 5f       	subi	r24, 0xFF	; 255
   1aab8:	9d 4f       	sbci	r25, 0xFD	; 253
   1aaba:	0e 94 36 78 	call	0xf06c	; 0xf06c <fgets>
   1aabe:	89 2b       	or	r24, r25
   1aac0:	09 f4       	brne	.+2      	; 0x1aac4 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1aac2:	58 c0       	rjmp	.+176    	; 0x1ab74 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1aac4:	ce 01       	movw	r24, r28
   1aac6:	8f 5f       	subi	r24, 0xFF	; 255
   1aac8:	9d 4f       	sbci	r25, 0xFD	; 253
   1aaca:	0e 94 99 33 	call	0x6732	; 0x6732 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1aace:	65 ef       	ldi	r22, 0xF5	; 245
   1aad0:	75 e1       	ldi	r23, 0x15	; 21
   1aad2:	ce 01       	movw	r24, r28
   1aad4:	8f 5f       	subi	r24, 0xFF	; 255
   1aad6:	9d 4f       	sbci	r25, 0xFD	; 253
   1aad8:	0e 94 60 33 	call	0x66c0	; 0x66c0 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1aadc:	9e 01       	movw	r18, r28
   1aade:	2f 5f       	subi	r18, 0xFF	; 255
   1aae0:	3f 4f       	sbci	r19, 0xFF	; 255
   1aae2:	b5 01       	movw	r22, r10
   1aae4:	a4 01       	movw	r20, r8
   1aae6:	ce 01       	movw	r24, r28
   1aae8:	8f 5f       	subi	r24, 0xFF	; 255
   1aaea:	9d 4f       	sbci	r25, 0xFD	; 253
   1aaec:	ea de       	rcall	.-556    	; 0x1a8c2 <lif_ascii_string_to_e010>
   1aaee:	ce 5f       	subi	r28, 0xFE	; 254
   1aaf0:	dc 4f       	sbci	r29, 0xFC	; 252
   1aaf2:	99 83       	std	Y+1, r25	; 0x01
   1aaf4:	88 83       	st	Y, r24
   1aaf6:	c2 50       	subi	r28, 0x02	; 2
   1aaf8:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1aafa:	e1 14       	cp	r14, r1
   1aafc:	f1 04       	cpc	r15, r1
   1aafe:	09 f4       	brne	.+2      	; 0x1ab02 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1ab00:	bc cf       	rjmp	.-136    	; 0x1aa7a <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ab02:	8c 01       	movw	r16, r24
   1ab04:	a5 01       	movw	r20, r10
   1ab06:	94 01       	movw	r18, r8
   1ab08:	be 01       	movw	r22, r28
   1ab0a:	6f 5f       	subi	r22, 0xFF	; 255
   1ab0c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab0e:	c7 01       	movw	r24, r14
   1ab10:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
            if(len < size)
   1ab14:	ce 5f       	subi	r28, 0xFE	; 254
   1ab16:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab18:	08 81       	ld	r16, Y
   1ab1a:	19 81       	ldd	r17, Y+1	; 0x01
   1ab1c:	c2 50       	subi	r28, 0x02	; 2
   1ab1e:	d3 40       	sbci	r29, 0x03	; 3
   1ab20:	80 17       	cp	r24, r16
   1ab22:	91 07       	cpc	r25, r17
   1ab24:	0c f0       	brlt	.+2      	; 0x1ab28 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ab26:	a9 cf       	rjmp	.-174    	; 0x1aa7a <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1ab28:	c6 01       	movw	r24, r12
   1ab2a:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
                return(-1);
   1ab2e:	6f ef       	ldi	r22, 0xFF	; 255
   1ab30:	7f ef       	ldi	r23, 0xFF	; 255
   1ab32:	8f ef       	ldi	r24, 0xFF	; 255
   1ab34:	9f ef       	ldi	r25, 0xFF	; 255
   1ab36:	86 c0       	rjmp	.+268    	; 0x1ac44 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1ab38:	e1 14       	cp	r14, r1
   1ab3a:	f1 04       	cpc	r15, r1
   1ab3c:	c1 f0       	breq	.+48     	; 0x1ab6e <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ab3e:	7f 92       	push	r7
   1ab40:	6f 92       	push	r6
   1ab42:	5f 92       	push	r5
   1ab44:	4f 92       	push	r4
   1ab46:	1f 92       	push	r1
   1ab48:	cb 5f       	subi	r28, 0xFB	; 251
   1ab4a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab4c:	48 81       	ld	r20, Y
   1ab4e:	c5 50       	subi	r28, 0x05	; 5
   1ab50:	d3 40       	sbci	r29, 0x03	; 3
   1ab52:	4f 93       	push	r20
   1ab54:	cc 5f       	subi	r28, 0xFC	; 252
   1ab56:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab58:	88 81       	ld	r24, Y
   1ab5a:	c4 50       	subi	r28, 0x04	; 4
   1ab5c:	d3 40       	sbci	r29, 0x03	; 3
   1ab5e:	8f 93       	push	r24
   1ab60:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1ab64:	0f b6       	in	r0, 0x3f	; 63
   1ab66:	f8 94       	cli
   1ab68:	de bf       	out	0x3e, r29	; 62
   1ab6a:	0f be       	out	0x3f, r0	; 63
   1ab6c:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1ab6e:	21 2c       	mov	r2, r1
   1ab70:	31 2c       	mov	r3, r1
   1ab72:	9d cf       	rjmp	.-198    	; 0x1aaae <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ab74:	c6 01       	movw	r24, r12
   1ab76:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>

    // Write EOF
    str[0] = 0;
   1ab7a:	cf 5f       	subi	r28, 0xFF	; 255
   1ab7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab7e:	18 82       	st	Y, r1
   1ab80:	c1 50       	subi	r28, 0x01	; 1
   1ab82:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ab84:	9e 01       	movw	r18, r28
   1ab86:	2f 5f       	subi	r18, 0xFF	; 255
   1ab88:	3f 4f       	sbci	r19, 0xFF	; 255
   1ab8a:	b5 01       	movw	r22, r10
   1ab8c:	a4 01       	movw	r20, r8
   1ab8e:	ce 01       	movw	r24, r28
   1ab90:	8f 5f       	subi	r24, 0xFF	; 255
   1ab92:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab94:	96 de       	rcall	.-724    	; 0x1a8c2 <lif_ascii_string_to_e010>
   1ab96:	6c 01       	movw	r12, r24

    if(LIF)
   1ab98:	e1 14       	cp	r14, r1
   1ab9a:	f1 04       	cpc	r15, r1
   1ab9c:	b9 f4       	brne	.+46     	; 0x1abcc <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ab9e:	c6 01       	movw	r24, r12
   1aba0:	dd 0c       	add	r13, r13
   1aba2:	aa 0b       	sbc	r26, r26
   1aba4:	bb 0b       	sbc	r27, r27
   1aba6:	48 0e       	add	r4, r24
   1aba8:	59 1e       	adc	r5, r25
   1abaa:	6a 1e       	adc	r6, r26
   1abac:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1abae:	88 0e       	add	r8, r24
   1abb0:	99 1e       	adc	r9, r25
   1abb2:	aa 1e       	adc	r10, r26
   1abb4:	bb 1e       	adc	r11, r27
   1abb6:	ae 01       	movw	r20, r28
   1abb8:	4f 5f       	subi	r20, 0xFF	; 255
   1abba:	5f 4f       	sbci	r21, 0xFF	; 255
   1abbc:	c5 01       	movw	r24, r10
   1abbe:	b4 01       	movw	r22, r8
   1abc0:	26 de       	rcall	.-948    	; 0x1a80e <lif_e010_pad_sector>
   1abc2:	6c 01       	movw	r12, r24
    if(LIF)
   1abc4:	e1 14       	cp	r14, r1
   1abc6:	f1 04       	cpc	r15, r1
   1abc8:	f1 f4       	brne	.+60     	; 0x1ac06 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1abca:	3a c0       	rjmp	.+116    	; 0x1ac40 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1abcc:	7f 92       	push	r7
   1abce:	6f 92       	push	r6
   1abd0:	5f 92       	push	r5
   1abd2:	4f 92       	push	r4
   1abd4:	8c e1       	ldi	r24, 0x1C	; 28
   1abd6:	99 e3       	ldi	r25, 0x39	; 57
   1abd8:	1f 92       	push	r1
   1abda:	9f 93       	push	r25
   1abdc:	8f 93       	push	r24
   1abde:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1abe2:	86 01       	movw	r16, r12
   1abe4:	a5 01       	movw	r20, r10
   1abe6:	94 01       	movw	r18, r8
   1abe8:	be 01       	movw	r22, r28
   1abea:	6f 5f       	subi	r22, 0xFF	; 255
   1abec:	7f 4f       	sbci	r23, 0xFF	; 255
   1abee:	c7 01       	movw	r24, r14
   1abf0:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
        if(len < size)
   1abf4:	0f b6       	in	r0, 0x3f	; 63
   1abf6:	f8 94       	cli
   1abf8:	de bf       	out	0x3e, r29	; 62
   1abfa:	0f be       	out	0x3f, r0	; 63
   1abfc:	cd bf       	out	0x3d, r28	; 61
   1abfe:	8c 15       	cp	r24, r12
   1ac00:	9d 05       	cpc	r25, r13
   1ac02:	6c f6       	brge	.-102    	; 0x1ab9e <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1ac04:	94 cf       	rjmp	.-216    	; 0x1ab2e <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ac06:	8c 01       	movw	r16, r24
   1ac08:	a5 01       	movw	r20, r10
   1ac0a:	94 01       	movw	r18, r8
   1ac0c:	be 01       	movw	r22, r28
   1ac0e:	6f 5f       	subi	r22, 0xFF	; 255
   1ac10:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac12:	c7 01       	movw	r24, r14
   1ac14:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
        if(len < size)
   1ac18:	8c 15       	cp	r24, r12
   1ac1a:	9d 05       	cpc	r25, r13
   1ac1c:	0c f4       	brge	.+2      	; 0x1ac20 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1ac1e:	87 cf       	rjmp	.-242    	; 0x1ab2e <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ac20:	7f 92       	push	r7
   1ac22:	6f 92       	push	r6
   1ac24:	5f 92       	push	r5
   1ac26:	4f 92       	push	r4
   1ac28:	8e e0       	ldi	r24, 0x0E	; 14
   1ac2a:	99 e3       	ldi	r25, 0x39	; 57
   1ac2c:	1f 92       	push	r1
   1ac2e:	9f 93       	push	r25
   1ac30:	8f 93       	push	r24
   1ac32:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1ac36:	0f b6       	in	r0, 0x3f	; 63
   1ac38:	f8 94       	cli
   1ac3a:	de bf       	out	0x3e, r29	; 62
   1ac3c:	0f be       	out	0x3f, r0	; 63
   1ac3e:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1ac40:	b2 01       	movw	r22, r4
   1ac42:	c3 01       	movw	r24, r6
}
   1ac44:	ca 5f       	subi	r28, 0xFA	; 250
   1ac46:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac48:	e2 e1       	ldi	r30, 0x12	; 18
   1ac4a:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001ac4e <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ac4e:	a2 e3       	ldi	r26, 0x32	; 50
   1ac50:	b0 e0       	ldi	r27, 0x00	; 0
   1ac52:	ed e2       	ldi	r30, 0x2D	; 45
   1ac54:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac56:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   1ac5a:	6c 01       	movw	r12, r24
   1ac5c:	1b 01       	movw	r2, r22
   1ac5e:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1ac60:	fc 01       	movw	r30, r24
   1ac62:	80 81       	ld	r24, Z
   1ac64:	81 11       	cpse	r24, r1
   1ac66:	03 c0       	rjmp	.+6      	; 0x1ac6e <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ac68:	8b ed       	ldi	r24, 0xDB	; 219
   1ac6a:	98 e3       	ldi	r25, 0x38	; 56
   1ac6c:	1a c0       	rjmp	.+52     	; 0x1aca2 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ac6e:	fb 01       	movw	r30, r22
   1ac70:	80 81       	ld	r24, Z
   1ac72:	81 11       	cpse	r24, r1
   1ac74:	03 c0       	rjmp	.+6      	; 0x1ac7c <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ac76:	8d ea       	ldi	r24, 0xAD	; 173
   1ac78:	98 e3       	ldi	r25, 0x38	; 56
   1ac7a:	13 c0       	rjmp	.+38     	; 0x1aca2 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ac7c:	fa 01       	movw	r30, r20
   1ac7e:	80 81       	ld	r24, Z
   1ac80:	81 11       	cpse	r24, r1
   1ac82:	03 c0       	rjmp	.+6      	; 0x1ac8a <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ac84:	8e e7       	ldi	r24, 0x7E	; 126
   1ac86:	98 e3       	ldi	r25, 0x38	; 56
   1ac88:	0c c0       	rjmp	.+24     	; 0x1aca2 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ac8a:	be 01       	movw	r22, r28
   1ac8c:	6f 5f       	subi	r22, 0xFF	; 255
   1ac8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac90:	ca 01       	movw	r24, r20
   1ac92:	0e 94 21 c1 	call	0x18242	; 0x18242 <lif_stat>
   1ac96:	9a ab       	std	Y+50, r25	; 0x32
   1ac98:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1ac9a:	89 2b       	or	r24, r25
   1ac9c:	59 f4       	brne	.+22     	; 0x1acb4 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ac9e:	8e e4       	ldi	r24, 0x4E	; 78
   1aca0:	98 e3       	ldi	r25, 0x38	; 56
   1aca2:	1f 92       	push	r1
   1aca4:	9f 93       	push	r25
   1aca6:	8f 93       	push	r24
   1aca8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
   1acac:	0f 90       	pop	r0
   1acae:	0f 90       	pop	r0
   1acb0:	0f 90       	pop	r0
   1acb2:	fe c0       	rjmp	.+508    	; 0x1aeb0 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1acb4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1acb8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1acbc:	92 ff       	sbrs	r25, 2
   1acbe:	12 c0       	rjmp	.+36     	; 0x1ace4 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1acc0:	ff 92       	push	r15
   1acc2:	ef 92       	push	r14
   1acc4:	3f 92       	push	r3
   1acc6:	2f 92       	push	r2
   1acc8:	df 92       	push	r13
   1acca:	cf 92       	push	r12
   1accc:	8f e1       	ldi	r24, 0x1F	; 31
   1acce:	98 e3       	ldi	r25, 0x38	; 56
   1acd0:	1f 92       	push	r1
   1acd2:	9f 93       	push	r25
   1acd4:	8f 93       	push	r24
   1acd6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1acda:	0f b6       	in	r0, 0x3f	; 63
   1acdc:	f8 94       	cli
   1acde:	de bf       	out	0x3e, r29	; 62
   1ace0:	0f be       	out	0x3f, r0	; 63
   1ace2:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1ace4:	97 01       	movw	r18, r14
   1ace6:	40 e0       	ldi	r20, 0x00	; 0
   1ace8:	50 e0       	ldi	r21, 0x00	; 0
   1acea:	ba 01       	movw	r22, r20
   1acec:	80 e0       	ldi	r24, 0x00	; 0
   1acee:	90 e0       	ldi	r25, 0x00	; 0
   1acf0:	a1 de       	rcall	.-702    	; 0x1aa34 <lif_add_ascii_file_as_e010_wrapper>
   1acf2:	4b 01       	movw	r8, r22
   1acf4:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1acf6:	47 2e       	mov	r4, r23
   1acf8:	58 2e       	mov	r5, r24
   1acfa:	69 2e       	mov	r6, r25
   1acfc:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1acfe:	66 23       	and	r22, r22
   1ad00:	29 f0       	breq	.+10     	; 0x1ad0c <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1ad02:	9f ef       	ldi	r25, 0xFF	; 255
   1ad04:	49 1a       	sub	r4, r25
   1ad06:	59 0a       	sbc	r5, r25
   1ad08:	69 0a       	sbc	r6, r25
   1ad0a:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ad0c:	6b e8       	ldi	r22, 0x8B	; 139
   1ad0e:	78 e0       	ldi	r23, 0x08	; 8
   1ad10:	c6 01       	movw	r24, r12
   1ad12:	85 da       	rcall	.-2806   	; 0x1a21e <lif_open_volume>
   1ad14:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ad16:	00 97       	sbiw	r24, 0x00	; 0
   1ad18:	09 f4       	brne	.+2      	; 0x1ad1c <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1ad1a:	ca c0       	rjmp	.+404    	; 0x1aeb0 <lif_add_ascii_file_as_e010+0x262>
   1ad1c:	b3 01       	movw	r22, r6
   1ad1e:	a2 01       	movw	r20, r4
   1ad20:	19 d9       	rcall	.-3534   	; 0x19f54 <lif_newdir>
    if(index == -1)
   1ad22:	3c 01       	movw	r6, r24
   1ad24:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1ad26:	a1 f4       	brne	.+40     	; 0x1ad50 <lif_add_ascii_file_as_e010+0x102>
   1ad28:	ff 92       	push	r15
   1ad2a:	ef 92       	push	r14
   1ad2c:	df 92       	push	r13
   1ad2e:	cf 92       	push	r12
   1ad30:	8f ee       	ldi	r24, 0xEF	; 239
   1ad32:	97 e3       	ldi	r25, 0x37	; 55
   1ad34:	1f 92       	push	r1
   1ad36:	9f 93       	push	r25
   1ad38:	8f 93       	push	r24
   1ad3a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad3e:	c8 01       	movw	r24, r16
   1ad40:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1ad44:	0f b6       	in	r0, 0x3f	; 63
   1ad46:	f8 94       	cli
   1ad48:	de bf       	out	0x3e, r29	; 62
   1ad4a:	0f be       	out	0x3f, r0	; 63
   1ad4c:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1ad4e:	b0 c0       	rjmp	.+352    	; 0x1aeb0 <lif_add_ascii_file_as_e010+0x262>
   1ad50:	68 01       	movw	r12, r16
   1ad52:	9f e4       	ldi	r25, 0x4F	; 79
   1ad54:	c9 0e       	add	r12, r25
   1ad56:	d1 1c       	adc	r13, r1
   1ad58:	4a e0       	ldi	r20, 0x0A	; 10
   1ad5a:	50 e0       	ldi	r21, 0x00	; 0
   1ad5c:	b1 01       	movw	r22, r2
   1ad5e:	c6 01       	movw	r24, r12
   1ad60:	0e 94 c5 c2 	call	0x1858a	; 0x1858a <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1ad64:	80 e1       	ldi	r24, 0x10	; 16
   1ad66:	90 ee       	ldi	r25, 0xE0	; 224
   1ad68:	f8 01       	movw	r30, r16
   1ad6a:	e6 5a       	subi	r30, 0xA6	; 166
   1ad6c:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad6e:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ad70:	80 83       	st	Z, r24
   1ad72:	e9 a9       	ldd	r30, Y+49	; 0x31
   1ad74:	fa a9       	ldd	r31, Y+50	; 0x32
   1ad76:	60 a5       	ldd	r22, Z+40	; 0x28
   1ad78:	71 a5       	ldd	r23, Z+41	; 0x29
   1ad7a:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ad7c:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ad7e:	a8 01       	movw	r20, r16
   1ad80:	4c 59       	subi	r20, 0x9C	; 156
   1ad82:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad84:	0e 94 0a c5 	call	0x18a14	; 0x18a14 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1ad88:	81 e0       	ldi	r24, 0x01	; 1
   1ad8a:	90 e8       	ldi	r25, 0x80	; 128
   1ad8c:	f8 01       	movw	r30, r16
   1ad8e:	e6 59       	subi	r30, 0x96	; 150
   1ad90:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad92:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1ad94:	80 83       	st	Z, r24
   1ad96:	32 96       	adiw	r30, 0x02	; 2
   1ad98:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1ad9a:	80 82       	st	Z, r8
   1ad9c:	80 e0       	ldi	r24, 0x00	; 0
   1ad9e:	91 e0       	ldi	r25, 0x01	; 1
   1ada0:	32 96       	adiw	r30, 0x02	; 2
   1ada2:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ada4:	80 83       	st	Z, r24
   1ada6:	58 01       	movw	r10, r16
   1ada8:	fc e5       	ldi	r31, 0x5C	; 92
   1adaa:	af 0e       	add	r10, r31
   1adac:	b1 1c       	adc	r11, r1
   1adae:	f5 01       	movw	r30, r10
   1adb0:	80 81       	ld	r24, Z
   1adb2:	91 81       	ldd	r25, Z+1	; 0x01
   1adb4:	a2 81       	ldd	r26, Z+2	; 0x02
   1adb6:	b3 81       	ldd	r27, Z+3	; 0x03
   1adb8:	22 24       	eor	r2, r2
   1adba:	38 2e       	mov	r3, r24
   1adbc:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1adbe:	5a 2e       	mov	r5, r26
   1adc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1adc4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1adc8:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1adca:	05 c0       	rjmp	.+10     	; 0x1add6 <lif_add_ascii_file_as_e010+0x188>
   1adcc:	67 ef       	ldi	r22, 0xF7	; 247
   1adce:	75 e1       	ldi	r23, 0x15	; 21
   1add0:	c8 01       	movw	r24, r16
   1add2:	0e 94 f6 c5 	call	0x18bec	; 0x18bec <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1add6:	97 01       	movw	r18, r14
   1add8:	b2 01       	movw	r22, r4
   1adda:	a1 01       	movw	r20, r2
   1addc:	c8 01       	movw	r24, r16
   1adde:	2a de       	rcall	.-940    	; 0x1aa34 <lif_add_ascii_file_as_e010_wrapper>
   1ade0:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1ade2:	7c 01       	movw	r14, r24
   1ade4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ade8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1adec:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1adee:	40 c0       	rjmp	.+128    	; 0x1ae70 <lif_add_ascii_file_as_e010+0x222>
   1adf0:	88 ec       	ldi	r24, 0xC8	; 200
   1adf2:	97 e3       	ldi	r25, 0x37	; 55
   1adf4:	1f 92       	push	r1
   1adf6:	9f 93       	push	r25
   1adf8:	8f 93       	push	r24
   1adfa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1adfe:	df 92       	push	r13
   1ae00:	cf 92       	push	r12
   1ae02:	81 eb       	ldi	r24, 0xB1	; 177
   1ae04:	97 e3       	ldi	r25, 0x37	; 55
   1ae06:	1f 92       	push	r1
   1ae08:	9f 93       	push	r25
   1ae0a:	8f 93       	push	r24
   1ae0c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1ae10:	7f 92       	push	r7
   1ae12:	6f 92       	push	r6
   1ae14:	8a e9       	ldi	r24, 0x9A	; 154
   1ae16:	97 e3       	ldi	r25, 0x37	; 55
   1ae18:	1f 92       	push	r1
   1ae1a:	9f 93       	push	r25
   1ae1c:	8f 93       	push	r24
   1ae1e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1ae22:	f5 01       	movw	r30, r10
   1ae24:	83 81       	ldd	r24, Z+3	; 0x03
   1ae26:	8f 93       	push	r24
   1ae28:	82 81       	ldd	r24, Z+2	; 0x02
   1ae2a:	8f 93       	push	r24
   1ae2c:	81 81       	ldd	r24, Z+1	; 0x01
   1ae2e:	8f 93       	push	r24
   1ae30:	80 81       	ld	r24, Z
   1ae32:	8f 93       	push	r24
   1ae34:	81 e8       	ldi	r24, 0x81	; 129
   1ae36:	97 e3       	ldi	r25, 0x37	; 55
   1ae38:	1f 92       	push	r1
   1ae3a:	9f 93       	push	r25
   1ae3c:	8f 93       	push	r24
   1ae3e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1ae42:	f8 01       	movw	r30, r16
   1ae44:	e0 5a       	subi	r30, 0xA0	; 160
   1ae46:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae48:	83 81       	ldd	r24, Z+3	; 0x03
   1ae4a:	8f 93       	push	r24
   1ae4c:	82 81       	ldd	r24, Z+2	; 0x02
   1ae4e:	8f 93       	push	r24
   1ae50:	81 81       	ldd	r24, Z+1	; 0x01
   1ae52:	8f 93       	push	r24
   1ae54:	80 81       	ld	r24, Z
   1ae56:	8f 93       	push	r24
   1ae58:	88 e6       	ldi	r24, 0x68	; 104
   1ae5a:	97 e3       	ldi	r25, 0x37	; 55
   1ae5c:	1f 92       	push	r1
   1ae5e:	9f 93       	push	r25
   1ae60:	8f 93       	push	r24
   1ae62:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1ae66:	0f b6       	in	r0, 0x3f	; 63
   1ae68:	f8 94       	cli
   1ae6a:	de bf       	out	0x3e, r29	; 62
   1ae6c:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1ae6e:	cd bf       	out	0x3d, r28	; 61
   1ae70:	b3 01       	movw	r22, r6
   1ae72:	c8 01       	movw	r24, r16
   1ae74:	0e 94 01 cb 	call	0x19602	; 0x19602 <lif_writedirindex>
   1ae78:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae7a:	21 f4       	brne	.+8      	; 0x1ae84 <lif_add_ascii_file_as_e010+0x236>
   1ae7c:	c8 01       	movw	r24, r16
   1ae7e:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1ae82:	16 c0       	rjmp	.+44     	; 0x1aeb0 <lif_add_ascii_file_as_e010+0x262>
   1ae84:	c8 01       	movw	r24, r16
   1ae86:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1ae8a:	ff 92       	push	r15
   1ae8c:	ef 92       	push	r14
   1ae8e:	9f 92       	push	r9
   1ae90:	8f 92       	push	r8
   1ae92:	8a e5       	ldi	r24, 0x5A	; 90
   1ae94:	97 e3       	ldi	r25, 0x37	; 55
   1ae96:	1f 92       	push	r1
   1ae98:	9f 93       	push	r25
   1ae9a:	8f 93       	push	r24
   1ae9c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    // Return file size
    return(bytes);
   1aea0:	0f b6       	in	r0, 0x3f	; 63
   1aea2:	f8 94       	cli
   1aea4:	de bf       	out	0x3e, r29	; 62
   1aea6:	0f be       	out	0x3f, r0	; 63
   1aea8:	cd bf       	out	0x3d, r28	; 61
   1aeaa:	b4 01       	movw	r22, r8
   1aeac:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1aeae:	04 c0       	rjmp	.+8      	; 0x1aeb8 <lif_add_ascii_file_as_e010+0x26a>
   1aeb0:	6f ef       	ldi	r22, 0xFF	; 255
   1aeb2:	7f ef       	ldi	r23, 0xFF	; 255
   1aeb4:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1aeb6:	9f ef       	ldi	r25, 0xFF	; 255
   1aeb8:	e2 96       	adiw	r28, 0x32	; 50
   1aeba:	e2 e1       	ldi	r30, 0x12	; 18
   1aebc:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001aec0 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1aec0:	ac e2       	ldi	r26, 0x2C	; 44
   1aec2:	b2 e0       	ldi	r27, 0x02	; 2
   1aec4:	e6 e6       	ldi	r30, 0x66	; 102
   1aec6:	f7 ed       	ldi	r31, 0xD7	; 215
   1aec8:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   1aecc:	f8 2e       	mov	r15, r24
   1aece:	b9 2e       	mov	r11, r25
   1aed0:	16 2f       	mov	r17, r22
   1aed2:	07 2f       	mov	r16, r23
   1aed4:	c4 5e       	subi	r28, 0xE4	; 228
   1aed6:	dd 4f       	sbci	r29, 0xFD	; 253
   1aed8:	48 83       	st	Y, r20
   1aeda:	cc 51       	subi	r28, 0x1C	; 28
   1aedc:	d2 40       	sbci	r29, 0x02	; 2
   1aede:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1aee0:	63 e4       	ldi	r22, 0x43	; 67
   1aee2:	77 e0       	ldi	r23, 0x07	; 7
   1aee4:	9c d9       	rcall	.-3272   	; 0x1a21e <lif_open_volume>
   1aee6:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1aee8:	00 97       	sbiw	r24, 0x00	; 0
   1aeea:	51 f4       	brne	.+20     	; 0x1af00 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aeec:	bf 92       	push	r11
   1aeee:	ff 92       	push	r15
   1aef0:	82 e4       	ldi	r24, 0x42	; 66
   1aef2:	97 e3       	ldi	r25, 0x37	; 55
   1aef4:	1f 92       	push	r1
   1aef6:	9f 93       	push	r25
   1aef8:	8f 93       	push	r24
   1aefa:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1aefe:	11 c0       	rjmp	.+34     	; 0x1af22 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1af00:	61 2f       	mov	r22, r17
   1af02:	70 2f       	mov	r23, r16
   1af04:	20 dc       	rcall	.-1984   	; 0x1a746 <lif_find_file>
    if(index == -1)
   1af06:	01 96       	adiw	r24, 0x01	; 1
   1af08:	a1 f4       	brne	.+40     	; 0x1af32 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1af0a:	0f 93       	push	r16
   1af0c:	1f 93       	push	r17
   1af0e:	8b e2       	ldi	r24, 0x2B	; 43
   1af10:	97 e3       	ldi	r25, 0x37	; 55
   1af12:	1f 92       	push	r1
   1af14:	9f 93       	push	r25
   1af16:	8f 93       	push	r24
   1af18:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af1c:	c6 01       	movw	r24, r12
   1af1e:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1af22:	0f 90       	pop	r0
   1af24:	0f 90       	pop	r0
   1af26:	0f 90       	pop	r0
   1af28:	0f 90       	pop	r0
   1af2a:	0f 90       	pop	r0
   1af2c:	80 e0       	ldi	r24, 0x00	; 0
   1af2e:	90 e0       	ldi	r25, 0x00	; 0
   1af30:	ae c2       	rjmp	.+1372   	; 0x1b48e <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1af32:	f6 01       	movw	r30, r12
   1af34:	e6 5a       	subi	r30, 0xA6	; 166
   1af36:	ff 4f       	sbci	r31, 0xFF	; 255
   1af38:	80 81       	ld	r24, Z
   1af3a:	91 81       	ldd	r25, Z+1	; 0x01
   1af3c:	9c 01       	movw	r18, r24
   1af3e:	2c 7f       	andi	r18, 0xFC	; 252
   1af40:	20 31       	cpi	r18, 0x10	; 16
   1af42:	30 4e       	sbci	r19, 0xE0	; 224
   1af44:	c9 f0       	breq	.+50     	; 0x1af78 <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1af46:	9f 93       	push	r25
   1af48:	8f 93       	push	r24
   1af4a:	ef 92       	push	r14
   1af4c:	c4 5e       	subi	r28, 0xE4	; 228
   1af4e:	dd 4f       	sbci	r29, 0xFD	; 253
   1af50:	58 81       	ld	r21, Y
   1af52:	cc 51       	subi	r28, 0x1C	; 28
   1af54:	d2 40       	sbci	r29, 0x02	; 2
   1af56:	5f 93       	push	r21
   1af58:	83 ef       	ldi	r24, 0xF3	; 243
   1af5a:	96 e3       	ldi	r25, 0x36	; 54
   1af5c:	1f 92       	push	r1
   1af5e:	9f 93       	push	r25
   1af60:	8f 93       	push	r24
   1af62:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af66:	c6 01       	movw	r24, r12
   1af68:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1af6c:	0f b6       	in	r0, 0x3f	; 63
   1af6e:	f8 94       	cli
   1af70:	de bf       	out	0x3e, r29	; 62
   1af72:	0f be       	out	0x3f, r0	; 63
   1af74:	cd bf       	out	0x3d, r28	; 61
   1af76:	da cf       	rjmp	.-76     	; 0x1af2c <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1af78:	f6 01       	movw	r30, r12
   1af7a:	e4 5a       	subi	r30, 0xA4	; 164
   1af7c:	ff 4f       	sbci	r31, 0xFF	; 255
   1af7e:	80 80       	ld	r8, Z
   1af80:	91 80       	ldd	r9, Z+1	; 0x01
   1af82:	a2 80       	ldd	r10, Z+2	; 0x02
   1af84:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1af86:	34 96       	adiw	r30, 0x04	; 4
   1af88:	80 81       	ld	r24, Z
   1af8a:	91 81       	ldd	r25, Z+1	; 0x01
   1af8c:	a2 81       	ldd	r26, Z+2	; 0x02
   1af8e:	b3 81       	ldd	r27, Z+3	; 0x03
   1af90:	a5 01       	movw	r20, r10
   1af92:	94 01       	movw	r18, r8
   1af94:	28 0f       	add	r18, r24
   1af96:	39 1f       	adc	r19, r25
   1af98:	4a 1f       	adc	r20, r26
   1af9a:	5b 1f       	adc	r21, r27
   1af9c:	c9 5d       	subi	r28, 0xD9	; 217
   1af9e:	dd 4f       	sbci	r29, 0xFD	; 253
   1afa0:	28 83       	st	Y, r18
   1afa2:	39 83       	std	Y+1, r19	; 0x01
   1afa4:	4a 83       	std	Y+2, r20	; 0x02
   1afa6:	5b 83       	std	Y+3, r21	; 0x03
   1afa8:	c7 52       	subi	r28, 0x27	; 39
   1afaa:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1afac:	c6 01       	movw	r24, r12
   1afae:	8c 59       	subi	r24, 0x9C	; 156
   1afb0:	9f 4f       	sbci	r25, 0xFF	; 255
   1afb2:	0e 94 4c c5 	call	0x18a98	; 0x18a98 <lif_lifbcd2time>
   1afb6:	c3 5e       	subi	r28, 0xE3	; 227
   1afb8:	dd 4f       	sbci	r29, 0xFD	; 253
   1afba:	68 83       	st	Y, r22
   1afbc:	79 83       	std	Y+1, r23	; 0x01
   1afbe:	8a 83       	std	Y+2, r24	; 0x02
   1afc0:	9b 83       	std	Y+3, r25	; 0x03
   1afc2:	cd 51       	subi	r28, 0x1D	; 29
   1afc4:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1afc6:	ba 2d       	mov	r27, r10
   1afc8:	a9 2d       	mov	r26, r9
   1afca:	98 2d       	mov	r25, r8
   1afcc:	88 27       	eor	r24, r24
   1afce:	cf 5e       	subi	r28, 0xEF	; 239
   1afd0:	dd 4f       	sbci	r29, 0xFD	; 253
   1afd2:	88 83       	st	Y, r24
   1afd4:	99 83       	std	Y+1, r25	; 0x01
   1afd6:	aa 83       	std	Y+2, r26	; 0x02
   1afd8:	bb 83       	std	Y+3, r27	; 0x03
   1afda:	c1 51       	subi	r28, 0x11	; 17
   1afdc:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1afde:	66 e9       	ldi	r22, 0x96	; 150
   1afe0:	78 e0       	ldi	r23, 0x08	; 8
   1afe2:	c4 5e       	subi	r28, 0xE4	; 228
   1afe4:	dd 4f       	sbci	r29, 0xFD	; 253
   1afe6:	88 81       	ld	r24, Y
   1afe8:	cc 51       	subi	r28, 0x1C	; 28
   1afea:	d2 40       	sbci	r29, 0x02	; 2
   1afec:	9e 2d       	mov	r25, r14
   1afee:	0e 94 f9 c0 	call	0x181f2	; 0x181f2 <lif_open>
   1aff2:	c6 5e       	subi	r28, 0xE6	; 230
   1aff4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aff6:	99 83       	std	Y+1, r25	; 0x01
   1aff8:	88 83       	st	Y, r24
   1affa:	ca 51       	subi	r28, 0x1A	; 26
   1affc:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1affe:	89 2b       	or	r24, r25
   1b000:	21 f4       	brne	.+8      	; 0x1b00a <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b002:	c6 01       	movw	r24, r12
   1b004:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b008:	91 cf       	rjmp	.-222    	; 0x1af2c <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b00a:	ef 92       	push	r14
   1b00c:	c4 5e       	subi	r28, 0xE4	; 228
   1b00e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b010:	98 81       	ld	r25, Y
   1b012:	cc 51       	subi	r28, 0x1C	; 28
   1b014:	d2 40       	sbci	r29, 0x02	; 2
   1b016:	9f 93       	push	r25
   1b018:	83 ee       	ldi	r24, 0xE3	; 227
   1b01a:	96 e3       	ldi	r25, 0x36	; 54
   1b01c:	1f 92       	push	r1
   1b01e:	9f 93       	push	r25
   1b020:	8f 93       	push	r24
   1b022:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b026:	0f 90       	pop	r0
   1b028:	0f 90       	pop	r0
   1b02a:	0f 90       	pop	r0
   1b02c:	0f 90       	pop	r0
   1b02e:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1b030:	81 2c       	mov	r8, r1
   1b032:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b034:	c8 5e       	subi	r28, 0xE8	; 232
   1b036:	dd 4f       	sbci	r29, 0xFD	; 253
   1b038:	19 82       	std	Y+1, r1	; 0x01
   1b03a:	18 82       	st	Y, r1
   1b03c:	c8 51       	subi	r28, 0x18	; 24
   1b03e:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b040:	a1 e0       	ldi	r26, 0x01	; 1
   1b042:	cb 5e       	subi	r28, 0xEB	; 235
   1b044:	dd 4f       	sbci	r29, 0xFD	; 253
   1b046:	a8 83       	st	Y, r26
   1b048:	c5 51       	subi	r28, 0x15	; 21
   1b04a:	d2 40       	sbci	r29, 0x02	; 2
   1b04c:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b04e:	41 2c       	mov	r4, r1
   1b050:	51 2c       	mov	r5, r1
   1b052:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b054:	82 e2       	ldi	r24, 0x22	; 34
   1b056:	96 e3       	ldi	r25, 0x36	; 54
   1b058:	9c 01       	movw	r18, r24
   1b05a:	40 e0       	ldi	r20, 0x00	; 0
   1b05c:	cf 5d       	subi	r28, 0xDF	; 223
   1b05e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b060:	28 83       	st	Y, r18
   1b062:	39 83       	std	Y+1, r19	; 0x01
   1b064:	4a 83       	std	Y+2, r20	; 0x02
   1b066:	c1 52       	subi	r28, 0x21	; 33
   1b068:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b06a:	80 e3       	ldi	r24, 0x30	; 48
   1b06c:	96 e3       	ldi	r25, 0x36	; 54
   1b06e:	9c 01       	movw	r18, r24
   1b070:	40 e0       	ldi	r20, 0x00	; 0
   1b072:	cc 5d       	subi	r28, 0xDC	; 220
   1b074:	dd 4f       	sbci	r29, 0xFD	; 253
   1b076:	28 83       	st	Y, r18
   1b078:	39 83       	std	Y+1, r19	; 0x01
   1b07a:	4a 83       	std	Y+2, r20	; 0x02
   1b07c:	c4 52       	subi	r28, 0x24	; 36
   1b07e:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b080:	cf 5e       	subi	r28, 0xEF	; 239
   1b082:	dd 4f       	sbci	r29, 0xFD	; 253
   1b084:	28 81       	ld	r18, Y
   1b086:	39 81       	ldd	r19, Y+1	; 0x01
   1b088:	4a 81       	ldd	r20, Y+2	; 0x02
   1b08a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b08c:	c1 51       	subi	r28, 0x11	; 17
   1b08e:	d2 40       	sbci	r29, 0x02	; 2
   1b090:	bb 27       	eor	r27, r27
   1b092:	a5 2f       	mov	r26, r21
   1b094:	94 2f       	mov	r25, r20
   1b096:	83 2f       	mov	r24, r19
   1b098:	c9 5d       	subi	r28, 0xD9	; 217
   1b09a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b09c:	28 81       	ld	r18, Y
   1b09e:	39 81       	ldd	r19, Y+1	; 0x01
   1b0a0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b0a2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b0a4:	c7 52       	subi	r28, 0x27	; 39
   1b0a6:	d2 40       	sbci	r29, 0x02	; 2
   1b0a8:	28 17       	cp	r18, r24
   1b0aa:	39 07       	cpc	r19, r25
   1b0ac:	4a 07       	cpc	r20, r26
   1b0ae:	5b 07       	cpc	r21, r27
   1b0b0:	08 f4       	brcc	.+2      	; 0x1b0b4 <lif_extract_e010_as_ascii+0x1f4>
   1b0b2:	76 c1       	rjmp	.+748    	; 0x1b3a0 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b0b4:	00 e0       	ldi	r16, 0x00	; 0
   1b0b6:	11 e0       	ldi	r17, 0x01	; 1
   1b0b8:	cf 5e       	subi	r28, 0xEF	; 239
   1b0ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0bc:	28 81       	ld	r18, Y
   1b0be:	39 81       	ldd	r19, Y+1	; 0x01
   1b0c0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b0c2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b0c4:	c1 51       	subi	r28, 0x11	; 17
   1b0c6:	d2 40       	sbci	r29, 0x02	; 2
   1b0c8:	be 01       	movw	r22, r28
   1b0ca:	6b 5f       	subi	r22, 0xFB	; 251
   1b0cc:	7e 4f       	sbci	r23, 0xFE	; 254
   1b0ce:	c6 01       	movw	r24, r12
   1b0d0:	0e 94 7f c1 	call	0x182fe	; 0x182fe <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b0d4:	6f 3f       	cpi	r22, 0xFF	; 255
   1b0d6:	71 05       	cpc	r23, r1
   1b0d8:	09 f0       	breq	.+2      	; 0x1b0dc <lif_extract_e010_as_ascii+0x21c>
   1b0da:	0c f4       	brge	.+2      	; 0x1b0de <lif_extract_e010_as_ascii+0x21e>
   1b0dc:	5b c1       	rjmp	.+694    	; 0x1b394 <lif_extract_e010_as_ascii+0x4d4>
   1b0de:	00 e0       	ldi	r16, 0x00	; 0
   1b0e0:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b0e2:	c8 5e       	subi	r28, 0xE8	; 232
   1b0e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0e6:	a8 81       	ld	r26, Y
   1b0e8:	b9 81       	ldd	r27, Y+1	; 0x01
   1b0ea:	c8 51       	subi	r28, 0x18	; 24
   1b0ec:	d2 40       	sbci	r29, 0x02	; 2
   1b0ee:	ab 2b       	or	r26, r27
   1b0f0:	09 f0       	breq	.+2      	; 0x1b0f4 <lif_extract_e010_as_ascii+0x234>
   1b0f2:	3c c1       	rjmp	.+632    	; 0x1b36c <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b0f4:	e5 e0       	ldi	r30, 0x05	; 5
   1b0f6:	f1 e0       	ldi	r31, 0x01	; 1
   1b0f8:	ec 0f       	add	r30, r28
   1b0fa:	fd 1f       	adc	r31, r29
   1b0fc:	e0 0f       	add	r30, r16
   1b0fe:	f1 1f       	adc	r31, r17
   1b100:	80 81       	ld	r24, Z
   1b102:	98 2f       	mov	r25, r24
   1b104:	9f 7e       	andi	r25, 0xEF	; 239
   1b106:	9f 3c       	cpi	r25, 0xCF	; 207
   1b108:	11 f0       	breq	.+4      	; 0x1b10e <lif_extract_e010_as_ascii+0x24e>
   1b10a:	8f 36       	cpi	r24, 0x6F	; 111
   1b10c:	d9 f5       	brne	.+118    	; 0x1b184 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b10e:	e5 e0       	ldi	r30, 0x05	; 5
   1b110:	f1 e0       	ldi	r31, 0x01	; 1
   1b112:	ec 0f       	add	r30, r28
   1b114:	fd 1f       	adc	r31, r29
   1b116:	e0 0f       	add	r30, r16
   1b118:	f1 1f       	adc	r31, r17
   1b11a:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b11c:	f8 01       	movw	r30, r16
   1b11e:	32 96       	adiw	r30, 0x02	; 2
   1b120:	45 e0       	ldi	r20, 0x05	; 5
   1b122:	51 e0       	ldi	r21, 0x01	; 1
   1b124:	4c 0f       	add	r20, r28
   1b126:	5d 1f       	adc	r21, r29
   1b128:	e4 0f       	add	r30, r20
   1b12a:	f5 1f       	adc	r31, r21
   1b12c:	0d 5f       	subi	r16, 0xFD	; 253
   1b12e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b130:	80 81       	ld	r24, Z
   1b132:	31 2c       	mov	r3, r1
   1b134:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1b136:	21 14       	cp	r2, r1
   1b138:	31 04       	cpc	r3, r1
   1b13a:	09 f4       	brne	.+2      	; 0x1b13e <lif_extract_e010_as_ascii+0x27e>
   1b13c:	0f c1       	rjmp	.+542    	; 0x1b35c <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b13e:	5f ef       	ldi	r21, 0xFF	; 255
   1b140:	25 16       	cp	r2, r21
   1b142:	31 04       	cpc	r3, r1
   1b144:	09 f0       	breq	.+2      	; 0x1b148 <lif_extract_e010_as_ascii+0x288>
   1b146:	7c f4       	brge	.+30     	; 0x1b166 <lif_extract_e010_as_ascii+0x2a6>
   1b148:	ca 5e       	subi	r28, 0xEA	; 234
   1b14a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b14c:	19 82       	std	Y+1, r1	; 0x01
   1b14e:	18 82       	st	Y, r1
   1b150:	c6 51       	subi	r28, 0x16	; 22
   1b152:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b154:	c1 01       	movw	r24, r2
   1b156:	01 97       	sbiw	r24, 0x01	; 1
   1b158:	c5 5d       	subi	r28, 0xD5	; 213
   1b15a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b15c:	99 83       	std	Y+1, r25	; 0x01
   1b15e:	88 83       	st	Y, r24
   1b160:	cb 52       	subi	r28, 0x2B	; 43
   1b162:	d2 40       	sbci	r29, 0x02	; 2
   1b164:	7b c0       	rjmp	.+246    	; 0x1b25c <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b166:	3f 92       	push	r3
   1b168:	2f 92       	push	r2
   1b16a:	8e ea       	ldi	r24, 0xAE	; 174
   1b16c:	96 e3       	ldi	r25, 0x36	; 54
   1b16e:	1f 92       	push	r1
   1b170:	9f 93       	push	r25
   1b172:	8f 93       	push	r24
   1b174:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1b178:	0f 90       	pop	r0
   1b17a:	0f 90       	pop	r0
   1b17c:	0f 90       	pop	r0
   1b17e:	0f 90       	pop	r0
   1b180:	0f 90       	pop	r0
   1b182:	2b c0       	rjmp	.+86     	; 0x1b1da <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1b184:	8f 3e       	cpi	r24, 0xEF	; 239
   1b186:	09 f4       	brne	.+2      	; 0x1b18a <lif_extract_e010_as_ascii+0x2ca>
   1b188:	f1 c0       	rjmp	.+482    	; 0x1b36c <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b18a:	1f 93       	push	r17
   1b18c:	0f 93       	push	r16
   1b18e:	cc 5e       	subi	r28, 0xEC	; 236
   1b190:	dd 4f       	sbci	r29, 0xFD	; 253
   1b192:	b8 81       	ld	r27, Y
   1b194:	c4 51       	subi	r28, 0x14	; 20
   1b196:	d2 40       	sbci	r29, 0x02	; 2
   1b198:	bf 93       	push	r27
   1b19a:	cd 5e       	subi	r28, 0xED	; 237
   1b19c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b19e:	28 81       	ld	r18, Y
   1b1a0:	c3 51       	subi	r28, 0x13	; 19
   1b1a2:	d2 40       	sbci	r29, 0x02	; 2
   1b1a4:	2f 93       	push	r18
   1b1a6:	ce 5e       	subi	r28, 0xEE	; 238
   1b1a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1aa:	38 81       	ld	r19, Y
   1b1ac:	c2 51       	subi	r28, 0x12	; 18
   1b1ae:	d2 40       	sbci	r29, 0x02	; 2
   1b1b0:	3f 93       	push	r19
   1b1b2:	cf 5e       	subi	r28, 0xEF	; 239
   1b1b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1b6:	48 81       	ld	r20, Y
   1b1b8:	c1 51       	subi	r28, 0x11	; 17
   1b1ba:	d2 40       	sbci	r29, 0x02	; 2
   1b1bc:	4f 93       	push	r20
   1b1be:	1f 92       	push	r1
   1b1c0:	8f 93       	push	r24
   1b1c2:	88 e5       	ldi	r24, 0x58	; 88
   1b1c4:	96 e3       	ldi	r25, 0x36	; 54
   1b1c6:	1f 92       	push	r1
   1b1c8:	9f 93       	push	r25
   1b1ca:	8f 93       	push	r24
   1b1cc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                status = 0;
                done = 1;
                break;
   1b1d0:	0f b6       	in	r0, 0x3f	; 63
   1b1d2:	f8 94       	cli
   1b1d4:	de bf       	out	0x3e, r29	; 62
   1b1d6:	0f be       	out	0x3f, r0	; 63
   1b1d8:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1b1da:	a1 e0       	ldi	r26, 0x01	; 1
   1b1dc:	b0 e0       	ldi	r27, 0x00	; 0
   1b1de:	c8 5e       	subi	r28, 0xE8	; 232
   1b1e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1e2:	b9 83       	std	Y+1, r27	; 0x01
   1b1e4:	a8 83       	st	Y, r26
   1b1e6:	c8 51       	subi	r28, 0x18	; 24
   1b1e8:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b1ea:	cb 5e       	subi	r28, 0xEB	; 235
   1b1ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ee:	18 82       	st	Y, r1
   1b1f0:	c5 51       	subi	r28, 0x15	; 21
   1b1f2:	d2 40       	sbci	r29, 0x02	; 2
   1b1f4:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b1f6:	ba c0       	rjmp	.+372    	; 0x1b36c <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b1f8:	0f 3f       	cpi	r16, 0xFF	; 255
   1b1fa:	11 05       	cpc	r17, r1
   1b1fc:	11 f0       	breq	.+4      	; 0x1b202 <lif_extract_e010_as_ascii+0x342>
   1b1fe:	0c f0       	brlt	.+2      	; 0x1b202 <lif_extract_e010_as_ascii+0x342>
   1b200:	b5 c0       	rjmp	.+362    	; 0x1b36c <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b202:	e5 e0       	ldi	r30, 0x05	; 5
   1b204:	f1 e0       	ldi	r31, 0x01	; 1
   1b206:	ec 0f       	add	r30, r28
   1b208:	fd 1f       	adc	r31, r29
   1b20a:	e0 0f       	add	r30, r16
   1b20c:	f1 1f       	adc	r31, r17
   1b20e:	20 81       	ld	r18, Z
   1b210:	a4 01       	movw	r20, r8
   1b212:	4f 5f       	subi	r20, 0xFF	; 255
   1b214:	5f 4f       	sbci	r21, 0xFF	; 255
   1b216:	5a 01       	movw	r10, r20
   1b218:	2d 30       	cpi	r18, 0x0D	; 13
   1b21a:	51 f1       	breq	.+84     	; 0x1b270 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b21c:	9a 2d       	mov	r25, r10
   1b21e:	8b 2d       	mov	r24, r11
   1b220:	0f 5f       	subi	r16, 0xFF	; 255
   1b222:	1f 4f       	sbci	r17, 0xFF	; 255
   1b224:	e1 e0       	ldi	r30, 0x01	; 1
   1b226:	f0 e0       	ldi	r31, 0x00	; 0
   1b228:	ec 0f       	add	r30, r28
   1b22a:	fd 1f       	adc	r31, r29
   1b22c:	e8 0d       	add	r30, r8
   1b22e:	f9 1d       	adc	r31, r9
   1b230:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b232:	2f ef       	ldi	r18, 0xFF	; 255
   1b234:	a2 16       	cp	r10, r18
   1b236:	b1 04       	cpc	r11, r1
   1b238:	09 f0       	breq	.+2      	; 0x1b23c <lif_extract_e010_as_ascii+0x37c>
   1b23a:	ac f5       	brge	.+106    	; 0x1b2a6 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b23c:	ca 5e       	subi	r28, 0xEA	; 234
   1b23e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b240:	48 81       	ld	r20, Y
   1b242:	59 81       	ldd	r21, Y+1	; 0x01
   1b244:	c6 51       	subi	r28, 0x16	; 22
   1b246:	d2 40       	sbci	r29, 0x02	; 2
   1b248:	4f 5f       	subi	r20, 0xFF	; 255
   1b24a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b24c:	ca 5e       	subi	r28, 0xEA	; 234
   1b24e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b250:	59 83       	std	Y+1, r21	; 0x01
   1b252:	48 83       	st	Y, r20
   1b254:	c6 51       	subi	r28, 0x16	; 22
   1b256:	d2 40       	sbci	r29, 0x02	; 2
   1b258:	89 2e       	mov	r8, r25
   1b25a:	98 2e       	mov	r9, r24
   1b25c:	ca 5e       	subi	r28, 0xEA	; 234
   1b25e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b260:	88 81       	ld	r24, Y
   1b262:	99 81       	ldd	r25, Y+1	; 0x01
   1b264:	c6 51       	subi	r28, 0x16	; 22
   1b266:	d2 40       	sbci	r29, 0x02	; 2
   1b268:	82 15       	cp	r24, r2
   1b26a:	93 05       	cpc	r25, r3
   1b26c:	2c f2       	brlt	.-118    	; 0x1b1f8 <lif_extract_e010_as_ascii+0x338>
   1b26e:	70 c0       	rjmp	.+224    	; 0x1b350 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b270:	ca 5e       	subi	r28, 0xEA	; 234
   1b272:	dd 4f       	sbci	r29, 0xFD	; 253
   1b274:	88 81       	ld	r24, Y
   1b276:	99 81       	ldd	r25, Y+1	; 0x01
   1b278:	c6 51       	subi	r28, 0x16	; 22
   1b27a:	d2 40       	sbci	r29, 0x02	; 2
   1b27c:	c5 5d       	subi	r28, 0xD5	; 213
   1b27e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b280:	a8 81       	ld	r26, Y
   1b282:	b9 81       	ldd	r27, Y+1	; 0x01
   1b284:	cb 52       	subi	r28, 0x2B	; 43
   1b286:	d2 40       	sbci	r29, 0x02	; 2
   1b288:	8a 17       	cp	r24, r26
   1b28a:	9b 07       	cpc	r25, r27
   1b28c:	39 f6       	brne	.-114    	; 0x1b21c <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1b28e:	e1 e0       	ldi	r30, 0x01	; 1
   1b290:	f0 e0       	ldi	r31, 0x00	; 0
   1b292:	ec 0f       	add	r30, r28
   1b294:	fd 1f       	adc	r31, r29
   1b296:	e8 0d       	add	r30, r8
   1b298:	f9 1d       	adc	r31, r9
   1b29a:	ba e0       	ldi	r27, 0x0A	; 10
   1b29c:	b0 83       	st	Z, r27
                    ++ind;
   1b29e:	0f 5f       	subi	r16, 0xFF	; 255
   1b2a0:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b2a2:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1b2a4:	55 c0       	rjmp	.+170    	; 0x1b350 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b2a6:	c6 5e       	subi	r28, 0xE6	; 230
   1b2a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2aa:	28 81       	ld	r18, Y
   1b2ac:	39 81       	ldd	r19, Y+1	; 0x01
   1b2ae:	ca 51       	subi	r28, 0x1A	; 26
   1b2b0:	d2 40       	sbci	r29, 0x02	; 2
   1b2b2:	a5 01       	movw	r20, r10
   1b2b4:	61 e0       	ldi	r22, 0x01	; 1
   1b2b6:	70 e0       	ldi	r23, 0x00	; 0
   1b2b8:	ce 01       	movw	r24, r28
   1b2ba:	01 96       	adiw	r24, 0x01	; 1
   1b2bc:	0e 94 2d 7e 	call	0xfc5a	; 0xfc5a <fwrite>
                    if(size < wind)
   1b2c0:	8a 15       	cp	r24, r10
   1b2c2:	9b 05       	cpc	r25, r11
   1b2c4:	14 f5       	brge	.+68     	; 0x1b30a <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b2c6:	1f 92       	push	r1
   1b2c8:	cb 5d       	subi	r28, 0xDB	; 219
   1b2ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2cc:	38 81       	ld	r19, Y
   1b2ce:	c5 52       	subi	r28, 0x25	; 37
   1b2d0:	d2 40       	sbci	r29, 0x02	; 2
   1b2d2:	3f 93       	push	r19
   1b2d4:	cc 5d       	subi	r28, 0xDC	; 220
   1b2d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2d8:	48 81       	ld	r20, Y
   1b2da:	c4 52       	subi	r28, 0x24	; 36
   1b2dc:	d2 40       	sbci	r29, 0x02	; 2
   1b2de:	4f 93       	push	r20
   1b2e0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1b2e4:	0f 90       	pop	r0
   1b2e6:	0f 90       	pop	r0
   1b2e8:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b2ea:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b2ec:	81 e0       	ldi	r24, 0x01	; 1
   1b2ee:	90 e0       	ldi	r25, 0x00	; 0
   1b2f0:	c8 5e       	subi	r28, 0xE8	; 232
   1b2f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f4:	99 83       	std	Y+1, r25	; 0x01
   1b2f6:	88 83       	st	Y, r24
   1b2f8:	c8 51       	subi	r28, 0x18	; 24
   1b2fa:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b2fc:	cb 5e       	subi	r28, 0xEB	; 235
   1b2fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b300:	18 82       	st	Y, r1
   1b302:	c5 51       	subi	r28, 0x15	; 21
   1b304:	d2 40       	sbci	r29, 0x02	; 2
   1b306:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b308:	23 c0       	rjmp	.+70     	; 0x1b350 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1b30a:	09 2e       	mov	r0, r25
   1b30c:	00 0c       	add	r0, r0
   1b30e:	aa 0b       	sbc	r26, r26
   1b310:	bb 0b       	sbc	r27, r27
   1b312:	48 0e       	add	r4, r24
   1b314:	59 1e       	adc	r5, r25
   1b316:	6a 1e       	adc	r6, r26
   1b318:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b31a:	7f 92       	push	r7
   1b31c:	6f 92       	push	r6
   1b31e:	5f 92       	push	r5
   1b320:	4f 92       	push	r4
   1b322:	1f 92       	push	r1
   1b324:	ce 5d       	subi	r28, 0xDE	; 222
   1b326:	dd 4f       	sbci	r29, 0xFD	; 253
   1b328:	98 81       	ld	r25, Y
   1b32a:	c2 52       	subi	r28, 0x22	; 34
   1b32c:	d2 40       	sbci	r29, 0x02	; 2
   1b32e:	9f 93       	push	r25
   1b330:	cf 5d       	subi	r28, 0xDF	; 223
   1b332:	dd 4f       	sbci	r29, 0xFD	; 253
   1b334:	a8 81       	ld	r26, Y
   1b336:	c1 52       	subi	r28, 0x21	; 33
   1b338:	d2 40       	sbci	r29, 0x02	; 2
   1b33a:	af 93       	push	r26
   1b33c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1b340:	0f b6       	in	r0, 0x3f	; 63
   1b342:	f8 94       	cli
   1b344:	de bf       	out	0x3e, r29	; 62
   1b346:	0f be       	out	0x3f, r0	; 63
   1b348:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1b34a:	90 e0       	ldi	r25, 0x00	; 0
   1b34c:	80 e0       	ldi	r24, 0x00	; 0
   1b34e:	76 cf       	rjmp	.-276    	; 0x1b23c <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b350:	0f 3f       	cpi	r16, 0xFF	; 255
   1b352:	11 05       	cpc	r17, r1
   1b354:	09 f0       	breq	.+2      	; 0x1b358 <lif_extract_e010_as_ascii+0x498>
   1b356:	0c f4       	brge	.+2      	; 0x1b35a <lif_extract_e010_as_ascii+0x49a>
   1b358:	c4 ce       	rjmp	.-632    	; 0x1b0e2 <lif_extract_e010_as_ascii+0x222>
   1b35a:	08 c0       	rjmp	.+16     	; 0x1b36c <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b35c:	21 e0       	ldi	r18, 0x01	; 1
   1b35e:	30 e0       	ldi	r19, 0x00	; 0
   1b360:	c8 5e       	subi	r28, 0xE8	; 232
   1b362:	dd 4f       	sbci	r29, 0xFD	; 253
   1b364:	39 83       	std	Y+1, r19	; 0x01
   1b366:	28 83       	st	Y, r18
   1b368:	c8 51       	subi	r28, 0x18	; 24
   1b36a:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b36c:	cf 5e       	subi	r28, 0xEF	; 239
   1b36e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b370:	88 81       	ld	r24, Y
   1b372:	99 81       	ldd	r25, Y+1	; 0x01
   1b374:	aa 81       	ldd	r26, Y+2	; 0x02
   1b376:	bb 81       	ldd	r27, Y+3	; 0x03
   1b378:	c1 51       	subi	r28, 0x11	; 17
   1b37a:	d2 40       	sbci	r29, 0x02	; 2
   1b37c:	9f 5f       	subi	r25, 0xFF	; 255
   1b37e:	af 4f       	sbci	r26, 0xFF	; 255
   1b380:	bf 4f       	sbci	r27, 0xFF	; 255
   1b382:	cf 5e       	subi	r28, 0xEF	; 239
   1b384:	dd 4f       	sbci	r29, 0xFD	; 253
   1b386:	88 83       	st	Y, r24
   1b388:	99 83       	std	Y+1, r25	; 0x01
   1b38a:	aa 83       	std	Y+2, r26	; 0x02
   1b38c:	bb 83       	std	Y+3, r27	; 0x03
   1b38e:	c1 51       	subi	r28, 0x11	; 17
   1b390:	d2 40       	sbci	r29, 0x02	; 2
   1b392:	76 ce       	rjmp	.-788    	; 0x1b080 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b394:	cb 5e       	subi	r28, 0xEB	; 235
   1b396:	dd 4f       	sbci	r29, 0xFD	; 253
   1b398:	18 82       	st	Y, r1
   1b39a:	c5 51       	subi	r28, 0x15	; 21
   1b39c:	d2 40       	sbci	r29, 0x02	; 2
   1b39e:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3a0:	c6 01       	movw	r24, r12
   1b3a2:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b3a6:	81 14       	cp	r8, r1
   1b3a8:	91 04       	cpc	r9, r1
   1b3aa:	51 f1       	breq	.+84     	; 0x1b400 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b3ac:	c6 5e       	subi	r28, 0xE6	; 230
   1b3ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3b0:	28 81       	ld	r18, Y
   1b3b2:	39 81       	ldd	r19, Y+1	; 0x01
   1b3b4:	ca 51       	subi	r28, 0x1A	; 26
   1b3b6:	d2 40       	sbci	r29, 0x02	; 2
   1b3b8:	a4 01       	movw	r20, r8
   1b3ba:	61 e0       	ldi	r22, 0x01	; 1
   1b3bc:	70 e0       	ldi	r23, 0x00	; 0
   1b3be:	ce 01       	movw	r24, r28
   1b3c0:	01 96       	adiw	r24, 0x01	; 1
   1b3c2:	0e 94 2d 7e 	call	0xfc5a	; 0xfc5a <fwrite>
   1b3c6:	8c 01       	movw	r16, r24
        if(size < wind)
   1b3c8:	88 15       	cp	r24, r8
   1b3ca:	99 05       	cpc	r25, r9
   1b3cc:	84 f4       	brge	.+32     	; 0x1b3ee <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b3ce:	8a ef       	ldi	r24, 0xFA	; 250
   1b3d0:	95 e3       	ldi	r25, 0x35	; 53
   1b3d2:	1f 92       	push	r1
   1b3d4:	9f 93       	push	r25
   1b3d6:	8f 93       	push	r24
   1b3d8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1b3dc:	0f 90       	pop	r0
   1b3de:	0f 90       	pop	r0
   1b3e0:	0f 90       	pop	r0
            status = 0;
   1b3e2:	cb 5e       	subi	r28, 0xEB	; 235
   1b3e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e6:	18 82       	st	Y, r1
   1b3e8:	c5 51       	subi	r28, 0x15	; 21
   1b3ea:	d2 40       	sbci	r29, 0x02	; 2
   1b3ec:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b3ee:	c8 01       	movw	r24, r16
   1b3f0:	01 2e       	mov	r0, r17
   1b3f2:	00 0c       	add	r0, r0
   1b3f4:	aa 0b       	sbc	r26, r26
   1b3f6:	bb 0b       	sbc	r27, r27
   1b3f8:	48 0e       	add	r4, r24
   1b3fa:	59 1e       	adc	r5, r25
   1b3fc:	6a 1e       	adc	r6, r26
   1b3fe:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b400:	c6 5e       	subi	r28, 0xE6	; 230
   1b402:	dd 4f       	sbci	r29, 0xFD	; 253
   1b404:	88 81       	ld	r24, Y
   1b406:	99 81       	ldd	r25, Y+1	; 0x01
   1b408:	ca 51       	subi	r28, 0x1A	; 26
   1b40a:	d2 40       	sbci	r29, 0x02	; 2
   1b40c:	0e 94 af 7e 	call	0xfd5e	; 0xfd5e <fclose>
    if(t)
   1b410:	c3 5e       	subi	r28, 0xE3	; 227
   1b412:	dd 4f       	sbci	r29, 0xFD	; 253
   1b414:	88 81       	ld	r24, Y
   1b416:	99 81       	ldd	r25, Y+1	; 0x01
   1b418:	aa 81       	ldd	r26, Y+2	; 0x02
   1b41a:	bb 81       	ldd	r27, Y+3	; 0x03
   1b41c:	cd 51       	subi	r28, 0x1D	; 29
   1b41e:	d2 40       	sbci	r29, 0x02	; 2
   1b420:	00 97       	sbiw	r24, 0x00	; 0
   1b422:	a1 05       	cpc	r26, r1
   1b424:	b1 05       	cpc	r27, r1
   1b426:	d9 f0       	breq	.+54     	; 0x1b45e <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1b428:	c3 5f       	subi	r28, 0xF3	; 243
   1b42a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b42c:	88 83       	st	Y, r24
   1b42e:	99 83       	std	Y+1, r25	; 0x01
   1b430:	aa 83       	std	Y+2, r26	; 0x02
   1b432:	bb 83       	std	Y+3, r27	; 0x03
   1b434:	cd 50       	subi	r28, 0x0D	; 13
   1b436:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b438:	c7 5f       	subi	r28, 0xF7	; 247
   1b43a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b43c:	88 83       	st	Y, r24
   1b43e:	99 83       	std	Y+1, r25	; 0x01
   1b440:	aa 83       	std	Y+2, r26	; 0x02
   1b442:	bb 83       	std	Y+3, r27	; 0x03
   1b444:	c9 50       	subi	r28, 0x09	; 9
   1b446:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b448:	be 01       	movw	r22, r28
   1b44a:	67 5f       	subi	r22, 0xF7	; 247
   1b44c:	7d 4f       	sbci	r23, 0xFD	; 253
   1b44e:	c4 5e       	subi	r28, 0xE4	; 228
   1b450:	dd 4f       	sbci	r29, 0xFD	; 253
   1b452:	88 81       	ld	r24, Y
   1b454:	cc 51       	subi	r28, 0x1C	; 28
   1b456:	d2 40       	sbci	r29, 0x02	; 2
   1b458:	9e 2d       	mov	r25, r14
   1b45a:	0e 94 ed 7b 	call	0xf7da	; 0xf7da <utime>
    }
    sync();
   1b45e:	0e 94 aa 7d 	call	0xfb54	; 0xfb54 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b462:	7f 92       	push	r7
   1b464:	6f 92       	push	r6
   1b466:	5f 92       	push	r5
   1b468:	4f 92       	push	r4
   1b46a:	8c ee       	ldi	r24, 0xEC	; 236
   1b46c:	95 e3       	ldi	r25, 0x35	; 53
   1b46e:	1f 92       	push	r1
   1b470:	9f 93       	push	r25
   1b472:	8f 93       	push	r24
   1b474:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    return(status);
   1b478:	0f b6       	in	r0, 0x3f	; 63
   1b47a:	f8 94       	cli
   1b47c:	de bf       	out	0x3e, r29	; 62
   1b47e:	0f be       	out	0x3f, r0	; 63
   1b480:	cd bf       	out	0x3d, r28	; 61
   1b482:	cb 5e       	subi	r28, 0xEB	; 235
   1b484:	dd 4f       	sbci	r29, 0xFD	; 253
   1b486:	88 81       	ld	r24, Y
   1b488:	c5 51       	subi	r28, 0x15	; 21
   1b48a:	d2 40       	sbci	r29, 0x02	; 2
   1b48c:	9f 2d       	mov	r25, r15
}
   1b48e:	c4 5d       	subi	r28, 0xD4	; 212
   1b490:	dd 4f       	sbci	r29, 0xFD	; 253
   1b492:	e2 e1       	ldi	r30, 0x12	; 18
   1b494:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001b498 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b498:	ad e0       	ldi	r26, 0x0D	; 13
   1b49a:	b1 e0       	ldi	r27, 0x01	; 1
   1b49c:	e2 e5       	ldi	r30, 0x52	; 82
   1b49e:	fa ed       	ldi	r31, 0xDA	; 218
   1b4a0:	0c 94 29 e4 	jmp	0x1c852	; 0x1c852 <__prologue_saves__>
   1b4a4:	f8 2e       	mov	r15, r24
   1b4a6:	e9 2e       	mov	r14, r25
   1b4a8:	16 2f       	mov	r17, r22
   1b4aa:	07 2f       	mov	r16, r23
   1b4ac:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b4ae:	63 e4       	ldi	r22, 0x43	; 67
   1b4b0:	77 e0       	ldi	r23, 0x07	; 7
   1b4b2:	0e 94 0f d1 	call	0x1a21e	; 0x1a21e <lif_open_volume>
   1b4b6:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b4b8:	00 97       	sbiw	r24, 0x00	; 0
   1b4ba:	51 f4       	brne	.+20     	; 0x1b4d0 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b4bc:	ef 92       	push	r14
   1b4be:	ff 92       	push	r15
   1b4c0:	84 ed       	ldi	r24, 0xD4	; 212
   1b4c2:	95 e3       	ldi	r25, 0x35	; 53
   1b4c4:	1f 92       	push	r1
   1b4c6:	9f 93       	push	r25
   1b4c8:	8f 93       	push	r24
   1b4ca:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1b4ce:	11 c0       	rjmp	.+34     	; 0x1b4f2 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b4d0:	61 2f       	mov	r22, r17
   1b4d2:	70 2f       	mov	r23, r16
   1b4d4:	38 d9       	rcall	.-3472   	; 0x1a746 <lif_find_file>
    if(index == -1)
   1b4d6:	01 96       	adiw	r24, 0x01	; 1
   1b4d8:	a1 f4       	brne	.+40     	; 0x1b502 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1b4da:	0f 93       	push	r16
   1b4dc:	1f 93       	push	r17
   1b4de:	81 ec       	ldi	r24, 0xC1	; 193
   1b4e0:	95 e3       	ldi	r25, 0x35	; 53
   1b4e2:	1f 92       	push	r1
   1b4e4:	9f 93       	push	r25
   1b4e6:	8f 93       	push	r24
   1b4e8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4ec:	c4 01       	movw	r24, r8
   1b4ee:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b4f2:	0f 90       	pop	r0
   1b4f4:	0f 90       	pop	r0
   1b4f6:	0f 90       	pop	r0
   1b4f8:	0f 90       	pop	r0
   1b4fa:	0f 90       	pop	r0
   1b4fc:	00 e0       	ldi	r16, 0x00	; 0
   1b4fe:	10 e0       	ldi	r17, 0x00	; 0
   1b500:	0c c1       	rjmp	.+536    	; 0x1b71a <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1b502:	a4 01       	movw	r20, r8
   1b504:	40 5a       	subi	r20, 0xA0	; 160
   1b506:	5f 4f       	sbci	r21, 0xFF	; 255
   1b508:	c4 5f       	subi	r28, 0xF4	; 244
   1b50a:	de 4f       	sbci	r29, 0xFE	; 254
   1b50c:	59 83       	std	Y+1, r21	; 0x01
   1b50e:	48 83       	st	Y, r20
   1b510:	cc 50       	subi	r28, 0x0C	; 12
   1b512:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b514:	da 01       	movw	r26, r20
   1b516:	ad 90       	ld	r10, X+
   1b518:	bc 90       	ld	r11, X
   1b51a:	0b 2c       	mov	r0, r11
   1b51c:	00 0c       	add	r0, r0
   1b51e:	cc 08       	sbc	r12, r12
   1b520:	dd 08       	sbc	r13, r13
   1b522:	e1 2c       	mov	r14, r1
   1b524:	f1 2c       	mov	r15, r1
   1b526:	87 01       	movw	r16, r14
   1b528:	e3 94       	inc	r14
   1b52a:	21 e0       	ldi	r18, 0x01	; 1
   1b52c:	30 e0       	ldi	r19, 0x00	; 0
   1b52e:	40 e0       	ldi	r20, 0x00	; 0
   1b530:	50 e0       	ldi	r21, 0x00	; 0
   1b532:	6c e0       	ldi	r22, 0x0C	; 12
   1b534:	76 e1       	ldi	r23, 0x16	; 22
   1b536:	c3 01       	movw	r24, r6
   1b538:	0e 94 7d cc 	call	0x198fa	; 0x198fa <lif_create_volume>
   1b53c:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1b53e:	89 2b       	or	r24, r25
   1b540:	11 f4       	brne	.+4      	; 0x1b546 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b542:	c4 01       	movw	r24, r8
   1b544:	cf c0       	rjmp	.+414    	; 0x1b6e4 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b546:	81 e2       	ldi	r24, 0x21	; 33
   1b548:	f4 01       	movw	r30, r8
   1b54a:	e1 5b       	subi	r30, 0xB1	; 177
   1b54c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b54e:	d5 01       	movw	r26, r10
   1b550:	a1 5b       	subi	r26, 0xB1	; 177
   1b552:	bf 4f       	sbci	r27, 0xFF	; 255
   1b554:	01 90       	ld	r0, Z+
   1b556:	0d 92       	st	X+, r0
   1b558:	8a 95       	dec	r24
   1b55a:	e1 f7       	brne	.-8      	; 0x1b554 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1b55c:	82 e0       	ldi	r24, 0x02	; 2
   1b55e:	90 e0       	ldi	r25, 0x00	; 0
   1b560:	a0 e0       	ldi	r26, 0x00	; 0
   1b562:	b0 e0       	ldi	r27, 0x00	; 0
   1b564:	f5 01       	movw	r30, r10
   1b566:	e4 5a       	subi	r30, 0xA4	; 164
   1b568:	ff 4f       	sbci	r31, 0xFF	; 255
   1b56a:	80 83       	st	Z, r24
   1b56c:	91 83       	std	Z+1, r25	; 0x01
   1b56e:	a2 83       	std	Z+2, r26	; 0x02
   1b570:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b572:	c4 5f       	subi	r28, 0xF4	; 244
   1b574:	de 4f       	sbci	r29, 0xFE	; 254
   1b576:	e8 81       	ld	r30, Y
   1b578:	f9 81       	ldd	r31, Y+1	; 0x01
   1b57a:	cc 50       	subi	r28, 0x0C	; 12
   1b57c:	d1 40       	sbci	r29, 0x01	; 1
   1b57e:	80 81       	ld	r24, Z
   1b580:	91 81       	ldd	r25, Z+1	; 0x01
   1b582:	a2 81       	ldd	r26, Z+2	; 0x02
   1b584:	b3 81       	ldd	r27, Z+3	; 0x03
   1b586:	f5 01       	movw	r30, r10
   1b588:	80 8b       	std	Z+16, r24	; 0x10
   1b58a:	91 8b       	std	Z+17, r25	; 0x11
   1b58c:	a2 8b       	std	Z+18, r26	; 0x12
   1b58e:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b590:	60 e0       	ldi	r22, 0x00	; 0
   1b592:	70 e0       	ldi	r23, 0x00	; 0
   1b594:	c5 01       	movw	r24, r10
   1b596:	0e 94 01 cb 	call	0x19602	; 0x19602 <lif_writedirindex>
   1b59a:	8c 01       	movw	r16, r24
   1b59c:	89 2b       	or	r24, r25
   1b59e:	41 f0       	breq	.+16     	; 0x1b5b0 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b5a0:	61 e0       	ldi	r22, 0x01	; 1
   1b5a2:	70 e0       	ldi	r23, 0x00	; 0
   1b5a4:	c5 01       	movw	r24, r10
   1b5a6:	0e 94 5d cb 	call	0x196ba	; 0x196ba <lif_writedirEOF>
   1b5aa:	8c 01       	movw	r16, r24
   1b5ac:	89 2b       	or	r24, r25
   1b5ae:	39 f4       	brne	.+14     	; 0x1b5be <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5b0:	c4 01       	movw	r24, r8
   1b5b2:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b5b6:	c5 01       	movw	r24, r10
   1b5b8:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b5bc:	ae c0       	rjmp	.+348    	; 0x1b71a <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b5be:	d5 01       	movw	r26, r10
   1b5c0:	1c 96       	adiw	r26, 0x0c	; 12
   1b5c2:	cd 90       	ld	r12, X+
   1b5c4:	dd 90       	ld	r13, X+
   1b5c6:	ed 90       	ld	r14, X+
   1b5c8:	fc 90       	ld	r15, X
   1b5ca:	1f 97       	sbiw	r26, 0x0f	; 15
   1b5cc:	fe 2c       	mov	r15, r14
   1b5ce:	ed 2c       	mov	r14, r13
   1b5d0:	dc 2c       	mov	r13, r12
   1b5d2:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b5d4:	f4 01       	movw	r30, r8
   1b5d6:	e4 5a       	subi	r30, 0xA4	; 164
   1b5d8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5da:	80 81       	ld	r24, Z
   1b5dc:	91 81       	ldd	r25, Z+1	; 0x01
   1b5de:	a2 81       	ldd	r26, Z+2	; 0x02
   1b5e0:	b3 81       	ldd	r27, Z+3	; 0x03
   1b5e2:	22 27       	eor	r18, r18
   1b5e4:	38 2f       	mov	r19, r24
   1b5e6:	49 2f       	mov	r20, r25
   1b5e8:	5a 2f       	mov	r21, r26
   1b5ea:	cb 5f       	subi	r28, 0xFB	; 251
   1b5ec:	de 4f       	sbci	r29, 0xFE	; 254
   1b5ee:	28 83       	st	Y, r18
   1b5f0:	39 83       	std	Y+1, r19	; 0x01
   1b5f2:	4a 83       	std	Y+2, r20	; 0x02
   1b5f4:	5b 83       	std	Y+3, r21	; 0x03
   1b5f6:	c5 50       	subi	r28, 0x05	; 5
   1b5f8:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b5fa:	21 2c       	mov	r2, r1
   1b5fc:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b5fe:	83 eb       	ldi	r24, 0xB3	; 179
   1b600:	95 e3       	ldi	r25, 0x35	; 53
   1b602:	9c 01       	movw	r18, r24
   1b604:	40 e0       	ldi	r20, 0x00	; 0
   1b606:	c7 5f       	subi	r28, 0xF7	; 247
   1b608:	de 4f       	sbci	r29, 0xFE	; 254
   1b60a:	28 83       	st	Y, r18
   1b60c:	39 83       	std	Y+1, r19	; 0x01
   1b60e:	4a 83       	std	Y+2, r20	; 0x02
   1b610:	c9 50       	subi	r28, 0x09	; 9
   1b612:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b614:	41 c0       	rjmp	.+130    	; 0x1b698 <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b616:	00 e0       	ldi	r16, 0x00	; 0
   1b618:	11 e0       	ldi	r17, 0x01	; 1
   1b61a:	a7 01       	movw	r20, r14
   1b61c:	96 01       	movw	r18, r12
   1b61e:	be 01       	movw	r22, r28
   1b620:	6f 5f       	subi	r22, 0xFF	; 255
   1b622:	7f 4f       	sbci	r23, 0xFF	; 255
   1b624:	c5 01       	movw	r24, r10
   1b626:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b62a:	05 2c       	mov	r0, r5
   1b62c:	00 0c       	add	r0, r0
   1b62e:	66 08       	sbc	r6, r6
   1b630:	77 08       	sbc	r7, r7
   1b632:	c4 0c       	add	r12, r4
   1b634:	d5 1c       	adc	r13, r5
   1b636:	e6 1c       	adc	r14, r6
   1b638:	f7 1c       	adc	r15, r7
        offset += size;
   1b63a:	cb 5f       	subi	r28, 0xFB	; 251
   1b63c:	de 4f       	sbci	r29, 0xFE	; 254
   1b63e:	88 81       	ld	r24, Y
   1b640:	99 81       	ldd	r25, Y+1	; 0x01
   1b642:	aa 81       	ldd	r26, Y+2	; 0x02
   1b644:	bb 81       	ldd	r27, Y+3	; 0x03
   1b646:	c5 50       	subi	r28, 0x05	; 5
   1b648:	d1 40       	sbci	r29, 0x01	; 1
   1b64a:	84 0d       	add	r24, r4
   1b64c:	95 1d       	adc	r25, r5
   1b64e:	a6 1d       	adc	r26, r6
   1b650:	b7 1d       	adc	r27, r7
   1b652:	cb 5f       	subi	r28, 0xFB	; 251
   1b654:	de 4f       	sbci	r29, 0xFE	; 254
   1b656:	88 83       	st	Y, r24
   1b658:	99 83       	std	Y+1, r25	; 0x01
   1b65a:	aa 83       	std	Y+2, r26	; 0x02
   1b65c:	bb 83       	std	Y+3, r27	; 0x03
   1b65e:	c5 50       	subi	r28, 0x05	; 5
   1b660:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b662:	ff 92       	push	r15
   1b664:	ef 92       	push	r14
   1b666:	df 92       	push	r13
   1b668:	cf 92       	push	r12
   1b66a:	1f 92       	push	r1
   1b66c:	c6 5f       	subi	r28, 0xF6	; 246
   1b66e:	de 4f       	sbci	r29, 0xFE	; 254
   1b670:	98 81       	ld	r25, Y
   1b672:	ca 50       	subi	r28, 0x0A	; 10
   1b674:	d1 40       	sbci	r29, 0x01	; 1
   1b676:	9f 93       	push	r25
   1b678:	c7 5f       	subi	r28, 0xF7	; 247
   1b67a:	de 4f       	sbci	r29, 0xFE	; 254
   1b67c:	a8 81       	ld	r26, Y
   1b67e:	c9 50       	subi	r28, 0x09	; 9
   1b680:	d1 40       	sbci	r29, 0x01	; 1
   1b682:	af 93       	push	r26
   1b684:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b688:	bf ef       	ldi	r27, 0xFF	; 255
   1b68a:	2b 1a       	sub	r2, r27
   1b68c:	3b 0a       	sbc	r3, r27
   1b68e:	0f b6       	in	r0, 0x3f	; 63
   1b690:	f8 94       	cli
   1b692:	de bf       	out	0x3e, r29	; 62
   1b694:	0f be       	out	0x3f, r0	; 63
   1b696:	cd bf       	out	0x3d, r28	; 61
   1b698:	c4 5f       	subi	r28, 0xF4	; 244
   1b69a:	de 4f       	sbci	r29, 0xFE	; 254
   1b69c:	a8 81       	ld	r26, Y
   1b69e:	b9 81       	ldd	r27, Y+1	; 0x01
   1b6a0:	cc 50       	subi	r28, 0x0C	; 12
   1b6a2:	d1 40       	sbci	r29, 0x01	; 1
   1b6a4:	8d 91       	ld	r24, X+
   1b6a6:	9c 91       	ld	r25, X
   1b6a8:	28 16       	cp	r2, r24
   1b6aa:	39 06       	cpc	r3, r25
   1b6ac:	f4 f4       	brge	.+60     	; 0x1b6ea <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b6ae:	00 e0       	ldi	r16, 0x00	; 0
   1b6b0:	11 e0       	ldi	r17, 0x01	; 1
   1b6b2:	cb 5f       	subi	r28, 0xFB	; 251
   1b6b4:	de 4f       	sbci	r29, 0xFE	; 254
   1b6b6:	28 81       	ld	r18, Y
   1b6b8:	39 81       	ldd	r19, Y+1	; 0x01
   1b6ba:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6bc:	5b 81       	ldd	r21, Y+3	; 0x03
   1b6be:	c5 50       	subi	r28, 0x05	; 5
   1b6c0:	d1 40       	sbci	r29, 0x01	; 1
   1b6c2:	be 01       	movw	r22, r28
   1b6c4:	6f 5f       	subi	r22, 0xFF	; 255
   1b6c6:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6c8:	c4 01       	movw	r24, r8
   1b6ca:	0e 94 7f c1 	call	0x182fe	; 0x182fe <lif_read>
   1b6ce:	2b 01       	movw	r4, r22
   1b6d0:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1b6d2:	6f 3f       	cpi	r22, 0xFF	; 255
   1b6d4:	71 05       	cpc	r23, r1
   1b6d6:	11 f0       	breq	.+4      	; 0x1b6dc <lif_extract_lif_as_lif+0x244>
   1b6d8:	0c f0       	brlt	.+2      	; 0x1b6dc <lif_extract_lif_as_lif+0x244>
   1b6da:	9d cf       	rjmp	.-198    	; 0x1b616 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6dc:	c4 01       	movw	r24, r8
   1b6de:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b6e2:	c5 01       	movw	r24, r10
   1b6e4:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b6e8:	09 cf       	rjmp	.-494    	; 0x1b4fc <lif_extract_lif_as_lif+0x64>
   1b6ea:	c4 01       	movw	r24, r8
   1b6ec:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b6f0:	c5 01       	movw	r24, r10
   1b6f2:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b6f6:	ff 92       	push	r15
   1b6f8:	ef 92       	push	r14
   1b6fa:	df 92       	push	r13
   1b6fc:	cf 92       	push	r12
   1b6fe:	85 ea       	ldi	r24, 0xA5	; 165
   1b700:	95 e3       	ldi	r25, 0x35	; 53
   1b702:	1f 92       	push	r1
   1b704:	9f 93       	push	r25
   1b706:	8f 93       	push	r24
   1b708:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    return(1);
   1b70c:	0f b6       	in	r0, 0x3f	; 63
   1b70e:	f8 94       	cli
   1b710:	de bf       	out	0x3e, r29	; 62
   1b712:	0f be       	out	0x3f, r0	; 63
   1b714:	cd bf       	out	0x3d, r28	; 61
   1b716:	01 e0       	ldi	r16, 0x01	; 1
   1b718:	10 e0       	ldi	r17, 0x00	; 0
}
   1b71a:	c8 01       	movw	r24, r16
   1b71c:	c3 5f       	subi	r28, 0xF3	; 243
   1b71e:	de 4f       	sbci	r29, 0xFE	; 254
   1b720:	e2 e1       	ldi	r30, 0x12	; 18
   1b722:	0c 94 45 e4 	jmp	0x1c88a	; 0x1c88a <__epilogue_restores__>

0001b726 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b726:	2f 92       	push	r2
   1b728:	3f 92       	push	r3
   1b72a:	4f 92       	push	r4
   1b72c:	5f 92       	push	r5
   1b72e:	6f 92       	push	r6
   1b730:	8f 92       	push	r8
   1b732:	9f 92       	push	r9
   1b734:	af 92       	push	r10
   1b736:	bf 92       	push	r11
   1b738:	cf 92       	push	r12
   1b73a:	df 92       	push	r13
   1b73c:	ef 92       	push	r14
   1b73e:	ff 92       	push	r15
   1b740:	0f 93       	push	r16
   1b742:	1f 93       	push	r17
   1b744:	cf 93       	push	r28
   1b746:	df 93       	push	r29
   1b748:	cd b7       	in	r28, 0x3d	; 61
   1b74a:	de b7       	in	r29, 0x3e	; 62
   1b74c:	c4 51       	subi	r28, 0x14	; 20
   1b74e:	d1 40       	sbci	r29, 0x01	; 1
   1b750:	0f b6       	in	r0, 0x3f	; 63
   1b752:	f8 94       	cli
   1b754:	de bf       	out	0x3e, r29	; 62
   1b756:	0f be       	out	0x3f, r0	; 63
   1b758:	cd bf       	out	0x3d, r28	; 61
   1b75a:	7c 01       	movw	r14, r24
   1b75c:	5b 01       	movw	r10, r22
   1b75e:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b760:	dc 01       	movw	r26, r24
   1b762:	8c 91       	ld	r24, X
   1b764:	81 11       	cpse	r24, r1
   1b766:	03 c0       	rjmp	.+6      	; 0x1b76e <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b768:	85 e8       	ldi	r24, 0x85	; 133
   1b76a:	95 e3       	ldi	r25, 0x35	; 53
   1b76c:	06 c0       	rjmp	.+12     	; 0x1b77a <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b76e:	fb 01       	movw	r30, r22
   1b770:	80 81       	ld	r24, Z
   1b772:	81 11       	cpse	r24, r1
   1b774:	0b c0       	rjmp	.+22     	; 0x1b78c <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b776:	8a e6       	ldi	r24, 0x6A	; 106
   1b778:	95 e3       	ldi	r25, 0x35	; 53
   1b77a:	1f 92       	push	r1
   1b77c:	9f 93       	push	r25
   1b77e:	8f 93       	push	r24
   1b780:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
   1b784:	0f 90       	pop	r0
   1b786:	0f 90       	pop	r0
   1b788:	0f 90       	pop	r0
   1b78a:	32 c1       	rjmp	.+612    	; 0x1b9f0 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1b78c:	da 01       	movw	r26, r20
   1b78e:	8c 91       	ld	r24, X
   1b790:	81 11       	cpse	r24, r1
   1b792:	03 c0       	rjmp	.+6      	; 0x1b79a <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b794:	8e e4       	ldi	r24, 0x4E	; 78
   1b796:	95 e3       	ldi	r25, 0x35	; 53
   1b798:	f0 cf       	rjmp	.-32     	; 0x1b77a <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1b79a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b79e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b7a2:	92 ff       	sbrs	r25, 2
   1b7a4:	12 c0       	rjmp	.+36     	; 0x1b7ca <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b7a6:	df 92       	push	r13
   1b7a8:	4f 93       	push	r20
   1b7aa:	bf 92       	push	r11
   1b7ac:	6f 93       	push	r22
   1b7ae:	ff 92       	push	r15
   1b7b0:	ef 92       	push	r14
   1b7b2:	8f e1       	ldi	r24, 0x1F	; 31
   1b7b4:	95 e3       	ldi	r25, 0x35	; 53
   1b7b6:	1f 92       	push	r1
   1b7b8:	9f 93       	push	r25
   1b7ba:	8f 93       	push	r24
   1b7bc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1b7c0:	0f b6       	in	r0, 0x3f	; 63
   1b7c2:	f8 94       	cli
   1b7c4:	de bf       	out	0x3e, r29	; 62
   1b7c6:	0f be       	out	0x3f, r0	; 63
   1b7c8:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b7ca:	62 e9       	ldi	r22, 0x92	; 146
   1b7cc:	78 e0       	ldi	r23, 0x08	; 8
   1b7ce:	c6 01       	movw	r24, r12
   1b7d0:	0e 94 0f d1 	call	0x1a21e	; 0x1a21e <lif_open_volume>
   1b7d4:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1b7d6:	00 97       	sbiw	r24, 0x00	; 0
   1b7d8:	09 f4       	brne	.+2      	; 0x1b7dc <lif_add_lif_file+0xb6>
   1b7da:	0a c1       	rjmp	.+532    	; 0x1b9f0 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b7dc:	b5 01       	movw	r22, r10
   1b7de:	0e 94 a3 d3 	call	0x1a746	; 0x1a746 <lif_find_file>
    if(index == -1)
   1b7e2:	01 96       	adiw	r24, 0x01	; 1
   1b7e4:	b1 f4       	brne	.+44     	; 0x1b812 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1b7e6:	bf 92       	push	r11
   1b7e8:	af 92       	push	r10
   1b7ea:	8c e0       	ldi	r24, 0x0C	; 12
   1b7ec:	95 e3       	ldi	r25, 0x35	; 53
   1b7ee:	1f 92       	push	r1
   1b7f0:	9f 93       	push	r25
   1b7f2:	8f 93       	push	r24
   1b7f4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7f8:	c4 01       	movw	r24, r8
   1b7fa:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b7fe:	0f 90       	pop	r0
   1b800:	0f 90       	pop	r0
   1b802:	0f 90       	pop	r0
   1b804:	0f 90       	pop	r0
   1b806:	0f 90       	pop	r0
   1b808:	60 e0       	ldi	r22, 0x00	; 0
   1b80a:	70 e0       	ldi	r23, 0x00	; 0
   1b80c:	80 e0       	ldi	r24, 0x00	; 0
   1b80e:	90 e0       	ldi	r25, 0x00	; 0
   1b810:	09 c1       	rjmp	.+530    	; 0x1ba24 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b812:	62 e9       	ldi	r22, 0x92	; 146
   1b814:	78 e0       	ldi	r23, 0x08	; 8
   1b816:	c7 01       	movw	r24, r14
   1b818:	0e 94 0f d1 	call	0x1a21e	; 0x1a21e <lif_open_volume>
   1b81c:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1b81e:	00 97       	sbiw	r24, 0x00	; 0
   1b820:	09 f4       	brne	.+2      	; 0x1b824 <lif_add_lif_file+0xfe>
   1b822:	e6 c0       	rjmp	.+460    	; 0x1b9f0 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b824:	f4 01       	movw	r30, r8
   1b826:	e0 5a       	subi	r30, 0xA0	; 160
   1b828:	ff 4f       	sbci	r31, 0xFF	; 255
   1b82a:	40 81       	ld	r20, Z
   1b82c:	51 81       	ldd	r21, Z+1	; 0x01
   1b82e:	62 81       	ldd	r22, Z+2	; 0x02
   1b830:	73 81       	ldd	r23, Z+3	; 0x03
   1b832:	0e 94 aa cf 	call	0x19f54	; 0x19f54 <lif_newdir>
   1b836:	c3 5f       	subi	r28, 0xF3	; 243
   1b838:	de 4f       	sbci	r29, 0xFE	; 254
   1b83a:	99 83       	std	Y+1, r25	; 0x01
   1b83c:	88 83       	st	Y, r24
   1b83e:	cd 50       	subi	r28, 0x0D	; 13
   1b840:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b842:	01 96       	adiw	r24, 0x01	; 1
   1b844:	b9 f4       	brne	.+46     	; 0x1b874 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b846:	df 92       	push	r13
   1b848:	cf 92       	push	r12
   1b84a:	ff 92       	push	r15
   1b84c:	ef 92       	push	r14
   1b84e:	8c ed       	ldi	r24, 0xDC	; 220
   1b850:	94 e3       	ldi	r25, 0x34	; 52
   1b852:	1f 92       	push	r1
   1b854:	9f 93       	push	r25
   1b856:	8f 93       	push	r24
   1b858:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b85c:	c5 01       	movw	r24, r10
   1b85e:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b862:	c4 01       	movw	r24, r8
   1b864:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1b868:	0f b6       	in	r0, 0x3f	; 63
   1b86a:	f8 94       	cli
   1b86c:	de bf       	out	0x3e, r29	; 62
   1b86e:	0f be       	out	0x3f, r0	; 63
   1b870:	cd bf       	out	0x3d, r28	; 61
   1b872:	be c0       	rjmp	.+380    	; 0x1b9f0 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1b874:	c5 01       	movw	r24, r10
   1b876:	84 5a       	subi	r24, 0xA4	; 164
   1b878:	9f 4f       	sbci	r25, 0xFF	; 255
   1b87a:	dc 01       	movw	r26, r24
   1b87c:	4d 91       	ld	r20, X+
   1b87e:	5d 91       	ld	r21, X+
   1b880:	6d 91       	ld	r22, X+
   1b882:	7c 91       	ld	r23, X
   1b884:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b886:	21 e2       	ldi	r18, 0x21	; 33
   1b888:	f4 01       	movw	r30, r8
   1b88a:	e1 5b       	subi	r30, 0xB1	; 177
   1b88c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b88e:	1d 97       	sbiw	r26, 0x0d	; 13
   1b890:	01 90       	ld	r0, Z+
   1b892:	0d 92       	st	X+, r0
   1b894:	2a 95       	dec	r18
   1b896:	e1 f7       	brne	.-8      	; 0x1b890 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b898:	fc 01       	movw	r30, r24
   1b89a:	40 83       	st	Z, r20
   1b89c:	51 83       	std	Z+1, r21	; 0x01
   1b89e:	62 83       	std	Z+2, r22	; 0x02
   1b8a0:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b8a2:	b6 2f       	mov	r27, r22
   1b8a4:	a5 2f       	mov	r26, r21
   1b8a6:	94 2f       	mov	r25, r20
   1b8a8:	88 27       	eor	r24, r24
   1b8aa:	cb 5f       	subi	r28, 0xFB	; 251
   1b8ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b8ae:	88 83       	st	Y, r24
   1b8b0:	99 83       	std	Y+1, r25	; 0x01
   1b8b2:	aa 83       	std	Y+2, r26	; 0x02
   1b8b4:	bb 83       	std	Y+3, r27	; 0x03
   1b8b6:	c5 50       	subi	r28, 0x05	; 5
   1b8b8:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b8ba:	f4 01       	movw	r30, r8
   1b8bc:	e4 5a       	subi	r30, 0xA4	; 164
   1b8be:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8c0:	80 81       	ld	r24, Z
   1b8c2:	91 81       	ldd	r25, Z+1	; 0x01
   1b8c4:	a2 81       	ldd	r26, Z+2	; 0x02
   1b8c6:	b3 81       	ldd	r27, Z+3	; 0x03
   1b8c8:	22 27       	eor	r18, r18
   1b8ca:	38 2f       	mov	r19, r24
   1b8cc:	49 2f       	mov	r20, r25
   1b8ce:	5a 2f       	mov	r21, r26
   1b8d0:	c7 5f       	subi	r28, 0xF7	; 247
   1b8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8d4:	28 83       	st	Y, r18
   1b8d6:	39 83       	std	Y+1, r19	; 0x01
   1b8d8:	4a 83       	std	Y+2, r20	; 0x02
   1b8da:	5b 83       	std	Y+3, r21	; 0x03
   1b8dc:	c9 50       	subi	r28, 0x09	; 9
   1b8de:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8e0:	21 2c       	mov	r2, r1
   1b8e2:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b8e4:	c1 2c       	mov	r12, r1
   1b8e6:	d1 2c       	mov	r13, r1
   1b8e8:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b8ea:	a5 01       	movw	r20, r10
   1b8ec:	40 5a       	subi	r20, 0xA0	; 160
   1b8ee:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8f0:	cd 5e       	subi	r28, 0xED	; 237
   1b8f2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8f4:	59 83       	std	Y+1, r21	; 0x01
   1b8f6:	48 83       	st	Y, r20
   1b8f8:	c3 51       	subi	r28, 0x13	; 19
   1b8fa:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b8fc:	8e ec       	ldi	r24, 0xCE	; 206
   1b8fe:	94 e3       	ldi	r25, 0x34	; 52
   1b900:	2c 01       	movw	r4, r24
   1b902:	c7 5f       	subi	r28, 0xF7	; 247
   1b904:	de 4f       	sbci	r29, 0xFE	; 254
   1b906:	28 81       	ld	r18, Y
   1b908:	39 81       	ldd	r19, Y+1	; 0x01
   1b90a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b90c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b90e:	c9 50       	subi	r28, 0x09	; 9
   1b910:	d1 40       	sbci	r29, 0x01	; 1
   1b912:	2c 0d       	add	r18, r12
   1b914:	3d 1d       	adc	r19, r13
   1b916:	4e 1d       	adc	r20, r14
   1b918:	5f 1d       	adc	r21, r15
   1b91a:	cb 5f       	subi	r28, 0xFB	; 251
   1b91c:	de 4f       	sbci	r29, 0xFE	; 254
   1b91e:	88 81       	ld	r24, Y
   1b920:	99 81       	ldd	r25, Y+1	; 0x01
   1b922:	aa 81       	ldd	r26, Y+2	; 0x02
   1b924:	bb 81       	ldd	r27, Y+3	; 0x03
   1b926:	c5 50       	subi	r28, 0x05	; 5
   1b928:	d1 40       	sbci	r29, 0x01	; 1
   1b92a:	8c 0d       	add	r24, r12
   1b92c:	9d 1d       	adc	r25, r13
   1b92e:	ae 1d       	adc	r26, r14
   1b930:	bf 1d       	adc	r27, r15
   1b932:	c1 5f       	subi	r28, 0xF1	; 241
   1b934:	de 4f       	sbci	r29, 0xFE	; 254
   1b936:	88 83       	st	Y, r24
   1b938:	99 83       	std	Y+1, r25	; 0x01
   1b93a:	aa 83       	std	Y+2, r26	; 0x02
   1b93c:	bb 83       	std	Y+3, r27	; 0x03
   1b93e:	cf 50       	subi	r28, 0x0F	; 15
   1b940:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b942:	cd 5e       	subi	r28, 0xED	; 237
   1b944:	de 4f       	sbci	r29, 0xFE	; 254
   1b946:	a8 81       	ld	r26, Y
   1b948:	b9 81       	ldd	r27, Y+1	; 0x01
   1b94a:	c3 51       	subi	r28, 0x13	; 19
   1b94c:	d1 40       	sbci	r29, 0x01	; 1
   1b94e:	8d 91       	ld	r24, X+
   1b950:	9c 91       	ld	r25, X
   1b952:	28 16       	cp	r2, r24
   1b954:	39 06       	cpc	r3, r25
   1b956:	dc f5       	brge	.+118    	; 0x1b9ce <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b958:	00 e0       	ldi	r16, 0x00	; 0
   1b95a:	11 e0       	ldi	r17, 0x01	; 1
   1b95c:	be 01       	movw	r22, r28
   1b95e:	6f 5f       	subi	r22, 0xFF	; 255
   1b960:	7f 4f       	sbci	r23, 0xFF	; 255
   1b962:	c4 01       	movw	r24, r8
   1b964:	0e 94 7f c1 	call	0x182fe	; 0x182fe <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b968:	6f 3f       	cpi	r22, 0xFF	; 255
   1b96a:	71 05       	cpc	r23, r1
   1b96c:	a9 f0       	breq	.+42     	; 0x1b998 <lif_add_lif_file+0x272>
   1b96e:	a4 f0       	brlt	.+40     	; 0x1b998 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b970:	00 e0       	ldi	r16, 0x00	; 0
   1b972:	11 e0       	ldi	r17, 0x01	; 1
   1b974:	c1 5f       	subi	r28, 0xF1	; 241
   1b976:	de 4f       	sbci	r29, 0xFE	; 254
   1b978:	28 81       	ld	r18, Y
   1b97a:	39 81       	ldd	r19, Y+1	; 0x01
   1b97c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b97e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b980:	cf 50       	subi	r28, 0x0F	; 15
   1b982:	d1 40       	sbci	r29, 0x01	; 1
   1b984:	be 01       	movw	r22, r28
   1b986:	6f 5f       	subi	r22, 0xFF	; 255
   1b988:	7f 4f       	sbci	r23, 0xFF	; 255
   1b98a:	c5 01       	movw	r24, r10
   1b98c:	0e 94 d8 c1 	call	0x183b0	; 0x183b0 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b990:	8f 3f       	cpi	r24, 0xFF	; 255
   1b992:	91 05       	cpc	r25, r1
   1b994:	09 f0       	breq	.+2      	; 0x1b998 <lif_add_lif_file+0x272>
   1b996:	2c f4       	brge	.+10     	; 0x1b9a2 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b998:	c5 01       	movw	r24, r10
   1b99a:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1b99e:	c4 01       	movw	r24, r8
   1b9a0:	25 c0       	rjmp	.+74     	; 0x1b9ec <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b9a2:	5f ef       	ldi	r21, 0xFF	; 255
   1b9a4:	d5 1a       	sub	r13, r21
   1b9a6:	e5 0a       	sbc	r14, r21
   1b9a8:	f5 0a       	sbc	r15, r21
        printf("\tWrote: %8ld\r", bytes);
   1b9aa:	ff 92       	push	r15
   1b9ac:	ef 92       	push	r14
   1b9ae:	df 92       	push	r13
   1b9b0:	cf 92       	push	r12
   1b9b2:	1f 92       	push	r1
   1b9b4:	5f 92       	push	r5
   1b9b6:	4f 92       	push	r4
   1b9b8:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9bc:	8f ef       	ldi	r24, 0xFF	; 255
   1b9be:	28 1a       	sub	r2, r24
   1b9c0:	38 0a       	sbc	r3, r24
   1b9c2:	0f b6       	in	r0, 0x3f	; 63
   1b9c4:	f8 94       	cli
   1b9c6:	de bf       	out	0x3e, r29	; 62
   1b9c8:	0f be       	out	0x3f, r0	; 63
   1b9ca:	cd bf       	out	0x3d, r28	; 61
   1b9cc:	9a cf       	rjmp	.-204    	; 0x1b902 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9ce:	c4 01       	movw	r24, r8
   1b9d0:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1b9d4:	c3 5f       	subi	r28, 0xF3	; 243
   1b9d6:	de 4f       	sbci	r29, 0xFE	; 254
   1b9d8:	68 81       	ld	r22, Y
   1b9da:	79 81       	ldd	r23, Y+1	; 0x01
   1b9dc:	cd 50       	subi	r28, 0x0D	; 13
   1b9de:	d1 40       	sbci	r29, 0x01	; 1
   1b9e0:	c5 01       	movw	r24, r10
   1b9e2:	0e 94 01 cb 	call	0x19602	; 0x19602 <lif_writedirindex>
   1b9e6:	89 2b       	or	r24, r25
   1b9e8:	41 f4       	brne	.+16     	; 0x1b9fa <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9ea:	c5 01       	movw	r24, r10
   1b9ec:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b9f0:	6f ef       	ldi	r22, 0xFF	; 255
   1b9f2:	7f ef       	ldi	r23, 0xFF	; 255
   1b9f4:	8f ef       	ldi	r24, 0xFF	; 255
   1b9f6:	9f ef       	ldi	r25, 0xFF	; 255
   1b9f8:	15 c0       	rjmp	.+42     	; 0x1ba24 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9fa:	c5 01       	movw	r24, r10
   1b9fc:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba00:	ff 92       	push	r15
   1ba02:	ef 92       	push	r14
   1ba04:	df 92       	push	r13
   1ba06:	cf 92       	push	r12
   1ba08:	80 ec       	ldi	r24, 0xC0	; 192
   1ba0a:	94 e3       	ldi	r25, 0x34	; 52
   1ba0c:	1f 92       	push	r1
   1ba0e:	9f 93       	push	r25
   1ba10:	8f 93       	push	r24
   1ba12:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    return(bytes);
   1ba16:	0f b6       	in	r0, 0x3f	; 63
   1ba18:	f8 94       	cli
   1ba1a:	de bf       	out	0x3e, r29	; 62
   1ba1c:	0f be       	out	0x3f, r0	; 63
   1ba1e:	cd bf       	out	0x3d, r28	; 61
   1ba20:	b6 01       	movw	r22, r12
   1ba22:	c7 01       	movw	r24, r14
}
   1ba24:	cc 5e       	subi	r28, 0xEC	; 236
   1ba26:	de 4f       	sbci	r29, 0xFE	; 254
   1ba28:	0f b6       	in	r0, 0x3f	; 63
   1ba2a:	f8 94       	cli
   1ba2c:	de bf       	out	0x3e, r29	; 62
   1ba2e:	0f be       	out	0x3f, r0	; 63
   1ba30:	cd bf       	out	0x3d, r28	; 61
   1ba32:	df 91       	pop	r29
   1ba34:	cf 91       	pop	r28
   1ba36:	1f 91       	pop	r17
   1ba38:	0f 91       	pop	r16
   1ba3a:	ff 90       	pop	r15
   1ba3c:	ef 90       	pop	r14
   1ba3e:	df 90       	pop	r13
   1ba40:	cf 90       	pop	r12
   1ba42:	bf 90       	pop	r11
   1ba44:	af 90       	pop	r10
   1ba46:	9f 90       	pop	r9
   1ba48:	8f 90       	pop	r8
   1ba4a:	6f 90       	pop	r6
   1ba4c:	5f 90       	pop	r5
   1ba4e:	4f 90       	pop	r4
   1ba50:	3f 90       	pop	r3
   1ba52:	2f 90       	pop	r2
   1ba54:	08 95       	ret

0001ba56 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1ba56:	ef 92       	push	r14
   1ba58:	ff 92       	push	r15
   1ba5a:	0f 93       	push	r16
   1ba5c:	1f 93       	push	r17
   1ba5e:	cf 93       	push	r28
   1ba60:	df 93       	push	r29
   1ba62:	7c 01       	movw	r14, r24
   1ba64:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1ba66:	fc 01       	movw	r30, r24
   1ba68:	80 81       	ld	r24, Z
   1ba6a:	81 11       	cpse	r24, r1
   1ba6c:	03 c0       	rjmp	.+6      	; 0x1ba74 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1ba6e:	8b e9       	ldi	r24, 0x9B	; 155
   1ba70:	94 e3       	ldi	r25, 0x34	; 52
   1ba72:	06 c0       	rjmp	.+12     	; 0x1ba80 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1ba74:	fb 01       	movw	r30, r22
   1ba76:	80 81       	ld	r24, Z
   1ba78:	81 11       	cpse	r24, r1
   1ba7a:	0b c0       	rjmp	.+22     	; 0x1ba92 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1ba7c:	8b e7       	ldi	r24, 0x7B	; 123
   1ba7e:	94 e3       	ldi	r25, 0x34	; 52
   1ba80:	1f 92       	push	r1
   1ba82:	9f 93       	push	r25
   1ba84:	8f 93       	push	r24
   1ba86:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
   1ba8a:	0f 90       	pop	r0
   1ba8c:	0f 90       	pop	r0
   1ba8e:	0f 90       	pop	r0
   1ba90:	74 c0       	rjmp	.+232    	; 0x1bb7a <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1ba92:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ba96:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1ba9a:	92 ff       	sbrs	r25, 2
   1ba9c:	13 c0       	rjmp	.+38     	; 0x1bac4 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1ba9e:	1f 93       	push	r17
   1baa0:	6f 93       	push	r22
   1baa2:	ff 92       	push	r15
   1baa4:	ef 92       	push	r14
   1baa6:	8c e5       	ldi	r24, 0x5C	; 92
   1baa8:	94 e3       	ldi	r25, 0x34	; 52
   1baaa:	1f 92       	push	r1
   1baac:	9f 93       	push	r25
   1baae:	8f 93       	push	r24
   1bab0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1bab4:	8d b7       	in	r24, 0x3d	; 61
   1bab6:	9e b7       	in	r25, 0x3e	; 62
   1bab8:	07 96       	adiw	r24, 0x07	; 7
   1baba:	0f b6       	in	r0, 0x3f	; 63
   1babc:	f8 94       	cli
   1babe:	9e bf       	out	0x3e, r25	; 62
   1bac0:	0f be       	out	0x3f, r0	; 63
   1bac2:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1bac4:	62 e9       	ldi	r22, 0x92	; 146
   1bac6:	78 e0       	ldi	r23, 0x08	; 8
   1bac8:	c7 01       	movw	r24, r14
   1baca:	0e 94 0f d1 	call	0x1a21e	; 0x1a21e <lif_open_volume>
   1bace:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bad0:	00 97       	sbiw	r24, 0x00	; 0
   1bad2:	09 f4       	brne	.+2      	; 0x1bad6 <lif_del_file+0x80>
   1bad4:	52 c0       	rjmp	.+164    	; 0x1bb7a <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1bad6:	b8 01       	movw	r22, r16
   1bad8:	0e 94 a3 d3 	call	0x1a746	; 0x1a746 <lif_find_file>
    if(index == -1)
   1badc:	8f 3f       	cpi	r24, 0xFF	; 255
   1bade:	ef ef       	ldi	r30, 0xFF	; 255
   1bae0:	9e 07       	cpc	r25, r30
   1bae2:	c9 f4       	brne	.+50     	; 0x1bb16 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bae4:	ce 01       	movw	r24, r28
   1bae6:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1baea:	1f 93       	push	r17
   1baec:	0f 93       	push	r16
   1baee:	ff 92       	push	r15
   1baf0:	ef 92       	push	r14
   1baf2:	84 e3       	ldi	r24, 0x34	; 52
   1baf4:	94 e3       	ldi	r25, 0x34	; 52
   1baf6:	1f 92       	push	r1
   1baf8:	9f 93       	push	r25
   1bafa:	8f 93       	push	r24
   1bafc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(0);
   1bb00:	8d b7       	in	r24, 0x3d	; 61
   1bb02:	9e b7       	in	r25, 0x3e	; 62
   1bb04:	07 96       	adiw	r24, 0x07	; 7
   1bb06:	0f b6       	in	r0, 0x3f	; 63
   1bb08:	f8 94       	cli
   1bb0a:	9e bf       	out	0x3e, r25	; 62
   1bb0c:	0f be       	out	0x3f, r0	; 63
   1bb0e:	8d bf       	out	0x3d, r24	; 61
   1bb10:	80 e0       	ldi	r24, 0x00	; 0
   1bb12:	90 e0       	ldi	r25, 0x00	; 0
   1bb14:	34 c0       	rjmp	.+104    	; 0x1bb7e <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bb16:	2a a1       	ldd	r18, Y+34	; 0x22
   1bb18:	3b a1       	ldd	r19, Y+35	; 0x23
   1bb1a:	21 50       	subi	r18, 0x01	; 1
   1bb1c:	31 09       	sbc	r19, r1
   1bb1e:	fe 01       	movw	r30, r28
   1bb20:	e6 5a       	subi	r30, 0xA6	; 166
   1bb22:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb24:	82 17       	cp	r24, r18
   1bb26:	93 07       	cpc	r25, r19
   1bb28:	2c f0       	brlt	.+10     	; 0x1bb34 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1bb2a:	2f ef       	ldi	r18, 0xFF	; 255
   1bb2c:	3f ef       	ldi	r19, 0xFF	; 255
   1bb2e:	31 83       	std	Z+1, r19	; 0x01
   1bb30:	20 83       	st	Z, r18
   1bb32:	02 c0       	rjmp	.+4      	; 0x1bb38 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1bb34:	11 82       	std	Z+1, r1	; 0x01
   1bb36:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bb38:	bc 01       	movw	r22, r24
   1bb3a:	ce 01       	movw	r24, r28
   1bb3c:	0e 94 01 cb 	call	0x19602	; 0x19602 <lif_writedirindex>
   1bb40:	89 2b       	or	r24, r25
   1bb42:	21 f4       	brne	.+8      	; 0x1bb4c <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb44:	ce 01       	movw	r24, r28
   1bb46:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1bb4a:	17 c0       	rjmp	.+46     	; 0x1bb7a <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bb4c:	ce 01       	movw	r24, r28
   1bb4e:	0e 94 75 cb 	call	0x196ea	; 0x196ea <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb52:	ce 01       	movw	r24, r28
   1bb54:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bb58:	1f 93       	push	r17
   1bb5a:	0f 93       	push	r16
   1bb5c:	85 e2       	ldi	r24, 0x25	; 37
   1bb5e:	94 e3       	ldi	r25, 0x34	; 52
   1bb60:	1f 92       	push	r1
   1bb62:	9f 93       	push	r25
   1bb64:	8f 93       	push	r24
   1bb66:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    return(1);
   1bb6a:	0f 90       	pop	r0
   1bb6c:	0f 90       	pop	r0
   1bb6e:	0f 90       	pop	r0
   1bb70:	0f 90       	pop	r0
   1bb72:	0f 90       	pop	r0
   1bb74:	81 e0       	ldi	r24, 0x01	; 1
   1bb76:	90 e0       	ldi	r25, 0x00	; 0
   1bb78:	02 c0       	rjmp	.+4      	; 0x1bb7e <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bb7a:	8f ef       	ldi	r24, 0xFF	; 255
   1bb7c:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bb7e:	cd b7       	in	r28, 0x3d	; 61
   1bb80:	de b7       	in	r29, 0x3e	; 62
   1bb82:	e6 e0       	ldi	r30, 0x06	; 6
   1bb84:	8e c6       	rjmp	.+3356   	; 0x1c8a2 <__epilogue_restores__+0x18>

0001bb86 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bb86:	a0 e0       	ldi	r26, 0x00	; 0
   1bb88:	b0 e0       	ldi	r27, 0x00	; 0
   1bb8a:	e8 ec       	ldi	r30, 0xC8	; 200
   1bb8c:	fd ed       	ldi	r31, 0xDD	; 221
   1bb8e:	69 c6       	rjmp	.+3282   	; 0x1c862 <__prologue_saves__+0x10>
   1bb90:	6c 01       	movw	r12, r24
   1bb92:	8b 01       	movw	r16, r22
   1bb94:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bb96:	fc 01       	movw	r30, r24
   1bb98:	80 81       	ld	r24, Z
   1bb9a:	81 11       	cpse	r24, r1
   1bb9c:	03 c0       	rjmp	.+6      	; 0x1bba4 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bb9e:	8d ef       	ldi	r24, 0xFD	; 253
   1bba0:	93 e3       	ldi	r25, 0x33	; 51
   1bba2:	06 c0       	rjmp	.+12     	; 0x1bbb0 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bba4:	fb 01       	movw	r30, r22
   1bba6:	80 81       	ld	r24, Z
   1bba8:	81 11       	cpse	r24, r1
   1bbaa:	0b c0       	rjmp	.+22     	; 0x1bbc2 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bbac:	86 ed       	ldi	r24, 0xD6	; 214
   1bbae:	93 e3       	ldi	r25, 0x33	; 51
   1bbb0:	1f 92       	push	r1
   1bbb2:	9f 93       	push	r25
   1bbb4:	8f 93       	push	r24
   1bbb6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
   1bbba:	0f 90       	pop	r0
   1bbbc:	0f 90       	pop	r0
   1bbbe:	0f 90       	pop	r0
   1bbc0:	62 c0       	rjmp	.+196    	; 0x1bc86 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1bbc2:	fa 01       	movw	r30, r20
   1bbc4:	80 81       	ld	r24, Z
   1bbc6:	81 11       	cpse	r24, r1
   1bbc8:	03 c0       	rjmp	.+6      	; 0x1bbd0 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bbca:	8f ea       	ldi	r24, 0xAF	; 175
   1bbcc:	93 e3       	ldi	r25, 0x33	; 51
   1bbce:	f0 cf       	rjmp	.-32     	; 0x1bbb0 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bbd0:	ca 01       	movw	r24, r20
   1bbd2:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_checkname>
   1bbd6:	89 2b       	or	r24, r25
   1bbd8:	19 f4       	brne	.+6      	; 0x1bbe0 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bbda:	89 e7       	ldi	r24, 0x79	; 121
   1bbdc:	93 e3       	ldi	r25, 0x33	; 51
   1bbde:	e8 cf       	rjmp	.-48     	; 0x1bbb0 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bbe0:	62 e9       	ldi	r22, 0x92	; 146
   1bbe2:	78 e0       	ldi	r23, 0x08	; 8
   1bbe4:	c6 01       	movw	r24, r12
   1bbe6:	0e 94 0f d1 	call	0x1a21e	; 0x1a21e <lif_open_volume>
   1bbea:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bbec:	00 97       	sbiw	r24, 0x00	; 0
   1bbee:	09 f4       	brne	.+2      	; 0x1bbf2 <lif_rename_file+0x6c>
   1bbf0:	4a c0       	rjmp	.+148    	; 0x1bc86 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bbf2:	b8 01       	movw	r22, r16
   1bbf4:	0e 94 a3 d3 	call	0x1a746	; 0x1a746 <lif_find_file>
   1bbf8:	5c 01       	movw	r10, r24
    if(index == -1)
   1bbfa:	01 96       	adiw	r24, 0x01	; 1
   1bbfc:	c9 f4       	brne	.+50     	; 0x1bc30 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bbfe:	1f 93       	push	r17
   1bc00:	0f 93       	push	r16
   1bc02:	df 92       	push	r13
   1bc04:	cf 92       	push	r12
   1bc06:	80 e5       	ldi	r24, 0x50	; 80
   1bc08:	93 e3       	ldi	r25, 0x33	; 51
   1bc0a:	1f 92       	push	r1
   1bc0c:	9f 93       	push	r25
   1bc0e:	8f 93       	push	r24
   1bc10:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc14:	ce 01       	movw	r24, r28
   1bc16:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bc1a:	8d b7       	in	r24, 0x3d	; 61
   1bc1c:	9e b7       	in	r25, 0x3e	; 62
   1bc1e:	07 96       	adiw	r24, 0x07	; 7
   1bc20:	0f b6       	in	r0, 0x3f	; 63
   1bc22:	f8 94       	cli
   1bc24:	9e bf       	out	0x3e, r25	; 62
   1bc26:	0f be       	out	0x3f, r0	; 63
   1bc28:	8d bf       	out	0x3d, r24	; 61
   1bc2a:	80 e0       	ldi	r24, 0x00	; 0
   1bc2c:	90 e0       	ldi	r25, 0x00	; 0
   1bc2e:	2d c0       	rjmp	.+90     	; 0x1bc8a <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bc30:	4a e0       	ldi	r20, 0x0A	; 10
   1bc32:	50 e0       	ldi	r21, 0x00	; 0
   1bc34:	b7 01       	movw	r22, r14
   1bc36:	ce 01       	movw	r24, r28
   1bc38:	81 5b       	subi	r24, 0xB1	; 177
   1bc3a:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc3c:	0e 94 c5 c2 	call	0x1858a	; 0x1858a <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc40:	b5 01       	movw	r22, r10
   1bc42:	ce 01       	movw	r24, r28
   1bc44:	0e 94 01 cb 	call	0x19602	; 0x19602 <lif_writedirindex>
   1bc48:	89 2b       	or	r24, r25
   1bc4a:	21 f4       	brne	.+8      	; 0x1bc54 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc4c:	ce 01       	movw	r24, r28
   1bc4e:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
   1bc52:	19 c0       	rjmp	.+50     	; 0x1bc86 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bc54:	ff 92       	push	r15
   1bc56:	ef 92       	push	r14
   1bc58:	1f 93       	push	r17
   1bc5a:	0f 93       	push	r16
   1bc5c:	89 e3       	ldi	r24, 0x39	; 57
   1bc5e:	93 e3       	ldi	r25, 0x33	; 51
   1bc60:	1f 92       	push	r1
   1bc62:	9f 93       	push	r25
   1bc64:	8f 93       	push	r24
   1bc66:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc6a:	ce 01       	movw	r24, r28
   1bc6c:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bc70:	ed b7       	in	r30, 0x3d	; 61
   1bc72:	fe b7       	in	r31, 0x3e	; 62
   1bc74:	37 96       	adiw	r30, 0x07	; 7
   1bc76:	0f b6       	in	r0, 0x3f	; 63
   1bc78:	f8 94       	cli
   1bc7a:	fe bf       	out	0x3e, r31	; 62
   1bc7c:	0f be       	out	0x3f, r0	; 63
   1bc7e:	ed bf       	out	0x3d, r30	; 61
   1bc80:	81 e0       	ldi	r24, 0x01	; 1
   1bc82:	90 e0       	ldi	r25, 0x00	; 0
   1bc84:	02 c0       	rjmp	.+4      	; 0x1bc8a <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bc86:	8f ef       	ldi	r24, 0xFF	; 255
   1bc88:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bc8a:	cd b7       	in	r28, 0x3d	; 61
   1bc8c:	de b7       	in	r29, 0x3e	; 62
   1bc8e:	ea e0       	ldi	r30, 0x0A	; 10
   1bc90:	04 c6       	rjmp	.+3080   	; 0x1c89a <__epilogue_restores__+0x10>

0001bc92 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bc92:	4f 92       	push	r4
   1bc94:	5f 92       	push	r5
   1bc96:	6f 92       	push	r6
   1bc98:	7f 92       	push	r7
   1bc9a:	af 92       	push	r10
   1bc9c:	bf 92       	push	r11
   1bc9e:	cf 92       	push	r12
   1bca0:	df 92       	push	r13
   1bca2:	ef 92       	push	r14
   1bca4:	ff 92       	push	r15
   1bca6:	0f 93       	push	r16
   1bca8:	1f 93       	push	r17
   1bcaa:	cf 93       	push	r28
   1bcac:	df 93       	push	r29
   1bcae:	27 01       	movw	r4, r14
   1bcb0:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bcb2:	dc 01       	movw	r26, r24
   1bcb4:	ec 91       	ld	r30, X
   1bcb6:	e1 11       	cpse	r30, r1
   1bcb8:	03 c0       	rjmp	.+6      	; 0x1bcc0 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bcba:	80 e1       	ldi	r24, 0x10	; 16
   1bcbc:	93 e3       	ldi	r25, 0x33	; 51
   1bcbe:	16 c0       	rjmp	.+44     	; 0x1bcec <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1bcc0:	db 01       	movw	r26, r22
   1bcc2:	ec 91       	ld	r30, X
   1bcc4:	e1 11       	cpse	r30, r1
   1bcc6:	03 c0       	rjmp	.+6      	; 0x1bcce <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bcc8:	8b ee       	ldi	r24, 0xEB	; 235
   1bcca:	92 e3       	ldi	r25, 0x32	; 50
   1bccc:	0f c0       	rjmp	.+30     	; 0x1bcec <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1bcce:	21 15       	cp	r18, r1
   1bcd0:	31 05       	cpc	r19, r1
   1bcd2:	41 05       	cpc	r20, r1
   1bcd4:	51 05       	cpc	r21, r1
   1bcd6:	19 f4       	brne	.+6      	; 0x1bcde <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bcd8:	88 ec       	ldi	r24, 0xC8	; 200
   1bcda:	92 e3       	ldi	r25, 0x32	; 50
   1bcdc:	07 c0       	rjmp	.+14     	; 0x1bcec <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1bcde:	e1 14       	cp	r14, r1
   1bce0:	f1 04       	cpc	r15, r1
   1bce2:	01 05       	cpc	r16, r1
   1bce4:	11 05       	cpc	r17, r1
   1bce6:	59 f4       	brne	.+22     	; 0x1bcfe <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bce8:	88 ea       	ldi	r24, 0xA8	; 168
   1bcea:	92 e3       	ldi	r25, 0x32	; 50
   1bcec:	1f 92       	push	r1
   1bcee:	9f 93       	push	r25
   1bcf0:	8f 93       	push	r24
   1bcf2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(-1);
   1bcf6:	0f 90       	pop	r0
   1bcf8:	0f 90       	pop	r0
   1bcfa:	0f 90       	pop	r0
   1bcfc:	30 c0       	rjmp	.+96     	; 0x1bd5e <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bcfe:	67 01       	movw	r12, r14
   1bd00:	78 01       	movw	r14, r16
   1bd02:	b2 e0       	ldi	r27, 0x02	; 2
   1bd04:	cb 1a       	sub	r12, r27
   1bd06:	d1 08       	sbc	r13, r1
   1bd08:	e1 08       	sbc	r14, r1
   1bd0a:	f1 08       	sbc	r15, r1
   1bd0c:	56 01       	movw	r10, r12
   1bd0e:	67 01       	movw	r12, r14
   1bd10:	a2 1a       	sub	r10, r18
   1bd12:	b3 0a       	sbc	r11, r19
   1bd14:	c4 0a       	sbc	r12, r20
   1bd16:	d5 0a       	sbc	r13, r21
   1bd18:	79 01       	movw	r14, r18
   1bd1a:	8a 01       	movw	r16, r20
   1bd1c:	22 e0       	ldi	r18, 0x02	; 2
   1bd1e:	30 e0       	ldi	r19, 0x00	; 0
   1bd20:	40 e0       	ldi	r20, 0x00	; 0
   1bd22:	50 e0       	ldi	r21, 0x00	; 0
   1bd24:	0e 94 7d cc 	call	0x198fa	; 0x198fa <lif_create_volume>
    if(LIF == NULL)
   1bd28:	00 97       	sbiw	r24, 0x00	; 0
   1bd2a:	c9 f0       	breq	.+50     	; 0x1bd5e <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1bd2c:	0e 94 17 ca 	call	0x1942e	; 0x1942e <lif_close_volume>

    printf("\tFormating: wrote %ld sectors\n", (long)end);
   1bd30:	82 01       	movw	r16, r4
   1bd32:	d6 2d       	mov	r29, r6
   1bd34:	c7 2d       	mov	r28, r7
   1bd36:	7f 92       	push	r7
   1bd38:	6f 92       	push	r6
   1bd3a:	5f 92       	push	r5
   1bd3c:	4f 92       	push	r4
   1bd3e:	89 e8       	ldi	r24, 0x89	; 137
   1bd40:	92 e3       	ldi	r25, 0x32	; 50
   1bd42:	1f 92       	push	r1
   1bd44:	9f 93       	push	r25
   1bd46:	8f 93       	push	r24
   1bd48:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    return(end);
   1bd4c:	8d b7       	in	r24, 0x3d	; 61
   1bd4e:	9e b7       	in	r25, 0x3e	; 62
   1bd50:	07 96       	adiw	r24, 0x07	; 7
   1bd52:	0f b6       	in	r0, 0x3f	; 63
   1bd54:	f8 94       	cli
   1bd56:	9e bf       	out	0x3e, r25	; 62
   1bd58:	0f be       	out	0x3f, r0	; 63
   1bd5a:	8d bf       	out	0x3d, r24	; 61
   1bd5c:	04 c0       	rjmp	.+8      	; 0x1bd66 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bd5e:	0f ef       	ldi	r16, 0xFF	; 255
   1bd60:	1f ef       	ldi	r17, 0xFF	; 255
   1bd62:	df ef       	ldi	r29, 0xFF	; 255
   1bd64:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormating: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bd66:	b8 01       	movw	r22, r16
   1bd68:	8d 2f       	mov	r24, r29
   1bd6a:	9c 2f       	mov	r25, r28
   1bd6c:	df 91       	pop	r29
   1bd6e:	cf 91       	pop	r28
   1bd70:	1f 91       	pop	r17
   1bd72:	0f 91       	pop	r16
   1bd74:	ff 90       	pop	r15
   1bd76:	ef 90       	pop	r14
   1bd78:	df 90       	pop	r13
   1bd7a:	cf 90       	pop	r12
   1bd7c:	bf 90       	pop	r11
   1bd7e:	af 90       	pop	r10
   1bd80:	7f 90       	pop	r7
   1bd82:	6f 90       	pop	r6
   1bd84:	5f 90       	pop	r5
   1bd86:	4f 90       	pop	r4
   1bd88:	08 95       	ret

0001bd8a <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bd8a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd8c:	b0 e0       	ldi	r27, 0x00	; 0
   1bd8e:	ea ec       	ldi	r30, 0xCA	; 202
   1bd90:	fe ed       	ldi	r31, 0xDE	; 222
   1bd92:	65 c5       	rjmp	.+2762   	; 0x1c85e <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1bd94:	fb 01       	movw	r30, r22
   1bd96:	20 81       	ld	r18, Z
   1bd98:	31 81       	ldd	r19, Z+1	; 0x01
   1bd9a:	23 2b       	or	r18, r19
   1bd9c:	59 f0       	breq	.+22     	; 0x1bdb4 <lif_tests+0x2a>
   1bd9e:	6b 01       	movw	r12, r22
   1bda0:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1bda2:	fb 01       	movw	r30, r22
   1bda4:	a2 80       	ldd	r10, Z+2	; 0x02
   1bda6:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bda8:	02 97       	sbiw	r24, 0x02	; 2
   1bdaa:	3c f4       	brge	.+14     	; 0x1bdba <lif_tests+0x30>
    {
        lif_help(1);
   1bdac:	81 e0       	ldi	r24, 0x01	; 1
   1bdae:	90 e0       	ldi	r25, 0x00	; 0
   1bdb0:	0e 94 82 c0 	call	0x18104	; 0x18104 <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1bdb4:	80 e0       	ldi	r24, 0x00	; 0
   1bdb6:	90 e0       	ldi	r25, 0x00	; 0
   1bdb8:	56 c1       	rjmp	.+684    	; 0x1c066 <lif_tests+0x2dc>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bdba:	a1 14       	cp	r10, r1
   1bdbc:	b1 04       	cpc	r11, r1
   1bdbe:	b1 f3       	breq	.-20     	; 0x1bdac <lif_tests+0x22>
   1bdc0:	64 e1       	ldi	r22, 0x14	; 20
   1bdc2:	76 e1       	ldi	r23, 0x16	; 22
   1bdc4:	c5 01       	movw	r24, r10
   1bdc6:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   1bdca:	89 2b       	or	r24, r25
   1bdcc:	79 f7       	brne	.-34     	; 0x1bdac <lif_tests+0x22>
   1bdce:	63 e1       	ldi	r22, 0x13	; 19
   1bdd0:	76 e1       	ldi	r23, 0x16	; 22
   1bdd2:	c5 01       	movw	r24, r10
   1bdd4:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   1bdd8:	89 2b       	or	r24, r25
   1bdda:	41 f7       	brne	.-48     	; 0x1bdac <lif_tests+0x22>
   1bddc:	69 e1       	ldi	r22, 0x19	; 25
   1bdde:	76 e1       	ldi	r23, 0x16	; 22
   1bde0:	c5 01       	movw	r24, r10
   1bde2:	0e 94 07 34 	call	0x680e	; 0x680e <MATCH>
   1bde6:	89 2b       	or	r24, r25
   1bde8:	09 f7       	brne	.-62     	; 0x1bdac <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bdea:	94 01       	movw	r18, r8
   1bdec:	42 e0       	ldi	r20, 0x02	; 2
   1bdee:	50 e0       	ldi	r21, 0x00	; 0
   1bdf0:	6c e1       	ldi	r22, 0x1C	; 28
   1bdf2:	76 e1       	ldi	r23, 0x16	; 22
   1bdf4:	c5 01       	movw	r24, r10
   1bdf6:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1bdfa:	89 2b       	or	r24, r25
   1bdfc:	61 f0       	breq	.+24     	; 0x1be16 <lif_tests+0x8c>
    {
		debuglevel = 0xffff;
   1bdfe:	8f ef       	ldi	r24, 0xFF	; 255
   1be00:	9f ef       	ldi	r25, 0xFF	; 255
   1be02:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1be06:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1be0a:	f6 01       	movw	r30, r12
   1be0c:	a4 80       	ldd	r10, Z+4	; 0x04
   1be0e:	b5 80       	ldd	r11, Z+5	; 0x05
   1be10:	c3 e0       	ldi	r28, 0x03	; 3
   1be12:	d0 e0       	ldi	r29, 0x00	; 0
   1be14:	02 c0       	rjmp	.+4      	; 0x1be1a <lif_tests+0x90>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1be16:	c2 e0       	ldi	r28, 0x02	; 2
   1be18:	d0 e0       	ldi	r29, 0x00	; 0
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1be1a:	7e 01       	movw	r14, r28
   1be1c:	f3 e0       	ldi	r31, 0x03	; 3
   1be1e:	ef 0e       	add	r14, r31
   1be20:	f1 1c       	adc	r15, r1
   1be22:	94 01       	movw	r18, r8
   1be24:	a7 01       	movw	r20, r14
   1be26:	6f e1       	ldi	r22, 0x1F	; 31
   1be28:	76 e1       	ldi	r23, 0x16	; 22
   1be2a:	c5 01       	movw	r24, r10
   1be2c:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1be30:	89 2b       	or	r24, r25
   1be32:	81 f0       	breq	.+32     	; 0x1be54 <lif_tests+0xca>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1be34:	22 96       	adiw	r28, 0x02	; 2
   1be36:	cc 0f       	add	r28, r28
   1be38:	dd 1f       	adc	r29, r29
   1be3a:	cc 0d       	add	r28, r12
   1be3c:	dd 1d       	adc	r29, r13
   1be3e:	48 81       	ld	r20, Y
   1be40:	59 81       	ldd	r21, Y+1	; 0x01
   1be42:	fe 01       	movw	r30, r28
   1be44:	32 97       	sbiw	r30, 0x02	; 2
   1be46:	60 81       	ld	r22, Z
   1be48:	71 81       	ldd	r23, Z+1	; 0x01
   1be4a:	24 97       	sbiw	r28, 0x04	; 4
   1be4c:	88 81       	ld	r24, Y
   1be4e:	99 81       	ldd	r25, Y+1	; 0x01
   1be50:	6a dc       	rcall	.-1836   	; 0x1b726 <lif_add_lif_file>
   1be52:	07 c1       	rjmp	.+526    	; 0x1c062 <lif_tests+0x2d8>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1be54:	94 01       	movw	r18, r8
   1be56:	a7 01       	movw	r20, r14
   1be58:	66 e2       	ldi	r22, 0x26	; 38
   1be5a:	76 e1       	ldi	r23, 0x16	; 22
   1be5c:	c5 01       	movw	r24, r10
   1be5e:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1be62:	89 2b       	or	r24, r25
   1be64:	89 f0       	breq	.+34     	; 0x1be88 <lif_tests+0xfe>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1be66:	22 96       	adiw	r28, 0x02	; 2
   1be68:	cc 0f       	add	r28, r28
   1be6a:	dd 1f       	adc	r29, r29
   1be6c:	cc 0d       	add	r28, r12
   1be6e:	dd 1d       	adc	r29, r13
   1be70:	48 81       	ld	r20, Y
   1be72:	59 81       	ldd	r21, Y+1	; 0x01
   1be74:	fe 01       	movw	r30, r28
   1be76:	32 97       	sbiw	r30, 0x02	; 2
   1be78:	60 81       	ld	r22, Z
   1be7a:	71 81       	ldd	r23, Z+1	; 0x01
   1be7c:	24 97       	sbiw	r28, 0x04	; 4
   1be7e:	88 81       	ld	r24, Y
   1be80:	99 81       	ldd	r25, Y+1	; 0x01
   1be82:	0e 94 27 d6 	call	0x1ac4e	; 0x1ac4e <lif_add_ascii_file_as_e010>
   1be86:	ed c0       	rjmp	.+474    	; 0x1c062 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1be88:	94 01       	movw	r18, r8
   1be8a:	a7 01       	movw	r20, r14
   1be8c:	6a e2       	ldi	r22, 0x2A	; 42
   1be8e:	76 e1       	ldi	r23, 0x16	; 22
   1be90:	c5 01       	movw	r24, r10
   1be92:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1be96:	89 2b       	or	r24, r25
   1be98:	09 f4       	brne	.+2      	; 0x1be9c <lif_tests+0x112>
   1be9a:	42 c0       	rjmp	.+132    	; 0x1bf20 <lif_tests+0x196>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1be9c:	cc 0f       	add	r28, r28
   1be9e:	dd 1f       	adc	r29, r29
   1bea0:	cc 0d       	add	r28, r12
   1bea2:	dd 1d       	adc	r29, r13
   1bea4:	c8 80       	ld	r12, Y
   1bea6:	d9 80       	ldd	r13, Y+1	; 0x01
		char *label = argv[ind+1];
   1bea8:	aa 80       	ldd	r10, Y+2	; 0x02
   1beaa:	bb 80       	ldd	r11, Y+3	; 0x03
		char *model = argv[ind+2];
   1beac:	0c 80       	ldd	r0, Y+4	; 0x04
   1beae:	dd 81       	ldd	r29, Y+5	; 0x05
   1beb0:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1beb2:	65 e3       	ldi	r22, 0x35	; 53
   1beb4:	76 e1       	ldi	r23, 0x16	; 22
   1beb6:	ce 01       	movw	r24, r28
   1beb8:	0e 94 5e 34 	call	0x68bc	; 0x68bc <MATCHI_LEN>
   1bebc:	89 2b       	or	r24, r25
   1bebe:	09 f0       	breq	.+2      	; 0x1bec2 <lif_tests+0x138>
			model +=2;
   1bec0:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1bec2:	40 e0       	ldi	r20, 0x00	; 0
   1bec4:	50 e0       	ldi	r21, 0x00	; 0
   1bec6:	60 e0       	ldi	r22, 0x00	; 0
   1bec8:	70 e0       	ldi	r23, 0x00	; 0
   1beca:	ce 01       	movw	r24, r28
   1becc:	0e 94 d6 a4 	call	0x149ac	; 0x149ac <hpdir_find_drive>
   1bed0:	89 2b       	or	r24, r25
   1bed2:	b9 f0       	breq	.+46     	; 0x1bf02 <lif_tests+0x178>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1bed4:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xac>
   1bed8:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xad>
   1bedc:	80 91 b4 21 	lds	r24, 0x21B4	; 0x8021b4 <hpdir+0xae>
   1bee0:	90 91 b5 21 	lds	r25, 0x21B5	; 0x8021b5 <hpdir+0xaf>
   1bee4:	0e 94 b9 a4 	call	0x14972	; 0x14972 <lif_dir_count>
   1bee8:	9b 01       	movw	r18, r22
   1beea:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1beec:	e0 90 b2 21 	lds	r14, 0x21B2	; 0x8021b2 <hpdir+0xac>
   1bef0:	f0 90 b3 21 	lds	r15, 0x21B3	; 0x8021b3 <hpdir+0xad>
   1bef4:	00 91 b4 21 	lds	r16, 0x21B4	; 0x8021b4 <hpdir+0xae>
   1bef8:	10 91 b5 21 	lds	r17, 0x21B5	; 0x8021b5 <hpdir+0xaf>
   1befc:	b5 01       	movw	r22, r10
   1befe:	c6 01       	movw	r24, r12
   1bf00:	36 c0       	rjmp	.+108    	; 0x1bf6e <lif_tests+0x1e4>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1bf02:	df 93       	push	r29
   1bf04:	cf 93       	push	r28
   1bf06:	8c eb       	ldi	r24, 0xBC	; 188
   1bf08:	94 e4       	ldi	r25, 0x44	; 68
   1bf0a:	1f 92       	push	r1
   1bf0c:	9f 93       	push	r25
   1bf0e:	8f 93       	push	r24
   1bf10:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
        return(1);
   1bf14:	0f 90       	pop	r0
   1bf16:	0f 90       	pop	r0
   1bf18:	0f 90       	pop	r0
   1bf1a:	0f 90       	pop	r0
   1bf1c:	0f 90       	pop	r0
   1bf1e:	a1 c0       	rjmp	.+322    	; 0x1c062 <lif_tests+0x2d8>
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bf20:	94 01       	movw	r18, r8
   1bf22:	ae 01       	movw	r20, r28
   1bf24:	4c 5f       	subi	r20, 0xFC	; 252
   1bf26:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf28:	68 e3       	ldi	r22, 0x38	; 56
   1bf2a:	76 e1       	ldi	r23, 0x16	; 22
   1bf2c:	c5 01       	movw	r24, r10
   1bf2e:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1bf32:	89 2b       	or	r24, r25
   1bf34:	f1 f0       	breq	.+60     	; 0x1bf72 <lif_tests+0x1e8>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bf36:	e7 01       	movw	r28, r14
   1bf38:	cc 0f       	add	r28, r28
   1bf3a:	dd 1f       	adc	r29, r29
   1bf3c:	cc 0d       	add	r28, r12
   1bf3e:	dd 1d       	adc	r29, r13
   1bf40:	88 81       	ld	r24, Y
   1bf42:	99 81       	ldd	r25, Y+1	; 0x01
   1bf44:	0e 94 c0 48 	call	0x9180	; 0x9180 <atol>
   1bf48:	6b 01       	movw	r12, r22
   1bf4a:	7c 01       	movw	r14, r24
   1bf4c:	fe 01       	movw	r30, r28
   1bf4e:	32 97       	sbiw	r30, 0x02	; 2
   1bf50:	80 81       	ld	r24, Z
   1bf52:	91 81       	ldd	r25, Z+1	; 0x01
   1bf54:	0e 94 c0 48 	call	0x9180	; 0x9180 <atol>
   1bf58:	9b 01       	movw	r18, r22
   1bf5a:	ac 01       	movw	r20, r24
   1bf5c:	fe 01       	movw	r30, r28
   1bf5e:	34 97       	sbiw	r30, 0x04	; 4
   1bf60:	60 81       	ld	r22, Z
   1bf62:	71 81       	ldd	r23, Z+1	; 0x01
   1bf64:	26 97       	sbiw	r28, 0x06	; 6
   1bf66:	87 01       	movw	r16, r14
   1bf68:	76 01       	movw	r14, r12
   1bf6a:	88 81       	ld	r24, Y
   1bf6c:	99 81       	ldd	r25, Y+1	; 0x01
   1bf6e:	91 de       	rcall	.-734    	; 0x1bc92 <lif_create_image>
   1bf70:	78 c0       	rjmp	.+240    	; 0x1c062 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bf72:	8e 01       	movw	r16, r28
   1bf74:	0e 5f       	subi	r16, 0xFE	; 254
   1bf76:	1f 4f       	sbci	r17, 0xFF	; 255
   1bf78:	94 01       	movw	r18, r8
   1bf7a:	a8 01       	movw	r20, r16
   1bf7c:	6f e3       	ldi	r22, 0x3F	; 63
   1bf7e:	76 e1       	ldi	r23, 0x16	; 22
   1bf80:	c5 01       	movw	r24, r10
   1bf82:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1bf86:	ae 01       	movw	r20, r28
   1bf88:	4f 5f       	subi	r20, 0xFF	; 255
   1bf8a:	5f 4f       	sbci	r21, 0xFF	; 255
   1bf8c:	89 2b       	or	r24, r25
   1bf8e:	61 f0       	breq	.+24     	; 0x1bfa8 <lif_tests+0x21e>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1bf90:	ea 01       	movw	r28, r20
   1bf92:	cc 0f       	add	r28, r28
   1bf94:	dd 1f       	adc	r29, r29
   1bf96:	cc 0d       	add	r28, r12
   1bf98:	dd 1d       	adc	r29, r13
   1bf9a:	68 81       	ld	r22, Y
   1bf9c:	79 81       	ldd	r23, Y+1	; 0x01
   1bf9e:	22 97       	sbiw	r28, 0x02	; 2
   1bfa0:	88 81       	ld	r24, Y
   1bfa2:	99 81       	ldd	r25, Y+1	; 0x01
   1bfa4:	58 dd       	rcall	.-1360   	; 0x1ba56 <lif_del_file>
   1bfa6:	5d c0       	rjmp	.+186    	; 0x1c062 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1bfa8:	94 01       	movw	r18, r8
   1bfaa:	6e e4       	ldi	r22, 0x4E	; 78
   1bfac:	7b e0       	ldi	r23, 0x0B	; 11
   1bfae:	c5 01       	movw	r24, r10
   1bfb0:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1bfb4:	89 2b       	or	r24, r25
   1bfb6:	49 f0       	breq	.+18     	; 0x1bfca <lif_tests+0x240>
    {
        lif_dir(argv[ind]);
   1bfb8:	cc 0f       	add	r28, r28
   1bfba:	dd 1f       	adc	r29, r29
   1bfbc:	cc 0d       	add	r28, r12
   1bfbe:	dd 1d       	adc	r29, r13
   1bfc0:	88 81       	ld	r24, Y
   1bfc2:	99 81       	ldd	r25, Y+1	; 0x01
   1bfc4:	0e 94 0f d2 	call	0x1a41e	; 0x1a41e <lif_dir>
   1bfc8:	4c c0       	rjmp	.+152    	; 0x1c062 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1bfca:	94 01       	movw	r18, r8
   1bfcc:	a7 01       	movw	r20, r14
   1bfce:	63 e4       	ldi	r22, 0x43	; 67
   1bfd0:	76 e1       	ldi	r23, 0x16	; 22
   1bfd2:	c5 01       	movw	r24, r10
   1bfd4:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1bfd8:	89 2b       	or	r24, r25
   1bfda:	81 f0       	breq	.+32     	; 0x1bffc <lif_tests+0x272>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bfdc:	e8 01       	movw	r28, r16
   1bfde:	cc 0f       	add	r28, r28
   1bfe0:	dd 1f       	adc	r29, r29
   1bfe2:	cc 0d       	add	r28, r12
   1bfe4:	dd 1d       	adc	r29, r13
   1bfe6:	48 81       	ld	r20, Y
   1bfe8:	59 81       	ldd	r21, Y+1	; 0x01
   1bfea:	fe 01       	movw	r30, r28
   1bfec:	32 97       	sbiw	r30, 0x02	; 2
   1bfee:	60 81       	ld	r22, Z
   1bff0:	71 81       	ldd	r23, Z+1	; 0x01
   1bff2:	24 97       	sbiw	r28, 0x04	; 4
   1bff4:	88 81       	ld	r24, Y
   1bff6:	99 81       	ldd	r25, Y+1	; 0x01
   1bff8:	4f da       	rcall	.-2914   	; 0x1b498 <lif_extract_lif_as_lif>
   1bffa:	33 c0       	rjmp	.+102    	; 0x1c062 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bffc:	94 01       	movw	r18, r8
   1bffe:	a7 01       	movw	r20, r14
   1c000:	6e e4       	ldi	r22, 0x4E	; 78
   1c002:	76 e1       	ldi	r23, 0x16	; 22
   1c004:	c5 01       	movw	r24, r10
   1c006:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c00a:	89 2b       	or	r24, r25
   1c00c:	89 f0       	breq	.+34     	; 0x1c030 <lif_tests+0x2a6>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c00e:	e8 01       	movw	r28, r16
   1c010:	cc 0f       	add	r28, r28
   1c012:	dd 1f       	adc	r29, r29
   1c014:	cc 0d       	add	r28, r12
   1c016:	dd 1d       	adc	r29, r13
   1c018:	48 81       	ld	r20, Y
   1c01a:	59 81       	ldd	r21, Y+1	; 0x01
   1c01c:	fe 01       	movw	r30, r28
   1c01e:	32 97       	sbiw	r30, 0x02	; 2
   1c020:	60 81       	ld	r22, Z
   1c022:	71 81       	ldd	r23, Z+1	; 0x01
   1c024:	24 97       	sbiw	r28, 0x04	; 4
   1c026:	88 81       	ld	r24, Y
   1c028:	99 81       	ldd	r25, Y+1	; 0x01
   1c02a:	0e 94 60 d7 	call	0x1aec0	; 0x1aec0 <lif_extract_e010_as_ascii>
   1c02e:	19 c0       	rjmp	.+50     	; 0x1c062 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c030:	94 01       	movw	r18, r8
   1c032:	a7 01       	movw	r20, r14
   1c034:	6b e5       	ldi	r22, 0x5B	; 91
   1c036:	7b e0       	ldi	r23, 0x0B	; 11
   1c038:	c5 01       	movw	r24, r10
   1c03a:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c03e:	89 2b       	or	r24, r25
   1c040:	09 f4       	brne	.+2      	; 0x1c044 <lif_tests+0x2ba>
   1c042:	b8 ce       	rjmp	.-656    	; 0x1bdb4 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c044:	00 0f       	add	r16, r16
   1c046:	11 1f       	adc	r17, r17
   1c048:	e6 01       	movw	r28, r12
   1c04a:	c0 0f       	add	r28, r16
   1c04c:	d1 1f       	adc	r29, r17
   1c04e:	48 81       	ld	r20, Y
   1c050:	59 81       	ldd	r21, Y+1	; 0x01
   1c052:	fe 01       	movw	r30, r28
   1c054:	32 97       	sbiw	r30, 0x02	; 2
   1c056:	60 81       	ld	r22, Z
   1c058:	71 81       	ldd	r23, Z+1	; 0x01
   1c05a:	24 97       	sbiw	r28, 0x04	; 4
   1c05c:	88 81       	ld	r24, Y
   1c05e:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1c060:	92 dd       	rcall	.-1244   	; 0x1bb86 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c062:	81 e0       	ldi	r24, 0x01	; 1
   1c064:	90 e0       	ldi	r25, 0x00	; 0
   1c066:	cd b7       	in	r28, 0x3d	; 61
   1c068:	de b7       	in	r29, 0x3e	; 62
   1c06a:	ec e0       	ldi	r30, 0x0C	; 12
   1c06c:	14 c4       	rjmp	.+2088   	; 0x1c896 <__epilogue_restores__+0xc>

0001c06e <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1c06e:	84 e2       	ldi	r24, 0x24	; 36
   1c070:	9a e4       	ldi	r25, 0x4A	; 74
   1c072:	1f 92       	push	r1
   1c074:	9f 93       	push	r25
   1c076:	8f 93       	push	r24
   1c078:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c07c:	85 e0       	ldi	r24, 0x05	; 5
   1c07e:	9a e4       	ldi	r25, 0x4A	; 74
   1c080:	1f 92       	push	r1
   1c082:	9f 93       	push	r25
   1c084:	8f 93       	push	r24
   1c086:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c08a:	88 ee       	ldi	r24, 0xE8	; 232
   1c08c:	99 e4       	ldi	r25, 0x49	; 73
   1c08e:	1f 92       	push	r1
   1c090:	9f 93       	push	r25
   1c092:	8f 93       	push	r24
   1c094:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf(" GNU version 3\n");
   1c098:	88 ed       	ldi	r24, 0xD8	; 216
   1c09a:	99 e4       	ldi	r25, 0x49	; 73
   1c09c:	1f 92       	push	r1
   1c09e:	9f 93       	push	r25
   1c0a0:	8f 93       	push	r24
   1c0a2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c0a6:	81 eb       	ldi	r24, 0xB1	; 177
   1c0a8:	99 e4       	ldi	r25, 0x49	; 73
   1c0aa:	1f 92       	push	r1
   1c0ac:	9f 93       	push	r25
   1c0ae:	8f 93       	push	r24
   1c0b0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c0b4:	86 e5       	ldi	r24, 0x56	; 86
   1c0b6:	96 e1       	ldi	r25, 0x16	; 22
   1c0b8:	9f 93       	push	r25
   1c0ba:	8f 93       	push	r24
   1c0bc:	87 e9       	ldi	r24, 0x97	; 151
   1c0be:	99 e4       	ldi	r25, 0x49	; 73
   1c0c0:	1f 92       	push	r1
   1c0c2:	9f 93       	push	r25
   1c0c4:	8f 93       	push	r24
   1c0c6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c0ca:	8a e7       	ldi	r24, 0x7A	; 122
   1c0cc:	96 e1       	ldi	r25, 0x16	; 22
   1c0ce:	9f 93       	push	r25
   1c0d0:	8f 93       	push	r24
   1c0d2:	8d e7       	ldi	r24, 0x7D	; 125
   1c0d4:	99 e4       	ldi	r25, 0x49	; 73
   1c0d6:	1f 92       	push	r1
   1c0d8:	9f 93       	push	r25
   1c0da:	8f 93       	push	r24
   1c0dc:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
    printf("\n");
   1c0e0:	8b e7       	ldi	r24, 0x7B	; 123
   1c0e2:	99 e4       	ldi	r25, 0x49	; 73
   1c0e4:	1f 92       	push	r1
   1c0e6:	9f 93       	push	r25
   1c0e8:	8f 93       	push	r24
   1c0ea:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
}
   1c0ee:	8d b7       	in	r24, 0x3d	; 61
   1c0f0:	9e b7       	in	r25, 0x3e	; 62
   1c0f2:	4c 96       	adiw	r24, 0x1c	; 28
   1c0f4:	0f b6       	in	r0, 0x3f	; 63
   1c0f6:	f8 94       	cli
   1c0f8:	9e bf       	out	0x3e, r25	; 62
   1c0fa:	0f be       	out	0x3f, r0	; 63
   1c0fc:	8d bf       	out	0x3d, r24	; 61
   1c0fe:	08 95       	ret

0001c100 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1c100:	8c e6       	ldi	r24, 0x6C	; 108
   1c102:	99 e4       	ldi	r25, 0x49	; 73
   1c104:	1f 92       	push	r1
   1c106:	9f 93       	push	r25
   1c108:	8f 93       	push	r24
   1c10a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    clock_elapsed_begin();
   1c10e:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c112:	8e e9       	ldi	r24, 0x9E	; 158
   1c114:	96 e1       	ldi	r25, 0x16	; 22
   1c116:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c11a:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
   1c11e:	83 ef       	ldi	r24, 0xF3	; 243
   1c120:	91 e0       	ldi	r25, 0x01	; 1
   1c122:	01 97       	sbiw	r24, 0x01	; 1
   1c124:	f1 f7       	brne	.-4      	; 0x1c122 <delay_tests+0x22>
   1c126:	00 c0       	rjmp	.+0      	; 0x1c128 <delay_tests+0x28>
   1c128:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c12a:	85 eb       	ldi	r24, 0xB5	; 181
   1c12c:	96 e1       	ldi	r25, 0x16	; 22
   1c12e:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c132:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
   1c136:	83 ec       	ldi	r24, 0xC3	; 195
   1c138:	99 e0       	ldi	r25, 0x09	; 9
   1c13a:	01 97       	sbiw	r24, 0x01	; 1
   1c13c:	f1 f7       	brne	.-4      	; 0x1c13a <delay_tests+0x3a>
   1c13e:	00 c0       	rjmp	.+0      	; 0x1c140 <delay_tests+0x40>
   1c140:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c142:	84 ec       	ldi	r24, 0xC4	; 196
   1c144:	96 e1       	ldi	r25, 0x16	; 22
   1c146:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>

    printf("My delays\n");
   1c14a:	81 e6       	ldi	r24, 0x61	; 97
   1c14c:	99 e4       	ldi	r25, 0x49	; 73
   1c14e:	1f 92       	push	r1
   1c150:	9f 93       	push	r25
   1c152:	8f 93       	push	r24
   1c154:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>

    clock_elapsed_begin();
   1c158:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
    delayus(100U);
   1c15c:	64 e6       	ldi	r22, 0x64	; 100
   1c15e:	70 e0       	ldi	r23, 0x00	; 0
   1c160:	80 e0       	ldi	r24, 0x00	; 0
   1c162:	90 e0       	ldi	r25, 0x00	; 0
   1c164:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <delayus>
    clock_elapsed_end("delayus(100)");
   1c168:	83 ed       	ldi	r24, 0xD3	; 211
   1c16a:	96 e1       	ldi	r25, 0x16	; 22
   1c16c:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c170:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
    delayus(500U);
   1c174:	64 ef       	ldi	r22, 0xF4	; 244
   1c176:	71 e0       	ldi	r23, 0x01	; 1
   1c178:	80 e0       	ldi	r24, 0x00	; 0
   1c17a:	90 e0       	ldi	r25, 0x00	; 0
   1c17c:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <delayus>
    clock_elapsed_end("delayus(500)");
   1c180:	80 ee       	ldi	r24, 0xE0	; 224
   1c182:	96 e1       	ldi	r25, 0x16	; 22
   1c184:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c188:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
    delayus(1100);
   1c18c:	6c e4       	ldi	r22, 0x4C	; 76
   1c18e:	74 e0       	ldi	r23, 0x04	; 4
   1c190:	80 e0       	ldi	r24, 0x00	; 0
   1c192:	90 e0       	ldi	r25, 0x00	; 0
   1c194:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c198:	8d ee       	ldi	r24, 0xED	; 237
   1c19a:	96 e1       	ldi	r25, 0x16	; 22
   1c19c:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>

    clock_elapsed_begin();
   1c1a0:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <clock_elapsed_begin>
    delayms(1000);
   1c1a4:	68 ee       	ldi	r22, 0xE8	; 232
   1c1a6:	73 e0       	ldi	r23, 0x03	; 3
   1c1a8:	80 e0       	ldi	r24, 0x00	; 0
   1c1aa:	90 e0       	ldi	r25, 0x00	; 0
   1c1ac:	0e 94 01 2b 	call	0x5602	; 0x5602 <delayms>
    clock_elapsed_end("delayms(1100)");
   1c1b0:	8b ef       	ldi	r24, 0xFB	; 251
   1c1b2:	96 e1       	ldi	r25, 0x16	; 22
   1c1b4:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <clock_elapsed_end>
}
   1c1b8:	0f 90       	pop	r0
   1c1ba:	0f 90       	pop	r0
   1c1bc:	0f 90       	pop	r0
   1c1be:	0f 90       	pop	r0
   1c1c0:	0f 90       	pop	r0
   1c1c2:	0f 90       	pop	r0
   1c1c4:	08 95       	ret

0001c1c6 <help>:
   1c1c6:	53 df       	rcall	.-346    	; 0x1c06e <copyright>
   1c1c8:	80 e0       	ldi	r24, 0x00	; 0
   1c1ca:	90 e0       	ldi	r25, 0x00	; 0
   1c1cc:	0e 94 0b 75 	call	0xea16	; 0xea16 <fatfs_help>
   1c1d0:	80 e0       	ldi	r24, 0x00	; 0
   1c1d2:	90 e0       	ldi	r25, 0x00	; 0
   1c1d4:	0e 94 31 80 	call	0x10062	; 0x10062 <posix_help>
   1c1d8:	80 e0       	ldi	r24, 0x00	; 0
   1c1da:	90 e0       	ldi	r25, 0x00	; 0
   1c1dc:	0e 94 82 c0 	call	0x18104	; 0x18104 <lif_help>
   1c1e0:	80 e0       	ldi	r24, 0x00	; 0
   1c1e2:	90 e0       	ldi	r25, 0x00	; 0
   1c1e4:	0e 94 7a 92 	call	0x124f4	; 0x124f4 <gpib_help>
   1c1e8:	87 e3       	ldi	r24, 0x37	; 55
   1c1ea:	99 e4       	ldi	r25, 0x49	; 73
   1c1ec:	1f 92       	push	r1
   1c1ee:	9f 93       	push	r25
   1c1f0:	8f 93       	push	r24
   1c1f2:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c1f6:	0f 90       	pop	r0
   1c1f8:	0f 90       	pop	r0
   1c1fa:	0f 90       	pop	r0
   1c1fc:	08 95       	ret

0001c1fe <task>:
   1c1fe:	a4 ee       	ldi	r26, 0xE4	; 228
   1c200:	b0 e0       	ldi	r27, 0x00	; 0
   1c202:	e4 e0       	ldi	r30, 0x04	; 4
   1c204:	f1 ee       	ldi	r31, 0xE1	; 225
   1c206:	31 c3       	rjmp	.+1634   	; 0x1c86a <__prologue_saves__+0x18>
   1c208:	81 11       	cpse	r24, r1
   1c20a:	0e 94 18 92 	call	0x12430	; 0x12430 <gpib_task>
   1c20e:	80 e0       	ldi	r24, 0x00	; 0
   1c210:	0e 94 85 2c 	call	0x590a	; 0x590a <uart_rx_count>
   1c214:	89 2b       	or	r24, r25
   1c216:	09 f4       	brne	.+2      	; 0x1c21a <task+0x1c>
   1c218:	b7 c0       	rjmp	.+366    	; 0x1c388 <task+0x18a>
   1c21a:	84 e3       	ldi	r24, 0x34	; 52
   1c21c:	99 e4       	ldi	r25, 0x49	; 73
   1c21e:	1f 92       	push	r1
   1c220:	9f 93       	push	r25
   1c222:	8f 93       	push	r24
   1c224:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c228:	40 91 cd 1c 	lds	r20, 0x1CCD	; 0x801ccd <__iob>
   1c22c:	50 91 ce 1c 	lds	r21, 0x1CCE	; 0x801cce <__iob+0x1>
   1c230:	6e e7       	ldi	r22, 0x7E	; 126
   1c232:	70 e0       	ldi	r23, 0x00	; 0
   1c234:	ce 01       	movw	r24, r28
   1c236:	01 96       	adiw	r24, 0x01	; 1
   1c238:	0e 94 36 78 	call	0xf06c	; 0xf06c <fgets>
   1c23c:	42 e3       	ldi	r20, 0x32	; 50
   1c23e:	50 e0       	ldi	r21, 0x00	; 0
   1c240:	be 01       	movw	r22, r28
   1c242:	6f 57       	subi	r22, 0x7F	; 127
   1c244:	7f 4f       	sbci	r23, 0xFF	; 255
   1c246:	ce 01       	movw	r24, r28
   1c248:	01 96       	adiw	r24, 0x01	; 1
   1c24a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <split_args>
   1c24e:	8c 01       	movw	r16, r24
   1c250:	cf 57       	subi	r28, 0x7F	; 127
   1c252:	df 4f       	sbci	r29, 0xFF	; 255
   1c254:	e8 80       	ld	r14, Y
   1c256:	f9 80       	ldd	r15, Y+1	; 0x01
   1c258:	c1 58       	subi	r28, 0x81	; 129
   1c25a:	d0 40       	sbci	r29, 0x00	; 0
   1c25c:	0f 90       	pop	r0
   1c25e:	0f 90       	pop	r0
   1c260:	0f 90       	pop	r0
   1c262:	e1 14       	cp	r14, r1
   1c264:	f1 04       	cpc	r15, r1
   1c266:	09 f4       	brne	.+2      	; 0x1c26a <task+0x6c>
   1c268:	8f c0       	rjmp	.+286    	; 0x1c388 <task+0x18a>
   1c26a:	9c 01       	movw	r18, r24
   1c26c:	41 e0       	ldi	r20, 0x01	; 1
   1c26e:	50 e0       	ldi	r21, 0x00	; 0
   1c270:	69 e0       	ldi	r22, 0x09	; 9
   1c272:	77 e1       	ldi	r23, 0x17	; 23
   1c274:	c7 01       	movw	r24, r14
   1c276:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c27a:	89 2b       	or	r24, r25
   1c27c:	11 f0       	breq	.+4      	; 0x1c282 <task+0x84>
   1c27e:	40 df       	rcall	.-384    	; 0x1c100 <delay_tests>
   1c280:	83 c0       	rjmp	.+262    	; 0x1c388 <task+0x18a>
   1c282:	98 01       	movw	r18, r16
   1c284:	41 e0       	ldi	r20, 0x01	; 1
   1c286:	50 e0       	ldi	r21, 0x00	; 0
   1c288:	65 e1       	ldi	r22, 0x15	; 21
   1c28a:	77 e1       	ldi	r23, 0x17	; 23
   1c28c:	c7 01       	movw	r24, r14
   1c28e:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c292:	89 2b       	or	r24, r25
   1c294:	19 f5       	brne	.+70     	; 0x1c2dc <task+0xde>
   1c296:	98 01       	movw	r18, r16
   1c298:	41 e0       	ldi	r20, 0x01	; 1
   1c29a:	50 e0       	ldi	r21, 0x00	; 0
   1c29c:	6d e4       	ldi	r22, 0x4D	; 77
   1c29e:	7d e0       	ldi	r23, 0x0D	; 13
   1c2a0:	c7 01       	movw	r24, r14
   1c2a2:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c2a6:	89 2b       	or	r24, r25
   1c2a8:	69 f0       	breq	.+26     	; 0x1c2c4 <task+0xc6>
   1c2aa:	f8 94       	cli
   1c2ac:	80 e0       	ldi	r24, 0x00	; 0
   1c2ae:	0e 94 49 2b 	call	0x5692	; 0x5692 <uart_rx_flush>
   1c2b2:	f8 94       	cli
   1c2b4:	82 e0       	ldi	r24, 0x02	; 2
   1c2b6:	84 bf       	out	0x34, r24	; 52
   1c2b8:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <RESET>
   1c2bc:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <RESET+0x1>
   1c2c0:	09 95       	icall
   1c2c2:	62 c0       	rjmp	.+196    	; 0x1c388 <task+0x18a>
   1c2c4:	98 01       	movw	r18, r16
   1c2c6:	41 e0       	ldi	r20, 0x01	; 1
   1c2c8:	50 e0       	ldi	r21, 0x00	; 0
   1c2ca:	6a e1       	ldi	r22, 0x1A	; 26
   1c2cc:	77 e1       	ldi	r23, 0x17	; 23
   1c2ce:	c7 01       	movw	r24, r14
   1c2d0:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c2d4:	89 2b       	or	r24, r25
   1c2d6:	29 f0       	breq	.+10     	; 0x1c2e2 <task+0xe4>
   1c2d8:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <setdate>
   1c2dc:	0e 94 75 3f 	call	0x7eea	; 0x7eea <display_clock>
   1c2e0:	53 c0       	rjmp	.+166    	; 0x1c388 <task+0x18a>
   1c2e2:	98 01       	movw	r18, r16
   1c2e4:	41 e0       	ldi	r20, 0x01	; 1
   1c2e6:	50 e0       	ldi	r21, 0x00	; 0
   1c2e8:	62 e2       	ldi	r22, 0x22	; 34
   1c2ea:	77 e1       	ldi	r23, 0x17	; 23
   1c2ec:	c7 01       	movw	r24, r14
   1c2ee:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c2f2:	89 2b       	or	r24, r25
   1c2f4:	19 f0       	breq	.+6      	; 0x1c2fc <task+0xfe>
   1c2f6:	0e 94 de 29 	call	0x53bc	; 0x53bc <PrintFree>
   1c2fa:	46 c0       	rjmp	.+140    	; 0x1c388 <task+0x18a>
   1c2fc:	98 01       	movw	r18, r16
   1c2fe:	41 e0       	ldi	r20, 0x01	; 1
   1c300:	50 e0       	ldi	r21, 0x00	; 0
   1c302:	64 e1       	ldi	r22, 0x14	; 20
   1c304:	76 e1       	ldi	r23, 0x16	; 22
   1c306:	c7 01       	movw	r24, r14
   1c308:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c30c:	89 2b       	or	r24, r25
   1c30e:	11 f0       	breq	.+4      	; 0x1c314 <task+0x116>
   1c310:	5a df       	rcall	.-332    	; 0x1c1c6 <help>
   1c312:	3a c0       	rjmp	.+116    	; 0x1c388 <task+0x18a>
   1c314:	98 01       	movw	r18, r16
   1c316:	41 e0       	ldi	r20, 0x01	; 1
   1c318:	50 e0       	ldi	r21, 0x00	; 0
   1c31a:	6a e1       	ldi	r22, 0x1A	; 26
   1c31c:	76 e1       	ldi	r23, 0x16	; 22
   1c31e:	c7 01       	movw	r24, r14
   1c320:	0e 94 1b 34 	call	0x6836	; 0x6836 <MATCHARGS>
   1c324:	89 2b       	or	r24, r25
   1c326:	a1 f7       	brne	.-24     	; 0x1c310 <task+0x112>
   1c328:	be 01       	movw	r22, r28
   1c32a:	6f 57       	subi	r22, 0x7F	; 127
   1c32c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c32e:	c8 01       	movw	r24, r16
   1c330:	0e 94 96 92 	call	0x1252c	; 0x1252c <gpib_tests>
   1c334:	89 2b       	or	r24, r25
   1c336:	19 f0       	breq	.+6      	; 0x1c33e <task+0x140>
   1c338:	0e 94 e4 8d 	call	0x11bc8	; 0x11bc8 <gpib_init_devices>
   1c33c:	25 c0       	rjmp	.+74     	; 0x1c388 <task+0x18a>
   1c33e:	be 01       	movw	r22, r28
   1c340:	6f 57       	subi	r22, 0x7F	; 127
   1c342:	7f 4f       	sbci	r23, 0xFF	; 255
   1c344:	c8 01       	movw	r24, r16
   1c346:	0e 94 a5 83 	call	0x1074a	; 0x1074a <posix_tests>
   1c34a:	89 2b       	or	r24, r25
   1c34c:	e9 f4       	brne	.+58     	; 0x1c388 <task+0x18a>
   1c34e:	be 01       	movw	r22, r28
   1c350:	6f 57       	subi	r22, 0x7F	; 127
   1c352:	7f 4f       	sbci	r23, 0xFF	; 255
   1c354:	c8 01       	movw	r24, r16
   1c356:	0e 94 26 76 	call	0xec4c	; 0xec4c <fatfs_tests>
   1c35a:	89 2b       	or	r24, r25
   1c35c:	a9 f4       	brne	.+42     	; 0x1c388 <task+0x18a>
   1c35e:	be 01       	movw	r22, r28
   1c360:	6f 57       	subi	r22, 0x7F	; 127
   1c362:	7f 4f       	sbci	r23, 0xFF	; 255
   1c364:	c8 01       	movw	r24, r16
   1c366:	11 dd       	rcall	.-1502   	; 0x1bd8a <lif_tests>
   1c368:	89 2b       	or	r24, r25
   1c36a:	71 f4       	brne	.+28     	; 0x1c388 <task+0x18a>
   1c36c:	ff 92       	push	r15
   1c36e:	ef 92       	push	r14
   1c370:	88 e2       	ldi	r24, 0x28	; 40
   1c372:	99 e4       	ldi	r25, 0x49	; 73
   1c374:	1f 92       	push	r1
   1c376:	9f 93       	push	r25
   1c378:	8f 93       	push	r24
   1c37a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c37e:	0f 90       	pop	r0
   1c380:	0f 90       	pop	r0
   1c382:	0f 90       	pop	r0
   1c384:	0f 90       	pop	r0
   1c386:	0f 90       	pop	r0
   1c388:	cc 51       	subi	r28, 0x1C	; 28
   1c38a:	df 4f       	sbci	r29, 0xFF	; 255
   1c38c:	e6 e0       	ldi	r30, 0x06	; 6
   1c38e:	89 c2       	rjmp	.+1298   	; 0x1c8a2 <__epilogue_restores__+0x18>

0001c390 <main>:
   1c390:	a8 e0       	ldi	r26, 0x08	; 8
   1c392:	b0 e0       	ldi	r27, 0x00	; 0
   1c394:	ed ec       	ldi	r30, 0xCD	; 205
   1c396:	f1 ee       	ldi	r31, 0xE1	; 225
   1c398:	67 c2       	rjmp	.+1230   	; 0x1c868 <__prologue_saves__+0x16>
   1c39a:	0e 94 0f 87 	call	0x10e1e	; 0x10e1e <gpib_bus_init>
   1c39e:	40 e0       	ldi	r20, 0x00	; 0
   1c3a0:	52 ec       	ldi	r21, 0xC2	; 194
   1c3a2:	61 e0       	ldi	r22, 0x01	; 1
   1c3a4:	70 e0       	ldi	r23, 0x00	; 0
   1c3a6:	80 e0       	ldi	r24, 0x00	; 0
   1c3a8:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <uart_init>
   1c3ac:	06 2f       	mov	r16, r22
   1c3ae:	f7 2e       	mov	r15, r23
   1c3b0:	e8 2e       	mov	r14, r24
   1c3b2:	d9 2e       	mov	r13, r25
   1c3b4:	68 ec       	ldi	r22, 0xC8	; 200
   1c3b6:	70 e0       	ldi	r23, 0x00	; 0
   1c3b8:	80 e0       	ldi	r24, 0x00	; 0
   1c3ba:	90 e0       	ldi	r25, 0x00	; 0
   1c3bc:	0e 94 01 2b 	call	0x5602	; 0x5602 <delayms>
   1c3c0:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c3c4:	81 e2       	ldi	r24, 0x21	; 33
   1c3c6:	99 e4       	ldi	r25, 0x49	; 73
   1c3c8:	1f 92       	push	r1
   1c3ca:	9f 93       	push	r25
   1c3cc:	8f 93       	push	r24
   1c3ce:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c3d2:	11 e0       	ldi	r17, 0x01	; 1
   1c3d4:	1f 93       	push	r17
   1c3d6:	81 e3       	ldi	r24, 0x31	; 49
   1c3d8:	8f 93       	push	r24
   1c3da:	8d e2       	ldi	r24, 0x2D	; 45
   1c3dc:	8f 93       	push	r24
   1c3de:	1f 92       	push	r1
   1c3e0:	80 e1       	ldi	r24, 0x10	; 16
   1c3e2:	99 e4       	ldi	r25, 0x49	; 73
   1c3e4:	1f 92       	push	r1
   1c3e6:	9f 93       	push	r25
   1c3e8:	8f 93       	push	r24
   1c3ea:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c3ee:	df 92       	push	r13
   1c3f0:	ef 92       	push	r14
   1c3f2:	ff 92       	push	r15
   1c3f4:	0f 93       	push	r16
   1c3f6:	1f 92       	push	r1
   1c3f8:	1f 93       	push	r17
   1c3fa:	82 ec       	ldi	r24, 0xC2	; 194
   1c3fc:	8f 93       	push	r24
   1c3fe:	1f 92       	push	r1
   1c400:	89 ee       	ldi	r24, 0xE9	; 233
   1c402:	98 e4       	ldi	r25, 0x48	; 72
   1c404:	1f 92       	push	r1
   1c406:	9f 93       	push	r25
   1c408:	8f 93       	push	r24
   1c40a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c40e:	0e 94 d8 37 	call	0x6fb0	; 0x6fb0 <init_timers>
   1c412:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c416:	8a ec       	ldi	r24, 0xCA	; 202
   1c418:	98 e4       	ldi	r25, 0x48	; 72
   1c41a:	1f 92       	push	r1
   1c41c:	9f 93       	push	r25
   1c41e:	8f 93       	push	r24
   1c420:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c424:	8d ea       	ldi	r24, 0xAD	; 173
   1c426:	98 e4       	ldi	r25, 0x48	; 72
   1c428:	1f 92       	push	r1
   1c42a:	9f 93       	push	r25
   1c42c:	8f 93       	push	r24
   1c42e:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c432:	8d e9       	ldi	r24, 0x9D	; 157
   1c434:	98 e4       	ldi	r25, 0x48	; 72
   1c436:	1f 92       	push	r1
   1c438:	9f 93       	push	r25
   1c43a:	8f 93       	push	r24
   1c43c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c440:	86 e7       	ldi	r24, 0x76	; 118
   1c442:	98 e4       	ldi	r25, 0x48	; 72
   1c444:	1f 92       	push	r1
   1c446:	9f 93       	push	r25
   1c448:	8f 93       	push	r24
   1c44a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c44e:	0f b6       	in	r0, 0x3f	; 63
   1c450:	f8 94       	cli
   1c452:	de bf       	out	0x3e, r29	; 62
   1c454:	0f be       	out	0x3f, r0	; 63
   1c456:	cd bf       	out	0x3d, r28	; 61
   1c458:	86 e5       	ldi	r24, 0x56	; 86
   1c45a:	96 e1       	ldi	r25, 0x16	; 22
   1c45c:	9f 93       	push	r25
   1c45e:	8f 93       	push	r24
   1c460:	8c e5       	ldi	r24, 0x5C	; 92
   1c462:	98 e4       	ldi	r25, 0x48	; 72
   1c464:	1f 92       	push	r1
   1c466:	9f 93       	push	r25
   1c468:	8f 93       	push	r24
   1c46a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c46e:	8a e7       	ldi	r24, 0x7A	; 122
   1c470:	96 e1       	ldi	r25, 0x16	; 22
   1c472:	9f 93       	push	r25
   1c474:	8f 93       	push	r24
   1c476:	82 e4       	ldi	r24, 0x42	; 66
   1c478:	98 e4       	ldi	r25, 0x48	; 72
   1c47a:	1f 92       	push	r1
   1c47c:	9f 93       	push	r25
   1c47e:	8f 93       	push	r24
   1c480:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c484:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c488:	0e 94 de 29 	call	0x53bc	; 0x53bc <PrintFree>
   1c48c:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c490:	68 ec       	ldi	r22, 0xC8	; 200
   1c492:	70 e0       	ldi	r23, 0x00	; 0
   1c494:	80 e0       	ldi	r24, 0x00	; 0
   1c496:	90 e0       	ldi	r25, 0x00	; 0
   1c498:	0e 94 01 2b 	call	0x5602	; 0x5602 <delayms>
   1c49c:	8c e2       	ldi	r24, 0x2C	; 44
   1c49e:	98 e4       	ldi	r25, 0x48	; 72
   1c4a0:	1f 92       	push	r1
   1c4a2:	9f 93       	push	r25
   1c4a4:	8f 93       	push	r24
   1c4a6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c4aa:	4b e0       	ldi	r20, 0x0B	; 11
   1c4ac:	50 e0       	ldi	r21, 0x00	; 0
   1c4ae:	60 e2       	ldi	r22, 0x20	; 32
   1c4b0:	71 ea       	ldi	r23, 0xA1	; 161
   1c4b2:	87 e0       	ldi	r24, 0x07	; 7
   1c4b4:	90 e0       	ldi	r25, 0x00	; 0
   1c4b6:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <spi_init>
   1c4ba:	86 e1       	ldi	r24, 0x16	; 22
   1c4bc:	98 e4       	ldi	r25, 0x48	; 72
   1c4be:	1f 92       	push	r1
   1c4c0:	9f 93       	push	r25
   1c4c2:	8f 93       	push	r24
   1c4c4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c4c8:	61 e1       	ldi	r22, 0x11	; 17
   1c4ca:	81 e0       	ldi	r24, 0x01	; 1
   1c4cc:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <TWI_Init>
   1c4d0:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c4d4:	84 e0       	ldi	r24, 0x04	; 4
   1c4d6:	98 e4       	ldi	r25, 0x48	; 72
   1c4d8:	1f 92       	push	r1
   1c4da:	9f 93       	push	r25
   1c4dc:	8f 93       	push	r24
   1c4de:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c4e2:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <clock_clear>
   1c4e6:	85 ef       	ldi	r24, 0xF5	; 245
   1c4e8:	97 e4       	ldi	r25, 0x47	; 71
   1c4ea:	1f 92       	push	r1
   1c4ec:	9f 93       	push	r25
   1c4ee:	8f 93       	push	r24
   1c4f0:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c4f4:	be 01       	movw	r22, r28
   1c4f6:	6f 5f       	subi	r22, 0xFF	; 255
   1c4f8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4fa:	80 e0       	ldi	r24, 0x00	; 0
   1c4fc:	90 e0       	ldi	r25, 0x00	; 0
   1c4fe:	0e 94 30 38 	call	0x7060	; 0x7060 <clock_getres>
   1c502:	88 85       	ldd	r24, Y+8	; 0x08
   1c504:	8f 93       	push	r24
   1c506:	8f 81       	ldd	r24, Y+7	; 0x07
   1c508:	8f 93       	push	r24
   1c50a:	8e 81       	ldd	r24, Y+6	; 0x06
   1c50c:	8f 93       	push	r24
   1c50e:	8d 81       	ldd	r24, Y+5	; 0x05
   1c510:	8f 93       	push	r24
   1c512:	88 ed       	ldi	r24, 0xD8	; 216
   1c514:	97 e4       	ldi	r25, 0x47	; 71
   1c516:	1f 92       	push	r1
   1c518:	9f 93       	push	r25
   1c51a:	8f 93       	push	r24
   1c51c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c520:	8c e2       	ldi	r24, 0x2C	; 44
   1c522:	91 e0       	ldi	r25, 0x01	; 1
   1c524:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <initialize_clock>
   1c528:	0e 94 75 3f 	call	0x7eea	; 0x7eea <display_clock>
   1c52c:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c530:	8a eb       	ldi	r24, 0xBA	; 186
   1c532:	97 e4       	ldi	r25, 0x47	; 71
   1c534:	1f 92       	push	r1
   1c536:	9f 93       	push	r25
   1c538:	8f 93       	push	r24
   1c53a:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c53e:	0f b6       	in	r0, 0x3f	; 63
   1c540:	f8 94       	cli
   1c542:	de bf       	out	0x3e, r29	; 62
   1c544:	0f be       	out	0x3f, r0	; 63
   1c546:	cd bf       	out	0x3d, r28	; 61
   1c548:	84 ee       	ldi	r24, 0xE4	; 228
   1c54a:	0e 94 45 32 	call	0x648a	; 0x648a <LCD_init>
   1c54e:	89 2b       	or	r24, r25
   1c550:	e9 f0       	breq	.+58     	; 0x1c58c <main+0x1fc>
   1c552:	60 e0       	ldi	r22, 0x00	; 0
   1c554:	80 e0       	ldi	r24, 0x00	; 0
   1c556:	0e 94 0f 32 	call	0x641e	; 0x641e <LCD_pos>
   1c55a:	86 e2       	ldi	r24, 0x26	; 38
   1c55c:	97 e1       	ldi	r25, 0x17	; 23
   1c55e:	9f 93       	push	r25
   1c560:	8f 93       	push	r24
   1c562:	0e 94 fe 32 	call	0x65fc	; 0x65fc <lcd_printf>
   1c566:	85 e3       	ldi	r24, 0x35	; 53
   1c568:	97 e1       	ldi	r25, 0x17	; 23
   1c56a:	9f 93       	push	r25
   1c56c:	8f 93       	push	r24
   1c56e:	0e 94 fe 32 	call	0x65fc	; 0x65fc <lcd_printf>
   1c572:	8d e9       	ldi	r24, 0x9D	; 157
   1c574:	97 e4       	ldi	r25, 0x47	; 71
   1c576:	1f 92       	push	r1
   1c578:	9f 93       	push	r25
   1c57a:	8f 93       	push	r24
   1c57c:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c580:	0f b6       	in	r0, 0x3f	; 63
   1c582:	f8 94       	cli
   1c584:	de bf       	out	0x3e, r29	; 62
   1c586:	0f be       	out	0x3f, r0	; 63
   1c588:	cd bf       	out	0x3d, r28	; 61
   1c58a:	0a c0       	rjmp	.+20     	; 0x1c5a0 <main+0x210>
   1c58c:	83 e8       	ldi	r24, 0x83	; 131
   1c58e:	97 e4       	ldi	r25, 0x47	; 71
   1c590:	1f 92       	push	r1
   1c592:	9f 93       	push	r25
   1c594:	8f 93       	push	r24
   1c596:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c59a:	0f 90       	pop	r0
   1c59c:	0f 90       	pop	r0
   1c59e:	0f 90       	pop	r0
   1c5a0:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c5a4:	8b e6       	ldi	r24, 0x6B	; 107
   1c5a6:	97 e4       	ldi	r25, 0x47	; 71
   1c5a8:	1f 92       	push	r1
   1c5aa:	9f 93       	push	r25
   1c5ac:	8f 93       	push	r24
   1c5ae:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c5b2:	81 e0       	ldi	r24, 0x01	; 1
   1c5b4:	90 e0       	ldi	r25, 0x00	; 0
   1c5b6:	0e 94 66 71 	call	0xe2cc	; 0xe2cc <mmc_init>
   1c5ba:	8a e5       	ldi	r24, 0x5A	; 90
   1c5bc:	97 e4       	ldi	r25, 0x47	; 71
   1c5be:	1f 92       	push	r1
   1c5c0:	9f 93       	push	r25
   1c5c2:	8f 93       	push	r24
   1c5c4:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c5c8:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c5cc:	0e 94 0f 87 	call	0x10e1e	; 0x10e1e <gpib_bus_init>
   1c5d0:	84 e4       	ldi	r24, 0x44	; 68
   1c5d2:	97 e4       	ldi	r25, 0x47	; 71
   1c5d4:	1f 92       	push	r1
   1c5d6:	9f 93       	push	r25
   1c5d8:	8f 93       	push	r24
   1c5da:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c5de:	0e 94 8b be 	call	0x17d16	; 0x17d16 <printer_init>
   1c5e2:	8f e2       	ldi	r24, 0x2F	; 47
   1c5e4:	97 e4       	ldi	r25, 0x47	; 71
   1c5e6:	1f 92       	push	r1
   1c5e8:	9f 93       	push	r25
   1c5ea:	8f 93       	push	r24
   1c5ec:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c5f0:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c5f4:	8d e1       	ldi	r24, 0x1D	; 29
   1c5f6:	97 e4       	ldi	r25, 0x47	; 71
   1c5f8:	1f 92       	push	r1
   1c5fa:	9f 93       	push	r25
   1c5fc:	8f 93       	push	r24
   1c5fe:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c602:	0e 94 1f 85 	call	0x10a3e	; 0x10a3e <gpib_timer_init>
   1c606:	85 e0       	ldi	r24, 0x05	; 5
   1c608:	97 e4       	ldi	r25, 0x47	; 71
   1c60a:	1f 92       	push	r1
   1c60c:	9f 93       	push	r25
   1c60e:	8f 93       	push	r24
   1c610:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c614:	0e 94 28 8d 	call	0x11a50	; 0x11a50 <gpib_file_init>
   1c618:	80 ef       	ldi	r24, 0xF0	; 240
   1c61a:	96 e4       	ldi	r25, 0x46	; 70
   1c61c:	1f 92       	push	r1
   1c61e:	9f 93       	push	r25
   1c620:	8f 93       	push	r24
   1c622:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c626:	0e 94 37 87 	call	0x10e6e	; 0x10e6e <gpib_state_init>
   1c62a:	8a ed       	ldi	r24, 0xDA	; 218
   1c62c:	96 e4       	ldi	r25, 0x46	; 70
   1c62e:	1f 92       	push	r1
   1c630:	9f 93       	push	r25
   1c632:	8f 93       	push	r24
   1c634:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c638:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c63c:	0e 94 39 a0 	call	0x14072	; 0x14072 <display_Config>
   1c640:	0e 94 15 a3 	call	0x1462a	; 0x1462a <format_drives>
   1c644:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c648:	0e 94 3e 9f 	call	0x13e7c	; 0x13e7c <display_Addresses>
   1c64c:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c650:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c654:	8f 93       	push	r24
   1c656:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c65a:	8f 93       	push	r24
   1c65c:	84 ec       	ldi	r24, 0xC4	; 196
   1c65e:	96 e4       	ldi	r25, 0x46	; 70
   1c660:	1f 92       	push	r1
   1c662:	9f 93       	push	r25
   1c664:	8f 93       	push	r24
   1c666:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c66a:	60 e0       	ldi	r22, 0x00	; 0
   1c66c:	80 e0       	ldi	r24, 0x00	; 0
   1c66e:	0e 94 0f 32 	call	0x641e	; 0x641e <LCD_pos>
   1c672:	83 e0       	ldi	r24, 0x03	; 3
   1c674:	0e 94 d0 93 	call	0x127a0	; 0x127a0 <count_drive_types>
   1c678:	9f 93       	push	r25
   1c67a:	8f 93       	push	r24
   1c67c:	83 e4       	ldi	r24, 0x43	; 67
   1c67e:	97 e1       	ldi	r25, 0x17	; 23
   1c680:	9f 93       	push	r25
   1c682:	8f 93       	push	r24
   1c684:	0e 94 fe 32 	call	0x65fc	; 0x65fc <lcd_printf>
   1c688:	0f b6       	in	r0, 0x3f	; 63
   1c68a:	f8 94       	cli
   1c68c:	de bf       	out	0x3e, r29	; 62
   1c68e:	0f be       	out	0x3f, r0	; 63
   1c690:	cd bf       	out	0x3d, r28	; 61
   1c692:	81 e0       	ldi	r24, 0x01	; 1
   1c694:	0e 94 d0 93 	call	0x127a0	; 0x127a0 <count_drive_types>
   1c698:	9f 93       	push	r25
   1c69a:	8f 93       	push	r24
   1c69c:	84 e5       	ldi	r24, 0x54	; 84
   1c69e:	97 e1       	ldi	r25, 0x17	; 23
   1c6a0:	9f 93       	push	r25
   1c6a2:	8f 93       	push	r24
   1c6a4:	0e 94 fe 32 	call	0x65fc	; 0x65fc <lcd_printf>
   1c6a8:	0e 94 1c 33 	call	0x6638	; 0x6638 <sep>
   1c6ac:	80 eb       	ldi	r24, 0xB0	; 176
   1c6ae:	96 e4       	ldi	r25, 0x46	; 70
   1c6b0:	1f 92       	push	r1
   1c6b2:	9f 93       	push	r25
   1c6b4:	8f 93       	push	r24
   1c6b6:	0e 94 20 48 	call	0x9040	; 0x9040 <printf_P>
   1c6ba:	0f b6       	in	r0, 0x3f	; 63
   1c6bc:	f8 94       	cli
   1c6be:	de bf       	out	0x3e, r29	; 62
   1c6c0:	0f be       	out	0x3f, r0	; 63
   1c6c2:	cd bf       	out	0x3d, r28	; 61
   1c6c4:	81 e0       	ldi	r24, 0x01	; 1
   1c6c6:	9b dd       	rcall	.-1226   	; 0x1c1fe <task>
   1c6c8:	fd cf       	rjmp	.-6      	; 0x1c6c4 <main+0x334>

0001c6ca <__mulsi3>:
   1c6ca:	db 01       	movw	r26, r22
   1c6cc:	8f 93       	push	r24
   1c6ce:	9f 93       	push	r25
   1c6d0:	a0 d0       	rcall	.+320    	; 0x1c812 <__muluhisi3>
   1c6d2:	bf 91       	pop	r27
   1c6d4:	af 91       	pop	r26
   1c6d6:	a2 9f       	mul	r26, r18
   1c6d8:	80 0d       	add	r24, r0
   1c6da:	91 1d       	adc	r25, r1
   1c6dc:	a3 9f       	mul	r26, r19
   1c6de:	90 0d       	add	r25, r0
   1c6e0:	b2 9f       	mul	r27, r18
   1c6e2:	90 0d       	add	r25, r0
   1c6e4:	11 24       	eor	r1, r1
   1c6e6:	08 95       	ret

0001c6e8 <__udivmodqi4>:
   1c6e8:	99 1b       	sub	r25, r25
   1c6ea:	79 e0       	ldi	r23, 0x09	; 9
   1c6ec:	04 c0       	rjmp	.+8      	; 0x1c6f6 <__udivmodqi4_ep>

0001c6ee <__udivmodqi4_loop>:
   1c6ee:	99 1f       	adc	r25, r25
   1c6f0:	96 17       	cp	r25, r22
   1c6f2:	08 f0       	brcs	.+2      	; 0x1c6f6 <__udivmodqi4_ep>
   1c6f4:	96 1b       	sub	r25, r22

0001c6f6 <__udivmodqi4_ep>:
   1c6f6:	88 1f       	adc	r24, r24
   1c6f8:	7a 95       	dec	r23
   1c6fa:	c9 f7       	brne	.-14     	; 0x1c6ee <__udivmodqi4_loop>
   1c6fc:	80 95       	com	r24
   1c6fe:	08 95       	ret

0001c700 <__udivmodhi4>:
   1c700:	aa 1b       	sub	r26, r26
   1c702:	bb 1b       	sub	r27, r27
   1c704:	51 e1       	ldi	r21, 0x11	; 17
   1c706:	07 c0       	rjmp	.+14     	; 0x1c716 <__udivmodhi4_ep>

0001c708 <__udivmodhi4_loop>:
   1c708:	aa 1f       	adc	r26, r26
   1c70a:	bb 1f       	adc	r27, r27
   1c70c:	a6 17       	cp	r26, r22
   1c70e:	b7 07       	cpc	r27, r23
   1c710:	10 f0       	brcs	.+4      	; 0x1c716 <__udivmodhi4_ep>
   1c712:	a6 1b       	sub	r26, r22
   1c714:	b7 0b       	sbc	r27, r23

0001c716 <__udivmodhi4_ep>:
   1c716:	88 1f       	adc	r24, r24
   1c718:	99 1f       	adc	r25, r25
   1c71a:	5a 95       	dec	r21
   1c71c:	a9 f7       	brne	.-22     	; 0x1c708 <__udivmodhi4_loop>
   1c71e:	80 95       	com	r24
   1c720:	90 95       	com	r25
   1c722:	bc 01       	movw	r22, r24
   1c724:	cd 01       	movw	r24, r26
   1c726:	08 95       	ret

0001c728 <__divmodhi4>:
   1c728:	97 fb       	bst	r25, 7
   1c72a:	07 2e       	mov	r0, r23
   1c72c:	16 f4       	brtc	.+4      	; 0x1c732 <__divmodhi4+0xa>
   1c72e:	00 94       	com	r0
   1c730:	06 d0       	rcall	.+12     	; 0x1c73e <__divmodhi4_neg1>
   1c732:	77 fd       	sbrc	r23, 7
   1c734:	08 d0       	rcall	.+16     	; 0x1c746 <__divmodhi4_neg2>
   1c736:	e4 df       	rcall	.-56     	; 0x1c700 <__udivmodhi4>
   1c738:	07 fc       	sbrc	r0, 7
   1c73a:	05 d0       	rcall	.+10     	; 0x1c746 <__divmodhi4_neg2>
   1c73c:	3e f4       	brtc	.+14     	; 0x1c74c <__divmodhi4_exit>

0001c73e <__divmodhi4_neg1>:
   1c73e:	90 95       	com	r25
   1c740:	81 95       	neg	r24
   1c742:	9f 4f       	sbci	r25, 0xFF	; 255
   1c744:	08 95       	ret

0001c746 <__divmodhi4_neg2>:
   1c746:	70 95       	com	r23
   1c748:	61 95       	neg	r22
   1c74a:	7f 4f       	sbci	r23, 0xFF	; 255

0001c74c <__divmodhi4_exit>:
   1c74c:	08 95       	ret

0001c74e <__udivmodsi4>:
   1c74e:	a1 e2       	ldi	r26, 0x21	; 33
   1c750:	1a 2e       	mov	r1, r26
   1c752:	aa 1b       	sub	r26, r26
   1c754:	bb 1b       	sub	r27, r27
   1c756:	fd 01       	movw	r30, r26
   1c758:	0d c0       	rjmp	.+26     	; 0x1c774 <__udivmodsi4_ep>

0001c75a <__udivmodsi4_loop>:
   1c75a:	aa 1f       	adc	r26, r26
   1c75c:	bb 1f       	adc	r27, r27
   1c75e:	ee 1f       	adc	r30, r30
   1c760:	ff 1f       	adc	r31, r31
   1c762:	a2 17       	cp	r26, r18
   1c764:	b3 07       	cpc	r27, r19
   1c766:	e4 07       	cpc	r30, r20
   1c768:	f5 07       	cpc	r31, r21
   1c76a:	20 f0       	brcs	.+8      	; 0x1c774 <__udivmodsi4_ep>
   1c76c:	a2 1b       	sub	r26, r18
   1c76e:	b3 0b       	sbc	r27, r19
   1c770:	e4 0b       	sbc	r30, r20
   1c772:	f5 0b       	sbc	r31, r21

0001c774 <__udivmodsi4_ep>:
   1c774:	66 1f       	adc	r22, r22
   1c776:	77 1f       	adc	r23, r23
   1c778:	88 1f       	adc	r24, r24
   1c77a:	99 1f       	adc	r25, r25
   1c77c:	1a 94       	dec	r1
   1c77e:	69 f7       	brne	.-38     	; 0x1c75a <__udivmodsi4_loop>
   1c780:	60 95       	com	r22
   1c782:	70 95       	com	r23
   1c784:	80 95       	com	r24
   1c786:	90 95       	com	r25
   1c788:	9b 01       	movw	r18, r22
   1c78a:	ac 01       	movw	r20, r24
   1c78c:	bd 01       	movw	r22, r26
   1c78e:	cf 01       	movw	r24, r30
   1c790:	08 95       	ret

0001c792 <__divmodsi4>:
   1c792:	05 2e       	mov	r0, r21
   1c794:	97 fb       	bst	r25, 7
   1c796:	16 f4       	brtc	.+4      	; 0x1c79c <__divmodsi4+0xa>
   1c798:	00 94       	com	r0
   1c79a:	0f d0       	rcall	.+30     	; 0x1c7ba <__negsi2>
   1c79c:	57 fd       	sbrc	r21, 7
   1c79e:	05 d0       	rcall	.+10     	; 0x1c7aa <__divmodsi4_neg2>
   1c7a0:	d6 df       	rcall	.-84     	; 0x1c74e <__udivmodsi4>
   1c7a2:	07 fc       	sbrc	r0, 7
   1c7a4:	02 d0       	rcall	.+4      	; 0x1c7aa <__divmodsi4_neg2>
   1c7a6:	46 f4       	brtc	.+16     	; 0x1c7b8 <__divmodsi4_exit>
   1c7a8:	08 c0       	rjmp	.+16     	; 0x1c7ba <__negsi2>

0001c7aa <__divmodsi4_neg2>:
   1c7aa:	50 95       	com	r21
   1c7ac:	40 95       	com	r20
   1c7ae:	30 95       	com	r19
   1c7b0:	21 95       	neg	r18
   1c7b2:	3f 4f       	sbci	r19, 0xFF	; 255
   1c7b4:	4f 4f       	sbci	r20, 0xFF	; 255
   1c7b6:	5f 4f       	sbci	r21, 0xFF	; 255

0001c7b8 <__divmodsi4_exit>:
   1c7b8:	08 95       	ret

0001c7ba <__negsi2>:
   1c7ba:	90 95       	com	r25
   1c7bc:	80 95       	com	r24
   1c7be:	70 95       	com	r23
   1c7c0:	61 95       	neg	r22
   1c7c2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c7c4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c7c6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c7c8:	08 95       	ret

0001c7ca <__tablejump2__>:
   1c7ca:	ee 0f       	add	r30, r30
   1c7cc:	ff 1f       	adc	r31, r31
   1c7ce:	00 24       	eor	r0, r0
   1c7d0:	00 1c       	adc	r0, r0
   1c7d2:	0b be       	out	0x3b, r0	; 59
   1c7d4:	07 90       	elpm	r0, Z+
   1c7d6:	f6 91       	elpm	r31, Z
   1c7d8:	e0 2d       	mov	r30, r0
   1c7da:	09 94       	ijmp

0001c7dc <__mulhisi3>:
   1c7dc:	05 d0       	rcall	.+10     	; 0x1c7e8 <__umulhisi3>
   1c7de:	33 23       	and	r19, r19
   1c7e0:	12 f4       	brpl	.+4      	; 0x1c7e6 <__mulhisi3+0xa>
   1c7e2:	8a 1b       	sub	r24, r26
   1c7e4:	9b 0b       	sbc	r25, r27
   1c7e6:	10 c0       	rjmp	.+32     	; 0x1c808 <__usmulhisi3_tail>

0001c7e8 <__umulhisi3>:
   1c7e8:	a2 9f       	mul	r26, r18
   1c7ea:	b0 01       	movw	r22, r0
   1c7ec:	b3 9f       	mul	r27, r19
   1c7ee:	c0 01       	movw	r24, r0
   1c7f0:	a3 9f       	mul	r26, r19
   1c7f2:	70 0d       	add	r23, r0
   1c7f4:	81 1d       	adc	r24, r1
   1c7f6:	11 24       	eor	r1, r1
   1c7f8:	91 1d       	adc	r25, r1
   1c7fa:	b2 9f       	mul	r27, r18
   1c7fc:	70 0d       	add	r23, r0
   1c7fe:	81 1d       	adc	r24, r1
   1c800:	11 24       	eor	r1, r1
   1c802:	91 1d       	adc	r25, r1
   1c804:	08 95       	ret

0001c806 <__usmulhisi3>:
   1c806:	f0 df       	rcall	.-32     	; 0x1c7e8 <__umulhisi3>

0001c808 <__usmulhisi3_tail>:
   1c808:	b7 ff       	sbrs	r27, 7
   1c80a:	08 95       	ret
   1c80c:	82 1b       	sub	r24, r18
   1c80e:	93 0b       	sbc	r25, r19
   1c810:	08 95       	ret

0001c812 <__muluhisi3>:
   1c812:	ea df       	rcall	.-44     	; 0x1c7e8 <__umulhisi3>
   1c814:	a5 9f       	mul	r26, r21
   1c816:	90 0d       	add	r25, r0
   1c818:	b4 9f       	mul	r27, r20
   1c81a:	90 0d       	add	r25, r0
   1c81c:	a4 9f       	mul	r26, r20
   1c81e:	80 0d       	add	r24, r0
   1c820:	91 1d       	adc	r25, r1
   1c822:	11 24       	eor	r1, r1
   1c824:	08 95       	ret

0001c826 <__mulshisi3>:
   1c826:	b7 ff       	sbrs	r27, 7
   1c828:	f4 cf       	rjmp	.-24     	; 0x1c812 <__muluhisi3>

0001c82a <__mulohisi3>:
   1c82a:	f3 df       	rcall	.-26     	; 0x1c812 <__muluhisi3>
   1c82c:	82 1b       	sub	r24, r18
   1c82e:	93 0b       	sbc	r25, r19
   1c830:	08 95       	ret

0001c832 <__negdi2>:
   1c832:	60 95       	com	r22
   1c834:	70 95       	com	r23
   1c836:	80 95       	com	r24
   1c838:	90 95       	com	r25
   1c83a:	30 95       	com	r19
   1c83c:	40 95       	com	r20
   1c83e:	50 95       	com	r21
   1c840:	21 95       	neg	r18
   1c842:	3f 4f       	sbci	r19, 0xFF	; 255
   1c844:	4f 4f       	sbci	r20, 0xFF	; 255
   1c846:	5f 4f       	sbci	r21, 0xFF	; 255
   1c848:	6f 4f       	sbci	r22, 0xFF	; 255
   1c84a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c84c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c84e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c850:	08 95       	ret

0001c852 <__prologue_saves__>:
   1c852:	2f 92       	push	r2
   1c854:	3f 92       	push	r3
   1c856:	4f 92       	push	r4
   1c858:	5f 92       	push	r5
   1c85a:	6f 92       	push	r6
   1c85c:	7f 92       	push	r7
   1c85e:	8f 92       	push	r8
   1c860:	9f 92       	push	r9
   1c862:	af 92       	push	r10
   1c864:	bf 92       	push	r11
   1c866:	cf 92       	push	r12
   1c868:	df 92       	push	r13
   1c86a:	ef 92       	push	r14
   1c86c:	ff 92       	push	r15
   1c86e:	0f 93       	push	r16
   1c870:	1f 93       	push	r17
   1c872:	cf 93       	push	r28
   1c874:	df 93       	push	r29
   1c876:	cd b7       	in	r28, 0x3d	; 61
   1c878:	de b7       	in	r29, 0x3e	; 62
   1c87a:	ca 1b       	sub	r28, r26
   1c87c:	db 0b       	sbc	r29, r27
   1c87e:	0f b6       	in	r0, 0x3f	; 63
   1c880:	f8 94       	cli
   1c882:	de bf       	out	0x3e, r29	; 62
   1c884:	0f be       	out	0x3f, r0	; 63
   1c886:	cd bf       	out	0x3d, r28	; 61
   1c888:	09 94       	ijmp

0001c88a <__epilogue_restores__>:
   1c88a:	2a 88       	ldd	r2, Y+18	; 0x12
   1c88c:	39 88       	ldd	r3, Y+17	; 0x11
   1c88e:	48 88       	ldd	r4, Y+16	; 0x10
   1c890:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c892:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c894:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c896:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c898:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c89a:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c89c:	b9 84       	ldd	r11, Y+9	; 0x09
   1c89e:	c8 84       	ldd	r12, Y+8	; 0x08
   1c8a0:	df 80       	ldd	r13, Y+7	; 0x07
   1c8a2:	ee 80       	ldd	r14, Y+6	; 0x06
   1c8a4:	fd 80       	ldd	r15, Y+5	; 0x05
   1c8a6:	0c 81       	ldd	r16, Y+4	; 0x04
   1c8a8:	1b 81       	ldd	r17, Y+3	; 0x03
   1c8aa:	aa 81       	ldd	r26, Y+2	; 0x02
   1c8ac:	b9 81       	ldd	r27, Y+1	; 0x01
   1c8ae:	ce 0f       	add	r28, r30
   1c8b0:	d1 1d       	adc	r29, r1
   1c8b2:	0f b6       	in	r0, 0x3f	; 63
   1c8b4:	f8 94       	cli
   1c8b6:	de bf       	out	0x3e, r29	; 62
   1c8b8:	0f be       	out	0x3f, r0	; 63
   1c8ba:	cd bf       	out	0x3d, r28	; 61
   1c8bc:	ed 01       	movw	r28, r26
   1c8be:	08 95       	ret

0001c8c0 <__xload_1>:
   1c8c0:	57 fd       	sbrc	r21, 7
   1c8c2:	03 c0       	rjmp	.+6      	; 0x1c8ca <__xload_1+0xa>
   1c8c4:	5b bf       	out	0x3b, r21	; 59
   1c8c6:	67 91       	elpm	r22, Z+
   1c8c8:	08 95       	ret
   1c8ca:	60 81       	ld	r22, Z
   1c8cc:	08 95       	ret

0001c8ce <__cmpdi2_s8>:
   1c8ce:	00 24       	eor	r0, r0
   1c8d0:	a7 fd       	sbrc	r26, 7
   1c8d2:	00 94       	com	r0
   1c8d4:	2a 17       	cp	r18, r26
   1c8d6:	30 05       	cpc	r19, r0
   1c8d8:	40 05       	cpc	r20, r0
   1c8da:	50 05       	cpc	r21, r0
   1c8dc:	60 05       	cpc	r22, r0
   1c8de:	70 05       	cpc	r23, r0
   1c8e0:	80 05       	cpc	r24, r0
   1c8e2:	90 05       	cpc	r25, r0
   1c8e4:	08 95       	ret

0001c8e6 <__subsf3>:
   1c8e6:	50 58       	subi	r21, 0x80	; 128

0001c8e8 <__addsf3>:
   1c8e8:	bb 27       	eor	r27, r27
   1c8ea:	aa 27       	eor	r26, r26
   1c8ec:	0e d0       	rcall	.+28     	; 0x1c90a <__addsf3x>
   1c8ee:	75 c1       	rjmp	.+746    	; 0x1cbda <__fp_round>
   1c8f0:	66 d1       	rcall	.+716    	; 0x1cbbe <__fp_pscA>
   1c8f2:	30 f0       	brcs	.+12     	; 0x1c900 <__addsf3+0x18>
   1c8f4:	6b d1       	rcall	.+726    	; 0x1cbcc <__fp_pscB>
   1c8f6:	20 f0       	brcs	.+8      	; 0x1c900 <__addsf3+0x18>
   1c8f8:	31 f4       	brne	.+12     	; 0x1c906 <__addsf3+0x1e>
   1c8fa:	9f 3f       	cpi	r25, 0xFF	; 255
   1c8fc:	11 f4       	brne	.+4      	; 0x1c902 <__addsf3+0x1a>
   1c8fe:	1e f4       	brtc	.+6      	; 0x1c906 <__addsf3+0x1e>
   1c900:	5b c1       	rjmp	.+694    	; 0x1cbb8 <__fp_nan>
   1c902:	0e f4       	brtc	.+2      	; 0x1c906 <__addsf3+0x1e>
   1c904:	e0 95       	com	r30
   1c906:	e7 fb       	bst	r30, 7
   1c908:	51 c1       	rjmp	.+674    	; 0x1cbac <__fp_inf>

0001c90a <__addsf3x>:
   1c90a:	e9 2f       	mov	r30, r25
   1c90c:	77 d1       	rcall	.+750    	; 0x1cbfc <__fp_split3>
   1c90e:	80 f3       	brcs	.-32     	; 0x1c8f0 <__addsf3+0x8>
   1c910:	ba 17       	cp	r27, r26
   1c912:	62 07       	cpc	r22, r18
   1c914:	73 07       	cpc	r23, r19
   1c916:	84 07       	cpc	r24, r20
   1c918:	95 07       	cpc	r25, r21
   1c91a:	18 f0       	brcs	.+6      	; 0x1c922 <__addsf3x+0x18>
   1c91c:	71 f4       	brne	.+28     	; 0x1c93a <__addsf3x+0x30>
   1c91e:	9e f5       	brtc	.+102    	; 0x1c986 <__addsf3x+0x7c>
   1c920:	8f c1       	rjmp	.+798    	; 0x1cc40 <__fp_zero>
   1c922:	0e f4       	brtc	.+2      	; 0x1c926 <__addsf3x+0x1c>
   1c924:	e0 95       	com	r30
   1c926:	0b 2e       	mov	r0, r27
   1c928:	ba 2f       	mov	r27, r26
   1c92a:	a0 2d       	mov	r26, r0
   1c92c:	0b 01       	movw	r0, r22
   1c92e:	b9 01       	movw	r22, r18
   1c930:	90 01       	movw	r18, r0
   1c932:	0c 01       	movw	r0, r24
   1c934:	ca 01       	movw	r24, r20
   1c936:	a0 01       	movw	r20, r0
   1c938:	11 24       	eor	r1, r1
   1c93a:	ff 27       	eor	r31, r31
   1c93c:	59 1b       	sub	r21, r25
   1c93e:	99 f0       	breq	.+38     	; 0x1c966 <__addsf3x+0x5c>
   1c940:	59 3f       	cpi	r21, 0xF9	; 249
   1c942:	50 f4       	brcc	.+20     	; 0x1c958 <__addsf3x+0x4e>
   1c944:	50 3e       	cpi	r21, 0xE0	; 224
   1c946:	68 f1       	brcs	.+90     	; 0x1c9a2 <__addsf3x+0x98>
   1c948:	1a 16       	cp	r1, r26
   1c94a:	f0 40       	sbci	r31, 0x00	; 0
   1c94c:	a2 2f       	mov	r26, r18
   1c94e:	23 2f       	mov	r18, r19
   1c950:	34 2f       	mov	r19, r20
   1c952:	44 27       	eor	r20, r20
   1c954:	58 5f       	subi	r21, 0xF8	; 248
   1c956:	f3 cf       	rjmp	.-26     	; 0x1c93e <__addsf3x+0x34>
   1c958:	46 95       	lsr	r20
   1c95a:	37 95       	ror	r19
   1c95c:	27 95       	ror	r18
   1c95e:	a7 95       	ror	r26
   1c960:	f0 40       	sbci	r31, 0x00	; 0
   1c962:	53 95       	inc	r21
   1c964:	c9 f7       	brne	.-14     	; 0x1c958 <__addsf3x+0x4e>
   1c966:	7e f4       	brtc	.+30     	; 0x1c986 <__addsf3x+0x7c>
   1c968:	1f 16       	cp	r1, r31
   1c96a:	ba 0b       	sbc	r27, r26
   1c96c:	62 0b       	sbc	r22, r18
   1c96e:	73 0b       	sbc	r23, r19
   1c970:	84 0b       	sbc	r24, r20
   1c972:	ba f0       	brmi	.+46     	; 0x1c9a2 <__addsf3x+0x98>
   1c974:	91 50       	subi	r25, 0x01	; 1
   1c976:	a1 f0       	breq	.+40     	; 0x1c9a0 <__addsf3x+0x96>
   1c978:	ff 0f       	add	r31, r31
   1c97a:	bb 1f       	adc	r27, r27
   1c97c:	66 1f       	adc	r22, r22
   1c97e:	77 1f       	adc	r23, r23
   1c980:	88 1f       	adc	r24, r24
   1c982:	c2 f7       	brpl	.-16     	; 0x1c974 <__addsf3x+0x6a>
   1c984:	0e c0       	rjmp	.+28     	; 0x1c9a2 <__addsf3x+0x98>
   1c986:	ba 0f       	add	r27, r26
   1c988:	62 1f       	adc	r22, r18
   1c98a:	73 1f       	adc	r23, r19
   1c98c:	84 1f       	adc	r24, r20
   1c98e:	48 f4       	brcc	.+18     	; 0x1c9a2 <__addsf3x+0x98>
   1c990:	87 95       	ror	r24
   1c992:	77 95       	ror	r23
   1c994:	67 95       	ror	r22
   1c996:	b7 95       	ror	r27
   1c998:	f7 95       	ror	r31
   1c99a:	9e 3f       	cpi	r25, 0xFE	; 254
   1c99c:	08 f0       	brcs	.+2      	; 0x1c9a0 <__addsf3x+0x96>
   1c99e:	b3 cf       	rjmp	.-154    	; 0x1c906 <__addsf3+0x1e>
   1c9a0:	93 95       	inc	r25
   1c9a2:	88 0f       	add	r24, r24
   1c9a4:	08 f0       	brcs	.+2      	; 0x1c9a8 <__addsf3x+0x9e>
   1c9a6:	99 27       	eor	r25, r25
   1c9a8:	ee 0f       	add	r30, r30
   1c9aa:	97 95       	ror	r25
   1c9ac:	87 95       	ror	r24
   1c9ae:	08 95       	ret

0001c9b0 <__cmpsf2>:
   1c9b0:	d9 d0       	rcall	.+434    	; 0x1cb64 <__fp_cmp>
   1c9b2:	08 f4       	brcc	.+2      	; 0x1c9b6 <__cmpsf2+0x6>
   1c9b4:	81 e0       	ldi	r24, 0x01	; 1
   1c9b6:	08 95       	ret

0001c9b8 <__divsf3>:
   1c9b8:	0c d0       	rcall	.+24     	; 0x1c9d2 <__divsf3x>
   1c9ba:	0f c1       	rjmp	.+542    	; 0x1cbda <__fp_round>
   1c9bc:	07 d1       	rcall	.+526    	; 0x1cbcc <__fp_pscB>
   1c9be:	40 f0       	brcs	.+16     	; 0x1c9d0 <__divsf3+0x18>
   1c9c0:	fe d0       	rcall	.+508    	; 0x1cbbe <__fp_pscA>
   1c9c2:	30 f0       	brcs	.+12     	; 0x1c9d0 <__divsf3+0x18>
   1c9c4:	21 f4       	brne	.+8      	; 0x1c9ce <__divsf3+0x16>
   1c9c6:	5f 3f       	cpi	r21, 0xFF	; 255
   1c9c8:	19 f0       	breq	.+6      	; 0x1c9d0 <__divsf3+0x18>
   1c9ca:	f0 c0       	rjmp	.+480    	; 0x1cbac <__fp_inf>
   1c9cc:	51 11       	cpse	r21, r1
   1c9ce:	39 c1       	rjmp	.+626    	; 0x1cc42 <__fp_szero>
   1c9d0:	f3 c0       	rjmp	.+486    	; 0x1cbb8 <__fp_nan>

0001c9d2 <__divsf3x>:
   1c9d2:	14 d1       	rcall	.+552    	; 0x1cbfc <__fp_split3>
   1c9d4:	98 f3       	brcs	.-26     	; 0x1c9bc <__divsf3+0x4>

0001c9d6 <__divsf3_pse>:
   1c9d6:	99 23       	and	r25, r25
   1c9d8:	c9 f3       	breq	.-14     	; 0x1c9cc <__divsf3+0x14>
   1c9da:	55 23       	and	r21, r21
   1c9dc:	b1 f3       	breq	.-20     	; 0x1c9ca <__divsf3+0x12>
   1c9de:	95 1b       	sub	r25, r21
   1c9e0:	55 0b       	sbc	r21, r21
   1c9e2:	bb 27       	eor	r27, r27
   1c9e4:	aa 27       	eor	r26, r26
   1c9e6:	62 17       	cp	r22, r18
   1c9e8:	73 07       	cpc	r23, r19
   1c9ea:	84 07       	cpc	r24, r20
   1c9ec:	38 f0       	brcs	.+14     	; 0x1c9fc <__divsf3_pse+0x26>
   1c9ee:	9f 5f       	subi	r25, 0xFF	; 255
   1c9f0:	5f 4f       	sbci	r21, 0xFF	; 255
   1c9f2:	22 0f       	add	r18, r18
   1c9f4:	33 1f       	adc	r19, r19
   1c9f6:	44 1f       	adc	r20, r20
   1c9f8:	aa 1f       	adc	r26, r26
   1c9fa:	a9 f3       	breq	.-22     	; 0x1c9e6 <__divsf3_pse+0x10>
   1c9fc:	33 d0       	rcall	.+102    	; 0x1ca64 <__divsf3_pse+0x8e>
   1c9fe:	0e 2e       	mov	r0, r30
   1ca00:	3a f0       	brmi	.+14     	; 0x1ca10 <__divsf3_pse+0x3a>
   1ca02:	e0 e8       	ldi	r30, 0x80	; 128
   1ca04:	30 d0       	rcall	.+96     	; 0x1ca66 <__divsf3_pse+0x90>
   1ca06:	91 50       	subi	r25, 0x01	; 1
   1ca08:	50 40       	sbci	r21, 0x00	; 0
   1ca0a:	e6 95       	lsr	r30
   1ca0c:	00 1c       	adc	r0, r0
   1ca0e:	ca f7       	brpl	.-14     	; 0x1ca02 <__divsf3_pse+0x2c>
   1ca10:	29 d0       	rcall	.+82     	; 0x1ca64 <__divsf3_pse+0x8e>
   1ca12:	fe 2f       	mov	r31, r30
   1ca14:	27 d0       	rcall	.+78     	; 0x1ca64 <__divsf3_pse+0x8e>
   1ca16:	66 0f       	add	r22, r22
   1ca18:	77 1f       	adc	r23, r23
   1ca1a:	88 1f       	adc	r24, r24
   1ca1c:	bb 1f       	adc	r27, r27
   1ca1e:	26 17       	cp	r18, r22
   1ca20:	37 07       	cpc	r19, r23
   1ca22:	48 07       	cpc	r20, r24
   1ca24:	ab 07       	cpc	r26, r27
   1ca26:	b0 e8       	ldi	r27, 0x80	; 128
   1ca28:	09 f0       	breq	.+2      	; 0x1ca2c <__divsf3_pse+0x56>
   1ca2a:	bb 0b       	sbc	r27, r27
   1ca2c:	80 2d       	mov	r24, r0
   1ca2e:	bf 01       	movw	r22, r30
   1ca30:	ff 27       	eor	r31, r31
   1ca32:	93 58       	subi	r25, 0x83	; 131
   1ca34:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca36:	2a f0       	brmi	.+10     	; 0x1ca42 <__divsf3_pse+0x6c>
   1ca38:	9e 3f       	cpi	r25, 0xFE	; 254
   1ca3a:	51 05       	cpc	r21, r1
   1ca3c:	68 f0       	brcs	.+26     	; 0x1ca58 <__divsf3_pse+0x82>
   1ca3e:	b6 c0       	rjmp	.+364    	; 0x1cbac <__fp_inf>
   1ca40:	00 c1       	rjmp	.+512    	; 0x1cc42 <__fp_szero>
   1ca42:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca44:	ec f3       	brlt	.-6      	; 0x1ca40 <__divsf3_pse+0x6a>
   1ca46:	98 3e       	cpi	r25, 0xE8	; 232
   1ca48:	dc f3       	brlt	.-10     	; 0x1ca40 <__divsf3_pse+0x6a>
   1ca4a:	86 95       	lsr	r24
   1ca4c:	77 95       	ror	r23
   1ca4e:	67 95       	ror	r22
   1ca50:	b7 95       	ror	r27
   1ca52:	f7 95       	ror	r31
   1ca54:	9f 5f       	subi	r25, 0xFF	; 255
   1ca56:	c9 f7       	brne	.-14     	; 0x1ca4a <__divsf3_pse+0x74>
   1ca58:	88 0f       	add	r24, r24
   1ca5a:	91 1d       	adc	r25, r1
   1ca5c:	96 95       	lsr	r25
   1ca5e:	87 95       	ror	r24
   1ca60:	97 f9       	bld	r25, 7
   1ca62:	08 95       	ret
   1ca64:	e1 e0       	ldi	r30, 0x01	; 1
   1ca66:	66 0f       	add	r22, r22
   1ca68:	77 1f       	adc	r23, r23
   1ca6a:	88 1f       	adc	r24, r24
   1ca6c:	bb 1f       	adc	r27, r27
   1ca6e:	62 17       	cp	r22, r18
   1ca70:	73 07       	cpc	r23, r19
   1ca72:	84 07       	cpc	r24, r20
   1ca74:	ba 07       	cpc	r27, r26
   1ca76:	20 f0       	brcs	.+8      	; 0x1ca80 <__divsf3_pse+0xaa>
   1ca78:	62 1b       	sub	r22, r18
   1ca7a:	73 0b       	sbc	r23, r19
   1ca7c:	84 0b       	sbc	r24, r20
   1ca7e:	ba 0b       	sbc	r27, r26
   1ca80:	ee 1f       	adc	r30, r30
   1ca82:	88 f7       	brcc	.-30     	; 0x1ca66 <__divsf3_pse+0x90>
   1ca84:	e0 95       	com	r30
   1ca86:	08 95       	ret

0001ca88 <__fixsfsi>:
   1ca88:	04 d0       	rcall	.+8      	; 0x1ca92 <__fixunssfsi>
   1ca8a:	68 94       	set
   1ca8c:	b1 11       	cpse	r27, r1
   1ca8e:	d9 c0       	rjmp	.+434    	; 0x1cc42 <__fp_szero>
   1ca90:	08 95       	ret

0001ca92 <__fixunssfsi>:
   1ca92:	bc d0       	rcall	.+376    	; 0x1cc0c <__fp_splitA>
   1ca94:	88 f0       	brcs	.+34     	; 0x1cab8 <__fixunssfsi+0x26>
   1ca96:	9f 57       	subi	r25, 0x7F	; 127
   1ca98:	90 f0       	brcs	.+36     	; 0x1cabe <__fixunssfsi+0x2c>
   1ca9a:	b9 2f       	mov	r27, r25
   1ca9c:	99 27       	eor	r25, r25
   1ca9e:	b7 51       	subi	r27, 0x17	; 23
   1caa0:	a0 f0       	brcs	.+40     	; 0x1caca <__fixunssfsi+0x38>
   1caa2:	d1 f0       	breq	.+52     	; 0x1cad8 <__fixunssfsi+0x46>
   1caa4:	66 0f       	add	r22, r22
   1caa6:	77 1f       	adc	r23, r23
   1caa8:	88 1f       	adc	r24, r24
   1caaa:	99 1f       	adc	r25, r25
   1caac:	1a f0       	brmi	.+6      	; 0x1cab4 <__fixunssfsi+0x22>
   1caae:	ba 95       	dec	r27
   1cab0:	c9 f7       	brne	.-14     	; 0x1caa4 <__fixunssfsi+0x12>
   1cab2:	12 c0       	rjmp	.+36     	; 0x1cad8 <__fixunssfsi+0x46>
   1cab4:	b1 30       	cpi	r27, 0x01	; 1
   1cab6:	81 f0       	breq	.+32     	; 0x1cad8 <__fixunssfsi+0x46>
   1cab8:	c3 d0       	rcall	.+390    	; 0x1cc40 <__fp_zero>
   1caba:	b1 e0       	ldi	r27, 0x01	; 1
   1cabc:	08 95       	ret
   1cabe:	c0 c0       	rjmp	.+384    	; 0x1cc40 <__fp_zero>
   1cac0:	67 2f       	mov	r22, r23
   1cac2:	78 2f       	mov	r23, r24
   1cac4:	88 27       	eor	r24, r24
   1cac6:	b8 5f       	subi	r27, 0xF8	; 248
   1cac8:	39 f0       	breq	.+14     	; 0x1cad8 <__fixunssfsi+0x46>
   1caca:	b9 3f       	cpi	r27, 0xF9	; 249
   1cacc:	cc f3       	brlt	.-14     	; 0x1cac0 <__fixunssfsi+0x2e>
   1cace:	86 95       	lsr	r24
   1cad0:	77 95       	ror	r23
   1cad2:	67 95       	ror	r22
   1cad4:	b3 95       	inc	r27
   1cad6:	d9 f7       	brne	.-10     	; 0x1cace <__fixunssfsi+0x3c>
   1cad8:	3e f4       	brtc	.+14     	; 0x1cae8 <__fixunssfsi+0x56>
   1cada:	90 95       	com	r25
   1cadc:	80 95       	com	r24
   1cade:	70 95       	com	r23
   1cae0:	61 95       	neg	r22
   1cae2:	7f 4f       	sbci	r23, 0xFF	; 255
   1cae4:	8f 4f       	sbci	r24, 0xFF	; 255
   1cae6:	9f 4f       	sbci	r25, 0xFF	; 255
   1cae8:	08 95       	ret

0001caea <__floatunsisf>:
   1caea:	e8 94       	clt
   1caec:	09 c0       	rjmp	.+18     	; 0x1cb00 <__floatsisf+0x12>

0001caee <__floatsisf>:
   1caee:	97 fb       	bst	r25, 7
   1caf0:	3e f4       	brtc	.+14     	; 0x1cb00 <__floatsisf+0x12>
   1caf2:	90 95       	com	r25
   1caf4:	80 95       	com	r24
   1caf6:	70 95       	com	r23
   1caf8:	61 95       	neg	r22
   1cafa:	7f 4f       	sbci	r23, 0xFF	; 255
   1cafc:	8f 4f       	sbci	r24, 0xFF	; 255
   1cafe:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb00:	99 23       	and	r25, r25
   1cb02:	a9 f0       	breq	.+42     	; 0x1cb2e <__floatsisf+0x40>
   1cb04:	f9 2f       	mov	r31, r25
   1cb06:	96 e9       	ldi	r25, 0x96	; 150
   1cb08:	bb 27       	eor	r27, r27
   1cb0a:	93 95       	inc	r25
   1cb0c:	f6 95       	lsr	r31
   1cb0e:	87 95       	ror	r24
   1cb10:	77 95       	ror	r23
   1cb12:	67 95       	ror	r22
   1cb14:	b7 95       	ror	r27
   1cb16:	f1 11       	cpse	r31, r1
   1cb18:	f8 cf       	rjmp	.-16     	; 0x1cb0a <__floatsisf+0x1c>
   1cb1a:	fa f4       	brpl	.+62     	; 0x1cb5a <__floatsisf+0x6c>
   1cb1c:	bb 0f       	add	r27, r27
   1cb1e:	11 f4       	brne	.+4      	; 0x1cb24 <__floatsisf+0x36>
   1cb20:	60 ff       	sbrs	r22, 0
   1cb22:	1b c0       	rjmp	.+54     	; 0x1cb5a <__floatsisf+0x6c>
   1cb24:	6f 5f       	subi	r22, 0xFF	; 255
   1cb26:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb28:	8f 4f       	sbci	r24, 0xFF	; 255
   1cb2a:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb2c:	16 c0       	rjmp	.+44     	; 0x1cb5a <__floatsisf+0x6c>
   1cb2e:	88 23       	and	r24, r24
   1cb30:	11 f0       	breq	.+4      	; 0x1cb36 <__floatsisf+0x48>
   1cb32:	96 e9       	ldi	r25, 0x96	; 150
   1cb34:	11 c0       	rjmp	.+34     	; 0x1cb58 <__floatsisf+0x6a>
   1cb36:	77 23       	and	r23, r23
   1cb38:	21 f0       	breq	.+8      	; 0x1cb42 <__floatsisf+0x54>
   1cb3a:	9e e8       	ldi	r25, 0x8E	; 142
   1cb3c:	87 2f       	mov	r24, r23
   1cb3e:	76 2f       	mov	r23, r22
   1cb40:	05 c0       	rjmp	.+10     	; 0x1cb4c <__floatsisf+0x5e>
   1cb42:	66 23       	and	r22, r22
   1cb44:	71 f0       	breq	.+28     	; 0x1cb62 <__floatsisf+0x74>
   1cb46:	96 e8       	ldi	r25, 0x86	; 134
   1cb48:	86 2f       	mov	r24, r22
   1cb4a:	70 e0       	ldi	r23, 0x00	; 0
   1cb4c:	60 e0       	ldi	r22, 0x00	; 0
   1cb4e:	2a f0       	brmi	.+10     	; 0x1cb5a <__floatsisf+0x6c>
   1cb50:	9a 95       	dec	r25
   1cb52:	66 0f       	add	r22, r22
   1cb54:	77 1f       	adc	r23, r23
   1cb56:	88 1f       	adc	r24, r24
   1cb58:	da f7       	brpl	.-10     	; 0x1cb50 <__floatsisf+0x62>
   1cb5a:	88 0f       	add	r24, r24
   1cb5c:	96 95       	lsr	r25
   1cb5e:	87 95       	ror	r24
   1cb60:	97 f9       	bld	r25, 7
   1cb62:	08 95       	ret

0001cb64 <__fp_cmp>:
   1cb64:	99 0f       	add	r25, r25
   1cb66:	00 08       	sbc	r0, r0
   1cb68:	55 0f       	add	r21, r21
   1cb6a:	aa 0b       	sbc	r26, r26
   1cb6c:	e0 e8       	ldi	r30, 0x80	; 128
   1cb6e:	fe ef       	ldi	r31, 0xFE	; 254
   1cb70:	16 16       	cp	r1, r22
   1cb72:	17 06       	cpc	r1, r23
   1cb74:	e8 07       	cpc	r30, r24
   1cb76:	f9 07       	cpc	r31, r25
   1cb78:	c0 f0       	brcs	.+48     	; 0x1cbaa <__fp_cmp+0x46>
   1cb7a:	12 16       	cp	r1, r18
   1cb7c:	13 06       	cpc	r1, r19
   1cb7e:	e4 07       	cpc	r30, r20
   1cb80:	f5 07       	cpc	r31, r21
   1cb82:	98 f0       	brcs	.+38     	; 0x1cbaa <__fp_cmp+0x46>
   1cb84:	62 1b       	sub	r22, r18
   1cb86:	73 0b       	sbc	r23, r19
   1cb88:	84 0b       	sbc	r24, r20
   1cb8a:	95 0b       	sbc	r25, r21
   1cb8c:	39 f4       	brne	.+14     	; 0x1cb9c <__fp_cmp+0x38>
   1cb8e:	0a 26       	eor	r0, r26
   1cb90:	61 f0       	breq	.+24     	; 0x1cbaa <__fp_cmp+0x46>
   1cb92:	23 2b       	or	r18, r19
   1cb94:	24 2b       	or	r18, r20
   1cb96:	25 2b       	or	r18, r21
   1cb98:	21 f4       	brne	.+8      	; 0x1cba2 <__fp_cmp+0x3e>
   1cb9a:	08 95       	ret
   1cb9c:	0a 26       	eor	r0, r26
   1cb9e:	09 f4       	brne	.+2      	; 0x1cba2 <__fp_cmp+0x3e>
   1cba0:	a1 40       	sbci	r26, 0x01	; 1
   1cba2:	a6 95       	lsr	r26
   1cba4:	8f ef       	ldi	r24, 0xFF	; 255
   1cba6:	81 1d       	adc	r24, r1
   1cba8:	81 1d       	adc	r24, r1
   1cbaa:	08 95       	ret

0001cbac <__fp_inf>:
   1cbac:	97 f9       	bld	r25, 7
   1cbae:	9f 67       	ori	r25, 0x7F	; 127
   1cbb0:	80 e8       	ldi	r24, 0x80	; 128
   1cbb2:	70 e0       	ldi	r23, 0x00	; 0
   1cbb4:	60 e0       	ldi	r22, 0x00	; 0
   1cbb6:	08 95       	ret

0001cbb8 <__fp_nan>:
   1cbb8:	9f ef       	ldi	r25, 0xFF	; 255
   1cbba:	80 ec       	ldi	r24, 0xC0	; 192
   1cbbc:	08 95       	ret

0001cbbe <__fp_pscA>:
   1cbbe:	00 24       	eor	r0, r0
   1cbc0:	0a 94       	dec	r0
   1cbc2:	16 16       	cp	r1, r22
   1cbc4:	17 06       	cpc	r1, r23
   1cbc6:	18 06       	cpc	r1, r24
   1cbc8:	09 06       	cpc	r0, r25
   1cbca:	08 95       	ret

0001cbcc <__fp_pscB>:
   1cbcc:	00 24       	eor	r0, r0
   1cbce:	0a 94       	dec	r0
   1cbd0:	12 16       	cp	r1, r18
   1cbd2:	13 06       	cpc	r1, r19
   1cbd4:	14 06       	cpc	r1, r20
   1cbd6:	05 06       	cpc	r0, r21
   1cbd8:	08 95       	ret

0001cbda <__fp_round>:
   1cbda:	09 2e       	mov	r0, r25
   1cbdc:	03 94       	inc	r0
   1cbde:	00 0c       	add	r0, r0
   1cbe0:	11 f4       	brne	.+4      	; 0x1cbe6 <__fp_round+0xc>
   1cbe2:	88 23       	and	r24, r24
   1cbe4:	52 f0       	brmi	.+20     	; 0x1cbfa <__fp_round+0x20>
   1cbe6:	bb 0f       	add	r27, r27
   1cbe8:	40 f4       	brcc	.+16     	; 0x1cbfa <__fp_round+0x20>
   1cbea:	bf 2b       	or	r27, r31
   1cbec:	11 f4       	brne	.+4      	; 0x1cbf2 <__fp_round+0x18>
   1cbee:	60 ff       	sbrs	r22, 0
   1cbf0:	04 c0       	rjmp	.+8      	; 0x1cbfa <__fp_round+0x20>
   1cbf2:	6f 5f       	subi	r22, 0xFF	; 255
   1cbf4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbf6:	8f 4f       	sbci	r24, 0xFF	; 255
   1cbf8:	9f 4f       	sbci	r25, 0xFF	; 255
   1cbfa:	08 95       	ret

0001cbfc <__fp_split3>:
   1cbfc:	57 fd       	sbrc	r21, 7
   1cbfe:	90 58       	subi	r25, 0x80	; 128
   1cc00:	44 0f       	add	r20, r20
   1cc02:	55 1f       	adc	r21, r21
   1cc04:	59 f0       	breq	.+22     	; 0x1cc1c <__fp_splitA+0x10>
   1cc06:	5f 3f       	cpi	r21, 0xFF	; 255
   1cc08:	71 f0       	breq	.+28     	; 0x1cc26 <__fp_splitA+0x1a>
   1cc0a:	47 95       	ror	r20

0001cc0c <__fp_splitA>:
   1cc0c:	88 0f       	add	r24, r24
   1cc0e:	97 fb       	bst	r25, 7
   1cc10:	99 1f       	adc	r25, r25
   1cc12:	61 f0       	breq	.+24     	; 0x1cc2c <__fp_splitA+0x20>
   1cc14:	9f 3f       	cpi	r25, 0xFF	; 255
   1cc16:	79 f0       	breq	.+30     	; 0x1cc36 <__fp_splitA+0x2a>
   1cc18:	87 95       	ror	r24
   1cc1a:	08 95       	ret
   1cc1c:	12 16       	cp	r1, r18
   1cc1e:	13 06       	cpc	r1, r19
   1cc20:	14 06       	cpc	r1, r20
   1cc22:	55 1f       	adc	r21, r21
   1cc24:	f2 cf       	rjmp	.-28     	; 0x1cc0a <__fp_split3+0xe>
   1cc26:	46 95       	lsr	r20
   1cc28:	f1 df       	rcall	.-30     	; 0x1cc0c <__fp_splitA>
   1cc2a:	08 c0       	rjmp	.+16     	; 0x1cc3c <__fp_splitA+0x30>
   1cc2c:	16 16       	cp	r1, r22
   1cc2e:	17 06       	cpc	r1, r23
   1cc30:	18 06       	cpc	r1, r24
   1cc32:	99 1f       	adc	r25, r25
   1cc34:	f1 cf       	rjmp	.-30     	; 0x1cc18 <__fp_splitA+0xc>
   1cc36:	86 95       	lsr	r24
   1cc38:	71 05       	cpc	r23, r1
   1cc3a:	61 05       	cpc	r22, r1
   1cc3c:	08 94       	sec
   1cc3e:	08 95       	ret

0001cc40 <__fp_zero>:
   1cc40:	e8 94       	clt

0001cc42 <__fp_szero>:
   1cc42:	bb 27       	eor	r27, r27
   1cc44:	66 27       	eor	r22, r22
   1cc46:	77 27       	eor	r23, r23
   1cc48:	cb 01       	movw	r24, r22
   1cc4a:	97 f9       	bld	r25, 7
   1cc4c:	08 95       	ret

0001cc4e <__gesf2>:
   1cc4e:	8a df       	rcall	.-236    	; 0x1cb64 <__fp_cmp>
   1cc50:	08 f4       	brcc	.+2      	; 0x1cc54 <__gesf2+0x6>
   1cc52:	8f ef       	ldi	r24, 0xFF	; 255
   1cc54:	08 95       	ret

0001cc56 <__mulsf3>:
   1cc56:	0b d0       	rcall	.+22     	; 0x1cc6e <__mulsf3x>
   1cc58:	c0 cf       	rjmp	.-128    	; 0x1cbda <__fp_round>
   1cc5a:	b1 df       	rcall	.-158    	; 0x1cbbe <__fp_pscA>
   1cc5c:	28 f0       	brcs	.+10     	; 0x1cc68 <__mulsf3+0x12>
   1cc5e:	b6 df       	rcall	.-148    	; 0x1cbcc <__fp_pscB>
   1cc60:	18 f0       	brcs	.+6      	; 0x1cc68 <__mulsf3+0x12>
   1cc62:	95 23       	and	r25, r21
   1cc64:	09 f0       	breq	.+2      	; 0x1cc68 <__mulsf3+0x12>
   1cc66:	a2 cf       	rjmp	.-188    	; 0x1cbac <__fp_inf>
   1cc68:	a7 cf       	rjmp	.-178    	; 0x1cbb8 <__fp_nan>
   1cc6a:	11 24       	eor	r1, r1
   1cc6c:	ea cf       	rjmp	.-44     	; 0x1cc42 <__fp_szero>

0001cc6e <__mulsf3x>:
   1cc6e:	c6 df       	rcall	.-116    	; 0x1cbfc <__fp_split3>
   1cc70:	a0 f3       	brcs	.-24     	; 0x1cc5a <__mulsf3+0x4>

0001cc72 <__mulsf3_pse>:
   1cc72:	95 9f       	mul	r25, r21
   1cc74:	d1 f3       	breq	.-12     	; 0x1cc6a <__mulsf3+0x14>
   1cc76:	95 0f       	add	r25, r21
   1cc78:	50 e0       	ldi	r21, 0x00	; 0
   1cc7a:	55 1f       	adc	r21, r21
   1cc7c:	62 9f       	mul	r22, r18
   1cc7e:	f0 01       	movw	r30, r0
   1cc80:	72 9f       	mul	r23, r18
   1cc82:	bb 27       	eor	r27, r27
   1cc84:	f0 0d       	add	r31, r0
   1cc86:	b1 1d       	adc	r27, r1
   1cc88:	63 9f       	mul	r22, r19
   1cc8a:	aa 27       	eor	r26, r26
   1cc8c:	f0 0d       	add	r31, r0
   1cc8e:	b1 1d       	adc	r27, r1
   1cc90:	aa 1f       	adc	r26, r26
   1cc92:	64 9f       	mul	r22, r20
   1cc94:	66 27       	eor	r22, r22
   1cc96:	b0 0d       	add	r27, r0
   1cc98:	a1 1d       	adc	r26, r1
   1cc9a:	66 1f       	adc	r22, r22
   1cc9c:	82 9f       	mul	r24, r18
   1cc9e:	22 27       	eor	r18, r18
   1cca0:	b0 0d       	add	r27, r0
   1cca2:	a1 1d       	adc	r26, r1
   1cca4:	62 1f       	adc	r22, r18
   1cca6:	73 9f       	mul	r23, r19
   1cca8:	b0 0d       	add	r27, r0
   1ccaa:	a1 1d       	adc	r26, r1
   1ccac:	62 1f       	adc	r22, r18
   1ccae:	83 9f       	mul	r24, r19
   1ccb0:	a0 0d       	add	r26, r0
   1ccb2:	61 1d       	adc	r22, r1
   1ccb4:	22 1f       	adc	r18, r18
   1ccb6:	74 9f       	mul	r23, r20
   1ccb8:	33 27       	eor	r19, r19
   1ccba:	a0 0d       	add	r26, r0
   1ccbc:	61 1d       	adc	r22, r1
   1ccbe:	23 1f       	adc	r18, r19
   1ccc0:	84 9f       	mul	r24, r20
   1ccc2:	60 0d       	add	r22, r0
   1ccc4:	21 1d       	adc	r18, r1
   1ccc6:	82 2f       	mov	r24, r18
   1ccc8:	76 2f       	mov	r23, r22
   1ccca:	6a 2f       	mov	r22, r26
   1cccc:	11 24       	eor	r1, r1
   1ccce:	9f 57       	subi	r25, 0x7F	; 127
   1ccd0:	50 40       	sbci	r21, 0x00	; 0
   1ccd2:	8a f0       	brmi	.+34     	; 0x1ccf6 <__mulsf3_pse+0x84>
   1ccd4:	e1 f0       	breq	.+56     	; 0x1cd0e <__mulsf3_pse+0x9c>
   1ccd6:	88 23       	and	r24, r24
   1ccd8:	4a f0       	brmi	.+18     	; 0x1ccec <__mulsf3_pse+0x7a>
   1ccda:	ee 0f       	add	r30, r30
   1ccdc:	ff 1f       	adc	r31, r31
   1ccde:	bb 1f       	adc	r27, r27
   1cce0:	66 1f       	adc	r22, r22
   1cce2:	77 1f       	adc	r23, r23
   1cce4:	88 1f       	adc	r24, r24
   1cce6:	91 50       	subi	r25, 0x01	; 1
   1cce8:	50 40       	sbci	r21, 0x00	; 0
   1ccea:	a9 f7       	brne	.-22     	; 0x1ccd6 <__mulsf3_pse+0x64>
   1ccec:	9e 3f       	cpi	r25, 0xFE	; 254
   1ccee:	51 05       	cpc	r21, r1
   1ccf0:	70 f0       	brcs	.+28     	; 0x1cd0e <__mulsf3_pse+0x9c>
   1ccf2:	5c cf       	rjmp	.-328    	; 0x1cbac <__fp_inf>
   1ccf4:	a6 cf       	rjmp	.-180    	; 0x1cc42 <__fp_szero>
   1ccf6:	5f 3f       	cpi	r21, 0xFF	; 255
   1ccf8:	ec f3       	brlt	.-6      	; 0x1ccf4 <__mulsf3_pse+0x82>
   1ccfa:	98 3e       	cpi	r25, 0xE8	; 232
   1ccfc:	dc f3       	brlt	.-10     	; 0x1ccf4 <__mulsf3_pse+0x82>
   1ccfe:	86 95       	lsr	r24
   1cd00:	77 95       	ror	r23
   1cd02:	67 95       	ror	r22
   1cd04:	b7 95       	ror	r27
   1cd06:	f7 95       	ror	r31
   1cd08:	e7 95       	ror	r30
   1cd0a:	9f 5f       	subi	r25, 0xFF	; 255
   1cd0c:	c1 f7       	brne	.-16     	; 0x1ccfe <__mulsf3_pse+0x8c>
   1cd0e:	fe 2b       	or	r31, r30
   1cd10:	88 0f       	add	r24, r24
   1cd12:	91 1d       	adc	r25, r1
   1cd14:	96 95       	lsr	r25
   1cd16:	87 95       	ror	r24
   1cd18:	97 f9       	bld	r25, 7
   1cd1a:	08 95       	ret

0001cd1c <round>:
   1cd1c:	77 df       	rcall	.-274    	; 0x1cc0c <__fp_splitA>
   1cd1e:	e0 f0       	brcs	.+56     	; 0x1cd58 <round+0x3c>
   1cd20:	9e 37       	cpi	r25, 0x7E	; 126
   1cd22:	d8 f0       	brcs	.+54     	; 0x1cd5a <round+0x3e>
   1cd24:	96 39       	cpi	r25, 0x96	; 150
   1cd26:	b8 f4       	brcc	.+46     	; 0x1cd56 <round+0x3a>
   1cd28:	9e 38       	cpi	r25, 0x8E	; 142
   1cd2a:	48 f4       	brcc	.+18     	; 0x1cd3e <round+0x22>
   1cd2c:	67 2f       	mov	r22, r23
   1cd2e:	78 2f       	mov	r23, r24
   1cd30:	88 27       	eor	r24, r24
   1cd32:	98 5f       	subi	r25, 0xF8	; 248
   1cd34:	f9 cf       	rjmp	.-14     	; 0x1cd28 <round+0xc>
   1cd36:	86 95       	lsr	r24
   1cd38:	77 95       	ror	r23
   1cd3a:	67 95       	ror	r22
   1cd3c:	93 95       	inc	r25
   1cd3e:	95 39       	cpi	r25, 0x95	; 149
   1cd40:	d0 f3       	brcs	.-12     	; 0x1cd36 <round+0x1a>
   1cd42:	b6 2f       	mov	r27, r22
   1cd44:	b1 70       	andi	r27, 0x01	; 1
   1cd46:	6b 0f       	add	r22, r27
   1cd48:	71 1d       	adc	r23, r1
   1cd4a:	81 1d       	adc	r24, r1
   1cd4c:	20 f4       	brcc	.+8      	; 0x1cd56 <round+0x3a>
   1cd4e:	87 95       	ror	r24
   1cd50:	77 95       	ror	r23
   1cd52:	67 95       	ror	r22
   1cd54:	93 95       	inc	r25
   1cd56:	02 c0       	rjmp	.+4      	; 0x1cd5c <__fp_mintl>
   1cd58:	1c c0       	rjmp	.+56     	; 0x1cd92 <__fp_mpack>
   1cd5a:	73 cf       	rjmp	.-282    	; 0x1cc42 <__fp_szero>

0001cd5c <__fp_mintl>:
   1cd5c:	88 23       	and	r24, r24
   1cd5e:	71 f4       	brne	.+28     	; 0x1cd7c <__fp_mintl+0x20>
   1cd60:	77 23       	and	r23, r23
   1cd62:	21 f0       	breq	.+8      	; 0x1cd6c <__fp_mintl+0x10>
   1cd64:	98 50       	subi	r25, 0x08	; 8
   1cd66:	87 2b       	or	r24, r23
   1cd68:	76 2f       	mov	r23, r22
   1cd6a:	07 c0       	rjmp	.+14     	; 0x1cd7a <__fp_mintl+0x1e>
   1cd6c:	66 23       	and	r22, r22
   1cd6e:	11 f4       	brne	.+4      	; 0x1cd74 <__fp_mintl+0x18>
   1cd70:	99 27       	eor	r25, r25
   1cd72:	0d c0       	rjmp	.+26     	; 0x1cd8e <__fp_mintl+0x32>
   1cd74:	90 51       	subi	r25, 0x10	; 16
   1cd76:	86 2b       	or	r24, r22
   1cd78:	70 e0       	ldi	r23, 0x00	; 0
   1cd7a:	60 e0       	ldi	r22, 0x00	; 0
   1cd7c:	2a f0       	brmi	.+10     	; 0x1cd88 <__fp_mintl+0x2c>
   1cd7e:	9a 95       	dec	r25
   1cd80:	66 0f       	add	r22, r22
   1cd82:	77 1f       	adc	r23, r23
   1cd84:	88 1f       	adc	r24, r24
   1cd86:	da f7       	brpl	.-10     	; 0x1cd7e <__fp_mintl+0x22>
   1cd88:	88 0f       	add	r24, r24
   1cd8a:	96 95       	lsr	r25
   1cd8c:	87 95       	ror	r24
   1cd8e:	97 f9       	bld	r25, 7
   1cd90:	08 95       	ret

0001cd92 <__fp_mpack>:
   1cd92:	9f 3f       	cpi	r25, 0xFF	; 255
   1cd94:	31 f0       	breq	.+12     	; 0x1cda2 <__fp_mpack_finite+0xc>

0001cd96 <__fp_mpack_finite>:
   1cd96:	91 50       	subi	r25, 0x01	; 1
   1cd98:	20 f4       	brcc	.+8      	; 0x1cda2 <__fp_mpack_finite+0xc>
   1cd9a:	87 95       	ror	r24
   1cd9c:	77 95       	ror	r23
   1cd9e:	67 95       	ror	r22
   1cda0:	b7 95       	ror	r27
   1cda2:	88 0f       	add	r24, r24
   1cda4:	91 1d       	adc	r25, r1
   1cda6:	96 95       	lsr	r25
   1cda8:	87 95       	ror	r24
   1cdaa:	97 f9       	bld	r25, 7
   1cdac:	08 95       	ret

0001cdae <calloc>:
   1cdae:	0f 93       	push	r16
   1cdb0:	1f 93       	push	r17
   1cdb2:	cf 93       	push	r28
   1cdb4:	df 93       	push	r29
   1cdb6:	86 9f       	mul	r24, r22
   1cdb8:	80 01       	movw	r16, r0
   1cdba:	87 9f       	mul	r24, r23
   1cdbc:	10 0d       	add	r17, r0
   1cdbe:	96 9f       	mul	r25, r22
   1cdc0:	10 0d       	add	r17, r0
   1cdc2:	11 24       	eor	r1, r1
   1cdc4:	c8 01       	movw	r24, r16
   1cdc6:	0d d0       	rcall	.+26     	; 0x1cde2 <malloc>
   1cdc8:	ec 01       	movw	r28, r24
   1cdca:	00 97       	sbiw	r24, 0x00	; 0
   1cdcc:	21 f0       	breq	.+8      	; 0x1cdd6 <calloc+0x28>
   1cdce:	a8 01       	movw	r20, r16
   1cdd0:	60 e0       	ldi	r22, 0x00	; 0
   1cdd2:	70 e0       	ldi	r23, 0x00	; 0
   1cdd4:	0e d2       	rcall	.+1052   	; 0x1d1f2 <memset>
   1cdd6:	ce 01       	movw	r24, r28
   1cdd8:	df 91       	pop	r29
   1cdda:	cf 91       	pop	r28
   1cddc:	1f 91       	pop	r17
   1cdde:	0f 91       	pop	r16
   1cde0:	08 95       	ret

0001cde2 <malloc>:
   1cde2:	0f 93       	push	r16
   1cde4:	1f 93       	push	r17
   1cde6:	cf 93       	push	r28
   1cde8:	df 93       	push	r29
   1cdea:	82 30       	cpi	r24, 0x02	; 2
   1cdec:	91 05       	cpc	r25, r1
   1cdee:	10 f4       	brcc	.+4      	; 0x1cdf4 <malloc+0x12>
   1cdf0:	82 e0       	ldi	r24, 0x02	; 2
   1cdf2:	90 e0       	ldi	r25, 0x00	; 0
   1cdf4:	e0 91 bc 21 	lds	r30, 0x21BC	; 0x8021bc <__flp>
   1cdf8:	f0 91 bd 21 	lds	r31, 0x21BD	; 0x8021bd <__flp+0x1>
   1cdfc:	20 e0       	ldi	r18, 0x00	; 0
   1cdfe:	30 e0       	ldi	r19, 0x00	; 0
   1ce00:	a0 e0       	ldi	r26, 0x00	; 0
   1ce02:	b0 e0       	ldi	r27, 0x00	; 0
   1ce04:	30 97       	sbiw	r30, 0x00	; 0
   1ce06:	19 f1       	breq	.+70     	; 0x1ce4e <malloc+0x6c>
   1ce08:	40 81       	ld	r20, Z
   1ce0a:	51 81       	ldd	r21, Z+1	; 0x01
   1ce0c:	02 81       	ldd	r16, Z+2	; 0x02
   1ce0e:	13 81       	ldd	r17, Z+3	; 0x03
   1ce10:	48 17       	cp	r20, r24
   1ce12:	59 07       	cpc	r21, r25
   1ce14:	c8 f0       	brcs	.+50     	; 0x1ce48 <malloc+0x66>
   1ce16:	84 17       	cp	r24, r20
   1ce18:	95 07       	cpc	r25, r21
   1ce1a:	69 f4       	brne	.+26     	; 0x1ce36 <malloc+0x54>
   1ce1c:	10 97       	sbiw	r26, 0x00	; 0
   1ce1e:	31 f0       	breq	.+12     	; 0x1ce2c <malloc+0x4a>
   1ce20:	12 96       	adiw	r26, 0x02	; 2
   1ce22:	0c 93       	st	X, r16
   1ce24:	12 97       	sbiw	r26, 0x02	; 2
   1ce26:	13 96       	adiw	r26, 0x03	; 3
   1ce28:	1c 93       	st	X, r17
   1ce2a:	27 c0       	rjmp	.+78     	; 0x1ce7a <malloc+0x98>
   1ce2c:	00 93 bc 21 	sts	0x21BC, r16	; 0x8021bc <__flp>
   1ce30:	10 93 bd 21 	sts	0x21BD, r17	; 0x8021bd <__flp+0x1>
   1ce34:	22 c0       	rjmp	.+68     	; 0x1ce7a <malloc+0x98>
   1ce36:	21 15       	cp	r18, r1
   1ce38:	31 05       	cpc	r19, r1
   1ce3a:	19 f0       	breq	.+6      	; 0x1ce42 <malloc+0x60>
   1ce3c:	42 17       	cp	r20, r18
   1ce3e:	53 07       	cpc	r21, r19
   1ce40:	18 f4       	brcc	.+6      	; 0x1ce48 <malloc+0x66>
   1ce42:	9a 01       	movw	r18, r20
   1ce44:	bd 01       	movw	r22, r26
   1ce46:	ef 01       	movw	r28, r30
   1ce48:	df 01       	movw	r26, r30
   1ce4a:	f8 01       	movw	r30, r16
   1ce4c:	db cf       	rjmp	.-74     	; 0x1ce04 <malloc+0x22>
   1ce4e:	21 15       	cp	r18, r1
   1ce50:	31 05       	cpc	r19, r1
   1ce52:	f9 f0       	breq	.+62     	; 0x1ce92 <malloc+0xb0>
   1ce54:	28 1b       	sub	r18, r24
   1ce56:	39 0b       	sbc	r19, r25
   1ce58:	24 30       	cpi	r18, 0x04	; 4
   1ce5a:	31 05       	cpc	r19, r1
   1ce5c:	80 f4       	brcc	.+32     	; 0x1ce7e <malloc+0x9c>
   1ce5e:	8a 81       	ldd	r24, Y+2	; 0x02
   1ce60:	9b 81       	ldd	r25, Y+3	; 0x03
   1ce62:	61 15       	cp	r22, r1
   1ce64:	71 05       	cpc	r23, r1
   1ce66:	21 f0       	breq	.+8      	; 0x1ce70 <malloc+0x8e>
   1ce68:	fb 01       	movw	r30, r22
   1ce6a:	93 83       	std	Z+3, r25	; 0x03
   1ce6c:	82 83       	std	Z+2, r24	; 0x02
   1ce6e:	04 c0       	rjmp	.+8      	; 0x1ce78 <malloc+0x96>
   1ce70:	90 93 bd 21 	sts	0x21BD, r25	; 0x8021bd <__flp+0x1>
   1ce74:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <__flp>
   1ce78:	fe 01       	movw	r30, r28
   1ce7a:	32 96       	adiw	r30, 0x02	; 2
   1ce7c:	44 c0       	rjmp	.+136    	; 0x1cf06 <malloc+0x124>
   1ce7e:	fe 01       	movw	r30, r28
   1ce80:	e2 0f       	add	r30, r18
   1ce82:	f3 1f       	adc	r31, r19
   1ce84:	81 93       	st	Z+, r24
   1ce86:	91 93       	st	Z+, r25
   1ce88:	22 50       	subi	r18, 0x02	; 2
   1ce8a:	31 09       	sbc	r19, r1
   1ce8c:	39 83       	std	Y+1, r19	; 0x01
   1ce8e:	28 83       	st	Y, r18
   1ce90:	3a c0       	rjmp	.+116    	; 0x1cf06 <malloc+0x124>
   1ce92:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
   1ce96:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
   1ce9a:	23 2b       	or	r18, r19
   1ce9c:	41 f4       	brne	.+16     	; 0x1ceae <malloc+0xcc>
   1ce9e:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <__malloc_heap_start>
   1cea2:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <__malloc_heap_start+0x1>
   1cea6:	30 93 bb 21 	sts	0x21BB, r19	; 0x8021bb <__brkval+0x1>
   1ceaa:	20 93 ba 21 	sts	0x21BA, r18	; 0x8021ba <__brkval>
   1ceae:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_end>
   1ceb2:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_end+0x1>
   1ceb6:	21 15       	cp	r18, r1
   1ceb8:	31 05       	cpc	r19, r1
   1ceba:	41 f4       	brne	.+16     	; 0x1cecc <malloc+0xea>
   1cebc:	2d b7       	in	r18, 0x3d	; 61
   1cebe:	3e b7       	in	r19, 0x3e	; 62
   1cec0:	40 91 5b 02 	lds	r20, 0x025B	; 0x80025b <__malloc_margin>
   1cec4:	50 91 5c 02 	lds	r21, 0x025C	; 0x80025c <__malloc_margin+0x1>
   1cec8:	24 1b       	sub	r18, r20
   1ceca:	35 0b       	sbc	r19, r21
   1cecc:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <__brkval>
   1ced0:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <__brkval+0x1>
   1ced4:	e2 17       	cp	r30, r18
   1ced6:	f3 07       	cpc	r31, r19
   1ced8:	a0 f4       	brcc	.+40     	; 0x1cf02 <malloc+0x120>
   1ceda:	2e 1b       	sub	r18, r30
   1cedc:	3f 0b       	sbc	r19, r31
   1cede:	28 17       	cp	r18, r24
   1cee0:	39 07       	cpc	r19, r25
   1cee2:	78 f0       	brcs	.+30     	; 0x1cf02 <malloc+0x120>
   1cee4:	ac 01       	movw	r20, r24
   1cee6:	4e 5f       	subi	r20, 0xFE	; 254
   1cee8:	5f 4f       	sbci	r21, 0xFF	; 255
   1ceea:	24 17       	cp	r18, r20
   1ceec:	35 07       	cpc	r19, r21
   1ceee:	48 f0       	brcs	.+18     	; 0x1cf02 <malloc+0x120>
   1cef0:	4e 0f       	add	r20, r30
   1cef2:	5f 1f       	adc	r21, r31
   1cef4:	50 93 bb 21 	sts	0x21BB, r21	; 0x8021bb <__brkval+0x1>
   1cef8:	40 93 ba 21 	sts	0x21BA, r20	; 0x8021ba <__brkval>
   1cefc:	81 93       	st	Z+, r24
   1cefe:	91 93       	st	Z+, r25
   1cf00:	02 c0       	rjmp	.+4      	; 0x1cf06 <malloc+0x124>
   1cf02:	e0 e0       	ldi	r30, 0x00	; 0
   1cf04:	f0 e0       	ldi	r31, 0x00	; 0
   1cf06:	cf 01       	movw	r24, r30
   1cf08:	df 91       	pop	r29
   1cf0a:	cf 91       	pop	r28
   1cf0c:	1f 91       	pop	r17
   1cf0e:	0f 91       	pop	r16
   1cf10:	08 95       	ret

0001cf12 <free>:
   1cf12:	cf 93       	push	r28
   1cf14:	df 93       	push	r29
   1cf16:	00 97       	sbiw	r24, 0x00	; 0
   1cf18:	09 f4       	brne	.+2      	; 0x1cf1c <free+0xa>
   1cf1a:	81 c0       	rjmp	.+258    	; 0x1d01e <free+0x10c>
   1cf1c:	fc 01       	movw	r30, r24
   1cf1e:	32 97       	sbiw	r30, 0x02	; 2
   1cf20:	13 82       	std	Z+3, r1	; 0x03
   1cf22:	12 82       	std	Z+2, r1	; 0x02
   1cf24:	a0 91 bc 21 	lds	r26, 0x21BC	; 0x8021bc <__flp>
   1cf28:	b0 91 bd 21 	lds	r27, 0x21BD	; 0x8021bd <__flp+0x1>
   1cf2c:	10 97       	sbiw	r26, 0x00	; 0
   1cf2e:	81 f4       	brne	.+32     	; 0x1cf50 <free+0x3e>
   1cf30:	20 81       	ld	r18, Z
   1cf32:	31 81       	ldd	r19, Z+1	; 0x01
   1cf34:	82 0f       	add	r24, r18
   1cf36:	93 1f       	adc	r25, r19
   1cf38:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
   1cf3c:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
   1cf40:	28 17       	cp	r18, r24
   1cf42:	39 07       	cpc	r19, r25
   1cf44:	51 f5       	brne	.+84     	; 0x1cf9a <free+0x88>
   1cf46:	f0 93 bb 21 	sts	0x21BB, r31	; 0x8021bb <__brkval+0x1>
   1cf4a:	e0 93 ba 21 	sts	0x21BA, r30	; 0x8021ba <__brkval>
   1cf4e:	67 c0       	rjmp	.+206    	; 0x1d01e <free+0x10c>
   1cf50:	ed 01       	movw	r28, r26
   1cf52:	20 e0       	ldi	r18, 0x00	; 0
   1cf54:	30 e0       	ldi	r19, 0x00	; 0
   1cf56:	ce 17       	cp	r28, r30
   1cf58:	df 07       	cpc	r29, r31
   1cf5a:	40 f4       	brcc	.+16     	; 0x1cf6c <free+0x5a>
   1cf5c:	4a 81       	ldd	r20, Y+2	; 0x02
   1cf5e:	5b 81       	ldd	r21, Y+3	; 0x03
   1cf60:	9e 01       	movw	r18, r28
   1cf62:	41 15       	cp	r20, r1
   1cf64:	51 05       	cpc	r21, r1
   1cf66:	f1 f0       	breq	.+60     	; 0x1cfa4 <free+0x92>
   1cf68:	ea 01       	movw	r28, r20
   1cf6a:	f5 cf       	rjmp	.-22     	; 0x1cf56 <free+0x44>
   1cf6c:	d3 83       	std	Z+3, r29	; 0x03
   1cf6e:	c2 83       	std	Z+2, r28	; 0x02
   1cf70:	40 81       	ld	r20, Z
   1cf72:	51 81       	ldd	r21, Z+1	; 0x01
   1cf74:	84 0f       	add	r24, r20
   1cf76:	95 1f       	adc	r25, r21
   1cf78:	c8 17       	cp	r28, r24
   1cf7a:	d9 07       	cpc	r29, r25
   1cf7c:	59 f4       	brne	.+22     	; 0x1cf94 <free+0x82>
   1cf7e:	88 81       	ld	r24, Y
   1cf80:	99 81       	ldd	r25, Y+1	; 0x01
   1cf82:	84 0f       	add	r24, r20
   1cf84:	95 1f       	adc	r25, r21
   1cf86:	02 96       	adiw	r24, 0x02	; 2
   1cf88:	91 83       	std	Z+1, r25	; 0x01
   1cf8a:	80 83       	st	Z, r24
   1cf8c:	8a 81       	ldd	r24, Y+2	; 0x02
   1cf8e:	9b 81       	ldd	r25, Y+3	; 0x03
   1cf90:	93 83       	std	Z+3, r25	; 0x03
   1cf92:	82 83       	std	Z+2, r24	; 0x02
   1cf94:	21 15       	cp	r18, r1
   1cf96:	31 05       	cpc	r19, r1
   1cf98:	29 f4       	brne	.+10     	; 0x1cfa4 <free+0x92>
   1cf9a:	f0 93 bd 21 	sts	0x21BD, r31	; 0x8021bd <__flp+0x1>
   1cf9e:	e0 93 bc 21 	sts	0x21BC, r30	; 0x8021bc <__flp>
   1cfa2:	3d c0       	rjmp	.+122    	; 0x1d01e <free+0x10c>
   1cfa4:	e9 01       	movw	r28, r18
   1cfa6:	fb 83       	std	Y+3, r31	; 0x03
   1cfa8:	ea 83       	std	Y+2, r30	; 0x02
   1cfaa:	49 91       	ld	r20, Y+
   1cfac:	59 91       	ld	r21, Y+
   1cfae:	c4 0f       	add	r28, r20
   1cfb0:	d5 1f       	adc	r29, r21
   1cfb2:	ec 17       	cp	r30, r28
   1cfb4:	fd 07       	cpc	r31, r29
   1cfb6:	61 f4       	brne	.+24     	; 0x1cfd0 <free+0xbe>
   1cfb8:	80 81       	ld	r24, Z
   1cfba:	91 81       	ldd	r25, Z+1	; 0x01
   1cfbc:	84 0f       	add	r24, r20
   1cfbe:	95 1f       	adc	r25, r21
   1cfc0:	02 96       	adiw	r24, 0x02	; 2
   1cfc2:	e9 01       	movw	r28, r18
   1cfc4:	99 83       	std	Y+1, r25	; 0x01
   1cfc6:	88 83       	st	Y, r24
   1cfc8:	82 81       	ldd	r24, Z+2	; 0x02
   1cfca:	93 81       	ldd	r25, Z+3	; 0x03
   1cfcc:	9b 83       	std	Y+3, r25	; 0x03
   1cfce:	8a 83       	std	Y+2, r24	; 0x02
   1cfd0:	e0 e0       	ldi	r30, 0x00	; 0
   1cfd2:	f0 e0       	ldi	r31, 0x00	; 0
   1cfd4:	12 96       	adiw	r26, 0x02	; 2
   1cfd6:	8d 91       	ld	r24, X+
   1cfd8:	9c 91       	ld	r25, X
   1cfda:	13 97       	sbiw	r26, 0x03	; 3
   1cfdc:	00 97       	sbiw	r24, 0x00	; 0
   1cfde:	19 f0       	breq	.+6      	; 0x1cfe6 <free+0xd4>
   1cfe0:	fd 01       	movw	r30, r26
   1cfe2:	dc 01       	movw	r26, r24
   1cfe4:	f7 cf       	rjmp	.-18     	; 0x1cfd4 <free+0xc2>
   1cfe6:	8d 91       	ld	r24, X+
   1cfe8:	9c 91       	ld	r25, X
   1cfea:	11 97       	sbiw	r26, 0x01	; 1
   1cfec:	9d 01       	movw	r18, r26
   1cfee:	2e 5f       	subi	r18, 0xFE	; 254
   1cff0:	3f 4f       	sbci	r19, 0xFF	; 255
   1cff2:	82 0f       	add	r24, r18
   1cff4:	93 1f       	adc	r25, r19
   1cff6:	20 91 ba 21 	lds	r18, 0x21BA	; 0x8021ba <__brkval>
   1cffa:	30 91 bb 21 	lds	r19, 0x21BB	; 0x8021bb <__brkval+0x1>
   1cffe:	28 17       	cp	r18, r24
   1d000:	39 07       	cpc	r19, r25
   1d002:	69 f4       	brne	.+26     	; 0x1d01e <free+0x10c>
   1d004:	30 97       	sbiw	r30, 0x00	; 0
   1d006:	29 f4       	brne	.+10     	; 0x1d012 <free+0x100>
   1d008:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <__flp+0x1>
   1d00c:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <__flp>
   1d010:	02 c0       	rjmp	.+4      	; 0x1d016 <free+0x104>
   1d012:	13 82       	std	Z+3, r1	; 0x03
   1d014:	12 82       	std	Z+2, r1	; 0x02
   1d016:	b0 93 bb 21 	sts	0x21BB, r27	; 0x8021bb <__brkval+0x1>
   1d01a:	a0 93 ba 21 	sts	0x21BA, r26	; 0x8021ba <__brkval>
   1d01e:	df 91       	pop	r29
   1d020:	cf 91       	pop	r28
   1d022:	08 95       	ret

0001d024 <abort>:
   1d024:	81 e0       	ldi	r24, 0x01	; 1
   1d026:	90 e0       	ldi	r25, 0x00	; 0
   1d028:	f8 94       	cli
   1d02a:	53 c1       	rjmp	.+678    	; 0x1d2d2 <_exit>

0001d02c <__ftoa_engine>:
   1d02c:	28 30       	cpi	r18, 0x08	; 8
   1d02e:	08 f0       	brcs	.+2      	; 0x1d032 <__ftoa_engine+0x6>
   1d030:	27 e0       	ldi	r18, 0x07	; 7
   1d032:	33 27       	eor	r19, r19
   1d034:	da 01       	movw	r26, r20
   1d036:	99 0f       	add	r25, r25
   1d038:	31 1d       	adc	r19, r1
   1d03a:	87 fd       	sbrc	r24, 7
   1d03c:	91 60       	ori	r25, 0x01	; 1
   1d03e:	00 96       	adiw	r24, 0x00	; 0
   1d040:	61 05       	cpc	r22, r1
   1d042:	71 05       	cpc	r23, r1
   1d044:	39 f4       	brne	.+14     	; 0x1d054 <__ftoa_engine+0x28>
   1d046:	32 60       	ori	r19, 0x02	; 2
   1d048:	2e 5f       	subi	r18, 0xFE	; 254
   1d04a:	3d 93       	st	X+, r19
   1d04c:	30 e3       	ldi	r19, 0x30	; 48
   1d04e:	2a 95       	dec	r18
   1d050:	e1 f7       	brne	.-8      	; 0x1d04a <__ftoa_engine+0x1e>
   1d052:	08 95       	ret
   1d054:	9f 3f       	cpi	r25, 0xFF	; 255
   1d056:	30 f0       	brcs	.+12     	; 0x1d064 <__ftoa_engine+0x38>
   1d058:	80 38       	cpi	r24, 0x80	; 128
   1d05a:	71 05       	cpc	r23, r1
   1d05c:	61 05       	cpc	r22, r1
   1d05e:	09 f0       	breq	.+2      	; 0x1d062 <__ftoa_engine+0x36>
   1d060:	3c 5f       	subi	r19, 0xFC	; 252
   1d062:	3c 5f       	subi	r19, 0xFC	; 252
   1d064:	3d 93       	st	X+, r19
   1d066:	91 30       	cpi	r25, 0x01	; 1
   1d068:	08 f0       	brcs	.+2      	; 0x1d06c <__ftoa_engine+0x40>
   1d06a:	80 68       	ori	r24, 0x80	; 128
   1d06c:	91 1d       	adc	r25, r1
   1d06e:	df 93       	push	r29
   1d070:	cf 93       	push	r28
   1d072:	1f 93       	push	r17
   1d074:	0f 93       	push	r16
   1d076:	ff 92       	push	r15
   1d078:	ef 92       	push	r14
   1d07a:	19 2f       	mov	r17, r25
   1d07c:	98 7f       	andi	r25, 0xF8	; 248
   1d07e:	96 95       	lsr	r25
   1d080:	e9 2f       	mov	r30, r25
   1d082:	96 95       	lsr	r25
   1d084:	96 95       	lsr	r25
   1d086:	e9 0f       	add	r30, r25
   1d088:	ff 27       	eor	r31, r31
   1d08a:	e8 5c       	subi	r30, 0xC8	; 200
   1d08c:	fd 4f       	sbci	r31, 0xFD	; 253
   1d08e:	99 27       	eor	r25, r25
   1d090:	33 27       	eor	r19, r19
   1d092:	ee 24       	eor	r14, r14
   1d094:	ff 24       	eor	r15, r15
   1d096:	a7 01       	movw	r20, r14
   1d098:	e7 01       	movw	r28, r14
   1d09a:	05 90       	lpm	r0, Z+
   1d09c:	08 94       	sec
   1d09e:	07 94       	ror	r0
   1d0a0:	28 f4       	brcc	.+10     	; 0x1d0ac <__ftoa_engine+0x80>
   1d0a2:	36 0f       	add	r19, r22
   1d0a4:	e7 1e       	adc	r14, r23
   1d0a6:	f8 1e       	adc	r15, r24
   1d0a8:	49 1f       	adc	r20, r25
   1d0aa:	51 1d       	adc	r21, r1
   1d0ac:	66 0f       	add	r22, r22
   1d0ae:	77 1f       	adc	r23, r23
   1d0b0:	88 1f       	adc	r24, r24
   1d0b2:	99 1f       	adc	r25, r25
   1d0b4:	06 94       	lsr	r0
   1d0b6:	a1 f7       	brne	.-24     	; 0x1d0a0 <__ftoa_engine+0x74>
   1d0b8:	05 90       	lpm	r0, Z+
   1d0ba:	07 94       	ror	r0
   1d0bc:	28 f4       	brcc	.+10     	; 0x1d0c8 <__ftoa_engine+0x9c>
   1d0be:	e7 0e       	add	r14, r23
   1d0c0:	f8 1e       	adc	r15, r24
   1d0c2:	49 1f       	adc	r20, r25
   1d0c4:	56 1f       	adc	r21, r22
   1d0c6:	c1 1d       	adc	r28, r1
   1d0c8:	77 0f       	add	r23, r23
   1d0ca:	88 1f       	adc	r24, r24
   1d0cc:	99 1f       	adc	r25, r25
   1d0ce:	66 1f       	adc	r22, r22
   1d0d0:	06 94       	lsr	r0
   1d0d2:	a1 f7       	brne	.-24     	; 0x1d0bc <__ftoa_engine+0x90>
   1d0d4:	05 90       	lpm	r0, Z+
   1d0d6:	07 94       	ror	r0
   1d0d8:	28 f4       	brcc	.+10     	; 0x1d0e4 <__ftoa_engine+0xb8>
   1d0da:	f8 0e       	add	r15, r24
   1d0dc:	49 1f       	adc	r20, r25
   1d0de:	56 1f       	adc	r21, r22
   1d0e0:	c7 1f       	adc	r28, r23
   1d0e2:	d1 1d       	adc	r29, r1
   1d0e4:	88 0f       	add	r24, r24
   1d0e6:	99 1f       	adc	r25, r25
   1d0e8:	66 1f       	adc	r22, r22
   1d0ea:	77 1f       	adc	r23, r23
   1d0ec:	06 94       	lsr	r0
   1d0ee:	a1 f7       	brne	.-24     	; 0x1d0d8 <__ftoa_engine+0xac>
   1d0f0:	05 90       	lpm	r0, Z+
   1d0f2:	07 94       	ror	r0
   1d0f4:	20 f4       	brcc	.+8      	; 0x1d0fe <__ftoa_engine+0xd2>
   1d0f6:	49 0f       	add	r20, r25
   1d0f8:	56 1f       	adc	r21, r22
   1d0fa:	c7 1f       	adc	r28, r23
   1d0fc:	d8 1f       	adc	r29, r24
   1d0fe:	99 0f       	add	r25, r25
   1d100:	66 1f       	adc	r22, r22
   1d102:	77 1f       	adc	r23, r23
   1d104:	88 1f       	adc	r24, r24
   1d106:	06 94       	lsr	r0
   1d108:	a9 f7       	brne	.-22     	; 0x1d0f4 <__ftoa_engine+0xc8>
   1d10a:	84 91       	lpm	r24, Z
   1d10c:	10 95       	com	r17
   1d10e:	17 70       	andi	r17, 0x07	; 7
   1d110:	41 f0       	breq	.+16     	; 0x1d122 <__ftoa_engine+0xf6>
   1d112:	d6 95       	lsr	r29
   1d114:	c7 95       	ror	r28
   1d116:	57 95       	ror	r21
   1d118:	47 95       	ror	r20
   1d11a:	f7 94       	ror	r15
   1d11c:	e7 94       	ror	r14
   1d11e:	1a 95       	dec	r17
   1d120:	c1 f7       	brne	.-16     	; 0x1d112 <__ftoa_engine+0xe6>
   1d122:	ee ed       	ldi	r30, 0xDE	; 222
   1d124:	f1 e0       	ldi	r31, 0x01	; 1
   1d126:	68 94       	set
   1d128:	15 90       	lpm	r1, Z+
   1d12a:	15 91       	lpm	r17, Z+
   1d12c:	35 91       	lpm	r19, Z+
   1d12e:	65 91       	lpm	r22, Z+
   1d130:	95 91       	lpm	r25, Z+
   1d132:	05 90       	lpm	r0, Z+
   1d134:	7f e2       	ldi	r23, 0x2F	; 47
   1d136:	73 95       	inc	r23
   1d138:	e1 18       	sub	r14, r1
   1d13a:	f1 0a       	sbc	r15, r17
   1d13c:	43 0b       	sbc	r20, r19
   1d13e:	56 0b       	sbc	r21, r22
   1d140:	c9 0b       	sbc	r28, r25
   1d142:	d0 09       	sbc	r29, r0
   1d144:	c0 f7       	brcc	.-16     	; 0x1d136 <__ftoa_engine+0x10a>
   1d146:	e1 0c       	add	r14, r1
   1d148:	f1 1e       	adc	r15, r17
   1d14a:	43 1f       	adc	r20, r19
   1d14c:	56 1f       	adc	r21, r22
   1d14e:	c9 1f       	adc	r28, r25
   1d150:	d0 1d       	adc	r29, r0
   1d152:	7e f4       	brtc	.+30     	; 0x1d172 <__ftoa_engine+0x146>
   1d154:	70 33       	cpi	r23, 0x30	; 48
   1d156:	11 f4       	brne	.+4      	; 0x1d15c <__ftoa_engine+0x130>
   1d158:	8a 95       	dec	r24
   1d15a:	e6 cf       	rjmp	.-52     	; 0x1d128 <__ftoa_engine+0xfc>
   1d15c:	e8 94       	clt
   1d15e:	01 50       	subi	r16, 0x01	; 1
   1d160:	30 f0       	brcs	.+12     	; 0x1d16e <__ftoa_engine+0x142>
   1d162:	08 0f       	add	r16, r24
   1d164:	0a f4       	brpl	.+2      	; 0x1d168 <__ftoa_engine+0x13c>
   1d166:	00 27       	eor	r16, r16
   1d168:	02 17       	cp	r16, r18
   1d16a:	08 f4       	brcc	.+2      	; 0x1d16e <__ftoa_engine+0x142>
   1d16c:	20 2f       	mov	r18, r16
   1d16e:	23 95       	inc	r18
   1d170:	02 2f       	mov	r16, r18
   1d172:	7a 33       	cpi	r23, 0x3A	; 58
   1d174:	28 f0       	brcs	.+10     	; 0x1d180 <__ftoa_engine+0x154>
   1d176:	79 e3       	ldi	r23, 0x39	; 57
   1d178:	7d 93       	st	X+, r23
   1d17a:	2a 95       	dec	r18
   1d17c:	e9 f7       	brne	.-6      	; 0x1d178 <__ftoa_engine+0x14c>
   1d17e:	10 c0       	rjmp	.+32     	; 0x1d1a0 <__ftoa_engine+0x174>
   1d180:	7d 93       	st	X+, r23
   1d182:	2a 95       	dec	r18
   1d184:	89 f6       	brne	.-94     	; 0x1d128 <__ftoa_engine+0xfc>
   1d186:	06 94       	lsr	r0
   1d188:	97 95       	ror	r25
   1d18a:	67 95       	ror	r22
   1d18c:	37 95       	ror	r19
   1d18e:	17 95       	ror	r17
   1d190:	17 94       	ror	r1
   1d192:	e1 18       	sub	r14, r1
   1d194:	f1 0a       	sbc	r15, r17
   1d196:	43 0b       	sbc	r20, r19
   1d198:	56 0b       	sbc	r21, r22
   1d19a:	c9 0b       	sbc	r28, r25
   1d19c:	d0 09       	sbc	r29, r0
   1d19e:	98 f0       	brcs	.+38     	; 0x1d1c6 <__ftoa_engine+0x19a>
   1d1a0:	23 95       	inc	r18
   1d1a2:	7e 91       	ld	r23, -X
   1d1a4:	73 95       	inc	r23
   1d1a6:	7a 33       	cpi	r23, 0x3A	; 58
   1d1a8:	08 f0       	brcs	.+2      	; 0x1d1ac <__ftoa_engine+0x180>
   1d1aa:	70 e3       	ldi	r23, 0x30	; 48
   1d1ac:	7c 93       	st	X, r23
   1d1ae:	20 13       	cpse	r18, r16
   1d1b0:	b8 f7       	brcc	.-18     	; 0x1d1a0 <__ftoa_engine+0x174>
   1d1b2:	7e 91       	ld	r23, -X
   1d1b4:	70 61       	ori	r23, 0x10	; 16
   1d1b6:	7d 93       	st	X+, r23
   1d1b8:	30 f0       	brcs	.+12     	; 0x1d1c6 <__ftoa_engine+0x19a>
   1d1ba:	83 95       	inc	r24
   1d1bc:	71 e3       	ldi	r23, 0x31	; 49
   1d1be:	7d 93       	st	X+, r23
   1d1c0:	70 e3       	ldi	r23, 0x30	; 48
   1d1c2:	2a 95       	dec	r18
   1d1c4:	e1 f7       	brne	.-8      	; 0x1d1be <__ftoa_engine+0x192>
   1d1c6:	11 24       	eor	r1, r1
   1d1c8:	ef 90       	pop	r14
   1d1ca:	ff 90       	pop	r15
   1d1cc:	0f 91       	pop	r16
   1d1ce:	1f 91       	pop	r17
   1d1d0:	cf 91       	pop	r28
   1d1d2:	df 91       	pop	r29
   1d1d4:	99 27       	eor	r25, r25
   1d1d6:	87 fd       	sbrc	r24, 7
   1d1d8:	90 95       	com	r25
   1d1da:	08 95       	ret

0001d1dc <strnlen_P>:
   1d1dc:	fc 01       	movw	r30, r24
   1d1de:	05 90       	lpm	r0, Z+
   1d1e0:	61 50       	subi	r22, 0x01	; 1
   1d1e2:	70 40       	sbci	r23, 0x00	; 0
   1d1e4:	01 10       	cpse	r0, r1
   1d1e6:	d8 f7       	brcc	.-10     	; 0x1d1de <strnlen_P+0x2>
   1d1e8:	80 95       	com	r24
   1d1ea:	90 95       	com	r25
   1d1ec:	8e 0f       	add	r24, r30
   1d1ee:	9f 1f       	adc	r25, r31
   1d1f0:	08 95       	ret

0001d1f2 <memset>:
   1d1f2:	dc 01       	movw	r26, r24
   1d1f4:	01 c0       	rjmp	.+2      	; 0x1d1f8 <memset+0x6>
   1d1f6:	6d 93       	st	X+, r22
   1d1f8:	41 50       	subi	r20, 0x01	; 1
   1d1fa:	50 40       	sbci	r21, 0x00	; 0
   1d1fc:	e0 f7       	brcc	.-8      	; 0x1d1f6 <memset+0x4>
   1d1fe:	08 95       	ret

0001d200 <strnlen>:
   1d200:	fc 01       	movw	r30, r24
   1d202:	61 50       	subi	r22, 0x01	; 1
   1d204:	70 40       	sbci	r23, 0x00	; 0
   1d206:	01 90       	ld	r0, Z+
   1d208:	01 10       	cpse	r0, r1
   1d20a:	d8 f7       	brcc	.-10     	; 0x1d202 <strnlen+0x2>
   1d20c:	80 95       	com	r24
   1d20e:	90 95       	com	r25
   1d210:	8e 0f       	add	r24, r30
   1d212:	9f 1f       	adc	r25, r31
   1d214:	08 95       	ret

0001d216 <__ultoa_invert>:
   1d216:	fa 01       	movw	r30, r20
   1d218:	aa 27       	eor	r26, r26
   1d21a:	28 30       	cpi	r18, 0x08	; 8
   1d21c:	51 f1       	breq	.+84     	; 0x1d272 <__ultoa_invert+0x5c>
   1d21e:	20 31       	cpi	r18, 0x10	; 16
   1d220:	81 f1       	breq	.+96     	; 0x1d282 <__ultoa_invert+0x6c>
   1d222:	e8 94       	clt
   1d224:	6f 93       	push	r22
   1d226:	6e 7f       	andi	r22, 0xFE	; 254
   1d228:	6e 5f       	subi	r22, 0xFE	; 254
   1d22a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d22c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d22e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d230:	af 4f       	sbci	r26, 0xFF	; 255
   1d232:	b1 e0       	ldi	r27, 0x01	; 1
   1d234:	3e d0       	rcall	.+124    	; 0x1d2b2 <__ultoa_invert+0x9c>
   1d236:	b4 e0       	ldi	r27, 0x04	; 4
   1d238:	3c d0       	rcall	.+120    	; 0x1d2b2 <__ultoa_invert+0x9c>
   1d23a:	67 0f       	add	r22, r23
   1d23c:	78 1f       	adc	r23, r24
   1d23e:	89 1f       	adc	r24, r25
   1d240:	9a 1f       	adc	r25, r26
   1d242:	a1 1d       	adc	r26, r1
   1d244:	68 0f       	add	r22, r24
   1d246:	79 1f       	adc	r23, r25
   1d248:	8a 1f       	adc	r24, r26
   1d24a:	91 1d       	adc	r25, r1
   1d24c:	a1 1d       	adc	r26, r1
   1d24e:	6a 0f       	add	r22, r26
   1d250:	71 1d       	adc	r23, r1
   1d252:	81 1d       	adc	r24, r1
   1d254:	91 1d       	adc	r25, r1
   1d256:	a1 1d       	adc	r26, r1
   1d258:	20 d0       	rcall	.+64     	; 0x1d29a <__ultoa_invert+0x84>
   1d25a:	09 f4       	brne	.+2      	; 0x1d25e <__ultoa_invert+0x48>
   1d25c:	68 94       	set
   1d25e:	3f 91       	pop	r19
   1d260:	2a e0       	ldi	r18, 0x0A	; 10
   1d262:	26 9f       	mul	r18, r22
   1d264:	11 24       	eor	r1, r1
   1d266:	30 19       	sub	r19, r0
   1d268:	30 5d       	subi	r19, 0xD0	; 208
   1d26a:	31 93       	st	Z+, r19
   1d26c:	de f6       	brtc	.-74     	; 0x1d224 <__ultoa_invert+0xe>
   1d26e:	cf 01       	movw	r24, r30
   1d270:	08 95       	ret
   1d272:	46 2f       	mov	r20, r22
   1d274:	47 70       	andi	r20, 0x07	; 7
   1d276:	40 5d       	subi	r20, 0xD0	; 208
   1d278:	41 93       	st	Z+, r20
   1d27a:	b3 e0       	ldi	r27, 0x03	; 3
   1d27c:	0f d0       	rcall	.+30     	; 0x1d29c <__ultoa_invert+0x86>
   1d27e:	c9 f7       	brne	.-14     	; 0x1d272 <__ultoa_invert+0x5c>
   1d280:	f6 cf       	rjmp	.-20     	; 0x1d26e <__ultoa_invert+0x58>
   1d282:	46 2f       	mov	r20, r22
   1d284:	4f 70       	andi	r20, 0x0F	; 15
   1d286:	40 5d       	subi	r20, 0xD0	; 208
   1d288:	4a 33       	cpi	r20, 0x3A	; 58
   1d28a:	18 f0       	brcs	.+6      	; 0x1d292 <__ultoa_invert+0x7c>
   1d28c:	49 5d       	subi	r20, 0xD9	; 217
   1d28e:	31 fd       	sbrc	r19, 1
   1d290:	40 52       	subi	r20, 0x20	; 32
   1d292:	41 93       	st	Z+, r20
   1d294:	02 d0       	rcall	.+4      	; 0x1d29a <__ultoa_invert+0x84>
   1d296:	a9 f7       	brne	.-22     	; 0x1d282 <__ultoa_invert+0x6c>
   1d298:	ea cf       	rjmp	.-44     	; 0x1d26e <__ultoa_invert+0x58>
   1d29a:	b4 e0       	ldi	r27, 0x04	; 4
   1d29c:	a6 95       	lsr	r26
   1d29e:	97 95       	ror	r25
   1d2a0:	87 95       	ror	r24
   1d2a2:	77 95       	ror	r23
   1d2a4:	67 95       	ror	r22
   1d2a6:	ba 95       	dec	r27
   1d2a8:	c9 f7       	brne	.-14     	; 0x1d29c <__ultoa_invert+0x86>
   1d2aa:	00 97       	sbiw	r24, 0x00	; 0
   1d2ac:	61 05       	cpc	r22, r1
   1d2ae:	71 05       	cpc	r23, r1
   1d2b0:	08 95       	ret
   1d2b2:	9b 01       	movw	r18, r22
   1d2b4:	ac 01       	movw	r20, r24
   1d2b6:	0a 2e       	mov	r0, r26
   1d2b8:	06 94       	lsr	r0
   1d2ba:	57 95       	ror	r21
   1d2bc:	47 95       	ror	r20
   1d2be:	37 95       	ror	r19
   1d2c0:	27 95       	ror	r18
   1d2c2:	ba 95       	dec	r27
   1d2c4:	c9 f7       	brne	.-14     	; 0x1d2b8 <__ultoa_invert+0xa2>
   1d2c6:	62 0f       	add	r22, r18
   1d2c8:	73 1f       	adc	r23, r19
   1d2ca:	84 1f       	adc	r24, r20
   1d2cc:	95 1f       	adc	r25, r21
   1d2ce:	a0 1d       	adc	r26, r0
   1d2d0:	08 95       	ret

0001d2d2 <_exit>:
   1d2d2:	f8 94       	cli

0001d2d4 <__stop_program>:
   1d2d4:	ff cf       	rjmp	.-2      	; 0x1d2d4 <__stop_program>
