
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000165a  00800100  0001cbc4  0001cc58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001cbc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a37  0080175a  0080175a  0001e2b2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e2b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e2c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001810  00000000  00000000  0001e304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028f79  00000000  00000000  0001fb14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006435  00000000  00000000  00048a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000123e5  00000000  00000000  0004eec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000530c  00000000  00000000  000612a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b29  00000000  00000000  000665b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023fe3  00000000  00000000  0006b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017e0  00000000  00000000  0008f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 22 	jmp	0x44d8	; 0x44d8 <__ctors_end>
       4:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
       8:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
       c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      10:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      14:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      18:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      1c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      20:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      24:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      28:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      2c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      30:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      34:	0c 94 1a 33 	jmp	0x6634	; 0x6634 <__vector_13>
      38:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      3c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      40:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      44:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      48:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      4c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      50:	0c 94 e3 29 	jmp	0x53c6	; 0x53c6 <__vector_20>
      54:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      58:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      5c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      60:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      64:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      68:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__vector_26>
      6c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      70:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      74:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      78:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      7c:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      80:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      84:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      88:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__bad_interrupt>
      8c:	e5 42       	sbci	r30, 0x25	; 37
      8e:	38 44       	sbci	r19, 0x48	; 72
      90:	15 43       	sbci	r17, 0x35	; 53
      92:	11 44       	sbci	r17, 0x41	; 65
      94:	11 44       	sbci	r17, 0x41	; 65
      96:	38 44       	sbci	r19, 0x48	; 72
      98:	38 44       	sbci	r19, 0x48	; 72
      9a:	38 44       	sbci	r19, 0x48	; 72
      9c:	38 44       	sbci	r19, 0x48	; 72
      9e:	38 44       	sbci	r19, 0x48	; 72
      a0:	38 44       	sbci	r19, 0x48	; 72
      a2:	38 44       	sbci	r19, 0x48	; 72
      a4:	38 44       	sbci	r19, 0x48	; 72
      a6:	e5 42       	sbci	r30, 0x25	; 37
      a8:	df 42       	sbci	r29, 0x2F	; 47
      aa:	38 44       	sbci	r19, 0x48	; 72
      ac:	38 44       	sbci	r19, 0x48	; 72
      ae:	38 44       	sbci	r19, 0x48	; 72
      b0:	38 44       	sbci	r19, 0x48	; 72
      b2:	0f 43       	sbci	r16, 0x3F	; 63
      b4:	38 44       	sbci	r19, 0x48	; 72
      b6:	38 44       	sbci	r19, 0x48	; 72
      b8:	e5 42       	sbci	r30, 0x25	; 37
      ba:	38 44       	sbci	r19, 0x48	; 72
      bc:	38 44       	sbci	r19, 0x48	; 72
      be:	38 44       	sbci	r19, 0x48	; 72
      c0:	38 44       	sbci	r19, 0x48	; 72
      c2:	38 44       	sbci	r19, 0x48	; 72
      c4:	38 44       	sbci	r19, 0x48	; 72
      c6:	38 44       	sbci	r19, 0x48	; 72
      c8:	38 44       	sbci	r19, 0x48	; 72
      ca:	38 44       	sbci	r19, 0x48	; 72
      cc:	e5 42       	sbci	r30, 0x25	; 37
      ce:	33 44       	sbci	r19, 0x43	; 67
      d0:	15 43       	sbci	r17, 0x35	; 53
      d2:	11 44       	sbci	r17, 0x41	; 65
      d4:	11 44       	sbci	r17, 0x41	; 65
      d6:	38 44       	sbci	r19, 0x48	; 72
      d8:	38 44       	sbci	r19, 0x48	; 72
      da:	38 44       	sbci	r19, 0x48	; 72
      dc:	38 44       	sbci	r19, 0x48	; 72
      de:	38 44       	sbci	r19, 0x48	; 72
      e0:	38 44       	sbci	r19, 0x48	; 72
      e2:	38 44       	sbci	r19, 0x48	; 72
      e4:	38 44       	sbci	r19, 0x48	; 72
      e6:	e5 42       	sbci	r30, 0x25	; 37
      e8:	df 42       	sbci	r29, 0x2F	; 47
      ea:	38 44       	sbci	r19, 0x48	; 72
      ec:	38 44       	sbci	r19, 0x48	; 72
      ee:	2e 44       	sbci	r18, 0x4E	; 78
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	0f 43       	sbci	r16, 0x3F	; 63
      f4:	38 44       	sbci	r19, 0x48	; 72
      f6:	38 44       	sbci	r19, 0x48	; 72
      f8:	e5 42       	sbci	r30, 0x25	; 37
      fa:	5a 44       	sbci	r21, 0x4A	; 74
      fc:	41 45       	sbci	r20, 0x51	; 81
      fe:	50 44       	sbci	r21, 0x40	; 64
     100:	ae 44       	sbci	r26, 0x4E	; 78
     102:	95 44       	sbci	r25, 0x45	; 69
     104:	41 45       	sbci	r20, 0x51	; 81
     106:	41 45       	sbci	r20, 0x51	; 81
     108:	41 45       	sbci	r20, 0x51	; 81
     10a:	41 45       	sbci	r20, 0x51	; 81
     10c:	41 45       	sbci	r20, 0x51	; 81
     10e:	41 45       	sbci	r20, 0x51	; 81
     110:	41 45       	sbci	r20, 0x51	; 81
     112:	41 45       	sbci	r20, 0x51	; 81
     114:	64 44       	sbci	r22, 0x44	; 68
     116:	78 44       	sbci	r23, 0x48	; 72
     118:	41 45       	sbci	r20, 0x51	; 81
     11a:	41 45       	sbci	r20, 0x51	; 81
     11c:	41 45       	sbci	r20, 0x51	; 81
     11e:	41 45       	sbci	r20, 0x51	; 81
     120:	4c 44       	sbci	r20, 0x4C	; 76
     122:	41 45       	sbci	r20, 0x51	; 81
     124:	41 45       	sbci	r20, 0x51	; 81
     126:	78 44       	sbci	r23, 0x48	; 72
     128:	41 45       	sbci	r20, 0x51	; 81
     12a:	41 45       	sbci	r20, 0x51	; 81
     12c:	41 45       	sbci	r20, 0x51	; 81
     12e:	41 45       	sbci	r20, 0x51	; 81
     130:	41 45       	sbci	r20, 0x51	; 81
     132:	41 45       	sbci	r20, 0x51	; 81
     134:	41 45       	sbci	r20, 0x51	; 81
     136:	41 45       	sbci	r20, 0x51	; 81
     138:	41 45       	sbci	r20, 0x51	; 81
     13a:	5a 44       	sbci	r21, 0x4A	; 74
     13c:	dc 44       	sbci	r29, 0x4C	; 76
     13e:	50 44       	sbci	r21, 0x40	; 64
     140:	ae 44       	sbci	r26, 0x4E	; 78
     142:	95 44       	sbci	r25, 0x45	; 69
     144:	41 45       	sbci	r20, 0x51	; 81
     146:	41 45       	sbci	r20, 0x51	; 81
     148:	41 45       	sbci	r20, 0x51	; 81
     14a:	41 45       	sbci	r20, 0x51	; 81
     14c:	41 45       	sbci	r20, 0x51	; 81
     14e:	41 45       	sbci	r20, 0x51	; 81
     150:	41 45       	sbci	r20, 0x51	; 81
     152:	41 45       	sbci	r20, 0x51	; 81
     154:	64 44       	sbci	r22, 0x44	; 68
     156:	78 44       	sbci	r23, 0x48	; 72
     158:	41 45       	sbci	r20, 0x51	; 81
     15a:	41 45       	sbci	r20, 0x51	; 81
     15c:	dc 44       	sbci	r29, 0x4C	; 76
     15e:	41 45       	sbci	r20, 0x51	; 81
     160:	4c 44       	sbci	r20, 0x4C	; 76
     162:	41 45       	sbci	r20, 0x51	; 81
     164:	41 45       	sbci	r20, 0x51	; 81
     166:	78 44       	sbci	r23, 0x48	; 72
     168:	58 69       	ori	r21, 0x98	; 152
     16a:	62 69       	ori	r22, 0x92	; 146
     16c:	6a 69       	ori	r22, 0x9A	; 154
     16e:	6d 69       	ori	r22, 0x9D	; 157
     170:	70 69       	ori	r23, 0x90	; 144
     172:	73 69       	ori	r23, 0x93	; 147
     174:	76 69       	ori	r23, 0x96	; 150
     176:	79 69       	ori	r23, 0x99	; 153
     178:	7c 69       	ori	r23, 0x9C	; 156
     17a:	1a 87       	std	Y+10, r17	; 0x0a
     17c:	43 87       	std	Z+11, r20	; 0x0b
     17e:	6a 87       	std	Y+10, r22	; 0x0a
     180:	84 87       	std	Z+12, r24	; 0x0c
     182:	8d 87       	std	Y+13, r24	; 0x0d
     184:	af 87       	std	Y+15, r26	; 0x0f
     186:	ca 87       	std	Y+10, r28	; 0x0a
     188:	d9 87       	std	Y+9, r29	; 0x09
     18a:	21 88       	ldd	r2, Z+17	; 0x11
     18c:	f5 87       	std	Z+13, r31	; 0x0d
     18e:	0a 8a       	std	Y+18, r0	; 0x12
     190:	12 8a       	std	Z+18, r1	; 0x12
     192:	17 8a       	std	Z+23, r1	; 0x17
     194:	3b 8a       	std	Y+19, r3	; 0x13
     196:	45 8a       	std	Z+21, r4	; 0x15
     198:	8f 8a       	std	Y+23, r8	; 0x17
     19a:	5a 8a       	std	Y+18, r5	; 0x12
     19c:	5a 8a       	std	Y+18, r5	; 0x12
     19e:	52 8a       	std	Z+18, r5	; 0x12
     1a0:	b0 9b       	sbis	0x16, 0	; 22
     1a2:	82 9c       	mul	r8, r2
     1a4:	be 9c       	mul	r11, r14
     1a6:	ed 9c       	mul	r14, r13
     1a8:	fd 9c       	mul	r15, r13
     1aa:	1a 9d       	mul	r17, r10
     1ac:	7a 9d       	mul	r23, r10
     1ae:	89 9e       	mul	r8, r25
     1b0:	89 9e       	mul	r8, r25
     1b2:	89 9e       	mul	r8, r25
     1b4:	ae 9d       	mul	r26, r14
     1b6:	da 9d       	mul	r29, r10
     1b8:	28 9e       	mul	r2, r24
     1ba:	44 9e       	mul	r4, r20
     1bc:	4d 9c       	mul	r4, r13
     1be:	60 9c       	mul	r6, r0
     1c0:	40 ba       	out	0x10, r4	; 16
     1c2:	ff b9       	out	0x0f, r31	; 15
     1c4:	ff b9       	out	0x0f, r31	; 15
     1c6:	ff b9       	out	0x0f, r31	; 15
     1c8:	ff b9       	out	0x0f, r31	; 15
     1ca:	c3 b9       	out	0x03, r28	; 3
     1cc:	ca b9       	out	0x0a, r28	; 10
     1ce:	d1 b9       	out	0x01, r29	; 1
     1d0:	e1 b9       	out	0x01, r30	; 1
     1d2:	ef b9       	out	0x0f, r30	; 15
     1d4:	e8 b9       	out	0x08, r30	; 8

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3743>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3738>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3769>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3760>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3754>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3739>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3737>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3735>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3733>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3731>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3729>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3727>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3725>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3723>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3747>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3740>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3733>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3725>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3723>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3750>:
     4bf:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4cf:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4df:	74 20 25 64 0a 00                                   t %d..

000004e5 <__c.3707>:
     4e5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000505 <__c.3786>:
     505:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000515 <__c.3784>:
     515:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000526 <__c.3782>:
     526:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     536:	66 61 69 6c 65 64 0a 00                             failed..

0000053e <__c.3780>:
     53e:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

0000054a <__c.3778>:
     54a:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     55a:	64 0a 00                                            d..

0000055d <__c.3776>:
     55d:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     56d:	65 64 0a 00                                         ed..

00000571 <__c.3756>:
     571:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000057c <__c.3754>:
     57c:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

0000058a <__c.3740>:
     58a:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

00000594 <__c.3720>:
     594:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5a4:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005b1 <__c.3995>:
     5b1:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005c2 <__c.3993>:
     5c2:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5d2:	0a 00                                               ..

000005d4 <__c.3991>:
     5d4:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

000005e5 <__c.3989>:
     5e5:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

000005f6 <__c.3987>:
     5f6:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     606:	0a 00                                               ..

00000608 <__c.3980>:
     608:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     618:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     628:	6d 65 0a 00                                         me..

0000062c <__c.3978>:
     62c:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     63c:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000646 <__c.3976>:
     646:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     656:	61 69 6c 65 64 0a 00                                ailed..

0000065d <__c.3974>:
     65d:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     66d:	6e 69 74 0a 00                                      nit..

00000672 <__c.3972>:
     672:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     682:	0a 00                                               ..

00000684 <__c.3926>:
     684:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     694:	61 69 6c 65 64 0a 00                                ailed..

0000069b <__c.3924>:
     69b:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006ac <__c.3922>:
     6ac:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6bc:	0a 00                                               ..

000006be <__c.3920>:
     6be:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

000006cf <__c.3918>:
     6cf:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

000006e0 <__c.3916>:
     6e0:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     6f0:	0a 00                                               ..

000006f2 <__c.3895>:
     6f2:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     702:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000713 <__c.3770>:
     713:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     723:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000730 <__c.3738>:
     730:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000740 <__c.3771>:
     740:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000074e <__c.3769>:
     74e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     75e:	25 6c 64 0a 00                                      %ld..

00000763 <__c.3767>:
     763:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     773:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000781 <__c.3764>:
     781:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000792 <__c.3762>:
     792:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000079e <__c.3760>:
     79e:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7ae:	64 0a 00                                            d..

000007b1 <__c.3758>:
     7b1:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7c1:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

000007d1 <__c.3756>:
     7d1:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

000007e1 <__c.3743>:
     7e1:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

000007ee <__c.3715>:
     7ee:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     7fe:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

0000080a <__c.3787>:
     80a:	0a 00                                               ..

0000080c <__c.3785>:
     80c:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     81c:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     82c:	73 00                                               s.

0000082e <__c.3783>:
     82e:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     83e:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000849 <__c.3777>:
     849:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     859:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     869:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     879:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     889:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

00000896 <__c.3775>:
     896:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8a6:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     8b6:	30 34 58 0a 00                                      04X..

000008bb <__c.3773>:
     8bb:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     8cb:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000008d9 <__c.3771>:
     8d9:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     8e9:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000008f8 <__c.3769>:
     8f8:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     908:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000917 <__c.3767>:
     917:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     927:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000936 <__c.3765>:
     936:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     946:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

00000955 <__c.3763>:
     955:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     965:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000974 <__c.3761>:
     974:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     984:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000992 <__c.3759>:
     992:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9a2:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009b0 <__c.3757>:
     9b0:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     9c0:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cf <__c.3755>:
     9cf:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     9df:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000009ed <__c.3753>:
     9ed:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

000009fe <__c.3717>:
     9fe:	72 63 3d 25 75 0a 00                                rc=%u..

00000a05 <__c.3755>:
     a05:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a15:	72 65 65 0a 00                                      ree..

00000a1a <__c.3753>:
     a1a:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a2a:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a3a:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a43 <__c.3749>:
     a43:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a51 <__c.3736>:
     a51:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a61:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a71 <__c.3734>:
     a71:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000a7f <__c.3732>:
     a7f:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     a8f:	73 74 0a 00                                         st..

00000a93 <__c.3730>:
     a93:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000aa3 <__c.3728>:
     aa3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     ab3:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000ac3 <__c.3720>:
     ac3:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000ad3 <__c.3710>:
     ad3:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     ae3:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     af3:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b03:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b13:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b23:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b33:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b43:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b4f <__c.3708>:
     b4f:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b5b <__c.4040>:
     b5b:	25 73 0a 00                                         %s..

00000b5f <__c.4038>:
     b5f:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b67 <__c.3793>:
     b67:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b73 <__c.3722>:
     b73:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     b83:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b8b <__c.3715>:
     b8b:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     b9b:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000ba3 <__c.3879>:
     ba3:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bae <__c.3875>:
     bae:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     bbe:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bce:	68 0a 00                                            h..

00000bd1 <__c.3872>:
     bd1:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000be1 <__c.3867>:
     be1:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     bf1:	5b 25 73 5d 0a 00                                   [%s]..

00000bf7 <__c.3865>:
     bf7:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c05 <__c.3863>:
     c05:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c15:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c26 <__c.3850>:
     c26:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c36:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c40 <__c.3845>:
     c40:	25 73 0a 00                                         %s..

00000c44 <__c.3843>:
     c44:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c54:	0a 00                                               ..

00000c56 <__c.3831>:
     c56:	0d 00                                               ..

00000c58 <__c.3829>:
     c58:	4d 6f 72 65 2e 2e 00                                More...

00000c5f <__c.3819>:
     c5f:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c6f:	2e 0a 00                                            ...

00000c72 <__c.3815>:
     c72:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000c81 <__c.3812>:
     c81:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000c8e <__c.3810>:
     c8e:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000c9b <__c.3808>:
     c9b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cab <__c.3806>:
     cab:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cb8 <__c.3804>:
     cb8:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cc8 <__c.3802>:
     cc8:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000cd4 <__c.3791>:
     cd4:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000cdf <__c.3789>:
     cdf:	0a 00                                               ..

00000ce1 <__c.3784>:
     ce1:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cf1 <__c.3774>:
     cf1:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d02 <__c.3772>:
     d02:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d10 <__c.3770>:
     d10:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d21 <__c.3768>:
     d21:	25 73 0a 00                                         %s..

00000d25 <__c.3765>:
     d25:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d36 <__c.3757>:
     d36:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d47 <__c.3741>:
     d47:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d57:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     d67:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     d77:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     d87:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     d97:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     da7:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     db7:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     dc7:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     dd7:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     de7:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     df7:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e07:	6e 65 77 0a 0a 00                                   new...

00000e0d <__c.3739>:
     e0d:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e19 <__c.3931>:
     e19:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e27 <__c.3925>:
     e27:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e34 <__c.3918>:
     e34:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e42 <__c.3909>:
     e42:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e4f <__c.3900>:
     e4f:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e60 <__c.3886>:
     e60:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     e70:	5d 0a 00                                            ]..

00000e73 <__c.3868>:
     e73:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     e83:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000e90 <__c.4509>:
     e90:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     ea0:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     eb0:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000eb8 <__c.4504>:
     eb8:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     ec8:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000ed2 <__c.4494>:
     ed2:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     ee2:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     ef2:	28 25 64 29 5d 0a 00                                (%d)]..

00000ef9 <__c.4490>:
     ef9:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f09:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f19:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000f26 <__c.4487>:
     f26:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     f36:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000f3f <__c.4471>:
     f3f:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000f4a <__c.4469>:
     f4a:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000f55 <__c.4467>:
     f55:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000f60 <__c.4463>:
     f60:	20 20 20 20 20 00                                        .

00000f66 <__c.4461>:
     f66:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000f6f <__c.4419>:
     f6f:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
     f7f:	3e 0a 00                                            >..

00000f82 <__c.4415>:
     f82:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f92:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f9c <__c.4411>:
     f9c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fac:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00000fb7 <__c.4408>:
     fb7:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fc7:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00000fd2 <__c.4403>:
     fd2:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fe2:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
     ff2:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00000ffa <__c.4399>:
     ffa:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    100a:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001014 <__c.4382>:
    1014:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1024:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1034:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001042 <__c.4370>:
    1042:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

0000104e <__c.4356>:
    104e:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    105e:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001069 <__c.4354>:
    1069:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1079:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1089:	72 61 6e 67 65 0a 00                                range..

00001090 <__c.4349>:
    1090:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    10a0:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000010ab <__c.4347>:
    10ab:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    10bb:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    10cb:	61 6e 67 65 0a 00                                   ange..

000010d1 <__c.4342>:
    10d1:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    10e1:	5d 0a 00                                            ]..

000010e4 <__c.4337>:
    10e4:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000010f5 <__c.4513>:
    10f5:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001106 <__c.4508>:
    1106:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1116:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1126:	32 58 48 5d 0a 00                                   2XH]..

0000112c <__c.4506>:
    112c:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    113c:	0a 00                                               ..

0000113e <__c.4504>:
    113e:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000114f <__c.4499>:
    114f:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000115b <__c.4497>:
    115b:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000116b <__c.4495>:
    116b:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    117b:	52 5d 0a 00                                         R]..

0000117f <__c.4493>:
    117f:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    118f:	0a 00                                               ..

00001191 <__c.4491>:
    1191:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000011a2 <__c.4489>:
    11a2:	5b 55 4e 54 5d 0a 00                                [UNT]..

000011a9 <__c.4484>:
    11a9:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000011b5 <__c.4482>:
    11b5:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    11c5:	52 5d 0a 00                                         R]..

000011c9 <__c.4480>:
    11c9:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000011da <__c.4478>:
    11da:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    11ea:	0a 00                                               ..

000011ec <__c.4476>:
    11ec:	0a 00                                               ..

000011ee <__c.4474>:
    11ee:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000011f5 <__c.4469>:
    11f5:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1205:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001216 <__c.4467>:
    1216:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000121d <__c.4465>:
    121d:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000122a <__c.4463>:
    122a:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001236 <__c.4461>:
    1236:	5b 53 44 43 5d 0a 00                                [SDC]..

0000123d <__c.4459>:
    123d:	5b 53 50 44 5d 0a 00                                [SPD]..

00001244 <__c.4457>:
    1244:	5b 53 50 45 5d 0a 00                                [SPE]..

0000124b <__c.4455>:
    124b:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    125b:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001263 <__c.4453>:
    1263:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1273:	20 54 4f 44 4f 5d 0a 00                              TODO]..

0000127b <__c.4448>:
    127b:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    128b:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001295 <__c.4446>:
    1295:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    12a5:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000012b6 <__c.4419>:
    12b6:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000012c7 <__c.4417>:
    12c7:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000012d4 <__c.4415>:
    12d4:	3c 42 55 53 3e 0a 00                                <BUS>..

000012db <__c.4413>:
    12db:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000012e6 <__c.4411>:
    12e6:	3c 49 46 43 3e 0a 00                                <IFC>..

000012ed <__c.4406>:
    12ed:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    12fd:	0a 00                                               ..

000012ff <__c.4404>:
    12ff:	44 6f 6e 65 0a 00                                   Done..

00001305 <__c.4400>:
    1305:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001311 <__c.4398>:
    1311:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1321:	20 65 78 69 74 0a 00                                 exit..

00001328 <__c.4396>:
    1328:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1338:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1348:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001353 <__c.4394>:
    1353:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1363:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000136d <__c.4348>:
    136d:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    137d:	6f 74 65 63 74 65 64 0a 00                          otected..

00001386 <__c.4346>:
    1386:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001397 <__c.4344>:
    1397:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    13a7:	0a 00                                               ..

000013a9 <__c.4539>:
    13a9:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000013b6 <__c.4531>:
    13b6:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    13c6:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    13d6:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    13e6:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    13f6:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1406:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1416:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1426:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1436:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1446:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1456:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    1466:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    1476:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1486:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1496:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    14a6:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    14b6:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    14c6:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    14d6:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    14e6:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    14f6:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1506:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1516:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1526:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1536:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1546:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1556:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    1566:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    1576:	74 61 74 65 73 0a 0a 0a 00                          tates....

0000157f <__c.4529>:
    157f:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000158a <__c.4919>:
    158a:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001592 <__c.4917>:
    1592:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    15a2:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000015ac <__c.4915>:
    15ac:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    15bc:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15cc:	0a 00                                               ..

000015ce <__c.4913>:
    15ce:	53 53 38 30 2d 25 64 00                             SS80-%d.

000015d6 <__c.4911>:
    15d6:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    15e6:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000015f0 <__c.4909>:
    15f0:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1600:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1610:	0a 00                                               ..

00001612 <__c.4892>:
    1612:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1622:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1632:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1642:	6f 20 32 35 36 0a 00                                o 256..

00001649 <__c.4890>:
    1649:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1659:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1669:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1679:	20 32 35 36 0a 00                                    256..

0000167f <__c.4877>:
    167f:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    168f:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000169e <__c.4841>:
    169e:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    16ae:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    16be:	0a 00                                               ..

000016c0 <__c.4833>:
    16c0:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    16d0:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    16e0:	6c 6c 0a 00                                         ll..

000016e4 <__c.4820>:
    16e4:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    16f4:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1704:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000170f <__c.4818>:
    170f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    171f:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    172f:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    173f:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001747 <__c.4816>:
    1747:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1757:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1767:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1777:	3a 25 73 0a 00                                      :%s..

0000177c <__c.4814>:
    177c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    178c:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    179c:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    17ac:	55 4c 4c 0a 00                                      ULL..

000017b1 <__c.4812>:
    17b1:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17c1:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    17d1:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    17e1:	66 20 72 61 6e 67 65 0a 00                          f range..

000017ea <__c.4810>:
    17ea:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17fa:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    180a:	6e 67 65 0a 00                                      nge..

0000180f <__c.4771>:
    180f:	0a 00                                               ..

00001811 <__c.4766>:
    1811:	0a 00                                               ..

00001813 <__c.4764>:
    1813:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1823:	6c 64 0a 00                                         ld..

00001827 <__c.4762>:
    1827:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1837:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001846 <__c.4760>:
    1846:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001850 <__c.4758>:
    1850:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1860:	6c 64 0a 00                                         ld..

00001864 <__c.4756>:
    1864:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1874:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001883 <__c.4754>:
    1883:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000188c <__c.4751>:
    188c:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    189c:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

000018ac <__c.4742>:
    18ac:	0a 00                                               ..

000018ae <__c.4737>:
    18ae:	0a 00                                               ..

000018b0 <__c.4735>:
    18b0:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000018b9 <__c.4733>:
    18b9:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000018c3 <__c.4731>:
    18c3:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

000018cc <__c.4728>:
    18cc:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    18dc:	0a 00                                               ..

000018de <__c.4722>:
    18de:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    18ee:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    18fe:	2a 2a 2a 2a 2a 0a 00                                *****..

00001905 <__c.4720>:
    1905:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1915:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001922 <__c.4718>:
    1922:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1932:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1942:	0a 00                                               ..

00001944 <__c.4714>:
    1944:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1954:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1964:	0a 00                                               ..

00001966 <__c.4711>:
    1966:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1976:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1986:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001996 <__c.4702>:
    1996:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    19a6:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    19b6:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

000019c5 <__c.4699>:
    19c5:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    19d5:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    19e5:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

000019f5 <__c.4690>:
    19f5:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a05:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1a15:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a23 <__c.4682>:
    1a23:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a33:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1a43:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a51 <__c.4672>:
    1a51:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a61:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1a71:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001a7d <__c.4655>:
    1a7d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a8d:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1a9d:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1aad:	0a 00                                               ..

00001aaf <__c.4647>:
    1aaf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1abf:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1acf:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001add <__c.4644>:
    1add:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1aed:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1afd:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b0b <__c.4636>:
    1b0b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b1b:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1b2b:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001b38 <__c.4626>:
    1b38:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1b48:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1b58:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001b69 <__c.4623>:
    1b69:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1b79:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1b89:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001b93 <__c.4619>:
    1b93:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1ba3:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1bb3:	0a 00                                               ..

00001bb5 <__c.4608>:
    1bb5:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1bc5:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1bd5:	0a 00                                               ..

00001bd7 <__c.4605>:
    1bd7:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1be7:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001bf5 <__c.4603>:
    1bf5:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001c02 <__c.4584>:
    1c02:	25 73 0a 00                                         %s..

00001c06 <__c.4574>:
    1c06:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001c12 <__c.4563>:
    1c12:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1c22:	6c 64 29 0a 00                                      ld)..

00001c27 <__c.3764>:
    1c27:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001c38 <__c.3762>:
    1c38:	25 73 20 25 73 0a 00                                %s %s..

00001c3f <__c.3758>:
    1c3f:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1c4f:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001c5c <__c.4656>:
    1c5c:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1c6c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1c7c:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1c8c:	48 5d 0a 00                                         H]..

00001c90 <__c.4654>:
    1c90:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1ca0:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1cb0:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1cc0:	48 5d 0a 00                                         H]..

00001cc4 <__c.4652>:
    1cc4:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1cd4:	74 5d 0a 00                                         t]..

00001cd8 <__c.4650>:
    1cd8:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001ce7 <__c.4648>:
    1ce7:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1cf7:	74 65 5d 0a 00                                      te]..

00001cfc <__c.4646>:
    1cfc:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1d0c:	61 74 65 5d 0a 00                                   ate]..

00001d12 <__c.4644>:
    1d12:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d22:	61 74 65 5d 0a 00                                   ate]..

00001d28 <__c.4639>:
    1d28:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1d38:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1d48:	5d 0a 00                                            ]..

00001d4b <__c.4625>:
    1d4b:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001d5a <__c.4623>:
    1d5a:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1d6a:	5d 0a 00                                            ]..

00001d6d <__c.4616>:
    1d6d:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001d79 <__c.4602>:
    1d79:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1d89:	5d 0a 00                                            ]..

00001d8c <__c.4600>:
    1d8c:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1d9c:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001da6 <__c.4593>:
    1da6:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1db6:	48 5d 0a 00                                         H]..

00001dba <__c.4591>:
    1dba:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1dca:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001dda <__c.4586>:
    1dda:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1dea:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1dfa:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1e0a:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001e16 <__c.4583>:
    1e16:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1e26:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001e36 <__c.4581>:
    1e36:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1e46:	29 5d 0a 00                                         )]..

00001e4a <__c.4579>:
    1e4a:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1e5a:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1e6a:	28 25 64 29 5d 0a 00                                (%d)]..

00001e71 <__c.4577>:
    1e71:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1e81:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001e8f <__c.4575>:
    1e8f:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1e9f:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001eac <__c.4572>:
    1eac:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1ebc:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1ecc:	44 4f 5d 0a 00                                      DO]..

00001ed1 <__c.4569>:
    1ed1:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1ee1:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001eea <__c.4567>:
    1eea:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1efa:	5d 0a 00                                            ]..

00001efd <__c.4558>:
    1efd:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1f0d:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1f1d:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1f2d:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001f35 <__c.4555>:
    1f35:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1f45:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001f55 <__c.4553>:
    1f55:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    1f65:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    1f75:	5d 0a 00                                            ]..

00001f78 <__c.4551>:
    1f78:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1f88:	61 74 75 73 5d 0a 00                                atus]..

00001f8f <__c.4549>:
    1f8f:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1f9f:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001fa8 <__c.4547>:
    1fa8:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1fb8:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001fc3 <__c.4545>:
    1fc3:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1fd3:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001fe2 <__c.4543>:
    1fe2:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1ff2:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002000 <__c.4541>:
    2000:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002011 <__c.4539>:
    2011:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2021:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

0000202d <__c.4537>:
    202d:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    203d:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000204a <__c.4535>:
    204a:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    205a:	2d 4f 50 5d 0a 00                                   -OP]..

00002060 <__c.4533>:
    2060:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2070:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002081 <__c.4531>:
    2081:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2091:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    20a1:	44 4f 5d 0a 00                                      DO]..

000020a6 <__c.4529>:
    20a6:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    20b6:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000020c0 <__c.4527>:
    20c0:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    20d0:	2d 4f 50 5d 0a 00                                   -OP]..

000020d6 <__c.4525>:
    20d6:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000020e4 <__c.4523>:
    20e4:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    20f4:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002100 <__c.4521>:
    2100:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2110:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000211d <__c.4519>:
    211d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    212d:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002136 <__c.4516>:
    2136:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2146:	20 52 65 61 64 5d 0a 00                              Read]..

0000214e <__c.4514>:
    214e:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    215e:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002167 <__c.4511>:
    2167:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2177:	25 64 29 5d 0a 00                                   %d)]..

0000217d <__c.4509>:
    217d:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    218d:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002196 <__c.4507>:
    2196:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    21a6:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    21b6:	52 4f 52 5d 0a 00                                   ROR]..

000021bc <__c.4498>:
    21bc:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    21cc:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000021d6 <__c.4493>:
    21d6:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    21e6:	76 61 6c 69 64 5d 0a 00                             valid]..

000021ee <__c.4488>:
    21ee:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    21fe:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000220d <__c.4486>:
    220d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    221d:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

0000222a <__c.4484>:
    222a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    223a:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    224a:	5d 0a 00                                            ]..

0000224d <__c.4482>:
    224d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000225e <__c.4474>:
    225e:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    226e:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002279 <__c.4472>:
    2279:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2289:	73 5d 0a 00                                         s]..

0000228d <__c.4462>:
    228d:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002298 <__c.4460>:
    2298:	25 73 3a 0a 00                                      %s:..

0000229d <__c.4435>:
    229d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22ad:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    22bd:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000022c8 <__c.4433>:
    22c8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22d8:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    22e8:	49 4e 49 53 48 5d 0a 00                             INISH]..

000022f0 <__c.4429>:
    22f0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2300:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2310:	58 48 29 5d 0a 00                                   XH)]..

00002316 <__c.4427>:
    2316:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2326:	72 5d 0a 00                                         r]..

0000232a <__c.4423>:
    232a:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    233a:	5d 0a 00                                            ]..

0000233d <__c.4421>:
    233d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    234d:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    235d:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002366 <__c.4409>:
    2366:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2376:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2386:	62 79 74 65 73 5d 0a 00                             bytes]..

0000238e <__c.4407>:
    238e:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    239e:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    23ae:	53 48 5d 0a 00                                      SH]..

000023b3 <__c.4402>:
    23b3:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    23c3:	20 45 72 72 6f 72 5d 0a 00                           Error]..

000023cc <__c.4400>:
    23cc:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    23dc:	45 72 72 6f 72 5d 0a 00                             Error]..

000023e4 <__c.4398>:
    23e4:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    23f4:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002402 <__c.4396>:
    2402:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2412:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2422:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

0000242a <__c.4379>:
    242a:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    243a:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002446 <__c.4363>:
    2446:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2456:	5d 0a 00                                            ]..

00002459 <__c.4470>:
    2459:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2469:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2479:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002482 <__c.4467>:
    2482:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2492:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    24a2:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000024ad <__c.4464>:
    24ad:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    24bd:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    24cd:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000024d6 <__c.4459>:
    24d6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    24e6:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000024f6 <__c.4456>:
    24f6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2506:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002512 <__c.4453>:
    2512:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2522:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2532:	0a 00                                               ..

00002534 <__c.4450>:
    2534:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2544:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002553 <__c.4447>:
    2553:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2563:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002574 <__c.4444>:
    2574:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2584:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002594 <__c.4440>:
    2594:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    25a4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    25b4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    25c4:	0a 00                                               ..

000025c6 <__c.4435>:
    25c6:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000025d6 <__c.4432>:
    25d6:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    25e6:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000025f5 <__c.4430>:
    25f5:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2605:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2615:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002620 <__c.4428>:
    2620:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2630:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002640 <__c.4426>:
    2640:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2650:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2660:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002669 <__c.4424>:
    2669:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2679:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002685 <__c.4422>:
    2685:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2695:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    26a5:	0a 00                                               ..

000026a7 <__c.4420>:
    26a7:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000026b7 <__c.4417>:
    26b7:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    26c7:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000026d8 <__c.4415>:
    26d8:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    26e8:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    26f8:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002701 <__c.4413>:
    2701:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2711:	36 5d 0a 00                                         6]..

00002715 <__c.4410>:
    2715:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2725:	35 5d 0a 00                                         5]..

00002729 <__c.4407>:
    2729:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2739:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002749 <__c.4404>:
    2749:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2759:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2769:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002778 <__c.4402>:
    2778:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2788:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002799 <__c.4400>:
    2799:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    27a9:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000027ba <__c.4398>:
    27ba:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    27ca:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    27da:	0a 00                                               ..

000027dc <__c.4396>:
    27dc:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    27ec:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    27fc:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    280c:	0a 00                                               ..

0000280e <__c.4384>:
    280e:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    281e:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    282e:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    283e:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    284e:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

0000285f <__c.4382>:
    285f:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    286f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    287f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    288f:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    289f:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000028af <__c.4380>:
    28af:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    28bf:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    28cf:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    28df:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    28ef:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000028ff <__c.4378>:
    28ff:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    290f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    291f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    292f:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    293f:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

0000294f <__c.4373>:
    294f:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    295f:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    296f:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    297f:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    298f:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    299f:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    29af:	58 48 5d 0a 00                                      XH]..

000029b4 <__c.4371>:
    29b4:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29c4:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29d4:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    29e4:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    29f4:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2a04:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2a14:	30 32 58 48 5d 0a 00                                02XH]..

00002a1b <__c.4369>:
    2a1b:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a2b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a3b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2a4b:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2a5b:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2a6b:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2a7b:	30 32 58 48 5d 0a 00                                02XH]..

00002a82 <__c.4367>:
    2a82:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a92:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2aa2:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ab2:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ac2:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ad2:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ae2:	30 32 58 48 5d 0a 00                                02XH]..

00002ae9 <__c.4360>:
    2ae9:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002af8 <__c.4347>:
    2af8:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002b05 <__c.4345>:
    2b05:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2b15:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002b1f <__c.4338>:
    2b1f:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2b2f:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002b3e <__c.4331>:
    2b3e:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2b4e:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002b58 <__c.4324>:
    2b58:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2b68:	6e 65 5d 0a 00                                      ne]..

00002b6d <__c.4320>:
    2b6d:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002b7d <__c.4279>:
    2b7d:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2b8d:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2b9d:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002ba8 <__c.4309>:
    2ba8:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2bb8:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2bc8:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002bd0 <__c.4286>:
    2bd0:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2be0:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002be9 <__c.4272>:
    2be9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2bf9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002c03 <__c.4270>:
    2c03:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2c13:	75 73 5d 0a 00                                      us]..

00002c18 <__c.4264>:
    2c18:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2c28:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002c32 <__c.4262>:
    2c32:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2c42:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002c50 <__c.4256>:
    2c50:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2c60:	74 61 74 75 73 5d 0a 00                             tatus]..

00002c68 <__c.4260>:
    2c68:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2c78:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002c82 <__c.4258>:
    2c82:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2c92:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002c9e <__c.4253>:
    2c9e:	25 30 38 6c 64 0d 00                                %08ld..

00002ca5 <__c.4247>:
    2ca5:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2cb5:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002cc6 <__c.4241>:
    2cc6:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002cd4 <__c.4239>:
    2cd4:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2ce4:	69 74 65 0a 00                                      ite..

00002ce9 <__c.4233>:
    2ce9:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002cf5 <__c.4231>:
    2cf5:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2d05:	6f 3a 25 73 0a 00                                   o:%s..

00002d0b <__c.4229>:
    2d0b:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2d1b:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2d2b:	74 00                                               t.

00002d2d <__c.4674>:
    2d2d:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2d3d:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002d4d <__c.4672>:
    2d4d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2d5d:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002d6d <__c.4670>:
    2d6d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2d7d:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2d8d:	30 0a 00                                            0..

00002d90 <__c.4668>:
    2d90:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2da0:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2db0:	70 74 79 0a 00                                      pty..

00002db5 <__c.4666>:
    2db5:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2dc5:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2dd5:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002dde <__c.4653>:
    2dde:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2dee:	20 25 31 30 73 0a 00                                 %10s..

00002df5 <__c.4651>:
    2df5:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2e05:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2e15:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002e1e <__c.4649>:
    2e1e:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2e2e:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2e3e:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    2e4e:	74 65 72 73 0a 00                                   ters..

00002e54 <__c.4647>:
    2e54:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2e64:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    2e74:	65 6d 70 74 79 0a 00                                empty..

00002e7b <__c.4645>:
    2e7b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2e8b:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    2e9b:	65 6d 70 74 79 0a 00                                empty..

00002ea2 <__c.4643>:
    2ea2:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2eb2:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    2ec2:	20 65 6d 70 74 79 0a 00                              empty..

00002eca <__c.4634>:
    2eca:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00002ed9 <__c.4632>:
    2ed9:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    2ee9:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    2ef9:	20 66 6f 75 6e 64 0a 00                              found..

00002f01 <__c.4630>:
    2f01:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2f11:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00002f20 <__c.4628>:
    2f20:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    2f30:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00002f40 <__c.4626>:
    2f40:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    2f50:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    2f60:	70 74 79 0a 00                                      pty..

00002f65 <__c.4618>:
    2f65:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00002f73 <__c.4613>:
    2f73:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00002f81 <__c.4611>:
    2f81:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2f91:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    2fa1:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00002fb1 <__c.4609>:
    2fb1:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    2fc1:	73 0a 00                                            s..

00002fc4 <__c.4607>:
    2fc4:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2fd4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    2fe4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00002ff3 <__c.4605>:
    2ff3:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3003:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000300f <__c.4603>:
    300f:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    301f:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

0000302a <__c.4601>:
    302a:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    303a:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000304a <__c.4584>:
    304a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003058 <__c.4579>:
    3058:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003066 <__c.4577>:
    3066:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3076:	73 0a 00                                            s..

00003079 <__c.4575>:
    3079:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3089:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003091 <__c.4558>:
    3091:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000309f <__c.4555>:
    309f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    30af:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    30bf:	20 65 72 72 6f 72 0a 00                              error..

000030c7 <__c.4547>:
    30c7:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000030d5 <__c.4545>:
    30d5:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    30e5:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    30f5:	20 65 72 72 6f 72 0a 00                              error..

000030fd <__c.4542>:
    30fd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    310d:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    311d:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    312d:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    313d:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    314d:	30 32 58 48 0a 00                                   02XH..

00003153 <__c.4540>:
    3153:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3163:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3173:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3183:	20 25 64 0a 00                                       %d..

00003188 <__c.4536>:
    3188:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003198 <__c.4534>:
    3198:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    31a8:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    31b8:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    31c8:	30 78 45 30 31 33 0a 00                             0xE013..

000031d0 <__c.4532>:
    31d0:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    31e0:	6e 64 3a 25 73 0a 00                                nd:%s..

000031e7 <__c.4530>:
    31e7:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    31f7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000031ff <__c.4506>:
    31ff:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000320d <__c.4504>:
    320d:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    321d:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003226 <__c.4502>:
    3226:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3236:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000323f <__c.4500>:
    323f:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    324f:	20 20 25 34 64 0a 00                                  %4d..

00003256 <__c.4498>:
    3256:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3266:	20 20 20 25 73 0a 00                                   %s..

0000326d <__c.4496>:
    326d:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    327d:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    328d:	77 72 69 74 65 0a 00                                write..

00003294 <__c.4494>:
    3294:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32a4:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    32b4:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000032c4 <__c.4492>:
    32c4:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32d4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    32e4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000032f3 <__c.4490>:
    32f3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3303:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3313:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003323 <__c.4488>:
    3323:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3333:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3343:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003352 <__c.4486>:
    3352:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3362:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3372:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003380 <__c.4484>:
    3380:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3390:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    33a0:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    33b0:	79 0a 00                                            y..

000033b3 <__c.4470>:
    33b3:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000033c1 <__c.4468>:
    33c1:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000033cf <__c.4463>:
    33cf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000033dd <__c.4446>:
    33dd:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    33ed:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    33fd:	25 64 0a 00                                         %d..

00003401 <__c.4429>:
    3401:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3411:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3421:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3431:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000343a <__c.4415>:
    343a:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    344a:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    345a:	62 69 67 0a 00                                      big..

0000345f <__c.4413>:
    345f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    346f:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    347f:	63 74 65 72 73 0a 00                                cters..

00003486 <__c.4406>:
    3486:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3496:	73 0a 00                                            s..

00003499 <__c.4404>:
    3499:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    34a9:	73 0a 00                                            s..

000034ac <__c.4402>:
    34ac:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    34bc:	73 0a 00                                            s..

000034bf <__c.4400>:
    34bf:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000034d0 <__c.4398>:
    34d0:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000034dd <__c.4396>:
    34dd:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000034e9 <__c.4394>:
    34e9:	0a 00                                               ..

000034eb <__c.4391>:
    34eb:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    34fb:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    350b:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

0000351b <__c.4389>:
    351b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    352b:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    353b:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    354b:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    355b:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003567 <__c.4386>:
    3567:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3577:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3587:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3597:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

000035a7 <__c.4384>:
    35a7:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    35b7:	3a 5b 25 73 5d 0a 00                                :[%s]..

000035be <__c.4374>:
    35be:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    35ce:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    35de:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    35ee:	64 0a 00                                            d..

000035f1 <__c.4372>:
    35f1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3601:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3611:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3621:	64 0a 00                                            d..

00003624 <__c.4370>:
    3624:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3634:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3644:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3654:	69 6c 65 64 0a 00                                   iled..

0000365a <__c.4368>:
    365a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    366a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    367a:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    368a:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003699 <__c.4355>:
    3699:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    36a9:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    36b9:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    36c9:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    36d9:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000036ea <__c.4352>:
    36ea:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    36fa:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    370a:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003713 <__c.4350>:
    3713:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3723:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3733:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3743:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000374b <__c.4338>:
    374b:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    375b:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    376b:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    377b:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    378b:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003798 <__c.4313>:
    3798:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    37a8:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

000037b8 <__c.4304>:
    37b8:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    37c8:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    37d8:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    37e8:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000037f2 <__c.4285>:
    37f2:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000037ff <__c.4280>:
    37ff:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000380c <__c.4275>:
    380c:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003819 <__c.4267>:
    3819:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003826 <__c.4265>:
    3826:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3836:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3846:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3856:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3866:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3876:	25 6c 64 0a 00                                      %ld..

0000387b <__c.4249>:
    387b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    388b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    389b:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

000038a7 <__c.4247>:
    38a7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38b7:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    38c7:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

000038d2 <__c.4245>:
    38d2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38e2:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    38f2:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3902:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3912:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

0000391d <__c.4243>:
    391d:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    392d:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    393d:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    394d:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    395d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003968 <__c.4241>:
    3968:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3978:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3988:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003996 <__c.4239>:
    3996:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39a6:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    39b6:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    39c6:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

000039d7 <__c.4237>:
    39d7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39e7:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    39f7:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3a07:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3a17:	58 68 0a 00                                         Xh..

00003a1b <__c.4235>:
    3a1b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a2b:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003a3c <__c.4229>:
    3a3c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3a4c:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3a5c:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003a68 <__c.4227>:
    3a68:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3a78:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3a88:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003a97 <__c.4225>:
    3a97:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3aa7:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3ab7:	25 6c 64 0a 00                                      %ld..

00003abc <__c.4223>:
    3abc:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3acc:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3adc:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3aec:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003af5 <__c.4221>:
    3af5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b05:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3b15:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3b25:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003b2e <__c.4219>:
    3b2e:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3b3e:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003b46 <__c.4217>:
    3b46:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b56:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3b66:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3b76:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003b7f <__c.4215>:
    3b7f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b8f:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003b9e <__c.4208>:
    3b9e:	0a 00                                               ..

00003ba0 <__c.4206>:
    3ba0:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3bb0:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003bba <__c.4204>:
    3bba:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3bca:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003bd6 <__c.4202>:
    3bd6:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3be6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003bf3 <__c.4200>:
    3bf3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3c03:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003c10 <__c.4198>:
    3c10:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3c20:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003c2d <__c.4196>:
    3c2d:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3c3d:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003c49 <__c.4194>:
    3c49:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3c59:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003c65 <__c.4192>:
    3c65:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3c75:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003c7f <__c.4190>:
    3c7f:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3c8f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003c99 <__c.4188>:
    3c99:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3ca9:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003cb5 <__c.4186>:
    3cb5:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3cc5:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003cd1 <__c.4184>:
    3cd1:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3ce1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003cee <__c.4182>:
    3cee:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3cfe:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d0b <__c.4180>:
    3d0b:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3d1b:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003d27 <__c.4178>:
    3d27:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3d37:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d41 <__c.4176>:
    3d41:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3d51:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d5e <__c.4174>:
    3d5e:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3d6e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d7b <__c.4172>:
    3d7b:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3d8b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d98 <__c.4170>:
    3d98:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3da8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003db5 <__c.4168>:
    3db5:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3dc5:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003dd2 <__c.4166>:
    3dd2:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3de2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003def <__c.4164>:
    3def:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3dff:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e0c <__c.4162>:
    3e0c:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3e1c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e29 <__c.4160>:
    3e29:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3e39:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e43 <__c.4158>:
    3e43:	0a 25 73 0a 00                                      .%s..

00003e48 <__c.4035>:
    3e48:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    3e58:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    3e68:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    3e78:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00003e85 <__c.4026>:
    3e85:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    3e95:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    3ea5:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    3eb5:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00003ec1 <__c.4017>:
    3ec1:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    3ed1:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00003ee2 <__c.4010>:
    3ee2:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    3ef2:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00003efb <__c.4004>:
    3efb:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    3f0b:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    3f1b:	25 73 5d 0a 00                                      %s]..

00003f20 <__c.3992>:
    3f20:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    3f30:	6f 69 6e 74 65 72 0a 00                             ointer..

00003f38 <__c.3987>:
    3f38:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    3f48:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    3f58:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00003f61 <__c.3981>:
    3f61:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    3f71:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00003f82 <__c.3968>:
    3f82:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    3f92:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    3fa2:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    3fb2:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    3fc2:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    3fd2:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    3fe2:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    3ff2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4002:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4012:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4022:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4032:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4042:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4052:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4062:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4072:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4082:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4092:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    40a2:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    40b2:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    40c2:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    40d2:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    40e2:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    40f2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4102:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    4112:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    4122:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    4132:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    4142:	75 67 67 69 6e 67 0a 0a 00                          ugging...

0000414b <__c.3966>:
    414b:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004155 <__c.4654>:
    4155:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4165:	53 4b 0a 00                                         SK..

00004169 <__c.4652>:
    4169:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4179:	30 34 78 48 0a 00                                   04xH..

0000417f <__c.4650>:
    417f:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    418f:	64 6f 6e 65 0a 00                                   done..

00004195 <__c.4648>:
    4195:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    41a5:	6f 6e 65 0a 00                                      one..

000041aa <__c.4646>:
    41aa:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    41ba:	61 6c 69 7a 65 64 0a 00                             alized..

000041c2 <__c.4644>:
    41c2:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    41d2:	0a 00                                               ..

000041d4 <__c.4642>:
    41d4:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    41e4:	7a 65 64 0a 00                                      zed..

000041e9 <__c.4640>:
    41e9:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    41f9:	69 7a 65 64 0a 00                                   ized..

000041ff <__c.4638>:
    41ff:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004210 <__c.4636>:
    4210:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4220:	20 73 74 61 72 74 0a 00                              start..

00004228 <__c.4634>:
    4228:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4238:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004242 <__c.4632>:
    4242:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4252:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000425f <__c.4630>:
    425f:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    426f:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000427d <__c.4628>:
    427d:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    428d:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000429a <__c.4626>:
    429a:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000042a9 <__c.4624>:
    42a9:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    42b9:	0a 00                                               ..

000042bb <__c.4622>:
    42bb:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    42cb:	20 62 75 73 0a 00                                    bus..

000042d1 <__c.4620>:
    42d1:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    42e1:	20 62 75 73 0a 00                                    bus..

000042e7 <__c.4618>:
    42e7:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    42f7:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004301 <__c.4616>:
    4301:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4311:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000431b <__c.4614>:
    431b:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    432b:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    433b:	35 64 69 73 6b 0a 00                                5disk..

00004342 <__c.4612>:
    4342:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004352 <__c.4610>:
    4352:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4362:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000436f <__c.4608>:
    436f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    437f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000438e <__c.4606>:
    438e:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    439e:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    43ae:	3a 20 25 6c 64 0a 00                                : %ld..

000043b5 <__c.4604>:
    43b5:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000043c6 <__c.4602>:
    43c6:	53 74 61 72 74 0a 00                                Start..

000043cd <__c.4594>:
    43cd:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000043d9 <__c.4592>:
    43d9:	4f 4b 0a 00                                         OK..

000043dd <__c.4590>:
    43dd:	0a 3e 00                                            .>.

000043e0 <__c.4579>:
    43e0:	68 65 6c 70 0a 6d 65 6d 0a 73 65 74 64 61 74 65     help.mem.setdate
    43f0:	0a 74 69 6d 65 0a 72 65 73 65 74 0a 0a 00           .time.reset...

000043fe <__c.4572>:
    43fe:	0a 00                                               ..

00004400 <__c.4570>:
    4400:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4410:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000441a <__c.4568>:
    441a:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    442a:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004434 <__c.4566>:
    4434:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4444:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4454:	35 64 69 73 6b 0a 00                                5disk..

0000445b <__c.4564>:
    445b:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000446b <__c.4562>:
    446b:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    447b:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004488 <__c.4560>:
    4488:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4498:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000044a7 <__c.4558>:
    44a7:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    44b7:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    44c7:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000044d8 <__ctors_end>:
    44d8:	11 24       	eor	r1, r1
    44da:	1f be       	out	0x3f, r1	; 63
    44dc:	cf ef       	ldi	r28, 0xFF	; 255
    44de:	d0 e4       	ldi	r29, 0x40	; 64
    44e0:	de bf       	out	0x3e, r29	; 62
    44e2:	cd bf       	out	0x3d, r28	; 61

000044e4 <__do_copy_data>:
    44e4:	17 e1       	ldi	r17, 0x17	; 23
    44e6:	a0 e0       	ldi	r26, 0x00	; 0
    44e8:	b1 e0       	ldi	r27, 0x01	; 1
    44ea:	e4 ec       	ldi	r30, 0xC4	; 196
    44ec:	fb ec       	ldi	r31, 0xCB	; 203
    44ee:	01 e0       	ldi	r16, 0x01	; 1
    44f0:	0b bf       	out	0x3b, r16	; 59
    44f2:	02 c0       	rjmp	.+4      	; 0x44f8 <__do_copy_data+0x14>
    44f4:	07 90       	elpm	r0, Z+
    44f6:	0d 92       	st	X+, r0
    44f8:	aa 35       	cpi	r26, 0x5A	; 90
    44fa:	b1 07       	cpc	r27, r17
    44fc:	d9 f7       	brne	.-10     	; 0x44f4 <__do_copy_data+0x10>

000044fe <__do_clear_bss>:
    44fe:	21 e2       	ldi	r18, 0x21	; 33
    4500:	aa e5       	ldi	r26, 0x5A	; 90
    4502:	b7 e1       	ldi	r27, 0x17	; 23
    4504:	01 c0       	rjmp	.+2      	; 0x4508 <.do_clear_bss_start>

00004506 <.do_clear_bss_loop>:
    4506:	1d 92       	st	X+, r1

00004508 <.do_clear_bss_start>:
    4508:	a1 39       	cpi	r26, 0x91	; 145
    450a:	b2 07       	cpc	r27, r18
    450c:	e1 f7       	brne	.-8      	; 0x4506 <.do_clear_bss_loop>
    450e:	0e 94 ee dd 	call	0x1bbdc	; 0x1bbdc <main>
    4512:	0c 94 e0 e5 	jmp	0x1cbc0	; 0x1cbc0 <_exit>

00004516 <__bad_interrupt>:
    4516:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000451a <vfprintf>:
    451a:	2f 92       	push	r2
    451c:	3f 92       	push	r3
    451e:	4f 92       	push	r4
    4520:	5f 92       	push	r5
    4522:	6f 92       	push	r6
    4524:	7f 92       	push	r7
    4526:	8f 92       	push	r8
    4528:	9f 92       	push	r9
    452a:	af 92       	push	r10
    452c:	bf 92       	push	r11
    452e:	cf 92       	push	r12
    4530:	df 92       	push	r13
    4532:	ef 92       	push	r14
    4534:	ff 92       	push	r15
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	cd b7       	in	r28, 0x3d	; 61
    4540:	de b7       	in	r29, 0x3e	; 62
    4542:	60 97       	sbiw	r28, 0x10	; 16
    4544:	0f b6       	in	r0, 0x3f	; 63
    4546:	f8 94       	cli
    4548:	de bf       	out	0x3e, r29	; 62
    454a:	0f be       	out	0x3f, r0	; 63
    454c:	cd bf       	out	0x3d, r28	; 61
    454e:	7c 01       	movw	r14, r24
    4550:	1b 01       	movw	r2, r22
    4552:	6a 01       	movw	r12, r20
    4554:	fc 01       	movw	r30, r24
    4556:	17 82       	std	Z+7, r1	; 0x07
    4558:	16 82       	std	Z+6, r1	; 0x06
    455a:	83 81       	ldd	r24, Z+3	; 0x03
    455c:	81 ff       	sbrs	r24, 1
    455e:	44 c3       	rjmp	.+1672   	; 0x4be8 <vfprintf+0x6ce>
    4560:	9e 01       	movw	r18, r28
    4562:	2f 5f       	subi	r18, 0xFF	; 255
    4564:	3f 4f       	sbci	r19, 0xFF	; 255
    4566:	39 01       	movw	r6, r18
    4568:	f7 01       	movw	r30, r14
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	f1 01       	movw	r30, r2
    456e:	93 fd       	sbrc	r25, 3
    4570:	85 91       	lpm	r24, Z+
    4572:	93 ff       	sbrs	r25, 3
    4574:	81 91       	ld	r24, Z+
    4576:	1f 01       	movw	r2, r30
    4578:	88 23       	and	r24, r24
    457a:	09 f4       	brne	.+2      	; 0x457e <vfprintf+0x64>
    457c:	31 c3       	rjmp	.+1634   	; 0x4be0 <vfprintf+0x6c6>
    457e:	85 32       	cpi	r24, 0x25	; 37
    4580:	39 f4       	brne	.+14     	; 0x4590 <vfprintf+0x76>
    4582:	93 fd       	sbrc	r25, 3
    4584:	85 91       	lpm	r24, Z+
    4586:	93 ff       	sbrs	r25, 3
    4588:	81 91       	ld	r24, Z+
    458a:	1f 01       	movw	r2, r30
    458c:	85 32       	cpi	r24, 0x25	; 37
    458e:	39 f4       	brne	.+14     	; 0x459e <vfprintf+0x84>
    4590:	b7 01       	movw	r22, r14
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4598:	56 01       	movw	r10, r12
    459a:	65 01       	movw	r12, r10
    459c:	e5 cf       	rjmp	.-54     	; 0x4568 <vfprintf+0x4e>
    459e:	10 e0       	ldi	r17, 0x00	; 0
    45a0:	51 2c       	mov	r5, r1
    45a2:	91 2c       	mov	r9, r1
    45a4:	ff e1       	ldi	r31, 0x1F	; 31
    45a6:	f9 15       	cp	r31, r9
    45a8:	d8 f0       	brcs	.+54     	; 0x45e0 <vfprintf+0xc6>
    45aa:	8b 32       	cpi	r24, 0x2B	; 43
    45ac:	79 f0       	breq	.+30     	; 0x45cc <vfprintf+0xb2>
    45ae:	38 f4       	brcc	.+14     	; 0x45be <vfprintf+0xa4>
    45b0:	80 32       	cpi	r24, 0x20	; 32
    45b2:	79 f0       	breq	.+30     	; 0x45d2 <vfprintf+0xb8>
    45b4:	83 32       	cpi	r24, 0x23	; 35
    45b6:	a1 f4       	brne	.+40     	; 0x45e0 <vfprintf+0xc6>
    45b8:	f9 2d       	mov	r31, r9
    45ba:	f0 61       	ori	r31, 0x10	; 16
    45bc:	2e c0       	rjmp	.+92     	; 0x461a <vfprintf+0x100>
    45be:	8d 32       	cpi	r24, 0x2D	; 45
    45c0:	61 f0       	breq	.+24     	; 0x45da <vfprintf+0xc0>
    45c2:	80 33       	cpi	r24, 0x30	; 48
    45c4:	69 f4       	brne	.+26     	; 0x45e0 <vfprintf+0xc6>
    45c6:	29 2d       	mov	r18, r9
    45c8:	21 60       	ori	r18, 0x01	; 1
    45ca:	2d c0       	rjmp	.+90     	; 0x4626 <vfprintf+0x10c>
    45cc:	39 2d       	mov	r19, r9
    45ce:	32 60       	ori	r19, 0x02	; 2
    45d0:	93 2e       	mov	r9, r19
    45d2:	89 2d       	mov	r24, r9
    45d4:	84 60       	ori	r24, 0x04	; 4
    45d6:	98 2e       	mov	r9, r24
    45d8:	2a c0       	rjmp	.+84     	; 0x462e <vfprintf+0x114>
    45da:	e9 2d       	mov	r30, r9
    45dc:	e8 60       	ori	r30, 0x08	; 8
    45de:	15 c0       	rjmp	.+42     	; 0x460a <vfprintf+0xf0>
    45e0:	97 fc       	sbrc	r9, 7
    45e2:	2d c0       	rjmp	.+90     	; 0x463e <vfprintf+0x124>
    45e4:	20 ed       	ldi	r18, 0xD0	; 208
    45e6:	28 0f       	add	r18, r24
    45e8:	2a 30       	cpi	r18, 0x0A	; 10
    45ea:	88 f4       	brcc	.+34     	; 0x460e <vfprintf+0xf4>
    45ec:	96 fe       	sbrs	r9, 6
    45ee:	06 c0       	rjmp	.+12     	; 0x45fc <vfprintf+0xe2>
    45f0:	3a e0       	ldi	r19, 0x0A	; 10
    45f2:	13 9f       	mul	r17, r19
    45f4:	20 0d       	add	r18, r0
    45f6:	11 24       	eor	r1, r1
    45f8:	12 2f       	mov	r17, r18
    45fa:	19 c0       	rjmp	.+50     	; 0x462e <vfprintf+0x114>
    45fc:	8a e0       	ldi	r24, 0x0A	; 10
    45fe:	58 9e       	mul	r5, r24
    4600:	20 0d       	add	r18, r0
    4602:	11 24       	eor	r1, r1
    4604:	52 2e       	mov	r5, r18
    4606:	e9 2d       	mov	r30, r9
    4608:	e0 62       	ori	r30, 0x20	; 32
    460a:	9e 2e       	mov	r9, r30
    460c:	10 c0       	rjmp	.+32     	; 0x462e <vfprintf+0x114>
    460e:	8e 32       	cpi	r24, 0x2E	; 46
    4610:	31 f4       	brne	.+12     	; 0x461e <vfprintf+0x104>
    4612:	96 fc       	sbrc	r9, 6
    4614:	e5 c2       	rjmp	.+1482   	; 0x4be0 <vfprintf+0x6c6>
    4616:	f9 2d       	mov	r31, r9
    4618:	f0 64       	ori	r31, 0x40	; 64
    461a:	9f 2e       	mov	r9, r31
    461c:	08 c0       	rjmp	.+16     	; 0x462e <vfprintf+0x114>
    461e:	8c 36       	cpi	r24, 0x6C	; 108
    4620:	21 f4       	brne	.+8      	; 0x462a <vfprintf+0x110>
    4622:	29 2d       	mov	r18, r9
    4624:	20 68       	ori	r18, 0x80	; 128
    4626:	92 2e       	mov	r9, r18
    4628:	02 c0       	rjmp	.+4      	; 0x462e <vfprintf+0x114>
    462a:	88 36       	cpi	r24, 0x68	; 104
    462c:	41 f4       	brne	.+16     	; 0x463e <vfprintf+0x124>
    462e:	f1 01       	movw	r30, r2
    4630:	93 fd       	sbrc	r25, 3
    4632:	85 91       	lpm	r24, Z+
    4634:	93 ff       	sbrs	r25, 3
    4636:	81 91       	ld	r24, Z+
    4638:	1f 01       	movw	r2, r30
    463a:	81 11       	cpse	r24, r1
    463c:	b3 cf       	rjmp	.-154    	; 0x45a4 <vfprintf+0x8a>
    463e:	9b eb       	ldi	r25, 0xBB	; 187
    4640:	98 0f       	add	r25, r24
    4642:	93 30       	cpi	r25, 0x03	; 3
    4644:	20 f4       	brcc	.+8      	; 0x464e <vfprintf+0x134>
    4646:	99 2d       	mov	r25, r9
    4648:	90 61       	ori	r25, 0x10	; 16
    464a:	80 5e       	subi	r24, 0xE0	; 224
    464c:	07 c0       	rjmp	.+14     	; 0x465c <vfprintf+0x142>
    464e:	9b e9       	ldi	r25, 0x9B	; 155
    4650:	98 0f       	add	r25, r24
    4652:	93 30       	cpi	r25, 0x03	; 3
    4654:	08 f0       	brcs	.+2      	; 0x4658 <vfprintf+0x13e>
    4656:	66 c1       	rjmp	.+716    	; 0x4924 <vfprintf+0x40a>
    4658:	99 2d       	mov	r25, r9
    465a:	9f 7e       	andi	r25, 0xEF	; 239
    465c:	96 ff       	sbrs	r25, 6
    465e:	16 e0       	ldi	r17, 0x06	; 6
    4660:	9f 73       	andi	r25, 0x3F	; 63
    4662:	99 2e       	mov	r9, r25
    4664:	85 36       	cpi	r24, 0x65	; 101
    4666:	19 f4       	brne	.+6      	; 0x466e <vfprintf+0x154>
    4668:	90 64       	ori	r25, 0x40	; 64
    466a:	99 2e       	mov	r9, r25
    466c:	08 c0       	rjmp	.+16     	; 0x467e <vfprintf+0x164>
    466e:	86 36       	cpi	r24, 0x66	; 102
    4670:	21 f4       	brne	.+8      	; 0x467a <vfprintf+0x160>
    4672:	39 2f       	mov	r19, r25
    4674:	30 68       	ori	r19, 0x80	; 128
    4676:	93 2e       	mov	r9, r19
    4678:	02 c0       	rjmp	.+4      	; 0x467e <vfprintf+0x164>
    467a:	11 11       	cpse	r17, r1
    467c:	11 50       	subi	r17, 0x01	; 1
    467e:	97 fe       	sbrs	r9, 7
    4680:	07 c0       	rjmp	.+14     	; 0x4690 <vfprintf+0x176>
    4682:	1c 33       	cpi	r17, 0x3C	; 60
    4684:	50 f4       	brcc	.+20     	; 0x469a <vfprintf+0x180>
    4686:	44 24       	eor	r4, r4
    4688:	43 94       	inc	r4
    468a:	41 0e       	add	r4, r17
    468c:	27 e0       	ldi	r18, 0x07	; 7
    468e:	0b c0       	rjmp	.+22     	; 0x46a6 <vfprintf+0x18c>
    4690:	18 30       	cpi	r17, 0x08	; 8
    4692:	38 f0       	brcs	.+14     	; 0x46a2 <vfprintf+0x188>
    4694:	27 e0       	ldi	r18, 0x07	; 7
    4696:	17 e0       	ldi	r17, 0x07	; 7
    4698:	05 c0       	rjmp	.+10     	; 0x46a4 <vfprintf+0x18a>
    469a:	27 e0       	ldi	r18, 0x07	; 7
    469c:	9c e3       	ldi	r25, 0x3C	; 60
    469e:	49 2e       	mov	r4, r25
    46a0:	02 c0       	rjmp	.+4      	; 0x46a6 <vfprintf+0x18c>
    46a2:	21 2f       	mov	r18, r17
    46a4:	41 2c       	mov	r4, r1
    46a6:	56 01       	movw	r10, r12
    46a8:	84 e0       	ldi	r24, 0x04	; 4
    46aa:	a8 0e       	add	r10, r24
    46ac:	b1 1c       	adc	r11, r1
    46ae:	f6 01       	movw	r30, r12
    46b0:	60 81       	ld	r22, Z
    46b2:	71 81       	ldd	r23, Z+1	; 0x01
    46b4:	82 81       	ldd	r24, Z+2	; 0x02
    46b6:	93 81       	ldd	r25, Z+3	; 0x03
    46b8:	04 2d       	mov	r16, r4
    46ba:	a3 01       	movw	r20, r6
    46bc:	0e 94 8d e4 	call	0x1c91a	; 0x1c91a <__ftoa_engine>
    46c0:	6c 01       	movw	r12, r24
    46c2:	f9 81       	ldd	r31, Y+1	; 0x01
    46c4:	fc 87       	std	Y+12, r31	; 0x0c
    46c6:	f0 ff       	sbrs	r31, 0
    46c8:	02 c0       	rjmp	.+4      	; 0x46ce <vfprintf+0x1b4>
    46ca:	f3 ff       	sbrs	r31, 3
    46cc:	06 c0       	rjmp	.+12     	; 0x46da <vfprintf+0x1c0>
    46ce:	91 fc       	sbrc	r9, 1
    46d0:	06 c0       	rjmp	.+12     	; 0x46de <vfprintf+0x1c4>
    46d2:	92 fe       	sbrs	r9, 2
    46d4:	06 c0       	rjmp	.+12     	; 0x46e2 <vfprintf+0x1c8>
    46d6:	00 e2       	ldi	r16, 0x20	; 32
    46d8:	05 c0       	rjmp	.+10     	; 0x46e4 <vfprintf+0x1ca>
    46da:	0d e2       	ldi	r16, 0x2D	; 45
    46dc:	03 c0       	rjmp	.+6      	; 0x46e4 <vfprintf+0x1ca>
    46de:	0b e2       	ldi	r16, 0x2B	; 43
    46e0:	01 c0       	rjmp	.+2      	; 0x46e4 <vfprintf+0x1ca>
    46e2:	00 e0       	ldi	r16, 0x00	; 0
    46e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    46e6:	8c 70       	andi	r24, 0x0C	; 12
    46e8:	19 f0       	breq	.+6      	; 0x46f0 <vfprintf+0x1d6>
    46ea:	01 11       	cpse	r16, r1
    46ec:	5a c2       	rjmp	.+1204   	; 0x4ba2 <vfprintf+0x688>
    46ee:	9b c2       	rjmp	.+1334   	; 0x4c26 <vfprintf+0x70c>
    46f0:	97 fe       	sbrs	r9, 7
    46f2:	10 c0       	rjmp	.+32     	; 0x4714 <vfprintf+0x1fa>
    46f4:	4c 0c       	add	r4, r12
    46f6:	fc 85       	ldd	r31, Y+12	; 0x0c
    46f8:	f4 ff       	sbrs	r31, 4
    46fa:	04 c0       	rjmp	.+8      	; 0x4704 <vfprintf+0x1ea>
    46fc:	8a 81       	ldd	r24, Y+2	; 0x02
    46fe:	81 33       	cpi	r24, 0x31	; 49
    4700:	09 f4       	brne	.+2      	; 0x4704 <vfprintf+0x1ea>
    4702:	4a 94       	dec	r4
    4704:	14 14       	cp	r1, r4
    4706:	74 f5       	brge	.+92     	; 0x4764 <vfprintf+0x24a>
    4708:	28 e0       	ldi	r18, 0x08	; 8
    470a:	24 15       	cp	r18, r4
    470c:	78 f5       	brcc	.+94     	; 0x476c <vfprintf+0x252>
    470e:	88 e0       	ldi	r24, 0x08	; 8
    4710:	48 2e       	mov	r4, r24
    4712:	2c c0       	rjmp	.+88     	; 0x476c <vfprintf+0x252>
    4714:	96 fc       	sbrc	r9, 6
    4716:	2a c0       	rjmp	.+84     	; 0x476c <vfprintf+0x252>
    4718:	81 2f       	mov	r24, r17
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	8c 15       	cp	r24, r12
    471e:	9d 05       	cpc	r25, r13
    4720:	9c f0       	brlt	.+38     	; 0x4748 <vfprintf+0x22e>
    4722:	3c ef       	ldi	r19, 0xFC	; 252
    4724:	c3 16       	cp	r12, r19
    4726:	3f ef       	ldi	r19, 0xFF	; 255
    4728:	d3 06       	cpc	r13, r19
    472a:	74 f0       	brlt	.+28     	; 0x4748 <vfprintf+0x22e>
    472c:	89 2d       	mov	r24, r9
    472e:	80 68       	ori	r24, 0x80	; 128
    4730:	98 2e       	mov	r9, r24
    4732:	0a c0       	rjmp	.+20     	; 0x4748 <vfprintf+0x22e>
    4734:	e2 e0       	ldi	r30, 0x02	; 2
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	ec 0f       	add	r30, r28
    473a:	fd 1f       	adc	r31, r29
    473c:	e1 0f       	add	r30, r17
    473e:	f1 1d       	adc	r31, r1
    4740:	80 81       	ld	r24, Z
    4742:	80 33       	cpi	r24, 0x30	; 48
    4744:	19 f4       	brne	.+6      	; 0x474c <vfprintf+0x232>
    4746:	11 50       	subi	r17, 0x01	; 1
    4748:	11 11       	cpse	r17, r1
    474a:	f4 cf       	rjmp	.-24     	; 0x4734 <vfprintf+0x21a>
    474c:	97 fe       	sbrs	r9, 7
    474e:	0e c0       	rjmp	.+28     	; 0x476c <vfprintf+0x252>
    4750:	44 24       	eor	r4, r4
    4752:	43 94       	inc	r4
    4754:	41 0e       	add	r4, r17
    4756:	81 2f       	mov	r24, r17
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	c8 16       	cp	r12, r24
    475c:	d9 06       	cpc	r13, r25
    475e:	2c f4       	brge	.+10     	; 0x476a <vfprintf+0x250>
    4760:	1c 19       	sub	r17, r12
    4762:	04 c0       	rjmp	.+8      	; 0x476c <vfprintf+0x252>
    4764:	44 24       	eor	r4, r4
    4766:	43 94       	inc	r4
    4768:	01 c0       	rjmp	.+2      	; 0x476c <vfprintf+0x252>
    476a:	10 e0       	ldi	r17, 0x00	; 0
    476c:	97 fe       	sbrs	r9, 7
    476e:	06 c0       	rjmp	.+12     	; 0x477c <vfprintf+0x262>
    4770:	1c 14       	cp	r1, r12
    4772:	1d 04       	cpc	r1, r13
    4774:	34 f4       	brge	.+12     	; 0x4782 <vfprintf+0x268>
    4776:	c6 01       	movw	r24, r12
    4778:	01 96       	adiw	r24, 0x01	; 1
    477a:	05 c0       	rjmp	.+10     	; 0x4786 <vfprintf+0x26c>
    477c:	85 e0       	ldi	r24, 0x05	; 5
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	02 c0       	rjmp	.+4      	; 0x4786 <vfprintf+0x26c>
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	01 11       	cpse	r16, r1
    4788:	01 96       	adiw	r24, 0x01	; 1
    478a:	11 23       	and	r17, r17
    478c:	31 f0       	breq	.+12     	; 0x479a <vfprintf+0x280>
    478e:	21 2f       	mov	r18, r17
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	2f 5f       	subi	r18, 0xFF	; 255
    4794:	3f 4f       	sbci	r19, 0xFF	; 255
    4796:	82 0f       	add	r24, r18
    4798:	93 1f       	adc	r25, r19
    479a:	25 2d       	mov	r18, r5
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	82 17       	cp	r24, r18
    47a0:	93 07       	cpc	r25, r19
    47a2:	14 f4       	brge	.+4      	; 0x47a8 <vfprintf+0x28e>
    47a4:	58 1a       	sub	r5, r24
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <vfprintf+0x290>
    47a8:	51 2c       	mov	r5, r1
    47aa:	89 2d       	mov	r24, r9
    47ac:	89 70       	andi	r24, 0x09	; 9
    47ae:	49 f4       	brne	.+18     	; 0x47c2 <vfprintf+0x2a8>
    47b0:	55 20       	and	r5, r5
    47b2:	39 f0       	breq	.+14     	; 0x47c2 <vfprintf+0x2a8>
    47b4:	b7 01       	movw	r22, r14
    47b6:	80 e2       	ldi	r24, 0x20	; 32
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    47be:	5a 94       	dec	r5
    47c0:	f7 cf       	rjmp	.-18     	; 0x47b0 <vfprintf+0x296>
    47c2:	00 23       	and	r16, r16
    47c4:	29 f0       	breq	.+10     	; 0x47d0 <vfprintf+0x2b6>
    47c6:	b7 01       	movw	r22, r14
    47c8:	80 2f       	mov	r24, r16
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    47d0:	93 fc       	sbrc	r9, 3
    47d2:	09 c0       	rjmp	.+18     	; 0x47e6 <vfprintf+0x2cc>
    47d4:	55 20       	and	r5, r5
    47d6:	39 f0       	breq	.+14     	; 0x47e6 <vfprintf+0x2cc>
    47d8:	b7 01       	movw	r22, r14
    47da:	80 e3       	ldi	r24, 0x30	; 48
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    47e2:	5a 94       	dec	r5
    47e4:	f7 cf       	rjmp	.-18     	; 0x47d4 <vfprintf+0x2ba>
    47e6:	97 fe       	sbrs	r9, 7
    47e8:	4c c0       	rjmp	.+152    	; 0x4882 <vfprintf+0x368>
    47ea:	46 01       	movw	r8, r12
    47ec:	d7 fe       	sbrs	r13, 7
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <vfprintf+0x2da>
    47f0:	81 2c       	mov	r8, r1
    47f2:	91 2c       	mov	r9, r1
    47f4:	c6 01       	movw	r24, r12
    47f6:	88 19       	sub	r24, r8
    47f8:	99 09       	sbc	r25, r9
    47fa:	f3 01       	movw	r30, r6
    47fc:	e8 0f       	add	r30, r24
    47fe:	f9 1f       	adc	r31, r25
    4800:	fe 87       	std	Y+14, r31	; 0x0e
    4802:	ed 87       	std	Y+13, r30	; 0x0d
    4804:	96 01       	movw	r18, r12
    4806:	24 19       	sub	r18, r4
    4808:	31 09       	sbc	r19, r1
    480a:	38 8b       	std	Y+16, r19	; 0x10
    480c:	2f 87       	std	Y+15, r18	; 0x0f
    480e:	01 2f       	mov	r16, r17
    4810:	10 e0       	ldi	r17, 0x00	; 0
    4812:	11 95       	neg	r17
    4814:	01 95       	neg	r16
    4816:	11 09       	sbc	r17, r1
    4818:	3f ef       	ldi	r19, 0xFF	; 255
    481a:	83 16       	cp	r8, r19
    481c:	93 06       	cpc	r9, r19
    481e:	29 f4       	brne	.+10     	; 0x482a <vfprintf+0x310>
    4820:	b7 01       	movw	r22, r14
    4822:	8e e2       	ldi	r24, 0x2E	; 46
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    482a:	c8 14       	cp	r12, r8
    482c:	d9 04       	cpc	r13, r9
    482e:	4c f0       	brlt	.+18     	; 0x4842 <vfprintf+0x328>
    4830:	8f 85       	ldd	r24, Y+15	; 0x0f
    4832:	98 89       	ldd	r25, Y+16	; 0x10
    4834:	88 15       	cp	r24, r8
    4836:	99 05       	cpc	r25, r9
    4838:	24 f4       	brge	.+8      	; 0x4842 <vfprintf+0x328>
    483a:	ed 85       	ldd	r30, Y+13	; 0x0d
    483c:	fe 85       	ldd	r31, Y+14	; 0x0e
    483e:	81 81       	ldd	r24, Z+1	; 0x01
    4840:	01 c0       	rjmp	.+2      	; 0x4844 <vfprintf+0x32a>
    4842:	80 e3       	ldi	r24, 0x30	; 48
    4844:	f1 e0       	ldi	r31, 0x01	; 1
    4846:	8f 1a       	sub	r8, r31
    4848:	91 08       	sbc	r9, r1
    484a:	2d 85       	ldd	r18, Y+13	; 0x0d
    484c:	3e 85       	ldd	r19, Y+14	; 0x0e
    484e:	2f 5f       	subi	r18, 0xFF	; 255
    4850:	3f 4f       	sbci	r19, 0xFF	; 255
    4852:	3e 87       	std	Y+14, r19	; 0x0e
    4854:	2d 87       	std	Y+13, r18	; 0x0d
    4856:	80 16       	cp	r8, r16
    4858:	91 06       	cpc	r9, r17
    485a:	2c f0       	brlt	.+10     	; 0x4866 <vfprintf+0x34c>
    485c:	b7 01       	movw	r22, r14
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4864:	d9 cf       	rjmp	.-78     	; 0x4818 <vfprintf+0x2fe>
    4866:	c8 14       	cp	r12, r8
    4868:	d9 04       	cpc	r13, r9
    486a:	41 f4       	brne	.+16     	; 0x487c <vfprintf+0x362>
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	96 33       	cpi	r25, 0x36	; 54
    4870:	20 f4       	brcc	.+8      	; 0x487a <vfprintf+0x360>
    4872:	95 33       	cpi	r25, 0x35	; 53
    4874:	19 f4       	brne	.+6      	; 0x487c <vfprintf+0x362>
    4876:	3c 85       	ldd	r19, Y+12	; 0x0c
    4878:	34 ff       	sbrs	r19, 4
    487a:	81 e3       	ldi	r24, 0x31	; 49
    487c:	b7 01       	movw	r22, r14
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	4e c0       	rjmp	.+156    	; 0x491e <vfprintf+0x404>
    4882:	8a 81       	ldd	r24, Y+2	; 0x02
    4884:	81 33       	cpi	r24, 0x31	; 49
    4886:	19 f0       	breq	.+6      	; 0x488e <vfprintf+0x374>
    4888:	9c 85       	ldd	r25, Y+12	; 0x0c
    488a:	9f 7e       	andi	r25, 0xEF	; 239
    488c:	9c 87       	std	Y+12, r25	; 0x0c
    488e:	b7 01       	movw	r22, r14
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4896:	11 11       	cpse	r17, r1
    4898:	05 c0       	rjmp	.+10     	; 0x48a4 <vfprintf+0x38a>
    489a:	94 fc       	sbrc	r9, 4
    489c:	18 c0       	rjmp	.+48     	; 0x48ce <vfprintf+0x3b4>
    489e:	85 e6       	ldi	r24, 0x65	; 101
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	17 c0       	rjmp	.+46     	; 0x48d2 <vfprintf+0x3b8>
    48a4:	b7 01       	movw	r22, r14
    48a6:	8e e2       	ldi	r24, 0x2E	; 46
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    48ae:	1e 5f       	subi	r17, 0xFE	; 254
    48b0:	82 e0       	ldi	r24, 0x02	; 2
    48b2:	01 e0       	ldi	r16, 0x01	; 1
    48b4:	08 0f       	add	r16, r24
    48b6:	f3 01       	movw	r30, r6
    48b8:	e8 0f       	add	r30, r24
    48ba:	f1 1d       	adc	r31, r1
    48bc:	80 81       	ld	r24, Z
    48be:	b7 01       	movw	r22, r14
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    48c6:	80 2f       	mov	r24, r16
    48c8:	01 13       	cpse	r16, r17
    48ca:	f3 cf       	rjmp	.-26     	; 0x48b2 <vfprintf+0x398>
    48cc:	e6 cf       	rjmp	.-52     	; 0x489a <vfprintf+0x380>
    48ce:	85 e4       	ldi	r24, 0x45	; 69
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	b7 01       	movw	r22, r14
    48d4:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    48d8:	d7 fc       	sbrc	r13, 7
    48da:	06 c0       	rjmp	.+12     	; 0x48e8 <vfprintf+0x3ce>
    48dc:	c1 14       	cp	r12, r1
    48de:	d1 04       	cpc	r13, r1
    48e0:	41 f4       	brne	.+16     	; 0x48f2 <vfprintf+0x3d8>
    48e2:	ec 85       	ldd	r30, Y+12	; 0x0c
    48e4:	e4 ff       	sbrs	r30, 4
    48e6:	05 c0       	rjmp	.+10     	; 0x48f2 <vfprintf+0x3d8>
    48e8:	d1 94       	neg	r13
    48ea:	c1 94       	neg	r12
    48ec:	d1 08       	sbc	r13, r1
    48ee:	8d e2       	ldi	r24, 0x2D	; 45
    48f0:	01 c0       	rjmp	.+2      	; 0x48f4 <vfprintf+0x3da>
    48f2:	8b e2       	ldi	r24, 0x2B	; 43
    48f4:	b7 01       	movw	r22, r14
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    48fc:	80 e3       	ldi	r24, 0x30	; 48
    48fe:	2a e0       	ldi	r18, 0x0A	; 10
    4900:	c2 16       	cp	r12, r18
    4902:	d1 04       	cpc	r13, r1
    4904:	2c f0       	brlt	.+10     	; 0x4910 <vfprintf+0x3f6>
    4906:	8f 5f       	subi	r24, 0xFF	; 255
    4908:	fa e0       	ldi	r31, 0x0A	; 10
    490a:	cf 1a       	sub	r12, r31
    490c:	d1 08       	sbc	r13, r1
    490e:	f7 cf       	rjmp	.-18     	; 0x48fe <vfprintf+0x3e4>
    4910:	b7 01       	movw	r22, r14
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4918:	b7 01       	movw	r22, r14
    491a:	c6 01       	movw	r24, r12
    491c:	c0 96       	adiw	r24, 0x30	; 48
    491e:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4922:	54 c1       	rjmp	.+680    	; 0x4bcc <vfprintf+0x6b2>
    4924:	83 36       	cpi	r24, 0x63	; 99
    4926:	31 f0       	breq	.+12     	; 0x4934 <vfprintf+0x41a>
    4928:	83 37       	cpi	r24, 0x73	; 115
    492a:	79 f0       	breq	.+30     	; 0x494a <vfprintf+0x430>
    492c:	83 35       	cpi	r24, 0x53	; 83
    492e:	09 f0       	breq	.+2      	; 0x4932 <vfprintf+0x418>
    4930:	56 c0       	rjmp	.+172    	; 0x49de <vfprintf+0x4c4>
    4932:	20 c0       	rjmp	.+64     	; 0x4974 <vfprintf+0x45a>
    4934:	56 01       	movw	r10, r12
    4936:	32 e0       	ldi	r19, 0x02	; 2
    4938:	a3 0e       	add	r10, r19
    493a:	b1 1c       	adc	r11, r1
    493c:	f6 01       	movw	r30, r12
    493e:	80 81       	ld	r24, Z
    4940:	89 83       	std	Y+1, r24	; 0x01
    4942:	01 e0       	ldi	r16, 0x01	; 1
    4944:	10 e0       	ldi	r17, 0x00	; 0
    4946:	63 01       	movw	r12, r6
    4948:	12 c0       	rjmp	.+36     	; 0x496e <vfprintf+0x454>
    494a:	56 01       	movw	r10, r12
    494c:	f2 e0       	ldi	r31, 0x02	; 2
    494e:	af 0e       	add	r10, r31
    4950:	b1 1c       	adc	r11, r1
    4952:	f6 01       	movw	r30, r12
    4954:	c0 80       	ld	r12, Z
    4956:	d1 80       	ldd	r13, Z+1	; 0x01
    4958:	96 fe       	sbrs	r9, 6
    495a:	03 c0       	rjmp	.+6      	; 0x4962 <vfprintf+0x448>
    495c:	61 2f       	mov	r22, r17
    495e:	70 e0       	ldi	r23, 0x00	; 0
    4960:	02 c0       	rjmp	.+4      	; 0x4966 <vfprintf+0x44c>
    4962:	6f ef       	ldi	r22, 0xFF	; 255
    4964:	7f ef       	ldi	r23, 0xFF	; 255
    4966:	c6 01       	movw	r24, r12
    4968:	0e 94 77 e5 	call	0x1caee	; 0x1caee <strnlen>
    496c:	8c 01       	movw	r16, r24
    496e:	f9 2d       	mov	r31, r9
    4970:	ff 77       	andi	r31, 0x7F	; 127
    4972:	14 c0       	rjmp	.+40     	; 0x499c <vfprintf+0x482>
    4974:	56 01       	movw	r10, r12
    4976:	22 e0       	ldi	r18, 0x02	; 2
    4978:	a2 0e       	add	r10, r18
    497a:	b1 1c       	adc	r11, r1
    497c:	f6 01       	movw	r30, r12
    497e:	c0 80       	ld	r12, Z
    4980:	d1 80       	ldd	r13, Z+1	; 0x01
    4982:	96 fe       	sbrs	r9, 6
    4984:	03 c0       	rjmp	.+6      	; 0x498c <vfprintf+0x472>
    4986:	61 2f       	mov	r22, r17
    4988:	70 e0       	ldi	r23, 0x00	; 0
    498a:	02 c0       	rjmp	.+4      	; 0x4990 <vfprintf+0x476>
    498c:	6f ef       	ldi	r22, 0xFF	; 255
    498e:	7f ef       	ldi	r23, 0xFF	; 255
    4990:	c6 01       	movw	r24, r12
    4992:	0e 94 65 e5 	call	0x1caca	; 0x1caca <strnlen_P>
    4996:	8c 01       	movw	r16, r24
    4998:	f9 2d       	mov	r31, r9
    499a:	f0 68       	ori	r31, 0x80	; 128
    499c:	9f 2e       	mov	r9, r31
    499e:	f3 fd       	sbrc	r31, 3
    49a0:	1a c0       	rjmp	.+52     	; 0x49d6 <vfprintf+0x4bc>
    49a2:	85 2d       	mov	r24, r5
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	08 17       	cp	r16, r24
    49a8:	19 07       	cpc	r17, r25
    49aa:	a8 f4       	brcc	.+42     	; 0x49d6 <vfprintf+0x4bc>
    49ac:	b7 01       	movw	r22, r14
    49ae:	80 e2       	ldi	r24, 0x20	; 32
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    49b6:	5a 94       	dec	r5
    49b8:	f4 cf       	rjmp	.-24     	; 0x49a2 <vfprintf+0x488>
    49ba:	f6 01       	movw	r30, r12
    49bc:	97 fc       	sbrc	r9, 7
    49be:	85 91       	lpm	r24, Z+
    49c0:	97 fe       	sbrs	r9, 7
    49c2:	81 91       	ld	r24, Z+
    49c4:	6f 01       	movw	r12, r30
    49c6:	b7 01       	movw	r22, r14
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    49ce:	51 10       	cpse	r5, r1
    49d0:	5a 94       	dec	r5
    49d2:	01 50       	subi	r16, 0x01	; 1
    49d4:	11 09       	sbc	r17, r1
    49d6:	01 15       	cp	r16, r1
    49d8:	11 05       	cpc	r17, r1
    49da:	79 f7       	brne	.-34     	; 0x49ba <vfprintf+0x4a0>
    49dc:	f7 c0       	rjmp	.+494    	; 0x4bcc <vfprintf+0x6b2>
    49de:	84 36       	cpi	r24, 0x64	; 100
    49e0:	11 f0       	breq	.+4      	; 0x49e6 <vfprintf+0x4cc>
    49e2:	89 36       	cpi	r24, 0x69	; 105
    49e4:	61 f5       	brne	.+88     	; 0x4a3e <vfprintf+0x524>
    49e6:	56 01       	movw	r10, r12
    49e8:	97 fe       	sbrs	r9, 7
    49ea:	09 c0       	rjmp	.+18     	; 0x49fe <vfprintf+0x4e4>
    49ec:	24 e0       	ldi	r18, 0x04	; 4
    49ee:	a2 0e       	add	r10, r18
    49f0:	b1 1c       	adc	r11, r1
    49f2:	f6 01       	movw	r30, r12
    49f4:	60 81       	ld	r22, Z
    49f6:	71 81       	ldd	r23, Z+1	; 0x01
    49f8:	82 81       	ldd	r24, Z+2	; 0x02
    49fa:	93 81       	ldd	r25, Z+3	; 0x03
    49fc:	0a c0       	rjmp	.+20     	; 0x4a12 <vfprintf+0x4f8>
    49fe:	f2 e0       	ldi	r31, 0x02	; 2
    4a00:	af 0e       	add	r10, r31
    4a02:	b1 1c       	adc	r11, r1
    4a04:	f6 01       	movw	r30, r12
    4a06:	60 81       	ld	r22, Z
    4a08:	71 81       	ldd	r23, Z+1	; 0x01
    4a0a:	07 2e       	mov	r0, r23
    4a0c:	00 0c       	add	r0, r0
    4a0e:	88 0b       	sbc	r24, r24
    4a10:	99 0b       	sbc	r25, r25
    4a12:	f9 2d       	mov	r31, r9
    4a14:	ff 76       	andi	r31, 0x6F	; 111
    4a16:	9f 2e       	mov	r9, r31
    4a18:	97 ff       	sbrs	r25, 7
    4a1a:	09 c0       	rjmp	.+18     	; 0x4a2e <vfprintf+0x514>
    4a1c:	90 95       	com	r25
    4a1e:	80 95       	com	r24
    4a20:	70 95       	com	r23
    4a22:	61 95       	neg	r22
    4a24:	7f 4f       	sbci	r23, 0xFF	; 255
    4a26:	8f 4f       	sbci	r24, 0xFF	; 255
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	f0 68       	ori	r31, 0x80	; 128
    4a2c:	9f 2e       	mov	r9, r31
    4a2e:	2a e0       	ldi	r18, 0x0A	; 10
    4a30:	30 e0       	ldi	r19, 0x00	; 0
    4a32:	a3 01       	movw	r20, r6
    4a34:	0e 94 82 e5 	call	0x1cb04	; 0x1cb04 <__ultoa_invert>
    4a38:	c8 2e       	mov	r12, r24
    4a3a:	c6 18       	sub	r12, r6
    4a3c:	3f c0       	rjmp	.+126    	; 0x4abc <vfprintf+0x5a2>
    4a3e:	09 2d       	mov	r16, r9
    4a40:	85 37       	cpi	r24, 0x75	; 117
    4a42:	21 f4       	brne	.+8      	; 0x4a4c <vfprintf+0x532>
    4a44:	0f 7e       	andi	r16, 0xEF	; 239
    4a46:	2a e0       	ldi	r18, 0x0A	; 10
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	1d c0       	rjmp	.+58     	; 0x4a86 <vfprintf+0x56c>
    4a4c:	09 7f       	andi	r16, 0xF9	; 249
    4a4e:	8f 36       	cpi	r24, 0x6F	; 111
    4a50:	91 f0       	breq	.+36     	; 0x4a76 <vfprintf+0x55c>
    4a52:	18 f4       	brcc	.+6      	; 0x4a5a <vfprintf+0x540>
    4a54:	88 35       	cpi	r24, 0x58	; 88
    4a56:	59 f0       	breq	.+22     	; 0x4a6e <vfprintf+0x554>
    4a58:	c3 c0       	rjmp	.+390    	; 0x4be0 <vfprintf+0x6c6>
    4a5a:	80 37       	cpi	r24, 0x70	; 112
    4a5c:	19 f0       	breq	.+6      	; 0x4a64 <vfprintf+0x54a>
    4a5e:	88 37       	cpi	r24, 0x78	; 120
    4a60:	11 f0       	breq	.+4      	; 0x4a66 <vfprintf+0x54c>
    4a62:	be c0       	rjmp	.+380    	; 0x4be0 <vfprintf+0x6c6>
    4a64:	00 61       	ori	r16, 0x10	; 16
    4a66:	04 ff       	sbrs	r16, 4
    4a68:	09 c0       	rjmp	.+18     	; 0x4a7c <vfprintf+0x562>
    4a6a:	04 60       	ori	r16, 0x04	; 4
    4a6c:	07 c0       	rjmp	.+14     	; 0x4a7c <vfprintf+0x562>
    4a6e:	94 fe       	sbrs	r9, 4
    4a70:	08 c0       	rjmp	.+16     	; 0x4a82 <vfprintf+0x568>
    4a72:	06 60       	ori	r16, 0x06	; 6
    4a74:	06 c0       	rjmp	.+12     	; 0x4a82 <vfprintf+0x568>
    4a76:	28 e0       	ldi	r18, 0x08	; 8
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	05 c0       	rjmp	.+10     	; 0x4a86 <vfprintf+0x56c>
    4a7c:	20 e1       	ldi	r18, 0x10	; 16
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	02 c0       	rjmp	.+4      	; 0x4a86 <vfprintf+0x56c>
    4a82:	20 e1       	ldi	r18, 0x10	; 16
    4a84:	32 e0       	ldi	r19, 0x02	; 2
    4a86:	56 01       	movw	r10, r12
    4a88:	07 ff       	sbrs	r16, 7
    4a8a:	09 c0       	rjmp	.+18     	; 0x4a9e <vfprintf+0x584>
    4a8c:	84 e0       	ldi	r24, 0x04	; 4
    4a8e:	a8 0e       	add	r10, r24
    4a90:	b1 1c       	adc	r11, r1
    4a92:	f6 01       	movw	r30, r12
    4a94:	60 81       	ld	r22, Z
    4a96:	71 81       	ldd	r23, Z+1	; 0x01
    4a98:	82 81       	ldd	r24, Z+2	; 0x02
    4a9a:	93 81       	ldd	r25, Z+3	; 0x03
    4a9c:	08 c0       	rjmp	.+16     	; 0x4aae <vfprintf+0x594>
    4a9e:	f2 e0       	ldi	r31, 0x02	; 2
    4aa0:	af 0e       	add	r10, r31
    4aa2:	b1 1c       	adc	r11, r1
    4aa4:	f6 01       	movw	r30, r12
    4aa6:	60 81       	ld	r22, Z
    4aa8:	71 81       	ldd	r23, Z+1	; 0x01
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	a3 01       	movw	r20, r6
    4ab0:	0e 94 82 e5 	call	0x1cb04	; 0x1cb04 <__ultoa_invert>
    4ab4:	c8 2e       	mov	r12, r24
    4ab6:	c6 18       	sub	r12, r6
    4ab8:	0f 77       	andi	r16, 0x7F	; 127
    4aba:	90 2e       	mov	r9, r16
    4abc:	96 fe       	sbrs	r9, 6
    4abe:	0b c0       	rjmp	.+22     	; 0x4ad6 <vfprintf+0x5bc>
    4ac0:	09 2d       	mov	r16, r9
    4ac2:	0e 7f       	andi	r16, 0xFE	; 254
    4ac4:	c1 16       	cp	r12, r17
    4ac6:	50 f4       	brcc	.+20     	; 0x4adc <vfprintf+0x5c2>
    4ac8:	94 fe       	sbrs	r9, 4
    4aca:	0a c0       	rjmp	.+20     	; 0x4ae0 <vfprintf+0x5c6>
    4acc:	92 fc       	sbrc	r9, 2
    4ace:	08 c0       	rjmp	.+16     	; 0x4ae0 <vfprintf+0x5c6>
    4ad0:	09 2d       	mov	r16, r9
    4ad2:	0e 7e       	andi	r16, 0xEE	; 238
    4ad4:	05 c0       	rjmp	.+10     	; 0x4ae0 <vfprintf+0x5c6>
    4ad6:	dc 2c       	mov	r13, r12
    4ad8:	09 2d       	mov	r16, r9
    4ada:	03 c0       	rjmp	.+6      	; 0x4ae2 <vfprintf+0x5c8>
    4adc:	dc 2c       	mov	r13, r12
    4ade:	01 c0       	rjmp	.+2      	; 0x4ae2 <vfprintf+0x5c8>
    4ae0:	d1 2e       	mov	r13, r17
    4ae2:	04 ff       	sbrs	r16, 4
    4ae4:	0d c0       	rjmp	.+26     	; 0x4b00 <vfprintf+0x5e6>
    4ae6:	fe 01       	movw	r30, r28
    4ae8:	ec 0d       	add	r30, r12
    4aea:	f1 1d       	adc	r31, r1
    4aec:	80 81       	ld	r24, Z
    4aee:	80 33       	cpi	r24, 0x30	; 48
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <vfprintf+0x5dc>
    4af2:	09 7e       	andi	r16, 0xE9	; 233
    4af4:	09 c0       	rjmp	.+18     	; 0x4b08 <vfprintf+0x5ee>
    4af6:	02 ff       	sbrs	r16, 2
    4af8:	06 c0       	rjmp	.+12     	; 0x4b06 <vfprintf+0x5ec>
    4afa:	d3 94       	inc	r13
    4afc:	d3 94       	inc	r13
    4afe:	04 c0       	rjmp	.+8      	; 0x4b08 <vfprintf+0x5ee>
    4b00:	80 2f       	mov	r24, r16
    4b02:	86 78       	andi	r24, 0x86	; 134
    4b04:	09 f0       	breq	.+2      	; 0x4b08 <vfprintf+0x5ee>
    4b06:	d3 94       	inc	r13
    4b08:	03 fd       	sbrc	r16, 3
    4b0a:	11 c0       	rjmp	.+34     	; 0x4b2e <vfprintf+0x614>
    4b0c:	00 ff       	sbrs	r16, 0
    4b0e:	06 c0       	rjmp	.+12     	; 0x4b1c <vfprintf+0x602>
    4b10:	1c 2d       	mov	r17, r12
    4b12:	d5 14       	cp	r13, r5
    4b14:	80 f4       	brcc	.+32     	; 0x4b36 <vfprintf+0x61c>
    4b16:	15 0d       	add	r17, r5
    4b18:	1d 19       	sub	r17, r13
    4b1a:	0d c0       	rjmp	.+26     	; 0x4b36 <vfprintf+0x61c>
    4b1c:	d5 14       	cp	r13, r5
    4b1e:	58 f4       	brcc	.+22     	; 0x4b36 <vfprintf+0x61c>
    4b20:	b7 01       	movw	r22, r14
    4b22:	80 e2       	ldi	r24, 0x20	; 32
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4b2a:	d3 94       	inc	r13
    4b2c:	f7 cf       	rjmp	.-18     	; 0x4b1c <vfprintf+0x602>
    4b2e:	d5 14       	cp	r13, r5
    4b30:	10 f4       	brcc	.+4      	; 0x4b36 <vfprintf+0x61c>
    4b32:	5d 18       	sub	r5, r13
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <vfprintf+0x61e>
    4b36:	51 2c       	mov	r5, r1
    4b38:	04 ff       	sbrs	r16, 4
    4b3a:	10 c0       	rjmp	.+32     	; 0x4b5c <vfprintf+0x642>
    4b3c:	b7 01       	movw	r22, r14
    4b3e:	80 e3       	ldi	r24, 0x30	; 48
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4b46:	02 ff       	sbrs	r16, 2
    4b48:	17 c0       	rjmp	.+46     	; 0x4b78 <vfprintf+0x65e>
    4b4a:	01 fd       	sbrc	r16, 1
    4b4c:	03 c0       	rjmp	.+6      	; 0x4b54 <vfprintf+0x63a>
    4b4e:	88 e7       	ldi	r24, 0x78	; 120
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	02 c0       	rjmp	.+4      	; 0x4b58 <vfprintf+0x63e>
    4b54:	88 e5       	ldi	r24, 0x58	; 88
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	b7 01       	movw	r22, r14
    4b5a:	0c c0       	rjmp	.+24     	; 0x4b74 <vfprintf+0x65a>
    4b5c:	80 2f       	mov	r24, r16
    4b5e:	86 78       	andi	r24, 0x86	; 134
    4b60:	59 f0       	breq	.+22     	; 0x4b78 <vfprintf+0x65e>
    4b62:	01 ff       	sbrs	r16, 1
    4b64:	02 c0       	rjmp	.+4      	; 0x4b6a <vfprintf+0x650>
    4b66:	8b e2       	ldi	r24, 0x2B	; 43
    4b68:	01 c0       	rjmp	.+2      	; 0x4b6c <vfprintf+0x652>
    4b6a:	80 e2       	ldi	r24, 0x20	; 32
    4b6c:	07 fd       	sbrc	r16, 7
    4b6e:	8d e2       	ldi	r24, 0x2D	; 45
    4b70:	b7 01       	movw	r22, r14
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4b78:	c1 16       	cp	r12, r17
    4b7a:	38 f4       	brcc	.+14     	; 0x4b8a <vfprintf+0x670>
    4b7c:	b7 01       	movw	r22, r14
    4b7e:	80 e3       	ldi	r24, 0x30	; 48
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4b86:	11 50       	subi	r17, 0x01	; 1
    4b88:	f7 cf       	rjmp	.-18     	; 0x4b78 <vfprintf+0x65e>
    4b8a:	ca 94       	dec	r12
    4b8c:	f3 01       	movw	r30, r6
    4b8e:	ec 0d       	add	r30, r12
    4b90:	f1 1d       	adc	r31, r1
    4b92:	80 81       	ld	r24, Z
    4b94:	b7 01       	movw	r22, r14
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4b9c:	c1 10       	cpse	r12, r1
    4b9e:	f5 cf       	rjmp	.-22     	; 0x4b8a <vfprintf+0x670>
    4ba0:	15 c0       	rjmp	.+42     	; 0x4bcc <vfprintf+0x6b2>
    4ba2:	f4 e0       	ldi	r31, 0x04	; 4
    4ba4:	f5 15       	cp	r31, r5
    4ba6:	60 f5       	brcc	.+88     	; 0x4c00 <vfprintf+0x6e6>
    4ba8:	84 e0       	ldi	r24, 0x04	; 4
    4baa:	58 1a       	sub	r5, r24
    4bac:	93 fe       	sbrs	r9, 3
    4bae:	1f c0       	rjmp	.+62     	; 0x4bee <vfprintf+0x6d4>
    4bb0:	01 11       	cpse	r16, r1
    4bb2:	27 c0       	rjmp	.+78     	; 0x4c02 <vfprintf+0x6e8>
    4bb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4bb6:	23 ff       	sbrs	r18, 3
    4bb8:	2a c0       	rjmp	.+84     	; 0x4c0e <vfprintf+0x6f4>
    4bba:	06 ed       	ldi	r16, 0xD6	; 214
    4bbc:	11 e0       	ldi	r17, 0x01	; 1
    4bbe:	39 2d       	mov	r19, r9
    4bc0:	30 71       	andi	r19, 0x10	; 16
    4bc2:	93 2e       	mov	r9, r19
    4bc4:	f8 01       	movw	r30, r16
    4bc6:	84 91       	lpm	r24, Z
    4bc8:	81 11       	cpse	r24, r1
    4bca:	24 c0       	rjmp	.+72     	; 0x4c14 <vfprintf+0x6fa>
    4bcc:	55 20       	and	r5, r5
    4bce:	09 f4       	brne	.+2      	; 0x4bd2 <vfprintf+0x6b8>
    4bd0:	e4 cc       	rjmp	.-1592   	; 0x459a <vfprintf+0x80>
    4bd2:	b7 01       	movw	r22, r14
    4bd4:	80 e2       	ldi	r24, 0x20	; 32
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4bdc:	5a 94       	dec	r5
    4bde:	f6 cf       	rjmp	.-20     	; 0x4bcc <vfprintf+0x6b2>
    4be0:	f7 01       	movw	r30, r14
    4be2:	86 81       	ldd	r24, Z+6	; 0x06
    4be4:	97 81       	ldd	r25, Z+7	; 0x07
    4be6:	26 c0       	rjmp	.+76     	; 0x4c34 <vfprintf+0x71a>
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	9f ef       	ldi	r25, 0xFF	; 255
    4bec:	23 c0       	rjmp	.+70     	; 0x4c34 <vfprintf+0x71a>
    4bee:	b7 01       	movw	r22, r14
    4bf0:	80 e2       	ldi	r24, 0x20	; 32
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4bf8:	5a 94       	dec	r5
    4bfa:	51 10       	cpse	r5, r1
    4bfc:	f8 cf       	rjmp	.-16     	; 0x4bee <vfprintf+0x6d4>
    4bfe:	d8 cf       	rjmp	.-80     	; 0x4bb0 <vfprintf+0x696>
    4c00:	51 2c       	mov	r5, r1
    4c02:	b7 01       	movw	r22, r14
    4c04:	80 2f       	mov	r24, r16
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4c0c:	d3 cf       	rjmp	.-90     	; 0x4bb4 <vfprintf+0x69a>
    4c0e:	0a ed       	ldi	r16, 0xDA	; 218
    4c10:	11 e0       	ldi	r17, 0x01	; 1
    4c12:	d5 cf       	rjmp	.-86     	; 0x4bbe <vfprintf+0x6a4>
    4c14:	91 10       	cpse	r9, r1
    4c16:	80 52       	subi	r24, 0x20	; 32
    4c18:	b7 01       	movw	r22, r14
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fputc>
    4c20:	0f 5f       	subi	r16, 0xFF	; 255
    4c22:	1f 4f       	sbci	r17, 0xFF	; 255
    4c24:	cf cf       	rjmp	.-98     	; 0x4bc4 <vfprintf+0x6aa>
    4c26:	23 e0       	ldi	r18, 0x03	; 3
    4c28:	25 15       	cp	r18, r5
    4c2a:	10 f4       	brcc	.+4      	; 0x4c30 <vfprintf+0x716>
    4c2c:	83 e0       	ldi	r24, 0x03	; 3
    4c2e:	bd cf       	rjmp	.-134    	; 0x4baa <vfprintf+0x690>
    4c30:	51 2c       	mov	r5, r1
    4c32:	c0 cf       	rjmp	.-128    	; 0x4bb4 <vfprintf+0x69a>
    4c34:	60 96       	adiw	r28, 0x10	; 16
    4c36:	0f b6       	in	r0, 0x3f	; 63
    4c38:	f8 94       	cli
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	cd bf       	out	0x3d, r28	; 61
    4c40:	df 91       	pop	r29
    4c42:	cf 91       	pop	r28
    4c44:	1f 91       	pop	r17
    4c46:	0f 91       	pop	r16
    4c48:	ff 90       	pop	r15
    4c4a:	ef 90       	pop	r14
    4c4c:	df 90       	pop	r13
    4c4e:	cf 90       	pop	r12
    4c50:	bf 90       	pop	r11
    4c52:	af 90       	pop	r10
    4c54:	9f 90       	pop	r9
    4c56:	8f 90       	pop	r8
    4c58:	7f 90       	pop	r7
    4c5a:	6f 90       	pop	r6
    4c5c:	5f 90       	pop	r5
    4c5e:	4f 90       	pop	r4
    4c60:	3f 90       	pop	r3
    4c62:	2f 90       	pop	r2
    4c64:	08 95       	ret

00004c66 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4c66:	e8 2f       	mov	r30, r24
    4c68:	e6 95       	lsr	r30
    4c6a:	e6 95       	lsr	r30
    4c6c:	e6 95       	lsr	r30
    4c6e:	93 e0       	ldi	r25, 0x03	; 3
    4c70:	e9 9f       	mul	r30, r25
    4c72:	f0 01       	movw	r30, r0
    4c74:	11 24       	eor	r1, r1
    4c76:	32 a1       	ldd	r19, Z+34	; 0x22
    4c78:	28 2f       	mov	r18, r24
    4c7a:	27 70       	andi	r18, 0x07	; 7
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	01 c0       	rjmp	.+2      	; 0x4c84 <chip_select+0x1e>
    4c82:	88 0f       	add	r24, r24
    4c84:	2a 95       	dec	r18
    4c86:	ea f7       	brpl	.-6      	; 0x4c82 <chip_select+0x1c>
    4c88:	98 2f       	mov	r25, r24
    4c8a:	90 95       	com	r25
    4c8c:	93 23       	and	r25, r19
    4c8e:	92 a3       	std	Z+34, r25	; 0x22
    4c90:	91 a1       	ldd	r25, Z+33	; 0x21
    4c92:	89 2b       	or	r24, r25
    4c94:	81 a3       	std	Z+33, r24	; 0x21
    4c96:	08 95       	ret

00004c98 <chip_deselect>:
    4c98:	e8 2f       	mov	r30, r24
    4c9a:	e6 95       	lsr	r30
    4c9c:	e6 95       	lsr	r30
    4c9e:	e6 95       	lsr	r30
    4ca0:	93 e0       	ldi	r25, 0x03	; 3
    4ca2:	e9 9f       	mul	r30, r25
    4ca4:	f0 01       	movw	r30, r0
    4ca6:	11 24       	eor	r1, r1
    4ca8:	32 a1       	ldd	r19, Z+34	; 0x22
    4caa:	28 2f       	mov	r18, r24
    4cac:	27 70       	andi	r18, 0x07	; 7
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	01 c0       	rjmp	.+2      	; 0x4cb6 <chip_deselect+0x1e>
    4cb4:	88 0f       	add	r24, r24
    4cb6:	2a 95       	dec	r18
    4cb8:	ea f7       	brpl	.-6      	; 0x4cb4 <chip_deselect+0x1c>
    4cba:	93 2f       	mov	r25, r19
    4cbc:	98 2b       	or	r25, r24
    4cbe:	92 a3       	std	Z+34, r25	; 0x22
    4cc0:	91 a1       	ldd	r25, Z+33	; 0x21
    4cc2:	89 2b       	or	r24, r25
    4cc4:	81 a3       	std	Z+33, r24	; 0x21
    4cc6:	08 95       	ret

00004cc8 <chip_select_init>:
    4cc8:	e7 cf       	rjmp	.-50     	; 0x4c98 <chip_deselect>
    4cca:	08 95       	ret

00004ccc <spi_end>:
    4ccc:	cf 93       	push	r28
    4cce:	ad b7       	in	r26, 0x3d	; 61
    4cd0:	be b7       	in	r27, 0x3e	; 62
    4cd2:	17 97       	sbiw	r26, 0x07	; 7
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	f8 94       	cli
    4cd8:	be bf       	out	0x3e, r27	; 62
    4cda:	0f be       	out	0x3f, r0	; 63
    4cdc:	ad bf       	out	0x3d, r26	; 61
    4cde:	c8 2f       	mov	r28, r24
    4ce0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4ce4:	8c 17       	cp	r24, r28
    4ce6:	99 f0       	breq	.+38     	; 0x4d0e <spi_end+0x42>
    4ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    4cea:	89 f0       	breq	.+34     	; 0x4d0e <spi_end+0x42>
    4cec:	2c 2f       	mov	r18, r28
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	ed b7       	in	r30, 0x3d	; 61
    4cf2:	fe b7       	in	r31, 0x3e	; 62
    4cf4:	37 83       	std	Z+7, r19	; 0x07
    4cf6:	26 83       	std	Z+6, r18	; 0x06
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	95 83       	std	Z+5, r25	; 0x05
    4cfc:	84 83       	std	Z+4, r24	; 0x04
    4cfe:	88 ed       	ldi	r24, 0xD8	; 216
    4d00:	92 e0       	ldi	r25, 0x02	; 2
    4d02:	a0 e0       	ldi	r26, 0x00	; 0
    4d04:	81 83       	std	Z+1, r24	; 0x01
    4d06:	92 83       	std	Z+2, r25	; 0x02
    4d08:	a3 83       	std	Z+3, r26	; 0x03
    4d0a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    4d0e:	8c 2f       	mov	r24, r28
    4d10:	c3 df       	rcall	.-122    	; 0x4c98 <chip_deselect>
    4d12:	8f ef       	ldi	r24, 0xFF	; 255
    4d14:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4d18:	ad b7       	in	r26, 0x3d	; 61
    4d1a:	be b7       	in	r27, 0x3e	; 62
    4d1c:	17 96       	adiw	r26, 0x07	; 7
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	be bf       	out	0x3e, r27	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	ad bf       	out	0x3d, r26	; 61
    4d28:	cf 91       	pop	r28
    4d2a:	08 95       	ret

00004d2c <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    4d2c:	cf c4       	rjmp	.+2462   	; 0x56cc <SPI0_TX>
    4d2e:	08 95       	ret

00004d30 <spi_RX_buffer>:
    4d30:	f7 c4       	rjmp	.+2542   	; 0x5720 <SPI0_RX>
    4d32:	08 95       	ret

00004d34 <spi_TX>:
    4d34:	a1 e0       	ldi	r26, 0x01	; 1
    4d36:	b0 e0       	ldi	r27, 0x00	; 0
    4d38:	e0 ea       	ldi	r30, 0xA0	; 160
    4d3a:	f6 e2       	ldi	r31, 0x26	; 38
    4d3c:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    4d40:	89 83       	std	Y+1, r24	; 0x01
    4d42:	61 e0       	ldi	r22, 0x01	; 1
    4d44:	70 e0       	ldi	r23, 0x00	; 0
    4d46:	ce 01       	movw	r24, r28
    4d48:	01 96       	adiw	r24, 0x01	; 1
    4d4a:	c0 d4       	rcall	.+2432   	; 0x56cc <SPI0_TX>
    4d4c:	21 96       	adiw	r28, 0x01	; 1
    4d4e:	e2 e0       	ldi	r30, 0x02	; 2
    4d50:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00004d54 <spi_init>:
    4d54:	cf 92       	push	r12
    4d56:	df 92       	push	r13
    4d58:	ef 92       	push	r14
    4d5a:	ff 92       	push	r15
    4d5c:	6b 01       	movw	r12, r22
    4d5e:	7c 01       	movw	r14, r24
    4d60:	84 2f       	mov	r24, r20
    4d62:	9a df       	rcall	.-204    	; 0x4c98 <chip_deselect>
    4d64:	8f ef       	ldi	r24, 0xFF	; 255
    4d66:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4d6a:	c7 01       	movw	r24, r14
    4d6c:	b6 01       	movw	r22, r12
    4d6e:	81 d4       	rcall	.+2306   	; 0x5672 <SPI0_Init>
    4d70:	80 e0       	ldi	r24, 0x00	; 0
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	3e d4       	rcall	.+2172   	; 0x55f2 <SPI0_Mode>
    4d76:	8f ef       	ldi	r24, 0xFF	; 255
    4d78:	dd df       	rcall	.-70     	; 0x4d34 <spi_TX>
    4d7a:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d7e:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d82:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d86:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    4d8a:	ff 90       	pop	r15
    4d8c:	ef 90       	pop	r14
    4d8e:	df 90       	pop	r13
    4d90:	cf 90       	pop	r12
    4d92:	08 95       	ret

00004d94 <spi_begin>:
    4d94:	cf 92       	push	r12
    4d96:	df 92       	push	r13
    4d98:	ef 92       	push	r14
    4d9a:	ff 92       	push	r15
    4d9c:	cf 93       	push	r28
    4d9e:	df 93       	push	r29
    4da0:	ad b7       	in	r26, 0x3d	; 61
    4da2:	be b7       	in	r27, 0x3e	; 62
    4da4:	17 97       	sbiw	r26, 0x07	; 7
    4da6:	0f b6       	in	r0, 0x3f	; 63
    4da8:	f8 94       	cli
    4daa:	be bf       	out	0x3e, r27	; 62
    4dac:	0f be       	out	0x3f, r0	; 63
    4dae:	ad bf       	out	0x3d, r26	; 61
    4db0:	6b 01       	movw	r12, r22
    4db2:	7c 01       	movw	r14, r24
    4db4:	ea 01       	movw	r28, r20
    4db6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4dba:	8f 3f       	cpi	r24, 0xFF	; 255
    4dbc:	79 f0       	breq	.+30     	; 0x4ddc <spi_begin+0x48>
    4dbe:	ed b7       	in	r30, 0x3d	; 61
    4dc0:	fe b7       	in	r31, 0x3e	; 62
    4dc2:	46 83       	std	Z+6, r20	; 0x06
    4dc4:	d7 83       	std	Z+7, r29	; 0x07
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	95 83       	std	Z+5, r25	; 0x05
    4dca:	84 83       	std	Z+4, r24	; 0x04
    4dcc:	86 ef       	ldi	r24, 0xF6	; 246
    4dce:	92 e0       	ldi	r25, 0x02	; 2
    4dd0:	a0 e0       	ldi	r26, 0x00	; 0
    4dd2:	81 83       	std	Z+1, r24	; 0x01
    4dd4:	92 83       	std	Z+2, r25	; 0x02
    4dd6:	a3 83       	std	Z+3, r26	; 0x03
    4dd8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    4ddc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4de0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4de4:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4de8:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4dec:	8c 15       	cp	r24, r12
    4dee:	9d 05       	cpc	r25, r13
    4df0:	ae 05       	cpc	r26, r14
    4df2:	bf 05       	cpc	r27, r15
    4df4:	21 f0       	breq	.+8      	; 0x4dfe <spi_begin+0x6a>
    4df6:	ae 01       	movw	r20, r28
    4df8:	c7 01       	movw	r24, r14
    4dfa:	b6 01       	movw	r22, r12
    4dfc:	ab df       	rcall	.-170    	; 0x4d54 <spi_init>
    4dfe:	8c 2f       	mov	r24, r28
    4e00:	32 df       	rcall	.-412    	; 0x4c66 <chip_select>
    4e02:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    4e06:	ad b7       	in	r26, 0x3d	; 61
    4e08:	be b7       	in	r27, 0x3e	; 62
    4e0a:	17 96       	adiw	r26, 0x07	; 7
    4e0c:	0f b6       	in	r0, 0x3f	; 63
    4e0e:	f8 94       	cli
    4e10:	be bf       	out	0x3e, r27	; 62
    4e12:	0f be       	out	0x3f, r0	; 63
    4e14:	ad bf       	out	0x3d, r26	; 61
    4e16:	df 91       	pop	r29
    4e18:	cf 91       	pop	r28
    4e1a:	ff 90       	pop	r15
    4e1c:	ef 90       	pop	r14
    4e1e:	df 90       	pop	r13
    4e20:	cf 90       	pop	r12
    4e22:	08 95       	ret

00004e24 <spi_TXRX>:
    4e24:	a1 e0       	ldi	r26, 0x01	; 1
    4e26:	b0 e0       	ldi	r27, 0x00	; 0
    4e28:	e8 e1       	ldi	r30, 0x18	; 24
    4e2a:	f7 e2       	ldi	r31, 0x27	; 39
    4e2c:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    4e30:	89 83       	std	Y+1, r24	; 0x01
    4e32:	61 e0       	ldi	r22, 0x01	; 1
    4e34:	70 e0       	ldi	r23, 0x00	; 0
    4e36:	ce 01       	movw	r24, r28
    4e38:	01 96       	adiw	r24, 0x01	; 1
    4e3a:	5c d4       	rcall	.+2232   	; 0x56f4 <SPI0_TXRX>
    4e3c:	89 81       	ldd	r24, Y+1	; 0x01
    4e3e:	21 96       	adiw	r28, 0x01	; 1
    4e40:	e2 e0       	ldi	r30, 0x02	; 2
    4e42:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00004e46 <set_error>:
    4e46:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <__data_end>
    4e4a:	2c 9a       	sbi	0x05, 4	; 5
    4e4c:	24 9a       	sbi	0x04, 4	; 4
    4e4e:	08 95       	ret

00004e50 <clear_error>:
    4e50:	10 92 5a 17 	sts	0x175A, r1	; 0x80175a <__data_end>
    4e54:	2c 98       	cbi	0x05, 4	; 5
    4e56:	24 9a       	sbi	0x04, 4	; 4
    4e58:	08 95       	ret

00004e5a <is_error>:
    4e5a:	80 91 5a 17 	lds	r24, 0x175A	; 0x80175a <__data_end>
    4e5e:	08 95       	ret

00004e60 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4e60:	a2 e0       	ldi	r26, 0x02	; 2
    4e62:	b0 e0       	ldi	r27, 0x00	; 0
    4e64:	e6 e3       	ldi	r30, 0x36	; 54
    4e66:	f7 e2       	ldi	r31, 0x27	; 39
    4e68:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4e6c:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <__brkval>
    4e70:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <__brkval+0x1>
    4e74:	21 15       	cp	r18, r1
    4e76:	31 05       	cpc	r19, r1
    4e78:	11 f4       	brne	.+4      	; 0x4e7e <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4e7a:	21 e9       	ldi	r18, 0x91	; 145
    4e7c:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4e7e:	ce 01       	movw	r24, r28
    4e80:	01 96       	adiw	r24, 0x01	; 1
    4e82:	82 1b       	sub	r24, r18
    4e84:	93 0b       	sbc	r25, r19
    4e86:	22 96       	adiw	r28, 0x02	; 2
    4e88:	e2 e0       	ldi	r30, 0x02	; 2
    4e8a:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00004e8e <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e8e:	a9 e0       	ldi	r26, 0x09	; 9
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
    4e92:	ed e4       	ldi	r30, 0x4D	; 77
    4e94:	f7 e2       	ldi	r31, 0x27	; 39
    4e96:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4e9a:	e2 df       	rcall	.-60     	; 0x4e60 <freeRam>
    4e9c:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    4e9e:	88 87       	std	Y+8, r24	; 0x08
    4ea0:	ed b7       	in	r30, 0x3d	; 61
    4ea2:	fe b7       	in	r31, 0x3e	; 62
    4ea4:	95 83       	std	Z+5, r25	; 0x05
    4ea6:	84 83       	std	Z+4, r24	; 0x04
    4ea8:	8d e1       	ldi	r24, 0x1D	; 29
    4eaa:	94 e0       	ldi	r25, 0x04	; 4
    4eac:	a0 e0       	ldi	r26, 0x00	; 0
    4eae:	81 83       	std	Z+1, r24	; 0x01
    4eb0:	92 83       	std	Z+2, r25	; 0x02
    4eb2:	a3 83       	std	Z+3, r26	; 0x03
    4eb4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4eb8:	8f ef       	ldi	r24, 0xFF	; 255
    4eba:	90 e4       	ldi	r25, 0x40	; 64
    4ebc:	ed b7       	in	r30, 0x3d	; 61
    4ebe:	fe b7       	in	r31, 0x3e	; 62
    4ec0:	95 83       	std	Z+5, r25	; 0x05
    4ec2:	84 83       	std	Z+4, r24	; 0x04
    4ec4:	8a e0       	ldi	r24, 0x0A	; 10
    4ec6:	94 e0       	ldi	r25, 0x04	; 4
    4ec8:	a0 e0       	ldi	r26, 0x00	; 0
    4eca:	81 83       	std	Z+1, r24	; 0x01
    4ecc:	92 83       	std	Z+2, r25	; 0x02
    4ece:	a3 83       	std	Z+3, r26	; 0x03
    4ed0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4ed4:	ce 01       	movw	r24, r28
    4ed6:	08 96       	adiw	r24, 0x08	; 8
    4ed8:	ed b7       	in	r30, 0x3d	; 61
    4eda:	fe b7       	in	r31, 0x3e	; 62
    4edc:	95 83       	std	Z+5, r25	; 0x05
    4ede:	84 83       	std	Z+4, r24	; 0x04
    4ee0:	87 ef       	ldi	r24, 0xF7	; 247
    4ee2:	93 e0       	ldi	r25, 0x03	; 3
    4ee4:	a0 e0       	ldi	r26, 0x00	; 0
    4ee6:	81 83       	std	Z+1, r24	; 0x01
    4ee8:	92 83       	std	Z+2, r25	; 0x02
    4eea:	a3 83       	std	Z+3, r26	; 0x03
    4eec:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4ef0:	81 e9       	ldi	r24, 0x91	; 145
    4ef2:	91 e2       	ldi	r25, 0x21	; 33
    4ef4:	ed b7       	in	r30, 0x3d	; 61
    4ef6:	fe b7       	in	r31, 0x3e	; 62
    4ef8:	97 83       	std	Z+7, r25	; 0x07
    4efa:	86 83       	std	Z+6, r24	; 0x06
    4efc:	8a e5       	ldi	r24, 0x5A	; 90
    4efe:	97 e1       	ldi	r25, 0x17	; 23
    4f00:	95 83       	std	Z+5, r25	; 0x05
    4f02:	84 83       	std	Z+4, r24	; 0x04
    4f04:	89 ed       	ldi	r24, 0xD9	; 217
    4f06:	93 e0       	ldi	r25, 0x03	; 3
    4f08:	a0 e0       	ldi	r26, 0x00	; 0
    4f0a:	81 83       	std	Z+1, r24	; 0x01
    4f0c:	92 83       	std	Z+2, r25	; 0x02
    4f0e:	a3 83       	std	Z+3, r26	; 0x03
    4f10:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4f14:	8a e5       	ldi	r24, 0x5A	; 90
    4f16:	97 e1       	ldi	r25, 0x17	; 23
    4f18:	ed b7       	in	r30, 0x3d	; 61
    4f1a:	fe b7       	in	r31, 0x3e	; 62
    4f1c:	97 83       	std	Z+7, r25	; 0x07
    4f1e:	86 83       	std	Z+6, r24	; 0x06
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	91 e0       	ldi	r25, 0x01	; 1
    4f24:	95 83       	std	Z+5, r25	; 0x05
    4f26:	84 83       	std	Z+4, r24	; 0x04
    4f28:	8b eb       	ldi	r24, 0xBB	; 187
    4f2a:	93 e0       	ldi	r25, 0x03	; 3
    4f2c:	a0 e0       	ldi	r26, 0x00	; 0
    4f2e:	81 83       	std	Z+1, r24	; 0x01
    4f30:	92 83       	std	Z+2, r25	; 0x02
    4f32:	a3 83       	std	Z+3, r26	; 0x03
    4f34:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	ed b7       	in	r30, 0x3d	; 61
    4f3e:	fe b7       	in	r31, 0x3e	; 62
    4f40:	97 83       	std	Z+7, r25	; 0x07
    4f42:	86 83       	std	Z+6, r24	; 0x06
    4f44:	81 e9       	ldi	r24, 0x91	; 145
    4f46:	91 e2       	ldi	r25, 0x21	; 33
    4f48:	95 83       	std	Z+5, r25	; 0x05
    4f4a:	84 83       	std	Z+4, r24	; 0x04
    4f4c:	8d e9       	ldi	r24, 0x9D	; 157
    4f4e:	93 e0       	ldi	r25, 0x03	; 3
    4f50:	a0 e0       	ldi	r26, 0x00	; 0
    4f52:	81 83       	std	Z+1, r24	; 0x01
    4f54:	92 83       	std	Z+2, r25	; 0x02
    4f56:	a3 83       	std	Z+3, r26	; 0x03
    4f58:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4f5c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    4f60:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    4f64:	ed b7       	in	r30, 0x3d	; 61
    4f66:	fe b7       	in	r31, 0x3e	; 62
    4f68:	97 83       	std	Z+7, r25	; 0x07
    4f6a:	86 83       	std	Z+6, r24	; 0x06
    4f6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4f70:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4f74:	95 83       	std	Z+5, r25	; 0x05
    4f76:	84 83       	std	Z+4, r24	; 0x04
    4f78:	8f e7       	ldi	r24, 0x7F	; 127
    4f7a:	93 e0       	ldi	r25, 0x03	; 3
    4f7c:	a0 e0       	ldi	r26, 0x00	; 0
    4f7e:	81 83       	std	Z+1, r24	; 0x01
    4f80:	92 83       	std	Z+2, r25	; 0x02
    4f82:	a3 83       	std	Z+3, r26	; 0x03
    4f84:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4f88:	80 91 8d 21 	lds	r24, 0x218D	; 0x80218d <__brkval>
    4f8c:	90 91 8e 21 	lds	r25, 0x218E	; 0x80218e <__brkval+0x1>
    4f90:	ed b7       	in	r30, 0x3d	; 61
    4f92:	fe b7       	in	r31, 0x3e	; 62
    4f94:	95 83       	std	Z+5, r25	; 0x05
    4f96:	84 83       	std	Z+4, r24	; 0x04
    4f98:	8b e6       	ldi	r24, 0x6B	; 107
    4f9a:	93 e0       	ldi	r25, 0x03	; 3
    4f9c:	a0 e0       	ldi	r26, 0x00	; 0
    4f9e:	81 83       	std	Z+1, r24	; 0x01
    4fa0:	92 83       	std	Z+2, r25	; 0x02
    4fa2:	a3 83       	std	Z+3, r26	; 0x03
    4fa4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

}
    4fa8:	29 96       	adiw	r28, 0x09	; 9
    4faa:	e2 e0       	ldi	r30, 0x02	; 2
    4fac:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00004fb0 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4fb0:	ef 92       	push	r14
    4fb2:	ff 92       	push	r15
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	ad b7       	in	r26, 0x3d	; 61
    4fbe:	be b7       	in	r27, 0x3e	; 62
    4fc0:	17 97       	sbiw	r26, 0x07	; 7
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	be bf       	out	0x3e, r27	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	ad bf       	out	0x3d, r26	; 61
    4fcc:	8c 01       	movw	r16, r24
    4fce:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4fd0:	0e 94 4e e3 	call	0x1c69c	; 0x1c69c <calloc>
    4fd4:	ec 01       	movw	r28, r24
    if(!p)
    4fd6:	89 2b       	or	r24, r25
    4fd8:	71 f4       	brne	.+28     	; 0x4ff6 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4fda:	ed b7       	in	r30, 0x3d	; 61
    4fdc:	fe b7       	in	r31, 0x3e	; 62
    4fde:	f7 82       	std	Z+7, r15	; 0x07
    4fe0:	e6 82       	std	Z+6, r14	; 0x06
    4fe2:	15 83       	std	Z+5, r17	; 0x05
    4fe4:	04 83       	std	Z+4, r16	; 0x04
    4fe6:	80 e5       	ldi	r24, 0x50	; 80
    4fe8:	93 e0       	ldi	r25, 0x03	; 3
    4fea:	a0 e0       	ldi	r26, 0x00	; 0
    4fec:	81 83       	std	Z+1, r24	; 0x01
    4fee:	92 83       	std	Z+2, r25	; 0x02
    4ff0:	a3 83       	std	Z+3, r26	; 0x03
    4ff2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }
    return(p);
}
    4ff6:	ce 01       	movw	r24, r28
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	27 96       	adiw	r28, 0x07	; 7
    4ffe:	e6 e0       	ldi	r30, 0x06	; 6
    5000:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00005004 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5004:	0f 93       	push	r16
    5006:	1f 93       	push	r17
    5008:	cf 93       	push	r28
    500a:	df 93       	push	r29
    500c:	00 d0       	rcall	.+0      	; 0x500e <safemalloc+0xa>
    500e:	00 d0       	rcall	.+0      	; 0x5010 <safemalloc+0xc>
    5010:	1f 92       	push	r1
    5012:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    5014:	61 e0       	ldi	r22, 0x01	; 1
    5016:	70 e0       	ldi	r23, 0x00	; 0
    5018:	0e 94 4e e3 	call	0x1c69c	; 0x1c69c <calloc>
    501c:	ec 01       	movw	r28, r24
    if(!p)
    501e:	89 2b       	or	r24, r25
    5020:	61 f4       	brne	.+24     	; 0x503a <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5022:	ed b7       	in	r30, 0x3d	; 61
    5024:	fe b7       	in	r31, 0x3e	; 62
    5026:	15 83       	std	Z+5, r17	; 0x05
    5028:	04 83       	std	Z+4, r16	; 0x04
    502a:	88 e3       	ldi	r24, 0x38	; 56
    502c:	93 e0       	ldi	r25, 0x03	; 3
    502e:	a0 e0       	ldi	r26, 0x00	; 0
    5030:	81 83       	std	Z+1, r24	; 0x01
    5032:	92 83       	std	Z+2, r25	; 0x02
    5034:	a3 83       	std	Z+3, r26	; 0x03
    5036:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }
    return(p);
}
    503a:	ce 01       	movw	r24, r28
    503c:	cd b7       	in	r28, 0x3d	; 61
    503e:	de b7       	in	r29, 0x3e	; 62
    5040:	25 96       	adiw	r28, 0x05	; 5
    5042:	e4 e0       	ldi	r30, 0x04	; 4
    5044:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00005048 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    5048:	ad b7       	in	r26, 0x3d	; 61
    504a:	be b7       	in	r27, 0x3e	; 62
    504c:	17 97       	sbiw	r26, 0x07	; 7
    504e:	0f b6       	in	r0, 0x3f	; 63
    5050:	f8 94       	cli
    5052:	be bf       	out	0x3e, r27	; 62
    5054:	0f be       	out	0x3f, r0	; 63
    5056:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5058:	00 97       	sbiw	r24, 0x00	; 0
    505a:	11 f1       	breq	.+68     	; 0x50a0 <safefree+0x58>
        return;

    if(__brkval)
    505c:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <__brkval>
    5060:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <__brkval+0x1>
    5064:	21 15       	cp	r18, r1
    5066:	31 05       	cpc	r19, r1
    5068:	11 f4       	brne	.+4      	; 0x506e <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    506a:	21 e9       	ldi	r18, 0x91	; 145
    506c:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    506e:	41 e2       	ldi	r20, 0x21	; 33
    5070:	81 39       	cpi	r24, 0x91	; 145
    5072:	94 07       	cpc	r25, r20
    5074:	30 f0       	brcs	.+12     	; 0x5082 <safefree+0x3a>
    5076:	28 17       	cp	r18, r24
    5078:	39 07       	cpc	r19, r25
    507a:	18 f0       	brcs	.+6      	; 0x5082 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    507c:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <free>
        return;
    5080:	0f c0       	rjmp	.+30     	; 0x50a0 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5082:	ed b7       	in	r30, 0x3d	; 61
    5084:	fe b7       	in	r31, 0x3e	; 62
    5086:	37 83       	std	Z+7, r19	; 0x07
    5088:	26 83       	std	Z+6, r18	; 0x06
    508a:	95 83       	std	Z+5, r25	; 0x05
    508c:	84 83       	std	Z+4, r24	; 0x04
    508e:	83 e1       	ldi	r24, 0x13	; 19
    5090:	93 e0       	ldi	r25, 0x03	; 3
    5092:	a0 e0       	ldi	r26, 0x00	; 0
    5094:	81 83       	std	Z+1, r24	; 0x01
    5096:	92 83       	std	Z+2, r25	; 0x02
    5098:	a3 83       	std	Z+3, r26	; 0x03
    509a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    PrintFree();
}
    509e:	f7 de       	rcall	.-530    	; 0x4e8e <PrintFree>
    50a0:	ad b7       	in	r26, 0x3d	; 61
    50a2:	be b7       	in	r27, 0x3e	; 62
    50a4:	17 96       	adiw	r26, 0x07	; 7
    50a6:	0f b6       	in	r0, 0x3f	; 63
    50a8:	f8 94       	cli
    50aa:	be bf       	out	0x3e, r27	; 62
    50ac:	0f be       	out	0x3f, r0	; 63
    50ae:	ad bf       	out	0x3d, r26	; 61
    50b0:	08 95       	ret

000050b2 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    50b2:	64 36       	cpi	r22, 0x64	; 100
    50b4:	71 05       	cpc	r23, r1
    50b6:	81 05       	cpc	r24, r1
    50b8:	91 05       	cpc	r25, r1
    50ba:	58 f0       	brcs	.+22     	; 0x50d2 <delayus+0x20>
    {
        us -= 100U;
    50bc:	64 56       	subi	r22, 0x64	; 100
    50be:	71 09       	sbc	r23, r1
    50c0:	81 09       	sbc	r24, r1
    50c2:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    50c4:	e3 ef       	ldi	r30, 0xF3	; 243
    50c6:	f1 e0       	ldi	r31, 0x01	; 1
    50c8:	31 97       	sbiw	r30, 0x01	; 1
    50ca:	f1 f7       	brne	.-4      	; 0x50c8 <delayus+0x16>
    50cc:	00 c0       	rjmp	.+0      	; 0x50ce <delayus+0x1c>
    50ce:	00 00       	nop
    50d0:	f0 cf       	rjmp	.-32     	; 0x50b2 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    50d2:	6a 30       	cpi	r22, 0x0A	; 10
    50d4:	71 05       	cpc	r23, r1
    50d6:	81 05       	cpc	r24, r1
    50d8:	91 05       	cpc	r25, r1
    50da:	48 f0       	brcs	.+18     	; 0x50ee <delayus+0x3c>
    {
        us -= 10U;
    50dc:	6a 50       	subi	r22, 0x0A	; 10
    50de:	71 09       	sbc	r23, r1
    50e0:	81 09       	sbc	r24, r1
    50e2:	91 09       	sbc	r25, r1
    50e4:	f2 e4       	ldi	r31, 0x42	; 66
    50e6:	fa 95       	dec	r31
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <delayus+0x34>
    50ea:	00 c0       	rjmp	.+0      	; 0x50ec <delayus+0x3a>
    50ec:	f2 cf       	rjmp	.-28     	; 0x50d2 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    50ee:	61 15       	cp	r22, r1
    50f0:	71 05       	cpc	r23, r1
    50f2:	81 05       	cpc	r24, r1
    50f4:	91 05       	cpc	r25, r1
    50f6:	49 f0       	breq	.+18     	; 0x510a <delayus+0x58>
    {
        --us;
    50f8:	61 50       	subi	r22, 0x01	; 1
    50fa:	71 09       	sbc	r23, r1
    50fc:	81 09       	sbc	r24, r1
    50fe:	91 09       	sbc	r25, r1
    5100:	26 e0       	ldi	r18, 0x06	; 6
    5102:	2a 95       	dec	r18
    5104:	f1 f7       	brne	.-4      	; 0x5102 <delayus+0x50>
    5106:	00 c0       	rjmp	.+0      	; 0x5108 <delayus+0x56>
    5108:	f2 cf       	rjmp	.-28     	; 0x50ee <delayus+0x3c>
        _delay_us(1);
    }
}
    510a:	08 95       	ret

0000510c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    510c:	61 15       	cp	r22, r1
    510e:	71 05       	cpc	r23, r1
    5110:	81 05       	cpc	r24, r1
    5112:	91 05       	cpc	r25, r1
    5114:	09 f4       	brne	.+2      	; 0x5118 <delayms+0xc>
    5116:	41 c0       	rjmp	.+130    	; 0x519a <delayms+0x8e>
    5118:	e3 ef       	ldi	r30, 0xF3	; 243
    511a:	f1 e0       	ldi	r31, 0x01	; 1
    511c:	31 97       	sbiw	r30, 0x01	; 1
    511e:	f1 f7       	brne	.-4      	; 0x511c <delayms+0x10>
    5120:	00 c0       	rjmp	.+0      	; 0x5122 <delayms+0x16>
    5122:	00 00       	nop
    5124:	e3 ef       	ldi	r30, 0xF3	; 243
    5126:	f1 e0       	ldi	r31, 0x01	; 1
    5128:	31 97       	sbiw	r30, 0x01	; 1
    512a:	f1 f7       	brne	.-4      	; 0x5128 <delayms+0x1c>
    512c:	00 c0       	rjmp	.+0      	; 0x512e <delayms+0x22>
    512e:	00 00       	nop
    5130:	e3 ef       	ldi	r30, 0xF3	; 243
    5132:	f1 e0       	ldi	r31, 0x01	; 1
    5134:	31 97       	sbiw	r30, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <delayms+0x28>
    5138:	00 c0       	rjmp	.+0      	; 0x513a <delayms+0x2e>
    513a:	00 00       	nop
    513c:	e3 ef       	ldi	r30, 0xF3	; 243
    513e:	f1 e0       	ldi	r31, 0x01	; 1
    5140:	31 97       	sbiw	r30, 0x01	; 1
    5142:	f1 f7       	brne	.-4      	; 0x5140 <delayms+0x34>
    5144:	00 c0       	rjmp	.+0      	; 0x5146 <delayms+0x3a>
    5146:	00 00       	nop
    5148:	e3 ef       	ldi	r30, 0xF3	; 243
    514a:	f1 e0       	ldi	r31, 0x01	; 1
    514c:	31 97       	sbiw	r30, 0x01	; 1
    514e:	f1 f7       	brne	.-4      	; 0x514c <delayms+0x40>
    5150:	00 c0       	rjmp	.+0      	; 0x5152 <delayms+0x46>
    5152:	00 00       	nop
    5154:	e3 ef       	ldi	r30, 0xF3	; 243
    5156:	f1 e0       	ldi	r31, 0x01	; 1
    5158:	31 97       	sbiw	r30, 0x01	; 1
    515a:	f1 f7       	brne	.-4      	; 0x5158 <delayms+0x4c>
    515c:	00 c0       	rjmp	.+0      	; 0x515e <delayms+0x52>
    515e:	00 00       	nop
    5160:	e3 ef       	ldi	r30, 0xF3	; 243
    5162:	f1 e0       	ldi	r31, 0x01	; 1
    5164:	31 97       	sbiw	r30, 0x01	; 1
    5166:	f1 f7       	brne	.-4      	; 0x5164 <delayms+0x58>
    5168:	00 c0       	rjmp	.+0      	; 0x516a <delayms+0x5e>
    516a:	00 00       	nop
    516c:	e3 ef       	ldi	r30, 0xF3	; 243
    516e:	f1 e0       	ldi	r31, 0x01	; 1
    5170:	31 97       	sbiw	r30, 0x01	; 1
    5172:	f1 f7       	brne	.-4      	; 0x5170 <delayms+0x64>
    5174:	00 c0       	rjmp	.+0      	; 0x5176 <delayms+0x6a>
    5176:	00 00       	nop
    5178:	e3 ef       	ldi	r30, 0xF3	; 243
    517a:	f1 e0       	ldi	r31, 0x01	; 1
    517c:	31 97       	sbiw	r30, 0x01	; 1
    517e:	f1 f7       	brne	.-4      	; 0x517c <delayms+0x70>
    5180:	00 c0       	rjmp	.+0      	; 0x5182 <delayms+0x76>
    5182:	00 00       	nop
    5184:	e3 ef       	ldi	r30, 0xF3	; 243
    5186:	f1 e0       	ldi	r31, 0x01	; 1
    5188:	31 97       	sbiw	r30, 0x01	; 1
    518a:	f1 f7       	brne	.-4      	; 0x5188 <delayms+0x7c>
    518c:	00 c0       	rjmp	.+0      	; 0x518e <delayms+0x82>
    518e:	00 00       	nop
    5190:	61 50       	subi	r22, 0x01	; 1
    5192:	71 09       	sbc	r23, r1
    5194:	81 09       	sbc	r24, r1
    5196:	91 09       	sbc	r25, r1
    5198:	b9 cf       	rjmp	.-142    	; 0x510c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    519a:	08 95       	ret

0000519c <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    519c:	81 11       	cpse	r24, r1
    519e:	0e c0       	rjmp	.+28     	; 0x51bc <uart_rx_flush+0x20>
    51a0:	f8 94       	cli
    51a2:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <uarts+0x4>
    51a6:	10 92 d7 19 	sts	0x19D7, r1	; 0x8019d7 <uarts+0x3>
    51aa:	10 92 d4 19 	sts	0x19D4, r1	; 0x8019d4 <uarts>
    51ae:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <uarts+0x1>
    51b2:	10 92 d6 19 	sts	0x19D6, r1	; 0x8019d6 <uarts+0x2>
    51b6:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <uarts+0x5>
    51ba:	78 94       	sei
    51bc:	08 95       	ret

000051be <uart_ubr>:
    51be:	4f 92       	push	r4
    51c0:	5f 92       	push	r5
    51c2:	6f 92       	push	r6
    51c4:	7f 92       	push	r7
    51c6:	8f 92       	push	r8
    51c8:	9f 92       	push	r9
    51ca:	af 92       	push	r10
    51cc:	bf 92       	push	r11
    51ce:	cf 92       	push	r12
    51d0:	df 92       	push	r13
    51d2:	ef 92       	push	r14
    51d4:	ff 92       	push	r15
    51d6:	cf 93       	push	r28
    51d8:	df 93       	push	r29
    51da:	5a 01       	movw	r10, r20
    51dc:	e9 01       	movw	r28, r18
    51de:	0e 94 ec e1 	call	0x1c3d8	; 0x1c3d8 <__floatunsisf>
    51e2:	2b 01       	movw	r4, r22
    51e4:	3c 01       	movw	r6, r24
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	51 e4       	ldi	r21, 0x41	; 65
    51ee:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    51f2:	9b 01       	movw	r18, r22
    51f4:	ac 01       	movw	r20, r24
    51f6:	60 e8       	ldi	r22, 0x80	; 128
    51f8:	76 e9       	ldi	r23, 0x96	; 150
    51fa:	88 e9       	ldi	r24, 0x98	; 152
    51fc:	9b e4       	ldi	r25, 0x4B	; 75
    51fe:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    5202:	20 e0       	ldi	r18, 0x00	; 0
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	40 e8       	ldi	r20, 0x80	; 128
    5208:	5f e3       	ldi	r21, 0x3F	; 63
    520a:	0e 94 ea e0 	call	0x1c1d4	; 0x1c1d4 <__subsf3>
    520e:	0e 94 05 e3 	call	0x1c60a	; 0x1c60a <round>
    5212:	0e 94 c0 e1 	call	0x1c380	; 0x1c380 <__fixunssfsi>
    5216:	6b 01       	movw	r12, r22
    5218:	7c 01       	movw	r14, r24
    521a:	c1 14       	cp	r12, r1
    521c:	80 e1       	ldi	r24, 0x10	; 16
    521e:	d8 06       	cpc	r13, r24
    5220:	e1 04       	cpc	r14, r1
    5222:	f1 04       	cpc	r15, r1
    5224:	58 f4       	brcc	.+22     	; 0x523c <uart_ubr+0x7e>
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	f5 01       	movw	r30, r10
    522c:	91 83       	std	Z+1, r25	; 0x01
    522e:	80 83       	st	Z, r24
    5230:	81 2c       	mov	r8, r1
    5232:	91 2c       	mov	r9, r1
    5234:	a1 2c       	mov	r10, r1
    5236:	21 e4       	ldi	r18, 0x41	; 65
    5238:	b2 2e       	mov	r11, r18
    523a:	31 c0       	rjmp	.+98     	; 0x529e <uart_ubr+0xe0>
    523c:	f5 01       	movw	r30, r10
    523e:	11 82       	std	Z+1, r1	; 0x01
    5240:	10 82       	st	Z, r1
    5242:	20 e0       	ldi	r18, 0x00	; 0
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	40 e8       	ldi	r20, 0x80	; 128
    5248:	51 e4       	ldi	r21, 0x41	; 65
    524a:	c3 01       	movw	r24, r6
    524c:	b2 01       	movw	r22, r4
    524e:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    5252:	9b 01       	movw	r18, r22
    5254:	ac 01       	movw	r20, r24
    5256:	60 e8       	ldi	r22, 0x80	; 128
    5258:	76 e9       	ldi	r23, 0x96	; 150
    525a:	88 e9       	ldi	r24, 0x98	; 152
    525c:	9b e4       	ldi	r25, 0x4B	; 75
    525e:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	30 e0       	ldi	r19, 0x00	; 0
    5266:	40 e8       	ldi	r20, 0x80	; 128
    5268:	5f e3       	ldi	r21, 0x3F	; 63
    526a:	0e 94 ea e0 	call	0x1c1d4	; 0x1c1d4 <__subsf3>
    526e:	0e 94 05 e3 	call	0x1c60a	; 0x1c60a <round>
    5272:	0e 94 c0 e1 	call	0x1c380	; 0x1c380 <__fixunssfsi>
    5276:	6b 01       	movw	r12, r22
    5278:	7c 01       	movw	r14, r24
    527a:	81 2c       	mov	r8, r1
    527c:	91 2c       	mov	r9, r1
    527e:	90 e8       	ldi	r25, 0x80	; 128
    5280:	a9 2e       	mov	r10, r25
    5282:	91 e4       	ldi	r25, 0x41	; 65
    5284:	b9 2e       	mov	r11, r25
    5286:	c1 14       	cp	r12, r1
    5288:	f0 e1       	ldi	r31, 0x10	; 16
    528a:	df 06       	cpc	r13, r31
    528c:	e1 04       	cpc	r14, r1
    528e:	f1 04       	cpc	r15, r1
    5290:	30 f0       	brcs	.+12     	; 0x529e <uart_ubr+0xe0>
    5292:	cc 24       	eor	r12, r12
    5294:	ca 94       	dec	r12
    5296:	8f e0       	ldi	r24, 0x0F	; 15
    5298:	d8 2e       	mov	r13, r24
    529a:	e1 2c       	mov	r14, r1
    529c:	f1 2c       	mov	r15, r1
    529e:	c7 01       	movw	r24, r14
    52a0:	b6 01       	movw	r22, r12
    52a2:	6f 5f       	subi	r22, 0xFF	; 255
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	8f 4f       	sbci	r24, 0xFF	; 255
    52a8:	9f 4f       	sbci	r25, 0xFF	; 255
    52aa:	0e 94 ec e1 	call	0x1c3d8	; 0x1c3d8 <__floatunsisf>
    52ae:	a5 01       	movw	r20, r10
    52b0:	94 01       	movw	r18, r8
    52b2:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    52b6:	9b 01       	movw	r18, r22
    52b8:	ac 01       	movw	r20, r24
    52ba:	60 e8       	ldi	r22, 0x80	; 128
    52bc:	76 e9       	ldi	r23, 0x96	; 150
    52be:	88 e9       	ldi	r24, 0x98	; 152
    52c0:	9b e4       	ldi	r25, 0x4B	; 75
    52c2:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    52c6:	0e 94 c0 e1 	call	0x1c380	; 0x1c380 <__fixunssfsi>
    52ca:	68 83       	st	Y, r22
    52cc:	79 83       	std	Y+1, r23	; 0x01
    52ce:	8a 83       	std	Y+2, r24	; 0x02
    52d0:	9b 83       	std	Y+3, r25	; 0x03
    52d2:	c6 01       	movw	r24, r12
    52d4:	df 91       	pop	r29
    52d6:	cf 91       	pop	r28
    52d8:	ff 90       	pop	r15
    52da:	ef 90       	pop	r14
    52dc:	df 90       	pop	r13
    52de:	cf 90       	pop	r12
    52e0:	bf 90       	pop	r11
    52e2:	af 90       	pop	r10
    52e4:	9f 90       	pop	r9
    52e6:	8f 90       	pop	r8
    52e8:	7f 90       	pop	r7
    52ea:	6f 90       	pop	r6
    52ec:	5f 90       	pop	r5
    52ee:	4f 90       	pop	r4
    52f0:	08 95       	ret

000052f2 <uart_init>:
    52f2:	a6 e0       	ldi	r26, 0x06	; 6
    52f4:	b0 e0       	ldi	r27, 0x00	; 0
    52f6:	ef e7       	ldi	r30, 0x7F	; 127
    52f8:	f9 e2       	ldi	r31, 0x29	; 41
    52fa:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    52fe:	1e 82       	std	Y+6, r1	; 0x06
    5300:	1d 82       	std	Y+5, r1	; 0x05
    5302:	81 11       	cpse	r24, r1
    5304:	36 c0       	rjmp	.+108    	; 0x5372 <uart_init+0x80>
    5306:	cb 01       	movw	r24, r22
    5308:	ba 01       	movw	r22, r20
    530a:	9e 01       	movw	r18, r28
    530c:	2f 5f       	subi	r18, 0xFF	; 255
    530e:	3f 4f       	sbci	r19, 0xFF	; 255
    5310:	ae 01       	movw	r20, r28
    5312:	4b 5f       	subi	r20, 0xFB	; 251
    5314:	5f 4f       	sbci	r21, 0xFF	; 255
    5316:	53 df       	rcall	.-346    	; 0x51be <uart_ubr>
    5318:	f8 94       	cli
    531a:	10 92 d8 19 	sts	0x19D8, r1	; 0x8019d8 <uarts+0x4>
    531e:	10 92 d7 19 	sts	0x19D7, r1	; 0x8019d7 <uarts+0x3>
    5322:	10 92 d4 19 	sts	0x19D4, r1	; 0x8019d4 <uarts>
    5326:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <uarts+0x1>
    532a:	10 92 d6 19 	sts	0x19D6, r1	; 0x8019d6 <uarts+0x2>
    532e:	10 92 d9 19 	sts	0x19D9, r1	; 0x8019d9 <uarts+0x5>
    5332:	78 94       	sei
    5334:	f8 94       	cli
    5336:	58 9a       	sbi	0x0b, 0	; 11
    5338:	59 9a       	sbi	0x0b, 1	; 11
    533a:	50 98       	cbi	0x0a, 0	; 10
    533c:	51 9a       	sbi	0x0a, 1	; 10
    533e:	28 e9       	ldi	r18, 0x98	; 152
    5340:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5344:	2d 81       	ldd	r18, Y+5	; 0x05
    5346:	3e 81       	ldd	r19, Y+6	; 0x06
    5348:	23 2b       	or	r18, r19
    534a:	19 f0       	breq	.+6      	; 0x5352 <uart_init+0x60>
    534c:	22 e0       	ldi	r18, 0x02	; 2
    534e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5352:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5356:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    535a:	78 94       	sei
    535c:	61 e7       	ldi	r22, 0x71	; 113
    535e:	7a e2       	ldi	r23, 0x2A	; 42
    5360:	86 e8       	ldi	r24, 0x86	; 134
    5362:	9a e2       	ldi	r25, 0x2A	; 42
    5364:	0e 94 86 78 	call	0xf10c	; 0xf10c <fdevopen>
    5368:	69 81       	ldd	r22, Y+1	; 0x01
    536a:	7a 81       	ldd	r23, Y+2	; 0x02
    536c:	8b 81       	ldd	r24, Y+3	; 0x03
    536e:	9c 81       	ldd	r25, Y+4	; 0x04
    5370:	03 c0       	rjmp	.+6      	; 0x5378 <uart_init+0x86>
    5372:	60 e0       	ldi	r22, 0x00	; 0
    5374:	70 e0       	ldi	r23, 0x00	; 0
    5376:	cb 01       	movw	r24, r22
    5378:	26 96       	adiw	r28, 0x06	; 6
    537a:	e2 e0       	ldi	r30, 0x02	; 2
    537c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00005380 <uart_rx_interrupt>:
    5380:	cf 93       	push	r28
    5382:	df 93       	push	r29
    5384:	27 e5       	ldi	r18, 0x57	; 87
    5386:	82 9f       	mul	r24, r18
    5388:	c0 01       	movw	r24, r0
    538a:	11 24       	eor	r1, r1
    538c:	fc 01       	movw	r30, r24
    538e:	ec 52       	subi	r30, 0x2C	; 44
    5390:	f6 4e       	sbci	r31, 0xE6	; 230
    5392:	83 81       	ldd	r24, Z+3	; 0x03
    5394:	94 81       	ldd	r25, Z+4	; 0x04
    5396:	80 35       	cpi	r24, 0x50	; 80
    5398:	91 05       	cpc	r25, r1
    539a:	7c f4       	brge	.+30     	; 0x53ba <uart_rx_interrupt+0x3a>
    539c:	30 81       	ld	r19, Z
    539e:	21 e0       	ldi	r18, 0x01	; 1
    53a0:	23 0f       	add	r18, r19
    53a2:	20 83       	st	Z, r18
    53a4:	ef 01       	movw	r28, r30
    53a6:	c3 0f       	add	r28, r19
    53a8:	d1 1d       	adc	r29, r1
    53aa:	6e 83       	std	Y+6, r22	; 0x06
    53ac:	01 96       	adiw	r24, 0x01	; 1
    53ae:	94 83       	std	Z+4, r25	; 0x04
    53b0:	83 83       	std	Z+3, r24	; 0x03
    53b2:	20 35       	cpi	r18, 0x50	; 80
    53b4:	28 f0       	brcs	.+10     	; 0x53c0 <uart_rx_interrupt+0x40>
    53b6:	10 82       	st	Z, r1
    53b8:	03 c0       	rjmp	.+6      	; 0x53c0 <uart_rx_interrupt+0x40>
    53ba:	85 81       	ldd	r24, Z+5	; 0x05
    53bc:	81 60       	ori	r24, 0x01	; 1
    53be:	85 83       	std	Z+5, r24	; 0x05
    53c0:	df 91       	pop	r29
    53c2:	cf 91       	pop	r28
    53c4:	08 95       	ret

000053c6 <__vector_20>:
    53c6:	1f 92       	push	r1
    53c8:	0f 92       	push	r0
    53ca:	0f b6       	in	r0, 0x3f	; 63
    53cc:	0f 92       	push	r0
    53ce:	11 24       	eor	r1, r1
    53d0:	0b b6       	in	r0, 0x3b	; 59
    53d2:	0f 92       	push	r0
    53d4:	2f 93       	push	r18
    53d6:	3f 93       	push	r19
    53d8:	4f 93       	push	r20
    53da:	5f 93       	push	r21
    53dc:	6f 93       	push	r22
    53de:	7f 93       	push	r23
    53e0:	8f 93       	push	r24
    53e2:	9f 93       	push	r25
    53e4:	af 93       	push	r26
    53e6:	bf 93       	push	r27
    53e8:	ef 93       	push	r30
    53ea:	ff 93       	push	r31
    53ec:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    53f0:	80 e0       	ldi	r24, 0x00	; 0
    53f2:	c6 df       	rcall	.-116    	; 0x5380 <uart_rx_interrupt>
    53f4:	ff 91       	pop	r31
    53f6:	ef 91       	pop	r30
    53f8:	bf 91       	pop	r27
    53fa:	af 91       	pop	r26
    53fc:	9f 91       	pop	r25
    53fe:	8f 91       	pop	r24
    5400:	7f 91       	pop	r23
    5402:	6f 91       	pop	r22
    5404:	5f 91       	pop	r21
    5406:	4f 91       	pop	r20
    5408:	3f 91       	pop	r19
    540a:	2f 91       	pop	r18
    540c:	0f 90       	pop	r0
    540e:	0b be       	out	0x3b, r0	; 59
    5410:	0f 90       	pop	r0
    5412:	0f be       	out	0x3f, r0	; 63
    5414:	0f 90       	pop	r0
    5416:	1f 90       	pop	r1
    5418:	18 95       	reti

0000541a <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    541a:	81 11       	cpse	r24, r1
    541c:	07 c0       	rjmp	.+14     	; 0x542c <uart_rx_count+0x12>
        return(EOF);

    cli();
    541e:	f8 94       	cli

    count = uarts[uart].rx_count;
    5420:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <uarts+0x3>
    5424:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <uarts+0x4>

    sei();
    5428:	78 94       	sei

    return (count );
    542a:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    542c:	8f ef       	ldi	r24, 0xFF	; 255
    542e:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5430:	08 95       	ret

00005432 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5432:	81 11       	cpse	r24, r1
    5434:	21 c0       	rjmp	.+66     	; 0x5478 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	f0 df       	rcall	.-32     	; 0x541a <uart_rx_count>
    543a:	18 16       	cp	r1, r24
    543c:	19 06       	cpc	r1, r25
    543e:	dc f7       	brge	.-10     	; 0x5436 <uart_get_tail+0x4>
        ;

    cli();
    5440:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5442:	e0 91 d5 19 	lds	r30, 0x19D5	; 0x8019d5 <uarts+0x1>
    5446:	91 e0       	ldi	r25, 0x01	; 1
    5448:	9e 0f       	add	r25, r30
    544a:	90 93 d5 19 	sts	0x19D5, r25	; 0x8019d5 <uarts+0x1>
    544e:	f0 e0       	ldi	r31, 0x00	; 0
    5450:	ec 52       	subi	r30, 0x2C	; 44
    5452:	f6 4e       	sbci	r31, 0xE6	; 230
    5454:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5456:	90 35       	cpi	r25, 0x50	; 80
    5458:	10 f0       	brcs	.+4      	; 0x545e <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    545a:	10 92 d5 19 	sts	0x19D5, r1	; 0x8019d5 <uarts+0x1>
    uarts[uart].rx_count--;
    545e:	20 91 d7 19 	lds	r18, 0x19D7	; 0x8019d7 <uarts+0x3>
    5462:	30 91 d8 19 	lds	r19, 0x19D8	; 0x8019d8 <uarts+0x4>
    5466:	21 50       	subi	r18, 0x01	; 1
    5468:	31 09       	sbc	r19, r1
    546a:	30 93 d8 19 	sts	0x19D8, r19	; 0x8019d8 <uarts+0x4>
    546e:	20 93 d7 19 	sts	0x19D7, r18	; 0x8019d7 <uarts+0x3>
    sei();
    5472:	78 94       	sei

    return (c & 0xff);
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5478:	8f ef       	ldi	r24, 0xFF	; 255
    547a:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    547c:	08 95       	ret

0000547e <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    547e:	d9 df       	rcall	.-78     	; 0x5432 <uart_get_tail>
    5480:	99 27       	eor	r25, r25
    5482:	08 95       	ret

00005484 <uart_tx_byte>:
    5484:	61 11       	cpse	r22, r1
    5486:	09 c0       	rjmp	.+18     	; 0x549a <uart_tx_byte+0x16>
    5488:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    548c:	25 ff       	sbrs	r18, 5
    548e:	fc cf       	rjmp	.-8      	; 0x5488 <uart_tx_byte+0x4>
    5490:	28 2f       	mov	r18, r24
    5492:	2f 77       	andi	r18, 0x7F	; 127
    5494:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5498:	08 95       	ret
    549a:	61 30       	cpi	r22, 0x01	; 1
    549c:	49 f4       	brne	.+18     	; 0x54b0 <uart_tx_byte+0x2c>
    549e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    54a2:	25 ff       	sbrs	r18, 5
    54a4:	fc cf       	rjmp	.-8      	; 0x549e <uart_tx_byte+0x1a>
    54a6:	28 2f       	mov	r18, r24
    54a8:	2f 77       	andi	r18, 0x7F	; 127
    54aa:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    54ae:	08 95       	ret
    54b0:	8f ef       	ldi	r24, 0xFF	; 255
    54b2:	9f ef       	ldi	r25, 0xFF	; 255
    54b4:	08 95       	ret

000054b6 <uart_getchar>:
    54b6:	cf 93       	push	r28
    54b8:	81 11       	cpse	r24, r1
    54ba:	0f c0       	rjmp	.+30     	; 0x54da <uart_getchar+0x24>
    54bc:	e0 df       	rcall	.-64     	; 0x547e <uart_rx_byte>
    54be:	c8 2f       	mov	r28, r24
    54c0:	60 e0       	ldi	r22, 0x00	; 0
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	df df       	rcall	.-66     	; 0x5484 <uart_tx_byte>
    54c6:	cd 30       	cpi	r28, 0x0D	; 13
    54c8:	29 f4       	brne	.+10     	; 0x54d4 <uart_getchar+0x1e>
    54ca:	60 e0       	ldi	r22, 0x00	; 0
    54cc:	8a e0       	ldi	r24, 0x0A	; 10
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	d9 df       	rcall	.-78     	; 0x5484 <uart_tx_byte>
    54d2:	ca e0       	ldi	r28, 0x0A	; 10
    54d4:	8c 2f       	mov	r24, r28
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	02 c0       	rjmp	.+4      	; 0x54de <uart_getchar+0x28>
    54da:	8f ef       	ldi	r24, 0xFF	; 255
    54dc:	9f ef       	ldi	r25, 0xFF	; 255
    54de:	cf 91       	pop	r28
    54e0:	08 95       	ret

000054e2 <uart0_getchar>:
    54e2:	80 e0       	ldi	r24, 0x00	; 0
    54e4:	e8 cf       	rjmp	.-48     	; 0x54b6 <uart_getchar>
    54e6:	08 95       	ret

000054e8 <uart_putchar>:
    54e8:	1f 93       	push	r17
    54ea:	cf 93       	push	r28
    54ec:	df 93       	push	r29
    54ee:	ec 01       	movw	r28, r24
    54f0:	16 2f       	mov	r17, r22
    54f2:	c8 df       	rcall	.-112    	; 0x5484 <uart_tx_byte>
    54f4:	ca 30       	cpi	r28, 0x0A	; 10
    54f6:	d1 05       	cpc	r29, r1
    54f8:	21 f4       	brne	.+8      	; 0x5502 <uart_putchar+0x1a>
    54fa:	61 2f       	mov	r22, r17
    54fc:	8d e0       	ldi	r24, 0x0D	; 13
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	c1 df       	rcall	.-126    	; 0x5484 <uart_tx_byte>
    5502:	ce 01       	movw	r24, r28
    5504:	df 91       	pop	r29
    5506:	cf 91       	pop	r28
    5508:	1f 91       	pop	r17
    550a:	08 95       	ret

0000550c <uart0_putchar>:
    550c:	cf 93       	push	r28
    550e:	df 93       	push	r29
    5510:	ec 01       	movw	r28, r24
    5512:	60 e0       	ldi	r22, 0x00	; 0
    5514:	70 e0       	ldi	r23, 0x00	; 0
    5516:	e8 df       	rcall	.-48     	; 0x54e8 <uart_putchar>
    5518:	ce 01       	movw	r24, r28
    551a:	df 91       	pop	r29
    551c:	cf 91       	pop	r28
    551e:	08 95       	ret

00005520 <uart_keyhit>:
    5520:	7c cf       	rjmp	.-264    	; 0x541a <uart_rx_count>
    5522:	08 95       	ret

00005524 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5524:	cf 92       	push	r12
    5526:	df 92       	push	r13
    5528:	ef 92       	push	r14
    552a:	ff 92       	push	r15
    552c:	6b 01       	movw	r12, r22
    552e:	7c 01       	movw	r14, r24
    5530:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <SPI0_Speed_value>
    5534:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <SPI0_Speed_value+0x1>
    5538:	a0 91 5f 17 	lds	r26, 0x175F	; 0x80175f <SPI0_Speed_value+0x2>
    553c:	b0 91 60 17 	lds	r27, 0x1760	; 0x801760 <SPI0_Speed_value+0x3>
    5540:	8c 15       	cp	r24, r12
    5542:	9d 05       	cpc	r25, r13
    5544:	ae 05       	cpc	r26, r14
    5546:	bf 05       	cpc	r27, r15
    5548:	09 f4       	brne	.+2      	; 0x554c <SPI0_Speed+0x28>
    554a:	4e c0       	rjmp	.+156    	; 0x55e8 <SPI0_Speed+0xc4>
    554c:	60 e0       	ldi	r22, 0x00	; 0
    554e:	7d e2       	ldi	r23, 0x2D	; 45
    5550:	81 e3       	ldi	r24, 0x31	; 49
    5552:	91 e0       	ldi	r25, 0x01	; 1
    5554:	a7 01       	movw	r20, r14
    5556:	96 01       	movw	r18, r12
    5558:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    555c:	20 38       	cpi	r18, 0x80	; 128
    555e:	31 05       	cpc	r19, r1
    5560:	41 05       	cpc	r20, r1
    5562:	51 05       	cpc	r21, r1
    5564:	28 f4       	brcc	.+10     	; 0x5570 <SPI0_Speed+0x4c>
    5566:	20 34       	cpi	r18, 0x40	; 64
    5568:	31 05       	cpc	r19, r1
    556a:	41 05       	cpc	r20, r1
    556c:	51 05       	cpc	r21, r1
    556e:	30 f0       	brcs	.+12     	; 0x557c <SPI0_Speed+0x58>
    5570:	8d b5       	in	r24, 0x2d	; 45
    5572:	8e 7f       	andi	r24, 0xFE	; 254
    5574:	8d bd       	out	0x2d, r24	; 45
    5576:	8c b5       	in	r24, 0x2c	; 44
    5578:	82 60       	ori	r24, 0x02	; 2
    557a:	1b c0       	rjmp	.+54     	; 0x55b2 <SPI0_Speed+0x8e>
    557c:	8d b5       	in	r24, 0x2d	; 45
    557e:	20 32       	cpi	r18, 0x20	; 32
    5580:	31 05       	cpc	r19, r1
    5582:	41 05       	cpc	r20, r1
    5584:	51 05       	cpc	r21, r1
    5586:	28 f0       	brcs	.+10     	; 0x5592 <SPI0_Speed+0x6e>
    5588:	81 60       	ori	r24, 0x01	; 1
    558a:	8d bd       	out	0x2d, r24	; 45
    558c:	8c b5       	in	r24, 0x2c	; 44
    558e:	82 60       	ori	r24, 0x02	; 2
    5590:	1f c0       	rjmp	.+62     	; 0x55d0 <SPI0_Speed+0xac>
    5592:	20 31       	cpi	r18, 0x10	; 16
    5594:	31 05       	cpc	r19, r1
    5596:	41 05       	cpc	r20, r1
    5598:	51 05       	cpc	r21, r1
    559a:	10 f0       	brcs	.+4      	; 0x55a0 <SPI0_Speed+0x7c>
    559c:	8e 7f       	andi	r24, 0xFE	; 254
    559e:	06 c0       	rjmp	.+12     	; 0x55ac <SPI0_Speed+0x88>
    55a0:	28 30       	cpi	r18, 0x08	; 8
    55a2:	31 05       	cpc	r19, r1
    55a4:	41 05       	cpc	r20, r1
    55a6:	51 05       	cpc	r21, r1
    55a8:	40 f0       	brcs	.+16     	; 0x55ba <SPI0_Speed+0x96>
    55aa:	81 60       	ori	r24, 0x01	; 1
    55ac:	8d bd       	out	0x2d, r24	; 45
    55ae:	8c b5       	in	r24, 0x2c	; 44
    55b0:	8d 7f       	andi	r24, 0xFD	; 253
    55b2:	8c bd       	out	0x2c, r24	; 44
    55b4:	8c b5       	in	r24, 0x2c	; 44
    55b6:	81 60       	ori	r24, 0x01	; 1
    55b8:	0e c0       	rjmp	.+28     	; 0x55d6 <SPI0_Speed+0xb2>
    55ba:	24 30       	cpi	r18, 0x04	; 4
    55bc:	31 05       	cpc	r19, r1
    55be:	41 05       	cpc	r20, r1
    55c0:	51 05       	cpc	r21, r1
    55c2:	10 f0       	brcs	.+4      	; 0x55c8 <SPI0_Speed+0xa4>
    55c4:	8e 7f       	andi	r24, 0xFE	; 254
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <SPI0_Speed+0xa6>
    55c8:	81 60       	ori	r24, 0x01	; 1
    55ca:	8d bd       	out	0x2d, r24	; 45
    55cc:	8c b5       	in	r24, 0x2c	; 44
    55ce:	8d 7f       	andi	r24, 0xFD	; 253
    55d0:	8c bd       	out	0x2c, r24	; 44
    55d2:	8c b5       	in	r24, 0x2c	; 44
    55d4:	8e 7f       	andi	r24, 0xFE	; 254
    55d6:	8c bd       	out	0x2c, r24	; 44
    55d8:	c0 92 5d 17 	sts	0x175D, r12	; 0x80175d <SPI0_Speed_value>
    55dc:	d0 92 5e 17 	sts	0x175E, r13	; 0x80175e <SPI0_Speed_value+0x1>
    55e0:	e0 92 5f 17 	sts	0x175F, r14	; 0x80175f <SPI0_Speed_value+0x2>
    55e4:	f0 92 60 17 	sts	0x1760, r15	; 0x801760 <SPI0_Speed_value+0x3>
    55e8:	ff 90       	pop	r15
    55ea:	ef 90       	pop	r14
    55ec:	df 90       	pop	r13
    55ee:	cf 90       	pop	r12
    55f0:	08 95       	ret

000055f2 <SPI0_Mode>:
    55f2:	cf 93       	push	r28
    55f4:	df 93       	push	r29
    55f6:	00 d0       	rcall	.+0      	; 0x55f8 <SPI0_Mode+0x6>
    55f8:	00 d0       	rcall	.+0      	; 0x55fa <SPI0_Mode+0x8>
    55fa:	1f 92       	push	r1
    55fc:	ec 01       	movw	r28, r24
    55fe:	81 30       	cpi	r24, 0x01	; 1
    5600:	91 05       	cpc	r25, r1
    5602:	71 f0       	breq	.+28     	; 0x5620 <SPI0_Mode+0x2e>
    5604:	2c f4       	brge	.+10     	; 0x5610 <SPI0_Mode+0x1e>
    5606:	89 2b       	or	r24, r25
    5608:	c1 f4       	brne	.+48     	; 0x563a <SPI0_Mode+0x48>
    560a:	8c b5       	in	r24, 0x2c	; 44
    560c:	87 7f       	andi	r24, 0xF7	; 247
    560e:	11 c0       	rjmp	.+34     	; 0x5632 <SPI0_Mode+0x40>
    5610:	82 30       	cpi	r24, 0x02	; 2
    5612:	91 05       	cpc	r25, r1
    5614:	61 f0       	breq	.+24     	; 0x562e <SPI0_Mode+0x3c>
    5616:	03 97       	sbiw	r24, 0x03	; 3
    5618:	81 f4       	brne	.+32     	; 0x563a <SPI0_Mode+0x48>
    561a:	8c b5       	in	r24, 0x2c	; 44
    561c:	88 60       	ori	r24, 0x08	; 8
    561e:	02 c0       	rjmp	.+4      	; 0x5624 <SPI0_Mode+0x32>
    5620:	8c b5       	in	r24, 0x2c	; 44
    5622:	87 7f       	andi	r24, 0xF7	; 247
    5624:	8c bd       	out	0x2c, r24	; 44
    5626:	8c b5       	in	r24, 0x2c	; 44
    5628:	84 60       	ori	r24, 0x04	; 4
    562a:	8c bd       	out	0x2c, r24	; 44
    562c:	12 c0       	rjmp	.+36     	; 0x5652 <SPI0_Mode+0x60>
    562e:	8c b5       	in	r24, 0x2c	; 44
    5630:	88 60       	ori	r24, 0x08	; 8
    5632:	8c bd       	out	0x2c, r24	; 44
    5634:	8c b5       	in	r24, 0x2c	; 44
    5636:	8b 7f       	andi	r24, 0xFB	; 251
    5638:	f8 cf       	rjmp	.-16     	; 0x562a <SPI0_Mode+0x38>
    563a:	ed b7       	in	r30, 0x3d	; 61
    563c:	fe b7       	in	r31, 0x3e	; 62
    563e:	d5 83       	std	Z+5, r29	; 0x05
    5640:	c4 83       	std	Z+4, r28	; 0x04
    5642:	8a e2       	ldi	r24, 0x2A	; 42
    5644:	94 e0       	ldi	r25, 0x04	; 4
    5646:	a0 e0       	ldi	r26, 0x00	; 0
    5648:	81 83       	std	Z+1, r24	; 0x01
    564a:	92 83       	std	Z+2, r25	; 0x02
    564c:	a3 83       	std	Z+3, r26	; 0x03
    564e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    5652:	d0 93 5c 17 	sts	0x175C, r29	; 0x80175c <SPI0_Mode_value+0x1>
    5656:	c0 93 5b 17 	sts	0x175B, r28	; 0x80175b <SPI0_Mode_value>
    565a:	cd b7       	in	r28, 0x3d	; 61
    565c:	de b7       	in	r29, 0x3e	; 62
    565e:	25 96       	adiw	r28, 0x05	; 5
    5660:	e2 e0       	ldi	r30, 0x02	; 2
    5662:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00005666 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5666:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5668:	0d b4       	in	r0, 0x2d	; 45
    566a:	07 fe       	sbrs	r0, 7
    566c:	fd cf       	rjmp	.-6      	; 0x5668 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    566e:	8e b5       	in	r24, 0x2e	; 46
}
    5670:	08 95       	ret

00005672 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5672:	cf 92       	push	r12
    5674:	df 92       	push	r13
    5676:	ef 92       	push	r14
    5678:	ff 92       	push	r15
    567a:	cf 93       	push	r28
    567c:	df 93       	push	r29
    567e:	1f 92       	push	r1
    5680:	cd b7       	in	r28, 0x3d	; 61
    5682:	de b7       	in	r29, 0x3e	; 62
    5684:	6b 01       	movw	r12, r22
    5686:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5688:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    568a:	2f 9a       	sbi	0x05, 7	; 5
    568c:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    568e:	2d 9a       	sbi	0x05, 5	; 5
    5690:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5692:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5694:	2c 98       	cbi	0x05, 4	; 5
    5696:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5698:	8c b5       	in	r24, 0x2c	; 44
    569a:	80 61       	ori	r24, 0x10	; 16
    569c:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    569e:	8c b5       	in	r24, 0x2c	; 44
    56a0:	80 64       	ori	r24, 0x40	; 64
    56a2:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    56a4:	8d b5       	in	r24, 0x2d	; 45
    56a6:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    56a8:	8e b5       	in	r24, 0x2e	; 46
    56aa:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    56ac:	80 e0       	ldi	r24, 0x00	; 0
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	a0 df       	rcall	.-192    	; 0x55f2 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    56b2:	c7 01       	movw	r24, r14
    56b4:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    56b6:	36 df       	rcall	.-404    	; 0x5524 <SPI0_Speed>
    56b8:	8f ef       	ldi	r24, 0xFF	; 255
    56ba:	d5 df       	rcall	.-86     	; 0x5666 <SPI0_TXRX_Byte>
    SPI0_Init_state = 1;

}
    56bc:	0f 90       	pop	r0
    56be:	df 91       	pop	r29
    56c0:	cf 91       	pop	r28
    56c2:	ff 90       	pop	r15
    56c4:	ef 90       	pop	r14
    56c6:	df 90       	pop	r13
    56c8:	cf 90       	pop	r12
    56ca:	08 95       	ret

000056cc <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    56cc:	0f 93       	push	r16
    56ce:	1f 93       	push	r17
    56d0:	cf 93       	push	r28
    56d2:	df 93       	push	r29
    56d4:	8c 01       	movw	r16, r24
    56d6:	eb 01       	movw	r28, r22

    while(count > 0)
    56d8:	1c 16       	cp	r1, r28
    56da:	1d 06       	cpc	r1, r29
    56dc:	34 f4       	brge	.+12     	; 0x56ea <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    56de:	f8 01       	movw	r30, r16
    56e0:	81 91       	ld	r24, Z+
    56e2:	8f 01       	movw	r16, r30
    56e4:	c0 df       	rcall	.-128    	; 0x5666 <SPI0_TXRX_Byte>
        ++data;
        --count;
    56e6:	21 97       	sbiw	r28, 0x01	; 1
    56e8:	f7 cf       	rjmp	.-18     	; 0x56d8 <SPI0_TX+0xc>
    }
}
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	1f 91       	pop	r17
    56f0:	0f 91       	pop	r16
    56f2:	08 95       	ret

000056f4 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    56f4:	0f 93       	push	r16
    56f6:	1f 93       	push	r17
    56f8:	cf 93       	push	r28
    56fa:	df 93       	push	r29
    56fc:	8c 01       	movw	r16, r24
    56fe:	eb 01       	movw	r28, r22

    while(count > 0)
    5700:	1c 16       	cp	r1, r28
    5702:	1d 06       	cpc	r1, r29
    5704:	44 f4       	brge	.+16     	; 0x5716 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5706:	f8 01       	movw	r30, r16
    5708:	80 81       	ld	r24, Z
    570a:	ad df       	rcall	.-166    	; 0x5666 <SPI0_TXRX_Byte>
    570c:	f8 01       	movw	r30, r16
    570e:	81 93       	st	Z+, r24
    5710:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5712:	21 97       	sbiw	r28, 0x01	; 1
    5714:	f5 cf       	rjmp	.-22     	; 0x5700 <SPI0_TXRX+0xc>
    }
}
    5716:	df 91       	pop	r29
    5718:	cf 91       	pop	r28
    571a:	1f 91       	pop	r17
    571c:	0f 91       	pop	r16
    571e:	08 95       	ret

00005720 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5720:	0f 93       	push	r16
    5722:	1f 93       	push	r17
    5724:	cf 93       	push	r28
    5726:	df 93       	push	r29
    5728:	8c 01       	movw	r16, r24
    572a:	eb 01       	movw	r28, r22

    while(count > 0)
    572c:	1c 16       	cp	r1, r28
    572e:	1d 06       	cpc	r1, r29
    5730:	3c f4       	brge	.+14     	; 0x5740 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5732:	8f ef       	ldi	r24, 0xFF	; 255
    5734:	98 df       	rcall	.-208    	; 0x5666 <SPI0_TXRX_Byte>
    5736:	f8 01       	movw	r30, r16
    5738:	81 93       	st	Z+, r24
    573a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    573c:	21 97       	sbiw	r28, 0x01	; 1
    573e:	f6 cf       	rjmp	.-20     	; 0x572c <SPI0_RX+0xc>
    }
}
    5740:	df 91       	pop	r29
    5742:	cf 91       	pop	r28
    5744:	1f 91       	pop	r17
    5746:	0f 91       	pop	r16
    5748:	08 95       	ret

0000574a <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                       // Pull Up on
    574a:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                       // Pull Up on
    574c:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    574e:	ec eb       	ldi	r30, 0xBC	; 188
    5750:	f0 e0       	ldi	r31, 0x00	; 0
    5752:	90 81       	ld	r25, Z
    5754:	94 60       	ori	r25, 0x04	; 4
    5756:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5758:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    575c:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5760:	08 95       	ret

00005762 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5762:	84 e9       	ldi	r24, 0x94	; 148
    5764:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5768:	08 95       	ret

0000576a <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    576a:	94 ea       	ldi	r25, 0xA4	; 164
    576c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5770:	24 e6       	ldi	r18, 0x64	; 100
    5772:	62 9f       	mul	r22, r18
    5774:	b0 01       	movw	r22, r0
    5776:	11 24       	eor	r1, r1
    5778:	61 50       	subi	r22, 0x01	; 1
    577a:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    577c:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    577e:	40 e0       	ldi	r20, 0x00	; 0
    5780:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5782:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5784:	2f 3f       	cpi	r18, 0xFF	; 255
    5786:	9f ef       	ldi	r25, 0xFF	; 255
    5788:	39 07       	cpc	r19, r25
    578a:	41 f1       	breq	.+80     	; 0x57dc <TWI_StartTransmission+0x72>
    578c:	41 15       	cp	r20, r1
    578e:	51 05       	cpc	r21, r1
    5790:	f1 f4       	brne	.+60     	; 0x57ce <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5792:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5796:	97 ff       	sbrs	r25, 7
    5798:	13 c0       	rjmp	.+38     	; 0x57c0 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    579a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    579e:	98 7f       	andi	r25, 0xF8	; 248
    57a0:	90 31       	cpi	r25, 0x10	; 16
    57a2:	61 f0       	breq	.+24     	; 0x57bc <TWI_StartTransmission+0x52>
    57a4:	98 33       	cpi	r25, 0x38	; 56
    57a6:	39 f0       	breq	.+14     	; 0x57b6 <TWI_StartTransmission+0x4c>
    57a8:	98 30       	cpi	r25, 0x08	; 8
    57aa:	41 f0       	breq	.+16     	; 0x57bc <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    57ac:	84 e0       	ldi	r24, 0x04	; 4
    57ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    57b6:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    57ba:	06 c0       	rjmp	.+12     	; 0x57c8 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    57bc:	41 e0       	ldi	r20, 0x01	; 1
    57be:	50 e0       	ldi	r21, 0x00	; 0
    57c0:	92 e4       	ldi	r25, 0x42	; 66
    57c2:	9a 95       	dec	r25
    57c4:	f1 f7       	brne	.-4      	; 0x57c2 <TWI_StartTransmission+0x58>
    57c6:	00 c0       	rjmp	.+0      	; 0x57c8 <TWI_StartTransmission+0x5e>
    57c8:	21 50       	subi	r18, 0x01	; 1
    57ca:	31 09       	sbc	r19, r1
    57cc:	db cf       	rjmp	.-74     	; 0x5784 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    57ce:	23 2b       	or	r18, r19
    57d0:	29 f4       	brne	.+10     	; 0x57dc <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    57d2:	84 e0       	ldi	r24, 0x04	; 4
    57d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    57d8:	82 e0       	ldi	r24, 0x02	; 2
    57da:	08 95       	ret
        }

        TWDR = SlaveAddress;
    57dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    57e0:	84 e8       	ldi	r24, 0x84	; 132
    57e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    57e6:	6f 3f       	cpi	r22, 0xFF	; 255
    57e8:	8f ef       	ldi	r24, 0xFF	; 255
    57ea:	78 07       	cpc	r23, r24
    57ec:	71 f0       	breq	.+28     	; 0x580a <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    57ee:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    57f2:	cb 01       	movw	r24, r22
    57f4:	01 97       	sbiw	r24, 0x01	; 1
    57f6:	27 fd       	sbrc	r18, 7
    57f8:	06 c0       	rjmp	.+12     	; 0x5806 <TWI_StartTransmission+0x9c>
    57fa:	22 e4       	ldi	r18, 0x42	; 66
    57fc:	2a 95       	dec	r18
    57fe:	f1 f7       	brne	.-4      	; 0x57fc <TWI_StartTransmission+0x92>
    5800:	00 c0       	rjmp	.+0      	; 0x5802 <TWI_StartTransmission+0x98>
    5802:	bc 01       	movw	r22, r24
    5804:	f0 cf       	rjmp	.-32     	; 0x57e6 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5806:	67 2b       	or	r22, r23
    5808:	61 f0       	breq	.+24     	; 0x5822 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    580a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    580e:	88 7f       	andi	r24, 0xF8	; 248
    5810:	88 31       	cpi	r24, 0x18	; 24
    5812:	49 f0       	breq	.+18     	; 0x5826 <TWI_StartTransmission+0xbc>
    5814:	80 34       	cpi	r24, 0x40	; 64
    5816:	39 f0       	breq	.+14     	; 0x5826 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5818:	84 e9       	ldi	r24, 0x94	; 148
    581a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    581e:	84 e0       	ldi	r24, 0x04	; 4
    5820:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5822:	83 e0       	ldi	r24, 0x03	; 3
    5824:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5826:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5828:	08 95       	ret

0000582a <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    582a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    582e:	84 e8       	ldi	r24, 0x84	; 132
    5830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5834:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5838:	87 ff       	sbrs	r24, 7
    583a:	fc cf       	rjmp	.-8      	; 0x5834 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    583c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5840:	98 7f       	andi	r25, 0xF8	; 248
    5842:	21 e0       	ldi	r18, 0x01	; 1
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	98 32       	cpi	r25, 0x28	; 40
    5848:	11 f0       	breq	.+4      	; 0x584e <TWI_SendByte+0x24>
    584a:	20 e0       	ldi	r18, 0x00	; 0
    584c:	30 e0       	ldi	r19, 0x00	; 0
}
    584e:	c9 01       	movw	r24, r18
    5850:	08 95       	ret

00005852 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5852:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5854:	61 15       	cp	r22, r1
    5856:	71 05       	cpc	r23, r1
    5858:	11 f4       	brne	.+4      	; 0x585e <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    585a:	94 ec       	ldi	r25, 0xC4	; 196
    585c:	01 c0       	rjmp	.+2      	; 0x5860 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    585e:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5860:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5864:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5868:	87 ff       	sbrs	r24, 7
    586a:	fc cf       	rjmp	.-8      	; 0x5864 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    586c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5870:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5872:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5876:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	67 2b       	or	r22, r23
    587e:	19 f0       	breq	.+6      	; 0x5886 <TWI_ReceiveByte+0x34>
    5880:	28 35       	cpi	r18, 0x58	; 88
    5882:	19 f4       	brne	.+6      	; 0x588a <TWI_ReceiveByte+0x38>
    5884:	03 c0       	rjmp	.+6      	; 0x588c <TWI_ReceiveByte+0x3a>
    5886:	20 35       	cpi	r18, 0x50	; 80
    5888:	09 f0       	breq	.+2      	; 0x588c <TWI_ReceiveByte+0x3a>
    588a:	80 e0       	ldi	r24, 0x00	; 0
}
    588c:	08 95       	ret

0000588e <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    588e:	a0 e0       	ldi	r26, 0x00	; 0
    5890:	b0 e0       	ldi	r27, 0x00	; 0
    5892:	ed e4       	ldi	r30, 0x4D	; 77
    5894:	fc e2       	ldi	r31, 0x2C	; 44
    5896:	0c 94 98 e0 	jmp	0x1c130	; 0x1c130 <__prologue_saves__+0xe>
    589a:	f8 2e       	mov	r15, r24
    589c:	b6 2e       	mov	r11, r22
    589e:	94 2e       	mov	r9, r20
    58a0:	a5 2e       	mov	r10, r21
    58a2:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    58a4:	8e 7f       	andi	r24, 0xFE	; 254
    58a6:	61 df       	rcall	.-318    	; 0x576a <TWI_StartTransmission>
    58a8:	d8 2f       	mov	r29, r24
    58aa:	81 11       	cpse	r24, r1
    58ac:	2b c0       	rjmp	.+86     	; 0x5904 <TWI_ReadPacket+0x76>
    58ae:	c9 2c       	mov	r12, r9
    58b0:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    58b2:	cc 23       	and	r28, r28
    58b4:	39 f0       	breq	.+14     	; 0x58c4 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    58b6:	f6 01       	movw	r30, r12
    58b8:	81 91       	ld	r24, Z+
    58ba:	6f 01       	movw	r12, r30
    58bc:	b6 df       	rcall	.-148    	; 0x582a <TWI_SendByte>
    58be:	c1 50       	subi	r28, 0x01	; 1
    58c0:	89 2b       	or	r24, r25
    58c2:	b9 f7       	brne	.-18     	; 0x58b2 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    58c4:	6b 2d       	mov	r22, r11
    58c6:	8f 2d       	mov	r24, r15
    58c8:	81 60       	ori	r24, 0x01	; 1
    58ca:	4f df       	rcall	.-354    	; 0x576a <TWI_StartTransmission>
    58cc:	d8 2f       	mov	r29, r24
    58ce:	81 11       	cpse	r24, r1
    58d0:	19 c0       	rjmp	.+50     	; 0x5904 <TWI_ReadPacket+0x76>
    58d2:	cf ef       	ldi	r28, 0xFF	; 255
    58d4:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    58d6:	cf 3f       	cpi	r28, 0xFF	; 255
    58d8:	91 f0       	breq	.+36     	; 0x58fe <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    58da:	78 01       	movw	r14, r16
    58dc:	ff ef       	ldi	r31, 0xFF	; 255
    58de:	ef 1a       	sub	r14, r31
    58e0:	ff 0a       	sbc	r15, r31
    58e2:	61 e0       	ldi	r22, 0x01	; 1
    58e4:	70 e0       	ldi	r23, 0x00	; 0
    58e6:	cc 23       	and	r28, r28
    58e8:	11 f0       	breq	.+4      	; 0x58ee <TWI_ReadPacket+0x60>
    58ea:	60 e0       	ldi	r22, 0x00	; 0
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	c8 01       	movw	r24, r16
    58f0:	b0 df       	rcall	.-160    	; 0x5852 <TWI_ReceiveByte>
    58f2:	c1 50       	subi	r28, 0x01	; 1
    58f4:	89 2b       	or	r24, r25
    58f6:	11 f0       	breq	.+4      	; 0x58fc <TWI_ReadPacket+0x6e>
    58f8:	87 01       	movw	r16, r14
    58fa:	ed cf       	rjmp	.-38     	; 0x58d6 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    58fc:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    58fe:	84 e9       	ldi	r24, 0x94	; 148
    5900:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5904:	8d 2f       	mov	r24, r29
    5906:	cd b7       	in	r28, 0x3d	; 61
    5908:	de b7       	in	r29, 0x3e	; 62
    590a:	eb e0       	ldi	r30, 0x0B	; 11
    590c:	0c 94 b4 e0 	jmp	0x1c168	; 0x1c168 <__epilogue_restores__+0xe>

00005910 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5910:	a0 e0       	ldi	r26, 0x00	; 0
    5912:	b0 e0       	ldi	r27, 0x00	; 0
    5914:	ee e8       	ldi	r30, 0x8E	; 142
    5916:	fc e2       	ldi	r31, 0x2C	; 44
    5918:	0c 94 9a e0 	jmp	0x1c134	; 0x1c134 <__prologue_saves__+0x12>
    591c:	b4 2e       	mov	r11, r20
    591e:	f5 2e       	mov	r15, r21
    5920:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5922:	8e 7f       	andi	r24, 0xFE	; 254
    5924:	22 df       	rcall	.-444    	; 0x576a <TWI_StartTransmission>
    5926:	d8 2f       	mov	r29, r24
    5928:	81 11       	cpse	r24, r1
    592a:	1a c0       	rjmp	.+52     	; 0x5960 <TWI_WritePacket+0x50>
    592c:	cb 2c       	mov	r12, r11
    592e:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5930:	cc 23       	and	r28, r28
    5932:	41 f0       	breq	.+16     	; 0x5944 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5934:	f6 01       	movw	r30, r12
    5936:	81 91       	ld	r24, Z+
    5938:	6f 01       	movw	r12, r30
    593a:	77 df       	rcall	.-274    	; 0x582a <TWI_SendByte>
    593c:	c1 50       	subi	r28, 0x01	; 1
    593e:	89 2b       	or	r24, r25
    5940:	b9 f7       	brne	.-18     	; 0x5930 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5942:	d5 e0       	ldi	r29, 0x05	; 5
    5944:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5946:	ee 20       	and	r14, r14
    5948:	41 f0       	breq	.+16     	; 0x595a <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    594a:	f6 01       	movw	r30, r12
    594c:	81 91       	ld	r24, Z+
    594e:	6f 01       	movw	r12, r30
    5950:	6c df       	rcall	.-296    	; 0x582a <TWI_SendByte>
    5952:	ea 94       	dec	r14
    5954:	89 2b       	or	r24, r25
    5956:	b9 f7       	brne	.-18     	; 0x5946 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5958:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    595a:	84 e9       	ldi	r24, 0x94	; 148
    595c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5960:	8d 2f       	mov	r24, r29
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
    5966:	e9 e0       	ldi	r30, 0x09	; 9
    5968:	0c 94 b6 e0 	jmp	0x1c16c	; 0x1c16c <__epilogue_restores__+0x12>

0000596c <__vector_26>:
    SREG = sreg;
}


ISR(TWI_vect, ISR_BLOCK)
{
    596c:	1f 92       	push	r1
    596e:	0f 92       	push	r0
    5970:	0f b6       	in	r0, 0x3f	; 63
    5972:	0f 92       	push	r0
    5974:	11 24       	eor	r1, r1
    5976:	0b b6       	in	r0, 0x3b	; 59
    5978:	0f 92       	push	r0
    597a:	2f 93       	push	r18
    597c:	3f 93       	push	r19
    597e:	4f 93       	push	r20
    5980:	5f 93       	push	r21
    5982:	6f 93       	push	r22
    5984:	7f 93       	push	r23
    5986:	8f 93       	push	r24
    5988:	9f 93       	push	r25
    598a:	af 93       	push	r26
    598c:	bf 93       	push	r27
    598e:	ef 93       	push	r30
    5990:	ff 93       	push	r31

    uint8_t status = TW_STATUS;
    5992:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5996:	88 7f       	andi	r24, 0xF8	; 248

/* This interrupt should only fire if there is something to do. */
    assert(op != NULL);
    5998:	e0 91 61 17 	lds	r30, 0x1761	; 0x801761 <op>
    599c:	f0 91 62 17 	lds	r31, 0x1762	; 0x801762 <op+0x1>
    59a0:	30 97       	sbiw	r30, 0x00	; 0
    59a2:	09 f4       	brne	.+2      	; 0x59a6 <__vector_26+0x3a>
    59a4:	6f c0       	rjmp	.+222    	; 0x5a84 <__vector_26+0x118>

    if ((op->address & _BV(0)) == TW_READ)
    59a6:	90 81       	ld	r25, Z
    59a8:	90 ff       	sbrs	r25, 0
    59aa:	39 c0       	rjmp	.+114    	; 0x5a1e <__vector_26+0xb2>
    {
/* Master Receiver mode. */
        switch (status)
    59ac:	80 34       	cpi	r24, 0x40	; 64
    59ae:	81 f0       	breq	.+32     	; 0x59d0 <__vector_26+0x64>
    59b0:	38 f4       	brcc	.+14     	; 0x59c0 <__vector_26+0x54>
    59b2:	80 31       	cpi	r24, 0x10	; 16
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <__vector_26+0x4c>
    59b6:	45 c0       	rjmp	.+138    	; 0x5a42 <__vector_26+0xd6>
    59b8:	88 33       	cpi	r24, 0x38	; 56
    59ba:	09 f4       	brne	.+2      	; 0x59be <__vector_26+0x52>
    59bc:	94 c0       	rjmp	.+296    	; 0x5ae6 <__vector_26+0x17a>
    59be:	36 c0       	rjmp	.+108    	; 0x5a2c <__vector_26+0xc0>
    59c0:	80 35       	cpi	r24, 0x50	; 80
    59c2:	59 f0       	breq	.+22     	; 0x59da <__vector_26+0x6e>
    59c4:	88 35       	cpi	r24, 0x58	; 88
    59c6:	f1 f0       	breq	.+60     	; 0x5a04 <__vector_26+0x98>
    59c8:	88 34       	cpi	r24, 0x48	; 72
    59ca:	09 f0       	breq	.+2      	; 0x59ce <__vector_26+0x62>
    59cc:	5b c0       	rjmp	.+182    	; 0x5a84 <__vector_26+0x118>
    59ce:	54 c0       	rjmp	.+168    	; 0x5a78 <__vector_26+0x10c>
                TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
                break;

/* SLA+R has been transmitted; ACK has been received. */
            case TW_MR_SLA_ACK:
                if (op->buflen == 1)
    59d0:	81 81       	ldd	r24, Z+1	; 0x01
    59d2:	81 30       	cpi	r24, 0x01	; 1
    59d4:	09 f0       	breq	.+2      	; 0x59d8 <__vector_26+0x6c>
    59d6:	4a c0       	rjmp	.+148    	; 0x5a6c <__vector_26+0x100>
    59d8:	13 c0       	rjmp	.+38     	; 0x5a00 <__vector_26+0x94>
                txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
                goto next_txn;

/* Data byte has been received; ACK has been returned. */
            case TW_MR_DATA_ACK:
                op->buf[op->bufpos++] = TWDR;
    59da:	a3 81       	ldd	r26, Z+3	; 0x03
    59dc:	b4 81       	ldd	r27, Z+4	; 0x04
    59de:	82 81       	ldd	r24, Z+2	; 0x02
    59e0:	91 e0       	ldi	r25, 0x01	; 1
    59e2:	98 0f       	add	r25, r24
    59e4:	92 83       	std	Z+2, r25	; 0x02
    59e6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    59ea:	a8 0f       	add	r26, r24
    59ec:	b1 1d       	adc	r27, r1
    59ee:	9c 93       	st	X, r25
                if (op->bufpos+1 == op->buflen)
    59f0:	82 81       	ldd	r24, Z+2	; 0x02
    59f2:	21 81       	ldd	r18, Z+1	; 0x01
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	01 96       	adiw	r24, 0x01	; 1
    59f8:	30 e0       	ldi	r19, 0x00	; 0
    59fa:	82 17       	cp	r24, r18
    59fc:	93 07       	cpc	r25, r19
    59fe:	b1 f5       	brne	.+108    	; 0x5a6c <__vector_26+0x100>
                {
                    TWCR = TWCR_NOT_ACK;
    5a00:	85 e8       	ldi	r24, 0x85	; 133
    5a02:	7c c0       	rjmp	.+248    	; 0x5afc <__vector_26+0x190>
                }
                break;

/* Data byte has been received; NOT ACK has been returned. */
            case TW_MR_DATA_NACK:
                op->buf[op->bufpos++] = TWDR;
    5a04:	83 81       	ldd	r24, Z+3	; 0x03
    5a06:	94 81       	ldd	r25, Z+4	; 0x04
    5a08:	22 81       	ldd	r18, Z+2	; 0x02
    5a0a:	31 e0       	ldi	r19, 0x01	; 1
    5a0c:	32 0f       	add	r19, r18
    5a0e:	32 83       	std	Z+2, r19	; 0x02
    5a10:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5a14:	fc 01       	movw	r30, r24
    5a16:	e2 0f       	add	r30, r18
    5a18:	f1 1d       	adc	r31, r1
    5a1a:	30 83       	st	Z, r19
                goto next_op;
    5a1c:	35 c0       	rjmp	.+106    	; 0x5a88 <__vector_26+0x11c>
        }
    }
    else
    {
/* Master Transmitter mode. */
        switch (status)
    5a1e:	80 32       	cpi	r24, 0x20	; 32
    5a20:	59 f1       	breq	.+86     	; 0x5a78 <__vector_26+0x10c>
    5a22:	38 f4       	brcc	.+14     	; 0x5a32 <__vector_26+0xc6>
    5a24:	80 31       	cpi	r24, 0x10	; 16
    5a26:	69 f0       	breq	.+26     	; 0x5a42 <__vector_26+0xd6>
    5a28:	88 31       	cpi	r24, 0x18	; 24
    5a2a:	a1 f0       	breq	.+40     	; 0x5a54 <__vector_26+0xe8>
    5a2c:	88 30       	cpi	r24, 0x08	; 8
    5a2e:	51 f5       	brne	.+84     	; 0x5a84 <__vector_26+0x118>
    5a30:	08 c0       	rjmp	.+16     	; 0x5a42 <__vector_26+0xd6>
    5a32:	80 33       	cpi	r24, 0x30	; 48
    5a34:	e9 f0       	breq	.+58     	; 0x5a70 <__vector_26+0x104>
    5a36:	88 33       	cpi	r24, 0x38	; 56
    5a38:	09 f4       	brne	.+2      	; 0x5a3c <__vector_26+0xd0>
    5a3a:	55 c0       	rjmp	.+170    	; 0x5ae6 <__vector_26+0x17a>
    5a3c:	88 32       	cpi	r24, 0x28	; 40
    5a3e:	11 f5       	brne	.+68     	; 0x5a84 <__vector_26+0x118>
    5a40:	05 c0       	rjmp	.+10     	; 0x5a4c <__vector_26+0xe0>

/* A START condition has been transmitted. */
            case TW_START:
/* A repeated START condition has been transmitted. */
            case TW_REP_START:
                assert(op->buflen > 0);
    5a42:	81 81       	ldd	r24, Z+1	; 0x01
    5a44:	88 23       	and	r24, r24
    5a46:	f1 f0       	breq	.+60     	; 0x5a84 <__vector_26+0x118>
                op->bufpos = 0;
    5a48:	12 82       	std	Z+2, r1	; 0x02
    5a4a:	0d c0       	rjmp	.+26     	; 0x5a66 <__vector_26+0xfa>
                txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
                goto next_txn;

/* Data byte has been transmitted; ACK has been received. */
            case TW_MT_DATA_ACK:
                if (op->bufpos < op->buflen)
    5a4c:	92 81       	ldd	r25, Z+2	; 0x02
    5a4e:	81 81       	ldd	r24, Z+1	; 0x01
    5a50:	98 17       	cp	r25, r24
    5a52:	d0 f4       	brcc	.+52     	; 0x5a88 <__vector_26+0x11c>
                {
                    TWDR = op->buf[op->bufpos++];
    5a54:	83 81       	ldd	r24, Z+3	; 0x03
    5a56:	94 81       	ldd	r25, Z+4	; 0x04
    5a58:	22 81       	ldd	r18, Z+2	; 0x02
    5a5a:	31 e0       	ldi	r19, 0x01	; 1
    5a5c:	32 0f       	add	r19, r18
    5a5e:	32 83       	std	Z+2, r19	; 0x02
    5a60:	fc 01       	movw	r30, r24
    5a62:	e2 0f       	add	r30, r18
    5a64:	f1 1d       	adc	r31, r1
    5a66:	80 81       	ld	r24, Z
    5a68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
                    TWCR = TWCR_DEFAULT | _BV(TWINT);
    5a6c:	85 ec       	ldi	r24, 0xC5	; 197
    5a6e:	46 c0       	rjmp	.+140    	; 0x5afc <__vector_26+0x190>
/* No more bytes left to transmit... */
                goto next_op;

/* Data byte has been transmitted; NOT ACK has been received. */
            case TW_MT_DATA_NACK:
                if (op->bufpos < op->buflen)
    5a70:	92 81       	ldd	r25, Z+2	; 0x02
    5a72:	81 81       	ldd	r24, Z+1	; 0x01
    5a74:	98 17       	cp	r25, r24
    5a76:	40 f4       	brcc	.+16     	; 0x5a88 <__vector_26+0x11c>
                {
/* There were more bytes left to transmit! */
                    txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5a78:	e0 91 63 17 	lds	r30, 0x1763	; 0x801763 <txn>
    5a7c:	f0 91 64 17 	lds	r31, 0x1764	; 0x801764 <txn+0x1>
    5a80:	83 e0       	ldi	r24, 0x03	; 3
    5a82:	1d c0       	rjmp	.+58     	; 0x5abe <__vector_26+0x152>
                }

                goto next_op;

            default:
                assert(0 && "unknown status in master transmitter mode");
    5a84:	0e 94 89 e4 	call	0x1c912	; 0x1c912 <abort>

    next_op:
/*
 * Advance to next operation in transaction, if possible.
 */
    if (++(txn->opspos) < txn->opslen)
    5a88:	e0 91 63 17 	lds	r30, 0x1763	; 0x801763 <txn>
    5a8c:	f0 91 64 17 	lds	r31, 0x1764	; 0x801764 <txn+0x1>
    5a90:	84 81       	ldd	r24, Z+4	; 0x04
    5a92:	8f 5f       	subi	r24, 0xFF	; 255
    5a94:	84 83       	std	Z+4, r24	; 0x04
    5a96:	93 81       	ldd	r25, Z+3	; 0x03
    5a98:	89 17       	cp	r24, r25
    5a9a:	80 f4       	brcc	.+32     	; 0x5abc <__vector_26+0x150>
    {
        op = &txn->ops[txn->opspos];
    5a9c:	84 81       	ldd	r24, Z+4	; 0x04
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	01 96       	adiw	r24, 0x01	; 1
    5aa2:	45 e0       	ldi	r20, 0x05	; 5
    5aa4:	48 9f       	mul	r20, r24
    5aa6:	90 01       	movw	r18, r0
    5aa8:	49 9f       	mul	r20, r25
    5aaa:	30 0d       	add	r19, r0
    5aac:	11 24       	eor	r1, r1
    5aae:	e2 0f       	add	r30, r18
    5ab0:	f3 1f       	adc	r31, r19
    5ab2:	f0 93 62 17 	sts	0x1762, r31	; 0x801762 <op+0x1>
    5ab6:	e0 93 61 17 	sts	0x1761, r30	; 0x801761 <op>
    5aba:	15 c0       	rjmp	.+42     	; 0x5ae6 <__vector_26+0x17a>
        TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
        return;
    }

/* No more operations, mark transaction as done. */
    txn->flags = I2C_TXN_DONE;
    5abc:	81 e0       	ldi	r24, 0x01	; 1
    5abe:	82 83       	std	Z+2, r24	; 0x02

    next_txn:
/*
 * Advance to next transaction, if possible.
 */
    if (txn->next != NULL)
    5ac0:	e0 91 63 17 	lds	r30, 0x1763	; 0x801763 <txn>
    5ac4:	f0 91 64 17 	lds	r31, 0x1764	; 0x801764 <txn+0x1>
    5ac8:	80 81       	ld	r24, Z
    5aca:	91 81       	ldd	r25, Z+1	; 0x01
    5acc:	89 2b       	or	r24, r25
    5ace:	69 f0       	breq	.+26     	; 0x5aea <__vector_26+0x17e>
    {
        txn = txn->next;
    5ad0:	80 81       	ld	r24, Z
    5ad2:	91 81       	ldd	r25, Z+1	; 0x01
    5ad4:	90 93 64 17 	sts	0x1764, r25	; 0x801764 <txn+0x1>
    5ad8:	80 93 63 17 	sts	0x1763, r24	; 0x801763 <txn>
        op = &txn->ops[0];
    5adc:	05 96       	adiw	r24, 0x05	; 5
    5ade:	90 93 62 17 	sts	0x1762, r25	; 0x801762 <op+0x1>
    5ae2:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <op>

/* Repeated start. */
        TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5ae6:	85 ee       	ldi	r24, 0xE5	; 229
    5ae8:	09 c0       	rjmp	.+18     	; 0x5afc <__vector_26+0x190>
        return;
    }

    txn = NULL;
    5aea:	10 92 64 17 	sts	0x1764, r1	; 0x801764 <txn+0x1>
    5aee:	10 92 63 17 	sts	0x1763, r1	; 0x801763 <txn>
    op = NULL;
    5af2:	10 92 62 17 	sts	0x1762, r1	; 0x801762 <op+0x1>
    5af6:	10 92 61 17 	sts	0x1761, r1	; 0x801761 <op>

/* No more transaction, transmit STOP. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5afa:	85 ed       	ldi	r24, 0xD5	; 213
    5afc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5b00:	ff 91       	pop	r31
    5b02:	ef 91       	pop	r30
    5b04:	bf 91       	pop	r27
    5b06:	af 91       	pop	r26
    5b08:	9f 91       	pop	r25
    5b0a:	8f 91       	pop	r24
    5b0c:	7f 91       	pop	r23
    5b0e:	6f 91       	pop	r22
    5b10:	5f 91       	pop	r21
    5b12:	4f 91       	pop	r20
    5b14:	3f 91       	pop	r19
    5b16:	2f 91       	pop	r18
    5b18:	0f 90       	pop	r0
    5b1a:	0b be       	out	0x3b, r0	; 59
    5b1c:	0f 90       	pop	r0
    5b1e:	0f be       	out	0x3f, r0	; 63
    5b20:	0f 90       	pop	r0
    5b22:	1f 90       	pop	r1
    5b24:	18 95       	reti

00005b26 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5b26:	6a e0       	ldi	r22, 0x0A	; 10
    5b28:	0e 94 f1 df 	call	0x1bfe2	; 0x1bfe2 <__udivmodqi4>
    5b2c:	82 95       	swap	r24
    5b2e:	80 7f       	andi	r24, 0xF0	; 240
    5b30:	89 2b       	or	r24, r25
    5b32:	08 95       	ret

00005b34 <BCDtoBIN>:
    5b34:	98 2f       	mov	r25, r24
    5b36:	92 95       	swap	r25
    5b38:	9f 70       	andi	r25, 0x0F	; 15
    5b3a:	8f 70       	andi	r24, 0x0F	; 15
    5b3c:	2a e0       	ldi	r18, 0x0A	; 10
    5b3e:	92 9f       	mul	r25, r18
    5b40:	80 0d       	add	r24, r0
    5b42:	11 24       	eor	r1, r1
    5b44:	08 95       	ret

00005b46 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5b46:	cf 92       	push	r12
    5b48:	df 92       	push	r13
    5b4a:	ef 92       	push	r14
    5b4c:	0f 93       	push	r16
    5b4e:	1f 93       	push	r17
    5b50:	cf 93       	push	r28
    5b52:	df 93       	push	r29
    5b54:	00 d0       	rcall	.+0      	; 0x5b56 <rtc_run+0x10>
    5b56:	00 d0       	rcall	.+0      	; 0x5b58 <rtc_run+0x12>
    5b58:	00 d0       	rcall	.+0      	; 0x5b5a <rtc_run+0x14>
    5b5a:	cd b7       	in	r28, 0x3d	; 61
    5b5c:	de b7       	in	r29, 0x3e	; 62
    5b5e:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5b60:	1c 82       	std	Y+4, r1	; 0x04

    ReadAddress = 0;
    5b62:	1d 82       	std	Y+5, r1	; 0x05
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5b64:	ee 24       	eor	r14, r14
    5b66:	e3 94       	inc	r14
    5b68:	8e 01       	movw	r16, r28
    5b6a:	0c 5f       	subi	r16, 0xFC	; 252
    5b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b6e:	21 e0       	ldi	r18, 0x01	; 1
    5b70:	ae 01       	movw	r20, r28
    5b72:	4b 5f       	subi	r20, 0xFB	; 251
    5b74:	5f 4f       	sbci	r21, 0xFF	; 255
    5b76:	62 e3       	ldi	r22, 0x32	; 50
    5b78:	81 ed       	ldi	r24, 0xD1	; 209
    5b7a:	89 de       	rcall	.-750    	; 0x588e <TWI_ReadPacket>
    5b7c:	88 23       	and	r24, r24
    5b7e:	19 f0       	breq	.+6      	; 0x5b86 <rtc_run+0x40>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5b80:	84 ea       	ldi	r24, 0xA4	; 164
    5b82:	94 e0       	ldi	r25, 0x04	; 4
    5b84:	2a c0       	rjmp	.+84     	; 0x5bda <rtc_run+0x94>
    5b86:	8c 81       	ldd	r24, Y+4	; 0x04
        return -1;
    }

    if(run == -1)
    5b88:	ff ef       	ldi	r31, 0xFF	; 255
    5b8a:	cf 16       	cp	r12, r31
    5b8c:	df 06       	cpc	r13, r31
    5b8e:	59 f4       	brne	.+22     	; 0x5ba6 <rtc_run+0x60>
        return ((b & 0x80) ? 0 : 1);
    5b90:	08 2e       	mov	r0, r24
    5b92:	00 0c       	add	r0, r0
    5b94:	99 0b       	sbc	r25, r25
    5b96:	80 95       	com	r24
    5b98:	90 95       	com	r25
    5b9a:	89 2f       	mov	r24, r25
    5b9c:	88 1f       	adc	r24, r24
    5b9e:	88 27       	eor	r24, r24
    5ba0:	88 1f       	adc	r24, r24
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	26 c0       	rjmp	.+76     	; 0x5bf2 <rtc_run+0xac>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5ba6:	8f 77       	andi	r24, 0x7F	; 127
    5ba8:	c1 14       	cp	r12, r1
    5baa:	d1 04       	cpc	r13, r1
    5bac:	11 f4       	brne	.+4      	; 0x5bb2 <rtc_run+0x6c>
    5bae:	90 e8       	ldi	r25, 0x80	; 128
    5bb0:	01 c0       	rjmp	.+2      	; 0x5bb4 <rtc_run+0x6e>
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	89 2b       	or	r24, r25
    5bb6:	8c 83       	std	Y+4, r24	; 0x04

    WriteAddress = 0;
    5bb8:	1e 82       	std	Y+6, r1	; 0x06
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5bba:	ee 24       	eor	r14, r14
    5bbc:	e3 94       	inc	r14
    5bbe:	8e 01       	movw	r16, r28
    5bc0:	0c 5f       	subi	r16, 0xFC	; 252
    5bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc4:	21 e0       	ldi	r18, 0x01	; 1
    5bc6:	ae 01       	movw	r20, r28
    5bc8:	4a 5f       	subi	r20, 0xFA	; 250
    5bca:	5f 4f       	sbci	r21, 0xFF	; 255
    5bcc:	62 e3       	ldi	r22, 0x32	; 50
    5bce:	80 ed       	ldi	r24, 0xD0	; 208
    5bd0:	9f de       	rcall	.-706    	; 0x5910 <TWI_WritePacket>
    5bd2:	88 23       	and	r24, r24
    5bd4:	69 f0       	breq	.+26     	; 0x5bf0 <rtc_run+0xaa>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    5bd6:	86 e8       	ldi	r24, 0x86	; 134
    5bd8:	94 e0       	ldi	r25, 0x04	; 4
    5bda:	a0 e0       	ldi	r26, 0x00	; 0
    5bdc:	ed b7       	in	r30, 0x3d	; 61
    5bde:	fe b7       	in	r31, 0x3e	; 62
    5be0:	81 83       	std	Z+1, r24	; 0x01
    5be2:	92 83       	std	Z+2, r25	; 0x02
    5be4:	a3 83       	std	Z+3, r26	; 0x03
    5be6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(-1);
    5bea:	8f ef       	ldi	r24, 0xFF	; 255
    5bec:	9f ef       	ldi	r25, 0xFF	; 255
    5bee:	01 c0       	rjmp	.+2      	; 0x5bf2 <rtc_run+0xac>
    5bf0:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5bf2:	26 96       	adiw	r28, 0x06	; 6
    5bf4:	0f b6       	in	r0, 0x3f	; 63
    5bf6:	f8 94       	cli
    5bf8:	de bf       	out	0x3e, r29	; 62
    5bfa:	0f be       	out	0x3f, r0	; 63
    5bfc:	cd bf       	out	0x3d, r28	; 61
    5bfe:	df 91       	pop	r29
    5c00:	cf 91       	pop	r28
    5c02:	1f 91       	pop	r17
    5c04:	0f 91       	pop	r16
    5c06:	ef 90       	pop	r14
    5c08:	df 90       	pop	r13
    5c0a:	cf 90       	pop	r12
    5c0c:	08 95       	ret

00005c0e <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5c0e:	ef 92       	push	r14
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	cd b7       	in	r28, 0x3d	; 61
    5c1a:	de b7       	in	r29, 0x3e	; 62
    5c1c:	2c 97       	sbiw	r28, 0x0c	; 12
    5c1e:	0f b6       	in	r0, 0x3f	; 63
    5c20:	f8 94       	cli
    5c22:	de bf       	out	0x3e, r29	; 62
    5c24:	0f be       	out	0x3f, r0	; 63
    5c26:	cd bf       	out	0x3d, r28	; 61
    5c28:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	80 81       	ld	r24, Z
    5c2e:	7b df       	rcall	.-266    	; 0x5b26 <BINtoBCD>
    5c30:	8f 77       	andi	r24, 0x7F	; 127
    5c32:	8c 83       	std	Y+4, r24	; 0x04
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5c34:	f8 01       	movw	r30, r16
    5c36:	82 81       	ldd	r24, Z+2	; 0x02
    5c38:	76 df       	rcall	.-276    	; 0x5b26 <BINtoBCD>
    5c3a:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5c3c:	8d 83       	std	Y+5, r24	; 0x05
    5c3e:	f8 01       	movw	r30, r16
    5c40:	84 81       	ldd	r24, Z+4	; 0x04
    5c42:	71 df       	rcall	.-286    	; 0x5b26 <BINtoBCD>
    5c44:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5c46:	8e 83       	std	Y+6, r24	; 0x06
    5c48:	f8 01       	movw	r30, r16
    5c4a:	84 85       	ldd	r24, Z+12	; 0x0c
    5c4c:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5c4e:	8f 5f       	subi	r24, 0xFF	; 255
    5c50:	8f 83       	std	Y+7, r24	; 0x07
    5c52:	86 81       	ldd	r24, Z+6	; 0x06
    5c54:	68 df       	rcall	.-304    	; 0x5b26 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5c56:	8f 73       	andi	r24, 0x3F	; 63
    5c58:	88 87       	std	Y+8, r24	; 0x08
    5c5a:	f8 01       	movw	r30, r16
    5c5c:	80 85       	ldd	r24, Z+8	; 0x08
    5c5e:	8f 5f       	subi	r24, 0xFF	; 255
    5c60:	62 df       	rcall	.-316    	; 0x5b26 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5c62:	8f 71       	andi	r24, 0x1F	; 31
    5c64:	89 87       	std	Y+9, r24	; 0x09
    5c66:	f8 01       	movw	r30, r16
    5c68:	82 85       	ldd	r24, Z+10	; 0x0a
    5c6a:	84 56       	subi	r24, 0x64	; 100
    5c6c:	5c df       	rcall	.-328    	; 0x5b26 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5c6e:	8a 87       	std	Y+10, r24	; 0x0a
    5c70:	83 e9       	ldi	r24, 0x93	; 147
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5c72:	8b 87       	std	Y+11, r24	; 0x0b
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5c74:	1c 86       	std	Y+12, r1	; 0x0c
    5c76:	88 e0       	ldi	r24, 0x08	; 8
    5c78:	e8 2e       	mov	r14, r24
    5c7a:	8e 01       	movw	r16, r28
    5c7c:	0c 5f       	subi	r16, 0xFC	; 252
    5c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c80:	21 e0       	ldi	r18, 0x01	; 1
    5c82:	ae 01       	movw	r20, r28
    5c84:	44 5f       	subi	r20, 0xF4	; 244
    5c86:	5f 4f       	sbci	r21, 0xFF	; 255
    5c88:	62 e3       	ldi	r22, 0x32	; 50
    5c8a:	80 ed       	ldi	r24, 0xD0	; 208
    5c8c:	41 de       	rcall	.-894    	; 0x5910 <TWI_WritePacket>
    5c8e:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5c90:	61 f0       	breq	.+24     	; 0x5caa <rtc_write+0x9c>
    5c92:	87 e5       	ldi	r24, 0x57	; 87
    5c94:	94 e0       	ldi	r25, 0x04	; 4
    5c96:	a0 e0       	ldi	r26, 0x00	; 0
    5c98:	ed b7       	in	r30, 0x3d	; 61
    5c9a:	fe b7       	in	r31, 0x3e	; 62
    5c9c:	81 83       	std	Z+1, r24	; 0x01
    5c9e:	92 83       	std	Z+2, r25	; 0x02
    5ca0:	a3 83       	std	Z+3, r26	; 0x03
    5ca2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(0);
    5ca6:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5ca8:	01 c0       	rjmp	.+2      	; 0x5cac <rtc_write+0x9e>
}
    5caa:	81 e0       	ldi	r24, 0x01	; 1
    5cac:	2c 96       	adiw	r28, 0x0c	; 12
    5cae:	0f b6       	in	r0, 0x3f	; 63
    5cb0:	f8 94       	cli
    5cb2:	de bf       	out	0x3e, r29	; 62
    5cb4:	0f be       	out	0x3f, r0	; 63
    5cb6:	cd bf       	out	0x3d, r28	; 61
    5cb8:	df 91       	pop	r29
    5cba:	cf 91       	pop	r28
    5cbc:	1f 91       	pop	r17
    5cbe:	0f 91       	pop	r16
    5cc0:	ef 90       	pop	r14
    5cc2:	08 95       	ret

00005cc4 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5cc4:	a7 e0       	ldi	r26, 0x07	; 7
    5cc6:	b0 e0       	ldi	r27, 0x00	; 0
    5cc8:	e8 e6       	ldi	r30, 0x68	; 104
    5cca:	fe e2       	ldi	r31, 0x2E	; 46
    5ccc:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    5cd0:	8c 01       	movw	r16, r24
    5cd2:	4c 83       	std	Y+4, r20	; 0x04
    5cd4:	5d 83       	std	Y+5, r21	; 0x05
    5cd6:	6e 83       	std	Y+6, r22	; 0x06
    5cd8:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    5cda:	61 e1       	ldi	r22, 0x11	; 17
    5cdc:	81 e0       	ldi	r24, 0x01	; 1
    5cde:	35 dd       	rcall	.-1430   	; 0x574a <TWI_Init>

    if(!force)
    5ce0:	01 15       	cp	r16, r1
    5ce2:	11 05       	cpc	r17, r1
    5ce4:	d9 f4       	brne	.+54     	; 0x5d1c <rtc_init+0x58>
    {
        state = rtc_run(-1);
    5ce6:	8f ef       	ldi	r24, 0xFF	; 255
    5ce8:	9f ef       	ldi	r25, 0xFF	; 255
    5cea:	2d df       	rcall	.-422    	; 0x5b46 <rtc_run>
        if(state < 0)
    5cec:	87 ff       	sbrs	r24, 7
    5cee:	06 c0       	rjmp	.+12     	; 0x5cfc <rtc_init+0x38>
        {
            rtc_ok = 0;
    5cf0:	10 92 d3 19 	sts	0x19D3, r1	; 0x8019d3 <rtc_ok+0x1>
    5cf4:	10 92 d2 19 	sts	0x19D2, r1	; 0x8019d2 <rtc_ok>
            return 0;
    5cf8:	10 e0       	ldi	r17, 0x00	; 0
    5cfa:	2b c0       	rjmp	.+86     	; 0x5d52 <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    5cfc:	88 23       	and	r24, r24
    5cfe:	71 f0       	breq	.+28     	; 0x5d1c <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    5d00:	05 c0       	rjmp	.+10     	; 0x5d0c <rtc_init+0x48>
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	1f df       	rcall	.-450    	; 0x5b46 <rtc_run>
    5d08:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5d0a:	f2 cf       	rjmp	.-28     	; 0x5cf0 <rtc_init+0x2c>
    5d0c:	81 e0       	ldi	r24, 0x01	; 1
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	90 93 d3 19 	sts	0x19D3, r25	; 0x8019d3 <rtc_ok+0x1>
    5d14:	80 93 d2 19 	sts	0x19D2, r24	; 0x8019d2 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5d18:	11 e0       	ldi	r17, 0x01	; 1
    5d1a:	1b c0       	rjmp	.+54     	; 0x5d52 <rtc_init+0x8e>
    5d1c:	80 e0       	ldi	r24, 0x00	; 0
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	12 df       	rcall	.-476    	; 0x5b46 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5d22:	97 fd       	sbrc	r25, 7
    5d24:	e5 cf       	rjmp	.-54     	; 0x5cf0 <rtc_init+0x2c>
    5d26:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    5d28:	04 96       	adiw	r24, 0x04	; 4
    5d2a:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <gmtime>
    5d2e:	6f df       	rcall	.-290    	; 0x5c0e <rtc_write>
    5d30:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    5d32:	81 11       	cpse	r24, r1
    5d34:	e6 cf       	rjmp	.-52     	; 0x5d02 <rtc_init+0x3e>
    5d36:	88 e6       	ldi	r24, 0x68	; 104
    5d38:	94 e0       	ldi	r25, 0x04	; 4
    5d3a:	a0 e0       	ldi	r26, 0x00	; 0
    5d3c:	ed b7       	in	r30, 0x3d	; 61
    5d3e:	fe b7       	in	r31, 0x3e	; 62
    5d40:	81 83       	std	Z+1, r24	; 0x01
    5d42:	92 83       	std	Z+2, r25	; 0x02
    5d44:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    5d46:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    5d4a:	10 92 d3 19 	sts	0x19D3, r1	; 0x8019d3 <rtc_ok+0x1>
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5d4e:	10 92 d2 19 	sts	0x19D2, r1	; 0x8019d2 <rtc_ok>
    5d52:	81 2f       	mov	r24, r17
    5d54:	27 96       	adiw	r28, 0x07	; 7
    5d56:	e4 e0       	ldi	r30, 0x04	; 4
    5d58:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00005d5c <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5d5c:	cf 92       	push	r12
    5d5e:	df 92       	push	r13
    5d60:	ef 92       	push	r14
    5d62:	0f 93       	push	r16
    5d64:	1f 93       	push	r17
    5d66:	cf 93       	push	r28
    5d68:	df 93       	push	r29
    5d6a:	cd b7       	in	r28, 0x3d	; 61
    5d6c:	de b7       	in	r29, 0x3e	; 62
    5d6e:	2c 97       	sbiw	r28, 0x0c	; 12
    5d70:	0f b6       	in	r0, 0x3f	; 63
    5d72:	f8 94       	cli
    5d74:	de bf       	out	0x3e, r29	; 62
    5d76:	0f be       	out	0x3f, r0	; 63
    5d78:	cd bf       	out	0x3d, r28	; 61
    5d7a:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5d7c:	1c 86       	std	Y+12, r1	; 0x0c

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5d7e:	88 e0       	ldi	r24, 0x08	; 8
    5d80:	e8 2e       	mov	r14, r24
    5d82:	8e 01       	movw	r16, r28
    5d84:	0c 5f       	subi	r16, 0xFC	; 252
    5d86:	1f 4f       	sbci	r17, 0xFF	; 255
    5d88:	21 e0       	ldi	r18, 0x01	; 1
    5d8a:	ae 01       	movw	r20, r28
    5d8c:	44 5f       	subi	r20, 0xF4	; 244
    5d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d90:	62 e3       	ldi	r22, 0x32	; 50
    5d92:	81 ed       	ldi	r24, 0xD1	; 209
    5d94:	7c dd       	rcall	.-1288   	; 0x588e <TWI_ReadPacket>
    5d96:	88 23       	and	r24, r24
    5d98:	61 f0       	breq	.+24     	; 0x5db2 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5d9a:	87 e4       	ldi	r24, 0x47	; 71
    5d9c:	94 e0       	ldi	r25, 0x04	; 4
    5d9e:	a0 e0       	ldi	r26, 0x00	; 0
    5da0:	ed b7       	in	r30, 0x3d	; 61
    5da2:	fe b7       	in	r31, 0x3e	; 62
    5da4:	81 83       	std	Z+1, r24	; 0x01
    5da6:	92 83       	std	Z+2, r25	; 0x02
    5da8:	a3 83       	std	Z+3, r26	; 0x03
    5daa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return 0;
    5dae:	80 e0       	ldi	r24, 0x00	; 0
    5db0:	33 c0       	rjmp	.+102    	; 0x5e18 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5db2:	8c 81       	ldd	r24, Y+4	; 0x04
    5db4:	8f 77       	andi	r24, 0x7F	; 127
    5db6:	be de       	rcall	.-644    	; 0x5b34 <BCDtoBIN>
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	f6 01       	movw	r30, r12
    5dbc:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5dbe:	80 83       	st	Z, r24
    5dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    5dc2:	8f 77       	andi	r24, 0x7F	; 127
    5dc4:	b7 de       	rcall	.-658    	; 0x5b34 <BCDtoBIN>
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5dca:	93 83       	std	Z+3, r25	; 0x03
    5dcc:	82 83       	std	Z+2, r24	; 0x02
    5dce:	8e 81       	ldd	r24, Y+6	; 0x06
    5dd0:	8f 73       	andi	r24, 0x3F	; 63
    5dd2:	b0 de       	rcall	.-672    	; 0x5b34 <BCDtoBIN>
    5dd4:	90 e0       	ldi	r25, 0x00	; 0
    5dd6:	f6 01       	movw	r30, r12
    5dd8:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5dda:	84 83       	std	Z+4, r24	; 0x04
    5ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    5dde:	87 70       	andi	r24, 0x07	; 7
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5de4:	95 87       	std	Z+13, r25	; 0x0d
    5de6:	84 87       	std	Z+12, r24	; 0x0c
    5de8:	88 85       	ldd	r24, Y+8	; 0x08
    5dea:	8f 73       	andi	r24, 0x3F	; 63
    5dec:	a3 de       	rcall	.-698    	; 0x5b34 <BCDtoBIN>
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5df2:	97 83       	std	Z+7, r25	; 0x07
    5df4:	86 83       	std	Z+6, r24	; 0x06
    5df6:	89 85       	ldd	r24, Y+9	; 0x09
    5df8:	8f 71       	andi	r24, 0x1F	; 31
    5dfa:	9c de       	rcall	.-712    	; 0x5b34 <BCDtoBIN>
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	01 97       	sbiw	r24, 0x01	; 1
    5e00:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    5e02:	91 87       	std	Z+9, r25	; 0x09
    5e04:	80 87       	std	Z+8, r24	; 0x08
    5e06:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e08:	95 de       	rcall	.-726    	; 0x5b34 <BCDtoBIN>
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	8c 59       	subi	r24, 0x9C	; 156
    5e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e10:	f6 01       	movw	r30, r12
    5e12:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    5e14:	82 87       	std	Z+10, r24	; 0x0a
}
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	2c 96       	adiw	r28, 0x0c	; 12
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	f8 94       	cli
    5e1e:	de bf       	out	0x3e, r29	; 62
    5e20:	0f be       	out	0x3f, r0	; 63
    5e22:	cd bf       	out	0x3d, r28	; 61
    5e24:	df 91       	pop	r29
    5e26:	cf 91       	pop	r28
    5e28:	1f 91       	pop	r17
    5e2a:	0f 91       	pop	r16
    5e2c:	ef 90       	pop	r14
    5e2e:	df 90       	pop	r13
    5e30:	cf 90       	pop	r12
    5e32:	08 95       	ret

00005e34 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
    LCD_moveCursorRightCount(1);
    5e34:	64 e1       	ldi	r22, 0x14	; 20
    5e36:	99 dc       	rcall	.-1742   	; 0x576a <TWI_StartTransmission>
    5e38:	81 11       	cpse	r24, r1
    5e3a:	07 c0       	rjmp	.+14     	; 0x5e4a <I2C_Start+0x16>
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <LCD_ok+0x1>
    5e44:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LCD_ok>
    5e48:	04 c0       	rjmp	.+8      	; 0x5e52 <I2C_Start+0x1e>
    5e4a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <LCD_ok+0x1>
    5e4e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <LCD_ok>
    5e52:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    5e56:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    5e5a:	08 95       	ret

00005e5c <I2C_Stop>:
    5e5c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    5e60:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    5e64:	89 2b       	or	r24, r25
    5e66:	09 f0       	breq	.+2      	; 0x5e6a <I2C_Stop+0xe>
    5e68:	7c cc       	rjmp	.-1800   	; 0x5762 <TWI_StopTransmission>
    5e6a:	08 95       	ret

00005e6c <I2C_Send>:
    5e6c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <LCD_ok>
    5e70:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <LCD_ok+0x1>
    5e74:	21 15       	cp	r18, r1
    5e76:	31 05       	cpc	r19, r1
    5e78:	41 f0       	breq	.+16     	; 0x5e8a <I2C_Send+0x1e>
    5e7a:	d7 dc       	rcall	.-1618   	; 0x582a <TWI_SendByte>
    5e7c:	51 e0       	ldi	r21, 0x01	; 1
    5e7e:	40 e0       	ldi	r20, 0x00	; 0
    5e80:	89 2b       	or	r24, r25
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <I2C_Send+0x1a>
    5e84:	50 e0       	ldi	r21, 0x00	; 0
    5e86:	25 2f       	mov	r18, r21
    5e88:	34 2f       	mov	r19, r20
    5e8a:	c9 01       	movw	r24, r18
    5e8c:	08 95       	ret

00005e8e <LCD_putb>:
    5e8e:	cf 93       	push	r28
    5e90:	c8 2f       	mov	r28, r24
    5e92:	84 ee       	ldi	r24, 0xE4	; 228
    5e94:	cf df       	rcall	.-98     	; 0x5e34 <I2C_Start>
    5e96:	89 2b       	or	r24, r25
    5e98:	19 f4       	brne	.+6      	; 0x5ea0 <LCD_putb+0x12>
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	07 c0       	rjmp	.+14     	; 0x5eae <LCD_putb+0x20>
    5ea0:	8c 2f       	mov	r24, r28
    5ea2:	e4 df       	rcall	.-56     	; 0x5e6c <I2C_Send>
    5ea4:	89 2b       	or	r24, r25
    5ea6:	c9 f3       	breq	.-14     	; 0x5e9a <LCD_putb+0xc>
    5ea8:	d9 df       	rcall	.-78     	; 0x5e5c <I2C_Stop>
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	cf 91       	pop	r28
    5eb0:	08 95       	ret

00005eb2 <LCD_command>:
    5eb2:	cf 93       	push	r28
    5eb4:	c8 2f       	mov	r28, r24
    5eb6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    5eba:	bc df       	rcall	.-136    	; 0x5e34 <I2C_Start>
    5ebc:	89 2b       	or	r24, r25
    5ebe:	51 f0       	breq	.+20     	; 0x5ed4 <LCD_command+0x22>
    5ec0:	8c e7       	ldi	r24, 0x7C	; 124
    5ec2:	d4 df       	rcall	.-88     	; 0x5e6c <I2C_Send>
    5ec4:	8c 2f       	mov	r24, r28
    5ec6:	d2 df       	rcall	.-92     	; 0x5e6c <I2C_Send>
    5ec8:	c9 df       	rcall	.-110    	; 0x5e5c <I2C_Stop>
    5eca:	6a e0       	ldi	r22, 0x0A	; 10
    5ecc:	70 e0       	ldi	r23, 0x00	; 0
    5ece:	80 e0       	ldi	r24, 0x00	; 0
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	1c d9       	rcall	.-3528   	; 0x510c <delayms>
    5ed4:	cf 91       	pop	r28
    5ed6:	08 95       	ret

00005ed8 <LCD_specialCommand>:
    5ed8:	cf 93       	push	r28
    5eda:	c8 2f       	mov	r28, r24
    5edc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    5ee0:	a9 df       	rcall	.-174    	; 0x5e34 <I2C_Start>
    5ee2:	89 2b       	or	r24, r25
    5ee4:	51 f0       	breq	.+20     	; 0x5efa <LCD_specialCommand+0x22>
    5ee6:	8e ef       	ldi	r24, 0xFE	; 254
    5ee8:	c1 df       	rcall	.-126    	; 0x5e6c <I2C_Send>
    5eea:	8c 2f       	mov	r24, r28
    5eec:	bf df       	rcall	.-130    	; 0x5e6c <I2C_Send>
    5eee:	b6 df       	rcall	.-148    	; 0x5e5c <I2C_Stop>
    5ef0:	62 e3       	ldi	r22, 0x32	; 50
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	80 e0       	ldi	r24, 0x00	; 0
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	09 d9       	rcall	.-3566   	; 0x510c <delayms>
    5efa:	cf 91       	pop	r28
    5efc:	08 95       	ret

00005efe <LCD_setCursor>:
    5efe:	a8 e0       	ldi	r26, 0x08	; 8
    5f00:	b0 e0       	ldi	r27, 0x00	; 0
    5f02:	e5 e8       	ldi	r30, 0x85	; 133
    5f04:	ff e2       	ldi	r31, 0x2F	; 47
    5f06:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    5f0a:	98 e0       	ldi	r25, 0x08	; 8
    5f0c:	e9 ef       	ldi	r30, 0xF9	; 249
    5f0e:	f2 e0       	ldi	r31, 0x02	; 2
    5f10:	de 01       	movw	r26, r28
    5f12:	11 96       	adiw	r26, 0x01	; 1
    5f14:	01 90       	ld	r0, Z+
    5f16:	0d 92       	st	X+, r0
    5f18:	9a 95       	dec	r25
    5f1a:	e1 f7       	brne	.-8      	; 0x5f14 <LCD_setCursor+0x16>
    5f1c:	64 30       	cpi	r22, 0x04	; 4
    5f1e:	08 f0       	brcs	.+2      	; 0x5f22 <LCD_setCursor+0x24>
    5f20:	63 e0       	ldi	r22, 0x03	; 3
    5f22:	fe 01       	movw	r30, r28
    5f24:	31 96       	adiw	r30, 0x01	; 1
    5f26:	e6 0f       	add	r30, r22
    5f28:	f1 1d       	adc	r31, r1
    5f2a:	e6 0f       	add	r30, r22
    5f2c:	f1 1d       	adc	r31, r1
    5f2e:	90 81       	ld	r25, Z
    5f30:	89 0f       	add	r24, r25
    5f32:	80 68       	ori	r24, 0x80	; 128
    5f34:	d1 df       	rcall	.-94     	; 0x5ed8 <LCD_specialCommand>
    5f36:	28 96       	adiw	r28, 0x08	; 8
    5f38:	e2 e0       	ldi	r30, 0x02	; 2
    5f3a:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00005f3e <LCD_pos>:
    5f3e:	e0 e1       	ldi	r30, 0x10	; 16
    5f40:	f1 e0       	ldi	r31, 0x01	; 1
    5f42:	28 2f       	mov	r18, r24
    5f44:	30 e0       	ldi	r19, 0x00	; 0
    5f46:	31 83       	std	Z+1, r19	; 0x01
    5f48:	20 83       	st	Z, r18
    5f4a:	26 2f       	mov	r18, r22
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	33 83       	std	Z+3, r19	; 0x03
    5f50:	22 83       	std	Z+2, r18	; 0x02
    5f52:	d5 cf       	rjmp	.-86     	; 0x5efe <LCD_setCursor>
    5f54:	08 95       	ret

00005f56 <LCD_clear>:
    5f56:	8d e2       	ldi	r24, 0x2D	; 45
    5f58:	ac df       	rcall	.-168    	; 0x5eb2 <LCD_command>
    5f5a:	60 e0       	ldi	r22, 0x00	; 0
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	ef df       	rcall	.-34     	; 0x5f3e <LCD_pos>
    5f60:	6a e0       	ldi	r22, 0x0A	; 10
    5f62:	70 e0       	ldi	r23, 0x00	; 0
    5f64:	80 e0       	ldi	r24, 0x00	; 0
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	d1 c8       	rjmp	.-3678   	; 0x510c <delayms>
    5f6a:	08 95       	ret

00005f6c <LCD_setFastBacklightRGB>:
}                                                 // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    5f6c:	1f 93       	push	r17
    5f6e:	cf 93       	push	r28
    5f70:	df 93       	push	r29
    5f72:	18 2f       	mov	r17, r24
    5f74:	d6 2f       	mov	r29, r22
    5f76:	c4 2f       	mov	r28, r20
//send commands to the display to set backlights
    if( !I2C_Start(lcd_address) )
    5f78:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    5f7c:	5b df       	rcall	.-330    	; 0x5e34 <I2C_Start>
    5f7e:	89 2b       	or	r24, r25
        return;
    I2C_Send(SETTING_COMMAND);                    //Send special command character
    5f80:	81 f0       	breq	.+32     	; 0x5fa2 <LCD_setFastBacklightRGB+0x36>
    I2C_Send(SET_RGB_COMMAND);                    //Send the set RGB character '+' or plus
    5f82:	8c e7       	ldi	r24, 0x7C	; 124
    I2C_Send(r);                                  //Send the red value
    I2C_Send(g);                                  //Send the green value
    5f84:	73 df       	rcall	.-282    	; 0x5e6c <I2C_Send>
    5f86:	8b e2       	ldi	r24, 0x2B	; 43
    I2C_Send(b);                                  //Send the blue value
    5f88:	71 df       	rcall	.-286    	; 0x5e6c <I2C_Send>
    5f8a:	81 2f       	mov	r24, r17
    I2C_Stop();                                   //Stop transmission
    5f8c:	6f df       	rcall	.-290    	; 0x5e6c <I2C_Send>
    5f8e:	8d 2f       	mov	r24, r29
    delayms(10);
    5f90:	6d df       	rcall	.-294    	; 0x5e6c <I2C_Send>
    5f92:	8c 2f       	mov	r24, r28
    5f94:	6b df       	rcall	.-298    	; 0x5e6c <I2C_Send>
    5f96:	62 df       	rcall	.-316    	; 0x5e5c <I2C_Stop>
    5f98:	6a e0       	ldi	r22, 0x0A	; 10
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
}                                                 // setFastBacklight
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	b5 d8       	rcall	.-3734   	; 0x510c <delayms>
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	1f 91       	pop	r17
    5fa8:	08 95       	ret

00005faa <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{

    if( !I2C_Start(lcd_address = addr) )
    5faa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_address>
    5fae:	42 df       	rcall	.-380    	; 0x5e34 <I2C_Start>
    5fb0:	00 97       	sbiw	r24, 0x00	; 0
        return 0;

    I2C_Send(SPECIAL_COMMAND);                    //Send special command character
    5fb2:	61 f1       	breq	.+88     	; 0x600c <LCD_init+0x62>
    5fb4:	8e ef       	ldi	r24, 0xFE	; 254
//Send the display command
    I2C_Send(LCD_DISPLAYCONTROL | _displayControl);
    5fb6:	5a df       	rcall	.-332    	; 0x5e6c <I2C_Send>
    5fb8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_displayControl>

    I2C_Send(SPECIAL_COMMAND);                    //Send special command character
    5fbc:	88 60       	ori	r24, 0x08	; 8
    5fbe:	56 df       	rcall	.-340    	; 0x5e6c <I2C_Send>
    I2C_Send(LCD_ENTRYMODESET | _displayMode);    //Send the entry mode command
    5fc0:	8e ef       	ldi	r24, 0xFE	; 254
    5fc2:	54 df       	rcall	.-344    	; 0x5e6c <I2C_Send>

    I2C_Send(SETTING_COMMAND);                    //Put LCD into setting mode
    5fc4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_displayMode>
    I2C_Send(CLEAR_COMMAND);                      //Send clear display command

    I2C_Send(SETTING_COMMAND);                    //Send special command character
    5fc8:	84 60       	ori	r24, 0x04	; 4
    I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);     //Send the set '.' character
    5fca:	50 df       	rcall	.-352    	; 0x5e6c <I2C_Send>
    5fcc:	8c e7       	ldi	r24, 0x7C	; 124

    I2C_Send(SPECIAL_COMMAND);                    //Send special command character
    5fce:	4e df       	rcall	.-356    	; 0x5e6c <I2C_Send>
    5fd0:	8d e2       	ldi	r24, 0x2D	; 45
    I2C_Send(LCD_SETDDRAMADDR | 0);               // HOME 0,0
    5fd2:	4c df       	rcall	.-360    	; 0x5e6c <I2C_Send>
    5fd4:	8c e7       	ldi	r24, 0x7C	; 124

    I2C_Stop();
    5fd6:	4a df       	rcall	.-364    	; 0x5e6c <I2C_Send>
    5fd8:	8f e2       	ldi	r24, 0x2F	; 47
    delayms(50);                                  //let things settle a bit
    5fda:	48 df       	rcall	.-368    	; 0x5e6c <I2C_Send>
    5fdc:	8e ef       	ldi	r24, 0xFE	; 254
    5fde:	46 df       	rcall	.-372    	; 0x5e6c <I2C_Send>
    5fe0:	80 e8       	ldi	r24, 0x80	; 128
    5fe2:	44 df       	rcall	.-376    	; 0x5e6c <I2C_Send>
    5fe4:	3b df       	rcall	.-394    	; 0x5e5c <I2C_Stop>

    LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    5fe6:	62 e3       	ldi	r22, 0x32	; 50
    5fe8:	70 e0       	ldi	r23, 0x00	; 0
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	8e d8       	rcall	.-3812   	; 0x510c <delayms>

    lcd.xpos = 0;
    5ff0:	40 ec       	ldi	r20, 0xC0	; 192
    5ff2:	60 ec       	ldi	r22, 0xC0	; 192
    5ff4:	80 ec       	ldi	r24, 0xC0	; 192
    5ff6:	ba df       	rcall	.-140    	; 0x5f6c <LCD_setFastBacklightRGB>
    lcd.ypos = 0;
    5ff8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    5ffc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>

    return(1);
    6000:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
}                                                 //init
    6004:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	08 95       	ret

0000600e <lcd_cleareol>:
    {
        LCD_putb(' ');
        rem--;
    }
    LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    600e:	cf 93       	push	r28
    6010:	df 93       	push	r29
    6012:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <lcd+0x4>
    6016:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <lcd+0x5>
    601a:	21 97       	sbiw	r28, 0x01	; 1
    601c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    6020:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    6024:	c8 1b       	sub	r28, r24
    6026:	d9 0b       	sbc	r29, r25
    6028:	1c 16       	cp	r1, r28
    602a:	1d 06       	cpc	r1, r29
    602c:	24 f4       	brge	.+8      	; 0x6036 <lcd_cleareol+0x28>
    602e:	80 e2       	ldi	r24, 0x20	; 32
    6030:	2e df       	rcall	.-420    	; 0x5e8e <LCD_putb>
    6032:	21 97       	sbiw	r28, 0x01	; 1
    6034:	f9 cf       	rjmp	.-14     	; 0x6028 <lcd_cleareol+0x1a>
    6036:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    603a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    603e:	01 97       	sbiw	r24, 0x01	; 1
    6040:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    6044:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
    6048:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    604c:	78 df       	rcall	.-272    	; 0x5f3e <LCD_pos>
    604e:	df 91       	pop	r29
    6050:	cf 91       	pop	r28
    6052:	08 95       	ret

00006054 <lcd_putch>:

/// @brief  put character
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6054:	cf 93       	push	r28
    6056:	df 93       	push	r29
    int rem;

    if(c < 0 || c > 0x7e)
    6058:	8f 37       	cpi	r24, 0x7F	; 127
    605a:	91 05       	cpc	r25, r1
    605c:	08 f0       	brcs	.+2      	; 0x6060 <lcd_putch+0xc>
    605e:	50 c0       	rjmp	.+160    	; 0x6100 <lcd_putch+0xac>
    6060:	ec 01       	movw	r28, r24
        return;

// Normal visible characters
    if(c >= ' ')
    6062:	80 32       	cpi	r24, 0x20	; 32
    6064:	91 05       	cpc	r25, r1
    6066:	4c f1       	brlt	.+82     	; 0x60ba <lcd_putch+0x66>
    {
        rem = (lcd.w - 1 - lcd.xpos);
        if( rem <= 0 )
    6068:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    606c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    6070:	01 97       	sbiw	r24, 0x01	; 1
    6072:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <lcd>
    6076:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <lcd+0x1>
    607a:	82 1b       	sub	r24, r18
    607c:	93 0b       	sbc	r25, r19
    607e:	18 16       	cp	r1, r24
    6080:	19 06       	cpc	r1, r25
    6082:	7c f0       	brlt	.+30     	; 0x60a2 <lcd_putch+0x4e>
        {
            LCD_pos(++lcd.ypos,lcd.xpos=0);
    6084:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lcd+0x2>
    6088:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <lcd+0x3>
    608c:	01 96       	adiw	r24, 0x01	; 1
    608e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <lcd+0x3>
    6092:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lcd+0x2>
    6096:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    609a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    609e:	60 e0       	ldi	r22, 0x00	; 0
        }
        (void) LCD_putb(c);
    60a0:	4e df       	rcall	.-356    	; 0x5f3e <LCD_pos>
    60a2:	8c 2f       	mov	r24, r28
// uart_putchar(c,0);
        lcd.xpos++;
    60a4:	f4 de       	rcall	.-536    	; 0x5e8e <LCD_putb>
    60a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    60aa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    60ae:	01 96       	adiw	r24, 0x01	; 1
    60b0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    60b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
        return;
    }

// Control characters
    if(c == '\n')
    60b8:	23 c0       	rjmp	.+70     	; 0x6100 <lcd_putch+0xac>
    60ba:	8a 30       	cpi	r24, 0x0A	; 10
    {
// uart_putchar(c,0);
        lcd_cleareol();
    60bc:	91 05       	cpc	r25, r1
    60be:	91 f4       	brne	.+36     	; 0x60e4 <lcd_putch+0x90>
        ++lcd.ypos;
        lcd.ypos &= 3;
    60c0:	a6 df       	rcall	.-180    	; 0x600e <lcd_cleareol>
    60c2:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    60c6:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <lcd+0x3>
    60ca:	6f 5f       	subi	r22, 0xFF	; 255
    60cc:	7f 4f       	sbci	r23, 0xFF	; 255
    60ce:	63 70       	andi	r22, 0x03	; 3
    60d0:	77 27       	eor	r23, r23
    60d2:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <lcd+0x3>
    60d6:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <lcd+0x2>
        LCD_pos(lcd.xpos=0,lcd.ypos);
    60da:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    60de:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    }

    if(c == '\f')
    60e2:	0c c0       	rjmp	.+24     	; 0x60fc <lcd_putch+0xa8>
    {
        LCD_clear();
    60e4:	0c 97       	sbiw	r24, 0x0c	; 12
    60e6:	61 f4       	brne	.+24     	; 0x6100 <lcd_putch+0xac>
        LCD_pos(lcd.xpos=0,lcd.ypos=0);
    60e8:	36 df       	rcall	.-404    	; 0x5f56 <LCD_clear>
    60ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    60ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    60f2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
    60f6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    60fe:	1f df       	rcall	.-450    	; 0x5f3e <LCD_pos>
    6100:	df 91       	pop	r29
    6102:	cf 91       	pop	r28
    6104:	08 95       	ret

00006106 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    6106:	fc 01       	movw	r30, r24
    p->sent++;
    6108:	26 81       	ldd	r18, Z+6	; 0x06
    610a:	37 81       	ldd	r19, Z+7	; 0x07
    610c:	2f 5f       	subi	r18, 0xFF	; 255
    610e:	3f 4f       	sbci	r19, 0xFF	; 255
    6110:	37 83       	std	Z+7, r19	; 0x07
    6112:	26 83       	std	Z+6, r18	; 0x06
    lcd_putch(ch);
    6114:	86 2f       	mov	r24, r22
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	9d cf       	rjmp	.-198    	; 0x6054 <lcd_putch>
    611a:	08 95       	ret

0000611c <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    611c:	a8 e0       	ldi	r26, 0x08	; 8
    611e:	b0 e0       	ldi	r27, 0x00	; 0
    6120:	e4 e9       	ldi	r30, 0x94	; 148
    6122:	f0 e3       	ldi	r31, 0x30	; 48
    6124:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    6128:	9e 01       	movw	r18, r28
    612a:	23 5f       	subi	r18, 0xF3	; 243
    612c:	3f 4f       	sbci	r19, 0xFF	; 255
    612e:	f9 01       	movw	r30, r18
    6130:	41 91       	ld	r20, Z+
    6132:	51 91       	ld	r21, Z+
    6134:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6136:	83 e8       	ldi	r24, 0x83	; 131
    6138:	90 e3       	ldi	r25, 0x30	; 48
    613a:	9a 83       	std	Y+2, r25	; 0x02
    613c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    613e:	18 86       	std	Y+8, r1	; 0x08
    6140:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6142:	60 e8       	ldi	r22, 0x80	; 128
    6144:	ce 01       	movw	r24, r28
    6146:	01 96       	adiw	r24, 0x01	; 1
    6148:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <_printf_fn>

    va_end(va);

    return(fn.sent);

}
    614c:	8f 81       	ldd	r24, Y+7	; 0x07
    614e:	98 85       	ldd	r25, Y+8	; 0x08
    6150:	28 96       	adiw	r28, 0x08	; 8
    6152:	e2 e0       	ldi	r30, 0x02	; 2
    6154:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00006158 <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    6158:	9c 01       	movw	r18, r24
    615a:	21 56       	subi	r18, 0x61	; 97
    615c:	31 09       	sbc	r19, r1
    615e:	81 e0       	ldi	r24, 0x01	; 1
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	2a 31       	cpi	r18, 0x1A	; 26
    6164:	31 05       	cpc	r19, r1
    6166:	10 f0       	brcs	.+4      	; 0x616c <islower+0x14>
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	08 95       	ret

0000616e <toupper>:
    616e:	cf 93       	push	r28
    6170:	df 93       	push	r29
    6172:	ec 01       	movw	r28, r24
    6174:	f1 df       	rcall	.-30     	; 0x6158 <islower>
    6176:	89 2b       	or	r24, r25
    6178:	19 f0       	breq	.+6      	; 0x6180 <toupper+0x12>
    617a:	ce 01       	movw	r24, r28
    617c:	80 97       	sbiw	r24, 0x20	; 32
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <toupper+0x14>
    6180:	ce 01       	movw	r24, r28
    6182:	df 91       	pop	r29
    6184:	cf 91       	pop	r28
    6186:	08 95       	ret

00006188 <strcpy>:
    6188:	fc 01       	movw	r30, r24
    618a:	db 01       	movw	r26, r22
    618c:	2d 91       	ld	r18, X+
    618e:	bd 01       	movw	r22, r26
    6190:	01 96       	adiw	r24, 0x01	; 1
    6192:	22 23       	and	r18, r18
    6194:	11 f0       	breq	.+4      	; 0x619a <strcpy+0x12>
    6196:	20 83       	st	Z, r18
    6198:	f7 cf       	rjmp	.-18     	; 0x6188 <strcpy>
    619a:	10 82       	st	Z, r1
    619c:	08 95       	ret

0000619e <strncpy>:
    619e:	db 01       	movw	r26, r22
    61a0:	fc 01       	movw	r30, r24
    61a2:	2d 91       	ld	r18, X+
    61a4:	21 11       	cpse	r18, r1
    61a6:	03 c0       	rjmp	.+6      	; 0x61ae <strncpy+0x10>
    61a8:	4e 0f       	add	r20, r30
    61aa:	5f 1f       	adc	r21, r31
    61ac:	08 c0       	rjmp	.+16     	; 0x61be <strncpy+0x20>
    61ae:	41 15       	cp	r20, r1
    61b0:	51 05       	cpc	r21, r1
    61b2:	21 f0       	breq	.+8      	; 0x61bc <strncpy+0x1e>
    61b4:	21 93       	st	Z+, r18
    61b6:	41 50       	subi	r20, 0x01	; 1
    61b8:	51 09       	sbc	r21, r1
    61ba:	f3 cf       	rjmp	.-26     	; 0x61a2 <strncpy+0x4>
    61bc:	08 95       	ret
    61be:	4e 17       	cp	r20, r30
    61c0:	5f 07       	cpc	r21, r31
    61c2:	11 f0       	breq	.+4      	; 0x61c8 <strncpy+0x2a>
    61c4:	11 92       	st	Z+, r1
    61c6:	fb cf       	rjmp	.-10     	; 0x61be <strncpy+0x20>
    61c8:	08 95       	ret

000061ca <strcat>:
    61ca:	cf 93       	push	r28
    61cc:	df 93       	push	r29
    61ce:	d8 2f       	mov	r29, r24
    61d0:	c9 2f       	mov	r28, r25
    61d2:	28 2f       	mov	r18, r24
    61d4:	39 2f       	mov	r19, r25
    61d6:	c9 01       	movw	r24, r18
    61d8:	2f 5f       	subi	r18, 0xFF	; 255
    61da:	3f 4f       	sbci	r19, 0xFF	; 255
    61dc:	fc 01       	movw	r30, r24
    61de:	40 81       	ld	r20, Z
    61e0:	41 11       	cpse	r20, r1
    61e2:	f9 cf       	rjmp	.-14     	; 0x61d6 <strcat+0xc>
    61e4:	d1 df       	rcall	.-94     	; 0x6188 <strcpy>
    61e6:	8d 2f       	mov	r24, r29
    61e8:	9c 2f       	mov	r25, r28
    61ea:	df 91       	pop	r29
    61ec:	cf 91       	pop	r28
    61ee:	08 95       	ret

000061f0 <reverse>:
    61f0:	fc 01       	movw	r30, r24
    61f2:	01 90       	ld	r0, Z+
    61f4:	00 20       	and	r0, r0
    61f6:	e9 f7       	brne	.-6      	; 0x61f2 <reverse+0x2>
    61f8:	31 97       	sbiw	r30, 0x01	; 1
    61fa:	e8 1b       	sub	r30, r24
    61fc:	f9 0b       	sbc	r31, r25
    61fe:	af 01       	movw	r20, r30
    6200:	55 95       	asr	r21
    6202:	47 95       	ror	r20
    6204:	e8 0f       	add	r30, r24
    6206:	f9 1f       	adc	r31, r25
    6208:	dc 01       	movw	r26, r24
    620a:	9d 01       	movw	r18, r26
    620c:	28 1b       	sub	r18, r24
    620e:	39 0b       	sbc	r19, r25
    6210:	24 17       	cp	r18, r20
    6212:	35 07       	cpc	r19, r21
    6214:	2c f4       	brge	.+10     	; 0x6220 <reverse+0x30>
    6216:	22 91       	ld	r18, -Z
    6218:	3c 91       	ld	r19, X
    621a:	30 83       	st	Z, r19
    621c:	2d 93       	st	X+, r18
    621e:	f5 cf       	rjmp	.-22     	; 0x620a <reverse+0x1a>
    6220:	08 95       	ret

00006222 <strupper>:
    6222:	cf 93       	push	r28
    6224:	df 93       	push	r29
    6226:	ec 01       	movw	r28, r24
    6228:	88 81       	ld	r24, Y
    622a:	88 23       	and	r24, r24
    622c:	21 f0       	breq	.+8      	; 0x6236 <strupper+0x14>
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	9e df       	rcall	.-196    	; 0x616e <toupper>
    6232:	89 93       	st	Y+, r24
    6234:	f9 cf       	rjmp	.-14     	; 0x6228 <strupper+0x6>
    6236:	df 91       	pop	r29
    6238:	cf 91       	pop	r28
    623a:	08 95       	ret

0000623c <strcmp>:
    623c:	dc 01       	movw	r26, r24
    623e:	fb 01       	movw	r30, r22
    6240:	2d 91       	ld	r18, X+
    6242:	41 91       	ld	r20, Z+
    6244:	50 e0       	ldi	r21, 0x00	; 0
    6246:	30 e0       	ldi	r19, 0x00	; 0
    6248:	c9 01       	movw	r24, r18
    624a:	84 1b       	sub	r24, r20
    624c:	95 0b       	sbc	r25, r21
    624e:	11 f4       	brne	.+4      	; 0x6254 <strcmp+0x18>
    6250:	45 2b       	or	r20, r21
    6252:	b1 f7       	brne	.-20     	; 0x6240 <strcmp+0x4>
    6254:	08 95       	ret

00006256 <strcasecmp>:
    6256:	ef 92       	push	r14
    6258:	ff 92       	push	r15
    625a:	0f 93       	push	r16
    625c:	1f 93       	push	r17
    625e:	cf 93       	push	r28
    6260:	df 93       	push	r29
    6262:	7c 01       	movw	r14, r24
    6264:	8b 01       	movw	r16, r22
    6266:	f7 01       	movw	r30, r14
    6268:	81 91       	ld	r24, Z+
    626a:	7f 01       	movw	r14, r30
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	7f df       	rcall	.-258    	; 0x616e <toupper>
    6270:	ec 01       	movw	r28, r24
    6272:	f8 01       	movw	r30, r16
    6274:	81 91       	ld	r24, Z+
    6276:	8f 01       	movw	r16, r30
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	79 df       	rcall	.-270    	; 0x616e <toupper>
    627c:	9c 01       	movw	r18, r24
    627e:	ce 01       	movw	r24, r28
    6280:	82 1b       	sub	r24, r18
    6282:	93 0b       	sbc	r25, r19
    6284:	11 f4       	brne	.+4      	; 0x628a <strcasecmp+0x34>
    6286:	23 2b       	or	r18, r19
    6288:	71 f7       	brne	.-36     	; 0x6266 <strcasecmp+0x10>
    628a:	cd b7       	in	r28, 0x3d	; 61
    628c:	de b7       	in	r29, 0x3e	; 62
    628e:	e6 e0       	ldi	r30, 0x06	; 6
    6290:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00006294 <strncasecmp>:
    6294:	a0 e0       	ldi	r26, 0x00	; 0
    6296:	b0 e0       	ldi	r27, 0x00	; 0
    6298:	e0 e5       	ldi	r30, 0x50	; 80
    629a:	f1 e3       	ldi	r31, 0x31	; 49
    629c:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    62a0:	8c 01       	movw	r16, r24
    62a2:	7b 01       	movw	r14, r22
    62a4:	6c 01       	movw	r12, r24
    62a6:	c4 0e       	add	r12, r20
    62a8:	d5 1e       	adc	r13, r21
    62aa:	0c 15       	cp	r16, r12
    62ac:	1d 05       	cpc	r17, r13
    62ae:	99 f0       	breq	.+38     	; 0x62d6 <strncasecmp+0x42>
    62b0:	f8 01       	movw	r30, r16
    62b2:	81 91       	ld	r24, Z+
    62b4:	8f 01       	movw	r16, r30
    62b6:	90 e0       	ldi	r25, 0x00	; 0
    62b8:	5a df       	rcall	.-332    	; 0x616e <toupper>
    62ba:	ec 01       	movw	r28, r24
    62bc:	f7 01       	movw	r30, r14
    62be:	81 91       	ld	r24, Z+
    62c0:	7f 01       	movw	r14, r30
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	54 df       	rcall	.-344    	; 0x616e <toupper>
    62c6:	9c 01       	movw	r18, r24
    62c8:	ce 01       	movw	r24, r28
    62ca:	82 1b       	sub	r24, r18
    62cc:	93 0b       	sbc	r25, r19
    62ce:	29 f4       	brne	.+10     	; 0x62da <strncasecmp+0x46>
    62d0:	23 2b       	or	r18, r19
    62d2:	59 f7       	brne	.-42     	; 0x62aa <strncasecmp+0x16>
    62d4:	02 c0       	rjmp	.+4      	; 0x62da <strncasecmp+0x46>
    62d6:	80 e0       	ldi	r24, 0x00	; 0
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	cd b7       	in	r28, 0x3d	; 61
    62dc:	de b7       	in	r29, 0x3e	; 62
    62de:	e8 e0       	ldi	r30, 0x08	; 8
    62e0:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

000062e4 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    62e4:	0f 93       	push	r16
    62e6:	1f 93       	push	r17
    62e8:	cf 93       	push	r28
    62ea:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    62ec:	00 97       	sbiw	r24, 0x00	; 0
    62ee:	99 f0       	breq	.+38     	; 0x6316 <stralloc+0x32>
    62f0:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    62f2:	fc 01       	movw	r30, r24
    62f4:	01 90       	ld	r0, Z+
    62f6:	00 20       	and	r0, r0
    62f8:	e9 f7       	brne	.-6      	; 0x62f4 <stralloc+0x10>
    62fa:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    62fc:	61 e0       	ldi	r22, 0x01	; 1
    62fe:	70 e0       	ldi	r23, 0x00	; 0
    6300:	8c 1b       	sub	r24, r28
    6302:	9d 0b       	sbc	r25, r29
    6304:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    6308:	8c 01       	movw	r16, r24
    if(!ptr)
    630a:	00 97       	sbiw	r24, 0x00	; 0
    630c:	21 f0       	breq	.+8      	; 0x6316 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    630e:	be 01       	movw	r22, r28
    6310:	3b df       	rcall	.-394    	; 0x6188 <strcpy>
    return(ptr);
    6312:	c8 01       	movw	r24, r16
    6314:	02 c0       	rjmp	.+4      	; 0x631a <stralloc+0x36>
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	90 e0       	ldi	r25, 0x00	; 0
}
    631a:	df 91       	pop	r29
    631c:	cf 91       	pop	r28
    631e:	1f 91       	pop	r17
    6320:	0f 91       	pop	r16
    6322:	08 95       	ret

00006324 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6324:	00 d0       	rcall	.+0      	; 0x6326 <sep+0x2>
    6326:	1f 92       	push	r1
    6328:	85 ee       	ldi	r24, 0xE5	; 229
    632a:	94 e0       	ldi	r25, 0x04	; 4
    632c:	a0 e0       	ldi	r26, 0x00	; 0
    632e:	ed b7       	in	r30, 0x3d	; 61
    6330:	fe b7       	in	r31, 0x3e	; 62
    6332:	81 83       	std	Z+1, r24	; 0x01
    6334:	92 83       	std	Z+2, r25	; 0x02
    6336:	a3 83       	std	Z+3, r26	; 0x03
    6338:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    633c:	0f 90       	pop	r0
    633e:	0f 90       	pop	r0
    6340:	0f 90       	pop	r0
    6342:	08 95       	ret

00006344 <trim_tail>:
    6344:	00 97       	sbiw	r24, 0x00	; 0
    6346:	69 f0       	breq	.+26     	; 0x6362 <trim_tail+0x1e>
    6348:	fc 01       	movw	r30, r24
    634a:	01 90       	ld	r0, Z+
    634c:	00 20       	and	r0, r0
    634e:	e9 f7       	brne	.-6      	; 0x634a <trim_tail+0x6>
    6350:	31 97       	sbiw	r30, 0x01	; 1
    6352:	e8 17       	cp	r30, r24
    6354:	f9 07       	cpc	r31, r25
    6356:	29 f0       	breq	.+10     	; 0x6362 <trim_tail+0x1e>
    6358:	22 91       	ld	r18, -Z
    635a:	21 32       	cpi	r18, 0x21	; 33
    635c:	10 f4       	brcc	.+4      	; 0x6362 <trim_tail+0x1e>
    635e:	10 82       	st	Z, r1
    6360:	f8 cf       	rjmp	.-16     	; 0x6352 <trim_tail+0xe>
    6362:	08 95       	ret

00006364 <skipspaces>:
    6364:	00 97       	sbiw	r24, 0x00	; 0
    6366:	39 f0       	breq	.+14     	; 0x6376 <skipspaces+0x12>
    6368:	fc 01       	movw	r30, r24
    636a:	cf 01       	movw	r24, r30
    636c:	21 91       	ld	r18, Z+
    636e:	20 32       	cpi	r18, 0x20	; 32
    6370:	e1 f3       	breq	.-8      	; 0x636a <skipspaces+0x6>
    6372:	29 30       	cpi	r18, 0x09	; 9
    6374:	d1 f3       	breq	.-12     	; 0x636a <skipspaces+0x6>
    6376:	08 95       	ret

00006378 <MATCH>:
    6378:	cf 93       	push	r28
    637a:	df 93       	push	r29
    637c:	fb 01       	movw	r30, r22
    637e:	01 90       	ld	r0, Z+
    6380:	00 20       	and	r0, r0
    6382:	e9 f7       	brne	.-6      	; 0x637e <MATCH+0x6>
    6384:	31 97       	sbiw	r30, 0x01	; 1
    6386:	ef 01       	movw	r28, r30
    6388:	c6 1b       	sub	r28, r22
    638a:	d7 0b       	sbc	r29, r23
    638c:	57 df       	rcall	.-338    	; 0x623c <strcmp>
    638e:	89 2b       	or	r24, r25
    6390:	11 f4       	brne	.+4      	; 0x6396 <MATCH+0x1e>
    6392:	ce 01       	movw	r24, r28
    6394:	02 c0       	rjmp	.+4      	; 0x639a <MATCH+0x22>
    6396:	80 e0       	ldi	r24, 0x00	; 0
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	df 91       	pop	r29
    639c:	cf 91       	pop	r28
    639e:	08 95       	ret

000063a0 <MATCHI>:
    63a0:	cf 93       	push	r28
    63a2:	df 93       	push	r29
    63a4:	fb 01       	movw	r30, r22
    63a6:	01 90       	ld	r0, Z+
    63a8:	00 20       	and	r0, r0
    63aa:	e9 f7       	brne	.-6      	; 0x63a6 <MATCHI+0x6>
    63ac:	31 97       	sbiw	r30, 0x01	; 1
    63ae:	ef 01       	movw	r28, r30
    63b0:	c6 1b       	sub	r28, r22
    63b2:	d7 0b       	sbc	r29, r23
    63b4:	50 df       	rcall	.-352    	; 0x6256 <strcasecmp>
    63b6:	89 2b       	or	r24, r25
    63b8:	11 f4       	brne	.+4      	; 0x63be <MATCHI+0x1e>
    63ba:	ce 01       	movw	r24, r28
    63bc:	02 c0       	rjmp	.+4      	; 0x63c2 <MATCHI+0x22>
    63be:	80 e0       	ldi	r24, 0x00	; 0
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	08 95       	ret

000063c8 <MATCHARGS>:
    63c8:	a9 e0       	ldi	r26, 0x09	; 9
    63ca:	b0 e0       	ldi	r27, 0x00	; 0
    63cc:	ea ee       	ldi	r30, 0xEA	; 234
    63ce:	f1 e3       	ldi	r31, 0x31	; 49
    63d0:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
    63d4:	eb 01       	movw	r28, r22
    63d6:	8a 01       	movw	r16, r20
    63d8:	79 01       	movw	r14, r18
    63da:	e2 df       	rcall	.-60     	; 0x63a0 <MATCHI>
    63dc:	00 97       	sbiw	r24, 0x00	; 0
    63de:	c1 f0       	breq	.+48     	; 0x6410 <MATCHARGS+0x48>
    63e0:	e0 16       	cp	r14, r16
    63e2:	f1 06       	cpc	r15, r17
    63e4:	9c f4       	brge	.+38     	; 0x640c <MATCHARGS+0x44>
    63e6:	ed b7       	in	r30, 0x3d	; 61
    63e8:	fe b7       	in	r31, 0x3e	; 62
    63ea:	f1 86       	std	Z+9, r15	; 0x09
    63ec:	e0 86       	std	Z+8, r14	; 0x08
    63ee:	17 83       	std	Z+7, r17	; 0x07
    63f0:	06 83       	std	Z+6, r16	; 0x06
    63f2:	d5 83       	std	Z+5, r29	; 0x05
    63f4:	c4 83       	std	Z+4, r28	; 0x04
    63f6:	8f eb       	ldi	r24, 0xBF	; 191
    63f8:	94 e0       	ldi	r25, 0x04	; 4
    63fa:	a0 e0       	ldi	r26, 0x00	; 0
    63fc:	81 83       	std	Z+1, r24	; 0x01
    63fe:	92 83       	std	Z+2, r25	; 0x02
    6400:	a3 83       	std	Z+3, r26	; 0x03
    6402:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    6406:	80 e0       	ldi	r24, 0x00	; 0
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	02 c0       	rjmp	.+4      	; 0x6410 <MATCHARGS+0x48>
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	cd b7       	in	r28, 0x3d	; 61
    6412:	de b7       	in	r29, 0x3e	; 62
    6414:	29 96       	adiw	r28, 0x09	; 9
    6416:	e6 e0       	ldi	r30, 0x06	; 6
    6418:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0000641c <MATCHI_LEN>:
    641c:	cf 93       	push	r28
    641e:	df 93       	push	r29
    6420:	00 97       	sbiw	r24, 0x00	; 0
    6422:	89 f0       	breq	.+34     	; 0x6446 <MATCHI_LEN+0x2a>
    6424:	61 15       	cp	r22, r1
    6426:	71 05       	cpc	r23, r1
    6428:	71 f0       	breq	.+28     	; 0x6446 <MATCHI_LEN+0x2a>
    642a:	eb 01       	movw	r28, r22
    642c:	09 90       	ld	r0, Y+
    642e:	00 20       	and	r0, r0
    6430:	e9 f7       	brne	.-6      	; 0x642c <MATCHI_LEN+0x10>
    6432:	21 97       	sbiw	r28, 0x01	; 1
    6434:	c6 1b       	sub	r28, r22
    6436:	d7 0b       	sbc	r29, r23
    6438:	31 f0       	breq	.+12     	; 0x6446 <MATCHI_LEN+0x2a>
    643a:	ae 01       	movw	r20, r28
    643c:	2b df       	rcall	.-426    	; 0x6294 <strncasecmp>
    643e:	89 2b       	or	r24, r25
    6440:	11 f4       	brne	.+4      	; 0x6446 <MATCHI_LEN+0x2a>
    6442:	ce 01       	movw	r24, r28
    6444:	02 c0       	rjmp	.+4      	; 0x644a <MATCHI_LEN+0x2e>
    6446:	80 e0       	ldi	r24, 0x00	; 0
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	df 91       	pop	r29
    644c:	cf 91       	pop	r28
    644e:	08 95       	ret

00006450 <split_args>:
    6450:	a0 e0       	ldi	r26, 0x00	; 0
    6452:	b0 e0       	ldi	r27, 0x00	; 0
    6454:	ee e2       	ldi	r30, 0x2E	; 46
    6456:	f2 e3       	ldi	r31, 0x32	; 50
    6458:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    645c:	dc 01       	movw	r26, r24
    645e:	6a 01       	movw	r12, r20
    6460:	8b 01       	movw	r16, r22
    6462:	fb 01       	movw	r30, r22
    6464:	80 e0       	ldi	r24, 0x00	; 0
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	8c 15       	cp	r24, r12
    646a:	9d 05       	cpc	r25, r13
    646c:	24 f4       	brge	.+8      	; 0x6476 <split_args+0x26>
    646e:	11 92       	st	Z+, r1
    6470:	11 92       	st	Z+, r1
    6472:	01 96       	adiw	r24, 0x01	; 1
    6474:	f9 cf       	rjmp	.-14     	; 0x6468 <split_args+0x18>
    6476:	c1 14       	cp	r12, r1
    6478:	d1 04       	cpc	r13, r1
    647a:	d9 f1       	breq	.+118    	; 0x64f2 <split_args+0xa2>
    647c:	10 97       	sbiw	r26, 0x00	; 0
    647e:	c9 f1       	breq	.+114    	; 0x64f2 <split_args+0xa2>
    6480:	ee 24       	eor	r14, r14
    6482:	e3 94       	inc	r14
    6484:	f1 2c       	mov	r15, r1
    6486:	c0 e0       	ldi	r28, 0x00	; 0
    6488:	d0 e0       	ldi	r29, 0x00	; 0
    648a:	8c 91       	ld	r24, X
    648c:	88 23       	and	r24, r24
    648e:	b1 f1       	breq	.+108    	; 0x64fc <split_args+0xac>
    6490:	cc 15       	cp	r28, r12
    6492:	dd 05       	cpc	r29, r13
    6494:	9c f5       	brge	.+102    	; 0x64fc <split_args+0xac>
    6496:	cd 01       	movw	r24, r26
    6498:	65 df       	rcall	.-310    	; 0x6364 <skipspaces>
    649a:	dc 01       	movw	r26, r24
    649c:	2c 91       	ld	r18, X
    649e:	22 23       	and	r18, r18
    64a0:	69 f1       	breq	.+90     	; 0x64fc <split_args+0xac>
    64a2:	22 32       	cpi	r18, 0x22	; 34
    64a4:	79 f4       	brne	.+30     	; 0x64c4 <split_args+0x74>
    64a6:	fc 01       	movw	r30, r24
    64a8:	31 96       	adiw	r30, 0x01	; 1
    64aa:	d8 01       	movw	r26, r16
    64ac:	ed 93       	st	X+, r30
    64ae:	fc 93       	st	X, r31
    64b0:	df 01       	movw	r26, r30
    64b2:	80 81       	ld	r24, Z
    64b4:	31 96       	adiw	r30, 0x01	; 1
    64b6:	88 23       	and	r24, r24
    64b8:	a9 f0       	breq	.+42     	; 0x64e4 <split_args+0x94>
    64ba:	82 32       	cpi	r24, 0x22	; 34
    64bc:	c9 f7       	brne	.-14     	; 0x64b0 <split_args+0x60>
    64be:	1c 92       	st	X, r1
    64c0:	df 01       	movw	r26, r30
    64c2:	10 c0       	rjmp	.+32     	; 0x64e4 <split_args+0x94>
    64c4:	f8 01       	movw	r30, r16
    64c6:	91 83       	std	Z+1, r25	; 0x01
    64c8:	80 83       	st	Z, r24
    64ca:	fc 01       	movw	r30, r24
    64cc:	2e 2f       	mov	r18, r30
    64ce:	9f 2f       	mov	r25, r31
    64d0:	81 91       	ld	r24, Z+
    64d2:	3f ed       	ldi	r19, 0xDF	; 223
    64d4:	38 0f       	add	r19, r24
    64d6:	3e 35       	cpi	r19, 0x5E	; 94
    64d8:	c8 f3       	brcs	.-14     	; 0x64cc <split_args+0x7c>
    64da:	88 23       	and	r24, r24
    64dc:	69 f0       	breq	.+26     	; 0x64f8 <split_args+0xa8>
    64de:	a2 2f       	mov	r26, r18
    64e0:	b9 2f       	mov	r27, r25
    64e2:	1d 92       	st	X+, r1
    64e4:	21 96       	adiw	r28, 0x01	; 1
    64e6:	ff ef       	ldi	r31, 0xFF	; 255
    64e8:	ef 1a       	sub	r14, r31
    64ea:	ff 0a       	sbc	r15, r31
    64ec:	0e 5f       	subi	r16, 0xFE	; 254
    64ee:	1f 4f       	sbci	r17, 0xFF	; 255
    64f0:	cc cf       	rjmp	.-104    	; 0x648a <split_args+0x3a>
    64f2:	80 e0       	ldi	r24, 0x00	; 0
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	03 c0       	rjmp	.+6      	; 0x64fe <split_args+0xae>
    64f8:	c7 01       	movw	r24, r14
    64fa:	01 c0       	rjmp	.+2      	; 0x64fe <split_args+0xae>
    64fc:	ce 01       	movw	r24, r28
    64fe:	cd b7       	in	r28, 0x3d	; 61
    6500:	de b7       	in	r29, 0x3e	; 62
    6502:	e8 e0       	ldi	r30, 0x08	; 8
    6504:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

00006508 <get_token>:
    6508:	ef 92       	push	r14
    650a:	ff 92       	push	r15
    650c:	0f 93       	push	r16
    650e:	1f 93       	push	r17
    6510:	cf 93       	push	r28
    6512:	df 93       	push	r29
    6514:	eb 01       	movw	r28, r22
    6516:	8a 01       	movw	r16, r20
    6518:	18 82       	st	Y, r1
    651a:	00 97       	sbiw	r24, 0x00	; 0
    651c:	89 f1       	breq	.+98     	; 0x6580 <get_token+0x78>
    651e:	fc 01       	movw	r30, r24
    6520:	20 81       	ld	r18, Z
    6522:	22 23       	and	r18, r18
    6524:	79 f1       	breq	.+94     	; 0x6584 <get_token+0x7c>
    6526:	1e df       	rcall	.-452    	; 0x6364 <skipspaces>
    6528:	7c 01       	movw	r14, r24
    652a:	0c df       	rcall	.-488    	; 0x6344 <trim_tail>
    652c:	f7 01       	movw	r30, r14
    652e:	cf 01       	movw	r24, r30
    6530:	21 91       	ld	r18, Z+
    6532:	21 32       	cpi	r18, 0x21	; 33
    6534:	e0 f0       	brcs	.+56     	; 0x656e <get_token+0x66>
    6536:	10 16       	cp	r1, r16
    6538:	11 06       	cpc	r1, r17
    653a:	cc f4       	brge	.+50     	; 0x656e <get_token+0x66>
    653c:	22 32       	cpi	r18, 0x22	; 34
    653e:	79 f4       	brne	.+30     	; 0x655e <get_token+0x56>
    6540:	fc 01       	movw	r30, r24
    6542:	31 96       	adiw	r30, 0x01	; 1
    6544:	0c 0f       	add	r16, r28
    6546:	1d 1f       	adc	r17, r29
    6548:	cf 01       	movw	r24, r30
    654a:	21 91       	ld	r18, Z+
    654c:	22 23       	and	r18, r18
    654e:	79 f0       	breq	.+30     	; 0x656e <get_token+0x66>
    6550:	22 32       	cpi	r18, 0x22	; 34
    6552:	59 f0       	breq	.+22     	; 0x656a <get_token+0x62>
    6554:	c0 17       	cp	r28, r16
    6556:	d1 07       	cpc	r29, r17
    6558:	51 f0       	breq	.+20     	; 0x656e <get_token+0x66>
    655a:	29 93       	st	Y+, r18
    655c:	f5 cf       	rjmp	.-22     	; 0x6548 <get_token+0x40>
    655e:	2c 32       	cpi	r18, 0x2C	; 44
    6560:	31 f0       	breq	.+12     	; 0x656e <get_token+0x66>
    6562:	29 93       	st	Y+, r18
    6564:	01 50       	subi	r16, 0x01	; 1
    6566:	11 09       	sbc	r17, r1
    6568:	e2 cf       	rjmp	.-60     	; 0x652e <get_token+0x26>
    656a:	cf 01       	movw	r24, r30
    656c:	18 82       	st	Y, r1
    656e:	fa de       	rcall	.-524    	; 0x6364 <skipspaces>
    6570:	fc 01       	movw	r30, r24
    6572:	80 81       	ld	r24, Z
    6574:	8c 32       	cpi	r24, 0x2C	; 44
    6576:	09 f4       	brne	.+2      	; 0x657a <get_token+0x72>
    6578:	31 96       	adiw	r30, 0x01	; 1
    657a:	18 82       	st	Y, r1
    657c:	cf 01       	movw	r24, r30
    657e:	02 c0       	rjmp	.+4      	; 0x6584 <get_token+0x7c>
    6580:	80 e0       	ldi	r24, 0x00	; 0
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	cd b7       	in	r28, 0x3d	; 61
    6586:	de b7       	in	r29, 0x3e	; 62
    6588:	e6 e0       	ldi	r30, 0x06	; 6
    658a:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0000658e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    658e:	a2 e0       	ldi	r26, 0x02	; 2
    6590:	b0 e0       	ldi	r27, 0x00	; 0
    6592:	ed ec       	ldi	r30, 0xCD	; 205
    6594:	f2 e3       	ldi	r31, 0x32	; 50
    6596:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    659a:	00 97       	sbiw	r24, 0x00	; 0
    659c:	79 f1       	breq	.+94     	; 0x65fc <get_value+0x6e>
    659e:	fc 01       	movw	r30, r24
    65a0:	20 81       	ld	r18, Z
    65a2:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    65a4:	59 f1       	breq	.+86     	; 0x65fc <get_value+0x6e>
    65a6:	de de       	rcall	.-580    	; 0x6364 <skipspaces>
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    65a8:	8c 01       	movw	r16, r24
    65aa:	61 e0       	ldi	r22, 0x01	; 1
    65ac:	73 e0       	ldi	r23, 0x03	; 3
    65ae:	36 df       	rcall	.-404    	; 0x641c <MATCHI_LEN>
    65b0:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    65b2:	29 f0       	breq	.+10     	; 0x65be <get_value+0x30>
    65b4:	08 0f       	add	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    65b6:	19 1f       	adc	r17, r25
    65b8:	40 e1       	ldi	r20, 0x10	; 16
    65ba:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    65bc:	18 c0       	rjmp	.+48     	; 0x65ee <get_value+0x60>
    65be:	64 e0       	ldi	r22, 0x04	; 4
    65c0:	73 e0       	ldi	r23, 0x03	; 3
    65c2:	c8 01       	movw	r24, r16
    65c4:	2b df       	rcall	.-426    	; 0x641c <MATCHI_LEN>
    65c6:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    65c8:	29 f0       	breq	.+10     	; 0x65d4 <get_value+0x46>
    65ca:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    65cc:	19 1f       	adc	r17, r25
    65ce:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    65d0:	50 e0       	ldi	r21, 0x00	; 0
    65d2:	0d c0       	rjmp	.+26     	; 0x65ee <get_value+0x60>
    65d4:	67 e0       	ldi	r22, 0x07	; 7
    65d6:	73 e0       	ldi	r23, 0x03	; 3
    65d8:	c8 01       	movw	r24, r16
    65da:	20 df       	rcall	.-448    	; 0x641c <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    65dc:	00 97       	sbiw	r24, 0x00	; 0
    65de:	29 f0       	breq	.+10     	; 0x65ea <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    65e0:	08 0f       	add	r16, r24
    65e2:	19 1f       	adc	r17, r25
    65e4:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    65e6:	50 e0       	ldi	r21, 0x00	; 0
    65e8:	02 c0       	rjmp	.+4      	; 0x65ee <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    65ea:	4a e0       	ldi	r20, 0x0A	; 10
    65ec:	50 e0       	ldi	r21, 0x00	; 0
    65ee:	be 01       	movw	r22, r28
    65f0:	6f 5f       	subi	r22, 0xFF	; 255
    65f2:	7f 4f       	sbci	r23, 0xFF	; 255
    65f4:	c8 01       	movw	r24, r16
    65f6:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    65fa:	03 c0       	rjmp	.+6      	; 0x6602 <get_value+0x74>
    65fc:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    65fe:	70 e0       	ldi	r23, 0x00	; 0
    6600:	cb 01       	movw	r24, r22
    6602:	22 96       	adiw	r28, 0x02	; 2
    6604:	e4 e0       	ldi	r30, 0x04	; 4
    6606:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0000660a <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    660a:	78 94       	sei
    660c:	08 95       	ret

0000660e <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    660e:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6610:	89 e0       	ldi	r24, 0x09	; 9
    6612:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6616:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    661a:	8f e1       	ldi	r24, 0x1F	; 31
    661c:	9e e4       	ldi	r25, 0x4E	; 78
    661e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6622:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6626:	ef e6       	ldi	r30, 0x6F	; 111
    6628:	f0 e0       	ldi	r31, 0x00	; 0
    662a:	80 81       	ld	r24, Z
    662c:	82 60       	ori	r24, 0x02	; 2
    662e:	80 83       	st	Z, r24
    sei();
    6630:	78 94       	sei
    6632:	08 95       	ret

00006634 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6634:	1f 92       	push	r1
    6636:	0f 92       	push	r0
    6638:	0f b6       	in	r0, 0x3f	; 63
    663a:	0f 92       	push	r0
    663c:	11 24       	eor	r1, r1
    663e:	0b b6       	in	r0, 0x3b	; 59
    6640:	0f 92       	push	r0
    6642:	2f 93       	push	r18
    6644:	3f 93       	push	r19
    6646:	4f 93       	push	r20
    6648:	5f 93       	push	r21
    664a:	6f 93       	push	r22
    664c:	7f 93       	push	r23
    664e:	8f 93       	push	r24
    6650:	9f 93       	push	r25
    6652:	af 93       	push	r26
    6654:	bf 93       	push	r27
    6656:	ef 93       	push	r30
    execute_timers();
    6658:	ff 93       	push	r31
}
    665a:	36 d2       	rcall	.+1132   	; 0x6ac8 <execute_timers>
    665c:	ff 91       	pop	r31
    665e:	ef 91       	pop	r30
    6660:	bf 91       	pop	r27
    6662:	af 91       	pop	r26
    6664:	9f 91       	pop	r25
    6666:	8f 91       	pop	r24
    6668:	7f 91       	pop	r23
    666a:	6f 91       	pop	r22
    666c:	5f 91       	pop	r21
    666e:	4f 91       	pop	r20
    6670:	3f 91       	pop	r19
    6672:	2f 91       	pop	r18
    6674:	0f 90       	pop	r0
    6676:	0b be       	out	0x3b, r0	; 59
    6678:	0f 90       	pop	r0
    667a:	0f be       	out	0x3f, r0	; 63
    667c:	0f 90       	pop	r0
    667e:	1f 90       	pop	r1
    6680:	18 95       	reti

00006682 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6682:	0f 93       	push	r16
    6684:	1f 93       	push	r17
    6686:	cf 93       	push	r28
    6688:	df 93       	push	r29
    668a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    668c:	f8 94       	cli

    count1 = TCNT1;
    668e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6692:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6696:	80 91 2b 1a 	lds	r24, 0x1A2B	; 0x801a2b <__clock>
    669a:	90 91 2c 1a 	lds	r25, 0x1A2C	; 0x801a2c <__clock+0x1>
    669e:	a0 91 2d 1a 	lds	r26, 0x1A2D	; 0x801a2d <__clock+0x2>
    66a2:	b0 91 2e 1a 	lds	r27, 0x1A2E	; 0x801a2e <__clock+0x3>
    66a6:	80 83       	st	Z, r24
    66a8:	91 83       	std	Z+1, r25	; 0x01
    66aa:	a2 83       	std	Z+2, r26	; 0x02
    66ac:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    66ae:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <__clock+0x4>
    66b2:	90 91 30 1a 	lds	r25, 0x1A30	; 0x801a30 <__clock+0x5>
    66b6:	a0 91 31 1a 	lds	r26, 0x1A31	; 0x801a31 <__clock+0x6>
    66ba:	b0 91 32 1a 	lds	r27, 0x1A32	; 0x801a32 <__clock+0x7>
    66be:	84 83       	std	Z+4, r24	; 0x04
    66c0:	95 83       	std	Z+5, r25	; 0x05
    66c2:	a6 83       	std	Z+6, r26	; 0x06
    66c4:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    66c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    66ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    66ce:	b1 9b       	sbis	0x16, 1	; 22
    66d0:	03 c0       	rjmp	.+6      	; 0x66d8 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    66d2:	c0 e0       	ldi	r28, 0x00	; 0
    66d4:	d0 e0       	ldi	r29, 0x00	; 0
    66d6:	3f c0       	rjmp	.+126    	; 0x6756 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    66d8:	82 17       	cp	r24, r18
    66da:	93 07       	cpc	r25, r19
    66dc:	d0 f1       	brcs	.+116    	; 0x6752 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    66de:	c0 e0       	ldi	r28, 0x00	; 0
    66e0:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    66e2:	40 e0       	ldi	r20, 0x00	; 0
    66e4:	50 e0       	ldi	r21, 0x00	; 0
    66e6:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    66e8:	9a 01       	movw	r18, r20
    66ea:	ab 01       	movw	r20, r22
    66ec:	28 0f       	add	r18, r24
    66ee:	39 1f       	adc	r19, r25
    66f0:	41 1d       	adc	r20, r1
    66f2:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    66f4:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    66f6:	a2 e3       	ldi	r26, 0x32	; 50
    66f8:	b0 e0       	ldi	r27, 0x00	; 0
    66fa:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    66fe:	04 81       	ldd	r16, Z+4	; 0x04
    6700:	15 81       	ldd	r17, Z+5	; 0x05
    6702:	26 81       	ldd	r18, Z+6	; 0x06
    6704:	37 81       	ldd	r19, Z+7	; 0x07
    6706:	dc 01       	movw	r26, r24
    6708:	cb 01       	movw	r24, r22
    670a:	80 0f       	add	r24, r16
    670c:	91 1f       	adc	r25, r17
    670e:	a2 1f       	adc	r26, r18
    6710:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6712:	81 15       	cp	r24, r1
    6714:	2a ec       	ldi	r18, 0xCA	; 202
    6716:	92 07       	cpc	r25, r18
    6718:	2a e9       	ldi	r18, 0x9A	; 154
    671a:	a2 07       	cpc	r26, r18
    671c:	2b e3       	ldi	r18, 0x3B	; 59
    671e:	b2 07       	cpc	r27, r18
    6720:	2c f4       	brge	.+10     	; 0x672c <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6722:	84 83       	std	Z+4, r24	; 0x04
    6724:	95 83       	std	Z+5, r25	; 0x05
    6726:	a6 83       	std	Z+6, r26	; 0x06
    6728:	b7 83       	std	Z+7, r27	; 0x07
    672a:	1a c0       	rjmp	.+52     	; 0x6760 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    672c:	9a 5c       	subi	r25, 0xCA	; 202
    672e:	aa 49       	sbci	r26, 0x9A	; 154
    6730:	bb 43       	sbci	r27, 0x3B	; 59
    6732:	84 83       	std	Z+4, r24	; 0x04
    6734:	95 83       	std	Z+5, r25	; 0x05
    6736:	a6 83       	std	Z+6, r26	; 0x06
    6738:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    673a:	80 81       	ld	r24, Z
    673c:	91 81       	ldd	r25, Z+1	; 0x01
    673e:	a2 81       	ldd	r26, Z+2	; 0x02
    6740:	b3 81       	ldd	r27, Z+3	; 0x03
    6742:	01 96       	adiw	r24, 0x01	; 1
    6744:	a1 1d       	adc	r26, r1
    6746:	b1 1d       	adc	r27, r1
    6748:	80 83       	st	Z, r24
    674a:	91 83       	std	Z+1, r25	; 0x01
    674c:	a2 83       	std	Z+2, r26	; 0x02
    674e:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6750:	07 c0       	rjmp	.+14     	; 0x6760 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6752:	cf ef       	ldi	r28, 0xFF	; 255
    6754:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6756:	40 e2       	ldi	r20, 0x20	; 32
    6758:	5e e4       	ldi	r21, 0x4E	; 78
    675a:	60 e0       	ldi	r22, 0x00	; 0
    675c:	70 e0       	ldi	r23, 0x00	; 0
    675e:	c4 cf       	rjmp	.-120    	; 0x66e8 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6760:	ce 01       	movw	r24, r28
    6762:	df 91       	pop	r29
    6764:	cf 91       	pop	r28
    6766:	1f 91       	pop	r17
    6768:	0f 91       	pop	r16
    676a:	08 95       	ret

0000676c <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    676c:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <__clock+0x4>
    6770:	90 91 30 1a 	lds	r25, 0x1A30	; 0x801a30 <__clock+0x5>
    6774:	a0 91 31 1a 	lds	r26, 0x1A31	; 0x801a31 <__clock+0x6>
    6778:	b0 91 32 1a 	lds	r27, 0x1A32	; 0x801a32 <__clock+0x7>
    677c:	80 5c       	subi	r24, 0xC0	; 192
    677e:	9d 4b       	sbci	r25, 0xBD	; 189
    6780:	a0 4f       	sbci	r26, 0xF0	; 240
    6782:	bf 4f       	sbci	r27, 0xFF	; 255
    6784:	80 93 2f 1a 	sts	0x1A2F, r24	; 0x801a2f <__clock+0x4>
    6788:	90 93 30 1a 	sts	0x1A30, r25	; 0x801a30 <__clock+0x5>
    678c:	a0 93 31 1a 	sts	0x1A31, r26	; 0x801a31 <__clock+0x6>
    6790:	b0 93 32 1a 	sts	0x1A32, r27	; 0x801a32 <__clock+0x7>
    6794:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <__clock+0x4>
    6798:	90 91 30 1a 	lds	r25, 0x1A30	; 0x801a30 <__clock+0x5>
    679c:	a0 91 31 1a 	lds	r26, 0x1A31	; 0x801a31 <__clock+0x6>
    67a0:	b0 91 32 1a 	lds	r27, 0x1A32	; 0x801a32 <__clock+0x7>
    67a4:	81 15       	cp	r24, r1
    67a6:	9a 4c       	sbci	r25, 0xCA	; 202
    67a8:	aa 49       	sbci	r26, 0x9A	; 154
    67aa:	bb 43       	sbci	r27, 0x3B	; 59
    67ac:	dc f0       	brlt	.+54     	; 0x67e4 <clock_task+0x78>
    67ae:	80 91 2b 1a 	lds	r24, 0x1A2B	; 0x801a2b <__clock>
    67b2:	90 91 2c 1a 	lds	r25, 0x1A2C	; 0x801a2c <__clock+0x1>
    67b6:	a0 91 2d 1a 	lds	r26, 0x1A2D	; 0x801a2d <__clock+0x2>
    67ba:	b0 91 2e 1a 	lds	r27, 0x1A2E	; 0x801a2e <__clock+0x3>
    67be:	01 96       	adiw	r24, 0x01	; 1
    67c0:	a1 1d       	adc	r26, r1
    67c2:	b1 1d       	adc	r27, r1
    67c4:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <__clock>
    67c8:	90 93 2c 1a 	sts	0x1A2C, r25	; 0x801a2c <__clock+0x1>
    67cc:	a0 93 2d 1a 	sts	0x1A2D, r26	; 0x801a2d <__clock+0x2>
    67d0:	b0 93 2e 1a 	sts	0x1A2E, r27	; 0x801a2e <__clock+0x3>
    67d4:	10 92 2f 1a 	sts	0x1A2F, r1	; 0x801a2f <__clock+0x4>
    67d8:	10 92 30 1a 	sts	0x1A30, r1	; 0x801a30 <__clock+0x5>
    67dc:	10 92 31 1a 	sts	0x1A31, r1	; 0x801a31 <__clock+0x6>
    67e0:	10 92 32 1a 	sts	0x1A32, r1	; 0x801a32 <__clock+0x7>
    67e4:	08 95       	ret

000067e6 <clock_settime.part.2>:
    67e6:	fc 01       	movw	r30, r24
    67e8:	84 81       	ldd	r24, Z+4	; 0x04
    67ea:	95 81       	ldd	r25, Z+5	; 0x05
    67ec:	a6 81       	ldd	r26, Z+6	; 0x06
    67ee:	b7 81       	ldd	r27, Z+7	; 0x07
    67f0:	80 93 2f 1a 	sts	0x1A2F, r24	; 0x801a2f <__clock+0x4>
    67f4:	90 93 30 1a 	sts	0x1A30, r25	; 0x801a30 <__clock+0x5>
    67f8:	a0 93 31 1a 	sts	0x1A31, r26	; 0x801a31 <__clock+0x6>
    67fc:	b0 93 32 1a 	sts	0x1A32, r27	; 0x801a32 <__clock+0x7>
    6800:	80 81       	ld	r24, Z
    6802:	91 81       	ldd	r25, Z+1	; 0x01
    6804:	a2 81       	ldd	r26, Z+2	; 0x02
    6806:	b3 81       	ldd	r27, Z+3	; 0x03
    6808:	80 93 2b 1a 	sts	0x1A2B, r24	; 0x801a2b <__clock>
    680c:	90 93 2c 1a 	sts	0x1A2C, r25	; 0x801a2c <__clock+0x1>
    6810:	a0 93 2d 1a 	sts	0x1A2D, r26	; 0x801a2d <__clock+0x2>
    6814:	b0 93 2e 1a 	sts	0x1A2E, r27	; 0x801a2e <__clock+0x3>
    6818:	80 91 2f 1a 	lds	r24, 0x1A2F	; 0x801a2f <__clock+0x4>
    681c:	90 91 30 1a 	lds	r25, 0x1A30	; 0x801a30 <__clock+0x5>
    6820:	a0 91 31 1a 	lds	r26, 0x1A31	; 0x801a31 <__clock+0x6>
    6824:	b0 91 32 1a 	lds	r27, 0x1A32	; 0x801a32 <__clock+0x7>
    6828:	44 81       	ldd	r20, Z+4	; 0x04
    682a:	55 81       	ldd	r21, Z+5	; 0x05
    682c:	66 81       	ldd	r22, Z+6	; 0x06
    682e:	77 81       	ldd	r23, Z+7	; 0x07
    6830:	48 17       	cp	r20, r24
    6832:	59 07       	cpc	r21, r25
    6834:	6a 07       	cpc	r22, r26
    6836:	7b 07       	cpc	r23, r27
    6838:	b9 f6       	brne	.-82     	; 0x67e8 <clock_settime.part.2+0x2>
    683a:	80 91 2b 1a 	lds	r24, 0x1A2B	; 0x801a2b <__clock>
    683e:	90 91 2c 1a 	lds	r25, 0x1A2C	; 0x801a2c <__clock+0x1>
    6842:	a0 91 2d 1a 	lds	r26, 0x1A2D	; 0x801a2d <__clock+0x2>
    6846:	b0 91 2e 1a 	lds	r27, 0x1A2E	; 0x801a2e <__clock+0x3>
    684a:	40 81       	ld	r20, Z
    684c:	51 81       	ldd	r21, Z+1	; 0x01
    684e:	62 81       	ldd	r22, Z+2	; 0x02
    6850:	73 81       	ldd	r23, Z+3	; 0x03
    6852:	48 17       	cp	r20, r24
    6854:	59 07       	cpc	r21, r25
    6856:	6a 07       	cpc	r22, r26
    6858:	7b 07       	cpc	r23, r27
    685a:	31 f6       	brne	.-116    	; 0x67e8 <clock_settime.part.2+0x2>
    685c:	80 e0       	ldi	r24, 0x00	; 0
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	08 95       	ret

00006862 <set_timers>:
    6862:	00 d0       	rcall	.+0      	; 0x6864 <set_timers+0x2>
    6864:	1f 92       	push	r1
    6866:	00 97       	sbiw	r24, 0x00	; 0
    6868:	79 f1       	breq	.+94     	; 0x68c8 <set_timers+0x66>
    686a:	e3 e3       	ldi	r30, 0x33	; 51
    686c:	fa e1       	ldi	r31, 0x1A	; 26
    686e:	4f ef       	ldi	r20, 0xFF	; 255
    6870:	5f ef       	ldi	r21, 0xFF	; 255
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	60 81       	ld	r22, Z
    6878:	71 81       	ldd	r23, Z+1	; 0x01
    687a:	86 17       	cp	r24, r22
    687c:	97 07       	cpc	r25, r23
    687e:	79 f0       	breq	.+30     	; 0x689e <set_timers+0x3c>
    6880:	67 2b       	or	r22, r23
    6882:	71 f4       	brne	.+28     	; 0x68a0 <set_timers+0x3e>
    6884:	f9 01       	movw	r30, r18
    6886:	ee 0f       	add	r30, r30
    6888:	ff 1f       	adc	r31, r31
    688a:	e2 0f       	add	r30, r18
    688c:	f3 1f       	adc	r31, r19
    688e:	ed 5c       	subi	r30, 0xCD	; 205
    6890:	f5 4e       	sbci	r31, 0xE5	; 229
    6892:	91 83       	std	Z+1, r25	; 0x01
    6894:	80 83       	st	Z, r24
    6896:	81 e0       	ldi	r24, 0x01	; 1
    6898:	82 83       	std	Z+2, r24	; 0x02
    689a:	c9 01       	movw	r24, r18
    689c:	19 c0       	rjmp	.+50     	; 0x68d0 <set_timers+0x6e>
    689e:	a9 01       	movw	r20, r18
    68a0:	2f 5f       	subi	r18, 0xFF	; 255
    68a2:	3f 4f       	sbci	r19, 0xFF	; 255
    68a4:	33 96       	adiw	r30, 0x03	; 3
    68a6:	28 30       	cpi	r18, 0x08	; 8
    68a8:	31 05       	cpc	r19, r1
    68aa:	29 f7       	brne	.-54     	; 0x6876 <set_timers+0x14>
    68ac:	4f 3f       	cpi	r20, 0xFF	; 255
    68ae:	8f ef       	ldi	r24, 0xFF	; 255
    68b0:	58 07       	cpc	r21, r24
    68b2:	69 f4       	brne	.+26     	; 0x68ce <set_timers+0x6c>
    68b4:	84 e9       	ldi	r24, 0x94	; 148
    68b6:	95 e0       	ldi	r25, 0x05	; 5
    68b8:	a0 e0       	ldi	r26, 0x00	; 0
    68ba:	ed b7       	in	r30, 0x3d	; 61
    68bc:	fe b7       	in	r31, 0x3e	; 62
    68be:	81 83       	std	Z+1, r24	; 0x01
    68c0:	92 83       	std	Z+2, r25	; 0x02
    68c2:	a3 83       	std	Z+3, r26	; 0x03
    68c4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    68c8:	8f ef       	ldi	r24, 0xFF	; 255
    68ca:	9f ef       	ldi	r25, 0xFF	; 255
    68cc:	01 c0       	rjmp	.+2      	; 0x68d0 <set_timers+0x6e>
    68ce:	ca 01       	movw	r24, r20
    68d0:	0f 90       	pop	r0
    68d2:	0f 90       	pop	r0
    68d4:	0f 90       	pop	r0
    68d6:	08 95       	ret

000068d8 <delete_all_timers>:
    68d8:	e3 e3       	ldi	r30, 0x33	; 51
    68da:	fa e1       	ldi	r31, 0x1A	; 26
    68dc:	12 82       	std	Z+2, r1	; 0x02
    68de:	11 82       	std	Z+1, r1	; 0x01
    68e0:	10 82       	st	Z, r1
    68e2:	33 96       	adiw	r30, 0x03	; 3
    68e4:	8a e1       	ldi	r24, 0x1A	; 26
    68e6:	eb 34       	cpi	r30, 0x4B	; 75
    68e8:	f8 07       	cpc	r31, r24
    68ea:	c1 f7       	brne	.-16     	; 0x68dc <delete_all_timers+0x4>
    68ec:	08 95       	ret

000068ee <subtract_timespec>:
    68ee:	0f 93       	push	r16
    68f0:	1f 93       	push	r17
    68f2:	cf 93       	push	r28
    68f4:	df 93       	push	r29
    68f6:	fc 01       	movw	r30, r24
    68f8:	84 81       	ldd	r24, Z+4	; 0x04
    68fa:	95 81       	ldd	r25, Z+5	; 0x05
    68fc:	a6 81       	ldd	r26, Z+6	; 0x06
    68fe:	b7 81       	ldd	r27, Z+7	; 0x07
    6900:	eb 01       	movw	r28, r22
    6902:	0c 81       	ldd	r16, Y+4	; 0x04
    6904:	1d 81       	ldd	r17, Y+5	; 0x05
    6906:	2e 81       	ldd	r18, Y+6	; 0x06
    6908:	3f 81       	ldd	r19, Y+7	; 0x07
    690a:	80 1b       	sub	r24, r16
    690c:	91 0b       	sbc	r25, r17
    690e:	a2 0b       	sbc	r26, r18
    6910:	b3 0b       	sbc	r27, r19
    6912:	b7 fd       	sbrc	r27, 7
    6914:	05 c0       	rjmp	.+10     	; 0x6920 <subtract_timespec+0x32>
    6916:	84 83       	std	Z+4, r24	; 0x04
    6918:	95 83       	std	Z+5, r25	; 0x05
    691a:	a6 83       	std	Z+6, r26	; 0x06
    691c:	b7 83       	std	Z+7, r27	; 0x07
    691e:	12 c0       	rjmp	.+36     	; 0x6944 <subtract_timespec+0x56>
    6920:	96 53       	subi	r25, 0x36	; 54
    6922:	a5 46       	sbci	r26, 0x65	; 101
    6924:	b4 4c       	sbci	r27, 0xC4	; 196
    6926:	84 83       	std	Z+4, r24	; 0x04
    6928:	95 83       	std	Z+5, r25	; 0x05
    692a:	a6 83       	std	Z+6, r26	; 0x06
    692c:	b7 83       	std	Z+7, r27	; 0x07
    692e:	80 81       	ld	r24, Z
    6930:	91 81       	ldd	r25, Z+1	; 0x01
    6932:	a2 81       	ldd	r26, Z+2	; 0x02
    6934:	b3 81       	ldd	r27, Z+3	; 0x03
    6936:	01 97       	sbiw	r24, 0x01	; 1
    6938:	a1 09       	sbc	r26, r1
    693a:	b1 09       	sbc	r27, r1
    693c:	80 83       	st	Z, r24
    693e:	91 83       	std	Z+1, r25	; 0x01
    6940:	a2 83       	std	Z+2, r26	; 0x02
    6942:	b3 83       	std	Z+3, r27	; 0x03
    6944:	80 81       	ld	r24, Z
    6946:	91 81       	ldd	r25, Z+1	; 0x01
    6948:	a2 81       	ldd	r26, Z+2	; 0x02
    694a:	b3 81       	ldd	r27, Z+3	; 0x03
    694c:	eb 01       	movw	r28, r22
    694e:	48 81       	ld	r20, Y
    6950:	59 81       	ldd	r21, Y+1	; 0x01
    6952:	6a 81       	ldd	r22, Y+2	; 0x02
    6954:	7b 81       	ldd	r23, Y+3	; 0x03
    6956:	84 1b       	sub	r24, r20
    6958:	95 0b       	sbc	r25, r21
    695a:	a6 0b       	sbc	r26, r22
    695c:	b7 0b       	sbc	r27, r23
    695e:	80 83       	st	Z, r24
    6960:	91 83       	std	Z+1, r25	; 0x01
    6962:	a2 83       	std	Z+2, r26	; 0x02
    6964:	b3 83       	std	Z+3, r27	; 0x03
    6966:	df 91       	pop	r29
    6968:	cf 91       	pop	r28
    696a:	1f 91       	pop	r17
    696c:	0f 91       	pop	r16
    696e:	08 95       	ret

00006970 <ts_to_str>:
    6970:	ad b7       	in	r26, 0x3d	; 61
    6972:	be b7       	in	r27, 0x3e	; 62
    6974:	1f 97       	sbiw	r26, 0x0f	; 15
    6976:	0f b6       	in	r0, 0x3f	; 63
    6978:	f8 94       	cli
    697a:	be bf       	out	0x3e, r27	; 62
    697c:	0f be       	out	0x3f, r0	; 63
    697e:	ad bf       	out	0x3d, r26	; 61
    6980:	fc 01       	movw	r30, r24
    6982:	44 81       	ldd	r20, Z+4	; 0x04
    6984:	55 81       	ldd	r21, Z+5	; 0x05
    6986:	66 81       	ldd	r22, Z+6	; 0x06
    6988:	77 81       	ldd	r23, Z+7	; 0x07
    698a:	ed b7       	in	r30, 0x3d	; 61
    698c:	fe b7       	in	r31, 0x3e	; 62
    698e:	44 87       	std	Z+12, r20	; 0x0c
    6990:	55 87       	std	Z+13, r21	; 0x0d
    6992:	66 87       	std	Z+14, r22	; 0x0e
    6994:	77 87       	std	Z+15, r23	; 0x0f
    6996:	fc 01       	movw	r30, r24
    6998:	80 81       	ld	r24, Z
    699a:	91 81       	ldd	r25, Z+1	; 0x01
    699c:	a2 81       	ldd	r26, Z+2	; 0x02
    699e:	b3 81       	ldd	r27, Z+3	; 0x03
    69a0:	ed b7       	in	r30, 0x3d	; 61
    69a2:	fe b7       	in	r31, 0x3e	; 62
    69a4:	80 87       	std	Z+8, r24	; 0x08
    69a6:	91 87       	std	Z+9, r25	; 0x09
    69a8:	a2 87       	std	Z+10, r26	; 0x0a
    69aa:	b3 87       	std	Z+11, r27	; 0x0b
    69ac:	8a e8       	ldi	r24, 0x8A	; 138
    69ae:	95 e0       	ldi	r25, 0x05	; 5
    69b0:	a0 e0       	ldi	r26, 0x00	; 0
    69b2:	85 83       	std	Z+5, r24	; 0x05
    69b4:	96 83       	std	Z+6, r25	; 0x06
    69b6:	a7 83       	std	Z+7, r26	; 0x07
    69b8:	8f e1       	ldi	r24, 0x1F	; 31
    69ba:	90 e0       	ldi	r25, 0x00	; 0
    69bc:	94 83       	std	Z+4, r25	; 0x04
    69be:	83 83       	std	Z+3, r24	; 0x03
    69c0:	8d e6       	ldi	r24, 0x6D	; 109
    69c2:	97 e1       	ldi	r25, 0x17	; 23
    69c4:	92 83       	std	Z+2, r25	; 0x02
    69c6:	81 83       	std	Z+1, r24	; 0x01
    69c8:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <snprintf_P>
    69cc:	8d e6       	ldi	r24, 0x6D	; 109
    69ce:	97 e1       	ldi	r25, 0x17	; 23
    69d0:	ad b7       	in	r26, 0x3d	; 61
    69d2:	be b7       	in	r27, 0x3e	; 62
    69d4:	1f 96       	adiw	r26, 0x0f	; 15
    69d6:	0f b6       	in	r0, 0x3f	; 63
    69d8:	f8 94       	cli
    69da:	be bf       	out	0x3e, r27	; 62
    69dc:	0f be       	out	0x3f, r0	; 63
    69de:	ad bf       	out	0x3d, r26	; 61
    69e0:	08 95       	ret

000069e2 <clock_elapsed_begin>:
    69e2:	65 e6       	ldi	r22, 0x65	; 101
    69e4:	77 e1       	ldi	r23, 0x17	; 23
    69e6:	80 e0       	ldi	r24, 0x00	; 0
    69e8:	90 e0       	ldi	r25, 0x00	; 0
    69ea:	4b ce       	rjmp	.-874    	; 0x6682 <clock_gettime>
    69ec:	08 95       	ret

000069ee <clock_elapsed_end>:
    69ee:	af e0       	ldi	r26, 0x0F	; 15
    69f0:	b0 e0       	ldi	r27, 0x00	; 0
    69f2:	ed ef       	ldi	r30, 0xFD	; 253
    69f4:	f4 e3       	ldi	r31, 0x34	; 52
    69f6:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    69fa:	8c 01       	movw	r16, r24
    69fc:	be 01       	movw	r22, r28
    69fe:	68 5f       	subi	r22, 0xF8	; 248
    6a00:	7f 4f       	sbci	r23, 0xFF	; 255
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	3d de       	rcall	.-902    	; 0x6682 <clock_gettime>
    6a08:	65 e6       	ldi	r22, 0x65	; 101
    6a0a:	77 e1       	ldi	r23, 0x17	; 23
    6a0c:	ce 01       	movw	r24, r28
    6a0e:	08 96       	adiw	r24, 0x08	; 8
    6a10:	6e df       	rcall	.-292    	; 0x68ee <subtract_timespec>
    6a12:	01 15       	cp	r16, r1
    6a14:	11 05       	cpc	r17, r1
    6a16:	b1 f0       	breq	.+44     	; 0x6a44 <clock_elapsed_end+0x56>
    6a18:	f8 01       	movw	r30, r16
    6a1a:	80 81       	ld	r24, Z
    6a1c:	88 23       	and	r24, r24
    6a1e:	91 f0       	breq	.+36     	; 0x6a44 <clock_elapsed_end+0x56>
    6a20:	ce 01       	movw	r24, r28
    6a22:	08 96       	adiw	r24, 0x08	; 8
    6a24:	a5 df       	rcall	.-182    	; 0x6970 <ts_to_str>
    6a26:	ed b7       	in	r30, 0x3d	; 61
    6a28:	fe b7       	in	r31, 0x3e	; 62
    6a2a:	97 83       	std	Z+7, r25	; 0x07
    6a2c:	86 83       	std	Z+6, r24	; 0x06
    6a2e:	15 83       	std	Z+5, r17	; 0x05
    6a30:	04 83       	std	Z+4, r16	; 0x04
    6a32:	8c e7       	ldi	r24, 0x7C	; 124
    6a34:	95 e0       	ldi	r25, 0x05	; 5
    6a36:	a0 e0       	ldi	r26, 0x00	; 0
    6a38:	81 83       	std	Z+1, r24	; 0x01
    6a3a:	92 83       	std	Z+2, r25	; 0x02
    6a3c:	a3 83       	std	Z+3, r26	; 0x03
    6a3e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    6a42:	0f c0       	rjmp	.+30     	; 0x6a62 <clock_elapsed_end+0x74>
    6a44:	ce 01       	movw	r24, r28
    6a46:	08 96       	adiw	r24, 0x08	; 8
    6a48:	93 df       	rcall	.-218    	; 0x6970 <ts_to_str>
    6a4a:	ed b7       	in	r30, 0x3d	; 61
    6a4c:	fe b7       	in	r31, 0x3e	; 62
    6a4e:	95 83       	std	Z+5, r25	; 0x05
    6a50:	84 83       	std	Z+4, r24	; 0x04
    6a52:	81 e7       	ldi	r24, 0x71	; 113
    6a54:	95 e0       	ldi	r25, 0x05	; 5
    6a56:	a0 e0       	ldi	r26, 0x00	; 0
    6a58:	81 83       	std	Z+1, r24	; 0x01
    6a5a:	92 83       	std	Z+2, r25	; 0x02
    6a5c:	a3 83       	std	Z+3, r26	; 0x03
    6a5e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    6a62:	2f 96       	adiw	r28, 0x0f	; 15
    6a64:	e4 e0       	ldi	r30, 0x04	; 4
    6a66:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00006a6a <clock_clear>:
    6a6a:	a8 e0       	ldi	r26, 0x08	; 8
    6a6c:	b0 e0       	ldi	r27, 0x00	; 0
    6a6e:	eb e3       	ldi	r30, 0x3B	; 59
    6a70:	f5 e3       	ldi	r31, 0x35	; 53
    6a72:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    6a76:	1d 82       	std	Y+5, r1	; 0x05
    6a78:	1e 82       	std	Y+6, r1	; 0x06
    6a7a:	1f 82       	std	Y+7, r1	; 0x07
    6a7c:	18 86       	std	Y+8, r1	; 0x08
    6a7e:	19 82       	std	Y+1, r1	; 0x01
    6a80:	1a 82       	std	Y+2, r1	; 0x02
    6a82:	1b 82       	std	Y+3, r1	; 0x03
    6a84:	1c 82       	std	Y+4, r1	; 0x04
    6a86:	ce 01       	movw	r24, r28
    6a88:	01 96       	adiw	r24, 0x01	; 1
    6a8a:	ad de       	rcall	.-678    	; 0x67e6 <clock_settime.part.2>
    6a8c:	eb e4       	ldi	r30, 0x4B	; 75
    6a8e:	fa e1       	ldi	r31, 0x1A	; 26
    6a90:	11 82       	std	Z+1, r1	; 0x01
    6a92:	10 82       	st	Z, r1
    6a94:	13 82       	std	Z+3, r1	; 0x03
    6a96:	12 82       	std	Z+2, r1	; 0x02
    6a98:	28 96       	adiw	r28, 0x08	; 8
    6a9a:	e2 e0       	ldi	r30, 0x02	; 2
    6a9c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00006aa0 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6aa0:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <timers_configured>
    6aa4:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <timers_configured+0x1>
    6aa8:	89 2b       	or	r24, r25
    6aaa:	69 f0       	breq	.+26     	; 0x6ac6 <enable_timers+0x26>
    6aac:	80 91 8f 17 	lds	r24, 0x178F	; 0x80178f <timers_enabled>
    6ab0:	90 91 90 17 	lds	r25, 0x1790	; 0x801790 <timers_enabled+0x1>
    6ab4:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6ab6:	39 f4       	brne	.+14     	; 0x6ac6 <enable_timers+0x26>
        timers_enabled = 1;
    6ab8:	a8 dd       	rcall	.-1200   	; 0x660a <enable_system_task>
    6aba:	81 e0       	ldi	r24, 0x01	; 1
    6abc:	90 e0       	ldi	r25, 0x00	; 0
    6abe:	90 93 90 17 	sts	0x1790, r25	; 0x801790 <timers_enabled+0x1>
    6ac2:	80 93 8f 17 	sts	0x178F, r24	; 0x80178f <timers_enabled>
    6ac6:	08 95       	ret

00006ac8 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6ac8:	cf 93       	push	r28
    6aca:	df 93       	push	r29
    6acc:	c3 e3       	ldi	r28, 0x33	; 51
    6ace:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad2:	88 23       	and	r24, r24
    6ad4:	29 f0       	breq	.+10     	; 0x6ae0 <execute_timers+0x18>
    6ad6:	e8 81       	ld	r30, Y
    6ad8:	f9 81       	ldd	r31, Y+1	; 0x01
    6ada:	30 97       	sbiw	r30, 0x00	; 0
    6adc:	09 f0       	breq	.+2      	; 0x6ae0 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6ade:	09 95       	icall
    6ae0:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6ae2:	8a e1       	ldi	r24, 0x1A	; 26
    6ae4:	cb 34       	cpi	r28, 0x4B	; 75
    6ae6:	d8 07       	cpc	r29, r24
    6ae8:	99 f7       	brne	.-26     	; 0x6ad0 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6aea:	df 91       	pop	r29
    6aec:	cf 91       	pop	r28
    6aee:	08 95       	ret

00006af0 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6af0:	00 d0       	rcall	.+0      	; 0x6af2 <init_timers+0x2>
    6af2:	1f 92       	push	r1
    printf("Timers init called\n");
    6af4:	8d e5       	ldi	r24, 0x5D	; 93
    6af6:	95 e0       	ldi	r25, 0x05	; 5
    6af8:	a0 e0       	ldi	r26, 0x00	; 0
    6afa:	ed b7       	in	r30, 0x3d	; 61
    6afc:	fe b7       	in	r31, 0x3e	; 62
    6afe:	81 83       	std	Z+1, r24	; 0x01
    6b00:	92 83       	std	Z+2, r25	; 0x02
    6b02:	a3 83       	std	Z+3, r26	; 0x03
    6b04:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    if(!timers_configured)
    6b08:	80 91 8d 17 	lds	r24, 0x178D	; 0x80178d <timers_configured>
    6b0c:	90 91 8e 17 	lds	r25, 0x178E	; 0x80178e <timers_configured+0x1>
    6b10:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6b12:	a9 f4       	brne	.+42     	; 0x6b3e <init_timers+0x4e>
        timers_configured = 1;
    6b14:	7c dd       	rcall	.-1288   	; 0x660e <install_timers_isr>
    6b16:	81 e0       	ldi	r24, 0x01	; 1
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	90 93 8e 17 	sts	0x178E, r25	; 0x80178e <timers_configured+0x1>
    6b1e:	80 93 8d 17 	sts	0x178D, r24	; 0x80178d <timers_configured>
        timers_enabled = 0;
    6b22:	10 92 90 17 	sts	0x1790, r1	; 0x801790 <timers_enabled+0x1>
    6b26:	10 92 8f 17 	sts	0x178F, r1	; 0x80178f <timers_enabled>
        printf("Timers configured\n");
    6b2a:	8a e4       	ldi	r24, 0x4A	; 74
    6b2c:	95 e0       	ldi	r25, 0x05	; 5
    6b2e:	a0 e0       	ldi	r26, 0x00	; 0
    6b30:	ed b7       	in	r30, 0x3d	; 61
    6b32:	fe b7       	in	r31, 0x3e	; 62
    6b34:	81 83       	std	Z+1, r24	; 0x01
    6b36:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6b38:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6b3a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Clock Init\n");
    6b3e:	cc de       	rcall	.-616    	; 0x68d8 <delete_all_timers>
    6b40:	94 df       	rcall	.-216    	; 0x6a6a <clock_clear>
    6b42:	8e e3       	ldi	r24, 0x3E	; 62
    6b44:	95 e0       	ldi	r25, 0x05	; 5
    6b46:	a0 e0       	ldi	r26, 0x00	; 0
    6b48:	ed b7       	in	r30, 0x3d	; 61
    6b4a:	fe b7       	in	r31, 0x3e	; 62
    6b4c:	81 83       	std	Z+1, r24	; 0x01
    6b4e:	92 83       	std	Z+2, r25	; 0x02
    6b50:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6b52:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    6b56:	61 e0       	ldi	r22, 0x01	; 1
    6b58:	70 e0       	ldi	r23, 0x00	; 0
    6b5a:	86 eb       	ldi	r24, 0xB6	; 182
    6b5c:	93 e3       	ldi	r25, 0x33	; 51
    6b5e:	81 de       	rcall	.-766    	; 0x6862 <set_timers>
        printf("Clock task init failed\n");
    6b60:	01 96       	adiw	r24, 0x01	; 1
    6b62:	51 f4       	brne	.+20     	; 0x6b78 <init_timers+0x88>
    6b64:	86 e2       	ldi	r24, 0x26	; 38
    6b66:	95 e0       	ldi	r25, 0x05	; 5
    6b68:	a0 e0       	ldi	r26, 0x00	; 0
    6b6a:	ed b7       	in	r30, 0x3d	; 61
    6b6c:	fe b7       	in	r31, 0x3e	; 62
    6b6e:	81 83       	std	Z+1, r24	; 0x01
    6b70:	92 83       	std	Z+2, r25	; 0x02
    6b72:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6b74:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    6b78:	85 e1       	ldi	r24, 0x15	; 21
    6b7a:	95 e0       	ldi	r25, 0x05	; 5
    6b7c:	a0 e0       	ldi	r26, 0x00	; 0
    6b7e:	ed b7       	in	r30, 0x3d	; 61
    6b80:	fe b7       	in	r31, 0x3e	; 62
    6b82:	81 83       	std	Z+1, r24	; 0x01
    6b84:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6b86:	a3 83       	std	Z+3, r26	; 0x03
    6b88:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    printf("Timers enabled\n");
    6b8c:	89 df       	rcall	.-238    	; 0x6aa0 <enable_timers>
    6b8e:	85 e0       	ldi	r24, 0x05	; 5
    6b90:	95 e0       	ldi	r25, 0x05	; 5
    6b92:	a0 e0       	ldi	r26, 0x00	; 0
    6b94:	ed b7       	in	r30, 0x3d	; 61
    6b96:	fe b7       	in	r31, 0x3e	; 62
    6b98:	81 83       	std	Z+1, r24	; 0x01
    6b9a:	92 83       	std	Z+2, r25	; 0x02
    6b9c:	a3 83       	std	Z+3, r26	; 0x03
}
    6b9e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    6ba2:	0f 90       	pop	r0
    6ba4:	0f 90       	pop	r0
    6ba6:	0f 90       	pop	r0
    6ba8:	08 95       	ret

00006baa <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6baa:	89 2b       	or	r24, r25
    6bac:	81 f4       	brne	.+32     	; 0x6bce <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6bae:	fb 01       	movw	r30, r22
    6bb0:	10 82       	st	Z, r1
    6bb2:	11 82       	std	Z+1, r1	; 0x01
    6bb4:	12 82       	std	Z+2, r1	; 0x02
    6bb6:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6bb8:	80 e4       	ldi	r24, 0x40	; 64
    6bba:	92 e4       	ldi	r25, 0x42	; 66
    6bbc:	af e0       	ldi	r26, 0x0F	; 15
    6bbe:	b0 e0       	ldi	r27, 0x00	; 0
    6bc0:	84 83       	std	Z+4, r24	; 0x04
    6bc2:	95 83       	std	Z+5, r25	; 0x05
    6bc4:	a6 83       	std	Z+6, r26	; 0x06
    6bc6:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6bc8:	80 e0       	ldi	r24, 0x00	; 0
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6bce:	8f ef       	ldi	r24, 0xFF	; 255
    6bd0:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6bd2:	08 95       	ret

00006bd4 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6bd4:	89 2b       	or	r24, r25
    6bd6:	19 f4       	brne	.+6      	; 0x6bde <clock_settime+0xa>
    6bd8:	cb 01       	movw	r24, r22
    6bda:	05 ce       	rjmp	.-1014   	; 0x67e6 <clock_settime.part.2>
    6bdc:	08 95       	ret
        return(-1);
    6bde:	8f ef       	ldi	r24, 0xFF	; 255
    6be0:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6be2:	08 95       	ret

00006be4 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6be4:	9c 01       	movw	r18, r24
    6be6:	83 70       	andi	r24, 0x03	; 3
    6be8:	99 27       	eor	r25, r25
    6bea:	00 97       	sbiw	r24, 0x00	; 0
    6bec:	69 f4       	brne	.+26     	; 0x6c08 <IS_Leap+0x24>
    6bee:	2c 36       	cpi	r18, 0x6C	; 108
    6bf0:	47 e0       	ldi	r20, 0x07	; 7
    6bf2:	34 07       	cpc	r19, r20
    6bf4:	59 f0       	breq	.+22     	; 0x6c0c <IS_Leap+0x28>
    6bf6:	51 e0       	ldi	r21, 0x01	; 1
    6bf8:	40 e0       	ldi	r20, 0x00	; 0
    6bfa:	24 33       	cpi	r18, 0x34	; 52
    6bfc:	38 40       	sbci	r19, 0x08	; 8
    6bfe:	09 f4       	brne	.+2      	; 0x6c02 <IS_Leap+0x1e>
    6c00:	50 e0       	ldi	r21, 0x00	; 0
    6c02:	85 2f       	mov	r24, r21
    6c04:	94 2f       	mov	r25, r20
    6c06:	08 95       	ret
    6c08:	80 e0       	ldi	r24, 0x00	; 0
    6c0a:	90 e0       	ldi	r25, 0x00	; 0
    6c0c:	08 95       	ret

00006c0e <tm_mon_to_ascii>:
    6c0e:	8c 30       	cpi	r24, 0x0C	; 12
    6c10:	91 05       	cpc	r25, r1
    6c12:	40 f4       	brcc	.+16     	; 0x6c24 <tm_mon_to_ascii+0x16>
    6c14:	88 0f       	add	r24, r24
    6c16:	99 1f       	adc	r25, r25
    6c18:	fc 01       	movw	r30, r24
    6c1a:	e8 5e       	subi	r30, 0xE8	; 232
    6c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c1e:	80 81       	ld	r24, Z
    6c20:	91 81       	ldd	r25, Z+1	; 0x01
    6c22:	08 95       	ret
    6c24:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__Month+0x18>
    6c28:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__Month+0x19>
    6c2c:	08 95       	ret

00006c2e <Days_Per_Month>:
    6c2e:	cf 93       	push	r28
    6c30:	df 93       	push	r29
    6c32:	8c 30       	cpi	r24, 0x0C	; 12
    6c34:	91 05       	cpc	r25, r1
    6c36:	24 f0       	brlt	.+8      	; 0x6c40 <Days_Per_Month+0x12>
    6c38:	6f 5f       	subi	r22, 0xFF	; 255
    6c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c3c:	0c 97       	sbiw	r24, 0x0c	; 12
    6c3e:	f9 cf       	rjmp	.-14     	; 0x6c32 <Days_Per_Month+0x4>
    6c40:	97 ff       	sbrs	r25, 7
    6c42:	04 c0       	rjmp	.+8      	; 0x6c4c <Days_Per_Month+0x1e>
    6c44:	61 50       	subi	r22, 0x01	; 1
    6c46:	71 09       	sbc	r23, r1
    6c48:	0c 96       	adiw	r24, 0x0c	; 12
    6c4a:	fa cf       	rjmp	.-12     	; 0x6c40 <Days_Per_Month+0x12>
    6c4c:	fc 01       	movw	r30, r24
    6c4e:	ee 0f       	add	r30, r30
    6c50:	ff 1f       	adc	r31, r31
    6c52:	e6 5a       	subi	r30, 0xA6	; 166
    6c54:	fc 4f       	sbci	r31, 0xFC	; 252
    6c56:	c0 81       	ld	r28, Z
    6c58:	d1 81       	ldd	r29, Z+1	; 0x01
    6c5a:	01 97       	sbiw	r24, 0x01	; 1
    6c5c:	29 f4       	brne	.+10     	; 0x6c68 <Days_Per_Month+0x3a>
    6c5e:	cb 01       	movw	r24, r22
    6c60:	c1 df       	rcall	.-126    	; 0x6be4 <IS_Leap>
    6c62:	89 2b       	or	r24, r25
    6c64:	09 f0       	breq	.+2      	; 0x6c68 <Days_Per_Month+0x3a>
    6c66:	21 96       	adiw	r28, 0x01	; 1
    6c68:	ce 01       	movw	r24, r28
    6c6a:	df 91       	pop	r29
    6c6c:	cf 91       	pop	r28
    6c6e:	08 95       	ret

00006c70 <time_to_tm>:
    6c70:	a0 e0       	ldi	r26, 0x00	; 0
    6c72:	b0 e0       	ldi	r27, 0x00	; 0
    6c74:	ee e3       	ldi	r30, 0x3E	; 62
    6c76:	f6 e3       	ldi	r31, 0x36	; 54
    6c78:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
    6c7c:	e8 01       	movw	r28, r16
    6c7e:	e6 e1       	ldi	r30, 0x16	; 22
    6c80:	d8 01       	movw	r26, r16
    6c82:	1d 92       	st	X+, r1
    6c84:	ea 95       	dec	r30
    6c86:	e9 f7       	brne	.-6      	; 0x6c82 <time_to_tm+0x12>
    6c88:	61 15       	cp	r22, r1
    6c8a:	bd e5       	ldi	r27, 0x5D	; 93
    6c8c:	7b 07       	cpc	r23, r27
    6c8e:	bd ef       	ldi	r27, 0xFD	; 253
    6c90:	8b 07       	cpc	r24, r27
    6c92:	bf ef       	ldi	r27, 0xFF	; 255
    6c94:	9b 07       	cpc	r25, r27
    6c96:	08 f0       	brcs	.+2      	; 0x6c9a <time_to_tm+0x2a>
    6c98:	c0 c0       	rjmp	.+384    	; 0x6e1a <time_to_tm+0x1aa>
    6c9a:	6b 01       	movw	r12, r22
    6c9c:	7c 01       	movw	r14, r24
    6c9e:	c2 1a       	sub	r12, r18
    6ca0:	d3 0a       	sbc	r13, r19
    6ca2:	e4 0a       	sbc	r14, r20
    6ca4:	f5 0a       	sbc	r15, r21
    6ca6:	46 01       	movw	r8, r12
    6ca8:	57 01       	movw	r10, r14
    6caa:	e0 e8       	ldi	r30, 0x80	; 128
    6cac:	ce 16       	cp	r12, r30
    6cae:	ee ea       	ldi	r30, 0xAE	; 174
    6cb0:	de 06       	cpc	r13, r30
    6cb2:	ee ef       	ldi	r30, 0xFE	; 254
    6cb4:	ee 06       	cpc	r14, r30
    6cb6:	ef ef       	ldi	r30, 0xFF	; 255
    6cb8:	fe 06       	cpc	r15, r30
    6cba:	50 f0       	brcs	.+20     	; 0x6cd0 <time_to_tm+0x60>
    6cbc:	80 e8       	ldi	r24, 0x80	; 128
    6cbe:	88 0e       	add	r8, r24
    6cc0:	81 e5       	ldi	r24, 0x51	; 81
    6cc2:	98 1e       	adc	r9, r24
    6cc4:	81 e0       	ldi	r24, 0x01	; 1
    6cc6:	a8 1e       	adc	r10, r24
    6cc8:	b1 1c       	adc	r11, r1
    6cca:	01 e0       	ldi	r16, 0x01	; 1
    6ccc:	10 e0       	ldi	r17, 0x00	; 0
    6cce:	02 c0       	rjmp	.+4      	; 0x6cd4 <time_to_tm+0x64>
    6cd0:	00 e0       	ldi	r16, 0x00	; 0
    6cd2:	10 e0       	ldi	r17, 0x00	; 0
    6cd4:	8c e3       	ldi	r24, 0x3C	; 60
    6cd6:	48 2e       	mov	r4, r24
    6cd8:	51 2c       	mov	r5, r1
    6cda:	61 2c       	mov	r6, r1
    6cdc:	71 2c       	mov	r7, r1
    6cde:	c5 01       	movw	r24, r10
    6ce0:	b4 01       	movw	r22, r8
    6ce2:	a3 01       	movw	r20, r6
    6ce4:	92 01       	movw	r18, r4
    6ce6:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    6cea:	79 83       	std	Y+1, r23	; 0x01
    6cec:	68 83       	st	Y, r22
    6cee:	ca 01       	movw	r24, r20
    6cf0:	b9 01       	movw	r22, r18
    6cf2:	a3 01       	movw	r20, r6
    6cf4:	92 01       	movw	r18, r4
    6cf6:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    6cfa:	7b 83       	std	Y+3, r23	; 0x03
    6cfc:	6a 83       	std	Y+2, r22	; 0x02
    6cfe:	c5 01       	movw	r24, r10
    6d00:	b4 01       	movw	r22, r8
    6d02:	20 e1       	ldi	r18, 0x10	; 16
    6d04:	3e e0       	ldi	r19, 0x0E	; 14
    6d06:	40 e0       	ldi	r20, 0x00	; 0
    6d08:	50 e0       	ldi	r21, 0x00	; 0
    6d0a:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    6d0e:	ca 01       	movw	r24, r20
    6d10:	b9 01       	movw	r22, r18
    6d12:	28 e1       	ldi	r18, 0x18	; 24
    6d14:	30 e0       	ldi	r19, 0x00	; 0
    6d16:	40 e0       	ldi	r20, 0x00	; 0
    6d18:	50 e0       	ldi	r21, 0x00	; 0
    6d1a:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    6d1e:	7d 83       	std	Y+5, r23	; 0x05
    6d20:	6c 83       	std	Y+4, r22	; 0x04
    6d22:	01 15       	cp	r16, r1
    6d24:	11 05       	cpc	r17, r1
    6d26:	89 f0       	breq	.+34     	; 0x6d4a <time_to_tm+0xda>
    6d28:	85 e4       	ldi	r24, 0x45	; 69
    6d2a:	90 e0       	ldi	r25, 0x00	; 0
    6d2c:	9b 87       	std	Y+11, r25	; 0x0b
    6d2e:	8a 87       	std	Y+10, r24	; 0x0a
    6d30:	8b e0       	ldi	r24, 0x0B	; 11
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	99 87       	std	Y+9, r25	; 0x09
    6d36:	88 87       	std	Y+8, r24	; 0x08
    6d38:	8f e1       	ldi	r24, 0x1F	; 31
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	9f 83       	std	Y+7, r25	; 0x07
    6d3e:	8e 83       	std	Y+6, r24	; 0x06
    6d40:	83 e0       	ldi	r24, 0x03	; 3
    6d42:	90 e0       	ldi	r25, 0x00	; 0
    6d44:	9d 87       	std	Y+13, r25	; 0x0d
    6d46:	8c 87       	std	Y+12, r24	; 0x0c
    6d48:	65 c0       	rjmp	.+202    	; 0x6e14 <time_to_tm+0x1a4>
    6d4a:	c5 01       	movw	r24, r10
    6d4c:	b4 01       	movw	r22, r8
    6d4e:	20 e8       	ldi	r18, 0x80	; 128
    6d50:	31 e5       	ldi	r19, 0x51	; 81
    6d52:	41 e0       	ldi	r20, 0x01	; 1
    6d54:	50 e0       	ldi	r21, 0x00	; 0
    6d56:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    6d5a:	49 01       	movw	r8, r18
    6d5c:	5a 01       	movw	r10, r20
    6d5e:	ca 01       	movw	r24, r20
    6d60:	b9 01       	movw	r22, r18
    6d62:	6c 5f       	subi	r22, 0xFC	; 252
    6d64:	7f 4f       	sbci	r23, 0xFF	; 255
    6d66:	8f 4f       	sbci	r24, 0xFF	; 255
    6d68:	9f 4f       	sbci	r25, 0xFF	; 255
    6d6a:	27 e0       	ldi	r18, 0x07	; 7
    6d6c:	30 e0       	ldi	r19, 0x00	; 0
    6d6e:	40 e0       	ldi	r20, 0x00	; 0
    6d70:	50 e0       	ldi	r21, 0x00	; 0
    6d72:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
    6d76:	7d 87       	std	Y+13, r23	; 0x0d
    6d78:	6c 87       	std	Y+12, r22	; 0x0c
    6d7a:	02 eb       	ldi	r16, 0xB2	; 178
    6d7c:	17 e0       	ldi	r17, 0x07	; 7
    6d7e:	c8 01       	movw	r24, r16
    6d80:	31 df       	rcall	.-414    	; 0x6be4 <IS_Leap>
    6d82:	00 97       	sbiw	r24, 0x00	; 0
    6d84:	19 f4       	brne	.+6      	; 0x6d8c <time_to_tm+0x11c>
    6d86:	4d e6       	ldi	r20, 0x6D	; 109
    6d88:	51 e0       	ldi	r21, 0x01	; 1
    6d8a:	02 c0       	rjmp	.+4      	; 0x6d90 <time_to_tm+0x120>
    6d8c:	4e e6       	ldi	r20, 0x6E	; 110
    6d8e:	51 e0       	ldi	r21, 0x01	; 1
    6d90:	05 2e       	mov	r0, r21
    6d92:	00 0c       	add	r0, r0
    6d94:	66 0b       	sbc	r22, r22
    6d96:	77 0b       	sbc	r23, r23
    6d98:	84 16       	cp	r8, r20
    6d9a:	95 06       	cpc	r9, r21
    6d9c:	a6 06       	cpc	r10, r22
    6d9e:	b7 06       	cpc	r11, r23
    6da0:	3c f0       	brlt	.+14     	; 0x6db0 <time_to_tm+0x140>
    6da2:	0f 5f       	subi	r16, 0xFF	; 255
    6da4:	1f 4f       	sbci	r17, 0xFF	; 255
    6da6:	84 1a       	sub	r8, r20
    6da8:	95 0a       	sbc	r9, r21
    6daa:	a6 0a       	sbc	r10, r22
    6dac:	b7 0a       	sbc	r11, r23
    6dae:	e7 cf       	rjmp	.-50     	; 0x6d7e <time_to_tm+0x10e>
    6db0:	0c 56       	subi	r16, 0x6C	; 108
    6db2:	17 40       	sbci	r17, 0x07	; 7
    6db4:	1b 87       	std	Y+11, r17	; 0x0b
    6db6:	0a 87       	std	Y+10, r16	; 0x0a
    6db8:	9f 86       	std	Y+15, r9	; 0x0f
    6dba:	8e 86       	std	Y+14, r8	; 0x0e
    6dbc:	ea e5       	ldi	r30, 0x5A	; 90
    6dbe:	f3 e0       	ldi	r31, 0x03	; 3
    6dc0:	20 e0       	ldi	r18, 0x00	; 0
    6dc2:	30 e0       	ldi	r19, 0x00	; 0
    6dc4:	18 14       	cp	r1, r8
    6dc6:	19 04       	cpc	r1, r9
    6dc8:	1a 04       	cpc	r1, r10
    6dca:	1b 04       	cpc	r1, r11
    6dcc:	e4 f4       	brge	.+56     	; 0x6e06 <time_to_tm+0x196>
    6dce:	2c 30       	cpi	r18, 0x0C	; 12
    6dd0:	31 05       	cpc	r19, r1
    6dd2:	c9 f0       	breq	.+50     	; 0x6e06 <time_to_tm+0x196>
    6dd4:	41 91       	ld	r20, Z+
    6dd6:	51 91       	ld	r21, Z+
    6dd8:	21 30       	cpi	r18, 0x01	; 1
    6dda:	31 05       	cpc	r19, r1
    6ddc:	21 f4       	brne	.+8      	; 0x6de6 <time_to_tm+0x176>
    6dde:	00 97       	sbiw	r24, 0x00	; 0
    6de0:	11 f0       	breq	.+4      	; 0x6de6 <time_to_tm+0x176>
    6de2:	4f 5f       	subi	r20, 0xFF	; 255
    6de4:	5f 4f       	sbci	r21, 0xFF	; 255
    6de6:	05 2e       	mov	r0, r21
    6de8:	00 0c       	add	r0, r0
    6dea:	66 0b       	sbc	r22, r22
    6dec:	77 0b       	sbc	r23, r23
    6dee:	84 16       	cp	r8, r20
    6df0:	95 06       	cpc	r9, r21
    6df2:	a6 06       	cpc	r10, r22
    6df4:	b7 06       	cpc	r11, r23
    6df6:	3c f0       	brlt	.+14     	; 0x6e06 <time_to_tm+0x196>
    6df8:	84 1a       	sub	r8, r20
    6dfa:	95 0a       	sbc	r9, r21
    6dfc:	a6 0a       	sbc	r10, r22
    6dfe:	b7 0a       	sbc	r11, r23
    6e00:	2f 5f       	subi	r18, 0xFF	; 255
    6e02:	3f 4f       	sbci	r19, 0xFF	; 255
    6e04:	df cf       	rjmp	.-66     	; 0x6dc4 <time_to_tm+0x154>
    6e06:	39 87       	std	Y+9, r19	; 0x09
    6e08:	28 87       	std	Y+8, r18	; 0x08
    6e0a:	af ef       	ldi	r26, 0xFF	; 255
    6e0c:	8a 1a       	sub	r8, r26
    6e0e:	9a 0a       	sbc	r9, r26
    6e10:	9f 82       	std	Y+7, r9	; 0x07
    6e12:	8e 82       	std	Y+6, r8	; 0x06
    6e14:	b6 01       	movw	r22, r12
    6e16:	c7 01       	movw	r24, r14
    6e18:	04 c0       	rjmp	.+8      	; 0x6e22 <time_to_tm+0x1b2>
    6e1a:	6f ef       	ldi	r22, 0xFF	; 255
    6e1c:	7f ef       	ldi	r23, 0xFF	; 255
    6e1e:	8f ef       	ldi	r24, 0xFF	; 255
    6e20:	9f ef       	ldi	r25, 0xFF	; 255
    6e22:	cd b7       	in	r28, 0x3d	; 61
    6e24:	de b7       	in	r29, 0x3e	; 62
    6e26:	e0 e1       	ldi	r30, 0x10	; 16
    6e28:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

00006e2c <gmtime_r>:
    6e2c:	0f 93       	push	r16
    6e2e:	1f 93       	push	r17
    6e30:	cf 93       	push	r28
    6e32:	df 93       	push	r29
    6e34:	eb 01       	movw	r28, r22
    6e36:	fc 01       	movw	r30, r24
    6e38:	60 81       	ld	r22, Z
    6e3a:	71 81       	ldd	r23, Z+1	; 0x01
    6e3c:	82 81       	ldd	r24, Z+2	; 0x02
    6e3e:	93 81       	ldd	r25, Z+3	; 0x03
    6e40:	8e 01       	movw	r16, r28
    6e42:	20 e0       	ldi	r18, 0x00	; 0
    6e44:	30 e0       	ldi	r19, 0x00	; 0
    6e46:	a9 01       	movw	r20, r18
    6e48:	13 df       	rcall	.-474    	; 0x6c70 <time_to_tm>
    6e4a:	ce 01       	movw	r24, r28
    6e4c:	df 91       	pop	r29
    6e4e:	cf 91       	pop	r28
    6e50:	1f 91       	pop	r17
    6e52:	0f 91       	pop	r16
    6e54:	08 95       	ret

00006e56 <gmtime>:
    6e56:	2f ea       	ldi	r18, 0xAF	; 175
    6e58:	37 e1       	ldi	r19, 0x17	; 23
    6e5a:	30 93 c6 17 	sts	0x17C6, r19	; 0x8017c6 <p.3798+0x1>
    6e5e:	20 93 c5 17 	sts	0x17C5, r18	; 0x8017c5 <p.3798>
    6e62:	b9 01       	movw	r22, r18
    6e64:	e3 df       	rcall	.-58     	; 0x6e2c <gmtime_r>
    6e66:	8f ea       	ldi	r24, 0xAF	; 175
    6e68:	97 e1       	ldi	r25, 0x17	; 23
    6e6a:	08 95       	ret

00006e6c <gettimezone>:
    6e6c:	eb e4       	ldi	r30, 0x4B	; 75
    6e6e:	fa e1       	ldi	r31, 0x1A	; 26
    6e70:	20 81       	ld	r18, Z
    6e72:	31 81       	ldd	r19, Z+1	; 0x01
    6e74:	dc 01       	movw	r26, r24
    6e76:	2d 93       	st	X+, r18
    6e78:	3c 93       	st	X, r19
    6e7a:	22 81       	ldd	r18, Z+2	; 0x02
    6e7c:	33 81       	ldd	r19, Z+3	; 0x03
    6e7e:	fc 01       	movw	r30, r24
    6e80:	33 83       	std	Z+3, r19	; 0x03
    6e82:	22 83       	std	Z+2, r18	; 0x02
    6e84:	80 e0       	ldi	r24, 0x00	; 0
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	08 95       	ret

00006e8a <settimezone>:
    6e8a:	cf 93       	push	r28
    6e8c:	df 93       	push	r29
    6e8e:	ec 01       	movw	r28, r24
    6e90:	28 81       	ld	r18, Y
    6e92:	39 81       	ldd	r19, Y+1	; 0x01
    6e94:	eb e4       	ldi	r30, 0x4B	; 75
    6e96:	fa e1       	ldi	r31, 0x1A	; 26
    6e98:	31 83       	std	Z+1, r19	; 0x01
    6e9a:	20 83       	st	Z, r18
    6e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6ea0:	93 83       	std	Z+3, r25	; 0x03
    6ea2:	82 83       	std	Z+2, r24	; 0x02
    6ea4:	80 e0       	ldi	r24, 0x00	; 0
    6ea6:	90 e0       	ldi	r25, 0x00	; 0
    6ea8:	df 91       	pop	r29
    6eaa:	cf 91       	pop	r28
    6eac:	08 95       	ret

00006eae <gettimeofday>:
    6eae:	a8 e0       	ldi	r26, 0x08	; 8
    6eb0:	b0 e0       	ldi	r27, 0x00	; 0
    6eb2:	ed e5       	ldi	r30, 0x5D	; 93
    6eb4:	f7 e3       	ldi	r31, 0x37	; 55
    6eb6:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
    6eba:	8c 01       	movw	r16, r24
    6ebc:	7b 01       	movw	r14, r22
    6ebe:	be 01       	movw	r22, r28
    6ec0:	6f 5f       	subi	r22, 0xFF	; 255
    6ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec4:	80 e0       	ldi	r24, 0x00	; 0
    6ec6:	90 e0       	ldi	r25, 0x00	; 0
    6ec8:	dc db       	rcall	.-2120   	; 0x6682 <clock_gettime>
    6eca:	89 81       	ldd	r24, Y+1	; 0x01
    6ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    6ece:	ab 81       	ldd	r26, Y+3	; 0x03
    6ed0:	bc 81       	ldd	r27, Y+4	; 0x04
    6ed2:	f8 01       	movw	r30, r16
    6ed4:	80 83       	st	Z, r24
    6ed6:	91 83       	std	Z+1, r25	; 0x01
    6ed8:	a2 83       	std	Z+2, r26	; 0x02
    6eda:	b3 83       	std	Z+3, r27	; 0x03
    6edc:	6d 81       	ldd	r22, Y+5	; 0x05
    6ede:	7e 81       	ldd	r23, Y+6	; 0x06
    6ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ee2:	98 85       	ldd	r25, Y+8	; 0x08
    6ee4:	28 ee       	ldi	r18, 0xE8	; 232
    6ee6:	33 e0       	ldi	r19, 0x03	; 3
    6ee8:	40 e0       	ldi	r20, 0x00	; 0
    6eea:	50 e0       	ldi	r21, 0x00	; 0
    6eec:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
    6ef0:	f8 01       	movw	r30, r16
    6ef2:	24 83       	std	Z+4, r18	; 0x04
    6ef4:	35 83       	std	Z+5, r19	; 0x05
    6ef6:	46 83       	std	Z+6, r20	; 0x06
    6ef8:	57 83       	std	Z+7, r21	; 0x07
    6efa:	c7 01       	movw	r24, r14
    6efc:	b7 df       	rcall	.-146    	; 0x6e6c <gettimezone>
    6efe:	80 e0       	ldi	r24, 0x00	; 0
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	28 96       	adiw	r28, 0x08	; 8
    6f04:	e6 e0       	ldi	r30, 0x06	; 6
    6f06:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00006f0a <time>:
    6f0a:	cf 93       	push	r28
    6f0c:	df 93       	push	r29
    6f0e:	ec 01       	movw	r28, r24
    6f10:	61 e9       	ldi	r22, 0x91	; 145
    6f12:	77 e1       	ldi	r23, 0x17	; 23
    6f14:	80 e0       	ldi	r24, 0x00	; 0
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	b4 db       	rcall	.-2200   	; 0x6682 <clock_gettime>
    6f1a:	20 97       	sbiw	r28, 0x00	; 0
    6f1c:	61 f0       	breq	.+24     	; 0x6f36 <time+0x2c>
    6f1e:	80 91 91 17 	lds	r24, 0x1791	; 0x801791 <ts.3876>
    6f22:	90 91 92 17 	lds	r25, 0x1792	; 0x801792 <ts.3876+0x1>
    6f26:	a0 91 93 17 	lds	r26, 0x1793	; 0x801793 <ts.3876+0x2>
    6f2a:	b0 91 94 17 	lds	r27, 0x1794	; 0x801794 <ts.3876+0x3>
    6f2e:	88 83       	st	Y, r24
    6f30:	99 83       	std	Y+1, r25	; 0x01
    6f32:	aa 83       	std	Y+2, r26	; 0x02
    6f34:	bb 83       	std	Y+3, r27	; 0x03
    6f36:	60 91 91 17 	lds	r22, 0x1791	; 0x801791 <ts.3876>
    6f3a:	70 91 92 17 	lds	r23, 0x1792	; 0x801792 <ts.3876+0x1>
    6f3e:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <ts.3876+0x2>
    6f42:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <ts.3876+0x3>
    6f46:	df 91       	pop	r29
    6f48:	cf 91       	pop	r28
    6f4a:	08 95       	ret

00006f4c <is_dst>:
    6f4c:	cf 92       	push	r12
    6f4e:	df 92       	push	r13
    6f50:	ef 92       	push	r14
    6f52:	ff 92       	push	r15
    6f54:	6b 01       	movw	r12, r22
    6f56:	7c 01       	movw	r14, r24
    6f58:	05 d4       	rcall	.+2058   	; 0x7764 <set_dst>
    6f5a:	80 91 4f 1a 	lds	r24, 0x1A4F	; 0x801a4f <dst>
    6f5e:	90 91 50 1a 	lds	r25, 0x1A50	; 0x801a50 <dst+0x1>
    6f62:	a0 91 51 1a 	lds	r26, 0x1A51	; 0x801a51 <dst+0x2>
    6f66:	b0 91 52 1a 	lds	r27, 0x1A52	; 0x801a52 <dst+0x3>
    6f6a:	c8 16       	cp	r12, r24
    6f6c:	d9 06       	cpc	r13, r25
    6f6e:	ea 06       	cpc	r14, r26
    6f70:	fb 06       	cpc	r15, r27
    6f72:	88 f0       	brcs	.+34     	; 0x6f96 <is_dst+0x4a>
    6f74:	81 e0       	ldi	r24, 0x01	; 1
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	40 91 53 1a 	lds	r20, 0x1A53	; 0x801a53 <dst+0x4>
    6f7c:	50 91 54 1a 	lds	r21, 0x1A54	; 0x801a54 <dst+0x5>
    6f80:	60 91 55 1a 	lds	r22, 0x1A55	; 0x801a55 <dst+0x6>
    6f84:	70 91 56 1a 	lds	r23, 0x1A56	; 0x801a56 <dst+0x7>
    6f88:	4c 15       	cp	r20, r12
    6f8a:	5d 05       	cpc	r21, r13
    6f8c:	6e 05       	cpc	r22, r14
    6f8e:	7f 05       	cpc	r23, r15
    6f90:	20 f4       	brcc	.+8      	; 0x6f9a <is_dst+0x4e>
    6f92:	80 e0       	ldi	r24, 0x00	; 0
    6f94:	02 c0       	rjmp	.+4      	; 0x6f9a <is_dst+0x4e>
    6f96:	80 e0       	ldi	r24, 0x00	; 0
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	ff 90       	pop	r15
    6f9c:	ef 90       	pop	r14
    6f9e:	df 90       	pop	r13
    6fa0:	cf 90       	pop	r12
    6fa2:	08 95       	ret

00006fa4 <localtime_r>:
    6fa4:	4f 92       	push	r4
    6fa6:	5f 92       	push	r5
    6fa8:	6f 92       	push	r6
    6faa:	7f 92       	push	r7
    6fac:	af 92       	push	r10
    6fae:	bf 92       	push	r11
    6fb0:	cf 92       	push	r12
    6fb2:	df 92       	push	r13
    6fb4:	ef 92       	push	r14
    6fb6:	ff 92       	push	r15
    6fb8:	0f 93       	push	r16
    6fba:	1f 93       	push	r17
    6fbc:	cf 93       	push	r28
    6fbe:	df 93       	push	r29
    6fc0:	00 d0       	rcall	.+0      	; 0x6fc2 <localtime_r+0x1e>
    6fc2:	00 d0       	rcall	.+0      	; 0x6fc4 <localtime_r+0x20>
    6fc4:	cd b7       	in	r28, 0x3d	; 61
    6fc6:	de b7       	in	r29, 0x3e	; 62
    6fc8:	5b 01       	movw	r10, r22
    6fca:	fc 01       	movw	r30, r24
    6fcc:	40 80       	ld	r4, Z
    6fce:	51 80       	ldd	r5, Z+1	; 0x01
    6fd0:	62 80       	ldd	r6, Z+2	; 0x02
    6fd2:	73 80       	ldd	r7, Z+3	; 0x03
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	01 96       	adiw	r24, 0x01	; 1
    6fd8:	49 df       	rcall	.-366    	; 0x6e6c <gettimezone>
    6fda:	a9 81       	ldd	r26, Y+1	; 0x01
    6fdc:	ba 81       	ldd	r27, Y+2	; 0x02
    6fde:	2c e3       	ldi	r18, 0x3C	; 60
    6fe0:	30 e0       	ldi	r19, 0x00	; 0
    6fe2:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__usmulhisi3>
    6fe6:	6b 01       	movw	r12, r22
    6fe8:	7c 01       	movw	r14, r24
    6fea:	c3 01       	movw	r24, r6
    6fec:	b2 01       	movw	r22, r4
    6fee:	6c 19       	sub	r22, r12
    6ff0:	7d 09       	sbc	r23, r13
    6ff2:	8e 09       	sbc	r24, r14
    6ff4:	9f 09       	sbc	r25, r15
    6ff6:	aa df       	rcall	.-172    	; 0x6f4c <is_dst>
    6ff8:	89 2b       	or	r24, r25
    6ffa:	31 f0       	breq	.+12     	; 0x7008 <localtime_r+0x64>
    6ffc:	f0 e1       	ldi	r31, 0x10	; 16
    6ffe:	cf 1a       	sub	r12, r31
    7000:	fe e0       	ldi	r31, 0x0E	; 14
    7002:	df 0a       	sbc	r13, r31
    7004:	e1 08       	sbc	r14, r1
    7006:	f1 08       	sbc	r15, r1
    7008:	85 01       	movw	r16, r10
    700a:	a7 01       	movw	r20, r14
    700c:	96 01       	movw	r18, r12
    700e:	c3 01       	movw	r24, r6
    7010:	b2 01       	movw	r22, r4
    7012:	2e de       	rcall	.-932    	; 0x6c70 <time_to_tm>
    7014:	c5 01       	movw	r24, r10
    7016:	0f 90       	pop	r0
    7018:	0f 90       	pop	r0
    701a:	0f 90       	pop	r0
    701c:	0f 90       	pop	r0
    701e:	df 91       	pop	r29
    7020:	cf 91       	pop	r28
    7022:	1f 91       	pop	r17
    7024:	0f 91       	pop	r16
    7026:	ff 90       	pop	r15
    7028:	ef 90       	pop	r14
    702a:	df 90       	pop	r13
    702c:	cf 90       	pop	r12
    702e:	bf 90       	pop	r11
    7030:	af 90       	pop	r10
    7032:	7f 90       	pop	r7
    7034:	6f 90       	pop	r6
    7036:	5f 90       	pop	r5
    7038:	4f 90       	pop	r4
    703a:	08 95       	ret

0000703c <localtime>:
    703c:	69 e9       	ldi	r22, 0x99	; 153
    703e:	77 e1       	ldi	r23, 0x17	; 23
    7040:	b1 cf       	rjmp	.-158    	; 0x6fa4 <localtime_r>
    7042:	08 95       	ret

00007044 <normalize>:
    7044:	aa e0       	ldi	r26, 0x0A	; 10
    7046:	b0 e0       	ldi	r27, 0x00	; 0
    7048:	e8 e2       	ldi	r30, 0x28	; 40
    704a:	f8 e3       	ldi	r31, 0x38	; 56
    704c:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    7050:	7c 01       	movw	r14, r24
    7052:	7a 87       	std	Y+10, r23	; 0x0a
    7054:	69 87       	std	Y+9, r22	; 0x09
    7056:	f7 01       	movw	r30, r14
    7058:	80 81       	ld	r24, Z
    705a:	91 81       	ldd	r25, Z+1	; 0x01
    705c:	8c 33       	cpi	r24, 0x3C	; 60
    705e:	91 05       	cpc	r25, r1
    7060:	5c f0       	brlt	.+22     	; 0x7078 <normalize+0x34>
    7062:	f7 01       	movw	r30, r14
    7064:	22 81       	ldd	r18, Z+2	; 0x02
    7066:	33 81       	ldd	r19, Z+3	; 0x03
    7068:	2f 5f       	subi	r18, 0xFF	; 255
    706a:	3f 4f       	sbci	r19, 0xFF	; 255
    706c:	33 83       	std	Z+3, r19	; 0x03
    706e:	22 83       	std	Z+2, r18	; 0x02
    7070:	cc 97       	sbiw	r24, 0x3c	; 60
    7072:	91 83       	std	Z+1, r25	; 0x01
    7074:	80 83       	st	Z, r24
    7076:	ef cf       	rjmp	.-34     	; 0x7056 <normalize+0x12>
    7078:	f7 01       	movw	r30, r14
    707a:	01 90       	ld	r0, Z+
    707c:	f0 81       	ld	r31, Z
    707e:	e0 2d       	mov	r30, r0
    7080:	fe 83       	std	Y+6, r31	; 0x06
    7082:	ed 83       	std	Y+5, r30	; 0x05
    7084:	f7 ff       	sbrs	r31, 7
    7086:	0d c0       	rjmp	.+26     	; 0x70a2 <normalize+0x5e>
    7088:	f7 01       	movw	r30, r14
    708a:	82 81       	ldd	r24, Z+2	; 0x02
    708c:	93 81       	ldd	r25, Z+3	; 0x03
    708e:	01 97       	sbiw	r24, 0x01	; 1
    7090:	93 83       	std	Z+3, r25	; 0x03
    7092:	82 83       	std	Z+2, r24	; 0x02
    7094:	6d 81       	ldd	r22, Y+5	; 0x05
    7096:	7e 81       	ldd	r23, Y+6	; 0x06
    7098:	64 5c       	subi	r22, 0xC4	; 196
    709a:	7f 4f       	sbci	r23, 0xFF	; 255
    709c:	71 83       	std	Z+1, r23	; 0x01
    709e:	60 83       	st	Z, r22
    70a0:	eb cf       	rjmp	.-42     	; 0x7078 <normalize+0x34>
    70a2:	f7 01       	movw	r30, r14
    70a4:	82 81       	ldd	r24, Z+2	; 0x02
    70a6:	93 81       	ldd	r25, Z+3	; 0x03
    70a8:	8c 33       	cpi	r24, 0x3C	; 60
    70aa:	91 05       	cpc	r25, r1
    70ac:	5c f0       	brlt	.+22     	; 0x70c4 <normalize+0x80>
    70ae:	f7 01       	movw	r30, r14
    70b0:	24 81       	ldd	r18, Z+4	; 0x04
    70b2:	35 81       	ldd	r19, Z+5	; 0x05
    70b4:	2f 5f       	subi	r18, 0xFF	; 255
    70b6:	3f 4f       	sbci	r19, 0xFF	; 255
    70b8:	35 83       	std	Z+5, r19	; 0x05
    70ba:	24 83       	std	Z+4, r18	; 0x04
    70bc:	cc 97       	sbiw	r24, 0x3c	; 60
    70be:	93 83       	std	Z+3, r25	; 0x03
    70c0:	82 83       	std	Z+2, r24	; 0x02
    70c2:	ef cf       	rjmp	.-34     	; 0x70a2 <normalize+0x5e>
    70c4:	f7 01       	movw	r30, r14
    70c6:	22 80       	ldd	r2, Z+2	; 0x02
    70c8:	33 80       	ldd	r3, Z+3	; 0x03
    70ca:	37 fe       	sbrs	r3, 7
    70cc:	0d c0       	rjmp	.+26     	; 0x70e8 <normalize+0xa4>
    70ce:	f7 01       	movw	r30, r14
    70d0:	84 81       	ldd	r24, Z+4	; 0x04
    70d2:	95 81       	ldd	r25, Z+5	; 0x05
    70d4:	01 97       	sbiw	r24, 0x01	; 1
    70d6:	95 83       	std	Z+5, r25	; 0x05
    70d8:	84 83       	std	Z+4, r24	; 0x04
    70da:	fc e3       	ldi	r31, 0x3C	; 60
    70dc:	2f 0e       	add	r2, r31
    70de:	31 1c       	adc	r3, r1
    70e0:	f7 01       	movw	r30, r14
    70e2:	33 82       	std	Z+3, r3	; 0x03
    70e4:	22 82       	std	Z+2, r2	; 0x02
    70e6:	ee cf       	rjmp	.-36     	; 0x70c4 <normalize+0x80>
    70e8:	f7 01       	movw	r30, r14
    70ea:	84 81       	ldd	r24, Z+4	; 0x04
    70ec:	95 81       	ldd	r25, Z+5	; 0x05
    70ee:	88 31       	cpi	r24, 0x18	; 24
    70f0:	91 05       	cpc	r25, r1
    70f2:	5c f0       	brlt	.+22     	; 0x710a <normalize+0xc6>
    70f4:	f7 01       	movw	r30, r14
    70f6:	26 81       	ldd	r18, Z+6	; 0x06
    70f8:	37 81       	ldd	r19, Z+7	; 0x07
    70fa:	2f 5f       	subi	r18, 0xFF	; 255
    70fc:	3f 4f       	sbci	r19, 0xFF	; 255
    70fe:	37 83       	std	Z+7, r19	; 0x07
    7100:	26 83       	std	Z+6, r18	; 0x06
    7102:	48 97       	sbiw	r24, 0x18	; 24
    7104:	95 83       	std	Z+5, r25	; 0x05
    7106:	84 83       	std	Z+4, r24	; 0x04
    7108:	ef cf       	rjmp	.-34     	; 0x70e8 <normalize+0xa4>
    710a:	f7 01       	movw	r30, r14
    710c:	04 81       	ldd	r16, Z+4	; 0x04
    710e:	15 81       	ldd	r17, Z+5	; 0x05
    7110:	17 ff       	sbrs	r17, 7
    7112:	0b c0       	rjmp	.+22     	; 0x712a <normalize+0xe6>
    7114:	f7 01       	movw	r30, r14
    7116:	86 81       	ldd	r24, Z+6	; 0x06
    7118:	97 81       	ldd	r25, Z+7	; 0x07
    711a:	01 97       	sbiw	r24, 0x01	; 1
    711c:	97 83       	std	Z+7, r25	; 0x07
    711e:	86 83       	std	Z+6, r24	; 0x06
    7120:	08 5e       	subi	r16, 0xE8	; 232
    7122:	1f 4f       	sbci	r17, 0xFF	; 255
    7124:	15 83       	std	Z+5, r17	; 0x05
    7126:	04 83       	std	Z+4, r16	; 0x04
    7128:	f0 cf       	rjmp	.-32     	; 0x710a <normalize+0xc6>
    712a:	f7 01       	movw	r30, r14
    712c:	80 85       	ldd	r24, Z+8	; 0x08
    712e:	91 85       	ldd	r25, Z+9	; 0x09
    7130:	8c 30       	cpi	r24, 0x0C	; 12
    7132:	91 05       	cpc	r25, r1
    7134:	5c f0       	brlt	.+22     	; 0x714c <normalize+0x108>
    7136:	f7 01       	movw	r30, r14
    7138:	22 85       	ldd	r18, Z+10	; 0x0a
    713a:	33 85       	ldd	r19, Z+11	; 0x0b
    713c:	2f 5f       	subi	r18, 0xFF	; 255
    713e:	3f 4f       	sbci	r19, 0xFF	; 255
    7140:	33 87       	std	Z+11, r19	; 0x0b
    7142:	22 87       	std	Z+10, r18	; 0x0a
    7144:	0c 97       	sbiw	r24, 0x0c	; 12
    7146:	91 87       	std	Z+9, r25	; 0x09
    7148:	80 87       	std	Z+8, r24	; 0x08
    714a:	ef cf       	rjmp	.-34     	; 0x712a <normalize+0xe6>
    714c:	f7 01       	movw	r30, r14
    714e:	80 85       	ldd	r24, Z+8	; 0x08
    7150:	91 85       	ldd	r25, Z+9	; 0x09
    7152:	97 ff       	sbrs	r25, 7
    7154:	2d c0       	rjmp	.+90     	; 0x71b0 <normalize+0x16c>
    7156:	f7 01       	movw	r30, r14
    7158:	22 85       	ldd	r18, Z+10	; 0x0a
    715a:	33 85       	ldd	r19, Z+11	; 0x0b
    715c:	21 50       	subi	r18, 0x01	; 1
    715e:	31 09       	sbc	r19, r1
    7160:	33 87       	std	Z+11, r19	; 0x0b
    7162:	22 87       	std	Z+10, r18	; 0x0a
    7164:	0c 96       	adiw	r24, 0x0c	; 12
    7166:	91 87       	std	Z+9, r25	; 0x09
    7168:	80 87       	std	Z+8, r24	; 0x08
    716a:	f0 cf       	rjmp	.-32     	; 0x714c <normalize+0x108>
    716c:	f7 01       	movw	r30, r14
    716e:	c6 80       	ldd	r12, Z+6	; 0x06
    7170:	d7 80       	ldd	r13, Z+7	; 0x07
    7172:	a0 84       	ldd	r10, Z+8	; 0x08
    7174:	b1 84       	ldd	r11, Z+9	; 0x09
    7176:	b4 01       	movw	r22, r8
    7178:	c5 01       	movw	r24, r10
    717a:	59 dd       	rcall	.-1358   	; 0x6c2e <Days_Per_Month>
    717c:	8c 15       	cp	r24, r12
    717e:	9d 05       	cpc	r25, r13
    7180:	84 f5       	brge	.+96     	; 0x71e2 <normalize+0x19e>
    7182:	c8 1a       	sub	r12, r24
    7184:	d9 0a       	sbc	r13, r25
    7186:	f7 01       	movw	r30, r14
    7188:	d7 82       	std	Z+7, r13	; 0x07
    718a:	c6 82       	std	Z+6, r12	; 0x06
    718c:	c5 01       	movw	r24, r10
    718e:	01 96       	adiw	r24, 0x01	; 1
    7190:	91 87       	std	Z+9, r25	; 0x09
    7192:	80 87       	std	Z+8, r24	; 0x08
    7194:	0c 97       	sbiw	r24, 0x0c	; 12
    7196:	54 f3       	brlt	.-44     	; 0x716c <normalize+0x128>
    7198:	fb e0       	ldi	r31, 0x0B	; 11
    719a:	af 1a       	sub	r10, r31
    719c:	b1 08       	sbc	r11, r1
    719e:	f7 01       	movw	r30, r14
    71a0:	b1 86       	std	Z+9, r11	; 0x09
    71a2:	a0 86       	std	Z+8, r10	; 0x08
    71a4:	ff ef       	ldi	r31, 0xFF	; 255
    71a6:	8f 1a       	sub	r8, r31
    71a8:	9f 0a       	sbc	r9, r31
    71aa:	f7 01       	movw	r30, r14
    71ac:	93 86       	std	Z+11, r9	; 0x0b
    71ae:	82 86       	std	Z+10, r8	; 0x0a
    71b0:	f7 01       	movw	r30, r14
    71b2:	82 84       	ldd	r8, Z+10	; 0x0a
    71b4:	93 84       	ldd	r9, Z+11	; 0x0b
    71b6:	da cf       	rjmp	.-76     	; 0x716c <normalize+0x128>
    71b8:	f7 01       	movw	r30, r14
    71ba:	80 85       	ldd	r24, Z+8	; 0x08
    71bc:	91 85       	ldd	r25, Z+9	; 0x09
    71be:	9c 01       	movw	r18, r24
    71c0:	21 50       	subi	r18, 0x01	; 1
    71c2:	31 09       	sbc	r19, r1
    71c4:	37 fd       	sbrc	r19, 7
    71c6:	16 c0       	rjmp	.+44     	; 0x71f4 <normalize+0x1b0>
    71c8:	31 87       	std	Z+9, r19	; 0x09
    71ca:	20 87       	std	Z+8, r18	; 0x08
    71cc:	f7 01       	movw	r30, r14
    71ce:	62 85       	ldd	r22, Z+10	; 0x0a
    71d0:	73 85       	ldd	r23, Z+11	; 0x0b
    71d2:	80 85       	ldd	r24, Z+8	; 0x08
    71d4:	91 85       	ldd	r25, Z+9	; 0x09
    71d6:	2b dd       	rcall	.-1450   	; 0x6c2e <Days_Per_Month>
    71d8:	88 0d       	add	r24, r8
    71da:	99 1d       	adc	r25, r9
    71dc:	f7 01       	movw	r30, r14
    71de:	97 83       	std	Z+7, r25	; 0x07
    71e0:	86 83       	std	Z+6, r24	; 0x06
    71e2:	f7 01       	movw	r30, r14
    71e4:	86 80       	ldd	r8, Z+6	; 0x06
    71e6:	97 80       	ldd	r9, Z+7	; 0x07
    71e8:	a2 84       	ldd	r10, Z+10	; 0x0a
    71ea:	b3 84       	ldd	r11, Z+11	; 0x0b
    71ec:	18 14       	cp	r1, r8
    71ee:	19 04       	cpc	r1, r9
    71f0:	1c f7       	brge	.-58     	; 0x71b8 <normalize+0x174>
    71f2:	0b c0       	rjmp	.+22     	; 0x720a <normalize+0x1c6>
    71f4:	0b 96       	adiw	r24, 0x0b	; 11
    71f6:	f7 01       	movw	r30, r14
    71f8:	91 87       	std	Z+9, r25	; 0x09
    71fa:	80 87       	std	Z+8, r24	; 0x08
    71fc:	f1 e0       	ldi	r31, 0x01	; 1
    71fe:	af 1a       	sub	r10, r31
    7200:	b1 08       	sbc	r11, r1
    7202:	f7 01       	movw	r30, r14
    7204:	b3 86       	std	Z+11, r11	; 0x0b
    7206:	a2 86       	std	Z+10, r10	; 0x0a
    7208:	e1 cf       	rjmp	.-62     	; 0x71cc <normalize+0x188>
    720a:	a5 01       	movw	r20, r10
    720c:	44 59       	subi	r20, 0x94	; 148
    720e:	58 4f       	sbci	r21, 0xF8	; 248
    7210:	58 87       	std	Y+8, r21	; 0x08
    7212:	4f 83       	std	Y+7, r20	; 0x07
    7214:	35 01       	movw	r6, r10
    7216:	56 e4       	ldi	r21, 0x46	; 70
    7218:	65 1a       	sub	r6, r21
    721a:	71 08       	sbc	r7, r1
    721c:	89 e8       	ldi	r24, 0x89	; 137
    721e:	68 16       	cp	r6, r24
    7220:	71 04       	cpc	r7, r1
    7222:	08 f0       	brcs	.+2      	; 0x7226 <normalize+0x1e2>
    7224:	9b c0       	rjmp	.+310    	; 0x735c <normalize+0x318>
    7226:	c0 84       	ldd	r12, Z+8	; 0x08
    7228:	d1 84       	ldd	r13, Z+9	; 0x09
    722a:	9c e0       	ldi	r25, 0x0C	; 12
    722c:	c9 16       	cp	r12, r25
    722e:	d1 04       	cpc	r13, r1
    7230:	08 f0       	brcs	.+2      	; 0x7234 <normalize+0x1f0>
    7232:	94 c0       	rjmp	.+296    	; 0x735c <normalize+0x318>
    7234:	24 01       	movw	r4, r8
    7236:	e1 e0       	ldi	r30, 0x01	; 1
    7238:	4e 1a       	sub	r4, r30
    723a:	51 08       	sbc	r5, r1
    723c:	6f 81       	ldd	r22, Y+7	; 0x07
    723e:	78 85       	ldd	r23, Y+8	; 0x08
    7240:	c6 01       	movw	r24, r12
    7242:	f5 dc       	rcall	.-1558   	; 0x6c2e <Days_Per_Month>
    7244:	48 16       	cp	r4, r24
    7246:	59 06       	cpc	r5, r25
    7248:	0c f0       	brlt	.+2      	; 0x724c <normalize+0x208>
    724a:	88 c0       	rjmp	.+272    	; 0x735c <normalize+0x318>
    724c:	08 31       	cpi	r16, 0x18	; 24
    724e:	11 05       	cpc	r17, r1
    7250:	0c f0       	brlt	.+2      	; 0x7254 <normalize+0x210>
    7252:	84 c0       	rjmp	.+264    	; 0x735c <normalize+0x318>
    7254:	fc e3       	ldi	r31, 0x3C	; 60
    7256:	2f 16       	cp	r2, r31
    7258:	31 04       	cpc	r3, r1
    725a:	0c f0       	brlt	.+2      	; 0x725e <normalize+0x21a>
    725c:	7f c0       	rjmp	.+254    	; 0x735c <normalize+0x318>
    725e:	4d 81       	ldd	r20, Y+5	; 0x05
    7260:	5e 81       	ldd	r21, Y+6	; 0x06
    7262:	4c 33       	cpi	r20, 0x3C	; 60
    7264:	51 05       	cpc	r21, r1
    7266:	0c f0       	brlt	.+2      	; 0x726a <normalize+0x226>
    7268:	79 c0       	rjmp	.+242    	; 0x735c <normalize+0x318>
    726a:	2d e6       	ldi	r18, 0x6D	; 109
    726c:	31 e0       	ldi	r19, 0x01	; 1
    726e:	d3 01       	movw	r26, r6
    7270:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__usmulhisi3>
    7274:	f6 01       	movw	r30, r12
    7276:	ee 0f       	add	r30, r30
    7278:	ff 1f       	adc	r31, r31
    727a:	ee 58       	subi	r30, 0x8E	; 142
    727c:	fc 4f       	sbci	r31, 0xFC	; 252
    727e:	20 81       	ld	r18, Z
    7280:	31 81       	ldd	r19, Z+1	; 0x01
    7282:	dc 01       	movw	r26, r24
    7284:	cb 01       	movw	r24, r22
    7286:	82 0f       	add	r24, r18
    7288:	93 1f       	adc	r25, r19
    728a:	a1 1d       	adc	r26, r1
    728c:	b1 1d       	adc	r27, r1
    728e:	05 2c       	mov	r0, r5
    7290:	00 0c       	add	r0, r0
    7292:	66 08       	sbc	r6, r6
    7294:	77 08       	sbc	r7, r7
    7296:	48 0e       	add	r4, r24
    7298:	59 1e       	adc	r5, r25
    729a:	6a 1e       	adc	r6, r26
    729c:	7b 1e       	adc	r7, r27
    729e:	1a 14       	cp	r1, r10
    72a0:	1b 04       	cpc	r1, r11
    72a2:	1c f4       	brge	.+6      	; 0x72aa <normalize+0x266>
    72a4:	51 e0       	ldi	r21, 0x01	; 1
    72a6:	a5 1a       	sub	r10, r21
    72a8:	b1 08       	sbc	r11, r1
    72aa:	45 01       	movw	r8, r10
    72ac:	95 94       	asr	r9
    72ae:	87 94       	ror	r8
    72b0:	95 94       	asr	r9
    72b2:	87 94       	ror	r8
    72b4:	88 ec       	ldi	r24, 0xC8	; 200
    72b6:	a8 16       	cp	r10, r24
    72b8:	b1 04       	cpc	r11, r1
    72ba:	1c f0       	brlt	.+6      	; 0x72c2 <normalize+0x27e>
    72bc:	91 e0       	ldi	r25, 0x01	; 1
    72be:	89 1a       	sub	r8, r25
    72c0:	91 08       	sbc	r9, r1
    72c2:	09 2c       	mov	r0, r9
    72c4:	00 0c       	add	r0, r0
    72c6:	aa 08       	sbc	r10, r10
    72c8:	bb 08       	sbc	r11, r11
    72ca:	84 0c       	add	r8, r4
    72cc:	95 1c       	adc	r9, r5
    72ce:	a6 1c       	adc	r10, r6
    72d0:	b7 1c       	adc	r11, r7
    72d2:	24 01       	movw	r4, r8
    72d4:	35 01       	movw	r6, r10
    72d6:	e1 e1       	ldi	r30, 0x11	; 17
    72d8:	4e 1a       	sub	r4, r30
    72da:	51 08       	sbc	r5, r1
    72dc:	61 08       	sbc	r6, r1
    72de:	71 08       	sbc	r7, r1
    72e0:	f2 e0       	ldi	r31, 0x02	; 2
    72e2:	cf 16       	cp	r12, r31
    72e4:	d1 04       	cpc	r13, r1
    72e6:	64 f0       	brlt	.+24     	; 0x7300 <normalize+0x2bc>
    72e8:	8f 81       	ldd	r24, Y+7	; 0x07
    72ea:	98 85       	ldd	r25, Y+8	; 0x08
    72ec:	7b dc       	rcall	.-1802   	; 0x6be4 <IS_Leap>
    72ee:	89 2b       	or	r24, r25
    72f0:	39 f0       	breq	.+14     	; 0x7300 <normalize+0x2bc>
    72f2:	24 01       	movw	r4, r8
    72f4:	35 01       	movw	r6, r10
    72f6:	40 e1       	ldi	r20, 0x10	; 16
    72f8:	44 1a       	sub	r4, r20
    72fa:	51 08       	sbc	r5, r1
    72fc:	61 08       	sbc	r6, r1
    72fe:	71 08       	sbc	r7, r1
    7300:	a8 e1       	ldi	r26, 0x18	; 24
    7302:	b0 e0       	ldi	r27, 0x00	; 0
    7304:	a3 01       	movw	r20, r6
    7306:	92 01       	movw	r18, r4
    7308:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    730c:	01 2e       	mov	r0, r17
    730e:	00 0c       	add	r0, r0
    7310:	22 0b       	sbc	r18, r18
    7312:	33 0b       	sbc	r19, r19
    7314:	a9 01       	movw	r20, r18
    7316:	98 01       	movw	r18, r16
    7318:	26 0f       	add	r18, r22
    731a:	37 1f       	adc	r19, r23
    731c:	48 1f       	adc	r20, r24
    731e:	59 1f       	adc	r21, r25
    7320:	ac e3       	ldi	r26, 0x3C	; 60
    7322:	b0 e0       	ldi	r27, 0x00	; 0
    7324:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    7328:	81 01       	movw	r16, r2
    732a:	03 2c       	mov	r0, r3
    732c:	00 0c       	add	r0, r0
    732e:	22 0b       	sbc	r18, r18
    7330:	33 0b       	sbc	r19, r19
    7332:	a9 01       	movw	r20, r18
    7334:	98 01       	movw	r18, r16
    7336:	26 0f       	add	r18, r22
    7338:	37 1f       	adc	r19, r23
    733a:	48 1f       	adc	r20, r24
    733c:	59 1f       	adc	r21, r25
    733e:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    7342:	ed 81       	ldd	r30, Y+5	; 0x05
    7344:	fe 81       	ldd	r31, Y+6	; 0x06
    7346:	8f 01       	movw	r16, r30
    7348:	ff 0f       	add	r31, r31
    734a:	22 0b       	sbc	r18, r18
    734c:	33 0b       	sbc	r19, r19
    734e:	48 01       	movw	r8, r16
    7350:	59 01       	movw	r10, r18
    7352:	86 0e       	add	r8, r22
    7354:	97 1e       	adc	r9, r23
    7356:	a8 1e       	adc	r10, r24
    7358:	b9 1e       	adc	r11, r25
    735a:	04 c0       	rjmp	.+8      	; 0x7364 <normalize+0x320>
    735c:	88 24       	eor	r8, r8
    735e:	8a 94       	dec	r8
    7360:	98 2c       	mov	r9, r8
    7362:	54 01       	movw	r10, r8
    7364:	49 85       	ldd	r20, Y+9	; 0x09
    7366:	5a 85       	ldd	r21, Y+10	; 0x0a
    7368:	45 2b       	or	r20, r21
    736a:	e9 f0       	breq	.+58     	; 0x73a6 <normalize+0x362>
    736c:	ce 01       	movw	r24, r28
    736e:	01 96       	adiw	r24, 0x01	; 1
    7370:	7d dd       	rcall	.-1286   	; 0x6e6c <gettimezone>
    7372:	a9 81       	ldd	r26, Y+1	; 0x01
    7374:	ba 81       	ldd	r27, Y+2	; 0x02
    7376:	2c e3       	ldi	r18, 0x3C	; 60
    7378:	30 e0       	ldi	r19, 0x00	; 0
    737a:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__usmulhisi3>
    737e:	2b 01       	movw	r4, r22
    7380:	3c 01       	movw	r6, r24
    7382:	c5 01       	movw	r24, r10
    7384:	b4 01       	movw	r22, r8
    7386:	e2 dd       	rcall	.-1084   	; 0x6f4c <is_dst>
    7388:	89 2b       	or	r24, r25
    738a:	51 f0       	breq	.+20     	; 0x73a0 <normalize+0x35c>
    738c:	50 e1       	ldi	r21, 0x10	; 16
    738e:	45 1a       	sub	r4, r21
    7390:	5e e0       	ldi	r21, 0x0E	; 14
    7392:	55 0a       	sbc	r5, r21
    7394:	61 08       	sbc	r6, r1
    7396:	71 08       	sbc	r7, r1
    7398:	cc 24       	eor	r12, r12
    739a:	c3 94       	inc	r12
    739c:	d1 2c       	mov	r13, r1
    739e:	08 c0       	rjmp	.+16     	; 0x73b0 <normalize+0x36c>
    73a0:	c1 2c       	mov	r12, r1
    73a2:	d1 2c       	mov	r13, r1
    73a4:	05 c0       	rjmp	.+10     	; 0x73b0 <normalize+0x36c>
    73a6:	c1 2c       	mov	r12, r1
    73a8:	d1 2c       	mov	r13, r1
    73aa:	41 2c       	mov	r4, r1
    73ac:	51 2c       	mov	r5, r1
    73ae:	32 01       	movw	r6, r4
    73b0:	87 01       	movw	r16, r14
    73b2:	a3 01       	movw	r20, r6
    73b4:	92 01       	movw	r18, r4
    73b6:	c5 01       	movw	r24, r10
    73b8:	b4 01       	movw	r22, r8
    73ba:	5a dc       	rcall	.-1868   	; 0x6c70 <time_to_tm>
    73bc:	c1 14       	cp	r12, r1
    73be:	d1 04       	cpc	r13, r1
    73c0:	29 f0       	breq	.+10     	; 0x73cc <normalize+0x388>
    73c2:	21 e0       	ldi	r18, 0x01	; 1
    73c4:	30 e0       	ldi	r19, 0x00	; 0
    73c6:	f7 01       	movw	r30, r14
    73c8:	31 8b       	std	Z+17, r19	; 0x11
    73ca:	20 8b       	std	Z+16, r18	; 0x10
    73cc:	2a 96       	adiw	r28, 0x0a	; 10
    73ce:	e2 e1       	ldi	r30, 0x12	; 18
    73d0:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

000073d4 <timegm>:
    73d4:	60 e0       	ldi	r22, 0x00	; 0
    73d6:	70 e0       	ldi	r23, 0x00	; 0
    73d8:	35 ce       	rjmp	.-918    	; 0x7044 <normalize>
    73da:	08 95       	ret

000073dc <setdate_r>:
    73dc:	cf 92       	push	r12
    73de:	df 92       	push	r13
    73e0:	ef 92       	push	r14
    73e2:	ff 92       	push	r15
    73e4:	cf 93       	push	r28
    73e6:	df 93       	push	r29
    73e8:	cd b7       	in	r28, 0x3d	; 61
    73ea:	de b7       	in	r29, 0x3e	; 62
    73ec:	a5 97       	sbiw	r28, 0x25	; 37
    73ee:	0f b6       	in	r0, 0x3f	; 63
    73f0:	f8 94       	cli
    73f2:	de bf       	out	0x3e, r29	; 62
    73f4:	0f be       	out	0x3f, r0	; 63
    73f6:	cd bf       	out	0x3d, r28	; 61
    73f8:	9d a3       	std	Y+37, r25	; 0x25
    73fa:	8c a3       	std	Y+36, r24	; 0x24
    73fc:	1f 82       	std	Y+7, r1	; 0x07
    73fe:	1e 82       	std	Y+6, r1	; 0x06
    7400:	19 86       	std	Y+9, r1	; 0x09
    7402:	18 86       	std	Y+8, r1	; 0x08
    7404:	1b 86       	std	Y+11, r1	; 0x0b
    7406:	1a 86       	std	Y+10, r1	; 0x0a
    7408:	1d 86       	std	Y+13, r1	; 0x0d
    740a:	1c 86       	std	Y+12, r1	; 0x0c
    740c:	1f 86       	std	Y+15, r1	; 0x0f
    740e:	1e 86       	std	Y+14, r1	; 0x0e
    7410:	19 8a       	std	Y+17, r1	; 0x11
    7412:	18 8a       	std	Y+16, r1	; 0x10
    7414:	8c a1       	ldd	r24, Y+36	; 0x24
    7416:	9d a1       	ldd	r25, Y+37	; 0x25
    7418:	fc 01       	movw	r30, r24
    741a:	20 81       	ld	r18, Z
    741c:	20 32       	cpi	r18, 0x20	; 32
    741e:	21 f4       	brne	.+8      	; 0x7428 <setdate_r+0x4c>
    7420:	01 96       	adiw	r24, 0x01	; 1
    7422:	9d a3       	std	Y+37, r25	; 0x25
    7424:	8c a3       	std	Y+36, r24	; 0x24
    7426:	f6 cf       	rjmp	.-20     	; 0x7414 <setdate_r+0x38>
    7428:	4a e0       	ldi	r20, 0x0A	; 10
    742a:	50 e0       	ldi	r21, 0x00	; 0
    742c:	be 01       	movw	r22, r28
    742e:	6c 5d       	subi	r22, 0xDC	; 220
    7430:	7f 4f       	sbci	r23, 0xFF	; 255
    7432:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    7436:	79 8b       	std	Y+17, r23	; 0x11
    7438:	68 8b       	std	Y+16, r22	; 0x10
    743a:	8c a1       	ldd	r24, Y+36	; 0x24
    743c:	9d a1       	ldd	r25, Y+37	; 0x25
    743e:	fc 01       	movw	r30, r24
    7440:	20 81       	ld	r18, Z
    7442:	20 32       	cpi	r18, 0x20	; 32
    7444:	21 f4       	brne	.+8      	; 0x744e <setdate_r+0x72>
    7446:	01 96       	adiw	r24, 0x01	; 1
    7448:	9d a3       	std	Y+37, r25	; 0x25
    744a:	8c a3       	std	Y+36, r24	; 0x24
    744c:	f6 cf       	rjmp	.-20     	; 0x743a <setdate_r+0x5e>
    744e:	4a e0       	ldi	r20, 0x0A	; 10
    7450:	50 e0       	ldi	r21, 0x00	; 0
    7452:	be 01       	movw	r22, r28
    7454:	6c 5d       	subi	r22, 0xDC	; 220
    7456:	7f 4f       	sbci	r23, 0xFF	; 255
    7458:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    745c:	7f 87       	std	Y+15, r23	; 0x0f
    745e:	6e 87       	std	Y+14, r22	; 0x0e
    7460:	8c a1       	ldd	r24, Y+36	; 0x24
    7462:	9d a1       	ldd	r25, Y+37	; 0x25
    7464:	fc 01       	movw	r30, r24
    7466:	20 81       	ld	r18, Z
    7468:	20 32       	cpi	r18, 0x20	; 32
    746a:	21 f4       	brne	.+8      	; 0x7474 <setdate_r+0x98>
    746c:	01 96       	adiw	r24, 0x01	; 1
    746e:	9d a3       	std	Y+37, r25	; 0x25
    7470:	8c a3       	std	Y+36, r24	; 0x24
    7472:	f6 cf       	rjmp	.-20     	; 0x7460 <setdate_r+0x84>
    7474:	4a e0       	ldi	r20, 0x0A	; 10
    7476:	50 e0       	ldi	r21, 0x00	; 0
    7478:	be 01       	movw	r22, r28
    747a:	6c 5d       	subi	r22, 0xDC	; 220
    747c:	7f 4f       	sbci	r23, 0xFF	; 255
    747e:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    7482:	7d 87       	std	Y+13, r23	; 0x0d
    7484:	6c 87       	std	Y+12, r22	; 0x0c
    7486:	8c a1       	ldd	r24, Y+36	; 0x24
    7488:	9d a1       	ldd	r25, Y+37	; 0x25
    748a:	fc 01       	movw	r30, r24
    748c:	20 81       	ld	r18, Z
    748e:	20 32       	cpi	r18, 0x20	; 32
    7490:	21 f4       	brne	.+8      	; 0x749a <setdate_r+0xbe>
    7492:	01 96       	adiw	r24, 0x01	; 1
    7494:	9d a3       	std	Y+37, r25	; 0x25
    7496:	8c a3       	std	Y+36, r24	; 0x24
    7498:	f6 cf       	rjmp	.-20     	; 0x7486 <setdate_r+0xaa>
    749a:	4a e0       	ldi	r20, 0x0A	; 10
    749c:	50 e0       	ldi	r21, 0x00	; 0
    749e:	be 01       	movw	r22, r28
    74a0:	6c 5d       	subi	r22, 0xDC	; 220
    74a2:	7f 4f       	sbci	r23, 0xFF	; 255
    74a4:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    74a8:	7b 87       	std	Y+11, r23	; 0x0b
    74aa:	6a 87       	std	Y+10, r22	; 0x0a
    74ac:	ec a1       	ldd	r30, Y+36	; 0x24
    74ae:	fd a1       	ldd	r31, Y+37	; 0x25
    74b0:	80 81       	ld	r24, Z
    74b2:	88 23       	and	r24, r24
    74b4:	39 f0       	breq	.+14     	; 0x74c4 <setdate_r+0xe8>
    74b6:	80 32       	cpi	r24, 0x20	; 32
    74b8:	11 f0       	breq	.+4      	; 0x74be <setdate_r+0xe2>
    74ba:	8a 33       	cpi	r24, 0x3A	; 58
    74bc:	19 f4       	brne	.+6      	; 0x74c4 <setdate_r+0xe8>
    74be:	31 96       	adiw	r30, 0x01	; 1
    74c0:	fd a3       	std	Y+37, r31	; 0x25
    74c2:	ec a3       	std	Y+36, r30	; 0x24
    74c4:	4a e0       	ldi	r20, 0x0A	; 10
    74c6:	50 e0       	ldi	r21, 0x00	; 0
    74c8:	be 01       	movw	r22, r28
    74ca:	6c 5d       	subi	r22, 0xDC	; 220
    74cc:	7f 4f       	sbci	r23, 0xFF	; 255
    74ce:	8c a1       	ldd	r24, Y+36	; 0x24
    74d0:	9d a1       	ldd	r25, Y+37	; 0x25
    74d2:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    74d6:	79 87       	std	Y+9, r23	; 0x09
    74d8:	68 87       	std	Y+8, r22	; 0x08
    74da:	ec a1       	ldd	r30, Y+36	; 0x24
    74dc:	fd a1       	ldd	r31, Y+37	; 0x25
    74de:	80 81       	ld	r24, Z
    74e0:	88 23       	and	r24, r24
    74e2:	39 f0       	breq	.+14     	; 0x74f2 <setdate_r+0x116>
    74e4:	80 32       	cpi	r24, 0x20	; 32
    74e6:	11 f0       	breq	.+4      	; 0x74ec <setdate_r+0x110>
    74e8:	8a 33       	cpi	r24, 0x3A	; 58
    74ea:	19 f4       	brne	.+6      	; 0x74f2 <setdate_r+0x116>
    74ec:	31 96       	adiw	r30, 0x01	; 1
    74ee:	fd a3       	std	Y+37, r31	; 0x25
    74f0:	ec a3       	std	Y+36, r30	; 0x24
    74f2:	4a e0       	ldi	r20, 0x0A	; 10
    74f4:	50 e0       	ldi	r21, 0x00	; 0
    74f6:	be 01       	movw	r22, r28
    74f8:	6c 5d       	subi	r22, 0xDC	; 220
    74fa:	7f 4f       	sbci	r23, 0xFF	; 255
    74fc:	8c a1       	ldd	r24, Y+36	; 0x24
    74fe:	9d a1       	ldd	r25, Y+37	; 0x25
    7500:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
    7504:	7f 83       	std	Y+7, r23	; 0x07
    7506:	6e 83       	std	Y+6, r22	; 0x06
    7508:	2e 85       	ldd	r18, Y+14	; 0x0e
    750a:	3f 85       	ldd	r19, Y+15	; 0x0f
    750c:	21 50       	subi	r18, 0x01	; 1
    750e:	31 09       	sbc	r19, r1
    7510:	3f 87       	std	Y+15, r19	; 0x0f
    7512:	2e 87       	std	Y+14, r18	; 0x0e
    7514:	88 89       	ldd	r24, Y+16	; 0x10
    7516:	99 89       	ldd	r25, Y+17	; 0x11
    7518:	ac 01       	movw	r20, r24
    751a:	42 5b       	subi	r20, 0xB2	; 178
    751c:	57 40       	sbci	r21, 0x07	; 7
    751e:	45 34       	cpi	r20, 0x45	; 69
    7520:	51 05       	cpc	r21, r1
    7522:	38 f0       	brcs	.+14     	; 0x7532 <setdate_r+0x156>
    7524:	ed b7       	in	r30, 0x3d	; 61
    7526:	fe b7       	in	r31, 0x3e	; 62
    7528:	95 83       	std	Z+5, r25	; 0x05
    752a:	84 83       	std	Z+4, r24	; 0x04
    752c:	80 ee       	ldi	r24, 0xE0	; 224
    752e:	96 e0       	ldi	r25, 0x06	; 6
    7530:	34 c0       	rjmp	.+104    	; 0x759a <setdate_r+0x1be>
    7532:	8c 56       	subi	r24, 0x6C	; 108
    7534:	97 40       	sbci	r25, 0x07	; 7
    7536:	99 8b       	std	Y+17, r25	; 0x11
    7538:	88 8b       	std	Y+16, r24	; 0x10
    753a:	2c 30       	cpi	r18, 0x0C	; 12
    753c:	31 05       	cpc	r19, r1
    753e:	38 f0       	brcs	.+14     	; 0x754e <setdate_r+0x172>
    7540:	ed b7       	in	r30, 0x3d	; 61
    7542:	fe b7       	in	r31, 0x3e	; 62
    7544:	95 83       	std	Z+5, r25	; 0x05
    7546:	84 83       	std	Z+4, r24	; 0x04
    7548:	8f ec       	ldi	r24, 0xCF	; 207
    754a:	96 e0       	ldi	r25, 0x06	; 6
    754c:	26 c0       	rjmp	.+76     	; 0x759a <setdate_r+0x1be>
    754e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7550:	9d 85       	ldd	r25, Y+13	; 0x0d
    7552:	9c 01       	movw	r18, r24
    7554:	21 50       	subi	r18, 0x01	; 1
    7556:	31 09       	sbc	r19, r1
    7558:	2f 31       	cpi	r18, 0x1F	; 31
    755a:	31 05       	cpc	r19, r1
    755c:	38 f0       	brcs	.+14     	; 0x756c <setdate_r+0x190>
    755e:	ed b7       	in	r30, 0x3d	; 61
    7560:	fe b7       	in	r31, 0x3e	; 62
    7562:	95 83       	std	Z+5, r25	; 0x05
    7564:	84 83       	std	Z+4, r24	; 0x04
    7566:	8e eb       	ldi	r24, 0xBE	; 190
    7568:	96 e0       	ldi	r25, 0x06	; 6
    756a:	17 c0       	rjmp	.+46     	; 0x759a <setdate_r+0x1be>
    756c:	8a 85       	ldd	r24, Y+10	; 0x0a
    756e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7570:	88 31       	cpi	r24, 0x18	; 24
    7572:	91 05       	cpc	r25, r1
    7574:	38 f0       	brcs	.+14     	; 0x7584 <setdate_r+0x1a8>
    7576:	ed b7       	in	r30, 0x3d	; 61
    7578:	fe b7       	in	r31, 0x3e	; 62
    757a:	95 83       	std	Z+5, r25	; 0x05
    757c:	84 83       	std	Z+4, r24	; 0x04
    757e:	8c ea       	ldi	r24, 0xAC	; 172
    7580:	96 e0       	ldi	r25, 0x06	; 6
    7582:	0b c0       	rjmp	.+22     	; 0x759a <setdate_r+0x1be>
    7584:	88 85       	ldd	r24, Y+8	; 0x08
    7586:	99 85       	ldd	r25, Y+9	; 0x09
    7588:	8c 33       	cpi	r24, 0x3C	; 60
    758a:	91 05       	cpc	r25, r1
    758c:	68 f0       	brcs	.+26     	; 0x75a8 <setdate_r+0x1cc>
    758e:	ed b7       	in	r30, 0x3d	; 61
    7590:	fe b7       	in	r31, 0x3e	; 62
    7592:	95 83       	std	Z+5, r25	; 0x05
    7594:	84 83       	std	Z+4, r24	; 0x04
    7596:	8b e9       	ldi	r24, 0x9B	; 155
    7598:	96 e0       	ldi	r25, 0x06	; 6
    759a:	a0 e0       	ldi	r26, 0x00	; 0
    759c:	81 83       	std	Z+1, r24	; 0x01
    759e:	92 83       	std	Z+2, r25	; 0x02
    75a0:	a3 83       	std	Z+3, r26	; 0x03
    75a2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    75a6:	25 c0       	rjmp	.+74     	; 0x75f2 <setdate_r+0x216>
    75a8:	ce 01       	movw	r24, r28
    75aa:	06 96       	adiw	r24, 0x06	; 6
    75ac:	13 df       	rcall	.-474    	; 0x73d4 <timegm>
    75ae:	6b 01       	movw	r12, r22
    75b0:	7c 01       	movw	r14, r24
    75b2:	6c 8f       	std	Y+28, r22	; 0x1c
    75b4:	7d 8f       	std	Y+29, r23	; 0x1d
    75b6:	8e 8f       	std	Y+30, r24	; 0x1e
    75b8:	9f 8f       	std	Y+31, r25	; 0x1f
    75ba:	18 a2       	std	Y+32, r1	; 0x20
    75bc:	19 a2       	std	Y+33, r1	; 0x21
    75be:	1a a2       	std	Y+34, r1	; 0x22
    75c0:	1b a2       	std	Y+35, r1	; 0x23
    75c2:	be 01       	movw	r22, r28
    75c4:	64 5e       	subi	r22, 0xE4	; 228
    75c6:	7f 4f       	sbci	r23, 0xFF	; 255
    75c8:	80 e0       	ldi	r24, 0x00	; 0
    75ca:	90 e0       	ldi	r25, 0x00	; 0
    75cc:	03 db       	rcall	.-2554   	; 0x6bd4 <clock_settime>
    75ce:	b7 01       	movw	r22, r14
    75d0:	a6 01       	movw	r20, r12
    75d2:	81 e0       	ldi	r24, 0x01	; 1
    75d4:	90 e0       	ldi	r25, 0x00	; 0
    75d6:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <rtc_init>
    75da:	81 11       	cpse	r24, r1
    75dc:	0d c0       	rjmp	.+26     	; 0x75f8 <setdate_r+0x21c>
    75de:	84 e8       	ldi	r24, 0x84	; 132
    75e0:	96 e0       	ldi	r25, 0x06	; 6
    75e2:	a0 e0       	ldi	r26, 0x00	; 0
    75e4:	ed b7       	in	r30, 0x3d	; 61
    75e6:	fe b7       	in	r31, 0x3e	; 62
    75e8:	81 83       	std	Z+1, r24	; 0x01
    75ea:	92 83       	std	Z+2, r25	; 0x02
    75ec:	a3 83       	std	Z+3, r26	; 0x03
    75ee:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    75f2:	8f ef       	ldi	r24, 0xFF	; 255
    75f4:	9f ef       	ldi	r25, 0xFF	; 255
    75f6:	02 c0       	rjmp	.+4      	; 0x75fc <setdate_r+0x220>
    75f8:	80 e0       	ldi	r24, 0x00	; 0
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	a5 96       	adiw	r28, 0x25	; 37
    75fe:	0f b6       	in	r0, 0x3f	; 63
    7600:	f8 94       	cli
    7602:	de bf       	out	0x3e, r29	; 62
    7604:	0f be       	out	0x3f, r0	; 63
    7606:	cd bf       	out	0x3d, r28	; 61
    7608:	df 91       	pop	r29
    760a:	cf 91       	pop	r28
    760c:	ff 90       	pop	r15
    760e:	ef 90       	pop	r14
    7610:	df 90       	pop	r13
    7612:	cf 90       	pop	r12
    7614:	08 95       	ret

00007616 <setdate>:
    7616:	ab e2       	ldi	r26, 0x2B	; 43
    7618:	b0 e0       	ldi	r27, 0x00	; 0
    761a:	e1 e1       	ldi	r30, 0x11	; 17
    761c:	fb e3       	ldi	r31, 0x3B	; 59
    761e:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    7622:	82 ef       	ldi	r24, 0xF2	; 242
    7624:	96 e0       	ldi	r25, 0x06	; 6
    7626:	a0 e0       	ldi	r26, 0x00	; 0
    7628:	ed b7       	in	r30, 0x3d	; 61
    762a:	fe b7       	in	r31, 0x3e	; 62
    762c:	81 83       	std	Z+1, r24	; 0x01
    762e:	92 83       	std	Z+2, r25	; 0x02
    7630:	a3 83       	std	Z+3, r26	; 0x03
    7632:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    7636:	40 91 a0 1c 	lds	r20, 0x1CA0	; 0x801ca0 <__iob>
    763a:	50 91 a1 1c 	lds	r21, 0x1CA1	; 0x801ca1 <__iob+0x1>
    763e:	67 e2       	ldi	r22, 0x27	; 39
    7640:	70 e0       	ldi	r23, 0x00	; 0
    7642:	ce 01       	movw	r24, r28
    7644:	04 96       	adiw	r24, 0x04	; 4
    7646:	0e 94 28 76 	call	0xec50	; 0xec50 <fgets>
    764a:	ce 01       	movw	r24, r28
    764c:	04 96       	adiw	r24, 0x04	; 4
    764e:	c6 de       	rcall	.-628    	; 0x73dc <setdate_r>
    7650:	ab 96       	adiw	r28, 0x2b	; 43
    7652:	e2 e0       	ldi	r30, 0x02	; 2
    7654:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00007658 <find_dst>:
    7658:	a8 e2       	ldi	r26, 0x28	; 40
    765a:	b0 e0       	ldi	r27, 0x00	; 0
    765c:	e2 e3       	ldi	r30, 0x32	; 50
    765e:	fb e3       	ldi	r31, 0x3B	; 59
    7660:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    7664:	3c 01       	movw	r6, r24
    7666:	1a 01       	movw	r2, r20
    7668:	2b 01       	movw	r4, r22
    766a:	49 01       	movw	r8, r18
    766c:	1c a3       	std	Y+36, r17	; 0x24
    766e:	0b a3       	std	Y+35, r16	; 0x23
    7670:	de a2       	std	Y+38, r13	; 0x26
    7672:	cd a2       	std	Y+37, r12	; 0x25
    7674:	b8 a6       	std	Y+40, r11	; 0x28
    7676:	af a2       	std	Y+39, r10	; 0x27
    7678:	be 01       	movw	r22, r28
    767a:	61 5e       	subi	r22, 0xE1	; 225
    767c:	7f 4f       	sbci	r23, 0xFF	; 255
    767e:	ce 01       	movw	r24, r28
    7680:	47 96       	adiw	r24, 0x17	; 23
    7682:	15 dc       	rcall	.-2006   	; 0x6eae <gettimeofday>
    7684:	af 8d       	ldd	r26, Y+31	; 0x1f
    7686:	b8 a1       	ldd	r27, Y+32	; 0x20
    7688:	2c e3       	ldi	r18, 0x3C	; 60
    768a:	30 e0       	ldi	r19, 0x00	; 0
    768c:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__usmulhisi3>
    7690:	5b 01       	movw	r10, r22
    7692:	6c 01       	movw	r12, r24
    7694:	61 14       	cp	r6, r1
    7696:	71 04       	cpc	r7, r1
    7698:	31 f0       	breq	.+12     	; 0x76a6 <find_dst+0x4e>
    769a:	20 e1       	ldi	r18, 0x10	; 16
    769c:	a2 1a       	sub	r10, r18
    769e:	2e e0       	ldi	r18, 0x0E	; 14
    76a0:	b2 0a       	sbc	r11, r18
    76a2:	c1 08       	sbc	r12, r1
    76a4:	d1 08       	sbc	r13, r1
    76a6:	81 14       	cp	r8, r1
    76a8:	91 04       	cpc	r9, r1
    76aa:	39 f0       	breq	.+14     	; 0x76ba <find_dst+0x62>
    76ac:	4c e6       	ldi	r20, 0x6C	; 108
    76ae:	84 1a       	sub	r8, r20
    76b0:	47 e0       	ldi	r20, 0x07	; 7
    76b2:	94 0a       	sbc	r9, r20
    76b4:	9c 86       	std	Y+12, r9	; 0x0c
    76b6:	8b 86       	std	Y+11, r8	; 0x0b
    76b8:	11 c0       	rjmp	.+34     	; 0x76dc <find_dst+0x84>
    76ba:	21 14       	cp	r2, r1
    76bc:	31 04       	cpc	r3, r1
    76be:	41 04       	cpc	r4, r1
    76c0:	51 04       	cpc	r5, r1
    76c2:	21 f4       	brne	.+8      	; 0x76cc <find_dst+0x74>
    76c4:	2f 88       	ldd	r2, Y+23	; 0x17
    76c6:	38 8c       	ldd	r3, Y+24	; 0x18
    76c8:	49 8c       	ldd	r4, Y+25	; 0x19
    76ca:	5a 8c       	ldd	r5, Y+26	; 0x1a
    76cc:	8e 01       	movw	r16, r28
    76ce:	0f 5f       	subi	r16, 0xFF	; 255
    76d0:	1f 4f       	sbci	r17, 0xFF	; 255
    76d2:	a6 01       	movw	r20, r12
    76d4:	95 01       	movw	r18, r10
    76d6:	c2 01       	movw	r24, r4
    76d8:	b1 01       	movw	r22, r2
    76da:	ca da       	rcall	.-2668   	; 0x6c70 <time_to_tm>
    76dc:	8b a1       	ldd	r24, Y+35	; 0x23
    76de:	9c a1       	ldd	r25, Y+36	; 0x24
    76e0:	01 97       	sbiw	r24, 0x01	; 1
    76e2:	9a 87       	std	Y+10, r25	; 0x0a
    76e4:	89 87       	std	Y+9, r24	; 0x09
    76e6:	81 e0       	ldi	r24, 0x01	; 1
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	98 87       	std	Y+8, r25	; 0x08
    76ec:	8f 83       	std	Y+7, r24	; 0x07
    76ee:	8f a1       	ldd	r24, Y+39	; 0x27
    76f0:	98 a5       	ldd	r25, Y+40	; 0x28
    76f2:	9e 83       	std	Y+6, r25	; 0x06
    76f4:	8d 83       	std	Y+5, r24	; 0x05
    76f6:	1c 82       	std	Y+4, r1	; 0x04
    76f8:	1b 82       	std	Y+3, r1	; 0x03
    76fa:	1a 82       	std	Y+2, r1	; 0x02
    76fc:	19 82       	std	Y+1, r1	; 0x01
    76fe:	ce 01       	movw	r24, r28
    7700:	01 96       	adiw	r24, 0x01	; 1
    7702:	68 de       	rcall	.-816    	; 0x73d4 <timegm>
    7704:	45 01       	movw	r8, r10
    7706:	56 01       	movw	r10, r12
    7708:	86 0e       	add	r8, r22
    770a:	97 1e       	adc	r9, r23
    770c:	a8 1e       	adc	r10, r24
    770e:	b9 1e       	adc	r11, r25
    7710:	8e 01       	movw	r16, r28
    7712:	0f 5f       	subi	r16, 0xFF	; 255
    7714:	1f 4f       	sbci	r17, 0xFF	; 255
    7716:	20 e0       	ldi	r18, 0x00	; 0
    7718:	30 e0       	ldi	r19, 0x00	; 0
    771a:	a9 01       	movw	r20, r18
    771c:	c5 01       	movw	r24, r10
    771e:	b4 01       	movw	r22, r8
    7720:	a7 da       	rcall	.-2738   	; 0x6c70 <time_to_tm>
    7722:	2d 85       	ldd	r18, Y+13	; 0x0d
    7724:	3e 85       	ldd	r19, Y+14	; 0x0e
    7726:	e7 e0       	ldi	r30, 0x07	; 7
    7728:	f0 e0       	ldi	r31, 0x00	; 0
    772a:	c9 01       	movw	r24, r18
    772c:	bf 01       	movw	r22, r30
    772e:	0e 94 11 e0 	call	0x1c022	; 0x1c022 <__divmodhi4>
    7732:	4d a1       	ldd	r20, Y+37	; 0x25
    7734:	5e a1       	ldd	r21, Y+38	; 0x26
    7736:	48 17       	cp	r20, r24
    7738:	59 07       	cpc	r21, r25
    773a:	21 f4       	brne	.+8      	; 0x7744 <find_dst+0xec>
    773c:	51 e0       	ldi	r21, 0x01	; 1
    773e:	e5 1a       	sub	r14, r21
    7740:	f1 08       	sbc	r15, r1
    7742:	51 f0       	breq	.+20     	; 0x7758 <find_dst+0x100>
    7744:	80 e8       	ldi	r24, 0x80	; 128
    7746:	88 0e       	add	r8, r24
    7748:	81 e5       	ldi	r24, 0x51	; 81
    774a:	98 1e       	adc	r9, r24
    774c:	81 e0       	ldi	r24, 0x01	; 1
    774e:	a8 1e       	adc	r10, r24
    7750:	b1 1c       	adc	r11, r1
    7752:	2f 5f       	subi	r18, 0xFF	; 255
    7754:	3f 4f       	sbci	r19, 0xFF	; 255
    7756:	e9 cf       	rjmp	.-46     	; 0x772a <find_dst+0xd2>
    7758:	c5 01       	movw	r24, r10
    775a:	b4 01       	movw	r22, r8
    775c:	a8 96       	adiw	r28, 0x28	; 40
    775e:	e2 e1       	ldi	r30, 0x12	; 18
    7760:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00007764 <set_dst>:
    7764:	4f 92       	push	r4
    7766:	5f 92       	push	r5
    7768:	6f 92       	push	r6
    776a:	7f 92       	push	r7
    776c:	af 92       	push	r10
    776e:	bf 92       	push	r11
    7770:	cf 92       	push	r12
    7772:	df 92       	push	r13
    7774:	ef 92       	push	r14
    7776:	ff 92       	push	r15
    7778:	0f 93       	push	r16
    777a:	1f 93       	push	r17
    777c:	cf 93       	push	r28
    777e:	df 93       	push	r29
    7780:	cd b7       	in	r28, 0x3d	; 61
    7782:	de b7       	in	r29, 0x3e	; 62
    7784:	2c 97       	sbiw	r28, 0x0c	; 12
    7786:	0f b6       	in	r0, 0x3f	; 63
    7788:	f8 94       	cli
    778a:	de bf       	out	0x3e, r29	; 62
    778c:	0f be       	out	0x3f, r0	; 63
    778e:	cd bf       	out	0x3d, r28	; 61
    7790:	2b 01       	movw	r4, r22
    7792:	3c 01       	movw	r6, r24
    7794:	67 2b       	or	r22, r23
    7796:	68 2b       	or	r22, r24
    7798:	69 2b       	or	r22, r25
    779a:	51 f4       	brne	.+20     	; 0x77b0 <set_dst+0x4c>
    779c:	be 01       	movw	r22, r28
    779e:	67 5f       	subi	r22, 0xF7	; 247
    77a0:	7f 4f       	sbci	r23, 0xFF	; 255
    77a2:	ce 01       	movw	r24, r28
    77a4:	01 96       	adiw	r24, 0x01	; 1
    77a6:	83 db       	rcall	.-2298   	; 0x6eae <gettimeofday>
    77a8:	49 80       	ldd	r4, Y+1	; 0x01
    77aa:	5a 80       	ldd	r5, Y+2	; 0x02
    77ac:	6b 80       	ldd	r6, Y+3	; 0x03
    77ae:	7c 80       	ldd	r7, Y+4	; 0x04
    77b0:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <dst+0x8>
    77b4:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <dst+0x9>
    77b8:	a0 91 59 1a 	lds	r26, 0x1A59	; 0x801a59 <dst+0xa>
    77bc:	b0 91 5a 1a 	lds	r27, 0x1A5A	; 0x801a5a <dst+0xb>
    77c0:	84 15       	cp	r24, r4
    77c2:	95 05       	cpc	r25, r5
    77c4:	a6 05       	cpc	r26, r6
    77c6:	b7 05       	cpc	r27, r7
    77c8:	50 f0       	brcs	.+20     	; 0x77de <set_dst+0x7a>
    77ca:	84 19       	sub	r24, r4
    77cc:	95 09       	sbc	r25, r5
    77ce:	a6 09       	sbc	r26, r6
    77d0:	b7 09       	sbc	r27, r7
    77d2:	80 38       	cpi	r24, 0x80	; 128
    77d4:	91 45       	sbci	r25, 0x51	; 81
    77d6:	a1 40       	sbci	r26, 0x01	; 1
    77d8:	b1 05       	cpc	r27, r1
    77da:	70 f4       	brcc	.+28     	; 0x77f8 <set_dst+0x94>
    77dc:	42 c0       	rjmp	.+132    	; 0x7862 <set_dst+0xfe>
    77de:	a3 01       	movw	r20, r6
    77e0:	92 01       	movw	r18, r4
    77e2:	28 1b       	sub	r18, r24
    77e4:	39 0b       	sbc	r19, r25
    77e6:	4a 0b       	sbc	r20, r26
    77e8:	5b 0b       	sbc	r21, r27
    77ea:	da 01       	movw	r26, r20
    77ec:	c9 01       	movw	r24, r18
    77ee:	80 38       	cpi	r24, 0x80	; 128
    77f0:	91 45       	sbci	r25, 0x51	; 81
    77f2:	a1 40       	sbci	r26, 0x01	; 1
    77f4:	b1 05       	cpc	r27, r1
    77f6:	a8 f1       	brcs	.+106    	; 0x7862 <set_dst+0xfe>
    77f8:	40 92 57 1a 	sts	0x1A57, r4	; 0x801a57 <dst+0x8>
    77fc:	50 92 58 1a 	sts	0x1A58, r5	; 0x801a58 <dst+0x9>
    7800:	60 92 59 1a 	sts	0x1A59, r6	; 0x801a59 <dst+0xa>
    7804:	70 92 5a 1a 	sts	0x1A5A, r7	; 0x801a5a <dst+0xb>
    7808:	82 e0       	ldi	r24, 0x02	; 2
    780a:	a8 2e       	mov	r10, r24
    780c:	b1 2c       	mov	r11, r1
    780e:	c1 2c       	mov	r12, r1
    7810:	d1 2c       	mov	r13, r1
    7812:	92 e0       	ldi	r25, 0x02	; 2
    7814:	e9 2e       	mov	r14, r25
    7816:	f1 2c       	mov	r15, r1
    7818:	03 e0       	ldi	r16, 0x03	; 3
    781a:	10 e0       	ldi	r17, 0x00	; 0
    781c:	20 e0       	ldi	r18, 0x00	; 0
    781e:	30 e0       	ldi	r19, 0x00	; 0
    7820:	b3 01       	movw	r22, r6
    7822:	a2 01       	movw	r20, r4
    7824:	80 e0       	ldi	r24, 0x00	; 0
    7826:	90 e0       	ldi	r25, 0x00	; 0
    7828:	17 df       	rcall	.-466    	; 0x7658 <find_dst>
    782a:	60 93 4f 1a 	sts	0x1A4F, r22	; 0x801a4f <dst>
    782e:	70 93 50 1a 	sts	0x1A50, r23	; 0x801a50 <dst+0x1>
    7832:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <dst+0x2>
    7836:	90 93 52 1a 	sts	0x1A52, r25	; 0x801a52 <dst+0x3>
    783a:	ee 24       	eor	r14, r14
    783c:	e3 94       	inc	r14
    783e:	f1 2c       	mov	r15, r1
    7840:	0b e0       	ldi	r16, 0x0B	; 11
    7842:	10 e0       	ldi	r17, 0x00	; 0
    7844:	20 e0       	ldi	r18, 0x00	; 0
    7846:	30 e0       	ldi	r19, 0x00	; 0
    7848:	b3 01       	movw	r22, r6
    784a:	a2 01       	movw	r20, r4
    784c:	81 e0       	ldi	r24, 0x01	; 1
    784e:	90 e0       	ldi	r25, 0x00	; 0
    7850:	03 df       	rcall	.-506    	; 0x7658 <find_dst>
    7852:	60 93 53 1a 	sts	0x1A53, r22	; 0x801a53 <dst+0x4>
    7856:	70 93 54 1a 	sts	0x1A54, r23	; 0x801a54 <dst+0x5>
    785a:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <dst+0x6>
    785e:	90 93 56 1a 	sts	0x1A56, r25	; 0x801a56 <dst+0x7>
    7862:	2c 96       	adiw	r28, 0x0c	; 12
    7864:	0f b6       	in	r0, 0x3f	; 63
    7866:	f8 94       	cli
    7868:	de bf       	out	0x3e, r29	; 62
    786a:	0f be       	out	0x3f, r0	; 63
    786c:	cd bf       	out	0x3d, r28	; 61
    786e:	df 91       	pop	r29
    7870:	cf 91       	pop	r28
    7872:	1f 91       	pop	r17
    7874:	0f 91       	pop	r16
    7876:	ff 90       	pop	r15
    7878:	ef 90       	pop	r14
    787a:	df 90       	pop	r13
    787c:	cf 90       	pop	r12
    787e:	bf 90       	pop	r11
    7880:	af 90       	pop	r10
    7882:	7f 90       	pop	r7
    7884:	6f 90       	pop	r6
    7886:	5f 90       	pop	r5
    7888:	4f 90       	pop	r4
    788a:	08 95       	ret

0000788c <asctime_r>:
    788c:	a5 e1       	ldi	r26, 0x15	; 21
    788e:	b0 e0       	ldi	r27, 0x00	; 0
    7890:	ec e4       	ldi	r30, 0x4C	; 76
    7892:	fc e3       	ldi	r31, 0x3C	; 60
    7894:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    7898:	ec 01       	movw	r28, r24
    789a:	8b 01       	movw	r16, r22
    789c:	60 e0       	ldi	r22, 0x00	; 0
    789e:	70 e0       	ldi	r23, 0x00	; 0
    78a0:	d1 db       	rcall	.-2142   	; 0x7044 <normalize>
    78a2:	80 e2       	ldi	r24, 0x20	; 32
    78a4:	f8 01       	movw	r30, r16
    78a6:	11 92       	st	Z+, r1
    78a8:	8a 95       	dec	r24
    78aa:	e9 f7       	brne	.-6      	; 0x78a6 <asctime_r+0x1a>
    78ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    78ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    78b0:	84 59       	subi	r24, 0x94	; 148
    78b2:	98 4f       	sbci	r25, 0xF8	; 248
    78b4:	ed b7       	in	r30, 0x3d	; 61
    78b6:	fe b7       	in	r31, 0x3e	; 62
    78b8:	95 8b       	std	Z+21, r25	; 0x15
    78ba:	84 8b       	std	Z+20, r24	; 0x14
    78bc:	88 81       	ld	r24, Y
    78be:	99 81       	ldd	r25, Y+1	; 0x01
    78c0:	93 8b       	std	Z+19, r25	; 0x13
    78c2:	82 8b       	std	Z+18, r24	; 0x12
    78c4:	8a 81       	ldd	r24, Y+2	; 0x02
    78c6:	9b 81       	ldd	r25, Y+3	; 0x03
    78c8:	91 8b       	std	Z+17, r25	; 0x11
    78ca:	80 8b       	std	Z+16, r24	; 0x10
    78cc:	8c 81       	ldd	r24, Y+4	; 0x04
    78ce:	9d 81       	ldd	r25, Y+5	; 0x05
    78d0:	97 87       	std	Z+15, r25	; 0x0f
    78d2:	86 87       	std	Z+14, r24	; 0x0e
    78d4:	8e 81       	ldd	r24, Y+6	; 0x06
    78d6:	9f 81       	ldd	r25, Y+7	; 0x07
    78d8:	95 87       	std	Z+13, r25	; 0x0d
    78da:	84 87       	std	Z+12, r24	; 0x0c
    78dc:	e8 85       	ldd	r30, Y+8	; 0x08
    78de:	f9 85       	ldd	r31, Y+9	; 0x09
    78e0:	ee 0f       	add	r30, r30
    78e2:	ff 1f       	adc	r31, r31
    78e4:	e8 5e       	subi	r30, 0xE8	; 232
    78e6:	fe 4f       	sbci	r31, 0xFE	; 254
    78e8:	80 81       	ld	r24, Z
    78ea:	91 81       	ldd	r25, Z+1	; 0x01
    78ec:	ed b7       	in	r30, 0x3d	; 61
    78ee:	fe b7       	in	r31, 0x3e	; 62
    78f0:	93 87       	std	Z+11, r25	; 0x0b
    78f2:	82 87       	std	Z+10, r24	; 0x0a
    78f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    78f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    78f8:	ee 0f       	add	r30, r30
    78fa:	ff 1f       	adc	r31, r31
    78fc:	ee 5c       	subi	r30, 0xCE	; 206
    78fe:	fe 4f       	sbci	r31, 0xFE	; 254
    7900:	80 81       	ld	r24, Z
    7902:	91 81       	ldd	r25, Z+1	; 0x01
    7904:	ed b7       	in	r30, 0x3d	; 61
    7906:	fe b7       	in	r31, 0x3e	; 62
    7908:	91 87       	std	Z+9, r25	; 0x09
    790a:	80 87       	std	Z+8, r24	; 0x08
    790c:	83 e1       	ldi	r24, 0x13	; 19
    790e:	97 e0       	ldi	r25, 0x07	; 7
    7910:	a0 e0       	ldi	r26, 0x00	; 0
    7912:	85 83       	std	Z+5, r24	; 0x05
    7914:	96 83       	std	Z+6, r25	; 0x06
    7916:	a7 83       	std	Z+7, r26	; 0x07
    7918:	80 e2       	ldi	r24, 0x20	; 32
    791a:	90 e0       	ldi	r25, 0x00	; 0
    791c:	94 83       	std	Z+4, r25	; 0x04
    791e:	83 83       	std	Z+3, r24	; 0x03
    7920:	12 83       	std	Z+2, r17	; 0x02
    7922:	01 83       	std	Z+1, r16	; 0x01
    7924:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <snprintf_P>
    7928:	c8 01       	movw	r24, r16
    792a:	cd b7       	in	r28, 0x3d	; 61
    792c:	de b7       	in	r29, 0x3e	; 62
    792e:	65 96       	adiw	r28, 0x15	; 21
    7930:	e4 e0       	ldi	r30, 0x04	; 4
    7932:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00007936 <asctime>:
    7936:	67 ee       	ldi	r22, 0xE7	; 231
    7938:	77 e1       	ldi	r23, 0x17	; 23
    793a:	a8 cf       	rjmp	.-176    	; 0x788c <asctime_r>
    793c:	08 95       	ret

0000793e <ctime_gm>:
    793e:	a6 e1       	ldi	r26, 0x16	; 22
    7940:	b0 e0       	ldi	r27, 0x00	; 0
    7942:	e5 ea       	ldi	r30, 0xA5	; 165
    7944:	fc e3       	ldi	r31, 0x3C	; 60
    7946:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    794a:	be 01       	movw	r22, r28
    794c:	6f 5f       	subi	r22, 0xFF	; 255
    794e:	7f 4f       	sbci	r23, 0xFF	; 255
    7950:	6d da       	rcall	.-2854   	; 0x6e2c <gmtime_r>
    7952:	67 ec       	ldi	r22, 0xC7	; 199
    7954:	77 e1       	ldi	r23, 0x17	; 23
    7956:	9a df       	rcall	.-204    	; 0x788c <asctime_r>
    7958:	66 96       	adiw	r28, 0x16	; 22
    795a:	e2 e0       	ldi	r30, 0x02	; 2
    795c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00007960 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7960:	a5 e2       	ldi	r26, 0x25	; 37
    7962:	b0 e0       	ldi	r27, 0x00	; 0
    7964:	e6 eb       	ldi	r30, 0xB6	; 182
    7966:	fc e3       	ldi	r31, 0x3C	; 60
    7968:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    796c:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    796e:	40 e0       	ldi	r20, 0x00	; 0
    7970:	50 e0       	ldi	r21, 0x00	; 0
    7972:	ba 01       	movw	r22, r20
    7974:	80 e0       	ldi	r24, 0x00	; 0
    7976:	90 e0       	ldi	r25, 0x00	; 0
    7978:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <rtc_init>
    797c:	81 11       	cpse	r24, r1
    797e:	27 c0       	rjmp	.+78     	; 0x79ce <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7980:	82 e7       	ldi	r24, 0x72	; 114
    7982:	96 e0       	ldi	r25, 0x06	; 6
    7984:	a0 e0       	ldi	r26, 0x00	; 0
    7986:	ed b7       	in	r30, 0x3d	; 61
    7988:	fe b7       	in	r31, 0x3e	; 62
    798a:	81 83       	std	Z+1, r24	; 0x01
    798c:	92 83       	std	Z+2, r25	; 0x02
    798e:	a3 83       	std	Z+3, r26	; 0x03
    7990:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("attempting rtc init\n");
    7994:	8d e5       	ldi	r24, 0x5D	; 93
    7996:	96 e0       	ldi	r25, 0x06	; 6
    7998:	a0 e0       	ldi	r26, 0x00	; 0
    799a:	ed b7       	in	r30, 0x3d	; 61
    799c:	fe b7       	in	r31, 0x3e	; 62
    799e:	81 83       	std	Z+1, r24	; 0x01
    79a0:	92 83       	std	Z+2, r25	; 0x02
    79a2:	a3 83       	std	Z+3, r26	; 0x03
    79a4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    79a8:	40 e0       	ldi	r20, 0x00	; 0
    79aa:	50 e0       	ldi	r21, 0x00	; 0
    79ac:	ba 01       	movw	r22, r20
    79ae:	81 e0       	ldi	r24, 0x01	; 1
    79b0:	90 e0       	ldi	r25, 0x00	; 0
    79b2:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <rtc_init>
    79b6:	81 11       	cpse	r24, r1
    79b8:	0a c0       	rjmp	.+20     	; 0x79ce <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    79ba:	86 e4       	ldi	r24, 0x46	; 70
    79bc:	96 e0       	ldi	r25, 0x06	; 6
    79be:	a0 e0       	ldi	r26, 0x00	; 0
    79c0:	ed b7       	in	r30, 0x3d	; 61
    79c2:	fe b7       	in	r31, 0x3e	; 62
    79c4:	81 83       	std	Z+1, r24	; 0x01
    79c6:	92 83       	std	Z+2, r25	; 0x02
    79c8:	a3 83       	std	Z+3, r26	; 0x03
    79ca:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        }
    }

    if(rtc_read(&tc))
    79ce:	ce 01       	movw	r24, r28
    79d0:	04 96       	adiw	r24, 0x04	; 4
    79d2:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <rtc_read>
    79d6:	88 23       	and	r24, r24
    79d8:	51 f0       	breq	.+20     	; 0x79ee <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    79da:	ce 01       	movw	r24, r28
    79dc:	04 96       	adiw	r24, 0x04	; 4
    79de:	fa dc       	rcall	.-1548   	; 0x73d4 <timegm>
    79e0:	6b 01       	movw	r12, r22
    79e2:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    79e4:	67 2b       	or	r22, r23
    79e6:	68 2b       	or	r22, r24
    79e8:	69 2b       	or	r22, r25
    79ea:	c1 f4       	brne	.+48     	; 0x7a1c <initialize_clock+0xbc>
    79ec:	0a c0       	rjmp	.+20     	; 0x7a02 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    79ee:	8c e2       	ldi	r24, 0x2C	; 44
    79f0:	96 e0       	ldi	r25, 0x06	; 6
    79f2:	a0 e0       	ldi	r26, 0x00	; 0
    79f4:	ed b7       	in	r30, 0x3d	; 61
    79f6:	fe b7       	in	r31, 0x3e	; 62
    79f8:	81 83       	std	Z+1, r24	; 0x01
    79fa:	92 83       	std	Z+2, r25	; 0x02
    79fc:	a3 83       	std	Z+3, r26	; 0x03
    79fe:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7a02:	88 e0       	ldi	r24, 0x08	; 8
    7a04:	96 e0       	ldi	r25, 0x06	; 6
    7a06:	a0 e0       	ldi	r26, 0x00	; 0
    7a08:	ed b7       	in	r30, 0x3d	; 61
    7a0a:	fe b7       	in	r31, 0x3e	; 62
    7a0c:	81 83       	std	Z+1, r24	; 0x01
    7a0e:	92 83       	std	Z+2, r25	; 0x02
    7a10:	a3 83       	std	Z+3, r26	; 0x03
    7a12:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    7a16:	c1 2c       	mov	r12, r1
    7a18:	d1 2c       	mov	r13, r1
    7a1a:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7a1c:	1b a3       	std	Y+35, r17	; 0x23
    7a1e:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7a20:	1d a2       	std	Y+37, r1	; 0x25
    7a22:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7a24:	ce 01       	movw	r24, r28
    7a26:	82 96       	adiw	r24, 0x22	; 34
    7a28:	30 da       	rcall	.-2976   	; 0x6e8a <settimezone>

    ts.tv_sec = seconds;
    7a2a:	ca 8e       	std	Y+26, r12	; 0x1a
    7a2c:	db 8e       	std	Y+27, r13	; 0x1b
    7a2e:	ec 8e       	std	Y+28, r14	; 0x1c
    7a30:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7a32:	1e 8e       	std	Y+30, r1	; 0x1e
    7a34:	1f 8e       	std	Y+31, r1	; 0x1f
    7a36:	18 a2       	std	Y+32, r1	; 0x20
    7a38:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7a3a:	be 01       	movw	r22, r28
    7a3c:	66 5e       	subi	r22, 0xE6	; 230
    7a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a40:	80 e0       	ldi	r24, 0x00	; 0
    7a42:	90 e0       	ldi	r25, 0x00	; 0
    7a44:	c7 d8       	rcall	.-3698   	; 0x6bd4 <clock_settime>
}
    7a46:	a5 96       	adiw	r28, 0x25	; 37
    7a48:	e8 e0       	ldi	r30, 0x08	; 8
    7a4a:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

00007a4e <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7a4e:	a9 e2       	ldi	r26, 0x29	; 41
    7a50:	b0 e0       	ldi	r27, 0x00	; 0
    7a52:	ed e2       	ldi	r30, 0x2D	; 45
    7a54:	fd e3       	ldi	r31, 0x3D	; 61
    7a56:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7a5a:	ce 01       	movw	r24, r28
    7a5c:	08 96       	adiw	r24, 0x08	; 8
    7a5e:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <rtc_read>
    7a62:	88 23       	and	r24, r24
    7a64:	29 f1       	breq	.+74     	; 0x7ab0 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7a66:	ce 01       	movw	r24, r28
    7a68:	08 96       	adiw	r24, 0x08	; 8
    7a6a:	b4 dc       	rcall	.-1688   	; 0x73d4 <timegm>
    7a6c:	6e a3       	std	Y+38, r22	; 0x26
    7a6e:	7f a3       	std	Y+39, r23	; 0x27
    7a70:	88 a7       	std	Y+40, r24	; 0x28
    7a72:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7a74:	ed b7       	in	r30, 0x3d	; 61
    7a76:	fe b7       	in	r31, 0x3e	; 62
    7a78:	64 83       	std	Z+4, r22	; 0x04
    7a7a:	75 83       	std	Z+5, r23	; 0x05
    7a7c:	86 83       	std	Z+6, r24	; 0x06
    7a7e:	97 83       	std	Z+7, r25	; 0x07
    7a80:	86 ef       	ldi	r24, 0xF6	; 246
    7a82:	95 e0       	ldi	r25, 0x05	; 5
    7a84:	a0 e0       	ldi	r26, 0x00	; 0
    7a86:	81 83       	std	Z+1, r24	; 0x01
    7a88:	92 83       	std	Z+2, r25	; 0x02
    7a8a:	a3 83       	std	Z+3, r26	; 0x03
    7a8c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7a90:	ce 01       	movw	r24, r28
    7a92:	08 96       	adiw	r24, 0x08	; 8
    7a94:	50 df       	rcall	.-352    	; 0x7936 <asctime>
    7a96:	ed b7       	in	r30, 0x3d	; 61
    7a98:	fe b7       	in	r31, 0x3e	; 62
    7a9a:	95 83       	std	Z+5, r25	; 0x05
    7a9c:	84 83       	std	Z+4, r24	; 0x04
    7a9e:	85 ee       	ldi	r24, 0xE5	; 229
    7aa0:	95 e0       	ldi	r25, 0x05	; 5
    7aa2:	a0 e0       	ldi	r26, 0x00	; 0
    7aa4:	81 83       	std	Z+1, r24	; 0x01
    7aa6:	92 83       	std	Z+2, r25	; 0x02
    7aa8:	a3 83       	std	Z+3, r26	; 0x03
    7aaa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    7aae:	0a c0       	rjmp	.+20     	; 0x7ac4 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7ab0:	84 ed       	ldi	r24, 0xD4	; 212
    7ab2:	95 e0       	ldi	r25, 0x05	; 5
    7ab4:	a0 e0       	ldi	r26, 0x00	; 0
    7ab6:	ed b7       	in	r30, 0x3d	; 61
    7ab8:	fe b7       	in	r31, 0x3e	; 62
    7aba:	81 83       	std	Z+1, r24	; 0x01
    7abc:	92 83       	std	Z+2, r25	; 0x02
    7abe:	a3 83       	std	Z+3, r26	; 0x03
    7ac0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7ac4:	be 01       	movw	r22, r28
    7ac6:	62 5e       	subi	r22, 0xE2	; 226
    7ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aca:	80 e0       	ldi	r24, 0x00	; 0
    7acc:	90 e0       	ldi	r25, 0x00	; 0
    7ace:	0e 94 41 33 	call	0x6682	; 0x6682 <clock_gettime>
    seconds = ts.tv_sec;
    7ad2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7ad4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7ad6:	a8 a1       	ldd	r26, Y+32	; 0x20
    7ad8:	b9 a1       	ldd	r27, Y+33	; 0x21
    7ada:	8e a3       	std	Y+38, r24	; 0x26
    7adc:	9f a3       	std	Y+39, r25	; 0x27
    7ade:	a8 a7       	std	Y+40, r26	; 0x28
    7ae0:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7ae2:	ed b7       	in	r30, 0x3d	; 61
    7ae4:	fe b7       	in	r31, 0x3e	; 62
    7ae6:	84 83       	std	Z+4, r24	; 0x04
    7ae8:	95 83       	std	Z+5, r25	; 0x05
    7aea:	a6 83       	std	Z+6, r26	; 0x06
    7aec:	b7 83       	std	Z+7, r27	; 0x07
    7aee:	82 ec       	ldi	r24, 0xC2	; 194
    7af0:	95 e0       	ldi	r25, 0x05	; 5
    7af2:	a0 e0       	ldi	r26, 0x00	; 0
    7af4:	81 83       	std	Z+1, r24	; 0x01
    7af6:	92 83       	std	Z+2, r25	; 0x02
    7af8:	a3 83       	std	Z+3, r26	; 0x03
    7afa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7afe:	ce 01       	movw	r24, r28
    7b00:	86 96       	adiw	r24, 0x26	; 38
    7b02:	a9 d9       	rcall	.-3246   	; 0x6e56 <gmtime>
    7b04:	18 df       	rcall	.-464    	; 0x7936 <asctime>
    7b06:	ed b7       	in	r30, 0x3d	; 61
    7b08:	fe b7       	in	r31, 0x3e	; 62
    7b0a:	95 83       	std	Z+5, r25	; 0x05
    7b0c:	84 83       	std	Z+4, r24	; 0x04
    7b0e:	81 eb       	ldi	r24, 0xB1	; 177
    7b10:	95 e0       	ldi	r25, 0x05	; 5
    7b12:	a0 e0       	ldi	r26, 0x00	; 0
    7b14:	81 83       	std	Z+1, r24	; 0x01
    7b16:	92 83       	std	Z+2, r25	; 0x02
    7b18:	a3 83       	std	Z+3, r26	; 0x03
    7b1a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
}
    7b1e:	a9 96       	adiw	r28, 0x29	; 41
    7b20:	e2 e0       	ldi	r30, 0x02	; 2
    7b22:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00007b26 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7b26:	fc 01       	movw	r30, r24
    7b28:	84 81       	ldd	r24, Z+4	; 0x04
    7b2a:	95 81       	ldd	r25, Z+5	; 0x05
    7b2c:	00 97       	sbiw	r24, 0x00	; 0
    7b2e:	79 f0       	breq	.+30     	; 0x7b4e <_putc_buffer_fn+0x28>
    7b30:	66 23       	and	r22, r22
    7b32:	69 f0       	breq	.+26     	; 0x7b4e <_putc_buffer_fn+0x28>
    7b34:	01 97       	sbiw	r24, 0x01	; 1
    7b36:	95 83       	std	Z+5, r25	; 0x05
    7b38:	84 83       	std	Z+4, r24	; 0x04
    7b3a:	86 81       	ldd	r24, Z+6	; 0x06
    7b3c:	97 81       	ldd	r25, Z+7	; 0x07
    7b3e:	01 96       	adiw	r24, 0x01	; 1
    7b40:	97 83       	std	Z+7, r25	; 0x07
    7b42:	86 83       	std	Z+6, r24	; 0x06
    7b44:	a2 81       	ldd	r26, Z+2	; 0x02
    7b46:	b3 81       	ldd	r27, Z+3	; 0x03
    7b48:	6d 93       	st	X+, r22
    7b4a:	b3 83       	std	Z+3, r27	; 0x03
    7b4c:	a2 83       	std	Z+2, r26	; 0x02
    7b4e:	02 80       	ldd	r0, Z+2	; 0x02
    7b50:	f3 81       	ldd	r31, Z+3	; 0x03
    7b52:	e0 2d       	mov	r30, r0
    7b54:	10 82       	st	Z, r1
    7b56:	08 95       	ret

00007b58 <_putc_fn>:
    7b58:	fc 01       	movw	r30, r24
    7b5a:	26 81       	ldd	r18, Z+6	; 0x06
    7b5c:	37 81       	ldd	r19, Z+7	; 0x07
    7b5e:	2f 5f       	subi	r18, 0xFF	; 255
    7b60:	3f 4f       	sbci	r19, 0xFF	; 255
    7b62:	37 83       	std	Z+7, r19	; 0x07
    7b64:	26 83       	std	Z+6, r18	; 0x06
    7b66:	86 2f       	mov	r24, r22
    7b68:	90 e0       	ldi	r25, 0x00	; 0
    7b6a:	0c 94 22 76 	jmp	0xec44	; 0xec44 <putchar>
    7b6e:	08 95       	ret

00007b70 <bin2num>:
    7b70:	a0 e0       	ldi	r26, 0x00	; 0
    7b72:	b0 e0       	ldi	r27, 0x00	; 0
    7b74:	ee eb       	ldi	r30, 0xBE	; 190
    7b76:	fd e3       	ldi	r31, 0x3D	; 61
    7b78:	0c 94 98 e0 	jmp	0x1c130	; 0x1c130 <__prologue_saves__+0xe>
    7b7c:	ea 01       	movw	r28, r20
    7b7e:	53 e0       	ldi	r21, 0x03	; 3
    7b80:	ee 0c       	add	r14, r14
    7b82:	ff 1c       	adc	r15, r15
    7b84:	5a 95       	dec	r21
    7b86:	e1 f7       	brne	.-8      	; 0x7b80 <bin2num+0x10>
    7b88:	fc 01       	movw	r30, r24
    7b8a:	af 01       	movw	r20, r30
    7b8c:	48 1b       	sub	r20, r24
    7b8e:	59 0b       	sbc	r21, r25
    7b90:	c4 17       	cp	r28, r20
    7b92:	d5 07       	cpc	r29, r21
    7b94:	14 f0       	brlt	.+4      	; 0x7b9a <bin2num+0x2a>
    7b96:	11 92       	st	Z+, r1
    7b98:	f8 cf       	rjmp	.-16     	; 0x7b8a <bin2num+0x1a>
    7b9a:	41 e0       	ldi	r20, 0x01	; 1
    7b9c:	e4 1a       	sub	r14, r20
    7b9e:	f1 08       	sbc	r15, r1
    7ba0:	5b 01       	movw	r10, r22
    7ba2:	42 e0       	ldi	r20, 0x02	; 2
    7ba4:	a4 1a       	sub	r10, r20
    7ba6:	b1 08       	sbc	r11, r1
    7ba8:	f7 fc       	sbrc	r15, 7
    7baa:	3b c0       	rjmp	.+118    	; 0x7c22 <bin2num+0xb2>
    7bac:	f7 01       	movw	r30, r14
    7bae:	43 e0       	ldi	r20, 0x03	; 3
    7bb0:	f5 95       	asr	r31
    7bb2:	e7 95       	ror	r30
    7bb4:	4a 95       	dec	r20
    7bb6:	e1 f7       	brne	.-8      	; 0x7bb0 <bin2num+0x40>
    7bb8:	e0 0f       	add	r30, r16
    7bba:	f1 1f       	adc	r31, r17
    7bbc:	40 81       	ld	r20, Z
    7bbe:	50 e0       	ldi	r21, 0x00	; 0
    7bc0:	f7 01       	movw	r30, r14
    7bc2:	e7 70       	andi	r30, 0x07	; 7
    7bc4:	ff 27       	eor	r31, r31
    7bc6:	02 c0       	rjmp	.+4      	; 0x7bcc <bin2num+0x5c>
    7bc8:	55 95       	asr	r21
    7bca:	47 95       	ror	r20
    7bcc:	ea 95       	dec	r30
    7bce:	e2 f7       	brpl	.-8      	; 0x7bc8 <bin2num+0x58>
    7bd0:	41 70       	andi	r20, 0x01	; 1
    7bd2:	55 27       	eor	r21, r21
    7bd4:	dc 01       	movw	r26, r24
    7bd6:	e0 e0       	ldi	r30, 0x00	; 0
    7bd8:	f0 e0       	ldi	r31, 0x00	; 0
    7bda:	ec 17       	cp	r30, r28
    7bdc:	fd 07       	cpc	r31, r29
    7bde:	ec f4       	brge	.+58     	; 0x7c1a <bin2num+0xaa>
    7be0:	ea 15       	cp	r30, r10
    7be2:	fb 05       	cpc	r31, r11
    7be4:	4c f0       	brlt	.+18     	; 0x7bf8 <bin2num+0x88>
    7be6:	dc 01       	movw	r26, r24
    7be8:	ae 0f       	add	r26, r30
    7bea:	bf 1f       	adc	r27, r31
    7bec:	1c 92       	st	X, r1
    7bee:	41 e0       	ldi	r20, 0x01	; 1
    7bf0:	e4 1a       	sub	r14, r20
    7bf2:	f1 08       	sbc	r15, r1
    7bf4:	ef 01       	movw	r28, r30
    7bf6:	d8 cf       	rjmp	.-80     	; 0x7ba8 <bin2num+0x38>
    7bf8:	9c 90       	ld	r9, X
    7bfa:	99 0c       	add	r9, r9
    7bfc:	94 2a       	or	r9, r20
    7bfe:	49 2d       	mov	r20, r9
    7c00:	50 e0       	ldi	r21, 0x00	; 0
    7c02:	42 17       	cp	r20, r18
    7c04:	53 07       	cpc	r21, r19
    7c06:	24 f0       	brlt	.+8      	; 0x7c10 <bin2num+0xa0>
    7c08:	92 1a       	sub	r9, r18
    7c0a:	41 e0       	ldi	r20, 0x01	; 1
    7c0c:	50 e0       	ldi	r21, 0x00	; 0
    7c0e:	02 c0       	rjmp	.+4      	; 0x7c14 <bin2num+0xa4>
    7c10:	40 e0       	ldi	r20, 0x00	; 0
    7c12:	50 e0       	ldi	r21, 0x00	; 0
    7c14:	9d 92       	st	X+, r9
    7c16:	31 96       	adiw	r30, 0x01	; 1
    7c18:	e0 cf       	rjmp	.-64     	; 0x7bda <bin2num+0x6a>
    7c1a:	41 15       	cp	r20, r1
    7c1c:	51 05       	cpc	r21, r1
    7c1e:	01 f7       	brne	.-64     	; 0x7be0 <bin2num+0x70>
    7c20:	e2 cf       	rjmp	.-60     	; 0x7be6 <bin2num+0x76>
    7c22:	fc 01       	movw	r30, r24
    7c24:	9f 01       	movw	r18, r30
    7c26:	28 1b       	sub	r18, r24
    7c28:	39 0b       	sbc	r19, r25
    7c2a:	2c 17       	cp	r18, r28
    7c2c:	3d 07       	cpc	r19, r29
    7c2e:	4c f4       	brge	.+18     	; 0x7c42 <bin2num+0xd2>
    7c30:	20 81       	ld	r18, Z
    7c32:	2a 30       	cpi	r18, 0x0A	; 10
    7c34:	10 f4       	brcc	.+4      	; 0x7c3a <bin2num+0xca>
    7c36:	20 5d       	subi	r18, 0xD0	; 208
    7c38:	01 c0       	rjmp	.+2      	; 0x7c3c <bin2num+0xcc>
    7c3a:	29 5a       	subi	r18, 0xA9	; 169
    7c3c:	20 83       	st	Z, r18
    7c3e:	31 96       	adiw	r30, 0x01	; 1
    7c40:	f1 cf       	rjmp	.-30     	; 0x7c24 <bin2num+0xb4>
    7c42:	9e 01       	movw	r18, r28
    7c44:	d7 ff       	sbrs	r29, 7
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <bin2num+0xdc>
    7c48:	20 e0       	ldi	r18, 0x00	; 0
    7c4a:	30 e0       	ldi	r19, 0x00	; 0
    7c4c:	c1 14       	cp	r12, r1
    7c4e:	d1 04       	cpc	r13, r1
    7c50:	61 f0       	breq	.+24     	; 0x7c6a <bin2num+0xfa>
    7c52:	61 50       	subi	r22, 0x01	; 1
    7c54:	71 09       	sbc	r23, r1
    7c56:	26 17       	cp	r18, r22
    7c58:	37 07       	cpc	r19, r23
    7c5a:	3c f4       	brge	.+14     	; 0x7c6a <bin2num+0xfa>
    7c5c:	fc 01       	movw	r30, r24
    7c5e:	e2 0f       	add	r30, r18
    7c60:	f3 1f       	adc	r31, r19
    7c62:	c0 82       	st	Z, r12
    7c64:	21 96       	adiw	r28, 0x01	; 1
    7c66:	2f 5f       	subi	r18, 0xFF	; 255
    7c68:	3f 4f       	sbci	r19, 0xFF	; 255
    7c6a:	fc 01       	movw	r30, r24
    7c6c:	e2 0f       	add	r30, r18
    7c6e:	f3 1f       	adc	r31, r19
    7c70:	10 82       	st	Z, r1
    7c72:	0e 94 f8 30 	call	0x61f0	; 0x61f0 <reverse>
    7c76:	ce 01       	movw	r24, r28
    7c78:	cd b7       	in	r28, 0x3d	; 61
    7c7a:	de b7       	in	r29, 0x3e	; 62
    7c7c:	eb e0       	ldi	r30, 0x0B	; 11
    7c7e:	0c 94 b4 e0 	jmp	0x1c168	; 0x1c168 <__epilogue_restores__+0xe>

00007c82 <pch_init>:
    7c82:	eb e5       	ldi	r30, 0x5B	; 91
    7c84:	fa e1       	ldi	r31, 0x1A	; 26
    7c86:	91 83       	std	Z+1, r25	; 0x01
    7c88:	80 83       	st	Z, r24
    7c8a:	13 82       	std	Z+3, r1	; 0x03
    7c8c:	12 82       	std	Z+2, r1	; 0x02
    7c8e:	61 50       	subi	r22, 0x01	; 1
    7c90:	71 09       	sbc	r23, r1
    7c92:	75 83       	std	Z+5, r23	; 0x05
    7c94:	64 83       	std	Z+4, r22	; 0x04
    7c96:	fc 01       	movw	r30, r24
    7c98:	10 82       	st	Z, r1
    7c9a:	08 95       	ret

00007c9c <pch>:
    7c9c:	20 91 5d 1a 	lds	r18, 0x1A5D	; 0x801a5d <_pch+0x2>
    7ca0:	30 91 5e 1a 	lds	r19, 0x1A5E	; 0x801a5e <_pch+0x3>
    7ca4:	60 91 5f 1a 	lds	r22, 0x1A5F	; 0x801a5f <_pch+0x4>
    7ca8:	70 91 60 1a 	lds	r23, 0x1A60	; 0x801a60 <_pch+0x5>
    7cac:	40 91 5b 1a 	lds	r20, 0x1A5B	; 0x801a5b <_pch>
    7cb0:	50 91 5c 1a 	lds	r21, 0x1A5C	; 0x801a5c <_pch+0x1>
    7cb4:	26 17       	cp	r18, r22
    7cb6:	37 07       	cpc	r19, r23
    7cb8:	64 f4       	brge	.+24     	; 0x7cd2 <pch+0x36>
    7cba:	b9 01       	movw	r22, r18
    7cbc:	6f 5f       	subi	r22, 0xFF	; 255
    7cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    7cc0:	70 93 5e 1a 	sts	0x1A5E, r23	; 0x801a5e <_pch+0x3>
    7cc4:	60 93 5d 1a 	sts	0x1A5D, r22	; 0x801a5d <_pch+0x2>
    7cc8:	fa 01       	movw	r30, r20
    7cca:	e2 0f       	add	r30, r18
    7ccc:	f3 1f       	adc	r31, r19
    7cce:	80 83       	st	Z, r24
    7cd0:	04 c0       	rjmp	.+8      	; 0x7cda <pch+0x3e>
    7cd2:	fa 01       	movw	r30, r20
    7cd4:	e2 0f       	add	r30, r18
    7cd6:	f3 1f       	adc	r31, r19
    7cd8:	10 82       	st	Z, r1
    7cda:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <_pch+0x2>
    7cde:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <_pch+0x3>
    7ce2:	08 95       	ret

00007ce4 <p_ntoa>:
    7ce4:	af 92       	push	r10
    7ce6:	cf 92       	push	r12
    7ce8:	df 92       	push	r13
    7cea:	ef 92       	push	r14
    7cec:	ff 92       	push	r15
    7cee:	0f 93       	push	r16
    7cf0:	1f 93       	push	r17
    7cf2:	cf 93       	push	r28
    7cf4:	df 93       	push	r29
    7cf6:	dc 01       	movw	r26, r24
    7cf8:	eb 01       	movw	r28, r22
    7cfa:	fa 01       	movw	r30, r20
    7cfc:	b9 01       	movw	r22, r18
    7cfe:	98 01       	movw	r18, r16
    7d00:	a6 01       	movw	r20, r12
    7d02:	9a 2d       	mov	r25, r10
    7d04:	a5 fa       	bst	r10, 5
    7d06:	cc 24       	eor	r12, r12
    7d08:	c0 f8       	bld	r12, 0
    7d0a:	a6 fc       	sbrc	r10, 6
    7d0c:	07 c0       	rjmp	.+14     	; 0x7d1c <p_ntoa+0x38>
    7d0e:	a2 fc       	sbrc	r10, 2
    7d10:	08 c0       	rjmp	.+16     	; 0x7d22 <p_ntoa+0x3e>
    7d12:	a4 fe       	sbrs	r10, 4
    7d14:	09 c0       	rjmp	.+18     	; 0x7d28 <p_ntoa+0x44>
    7d16:	00 e2       	ldi	r16, 0x20	; 32
    7d18:	10 e0       	ldi	r17, 0x00	; 0
    7d1a:	08 c0       	rjmp	.+16     	; 0x7d2c <p_ntoa+0x48>
    7d1c:	0d e2       	ldi	r16, 0x2D	; 45
    7d1e:	10 e0       	ldi	r17, 0x00	; 0
    7d20:	05 c0       	rjmp	.+10     	; 0x7d2c <p_ntoa+0x48>
    7d22:	0b e2       	ldi	r16, 0x2B	; 43
    7d24:	10 e0       	ldi	r17, 0x00	; 0
    7d26:	02 c0       	rjmp	.+4      	; 0x7d2c <p_ntoa+0x48>
    7d28:	00 e0       	ldi	r16, 0x00	; 0
    7d2a:	10 e0       	ldi	r17, 0x00	; 0
    7d2c:	95 ff       	sbrs	r25, 5
    7d2e:	04 c0       	rjmp	.+8      	; 0x7d38 <p_ntoa+0x54>
    7d30:	89 2f       	mov	r24, r25
    7d32:	8a 70       	andi	r24, 0x0A	; 10
    7d34:	09 f0       	breq	.+2      	; 0x7d38 <p_ntoa+0x54>
    7d36:	c1 2c       	mov	r12, r1
    7d38:	c0 fa       	bst	r12, 0
    7d3a:	95 f9       	bld	r25, 5
    7d3c:	89 2f       	mov	r24, r25
    7d3e:	82 70       	andi	r24, 0x02	; 2
    7d40:	c8 2e       	mov	r12, r24
    7d42:	91 fd       	sbrc	r25, 1
    7d44:	02 c0       	rjmp	.+4      	; 0x7d4a <p_ntoa+0x66>
    7d46:	40 e0       	ldi	r20, 0x00	; 0
    7d48:	50 e0       	ldi	r21, 0x00	; 0
    7d4a:	89 2f       	mov	r24, r25
    7d4c:	83 70       	andi	r24, 0x03	; 3
    7d4e:	11 f4       	brne	.+4      	; 0x7d54 <p_ntoa+0x70>
    7d50:	41 e0       	ldi	r20, 0x01	; 1
    7d52:	50 e0       	ldi	r21, 0x00	; 0
    7d54:	90 ff       	sbrs	r25, 0
    7d56:	0c c0       	rjmp	.+24     	; 0x7d70 <p_ntoa+0x8c>
    7d58:	95 fd       	sbrc	r25, 5
    7d5a:	05 c0       	rjmp	.+10     	; 0x7d66 <p_ntoa+0x82>
    7d5c:	c1 10       	cpse	r12, r1
    7d5e:	08 c0       	rjmp	.+16     	; 0x7d70 <p_ntoa+0x8c>
    7d60:	41 e0       	ldi	r20, 0x01	; 1
    7d62:	50 e0       	ldi	r21, 0x00	; 0
    7d64:	05 c0       	rjmp	.+10     	; 0x7d70 <p_ntoa+0x8c>
    7d66:	94 75       	andi	r25, 0x54	; 84
    7d68:	a7 01       	movw	r20, r14
    7d6a:	11 f0       	breq	.+4      	; 0x7d70 <p_ntoa+0x8c>
    7d6c:	41 50       	subi	r20, 0x01	; 1
    7d6e:	51 09       	sbc	r21, r1
    7d70:	68 01       	movw	r12, r16
    7d72:	7e 01       	movw	r14, r28
    7d74:	8d 01       	movw	r16, r26
    7d76:	cf 01       	movw	r24, r30
    7d78:	fb de       	rcall	.-522    	; 0x7b70 <bin2num>
    7d7a:	df 91       	pop	r29
    7d7c:	cf 91       	pop	r28
    7d7e:	1f 91       	pop	r17
    7d80:	0f 91       	pop	r16
    7d82:	ff 90       	pop	r15
    7d84:	ef 90       	pop	r14
    7d86:	df 90       	pop	r13
    7d88:	cf 90       	pop	r12
    7d8a:	af 90       	pop	r10
    7d8c:	08 95       	ret

00007d8e <p_ftoa>:
    7d8e:	2f 92       	push	r2
    7d90:	3f 92       	push	r3
    7d92:	4f 92       	push	r4
    7d94:	5f 92       	push	r5
    7d96:	6f 92       	push	r6
    7d98:	7f 92       	push	r7
    7d9a:	8f 92       	push	r8
    7d9c:	9f 92       	push	r9
    7d9e:	af 92       	push	r10
    7da0:	bf 92       	push	r11
    7da2:	cf 92       	push	r12
    7da4:	ef 92       	push	r14
    7da6:	ff 92       	push	r15
    7da8:	0f 93       	push	r16
    7daa:	1f 93       	push	r17
    7dac:	cf 93       	push	r28
    7dae:	df 93       	push	r29
    7db0:	4b 01       	movw	r8, r22
    7db2:	5c 01       	movw	r10, r24
    7db4:	1a 01       	movw	r2, r20
    7db6:	38 01       	movw	r6, r16
    7db8:	c6 fa       	bst	r12, 6
    7dba:	cc 27       	eor	r28, r28
    7dbc:	c0 f9       	bld	r28, 0
    7dbe:	b9 01       	movw	r22, r18
    7dc0:	ca 01       	movw	r24, r20
    7dc2:	5f df       	rcall	.-322    	; 0x7c82 <pch_init>
    7dc4:	20 e0       	ldi	r18, 0x00	; 0
    7dc6:	30 e0       	ldi	r19, 0x00	; 0
    7dc8:	a9 01       	movw	r20, r18
    7dca:	c5 01       	movw	r24, r10
    7dcc:	b4 01       	movw	r22, r8
    7dce:	0e 94 4f e1 	call	0x1c29e	; 0x1c29e <__cmpsf2>
    7dd2:	87 ff       	sbrs	r24, 7
    7dd4:	05 c0       	rjmp	.+10     	; 0x7de0 <p_ftoa+0x52>
    7dd6:	b7 fa       	bst	r11, 7
    7dd8:	b0 94       	com	r11
    7dda:	b7 f8       	bld	r11, 7
    7ddc:	b0 94       	com	r11
    7dde:	c1 e0       	ldi	r28, 0x01	; 1
    7de0:	c0 fb       	bst	r28, 0
    7de2:	c6 f8       	bld	r12, 6
    7de4:	c6 fe       	sbrs	r12, 6
    7de6:	02 c0       	rjmp	.+4      	; 0x7dec <p_ftoa+0x5e>
    7de8:	8d e2       	ldi	r24, 0x2D	; 45
    7dea:	07 c0       	rjmp	.+14     	; 0x7dfa <p_ftoa+0x6c>
    7dec:	c2 fe       	sbrs	r12, 2
    7dee:	02 c0       	rjmp	.+4      	; 0x7df4 <p_ftoa+0x66>
    7df0:	8b e2       	ldi	r24, 0x2B	; 43
    7df2:	03 c0       	rjmp	.+6      	; 0x7dfa <p_ftoa+0x6c>
    7df4:	c4 fe       	sbrs	r12, 4
    7df6:	02 c0       	rjmp	.+4      	; 0x7dfc <p_ftoa+0x6e>
    7df8:	80 e2       	ldi	r24, 0x20	; 32
    7dfa:	50 df       	rcall	.-352    	; 0x7c9c <pch>
    7dfc:	e7 01       	movw	r28, r14
    7dfe:	f7 fe       	sbrs	r15, 7
    7e00:	02 c0       	rjmp	.+4      	; 0x7e06 <p_ftoa+0x78>
    7e02:	c0 e0       	ldi	r28, 0x00	; 0
    7e04:	d0 e0       	ldi	r29, 0x00	; 0
    7e06:	20 e0       	ldi	r18, 0x00	; 0
    7e08:	30 e0       	ldi	r19, 0x00	; 0
    7e0a:	a9 01       	movw	r20, r18
    7e0c:	c5 01       	movw	r24, r10
    7e0e:	b4 01       	movw	r22, r8
    7e10:	0e 94 4f e1 	call	0x1c29e	; 0x1c29e <__cmpsf2>
    7e14:	88 23       	and	r24, r24
    7e16:	d1 f1       	breq	.+116    	; 0x7e8c <p_ftoa+0xfe>
    7e18:	c1 fe       	sbrs	r12, 1
    7e1a:	11 c0       	rjmp	.+34     	; 0x7e3e <p_ftoa+0xb0>
    7e1c:	8e 01       	movw	r16, r28
    7e1e:	60 e0       	ldi	r22, 0x00	; 0
    7e20:	70 e0       	ldi	r23, 0x00	; 0
    7e22:	80 e0       	ldi	r24, 0x00	; 0
    7e24:	9f e3       	ldi	r25, 0x3F	; 63
    7e26:	01 15       	cp	r16, r1
    7e28:	11 05       	cpc	r17, r1
    7e2a:	69 f0       	breq	.+26     	; 0x7e46 <p_ftoa+0xb8>
    7e2c:	20 e0       	ldi	r18, 0x00	; 0
    7e2e:	30 e0       	ldi	r19, 0x00	; 0
    7e30:	40 e2       	ldi	r20, 0x20	; 32
    7e32:	51 e4       	ldi	r21, 0x41	; 65
    7e34:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    7e38:	01 50       	subi	r16, 0x01	; 1
    7e3a:	11 09       	sbc	r17, r1
    7e3c:	f4 cf       	rjmp	.-24     	; 0x7e26 <p_ftoa+0x98>
    7e3e:	60 e0       	ldi	r22, 0x00	; 0
    7e40:	70 e0       	ldi	r23, 0x00	; 0
    7e42:	80 e0       	ldi	r24, 0x00	; 0
    7e44:	9f e3       	ldi	r25, 0x3F	; 63
    7e46:	9b 01       	movw	r18, r22
    7e48:	ac 01       	movw	r20, r24
    7e4a:	c5 01       	movw	r24, r10
    7e4c:	b4 01       	movw	r22, r8
    7e4e:	0e 94 eb e0 	call	0x1c1d6	; 0x1c1d6 <__addsf3>
    7e52:	4b 01       	movw	r8, r22
    7e54:	5c 01       	movw	r10, r24
    7e56:	ee 24       	eor	r14, r14
    7e58:	e3 94       	inc	r14
    7e5a:	f1 2c       	mov	r15, r1
    7e5c:	20 e0       	ldi	r18, 0x00	; 0
    7e5e:	30 e0       	ldi	r19, 0x00	; 0
    7e60:	40 e2       	ldi	r20, 0x20	; 32
    7e62:	51 e4       	ldi	r21, 0x41	; 65
    7e64:	c5 01       	movw	r24, r10
    7e66:	b4 01       	movw	r22, r8
    7e68:	0e 94 9e e2 	call	0x1c53c	; 0x1c53c <__gesf2>
    7e6c:	87 fd       	sbrc	r24, 7
    7e6e:	11 c0       	rjmp	.+34     	; 0x7e92 <p_ftoa+0x104>
    7e70:	2f ef       	ldi	r18, 0xFF	; 255
    7e72:	e2 1a       	sub	r14, r18
    7e74:	f2 0a       	sbc	r15, r18
    7e76:	20 e0       	ldi	r18, 0x00	; 0
    7e78:	30 e0       	ldi	r19, 0x00	; 0
    7e7a:	40 e2       	ldi	r20, 0x20	; 32
    7e7c:	51 e4       	ldi	r21, 0x41	; 65
    7e7e:	c5 01       	movw	r24, r10
    7e80:	b4 01       	movw	r22, r8
    7e82:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    7e86:	4b 01       	movw	r8, r22
    7e88:	5c 01       	movw	r10, r24
    7e8a:	e8 cf       	rjmp	.-48     	; 0x7e5c <p_ftoa+0xce>
    7e8c:	ee 24       	eor	r14, r14
    7e8e:	e3 94       	inc	r14
    7e90:	f1 2c       	mov	r15, r1
    7e92:	8c 2d       	mov	r24, r12
    7e94:	88 72       	andi	r24, 0x28	; 40
    7e96:	80 32       	cpi	r24, 0x20	; 32
    7e98:	b9 f4       	brne	.+46     	; 0x7ec8 <p_ftoa+0x13a>
    7e9a:	83 01       	movw	r16, r6
    7e9c:	0e 19       	sub	r16, r14
    7e9e:	1f 09       	sbc	r17, r15
    7ea0:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <_pch+0x2>
    7ea4:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <_pch+0x3>
    7ea8:	08 1b       	sub	r16, r24
    7eaa:	19 0b       	sbc	r17, r25
    7eac:	c1 fe       	sbrs	r12, 1
    7eae:	06 c0       	rjmp	.+12     	; 0x7ebc <p_ftoa+0x12e>
    7eb0:	20 97       	sbiw	r28, 0x00	; 0
    7eb2:	21 f0       	breq	.+8      	; 0x7ebc <p_ftoa+0x12e>
    7eb4:	0c 1b       	sub	r16, r28
    7eb6:	1d 0b       	sbc	r17, r29
    7eb8:	01 50       	subi	r16, 0x01	; 1
    7eba:	11 09       	sbc	r17, r1
    7ebc:	10 16       	cp	r1, r16
    7ebe:	11 06       	cpc	r1, r17
    7ec0:	1c f4       	brge	.+6      	; 0x7ec8 <p_ftoa+0x13a>
    7ec2:	80 e3       	ldi	r24, 0x30	; 48
    7ec4:	eb de       	rcall	.-554    	; 0x7c9c <pch>
    7ec6:	f8 cf       	rjmp	.-16     	; 0x7eb8 <p_ftoa+0x12a>
    7ec8:	c5 01       	movw	r24, r10
    7eca:	b4 01       	movw	r22, r8
    7ecc:	0e 94 bb e1 	call	0x1c376	; 0x1c376 <__fixsfsi>
    7ed0:	2b 01       	movw	r4, r22
    7ed2:	3c 01       	movw	r6, r24
    7ed4:	80 e3       	ldi	r24, 0x30	; 48
    7ed6:	84 0d       	add	r24, r4
    7ed8:	e1 de       	rcall	.-574    	; 0x7c9c <pch>
    7eda:	b2 01       	movw	r22, r4
    7edc:	55 0c       	add	r5, r5
    7ede:	88 0b       	sbc	r24, r24
    7ee0:	99 0b       	sbc	r25, r25
    7ee2:	0e 94 ee e1 	call	0x1c3dc	; 0x1c3dc <__floatsisf>
    7ee6:	9b 01       	movw	r18, r22
    7ee8:	ac 01       	movw	r20, r24
    7eea:	c5 01       	movw	r24, r10
    7eec:	b4 01       	movw	r22, r8
    7eee:	0e 94 ea e0 	call	0x1c1d4	; 0x1c1d4 <__subsf3>
    7ef2:	21 e0       	ldi	r18, 0x01	; 1
    7ef4:	e2 1a       	sub	r14, r18
    7ef6:	f1 08       	sbc	r15, r1
    7ef8:	20 e0       	ldi	r18, 0x00	; 0
    7efa:	30 e0       	ldi	r19, 0x00	; 0
    7efc:	40 e2       	ldi	r20, 0x20	; 32
    7efe:	51 e4       	ldi	r21, 0x41	; 65
    7f00:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    7f04:	4b 01       	movw	r8, r22
    7f06:	5c 01       	movw	r10, r24
    7f08:	e1 14       	cp	r14, r1
    7f0a:	f1 04       	cpc	r15, r1
    7f0c:	e9 f6       	brne	.-70     	; 0x7ec8 <p_ftoa+0x13a>
    7f0e:	c1 fc       	sbrc	r12, 1
    7f10:	1c c0       	rjmp	.+56     	; 0x7f4a <p_ftoa+0x1bc>
    7f12:	80 e0       	ldi	r24, 0x00	; 0
    7f14:	c3 de       	rcall	.-634    	; 0x7c9c <pch>
    7f16:	f1 01       	movw	r30, r2
    7f18:	01 90       	ld	r0, Z+
    7f1a:	00 20       	and	r0, r0
    7f1c:	e9 f7       	brne	.-6      	; 0x7f18 <p_ftoa+0x18a>
    7f1e:	31 97       	sbiw	r30, 0x01	; 1
    7f20:	cf 01       	movw	r24, r30
    7f22:	82 19       	sub	r24, r2
    7f24:	93 09       	sbc	r25, r3
    7f26:	df 91       	pop	r29
    7f28:	cf 91       	pop	r28
    7f2a:	1f 91       	pop	r17
    7f2c:	0f 91       	pop	r16
    7f2e:	ff 90       	pop	r15
    7f30:	ef 90       	pop	r14
    7f32:	cf 90       	pop	r12
    7f34:	bf 90       	pop	r11
    7f36:	af 90       	pop	r10
    7f38:	9f 90       	pop	r9
    7f3a:	8f 90       	pop	r8
    7f3c:	7f 90       	pop	r7
    7f3e:	6f 90       	pop	r6
    7f40:	5f 90       	pop	r5
    7f42:	4f 90       	pop	r4
    7f44:	3f 90       	pop	r3
    7f46:	2f 90       	pop	r2
    7f48:	08 95       	ret
    7f4a:	20 97       	sbiw	r28, 0x00	; 0
    7f4c:	11 f3       	breq	.-60     	; 0x7f12 <p_ftoa+0x184>
    7f4e:	8e e2       	ldi	r24, 0x2E	; 46
    7f50:	a5 de       	rcall	.-694    	; 0x7c9c <pch>
    7f52:	c5 01       	movw	r24, r10
    7f54:	b4 01       	movw	r22, r8
    7f56:	0e 94 bb e1 	call	0x1c376	; 0x1c376 <__fixsfsi>
    7f5a:	2b 01       	movw	r4, r22
    7f5c:	3c 01       	movw	r6, r24
    7f5e:	07 2e       	mov	r0, r23
    7f60:	00 0c       	add	r0, r0
    7f62:	88 0b       	sbc	r24, r24
    7f64:	99 0b       	sbc	r25, r25
    7f66:	0e 94 ee e1 	call	0x1c3dc	; 0x1c3dc <__floatsisf>
    7f6a:	9b 01       	movw	r18, r22
    7f6c:	ac 01       	movw	r20, r24
    7f6e:	c5 01       	movw	r24, r10
    7f70:	b4 01       	movw	r22, r8
    7f72:	0e 94 ea e0 	call	0x1c1d4	; 0x1c1d4 <__subsf3>
    7f76:	4b 01       	movw	r8, r22
    7f78:	5c 01       	movw	r10, r24
    7f7a:	80 e3       	ldi	r24, 0x30	; 48
    7f7c:	84 0d       	add	r24, r4
    7f7e:	8e de       	rcall	.-740    	; 0x7c9c <pch>
    7f80:	21 97       	sbiw	r28, 0x01	; 1
    7f82:	20 e0       	ldi	r18, 0x00	; 0
    7f84:	30 e0       	ldi	r19, 0x00	; 0
    7f86:	40 e2       	ldi	r20, 0x20	; 32
    7f88:	51 e4       	ldi	r21, 0x41	; 65
    7f8a:	c5 01       	movw	r24, r10
    7f8c:	b4 01       	movw	r22, r8
    7f8e:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    7f92:	4b 01       	movw	r8, r22
    7f94:	5c 01       	movw	r10, r24
    7f96:	20 97       	sbiw	r28, 0x00	; 0
    7f98:	e1 f6       	brne	.-72     	; 0x7f52 <p_ftoa+0x1c4>
    7f9a:	bb cf       	rjmp	.-138    	; 0x7f12 <p_ftoa+0x184>

00007f9c <p_etoa>:
    7f9c:	ad e0       	ldi	r26, 0x0D	; 13
    7f9e:	b0 e0       	ldi	r27, 0x00	; 0
    7fa0:	e4 ed       	ldi	r30, 0xD4	; 212
    7fa2:	ff e3       	ldi	r31, 0x3F	; 63
    7fa4:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    7fa8:	4b 01       	movw	r8, r22
    7faa:	5c 01       	movw	r10, r24
    7fac:	5b 87       	std	Y+11, r21	; 0x0b
    7fae:	4a 87       	std	Y+10, r20	; 0x0a
    7fb0:	1d 87       	std	Y+13, r17	; 0x0d
    7fb2:	0c 87       	std	Y+12, r16	; 0x0c
    7fb4:	3c 2c       	mov	r3, r12
    7fb6:	c6 fa       	bst	r12, 6
    7fb8:	11 27       	eor	r17, r17
    7fba:	10 f9       	bld	r17, 0
    7fbc:	b9 01       	movw	r22, r18
    7fbe:	ca 01       	movw	r24, r20
    7fc0:	60 de       	rcall	.-832    	; 0x7c82 <pch_init>
    7fc2:	20 e0       	ldi	r18, 0x00	; 0
    7fc4:	30 e0       	ldi	r19, 0x00	; 0
    7fc6:	a9 01       	movw	r20, r18
    7fc8:	c5 01       	movw	r24, r10
    7fca:	b4 01       	movw	r22, r8
    7fcc:	0e 94 4f e1 	call	0x1c29e	; 0x1c29e <__cmpsf2>
    7fd0:	87 ff       	sbrs	r24, 7
    7fd2:	05 c0       	rjmp	.+10     	; 0x7fde <p_etoa+0x42>
    7fd4:	b7 fa       	bst	r11, 7
    7fd6:	b0 94       	com	r11
    7fd8:	b7 f8       	bld	r11, 7
    7fda:	b0 94       	com	r11
    7fdc:	11 e0       	ldi	r17, 0x01	; 1
    7fde:	10 fb       	bst	r17, 0
    7fe0:	36 f8       	bld	r3, 6
    7fe2:	36 fe       	sbrs	r3, 6
    7fe4:	02 c0       	rjmp	.+4      	; 0x7fea <p_etoa+0x4e>
    7fe6:	8d e2       	ldi	r24, 0x2D	; 45
    7fe8:	07 c0       	rjmp	.+14     	; 0x7ff8 <p_etoa+0x5c>
    7fea:	32 fe       	sbrs	r3, 2
    7fec:	02 c0       	rjmp	.+4      	; 0x7ff2 <p_etoa+0x56>
    7fee:	8b e2       	ldi	r24, 0x2B	; 43
    7ff0:	03 c0       	rjmp	.+6      	; 0x7ff8 <p_etoa+0x5c>
    7ff2:	34 fe       	sbrs	r3, 4
    7ff4:	02 c0       	rjmp	.+4      	; 0x7ffa <p_etoa+0x5e>
    7ff6:	80 e2       	ldi	r24, 0x20	; 32
    7ff8:	51 de       	rcall	.-862    	; 0x7c9c <pch>
    7ffa:	37 01       	movw	r6, r14
    7ffc:	f7 fe       	sbrs	r15, 7
    7ffe:	02 c0       	rjmp	.+4      	; 0x8004 <p_etoa+0x68>
    8000:	61 2c       	mov	r6, r1
    8002:	71 2c       	mov	r7, r1
    8004:	19 86       	std	Y+9, r1	; 0x09
    8006:	18 86       	std	Y+8, r1	; 0x08
    8008:	20 e0       	ldi	r18, 0x00	; 0
    800a:	30 e0       	ldi	r19, 0x00	; 0
    800c:	a9 01       	movw	r20, r18
    800e:	c5 01       	movw	r24, r10
    8010:	b4 01       	movw	r22, r8
    8012:	0e 94 4f e1 	call	0x1c29e	; 0x1c29e <__cmpsf2>
    8016:	23 2d       	mov	r18, r3
    8018:	22 70       	andi	r18, 0x02	; 2
    801a:	22 2e       	mov	r2, r18
    801c:	88 23       	and	r24, r24
    801e:	09 f4       	brne	.+2      	; 0x8022 <p_etoa+0x86>
    8020:	70 c0       	rjmp	.+224    	; 0x8102 <p_etoa+0x166>
    8022:	22 23       	and	r18, r18
    8024:	b1 f0       	breq	.+44     	; 0x8052 <p_etoa+0xb6>
    8026:	83 01       	movw	r16, r6
    8028:	c1 2c       	mov	r12, r1
    802a:	d1 2c       	mov	r13, r1
    802c:	e1 2c       	mov	r14, r1
    802e:	2f e3       	ldi	r18, 0x3F	; 63
    8030:	f2 2e       	mov	r15, r18
    8032:	01 15       	cp	r16, r1
    8034:	11 05       	cpc	r17, r1
    8036:	91 f0       	breq	.+36     	; 0x805c <p_etoa+0xc0>
    8038:	20 e0       	ldi	r18, 0x00	; 0
    803a:	30 e0       	ldi	r19, 0x00	; 0
    803c:	40 e2       	ldi	r20, 0x20	; 32
    803e:	51 e4       	ldi	r21, 0x41	; 65
    8040:	c7 01       	movw	r24, r14
    8042:	b6 01       	movw	r22, r12
    8044:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    8048:	6b 01       	movw	r12, r22
    804a:	7c 01       	movw	r14, r24
    804c:	01 50       	subi	r16, 0x01	; 1
    804e:	11 09       	sbc	r17, r1
    8050:	f0 cf       	rjmp	.-32     	; 0x8032 <p_etoa+0x96>
    8052:	c1 2c       	mov	r12, r1
    8054:	d1 2c       	mov	r13, r1
    8056:	e1 2c       	mov	r14, r1
    8058:	9f e3       	ldi	r25, 0x3F	; 63
    805a:	f9 2e       	mov	r15, r25
    805c:	41 2c       	mov	r4, r1
    805e:	51 2c       	mov	r5, r1
    8060:	82 01       	movw	r16, r4
    8062:	01 50       	subi	r16, 0x01	; 1
    8064:	11 09       	sbc	r17, r1
    8066:	20 e0       	ldi	r18, 0x00	; 0
    8068:	30 e0       	ldi	r19, 0x00	; 0
    806a:	40 e8       	ldi	r20, 0x80	; 128
    806c:	5f e3       	ldi	r21, 0x3F	; 63
    806e:	c5 01       	movw	r24, r10
    8070:	b4 01       	movw	r22, r8
    8072:	0e 94 4f e1 	call	0x1c29e	; 0x1c29e <__cmpsf2>
    8076:	87 ff       	sbrs	r24, 7
    8078:	0c c0       	rjmp	.+24     	; 0x8092 <p_etoa+0xf6>
    807a:	20 e0       	ldi	r18, 0x00	; 0
    807c:	30 e0       	ldi	r19, 0x00	; 0
    807e:	40 e2       	ldi	r20, 0x20	; 32
    8080:	51 e4       	ldi	r21, 0x41	; 65
    8082:	c5 01       	movw	r24, r10
    8084:	b4 01       	movw	r22, r8
    8086:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    808a:	4b 01       	movw	r8, r22
    808c:	5c 01       	movw	r10, r24
    808e:	28 01       	movw	r4, r16
    8090:	e7 cf       	rjmp	.-50     	; 0x8060 <p_etoa+0xc4>
    8092:	82 01       	movw	r16, r4
    8094:	0f 5f       	subi	r16, 0xFF	; 255
    8096:	1f 4f       	sbci	r17, 0xFF	; 255
    8098:	20 e0       	ldi	r18, 0x00	; 0
    809a:	30 e0       	ldi	r19, 0x00	; 0
    809c:	40 e2       	ldi	r20, 0x20	; 32
    809e:	51 e4       	ldi	r21, 0x41	; 65
    80a0:	c5 01       	movw	r24, r10
    80a2:	b4 01       	movw	r22, r8
    80a4:	0e 94 9e e2 	call	0x1c53c	; 0x1c53c <__gesf2>
    80a8:	87 fd       	sbrc	r24, 7
    80aa:	0c c0       	rjmp	.+24     	; 0x80c4 <p_etoa+0x128>
    80ac:	20 e0       	ldi	r18, 0x00	; 0
    80ae:	30 e0       	ldi	r19, 0x00	; 0
    80b0:	40 e2       	ldi	r20, 0x20	; 32
    80b2:	51 e4       	ldi	r21, 0x41	; 65
    80b4:	c5 01       	movw	r24, r10
    80b6:	b4 01       	movw	r22, r8
    80b8:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    80bc:	4b 01       	movw	r8, r22
    80be:	5c 01       	movw	r10, r24
    80c0:	28 01       	movw	r4, r16
    80c2:	e7 cf       	rjmp	.-50     	; 0x8092 <p_etoa+0xf6>
    80c4:	a7 01       	movw	r20, r14
    80c6:	96 01       	movw	r18, r12
    80c8:	c5 01       	movw	r24, r10
    80ca:	b4 01       	movw	r22, r8
    80cc:	0e 94 eb e0 	call	0x1c1d6	; 0x1c1d6 <__addsf3>
    80d0:	4b 01       	movw	r8, r22
    80d2:	5c 01       	movw	r10, r24
    80d4:	82 01       	movw	r16, r4
    80d6:	3f ef       	ldi	r19, 0xFF	; 255
    80d8:	43 1a       	sub	r4, r19
    80da:	53 0a       	sbc	r5, r19
    80dc:	20 e0       	ldi	r18, 0x00	; 0
    80de:	30 e0       	ldi	r19, 0x00	; 0
    80e0:	40 e2       	ldi	r20, 0x20	; 32
    80e2:	51 e4       	ldi	r21, 0x41	; 65
    80e4:	0e 94 9e e2 	call	0x1c53c	; 0x1c53c <__gesf2>
    80e8:	87 fd       	sbrc	r24, 7
    80ea:	09 c0       	rjmp	.+18     	; 0x80fe <p_etoa+0x162>
    80ec:	20 e0       	ldi	r18, 0x00	; 0
    80ee:	30 e0       	ldi	r19, 0x00	; 0
    80f0:	40 e2       	ldi	r20, 0x20	; 32
    80f2:	51 e4       	ldi	r21, 0x41	; 65
    80f4:	c5 01       	movw	r24, r10
    80f6:	b4 01       	movw	r22, r8
    80f8:	0e 94 53 e1 	call	0x1c2a6	; 0x1c2a6 <__divsf3>
    80fc:	e9 cf       	rjmp	.-46     	; 0x80d0 <p_etoa+0x134>
    80fe:	08 87       	std	Y+8, r16	; 0x08
    8100:	19 87       	std	Y+9, r17	; 0x09
    8102:	85 e6       	ldi	r24, 0x65	; 101
    8104:	89 83       	std	Y+1, r24	; 0x01
    8106:	88 85       	ldd	r24, Y+8	; 0x08
    8108:	99 85       	ldd	r25, Y+9	; 0x09
    810a:	97 ff       	sbrs	r25, 7
    810c:	08 c0       	rjmp	.+16     	; 0x811e <p_etoa+0x182>
    810e:	91 95       	neg	r25
    8110:	81 95       	neg	r24
    8112:	91 09       	sbc	r25, r1
    8114:	99 87       	std	Y+9, r25	; 0x09
    8116:	88 87       	std	Y+8, r24	; 0x08
    8118:	8d e2       	ldi	r24, 0x2D	; 45
    811a:	90 e0       	ldi	r25, 0x00	; 0
    811c:	02 c0       	rjmp	.+4      	; 0x8122 <p_etoa+0x186>
    811e:	8b e2       	ldi	r24, 0x2B	; 43
    8120:	90 e0       	ldi	r25, 0x00	; 0
    8122:	6c 01       	movw	r12, r24
    8124:	82 e0       	ldi	r24, 0x02	; 2
    8126:	e8 2e       	mov	r14, r24
    8128:	f1 2c       	mov	r15, r1
    812a:	8e 01       	movw	r16, r28
    812c:	08 5f       	subi	r16, 0xF8	; 248
    812e:	1f 4f       	sbci	r17, 0xFF	; 255
    8130:	2a e0       	ldi	r18, 0x0A	; 10
    8132:	30 e0       	ldi	r19, 0x00	; 0
    8134:	42 e0       	ldi	r20, 0x02	; 2
    8136:	50 e0       	ldi	r21, 0x00	; 0
    8138:	65 e0       	ldi	r22, 0x05	; 5
    813a:	70 e0       	ldi	r23, 0x00	; 0
    813c:	ce 01       	movw	r24, r28
    813e:	02 96       	adiw	r24, 0x02	; 2
    8140:	17 dd       	rcall	.-1490   	; 0x7b70 <bin2num>
    8142:	9c 01       	movw	r18, r24
    8144:	93 2d       	mov	r25, r3
    8146:	98 72       	andi	r25, 0x28	; 40
    8148:	90 32       	cpi	r25, 0x20	; 32
    814a:	61 f0       	breq	.+24     	; 0x8164 <p_etoa+0x1c8>
    814c:	c5 01       	movw	r24, r10
    814e:	b4 01       	movw	r22, r8
    8150:	0e 94 bb e1 	call	0x1c376	; 0x1c376 <__fixsfsi>
    8154:	6b 01       	movw	r12, r22
    8156:	7c 01       	movw	r14, r24
    8158:	80 e3       	ldi	r24, 0x30	; 48
    815a:	8c 0d       	add	r24, r12
    815c:	9f dd       	rcall	.-1218   	; 0x7c9c <pch>
    815e:	21 10       	cpse	r2, r1
    8160:	20 c0       	rjmp	.+64     	; 0x81a2 <p_etoa+0x206>
    8162:	5e c0       	rjmp	.+188    	; 0x8220 <p_etoa+0x284>
    8164:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <_pch+0x2>
    8168:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <_pch+0x3>
    816c:	0c 85       	ldd	r16, Y+12	; 0x0c
    816e:	1d 85       	ldd	r17, Y+13	; 0x0d
    8170:	08 1b       	sub	r16, r24
    8172:	19 0b       	sbc	r17, r25
    8174:	22 20       	and	r2, r2
    8176:	41 f0       	breq	.+16     	; 0x8188 <p_etoa+0x1ec>
    8178:	61 14       	cp	r6, r1
    817a:	71 04       	cpc	r7, r1
    817c:	29 f0       	breq	.+10     	; 0x8188 <p_etoa+0x1ec>
    817e:	06 19       	sub	r16, r6
    8180:	17 09       	sbc	r17, r7
    8182:	06 50       	subi	r16, 0x06	; 6
    8184:	11 09       	sbc	r17, r1
    8186:	02 c0       	rjmp	.+4      	; 0x818c <p_etoa+0x1f0>
    8188:	05 50       	subi	r16, 0x05	; 5
    818a:	11 09       	sbc	r17, r1
    818c:	24 30       	cpi	r18, 0x04	; 4
    818e:	31 05       	cpc	r19, r1
    8190:	14 f0       	brlt	.+4      	; 0x8196 <p_etoa+0x1fa>
    8192:	01 50       	subi	r16, 0x01	; 1
    8194:	11 09       	sbc	r17, r1
    8196:	10 16       	cp	r1, r16
    8198:	11 06       	cpc	r1, r17
    819a:	c4 f6       	brge	.-80     	; 0x814c <p_etoa+0x1b0>
    819c:	80 e3       	ldi	r24, 0x30	; 48
    819e:	7e dd       	rcall	.-1284   	; 0x7c9c <pch>
    81a0:	f8 cf       	rjmp	.-16     	; 0x8192 <p_etoa+0x1f6>
    81a2:	61 14       	cp	r6, r1
    81a4:	71 04       	cpc	r7, r1
    81a6:	09 f4       	brne	.+2      	; 0x81aa <p_etoa+0x20e>
    81a8:	3b c0       	rjmp	.+118    	; 0x8220 <p_etoa+0x284>
    81aa:	b6 01       	movw	r22, r12
    81ac:	dd 0c       	add	r13, r13
    81ae:	88 0b       	sbc	r24, r24
    81b0:	99 0b       	sbc	r25, r25
    81b2:	0e 94 ee e1 	call	0x1c3dc	; 0x1c3dc <__floatsisf>
    81b6:	9b 01       	movw	r18, r22
    81b8:	ac 01       	movw	r20, r24
    81ba:	c5 01       	movw	r24, r10
    81bc:	b4 01       	movw	r22, r8
    81be:	0e 94 ea e0 	call	0x1c1d4	; 0x1c1d4 <__subsf3>
    81c2:	20 e0       	ldi	r18, 0x00	; 0
    81c4:	30 e0       	ldi	r19, 0x00	; 0
    81c6:	40 e2       	ldi	r20, 0x20	; 32
    81c8:	51 e4       	ldi	r21, 0x41	; 65
    81ca:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    81ce:	6b 01       	movw	r12, r22
    81d0:	7c 01       	movw	r14, r24
    81d2:	8e e2       	ldi	r24, 0x2E	; 46
    81d4:	63 dd       	rcall	.-1338   	; 0x7c9c <pch>
    81d6:	c7 01       	movw	r24, r14
    81d8:	b6 01       	movw	r22, r12
    81da:	0e 94 bb e1 	call	0x1c376	; 0x1c376 <__fixsfsi>
    81de:	4b 01       	movw	r8, r22
    81e0:	5c 01       	movw	r10, r24
    81e2:	07 2e       	mov	r0, r23
    81e4:	00 0c       	add	r0, r0
    81e6:	88 0b       	sbc	r24, r24
    81e8:	99 0b       	sbc	r25, r25
    81ea:	0e 94 ee e1 	call	0x1c3dc	; 0x1c3dc <__floatsisf>
    81ee:	9b 01       	movw	r18, r22
    81f0:	ac 01       	movw	r20, r24
    81f2:	c7 01       	movw	r24, r14
    81f4:	b6 01       	movw	r22, r12
    81f6:	0e 94 ea e0 	call	0x1c1d4	; 0x1c1d4 <__subsf3>
    81fa:	6b 01       	movw	r12, r22
    81fc:	7c 01       	movw	r14, r24
    81fe:	80 e3       	ldi	r24, 0x30	; 48
    8200:	88 0d       	add	r24, r8
    8202:	4c dd       	rcall	.-1384   	; 0x7c9c <pch>
    8204:	20 e0       	ldi	r18, 0x00	; 0
    8206:	30 e0       	ldi	r19, 0x00	; 0
    8208:	40 e2       	ldi	r20, 0x20	; 32
    820a:	51 e4       	ldi	r21, 0x41	; 65
    820c:	c7 01       	movw	r24, r14
    820e:	b6 01       	movw	r22, r12
    8210:	0e 94 a2 e2 	call	0x1c544	; 0x1c544 <__mulsf3>
    8214:	6b 01       	movw	r12, r22
    8216:	7c 01       	movw	r14, r24
    8218:	81 e0       	ldi	r24, 0x01	; 1
    821a:	68 1a       	sub	r6, r24
    821c:	71 08       	sbc	r7, r1
    821e:	d9 f6       	brne	.-74     	; 0x81d6 <p_etoa+0x23a>
    8220:	8e 01       	movw	r16, r28
    8222:	0f 5f       	subi	r16, 0xFF	; 255
    8224:	1f 4f       	sbci	r17, 0xFF	; 255
    8226:	f8 01       	movw	r30, r16
    8228:	81 91       	ld	r24, Z+
    822a:	8f 01       	movw	r16, r30
    822c:	88 23       	and	r24, r24
    822e:	11 f0       	breq	.+4      	; 0x8234 <p_etoa+0x298>
    8230:	35 dd       	rcall	.-1430   	; 0x7c9c <pch>
    8232:	f9 cf       	rjmp	.-14     	; 0x8226 <p_etoa+0x28a>
    8234:	33 dd       	rcall	.-1434   	; 0x7c9c <pch>
    8236:	ea 85       	ldd	r30, Y+10	; 0x0a
    8238:	fb 85       	ldd	r31, Y+11	; 0x0b
    823a:	01 90       	ld	r0, Z+
    823c:	00 20       	and	r0, r0
    823e:	e9 f7       	brne	.-6      	; 0x823a <p_etoa+0x29e>
    8240:	cf 01       	movw	r24, r30
    8242:	01 97       	sbiw	r24, 0x01	; 1
    8244:	2a 85       	ldd	r18, Y+10	; 0x0a
    8246:	3b 85       	ldd	r19, Y+11	; 0x0b
    8248:	82 1b       	sub	r24, r18
    824a:	93 0b       	sbc	r25, r19
    824c:	2d 96       	adiw	r28, 0x0d	; 13
    824e:	e2 e1       	ldi	r30, 0x12	; 18
    8250:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00008254 <_puts_pad>:
    8254:	a0 e0       	ldi	r26, 0x00	; 0
    8256:	b0 e0       	ldi	r27, 0x00	; 0
    8258:	e0 e3       	ldi	r30, 0x30	; 48
    825a:	f1 e4       	ldi	r31, 0x41	; 65
    825c:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
    8260:	6c 01       	movw	r12, r24
    8262:	4b 01       	movw	r8, r22
    8264:	79 01       	movw	r14, r18
    8266:	24 17       	cp	r18, r20
    8268:	35 07       	cpc	r19, r21
    826a:	24 f4       	brge	.+8      	; 0x8274 <_puts_pad+0x20>
    826c:	ea 01       	movw	r28, r20
    826e:	c2 1b       	sub	r28, r18
    8270:	d3 0b       	sbc	r29, r19
    8272:	02 c0       	rjmp	.+4      	; 0x8278 <_puts_pad+0x24>
    8274:	c0 e0       	ldi	r28, 0x00	; 0
    8276:	d0 e0       	ldi	r29, 0x00	; 0
    8278:	01 15       	cp	r16, r1
    827a:	11 05       	cpc	r17, r1
    827c:	49 f4       	brne	.+18     	; 0x8290 <_puts_pad+0x3c>
    827e:	21 97       	sbiw	r28, 0x01	; 1
    8280:	38 f0       	brcs	.+14     	; 0x8290 <_puts_pad+0x3c>
    8282:	d6 01       	movw	r26, r12
    8284:	ed 91       	ld	r30, X+
    8286:	fc 91       	ld	r31, X
    8288:	60 e2       	ldi	r22, 0x20	; 32
    828a:	c6 01       	movw	r24, r12
    828c:	09 95       	icall
    828e:	f7 cf       	rjmp	.-18     	; 0x827e <_puts_pad+0x2a>
    8290:	54 01       	movw	r10, r8
    8292:	f5 01       	movw	r30, r10
    8294:	61 91       	ld	r22, Z+
    8296:	5f 01       	movw	r10, r30
    8298:	66 23       	and	r22, r22
    829a:	61 f0       	breq	.+24     	; 0x82b4 <_puts_pad+0x60>
    829c:	e1 14       	cp	r14, r1
    829e:	f1 04       	cpc	r15, r1
    82a0:	49 f0       	breq	.+18     	; 0x82b4 <_puts_pad+0x60>
    82a2:	d6 01       	movw	r26, r12
    82a4:	ed 91       	ld	r30, X+
    82a6:	fc 91       	ld	r31, X
    82a8:	c6 01       	movw	r24, r12
    82aa:	09 95       	icall
    82ac:	b1 e0       	ldi	r27, 0x01	; 1
    82ae:	eb 1a       	sub	r14, r27
    82b0:	f1 08       	sbc	r15, r1
    82b2:	ef cf       	rjmp	.-34     	; 0x8292 <_puts_pad+0x3e>
    82b4:	01 15       	cp	r16, r1
    82b6:	11 05       	cpc	r17, r1
    82b8:	51 f0       	breq	.+20     	; 0x82ce <_puts_pad+0x7a>
    82ba:	20 97       	sbiw	r28, 0x00	; 0
    82bc:	41 f0       	breq	.+16     	; 0x82ce <_puts_pad+0x7a>
    82be:	d6 01       	movw	r26, r12
    82c0:	ed 91       	ld	r30, X+
    82c2:	fc 91       	ld	r31, X
    82c4:	60 e2       	ldi	r22, 0x20	; 32
    82c6:	c6 01       	movw	r24, r12
    82c8:	09 95       	icall
    82ca:	21 97       	sbiw	r28, 0x01	; 1
    82cc:	f6 cf       	rjmp	.-20     	; 0x82ba <_puts_pad+0x66>
    82ce:	cd b7       	in	r28, 0x3d	; 61
    82d0:	de b7       	in	r29, 0x3e	; 62
    82d2:	ec e0       	ldi	r30, 0x0C	; 12
    82d4:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

000082d8 <_printf_fn>:
    82d8:	ab e6       	ldi	r26, 0x6B	; 107
    82da:	b0 e0       	ldi	r27, 0x00	; 0
    82dc:	e2 e7       	ldi	r30, 0x72	; 114
    82de:	f1 e4       	ldi	r31, 0x41	; 65
    82e0:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    82e4:	a5 96       	adiw	r28, 0x25	; 37
    82e6:	9f af       	std	Y+63, r25	; 0x3f
    82e8:	8e af       	std	Y+62, r24	; 0x3e
    82ea:	a5 97       	sbiw	r28, 0x25	; 37
    82ec:	6a 01       	movw	r12, r20
    82ee:	e6 2e       	mov	r14, r22
    82f0:	19 01       	movw	r2, r18
    82f2:	a9 96       	adiw	r28, 0x29	; 41
    82f4:	1c ae       	std	Y+60, r1	; 0x3c
    82f6:	1d ae       	std	Y+61, r1	; 0x3d
    82f8:	1e ae       	std	Y+62, r1	; 0x3e
    82fa:	1f ae       	std	Y+63, r1	; 0x3f
    82fc:	a9 97       	sbiw	r28, 0x29	; 41
    82fe:	9e 01       	movw	r18, r28
    8300:	2f 5a       	subi	r18, 0xAF	; 175
    8302:	3f 4f       	sbci	r19, 0xFF	; 255
    8304:	67 96       	adiw	r28, 0x17	; 23
    8306:	3f af       	std	Y+63, r19	; 0x3f
    8308:	2e af       	std	Y+62, r18	; 0x3e
    830a:	67 97       	sbiw	r28, 0x17	; 23
    830c:	ae 01       	movw	r20, r28
    830e:	4d 5b       	subi	r20, 0xBD	; 189
    8310:	5f 4f       	sbci	r21, 0xFF	; 255
    8312:	69 96       	adiw	r28, 0x19	; 25
    8314:	5f af       	std	Y+63, r21	; 0x3f
    8316:	4e af       	std	Y+62, r20	; 0x3e
    8318:	69 97       	sbiw	r28, 0x19	; 25
    831a:	ce 01       	movw	r24, r28
    831c:	85 5b       	subi	r24, 0xB5	; 181
    831e:	9f 4f       	sbci	r25, 0xFF	; 255
    8320:	6b 96       	adiw	r28, 0x1b	; 27
    8322:	9f af       	std	Y+63, r25	; 0x3f
    8324:	8e af       	std	Y+62, r24	; 0x3e
    8326:	6b 97       	sbiw	r28, 0x1b	; 27
    8328:	de 01       	movw	r26, r28
    832a:	ad 5a       	subi	r26, 0xAD	; 173
    832c:	bf 4f       	sbci	r27, 0xFF	; 255
    832e:	6d 96       	adiw	r28, 0x1d	; 29
    8330:	bf af       	std	Y+63, r27	; 0x3f
    8332:	ae af       	std	Y+62, r26	; 0x3e
    8334:	6d 97       	sbiw	r28, 0x1d	; 29
    8336:	f6 01       	movw	r30, r12
    8338:	5e 2d       	mov	r21, r14
    833a:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    833e:	66 23       	and	r22, r22
    8340:	09 f4       	brne	.+2      	; 0x8344 <_printf_fn+0x6c>
    8342:	d7 c3       	rjmp	.+1966   	; 0x8af2 <_printf_fn+0x81a>
    8344:	ae 2d       	mov	r26, r14
    8346:	c6 01       	movw	r24, r12
    8348:	01 96       	adiw	r24, 0x01	; 1
    834a:	a1 1d       	adc	r26, r1
    834c:	3c 01       	movw	r6, r24
    834e:	8a 2e       	mov	r8, r26
    8350:	65 32       	cpi	r22, 0x25	; 37
    8352:	51 f0       	breq	.+20     	; 0x8368 <_printf_fn+0x90>
    8354:	a5 96       	adiw	r28, 0x25	; 37
    8356:	ae ad       	ldd	r26, Y+62	; 0x3e
    8358:	bf ad       	ldd	r27, Y+63	; 0x3f
    835a:	a5 97       	sbiw	r28, 0x25	; 37
    835c:	ed 91       	ld	r30, X+
    835e:	fc 91       	ld	r31, X
    8360:	11 97       	sbiw	r26, 0x01	; 1
    8362:	cd 01       	movw	r24, r26
    8364:	09 95       	icall
    8366:	91 c3       	rjmp	.+1826   	; 0x8a8a <_printf_fn+0x7b2>
    8368:	91 2c       	mov	r9, r1
    836a:	f3 01       	movw	r30, r6
    836c:	58 2d       	mov	r21, r8
    836e:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    8372:	63 32       	cpi	r22, 0x23	; 35
    8374:	19 f4       	brne	.+6      	; 0x837c <_printf_fn+0xa4>
    8376:	68 94       	set
    8378:	97 f8       	bld	r9, 7
    837a:	04 c0       	rjmp	.+8      	; 0x8384 <_printf_fn+0xac>
    837c:	6b 32       	cpi	r22, 0x2B	; 43
    837e:	39 f4       	brne	.+14     	; 0x838e <_printf_fn+0xb6>
    8380:	68 94       	set
    8382:	92 f8       	bld	r9, 2
    8384:	bf ef       	ldi	r27, 0xFF	; 255
    8386:	6b 1a       	sub	r6, r27
    8388:	7b 0a       	sbc	r7, r27
    838a:	8b 0a       	sbc	r8, r27
    838c:	ee cf       	rjmp	.-36     	; 0x836a <_printf_fn+0x92>
    838e:	6d 32       	cpi	r22, 0x2D	; 45
    8390:	a9 f4       	brne	.+42     	; 0x83bc <_printf_fn+0xe4>
    8392:	93 fc       	sbrc	r9, 3
    8394:	05 c0       	rjmp	.+10     	; 0x83a0 <_printf_fn+0xc8>
    8396:	6d 32       	cpi	r22, 0x2D	; 45
    8398:	19 f4       	brne	.+6      	; 0x83a0 <_printf_fn+0xc8>
    839a:	68 94       	set
    839c:	93 f8       	bld	r9, 3
    839e:	f2 cf       	rjmp	.-28     	; 0x8384 <_printf_fn+0xac>
    83a0:	94 fc       	sbrc	r9, 4
    83a2:	05 c0       	rjmp	.+10     	; 0x83ae <_printf_fn+0xd6>
    83a4:	60 32       	cpi	r22, 0x20	; 32
    83a6:	19 f4       	brne	.+6      	; 0x83ae <_printf_fn+0xd6>
    83a8:	68 94       	set
    83aa:	94 f8       	bld	r9, 4
    83ac:	eb cf       	rjmp	.-42     	; 0x8384 <_printf_fn+0xac>
    83ae:	95 fc       	sbrc	r9, 5
    83b0:	e9 cf       	rjmp	.-46     	; 0x8384 <_printf_fn+0xac>
    83b2:	60 33       	cpi	r22, 0x30	; 48
    83b4:	39 f7       	brne	.-50     	; 0x8384 <_printf_fn+0xac>
    83b6:	68 94       	set
    83b8:	95 f8       	bld	r9, 5
    83ba:	e4 cf       	rjmp	.-56     	; 0x8384 <_printf_fn+0xac>
    83bc:	86 2f       	mov	r24, r22
    83be:	8f 7e       	andi	r24, 0xEF	; 239
    83c0:	80 32       	cpi	r24, 0x20	; 32
    83c2:	39 f3       	breq	.-50     	; 0x8392 <_printf_fn+0xba>
    83c4:	70 e0       	ldi	r23, 0x00	; 0
    83c6:	60 53       	subi	r22, 0x30	; 48
    83c8:	71 09       	sbc	r23, r1
    83ca:	41 2c       	mov	r4, r1
    83cc:	51 2c       	mov	r5, r1
    83ce:	6a 30       	cpi	r22, 0x0A	; 10
    83d0:	71 05       	cpc	r23, r1
    83d2:	e0 f4       	brcc	.+56     	; 0x840c <_printf_fn+0x134>
    83d4:	2a e0       	ldi	r18, 0x0A	; 10
    83d6:	f3 01       	movw	r30, r6
    83d8:	58 2d       	mov	r21, r8
    83da:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    83de:	70 e0       	ldi	r23, 0x00	; 0
    83e0:	cb 01       	movw	r24, r22
    83e2:	c0 97       	sbiw	r24, 0x30	; 48
    83e4:	0a 97       	sbiw	r24, 0x0a	; 10
    83e6:	80 f4       	brcc	.+32     	; 0x8408 <_printf_fn+0x130>
    83e8:	ef ef       	ldi	r30, 0xFF	; 255
    83ea:	6e 1a       	sub	r6, r30
    83ec:	7e 0a       	sbc	r7, r30
    83ee:	8e 0a       	sbc	r8, r30
    83f0:	24 9d       	mul	r18, r4
    83f2:	c0 01       	movw	r24, r0
    83f4:	25 9d       	mul	r18, r5
    83f6:	90 0d       	add	r25, r0
    83f8:	11 24       	eor	r1, r1
    83fa:	68 0f       	add	r22, r24
    83fc:	79 1f       	adc	r23, r25
    83fe:	2b 01       	movw	r4, r22
    8400:	f0 e3       	ldi	r31, 0x30	; 48
    8402:	4f 1a       	sub	r4, r31
    8404:	51 08       	sbc	r5, r1
    8406:	e7 cf       	rjmp	.-50     	; 0x83d6 <_printf_fn+0xfe>
    8408:	68 94       	set
    840a:	90 f8       	bld	r9, 0
    840c:	f3 01       	movw	r30, r6
    840e:	58 2d       	mov	r21, r8
    8410:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    8414:	6e 32       	cpi	r22, 0x2E	; 46
    8416:	59 f5       	brne	.+86     	; 0x846e <_printf_fn+0x196>
    8418:	2f ef       	ldi	r18, 0xFF	; 255
    841a:	62 1a       	sub	r6, r18
    841c:	72 0a       	sbc	r7, r18
    841e:	82 0a       	sbc	r8, r18
    8420:	a1 96       	adiw	r28, 0x21	; 33
    8422:	1f ae       	std	Y+63, r1	; 0x3f
    8424:	1e ae       	std	Y+62, r1	; 0x3e
    8426:	a1 97       	sbiw	r28, 0x21	; 33
    8428:	2a e0       	ldi	r18, 0x0A	; 10
    842a:	f3 01       	movw	r30, r6
    842c:	58 2d       	mov	r21, r8
    842e:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    8432:	70 e0       	ldi	r23, 0x00	; 0
    8434:	cb 01       	movw	r24, r22
    8436:	c0 97       	sbiw	r24, 0x30	; 48
    8438:	0a 97       	sbiw	r24, 0x0a	; 10
    843a:	b0 f4       	brcc	.+44     	; 0x8468 <_printf_fn+0x190>
    843c:	3f ef       	ldi	r19, 0xFF	; 255
    843e:	63 1a       	sub	r6, r19
    8440:	73 0a       	sbc	r7, r19
    8442:	83 0a       	sbc	r8, r19
    8444:	a1 96       	adiw	r28, 0x21	; 33
    8446:	4e ad       	ldd	r20, Y+62	; 0x3e
    8448:	5f ad       	ldd	r21, Y+63	; 0x3f
    844a:	a1 97       	sbiw	r28, 0x21	; 33
    844c:	24 9f       	mul	r18, r20
    844e:	c0 01       	movw	r24, r0
    8450:	25 9f       	mul	r18, r21
    8452:	90 0d       	add	r25, r0
    8454:	11 24       	eor	r1, r1
    8456:	68 0f       	add	r22, r24
    8458:	79 1f       	adc	r23, r25
    845a:	cb 01       	movw	r24, r22
    845c:	c0 97       	sbiw	r24, 0x30	; 48
    845e:	a1 96       	adiw	r28, 0x21	; 33
    8460:	9f af       	std	Y+63, r25	; 0x3f
    8462:	8e af       	std	Y+62, r24	; 0x3e
    8464:	a1 97       	sbiw	r28, 0x21	; 33
    8466:	e1 cf       	rjmp	.-62     	; 0x842a <_printf_fn+0x152>
    8468:	68 94       	set
    846a:	91 f8       	bld	r9, 1
    846c:	04 c0       	rjmp	.+8      	; 0x8476 <_printf_fn+0x19e>
    846e:	a1 96       	adiw	r28, 0x21	; 33
    8470:	1f ae       	std	Y+63, r1	; 0x3f
    8472:	1e ae       	std	Y+62, r1	; 0x3e
    8474:	a1 97       	sbiw	r28, 0x21	; 33
    8476:	f3 01       	movw	r30, r6
    8478:	58 2d       	mov	r21, r8
    847a:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    847e:	69 34       	cpi	r22, 0x49	; 73
    8480:	09 f0       	breq	.+2      	; 0x8484 <_printf_fn+0x1ac>
    8482:	45 c0       	rjmp	.+138    	; 0x850e <_printf_fn+0x236>
    8484:	9f ef       	ldi	r25, 0xFF	; 255
    8486:	69 1a       	sub	r6, r25
    8488:	79 0a       	sbc	r7, r25
    848a:	89 0a       	sbc	r8, r25
    848c:	6f 96       	adiw	r28, 0x1f	; 31
    848e:	1f ae       	std	Y+63, r1	; 0x3f
    8490:	1e ae       	std	Y+62, r1	; 0x3e
    8492:	6f 97       	sbiw	r28, 0x1f	; 31
    8494:	2a e0       	ldi	r18, 0x0A	; 10
    8496:	f3 01       	movw	r30, r6
    8498:	58 2d       	mov	r21, r8
    849a:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    849e:	70 e0       	ldi	r23, 0x00	; 0
    84a0:	cb 01       	movw	r24, r22
    84a2:	c0 97       	sbiw	r24, 0x30	; 48
    84a4:	0a 97       	sbiw	r24, 0x0a	; 10
    84a6:	b8 f4       	brcc	.+46     	; 0x84d6 <_printf_fn+0x1fe>
    84a8:	af ef       	ldi	r26, 0xFF	; 255
    84aa:	6a 1a       	sub	r6, r26
    84ac:	7a 0a       	sbc	r7, r26
    84ae:	8a 0a       	sbc	r8, r26
    84b0:	6f 96       	adiw	r28, 0x1f	; 31
    84b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    84b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    84b6:	6f 97       	sbiw	r28, 0x1f	; 31
    84b8:	2e 9f       	mul	r18, r30
    84ba:	c0 01       	movw	r24, r0
    84bc:	2f 9f       	mul	r18, r31
    84be:	90 0d       	add	r25, r0
    84c0:	11 24       	eor	r1, r1
    84c2:	68 0f       	add	r22, r24
    84c4:	79 1f       	adc	r23, r25
    84c6:	ab 01       	movw	r20, r22
    84c8:	40 53       	subi	r20, 0x30	; 48
    84ca:	51 09       	sbc	r21, r1
    84cc:	6f 96       	adiw	r28, 0x1f	; 31
    84ce:	5f af       	std	Y+63, r21	; 0x3f
    84d0:	4e af       	std	Y+62, r20	; 0x3e
    84d2:	6f 97       	sbiw	r28, 0x1f	; 31
    84d4:	e0 cf       	rjmp	.-64     	; 0x8496 <_printf_fn+0x1be>
    84d6:	6f 96       	adiw	r28, 0x1f	; 31
    84d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    84da:	9f ad       	ldd	r25, Y+63	; 0x3f
    84dc:	6f 97       	sbiw	r28, 0x1f	; 31
    84de:	00 97       	sbiw	r24, 0x00	; 0
    84e0:	09 f4       	brne	.+2      	; 0x84e4 <_printf_fn+0x20c>
    84e2:	4f c0       	rjmp	.+158    	; 0x8582 <_printf_fn+0x2aa>
    84e4:	87 70       	andi	r24, 0x07	; 7
    84e6:	99 27       	eor	r25, r25
    84e8:	89 2b       	or	r24, r25
    84ea:	09 f0       	breq	.+2      	; 0x84ee <_printf_fn+0x216>
    84ec:	46 c0       	rjmp	.+140    	; 0x857a <_printf_fn+0x2a2>
    84ee:	6f 96       	adiw	r28, 0x1f	; 31
    84f0:	ae ad       	ldd	r26, Y+62	; 0x3e
    84f2:	bf ad       	ldd	r27, Y+63	; 0x3f
    84f4:	6f 97       	sbiw	r28, 0x1f	; 31
    84f6:	83 e0       	ldi	r24, 0x03	; 3
    84f8:	b5 95       	asr	r27
    84fa:	a7 95       	ror	r26
    84fc:	8a 95       	dec	r24
    84fe:	e1 f7       	brne	.-8      	; 0x84f8 <_printf_fn+0x220>
    8500:	6f 96       	adiw	r28, 0x1f	; 31
    8502:	bf af       	std	Y+63, r27	; 0x3f
    8504:	ae af       	std	Y+62, r26	; 0x3e
    8506:	6f 97       	sbiw	r28, 0x1f	; 31
    8508:	ab 2b       	or	r26, r27
    850a:	d9 f1       	breq	.+118    	; 0x8582 <_printf_fn+0x2aa>
    850c:	27 c0       	rjmp	.+78     	; 0x855c <_printf_fn+0x284>
    850e:	68 36       	cpi	r22, 0x68	; 104
    8510:	29 f4       	brne	.+10     	; 0x851c <_printf_fn+0x244>
    8512:	bf ef       	ldi	r27, 0xFF	; 255
    8514:	6b 1a       	sub	r6, r27
    8516:	7b 0a       	sbc	r7, r27
    8518:	8b 0a       	sbc	r8, r27
    851a:	ba c2       	rjmp	.+1396   	; 0x8a90 <_printf_fn+0x7b8>
    851c:	6c 36       	cpi	r22, 0x6C	; 108
    851e:	09 f0       	breq	.+2      	; 0x8522 <_printf_fn+0x24a>
    8520:	b7 c2       	rjmp	.+1390   	; 0x8a90 <_printf_fn+0x7b8>
    8522:	a8 2d       	mov	r26, r8
    8524:	c3 01       	movw	r24, r6
    8526:	01 96       	adiw	r24, 0x01	; 1
    8528:	a1 1d       	adc	r26, r1
    852a:	fc 01       	movw	r30, r24
    852c:	5a 2f       	mov	r21, r26
    852e:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    8532:	6c 36       	cpi	r22, 0x6C	; 108
    8534:	49 f0       	breq	.+18     	; 0x8548 <_printf_fn+0x270>
    8536:	3c 01       	movw	r6, r24
    8538:	8a 2e       	mov	r8, r26
    853a:	24 e0       	ldi	r18, 0x04	; 4
    853c:	30 e0       	ldi	r19, 0x00	; 0
    853e:	6f 96       	adiw	r28, 0x1f	; 31
    8540:	3f af       	std	Y+63, r19	; 0x3f
    8542:	2e af       	std	Y+62, r18	; 0x3e
    8544:	6f 97       	sbiw	r28, 0x1f	; 31
    8546:	0a c0       	rjmp	.+20     	; 0x855c <_printf_fn+0x284>
    8548:	32 e0       	ldi	r19, 0x02	; 2
    854a:	63 0e       	add	r6, r19
    854c:	71 1c       	adc	r7, r1
    854e:	81 1c       	adc	r8, r1
    8550:	48 e0       	ldi	r20, 0x08	; 8
    8552:	50 e0       	ldi	r21, 0x00	; 0
    8554:	6f 96       	adiw	r28, 0x1f	; 31
    8556:	5f af       	std	Y+63, r21	; 0x3f
    8558:	4e af       	std	Y+62, r20	; 0x3e
    855a:	6f 97       	sbiw	r28, 0x1f	; 31
    855c:	f3 01       	movw	r30, r6
    855e:	58 2d       	mov	r21, r8
    8560:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    8564:	86 2f       	mov	r24, r22
    8566:	90 e0       	ldi	r25, 0x00	; 0
    8568:	a3 96       	adiw	r28, 0x23	; 35
    856a:	9f af       	std	Y+63, r25	; 0x3f
    856c:	8e af       	std	Y+62, r24	; 0x3e
    856e:	a3 97       	sbiw	r28, 0x23	; 35
    8570:	84 36       	cpi	r24, 0x64	; 100
    8572:	91 05       	cpc	r25, r1
    8574:	09 f4       	brne	.+2      	; 0x8578 <_printf_fn+0x2a0>
    8576:	93 c2       	rjmp	.+1318   	; 0x8a9e <_printf_fn+0x7c6>
    8578:	08 c0       	rjmp	.+16     	; 0x858a <_printf_fn+0x2b2>
    857a:	6f 96       	adiw	r28, 0x1f	; 31
    857c:	1f ae       	std	Y+63, r1	; 0x3f
    857e:	1e ae       	std	Y+62, r1	; 0x3e
    8580:	6f 97       	sbiw	r28, 0x1f	; 31
    8582:	a3 96       	adiw	r28, 0x23	; 35
    8584:	1f ae       	std	Y+63, r1	; 0x3f
    8586:	1e ae       	std	Y+62, r1	; 0x3e
    8588:	a3 97       	sbiw	r28, 0x23	; 35
    858a:	31 e0       	ldi	r19, 0x01	; 1
    858c:	20 e0       	ldi	r18, 0x00	; 0
    858e:	a3 96       	adiw	r28, 0x23	; 35
    8590:	ae ad       	ldd	r26, Y+62	; 0x3e
    8592:	bf ad       	ldd	r27, Y+63	; 0x3f
    8594:	a3 97       	sbiw	r28, 0x23	; 35
    8596:	a4 34       	cpi	r26, 0x44	; 68
    8598:	b1 05       	cpc	r27, r1
    859a:	09 f0       	breq	.+2      	; 0x859e <_printf_fn+0x2c6>
    859c:	30 e0       	ldi	r19, 0x00	; 0
    859e:	83 2f       	mov	r24, r19
    85a0:	92 2f       	mov	r25, r18
    85a2:	a3 96       	adiw	r28, 0x23	; 35
    85a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    85a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    85a8:	a3 97       	sbiw	r28, 0x23	; 35
    85aa:	e2 54       	subi	r30, 0x42	; 66
    85ac:	f1 09       	sbc	r31, r1
    85ae:	e7 33       	cpi	r30, 0x37	; 55
    85b0:	f1 05       	cpc	r31, r1
    85b2:	08 f0       	brcs	.+2      	; 0x85b6 <_printf_fn+0x2de>
    85b4:	5d c1       	rjmp	.+698    	; 0x8870 <_printf_fn+0x598>
    85b6:	ea 5b       	subi	r30, 0xBA	; 186
    85b8:	ff 4f       	sbci	r31, 0xFF	; 255
    85ba:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
    85be:	e2 e0       	ldi	r30, 0x02	; 2
    85c0:	f0 e0       	ldi	r31, 0x00	; 0
    85c2:	6f 96       	adiw	r28, 0x1f	; 31
    85c4:	ff af       	std	Y+63, r31	; 0x3f
    85c6:	ee af       	std	Y+62, r30	; 0x3e
    85c8:	6f 97       	sbiw	r28, 0x1f	; 31
    85ca:	29 2d       	mov	r18, r9
    85cc:	28 72       	andi	r18, 0x28	; 40
    85ce:	28 32       	cpi	r18, 0x28	; 40
    85d0:	11 f4       	brne	.+4      	; 0x85d6 <_printf_fn+0x2fe>
    85d2:	e8 94       	clt
    85d4:	95 f8       	bld	r9, 5
    85d6:	29 2d       	mov	r18, r9
    85d8:	22 72       	andi	r18, 0x22	; 34
    85da:	22 32       	cpi	r18, 0x22	; 34
    85dc:	11 f4       	brne	.+4      	; 0x85e2 <_printf_fn+0x30a>
    85de:	e8 94       	clt
    85e0:	95 f8       	bld	r9, 5
    85e2:	29 2d       	mov	r18, r9
    85e4:	21 72       	andi	r18, 0x21	; 33
    85e6:	21 32       	cpi	r18, 0x21	; 33
    85e8:	59 f4       	brne	.+22     	; 0x8600 <_printf_fn+0x328>
    85ea:	a1 96       	adiw	r28, 0x21	; 33
    85ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    85ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    85f0:	a1 97       	sbiw	r28, 0x21	; 33
    85f2:	24 15       	cp	r18, r4
    85f4:	35 05       	cpc	r19, r5
    85f6:	24 f4       	brge	.+8      	; 0x8600 <_printf_fn+0x328>
    85f8:	a1 96       	adiw	r28, 0x21	; 33
    85fa:	5f ae       	std	Y+63, r5	; 0x3f
    85fc:	4e ae       	std	Y+62, r4	; 0x3e
    85fe:	a1 97       	sbiw	r28, 0x21	; 33
    8600:	29 2d       	mov	r18, r9
    8602:	23 72       	andi	r18, 0x23	; 35
    8604:	23 32       	cpi	r18, 0x23	; 35
    8606:	59 f4       	brne	.+22     	; 0x861e <_printf_fn+0x346>
    8608:	a1 96       	adiw	r28, 0x21	; 33
    860a:	4e ad       	ldd	r20, Y+62	; 0x3e
    860c:	5f ad       	ldd	r21, Y+63	; 0x3f
    860e:	a1 97       	sbiw	r28, 0x21	; 33
    8610:	44 15       	cp	r20, r4
    8612:	55 05       	cpc	r21, r5
    8614:	24 f4       	brge	.+8      	; 0x861e <_printf_fn+0x346>
    8616:	a1 96       	adiw	r28, 0x21	; 33
    8618:	5f ae       	std	Y+63, r5	; 0x3f
    861a:	4e ae       	std	Y+62, r4	; 0x3e
    861c:	a1 97       	sbiw	r28, 0x21	; 33
    861e:	e8 94       	clt
    8620:	94 f8       	bld	r9, 4
    8622:	e8 94       	clt
    8624:	92 f8       	bld	r9, 2
    8626:	e8 94       	clt
    8628:	96 f8       	bld	r9, 6
    862a:	6f 96       	adiw	r28, 0x1f	; 31
    862c:	ae ad       	ldd	r26, Y+62	; 0x3e
    862e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8630:	6f 97       	sbiw	r28, 0x1f	; 31
    8632:	12 97       	sbiw	r26, 0x02	; 2
    8634:	29 f5       	brne	.+74     	; 0x8680 <_printf_fn+0x3a8>
    8636:	51 01       	movw	r10, r2
    8638:	b2 e0       	ldi	r27, 0x02	; 2
    863a:	ab 0e       	add	r10, r27
    863c:	b1 1c       	adc	r11, r1
    863e:	f1 01       	movw	r30, r2
    8640:	80 81       	ld	r24, Z
    8642:	91 81       	ldd	r25, Z+1	; 0x01
    8644:	65 96       	adiw	r28, 0x15	; 21
    8646:	9f af       	std	Y+63, r25	; 0x3f
    8648:	8e af       	std	Y+62, r24	; 0x3e
    864a:	65 97       	sbiw	r28, 0x15	; 21
    864c:	a3 96       	adiw	r28, 0x23	; 35
    864e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8650:	3f ad       	ldd	r19, Y+63	; 0x3f
    8652:	a3 97       	sbiw	r28, 0x23	; 35
    8654:	24 34       	cpi	r18, 0x44	; 68
    8656:	31 05       	cpc	r19, r1
    8658:	09 f0       	breq	.+2      	; 0x865c <_printf_fn+0x384>
    865a:	b8 c0       	rjmp	.+368    	; 0x87cc <_printf_fn+0x4f4>
    865c:	97 ff       	sbrs	r25, 7
    865e:	b0 c0       	rjmp	.+352    	; 0x87c0 <_printf_fn+0x4e8>
    8660:	68 94       	set
    8662:	96 f8       	bld	r9, 6
    8664:	91 95       	neg	r25
    8666:	81 95       	neg	r24
    8668:	91 09       	sbc	r25, r1
    866a:	65 96       	adiw	r28, 0x15	; 21
    866c:	9f af       	std	Y+63, r25	; 0x3f
    866e:	8e af       	std	Y+62, r24	; 0x3e
    8670:	65 97       	sbiw	r28, 0x15	; 21
    8672:	42 e0       	ldi	r20, 0x02	; 2
    8674:	50 e0       	ldi	r21, 0x00	; 0
    8676:	6f 96       	adiw	r28, 0x1f	; 31
    8678:	5f af       	std	Y+63, r21	; 0x3f
    867a:	4e af       	std	Y+62, r20	; 0x3e
    867c:	6f 97       	sbiw	r28, 0x1f	; 31
    867e:	a6 c0       	rjmp	.+332    	; 0x87cc <_printf_fn+0x4f4>
    8680:	6f 96       	adiw	r28, 0x1f	; 31
    8682:	ae ad       	ldd	r26, Y+62	; 0x3e
    8684:	bf ad       	ldd	r27, Y+63	; 0x3f
    8686:	6f 97       	sbiw	r28, 0x1f	; 31
    8688:	14 97       	sbiw	r26, 0x04	; 4
    868a:	59 f5       	brne	.+86     	; 0x86e2 <_printf_fn+0x40a>
    868c:	51 01       	movw	r10, r2
    868e:	b4 e0       	ldi	r27, 0x04	; 4
    8690:	ab 0e       	add	r10, r27
    8692:	b1 1c       	adc	r11, r1
    8694:	f1 01       	movw	r30, r2
    8696:	80 81       	ld	r24, Z
    8698:	91 81       	ldd	r25, Z+1	; 0x01
    869a:	a2 81       	ldd	r26, Z+2	; 0x02
    869c:	b3 81       	ldd	r27, Z+3	; 0x03
    869e:	2f 96       	adiw	r28, 0x0f	; 15
    86a0:	8c af       	std	Y+60, r24	; 0x3c
    86a2:	9d af       	std	Y+61, r25	; 0x3d
    86a4:	ae af       	std	Y+62, r26	; 0x3e
    86a6:	bf af       	std	Y+63, r27	; 0x3f
    86a8:	2f 97       	sbiw	r28, 0x0f	; 15
    86aa:	a3 96       	adiw	r28, 0x23	; 35
    86ac:	2e ad       	ldd	r18, Y+62	; 0x3e
    86ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    86b0:	a3 97       	sbiw	r28, 0x23	; 35
    86b2:	24 34       	cpi	r18, 0x44	; 68
    86b4:	31 05       	cpc	r19, r1
    86b6:	09 f0       	breq	.+2      	; 0x86ba <_printf_fn+0x3e2>
    86b8:	96 c0       	rjmp	.+300    	; 0x87e6 <_printf_fn+0x50e>
    86ba:	b7 ff       	sbrs	r27, 7
    86bc:	8e c0       	rjmp	.+284    	; 0x87da <_printf_fn+0x502>
    86be:	68 94       	set
    86c0:	96 f8       	bld	r9, 6
    86c2:	b0 95       	com	r27
    86c4:	a0 95       	com	r26
    86c6:	90 95       	com	r25
    86c8:	81 95       	neg	r24
    86ca:	9f 4f       	sbci	r25, 0xFF	; 255
    86cc:	af 4f       	sbci	r26, 0xFF	; 255
    86ce:	bf 4f       	sbci	r27, 0xFF	; 255
    86d0:	2f 96       	adiw	r28, 0x0f	; 15
    86d2:	8c af       	std	Y+60, r24	; 0x3c
    86d4:	9d af       	std	Y+61, r25	; 0x3d
    86d6:	ae af       	std	Y+62, r26	; 0x3e
    86d8:	bf af       	std	Y+63, r27	; 0x3f
    86da:	2f 97       	sbiw	r28, 0x0f	; 15
    86dc:	7e c0       	rjmp	.+252    	; 0x87da <_printf_fn+0x502>
    86de:	81 e0       	ldi	r24, 0x01	; 1
    86e0:	90 e0       	ldi	r25, 0x00	; 0
    86e2:	6f 96       	adiw	r28, 0x1f	; 31
    86e4:	ae ad       	ldd	r26, Y+62	; 0x3e
    86e6:	bf ad       	ldd	r27, Y+63	; 0x3f
    86e8:	6f 97       	sbiw	r28, 0x1f	; 31
    86ea:	51 01       	movw	r10, r2
    86ec:	18 97       	sbiw	r26, 0x08	; 8
    86ee:	09 f0       	breq	.+2      	; 0x86f2 <_printf_fn+0x41a>
    86f0:	81 c0       	rjmp	.+258    	; 0x87f4 <_printf_fn+0x51c>
    86f2:	b8 e0       	ldi	r27, 0x08	; 8
    86f4:	ab 0e       	add	r10, r27
    86f6:	b1 1c       	adc	r11, r1
    86f8:	f1 01       	movw	r30, r2
    86fa:	f0 81       	ld	r31, Z
    86fc:	aa 96       	adiw	r28, 0x2a	; 42
    86fe:	ff af       	std	Y+63, r31	; 0x3f
    8700:	aa 97       	sbiw	r28, 0x2a	; 42
    8702:	f1 01       	movw	r30, r2
    8704:	f1 80       	ldd	r15, Z+1	; 0x01
    8706:	02 81       	ldd	r16, Z+2	; 0x02
    8708:	13 81       	ldd	r17, Z+3	; 0x03
    870a:	b4 81       	ldd	r27, Z+4	; 0x04
    870c:	f5 81       	ldd	r31, Z+5	; 0x05
    870e:	ab 96       	adiw	r28, 0x2b	; 43
    8710:	ff af       	std	Y+63, r31	; 0x3f
    8712:	ab 97       	sbiw	r28, 0x2b	; 43
    8714:	f1 01       	movw	r30, r2
    8716:	f6 81       	ldd	r31, Z+6	; 0x06
    8718:	ac 96       	adiw	r28, 0x2c	; 44
    871a:	ff af       	std	Y+63, r31	; 0x3f
    871c:	ac 97       	sbiw	r28, 0x2c	; 44
    871e:	f1 01       	movw	r30, r2
    8720:	37 80       	ldd	r3, Z+7	; 0x07
    8722:	aa 96       	adiw	r28, 0x2a	; 42
    8724:	ff ad       	ldd	r31, Y+63	; 0x3f
    8726:	aa 97       	sbiw	r28, 0x2a	; 42
    8728:	24 96       	adiw	r28, 0x04	; 4
    872a:	ff af       	std	Y+63, r31	; 0x3f
    872c:	24 97       	sbiw	r28, 0x04	; 4
    872e:	25 96       	adiw	r28, 0x05	; 5
    8730:	ff ae       	std	Y+63, r15	; 0x3f
    8732:	25 97       	sbiw	r28, 0x05	; 5
    8734:	26 96       	adiw	r28, 0x06	; 6
    8736:	0f af       	std	Y+63, r16	; 0x3f
    8738:	26 97       	sbiw	r28, 0x06	; 6
    873a:	27 96       	adiw	r28, 0x07	; 7
    873c:	1f af       	std	Y+63, r17	; 0x3f
    873e:	27 97       	sbiw	r28, 0x07	; 7
    8740:	28 96       	adiw	r28, 0x08	; 8
    8742:	bf af       	std	Y+63, r27	; 0x3f
    8744:	28 97       	sbiw	r28, 0x08	; 8
    8746:	ab 96       	adiw	r28, 0x2b	; 43
    8748:	ef ad       	ldd	r30, Y+63	; 0x3f
    874a:	ab 97       	sbiw	r28, 0x2b	; 43
    874c:	29 96       	adiw	r28, 0x09	; 9
    874e:	ef af       	std	Y+63, r30	; 0x3f
    8750:	29 97       	sbiw	r28, 0x09	; 9
    8752:	ac 96       	adiw	r28, 0x2c	; 44
    8754:	ff ad       	ldd	r31, Y+63	; 0x3f
    8756:	ac 97       	sbiw	r28, 0x2c	; 44
    8758:	2a 96       	adiw	r28, 0x0a	; 10
    875a:	ff af       	std	Y+63, r31	; 0x3f
    875c:	2a 97       	sbiw	r28, 0x0a	; 10
    875e:	2b 96       	adiw	r28, 0x0b	; 11
    8760:	3f ae       	std	Y+63, r3	; 0x3f
    8762:	2b 97       	sbiw	r28, 0x0b	; 11
    8764:	89 2b       	or	r24, r25
    8766:	09 f4       	brne	.+2      	; 0x876a <_printf_fn+0x492>
    8768:	50 c0       	rjmp	.+160    	; 0x880a <_printf_fn+0x532>
    876a:	aa 96       	adiw	r28, 0x2a	; 42
    876c:	2f ad       	ldd	r18, Y+63	; 0x3f
    876e:	aa 97       	sbiw	r28, 0x2a	; 42
    8770:	3f 2d       	mov	r19, r15
    8772:	a8 01       	movw	r20, r16
    8774:	6b 2f       	mov	r22, r27
    8776:	7e 2f       	mov	r23, r30
    8778:	8f 2f       	mov	r24, r31
    877a:	93 2d       	mov	r25, r3
    877c:	a0 e0       	ldi	r26, 0x00	; 0
    877e:	0e 94 cf e0 	call	0x1c19e	; 0x1c19e <__cmpdi2_s8>
    8782:	0c f0       	brlt	.+2      	; 0x8786 <_printf_fn+0x4ae>
    8784:	42 c0       	rjmp	.+132    	; 0x880a <_printf_fn+0x532>
    8786:	68 94       	set
    8788:	96 f8       	bld	r9, 6
    878a:	0e 94 81 e0 	call	0x1c102	; 0x1c102 <__negdi2>
    878e:	24 96       	adiw	r28, 0x04	; 4
    8790:	2f af       	std	Y+63, r18	; 0x3f
    8792:	24 97       	sbiw	r28, 0x04	; 4
    8794:	25 96       	adiw	r28, 0x05	; 5
    8796:	3f af       	std	Y+63, r19	; 0x3f
    8798:	25 97       	sbiw	r28, 0x05	; 5
    879a:	26 96       	adiw	r28, 0x06	; 6
    879c:	4f af       	std	Y+63, r20	; 0x3f
    879e:	26 97       	sbiw	r28, 0x06	; 6
    87a0:	27 96       	adiw	r28, 0x07	; 7
    87a2:	5f af       	std	Y+63, r21	; 0x3f
    87a4:	27 97       	sbiw	r28, 0x07	; 7
    87a6:	28 96       	adiw	r28, 0x08	; 8
    87a8:	6f af       	std	Y+63, r22	; 0x3f
    87aa:	28 97       	sbiw	r28, 0x08	; 8
    87ac:	29 96       	adiw	r28, 0x09	; 9
    87ae:	7f af       	std	Y+63, r23	; 0x3f
    87b0:	29 97       	sbiw	r28, 0x09	; 9
    87b2:	2a 96       	adiw	r28, 0x0a	; 10
    87b4:	8f af       	std	Y+63, r24	; 0x3f
    87b6:	2a 97       	sbiw	r28, 0x0a	; 10
    87b8:	2b 96       	adiw	r28, 0x0b	; 11
    87ba:	9f af       	std	Y+63, r25	; 0x3f
    87bc:	2b 97       	sbiw	r28, 0x0b	; 11
    87be:	25 c0       	rjmp	.+74     	; 0x880a <_printf_fn+0x532>
    87c0:	22 e0       	ldi	r18, 0x02	; 2
    87c2:	30 e0       	ldi	r19, 0x00	; 0
    87c4:	6f 96       	adiw	r28, 0x1f	; 31
    87c6:	3f af       	std	Y+63, r19	; 0x3f
    87c8:	2e af       	std	Y+62, r18	; 0x3e
    87ca:	6f 97       	sbiw	r28, 0x1f	; 31
    87cc:	6c 96       	adiw	r28, 0x1c	; 28
    87ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    87d0:	6c 97       	sbiw	r28, 0x1c	; 28
    87d2:	6d 96       	adiw	r28, 0x1d	; 29
    87d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    87d6:	6d 97       	sbiw	r28, 0x1d	; 29
    87d8:	1e c0       	rjmp	.+60     	; 0x8816 <_printf_fn+0x53e>
    87da:	44 e0       	ldi	r20, 0x04	; 4
    87dc:	50 e0       	ldi	r21, 0x00	; 0
    87de:	6f 96       	adiw	r28, 0x1f	; 31
    87e0:	5f af       	std	Y+63, r21	; 0x3f
    87e2:	4e af       	std	Y+62, r20	; 0x3e
    87e4:	6f 97       	sbiw	r28, 0x1f	; 31
    87e6:	6a 96       	adiw	r28, 0x1a	; 26
    87e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    87ea:	6a 97       	sbiw	r28, 0x1a	; 26
    87ec:	6b 96       	adiw	r28, 0x1b	; 27
    87ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    87f0:	6b 97       	sbiw	r28, 0x1b	; 27
    87f2:	11 c0       	rjmp	.+34     	; 0x8816 <_printf_fn+0x53e>
    87f4:	66 96       	adiw	r28, 0x16	; 22
    87f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    87f8:	66 97       	sbiw	r28, 0x16	; 22
    87fa:	67 96       	adiw	r28, 0x17	; 23
    87fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    87fe:	67 97       	sbiw	r28, 0x17	; 23
    8800:	a3 96       	adiw	r28, 0x23	; 35
    8802:	1f ae       	std	Y+63, r1	; 0x3f
    8804:	1e ae       	std	Y+62, r1	; 0x3e
    8806:	a3 97       	sbiw	r28, 0x23	; 35
    8808:	06 c0       	rjmp	.+12     	; 0x8816 <_printf_fn+0x53e>
    880a:	68 96       	adiw	r28, 0x18	; 24
    880c:	8f ad       	ldd	r24, Y+63	; 0x3f
    880e:	68 97       	sbiw	r28, 0x18	; 24
    8810:	69 96       	adiw	r28, 0x19	; 25
    8812:	9f ad       	ldd	r25, Y+63	; 0x3f
    8814:	69 97       	sbiw	r28, 0x19	; 25
    8816:	5f ef       	ldi	r21, 0xFF	; 255
    8818:	65 1a       	sub	r6, r21
    881a:	75 0a       	sbc	r7, r21
    881c:	85 0a       	sbc	r8, r21
    881e:	15 01       	movw	r2, r10
    8820:	2d c0       	rjmp	.+90     	; 0x887c <_printf_fn+0x5a4>
    8822:	91 fc       	sbrc	r9, 1
    8824:	08 c0       	rjmp	.+16     	; 0x8836 <_printf_fn+0x55e>
    8826:	68 94       	set
    8828:	91 f8       	bld	r9, 1
    882a:	86 e0       	ldi	r24, 0x06	; 6
    882c:	90 e0       	ldi	r25, 0x00	; 0
    882e:	a1 96       	adiw	r28, 0x21	; 33
    8830:	9f af       	std	Y+63, r25	; 0x3f
    8832:	8e af       	std	Y+62, r24	; 0x3e
    8834:	a1 97       	sbiw	r28, 0x21	; 33
    8836:	d1 01       	movw	r26, r2
    8838:	2d 91       	ld	r18, X+
    883a:	3d 91       	ld	r19, X+
    883c:	4d 91       	ld	r20, X+
    883e:	5c 91       	ld	r21, X
    8840:	a9 96       	adiw	r28, 0x29	; 41
    8842:	2c af       	std	Y+60, r18	; 0x3c
    8844:	3d af       	std	Y+61, r19	; 0x3d
    8846:	4e af       	std	Y+62, r20	; 0x3e
    8848:	5f af       	std	Y+63, r21	; 0x3f
    884a:	a9 97       	sbiw	r28, 0x29	; 41
    884c:	bf ef       	ldi	r27, 0xFF	; 255
    884e:	6b 1a       	sub	r6, r27
    8850:	7b 0a       	sbc	r7, r27
    8852:	8b 0a       	sbc	r8, r27
    8854:	f1 01       	movw	r30, r2
    8856:	34 96       	adiw	r30, 0x04	; 4
    8858:	1f 01       	movw	r2, r30
    885a:	0a c0       	rjmp	.+20     	; 0x8870 <_printf_fn+0x598>
    885c:	ff ef       	ldi	r31, 0xFF	; 255
    885e:	6f 1a       	sub	r6, r31
    8860:	7f 0a       	sbc	r7, r31
    8862:	8f 0a       	sbc	r8, r31
    8864:	b0 c0       	rjmp	.+352    	; 0x89c6 <_printf_fn+0x6ee>
    8866:	2f ef       	ldi	r18, 0xFF	; 255
    8868:	62 1a       	sub	r6, r18
    886a:	72 0a       	sbc	r7, r18
    886c:	82 0a       	sbc	r8, r18
    886e:	b8 c0       	rjmp	.+368    	; 0x89e0 <_printf_fn+0x708>
    8870:	66 96       	adiw	r28, 0x16	; 22
    8872:	8f ad       	ldd	r24, Y+63	; 0x3f
    8874:	66 97       	sbiw	r28, 0x16	; 22
    8876:	67 96       	adiw	r28, 0x17	; 23
    8878:	9f ad       	ldd	r25, Y+63	; 0x3f
    887a:	67 97       	sbiw	r28, 0x17	; 23
    887c:	a3 96       	adiw	r28, 0x23	; 35
    887e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8880:	ff ad       	ldd	r31, Y+63	; 0x3f
    8882:	a3 97       	sbiw	r28, 0x23	; 35
    8884:	e2 54       	subi	r30, 0x42	; 66
    8886:	f1 09       	sbc	r31, r1
    8888:	e7 33       	cpi	r30, 0x37	; 55
    888a:	f1 05       	cpc	r31, r1
    888c:	08 f0       	brcs	.+2      	; 0x8890 <_printf_fn+0x5b8>
    888e:	f9 c0       	rjmp	.+498    	; 0x8a82 <_printf_fn+0x7aa>
    8890:	e3 58       	subi	r30, 0x83	; 131
    8892:	ff 4f       	sbci	r31, 0xFF	; 255
    8894:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
    8898:	e8 94       	clt
    889a:	94 f8       	bld	r9, 4
    889c:	e8 94       	clt
    889e:	92 f8       	bld	r9, 2
    88a0:	a9 2c       	mov	r10, r9
    88a2:	b1 2c       	mov	r11, r1
    88a4:	a1 96       	adiw	r28, 0x21	; 33
    88a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    88a8:	df ac       	ldd	r13, Y+63	; 0x3f
    88aa:	a1 97       	sbiw	r28, 0x21	; 33
    88ac:	72 01       	movw	r14, r4
    88ae:	0a e0       	ldi	r16, 0x0A	; 10
    88b0:	10 e0       	ldi	r17, 0x00	; 0
    88b2:	13 c0       	rjmp	.+38     	; 0x88da <_printf_fn+0x602>
    88b4:	a9 2c       	mov	r10, r9
    88b6:	b1 2c       	mov	r11, r1
    88b8:	a1 96       	adiw	r28, 0x21	; 33
    88ba:	ce ac       	ldd	r12, Y+62	; 0x3e
    88bc:	df ac       	ldd	r13, Y+63	; 0x3f
    88be:	a1 97       	sbiw	r28, 0x21	; 33
    88c0:	72 01       	movw	r14, r4
    88c2:	02 e0       	ldi	r16, 0x02	; 2
    88c4:	10 e0       	ldi	r17, 0x00	; 0
    88c6:	09 c0       	rjmp	.+18     	; 0x88da <_printf_fn+0x602>
    88c8:	a9 2c       	mov	r10, r9
    88ca:	b1 2c       	mov	r11, r1
    88cc:	a1 96       	adiw	r28, 0x21	; 33
    88ce:	ce ac       	ldd	r12, Y+62	; 0x3e
    88d0:	df ac       	ldd	r13, Y+63	; 0x3f
    88d2:	a1 97       	sbiw	r28, 0x21	; 33
    88d4:	72 01       	movw	r14, r4
    88d6:	08 e0       	ldi	r16, 0x08	; 8
    88d8:	10 e0       	ldi	r17, 0x00	; 0
    88da:	22 e4       	ldi	r18, 0x42	; 66
    88dc:	30 e0       	ldi	r19, 0x00	; 0
    88de:	ae 01       	movw	r20, r28
    88e0:	4f 5f       	subi	r20, 0xFF	; 255
    88e2:	5f 4f       	sbci	r21, 0xFF	; 255
    88e4:	6f 96       	adiw	r28, 0x1f	; 31
    88e6:	6e ad       	ldd	r22, Y+62	; 0x3e
    88e8:	7f ad       	ldd	r23, Y+63	; 0x3f
    88ea:	6f 97       	sbiw	r28, 0x1f	; 31
    88ec:	fb d9       	rcall	.-3082   	; 0x7ce4 <p_ntoa>
    88ee:	30 c0       	rjmp	.+96     	; 0x8950 <_printf_fn+0x678>
    88f0:	a9 2c       	mov	r10, r9
    88f2:	b1 2c       	mov	r11, r1
    88f4:	a1 96       	adiw	r28, 0x21	; 33
    88f6:	ce ac       	ldd	r12, Y+62	; 0x3e
    88f8:	df ac       	ldd	r13, Y+63	; 0x3f
    88fa:	a1 97       	sbiw	r28, 0x21	; 33
    88fc:	72 01       	movw	r14, r4
    88fe:	00 e1       	ldi	r16, 0x10	; 16
    8900:	10 e0       	ldi	r17, 0x00	; 0
    8902:	22 e4       	ldi	r18, 0x42	; 66
    8904:	30 e0       	ldi	r19, 0x00	; 0
    8906:	ae 01       	movw	r20, r28
    8908:	4f 5f       	subi	r20, 0xFF	; 255
    890a:	5f 4f       	sbci	r21, 0xFF	; 255
    890c:	6f 96       	adiw	r28, 0x1f	; 31
    890e:	6e ad       	ldd	r22, Y+62	; 0x3e
    8910:	7f ad       	ldd	r23, Y+63	; 0x3f
    8912:	6f 97       	sbiw	r28, 0x1f	; 31
    8914:	e7 d9       	rcall	.-3122   	; 0x7ce4 <p_ntoa>
    8916:	7c 01       	movw	r14, r24
    8918:	a3 96       	adiw	r28, 0x23	; 35
    891a:	6e ad       	ldd	r22, Y+62	; 0x3e
    891c:	7f ad       	ldd	r23, Y+63	; 0x3f
    891e:	a3 97       	sbiw	r28, 0x23	; 35
    8920:	67 7f       	andi	r22, 0xF7	; 247
    8922:	60 35       	cpi	r22, 0x50	; 80
    8924:	71 05       	cpc	r23, r1
    8926:	c9 f5       	brne	.+114    	; 0x899a <_printf_fn+0x6c2>
    8928:	34 c0       	rjmp	.+104    	; 0x8992 <_printf_fn+0x6ba>
    892a:	c9 2c       	mov	r12, r9
    892c:	d1 2c       	mov	r13, r1
    892e:	a1 96       	adiw	r28, 0x21	; 33
    8930:	ee ac       	ldd	r14, Y+62	; 0x3e
    8932:	ff ac       	ldd	r15, Y+63	; 0x3f
    8934:	a1 97       	sbiw	r28, 0x21	; 33
    8936:	82 01       	movw	r16, r4
    8938:	22 e4       	ldi	r18, 0x42	; 66
    893a:	30 e0       	ldi	r19, 0x00	; 0
    893c:	ae 01       	movw	r20, r28
    893e:	4f 5f       	subi	r20, 0xFF	; 255
    8940:	5f 4f       	sbci	r21, 0xFF	; 255
    8942:	a9 96       	adiw	r28, 0x29	; 41
    8944:	6c ad       	ldd	r22, Y+60	; 0x3c
    8946:	7d ad       	ldd	r23, Y+61	; 0x3d
    8948:	8e ad       	ldd	r24, Y+62	; 0x3e
    894a:	9f ad       	ldd	r25, Y+63	; 0x3f
    894c:	a9 97       	sbiw	r28, 0x29	; 41
    894e:	1f da       	rcall	.-3010   	; 0x7d8e <p_ftoa>
    8950:	93 fa       	bst	r9, 3
    8952:	00 27       	eor	r16, r16
    8954:	00 f9       	bld	r16, 0
    8956:	10 e0       	ldi	r17, 0x00	; 0
    8958:	9c 01       	movw	r18, r24
    895a:	24 c0       	rjmp	.+72     	; 0x89a4 <_printf_fn+0x6cc>
    895c:	c9 2c       	mov	r12, r9
    895e:	d1 2c       	mov	r13, r1
    8960:	a1 96       	adiw	r28, 0x21	; 33
    8962:	ee ac       	ldd	r14, Y+62	; 0x3e
    8964:	ff ac       	ldd	r15, Y+63	; 0x3f
    8966:	a1 97       	sbiw	r28, 0x21	; 33
    8968:	82 01       	movw	r16, r4
    896a:	22 e4       	ldi	r18, 0x42	; 66
    896c:	30 e0       	ldi	r19, 0x00	; 0
    896e:	ae 01       	movw	r20, r28
    8970:	4f 5f       	subi	r20, 0xFF	; 255
    8972:	5f 4f       	sbci	r21, 0xFF	; 255
    8974:	a9 96       	adiw	r28, 0x29	; 41
    8976:	6c ad       	ldd	r22, Y+60	; 0x3c
    8978:	7d ad       	ldd	r23, Y+61	; 0x3d
    897a:	8e ad       	ldd	r24, Y+62	; 0x3e
    897c:	9f ad       	ldd	r25, Y+63	; 0x3f
    897e:	a9 97       	sbiw	r28, 0x29	; 41
    8980:	0d db       	rcall	.-2534   	; 0x7f9c <p_etoa>
    8982:	7c 01       	movw	r14, r24
    8984:	a3 96       	adiw	r28, 0x23	; 35
    8986:	4e ad       	ldd	r20, Y+62	; 0x3e
    8988:	5f ad       	ldd	r21, Y+63	; 0x3f
    898a:	a3 97       	sbiw	r28, 0x23	; 35
    898c:	45 34       	cpi	r20, 0x45	; 69
    898e:	51 05       	cpc	r21, r1
    8990:	21 f4       	brne	.+8      	; 0x899a <_printf_fn+0x6c2>
    8992:	ce 01       	movw	r24, r28
    8994:	01 96       	adiw	r24, 0x01	; 1
    8996:	0e 94 11 31 	call	0x6222	; 0x6222 <strupper>
    899a:	93 fa       	bst	r9, 3
    899c:	00 27       	eor	r16, r16
    899e:	00 f9       	bld	r16, 0
    89a0:	10 e0       	ldi	r17, 0x00	; 0
    89a2:	97 01       	movw	r18, r14
    89a4:	a2 01       	movw	r20, r4
    89a6:	be 01       	movw	r22, r28
    89a8:	6f 5f       	subi	r22, 0xFF	; 255
    89aa:	7f 4f       	sbci	r23, 0xFF	; 255
    89ac:	a5 96       	adiw	r28, 0x25	; 37
    89ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    89b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    89b2:	a5 97       	sbiw	r28, 0x25	; 37
    89b4:	4f dc       	rcall	.-1890   	; 0x8254 <_puts_pad>
    89b6:	69 c0       	rjmp	.+210    	; 0x8a8a <_printf_fn+0x7b2>
    89b8:	a3 96       	adiw	r28, 0x23	; 35
    89ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    89bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    89be:	a3 97       	sbiw	r28, 0x23	; 35
    89c0:	83 37       	cpi	r24, 0x73	; 115
    89c2:	91 05       	cpc	r25, r1
    89c4:	69 f4       	brne	.+26     	; 0x89e0 <_printf_fn+0x708>
    89c6:	71 01       	movw	r14, r2
    89c8:	92 e0       	ldi	r25, 0x02	; 2
    89ca:	e9 0e       	add	r14, r25
    89cc:	f1 1c       	adc	r15, r1
    89ce:	d1 01       	movw	r26, r2
    89d0:	6d 91       	ld	r22, X+
    89d2:	7c 91       	ld	r23, X
    89d4:	61 15       	cp	r22, r1
    89d6:	71 05       	cpc	r23, r1
    89d8:	91 f4       	brne	.+36     	; 0x89fe <_printf_fn+0x726>
    89da:	6c ee       	ldi	r22, 0xEC	; 236
    89dc:	73 e0       	ldi	r23, 0x03	; 3
    89de:	0f c0       	rjmp	.+30     	; 0x89fe <_printf_fn+0x726>
    89e0:	71 01       	movw	r14, r2
    89e2:	b2 e0       	ldi	r27, 0x02	; 2
    89e4:	eb 0e       	add	r14, r27
    89e6:	f1 1c       	adc	r15, r1
    89e8:	f1 01       	movw	r30, r2
    89ea:	80 81       	ld	r24, Z
    89ec:	60 96       	adiw	r28, 0x10	; 16
    89ee:	8f af       	std	Y+63, r24	; 0x3f
    89f0:	60 97       	sbiw	r28, 0x10	; 16
    89f2:	61 96       	adiw	r28, 0x11	; 17
    89f4:	1f ae       	std	Y+63, r1	; 0x3f
    89f6:	61 97       	sbiw	r28, 0x11	; 17
    89f8:	be 01       	movw	r22, r28
    89fa:	61 5b       	subi	r22, 0xB1	; 177
    89fc:	7f 4f       	sbci	r23, 0xFF	; 255
    89fe:	fb 01       	movw	r30, r22
    8a00:	01 90       	ld	r0, Z+
    8a02:	00 20       	and	r0, r0
    8a04:	e9 f7       	brne	.-6      	; 0x8a00 <_printf_fn+0x728>
    8a06:	31 97       	sbiw	r30, 0x01	; 1
    8a08:	e6 1b       	sub	r30, r22
    8a0a:	f7 0b       	sbc	r31, r23
    8a0c:	a1 96       	adiw	r28, 0x21	; 33
    8a0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a10:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a12:	a1 97       	sbiw	r28, 0x21	; 33
    8a14:	23 2b       	or	r18, r19
    8a16:	21 f4       	brne	.+8      	; 0x8a20 <_printf_fn+0x748>
    8a18:	a1 96       	adiw	r28, 0x21	; 33
    8a1a:	ff af       	std	Y+63, r31	; 0x3f
    8a1c:	ee af       	std	Y+62, r30	; 0x3e
    8a1e:	a1 97       	sbiw	r28, 0x21	; 33
    8a20:	a1 96       	adiw	r28, 0x21	; 33
    8a22:	4e ad       	ldd	r20, Y+62	; 0x3e
    8a24:	5f ad       	ldd	r21, Y+63	; 0x3f
    8a26:	a1 97       	sbiw	r28, 0x21	; 33
    8a28:	44 16       	cp	r4, r20
    8a2a:	55 06       	cpc	r5, r21
    8a2c:	3c f4       	brge	.+14     	; 0x8a3c <_printf_fn+0x764>
    8a2e:	41 14       	cp	r4, r1
    8a30:	51 04       	cpc	r5, r1
    8a32:	21 f0       	breq	.+8      	; 0x8a3c <_printf_fn+0x764>
    8a34:	a1 96       	adiw	r28, 0x21	; 33
    8a36:	5f ae       	std	Y+63, r5	; 0x3f
    8a38:	4e ae       	std	Y+62, r4	; 0x3e
    8a3a:	a1 97       	sbiw	r28, 0x21	; 33
    8a3c:	93 fa       	bst	r9, 3
    8a3e:	00 27       	eor	r16, r16
    8a40:	00 f9       	bld	r16, 0
    8a42:	10 e0       	ldi	r17, 0x00	; 0
    8a44:	a1 96       	adiw	r28, 0x21	; 33
    8a46:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a48:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a4a:	a1 97       	sbiw	r28, 0x21	; 33
    8a4c:	a2 01       	movw	r20, r4
    8a4e:	a5 96       	adiw	r28, 0x25	; 37
    8a50:	8e ad       	ldd	r24, Y+62	; 0x3e
    8a52:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a54:	a5 97       	sbiw	r28, 0x25	; 37
    8a56:	fe db       	rcall	.-2052   	; 0x8254 <_puts_pad>
    8a58:	17 01       	movw	r2, r14
    8a5a:	17 c0       	rjmp	.+46     	; 0x8a8a <_printf_fn+0x7b2>
    8a5c:	f6 01       	movw	r30, r12
    8a5e:	5e 2d       	mov	r21, r14
    8a60:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__xload_1>
    8a64:	66 23       	and	r22, r22
    8a66:	89 f0       	breq	.+34     	; 0x8a8a <_printf_fn+0x7b2>
    8a68:	5f ef       	ldi	r21, 0xFF	; 255
    8a6a:	c5 1a       	sub	r12, r21
    8a6c:	d5 0a       	sbc	r13, r21
    8a6e:	e5 0a       	sbc	r14, r21
    8a70:	a5 96       	adiw	r28, 0x25	; 37
    8a72:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a74:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a76:	a5 97       	sbiw	r28, 0x25	; 37
    8a78:	ed 91       	ld	r30, X+
    8a7a:	fc 91       	ld	r31, X
    8a7c:	11 97       	sbiw	r26, 0x01	; 1
    8a7e:	cd 01       	movw	r24, r26
    8a80:	09 95       	icall
    8a82:	6c 14       	cp	r6, r12
    8a84:	7d 04       	cpc	r7, r13
    8a86:	8e 04       	cpc	r8, r14
    8a88:	48 f7       	brcc	.-46     	; 0x8a5c <_printf_fn+0x784>
    8a8a:	e8 2c       	mov	r14, r8
    8a8c:	63 01       	movw	r12, r6
    8a8e:	53 cc       	rjmp	.-1882   	; 0x8336 <_printf_fn+0x5e>
    8a90:	e2 e0       	ldi	r30, 0x02	; 2
    8a92:	f0 e0       	ldi	r31, 0x00	; 0
    8a94:	6f 96       	adiw	r28, 0x1f	; 31
    8a96:	ff af       	std	Y+63, r31	; 0x3f
    8a98:	ee af       	std	Y+62, r30	; 0x3e
    8a9a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a9c:	5f cd       	rjmp	.-1346   	; 0x855c <_printf_fn+0x284>
    8a9e:	6f 96       	adiw	r28, 0x1f	; 31
    8aa0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8aa2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8aa4:	6f 97       	sbiw	r28, 0x1f	; 31
    8aa6:	32 97       	sbiw	r30, 0x02	; 2
    8aa8:	61 f4       	brne	.+24     	; 0x8ac2 <_printf_fn+0x7ea>
    8aaa:	51 01       	movw	r10, r2
    8aac:	f2 e0       	ldi	r31, 0x02	; 2
    8aae:	af 0e       	add	r10, r31
    8ab0:	b1 1c       	adc	r11, r1
    8ab2:	d1 01       	movw	r26, r2
    8ab4:	8d 91       	ld	r24, X+
    8ab6:	9c 91       	ld	r25, X
    8ab8:	65 96       	adiw	r28, 0x15	; 21
    8aba:	9f af       	std	Y+63, r25	; 0x3f
    8abc:	8e af       	std	Y+62, r24	; 0x3e
    8abe:	65 97       	sbiw	r28, 0x15	; 21
    8ac0:	cd cd       	rjmp	.-1126   	; 0x865c <_printf_fn+0x384>
    8ac2:	6f 96       	adiw	r28, 0x1f	; 31
    8ac4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ac6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8ac8:	6f 97       	sbiw	r28, 0x1f	; 31
    8aca:	24 30       	cpi	r18, 0x04	; 4
    8acc:	31 05       	cpc	r19, r1
    8ace:	09 f0       	breq	.+2      	; 0x8ad2 <_printf_fn+0x7fa>
    8ad0:	06 ce       	rjmp	.-1012   	; 0x86de <_printf_fn+0x406>
    8ad2:	51 01       	movw	r10, r2
    8ad4:	f4 e0       	ldi	r31, 0x04	; 4
    8ad6:	af 0e       	add	r10, r31
    8ad8:	b1 1c       	adc	r11, r1
    8ada:	f1 01       	movw	r30, r2
    8adc:	80 81       	ld	r24, Z
    8ade:	91 81       	ldd	r25, Z+1	; 0x01
    8ae0:	a2 81       	ldd	r26, Z+2	; 0x02
    8ae2:	b3 81       	ldd	r27, Z+3	; 0x03
    8ae4:	2f 96       	adiw	r28, 0x0f	; 15
    8ae6:	8c af       	std	Y+60, r24	; 0x3c
    8ae8:	9d af       	std	Y+61, r25	; 0x3d
    8aea:	ae af       	std	Y+62, r26	; 0x3e
    8aec:	bf af       	std	Y+63, r27	; 0x3f
    8aee:	2f 97       	sbiw	r28, 0x0f	; 15
    8af0:	e4 cd       	rjmp	.-1080   	; 0x86ba <_printf_fn+0x3e2>
    8af2:	c5 59       	subi	r28, 0x95	; 149
    8af4:	df 4f       	sbci	r29, 0xFF	; 255
    8af6:	e2 e1       	ldi	r30, 0x12	; 18
    8af8:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00008afc <vsnprintf_P>:
    8afc:	a8 e0       	ldi	r26, 0x08	; 8
    8afe:	b0 e0       	ldi	r27, 0x00	; 0
    8b00:	e4 e8       	ldi	r30, 0x84	; 132
    8b02:	f5 e4       	ldi	r31, 0x45	; 69
    8b04:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
    8b08:	7c 01       	movw	r14, r24
    8b0a:	cb 01       	movw	r24, r22
    8b0c:	64 2f       	mov	r22, r20
    8b0e:	a9 01       	movw	r20, r18
    8b10:	98 01       	movw	r18, r16
    8b12:	f7 01       	movw	r30, r14
    8b14:	10 82       	st	Z, r1
    8b16:	e3 e9       	ldi	r30, 0x93	; 147
    8b18:	fd e3       	ldi	r31, 0x3D	; 61
    8b1a:	fa 83       	std	Y+2, r31	; 0x02
    8b1c:	e9 83       	std	Y+1, r30	; 0x01
    8b1e:	9e 83       	std	Y+6, r25	; 0x06
    8b20:	8d 83       	std	Y+5, r24	; 0x05
    8b22:	18 86       	std	Y+8, r1	; 0x08
    8b24:	1f 82       	std	Y+7, r1	; 0x07
    8b26:	fc 82       	std	Y+4, r15	; 0x04
    8b28:	eb 82       	std	Y+3, r14	; 0x03
    8b2a:	ce 01       	movw	r24, r28
    8b2c:	01 96       	adiw	r24, 0x01	; 1
    8b2e:	d4 db       	rcall	.-2136   	; 0x82d8 <_printf_fn>
    8b30:	f7 01       	movw	r30, r14
    8b32:	01 90       	ld	r0, Z+
    8b34:	00 20       	and	r0, r0
    8b36:	e9 f7       	brne	.-6      	; 0x8b32 <vsnprintf_P+0x36>
    8b38:	cf 01       	movw	r24, r30
    8b3a:	01 97       	sbiw	r24, 0x01	; 1
    8b3c:	8e 19       	sub	r24, r14
    8b3e:	9f 09       	sbc	r25, r15
    8b40:	28 96       	adiw	r28, 0x08	; 8
    8b42:	e6 e0       	ldi	r30, 0x06	; 6
    8b44:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00008b48 <snprintf_P>:
    8b48:	a0 e0       	ldi	r26, 0x00	; 0
    8b4a:	b0 e0       	ldi	r27, 0x00	; 0
    8b4c:	ea ea       	ldi	r30, 0xAA	; 170
    8b4e:	f5 e4       	ldi	r31, 0x45	; 69
    8b50:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    8b54:	8e 01       	movw	r16, r28
    8b56:	02 5f       	subi	r16, 0xF2	; 242
    8b58:	1f 4f       	sbci	r17, 0xFF	; 255
    8b5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    8b5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    8b5e:	4d 85       	ldd	r20, Y+13	; 0x0d
    8b60:	69 85       	ldd	r22, Y+9	; 0x09
    8b62:	7a 85       	ldd	r23, Y+10	; 0x0a
    8b64:	8f 81       	ldd	r24, Y+7	; 0x07
    8b66:	98 85       	ldd	r25, Y+8	; 0x08
    8b68:	c9 df       	rcall	.-110    	; 0x8afc <vsnprintf_P>
    8b6a:	e4 e0       	ldi	r30, 0x04	; 4
    8b6c:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00008b70 <sprintf_P>:
    8b70:	a0 e0       	ldi	r26, 0x00	; 0
    8b72:	b0 e0       	ldi	r27, 0x00	; 0
    8b74:	ee eb       	ldi	r30, 0xBE	; 190
    8b76:	f5 e4       	ldi	r31, 0x45	; 69
    8b78:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    8b7c:	8e 01       	movw	r16, r28
    8b7e:	04 5f       	subi	r16, 0xF4	; 244
    8b80:	1f 4f       	sbci	r17, 0xFF	; 255
    8b82:	29 85       	ldd	r18, Y+9	; 0x09
    8b84:	3a 85       	ldd	r19, Y+10	; 0x0a
    8b86:	4b 85       	ldd	r20, Y+11	; 0x0b
    8b88:	60 e0       	ldi	r22, 0x00	; 0
    8b8a:	74 e0       	ldi	r23, 0x04	; 4
    8b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    8b8e:	98 85       	ldd	r25, Y+8	; 0x08
    8b90:	b5 df       	rcall	.-150    	; 0x8afc <vsnprintf_P>
    8b92:	e4 e0       	ldi	r30, 0x04	; 4
    8b94:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00008b98 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8b98:	a8 e0       	ldi	r26, 0x08	; 8
    8b9a:	b0 e0       	ldi	r27, 0x00	; 0
    8b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    8b9e:	f5 e4       	ldi	r31, 0x45	; 69
    8ba0:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    8ba4:	9e 01       	movw	r18, r28
    8ba6:	23 5f       	subi	r18, 0xF3	; 243
    8ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    8baa:	f9 01       	movw	r30, r18
    8bac:	41 91       	ld	r20, Z+
    8bae:	51 91       	ld	r21, Z+
    8bb0:	61 91       	ld	r22, Z+
    8bb2:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8bb4:	8c ea       	ldi	r24, 0xAC	; 172
    8bb6:	9d e3       	ldi	r25, 0x3D	; 61
    8bb8:	9a 83       	std	Y+2, r25	; 0x02
    8bba:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8bbc:	18 86       	std	Y+8, r1	; 0x08
    8bbe:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8bc0:	ce 01       	movw	r24, r28
    8bc2:	01 96       	adiw	r24, 0x01	; 1
    8bc4:	89 db       	rcall	.-2286   	; 0x82d8 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8bc6:	8f 81       	ldd	r24, Y+7	; 0x07
    8bc8:	98 85       	ldd	r25, Y+8	; 0x08
    8bca:	28 96       	adiw	r28, 0x08	; 8
    8bcc:	e2 e0       	ldi	r30, 0x02	; 2
    8bce:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00008bd2 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8bd2:	9c 01       	movw	r18, r24
    8bd4:	20 53       	subi	r18, 0x30	; 48
    8bd6:	31 09       	sbc	r19, r1
    8bd8:	2a 30       	cpi	r18, 0x0A	; 10
    8bda:	31 05       	cpc	r19, r1
    8bdc:	10 f4       	brcc	.+4      	; 0x8be2 <atodigit+0x10>
    8bde:	c9 01       	movw	r24, r18
    8be0:	10 c0       	rjmp	.+32     	; 0x8c02 <atodigit+0x30>
    8be2:	9c 01       	movw	r18, r24
    8be4:	21 54       	subi	r18, 0x41	; 65
    8be6:	31 09       	sbc	r19, r1
    8be8:	26 30       	cpi	r18, 0x06	; 6
    8bea:	31 05       	cpc	r19, r1
    8bec:	10 f4       	brcc	.+4      	; 0x8bf2 <atodigit+0x20>
    8bee:	c7 97       	sbiw	r24, 0x37	; 55
    8bf0:	08 c0       	rjmp	.+16     	; 0x8c02 <atodigit+0x30>
    8bf2:	9c 01       	movw	r18, r24
    8bf4:	21 56       	subi	r18, 0x61	; 97
    8bf6:	31 09       	sbc	r19, r1
    8bf8:	26 30       	cpi	r18, 0x06	; 6
    8bfa:	31 05       	cpc	r19, r1
    8bfc:	28 f4       	brcc	.+10     	; 0x8c08 <atodigit+0x36>
    8bfe:	87 55       	subi	r24, 0x57	; 87
    8c00:	91 09       	sbc	r25, r1
    8c02:	86 17       	cp	r24, r22
    8c04:	97 07       	cpc	r25, r23
    8c06:	14 f0       	brlt	.+4      	; 0x8c0c <atodigit+0x3a>
    8c08:	8f ef       	ldi	r24, 0xFF	; 255
    8c0a:	9f ef       	ldi	r25, 0xFF	; 255
    8c0c:	08 95       	ret

00008c0e <strtol>:
    8c0e:	a0 e0       	ldi	r26, 0x00	; 0
    8c10:	b0 e0       	ldi	r27, 0x00	; 0
    8c12:	ed e0       	ldi	r30, 0x0D	; 13
    8c14:	f6 e4       	ldi	r31, 0x46	; 70
    8c16:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    8c1a:	2b 01       	movw	r4, r22
    8c1c:	8a 01       	movw	r16, r20
    8c1e:	ec 01       	movw	r28, r24
    8c20:	28 81       	ld	r18, Y
    8c22:	01 96       	adiw	r24, 0x01	; 1
    8c24:	20 32       	cpi	r18, 0x20	; 32
    8c26:	d9 f3       	breq	.-10     	; 0x8c1e <strtol+0x10>
    8c28:	29 30       	cpi	r18, 0x09	; 9
    8c2a:	c9 f3       	breq	.-14     	; 0x8c1e <strtol+0x10>
    8c2c:	2d 32       	cpi	r18, 0x2D	; 45
    8c2e:	29 f4       	brne	.+10     	; 0x8c3a <strtol+0x2c>
    8c30:	ec 01       	movw	r28, r24
    8c32:	66 24       	eor	r6, r6
    8c34:	63 94       	inc	r6
    8c36:	71 2c       	mov	r7, r1
    8c38:	05 c0       	rjmp	.+10     	; 0x8c44 <strtol+0x36>
    8c3a:	2b 32       	cpi	r18, 0x2B	; 43
    8c3c:	09 f4       	brne	.+2      	; 0x8c40 <strtol+0x32>
    8c3e:	ec 01       	movw	r28, r24
    8c40:	61 2c       	mov	r6, r1
    8c42:	71 2c       	mov	r7, r1
    8c44:	9e 01       	movw	r18, r28
    8c46:	2f 5f       	subi	r18, 0xFF	; 255
    8c48:	3f 4f       	sbci	r19, 0xFF	; 255
    8c4a:	88 81       	ld	r24, Y
    8c4c:	80 33       	cpi	r24, 0x30	; 48
    8c4e:	11 f4       	brne	.+4      	; 0x8c54 <strtol+0x46>
    8c50:	e9 01       	movw	r28, r18
    8c52:	f8 cf       	rjmp	.-16     	; 0x8c44 <strtol+0x36>
    8c54:	c1 2c       	mov	r12, r1
    8c56:	d1 2c       	mov	r13, r1
    8c58:	76 01       	movw	r14, r12
    8c5a:	48 01       	movw	r8, r16
    8c5c:	01 2e       	mov	r0, r17
    8c5e:	00 0c       	add	r0, r0
    8c60:	aa 08       	sbc	r10, r10
    8c62:	bb 08       	sbc	r11, r11
    8c64:	3c 2e       	mov	r3, r28
    8c66:	2d 2e       	mov	r2, r29
    8c68:	89 91       	ld	r24, Y+
    8c6a:	88 23       	and	r24, r24
    8c6c:	31 f0       	breq	.+12     	; 0x8c7a <strtol+0x6c>
    8c6e:	b8 01       	movw	r22, r16
    8c70:	90 e0       	ldi	r25, 0x00	; 0
    8c72:	af df       	rcall	.-162    	; 0x8bd2 <atodigit>
    8c74:	fc 01       	movw	r30, r24
    8c76:	97 ff       	sbrs	r25, 7
    8c78:	0c c0       	rjmp	.+24     	; 0x8c92 <strtol+0x84>
    8c7a:	61 14       	cp	r6, r1
    8c7c:	71 04       	cpc	r7, r1
    8c7e:	c1 f0       	breq	.+48     	; 0x8cb0 <strtol+0xa2>
    8c80:	f0 94       	com	r15
    8c82:	e0 94       	com	r14
    8c84:	d0 94       	com	r13
    8c86:	c0 94       	com	r12
    8c88:	c1 1c       	adc	r12, r1
    8c8a:	d1 1c       	adc	r13, r1
    8c8c:	e1 1c       	adc	r14, r1
    8c8e:	f1 1c       	adc	r15, r1
    8c90:	0f c0       	rjmp	.+30     	; 0x8cb0 <strtol+0xa2>
    8c92:	a5 01       	movw	r20, r10
    8c94:	94 01       	movw	r18, r8
    8c96:	c7 01       	movw	r24, r14
    8c98:	b6 01       	movw	r22, r12
    8c9a:	0e 94 e2 df 	call	0x1bfc4	; 0x1bfc4 <__mulsi3>
    8c9e:	6f 01       	movw	r12, r30
    8ca0:	ff 0f       	add	r31, r31
    8ca2:	ee 08       	sbc	r14, r14
    8ca4:	ff 08       	sbc	r15, r15
    8ca6:	c6 0e       	add	r12, r22
    8ca8:	d7 1e       	adc	r13, r23
    8caa:	e8 1e       	adc	r14, r24
    8cac:	f9 1e       	adc	r15, r25
    8cae:	da cf       	rjmp	.-76     	; 0x8c64 <strtol+0x56>
    8cb0:	41 14       	cp	r4, r1
    8cb2:	51 04       	cpc	r5, r1
    8cb4:	19 f0       	breq	.+6      	; 0x8cbc <strtol+0xae>
    8cb6:	f2 01       	movw	r30, r4
    8cb8:	30 82       	st	Z, r3
    8cba:	21 82       	std	Z+1, r2	; 0x01
    8cbc:	c7 01       	movw	r24, r14
    8cbe:	b6 01       	movw	r22, r12
    8cc0:	cd b7       	in	r28, 0x3d	; 61
    8cc2:	de b7       	in	r29, 0x3e	; 62
    8cc4:	e2 e1       	ldi	r30, 0x12	; 18
    8cc6:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00008cca <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8cca:	4a e0       	ldi	r20, 0x0A	; 10
    8ccc:	50 e0       	ldi	r21, 0x00	; 0
    8cce:	60 e0       	ldi	r22, 0x00	; 0
    8cd0:	70 e0       	ldi	r23, 0x00	; 0
    8cd2:	9d df       	rcall	.-198    	; 0x8c0e <strtol>
    return((int)num);
}
    8cd4:	cb 01       	movw	r24, r22
    8cd6:	08 95       	ret

00008cd8 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8cd8:	4a e0       	ldi	r20, 0x0A	; 10
    8cda:	50 e0       	ldi	r21, 0x00	; 0
    8cdc:	60 e0       	ldi	r22, 0x00	; 0
    8cde:	70 e0       	ldi	r23, 0x00	; 0
    8ce0:	96 cf       	rjmp	.-212    	; 0x8c0e <strtol>
    return(num);
}
    8ce2:	08 95       	ret

00008ce4 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8ce4:	fc 01       	movw	r30, r24
    8ce6:	62 81       	ldd	r22, Z+2	; 0x02
    8ce8:	73 81       	ldd	r23, Z+3	; 0x03
    8cea:	cb 01       	movw	r24, r22
    8cec:	a0 e0       	ldi	r26, 0x00	; 0
    8cee:	b0 e0       	ldi	r27, 0x00	; 0
    8cf0:	ba 2f       	mov	r27, r26
    8cf2:	a9 2f       	mov	r26, r25
    8cf4:	98 2f       	mov	r25, r24
    8cf6:	88 27       	eor	r24, r24
    8cf8:	21 81       	ldd	r18, Z+1	; 0x01
    8cfa:	82 2b       	or	r24, r18
    8cfc:	ba 2f       	mov	r27, r26
    8cfe:	a9 2f       	mov	r26, r25
    8d00:	98 2f       	mov	r25, r24
    8d02:	88 27       	eor	r24, r24
    8d04:	20 81       	ld	r18, Z
    8d06:	bc 01       	movw	r22, r24
    8d08:	cd 01       	movw	r24, r26
    8d0a:	62 2b       	or	r22, r18
    8d0c:	08 95       	ret

00008d0e <st_dword>:
    8d0e:	fc 01       	movw	r30, r24
    8d10:	40 83       	st	Z, r20
    8d12:	51 83       	std	Z+1, r21	; 0x01
    8d14:	62 83       	std	Z+2, r22	; 0x02
    8d16:	73 83       	std	Z+3, r23	; 0x03
    8d18:	08 95       	ret

00008d1a <mem_set>:
    8d1a:	48 0f       	add	r20, r24
    8d1c:	59 1f       	adc	r21, r25
    8d1e:	fc 01       	movw	r30, r24
    8d20:	61 93       	st	Z+, r22
    8d22:	cf 01       	movw	r24, r30
    8d24:	e4 17       	cp	r30, r20
    8d26:	f5 07       	cpc	r31, r21
    8d28:	d1 f7       	brne	.-12     	; 0x8d1e <mem_set+0x4>
    8d2a:	08 95       	ret

00008d2c <mem_cmp>:
    8d2c:	dc 01       	movw	r26, r24
    8d2e:	fb 01       	movw	r30, r22
    8d30:	2d 91       	ld	r18, X+
    8d32:	81 91       	ld	r24, Z+
    8d34:	30 e0       	ldi	r19, 0x00	; 0
    8d36:	b9 01       	movw	r22, r18
    8d38:	68 1b       	sub	r22, r24
    8d3a:	71 09       	sbc	r23, r1
    8d3c:	cb 01       	movw	r24, r22
    8d3e:	41 50       	subi	r20, 0x01	; 1
    8d40:	51 09       	sbc	r21, r1
    8d42:	11 f0       	breq	.+4      	; 0x8d48 <mem_cmp+0x1c>
    8d44:	00 97       	sbiw	r24, 0x00	; 0
    8d46:	a1 f3       	breq	.-24     	; 0x8d30 <mem_cmp+0x4>
    8d48:	08 95       	ret

00008d4a <tchar2uni>:
    8d4a:	0f 93       	push	r16
    8d4c:	1f 93       	push	r17
    8d4e:	fc 01       	movw	r30, r24
    8d50:	a0 81       	ld	r26, Z
    8d52:	b1 81       	ldd	r27, Z+1	; 0x01
    8d54:	fd 01       	movw	r30, r26
    8d56:	31 96       	adiw	r30, 0x01	; 1
    8d58:	4c 91       	ld	r20, X
    8d5a:	47 fd       	sbrc	r20, 7
    8d5c:	04 c0       	rjmp	.+8      	; 0x8d66 <tchar2uni+0x1c>
    8d5e:	50 e0       	ldi	r21, 0x00	; 0
    8d60:	60 e0       	ldi	r22, 0x00	; 0
    8d62:	70 e0       	ldi	r23, 0x00	; 0
    8d64:	68 c0       	rjmp	.+208    	; 0x8e36 <tchar2uni+0xec>
    8d66:	24 2f       	mov	r18, r20
    8d68:	20 7e       	andi	r18, 0xE0	; 224
    8d6a:	20 3c       	cpi	r18, 0xC0	; 192
    8d6c:	39 f4       	brne	.+14     	; 0x8d7c <tchar2uni+0x32>
    8d6e:	4f 71       	andi	r20, 0x1F	; 31
    8d70:	50 e0       	ldi	r21, 0x00	; 0
    8d72:	60 e0       	ldi	r22, 0x00	; 0
    8d74:	70 e0       	ldi	r23, 0x00	; 0
    8d76:	21 e0       	ldi	r18, 0x01	; 1
    8d78:	30 e0       	ldi	r19, 0x00	; 0
    8d7a:	16 c0       	rjmp	.+44     	; 0x8da8 <tchar2uni+0x5e>
    8d7c:	24 2f       	mov	r18, r20
    8d7e:	20 7f       	andi	r18, 0xF0	; 240
    8d80:	20 3e       	cpi	r18, 0xE0	; 224
    8d82:	39 f4       	brne	.+14     	; 0x8d92 <tchar2uni+0x48>
    8d84:	4f 70       	andi	r20, 0x0F	; 15
    8d86:	50 e0       	ldi	r21, 0x00	; 0
    8d88:	60 e0       	ldi	r22, 0x00	; 0
    8d8a:	70 e0       	ldi	r23, 0x00	; 0
    8d8c:	22 e0       	ldi	r18, 0x02	; 2
    8d8e:	30 e0       	ldi	r19, 0x00	; 0
    8d90:	0b c0       	rjmp	.+22     	; 0x8da8 <tchar2uni+0x5e>
    8d92:	24 2f       	mov	r18, r20
    8d94:	28 7f       	andi	r18, 0xF8	; 248
    8d96:	20 3f       	cpi	r18, 0xF0	; 240
    8d98:	09 f0       	breq	.+2      	; 0x8d9c <tchar2uni+0x52>
    8d9a:	54 c0       	rjmp	.+168    	; 0x8e44 <tchar2uni+0xfa>
    8d9c:	47 70       	andi	r20, 0x07	; 7
    8d9e:	50 e0       	ldi	r21, 0x00	; 0
    8da0:	60 e0       	ldi	r22, 0x00	; 0
    8da2:	70 e0       	ldi	r23, 0x00	; 0
    8da4:	23 e0       	ldi	r18, 0x03	; 3
    8da6:	30 e0       	ldi	r19, 0x00	; 0
    8da8:	31 96       	adiw	r30, 0x01	; 1
    8daa:	df 01       	movw	r26, r30
    8dac:	11 97       	sbiw	r26, 0x01	; 1
    8dae:	ac 91       	ld	r26, X
    8db0:	ba 2f       	mov	r27, r26
    8db2:	b0 7c       	andi	r27, 0xC0	; 192
    8db4:	b0 38       	cpi	r27, 0x80	; 128
    8db6:	09 f0       	breq	.+2      	; 0x8dba <tchar2uni+0x70>
    8db8:	45 c0       	rjmp	.+138    	; 0x8e44 <tchar2uni+0xfa>
    8dba:	b6 e0       	ldi	r27, 0x06	; 6
    8dbc:	44 0f       	add	r20, r20
    8dbe:	55 1f       	adc	r21, r21
    8dc0:	66 1f       	adc	r22, r22
    8dc2:	77 1f       	adc	r23, r23
    8dc4:	ba 95       	dec	r27
    8dc6:	d1 f7       	brne	.-12     	; 0x8dbc <tchar2uni+0x72>
    8dc8:	af 73       	andi	r26, 0x3F	; 63
    8dca:	4a 2b       	or	r20, r26
    8dcc:	21 50       	subi	r18, 0x01	; 1
    8dce:	31 09       	sbc	r19, r1
    8dd0:	59 f7       	brne	.-42     	; 0x8da8 <tchar2uni+0x5e>
    8dd2:	8a 01       	movw	r16, r20
    8dd4:	9b 01       	movw	r18, r22
    8dd6:	00 58       	subi	r16, 0x80	; 128
    8dd8:	11 09       	sbc	r17, r1
    8dda:	21 09       	sbc	r18, r1
    8ddc:	31 09       	sbc	r19, r1
    8dde:	00 38       	cpi	r16, 0x80	; 128
    8de0:	1f 4f       	sbci	r17, 0xFF	; 255
    8de2:	20 41       	sbci	r18, 0x10	; 16
    8de4:	31 05       	cpc	r19, r1
    8de6:	70 f5       	brcc	.+92     	; 0x8e44 <tchar2uni+0xfa>
    8de8:	8a 01       	movw	r16, r20
    8dea:	9b 01       	movw	r18, r22
    8dec:	18 5d       	subi	r17, 0xD8	; 216
    8dee:	21 09       	sbc	r18, r1
    8df0:	31 09       	sbc	r19, r1
    8df2:	01 15       	cp	r16, r1
    8df4:	18 40       	sbci	r17, 0x08	; 8
    8df6:	21 05       	cpc	r18, r1
    8df8:	31 05       	cpc	r19, r1
    8dfa:	20 f1       	brcs	.+72     	; 0x8e44 <tchar2uni+0xfa>
    8dfc:	41 15       	cp	r20, r1
    8dfe:	51 05       	cpc	r21, r1
    8e00:	21 e0       	ldi	r18, 0x01	; 1
    8e02:	62 07       	cpc	r22, r18
    8e04:	71 05       	cpc	r23, r1
    8e06:	b8 f0       	brcs	.+46     	; 0x8e36 <tchar2uni+0xec>
    8e08:	8a 01       	movw	r16, r20
    8e0a:	9b 01       	movw	r18, r22
    8e0c:	21 50       	subi	r18, 0x01	; 1
    8e0e:	31 09       	sbc	r19, r1
    8e10:	a6 e0       	ldi	r26, 0x06	; 6
    8e12:	00 0f       	add	r16, r16
    8e14:	11 1f       	adc	r17, r17
    8e16:	22 1f       	adc	r18, r18
    8e18:	33 1f       	adc	r19, r19
    8e1a:	aa 95       	dec	r26
    8e1c:	d1 f7       	brne	.-12     	; 0x8e12 <tchar2uni+0xc8>
    8e1e:	00 27       	eor	r16, r16
    8e20:	11 27       	eor	r17, r17
    8e22:	33 70       	andi	r19, 0x03	; 3
    8e24:	53 70       	andi	r21, 0x03	; 3
    8e26:	66 27       	eor	r22, r22
    8e28:	77 27       	eor	r23, r23
    8e2a:	5c 6d       	ori	r21, 0xDC	; 220
    8e2c:	78 6d       	ori	r23, 0xD8	; 216
    8e2e:	40 2b       	or	r20, r16
    8e30:	51 2b       	or	r21, r17
    8e32:	62 2b       	or	r22, r18
    8e34:	73 2b       	or	r23, r19
    8e36:	dc 01       	movw	r26, r24
    8e38:	ed 93       	st	X+, r30
    8e3a:	fc 93       	st	X, r31
    8e3c:	34 2f       	mov	r19, r20
    8e3e:	25 2f       	mov	r18, r21
    8e40:	cb 01       	movw	r24, r22
    8e42:	04 c0       	rjmp	.+8      	; 0x8e4c <tchar2uni+0x102>
    8e44:	3f ef       	ldi	r19, 0xFF	; 255
    8e46:	2f ef       	ldi	r18, 0xFF	; 255
    8e48:	8f ef       	ldi	r24, 0xFF	; 255
    8e4a:	9f ef       	ldi	r25, 0xFF	; 255
    8e4c:	63 2f       	mov	r22, r19
    8e4e:	72 2f       	mov	r23, r18
    8e50:	1f 91       	pop	r17
    8e52:	0f 91       	pop	r16
    8e54:	08 95       	ret

00008e56 <clst2sect>:
    8e56:	0f 93       	push	r16
    8e58:	1f 93       	push	r17
    8e5a:	fc 01       	movw	r30, r24
    8e5c:	9a 01       	movw	r18, r20
    8e5e:	ab 01       	movw	r20, r22
    8e60:	22 50       	subi	r18, 0x02	; 2
    8e62:	31 09       	sbc	r19, r1
    8e64:	41 09       	sbc	r20, r1
    8e66:	51 09       	sbc	r21, r1
    8e68:	81 8d       	ldd	r24, Z+25	; 0x19
    8e6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    8e6c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8e6e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8e70:	02 97       	sbiw	r24, 0x02	; 2
    8e72:	a1 09       	sbc	r26, r1
    8e74:	b1 09       	sbc	r27, r1
    8e76:	28 17       	cp	r18, r24
    8e78:	39 07       	cpc	r19, r25
    8e7a:	4a 07       	cpc	r20, r26
    8e7c:	5b 07       	cpc	r21, r27
    8e7e:	68 f4       	brcc	.+26     	; 0x8e9a <clst2sect+0x44>
    8e80:	a1 85       	ldd	r26, Z+9	; 0x09
    8e82:	b2 85       	ldd	r27, Z+10	; 0x0a
    8e84:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    8e88:	05 a5       	ldd	r16, Z+45	; 0x2d
    8e8a:	16 a5       	ldd	r17, Z+46	; 0x2e
    8e8c:	27 a5       	ldd	r18, Z+47	; 0x2f
    8e8e:	30 a9       	ldd	r19, Z+48	; 0x30
    8e90:	60 0f       	add	r22, r16
    8e92:	71 1f       	adc	r23, r17
    8e94:	82 1f       	adc	r24, r18
    8e96:	93 1f       	adc	r25, r19
    8e98:	03 c0       	rjmp	.+6      	; 0x8ea0 <clst2sect+0x4a>
    8e9a:	60 e0       	ldi	r22, 0x00	; 0
    8e9c:	70 e0       	ldi	r23, 0x00	; 0
    8e9e:	cb 01       	movw	r24, r22
    8ea0:	1f 91       	pop	r17
    8ea2:	0f 91       	pop	r16
    8ea4:	08 95       	ret

00008ea6 <clmt_clust>:
    8ea6:	cf 93       	push	r28
    8ea8:	df 93       	push	r29
    8eaa:	fc 01       	movw	r30, r24
    8eac:	c2 a1       	ldd	r28, Z+34	; 0x22
    8eae:	d3 a1       	ldd	r29, Z+35	; 0x23
    8eb0:	24 96       	adiw	r28, 0x04	; 4
    8eb2:	cb 01       	movw	r24, r22
    8eb4:	ba 01       	movw	r22, r20
    8eb6:	29 e0       	ldi	r18, 0x09	; 9
    8eb8:	96 95       	lsr	r25
    8eba:	87 95       	ror	r24
    8ebc:	77 95       	ror	r23
    8ebe:	67 95       	ror	r22
    8ec0:	2a 95       	dec	r18
    8ec2:	d1 f7       	brne	.-12     	; 0x8eb8 <clmt_clust+0x12>
    8ec4:	01 90       	ld	r0, Z+
    8ec6:	f0 81       	ld	r31, Z
    8ec8:	e0 2d       	mov	r30, r0
    8eca:	21 85       	ldd	r18, Z+9	; 0x09
    8ecc:	32 85       	ldd	r19, Z+10	; 0x0a
    8ece:	40 e0       	ldi	r20, 0x00	; 0
    8ed0:	50 e0       	ldi	r21, 0x00	; 0
    8ed2:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    8ed6:	88 81       	ld	r24, Y
    8ed8:	99 81       	ldd	r25, Y+1	; 0x01
    8eda:	aa 81       	ldd	r26, Y+2	; 0x02
    8edc:	bb 81       	ldd	r27, Y+3	; 0x03
    8ede:	00 97       	sbiw	r24, 0x00	; 0
    8ee0:	a1 05       	cpc	r26, r1
    8ee2:	b1 05       	cpc	r27, r1
    8ee4:	b1 f0       	breq	.+44     	; 0x8f12 <clmt_clust+0x6c>
    8ee6:	28 17       	cp	r18, r24
    8ee8:	39 07       	cpc	r19, r25
    8eea:	4a 07       	cpc	r20, r26
    8eec:	5b 07       	cpc	r21, r27
    8eee:	30 f0       	brcs	.+12     	; 0x8efc <clmt_clust+0x56>
    8ef0:	28 1b       	sub	r18, r24
    8ef2:	39 0b       	sbc	r19, r25
    8ef4:	4a 0b       	sbc	r20, r26
    8ef6:	5b 0b       	sbc	r21, r27
    8ef8:	28 96       	adiw	r28, 0x08	; 8
    8efa:	ed cf       	rjmp	.-38     	; 0x8ed6 <clmt_clust+0x30>
    8efc:	8c 81       	ldd	r24, Y+4	; 0x04
    8efe:	9d 81       	ldd	r25, Y+5	; 0x05
    8f00:	ae 81       	ldd	r26, Y+6	; 0x06
    8f02:	bf 81       	ldd	r27, Y+7	; 0x07
    8f04:	bc 01       	movw	r22, r24
    8f06:	cd 01       	movw	r24, r26
    8f08:	62 0f       	add	r22, r18
    8f0a:	73 1f       	adc	r23, r19
    8f0c:	84 1f       	adc	r24, r20
    8f0e:	95 1f       	adc	r25, r21
    8f10:	03 c0       	rjmp	.+6      	; 0x8f18 <clmt_clust+0x72>
    8f12:	60 e0       	ldi	r22, 0x00	; 0
    8f14:	70 e0       	ldi	r23, 0x00	; 0
    8f16:	cb 01       	movw	r24, r22
    8f18:	df 91       	pop	r29
    8f1a:	cf 91       	pop	r28
    8f1c:	08 95       	ret

00008f1e <sum_sfn>:
    8f1e:	fc 01       	movw	r30, r24
    8f20:	9c 01       	movw	r18, r24
    8f22:	25 5f       	subi	r18, 0xF5	; 245
    8f24:	3f 4f       	sbci	r19, 0xFF	; 255
    8f26:	80 e0       	ldi	r24, 0x00	; 0
    8f28:	98 2f       	mov	r25, r24
    8f2a:	90 fb       	bst	r25, 0
    8f2c:	97 95       	ror	r25
    8f2e:	97 f9       	bld	r25, 7
    8f30:	81 91       	ld	r24, Z+
    8f32:	89 0f       	add	r24, r25
    8f34:	e2 17       	cp	r30, r18
    8f36:	f3 07       	cpc	r31, r19
    8f38:	b9 f7       	brne	.-18     	; 0x8f28 <sum_sfn+0xa>
    8f3a:	08 95       	ret

00008f3c <get_ldnumber>:
    8f3c:	cf 93       	push	r28
    8f3e:	df 93       	push	r29
    8f40:	dc 01       	movw	r26, r24
    8f42:	ed 91       	ld	r30, X+
    8f44:	fc 91       	ld	r31, X
    8f46:	11 97       	sbiw	r26, 0x01	; 1
    8f48:	30 97       	sbiw	r30, 0x00	; 0
    8f4a:	f9 f0       	breq	.+62     	; 0x8f8a <get_ldnumber+0x4e>
    8f4c:	9f 01       	movw	r18, r30
    8f4e:	2f 5f       	subi	r18, 0xFF	; 255
    8f50:	3f 4f       	sbci	r19, 0xFF	; 255
    8f52:	e9 01       	movw	r28, r18
    8f54:	21 97       	sbiw	r28, 0x01	; 1
    8f56:	88 81       	ld	r24, Y
    8f58:	80 32       	cpi	r24, 0x20	; 32
    8f5a:	18 f0       	brcs	.+6      	; 0x8f62 <get_ldnumber+0x26>
    8f5c:	8a 33       	cpi	r24, 0x3A	; 58
    8f5e:	b9 f7       	brne	.-18     	; 0x8f4e <get_ldnumber+0x12>
    8f60:	04 c0       	rjmp	.+8      	; 0x8f6a <get_ldnumber+0x2e>
    8f62:	80 91 07 18 	lds	r24, 0x1807	; 0x801807 <CurrVol>
    8f66:	90 e0       	ldi	r25, 0x00	; 0
    8f68:	12 c0       	rjmp	.+36     	; 0x8f8e <get_ldnumber+0x52>
    8f6a:	90 81       	ld	r25, Z
    8f6c:	80 ed       	ldi	r24, 0xD0	; 208
    8f6e:	89 0f       	add	r24, r25
    8f70:	8a 30       	cpi	r24, 0x0A	; 10
    8f72:	58 f4       	brcc	.+22     	; 0x8f8a <get_ldnumber+0x4e>
    8f74:	32 96       	adiw	r30, 0x02	; 2
    8f76:	2e 17       	cp	r18, r30
    8f78:	3f 07       	cpc	r19, r31
    8f7a:	39 f4       	brne	.+14     	; 0x8f8a <get_ldnumber+0x4e>
    8f7c:	90 33       	cpi	r25, 0x30	; 48
    8f7e:	29 f4       	brne	.+10     	; 0x8f8a <get_ldnumber+0x4e>
    8f80:	2d 93       	st	X+, r18
    8f82:	3c 93       	st	X, r19
    8f84:	80 e0       	ldi	r24, 0x00	; 0
    8f86:	90 e0       	ldi	r25, 0x00	; 0
    8f88:	02 c0       	rjmp	.+4      	; 0x8f8e <get_ldnumber+0x52>
    8f8a:	8f ef       	ldi	r24, 0xFF	; 255
    8f8c:	9f ef       	ldi	r25, 0xFF	; 255
    8f8e:	df 91       	pop	r29
    8f90:	cf 91       	pop	r28
    8f92:	08 95       	ret

00008f94 <validate>:
    8f94:	0f 93       	push	r16
    8f96:	1f 93       	push	r17
    8f98:	cf 93       	push	r28
    8f9a:	df 93       	push	r29
    8f9c:	ec 01       	movw	r28, r24
    8f9e:	8b 01       	movw	r16, r22
    8fa0:	89 2b       	or	r24, r25
    8fa2:	f9 f0       	breq	.+62     	; 0x8fe2 <validate+0x4e>
    8fa4:	e8 81       	ld	r30, Y
    8fa6:	f9 81       	ldd	r31, Y+1	; 0x01
    8fa8:	30 97       	sbiw	r30, 0x00	; 0
    8faa:	d9 f0       	breq	.+54     	; 0x8fe2 <validate+0x4e>
    8fac:	80 81       	ld	r24, Z
    8fae:	88 23       	and	r24, r24
    8fb0:	c1 f0       	breq	.+48     	; 0x8fe2 <validate+0x4e>
    8fb2:	2a 81       	ldd	r18, Y+2	; 0x02
    8fb4:	3b 81       	ldd	r19, Y+3	; 0x03
    8fb6:	85 81       	ldd	r24, Z+5	; 0x05
    8fb8:	96 81       	ldd	r25, Z+6	; 0x06
    8fba:	28 17       	cp	r18, r24
    8fbc:	39 07       	cpc	r19, r25
    8fbe:	89 f4       	brne	.+34     	; 0x8fe2 <validate+0x4e>
    8fc0:	81 81       	ldd	r24, Z+1	; 0x01
    8fc2:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_status>
    8fc6:	80 fd       	sbrc	r24, 0
    8fc8:	0c c0       	rjmp	.+24     	; 0x8fe2 <validate+0x4e>
    8fca:	28 81       	ld	r18, Y
    8fcc:	39 81       	ldd	r19, Y+1	; 0x01
    8fce:	80 e0       	ldi	r24, 0x00	; 0
    8fd0:	90 e0       	ldi	r25, 0x00	; 0
    8fd2:	f8 01       	movw	r30, r16
    8fd4:	31 83       	std	Z+1, r19	; 0x01
    8fd6:	20 83       	st	Z, r18
    8fd8:	df 91       	pop	r29
    8fda:	cf 91       	pop	r28
    8fdc:	1f 91       	pop	r17
    8fde:	0f 91       	pop	r16
    8fe0:	08 95       	ret
    8fe2:	89 e0       	ldi	r24, 0x09	; 9
    8fe4:	90 e0       	ldi	r25, 0x00	; 0
    8fe6:	20 e0       	ldi	r18, 0x00	; 0
    8fe8:	30 e0       	ldi	r19, 0x00	; 0
    8fea:	f3 cf       	rjmp	.-26     	; 0x8fd2 <validate+0x3e>

00008fec <mem_cpy.part.0>:
    8fec:	fb 01       	movw	r30, r22
    8fee:	48 0f       	add	r20, r24
    8ff0:	59 1f       	adc	r21, r25
    8ff2:	21 91       	ld	r18, Z+
    8ff4:	dc 01       	movw	r26, r24
    8ff6:	2d 93       	st	X+, r18
    8ff8:	cd 01       	movw	r24, r26
    8ffa:	a4 17       	cp	r26, r20
    8ffc:	b5 07       	cpc	r27, r21
    8ffe:	c9 f7       	brne	.-14     	; 0x8ff2 <mem_cpy.part.0+0x6>
    9000:	08 95       	ret

00009002 <put_utf>:
    9002:	0f 93       	push	r16
    9004:	1f 93       	push	r17
    9006:	fa 01       	movw	r30, r20
    9008:	60 38       	cpi	r22, 0x80	; 128
    900a:	71 05       	cpc	r23, r1
    900c:	81 05       	cpc	r24, r1
    900e:	91 05       	cpc	r25, r1
    9010:	30 f4       	brcc	.+12     	; 0x901e <put_utf+0x1c>
    9012:	23 2b       	or	r18, r19
    9014:	09 f4       	brne	.+2      	; 0x9018 <put_utf+0x16>
    9016:	9e c0       	rjmp	.+316    	; 0x9154 <put_utf+0x152>
    9018:	60 83       	st	Z, r22
    901a:	81 e0       	ldi	r24, 0x01	; 1
    901c:	9c c0       	rjmp	.+312    	; 0x9156 <put_utf+0x154>
    901e:	61 15       	cp	r22, r1
    9020:	48 e0       	ldi	r20, 0x08	; 8
    9022:	74 07       	cpc	r23, r20
    9024:	81 05       	cpc	r24, r1
    9026:	91 05       	cpc	r25, r1
    9028:	a0 f4       	brcc	.+40     	; 0x9052 <put_utf+0x50>
    902a:	22 30       	cpi	r18, 0x02	; 2
    902c:	31 05       	cpc	r19, r1
    902e:	08 f4       	brcc	.+2      	; 0x9032 <put_utf+0x30>
    9030:	91 c0       	rjmp	.+290    	; 0x9154 <put_utf+0x152>
    9032:	8b 01       	movw	r16, r22
    9034:	9c 01       	movw	r18, r24
    9036:	76 e0       	ldi	r23, 0x06	; 6
    9038:	36 95       	lsr	r19
    903a:	27 95       	ror	r18
    903c:	17 95       	ror	r17
    903e:	07 95       	ror	r16
    9040:	7a 95       	dec	r23
    9042:	d1 f7       	brne	.-12     	; 0x9038 <put_utf+0x36>
    9044:	00 6c       	ori	r16, 0xC0	; 192
    9046:	00 83       	st	Z, r16
    9048:	6f 73       	andi	r22, 0x3F	; 63
    904a:	60 68       	ori	r22, 0x80	; 128
    904c:	61 83       	std	Z+1, r22	; 0x01
    904e:	82 e0       	ldi	r24, 0x02	; 2
    9050:	82 c0       	rjmp	.+260    	; 0x9156 <put_utf+0x154>
    9052:	61 15       	cp	r22, r1
    9054:	71 05       	cpc	r23, r1
    9056:	41 e0       	ldi	r20, 0x01	; 1
    9058:	84 07       	cpc	r24, r20
    905a:	91 05       	cpc	r25, r1
    905c:	58 f5       	brcc	.+86     	; 0x90b4 <put_utf+0xb2>
    905e:	23 30       	cpi	r18, 0x03	; 3
    9060:	31 05       	cpc	r19, r1
    9062:	08 f4       	brcc	.+2      	; 0x9066 <put_utf+0x64>
    9064:	77 c0       	rjmp	.+238    	; 0x9154 <put_utf+0x152>
    9066:	8b 01       	movw	r16, r22
    9068:	9c 01       	movw	r18, r24
    906a:	18 5d       	subi	r17, 0xD8	; 216
    906c:	21 09       	sbc	r18, r1
    906e:	31 09       	sbc	r19, r1
    9070:	01 15       	cp	r16, r1
    9072:	18 40       	sbci	r17, 0x08	; 8
    9074:	21 05       	cpc	r18, r1
    9076:	31 05       	cpc	r19, r1
    9078:	08 f4       	brcc	.+2      	; 0x907c <put_utf+0x7a>
    907a:	6c c0       	rjmp	.+216    	; 0x9154 <put_utf+0x152>
    907c:	8b 01       	movw	r16, r22
    907e:	9c 01       	movw	r18, r24
    9080:	4c e0       	ldi	r20, 0x0C	; 12
    9082:	36 95       	lsr	r19
    9084:	27 95       	ror	r18
    9086:	17 95       	ror	r17
    9088:	07 95       	ror	r16
    908a:	4a 95       	dec	r20
    908c:	d1 f7       	brne	.-12     	; 0x9082 <put_utf+0x80>
    908e:	00 6e       	ori	r16, 0xE0	; 224
    9090:	00 83       	st	Z, r16
    9092:	8b 01       	movw	r16, r22
    9094:	9c 01       	movw	r18, r24
    9096:	56 e0       	ldi	r21, 0x06	; 6
    9098:	36 95       	lsr	r19
    909a:	27 95       	ror	r18
    909c:	17 95       	ror	r17
    909e:	07 95       	ror	r16
    90a0:	5a 95       	dec	r21
    90a2:	d1 f7       	brne	.-12     	; 0x9098 <put_utf+0x96>
    90a4:	0f 73       	andi	r16, 0x3F	; 63
    90a6:	00 68       	ori	r16, 0x80	; 128
    90a8:	01 83       	std	Z+1, r16	; 0x01
    90aa:	6f 73       	andi	r22, 0x3F	; 63
    90ac:	60 68       	ori	r22, 0x80	; 128
    90ae:	62 83       	std	Z+2, r22	; 0x02
    90b0:	83 e0       	ldi	r24, 0x03	; 3
    90b2:	51 c0       	rjmp	.+162    	; 0x9156 <put_utf+0x154>
    90b4:	24 30       	cpi	r18, 0x04	; 4
    90b6:	31 05       	cpc	r19, r1
    90b8:	08 f4       	brcc	.+2      	; 0x90bc <put_utf+0xba>
    90ba:	4c c0       	rjmp	.+152    	; 0x9154 <put_utf+0x152>
    90bc:	8b 01       	movw	r16, r22
    90be:	9c 01       	movw	r18, r24
    90c0:	00 27       	eor	r16, r16
    90c2:	11 27       	eor	r17, r17
    90c4:	38 5d       	subi	r19, 0xD8	; 216
    90c6:	b6 e0       	ldi	r27, 0x06	; 6
    90c8:	36 95       	lsr	r19
    90ca:	27 95       	ror	r18
    90cc:	17 95       	ror	r17
    90ce:	07 95       	ror	r16
    90d0:	ba 95       	dec	r27
    90d2:	d1 f7       	brne	.-12     	; 0x90c8 <put_utf+0xc6>
    90d4:	01 15       	cp	r16, r1
    90d6:	11 05       	cpc	r17, r1
    90d8:	40 e1       	ldi	r20, 0x10	; 16
    90da:	24 07       	cpc	r18, r20
    90dc:	31 05       	cpc	r19, r1
    90de:	d0 f5       	brcc	.+116    	; 0x9154 <put_utf+0x152>
    90e0:	dc 01       	movw	r26, r24
    90e2:	cb 01       	movw	r24, r22
    90e4:	aa 27       	eor	r26, r26
    90e6:	bb 27       	eor	r27, r27
    90e8:	9c 5d       	subi	r25, 0xDC	; 220
    90ea:	a1 09       	sbc	r26, r1
    90ec:	b1 09       	sbc	r27, r1
    90ee:	81 15       	cp	r24, r1
    90f0:	44 e0       	ldi	r20, 0x04	; 4
    90f2:	94 07       	cpc	r25, r20
    90f4:	a1 05       	cpc	r26, r1
    90f6:	b1 05       	cpc	r27, r1
    90f8:	68 f5       	brcc	.+90     	; 0x9154 <put_utf+0x152>
    90fa:	80 2b       	or	r24, r16
    90fc:	91 2b       	or	r25, r17
    90fe:	a2 2b       	or	r26, r18
    9100:	b3 2b       	or	r27, r19
    9102:	11 96       	adiw	r26, 0x01	; 1
    9104:	ac 01       	movw	r20, r24
    9106:	bd 01       	movw	r22, r26
    9108:	22 e1       	ldi	r18, 0x12	; 18
    910a:	76 95       	lsr	r23
    910c:	67 95       	ror	r22
    910e:	57 95       	ror	r21
    9110:	47 95       	ror	r20
    9112:	2a 95       	dec	r18
    9114:	d1 f7       	brne	.-12     	; 0x910a <put_utf+0x108>
    9116:	40 6f       	ori	r20, 0xF0	; 240
    9118:	40 83       	st	Z, r20
    911a:	ac 01       	movw	r20, r24
    911c:	bd 01       	movw	r22, r26
    911e:	3c e0       	ldi	r19, 0x0C	; 12
    9120:	76 95       	lsr	r23
    9122:	67 95       	ror	r22
    9124:	57 95       	ror	r21
    9126:	47 95       	ror	r20
    9128:	3a 95       	dec	r19
    912a:	d1 f7       	brne	.-12     	; 0x9120 <put_utf+0x11e>
    912c:	4f 73       	andi	r20, 0x3F	; 63
    912e:	40 68       	ori	r20, 0x80	; 128
    9130:	41 83       	std	Z+1, r20	; 0x01
    9132:	ac 01       	movw	r20, r24
    9134:	bd 01       	movw	r22, r26
    9136:	a6 e0       	ldi	r26, 0x06	; 6
    9138:	76 95       	lsr	r23
    913a:	67 95       	ror	r22
    913c:	57 95       	ror	r21
    913e:	47 95       	ror	r20
    9140:	aa 95       	dec	r26
    9142:	d1 f7       	brne	.-12     	; 0x9138 <put_utf+0x136>
    9144:	4f 73       	andi	r20, 0x3F	; 63
    9146:	40 68       	ori	r20, 0x80	; 128
    9148:	42 83       	std	Z+2, r20	; 0x02
    914a:	8f 73       	andi	r24, 0x3F	; 63
    914c:	80 68       	ori	r24, 0x80	; 128
    914e:	83 83       	std	Z+3, r24	; 0x03
    9150:	84 e0       	ldi	r24, 0x04	; 4
    9152:	01 c0       	rjmp	.+2      	; 0x9156 <put_utf+0x154>
    9154:	80 e0       	ldi	r24, 0x00	; 0
    9156:	1f 91       	pop	r17
    9158:	0f 91       	pop	r16
    915a:	08 95       	ret

0000915c <get_fileinfo>:
    915c:	a0 e0       	ldi	r26, 0x00	; 0
    915e:	b0 e0       	ldi	r27, 0x00	; 0
    9160:	e4 eb       	ldi	r30, 0xB4	; 180
    9162:	f8 e4       	ldi	r31, 0x48	; 72
    9164:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    9168:	fc 01       	movw	r30, r24
    916a:	60 80       	ld	r6, Z
    916c:	71 80       	ldd	r7, Z+1	; 0x01
    916e:	fb 01       	movw	r30, r22
    9170:	16 8a       	std	Z+22, r1	; 0x16
    9172:	fc 01       	movw	r30, r24
    9174:	06 89       	ldd	r16, Z+22	; 0x16
    9176:	17 89       	ldd	r17, Z+23	; 0x17
    9178:	20 8d       	ldd	r18, Z+24	; 0x18
    917a:	31 8d       	ldd	r19, Z+25	; 0x19
    917c:	01 15       	cp	r16, r1
    917e:	11 05       	cpc	r17, r1
    9180:	21 05       	cpc	r18, r1
    9182:	31 05       	cpc	r19, r1
    9184:	09 f4       	brne	.+2      	; 0x9188 <get_fileinfo+0x2c>
    9186:	f5 c0       	rjmp	.+490    	; 0x9372 <get_fileinfo+0x216>
    9188:	eb 01       	movw	r28, r22
    918a:	8c 01       	movw	r16, r24
    918c:	80 a5       	ldd	r24, Z+40	; 0x28
    918e:	91 a5       	ldd	r25, Z+41	; 0x29
    9190:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9192:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9194:	8f 3f       	cpi	r24, 0xFF	; 255
    9196:	9f 4f       	sbci	r25, 0xFF	; 255
    9198:	af 4f       	sbci	r26, 0xFF	; 255
    919a:	bf 4f       	sbci	r27, 0xFF	; 255
    919c:	09 f4       	brne	.+2      	; 0x91a0 <get_fileinfo+0x44>
    919e:	48 c0       	rjmp	.+144    	; 0x9230 <get_fileinfo+0xd4>
    91a0:	a1 2c       	mov	r10, r1
    91a2:	b1 2c       	mov	r11, r1
    91a4:	c1 2c       	mov	r12, r1
    91a6:	d1 2c       	mov	r13, r1
    91a8:	e1 2c       	mov	r14, r1
    91aa:	f1 2c       	mov	r15, r1
    91ac:	88 24       	eor	r8, r8
    91ae:	8a 94       	dec	r8
    91b0:	91 2c       	mov	r9, r1
    91b2:	f3 01       	movw	r30, r6
    91b4:	83 85       	ldd	r24, Z+11	; 0x0b
    91b6:	94 85       	ldd	r25, Z+12	; 0x0c
    91b8:	fc 01       	movw	r30, r24
    91ba:	ea 0d       	add	r30, r10
    91bc:	fb 1d       	adc	r31, r11
    91be:	80 81       	ld	r24, Z
    91c0:	91 81       	ldd	r25, Z+1	; 0x01
    91c2:	00 97       	sbiw	r24, 0x00	; 0
    91c4:	69 f1       	breq	.+90     	; 0x9220 <get_fileinfo+0xc4>
    91c6:	c1 14       	cp	r12, r1
    91c8:	d1 04       	cpc	r13, r1
    91ca:	29 f4       	brne	.+10     	; 0x91d6 <get_fileinfo+0x7a>
    91cc:	9c 01       	movw	r18, r24
    91ce:	38 5d       	subi	r19, 0xD8	; 216
    91d0:	21 15       	cp	r18, r1
    91d2:	38 40       	sbci	r19, 0x08	; 8
    91d4:	f0 f0       	brcs	.+60     	; 0x9212 <get_fileinfo+0xb6>
    91d6:	a7 01       	movw	r20, r14
    91d8:	4a 5e       	subi	r20, 0xEA	; 234
    91da:	5f 4f       	sbci	r21, 0xFF	; 255
    91dc:	4c 0f       	add	r20, r28
    91de:	5d 1f       	adc	r21, r29
    91e0:	16 01       	movw	r2, r12
    91e2:	41 2c       	mov	r4, r1
    91e4:	51 2c       	mov	r5, r1
    91e6:	21 01       	movw	r4, r2
    91e8:	33 24       	eor	r3, r3
    91ea:	22 24       	eor	r2, r2
    91ec:	a0 e0       	ldi	r26, 0x00	; 0
    91ee:	b0 e0       	ldi	r27, 0x00	; 0
    91f0:	bc 01       	movw	r22, r24
    91f2:	cd 01       	movw	r24, r26
    91f4:	62 29       	or	r22, r2
    91f6:	73 29       	or	r23, r3
    91f8:	84 29       	or	r24, r4
    91fa:	95 29       	or	r25, r5
    91fc:	94 01       	movw	r18, r8
    91fe:	2e 19       	sub	r18, r14
    9200:	3f 09       	sbc	r19, r15
    9202:	ff de       	rcall	.-514    	; 0x9002 <put_utf>
    9204:	90 e0       	ldi	r25, 0x00	; 0
    9206:	00 97       	sbiw	r24, 0x00	; 0
    9208:	49 f0       	breq	.+18     	; 0x921c <get_fileinfo+0xc0>
    920a:	e8 0e       	add	r14, r24
    920c:	f9 1e       	adc	r15, r25
    920e:	80 e0       	ldi	r24, 0x00	; 0
    9210:	90 e0       	ldi	r25, 0x00	; 0
    9212:	e2 e0       	ldi	r30, 0x02	; 2
    9214:	ae 0e       	add	r10, r30
    9216:	b1 1c       	adc	r11, r1
    9218:	6c 01       	movw	r12, r24
    921a:	cb cf       	rjmp	.-106    	; 0x91b2 <get_fileinfo+0x56>
    921c:	e1 2c       	mov	r14, r1
    921e:	f1 2c       	mov	r15, r1
    9220:	cd 28       	or	r12, r13
    9222:	11 f0       	breq	.+4      	; 0x9228 <get_fileinfo+0xcc>
    9224:	e1 2c       	mov	r14, r1
    9226:	f1 2c       	mov	r15, r1
    9228:	fe 01       	movw	r30, r28
    922a:	ee 0d       	add	r30, r14
    922c:	ff 1d       	adc	r31, r15
    922e:	16 8a       	std	Z+22, r1	; 0x16
    9230:	e1 2c       	mov	r14, r1
    9232:	f1 2c       	mov	r15, r1
    9234:	80 e0       	ldi	r24, 0x00	; 0
    9236:	90 e0       	ldi	r25, 0x00	; 0
    9238:	2c e0       	ldi	r18, 0x0C	; 12
    923a:	a2 2e       	mov	r10, r18
    923c:	b1 2c       	mov	r11, r1
    923e:	3e e2       	ldi	r19, 0x2E	; 46
    9240:	93 2e       	mov	r9, r19
    9242:	6c 01       	movw	r12, r24
    9244:	ff ef       	ldi	r31, 0xFF	; 255
    9246:	cf 1a       	sub	r12, r31
    9248:	df 0a       	sbc	r13, r31
    924a:	f8 01       	movw	r30, r16
    924c:	22 8d       	ldd	r18, Z+26	; 0x1a
    924e:	33 8d       	ldd	r19, Z+27	; 0x1b
    9250:	f9 01       	movw	r30, r18
    9252:	e8 0f       	add	r30, r24
    9254:	f9 1f       	adc	r31, r25
    9256:	80 81       	ld	r24, Z
    9258:	90 e0       	ldi	r25, 0x00	; 0
    925a:	80 32       	cpi	r24, 0x20	; 32
    925c:	91 05       	cpc	r25, r1
    925e:	71 f1       	breq	.+92     	; 0x92bc <get_fileinfo+0x160>
    9260:	85 30       	cpi	r24, 0x05	; 5
    9262:	91 05       	cpc	r25, r1
    9264:	11 f4       	brne	.+4      	; 0x926a <get_fileinfo+0x10e>
    9266:	85 ee       	ldi	r24, 0xE5	; 229
    9268:	90 e0       	ldi	r25, 0x00	; 0
    926a:	f9 e0       	ldi	r31, 0x09	; 9
    926c:	cf 16       	cp	r12, r31
    926e:	d1 04       	cpc	r13, r1
    9270:	59 f4       	brne	.+22     	; 0x9288 <get_fileinfo+0x12c>
    9272:	2c e0       	ldi	r18, 0x0C	; 12
    9274:	e2 16       	cp	r14, r18
    9276:	f1 04       	cpc	r15, r1
    9278:	38 f4       	brcc	.+14     	; 0x9288 <get_fileinfo+0x12c>
    927a:	fe 01       	movw	r30, r28
    927c:	ee 0d       	add	r30, r14
    927e:	ff 1d       	adc	r31, r15
    9280:	91 86       	std	Z+9, r9	; 0x09
    9282:	f7 01       	movw	r30, r14
    9284:	31 96       	adiw	r30, 0x01	; 1
    9286:	7f 01       	movw	r14, r30
    9288:	65 eb       	ldi	r22, 0xB5	; 181
    928a:	71 e0       	ldi	r23, 0x01	; 1
    928c:	0e 94 13 69 	call	0xd226	; 0xd226 <ff_oem2uni>
    9290:	00 97       	sbiw	r24, 0x00	; 0
    9292:	19 f4       	brne	.+6      	; 0x929a <get_fileinfo+0x13e>
    9294:	e1 2c       	mov	r14, r1
    9296:	f1 2c       	mov	r15, r1
    9298:	16 c0       	rjmp	.+44     	; 0x92c6 <get_fileinfo+0x16a>
    929a:	a7 01       	movw	r20, r14
    929c:	47 5f       	subi	r20, 0xF7	; 247
    929e:	5f 4f       	sbci	r21, 0xFF	; 255
    92a0:	4c 0f       	add	r20, r28
    92a2:	5d 1f       	adc	r21, r29
    92a4:	bc 01       	movw	r22, r24
    92a6:	80 e0       	ldi	r24, 0x00	; 0
    92a8:	90 e0       	ldi	r25, 0x00	; 0
    92aa:	95 01       	movw	r18, r10
    92ac:	2e 19       	sub	r18, r14
    92ae:	3f 09       	sbc	r19, r15
    92b0:	a8 de       	rcall	.-688    	; 0x9002 <put_utf>
    92b2:	90 e0       	ldi	r25, 0x00	; 0
    92b4:	00 97       	sbiw	r24, 0x00	; 0
    92b6:	71 f3       	breq	.-36     	; 0x9294 <get_fileinfo+0x138>
    92b8:	e8 0e       	add	r14, r24
    92ba:	f9 1e       	adc	r15, r25
    92bc:	c6 01       	movw	r24, r12
    92be:	8b 30       	cpi	r24, 0x0B	; 11
    92c0:	91 05       	cpc	r25, r1
    92c2:	09 f0       	breq	.+2      	; 0x92c6 <get_fileinfo+0x16a>
    92c4:	be cf       	rjmp	.-132    	; 0x9242 <get_fileinfo+0xe6>
    92c6:	fe 01       	movw	r30, r28
    92c8:	ee 0d       	add	r30, r14
    92ca:	ff 1d       	adc	r31, r15
    92cc:	11 86       	std	Z+9, r1	; 0x09
    92ce:	8e 89       	ldd	r24, Y+22	; 0x16
    92d0:	81 11       	cpse	r24, r1
    92d2:	36 c0       	rjmp	.+108    	; 0x9340 <get_fileinfo+0x1e4>
    92d4:	e1 14       	cp	r14, r1
    92d6:	f1 04       	cpc	r15, r1
    92d8:	31 f0       	breq	.+12     	; 0x92e6 <get_fileinfo+0x18a>
    92da:	de 01       	movw	r26, r28
    92dc:	19 96       	adiw	r26, 0x09	; 9
    92de:	58 e0       	ldi	r21, 0x08	; 8
    92e0:	20 e0       	ldi	r18, 0x00	; 0
    92e2:	30 e0       	ldi	r19, 0x00	; 0
    92e4:	14 c0       	rjmp	.+40     	; 0x930e <get_fileinfo+0x1b2>
    92e6:	8f e3       	ldi	r24, 0x3F	; 63
    92e8:	8e 8b       	std	Y+22, r24	; 0x16
    92ea:	21 e0       	ldi	r18, 0x01	; 1
    92ec:	30 e0       	ldi	r19, 0x00	; 0
    92ee:	1c c0       	rjmp	.+56     	; 0x9328 <get_fileinfo+0x1cc>
    92f0:	90 e0       	ldi	r25, 0x00	; 0
    92f2:	8e 32       	cpi	r24, 0x2E	; 46
    92f4:	91 05       	cpc	r25, r1
    92f6:	09 f4       	brne	.+2      	; 0x92fa <get_fileinfo+0x19e>
    92f8:	50 e1       	ldi	r21, 0x10	; 16
    92fa:	bc 01       	movw	r22, r24
    92fc:	61 54       	subi	r22, 0x41	; 65
    92fe:	71 09       	sbc	r23, r1
    9300:	6a 31       	cpi	r22, 0x1A	; 26
    9302:	71 05       	cpc	r23, r1
    9304:	40 f0       	brcs	.+16     	; 0x9316 <get_fileinfo+0x1ba>
    9306:	fd 01       	movw	r30, r26
    9308:	84 87       	std	Z+12, r24	; 0x0c
    930a:	2f 5f       	subi	r18, 0xFF	; 255
    930c:	3f 4f       	sbci	r19, 0xFF	; 255
    930e:	8d 91       	ld	r24, X+
    9310:	81 11       	cpse	r24, r1
    9312:	ee cf       	rjmp	.-36     	; 0x92f0 <get_fileinfo+0x194>
    9314:	09 c0       	rjmp	.+18     	; 0x9328 <get_fileinfo+0x1cc>
    9316:	f8 01       	movw	r30, r16
    9318:	62 8d       	ldd	r22, Z+26	; 0x1a
    931a:	73 8d       	ldd	r23, Z+27	; 0x1b
    931c:	fb 01       	movw	r30, r22
    931e:	44 85       	ldd	r20, Z+12	; 0x0c
    9320:	45 23       	and	r20, r21
    9322:	89 f3       	breq	.-30     	; 0x9306 <get_fileinfo+0x1aa>
    9324:	80 96       	adiw	r24, 0x20	; 32
    9326:	ef cf       	rjmp	.-34     	; 0x9306 <get_fileinfo+0x1aa>
    9328:	fe 01       	movw	r30, r28
    932a:	e2 0f       	add	r30, r18
    932c:	f3 1f       	adc	r31, r19
    932e:	16 8a       	std	Z+22, r1	; 0x16
    9330:	f8 01       	movw	r30, r16
    9332:	82 8d       	ldd	r24, Z+26	; 0x1a
    9334:	93 8d       	ldd	r25, Z+27	; 0x1b
    9336:	fc 01       	movw	r30, r24
    9338:	84 85       	ldd	r24, Z+12	; 0x0c
    933a:	81 11       	cpse	r24, r1
    933c:	01 c0       	rjmp	.+2      	; 0x9340 <get_fileinfo+0x1e4>
    933e:	19 86       	std	Y+9, r1	; 0x09
    9340:	f8 01       	movw	r30, r16
    9342:	82 8d       	ldd	r24, Z+26	; 0x1a
    9344:	93 8d       	ldd	r25, Z+27	; 0x1b
    9346:	fc 01       	movw	r30, r24
    9348:	83 85       	ldd	r24, Z+11	; 0x0b
    934a:	88 87       	std	Y+8, r24	; 0x08
    934c:	f8 01       	movw	r30, r16
    934e:	02 8d       	ldd	r16, Z+26	; 0x1a
    9350:	13 8d       	ldd	r17, Z+27	; 0x1b
    9352:	c8 01       	movw	r24, r16
    9354:	4c 96       	adiw	r24, 0x1c	; 28
    9356:	c6 dc       	rcall	.-1652   	; 0x8ce4 <ld_dword>
    9358:	68 83       	st	Y, r22
    935a:	79 83       	std	Y+1, r23	; 0x01
    935c:	8a 83       	std	Y+2, r24	; 0x02
    935e:	9b 83       	std	Y+3, r25	; 0x03
    9360:	f8 01       	movw	r30, r16
    9362:	86 89       	ldd	r24, Z+22	; 0x16
    9364:	97 89       	ldd	r25, Z+23	; 0x17
    9366:	9f 83       	std	Y+7, r25	; 0x07
    9368:	8e 83       	std	Y+6, r24	; 0x06
    936a:	80 8d       	ldd	r24, Z+24	; 0x18
    936c:	91 8d       	ldd	r25, Z+25	; 0x19
    936e:	9d 83       	std	Y+5, r25	; 0x05
    9370:	8c 83       	std	Y+4, r24	; 0x04
    9372:	cd b7       	in	r28, 0x3d	; 61
    9374:	de b7       	in	r29, 0x3e	; 62
    9376:	e2 e1       	ldi	r30, 0x12	; 18
    9378:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000937c <ld_clust.isra.4>:
    937c:	fb 01       	movw	r30, r22
    937e:	42 8d       	ldd	r20, Z+26	; 0x1a
    9380:	53 8d       	ldd	r21, Z+27	; 0x1b
    9382:	60 e0       	ldi	r22, 0x00	; 0
    9384:	70 e0       	ldi	r23, 0x00	; 0
    9386:	83 30       	cpi	r24, 0x03	; 3
    9388:	59 f4       	brne	.+22     	; 0x93a0 <ld_clust.isra.4+0x24>
    938a:	84 89       	ldd	r24, Z+20	; 0x14
    938c:	95 89       	ldd	r25, Z+21	; 0x15
    938e:	a0 e0       	ldi	r26, 0x00	; 0
    9390:	b0 e0       	ldi	r27, 0x00	; 0
    9392:	dc 01       	movw	r26, r24
    9394:	99 27       	eor	r25, r25
    9396:	88 27       	eor	r24, r24
    9398:	48 2b       	or	r20, r24
    939a:	59 2b       	or	r21, r25
    939c:	6a 2b       	or	r22, r26
    939e:	7b 2b       	or	r23, r27
    93a0:	cb 01       	movw	r24, r22
    93a2:	ba 01       	movw	r22, r20
    93a4:	08 95       	ret

000093a6 <st_clust.isra.5>:
    93a6:	fb 01       	movw	r30, r22
    93a8:	22 8f       	std	Z+26, r18	; 0x1a
    93aa:	33 8f       	std	Z+27, r19	; 0x1b
    93ac:	dc 01       	movw	r26, r24
    93ae:	8c 91       	ld	r24, X
    93b0:	83 30       	cpi	r24, 0x03	; 3
    93b2:	29 f4       	brne	.+10     	; 0x93be <st_clust.isra.5+0x18>
    93b4:	ca 01       	movw	r24, r20
    93b6:	aa 27       	eor	r26, r26
    93b8:	bb 27       	eor	r27, r27
    93ba:	84 8b       	std	Z+20, r24	; 0x14
    93bc:	95 8b       	std	Z+21, r25	; 0x15
    93be:	08 95       	ret

000093c0 <sync_window.part.6>:
    93c0:	8f 92       	push	r8
    93c2:	9f 92       	push	r9
    93c4:	af 92       	push	r10
    93c6:	bf 92       	push	r11
    93c8:	ef 92       	push	r14
    93ca:	ff 92       	push	r15
    93cc:	0f 93       	push	r16
    93ce:	1f 93       	push	r17
    93d0:	cf 93       	push	r28
    93d2:	df 93       	push	r29
    93d4:	ec 01       	movw	r28, r24
    93d6:	7c 01       	movw	r14, r24
    93d8:	45 e3       	ldi	r20, 0x35	; 53
    93da:	e4 0e       	add	r14, r20
    93dc:	f1 1c       	adc	r15, r1
    93de:	29 a9       	ldd	r18, Y+49	; 0x31
    93e0:	3a a9       	ldd	r19, Y+50	; 0x32
    93e2:	4b a9       	ldd	r20, Y+51	; 0x33
    93e4:	5c a9       	ldd	r21, Y+52	; 0x34
    93e6:	01 e0       	ldi	r16, 0x01	; 1
    93e8:	10 e0       	ldi	r17, 0x00	; 0
    93ea:	b7 01       	movw	r22, r14
    93ec:	89 81       	ldd	r24, Y+1	; 0x01
    93ee:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    93f2:	89 2b       	or	r24, r25
    93f4:	41 f5       	brne	.+80     	; 0x9446 <sync_window.part.6+0x86>
    93f6:	1b 82       	std	Y+3, r1	; 0x03
    93f8:	09 a9       	ldd	r16, Y+49	; 0x31
    93fa:	1a a9       	ldd	r17, Y+50	; 0x32
    93fc:	2b a9       	ldd	r18, Y+51	; 0x33
    93fe:	3c a9       	ldd	r19, Y+52	; 0x34
    9400:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9402:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9404:	af 8d       	ldd	r26, Y+31	; 0x1f
    9406:	b8 a1       	ldd	r27, Y+32	; 0x20
    9408:	8d a0       	ldd	r8, Y+37	; 0x25
    940a:	9e a0       	ldd	r9, Y+38	; 0x26
    940c:	af a0       	ldd	r10, Y+39	; 0x27
    940e:	b8 a4       	ldd	r11, Y+40	; 0x28
    9410:	b9 01       	movw	r22, r18
    9412:	a8 01       	movw	r20, r16
    9414:	48 19       	sub	r20, r8
    9416:	59 09       	sbc	r21, r9
    9418:	6a 09       	sbc	r22, r10
    941a:	7b 09       	sbc	r23, r11
    941c:	48 17       	cp	r20, r24
    941e:	59 07       	cpc	r21, r25
    9420:	6a 07       	cpc	r22, r26
    9422:	7b 07       	cpc	r23, r27
    9424:	98 f4       	brcc	.+38     	; 0x944c <sync_window.part.6+0x8c>
    9426:	6a 81       	ldd	r22, Y+2	; 0x02
    9428:	62 30       	cpi	r22, 0x02	; 2
    942a:	81 f4       	brne	.+32     	; 0x944c <sync_window.part.6+0x8c>
    942c:	a9 01       	movw	r20, r18
    942e:	98 01       	movw	r18, r16
    9430:	28 0f       	add	r18, r24
    9432:	39 1f       	adc	r19, r25
    9434:	4a 1f       	adc	r20, r26
    9436:	5b 1f       	adc	r21, r27
    9438:	01 e0       	ldi	r16, 0x01	; 1
    943a:	10 e0       	ldi	r17, 0x00	; 0
    943c:	b7 01       	movw	r22, r14
    943e:	89 81       	ldd	r24, Y+1	; 0x01
    9440:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    9444:	03 c0       	rjmp	.+6      	; 0x944c <sync_window.part.6+0x8c>
    9446:	81 e0       	ldi	r24, 0x01	; 1
    9448:	90 e0       	ldi	r25, 0x00	; 0
    944a:	02 c0       	rjmp	.+4      	; 0x9450 <sync_window.part.6+0x90>
    944c:	80 e0       	ldi	r24, 0x00	; 0
    944e:	90 e0       	ldi	r25, 0x00	; 0
    9450:	df 91       	pop	r29
    9452:	cf 91       	pop	r28
    9454:	1f 91       	pop	r17
    9456:	0f 91       	pop	r16
    9458:	ff 90       	pop	r15
    945a:	ef 90       	pop	r14
    945c:	bf 90       	pop	r11
    945e:	af 90       	pop	r10
    9460:	9f 90       	pop	r9
    9462:	8f 90       	pop	r8
    9464:	08 95       	ret

00009466 <sync_fs>:
    9466:	ef 92       	push	r14
    9468:	ff 92       	push	r15
    946a:	0f 93       	push	r16
    946c:	1f 93       	push	r17
    946e:	cf 93       	push	r28
    9470:	df 93       	push	r29
    9472:	ec 01       	movw	r28, r24
    9474:	8b 81       	ldd	r24, Y+3	; 0x03
    9476:	81 11       	cpse	r24, r1
    9478:	05 c0       	rjmp	.+10     	; 0x9484 <sync_fs+0x1e>
    947a:	88 81       	ld	r24, Y
    947c:	83 30       	cpi	r24, 0x03	; 3
    947e:	09 f0       	breq	.+2      	; 0x9482 <sync_fs+0x1c>
    9480:	52 c0       	rjmp	.+164    	; 0x9526 <sync_fs+0xc0>
    9482:	06 c0       	rjmp	.+12     	; 0x9490 <sync_fs+0x2a>
    9484:	ce 01       	movw	r24, r28
    9486:	9c df       	rcall	.-200    	; 0x93c0 <sync_window.part.6>
    9488:	00 97       	sbiw	r24, 0x00	; 0
    948a:	09 f0       	breq	.+2      	; 0x948e <sync_fs+0x28>
    948c:	59 c0       	rjmp	.+178    	; 0x9540 <sync_fs+0xda>
    948e:	f5 cf       	rjmp	.-22     	; 0x947a <sync_fs+0x14>
    9490:	8c 81       	ldd	r24, Y+4	; 0x04
    9492:	81 30       	cpi	r24, 0x01	; 1
    9494:	09 f0       	breq	.+2      	; 0x9498 <sync_fs+0x32>
    9496:	47 c0       	rjmp	.+142    	; 0x9526 <sync_fs+0xc0>
    9498:	40 e0       	ldi	r20, 0x00	; 0
    949a:	52 e0       	ldi	r21, 0x02	; 2
    949c:	60 e0       	ldi	r22, 0x00	; 0
    949e:	70 e0       	ldi	r23, 0x00	; 0
    94a0:	7e 01       	movw	r14, r28
    94a2:	85 e3       	ldi	r24, 0x35	; 53
    94a4:	e8 0e       	add	r14, r24
    94a6:	f1 1c       	adc	r15, r1
    94a8:	c7 01       	movw	r24, r14
    94aa:	37 dc       	rcall	.-1938   	; 0x8d1a <mem_set>
    94ac:	85 e5       	ldi	r24, 0x55	; 85
    94ae:	fe 01       	movw	r30, r28
    94b0:	ed 5c       	subi	r30, 0xCD	; 205
    94b2:	fd 4f       	sbci	r31, 0xFD	; 253
    94b4:	80 83       	st	Z, r24
    94b6:	8a ea       	ldi	r24, 0xAA	; 170
    94b8:	31 96       	adiw	r30, 0x01	; 1
    94ba:	80 83       	st	Z, r24
    94bc:	82 e5       	ldi	r24, 0x52	; 82
    94be:	8d ab       	std	Y+53, r24	; 0x35
    94c0:	8e ab       	std	Y+54, r24	; 0x36
    94c2:	81 e6       	ldi	r24, 0x61	; 97
    94c4:	8f ab       	std	Y+55, r24	; 0x37
    94c6:	91 e4       	ldi	r25, 0x41	; 65
    94c8:	98 af       	std	Y+56, r25	; 0x38
    94ca:	22 e7       	ldi	r18, 0x72	; 114
    94cc:	7b 97       	sbiw	r30, 0x1b	; 27
    94ce:	20 83       	st	Z, r18
    94d0:	31 96       	adiw	r30, 0x01	; 1
    94d2:	20 83       	st	Z, r18
    94d4:	31 96       	adiw	r30, 0x01	; 1
    94d6:	90 83       	st	Z, r25
    94d8:	31 96       	adiw	r30, 0x01	; 1
    94da:	80 83       	st	Z, r24
    94dc:	49 89       	ldd	r20, Y+17	; 0x11
    94de:	5a 89       	ldd	r21, Y+18	; 0x12
    94e0:	6b 89       	ldd	r22, Y+19	; 0x13
    94e2:	7c 89       	ldd	r23, Y+20	; 0x14
    94e4:	ce 01       	movw	r24, r28
    94e6:	83 5e       	subi	r24, 0xE3	; 227
    94e8:	9d 4f       	sbci	r25, 0xFD	; 253
    94ea:	11 dc       	rcall	.-2014   	; 0x8d0e <st_dword>
    94ec:	4d 85       	ldd	r20, Y+13	; 0x0d
    94ee:	5e 85       	ldd	r21, Y+14	; 0x0e
    94f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    94f2:	78 89       	ldd	r23, Y+16	; 0x10
    94f4:	ce 01       	movw	r24, r28
    94f6:	8f 5d       	subi	r24, 0xDF	; 223
    94f8:	9d 4f       	sbci	r25, 0xFD	; 253
    94fa:	09 dc       	rcall	.-2030   	; 0x8d0e <st_dword>
    94fc:	89 a1       	ldd	r24, Y+33	; 0x21
    94fe:	9a a1       	ldd	r25, Y+34	; 0x22
    9500:	ab a1       	ldd	r26, Y+35	; 0x23
    9502:	bc a1       	ldd	r27, Y+36	; 0x24
    9504:	9c 01       	movw	r18, r24
    9506:	ad 01       	movw	r20, r26
    9508:	2f 5f       	subi	r18, 0xFF	; 255
    950a:	3f 4f       	sbci	r19, 0xFF	; 255
    950c:	4f 4f       	sbci	r20, 0xFF	; 255
    950e:	5f 4f       	sbci	r21, 0xFF	; 255
    9510:	29 ab       	std	Y+49, r18	; 0x31
    9512:	3a ab       	std	Y+50, r19	; 0x32
    9514:	4b ab       	std	Y+51, r20	; 0x33
    9516:	5c ab       	std	Y+52, r21	; 0x34
    9518:	01 e0       	ldi	r16, 0x01	; 1
    951a:	10 e0       	ldi	r17, 0x00	; 0
    951c:	b7 01       	movw	r22, r14
    951e:	89 81       	ldd	r24, Y+1	; 0x01
    9520:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    9524:	1c 82       	std	Y+4, r1	; 0x04
    9526:	40 e0       	ldi	r20, 0x00	; 0
    9528:	50 e0       	ldi	r21, 0x00	; 0
    952a:	60 e0       	ldi	r22, 0x00	; 0
    952c:	89 81       	ldd	r24, Y+1	; 0x01
    952e:	0e 94 b6 69 	call	0xd36c	; 0xd36c <disk_ioctl>
    9532:	31 e0       	ldi	r19, 0x01	; 1
    9534:	20 e0       	ldi	r18, 0x00	; 0
    9536:	89 2b       	or	r24, r25
    9538:	09 f4       	brne	.+2      	; 0x953c <sync_fs+0xd6>
    953a:	30 e0       	ldi	r19, 0x00	; 0
    953c:	83 2f       	mov	r24, r19
    953e:	92 2f       	mov	r25, r18
    9540:	cd b7       	in	r28, 0x3d	; 61
    9542:	de b7       	in	r29, 0x3e	; 62
    9544:	e6 e0       	ldi	r30, 0x06	; 6
    9546:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0000954a <dir_clear>:
    954a:	4f 92       	push	r4
    954c:	5f 92       	push	r5
    954e:	6f 92       	push	r6
    9550:	7f 92       	push	r7
    9552:	af 92       	push	r10
    9554:	bf 92       	push	r11
    9556:	cf 92       	push	r12
    9558:	df 92       	push	r13
    955a:	ef 92       	push	r14
    955c:	ff 92       	push	r15
    955e:	0f 93       	push	r16
    9560:	1f 93       	push	r17
    9562:	cf 93       	push	r28
    9564:	df 93       	push	r29
    9566:	ec 01       	movw	r28, r24
    9568:	6a 01       	movw	r12, r20
    956a:	7b 01       	movw	r14, r22
    956c:	8b 81       	ldd	r24, Y+3	; 0x03
    956e:	81 11       	cpse	r24, r1
    9570:	28 c0       	rjmp	.+80     	; 0x95c2 <dir_clear+0x78>
    9572:	b7 01       	movw	r22, r14
    9574:	a6 01       	movw	r20, r12
    9576:	ce 01       	movw	r24, r28
    9578:	6e dc       	rcall	.-1828   	; 0x8e56 <clst2sect>
    957a:	2b 01       	movw	r4, r22
    957c:	3c 01       	movw	r6, r24
    957e:	69 ab       	std	Y+49, r22	; 0x31
    9580:	7a ab       	std	Y+50, r23	; 0x32
    9582:	8b ab       	std	Y+51, r24	; 0x33
    9584:	9c ab       	std	Y+52, r25	; 0x34
    9586:	5e 01       	movw	r10, r28
    9588:	25 e3       	ldi	r18, 0x35	; 53
    958a:	a2 0e       	add	r10, r18
    958c:	b1 1c       	adc	r11, r1
    958e:	40 e0       	ldi	r20, 0x00	; 0
    9590:	52 e0       	ldi	r21, 0x02	; 2
    9592:	60 e0       	ldi	r22, 0x00	; 0
    9594:	70 e0       	ldi	r23, 0x00	; 0
    9596:	c5 01       	movw	r24, r10
    9598:	c0 db       	rcall	.-2176   	; 0x8d1a <mem_set>
    959a:	09 85       	ldd	r16, Y+9	; 0x09
    959c:	1a 85       	ldd	r17, Y+10	; 0x0a
    959e:	c8 01       	movw	r24, r16
    95a0:	a0 e0       	ldi	r26, 0x00	; 0
    95a2:	b0 e0       	ldi	r27, 0x00	; 0
    95a4:	39 e0       	ldi	r19, 0x09	; 9
    95a6:	88 0f       	add	r24, r24
    95a8:	99 1f       	adc	r25, r25
    95aa:	aa 1f       	adc	r26, r26
    95ac:	bb 1f       	adc	r27, r27
    95ae:	3a 95       	dec	r19
    95b0:	d1 f7       	brne	.-12     	; 0x95a6 <dir_clear+0x5c>
    95b2:	81 15       	cp	r24, r1
    95b4:	90 48       	sbci	r25, 0x80	; 128
    95b6:	a1 05       	cpc	r26, r1
    95b8:	b1 05       	cpc	r27, r1
    95ba:	50 f0       	brcs	.+20     	; 0x95d0 <dir_clear+0x86>
    95bc:	00 e0       	ldi	r16, 0x00	; 0
    95be:	10 e8       	ldi	r17, 0x80	; 128
    95c0:	14 c0       	rjmp	.+40     	; 0x95ea <dir_clear+0xa0>
    95c2:	ce 01       	movw	r24, r28
    95c4:	fd de       	rcall	.-518    	; 0x93c0 <sync_window.part.6>
    95c6:	89 2b       	or	r24, r25
    95c8:	a1 f2       	breq	.-88     	; 0x9572 <dir_clear+0x28>
    95ca:	81 e0       	ldi	r24, 0x01	; 1
    95cc:	90 e0       	ldi	r25, 0x00	; 0
    95ce:	56 c0       	rjmp	.+172    	; 0x967c <dir_clear+0x132>
    95d0:	10 2f       	mov	r17, r16
    95d2:	00 27       	eor	r16, r16
    95d4:	11 0f       	add	r17, r17
    95d6:	09 c0       	rjmp	.+18     	; 0x95ea <dir_clear+0xa0>
    95d8:	c8 01       	movw	r24, r16
    95da:	0e 94 da 68 	call	0xd1b4	; 0xd1b4 <ff_memalloc>
    95de:	6c 01       	movw	r12, r24
    95e0:	00 97       	sbiw	r24, 0x00	; 0
    95e2:	09 f0       	breq	.+2      	; 0x95e6 <dir_clear+0x9c>
    95e4:	40 c0       	rjmp	.+128    	; 0x9666 <dir_clear+0x11c>
    95e6:	16 95       	lsr	r17
    95e8:	07 95       	ror	r16
    95ea:	01 30       	cpi	r16, 0x01	; 1
    95ec:	82 e0       	ldi	r24, 0x02	; 2
    95ee:	18 07       	cpc	r17, r24
    95f0:	98 f7       	brcc	.-26     	; 0x95d8 <dir_clear+0x8e>
    95f2:	e1 2c       	mov	r14, r1
    95f4:	f1 2c       	mov	r15, r1
    95f6:	11 c0       	rjmp	.+34     	; 0x961a <dir_clear+0xd0>
    95f8:	01 e0       	ldi	r16, 0x01	; 1
    95fa:	10 e0       	ldi	r17, 0x00	; 0
    95fc:	a3 01       	movw	r20, r6
    95fe:	92 01       	movw	r18, r4
    9600:	2e 0d       	add	r18, r14
    9602:	3f 1d       	adc	r19, r15
    9604:	41 1d       	adc	r20, r1
    9606:	51 1d       	adc	r21, r1
    9608:	b5 01       	movw	r22, r10
    960a:	89 81       	ldd	r24, Y+1	; 0x01
    960c:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    9610:	89 2b       	or	r24, r25
    9612:	01 f5       	brne	.+64     	; 0x9654 <dir_clear+0x10a>
    9614:	2f ef       	ldi	r18, 0xFF	; 255
    9616:	e2 1a       	sub	r14, r18
    9618:	f2 0a       	sbc	r15, r18
    961a:	89 85       	ldd	r24, Y+9	; 0x09
    961c:	9a 85       	ldd	r25, Y+10	; 0x0a
    961e:	e8 16       	cp	r14, r24
    9620:	f9 06       	cpc	r15, r25
    9622:	50 f3       	brcs	.-44     	; 0x95f8 <dir_clear+0xae>
    9624:	17 c0       	rjmp	.+46     	; 0x9654 <dir_clear+0x10a>
    9626:	85 01       	movw	r16, r10
    9628:	a3 01       	movw	r20, r6
    962a:	92 01       	movw	r18, r4
    962c:	2e 0d       	add	r18, r14
    962e:	3f 1d       	adc	r19, r15
    9630:	41 1d       	adc	r20, r1
    9632:	51 1d       	adc	r21, r1
    9634:	b6 01       	movw	r22, r12
    9636:	89 81       	ldd	r24, Y+1	; 0x01
    9638:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    963c:	89 2b       	or	r24, r25
    963e:	39 f4       	brne	.+14     	; 0x964e <dir_clear+0x104>
    9640:	ea 0c       	add	r14, r10
    9642:	fb 1c       	adc	r15, r11
    9644:	89 85       	ldd	r24, Y+9	; 0x09
    9646:	9a 85       	ldd	r25, Y+10	; 0x0a
    9648:	e8 16       	cp	r14, r24
    964a:	f9 06       	cpc	r15, r25
    964c:	60 f3       	brcs	.-40     	; 0x9626 <dir_clear+0xdc>
    964e:	c6 01       	movw	r24, r12
    9650:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <ff_memfree>
    9654:	81 e0       	ldi	r24, 0x01	; 1
    9656:	90 e0       	ldi	r25, 0x00	; 0
    9658:	29 85       	ldd	r18, Y+9	; 0x09
    965a:	3a 85       	ldd	r19, Y+10	; 0x0a
    965c:	2e 15       	cp	r18, r14
    965e:	3f 05       	cpc	r19, r15
    9660:	69 f4       	brne	.+26     	; 0x967c <dir_clear+0x132>
    9662:	80 e0       	ldi	r24, 0x00	; 0
    9664:	0b c0       	rjmp	.+22     	; 0x967c <dir_clear+0x132>
    9666:	a8 01       	movw	r20, r16
    9668:	60 e0       	ldi	r22, 0x00	; 0
    966a:	70 e0       	ldi	r23, 0x00	; 0
    966c:	56 db       	rcall	.-2388   	; 0x8d1a <mem_set>
    966e:	58 01       	movw	r10, r16
    9670:	ab 2c       	mov	r10, r11
    9672:	bb 24       	eor	r11, r11
    9674:	a6 94       	lsr	r10
    9676:	e1 2c       	mov	r14, r1
    9678:	f1 2c       	mov	r15, r1
    967a:	e4 cf       	rjmp	.-56     	; 0x9644 <dir_clear+0xfa>
    967c:	df 91       	pop	r29
    967e:	cf 91       	pop	r28
    9680:	1f 91       	pop	r17
    9682:	0f 91       	pop	r16
    9684:	ff 90       	pop	r15
    9686:	ef 90       	pop	r14
    9688:	df 90       	pop	r13
    968a:	cf 90       	pop	r12
    968c:	bf 90       	pop	r11
    968e:	af 90       	pop	r10
    9690:	7f 90       	pop	r7
    9692:	6f 90       	pop	r6
    9694:	5f 90       	pop	r5
    9696:	4f 90       	pop	r4
    9698:	08 95       	ret

0000969a <move_window>:
    969a:	a0 e0       	ldi	r26, 0x00	; 0
    969c:	b0 e0       	ldi	r27, 0x00	; 0
    969e:	e3 e5       	ldi	r30, 0x53	; 83
    96a0:	fb e4       	ldi	r31, 0x4B	; 75
    96a2:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    96a6:	ec 01       	movw	r28, r24
    96a8:	6a 01       	movw	r12, r20
    96aa:	7b 01       	movw	r14, r22
    96ac:	89 a9       	ldd	r24, Y+49	; 0x31
    96ae:	9a a9       	ldd	r25, Y+50	; 0x32
    96b0:	ab a9       	ldd	r26, Y+51	; 0x33
    96b2:	bc a9       	ldd	r27, Y+52	; 0x34
    96b4:	84 17       	cp	r24, r20
    96b6:	95 07       	cpc	r25, r21
    96b8:	a6 07       	cpc	r26, r22
    96ba:	b7 07       	cpc	r27, r23
    96bc:	11 f1       	breq	.+68     	; 0x9702 <move_window+0x68>
    96be:	8b 81       	ldd	r24, Y+3	; 0x03
    96c0:	81 11       	cpse	r24, r1
    96c2:	13 c0       	rjmp	.+38     	; 0x96ea <move_window+0x50>
    96c4:	01 e0       	ldi	r16, 0x01	; 1
    96c6:	10 e0       	ldi	r17, 0x00	; 0
    96c8:	a7 01       	movw	r20, r14
    96ca:	96 01       	movw	r18, r12
    96cc:	be 01       	movw	r22, r28
    96ce:	6b 5c       	subi	r22, 0xCB	; 203
    96d0:	7f 4f       	sbci	r23, 0xFF	; 255
    96d2:	89 81       	ldd	r24, Y+1	; 0x01
    96d4:	0e 94 96 69 	call	0xd32c	; 0xd32c <disk_read>
    96d8:	89 2b       	or	r24, r25
    96da:	61 f0       	breq	.+24     	; 0x96f4 <move_window+0x5a>
    96dc:	81 e0       	ldi	r24, 0x01	; 1
    96de:	90 e0       	ldi	r25, 0x00	; 0
    96e0:	cc 24       	eor	r12, r12
    96e2:	ca 94       	dec	r12
    96e4:	dc 2c       	mov	r13, r12
    96e6:	76 01       	movw	r14, r12
    96e8:	07 c0       	rjmp	.+14     	; 0x96f8 <move_window+0x5e>
    96ea:	ce 01       	movw	r24, r28
    96ec:	69 de       	rcall	.-814    	; 0x93c0 <sync_window.part.6>
    96ee:	00 97       	sbiw	r24, 0x00	; 0
    96f0:	51 f4       	brne	.+20     	; 0x9706 <move_window+0x6c>
    96f2:	e8 cf       	rjmp	.-48     	; 0x96c4 <move_window+0x2a>
    96f4:	80 e0       	ldi	r24, 0x00	; 0
    96f6:	90 e0       	ldi	r25, 0x00	; 0
    96f8:	c9 aa       	std	Y+49, r12	; 0x31
    96fa:	da aa       	std	Y+50, r13	; 0x32
    96fc:	eb aa       	std	Y+51, r14	; 0x33
    96fe:	fc aa       	std	Y+52, r15	; 0x34
    9700:	02 c0       	rjmp	.+4      	; 0x9706 <move_window+0x6c>
    9702:	80 e0       	ldi	r24, 0x00	; 0
    9704:	90 e0       	ldi	r25, 0x00	; 0
    9706:	cd b7       	in	r28, 0x3d	; 61
    9708:	de b7       	in	r29, 0x3e	; 62
    970a:	e8 e0       	ldi	r30, 0x08	; 8
    970c:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

00009710 <check_fs>:
    9710:	cf 93       	push	r28
    9712:	df 93       	push	r29
    9714:	ec 01       	movw	r28, r24
    9716:	1b 82       	std	Y+3, r1	; 0x03
    9718:	8f ef       	ldi	r24, 0xFF	; 255
    971a:	9f ef       	ldi	r25, 0xFF	; 255
    971c:	dc 01       	movw	r26, r24
    971e:	89 ab       	std	Y+49, r24	; 0x31
    9720:	9a ab       	std	Y+50, r25	; 0x32
    9722:	ab ab       	std	Y+51, r26	; 0x33
    9724:	bc ab       	std	Y+52, r27	; 0x34
    9726:	ce 01       	movw	r24, r28
    9728:	b8 df       	rcall	.-144    	; 0x969a <move_window>
    972a:	89 2b       	or	r24, r25
    972c:	19 f5       	brne	.+70     	; 0x9774 <check_fs+0x64>
    972e:	fe 01       	movw	r30, r28
    9730:	ed 5c       	subi	r30, 0xCD	; 205
    9732:	fd 4f       	sbci	r31, 0xFD	; 253
    9734:	80 81       	ld	r24, Z
    9736:	91 81       	ldd	r25, Z+1	; 0x01
    9738:	85 35       	cpi	r24, 0x55	; 85
    973a:	9a 4a       	sbci	r25, 0xAA	; 170
    973c:	f1 f4       	brne	.+60     	; 0x977a <check_fs+0x6a>
    973e:	8d a9       	ldd	r24, Y+53	; 0x35
    9740:	8b 3e       	cpi	r24, 0xEB	; 235
    9742:	19 f0       	breq	.+6      	; 0x974a <check_fs+0x3a>
    9744:	88 5e       	subi	r24, 0xE8	; 232
    9746:	82 30       	cpi	r24, 0x02	; 2
    9748:	f0 f4       	brcc	.+60     	; 0x9786 <check_fs+0x76>
    974a:	43 e0       	ldi	r20, 0x03	; 3
    974c:	50 e0       	ldi	r21, 0x00	; 0
    974e:	68 e9       	ldi	r22, 0x98	; 152
    9750:	78 e0       	ldi	r23, 0x08	; 8
    9752:	ce 01       	movw	r24, r28
    9754:	85 59       	subi	r24, 0x95	; 149
    9756:	9f 4f       	sbci	r25, 0xFF	; 255
    9758:	e9 da       	rcall	.-2606   	; 0x8d2c <mem_cmp>
    975a:	89 2b       	or	r24, r25
    975c:	89 f0       	breq	.+34     	; 0x9780 <check_fs+0x70>
    975e:	45 e0       	ldi	r20, 0x05	; 5
    9760:	50 e0       	ldi	r21, 0x00	; 0
    9762:	63 ef       	ldi	r22, 0xF3	; 243
    9764:	73 e0       	ldi	r23, 0x03	; 3
    9766:	ce 01       	movw	r24, r28
    9768:	89 57       	subi	r24, 0x79	; 121
    976a:	9f 4f       	sbci	r25, 0xFF	; 255
    976c:	df da       	rcall	.-2626   	; 0x8d2c <mem_cmp>
    976e:	89 2b       	or	r24, r25
    9770:	51 f4       	brne	.+20     	; 0x9786 <check_fs+0x76>
    9772:	06 c0       	rjmp	.+12     	; 0x9780 <check_fs+0x70>
    9774:	84 e0       	ldi	r24, 0x04	; 4
    9776:	90 e0       	ldi	r25, 0x00	; 0
    9778:	08 c0       	rjmp	.+16     	; 0x978a <check_fs+0x7a>
    977a:	83 e0       	ldi	r24, 0x03	; 3
    977c:	90 e0       	ldi	r25, 0x00	; 0
    977e:	05 c0       	rjmp	.+10     	; 0x978a <check_fs+0x7a>
    9780:	80 e0       	ldi	r24, 0x00	; 0
    9782:	90 e0       	ldi	r25, 0x00	; 0
    9784:	02 c0       	rjmp	.+4      	; 0x978a <check_fs+0x7a>
    9786:	82 e0       	ldi	r24, 0x02	; 2
    9788:	90 e0       	ldi	r25, 0x00	; 0
    978a:	df 91       	pop	r29
    978c:	cf 91       	pop	r28
    978e:	08 95       	ret

00009790 <mount_volume>:
    9790:	a0 e2       	ldi	r26, 0x20	; 32
    9792:	b0 e0       	ldi	r27, 0x00	; 0
    9794:	ee ec       	ldi	r30, 0xCE	; 206
    9796:	fb e4       	ldi	r31, 0x4B	; 75
    9798:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
    979c:	5b 01       	movw	r10, r22
    979e:	f4 2e       	mov	r15, r20
    97a0:	db 01       	movw	r26, r22
    97a2:	1d 92       	st	X+, r1
    97a4:	1c 92       	st	X, r1
    97a6:	ca db       	rcall	.-2156   	; 0x8f3c <get_ldnumber>
    97a8:	6c 01       	movw	r12, r24
    97aa:	97 fd       	sbrc	r25, 7
    97ac:	39 c2       	rjmp	.+1138   	; 0x9c20 <mount_volume+0x490>
    97ae:	fc 01       	movw	r30, r24
    97b0:	ee 0f       	add	r30, r30
    97b2:	ff 1f       	adc	r31, r31
    97b4:	e6 5f       	subi	r30, 0xF6	; 246
    97b6:	f7 4e       	sbci	r31, 0xE7	; 231
    97b8:	00 81       	ld	r16, Z
    97ba:	11 81       	ldd	r17, Z+1	; 0x01
    97bc:	01 15       	cp	r16, r1
    97be:	11 05       	cpc	r17, r1
    97c0:	09 f4       	brne	.+2      	; 0x97c4 <mount_volume+0x34>
    97c2:	31 c2       	rjmp	.+1122   	; 0x9c26 <mount_volume+0x496>
    97c4:	f5 01       	movw	r30, r10
    97c6:	11 83       	std	Z+1, r17	; 0x01
    97c8:	00 83       	st	Z, r16
    97ca:	ff 2d       	mov	r31, r15
    97cc:	fe 7f       	andi	r31, 0xFE	; 254
    97ce:	ff 2e       	mov	r15, r31
    97d0:	d8 01       	movw	r26, r16
    97d2:	8c 91       	ld	r24, X
    97d4:	88 23       	and	r24, r24
    97d6:	71 f0       	breq	.+28     	; 0x97f4 <mount_volume+0x64>
    97d8:	f8 01       	movw	r30, r16
    97da:	81 81       	ldd	r24, Z+1	; 0x01
    97dc:	0e 94 8a 69 	call	0xd314	; 0xd314 <disk_status>
    97e0:	80 fd       	sbrc	r24, 0
    97e2:	08 c0       	rjmp	.+16     	; 0x97f4 <mount_volume+0x64>
    97e4:	ff 20       	and	r15, r15
    97e6:	09 f4       	brne	.+2      	; 0x97ea <mount_volume+0x5a>
    97e8:	21 c2       	rjmp	.+1090   	; 0x9c2c <mount_volume+0x49c>
    97ea:	82 ff       	sbrs	r24, 2
    97ec:	1f c2       	rjmp	.+1086   	; 0x9c2c <mount_volume+0x49c>
    97ee:	8a e0       	ldi	r24, 0x0A	; 10
    97f0:	90 e0       	ldi	r25, 0x00	; 0
    97f2:	24 c2       	rjmp	.+1096   	; 0x9c3c <mount_volume+0x4ac>
    97f4:	d8 01       	movw	r26, r16
    97f6:	1c 92       	st	X, r1
    97f8:	f8 01       	movw	r30, r16
    97fa:	c1 82       	std	Z+1, r12	; 0x01
    97fc:	8c 2d       	mov	r24, r12
    97fe:	0e 94 90 69 	call	0xd320	; 0xd320 <disk_initialize>
    9802:	80 fd       	sbrc	r24, 0
    9804:	16 c2       	rjmp	.+1068   	; 0x9c32 <mount_volume+0x4a2>
    9806:	ff 20       	and	r15, r15
    9808:	11 f0       	breq	.+4      	; 0x980e <mount_volume+0x7e>
    980a:	82 fd       	sbrc	r24, 2
    980c:	f0 cf       	rjmp	.-32     	; 0x97ee <mount_volume+0x5e>
    980e:	40 e0       	ldi	r20, 0x00	; 0
    9810:	50 e0       	ldi	r21, 0x00	; 0
    9812:	ba 01       	movw	r22, r20
    9814:	c8 01       	movw	r24, r16
    9816:	7c df       	rcall	.-264    	; 0x9710 <check_fs>
    9818:	82 30       	cpi	r24, 0x02	; 2
    981a:	91 05       	cpc	r25, r1
    981c:	b9 f5       	brne	.+110    	; 0x988c <mount_volume+0xfc>
    981e:	68 01       	movw	r12, r16
    9820:	f5 e0       	ldi	r31, 0x05	; 5
    9822:	cf 1a       	sub	r12, r31
    9824:	fe ef       	ldi	r31, 0xFE	; 254
    9826:	df 0a       	sbc	r13, r31
    9828:	9e 01       	movw	r18, r28
    982a:	2f 5f       	subi	r18, 0xFF	; 255
    982c:	3f 4f       	sbci	r19, 0xFF	; 255
    982e:	79 01       	movw	r14, r18
    9830:	48 01       	movw	r8, r16
    9832:	35 ec       	ldi	r19, 0xC5	; 197
    9834:	83 1a       	sub	r8, r19
    9836:	3d ef       	ldi	r19, 0xFD	; 253
    9838:	93 0a       	sbc	r9, r19
    983a:	57 01       	movw	r10, r14
    983c:	c6 01       	movw	r24, r12
    983e:	52 da       	rcall	.-2908   	; 0x8ce4 <ld_dword>
    9840:	d5 01       	movw	r26, r10
    9842:	6d 93       	st	X+, r22
    9844:	7d 93       	st	X+, r23
    9846:	8d 93       	st	X+, r24
    9848:	9d 93       	st	X+, r25
    984a:	5d 01       	movw	r10, r26
    984c:	b0 e1       	ldi	r27, 0x10	; 16
    984e:	cb 0e       	add	r12, r27
    9850:	d1 1c       	adc	r13, r1
    9852:	c8 14       	cp	r12, r8
    9854:	d9 04       	cpc	r13, r9
    9856:	91 f7       	brne	.-28     	; 0x983c <mount_volume+0xac>
    9858:	6e 01       	movw	r12, r28
    985a:	e1 e1       	ldi	r30, 0x11	; 17
    985c:	ce 0e       	add	r12, r30
    985e:	d1 1c       	adc	r13, r1
    9860:	d7 01       	movw	r26, r14
    9862:	4d 91       	ld	r20, X+
    9864:	5d 91       	ld	r21, X+
    9866:	6d 91       	ld	r22, X+
    9868:	7d 91       	ld	r23, X+
    986a:	7d 01       	movw	r14, r26
    986c:	41 15       	cp	r20, r1
    986e:	51 05       	cpc	r21, r1
    9870:	61 05       	cpc	r22, r1
    9872:	71 05       	cpc	r23, r1
    9874:	31 f0       	breq	.+12     	; 0x9882 <mount_volume+0xf2>
    9876:	c8 01       	movw	r24, r16
    9878:	4b df       	rcall	.-362    	; 0x9710 <check_fs>
    987a:	82 30       	cpi	r24, 0x02	; 2
    987c:	91 05       	cpc	r25, r1
    987e:	18 f4       	brcc	.+6      	; 0x9886 <mount_volume+0xf6>
    9880:	05 c0       	rjmp	.+10     	; 0x988c <mount_volume+0xfc>
    9882:	83 e0       	ldi	r24, 0x03	; 3
    9884:	90 e0       	ldi	r25, 0x00	; 0
    9886:	ce 14       	cp	r12, r14
    9888:	df 04       	cpc	r13, r15
    988a:	51 f7       	brne	.-44     	; 0x9860 <mount_volume+0xd0>
    988c:	84 30       	cpi	r24, 0x04	; 4
    988e:	91 05       	cpc	r25, r1
    9890:	09 f4       	brne	.+2      	; 0x9894 <mount_volume+0x104>
    9892:	d2 c1       	rjmp	.+932    	; 0x9c38 <mount_volume+0x4a8>
    9894:	02 97       	sbiw	r24, 0x02	; 2
    9896:	18 f0       	brcs	.+6      	; 0x989e <mount_volume+0x10e>
    9898:	8d e0       	ldi	r24, 0x0D	; 13
    989a:	90 e0       	ldi	r25, 0x00	; 0
    989c:	cf c1       	rjmp	.+926    	; 0x9c3c <mount_volume+0x4ac>
    989e:	f8 01       	movw	r30, r16
    98a0:	e0 5c       	subi	r30, 0xC0	; 192
    98a2:	ff 4f       	sbci	r31, 0xFF	; 255
    98a4:	80 81       	ld	r24, Z
    98a6:	91 81       	ldd	r25, Z+1	; 0x01
    98a8:	81 15       	cp	r24, r1
    98aa:	92 40       	sbci	r25, 0x02	; 2
    98ac:	a9 f7       	brne	.-22     	; 0x9898 <mount_volume+0x108>
    98ae:	3b 96       	adiw	r30, 0x0b	; 11
    98b0:	40 80       	ld	r4, Z
    98b2:	51 80       	ldd	r5, Z+1	; 0x01
    98b4:	41 14       	cp	r4, r1
    98b6:	51 04       	cpc	r5, r1
    98b8:	19 f0       	breq	.+6      	; 0x98c0 <mount_volume+0x130>
    98ba:	61 2c       	mov	r6, r1
    98bc:	71 2c       	mov	r7, r1
    98be:	06 c0       	rjmp	.+12     	; 0x98cc <mount_volume+0x13c>
    98c0:	c8 01       	movw	r24, r16
    98c2:	87 5a       	subi	r24, 0xA7	; 167
    98c4:	9f 4f       	sbci	r25, 0xFF	; 255
    98c6:	0e da       	rcall	.-3044   	; 0x8ce4 <ld_dword>
    98c8:	2b 01       	movw	r4, r22
    98ca:	3c 01       	movw	r6, r24
    98cc:	f8 01       	movw	r30, r16
    98ce:	21 a9       	ldd	r18, Z+49	; 0x31
    98d0:	32 a9       	ldd	r19, Z+50	; 0x32
    98d2:	43 a9       	ldd	r20, Z+51	; 0x33
    98d4:	54 a9       	ldd	r21, Z+52	; 0x34
    98d6:	29 8b       	std	Y+17, r18	; 0x11
    98d8:	3a 8b       	std	Y+18, r19	; 0x12
    98da:	4b 8b       	std	Y+19, r20	; 0x13
    98dc:	5c 8b       	std	Y+20, r21	; 0x14
    98de:	45 8e       	std	Z+29, r4	; 0x1d
    98e0:	56 8e       	std	Z+30, r5	; 0x1e
    98e2:	67 8e       	std	Z+31, r6	; 0x1f
    98e4:	70 a2       	std	Z+32, r7	; 0x20
    98e6:	eb 5b       	subi	r30, 0xBB	; 187
    98e8:	ff 4f       	sbci	r31, 0xFF	; 255
    98ea:	a0 80       	ld	r10, Z
    98ec:	f8 01       	movw	r30, r16
    98ee:	a2 82       	std	Z+2, r10	; 0x02
    98f0:	8f ef       	ldi	r24, 0xFF	; 255
    98f2:	8a 0d       	add	r24, r10
    98f4:	82 30       	cpi	r24, 0x02	; 2
    98f6:	80 f6       	brcc	.-96     	; 0x9898 <mount_volume+0x108>
    98f8:	ee 5b       	subi	r30, 0xBE	; 190
    98fa:	ff 4f       	sbci	r31, 0xFF	; 255
    98fc:	b0 80       	ld	r11, Z
    98fe:	8b 2d       	mov	r24, r11
    9900:	90 e0       	ldi	r25, 0x00	; 0
    9902:	f8 01       	movw	r30, r16
    9904:	92 87       	std	Z+10, r25	; 0x0a
    9906:	81 87       	std	Z+9, r24	; 0x09
    9908:	00 97       	sbiw	r24, 0x00	; 0
    990a:	31 f2       	breq	.-116    	; 0x9898 <mount_volume+0x108>
    990c:	9c 01       	movw	r18, r24
    990e:	21 50       	subi	r18, 0x01	; 1
    9910:	31 09       	sbc	r19, r1
    9912:	82 23       	and	r24, r18
    9914:	93 23       	and	r25, r19
    9916:	89 2b       	or	r24, r25
    9918:	09 f0       	breq	.+2      	; 0x991c <mount_volume+0x18c>
    991a:	be cf       	rjmp	.-132    	; 0x9898 <mount_volume+0x108>
    991c:	ea 5b       	subi	r30, 0xBA	; 186
    991e:	ff 4f       	sbci	r31, 0xFF	; 255
    9920:	80 80       	ld	r8, Z
    9922:	91 80       	ldd	r9, Z+1	; 0x01
    9924:	f8 01       	movw	r30, r16
    9926:	90 86       	std	Z+8, r9	; 0x08
    9928:	87 82       	std	Z+7, r8	; 0x07
    992a:	c4 01       	movw	r24, r8
    992c:	8f 70       	andi	r24, 0x0F	; 15
    992e:	99 27       	eor	r25, r25
    9930:	89 2b       	or	r24, r25
    9932:	09 f0       	breq	.+2      	; 0x9936 <mount_volume+0x1a6>
    9934:	b1 cf       	rjmp	.-158    	; 0x9898 <mount_volume+0x108>
    9936:	e8 5b       	subi	r30, 0xB8	; 184
    9938:	ff 4f       	sbci	r31, 0xFF	; 255
    993a:	80 81       	ld	r24, Z
    993c:	91 81       	ldd	r25, Z+1	; 0x01
    993e:	6c 01       	movw	r12, r24
    9940:	e1 2c       	mov	r14, r1
    9942:	f1 2c       	mov	r15, r1
    9944:	89 2b       	or	r24, r25
    9946:	31 f4       	brne	.+12     	; 0x9954 <mount_volume+0x1c4>
    9948:	c8 01       	movw	r24, r16
    994a:	8b 5a       	subi	r24, 0xAB	; 171
    994c:	9f 4f       	sbci	r25, 0xFF	; 255
    994e:	ca d9       	rcall	.-3180   	; 0x8ce4 <ld_dword>
    9950:	6b 01       	movw	r12, r22
    9952:	7c 01       	movw	r14, r24
    9954:	f8 01       	movw	r30, r16
    9956:	ed 5b       	subi	r30, 0xBD	; 189
    9958:	ff 4f       	sbci	r31, 0xFF	; 255
    995a:	01 90       	ld	r0, Z+
    995c:	f0 81       	ld	r31, Z
    995e:	e0 2d       	mov	r30, r0
    9960:	30 97       	sbiw	r30, 0x00	; 0
    9962:	09 f4       	brne	.+2      	; 0x9966 <mount_volume+0x1d6>
    9964:	99 cf       	rjmp	.-206    	; 0x9898 <mount_volume+0x108>
    9966:	aa 2d       	mov	r26, r10
    9968:	b0 e0       	ldi	r27, 0x00	; 0
    996a:	a3 01       	movw	r20, r6
    996c:	92 01       	movw	r18, r4
    996e:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    9972:	69 8f       	std	Y+25, r22	; 0x19
    9974:	7a 8f       	std	Y+26, r23	; 0x1a
    9976:	8b 8f       	std	Y+27, r24	; 0x1b
    9978:	9c 8f       	std	Y+28, r25	; 0x1c
    997a:	9f 01       	movw	r18, r30
    997c:	40 e0       	ldi	r20, 0x00	; 0
    997e:	50 e0       	ldi	r21, 0x00	; 0
    9980:	2d 8f       	std	Y+29, r18	; 0x1d
    9982:	3e 8f       	std	Y+30, r19	; 0x1e
    9984:	4f 8f       	std	Y+31, r20	; 0x1f
    9986:	58 a3       	std	Y+32, r21	; 0x20
    9988:	c4 01       	movw	r24, r8
    998a:	f4 e0       	ldi	r31, 0x04	; 4
    998c:	96 95       	lsr	r25
    998e:	87 95       	ror	r24
    9990:	fa 95       	dec	r31
    9992:	e1 f7       	brne	.-8      	; 0x998c <mount_volume+0x1fc>
    9994:	28 0f       	add	r18, r24
    9996:	39 1f       	adc	r19, r25
    9998:	41 1d       	adc	r20, r1
    999a:	51 1d       	adc	r21, r1
    999c:	da 01       	movw	r26, r20
    999e:	c9 01       	movw	r24, r18
    99a0:	29 8d       	ldd	r18, Y+25	; 0x19
    99a2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    99a4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    99a6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    99a8:	28 0f       	add	r18, r24
    99aa:	39 1f       	adc	r19, r25
    99ac:	4a 1f       	adc	r20, r26
    99ae:	5b 1f       	adc	r21, r27
    99b0:	2d 8b       	std	Y+21, r18	; 0x15
    99b2:	3e 8b       	std	Y+22, r19	; 0x16
    99b4:	4f 8b       	std	Y+23, r20	; 0x17
    99b6:	58 8f       	std	Y+24, r21	; 0x18
    99b8:	c2 16       	cp	r12, r18
    99ba:	d3 06       	cpc	r13, r19
    99bc:	e4 06       	cpc	r14, r20
    99be:	f5 06       	cpc	r15, r21
    99c0:	08 f4       	brcc	.+2      	; 0x99c4 <mount_volume+0x234>
    99c2:	6a cf       	rjmp	.-300    	; 0x9898 <mount_volume+0x108>
    99c4:	c7 01       	movw	r24, r14
    99c6:	b6 01       	movw	r22, r12
    99c8:	62 1b       	sub	r22, r18
    99ca:	73 0b       	sbc	r23, r19
    99cc:	84 0b       	sbc	r24, r20
    99ce:	95 0b       	sbc	r25, r21
    99d0:	2b 2d       	mov	r18, r11
    99d2:	30 e0       	ldi	r19, 0x00	; 0
    99d4:	40 e0       	ldi	r20, 0x00	; 0
    99d6:	50 e0       	ldi	r21, 0x00	; 0
    99d8:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    99dc:	da 01       	movw	r26, r20
    99de:	c9 01       	movw	r24, r18
    99e0:	01 97       	sbiw	r24, 0x01	; 1
    99e2:	a1 09       	sbc	r26, r1
    99e4:	b1 09       	sbc	r27, r1
    99e6:	85 3f       	cpi	r24, 0xF5	; 245
    99e8:	9f 4f       	sbci	r25, 0xFF	; 255
    99ea:	af 4f       	sbci	r26, 0xFF	; 255
    99ec:	bf 40       	sbci	r27, 0x0F	; 15
    99ee:	08 f0       	brcs	.+2      	; 0x99f2 <mount_volume+0x262>
    99f0:	53 cf       	rjmp	.-346    	; 0x9898 <mount_volume+0x108>
    99f2:	26 3f       	cpi	r18, 0xF6	; 246
    99f4:	8f ef       	ldi	r24, 0xFF	; 255
    99f6:	38 07       	cpc	r19, r24
    99f8:	41 05       	cpc	r20, r1
    99fa:	51 05       	cpc	r21, r1
    99fc:	50 f4       	brcc	.+20     	; 0x9a12 <mount_volume+0x282>
    99fe:	26 3f       	cpi	r18, 0xF6	; 246
    9a00:	9f e0       	ldi	r25, 0x0F	; 15
    9a02:	39 07       	cpc	r19, r25
    9a04:	41 05       	cpc	r20, r1
    9a06:	51 05       	cpc	r21, r1
    9a08:	40 f4       	brcc	.+16     	; 0x9a1a <mount_volume+0x28a>
    9a0a:	aa 24       	eor	r10, r10
    9a0c:	a3 94       	inc	r10
    9a0e:	b1 2c       	mov	r11, r1
    9a10:	07 c0       	rjmp	.+14     	; 0x9a20 <mount_volume+0x290>
    9a12:	73 e0       	ldi	r23, 0x03	; 3
    9a14:	a7 2e       	mov	r10, r23
    9a16:	b1 2c       	mov	r11, r1
    9a18:	03 c0       	rjmp	.+6      	; 0x9a20 <mount_volume+0x290>
    9a1a:	62 e0       	ldi	r22, 0x02	; 2
    9a1c:	a6 2e       	mov	r10, r22
    9a1e:	b1 2c       	mov	r11, r1
    9a20:	69 01       	movw	r12, r18
    9a22:	7a 01       	movw	r14, r20
    9a24:	a2 e0       	ldi	r26, 0x02	; 2
    9a26:	ca 0e       	add	r12, r26
    9a28:	d1 1c       	adc	r13, r1
    9a2a:	e1 1c       	adc	r14, r1
    9a2c:	f1 1c       	adc	r15, r1
    9a2e:	f8 01       	movw	r30, r16
    9a30:	c1 8e       	std	Z+25, r12	; 0x19
    9a32:	d2 8e       	std	Z+26, r13	; 0x1a
    9a34:	e3 8e       	std	Z+27, r14	; 0x1b
    9a36:	f4 8e       	std	Z+28, r15	; 0x1c
    9a38:	29 89       	ldd	r18, Y+17	; 0x11
    9a3a:	3a 89       	ldd	r19, Y+18	; 0x12
    9a3c:	4b 89       	ldd	r20, Y+19	; 0x13
    9a3e:	5c 89       	ldd	r21, Y+20	; 0x14
    9a40:	21 a3       	std	Z+33, r18	; 0x21
    9a42:	32 a3       	std	Z+34, r19	; 0x22
    9a44:	43 a3       	std	Z+35, r20	; 0x23
    9a46:	54 a3       	std	Z+36, r21	; 0x24
    9a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9a4c:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a4e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a50:	28 0f       	add	r18, r24
    9a52:	39 1f       	adc	r19, r25
    9a54:	4a 1f       	adc	r20, r26
    9a56:	5b 1f       	adc	r21, r27
    9a58:	2d 8f       	std	Y+29, r18	; 0x1d
    9a5a:	3e 8f       	std	Y+30, r19	; 0x1e
    9a5c:	4f 8f       	std	Y+31, r20	; 0x1f
    9a5e:	58 a3       	std	Y+32, r21	; 0x20
    9a60:	25 a3       	std	Z+37, r18	; 0x25
    9a62:	36 a3       	std	Z+38, r19	; 0x26
    9a64:	47 a3       	std	Z+39, r20	; 0x27
    9a66:	50 a7       	std	Z+40, r21	; 0x28
    9a68:	49 89       	ldd	r20, Y+17	; 0x11
    9a6a:	5a 89       	ldd	r21, Y+18	; 0x12
    9a6c:	6b 89       	ldd	r22, Y+19	; 0x13
    9a6e:	7c 89       	ldd	r23, Y+20	; 0x14
    9a70:	8d 89       	ldd	r24, Y+21	; 0x15
    9a72:	9e 89       	ldd	r25, Y+22	; 0x16
    9a74:	af 89       	ldd	r26, Y+23	; 0x17
    9a76:	b8 8d       	ldd	r27, Y+24	; 0x18
    9a78:	48 0f       	add	r20, r24
    9a7a:	59 1f       	adc	r21, r25
    9a7c:	6a 1f       	adc	r22, r26
    9a7e:	7b 1f       	adc	r23, r27
    9a80:	45 a7       	std	Z+45, r20	; 0x2d
    9a82:	56 a7       	std	Z+46, r21	; 0x2e
    9a84:	67 a7       	std	Z+47, r22	; 0x2f
    9a86:	70 ab       	std	Z+48, r23	; 0x30
    9a88:	f3 e0       	ldi	r31, 0x03	; 3
    9a8a:	af 16       	cp	r10, r31
    9a8c:	b1 04       	cpc	r11, r1
    9a8e:	e9 f4       	brne	.+58     	; 0x9aca <mount_volume+0x33a>
    9a90:	f8 01       	movw	r30, r16
    9a92:	e1 5a       	subi	r30, 0xA1	; 161
    9a94:	ff 4f       	sbci	r31, 0xFF	; 255
    9a96:	80 81       	ld	r24, Z
    9a98:	91 81       	ldd	r25, Z+1	; 0x01
    9a9a:	89 2b       	or	r24, r25
    9a9c:	09 f0       	breq	.+2      	; 0x9aa0 <mount_volume+0x310>
    9a9e:	fc ce       	rjmp	.-520    	; 0x9898 <mount_volume+0x108>
    9aa0:	81 14       	cp	r8, r1
    9aa2:	91 04       	cpc	r9, r1
    9aa4:	09 f0       	breq	.+2      	; 0x9aa8 <mount_volume+0x318>
    9aa6:	f8 ce       	rjmp	.-528    	; 0x9898 <mount_volume+0x108>
    9aa8:	c8 01       	movw	r24, r16
    9aaa:	8f 59       	subi	r24, 0x9F	; 159
    9aac:	9f 4f       	sbci	r25, 0xFF	; 255
    9aae:	1a d9       	rcall	.-3532   	; 0x8ce4 <ld_dword>
    9ab0:	f8 01       	movw	r30, r16
    9ab2:	61 a7       	std	Z+41, r22	; 0x29
    9ab4:	72 a7       	std	Z+42, r23	; 0x2a
    9ab6:	83 a7       	std	Z+43, r24	; 0x2b
    9ab8:	94 a7       	std	Z+44, r25	; 0x2c
    9aba:	42 e0       	ldi	r20, 0x02	; 2
    9abc:	cc 0c       	add	r12, r12
    9abe:	dd 1c       	adc	r13, r13
    9ac0:	ee 1c       	adc	r14, r14
    9ac2:	ff 1c       	adc	r15, r15
    9ac4:	4a 95       	dec	r20
    9ac6:	d1 f7       	brne	.-12     	; 0x9abc <mount_volume+0x32c>
    9ac8:	33 c0       	rjmp	.+102    	; 0x9b30 <mount_volume+0x3a0>
    9aca:	81 14       	cp	r8, r1
    9acc:	91 04       	cpc	r9, r1
    9ace:	09 f4       	brne	.+2      	; 0x9ad2 <mount_volume+0x342>
    9ad0:	e3 ce       	rjmp	.-570    	; 0x9898 <mount_volume+0x108>
    9ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ad4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9ad6:	af 8d       	ldd	r26, Y+31	; 0x1f
    9ad8:	b8 a1       	ldd	r27, Y+32	; 0x20
    9ada:	29 8d       	ldd	r18, Y+25	; 0x19
    9adc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9ade:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9ae0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9ae2:	82 0f       	add	r24, r18
    9ae4:	93 1f       	adc	r25, r19
    9ae6:	a4 1f       	adc	r26, r20
    9ae8:	b5 1f       	adc	r27, r21
    9aea:	f8 01       	movw	r30, r16
    9aec:	81 a7       	std	Z+41, r24	; 0x29
    9aee:	92 a7       	std	Z+42, r25	; 0x2a
    9af0:	a3 a7       	std	Z+43, r26	; 0x2b
    9af2:	b4 a7       	std	Z+44, r27	; 0x2c
    9af4:	f2 e0       	ldi	r31, 0x02	; 2
    9af6:	af 16       	cp	r10, r31
    9af8:	b1 04       	cpc	r11, r1
    9afa:	29 f4       	brne	.+10     	; 0x9b06 <mount_volume+0x376>
    9afc:	cc 0c       	add	r12, r12
    9afe:	dd 1c       	adc	r13, r13
    9b00:	ee 1c       	adc	r14, r14
    9b02:	ff 1c       	adc	r15, r15
    9b04:	15 c0       	rjmp	.+42     	; 0x9b30 <mount_volume+0x3a0>
    9b06:	a3 e0       	ldi	r26, 0x03	; 3
    9b08:	b0 e0       	ldi	r27, 0x00	; 0
    9b0a:	a7 01       	movw	r20, r14
    9b0c:	96 01       	movw	r18, r12
    9b0e:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    9b12:	dc 01       	movw	r26, r24
    9b14:	cb 01       	movw	r24, r22
    9b16:	b6 95       	lsr	r27
    9b18:	a7 95       	ror	r26
    9b1a:	97 95       	ror	r25
    9b1c:	87 95       	ror	r24
    9b1e:	21 e0       	ldi	r18, 0x01	; 1
    9b20:	c2 22       	and	r12, r18
    9b22:	dd 24       	eor	r13, r13
    9b24:	ee 24       	eor	r14, r14
    9b26:	ff 24       	eor	r15, r15
    9b28:	c8 0e       	add	r12, r24
    9b2a:	d9 1e       	adc	r13, r25
    9b2c:	ea 1e       	adc	r14, r26
    9b2e:	fb 1e       	adc	r15, r27
    9b30:	3f ef       	ldi	r19, 0xFF	; 255
    9b32:	c3 0e       	add	r12, r19
    9b34:	31 e0       	ldi	r19, 0x01	; 1
    9b36:	d3 1e       	adc	r13, r19
    9b38:	e1 1c       	adc	r14, r1
    9b3a:	f1 1c       	adc	r15, r1
    9b3c:	89 e0       	ldi	r24, 0x09	; 9
    9b3e:	f6 94       	lsr	r15
    9b40:	e7 94       	ror	r14
    9b42:	d7 94       	ror	r13
    9b44:	c7 94       	ror	r12
    9b46:	8a 95       	dec	r24
    9b48:	d1 f7       	brne	.-12     	; 0x9b3e <mount_volume+0x3ae>
    9b4a:	4c 14       	cp	r4, r12
    9b4c:	5d 04       	cpc	r5, r13
    9b4e:	6e 04       	cpc	r6, r14
    9b50:	7f 04       	cpc	r7, r15
    9b52:	08 f4       	brcc	.+2      	; 0x9b56 <mount_volume+0x3c6>
    9b54:	a1 ce       	rjmp	.-702    	; 0x9898 <mount_volume+0x108>
    9b56:	8f ef       	ldi	r24, 0xFF	; 255
    9b58:	9f ef       	ldi	r25, 0xFF	; 255
    9b5a:	dc 01       	movw	r26, r24
    9b5c:	f8 01       	movw	r30, r16
    9b5e:	81 8b       	std	Z+17, r24	; 0x11
    9b60:	92 8b       	std	Z+18, r25	; 0x12
    9b62:	a3 8b       	std	Z+19, r26	; 0x13
    9b64:	b4 8b       	std	Z+20, r27	; 0x14
    9b66:	85 87       	std	Z+13, r24	; 0x0d
    9b68:	96 87       	std	Z+14, r25	; 0x0e
    9b6a:	a7 87       	std	Z+15, r26	; 0x0f
    9b6c:	b0 8b       	std	Z+16, r27	; 0x10
    9b6e:	80 e8       	ldi	r24, 0x80	; 128
    9b70:	84 83       	std	Z+4, r24	; 0x04
    9b72:	f3 e0       	ldi	r31, 0x03	; 3
    9b74:	af 16       	cp	r10, r31
    9b76:	b1 04       	cpc	r11, r1
    9b78:	09 f0       	breq	.+2      	; 0x9b7c <mount_volume+0x3ec>
    9b7a:	3f c0       	rjmp	.+126    	; 0x9bfa <mount_volume+0x46a>
    9b7c:	f8 01       	movw	r30, r16
    9b7e:	eb 59       	subi	r30, 0x9B	; 155
    9b80:	ff 4f       	sbci	r31, 0xFF	; 255
    9b82:	80 81       	ld	r24, Z
    9b84:	91 81       	ldd	r25, Z+1	; 0x01
    9b86:	01 97       	sbiw	r24, 0x01	; 1
    9b88:	c1 f5       	brne	.+112    	; 0x9bfa <mount_volume+0x46a>
    9b8a:	49 89       	ldd	r20, Y+17	; 0x11
    9b8c:	5a 89       	ldd	r21, Y+18	; 0x12
    9b8e:	6b 89       	ldd	r22, Y+19	; 0x13
    9b90:	7c 89       	ldd	r23, Y+20	; 0x14
    9b92:	4f 5f       	subi	r20, 0xFF	; 255
    9b94:	5f 4f       	sbci	r21, 0xFF	; 255
    9b96:	6f 4f       	sbci	r22, 0xFF	; 255
    9b98:	7f 4f       	sbci	r23, 0xFF	; 255
    9b9a:	c8 01       	movw	r24, r16
    9b9c:	7e dd       	rcall	.-1284   	; 0x969a <move_window>
    9b9e:	89 2b       	or	r24, r25
    9ba0:	61 f5       	brne	.+88     	; 0x9bfa <mount_volume+0x46a>
    9ba2:	f8 01       	movw	r30, r16
    9ba4:	14 82       	std	Z+4, r1	; 0x04
    9ba6:	ed 5c       	subi	r30, 0xCD	; 205
    9ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    9baa:	80 81       	ld	r24, Z
    9bac:	91 81       	ldd	r25, Z+1	; 0x01
    9bae:	85 35       	cpi	r24, 0x55	; 85
    9bb0:	9a 4a       	sbci	r25, 0xAA	; 170
    9bb2:	19 f5       	brne	.+70     	; 0x9bfa <mount_volume+0x46a>
    9bb4:	c8 01       	movw	r24, r16
    9bb6:	c5 96       	adiw	r24, 0x35	; 53
    9bb8:	95 d8       	rcall	.-3798   	; 0x8ce4 <ld_dword>
    9bba:	62 35       	cpi	r22, 0x52	; 82
    9bbc:	72 45       	sbci	r23, 0x52	; 82
    9bbe:	81 46       	sbci	r24, 0x61	; 97
    9bc0:	91 44       	sbci	r25, 0x41	; 65
    9bc2:	d9 f4       	brne	.+54     	; 0x9bfa <mount_volume+0x46a>
    9bc4:	c8 01       	movw	r24, r16
    9bc6:	87 5e       	subi	r24, 0xE7	; 231
    9bc8:	9d 4f       	sbci	r25, 0xFD	; 253
    9bca:	8c d8       	rcall	.-3816   	; 0x8ce4 <ld_dword>
    9bcc:	62 37       	cpi	r22, 0x72	; 114
    9bce:	72 47       	sbci	r23, 0x72	; 114
    9bd0:	81 44       	sbci	r24, 0x41	; 65
    9bd2:	91 46       	sbci	r25, 0x61	; 97
    9bd4:	91 f4       	brne	.+36     	; 0x9bfa <mount_volume+0x46a>
    9bd6:	c8 01       	movw	r24, r16
    9bd8:	83 5e       	subi	r24, 0xE3	; 227
    9bda:	9d 4f       	sbci	r25, 0xFD	; 253
    9bdc:	83 d8       	rcall	.-3834   	; 0x8ce4 <ld_dword>
    9bde:	f8 01       	movw	r30, r16
    9be0:	61 8b       	std	Z+17, r22	; 0x11
    9be2:	72 8b       	std	Z+18, r23	; 0x12
    9be4:	83 8b       	std	Z+19, r24	; 0x13
    9be6:	94 8b       	std	Z+20, r25	; 0x14
    9be8:	c8 01       	movw	r24, r16
    9bea:	8f 5d       	subi	r24, 0xDF	; 223
    9bec:	9d 4f       	sbci	r25, 0xFD	; 253
    9bee:	7a d8       	rcall	.-3852   	; 0x8ce4 <ld_dword>
    9bf0:	f8 01       	movw	r30, r16
    9bf2:	65 87       	std	Z+13, r22	; 0x0d
    9bf4:	76 87       	std	Z+14, r23	; 0x0e
    9bf6:	87 87       	std	Z+15, r24	; 0x0f
    9bf8:	90 8b       	std	Z+16, r25	; 0x10
    9bfa:	d8 01       	movw	r26, r16
    9bfc:	ac 92       	st	X, r10
    9bfe:	80 91 08 18 	lds	r24, 0x1808	; 0x801808 <Fsid>
    9c02:	90 91 09 18 	lds	r25, 0x1809	; 0x801809 <Fsid+0x1>
    9c06:	01 96       	adiw	r24, 0x01	; 1
    9c08:	90 93 09 18 	sts	0x1809, r25	; 0x801809 <Fsid+0x1>
    9c0c:	80 93 08 18 	sts	0x1808, r24	; 0x801808 <Fsid>
    9c10:	f8 01       	movw	r30, r16
    9c12:	96 83       	std	Z+6, r25	; 0x06
    9c14:	85 83       	std	Z+5, r24	; 0x05
    9c16:	15 8a       	std	Z+21, r1	; 0x15
    9c18:	16 8a       	std	Z+22, r1	; 0x16
    9c1a:	17 8a       	std	Z+23, r1	; 0x17
    9c1c:	10 8e       	std	Z+24, r1	; 0x18
    9c1e:	06 c0       	rjmp	.+12     	; 0x9c2c <mount_volume+0x49c>
    9c20:	8b e0       	ldi	r24, 0x0B	; 11
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	0b c0       	rjmp	.+22     	; 0x9c3c <mount_volume+0x4ac>
    9c26:	8c e0       	ldi	r24, 0x0C	; 12
    9c28:	90 e0       	ldi	r25, 0x00	; 0
    9c2a:	08 c0       	rjmp	.+16     	; 0x9c3c <mount_volume+0x4ac>
    9c2c:	80 e0       	ldi	r24, 0x00	; 0
    9c2e:	90 e0       	ldi	r25, 0x00	; 0
    9c30:	05 c0       	rjmp	.+10     	; 0x9c3c <mount_volume+0x4ac>
    9c32:	83 e0       	ldi	r24, 0x03	; 3
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	02 c0       	rjmp	.+4      	; 0x9c3c <mount_volume+0x4ac>
    9c38:	81 e0       	ldi	r24, 0x01	; 1
    9c3a:	90 e0       	ldi	r25, 0x00	; 0
    9c3c:	a0 96       	adiw	r28, 0x20	; 32
    9c3e:	e0 e1       	ldi	r30, 0x10	; 16
    9c40:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

00009c44 <put_fat>:
    9c44:	a6 e0       	ldi	r26, 0x06	; 6
    9c46:	b0 e0       	ldi	r27, 0x00	; 0
    9c48:	e8 e2       	ldi	r30, 0x28	; 40
    9c4a:	fe e4       	ldi	r31, 0x4E	; 78
    9c4c:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    9c50:	42 30       	cpi	r20, 0x02	; 2
    9c52:	51 05       	cpc	r21, r1
    9c54:	61 05       	cpc	r22, r1
    9c56:	71 05       	cpc	r23, r1
    9c58:	08 f4       	brcc	.+2      	; 0x9c5c <put_fat+0x18>
    9c5a:	e7 c0       	rjmp	.+462    	; 0x9e2a <put_fat+0x1e6>
    9c5c:	fc 01       	movw	r30, r24
    9c5e:	c1 8c       	ldd	r12, Z+25	; 0x19
    9c60:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9c62:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9c64:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9c66:	4c 15       	cp	r20, r12
    9c68:	5d 05       	cpc	r21, r13
    9c6a:	6e 05       	cpc	r22, r14
    9c6c:	7f 05       	cpc	r23, r15
    9c6e:	08 f0       	brcs	.+2      	; 0x9c72 <put_fat+0x2e>
    9c70:	dc c0       	rjmp	.+440    	; 0x9e2a <put_fat+0x1e6>
    9c72:	28 01       	movw	r4, r16
    9c74:	39 01       	movw	r6, r18
    9c76:	6a 01       	movw	r12, r20
    9c78:	7b 01       	movw	r14, r22
    9c7a:	9e 83       	std	Y+6, r25	; 0x06
    9c7c:	8d 83       	std	Y+5, r24	; 0x05
    9c7e:	80 81       	ld	r24, Z
    9c80:	82 30       	cpi	r24, 0x02	; 2
    9c82:	09 f4       	brne	.+2      	; 0x9c86 <put_fat+0x42>
    9c84:	73 c0       	rjmp	.+230    	; 0x9d6c <put_fat+0x128>
    9c86:	83 30       	cpi	r24, 0x03	; 3
    9c88:	09 f4       	brne	.+2      	; 0x9c8c <put_fat+0x48>
    9c8a:	92 c0       	rjmp	.+292    	; 0x9db0 <put_fat+0x16c>
    9c8c:	81 30       	cpi	r24, 0x01	; 1
    9c8e:	09 f0       	breq	.+2      	; 0x9c92 <put_fat+0x4e>
    9c90:	cc c0       	rjmp	.+408    	; 0x9e2a <put_fat+0x1e6>
    9c92:	4a 01       	movw	r8, r20
    9c94:	96 94       	lsr	r9
    9c96:	87 94       	ror	r8
    9c98:	84 0e       	add	r8, r20
    9c9a:	95 1e       	adc	r9, r21
    9c9c:	c4 01       	movw	r24, r8
    9c9e:	89 2f       	mov	r24, r25
    9ca0:	99 27       	eor	r25, r25
    9ca2:	86 95       	lsr	r24
    9ca4:	45 a1       	ldd	r20, Z+37	; 0x25
    9ca6:	56 a1       	ldd	r21, Z+38	; 0x26
    9ca8:	67 a1       	ldd	r22, Z+39	; 0x27
    9caa:	70 a5       	ldd	r23, Z+40	; 0x28
    9cac:	48 0f       	add	r20, r24
    9cae:	59 1f       	adc	r21, r25
    9cb0:	61 1d       	adc	r22, r1
    9cb2:	71 1d       	adc	r23, r1
    9cb4:	cf 01       	movw	r24, r30
    9cb6:	f1 dc       	rcall	.-1566   	; 0x969a <move_window>
    9cb8:	5c 01       	movw	r10, r24
    9cba:	89 2b       	or	r24, r25
    9cbc:	09 f0       	breq	.+2      	; 0x9cc0 <put_fat+0x7c>
    9cbe:	b8 c0       	rjmp	.+368    	; 0x9e30 <put_fat+0x1ec>
    9cc0:	2d 80       	ldd	r2, Y+5	; 0x05
    9cc2:	3e 80       	ldd	r3, Y+6	; 0x06
    9cc4:	f5 e3       	ldi	r31, 0x35	; 53
    9cc6:	2f 0e       	add	r2, r31
    9cc8:	31 1c       	adc	r3, r1
    9cca:	84 01       	movw	r16, r8
    9ccc:	0f 5f       	subi	r16, 0xFF	; 255
    9cce:	1f 4f       	sbci	r17, 0xFF	; 255
    9cd0:	21 e0       	ldi	r18, 0x01	; 1
    9cd2:	92 22       	and	r9, r18
    9cd4:	f1 01       	movw	r30, r2
    9cd6:	e8 0d       	add	r30, r8
    9cd8:	f9 1d       	adc	r31, r9
    9cda:	d7 01       	movw	r26, r14
    9cdc:	c6 01       	movw	r24, r12
    9cde:	81 70       	andi	r24, 0x01	; 1
    9ce0:	99 27       	eor	r25, r25
    9ce2:	aa 27       	eor	r26, r26
    9ce4:	bb 27       	eor	r27, r27
    9ce6:	89 83       	std	Y+1, r24	; 0x01
    9ce8:	9a 83       	std	Y+2, r25	; 0x02
    9cea:	ab 83       	std	Y+3, r26	; 0x03
    9cec:	bc 83       	std	Y+4, r27	; 0x04
    9cee:	c0 fe       	sbrs	r12, 0
    9cf0:	09 c0       	rjmp	.+18     	; 0x9d04 <put_fat+0xc0>
    9cf2:	80 81       	ld	r24, Z
    9cf4:	28 2f       	mov	r18, r24
    9cf6:	2f 70       	andi	r18, 0x0F	; 15
    9cf8:	a0 e1       	ldi	r26, 0x10	; 16
    9cfa:	4a 9e       	mul	r4, r26
    9cfc:	c0 01       	movw	r24, r0
    9cfe:	11 24       	eor	r1, r1
    9d00:	82 2b       	or	r24, r18
    9d02:	01 c0       	rjmp	.+2      	; 0x9d06 <put_fat+0xc2>
    9d04:	84 2d       	mov	r24, r4
    9d06:	80 83       	st	Z, r24
    9d08:	81 e0       	ldi	r24, 0x01	; 1
    9d0a:	ed 81       	ldd	r30, Y+5	; 0x05
    9d0c:	fe 81       	ldd	r31, Y+6	; 0x06
    9d0e:	83 83       	std	Z+3, r24	; 0x03
    9d10:	45 a1       	ldd	r20, Z+37	; 0x25
    9d12:	56 a1       	ldd	r21, Z+38	; 0x26
    9d14:	67 a1       	ldd	r22, Z+39	; 0x27
    9d16:	70 a5       	ldd	r23, Z+40	; 0x28
    9d18:	c8 01       	movw	r24, r16
    9d1a:	89 2f       	mov	r24, r25
    9d1c:	99 27       	eor	r25, r25
    9d1e:	86 95       	lsr	r24
    9d20:	48 0f       	add	r20, r24
    9d22:	59 1f       	adc	r21, r25
    9d24:	61 1d       	adc	r22, r1
    9d26:	71 1d       	adc	r23, r1
    9d28:	cf 01       	movw	r24, r30
    9d2a:	b7 dc       	rcall	.-1682   	; 0x969a <move_window>
    9d2c:	5c 01       	movw	r10, r24
    9d2e:	89 2b       	or	r24, r25
    9d30:	09 f0       	breq	.+2      	; 0x9d34 <put_fat+0xf0>
    9d32:	7e c0       	rjmp	.+252    	; 0x9e30 <put_fat+0x1ec>
    9d34:	11 70       	andi	r17, 0x01	; 1
    9d36:	f1 01       	movw	r30, r2
    9d38:	e0 0f       	add	r30, r16
    9d3a:	f1 1f       	adc	r31, r17
    9d3c:	89 81       	ldd	r24, Y+1	; 0x01
    9d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    9d40:	ab 81       	ldd	r26, Y+3	; 0x03
    9d42:	bc 81       	ldd	r27, Y+4	; 0x04
    9d44:	89 2b       	or	r24, r25
    9d46:	8a 2b       	or	r24, r26
    9d48:	8b 2b       	or	r24, r27
    9d4a:	41 f0       	breq	.+16     	; 0x9d5c <put_fat+0x118>
    9d4c:	54 e0       	ldi	r21, 0x04	; 4
    9d4e:	76 94       	lsr	r7
    9d50:	67 94       	ror	r6
    9d52:	57 94       	ror	r5
    9d54:	47 94       	ror	r4
    9d56:	5a 95       	dec	r21
    9d58:	d1 f7       	brne	.-12     	; 0x9d4e <put_fat+0x10a>
    9d5a:	06 c0       	rjmp	.+12     	; 0x9d68 <put_fat+0x124>
    9d5c:	00 81       	ld	r16, Z
    9d5e:	00 7f       	andi	r16, 0xF0	; 240
    9d60:	85 2d       	mov	r24, r5
    9d62:	8f 70       	andi	r24, 0x0F	; 15
    9d64:	40 2e       	mov	r4, r16
    9d66:	48 2a       	or	r4, r24
    9d68:	40 82       	st	Z, r4
    9d6a:	5a c0       	rjmp	.+180    	; 0x9e20 <put_fat+0x1dc>
    9d6c:	77 27       	eor	r23, r23
    9d6e:	6f 2d       	mov	r22, r15
    9d70:	5e 2d       	mov	r21, r14
    9d72:	4d 2d       	mov	r20, r13
    9d74:	ed 81       	ldd	r30, Y+5	; 0x05
    9d76:	fe 81       	ldd	r31, Y+6	; 0x06
    9d78:	85 a1       	ldd	r24, Z+37	; 0x25
    9d7a:	96 a1       	ldd	r25, Z+38	; 0x26
    9d7c:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d7e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d80:	48 0f       	add	r20, r24
    9d82:	59 1f       	adc	r21, r25
    9d84:	6a 1f       	adc	r22, r26
    9d86:	7b 1f       	adc	r23, r27
    9d88:	cf 01       	movw	r24, r30
    9d8a:	87 dc       	rcall	.-1778   	; 0x969a <move_window>
    9d8c:	5c 01       	movw	r10, r24
    9d8e:	89 2b       	or	r24, r25
    9d90:	09 f0       	breq	.+2      	; 0x9d94 <put_fat+0x150>
    9d92:	4e c0       	rjmp	.+156    	; 0x9e30 <put_fat+0x1ec>
    9d94:	ed 81       	ldd	r30, Y+5	; 0x05
    9d96:	fe 81       	ldd	r31, Y+6	; 0x06
    9d98:	f5 96       	adiw	r30, 0x35	; 53
    9d9a:	cc 0c       	add	r12, r12
    9d9c:	dd 1c       	adc	r13, r13
    9d9e:	e8 94       	clt
    9da0:	c0 f8       	bld	r12, 0
    9da2:	21 e0       	ldi	r18, 0x01	; 1
    9da4:	d2 22       	and	r13, r18
    9da6:	ec 0d       	add	r30, r12
    9da8:	fd 1d       	adc	r31, r13
    9daa:	40 82       	st	Z, r4
    9dac:	51 82       	std	Z+1, r5	; 0x01
    9dae:	38 c0       	rjmp	.+112    	; 0x9e20 <put_fat+0x1dc>
    9db0:	ed 81       	ldd	r30, Y+5	; 0x05
    9db2:	fe 81       	ldd	r31, Y+6	; 0x06
    9db4:	85 a1       	ldd	r24, Z+37	; 0x25
    9db6:	96 a1       	ldd	r25, Z+38	; 0x26
    9db8:	a7 a1       	ldd	r26, Z+39	; 0x27
    9dba:	b0 a5       	ldd	r27, Z+40	; 0x28
    9dbc:	27 e0       	ldi	r18, 0x07	; 7
    9dbe:	76 95       	lsr	r23
    9dc0:	67 95       	ror	r22
    9dc2:	57 95       	ror	r21
    9dc4:	47 95       	ror	r20
    9dc6:	2a 95       	dec	r18
    9dc8:	d1 f7       	brne	.-12     	; 0x9dbe <put_fat+0x17a>
    9dca:	48 0f       	add	r20, r24
    9dcc:	59 1f       	adc	r21, r25
    9dce:	6a 1f       	adc	r22, r26
    9dd0:	7b 1f       	adc	r23, r27
    9dd2:	cf 01       	movw	r24, r30
    9dd4:	62 dc       	rcall	.-1852   	; 0x969a <move_window>
    9dd6:	5c 01       	movw	r10, r24
    9dd8:	89 2b       	or	r24, r25
    9dda:	51 f5       	brne	.+84     	; 0x9e30 <put_fat+0x1ec>
    9ddc:	4d 81       	ldd	r20, Y+5	; 0x05
    9dde:	5e 81       	ldd	r21, Y+6	; 0x06
    9de0:	4b 5c       	subi	r20, 0xCB	; 203
    9de2:	5f 4f       	sbci	r21, 0xFF	; 255
    9de4:	cc 0c       	add	r12, r12
    9de6:	dd 1c       	adc	r13, r13
    9de8:	cc 0c       	add	r12, r12
    9dea:	dd 1c       	adc	r13, r13
    9dec:	fc ef       	ldi	r31, 0xFC	; 252
    9dee:	cf 22       	and	r12, r31
    9df0:	f1 e0       	ldi	r31, 0x01	; 1
    9df2:	df 22       	and	r13, r31
    9df4:	c4 0e       	add	r12, r20
    9df6:	d5 1e       	adc	r13, r21
    9df8:	c6 01       	movw	r24, r12
    9dfa:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <ld_dword>
    9dfe:	2f e0       	ldi	r18, 0x0F	; 15
    9e00:	72 22       	and	r7, r18
    9e02:	dc 01       	movw	r26, r24
    9e04:	cb 01       	movw	r24, r22
    9e06:	88 27       	eor	r24, r24
    9e08:	99 27       	eor	r25, r25
    9e0a:	aa 27       	eor	r26, r26
    9e0c:	b0 7f       	andi	r27, 0xF0	; 240
    9e0e:	b3 01       	movw	r22, r6
    9e10:	a2 01       	movw	r20, r4
    9e12:	48 2b       	or	r20, r24
    9e14:	59 2b       	or	r21, r25
    9e16:	6a 2b       	or	r22, r26
    9e18:	7b 2b       	or	r23, r27
    9e1a:	c6 01       	movw	r24, r12
    9e1c:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
    9e20:	81 e0       	ldi	r24, 0x01	; 1
    9e22:	ed 81       	ldd	r30, Y+5	; 0x05
    9e24:	fe 81       	ldd	r31, Y+6	; 0x06
    9e26:	83 83       	std	Z+3, r24	; 0x03
    9e28:	03 c0       	rjmp	.+6      	; 0x9e30 <put_fat+0x1ec>
    9e2a:	82 e0       	ldi	r24, 0x02	; 2
    9e2c:	a8 2e       	mov	r10, r24
    9e2e:	b1 2c       	mov	r11, r1
    9e30:	c5 01       	movw	r24, r10
    9e32:	26 96       	adiw	r28, 0x06	; 6
    9e34:	e2 e1       	ldi	r30, 0x12	; 18
    9e36:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00009e3a <get_fat.isra.10>:
    9e3a:	a0 e0       	ldi	r26, 0x00	; 0
    9e3c:	b0 e0       	ldi	r27, 0x00	; 0
    9e3e:	e3 e2       	ldi	r30, 0x23	; 35
    9e40:	ff e4       	ldi	r31, 0x4F	; 79
    9e42:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
    9e46:	42 30       	cpi	r20, 0x02	; 2
    9e48:	51 05       	cpc	r21, r1
    9e4a:	61 05       	cpc	r22, r1
    9e4c:	71 05       	cpc	r23, r1
    9e4e:	08 f4       	brcc	.+2      	; 0x9e52 <get_fat.isra.10+0x18>
    9e50:	9f c0       	rjmp	.+318    	; 0x9f90 <get_fat.isra.10+0x156>
    9e52:	fc 01       	movw	r30, r24
    9e54:	01 8d       	ldd	r16, Z+25	; 0x19
    9e56:	12 8d       	ldd	r17, Z+26	; 0x1a
    9e58:	23 8d       	ldd	r18, Z+27	; 0x1b
    9e5a:	34 8d       	ldd	r19, Z+28	; 0x1c
    9e5c:	40 17       	cp	r20, r16
    9e5e:	51 07       	cpc	r21, r17
    9e60:	62 07       	cpc	r22, r18
    9e62:	73 07       	cpc	r23, r19
    9e64:	08 f0       	brcs	.+2      	; 0x9e68 <get_fat.isra.10+0x2e>
    9e66:	94 c0       	rjmp	.+296    	; 0x9f90 <get_fat.isra.10+0x156>
    9e68:	6a 01       	movw	r12, r20
    9e6a:	7b 01       	movw	r14, r22
    9e6c:	8c 01       	movw	r16, r24
    9e6e:	80 81       	ld	r24, Z
    9e70:	82 30       	cpi	r24, 0x02	; 2
    9e72:	09 f4       	brne	.+2      	; 0x9e76 <get_fat.isra.10+0x3c>
    9e74:	4b c0       	rjmp	.+150    	; 0x9f0c <get_fat.isra.10+0xd2>
    9e76:	83 30       	cpi	r24, 0x03	; 3
    9e78:	09 f4       	brne	.+2      	; 0x9e7c <get_fat.isra.10+0x42>
    9e7a:	67 c0       	rjmp	.+206    	; 0x9f4a <get_fat.isra.10+0x110>
    9e7c:	81 30       	cpi	r24, 0x01	; 1
    9e7e:	09 f0       	breq	.+2      	; 0x9e82 <get_fat.isra.10+0x48>
    9e80:	87 c0       	rjmp	.+270    	; 0x9f90 <get_fat.isra.10+0x156>
    9e82:	ea 01       	movw	r28, r20
    9e84:	d6 95       	lsr	r29
    9e86:	c7 95       	ror	r28
    9e88:	cc 0d       	add	r28, r12
    9e8a:	dd 1d       	adc	r29, r13
    9e8c:	ce 01       	movw	r24, r28
    9e8e:	89 2f       	mov	r24, r25
    9e90:	99 27       	eor	r25, r25
    9e92:	86 95       	lsr	r24
    9e94:	45 a1       	ldd	r20, Z+37	; 0x25
    9e96:	56 a1       	ldd	r21, Z+38	; 0x26
    9e98:	67 a1       	ldd	r22, Z+39	; 0x27
    9e9a:	70 a5       	ldd	r23, Z+40	; 0x28
    9e9c:	48 0f       	add	r20, r24
    9e9e:	59 1f       	adc	r21, r25
    9ea0:	61 1d       	adc	r22, r1
    9ea2:	71 1d       	adc	r23, r1
    9ea4:	cf 01       	movw	r24, r30
    9ea6:	f9 db       	rcall	.-2062   	; 0x969a <move_window>
    9ea8:	89 2b       	or	r24, r25
    9eaa:	21 f0       	breq	.+8      	; 0x9eb4 <get_fat.isra.10+0x7a>
    9eac:	6f ef       	ldi	r22, 0xFF	; 255
    9eae:	7f ef       	ldi	r23, 0xFF	; 255
    9eb0:	cb 01       	movw	r24, r22
    9eb2:	72 c0       	rjmp	.+228    	; 0x9f98 <get_fat.isra.10+0x15e>
    9eb4:	5e 01       	movw	r10, r28
    9eb6:	ff ef       	ldi	r31, 0xFF	; 255
    9eb8:	af 1a       	sub	r10, r31
    9eba:	bf 0a       	sbc	r11, r31
    9ebc:	d1 70       	andi	r29, 0x01	; 1
    9ebe:	c0 0f       	add	r28, r16
    9ec0:	d1 1f       	adc	r29, r17
    9ec2:	cd a9       	ldd	r28, Y+53	; 0x35
    9ec4:	c5 01       	movw	r24, r10
    9ec6:	89 2f       	mov	r24, r25
    9ec8:	99 27       	eor	r25, r25
    9eca:	86 95       	lsr	r24
    9ecc:	f8 01       	movw	r30, r16
    9ece:	45 a1       	ldd	r20, Z+37	; 0x25
    9ed0:	56 a1       	ldd	r21, Z+38	; 0x26
    9ed2:	67 a1       	ldd	r22, Z+39	; 0x27
    9ed4:	70 a5       	ldd	r23, Z+40	; 0x28
    9ed6:	48 0f       	add	r20, r24
    9ed8:	59 1f       	adc	r21, r25
    9eda:	61 1d       	adc	r22, r1
    9edc:	71 1d       	adc	r23, r1
    9ede:	c8 01       	movw	r24, r16
    9ee0:	dc db       	rcall	.-2120   	; 0x969a <move_window>
    9ee2:	89 2b       	or	r24, r25
    9ee4:	19 f7       	brne	.-58     	; 0x9eac <get_fat.isra.10+0x72>
    9ee6:	f1 e0       	ldi	r31, 0x01	; 1
    9ee8:	bf 22       	and	r11, r31
    9eea:	f8 01       	movw	r30, r16
    9eec:	ea 0d       	add	r30, r10
    9eee:	fb 1d       	adc	r31, r11
    9ef0:	85 a9       	ldd	r24, Z+53	; 0x35
    9ef2:	6c 2f       	mov	r22, r28
    9ef4:	70 e0       	ldi	r23, 0x00	; 0
    9ef6:	78 2b       	or	r23, r24
    9ef8:	c0 fe       	sbrs	r12, 0
    9efa:	06 c0       	rjmp	.+12     	; 0x9f08 <get_fat.isra.10+0xce>
    9efc:	54 e0       	ldi	r21, 0x04	; 4
    9efe:	76 95       	lsr	r23
    9f00:	67 95       	ror	r22
    9f02:	5a 95       	dec	r21
    9f04:	e1 f7       	brne	.-8      	; 0x9efe <get_fat.isra.10+0xc4>
    9f06:	1e c0       	rjmp	.+60     	; 0x9f44 <get_fat.isra.10+0x10a>
    9f08:	7f 70       	andi	r23, 0x0F	; 15
    9f0a:	1c c0       	rjmp	.+56     	; 0x9f44 <get_fat.isra.10+0x10a>
    9f0c:	77 27       	eor	r23, r23
    9f0e:	6f 2d       	mov	r22, r15
    9f10:	5e 2d       	mov	r21, r14
    9f12:	4d 2d       	mov	r20, r13
    9f14:	85 a1       	ldd	r24, Z+37	; 0x25
    9f16:	96 a1       	ldd	r25, Z+38	; 0x26
    9f18:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f1a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f1c:	48 0f       	add	r20, r24
    9f1e:	59 1f       	adc	r21, r25
    9f20:	6a 1f       	adc	r22, r26
    9f22:	7b 1f       	adc	r23, r27
    9f24:	cf 01       	movw	r24, r30
    9f26:	b9 db       	rcall	.-2190   	; 0x969a <move_window>
    9f28:	89 2b       	or	r24, r25
    9f2a:	09 f0       	breq	.+2      	; 0x9f2e <get_fat.isra.10+0xf4>
    9f2c:	bf cf       	rjmp	.-130    	; 0x9eac <get_fat.isra.10+0x72>
    9f2e:	cc 0c       	add	r12, r12
    9f30:	dd 1c       	adc	r13, r13
    9f32:	e8 94       	clt
    9f34:	c0 f8       	bld	r12, 0
    9f36:	f1 e0       	ldi	r31, 0x01	; 1
    9f38:	df 22       	and	r13, r31
    9f3a:	f8 01       	movw	r30, r16
    9f3c:	ec 0d       	add	r30, r12
    9f3e:	fd 1d       	adc	r31, r13
    9f40:	65 a9       	ldd	r22, Z+53	; 0x35
    9f42:	76 a9       	ldd	r23, Z+54	; 0x36
    9f44:	80 e0       	ldi	r24, 0x00	; 0
    9f46:	90 e0       	ldi	r25, 0x00	; 0
    9f48:	27 c0       	rjmp	.+78     	; 0x9f98 <get_fat.isra.10+0x15e>
    9f4a:	85 a1       	ldd	r24, Z+37	; 0x25
    9f4c:	96 a1       	ldd	r25, Z+38	; 0x26
    9f4e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f50:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f52:	27 e0       	ldi	r18, 0x07	; 7
    9f54:	76 95       	lsr	r23
    9f56:	67 95       	ror	r22
    9f58:	57 95       	ror	r21
    9f5a:	47 95       	ror	r20
    9f5c:	2a 95       	dec	r18
    9f5e:	d1 f7       	brne	.-12     	; 0x9f54 <get_fat.isra.10+0x11a>
    9f60:	48 0f       	add	r20, r24
    9f62:	59 1f       	adc	r21, r25
    9f64:	6a 1f       	adc	r22, r26
    9f66:	7b 1f       	adc	r23, r27
    9f68:	cf 01       	movw	r24, r30
    9f6a:	97 db       	rcall	.-2258   	; 0x969a <move_window>
    9f6c:	89 2b       	or	r24, r25
    9f6e:	09 f0       	breq	.+2      	; 0x9f72 <get_fat.isra.10+0x138>
    9f70:	9d cf       	rjmp	.-198    	; 0x9eac <get_fat.isra.10+0x72>
    9f72:	0b 5c       	subi	r16, 0xCB	; 203
    9f74:	1f 4f       	sbci	r17, 0xFF	; 255
    9f76:	cc 0c       	add	r12, r12
    9f78:	dd 1c       	adc	r13, r13
    9f7a:	cc 0c       	add	r12, r12
    9f7c:	dd 1c       	adc	r13, r13
    9f7e:	c6 01       	movw	r24, r12
    9f80:	8c 7f       	andi	r24, 0xFC	; 252
    9f82:	91 70       	andi	r25, 0x01	; 1
    9f84:	80 0f       	add	r24, r16
    9f86:	91 1f       	adc	r25, r17
    9f88:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <ld_dword>
    9f8c:	9f 70       	andi	r25, 0x0F	; 15
    9f8e:	04 c0       	rjmp	.+8      	; 0x9f98 <get_fat.isra.10+0x15e>
    9f90:	61 e0       	ldi	r22, 0x01	; 1
    9f92:	70 e0       	ldi	r23, 0x00	; 0
    9f94:	80 e0       	ldi	r24, 0x00	; 0
    9f96:	90 e0       	ldi	r25, 0x00	; 0
    9f98:	cd b7       	in	r28, 0x3d	; 61
    9f9a:	de b7       	in	r29, 0x3e	; 62
    9f9c:	ea e0       	ldi	r30, 0x0A	; 10
    9f9e:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

00009fa2 <dir_sdi>:
    9fa2:	a0 e0       	ldi	r26, 0x00	; 0
    9fa4:	b0 e0       	ldi	r27, 0x00	; 0
    9fa6:	e7 ed       	ldi	r30, 0xD7	; 215
    9fa8:	ff e4       	ldi	r31, 0x4F	; 79
    9faa:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
    9fae:	ec 01       	movw	r28, r24
    9fb0:	6a 01       	movw	r12, r20
    9fb2:	7b 01       	movw	r14, r22
    9fb4:	41 15       	cp	r20, r1
    9fb6:	51 05       	cpc	r21, r1
    9fb8:	80 e2       	ldi	r24, 0x20	; 32
    9fba:	68 07       	cpc	r22, r24
    9fbc:	71 05       	cpc	r23, r1
    9fbe:	18 f0       	brcs	.+6      	; 0x9fc6 <dir_sdi+0x24>
    9fc0:	82 e0       	ldi	r24, 0x02	; 2
    9fc2:	90 e0       	ldi	r25, 0x00	; 0
    9fc4:	aa c0       	rjmp	.+340    	; 0xa11a <dir_sdi+0x178>
    9fc6:	db 01       	movw	r26, r22
    9fc8:	ca 01       	movw	r24, r20
    9fca:	8f 71       	andi	r24, 0x1F	; 31
    9fcc:	99 27       	eor	r25, r25
    9fce:	aa 27       	eor	r26, r26
    9fd0:	bb 27       	eor	r27, r27
    9fd2:	89 2b       	or	r24, r25
    9fd4:	8a 2b       	or	r24, r26
    9fd6:	8b 2b       	or	r24, r27
    9fd8:	99 f7       	brne	.-26     	; 0x9fc0 <dir_sdi+0x1e>
    9fda:	08 81       	ld	r16, Y
    9fdc:	19 81       	ldd	r17, Y+1	; 0x01
    9fde:	4e 87       	std	Y+14, r20	; 0x0e
    9fe0:	5f 87       	std	Y+15, r21	; 0x0f
    9fe2:	68 8b       	std	Y+16, r22	; 0x10
    9fe4:	79 8b       	std	Y+17, r23	; 0x11
    9fe6:	8e 80       	ldd	r8, Y+6	; 0x06
    9fe8:	9f 80       	ldd	r9, Y+7	; 0x07
    9fea:	a8 84       	ldd	r10, Y+8	; 0x08
    9fec:	b9 84       	ldd	r11, Y+9	; 0x09
    9fee:	81 14       	cp	r8, r1
    9ff0:	91 04       	cpc	r9, r1
    9ff2:	a1 04       	cpc	r10, r1
    9ff4:	b1 04       	cpc	r11, r1
    9ff6:	51 f5       	brne	.+84     	; 0xa04c <dir_sdi+0xaa>
    9ff8:	f8 01       	movw	r30, r16
    9ffa:	80 81       	ld	r24, Z
    9ffc:	83 30       	cpi	r24, 0x03	; 3
    9ffe:	40 f0       	brcs	.+16     	; 0xa010 <dir_sdi+0x6e>
    a000:	81 a5       	ldd	r24, Z+41	; 0x29
    a002:	92 a5       	ldd	r25, Z+42	; 0x2a
    a004:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a006:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a008:	00 97       	sbiw	r24, 0x00	; 0
    a00a:	a1 05       	cpc	r26, r1
    a00c:	b1 05       	cpc	r27, r1
    a00e:	e1 f4       	brne	.+56     	; 0xa048 <dir_sdi+0xa6>
    a010:	f8 01       	movw	r30, r16
    a012:	87 81       	ldd	r24, Z+7	; 0x07
    a014:	90 85       	ldd	r25, Z+8	; 0x08
    a016:	a0 e0       	ldi	r26, 0x00	; 0
    a018:	b0 e0       	ldi	r27, 0x00	; 0
    a01a:	b7 01       	movw	r22, r14
    a01c:	a6 01       	movw	r20, r12
    a01e:	25 e0       	ldi	r18, 0x05	; 5
    a020:	76 95       	lsr	r23
    a022:	67 95       	ror	r22
    a024:	57 95       	ror	r21
    a026:	47 95       	ror	r20
    a028:	2a 95       	dec	r18
    a02a:	d1 f7       	brne	.-12     	; 0xa020 <dir_sdi+0x7e>
    a02c:	48 17       	cp	r20, r24
    a02e:	59 07       	cpc	r21, r25
    a030:	6a 07       	cpc	r22, r26
    a032:	7b 07       	cpc	r23, r27
    a034:	28 f6       	brcc	.-118    	; 0x9fc0 <dir_sdi+0x1e>
    a036:	81 a5       	ldd	r24, Z+41	; 0x29
    a038:	92 a5       	ldd	r25, Z+42	; 0x2a
    a03a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a03c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a03e:	8e 8b       	std	Y+22, r24	; 0x16
    a040:	9f 8b       	std	Y+23, r25	; 0x17
    a042:	a8 8f       	std	Y+24, r26	; 0x18
    a044:	b9 8f       	std	Y+25, r27	; 0x19
    a046:	3e c0       	rjmp	.+124    	; 0xa0c4 <dir_sdi+0x122>
    a048:	4c 01       	movw	r8, r24
    a04a:	5d 01       	movw	r10, r26
    a04c:	f8 01       	movw	r30, r16
    a04e:	41 84       	ldd	r4, Z+9	; 0x09
    a050:	52 84       	ldd	r5, Z+10	; 0x0a
    a052:	61 2c       	mov	r6, r1
    a054:	71 2c       	mov	r7, r1
    a056:	39 e0       	ldi	r19, 0x09	; 9
    a058:	44 0c       	add	r4, r4
    a05a:	55 1c       	adc	r5, r5
    a05c:	66 1c       	adc	r6, r6
    a05e:	77 1c       	adc	r7, r7
    a060:	3a 95       	dec	r19
    a062:	d1 f7       	brne	.-12     	; 0xa058 <dir_sdi+0xb6>
    a064:	b5 01       	movw	r22, r10
    a066:	a4 01       	movw	r20, r8
    a068:	c4 14       	cp	r12, r4
    a06a:	d5 04       	cpc	r13, r5
    a06c:	e6 04       	cpc	r14, r6
    a06e:	f7 04       	cpc	r15, r7
    a070:	10 f1       	brcs	.+68     	; 0xa0b6 <dir_sdi+0x114>
    a072:	88 81       	ld	r24, Y
    a074:	99 81       	ldd	r25, Y+1	; 0x01
    a076:	e1 de       	rcall	.-574    	; 0x9e3a <get_fat.isra.10>
    a078:	4b 01       	movw	r8, r22
    a07a:	5c 01       	movw	r10, r24
    a07c:	6f 3f       	cpi	r22, 0xFF	; 255
    a07e:	7f 4f       	sbci	r23, 0xFF	; 255
    a080:	8f 4f       	sbci	r24, 0xFF	; 255
    a082:	9f 4f       	sbci	r25, 0xFF	; 255
    a084:	09 f4       	brne	.+2      	; 0xa088 <dir_sdi+0xe6>
    a086:	47 c0       	rjmp	.+142    	; 0xa116 <dir_sdi+0x174>
    a088:	82 e0       	ldi	r24, 0x02	; 2
    a08a:	88 16       	cp	r8, r24
    a08c:	91 04       	cpc	r9, r1
    a08e:	a1 04       	cpc	r10, r1
    a090:	b1 04       	cpc	r11, r1
    a092:	08 f4       	brcc	.+2      	; 0xa096 <dir_sdi+0xf4>
    a094:	95 cf       	rjmp	.-214    	; 0x9fc0 <dir_sdi+0x1e>
    a096:	f8 01       	movw	r30, r16
    a098:	81 8d       	ldd	r24, Z+25	; 0x19
    a09a:	92 8d       	ldd	r25, Z+26	; 0x1a
    a09c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a09e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a0a0:	88 16       	cp	r8, r24
    a0a2:	99 06       	cpc	r9, r25
    a0a4:	aa 06       	cpc	r10, r26
    a0a6:	bb 06       	cpc	r11, r27
    a0a8:	08 f0       	brcs	.+2      	; 0xa0ac <dir_sdi+0x10a>
    a0aa:	8a cf       	rjmp	.-236    	; 0x9fc0 <dir_sdi+0x1e>
    a0ac:	c4 18       	sub	r12, r4
    a0ae:	d5 08       	sbc	r13, r5
    a0b0:	e6 08       	sbc	r14, r6
    a0b2:	f7 08       	sbc	r15, r7
    a0b4:	d7 cf       	rjmp	.-82     	; 0xa064 <dir_sdi+0xc2>
    a0b6:	c8 01       	movw	r24, r16
    a0b8:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    a0bc:	6e 8b       	std	Y+22, r22	; 0x16
    a0be:	7f 8b       	std	Y+23, r23	; 0x17
    a0c0:	88 8f       	std	Y+24, r24	; 0x18
    a0c2:	99 8f       	std	Y+25, r25	; 0x19
    a0c4:	8a 8a       	std	Y+18, r8	; 0x12
    a0c6:	9b 8a       	std	Y+19, r9	; 0x13
    a0c8:	ac 8a       	std	Y+20, r10	; 0x14
    a0ca:	bd 8a       	std	Y+21, r11	; 0x15
    a0cc:	8e 89       	ldd	r24, Y+22	; 0x16
    a0ce:	9f 89       	ldd	r25, Y+23	; 0x17
    a0d0:	a8 8d       	ldd	r26, Y+24	; 0x18
    a0d2:	b9 8d       	ldd	r27, Y+25	; 0x19
    a0d4:	00 97       	sbiw	r24, 0x00	; 0
    a0d6:	a1 05       	cpc	r26, r1
    a0d8:	b1 05       	cpc	r27, r1
    a0da:	09 f4       	brne	.+2      	; 0xa0de <dir_sdi+0x13c>
    a0dc:	71 cf       	rjmp	.-286    	; 0x9fc0 <dir_sdi+0x1e>
    a0de:	b7 01       	movw	r22, r14
    a0e0:	a6 01       	movw	r20, r12
    a0e2:	29 e0       	ldi	r18, 0x09	; 9
    a0e4:	76 95       	lsr	r23
    a0e6:	67 95       	ror	r22
    a0e8:	57 95       	ror	r21
    a0ea:	47 95       	ror	r20
    a0ec:	2a 95       	dec	r18
    a0ee:	d1 f7       	brne	.-12     	; 0xa0e4 <dir_sdi+0x142>
    a0f0:	84 0f       	add	r24, r20
    a0f2:	95 1f       	adc	r25, r21
    a0f4:	a6 1f       	adc	r26, r22
    a0f6:	b7 1f       	adc	r27, r23
    a0f8:	8e 8b       	std	Y+22, r24	; 0x16
    a0fa:	9f 8b       	std	Y+23, r25	; 0x17
    a0fc:	a8 8f       	std	Y+24, r26	; 0x18
    a0fe:	b9 8f       	std	Y+25, r27	; 0x19
    a100:	0b 5c       	subi	r16, 0xCB	; 203
    a102:	1f 4f       	sbci	r17, 0xFF	; 255
    a104:	f1 e0       	ldi	r31, 0x01	; 1
    a106:	df 22       	and	r13, r31
    a108:	c0 0e       	add	r12, r16
    a10a:	d1 1e       	adc	r13, r17
    a10c:	db 8e       	std	Y+27, r13	; 0x1b
    a10e:	ca 8e       	std	Y+26, r12	; 0x1a
    a110:	80 e0       	ldi	r24, 0x00	; 0
    a112:	90 e0       	ldi	r25, 0x00	; 0
    a114:	02 c0       	rjmp	.+4      	; 0xa11a <dir_sdi+0x178>
    a116:	81 e0       	ldi	r24, 0x01	; 1
    a118:	90 e0       	ldi	r25, 0x00	; 0
    a11a:	cd b7       	in	r28, 0x3d	; 61
    a11c:	de b7       	in	r29, 0x3e	; 62
    a11e:	e0 e1       	ldi	r30, 0x10	; 16
    a120:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

0000a124 <create_chain>:
    a124:	a0 e0       	ldi	r26, 0x00	; 0
    a126:	b0 e0       	ldi	r27, 0x00	; 0
    a128:	e8 e9       	ldi	r30, 0x98	; 152
    a12a:	f0 e5       	ldi	r31, 0x50	; 80
    a12c:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
    a130:	8c 01       	movw	r16, r24
    a132:	2a 01       	movw	r4, r20
    a134:	3b 01       	movw	r6, r22
    a136:	fc 01       	movw	r30, r24
    a138:	c0 81       	ld	r28, Z
    a13a:	d1 81       	ldd	r29, Z+1	; 0x01
    a13c:	41 15       	cp	r20, r1
    a13e:	51 05       	cpc	r21, r1
    a140:	61 05       	cpc	r22, r1
    a142:	71 05       	cpc	r23, r1
    a144:	99 f4       	brne	.+38     	; 0xa16c <create_chain+0x48>
    a146:	8d 84       	ldd	r8, Y+13	; 0x0d
    a148:	9e 84       	ldd	r9, Y+14	; 0x0e
    a14a:	af 84       	ldd	r10, Y+15	; 0x0f
    a14c:	b8 88       	ldd	r11, Y+16	; 0x10
    a14e:	81 14       	cp	r8, r1
    a150:	91 04       	cpc	r9, r1
    a152:	a1 04       	cpc	r10, r1
    a154:	b1 04       	cpc	r11, r1
    a156:	51 f1       	breq	.+84     	; 0xa1ac <create_chain+0x88>
    a158:	89 8d       	ldd	r24, Y+25	; 0x19
    a15a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a15c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a15e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a160:	88 16       	cp	r8, r24
    a162:	99 06       	cpc	r9, r25
    a164:	aa 06       	cpc	r10, r26
    a166:	bb 06       	cpc	r11, r27
    a168:	28 f1       	brcs	.+74     	; 0xa1b4 <create_chain+0x90>
    a16a:	20 c0       	rjmp	.+64     	; 0xa1ac <create_chain+0x88>
    a16c:	ce 01       	movw	r24, r28
    a16e:	65 de       	rcall	.-822    	; 0x9e3a <get_fat.isra.10>
    a170:	62 30       	cpi	r22, 0x02	; 2
    a172:	71 05       	cpc	r23, r1
    a174:	81 05       	cpc	r24, r1
    a176:	91 05       	cpc	r25, r1
    a178:	08 f4       	brcc	.+2      	; 0xa17c <create_chain+0x58>
    a17a:	ea c0       	rjmp	.+468    	; 0xa350 <create_chain+0x22c>
    a17c:	6f 3f       	cpi	r22, 0xFF	; 255
    a17e:	ff ef       	ldi	r31, 0xFF	; 255
    a180:	7f 07       	cpc	r23, r31
    a182:	8f 07       	cpc	r24, r31
    a184:	9f 07       	cpc	r25, r31
    a186:	29 f4       	brne	.+10     	; 0xa192 <create_chain+0x6e>
    a188:	4f ef       	ldi	r20, 0xFF	; 255
    a18a:	3f ef       	ldi	r19, 0xFF	; 255
    a18c:	2f ef       	ldi	r18, 0xFF	; 255
    a18e:	9f ef       	ldi	r25, 0xFF	; 255
    a190:	e7 c0       	rjmp	.+462    	; 0xa360 <create_chain+0x23c>
    a192:	c9 8c       	ldd	r12, Y+25	; 0x19
    a194:	da 8c       	ldd	r13, Y+26	; 0x1a
    a196:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a198:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a19a:	6c 15       	cp	r22, r12
    a19c:	7d 05       	cpc	r23, r13
    a19e:	8e 05       	cpc	r24, r14
    a1a0:	9f 05       	cpc	r25, r15
    a1a2:	08 f4       	brcc	.+2      	; 0xa1a6 <create_chain+0x82>
    a1a4:	da c0       	rjmp	.+436    	; 0xa35a <create_chain+0x236>
    a1a6:	53 01       	movw	r10, r6
    a1a8:	42 01       	movw	r8, r4
    a1aa:	04 c0       	rjmp	.+8      	; 0xa1b4 <create_chain+0x90>
    a1ac:	81 2c       	mov	r8, r1
    a1ae:	91 2c       	mov	r9, r1
    a1b0:	54 01       	movw	r10, r8
    a1b2:	83 94       	inc	r8
    a1b4:	89 89       	ldd	r24, Y+17	; 0x11
    a1b6:	9a 89       	ldd	r25, Y+18	; 0x12
    a1b8:	ab 89       	ldd	r26, Y+19	; 0x13
    a1ba:	bc 89       	ldd	r27, Y+20	; 0x14
    a1bc:	89 2b       	or	r24, r25
    a1be:	8a 2b       	or	r24, r26
    a1c0:	8b 2b       	or	r24, r27
    a1c2:	11 f4       	brne	.+4      	; 0xa1c8 <create_chain+0xa4>
    a1c4:	40 e0       	ldi	r20, 0x00	; 0
    a1c6:	c5 c0       	rjmp	.+394    	; 0xa352 <create_chain+0x22e>
    a1c8:	84 14       	cp	r8, r4
    a1ca:	95 04       	cpc	r9, r5
    a1cc:	a6 04       	cpc	r10, r6
    a1ce:	b7 04       	cpc	r11, r7
    a1d0:	09 f0       	breq	.+2      	; 0xa1d4 <create_chain+0xb0>
    a1d2:	46 c0       	rjmp	.+140    	; 0xa260 <create_chain+0x13c>
    a1d4:	75 01       	movw	r14, r10
    a1d6:	64 01       	movw	r12, r8
    a1d8:	2f ef       	ldi	r18, 0xFF	; 255
    a1da:	c2 1a       	sub	r12, r18
    a1dc:	d2 0a       	sbc	r13, r18
    a1de:	e2 0a       	sbc	r14, r18
    a1e0:	f2 0a       	sbc	r15, r18
    a1e2:	89 8d       	ldd	r24, Y+25	; 0x19
    a1e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1e6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1e8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1ea:	c8 16       	cp	r12, r24
    a1ec:	d9 06       	cpc	r13, r25
    a1ee:	ea 06       	cpc	r14, r26
    a1f0:	fb 06       	cpc	r15, r27
    a1f2:	28 f0       	brcs	.+10     	; 0xa1fe <create_chain+0xda>
    a1f4:	92 e0       	ldi	r25, 0x02	; 2
    a1f6:	c9 2e       	mov	r12, r25
    a1f8:	d1 2c       	mov	r13, r1
    a1fa:	e1 2c       	mov	r14, r1
    a1fc:	f1 2c       	mov	r15, r1
    a1fe:	b7 01       	movw	r22, r14
    a200:	a6 01       	movw	r20, r12
    a202:	f8 01       	movw	r30, r16
    a204:	80 81       	ld	r24, Z
    a206:	91 81       	ldd	r25, Z+1	; 0x01
    a208:	18 de       	rcall	.-976    	; 0x9e3a <get_fat.isra.10>
    a20a:	61 30       	cpi	r22, 0x01	; 1
    a20c:	71 05       	cpc	r23, r1
    a20e:	81 05       	cpc	r24, r1
    a210:	91 05       	cpc	r25, r1
    a212:	09 f4       	brne	.+2      	; 0xa216 <create_chain+0xf2>
    a214:	9d c0       	rjmp	.+314    	; 0xa350 <create_chain+0x22c>
    a216:	6f 3f       	cpi	r22, 0xFF	; 255
    a218:	ff ef       	ldi	r31, 0xFF	; 255
    a21a:	7f 07       	cpc	r23, r31
    a21c:	8f 07       	cpc	r24, r31
    a21e:	9f 07       	cpc	r25, r31
    a220:	09 f4       	brne	.+2      	; 0xa224 <create_chain+0x100>
    a222:	b2 cf       	rjmp	.-156    	; 0xa188 <create_chain+0x64>
    a224:	67 2b       	or	r22, r23
    a226:	68 2b       	or	r22, r24
    a228:	69 2b       	or	r22, r25
    a22a:	a9 f0       	breq	.+42     	; 0xa256 <create_chain+0x132>
    a22c:	8d 85       	ldd	r24, Y+13	; 0x0d
    a22e:	9e 85       	ldd	r25, Y+14	; 0x0e
    a230:	af 85       	ldd	r26, Y+15	; 0x0f
    a232:	b8 89       	ldd	r27, Y+16	; 0x10
    a234:	82 30       	cpi	r24, 0x02	; 2
    a236:	91 05       	cpc	r25, r1
    a238:	a1 05       	cpc	r26, r1
    a23a:	b1 05       	cpc	r27, r1
    a23c:	88 f0       	brcs	.+34     	; 0xa260 <create_chain+0x13c>
    a23e:	49 8d       	ldd	r20, Y+25	; 0x19
    a240:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a242:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a244:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a246:	84 17       	cp	r24, r20
    a248:	95 07       	cpc	r25, r21
    a24a:	a6 07       	cpc	r26, r22
    a24c:	b7 07       	cpc	r27, r23
    a24e:	40 f4       	brcc	.+16     	; 0xa260 <create_chain+0x13c>
    a250:	4c 01       	movw	r8, r24
    a252:	5d 01       	movw	r10, r26
    a254:	05 c0       	rjmp	.+10     	; 0xa260 <create_chain+0x13c>
    a256:	c1 14       	cp	r12, r1
    a258:	d1 04       	cpc	r13, r1
    a25a:	e1 04       	cpc	r14, r1
    a25c:	f1 04       	cpc	r15, r1
    a25e:	c9 f5       	brne	.+114    	; 0xa2d2 <create_chain+0x1ae>
    a260:	75 01       	movw	r14, r10
    a262:	64 01       	movw	r12, r8
    a264:	2f ef       	ldi	r18, 0xFF	; 255
    a266:	c2 1a       	sub	r12, r18
    a268:	d2 0a       	sbc	r13, r18
    a26a:	e2 0a       	sbc	r14, r18
    a26c:	f2 0a       	sbc	r15, r18
    a26e:	89 8d       	ldd	r24, Y+25	; 0x19
    a270:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a272:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a274:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a276:	c8 16       	cp	r12, r24
    a278:	d9 06       	cpc	r13, r25
    a27a:	ea 06       	cpc	r14, r26
    a27c:	fb 06       	cpc	r15, r27
    a27e:	60 f0       	brcs	.+24     	; 0xa298 <create_chain+0x174>
    a280:	82 e0       	ldi	r24, 0x02	; 2
    a282:	88 16       	cp	r8, r24
    a284:	91 04       	cpc	r9, r1
    a286:	a1 04       	cpc	r10, r1
    a288:	b1 04       	cpc	r11, r1
    a28a:	08 f4       	brcc	.+2      	; 0xa28e <create_chain+0x16a>
    a28c:	9b cf       	rjmp	.-202    	; 0xa1c4 <create_chain+0xa0>
    a28e:	82 e0       	ldi	r24, 0x02	; 2
    a290:	c8 2e       	mov	r12, r24
    a292:	d1 2c       	mov	r13, r1
    a294:	e1 2c       	mov	r14, r1
    a296:	f1 2c       	mov	r15, r1
    a298:	b7 01       	movw	r22, r14
    a29a:	a6 01       	movw	r20, r12
    a29c:	f8 01       	movw	r30, r16
    a29e:	80 81       	ld	r24, Z
    a2a0:	91 81       	ldd	r25, Z+1	; 0x01
    a2a2:	cb dd       	rcall	.-1130   	; 0x9e3a <get_fat.isra.10>
    a2a4:	61 15       	cp	r22, r1
    a2a6:	71 05       	cpc	r23, r1
    a2a8:	81 05       	cpc	r24, r1
    a2aa:	91 05       	cpc	r25, r1
    a2ac:	91 f0       	breq	.+36     	; 0xa2d2 <create_chain+0x1ae>
    a2ae:	61 30       	cpi	r22, 0x01	; 1
    a2b0:	71 05       	cpc	r23, r1
    a2b2:	81 05       	cpc	r24, r1
    a2b4:	91 05       	cpc	r25, r1
    a2b6:	09 f4       	brne	.+2      	; 0xa2ba <create_chain+0x196>
    a2b8:	4b c0       	rjmp	.+150    	; 0xa350 <create_chain+0x22c>
    a2ba:	6f 3f       	cpi	r22, 0xFF	; 255
    a2bc:	7f 4f       	sbci	r23, 0xFF	; 255
    a2be:	8f 4f       	sbci	r24, 0xFF	; 255
    a2c0:	9f 4f       	sbci	r25, 0xFF	; 255
    a2c2:	09 f4       	brne	.+2      	; 0xa2c6 <create_chain+0x1a2>
    a2c4:	61 cf       	rjmp	.-318    	; 0xa188 <create_chain+0x64>
    a2c6:	c8 14       	cp	r12, r8
    a2c8:	d9 04       	cpc	r13, r9
    a2ca:	ea 04       	cpc	r14, r10
    a2cc:	fb 04       	cpc	r15, r11
    a2ce:	51 f6       	brne	.-108    	; 0xa264 <create_chain+0x140>
    a2d0:	79 cf       	rjmp	.-270    	; 0xa1c4 <create_chain+0xa0>
    a2d2:	0f ef       	ldi	r16, 0xFF	; 255
    a2d4:	1f ef       	ldi	r17, 0xFF	; 255
    a2d6:	98 01       	movw	r18, r16
    a2d8:	b7 01       	movw	r22, r14
    a2da:	a6 01       	movw	r20, r12
    a2dc:	ce 01       	movw	r24, r28
    a2de:	b2 dc       	rcall	.-1692   	; 0x9c44 <put_fat>
    a2e0:	00 97       	sbiw	r24, 0x00	; 0
    a2e2:	99 f5       	brne	.+102    	; 0xa34a <create_chain+0x226>
    a2e4:	41 14       	cp	r4, r1
    a2e6:	51 04       	cpc	r5, r1
    a2e8:	61 04       	cpc	r6, r1
    a2ea:	71 04       	cpc	r7, r1
    a2ec:	e9 f4       	brne	.+58     	; 0xa328 <create_chain+0x204>
    a2ee:	cd 86       	std	Y+13, r12	; 0x0d
    a2f0:	de 86       	std	Y+14, r13	; 0x0e
    a2f2:	ef 86       	std	Y+15, r14	; 0x0f
    a2f4:	f8 8a       	std	Y+16, r15	; 0x10
    a2f6:	89 89       	ldd	r24, Y+17	; 0x11
    a2f8:	9a 89       	ldd	r25, Y+18	; 0x12
    a2fa:	ab 89       	ldd	r26, Y+19	; 0x13
    a2fc:	bc 89       	ldd	r27, Y+20	; 0x14
    a2fe:	49 8d       	ldd	r20, Y+25	; 0x19
    a300:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a302:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a304:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a306:	42 50       	subi	r20, 0x02	; 2
    a308:	51 09       	sbc	r21, r1
    a30a:	61 09       	sbc	r22, r1
    a30c:	71 09       	sbc	r23, r1
    a30e:	48 17       	cp	r20, r24
    a310:	59 07       	cpc	r21, r25
    a312:	6a 07       	cpc	r22, r26
    a314:	7b 07       	cpc	r23, r27
    a316:	88 f0       	brcs	.+34     	; 0xa33a <create_chain+0x216>
    a318:	01 97       	sbiw	r24, 0x01	; 1
    a31a:	a1 09       	sbc	r26, r1
    a31c:	b1 09       	sbc	r27, r1
    a31e:	89 8b       	std	Y+17, r24	; 0x11
    a320:	9a 8b       	std	Y+18, r25	; 0x12
    a322:	ab 8b       	std	Y+19, r26	; 0x13
    a324:	bc 8b       	std	Y+20, r27	; 0x14
    a326:	09 c0       	rjmp	.+18     	; 0xa33a <create_chain+0x216>
    a328:	97 01       	movw	r18, r14
    a32a:	86 01       	movw	r16, r12
    a32c:	b3 01       	movw	r22, r6
    a32e:	a2 01       	movw	r20, r4
    a330:	ce 01       	movw	r24, r28
    a332:	88 dc       	rcall	.-1776   	; 0x9c44 <put_fat>
    a334:	00 97       	sbiw	r24, 0x00	; 0
    a336:	d9 f2       	breq	.-74     	; 0xa2ee <create_chain+0x1ca>
    a338:	08 c0       	rjmp	.+16     	; 0xa34a <create_chain+0x226>
    a33a:	8c 81       	ldd	r24, Y+4	; 0x04
    a33c:	81 60       	ori	r24, 0x01	; 1
    a33e:	8c 83       	std	Y+4, r24	; 0x04
    a340:	4c 2d       	mov	r20, r12
    a342:	3d 2d       	mov	r19, r13
    a344:	2e 2d       	mov	r18, r14
    a346:	9f 2d       	mov	r25, r15
    a348:	0b c0       	rjmp	.+22     	; 0xa360 <create_chain+0x23c>
    a34a:	01 97       	sbiw	r24, 0x01	; 1
    a34c:	09 f4       	brne	.+2      	; 0xa350 <create_chain+0x22c>
    a34e:	1c cf       	rjmp	.-456    	; 0xa188 <create_chain+0x64>
    a350:	41 e0       	ldi	r20, 0x01	; 1
    a352:	30 e0       	ldi	r19, 0x00	; 0
    a354:	20 e0       	ldi	r18, 0x00	; 0
    a356:	90 e0       	ldi	r25, 0x00	; 0
    a358:	03 c0       	rjmp	.+6      	; 0xa360 <create_chain+0x23c>
    a35a:	46 2f       	mov	r20, r22
    a35c:	37 2f       	mov	r19, r23
    a35e:	28 2f       	mov	r18, r24
    a360:	64 2f       	mov	r22, r20
    a362:	73 2f       	mov	r23, r19
    a364:	82 2f       	mov	r24, r18
    a366:	cd b7       	in	r28, 0x3d	; 61
    a368:	de b7       	in	r29, 0x3e	; 62
    a36a:	e0 e1       	ldi	r30, 0x10	; 16
    a36c:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

0000a370 <remove_chain>:
    a370:	4f 92       	push	r4
    a372:	5f 92       	push	r5
    a374:	6f 92       	push	r6
    a376:	7f 92       	push	r7
    a378:	af 92       	push	r10
    a37a:	bf 92       	push	r11
    a37c:	cf 92       	push	r12
    a37e:	df 92       	push	r13
    a380:	ef 92       	push	r14
    a382:	ff 92       	push	r15
    a384:	0f 93       	push	r16
    a386:	1f 93       	push	r17
    a388:	cf 93       	push	r28
    a38a:	df 93       	push	r29
    a38c:	5c 01       	movw	r10, r24
    a38e:	6a 01       	movw	r12, r20
    a390:	7b 01       	movw	r14, r22
    a392:	b9 01       	movw	r22, r18
    a394:	a8 01       	movw	r20, r16
    a396:	22 e0       	ldi	r18, 0x02	; 2
    a398:	c2 16       	cp	r12, r18
    a39a:	d1 04       	cpc	r13, r1
    a39c:	e1 04       	cpc	r14, r1
    a39e:	f1 04       	cpc	r15, r1
    a3a0:	10 f4       	brcc	.+4      	; 0xa3a6 <remove_chain+0x36>
    a3a2:	22 e0       	ldi	r18, 0x02	; 2
    a3a4:	27 c0       	rjmp	.+78     	; 0xa3f4 <remove_chain+0x84>
    a3a6:	fc 01       	movw	r30, r24
    a3a8:	c0 81       	ld	r28, Z
    a3aa:	d1 81       	ldd	r29, Z+1	; 0x01
    a3ac:	89 8d       	ldd	r24, Y+25	; 0x19
    a3ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3b0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3b2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3b4:	c8 16       	cp	r12, r24
    a3b6:	d9 06       	cpc	r13, r25
    a3b8:	ea 06       	cpc	r14, r26
    a3ba:	fb 06       	cpc	r15, r27
    a3bc:	90 f7       	brcc	.-28     	; 0xa3a2 <remove_chain+0x32>
    a3be:	41 15       	cp	r20, r1
    a3c0:	51 05       	cpc	r21, r1
    a3c2:	61 05       	cpc	r22, r1
    a3c4:	71 05       	cpc	r23, r1
    a3c6:	41 f0       	breq	.+16     	; 0xa3d8 <remove_chain+0x68>
    a3c8:	0f ef       	ldi	r16, 0xFF	; 255
    a3ca:	1f ef       	ldi	r17, 0xFF	; 255
    a3cc:	98 01       	movw	r18, r16
    a3ce:	ce 01       	movw	r24, r28
    a3d0:	39 dc       	rcall	.-1934   	; 0x9c44 <put_fat>
    a3d2:	00 97       	sbiw	r24, 0x00	; 0
    a3d4:	09 f0       	breq	.+2      	; 0xa3d8 <remove_chain+0x68>
    a3d6:	4c c0       	rjmp	.+152    	; 0xa470 <remove_chain+0x100>
    a3d8:	b7 01       	movw	r22, r14
    a3da:	a6 01       	movw	r20, r12
    a3dc:	f5 01       	movw	r30, r10
    a3de:	80 81       	ld	r24, Z
    a3e0:	91 81       	ldd	r25, Z+1	; 0x01
    a3e2:	2b dd       	rcall	.-1450   	; 0x9e3a <get_fat.isra.10>
    a3e4:	2b 01       	movw	r4, r22
    a3e6:	3c 01       	movw	r6, r24
    a3e8:	61 15       	cp	r22, r1
    a3ea:	71 05       	cpc	r23, r1
    a3ec:	81 05       	cpc	r24, r1
    a3ee:	91 05       	cpc	r25, r1
    a3f0:	19 f4       	brne	.+6      	; 0xa3f8 <remove_chain+0x88>
    a3f2:	20 e0       	ldi	r18, 0x00	; 0
    a3f4:	90 e0       	ldi	r25, 0x00	; 0
    a3f6:	3d c0       	rjmp	.+122    	; 0xa472 <remove_chain+0x102>
    a3f8:	61 30       	cpi	r22, 0x01	; 1
    a3fa:	71 05       	cpc	r23, r1
    a3fc:	81 05       	cpc	r24, r1
    a3fe:	91 05       	cpc	r25, r1
    a400:	81 f2       	breq	.-96     	; 0xa3a2 <remove_chain+0x32>
    a402:	6f 3f       	cpi	r22, 0xFF	; 255
    a404:	7f 4f       	sbci	r23, 0xFF	; 255
    a406:	8f 4f       	sbci	r24, 0xFF	; 255
    a408:	9f 4f       	sbci	r25, 0xFF	; 255
    a40a:	81 f1       	breq	.+96     	; 0xa46c <remove_chain+0xfc>
    a40c:	00 e0       	ldi	r16, 0x00	; 0
    a40e:	10 e0       	ldi	r17, 0x00	; 0
    a410:	98 01       	movw	r18, r16
    a412:	b7 01       	movw	r22, r14
    a414:	a6 01       	movw	r20, r12
    a416:	ce 01       	movw	r24, r28
    a418:	15 dc       	rcall	.-2006   	; 0x9c44 <put_fat>
    a41a:	00 97       	sbiw	r24, 0x00	; 0
    a41c:	49 f5       	brne	.+82     	; 0xa470 <remove_chain+0x100>
    a41e:	89 89       	ldd	r24, Y+17	; 0x11
    a420:	9a 89       	ldd	r25, Y+18	; 0x12
    a422:	ab 89       	ldd	r26, Y+19	; 0x13
    a424:	bc 89       	ldd	r27, Y+20	; 0x14
    a426:	49 8d       	ldd	r20, Y+25	; 0x19
    a428:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a42a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a42c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a42e:	6a 01       	movw	r12, r20
    a430:	7b 01       	movw	r14, r22
    a432:	e2 e0       	ldi	r30, 0x02	; 2
    a434:	ce 1a       	sub	r12, r30
    a436:	d1 08       	sbc	r13, r1
    a438:	e1 08       	sbc	r14, r1
    a43a:	f1 08       	sbc	r15, r1
    a43c:	8c 15       	cp	r24, r12
    a43e:	9d 05       	cpc	r25, r13
    a440:	ae 05       	cpc	r26, r14
    a442:	bf 05       	cpc	r27, r15
    a444:	50 f4       	brcc	.+20     	; 0xa45a <remove_chain+0xea>
    a446:	01 96       	adiw	r24, 0x01	; 1
    a448:	a1 1d       	adc	r26, r1
    a44a:	b1 1d       	adc	r27, r1
    a44c:	89 8b       	std	Y+17, r24	; 0x11
    a44e:	9a 8b       	std	Y+18, r25	; 0x12
    a450:	ab 8b       	std	Y+19, r26	; 0x13
    a452:	bc 8b       	std	Y+20, r27	; 0x14
    a454:	8c 81       	ldd	r24, Y+4	; 0x04
    a456:	81 60       	ori	r24, 0x01	; 1
    a458:	8c 83       	std	Y+4, r24	; 0x04
    a45a:	73 01       	movw	r14, r6
    a45c:	62 01       	movw	r12, r4
    a45e:	44 16       	cp	r4, r20
    a460:	55 06       	cpc	r5, r21
    a462:	66 06       	cpc	r6, r22
    a464:	77 06       	cpc	r7, r23
    a466:	08 f4       	brcc	.+2      	; 0xa46a <remove_chain+0xfa>
    a468:	b7 cf       	rjmp	.-146    	; 0xa3d8 <remove_chain+0x68>
    a46a:	c3 cf       	rjmp	.-122    	; 0xa3f2 <remove_chain+0x82>
    a46c:	21 e0       	ldi	r18, 0x01	; 1
    a46e:	c2 cf       	rjmp	.-124    	; 0xa3f4 <remove_chain+0x84>
    a470:	28 2f       	mov	r18, r24
    a472:	82 2f       	mov	r24, r18
    a474:	df 91       	pop	r29
    a476:	cf 91       	pop	r28
    a478:	1f 91       	pop	r17
    a47a:	0f 91       	pop	r16
    a47c:	ff 90       	pop	r15
    a47e:	ef 90       	pop	r14
    a480:	df 90       	pop	r13
    a482:	cf 90       	pop	r12
    a484:	bf 90       	pop	r11
    a486:	af 90       	pop	r10
    a488:	7f 90       	pop	r7
    a48a:	6f 90       	pop	r6
    a48c:	5f 90       	pop	r5
    a48e:	4f 90       	pop	r4
    a490:	08 95       	ret

0000a492 <dir_next>:
    a492:	4f 92       	push	r4
    a494:	5f 92       	push	r5
    a496:	6f 92       	push	r6
    a498:	7f 92       	push	r7
    a49a:	af 92       	push	r10
    a49c:	bf 92       	push	r11
    a49e:	cf 92       	push	r12
    a4a0:	df 92       	push	r13
    a4a2:	ef 92       	push	r14
    a4a4:	ff 92       	push	r15
    a4a6:	0f 93       	push	r16
    a4a8:	1f 93       	push	r17
    a4aa:	cf 93       	push	r28
    a4ac:	df 93       	push	r29
    a4ae:	ec 01       	movw	r28, r24
    a4b0:	08 81       	ld	r16, Y
    a4b2:	19 81       	ldd	r17, Y+1	; 0x01
    a4b4:	ce 84       	ldd	r12, Y+14	; 0x0e
    a4b6:	df 84       	ldd	r13, Y+15	; 0x0f
    a4b8:	e8 88       	ldd	r14, Y+16	; 0x10
    a4ba:	f9 88       	ldd	r15, Y+17	; 0x11
    a4bc:	80 e2       	ldi	r24, 0x20	; 32
    a4be:	c8 0e       	add	r12, r24
    a4c0:	d1 1c       	adc	r13, r1
    a4c2:	e1 1c       	adc	r14, r1
    a4c4:	f1 1c       	adc	r15, r1
    a4c6:	c1 14       	cp	r12, r1
    a4c8:	d1 04       	cpc	r13, r1
    a4ca:	e0 e2       	ldi	r30, 0x20	; 32
    a4cc:	ee 06       	cpc	r14, r30
    a4ce:	f1 04       	cpc	r15, r1
    a4d0:	20 f0       	brcs	.+8      	; 0xa4da <dir_next+0x48>
    a4d2:	1e 8a       	std	Y+22, r1	; 0x16
    a4d4:	1f 8a       	std	Y+23, r1	; 0x17
    a4d6:	18 8e       	std	Y+24, r1	; 0x18
    a4d8:	19 8e       	std	Y+25, r1	; 0x19
    a4da:	8e 89       	ldd	r24, Y+22	; 0x16
    a4dc:	9f 89       	ldd	r25, Y+23	; 0x17
    a4de:	a8 8d       	ldd	r26, Y+24	; 0x18
    a4e0:	b9 8d       	ldd	r27, Y+25	; 0x19
    a4e2:	00 97       	sbiw	r24, 0x00	; 0
    a4e4:	a1 05       	cpc	r26, r1
    a4e6:	b1 05       	cpc	r27, r1
    a4e8:	09 f4       	brne	.+2      	; 0xa4ec <dir_next+0x5a>
    a4ea:	a7 c0       	rjmp	.+334    	; 0xa63a <dir_next+0x1a8>
    a4ec:	5b 01       	movw	r10, r22
    a4ee:	b7 01       	movw	r22, r14
    a4f0:	a6 01       	movw	r20, r12
    a4f2:	51 70       	andi	r21, 0x01	; 1
    a4f4:	66 27       	eor	r22, r22
    a4f6:	77 27       	eor	r23, r23
    a4f8:	45 2b       	or	r20, r21
    a4fa:	46 2b       	or	r20, r22
    a4fc:	47 2b       	or	r20, r23
    a4fe:	09 f0       	breq	.+2      	; 0xa502 <dir_next+0x70>
    a500:	8d c0       	rjmp	.+282    	; 0xa61c <dir_next+0x18a>
    a502:	01 96       	adiw	r24, 0x01	; 1
    a504:	a1 1d       	adc	r26, r1
    a506:	b1 1d       	adc	r27, r1
    a508:	8e 8b       	std	Y+22, r24	; 0x16
    a50a:	9f 8b       	std	Y+23, r25	; 0x17
    a50c:	a8 8f       	std	Y+24, r26	; 0x18
    a50e:	b9 8f       	std	Y+25, r27	; 0x19
    a510:	4a 89       	ldd	r20, Y+18	; 0x12
    a512:	5b 89       	ldd	r21, Y+19	; 0x13
    a514:	6c 89       	ldd	r22, Y+20	; 0x14
    a516:	7d 89       	ldd	r23, Y+21	; 0x15
    a518:	f8 01       	movw	r30, r16
    a51a:	41 15       	cp	r20, r1
    a51c:	51 05       	cpc	r21, r1
    a51e:	61 05       	cpc	r22, r1
    a520:	71 05       	cpc	r23, r1
    a522:	c1 f4       	brne	.+48     	; 0xa554 <dir_next+0xc2>
    a524:	87 81       	ldd	r24, Z+7	; 0x07
    a526:	90 85       	ldd	r25, Z+8	; 0x08
    a528:	a0 e0       	ldi	r26, 0x00	; 0
    a52a:	b0 e0       	ldi	r27, 0x00	; 0
    a52c:	b7 01       	movw	r22, r14
    a52e:	a6 01       	movw	r20, r12
    a530:	35 e0       	ldi	r19, 0x05	; 5
    a532:	76 95       	lsr	r23
    a534:	67 95       	ror	r22
    a536:	57 95       	ror	r21
    a538:	47 95       	ror	r20
    a53a:	3a 95       	dec	r19
    a53c:	d1 f7       	brne	.-12     	; 0xa532 <dir_next+0xa0>
    a53e:	48 17       	cp	r20, r24
    a540:	59 07       	cpc	r21, r25
    a542:	6a 07       	cpc	r22, r26
    a544:	7b 07       	cpc	r23, r27
    a546:	08 f4       	brcc	.+2      	; 0xa54a <dir_next+0xb8>
    a548:	69 c0       	rjmp	.+210    	; 0xa61c <dir_next+0x18a>
    a54a:	1e 8a       	std	Y+22, r1	; 0x16
    a54c:	1f 8a       	std	Y+23, r1	; 0x17
    a54e:	18 8e       	std	Y+24, r1	; 0x18
    a550:	19 8e       	std	Y+25, r1	; 0x19
    a552:	73 c0       	rjmp	.+230    	; 0xa63a <dir_next+0x1a8>
    a554:	81 85       	ldd	r24, Z+9	; 0x09
    a556:	92 85       	ldd	r25, Z+10	; 0x0a
    a558:	01 97       	sbiw	r24, 0x01	; 1
    a55a:	a0 e0       	ldi	r26, 0x00	; 0
    a55c:	b0 e0       	ldi	r27, 0x00	; 0
    a55e:	26 01       	movw	r4, r12
    a560:	37 01       	movw	r6, r14
    a562:	29 e0       	ldi	r18, 0x09	; 9
    a564:	76 94       	lsr	r7
    a566:	67 94       	ror	r6
    a568:	57 94       	ror	r5
    a56a:	47 94       	ror	r4
    a56c:	2a 95       	dec	r18
    a56e:	d1 f7       	brne	.-12     	; 0xa564 <dir_next+0xd2>
    a570:	84 21       	and	r24, r4
    a572:	95 21       	and	r25, r5
    a574:	a6 21       	and	r26, r6
    a576:	b7 21       	and	r27, r7
    a578:	89 2b       	or	r24, r25
    a57a:	8a 2b       	or	r24, r26
    a57c:	8b 2b       	or	r24, r27
    a57e:	09 f0       	breq	.+2      	; 0xa582 <dir_next+0xf0>
    a580:	4d c0       	rjmp	.+154    	; 0xa61c <dir_next+0x18a>
    a582:	c8 01       	movw	r24, r16
    a584:	5a dc       	rcall	.-1868   	; 0x9e3a <get_fat.isra.10>
    a586:	2b 01       	movw	r4, r22
    a588:	3c 01       	movw	r6, r24
    a58a:	62 30       	cpi	r22, 0x02	; 2
    a58c:	71 05       	cpc	r23, r1
    a58e:	81 05       	cpc	r24, r1
    a590:	91 05       	cpc	r25, r1
    a592:	18 f4       	brcc	.+6      	; 0xa59a <dir_next+0x108>
    a594:	82 e0       	ldi	r24, 0x02	; 2
    a596:	90 e0       	ldi	r25, 0x00	; 0
    a598:	55 c0       	rjmp	.+170    	; 0xa644 <dir_next+0x1b2>
    a59a:	8f ef       	ldi	r24, 0xFF	; 255
    a59c:	48 16       	cp	r4, r24
    a59e:	58 06       	cpc	r5, r24
    a5a0:	68 06       	cpc	r6, r24
    a5a2:	78 06       	cpc	r7, r24
    a5a4:	19 f4       	brne	.+6      	; 0xa5ac <dir_next+0x11a>
    a5a6:	81 e0       	ldi	r24, 0x01	; 1
    a5a8:	90 e0       	ldi	r25, 0x00	; 0
    a5aa:	4c c0       	rjmp	.+152    	; 0xa644 <dir_next+0x1b2>
    a5ac:	f8 01       	movw	r30, r16
    a5ae:	81 8d       	ldd	r24, Z+25	; 0x19
    a5b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    a5b2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a5b4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a5b6:	48 16       	cp	r4, r24
    a5b8:	59 06       	cpc	r5, r25
    a5ba:	6a 06       	cpc	r6, r26
    a5bc:	7b 06       	cpc	r7, r27
    a5be:	08 f1       	brcs	.+66     	; 0xa602 <dir_next+0x170>
    a5c0:	ab 28       	or	r10, r11
    a5c2:	19 f2       	breq	.-122    	; 0xa54a <dir_next+0xb8>
    a5c4:	4a 89       	ldd	r20, Y+18	; 0x12
    a5c6:	5b 89       	ldd	r21, Y+19	; 0x13
    a5c8:	6c 89       	ldd	r22, Y+20	; 0x14
    a5ca:	7d 89       	ldd	r23, Y+21	; 0x15
    a5cc:	ce 01       	movw	r24, r28
    a5ce:	aa dd       	rcall	.-1196   	; 0xa124 <create_chain>
    a5d0:	2b 01       	movw	r4, r22
    a5d2:	3c 01       	movw	r6, r24
    a5d4:	61 15       	cp	r22, r1
    a5d6:	71 05       	cpc	r23, r1
    a5d8:	81 05       	cpc	r24, r1
    a5da:	91 05       	cpc	r25, r1
    a5dc:	89 f1       	breq	.+98     	; 0xa640 <dir_next+0x1ae>
    a5de:	61 30       	cpi	r22, 0x01	; 1
    a5e0:	71 05       	cpc	r23, r1
    a5e2:	81 05       	cpc	r24, r1
    a5e4:	91 05       	cpc	r25, r1
    a5e6:	b1 f2       	breq	.-84     	; 0xa594 <dir_next+0x102>
    a5e8:	8f ef       	ldi	r24, 0xFF	; 255
    a5ea:	48 16       	cp	r4, r24
    a5ec:	58 06       	cpc	r5, r24
    a5ee:	68 06       	cpc	r6, r24
    a5f0:	78 06       	cpc	r7, r24
    a5f2:	c9 f2       	breq	.-78     	; 0xa5a6 <dir_next+0x114>
    a5f4:	b3 01       	movw	r22, r6
    a5f6:	a2 01       	movw	r20, r4
    a5f8:	c8 01       	movw	r24, r16
    a5fa:	0e 94 a5 4a 	call	0x954a	; 0x954a <dir_clear>
    a5fe:	89 2b       	or	r24, r25
    a600:	91 f6       	brne	.-92     	; 0xa5a6 <dir_next+0x114>
    a602:	4a 8a       	std	Y+18, r4	; 0x12
    a604:	5b 8a       	std	Y+19, r5	; 0x13
    a606:	6c 8a       	std	Y+20, r6	; 0x14
    a608:	7d 8a       	std	Y+21, r7	; 0x15
    a60a:	b3 01       	movw	r22, r6
    a60c:	a2 01       	movw	r20, r4
    a60e:	c8 01       	movw	r24, r16
    a610:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    a614:	6e 8b       	std	Y+22, r22	; 0x16
    a616:	7f 8b       	std	Y+23, r23	; 0x17
    a618:	88 8f       	std	Y+24, r24	; 0x18
    a61a:	99 8f       	std	Y+25, r25	; 0x19
    a61c:	ce 86       	std	Y+14, r12	; 0x0e
    a61e:	df 86       	std	Y+15, r13	; 0x0f
    a620:	e8 8a       	std	Y+16, r14	; 0x10
    a622:	f9 8a       	std	Y+17, r15	; 0x11
    a624:	0b 5c       	subi	r16, 0xCB	; 203
    a626:	1f 4f       	sbci	r17, 0xFF	; 255
    a628:	e1 e0       	ldi	r30, 0x01	; 1
    a62a:	de 22       	and	r13, r30
    a62c:	c0 0e       	add	r12, r16
    a62e:	d1 1e       	adc	r13, r17
    a630:	db 8e       	std	Y+27, r13	; 0x1b
    a632:	ca 8e       	std	Y+26, r12	; 0x1a
    a634:	80 e0       	ldi	r24, 0x00	; 0
    a636:	90 e0       	ldi	r25, 0x00	; 0
    a638:	05 c0       	rjmp	.+10     	; 0xa644 <dir_next+0x1b2>
    a63a:	84 e0       	ldi	r24, 0x04	; 4
    a63c:	90 e0       	ldi	r25, 0x00	; 0
    a63e:	02 c0       	rjmp	.+4      	; 0xa644 <dir_next+0x1b2>
    a640:	87 e0       	ldi	r24, 0x07	; 7
    a642:	90 e0       	ldi	r25, 0x00	; 0
    a644:	df 91       	pop	r29
    a646:	cf 91       	pop	r28
    a648:	1f 91       	pop	r17
    a64a:	0f 91       	pop	r16
    a64c:	ff 90       	pop	r15
    a64e:	ef 90       	pop	r14
    a650:	df 90       	pop	r13
    a652:	cf 90       	pop	r12
    a654:	bf 90       	pop	r11
    a656:	af 90       	pop	r10
    a658:	7f 90       	pop	r7
    a65a:	6f 90       	pop	r6
    a65c:	5f 90       	pop	r5
    a65e:	4f 90       	pop	r4
    a660:	08 95       	ret

0000a662 <dir_alloc>:
    a662:	a0 e0       	ldi	r26, 0x00	; 0
    a664:	b0 e0       	ldi	r27, 0x00	; 0
    a666:	e7 e3       	ldi	r30, 0x37	; 55
    a668:	f3 e5       	ldi	r31, 0x53	; 83
    a66a:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    a66e:	ec 01       	movw	r28, r24
    a670:	6b 01       	movw	r12, r22
    a672:	e8 80       	ld	r14, Y
    a674:	f9 80       	ldd	r15, Y+1	; 0x01
    a676:	40 e0       	ldi	r20, 0x00	; 0
    a678:	50 e0       	ldi	r21, 0x00	; 0
    a67a:	ba 01       	movw	r22, r20
    a67c:	92 dc       	rcall	.-1756   	; 0x9fa2 <dir_sdi>
    a67e:	00 97       	sbiw	r24, 0x00	; 0
    a680:	f9 f4       	brne	.+62     	; 0xa6c0 <dir_alloc+0x5e>
    a682:	00 e0       	ldi	r16, 0x00	; 0
    a684:	10 e0       	ldi	r17, 0x00	; 0
    a686:	4e 89       	ldd	r20, Y+22	; 0x16
    a688:	5f 89       	ldd	r21, Y+23	; 0x17
    a68a:	68 8d       	ldd	r22, Y+24	; 0x18
    a68c:	79 8d       	ldd	r23, Y+25	; 0x19
    a68e:	c7 01       	movw	r24, r14
    a690:	04 d8       	rcall	.-4088   	; 0x969a <move_window>
    a692:	00 97       	sbiw	r24, 0x00	; 0
    a694:	a9 f4       	brne	.+42     	; 0xa6c0 <dir_alloc+0x5e>
    a696:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a698:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a69a:	20 81       	ld	r18, Z
    a69c:	25 3e       	cpi	r18, 0xE5	; 229
    a69e:	11 f0       	breq	.+4      	; 0xa6a4 <dir_alloc+0x42>
    a6a0:	21 11       	cpse	r18, r1
    a6a2:	06 c0       	rjmp	.+12     	; 0xa6b0 <dir_alloc+0x4e>
    a6a4:	0f 5f       	subi	r16, 0xFF	; 255
    a6a6:	1f 4f       	sbci	r17, 0xFF	; 255
    a6a8:	0c 15       	cp	r16, r12
    a6aa:	1d 05       	cpc	r17, r13
    a6ac:	19 f4       	brne	.+6      	; 0xa6b4 <dir_alloc+0x52>
    a6ae:	0d c0       	rjmp	.+26     	; 0xa6ca <dir_alloc+0x68>
    a6b0:	00 e0       	ldi	r16, 0x00	; 0
    a6b2:	10 e0       	ldi	r17, 0x00	; 0
    a6b4:	61 e0       	ldi	r22, 0x01	; 1
    a6b6:	70 e0       	ldi	r23, 0x00	; 0
    a6b8:	ce 01       	movw	r24, r28
    a6ba:	eb de       	rcall	.-554    	; 0xa492 <dir_next>
    a6bc:	00 97       	sbiw	r24, 0x00	; 0
    a6be:	19 f3       	breq	.-58     	; 0xa686 <dir_alloc+0x24>
    a6c0:	84 30       	cpi	r24, 0x04	; 4
    a6c2:	91 05       	cpc	r25, r1
    a6c4:	11 f4       	brne	.+4      	; 0xa6ca <dir_alloc+0x68>
    a6c6:	87 e0       	ldi	r24, 0x07	; 7
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	cd b7       	in	r28, 0x3d	; 61
    a6cc:	de b7       	in	r29, 0x3e	; 62
    a6ce:	e8 e0       	ldi	r30, 0x08	; 8
    a6d0:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000a6d4 <dir_read>:
    a6d4:	a0 e0       	ldi	r26, 0x00	; 0
    a6d6:	b0 e0       	ldi	r27, 0x00	; 0
    a6d8:	e0 e7       	ldi	r30, 0x70	; 112
    a6da:	f3 e5       	ldi	r31, 0x53	; 83
    a6dc:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
    a6e0:	ec 01       	movw	r28, r24
    a6e2:	7b 01       	movw	r14, r22
    a6e4:	a8 80       	ld	r10, Y
    a6e6:	b9 80       	ldd	r11, Y+1	; 0x01
    a6e8:	dd 24       	eor	r13, r13
    a6ea:	da 94       	dec	r13
    a6ec:	1f ef       	ldi	r17, 0xFF	; 255
    a6ee:	84 e0       	ldi	r24, 0x04	; 4
    a6f0:	90 e0       	ldi	r25, 0x00	; 0
    a6f2:	fd e0       	ldi	r31, 0x0D	; 13
    a6f4:	cf 2e       	mov	r12, r31
    a6f6:	4e 89       	ldd	r20, Y+22	; 0x16
    a6f8:	5f 89       	ldd	r21, Y+23	; 0x17
    a6fa:	68 8d       	ldd	r22, Y+24	; 0x18
    a6fc:	79 8d       	ldd	r23, Y+25	; 0x19
    a6fe:	41 15       	cp	r20, r1
    a700:	51 05       	cpc	r21, r1
    a702:	61 05       	cpc	r22, r1
    a704:	71 05       	cpc	r23, r1
    a706:	09 f4       	brne	.+2      	; 0xa70a <dir_read+0x36>
    a708:	9a c0       	rjmp	.+308    	; 0xa83e <dir_read+0x16a>
    a70a:	c5 01       	movw	r24, r10
    a70c:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    a710:	00 97       	sbiw	r24, 0x00	; 0
    a712:	09 f0       	breq	.+2      	; 0xa716 <dir_read+0x42>
    a714:	96 c0       	rjmp	.+300    	; 0xa842 <dir_read+0x16e>
    a716:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a718:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a71a:	f4 01       	movw	r30, r8
    a71c:	00 81       	ld	r16, Z
    a71e:	00 23       	and	r16, r16
    a720:	09 f4       	brne	.+2      	; 0xa724 <dir_read+0x50>
    a722:	97 c0       	rjmp	.+302    	; 0xa852 <dir_read+0x17e>
    a724:	83 85       	ldd	r24, Z+11	; 0x0b
    a726:	8f 73       	andi	r24, 0x3F	; 63
    a728:	8c 83       	std	Y+4, r24	; 0x04
    a72a:	05 3e       	cpi	r16, 0xE5	; 229
    a72c:	09 f4       	brne	.+2      	; 0xa730 <dir_read+0x5c>
    a72e:	7e c0       	rjmp	.+252    	; 0xa82c <dir_read+0x158>
    a730:	0e 32       	cpi	r16, 0x2E	; 46
    a732:	09 f4       	brne	.+2      	; 0xa736 <dir_read+0x62>
    a734:	7b c0       	rjmp	.+246    	; 0xa82c <dir_read+0x158>
    a736:	21 e0       	ldi	r18, 0x01	; 1
    a738:	30 e0       	ldi	r19, 0x00	; 0
    a73a:	98 2f       	mov	r25, r24
    a73c:	9f 71       	andi	r25, 0x1F	; 31
    a73e:	98 30       	cpi	r25, 0x08	; 8
    a740:	11 f0       	breq	.+4      	; 0xa746 <dir_read+0x72>
    a742:	20 e0       	ldi	r18, 0x00	; 0
    a744:	30 e0       	ldi	r19, 0x00	; 0
    a746:	2e 15       	cp	r18, r14
    a748:	3f 05       	cpc	r19, r15
    a74a:	09 f0       	breq	.+2      	; 0xa74e <dir_read+0x7a>
    a74c:	6f c0       	rjmp	.+222    	; 0xa82c <dir_read+0x158>
    a74e:	8f 30       	cpi	r24, 0x0F	; 15
    a750:	09 f0       	breq	.+2      	; 0xa754 <dir_read+0x80>
    a752:	5c c0       	rjmp	.+184    	; 0xa80c <dir_read+0x138>
    a754:	06 ff       	sbrs	r16, 6
    a756:	0c c0       	rjmp	.+24     	; 0xa770 <dir_read+0x9c>
    a758:	f4 01       	movw	r30, r8
    a75a:	85 85       	ldd	r24, Z+13	; 0x0d
    a75c:	0f 7b       	andi	r16, 0xBF	; 191
    a75e:	4e 85       	ldd	r20, Y+14	; 0x0e
    a760:	5f 85       	ldd	r21, Y+15	; 0x0f
    a762:	68 89       	ldd	r22, Y+16	; 0x10
    a764:	79 89       	ldd	r23, Y+17	; 0x11
    a766:	48 a7       	std	Y+40, r20	; 0x28
    a768:	59 a7       	std	Y+41, r21	; 0x29
    a76a:	6a a7       	std	Y+42, r22	; 0x2a
    a76c:	7b a7       	std	Y+43, r23	; 0x2b
    a76e:	03 c0       	rjmp	.+6      	; 0xa776 <dir_read+0xa2>
    a770:	10 13       	cpse	r17, r16
    a772:	5c c0       	rjmp	.+184    	; 0xa82c <dir_read+0x158>
    a774:	8d 2d       	mov	r24, r13
    a776:	f4 01       	movw	r30, r8
    a778:	d5 84       	ldd	r13, Z+13	; 0x0d
    a77a:	d8 12       	cpse	r13, r24
    a77c:	56 c0       	rjmp	.+172    	; 0xa82a <dir_read+0x156>
    a77e:	82 8d       	ldd	r24, Z+26	; 0x1a
    a780:	93 8d       	ldd	r25, Z+27	; 0x1b
    a782:	89 2b       	or	r24, r25
    a784:	09 f0       	breq	.+2      	; 0xa788 <dir_read+0xb4>
    a786:	52 c0       	rjmp	.+164    	; 0xa82c <dir_read+0x158>
    a788:	f5 01       	movw	r30, r10
    a78a:	63 85       	ldd	r22, Z+11	; 0x0b
    a78c:	74 85       	ldd	r23, Z+12	; 0x0c
    a78e:	f4 01       	movw	r30, r8
    a790:	80 81       	ld	r24, Z
    a792:	90 e0       	ldi	r25, 0x00	; 0
    a794:	8f 7b       	andi	r24, 0xBF	; 191
    a796:	01 97       	sbiw	r24, 0x01	; 1
    a798:	c8 9e       	mul	r12, r24
    a79a:	90 01       	movw	r18, r0
    a79c:	c9 9e       	mul	r12, r25
    a79e:	30 0d       	add	r19, r0
    a7a0:	11 24       	eor	r1, r1
    a7a2:	ad eb       	ldi	r26, 0xBD	; 189
    a7a4:	b4 e0       	ldi	r27, 0x04	; 4
    a7a6:	81 e0       	ldi	r24, 0x01	; 1
    a7a8:	90 e0       	ldi	r25, 0x00	; 0
    a7aa:	4d 91       	ld	r20, X+
    a7ac:	f4 01       	movw	r30, r8
    a7ae:	e4 0f       	add	r30, r20
    a7b0:	f1 1d       	adc	r31, r1
    a7b2:	40 81       	ld	r20, Z
    a7b4:	51 81       	ldd	r21, Z+1	; 0x01
    a7b6:	00 97       	sbiw	r24, 0x00	; 0
    a7b8:	81 f0       	breq	.+32     	; 0xa7da <dir_read+0x106>
    a7ba:	2f 3f       	cpi	r18, 0xFF	; 255
    a7bc:	31 05       	cpc	r19, r1
    a7be:	09 f0       	breq	.+2      	; 0xa7c2 <dir_read+0xee>
    a7c0:	a8 f5       	brcc	.+106    	; 0xa82c <dir_read+0x158>
    a7c2:	c9 01       	movw	r24, r18
    a7c4:	88 0f       	add	r24, r24
    a7c6:	99 1f       	adc	r25, r25
    a7c8:	86 0f       	add	r24, r22
    a7ca:	97 1f       	adc	r25, r23
    a7cc:	fc 01       	movw	r30, r24
    a7ce:	51 83       	std	Z+1, r21	; 0x01
    a7d0:	40 83       	st	Z, r20
    a7d2:	ca 01       	movw	r24, r20
    a7d4:	2f 5f       	subi	r18, 0xFF	; 255
    a7d6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7d8:	03 c0       	rjmp	.+6      	; 0xa7e0 <dir_read+0x10c>
    a7da:	4f 3f       	cpi	r20, 0xFF	; 255
    a7dc:	5f 4f       	sbci	r21, 0xFF	; 255
    a7de:	31 f5       	brne	.+76     	; 0xa82c <dir_read+0x158>
    a7e0:	44 e0       	ldi	r20, 0x04	; 4
    a7e2:	aa 3c       	cpi	r26, 0xCA	; 202
    a7e4:	b4 07       	cpc	r27, r20
    a7e6:	09 f7       	brne	.-62     	; 0xa7aa <dir_read+0xd6>
    a7e8:	f4 01       	movw	r30, r8
    a7ea:	40 81       	ld	r20, Z
    a7ec:	46 ff       	sbrs	r20, 6
    a7ee:	2e c0       	rjmp	.+92     	; 0xa84c <dir_read+0x178>
    a7f0:	89 2b       	or	r24, r25
    a7f2:	61 f1       	breq	.+88     	; 0xa84c <dir_read+0x178>
    a7f4:	2f 3f       	cpi	r18, 0xFF	; 255
    a7f6:	31 05       	cpc	r19, r1
    a7f8:	09 f0       	breq	.+2      	; 0xa7fc <dir_read+0x128>
    a7fa:	c0 f4       	brcc	.+48     	; 0xa82c <dir_read+0x158>
    a7fc:	22 0f       	add	r18, r18
    a7fe:	33 1f       	adc	r19, r19
    a800:	fb 01       	movw	r30, r22
    a802:	e2 0f       	add	r30, r18
    a804:	f3 1f       	adc	r31, r19
    a806:	11 82       	std	Z+1, r1	; 0x01
    a808:	10 82       	st	Z, r1
    a80a:	20 c0       	rjmp	.+64     	; 0xa84c <dir_read+0x178>
    a80c:	11 11       	cpse	r17, r1
    a80e:	05 c0       	rjmp	.+10     	; 0xa81a <dir_read+0x146>
    a810:	c4 01       	movw	r24, r8
    a812:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <sum_sfn>
    a816:	d8 16       	cp	r13, r24
    a818:	f9 f0       	breq	.+62     	; 0xa858 <dir_read+0x184>
    a81a:	8f ef       	ldi	r24, 0xFF	; 255
    a81c:	9f ef       	ldi	r25, 0xFF	; 255
    a81e:	dc 01       	movw	r26, r24
    a820:	88 a7       	std	Y+40, r24	; 0x28
    a822:	99 a7       	std	Y+41, r25	; 0x29
    a824:	aa a7       	std	Y+42, r26	; 0x2a
    a826:	bb a7       	std	Y+43, r27	; 0x2b
    a828:	17 c0       	rjmp	.+46     	; 0xa858 <dir_read+0x184>
    a82a:	d8 2e       	mov	r13, r24
    a82c:	1f ef       	ldi	r17, 0xFF	; 255
    a82e:	60 e0       	ldi	r22, 0x00	; 0
    a830:	70 e0       	ldi	r23, 0x00	; 0
    a832:	ce 01       	movw	r24, r28
    a834:	2e de       	rcall	.-932    	; 0xa492 <dir_next>
    a836:	00 97       	sbiw	r24, 0x00	; 0
    a838:	09 f4       	brne	.+2      	; 0xa83c <dir_read+0x168>
    a83a:	5d cf       	rjmp	.-326    	; 0xa6f6 <dir_read+0x22>
    a83c:	02 c0       	rjmp	.+4      	; 0xa842 <dir_read+0x16e>
    a83e:	00 97       	sbiw	r24, 0x00	; 0
    a840:	59 f0       	breq	.+22     	; 0xa858 <dir_read+0x184>
    a842:	1e 8a       	std	Y+22, r1	; 0x16
    a844:	1f 8a       	std	Y+23, r1	; 0x17
    a846:	18 8e       	std	Y+24, r1	; 0x18
    a848:	19 8e       	std	Y+25, r1	; 0x19
    a84a:	08 c0       	rjmp	.+16     	; 0xa85c <dir_read+0x188>
    a84c:	1f ef       	ldi	r17, 0xFF	; 255
    a84e:	10 0f       	add	r17, r16
    a850:	ee cf       	rjmp	.-36     	; 0xa82e <dir_read+0x15a>
    a852:	84 e0       	ldi	r24, 0x04	; 4
    a854:	90 e0       	ldi	r25, 0x00	; 0
    a856:	f5 cf       	rjmp	.-22     	; 0xa842 <dir_read+0x16e>
    a858:	80 e0       	ldi	r24, 0x00	; 0
    a85a:	90 e0       	ldi	r25, 0x00	; 0
    a85c:	cd b7       	in	r28, 0x3d	; 61
    a85e:	de b7       	in	r29, 0x3e	; 62
    a860:	ec e0       	ldi	r30, 0x0C	; 12
    a862:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

0000a866 <dir_remove>:
    a866:	a0 e0       	ldi	r26, 0x00	; 0
    a868:	b0 e0       	ldi	r27, 0x00	; 0
    a86a:	e9 e3       	ldi	r30, 0x39	; 57
    a86c:	f4 e5       	ldi	r31, 0x54	; 84
    a86e:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
    a872:	ec 01       	movw	r28, r24
    a874:	08 81       	ld	r16, Y
    a876:	19 81       	ldd	r17, Y+1	; 0x01
    a878:	ce 84       	ldd	r12, Y+14	; 0x0e
    a87a:	df 84       	ldd	r13, Y+15	; 0x0f
    a87c:	e8 88       	ldd	r14, Y+16	; 0x10
    a87e:	f9 88       	ldd	r15, Y+17	; 0x11
    a880:	48 a5       	ldd	r20, Y+40	; 0x28
    a882:	59 a5       	ldd	r21, Y+41	; 0x29
    a884:	6a a5       	ldd	r22, Y+42	; 0x2a
    a886:	7b a5       	ldd	r23, Y+43	; 0x2b
    a888:	4f 3f       	cpi	r20, 0xFF	; 255
    a88a:	8f ef       	ldi	r24, 0xFF	; 255
    a88c:	58 07       	cpc	r21, r24
    a88e:	68 07       	cpc	r22, r24
    a890:	78 07       	cpc	r23, r24
    a892:	29 f4       	brne	.+10     	; 0xa89e <dir_remove+0x38>
    a894:	85 ee       	ldi	r24, 0xE5	; 229
    a896:	b8 2e       	mov	r11, r24
    a898:	aa 24       	eor	r10, r10
    a89a:	a3 94       	inc	r10
    a89c:	19 c0       	rjmp	.+50     	; 0xa8d0 <dir_remove+0x6a>
    a89e:	ce 01       	movw	r24, r28
    a8a0:	80 db       	rcall	.-2304   	; 0x9fa2 <dir_sdi>
    a8a2:	00 97       	sbiw	r24, 0x00	; 0
    a8a4:	19 f5       	brne	.+70     	; 0xa8ec <dir_remove+0x86>
    a8a6:	f6 cf       	rjmp	.-20     	; 0xa894 <dir_remove+0x2e>
    a8a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a8aa:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a8ac:	b0 82       	st	Z, r11
    a8ae:	f8 01       	movw	r30, r16
    a8b0:	a3 82       	std	Z+3, r10	; 0x03
    a8b2:	4e 85       	ldd	r20, Y+14	; 0x0e
    a8b4:	5f 85       	ldd	r21, Y+15	; 0x0f
    a8b6:	68 89       	ldd	r22, Y+16	; 0x10
    a8b8:	79 89       	ldd	r23, Y+17	; 0x11
    a8ba:	4c 15       	cp	r20, r12
    a8bc:	5d 05       	cpc	r21, r13
    a8be:	6e 05       	cpc	r22, r14
    a8c0:	7f 05       	cpc	r23, r15
    a8c2:	a0 f4       	brcc	.+40     	; 0xa8ec <dir_remove+0x86>
    a8c4:	60 e0       	ldi	r22, 0x00	; 0
    a8c6:	70 e0       	ldi	r23, 0x00	; 0
    a8c8:	ce 01       	movw	r24, r28
    a8ca:	e3 dd       	rcall	.-1082   	; 0xa492 <dir_next>
    a8cc:	00 97       	sbiw	r24, 0x00	; 0
    a8ce:	49 f4       	brne	.+18     	; 0xa8e2 <dir_remove+0x7c>
    a8d0:	4e 89       	ldd	r20, Y+22	; 0x16
    a8d2:	5f 89       	ldd	r21, Y+23	; 0x17
    a8d4:	68 8d       	ldd	r22, Y+24	; 0x18
    a8d6:	79 8d       	ldd	r23, Y+25	; 0x19
    a8d8:	c8 01       	movw	r24, r16
    a8da:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    a8de:	00 97       	sbiw	r24, 0x00	; 0
    a8e0:	19 f3       	breq	.-58     	; 0xa8a8 <dir_remove+0x42>
    a8e2:	84 30       	cpi	r24, 0x04	; 4
    a8e4:	91 05       	cpc	r25, r1
    a8e6:	11 f4       	brne	.+4      	; 0xa8ec <dir_remove+0x86>
    a8e8:	82 e0       	ldi	r24, 0x02	; 2
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	cd b7       	in	r28, 0x3d	; 61
    a8ee:	de b7       	in	r29, 0x3e	; 62
    a8f0:	ea e0       	ldi	r30, 0x0A	; 10
    a8f2:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0000a8f6 <dir_find>:
    a8f6:	ac e0       	ldi	r26, 0x0C	; 12
    a8f8:	b0 e0       	ldi	r27, 0x00	; 0
    a8fa:	e1 e8       	ldi	r30, 0x81	; 129
    a8fc:	f4 e5       	ldi	r31, 0x54	; 84
    a8fe:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    a902:	9c 87       	std	Y+12, r25	; 0x0c
    a904:	8b 87       	std	Y+11, r24	; 0x0b
    a906:	fc 01       	movw	r30, r24
    a908:	01 90       	ld	r0, Z+
    a90a:	f0 81       	ld	r31, Z
    a90c:	e0 2d       	mov	r30, r0
    a90e:	fc 83       	std	Y+4, r31	; 0x04
    a910:	eb 83       	std	Y+3, r30	; 0x03
    a912:	40 e0       	ldi	r20, 0x00	; 0
    a914:	50 e0       	ldi	r21, 0x00	; 0
    a916:	ba 01       	movw	r22, r20
    a918:	44 db       	rcall	.-2424   	; 0x9fa2 <dir_sdi>
    a91a:	00 97       	sbiw	r24, 0x00	; 0
    a91c:	09 f0       	breq	.+2      	; 0xa920 <dir_find+0x2a>
    a91e:	e7 c0       	rjmp	.+462    	; 0xaaee <dir_find+0x1f8>
    a920:	8f ef       	ldi	r24, 0xFF	; 255
    a922:	9f ef       	ldi	r25, 0xFF	; 255
    a924:	dc 01       	movw	r26, r24
    a926:	eb 85       	ldd	r30, Y+11	; 0x0b
    a928:	fc 85       	ldd	r31, Y+12	; 0x0c
    a92a:	80 a7       	std	Z+40, r24	; 0x28
    a92c:	91 a7       	std	Z+41, r25	; 0x29
    a92e:	a2 a7       	std	Z+42, r26	; 0x2a
    a930:	b3 a7       	std	Z+43, r27	; 0x2b
    a932:	0f ef       	ldi	r16, 0xFF	; 255
    a934:	1f ef       	ldi	r17, 0xFF	; 255
    a936:	44 24       	eor	r4, r4
    a938:	4a 94       	dec	r4
    a93a:	54 2c       	mov	r5, r4
    a93c:	32 01       	movw	r6, r4
    a93e:	7c 96       	adiw	r30, 0x1c	; 28
    a940:	fa 87       	std	Y+10, r31	; 0x0a
    a942:	e9 87       	std	Y+9, r30	; 0x09
    a944:	eb 85       	ldd	r30, Y+11	; 0x0b
    a946:	fc 85       	ldd	r31, Y+12	; 0x0c
    a948:	46 89       	ldd	r20, Z+22	; 0x16
    a94a:	57 89       	ldd	r21, Z+23	; 0x17
    a94c:	60 8d       	ldd	r22, Z+24	; 0x18
    a94e:	71 8d       	ldd	r23, Z+25	; 0x19
    a950:	8b 81       	ldd	r24, Y+3	; 0x03
    a952:	9c 81       	ldd	r25, Y+4	; 0x04
    a954:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    a958:	00 97       	sbiw	r24, 0x00	; 0
    a95a:	09 f0       	breq	.+2      	; 0xa95e <dir_find+0x68>
    a95c:	c8 c0       	rjmp	.+400    	; 0xaaee <dir_find+0x1f8>
    a95e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a960:	fc 85       	ldd	r31, Y+12	; 0x0c
    a962:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a964:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a966:	f7 01       	movw	r30, r14
    a968:	d0 80       	ld	r13, Z
    a96a:	dd 20       	and	r13, r13
    a96c:	09 f4       	brne	.+2      	; 0xa970 <dir_find+0x7a>
    a96e:	c1 c0       	rjmp	.+386    	; 0xaaf2 <dir_find+0x1fc>
    a970:	93 85       	ldd	r25, Z+11	; 0x0b
    a972:	89 2f       	mov	r24, r25
    a974:	8f 73       	andi	r24, 0x3F	; 63
    a976:	eb 85       	ldd	r30, Y+11	; 0x0b
    a978:	fc 85       	ldd	r31, Y+12	; 0x0c
    a97a:	84 83       	std	Z+4, r24	; 0x04
    a97c:	f5 ee       	ldi	r31, 0xE5	; 229
    a97e:	df 16       	cp	r13, r31
    a980:	09 f4       	brne	.+2      	; 0xa984 <dir_find+0x8e>
    a982:	a6 c0       	rjmp	.+332    	; 0xaad0 <dir_find+0x1da>
    a984:	93 ff       	sbrs	r25, 3
    a986:	04 c0       	rjmp	.+8      	; 0xa990 <dir_find+0x9a>
    a988:	8f 30       	cpi	r24, 0x0F	; 15
    a98a:	09 f0       	breq	.+2      	; 0xa98e <dir_find+0x98>
    a98c:	a1 c0       	rjmp	.+322    	; 0xaad0 <dir_find+0x1da>
    a98e:	03 c0       	rjmp	.+6      	; 0xa996 <dir_find+0xa0>
    a990:	8f 30       	cpi	r24, 0x0F	; 15
    a992:	09 f0       	breq	.+2      	; 0xa996 <dir_find+0xa0>
    a994:	88 c0       	rjmp	.+272    	; 0xaaa6 <dir_find+0x1b0>
    a996:	eb 85       	ldd	r30, Y+11	; 0x0b
    a998:	fc 85       	ldd	r31, Y+12	; 0x0c
    a99a:	87 a1       	ldd	r24, Z+39	; 0x27
    a99c:	86 fd       	sbrc	r24, 6
    a99e:	9f c0       	rjmp	.+318    	; 0xaade <dir_find+0x1e8>
    a9a0:	d6 fe       	sbrs	r13, 6
    a9a2:	10 c0       	rjmp	.+32     	; 0xa9c4 <dir_find+0xce>
    a9a4:	f7 01       	movw	r30, r14
    a9a6:	05 85       	ldd	r16, Z+13	; 0x0d
    a9a8:	fd 2d       	mov	r31, r13
    a9aa:	ff 7b       	andi	r31, 0xBF	; 191
    a9ac:	df 2e       	mov	r13, r31
    a9ae:	eb 85       	ldd	r30, Y+11	; 0x0b
    a9b0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a9b2:	86 85       	ldd	r24, Z+14	; 0x0e
    a9b4:	97 85       	ldd	r25, Z+15	; 0x0f
    a9b6:	a0 89       	ldd	r26, Z+16	; 0x10
    a9b8:	b1 89       	ldd	r27, Z+17	; 0x11
    a9ba:	80 a7       	std	Z+40, r24	; 0x28
    a9bc:	91 a7       	std	Z+41, r25	; 0x29
    a9be:	a2 a7       	std	Z+42, r26	; 0x2a
    a9c0:	b3 a7       	std	Z+43, r27	; 0x2b
    a9c2:	02 c0       	rjmp	.+4      	; 0xa9c8 <dir_find+0xd2>
    a9c4:	1d 11       	cpse	r17, r13
    a9c6:	8a c0       	rjmp	.+276    	; 0xaadc <dir_find+0x1e6>
    a9c8:	f7 01       	movw	r30, r14
    a9ca:	c5 84       	ldd	r12, Z+13	; 0x0d
    a9cc:	c0 12       	cpse	r12, r16
    a9ce:	86 c0       	rjmp	.+268    	; 0xaadc <dir_find+0x1e6>
    a9d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    a9d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    a9d4:	89 2b       	or	r24, r25
    a9d6:	09 f0       	breq	.+2      	; 0xa9da <dir_find+0xe4>
    a9d8:	91 c0       	rjmp	.+290    	; 0xaafc <dir_find+0x206>
    a9da:	eb 81       	ldd	r30, Y+3	; 0x03
    a9dc:	fc 81       	ldd	r31, Y+4	; 0x04
    a9de:	03 84       	ldd	r0, Z+11	; 0x0b
    a9e0:	f4 85       	ldd	r31, Z+12	; 0x0c
    a9e2:	e0 2d       	mov	r30, r0
    a9e4:	fe 83       	std	Y+6, r31	; 0x06
    a9e6:	ed 83       	std	Y+5, r30	; 0x05
    a9e8:	f7 01       	movw	r30, r14
    a9ea:	80 81       	ld	r24, Z
    a9ec:	8f 73       	andi	r24, 0x3F	; 63
    a9ee:	90 e0       	ldi	r25, 0x00	; 0
    a9f0:	01 97       	sbiw	r24, 0x01	; 1
    a9f2:	fd e0       	ldi	r31, 0x0D	; 13
    a9f4:	f8 9f       	mul	r31, r24
    a9f6:	80 01       	movw	r16, r0
    a9f8:	f9 9f       	mul	r31, r25
    a9fa:	10 0d       	add	r17, r0
    a9fc:	11 24       	eor	r1, r1
    a9fe:	2d eb       	ldi	r18, 0xBD	; 189
    aa00:	34 e0       	ldi	r19, 0x04	; 4
    aa02:	3a 83       	std	Y+2, r19	; 0x02
    aa04:	29 83       	std	Y+1, r18	; 0x01
    aa06:	81 e0       	ldi	r24, 0x01	; 1
    aa08:	90 e0       	ldi	r25, 0x00	; 0
    aa0a:	e9 81       	ldd	r30, Y+1	; 0x01
    aa0c:	fa 81       	ldd	r31, Y+2	; 0x02
    aa0e:	21 91       	ld	r18, Z+
    aa10:	fa 83       	std	Y+2, r31	; 0x02
    aa12:	e9 83       	std	Y+1, r30	; 0x01
    aa14:	f7 01       	movw	r30, r14
    aa16:	e2 0f       	add	r30, r18
    aa18:	f1 1d       	adc	r31, r1
    aa1a:	20 80       	ld	r2, Z
    aa1c:	31 80       	ldd	r3, Z+1	; 0x01
    aa1e:	00 97       	sbiw	r24, 0x00	; 0
    aa20:	39 f1       	breq	.+78     	; 0xaa70 <dir_find+0x17a>
    aa22:	0f 3f       	cpi	r16, 0xFF	; 255
    aa24:	11 05       	cpc	r17, r1
    aa26:	11 f0       	breq	.+4      	; 0xaa2c <dir_find+0x136>
    aa28:	08 f0       	brcs	.+2      	; 0xaa2c <dir_find+0x136>
    aa2a:	68 c0       	rjmp	.+208    	; 0xaafc <dir_find+0x206>
    aa2c:	b1 01       	movw	r22, r2
    aa2e:	80 e0       	ldi	r24, 0x00	; 0
    aa30:	90 e0       	ldi	r25, 0x00	; 0
    aa32:	0e 94 28 69 	call	0xd250	; 0xd250 <ff_wtoupper>
    aa36:	4b 01       	movw	r8, r22
    aa38:	5c 01       	movw	r10, r24
    aa3a:	98 01       	movw	r18, r16
    aa3c:	2f 5f       	subi	r18, 0xFF	; 255
    aa3e:	3f 4f       	sbci	r19, 0xFF	; 255
    aa40:	38 87       	std	Y+8, r19	; 0x08
    aa42:	2f 83       	std	Y+7, r18	; 0x07
    aa44:	00 0f       	add	r16, r16
    aa46:	11 1f       	adc	r17, r17
    aa48:	ed 81       	ldd	r30, Y+5	; 0x05
    aa4a:	fe 81       	ldd	r31, Y+6	; 0x06
    aa4c:	e0 0f       	add	r30, r16
    aa4e:	f1 1f       	adc	r31, r17
    aa50:	60 81       	ld	r22, Z
    aa52:	71 81       	ldd	r23, Z+1	; 0x01
    aa54:	80 e0       	ldi	r24, 0x00	; 0
    aa56:	90 e0       	ldi	r25, 0x00	; 0
    aa58:	0e 94 28 69 	call	0xd250	; 0xd250 <ff_wtoupper>
    aa5c:	86 16       	cp	r8, r22
    aa5e:	97 06       	cpc	r9, r23
    aa60:	a8 06       	cpc	r10, r24
    aa62:	b9 06       	cpc	r11, r25
    aa64:	09 f0       	breq	.+2      	; 0xaa68 <dir_find+0x172>
    aa66:	4a c0       	rjmp	.+148    	; 0xaafc <dir_find+0x206>
    aa68:	c1 01       	movw	r24, r2
    aa6a:	0f 81       	ldd	r16, Y+7	; 0x07
    aa6c:	18 85       	ldd	r17, Y+8	; 0x08
    aa6e:	05 c0       	rjmp	.+10     	; 0xaa7a <dir_find+0x184>
    aa70:	3f ef       	ldi	r19, 0xFF	; 255
    aa72:	23 16       	cp	r2, r19
    aa74:	33 06       	cpc	r3, r19
    aa76:	09 f0       	breq	.+2      	; 0xaa7a <dir_find+0x184>
    aa78:	41 c0       	rjmp	.+130    	; 0xaafc <dir_find+0x206>
    aa7a:	e9 81       	ldd	r30, Y+1	; 0x01
    aa7c:	fa 81       	ldd	r31, Y+2	; 0x02
    aa7e:	ea 5c       	subi	r30, 0xCA	; 202
    aa80:	f4 40       	sbci	r31, 0x04	; 4
    aa82:	19 f6       	brne	.-122    	; 0xaa0a <dir_find+0x114>
    aa84:	f7 01       	movw	r30, r14
    aa86:	20 81       	ld	r18, Z
    aa88:	26 ff       	sbrs	r18, 6
    aa8a:	3a c0       	rjmp	.+116    	; 0xab00 <dir_find+0x20a>
    aa8c:	89 2b       	or	r24, r25
    aa8e:	c1 f1       	breq	.+112    	; 0xab00 <dir_find+0x20a>
    aa90:	00 0f       	add	r16, r16
    aa92:	11 1f       	adc	r17, r17
    aa94:	ed 81       	ldd	r30, Y+5	; 0x05
    aa96:	fe 81       	ldd	r31, Y+6	; 0x06
    aa98:	e0 0f       	add	r30, r16
    aa9a:	f1 1f       	adc	r31, r17
    aa9c:	80 81       	ld	r24, Z
    aa9e:	91 81       	ldd	r25, Z+1	; 0x01
    aaa0:	89 2b       	or	r24, r25
    aaa2:	71 f1       	breq	.+92     	; 0xab00 <dir_find+0x20a>
    aaa4:	2b c0       	rjmp	.+86     	; 0xaafc <dir_find+0x206>
    aaa6:	11 11       	cpse	r17, r1
    aaa8:	05 c0       	rjmp	.+10     	; 0xaab4 <dir_find+0x1be>
    aaaa:	c7 01       	movw	r24, r14
    aaac:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <sum_sfn>
    aab0:	08 17       	cp	r16, r24
    aab2:	09 f1       	breq	.+66     	; 0xaaf6 <dir_find+0x200>
    aab4:	eb 85       	ldd	r30, Y+11	; 0x0b
    aab6:	fc 85       	ldd	r31, Y+12	; 0x0c
    aab8:	87 a1       	ldd	r24, Z+39	; 0x27
    aaba:	80 fd       	sbrc	r24, 0
    aabc:	09 c0       	rjmp	.+18     	; 0xaad0 <dir_find+0x1da>
    aabe:	4b e0       	ldi	r20, 0x0B	; 11
    aac0:	50 e0       	ldi	r21, 0x00	; 0
    aac2:	69 85       	ldd	r22, Y+9	; 0x09
    aac4:	7a 85       	ldd	r23, Y+10	; 0x0a
    aac6:	c7 01       	movw	r24, r14
    aac8:	0e 94 96 46 	call	0x8d2c	; 0x8d2c <mem_cmp>
    aacc:	89 2b       	or	r24, r25
    aace:	99 f0       	breq	.+38     	; 0xaaf6 <dir_find+0x200>
    aad0:	eb 85       	ldd	r30, Y+11	; 0x0b
    aad2:	fc 85       	ldd	r31, Y+12	; 0x0c
    aad4:	40 a6       	std	Z+40, r4	; 0x28
    aad6:	51 a6       	std	Z+41, r5	; 0x29
    aad8:	62 a6       	std	Z+42, r6	; 0x2a
    aada:	73 a6       	std	Z+43, r7	; 0x2b
    aadc:	1f ef       	ldi	r17, 0xFF	; 255
    aade:	60 e0       	ldi	r22, 0x00	; 0
    aae0:	70 e0       	ldi	r23, 0x00	; 0
    aae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    aae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    aae6:	d5 dc       	rcall	.-1622   	; 0xa492 <dir_next>
    aae8:	00 97       	sbiw	r24, 0x00	; 0
    aaea:	09 f4       	brne	.+2      	; 0xaaee <dir_find+0x1f8>
    aaec:	2b cf       	rjmp	.-426    	; 0xa944 <dir_find+0x4e>
    aaee:	28 2f       	mov	r18, r24
    aaf0:	0b c0       	rjmp	.+22     	; 0xab08 <dir_find+0x212>
    aaf2:	24 e0       	ldi	r18, 0x04	; 4
    aaf4:	01 c0       	rjmp	.+2      	; 0xaaf8 <dir_find+0x202>
    aaf6:	20 e0       	ldi	r18, 0x00	; 0
    aaf8:	90 e0       	ldi	r25, 0x00	; 0
    aafa:	06 c0       	rjmp	.+12     	; 0xab08 <dir_find+0x212>
    aafc:	0c 2d       	mov	r16, r12
    aafe:	ee cf       	rjmp	.-36     	; 0xaadc <dir_find+0x1e6>
    ab00:	1f ef       	ldi	r17, 0xFF	; 255
    ab02:	1d 0d       	add	r17, r13
    ab04:	0c 2d       	mov	r16, r12
    ab06:	eb cf       	rjmp	.-42     	; 0xaade <dir_find+0x1e8>
    ab08:	82 2f       	mov	r24, r18
    ab0a:	2c 96       	adiw	r28, 0x0c	; 12
    ab0c:	e2 e1       	ldi	r30, 0x12	; 18
    ab0e:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000ab12 <dir_register>:
    ab12:	a6 e1       	ldi	r26, 0x16	; 22
    ab14:	b0 e0       	ldi	r27, 0x00	; 0
    ab16:	ef e8       	ldi	r30, 0x8F	; 143
    ab18:	f5 e5       	ldi	r31, 0x55	; 85
    ab1a:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    ab1e:	fc 01       	movw	r30, r24
    ab20:	27 a1       	ldd	r18, Z+39	; 0x27
    ab22:	20 7a       	andi	r18, 0xA0	; 160
    ab24:	09 f0       	breq	.+2      	; 0xab28 <dir_register+0x16>
    ab26:	53 c1       	rjmp	.+678    	; 0xadce <dir_register+0x2bc>
    ab28:	c0 80       	ld	r12, Z
    ab2a:	d1 80       	ldd	r13, Z+1	; 0x01
    ab2c:	f6 01       	movw	r30, r12
    ab2e:	a3 85       	ldd	r26, Z+11	; 0x0b
    ab30:	b4 85       	ldd	r27, Z+12	; 0x0c
    ab32:	81 2c       	mov	r8, r1
    ab34:	91 2c       	mov	r9, r1
    ab36:	2d 91       	ld	r18, X+
    ab38:	3d 91       	ld	r19, X+
    ab3a:	23 2b       	or	r18, r19
    ab3c:	21 f0       	breq	.+8      	; 0xab46 <dir_register+0x34>
    ab3e:	ff ef       	ldi	r31, 0xFF	; 255
    ab40:	8f 1a       	sub	r8, r31
    ab42:	9f 0a       	sbc	r9, r31
    ab44:	f8 cf       	rjmp	.-16     	; 0xab36 <dir_register+0x24>
    ab46:	8c 01       	movw	r16, r24
    ab48:	5c 01       	movw	r10, r24
    ab4a:	2c e1       	ldi	r18, 0x1C	; 28
    ab4c:	a2 0e       	add	r10, r18
    ab4e:	b1 1c       	adc	r11, r1
    ab50:	4c e0       	ldi	r20, 0x0C	; 12
    ab52:	50 e0       	ldi	r21, 0x00	; 0
    ab54:	b5 01       	movw	r22, r10
    ab56:	ce 01       	movw	r24, r28
    ab58:	01 96       	adiw	r24, 0x01	; 1
    ab5a:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    ab5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab60:	80 ff       	sbrs	r24, 0
    ab62:	94 c0       	rjmp	.+296    	; 0xac8c <dir_register+0x17a>
    ab64:	80 e4       	ldi	r24, 0x40	; 64
    ab66:	f8 01       	movw	r30, r16
    ab68:	87 a3       	std	Z+39, r24	; 0x27
    ab6a:	41 2c       	mov	r4, r1
    ab6c:	51 2c       	mov	r5, r1
    ab6e:	32 01       	movw	r6, r4
    ab70:	43 94       	inc	r4
    ab72:	72 01       	movw	r14, r4
    ab74:	f6 01       	movw	r30, r12
    ab76:	23 84       	ldd	r2, Z+11	; 0x0b
    ab78:	34 84       	ldd	r3, Z+12	; 0x0c
    ab7a:	4b e0       	ldi	r20, 0x0B	; 11
    ab7c:	50 e0       	ldi	r21, 0x00	; 0
    ab7e:	be 01       	movw	r22, r28
    ab80:	6f 5f       	subi	r22, 0xFF	; 255
    ab82:	7f 4f       	sbci	r23, 0xFF	; 255
    ab84:	c5 01       	movw	r24, r10
    ab86:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    ab8a:	f6 e0       	ldi	r31, 0x06	; 6
    ab8c:	4f 16       	cp	r4, r31
    ab8e:	51 04       	cpc	r5, r1
    ab90:	18 f1       	brcs	.+70     	; 0xabd8 <dir_register+0xc6>
    ab92:	f1 01       	movw	r30, r2
    ab94:	b3 01       	movw	r22, r6
    ab96:	a2 01       	movw	r20, r4
    ab98:	81 91       	ld	r24, Z+
    ab9a:	91 91       	ld	r25, Z+
    ab9c:	00 97       	sbiw	r24, 0x00	; 0
    ab9e:	d9 f0       	breq	.+54     	; 0xabd6 <dir_register+0xc4>
    aba0:	20 e1       	ldi	r18, 0x10	; 16
    aba2:	30 e0       	ldi	r19, 0x00	; 0
    aba4:	44 0f       	add	r20, r20
    aba6:	55 1f       	adc	r21, r21
    aba8:	66 1f       	adc	r22, r22
    abaa:	77 1f       	adc	r23, r23
    abac:	dc 01       	movw	r26, r24
    abae:	a1 70       	andi	r26, 0x01	; 1
    abb0:	bb 27       	eor	r27, r27
    abb2:	4a 0f       	add	r20, r26
    abb4:	5b 1f       	adc	r21, r27
    abb6:	61 1d       	adc	r22, r1
    abb8:	71 1d       	adc	r23, r1
    abba:	96 95       	lsr	r25
    abbc:	87 95       	ror	r24
    abbe:	60 ff       	sbrs	r22, 0
    abc0:	06 c0       	rjmp	.+12     	; 0xabce <dir_register+0xbc>
    abc2:	a1 e2       	ldi	r26, 0x21	; 33
    abc4:	4a 27       	eor	r20, r26
    abc6:	a0 e1       	ldi	r26, 0x10	; 16
    abc8:	5a 27       	eor	r21, r26
    abca:	a1 e0       	ldi	r26, 0x01	; 1
    abcc:	6a 27       	eor	r22, r26
    abce:	21 50       	subi	r18, 0x01	; 1
    abd0:	31 09       	sbc	r19, r1
    abd2:	41 f7       	brne	.-48     	; 0xaba4 <dir_register+0x92>
    abd4:	e1 cf       	rjmp	.-62     	; 0xab98 <dir_register+0x86>
    abd6:	7a 01       	movw	r14, r20
    abd8:	fe 01       	movw	r30, r28
    abda:	75 96       	adiw	r30, 0x15	; 21
    abdc:	27 e0       	ldi	r18, 0x07	; 7
    abde:	30 e0       	ldi	r19, 0x00	; 0
    abe0:	9e 2d       	mov	r25, r14
    abe2:	9f 70       	andi	r25, 0x0F	; 15
    abe4:	80 e3       	ldi	r24, 0x30	; 48
    abe6:	89 0f       	add	r24, r25
    abe8:	8a 33       	cpi	r24, 0x3A	; 58
    abea:	10 f0       	brcs	.+4      	; 0xabf0 <dir_register+0xde>
    abec:	87 e3       	ldi	r24, 0x37	; 55
    abee:	89 0f       	add	r24, r25
    abf0:	21 50       	subi	r18, 0x01	; 1
    abf2:	31 09       	sbc	r19, r1
    abf4:	82 93       	st	-Z, r24
    abf6:	a4 e0       	ldi	r26, 0x04	; 4
    abf8:	f6 94       	lsr	r15
    abfa:	e7 94       	ror	r14
    abfc:	aa 95       	dec	r26
    abfe:	e1 f7       	brne	.-8      	; 0xabf8 <dir_register+0xe6>
    ac00:	e1 14       	cp	r14, r1
    ac02:	f1 04       	cpc	r15, r1
    ac04:	69 f7       	brne	.-38     	; 0xabe0 <dir_register+0xce>
    ac06:	ed e0       	ldi	r30, 0x0D	; 13
    ac08:	f0 e0       	ldi	r31, 0x00	; 0
    ac0a:	ec 0f       	add	r30, r28
    ac0c:	fd 1f       	adc	r31, r29
    ac0e:	e2 0f       	add	r30, r18
    ac10:	f3 1f       	adc	r31, r19
    ac12:	4e e7       	ldi	r20, 0x7E	; 126
    ac14:	40 83       	st	Z, r20
    ac16:	f5 01       	movw	r30, r10
    ac18:	80 e0       	ldi	r24, 0x00	; 0
    ac1a:	90 e0       	ldi	r25, 0x00	; 0
    ac1c:	28 17       	cp	r18, r24
    ac1e:	39 07       	cpc	r19, r25
    ac20:	29 f0       	breq	.+10     	; 0xac2c <dir_register+0x11a>
    ac22:	41 91       	ld	r20, Z+
    ac24:	40 32       	cpi	r20, 0x20	; 32
    ac26:	11 f0       	breq	.+4      	; 0xac2c <dir_register+0x11a>
    ac28:	01 96       	adiw	r24, 0x01	; 1
    ac2a:	f8 cf       	rjmp	.-16     	; 0xac1c <dir_register+0x10a>
    ac2c:	f5 01       	movw	r30, r10
    ac2e:	e8 0f       	add	r30, r24
    ac30:	f9 1f       	adc	r31, r25
    ac32:	28 30       	cpi	r18, 0x08	; 8
    ac34:	31 05       	cpc	r19, r1
    ac36:	50 f4       	brcc	.+20     	; 0xac4c <dir_register+0x13a>
    ac38:	ad e0       	ldi	r26, 0x0D	; 13
    ac3a:	b0 e0       	ldi	r27, 0x00	; 0
    ac3c:	ac 0f       	add	r26, r28
    ac3e:	bd 1f       	adc	r27, r29
    ac40:	a2 0f       	add	r26, r18
    ac42:	b3 1f       	adc	r27, r19
    ac44:	8c 91       	ld	r24, X
    ac46:	2f 5f       	subi	r18, 0xFF	; 255
    ac48:	3f 4f       	sbci	r19, 0xFF	; 255
    ac4a:	01 c0       	rjmp	.+2      	; 0xac4e <dir_register+0x13c>
    ac4c:	80 e2       	ldi	r24, 0x20	; 32
    ac4e:	81 93       	st	Z+, r24
    ac50:	cf 01       	movw	r24, r30
    ac52:	8a 19       	sub	r24, r10
    ac54:	9b 09       	sbc	r25, r11
    ac56:	08 97       	sbiw	r24, 0x08	; 8
    ac58:	60 f3       	brcs	.-40     	; 0xac32 <dir_register+0x120>
    ac5a:	c8 01       	movw	r24, r16
    ac5c:	4c de       	rcall	.-872    	; 0xa8f6 <dir_find>
    ac5e:	00 97       	sbiw	r24, 0x00	; 0
    ac60:	71 f4       	brne	.+28     	; 0xac7e <dir_register+0x16c>
    ac62:	8f ef       	ldi	r24, 0xFF	; 255
    ac64:	48 1a       	sub	r4, r24
    ac66:	58 0a       	sbc	r5, r24
    ac68:	68 0a       	sbc	r6, r24
    ac6a:	78 0a       	sbc	r7, r24
    ac6c:	94 e6       	ldi	r25, 0x64	; 100
    ac6e:	49 16       	cp	r4, r25
    ac70:	51 04       	cpc	r5, r1
    ac72:	61 04       	cpc	r6, r1
    ac74:	71 04       	cpc	r7, r1
    ac76:	09 f0       	breq	.+2      	; 0xac7a <dir_register+0x168>
    ac78:	7c cf       	rjmp	.-264    	; 0xab72 <dir_register+0x60>
    ac7a:	27 e0       	ldi	r18, 0x07	; 7
    ac7c:	a9 c0       	rjmp	.+338    	; 0xadd0 <dir_register+0x2be>
    ac7e:	84 30       	cpi	r24, 0x04	; 4
    ac80:	91 05       	cpc	r25, r1
    ac82:	09 f0       	breq	.+2      	; 0xac86 <dir_register+0x174>
    ac84:	ce c0       	rjmp	.+412    	; 0xae22 <dir_register+0x310>
    ac86:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac88:	f8 01       	movw	r30, r16
    ac8a:	87 a3       	std	Z+39, r24	; 0x27
    ac8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac8e:	81 ff       	sbrs	r24, 1
    ac90:	0b c0       	rjmp	.+22     	; 0xaca8 <dir_register+0x196>
    ac92:	c4 01       	movw	r24, r8
    ac94:	0c 96       	adiw	r24, 0x0c	; 12
    ac96:	6d e0       	ldi	r22, 0x0D	; 13
    ac98:	70 e0       	ldi	r23, 0x00	; 0
    ac9a:	0e 94 fd df 	call	0x1bffa	; 0x1bffa <__udivmodhi4>
    ac9e:	7b 01       	movw	r14, r22
    aca0:	ff ef       	ldi	r31, 0xFF	; 255
    aca2:	ef 1a       	sub	r14, r31
    aca4:	ff 0a       	sbc	r15, r31
    aca6:	03 c0       	rjmp	.+6      	; 0xacae <dir_register+0x19c>
    aca8:	ee 24       	eor	r14, r14
    acaa:	e3 94       	inc	r14
    acac:	f1 2c       	mov	r15, r1
    acae:	b7 01       	movw	r22, r14
    acb0:	c8 01       	movw	r24, r16
    acb2:	d7 dc       	rcall	.-1618   	; 0xa662 <dir_alloc>
    acb4:	00 97       	sbiw	r24, 0x00	; 0
    acb6:	09 f0       	breq	.+2      	; 0xacba <dir_register+0x1a8>
    acb8:	b4 c0       	rjmp	.+360    	; 0xae22 <dir_register+0x310>
    acba:	21 e0       	ldi	r18, 0x01	; 1
    acbc:	e2 1a       	sub	r14, r18
    acbe:	f1 08       	sbc	r15, r1
    acc0:	09 f4       	brne	.+2      	; 0xacc4 <dir_register+0x1b2>
    acc2:	88 c0       	rjmp	.+272    	; 0xadd4 <dir_register+0x2c2>
    acc4:	f8 01       	movw	r30, r16
    acc6:	46 85       	ldd	r20, Z+14	; 0x0e
    acc8:	57 85       	ldd	r21, Z+15	; 0x0f
    acca:	60 89       	ldd	r22, Z+16	; 0x10
    accc:	71 89       	ldd	r23, Z+17	; 0x11
    acce:	c7 01       	movw	r24, r14
    acd0:	e5 e0       	ldi	r30, 0x05	; 5
    acd2:	88 0f       	add	r24, r24
    acd4:	99 1f       	adc	r25, r25
    acd6:	ea 95       	dec	r30
    acd8:	e1 f7       	brne	.-8      	; 0xacd2 <dir_register+0x1c0>
    acda:	48 1b       	sub	r20, r24
    acdc:	59 0b       	sbc	r21, r25
    acde:	61 09       	sbc	r22, r1
    ace0:	71 09       	sbc	r23, r1
    ace2:	c8 01       	movw	r24, r16
    ace4:	5e d9       	rcall	.-3396   	; 0x9fa2 <dir_sdi>
    ace6:	00 97       	sbiw	r24, 0x00	; 0
    ace8:	09 f0       	breq	.+2      	; 0xacec <dir_register+0x1da>
    acea:	9b c0       	rjmp	.+310    	; 0xae22 <dir_register+0x310>
    acec:	c5 01       	movw	r24, r10
    acee:	0e 94 8f 47 	call	0x8f1e	; 0x8f1e <sum_sfn>
    acf2:	68 2e       	mov	r6, r24
    acf4:	5f e0       	ldi	r21, 0x0F	; 15
    acf6:	35 2e       	mov	r3, r21
    acf8:	6d e0       	ldi	r22, 0x0D	; 13
    acfa:	46 2e       	mov	r4, r22
    acfc:	7a ec       	ldi	r23, 0xCA	; 202
    acfe:	87 2e       	mov	r8, r23
    ad00:	74 e0       	ldi	r23, 0x04	; 4
    ad02:	97 2e       	mov	r9, r23
    ad04:	55 24       	eor	r5, r5
    ad06:	53 94       	inc	r5
    ad08:	f8 01       	movw	r30, r16
    ad0a:	46 89       	ldd	r20, Z+22	; 0x16
    ad0c:	57 89       	ldd	r21, Z+23	; 0x17
    ad0e:	60 8d       	ldd	r22, Z+24	; 0x18
    ad10:	71 8d       	ldd	r23, Z+25	; 0x19
    ad12:	c6 01       	movw	r24, r12
    ad14:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    ad18:	00 97       	sbiw	r24, 0x00	; 0
    ad1a:	09 f0       	breq	.+2      	; 0xad1e <dir_register+0x20c>
    ad1c:	82 c0       	rjmp	.+260    	; 0xae22 <dir_register+0x310>
    ad1e:	f6 01       	movw	r30, r12
    ad20:	63 85       	ldd	r22, Z+11	; 0x0b
    ad22:	74 85       	ldd	r23, Z+12	; 0x0c
    ad24:	f8 01       	movw	r30, r16
    ad26:	02 8c       	ldd	r0, Z+26	; 0x1a
    ad28:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ad2a:	e0 2d       	mov	r30, r0
    ad2c:	fe 8b       	std	Y+22, r31	; 0x16
    ad2e:	ed 8b       	std	Y+21, r30	; 0x15
    ad30:	7e 2c       	mov	r7, r14
    ad32:	65 86       	std	Z+13, r6	; 0x0d
    ad34:	33 86       	std	Z+11, r3	; 0x0b
    ad36:	14 86       	std	Z+12, r1	; 0x0c
    ad38:	12 8e       	std	Z+26, r1	; 0x1a
    ad3a:	13 8e       	std	Z+27, r1	; 0x1b
    ad3c:	97 01       	movw	r18, r14
    ad3e:	33 27       	eor	r19, r19
    ad40:	21 50       	subi	r18, 0x01	; 1
    ad42:	31 09       	sbc	r19, r1
    ad44:	42 9e       	mul	r4, r18
    ad46:	c0 01       	movw	r24, r0
    ad48:	43 9e       	mul	r4, r19
    ad4a:	90 0d       	add	r25, r0
    ad4c:	11 24       	eor	r1, r1
    ad4e:	ad eb       	ldi	r26, 0xBD	; 189
    ad50:	b4 e0       	ldi	r27, 0x04	; 4
    ad52:	20 e0       	ldi	r18, 0x00	; 0
    ad54:	30 e0       	ldi	r19, 0x00	; 0
    ad56:	2f 3f       	cpi	r18, 0xFF	; 255
    ad58:	ff ef       	ldi	r31, 0xFF	; 255
    ad5a:	3f 07       	cpc	r19, r31
    ad5c:	49 f0       	breq	.+18     	; 0xad70 <dir_register+0x25e>
    ad5e:	9c 01       	movw	r18, r24
    ad60:	22 0f       	add	r18, r18
    ad62:	33 1f       	adc	r19, r19
    ad64:	26 0f       	add	r18, r22
    ad66:	37 1f       	adc	r19, r23
    ad68:	f9 01       	movw	r30, r18
    ad6a:	20 81       	ld	r18, Z
    ad6c:	31 81       	ldd	r19, Z+1	; 0x01
    ad6e:	01 96       	adiw	r24, 0x01	; 1
    ad70:	4d 91       	ld	r20, X+
    ad72:	ed 89       	ldd	r30, Y+21	; 0x15
    ad74:	fe 89       	ldd	r31, Y+22	; 0x16
    ad76:	e4 0f       	add	r30, r20
    ad78:	f1 1d       	adc	r31, r1
    ad7a:	20 83       	st	Z, r18
    ad7c:	31 83       	std	Z+1, r19	; 0x01
    ad7e:	21 15       	cp	r18, r1
    ad80:	31 05       	cpc	r19, r1
    ad82:	11 f4       	brne	.+4      	; 0xad88 <dir_register+0x276>
    ad84:	2f ef       	ldi	r18, 0xFF	; 255
    ad86:	3f ef       	ldi	r19, 0xFF	; 255
    ad88:	8a 16       	cp	r8, r26
    ad8a:	9b 06       	cpc	r9, r27
    ad8c:	21 f7       	brne	.-56     	; 0xad56 <dir_register+0x244>
    ad8e:	2f 3f       	cpi	r18, 0xFF	; 255
    ad90:	3f 4f       	sbci	r19, 0xFF	; 255
    ad92:	49 f0       	breq	.+18     	; 0xada6 <dir_register+0x294>
    ad94:	88 0f       	add	r24, r24
    ad96:	99 1f       	adc	r25, r25
    ad98:	db 01       	movw	r26, r22
    ad9a:	a8 0f       	add	r26, r24
    ad9c:	b9 1f       	adc	r27, r25
    ad9e:	8d 91       	ld	r24, X+
    ada0:	9c 91       	ld	r25, X
    ada2:	89 2b       	or	r24, r25
    ada4:	19 f4       	brne	.+6      	; 0xadac <dir_register+0x29a>
    ada6:	27 2d       	mov	r18, r7
    ada8:	20 64       	ori	r18, 0x40	; 64
    adaa:	72 2e       	mov	r7, r18
    adac:	ed 89       	ldd	r30, Y+21	; 0x15
    adae:	fe 89       	ldd	r31, Y+22	; 0x16
    adb0:	70 82       	st	Z, r7
    adb2:	f6 01       	movw	r30, r12
    adb4:	53 82       	std	Z+3, r5	; 0x03
    adb6:	60 e0       	ldi	r22, 0x00	; 0
    adb8:	70 e0       	ldi	r23, 0x00	; 0
    adba:	c8 01       	movw	r24, r16
    adbc:	6a db       	rcall	.-2348   	; 0xa492 <dir_next>
    adbe:	00 97       	sbiw	r24, 0x00	; 0
    adc0:	81 f5       	brne	.+96     	; 0xae22 <dir_register+0x310>
    adc2:	f1 e0       	ldi	r31, 0x01	; 1
    adc4:	ef 1a       	sub	r14, r31
    adc6:	f1 08       	sbc	r15, r1
    adc8:	09 f0       	breq	.+2      	; 0xadcc <dir_register+0x2ba>
    adca:	9e cf       	rjmp	.-196    	; 0xad08 <dir_register+0x1f6>
    adcc:	03 c0       	rjmp	.+6      	; 0xadd4 <dir_register+0x2c2>
    adce:	26 e0       	ldi	r18, 0x06	; 6
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	28 c0       	rjmp	.+80     	; 0xae24 <dir_register+0x312>
    add4:	f8 01       	movw	r30, r16
    add6:	46 89       	ldd	r20, Z+22	; 0x16
    add8:	57 89       	ldd	r21, Z+23	; 0x17
    adda:	60 8d       	ldd	r22, Z+24	; 0x18
    addc:	71 8d       	ldd	r23, Z+25	; 0x19
    adde:	c6 01       	movw	r24, r12
    ade0:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    ade4:	00 97       	sbiw	r24, 0x00	; 0
    ade6:	e9 f4       	brne	.+58     	; 0xae22 <dir_register+0x310>
    ade8:	40 e2       	ldi	r20, 0x20	; 32
    adea:	50 e0       	ldi	r21, 0x00	; 0
    adec:	60 e0       	ldi	r22, 0x00	; 0
    adee:	70 e0       	ldi	r23, 0x00	; 0
    adf0:	f8 01       	movw	r30, r16
    adf2:	82 8d       	ldd	r24, Z+26	; 0x1a
    adf4:	93 8d       	ldd	r25, Z+27	; 0x1b
    adf6:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <mem_set>
    adfa:	4b e0       	ldi	r20, 0x0B	; 11
    adfc:	50 e0       	ldi	r21, 0x00	; 0
    adfe:	b5 01       	movw	r22, r10
    ae00:	f8 01       	movw	r30, r16
    ae02:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae04:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae06:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    ae0a:	f8 01       	movw	r30, r16
    ae0c:	22 8d       	ldd	r18, Z+26	; 0x1a
    ae0e:	33 8d       	ldd	r19, Z+27	; 0x1b
    ae10:	87 a1       	ldd	r24, Z+39	; 0x27
    ae12:	88 71       	andi	r24, 0x18	; 24
    ae14:	f9 01       	movw	r30, r18
    ae16:	84 87       	std	Z+12, r24	; 0x0c
    ae18:	81 e0       	ldi	r24, 0x01	; 1
    ae1a:	f6 01       	movw	r30, r12
    ae1c:	83 83       	std	Z+3, r24	; 0x03
    ae1e:	20 e0       	ldi	r18, 0x00	; 0
    ae20:	d7 cf       	rjmp	.-82     	; 0xadd0 <dir_register+0x2be>
    ae22:	28 2f       	mov	r18, r24
    ae24:	82 2f       	mov	r24, r18
    ae26:	66 96       	adiw	r28, 0x16	; 22
    ae28:	e2 e1       	ldi	r30, 0x12	; 18
    ae2a:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000ae2e <follow_path>:
    ae2e:	aa e0       	ldi	r26, 0x0A	; 10
    ae30:	b0 e0       	ldi	r27, 0x00	; 0
    ae32:	ed e1       	ldi	r30, 0x1D	; 29
    ae34:	f7 e5       	ldi	r31, 0x57	; 87
    ae36:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    ae3a:	7c 01       	movw	r14, r24
    ae3c:	3b 01       	movw	r6, r22
    ae3e:	dc 01       	movw	r26, r24
    ae40:	0d 90       	ld	r0, X+
    ae42:	bc 91       	ld	r27, X
    ae44:	a0 2d       	mov	r26, r0
    ae46:	be 83       	std	Y+6, r27	; 0x06
    ae48:	ad 83       	std	Y+5, r26	; 0x05
    ae4a:	fb 01       	movw	r30, r22
    ae4c:	80 81       	ld	r24, Z
    ae4e:	8f 32       	cpi	r24, 0x2F	; 47
    ae50:	11 f0       	breq	.+4      	; 0xae56 <follow_path+0x28>
    ae52:	8c 35       	cpi	r24, 0x5C	; 92
    ae54:	11 f4       	brne	.+4      	; 0xae5a <follow_path+0x2c>
    ae56:	93 01       	movw	r18, r6
    ae58:	0c c0       	rjmp	.+24     	; 0xae72 <follow_path+0x44>
    ae5a:	ed 81       	ldd	r30, Y+5	; 0x05
    ae5c:	fe 81       	ldd	r31, Y+6	; 0x06
    ae5e:	85 89       	ldd	r24, Z+21	; 0x15
    ae60:	96 89       	ldd	r25, Z+22	; 0x16
    ae62:	a7 89       	ldd	r26, Z+23	; 0x17
    ae64:	b0 8d       	ldd	r27, Z+24	; 0x18
    ae66:	f7 01       	movw	r30, r14
    ae68:	86 83       	std	Z+6, r24	; 0x06
    ae6a:	97 83       	std	Z+7, r25	; 0x07
    ae6c:	a0 87       	std	Z+8, r26	; 0x08
    ae6e:	b1 87       	std	Z+9, r27	; 0x09
    ae70:	0e c0       	rjmp	.+28     	; 0xae8e <follow_path+0x60>
    ae72:	39 01       	movw	r6, r18
    ae74:	d9 01       	movw	r26, r18
    ae76:	8c 91       	ld	r24, X
    ae78:	2f 5f       	subi	r18, 0xFF	; 255
    ae7a:	3f 4f       	sbci	r19, 0xFF	; 255
    ae7c:	8f 32       	cpi	r24, 0x2F	; 47
    ae7e:	c9 f3       	breq	.-14     	; 0xae72 <follow_path+0x44>
    ae80:	8c 35       	cpi	r24, 0x5C	; 92
    ae82:	b9 f3       	breq	.-18     	; 0xae72 <follow_path+0x44>
    ae84:	f7 01       	movw	r30, r14
    ae86:	16 82       	std	Z+6, r1	; 0x06
    ae88:	17 82       	std	Z+7, r1	; 0x07
    ae8a:	10 86       	std	Z+8, r1	; 0x08
    ae8c:	11 86       	std	Z+9, r1	; 0x09
    ae8e:	d3 01       	movw	r26, r6
    ae90:	8c 91       	ld	r24, X
    ae92:	80 32       	cpi	r24, 0x20	; 32
    ae94:	58 f0       	brcs	.+22     	; 0xaeac <follow_path+0x7e>
    ae96:	f7 01       	movw	r30, r14
    ae98:	7c 96       	adiw	r30, 0x1c	; 28
    ae9a:	f8 87       	std	Y+8, r31	; 0x08
    ae9c:	ef 83       	std	Y+7, r30	; 0x07
    ae9e:	2d 81       	ldd	r18, Y+5	; 0x05
    aea0:	3e 81       	ldd	r19, Y+6	; 0x06
    aea2:	2b 5c       	subi	r18, 0xCB	; 203
    aea4:	3f 4f       	sbci	r19, 0xFF	; 255
    aea6:	3a 87       	std	Y+10, r19	; 0x0a
    aea8:	29 87       	std	Y+9, r18	; 0x09
    aeaa:	96 c0       	rjmp	.+300    	; 0xafd8 <follow_path+0x1aa>
    aeac:	80 e8       	ldi	r24, 0x80	; 128
    aeae:	f7 01       	movw	r30, r14
    aeb0:	87 a3       	std	Z+39, r24	; 0x27
    aeb2:	40 e0       	ldi	r20, 0x00	; 0
    aeb4:	50 e0       	ldi	r21, 0x00	; 0
    aeb6:	ba 01       	movw	r22, r20
    aeb8:	c7 01       	movw	r24, r14
    aeba:	73 d8       	rcall	.-3866   	; 0x9fa2 <dir_sdi>
    aebc:	e5 c1       	rjmp	.+970    	; 0xb288 <follow_path+0x45a>
    aebe:	6c 35       	cpi	r22, 0x5C	; 92
    aec0:	71 05       	cpc	r23, r1
    aec2:	b9 f1       	breq	.+110    	; 0xaf32 <follow_path+0x104>
    aec4:	60 38       	cpi	r22, 0x80	; 128
    aec6:	71 05       	cpc	r23, r1
    aec8:	28 f4       	brcc	.+10     	; 0xaed4 <follow_path+0xa6>
    aeca:	e9 ef       	ldi	r30, 0xF9	; 249
    aecc:	f3 e0       	ldi	r31, 0x03	; 3
    aece:	41 91       	ld	r20, Z+
    aed0:	41 11       	cpse	r20, r1
    aed2:	8c c0       	rjmp	.+280    	; 0xafec <follow_path+0x1be>
    aed4:	0f 3f       	cpi	r16, 0xFF	; 255
    aed6:	11 05       	cpc	r17, r1
    aed8:	08 f0       	brcs	.+2      	; 0xaedc <follow_path+0xae>
    aeda:	b9 c1       	rjmp	.+882    	; 0xb24e <follow_path+0x420>
    aedc:	f8 01       	movw	r30, r16
    aede:	ee 0f       	add	r30, r30
    aee0:	ff 1f       	adc	r31, r31
    aee2:	ea 0d       	add	r30, r10
    aee4:	fb 1d       	adc	r31, r11
    aee6:	71 83       	std	Z+1, r23	; 0x01
    aee8:	60 83       	st	Z, r22
    aeea:	0f 5f       	subi	r16, 0xFF	; 255
    aeec:	1f 4f       	sbci	r17, 0xFF	; 255
    aeee:	ce 01       	movw	r24, r28
    aef0:	01 96       	adiw	r24, 0x01	; 1
    aef2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <tchar2uni>
    aef6:	6f 3f       	cpi	r22, 0xFF	; 255
    aef8:	bf ef       	ldi	r27, 0xFF	; 255
    aefa:	7b 07       	cpc	r23, r27
    aefc:	8b 07       	cpc	r24, r27
    aefe:	9b 07       	cpc	r25, r27
    af00:	09 f4       	brne	.+2      	; 0xaf04 <follow_path+0xd6>
    af02:	a5 c1       	rjmp	.+842    	; 0xb24e <follow_path+0x420>
    af04:	61 15       	cp	r22, r1
    af06:	71 05       	cpc	r23, r1
    af08:	e1 e0       	ldi	r30, 0x01	; 1
    af0a:	8e 07       	cpc	r24, r30
    af0c:	91 05       	cpc	r25, r1
    af0e:	48 f0       	brcs	.+18     	; 0xaf22 <follow_path+0xf4>
    af10:	f8 01       	movw	r30, r16
    af12:	ee 0f       	add	r30, r30
    af14:	ff 1f       	adc	r31, r31
    af16:	ea 0d       	add	r30, r10
    af18:	fb 1d       	adc	r31, r11
    af1a:	91 83       	std	Z+1, r25	; 0x01
    af1c:	80 83       	st	Z, r24
    af1e:	0f 5f       	subi	r16, 0xFF	; 255
    af20:	1f 4f       	sbci	r17, 0xFF	; 255
    af22:	9b 01       	movw	r18, r22
    af24:	60 32       	cpi	r22, 0x20	; 32
    af26:	71 05       	cpc	r23, r1
    af28:	08 f4       	brcc	.+2      	; 0xaf2c <follow_path+0xfe>
    af2a:	6a c0       	rjmp	.+212    	; 0xb000 <follow_path+0x1d2>
    af2c:	6f 32       	cpi	r22, 0x2F	; 47
    af2e:	71 05       	cpc	r23, r1
    af30:	31 f6       	brne	.-116    	; 0xaebe <follow_path+0x90>
    af32:	e9 81       	ldd	r30, Y+1	; 0x01
    af34:	fa 81       	ldd	r31, Y+2	; 0x02
    af36:	80 81       	ld	r24, Z
    af38:	8f 32       	cpi	r24, 0x2F	; 47
    af3a:	09 f4       	brne	.+2      	; 0xaf3e <follow_path+0x110>
    af3c:	5d c0       	rjmp	.+186    	; 0xaff8 <follow_path+0x1ca>
    af3e:	8c 35       	cpi	r24, 0x5C	; 92
    af40:	09 f4       	brne	.+2      	; 0xaf44 <follow_path+0x116>
    af42:	5a c0       	rjmp	.+180    	; 0xaff8 <follow_path+0x1ca>
    af44:	1b 82       	std	Y+3, r1	; 0x03
    af46:	69 80       	ldd	r6, Y+1	; 0x01
    af48:	7a 80       	ldd	r7, Y+2	; 0x02
    af4a:	98 01       	movw	r18, r16
    af4c:	22 0f       	add	r18, r18
    af4e:	33 1f       	adc	r19, r19
    af50:	01 30       	cpi	r16, 0x01	; 1
    af52:	11 05       	cpc	r17, r1
    af54:	09 f0       	breq	.+2      	; 0xaf58 <follow_path+0x12a>
    af56:	57 c0       	rjmp	.+174    	; 0xb006 <follow_path+0x1d8>
    af58:	d5 01       	movw	r26, r10
    af5a:	8d 91       	ld	r24, X+
    af5c:	9c 91       	ld	r25, X
    af5e:	8e 97       	sbiw	r24, 0x2e	; 46
    af60:	09 f0       	breq	.+2      	; 0xaf64 <follow_path+0x136>
    af62:	5c c0       	rjmp	.+184    	; 0xb01c <follow_path+0x1ee>
    af64:	f9 01       	movw	r30, r18
    af66:	ea 0d       	add	r30, r10
    af68:	fb 1d       	adc	r31, r11
    af6a:	11 82       	std	Z+1, r1	; 0x01
    af6c:	10 82       	st	Z, r1
    af6e:	f7 01       	movw	r30, r14
    af70:	7c 96       	adiw	r30, 0x1c	; 28
    af72:	80 e0       	ldi	r24, 0x00	; 0
    af74:	90 e0       	ldi	r25, 0x00	; 0
    af76:	80 17       	cp	r24, r16
    af78:	91 07       	cpc	r25, r17
    af7a:	08 f0       	brcs	.+2      	; 0xaf7e <follow_path+0x150>
    af7c:	53 c0       	rjmp	.+166    	; 0xb024 <follow_path+0x1f6>
    af7e:	2e e2       	ldi	r18, 0x2E	; 46
    af80:	21 93       	st	Z+, r18
    af82:	01 96       	adiw	r24, 0x01	; 1
    af84:	8b 30       	cpi	r24, 0x0B	; 11
    af86:	91 05       	cpc	r25, r1
    af88:	b1 f7       	brne	.-20     	; 0xaf76 <follow_path+0x148>
    af8a:	8b 81       	ldd	r24, Y+3	; 0x03
    af8c:	80 62       	ori	r24, 0x20	; 32
    af8e:	f7 01       	movw	r30, r14
    af90:	87 a3       	std	Z+39, r24	; 0x27
    af92:	80 e0       	ldi	r24, 0x00	; 0
    af94:	90 e0       	ldi	r25, 0x00	; 0
    af96:	00 97       	sbiw	r24, 0x00	; 0
    af98:	09 f0       	breq	.+2      	; 0xaf9c <follow_path+0x16e>
    af9a:	76 c1       	rjmp	.+748    	; 0xb288 <follow_path+0x45a>
    af9c:	c7 01       	movw	r24, r14
    af9e:	ab dc       	rcall	.-1706   	; 0xa8f6 <dir_find>
    afa0:	f7 01       	movw	r30, r14
    afa2:	27 a1       	ldd	r18, Z+39	; 0x27
    afa4:	00 97       	sbiw	r24, 0x00	; 0
    afa6:	09 f0       	breq	.+2      	; 0xafaa <follow_path+0x17c>
    afa8:	55 c1       	rjmp	.+682    	; 0xb254 <follow_path+0x426>
    afaa:	22 fd       	sbrc	r18, 2
    afac:	6d c1       	rjmp	.+730    	; 0xb288 <follow_path+0x45a>
    afae:	f7 01       	movw	r30, r14
    afb0:	84 81       	ldd	r24, Z+4	; 0x04
    afb2:	84 ff       	sbrs	r24, 4
    afb4:	60 c1       	rjmp	.+704    	; 0xb276 <follow_path+0x448>
    afb6:	66 85       	ldd	r22, Z+14	; 0x0e
    afb8:	77 85       	ldd	r23, Z+15	; 0x0f
    afba:	71 70       	andi	r23, 0x01	; 1
    afbc:	29 85       	ldd	r18, Y+9	; 0x09
    afbe:	3a 85       	ldd	r19, Y+10	; 0x0a
    afc0:	62 0f       	add	r22, r18
    afc2:	73 1f       	adc	r23, r19
    afc4:	ad 81       	ldd	r26, Y+5	; 0x05
    afc6:	be 81       	ldd	r27, Y+6	; 0x06
    afc8:	8c 91       	ld	r24, X
    afca:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    afce:	f7 01       	movw	r30, r14
    afd0:	66 83       	std	Z+6, r22	; 0x06
    afd2:	77 83       	std	Z+7, r23	; 0x07
    afd4:	80 87       	std	Z+8, r24	; 0x08
    afd6:	91 87       	std	Z+9, r25	; 0x09
    afd8:	7a 82       	std	Y+2, r7	; 0x02
    afda:	69 82       	std	Y+1, r6	; 0x01
    afdc:	d7 01       	movw	r26, r14
    afde:	ed 91       	ld	r30, X+
    afe0:	fc 91       	ld	r31, X
    afe2:	a3 84       	ldd	r10, Z+11	; 0x0b
    afe4:	b4 84       	ldd	r11, Z+12	; 0x0c
    afe6:	00 e0       	ldi	r16, 0x00	; 0
    afe8:	10 e0       	ldi	r17, 0x00	; 0
    afea:	81 cf       	rjmp	.-254    	; 0xaeee <follow_path+0xc0>
    afec:	50 e0       	ldi	r21, 0x00	; 0
    afee:	24 17       	cp	r18, r20
    aff0:	35 07       	cpc	r19, r21
    aff2:	09 f0       	breq	.+2      	; 0xaff6 <follow_path+0x1c8>
    aff4:	6c cf       	rjmp	.-296    	; 0xaece <follow_path+0xa0>
    aff6:	2b c1       	rjmp	.+598    	; 0xb24e <follow_path+0x420>
    aff8:	31 96       	adiw	r30, 0x01	; 1
    affa:	fa 83       	std	Y+2, r31	; 0x02
    affc:	e9 83       	std	Y+1, r30	; 0x01
    affe:	99 cf       	rjmp	.-206    	; 0xaf32 <follow_path+0x104>
    b000:	f4 e0       	ldi	r31, 0x04	; 4
    b002:	fb 83       	std	Y+3, r31	; 0x03
    b004:	a0 cf       	rjmp	.-192    	; 0xaf46 <follow_path+0x118>
    b006:	02 30       	cpi	r16, 0x02	; 2
    b008:	11 05       	cpc	r17, r1
    b00a:	41 f4       	brne	.+16     	; 0xb01c <follow_path+0x1ee>
    b00c:	f5 01       	movw	r30, r10
    b00e:	82 81       	ldd	r24, Z+2	; 0x02
    b010:	93 81       	ldd	r25, Z+3	; 0x03
    b012:	8e 97       	sbiw	r24, 0x2e	; 46
    b014:	19 f4       	brne	.+6      	; 0xb01c <follow_path+0x1ee>
    b016:	80 81       	ld	r24, Z
    b018:	91 81       	ldd	r25, Z+1	; 0x01
    b01a:	a1 cf       	rjmp	.-190    	; 0xaf5e <follow_path+0x130>
    b01c:	f9 01       	movw	r30, r18
    b01e:	ea 0d       	add	r30, r10
    b020:	fb 1d       	adc	r31, r11
    b022:	09 c0       	rjmp	.+18     	; 0xb036 <follow_path+0x208>
    b024:	20 e2       	ldi	r18, 0x20	; 32
    b026:	ac cf       	rjmp	.-168    	; 0xaf80 <follow_path+0x152>
    b028:	92 91       	ld	r25, -Z
    b02a:	82 91       	ld	r24, -Z
    b02c:	80 32       	cpi	r24, 0x20	; 32
    b02e:	91 05       	cpc	r25, r1
    b030:	31 f4       	brne	.+12     	; 0xb03e <follow_path+0x210>
    b032:	01 50       	subi	r16, 0x01	; 1
    b034:	11 09       	sbc	r17, r1
    b036:	01 15       	cp	r16, r1
    b038:	11 05       	cpc	r17, r1
    b03a:	b1 f7       	brne	.-20     	; 0xb028 <follow_path+0x1fa>
    b03c:	02 c0       	rjmp	.+4      	; 0xb042 <follow_path+0x214>
    b03e:	8e 97       	sbiw	r24, 0x2e	; 46
    b040:	c1 f3       	breq	.-16     	; 0xb032 <follow_path+0x204>
    b042:	f8 01       	movw	r30, r16
    b044:	ee 0f       	add	r30, r30
    b046:	ff 1f       	adc	r31, r31
    b048:	ea 0d       	add	r30, r10
    b04a:	fb 1d       	adc	r31, r11
    b04c:	11 82       	std	Z+1, r1	; 0x01
    b04e:	10 82       	st	Z, r1
    b050:	01 15       	cp	r16, r1
    b052:	11 05       	cpc	r17, r1
    b054:	09 f4       	brne	.+2      	; 0xb058 <follow_path+0x22a>
    b056:	fb c0       	rjmp	.+502    	; 0xb24e <follow_path+0x420>
    b058:	d5 01       	movw	r26, r10
    b05a:	41 2c       	mov	r4, r1
    b05c:	51 2c       	mov	r5, r1
    b05e:	8d 91       	ld	r24, X+
    b060:	9d 91       	ld	r25, X+
    b062:	80 32       	cpi	r24, 0x20	; 32
    b064:	91 05       	cpc	r25, r1
    b066:	21 f4       	brne	.+8      	; 0xb070 <follow_path+0x242>
    b068:	2f ef       	ldi	r18, 0xFF	; 255
    b06a:	42 1a       	sub	r4, r18
    b06c:	52 0a       	sbc	r5, r18
    b06e:	f7 cf       	rjmp	.-18     	; 0xb05e <follow_path+0x230>
    b070:	41 14       	cp	r4, r1
    b072:	51 04       	cpc	r5, r1
    b074:	11 f4       	brne	.+4      	; 0xb07a <follow_path+0x24c>
    b076:	8e 97       	sbiw	r24, 0x2e	; 46
    b078:	39 f4       	brne	.+14     	; 0xb088 <follow_path+0x25a>
    b07a:	3b 81       	ldd	r19, Y+3	; 0x03
    b07c:	33 60       	ori	r19, 0x03	; 3
    b07e:	3b 83       	std	Y+3, r19	; 0x03
    b080:	03 c0       	rjmp	.+6      	; 0xb088 <follow_path+0x25a>
    b082:	01 50       	subi	r16, 0x01	; 1
    b084:	11 09       	sbc	r17, r1
    b086:	21 f0       	breq	.+8      	; 0xb090 <follow_path+0x262>
    b088:	92 91       	ld	r25, -Z
    b08a:	82 91       	ld	r24, -Z
    b08c:	8e 97       	sbiw	r24, 0x2e	; 46
    b08e:	c9 f7       	brne	.-14     	; 0xb082 <follow_path+0x254>
    b090:	4b e0       	ldi	r20, 0x0B	; 11
    b092:	50 e0       	ldi	r21, 0x00	; 0
    b094:	60 e2       	ldi	r22, 0x20	; 32
    b096:	70 e0       	ldi	r23, 0x00	; 0
    b098:	8f 81       	ldd	r24, Y+7	; 0x07
    b09a:	98 85       	ldd	r25, Y+8	; 0x08
    b09c:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <mem_set>
    b0a0:	48 e0       	ldi	r20, 0x08	; 8
    b0a2:	84 2e       	mov	r8, r20
    b0a4:	91 2c       	mov	r9, r1
    b0a6:	c1 2c       	mov	r12, r1
    b0a8:	d1 2c       	mov	r13, r1
    b0aa:	1c 82       	std	Y+4, r1	; 0x04
    b0ac:	12 01       	movw	r2, r4
    b0ae:	8f ef       	ldi	r24, 0xFF	; 255
    b0b0:	28 1a       	sub	r2, r24
    b0b2:	38 0a       	sbc	r3, r24
    b0b4:	44 0c       	add	r4, r4
    b0b6:	55 1c       	adc	r5, r5
    b0b8:	f5 01       	movw	r30, r10
    b0ba:	e4 0d       	add	r30, r4
    b0bc:	f5 1d       	adc	r31, r5
    b0be:	80 81       	ld	r24, Z
    b0c0:	91 81       	ldd	r25, Z+1	; 0x01
    b0c2:	00 97       	sbiw	r24, 0x00	; 0
    b0c4:	09 f4       	brne	.+2      	; 0xb0c8 <follow_path+0x29a>
    b0c6:	98 c0       	rjmp	.+304    	; 0xb1f8 <follow_path+0x3ca>
    b0c8:	80 32       	cpi	r24, 0x20	; 32
    b0ca:	91 05       	cpc	r25, r1
    b0cc:	31 f0       	breq	.+12     	; 0xb0da <follow_path+0x2ac>
    b0ce:	8e 32       	cpi	r24, 0x2E	; 46
    b0d0:	91 05       	cpc	r25, r1
    b0d2:	41 f4       	brne	.+16     	; 0xb0e4 <follow_path+0x2b6>
    b0d4:	20 16       	cp	r2, r16
    b0d6:	31 06       	cpc	r3, r17
    b0d8:	61 f0       	breq	.+24     	; 0xb0f2 <follow_path+0x2c4>
    b0da:	9b 81       	ldd	r25, Y+3	; 0x03
    b0dc:	93 60       	ori	r25, 0x03	; 3
    b0de:	9b 83       	std	Y+3, r25	; 0x03
    b0e0:	21 01       	movw	r4, r2
    b0e2:	e4 cf       	rjmp	.-56     	; 0xb0ac <follow_path+0x27e>
    b0e4:	c8 14       	cp	r12, r8
    b0e6:	d9 04       	cpc	r13, r9
    b0e8:	40 f4       	brcc	.+16     	; 0xb0fa <follow_path+0x2cc>
    b0ea:	20 16       	cp	r2, r16
    b0ec:	31 06       	cpc	r3, r17
    b0ee:	31 f5       	brne	.+76     	; 0xb13c <follow_path+0x30e>
    b0f0:	c5 c0       	rjmp	.+394    	; 0xb27c <follow_path+0x44e>
    b0f2:	c8 14       	cp	r12, r8
    b0f4:	d9 04       	cpc	r13, r9
    b0f6:	08 f4       	brcc	.+2      	; 0xb0fa <follow_path+0x2cc>
    b0f8:	c1 c0       	rjmp	.+386    	; 0xb27c <follow_path+0x44e>
    b0fa:	ab e0       	ldi	r26, 0x0B	; 11
    b0fc:	8a 16       	cp	r8, r26
    b0fe:	91 04       	cpc	r9, r1
    b100:	39 f4       	brne	.+14     	; 0xb110 <follow_path+0x2e2>
    b102:	bb 81       	ldd	r27, Y+3	; 0x03
    b104:	b3 60       	ori	r27, 0x03	; 3
    b106:	bb 83       	std	Y+3, r27	; 0x03
    b108:	2b e0       	ldi	r18, 0x0B	; 11
    b10a:	82 2e       	mov	r8, r18
    b10c:	91 2c       	mov	r9, r1
    b10e:	74 c0       	rjmp	.+232    	; 0xb1f8 <follow_path+0x3ca>
    b110:	20 16       	cp	r2, r16
    b112:	31 06       	cpc	r3, r17
    b114:	39 f0       	breq	.+14     	; 0xb124 <follow_path+0x2f6>
    b116:	eb 81       	ldd	r30, Y+3	; 0x03
    b118:	e3 60       	ori	r30, 0x03	; 3
    b11a:	eb 83       	std	Y+3, r30	; 0x03
    b11c:	02 15       	cp	r16, r2
    b11e:	13 05       	cpc	r17, r3
    b120:	08 f4       	brcc	.+2      	; 0xb124 <follow_path+0x2f6>
    b122:	6a c0       	rjmp	.+212    	; 0xb1f8 <follow_path+0x3ca>
    b124:	fc 81       	ldd	r31, Y+4	; 0x04
    b126:	ff 0f       	add	r31, r31
    b128:	ff 0f       	add	r31, r31
    b12a:	fc 83       	std	Y+4, r31	; 0x04
    b12c:	18 01       	movw	r2, r16
    b12e:	8b e0       	ldi	r24, 0x0B	; 11
    b130:	88 2e       	mov	r8, r24
    b132:	91 2c       	mov	r9, r1
    b134:	98 e0       	ldi	r25, 0x08	; 8
    b136:	c9 2e       	mov	r12, r25
    b138:	d1 2c       	mov	r13, r1
    b13a:	d2 cf       	rjmp	.-92     	; 0xb0e0 <follow_path+0x2b2>
    b13c:	80 38       	cpi	r24, 0x80	; 128
    b13e:	91 05       	cpc	r25, r1
    b140:	78 f1       	brcs	.+94     	; 0xb1a0 <follow_path+0x372>
    b142:	2b 81       	ldd	r18, Y+3	; 0x03
    b144:	22 60       	ori	r18, 0x02	; 2
    b146:	52 2e       	mov	r5, r18
    b148:	bc 01       	movw	r22, r24
    b14a:	80 e0       	ldi	r24, 0x00	; 0
    b14c:	90 e0       	ldi	r25, 0x00	; 0
    b14e:	45 eb       	ldi	r20, 0xB5	; 181
    b150:	51 e0       	ldi	r21, 0x01	; 1
    b152:	0e 94 e0 68 	call	0xd1c0	; 0xd1c0 <ff_uni2oem>
    b156:	87 ff       	sbrs	r24, 7
    b158:	08 c0       	rjmp	.+16     	; 0xb16a <follow_path+0x33c>
    b15a:	8f 77       	andi	r24, 0x7F	; 127
    b15c:	99 27       	eor	r25, r25
    b15e:	fc 01       	movw	r30, r24
    b160:	e3 5c       	subi	r30, 0xC3	; 195
    b162:	fb 4f       	sbci	r31, 0xFB	; 251
    b164:	80 81       	ld	r24, Z
    b166:	90 e0       	ldi	r25, 0x00	; 0
    b168:	18 c0       	rjmp	.+48     	; 0xb19a <follow_path+0x36c>
    b16a:	8f 3f       	cpi	r24, 0xFF	; 255
    b16c:	91 05       	cpc	r25, r1
    b16e:	a9 f0       	breq	.+42     	; 0xb19a <follow_path+0x36c>
    b170:	a0 f0       	brcs	.+40     	; 0xb19a <follow_path+0x36c>
    b172:	94 01       	movw	r18, r8
    b174:	21 50       	subi	r18, 0x01	; 1
    b176:	31 09       	sbc	r19, r1
    b178:	c2 16       	cp	r12, r18
    b17a:	d3 06       	cpc	r13, r19
    b17c:	28 f0       	brcs	.+10     	; 0xb188 <follow_path+0x35a>
    b17e:	3b 81       	ldd	r19, Y+3	; 0x03
    b180:	33 60       	ori	r19, 0x03	; 3
    b182:	3b 83       	std	Y+3, r19	; 0x03
    b184:	64 01       	movw	r12, r8
    b186:	ac cf       	rjmp	.-168    	; 0xb0e0 <follow_path+0x2b2>
    b188:	f7 01       	movw	r30, r14
    b18a:	ec 0d       	add	r30, r12
    b18c:	fd 1d       	adc	r31, r13
    b18e:	94 8f       	std	Z+28, r25	; 0x1c
    b190:	d6 01       	movw	r26, r12
    b192:	11 96       	adiw	r26, 0x01	; 1
    b194:	6d 01       	movw	r12, r26
    b196:	5b 82       	std	Y+3, r5	; 0x03
    b198:	26 c0       	rjmp	.+76     	; 0xb1e6 <follow_path+0x3b8>
    b19a:	00 97       	sbiw	r24, 0x00	; 0
    b19c:	59 f0       	breq	.+22     	; 0xb1b4 <follow_path+0x386>
    b19e:	5b 82       	std	Y+3, r5	; 0x03
    b1a0:	e2 e0       	ldi	r30, 0x02	; 2
    b1a2:	f4 e0       	ldi	r31, 0x04	; 4
    b1a4:	21 91       	ld	r18, Z+
    b1a6:	22 23       	and	r18, r18
    b1a8:	59 f0       	breq	.+22     	; 0xb1c0 <follow_path+0x392>
    b1aa:	30 e0       	ldi	r19, 0x00	; 0
    b1ac:	82 17       	cp	r24, r18
    b1ae:	93 07       	cpc	r25, r19
    b1b0:	c9 f7       	brne	.-14     	; 0xb1a4 <follow_path+0x376>
    b1b2:	5b 80       	ldd	r5, Y+3	; 0x03
    b1b4:	b5 2d       	mov	r27, r5
    b1b6:	b3 60       	ori	r27, 0x03	; 3
    b1b8:	bb 83       	std	Y+3, r27	; 0x03
    b1ba:	8f e5       	ldi	r24, 0x5F	; 95
    b1bc:	90 e0       	ldi	r25, 0x00	; 0
    b1be:	13 c0       	rjmp	.+38     	; 0xb1e6 <follow_path+0x3b8>
    b1c0:	9c 01       	movw	r18, r24
    b1c2:	21 54       	subi	r18, 0x41	; 65
    b1c4:	31 09       	sbc	r19, r1
    b1c6:	2a 31       	cpi	r18, 0x1A	; 26
    b1c8:	31 05       	cpc	r19, r1
    b1ca:	18 f4       	brcc	.+6      	; 0xb1d2 <follow_path+0x3a4>
    b1cc:	ec 81       	ldd	r30, Y+4	; 0x04
    b1ce:	e2 60       	ori	r30, 0x02	; 2
    b1d0:	ec 83       	std	Y+4, r30	; 0x04
    b1d2:	9c 01       	movw	r18, r24
    b1d4:	21 56       	subi	r18, 0x61	; 97
    b1d6:	31 09       	sbc	r19, r1
    b1d8:	2a 31       	cpi	r18, 0x1A	; 26
    b1da:	31 05       	cpc	r19, r1
    b1dc:	20 f4       	brcc	.+8      	; 0xb1e6 <follow_path+0x3b8>
    b1de:	fc 81       	ldd	r31, Y+4	; 0x04
    b1e0:	f1 60       	ori	r31, 0x01	; 1
    b1e2:	fc 83       	std	Y+4, r31	; 0x04
    b1e4:	80 97       	sbiw	r24, 0x20	; 32
    b1e6:	f7 01       	movw	r30, r14
    b1e8:	ec 0d       	add	r30, r12
    b1ea:	fd 1d       	adc	r31, r13
    b1ec:	84 8f       	std	Z+28, r24	; 0x1c
    b1ee:	96 01       	movw	r18, r12
    b1f0:	2f 5f       	subi	r18, 0xFF	; 255
    b1f2:	3f 4f       	sbci	r19, 0xFF	; 255
    b1f4:	69 01       	movw	r12, r18
    b1f6:	74 cf       	rjmp	.-280    	; 0xb0e0 <follow_path+0x2b2>
    b1f8:	f7 01       	movw	r30, r14
    b1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    b1fc:	85 3e       	cpi	r24, 0xE5	; 229
    b1fe:	11 f4       	brne	.+4      	; 0xb204 <follow_path+0x3d6>
    b200:	25 e0       	ldi	r18, 0x05	; 5
    b202:	24 8f       	std	Z+28, r18	; 0x1c
    b204:	38 e0       	ldi	r19, 0x08	; 8
    b206:	83 16       	cp	r8, r19
    b208:	91 04       	cpc	r9, r1
    b20a:	21 f4       	brne	.+8      	; 0xb214 <follow_path+0x3e6>
    b20c:	8c 81       	ldd	r24, Y+4	; 0x04
    b20e:	88 0f       	add	r24, r24
    b210:	88 0f       	add	r24, r24
    b212:	8c 83       	std	Y+4, r24	; 0x04
    b214:	8c 81       	ldd	r24, Y+4	; 0x04
    b216:	8c 70       	andi	r24, 0x0C	; 12
    b218:	8c 30       	cpi	r24, 0x0C	; 12
    b21a:	21 f0       	breq	.+8      	; 0xb224 <follow_path+0x3f6>
    b21c:	8c 81       	ldd	r24, Y+4	; 0x04
    b21e:	83 70       	andi	r24, 0x03	; 3
    b220:	83 30       	cpi	r24, 0x03	; 3
    b222:	19 f4       	brne	.+6      	; 0xb22a <follow_path+0x3fc>
    b224:	9b 81       	ldd	r25, Y+3	; 0x03
    b226:	92 60       	ori	r25, 0x02	; 2
    b228:	9b 83       	std	Y+3, r25	; 0x03
    b22a:	ab 81       	ldd	r26, Y+3	; 0x03
    b22c:	a1 fd       	sbrc	r26, 1
    b22e:	0b c0       	rjmp	.+22     	; 0xb246 <follow_path+0x418>
    b230:	bc 81       	ldd	r27, Y+4	; 0x04
    b232:	b0 ff       	sbrs	r27, 0
    b234:	02 c0       	rjmp	.+4      	; 0xb23a <follow_path+0x40c>
    b236:	a0 61       	ori	r26, 0x10	; 16
    b238:	ab 83       	std	Y+3, r26	; 0x03
    b23a:	ec 81       	ldd	r30, Y+4	; 0x04
    b23c:	e2 ff       	sbrs	r30, 2
    b23e:	03 c0       	rjmp	.+6      	; 0xb246 <follow_path+0x418>
    b240:	fb 81       	ldd	r31, Y+3	; 0x03
    b242:	f8 60       	ori	r31, 0x08	; 8
    b244:	fb 83       	std	Y+3, r31	; 0x03
    b246:	2b 81       	ldd	r18, Y+3	; 0x03
    b248:	f7 01       	movw	r30, r14
    b24a:	27 a3       	std	Z+39, r18	; 0x27
    b24c:	a2 ce       	rjmp	.-700    	; 0xaf92 <follow_path+0x164>
    b24e:	86 e0       	ldi	r24, 0x06	; 6
    b250:	90 e0       	ldi	r25, 0x00	; 0
    b252:	a1 ce       	rjmp	.-702    	; 0xaf96 <follow_path+0x168>
    b254:	84 30       	cpi	r24, 0x04	; 4
    b256:	91 05       	cpc	r25, r1
    b258:	b9 f4       	brne	.+46     	; 0xb288 <follow_path+0x45a>
    b25a:	32 2f       	mov	r19, r18
    b25c:	34 70       	andi	r19, 0x04	; 4
    b25e:	25 ff       	sbrs	r18, 5
    b260:	08 c0       	rjmp	.+16     	; 0xb272 <follow_path+0x444>
    b262:	33 23       	and	r19, r19
    b264:	09 f4       	brne	.+2      	; 0xb268 <follow_path+0x43a>
    b266:	b8 ce       	rjmp	.-656    	; 0xafd8 <follow_path+0x1aa>
    b268:	80 e8       	ldi	r24, 0x80	; 128
    b26a:	87 a3       	std	Z+39, r24	; 0x27
    b26c:	80 e0       	ldi	r24, 0x00	; 0
    b26e:	90 e0       	ldi	r25, 0x00	; 0
    b270:	0b c0       	rjmp	.+22     	; 0xb288 <follow_path+0x45a>
    b272:	31 11       	cpse	r19, r1
    b274:	09 c0       	rjmp	.+18     	; 0xb288 <follow_path+0x45a>
    b276:	85 e0       	ldi	r24, 0x05	; 5
    b278:	90 e0       	ldi	r25, 0x00	; 0
    b27a:	06 c0       	rjmp	.+12     	; 0xb288 <follow_path+0x45a>
    b27c:	fb e0       	ldi	r31, 0x0B	; 11
    b27e:	8f 16       	cp	r8, r31
    b280:	91 04       	cpc	r9, r1
    b282:	09 f0       	breq	.+2      	; 0xb286 <follow_path+0x458>
    b284:	4f cf       	rjmp	.-354    	; 0xb124 <follow_path+0x2f6>
    b286:	3d cf       	rjmp	.-390    	; 0xb102 <follow_path+0x2d4>
    b288:	2a 96       	adiw	r28, 0x0a	; 10
    b28a:	e2 e1       	ldi	r30, 0x12	; 18
    b28c:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000b290 <f_mount>:
    b290:	a6 e0       	ldi	r26, 0x06	; 6
    b292:	b0 e0       	ldi	r27, 0x00	; 0
    b294:	ee e4       	ldi	r30, 0x4E	; 78
    b296:	f9 e5       	ldi	r31, 0x59	; 89
    b298:	0c 94 a0 e0 	jmp	0x1c140	; 0x1c140 <__prologue_saves__+0x1e>
    b29c:	9c 83       	std	Y+4, r25	; 0x04
    b29e:	8b 83       	std	Y+3, r24	; 0x03
    b2a0:	7e 83       	std	Y+6, r23	; 0x06
    b2a2:	6d 83       	std	Y+5, r22	; 0x05
    b2a4:	14 2f       	mov	r17, r20
    b2a6:	7a 83       	std	Y+2, r23	; 0x02
    b2a8:	69 83       	std	Y+1, r22	; 0x01
    b2aa:	ce 01       	movw	r24, r28
    b2ac:	01 96       	adiw	r24, 0x01	; 1
    b2ae:	0e 94 9e 47 	call	0x8f3c	; 0x8f3c <get_ldnumber>
    b2b2:	97 fd       	sbrc	r25, 7
    b2b4:	20 c0       	rjmp	.+64     	; 0xb2f6 <f_mount+0x66>
    b2b6:	88 0f       	add	r24, r24
    b2b8:	99 1f       	adc	r25, r25
    b2ba:	fc 01       	movw	r30, r24
    b2bc:	e6 5f       	subi	r30, 0xF6	; 246
    b2be:	f7 4e       	sbci	r31, 0xE7	; 231
    b2c0:	01 90       	ld	r0, Z+
    b2c2:	f0 81       	ld	r31, Z
    b2c4:	e0 2d       	mov	r30, r0
    b2c6:	30 97       	sbiw	r30, 0x00	; 0
    b2c8:	09 f0       	breq	.+2      	; 0xb2cc <f_mount+0x3c>
    b2ca:	10 82       	st	Z, r1
    b2cc:	eb 81       	ldd	r30, Y+3	; 0x03
    b2ce:	fc 81       	ldd	r31, Y+4	; 0x04
    b2d0:	30 97       	sbiw	r30, 0x00	; 0
    b2d2:	09 f0       	breq	.+2      	; 0xb2d6 <f_mount+0x46>
    b2d4:	10 82       	st	Z, r1
    b2d6:	dc 01       	movw	r26, r24
    b2d8:	a6 5f       	subi	r26, 0xF6	; 246
    b2da:	b7 4e       	sbci	r27, 0xE7	; 231
    b2dc:	ed 93       	st	X+, r30
    b2de:	fc 93       	st	X, r31
    b2e0:	11 23       	and	r17, r17
    b2e2:	61 f0       	breq	.+24     	; 0xb2fc <f_mount+0x6c>
    b2e4:	40 e0       	ldi	r20, 0x00	; 0
    b2e6:	be 01       	movw	r22, r28
    b2e8:	6d 5f       	subi	r22, 0xFD	; 253
    b2ea:	7f 4f       	sbci	r23, 0xFF	; 255
    b2ec:	ce 01       	movw	r24, r28
    b2ee:	05 96       	adiw	r24, 0x05	; 5
    b2f0:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    b2f4:	05 c0       	rjmp	.+10     	; 0xb300 <f_mount+0x70>
    b2f6:	8b e0       	ldi	r24, 0x0B	; 11
    b2f8:	90 e0       	ldi	r25, 0x00	; 0
    b2fa:	02 c0       	rjmp	.+4      	; 0xb300 <f_mount+0x70>
    b2fc:	80 e0       	ldi	r24, 0x00	; 0
    b2fe:	90 e0       	ldi	r25, 0x00	; 0
    b300:	26 96       	adiw	r28, 0x06	; 6
    b302:	e3 e0       	ldi	r30, 0x03	; 3
    b304:	0c 94 bc e0 	jmp	0x1c178	; 0x1c178 <__epilogue_restores__+0x1e>

0000b308 <f_open>:
    b308:	a6 e3       	ldi	r26, 0x36	; 54
    b30a:	b0 e0       	ldi	r27, 0x00	; 0
    b30c:	ea e8       	ldi	r30, 0x8A	; 138
    b30e:	f9 e5       	ldi	r31, 0x59	; 89
    b310:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    b314:	7a ab       	std	Y+50, r23	; 0x32
    b316:	69 ab       	std	Y+49, r22	; 0x31
    b318:	00 97       	sbiw	r24, 0x00	; 0
    b31a:	09 f4       	brne	.+2      	; 0xb31e <f_open+0x16>
    b31c:	93 c1       	rjmp	.+806    	; 0xb644 <f_open+0x33c>
    b31e:	74 2e       	mov	r7, r20
    b320:	7c 01       	movw	r14, r24
    b322:	24 2f       	mov	r18, r20
    b324:	2f 73       	andi	r18, 0x3F	; 63
    b326:	32 2e       	mov	r3, r18
    b328:	42 2f       	mov	r20, r18
    b32a:	be 01       	movw	r22, r28
    b32c:	61 5d       	subi	r22, 0xD1	; 209
    b32e:	7f 4f       	sbci	r23, 0xFF	; 255
    b330:	ce 01       	movw	r24, r28
    b332:	c1 96       	adiw	r24, 0x31	; 49
    b334:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    b338:	00 97       	sbiw	r24, 0x00	; 0
    b33a:	09 f0       	breq	.+2      	; 0xb33e <f_open+0x36>
    b33c:	7d c1       	rjmp	.+762    	; 0xb638 <f_open+0x330>
    b33e:	8f a5       	ldd	r24, Y+47	; 0x2f
    b340:	98 a9       	ldd	r25, Y+48	; 0x30
    b342:	9a 83       	std	Y+2, r25	; 0x02
    b344:	89 83       	std	Y+1, r24	; 0x01
    b346:	80 e0       	ldi	r24, 0x00	; 0
    b348:	92 e0       	ldi	r25, 0x02	; 2
    b34a:	0e 94 da 68 	call	0xd1b4	; 0xd1b4 <ff_memalloc>
    b34e:	5c 01       	movw	r10, r24
    b350:	00 97       	sbiw	r24, 0x00	; 0
    b352:	09 f4       	brne	.+2      	; 0xb356 <f_open+0x4e>
    b354:	79 c1       	rjmp	.+754    	; 0xb648 <f_open+0x340>
    b356:	ef a5       	ldd	r30, Y+47	; 0x2f
    b358:	f8 a9       	ldd	r31, Y+48	; 0x30
    b35a:	94 87       	std	Z+12, r25	; 0x0c
    b35c:	83 87       	std	Z+11, r24	; 0x0b
    b35e:	69 a9       	ldd	r22, Y+49	; 0x31
    b360:	7a a9       	ldd	r23, Y+50	; 0x32
    b362:	ce 01       	movw	r24, r28
    b364:	01 96       	adiw	r24, 0x01	; 1
    b366:	63 dd       	rcall	.-1338   	; 0xae2e <follow_path>
    b368:	8c 01       	movw	r16, r24
    b36a:	89 2b       	or	r24, r25
    b36c:	29 f4       	brne	.+10     	; 0xb378 <f_open+0x70>
    b36e:	88 a5       	ldd	r24, Y+40	; 0x28
    b370:	87 ff       	sbrs	r24, 7
    b372:	02 c0       	rjmp	.+4      	; 0xb378 <f_open+0x70>
    b374:	06 e0       	ldi	r16, 0x06	; 6
    b376:	10 e0       	ldi	r17, 0x00	; 0
    b378:	87 2d       	mov	r24, r7
    b37a:	8c 71       	andi	r24, 0x1C	; 28
    b37c:	09 f4       	brne	.+2      	; 0xb380 <f_open+0x78>
    b37e:	75 c0       	rjmp	.+234    	; 0xb46a <f_open+0x162>
    b380:	01 15       	cp	r16, r1
    b382:	11 05       	cpc	r17, r1
    b384:	79 f0       	breq	.+30     	; 0xb3a4 <f_open+0x9c>
    b386:	04 30       	cpi	r16, 0x04	; 4
    b388:	11 05       	cpc	r17, r1
    b38a:	09 f0       	breq	.+2      	; 0xb38e <f_open+0x86>
    b38c:	6d c1       	rjmp	.+730    	; 0xb668 <f_open+0x360>
    b38e:	ce 01       	movw	r24, r28
    b390:	01 96       	adiw	r24, 0x01	; 1
    b392:	bf db       	rcall	.-2178   	; 0xab12 <dir_register>
    b394:	8c 01       	movw	r16, r24
    b396:	89 2b       	or	r24, r25
    b398:	09 f0       	breq	.+2      	; 0xb39c <f_open+0x94>
    b39a:	66 c1       	rjmp	.+716    	; 0xb668 <f_open+0x360>
    b39c:	33 2d       	mov	r19, r3
    b39e:	38 60       	ori	r19, 0x08	; 8
    b3a0:	33 2e       	mov	r3, r19
    b3a2:	06 c0       	rjmp	.+12     	; 0xb3b0 <f_open+0xa8>
    b3a4:	8d 81       	ldd	r24, Y+5	; 0x05
    b3a6:	81 71       	andi	r24, 0x11	; 17
    b3a8:	09 f0       	breq	.+2      	; 0xb3ac <f_open+0xa4>
    b3aa:	5c c1       	rjmp	.+696    	; 0xb664 <f_open+0x35c>
    b3ac:	72 fc       	sbrc	r7, 2
    b3ae:	51 c1       	rjmp	.+674    	; 0xb652 <f_open+0x34a>
    b3b0:	33 fe       	sbrs	r3, 3
    b3b2:	6b c0       	rjmp	.+214    	; 0xb48a <f_open+0x182>
    b3b4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b3b6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b3b8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3ba:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3bc:	b8 01       	movw	r22, r16
    b3be:	80 81       	ld	r24, Z
    b3c0:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    b3c4:	2b 01       	movw	r4, r22
    b3c6:	3c 01       	movw	r6, r24
    b3c8:	0e 94 4b 70 	call	0xe096	; 0xe096 <get_fattime>
    b3cc:	ab 01       	movw	r20, r22
    b3ce:	bc 01       	movw	r22, r24
    b3d0:	c8 01       	movw	r24, r16
    b3d2:	0e 96       	adiw	r24, 0x0e	; 14
    b3d4:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
    b3d8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3da:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3dc:	80 e2       	ldi	r24, 0x20	; 32
    b3de:	83 87       	std	Z+11, r24	; 0x0b
    b3e0:	af a5       	ldd	r26, Y+47	; 0x2f
    b3e2:	b8 a9       	ldd	r27, Y+48	; 0x30
    b3e4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3e6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3e8:	12 8e       	std	Z+26, r1	; 0x1a
    b3ea:	13 8e       	std	Z+27, r1	; 0x1b
    b3ec:	8c 91       	ld	r24, X
    b3ee:	83 30       	cpi	r24, 0x03	; 3
    b3f0:	11 f4       	brne	.+4      	; 0xb3f6 <f_open+0xee>
    b3f2:	14 8a       	std	Z+20, r1	; 0x14
    b3f4:	15 8a       	std	Z+21, r1	; 0x15
    b3f6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b3f8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b3fa:	14 8e       	std	Z+28, r1	; 0x1c
    b3fc:	15 8e       	std	Z+29, r1	; 0x1d
    b3fe:	16 8e       	std	Z+30, r1	; 0x1e
    b400:	17 8e       	std	Z+31, r1	; 0x1f
    b402:	81 e0       	ldi	r24, 0x01	; 1
    b404:	fd 01       	movw	r30, r26
    b406:	83 83       	std	Z+3, r24	; 0x03
    b408:	41 14       	cp	r4, r1
    b40a:	51 04       	cpc	r5, r1
    b40c:	61 04       	cpc	r6, r1
    b40e:	71 04       	cpc	r7, r1
    b410:	c9 f1       	breq	.+114    	; 0xb484 <f_open+0x17c>
    b412:	21 a9       	ldd	r18, Z+49	; 0x31
    b414:	32 a9       	ldd	r19, Z+50	; 0x32
    b416:	43 a9       	ldd	r20, Z+51	; 0x33
    b418:	54 a9       	ldd	r21, Z+52	; 0x34
    b41a:	2b ab       	std	Y+51, r18	; 0x33
    b41c:	3c ab       	std	Y+52, r19	; 0x34
    b41e:	4d ab       	std	Y+53, r20	; 0x35
    b420:	5e ab       	std	Y+54, r21	; 0x36
    b422:	00 e0       	ldi	r16, 0x00	; 0
    b424:	10 e0       	ldi	r17, 0x00	; 0
    b426:	98 01       	movw	r18, r16
    b428:	b3 01       	movw	r22, r6
    b42a:	a2 01       	movw	r20, r4
    b42c:	ce 01       	movw	r24, r28
    b42e:	01 96       	adiw	r24, 0x01	; 1
    b430:	0e 94 b8 51 	call	0xa370	; 0xa370 <remove_chain>
    b434:	8c 01       	movw	r16, r24
    b436:	89 2b       	or	r24, r25
    b438:	09 f0       	breq	.+2      	; 0xb43c <f_open+0x134>
    b43a:	16 c1       	rjmp	.+556    	; 0xb668 <f_open+0x360>
    b43c:	4b a9       	ldd	r20, Y+51	; 0x33
    b43e:	5c a9       	ldd	r21, Y+52	; 0x34
    b440:	6d a9       	ldd	r22, Y+53	; 0x35
    b442:	7e a9       	ldd	r23, Y+54	; 0x36
    b444:	8f a5       	ldd	r24, Y+47	; 0x2f
    b446:	98 a9       	ldd	r25, Y+48	; 0x30
    b448:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    b44c:	8c 01       	movw	r16, r24
    b44e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b450:	f8 a9       	ldd	r31, Y+48	; 0x30
    b452:	21 e0       	ldi	r18, 0x01	; 1
    b454:	42 1a       	sub	r4, r18
    b456:	51 08       	sbc	r5, r1
    b458:	61 08       	sbc	r6, r1
    b45a:	71 08       	sbc	r7, r1
    b45c:	45 86       	std	Z+13, r4	; 0x0d
    b45e:	56 86       	std	Z+14, r5	; 0x0e
    b460:	67 86       	std	Z+15, r6	; 0x0f
    b462:	70 8a       	std	Z+16, r7	; 0x10
    b464:	89 2b       	or	r24, r25
    b466:	61 f0       	breq	.+24     	; 0xb480 <f_open+0x178>
    b468:	ff c0       	rjmp	.+510    	; 0xb668 <f_open+0x360>
    b46a:	01 15       	cp	r16, r1
    b46c:	11 05       	cpc	r17, r1
    b46e:	09 f0       	breq	.+2      	; 0xb472 <f_open+0x16a>
    b470:	fb c0       	rjmp	.+502    	; 0xb668 <f_open+0x360>
    b472:	8d 81       	ldd	r24, Y+5	; 0x05
    b474:	84 fd       	sbrc	r24, 4
    b476:	f3 c0       	rjmp	.+486    	; 0xb65e <f_open+0x356>
    b478:	71 fe       	sbrs	r7, 1
    b47a:	02 c0       	rjmp	.+4      	; 0xb480 <f_open+0x178>
    b47c:	80 fd       	sbrc	r24, 0
    b47e:	f2 c0       	rjmp	.+484    	; 0xb664 <f_open+0x35c>
    b480:	33 fe       	sbrs	r3, 3
    b482:	03 c0       	rjmp	.+6      	; 0xb48a <f_open+0x182>
    b484:	33 2d       	mov	r19, r3
    b486:	30 64       	ori	r19, 0x40	; 64
    b488:	33 2e       	mov	r3, r19
    b48a:	0f a5       	ldd	r16, Y+47	; 0x2f
    b48c:	18 a9       	ldd	r17, Y+48	; 0x30
    b48e:	f8 01       	movw	r30, r16
    b490:	81 a9       	ldd	r24, Z+49	; 0x31
    b492:	92 a9       	ldd	r25, Z+50	; 0x32
    b494:	a3 a9       	ldd	r26, Z+51	; 0x33
    b496:	b4 a9       	ldd	r27, Z+52	; 0x34
    b498:	f7 01       	movw	r30, r14
    b49a:	84 8f       	std	Z+28, r24	; 0x1c
    b49c:	95 8f       	std	Z+29, r25	; 0x1d
    b49e:	a6 8f       	std	Z+30, r26	; 0x1e
    b4a0:	b7 8f       	std	Z+31, r27	; 0x1f
    b4a2:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b4a4:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b4a6:	71 a2       	std	Z+33, r7	; 0x21
    b4a8:	60 a2       	std	Z+32, r6	; 0x20
    b4aa:	b3 01       	movw	r22, r6
    b4ac:	f8 01       	movw	r30, r16
    b4ae:	80 81       	ld	r24, Z
    b4b0:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    b4b4:	f7 01       	movw	r30, r14
    b4b6:	66 83       	std	Z+6, r22	; 0x06
    b4b8:	77 83       	std	Z+7, r23	; 0x07
    b4ba:	80 87       	std	Z+8, r24	; 0x08
    b4bc:	91 87       	std	Z+9, r25	; 0x09
    b4be:	c3 01       	movw	r24, r6
    b4c0:	4c 96       	adiw	r24, 0x1c	; 28
    b4c2:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <ld_dword>
    b4c6:	f7 01       	movw	r30, r14
    b4c8:	62 87       	std	Z+10, r22	; 0x0a
    b4ca:	73 87       	std	Z+11, r23	; 0x0b
    b4cc:	84 87       	std	Z+12, r24	; 0x0c
    b4ce:	95 87       	std	Z+13, r25	; 0x0d
    b4d0:	13 a2       	std	Z+35, r1	; 0x23
    b4d2:	12 a2       	std	Z+34, r1	; 0x22
    b4d4:	11 83       	std	Z+1, r17	; 0x01
    b4d6:	00 83       	st	Z, r16
    b4d8:	f8 01       	movw	r30, r16
    b4da:	85 81       	ldd	r24, Z+5	; 0x05
    b4dc:	96 81       	ldd	r25, Z+6	; 0x06
    b4de:	f7 01       	movw	r30, r14
    b4e0:	93 83       	std	Z+3, r25	; 0x03
    b4e2:	82 83       	std	Z+2, r24	; 0x02
    b4e4:	36 86       	std	Z+14, r3	; 0x0e
    b4e6:	17 86       	std	Z+15, r1	; 0x0f
    b4e8:	10 8e       	std	Z+24, r1	; 0x18
    b4ea:	11 8e       	std	Z+25, r1	; 0x19
    b4ec:	12 8e       	std	Z+26, r1	; 0x1a
    b4ee:	13 8e       	std	Z+27, r1	; 0x1b
    b4f0:	10 8a       	std	Z+16, r1	; 0x10
    b4f2:	11 8a       	std	Z+17, r1	; 0x11
    b4f4:	12 8a       	std	Z+18, r1	; 0x12
    b4f6:	13 8a       	std	Z+19, r1	; 0x13
    b4f8:	67 01       	movw	r12, r14
    b4fa:	f4 e2       	ldi	r31, 0x24	; 36
    b4fc:	cf 0e       	add	r12, r31
    b4fe:	d1 1c       	adc	r13, r1
    b500:	40 e0       	ldi	r20, 0x00	; 0
    b502:	52 e0       	ldi	r21, 0x02	; 2
    b504:	60 e0       	ldi	r22, 0x00	; 0
    b506:	70 e0       	ldi	r23, 0x00	; 0
    b508:	c6 01       	movw	r24, r12
    b50a:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <mem_set>
    b50e:	35 fc       	sbrc	r3, 5
    b510:	03 c0       	rjmp	.+6      	; 0xb518 <f_open+0x210>
    b512:	00 e0       	ldi	r16, 0x00	; 0
    b514:	10 e0       	ldi	r17, 0x00	; 0
    b516:	89 c0       	rjmp	.+274    	; 0xb62a <f_open+0x322>
    b518:	f7 01       	movw	r30, r14
    b51a:	62 84       	ldd	r6, Z+10	; 0x0a
    b51c:	73 84       	ldd	r7, Z+11	; 0x0b
    b51e:	84 84       	ldd	r8, Z+12	; 0x0c
    b520:	95 84       	ldd	r9, Z+13	; 0x0d
    b522:	61 14       	cp	r6, r1
    b524:	71 04       	cpc	r7, r1
    b526:	81 04       	cpc	r8, r1
    b528:	91 04       	cpc	r9, r1
    b52a:	99 f3       	breq	.-26     	; 0xb512 <f_open+0x20a>
    b52c:	60 8a       	std	Z+16, r6	; 0x10
    b52e:	71 8a       	std	Z+17, r7	; 0x11
    b530:	82 8a       	std	Z+18, r8	; 0x12
    b532:	93 8a       	std	Z+19, r9	; 0x13
    b534:	ef a5       	ldd	r30, Y+47	; 0x2f
    b536:	f8 a9       	ldd	r31, Y+48	; 0x30
    b538:	21 84       	ldd	r2, Z+9	; 0x09
    b53a:	32 84       	ldd	r3, Z+10	; 0x0a
    b53c:	c1 01       	movw	r24, r2
    b53e:	a0 e0       	ldi	r26, 0x00	; 0
    b540:	b0 e0       	ldi	r27, 0x00	; 0
    b542:	1c 01       	movw	r2, r24
    b544:	2d 01       	movw	r4, r26
    b546:	59 e0       	ldi	r21, 0x09	; 9
    b548:	22 0c       	add	r2, r2
    b54a:	33 1c       	adc	r3, r3
    b54c:	44 1c       	adc	r4, r4
    b54e:	55 1c       	adc	r5, r5
    b550:	5a 95       	dec	r21
    b552:	d1 f7       	brne	.-12     	; 0xb548 <f_open+0x240>
    b554:	f7 01       	movw	r30, r14
    b556:	46 81       	ldd	r20, Z+6	; 0x06
    b558:	57 81       	ldd	r21, Z+7	; 0x07
    b55a:	60 85       	ldd	r22, Z+8	; 0x08
    b55c:	71 85       	ldd	r23, Z+9	; 0x09
    b55e:	26 14       	cp	r2, r6
    b560:	37 04       	cpc	r3, r7
    b562:	48 04       	cpc	r4, r8
    b564:	59 04       	cpc	r5, r9
    b566:	f0 f4       	brcc	.+60     	; 0xb5a4 <f_open+0x29c>
    b568:	f7 01       	movw	r30, r14
    b56a:	80 81       	ld	r24, Z
    b56c:	91 81       	ldd	r25, Z+1	; 0x01
    b56e:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <get_fat.isra.10>
    b572:	ab 01       	movw	r20, r22
    b574:	bc 01       	movw	r22, r24
    b576:	d4 01       	movw	r26, r8
    b578:	c3 01       	movw	r24, r6
    b57a:	82 19       	sub	r24, r2
    b57c:	93 09       	sbc	r25, r3
    b57e:	a4 09       	sbc	r26, r4
    b580:	b5 09       	sbc	r27, r5
    b582:	3c 01       	movw	r6, r24
    b584:	4d 01       	movw	r8, r26
    b586:	42 30       	cpi	r20, 0x02	; 2
    b588:	51 05       	cpc	r21, r1
    b58a:	61 05       	cpc	r22, r1
    b58c:	71 05       	cpc	r23, r1
    b58e:	08 f4       	brcc	.+2      	; 0xb592 <f_open+0x28a>
    b590:	63 c0       	rjmp	.+198    	; 0xb658 <f_open+0x350>
    b592:	4f 3f       	cpi	r20, 0xFF	; 255
    b594:	ff ef       	ldi	r31, 0xFF	; 255
    b596:	5f 07       	cpc	r21, r31
    b598:	6f 07       	cpc	r22, r31
    b59a:	7f 07       	cpc	r23, r31
    b59c:	01 f7       	brne	.-64     	; 0xb55e <f_open+0x256>
    b59e:	01 e0       	ldi	r16, 0x01	; 1
    b5a0:	10 e0       	ldi	r17, 0x00	; 0
    b5a2:	02 c0       	rjmp	.+4      	; 0xb5a8 <f_open+0x2a0>
    b5a4:	00 e0       	ldi	r16, 0x00	; 0
    b5a6:	10 e0       	ldi	r17, 0x00	; 0
    b5a8:	f7 01       	movw	r30, r14
    b5aa:	44 8b       	std	Z+20, r20	; 0x14
    b5ac:	55 8b       	std	Z+21, r21	; 0x15
    b5ae:	66 8b       	std	Z+22, r22	; 0x16
    b5b0:	77 8b       	std	Z+23, r23	; 0x17
    b5b2:	01 15       	cp	r16, r1
    b5b4:	11 05       	cpc	r17, r1
    b5b6:	c9 f5       	brne	.+114    	; 0xb62a <f_open+0x322>
    b5b8:	d4 01       	movw	r26, r8
    b5ba:	c3 01       	movw	r24, r6
    b5bc:	91 70       	andi	r25, 0x01	; 1
    b5be:	aa 27       	eor	r26, r26
    b5c0:	bb 27       	eor	r27, r27
    b5c2:	89 2b       	or	r24, r25
    b5c4:	8a 2b       	or	r24, r26
    b5c6:	8b 2b       	or	r24, r27
    b5c8:	09 f4       	brne	.+2      	; 0xb5cc <f_open+0x2c4>
    b5ca:	a3 cf       	rjmp	.-186    	; 0xb512 <f_open+0x20a>
    b5cc:	4f a4       	ldd	r4, Y+47	; 0x2f
    b5ce:	58 a8       	ldd	r5, Y+48	; 0x30
    b5d0:	c2 01       	movw	r24, r4
    b5d2:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    b5d6:	61 15       	cp	r22, r1
    b5d8:	71 05       	cpc	r23, r1
    b5da:	81 05       	cpc	r24, r1
    b5dc:	91 05       	cpc	r25, r1
    b5de:	19 f1       	breq	.+70     	; 0xb626 <f_open+0x31e>
    b5e0:	94 01       	movw	r18, r8
    b5e2:	83 01       	movw	r16, r6
    b5e4:	49 e0       	ldi	r20, 0x09	; 9
    b5e6:	36 95       	lsr	r19
    b5e8:	27 95       	ror	r18
    b5ea:	17 95       	ror	r17
    b5ec:	07 95       	ror	r16
    b5ee:	4a 95       	dec	r20
    b5f0:	d1 f7       	brne	.-12     	; 0xb5e6 <f_open+0x2de>
    b5f2:	a9 01       	movw	r20, r18
    b5f4:	98 01       	movw	r18, r16
    b5f6:	26 0f       	add	r18, r22
    b5f8:	37 1f       	adc	r19, r23
    b5fa:	48 1f       	adc	r20, r24
    b5fc:	59 1f       	adc	r21, r25
    b5fe:	f7 01       	movw	r30, r14
    b600:	20 8f       	std	Z+24, r18	; 0x18
    b602:	31 8f       	std	Z+25, r19	; 0x19
    b604:	42 8f       	std	Z+26, r20	; 0x1a
    b606:	53 8f       	std	Z+27, r21	; 0x1b
    b608:	01 e0       	ldi	r16, 0x01	; 1
    b60a:	10 e0       	ldi	r17, 0x00	; 0
    b60c:	b6 01       	movw	r22, r12
    b60e:	f2 01       	movw	r30, r4
    b610:	81 81       	ldd	r24, Z+1	; 0x01
    b612:	0e 94 96 69 	call	0xd32c	; 0xd32c <disk_read>
    b616:	31 e0       	ldi	r19, 0x01	; 1
    b618:	20 e0       	ldi	r18, 0x00	; 0
    b61a:	89 2b       	or	r24, r25
    b61c:	09 f4       	brne	.+2      	; 0xb620 <f_open+0x318>
    b61e:	30 e0       	ldi	r19, 0x00	; 0
    b620:	03 2f       	mov	r16, r19
    b622:	12 2f       	mov	r17, r18
    b624:	02 c0       	rjmp	.+4      	; 0xb62a <f_open+0x322>
    b626:	02 e0       	ldi	r16, 0x02	; 2
    b628:	10 e0       	ldi	r17, 0x00	; 0
    b62a:	c5 01       	movw	r24, r10
    b62c:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <ff_memfree>
    b630:	01 15       	cp	r16, r1
    b632:	11 05       	cpc	r17, r1
    b634:	59 f0       	breq	.+22     	; 0xb64c <f_open+0x344>
    b636:	01 c0       	rjmp	.+2      	; 0xb63a <f_open+0x332>
    b638:	8c 01       	movw	r16, r24
    b63a:	f7 01       	movw	r30, r14
    b63c:	11 82       	std	Z+1, r1	; 0x01
    b63e:	10 82       	st	Z, r1
    b640:	c8 01       	movw	r24, r16
    b642:	16 c0       	rjmp	.+44     	; 0xb670 <f_open+0x368>
    b644:	89 e0       	ldi	r24, 0x09	; 9
    b646:	03 c0       	rjmp	.+6      	; 0xb64e <f_open+0x346>
    b648:	81 e1       	ldi	r24, 0x11	; 17
    b64a:	01 c0       	rjmp	.+2      	; 0xb64e <f_open+0x346>
    b64c:	80 e0       	ldi	r24, 0x00	; 0
    b64e:	90 e0       	ldi	r25, 0x00	; 0
    b650:	0f c0       	rjmp	.+30     	; 0xb670 <f_open+0x368>
    b652:	08 e0       	ldi	r16, 0x08	; 8
    b654:	10 e0       	ldi	r17, 0x00	; 0
    b656:	08 c0       	rjmp	.+16     	; 0xb668 <f_open+0x360>
    b658:	02 e0       	ldi	r16, 0x02	; 2
    b65a:	10 e0       	ldi	r17, 0x00	; 0
    b65c:	a5 cf       	rjmp	.-182    	; 0xb5a8 <f_open+0x2a0>
    b65e:	04 e0       	ldi	r16, 0x04	; 4
    b660:	10 e0       	ldi	r17, 0x00	; 0
    b662:	02 c0       	rjmp	.+4      	; 0xb668 <f_open+0x360>
    b664:	07 e0       	ldi	r16, 0x07	; 7
    b666:	10 e0       	ldi	r17, 0x00	; 0
    b668:	c5 01       	movw	r24, r10
    b66a:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <ff_memfree>
    b66e:	e5 cf       	rjmp	.-54     	; 0xb63a <f_open+0x332>
    b670:	e6 96       	adiw	r28, 0x36	; 54
    b672:	e2 e1       	ldi	r30, 0x12	; 18
    b674:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000b678 <f_read>:
    b678:	a6 e0       	ldi	r26, 0x06	; 6
    b67a:	b0 e0       	ldi	r27, 0x00	; 0
    b67c:	e2 e4       	ldi	r30, 0x42	; 66
    b67e:	fb e5       	ldi	r31, 0x5B	; 91
    b680:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    b684:	7c 01       	movw	r14, r24
    b686:	4b 01       	movw	r8, r22
    b688:	5a 01       	movw	r10, r20
    b68a:	3e 83       	std	Y+6, r19	; 0x06
    b68c:	2d 83       	std	Y+5, r18	; 0x05
    b68e:	f9 01       	movw	r30, r18
    b690:	11 82       	std	Z+1, r1	; 0x01
    b692:	10 82       	st	Z, r1
    b694:	be 01       	movw	r22, r28
    b696:	6f 5f       	subi	r22, 0xFF	; 255
    b698:	7f 4f       	sbci	r23, 0xFF	; 255
    b69a:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    b69e:	00 97       	sbiw	r24, 0x00	; 0
    b6a0:	09 f0       	breq	.+2      	; 0xb6a4 <f_read+0x2c>
    b6a2:	31 c1       	rjmp	.+610    	; 0xb906 <f_read+0x28e>
    b6a4:	f7 01       	movw	r30, r14
    b6a6:	87 85       	ldd	r24, Z+15	; 0x0f
    b6a8:	90 e0       	ldi	r25, 0x00	; 0
    b6aa:	00 97       	sbiw	r24, 0x00	; 0
    b6ac:	09 f0       	breq	.+2      	; 0xb6b0 <f_read+0x38>
    b6ae:	2b c1       	rjmp	.+598    	; 0xb906 <f_read+0x28e>
    b6b0:	86 85       	ldd	r24, Z+14	; 0x0e
    b6b2:	80 ff       	sbrs	r24, 0
    b6b4:	26 c1       	rjmp	.+588    	; 0xb902 <f_read+0x28a>
    b6b6:	82 85       	ldd	r24, Z+10	; 0x0a
    b6b8:	93 85       	ldd	r25, Z+11	; 0x0b
    b6ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    b6bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    b6be:	40 89       	ldd	r20, Z+16	; 0x10
    b6c0:	51 89       	ldd	r21, Z+17	; 0x11
    b6c2:	62 89       	ldd	r22, Z+18	; 0x12
    b6c4:	73 89       	ldd	r23, Z+19	; 0x13
    b6c6:	84 1b       	sub	r24, r20
    b6c8:	95 0b       	sbc	r25, r21
    b6ca:	a6 0b       	sbc	r26, r22
    b6cc:	b7 0b       	sbc	r27, r23
    b6ce:	a5 01       	movw	r20, r10
    b6d0:	60 e0       	ldi	r22, 0x00	; 0
    b6d2:	70 e0       	ldi	r23, 0x00	; 0
    b6d4:	84 17       	cp	r24, r20
    b6d6:	95 07       	cpc	r25, r21
    b6d8:	a6 07       	cpc	r26, r22
    b6da:	b7 07       	cpc	r27, r23
    b6dc:	08 f4       	brcc	.+2      	; 0xb6e0 <f_read+0x68>
    b6de:	5c 01       	movw	r10, r24
    b6e0:	17 01       	movw	r2, r14
    b6e2:	f4 e2       	ldi	r31, 0x24	; 36
    b6e4:	2f 0e       	add	r2, r31
    b6e6:	31 1c       	adc	r3, r1
    b6e8:	a1 14       	cp	r10, r1
    b6ea:	b1 04       	cpc	r11, r1
    b6ec:	09 f4       	brne	.+2      	; 0xb6f0 <f_read+0x78>
    b6ee:	07 c1       	rjmp	.+526    	; 0xb8fe <f_read+0x286>
    b6f0:	f7 01       	movw	r30, r14
    b6f2:	40 89       	ldd	r20, Z+16	; 0x10
    b6f4:	51 89       	ldd	r21, Z+17	; 0x11
    b6f6:	62 89       	ldd	r22, Z+18	; 0x12
    b6f8:	73 89       	ldd	r23, Z+19	; 0x13
    b6fa:	db 01       	movw	r26, r22
    b6fc:	ca 01       	movw	r24, r20
    b6fe:	91 70       	andi	r25, 0x01	; 1
    b700:	aa 27       	eor	r26, r26
    b702:	bb 27       	eor	r27, r27
    b704:	89 2b       	or	r24, r25
    b706:	8a 2b       	or	r24, r26
    b708:	8b 2b       	or	r24, r27
    b70a:	09 f0       	breq	.+2      	; 0xb70e <f_read+0x96>
    b70c:	cb c0       	rjmp	.+406    	; 0xb8a4 <f_read+0x22c>
    b70e:	e9 81       	ldd	r30, Y+1	; 0x01
    b710:	fa 81       	ldd	r31, Y+2	; 0x02
    b712:	01 85       	ldd	r16, Z+9	; 0x09
    b714:	12 85       	ldd	r17, Z+10	; 0x0a
    b716:	01 50       	subi	r16, 0x01	; 1
    b718:	11 09       	sbc	r17, r1
    b71a:	db 01       	movw	r26, r22
    b71c:	ca 01       	movw	r24, r20
    b71e:	e9 e0       	ldi	r30, 0x09	; 9
    b720:	b6 95       	lsr	r27
    b722:	a7 95       	ror	r26
    b724:	97 95       	ror	r25
    b726:	87 95       	ror	r24
    b728:	ea 95       	dec	r30
    b72a:	d1 f7       	brne	.-12     	; 0xb720 <f_read+0xa8>
    b72c:	08 23       	and	r16, r24
    b72e:	19 23       	and	r17, r25
    b730:	01 15       	cp	r16, r1
    b732:	11 05       	cpc	r17, r1
    b734:	91 f5       	brne	.+100    	; 0xb79a <f_read+0x122>
    b736:	f7 01       	movw	r30, r14
    b738:	41 15       	cp	r20, r1
    b73a:	51 05       	cpc	r21, r1
    b73c:	61 05       	cpc	r22, r1
    b73e:	71 05       	cpc	r23, r1
    b740:	29 f4       	brne	.+10     	; 0xb74c <f_read+0xd4>
    b742:	66 81       	ldd	r22, Z+6	; 0x06
    b744:	77 81       	ldd	r23, Z+7	; 0x07
    b746:	80 85       	ldd	r24, Z+8	; 0x08
    b748:	91 85       	ldd	r25, Z+9	; 0x09
    b74a:	11 c0       	rjmp	.+34     	; 0xb76e <f_read+0xf6>
    b74c:	82 a1       	ldd	r24, Z+34	; 0x22
    b74e:	93 a1       	ldd	r25, Z+35	; 0x23
    b750:	89 2b       	or	r24, r25
    b752:	21 f0       	breq	.+8      	; 0xb75c <f_read+0xe4>
    b754:	c7 01       	movw	r24, r14
    b756:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <clmt_clust>
    b75a:	09 c0       	rjmp	.+18     	; 0xb76e <f_read+0xf6>
    b75c:	f7 01       	movw	r30, r14
    b75e:	44 89       	ldd	r20, Z+20	; 0x14
    b760:	55 89       	ldd	r21, Z+21	; 0x15
    b762:	66 89       	ldd	r22, Z+22	; 0x16
    b764:	77 89       	ldd	r23, Z+23	; 0x17
    b766:	80 81       	ld	r24, Z
    b768:	91 81       	ldd	r25, Z+1	; 0x01
    b76a:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <get_fat.isra.10>
    b76e:	62 30       	cpi	r22, 0x02	; 2
    b770:	71 05       	cpc	r23, r1
    b772:	81 05       	cpc	r24, r1
    b774:	91 05       	cpc	r25, r1
    b776:	10 f4       	brcc	.+4      	; 0xb77c <f_read+0x104>
    b778:	82 e0       	ldi	r24, 0x02	; 2
    b77a:	07 c0       	rjmp	.+14     	; 0xb78a <f_read+0x112>
    b77c:	6f 3f       	cpi	r22, 0xFF	; 255
    b77e:	ff ef       	ldi	r31, 0xFF	; 255
    b780:	7f 07       	cpc	r23, r31
    b782:	8f 07       	cpc	r24, r31
    b784:	9f 07       	cpc	r25, r31
    b786:	21 f4       	brne	.+8      	; 0xb790 <f_read+0x118>
    b788:	81 e0       	ldi	r24, 0x01	; 1
    b78a:	f7 01       	movw	r30, r14
    b78c:	87 87       	std	Z+15, r24	; 0x0f
    b78e:	ba c0       	rjmp	.+372    	; 0xb904 <f_read+0x28c>
    b790:	f7 01       	movw	r30, r14
    b792:	64 8b       	std	Z+20, r22	; 0x14
    b794:	75 8b       	std	Z+21, r23	; 0x15
    b796:	86 8b       	std	Z+22, r24	; 0x16
    b798:	97 8b       	std	Z+23, r25	; 0x17
    b79a:	89 81       	ldd	r24, Y+1	; 0x01
    b79c:	9a 81       	ldd	r25, Y+2	; 0x02
    b79e:	9c 83       	std	Y+4, r25	; 0x04
    b7a0:	8b 83       	std	Y+3, r24	; 0x03
    b7a2:	f7 01       	movw	r30, r14
    b7a4:	44 89       	ldd	r20, Z+20	; 0x14
    b7a6:	55 89       	ldd	r21, Z+21	; 0x15
    b7a8:	66 89       	ldd	r22, Z+22	; 0x16
    b7aa:	77 89       	ldd	r23, Z+23	; 0x17
    b7ac:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    b7b0:	61 15       	cp	r22, r1
    b7b2:	71 05       	cpc	r23, r1
    b7b4:	81 05       	cpc	r24, r1
    b7b6:	91 05       	cpc	r25, r1
    b7b8:	f9 f2       	breq	.-66     	; 0xb778 <f_read+0x100>
    b7ba:	2b 01       	movw	r4, r22
    b7bc:	3c 01       	movw	r6, r24
    b7be:	40 0e       	add	r4, r16
    b7c0:	51 1e       	adc	r5, r17
    b7c2:	61 1c       	adc	r6, r1
    b7c4:	71 1c       	adc	r7, r1
    b7c6:	65 01       	movw	r12, r10
    b7c8:	cd 2c       	mov	r12, r13
    b7ca:	dd 24       	eor	r13, r13
    b7cc:	c6 94       	lsr	r12
    b7ce:	c1 14       	cp	r12, r1
    b7d0:	d1 04       	cpc	r13, r1
    b7d2:	d1 f1       	breq	.+116    	; 0xb848 <f_read+0x1d0>
    b7d4:	eb 81       	ldd	r30, Y+3	; 0x03
    b7d6:	fc 81       	ldd	r31, Y+4	; 0x04
    b7d8:	81 85       	ldd	r24, Z+9	; 0x09
    b7da:	92 85       	ldd	r25, Z+10	; 0x0a
    b7dc:	98 01       	movw	r18, r16
    b7de:	2c 0d       	add	r18, r12
    b7e0:	3d 1d       	adc	r19, r13
    b7e2:	82 17       	cp	r24, r18
    b7e4:	93 07       	cpc	r25, r19
    b7e6:	18 f4       	brcc	.+6      	; 0xb7ee <f_read+0x176>
    b7e8:	6c 01       	movw	r12, r24
    b7ea:	c0 1a       	sub	r12, r16
    b7ec:	d1 0a       	sbc	r13, r17
    b7ee:	86 01       	movw	r16, r12
    b7f0:	a3 01       	movw	r20, r6
    b7f2:	92 01       	movw	r18, r4
    b7f4:	b4 01       	movw	r22, r8
    b7f6:	eb 81       	ldd	r30, Y+3	; 0x03
    b7f8:	fc 81       	ldd	r31, Y+4	; 0x04
    b7fa:	81 81       	ldd	r24, Z+1	; 0x01
    b7fc:	0e 94 96 69 	call	0xd32c	; 0xd32c <disk_read>
    b800:	89 2b       	or	r24, r25
    b802:	11 f6       	brne	.-124    	; 0xb788 <f_read+0x110>
    b804:	f7 01       	movw	r30, r14
    b806:	86 85       	ldd	r24, Z+14	; 0x0e
    b808:	87 ff       	sbrs	r24, 7
    b80a:	1a c0       	rjmp	.+52     	; 0xb840 <f_read+0x1c8>
    b80c:	80 8d       	ldd	r24, Z+24	; 0x18
    b80e:	91 8d       	ldd	r25, Z+25	; 0x19
    b810:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b812:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b814:	84 19       	sub	r24, r4
    b816:	95 09       	sbc	r25, r5
    b818:	a6 09       	sbc	r26, r6
    b81a:	b7 09       	sbc	r27, r7
    b81c:	a6 01       	movw	r20, r12
    b81e:	60 e0       	ldi	r22, 0x00	; 0
    b820:	70 e0       	ldi	r23, 0x00	; 0
    b822:	84 17       	cp	r24, r20
    b824:	95 07       	cpc	r25, r21
    b826:	a6 07       	cpc	r26, r22
    b828:	b7 07       	cpc	r27, r23
    b82a:	50 f4       	brcc	.+20     	; 0xb840 <f_read+0x1c8>
    b82c:	98 2f       	mov	r25, r24
    b82e:	88 27       	eor	r24, r24
    b830:	99 0f       	add	r25, r25
    b832:	40 e0       	ldi	r20, 0x00	; 0
    b834:	52 e0       	ldi	r21, 0x02	; 2
    b836:	b1 01       	movw	r22, r2
    b838:	88 0d       	add	r24, r8
    b83a:	99 1d       	adc	r25, r9
    b83c:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    b840:	dc 2c       	mov	r13, r12
    b842:	cc 24       	eor	r12, r12
    b844:	dd 0c       	add	r13, r13
    b846:	41 c0       	rjmp	.+130    	; 0xb8ca <f_read+0x252>
    b848:	f7 01       	movw	r30, r14
    b84a:	20 8d       	ldd	r18, Z+24	; 0x18
    b84c:	31 8d       	ldd	r19, Z+25	; 0x19
    b84e:	42 8d       	ldd	r20, Z+26	; 0x1a
    b850:	53 8d       	ldd	r21, Z+27	; 0x1b
    b852:	42 16       	cp	r4, r18
    b854:	53 06       	cpc	r5, r19
    b856:	64 06       	cpc	r6, r20
    b858:	75 06       	cpc	r7, r21
    b85a:	f9 f0       	breq	.+62     	; 0xb89a <f_read+0x222>
    b85c:	86 85       	ldd	r24, Z+14	; 0x0e
    b85e:	87 ff       	sbrs	r24, 7
    b860:	0f c0       	rjmp	.+30     	; 0xb880 <f_read+0x208>
    b862:	01 e0       	ldi	r16, 0x01	; 1
    b864:	10 e0       	ldi	r17, 0x00	; 0
    b866:	b1 01       	movw	r22, r2
    b868:	eb 81       	ldd	r30, Y+3	; 0x03
    b86a:	fc 81       	ldd	r31, Y+4	; 0x04
    b86c:	81 81       	ldd	r24, Z+1	; 0x01
    b86e:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    b872:	89 2b       	or	r24, r25
    b874:	09 f0       	breq	.+2      	; 0xb878 <f_read+0x200>
    b876:	88 cf       	rjmp	.-240    	; 0xb788 <f_read+0x110>
    b878:	f7 01       	movw	r30, r14
    b87a:	86 85       	ldd	r24, Z+14	; 0x0e
    b87c:	8f 77       	andi	r24, 0x7F	; 127
    b87e:	86 87       	std	Z+14, r24	; 0x0e
    b880:	e9 81       	ldd	r30, Y+1	; 0x01
    b882:	fa 81       	ldd	r31, Y+2	; 0x02
    b884:	01 e0       	ldi	r16, 0x01	; 1
    b886:	10 e0       	ldi	r17, 0x00	; 0
    b888:	a3 01       	movw	r20, r6
    b88a:	92 01       	movw	r18, r4
    b88c:	b1 01       	movw	r22, r2
    b88e:	81 81       	ldd	r24, Z+1	; 0x01
    b890:	0e 94 96 69 	call	0xd32c	; 0xd32c <disk_read>
    b894:	89 2b       	or	r24, r25
    b896:	09 f0       	breq	.+2      	; 0xb89a <f_read+0x222>
    b898:	77 cf       	rjmp	.-274    	; 0xb788 <f_read+0x110>
    b89a:	f7 01       	movw	r30, r14
    b89c:	40 8e       	std	Z+24, r4	; 0x18
    b89e:	51 8e       	std	Z+25, r5	; 0x19
    b8a0:	62 8e       	std	Z+26, r6	; 0x1a
    b8a2:	73 8e       	std	Z+27, r7	; 0x1b
    b8a4:	f7 01       	movw	r30, r14
    b8a6:	60 89       	ldd	r22, Z+16	; 0x10
    b8a8:	71 89       	ldd	r23, Z+17	; 0x11
    b8aa:	71 70       	andi	r23, 0x01	; 1
    b8ac:	80 e0       	ldi	r24, 0x00	; 0
    b8ae:	92 e0       	ldi	r25, 0x02	; 2
    b8b0:	86 1b       	sub	r24, r22
    b8b2:	97 0b       	sbc	r25, r23
    b8b4:	65 01       	movw	r12, r10
    b8b6:	8a 15       	cp	r24, r10
    b8b8:	9b 05       	cpc	r25, r11
    b8ba:	08 f4       	brcc	.+2      	; 0xb8be <f_read+0x246>
    b8bc:	6c 01       	movw	r12, r24
    b8be:	62 0d       	add	r22, r2
    b8c0:	73 1d       	adc	r23, r3
    b8c2:	a6 01       	movw	r20, r12
    b8c4:	c4 01       	movw	r24, r8
    b8c6:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    b8ca:	ac 18       	sub	r10, r12
    b8cc:	bd 08       	sbc	r11, r13
    b8ce:	ed 81       	ldd	r30, Y+5	; 0x05
    b8d0:	fe 81       	ldd	r31, Y+6	; 0x06
    b8d2:	80 81       	ld	r24, Z
    b8d4:	91 81       	ldd	r25, Z+1	; 0x01
    b8d6:	8c 0d       	add	r24, r12
    b8d8:	9d 1d       	adc	r25, r13
    b8da:	91 83       	std	Z+1, r25	; 0x01
    b8dc:	80 83       	st	Z, r24
    b8de:	8c 0c       	add	r8, r12
    b8e0:	9d 1c       	adc	r9, r13
    b8e2:	f7 01       	movw	r30, r14
    b8e4:	80 89       	ldd	r24, Z+16	; 0x10
    b8e6:	91 89       	ldd	r25, Z+17	; 0x11
    b8e8:	a2 89       	ldd	r26, Z+18	; 0x12
    b8ea:	b3 89       	ldd	r27, Z+19	; 0x13
    b8ec:	8c 0d       	add	r24, r12
    b8ee:	9d 1d       	adc	r25, r13
    b8f0:	a1 1d       	adc	r26, r1
    b8f2:	b1 1d       	adc	r27, r1
    b8f4:	80 8b       	std	Z+16, r24	; 0x10
    b8f6:	91 8b       	std	Z+17, r25	; 0x11
    b8f8:	a2 8b       	std	Z+18, r26	; 0x12
    b8fa:	b3 8b       	std	Z+19, r27	; 0x13
    b8fc:	f5 ce       	rjmp	.-534    	; 0xb6e8 <f_read+0x70>
    b8fe:	80 e0       	ldi	r24, 0x00	; 0
    b900:	01 c0       	rjmp	.+2      	; 0xb904 <f_read+0x28c>
    b902:	87 e0       	ldi	r24, 0x07	; 7
    b904:	90 e0       	ldi	r25, 0x00	; 0
    b906:	26 96       	adiw	r28, 0x06	; 6
    b908:	e2 e1       	ldi	r30, 0x12	; 18
    b90a:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000b90e <f_write>:
    b90e:	a8 e0       	ldi	r26, 0x08	; 8
    b910:	b0 e0       	ldi	r27, 0x00	; 0
    b912:	ed e8       	ldi	r30, 0x8D	; 141
    b914:	fc e5       	ldi	r31, 0x5C	; 92
    b916:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    b91a:	7c 01       	movw	r14, r24
    b91c:	3b 01       	movw	r6, r22
    b91e:	5a 01       	movw	r10, r20
    b920:	38 87       	std	Y+8, r19	; 0x08
    b922:	2f 83       	std	Y+7, r18	; 0x07
    b924:	f9 01       	movw	r30, r18
    b926:	11 82       	std	Z+1, r1	; 0x01
    b928:	10 82       	st	Z, r1
    b92a:	be 01       	movw	r22, r28
    b92c:	6f 5f       	subi	r22, 0xFF	; 255
    b92e:	7f 4f       	sbci	r23, 0xFF	; 255
    b930:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    b934:	00 97       	sbiw	r24, 0x00	; 0
    b936:	09 f0       	breq	.+2      	; 0xb93a <f_write+0x2c>
    b938:	7d c1       	rjmp	.+762    	; 0xbc34 <f_write+0x326>
    b93a:	f7 01       	movw	r30, r14
    b93c:	87 85       	ldd	r24, Z+15	; 0x0f
    b93e:	90 e0       	ldi	r25, 0x00	; 0
    b940:	00 97       	sbiw	r24, 0x00	; 0
    b942:	09 f0       	breq	.+2      	; 0xb946 <f_write+0x38>
    b944:	77 c1       	rjmp	.+750    	; 0xbc34 <f_write+0x326>
    b946:	86 85       	ldd	r24, Z+14	; 0x0e
    b948:	81 ff       	sbrs	r24, 1
    b94a:	72 c1       	rjmp	.+740    	; 0xbc30 <f_write+0x322>
    b94c:	80 89       	ldd	r24, Z+16	; 0x10
    b94e:	91 89       	ldd	r25, Z+17	; 0x11
    b950:	a2 89       	ldd	r26, Z+18	; 0x12
    b952:	b3 89       	ldd	r27, Z+19	; 0x13
    b954:	ac 01       	movw	r20, r24
    b956:	bd 01       	movw	r22, r26
    b958:	4a 0d       	add	r20, r10
    b95a:	5b 1d       	adc	r21, r11
    b95c:	61 1d       	adc	r22, r1
    b95e:	71 1d       	adc	r23, r1
    b960:	48 17       	cp	r20, r24
    b962:	59 07       	cpc	r21, r25
    b964:	6a 07       	cpc	r22, r26
    b966:	7b 07       	cpc	r23, r27
    b968:	18 f4       	brcc	.+6      	; 0xb970 <f_write+0x62>
    b96a:	5c 01       	movw	r10, r24
    b96c:	a0 94       	com	r10
    b96e:	b0 94       	com	r11
    b970:	97 01       	movw	r18, r14
    b972:	2c 5d       	subi	r18, 0xDC	; 220
    b974:	3f 4f       	sbci	r19, 0xFF	; 255
    b976:	3e 83       	std	Y+6, r19	; 0x06
    b978:	2d 83       	std	Y+5, r18	; 0x05
    b97a:	a1 14       	cp	r10, r1
    b97c:	b1 04       	cpc	r11, r1
    b97e:	09 f4       	brne	.+2      	; 0xb982 <f_write+0x74>
    b980:	4d c0       	rjmp	.+154    	; 0xba1c <f_write+0x10e>
    b982:	f7 01       	movw	r30, r14
    b984:	40 89       	ldd	r20, Z+16	; 0x10
    b986:	51 89       	ldd	r21, Z+17	; 0x11
    b988:	62 89       	ldd	r22, Z+18	; 0x12
    b98a:	73 89       	ldd	r23, Z+19	; 0x13
    b98c:	db 01       	movw	r26, r22
    b98e:	ca 01       	movw	r24, r20
    b990:	91 70       	andi	r25, 0x01	; 1
    b992:	aa 27       	eor	r26, r26
    b994:	bb 27       	eor	r27, r27
    b996:	89 2b       	or	r24, r25
    b998:	8a 2b       	or	r24, r26
    b99a:	8b 2b       	or	r24, r27
    b99c:	09 f0       	breq	.+2      	; 0xb9a0 <f_write+0x92>
    b99e:	05 c1       	rjmp	.+522    	; 0xbbaa <f_write+0x29c>
    b9a0:	e9 81       	ldd	r30, Y+1	; 0x01
    b9a2:	fa 81       	ldd	r31, Y+2	; 0x02
    b9a4:	81 84       	ldd	r8, Z+9	; 0x09
    b9a6:	92 84       	ldd	r9, Z+10	; 0x0a
    b9a8:	f1 e0       	ldi	r31, 0x01	; 1
    b9aa:	8f 1a       	sub	r8, r31
    b9ac:	91 08       	sbc	r9, r1
    b9ae:	db 01       	movw	r26, r22
    b9b0:	ca 01       	movw	r24, r20
    b9b2:	e9 e0       	ldi	r30, 0x09	; 9
    b9b4:	b6 95       	lsr	r27
    b9b6:	a7 95       	ror	r26
    b9b8:	97 95       	ror	r25
    b9ba:	87 95       	ror	r24
    b9bc:	ea 95       	dec	r30
    b9be:	d1 f7       	brne	.-12     	; 0xb9b4 <f_write+0xa6>
    b9c0:	88 22       	and	r8, r24
    b9c2:	99 22       	and	r9, r25
    b9c4:	81 14       	cp	r8, r1
    b9c6:	91 04       	cpc	r9, r1
    b9c8:	09 f0       	breq	.+2      	; 0xb9cc <f_write+0xbe>
    b9ca:	51 c0       	rjmp	.+162    	; 0xba6e <f_write+0x160>
    b9cc:	f7 01       	movw	r30, r14
    b9ce:	41 15       	cp	r20, r1
    b9d0:	51 05       	cpc	r21, r1
    b9d2:	61 05       	cpc	r22, r1
    b9d4:	71 05       	cpc	r23, r1
    b9d6:	69 f4       	brne	.+26     	; 0xb9f2 <f_write+0xe4>
    b9d8:	66 81       	ldd	r22, Z+6	; 0x06
    b9da:	77 81       	ldd	r23, Z+7	; 0x07
    b9dc:	80 85       	ldd	r24, Z+8	; 0x08
    b9de:	91 85       	ldd	r25, Z+9	; 0x09
    b9e0:	61 15       	cp	r22, r1
    b9e2:	71 05       	cpc	r23, r1
    b9e4:	81 05       	cpc	r24, r1
    b9e6:	91 05       	cpc	r25, r1
    b9e8:	f9 f4       	brne	.+62     	; 0xba28 <f_write+0x11a>
    b9ea:	40 e0       	ldi	r20, 0x00	; 0
    b9ec:	50 e0       	ldi	r21, 0x00	; 0
    b9ee:	ba 01       	movw	r22, r20
    b9f0:	0d c0       	rjmp	.+26     	; 0xba0c <f_write+0xfe>
    b9f2:	82 a1       	ldd	r24, Z+34	; 0x22
    b9f4:	93 a1       	ldd	r25, Z+35	; 0x23
    b9f6:	89 2b       	or	r24, r25
    b9f8:	21 f0       	breq	.+8      	; 0xba02 <f_write+0xf4>
    b9fa:	c7 01       	movw	r24, r14
    b9fc:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <clmt_clust>
    ba00:	08 c0       	rjmp	.+16     	; 0xba12 <f_write+0x104>
    ba02:	f7 01       	movw	r30, r14
    ba04:	44 89       	ldd	r20, Z+20	; 0x14
    ba06:	55 89       	ldd	r21, Z+21	; 0x15
    ba08:	66 89       	ldd	r22, Z+22	; 0x16
    ba0a:	77 89       	ldd	r23, Z+23	; 0x17
    ba0c:	c7 01       	movw	r24, r14
    ba0e:	0e 94 92 50 	call	0xa124	; 0xa124 <create_chain>
    ba12:	61 15       	cp	r22, r1
    ba14:	71 05       	cpc	r23, r1
    ba16:	81 05       	cpc	r24, r1
    ba18:	91 05       	cpc	r25, r1
    ba1a:	31 f4       	brne	.+12     	; 0xba28 <f_write+0x11a>
    ba1c:	f7 01       	movw	r30, r14
    ba1e:	86 85       	ldd	r24, Z+14	; 0x0e
    ba20:	80 64       	ori	r24, 0x40	; 64
    ba22:	86 87       	std	Z+14, r24	; 0x0e
    ba24:	80 e0       	ldi	r24, 0x00	; 0
    ba26:	05 c1       	rjmp	.+522    	; 0xbc32 <f_write+0x324>
    ba28:	61 30       	cpi	r22, 0x01	; 1
    ba2a:	71 05       	cpc	r23, r1
    ba2c:	81 05       	cpc	r24, r1
    ba2e:	91 05       	cpc	r25, r1
    ba30:	11 f4       	brne	.+4      	; 0xba36 <f_write+0x128>
    ba32:	82 e0       	ldi	r24, 0x02	; 2
    ba34:	07 c0       	rjmp	.+14     	; 0xba44 <f_write+0x136>
    ba36:	6f 3f       	cpi	r22, 0xFF	; 255
    ba38:	ff ef       	ldi	r31, 0xFF	; 255
    ba3a:	7f 07       	cpc	r23, r31
    ba3c:	8f 07       	cpc	r24, r31
    ba3e:	9f 07       	cpc	r25, r31
    ba40:	21 f4       	brne	.+8      	; 0xba4a <f_write+0x13c>
    ba42:	81 e0       	ldi	r24, 0x01	; 1
    ba44:	f7 01       	movw	r30, r14
    ba46:	87 87       	std	Z+15, r24	; 0x0f
    ba48:	f4 c0       	rjmp	.+488    	; 0xbc32 <f_write+0x324>
    ba4a:	f7 01       	movw	r30, r14
    ba4c:	64 8b       	std	Z+20, r22	; 0x14
    ba4e:	75 8b       	std	Z+21, r23	; 0x15
    ba50:	86 8b       	std	Z+22, r24	; 0x16
    ba52:	97 8b       	std	Z+23, r25	; 0x17
    ba54:	06 81       	ldd	r16, Z+6	; 0x06
    ba56:	17 81       	ldd	r17, Z+7	; 0x07
    ba58:	20 85       	ldd	r18, Z+8	; 0x08
    ba5a:	31 85       	ldd	r19, Z+9	; 0x09
    ba5c:	01 15       	cp	r16, r1
    ba5e:	11 05       	cpc	r17, r1
    ba60:	21 05       	cpc	r18, r1
    ba62:	31 05       	cpc	r19, r1
    ba64:	21 f4       	brne	.+8      	; 0xba6e <f_write+0x160>
    ba66:	66 83       	std	Z+6, r22	; 0x06
    ba68:	77 83       	std	Z+7, r23	; 0x07
    ba6a:	80 87       	std	Z+8, r24	; 0x08
    ba6c:	91 87       	std	Z+9, r25	; 0x09
    ba6e:	f7 01       	movw	r30, r14
    ba70:	86 85       	ldd	r24, Z+14	; 0x0e
    ba72:	87 ff       	sbrs	r24, 7
    ba74:	13 c0       	rjmp	.+38     	; 0xba9c <f_write+0x18e>
    ba76:	20 8d       	ldd	r18, Z+24	; 0x18
    ba78:	31 8d       	ldd	r19, Z+25	; 0x19
    ba7a:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba7c:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba7e:	e9 81       	ldd	r30, Y+1	; 0x01
    ba80:	fa 81       	ldd	r31, Y+2	; 0x02
    ba82:	01 e0       	ldi	r16, 0x01	; 1
    ba84:	10 e0       	ldi	r17, 0x00	; 0
    ba86:	6d 81       	ldd	r22, Y+5	; 0x05
    ba88:	7e 81       	ldd	r23, Y+6	; 0x06
    ba8a:	81 81       	ldd	r24, Z+1	; 0x01
    ba8c:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    ba90:	89 2b       	or	r24, r25
    ba92:	b9 f6       	brne	.-82     	; 0xba42 <f_write+0x134>
    ba94:	f7 01       	movw	r30, r14
    ba96:	86 85       	ldd	r24, Z+14	; 0x0e
    ba98:	8f 77       	andi	r24, 0x7F	; 127
    ba9a:	86 87       	std	Z+14, r24	; 0x0e
    ba9c:	29 81       	ldd	r18, Y+1	; 0x01
    ba9e:	3a 81       	ldd	r19, Y+2	; 0x02
    baa0:	3c 83       	std	Y+4, r19	; 0x04
    baa2:	2b 83       	std	Y+3, r18	; 0x03
    baa4:	f7 01       	movw	r30, r14
    baa6:	44 89       	ldd	r20, Z+20	; 0x14
    baa8:	55 89       	ldd	r21, Z+21	; 0x15
    baaa:	66 89       	ldd	r22, Z+22	; 0x16
    baac:	77 89       	ldd	r23, Z+23	; 0x17
    baae:	c9 01       	movw	r24, r18
    bab0:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    bab4:	61 15       	cp	r22, r1
    bab6:	71 05       	cpc	r23, r1
    bab8:	81 05       	cpc	r24, r1
    baba:	91 05       	cpc	r25, r1
    babc:	09 f4       	brne	.+2      	; 0xbac0 <f_write+0x1b2>
    babe:	b9 cf       	rjmp	.-142    	; 0xba32 <f_write+0x124>
    bac0:	1b 01       	movw	r2, r22
    bac2:	2c 01       	movw	r4, r24
    bac4:	28 0c       	add	r2, r8
    bac6:	39 1c       	adc	r3, r9
    bac8:	41 1c       	adc	r4, r1
    baca:	51 1c       	adc	r5, r1
    bacc:	65 01       	movw	r12, r10
    bace:	cd 2c       	mov	r12, r13
    bad0:	dd 24       	eor	r13, r13
    bad2:	c6 94       	lsr	r12
    bad4:	c1 14       	cp	r12, r1
    bad6:	d1 04       	cpc	r13, r1
    bad8:	f1 f1       	breq	.+124    	; 0xbb56 <f_write+0x248>
    bada:	eb 81       	ldd	r30, Y+3	; 0x03
    badc:	fc 81       	ldd	r31, Y+4	; 0x04
    bade:	81 85       	ldd	r24, Z+9	; 0x09
    bae0:	92 85       	ldd	r25, Z+10	; 0x0a
    bae2:	94 01       	movw	r18, r8
    bae4:	2c 0d       	add	r18, r12
    bae6:	3d 1d       	adc	r19, r13
    bae8:	82 17       	cp	r24, r18
    baea:	93 07       	cpc	r25, r19
    baec:	18 f4       	brcc	.+6      	; 0xbaf4 <f_write+0x1e6>
    baee:	6c 01       	movw	r12, r24
    baf0:	c8 18       	sub	r12, r8
    baf2:	d9 08       	sbc	r13, r9
    baf4:	86 01       	movw	r16, r12
    baf6:	a2 01       	movw	r20, r4
    baf8:	91 01       	movw	r18, r2
    bafa:	b3 01       	movw	r22, r6
    bafc:	eb 81       	ldd	r30, Y+3	; 0x03
    bafe:	fc 81       	ldd	r31, Y+4	; 0x04
    bb00:	81 81       	ldd	r24, Z+1	; 0x01
    bb02:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    bb06:	89 2b       	or	r24, r25
    bb08:	09 f0       	breq	.+2      	; 0xbb0c <f_write+0x1fe>
    bb0a:	9b cf       	rjmp	.-202    	; 0xba42 <f_write+0x134>
    bb0c:	f7 01       	movw	r30, r14
    bb0e:	80 8d       	ldd	r24, Z+24	; 0x18
    bb10:	91 8d       	ldd	r25, Z+25	; 0x19
    bb12:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb14:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb16:	82 19       	sub	r24, r2
    bb18:	93 09       	sbc	r25, r3
    bb1a:	a4 09       	sbc	r26, r4
    bb1c:	b5 09       	sbc	r27, r5
    bb1e:	a6 01       	movw	r20, r12
    bb20:	60 e0       	ldi	r22, 0x00	; 0
    bb22:	70 e0       	ldi	r23, 0x00	; 0
    bb24:	84 17       	cp	r24, r20
    bb26:	95 07       	cpc	r25, r21
    bb28:	a6 07       	cpc	r26, r22
    bb2a:	b7 07       	cpc	r27, r23
    bb2c:	80 f4       	brcc	.+32     	; 0xbb4e <f_write+0x240>
    bb2e:	98 2f       	mov	r25, r24
    bb30:	88 27       	eor	r24, r24
    bb32:	99 0f       	add	r25, r25
    bb34:	b3 01       	movw	r22, r6
    bb36:	68 0f       	add	r22, r24
    bb38:	79 1f       	adc	r23, r25
    bb3a:	40 e0       	ldi	r20, 0x00	; 0
    bb3c:	52 e0       	ldi	r21, 0x02	; 2
    bb3e:	8d 81       	ldd	r24, Y+5	; 0x05
    bb40:	9e 81       	ldd	r25, Y+6	; 0x06
    bb42:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    bb46:	f7 01       	movw	r30, r14
    bb48:	86 85       	ldd	r24, Z+14	; 0x0e
    bb4a:	8f 77       	andi	r24, 0x7F	; 127
    bb4c:	86 87       	std	Z+14, r24	; 0x0e
    bb4e:	dc 2c       	mov	r13, r12
    bb50:	cc 24       	eor	r12, r12
    bb52:	dd 0c       	add	r13, r13
    bb54:	43 c0       	rjmp	.+134    	; 0xbbdc <f_write+0x2ce>
    bb56:	f7 01       	movw	r30, r14
    bb58:	80 8d       	ldd	r24, Z+24	; 0x18
    bb5a:	91 8d       	ldd	r25, Z+25	; 0x19
    bb5c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb5e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb60:	28 16       	cp	r2, r24
    bb62:	39 06       	cpc	r3, r25
    bb64:	4a 06       	cpc	r4, r26
    bb66:	5b 06       	cpc	r5, r27
    bb68:	d9 f0       	breq	.+54     	; 0xbba0 <f_write+0x292>
    bb6a:	40 89       	ldd	r20, Z+16	; 0x10
    bb6c:	51 89       	ldd	r21, Z+17	; 0x11
    bb6e:	62 89       	ldd	r22, Z+18	; 0x12
    bb70:	73 89       	ldd	r23, Z+19	; 0x13
    bb72:	82 85       	ldd	r24, Z+10	; 0x0a
    bb74:	93 85       	ldd	r25, Z+11	; 0x0b
    bb76:	a4 85       	ldd	r26, Z+12	; 0x0c
    bb78:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb7a:	48 17       	cp	r20, r24
    bb7c:	59 07       	cpc	r21, r25
    bb7e:	6a 07       	cpc	r22, r26
    bb80:	7b 07       	cpc	r23, r27
    bb82:	70 f4       	brcc	.+28     	; 0xbba0 <f_write+0x292>
    bb84:	01 e0       	ldi	r16, 0x01	; 1
    bb86:	10 e0       	ldi	r17, 0x00	; 0
    bb88:	a2 01       	movw	r20, r4
    bb8a:	91 01       	movw	r18, r2
    bb8c:	6d 81       	ldd	r22, Y+5	; 0x05
    bb8e:	7e 81       	ldd	r23, Y+6	; 0x06
    bb90:	eb 81       	ldd	r30, Y+3	; 0x03
    bb92:	fc 81       	ldd	r31, Y+4	; 0x04
    bb94:	81 81       	ldd	r24, Z+1	; 0x01
    bb96:	0e 94 96 69 	call	0xd32c	; 0xd32c <disk_read>
    bb9a:	89 2b       	or	r24, r25
    bb9c:	09 f0       	breq	.+2      	; 0xbba0 <f_write+0x292>
    bb9e:	51 cf       	rjmp	.-350    	; 0xba42 <f_write+0x134>
    bba0:	f7 01       	movw	r30, r14
    bba2:	20 8e       	std	Z+24, r2	; 0x18
    bba4:	31 8e       	std	Z+25, r3	; 0x19
    bba6:	42 8e       	std	Z+26, r4	; 0x1a
    bba8:	53 8e       	std	Z+27, r5	; 0x1b
    bbaa:	f7 01       	movw	r30, r14
    bbac:	80 89       	ldd	r24, Z+16	; 0x10
    bbae:	91 89       	ldd	r25, Z+17	; 0x11
    bbb0:	91 70       	andi	r25, 0x01	; 1
    bbb2:	20 e0       	ldi	r18, 0x00	; 0
    bbb4:	32 e0       	ldi	r19, 0x02	; 2
    bbb6:	28 1b       	sub	r18, r24
    bbb8:	39 0b       	sbc	r19, r25
    bbba:	65 01       	movw	r12, r10
    bbbc:	2a 15       	cp	r18, r10
    bbbe:	3b 05       	cpc	r19, r11
    bbc0:	08 f4       	brcc	.+2      	; 0xbbc4 <f_write+0x2b6>
    bbc2:	69 01       	movw	r12, r18
    bbc4:	a6 01       	movw	r20, r12
    bbc6:	b3 01       	movw	r22, r6
    bbc8:	2d 81       	ldd	r18, Y+5	; 0x05
    bbca:	3e 81       	ldd	r19, Y+6	; 0x06
    bbcc:	82 0f       	add	r24, r18
    bbce:	93 1f       	adc	r25, r19
    bbd0:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    bbd4:	f7 01       	movw	r30, r14
    bbd6:	86 85       	ldd	r24, Z+14	; 0x0e
    bbd8:	80 68       	ori	r24, 0x80	; 128
    bbda:	86 87       	std	Z+14, r24	; 0x0e
    bbdc:	ac 18       	sub	r10, r12
    bbde:	bd 08       	sbc	r11, r13
    bbe0:	ef 81       	ldd	r30, Y+7	; 0x07
    bbe2:	f8 85       	ldd	r31, Y+8	; 0x08
    bbe4:	80 81       	ld	r24, Z
    bbe6:	91 81       	ldd	r25, Z+1	; 0x01
    bbe8:	8c 0d       	add	r24, r12
    bbea:	9d 1d       	adc	r25, r13
    bbec:	91 83       	std	Z+1, r25	; 0x01
    bbee:	80 83       	st	Z, r24
    bbf0:	6c 0c       	add	r6, r12
    bbf2:	7d 1c       	adc	r7, r13
    bbf4:	f7 01       	movw	r30, r14
    bbf6:	80 89       	ldd	r24, Z+16	; 0x10
    bbf8:	91 89       	ldd	r25, Z+17	; 0x11
    bbfa:	a2 89       	ldd	r26, Z+18	; 0x12
    bbfc:	b3 89       	ldd	r27, Z+19	; 0x13
    bbfe:	8c 0d       	add	r24, r12
    bc00:	9d 1d       	adc	r25, r13
    bc02:	a1 1d       	adc	r26, r1
    bc04:	b1 1d       	adc	r27, r1
    bc06:	80 8b       	std	Z+16, r24	; 0x10
    bc08:	91 8b       	std	Z+17, r25	; 0x11
    bc0a:	a2 8b       	std	Z+18, r26	; 0x12
    bc0c:	b3 8b       	std	Z+19, r27	; 0x13
    bc0e:	42 85       	ldd	r20, Z+10	; 0x0a
    bc10:	53 85       	ldd	r21, Z+11	; 0x0b
    bc12:	64 85       	ldd	r22, Z+12	; 0x0c
    bc14:	75 85       	ldd	r23, Z+13	; 0x0d
    bc16:	48 17       	cp	r20, r24
    bc18:	59 07       	cpc	r21, r25
    bc1a:	6a 07       	cpc	r22, r26
    bc1c:	7b 07       	cpc	r23, r27
    bc1e:	10 f4       	brcc	.+4      	; 0xbc24 <f_write+0x316>
    bc20:	ac 01       	movw	r20, r24
    bc22:	bd 01       	movw	r22, r26
    bc24:	f7 01       	movw	r30, r14
    bc26:	42 87       	std	Z+10, r20	; 0x0a
    bc28:	53 87       	std	Z+11, r21	; 0x0b
    bc2a:	64 87       	std	Z+12, r22	; 0x0c
    bc2c:	75 87       	std	Z+13, r23	; 0x0d
    bc2e:	a5 ce       	rjmp	.-694    	; 0xb97a <f_write+0x6c>
    bc30:	87 e0       	ldi	r24, 0x07	; 7
    bc32:	90 e0       	ldi	r25, 0x00	; 0
    bc34:	28 96       	adiw	r28, 0x08	; 8
    bc36:	e2 e1       	ldi	r30, 0x12	; 18
    bc38:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000bc3c <f_sync>:
    bc3c:	8f 92       	push	r8
    bc3e:	9f 92       	push	r9
    bc40:	af 92       	push	r10
    bc42:	bf 92       	push	r11
    bc44:	ef 92       	push	r14
    bc46:	ff 92       	push	r15
    bc48:	0f 93       	push	r16
    bc4a:	1f 93       	push	r17
    bc4c:	cf 93       	push	r28
    bc4e:	df 93       	push	r29
    bc50:	00 d0       	rcall	.+0      	; 0xbc52 <f_sync+0x16>
    bc52:	cd b7       	in	r28, 0x3d	; 61
    bc54:	de b7       	in	r29, 0x3e	; 62
    bc56:	7c 01       	movw	r14, r24
    bc58:	be 01       	movw	r22, r28
    bc5a:	6f 5f       	subi	r22, 0xFF	; 255
    bc5c:	7f 4f       	sbci	r23, 0xFF	; 255
    bc5e:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    bc62:	00 97       	sbiw	r24, 0x00	; 0
    bc64:	09 f0       	breq	.+2      	; 0xbc68 <f_sync+0x2c>
    bc66:	5d c0       	rjmp	.+186    	; 0xbd22 <f_sync+0xe6>
    bc68:	f7 01       	movw	r30, r14
    bc6a:	86 85       	ldd	r24, Z+14	; 0x0e
    bc6c:	86 ff       	sbrs	r24, 6
    bc6e:	55 c0       	rjmp	.+170    	; 0xbd1a <f_sync+0xde>
    bc70:	87 ff       	sbrs	r24, 7
    bc72:	15 c0       	rjmp	.+42     	; 0xbc9e <f_sync+0x62>
    bc74:	20 8d       	ldd	r18, Z+24	; 0x18
    bc76:	31 8d       	ldd	r19, Z+25	; 0x19
    bc78:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc7a:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc7c:	e9 81       	ldd	r30, Y+1	; 0x01
    bc7e:	fa 81       	ldd	r31, Y+2	; 0x02
    bc80:	01 e0       	ldi	r16, 0x01	; 1
    bc82:	10 e0       	ldi	r17, 0x00	; 0
    bc84:	b7 01       	movw	r22, r14
    bc86:	6c 5d       	subi	r22, 0xDC	; 220
    bc88:	7f 4f       	sbci	r23, 0xFF	; 255
    bc8a:	81 81       	ldd	r24, Z+1	; 0x01
    bc8c:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    bc90:	89 2b       	or	r24, r25
    bc92:	09 f0       	breq	.+2      	; 0xbc96 <f_sync+0x5a>
    bc94:	44 c0       	rjmp	.+136    	; 0xbd1e <f_sync+0xe2>
    bc96:	f7 01       	movw	r30, r14
    bc98:	86 85       	ldd	r24, Z+14	; 0x0e
    bc9a:	8f 77       	andi	r24, 0x7F	; 127
    bc9c:	86 87       	std	Z+14, r24	; 0x0e
    bc9e:	0e 94 4b 70 	call	0xe096	; 0xe096 <get_fattime>
    bca2:	4b 01       	movw	r8, r22
    bca4:	5c 01       	movw	r10, r24
    bca6:	f7 01       	movw	r30, r14
    bca8:	44 8d       	ldd	r20, Z+28	; 0x1c
    bcaa:	55 8d       	ldd	r21, Z+29	; 0x1d
    bcac:	66 8d       	ldd	r22, Z+30	; 0x1e
    bcae:	77 8d       	ldd	r23, Z+31	; 0x1f
    bcb0:	89 81       	ldd	r24, Y+1	; 0x01
    bcb2:	9a 81       	ldd	r25, Y+2	; 0x02
    bcb4:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    bcb8:	00 97       	sbiw	r24, 0x00	; 0
    bcba:	99 f5       	brne	.+102    	; 0xbd22 <f_sync+0xe6>
    bcbc:	f7 01       	movw	r30, r14
    bcbe:	00 a1       	ldd	r16, Z+32	; 0x20
    bcc0:	11 a1       	ldd	r17, Z+33	; 0x21
    bcc2:	f8 01       	movw	r30, r16
    bcc4:	83 85       	ldd	r24, Z+11	; 0x0b
    bcc6:	80 62       	ori	r24, 0x20	; 32
    bcc8:	83 87       	std	Z+11, r24	; 0x0b
    bcca:	f7 01       	movw	r30, r14
    bccc:	26 81       	ldd	r18, Z+6	; 0x06
    bcce:	37 81       	ldd	r19, Z+7	; 0x07
    bcd0:	40 85       	ldd	r20, Z+8	; 0x08
    bcd2:	51 85       	ldd	r21, Z+9	; 0x09
    bcd4:	b8 01       	movw	r22, r16
    bcd6:	80 81       	ld	r24, Z
    bcd8:	91 81       	ldd	r25, Z+1	; 0x01
    bcda:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <st_clust.isra.5>
    bcde:	f7 01       	movw	r30, r14
    bce0:	42 85       	ldd	r20, Z+10	; 0x0a
    bce2:	53 85       	ldd	r21, Z+11	; 0x0b
    bce4:	64 85       	ldd	r22, Z+12	; 0x0c
    bce6:	75 85       	ldd	r23, Z+13	; 0x0d
    bce8:	c8 01       	movw	r24, r16
    bcea:	4c 96       	adiw	r24, 0x1c	; 28
    bcec:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
    bcf0:	b5 01       	movw	r22, r10
    bcf2:	a4 01       	movw	r20, r8
    bcf4:	c8 01       	movw	r24, r16
    bcf6:	46 96       	adiw	r24, 0x16	; 22
    bcf8:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
    bcfc:	f8 01       	movw	r30, r16
    bcfe:	12 8a       	std	Z+18, r1	; 0x12
    bd00:	13 8a       	std	Z+19, r1	; 0x13
    bd02:	89 81       	ldd	r24, Y+1	; 0x01
    bd04:	9a 81       	ldd	r25, Y+2	; 0x02
    bd06:	21 e0       	ldi	r18, 0x01	; 1
    bd08:	fc 01       	movw	r30, r24
    bd0a:	23 83       	std	Z+3, r18	; 0x03
    bd0c:	0e 94 33 4a 	call	0x9466	; 0x9466 <sync_fs>
    bd10:	f7 01       	movw	r30, r14
    bd12:	26 85       	ldd	r18, Z+14	; 0x0e
    bd14:	2f 7b       	andi	r18, 0xBF	; 191
    bd16:	26 87       	std	Z+14, r18	; 0x0e
    bd18:	04 c0       	rjmp	.+8      	; 0xbd22 <f_sync+0xe6>
    bd1a:	80 e0       	ldi	r24, 0x00	; 0
    bd1c:	01 c0       	rjmp	.+2      	; 0xbd20 <f_sync+0xe4>
    bd1e:	81 e0       	ldi	r24, 0x01	; 1
    bd20:	90 e0       	ldi	r25, 0x00	; 0
    bd22:	0f 90       	pop	r0
    bd24:	0f 90       	pop	r0
    bd26:	df 91       	pop	r29
    bd28:	cf 91       	pop	r28
    bd2a:	1f 91       	pop	r17
    bd2c:	0f 91       	pop	r16
    bd2e:	ff 90       	pop	r15
    bd30:	ef 90       	pop	r14
    bd32:	bf 90       	pop	r11
    bd34:	af 90       	pop	r10
    bd36:	9f 90       	pop	r9
    bd38:	8f 90       	pop	r8
    bd3a:	08 95       	ret

0000bd3c <f_close>:
    bd3c:	a2 e0       	ldi	r26, 0x02	; 2
    bd3e:	b0 e0       	ldi	r27, 0x00	; 0
    bd40:	e4 ea       	ldi	r30, 0xA4	; 164
    bd42:	fe e5       	ldi	r31, 0x5E	; 94
    bd44:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    bd48:	8c 01       	movw	r16, r24
    bd4a:	78 df       	rcall	.-272    	; 0xbc3c <f_sync>
    bd4c:	00 97       	sbiw	r24, 0x00	; 0
    bd4e:	59 f4       	brne	.+22     	; 0xbd66 <f_close+0x2a>
    bd50:	be 01       	movw	r22, r28
    bd52:	6f 5f       	subi	r22, 0xFF	; 255
    bd54:	7f 4f       	sbci	r23, 0xFF	; 255
    bd56:	c8 01       	movw	r24, r16
    bd58:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    bd5c:	00 97       	sbiw	r24, 0x00	; 0
    bd5e:	19 f4       	brne	.+6      	; 0xbd66 <f_close+0x2a>
    bd60:	f8 01       	movw	r30, r16
    bd62:	11 82       	std	Z+1, r1	; 0x01
    bd64:	10 82       	st	Z, r1
    bd66:	22 96       	adiw	r28, 0x02	; 2
    bd68:	e4 e0       	ldi	r30, 0x04	; 4
    bd6a:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0000bd6e <f_chdir>:
    bd6e:	a2 e3       	ldi	r26, 0x32	; 50
    bd70:	b0 e0       	ldi	r27, 0x00	; 0
    bd72:	ed eb       	ldi	r30, 0xBD	; 189
    bd74:	fe e5       	ldi	r31, 0x5E	; 94
    bd76:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    bd7a:	9a ab       	std	Y+50, r25	; 0x32
    bd7c:	89 ab       	std	Y+49, r24	; 0x31
    bd7e:	40 e0       	ldi	r20, 0x00	; 0
    bd80:	be 01       	movw	r22, r28
    bd82:	61 5d       	subi	r22, 0xD1	; 209
    bd84:	7f 4f       	sbci	r23, 0xFF	; 255
    bd86:	ce 01       	movw	r24, r28
    bd88:	c1 96       	adiw	r24, 0x31	; 49
    bd8a:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    bd8e:	00 97       	sbiw	r24, 0x00	; 0
    bd90:	09 f0       	breq	.+2      	; 0xbd94 <f_chdir+0x26>
    bd92:	44 c0       	rjmp	.+136    	; 0xbe1c <f_chdir+0xae>
    bd94:	8f a5       	ldd	r24, Y+47	; 0x2f
    bd96:	98 a9       	ldd	r25, Y+48	; 0x30
    bd98:	9a 83       	std	Y+2, r25	; 0x02
    bd9a:	89 83       	std	Y+1, r24	; 0x01
    bd9c:	80 e0       	ldi	r24, 0x00	; 0
    bd9e:	92 e0       	ldi	r25, 0x02	; 2
    bda0:	0e 94 da 68 	call	0xd1b4	; 0xd1b4 <ff_memalloc>
    bda4:	7c 01       	movw	r14, r24
    bda6:	00 97       	sbiw	r24, 0x00	; 0
    bda8:	a9 f1       	breq	.+106    	; 0xbe14 <f_chdir+0xa6>
    bdaa:	ef a5       	ldd	r30, Y+47	; 0x2f
    bdac:	f8 a9       	ldd	r31, Y+48	; 0x30
    bdae:	94 87       	std	Z+12, r25	; 0x0c
    bdb0:	83 87       	std	Z+11, r24	; 0x0b
    bdb2:	69 a9       	ldd	r22, Y+49	; 0x31
    bdb4:	7a a9       	ldd	r23, Y+50	; 0x32
    bdb6:	ce 01       	movw	r24, r28
    bdb8:	01 96       	adiw	r24, 0x01	; 1
    bdba:	39 d8       	rcall	.-3982   	; 0xae2e <follow_path>
    bdbc:	8c 01       	movw	r16, r24
    bdbe:	89 2b       	or	r24, r25
    bdc0:	09 f5       	brne	.+66     	; 0xbe04 <f_chdir+0x96>
    bdc2:	88 a5       	ldd	r24, Y+40	; 0x28
    bdc4:	87 ff       	sbrs	r24, 7
    bdc6:	0b c0       	rjmp	.+22     	; 0xbdde <f_chdir+0x70>
    bdc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    bdca:	f8 a9       	ldd	r31, Y+48	; 0x30
    bdcc:	8f 81       	ldd	r24, Y+7	; 0x07
    bdce:	98 85       	ldd	r25, Y+8	; 0x08
    bdd0:	a9 85       	ldd	r26, Y+9	; 0x09
    bdd2:	ba 85       	ldd	r27, Y+10	; 0x0a
    bdd4:	85 8b       	std	Z+21, r24	; 0x15
    bdd6:	96 8b       	std	Z+22, r25	; 0x16
    bdd8:	a7 8b       	std	Z+23, r26	; 0x17
    bdda:	b0 8f       	std	Z+24, r27	; 0x18
    bddc:	13 c0       	rjmp	.+38     	; 0xbe04 <f_chdir+0x96>
    bdde:	8d 81       	ldd	r24, Y+5	; 0x05
    bde0:	84 ff       	sbrs	r24, 4
    bde2:	0e c0       	rjmp	.+28     	; 0xbe00 <f_chdir+0x92>
    bde4:	cf a4       	ldd	r12, Y+47	; 0x2f
    bde6:	d8 a8       	ldd	r13, Y+48	; 0x30
    bde8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bdea:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bdec:	f6 01       	movw	r30, r12
    bdee:	80 81       	ld	r24, Z
    bdf0:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    bdf4:	f6 01       	movw	r30, r12
    bdf6:	65 8b       	std	Z+21, r22	; 0x15
    bdf8:	76 8b       	std	Z+22, r23	; 0x16
    bdfa:	87 8b       	std	Z+23, r24	; 0x17
    bdfc:	90 8f       	std	Z+24, r25	; 0x18
    bdfe:	02 c0       	rjmp	.+4      	; 0xbe04 <f_chdir+0x96>
    be00:	05 e0       	ldi	r16, 0x05	; 5
    be02:	10 e0       	ldi	r17, 0x00	; 0
    be04:	c7 01       	movw	r24, r14
    be06:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <ff_memfree>
    be0a:	04 30       	cpi	r16, 0x04	; 4
    be0c:	11 05       	cpc	r17, r1
    be0e:	29 f4       	brne	.+10     	; 0xbe1a <f_chdir+0xac>
    be10:	85 e0       	ldi	r24, 0x05	; 5
    be12:	01 c0       	rjmp	.+2      	; 0xbe16 <f_chdir+0xa8>
    be14:	81 e1       	ldi	r24, 0x11	; 17
    be16:	90 e0       	ldi	r25, 0x00	; 0
    be18:	01 c0       	rjmp	.+2      	; 0xbe1c <f_chdir+0xae>
    be1a:	c8 01       	movw	r24, r16
    be1c:	e2 96       	adiw	r28, 0x32	; 50
    be1e:	e8 e0       	ldi	r30, 0x08	; 8
    be20:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000be24 <f_getcwd>:
    be24:	a8 e4       	ldi	r26, 0x48	; 72
    be26:	b1 e0       	ldi	r27, 0x01	; 1
    be28:	e8 e1       	ldi	r30, 0x18	; 24
    be2a:	ff e5       	ldi	r31, 0x5F	; 95
    be2c:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    be30:	c9 5b       	subi	r28, 0xB9	; 185
    be32:	de 4f       	sbci	r29, 0xFE	; 254
    be34:	99 83       	std	Y+1, r25	; 0x01
    be36:	88 83       	st	Y, r24
    be38:	c7 54       	subi	r28, 0x47	; 71
    be3a:	d1 40       	sbci	r29, 0x01	; 1
    be3c:	4b 01       	movw	r8, r22
    be3e:	7c 01       	movw	r14, r24
    be40:	fc 01       	movw	r30, r24
    be42:	10 82       	st	Z, r1
    be44:	40 e0       	ldi	r20, 0x00	; 0
    be46:	be 01       	movw	r22, r28
    be48:	6b 5b       	subi	r22, 0xBB	; 187
    be4a:	7e 4f       	sbci	r23, 0xFE	; 254
    be4c:	ce 01       	movw	r24, r28
    be4e:	89 5b       	subi	r24, 0xB9	; 185
    be50:	9e 4f       	sbci	r25, 0xFE	; 254
    be52:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    be56:	1c 01       	movw	r2, r24
    be58:	89 2b       	or	r24, r25
    be5a:	09 f0       	breq	.+2      	; 0xbe5e <f_getcwd+0x3a>
    be5c:	03 c1       	rjmp	.+518    	; 0xc064 <f_getcwd+0x240>
    be5e:	cb 5b       	subi	r28, 0xBB	; 187
    be60:	de 4f       	sbci	r29, 0xFE	; 254
    be62:	88 81       	ld	r24, Y
    be64:	99 81       	ldd	r25, Y+1	; 0x01
    be66:	c5 54       	subi	r28, 0x45	; 69
    be68:	d1 40       	sbci	r29, 0x01	; 1
    be6a:	c9 5e       	subi	r28, 0xE9	; 233
    be6c:	de 4f       	sbci	r29, 0xFE	; 254
    be6e:	99 83       	std	Y+1, r25	; 0x01
    be70:	88 83       	st	Y, r24
    be72:	c7 51       	subi	r28, 0x17	; 23
    be74:	d1 40       	sbci	r29, 0x01	; 1
    be76:	80 e0       	ldi	r24, 0x00	; 0
    be78:	92 e0       	ldi	r25, 0x02	; 2
    be7a:	0e 94 da 68 	call	0xd1b4	; 0xd1b4 <ff_memalloc>
    be7e:	5c 01       	movw	r10, r24
    be80:	00 97       	sbiw	r24, 0x00	; 0
    be82:	09 f4       	brne	.+2      	; 0xbe86 <f_getcwd+0x62>
    be84:	f3 c0       	rjmp	.+486    	; 0xc06c <f_getcwd+0x248>
    be86:	cb 5b       	subi	r28, 0xBB	; 187
    be88:	de 4f       	sbci	r29, 0xFE	; 254
    be8a:	e8 81       	ld	r30, Y
    be8c:	f9 81       	ldd	r31, Y+1	; 0x01
    be8e:	c5 54       	subi	r28, 0x45	; 69
    be90:	d1 40       	sbci	r29, 0x01	; 1
    be92:	94 87       	std	Z+12, r25	; 0x0c
    be94:	83 87       	std	Z+11, r24	; 0x0b
    be96:	85 89       	ldd	r24, Z+21	; 0x15
    be98:	96 89       	ldd	r25, Z+22	; 0x16
    be9a:	a7 89       	ldd	r26, Z+23	; 0x17
    be9c:	b0 8d       	ldd	r27, Z+24	; 0x18
    be9e:	c3 5e       	subi	r28, 0xE3	; 227
    bea0:	de 4f       	sbci	r29, 0xFE	; 254
    bea2:	88 83       	st	Y, r24
    bea4:	99 83       	std	Y+1, r25	; 0x01
    bea6:	aa 83       	std	Y+2, r26	; 0x02
    bea8:	bb 83       	std	Y+3, r27	; 0x03
    beaa:	cd 51       	subi	r28, 0x1D	; 29
    beac:	d1 40       	sbci	r29, 0x01	; 1
    beae:	84 01       	movw	r16, r8
    beb0:	ce 01       	movw	r24, r28
    beb2:	01 96       	adiw	r24, 0x01	; 1
    beb4:	6c 01       	movw	r12, r24
    beb6:	c3 5e       	subi	r28, 0xE3	; 227
    beb8:	de 4f       	sbci	r29, 0xFE	; 254
    beba:	48 80       	ld	r4, Y
    bebc:	59 80       	ldd	r5, Y+1	; 0x01
    bebe:	6a 80       	ldd	r6, Y+2	; 0x02
    bec0:	7b 80       	ldd	r7, Y+3	; 0x03
    bec2:	cd 51       	subi	r28, 0x1D	; 29
    bec4:	d1 40       	sbci	r29, 0x01	; 1
    bec6:	41 14       	cp	r4, r1
    bec8:	51 04       	cpc	r5, r1
    beca:	61 04       	cpc	r6, r1
    becc:	71 04       	cpc	r7, r1
    bece:	09 f4       	brne	.+2      	; 0xbed2 <f_getcwd+0xae>
    bed0:	a3 c0       	rjmp	.+326    	; 0xc018 <f_getcwd+0x1f4>
    bed2:	40 e2       	ldi	r20, 0x20	; 32
    bed4:	50 e0       	ldi	r21, 0x00	; 0
    bed6:	60 e0       	ldi	r22, 0x00	; 0
    bed8:	70 e0       	ldi	r23, 0x00	; 0
    beda:	ce 01       	movw	r24, r28
    bedc:	89 5e       	subi	r24, 0xE9	; 233
    bede:	9e 4f       	sbci	r25, 0xFE	; 254
    bee0:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <dir_sdi>
    bee4:	00 97       	sbiw	r24, 0x00	; 0
    bee6:	09 f0       	breq	.+2      	; 0xbeea <f_getcwd+0xc6>
    bee8:	c6 c0       	rjmp	.+396    	; 0xc076 <f_getcwd+0x252>
    beea:	c3 5d       	subi	r28, 0xD3	; 211
    beec:	de 4f       	sbci	r29, 0xFE	; 254
    beee:	48 81       	ld	r20, Y
    bef0:	59 81       	ldd	r21, Y+1	; 0x01
    bef2:	6a 81       	ldd	r22, Y+2	; 0x02
    bef4:	7b 81       	ldd	r23, Y+3	; 0x03
    bef6:	cd 52       	subi	r28, 0x2D	; 45
    bef8:	d1 40       	sbci	r29, 0x01	; 1
    befa:	cb 5b       	subi	r28, 0xBB	; 187
    befc:	de 4f       	sbci	r29, 0xFE	; 254
    befe:	88 81       	ld	r24, Y
    bf00:	99 81       	ldd	r25, Y+1	; 0x01
    bf02:	c5 54       	subi	r28, 0x45	; 69
    bf04:	d1 40       	sbci	r29, 0x01	; 1
    bf06:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    bf0a:	00 97       	sbiw	r24, 0x00	; 0
    bf0c:	09 f0       	breq	.+2      	; 0xbf10 <f_getcwd+0xec>
    bf0e:	b3 c0       	rjmp	.+358    	; 0xc076 <f_getcwd+0x252>
    bf10:	cf 5c       	subi	r28, 0xCF	; 207
    bf12:	de 4f       	sbci	r29, 0xFE	; 254
    bf14:	68 81       	ld	r22, Y
    bf16:	79 81       	ldd	r23, Y+1	; 0x01
    bf18:	c1 53       	subi	r28, 0x31	; 49
    bf1a:	d1 40       	sbci	r29, 0x01	; 1
    bf1c:	cb 5b       	subi	r28, 0xBB	; 187
    bf1e:	de 4f       	sbci	r29, 0xFE	; 254
    bf20:	e8 81       	ld	r30, Y
    bf22:	f9 81       	ldd	r31, Y+1	; 0x01
    bf24:	c5 54       	subi	r28, 0x45	; 69
    bf26:	d1 40       	sbci	r29, 0x01	; 1
    bf28:	80 81       	ld	r24, Z
    bf2a:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    bf2e:	c3 5e       	subi	r28, 0xE3	; 227
    bf30:	de 4f       	sbci	r29, 0xFE	; 254
    bf32:	68 83       	st	Y, r22
    bf34:	79 83       	std	Y+1, r23	; 0x01
    bf36:	8a 83       	std	Y+2, r24	; 0x02
    bf38:	9b 83       	std	Y+3, r25	; 0x03
    bf3a:	cd 51       	subi	r28, 0x1D	; 29
    bf3c:	d1 40       	sbci	r29, 0x01	; 1
    bf3e:	40 e0       	ldi	r20, 0x00	; 0
    bf40:	50 e0       	ldi	r21, 0x00	; 0
    bf42:	ba 01       	movw	r22, r20
    bf44:	ce 01       	movw	r24, r28
    bf46:	89 5e       	subi	r24, 0xE9	; 233
    bf48:	9e 4f       	sbci	r25, 0xFE	; 254
    bf4a:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <dir_sdi>
    bf4e:	00 97       	sbiw	r24, 0x00	; 0
    bf50:	09 f0       	breq	.+2      	; 0xbf54 <f_getcwd+0x130>
    bf52:	91 c0       	rjmp	.+290    	; 0xc076 <f_getcwd+0x252>
    bf54:	60 e0       	ldi	r22, 0x00	; 0
    bf56:	70 e0       	ldi	r23, 0x00	; 0
    bf58:	ce 01       	movw	r24, r28
    bf5a:	89 5e       	subi	r24, 0xE9	; 233
    bf5c:	9e 4f       	sbci	r25, 0xFE	; 254
    bf5e:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <dir_read>
    bf62:	00 97       	sbiw	r24, 0x00	; 0
    bf64:	09 f0       	breq	.+2      	; 0xbf68 <f_getcwd+0x144>
    bf66:	89 c0       	rjmp	.+274    	; 0xc07a <f_getcwd+0x256>
    bf68:	cf 5c       	subi	r28, 0xCF	; 207
    bf6a:	de 4f       	sbci	r29, 0xFE	; 254
    bf6c:	68 81       	ld	r22, Y
    bf6e:	79 81       	ldd	r23, Y+1	; 0x01
    bf70:	c1 53       	subi	r28, 0x31	; 49
    bf72:	d1 40       	sbci	r29, 0x01	; 1
    bf74:	cb 5b       	subi	r28, 0xBB	; 187
    bf76:	de 4f       	sbci	r29, 0xFE	; 254
    bf78:	e8 81       	ld	r30, Y
    bf7a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf7c:	c5 54       	subi	r28, 0x45	; 69
    bf7e:	d1 40       	sbci	r29, 0x01	; 1
    bf80:	80 81       	ld	r24, Z
    bf82:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    bf86:	46 16       	cp	r4, r22
    bf88:	57 06       	cpc	r5, r23
    bf8a:	68 06       	cpc	r6, r24
    bf8c:	79 06       	cpc	r7, r25
    bf8e:	41 f4       	brne	.+16     	; 0xbfa0 <f_getcwd+0x17c>
    bf90:	b6 01       	movw	r22, r12
    bf92:	ce 01       	movw	r24, r28
    bf94:	89 5e       	subi	r24, 0xE9	; 233
    bf96:	9e 4f       	sbci	r25, 0xFE	; 254
    bf98:	0e 94 ae 48 	call	0x915c	; 0x915c <get_fileinfo>
    bf9c:	f6 01       	movw	r30, r12
    bf9e:	0a c0       	rjmp	.+20     	; 0xbfb4 <f_getcwd+0x190>
    bfa0:	60 e0       	ldi	r22, 0x00	; 0
    bfa2:	70 e0       	ldi	r23, 0x00	; 0
    bfa4:	ce 01       	movw	r24, r28
    bfa6:	89 5e       	subi	r24, 0xE9	; 233
    bfa8:	9e 4f       	sbci	r25, 0xFE	; 254
    bfaa:	0e 94 49 52 	call	0xa492	; 0xa492 <dir_next>
    bfae:	00 97       	sbiw	r24, 0x00	; 0
    bfb0:	89 f2       	breq	.-94     	; 0xbf54 <f_getcwd+0x130>
    bfb2:	63 c0       	rjmp	.+198    	; 0xc07a <f_getcwd+0x256>
    bfb4:	cf 01       	movw	r24, r30
    bfb6:	8c 19       	sub	r24, r12
    bfb8:	9d 09       	sbc	r25, r13
    bfba:	31 96       	adiw	r30, 0x01	; 1
    bfbc:	25 89       	ldd	r18, Z+21	; 0x15
    bfbe:	21 11       	cpse	r18, r1
    bfc0:	f9 cf       	rjmp	.-14     	; 0xbfb4 <f_getcwd+0x190>
    bfc2:	9c 01       	movw	r18, r24
    bfc4:	2f 5f       	subi	r18, 0xFF	; 255
    bfc6:	3f 4f       	sbci	r19, 0xFF	; 255
    bfc8:	02 17       	cp	r16, r18
    bfca:	13 07       	cpc	r17, r19
    bfcc:	08 f4       	brcc	.+2      	; 0xbfd0 <f_getcwd+0x1ac>
    bfce:	51 c0       	rjmp	.+162    	; 0xc072 <f_getcwd+0x24e>
    bfd0:	f6 01       	movw	r30, r12
    bfd2:	e8 0f       	add	r30, r24
    bfd4:	f9 1f       	adc	r31, r25
    bfd6:	98 01       	movw	r18, r16
    bfd8:	ce 16       	cp	r12, r30
    bfda:	df 06       	cpc	r13, r31
    bfdc:	71 f0       	breq	.+28     	; 0xbffa <f_getcwd+0x1d6>
    bfde:	21 50       	subi	r18, 0x01	; 1
    bfe0:	31 09       	sbc	r19, r1
    bfe2:	45 89       	ldd	r20, Z+21	; 0x15
    bfe4:	c9 5b       	subi	r28, 0xB9	; 185
    bfe6:	de 4f       	sbci	r29, 0xFE	; 254
    bfe8:	a8 81       	ld	r26, Y
    bfea:	b9 81       	ldd	r27, Y+1	; 0x01
    bfec:	c7 54       	subi	r28, 0x47	; 71
    bfee:	d1 40       	sbci	r29, 0x01	; 1
    bff0:	a2 0f       	add	r26, r18
    bff2:	b3 1f       	adc	r27, r19
    bff4:	4c 93       	st	X, r20
    bff6:	31 97       	sbiw	r30, 0x01	; 1
    bff8:	ef cf       	rjmp	.-34     	; 0xbfd8 <f_getcwd+0x1b4>
    bffa:	80 95       	com	r24
    bffc:	90 95       	com	r25
    bffe:	08 0f       	add	r16, r24
    c000:	19 1f       	adc	r17, r25
    c002:	c9 5b       	subi	r28, 0xB9	; 185
    c004:	de 4f       	sbci	r29, 0xFE	; 254
    c006:	e8 81       	ld	r30, Y
    c008:	f9 81       	ldd	r31, Y+1	; 0x01
    c00a:	c7 54       	subi	r28, 0x47	; 71
    c00c:	d1 40       	sbci	r29, 0x01	; 1
    c00e:	e0 0f       	add	r30, r16
    c010:	f1 1f       	adc	r31, r17
    c012:	9f e2       	ldi	r25, 0x2F	; 47
    c014:	90 83       	st	Z, r25
    c016:	4f cf       	rjmp	.-354    	; 0xbeb6 <f_getcwd+0x92>
    c018:	08 15       	cp	r16, r8
    c01a:	19 05       	cpc	r17, r9
    c01c:	61 f4       	brne	.+24     	; 0xc036 <f_getcwd+0x212>
    c01e:	01 50       	subi	r16, 0x01	; 1
    c020:	11 09       	sbc	r17, r1
    c022:	c9 5b       	subi	r28, 0xB9	; 185
    c024:	de 4f       	sbci	r29, 0xFE	; 254
    c026:	e8 81       	ld	r30, Y
    c028:	f9 81       	ldd	r31, Y+1	; 0x01
    c02a:	c7 54       	subi	r28, 0x47	; 71
    c02c:	d1 40       	sbci	r29, 0x01	; 1
    c02e:	e0 0f       	add	r30, r16
    c030:	f1 1f       	adc	r31, r17
    c032:	8f e2       	ldi	r24, 0x2F	; 47
    c034:	80 83       	st	Z, r24
    c036:	ef ef       	ldi	r30, 0xFF	; 255
    c038:	ee 1a       	sub	r14, r30
    c03a:	fe 0a       	sbc	r15, r30
    c03c:	c9 5b       	subi	r28, 0xB9	; 185
    c03e:	de 4f       	sbci	r29, 0xFE	; 254
    c040:	e8 81       	ld	r30, Y
    c042:	f9 81       	ldd	r31, Y+1	; 0x01
    c044:	c7 54       	subi	r28, 0x47	; 71
    c046:	d1 40       	sbci	r29, 0x01	; 1
    c048:	e0 0f       	add	r30, r16
    c04a:	f1 1f       	adc	r31, r17
    c04c:	80 81       	ld	r24, Z
    c04e:	f7 01       	movw	r30, r14
    c050:	31 97       	sbiw	r30, 0x01	; 1
    c052:	80 83       	st	Z, r24
    c054:	0f 5f       	subi	r16, 0xFF	; 255
    c056:	1f 4f       	sbci	r17, 0xFF	; 255
    c058:	08 15       	cp	r16, r8
    c05a:	19 05       	cpc	r17, r9
    c05c:	60 f3       	brcs	.-40     	; 0xc036 <f_getcwd+0x212>
    c05e:	c5 01       	movw	r24, r10
    c060:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <ff_memfree>
    c064:	f7 01       	movw	r30, r14
    c066:	10 82       	st	Z, r1
    c068:	c1 01       	movw	r24, r2
    c06a:	0d c0       	rjmp	.+26     	; 0xc086 <f_getcwd+0x262>
    c06c:	81 e1       	ldi	r24, 0x11	; 17
    c06e:	90 e0       	ldi	r25, 0x00	; 0
    c070:	0a c0       	rjmp	.+20     	; 0xc086 <f_getcwd+0x262>
    c072:	81 e1       	ldi	r24, 0x11	; 17
    c074:	90 e0       	ldi	r25, 0x00	; 0
    c076:	1c 01       	movw	r2, r24
    c078:	f2 cf       	rjmp	.-28     	; 0xc05e <f_getcwd+0x23a>
    c07a:	84 30       	cpi	r24, 0x04	; 4
    c07c:	91 05       	cpc	r25, r1
    c07e:	d9 f7       	brne	.-10     	; 0xc076 <f_getcwd+0x252>
    c080:	82 e0       	ldi	r24, 0x02	; 2
    c082:	90 e0       	ldi	r25, 0x00	; 0
    c084:	f8 cf       	rjmp	.-16     	; 0xc076 <f_getcwd+0x252>
    c086:	c8 5b       	subi	r28, 0xB8	; 184
    c088:	de 4f       	sbci	r29, 0xFE	; 254
    c08a:	e2 e1       	ldi	r30, 0x12	; 18
    c08c:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000c090 <f_lseek>:
    c090:	aa e0       	ldi	r26, 0x0A	; 10
    c092:	b0 e0       	ldi	r27, 0x00	; 0
    c094:	ee e4       	ldi	r30, 0x4E	; 78
    c096:	f0 e6       	ldi	r31, 0x60	; 96
    c098:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    c09c:	1c 01       	movw	r2, r24
    c09e:	6a 01       	movw	r12, r20
    c0a0:	7b 01       	movw	r14, r22
    c0a2:	be 01       	movw	r22, r28
    c0a4:	6f 5f       	subi	r22, 0xFF	; 255
    c0a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c0a8:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    c0ac:	00 97       	sbiw	r24, 0x00	; 0
    c0ae:	09 f0       	breq	.+2      	; 0xc0b2 <f_lseek+0x22>
    c0b0:	a7 c2       	rjmp	.+1358   	; 0xc600 <f_lseek+0x570>
    c0b2:	f1 01       	movw	r30, r2
    c0b4:	87 85       	ldd	r24, Z+15	; 0x0f
    c0b6:	90 e0       	ldi	r25, 0x00	; 0
    c0b8:	00 97       	sbiw	r24, 0x00	; 0
    c0ba:	09 f0       	breq	.+2      	; 0xc0be <f_lseek+0x2e>
    c0bc:	a1 c2       	rjmp	.+1346   	; 0xc600 <f_lseek+0x570>
    c0be:	22 a1       	ldd	r18, Z+34	; 0x22
    c0c0:	33 a1       	ldd	r19, Z+35	; 0x23
    c0c2:	21 15       	cp	r18, r1
    c0c4:	31 05       	cpc	r19, r1
    c0c6:	09 f4       	brne	.+2      	; 0xc0ca <f_lseek+0x3a>
    c0c8:	2e c1       	rjmp	.+604    	; 0xc326 <f_lseek+0x296>
    c0ca:	ff ef       	ldi	r31, 0xFF	; 255
    c0cc:	cf 16       	cp	r12, r31
    c0ce:	df 06       	cpc	r13, r31
    c0d0:	ef 06       	cpc	r14, r31
    c0d2:	ff 06       	cpc	r15, r31
    c0d4:	09 f0       	breq	.+2      	; 0xc0d8 <f_lseek+0x48>
    c0d6:	9a c0       	rjmp	.+308    	; 0xc20c <f_lseek+0x17c>
    c0d8:	89 01       	movw	r16, r18
    c0da:	0c 5f       	subi	r16, 0xFC	; 252
    c0dc:	1f 4f       	sbci	r17, 0xFF	; 255
    c0de:	d9 01       	movw	r26, r18
    c0e0:	4d 91       	ld	r20, X+
    c0e2:	5d 91       	ld	r21, X+
    c0e4:	6d 91       	ld	r22, X+
    c0e6:	7c 91       	ld	r23, X
    c0e8:	4f 83       	std	Y+7, r20	; 0x07
    c0ea:	58 87       	std	Y+8, r21	; 0x08
    c0ec:	69 87       	std	Y+9, r22	; 0x09
    c0ee:	7a 87       	std	Y+10, r23	; 0x0a
    c0f0:	f1 01       	movw	r30, r2
    c0f2:	86 80       	ldd	r8, Z+6	; 0x06
    c0f4:	97 80       	ldd	r9, Z+7	; 0x07
    c0f6:	a0 84       	ldd	r10, Z+8	; 0x08
    c0f8:	b1 84       	ldd	r11, Z+9	; 0x09
    c0fa:	52 e0       	ldi	r21, 0x02	; 2
    c0fc:	c5 2e       	mov	r12, r21
    c0fe:	d1 2c       	mov	r13, r1
    c100:	e1 2c       	mov	r14, r1
    c102:	f1 2c       	mov	r15, r1
    c104:	81 14       	cp	r8, r1
    c106:	91 04       	cpc	r9, r1
    c108:	a1 04       	cpc	r10, r1
    c10a:	b1 04       	cpc	r11, r1
    c10c:	09 f4       	brne	.+2      	; 0xc110 <f_lseek+0x80>
    c10e:	65 c0       	rjmp	.+202    	; 0xc1da <f_lseek+0x14a>
    c110:	24 01       	movw	r4, r8
    c112:	35 01       	movw	r6, r10
    c114:	1b 82       	std	Y+3, r1	; 0x03
    c116:	1c 82       	std	Y+4, r1	; 0x04
    c118:	1d 82       	std	Y+5, r1	; 0x05
    c11a:	1e 82       	std	Y+6, r1	; 0x06
    c11c:	2b 81       	ldd	r18, Y+3	; 0x03
    c11e:	3c 81       	ldd	r19, Y+4	; 0x04
    c120:	4d 81       	ldd	r20, Y+5	; 0x05
    c122:	5e 81       	ldd	r21, Y+6	; 0x06
    c124:	2f 5f       	subi	r18, 0xFF	; 255
    c126:	3f 4f       	sbci	r19, 0xFF	; 255
    c128:	4f 4f       	sbci	r20, 0xFF	; 255
    c12a:	5f 4f       	sbci	r21, 0xFF	; 255
    c12c:	2b 83       	std	Y+3, r18	; 0x03
    c12e:	3c 83       	std	Y+4, r19	; 0x04
    c130:	4d 83       	std	Y+5, r20	; 0x05
    c132:	5e 83       	std	Y+6, r21	; 0x06
    c134:	b3 01       	movw	r22, r6
    c136:	a2 01       	movw	r20, r4
    c138:	d1 01       	movw	r26, r2
    c13a:	8d 91       	ld	r24, X+
    c13c:	9c 91       	ld	r25, X
    c13e:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <get_fat.isra.10>
    c142:	62 30       	cpi	r22, 0x02	; 2
    c144:	71 05       	cpc	r23, r1
    c146:	81 05       	cpc	r24, r1
    c148:	91 05       	cpc	r25, r1
    c14a:	10 f4       	brcc	.+4      	; 0xc150 <f_lseek+0xc0>
    c14c:	82 e0       	ldi	r24, 0x02	; 2
    c14e:	07 c0       	rjmp	.+14     	; 0xc15e <f_lseek+0xce>
    c150:	6f 3f       	cpi	r22, 0xFF	; 255
    c152:	ff ef       	ldi	r31, 0xFF	; 255
    c154:	7f 07       	cpc	r23, r31
    c156:	8f 07       	cpc	r24, r31
    c158:	9f 07       	cpc	r25, r31
    c15a:	29 f4       	brne	.+10     	; 0xc166 <f_lseek+0xd6>
    c15c:	81 e0       	ldi	r24, 0x01	; 1
    c15e:	f1 01       	movw	r30, r2
    c160:	87 87       	std	Z+15, r24	; 0x0f
    c162:	90 e0       	ldi	r25, 0x00	; 0
    c164:	4d c2       	rjmp	.+1178   	; 0xc600 <f_lseek+0x570>
    c166:	a3 01       	movw	r20, r6
    c168:	92 01       	movw	r18, r4
    c16a:	2f 5f       	subi	r18, 0xFF	; 255
    c16c:	3f 4f       	sbci	r19, 0xFF	; 255
    c16e:	4f 4f       	sbci	r20, 0xFF	; 255
    c170:	5f 4f       	sbci	r21, 0xFF	; 255
    c172:	2b 01       	movw	r4, r22
    c174:	3c 01       	movw	r6, r24
    c176:	62 17       	cp	r22, r18
    c178:	73 07       	cpc	r23, r19
    c17a:	84 07       	cpc	r24, r20
    c17c:	95 07       	cpc	r25, r21
    c17e:	71 f2       	breq	.-100    	; 0xc11c <f_lseek+0x8c>
    c180:	f2 e0       	ldi	r31, 0x02	; 2
    c182:	cf 0e       	add	r12, r31
    c184:	d1 1c       	adc	r13, r1
    c186:	e1 1c       	adc	r14, r1
    c188:	f1 1c       	adc	r15, r1
    c18a:	2f 81       	ldd	r18, Y+7	; 0x07
    c18c:	38 85       	ldd	r19, Y+8	; 0x08
    c18e:	49 85       	ldd	r20, Y+9	; 0x09
    c190:	5a 85       	ldd	r21, Y+10	; 0x0a
    c192:	2c 15       	cp	r18, r12
    c194:	3d 05       	cpc	r19, r13
    c196:	4e 05       	cpc	r20, r14
    c198:	5f 05       	cpc	r21, r15
    c19a:	88 f0       	brcs	.+34     	; 0xc1be <f_lseek+0x12e>
    c19c:	2b 81       	ldd	r18, Y+3	; 0x03
    c19e:	3c 81       	ldd	r19, Y+4	; 0x04
    c1a0:	4d 81       	ldd	r20, Y+5	; 0x05
    c1a2:	5e 81       	ldd	r21, Y+6	; 0x06
    c1a4:	d8 01       	movw	r26, r16
    c1a6:	2d 93       	st	X+, r18
    c1a8:	3d 93       	st	X+, r19
    c1aa:	4d 93       	st	X+, r20
    c1ac:	5c 93       	st	X, r21
    c1ae:	13 97       	sbiw	r26, 0x03	; 3
    c1b0:	f8 01       	movw	r30, r16
    c1b2:	84 82       	std	Z+4, r8	; 0x04
    c1b4:	95 82       	std	Z+5, r9	; 0x05
    c1b6:	a6 82       	std	Z+6, r10	; 0x06
    c1b8:	b7 82       	std	Z+7, r11	; 0x07
    c1ba:	08 5f       	subi	r16, 0xF8	; 248
    c1bc:	1f 4f       	sbci	r17, 0xFF	; 255
    c1be:	e9 81       	ldd	r30, Y+1	; 0x01
    c1c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c1c2:	81 8c       	ldd	r8, Z+25	; 0x19
    c1c4:	92 8c       	ldd	r9, Z+26	; 0x1a
    c1c6:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c1c8:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c1ca:	68 15       	cp	r22, r8
    c1cc:	79 05       	cpc	r23, r9
    c1ce:	8a 05       	cpc	r24, r10
    c1d0:	9b 05       	cpc	r25, r11
    c1d2:	18 f4       	brcc	.+6      	; 0xc1da <f_lseek+0x14a>
    c1d4:	4b 01       	movw	r8, r22
    c1d6:	5c 01       	movw	r10, r24
    c1d8:	9b cf       	rjmp	.-202    	; 0xc110 <f_lseek+0x80>
    c1da:	f1 01       	movw	r30, r2
    c1dc:	a2 a1       	ldd	r26, Z+34	; 0x22
    c1de:	b3 a1       	ldd	r27, Z+35	; 0x23
    c1e0:	cd 92       	st	X+, r12
    c1e2:	dd 92       	st	X+, r13
    c1e4:	ed 92       	st	X+, r14
    c1e6:	fc 92       	st	X, r15
    c1e8:	13 97       	sbiw	r26, 0x03	; 3
    c1ea:	2f 81       	ldd	r18, Y+7	; 0x07
    c1ec:	38 85       	ldd	r19, Y+8	; 0x08
    c1ee:	49 85       	ldd	r20, Y+9	; 0x09
    c1f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c1f2:	2c 15       	cp	r18, r12
    c1f4:	3d 05       	cpc	r19, r13
    c1f6:	4e 05       	cpc	r20, r14
    c1f8:	5f 05       	cpc	r21, r15
    c1fa:	08 f4       	brcc	.+2      	; 0xc1fe <f_lseek+0x16e>
    c1fc:	f8 c1       	rjmp	.+1008   	; 0xc5ee <f_lseek+0x55e>
    c1fe:	d8 01       	movw	r26, r16
    c200:	1d 92       	st	X+, r1
    c202:	1d 92       	st	X+, r1
    c204:	1d 92       	st	X+, r1
    c206:	1c 92       	st	X, r1
    c208:	13 97       	sbiw	r26, 0x03	; 3
    c20a:	ef c1       	rjmp	.+990    	; 0xc5ea <f_lseek+0x55a>
    c20c:	f1 01       	movw	r30, r2
    c20e:	82 85       	ldd	r24, Z+10	; 0x0a
    c210:	93 85       	ldd	r25, Z+11	; 0x0b
    c212:	a4 85       	ldd	r26, Z+12	; 0x0c
    c214:	b5 85       	ldd	r27, Z+13	; 0x0d
    c216:	46 01       	movw	r8, r12
    c218:	57 01       	movw	r10, r14
    c21a:	8c 15       	cp	r24, r12
    c21c:	9d 05       	cpc	r25, r13
    c21e:	ae 05       	cpc	r26, r14
    c220:	bf 05       	cpc	r27, r15
    c222:	10 f4       	brcc	.+4      	; 0xc228 <f_lseek+0x198>
    c224:	4c 01       	movw	r8, r24
    c226:	5d 01       	movw	r10, r26
    c228:	f1 01       	movw	r30, r2
    c22a:	80 8a       	std	Z+16, r8	; 0x10
    c22c:	91 8a       	std	Z+17, r9	; 0x11
    c22e:	a2 8a       	std	Z+18, r10	; 0x12
    c230:	b3 8a       	std	Z+19, r11	; 0x13
    c232:	81 14       	cp	r8, r1
    c234:	91 04       	cpc	r9, r1
    c236:	a1 04       	cpc	r10, r1
    c238:	b1 04       	cpc	r11, r1
    c23a:	09 f4       	brne	.+2      	; 0xc23e <f_lseek+0x1ae>
    c23c:	d6 c1       	rjmp	.+940    	; 0xc5ea <f_lseek+0x55a>
    c23e:	24 01       	movw	r4, r8
    c240:	35 01       	movw	r6, r10
    c242:	f1 e0       	ldi	r31, 0x01	; 1
    c244:	4f 1a       	sub	r4, r31
    c246:	51 08       	sbc	r5, r1
    c248:	61 08       	sbc	r6, r1
    c24a:	71 08       	sbc	r7, r1
    c24c:	b3 01       	movw	r22, r6
    c24e:	a2 01       	movw	r20, r4
    c250:	c1 01       	movw	r24, r2
    c252:	0e 94 53 47 	call	0x8ea6	; 0x8ea6 <clmt_clust>
    c256:	ab 01       	movw	r20, r22
    c258:	bc 01       	movw	r22, r24
    c25a:	f1 01       	movw	r30, r2
    c25c:	44 8b       	std	Z+20, r20	; 0x14
    c25e:	55 8b       	std	Z+21, r21	; 0x15
    c260:	66 8b       	std	Z+22, r22	; 0x16
    c262:	77 8b       	std	Z+23, r23	; 0x17
    c264:	e9 80       	ldd	r14, Y+1	; 0x01
    c266:	fa 80       	ldd	r15, Y+2	; 0x02
    c268:	c7 01       	movw	r24, r14
    c26a:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    c26e:	61 15       	cp	r22, r1
    c270:	71 05       	cpc	r23, r1
    c272:	81 05       	cpc	r24, r1
    c274:	91 05       	cpc	r25, r1
    c276:	09 f4       	brne	.+2      	; 0xc27a <f_lseek+0x1ea>
    c278:	69 cf       	rjmp	.-302    	; 0xc14c <f_lseek+0xbc>
    c27a:	95 01       	movw	r18, r10
    c27c:	84 01       	movw	r16, r8
    c27e:	11 70       	andi	r17, 0x01	; 1
    c280:	22 27       	eor	r18, r18
    c282:	33 27       	eor	r19, r19
    c284:	01 15       	cp	r16, r1
    c286:	11 05       	cpc	r17, r1
    c288:	21 05       	cpc	r18, r1
    c28a:	31 05       	cpc	r19, r1
    c28c:	09 f4       	brne	.+2      	; 0xc290 <f_lseek+0x200>
    c28e:	ad c1       	rjmp	.+858    	; 0xc5ea <f_lseek+0x55a>
    c290:	f7 01       	movw	r30, r14
    c292:	81 84       	ldd	r8, Z+9	; 0x09
    c294:	92 84       	ldd	r9, Z+10	; 0x0a
    c296:	f1 e0       	ldi	r31, 0x01	; 1
    c298:	8f 1a       	sub	r8, r31
    c29a:	91 08       	sbc	r9, r1
    c29c:	a1 2c       	mov	r10, r1
    c29e:	b1 2c       	mov	r11, r1
    c2a0:	49 e0       	ldi	r20, 0x09	; 9
    c2a2:	76 94       	lsr	r7
    c2a4:	67 94       	ror	r6
    c2a6:	57 94       	ror	r5
    c2a8:	47 94       	ror	r4
    c2aa:	4a 95       	dec	r20
    c2ac:	d1 f7       	brne	.-12     	; 0xc2a2 <f_lseek+0x212>
    c2ae:	48 20       	and	r4, r8
    c2b0:	59 20       	and	r5, r9
    c2b2:	6a 20       	and	r6, r10
    c2b4:	7b 20       	and	r7, r11
    c2b6:	53 01       	movw	r10, r6
    c2b8:	42 01       	movw	r8, r4
    c2ba:	86 0e       	add	r8, r22
    c2bc:	97 1e       	adc	r9, r23
    c2be:	a8 1e       	adc	r10, r24
    c2c0:	b9 1e       	adc	r11, r25
    c2c2:	f1 01       	movw	r30, r2
    c2c4:	20 8d       	ldd	r18, Z+24	; 0x18
    c2c6:	31 8d       	ldd	r19, Z+25	; 0x19
    c2c8:	42 8d       	ldd	r20, Z+26	; 0x1a
    c2ca:	53 8d       	ldd	r21, Z+27	; 0x1b
    c2cc:	82 16       	cp	r8, r18
    c2ce:	93 06       	cpc	r9, r19
    c2d0:	a4 06       	cpc	r10, r20
    c2d2:	b5 06       	cpc	r11, r21
    c2d4:	09 f4       	brne	.+2      	; 0xc2d8 <f_lseek+0x248>
    c2d6:	89 c1       	rjmp	.+786    	; 0xc5ea <f_lseek+0x55a>
    c2d8:	86 85       	ldd	r24, Z+14	; 0x0e
    c2da:	b1 01       	movw	r22, r2
    c2dc:	6c 5d       	subi	r22, 0xDC	; 220
    c2de:	7f 4f       	sbci	r23, 0xFF	; 255
    c2e0:	6b 01       	movw	r12, r22
    c2e2:	87 ff       	sbrs	r24, 7
    c2e4:	0d c0       	rjmp	.+26     	; 0xc300 <f_lseek+0x270>
    c2e6:	01 e0       	ldi	r16, 0x01	; 1
    c2e8:	10 e0       	ldi	r17, 0x00	; 0
    c2ea:	f7 01       	movw	r30, r14
    c2ec:	81 81       	ldd	r24, Z+1	; 0x01
    c2ee:	0e 94 a6 69 	call	0xd34c	; 0xd34c <disk_write>
    c2f2:	89 2b       	or	r24, r25
    c2f4:	09 f0       	breq	.+2      	; 0xc2f8 <f_lseek+0x268>
    c2f6:	32 cf       	rjmp	.-412    	; 0xc15c <f_lseek+0xcc>
    c2f8:	f1 01       	movw	r30, r2
    c2fa:	86 85       	ldd	r24, Z+14	; 0x0e
    c2fc:	8f 77       	andi	r24, 0x7F	; 127
    c2fe:	86 87       	std	Z+14, r24	; 0x0e
    c300:	e9 81       	ldd	r30, Y+1	; 0x01
    c302:	fa 81       	ldd	r31, Y+2	; 0x02
    c304:	01 e0       	ldi	r16, 0x01	; 1
    c306:	10 e0       	ldi	r17, 0x00	; 0
    c308:	a5 01       	movw	r20, r10
    c30a:	94 01       	movw	r18, r8
    c30c:	b6 01       	movw	r22, r12
    c30e:	81 81       	ldd	r24, Z+1	; 0x01
    c310:	0e 94 96 69 	call	0xd32c	; 0xd32c <disk_read>
    c314:	89 2b       	or	r24, r25
    c316:	09 f0       	breq	.+2      	; 0xc31a <f_lseek+0x28a>
    c318:	21 cf       	rjmp	.-446    	; 0xc15c <f_lseek+0xcc>
    c31a:	f1 01       	movw	r30, r2
    c31c:	80 8e       	std	Z+24, r8	; 0x18
    c31e:	91 8e       	std	Z+25, r9	; 0x19
    c320:	a2 8e       	std	Z+26, r10	; 0x1a
    c322:	b3 8e       	std	Z+27, r11	; 0x1b
    c324:	62 c1       	rjmp	.+708    	; 0xc5ea <f_lseek+0x55a>
    c326:	f1 01       	movw	r30, r2
    c328:	82 85       	ldd	r24, Z+10	; 0x0a
    c32a:	93 85       	ldd	r25, Z+11	; 0x0b
    c32c:	a4 85       	ldd	r26, Z+12	; 0x0c
    c32e:	b5 85       	ldd	r27, Z+13	; 0x0d
    c330:	8c 15       	cp	r24, r12
    c332:	9d 05       	cpc	r25, r13
    c334:	ae 05       	cpc	r26, r14
    c336:	bf 05       	cpc	r27, r15
    c338:	28 f4       	brcc	.+10     	; 0xc344 <f_lseek+0x2b4>
    c33a:	26 85       	ldd	r18, Z+14	; 0x0e
    c33c:	21 fd       	sbrc	r18, 1
    c33e:	02 c0       	rjmp	.+4      	; 0xc344 <f_lseek+0x2b4>
    c340:	6c 01       	movw	r12, r24
    c342:	7d 01       	movw	r14, r26
    c344:	f1 01       	movw	r30, r2
    c346:	40 88       	ldd	r4, Z+16	; 0x10
    c348:	51 88       	ldd	r5, Z+17	; 0x11
    c34a:	62 88       	ldd	r6, Z+18	; 0x12
    c34c:	73 88       	ldd	r7, Z+19	; 0x13
    c34e:	10 8a       	std	Z+16, r1	; 0x10
    c350:	11 8a       	std	Z+17, r1	; 0x11
    c352:	12 8a       	std	Z+18, r1	; 0x12
    c354:	13 8a       	std	Z+19, r1	; 0x13
    c356:	c1 14       	cp	r12, r1
    c358:	d1 04       	cpc	r13, r1
    c35a:	e1 04       	cpc	r14, r1
    c35c:	f1 04       	cpc	r15, r1
    c35e:	09 f4       	brne	.+2      	; 0xc362 <f_lseek+0x2d2>
    c360:	48 c1       	rjmp	.+656    	; 0xc5f2 <f_lseek+0x562>
    c362:	e9 81       	ldd	r30, Y+1	; 0x01
    c364:	fa 81       	ldd	r31, Y+2	; 0x02
    c366:	81 84       	ldd	r8, Z+9	; 0x09
    c368:	92 84       	ldd	r9, Z+10	; 0x0a
    c36a:	a1 2c       	mov	r10, r1
    c36c:	b1 2c       	mov	r11, r1
    c36e:	39 e0       	ldi	r19, 0x09	; 9
    c370:	88 0c       	add	r8, r8
    c372:	99 1c       	adc	r9, r9
    c374:	aa 1c       	adc	r10, r10
    c376:	bb 1c       	adc	r11, r11
    c378:	3a 95       	dec	r19
    c37a:	d1 f7       	brne	.-12     	; 0xc370 <f_lseek+0x2e0>
    c37c:	41 14       	cp	r4, r1
    c37e:	51 04       	cpc	r5, r1
    c380:	61 04       	cpc	r6, r1
    c382:	71 04       	cpc	r7, r1
    c384:	d9 f1       	breq	.+118    	; 0xc3fc <f_lseek+0x36c>
    c386:	f1 e0       	ldi	r31, 0x01	; 1
    c388:	4f 1a       	sub	r4, r31
    c38a:	51 08       	sbc	r5, r1
    c38c:	61 08       	sbc	r6, r1
    c38e:	71 08       	sbc	r7, r1
    c390:	c7 01       	movw	r24, r14
    c392:	b6 01       	movw	r22, r12
    c394:	61 50       	subi	r22, 0x01	; 1
    c396:	71 09       	sbc	r23, r1
    c398:	81 09       	sbc	r24, r1
    c39a:	91 09       	sbc	r25, r1
    c39c:	a5 01       	movw	r20, r10
    c39e:	94 01       	movw	r18, r8
    c3a0:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    c3a4:	2b 83       	std	Y+3, r18	; 0x03
    c3a6:	3c 83       	std	Y+4, r19	; 0x04
    c3a8:	4d 83       	std	Y+5, r20	; 0x05
    c3aa:	5e 83       	std	Y+6, r21	; 0x06
    c3ac:	c3 01       	movw	r24, r6
    c3ae:	b2 01       	movw	r22, r4
    c3b0:	a5 01       	movw	r20, r10
    c3b2:	94 01       	movw	r18, r8
    c3b4:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
    c3b8:	6b 81       	ldd	r22, Y+3	; 0x03
    c3ba:	7c 81       	ldd	r23, Y+4	; 0x04
    c3bc:	8d 81       	ldd	r24, Y+5	; 0x05
    c3be:	9e 81       	ldd	r25, Y+6	; 0x06
    c3c0:	62 17       	cp	r22, r18
    c3c2:	73 07       	cpc	r23, r19
    c3c4:	84 07       	cpc	r24, r20
    c3c6:	95 07       	cpc	r25, r21
    c3c8:	c8 f0       	brcs	.+50     	; 0xc3fc <f_lseek+0x36c>
    c3ca:	88 27       	eor	r24, r24
    c3cc:	99 27       	eor	r25, r25
    c3ce:	dc 01       	movw	r26, r24
    c3d0:	88 19       	sub	r24, r8
    c3d2:	99 09       	sbc	r25, r9
    c3d4:	aa 09       	sbc	r26, r10
    c3d6:	bb 09       	sbc	r27, r11
    c3d8:	48 22       	and	r4, r24
    c3da:	59 22       	and	r5, r25
    c3dc:	6a 22       	and	r6, r26
    c3de:	7b 22       	and	r7, r27
    c3e0:	f1 01       	movw	r30, r2
    c3e2:	40 8a       	std	Z+16, r4	; 0x10
    c3e4:	51 8a       	std	Z+17, r5	; 0x11
    c3e6:	62 8a       	std	Z+18, r6	; 0x12
    c3e8:	73 8a       	std	Z+19, r7	; 0x13
    c3ea:	c4 18       	sub	r12, r4
    c3ec:	d5 08       	sbc	r13, r5
    c3ee:	e6 08       	sbc	r14, r6
    c3f0:	f7 08       	sbc	r15, r7
    c3f2:	44 89       	ldd	r20, Z+20	; 0x14
    c3f4:	55 89       	ldd	r21, Z+21	; 0x15
    c3f6:	66 89       	ldd	r22, Z+22	; 0x16
    c3f8:	77 89       	ldd	r23, Z+23	; 0x17
    c3fa:	29 c0       	rjmp	.+82     	; 0xc44e <f_lseek+0x3be>
    c3fc:	f1 01       	movw	r30, r2
    c3fe:	46 81       	ldd	r20, Z+6	; 0x06
    c400:	57 81       	ldd	r21, Z+7	; 0x07
    c402:	60 85       	ldd	r22, Z+8	; 0x08
    c404:	71 85       	ldd	r23, Z+9	; 0x09
    c406:	41 15       	cp	r20, r1
    c408:	51 05       	cpc	r21, r1
    c40a:	61 05       	cpc	r22, r1
    c40c:	71 05       	cpc	r23, r1
    c40e:	d1 f4       	brne	.+52     	; 0xc444 <f_lseek+0x3b4>
    c410:	40 e0       	ldi	r20, 0x00	; 0
    c412:	50 e0       	ldi	r21, 0x00	; 0
    c414:	ba 01       	movw	r22, r20
    c416:	c1 01       	movw	r24, r2
    c418:	0e 94 92 50 	call	0xa124	; 0xa124 <create_chain>
    c41c:	ab 01       	movw	r20, r22
    c41e:	bc 01       	movw	r22, r24
    c420:	41 30       	cpi	r20, 0x01	; 1
    c422:	51 05       	cpc	r21, r1
    c424:	61 05       	cpc	r22, r1
    c426:	71 05       	cpc	r23, r1
    c428:	09 f4       	brne	.+2      	; 0xc42c <f_lseek+0x39c>
    c42a:	90 ce       	rjmp	.-736    	; 0xc14c <f_lseek+0xbc>
    c42c:	4f 3f       	cpi	r20, 0xFF	; 255
    c42e:	ff ef       	ldi	r31, 0xFF	; 255
    c430:	5f 07       	cpc	r21, r31
    c432:	6f 07       	cpc	r22, r31
    c434:	7f 07       	cpc	r23, r31
    c436:	09 f4       	brne	.+2      	; 0xc43a <f_lseek+0x3aa>
    c438:	91 ce       	rjmp	.-734    	; 0xc15c <f_lseek+0xcc>
    c43a:	f1 01       	movw	r30, r2
    c43c:	46 83       	std	Z+6, r20	; 0x06
    c43e:	57 83       	std	Z+7, r21	; 0x07
    c440:	60 87       	std	Z+8, r22	; 0x08
    c442:	71 87       	std	Z+9, r23	; 0x09
    c444:	f1 01       	movw	r30, r2
    c446:	44 8b       	std	Z+20, r20	; 0x14
    c448:	55 8b       	std	Z+21, r21	; 0x15
    c44a:	66 8b       	std	Z+22, r22	; 0x16
    c44c:	77 8b       	std	Z+23, r23	; 0x17
    c44e:	41 15       	cp	r20, r1
    c450:	51 05       	cpc	r21, r1
    c452:	61 05       	cpc	r22, r1
    c454:	71 05       	cpc	r23, r1
    c456:	09 f0       	breq	.+2      	; 0xc45a <f_lseek+0x3ca>
    c458:	40 c0       	rjmp	.+128    	; 0xc4da <f_lseek+0x44a>
    c45a:	c1 2c       	mov	r12, r1
    c45c:	d1 2c       	mov	r13, r1
    c45e:	76 01       	movw	r14, r12
    c460:	79 c0       	rjmp	.+242    	; 0xc554 <f_lseek+0x4c4>
    c462:	c8 18       	sub	r12, r8
    c464:	d9 08       	sbc	r13, r9
    c466:	ea 08       	sbc	r14, r10
    c468:	fb 08       	sbc	r15, r11
    c46a:	f1 01       	movw	r30, r2
    c46c:	80 89       	ldd	r24, Z+16	; 0x10
    c46e:	91 89       	ldd	r25, Z+17	; 0x11
    c470:	a2 89       	ldd	r26, Z+18	; 0x12
    c472:	b3 89       	ldd	r27, Z+19	; 0x13
    c474:	88 0d       	add	r24, r8
    c476:	99 1d       	adc	r25, r9
    c478:	aa 1d       	adc	r26, r10
    c47a:	bb 1d       	adc	r27, r11
    c47c:	80 8b       	std	Z+16, r24	; 0x10
    c47e:	91 8b       	std	Z+17, r25	; 0x11
    c480:	a2 8b       	std	Z+18, r26	; 0x12
    c482:	b3 8b       	std	Z+19, r27	; 0x13
    c484:	86 85       	ldd	r24, Z+14	; 0x0e
    c486:	81 ff       	sbrs	r24, 1
    c488:	2f c0       	rjmp	.+94     	; 0xc4e8 <f_lseek+0x458>
    c48a:	c1 01       	movw	r24, r2
    c48c:	0e 94 92 50 	call	0xa124	; 0xa124 <create_chain>
    c490:	ab 01       	movw	r20, r22
    c492:	bc 01       	movw	r22, r24
    c494:	41 15       	cp	r20, r1
    c496:	51 05       	cpc	r21, r1
    c498:	61 05       	cpc	r22, r1
    c49a:	71 05       	cpc	r23, r1
    c49c:	61 f1       	breq	.+88     	; 0xc4f6 <f_lseek+0x466>
    c49e:	4f 3f       	cpi	r20, 0xFF	; 255
    c4a0:	bf ef       	ldi	r27, 0xFF	; 255
    c4a2:	5b 07       	cpc	r21, r27
    c4a4:	6b 07       	cpc	r22, r27
    c4a6:	7b 07       	cpc	r23, r27
    c4a8:	09 f4       	brne	.+2      	; 0xc4ac <f_lseek+0x41c>
    c4aa:	58 ce       	rjmp	.-848    	; 0xc15c <f_lseek+0xcc>
    c4ac:	42 30       	cpi	r20, 0x02	; 2
    c4ae:	51 05       	cpc	r21, r1
    c4b0:	61 05       	cpc	r22, r1
    c4b2:	71 05       	cpc	r23, r1
    c4b4:	08 f4       	brcc	.+2      	; 0xc4b8 <f_lseek+0x428>
    c4b6:	4a ce       	rjmp	.-876    	; 0xc14c <f_lseek+0xbc>
    c4b8:	e9 81       	ldd	r30, Y+1	; 0x01
    c4ba:	fa 81       	ldd	r31, Y+2	; 0x02
    c4bc:	81 8d       	ldd	r24, Z+25	; 0x19
    c4be:	92 8d       	ldd	r25, Z+26	; 0x1a
    c4c0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c4c2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c4c4:	48 17       	cp	r20, r24
    c4c6:	59 07       	cpc	r21, r25
    c4c8:	6a 07       	cpc	r22, r26
    c4ca:	7b 07       	cpc	r23, r27
    c4cc:	08 f0       	brcs	.+2      	; 0xc4d0 <f_lseek+0x440>
    c4ce:	3e ce       	rjmp	.-900    	; 0xc14c <f_lseek+0xbc>
    c4d0:	f1 01       	movw	r30, r2
    c4d2:	44 8b       	std	Z+20, r20	; 0x14
    c4d4:	55 8b       	std	Z+21, r21	; 0x15
    c4d6:	66 8b       	std	Z+22, r22	; 0x16
    c4d8:	77 8b       	std	Z+23, r23	; 0x17
    c4da:	8c 14       	cp	r8, r12
    c4dc:	9d 04       	cpc	r9, r13
    c4de:	ae 04       	cpc	r10, r14
    c4e0:	bf 04       	cpc	r11, r15
    c4e2:	08 f4       	brcc	.+2      	; 0xc4e6 <f_lseek+0x456>
    c4e4:	be cf       	rjmp	.-132    	; 0xc462 <f_lseek+0x3d2>
    c4e6:	0a c0       	rjmp	.+20     	; 0xc4fc <f_lseek+0x46c>
    c4e8:	80 81       	ld	r24, Z
    c4ea:	91 81       	ldd	r25, Z+1	; 0x01
    c4ec:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <get_fat.isra.10>
    c4f0:	ab 01       	movw	r20, r22
    c4f2:	bc 01       	movw	r22, r24
    c4f4:	d4 cf       	rjmp	.-88     	; 0xc49e <f_lseek+0x40e>
    c4f6:	c1 2c       	mov	r12, r1
    c4f8:	d1 2c       	mov	r13, r1
    c4fa:	76 01       	movw	r14, r12
    c4fc:	f1 01       	movw	r30, r2
    c4fe:	80 89       	ldd	r24, Z+16	; 0x10
    c500:	91 89       	ldd	r25, Z+17	; 0x11
    c502:	a2 89       	ldd	r26, Z+18	; 0x12
    c504:	b3 89       	ldd	r27, Z+19	; 0x13
    c506:	8c 0d       	add	r24, r12
    c508:	9d 1d       	adc	r25, r13
    c50a:	ae 1d       	adc	r26, r14
    c50c:	bf 1d       	adc	r27, r15
    c50e:	80 8b       	std	Z+16, r24	; 0x10
    c510:	91 8b       	std	Z+17, r25	; 0x11
    c512:	a2 8b       	std	Z+18, r26	; 0x12
    c514:	b3 8b       	std	Z+19, r27	; 0x13
    c516:	d7 01       	movw	r26, r14
    c518:	c6 01       	movw	r24, r12
    c51a:	91 70       	andi	r25, 0x01	; 1
    c51c:	aa 27       	eor	r26, r26
    c51e:	bb 27       	eor	r27, r27
    c520:	89 2b       	or	r24, r25
    c522:	8a 2b       	or	r24, r26
    c524:	8b 2b       	or	r24, r27
    c526:	09 f4       	brne	.+2      	; 0xc52a <f_lseek+0x49a>
    c528:	98 cf       	rjmp	.-208    	; 0xc45a <f_lseek+0x3ca>
    c52a:	89 81       	ldd	r24, Y+1	; 0x01
    c52c:	9a 81       	ldd	r25, Y+2	; 0x02
    c52e:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    c532:	61 15       	cp	r22, r1
    c534:	71 05       	cpc	r23, r1
    c536:	81 05       	cpc	r24, r1
    c538:	91 05       	cpc	r25, r1
    c53a:	09 f4       	brne	.+2      	; 0xc53e <f_lseek+0x4ae>
    c53c:	07 ce       	rjmp	.-1010   	; 0xc14c <f_lseek+0xbc>
    c53e:	29 e0       	ldi	r18, 0x09	; 9
    c540:	f6 94       	lsr	r15
    c542:	e7 94       	ror	r14
    c544:	d7 94       	ror	r13
    c546:	c7 94       	ror	r12
    c548:	2a 95       	dec	r18
    c54a:	d1 f7       	brne	.-12     	; 0xc540 <f_lseek+0x4b0>
    c54c:	c6 0e       	add	r12, r22
    c54e:	d7 1e       	adc	r13, r23
    c550:	e8 1e       	adc	r14, r24
    c552:	f9 1e       	adc	r15, r25
    c554:	f1 01       	movw	r30, r2
    c556:	80 89       	ldd	r24, Z+16	; 0x10
    c558:	91 89       	ldd	r25, Z+17	; 0x11
    c55a:	a2 89       	ldd	r26, Z+18	; 0x12
    c55c:	b3 89       	ldd	r27, Z+19	; 0x13
    c55e:	42 85       	ldd	r20, Z+10	; 0x0a
    c560:	53 85       	ldd	r21, Z+11	; 0x0b
    c562:	64 85       	ldd	r22, Z+12	; 0x0c
    c564:	75 85       	ldd	r23, Z+13	; 0x0d
    c566:	48 17       	cp	r20, r24
    c568:	59 07       	cpc	r21, r25
    c56a:	6a 07       	cpc	r22, r26
    c56c:	7b 07       	cpc	r23, r27
    c56e:	38 f4       	brcc	.+14     	; 0xc57e <f_lseek+0x4ee>
    c570:	82 87       	std	Z+10, r24	; 0x0a
    c572:	93 87       	std	Z+11, r25	; 0x0b
    c574:	a4 87       	std	Z+12, r26	; 0x0c
    c576:	b5 87       	std	Z+13, r27	; 0x0d
    c578:	26 85       	ldd	r18, Z+14	; 0x0e
    c57a:	20 64       	ori	r18, 0x40	; 64
    c57c:	26 87       	std	Z+14, r18	; 0x0e
    c57e:	91 70       	andi	r25, 0x01	; 1
    c580:	aa 27       	eor	r26, r26
    c582:	bb 27       	eor	r27, r27
    c584:	89 2b       	or	r24, r25
    c586:	8a 2b       	or	r24, r26
    c588:	8b 2b       	or	r24, r27
    c58a:	79 f1       	breq	.+94     	; 0xc5ea <f_lseek+0x55a>
    c58c:	f1 01       	movw	r30, r2
    c58e:	20 8d       	ldd	r18, Z+24	; 0x18
    c590:	31 8d       	ldd	r19, Z+25	; 0x19
    c592:	42 8d       	ldd	r20, Z+26	; 0x1a
    c594:	53 8d       	ldd	r21, Z+27	; 0x1b
    c596:	2c 15       	cp	r18, r12
    c598:	3d 05       	cpc	r19, r13
    c59a:	4e 05       	cpc	r20, r14
    c59c:	5f 05       	cpc	r21, r15
    c59e:	29 f1       	breq	.+74     	; 0xc5ea <f_lseek+0x55a>
    c5a0:	86 85       	ldd	r24, Z+14	; 0x0e
    c5a2:	b1 01       	movw	r22, r2
    c5a4:	6c 5d       	subi	r22, 0xDC	; 220
    c5a6:	7f 4f       	sbci	r23, 0xFF	; 255
    c5a8:	5b 01       	movw	r10, r22
    c5aa:	87 ff       	sbrs	r24, 7
    c5ac:	0d c0       	rjmp	.+26     	; 0xc5c8 <f_lseek+0x538>
    c5ae:	e9 81       	ldd	r30, Y+1	; 0x01
    c5b0:	fa 81       	ldd	r31, Y+2	; 0x02
    c5b2:	01 e0       	ldi	r16, 0x01	; 1
    c5b4:	10 e0       	ldi	r17, 0x00	; 0
    c5b6:	81 81       	ldd	r24, Z+1	; 0x01
    c5b8:	c9 d6       	rcall	.+3474   	; 0xd34c <disk_write>
    c5ba:	89 2b       	or	r24, r25
    c5bc:	09 f0       	breq	.+2      	; 0xc5c0 <f_lseek+0x530>
    c5be:	ce cd       	rjmp	.-1124   	; 0xc15c <f_lseek+0xcc>
    c5c0:	f1 01       	movw	r30, r2
    c5c2:	86 85       	ldd	r24, Z+14	; 0x0e
    c5c4:	8f 77       	andi	r24, 0x7F	; 127
    c5c6:	86 87       	std	Z+14, r24	; 0x0e
    c5c8:	e9 81       	ldd	r30, Y+1	; 0x01
    c5ca:	fa 81       	ldd	r31, Y+2	; 0x02
    c5cc:	01 e0       	ldi	r16, 0x01	; 1
    c5ce:	10 e0       	ldi	r17, 0x00	; 0
    c5d0:	a7 01       	movw	r20, r14
    c5d2:	96 01       	movw	r18, r12
    c5d4:	b5 01       	movw	r22, r10
    c5d6:	81 81       	ldd	r24, Z+1	; 0x01
    c5d8:	a9 d6       	rcall	.+3410   	; 0xd32c <disk_read>
    c5da:	89 2b       	or	r24, r25
    c5dc:	09 f0       	breq	.+2      	; 0xc5e0 <f_lseek+0x550>
    c5de:	be cd       	rjmp	.-1156   	; 0xc15c <f_lseek+0xcc>
    c5e0:	f1 01       	movw	r30, r2
    c5e2:	c0 8e       	std	Z+24, r12	; 0x18
    c5e4:	d1 8e       	std	Z+25, r13	; 0x19
    c5e6:	e2 8e       	std	Z+26, r14	; 0x1a
    c5e8:	f3 8e       	std	Z+27, r15	; 0x1b
    c5ea:	80 e0       	ldi	r24, 0x00	; 0
    c5ec:	ba cd       	rjmp	.-1164   	; 0xc162 <f_lseek+0xd2>
    c5ee:	81 e1       	ldi	r24, 0x11	; 17
    c5f0:	b8 cd       	rjmp	.-1168   	; 0xc162 <f_lseek+0xd2>
    c5f2:	80 e0       	ldi	r24, 0x00	; 0
    c5f4:	90 e0       	ldi	r25, 0x00	; 0
    c5f6:	dc 01       	movw	r26, r24
    c5f8:	c1 2c       	mov	r12, r1
    c5fa:	d1 2c       	mov	r13, r1
    c5fc:	76 01       	movw	r14, r12
    c5fe:	bf cf       	rjmp	.-130    	; 0xc57e <f_lseek+0x4ee>
    c600:	2a 96       	adiw	r28, 0x0a	; 10
    c602:	e2 e1       	ldi	r30, 0x12	; 18
    c604:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000c608 <f_opendir>:
    c608:	a4 e0       	ldi	r26, 0x04	; 4
    c60a:	b0 e0       	ldi	r27, 0x00	; 0
    c60c:	ea e0       	ldi	r30, 0x0A	; 10
    c60e:	f3 e6       	ldi	r31, 0x63	; 99
    c610:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    c614:	7c 83       	std	Y+4, r23	; 0x04
    c616:	6b 83       	std	Y+3, r22	; 0x03
    c618:	00 97       	sbiw	r24, 0x00	; 0
    c61a:	09 f4       	brne	.+2      	; 0xc61e <f_opendir+0x16>
    c61c:	48 c0       	rjmp	.+144    	; 0xc6ae <f_opendir+0xa6>
    c61e:	8c 01       	movw	r16, r24
    c620:	40 e0       	ldi	r20, 0x00	; 0
    c622:	be 01       	movw	r22, r28
    c624:	6f 5f       	subi	r22, 0xFF	; 255
    c626:	7f 4f       	sbci	r23, 0xFF	; 255
    c628:	ce 01       	movw	r24, r28
    c62a:	03 96       	adiw	r24, 0x03	; 3
    c62c:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    c630:	7c 01       	movw	r14, r24
    c632:	89 2b       	or	r24, r25
    c634:	b9 f5       	brne	.+110    	; 0xc6a4 <f_opendir+0x9c>
    c636:	89 81       	ldd	r24, Y+1	; 0x01
    c638:	9a 81       	ldd	r25, Y+2	; 0x02
    c63a:	f8 01       	movw	r30, r16
    c63c:	91 83       	std	Z+1, r25	; 0x01
    c63e:	80 83       	st	Z, r24
    c640:	80 e0       	ldi	r24, 0x00	; 0
    c642:	92 e0       	ldi	r25, 0x02	; 2
    c644:	b7 d5       	rcall	.+2926   	; 0xd1b4 <ff_memalloc>
    c646:	6c 01       	movw	r12, r24
    c648:	00 97       	sbiw	r24, 0x00	; 0
    c64a:	99 f1       	breq	.+102    	; 0xc6b2 <f_opendir+0xaa>
    c64c:	e9 81       	ldd	r30, Y+1	; 0x01
    c64e:	fa 81       	ldd	r31, Y+2	; 0x02
    c650:	94 87       	std	Z+12, r25	; 0x0c
    c652:	83 87       	std	Z+11, r24	; 0x0b
    c654:	6b 81       	ldd	r22, Y+3	; 0x03
    c656:	7c 81       	ldd	r23, Y+4	; 0x04
    c658:	c8 01       	movw	r24, r16
    c65a:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    c65e:	7c 01       	movw	r14, r24
    c660:	89 2b       	or	r24, r25
    c662:	b9 f4       	brne	.+46     	; 0xc692 <f_opendir+0x8a>
    c664:	f8 01       	movw	r30, r16
    c666:	87 a1       	ldd	r24, Z+39	; 0x27
    c668:	87 fd       	sbrc	r24, 7
    c66a:	28 c0       	rjmp	.+80     	; 0xc6bc <f_opendir+0xb4>
    c66c:	84 81       	ldd	r24, Z+4	; 0x04
    c66e:	84 ff       	sbrs	r24, 4
    c670:	0d c0       	rjmp	.+26     	; 0xc68c <f_opendir+0x84>
    c672:	62 8d       	ldd	r22, Z+26	; 0x1a
    c674:	73 8d       	ldd	r23, Z+27	; 0x1b
    c676:	e9 81       	ldd	r30, Y+1	; 0x01
    c678:	fa 81       	ldd	r31, Y+2	; 0x02
    c67a:	80 81       	ld	r24, Z
    c67c:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    c680:	f8 01       	movw	r30, r16
    c682:	66 83       	std	Z+6, r22	; 0x06
    c684:	77 83       	std	Z+7, r23	; 0x07
    c686:	80 87       	std	Z+8, r24	; 0x08
    c688:	91 87       	std	Z+9, r25	; 0x09
    c68a:	18 c0       	rjmp	.+48     	; 0xc6bc <f_opendir+0xb4>
    c68c:	95 e0       	ldi	r25, 0x05	; 5
    c68e:	e9 2e       	mov	r14, r25
    c690:	f1 2c       	mov	r15, r1
    c692:	c6 01       	movw	r24, r12
    c694:	92 d5       	rcall	.+2852   	; 0xd1ba <ff_memfree>
    c696:	f4 e0       	ldi	r31, 0x04	; 4
    c698:	ef 16       	cp	r14, r31
    c69a:	f1 04       	cpc	r15, r1
    c69c:	f1 f0       	breq	.+60     	; 0xc6da <f_opendir+0xd2>
    c69e:	e1 14       	cp	r14, r1
    c6a0:	f1 04       	cpc	r15, r1
    c6a2:	49 f0       	breq	.+18     	; 0xc6b6 <f_opendir+0xae>
    c6a4:	f8 01       	movw	r30, r16
    c6a6:	11 82       	std	Z+1, r1	; 0x01
    c6a8:	10 82       	st	Z, r1
    c6aa:	c7 01       	movw	r24, r14
    c6ac:	1a c0       	rjmp	.+52     	; 0xc6e2 <f_opendir+0xda>
    c6ae:	89 e0       	ldi	r24, 0x09	; 9
    c6b0:	03 c0       	rjmp	.+6      	; 0xc6b8 <f_opendir+0xb0>
    c6b2:	81 e1       	ldi	r24, 0x11	; 17
    c6b4:	01 c0       	rjmp	.+2      	; 0xc6b8 <f_opendir+0xb0>
    c6b6:	80 e0       	ldi	r24, 0x00	; 0
    c6b8:	90 e0       	ldi	r25, 0x00	; 0
    c6ba:	13 c0       	rjmp	.+38     	; 0xc6e2 <f_opendir+0xda>
    c6bc:	e9 81       	ldd	r30, Y+1	; 0x01
    c6be:	fa 81       	ldd	r31, Y+2	; 0x02
    c6c0:	85 81       	ldd	r24, Z+5	; 0x05
    c6c2:	96 81       	ldd	r25, Z+6	; 0x06
    c6c4:	f8 01       	movw	r30, r16
    c6c6:	93 83       	std	Z+3, r25	; 0x03
    c6c8:	82 83       	std	Z+2, r24	; 0x02
    c6ca:	40 e0       	ldi	r20, 0x00	; 0
    c6cc:	50 e0       	ldi	r21, 0x00	; 0
    c6ce:	ba 01       	movw	r22, r20
    c6d0:	c8 01       	movw	r24, r16
    c6d2:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <dir_sdi>
    c6d6:	7c 01       	movw	r14, r24
    c6d8:	dc cf       	rjmp	.-72     	; 0xc692 <f_opendir+0x8a>
    c6da:	85 e0       	ldi	r24, 0x05	; 5
    c6dc:	e8 2e       	mov	r14, r24
    c6de:	f1 2c       	mov	r15, r1
    c6e0:	e1 cf       	rjmp	.-62     	; 0xc6a4 <f_opendir+0x9c>
    c6e2:	24 96       	adiw	r28, 0x04	; 4
    c6e4:	e8 e0       	ldi	r30, 0x08	; 8
    c6e6:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000c6ea <f_closedir>:
    c6ea:	a2 e0       	ldi	r26, 0x02	; 2
    c6ec:	b0 e0       	ldi	r27, 0x00	; 0
    c6ee:	eb e7       	ldi	r30, 0x7B	; 123
    c6f0:	f3 e6       	ldi	r31, 0x63	; 99
    c6f2:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    c6f6:	8c 01       	movw	r16, r24
    c6f8:	be 01       	movw	r22, r28
    c6fa:	6f 5f       	subi	r22, 0xFF	; 255
    c6fc:	7f 4f       	sbci	r23, 0xFF	; 255
    c6fe:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    c702:	00 97       	sbiw	r24, 0x00	; 0
    c704:	19 f4       	brne	.+6      	; 0xc70c <f_closedir+0x22>
    c706:	f8 01       	movw	r30, r16
    c708:	11 82       	std	Z+1, r1	; 0x01
    c70a:	10 82       	st	Z, r1
    c70c:	22 96       	adiw	r28, 0x02	; 2
    c70e:	e4 e0       	ldi	r30, 0x04	; 4
    c710:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0000c714 <f_readdir>:
    c714:	a2 e0       	ldi	r26, 0x02	; 2
    c716:	b0 e0       	ldi	r27, 0x00	; 0
    c718:	e0 e9       	ldi	r30, 0x90	; 144
    c71a:	f3 e6       	ldi	r31, 0x63	; 99
    c71c:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
    c720:	7c 01       	movw	r14, r24
    c722:	5b 01       	movw	r10, r22
    c724:	be 01       	movw	r22, r28
    c726:	6f 5f       	subi	r22, 0xFF	; 255
    c728:	7f 4f       	sbci	r23, 0xFF	; 255
    c72a:	0e 94 ca 47 	call	0x8f94	; 0x8f94 <validate>
    c72e:	00 97       	sbiw	r24, 0x00	; 0
    c730:	89 f5       	brne	.+98     	; 0xc794 <f_readdir+0x80>
    c732:	a1 14       	cp	r10, r1
    c734:	b1 04       	cpc	r11, r1
    c736:	39 f4       	brne	.+14     	; 0xc746 <f_readdir+0x32>
    c738:	40 e0       	ldi	r20, 0x00	; 0
    c73a:	50 e0       	ldi	r21, 0x00	; 0
    c73c:	ba 01       	movw	r22, r20
    c73e:	c7 01       	movw	r24, r14
    c740:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <dir_sdi>
    c744:	27 c0       	rjmp	.+78     	; 0xc794 <f_readdir+0x80>
    c746:	80 e0       	ldi	r24, 0x00	; 0
    c748:	92 e0       	ldi	r25, 0x02	; 2
    c74a:	34 d5       	rcall	.+2664   	; 0xd1b4 <ff_memalloc>
    c74c:	6c 01       	movw	r12, r24
    c74e:	00 97       	sbiw	r24, 0x00	; 0
    c750:	f9 f0       	breq	.+62     	; 0xc790 <f_readdir+0x7c>
    c752:	e9 81       	ldd	r30, Y+1	; 0x01
    c754:	fa 81       	ldd	r31, Y+2	; 0x02
    c756:	94 87       	std	Z+12, r25	; 0x0c
    c758:	83 87       	std	Z+11, r24	; 0x0b
    c75a:	60 e0       	ldi	r22, 0x00	; 0
    c75c:	70 e0       	ldi	r23, 0x00	; 0
    c75e:	c7 01       	movw	r24, r14
    c760:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <dir_read>
    c764:	8c 01       	movw	r16, r24
    c766:	8b 7f       	andi	r24, 0xFB	; 251
    c768:	89 2b       	or	r24, r25
    c76a:	71 f4       	brne	.+28     	; 0xc788 <f_readdir+0x74>
    c76c:	b5 01       	movw	r22, r10
    c76e:	c7 01       	movw	r24, r14
    c770:	0e 94 ae 48 	call	0x915c	; 0x915c <get_fileinfo>
    c774:	60 e0       	ldi	r22, 0x00	; 0
    c776:	70 e0       	ldi	r23, 0x00	; 0
    c778:	c7 01       	movw	r24, r14
    c77a:	0e 94 49 52 	call	0xa492	; 0xa492 <dir_next>
    c77e:	8c 01       	movw	r16, r24
    c780:	04 97       	sbiw	r24, 0x04	; 4
    c782:	11 f4       	brne	.+4      	; 0xc788 <f_readdir+0x74>
    c784:	00 e0       	ldi	r16, 0x00	; 0
    c786:	10 e0       	ldi	r17, 0x00	; 0
    c788:	c6 01       	movw	r24, r12
    c78a:	17 d5       	rcall	.+2606   	; 0xd1ba <ff_memfree>
    c78c:	c8 01       	movw	r24, r16
    c78e:	02 c0       	rjmp	.+4      	; 0xc794 <f_readdir+0x80>
    c790:	81 e1       	ldi	r24, 0x11	; 17
    c792:	90 e0       	ldi	r25, 0x00	; 0
    c794:	22 96       	adiw	r28, 0x02	; 2
    c796:	ea e0       	ldi	r30, 0x0A	; 10
    c798:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0000c79c <f_stat>:
    c79c:	a0 e3       	ldi	r26, 0x30	; 48
    c79e:	b0 e0       	ldi	r27, 0x00	; 0
    c7a0:	e4 ed       	ldi	r30, 0xD4	; 212
    c7a2:	f3 e6       	ldi	r31, 0x63	; 99
    c7a4:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    c7a8:	98 ab       	std	Y+48, r25	; 0x30
    c7aa:	8f a7       	std	Y+47, r24	; 0x2f
    c7ac:	6b 01       	movw	r12, r22
    c7ae:	40 e0       	ldi	r20, 0x00	; 0
    c7b0:	be 01       	movw	r22, r28
    c7b2:	6f 5f       	subi	r22, 0xFF	; 255
    c7b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7b6:	ce 01       	movw	r24, r28
    c7b8:	8f 96       	adiw	r24, 0x2f	; 47
    c7ba:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    c7be:	00 97       	sbiw	r24, 0x00	; 0
    c7c0:	39 f5       	brne	.+78     	; 0xc810 <f_stat+0x74>
    c7c2:	80 e0       	ldi	r24, 0x00	; 0
    c7c4:	92 e0       	ldi	r25, 0x02	; 2
    c7c6:	f6 d4       	rcall	.+2540   	; 0xd1b4 <ff_memalloc>
    c7c8:	7c 01       	movw	r14, r24
    c7ca:	00 97       	sbiw	r24, 0x00	; 0
    c7cc:	f9 f0       	breq	.+62     	; 0xc80c <f_stat+0x70>
    c7ce:	e9 81       	ldd	r30, Y+1	; 0x01
    c7d0:	fa 81       	ldd	r31, Y+2	; 0x02
    c7d2:	94 87       	std	Z+12, r25	; 0x0c
    c7d4:	83 87       	std	Z+11, r24	; 0x0b
    c7d6:	6f a5       	ldd	r22, Y+47	; 0x2f
    c7d8:	78 a9       	ldd	r23, Y+48	; 0x30
    c7da:	ce 01       	movw	r24, r28
    c7dc:	01 96       	adiw	r24, 0x01	; 1
    c7de:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    c7e2:	8c 01       	movw	r16, r24
    c7e4:	89 2b       	or	r24, r25
    c7e6:	71 f4       	brne	.+28     	; 0xc804 <f_stat+0x68>
    c7e8:	88 a5       	ldd	r24, Y+40	; 0x28
    c7ea:	87 fd       	sbrc	r24, 7
    c7ec:	09 c0       	rjmp	.+18     	; 0xc800 <f_stat+0x64>
    c7ee:	c1 14       	cp	r12, r1
    c7f0:	d1 04       	cpc	r13, r1
    c7f2:	41 f0       	breq	.+16     	; 0xc804 <f_stat+0x68>
    c7f4:	b6 01       	movw	r22, r12
    c7f6:	ce 01       	movw	r24, r28
    c7f8:	01 96       	adiw	r24, 0x01	; 1
    c7fa:	0e 94 ae 48 	call	0x915c	; 0x915c <get_fileinfo>
    c7fe:	02 c0       	rjmp	.+4      	; 0xc804 <f_stat+0x68>
    c800:	06 e0       	ldi	r16, 0x06	; 6
    c802:	10 e0       	ldi	r17, 0x00	; 0
    c804:	c7 01       	movw	r24, r14
    c806:	d9 d4       	rcall	.+2482   	; 0xd1ba <ff_memfree>
    c808:	c8 01       	movw	r24, r16
    c80a:	02 c0       	rjmp	.+4      	; 0xc810 <f_stat+0x74>
    c80c:	81 e1       	ldi	r24, 0x11	; 17
    c80e:	90 e0       	ldi	r25, 0x00	; 0
    c810:	e0 96       	adiw	r28, 0x30	; 48
    c812:	e8 e0       	ldi	r30, 0x08	; 8
    c814:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000c818 <f_getfree>:
    c818:	aa e0       	ldi	r26, 0x0A	; 10
    c81a:	b0 e0       	ldi	r27, 0x00	; 0
    c81c:	e2 e1       	ldi	r30, 0x12	; 18
    c81e:	f4 e6       	ldi	r31, 0x64	; 100
    c820:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    c824:	9c 83       	std	Y+4, r25	; 0x04
    c826:	8b 83       	std	Y+3, r24	; 0x03
    c828:	7e 83       	std	Y+6, r23	; 0x06
    c82a:	6d 83       	std	Y+5, r22	; 0x05
    c82c:	7a 01       	movw	r14, r20
    c82e:	40 e0       	ldi	r20, 0x00	; 0
    c830:	be 01       	movw	r22, r28
    c832:	6f 5f       	subi	r22, 0xFF	; 255
    c834:	7f 4f       	sbci	r23, 0xFF	; 255
    c836:	ce 01       	movw	r24, r28
    c838:	03 96       	adiw	r24, 0x03	; 3
    c83a:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    c83e:	8c 01       	movw	r16, r24
    c840:	89 2b       	or	r24, r25
    c842:	09 f0       	breq	.+2      	; 0xc846 <f_getfree+0x2e>
    c844:	c4 c0       	rjmp	.+392    	; 0xc9ce <f_getfree+0x1b6>
    c846:	69 80       	ldd	r6, Y+1	; 0x01
    c848:	7a 80       	ldd	r7, Y+2	; 0x02
    c84a:	d7 01       	movw	r26, r14
    c84c:	6d 92       	st	X+, r6
    c84e:	7c 92       	st	X, r7
    c850:	f3 01       	movw	r30, r6
    c852:	81 89       	ldd	r24, Z+17	; 0x11
    c854:	92 89       	ldd	r25, Z+18	; 0x12
    c856:	a3 89       	ldd	r26, Z+19	; 0x13
    c858:	b4 89       	ldd	r27, Z+20	; 0x14
    c85a:	81 8c       	ldd	r8, Z+25	; 0x19
    c85c:	92 8c       	ldd	r9, Z+26	; 0x1a
    c85e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c860:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c862:	b5 01       	movw	r22, r10
    c864:	a4 01       	movw	r20, r8
    c866:	42 50       	subi	r20, 0x02	; 2
    c868:	51 09       	sbc	r21, r1
    c86a:	61 09       	sbc	r22, r1
    c86c:	71 09       	sbc	r23, r1
    c86e:	48 17       	cp	r20, r24
    c870:	59 07       	cpc	r21, r25
    c872:	6a 07       	cpc	r22, r26
    c874:	7b 07       	cpc	r23, r27
    c876:	38 f0       	brcs	.+14     	; 0xc886 <f_getfree+0x6e>
    c878:	ed 81       	ldd	r30, Y+5	; 0x05
    c87a:	fe 81       	ldd	r31, Y+6	; 0x06
    c87c:	80 83       	st	Z, r24
    c87e:	91 83       	std	Z+1, r25	; 0x01
    c880:	a2 83       	std	Z+2, r26	; 0x02
    c882:	b3 83       	std	Z+3, r27	; 0x03
    c884:	a4 c0       	rjmp	.+328    	; 0xc9ce <f_getfree+0x1b6>
    c886:	80 81       	ld	r24, Z
    c888:	81 30       	cpi	r24, 0x01	; 1
    c88a:	a1 f5       	brne	.+104    	; 0xc8f4 <f_getfree+0xdc>
    c88c:	82 e0       	ldi	r24, 0x02	; 2
    c88e:	88 2e       	mov	r8, r24
    c890:	91 2c       	mov	r9, r1
    c892:	a1 2c       	mov	r10, r1
    c894:	b1 2c       	mov	r11, r1
    c896:	c1 2c       	mov	r12, r1
    c898:	d1 2c       	mov	r13, r1
    c89a:	76 01       	movw	r14, r12
    c89c:	b5 01       	movw	r22, r10
    c89e:	a4 01       	movw	r20, r8
    c8a0:	c3 01       	movw	r24, r6
    c8a2:	0e 94 1d 4f 	call	0x9e3a	; 0x9e3a <get_fat.isra.10>
    c8a6:	6f 3f       	cpi	r22, 0xFF	; 255
    c8a8:	bf ef       	ldi	r27, 0xFF	; 255
    c8aa:	7b 07       	cpc	r23, r27
    c8ac:	8b 07       	cpc	r24, r27
    c8ae:	9b 07       	cpc	r25, r27
    c8b0:	09 f4       	brne	.+2      	; 0xc8b4 <f_getfree+0x9c>
    c8b2:	76 c0       	rjmp	.+236    	; 0xc9a0 <f_getfree+0x188>
    c8b4:	61 30       	cpi	r22, 0x01	; 1
    c8b6:	71 05       	cpc	r23, r1
    c8b8:	81 05       	cpc	r24, r1
    c8ba:	91 05       	cpc	r25, r1
    c8bc:	09 f4       	brne	.+2      	; 0xc8c0 <f_getfree+0xa8>
    c8be:	73 c0       	rjmp	.+230    	; 0xc9a6 <f_getfree+0x18e>
    c8c0:	67 2b       	or	r22, r23
    c8c2:	68 2b       	or	r22, r24
    c8c4:	69 2b       	or	r22, r25
    c8c6:	29 f4       	brne	.+10     	; 0xc8d2 <f_getfree+0xba>
    c8c8:	ef ef       	ldi	r30, 0xFF	; 255
    c8ca:	ce 1a       	sub	r12, r30
    c8cc:	de 0a       	sbc	r13, r30
    c8ce:	ee 0a       	sbc	r14, r30
    c8d0:	fe 0a       	sbc	r15, r30
    c8d2:	ff ef       	ldi	r31, 0xFF	; 255
    c8d4:	8f 1a       	sub	r8, r31
    c8d6:	9f 0a       	sbc	r9, r31
    c8d8:	af 0a       	sbc	r10, r31
    c8da:	bf 0a       	sbc	r11, r31
    c8dc:	e9 81       	ldd	r30, Y+1	; 0x01
    c8de:	fa 81       	ldd	r31, Y+2	; 0x02
    c8e0:	81 8d       	ldd	r24, Z+25	; 0x19
    c8e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    c8e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c8e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c8e8:	88 16       	cp	r8, r24
    c8ea:	99 06       	cpc	r9, r25
    c8ec:	aa 06       	cpc	r10, r26
    c8ee:	bb 06       	cpc	r11, r27
    c8f0:	a8 f2       	brcs	.-86     	; 0xc89c <f_getfree+0x84>
    c8f2:	5d c0       	rjmp	.+186    	; 0xc9ae <f_getfree+0x196>
    c8f4:	f3 01       	movw	r30, r6
    c8f6:	45 a0       	ldd	r4, Z+37	; 0x25
    c8f8:	56 a0       	ldd	r5, Z+38	; 0x26
    c8fa:	67 a0       	ldd	r6, Z+39	; 0x27
    c8fc:	70 a4       	ldd	r7, Z+40	; 0x28
    c8fe:	21 2c       	mov	r2, r1
    c900:	31 2c       	mov	r3, r1
    c902:	c1 2c       	mov	r12, r1
    c904:	d1 2c       	mov	r13, r1
    c906:	76 01       	movw	r14, r12
    c908:	21 14       	cp	r2, r1
    c90a:	31 04       	cpc	r3, r1
    c90c:	b1 f4       	brne	.+44     	; 0xc93a <f_getfree+0x122>
    c90e:	d3 01       	movw	r26, r6
    c910:	c2 01       	movw	r24, r4
    c912:	01 96       	adiw	r24, 0x01	; 1
    c914:	a1 1d       	adc	r26, r1
    c916:	b1 1d       	adc	r27, r1
    c918:	8f 83       	std	Y+7, r24	; 0x07
    c91a:	98 87       	std	Y+8, r25	; 0x08
    c91c:	a9 87       	std	Y+9, r26	; 0x09
    c91e:	ba 87       	std	Y+10, r27	; 0x0a
    c920:	b3 01       	movw	r22, r6
    c922:	a2 01       	movw	r20, r4
    c924:	89 81       	ldd	r24, Y+1	; 0x01
    c926:	9a 81       	ldd	r25, Y+2	; 0x02
    c928:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    c92c:	00 97       	sbiw	r24, 0x00	; 0
    c92e:	09 f0       	breq	.+2      	; 0xc932 <f_getfree+0x11a>
    c930:	3d c0       	rjmp	.+122    	; 0xc9ac <f_getfree+0x194>
    c932:	4f 80       	ldd	r4, Y+7	; 0x07
    c934:	58 84       	ldd	r5, Y+8	; 0x08
    c936:	69 84       	ldd	r6, Y+9	; 0x09
    c938:	7a 84       	ldd	r7, Y+10	; 0x0a
    c93a:	e9 81       	ldd	r30, Y+1	; 0x01
    c93c:	fa 81       	ldd	r31, Y+2	; 0x02
    c93e:	80 81       	ld	r24, Z
    c940:	82 30       	cpi	r24, 0x02	; 2
    c942:	79 f4       	brne	.+30     	; 0xc962 <f_getfree+0x14a>
    c944:	e2 0d       	add	r30, r2
    c946:	f3 1d       	adc	r31, r3
    c948:	85 a9       	ldd	r24, Z+53	; 0x35
    c94a:	96 a9       	ldd	r25, Z+54	; 0x36
    c94c:	89 2b       	or	r24, r25
    c94e:	29 f4       	brne	.+10     	; 0xc95a <f_getfree+0x142>
    c950:	9f ef       	ldi	r25, 0xFF	; 255
    c952:	c9 1a       	sub	r12, r25
    c954:	d9 0a       	sbc	r13, r25
    c956:	e9 0a       	sbc	r14, r25
    c958:	f9 0a       	sbc	r15, r25
    c95a:	a2 e0       	ldi	r26, 0x02	; 2
    c95c:	2a 0e       	add	r2, r26
    c95e:	31 1c       	adc	r3, r1
    c960:	15 c0       	rjmp	.+42     	; 0xc98c <f_getfree+0x174>
    c962:	cf 01       	movw	r24, r30
    c964:	c5 96       	adiw	r24, 0x35	; 53
    c966:	82 0d       	add	r24, r2
    c968:	93 1d       	adc	r25, r3
    c96a:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <ld_dword>
    c96e:	dc 01       	movw	r26, r24
    c970:	cb 01       	movw	r24, r22
    c972:	bf 70       	andi	r27, 0x0F	; 15
    c974:	89 2b       	or	r24, r25
    c976:	8a 2b       	or	r24, r26
    c978:	8b 2b       	or	r24, r27
    c97a:	29 f4       	brne	.+10     	; 0xc986 <f_getfree+0x16e>
    c97c:	bf ef       	ldi	r27, 0xFF	; 255
    c97e:	cb 1a       	sub	r12, r27
    c980:	db 0a       	sbc	r13, r27
    c982:	eb 0a       	sbc	r14, r27
    c984:	fb 0a       	sbc	r15, r27
    c986:	e4 e0       	ldi	r30, 0x04	; 4
    c988:	2e 0e       	add	r2, r30
    c98a:	31 1c       	adc	r3, r1
    c98c:	f1 e0       	ldi	r31, 0x01	; 1
    c98e:	3f 22       	and	r3, r31
    c990:	21 e0       	ldi	r18, 0x01	; 1
    c992:	82 1a       	sub	r8, r18
    c994:	91 08       	sbc	r9, r1
    c996:	a1 08       	sbc	r10, r1
    c998:	b1 08       	sbc	r11, r1
    c99a:	09 f0       	breq	.+2      	; 0xc99e <f_getfree+0x186>
    c99c:	b5 cf       	rjmp	.-150    	; 0xc908 <f_getfree+0xf0>
    c99e:	07 c0       	rjmp	.+14     	; 0xc9ae <f_getfree+0x196>
    c9a0:	01 e0       	ldi	r16, 0x01	; 1
    c9a2:	10 e0       	ldi	r17, 0x00	; 0
    c9a4:	04 c0       	rjmp	.+8      	; 0xc9ae <f_getfree+0x196>
    c9a6:	02 e0       	ldi	r16, 0x02	; 2
    c9a8:	10 e0       	ldi	r17, 0x00	; 0
    c9aa:	01 c0       	rjmp	.+2      	; 0xc9ae <f_getfree+0x196>
    c9ac:	8c 01       	movw	r16, r24
    c9ae:	ad 81       	ldd	r26, Y+5	; 0x05
    c9b0:	be 81       	ldd	r27, Y+6	; 0x06
    c9b2:	cd 92       	st	X+, r12
    c9b4:	dd 92       	st	X+, r13
    c9b6:	ed 92       	st	X+, r14
    c9b8:	fc 92       	st	X, r15
    c9ba:	13 97       	sbiw	r26, 0x03	; 3
    c9bc:	e9 81       	ldd	r30, Y+1	; 0x01
    c9be:	fa 81       	ldd	r31, Y+2	; 0x02
    c9c0:	c1 8a       	std	Z+17, r12	; 0x11
    c9c2:	d2 8a       	std	Z+18, r13	; 0x12
    c9c4:	e3 8a       	std	Z+19, r14	; 0x13
    c9c6:	f4 8a       	std	Z+20, r15	; 0x14
    c9c8:	84 81       	ldd	r24, Z+4	; 0x04
    c9ca:	81 60       	ori	r24, 0x01	; 1
    c9cc:	84 83       	std	Z+4, r24	; 0x04
    c9ce:	c8 01       	movw	r24, r16
    c9d0:	2a 96       	adiw	r28, 0x0a	; 10
    c9d2:	e2 e1       	ldi	r30, 0x12	; 18
    c9d4:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0000c9d8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c9d8:	a0 e6       	ldi	r26, 0x60	; 96
    c9da:	b0 e0       	ldi	r27, 0x00	; 0
    c9dc:	e2 ef       	ldi	r30, 0xF2	; 242
    c9de:	f4 e6       	ldi	r31, 0x64	; 100
    c9e0:	0c 94 98 e0 	jmp	0x1c130	; 0x1c130 <__prologue_saves__+0xe>
    c9e4:	a1 96       	adiw	r28, 0x21	; 33
    c9e6:	9f af       	std	Y+63, r25	; 0x3f
    c9e8:	8e af       	std	Y+62, r24	; 0x3e
    c9ea:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c9ec:	42 e0       	ldi	r20, 0x02	; 2
    c9ee:	be 01       	movw	r22, r28
    c9f0:	63 5a       	subi	r22, 0xA3	; 163
    c9f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c9f4:	ce 01       	movw	r24, r28
    c9f6:	81 5a       	subi	r24, 0xA1	; 161
    c9f8:	9f 4f       	sbci	r25, 0xFF	; 255
    c9fa:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
	if (res == FR_OK) {
    c9fe:	00 97       	sbiw	r24, 0x00	; 0
    ca00:	09 f0       	breq	.+2      	; 0xca04 <f_unlink+0x2c>
    ca02:	8c c0       	rjmp	.+280    	; 0xcb1c <f_unlink+0x144>
		dj.obj.fs = fs;
    ca04:	6f 96       	adiw	r28, 0x1f	; 31
    ca06:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca08:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca0a:	6f 97       	sbiw	r28, 0x1f	; 31
    ca0c:	98 ab       	std	Y+48, r25	; 0x30
    ca0e:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca10:	80 e0       	ldi	r24, 0x00	; 0
    ca12:	92 e0       	ldi	r25, 0x02	; 2
    ca14:	cf d3       	rcall	.+1950   	; 0xd1b4 <ff_memalloc>
    ca16:	5c 01       	movw	r10, r24
    ca18:	00 97       	sbiw	r24, 0x00	; 0
    ca1a:	09 f4       	brne	.+2      	; 0xca1e <f_unlink+0x46>
    ca1c:	49 c0       	rjmp	.+146    	; 0xcab0 <f_unlink+0xd8>
    ca1e:	6f 96       	adiw	r28, 0x1f	; 31
    ca20:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca22:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca24:	6f 97       	sbiw	r28, 0x1f	; 31
    ca26:	94 87       	std	Z+12, r25	; 0x0c
    ca28:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ca2a:	a1 96       	adiw	r28, 0x21	; 33
    ca2c:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca2e:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca30:	a1 97       	sbiw	r28, 0x21	; 33
    ca32:	ce 01       	movw	r24, r28
    ca34:	8f 96       	adiw	r24, 0x2f	; 47
    ca36:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    ca3a:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ca3c:	89 2b       	or	r24, r25
    ca3e:	a1 f5       	brne	.+104    	; 0xcaa8 <f_unlink+0xd0>
    ca40:	67 96       	adiw	r28, 0x17	; 23
    ca42:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca44:	67 97       	sbiw	r28, 0x17	; 23
    ca46:	85 fd       	sbrc	r24, 5
    ca48:	36 c0       	rjmp	.+108    	; 0xcab6 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ca4a:	87 fd       	sbrc	r24, 7
    ca4c:	34 c0       	rjmp	.+104    	; 0xcab6 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ca4e:	9b a8       	ldd	r9, Y+51	; 0x33
    ca50:	90 fc       	sbrc	r9, 0
    ca52:	40 c0       	rjmp	.+128    	; 0xcad4 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ca54:	6f 96       	adiw	r28, 0x1f	; 31
    ca56:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca58:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca5a:	6f 97       	sbiw	r28, 0x1f	; 31
    ca5c:	2b 96       	adiw	r28, 0x0b	; 11
    ca5e:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca60:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca62:	2b 97       	sbiw	r28, 0x0b	; 11
    ca64:	f8 01       	movw	r30, r16
    ca66:	80 81       	ld	r24, Z
    ca68:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    ca6c:	6b 01       	movw	r12, r22
    ca6e:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ca70:	94 fe       	sbrs	r9, 4
    ca72:	33 c0       	rjmp	.+102    	; 0xcada <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ca74:	f8 01       	movw	r30, r16
    ca76:	85 89       	ldd	r24, Z+21	; 0x15
    ca78:	96 89       	ldd	r25, Z+22	; 0x16
    ca7a:	a7 89       	ldd	r26, Z+23	; 0x17
    ca7c:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca7e:	c8 16       	cp	r12, r24
    ca80:	d9 06       	cpc	r13, r25
    ca82:	ea 06       	cpc	r14, r26
    ca84:	fb 06       	cpc	r15, r27
    ca86:	31 f1       	breq	.+76     	; 0xcad4 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ca88:	1a 83       	std	Y+2, r17	; 0x02
    ca8a:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ca8c:	cf 82       	std	Y+7, r12	; 0x07
    ca8e:	d8 86       	std	Y+8, r13	; 0x08
    ca90:	e9 86       	std	Y+9, r14	; 0x09
    ca92:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ca94:	40 e0       	ldi	r20, 0x00	; 0
    ca96:	50 e0       	ldi	r21, 0x00	; 0
    ca98:	ba 01       	movw	r22, r20
    ca9a:	ce 01       	movw	r24, r28
    ca9c:	01 96       	adiw	r24, 0x01	; 1
    ca9e:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <dir_sdi>
    caa2:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    caa4:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    caa6:	51 f0       	breq	.+20     	; 0xcabc <f_unlink+0xe4>
    caa8:	c5 01       	movw	r24, r10
    caaa:	87 d3       	rcall	.+1806   	; 0xd1ba <ff_memfree>
    caac:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    caae:	36 c0       	rjmp	.+108    	; 0xcb1c <f_unlink+0x144>
    cab0:	81 e1       	ldi	r24, 0x11	; 17
    cab2:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cab4:	33 c0       	rjmp	.+102    	; 0xcb1c <f_unlink+0x144>
    cab6:	06 e0       	ldi	r16, 0x06	; 6
    cab8:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    caba:	f6 cf       	rjmp	.-20     	; 0xcaa8 <f_unlink+0xd0>
    cabc:	60 e0       	ldi	r22, 0x00	; 0
    cabe:	70 e0       	ldi	r23, 0x00	; 0
    cac0:	ce 01       	movw	r24, r28
    cac2:	01 96       	adiw	r24, 0x01	; 1
    cac4:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cac8:	8c 01       	movw	r16, r24
    caca:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cacc:	19 f0       	breq	.+6      	; 0xcad4 <f_unlink+0xfc>
    cace:	04 97       	sbiw	r24, 0x04	; 4
    cad0:	21 f0       	breq	.+8      	; 0xcada <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cad2:	ea cf       	rjmp	.-44     	; 0xcaa8 <f_unlink+0xd0>
    cad4:	07 e0       	ldi	r16, 0x07	; 7
    cad6:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cad8:	e7 cf       	rjmp	.-50     	; 0xcaa8 <f_unlink+0xd0>
    cada:	ce 01       	movw	r24, r28
    cadc:	8f 96       	adiw	r24, 0x2f	; 47
    cade:	0e 94 33 54 	call	0xa866	; 0xa866 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cae2:	8c 01       	movw	r16, r24
    cae4:	89 2b       	or	r24, r25
    cae6:	01 f7       	brne	.-64     	; 0xcaa8 <f_unlink+0xd0>
    cae8:	c1 14       	cp	r12, r1
    caea:	d1 04       	cpc	r13, r1
    caec:	e1 04       	cpc	r14, r1
    caee:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    caf0:	41 f4       	brne	.+16     	; 0xcb02 <f_unlink+0x12a>
    caf2:	6f 96       	adiw	r28, 0x1f	; 31
    caf4:	8e ad       	ldd	r24, Y+62	; 0x3e
    caf6:	9f ad       	ldd	r25, Y+63	; 0x3f
    caf8:	6f 97       	sbiw	r28, 0x1f	; 31
    cafa:	0e 94 33 4a 	call	0x9466	; 0x9466 <sync_fs>
    cafe:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cb00:	d3 cf       	rjmp	.-90     	; 0xcaa8 <f_unlink+0xd0>
    cb02:	00 e0       	ldi	r16, 0x00	; 0
    cb04:	10 e0       	ldi	r17, 0x00	; 0
    cb06:	98 01       	movw	r18, r16
    cb08:	b7 01       	movw	r22, r14
    cb0a:	a6 01       	movw	r20, r12
    cb0c:	ce 01       	movw	r24, r28
    cb0e:	8f 96       	adiw	r24, 0x2f	; 47
    cb10:	0e 94 b8 51 	call	0xa370	; 0xa370 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cb14:	8c 01       	movw	r16, r24
    cb16:	89 2b       	or	r24, r25
    cb18:	39 f6       	brne	.-114    	; 0xcaa8 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb1a:	eb cf       	rjmp	.-42     	; 0xcaf2 <f_unlink+0x11a>
    cb1c:	c0 5a       	subi	r28, 0xA0	; 160
    cb1e:	df 4f       	sbci	r29, 0xFF	; 255
    cb20:	eb e0       	ldi	r30, 0x0B	; 11
    cb22:	0c 94 b4 e0 	jmp	0x1c168	; 0x1c168 <__epilogue_restores__+0xe>

0000cb26 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cb26:	a0 e4       	ldi	r26, 0x40	; 64
    cb28:	b0 e0       	ldi	r27, 0x00	; 0
    cb2a:	e9 e9       	ldi	r30, 0x99	; 153
    cb2c:	f5 e6       	ldi	r31, 0x65	; 101
    cb2e:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
    cb32:	21 96       	adiw	r28, 0x01	; 1
    cb34:	9f af       	std	Y+63, r25	; 0x3f
    cb36:	8e af       	std	Y+62, r24	; 0x3e
    cb38:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cb3a:	42 e0       	ldi	r20, 0x02	; 2
    cb3c:	be 01       	movw	r22, r28
    cb3e:	63 5c       	subi	r22, 0xC3	; 195
    cb40:	7f 4f       	sbci	r23, 0xFF	; 255
    cb42:	ce 01       	movw	r24, r28
    cb44:	cf 96       	adiw	r24, 0x3f	; 63
    cb46:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
	if (res == FR_OK) {
    cb4a:	00 97       	sbiw	r24, 0x00	; 0
    cb4c:	09 f0       	breq	.+2      	; 0xcb50 <f_mkdir+0x2a>
    cb4e:	d6 c0       	rjmp	.+428    	; 0xccfc <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cb50:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb52:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb54:	9a 83       	std	Y+2, r25	; 0x02
    cb56:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cb58:	80 e0       	ldi	r24, 0x00	; 0
    cb5a:	92 e0       	ldi	r25, 0x02	; 2
    cb5c:	2b d3       	rcall	.+1622   	; 0xd1b4 <ff_memalloc>
    cb5e:	6c 01       	movw	r12, r24
    cb60:	00 97       	sbiw	r24, 0x00	; 0
    cb62:	e9 f0       	breq	.+58     	; 0xcb9e <f_mkdir+0x78>
    cb64:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb66:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb68:	94 87       	std	Z+12, r25	; 0x0c
    cb6a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cb6c:	21 96       	adiw	r28, 0x01	; 1
    cb6e:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb70:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb72:	21 97       	sbiw	r28, 0x01	; 1
    cb74:	ce 01       	movw	r24, r28
    cb76:	01 96       	adiw	r24, 0x01	; 1
    cb78:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    cb7c:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb7e:	89 2b       	or	r24, r25
    cb80:	89 f0       	breq	.+34     	; 0xcba4 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cb82:	84 e0       	ldi	r24, 0x04	; 4
    cb84:	e8 16       	cp	r14, r24
    cb86:	f1 04       	cpc	r15, r1
    cb88:	31 f4       	brne	.+12     	; 0xcb96 <f_mkdir+0x70>
    cb8a:	88 a5       	ldd	r24, Y+40	; 0x28
    cb8c:	85 ff       	sbrs	r24, 5
    cb8e:	0e c0       	rjmp	.+28     	; 0xcbac <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cb90:	26 e0       	ldi	r18, 0x06	; 6
    cb92:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cb94:	f1 2c       	mov	r15, r1
    cb96:	c6 01       	movw	r24, r12
    cb98:	10 d3       	rcall	.+1568   	; 0xd1ba <ff_memfree>
    cb9a:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb9c:	af c0       	rjmp	.+350    	; 0xccfc <f_mkdir+0x1d6>
    cb9e:	81 e1       	ldi	r24, 0x11	; 17
    cba0:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cba2:	ac c0       	rjmp	.+344    	; 0xccfc <f_mkdir+0x1d6>
    cba4:	38 e0       	ldi	r19, 0x08	; 8
    cba6:	e3 2e       	mov	r14, r19
    cba8:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cbaa:	f5 cf       	rjmp	.-22     	; 0xcb96 <f_mkdir+0x70>
    cbac:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbae:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbb0:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cbb2:	8f a7       	std	Y+47, r24	; 0x2f
    cbb4:	40 e0       	ldi	r20, 0x00	; 0
    cbb6:	50 e0       	ldi	r21, 0x00	; 0
    cbb8:	ba 01       	movw	r22, r20
    cbba:	ce 01       	movw	r24, r28
    cbbc:	8f 96       	adiw	r24, 0x2f	; 47
    cbbe:	0e 94 92 50 	call	0xa124	; 0xa124 <create_chain>
    cbc2:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cbc4:	5c 01       	movw	r10, r24
    cbc6:	67 2b       	or	r22, r23
    cbc8:	68 2b       	or	r22, r24
    cbca:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cbcc:	09 f1       	breq	.+66     	; 0xcc10 <f_mkdir+0xea>
    cbce:	e1 e0       	ldi	r30, 0x01	; 1
    cbd0:	8e 16       	cp	r8, r30
    cbd2:	91 04       	cpc	r9, r1
    cbd4:	a1 04       	cpc	r10, r1
    cbd6:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cbd8:	61 f0       	breq	.+24     	; 0xcbf2 <f_mkdir+0xcc>
    cbda:	ff ef       	ldi	r31, 0xFF	; 255
    cbdc:	8f 16       	cp	r8, r31
    cbde:	9f 06       	cpc	r9, r31
    cbe0:	af 06       	cpc	r10, r31
    cbe2:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cbe4:	d9 f4       	brne	.+54     	; 0xcc1c <f_mkdir+0xf6>
    cbe6:	0e 94 4b 70 	call	0xe096	; 0xe096 <get_fattime>
    cbea:	ee 24       	eor	r14, r14
    cbec:	e3 94       	inc	r14
    cbee:	f1 2c       	mov	r15, r1
    cbf0:	05 c0       	rjmp	.+10     	; 0xcbfc <f_mkdir+0xd6>
    cbf2:	0e 94 4b 70 	call	0xe096	; 0xe096 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cbf6:	92 e0       	ldi	r25, 0x02	; 2
    cbf8:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cbfa:	f1 2c       	mov	r15, r1
    cbfc:	00 e0       	ldi	r16, 0x00	; 0
    cbfe:	10 e0       	ldi	r17, 0x00	; 0
    cc00:	98 01       	movw	r18, r16
    cc02:	b5 01       	movw	r22, r10
    cc04:	a4 01       	movw	r20, r8
    cc06:	ce 01       	movw	r24, r28
    cc08:	8f 96       	adiw	r24, 0x2f	; 47
    cc0a:	0e 94 b8 51 	call	0xa370	; 0xa370 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc0e:	c3 cf       	rjmp	.-122    	; 0xcb96 <f_mkdir+0x70>
    cc10:	0e 94 4b 70 	call	0xe096	; 0xe096 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cc14:	87 e0       	ldi	r24, 0x07	; 7
    cc16:	e8 2e       	mov	r14, r24
    cc18:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cc1a:	f0 cf       	rjmp	.-32     	; 0xcbfc <f_mkdir+0xd6>
    cc1c:	0e 94 4b 70 	call	0xe096	; 0xe096 <get_fattime>
    cc20:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cc22:	3c 01       	movw	r6, r24
    cc24:	b5 01       	movw	r22, r10
    cc26:	a4 01       	movw	r20, r8
    cc28:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc2c:	0e 94 a5 4a 	call	0x954a	; 0x954a <dir_clear>
				if (res == FR_OK) {
    cc30:	7c 01       	movw	r14, r24
    cc32:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cc34:	19 f7       	brne	.-58     	; 0xcbfc <f_mkdir+0xd6>
    cc36:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc38:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc3a:	4b e0       	ldi	r20, 0x0B	; 11
    cc3c:	50 e0       	ldi	r21, 0x00	; 0
    cc3e:	60 e2       	ldi	r22, 0x20	; 32
    cc40:	70 e0       	ldi	r23, 0x00	; 0
    cc42:	c5 96       	adiw	r24, 0x35	; 53
    cc44:	0e 94 8d 46 	call	0x8d1a	; 0x8d1a <mem_set>
						fs->win[DIR_Name] = '.';
    cc48:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc4c:	1e e2       	ldi	r17, 0x2E	; 46
    cc4e:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cc50:	15 ab       	std	Z+53, r17	; 0x35
    cc52:	e0 5c       	subi	r30, 0xC0	; 192
    cc54:	ff 4f       	sbci	r31, 0xFF	; 255
    cc56:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cc58:	20 83       	st	Z, r18
    cc5a:	b3 01       	movw	r22, r6
    cc5c:	a2 01       	movw	r20, r4
    cc5e:	85 5b       	subi	r24, 0xB5	; 181
    cc60:	9f 4f       	sbci	r25, 0xFF	; 255
    cc62:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
						st_clust(fs, fs->win, dcl);
    cc66:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc68:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc6a:	bc 01       	movw	r22, r24
    cc6c:	6b 5c       	subi	r22, 0xCB	; 203
    cc6e:	7f 4f       	sbci	r23, 0xFF	; 255
    cc70:	a5 01       	movw	r20, r10
    cc72:	94 01       	movw	r18, r8
    cc74:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cc78:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc7c:	bc 01       	movw	r22, r24
    cc7e:	6b 5c       	subi	r22, 0xCB	; 203
    cc80:	7f 4f       	sbci	r23, 0xFF	; 255
    cc82:	40 e2       	ldi	r20, 0x20	; 32
    cc84:	50 e0       	ldi	r21, 0x00	; 0
    cc86:	8b 5a       	subi	r24, 0xAB	; 171
    cc88:	9f 4f       	sbci	r25, 0xFF	; 255
    cc8a:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cc8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc90:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc92:	fc 01       	movw	r30, r24
    cc94:	ea 5a       	subi	r30, 0xAA	; 170
    cc96:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cc98:	10 83       	st	Z, r17
    cc9a:	2f 81       	ldd	r18, Y+7	; 0x07
    cc9c:	38 85       	ldd	r19, Y+8	; 0x08
    cc9e:	49 85       	ldd	r20, Y+9	; 0x09
    cca0:	5a 85       	ldd	r21, Y+10	; 0x0a
    cca2:	bc 01       	movw	r22, r24
    cca4:	6b 5a       	subi	r22, 0xAB	; 171
    cca6:	7f 4f       	sbci	r23, 0xFF	; 255
    cca8:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <st_clust.isra.5>
						fs->wflag = 1;
    ccac:	ed ad       	ldd	r30, Y+61	; 0x3d
    ccae:	fe ad       	ldd	r31, Y+62	; 0x3e
    ccb0:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    ccb2:	83 83       	std	Z+3, r24	; 0x03
    ccb4:	ce 01       	movw	r24, r28
    ccb6:	01 96       	adiw	r24, 0x01	; 1
    ccb8:	0e 94 89 55 	call	0xab12	; 0xab12 <dir_register>
				}
			}
			if (res == FR_OK) {
    ccbc:	7c 01       	movw	r14, r24
    ccbe:	89 2b       	or	r24, r25
    ccc0:	09 f0       	breq	.+2      	; 0xccc4 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    ccc2:	9c cf       	rjmp	.-200    	; 0xcbfc <f_mkdir+0xd6>
    ccc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ccc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ccc8:	b3 01       	movw	r22, r6
    ccca:	a2 01       	movw	r20, r4
    cccc:	46 96       	adiw	r24, 0x16	; 22
    ccce:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    ccd2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ccd4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ccd6:	a5 01       	movw	r20, r10
    ccd8:	94 01       	movw	r18, r8
    ccda:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccde:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cce2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cce4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cce6:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    cce8:	83 87       	std	Z+11, r24	; 0x0b
    ccea:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccec:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccee:	21 e0       	ldi	r18, 0x01	; 1
    ccf0:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    ccf2:	23 83       	std	Z+3, r18	; 0x03
    ccf4:	0e 94 33 4a 	call	0x9466	; 0x9466 <sync_fs>
    ccf8:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ccfa:	4d cf       	rjmp	.-358    	; 0xcb96 <f_mkdir+0x70>
    ccfc:	c0 5c       	subi	r28, 0xC0	; 192
    ccfe:	df 4f       	sbci	r29, 0xFF	; 255
    cd00:	e0 e1       	ldi	r30, 0x10	; 16
    cd02:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

0000cd06 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cd06:	a2 e8       	ldi	r26, 0x82	; 130
    cd08:	b0 e0       	ldi	r27, 0x00	; 0
    cd0a:	e9 e8       	ldi	r30, 0x89	; 137
    cd0c:	f6 e6       	ldi	r31, 0x66	; 102
    cd0e:	0c 94 9a e0 	jmp	0x1c134	; 0x1c134 <__prologue_saves__+0x12>
    cd12:	c1 58       	subi	r28, 0x81	; 129
    cd14:	df 4f       	sbci	r29, 0xFF	; 255
    cd16:	99 83       	std	Y+1, r25	; 0x01
    cd18:	88 83       	st	Y, r24
    cd1a:	cf 57       	subi	r28, 0x7F	; 127
    cd1c:	d0 40       	sbci	r29, 0x00	; 0
    cd1e:	cf 57       	subi	r28, 0x7F	; 127
    cd20:	df 4f       	sbci	r29, 0xFF	; 255
    cd22:	79 83       	std	Y+1, r23	; 0x01
    cd24:	68 83       	st	Y, r22
    cd26:	c1 58       	subi	r28, 0x81	; 129
    cd28:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cd2a:	ce 01       	movw	r24, r28
    cd2c:	8f 57       	subi	r24, 0x7F	; 127
    cd2e:	9f 4f       	sbci	r25, 0xFF	; 255
    cd30:	0e 94 9e 47 	call	0x8f3c	; 0x8f3c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cd34:	42 e0       	ldi	r20, 0x02	; 2
    cd36:	be 01       	movw	r22, r28
    cd38:	63 58       	subi	r22, 0x83	; 131
    cd3a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd3c:	ce 01       	movw	r24, r28
    cd3e:	81 58       	subi	r24, 0x81	; 129
    cd40:	9f 4f       	sbci	r25, 0xFF	; 255
    cd42:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
	if (res == FR_OK) {
    cd46:	00 97       	sbiw	r24, 0x00	; 0
    cd48:	09 f0       	breq	.+2      	; 0xcd4c <f_rename+0x46>
    cd4a:	ed c0       	rjmp	.+474    	; 0xcf26 <f_rename+0x220>
		djo.obj.fs = fs;
    cd4c:	ef 96       	adiw	r28, 0x3f	; 63
    cd4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd50:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd52:	ef 97       	sbiw	r28, 0x3f	; 63
    cd54:	98 ab       	std	Y+48, r25	; 0x30
    cd56:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cd58:	80 e0       	ldi	r24, 0x00	; 0
    cd5a:	92 e0       	ldi	r25, 0x02	; 2
    cd5c:	2b d2       	rcall	.+1110   	; 0xd1b4 <ff_memalloc>
    cd5e:	6c 01       	movw	r12, r24
    cd60:	00 97       	sbiw	r24, 0x00	; 0
    cd62:	f1 f0       	breq	.+60     	; 0xcda0 <f_rename+0x9a>
    cd64:	ef 96       	adiw	r28, 0x3f	; 63
    cd66:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd68:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd6a:	ef 97       	sbiw	r28, 0x3f	; 63
    cd6c:	94 87       	std	Z+12, r25	; 0x0c
    cd6e:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cd70:	c1 58       	subi	r28, 0x81	; 129
    cd72:	df 4f       	sbci	r29, 0xFF	; 255
    cd74:	68 81       	ld	r22, Y
    cd76:	79 81       	ldd	r23, Y+1	; 0x01
    cd78:	cf 57       	subi	r28, 0x7F	; 127
    cd7a:	d0 40       	sbci	r29, 0x00	; 0
    cd7c:	ce 01       	movw	r24, r28
    cd7e:	8f 96       	adiw	r24, 0x2f	; 47
    cd80:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    cd84:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cd86:	89 2b       	or	r24, r25
    cd88:	39 f4       	brne	.+14     	; 0xcd98 <f_rename+0x92>
    cd8a:	67 96       	adiw	r28, 0x17	; 23
    cd8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd8e:	67 97       	sbiw	r28, 0x17	; 23
    cd90:	80 7a       	andi	r24, 0xA0	; 160
    cd92:	49 f0       	breq	.+18     	; 0xcda6 <f_rename+0xa0>
    cd94:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cd96:	10 e0       	ldi	r17, 0x00	; 0
    cd98:	c6 01       	movw	r24, r12
    cd9a:	0f d2       	rcall	.+1054   	; 0xd1ba <ff_memfree>
    cd9c:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd9e:	c3 c0       	rjmp	.+390    	; 0xcf26 <f_rename+0x220>
    cda0:	81 e1       	ldi	r24, 0x11	; 17
    cda2:	90 e0       	ldi	r25, 0x00	; 0
    cda4:	c0 c0       	rjmp	.+384    	; 0xcf26 <f_rename+0x220>
    cda6:	2b 96       	adiw	r28, 0x0b	; 11
    cda8:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdaa:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdac:	2b 97       	sbiw	r28, 0x0b	; 11
    cdae:	40 e2       	ldi	r20, 0x20	; 32
    cdb0:	50 e0       	ldi	r21, 0x00	; 0
    cdb2:	ce 01       	movw	r24, r28
    cdb4:	83 5a       	subi	r24, 0xA3	; 163
    cdb6:	9f 4f       	sbci	r25, 0xFF	; 255
    cdb8:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
    cdbc:	4e e2       	ldi	r20, 0x2E	; 46
    cdbe:	50 e0       	ldi	r21, 0x00	; 0
    cdc0:	be 01       	movw	r22, r28
    cdc2:	61 5d       	subi	r22, 0xD1	; 209
    cdc4:	7f 4f       	sbci	r23, 0xFF	; 255
    cdc6:	ce 01       	movw	r24, r28
    cdc8:	01 96       	adiw	r24, 0x01	; 1
    cdca:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cdce:	cf 57       	subi	r28, 0x7F	; 127
    cdd0:	df 4f       	sbci	r29, 0xFF	; 255
    cdd2:	68 81       	ld	r22, Y
    cdd4:	79 81       	ldd	r23, Y+1	; 0x01
    cdd6:	c1 58       	subi	r28, 0x81	; 129
    cdd8:	d0 40       	sbci	r29, 0x00	; 0
    cdda:	ce 01       	movw	r24, r28
    cddc:	01 96       	adiw	r24, 0x01	; 1
    cdde:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cde2:	8c 01       	movw	r16, r24
    cde4:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cde6:	f9 f4       	brne	.+62     	; 0xce26 <f_rename+0x120>
    cde8:	4f 81       	ldd	r20, Y+7	; 0x07
    cdea:	58 85       	ldd	r21, Y+8	; 0x08
    cdec:	69 85       	ldd	r22, Y+9	; 0x09
    cdee:	7a 85       	ldd	r23, Y+10	; 0x0a
    cdf0:	8d a9       	ldd	r24, Y+53	; 0x35
    cdf2:	9e a9       	ldd	r25, Y+54	; 0x36
    cdf4:	af a9       	ldd	r26, Y+55	; 0x37
    cdf6:	b8 ad       	ldd	r27, Y+56	; 0x38
    cdf8:	48 17       	cp	r20, r24
    cdfa:	59 07       	cpc	r21, r25
    cdfc:	6a 07       	cpc	r22, r26
    cdfe:	7b 07       	cpc	r23, r27
    ce00:	09 f0       	breq	.+2      	; 0xce04 <f_rename+0xfe>
    ce02:	8b c0       	rjmp	.+278    	; 0xcf1a <f_rename+0x214>
    ce04:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce06:	58 89       	ldd	r21, Y+16	; 0x10
    ce08:	69 89       	ldd	r22, Y+17	; 0x11
    ce0a:	7a 89       	ldd	r23, Y+18	; 0x12
    ce0c:	21 96       	adiw	r28, 0x01	; 1
    ce0e:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce10:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce12:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce14:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce16:	21 97       	sbiw	r28, 0x01	; 1
    ce18:	48 17       	cp	r20, r24
    ce1a:	59 07       	cpc	r21, r25
    ce1c:	6a 07       	cpc	r22, r26
    ce1e:	7b 07       	cpc	r23, r27
    ce20:	09 f0       	breq	.+2      	; 0xce24 <f_rename+0x11e>
    ce22:	7b c0       	rjmp	.+246    	; 0xcf1a <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ce24:	04 c0       	rjmp	.+8      	; 0xce2e <f_rename+0x128>
    ce26:	04 30       	cpi	r16, 0x04	; 4
    ce28:	11 05       	cpc	r17, r1
    ce2a:	09 f0       	breq	.+2      	; 0xce2e <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    ce2c:	b5 cf       	rjmp	.-150    	; 0xcd98 <f_rename+0x92>
    ce2e:	ce 01       	movw	r24, r28
    ce30:	01 96       	adiw	r24, 0x01	; 1
    ce32:	0e 94 89 55 	call	0xab12	; 0xab12 <dir_register>
					if (res == FR_OK) {
    ce36:	8c 01       	movw	r16, r24
    ce38:	89 2b       	or	r24, r25
    ce3a:	09 f0       	breq	.+2      	; 0xce3e <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ce3c:	ad cf       	rjmp	.-166    	; 0xcd98 <f_rename+0x92>
    ce3e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ce40:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ce42:	6d e5       	ldi	r22, 0x5D	; 93
    ce44:	70 e0       	ldi	r23, 0x00	; 0
    ce46:	6c 0f       	add	r22, r28
    ce48:	7d 1f       	adc	r23, r29
    ce4a:	63 5f       	subi	r22, 0xF3	; 243
    ce4c:	7f 4f       	sbci	r23, 0xFF	; 255
    ce4e:	43 e1       	ldi	r20, 0x13	; 19
    ce50:	50 e0       	ldi	r21, 0x00	; 0
    ce52:	c8 01       	movw	r24, r16
    ce54:	0d 96       	adiw	r24, 0x0d	; 13
    ce56:	0e 94 f6 47 	call	0x8fec	; 0x8fec <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ce5a:	a9 96       	adiw	r28, 0x29	; 41
    ce5c:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    ce5e:	a9 97       	sbiw	r28, 0x29	; 41
    ce60:	84 ff       	sbrs	r24, 4
    ce62:	80 62       	ori	r24, 0x20	; 32
    ce64:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    ce66:	83 87       	std	Z+11, r24	; 0x0b
    ce68:	ef 96       	adiw	r28, 0x3f	; 63
    ce6a:	ee ac       	ldd	r14, Y+62	; 0x3e
    ce6c:	ff ac       	ldd	r15, Y+63	; 0x3f
    ce6e:	ef 97       	sbiw	r28, 0x3f	; 63
    ce70:	bb 24       	eor	r11, r11
    ce72:	b3 94       	inc	r11
    ce74:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ce76:	b3 82       	std	Z+3, r11	; 0x03
    ce78:	f8 01       	movw	r30, r16
    ce7a:	83 85       	ldd	r24, Z+11	; 0x0b
    ce7c:	84 ff       	sbrs	r24, 4
    ce7e:	3d c0       	rjmp	.+122    	; 0xcefa <f_rename+0x1f4>
    ce80:	4d a9       	ldd	r20, Y+53	; 0x35
    ce82:	5e a9       	ldd	r21, Y+54	; 0x36
    ce84:	6f a9       	ldd	r22, Y+55	; 0x37
    ce86:	78 ad       	ldd	r23, Y+56	; 0x38
    ce88:	8f 81       	ldd	r24, Y+7	; 0x07
    ce8a:	98 85       	ldd	r25, Y+8	; 0x08
    ce8c:	a9 85       	ldd	r26, Y+9	; 0x09
    ce8e:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce90:	48 17       	cp	r20, r24
    ce92:	59 07       	cpc	r21, r25
    ce94:	6a 07       	cpc	r22, r26
    ce96:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    ce98:	81 f1       	breq	.+96     	; 0xcefa <f_rename+0x1f4>
    ce9a:	b8 01       	movw	r22, r16
    ce9c:	f7 01       	movw	r30, r14
    ce9e:	80 81       	ld	r24, Z
    cea0:	0e 94 be 49 	call	0x937c	; 0x937c <ld_clust.isra.4>
    cea4:	ab 01       	movw	r20, r22
    cea6:	bc 01       	movw	r22, r24
    cea8:	c7 01       	movw	r24, r14
    ceaa:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <clst2sect>
    ceae:	ab 01       	movw	r20, r22
							if (sect == 0) {
    ceb0:	bc 01       	movw	r22, r24
    ceb2:	41 15       	cp	r20, r1
    ceb4:	51 05       	cpc	r21, r1
    ceb6:	61 05       	cpc	r22, r1
    ceb8:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    ceba:	91 f1       	breq	.+100    	; 0xcf20 <f_rename+0x21a>
    cebc:	c7 01       	movw	r24, r14
    cebe:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cec2:	8c 01       	movw	r16, r24
    cec4:	89 2b       	or	r24, r25
    cec6:	09 f0       	breq	.+2      	; 0xceca <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cec8:	67 cf       	rjmp	.-306    	; 0xcd98 <f_rename+0x92>
    ceca:	ef 96       	adiw	r28, 0x3f	; 63
    cecc:	8e ad       	ldd	r24, Y+62	; 0x3e
    cece:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    ced0:	ef 97       	sbiw	r28, 0x3f	; 63
    ced2:	fc 01       	movw	r30, r24
    ced4:	ea 5a       	subi	r30, 0xAA	; 170
    ced6:	ff 4f       	sbci	r31, 0xFF	; 255
    ced8:	20 81       	ld	r18, Z
    ceda:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    cedc:	71 f4       	brne	.+28     	; 0xcefa <f_rename+0x1f4>
    cede:	2f 81       	ldd	r18, Y+7	; 0x07
    cee0:	38 85       	ldd	r19, Y+8	; 0x08
    cee2:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cee4:	5a 85       	ldd	r21, Y+10	; 0x0a
    cee6:	bc 01       	movw	r22, r24
    cee8:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    ceea:	7f 4f       	sbci	r23, 0xFF	; 255
    ceec:	0e 94 d3 49 	call	0x93a6	; 0x93a6 <st_clust.isra.5>
									fs->wflag = 1;
    cef0:	ef 96       	adiw	r28, 0x3f	; 63
    cef2:	ee ad       	ldd	r30, Y+62	; 0x3e
    cef4:	ff ad       	ldd	r31, Y+63	; 0x3f
    cef6:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cef8:	b3 82       	std	Z+3, r11	; 0x03
    cefa:	ce 01       	movw	r24, r28
    cefc:	8f 96       	adiw	r24, 0x2f	; 47
    cefe:	0e 94 33 54 	call	0xa866	; 0xa866 <dir_remove>
				if (res == FR_OK) {
    cf02:	8c 01       	movw	r16, r24
    cf04:	89 2b       	or	r24, r25
    cf06:	09 f0       	breq	.+2      	; 0xcf0a <f_rename+0x204>
					res = sync_fs(fs);
    cf08:	47 cf       	rjmp	.-370    	; 0xcd98 <f_rename+0x92>
    cf0a:	ef 96       	adiw	r28, 0x3f	; 63
    cf0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf10:	ef 97       	sbiw	r28, 0x3f	; 63
    cf12:	0e 94 33 4a 	call	0x9466	; 0x9466 <sync_fs>
    cf16:	8c 01       	movw	r16, r24
    cf18:	3f cf       	rjmp	.-386    	; 0xcd98 <f_rename+0x92>
    cf1a:	08 e0       	ldi	r16, 0x08	; 8
    cf1c:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cf1e:	3c cf       	rjmp	.-392    	; 0xcd98 <f_rename+0x92>
    cf20:	02 e0       	ldi	r16, 0x02	; 2
    cf22:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf24:	39 cf       	rjmp	.-398    	; 0xcd98 <f_rename+0x92>
    cf26:	ce 57       	subi	r28, 0x7E	; 126
    cf28:	df 4f       	sbci	r29, 0xFF	; 255
    cf2a:	e9 e0       	ldi	r30, 0x09	; 9
    cf2c:	0c 94 b6 e0 	jmp	0x1c16c	; 0x1c16c <__epilogue_restores__+0x12>

0000cf30 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cf30:	a2 e3       	ldi	r26, 0x32	; 50
    cf32:	b0 e0       	ldi	r27, 0x00	; 0
    cf34:	ee e9       	ldi	r30, 0x9E	; 158
    cf36:	f7 e6       	ldi	r31, 0x67	; 103
    cf38:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    cf3c:	9a ab       	std	Y+50, r25	; 0x32
    cf3e:	89 ab       	std	Y+49, r24	; 0x31
    cf40:	e6 2e       	mov	r14, r22
    cf42:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf44:	42 e0       	ldi	r20, 0x02	; 2
    cf46:	be 01       	movw	r22, r28
    cf48:	61 5d       	subi	r22, 0xD1	; 209
    cf4a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf4c:	ce 01       	movw	r24, r28
    cf4e:	c1 96       	adiw	r24, 0x31	; 49
    cf50:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
	if (res == FR_OK) {
    cf54:	00 97       	sbiw	r24, 0x00	; 0
    cf56:	a9 f5       	brne	.+106    	; 0xcfc2 <f_chmod+0x92>
		dj.obj.fs = fs;
    cf58:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf5a:	98 a9       	ldd	r25, Y+48	; 0x30
    cf5c:	9a 83       	std	Y+2, r25	; 0x02
    cf5e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf60:	80 e0       	ldi	r24, 0x00	; 0
    cf62:	92 e0       	ldi	r25, 0x02	; 2
    cf64:	27 d1       	rcall	.+590    	; 0xd1b4 <ff_memalloc>
    cf66:	6c 01       	movw	r12, r24
    cf68:	00 97       	sbiw	r24, 0x00	; 0
    cf6a:	b1 f0       	breq	.+44     	; 0xcf98 <f_chmod+0x68>
    cf6c:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf6e:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf70:	94 87       	std	Z+12, r25	; 0x0c
    cf72:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cf74:	69 a9       	ldd	r22, Y+49	; 0x31
    cf76:	7a a9       	ldd	r23, Y+50	; 0x32
    cf78:	ce 01       	movw	r24, r28
    cf7a:	01 96       	adiw	r24, 0x01	; 1
    cf7c:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    cf80:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cf82:	89 2b       	or	r24, r25
    cf84:	29 f4       	brne	.+10     	; 0xcf90 <f_chmod+0x60>
    cf86:	88 a5       	ldd	r24, Y+40	; 0x28
    cf88:	80 7a       	andi	r24, 0xA0	; 160
    cf8a:	49 f0       	breq	.+18     	; 0xcf9e <f_chmod+0x6e>
    cf8c:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cf8e:	10 e0       	ldi	r17, 0x00	; 0
    cf90:	c6 01       	movw	r24, r12
    cf92:	13 d1       	rcall	.+550    	; 0xd1ba <ff_memfree>
    cf94:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf96:	15 c0       	rjmp	.+42     	; 0xcfc2 <f_chmod+0x92>
    cf98:	81 e1       	ldi	r24, 0x11	; 17
    cf9a:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cf9c:	12 c0       	rjmp	.+36     	; 0xcfc2 <f_chmod+0x92>
    cf9e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cfa0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cfa2:	83 85       	ldd	r24, Z+11	; 0x0b
    cfa4:	6e 2d       	mov	r22, r14
    cfa6:	68 27       	eor	r22, r24
    cfa8:	6f 21       	and	r22, r15
    cfaa:	67 72       	andi	r22, 0x27	; 39
    cfac:	68 27       	eor	r22, r24
				fs->wflag = 1;
    cfae:	63 87       	std	Z+11, r22	; 0x0b
    cfb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfb2:	98 a9       	ldd	r25, Y+48	; 0x30
    cfb4:	21 e0       	ldi	r18, 0x01	; 1
    cfb6:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cfb8:	23 83       	std	Z+3, r18	; 0x03
    cfba:	0e 94 33 4a 	call	0x9466	; 0x9466 <sync_fs>
    cfbe:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfc0:	e7 cf       	rjmp	.-50     	; 0xcf90 <f_chmod+0x60>
    cfc2:	e2 96       	adiw	r28, 0x32	; 50
    cfc4:	e8 e0       	ldi	r30, 0x08	; 8
    cfc6:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000cfca <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cfca:	a2 e3       	ldi	r26, 0x32	; 50
    cfcc:	b0 e0       	ldi	r27, 0x00	; 0
    cfce:	eb ee       	ldi	r30, 0xEB	; 235
    cfd0:	f7 e6       	ldi	r31, 0x67	; 103
    cfd2:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    cfd6:	9a ab       	std	Y+50, r25	; 0x32
    cfd8:	89 ab       	std	Y+49, r24	; 0x31
    cfda:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfdc:	42 e0       	ldi	r20, 0x02	; 2
    cfde:	be 01       	movw	r22, r28
    cfe0:	61 5d       	subi	r22, 0xD1	; 209
    cfe2:	7f 4f       	sbci	r23, 0xFF	; 255
    cfe4:	ce 01       	movw	r24, r28
    cfe6:	c1 96       	adiw	r24, 0x31	; 49
    cfe8:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
	if (res == FR_OK) {
    cfec:	00 97       	sbiw	r24, 0x00	; 0
    cfee:	09 f0       	breq	.+2      	; 0xcff2 <f_utime+0x28>
    cff0:	41 c0       	rjmp	.+130    	; 0xd074 <f_utime+0xaa>
		dj.obj.fs = fs;
    cff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    cff4:	98 a9       	ldd	r25, Y+48	; 0x30
    cff6:	9a 83       	std	Y+2, r25	; 0x02
    cff8:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cffa:	80 e0       	ldi	r24, 0x00	; 0
    cffc:	92 e0       	ldi	r25, 0x02	; 2
    cffe:	da d0       	rcall	.+436    	; 0xd1b4 <ff_memalloc>
    d000:	7c 01       	movw	r14, r24
    d002:	00 97       	sbiw	r24, 0x00	; 0
    d004:	b1 f0       	breq	.+44     	; 0xd032 <f_utime+0x68>
    d006:	ef a5       	ldd	r30, Y+47	; 0x2f
    d008:	f8 a9       	ldd	r31, Y+48	; 0x30
    d00a:	94 87       	std	Z+12, r25	; 0x0c
    d00c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d00e:	69 a9       	ldd	r22, Y+49	; 0x31
    d010:	7a a9       	ldd	r23, Y+50	; 0x32
    d012:	ce 01       	movw	r24, r28
    d014:	01 96       	adiw	r24, 0x01	; 1
    d016:	0e 94 17 57 	call	0xae2e	; 0xae2e <follow_path>
    d01a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d01c:	89 2b       	or	r24, r25
    d01e:	29 f4       	brne	.+10     	; 0xd02a <f_utime+0x60>
    d020:	88 a5       	ldd	r24, Y+40	; 0x28
    d022:	80 7a       	andi	r24, 0xA0	; 160
    d024:	49 f0       	breq	.+18     	; 0xd038 <f_utime+0x6e>
    d026:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d028:	10 e0       	ldi	r17, 0x00	; 0
    d02a:	c7 01       	movw	r24, r14
    d02c:	c6 d0       	rcall	.+396    	; 0xd1ba <ff_memfree>
    d02e:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d030:	21 c0       	rjmp	.+66     	; 0xd074 <f_utime+0xaa>
    d032:	81 e1       	ldi	r24, 0x11	; 17
    d034:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d036:	1e c0       	rjmp	.+60     	; 0xd074 <f_utime+0xaa>
    d038:	f6 01       	movw	r30, r12
    d03a:	44 81       	ldd	r20, Z+4	; 0x04
    d03c:	55 81       	ldd	r21, Z+5	; 0x05
    d03e:	60 e0       	ldi	r22, 0x00	; 0
    d040:	70 e0       	ldi	r23, 0x00	; 0
    d042:	ba 01       	movw	r22, r20
    d044:	55 27       	eor	r21, r21
    d046:	44 27       	eor	r20, r20
    d048:	86 81       	ldd	r24, Z+6	; 0x06
    d04a:	97 81       	ldd	r25, Z+7	; 0x07
    d04c:	a0 e0       	ldi	r26, 0x00	; 0
    d04e:	b0 e0       	ldi	r27, 0x00	; 0
    d050:	48 2b       	or	r20, r24
    d052:	59 2b       	or	r21, r25
    d054:	6a 2b       	or	r22, r26
    d056:	7b 2b       	or	r23, r27
    d058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d05a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d05c:	46 96       	adiw	r24, 0x16	; 22
    d05e:	0e 94 87 46 	call	0x8d0e	; 0x8d0e <st_dword>
				fs->wflag = 1;
    d062:	8f a5       	ldd	r24, Y+47	; 0x2f
    d064:	98 a9       	ldd	r25, Y+48	; 0x30
    d066:	21 e0       	ldi	r18, 0x01	; 1
    d068:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d06a:	23 83       	std	Z+3, r18	; 0x03
    d06c:	0e 94 33 4a 	call	0x9466	; 0x9466 <sync_fs>
    d070:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d072:	db cf       	rjmp	.-74     	; 0xd02a <f_utime+0x60>
    d074:	e2 96       	adiw	r28, 0x32	; 50
    d076:	e8 e0       	ldi	r30, 0x08	; 8
    d078:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000d07c <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d07c:	a2 e3       	ldi	r26, 0x32	; 50
    d07e:	b0 e0       	ldi	r27, 0x00	; 0
    d080:	e4 e4       	ldi	r30, 0x44	; 68
    d082:	f8 e6       	ldi	r31, 0x68	; 104
    d084:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
    d088:	9a ab       	std	Y+50, r25	; 0x32
    d08a:	89 ab       	std	Y+49, r24	; 0x31
    d08c:	6b 01       	movw	r12, r22
    d08e:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d090:	40 e0       	ldi	r20, 0x00	; 0
    d092:	be 01       	movw	r22, r28
    d094:	61 5d       	subi	r22, 0xD1	; 209
    d096:	7f 4f       	sbci	r23, 0xFF	; 255
    d098:	ce 01       	movw	r24, r28
    d09a:	c1 96       	adiw	r24, 0x31	; 49
    d09c:	0e 94 c8 4b 	call	0x9790	; 0x9790 <mount_volume>
    d0a0:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d0a2:	89 2b       	or	r24, r25
    d0a4:	09 f0       	breq	.+2      	; 0xd0a8 <f_getlabel+0x2c>
    d0a6:	81 c0       	rjmp	.+258    	; 0xd1aa <f_getlabel+0x12e>
    d0a8:	c1 14       	cp	r12, r1
    d0aa:	d1 04       	cpc	r13, r1
    d0ac:	09 f4       	brne	.+2      	; 0xd0b0 <f_getlabel+0x34>
    d0ae:	53 c0       	rjmp	.+166    	; 0xd156 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d0b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0b2:	98 a9       	ldd	r25, Y+48	; 0x30
    d0b4:	9a 83       	std	Y+2, r25	; 0x02
    d0b6:	89 83       	std	Y+1, r24	; 0x01
    d0b8:	1f 82       	std	Y+7, r1	; 0x07
    d0ba:	18 86       	std	Y+8, r1	; 0x08
    d0bc:	19 86       	std	Y+9, r1	; 0x09
    d0be:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d0c0:	40 e0       	ldi	r20, 0x00	; 0
    d0c2:	50 e0       	ldi	r21, 0x00	; 0
    d0c4:	ba 01       	movw	r22, r20
    d0c6:	ce 01       	movw	r24, r28
    d0c8:	01 96       	adiw	r24, 0x01	; 1
    d0ca:	0e 94 d1 4f 	call	0x9fa2	; 0x9fa2 <dir_sdi>
		if (res == FR_OK) {
    d0ce:	00 97       	sbiw	r24, 0x00	; 0
    d0d0:	e9 f5       	brne	.+122    	; 0xd14c <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d0d2:	61 e0       	ldi	r22, 0x01	; 1
    d0d4:	70 e0       	ldi	r23, 0x00	; 0
    d0d6:	ce 01       	movw	r24, r28
    d0d8:	01 96       	adiw	r24, 0x01	; 1
    d0da:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <dir_read>
		 	if (res == FR_OK) {
    d0de:	00 97       	sbiw	r24, 0x00	; 0
    d0e0:	a9 f5       	brne	.+106    	; 0xd14c <f_getlabel+0xd0>
    d0e2:	00 e0       	ldi	r16, 0x00	; 0
    d0e4:	10 e0       	ldi	r17, 0x00	; 0
    d0e6:	80 e0       	ldi	r24, 0x00	; 0
    d0e8:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d0ea:	4c 01       	movw	r8, r24
    d0ec:	2f ef       	ldi	r18, 0xFF	; 255
    d0ee:	82 1a       	sub	r8, r18
    d0f0:	92 0a       	sbc	r9, r18
    d0f2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d0f4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d0f6:	f9 01       	movw	r30, r18
    d0f8:	e8 0f       	add	r30, r24
    d0fa:	f9 1f       	adc	r31, r25
    d0fc:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d0fe:	65 eb       	ldi	r22, 0xB5	; 181
    d100:	71 e0       	ldi	r23, 0x01	; 1
    d102:	90 e0       	ldi	r25, 0x00	; 0
    d104:	90 d0       	rcall	.+288    	; 0xd226 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d106:	00 97       	sbiw	r24, 0x00	; 0
    d108:	19 f4       	brne	.+6      	; 0xd110 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d10a:	00 e0       	ldi	r16, 0x00	; 0
    d10c:	10 e0       	ldi	r17, 0x00	; 0
    d10e:	13 c0       	rjmp	.+38     	; 0xd136 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d110:	bc 01       	movw	r22, r24
    d112:	80 e0       	ldi	r24, 0x00	; 0
    d114:	90 e0       	ldi	r25, 0x00	; 0
    d116:	24 e0       	ldi	r18, 0x04	; 4
    d118:	30 e0       	ldi	r19, 0x00	; 0
    d11a:	a6 01       	movw	r20, r12
    d11c:	40 0f       	add	r20, r16
    d11e:	51 1f       	adc	r21, r17
    d120:	0e 94 01 48 	call	0x9002	; 0x9002 <put_utf>
    d124:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d126:	00 97       	sbiw	r24, 0x00	; 0
    d128:	81 f3       	breq	.-32     	; 0xd10a <f_getlabel+0x8e>
						di += wc;
    d12a:	08 0f       	add	r16, r24
    d12c:	19 1f       	adc	r17, r25
    d12e:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d130:	8b 30       	cpi	r24, 0x0B	; 11
    d132:	91 05       	cpc	r25, r1
    d134:	d1 f6       	brne	.-76     	; 0xd0ea <f_getlabel+0x6e>
    d136:	f6 01       	movw	r30, r12
    d138:	e0 0f       	add	r30, r16
    d13a:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d13c:	10 82       	st	Z, r1
						if (di == 0) break;
    d13e:	ce 16       	cp	r12, r30
    d140:	df 06       	cpc	r13, r31
    d142:	49 f0       	breq	.+18     	; 0xd156 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d144:	82 91       	ld	r24, -Z
    d146:	80 32       	cpi	r24, 0x20	; 32
    d148:	c9 f3       	breq	.-14     	; 0xd13c <f_getlabel+0xc0>
    d14a:	05 c0       	rjmp	.+10     	; 0xd156 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d14c:	84 30       	cpi	r24, 0x04	; 4
    d14e:	91 05       	cpc	r25, r1
    d150:	59 f5       	brne	.+86     	; 0xd1a8 <f_getlabel+0x12c>
			label[0] = 0;
    d152:	f6 01       	movw	r30, r12
    d154:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d156:	a1 14       	cp	r10, r1
    d158:	b1 04       	cpc	r11, r1
    d15a:	39 f1       	breq	.+78     	; 0xd1aa <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d15c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d15e:	98 a9       	ldd	r25, Y+48	; 0x30
    d160:	fc 01       	movw	r30, r24
    d162:	41 a1       	ldd	r20, Z+33	; 0x21
    d164:	52 a1       	ldd	r21, Z+34	; 0x22
    d166:	63 a1       	ldd	r22, Z+35	; 0x23
    d168:	74 a1       	ldd	r23, Z+36	; 0x24
    d16a:	0e 94 4d 4b 	call	0x969a	; 0x969a <move_window>
    d16e:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d170:	89 2b       	or	r24, r25
    d172:	d9 f4       	brne	.+54     	; 0xd1aa <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d174:	ef a5       	ldd	r30, Y+47	; 0x2f
    d176:	f8 a9       	ldd	r31, Y+48	; 0x30
    d178:	80 81       	ld	r24, Z
    d17a:	83 30       	cpi	r24, 0x03	; 3
    d17c:	29 f0       	breq	.+10     	; 0xd188 <f_getlabel+0x10c>
    d17e:	84 30       	cpi	r24, 0x04	; 4
    d180:	31 f0       	breq	.+12     	; 0xd18e <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d182:	87 e2       	ldi	r24, 0x27	; 39
    d184:	90 e0       	ldi	r25, 0x00	; 0
    d186:	05 c0       	rjmp	.+10     	; 0xd192 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d188:	83 e4       	ldi	r24, 0x43	; 67
    d18a:	90 e0       	ldi	r25, 0x00	; 0
    d18c:	02 c0       	rjmp	.+4      	; 0xd192 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d18e:	84 e6       	ldi	r24, 0x64	; 100
    d190:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d192:	f5 96       	adiw	r30, 0x35	; 53
    d194:	8e 0f       	add	r24, r30
    d196:	9f 1f       	adc	r25, r31
    d198:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <ld_dword>
    d19c:	f5 01       	movw	r30, r10
    d19e:	60 83       	st	Z, r22
    d1a0:	71 83       	std	Z+1, r23	; 0x01
    d1a2:	82 83       	std	Z+2, r24	; 0x02
    d1a4:	93 83       	std	Z+3, r25	; 0x03
    d1a6:	01 c0       	rjmp	.+2      	; 0xd1aa <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d1a8:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d1aa:	c7 01       	movw	r24, r14
    d1ac:	e2 96       	adiw	r28, 0x32	; 50
    d1ae:	ec e0       	ldi	r30, 0x0C	; 12
    d1b0:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

0000d1b4 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d1b4:	0c 94 02 28 	jmp	0x5004	; 0x5004 <safemalloc>
}
    d1b8:	08 95       	ret

0000d1ba <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d1ba:	0c 94 24 28 	jmp	0x5048	; 0x5048 <safefree>
    d1be:	08 95       	ret

0000d1c0 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d1c0:	cf 92       	push	r12
    d1c2:	df 92       	push	r13
    d1c4:	ef 92       	push	r14
    d1c6:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d1c8:	60 38       	cpi	r22, 0x80	; 128
    d1ca:	71 05       	cpc	r23, r1
    d1cc:	81 05       	cpc	r24, r1
    d1ce:	91 05       	cpc	r25, r1
    d1d0:	10 f4       	brcc	.+4      	; 0xd1d6 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d1d2:	cb 01       	movw	r24, r22
    d1d4:	23 c0       	rjmp	.+70     	; 0xd21c <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d1d6:	61 15       	cp	r22, r1
    d1d8:	71 05       	cpc	r23, r1
    d1da:	21 e0       	ldi	r18, 0x01	; 1
    d1dc:	82 07       	cpc	r24, r18
    d1de:	91 05       	cpc	r25, r1
    d1e0:	d8 f4       	brcc	.+54     	; 0xd218 <ff_uni2oem+0x58>
    d1e2:	45 3b       	cpi	r20, 0xB5	; 181
    d1e4:	51 40       	sbci	r21, 0x01	; 1
    d1e6:	c1 f4       	brne	.+48     	; 0xd218 <ff_uni2oem+0x58>
    d1e8:	e8 e7       	ldi	r30, 0x78	; 120
    d1ea:	f7 e0       	ldi	r31, 0x07	; 7
    d1ec:	20 e0       	ldi	r18, 0x00	; 0
    d1ee:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d1f0:	c1 90       	ld	r12, Z+
    d1f2:	d1 90       	ld	r13, Z+
    d1f4:	e1 2c       	mov	r14, r1
    d1f6:	f1 2c       	mov	r15, r1
    d1f8:	6c 15       	cp	r22, r12
    d1fa:	7d 05       	cpc	r23, r13
    d1fc:	8e 05       	cpc	r24, r14
    d1fe:	9f 05       	cpc	r25, r15
    d200:	29 f0       	breq	.+10     	; 0xd20c <ff_uni2oem+0x4c>
    d202:	2f 5f       	subi	r18, 0xFF	; 255
    d204:	3f 4f       	sbci	r19, 0xFF	; 255
    d206:	20 38       	cpi	r18, 0x80	; 128
    d208:	31 05       	cpc	r19, r1
    d20a:	91 f7       	brne	.-28     	; 0xd1f0 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d20c:	b9 01       	movw	r22, r18
    d20e:	60 58       	subi	r22, 0x80	; 128
    d210:	7f 4f       	sbci	r23, 0xFF	; 255
    d212:	cb 01       	movw	r24, r22
    d214:	99 27       	eor	r25, r25
    d216:	02 c0       	rjmp	.+4      	; 0xd21c <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d218:	80 e0       	ldi	r24, 0x00	; 0
    d21a:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d21c:	ff 90       	pop	r15
    d21e:	ef 90       	pop	r14
    d220:	df 90       	pop	r13
    d222:	cf 90       	pop	r12
    d224:	08 95       	ret

0000d226 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d226:	80 38       	cpi	r24, 0x80	; 128
    d228:	91 05       	cpc	r25, r1
    d22a:	88 f0       	brcs	.+34     	; 0xd24e <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d22c:	65 3b       	cpi	r22, 0xB5	; 181
    d22e:	71 40       	sbci	r23, 0x01	; 1
    d230:	61 f4       	brne	.+24     	; 0xd24a <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d232:	8f 3f       	cpi	r24, 0xFF	; 255
    d234:	91 05       	cpc	r25, r1
    d236:	09 f0       	breq	.+2      	; 0xd23a <ff_oem2uni+0x14>
    d238:	40 f4       	brcc	.+16     	; 0xd24a <ff_oem2uni+0x24>
    d23a:	88 0f       	add	r24, r24
    d23c:	99 1f       	adc	r25, r25
    d23e:	fc 01       	movw	r30, r24
    d240:	e8 58       	subi	r30, 0x88	; 136
    d242:	f9 4f       	sbci	r31, 0xF9	; 249
    d244:	80 81       	ld	r24, Z
    d246:	91 81       	ldd	r25, Z+1	; 0x01
    d248:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d24a:	80 e0       	ldi	r24, 0x00	; 0
    d24c:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d24e:	08 95       	ret

0000d250 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d250:	61 15       	cp	r22, r1
    d252:	71 05       	cpc	r23, r1
    d254:	21 e0       	ldi	r18, 0x01	; 1
    d256:	82 07       	cpc	r24, r18
    d258:	91 05       	cpc	r25, r1
    d25a:	08 f0       	brcs	.+2      	; 0xd25e <ff_wtoupper+0xe>
    d25c:	5a c0       	rjmp	.+180    	; 0xd312 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d25e:	61 15       	cp	r22, r1
    d260:	80 e1       	ldi	r24, 0x10	; 16
    d262:	78 07       	cpc	r23, r24
    d264:	18 f0       	brcs	.+6      	; 0xd26c <ff_wtoupper+0x1c>
    d266:	aa ec       	ldi	r26, 0xCA	; 202
    d268:	b4 e0       	ldi	r27, 0x04	; 4
    d26a:	02 c0       	rjmp	.+4      	; 0xd270 <ff_wtoupper+0x20>
    d26c:	a6 e8       	ldi	r26, 0x86	; 134
    d26e:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d270:	2d 91       	ld	r18, X+
    d272:	3c 91       	ld	r19, X
    d274:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d276:	21 15       	cp	r18, r1
    d278:	31 05       	cpc	r19, r1
    d27a:	09 f4       	brne	.+2      	; 0xd27e <ff_wtoupper+0x2e>
    d27c:	48 c0       	rjmp	.+144    	; 0xd30e <ff_wtoupper+0xbe>
    d27e:	62 17       	cp	r22, r18
    d280:	73 07       	cpc	r23, r19
    d282:	08 f4       	brcc	.+2      	; 0xd286 <ff_wtoupper+0x36>
    d284:	44 c0       	rjmp	.+136    	; 0xd30e <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d286:	14 96       	adiw	r26, 0x04	; 4
    d288:	fd 01       	movw	r30, r26
    d28a:	32 97       	sbiw	r30, 0x02	; 2
    d28c:	80 81       	ld	r24, Z
    d28e:	91 81       	ldd	r25, Z+1	; 0x01
    d290:	e9 2f       	mov	r30, r25
    d292:	ff 27       	eor	r31, r31
    d294:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d296:	a9 01       	movw	r20, r18
    d298:	48 0f       	add	r20, r24
    d29a:	59 1f       	adc	r21, r25
    d29c:	64 17       	cp	r22, r20
    d29e:	75 07       	cpc	r23, r21
    d2a0:	70 f5       	brcc	.+92     	; 0xd2fe <ff_wtoupper+0xae>
				switch (cmd) {
    d2a2:	e9 30       	cpi	r30, 0x09	; 9
    d2a4:	f1 05       	cpc	r31, r1
    d2a6:	98 f5       	brcc	.+102    	; 0xd30e <ff_wtoupper+0xbe>
    d2a8:	ec 54       	subi	r30, 0x4C	; 76
    d2aa:	ff 4f       	sbci	r31, 0xFF	; 255
    d2ac:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d2b0:	62 1b       	sub	r22, r18
    d2b2:	73 0b       	sbc	r23, r19
    d2b4:	fb 01       	movw	r30, r22
    d2b6:	ee 0f       	add	r30, r30
    d2b8:	ff 1f       	adc	r31, r31
    d2ba:	ea 0f       	add	r30, r26
    d2bc:	fb 1f       	adc	r31, r27
    d2be:	60 81       	ld	r22, Z
    d2c0:	71 81       	ldd	r23, Z+1	; 0x01
    d2c2:	25 c0       	rjmp	.+74     	; 0xd30e <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d2c4:	cb 01       	movw	r24, r22
    d2c6:	82 1b       	sub	r24, r18
    d2c8:	93 0b       	sbc	r25, r19
    d2ca:	81 70       	andi	r24, 0x01	; 1
    d2cc:	99 27       	eor	r25, r25
    d2ce:	68 1b       	sub	r22, r24
    d2d0:	79 0b       	sbc	r23, r25
    d2d2:	1d c0       	rjmp	.+58     	; 0xd30e <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d2d4:	60 51       	subi	r22, 0x10	; 16
    d2d6:	71 09       	sbc	r23, r1
    d2d8:	1a c0       	rjmp	.+52     	; 0xd30e <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d2da:	60 52       	subi	r22, 0x20	; 32
    d2dc:	71 09       	sbc	r23, r1
    d2de:	17 c0       	rjmp	.+46     	; 0xd30e <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d2e0:	60 53       	subi	r22, 0x30	; 48
    d2e2:	71 09       	sbc	r23, r1
    d2e4:	14 c0       	rjmp	.+40     	; 0xd30e <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d2e6:	6a 51       	subi	r22, 0x1A	; 26
    d2e8:	71 09       	sbc	r23, r1
    d2ea:	11 c0       	rjmp	.+34     	; 0xd30e <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d2ec:	68 5f       	subi	r22, 0xF8	; 248
    d2ee:	7f 4f       	sbci	r23, 0xFF	; 255
    d2f0:	0e c0       	rjmp	.+28     	; 0xd30e <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d2f2:	60 55       	subi	r22, 0x50	; 80
    d2f4:	71 09       	sbc	r23, r1
    d2f6:	0b c0       	rjmp	.+22     	; 0xd30e <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d2f8:	60 56       	subi	r22, 0x60	; 96
    d2fa:	7c 41       	sbci	r23, 0x1C	; 28
    d2fc:	08 c0       	rjmp	.+16     	; 0xd30e <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d2fe:	ef 2b       	or	r30, r31
    d300:	09 f0       	breq	.+2      	; 0xd304 <ff_wtoupper+0xb4>
    d302:	b6 cf       	rjmp	.-148    	; 0xd270 <ff_wtoupper+0x20>
    d304:	88 0f       	add	r24, r24
    d306:	99 1f       	adc	r25, r25
    d308:	a8 0f       	add	r26, r24
    d30a:	b9 1f       	adc	r27, r25
    d30c:	b1 cf       	rjmp	.-158    	; 0xd270 <ff_wtoupper+0x20>
		}
		uni = uc;
    d30e:	80 e0       	ldi	r24, 0x00	; 0
    d310:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d312:	08 95       	ret

0000d314 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d314:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d316:	02 c0       	rjmp	.+4      	; 0xd31c <disk_status+0x8>
    d318:	a1 c1       	rjmp	.+834    	; 0xd65c <mmc_disk_status>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d31a:	08 95       	ret
}
    d31c:	81 e0       	ldi	r24, 0x01	; 1
    d31e:	08 95       	ret

0000d320 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d320:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d322:	02 c0       	rjmp	.+4      	; 0xd328 <disk_initialize+0x8>
    d324:	f6 c0       	rjmp	.+492    	; 0xd512 <mmc_disk_initialize>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d326:	08 95       	ret
}
    d328:	81 e0       	ldi	r24, 0x01	; 1
    d32a:	08 95       	ret

0000d32c <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d32c:	0f 93       	push	r16
    d32e:	1f 93       	push	r17
    d330:	fb 01       	movw	r30, r22
    switch (pdrv)
    d332:	81 11       	cpse	r24, r1
    d334:	06 c0       	rjmp	.+12     	; 0xd342 <disk_read+0x16>
    d336:	ba 01       	movw	r22, r20
    d338:	a9 01       	movw	r20, r18
    d33a:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d33c:	98 01       	movw	r18, r16
    d33e:	91 d1       	rcall	.+802    	; 0xd662 <mmc_disk_read>
    d340:	02 c0       	rjmp	.+4      	; 0xd346 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d342:	84 e0       	ldi	r24, 0x04	; 4
    d344:	90 e0       	ldi	r25, 0x00	; 0
}
    d346:	1f 91       	pop	r17
    d348:	0f 91       	pop	r16
    d34a:	08 95       	ret

0000d34c <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d34c:	0f 93       	push	r16
    d34e:	1f 93       	push	r17
    d350:	fb 01       	movw	r30, r22
    switch (pdrv)
    d352:	81 11       	cpse	r24, r1
    d354:	06 c0       	rjmp	.+12     	; 0xd362 <disk_write+0x16>
    d356:	ba 01       	movw	r22, r20
    d358:	a9 01       	movw	r20, r18
    d35a:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d35c:	98 01       	movw	r18, r16
    d35e:	e2 d1       	rcall	.+964    	; 0xd724 <mmc_disk_write>
    d360:	02 c0       	rjmp	.+4      	; 0xd366 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d362:	84 e0       	ldi	r24, 0x04	; 4
    d364:	90 e0       	ldi	r25, 0x00	; 0
}
    d366:	1f 91       	pop	r17
    d368:	0f 91       	pop	r16
    d36a:	08 95       	ret

0000d36c <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d36c:	96 2f       	mov	r25, r22
    switch (pdrv)
    d36e:	81 11       	cpse	r24, r1
    d370:	04 c0       	rjmp	.+8      	; 0xd37a <disk_ioctl+0xe>
    d372:	ba 01       	movw	r22, r20
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d374:	89 2f       	mov	r24, r25
    d376:	4a c2       	rjmp	.+1172   	; 0xd80c <mmc_disk_ioctl>
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d378:	08 95       	ret
    d37a:	84 e0       	ldi	r24, 0x04	; 4
}
    d37c:	90 e0       	ldi	r25, 0x00	; 0
    d37e:	08 95       	ret

0000d380 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    d380:	f9 c4       	rjmp	.+2546   	; 0xdd74 <mmc_spi_TXRX>
    d382:	08 95       	ret

0000d384 <deselect>:
    d384:	ce d4       	rcall	.+2460   	; 0xdd22 <mmc_spi_end>
    d386:	8f ef       	ldi	r24, 0xFF	; 255
    d388:	fb df       	rcall	.-10     	; 0xd380 <xchg_spi>
    d38a:	8f ef       	ldi	r24, 0xFF	; 255
    d38c:	f9 cf       	rjmp	.-14     	; 0xd380 <xchg_spi>
    d38e:	08 95       	ret

0000d390 <rcvr_datablock>:
    d390:	0f 93       	push	r16
    d392:	1f 93       	push	r17
    d394:	cf 93       	push	r28
    d396:	df 93       	push	r29
    d398:	ec 01       	movw	r28, r24
    d39a:	8b 01       	movw	r16, r22
    d39c:	88 ee       	ldi	r24, 0xE8	; 232
    d39e:	93 e0       	ldi	r25, 0x03	; 3
    d3a0:	ec d4       	rcall	.+2520   	; 0xdd7a <mmc_set_ms_timeout>
    d3a2:	8f ef       	ldi	r24, 0xFF	; 255
    d3a4:	e7 d4       	rcall	.+2510   	; 0xdd74 <mmc_spi_TXRX>
    d3a6:	8f 3f       	cpi	r24, 0xFF	; 255
    d3a8:	31 f4       	brne	.+12     	; 0xd3b6 <rcvr_datablock+0x26>
    d3aa:	ee d4       	rcall	.+2524   	; 0xdd88 <mmc_test_timeout>
    d3ac:	89 2b       	or	r24, r25
    d3ae:	c9 f3       	breq	.-14     	; 0xd3a2 <rcvr_datablock+0x12>
    d3b0:	80 e0       	ldi	r24, 0x00	; 0
    d3b2:	90 e0       	ldi	r25, 0x00	; 0
    d3b4:	0b c0       	rjmp	.+22     	; 0xd3cc <rcvr_datablock+0x3c>
    d3b6:	8e 3f       	cpi	r24, 0xFE	; 254
    d3b8:	d9 f7       	brne	.-10     	; 0xd3b0 <rcvr_datablock+0x20>
    d3ba:	b8 01       	movw	r22, r16
    d3bc:	ce 01       	movw	r24, r28
    d3be:	d7 d4       	rcall	.+2478   	; 0xdd6e <mmc_spi_RX_buffer>
    d3c0:	8f ef       	ldi	r24, 0xFF	; 255
    d3c2:	de df       	rcall	.-68     	; 0xd380 <xchg_spi>
    d3c4:	8f ef       	ldi	r24, 0xFF	; 255
    d3c6:	dc df       	rcall	.-72     	; 0xd380 <xchg_spi>
    d3c8:	81 e0       	ldi	r24, 0x01	; 1
    d3ca:	90 e0       	ldi	r25, 0x00	; 0
    d3cc:	df 91       	pop	r29
    d3ce:	cf 91       	pop	r28
    d3d0:	1f 91       	pop	r17
    d3d2:	0f 91       	pop	r16
    d3d4:	08 95       	ret

0000d3d6 <wait_ready>:
    d3d6:	cf 93       	push	r28
    d3d8:	d0 d4       	rcall	.+2464   	; 0xdd7a <mmc_set_ms_timeout>
    d3da:	8f ef       	ldi	r24, 0xFF	; 255
    d3dc:	cb d4       	rcall	.+2454   	; 0xdd74 <mmc_spi_TXRX>
    d3de:	c8 2f       	mov	r28, r24
    d3e0:	8f 3f       	cpi	r24, 0xFF	; 255
    d3e2:	19 f0       	breq	.+6      	; 0xd3ea <wait_ready+0x14>
    d3e4:	d1 d4       	rcall	.+2466   	; 0xdd88 <mmc_test_timeout>
    d3e6:	89 2b       	or	r24, r25
    d3e8:	c1 f3       	breq	.-16     	; 0xd3da <wait_ready+0x4>
    d3ea:	81 e0       	ldi	r24, 0x01	; 1
    d3ec:	90 e0       	ldi	r25, 0x00	; 0
    d3ee:	cf 3f       	cpi	r28, 0xFF	; 255
    d3f0:	11 f0       	breq	.+4      	; 0xd3f6 <wait_ready+0x20>
    d3f2:	80 e0       	ldi	r24, 0x00	; 0
    d3f4:	90 e0       	ldi	r25, 0x00	; 0
    d3f6:	cf 91       	pop	r28
    d3f8:	08 95       	ret

0000d3fa <select>:
    d3fa:	cf 93       	push	r28
    d3fc:	df 93       	push	r29
    d3fe:	00 d0       	rcall	.+0      	; 0xd400 <select+0x6>
    d400:	1f 92       	push	r1
    d402:	82 d4       	rcall	.+2308   	; 0xdd08 <mmc_spi_begin>
    d404:	8f ef       	ldi	r24, 0xFF	; 255
    d406:	bc df       	rcall	.-136    	; 0xd380 <xchg_spi>
    d408:	88 ee       	ldi	r24, 0xE8	; 232
    d40a:	93 e0       	ldi	r25, 0x03	; 3
    d40c:	e4 df       	rcall	.-56     	; 0xd3d6 <wait_ready>
    d40e:	ec 01       	movw	r28, r24
    d410:	89 2b       	or	r24, r25
    d412:	61 f4       	brne	.+24     	; 0xd42c <select+0x32>
    d414:	80 e3       	ldi	r24, 0x30	; 48
    d416:	97 e0       	ldi	r25, 0x07	; 7
    d418:	a0 e0       	ldi	r26, 0x00	; 0
    d41a:	ed b7       	in	r30, 0x3d	; 61
    d41c:	fe b7       	in	r31, 0x3e	; 62
    d41e:	81 83       	std	Z+1, r24	; 0x01
    d420:	92 83       	std	Z+2, r25	; 0x02
    d422:	a3 83       	std	Z+3, r26	; 0x03
    d424:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    d428:	ad df       	rcall	.-166    	; 0xd384 <deselect>
    d42a:	02 c0       	rjmp	.+4      	; 0xd430 <select+0x36>
    d42c:	c1 e0       	ldi	r28, 0x01	; 1
    d42e:	d0 e0       	ldi	r29, 0x00	; 0
    d430:	ce 01       	movw	r24, r28
    d432:	cd b7       	in	r28, 0x3d	; 61
    d434:	de b7       	in	r29, 0x3e	; 62
    d436:	23 96       	adiw	r28, 0x03	; 3
    d438:	e2 e0       	ldi	r30, 0x02	; 2
    d43a:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000d43e <send_cmd>:
    d43e:	ff 92       	push	r15
    d440:	0f 93       	push	r16
    d442:	1f 93       	push	r17
    d444:	cf 93       	push	r28
    d446:	df 93       	push	r29
    d448:	c8 2f       	mov	r28, r24
    d44a:	d4 2f       	mov	r29, r20
    d44c:	15 2f       	mov	r17, r21
    d44e:	06 2f       	mov	r16, r22
    d450:	f7 2e       	mov	r15, r23
    d452:	87 ff       	sbrs	r24, 7
    d454:	08 c0       	rjmp	.+16     	; 0xd466 <send_cmd+0x28>
    d456:	40 e0       	ldi	r20, 0x00	; 0
    d458:	50 e0       	ldi	r21, 0x00	; 0
    d45a:	ba 01       	movw	r22, r20
    d45c:	87 e3       	ldi	r24, 0x37	; 55
    d45e:	ef df       	rcall	.-34     	; 0xd43e <send_cmd>
    d460:	82 30       	cpi	r24, 0x02	; 2
    d462:	58 f5       	brcc	.+86     	; 0xd4ba <send_cmd+0x7c>
    d464:	cf 77       	andi	r28, 0x7F	; 127
    d466:	cc 30       	cpi	r28, 0x0C	; 12
    d468:	71 f4       	brne	.+28     	; 0xd486 <send_cmd+0x48>
    d46a:	8c 2f       	mov	r24, r28
    d46c:	80 64       	ori	r24, 0x40	; 64
    d46e:	88 df       	rcall	.-240    	; 0xd380 <xchg_spi>
    d470:	8f 2d       	mov	r24, r15
    d472:	86 df       	rcall	.-244    	; 0xd380 <xchg_spi>
    d474:	80 2f       	mov	r24, r16
    d476:	84 df       	rcall	.-248    	; 0xd380 <xchg_spi>
    d478:	81 2f       	mov	r24, r17
    d47a:	82 df       	rcall	.-252    	; 0xd380 <xchg_spi>
    d47c:	8d 2f       	mov	r24, r29
    d47e:	80 df       	rcall	.-256    	; 0xd380 <xchg_spi>
    d480:	cc 23       	and	r28, r28
    d482:	c9 f0       	breq	.+50     	; 0xd4b6 <send_cmd+0x78>
    d484:	06 c0       	rjmp	.+12     	; 0xd492 <send_cmd+0x54>
    d486:	7e df       	rcall	.-260    	; 0xd384 <deselect>
    d488:	b8 df       	rcall	.-144    	; 0xd3fa <select>
    d48a:	89 2b       	or	r24, r25
    d48c:	71 f7       	brne	.-36     	; 0xd46a <send_cmd+0x2c>
    d48e:	8f ef       	ldi	r24, 0xFF	; 255
    d490:	14 c0       	rjmp	.+40     	; 0xd4ba <send_cmd+0x7c>
    d492:	c8 30       	cpi	r28, 0x08	; 8
    d494:	11 f4       	brne	.+4      	; 0xd49a <send_cmd+0x5c>
    d496:	87 e8       	ldi	r24, 0x87	; 135
    d498:	01 c0       	rjmp	.+2      	; 0xd49c <send_cmd+0x5e>
    d49a:	81 e0       	ldi	r24, 0x01	; 1
    d49c:	71 df       	rcall	.-286    	; 0xd380 <xchg_spi>
    d49e:	cc 30       	cpi	r28, 0x0C	; 12
    d4a0:	11 f4       	brne	.+4      	; 0xd4a6 <send_cmd+0x68>
    d4a2:	8f ef       	ldi	r24, 0xFF	; 255
    d4a4:	6d df       	rcall	.-294    	; 0xd380 <xchg_spi>
    d4a6:	ca e0       	ldi	r28, 0x0A	; 10
    d4a8:	8f ef       	ldi	r24, 0xFF	; 255
    d4aa:	64 d4       	rcall	.+2248   	; 0xdd74 <mmc_spi_TXRX>
    d4ac:	87 ff       	sbrs	r24, 7
    d4ae:	05 c0       	rjmp	.+10     	; 0xd4ba <send_cmd+0x7c>
    d4b0:	c1 50       	subi	r28, 0x01	; 1
    d4b2:	d1 f7       	brne	.-12     	; 0xd4a8 <send_cmd+0x6a>
    d4b4:	02 c0       	rjmp	.+4      	; 0xd4ba <send_cmd+0x7c>
    d4b6:	85 e9       	ldi	r24, 0x95	; 149
    d4b8:	f5 cf       	rjmp	.-22     	; 0xd4a4 <send_cmd+0x66>
    d4ba:	cd b7       	in	r28, 0x3d	; 61
    d4bc:	de b7       	in	r29, 0x3e	; 62
    d4be:	e5 e0       	ldi	r30, 0x05	; 5
    d4c0:	0c 94 ba e0 	jmp	0x1c174	; 0x1c174 <__epilogue_restores__+0x1a>

0000d4c4 <xmit_datablock>:
    d4c4:	0f 93       	push	r16
    d4c6:	1f 93       	push	r17
    d4c8:	cf 93       	push	r28
    d4ca:	8c 01       	movw	r16, r24
    d4cc:	c6 2f       	mov	r28, r22
    d4ce:	88 ee       	ldi	r24, 0xE8	; 232
    d4d0:	93 e0       	ldi	r25, 0x03	; 3
    d4d2:	81 df       	rcall	.-254    	; 0xd3d6 <wait_ready>
    d4d4:	00 97       	sbiw	r24, 0x00	; 0
    d4d6:	c9 f0       	breq	.+50     	; 0xd50a <xmit_datablock+0x46>
    d4d8:	8c 2f       	mov	r24, r28
    d4da:	52 df       	rcall	.-348    	; 0xd380 <xchg_spi>
    d4dc:	cd 3f       	cpi	r28, 0xFD	; 253
    d4de:	99 f0       	breq	.+38     	; 0xd506 <xmit_datablock+0x42>
    d4e0:	60 e0       	ldi	r22, 0x00	; 0
    d4e2:	72 e0       	ldi	r23, 0x02	; 2
    d4e4:	c8 01       	movw	r24, r16
    d4e6:	40 d4       	rcall	.+2176   	; 0xdd68 <mmc_spi_TX_buffer>
    d4e8:	8f ef       	ldi	r24, 0xFF	; 255
    d4ea:	4a df       	rcall	.-364    	; 0xd380 <xchg_spi>
    d4ec:	8f ef       	ldi	r24, 0xFF	; 255
    d4ee:	48 df       	rcall	.-368    	; 0xd380 <xchg_spi>
    d4f0:	8f ef       	ldi	r24, 0xFF	; 255
    d4f2:	40 d4       	rcall	.+2176   	; 0xdd74 <mmc_spi_TXRX>
    d4f4:	8f 71       	andi	r24, 0x1F	; 31
    d4f6:	31 e0       	ldi	r19, 0x01	; 1
    d4f8:	20 e0       	ldi	r18, 0x00	; 0
    d4fa:	85 30       	cpi	r24, 0x05	; 5
    d4fc:	09 f0       	breq	.+2      	; 0xd500 <xmit_datablock+0x3c>
    d4fe:	30 e0       	ldi	r19, 0x00	; 0
    d500:	83 2f       	mov	r24, r19
    d502:	92 2f       	mov	r25, r18
    d504:	02 c0       	rjmp	.+4      	; 0xd50a <xmit_datablock+0x46>
    d506:	81 e0       	ldi	r24, 0x01	; 1
    d508:	90 e0       	ldi	r25, 0x00	; 0
    d50a:	cf 91       	pop	r28
    d50c:	1f 91       	pop	r17
    d50e:	0f 91       	pop	r16
    d510:	08 95       	ret

0000d512 <mmc_disk_initialize>:
    d512:	a4 e0       	ldi	r26, 0x04	; 4
    d514:	b0 e0       	ldi	r27, 0x00	; 0
    d516:	ef e8       	ldi	r30, 0x8F	; 143
    d518:	fa e6       	ldi	r31, 0x6A	; 106
    d51a:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    d51e:	59 d4       	rcall	.+2226   	; 0xddd2 <mmc_power_off>
    d520:	64 e6       	ldi	r22, 0x64	; 100
    d522:	70 e0       	ldi	r23, 0x00	; 0
    d524:	80 e0       	ldi	r24, 0x00	; 0
    d526:	90 e0       	ldi	r25, 0x00	; 0
    d528:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>
    d52c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d530:	81 fd       	sbrc	r24, 1
    d532:	8e c0       	rjmp	.+284    	; 0xd650 <mmc_disk_initialize+0x13e>
    d534:	4d d4       	rcall	.+2202   	; 0xddd0 <mmc_power_on>
    d536:	f9 d3       	rcall	.+2034   	; 0xdd2a <mmc_slow>
    d538:	1a e0       	ldi	r17, 0x0A	; 10
    d53a:	8f ef       	ldi	r24, 0xFF	; 255
    d53c:	21 df       	rcall	.-446    	; 0xd380 <xchg_spi>
    d53e:	11 50       	subi	r17, 0x01	; 1
    d540:	e1 f7       	brne	.-8      	; 0xd53a <mmc_disk_initialize+0x28>
    d542:	40 e0       	ldi	r20, 0x00	; 0
    d544:	50 e0       	ldi	r21, 0x00	; 0
    d546:	ba 01       	movw	r22, r20
    d548:	80 e0       	ldi	r24, 0x00	; 0
    d54a:	79 df       	rcall	.-270    	; 0xd43e <send_cmd>
    d54c:	81 30       	cpi	r24, 0x01	; 1
    d54e:	09 f0       	breq	.+2      	; 0xd552 <mmc_disk_initialize+0x40>
    d550:	6f c0       	rjmp	.+222    	; 0xd630 <mmc_disk_initialize+0x11e>
    d552:	80 ed       	ldi	r24, 0xD0	; 208
    d554:	97 e0       	ldi	r25, 0x07	; 7
    d556:	11 d4       	rcall	.+2082   	; 0xdd7a <mmc_set_ms_timeout>
    d558:	4a ea       	ldi	r20, 0xAA	; 170
    d55a:	51 e0       	ldi	r21, 0x01	; 1
    d55c:	60 e0       	ldi	r22, 0x00	; 0
    d55e:	70 e0       	ldi	r23, 0x00	; 0
    d560:	88 e0       	ldi	r24, 0x08	; 8
    d562:	6d df       	rcall	.-294    	; 0xd43e <send_cmd>
    d564:	81 30       	cpi	r24, 0x01	; 1
    d566:	09 f0       	breq	.+2      	; 0xd56a <mmc_disk_initialize+0x58>
    d568:	3d c0       	rjmp	.+122    	; 0xd5e4 <mmc_disk_initialize+0xd2>
    d56a:	8e 01       	movw	r16, r28
    d56c:	0f 5f       	subi	r16, 0xFF	; 255
    d56e:	1f 4f       	sbci	r17, 0xFF	; 255
    d570:	6e 01       	movw	r12, r28
    d572:	85 e0       	ldi	r24, 0x05	; 5
    d574:	c8 0e       	add	r12, r24
    d576:	d1 1c       	adc	r13, r1
    d578:	78 01       	movw	r14, r16
    d57a:	8f ef       	ldi	r24, 0xFF	; 255
    d57c:	fb d3       	rcall	.+2038   	; 0xdd74 <mmc_spi_TXRX>
    d57e:	f7 01       	movw	r30, r14
    d580:	81 93       	st	Z+, r24
    d582:	7f 01       	movw	r14, r30
    d584:	ce 16       	cp	r12, r30
    d586:	df 06       	cpc	r13, r31
    d588:	c1 f7       	brne	.-16     	; 0xd57a <mmc_disk_initialize+0x68>
    d58a:	8b 81       	ldd	r24, Y+3	; 0x03
    d58c:	81 30       	cpi	r24, 0x01	; 1
    d58e:	09 f0       	breq	.+2      	; 0xd592 <mmc_disk_initialize+0x80>
    d590:	4f c0       	rjmp	.+158    	; 0xd630 <mmc_disk_initialize+0x11e>
    d592:	8c 81       	ldd	r24, Y+4	; 0x04
    d594:	8a 3a       	cpi	r24, 0xAA	; 170
    d596:	09 f0       	breq	.+2      	; 0xd59a <mmc_disk_initialize+0x88>
    d598:	4b c0       	rjmp	.+150    	; 0xd630 <mmc_disk_initialize+0x11e>
    d59a:	f6 d3       	rcall	.+2028   	; 0xdd88 <mmc_test_timeout>
    d59c:	89 2b       	or	r24, r25
    d59e:	29 f0       	breq	.+10     	; 0xd5aa <mmc_disk_initialize+0x98>
    d5a0:	f3 d3       	rcall	.+2022   	; 0xdd88 <mmc_test_timeout>
    d5a2:	89 2b       	or	r24, r25
    d5a4:	09 f0       	breq	.+2      	; 0xd5a8 <mmc_disk_initialize+0x96>
    d5a6:	44 c0       	rjmp	.+136    	; 0xd630 <mmc_disk_initialize+0x11e>
    d5a8:	09 c0       	rjmp	.+18     	; 0xd5bc <mmc_disk_initialize+0xaa>
    d5aa:	40 e0       	ldi	r20, 0x00	; 0
    d5ac:	50 e0       	ldi	r21, 0x00	; 0
    d5ae:	60 e0       	ldi	r22, 0x00	; 0
    d5b0:	70 e4       	ldi	r23, 0x40	; 64
    d5b2:	89 ea       	ldi	r24, 0xA9	; 169
    d5b4:	44 df       	rcall	.-376    	; 0xd43e <send_cmd>
    d5b6:	81 11       	cpse	r24, r1
    d5b8:	f0 cf       	rjmp	.-32     	; 0xd59a <mmc_disk_initialize+0x88>
    d5ba:	f2 cf       	rjmp	.-28     	; 0xd5a0 <mmc_disk_initialize+0x8e>
    d5bc:	40 e0       	ldi	r20, 0x00	; 0
    d5be:	50 e0       	ldi	r21, 0x00	; 0
    d5c0:	ba 01       	movw	r22, r20
    d5c2:	8a e3       	ldi	r24, 0x3A	; 58
    d5c4:	3c df       	rcall	.-392    	; 0xd43e <send_cmd>
    d5c6:	81 11       	cpse	r24, r1
    d5c8:	33 c0       	rjmp	.+102    	; 0xd630 <mmc_disk_initialize+0x11e>
    d5ca:	8f ef       	ldi	r24, 0xFF	; 255
    d5cc:	d3 d3       	rcall	.+1958   	; 0xdd74 <mmc_spi_TXRX>
    d5ce:	f8 01       	movw	r30, r16
    d5d0:	81 93       	st	Z+, r24
    d5d2:	8f 01       	movw	r16, r30
    d5d4:	ce 16       	cp	r12, r30
    d5d6:	df 06       	cpc	r13, r31
    d5d8:	c1 f7       	brne	.-16     	; 0xd5ca <mmc_disk_initialize+0xb8>
    d5da:	89 81       	ldd	r24, Y+1	; 0x01
    d5dc:	86 fd       	sbrc	r24, 6
    d5de:	2a c0       	rjmp	.+84     	; 0xd634 <mmc_disk_initialize+0x122>
    d5e0:	14 e0       	ldi	r17, 0x04	; 4
    d5e2:	29 c0       	rjmp	.+82     	; 0xd636 <mmc_disk_initialize+0x124>
    d5e4:	80 ed       	ldi	r24, 0xD0	; 208
    d5e6:	97 e0       	ldi	r25, 0x07	; 7
    d5e8:	c8 d3       	rcall	.+1936   	; 0xdd7a <mmc_set_ms_timeout>
    d5ea:	40 e0       	ldi	r20, 0x00	; 0
    d5ec:	50 e0       	ldi	r21, 0x00	; 0
    d5ee:	ba 01       	movw	r22, r20
    d5f0:	89 ea       	ldi	r24, 0xA9	; 169
    d5f2:	25 df       	rcall	.-438    	; 0xd43e <send_cmd>
    d5f4:	82 30       	cpi	r24, 0x02	; 2
    d5f6:	18 f0       	brcs	.+6      	; 0xd5fe <mmc_disk_initialize+0xec>
    d5f8:	11 e0       	ldi	r17, 0x01	; 1
    d5fa:	01 e0       	ldi	r16, 0x01	; 1
    d5fc:	02 c0       	rjmp	.+4      	; 0xd602 <mmc_disk_initialize+0xf0>
    d5fe:	12 e0       	ldi	r17, 0x02	; 2
    d600:	09 ea       	ldi	r16, 0xA9	; 169
    d602:	c2 d3       	rcall	.+1924   	; 0xdd88 <mmc_test_timeout>
    d604:	89 2b       	or	r24, r25
    d606:	21 f0       	breq	.+8      	; 0xd610 <mmc_disk_initialize+0xfe>
    d608:	bf d3       	rcall	.+1918   	; 0xdd88 <mmc_test_timeout>
    d60a:	89 2b       	or	r24, r25
    d60c:	89 f4       	brne	.+34     	; 0xd630 <mmc_disk_initialize+0x11e>
    d60e:	08 c0       	rjmp	.+16     	; 0xd620 <mmc_disk_initialize+0x10e>
    d610:	40 e0       	ldi	r20, 0x00	; 0
    d612:	50 e0       	ldi	r21, 0x00	; 0
    d614:	ba 01       	movw	r22, r20
    d616:	80 2f       	mov	r24, r16
    d618:	12 df       	rcall	.-476    	; 0xd43e <send_cmd>
    d61a:	81 11       	cpse	r24, r1
    d61c:	f2 cf       	rjmp	.-28     	; 0xd602 <mmc_disk_initialize+0xf0>
    d61e:	f4 cf       	rjmp	.-24     	; 0xd608 <mmc_disk_initialize+0xf6>
    d620:	40 e0       	ldi	r20, 0x00	; 0
    d622:	52 e0       	ldi	r21, 0x02	; 2
    d624:	60 e0       	ldi	r22, 0x00	; 0
    d626:	70 e0       	ldi	r23, 0x00	; 0
    d628:	80 e1       	ldi	r24, 0x10	; 16
    d62a:	09 df       	rcall	.-494    	; 0xd43e <send_cmd>
    d62c:	88 23       	and	r24, r24
    d62e:	19 f0       	breq	.+6      	; 0xd636 <mmc_disk_initialize+0x124>
    d630:	10 e0       	ldi	r17, 0x00	; 0
    d632:	01 c0       	rjmp	.+2      	; 0xd636 <mmc_disk_initialize+0x124>
    d634:	1c e0       	ldi	r17, 0x0C	; 12
    d636:	10 93 0c 18 	sts	0x180C, r17	; 0x80180c <CardType>
    d63a:	a4 de       	rcall	.-696    	; 0xd384 <deselect>
    d63c:	11 23       	and	r17, r17
    d63e:	39 f0       	breq	.+14     	; 0xd64e <mmc_disk_initialize+0x13c>
    d640:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d644:	8e 7f       	andi	r24, 0xFE	; 254
    d646:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    d64a:	81 d3       	rcall	.+1794   	; 0xdd4e <mmc_fast>
    d64c:	01 c0       	rjmp	.+2      	; 0xd650 <mmc_disk_initialize+0x13e>
    d64e:	c1 d3       	rcall	.+1922   	; 0xddd2 <mmc_power_off>
    d650:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d654:	24 96       	adiw	r28, 0x04	; 4
    d656:	e8 e0       	ldi	r30, 0x08	; 8
    d658:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000d65c <mmc_disk_status>:
    d65c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d660:	08 95       	ret

0000d662 <mmc_disk_read>:
    d662:	8f 92       	push	r8
    d664:	9f 92       	push	r9
    d666:	af 92       	push	r10
    d668:	bf 92       	push	r11
    d66a:	ef 92       	push	r14
    d66c:	ff 92       	push	r15
    d66e:	1f 93       	push	r17
    d670:	cf 93       	push	r28
    d672:	df 93       	push	r29
    d674:	7c 01       	movw	r14, r24
    d676:	4a 01       	movw	r8, r20
    d678:	5b 01       	movw	r10, r22
    d67a:	e9 01       	movw	r28, r18
    d67c:	20 97       	sbiw	r28, 0x00	; 0
    d67e:	19 f4       	brne	.+6      	; 0xd686 <mmc_disk_read+0x24>
    d680:	81 de       	rcall	.-766    	; 0xd384 <deselect>
    d682:	84 e0       	ldi	r24, 0x04	; 4
    d684:	0d c0       	rjmp	.+26     	; 0xd6a0 <mmc_disk_read+0x3e>
    d686:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d68a:	88 23       	and	r24, r24
    d68c:	19 f0       	breq	.+6      	; 0xd694 <mmc_disk_read+0x32>
    d68e:	81 e0       	ldi	r24, 0x01	; 1
    d690:	0e 94 23 27 	call	0x4e46	; 0x4e46 <set_error>
    d694:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d698:	80 ff       	sbrs	r24, 0
    d69a:	04 c0       	rjmp	.+8      	; 0xd6a4 <mmc_disk_read+0x42>
    d69c:	73 de       	rcall	.-794    	; 0xd384 <deselect>
    d69e:	83 e0       	ldi	r24, 0x03	; 3
    d6a0:	90 e0       	ldi	r25, 0x00	; 0
    d6a2:	36 c0       	rjmp	.+108    	; 0xd710 <mmc_disk_read+0xae>
    d6a4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d6a8:	81 fd       	sbrc	r24, 1
    d6aa:	f8 cf       	rjmp	.-16     	; 0xd69c <mmc_disk_read+0x3a>
    d6ac:	46 9a       	sbi	0x08, 6	; 8
    d6ae:	3e 9a       	sbi	0x07, 6	; 7
    d6b0:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <CardType>
    d6b4:	83 fd       	sbrc	r24, 3
    d6b6:	07 c0       	rjmp	.+14     	; 0xd6c6 <mmc_disk_read+0x64>
    d6b8:	89 e0       	ldi	r24, 0x09	; 9
    d6ba:	88 0c       	add	r8, r8
    d6bc:	99 1c       	adc	r9, r9
    d6be:	aa 1c       	adc	r10, r10
    d6c0:	bb 1c       	adc	r11, r11
    d6c2:	8a 95       	dec	r24
    d6c4:	d1 f7       	brne	.-12     	; 0xd6ba <mmc_disk_read+0x58>
    d6c6:	c2 30       	cpi	r28, 0x02	; 2
    d6c8:	d1 05       	cpc	r29, r1
    d6ca:	10 f4       	brcc	.+4      	; 0xd6d0 <mmc_disk_read+0x6e>
    d6cc:	11 e1       	ldi	r17, 0x11	; 17
    d6ce:	01 c0       	rjmp	.+2      	; 0xd6d2 <mmc_disk_read+0x70>
    d6d0:	12 e1       	ldi	r17, 0x12	; 18
    d6d2:	b5 01       	movw	r22, r10
    d6d4:	a4 01       	movw	r20, r8
    d6d6:	81 2f       	mov	r24, r17
    d6d8:	b2 de       	rcall	.-668    	; 0xd43e <send_cmd>
    d6da:	81 11       	cpse	r24, r1
    d6dc:	11 c0       	rjmp	.+34     	; 0xd700 <mmc_disk_read+0x9e>
    d6de:	60 e0       	ldi	r22, 0x00	; 0
    d6e0:	72 e0       	ldi	r23, 0x02	; 2
    d6e2:	c7 01       	movw	r24, r14
    d6e4:	55 de       	rcall	.-854    	; 0xd390 <rcvr_datablock>
    d6e6:	89 2b       	or	r24, r25
    d6e8:	21 f0       	breq	.+8      	; 0xd6f2 <mmc_disk_read+0x90>
    d6ea:	8e ef       	ldi	r24, 0xFE	; 254
    d6ec:	f8 1a       	sub	r15, r24
    d6ee:	21 97       	sbiw	r28, 0x01	; 1
    d6f0:	b1 f7       	brne	.-20     	; 0xd6de <mmc_disk_read+0x7c>
    d6f2:	12 31       	cpi	r17, 0x12	; 18
    d6f4:	29 f4       	brne	.+10     	; 0xd700 <mmc_disk_read+0x9e>
    d6f6:	40 e0       	ldi	r20, 0x00	; 0
    d6f8:	50 e0       	ldi	r21, 0x00	; 0
    d6fa:	ba 01       	movw	r22, r20
    d6fc:	8c e0       	ldi	r24, 0x0C	; 12
    d6fe:	9f de       	rcall	.-706    	; 0xd43e <send_cmd>
    d700:	41 de       	rcall	.-894    	; 0xd384 <deselect>
    d702:	46 98       	cbi	0x08, 6	; 8
    d704:	3e 9a       	sbi	0x07, 6	; 7
    d706:	81 e0       	ldi	r24, 0x01	; 1
    d708:	90 e0       	ldi	r25, 0x00	; 0
    d70a:	cd 2b       	or	r28, r29
    d70c:	09 f4       	brne	.+2      	; 0xd710 <mmc_disk_read+0xae>
    d70e:	80 e0       	ldi	r24, 0x00	; 0
    d710:	df 91       	pop	r29
    d712:	cf 91       	pop	r28
    d714:	1f 91       	pop	r17
    d716:	ff 90       	pop	r15
    d718:	ef 90       	pop	r14
    d71a:	bf 90       	pop	r11
    d71c:	af 90       	pop	r10
    d71e:	9f 90       	pop	r9
    d720:	8f 90       	pop	r8
    d722:	08 95       	ret

0000d724 <mmc_disk_write>:
    d724:	a0 e0       	ldi	r26, 0x00	; 0
    d726:	b0 e0       	ldi	r27, 0x00	; 0
    d728:	e8 e9       	ldi	r30, 0x98	; 152
    d72a:	fb e6       	ldi	r31, 0x6B	; 107
    d72c:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    d730:	8c 01       	movw	r16, r24
    d732:	6a 01       	movw	r12, r20
    d734:	7b 01       	movw	r14, r22
    d736:	e9 01       	movw	r28, r18
    d738:	20 97       	sbiw	r28, 0x00	; 0
    d73a:	19 f4       	brne	.+6      	; 0xd742 <mmc_disk_write+0x1e>
    d73c:	23 de       	rcall	.-954    	; 0xd384 <deselect>
    d73e:	84 e0       	ldi	r24, 0x04	; 4
    d740:	18 c0       	rjmp	.+48     	; 0xd772 <mmc_disk_write+0x4e>
    d742:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d746:	88 23       	and	r24, r24
    d748:	19 f0       	breq	.+6      	; 0xd750 <mmc_disk_write+0x2c>
    d74a:	81 e0       	ldi	r24, 0x01	; 1
    d74c:	0e 94 23 27 	call	0x4e46	; 0x4e46 <set_error>
    d750:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d754:	80 ff       	sbrs	r24, 0
    d756:	03 c0       	rjmp	.+6      	; 0xd75e <mmc_disk_write+0x3a>
    d758:	15 de       	rcall	.-982    	; 0xd384 <deselect>
    d75a:	83 e0       	ldi	r24, 0x03	; 3
    d75c:	0a c0       	rjmp	.+20     	; 0xd772 <mmc_disk_write+0x4e>
    d75e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d762:	81 fd       	sbrc	r24, 1
    d764:	f9 cf       	rjmp	.-14     	; 0xd758 <mmc_disk_write+0x34>
    d766:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d76a:	82 ff       	sbrs	r24, 2
    d76c:	04 c0       	rjmp	.+8      	; 0xd776 <mmc_disk_write+0x52>
    d76e:	0a de       	rcall	.-1004   	; 0xd384 <deselect>
    d770:	82 e0       	ldi	r24, 0x02	; 2
    d772:	90 e0       	ldi	r25, 0x00	; 0
    d774:	46 c0       	rjmp	.+140    	; 0xd802 <mmc_disk_write+0xde>
    d776:	46 9a       	sbi	0x08, 6	; 8
    d778:	3e 9a       	sbi	0x07, 6	; 7
    d77a:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <CardType>
    d77e:	83 fd       	sbrc	r24, 3
    d780:	07 c0       	rjmp	.+14     	; 0xd790 <mmc_disk_write+0x6c>
    d782:	99 e0       	ldi	r25, 0x09	; 9
    d784:	cc 0c       	add	r12, r12
    d786:	dd 1c       	adc	r13, r13
    d788:	ee 1c       	adc	r14, r14
    d78a:	ff 1c       	adc	r15, r15
    d78c:	9a 95       	dec	r25
    d78e:	d1 f7       	brne	.-12     	; 0xd784 <mmc_disk_write+0x60>
    d790:	c1 30       	cpi	r28, 0x01	; 1
    d792:	d1 05       	cpc	r29, r1
    d794:	89 f4       	brne	.+34     	; 0xd7b8 <mmc_disk_write+0x94>
    d796:	b7 01       	movw	r22, r14
    d798:	a6 01       	movw	r20, r12
    d79a:	88 e1       	ldi	r24, 0x18	; 24
    d79c:	50 de       	rcall	.-864    	; 0xd43e <send_cmd>
    d79e:	81 11       	cpse	r24, r1
    d7a0:	26 c0       	rjmp	.+76     	; 0xd7ee <mmc_disk_write+0xca>
    d7a2:	6e ef       	ldi	r22, 0xFE	; 254
    d7a4:	c8 01       	movw	r24, r16
    d7a6:	8e de       	rcall	.-740    	; 0xd4c4 <xmit_datablock>
    d7a8:	31 e0       	ldi	r19, 0x01	; 1
    d7aa:	20 e0       	ldi	r18, 0x00	; 0
    d7ac:	89 2b       	or	r24, r25
    d7ae:	09 f0       	breq	.+2      	; 0xd7b2 <mmc_disk_write+0x8e>
    d7b0:	30 e0       	ldi	r19, 0x00	; 0
    d7b2:	c3 2f       	mov	r28, r19
    d7b4:	d2 2f       	mov	r29, r18
    d7b6:	1d c0       	rjmp	.+58     	; 0xd7f2 <mmc_disk_write+0xce>
    d7b8:	86 70       	andi	r24, 0x06	; 6
    d7ba:	29 f0       	breq	.+10     	; 0xd7c6 <mmc_disk_write+0xa2>
    d7bc:	ae 01       	movw	r20, r28
    d7be:	60 e0       	ldi	r22, 0x00	; 0
    d7c0:	70 e0       	ldi	r23, 0x00	; 0
    d7c2:	87 e9       	ldi	r24, 0x97	; 151
    d7c4:	3c de       	rcall	.-904    	; 0xd43e <send_cmd>
    d7c6:	b7 01       	movw	r22, r14
    d7c8:	a6 01       	movw	r20, r12
    d7ca:	89 e1       	ldi	r24, 0x19	; 25
    d7cc:	38 de       	rcall	.-912    	; 0xd43e <send_cmd>
    d7ce:	81 11       	cpse	r24, r1
    d7d0:	10 c0       	rjmp	.+32     	; 0xd7f2 <mmc_disk_write+0xce>
    d7d2:	6c ef       	ldi	r22, 0xFC	; 252
    d7d4:	c8 01       	movw	r24, r16
    d7d6:	76 de       	rcall	.-788    	; 0xd4c4 <xmit_datablock>
    d7d8:	89 2b       	or	r24, r25
    d7da:	19 f0       	breq	.+6      	; 0xd7e2 <mmc_disk_write+0xbe>
    d7dc:	1e 5f       	subi	r17, 0xFE	; 254
    d7de:	21 97       	sbiw	r28, 0x01	; 1
    d7e0:	c1 f7       	brne	.-16     	; 0xd7d2 <mmc_disk_write+0xae>
    d7e2:	6d ef       	ldi	r22, 0xFD	; 253
    d7e4:	80 e0       	ldi	r24, 0x00	; 0
    d7e6:	90 e0       	ldi	r25, 0x00	; 0
    d7e8:	6d de       	rcall	.-806    	; 0xd4c4 <xmit_datablock>
    d7ea:	89 2b       	or	r24, r25
    d7ec:	11 f4       	brne	.+4      	; 0xd7f2 <mmc_disk_write+0xce>
    d7ee:	c1 e0       	ldi	r28, 0x01	; 1
    d7f0:	d0 e0       	ldi	r29, 0x00	; 0
    d7f2:	c8 dd       	rcall	.-1136   	; 0xd384 <deselect>
    d7f4:	46 98       	cbi	0x08, 6	; 8
    d7f6:	3e 9a       	sbi	0x07, 6	; 7
    d7f8:	81 e0       	ldi	r24, 0x01	; 1
    d7fa:	90 e0       	ldi	r25, 0x00	; 0
    d7fc:	cd 2b       	or	r28, r29
    d7fe:	09 f4       	brne	.+2      	; 0xd802 <mmc_disk_write+0xde>
    d800:	80 e0       	ldi	r24, 0x00	; 0
    d802:	cd b7       	in	r28, 0x3d	; 61
    d804:	de b7       	in	r29, 0x3e	; 62
    d806:	e8 e0       	ldi	r30, 0x08	; 8
    d808:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000d80c <mmc_disk_ioctl>:
    d80c:	a0 e1       	ldi	r26, 0x10	; 16
    d80e:	b0 e0       	ldi	r27, 0x00	; 0
    d810:	ec e0       	ldi	r30, 0x0C	; 12
    d812:	fc e6       	ldi	r31, 0x6C	; 108
    d814:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    d818:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Stat>
    d81c:	90 fd       	sbrc	r25, 0
    d81e:	31 c2       	rjmp	.+1122   	; 0xdc82 <mmc_disk_ioctl+0x476>
    d820:	8b 01       	movw	r16, r22
    d822:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Stat>
    d826:	91 ff       	sbrs	r25, 1
    d828:	02 c0       	rjmp	.+4      	; 0xd82e <mmc_disk_ioctl+0x22>
    d82a:	ac dd       	rcall	.-1192   	; 0xd384 <deselect>
    d82c:	2a c2       	rjmp	.+1108   	; 0xdc82 <mmc_disk_ioctl+0x476>
    d82e:	83 33       	cpi	r24, 0x33	; 51
    d830:	09 f4       	brne	.+2      	; 0xd834 <mmc_disk_ioctl+0x28>
    d832:	01 c1       	rjmp	.+514    	; 0xda36 <mmc_disk_ioctl+0x22a>
    d834:	a0 f4       	brcc	.+40     	; 0xd85e <mmc_disk_ioctl+0x52>
    d836:	83 30       	cpi	r24, 0x03	; 3
    d838:	09 f4       	brne	.+2      	; 0xd83c <mmc_disk_ioctl+0x30>
    d83a:	85 c0       	rjmp	.+266    	; 0xd946 <mmc_disk_ioctl+0x13a>
    d83c:	28 f4       	brcc	.+10     	; 0xd848 <mmc_disk_ioctl+0x3c>
    d83e:	88 23       	and	r24, r24
    d840:	11 f1       	breq	.+68     	; 0xd886 <mmc_disk_ioctl+0x7a>
    d842:	81 30       	cpi	r24, 0x01	; 1
    d844:	11 f1       	breq	.+68     	; 0xd88a <mmc_disk_ioctl+0x7e>
    d846:	1f c2       	rjmp	.+1086   	; 0xdc86 <mmc_disk_ioctl+0x47a>
    d848:	87 30       	cpi	r24, 0x07	; 7
    d84a:	09 f4       	brne	.+2      	; 0xd84e <mmc_disk_ioctl+0x42>
    d84c:	2a c1       	rjmp	.+596    	; 0xdaa2 <mmc_disk_ioctl+0x296>
    d84e:	82 33       	cpi	r24, 0x32	; 50
    d850:	09 f0       	breq	.+2      	; 0xd854 <mmc_disk_ioctl+0x48>
    d852:	19 c2       	rjmp	.+1074   	; 0xdc86 <mmc_disk_ioctl+0x47a>
    d854:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <CardType>
    d858:	fb 01       	movw	r30, r22
    d85a:	80 83       	st	Z, r24
    d85c:	28 c1       	rjmp	.+592    	; 0xdaae <mmc_disk_ioctl+0x2a2>
    d85e:	86 33       	cpi	r24, 0x36	; 54
    d860:	09 f4       	brne	.+2      	; 0xd864 <mmc_disk_ioctl+0x58>
    d862:	0c c1       	rjmp	.+536    	; 0xda7c <mmc_disk_ioctl+0x270>
    d864:	38 f4       	brcc	.+14     	; 0xd874 <mmc_disk_ioctl+0x68>
    d866:	84 33       	cpi	r24, 0x34	; 52
    d868:	09 f4       	brne	.+2      	; 0xd86c <mmc_disk_ioctl+0x60>
    d86a:	ea c0       	rjmp	.+468    	; 0xda40 <mmc_disk_ioctl+0x234>
    d86c:	85 33       	cpi	r24, 0x35	; 53
    d86e:	09 f4       	brne	.+2      	; 0xd872 <mmc_disk_ioctl+0x66>
    d870:	f1 c0       	rjmp	.+482    	; 0xda54 <mmc_disk_ioctl+0x248>
    d872:	09 c2       	rjmp	.+1042   	; 0xdc86 <mmc_disk_ioctl+0x47a>
    d874:	88 33       	cpi	r24, 0x38	; 56
    d876:	09 f4       	brne	.+2      	; 0xd87a <mmc_disk_ioctl+0x6e>
    d878:	74 c1       	rjmp	.+744    	; 0xdb62 <mmc_disk_ioctl+0x356>
    d87a:	08 f4       	brcc	.+2      	; 0xd87e <mmc_disk_ioctl+0x72>
    d87c:	1a c1       	rjmp	.+564    	; 0xdab2 <mmc_disk_ioctl+0x2a6>
    d87e:	89 33       	cpi	r24, 0x39	; 57
    d880:	09 f4       	brne	.+2      	; 0xd884 <mmc_disk_ioctl+0x78>
    d882:	bc c1       	rjmp	.+888    	; 0xdbfc <mmc_disk_ioctl+0x3f0>
    d884:	00 c2       	rjmp	.+1024   	; 0xdc86 <mmc_disk_ioctl+0x47a>
    d886:	b9 dd       	rcall	.-1166   	; 0xd3fa <select>
    d888:	06 c1       	rjmp	.+524    	; 0xda96 <mmc_disk_ioctl+0x28a>
    d88a:	40 e0       	ldi	r20, 0x00	; 0
    d88c:	50 e0       	ldi	r21, 0x00	; 0
    d88e:	ba 01       	movw	r22, r20
    d890:	89 e0       	ldi	r24, 0x09	; 9
    d892:	d5 dd       	rcall	.-1110   	; 0xd43e <send_cmd>
    d894:	81 11       	cpse	r24, r1
    d896:	f1 c1       	rjmp	.+994    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    d898:	60 e1       	ldi	r22, 0x10	; 16
    d89a:	70 e0       	ldi	r23, 0x00	; 0
    d89c:	ce 01       	movw	r24, r28
    d89e:	01 96       	adiw	r24, 0x01	; 1
    d8a0:	77 dd       	rcall	.-1298   	; 0xd390 <rcvr_datablock>
    d8a2:	89 2b       	or	r24, r25
    d8a4:	09 f4       	brne	.+2      	; 0xd8a8 <mmc_disk_ioctl+0x9c>
    d8a6:	e9 c1       	rjmp	.+978    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    d8a8:	99 81       	ldd	r25, Y+1	; 0x01
    d8aa:	92 95       	swap	r25
    d8ac:	96 95       	lsr	r25
    d8ae:	96 95       	lsr	r25
    d8b0:	93 70       	andi	r25, 0x03	; 3
    d8b2:	29 85       	ldd	r18, Y+9	; 0x09
    d8b4:	4a 85       	ldd	r20, Y+10	; 0x0a
    d8b6:	88 85       	ldd	r24, Y+8	; 0x08
    d8b8:	91 30       	cpi	r25, 0x01	; 1
    d8ba:	d9 f4       	brne	.+54     	; 0xd8f2 <mmc_disk_ioctl+0xe6>
    d8bc:	30 e0       	ldi	r19, 0x00	; 0
    d8be:	32 2f       	mov	r19, r18
    d8c0:	22 27       	eor	r18, r18
    d8c2:	24 0f       	add	r18, r20
    d8c4:	31 1d       	adc	r19, r1
    d8c6:	8f 73       	andi	r24, 0x3F	; 63
    d8c8:	90 e0       	ldi	r25, 0x00	; 0
    d8ca:	a0 e0       	ldi	r26, 0x00	; 0
    d8cc:	b0 e0       	ldi	r27, 0x00	; 0
    d8ce:	dc 01       	movw	r26, r24
    d8d0:	99 27       	eor	r25, r25
    d8d2:	88 27       	eor	r24, r24
    d8d4:	01 96       	adiw	r24, 0x01	; 1
    d8d6:	a1 1d       	adc	r26, r1
    d8d8:	b1 1d       	adc	r27, r1
    d8da:	82 0f       	add	r24, r18
    d8dc:	93 1f       	adc	r25, r19
    d8de:	a1 1d       	adc	r26, r1
    d8e0:	b1 1d       	adc	r27, r1
    d8e2:	fa e0       	ldi	r31, 0x0A	; 10
    d8e4:	88 0f       	add	r24, r24
    d8e6:	99 1f       	adc	r25, r25
    d8e8:	aa 1f       	adc	r26, r26
    d8ea:	bb 1f       	adc	r27, r27
    d8ec:	fa 95       	dec	r31
    d8ee:	d1 f7       	brne	.-12     	; 0xd8e4 <mmc_disk_ioctl+0xd8>
    d8f0:	9b c0       	rjmp	.+310    	; 0xda28 <mmc_disk_ioctl+0x21c>
    d8f2:	22 95       	swap	r18
    d8f4:	26 95       	lsr	r18
    d8f6:	26 95       	lsr	r18
    d8f8:	23 70       	andi	r18, 0x03	; 3
    d8fa:	f4 e0       	ldi	r31, 0x04	; 4
    d8fc:	8f 9f       	mul	r24, r31
    d8fe:	c0 01       	movw	r24, r0
    d900:	11 24       	eor	r1, r1
    d902:	82 0f       	add	r24, r18
    d904:	91 1d       	adc	r25, r1
    d906:	01 96       	adiw	r24, 0x01	; 1
    d908:	2f 81       	ldd	r18, Y+7	; 0x07
    d90a:	23 70       	andi	r18, 0x03	; 3
    d90c:	30 e0       	ldi	r19, 0x00	; 0
    d90e:	32 2f       	mov	r19, r18
    d910:	22 27       	eor	r18, r18
    d912:	33 0f       	add	r19, r19
    d914:	33 0f       	add	r19, r19
    d916:	82 0f       	add	r24, r18
    d918:	93 1f       	adc	r25, r19
    d91a:	a0 e0       	ldi	r26, 0x00	; 0
    d91c:	b0 e0       	ldi	r27, 0x00	; 0
    d91e:	2e 81       	ldd	r18, Y+6	; 0x06
    d920:	32 2f       	mov	r19, r18
    d922:	3f 70       	andi	r19, 0x0F	; 15
    d924:	2b 85       	ldd	r18, Y+11	; 0x0b
    d926:	22 1f       	adc	r18, r18
    d928:	22 27       	eor	r18, r18
    d92a:	22 1f       	adc	r18, r18
    d92c:	23 0f       	add	r18, r19
    d92e:	43 70       	andi	r20, 0x03	; 3
    d930:	44 0f       	add	r20, r20
    d932:	42 0f       	add	r20, r18
    d934:	47 50       	subi	r20, 0x07	; 7
    d936:	04 c0       	rjmp	.+8      	; 0xd940 <mmc_disk_ioctl+0x134>
    d938:	88 0f       	add	r24, r24
    d93a:	99 1f       	adc	r25, r25
    d93c:	aa 1f       	adc	r26, r26
    d93e:	bb 1f       	adc	r27, r27
    d940:	4a 95       	dec	r20
    d942:	d2 f7       	brpl	.-12     	; 0xd938 <mmc_disk_ioctl+0x12c>
    d944:	71 c0       	rjmp	.+226    	; 0xda28 <mmc_disk_ioctl+0x21c>
    d946:	80 91 0c 18 	lds	r24, 0x180C	; 0x80180c <CardType>
    d94a:	40 e0       	ldi	r20, 0x00	; 0
    d94c:	50 e0       	ldi	r21, 0x00	; 0
    d94e:	ba 01       	movw	r22, r20
    d950:	82 ff       	sbrs	r24, 2
    d952:	24 c0       	rjmp	.+72     	; 0xd99c <mmc_disk_ioctl+0x190>
    d954:	8d e8       	ldi	r24, 0x8D	; 141
    d956:	73 dd       	rcall	.-1306   	; 0xd43e <send_cmd>
    d958:	81 11       	cpse	r24, r1
    d95a:	8f c1       	rjmp	.+798    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    d95c:	8f ef       	ldi	r24, 0xFF	; 255
    d95e:	10 dd       	rcall	.-1504   	; 0xd380 <xchg_spi>
    d960:	60 e1       	ldi	r22, 0x10	; 16
    d962:	70 e0       	ldi	r23, 0x00	; 0
    d964:	ce 01       	movw	r24, r28
    d966:	01 96       	adiw	r24, 0x01	; 1
    d968:	13 dd       	rcall	.-1498   	; 0xd390 <rcvr_datablock>
    d96a:	89 2b       	or	r24, r25
    d96c:	09 f4       	brne	.+2      	; 0xd970 <mmc_disk_ioctl+0x164>
    d96e:	85 c1       	rjmp	.+778    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    d970:	50 e3       	ldi	r21, 0x30	; 48
    d972:	f5 2e       	mov	r15, r21
    d974:	8f ef       	ldi	r24, 0xFF	; 255
    d976:	04 dd       	rcall	.-1528   	; 0xd380 <xchg_spi>
    d978:	fa 94       	dec	r15
    d97a:	f1 10       	cpse	r15, r1
    d97c:	fb cf       	rjmp	.-10     	; 0xd974 <mmc_disk_ioctl+0x168>
    d97e:	2b 85       	ldd	r18, Y+11	; 0x0b
    d980:	22 95       	swap	r18
    d982:	2f 70       	andi	r18, 0x0F	; 15
    d984:	80 e1       	ldi	r24, 0x10	; 16
    d986:	90 e0       	ldi	r25, 0x00	; 0
    d988:	a0 e0       	ldi	r26, 0x00	; 0
    d98a:	b0 e0       	ldi	r27, 0x00	; 0
    d98c:	04 c0       	rjmp	.+8      	; 0xd996 <mmc_disk_ioctl+0x18a>
    d98e:	88 0f       	add	r24, r24
    d990:	99 1f       	adc	r25, r25
    d992:	aa 1f       	adc	r26, r26
    d994:	bb 1f       	adc	r27, r27
    d996:	2a 95       	dec	r18
    d998:	d2 f7       	brpl	.-12     	; 0xd98e <mmc_disk_ioctl+0x182>
    d99a:	46 c0       	rjmp	.+140    	; 0xda28 <mmc_disk_ioctl+0x21c>
    d99c:	89 e0       	ldi	r24, 0x09	; 9
    d99e:	4f dd       	rcall	.-1378   	; 0xd43e <send_cmd>
    d9a0:	81 11       	cpse	r24, r1
    d9a2:	6b c1       	rjmp	.+726    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    d9a4:	60 e1       	ldi	r22, 0x10	; 16
    d9a6:	70 e0       	ldi	r23, 0x00	; 0
    d9a8:	ce 01       	movw	r24, r28
    d9aa:	01 96       	adiw	r24, 0x01	; 1
    d9ac:	f1 dc       	rcall	.-1566   	; 0xd390 <rcvr_datablock>
    d9ae:	89 2b       	or	r24, r25
    d9b0:	09 f4       	brne	.+2      	; 0xd9b4 <mmc_disk_ioctl+0x1a8>
    d9b2:	63 c1       	rjmp	.+710    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    d9b4:	90 91 0c 18 	lds	r25, 0x180C	; 0x80180c <CardType>
    d9b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    d9ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    d9bc:	91 ff       	sbrs	r25, 1
    d9be:	16 c0       	rjmp	.+44     	; 0xd9ec <mmc_disk_ioctl+0x1e0>
    d9c0:	2f 73       	andi	r18, 0x3F	; 63
    d9c2:	88 1f       	adc	r24, r24
    d9c4:	88 27       	eor	r24, r24
    d9c6:	88 1f       	adc	r24, r24
    d9c8:	90 e0       	ldi	r25, 0x00	; 0
    d9ca:	01 96       	adiw	r24, 0x01	; 1
    d9cc:	82 0f       	add	r24, r18
    d9ce:	91 1d       	adc	r25, r1
    d9d0:	82 0f       	add	r24, r18
    d9d2:	91 1d       	adc	r25, r1
    d9d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    d9d6:	22 95       	swap	r18
    d9d8:	26 95       	lsr	r18
    d9da:	26 95       	lsr	r18
    d9dc:	23 70       	andi	r18, 0x03	; 3
    d9de:	21 50       	subi	r18, 0x01	; 1
    d9e0:	02 c0       	rjmp	.+4      	; 0xd9e6 <mmc_disk_ioctl+0x1da>
    d9e2:	88 0f       	add	r24, r24
    d9e4:	99 1f       	adc	r25, r25
    d9e6:	2a 95       	dec	r18
    d9e8:	e2 f7       	brpl	.-8      	; 0xd9e2 <mmc_disk_ioctl+0x1d6>
    d9ea:	1c c0       	rjmp	.+56     	; 0xda24 <mmc_disk_ioctl+0x218>
    d9ec:	38 2f       	mov	r19, r24
    d9ee:	33 70       	andi	r19, 0x03	; 3
    d9f0:	82 95       	swap	r24
    d9f2:	86 95       	lsr	r24
    d9f4:	87 70       	andi	r24, 0x07	; 7
    d9f6:	90 e0       	ldi	r25, 0x00	; 0
    d9f8:	f8 e0       	ldi	r31, 0x08	; 8
    d9fa:	3f 9f       	mul	r19, r31
    d9fc:	80 0d       	add	r24, r0
    d9fe:	91 1d       	adc	r25, r1
    da00:	11 24       	eor	r1, r1
    da02:	01 96       	adiw	r24, 0x01	; 1
    da04:	2c 77       	andi	r18, 0x7C	; 124
    da06:	30 e0       	ldi	r19, 0x00	; 0
    da08:	35 95       	asr	r19
    da0a:	27 95       	ror	r18
    da0c:	35 95       	asr	r19
    da0e:	27 95       	ror	r18
    da10:	2f 5f       	subi	r18, 0xFF	; 255
    da12:	3f 4f       	sbci	r19, 0xFF	; 255
    da14:	82 9f       	mul	r24, r18
    da16:	a0 01       	movw	r20, r0
    da18:	83 9f       	mul	r24, r19
    da1a:	50 0d       	add	r21, r0
    da1c:	92 9f       	mul	r25, r18
    da1e:	50 0d       	add	r21, r0
    da20:	11 24       	eor	r1, r1
    da22:	ca 01       	movw	r24, r20
    da24:	a0 e0       	ldi	r26, 0x00	; 0
    da26:	b0 e0       	ldi	r27, 0x00	; 0
    da28:	f8 01       	movw	r30, r16
    da2a:	80 83       	st	Z, r24
    da2c:	91 83       	std	Z+1, r25	; 0x01
    da2e:	a2 83       	std	Z+2, r26	; 0x02
    da30:	b3 83       	std	Z+3, r27	; 0x03
    da32:	00 e0       	ldi	r16, 0x00	; 0
    da34:	23 c1       	rjmp	.+582    	; 0xdc7c <mmc_disk_ioctl+0x470>
    da36:	40 e0       	ldi	r20, 0x00	; 0
    da38:	50 e0       	ldi	r21, 0x00	; 0
    da3a:	ba 01       	movw	r22, r20
    da3c:	89 e0       	ldi	r24, 0x09	; 9
    da3e:	04 c0       	rjmp	.+8      	; 0xda48 <mmc_disk_ioctl+0x23c>
    da40:	40 e0       	ldi	r20, 0x00	; 0
    da42:	50 e0       	ldi	r21, 0x00	; 0
    da44:	ba 01       	movw	r22, r20
    da46:	8a e0       	ldi	r24, 0x0A	; 10
    da48:	fa dc       	rcall	.-1548   	; 0xd43e <send_cmd>
    da4a:	81 11       	cpse	r24, r1
    da4c:	16 c1       	rjmp	.+556    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    da4e:	60 e1       	ldi	r22, 0x10	; 16
    da50:	70 e0       	ldi	r23, 0x00	; 0
    da52:	1f c0       	rjmp	.+62     	; 0xda92 <mmc_disk_ioctl+0x286>
    da54:	40 e0       	ldi	r20, 0x00	; 0
    da56:	50 e0       	ldi	r21, 0x00	; 0
    da58:	ba 01       	movw	r22, r20
    da5a:	8a e3       	ldi	r24, 0x3A	; 58
    da5c:	f0 dc       	rcall	.-1568   	; 0xd43e <send_cmd>
    da5e:	81 11       	cpse	r24, r1
    da60:	0c c1       	rjmp	.+536    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    da62:	78 01       	movw	r14, r16
    da64:	f4 e0       	ldi	r31, 0x04	; 4
    da66:	ef 0e       	add	r14, r31
    da68:	f1 1c       	adc	r15, r1
    da6a:	8f ef       	ldi	r24, 0xFF	; 255
    da6c:	83 d1       	rcall	.+774    	; 0xdd74 <mmc_spi_TXRX>
    da6e:	f8 01       	movw	r30, r16
    da70:	81 93       	st	Z+, r24
    da72:	8f 01       	movw	r16, r30
    da74:	ee 15       	cp	r30, r14
    da76:	ff 05       	cpc	r31, r15
    da78:	c1 f7       	brne	.-16     	; 0xda6a <mmc_disk_ioctl+0x25e>
    da7a:	db cf       	rjmp	.-74     	; 0xda32 <mmc_disk_ioctl+0x226>
    da7c:	40 e0       	ldi	r20, 0x00	; 0
    da7e:	50 e0       	ldi	r21, 0x00	; 0
    da80:	ba 01       	movw	r22, r20
    da82:	8d e8       	ldi	r24, 0x8D	; 141
    da84:	dc dc       	rcall	.-1608   	; 0xd43e <send_cmd>
    da86:	81 11       	cpse	r24, r1
    da88:	f8 c0       	rjmp	.+496    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    da8a:	8f ef       	ldi	r24, 0xFF	; 255
    da8c:	79 dc       	rcall	.-1806   	; 0xd380 <xchg_spi>
    da8e:	60 e4       	ldi	r22, 0x40	; 64
    da90:	70 e0       	ldi	r23, 0x00	; 0
    da92:	c8 01       	movw	r24, r16
    da94:	7d dc       	rcall	.-1798   	; 0xd390 <rcvr_datablock>
    da96:	01 e0       	ldi	r16, 0x01	; 1
    da98:	10 e0       	ldi	r17, 0x00	; 0
    da9a:	89 2b       	or	r24, r25
    da9c:	09 f4       	brne	.+2      	; 0xdaa0 <mmc_disk_ioctl+0x294>
    da9e:	ef c0       	rjmp	.+478    	; 0xdc7e <mmc_disk_ioctl+0x472>
    daa0:	ea c0       	rjmp	.+468    	; 0xdc76 <mmc_disk_ioctl+0x46a>
    daa2:	97 d1       	rcall	.+814    	; 0xddd2 <mmc_power_off>
    daa4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    daa8:	81 60       	ori	r24, 0x01	; 1
    daaa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    daae:	00 e0       	ldi	r16, 0x00	; 0
    dab0:	eb c0       	rjmp	.+470    	; 0xdc88 <mmc_disk_ioctl+0x47c>
    dab2:	fb 01       	movw	r30, r22
    dab4:	43 81       	ldd	r20, Z+3	; 0x03
    dab6:	54 81       	ldd	r21, Z+4	; 0x04
    dab8:	65 81       	ldd	r22, Z+5	; 0x05
    daba:	76 81       	ldd	r23, Z+6	; 0x06
    dabc:	39 e0       	ldi	r19, 0x09	; 9
    dabe:	44 0f       	add	r20, r20
    dac0:	55 1f       	adc	r21, r21
    dac2:	66 1f       	adc	r22, r22
    dac4:	77 1f       	adc	r23, r23
    dac6:	3a 95       	dec	r19
    dac8:	d1 f7       	brne	.-12     	; 0xdabe <mmc_disk_ioctl+0x2b2>
    daca:	70 68       	ori	r23, 0x80	; 128
    dacc:	80 81       	ld	r24, Z
    dace:	90 e0       	ldi	r25, 0x00	; 0
    dad0:	a0 e0       	ldi	r26, 0x00	; 0
    dad2:	b0 e0       	ldi	r27, 0x00	; 0
    dad4:	2c e1       	ldi	r18, 0x1C	; 28
    dad6:	88 0f       	add	r24, r24
    dad8:	99 1f       	adc	r25, r25
    dada:	aa 1f       	adc	r26, r26
    dadc:	bb 1f       	adc	r27, r27
    dade:	2a 95       	dec	r18
    dae0:	d1 f7       	brne	.-12     	; 0xdad6 <mmc_disk_ioctl+0x2ca>
    dae2:	48 2b       	or	r20, r24
    dae4:	59 2b       	or	r21, r25
    dae6:	6a 2b       	or	r22, r26
    dae8:	7b 2b       	or	r23, r27
    daea:	81 81       	ldd	r24, Z+1	; 0x01
    daec:	92 81       	ldd	r25, Z+2	; 0x02
    daee:	01 97       	sbiw	r24, 0x01	; 1
    daf0:	91 70       	andi	r25, 0x01	; 1
    daf2:	a0 e0       	ldi	r26, 0x00	; 0
    daf4:	b0 e0       	ldi	r27, 0x00	; 0
    daf6:	48 2b       	or	r20, r24
    daf8:	59 2b       	or	r21, r25
    dafa:	6a 2b       	or	r22, r26
    dafc:	7b 2b       	or	r23, r27
    dafe:	80 e3       	ldi	r24, 0x30	; 48
    db00:	9e dc       	rcall	.-1732   	; 0xd43e <send_cmd>
    db02:	81 11       	cpse	r24, r1
    db04:	ba c0       	rjmp	.+372    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    db06:	88 ee       	ldi	r24, 0xE8	; 232
    db08:	93 e0       	ldi	r25, 0x03	; 3
    db0a:	37 d1       	rcall	.+622    	; 0xdd7a <mmc_set_ms_timeout>
    db0c:	8f ef       	ldi	r24, 0xFF	; 255
    db0e:	32 d1       	rcall	.+612    	; 0xdd74 <mmc_spi_TXRX>
    db10:	8f 3f       	cpi	r24, 0xFF	; 255
    db12:	21 f4       	brne	.+8      	; 0xdb1c <mmc_disk_ioctl+0x310>
    db14:	39 d1       	rcall	.+626    	; 0xdd88 <mmc_test_timeout>
    db16:	89 2b       	or	r24, r25
    db18:	c9 f3       	breq	.-14     	; 0xdb0c <mmc_disk_ioctl+0x300>
    db1a:	af c0       	rjmp	.+350    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    db1c:	8e 3f       	cpi	r24, 0xFE	; 254
    db1e:	09 f0       	breq	.+2      	; 0xdb22 <mmc_disk_ioctl+0x316>
    db20:	ac c0       	rjmp	.+344    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    db22:	f8 01       	movw	r30, r16
    db24:	e7 80       	ldd	r14, Z+7	; 0x07
    db26:	f0 84       	ldd	r15, Z+8	; 0x08
    db28:	c1 80       	ldd	r12, Z+1	; 0x01
    db2a:	d2 80       	ldd	r13, Z+2	; 0x02
    db2c:	ce 0c       	add	r12, r14
    db2e:	df 1c       	adc	r13, r15
    db30:	ce 14       	cp	r12, r14
    db32:	df 04       	cpc	r13, r15
    db34:	31 f0       	breq	.+12     	; 0xdb42 <mmc_disk_ioctl+0x336>
    db36:	8f ef       	ldi	r24, 0xFF	; 255
    db38:	1d d1       	rcall	.+570    	; 0xdd74 <mmc_spi_TXRX>
    db3a:	f7 01       	movw	r30, r14
    db3c:	81 93       	st	Z+, r24
    db3e:	7f 01       	movw	r14, r30
    db40:	f7 cf       	rjmp	.-18     	; 0xdb30 <mmc_disk_ioctl+0x324>
    db42:	f8 01       	movw	r30, r16
    db44:	81 81       	ldd	r24, Z+1	; 0x01
    db46:	92 81       	ldd	r25, Z+2	; 0x02
    db48:	02 e0       	ldi	r16, 0x02	; 2
    db4a:	12 e0       	ldi	r17, 0x02	; 2
    db4c:	08 1b       	sub	r16, r24
    db4e:	19 0b       	sbc	r17, r25
    db50:	01 15       	cp	r16, r1
    db52:	11 05       	cpc	r17, r1
    db54:	09 f4       	brne	.+2      	; 0xdb58 <mmc_disk_ioctl+0x34c>
    db56:	6d cf       	rjmp	.-294    	; 0xda32 <mmc_disk_ioctl+0x226>
    db58:	8f ef       	ldi	r24, 0xFF	; 255
    db5a:	12 dc       	rcall	.-2012   	; 0xd380 <xchg_spi>
    db5c:	01 50       	subi	r16, 0x01	; 1
    db5e:	11 09       	sbc	r17, r1
    db60:	f7 cf       	rjmp	.-18     	; 0xdb50 <mmc_disk_ioctl+0x344>
    db62:	fb 01       	movw	r30, r22
    db64:	43 81       	ldd	r20, Z+3	; 0x03
    db66:	54 81       	ldd	r21, Z+4	; 0x04
    db68:	65 81       	ldd	r22, Z+5	; 0x05
    db6a:	76 81       	ldd	r23, Z+6	; 0x06
    db6c:	39 e0       	ldi	r19, 0x09	; 9
    db6e:	44 0f       	add	r20, r20
    db70:	55 1f       	adc	r21, r21
    db72:	66 1f       	adc	r22, r22
    db74:	77 1f       	adc	r23, r23
    db76:	3a 95       	dec	r19
    db78:	d1 f7       	brne	.-12     	; 0xdb6e <mmc_disk_ioctl+0x362>
    db7a:	70 68       	ori	r23, 0x80	; 128
    db7c:	80 81       	ld	r24, Z
    db7e:	90 e0       	ldi	r25, 0x00	; 0
    db80:	a0 e0       	ldi	r26, 0x00	; 0
    db82:	b0 e0       	ldi	r27, 0x00	; 0
    db84:	2c e1       	ldi	r18, 0x1C	; 28
    db86:	88 0f       	add	r24, r24
    db88:	99 1f       	adc	r25, r25
    db8a:	aa 1f       	adc	r26, r26
    db8c:	bb 1f       	adc	r27, r27
    db8e:	2a 95       	dec	r18
    db90:	d1 f7       	brne	.-12     	; 0xdb86 <mmc_disk_ioctl+0x37a>
    db92:	48 2b       	or	r20, r24
    db94:	59 2b       	or	r21, r25
    db96:	6a 2b       	or	r22, r26
    db98:	7b 2b       	or	r23, r27
    db9a:	81 81       	ldd	r24, Z+1	; 0x01
    db9c:	92 81       	ldd	r25, Z+2	; 0x02
    db9e:	01 97       	sbiw	r24, 0x01	; 1
    dba0:	91 70       	andi	r25, 0x01	; 1
    dba2:	a0 e0       	ldi	r26, 0x00	; 0
    dba4:	b0 e0       	ldi	r27, 0x00	; 0
    dba6:	48 2b       	or	r20, r24
    dba8:	59 2b       	or	r21, r25
    dbaa:	6a 2b       	or	r22, r26
    dbac:	7b 2b       	or	r23, r27
    dbae:	81 e3       	ldi	r24, 0x31	; 49
    dbb0:	46 dc       	rcall	.-1908   	; 0xd43e <send_cmd>
    dbb2:	81 11       	cpse	r24, r1
    dbb4:	62 c0       	rjmp	.+196    	; 0xdc7a <mmc_disk_ioctl+0x46e>
    dbb6:	8f ef       	ldi	r24, 0xFF	; 255
    dbb8:	e3 db       	rcall	.-2106   	; 0xd380 <xchg_spi>
    dbba:	8e ef       	ldi	r24, 0xFE	; 254
    dbbc:	e1 db       	rcall	.-2110   	; 0xd380 <xchg_spi>
    dbbe:	f8 01       	movw	r30, r16
    dbc0:	e7 80       	ldd	r14, Z+7	; 0x07
    dbc2:	f0 84       	ldd	r15, Z+8	; 0x08
    dbc4:	c1 80       	ldd	r12, Z+1	; 0x01
    dbc6:	d2 80       	ldd	r13, Z+2	; 0x02
    dbc8:	ce 0c       	add	r12, r14
    dbca:	df 1c       	adc	r13, r15
    dbcc:	ec 14       	cp	r14, r12
    dbce:	fd 04       	cpc	r15, r13
    dbd0:	29 f0       	breq	.+10     	; 0xdbdc <mmc_disk_ioctl+0x3d0>
    dbd2:	f7 01       	movw	r30, r14
    dbd4:	81 91       	ld	r24, Z+
    dbd6:	7f 01       	movw	r14, r30
    dbd8:	d3 db       	rcall	.-2138   	; 0xd380 <xchg_spi>
    dbda:	f8 cf       	rjmp	.-16     	; 0xdbcc <mmc_disk_ioctl+0x3c0>
    dbdc:	f8 01       	movw	r30, r16
    dbde:	81 81       	ldd	r24, Z+1	; 0x01
    dbe0:	92 81       	ldd	r25, Z+2	; 0x02
    dbe2:	02 e0       	ldi	r16, 0x02	; 2
    dbe4:	12 e0       	ldi	r17, 0x02	; 2
    dbe6:	08 1b       	sub	r16, r24
    dbe8:	19 0b       	sbc	r17, r25
    dbea:	8f ef       	ldi	r24, 0xFF	; 255
    dbec:	01 15       	cp	r16, r1
    dbee:	11 05       	cpc	r17, r1
    dbf0:	09 f4       	brne	.+2      	; 0xdbf4 <mmc_disk_ioctl+0x3e8>
    dbf2:	3b c0       	rjmp	.+118    	; 0xdc6a <mmc_disk_ioctl+0x45e>
    dbf4:	c5 db       	rcall	.-2166   	; 0xd380 <xchg_spi>
    dbf6:	01 50       	subi	r16, 0x01	; 1
    dbf8:	11 09       	sbc	r17, r1
    dbfa:	f7 cf       	rjmp	.-18     	; 0xdbea <mmc_disk_ioctl+0x3de>
    dbfc:	fb 01       	movw	r30, r22
    dbfe:	43 81       	ldd	r20, Z+3	; 0x03
    dc00:	54 81       	ldd	r21, Z+4	; 0x04
    dc02:	65 81       	ldd	r22, Z+5	; 0x05
    dc04:	76 81       	ldd	r23, Z+6	; 0x06
    dc06:	89 e0       	ldi	r24, 0x09	; 9
    dc08:	44 0f       	add	r20, r20
    dc0a:	55 1f       	adc	r21, r21
    dc0c:	66 1f       	adc	r22, r22
    dc0e:	77 1f       	adc	r23, r23
    dc10:	8a 95       	dec	r24
    dc12:	d1 f7       	brne	.-12     	; 0xdc08 <mmc_disk_ioctl+0x3fc>
    dc14:	74 68       	ori	r23, 0x84	; 132
    dc16:	80 81       	ld	r24, Z
    dc18:	90 e0       	ldi	r25, 0x00	; 0
    dc1a:	a0 e0       	ldi	r26, 0x00	; 0
    dc1c:	b0 e0       	ldi	r27, 0x00	; 0
    dc1e:	2c e1       	ldi	r18, 0x1C	; 28
    dc20:	88 0f       	add	r24, r24
    dc22:	99 1f       	adc	r25, r25
    dc24:	aa 1f       	adc	r26, r26
    dc26:	bb 1f       	adc	r27, r27
    dc28:	2a 95       	dec	r18
    dc2a:	d1 f7       	brne	.-12     	; 0xdc20 <mmc_disk_ioctl+0x414>
    dc2c:	48 2b       	or	r20, r24
    dc2e:	59 2b       	or	r21, r25
    dc30:	6a 2b       	or	r22, r26
    dc32:	7b 2b       	or	r23, r27
    dc34:	82 81       	ldd	r24, Z+2	; 0x02
    dc36:	90 e0       	ldi	r25, 0x00	; 0
    dc38:	a0 e0       	ldi	r26, 0x00	; 0
    dc3a:	b0 e0       	ldi	r27, 0x00	; 0
    dc3c:	48 2b       	or	r20, r24
    dc3e:	59 2b       	or	r21, r25
    dc40:	6a 2b       	or	r22, r26
    dc42:	7b 2b       	or	r23, r27
    dc44:	81 e3       	ldi	r24, 0x31	; 49
    dc46:	fb db       	rcall	.-2058   	; 0xd43e <send_cmd>
    dc48:	81 11       	cpse	r24, r1
    dc4a:	17 c0       	rjmp	.+46     	; 0xdc7a <mmc_disk_ioctl+0x46e>
    dc4c:	8f ef       	ldi	r24, 0xFF	; 255
    dc4e:	98 db       	rcall	.-2256   	; 0xd380 <xchg_spi>
    dc50:	8e ef       	ldi	r24, 0xFE	; 254
    dc52:	96 db       	rcall	.-2260   	; 0xd380 <xchg_spi>
    dc54:	f8 01       	movw	r30, r16
    dc56:	81 81       	ldd	r24, Z+1	; 0x01
    dc58:	93 db       	rcall	.-2266   	; 0xd380 <xchg_spi>
    dc5a:	01 e0       	ldi	r16, 0x01	; 1
    dc5c:	12 e0       	ldi	r17, 0x02	; 2
    dc5e:	8f ef       	ldi	r24, 0xFF	; 255
    dc60:	8f db       	rcall	.-2274   	; 0xd380 <xchg_spi>
    dc62:	01 50       	subi	r16, 0x01	; 1
    dc64:	11 09       	sbc	r17, r1
    dc66:	d9 f7       	brne	.-10     	; 0xdc5e <mmc_disk_ioctl+0x452>
    dc68:	8f ef       	ldi	r24, 0xFF	; 255
    dc6a:	84 d0       	rcall	.+264    	; 0xdd74 <mmc_spi_TXRX>
    dc6c:	8f 71       	andi	r24, 0x1F	; 31
    dc6e:	01 e0       	ldi	r16, 0x01	; 1
    dc70:	10 e0       	ldi	r17, 0x00	; 0
    dc72:	85 30       	cpi	r24, 0x05	; 5
    dc74:	21 f4       	brne	.+8      	; 0xdc7e <mmc_disk_ioctl+0x472>
    dc76:	00 e0       	ldi	r16, 0x00	; 0
    dc78:	02 c0       	rjmp	.+4      	; 0xdc7e <mmc_disk_ioctl+0x472>
    dc7a:	01 e0       	ldi	r16, 0x01	; 1
    dc7c:	10 e0       	ldi	r17, 0x00	; 0
    dc7e:	82 db       	rcall	.-2300   	; 0xd384 <deselect>
    dc80:	04 c0       	rjmp	.+8      	; 0xdc8a <mmc_disk_ioctl+0x47e>
    dc82:	03 e0       	ldi	r16, 0x03	; 3
    dc84:	01 c0       	rjmp	.+2      	; 0xdc88 <mmc_disk_ioctl+0x47c>
    dc86:	04 e0       	ldi	r16, 0x04	; 4
    dc88:	10 e0       	ldi	r17, 0x00	; 0
    dc8a:	c8 01       	movw	r24, r16
    dc8c:	60 96       	adiw	r28, 0x10	; 16
    dc8e:	e8 e0       	ldi	r30, 0x08	; 8
    dc90:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000dc94 <mmc_disk_timerproc>:
    dc94:	cf 93       	push	r28
    dc96:	80 91 0e 18 	lds	r24, 0x180E	; 0x80180e <Timer1>
    dc9a:	88 23       	and	r24, r24
    dc9c:	19 f0       	breq	.+6      	; 0xdca4 <mmc_disk_timerproc+0x10>
    dc9e:	81 50       	subi	r24, 0x01	; 1
    dca0:	80 93 0e 18 	sts	0x180E, r24	; 0x80180e <Timer1>
    dca4:	80 91 0d 18 	lds	r24, 0x180D	; 0x80180d <Timer2>
    dca8:	88 23       	and	r24, r24
    dcaa:	19 f0       	breq	.+6      	; 0xdcb2 <mmc_disk_timerproc+0x1e>
    dcac:	81 50       	subi	r24, 0x01	; 1
    dcae:	80 93 0d 18 	sts	0x180D, r24	; 0x80180d <Timer2>
    dcb2:	c0 91 42 01 	lds	r28, 0x0142	; 0x800142 <Stat>
    dcb6:	8e d0       	rcall	.+284    	; 0xddd4 <mmc_ins_status>
    dcb8:	89 2b       	or	r24, r25
    dcba:	11 f0       	breq	.+4      	; 0xdcc0 <mmc_disk_timerproc+0x2c>
    dcbc:	cd 7f       	andi	r28, 0xFD	; 253
    dcbe:	04 c0       	rjmp	.+8      	; 0xdcc8 <mmc_disk_timerproc+0x34>
    dcc0:	c3 60       	ori	r28, 0x03	; 3
    dcc2:	81 e0       	ldi	r24, 0x01	; 1
    dcc4:	0e 94 23 27 	call	0x4e46	; 0x4e46 <set_error>
    dcc8:	c0 93 42 01 	sts	0x0142, r28	; 0x800142 <Stat>
    dccc:	cf 91       	pop	r28
    dcce:	08 95       	ret

0000dcd0 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dcd0:	00 d0       	rcall	.+0      	; 0xdcd2 <mmc_install_timer+0x2>
    dcd2:	1f 92       	push	r1
    dcd4:	10 92 18 18 	sts	0x1818, r1	; 0x801818 <_mmc_timeout+0x1>
    dcd8:	10 92 17 18 	sts	0x1817, r1	; 0x801817 <_mmc_timeout>
    dcdc:	61 e0       	ldi	r22, 0x01	; 1
    dcde:	70 e0       	ldi	r23, 0x00	; 0
    dce0:	87 ef       	ldi	r24, 0xF7	; 247
    dce2:	9e e6       	ldi	r25, 0x6E	; 110
    dce4:	0e 94 31 34 	call	0x6862	; 0x6862 <set_timers>
    dce8:	01 96       	adiw	r24, 0x01	; 1
    dcea:	51 f4       	brne	.+20     	; 0xdd00 <mmc_install_timer+0x30>
    dcec:	8e ee       	ldi	r24, 0xEE	; 238
    dcee:	97 e0       	ldi	r25, 0x07	; 7
    dcf0:	a0 e0       	ldi	r26, 0x00	; 0
    dcf2:	ed b7       	in	r30, 0x3d	; 61
    dcf4:	fe b7       	in	r31, 0x3e	; 62
    dcf6:	81 83       	std	Z+1, r24	; 0x01
    dcf8:	92 83       	std	Z+2, r25	; 0x02
    dcfa:	a3 83       	std	Z+3, r26	; 0x03
    dcfc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    dd00:	0f 90       	pop	r0
    dd02:	0f 90       	pop	r0
    dd04:	0f 90       	pop	r0
    dd06:	08 95       	ret

0000dd08 <mmc_spi_begin>:
    dd08:	60 91 13 18 	lds	r22, 0x1813	; 0x801813 <_mmc_clock>
    dd0c:	70 91 14 18 	lds	r23, 0x1814	; 0x801814 <_mmc_clock+0x1>
    dd10:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <_mmc_clock+0x2>
    dd14:	90 91 16 18 	lds	r25, 0x1816	; 0x801816 <_mmc_clock+0x3>
    dd18:	4b e0       	ldi	r20, 0x0B	; 11
    dd1a:	50 e0       	ldi	r21, 0x00	; 0
    dd1c:	0c 94 ca 26 	jmp	0x4d94	; 0x4d94 <spi_begin>
    dd20:	08 95       	ret

0000dd22 <mmc_spi_end>:
    dd22:	8b e0       	ldi	r24, 0x0B	; 11
    dd24:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <spi_end>
    dd28:	08 95       	ret

0000dd2a <mmc_slow>:
    dd2a:	80 e2       	ldi	r24, 0x20	; 32
    dd2c:	91 ea       	ldi	r25, 0xA1	; 161
    dd2e:	a7 e0       	ldi	r26, 0x07	; 7
    dd30:	b0 e0       	ldi	r27, 0x00	; 0
    dd32:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <_mmc_clock>
    dd36:	90 93 14 18 	sts	0x1814, r25	; 0x801814 <_mmc_clock+0x1>
    dd3a:	a0 93 15 18 	sts	0x1815, r26	; 0x801815 <_mmc_clock+0x2>
    dd3e:	b0 93 16 18 	sts	0x1816, r27	; 0x801816 <_mmc_clock+0x3>
    dd42:	08 95       	ret

0000dd44 <mmc_spi_init>:
    dd44:	8b e0       	ldi	r24, 0x0B	; 11
    dd46:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <chip_select_init>
    dd4a:	ef cf       	rjmp	.-34     	; 0xdd2a <mmc_slow>
    dd4c:	08 95       	ret

0000dd4e <mmc_fast>:
    dd4e:	80 ea       	ldi	r24, 0xA0	; 160
    dd50:	95 e2       	ldi	r25, 0x25	; 37
    dd52:	a6 e2       	ldi	r26, 0x26	; 38
    dd54:	b0 e0       	ldi	r27, 0x00	; 0
    dd56:	80 93 13 18 	sts	0x1813, r24	; 0x801813 <_mmc_clock>
    dd5a:	90 93 14 18 	sts	0x1814, r25	; 0x801814 <_mmc_clock+0x1>
    dd5e:	a0 93 15 18 	sts	0x1815, r26	; 0x801815 <_mmc_clock+0x2>
    dd62:	b0 93 16 18 	sts	0x1816, r27	; 0x801816 <_mmc_clock+0x3>
    dd66:	08 95       	ret

0000dd68 <mmc_spi_TX_buffer>:
    dd68:	0c 94 96 26 	jmp	0x4d2c	; 0x4d2c <spi_TX_buffer>
    dd6c:	08 95       	ret

0000dd6e <mmc_spi_RX_buffer>:
    dd6e:	0c 94 98 26 	jmp	0x4d30	; 0x4d30 <spi_RX_buffer>
    dd72:	08 95       	ret

0000dd74 <mmc_spi_TXRX>:
    dd74:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <spi_TXRX>
    dd78:	08 95       	ret

0000dd7a <mmc_set_ms_timeout>:
    dd7a:	f8 94       	cli
    dd7c:	90 93 18 18 	sts	0x1818, r25	; 0x801818 <_mmc_timeout+0x1>
    dd80:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <_mmc_timeout>
    dd84:	78 94       	sei
    dd86:	08 95       	ret

0000dd88 <mmc_test_timeout>:
    dd88:	00 d0       	rcall	.+0      	; 0xdd8a <mmc_test_timeout+0x2>
    dd8a:	1f 92       	push	r1
    dd8c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dd90:	81 fd       	sbrc	r24, 1
    dd92:	15 c0       	rjmp	.+42     	; 0xddbe <mmc_test_timeout+0x36>
    dd94:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <_mmc_timeout>
    dd98:	90 91 18 18 	lds	r25, 0x1818	; 0x801818 <_mmc_timeout+0x1>
    dd9c:	89 2b       	or	r24, r25
    dd9e:	91 f4       	brne	.+36     	; 0xddc4 <mmc_test_timeout+0x3c>
    dda0:	81 ee       	ldi	r24, 0xE1	; 225
    dda2:	97 e0       	ldi	r25, 0x07	; 7
    dda4:	a0 e0       	ldi	r26, 0x00	; 0
    dda6:	ed b7       	in	r30, 0x3d	; 61
    dda8:	fe b7       	in	r31, 0x3e	; 62
    ddaa:	81 83       	std	Z+1, r24	; 0x01
    ddac:	92 83       	std	Z+2, r25	; 0x02
    ddae:	a3 83       	std	Z+3, r26	; 0x03
    ddb0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    ddb4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    ddb8:	83 60       	ori	r24, 0x03	; 3
    ddba:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    ddbe:	81 e0       	ldi	r24, 0x01	; 1
    ddc0:	90 e0       	ldi	r25, 0x00	; 0
    ddc2:	02 c0       	rjmp	.+4      	; 0xddc8 <mmc_test_timeout+0x40>
    ddc4:	80 e0       	ldi	r24, 0x00	; 0
    ddc6:	90 e0       	ldi	r25, 0x00	; 0
    ddc8:	0f 90       	pop	r0
    ddca:	0f 90       	pop	r0
    ddcc:	0f 90       	pop	r0
    ddce:	08 95       	ret

0000ddd0 <mmc_power_on>:
    ddd0:	08 95       	ret

0000ddd2 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    ddd2:	08 95       	ret

0000ddd4 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    ddd4:	3f 98       	cbi	0x07, 7	; 7
    ddd6:	86 b1       	in	r24, 0x06	; 6
    ddd8:	08 2e       	mov	r0, r24
    ddda:	00 0c       	add	r0, r0
    dddc:	99 0b       	sbc	r25, r25
    ddde:	80 95       	com	r24
    dde0:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dde2:	89 2f       	mov	r24, r25
    dde4:	88 1f       	adc	r24, r24
    dde6:	88 27       	eor	r24, r24
    dde8:	88 1f       	adc	r24, r24
    ddea:	90 e0       	ldi	r25, 0x00	; 0
    ddec:	08 95       	ret

0000ddee <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    ddee:	80 91 17 18 	lds	r24, 0x1817	; 0x801817 <_mmc_timeout>
    ddf2:	90 91 18 18 	lds	r25, 0x1818	; 0x801818 <_mmc_timeout+0x1>
    ddf6:	00 97       	sbiw	r24, 0x00	; 0
    ddf8:	29 f0       	breq	.+10     	; 0xde04 <mmc_task+0x16>
        _mmc_timeout--;
    ddfa:	01 97       	sbiw	r24, 0x01	; 1
    ddfc:	90 93 18 18 	sts	0x1818, r25	; 0x801818 <_mmc_timeout+0x1>
    de00:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    de04:	80 91 11 18 	lds	r24, 0x1811	; 0x801811 <_mmc_pre>
    de08:	90 91 12 18 	lds	r25, 0x1812	; 0x801812 <_mmc_pre+0x1>
    de0c:	8a 30       	cpi	r24, 0x0A	; 10
    de0e:	91 05       	cpc	r25, r1
    de10:	30 f4       	brcc	.+12     	; 0xde1e <mmc_task+0x30>
    de12:	01 96       	adiw	r24, 0x01	; 1
    de14:	90 93 12 18 	sts	0x1812, r25	; 0x801812 <_mmc_pre+0x1>
    de18:	80 93 11 18 	sts	0x1811, r24	; 0x801811 <_mmc_pre>
    de1c:	08 95       	ret
        return;

    _mmc_pre = 0;
    de1e:	10 92 12 18 	sts	0x1812, r1	; 0x801812 <_mmc_pre+0x1>
    de22:	10 92 11 18 	sts	0x1811, r1	; 0x801811 <_mmc_pre>

	if(!mmc_ins_status())
    de26:	d6 df       	rcall	.-84     	; 0xddd4 <mmc_ins_status>
    de28:	89 2b       	or	r24, r25
		set_error(1);
    de2a:	19 f4       	brne	.+6      	; 0xde32 <mmc_task+0x44>
    de2c:	81 e0       	ldi	r24, 0x01	; 1

    mmc_disk_timerproc();
    de2e:	0e 94 23 27 	call	0x4e46	; 0x4e46 <set_error>
    de32:	30 cf       	rjmp	.-416    	; 0xdc94 <mmc_disk_timerproc>
    de34:	08 95       	ret

0000de36 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    de36:	ab e0       	ldi	r26, 0x0B	; 11
    de38:	b0 e0       	ldi	r27, 0x00	; 0
    de3a:	e1 e2       	ldi	r30, 0x21	; 33
    de3c:	ff e6       	ldi	r31, 0x6F	; 111
    de3e:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
    de42:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    de44:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Stat>
	clear_error();
    de48:	0e 94 28 27 	call	0x4e50	; 0x4e50 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    de4c:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);

    mmc_spi_init();
    de4e:	3f 98       	cbi	0x07, 7	; 7

    if( verbose)
    de50:	79 df       	rcall	.-270    	; 0xdd44 <mmc_spi_init>
    de52:	e1 14       	cp	r14, r1
    de54:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    de56:	51 f0       	breq	.+20     	; 0xde6c <mmc_init+0x36>
    de58:	81 ed       	ldi	r24, 0xD1	; 209
    de5a:	97 e0       	ldi	r25, 0x07	; 7
    de5c:	a0 e0       	ldi	r26, 0x00	; 0
    de5e:	ed b7       	in	r30, 0x3d	; 61
    de60:	fe b7       	in	r31, 0x3e	; 62
    de62:	81 83       	std	Z+1, r24	; 0x01
    de64:	92 83       	std	Z+2, r25	; 0x02
    de66:	a3 83       	std	Z+3, r26	; 0x03
    de68:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    de6c:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <mmc_init_flag>
    de70:	90 91 10 18 	lds	r25, 0x1810	; 0x801810 <mmc_init_flag+0x1>
        mmc_install_timer();

	if(!mmc_ins_status())
    de74:	89 2b       	or	r24, r25
    de76:	09 f4       	brne	.+2      	; 0xde7a <mmc_init+0x44>
    de78:	2b df       	rcall	.-426    	; 0xdcd0 <mmc_install_timer>
    de7a:	ac df       	rcall	.-168    	; 0xddd4 <mmc_ins_status>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    de7c:	89 2b       	or	r24, r25
    de7e:	61 f4       	brne	.+24     	; 0xde98 <mmc_init+0x62>
    de80:	81 eb       	ldi	r24, 0xB1	; 177
    de82:	97 e0       	ldi	r25, 0x07	; 7
    de84:	a0 e0       	ldi	r26, 0x00	; 0
    de86:	ed b7       	in	r30, 0x3d	; 61
    de88:	fe b7       	in	r31, 0x3e	; 62
    de8a:	81 83       	std	Z+1, r24	; 0x01
    de8c:	92 83       	std	Z+2, r25	; 0x02
    de8e:	a3 83       	std	Z+3, r26	; 0x03
		return(RES_NOTRDY);	
    de90:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
	}


    if( verbose)
    de94:	83 e0       	ldi	r24, 0x03	; 3
    de96:	8b c0       	rjmp	.+278    	; 0xdfae <mmc_init+0x178>
    de98:	e1 14       	cp	r14, r1
    {
		printf("MMC Card Inserted\n");
    de9a:	f1 04       	cpc	r15, r1
    de9c:	11 f1       	breq	.+68     	; 0xdee2 <mmc_init+0xac>
    de9e:	8e e9       	ldi	r24, 0x9E	; 158
    dea0:	97 e0       	ldi	r25, 0x07	; 7
    dea2:	a0 e0       	ldi	r26, 0x00	; 0
    dea4:	ed b7       	in	r30, 0x3d	; 61
    dea6:	fe b7       	in	r31, 0x3e	; 62
    dea8:	81 83       	std	Z+1, r24	; 0x01
    deaa:	92 83       	std	Z+2, r25	; 0x02
    deac:	a3 83       	std	Z+3, r26	; 0x03

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    deae:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    deb2:	82 e9       	ldi	r24, 0x92	; 146
    deb4:	97 e0       	ldi	r25, 0x07	; 7
    deb6:	a0 e0       	ldi	r26, 0x00	; 0
    deb8:	ed b7       	in	r30, 0x3d	; 61
    deba:	fe b7       	in	r31, 0x3e	; 62
    debc:	81 83       	std	Z+1, r24	; 0x01
    debe:	92 83       	std	Z+2, r25	; 0x02
    dec0:	a3 83       	std	Z+3, r26	; 0x03
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dec2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    dec6:	85 eb       	ldi	r24, 0xB5	; 181
    dec8:	91 e0       	ldi	r25, 0x01	; 1
    deca:	ed b7       	in	r30, 0x3d	; 61
    decc:	fe b7       	in	r31, 0x3e	; 62
    dece:	95 83       	std	Z+5, r25	; 0x05
    ded0:	84 83       	std	Z+4, r24	; 0x04
    ded2:	81 e8       	ldi	r24, 0x81	; 129
    ded4:	97 e0       	ldi	r25, 0x07	; 7
    ded6:	a0 e0       	ldi	r26, 0x00	; 0
    ded8:	81 83       	std	Z+1, r24	; 0x01
    deda:	92 83       	std	Z+2, r25	; 0x02
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dedc:	a3 83       	std	Z+3, r26	; 0x03
    dede:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    dee2:	80 e0       	ldi	r24, 0x00	; 0

    if( rc != RES_OK  )
    dee4:	1d da       	rcall	.-3014   	; 0xd320 <disk_initialize>
    dee6:	08 2f       	mov	r16, r24
        put_rc(rc);
    dee8:	10 e0       	ldi	r17, 0x00	; 0
    deea:	01 15       	cp	r16, r1
    deec:	11 05       	cpc	r17, r1
    deee:	19 f0       	breq	.+6      	; 0xdef6 <mmc_init+0xc0>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    def0:	c8 01       	movw	r24, r16
    def2:	e4 d0       	rcall	.+456    	; 0xe0bc <put_rc>
    def4:	0e c0       	rjmp	.+28     	; 0xdf12 <mmc_init+0xdc>
    def6:	40 e0       	ldi	r20, 0x00	; 0
    def8:	68 e7       	ldi	r22, 0x78	; 120
    defa:	78 e0       	ldi	r23, 0x08	; 8
    defc:	81 e6       	ldi	r24, 0x61	; 97
    defe:	9a e1       	ldi	r25, 0x1A	; 26

    if( rc != RES_OK || verbose)
    df00:	0e 94 48 59 	call	0xb290	; 0xb290 <f_mount>
    df04:	8c 01       	movw	r16, r24
    df06:	89 2b       	or	r24, r25
        put_rc( rc );
    df08:	21 f4       	brne	.+8      	; 0xdf12 <mmc_init+0xdc>
    df0a:	e1 14       	cp	r14, r1
    df0c:	f1 04       	cpc	r15, r1

    if (verbose )
    df0e:	09 f4       	brne	.+2      	; 0xdf12 <mmc_init+0xdc>
    df10:	40 c0       	rjmp	.+128    	; 0xdf92 <mmc_init+0x15c>
    df12:	c8 01       	movw	r24, r16
    {
        DWORD blksize = 0;
    df14:	d3 d0       	rcall	.+422    	; 0xe0bc <put_rc>
    df16:	e1 14       	cp	r14, r1
    df18:	f1 04       	cpc	r15, r1
    df1a:	d9 f1       	breq	.+118    	; 0xdf92 <mmc_init+0x15c>
        if(rc == RES_OK)
    df1c:	18 86       	std	Y+8, r1	; 0x08
    df1e:	19 86       	std	Y+9, r1	; 0x09
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    df20:	1a 86       	std	Y+10, r1	; 0x0a
    df22:	1b 86       	std	Y+11, r1	; 0x0b
    df24:	01 15       	cp	r16, r1
    df26:	11 05       	cpc	r17, r1
    df28:	51 f5       	brne	.+84     	; 0xdf7e <mmc_init+0x148>
    df2a:	ae 01       	movw	r20, r28
    df2c:	48 5f       	subi	r20, 0xF8	; 248
            if( rc != RES_OK)
    df2e:	5f 4f       	sbci	r21, 0xFF	; 255
    df30:	63 e0       	ldi	r22, 0x03	; 3
            {
                put_rc( rc );
    df32:	80 e0       	ldi	r24, 0x00	; 0
    df34:	1b da       	rcall	.-3018   	; 0xd36c <disk_ioctl>
                printf("MMC Block Size - read failed\n");
    df36:	8c 01       	movw	r16, r24
    df38:	00 97       	sbiw	r24, 0x00	; 0
    df3a:	61 f0       	breq	.+24     	; 0xdf54 <mmc_init+0x11e>
    df3c:	bf d0       	rcall	.+382    	; 0xe0bc <put_rc>
    df3e:	83 e6       	ldi	r24, 0x63	; 99
    df40:	97 e0       	ldi	r25, 0x07	; 7
    df42:	a0 e0       	ldi	r26, 0x00	; 0
    df44:	ed b7       	in	r30, 0x3d	; 61
    df46:	fe b7       	in	r31, 0x3e	; 62
    df48:	81 83       	std	Z+1, r24	; 0x01
    df4a:	92 83       	std	Z+2, r25	; 0x02
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    df4c:	a3 83       	std	Z+3, r26	; 0x03
    df4e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    df52:	15 c0       	rjmp	.+42     	; 0xdf7e <mmc_init+0x148>
    df54:	88 85       	ldd	r24, Y+8	; 0x08
    df56:	99 85       	ldd	r25, Y+9	; 0x09
    df58:	aa 85       	ldd	r26, Y+10	; 0x0a
    df5a:	bb 85       	ldd	r27, Y+11	; 0x0b
    df5c:	ed b7       	in	r30, 0x3d	; 61
    df5e:	fe b7       	in	r31, 0x3e	; 62
    df60:	84 83       	std	Z+4, r24	; 0x04
    df62:	95 83       	std	Z+5, r25	; 0x05
    df64:	a6 83       	std	Z+6, r26	; 0x06
    df66:	b7 83       	std	Z+7, r27	; 0x07
    df68:	8e e4       	ldi	r24, 0x4E	; 78
    df6a:	97 e0       	ldi	r25, 0x07	; 7
    df6c:	a0 e0       	ldi	r26, 0x00	; 0
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    df6e:	81 83       	std	Z+1, r24	; 0x01
    df70:	92 83       	std	Z+2, r25	; 0x02
    df72:	a3 83       	std	Z+3, r26	; 0x03
    df74:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            }
        }
        printf("END MMC INIT\n");
    df78:	88 e7       	ldi	r24, 0x78	; 120
    df7a:	98 e0       	ldi	r25, 0x08	; 8
    df7c:	33 d1       	rcall	.+614    	; 0xe1e4 <fatfs_status>
    df7e:	80 e4       	ldi	r24, 0x40	; 64
    df80:	97 e0       	ldi	r25, 0x07	; 7
    df82:	a0 e0       	ldi	r26, 0x00	; 0
    df84:	ed b7       	in	r30, 0x3d	; 61
    df86:	fe b7       	in	r31, 0x3e	; 62
    df88:	81 83       	std	Z+1, r24	; 0x01
    }
    mmc_init_flag = 1;
    df8a:	92 83       	std	Z+2, r25	; 0x02
    df8c:	a3 83       	std	Z+3, r26	; 0x03
    df8e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    df92:	81 e0       	ldi	r24, 0x01	; 1
    df94:	90 e0       	ldi	r25, 0x00	; 0

	if(rc != RES_OK)
    df96:	90 93 10 18 	sts	0x1810, r25	; 0x801810 <mmc_init_flag+0x1>
    df9a:	80 93 0f 18 	sts	0x180F, r24	; 0x80180f <mmc_init_flag>
		set_error(1);
    df9e:	01 15       	cp	r16, r1
    dfa0:	11 05       	cpc	r17, r1
    dfa2:	21 f0       	breq	.+8      	; 0xdfac <mmc_init+0x176>
    dfa4:	0e 94 23 27 	call	0x4e46	; 0x4e46 <set_error>

    return( rc ) ;
}
    dfa8:	c8 01       	movw	r24, r16
    dfaa:	02 c0       	rjmp	.+4      	; 0xdfb0 <mmc_init+0x17a>
    dfac:	80 e0       	ldi	r24, 0x00	; 0
    dfae:	90 e0       	ldi	r25, 0x00	; 0
    dfb0:	2b 96       	adiw	r28, 0x0b	; 11
    dfb2:	e6 e0       	ldi	r30, 0x06	; 6
    dfb4:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0000dfb8 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dfb8:	80 e0       	ldi	r24, 0x00	; 0
    dfba:	90 e0       	ldi	r25, 0x00	; 0
    dfbc:	08 95       	ret

0000dfbe <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dfbe:	0f 93       	push	r16
    dfc0:	1f 93       	push	r17
    dfc2:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dfc4:	46 81       	ldd	r20, Z+6	; 0x06
    dfc6:	57 81       	ldd	r21, Z+7	; 0x07
    dfc8:	05 2e       	mov	r0, r21
    dfca:	00 0c       	add	r0, r0
    dfcc:	66 0b       	sbc	r22, r22
    dfce:	77 0b       	sbc	r23, r23
    dfd0:	ba 01       	movw	r22, r20
    dfd2:	55 27       	eor	r21, r21
    dfd4:	44 27       	eor	r20, r20
    dfd6:	84 81       	ldd	r24, Z+4	; 0x04
    dfd8:	95 81       	ldd	r25, Z+5	; 0x05
    dfda:	09 2e       	mov	r0, r25
    dfdc:	00 0c       	add	r0, r0
    dfde:	aa 0b       	sbc	r26, r26
    dfe0:	bb 0b       	sbc	r27, r27
    dfe2:	2b e0       	ldi	r18, 0x0B	; 11
    dfe4:	88 0f       	add	r24, r24
    dfe6:	99 1f       	adc	r25, r25
    dfe8:	aa 1f       	adc	r26, r26
    dfea:	bb 1f       	adc	r27, r27
    dfec:	2a 95       	dec	r18
    dfee:	d1 f7       	brne	.-12     	; 0xdfe4 <tm_to_fat+0x26>
    dff0:	48 2b       	or	r20, r24
    dff2:	59 2b       	or	r21, r25
    dff4:	6a 2b       	or	r22, r26
    dff6:	7b 2b       	or	r23, r27
    dff8:	82 81       	ldd	r24, Z+2	; 0x02
    dffa:	93 81       	ldd	r25, Z+3	; 0x03
    dffc:	09 2e       	mov	r0, r25
    dffe:	00 0c       	add	r0, r0
    e000:	aa 0b       	sbc	r26, r26
    e002:	bb 0b       	sbc	r27, r27
    e004:	35 e0       	ldi	r19, 0x05	; 5
    e006:	88 0f       	add	r24, r24
    e008:	99 1f       	adc	r25, r25
    e00a:	aa 1f       	adc	r26, r26
    e00c:	bb 1f       	adc	r27, r27
    e00e:	3a 95       	dec	r19
    e010:	d1 f7       	brne	.-12     	; 0xe006 <tm_to_fat+0x48>
    e012:	48 2b       	or	r20, r24
    e014:	59 2b       	or	r21, r25
    e016:	6a 2b       	or	r22, r26
    e018:	7b 2b       	or	r23, r27
    e01a:	80 81       	ld	r24, Z
    e01c:	91 81       	ldd	r25, Z+1	; 0x01
    e01e:	09 2e       	mov	r0, r25
    e020:	00 0c       	add	r0, r0
    e022:	aa 0b       	sbc	r26, r26
    e024:	bb 0b       	sbc	r27, r27
    e026:	b6 95       	lsr	r27
    e028:	a7 95       	ror	r26
    e02a:	97 95       	ror	r25
    e02c:	87 95       	ror	r24
    e02e:	84 2b       	or	r24, r20
    e030:	95 2b       	or	r25, r21
    e032:	a6 2b       	or	r26, r22
    e034:	b7 2b       	or	r27, r23
    e036:	02 85       	ldd	r16, Z+10	; 0x0a
    e038:	13 85       	ldd	r17, Z+11	; 0x0b
    e03a:	00 55       	subi	r16, 0x50	; 80
    e03c:	11 09       	sbc	r17, r1
    e03e:	01 2e       	mov	r0, r17
    e040:	00 0c       	add	r0, r0
    e042:	22 0b       	sbc	r18, r18
    e044:	33 0b       	sbc	r19, r19
    e046:	49 e1       	ldi	r20, 0x19	; 25
    e048:	00 0f       	add	r16, r16
    e04a:	11 1f       	adc	r17, r17
    e04c:	22 1f       	adc	r18, r18
    e04e:	33 1f       	adc	r19, r19
    e050:	4a 95       	dec	r20
    e052:	d1 f7       	brne	.-12     	; 0xe048 <tm_to_fat+0x8a>
    e054:	ac 01       	movw	r20, r24
    e056:	bd 01       	movw	r22, r26
    e058:	40 2b       	or	r20, r16
    e05a:	51 2b       	or	r21, r17
    e05c:	62 2b       	or	r22, r18
    e05e:	73 2b       	or	r23, r19
    e060:	80 85       	ldd	r24, Z+8	; 0x08
    e062:	91 85       	ldd	r25, Z+9	; 0x09
    e064:	09 2e       	mov	r0, r25
    e066:	00 0c       	add	r0, r0
    e068:	aa 0b       	sbc	r26, r26
    e06a:	bb 0b       	sbc	r27, r27
    e06c:	01 96       	adiw	r24, 0x01	; 1
    e06e:	a1 1d       	adc	r26, r1
    e070:	b1 1d       	adc	r27, r1
    e072:	e5 e1       	ldi	r30, 0x15	; 21
    e074:	88 0f       	add	r24, r24
    e076:	99 1f       	adc	r25, r25
    e078:	aa 1f       	adc	r26, r26
    e07a:	bb 1f       	adc	r27, r27
    e07c:	ea 95       	dec	r30
    e07e:	d1 f7       	brne	.-12     	; 0xe074 <tm_to_fat+0xb6>
    e080:	8a 01       	movw	r16, r20
    e082:	9b 01       	movw	r18, r22
    e084:	08 2b       	or	r16, r24
    e086:	19 2b       	or	r17, r25
    e088:	2a 2b       	or	r18, r26
    e08a:	3b 2b       	or	r19, r27
    e08c:	c9 01       	movw	r24, r18
    e08e:	b8 01       	movw	r22, r16
}
    e090:	1f 91       	pop	r17
    e092:	0f 91       	pop	r16
    e094:	08 95       	ret

0000e096 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e096:	a4 e0       	ldi	r26, 0x04	; 4
    e098:	b0 e0       	ldi	r27, 0x00	; 0
    e09a:	e1 e5       	ldi	r30, 0x51	; 81
    e09c:	f0 e7       	ldi	r31, 0x70	; 112
    e09e:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e0a2:	ce 01       	movw	r24, r28
    e0a4:	01 96       	adiw	r24, 0x01	; 1
    e0a6:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <time>
    return( tm_to_fat(localtime(&t)));
    e0aa:	ce 01       	movw	r24, r28
    e0ac:	01 96       	adiw	r24, 0x01	; 1
    e0ae:	0e 94 1e 38 	call	0x703c	; 0x703c <localtime>
    e0b2:	85 df       	rcall	.-246    	; 0xdfbe <tm_to_fat>
}
    e0b4:	24 96       	adiw	r28, 0x04	; 4
    e0b6:	e2 e0       	ldi	r30, 0x02	; 2
    e0b8:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000e0bc <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e0bc:	00 d0       	rcall	.+0      	; 0xe0be <put_rc+0x2>
    e0be:	00 d0       	rcall	.+0      	; 0xe0c0 <put_rc+0x4>
    e0c0:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e0c2:	ed b7       	in	r30, 0x3d	; 61
    e0c4:	fe b7       	in	r31, 0x3e	; 62
    e0c6:	95 83       	std	Z+5, r25	; 0x05
    e0c8:	84 83       	std	Z+4, r24	; 0x04
    e0ca:	8e ef       	ldi	r24, 0xFE	; 254
    e0cc:	99 e0       	ldi	r25, 0x09	; 9
    e0ce:	a0 e0       	ldi	r26, 0x00	; 0
    e0d0:	81 83       	std	Z+1, r24	; 0x01
    e0d2:	92 83       	std	Z+2, r25	; 0x02
    e0d4:	a3 83       	std	Z+3, r26	; 0x03
    e0d6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
}
    e0da:	0f 90       	pop	r0
    e0dc:	0f 90       	pop	r0
    e0de:	0f 90       	pop	r0
    e0e0:	0f 90       	pop	r0
    e0e2:	0f 90       	pop	r0
    e0e4:	08 95       	ret

0000e0e6 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e0e6:	a4 e4       	ldi	r26, 0x44	; 68
    e0e8:	b1 e0       	ldi	r27, 0x01	; 1
    e0ea:	e9 e7       	ldi	r30, 0x79	; 121
    e0ec:	f0 e7       	ldi	r31, 0x70	; 112
    e0ee:	0c 94 9c e0 	jmp	0x1c138	; 0x1c138 <__prologue_saves__+0x16>
    e0f2:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e0f4:	bc 01       	movw	r22, r24
    e0f6:	ce 01       	movw	r24, r28
    e0f8:	89 5e       	subi	r24, 0xE9	; 233
    e0fa:	9e 4f       	sbci	r25, 0xFE	; 254
    e0fc:	0e 94 04 63 	call	0xc608	; 0xc608 <f_opendir>
    if (fr == FR_OK)
    e100:	00 97       	sbiw	r24, 0x00	; 0
    e102:	09 f0       	breq	.+2      	; 0xe106 <fatfs_scan_files+0x20>
    e104:	5b c0       	rjmp	.+182    	; 0xe1bc <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e106:	8f e2       	ldi	r24, 0x2F	; 47
    e108:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e10a:	be 01       	movw	r22, r28
    e10c:	6f 5f       	subi	r22, 0xFF	; 255
    e10e:	7f 4f       	sbci	r23, 0xFF	; 255
    e110:	ce 01       	movw	r24, r28
    e112:	89 5e       	subi	r24, 0xE9	; 233
    e114:	9e 4f       	sbci	r25, 0xFE	; 254
    e116:	0e 94 8a 63 	call	0xc714	; 0xc714 <f_readdir>
    e11a:	00 97       	sbiw	r24, 0x00	; 0
    e11c:	09 f0       	breq	.+2      	; 0xe120 <fatfs_scan_files+0x3a>
    e11e:	4e c0       	rjmp	.+156    	; 0xe1bc <fatfs_scan_files+0xd6>
    e120:	2f 89       	ldd	r18, Y+23	; 0x17
    e122:	22 23       	and	r18, r18
    e124:	09 f4       	brne	.+2      	; 0xe128 <fatfs_scan_files+0x42>
    e126:	4a c0       	rjmp	.+148    	; 0xe1bc <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e128:	89 85       	ldd	r24, Y+9	; 0x09
    e12a:	84 ff       	sbrs	r24, 4
    e12c:	25 c0       	rjmp	.+74     	; 0xe178 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e12e:	80 91 9a 1c 	lds	r24, 0x1C9A	; 0x801c9a <AccDirs>
    e132:	90 91 9b 1c 	lds	r25, 0x1C9B	; 0x801c9b <AccDirs+0x1>
    e136:	01 96       	adiw	r24, 0x01	; 1
    e138:	90 93 9b 1c 	sts	0x1C9B, r25	; 0x801c9b <AccDirs+0x1>
    e13c:	80 93 9a 1c 	sts	0x1C9A, r24	; 0x801c9a <AccDirs>
                i = strlen(path);
    e140:	f8 01       	movw	r30, r16
    e142:	01 90       	ld	r0, Z+
    e144:	00 20       	and	r0, r0
    e146:	e9 f7       	brne	.-6      	; 0xe142 <fatfs_scan_files+0x5c>
    e148:	31 97       	sbiw	r30, 0x01	; 1
    e14a:	e0 1b       	sub	r30, r16
    e14c:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e14e:	78 01       	movw	r14, r16
    e150:	ee 0e       	add	r14, r30
    e152:	ff 1e       	adc	r15, r31
    e154:	d7 01       	movw	r26, r14
    e156:	dc 92       	st	X, r13
    e158:	cf 01       	movw	r24, r30
    e15a:	01 96       	adiw	r24, 0x01	; 1
    e15c:	be 01       	movw	r22, r28
    e15e:	69 5e       	subi	r22, 0xE9	; 233
    e160:	7f 4f       	sbci	r23, 0xFF	; 255
    e162:	80 0f       	add	r24, r16
    e164:	91 1f       	adc	r25, r17
    e166:	0e 94 c4 30 	call	0x6188	; 0x6188 <strcpy>
                fr = fatfs_scan_files(path);
    e16a:	c8 01       	movw	r24, r16
    e16c:	bc df       	rcall	.-136    	; 0xe0e6 <fatfs_scan_files>
                path[i] = 0;
    e16e:	f7 01       	movw	r30, r14
    e170:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e172:	00 97       	sbiw	r24, 0x00	; 0
    e174:	51 f2       	breq	.-108    	; 0xe10a <fatfs_scan_files+0x24>
    e176:	22 c0       	rjmp	.+68     	; 0xe1bc <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e178:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <AccFiles>
    e17c:	90 91 9d 1c 	lds	r25, 0x1C9D	; 0x801c9d <AccFiles+0x1>
    e180:	01 96       	adiw	r24, 0x01	; 1
    e182:	90 93 9d 1c 	sts	0x1C9D, r25	; 0x801c9d <AccFiles+0x1>
    e186:	80 93 9c 1c 	sts	0x1C9C, r24	; 0x801c9c <AccFiles>
                AccSize += info.fsize;
    e18a:	40 91 96 1c 	lds	r20, 0x1C96	; 0x801c96 <AccSize>
    e18e:	50 91 97 1c 	lds	r21, 0x1C97	; 0x801c97 <AccSize+0x1>
    e192:	60 91 98 1c 	lds	r22, 0x1C98	; 0x801c98 <AccSize+0x2>
    e196:	70 91 99 1c 	lds	r23, 0x1C99	; 0x801c99 <AccSize+0x3>
    e19a:	89 81       	ldd	r24, Y+1	; 0x01
    e19c:	9a 81       	ldd	r25, Y+2	; 0x02
    e19e:	ab 81       	ldd	r26, Y+3	; 0x03
    e1a0:	bc 81       	ldd	r27, Y+4	; 0x04
    e1a2:	84 0f       	add	r24, r20
    e1a4:	95 1f       	adc	r25, r21
    e1a6:	a6 1f       	adc	r26, r22
    e1a8:	b7 1f       	adc	r27, r23
    e1aa:	80 93 96 1c 	sts	0x1C96, r24	; 0x801c96 <AccSize>
    e1ae:	90 93 97 1c 	sts	0x1C97, r25	; 0x801c97 <AccSize+0x1>
    e1b2:	a0 93 98 1c 	sts	0x1C98, r26	; 0x801c98 <AccSize+0x2>
    e1b6:	b0 93 99 1c 	sts	0x1C99, r27	; 0x801c99 <AccSize+0x3>
    e1ba:	a7 cf       	rjmp	.-178    	; 0xe10a <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e1bc:	cc 5b       	subi	r28, 0xBC	; 188
    e1be:	de 4f       	sbci	r29, 0xFE	; 254
    e1c0:	e7 e0       	ldi	r30, 0x07	; 7
    e1c2:	0c 94 b8 e0 	jmp	0x1c170	; 0x1c170 <__epilogue_restores__+0x16>

0000e1c6 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e1c6:	01 97       	sbiw	r24, 0x01	; 1
    e1c8:	84 30       	cpi	r24, 0x04	; 4
    e1ca:	91 05       	cpc	r25, r1
    e1cc:	40 f4       	brcc	.+16     	; 0xe1de <fatfs_fstype+0x18>
    e1ce:	88 0f       	add	r24, r24
    e1d0:	99 1f       	adc	r25, r25
    e1d2:	fc 01       	movw	r30, r24
    e1d4:	e4 56       	subi	r30, 0x64	; 100
    e1d6:	f7 4f       	sbci	r31, 0xF7	; 247
    e1d8:	80 81       	ld	r24, Z
    e1da:	91 81       	ldd	r25, Z+1	; 0x01
    e1dc:	08 95       	ret
    char *ptr;
    switch(type)
    e1de:	8a e7       	ldi	r24, 0x7A	; 122
    e1e0:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e1e2:	08 95       	ret

0000e1e4 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e1e4:	a7 e3       	ldi	r26, 0x37	; 55
    e1e6:	b0 e0       	ldi	r27, 0x00	; 0
    e1e8:	e8 ef       	ldi	r30, 0xF8	; 248
    e1ea:	f0 e7       	ldi	r31, 0x70	; 112
    e1ec:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    e1f0:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e1f2:	fc 01       	movw	r30, r24
    e1f4:	21 91       	ld	r18, Z+
    e1f6:	cf 01       	movw	r24, r30
    e1f8:	20 32       	cpi	r18, 0x20	; 32
    e1fa:	d1 f3       	breq	.-12     	; 0xe1f0 <fatfs_status+0xc>
    e1fc:	29 30       	cpi	r18, 0x09	; 9
    e1fe:	c1 f3       	breq	.-16     	; 0xe1f0 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e200:	ed b7       	in	r30, 0x3d	; 61
    e202:	fe b7       	in	r31, 0x3e	; 62
    e204:	e4 82       	std	Z+4, r14	; 0x04
    e206:	f5 82       	std	Z+5, r15	; 0x05
    e208:	8d ee       	ldi	r24, 0xED	; 237
    e20a:	99 e0       	ldi	r25, 0x09	; 9
    e20c:	a0 e0       	ldi	r26, 0x00	; 0
    e20e:	81 83       	std	Z+1, r24	; 0x01
    e210:	92 83       	std	Z+2, r25	; 0x02
    e212:	a3 83       	std	Z+3, r26	; 0x03
    e214:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e218:	ae 01       	movw	r20, r28
    e21a:	4a 5c       	subi	r20, 0xCA	; 202
    e21c:	5f 4f       	sbci	r21, 0xFF	; 255
    e21e:	be 01       	movw	r22, r28
    e220:	6e 5c       	subi	r22, 0xCE	; 206
    e222:	7f 4f       	sbci	r23, 0xFF	; 255
    e224:	c7 01       	movw	r24, r14
    e226:	0e 94 0c 64 	call	0xc818	; 0xc818 <f_getfree>
    if (res)
    e22a:	00 97       	sbiw	r24, 0x00	; 0
    e22c:	09 f0       	breq	.+2      	; 0xe230 <fatfs_status+0x4c>
    e22e:	f8 c0       	rjmp	.+496    	; 0xe420 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e230:	ee a9       	ldd	r30, Y+54	; 0x36
    e232:	ff a9       	ldd	r31, Y+55	; 0x37
    e234:	80 81       	ld	r24, Z
    e236:	90 e0       	ldi	r25, 0x00	; 0
    e238:	c6 df       	rcall	.-116    	; 0xe1c6 <fatfs_fstype>
    e23a:	ed b7       	in	r30, 0x3d	; 61
    e23c:	fe b7       	in	r31, 0x3e	; 62
    e23e:	95 83       	std	Z+5, r25	; 0x05
    e240:	84 83       	std	Z+4, r24	; 0x04
    e242:	8f ec       	ldi	r24, 0xCF	; 207
    e244:	99 e0       	ldi	r25, 0x09	; 9
    e246:	a0 e0       	ldi	r26, 0x00	; 0
    e248:	81 83       	std	Z+1, r24	; 0x01
    e24a:	92 83       	std	Z+2, r25	; 0x02
    e24c:	a3 83       	std	Z+3, r26	; 0x03
    e24e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e252:	ee a9       	ldd	r30, Y+54	; 0x36
    e254:	ff a9       	ldd	r31, Y+55	; 0x37
    e256:	81 85       	ldd	r24, Z+9	; 0x09
    e258:	92 85       	ldd	r25, Z+10	; 0x0a
    e25a:	a0 e0       	ldi	r26, 0x00	; 0
    e25c:	b0 e0       	ldi	r27, 0x00	; 0
    e25e:	39 e0       	ldi	r19, 0x09	; 9
    e260:	88 0f       	add	r24, r24
    e262:	99 1f       	adc	r25, r25
    e264:	aa 1f       	adc	r26, r26
    e266:	bb 1f       	adc	r27, r27
    e268:	3a 95       	dec	r19
    e26a:	d1 f7       	brne	.-12     	; 0xe260 <fatfs_status+0x7c>
    e26c:	ed b7       	in	r30, 0x3d	; 61
    e26e:	fe b7       	in	r31, 0x3e	; 62
    e270:	84 83       	std	Z+4, r24	; 0x04
    e272:	95 83       	std	Z+5, r25	; 0x05
    e274:	a6 83       	std	Z+6, r26	; 0x06
    e276:	b7 83       	std	Z+7, r27	; 0x07
    e278:	80 eb       	ldi	r24, 0xB0	; 176
    e27a:	99 e0       	ldi	r25, 0x09	; 9
    e27c:	a0 e0       	ldi	r26, 0x00	; 0
    e27e:	81 83       	std	Z+1, r24	; 0x01
    e280:	92 83       	std	Z+2, r25	; 0x02
    e282:	a3 83       	std	Z+3, r26	; 0x03
    e284:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e288:	ee a9       	ldd	r30, Y+54	; 0x36
    e28a:	ff a9       	ldd	r31, Y+55	; 0x37
    e28c:	82 81       	ldd	r24, Z+2	; 0x02
    e28e:	90 e0       	ldi	r25, 0x00	; 0
    e290:	ed b7       	in	r30, 0x3d	; 61
    e292:	fe b7       	in	r31, 0x3e	; 62
    e294:	95 83       	std	Z+5, r25	; 0x05
    e296:	84 83       	std	Z+4, r24	; 0x04
    e298:	82 e9       	ldi	r24, 0x92	; 146
    e29a:	99 e0       	ldi	r25, 0x09	; 9
    e29c:	a0 e0       	ldi	r26, 0x00	; 0
    e29e:	81 83       	std	Z+1, r24	; 0x01
    e2a0:	92 83       	std	Z+2, r25	; 0x02
    e2a2:	a3 83       	std	Z+3, r26	; 0x03
    e2a4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e2a8:	ee a9       	ldd	r30, Y+54	; 0x36
    e2aa:	ff a9       	ldd	r31, Y+55	; 0x37
    e2ac:	87 81       	ldd	r24, Z+7	; 0x07
    e2ae:	90 85       	ldd	r25, Z+8	; 0x08
    e2b0:	ed b7       	in	r30, 0x3d	; 61
    e2b2:	fe b7       	in	r31, 0x3e	; 62
    e2b4:	95 83       	std	Z+5, r25	; 0x05
    e2b6:	84 83       	std	Z+4, r24	; 0x04
    e2b8:	84 e7       	ldi	r24, 0x74	; 116
    e2ba:	99 e0       	ldi	r25, 0x09	; 9
    e2bc:	a0 e0       	ldi	r26, 0x00	; 0
    e2be:	81 83       	std	Z+1, r24	; 0x01
    e2c0:	92 83       	std	Z+2, r25	; 0x02
    e2c2:	a3 83       	std	Z+3, r26	; 0x03
    e2c4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e2c8:	ee a9       	ldd	r30, Y+54	; 0x36
    e2ca:	ff a9       	ldd	r31, Y+55	; 0x37
    e2cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    e2ce:	96 8d       	ldd	r25, Z+30	; 0x1e
    e2d0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e2d2:	b0 a1       	ldd	r27, Z+32	; 0x20
    e2d4:	ed b7       	in	r30, 0x3d	; 61
    e2d6:	fe b7       	in	r31, 0x3e	; 62
    e2d8:	84 83       	std	Z+4, r24	; 0x04
    e2da:	95 83       	std	Z+5, r25	; 0x05
    e2dc:	a6 83       	std	Z+6, r26	; 0x06
    e2de:	b7 83       	std	Z+7, r27	; 0x07
    e2e0:	85 e5       	ldi	r24, 0x55	; 85
    e2e2:	99 e0       	ldi	r25, 0x09	; 9
    e2e4:	a0 e0       	ldi	r26, 0x00	; 0
    e2e6:	81 83       	std	Z+1, r24	; 0x01
    e2e8:	92 83       	std	Z+2, r25	; 0x02
    e2ea:	a3 83       	std	Z+3, r26	; 0x03
    e2ec:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e2f0:	ee a9       	ldd	r30, Y+54	; 0x36
    e2f2:	ff a9       	ldd	r31, Y+55	; 0x37
    e2f4:	81 8d       	ldd	r24, Z+25	; 0x19
    e2f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2f8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2fa:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2fc:	02 97       	sbiw	r24, 0x02	; 2
    e2fe:	a1 09       	sbc	r26, r1
    e300:	b1 09       	sbc	r27, r1
    e302:	ed b7       	in	r30, 0x3d	; 61
    e304:	fe b7       	in	r31, 0x3e	; 62
    e306:	84 83       	std	Z+4, r24	; 0x04
    e308:	95 83       	std	Z+5, r25	; 0x05
    e30a:	a6 83       	std	Z+6, r26	; 0x06
    e30c:	b7 83       	std	Z+7, r27	; 0x07
    e30e:	86 e3       	ldi	r24, 0x36	; 54
    e310:	99 e0       	ldi	r25, 0x09	; 9
    e312:	a0 e0       	ldi	r26, 0x00	; 0
    e314:	81 83       	std	Z+1, r24	; 0x01
    e316:	92 83       	std	Z+2, r25	; 0x02
    e318:	a3 83       	std	Z+3, r26	; 0x03
    e31a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e31e:	ee a9       	ldd	r30, Y+54	; 0x36
    e320:	ff a9       	ldd	r31, Y+55	; 0x37
    e322:	85 a1       	ldd	r24, Z+37	; 0x25
    e324:	96 a1       	ldd	r25, Z+38	; 0x26
    e326:	a7 a1       	ldd	r26, Z+39	; 0x27
    e328:	b0 a5       	ldd	r27, Z+40	; 0x28
    e32a:	ed b7       	in	r30, 0x3d	; 61
    e32c:	fe b7       	in	r31, 0x3e	; 62
    e32e:	84 83       	std	Z+4, r24	; 0x04
    e330:	95 83       	std	Z+5, r25	; 0x05
    e332:	a6 83       	std	Z+6, r26	; 0x06
    e334:	b7 83       	std	Z+7, r27	; 0x07
    e336:	87 e1       	ldi	r24, 0x17	; 23
    e338:	99 e0       	ldi	r25, 0x09	; 9
    e33a:	a0 e0       	ldi	r26, 0x00	; 0
    e33c:	81 83       	std	Z+1, r24	; 0x01
    e33e:	92 83       	std	Z+2, r25	; 0x02
    e340:	a3 83       	std	Z+3, r26	; 0x03
    e342:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e346:	ee a9       	ldd	r30, Y+54	; 0x36
    e348:	ff a9       	ldd	r31, Y+55	; 0x37
    e34a:	81 a5       	ldd	r24, Z+41	; 0x29
    e34c:	92 a5       	ldd	r25, Z+42	; 0x2a
    e34e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e350:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e352:	ed b7       	in	r30, 0x3d	; 61
    e354:	fe b7       	in	r31, 0x3e	; 62
    e356:	84 83       	std	Z+4, r24	; 0x04
    e358:	95 83       	std	Z+5, r25	; 0x05
    e35a:	a6 83       	std	Z+6, r26	; 0x06
    e35c:	b7 83       	std	Z+7, r27	; 0x07
    e35e:	88 ef       	ldi	r24, 0xF8	; 248
    e360:	98 e0       	ldi	r25, 0x08	; 8
    e362:	a0 e0       	ldi	r26, 0x00	; 0
    e364:	81 83       	std	Z+1, r24	; 0x01
    e366:	92 83       	std	Z+2, r25	; 0x02
    e368:	a3 83       	std	Z+3, r26	; 0x03
    e36a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e36e:	ee a9       	ldd	r30, Y+54	; 0x36
    e370:	ff a9       	ldd	r31, Y+55	; 0x37
    e372:	85 a5       	ldd	r24, Z+45	; 0x2d
    e374:	96 a5       	ldd	r25, Z+46	; 0x2e
    e376:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e378:	b0 a9       	ldd	r27, Z+48	; 0x30
    e37a:	ed b7       	in	r30, 0x3d	; 61
    e37c:	fe b7       	in	r31, 0x3e	; 62
    e37e:	84 83       	std	Z+4, r24	; 0x04
    e380:	95 83       	std	Z+5, r25	; 0x05
    e382:	a6 83       	std	Z+6, r26	; 0x06
    e384:	b7 83       	std	Z+7, r27	; 0x07
    e386:	89 ed       	ldi	r24, 0xD9	; 217
    e388:	98 e0       	ldi	r25, 0x08	; 8
    e38a:	a0 e0       	ldi	r26, 0x00	; 0
    e38c:	81 83       	std	Z+1, r24	; 0x01
    e38e:	92 83       	std	Z+2, r25	; 0x02
    e390:	a3 83       	std	Z+3, r26	; 0x03
    e392:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e396:	ae 01       	movw	r20, r28
    e398:	42 5d       	subi	r20, 0xD2	; 210
    e39a:	5f 4f       	sbci	r21, 0xFF	; 255
    e39c:	be 01       	movw	r22, r28
    e39e:	6c 5e       	subi	r22, 0xEC	; 236
    e3a0:	7f 4f       	sbci	r23, 0xFF	; 255
    e3a2:	c7 01       	movw	r24, r14
    e3a4:	0e 94 3e 68 	call	0xd07c	; 0xd07c <f_getlabel>
    if (res)
    e3a8:	00 97       	sbiw	r24, 0x00	; 0
    e3aa:	d1 f5       	brne	.+116    	; 0xe420 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e3ac:	8c 89       	ldd	r24, Y+20	; 0x14
    e3ae:	81 11       	cpse	r24, r1
    e3b0:	03 c0       	rjmp	.+6      	; 0xe3b8 <fatfs_status+0x1d4>
    e3b2:	82 e8       	ldi	r24, 0x82	; 130
    e3b4:	98 e0       	ldi	r25, 0x08	; 8
    e3b6:	02 c0       	rjmp	.+4      	; 0xe3bc <fatfs_status+0x1d8>
    e3b8:	ce 01       	movw	r24, r28
    e3ba:	44 96       	adiw	r24, 0x14	; 20
    e3bc:	ed b7       	in	r30, 0x3d	; 61
    e3be:	fe b7       	in	r31, 0x3e	; 62
    e3c0:	95 83       	std	Z+5, r25	; 0x05
    e3c2:	84 83       	std	Z+4, r24	; 0x04
    e3c4:	8b eb       	ldi	r24, 0xBB	; 187
    e3c6:	98 e0       	ldi	r25, 0x08	; 8
    e3c8:	a0 e0       	ldi	r26, 0x00	; 0
    e3ca:	81 83       	std	Z+1, r24	; 0x01
    e3cc:	92 83       	std	Z+2, r25	; 0x02
    e3ce:	a3 83       	std	Z+3, r26	; 0x03
    e3d0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e3d4:	8e a5       	ldd	r24, Y+46	; 0x2e
    e3d6:	9f a5       	ldd	r25, Y+47	; 0x2f
    e3d8:	a8 a9       	ldd	r26, Y+48	; 0x30
    e3da:	b9 a9       	ldd	r27, Y+49	; 0x31
    e3dc:	ed b7       	in	r30, 0x3d	; 61
    e3de:	fe b7       	in	r31, 0x3e	; 62
    e3e0:	97 83       	std	Z+7, r25	; 0x07
    e3e2:	86 83       	std	Z+6, r24	; 0x06
    e3e4:	b5 83       	std	Z+5, r27	; 0x05
    e3e6:	a4 83       	std	Z+4, r26	; 0x04
    e3e8:	86 e9       	ldi	r24, 0x96	; 150
    e3ea:	98 e0       	ldi	r25, 0x08	; 8
    e3ec:	a0 e0       	ldi	r26, 0x00	; 0
    e3ee:	81 83       	std	Z+1, r24	; 0x01
    e3f0:	92 83       	std	Z+2, r25	; 0x02
    e3f2:	a3 83       	std	Z+3, r26	; 0x03
    e3f4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e3f8:	10 92 9b 1c 	sts	0x1C9B, r1	; 0x801c9b <AccDirs+0x1>
    e3fc:	10 92 9a 1c 	sts	0x1C9A, r1	; 0x801c9a <AccDirs>
    e400:	10 92 9d 1c 	sts	0x1C9D, r1	; 0x801c9d <AccFiles+0x1>
    e404:	10 92 9c 1c 	sts	0x1C9C, r1	; 0x801c9c <AccFiles>
    e408:	10 92 96 1c 	sts	0x1C96, r1	; 0x801c96 <AccSize>
    e40c:	10 92 97 1c 	sts	0x1C97, r1	; 0x801c97 <AccSize+0x1>
    e410:	10 92 98 1c 	sts	0x1C98, r1	; 0x801c98 <AccSize+0x2>
    e414:	10 92 99 1c 	sts	0x1C99, r1	; 0x801c99 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e418:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e41a:	65 de       	rcall	.-822    	; 0xe0e6 <fatfs_scan_files>
    e41c:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e41e:	11 f0       	breq	.+4      	; 0xe424 <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e420:	4d de       	rcall	.-870    	; 0xe0bc <put_rc>
    e422:	56 c0       	rjmp	.+172    	; 0xe4d0 <fatfs_status+0x2ec>
    e424:	0e a9       	ldd	r16, Y+54	; 0x36
    e426:	1f a9       	ldd	r17, Y+55	; 0x37
    e428:	f8 01       	movw	r30, r16
    e42a:	c1 84       	ldd	r12, Z+9	; 0x09
    e42c:	d2 84       	ldd	r13, Z+10	; 0x0a
    e42e:	e1 2c       	mov	r14, r1
    e430:	f1 2c       	mov	r15, r1
    e432:	6a a9       	ldd	r22, Y+50	; 0x32
    e434:	7b a9       	ldd	r23, Y+51	; 0x33
    e436:	8c a9       	ldd	r24, Y+52	; 0x34
    e438:	9d a9       	ldd	r25, Y+53	; 0x35
    e43a:	a7 01       	movw	r20, r14
    e43c:	96 01       	movw	r18, r12
    e43e:	0e 94 e2 df 	call	0x1bfc4	; 0x1bfc4 <__mulsi3>
    e442:	22 e0       	ldi	r18, 0x02	; 2
    e444:	30 e0       	ldi	r19, 0x00	; 0
    e446:	40 e0       	ldi	r20, 0x00	; 0
    e448:	50 e0       	ldi	r21, 0x00	; 0
    e44a:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
    e44e:	ed b7       	in	r30, 0x3d	; 61
    e450:	fe b7       	in	r31, 0x3e	; 62
    e452:	20 8b       	std	Z+16, r18	; 0x10
    e454:	31 8b       	std	Z+17, r19	; 0x11
    e456:	42 8b       	std	Z+18, r20	; 0x12
    e458:	53 8b       	std	Z+19, r21	; 0x13
    e45a:	f8 01       	movw	r30, r16
    e45c:	81 8d       	ldd	r24, Z+25	; 0x19
    e45e:	92 8d       	ldd	r25, Z+26	; 0x1a
    e460:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e462:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e464:	9c 01       	movw	r18, r24
    e466:	ad 01       	movw	r20, r26
    e468:	22 50       	subi	r18, 0x02	; 2
    e46a:	31 09       	sbc	r19, r1
    e46c:	41 09       	sbc	r20, r1
    e46e:	51 09       	sbc	r21, r1
    e470:	c7 01       	movw	r24, r14
    e472:	b6 01       	movw	r22, r12
    e474:	0e 94 e2 df 	call	0x1bfc4	; 0x1bfc4 <__mulsi3>
    e478:	dc 01       	movw	r26, r24
    e47a:	cb 01       	movw	r24, r22
    e47c:	b6 95       	lsr	r27
    e47e:	a7 95       	ror	r26
    e480:	97 95       	ror	r25
    e482:	87 95       	ror	r24
    e484:	ed b7       	in	r30, 0x3d	; 61
    e486:	fe b7       	in	r31, 0x3e	; 62
    e488:	84 87       	std	Z+12, r24	; 0x0c
    e48a:	95 87       	std	Z+13, r25	; 0x0d
    e48c:	a6 87       	std	Z+14, r26	; 0x0e
    e48e:	b7 87       	std	Z+15, r27	; 0x0f
    e490:	80 91 9a 1c 	lds	r24, 0x1C9A	; 0x801c9a <AccDirs>
    e494:	90 91 9b 1c 	lds	r25, 0x1C9B	; 0x801c9b <AccDirs+0x1>
    e498:	93 87       	std	Z+11, r25	; 0x0b
    e49a:	82 87       	std	Z+10, r24	; 0x0a
    e49c:	80 91 96 1c 	lds	r24, 0x1C96	; 0x801c96 <AccSize>
    e4a0:	90 91 97 1c 	lds	r25, 0x1C97	; 0x801c97 <AccSize+0x1>
    e4a4:	a0 91 98 1c 	lds	r26, 0x1C98	; 0x801c98 <AccSize+0x2>
    e4a8:	b0 91 99 1c 	lds	r27, 0x1C99	; 0x801c99 <AccSize+0x3>
    e4ac:	86 83       	std	Z+6, r24	; 0x06
    e4ae:	97 83       	std	Z+7, r25	; 0x07
    e4b0:	a0 87       	std	Z+8, r26	; 0x08
    e4b2:	b1 87       	std	Z+9, r27	; 0x09
    e4b4:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <AccFiles>
    e4b8:	90 91 9d 1c 	lds	r25, 0x1C9D	; 0x801c9d <AccFiles+0x1>
    e4bc:	95 83       	std	Z+5, r25	; 0x05
    e4be:	84 83       	std	Z+4, r24	; 0x04
    e4c0:	89 e4       	ldi	r24, 0x49	; 73
    e4c2:	98 e0       	ldi	r25, 0x08	; 8
    e4c4:	a0 e0       	ldi	r26, 0x00	; 0
    e4c6:	81 83       	std	Z+1, r24	; 0x01
    e4c8:	92 83       	std	Z+2, r25	; 0x02
    e4ca:	a3 83       	std	Z+3, r26	; 0x03
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e4cc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    e4d0:	e7 96       	adiw	r28, 0x37	; 55
    e4d2:	e8 e0       	ldi	r30, 0x08	; 8
    e4d4:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000e4d8 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e4d8:	ab e1       	ldi	r26, 0x1B	; 27
    e4da:	b0 e0       	ldi	r27, 0x00	; 0
    e4dc:	e2 e7       	ldi	r30, 0x72	; 114
    e4de:	f2 e7       	ldi	r31, 0x72	; 114
    e4e0:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    e4e4:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e4e6:	fc 01       	movw	r30, r24
    e4e8:	86 89       	ldd	r24, Z+22	; 0x16
    e4ea:	81 11       	cpse	r24, r1
    e4ec:	03 c0       	rjmp	.+6      	; 0xe4f4 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e4ee:	8e e2       	ldi	r24, 0x2E	; 46
    e4f0:	98 e0       	ldi	r25, 0x08	; 8
    e4f2:	69 c0       	rjmp	.+210    	; 0xe5c6 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e4f4:	fd 01       	movw	r30, r26
    e4f6:	80 85       	ldd	r24, Z+8	; 0x08
    e4f8:	84 fd       	sbrc	r24, 4
    e4fa:	02 c0       	rjmp	.+4      	; 0xe500 <fatfs_filinfo_list+0x28>
    e4fc:	9d e2       	ldi	r25, 0x2D	; 45
    e4fe:	01 c0       	rjmp	.+2      	; 0xe502 <fatfs_filinfo_list+0x2a>
    e500:	94 e4       	ldi	r25, 0x44	; 68
    e502:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e504:	80 fd       	sbrc	r24, 0
    e506:	02 c0       	rjmp	.+4      	; 0xe50c <fatfs_filinfo_list+0x34>
    e508:	9d e2       	ldi	r25, 0x2D	; 45
    e50a:	01 c0       	rjmp	.+2      	; 0xe50e <fatfs_filinfo_list+0x36>
    e50c:	92 e5       	ldi	r25, 0x52	; 82
    e50e:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e510:	81 fd       	sbrc	r24, 1
    e512:	02 c0       	rjmp	.+4      	; 0xe518 <fatfs_filinfo_list+0x40>
    e514:	9d e2       	ldi	r25, 0x2D	; 45
    e516:	01 c0       	rjmp	.+2      	; 0xe51a <fatfs_filinfo_list+0x42>
    e518:	98 e4       	ldi	r25, 0x48	; 72
    e51a:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e51c:	82 fd       	sbrc	r24, 2
    e51e:	02 c0       	rjmp	.+4      	; 0xe524 <fatfs_filinfo_list+0x4c>
    e520:	9d e2       	ldi	r25, 0x2D	; 45
    e522:	01 c0       	rjmp	.+2      	; 0xe526 <fatfs_filinfo_list+0x4e>
    e524:	93 e5       	ldi	r25, 0x53	; 83
    e526:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e528:	85 fd       	sbrc	r24, 5
    e52a:	02 c0       	rjmp	.+4      	; 0xe530 <fatfs_filinfo_list+0x58>
    e52c:	8d e2       	ldi	r24, 0x2D	; 45
    e52e:	01 c0       	rjmp	.+2      	; 0xe532 <fatfs_filinfo_list+0x5a>
    e530:	81 e4       	ldi	r24, 0x41	; 65
    e532:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e534:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e536:	fd 01       	movw	r30, r26
    e538:	24 81       	ldd	r18, Z+4	; 0x04
    e53a:	35 81       	ldd	r19, Z+5	; 0x05
    e53c:	46 81       	ldd	r20, Z+6	; 0x06
    e53e:	57 81       	ldd	r21, Z+7	; 0x07
    e540:	cd 01       	movw	r24, r26
    e542:	46 96       	adiw	r24, 0x16	; 22
    e544:	ed b7       	in	r30, 0x3d	; 61
    e546:	fe b7       	in	r31, 0x3e	; 62
    e548:	95 8b       	std	Z+21, r25	; 0x15
    e54a:	84 8b       	std	Z+20, r24	; 0x14
    e54c:	8d 91       	ld	r24, X+
    e54e:	9d 91       	ld	r25, X+
    e550:	0d 90       	ld	r0, X+
    e552:	bc 91       	ld	r27, X
    e554:	a0 2d       	mov	r26, r0
    e556:	80 8b       	std	Z+16, r24	; 0x10
    e558:	91 8b       	std	Z+17, r25	; 0x11
    e55a:	a2 8b       	std	Z+18, r26	; 0x12
    e55c:	b3 8b       	std	Z+19, r27	; 0x13
    e55e:	ca 01       	movw	r24, r20
    e560:	45 e0       	ldi	r20, 0x05	; 5
    e562:	96 95       	lsr	r25
    e564:	87 95       	ror	r24
    e566:	4a 95       	dec	r20
    e568:	e1 f7       	brne	.-8      	; 0xe562 <fatfs_filinfo_list+0x8a>
    e56a:	8f 73       	andi	r24, 0x3F	; 63
    e56c:	99 27       	eor	r25, r25
    e56e:	97 87       	std	Z+15, r25	; 0x0f
    e570:	86 87       	std	Z+14, r24	; 0x0e
    e572:	85 2f       	mov	r24, r21
    e574:	86 95       	lsr	r24
    e576:	86 95       	lsr	r24
    e578:	86 95       	lsr	r24
    e57a:	84 87       	std	Z+12, r24	; 0x0c
    e57c:	15 86       	std	Z+13, r1	; 0x0d
    e57e:	c9 01       	movw	r24, r18
    e580:	8f 71       	andi	r24, 0x1F	; 31
    e582:	99 27       	eor	r25, r25
    e584:	93 87       	std	Z+11, r25	; 0x0b
    e586:	82 87       	std	Z+10, r24	; 0x0a
    e588:	c9 01       	movw	r24, r18
    e58a:	55 e0       	ldi	r21, 0x05	; 5
    e58c:	96 95       	lsr	r25
    e58e:	87 95       	ror	r24
    e590:	5a 95       	dec	r21
    e592:	e1 f7       	brne	.-8      	; 0xe58c <fatfs_filinfo_list+0xb4>
    e594:	8f 70       	andi	r24, 0x0F	; 15
    e596:	99 27       	eor	r25, r25
    e598:	91 87       	std	Z+9, r25	; 0x09
    e59a:	80 87       	std	Z+8, r24	; 0x08
    e59c:	23 2f       	mov	r18, r19
    e59e:	33 27       	eor	r19, r19
    e5a0:	26 95       	lsr	r18
    e5a2:	24 54       	subi	r18, 0x44	; 68
    e5a4:	38 4f       	sbci	r19, 0xF8	; 248
    e5a6:	37 83       	std	Z+7, r19	; 0x07
    e5a8:	26 83       	std	Z+6, r18	; 0x06
    e5aa:	ce 01       	movw	r24, r28
    e5ac:	46 96       	adiw	r24, 0x16	; 22
    e5ae:	95 83       	std	Z+5, r25	; 0x05
    e5b0:	84 83       	std	Z+4, r24	; 0x04
    e5b2:	8c e0       	ldi	r24, 0x0C	; 12
    e5b4:	98 e0       	ldi	r25, 0x08	; 8
    e5b6:	a0 e0       	ldi	r26, 0x00	; 0
    e5b8:	81 83       	std	Z+1, r24	; 0x01
    e5ba:	92 83       	std	Z+2, r25	; 0x02
    e5bc:	a3 83       	std	Z+3, r26	; 0x03
    e5be:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e5c2:	8a e0       	ldi	r24, 0x0A	; 10
    e5c4:	98 e0       	ldi	r25, 0x08	; 8
    e5c6:	a0 e0       	ldi	r26, 0x00	; 0
    e5c8:	ed b7       	in	r30, 0x3d	; 61
    e5ca:	fe b7       	in	r31, 0x3e	; 62
    e5cc:	81 83       	std	Z+1, r24	; 0x01
    e5ce:	92 83       	std	Z+2, r25	; 0x02
    e5d0:	a3 83       	std	Z+3, r26	; 0x03
    e5d2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
}
    e5d6:	6b 96       	adiw	r28, 0x1b	; 27
    e5d8:	e2 e0       	ldi	r30, 0x02	; 2
    e5da:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000e5de <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e5de:	cf 93       	push	r28
    e5e0:	df 93       	push	r29
    e5e2:	00 d0       	rcall	.+0      	; 0xe5e4 <fatfs_help+0x6>
    e5e4:	1f 92       	push	r1
    e5e6:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e5e8:	8f e4       	ldi	r24, 0x4F	; 79
    e5ea:	9b e0       	ldi	r25, 0x0B	; 11
    e5ec:	a0 e0       	ldi	r26, 0x00	; 0
    e5ee:	ed b7       	in	r30, 0x3d	; 61
    e5f0:	fe b7       	in	r31, 0x3e	; 62
    e5f2:	81 83       	std	Z+1, r24	; 0x01
    e5f4:	92 83       	std	Z+2, r25	; 0x02
    e5f6:	a3 83       	std	Z+3, r26	; 0x03
    e5f8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    if(full)
    e5fc:	cd 2b       	or	r28, r29
    e5fe:	51 f0       	breq	.+20     	; 0xe614 <fatfs_help+0x36>
    {
        printf(
    e600:	83 ed       	ldi	r24, 0xD3	; 211
    e602:	9a e0       	ldi	r25, 0x0A	; 10
    e604:	a0 e0       	ldi	r26, 0x00	; 0
    e606:	ed b7       	in	r30, 0x3d	; 61
    e608:	fe b7       	in	r31, 0x3e	; 62
    e60a:	81 83       	std	Z+1, r24	; 0x01
    e60c:	92 83       	std	Z+2, r25	; 0x02
    e60e:	a3 83       	std	Z+3, r26	; 0x03
    e610:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    #endif
            "\n"
            );
    }

}
    e614:	cd b7       	in	r28, 0x3d	; 61
    e616:	de b7       	in	r29, 0x3e	; 62
    e618:	23 96       	adiw	r28, 0x03	; 3
    e61a:	e2 e0       	ldi	r30, 0x02	; 2
    e61c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000e620 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e620:	a5 e5       	ldi	r26, 0x55	; 85
    e622:	b2 e0       	ldi	r27, 0x02	; 2
    e624:	e6 e1       	ldi	r30, 0x16	; 22
    e626:	f3 e7       	ldi	r31, 0x73	; 115
    e628:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    e62c:	8e 01       	movw	r16, r28
    e62e:	0e 5d       	subi	r16, 0xDE	; 222
    e630:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e632:	00 97       	sbiw	r24, 0x00	; 0
    e634:	21 f0       	breq	.+8      	; 0xe63e <fatfs_ls+0x1e>
    e636:	fc 01       	movw	r30, r24
    e638:	20 81       	ld	r18, Z
    e63a:	21 11       	cpse	r18, r1
    e63c:	03 c0       	rjmp	.+6      	; 0xe644 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e63e:	62 eb       	ldi	r22, 0xB2	; 178
    e640:	72 e1       	ldi	r23, 0x12	; 18
    e642:	01 c0       	rjmp	.+2      	; 0xe646 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e644:	bc 01       	movw	r22, r24
    e646:	c8 01       	movw	r24, r16
    e648:	0e 94 c4 30 	call	0x6188	; 0x6188 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e64c:	ed b7       	in	r30, 0x3d	; 61
    e64e:	fe b7       	in	r31, 0x3e	; 62
    e650:	15 83       	std	Z+5, r17	; 0x05
    e652:	04 83       	std	Z+4, r16	; 0x04
    e654:	83 e4       	ldi	r24, 0x43	; 67
    e656:	9a e0       	ldi	r25, 0x0A	; 10
    e658:	a0 e0       	ldi	r26, 0x00	; 0
    e65a:	81 83       	std	Z+1, r24	; 0x01
    e65c:	92 83       	std	Z+2, r25	; 0x02
    e65e:	a3 83       	std	Z+3, r26	; 0x03
    e660:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    res = f_opendir(&dirs, buff);
    e664:	b8 01       	movw	r22, r16
    e666:	ce 01       	movw	r24, r28
    e668:	8e 5d       	subi	r24, 0xDE	; 222
    e66a:	9d 4f       	sbci	r25, 0xFD	; 253
    e66c:	0e 94 04 63 	call	0xc608	; 0xc608 <f_opendir>
    if (res) { put_rc(res); return; }
    e670:	00 97       	sbiw	r24, 0x00	; 0
    e672:	11 f0       	breq	.+4      	; 0xe678 <fatfs_ls+0x58>
    e674:	23 dd       	rcall	.-1466   	; 0xe0bc <put_rc>
    p1 = s1 = s2 = 0;
    e676:	8a c0       	rjmp	.+276    	; 0xe78c <fatfs_ls+0x16c>
    e678:	c0 5b       	subi	r28, 0xB0	; 176
    e67a:	dd 4f       	sbci	r29, 0xFD	; 253
    e67c:	18 82       	st	Y, r1
    e67e:	19 82       	std	Y+1, r1	; 0x01
    e680:	1a 82       	std	Y+2, r1	; 0x02
    e682:	1b 82       	std	Y+3, r1	; 0x03
    e684:	c0 55       	subi	r28, 0x50	; 80
    e686:	d2 40       	sbci	r29, 0x02	; 2
    e688:	c1 2c       	mov	r12, r1
    e68a:	d1 2c       	mov	r13, r1
    e68c:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e68e:	f1 2c       	mov	r15, r1
    e690:	be 01       	movw	r22, r28
    e692:	64 5f       	subi	r22, 0xF4	; 244
    e694:	7f 4f       	sbci	r23, 0xFF	; 255
    e696:	ce 01       	movw	r24, r28
    e698:	8e 5d       	subi	r24, 0xDE	; 222
    e69a:	9d 4f       	sbci	r25, 0xFD	; 253
    e69c:	0e 94 8a 63 	call	0xc714	; 0xc714 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e6a0:	89 2b       	or	r24, r25
    e6a2:	49 f5       	brne	.+82     	; 0xe6f6 <fatfs_ls+0xd6>
    e6a4:	8a a1       	ldd	r24, Y+34	; 0x22
    e6a6:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e6a8:	31 f1       	breq	.+76     	; 0xe6f6 <fatfs_ls+0xd6>
    e6aa:	8c 89       	ldd	r24, Y+20	; 0x14
    e6ac:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e6ae:	04 c0       	rjmp	.+8      	; 0xe6b8 <fatfs_ls+0x98>
    e6b0:	ff ef       	ldi	r31, 0xFF	; 255
    e6b2:	cf 1a       	sub	r12, r31
    e6b4:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e6b6:	1b c0       	rjmp	.+54     	; 0xe6ee <fatfs_ls+0xce>
    e6b8:	8f ef       	ldi	r24, 0xFF	; 255
    e6ba:	e8 1a       	sub	r14, r24
    e6bc:	f8 0a       	sbc	r15, r24
    e6be:	4c 85       	ldd	r20, Y+12	; 0x0c
    e6c0:	5d 85       	ldd	r21, Y+13	; 0x0d
    e6c2:	6e 85       	ldd	r22, Y+14	; 0x0e
    e6c4:	7f 85       	ldd	r23, Y+15	; 0x0f
    e6c6:	c0 5b       	subi	r28, 0xB0	; 176
    e6c8:	dd 4f       	sbci	r29, 0xFD	; 253
    e6ca:	88 81       	ld	r24, Y
    e6cc:	99 81       	ldd	r25, Y+1	; 0x01
    e6ce:	aa 81       	ldd	r26, Y+2	; 0x02
    e6d0:	bb 81       	ldd	r27, Y+3	; 0x03
    e6d2:	c0 55       	subi	r28, 0x50	; 80
    e6d4:	d2 40       	sbci	r29, 0x02	; 2
    e6d6:	84 0f       	add	r24, r20
    e6d8:	95 1f       	adc	r25, r21
    e6da:	a6 1f       	adc	r26, r22
    e6dc:	b7 1f       	adc	r27, r23
    e6de:	c0 5b       	subi	r28, 0xB0	; 176
    e6e0:	dd 4f       	sbci	r29, 0xFD	; 253
    e6e2:	88 83       	st	Y, r24
    e6e4:	99 83       	std	Y+1, r25	; 0x01
    e6e6:	aa 83       	std	Y+2, r26	; 0x02
    e6e8:	bb 83       	std	Y+3, r27	; 0x03
    e6ea:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    e6ec:	d2 40       	sbci	r29, 0x02	; 2
    e6ee:	ce 01       	movw	r24, r28
    e6f0:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e6f2:	f2 de       	rcall	.-540    	; 0xe4d8 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e6f4:	cd cf       	rjmp	.-102    	; 0xe690 <fatfs_ls+0x70>
    e6f6:	ed b7       	in	r30, 0x3d	; 61
    e6f8:	fe b7       	in	r31, 0x3e	; 62
    e6fa:	d3 86       	std	Z+11, r13	; 0x0b
    e6fc:	c2 86       	std	Z+10, r12	; 0x0a
    e6fe:	c0 5b       	subi	r28, 0xB0	; 176
    e700:	dd 4f       	sbci	r29, 0xFD	; 253
    e702:	88 81       	ld	r24, Y
    e704:	99 81       	ldd	r25, Y+1	; 0x01
    e706:	aa 81       	ldd	r26, Y+2	; 0x02
    e708:	bb 81       	ldd	r27, Y+3	; 0x03
    e70a:	c0 55       	subi	r28, 0x50	; 80
    e70c:	d2 40       	sbci	r29, 0x02	; 2
    e70e:	86 83       	std	Z+6, r24	; 0x06
    e710:	97 83       	std	Z+7, r25	; 0x07
    e712:	a0 87       	std	Z+8, r26	; 0x08
    e714:	b1 87       	std	Z+9, r27	; 0x09
    e716:	f5 82       	std	Z+5, r15	; 0x05
    e718:	e4 82       	std	Z+4, r14	; 0x04
    e71a:	8a e1       	ldi	r24, 0x1A	; 26
    e71c:	9a e0       	ldi	r25, 0x0A	; 10
    e71e:	a0 e0       	ldi	r26, 0x00	; 0
    e720:	81 83       	std	Z+1, r24	; 0x01
    e722:	92 83       	std	Z+2, r25	; 0x02
    e724:	a3 83       	std	Z+3, r26	; 0x03
    e726:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e72a:	ae 01       	movw	r20, r28
    e72c:	4c 5a       	subi	r20, 0xAC	; 172
    e72e:	5d 4f       	sbci	r21, 0xFD	; 253
    e730:	be 01       	movw	r22, r28
    e732:	60 5b       	subi	r22, 0xB0	; 176
    e734:	7d 4f       	sbci	r23, 0xFD	; 253
    e736:	c8 01       	movw	r24, r16
    e738:	0e 94 0c 64 	call	0xc818	; 0xc818 <f_getfree>
    e73c:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e73e:	31 f5       	brne	.+76     	; 0xe78c <fatfs_ls+0x16c>
    e740:	cc 5a       	subi	r28, 0xAC	; 172
    e742:	dd 4f       	sbci	r29, 0xFD	; 253
    e744:	e8 81       	ld	r30, Y
    e746:	f9 81       	ldd	r31, Y+1	; 0x01
    e748:	c4 55       	subi	r28, 0x54	; 84
    e74a:	d2 40       	sbci	r29, 0x02	; 2
    e74c:	a1 85       	ldd	r26, Z+9	; 0x09
    e74e:	b2 85       	ldd	r27, Z+10	; 0x0a
    e750:	c0 5b       	subi	r28, 0xB0	; 176
    e752:	dd 4f       	sbci	r29, 0xFD	; 253
    e754:	28 81       	ld	r18, Y
    e756:	39 81       	ldd	r19, Y+1	; 0x01
    e758:	4a 81       	ldd	r20, Y+2	; 0x02
    e75a:	5b 81       	ldd	r21, Y+3	; 0x03
    e75c:	c0 55       	subi	r28, 0x50	; 80
    e75e:	d2 40       	sbci	r29, 0x02	; 2
    e760:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
    e764:	22 e0       	ldi	r18, 0x02	; 2
    e766:	30 e0       	ldi	r19, 0x00	; 0
    e768:	40 e0       	ldi	r20, 0x00	; 0
    e76a:	50 e0       	ldi	r21, 0x00	; 0
    e76c:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
    e770:	ed b7       	in	r30, 0x3d	; 61
    e772:	fe b7       	in	r31, 0x3e	; 62
    e774:	24 83       	std	Z+4, r18	; 0x04
    e776:	35 83       	std	Z+5, r19	; 0x05
    e778:	46 83       	std	Z+6, r20	; 0x06
    e77a:	57 83       	std	Z+7, r21	; 0x07
    e77c:	85 e0       	ldi	r24, 0x05	; 5
    e77e:	9a e0       	ldi	r25, 0x0A	; 10
    e780:	a0 e0       	ldi	r26, 0x00	; 0
    e782:	81 83       	std	Z+1, r24	; 0x01
    e784:	92 83       	std	Z+2, r25	; 0x02
    e786:	a3 83       	std	Z+3, r26	; 0x03
    e788:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
}
    e78c:	cb 5a       	subi	r28, 0xAB	; 171
    e78e:	dd 4f       	sbci	r29, 0xFD	; 253
    e790:	e8 e0       	ldi	r30, 0x08	; 8
    e792:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000e796 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e796:	00 d0       	rcall	.+0      	; 0xe798 <mmc_test+0x2>
    e798:	1f 92       	push	r1
    printf("==============================\n");
    e79a:	83 ea       	ldi	r24, 0xA3	; 163
    e79c:	9a e0       	ldi	r25, 0x0A	; 10
    e79e:	a0 e0       	ldi	r26, 0x00	; 0
    e7a0:	ed b7       	in	r30, 0x3d	; 61
    e7a2:	fe b7       	in	r31, 0x3e	; 62
    e7a4:	81 83       	std	Z+1, r24	; 0x01
    e7a6:	92 83       	std	Z+2, r25	; 0x02
    e7a8:	a3 83       	std	Z+3, r26	; 0x03
    e7aa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("START MMC TEST\n");
    e7ae:	83 e9       	ldi	r24, 0x93	; 147
    e7b0:	9a e0       	ldi	r25, 0x0A	; 10
    e7b2:	a0 e0       	ldi	r26, 0x00	; 0
    e7b4:	ed b7       	in	r30, 0x3d	; 61
    e7b6:	fe b7       	in	r31, 0x3e	; 62
    e7b8:	81 83       	std	Z+1, r24	; 0x01
    e7ba:	92 83       	std	Z+2, r25	; 0x02
    e7bc:	a3 83       	std	Z+3, r26	; 0x03
    e7be:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fatfs_status("/");
    e7c2:	88 e7       	ldi	r24, 0x78	; 120
    e7c4:	98 e0       	ldi	r25, 0x08	; 8
    e7c6:	0e dd       	rcall	.-1508   	; 0xe1e4 <fatfs_status>
    printf("MMC Directory List\n");
    e7c8:	8f e7       	ldi	r24, 0x7F	; 127
    e7ca:	9a e0       	ldi	r25, 0x0A	; 10
    e7cc:	a0 e0       	ldi	r26, 0x00	; 0
    e7ce:	ed b7       	in	r30, 0x3d	; 61
    e7d0:	fe b7       	in	r31, 0x3e	; 62
    e7d2:	81 83       	std	Z+1, r24	; 0x01
    e7d4:	92 83       	std	Z+2, r25	; 0x02
    e7d6:	a3 83       	std	Z+3, r26	; 0x03
    e7d8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fatfs_ls("/");
    e7dc:	88 e7       	ldi	r24, 0x78	; 120
    e7de:	98 e0       	ldi	r25, 0x08	; 8
    e7e0:	1f df       	rcall	.-450    	; 0xe620 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e7e2:	81 e7       	ldi	r24, 0x71	; 113
    e7e4:	9a e0       	ldi	r25, 0x0A	; 10
    e7e6:	a0 e0       	ldi	r26, 0x00	; 0
    e7e8:	ed b7       	in	r30, 0x3d	; 61
    e7ea:	fe b7       	in	r31, 0x3e	; 62
    e7ec:	81 83       	std	Z+1, r24	; 0x01
    e7ee:	92 83       	std	Z+2, r25	; 0x02
    e7f0:	a3 83       	std	Z+3, r26	; 0x03
    e7f2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("==============================\n");
    e7f6:	81 e5       	ldi	r24, 0x51	; 81
    e7f8:	9a e0       	ldi	r25, 0x0A	; 10
    e7fa:	a0 e0       	ldi	r26, 0x00	; 0
    e7fc:	ed b7       	in	r30, 0x3d	; 61
    e7fe:	fe b7       	in	r31, 0x3e	; 62
    e800:	81 83       	std	Z+1, r24	; 0x01
    e802:	92 83       	std	Z+2, r25	; 0x02
    e804:	a3 83       	std	Z+3, r26	; 0x03
    e806:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
}
    e80a:	0f 90       	pop	r0
    e80c:	0f 90       	pop	r0
    e80e:	0f 90       	pop	r0
    e810:	08 95       	ret

0000e812 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e812:	ef 92       	push	r14
    e814:	ff 92       	push	r15
    e816:	0f 93       	push	r16
    e818:	1f 93       	push	r17
    e81a:	cf 93       	push	r28
    e81c:	df 93       	push	r29
    e81e:	ad b7       	in	r26, 0x3d	; 61
    e820:	be b7       	in	r27, 0x3e	; 62
    e822:	17 97       	sbiw	r26, 0x07	; 7
    e824:	0f b6       	in	r0, 0x3f	; 63
    e826:	f8 94       	cli
    e828:	be bf       	out	0x3e, r27	; 62
    e82a:	0f be       	out	0x3f, r0	; 63
    e82c:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e82e:	fb 01       	movw	r30, r22
    e830:	20 81       	ld	r18, Z
    e832:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e834:	21 15       	cp	r18, r1
    e836:	31 05       	cpc	r19, r1
    e838:	19 f4       	brne	.+6      	; 0xe840 <fatfs_tests+0x2e>
        return(0);
    e83a:	80 e0       	ldi	r24, 0x00	; 0
    e83c:	90 e0       	ldi	r25, 0x00	; 0
    e83e:	73 c0       	rjmp	.+230    	; 0xe926 <fatfs_tests+0x114>
    e840:	eb 01       	movw	r28, r22
    e842:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e844:	64 ea       	ldi	r22, 0xA4	; 164
    e846:	78 e0       	ldi	r23, 0x08	; 8
    e848:	c9 01       	movw	r24, r18
    e84a:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
    e84e:	89 2b       	or	r24, r25
    e850:	a1 f3       	breq	.-24     	; 0xe83a <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e852:	ea 80       	ldd	r14, Y+2	; 0x02
    e854:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e856:	e1 14       	cp	r14, r1
    e858:	f1 04       	cpc	r15, r1
    e85a:	21 f4       	brne	.+8      	; 0xe864 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e85c:	81 e0       	ldi	r24, 0x01	; 1
    e85e:	90 e0       	ldi	r25, 0x00	; 0
    e860:	be de       	rcall	.-644    	; 0xe5de <fatfs_help>
    e862:	5f c0       	rjmp	.+190    	; 0xe922 <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e864:	63 e6       	ldi	r22, 0x63	; 99
    e866:	76 e1       	ldi	r23, 0x16	; 22
    e868:	c7 01       	movw	r24, r14
    e86a:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
    e86e:	89 2b       	or	r24, r25
    e870:	a9 f7       	brne	.-22     	; 0xe85c <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e872:	98 01       	movw	r18, r16
    e874:	42 e0       	ldi	r20, 0x02	; 2
    e876:	50 e0       	ldi	r21, 0x00	; 0
    e878:	6a ea       	ldi	r22, 0xAA	; 170
    e87a:	78 e0       	ldi	r23, 0x08	; 8
    e87c:	c7 01       	movw	r24, r14
    e87e:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
    e882:	89 2b       	or	r24, r25
    e884:	31 f1       	breq	.+76     	; 0xe8d2 <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e886:	ed b7       	in	r30, 0x3d	; 61
    e888:	fe b7       	in	r31, 0x3e	; 62
    e88a:	17 83       	std	Z+7, r17	; 0x07
    e88c:	06 83       	std	Z+6, r16	; 0x06
    e88e:	82 e0       	ldi	r24, 0x02	; 2
    e890:	90 e0       	ldi	r25, 0x00	; 0
    e892:	95 83       	std	Z+5, r25	; 0x05
    e894:	84 83       	std	Z+4, r24	; 0x04
    e896:	83 ec       	ldi	r24, 0xC3	; 195
    e898:	9a e0       	ldi	r25, 0x0A	; 10
    e89a:	a0 e0       	ldi	r26, 0x00	; 0
    e89c:	81 83       	std	Z+1, r24	; 0x01
    e89e:	92 83       	std	Z+2, r25	; 0x02
    e8a0:	a3 83       	std	Z+3, r26	; 0x03
    e8a2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    e8a6:	7e 01       	movw	r14, r28
    e8a8:	f4 e0       	ldi	r31, 0x04	; 4
    e8aa:	ef 0e       	add	r14, r31
    e8ac:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e8ae:	c2 e0       	ldi	r28, 0x02	; 2
    e8b0:	d0 e0       	ldi	r29, 0x00	; 0
    e8b2:	c0 17       	cp	r28, r16
    e8b4:	d1 07       	cpc	r29, r17
    e8b6:	3c f4       	brge	.+14     	; 0xe8c6 <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e8b8:	f7 01       	movw	r30, r14
    e8ba:	81 91       	ld	r24, Z+
    e8bc:	91 91       	ld	r25, Z+
    e8be:	7f 01       	movw	r14, r30
    e8c0:	af de       	rcall	.-674    	; 0xe620 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e8c2:	21 96       	adiw	r28, 0x01	; 1
    e8c4:	f6 cf       	rjmp	.-20     	; 0xe8b2 <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e8c6:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    e8c8:	61 f5       	brne	.+88     	; 0xe922 <fatfs_tests+0x110>
    e8ca:	8c e0       	ldi	r24, 0x0C	; 12
    e8cc:	97 e1       	ldi	r25, 0x17	; 23
    e8ce:	a8 de       	rcall	.-688    	; 0xe620 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e8d0:	28 c0       	rjmp	.+80     	; 0xe922 <fatfs_tests+0x110>
    e8d2:	98 01       	movw	r18, r16
    e8d4:	42 e0       	ldi	r20, 0x02	; 2
    e8d6:	50 e0       	ldi	r21, 0x00	; 0
    e8d8:	6d ea       	ldi	r22, 0xAD	; 173
    e8da:	78 e0       	ldi	r23, 0x08	; 8
    e8dc:	c7 01       	movw	r24, r14
    e8de:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
    {
        mmc_test();
    e8e2:	89 2b       	or	r24, r25
    e8e4:	11 f0       	breq	.+4      	; 0xe8ea <fatfs_tests+0xd8>
    e8e6:	57 df       	rcall	.-338    	; 0xe796 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e8e8:	1c c0       	rjmp	.+56     	; 0xe922 <fatfs_tests+0x110>
    e8ea:	98 01       	movw	r18, r16
    e8ec:	42 e0       	ldi	r20, 0x02	; 2
    e8ee:	50 e0       	ldi	r21, 0x00	; 0
    e8f0:	66 eb       	ldi	r22, 0xB6	; 182
    e8f2:	78 e0       	ldi	r23, 0x08	; 8
    e8f4:	c7 01       	movw	r24, r14
    e8f6:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
    {
        mmc_init(1);
    e8fa:	89 2b       	or	r24, r25
    e8fc:	21 f0       	breq	.+8      	; 0xe906 <fatfs_tests+0xf4>
    e8fe:	81 e0       	ldi	r24, 0x01	; 1
    e900:	90 e0       	ldi	r25, 0x00	; 0
    e902:	99 da       	rcall	.-2766   	; 0xde36 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e904:	0e c0       	rjmp	.+28     	; 0xe922 <fatfs_tests+0x110>
    e906:	98 01       	movw	r18, r16
    e908:	43 e0       	ldi	r20, 0x03	; 3
    e90a:	50 e0       	ldi	r21, 0x00	; 0
    e90c:	6f eb       	ldi	r22, 0xBF	; 191
    e90e:	78 e0       	ldi	r23, 0x08	; 8
    e910:	c7 01       	movw	r24, r14
    e912:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
    e916:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    e918:	09 f4       	brne	.+2      	; 0xe91c <fatfs_tests+0x10a>
    e91a:	8f cf       	rjmp	.-226    	; 0xe83a <fatfs_tests+0x28>
    e91c:	8c 81       	ldd	r24, Y+4	; 0x04
    e91e:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e920:	61 dc       	rcall	.-1854   	; 0xe1e4 <fatfs_status>
    e922:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    e924:	90 e0       	ldi	r25, 0x00	; 0
    e926:	cd b7       	in	r28, 0x3d	; 61
    e928:	de b7       	in	r29, 0x3e	; 62
    e92a:	27 96       	adiw	r28, 0x07	; 7
    e92c:	e6 e0       	ldi	r30, 0x06	; 6
    e92e:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0000e932 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e932:	8f 92       	push	r8
    e934:	9f 92       	push	r9
    e936:	af 92       	push	r10
    e938:	bf 92       	push	r11
    e93a:	ef 92       	push	r14
    e93c:	ff 92       	push	r15
    e93e:	0f 93       	push	r16
    e940:	1f 93       	push	r17
    e942:	cf 93       	push	r28
    e944:	df 93       	push	r29
    e946:	00 d0       	rcall	.+0      	; 0xe948 <fatfs_getc+0x16>
    e948:	1f 92       	push	r1
    e94a:	cd b7       	in	r28, 0x3d	; 61
    e94c:	de b7       	in	r29, 0x3e	; 62
    e94e:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    e952:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    e956:	00 97       	sbiw	r24, 0x00	; 0
    e958:	39 f4       	brne	.+14     	; 0xe968 <fatfs_getc+0x36>
    e95a:	89 e0       	ldi	r24, 0x09	; 9
    e95c:	90 e0       	ldi	r25, 0x00	; 0
    e95e:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    e962:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    e966:	2f c0       	rjmp	.+94     	; 0xe9c6 <fatfs_getc+0x94>
    e968:	fc 01       	movw	r30, r24
    e96a:	e4 84       	ldd	r14, Z+12	; 0x0c
    e96c:	f5 84       	ldd	r15, Z+13	; 0x0d
    e96e:	e1 14       	cp	r14, r1
    e970:	f1 04       	cpc	r15, r1
    e972:	99 f3       	breq	.-26     	; 0xe95a <fatfs_getc+0x28>
    e974:	8c 01       	movw	r16, r24
    e976:	9e 01       	movw	r18, r28
    e978:	2f 5f       	subi	r18, 0xFF	; 255
    e97a:	3f 4f       	sbci	r19, 0xFF	; 255
    e97c:	41 e0       	ldi	r20, 0x01	; 1
    e97e:	50 e0       	ldi	r21, 0x00	; 0
    e980:	be 01       	movw	r22, r28
    e982:	6d 5f       	subi	r22, 0xFD	; 253
    e984:	7f 4f       	sbci	r23, 0xFF	; 255
    e986:	c7 01       	movw	r24, r14
    e988:	0e 94 3c 5b 	call	0xb678	; 0xb678 <f_read>
    e98c:	00 97       	sbiw	r24, 0x00	; 0
    e98e:	31 f4       	brne	.+12     	; 0xe99c <fatfs_getc+0x6a>
    e990:	29 81       	ldd	r18, Y+1	; 0x01
    e992:	3a 81       	ldd	r19, Y+2	; 0x02
    e994:	21 30       	cpi	r18, 0x01	; 1
    e996:	31 05       	cpc	r19, r1
    e998:	c9 f0       	breq	.+50     	; 0xe9cc <fatfs_getc+0x9a>
    e99a:	03 c0       	rjmp	.+6      	; 0xe9a2 <fatfs_getc+0x70>
    e99c:	84 31       	cpi	r24, 0x14	; 20
    e99e:	91 05       	cpc	r25, r1
    e9a0:	40 f4       	brcc	.+16     	; 0xe9b2 <fatfs_getc+0x80>
    e9a2:	fc 01       	movw	r30, r24
    e9a4:	e8 58       	subi	r30, 0x88	; 136
    e9a6:	f4 4f       	sbci	r31, 0xF4	; 244
    e9a8:	80 81       	ld	r24, Z
    e9aa:	08 2e       	mov	r0, r24
    e9ac:	00 0c       	add	r0, r0
    e9ae:	99 0b       	sbc	r25, r25
    e9b0:	02 c0       	rjmp	.+4      	; 0xe9b6 <fatfs_getc+0x84>
    e9b2:	83 e2       	ldi	r24, 0x23	; 35
    e9b4:	90 e0       	ldi	r25, 0x00	; 0
    e9b6:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    e9ba:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    e9be:	f8 01       	movw	r30, r16
    e9c0:	83 81       	ldd	r24, Z+3	; 0x03
    e9c2:	80 62       	ori	r24, 0x20	; 32
    e9c4:	83 83       	std	Z+3, r24	; 0x03
    e9c6:	8f ef       	ldi	r24, 0xFF	; 255
    e9c8:	9f ef       	ldi	r25, 0xFF	; 255
    e9ca:	28 c0       	rjmp	.+80     	; 0xea1c <fatfs_getc+0xea>
    e9cc:	8b 81       	ldd	r24, Y+3	; 0x03
    e9ce:	8d 30       	cpi	r24, 0x0D	; 13
    e9d0:	01 f5       	brne	.+64     	; 0xea12 <fatfs_getc+0xe0>
    e9d2:	f7 01       	movw	r30, r14
    e9d4:	80 88       	ldd	r8, Z+16	; 0x10
    e9d6:	91 88       	ldd	r9, Z+17	; 0x11
    e9d8:	a2 88       	ldd	r10, Z+18	; 0x12
    e9da:	b3 88       	ldd	r11, Z+19	; 0x13
    e9dc:	9e 01       	movw	r18, r28
    e9de:	2f 5f       	subi	r18, 0xFF	; 255
    e9e0:	3f 4f       	sbci	r19, 0xFF	; 255
    e9e2:	41 e0       	ldi	r20, 0x01	; 1
    e9e4:	50 e0       	ldi	r21, 0x00	; 0
    e9e6:	be 01       	movw	r22, r28
    e9e8:	6d 5f       	subi	r22, 0xFD	; 253
    e9ea:	7f 4f       	sbci	r23, 0xFF	; 255
    e9ec:	c7 01       	movw	r24, r14
    e9ee:	0e 94 3c 5b 	call	0xb678	; 0xb678 <f_read>
    e9f2:	89 2b       	or	r24, r25
    e9f4:	89 f4       	brne	.+34     	; 0xea18 <fatfs_getc+0xe6>
    e9f6:	89 81       	ldd	r24, Y+1	; 0x01
    e9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    e9fa:	01 97       	sbiw	r24, 0x01	; 1
    e9fc:	69 f4       	brne	.+26     	; 0xea18 <fatfs_getc+0xe6>
    e9fe:	8b 81       	ldd	r24, Y+3	; 0x03
    ea00:	8a 30       	cpi	r24, 0x0A	; 10
    ea02:	31 f0       	breq	.+12     	; 0xea10 <fatfs_getc+0xde>
    ea04:	b5 01       	movw	r22, r10
    ea06:	a4 01       	movw	r20, r8
    ea08:	c7 01       	movw	r24, r14
    ea0a:	0e 94 48 60 	call	0xc090	; 0xc090 <f_lseek>
    ea0e:	04 c0       	rjmp	.+8      	; 0xea18 <fatfs_getc+0xe6>
    ea10:	8b 83       	std	Y+3, r24	; 0x03
    ea12:	8b 81       	ldd	r24, Y+3	; 0x03
    ea14:	90 e0       	ldi	r25, 0x00	; 0
    ea16:	02 c0       	rjmp	.+4      	; 0xea1c <fatfs_getc+0xea>
    ea18:	8a e0       	ldi	r24, 0x0A	; 10
    ea1a:	90 e0       	ldi	r25, 0x00	; 0
    ea1c:	0f 90       	pop	r0
    ea1e:	0f 90       	pop	r0
    ea20:	0f 90       	pop	r0
    ea22:	df 91       	pop	r29
    ea24:	cf 91       	pop	r28
    ea26:	1f 91       	pop	r17
    ea28:	0f 91       	pop	r16
    ea2a:	ff 90       	pop	r15
    ea2c:	ef 90       	pop	r14
    ea2e:	bf 90       	pop	r11
    ea30:	af 90       	pop	r10
    ea32:	9f 90       	pop	r9
    ea34:	8f 90       	pop	r8
    ea36:	08 95       	ret

0000ea38 <fatfs_putc>:
    ea38:	a3 e0       	ldi	r26, 0x03	; 3
    ea3a:	b0 e0       	ldi	r27, 0x00	; 0
    ea3c:	e2 e2       	ldi	r30, 0x22	; 34
    ea3e:	f5 e7       	ldi	r31, 0x75	; 117
    ea40:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    ea44:	8b 83       	std	Y+3, r24	; 0x03
    ea46:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ea4a:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ea4e:	61 15       	cp	r22, r1
    ea50:	71 05       	cpc	r23, r1
    ea52:	39 f4       	brne	.+14     	; 0xea62 <fatfs_putc+0x2a>
    ea54:	89 e0       	ldi	r24, 0x09	; 9
    ea56:	90 e0       	ldi	r25, 0x00	; 0
    ea58:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ea5c:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ea60:	2d c0       	rjmp	.+90     	; 0xeabc <fatfs_putc+0x84>
    ea62:	fb 01       	movw	r30, r22
    ea64:	84 85       	ldd	r24, Z+12	; 0x0c
    ea66:	95 85       	ldd	r25, Z+13	; 0x0d
    ea68:	00 97       	sbiw	r24, 0x00	; 0
    ea6a:	a1 f3       	breq	.-24     	; 0xea54 <fatfs_putc+0x1c>
    ea6c:	8b 01       	movw	r16, r22
    ea6e:	9e 01       	movw	r18, r28
    ea70:	2f 5f       	subi	r18, 0xFF	; 255
    ea72:	3f 4f       	sbci	r19, 0xFF	; 255
    ea74:	41 e0       	ldi	r20, 0x01	; 1
    ea76:	50 e0       	ldi	r21, 0x00	; 0
    ea78:	be 01       	movw	r22, r28
    ea7a:	6d 5f       	subi	r22, 0xFD	; 253
    ea7c:	7f 4f       	sbci	r23, 0xFF	; 255
    ea7e:	0e 94 87 5c 	call	0xb90e	; 0xb90e <f_write>
    ea82:	00 97       	sbiw	r24, 0x00	; 0
    ea84:	31 f4       	brne	.+12     	; 0xea92 <fatfs_putc+0x5a>
    ea86:	29 81       	ldd	r18, Y+1	; 0x01
    ea88:	3a 81       	ldd	r19, Y+2	; 0x02
    ea8a:	21 30       	cpi	r18, 0x01	; 1
    ea8c:	31 05       	cpc	r19, r1
    ea8e:	c9 f0       	breq	.+50     	; 0xeac2 <fatfs_putc+0x8a>
    ea90:	03 c0       	rjmp	.+6      	; 0xea98 <fatfs_putc+0x60>
    ea92:	84 31       	cpi	r24, 0x14	; 20
    ea94:	91 05       	cpc	r25, r1
    ea96:	40 f4       	brcc	.+16     	; 0xeaa8 <fatfs_putc+0x70>
    ea98:	fc 01       	movw	r30, r24
    ea9a:	e8 58       	subi	r30, 0x88	; 136
    ea9c:	f4 4f       	sbci	r31, 0xF4	; 244
    ea9e:	80 81       	ld	r24, Z
    eaa0:	08 2e       	mov	r0, r24
    eaa2:	00 0c       	add	r0, r0
    eaa4:	99 0b       	sbc	r25, r25
    eaa6:	02 c0       	rjmp	.+4      	; 0xeaac <fatfs_putc+0x74>
    eaa8:	83 e2       	ldi	r24, 0x23	; 35
    eaaa:	90 e0       	ldi	r25, 0x00	; 0
    eaac:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    eab0:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    eab4:	f8 01       	movw	r30, r16
    eab6:	83 81       	ldd	r24, Z+3	; 0x03
    eab8:	80 62       	ori	r24, 0x20	; 32
    eaba:	83 83       	std	Z+3, r24	; 0x03
    eabc:	8f ef       	ldi	r24, 0xFF	; 255
    eabe:	9f ef       	ldi	r25, 0xFF	; 255
    eac0:	02 c0       	rjmp	.+4      	; 0xeac6 <fatfs_putc+0x8e>
    eac2:	8b 81       	ldd	r24, Y+3	; 0x03
    eac4:	90 e0       	ldi	r25, 0x00	; 0
    eac6:	23 96       	adiw	r28, 0x03	; 3
    eac8:	e4 e0       	ldi	r30, 0x04	; 4
    eaca:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0000eace <fgetc>:
    eace:	cf 93       	push	r28
    ead0:	df 93       	push	r29
    ead2:	00 d0       	rcall	.+0      	; 0xead4 <fgetc+0x6>
    ead4:	1f 92       	push	r1
    ead6:	ec 01       	movw	r28, r24
    ead8:	00 97       	sbiw	r24, 0x00	; 0
    eada:	39 f4       	brne	.+14     	; 0xeaea <fgetc+0x1c>
    eadc:	89 e0       	ldi	r24, 0x09	; 9
    eade:	90 e0       	ldi	r25, 0x00	; 0
    eae0:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    eae4:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    eae8:	40 c0       	rjmp	.+128    	; 0xeb6a <fgetc+0x9c>
    eaea:	2b 81       	ldd	r18, Y+3	; 0x03
    eaec:	20 ff       	sbrs	r18, 0
    eaee:	3d c0       	rjmp	.+122    	; 0xeb6a <fgetc+0x9c>
    eaf0:	26 ff       	sbrs	r18, 6
    eaf2:	0a c0       	rjmp	.+20     	; 0xeb08 <fgetc+0x3a>
    eaf4:	2f 7b       	andi	r18, 0xBF	; 191
    eaf6:	2b 83       	std	Y+3, r18	; 0x03
    eaf8:	8e 81       	ldd	r24, Y+6	; 0x06
    eafa:	9f 81       	ldd	r25, Y+7	; 0x07
    eafc:	01 96       	adiw	r24, 0x01	; 1
    eafe:	9f 83       	std	Y+7, r25	; 0x07
    eb00:	8e 83       	std	Y+6, r24	; 0x06
    eb02:	8a 81       	ldd	r24, Y+2	; 0x02
    eb04:	90 e0       	ldi	r25, 0x00	; 0
    eb06:	33 c0       	rjmp	.+102    	; 0xeb6e <fgetc+0xa0>
    eb08:	22 ff       	sbrs	r18, 2
    eb0a:	0d c0       	rjmp	.+26     	; 0xeb26 <fgetc+0x58>
    eb0c:	e8 81       	ld	r30, Y
    eb0e:	f9 81       	ldd	r31, Y+1	; 0x01
    eb10:	80 81       	ld	r24, Z
    eb12:	90 e0       	ldi	r25, 0x00	; 0
    eb14:	00 97       	sbiw	r24, 0x00	; 0
    eb16:	19 f4       	brne	.+6      	; 0xeb1e <fgetc+0x50>
    eb18:	20 62       	ori	r18, 0x20	; 32
    eb1a:	2b 83       	std	Y+3, r18	; 0x03
    eb1c:	26 c0       	rjmp	.+76     	; 0xeb6a <fgetc+0x9c>
    eb1e:	31 96       	adiw	r30, 0x01	; 1
    eb20:	f9 83       	std	Y+1, r31	; 0x01
    eb22:	e8 83       	st	Y, r30
    eb24:	1b c0       	rjmp	.+54     	; 0xeb5c <fgetc+0x8e>
    eb26:	ea 85       	ldd	r30, Y+10	; 0x0a
    eb28:	fb 85       	ldd	r31, Y+11	; 0x0b
    eb2a:	30 97       	sbiw	r30, 0x00	; 0
    eb2c:	59 f4       	brne	.+22     	; 0xeb44 <fgetc+0x76>
    eb2e:	8b e8       	ldi	r24, 0x8B	; 139
    eb30:	9b e0       	ldi	r25, 0x0B	; 11
    eb32:	a0 e0       	ldi	r26, 0x00	; 0
    eb34:	ed b7       	in	r30, 0x3d	; 61
    eb36:	fe b7       	in	r31, 0x3e	; 62
    eb38:	81 83       	std	Z+1, r24	; 0x01
    eb3a:	92 83       	std	Z+2, r25	; 0x02
    eb3c:	a3 83       	std	Z+3, r26	; 0x03
    eb3e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    eb42:	13 c0       	rjmp	.+38     	; 0xeb6a <fgetc+0x9c>
    eb44:	09 95       	icall
    eb46:	97 ff       	sbrs	r25, 7
    eb48:	09 c0       	rjmp	.+18     	; 0xeb5c <fgetc+0x8e>
    eb4a:	2b 81       	ldd	r18, Y+3	; 0x03
    eb4c:	02 96       	adiw	r24, 0x02	; 2
    eb4e:	11 f0       	breq	.+4      	; 0xeb54 <fgetc+0x86>
    eb50:	80 e2       	ldi	r24, 0x20	; 32
    eb52:	01 c0       	rjmp	.+2      	; 0xeb56 <fgetc+0x88>
    eb54:	80 e1       	ldi	r24, 0x10	; 16
    eb56:	82 2b       	or	r24, r18
    eb58:	8b 83       	std	Y+3, r24	; 0x03
    eb5a:	07 c0       	rjmp	.+14     	; 0xeb6a <fgetc+0x9c>
    eb5c:	2e 81       	ldd	r18, Y+6	; 0x06
    eb5e:	3f 81       	ldd	r19, Y+7	; 0x07
    eb60:	2f 5f       	subi	r18, 0xFF	; 255
    eb62:	3f 4f       	sbci	r19, 0xFF	; 255
    eb64:	3f 83       	std	Y+7, r19	; 0x07
    eb66:	2e 83       	std	Y+6, r18	; 0x06
    eb68:	02 c0       	rjmp	.+4      	; 0xeb6e <fgetc+0xa0>
    eb6a:	8f ef       	ldi	r24, 0xFF	; 255
    eb6c:	9f ef       	ldi	r25, 0xFF	; 255
    eb6e:	cd b7       	in	r28, 0x3d	; 61
    eb70:	de b7       	in	r29, 0x3e	; 62
    eb72:	23 96       	adiw	r28, 0x03	; 3
    eb74:	e2 e0       	ldi	r30, 0x02	; 2
    eb76:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000eb7a <fputc>:
    eb7a:	cf 93       	push	r28
    eb7c:	df 93       	push	r29
    eb7e:	00 d0       	rcall	.+0      	; 0xeb80 <fputc+0x6>
    eb80:	1f 92       	push	r1
    eb82:	eb 01       	movw	r28, r22
    eb84:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    eb88:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    eb8c:	20 91 a2 1c 	lds	r18, 0x1CA2	; 0x801ca2 <__iob+0x2>
    eb90:	30 91 a3 1c 	lds	r19, 0x1CA3	; 0x801ca3 <__iob+0x3>
    eb94:	62 17       	cp	r22, r18
    eb96:	73 07       	cpc	r23, r19
    eb98:	49 f0       	breq	.+18     	; 0xebac <fputc+0x32>
    eb9a:	20 91 a4 1c 	lds	r18, 0x1CA4	; 0x801ca4 <__iob+0x4>
    eb9e:	30 91 a5 1c 	lds	r19, 0x1CA5	; 0x801ca5 <__iob+0x5>
    eba2:	62 17       	cp	r22, r18
    eba4:	73 07       	cpc	r23, r19
    eba6:	11 f0       	breq	.+4      	; 0xebac <fputc+0x32>
    eba8:	47 df       	rcall	.-370    	; 0xea38 <fatfs_putc>
    ebaa:	33 c0       	rjmp	.+102    	; 0xec12 <fputc+0x98>
    ebac:	2b 81       	ldd	r18, Y+3	; 0x03
    ebae:	21 ff       	sbrs	r18, 1
    ebb0:	2e c0       	rjmp	.+92     	; 0xec0e <fputc+0x94>
    ebb2:	22 ff       	sbrs	r18, 2
    ebb4:	10 c0       	rjmp	.+32     	; 0xebd6 <fputc+0x5c>
    ebb6:	4e 81       	ldd	r20, Y+6	; 0x06
    ebb8:	5f 81       	ldd	r21, Y+7	; 0x07
    ebba:	2c 81       	ldd	r18, Y+4	; 0x04
    ebbc:	3d 81       	ldd	r19, Y+5	; 0x05
    ebbe:	42 17       	cp	r20, r18
    ebc0:	53 07       	cpc	r21, r19
    ebc2:	f4 f4       	brge	.+60     	; 0xec00 <fputc+0x86>
    ebc4:	e8 81       	ld	r30, Y
    ebc6:	f9 81       	ldd	r31, Y+1	; 0x01
    ebc8:	9f 01       	movw	r18, r30
    ebca:	2f 5f       	subi	r18, 0xFF	; 255
    ebcc:	3f 4f       	sbci	r19, 0xFF	; 255
    ebce:	39 83       	std	Y+1, r19	; 0x01
    ebd0:	28 83       	st	Y, r18
    ebd2:	80 83       	st	Z, r24
    ebd4:	15 c0       	rjmp	.+42     	; 0xec00 <fputc+0x86>
    ebd6:	e8 85       	ldd	r30, Y+8	; 0x08
    ebd8:	f9 85       	ldd	r31, Y+9	; 0x09
    ebda:	30 97       	sbiw	r30, 0x00	; 0
    ebdc:	59 f4       	brne	.+22     	; 0xebf4 <fputc+0x7a>
    ebde:	83 e7       	ldi	r24, 0x73	; 115
    ebe0:	9b e0       	ldi	r25, 0x0B	; 11
    ebe2:	a0 e0       	ldi	r26, 0x00	; 0
    ebe4:	ed b7       	in	r30, 0x3d	; 61
    ebe6:	fe b7       	in	r31, 0x3e	; 62
    ebe8:	81 83       	std	Z+1, r24	; 0x01
    ebea:	92 83       	std	Z+2, r25	; 0x02
    ebec:	a3 83       	std	Z+3, r26	; 0x03
    ebee:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    ebf2:	0d c0       	rjmp	.+26     	; 0xec0e <fputc+0x94>
    ebf4:	be 01       	movw	r22, r28
    ebf6:	09 95       	icall
    ebf8:	8f 3f       	cpi	r24, 0xFF	; 255
    ebfa:	ff ef       	ldi	r31, 0xFF	; 255
    ebfc:	9f 07       	cpc	r25, r31
    ebfe:	39 f0       	breq	.+14     	; 0xec0e <fputc+0x94>
    ec00:	2e 81       	ldd	r18, Y+6	; 0x06
    ec02:	3f 81       	ldd	r19, Y+7	; 0x07
    ec04:	2f 5f       	subi	r18, 0xFF	; 255
    ec06:	3f 4f       	sbci	r19, 0xFF	; 255
    ec08:	3f 83       	std	Y+7, r19	; 0x07
    ec0a:	2e 83       	std	Y+6, r18	; 0x06
    ec0c:	02 c0       	rjmp	.+4      	; 0xec12 <fputc+0x98>
    ec0e:	8f ef       	ldi	r24, 0xFF	; 255
    ec10:	9f ef       	ldi	r25, 0xFF	; 255
    ec12:	cd b7       	in	r28, 0x3d	; 61
    ec14:	de b7       	in	r29, 0x3e	; 62
    ec16:	23 96       	adiw	r28, 0x03	; 3
    ec18:	e2 e0       	ldi	r30, 0x02	; 2
    ec1a:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000ec1e <_fprintf_putc>:
    ec1e:	fc 01       	movw	r30, r24
    ec20:	86 2f       	mov	r24, r22
    ec22:	26 81       	ldd	r18, Z+6	; 0x06
    ec24:	37 81       	ldd	r19, Z+7	; 0x07
    ec26:	2f 5f       	subi	r18, 0xFF	; 255
    ec28:	3f 4f       	sbci	r19, 0xFF	; 255
    ec2a:	37 83       	std	Z+7, r19	; 0x07
    ec2c:	26 83       	std	Z+6, r18	; 0x06
    ec2e:	62 81       	ldd	r22, Z+2	; 0x02
    ec30:	73 81       	ldd	r23, Z+3	; 0x03
    ec32:	90 e0       	ldi	r25, 0x00	; 0
    ec34:	a2 cf       	rjmp	.-188    	; 0xeb7a <fputc>
    ec36:	08 95       	ret

0000ec38 <getchar>:
    ec38:	80 91 a0 1c 	lds	r24, 0x1CA0	; 0x801ca0 <__iob>
    ec3c:	90 91 a1 1c 	lds	r25, 0x1CA1	; 0x801ca1 <__iob+0x1>
    ec40:	46 cf       	rjmp	.-372    	; 0xeace <fgetc>
    ec42:	08 95       	ret

0000ec44 <putchar>:
    ec44:	60 91 a2 1c 	lds	r22, 0x1CA2	; 0x801ca2 <__iob+0x2>
    ec48:	70 91 a3 1c 	lds	r23, 0x1CA3	; 0x801ca3 <__iob+0x3>
    ec4c:	96 cf       	rjmp	.-212    	; 0xeb7a <fputc>
    ec4e:	08 95       	ret

0000ec50 <fgets>:
    ec50:	a0 e0       	ldi	r26, 0x00	; 0
    ec52:	b0 e0       	ldi	r27, 0x00	; 0
    ec54:	ee e2       	ldi	r30, 0x2E	; 46
    ec56:	f6 e7       	ldi	r31, 0x76	; 118
    ec58:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    ec5c:	7c 01       	movw	r14, r24
    ec5e:	6a 01       	movw	r12, r20
    ec60:	8b 01       	movw	r16, r22
    ec62:	c0 e0       	ldi	r28, 0x00	; 0
    ec64:	d0 e0       	ldi	r29, 0x00	; 0
    ec66:	01 15       	cp	r16, r1
    ec68:	11 05       	cpc	r17, r1
    ec6a:	41 f0       	breq	.+16     	; 0xec7c <fgets+0x2c>
    ec6c:	c6 01       	movw	r24, r12
    ec6e:	2f df       	rcall	.-418    	; 0xeace <fgetc>
    ec70:	8f 3f       	cpi	r24, 0xFF	; 255
    ec72:	2f ef       	ldi	r18, 0xFF	; 255
    ec74:	92 07       	cpc	r25, r18
    ec76:	39 f4       	brne	.+14     	; 0xec86 <fgets+0x36>
    ec78:	20 97       	sbiw	r28, 0x00	; 0
    ec7a:	b9 f0       	breq	.+46     	; 0xecaa <fgets+0x5a>
    ec7c:	ce 0d       	add	r28, r14
    ec7e:	df 1d       	adc	r29, r15
    ec80:	18 82       	st	Y, r1
    ec82:	c7 01       	movw	r24, r14
    ec84:	14 c0       	rjmp	.+40     	; 0xecae <fgets+0x5e>
    ec86:	8a 30       	cpi	r24, 0x0A	; 10
    ec88:	91 05       	cpc	r25, r1
    ec8a:	c1 f3       	breq	.-16     	; 0xec7c <fgets+0x2c>
    ec8c:	88 30       	cpi	r24, 0x08	; 8
    ec8e:	91 05       	cpc	r25, r1
    ec90:	21 f4       	brne	.+8      	; 0xec9a <fgets+0x4a>
    ec92:	20 97       	sbiw	r28, 0x00	; 0
    ec94:	39 f0       	breq	.+14     	; 0xeca4 <fgets+0x54>
    ec96:	21 97       	sbiw	r28, 0x01	; 1
    ec98:	05 c0       	rjmp	.+10     	; 0xeca4 <fgets+0x54>
    ec9a:	f7 01       	movw	r30, r14
    ec9c:	ec 0f       	add	r30, r28
    ec9e:	fd 1f       	adc	r31, r29
    eca0:	80 83       	st	Z, r24
    eca2:	21 96       	adiw	r28, 0x01	; 1
    eca4:	01 50       	subi	r16, 0x01	; 1
    eca6:	11 09       	sbc	r17, r1
    eca8:	de cf       	rjmp	.-68     	; 0xec66 <fgets+0x16>
    ecaa:	80 e0       	ldi	r24, 0x00	; 0
    ecac:	90 e0       	ldi	r25, 0x00	; 0
    ecae:	cd b7       	in	r28, 0x3d	; 61
    ecb0:	de b7       	in	r29, 0x3e	; 62
    ecb2:	e8 e0       	ldi	r30, 0x08	; 8
    ecb4:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000ecb8 <fputs>:
    ecb8:	0f 93       	push	r16
    ecba:	1f 93       	push	r17
    ecbc:	cf 93       	push	r28
    ecbe:	df 93       	push	r29
    ecc0:	8b 01       	movw	r16, r22
    ecc2:	ec 01       	movw	r28, r24
    ecc4:	89 91       	ld	r24, Y+
    ecc6:	88 23       	and	r24, r24
    ecc8:	41 f0       	breq	.+16     	; 0xecda <fputs+0x22>
    ecca:	b8 01       	movw	r22, r16
    eccc:	90 e0       	ldi	r25, 0x00	; 0
    ecce:	55 df       	rcall	.-342    	; 0xeb7a <fputc>
    ecd0:	8f 3f       	cpi	r24, 0xFF	; 255
    ecd2:	2f ef       	ldi	r18, 0xFF	; 255
    ecd4:	92 07       	cpc	r25, r18
    ecd6:	b1 f7       	brne	.-20     	; 0xecc4 <fputs+0xc>
    ecd8:	02 c0       	rjmp	.+4      	; 0xecde <fputs+0x26>
    ecda:	80 e0       	ldi	r24, 0x00	; 0
    ecdc:	90 e0       	ldi	r25, 0x00	; 0
    ecde:	df 91       	pop	r29
    ece0:	cf 91       	pop	r28
    ece2:	1f 91       	pop	r17
    ece4:	0f 91       	pop	r16
    ece6:	08 95       	ret

0000ece8 <puts>:
    ece8:	cf 93       	push	r28
    ecea:	df 93       	push	r29
    ecec:	ec 01       	movw	r28, r24
    ecee:	89 91       	ld	r24, Y+
    ecf0:	60 91 a2 1c 	lds	r22, 0x1CA2	; 0x801ca2 <__iob+0x2>
    ecf4:	70 91 a3 1c 	lds	r23, 0x1CA3	; 0x801ca3 <__iob+0x3>
    ecf8:	88 23       	and	r24, r24
    ecfa:	39 f0       	breq	.+14     	; 0xed0a <puts+0x22>
    ecfc:	90 e0       	ldi	r25, 0x00	; 0
    ecfe:	3d df       	rcall	.-390    	; 0xeb7a <fputc>
    ed00:	8f 3f       	cpi	r24, 0xFF	; 255
    ed02:	2f ef       	ldi	r18, 0xFF	; 255
    ed04:	92 07       	cpc	r25, r18
    ed06:	99 f7       	brne	.-26     	; 0xecee <puts+0x6>
    ed08:	03 c0       	rjmp	.+6      	; 0xed10 <puts+0x28>
    ed0a:	8a e0       	ldi	r24, 0x0A	; 10
    ed0c:	90 e0       	ldi	r25, 0x00	; 0
    ed0e:	35 df       	rcall	.-406    	; 0xeb7a <fputc>
    ed10:	df 91       	pop	r29
    ed12:	cf 91       	pop	r28
    ed14:	08 95       	ret

0000ed16 <fileno>:
    ed16:	00 97       	sbiw	r24, 0x00	; 0
    ed18:	39 f4       	brne	.+14     	; 0xed28 <fileno+0x12>
    ed1a:	89 e0       	ldi	r24, 0x09	; 9
    ed1c:	90 e0       	ldi	r25, 0x00	; 0
    ed1e:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ed22:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ed26:	0e c0       	rjmp	.+28     	; 0xed44 <fileno+0x2e>
    ed28:	e0 ea       	ldi	r30, 0xA0	; 160
    ed2a:	fc e1       	ldi	r31, 0x1C	; 28
    ed2c:	20 e0       	ldi	r18, 0x00	; 0
    ed2e:	30 e0       	ldi	r19, 0x00	; 0
    ed30:	41 91       	ld	r20, Z+
    ed32:	51 91       	ld	r21, Z+
    ed34:	84 17       	cp	r24, r20
    ed36:	95 07       	cpc	r25, r21
    ed38:	41 f0       	breq	.+16     	; 0xed4a <fileno+0x34>
    ed3a:	2f 5f       	subi	r18, 0xFF	; 255
    ed3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ed3e:	20 31       	cpi	r18, 0x10	; 16
    ed40:	31 05       	cpc	r19, r1
    ed42:	b1 f7       	brne	.-20     	; 0xed30 <fileno+0x1a>
    ed44:	8f ef       	ldi	r24, 0xFF	; 255
    ed46:	9f ef       	ldi	r25, 0xFF	; 255
    ed48:	08 95       	ret
    ed4a:	c9 01       	movw	r24, r18
    ed4c:	08 95       	ret

0000ed4e <fileno_to_stream>:
    ed4e:	80 31       	cpi	r24, 0x10	; 16
    ed50:	91 05       	cpc	r25, r1
    ed52:	48 f4       	brcc	.+18     	; 0xed66 <fileno_to_stream+0x18>
    ed54:	88 0f       	add	r24, r24
    ed56:	99 1f       	adc	r25, r25
    ed58:	fc 01       	movw	r30, r24
    ed5a:	e0 56       	subi	r30, 0x60	; 96
    ed5c:	f3 4e       	sbci	r31, 0xE3	; 227
    ed5e:	80 81       	ld	r24, Z
    ed60:	91 81       	ldd	r25, Z+1	; 0x01
    ed62:	00 97       	sbiw	r24, 0x00	; 0
    ed64:	41 f4       	brne	.+16     	; 0xed76 <fileno_to_stream+0x28>
    ed66:	89 e0       	ldi	r24, 0x09	; 9
    ed68:	90 e0       	ldi	r25, 0x00	; 0
    ed6a:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ed6e:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ed72:	80 e0       	ldi	r24, 0x00	; 0
    ed74:	90 e0       	ldi	r25, 0x00	; 0
    ed76:	08 95       	ret

0000ed78 <mctime>:
    ed78:	a4 e0       	ldi	r26, 0x04	; 4
    ed7a:	b0 e0       	ldi	r27, 0x00	; 0
    ed7c:	e2 ec       	ldi	r30, 0xC2	; 194
    ed7e:	f6 e7       	ldi	r31, 0x76	; 118
    ed80:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    ed84:	69 83       	std	Y+1, r22	; 0x01
    ed86:	7a 83       	std	Y+2, r23	; 0x02
    ed88:	8b 83       	std	Y+3, r24	; 0x03
    ed8a:	9c 83       	std	Y+4, r25	; 0x04
    ed8c:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ed90:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ed94:	ce 01       	movw	r24, r28
    ed96:	01 96       	adiw	r24, 0x01	; 1
    ed98:	0e 94 9f 3c 	call	0x793e	; 0x793e <ctime_gm>
    ed9c:	fc 01       	movw	r30, r24
    ed9e:	01 90       	ld	r0, Z+
    eda0:	00 20       	and	r0, r0
    eda2:	e9 f7       	brne	.-6      	; 0xed9e <mctime+0x26>
    eda4:	31 97       	sbiw	r30, 0x01	; 1
    eda6:	e8 1b       	sub	r30, r24
    eda8:	f9 0b       	sbc	r31, r25
    edaa:	39 f0       	breq	.+14     	; 0xedba <mctime+0x42>
    edac:	31 97       	sbiw	r30, 0x01	; 1
    edae:	e8 0f       	add	r30, r24
    edb0:	f9 1f       	adc	r31, r25
    edb2:	20 81       	ld	r18, Z
    edb4:	2a 30       	cpi	r18, 0x0A	; 10
    edb6:	09 f4       	brne	.+2      	; 0xedba <mctime+0x42>
    edb8:	10 82       	st	Z, r1
    edba:	24 96       	adiw	r28, 0x04	; 4
    edbc:	e2 e0       	ldi	r30, 0x02	; 2
    edbe:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000edc2 <basename>:
    edc2:	00 97       	sbiw	r24, 0x00	; 0
    edc4:	49 f0       	breq	.+18     	; 0xedd8 <basename+0x16>
    edc6:	fc 01       	movw	r30, r24
    edc8:	21 91       	ld	r18, Z+
    edca:	22 23       	and	r18, r18
    edcc:	21 f0       	breq	.+8      	; 0xedd6 <basename+0x14>
    edce:	2f 32       	cpi	r18, 0x2F	; 47
    edd0:	d9 f7       	brne	.-10     	; 0xedc8 <basename+0x6>
    edd2:	cf 01       	movw	r24, r30
    edd4:	f9 cf       	rjmp	.-14     	; 0xedc8 <basename+0x6>
    edd6:	08 95       	ret
    edd8:	8c e0       	ldi	r24, 0x0C	; 12
    edda:	97 e1       	ldi	r25, 0x17	; 23
    eddc:	08 95       	ret

0000edde <chdir>:
    edde:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ede2:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ede6:	0e 94 b7 5e 	call	0xbd6e	; 0xbd6e <f_chdir>
    edea:	00 97       	sbiw	r24, 0x00	; 0
    edec:	a1 f0       	breq	.+40     	; 0xee16 <chdir+0x38>
    edee:	84 31       	cpi	r24, 0x14	; 20
    edf0:	91 05       	cpc	r25, r1
    edf2:	40 f4       	brcc	.+16     	; 0xee04 <chdir+0x26>
    edf4:	fc 01       	movw	r30, r24
    edf6:	e8 58       	subi	r30, 0x88	; 136
    edf8:	f4 4f       	sbci	r31, 0xF4	; 244
    edfa:	80 81       	ld	r24, Z
    edfc:	08 2e       	mov	r0, r24
    edfe:	00 0c       	add	r0, r0
    ee00:	99 0b       	sbc	r25, r25
    ee02:	02 c0       	rjmp	.+4      	; 0xee08 <chdir+0x2a>
    ee04:	83 e2       	ldi	r24, 0x23	; 35
    ee06:	90 e0       	ldi	r25, 0x00	; 0
    ee08:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ee0c:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ee10:	8f ef       	ldi	r24, 0xFF	; 255
    ee12:	9f ef       	ldi	r25, 0xFF	; 255
    ee14:	08 95       	ret
    ee16:	80 e0       	ldi	r24, 0x00	; 0
    ee18:	90 e0       	ldi	r25, 0x00	; 0
    ee1a:	08 95       	ret

0000ee1c <chmod>:
    ee1c:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ee20:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ee24:	42 79       	andi	r20, 0x92	; 146
    ee26:	55 27       	eor	r21, r21
    ee28:	66 27       	eor	r22, r22
    ee2a:	77 27       	eor	r23, r23
    ee2c:	45 2b       	or	r20, r21
    ee2e:	46 2b       	or	r20, r22
    ee30:	47 2b       	or	r20, r23
    ee32:	19 f0       	breq	.+6      	; 0xee3a <chmod+0x1e>
    ee34:	80 e0       	ldi	r24, 0x00	; 0
    ee36:	90 e0       	ldi	r25, 0x00	; 0
    ee38:	08 95       	ret
    ee3a:	41 e0       	ldi	r20, 0x01	; 1
    ee3c:	61 e0       	ldi	r22, 0x01	; 1
    ee3e:	0e 94 98 67 	call	0xcf30	; 0xcf30 <f_chmod>
    ee42:	00 97       	sbiw	r24, 0x00	; 0
    ee44:	b9 f3       	breq	.-18     	; 0xee34 <chmod+0x18>
    ee46:	84 31       	cpi	r24, 0x14	; 20
    ee48:	91 05       	cpc	r25, r1
    ee4a:	40 f4       	brcc	.+16     	; 0xee5c <chmod+0x40>
    ee4c:	fc 01       	movw	r30, r24
    ee4e:	e8 58       	subi	r30, 0x88	; 136
    ee50:	f4 4f       	sbci	r31, 0xF4	; 244
    ee52:	80 81       	ld	r24, Z
    ee54:	08 2e       	mov	r0, r24
    ee56:	00 0c       	add	r0, r0
    ee58:	99 0b       	sbc	r25, r25
    ee5a:	02 c0       	rjmp	.+4      	; 0xee60 <chmod+0x44>
    ee5c:	83 e2       	ldi	r24, 0x23	; 35
    ee5e:	90 e0       	ldi	r25, 0x00	; 0
    ee60:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ee64:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ee68:	8f ef       	ldi	r24, 0xFF	; 255
    ee6a:	9f ef       	ldi	r25, 0xFF	; 255
    ee6c:	08 95       	ret

0000ee6e <getcwd>:
    ee6e:	cf 93       	push	r28
    ee70:	df 93       	push	r29
    ee72:	d8 2f       	mov	r29, r24
    ee74:	c9 2f       	mov	r28, r25
    ee76:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ee7a:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ee7e:	0e 94 12 5f 	call	0xbe24	; 0xbe24 <f_getcwd>
    ee82:	00 97       	sbiw	r24, 0x00	; 0
    ee84:	a1 f0       	breq	.+40     	; 0xeeae <getcwd+0x40>
    ee86:	84 31       	cpi	r24, 0x14	; 20
    ee88:	91 05       	cpc	r25, r1
    ee8a:	40 f4       	brcc	.+16     	; 0xee9c <getcwd+0x2e>
    ee8c:	fc 01       	movw	r30, r24
    ee8e:	e8 58       	subi	r30, 0x88	; 136
    ee90:	f4 4f       	sbci	r31, 0xF4	; 244
    ee92:	80 81       	ld	r24, Z
    ee94:	08 2e       	mov	r0, r24
    ee96:	00 0c       	add	r0, r0
    ee98:	99 0b       	sbc	r25, r25
    ee9a:	02 c0       	rjmp	.+4      	; 0xeea0 <getcwd+0x32>
    ee9c:	83 e2       	ldi	r24, 0x23	; 35
    ee9e:	90 e0       	ldi	r25, 0x00	; 0
    eea0:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    eea4:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    eea8:	80 e0       	ldi	r24, 0x00	; 0
    eeaa:	90 e0       	ldi	r25, 0x00	; 0
    eeac:	02 c0       	rjmp	.+4      	; 0xeeb2 <getcwd+0x44>
    eeae:	8d 2f       	mov	r24, r29
    eeb0:	9c 2f       	mov	r25, r28
    eeb2:	df 91       	pop	r29
    eeb4:	cf 91       	pop	r28
    eeb6:	08 95       	ret

0000eeb8 <mkdir>:
    eeb8:	cf 93       	push	r28
    eeba:	df 93       	push	r29
    eebc:	ec 01       	movw	r28, r24
    eebe:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    eec2:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    eec6:	41 15       	cp	r20, r1
    eec8:	51 05       	cpc	r21, r1
    eeca:	61 05       	cpc	r22, r1
    eecc:	71 05       	cpc	r23, r1
    eece:	41 f4       	brne	.+16     	; 0xeee0 <mkdir+0x28>
    eed0:	ce 01       	movw	r24, r28
    eed2:	0e 94 93 65 	call	0xcb26	; 0xcb26 <f_mkdir>
    eed6:	00 97       	sbiw	r24, 0x00	; 0
    eed8:	39 f4       	brne	.+14     	; 0xeee8 <mkdir+0x30>
    eeda:	80 e0       	ldi	r24, 0x00	; 0
    eedc:	90 e0       	ldi	r25, 0x00	; 0
    eede:	17 c0       	rjmp	.+46     	; 0xef0e <mkdir+0x56>
    eee0:	9d df       	rcall	.-198    	; 0xee1c <chmod>
    eee2:	89 2b       	or	r24, r25
    eee4:	a9 f3       	breq	.-22     	; 0xeed0 <mkdir+0x18>
    eee6:	11 c0       	rjmp	.+34     	; 0xef0a <mkdir+0x52>
    eee8:	84 31       	cpi	r24, 0x14	; 20
    eeea:	91 05       	cpc	r25, r1
    eeec:	40 f4       	brcc	.+16     	; 0xeefe <mkdir+0x46>
    eeee:	fc 01       	movw	r30, r24
    eef0:	e8 58       	subi	r30, 0x88	; 136
    eef2:	f4 4f       	sbci	r31, 0xF4	; 244
    eef4:	80 81       	ld	r24, Z
    eef6:	08 2e       	mov	r0, r24
    eef8:	00 0c       	add	r0, r0
    eefa:	99 0b       	sbc	r25, r25
    eefc:	02 c0       	rjmp	.+4      	; 0xef02 <mkdir+0x4a>
    eefe:	83 e2       	ldi	r24, 0x23	; 35
    ef00:	90 e0       	ldi	r25, 0x00	; 0
    ef02:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ef06:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ef0a:	8f ef       	ldi	r24, 0xFF	; 255
    ef0c:	9f ef       	ldi	r25, 0xFF	; 255
    ef0e:	df 91       	pop	r29
    ef10:	cf 91       	pop	r28
    ef12:	08 95       	ret

0000ef14 <rename>:
    ef14:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ef18:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ef1c:	0e 94 83 66 	call	0xcd06	; 0xcd06 <f_rename>
    ef20:	00 97       	sbiw	r24, 0x00	; 0
    ef22:	a1 f0       	breq	.+40     	; 0xef4c <rename+0x38>
    ef24:	84 31       	cpi	r24, 0x14	; 20
    ef26:	91 05       	cpc	r25, r1
    ef28:	40 f4       	brcc	.+16     	; 0xef3a <rename+0x26>
    ef2a:	fc 01       	movw	r30, r24
    ef2c:	e8 58       	subi	r30, 0x88	; 136
    ef2e:	f4 4f       	sbci	r31, 0xF4	; 244
    ef30:	80 81       	ld	r24, Z
    ef32:	08 2e       	mov	r0, r24
    ef34:	00 0c       	add	r0, r0
    ef36:	99 0b       	sbc	r25, r25
    ef38:	02 c0       	rjmp	.+4      	; 0xef3e <rename+0x2a>
    ef3a:	83 e2       	ldi	r24, 0x23	; 35
    ef3c:	90 e0       	ldi	r25, 0x00	; 0
    ef3e:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ef42:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ef46:	8f ef       	ldi	r24, 0xFF	; 255
    ef48:	9f ef       	ldi	r25, 0xFF	; 255
    ef4a:	08 95       	ret
    ef4c:	80 e0       	ldi	r24, 0x00	; 0
    ef4e:	90 e0       	ldi	r25, 0x00	; 0
    ef50:	08 95       	ret

0000ef52 <unlink>:
    ef52:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    ef56:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    ef5a:	0e 94 ec 64 	call	0xc9d8	; 0xc9d8 <f_unlink>
    ef5e:	00 97       	sbiw	r24, 0x00	; 0
    ef60:	a1 f0       	breq	.+40     	; 0xef8a <unlink+0x38>
    ef62:	84 31       	cpi	r24, 0x14	; 20
    ef64:	91 05       	cpc	r25, r1
    ef66:	40 f4       	brcc	.+16     	; 0xef78 <unlink+0x26>
    ef68:	fc 01       	movw	r30, r24
    ef6a:	e8 58       	subi	r30, 0x88	; 136
    ef6c:	f4 4f       	sbci	r31, 0xF4	; 244
    ef6e:	80 81       	ld	r24, Z
    ef70:	08 2e       	mov	r0, r24
    ef72:	00 0c       	add	r0, r0
    ef74:	99 0b       	sbc	r25, r25
    ef76:	02 c0       	rjmp	.+4      	; 0xef7c <unlink+0x2a>
    ef78:	83 e2       	ldi	r24, 0x23	; 35
    ef7a:	90 e0       	ldi	r25, 0x00	; 0
    ef7c:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    ef80:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    ef84:	8f ef       	ldi	r24, 0xFF	; 255
    ef86:	9f ef       	ldi	r25, 0xFF	; 255
    ef88:	08 95       	ret
    ef8a:	80 e0       	ldi	r24, 0x00	; 0
    ef8c:	90 e0       	ldi	r25, 0x00	; 0
    ef8e:	08 95       	ret

0000ef90 <rmdir>:
    ef90:	e0 cf       	rjmp	.-64     	; 0xef52 <unlink>
    ef92:	08 95       	ret

0000ef94 <closedir>:
    ef94:	0e 94 75 63 	call	0xc6ea	; 0xc6ea <f_closedir>
    ef98:	00 97       	sbiw	r24, 0x00	; 0
    ef9a:	a1 f0       	breq	.+40     	; 0xefc4 <closedir+0x30>
    ef9c:	84 31       	cpi	r24, 0x14	; 20
    ef9e:	91 05       	cpc	r25, r1
    efa0:	40 f4       	brcc	.+16     	; 0xefb2 <closedir+0x1e>
    efa2:	fc 01       	movw	r30, r24
    efa4:	e8 58       	subi	r30, 0x88	; 136
    efa6:	f4 4f       	sbci	r31, 0xF4	; 244
    efa8:	80 81       	ld	r24, Z
    efaa:	08 2e       	mov	r0, r24
    efac:	00 0c       	add	r0, r0
    efae:	99 0b       	sbc	r25, r25
    efb0:	02 c0       	rjmp	.+4      	; 0xefb6 <closedir+0x22>
    efb2:	83 e2       	ldi	r24, 0x23	; 35
    efb4:	90 e0       	ldi	r25, 0x00	; 0
    efb6:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    efba:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    efbe:	8f ef       	ldi	r24, 0xFF	; 255
    efc0:	9f ef       	ldi	r25, 0xFF	; 255
    efc2:	08 95       	ret
    efc4:	80 e0       	ldi	r24, 0x00	; 0
    efc6:	90 e0       	ldi	r25, 0x00	; 0
    efc8:	08 95       	ret

0000efca <opendir>:
    efca:	bc 01       	movw	r22, r24
    efcc:	88 e1       	ldi	r24, 0x18	; 24
    efce:	99 e1       	ldi	r25, 0x19	; 25
    efd0:	0e 94 04 63 	call	0xc608	; 0xc608 <f_opendir>
    efd4:	00 97       	sbiw	r24, 0x00	; 0
    efd6:	a1 f0       	breq	.+40     	; 0xf000 <opendir+0x36>
    efd8:	84 31       	cpi	r24, 0x14	; 20
    efda:	91 05       	cpc	r25, r1
    efdc:	40 f4       	brcc	.+16     	; 0xefee <opendir+0x24>
    efde:	fc 01       	movw	r30, r24
    efe0:	e8 58       	subi	r30, 0x88	; 136
    efe2:	f4 4f       	sbci	r31, 0xF4	; 244
    efe4:	80 81       	ld	r24, Z
    efe6:	08 2e       	mov	r0, r24
    efe8:	00 0c       	add	r0, r0
    efea:	99 0b       	sbc	r25, r25
    efec:	02 c0       	rjmp	.+4      	; 0xeff2 <opendir+0x28>
    efee:	83 e2       	ldi	r24, 0x23	; 35
    eff0:	90 e0       	ldi	r25, 0x00	; 0
    eff2:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    eff6:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    effa:	80 e0       	ldi	r24, 0x00	; 0
    effc:	90 e0       	ldi	r25, 0x00	; 0
    effe:	08 95       	ret
    f000:	88 e1       	ldi	r24, 0x18	; 24
    f002:	99 e1       	ldi	r25, 0x19	; 25
    f004:	08 95       	ret

0000f006 <readdir>:
    f006:	a6 e1       	ldi	r26, 0x16	; 22
    f008:	b1 e0       	ldi	r27, 0x01	; 1
    f00a:	e9 e0       	ldi	r30, 0x09	; 9
    f00c:	f8 e7       	ldi	r31, 0x78	; 120
    f00e:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    f012:	10 92 19 18 	sts	0x1819, r1	; 0x801819 <_de>
    f016:	be 01       	movw	r22, r28
    f018:	6f 5f       	subi	r22, 0xFF	; 255
    f01a:	7f 4f       	sbci	r23, 0xFF	; 255
    f01c:	0e 94 8a 63 	call	0xc714	; 0xc714 <f_readdir>
    f020:	00 97       	sbiw	r24, 0x00	; 0
    f022:	a1 f0       	breq	.+40     	; 0xf04c <readdir+0x46>
    f024:	84 31       	cpi	r24, 0x14	; 20
    f026:	91 05       	cpc	r25, r1
    f028:	40 f4       	brcc	.+16     	; 0xf03a <readdir+0x34>
    f02a:	fc 01       	movw	r30, r24
    f02c:	e8 58       	subi	r30, 0x88	; 136
    f02e:	f4 4f       	sbci	r31, 0xF4	; 244
    f030:	80 81       	ld	r24, Z
    f032:	08 2e       	mov	r0, r24
    f034:	00 0c       	add	r0, r0
    f036:	99 0b       	sbc	r25, r25
    f038:	02 c0       	rjmp	.+4      	; 0xf03e <readdir+0x38>
    f03a:	83 e2       	ldi	r24, 0x23	; 35
    f03c:	90 e0       	ldi	r25, 0x00	; 0
    f03e:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f042:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f046:	80 e0       	ldi	r24, 0x00	; 0
    f048:	90 e0       	ldi	r25, 0x00	; 0
    f04a:	16 c0       	rjmp	.+44     	; 0xf078 <readdir+0x72>
    f04c:	be 01       	movw	r22, r28
    f04e:	69 5e       	subi	r22, 0xE9	; 233
    f050:	7f 4f       	sbci	r23, 0xFF	; 255
    f052:	fb 01       	movw	r30, r22
    f054:	01 90       	ld	r0, Z+
    f056:	00 20       	and	r0, r0
    f058:	e9 f7       	brne	.-6      	; 0xf054 <readdir+0x4e>
    f05a:	31 97       	sbiw	r30, 0x01	; 1
    f05c:	8f 01       	movw	r16, r30
    f05e:	06 1b       	sub	r16, r22
    f060:	17 0b       	sbc	r17, r23
    f062:	a8 01       	movw	r20, r16
    f064:	89 e1       	ldi	r24, 0x19	; 25
    f066:	98 e1       	ldi	r25, 0x18	; 24
    f068:	0e 94 cf 30 	call	0x619e	; 0x619e <strncpy>
    f06c:	f8 01       	movw	r30, r16
    f06e:	e7 5e       	subi	r30, 0xE7	; 231
    f070:	f7 4e       	sbci	r31, 0xE7	; 231
    f072:	10 82       	st	Z, r1
    f074:	89 e1       	ldi	r24, 0x19	; 25
    f076:	98 e1       	ldi	r25, 0x18	; 24
    f078:	ca 5e       	subi	r28, 0xEA	; 234
    f07a:	de 4f       	sbci	r29, 0xFE	; 254
    f07c:	e4 e0       	ldi	r30, 0x04	; 4
    f07e:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0000f082 <perror>:
    f082:	ad b7       	in	r26, 0x3d	; 61
    f084:	be b7       	in	r27, 0x3e	; 62
    f086:	17 97       	sbiw	r26, 0x07	; 7
    f088:	0f b6       	in	r0, 0x3f	; 63
    f08a:	f8 94       	cli
    f08c:	be bf       	out	0x3e, r27	; 62
    f08e:	0f be       	out	0x3f, r0	; 63
    f090:	ad bf       	out	0x3d, r26	; 61
    f092:	20 91 9e 1c 	lds	r18, 0x1C9E	; 0x801c9e <errno>
    f096:	30 91 9f 1c 	lds	r19, 0x1C9F	; 0x801c9f <errno+0x1>
    f09a:	23 32       	cpi	r18, 0x23	; 35
    f09c:	31 05       	cpc	r19, r1
    f09e:	40 f4       	brcc	.+16     	; 0xf0b0 <perror+0x2e>
    f0a0:	22 0f       	add	r18, r18
    f0a2:	33 1f       	adc	r19, r19
    f0a4:	f9 01       	movw	r30, r18
    f0a6:	ed 5b       	subi	r30, 0xBD	; 189
    f0a8:	fe 4f       	sbci	r31, 0xFE	; 254
    f0aa:	20 81       	ld	r18, Z
    f0ac:	31 81       	ldd	r19, Z+1	; 0x01
    f0ae:	04 c0       	rjmp	.+8      	; 0xf0b8 <perror+0x36>
    f0b0:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <sys_errlist+0x46>
    f0b4:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <sys_errlist+0x47>
    f0b8:	00 97       	sbiw	r24, 0x00	; 0
    f0ba:	99 f0       	breq	.+38     	; 0xf0e2 <perror+0x60>
    f0bc:	fc 01       	movw	r30, r24
    f0be:	40 81       	ld	r20, Z
    f0c0:	44 23       	and	r20, r20
    f0c2:	79 f0       	breq	.+30     	; 0xf0e2 <perror+0x60>
    f0c4:	ed b7       	in	r30, 0x3d	; 61
    f0c6:	fe b7       	in	r31, 0x3e	; 62
    f0c8:	37 83       	std	Z+7, r19	; 0x07
    f0ca:	26 83       	std	Z+6, r18	; 0x06
    f0cc:	95 83       	std	Z+5, r25	; 0x05
    f0ce:	84 83       	std	Z+4, r24	; 0x04
    f0d0:	8f e5       	ldi	r24, 0x5F	; 95
    f0d2:	9b e0       	ldi	r25, 0x0B	; 11
    f0d4:	a0 e0       	ldi	r26, 0x00	; 0
    f0d6:	81 83       	std	Z+1, r24	; 0x01
    f0d8:	92 83       	std	Z+2, r25	; 0x02
    f0da:	a3 83       	std	Z+3, r26	; 0x03
    f0dc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    f0e0:	0c c0       	rjmp	.+24     	; 0xf0fa <perror+0x78>
    f0e2:	ed b7       	in	r30, 0x3d	; 61
    f0e4:	fe b7       	in	r31, 0x3e	; 62
    f0e6:	35 83       	std	Z+5, r19	; 0x05
    f0e8:	24 83       	std	Z+4, r18	; 0x04
    f0ea:	8b e5       	ldi	r24, 0x5B	; 91
    f0ec:	9b e0       	ldi	r25, 0x0B	; 11
    f0ee:	a0 e0       	ldi	r26, 0x00	; 0
    f0f0:	81 83       	std	Z+1, r24	; 0x01
    f0f2:	92 83       	std	Z+2, r25	; 0x02
    f0f4:	a3 83       	std	Z+3, r26	; 0x03
    f0f6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    f0fa:	ad b7       	in	r26, 0x3d	; 61
    f0fc:	be b7       	in	r27, 0x3e	; 62
    f0fe:	17 96       	adiw	r26, 0x07	; 7
    f100:	0f b6       	in	r0, 0x3f	; 63
    f102:	f8 94       	cli
    f104:	be bf       	out	0x3e, r27	; 62
    f106:	0f be       	out	0x3f, r0	; 63
    f108:	ad bf       	out	0x3d, r26	; 61
    f10a:	08 95       	ret

0000f10c <fdevopen>:
    f10c:	0f 93       	push	r16
    f10e:	1f 93       	push	r17
    f110:	cf 93       	push	r28
    f112:	df 93       	push	r29
    f114:	00 97       	sbiw	r24, 0x00	; 0
    f116:	31 f4       	brne	.+12     	; 0xf124 <fdevopen+0x18>
    f118:	61 15       	cp	r22, r1
    f11a:	71 05       	cpc	r23, r1
    f11c:	19 f4       	brne	.+6      	; 0xf124 <fdevopen+0x18>
    f11e:	80 e0       	ldi	r24, 0x00	; 0
    f120:	90 e0       	ldi	r25, 0x00	; 0
    f122:	3a c0       	rjmp	.+116    	; 0xf198 <fdevopen+0x8c>
    f124:	8b 01       	movw	r16, r22
    f126:	ec 01       	movw	r28, r24
    f128:	6e e0       	ldi	r22, 0x0E	; 14
    f12a:	70 e0       	ldi	r23, 0x00	; 0
    f12c:	81 e0       	ldi	r24, 0x01	; 1
    f12e:	90 e0       	ldi	r25, 0x00	; 0
    f130:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    f134:	fc 01       	movw	r30, r24
    f136:	89 2b       	or	r24, r25
    f138:	91 f3       	breq	.-28     	; 0xf11e <fdevopen+0x12>
    f13a:	80 e8       	ldi	r24, 0x80	; 128
    f13c:	83 83       	std	Z+3, r24	; 0x03
    f13e:	01 15       	cp	r16, r1
    f140:	11 05       	cpc	r17, r1
    f142:	71 f0       	breq	.+28     	; 0xf160 <fdevopen+0x54>
    f144:	13 87       	std	Z+11, r17	; 0x0b
    f146:	02 87       	std	Z+10, r16	; 0x0a
    f148:	81 e8       	ldi	r24, 0x81	; 129
    f14a:	83 83       	std	Z+3, r24	; 0x03
    f14c:	80 91 a0 1c 	lds	r24, 0x1CA0	; 0x801ca0 <__iob>
    f150:	90 91 a1 1c 	lds	r25, 0x1CA1	; 0x801ca1 <__iob+0x1>
    f154:	89 2b       	or	r24, r25
    f156:	21 f4       	brne	.+8      	; 0xf160 <fdevopen+0x54>
    f158:	f0 93 a1 1c 	sts	0x1CA1, r31	; 0x801ca1 <__iob+0x1>
    f15c:	e0 93 a0 1c 	sts	0x1CA0, r30	; 0x801ca0 <__iob>
    f160:	20 97       	sbiw	r28, 0x00	; 0
    f162:	c9 f0       	breq	.+50     	; 0xf196 <fdevopen+0x8a>
    f164:	d1 87       	std	Z+9, r29	; 0x09
    f166:	c0 87       	std	Z+8, r28	; 0x08
    f168:	83 81       	ldd	r24, Z+3	; 0x03
    f16a:	82 60       	ori	r24, 0x02	; 2
    f16c:	83 83       	std	Z+3, r24	; 0x03
    f16e:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <__iob+0x2>
    f172:	90 91 a3 1c 	lds	r25, 0x1CA3	; 0x801ca3 <__iob+0x3>
    f176:	89 2b       	or	r24, r25
    f178:	21 f4       	brne	.+8      	; 0xf182 <fdevopen+0x76>
    f17a:	f0 93 a3 1c 	sts	0x1CA3, r31	; 0x801ca3 <__iob+0x3>
    f17e:	e0 93 a2 1c 	sts	0x1CA2, r30	; 0x801ca2 <__iob+0x2>
    f182:	80 91 a4 1c 	lds	r24, 0x1CA4	; 0x801ca4 <__iob+0x4>
    f186:	90 91 a5 1c 	lds	r25, 0x1CA5	; 0x801ca5 <__iob+0x5>
    f18a:	89 2b       	or	r24, r25
    f18c:	21 f4       	brne	.+8      	; 0xf196 <fdevopen+0x8a>
    f18e:	f0 93 a5 1c 	sts	0x1CA5, r31	; 0x801ca5 <__iob+0x5>
    f192:	e0 93 a4 1c 	sts	0x1CA4, r30	; 0x801ca4 <__iob+0x4>
    f196:	cf 01       	movw	r24, r30
    f198:	df 91       	pop	r29
    f19a:	cf 91       	pop	r28
    f19c:	1f 91       	pop	r17
    f19e:	0f 91       	pop	r16
    f1a0:	08 95       	ret

0000f1a2 <fat_time_to_unix>:
    f1a2:	a6 e1       	ldi	r26, 0x16	; 22
    f1a4:	b0 e0       	ldi	r27, 0x00	; 0
    f1a6:	e7 ed       	ldi	r30, 0xD7	; 215
    f1a8:	f8 e7       	ldi	r31, 0x78	; 120
    f1aa:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    f1ae:	fe 01       	movw	r30, r28
    f1b0:	31 96       	adiw	r30, 0x01	; 1
    f1b2:	26 e1       	ldi	r18, 0x16	; 22
    f1b4:	df 01       	movw	r26, r30
    f1b6:	1d 92       	st	X+, r1
    f1b8:	2a 95       	dec	r18
    f1ba:	e9 f7       	brne	.-6      	; 0xf1b6 <fat_time_to_unix+0x14>
    f1bc:	9b 01       	movw	r18, r22
    f1be:	22 0f       	add	r18, r18
    f1c0:	33 1f       	adc	r19, r19
    f1c2:	2e 73       	andi	r18, 0x3E	; 62
    f1c4:	33 27       	eor	r19, r19
    f1c6:	3a 83       	std	Y+2, r19	; 0x02
    f1c8:	29 83       	std	Y+1, r18	; 0x01
    f1ca:	9b 01       	movw	r18, r22
    f1cc:	55 e0       	ldi	r21, 0x05	; 5
    f1ce:	36 95       	lsr	r19
    f1d0:	27 95       	ror	r18
    f1d2:	5a 95       	dec	r21
    f1d4:	e1 f7       	brne	.-8      	; 0xf1ce <fat_time_to_unix+0x2c>
    f1d6:	2f 73       	andi	r18, 0x3F	; 63
    f1d8:	33 27       	eor	r19, r19
    f1da:	3c 83       	std	Y+4, r19	; 0x04
    f1dc:	2b 83       	std	Y+3, r18	; 0x03
    f1de:	27 2f       	mov	r18, r23
    f1e0:	26 95       	lsr	r18
    f1e2:	26 95       	lsr	r18
    f1e4:	26 95       	lsr	r18
    f1e6:	2d 83       	std	Y+5, r18	; 0x05
    f1e8:	1e 82       	std	Y+6, r1	; 0x06
    f1ea:	9c 01       	movw	r18, r24
    f1ec:	2f 71       	andi	r18, 0x1F	; 31
    f1ee:	33 27       	eor	r19, r19
    f1f0:	38 87       	std	Y+8, r19	; 0x08
    f1f2:	2f 83       	std	Y+7, r18	; 0x07
    f1f4:	9c 01       	movw	r18, r24
    f1f6:	65 e0       	ldi	r22, 0x05	; 5
    f1f8:	36 95       	lsr	r19
    f1fa:	27 95       	ror	r18
    f1fc:	6a 95       	dec	r22
    f1fe:	e1 f7       	brne	.-8      	; 0xf1f8 <fat_time_to_unix+0x56>
    f200:	2f 70       	andi	r18, 0x0F	; 15
    f202:	33 27       	eor	r19, r19
    f204:	21 50       	subi	r18, 0x01	; 1
    f206:	31 09       	sbc	r19, r1
    f208:	3a 87       	std	Y+10, r19	; 0x0a
    f20a:	29 87       	std	Y+9, r18	; 0x09
    f20c:	9c 01       	movw	r18, r24
    f20e:	23 2f       	mov	r18, r19
    f210:	33 27       	eor	r19, r19
    f212:	26 95       	lsr	r18
    f214:	20 5b       	subi	r18, 0xB0	; 176
    f216:	3f 4f       	sbci	r19, 0xFF	; 255
    f218:	3c 87       	std	Y+12, r19	; 0x0c
    f21a:	2b 87       	std	Y+11, r18	; 0x0b
    f21c:	cf 01       	movw	r24, r30
    f21e:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <timegm>
    f222:	66 96       	adiw	r28, 0x16	; 22
    f224:	e2 e0       	ldi	r30, 0x02	; 2
    f226:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000f22a <stat>:
    f22a:	a6 e1       	ldi	r26, 0x16	; 22
    f22c:	b1 e0       	ldi	r27, 0x01	; 1
    f22e:	eb e1       	ldi	r30, 0x1B	; 27
    f230:	f9 e7       	ldi	r31, 0x79	; 121
    f232:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
    f236:	6c 01       	movw	r12, r24
    f238:	8b 01       	movw	r16, r22
    f23a:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f23e:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    f242:	6e ec       	ldi	r22, 0xCE	; 206
    f244:	78 e0       	ldi	r23, 0x08	; 8
    f246:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
    f24a:	89 2b       	or	r24, r25
    f24c:	01 f1       	breq	.+64     	; 0xf28e <stat+0x64>
    f24e:	f8 01       	movw	r30, r16
    f250:	14 a2       	std	Z+36, r1	; 0x24
    f252:	15 a2       	std	Z+37, r1	; 0x25
    f254:	16 a2       	std	Z+38, r1	; 0x26
    f256:	17 a2       	std	Z+39, r1	; 0x27
    f258:	10 a6       	std	Z+40, r1	; 0x28
    f25a:	11 a6       	std	Z+41, r1	; 0x29
    f25c:	12 a6       	std	Z+42, r1	; 0x2a
    f25e:	13 a6       	std	Z+43, r1	; 0x2b
    f260:	14 a6       	std	Z+44, r1	; 0x2c
    f262:	15 a6       	std	Z+45, r1	; 0x2d
    f264:	16 a6       	std	Z+46, r1	; 0x2e
    f266:	17 a6       	std	Z+47, r1	; 0x2f
    f268:	11 8a       	std	Z+17, r1	; 0x11
    f26a:	10 8a       	std	Z+16, r1	; 0x10
    f26c:	13 8a       	std	Z+19, r1	; 0x13
    f26e:	12 8a       	std	Z+18, r1	; 0x12
    f270:	10 8e       	std	Z+24, r1	; 0x18
    f272:	11 8e       	std	Z+25, r1	; 0x19
    f274:	12 8e       	std	Z+26, r1	; 0x1a
    f276:	13 8e       	std	Z+27, r1	; 0x1b
    f278:	80 e0       	ldi	r24, 0x00	; 0
    f27a:	90 e4       	ldi	r25, 0x40	; 64
    f27c:	a0 e0       	ldi	r26, 0x00	; 0
    f27e:	b0 e0       	ldi	r27, 0x00	; 0
    f280:	80 87       	std	Z+8, r24	; 0x08
    f282:	91 87       	std	Z+9, r25	; 0x09
    f284:	a2 87       	std	Z+10, r26	; 0x0a
    f286:	b3 87       	std	Z+11, r27	; 0x0b
    f288:	e1 2c       	mov	r14, r1
    f28a:	f1 2c       	mov	r15, r1
    f28c:	62 c0       	rjmp	.+196    	; 0xf352 <stat+0x128>
    f28e:	68 e7       	ldi	r22, 0x78	; 120
    f290:	78 e0       	ldi	r23, 0x08	; 8
    f292:	c6 01       	movw	r24, r12
    f294:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
    f298:	89 2b       	or	r24, r25
    f29a:	c9 f6       	brne	.-78     	; 0xf24e <stat+0x24>
    f29c:	62 eb       	ldi	r22, 0xB2	; 178
    f29e:	72 e1       	ldi	r23, 0x12	; 18
    f2a0:	c6 01       	movw	r24, r12
    f2a2:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
    f2a6:	7c 01       	movw	r14, r24
    f2a8:	89 2b       	or	r24, r25
    f2aa:	89 f6       	brne	.-94     	; 0xf24e <stat+0x24>
    f2ac:	be 01       	movw	r22, r28
    f2ae:	6f 5f       	subi	r22, 0xFF	; 255
    f2b0:	7f 4f       	sbci	r23, 0xFF	; 255
    f2b2:	c6 01       	movw	r24, r12
    f2b4:	0e 94 ce 63 	call	0xc79c	; 0xc79c <f_stat>
    f2b8:	00 97       	sbiw	r24, 0x00	; 0
    f2ba:	a9 f0       	breq	.+42     	; 0xf2e6 <stat+0xbc>
    f2bc:	84 31       	cpi	r24, 0x14	; 20
    f2be:	91 05       	cpc	r25, r1
    f2c0:	40 f4       	brcc	.+16     	; 0xf2d2 <stat+0xa8>
    f2c2:	fc 01       	movw	r30, r24
    f2c4:	e8 58       	subi	r30, 0x88	; 136
    f2c6:	f4 4f       	sbci	r31, 0xF4	; 244
    f2c8:	80 81       	ld	r24, Z
    f2ca:	08 2e       	mov	r0, r24
    f2cc:	00 0c       	add	r0, r0
    f2ce:	99 0b       	sbc	r25, r25
    f2d0:	02 c0       	rjmp	.+4      	; 0xf2d6 <stat+0xac>
    f2d2:	83 e2       	ldi	r24, 0x23	; 35
    f2d4:	90 e0       	ldi	r25, 0x00	; 0
    f2d6:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f2da:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f2de:	ee 24       	eor	r14, r14
    f2e0:	ea 94       	dec	r14
    f2e2:	fe 2c       	mov	r15, r14
    f2e4:	36 c0       	rjmp	.+108    	; 0xf352 <stat+0x128>
    f2e6:	89 81       	ldd	r24, Y+1	; 0x01
    f2e8:	9a 81       	ldd	r25, Y+2	; 0x02
    f2ea:	ab 81       	ldd	r26, Y+3	; 0x03
    f2ec:	bc 81       	ldd	r27, Y+4	; 0x04
    f2ee:	f8 01       	movw	r30, r16
    f2f0:	80 8f       	std	Z+24, r24	; 0x18
    f2f2:	91 8f       	std	Z+25, r25	; 0x19
    f2f4:	a2 8f       	std	Z+26, r26	; 0x1a
    f2f6:	b3 8f       	std	Z+27, r27	; 0x1b
    f2f8:	6f 81       	ldd	r22, Y+7	; 0x07
    f2fa:	78 85       	ldd	r23, Y+8	; 0x08
    f2fc:	8d 81       	ldd	r24, Y+5	; 0x05
    f2fe:	9e 81       	ldd	r25, Y+6	; 0x06
    f300:	50 df       	rcall	.-352    	; 0xf1a2 <fat_time_to_unix>
    f302:	f8 01       	movw	r30, r16
    f304:	64 a3       	std	Z+36, r22	; 0x24
    f306:	75 a3       	std	Z+37, r23	; 0x25
    f308:	86 a3       	std	Z+38, r24	; 0x26
    f30a:	97 a3       	std	Z+39, r25	; 0x27
    f30c:	60 a7       	std	Z+40, r22	; 0x28
    f30e:	71 a7       	std	Z+41, r23	; 0x29
    f310:	82 a7       	std	Z+42, r24	; 0x2a
    f312:	93 a7       	std	Z+43, r25	; 0x2b
    f314:	64 a7       	std	Z+44, r22	; 0x2c
    f316:	75 a7       	std	Z+45, r23	; 0x2d
    f318:	86 a7       	std	Z+46, r24	; 0x2e
    f31a:	97 a7       	std	Z+47, r25	; 0x2f
    f31c:	29 85       	ldd	r18, Y+9	; 0x09
    f31e:	20 fd       	sbrc	r18, 0
    f320:	03 c0       	rjmp	.+6      	; 0xf328 <stat+0xfe>
    f322:	8f ef       	ldi	r24, 0xFF	; 255
    f324:	91 e0       	ldi	r25, 0x01	; 1
    f326:	02 c0       	rjmp	.+4      	; 0xf32c <stat+0x102>
    f328:	8d e6       	ldi	r24, 0x6D	; 109
    f32a:	91 e0       	ldi	r25, 0x01	; 1
    f32c:	48 ee       	ldi	r20, 0xE8	; 232
    f32e:	53 e0       	ldi	r21, 0x03	; 3
    f330:	f8 01       	movw	r30, r16
    f332:	51 8b       	std	Z+17, r21	; 0x11
    f334:	40 8b       	std	Z+16, r20	; 0x10
    f336:	53 8b       	std	Z+19, r21	; 0x13
    f338:	42 8b       	std	Z+18, r20	; 0x12
    f33a:	24 ff       	sbrs	r18, 4
    f33c:	02 c0       	rjmp	.+4      	; 0xf342 <stat+0x118>
    f33e:	90 64       	ori	r25, 0x40	; 64
    f340:	01 c0       	rjmp	.+2      	; 0xf344 <stat+0x11a>
    f342:	90 68       	ori	r25, 0x80	; 128
    f344:	a0 e0       	ldi	r26, 0x00	; 0
    f346:	b0 e0       	ldi	r27, 0x00	; 0
    f348:	f8 01       	movw	r30, r16
    f34a:	80 87       	std	Z+8, r24	; 0x08
    f34c:	91 87       	std	Z+9, r25	; 0x09
    f34e:	a2 87       	std	Z+10, r26	; 0x0a
    f350:	b3 87       	std	Z+11, r27	; 0x0b
    f352:	c7 01       	movw	r24, r14
    f354:	ca 5e       	subi	r28, 0xEA	; 234
    f356:	de 4f       	sbci	r29, 0xFE	; 254
    f358:	e8 e0       	ldi	r30, 0x08	; 8
    f35a:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0000f35e <unix_time_to_fat>:
    f35e:	a4 e0       	ldi	r26, 0x04	; 4
    f360:	b0 e0       	ldi	r27, 0x00	; 0
    f362:	e5 eb       	ldi	r30, 0xB5	; 181
    f364:	f9 e7       	ldi	r31, 0x79	; 121
    f366:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
    f36a:	69 83       	std	Y+1, r22	; 0x01
    f36c:	7a 83       	std	Y+2, r23	; 0x02
    f36e:	8b 83       	std	Y+3, r24	; 0x03
    f370:	9c 83       	std	Y+4, r25	; 0x04
    f372:	7a 01       	movw	r14, r20
    f374:	89 01       	movw	r16, r18
    f376:	ce 01       	movw	r24, r28
    f378:	01 96       	adiw	r24, 0x01	; 1
    f37a:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <gmtime>
    f37e:	fc 01       	movw	r30, r24
    f380:	22 85       	ldd	r18, Z+10	; 0x0a
    f382:	33 85       	ldd	r19, Z+11	; 0x0b
    f384:	20 55       	subi	r18, 0x50	; 80
    f386:	31 09       	sbc	r19, r1
    f388:	c9 01       	movw	r24, r18
    f38a:	98 2f       	mov	r25, r24
    f38c:	88 27       	eor	r24, r24
    f38e:	99 0f       	add	r25, r25
    f390:	20 85       	ldd	r18, Z+8	; 0x08
    f392:	31 85       	ldd	r19, Z+9	; 0x09
    f394:	2f 5f       	subi	r18, 0xFF	; 255
    f396:	3f 4f       	sbci	r19, 0xFF	; 255
    f398:	45 e0       	ldi	r20, 0x05	; 5
    f39a:	22 0f       	add	r18, r18
    f39c:	33 1f       	adc	r19, r19
    f39e:	4a 95       	dec	r20
    f3a0:	e1 f7       	brne	.-8      	; 0xf39a <unix_time_to_fat+0x3c>
    f3a2:	28 2b       	or	r18, r24
    f3a4:	39 2b       	or	r19, r25
    f3a6:	86 81       	ldd	r24, Z+6	; 0x06
    f3a8:	97 81       	ldd	r25, Z+7	; 0x07
    f3aa:	28 2b       	or	r18, r24
    f3ac:	39 2b       	or	r19, r25
    f3ae:	d7 01       	movw	r26, r14
    f3b0:	2d 93       	st	X+, r18
    f3b2:	3c 93       	st	X, r19
    f3b4:	84 81       	ldd	r24, Z+4	; 0x04
    f3b6:	20 e0       	ldi	r18, 0x00	; 0
    f3b8:	30 e0       	ldi	r19, 0x00	; 0
    f3ba:	38 2f       	mov	r19, r24
    f3bc:	33 0f       	add	r19, r19
    f3be:	33 0f       	add	r19, r19
    f3c0:	33 0f       	add	r19, r19
    f3c2:	82 81       	ldd	r24, Z+2	; 0x02
    f3c4:	93 81       	ldd	r25, Z+3	; 0x03
    f3c6:	55 e0       	ldi	r21, 0x05	; 5
    f3c8:	88 0f       	add	r24, r24
    f3ca:	99 1f       	adc	r25, r25
    f3cc:	5a 95       	dec	r21
    f3ce:	e1 f7       	brne	.-8      	; 0xf3c8 <unix_time_to_fat+0x6a>
    f3d0:	82 2b       	or	r24, r18
    f3d2:	93 2b       	or	r25, r19
    f3d4:	20 81       	ld	r18, Z
    f3d6:	31 81       	ldd	r19, Z+1	; 0x01
    f3d8:	36 95       	lsr	r19
    f3da:	27 95       	ror	r18
    f3dc:	82 2b       	or	r24, r18
    f3de:	93 2b       	or	r25, r19
    f3e0:	f8 01       	movw	r30, r16
    f3e2:	91 83       	std	Z+1, r25	; 0x01
    f3e4:	80 83       	st	Z, r24
    f3e6:	24 96       	adiw	r28, 0x04	; 4
    f3e8:	e6 e0       	ldi	r30, 0x06	; 6
    f3ea:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0000f3ee <utime>:
    f3ee:	aa e1       	ldi	r26, 0x1A	; 26
    f3f0:	b1 e0       	ldi	r27, 0x01	; 1
    f3f2:	ed ef       	ldi	r30, 0xFD	; 253
    f3f4:	f9 e7       	ldi	r31, 0x79	; 121
    f3f6:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
    f3fa:	8c 01       	movw	r16, r24
    f3fc:	61 15       	cp	r22, r1
    f3fe:	71 05       	cpc	r23, r1
    f400:	31 f0       	breq	.+12     	; 0xf40e <utime+0x20>
    f402:	fb 01       	movw	r30, r22
    f404:	64 81       	ldd	r22, Z+4	; 0x04
    f406:	75 81       	ldd	r23, Z+5	; 0x05
    f408:	86 81       	ldd	r24, Z+6	; 0x06
    f40a:	97 81       	ldd	r25, Z+7	; 0x07
    f40c:	04 c0       	rjmp	.+8      	; 0xf416 <utime+0x28>
    f40e:	80 e0       	ldi	r24, 0x00	; 0
    f410:	90 e0       	ldi	r25, 0x00	; 0
    f412:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <time>
    f416:	9e 01       	movw	r18, r28
    f418:	29 5e       	subi	r18, 0xE9	; 233
    f41a:	3e 4f       	sbci	r19, 0xFE	; 254
    f41c:	ae 01       	movw	r20, r28
    f41e:	47 5e       	subi	r20, 0xE7	; 231
    f420:	5e 4f       	sbci	r21, 0xFE	; 254
    f422:	9d df       	rcall	.-198    	; 0xf35e <unix_time_to_fat>
    f424:	c7 5e       	subi	r28, 0xE7	; 231
    f426:	de 4f       	sbci	r29, 0xFE	; 254
    f428:	88 81       	ld	r24, Y
    f42a:	99 81       	ldd	r25, Y+1	; 0x01
    f42c:	c9 51       	subi	r28, 0x19	; 25
    f42e:	d1 40       	sbci	r29, 0x01	; 1
    f430:	9e 83       	std	Y+6, r25	; 0x06
    f432:	8d 83       	std	Y+5, r24	; 0x05
    f434:	c9 5e       	subi	r28, 0xE9	; 233
    f436:	de 4f       	sbci	r29, 0xFE	; 254
    f438:	88 81       	ld	r24, Y
    f43a:	99 81       	ldd	r25, Y+1	; 0x01
    f43c:	c7 51       	subi	r28, 0x17	; 23
    f43e:	d1 40       	sbci	r29, 0x01	; 1
    f440:	98 87       	std	Y+8, r25	; 0x08
    f442:	8f 83       	std	Y+7, r24	; 0x07
    f444:	be 01       	movw	r22, r28
    f446:	6f 5f       	subi	r22, 0xFF	; 255
    f448:	7f 4f       	sbci	r23, 0xFF	; 255
    f44a:	c8 01       	movw	r24, r16
    f44c:	0e 94 e5 67 	call	0xcfca	; 0xcfca <f_utime>
    f450:	84 31       	cpi	r24, 0x14	; 20
    f452:	91 05       	cpc	r25, r1
    f454:	40 f4       	brcc	.+16     	; 0xf466 <utime+0x78>
    f456:	fc 01       	movw	r30, r24
    f458:	e8 58       	subi	r30, 0x88	; 136
    f45a:	f4 4f       	sbci	r31, 0xF4	; 244
    f45c:	80 81       	ld	r24, Z
    f45e:	08 2e       	mov	r0, r24
    f460:	00 0c       	add	r0, r0
    f462:	99 0b       	sbc	r25, r25
    f464:	02 c0       	rjmp	.+4      	; 0xf46a <utime+0x7c>
    f466:	83 e2       	ldi	r24, 0x23	; 35
    f468:	90 e0       	ldi	r25, 0x00	; 0
    f46a:	c6 5e       	subi	r28, 0xE6	; 230
    f46c:	de 4f       	sbci	r29, 0xFE	; 254
    f46e:	e4 e0       	ldi	r30, 0x04	; 4
    f470:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0000f474 <fileno_to_fatfs>:
    f474:	83 30       	cpi	r24, 0x03	; 3
    f476:	91 05       	cpc	r25, r1
    f478:	48 f4       	brcc	.+18     	; 0xf48c <fileno_to_fatfs+0x18>
    f47a:	89 e0       	ldi	r24, 0x09	; 9
    f47c:	90 e0       	ldi	r25, 0x00	; 0
    f47e:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f482:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f486:	80 e0       	ldi	r24, 0x00	; 0
    f488:	90 e0       	ldi	r25, 0x00	; 0
    f48a:	08 95       	ret
    f48c:	60 dc       	rcall	.-1856   	; 0xed4e <fileno_to_stream>
    f48e:	00 97       	sbiw	r24, 0x00	; 0
    f490:	d1 f3       	breq	.-12     	; 0xf486 <fileno_to_fatfs+0x12>
    f492:	fc 01       	movw	r30, r24
    f494:	84 85       	ldd	r24, Z+12	; 0x0c
    f496:	95 85       	ldd	r25, Z+13	; 0x0d
    f498:	00 97       	sbiw	r24, 0x00	; 0
    f49a:	79 f3       	breq	.-34     	; 0xf47a <fileno_to_fatfs+0x6>
    f49c:	08 95       	ret

0000f49e <ftell>:
    f49e:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f4a2:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    f4a6:	37 dc       	rcall	.-1938   	; 0xed16 <fileno>
    f4a8:	83 30       	cpi	r24, 0x03	; 3
    f4aa:	91 05       	cpc	r25, r1
    f4ac:	48 f0       	brcs	.+18     	; 0xf4c0 <ftell+0x22>
    f4ae:	e2 df       	rcall	.-60     	; 0xf474 <fileno_to_fatfs>
    f4b0:	00 97       	sbiw	r24, 0x00	; 0
    f4b2:	51 f4       	brne	.+20     	; 0xf4c8 <ftell+0x2a>
    f4b4:	89 e0       	ldi	r24, 0x09	; 9
    f4b6:	90 e0       	ldi	r25, 0x00	; 0
    f4b8:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f4bc:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f4c0:	6f ef       	ldi	r22, 0xFF	; 255
    f4c2:	7f ef       	ldi	r23, 0xFF	; 255
    f4c4:	cb 01       	movw	r24, r22
    f4c6:	08 95       	ret
    f4c8:	fc 01       	movw	r30, r24
    f4ca:	60 89       	ldd	r22, Z+16	; 0x10
    f4cc:	71 89       	ldd	r23, Z+17	; 0x11
    f4ce:	82 89       	ldd	r24, Z+18	; 0x12
    f4d0:	93 89       	ldd	r25, Z+19	; 0x13
    f4d2:	08 95       	ret

0000f4d4 <lseek>:
    f4d4:	a3 e0       	ldi	r26, 0x03	; 3
    f4d6:	b0 e0       	ldi	r27, 0x00	; 0
    f4d8:	e0 e7       	ldi	r30, 0x70	; 112
    f4da:	fa e7       	ldi	r31, 0x7A	; 122
    f4dc:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
    f4e0:	5c 01       	movw	r10, r24
    f4e2:	6a 01       	movw	r12, r20
    f4e4:	7b 01       	movw	r14, r22
    f4e6:	89 01       	movw	r16, r18
    f4e8:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f4ec:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    f4f0:	c1 df       	rcall	.-126    	; 0xf474 <fileno_to_fatfs>
    f4f2:	ec 01       	movw	r28, r24
    f4f4:	89 2b       	or	r24, r25
    f4f6:	19 f4       	brne	.+6      	; 0xf4fe <lseek+0x2a>
    f4f8:	88 e1       	ldi	r24, 0x18	; 24
    f4fa:	90 e0       	ldi	r25, 0x00	; 0
    f4fc:	26 c0       	rjmp	.+76     	; 0xf54a <lseek+0x76>
    f4fe:	83 e0       	ldi	r24, 0x03	; 3
    f500:	a8 16       	cp	r10, r24
    f502:	b1 04       	cpc	r11, r1
    f504:	d0 f1       	brcs	.+116    	; 0xf57a <lseek+0xa6>
    f506:	c5 01       	movw	r24, r10
    f508:	22 dc       	rcall	.-1980   	; 0xed4e <fileno_to_stream>
    f50a:	fc 01       	movw	r30, r24
    f50c:	93 81       	ldd	r25, Z+3	; 0x03
    f50e:	90 64       	ori	r25, 0x40	; 64
    f510:	93 83       	std	Z+3, r25	; 0x03
    f512:	02 30       	cpi	r16, 0x02	; 2
    f514:	11 05       	cpc	r17, r1
    f516:	a9 f5       	brne	.+106    	; 0xf582 <lseek+0xae>
    f518:	8a 85       	ldd	r24, Y+10	; 0x0a
    f51a:	9b 85       	ldd	r25, Y+11	; 0x0b
    f51c:	ac 85       	ldd	r26, Y+12	; 0x0c
    f51e:	bd 85       	ldd	r27, Y+13	; 0x0d
    f520:	c8 0e       	add	r12, r24
    f522:	d9 1e       	adc	r13, r25
    f524:	ea 1e       	adc	r14, r26
    f526:	fb 1e       	adc	r15, r27
    f528:	b7 01       	movw	r22, r14
    f52a:	a6 01       	movw	r20, r12
    f52c:	ce 01       	movw	r24, r28
    f52e:	0e 94 48 60 	call	0xc090	; 0xc090 <f_lseek>
    f532:	00 97       	sbiw	r24, 0x00	; 0
    f534:	79 f0       	breq	.+30     	; 0xf554 <lseek+0x80>
    f536:	84 31       	cpi	r24, 0x14	; 20
    f538:	91 05       	cpc	r25, r1
    f53a:	58 f5       	brcc	.+86     	; 0xf592 <lseek+0xbe>
    f53c:	fc 01       	movw	r30, r24
    f53e:	e8 58       	subi	r30, 0x88	; 136
    f540:	f4 4f       	sbci	r31, 0xF4	; 244
    f542:	80 81       	ld	r24, Z
    f544:	08 2e       	mov	r0, r24
    f546:	00 0c       	add	r0, r0
    f548:	99 0b       	sbc	r25, r25
    f54a:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f54e:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f552:	13 c0       	rjmp	.+38     	; 0xf57a <lseek+0xa6>
    f554:	68 89       	ldd	r22, Y+16	; 0x10
    f556:	79 89       	ldd	r23, Y+17	; 0x11
    f558:	8a 89       	ldd	r24, Y+18	; 0x12
    f55a:	9b 89       	ldd	r25, Y+19	; 0x13
    f55c:	c6 16       	cp	r12, r22
    f55e:	d7 06       	cpc	r13, r23
    f560:	e8 06       	cpc	r14, r24
    f562:	f9 06       	cpc	r15, r25
    f564:	c9 f0       	breq	.+50     	; 0xf598 <lseek+0xc4>
    f566:	87 e6       	ldi	r24, 0x67	; 103
    f568:	9b e0       	ldi	r25, 0x0B	; 11
    f56a:	a0 e0       	ldi	r26, 0x00	; 0
    f56c:	ed b7       	in	r30, 0x3d	; 61
    f56e:	fe b7       	in	r31, 0x3e	; 62
    f570:	81 83       	std	Z+1, r24	; 0x01
    f572:	92 83       	std	Z+2, r25	; 0x02
    f574:	a3 83       	std	Z+3, r26	; 0x03
    f576:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    f57a:	6f ef       	ldi	r22, 0xFF	; 255
    f57c:	7f ef       	ldi	r23, 0xFF	; 255
    f57e:	cb 01       	movw	r24, r22
    f580:	0b c0       	rjmp	.+22     	; 0xf598 <lseek+0xc4>
    f582:	01 30       	cpi	r16, 0x01	; 1
    f584:	11 05       	cpc	r17, r1
    f586:	81 f6       	brne	.-96     	; 0xf528 <lseek+0x54>
    f588:	88 89       	ldd	r24, Y+16	; 0x10
    f58a:	99 89       	ldd	r25, Y+17	; 0x11
    f58c:	aa 89       	ldd	r26, Y+18	; 0x12
    f58e:	bb 89       	ldd	r27, Y+19	; 0x13
    f590:	c7 cf       	rjmp	.-114    	; 0xf520 <lseek+0x4c>
    f592:	83 e2       	ldi	r24, 0x23	; 35
    f594:	90 e0       	ldi	r25, 0x00	; 0
    f596:	d9 cf       	rjmp	.-78     	; 0xf54a <lseek+0x76>
    f598:	cd b7       	in	r28, 0x3d	; 61
    f59a:	de b7       	in	r29, 0x3e	; 62
    f59c:	23 96       	adiw	r28, 0x03	; 3
    f59e:	ea e0       	ldi	r30, 0x0A	; 10
    f5a0:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0000f5a4 <fseek>:
    f5a4:	cf 92       	push	r12
    f5a6:	df 92       	push	r13
    f5a8:	ef 92       	push	r14
    f5aa:	ff 92       	push	r15
    f5ac:	cf 93       	push	r28
    f5ae:	df 93       	push	r29
    f5b0:	6a 01       	movw	r12, r20
    f5b2:	7b 01       	movw	r14, r22
    f5b4:	e9 01       	movw	r28, r18
    f5b6:	af db       	rcall	.-2210   	; 0xed16 <fileno>
    f5b8:	97 fd       	sbrc	r25, 7
    f5ba:	12 c0       	rjmp	.+36     	; 0xf5e0 <fseek+0x3c>
    f5bc:	9e 01       	movw	r18, r28
    f5be:	b7 01       	movw	r22, r14
    f5c0:	a6 01       	movw	r20, r12
    f5c2:	88 df       	rcall	.-240    	; 0xf4d4 <lseek>
    f5c4:	21 e0       	ldi	r18, 0x01	; 1
    f5c6:	30 e0       	ldi	r19, 0x00	; 0
    f5c8:	6f 3f       	cpi	r22, 0xFF	; 255
    f5ca:	7f 4f       	sbci	r23, 0xFF	; 255
    f5cc:	8f 4f       	sbci	r24, 0xFF	; 255
    f5ce:	9f 4f       	sbci	r25, 0xFF	; 255
    f5d0:	11 f0       	breq	.+4      	; 0xf5d6 <fseek+0x32>
    f5d2:	20 e0       	ldi	r18, 0x00	; 0
    f5d4:	30 e0       	ldi	r19, 0x00	; 0
    f5d6:	88 27       	eor	r24, r24
    f5d8:	99 27       	eor	r25, r25
    f5da:	82 1b       	sub	r24, r18
    f5dc:	93 0b       	sbc	r25, r19
    f5de:	02 c0       	rjmp	.+4      	; 0xf5e4 <fseek+0x40>
    f5e0:	8f ef       	ldi	r24, 0xFF	; 255
    f5e2:	9f ef       	ldi	r25, 0xFF	; 255
    f5e4:	df 91       	pop	r29
    f5e6:	cf 91       	pop	r28
    f5e8:	ff 90       	pop	r15
    f5ea:	ef 90       	pop	r14
    f5ec:	df 90       	pop	r13
    f5ee:	cf 90       	pop	r12
    f5f0:	08 95       	ret

0000f5f2 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f5f2:	a2 e0       	ldi	r26, 0x02	; 2
    f5f4:	b0 e0       	ldi	r27, 0x00	; 0
    f5f6:	ef ef       	ldi	r30, 0xFF	; 255
    f5f8:	fa e7       	ldi	r31, 0x7A	; 122
    f5fa:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
    f5fe:	5c 01       	movw	r10, r24
    f600:	8b 01       	movw	r16, r22
    f602:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f604:	fb 01       	movw	r30, r22
    f606:	10 82       	st	Z, r1

    errno = 0;
    f608:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f60c:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f610:	9e db       	rcall	.-2244   	; 0xed4e <fileno_to_stream>
    if(stream == stdin)
    f612:	7c 01       	movw	r14, r24
    f614:	80 91 a0 1c 	lds	r24, 0x1CA0	; 0x801ca0 <__iob>
    f618:	90 91 a1 1c 	lds	r25, 0x1CA1	; 0x801ca1 <__iob+0x1>
    f61c:	e8 16       	cp	r14, r24
    f61e:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f620:	c9 f4       	brne	.+50     	; 0xf654 <read+0x62>
    f622:	f7 01       	movw	r30, r14
    f624:	83 81       	ldd	r24, Z+3	; 0x03
    f626:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f628:	83 83       	std	Z+3, r24	; 0x03
    f62a:	1a 82       	std	Y+2, r1	; 0x02
    f62c:	19 82       	std	Y+1, r1	; 0x01
    f62e:	c0 0e       	add	r12, r16
        while(count--)
    f630:	d1 1e       	adc	r13, r17
    f632:	0c 15       	cp	r16, r12
    f634:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f636:	09 f4       	brne	.+2      	; 0xf63a <read+0x48>
    f638:	3d c0       	rjmp	.+122    	; 0xf6b4 <read+0xc2>
            if(ret < 0)
    f63a:	c7 01       	movw	r24, r14
    f63c:	48 da       	rcall	.-2928   	; 0xeace <fgetc>
                break;

            *ptr++ = ret;
    f63e:	97 fd       	sbrc	r25, 7
    f640:	39 c0       	rjmp	.+114    	; 0xf6b4 <read+0xc2>
    f642:	f8 01       	movw	r30, r16
            ++size;
    f644:	81 93       	st	Z+, r24
    f646:	8f 01       	movw	r16, r30
    f648:	89 81       	ldd	r24, Y+1	; 0x01
    f64a:	9a 81       	ldd	r25, Y+2	; 0x02
    f64c:	01 96       	adiw	r24, 0x01	; 1
    f64e:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f650:	89 83       	std	Y+1, r24	; 0x01
    f652:	ef cf       	rjmp	.-34     	; 0xf632 <read+0x40>
    f654:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <__iob+0x2>
    f658:	90 91 a3 1c 	lds	r25, 0x1CA3	; 0x801ca3 <__iob+0x3>
    f65c:	e8 16       	cp	r14, r24
    f65e:	f9 06       	cpc	r15, r25
    f660:	71 f1       	breq	.+92     	; 0xf6be <read+0xcc>
    f662:	80 91 a4 1c 	lds	r24, 0x1CA4	; 0x801ca4 <__iob+0x4>
    f666:	90 91 a5 1c 	lds	r25, 0x1CA5	; 0x801ca5 <__iob+0x5>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f66a:	e8 16       	cp	r14, r24
    f66c:	f9 06       	cpc	r15, r25
    f66e:	39 f1       	breq	.+78     	; 0xf6be <read+0xcc>
    if ( fh == NULL )
    f670:	c5 01       	movw	r24, r10
    f672:	00 df       	rcall	.-512    	; 0xf474 <fileno_to_fatfs>
    {
        errno = EBADF;
    f674:	00 97       	sbiw	r24, 0x00	; 0
    f676:	19 f4       	brne	.+6      	; 0xf67e <read+0x8c>
    f678:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f67a:	90 e0       	ldi	r25, 0x00	; 0
    f67c:	16 c0       	rjmp	.+44     	; 0xf6aa <read+0xb8>
    f67e:	9e 01       	movw	r18, r28
    f680:	2f 5f       	subi	r18, 0xFF	; 255
    f682:	3f 4f       	sbci	r19, 0xFF	; 255
    f684:	a6 01       	movw	r20, r12
    f686:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f688:	0e 94 3c 5b 	call	0xb678	; 0xb678 <f_read>
    f68c:	00 97       	sbiw	r24, 0x00	; 0
    f68e:	91 f0       	breq	.+36     	; 0xf6b4 <read+0xc2>
    f690:	84 31       	cpi	r24, 0x14	; 20
    f692:	91 05       	cpc	r25, r1
    f694:	40 f4       	brcc	.+16     	; 0xf6a6 <read+0xb4>
    f696:	fc 01       	movw	r30, r24
    f698:	e8 58       	subi	r30, 0x88	; 136
    f69a:	f4 4f       	sbci	r31, 0xF4	; 244
    f69c:	80 81       	ld	r24, Z
    f69e:	08 2e       	mov	r0, r24
    f6a0:	00 0c       	add	r0, r0
    f6a2:	99 0b       	sbc	r25, r25
    f6a4:	02 c0       	rjmp	.+4      	; 0xf6aa <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f6a6:	83 e2       	ldi	r24, 0x23	; 35
    f6a8:	90 e0       	ldi	r25, 0x00	; 0
    f6aa:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f6ae:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f6b2:	05 c0       	rjmp	.+10     	; 0xf6be <read+0xcc>
    f6b4:	69 81       	ldd	r22, Y+1	; 0x01
    f6b6:	7a 81       	ldd	r23, Y+2	; 0x02
    f6b8:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f6ba:	90 e0       	ldi	r25, 0x00	; 0
    f6bc:	03 c0       	rjmp	.+6      	; 0xf6c4 <read+0xd2>
    f6be:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f6c0:	7f ef       	ldi	r23, 0xFF	; 255
    f6c2:	cb 01       	movw	r24, r22
    f6c4:	22 96       	adiw	r28, 0x02	; 2
    f6c6:	ea e0       	ldi	r30, 0x0A	; 10
    f6c8:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0000f6cc <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f6cc:	0f 93       	push	r16
    f6ce:	1f 93       	push	r17
    f6d0:	cf 93       	push	r28
    f6d2:	df 93       	push	r29
    f6d4:	ec 01       	movw	r28, r24
    f6d6:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f6d8:	64 9f       	mul	r22, r20
    f6da:	80 01       	movw	r16, r0
    f6dc:	65 9f       	mul	r22, r21
    f6de:	10 0d       	add	r17, r0
    f6e0:	74 9f       	mul	r23, r20
    f6e2:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f6e4:	11 24       	eor	r1, r1
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f6e6:	17 db       	rcall	.-2514   	; 0xed16 <fileno>
    f6e8:	a8 01       	movw	r20, r16
    f6ea:	be 01       	movw	r22, r28
    if(ret < 0)
    f6ec:	82 df       	rcall	.-252    	; 0xf5f2 <read>
    f6ee:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f6f0:	02 c0       	rjmp	.+4      	; 0xf6f6 <fread+0x2a>
    f6f2:	cb 01       	movw	r24, r22
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f6f4:	02 c0       	rjmp	.+4      	; 0xf6fa <fread+0x2e>
    f6f6:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f6f8:	90 e0       	ldi	r25, 0x00	; 0
    f6fa:	df 91       	pop	r29
    f6fc:	cf 91       	pop	r28
    f6fe:	1f 91       	pop	r17
    f700:	0f 91       	pop	r16
    f702:	08 95       	ret

0000f704 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f704:	cf 93       	push	r28
    f706:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f708:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f70c:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f710:	83 30       	cpi	r24, 0x03	; 3
    f712:	91 05       	cpc	r25, r1
    f714:	18 f4       	brcc	.+6      	; 0xf71c <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f716:	89 e0       	ldi	r24, 0x09	; 9
    f718:	90 e0       	ldi	r25, 0x00	; 0
    f71a:	18 c0       	rjmp	.+48     	; 0xf74c <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f71c:	ec 01       	movw	r28, r24
    f71e:	17 db       	rcall	.-2514   	; 0xed4e <fileno_to_stream>
// reset unget on sync
    stream->flags |= __SUNGET;
    f720:	fc 01       	movw	r30, r24
    f722:	93 81       	ldd	r25, Z+3	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f724:	90 64       	ori	r25, 0x40	; 64
    f726:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f728:	ce 01       	movw	r24, r28
    f72a:	a4 de       	rcall	.-696    	; 0xf474 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f72c:	00 97       	sbiw	r24, 0x00	; 0
    f72e:	99 f3       	breq	.-26     	; 0xf716 <syncfs+0x12>
    if (res != FR_OK)
    f730:	0e 94 1e 5e 	call	0xbc3c	; 0xbc3c <f_sync>
    f734:	00 97       	sbiw	r24, 0x00	; 0
    f736:	a1 f0       	breq	.+40     	; 0xf760 <syncfs+0x5c>
    f738:	84 31       	cpi	r24, 0x14	; 20
    f73a:	91 05       	cpc	r25, r1
    f73c:	70 f4       	brcc	.+28     	; 0xf75a <syncfs+0x56>
    f73e:	fc 01       	movw	r30, r24
    f740:	e8 58       	subi	r30, 0x88	; 136
    f742:	f4 4f       	sbci	r31, 0xF4	; 244
    f744:	80 81       	ld	r24, Z
    f746:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f748:	00 0c       	add	r0, r0
    f74a:	99 0b       	sbc	r25, r25
    f74c:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
        return(-1);
    f750:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f754:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f756:	9f ef       	ldi	r25, 0xFF	; 255
    f758:	05 c0       	rjmp	.+10     	; 0xf764 <syncfs+0x60>
    f75a:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f75c:	90 e0       	ldi	r25, 0x00	; 0
    f75e:	f6 cf       	rjmp	.-20     	; 0xf74c <syncfs+0x48>
}
    f760:	80 e0       	ldi	r24, 0x00	; 0
    f762:	90 e0       	ldi	r25, 0x00	; 0
    f764:	df 91       	pop	r29
    f766:	cf 91       	pop	r28
    f768:	08 95       	ret

0000f76a <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f76a:	cf 93       	push	r28
    f76c:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f76e:	c0 e0       	ldi	r28, 0x00	; 0
    f770:	d0 e0       	ldi	r29, 0x00	; 0
    f772:	21 96       	adiw	r28, 0x01	; 1
    f774:	c0 31       	cpi	r28, 0x10	; 16
    f776:	d1 05       	cpc	r29, r1
    f778:	51 f0       	breq	.+20     	; 0xf78e <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f77a:	c3 30       	cpi	r28, 0x03	; 3
    f77c:	d1 05       	cpc	r29, r1
    f77e:	cc f3       	brlt	.-14     	; 0xf772 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f780:	ce 01       	movw	r24, r28
    f782:	78 de       	rcall	.-784    	; 0xf474 <fileno_to_fatfs>
        if(fh == NULL)
    f784:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f786:	a9 f3       	breq	.-22     	; 0xf772 <sync+0x8>
    f788:	ce 01       	movw	r24, r28
    f78a:	bc df       	rcall	.-136    	; 0xf704 <syncfs>
    }
}
    f78c:	f2 cf       	rjmp	.-28     	; 0xf772 <sync+0x8>
    f78e:	df 91       	pop	r29
    f790:	cf 91       	pop	r28
    f792:	08 95       	ret

0000f794 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f794:	a2 e0       	ldi	r26, 0x02	; 2
    f796:	b0 e0       	ldi	r27, 0x00	; 0
    f798:	e0 ed       	ldi	r30, 0xD0	; 208
    f79a:	fb e7       	ldi	r31, 0x7B	; 123
    f79c:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
    f7a0:	8c 01       	movw	r16, r24
    f7a2:	b6 2e       	mov	r11, r22
    f7a4:	f7 2e       	mov	r15, r23
    f7a6:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f7a8:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f7ac:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f7b0:	ce da       	rcall	.-2660   	; 0xed4e <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f7b2:	6c 01       	movw	r12, r24
    f7b4:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <__iob+0x2>
    f7b8:	90 91 a3 1c 	lds	r25, 0x1CA3	; 0x801ca3 <__iob+0x3>
    f7bc:	c8 16       	cp	r12, r24
    f7be:	d9 06       	cpc	r13, r25
    f7c0:	39 f0       	breq	.+14     	; 0xf7d0 <write+0x3c>
    f7c2:	80 91 a4 1c 	lds	r24, 0x1CA4	; 0x801ca4 <__iob+0x4>
    f7c6:	90 91 a5 1c 	lds	r25, 0x1CA5	; 0x801ca5 <__iob+0x5>
    f7ca:	c8 16       	cp	r12, r24
    f7cc:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;
        size = 0;
    f7ce:	d1 f4       	brne	.+52     	; 0xf804 <write+0x70>
    f7d0:	1a 82       	std	Y+2, r1	; 0x02
    f7d2:	19 82       	std	Y+1, r1	; 0x01
    f7d4:	0b 2d       	mov	r16, r11
    f7d6:	1f 2d       	mov	r17, r15
    f7d8:	78 01       	movw	r14, r16
    f7da:	e8 0c       	add	r14, r8
        while(count--)
    f7dc:	f9 1c       	adc	r15, r9
    f7de:	0e 15       	cp	r16, r14
    f7e0:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f7e2:	d1 f1       	breq	.+116    	; 0xf858 <write+0xc4>
    f7e4:	f8 01       	movw	r30, r16
    f7e6:	a1 90       	ld	r10, Z+
    f7e8:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f7ea:	b1 2c       	mov	r11, r1
    f7ec:	b6 01       	movw	r22, r12
    f7ee:	c5 01       	movw	r24, r10
            if(c != ret)
    f7f0:	c4 d9       	rcall	.-3192   	; 0xeb7a <fputc>
    f7f2:	a8 16       	cp	r10, r24
    f7f4:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f7f6:	81 f5       	brne	.+96     	; 0xf858 <write+0xc4>
    f7f8:	89 81       	ldd	r24, Y+1	; 0x01
    f7fa:	9a 81       	ldd	r25, Y+2	; 0x02
    f7fc:	01 96       	adiw	r24, 0x01	; 1
    f7fe:	9a 83       	std	Y+2, r25	; 0x02
    f800:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f802:	ed cf       	rjmp	.-38     	; 0xf7de <write+0x4a>
    f804:	80 91 a0 1c 	lds	r24, 0x1CA0	; 0x801ca0 <__iob>
    f808:	90 91 a1 1c 	lds	r25, 0x1CA1	; 0x801ca1 <__iob+0x1>
    f80c:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f80e:	d9 06       	cpc	r13, r25
    f810:	41 f1       	breq	.+80     	; 0xf862 <write+0xce>
    if ( fh == NULL )
    f812:	c8 01       	movw	r24, r16
    f814:	2f de       	rcall	.-930    	; 0xf474 <fileno_to_fatfs>
    {
        errno = EBADF;
    f816:	00 97       	sbiw	r24, 0x00	; 0
    f818:	19 f4       	brne	.+6      	; 0xf820 <write+0x8c>
    f81a:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f81c:	90 e0       	ldi	r25, 0x00	; 0
    f81e:	17 c0       	rjmp	.+46     	; 0xf84e <write+0xba>
    f820:	9e 01       	movw	r18, r28
    f822:	2f 5f       	subi	r18, 0xFF	; 255
    f824:	3f 4f       	sbci	r19, 0xFF	; 255
    f826:	a4 01       	movw	r20, r8
    f828:	6b 2d       	mov	r22, r11
    f82a:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
    f82c:	0e 94 87 5c 	call	0xb90e	; 0xb90e <f_write>
    f830:	00 97       	sbiw	r24, 0x00	; 0
    f832:	91 f0       	breq	.+36     	; 0xf858 <write+0xc4>
    f834:	84 31       	cpi	r24, 0x14	; 20
    f836:	91 05       	cpc	r25, r1
    f838:	40 f4       	brcc	.+16     	; 0xf84a <write+0xb6>
    f83a:	fc 01       	movw	r30, r24
    f83c:	e8 58       	subi	r30, 0x88	; 136
    f83e:	f4 4f       	sbci	r31, 0xF4	; 244
    f840:	80 81       	ld	r24, Z
    f842:	08 2e       	mov	r0, r24
    f844:	00 0c       	add	r0, r0
    f846:	99 0b       	sbc	r25, r25
    f848:	02 c0       	rjmp	.+4      	; 0xf84e <write+0xba>
    {
        errno = fatfs_to_errno(res);
    f84a:	83 e2       	ldi	r24, 0x23	; 35
    f84c:	90 e0       	ldi	r25, 0x00	; 0
    f84e:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f852:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f856:	05 c0       	rjmp	.+10     	; 0xf862 <write+0xce>
    f858:	69 81       	ldd	r22, Y+1	; 0x01
    f85a:	7a 81       	ldd	r23, Y+2	; 0x02
    f85c:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f85e:	90 e0       	ldi	r25, 0x00	; 0
    f860:	03 c0       	rjmp	.+6      	; 0xf868 <write+0xd4>
    f862:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f864:	7f ef       	ldi	r23, 0xFF	; 255
    f866:	cb 01       	movw	r24, r22
    f868:	22 96       	adiw	r28, 0x02	; 2
    f86a:	ec e0       	ldi	r30, 0x0C	; 12
    f86c:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

0000f870 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f870:	0f 93       	push	r16
    f872:	1f 93       	push	r17
    f874:	cf 93       	push	r28
    f876:	df 93       	push	r29
    f878:	ec 01       	movw	r28, r24
    f87a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f87c:	64 9f       	mul	r22, r20
    f87e:	80 01       	movw	r16, r0
    f880:	65 9f       	mul	r22, r21
    f882:	10 0d       	add	r17, r0
    f884:	74 9f       	mul	r23, r20
    f886:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f888:	11 24       	eor	r1, r1
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f88a:	45 da       	rcall	.-2934   	; 0xed16 <fileno>
    f88c:	a8 01       	movw	r20, r16
    f88e:	be 01       	movw	r22, r28

    if(ret < 0)
    f890:	81 df       	rcall	.-254    	; 0xf794 <write>
    f892:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f894:	02 c0       	rjmp	.+4      	; 0xf89a <fwrite+0x2a>
    f896:	cb 01       	movw	r24, r22

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f898:	02 c0       	rjmp	.+4      	; 0xf89e <fwrite+0x2e>
    f89a:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f89c:	90 e0       	ldi	r25, 0x00	; 0
    f89e:	df 91       	pop	r29
    f8a0:	cf 91       	pop	r28
    f8a2:	1f 91       	pop	r17
    f8a4:	0f 91       	pop	r16
    f8a6:	08 95       	ret

0000f8a8 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f8a8:	0f 93       	push	r16
    f8aa:	1f 93       	push	r17
    f8ac:	cf 93       	push	r28
    f8ae:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f8b0:	83 30       	cpi	r24, 0x03	; 3
    f8b2:	91 05       	cpc	r25, r1
    f8b4:	48 f4       	brcc	.+18     	; 0xf8c8 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f8b6:	89 e0       	ldi	r24, 0x09	; 9
    f8b8:	90 e0       	ldi	r25, 0x00	; 0
    f8ba:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f8be:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
        return(-1);
    f8c2:	8f ef       	ldi	r24, 0xFF	; 255
    f8c4:	9f ef       	ldi	r25, 0xFF	; 255
    f8c6:	20 c0       	rjmp	.+64     	; 0xf908 <free_file_descriptor+0x60>
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f8c8:	ec 01       	movw	r28, r24
    f8ca:	41 da       	rcall	.-2942   	; 0xed4e <fileno_to_stream>
    if(stream == NULL)
    f8cc:	8c 01       	movw	r16, r24
    f8ce:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f8d0:	c1 f3       	breq	.-16     	; 0xf8c2 <free_file_descriptor+0x1a>
    f8d2:	f8 01       	movw	r30, r16
    f8d4:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    f8d6:	95 85       	ldd	r25, Z+13	; 0x0d
    f8d8:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    f8da:	11 f0       	breq	.+4      	; 0xf8e0 <free_file_descriptor+0x38>
    f8dc:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f8e0:	f8 01       	movw	r30, r16
    f8e2:	80 81       	ld	r24, Z
    f8e4:	91 81       	ldd	r25, Z+1	; 0x01
    f8e6:	00 97       	sbiw	r24, 0x00	; 0
    f8e8:	21 f0       	breq	.+8      	; 0xf8f2 <free_file_descriptor+0x4a>
    f8ea:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    f8ec:	27 fd       	sbrc	r18, 7
    f8ee:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    }

    __iob[fileno]  = NULL;
    f8f2:	fe 01       	movw	r30, r28
    f8f4:	ee 0f       	add	r30, r30
    f8f6:	ff 1f       	adc	r31, r31
    f8f8:	e0 56       	subi	r30, 0x60	; 96
    f8fa:	f3 4e       	sbci	r31, 0xE3	; 227
    f8fc:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    f8fe:	10 82       	st	Z, r1
    f900:	c8 01       	movw	r24, r16
    f902:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    return(fileno);
}
    f906:	ce 01       	movw	r24, r28
    f908:	df 91       	pop	r29
    f90a:	cf 91       	pop	r28
    f90c:	1f 91       	pop	r17
    f90e:	0f 91       	pop	r16
    f910:	08 95       	ret

0000f912 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f912:	0f 93       	push	r16
    f914:	1f 93       	push	r17
    f916:	cf 93       	push	r28
    f918:	df 93       	push	r29
    f91a:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f91c:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    f920:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f924:	14 da       	rcall	.-3032   	; 0xed4e <fileno_to_stream>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f926:	89 2b       	or	r24, r25
    f928:	d9 f0       	breq	.+54     	; 0xf960 <close+0x4e>
    if(fh == NULL)
    f92a:	c8 01       	movw	r24, r16
    f92c:	a3 dd       	rcall	.-1210   	; 0xf474 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    f92e:	00 97       	sbiw	r24, 0x00	; 0
    f930:	b9 f0       	breq	.+46     	; 0xf960 <close+0x4e>
    free_file_descriptor(fileno);
    f932:	0e 94 9e 5e 	call	0xbd3c	; 0xbd3c <f_close>
    f936:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    f938:	c8 01       	movw	r24, r16
    f93a:	b6 df       	rcall	.-148    	; 0xf8a8 <free_file_descriptor>
    f93c:	20 97       	sbiw	r28, 0x00	; 0
    f93e:	99 f0       	breq	.+38     	; 0xf966 <close+0x54>
    f940:	c4 31       	cpi	r28, 0x14	; 20
    f942:	d1 05       	cpc	r29, r1
    f944:	38 f4       	brcc	.+14     	; 0xf954 <close+0x42>
    f946:	c8 58       	subi	r28, 0x88	; 136
    f948:	d4 4f       	sbci	r29, 0xF4	; 244
    f94a:	88 81       	ld	r24, Y
    f94c:	08 2e       	mov	r0, r24
    f94e:	00 0c       	add	r0, r0
    f950:	99 0b       	sbc	r25, r25
    f952:	02 c0       	rjmp	.+4      	; 0xf958 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    f954:	83 e2       	ldi	r24, 0x23	; 35
    f956:	90 e0       	ldi	r25, 0x00	; 0
    f958:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
        return(-1);
    f95c:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f960:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    f962:	9f ef       	ldi	r25, 0xFF	; 255
    f964:	02 c0       	rjmp	.+4      	; 0xf96a <close+0x58>
}
    f966:	80 e0       	ldi	r24, 0x00	; 0
    f968:	90 e0       	ldi	r25, 0x00	; 0
    f96a:	df 91       	pop	r29
    f96c:	cf 91       	pop	r28
    f96e:	1f 91       	pop	r17
    f970:	0f 91       	pop	r16
    f972:	08 95       	ret

0000f974 <fclose>:
    f974:	d0 d9       	rcall	.-3168   	; 0xed16 <fileno>
    f976:	97 fd       	sbrc	r25, 7
    f978:	02 c0       	rjmp	.+4      	; 0xf97e <fclose+0xa>
    f97a:	cb cf       	rjmp	.-106    	; 0xf912 <close>
    f97c:	08 95       	ret
    f97e:	8f ef       	ldi	r24, 0xFF	; 255
    f980:	9f ef       	ldi	r25, 0xFF	; 255
    f982:	08 95       	ret

0000f984 <new_file_descriptor>:
    f984:	0f 93       	push	r16
    f986:	1f 93       	push	r17
    f988:	cf 93       	push	r28
    f98a:	df 93       	push	r29
    f98c:	e0 ea       	ldi	r30, 0xA0	; 160
    f98e:	fc e1       	ldi	r31, 0x1C	; 28
    f990:	c0 e0       	ldi	r28, 0x00	; 0
    f992:	d0 e0       	ldi	r29, 0x00	; 0
    f994:	21 96       	adiw	r28, 0x01	; 1
    f996:	c0 31       	cpi	r28, 0x10	; 16
    f998:	d1 05       	cpc	r29, r1
    f99a:	49 f0       	breq	.+18     	; 0xf9ae <new_file_descriptor+0x2a>
    f99c:	c3 30       	cpi	r28, 0x03	; 3
    f99e:	d1 05       	cpc	r29, r1
    f9a0:	24 f0       	brlt	.+8      	; 0xf9aa <new_file_descriptor+0x26>
    f9a2:	82 81       	ldd	r24, Z+2	; 0x02
    f9a4:	93 81       	ldd	r25, Z+3	; 0x03
    f9a6:	89 2b       	or	r24, r25
    f9a8:	59 f0       	breq	.+22     	; 0xf9c0 <new_file_descriptor+0x3c>
    f9aa:	32 96       	adiw	r30, 0x02	; 2
    f9ac:	f3 cf       	rjmp	.-26     	; 0xf994 <new_file_descriptor+0x10>
    f9ae:	87 e1       	ldi	r24, 0x17	; 23
    f9b0:	90 e0       	ldi	r25, 0x00	; 0
    f9b2:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    f9b6:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    f9ba:	8f ef       	ldi	r24, 0xFF	; 255
    f9bc:	9f ef       	ldi	r25, 0xFF	; 255
    f9be:	22 c0       	rjmp	.+68     	; 0xfa04 <new_file_descriptor+0x80>
    f9c0:	61 e0       	ldi	r22, 0x01	; 1
    f9c2:	70 e0       	ldi	r23, 0x00	; 0
    f9c4:	8e e0       	ldi	r24, 0x0E	; 14
    f9c6:	90 e0       	ldi	r25, 0x00	; 0
    f9c8:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    f9cc:	8c 01       	movw	r16, r24
    f9ce:	89 2b       	or	r24, r25
    f9d0:	59 f0       	breq	.+22     	; 0xf9e8 <new_file_descriptor+0x64>
    f9d2:	61 e0       	ldi	r22, 0x01	; 1
    f9d4:	70 e0       	ldi	r23, 0x00	; 0
    f9d6:	84 e2       	ldi	r24, 0x24	; 36
    f9d8:	92 e0       	ldi	r25, 0x02	; 2
    f9da:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    f9de:	00 97       	sbiw	r24, 0x00	; 0
    f9e0:	31 f4       	brne	.+12     	; 0xf9ee <new_file_descriptor+0x6a>
    f9e2:	c8 01       	movw	r24, r16
    f9e4:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    f9e8:	8c e0       	ldi	r24, 0x0C	; 12
    f9ea:	90 e0       	ldi	r25, 0x00	; 0
    f9ec:	e2 cf       	rjmp	.-60     	; 0xf9b2 <new_file_descriptor+0x2e>
    f9ee:	fe 01       	movw	r30, r28
    f9f0:	ee 0f       	add	r30, r30
    f9f2:	ff 1f       	adc	r31, r31
    f9f4:	e0 56       	subi	r30, 0x60	; 96
    f9f6:	f3 4e       	sbci	r31, 0xE3	; 227
    f9f8:	11 83       	std	Z+1, r17	; 0x01
    f9fa:	00 83       	st	Z, r16
    f9fc:	f8 01       	movw	r30, r16
    f9fe:	95 87       	std	Z+13, r25	; 0x0d
    fa00:	84 87       	std	Z+12, r24	; 0x0c
    fa02:	ce 01       	movw	r24, r28
    fa04:	df 91       	pop	r29
    fa06:	cf 91       	pop	r28
    fa08:	1f 91       	pop	r17
    fa0a:	0f 91       	pop	r16
    fa0c:	08 95       	ret

0000fa0e <open>:
    fa0e:	a0 e0       	ldi	r26, 0x00	; 0
    fa10:	b0 e0       	ldi	r27, 0x00	; 0
    fa12:	ed e0       	ldi	r30, 0x0D	; 13
    fa14:	fd e7       	ldi	r31, 0x7D	; 125
    fa16:	0c 94 95 e0 	jmp	0x1c12a	; 0x1c12a <__prologue_saves__+0x8>
    fa1a:	5c 01       	movw	r10, r24
    fa1c:	6b 01       	movw	r12, r22
    fa1e:	10 92 9f 1c 	sts	0x1C9F, r1	; 0x801c9f <errno+0x1>
    fa22:	10 92 9e 1c 	sts	0x1C9E, r1	; 0x801c9e <errno>
    fa26:	7b 01       	movw	r14, r22
    fa28:	83 e0       	ldi	r24, 0x03	; 3
    fa2a:	e8 22       	and	r14, r24
    fa2c:	ff 24       	eor	r15, r15
    fa2e:	e2 e0       	ldi	r30, 0x02	; 2
    fa30:	ee 16       	cp	r14, r30
    fa32:	f1 04       	cpc	r15, r1
    fa34:	31 f0       	breq	.+12     	; 0xfa42 <open+0x34>
    fa36:	e1 14       	cp	r14, r1
    fa38:	f1 04       	cpc	r15, r1
    fa3a:	31 f0       	breq	.+12     	; 0xfa48 <open+0x3a>
    fa3c:	02 e0       	ldi	r16, 0x02	; 2
    fa3e:	10 e0       	ldi	r17, 0x00	; 0
    fa40:	05 c0       	rjmp	.+10     	; 0xfa4c <open+0x3e>
    fa42:	03 e0       	ldi	r16, 0x03	; 3
    fa44:	10 e0       	ldi	r17, 0x00	; 0
    fa46:	02 c0       	rjmp	.+4      	; 0xfa4c <open+0x3e>
    fa48:	01 e0       	ldi	r16, 0x01	; 1
    fa4a:	10 e0       	ldi	r17, 0x00	; 0
    fa4c:	c6 fe       	sbrs	r12, 6
    fa4e:	05 c0       	rjmp	.+10     	; 0xfa5a <open+0x4c>
    fa50:	d1 fe       	sbrs	r13, 1
    fa52:	02 c0       	rjmp	.+4      	; 0xfa58 <open+0x4a>
    fa54:	08 60       	ori	r16, 0x08	; 8
    fa56:	01 c0       	rjmp	.+2      	; 0xfa5a <open+0x4c>
    fa58:	00 61       	ori	r16, 0x10	; 16
    fa5a:	94 df       	rcall	.-216    	; 0xf984 <new_file_descriptor>
    fa5c:	3c 01       	movw	r6, r24
    fa5e:	77 d9       	rcall	.-3346   	; 0xed4e <fileno_to_stream>
    fa60:	ec 01       	movw	r28, r24
    fa62:	c3 01       	movw	r24, r6
    fa64:	20 97       	sbiw	r28, 0x00	; 0
    fa66:	09 f4       	brne	.+2      	; 0xfa6a <open+0x5c>
    fa68:	48 c0       	rjmp	.+144    	; 0xfafa <open+0xec>
    fa6a:	04 dd       	rcall	.-1528   	; 0xf474 <fileno_to_fatfs>
    fa6c:	4c 01       	movw	r8, r24
    fa6e:	00 97       	sbiw	r24, 0x00	; 0
    fa70:	59 f4       	brne	.+22     	; 0xfa88 <open+0x7a>
    fa72:	c3 01       	movw	r24, r6
    fa74:	19 df       	rcall	.-462    	; 0xf8a8 <free_file_descriptor>
    fa76:	89 e0       	ldi	r24, 0x09	; 9
    fa78:	90 e0       	ldi	r25, 0x00	; 0
    fa7a:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    fa7e:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    fa82:	8f ef       	ldi	r24, 0xFF	; 255
    fa84:	9f ef       	ldi	r25, 0xFF	; 255
    fa86:	5d c0       	rjmp	.+186    	; 0xfb42 <open+0x134>
    fa88:	40 2f       	mov	r20, r16
    fa8a:	b5 01       	movw	r22, r10
    fa8c:	0e 94 84 59 	call	0xb308	; 0xb308 <f_open>
    fa90:	00 97       	sbiw	r24, 0x00	; 0
    fa92:	91 f0       	breq	.+36     	; 0xfab8 <open+0xaa>
    fa94:	84 31       	cpi	r24, 0x14	; 20
    fa96:	91 05       	cpc	r25, r1
    fa98:	40 f4       	brcc	.+16     	; 0xfaaa <open+0x9c>
    fa9a:	fc 01       	movw	r30, r24
    fa9c:	e8 58       	subi	r30, 0x88	; 136
    fa9e:	f4 4f       	sbci	r31, 0xF4	; 244
    faa0:	80 81       	ld	r24, Z
    faa2:	08 2e       	mov	r0, r24
    faa4:	00 0c       	add	r0, r0
    faa6:	99 0b       	sbc	r25, r25
    faa8:	02 c0       	rjmp	.+4      	; 0xfaae <open+0xa0>
    faaa:	83 e2       	ldi	r24, 0x23	; 35
    faac:	90 e0       	ldi	r25, 0x00	; 0
    faae:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    fab2:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    fab6:	20 c0       	rjmp	.+64     	; 0xfaf8 <open+0xea>
    fab8:	d2 fe       	sbrs	r13, 2
    faba:	21 c0       	rjmp	.+66     	; 0xfafe <open+0xf0>
    fabc:	f4 01       	movw	r30, r8
    fabe:	42 85       	ldd	r20, Z+10	; 0x0a
    fac0:	53 85       	ldd	r21, Z+11	; 0x0b
    fac2:	64 85       	ldd	r22, Z+12	; 0x0c
    fac4:	75 85       	ldd	r23, Z+13	; 0x0d
    fac6:	c4 01       	movw	r24, r8
    fac8:	0e 94 48 60 	call	0xc090	; 0xc090 <f_lseek>
    facc:	00 97       	sbiw	r24, 0x00	; 0
    face:	b9 f0       	breq	.+46     	; 0xfafe <open+0xf0>
    fad0:	84 31       	cpi	r24, 0x14	; 20
    fad2:	91 05       	cpc	r25, r1
    fad4:	40 f4       	brcc	.+16     	; 0xfae6 <open+0xd8>
    fad6:	fc 01       	movw	r30, r24
    fad8:	e8 58       	subi	r30, 0x88	; 136
    fada:	f4 4f       	sbci	r31, 0xF4	; 244
    fadc:	80 81       	ld	r24, Z
    fade:	08 2e       	mov	r0, r24
    fae0:	00 0c       	add	r0, r0
    fae2:	99 0b       	sbc	r25, r25
    fae4:	02 c0       	rjmp	.+4      	; 0xfaea <open+0xdc>
    fae6:	83 e2       	ldi	r24, 0x23	; 35
    fae8:	90 e0       	ldi	r25, 0x00	; 0
    faea:	90 93 9f 1c 	sts	0x1C9F, r25	; 0x801c9f <errno+0x1>
    faee:	80 93 9e 1c 	sts	0x1C9E, r24	; 0x801c9e <errno>
    faf2:	c4 01       	movw	r24, r8
    faf4:	0e 94 9e 5e 	call	0xbd3c	; 0xbd3c <f_close>
    faf8:	c3 01       	movw	r24, r6
    fafa:	d6 de       	rcall	.-596    	; 0xf8a8 <free_file_descriptor>
    fafc:	c2 cf       	rjmp	.-124    	; 0xfa82 <open+0x74>
    fafe:	f2 e0       	ldi	r31, 0x02	; 2
    fb00:	ef 16       	cp	r14, r31
    fb02:	f1 04       	cpc	r15, r1
    fb04:	51 f4       	brne	.+20     	; 0xfb1a <open+0x10c>
    fb06:	8c e1       	ldi	r24, 0x1C	; 28
    fb08:	95 e7       	ldi	r25, 0x75	; 117
    fb0a:	99 87       	std	Y+9, r25	; 0x09
    fb0c:	88 87       	std	Y+8, r24	; 0x08
    fb0e:	89 e9       	ldi	r24, 0x99	; 153
    fb10:	94 e7       	ldi	r25, 0x74	; 116
    fb12:	9b 87       	std	Y+11, r25	; 0x0b
    fb14:	8a 87       	std	Y+10, r24	; 0x0a
    fb16:	83 e0       	ldi	r24, 0x03	; 3
    fb18:	12 c0       	rjmp	.+36     	; 0xfb3e <open+0x130>
    fb1a:	e1 14       	cp	r14, r1
    fb1c:	f1 04       	cpc	r15, r1
    fb1e:	41 f4       	brne	.+16     	; 0xfb30 <open+0x122>
    fb20:	19 86       	std	Y+9, r1	; 0x09
    fb22:	18 86       	std	Y+8, r1	; 0x08
    fb24:	89 e9       	ldi	r24, 0x99	; 153
    fb26:	94 e7       	ldi	r25, 0x74	; 116
    fb28:	9b 87       	std	Y+11, r25	; 0x0b
    fb2a:	8a 87       	std	Y+10, r24	; 0x0a
    fb2c:	81 e0       	ldi	r24, 0x01	; 1
    fb2e:	07 c0       	rjmp	.+14     	; 0xfb3e <open+0x130>
    fb30:	8c e1       	ldi	r24, 0x1C	; 28
    fb32:	95 e7       	ldi	r25, 0x75	; 117
    fb34:	99 87       	std	Y+9, r25	; 0x09
    fb36:	88 87       	std	Y+8, r24	; 0x08
    fb38:	1b 86       	std	Y+11, r1	; 0x0b
    fb3a:	1a 86       	std	Y+10, r1	; 0x0a
    fb3c:	82 e0       	ldi	r24, 0x02	; 2
    fb3e:	8b 83       	std	Y+3, r24	; 0x03
    fb40:	c3 01       	movw	r24, r6
    fb42:	cd b7       	in	r28, 0x3d	; 61
    fb44:	de b7       	in	r29, 0x3e	; 62
    fb46:	ee e0       	ldi	r30, 0x0E	; 14
    fb48:	0c 94 b1 e0 	jmp	0x1c162	; 0x1c162 <__epilogue_restores__+0x8>

0000fb4c <posix_fopen_modes_to_open>:
    fb4c:	cf 93       	push	r28
    fb4e:	df 93       	push	r29
    fb50:	ec 01       	movw	r28, r24
    fb52:	64 e1       	ldi	r22, 0x14	; 20
    fb54:	73 e0       	ldi	r23, 0x03	; 3
    fb56:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fb5a:	00 97       	sbiw	r24, 0x00	; 0
    fb5c:	09 f4       	brne	.+2      	; 0xfb60 <posix_fopen_modes_to_open+0x14>
    fb5e:	5d c0       	rjmp	.+186    	; 0xfc1a <posix_fopen_modes_to_open+0xce>
    fb60:	60 ed       	ldi	r22, 0xD0	; 208
    fb62:	78 e0       	ldi	r23, 0x08	; 8
    fb64:	ce 01       	movw	r24, r28
    fb66:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fb6a:	00 97       	sbiw	r24, 0x00	; 0
    fb6c:	09 f4       	brne	.+2      	; 0xfb70 <posix_fopen_modes_to_open+0x24>
    fb6e:	55 c0       	rjmp	.+170    	; 0xfc1a <posix_fopen_modes_to_open+0xce>
    fb70:	63 ed       	ldi	r22, 0xD3	; 211
    fb72:	78 e0       	ldi	r23, 0x08	; 8
    fb74:	ce 01       	movw	r24, r28
    fb76:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fb7a:	89 2b       	or	r24, r25
    fb7c:	09 f4       	brne	.+2      	; 0xfb80 <posix_fopen_modes_to_open+0x34>
    fb7e:	42 c0       	rjmp	.+132    	; 0xfc04 <posix_fopen_modes_to_open+0xb8>
    fb80:	66 ed       	ldi	r22, 0xD6	; 214
    fb82:	78 e0       	ldi	r23, 0x08	; 8
    fb84:	ce 01       	movw	r24, r28
    fb86:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fb8a:	89 2b       	or	r24, r25
    fb8c:	d9 f1       	breq	.+118    	; 0xfc04 <posix_fopen_modes_to_open+0xb8>
    fb8e:	6a ed       	ldi	r22, 0xDA	; 218
    fb90:	78 e0       	ldi	r23, 0x08	; 8
    fb92:	ce 01       	movw	r24, r28
    fb94:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fb98:	89 2b       	or	r24, r25
    fb9a:	a1 f1       	breq	.+104    	; 0xfc04 <posix_fopen_modes_to_open+0xb8>
    fb9c:	6f e8       	ldi	r22, 0x8F	; 143
    fb9e:	7a e0       	ldi	r23, 0x0A	; 10
    fba0:	ce 01       	movw	r24, r28
    fba2:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fba6:	89 2b       	or	r24, r25
    fba8:	81 f1       	breq	.+96     	; 0xfc0a <posix_fopen_modes_to_open+0xbe>
    fbaa:	6e ed       	ldi	r22, 0xDE	; 222
    fbac:	78 e0       	ldi	r23, 0x08	; 8
    fbae:	ce 01       	movw	r24, r28
    fbb0:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fbb4:	89 2b       	or	r24, r25
    fbb6:	49 f1       	breq	.+82     	; 0xfc0a <posix_fopen_modes_to_open+0xbe>
    fbb8:	61 ee       	ldi	r22, 0xE1	; 225
    fbba:	78 e0       	ldi	r23, 0x08	; 8
    fbbc:	ce 01       	movw	r24, r28
    fbbe:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fbc2:	89 2b       	or	r24, r25
    fbc4:	29 f1       	breq	.+74     	; 0xfc10 <posix_fopen_modes_to_open+0xc4>
    fbc6:	64 ee       	ldi	r22, 0xE4	; 228
    fbc8:	78 e0       	ldi	r23, 0x08	; 8
    fbca:	ce 01       	movw	r24, r28
    fbcc:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fbd0:	89 2b       	or	r24, r25
    fbd2:	f1 f0       	breq	.+60     	; 0xfc10 <posix_fopen_modes_to_open+0xc4>
    fbd4:	68 ee       	ldi	r22, 0xE8	; 232
    fbd6:	78 e0       	ldi	r23, 0x08	; 8
    fbd8:	ce 01       	movw	r24, r28
    fbda:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fbde:	89 2b       	or	r24, r25
    fbe0:	b9 f0       	breq	.+46     	; 0xfc10 <posix_fopen_modes_to_open+0xc4>
    fbe2:	63 ee       	ldi	r22, 0xE3	; 227
    fbe4:	72 e1       	ldi	r23, 0x12	; 18
    fbe6:	ce 01       	movw	r24, r28
    fbe8:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fbec:	89 2b       	or	r24, r25
    fbee:	99 f0       	breq	.+38     	; 0xfc16 <posix_fopen_modes_to_open+0xca>
    fbf0:	6c ee       	ldi	r22, 0xEC	; 236
    fbf2:	78 e0       	ldi	r23, 0x08	; 8
    fbf4:	ce 01       	movw	r24, r28
    fbf6:	0e 94 1e 31 	call	0x623c	; 0x623c <strcmp>
    fbfa:	89 2b       	or	r24, r25
    fbfc:	61 f0       	breq	.+24     	; 0xfc16 <posix_fopen_modes_to_open+0xca>
    fbfe:	8f ef       	ldi	r24, 0xFF	; 255
    fc00:	9f ef       	ldi	r25, 0xFF	; 255
    fc02:	0b c0       	rjmp	.+22     	; 0xfc1a <posix_fopen_modes_to_open+0xce>
    fc04:	82 e0       	ldi	r24, 0x02	; 2
    fc06:	92 e0       	ldi	r25, 0x02	; 2
    fc08:	08 c0       	rjmp	.+16     	; 0xfc1a <posix_fopen_modes_to_open+0xce>
    fc0a:	81 e4       	ldi	r24, 0x41	; 65
    fc0c:	92 e0       	ldi	r25, 0x02	; 2
    fc0e:	05 c0       	rjmp	.+10     	; 0xfc1a <posix_fopen_modes_to_open+0xce>
    fc10:	82 e4       	ldi	r24, 0x42	; 66
    fc12:	92 e0       	ldi	r25, 0x02	; 2
    fc14:	02 c0       	rjmp	.+4      	; 0xfc1a <posix_fopen_modes_to_open+0xce>
    fc16:	81 e4       	ldi	r24, 0x41	; 65
    fc18:	94 e0       	ldi	r25, 0x04	; 4
    fc1a:	df 91       	pop	r29
    fc1c:	cf 91       	pop	r28
    fc1e:	08 95       	ret

0000fc20 <fopen>:
    fc20:	cf 93       	push	r28
    fc22:	df 93       	push	r29
    fc24:	ec 01       	movw	r28, r24
    fc26:	cb 01       	movw	r24, r22
    fc28:	91 df       	rcall	.-222    	; 0xfb4c <posix_fopen_modes_to_open>
    fc2a:	bc 01       	movw	r22, r24
    fc2c:	ce 01       	movw	r24, r28
    fc2e:	ef de       	rcall	.-546    	; 0xfa0e <open>
    fc30:	8e d8       	rcall	.-3812   	; 0xed4e <fileno_to_stream>
    fc32:	df 91       	pop	r29
    fc34:	cf 91       	pop	r28
    fc36:	08 95       	ret

0000fc38 <fprintf>:
    fc38:	a8 e0       	ldi	r26, 0x08	; 8
    fc3a:	b0 e0       	ldi	r27, 0x00	; 0
    fc3c:	e2 e2       	ldi	r30, 0x22	; 34
    fc3e:	fe e7       	ldi	r31, 0x7E	; 126
    fc40:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
    fc44:	8f e0       	ldi	r24, 0x0F	; 15
    fc46:	96 e7       	ldi	r25, 0x76	; 118
    fc48:	9a 83       	std	Y+2, r25	; 0x02
    fc4a:	89 83       	std	Y+1, r24	; 0x01
    fc4c:	18 86       	std	Y+8, r1	; 0x08
    fc4e:	1f 82       	std	Y+7, r1	; 0x07
    fc50:	8d 85       	ldd	r24, Y+13	; 0x0d
    fc52:	9e 85       	ldd	r25, Y+14	; 0x0e
    fc54:	9c 83       	std	Y+4, r25	; 0x04
    fc56:	8b 83       	std	Y+3, r24	; 0x03
    fc58:	4f 85       	ldd	r20, Y+15	; 0x0f
    fc5a:	58 89       	ldd	r21, Y+16	; 0x10
    fc5c:	60 e8       	ldi	r22, 0x80	; 128
    fc5e:	9e 01       	movw	r18, r28
    fc60:	2f 5e       	subi	r18, 0xEF	; 239
    fc62:	3f 4f       	sbci	r19, 0xFF	; 255
    fc64:	ce 01       	movw	r24, r28
    fc66:	01 96       	adiw	r24, 0x01	; 1
    fc68:	0e 94 6c 41 	call	0x82d8	; 0x82d8 <_printf_fn>
    fc6c:	8f 81       	ldd	r24, Y+7	; 0x07
    fc6e:	98 85       	ldd	r25, Y+8	; 0x08
    fc70:	28 96       	adiw	r28, 0x08	; 8
    fc72:	e2 e0       	ldi	r30, 0x02	; 2
    fc74:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000fc78 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fc78:	cf 93       	push	r28
    fc7a:	df 93       	push	r29
    fc7c:	00 d0       	rcall	.+0      	; 0xfc7e <posix_help+0x6>
    fc7e:	1f 92       	push	r1
    fc80:	ec 01       	movw	r28, r24
    fc82:	8d e0       	ldi	r24, 0x0D	; 13
    fc84:	9e e0       	ldi	r25, 0x0E	; 14
    fc86:	a0 e0       	ldi	r26, 0x00	; 0
    fc88:	ed b7       	in	r30, 0x3d	; 61
    fc8a:	fe b7       	in	r31, 0x3e	; 62
    fc8c:	81 83       	std	Z+1, r24	; 0x01
    fc8e:	92 83       	std	Z+2, r25	; 0x02
    fc90:	a3 83       	std	Z+3, r26	; 0x03
    fc92:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fc96:	cd 2b       	or	r28, r29
    fc98:	51 f0       	breq	.+20     	; 0xfcae <posix_help+0x36>
    fc9a:	87 e4       	ldi	r24, 0x47	; 71
    fc9c:	9d e0       	ldi	r25, 0x0D	; 13
    fc9e:	a0 e0       	ldi	r26, 0x00	; 0
    fca0:	ed b7       	in	r30, 0x3d	; 61
    fca2:	fe b7       	in	r31, 0x3e	; 62
    fca4:	81 83       	std	Z+1, r24	; 0x01
    fca6:	92 83       	std	Z+2, r25	; 0x02
    fca8:	a3 83       	std	Z+3, r26	; 0x03
    fcaa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fcae:	cd b7       	in	r28, 0x3d	; 61
    fcb0:	de b7       	in	r29, 0x3e	; 62
    fcb2:	23 96       	adiw	r28, 0x03	; 3
    fcb4:	e2 e0       	ldi	r30, 0x02	; 2
    fcb6:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000fcba <copy>:
    fcba:	4f 92       	push	r4
    fcbc:	5f 92       	push	r5
    fcbe:	6f 92       	push	r6
    fcc0:	8f 92       	push	r8
    fcc2:	9f 92       	push	r9
    fcc4:	af 92       	push	r10
    fcc6:	bf 92       	push	r11
    fcc8:	cf 92       	push	r12
    fcca:	df 92       	push	r13
    fccc:	ef 92       	push	r14
    fcce:	ff 92       	push	r15
    fcd0:	0f 93       	push	r16
    fcd2:	1f 93       	push	r17
    fcd4:	cf 93       	push	r28
    fcd6:	df 93       	push	r29
    fcd8:	ad b7       	in	r26, 0x3d	; 61
    fcda:	be b7       	in	r27, 0x3e	; 62
    fcdc:	17 97       	sbiw	r26, 0x07	; 7
    fcde:	0f b6       	in	r0, 0x3f	; 63
    fce0:	f8 94       	cli
    fce2:	be bf       	out	0x3e, r27	; 62
    fce4:	0f be       	out	0x3f, r0	; 63
    fce6:	ad bf       	out	0x3d, r26	; 61
    fce8:	8c 01       	movw	r16, r24
    fcea:	eb 01       	movw	r28, r22
    fcec:	ed b7       	in	r30, 0x3d	; 61
    fcee:	fe b7       	in	r31, 0x3e	; 62
    fcf0:	95 83       	std	Z+5, r25	; 0x05
    fcf2:	84 83       	std	Z+4, r24	; 0x04
    fcf4:	88 ec       	ldi	r24, 0xC8	; 200
    fcf6:	9c e0       	ldi	r25, 0x0C	; 12
    fcf8:	a0 e0       	ldi	r26, 0x00	; 0
    fcfa:	81 83       	std	Z+1, r24	; 0x01
    fcfc:	92 83       	std	Z+2, r25	; 0x02
    fcfe:	a3 83       	std	Z+3, r26	; 0x03
    fd00:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fd04:	60 ed       	ldi	r22, 0xD0	; 208
    fd06:	78 e0       	ldi	r23, 0x08	; 8
    fd08:	c8 01       	movw	r24, r16
    fd0a:	8a df       	rcall	.-236    	; 0xfc20 <fopen>
    fd0c:	7c 01       	movw	r14, r24
    fd0e:	ed b7       	in	r30, 0x3d	; 61
    fd10:	fe b7       	in	r31, 0x3e	; 62
    fd12:	89 2b       	or	r24, r25
    fd14:	59 f4       	brne	.+22     	; 0xfd2c <copy+0x72>
    fd16:	15 83       	std	Z+5, r17	; 0x05
    fd18:	04 83       	std	Z+4, r16	; 0x04
    fd1a:	88 eb       	ldi	r24, 0xB8	; 184
    fd1c:	9c e0       	ldi	r25, 0x0C	; 12
    fd1e:	a0 e0       	ldi	r26, 0x00	; 0
    fd20:	81 83       	std	Z+1, r24	; 0x01
    fd22:	92 83       	std	Z+2, r25	; 0x02
    fd24:	a3 83       	std	Z+3, r26	; 0x03
    fd26:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fd2a:	20 c0       	rjmp	.+64     	; 0xfd6c <copy+0xb2>
    fd2c:	d5 83       	std	Z+5, r29	; 0x05
    fd2e:	c4 83       	std	Z+4, r28	; 0x04
    fd30:	8b ea       	ldi	r24, 0xAB	; 171
    fd32:	9c e0       	ldi	r25, 0x0C	; 12
    fd34:	a0 e0       	ldi	r26, 0x00	; 0
    fd36:	81 83       	std	Z+1, r24	; 0x01
    fd38:	92 83       	std	Z+2, r25	; 0x02
    fd3a:	a3 83       	std	Z+3, r26	; 0x03
    fd3c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fd40:	6e ed       	ldi	r22, 0xDE	; 222
    fd42:	78 e0       	ldi	r23, 0x08	; 8
    fd44:	ce 01       	movw	r24, r28
    fd46:	6c df       	rcall	.-296    	; 0xfc20 <fopen>
    fd48:	8c 01       	movw	r16, r24
    fd4a:	89 2b       	or	r24, r25
    fd4c:	a1 f4       	brne	.+40     	; 0xfd76 <copy+0xbc>
    fd4e:	ed b7       	in	r30, 0x3d	; 61
    fd50:	fe b7       	in	r31, 0x3e	; 62
    fd52:	d5 83       	std	Z+5, r29	; 0x05
    fd54:	c4 83       	std	Z+4, r28	; 0x04
    fd56:	8b e9       	ldi	r24, 0x9B	; 155
    fd58:	9c e0       	ldi	r25, 0x0C	; 12
    fd5a:	a0 e0       	ldi	r26, 0x00	; 0
    fd5c:	81 83       	std	Z+1, r24	; 0x01
    fd5e:	92 83       	std	Z+2, r25	; 0x02
    fd60:	a3 83       	std	Z+3, r26	; 0x03
    fd62:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fd66:	80 e0       	ldi	r24, 0x00	; 0
    fd68:	90 e0       	ldi	r25, 0x00	; 0
    fd6a:	04 de       	rcall	.-1016   	; 0xf974 <fclose>
    fd6c:	60 e0       	ldi	r22, 0x00	; 0
    fd6e:	70 e0       	ldi	r23, 0x00	; 0
    fd70:	80 e0       	ldi	r24, 0x00	; 0
    fd72:	90 e0       	ldi	r25, 0x00	; 0
    fd74:	68 c0       	rjmp	.+208    	; 0xfe46 <copy+0x18c>
    fd76:	61 e0       	ldi	r22, 0x01	; 1
    fd78:	70 e0       	ldi	r23, 0x00	; 0
    fd7a:	80 e0       	ldi	r24, 0x00	; 0
    fd7c:	92 e0       	ldi	r25, 0x02	; 2
    fd7e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
    fd82:	6c 01       	movw	r12, r24
    fd84:	89 2b       	or	r24, r25
    fd86:	21 f4       	brne	.+8      	; 0xfd90 <copy+0xd6>
    fd88:	c7 01       	movw	r24, r14
    fd8a:	f4 dd       	rcall	.-1048   	; 0xf974 <fclose>
    fd8c:	c8 01       	movw	r24, r16
    fd8e:	ed cf       	rjmp	.-38     	; 0xfd6a <copy+0xb0>
    fd90:	8e e8       	ldi	r24, 0x8E	; 142
    fd92:	9c e0       	ldi	r25, 0x0C	; 12
    fd94:	a0 e0       	ldi	r26, 0x00	; 0
    fd96:	ed b7       	in	r30, 0x3d	; 61
    fd98:	fe b7       	in	r31, 0x3e	; 62
    fd9a:	81 83       	std	Z+1, r24	; 0x01
    fd9c:	92 83       	std	Z+2, r25	; 0x02
    fd9e:	a3 83       	std	Z+3, r26	; 0x03
    fda0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fda4:	81 2c       	mov	r8, r1
    fda6:	91 2c       	mov	r9, r1
    fda8:	54 01       	movw	r10, r8
    fdaa:	82 e7       	ldi	r24, 0x72	; 114
    fdac:	9c e0       	ldi	r25, 0x0C	; 12
    fdae:	2c 01       	movw	r4, r24
    fdb0:	61 2c       	mov	r6, r1
    fdb2:	97 01       	movw	r18, r14
    fdb4:	40 e0       	ldi	r20, 0x00	; 0
    fdb6:	52 e0       	ldi	r21, 0x02	; 2
    fdb8:	61 e0       	ldi	r22, 0x01	; 1
    fdba:	70 e0       	ldi	r23, 0x00	; 0
    fdbc:	c6 01       	movw	r24, r12
    fdbe:	86 dc       	rcall	.-1780   	; 0xf6cc <fread>
    fdc0:	ec 01       	movw	r28, r24
    fdc2:	18 16       	cp	r1, r24
    fdc4:	19 06       	cpc	r1, r25
    fdc6:	44 f5       	brge	.+80     	; 0xfe18 <copy+0x15e>
    fdc8:	98 01       	movw	r18, r16
    fdca:	ae 01       	movw	r20, r28
    fdcc:	61 e0       	ldi	r22, 0x01	; 1
    fdce:	70 e0       	ldi	r23, 0x00	; 0
    fdd0:	c6 01       	movw	r24, r12
    fdd2:	4e dd       	rcall	.-1380   	; 0xf870 <fwrite>
    fdd4:	8c 17       	cp	r24, r28
    fdd6:	9d 07       	cpc	r25, r29
    fdd8:	5c f4       	brge	.+22     	; 0xfdf0 <copy+0x136>
    fdda:	81 e8       	ldi	r24, 0x81	; 129
    fddc:	9c e0       	ldi	r25, 0x0C	; 12
    fdde:	a0 e0       	ldi	r26, 0x00	; 0
    fde0:	ed b7       	in	r30, 0x3d	; 61
    fde2:	fe b7       	in	r31, 0x3e	; 62
    fde4:	81 83       	std	Z+1, r24	; 0x01
    fde6:	92 83       	std	Z+2, r25	; 0x02
    fde8:	a3 83       	std	Z+3, r26	; 0x03
    fdea:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fdee:	14 c0       	rjmp	.+40     	; 0xfe18 <copy+0x15e>
    fdf0:	ce 01       	movw	r24, r28
    fdf2:	dd 0f       	add	r29, r29
    fdf4:	aa 0b       	sbc	r26, r26
    fdf6:	bb 0b       	sbc	r27, r27
    fdf8:	88 0e       	add	r8, r24
    fdfa:	99 1e       	adc	r9, r25
    fdfc:	aa 1e       	adc	r10, r26
    fdfe:	bb 1e       	adc	r11, r27
    fe00:	ed b7       	in	r30, 0x3d	; 61
    fe02:	fe b7       	in	r31, 0x3e	; 62
    fe04:	84 82       	std	Z+4, r8	; 0x04
    fe06:	95 82       	std	Z+5, r9	; 0x05
    fe08:	a6 82       	std	Z+6, r10	; 0x06
    fe0a:	b7 82       	std	Z+7, r11	; 0x07
    fe0c:	41 82       	std	Z+1, r4	; 0x01
    fe0e:	52 82       	std	Z+2, r5	; 0x02
    fe10:	63 82       	std	Z+3, r6	; 0x03
    fe12:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fe16:	cd cf       	rjmp	.-102    	; 0xfdb2 <copy+0xf8>
    fe18:	ed b7       	in	r30, 0x3d	; 61
    fe1a:	fe b7       	in	r31, 0x3e	; 62
    fe1c:	84 82       	std	Z+4, r8	; 0x04
    fe1e:	95 82       	std	Z+5, r9	; 0x05
    fe20:	a6 82       	std	Z+6, r10	; 0x06
    fe22:	b7 82       	std	Z+7, r11	; 0x07
    fe24:	8f e5       	ldi	r24, 0x5F	; 95
    fe26:	9c e0       	ldi	r25, 0x0C	; 12
    fe28:	a0 e0       	ldi	r26, 0x00	; 0
    fe2a:	81 83       	std	Z+1, r24	; 0x01
    fe2c:	92 83       	std	Z+2, r25	; 0x02
    fe2e:	a3 83       	std	Z+3, r26	; 0x03
    fe30:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fe34:	c6 01       	movw	r24, r12
    fe36:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
    fe3a:	c7 01       	movw	r24, r14
    fe3c:	9b dd       	rcall	.-1226   	; 0xf974 <fclose>
    fe3e:	c8 01       	movw	r24, r16
    fe40:	99 dd       	rcall	.-1230   	; 0xf974 <fclose>
    fe42:	b4 01       	movw	r22, r8
    fe44:	c5 01       	movw	r24, r10
    fe46:	ad b7       	in	r26, 0x3d	; 61
    fe48:	be b7       	in	r27, 0x3e	; 62
    fe4a:	17 96       	adiw	r26, 0x07	; 7
    fe4c:	0f b6       	in	r0, 0x3f	; 63
    fe4e:	f8 94       	cli
    fe50:	be bf       	out	0x3e, r27	; 62
    fe52:	0f be       	out	0x3f, r0	; 63
    fe54:	ad bf       	out	0x3d, r26	; 61
    fe56:	df 91       	pop	r29
    fe58:	cf 91       	pop	r28
    fe5a:	1f 91       	pop	r17
    fe5c:	0f 91       	pop	r16
    fe5e:	ff 90       	pop	r15
    fe60:	ef 90       	pop	r14
    fe62:	df 90       	pop	r13
    fe64:	cf 90       	pop	r12
    fe66:	bf 90       	pop	r11
    fe68:	af 90       	pop	r10
    fe6a:	9f 90       	pop	r9
    fe6c:	8f 90       	pop	r8
    fe6e:	6f 90       	pop	r6
    fe70:	5f 90       	pop	r5
    fe72:	4f 90       	pop	r4
    fe74:	08 95       	ret

0000fe76 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fe76:	cf 93       	push	r28
    fe78:	df 93       	push	r29
    fe7a:	00 d0       	rcall	.+0      	; 0xfe7c <testpage+0x6>
    fe7c:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fe7e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <_pagesize>
    fe82:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <_pagesize+0x1>
    fe86:	82 17       	cp	r24, r18
    fe88:	93 07       	cpc	r25, r19
    fe8a:	3c f1       	brlt	.+78     	; 0xfeda <testpage+0x64>
    {
        printf("More..");
    fe8c:	88 e5       	ldi	r24, 0x58	; 88
    fe8e:	9c e0       	ldi	r25, 0x0C	; 12
    fe90:	a0 e0       	ldi	r26, 0x00	; 0
    fe92:	ed b7       	in	r30, 0x3d	; 61
    fe94:	fe b7       	in	r31, 0x3e	; 62
    fe96:	81 83       	std	Z+1, r24	; 0x01
    fe98:	92 83       	std	Z+2, r25	; 0x02
    fe9a:	a3 83       	std	Z+3, r26	; 0x03
    fe9c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fea0:	0e 94 1c 76 	call	0xec38	; 0xec38 <getchar>
    fea4:	ec 01       	movw	r28, r24
        printf("\r");
    fea6:	86 e5       	ldi	r24, 0x56	; 86
    fea8:	9c e0       	ldi	r25, 0x0C	; 12
    feaa:	a0 e0       	ldi	r26, 0x00	; 0
    feac:	ed b7       	in	r30, 0x3d	; 61
    feae:	fe b7       	in	r31, 0x3e	; 62
    feb0:	81 83       	std	Z+1, r24	; 0x01
    feb2:	92 83       	std	Z+2, r25	; 0x02
    feb4:	a3 83       	std	Z+3, r26	; 0x03
    feb6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        if(c == 'q')
    feba:	c1 37       	cpi	r28, 0x71	; 113
    febc:	d1 05       	cpc	r29, r1
    febe:	41 f0       	breq	.+16     	; 0xfed0 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fec0:	2a 97       	sbiw	r28, 0x0a	; 10
    fec2:	49 f4       	brne	.+18     	; 0xfed6 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fec4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_pagesize>
    fec8:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_pagesize+0x1>
    fecc:	01 97       	sbiw	r24, 0x01	; 1
    fece:	05 c0       	rjmp	.+10     	; 0xfeda <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fed0:	8f ef       	ldi	r24, 0xFF	; 255
    fed2:	9f ef       	ldi	r25, 0xFF	; 255
    fed4:	02 c0       	rjmp	.+4      	; 0xfeda <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fed6:	80 e0       	ldi	r24, 0x00	; 0
    fed8:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    feda:	cd b7       	in	r28, 0x3d	; 61
    fedc:	de b7       	in	r29, 0x3e	; 62
    fede:	23 96       	adiw	r28, 0x03	; 3
    fee0:	e2 e0       	ldi	r30, 0x02	; 2
    fee2:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0000fee6 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fee6:	a7 e0       	ldi	r26, 0x07	; 7
    fee8:	b1 e0       	ldi	r27, 0x01	; 1
    feea:	e9 e7       	ldi	r30, 0x79	; 121
    feec:	ff e7       	ldi	r31, 0x7F	; 127
    feee:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
    fef2:	8c 01       	movw	r16, r24
    fef4:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fef6:	60 ed       	ldi	r22, 0xD0	; 208
    fef8:	78 e0       	ldi	r23, 0x08	; 8
    fefa:	92 de       	rcall	.-732    	; 0xfc20 <fopen>
    fefc:	7c 01       	movw	r14, r24
    if (!fp)
    fefe:	89 2b       	or	r24, r25
    ff00:	41 f0       	breq	.+16     	; 0xff12 <__DATA_REGION_LENGTH__+0x12>
    ff02:	c1 2c       	mov	r12, r1
    ff04:	d1 2c       	mov	r13, r1
    ff06:	a1 2c       	mov	r10, r1
    ff08:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff0a:	8e 01       	movw	r16, r28
    ff0c:	08 5f       	subi	r16, 0xF8	; 248
    ff0e:	1f 4f       	sbci	r17, 0xFF	; 255
    ff10:	22 c0       	rjmp	.+68     	; 0xff56 <__DATA_REGION_LENGTH__+0x56>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    ff12:	ed b7       	in	r30, 0x3d	; 61
    ff14:	fe b7       	in	r31, 0x3e	; 62
    ff16:	15 83       	std	Z+5, r17	; 0x05
    ff18:	04 83       	std	Z+4, r16	; 0x04
    ff1a:	81 ee       	ldi	r24, 0xE1	; 225
    ff1c:	9c e0       	ldi	r25, 0x0C	; 12
    ff1e:	a0 e0       	ldi	r26, 0x00	; 0
    ff20:	81 83       	std	Z+1, r24	; 0x01
    ff22:	92 83       	std	Z+2, r25	; 0x02
    ff24:	a3 83       	std	Z+3, r26	; 0x03
    ff26:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(0);
    ff2a:	c1 2c       	mov	r12, r1
    ff2c:	d1 2c       	mov	r13, r1
    ff2e:	76 01       	movw	r14, r12
    ff30:	3f c0       	rjmp	.+126    	; 0xffb0 <__DATA_REGION_LENGTH__+0xb0>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    ff32:	c8 01       	movw	r24, r16
    ff34:	0e 94 a2 31 	call	0x6344	; 0x6344 <trim_tail>
        size += strlen(line);
    ff38:	f8 01       	movw	r30, r16
    ff3a:	01 90       	ld	r0, Z+
    ff3c:	00 20       	and	r0, r0
    ff3e:	e9 f7       	brne	.-6      	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>
    ff40:	31 97       	sbiw	r30, 0x01	; 1
    ff42:	e0 1b       	sub	r30, r16
    ff44:	f1 0b       	sbc	r31, r17
    ff46:	ce 0e       	add	r12, r30
    ff48:	df 1e       	adc	r13, r31
        puts(line);
    ff4a:	c8 01       	movw	r24, r16
    ff4c:	0e 94 74 76 	call	0xece8	; 0xece8 <puts>
        if(dopage)
    ff50:	81 14       	cp	r8, r1
    ff52:	91 04       	cpc	r9, r1
    ff54:	49 f4       	brne	.+18     	; 0xff68 <__DATA_REGION_LENGTH__+0x68>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    ff56:	a7 01       	movw	r20, r14
    ff58:	6e ef       	ldi	r22, 0xFE	; 254
    ff5a:	70 e0       	ldi	r23, 0x00	; 0
    ff5c:	c8 01       	movw	r24, r16
    ff5e:	0e 94 28 76 	call	0xec50	; 0xec50 <fgets>
    ff62:	89 2b       	or	r24, r25
    ff64:	31 f7       	brne	.-52     	; 0xff32 <__DATA_REGION_LENGTH__+0x32>
    ff66:	06 c0       	rjmp	.+12     	; 0xff74 <__DATA_REGION_LENGTH__+0x74>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    ff68:	c5 01       	movw	r24, r10
    ff6a:	01 96       	adiw	r24, 0x01	; 1
    ff6c:	84 df       	rcall	.-248    	; 0xfe76 <testpage>
    ff6e:	5c 01       	movw	r10, r24
            if(count < 0)
    ff70:	97 ff       	sbrs	r25, 7
    ff72:	f1 cf       	rjmp	.-30     	; 0xff56 <__DATA_REGION_LENGTH__+0x56>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    ff74:	8f ed       	ldi	r24, 0xDF	; 223
    ff76:	9c e0       	ldi	r25, 0x0C	; 12
    ff78:	a0 e0       	ldi	r26, 0x00	; 0
    ff7a:	ed b7       	in	r30, 0x3d	; 61
    ff7c:	fe b7       	in	r31, 0x3e	; 62
    ff7e:	81 83       	std	Z+1, r24	; 0x01
    ff80:	92 83       	std	Z+2, r25	; 0x02
    ff82:	a3 83       	std	Z+3, r26	; 0x03
    ff84:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    fclose(fp);
    ff88:	c7 01       	movw	r24, r14
    ff8a:	f4 dc       	rcall	.-1560   	; 0xf974 <fclose>
    printf("%ld bytes\n", (long)size);
    ff8c:	0d 2c       	mov	r0, r13
    ff8e:	00 0c       	add	r0, r0
    ff90:	ee 08       	sbc	r14, r14
    ff92:	ff 08       	sbc	r15, r15
    ff94:	ed b7       	in	r30, 0x3d	; 61
    ff96:	fe b7       	in	r31, 0x3e	; 62
    ff98:	c4 82       	std	Z+4, r12	; 0x04
    ff9a:	d5 82       	std	Z+5, r13	; 0x05
    ff9c:	e6 82       	std	Z+6, r14	; 0x06
    ff9e:	f7 82       	std	Z+7, r15	; 0x07
    ffa0:	84 ed       	ldi	r24, 0xD4	; 212
    ffa2:	9c e0       	ldi	r25, 0x0C	; 12
    ffa4:	a0 e0       	ldi	r26, 0x00	; 0
    ffa6:	81 83       	std	Z+1, r24	; 0x01
    ffa8:	92 83       	std	Z+2, r25	; 0x02
    ffaa:	a3 83       	std	Z+3, r26	; 0x03
    ffac:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(size);
}
    ffb0:	c7 01       	movw	r24, r14
    ffb2:	b6 01       	movw	r22, r12
    ffb4:	c9 5f       	subi	r28, 0xF9	; 249
    ffb6:	de 4f       	sbci	r29, 0xFE	; 254
    ffb8:	ec e0       	ldi	r30, 0x0C	; 12
    ffba:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

0000ffbe <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    ffbe:	4f 92       	push	r4
    ffc0:	5f 92       	push	r5
    ffc2:	6f 92       	push	r6
    ffc4:	7f 92       	push	r7
    ffc6:	af 92       	push	r10
    ffc8:	bf 92       	push	r11
    ffca:	cf 92       	push	r12
    ffcc:	df 92       	push	r13
    ffce:	ef 92       	push	r14
    ffd0:	ff 92       	push	r15
    ffd2:	0f 93       	push	r16
    ffd4:	1f 93       	push	r17
    ffd6:	cf 93       	push	r28
    ffd8:	df 93       	push	r29
    ffda:	cd b7       	in	r28, 0x3d	; 61
    ffdc:	de b7       	in	r29, 0x3e	; 62
    ffde:	c9 54       	subi	r28, 0x49	; 73
    ffe0:	d1 09       	sbc	r29, r1
    ffe2:	0f b6       	in	r0, 0x3f	; 63
    ffe4:	f8 94       	cli
    ffe6:	de bf       	out	0x3e, r29	; 62
    ffe8:	0f be       	out	0x3f, r0	; 63
    ffea:	cd bf       	out	0x3d, r28	; 61
    ffec:	8c 01       	movw	r16, r24
    ffee:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fff0:	be 01       	movw	r22, r28
    fff2:	62 5f       	subi	r22, 0xF2	; 242
    fff4:	7f 4f       	sbci	r23, 0xFF	; 255
    fff6:	19 d9       	rcall	.-3534   	; 0xf22a <stat>
    fff8:	01 96       	adiw	r24, 0x01	; 1
    fffa:	79 f4       	brne	.+30     	; 0x1001a <__EEPROM_REGION_LENGTH__+0x1a>
    {
        printf("can not stat: %s\n", name);
    fffc:	ed b7       	in	r30, 0x3d	; 61
    fffe:	fe b7       	in	r31, 0x3e	; 62
   10000:	15 83       	std	Z+5, r17	; 0x05
   10002:	04 83       	std	Z+4, r16	; 0x04
   10004:	84 e4       	ldi	r24, 0x44	; 68
   10006:	9c e0       	ldi	r25, 0x0C	; 12
   10008:	a0 e0       	ldi	r26, 0x00	; 0
   1000a:	81 83       	std	Z+1, r24	; 0x01
   1000c:	92 83       	std	Z+2, r25	; 0x02
   1000e:	a3 83       	std	Z+3, r26	; 0x03
   10010:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(0);
   10014:	80 e0       	ldi	r24, 0x00	; 0
   10016:	90 e0       	ldi	r25, 0x00	; 0
   10018:	77 c0       	rjmp	.+238    	; 0x10108 <__EEPROM_REGION_LENGTH__+0x108>
    }

    if(!verbose)
   1001a:	ef 28       	or	r14, r15
   1001c:	81 f4       	brne	.+32     	; 0x1003e <__EEPROM_REGION_LENGTH__+0x3e>
    {
        printf("%s\n",basename(name));
   1001e:	c8 01       	movw	r24, r16
   10020:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <basename>
   10024:	ed b7       	in	r30, 0x3d	; 61
   10026:	fe b7       	in	r31, 0x3e	; 62
   10028:	95 83       	std	Z+5, r25	; 0x05
   1002a:	84 83       	std	Z+4, r24	; 0x04
   1002c:	80 e4       	ldi	r24, 0x40	; 64
   1002e:	9c e0       	ldi	r25, 0x0C	; 12
   10030:	a0 e0       	ldi	r26, 0x00	; 0
   10032:	81 83       	std	Z+1, r24	; 0x01
   10034:	92 83       	std	Z+2, r25	; 0x02
   10036:	a3 83       	std	Z+3, r26	; 0x03
   10038:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1003c:	63 c0       	rjmp	.+198    	; 0x10104 <__EEPROM_REGION_LENGTH__+0x104>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   1003e:	4e 88       	ldd	r4, Y+22	; 0x16
   10040:	5f 88       	ldd	r5, Y+23	; 0x17
   10042:	68 8c       	ldd	r6, Y+24	; 0x18
   10044:	79 8c       	ldd	r7, Y+25	; 0x19
   10046:	d3 01       	movw	r26, r6
   10048:	c2 01       	movw	r24, r4
   1004a:	88 27       	eor	r24, r24
   1004c:	90 7f       	andi	r25, 0xF0	; 240
   1004e:	aa 27       	eor	r26, r26
   10050:	bb 27       	eor	r27, r27
   10052:	81 15       	cp	r24, r1
   10054:	90 44       	sbci	r25, 0x40	; 64
   10056:	a1 05       	cpc	r26, r1
   10058:	b1 05       	cpc	r27, r1
   1005a:	11 f4       	brne	.+4      	; 0x10060 <__EEPROM_REGION_LENGTH__+0x60>
        *p++ = 'd';
   1005c:	84 e6       	ldi	r24, 0x64	; 100
   1005e:	01 c0       	rjmp	.+2      	; 0x10062 <__EEPROM_REGION_LENGTH__+0x62>
    else
        *p++ = '-';
   10060:	8d e2       	ldi	r24, 0x2D	; 45
   10062:	8e af       	std	Y+62, r24	; 0x3e
   10064:	fe 01       	movw	r30, r28
   10066:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10068:	e1 2c       	mov	r14, r1
   1006a:	ff 24       	eor	r15, r15
   1006c:	f3 94       	inc	r15
   1006e:	20 e0       	ldi	r18, 0x00	; 0
   10070:	30 e0       	ldi	r19, 0x00	; 0
   10072:	be 2e       	mov	r11, r30
   10074:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10076:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10078:	53 e0       	ldi	r21, 0x03	; 3
   1007a:	c5 2e       	mov	r12, r21
   1007c:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   1007e:	c7 01       	movw	r24, r14
   10080:	a0 e0       	ldi	r26, 0x00	; 0
   10082:	b0 e0       	ldi	r27, 0x00	; 0
   10084:	84 21       	and	r24, r4
   10086:	95 21       	and	r25, r5
   10088:	a6 21       	and	r26, r6
   1008a:	b7 21       	and	r27, r7
   1008c:	89 2b       	or	r24, r25
   1008e:	8a 2b       	or	r24, r26
   10090:	8b 2b       	or	r24, r27
   10092:	51 f0       	breq	.+20     	; 0x100a8 <__EEPROM_REGION_LENGTH__+0xa8>
            *p++ = cm[ i % 3];
   10094:	c9 01       	movw	r24, r18
   10096:	b6 01       	movw	r22, r12
   10098:	0e 94 11 e0 	call	0x1c022	; 0x1c022 <__divmodhi4>
   1009c:	dc 01       	movw	r26, r24
   1009e:	a4 57       	subi	r26, 0x74	; 116
   100a0:	b4 4f       	sbci	r27, 0xF4	; 244
   100a2:	8c 91       	ld	r24, X
   100a4:	81 83       	std	Z+1, r24	; 0x01
   100a6:	01 c0       	rjmp	.+2      	; 0x100aa <__EEPROM_REGION_LENGTH__+0xaa>
        else
            *p++ = '-';
   100a8:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   100aa:	f6 94       	lsr	r15
   100ac:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   100ae:	2f 5f       	subi	r18, 0xFF	; 255
   100b0:	3f 4f       	sbci	r19, 0xFF	; 255
   100b2:	31 96       	adiw	r30, 0x01	; 1
   100b4:	29 30       	cpi	r18, 0x09	; 9
   100b6:	31 05       	cpc	r19, r1
   100b8:	11 f7       	brne	.-60     	; 0x1007e <__EEPROM_REGION_LENGTH__+0x7e>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   100ba:	29 96       	adiw	r28, 0x09	; 9
   100bc:	1f ae       	std	Y+63, r1	; 0x3f
   100be:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   100c0:	4e a0       	ldd	r4, Y+38	; 0x26
   100c2:	5f a0       	ldd	r5, Y+39	; 0x27
   100c4:	68 a4       	ldd	r6, Y+40	; 0x28
   100c6:	79 a4       	ldd	r7, Y+41	; 0x29
   100c8:	6e a9       	ldd	r22, Y+54	; 0x36
   100ca:	7f a9       	ldd	r23, Y+55	; 0x37
   100cc:	88 ad       	ldd	r24, Y+56	; 0x38
   100ce:	99 ad       	ldd	r25, Y+57	; 0x39
   100d0:	0e 94 bc 76 	call	0xed78	; 0xed78 <mctime>
   100d4:	7c 01       	movw	r14, r24
   100d6:	c8 01       	movw	r24, r16
   100d8:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <basename>
   100dc:	ed b7       	in	r30, 0x3d	; 61
   100de:	fe b7       	in	r31, 0x3e	; 62
   100e0:	95 87       	std	Z+13, r25	; 0x0d
   100e2:	84 87       	std	Z+12, r24	; 0x0c
   100e4:	f3 86       	std	Z+11, r15	; 0x0b
   100e6:	e2 86       	std	Z+10, r14	; 0x0a
   100e8:	46 82       	std	Z+6, r4	; 0x06
   100ea:	57 82       	std	Z+7, r5	; 0x07
   100ec:	60 86       	std	Z+8, r6	; 0x08
   100ee:	71 86       	std	Z+9, r7	; 0x09
   100f0:	b4 82       	std	Z+4, r11	; 0x04
   100f2:	a5 82       	std	Z+5, r10	; 0x05
   100f4:	86 e2       	ldi	r24, 0x26	; 38
   100f6:	9c e0       	ldi	r25, 0x0C	; 12
   100f8:	a0 e0       	ldi	r26, 0x00	; 0
   100fa:	81 83       	std	Z+1, r24	; 0x01
   100fc:	92 83       	std	Z+2, r25	; 0x02
   100fe:	a3 83       	std	Z+3, r26	; 0x03
   10100:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10104:	81 e0       	ldi	r24, 0x01	; 1
   10106:	90 e0       	ldi	r25, 0x00	; 0
}
   10108:	c7 5b       	subi	r28, 0xB7	; 183
   1010a:	df 4f       	sbci	r29, 0xFF	; 255
   1010c:	0f b6       	in	r0, 0x3f	; 63
   1010e:	f8 94       	cli
   10110:	de bf       	out	0x3e, r29	; 62
   10112:	0f be       	out	0x3f, r0	; 63
   10114:	cd bf       	out	0x3d, r28	; 61
   10116:	df 91       	pop	r29
   10118:	cf 91       	pop	r28
   1011a:	1f 91       	pop	r17
   1011c:	0f 91       	pop	r16
   1011e:	ff 90       	pop	r15
   10120:	ef 90       	pop	r14
   10122:	df 90       	pop	r13
   10124:	cf 90       	pop	r12
   10126:	bf 90       	pop	r11
   10128:	af 90       	pop	r10
   1012a:	7f 90       	pop	r7
   1012c:	6f 90       	pop	r6
   1012e:	5f 90       	pop	r5
   10130:	4f 90       	pop	r4
   10132:	08 95       	ret

00010134 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10134:	2f 92       	push	r2
   10136:	3f 92       	push	r3
   10138:	4f 92       	push	r4
   1013a:	5f 92       	push	r5
   1013c:	6f 92       	push	r6
   1013e:	8f 92       	push	r8
   10140:	9f 92       	push	r9
   10142:	af 92       	push	r10
   10144:	bf 92       	push	r11
   10146:	cf 92       	push	r12
   10148:	df 92       	push	r13
   1014a:	ef 92       	push	r14
   1014c:	ff 92       	push	r15
   1014e:	0f 93       	push	r16
   10150:	1f 93       	push	r17
   10152:	cf 93       	push	r28
   10154:	df 93       	push	r29
   10156:	cd b7       	in	r28, 0x3d	; 61
   10158:	de b7       	in	r29, 0x3e	; 62
   1015a:	c7 53       	subi	r28, 0x37	; 55
   1015c:	d1 40       	sbci	r29, 0x01	; 1
   1015e:	0f b6       	in	r0, 0x3f	; 63
   10160:	f8 94       	cli
   10162:	de bf       	out	0x3e, r29	; 62
   10164:	0f be       	out	0x3f, r0	; 63
   10166:	cd bf       	out	0x3d, r28	; 61
   10168:	7c 01       	movw	r14, r24
   1016a:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   1016c:	1e 82       	std	Y+6, r1	; 0x06
   1016e:	8e 01       	movw	r16, r28
   10170:	0a 5f       	subi	r16, 0xFA	; 250
   10172:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10174:	00 97       	sbiw	r24, 0x00	; 0
   10176:	91 f4       	brne	.+36     	; 0x1019c <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10178:	6e ef       	ldi	r22, 0xFE	; 254
   1017a:	70 e0       	ldi	r23, 0x00	; 0
   1017c:	c8 01       	movw	r24, r16
   1017e:	0e 94 37 77 	call	0xee6e	; 0xee6e <getcwd>
   10182:	89 2b       	or	r24, r25
   10184:	d1 f4       	brne	.+52     	; 0x101ba <ls+0x86>
        {
            printf("ls: Can't get current directory\n");
   10186:	85 e0       	ldi	r24, 0x05	; 5
   10188:	9c e0       	ldi	r25, 0x0C	; 12
   1018a:	a0 e0       	ldi	r26, 0x00	; 0
   1018c:	ed b7       	in	r30, 0x3d	; 61
   1018e:	fe b7       	in	r31, 0x3e	; 62
   10190:	81 83       	std	Z+1, r24	; 0x01
   10192:	92 83       	std	Z+2, r25	; 0x02
   10194:	a3 83       	std	Z+3, r26	; 0x03
   10196:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1019a:	37 c0       	rjmp	.+110    	; 0x1020a <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1019c:	fc 01       	movw	r30, r24
   1019e:	80 81       	ld	r24, Z
   101a0:	88 23       	and	r24, r24
   101a2:	51 f3       	breq	.-44     	; 0x10178 <ls+0x44>
   101a4:	62 eb       	ldi	r22, 0xB2	; 178
   101a6:	72 e1       	ldi	r23, 0x12	; 18
   101a8:	c7 01       	movw	r24, r14
   101aa:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   101ae:	89 2b       	or	r24, r25
   101b0:	19 f7       	brne	.-58     	; 0x10178 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   101b2:	b7 01       	movw	r22, r14
   101b4:	c8 01       	movw	r24, r16
   101b6:	0e 94 c4 30 	call	0x6188	; 0x6188 <strcpy>
    }
    len = strlen(fullpath);
   101ba:	f8 01       	movw	r30, r16
   101bc:	01 90       	ld	r0, Z+
   101be:	00 20       	and	r0, r0
   101c0:	e9 f7       	brne	.-6      	; 0x101bc <ls+0x88>
   101c2:	31 97       	sbiw	r30, 0x01	; 1
   101c4:	1f 01       	movw	r2, r30
   101c6:	20 1a       	sub	r2, r16
   101c8:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
   101ca:	ed b7       	in	r30, 0x3d	; 61
   101cc:	fe b7       	in	r31, 0x3e	; 62
   101ce:	15 83       	std	Z+5, r17	; 0x05
   101d0:	04 83       	std	Z+4, r16	; 0x04
   101d2:	87 ef       	ldi	r24, 0xF7	; 247
   101d4:	9b e0       	ldi	r25, 0x0B	; 11
   101d6:	a0 e0       	ldi	r26, 0x00	; 0
   101d8:	81 83       	std	Z+1, r24	; 0x01
   101da:	92 83       	std	Z+2, r25	; 0x02
   101dc:	a3 83       	std	Z+3, r26	; 0x03
   101de:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    if (stat(fullpath, &st))
   101e2:	be 01       	movw	r22, r28
   101e4:	6a 5f       	subi	r22, 0xFA	; 250
   101e6:	7e 4f       	sbci	r23, 0xFE	; 254
   101e8:	c8 01       	movw	r24, r16
   101ea:	1f d8       	rcall	.-4034   	; 0xf22a <stat>
   101ec:	7c 01       	movw	r14, r24
   101ee:	89 2b       	or	r24, r25
   101f0:	79 f0       	breq	.+30     	; 0x10210 <ls+0xdc>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   101f2:	ed b7       	in	r30, 0x3d	; 61
   101f4:	fe b7       	in	r31, 0x3e	; 62
   101f6:	15 83       	std	Z+5, r17	; 0x05
   101f8:	04 83       	std	Z+4, r16	; 0x04
   101fa:	81 ee       	ldi	r24, 0xE1	; 225
   101fc:	9b e0       	ldi	r25, 0x0B	; 11
   101fe:	a0 e0       	ldi	r26, 0x00	; 0
   10200:	81 83       	std	Z+1, r24	; 0x01
   10202:	92 83       	std	Z+2, r25	; 0x02
   10204:	a3 83       	std	Z+3, r26	; 0x03
   10206:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(0);
   1020a:	e1 2c       	mov	r14, r1
   1020c:	f1 2c       	mov	r15, r1
   1020e:	8c c0       	rjmp	.+280    	; 0x10328 <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT)
   10210:	c2 5f       	subi	r28, 0xF2	; 242
   10212:	de 4f       	sbci	r29, 0xFE	; 254
   10214:	88 81       	ld	r24, Y
   10216:	99 81       	ldd	r25, Y+1	; 0x01
   10218:	aa 81       	ldd	r26, Y+2	; 0x02
   1021a:	bb 81       	ldd	r27, Y+3	; 0x03
   1021c:	ce 50       	subi	r28, 0x0E	; 14
   1021e:	d1 40       	sbci	r29, 0x01	; 1
   10220:	88 27       	eor	r24, r24
   10222:	90 7f       	andi	r25, 0xF0	; 240
   10224:	aa 27       	eor	r26, r26
   10226:	bb 27       	eor	r27, r27
   10228:	81 15       	cp	r24, r1
   1022a:	f0 e4       	ldi	r31, 0x40	; 64
   1022c:	9f 07       	cpc	r25, r31
   1022e:	a1 05       	cpc	r26, r1
   10230:	b1 05       	cpc	r27, r1
   10232:	59 f0       	breq	.+22     	; 0x1024a <ls+0x116>
   10234:	81 15       	cp	r24, r1
   10236:	90 48       	sbci	r25, 0x80	; 128
   10238:	a1 05       	cpc	r26, r1
   1023a:	b1 05       	cpc	r27, r1
   1023c:	09 f0       	breq	.+2      	; 0x10240 <ls+0x10c>
   1023e:	66 c0       	rjmp	.+204    	; 0x1030c <ls+0x1d8>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   10240:	b4 01       	movw	r22, r8
   10242:	c8 01       	movw	r24, r16
   10244:	bc de       	rcall	.-648    	; 0xffbe <ls_info>
   10246:	7c 01       	movw	r14, r24
            break;
   10248:	63 c0       	rjmp	.+198    	; 0x10310 <ls+0x1dc>
        case S_IFDIR:
            dirp = opendir(fullpath);
   1024a:	c8 01       	movw	r24, r16
   1024c:	0e 94 e5 77 	call	0xefca	; 0xefca <opendir>
   10250:	5c 01       	movw	r10, r24
            if(!dirp)
   10252:	89 2b       	or	r24, r25
   10254:	81 f0       	breq	.+32     	; 0x10276 <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10256:	e1 2c       	mov	r14, r1
   10258:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   1025a:	c8 01       	movw	r24, r16
   1025c:	82 0d       	add	r24, r2
   1025e:	93 1d       	adc	r25, r3
   10260:	ca 5c       	subi	r28, 0xCA	; 202
   10262:	de 4f       	sbci	r29, 0xFE	; 254
   10264:	99 83       	std	Y+1, r25	; 0x01
   10266:	88 83       	st	Y, r24
   10268:	c6 53       	subi	r28, 0x36	; 54
   1026a:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1026c:	8e ea       	ldi	r24, 0xAE	; 174
   1026e:	9b e0       	ldi	r25, 0x0B	; 11
   10270:	2c 01       	movw	r4, r24
   10272:	61 2c       	mov	r6, r1
   10274:	24 c0       	rjmp	.+72     	; 0x102be <ls+0x18a>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   10276:	81 ed       	ldi	r24, 0xD1	; 209
   10278:	9b e0       	ldi	r25, 0x0B	; 11
   1027a:	a0 e0       	ldi	r26, 0x00	; 0
   1027c:	ed b7       	in	r30, 0x3d	; 61
   1027e:	fe b7       	in	r31, 0x3e	; 62
   10280:	81 83       	std	Z+1, r24	; 0x01
   10282:	92 83       	std	Z+2, r25	; 0x02
   10284:	a3 83       	std	Z+3, r26	; 0x03
   10286:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                return(0);
   1028a:	4e c0       	rjmp	.+156    	; 0x10328 <ls+0x1f4>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   1028c:	f6 01       	movw	r30, r12
   1028e:	80 81       	ld	r24, Z
   10290:	88 23       	and	r24, r24
   10292:	d9 f0       	breq	.+54     	; 0x102ca <ls+0x196>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10294:	f6 01       	movw	r30, r12
   10296:	01 90       	ld	r0, Z+
   10298:	00 20       	and	r0, r0
   1029a:	e9 f7       	brne	.-6      	; 0x10296 <ls+0x162>
   1029c:	31 97       	sbiw	r30, 0x01	; 1
   1029e:	ec 19       	sub	r30, r12
   102a0:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   102a2:	e2 0d       	add	r30, r2
   102a4:	f3 1d       	adc	r31, r3
   102a6:	ef 3f       	cpi	r30, 0xFF	; 255
   102a8:	f1 05       	cpc	r31, r1
   102aa:	9c f0       	brlt	.+38     	; 0x102d2 <ls+0x19e>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   102ac:	ed b7       	in	r30, 0x3d	; 61
   102ae:	fe b7       	in	r31, 0x3e	; 62
   102b0:	d5 82       	std	Z+5, r13	; 0x05
   102b2:	c4 82       	std	Z+4, r12	; 0x04
   102b4:	41 82       	std	Z+1, r4	; 0x01
   102b6:	52 82       	std	Z+2, r5	; 0x02
   102b8:	63 82       	std	Z+3, r6	; 0x03
   102ba:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   102be:	c5 01       	movw	r24, r10
   102c0:	0e 94 03 78 	call	0xf006	; 0xf006 <readdir>
   102c4:	6c 01       	movw	r12, r24
   102c6:	89 2b       	or	r24, r25
   102c8:	09 f7       	brne	.-62     	; 0x1028c <ls+0x158>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   102ca:	c5 01       	movw	r24, r10
   102cc:	0e 94 ca 77 	call	0xef94	; 0xef94 <closedir>
            break;
   102d0:	1f c0       	rjmp	.+62     	; 0x10310 <ls+0x1dc>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   102d2:	68 e7       	ldi	r22, 0x78	; 120
   102d4:	78 e0       	ldi	r23, 0x08	; 8
   102d6:	c8 01       	movw	r24, r16
   102d8:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   102dc:	89 2b       	or	r24, r25
   102de:	29 f4       	brne	.+10     	; 0x102ea <ls+0x1b6>
                {
                    strcat(fullpath,"/");
   102e0:	68 e7       	ldi	r22, 0x78	; 120
   102e2:	78 e0       	ldi	r23, 0x08	; 8
   102e4:	c8 01       	movw	r24, r16
   102e6:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
                }
                strcat(fullpath,de->d_name);
   102ea:	b6 01       	movw	r22, r12
   102ec:	c8 01       	movw	r24, r16
   102ee:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
                files +=ls_info(fullpath,verbose);
   102f2:	b4 01       	movw	r22, r8
   102f4:	c8 01       	movw	r24, r16
   102f6:	63 de       	rcall	.-826    	; 0xffbe <ls_info>
   102f8:	e8 0e       	add	r14, r24
   102fa:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   102fc:	ca 5c       	subi	r28, 0xCA	; 202
   102fe:	de 4f       	sbci	r29, 0xFE	; 254
   10300:	e8 81       	ld	r30, Y
   10302:	f9 81       	ldd	r31, Y+1	; 0x01
   10304:	c6 53       	subi	r28, 0x36	; 54
   10306:	d1 40       	sbci	r29, 0x01	; 1
   10308:	10 82       	st	Z, r1
   1030a:	d9 cf       	rjmp	.-78     	; 0x102be <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1030c:	e1 2c       	mov	r14, r1
   1030e:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   10310:	ed b7       	in	r30, 0x3d	; 61
   10312:	fe b7       	in	r31, 0x3e	; 62
   10314:	f5 82       	std	Z+5, r15	; 0x05
   10316:	e4 82       	std	Z+4, r14	; 0x04
   10318:	83 ea       	ldi	r24, 0xA3	; 163
   1031a:	9b e0       	ldi	r25, 0x0B	; 11
   1031c:	a0 e0       	ldi	r26, 0x00	; 0
   1031e:	81 83       	std	Z+1, r24	; 0x01
   10320:	92 83       	std	Z+2, r25	; 0x02
   10322:	a3 83       	std	Z+3, r26	; 0x03
   10324:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(files);
}
   10328:	c7 01       	movw	r24, r14
   1032a:	c9 5c       	subi	r28, 0xC9	; 201
   1032c:	de 4f       	sbci	r29, 0xFE	; 254
   1032e:	0f b6       	in	r0, 0x3f	; 63
   10330:	f8 94       	cli
   10332:	de bf       	out	0x3e, r29	; 62
   10334:	0f be       	out	0x3f, r0	; 63
   10336:	cd bf       	out	0x3d, r28	; 61
   10338:	df 91       	pop	r29
   1033a:	cf 91       	pop	r28
   1033c:	1f 91       	pop	r17
   1033e:	0f 91       	pop	r16
   10340:	ff 90       	pop	r15
   10342:	ef 90       	pop	r14
   10344:	df 90       	pop	r13
   10346:	cf 90       	pop	r12
   10348:	bf 90       	pop	r11
   1034a:	af 90       	pop	r10
   1034c:	9f 90       	pop	r9
   1034e:	8f 90       	pop	r8
   10350:	6f 90       	pop	r6
   10352:	5f 90       	pop	r5
   10354:	4f 90       	pop	r4
   10356:	3f 90       	pop	r3
   10358:	2f 90       	pop	r2
   1035a:	08 95       	ret

0001035c <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1035c:	a7 e0       	ldi	r26, 0x07	; 7
   1035e:	b1 e0       	ldi	r27, 0x01	; 1
   10360:	e4 eb       	ldi	r30, 0xB4	; 180
   10362:	f1 e8       	ldi	r31, 0x81	; 129
   10364:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10368:	fb 01       	movw	r30, r22
   1036a:	c0 80       	ld	r12, Z
   1036c:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1036e:	c1 14       	cp	r12, r1
   10370:	d1 04       	cpc	r13, r1
   10372:	09 f4       	brne	.+2      	; 0x10376 <posix_tests+0x1a>
   10374:	9a c1       	rjmp	.+820    	; 0x106aa <posix_tests+0x34e>
   10376:	2b 01       	movw	r4, r22
   10378:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   1037a:	60 e9       	ldi	r22, 0x90	; 144
   1037c:	7b e0       	ldi	r23, 0x0B	; 11
   1037e:	c6 01       	movw	r24, r12
   10380:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   10384:	89 2b       	or	r24, r25
   10386:	a9 f0       	breq	.+42     	; 0x103b2 <posix_tests+0x56>
    {
        ptr = argv[ind++];
   10388:	f2 01       	movw	r30, r4
   1038a:	c2 80       	ldd	r12, Z+2	; 0x02
   1038c:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1038e:	c1 14       	cp	r12, r1
   10390:	d1 04       	cpc	r13, r1
   10392:	21 f4       	brne	.+8      	; 0x1039c <posix_tests+0x40>
        {
            posix_help(1);
   10394:	81 e0       	ldi	r24, 0x01	; 1
   10396:	90 e0       	ldi	r25, 0x00	; 0
   10398:	6f dc       	rcall	.-1826   	; 0xfc78 <posix_help>
   1039a:	28 c1       	rjmp	.+592    	; 0x105ec <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1039c:	63 e6       	ldi	r22, 0x63	; 99
   1039e:	76 e1       	ldi	r23, 0x16	; 22
   103a0:	c6 01       	movw	r24, r12
   103a2:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   103a6:	89 2b       	or	r24, r25
   103a8:	a9 f7       	brne	.-22     	; 0x10394 <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   103aa:	22 e0       	ldi	r18, 0x02	; 2
   103ac:	62 2e       	mov	r6, r18
   103ae:	71 2c       	mov	r7, r1
   103b0:	03 c0       	rjmp	.+6      	; 0x103b8 <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   103b2:	66 24       	eor	r6, r6
   103b4:	63 94       	inc	r6
   103b6:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   103b8:	73 01       	movw	r14, r6
   103ba:	ff ef       	ldi	r31, 0xFF	; 255
   103bc:	ef 1a       	sub	r14, r31
   103be:	ff 0a       	sbc	r15, r31
   103c0:	98 01       	movw	r18, r16
   103c2:	a7 01       	movw	r20, r14
   103c4:	66 e9       	ldi	r22, 0x96	; 150
   103c6:	7b e0       	ldi	r23, 0x0B	; 11
   103c8:	c6 01       	movw	r24, r12
   103ca:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   103ce:	89 2b       	or	r24, r25
   103d0:	a1 f1       	breq	.+104    	; 0x1043a <posix_tests+0xde>
   103d2:	73 01       	movw	r14, r6
   103d4:	ee 0c       	add	r14, r14
   103d6:	ff 1c       	adc	r15, r15
   103d8:	e4 0c       	add	r14, r4
   103da:	f5 1c       	adc	r15, r5
   103dc:	57 01       	movw	r10, r14
   103de:	47 01       	movw	r8, r14
   103e0:	63 01       	movw	r12, r6
   103e2:	41 2c       	mov	r4, r1
   103e4:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   103e6:	c0 16       	cp	r12, r16
   103e8:	d1 06       	cpc	r13, r17
   103ea:	1c f5       	brge	.+70     	; 0x10432 <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   103ec:	6a e9       	ldi	r22, 0x9A	; 154
   103ee:	7b e0       	ldi	r23, 0x0B	; 11
   103f0:	f4 01       	movw	r30, r8
   103f2:	81 91       	ld	r24, Z+
   103f4:	91 91       	ld	r25, Z+
   103f6:	4f 01       	movw	r8, r30
   103f8:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   103fc:	89 2b       	or	r24, r25
   103fe:	19 f0       	breq	.+6      	; 0x10406 <posix_tests+0xaa>
                page = 1;
   10400:	44 24       	eor	r4, r4
   10402:	43 94       	inc	r4
   10404:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10406:	ff ef       	ldi	r31, 0xFF	; 255
   10408:	cf 1a       	sub	r12, r31
   1040a:	df 0a       	sbc	r13, r31
   1040c:	ec cf       	rjmp	.-40     	; 0x103e6 <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   1040e:	6a e9       	ldi	r22, 0x9A	; 154
   10410:	7b e0       	ldi	r23, 0x0B	; 11
   10412:	f5 01       	movw	r30, r10
   10414:	81 91       	ld	r24, Z+
   10416:	91 91       	ld	r25, Z+
   10418:	5f 01       	movw	r10, r30
   1041a:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   1041e:	89 2b       	or	r24, r25
   10420:	29 f4       	brne	.+10     	; 0x1042c <posix_tests+0xd0>
                cat(argv[ind], page);
   10422:	b2 01       	movw	r22, r4
   10424:	f7 01       	movw	r30, r14
   10426:	80 81       	ld	r24, Z
   10428:	91 81       	ldd	r25, Z+1	; 0x01
   1042a:	5d dd       	rcall	.-1350   	; 0xfee6 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1042c:	ff ef       	ldi	r31, 0xFF	; 255
   1042e:	6f 1a       	sub	r6, r31
   10430:	7f 0a       	sbc	r7, r31
   10432:	60 16       	cp	r6, r16
   10434:	71 06       	cpc	r7, r17
   10436:	5c f3       	brlt	.-42     	; 0x1040e <posix_tests+0xb2>
   10438:	d9 c0       	rjmp	.+434    	; 0x105ec <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1043a:	53 01       	movw	r10, r6
   1043c:	82 e0       	ldi	r24, 0x02	; 2
   1043e:	a8 0e       	add	r10, r24
   10440:	b1 1c       	adc	r11, r1
   10442:	98 01       	movw	r18, r16
   10444:	a5 01       	movw	r20, r10
   10446:	6d e9       	ldi	r22, 0x9D	; 157
   10448:	7b e0       	ldi	r23, 0x0B	; 11
   1044a:	c6 01       	movw	r24, r12
   1044c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   10450:	89 2b       	or	r24, r25
   10452:	59 f0       	breq	.+22     	; 0x1046a <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   10454:	f3 01       	movw	r30, r6
   10456:	ee 0f       	add	r30, r30
   10458:	ff 1f       	adc	r31, r31
   1045a:	e4 0d       	add	r30, r4
   1045c:	f5 1d       	adc	r31, r5
   1045e:	62 81       	ldd	r22, Z+2	; 0x02
   10460:	73 81       	ldd	r23, Z+3	; 0x03
   10462:	80 81       	ld	r24, Z
   10464:	91 81       	ldd	r25, Z+1	; 0x01
   10466:	29 dc       	rcall	.-1966   	; 0xfcba <copy>
   10468:	c1 c0       	rjmp	.+386    	; 0x105ec <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1046a:	98 01       	movw	r18, r16
   1046c:	a7 01       	movw	r20, r14
   1046e:	62 ea       	ldi	r22, 0xA2	; 162
   10470:	7b e0       	ldi	r23, 0x0B	; 11
   10472:	c6 01       	movw	r24, r12
   10474:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   10478:	89 2b       	or	r24, r25
   1047a:	b9 f0       	breq	.+46     	; 0x104aa <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   1047c:	73 01       	movw	r14, r6
   1047e:	ee 0c       	add	r14, r14
   10480:	ff 1c       	adc	r15, r15
   10482:	e4 0c       	add	r14, r4
   10484:	f5 1c       	adc	r15, r5
   10486:	f7 01       	movw	r30, r14
   10488:	80 81       	ld	r24, Z
   1048a:	91 81       	ldd	r25, Z+1	; 0x01
   1048c:	0e 94 ef 76 	call	0xedde	; 0xedde <chdir>
   10490:	89 2b       	or	r24, r25
   10492:	09 f4       	brne	.+2      	; 0x10496 <posix_tests+0x13a>
   10494:	ab c0       	rjmp	.+342    	; 0x105ec <posix_tests+0x290>
            printf("chdir %s failed\n", argv[ind]);
   10496:	f7 01       	movw	r30, r14
   10498:	80 81       	ld	r24, Z
   1049a:	91 81       	ldd	r25, Z+1	; 0x01
   1049c:	ed b7       	in	r30, 0x3d	; 61
   1049e:	fe b7       	in	r31, 0x3e	; 62
   104a0:	95 83       	std	Z+5, r25	; 0x05
   104a2:	84 83       	std	Z+4, r24	; 0x04
   104a4:	86 e3       	ldi	r24, 0x36	; 54
   104a6:	9d e0       	ldi	r25, 0x0D	; 13
   104a8:	9b c0       	rjmp	.+310    	; 0x105e0 <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   104aa:	98 01       	movw	r18, r16
   104ac:	a3 01       	movw	r20, r6
   104ae:	6a ea       	ldi	r22, 0xAA	; 170
   104b0:	78 e0       	ldi	r23, 0x08	; 8
   104b2:	c6 01       	movw	r24, r12
   104b4:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   104b8:	4c 01       	movw	r8, r24
   104ba:	89 2b       	or	r24, r25
   104bc:	69 f1       	breq	.+90     	; 0x10518 <posix_tests+0x1bc>
   104be:	73 01       	movw	r14, r6
   104c0:	ee 0c       	add	r14, r14
   104c2:	ff 1c       	adc	r15, r15
   104c4:	e4 0c       	add	r14, r4
   104c6:	f5 1c       	adc	r15, r5
   104c8:	c1 2c       	mov	r12, r1
   104ca:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   104cc:	c6 01       	movw	r24, r12
   104ce:	86 0d       	add	r24, r6
   104d0:	97 1d       	adc	r25, r7
   104d2:	80 17       	cp	r24, r16
   104d4:	91 07       	cpc	r25, r17
   104d6:	b4 f4       	brge	.+44     	; 0x10504 <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   104d8:	65 ea       	ldi	r22, 0xA5	; 165
   104da:	7b e0       	ldi	r23, 0x0B	; 11
   104dc:	f7 01       	movw	r30, r14
   104de:	80 81       	ld	r24, Z
   104e0:	91 81       	ldd	r25, Z+1	; 0x01
   104e2:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   104e6:	89 2b       	or	r24, r25
   104e8:	31 f4       	brne	.+12     	; 0x104f6 <posix_tests+0x19a>
                ls(argv[i],1);
   104ea:	61 e0       	ldi	r22, 0x01	; 1
   104ec:	70 e0       	ldi	r23, 0x00	; 0
   104ee:	f7 01       	movw	r30, r14
   104f0:	80 81       	ld	r24, Z
   104f2:	91 81       	ldd	r25, Z+1	; 0x01
   104f4:	1f de       	rcall	.-962    	; 0x10134 <ls>
            ++args;
   104f6:	ff ef       	ldi	r31, 0xFF	; 255
   104f8:	cf 1a       	sub	r12, r31
   104fa:	df 0a       	sbc	r13, r31
   104fc:	82 e0       	ldi	r24, 0x02	; 2
   104fe:	e8 0e       	add	r14, r24
   10500:	f1 1c       	adc	r15, r1
   10502:	e4 cf       	rjmp	.-56     	; 0x104cc <posix_tests+0x170>
        }
        if(!args)
   10504:	c1 14       	cp	r12, r1
   10506:	d1 04       	cpc	r13, r1
   10508:	09 f0       	breq	.+2      	; 0x1050c <posix_tests+0x1b0>
        {
            ls("",1);
   1050a:	70 c0       	rjmp	.+224    	; 0x105ec <posix_tests+0x290>
   1050c:	61 e0       	ldi	r22, 0x01	; 1
   1050e:	70 e0       	ldi	r23, 0x00	; 0
   10510:	8c e0       	ldi	r24, 0x0C	; 12
   10512:	97 e1       	ldi	r25, 0x17	; 23
   10514:	0f de       	rcall	.-994    	; 0x10134 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10516:	6a c0       	rjmp	.+212    	; 0x105ec <posix_tests+0x290>
   10518:	98 01       	movw	r18, r16
   1051a:	a7 01       	movw	r20, r14
   1051c:	68 ea       	ldi	r22, 0xA8	; 168
   1051e:	7b e0       	ldi	r23, 0x0B	; 11
   10520:	c6 01       	movw	r24, r12
   10522:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   10526:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10528:	71 f1       	breq	.+92     	; 0x10586 <posix_tests+0x22a>
   1052a:	e0 16       	cp	r14, r16
   1052c:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   1052e:	7c f4       	brge	.+30     	; 0x1054e <posix_tests+0x1f2>
   10530:	ee 0c       	add	r14, r14
   10532:	ff 1c       	adc	r15, r15
   10534:	f2 01       	movw	r30, r4
   10536:	ee 0d       	add	r30, r14
   10538:	ff 1d       	adc	r31, r15
   1053a:	48 e0       	ldi	r20, 0x08	; 8
   1053c:	50 e0       	ldi	r21, 0x00	; 0
   1053e:	60 e0       	ldi	r22, 0x00	; 0
   10540:	70 e0       	ldi	r23, 0x00	; 0
   10542:	80 81       	ld	r24, Z
   10544:	91 81       	ldd	r25, Z+1	; 0x01
   10546:	0e 94 07 46 	call	0x8c0e	; 0x8c0e <strtol>
   1054a:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1054c:	02 c0       	rjmp	.+4      	; 0x10552 <posix_tests+0x1f6>
   1054e:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10550:	51 e0       	ldi	r21, 0x01	; 1
   10552:	73 01       	movw	r14, r6
   10554:	ee 0c       	add	r14, r14
   10556:	ff 1c       	adc	r15, r15
   10558:	e4 0c       	add	r14, r4
   1055a:	f5 1c       	adc	r15, r5
   1055c:	05 2e       	mov	r0, r21
   1055e:	00 0c       	add	r0, r0
   10560:	66 0b       	sbc	r22, r22
   10562:	77 0b       	sbc	r23, r23
   10564:	f7 01       	movw	r30, r14
   10566:	80 81       	ld	r24, Z
   10568:	91 81       	ldd	r25, Z+1	; 0x01
   1056a:	0e 94 5c 77 	call	0xeeb8	; 0xeeb8 <mkdir>
   1056e:	89 2b       	or	r24, r25
        {
            printf("mkdir %s failed\n", argv[ind]);
   10570:	e9 f1       	breq	.+122    	; 0x105ec <posix_tests+0x290>
   10572:	f7 01       	movw	r30, r14
   10574:	80 81       	ld	r24, Z
   10576:	91 81       	ldd	r25, Z+1	; 0x01
   10578:	ed b7       	in	r30, 0x3d	; 61
   1057a:	fe b7       	in	r31, 0x3e	; 62
   1057c:	95 83       	std	Z+5, r25	; 0x05
   1057e:	84 83       	std	Z+4, r24	; 0x04
   10580:	85 e2       	ldi	r24, 0x25	; 37
   10582:	9d e0       	ldi	r25, 0x0D	; 13
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10584:	b4 c0       	rjmp	.+360    	; 0x106ee <posix_tests+0x392>
   10586:	98 01       	movw	r18, r16
   10588:	a7 01       	movw	r20, r14
   1058a:	6e ea       	ldi	r22, 0xAE	; 174
   1058c:	7b e0       	ldi	r23, 0x0B	; 11
   1058e:	c6 01       	movw	r24, r12
   10590:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   10594:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   10596:	71 f0       	breq	.+28     	; 0x105b4 <posix_tests+0x258>
   10598:	66 0c       	add	r6, r6
   1059a:	77 1c       	adc	r7, r7
   1059c:	f2 01       	movw	r30, r4
   1059e:	e6 0d       	add	r30, r6
   105a0:	f7 1d       	adc	r31, r7
   105a2:	80 81       	ld	r24, Z
   105a4:	91 81       	ldd	r25, Z+1	; 0x01
   105a6:	0e 94 65 46 	call	0x8cca	; 0x8cca <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   105aa:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_pagesize+0x1>
   105ae:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   105b2:	1c c0       	rjmp	.+56     	; 0x105ec <posix_tests+0x290>
   105b4:	98 01       	movw	r18, r16
   105b6:	a3 01       	movw	r20, r6
   105b8:	63 eb       	ldi	r22, 0xB3	; 179
   105ba:	7b e0       	ldi	r23, 0x0B	; 11
   105bc:	c6 01       	movw	r24, r12
   105be:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   105c2:	4c 01       	movw	r8, r24
   105c4:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   105c6:	b1 f0       	breq	.+44     	; 0x105f4 <posix_tests+0x298>
   105c8:	6e ef       	ldi	r22, 0xFE	; 254
   105ca:	70 e0       	ldi	r23, 0x00	; 0
   105cc:	ce 01       	movw	r24, r28
   105ce:	08 96       	adiw	r24, 0x08	; 8
   105d0:	0e 94 37 77 	call	0xee6e	; 0xee6e <getcwd>
   105d4:	ed b7       	in	r30, 0x3d	; 61
   105d6:	fe b7       	in	r31, 0x3e	; 62
   105d8:	95 83       	std	Z+5, r25	; 0x05
   105da:	84 83       	std	Z+4, r24	; 0x04
   105dc:	81 e2       	ldi	r24, 0x21	; 33
   105de:	9d e0       	ldi	r25, 0x0D	; 13
   105e0:	a0 e0       	ldi	r26, 0x00	; 0
   105e2:	81 83       	std	Z+1, r24	; 0x01
   105e4:	92 83       	std	Z+2, r25	; 0x02
   105e6:	a3 83       	std	Z+3, r26	; 0x03
   105e8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(1);
   105ec:	88 24       	eor	r8, r8
   105ee:	83 94       	inc	r8
   105f0:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   105f2:	83 c0       	rjmp	.+262    	; 0x106fa <posix_tests+0x39e>
   105f4:	98 01       	movw	r18, r16
   105f6:	a5 01       	movw	r20, r10
   105f8:	67 eb       	ldi	r22, 0xB7	; 183
   105fa:	7b e0       	ldi	r23, 0x0B	; 11
   105fc:	c6 01       	movw	r24, r12
   105fe:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   10602:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10604:	61 f1       	breq	.+88     	; 0x1065e <posix_tests+0x302>
   10606:	66 0c       	add	r6, r6
   10608:	77 1c       	adc	r7, r7
   1060a:	82 01       	movw	r16, r4
   1060c:	06 0d       	add	r16, r6
   1060e:	17 1d       	adc	r17, r7
   10610:	f2 e0       	ldi	r31, 0x02	; 2
   10612:	6f 0e       	add	r6, r31
   10614:	71 1c       	adc	r7, r1
   10616:	72 01       	movw	r14, r4
   10618:	e6 0c       	add	r14, r6
   1061a:	f7 1c       	adc	r15, r7
   1061c:	f7 01       	movw	r30, r14
   1061e:	60 81       	ld	r22, Z
   10620:	71 81       	ldd	r23, Z+1	; 0x01
   10622:	f8 01       	movw	r30, r16
   10624:	80 81       	ld	r24, Z
   10626:	91 81       	ldd	r25, Z+1	; 0x01
   10628:	0e 94 8a 77 	call	0xef14	; 0xef14 <rename>
   1062c:	89 2b       	or	r24, r25
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1062e:	f1 f2       	breq	.-68     	; 0x105ec <posix_tests+0x290>
   10630:	f7 01       	movw	r30, r14
   10632:	80 81       	ld	r24, Z
   10634:	91 81       	ldd	r25, Z+1	; 0x01
   10636:	ed b7       	in	r30, 0x3d	; 61
   10638:	fe b7       	in	r31, 0x3e	; 62
   1063a:	97 83       	std	Z+7, r25	; 0x07
   1063c:	86 83       	std	Z+6, r24	; 0x06
   1063e:	f8 01       	movw	r30, r16
   10640:	80 81       	ld	r24, Z
   10642:	91 81       	ldd	r25, Z+1	; 0x01
   10644:	ed b7       	in	r30, 0x3d	; 61
   10646:	fe b7       	in	r31, 0x3e	; 62
   10648:	95 83       	std	Z+5, r25	; 0x05
   1064a:	84 83       	std	Z+4, r24	; 0x04
   1064c:	80 e1       	ldi	r24, 0x10	; 16
   1064e:	9d e0       	ldi	r25, 0x0D	; 13
   10650:	a0 e0       	ldi	r26, 0x00	; 0
   10652:	81 83       	std	Z+1, r24	; 0x01
   10654:	92 83       	std	Z+2, r25	; 0x02
   10656:	a3 83       	std	Z+3, r26	; 0x03
   10658:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1065c:	4e c0       	rjmp	.+156    	; 0x106fa <posix_tests+0x39e>
   1065e:	98 01       	movw	r18, r16
   10660:	a7 01       	movw	r20, r14
   10662:	6e eb       	ldi	r22, 0xBE	; 190
   10664:	7b e0       	ldi	r23, 0x0B	; 11
   10666:	c6 01       	movw	r24, r12
   10668:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1066c:	4c 01       	movw	r8, r24
   1066e:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   10670:	f9 f0       	breq	.+62     	; 0x106b0 <posix_tests+0x354>
   10672:	73 01       	movw	r14, r6
   10674:	ee 0c       	add	r14, r14
   10676:	ff 1c       	adc	r15, r15
   10678:	e4 0c       	add	r14, r4
   1067a:	f5 1c       	adc	r15, r5
   1067c:	f7 01       	movw	r30, r14
   1067e:	80 81       	ld	r24, Z
   10680:	91 81       	ldd	r25, Z+1	; 0x01
   10682:	0e 94 a9 77 	call	0xef52	; 0xef52 <unlink>
   10686:	89 2b       	or	r24, r25
   10688:	09 f4       	brne	.+2      	; 0x1068c <posix_tests+0x330>
        {
            printf("rm %s failed\n", argv[ind]);
   1068a:	b0 cf       	rjmp	.-160    	; 0x105ec <posix_tests+0x290>
   1068c:	f7 01       	movw	r30, r14
   1068e:	80 81       	ld	r24, Z
   10690:	91 81       	ldd	r25, Z+1	; 0x01
   10692:	ed b7       	in	r30, 0x3d	; 61
   10694:	fe b7       	in	r31, 0x3e	; 62
   10696:	95 83       	std	Z+5, r25	; 0x05
   10698:	84 83       	std	Z+4, r24	; 0x04
   1069a:	82 e0       	ldi	r24, 0x02	; 2
   1069c:	9d e0       	ldi	r25, 0x0D	; 13
   1069e:	a0 e0       	ldi	r26, 0x00	; 0
   106a0:	81 83       	std	Z+1, r24	; 0x01
   106a2:	92 83       	std	Z+2, r25	; 0x02
   106a4:	a3 83       	std	Z+3, r26	; 0x03
   106a6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            return(0);
   106aa:	81 2c       	mov	r8, r1
   106ac:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   106ae:	25 c0       	rjmp	.+74     	; 0x106fa <posix_tests+0x39e>
   106b0:	98 01       	movw	r18, r16
   106b2:	a7 01       	movw	r20, r14
   106b4:	61 ec       	ldi	r22, 0xC1	; 193
   106b6:	7b e0       	ldi	r23, 0x0B	; 11
   106b8:	c6 01       	movw	r24, r12
   106ba:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   106be:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   106c0:	a1 f3       	breq	.-24     	; 0x106aa <posix_tests+0x34e>
   106c2:	73 01       	movw	r14, r6
   106c4:	ee 0c       	add	r14, r14
   106c6:	ff 1c       	adc	r15, r15
   106c8:	e4 0c       	add	r14, r4
   106ca:	f5 1c       	adc	r15, r5
   106cc:	f7 01       	movw	r30, r14
   106ce:	80 81       	ld	r24, Z
   106d0:	91 81       	ldd	r25, Z+1	; 0x01
   106d2:	0e 94 c8 77 	call	0xef90	; 0xef90 <rmdir>
   106d6:	89 2b       	or	r24, r25
   106d8:	09 f4       	brne	.+2      	; 0x106dc <posix_tests+0x380>
        {
            printf("rmdir %s failed\n", argv[ind]);
   106da:	88 cf       	rjmp	.-240    	; 0x105ec <posix_tests+0x290>
   106dc:	f7 01       	movw	r30, r14
   106de:	80 81       	ld	r24, Z
   106e0:	91 81       	ldd	r25, Z+1	; 0x01
   106e2:	ed b7       	in	r30, 0x3d	; 61
   106e4:	fe b7       	in	r31, 0x3e	; 62
   106e6:	95 83       	std	Z+5, r25	; 0x05
   106e8:	84 83       	std	Z+4, r24	; 0x04
   106ea:	81 ef       	ldi	r24, 0xF1	; 241
   106ec:	9c e0       	ldi	r25, 0x0C	; 12
   106ee:	a0 e0       	ldi	r26, 0x00	; 0
   106f0:	81 83       	std	Z+1, r24	; 0x01
   106f2:	92 83       	std	Z+2, r25	; 0x02
   106f4:	a3 83       	std	Z+3, r26	; 0x03
   106f6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   106fa:	c4 01       	movw	r24, r8
   106fc:	c9 5f       	subi	r28, 0xF9	; 249
   106fe:	de 4f       	sbci	r29, 0xFE	; 254
   10700:	e0 e1       	ldi	r30, 0x10	; 16
   10702:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

00010706 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10706:	00 d0       	rcall	.+0      	; 0x10708 <gpib_timer_init+0x2>
   10708:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1070a:	61 e0       	ldi	r22, 0x01	; 1
   1070c:	70 e0       	ldi	r23, 0x00	; 0
   1070e:	8f e3       	ldi	r24, 0x3F	; 63
   10710:	95 e8       	ldi	r25, 0x85	; 133
   10712:	0e 94 31 34 	call	0x6862	; 0x6862 <set_timers>
   10716:	01 96       	adiw	r24, 0x01	; 1
   10718:	51 f4       	brne	.+20     	; 0x1072e <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   1071a:	83 e7       	ldi	r24, 0x73	; 115
   1071c:	9e e0       	ldi	r25, 0x0E	; 14
   1071e:	a0 e0       	ldi	r26, 0x00	; 0
   10720:	ed b7       	in	r30, 0x3d	; 61
   10722:	fe b7       	in	r31, 0x3e	; 62
   10724:	81 83       	std	Z+1, r24	; 0x01
   10726:	92 83       	std	Z+2, r25	; 0x02
   10728:	a3 83       	std	Z+3, r26	; 0x03
   1072a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    gpib_timer_reset();
}
   1072e:	95 d1       	rcall	.+810    	; 0x10a5a <gpib_timer_reset>
   10730:	0f 90       	pop	r0
   10732:	0f 90       	pop	r0
   10734:	0f 90       	pop	r0
   10736:	08 95       	ret

00010738 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10738:	28 2f       	mov	r18, r24
   1073a:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1073c:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1073e:	88 0f       	add	r24, r24
        if(mask & 1)
   10740:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10742:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10744:	26 95       	lsr	r18
   10746:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10748:	d1 f7       	brne	.-12     	; 0x1073e <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1074a:	08 95       	ret

0001074c <ppr_set>:
   1074c:	f5 df       	rcall	.-22     	; 0x10738 <reverse_8bits>
   1074e:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <_ppr_reg>
   10752:	0e 94 33 2b 	call	0x5666	; 0x5666 <SPI0_TXRX_Byte>
   10756:	2a 9a       	sbi	0x05, 2	; 5
   10758:	22 9a       	sbi	0x04, 2	; 4
   1075a:	2a 98       	cbi	0x05, 2	; 5
   1075c:	22 9a       	sbi	0x04, 2	; 4
   1075e:	08 95       	ret

00010760 <ppr_reg>:
   10760:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <_ppr_reg>
   10764:	e9 cf       	rjmp	.-46     	; 0x10738 <reverse_8bits>
   10766:	08 95       	ret

00010768 <ppr_init>:
   10768:	00 d0       	rcall	.+0      	; 0x1076a <ppr_init+0x2>
   1076a:	1f 92       	push	r1
   1076c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10770:	81 ff       	sbrs	r24, 1
   10772:	0a c0       	rjmp	.+20     	; 0x10788 <ppr_init+0x20>
   10774:	80 e6       	ldi	r24, 0x60	; 96
   10776:	9e e0       	ldi	r25, 0x0E	; 14
   10778:	a0 e0       	ldi	r26, 0x00	; 0
   1077a:	ed b7       	in	r30, 0x3d	; 61
   1077c:	fe b7       	in	r31, 0x3e	; 62
   1077e:	81 83       	std	Z+1, r24	; 0x01
   10780:	92 83       	std	Z+2, r25	; 0x02
   10782:	a3 83       	std	Z+3, r26	; 0x03
   10784:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10788:	80 e0       	ldi	r24, 0x00	; 0
   1078a:	e0 df       	rcall	.-64     	; 0x1074c <ppr_set>
   1078c:	0f 90       	pop	r0
   1078e:	0f 90       	pop	r0
   10790:	0f 90       	pop	r0
   10792:	08 95       	ret

00010794 <ppr_bit_set>:
   10794:	21 e0       	ldi	r18, 0x01	; 1
   10796:	30 e0       	ldi	r19, 0x00	; 0
   10798:	01 c0       	rjmp	.+2      	; 0x1079c <ppr_bit_set+0x8>
   1079a:	22 0f       	add	r18, r18
   1079c:	8a 95       	dec	r24
   1079e:	ea f7       	brpl	.-6      	; 0x1079a <ppr_bit_set+0x6>
   107a0:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <_ppr_reg>
   107a4:	82 2b       	or	r24, r18
   107a6:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <_ppr_reg>
   107aa:	d0 cf       	rjmp	.-96     	; 0x1074c <ppr_set>
   107ac:	08 95       	ret

000107ae <ppr_bit_clr>:
   107ae:	21 e0       	ldi	r18, 0x01	; 1
   107b0:	30 e0       	ldi	r19, 0x00	; 0
   107b2:	01 c0       	rjmp	.+2      	; 0x107b6 <ppr_bit_clr+0x8>
   107b4:	22 0f       	add	r18, r18
   107b6:	8a 95       	dec	r24
   107b8:	ea f7       	brpl	.-6      	; 0x107b4 <ppr_bit_clr+0x6>
   107ba:	20 95       	com	r18
   107bc:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <_ppr_reg>
   107c0:	82 23       	and	r24, r18
   107c2:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <_ppr_reg>
   107c6:	c2 cf       	rjmp	.-124    	; 0x1074c <ppr_set>
   107c8:	08 95       	ret

000107ca <dbf_open>:
   107ca:	0f 93       	push	r16
   107cc:	1f 93       	push	r17
   107ce:	cf 93       	push	r28
   107d0:	df 93       	push	r29
   107d2:	00 d0       	rcall	.+0      	; 0x107d4 <dbf_open+0xa>
   107d4:	00 d0       	rcall	.+0      	; 0x107d6 <dbf_open+0xc>
   107d6:	1f 92       	push	r1
   107d8:	8b 01       	movw	r16, r22
   107da:	0e 94 84 59 	call	0xb308	; 0xb308 <f_open>
   107de:	ec 01       	movw	r28, r24
   107e0:	89 2b       	or	r24, r25
   107e2:	79 f0       	breq	.+30     	; 0x10802 <dbf_open+0x38>
   107e4:	ed b7       	in	r30, 0x3d	; 61
   107e6:	fe b7       	in	r31, 0x3e	; 62
   107e8:	15 83       	std	Z+5, r17	; 0x05
   107ea:	04 83       	std	Z+4, r16	; 0x04
   107ec:	8f e4       	ldi	r24, 0x4F	; 79
   107ee:	9e e0       	ldi	r25, 0x0E	; 14
   107f0:	a0 e0       	ldi	r26, 0x00	; 0
   107f2:	81 83       	std	Z+1, r24	; 0x01
   107f4:	92 83       	std	Z+2, r25	; 0x02
   107f6:	a3 83       	std	Z+3, r26	; 0x03
   107f8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   107fc:	ce 01       	movw	r24, r28
   107fe:	0e 94 5e 70 	call	0xe0bc	; 0xe0bc <put_rc>
   10802:	ce 01       	movw	r24, r28
   10804:	cd b7       	in	r28, 0x3d	; 61
   10806:	de b7       	in	r29, 0x3e	; 62
   10808:	25 96       	adiw	r28, 0x05	; 5
   1080a:	e4 e0       	ldi	r30, 0x04	; 4
   1080c:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00010810 <dbf_read>:
   10810:	cf 93       	push	r28
   10812:	df 93       	push	r29
   10814:	00 d0       	rcall	.+0      	; 0x10816 <dbf_read+0x6>
   10816:	1f 92       	push	r1
   10818:	0e 94 3c 5b 	call	0xb678	; 0xb678 <f_read>
   1081c:	ec 01       	movw	r28, r24
   1081e:	89 2b       	or	r24, r25
   10820:	69 f0       	breq	.+26     	; 0x1083c <dbf_read+0x2c>
   10822:	82 e4       	ldi	r24, 0x42	; 66
   10824:	9e e0       	ldi	r25, 0x0E	; 14
   10826:	a0 e0       	ldi	r26, 0x00	; 0
   10828:	ed b7       	in	r30, 0x3d	; 61
   1082a:	fe b7       	in	r31, 0x3e	; 62
   1082c:	81 83       	std	Z+1, r24	; 0x01
   1082e:	92 83       	std	Z+2, r25	; 0x02
   10830:	a3 83       	std	Z+3, r26	; 0x03
   10832:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10836:	ce 01       	movw	r24, r28
   10838:	0e 94 5e 70 	call	0xe0bc	; 0xe0bc <put_rc>
   1083c:	ce 01       	movw	r24, r28
   1083e:	cd b7       	in	r28, 0x3d	; 61
   10840:	de b7       	in	r29, 0x3e	; 62
   10842:	23 96       	adiw	r28, 0x03	; 3
   10844:	e2 e0       	ldi	r30, 0x02	; 2
   10846:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0001084a <dbf_write>:
   1084a:	cf 93       	push	r28
   1084c:	df 93       	push	r29
   1084e:	00 d0       	rcall	.+0      	; 0x10850 <dbf_write+0x6>
   10850:	1f 92       	push	r1
   10852:	0e 94 87 5c 	call	0xb90e	; 0xb90e <f_write>
   10856:	ec 01       	movw	r28, r24
   10858:	89 2b       	or	r24, r25
   1085a:	69 f0       	breq	.+26     	; 0x10876 <dbf_write+0x2c>
   1085c:	84 e3       	ldi	r24, 0x34	; 52
   1085e:	9e e0       	ldi	r25, 0x0E	; 14
   10860:	a0 e0       	ldi	r26, 0x00	; 0
   10862:	ed b7       	in	r30, 0x3d	; 61
   10864:	fe b7       	in	r31, 0x3e	; 62
   10866:	81 83       	std	Z+1, r24	; 0x01
   10868:	92 83       	std	Z+2, r25	; 0x02
   1086a:	a3 83       	std	Z+3, r26	; 0x03
   1086c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10870:	ce 01       	movw	r24, r28
   10872:	0e 94 5e 70 	call	0xe0bc	; 0xe0bc <put_rc>
   10876:	ce 01       	movw	r24, r28
   10878:	cd b7       	in	r28, 0x3d	; 61
   1087a:	de b7       	in	r29, 0x3e	; 62
   1087c:	23 96       	adiw	r28, 0x03	; 3
   1087e:	e2 e0       	ldi	r30, 0x02	; 2
   10880:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00010884 <dbf_lseek>:
   10884:	cf 93       	push	r28
   10886:	df 93       	push	r29
   10888:	00 d0       	rcall	.+0      	; 0x1088a <dbf_lseek+0x6>
   1088a:	1f 92       	push	r1
   1088c:	0e 94 48 60 	call	0xc090	; 0xc090 <f_lseek>
   10890:	ec 01       	movw	r28, r24
   10892:	89 2b       	or	r24, r25
   10894:	69 f0       	breq	.+26     	; 0x108b0 <dbf_lseek+0x2c>
   10896:	87 e2       	ldi	r24, 0x27	; 39
   10898:	9e e0       	ldi	r25, 0x0E	; 14
   1089a:	a0 e0       	ldi	r26, 0x00	; 0
   1089c:	ed b7       	in	r30, 0x3d	; 61
   1089e:	fe b7       	in	r31, 0x3e	; 62
   108a0:	81 83       	std	Z+1, r24	; 0x01
   108a2:	92 83       	std	Z+2, r25	; 0x02
   108a4:	a3 83       	std	Z+3, r26	; 0x03
   108a6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   108aa:	ce 01       	movw	r24, r28
   108ac:	0e 94 5e 70 	call	0xe0bc	; 0xe0bc <put_rc>
   108b0:	ce 01       	movw	r24, r28
   108b2:	cd b7       	in	r28, 0x3d	; 61
   108b4:	de b7       	in	r29, 0x3e	; 62
   108b6:	23 96       	adiw	r28, 0x03	; 3
   108b8:	e2 e0       	ldi	r30, 0x02	; 2
   108ba:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000108be <dbf_close>:
   108be:	cf 93       	push	r28
   108c0:	df 93       	push	r29
   108c2:	00 d0       	rcall	.+0      	; 0x108c4 <dbf_close+0x6>
   108c4:	1f 92       	push	r1
   108c6:	0e 94 9e 5e 	call	0xbd3c	; 0xbd3c <f_close>
   108ca:	ec 01       	movw	r28, r24
   108cc:	89 2b       	or	r24, r25
   108ce:	69 f0       	breq	.+26     	; 0x108ea <dbf_close+0x2c>
   108d0:	89 e1       	ldi	r24, 0x19	; 25
   108d2:	9e e0       	ldi	r25, 0x0E	; 14
   108d4:	a0 e0       	ldi	r26, 0x00	; 0
   108d6:	ed b7       	in	r30, 0x3d	; 61
   108d8:	fe b7       	in	r31, 0x3e	; 62
   108da:	81 83       	std	Z+1, r24	; 0x01
   108dc:	92 83       	std	Z+2, r25	; 0x02
   108de:	a3 83       	std	Z+3, r26	; 0x03
   108e0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   108e4:	ce 01       	movw	r24, r28
   108e6:	0e 94 5e 70 	call	0xe0bc	; 0xe0bc <put_rc>
   108ea:	ce 01       	movw	r24, r28
   108ec:	cd b7       	in	r28, 0x3d	; 61
   108ee:	de b7       	in	r29, 0x3e	; 62
   108f0:	23 96       	adiw	r28, 0x03	; 3
   108f2:	e2 e0       	ldi	r30, 0x02	; 2
   108f4:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000108f8 <dbf_open_read>:
   108f8:	a6 e2       	ldi	r26, 0x26	; 38
   108fa:	b2 e0       	ldi	r27, 0x02	; 2
   108fc:	e2 e8       	ldi	r30, 0x82	; 130
   108fe:	f4 e8       	ldi	r31, 0x84	; 132
   10900:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
   10904:	4a 01       	movw	r8, r20
   10906:	5b 01       	movw	r10, r22
   10908:	69 01       	movw	r12, r18
   1090a:	cb 5d       	subi	r28, 0xDB	; 219
   1090c:	dd 4f       	sbci	r29, 0xFD	; 253
   1090e:	19 82       	std	Y+1, r1	; 0x01
   10910:	18 82       	st	Y, r1
   10912:	c5 52       	subi	r28, 0x25	; 37
   10914:	d2 40       	sbci	r29, 0x02	; 2
   10916:	43 e0       	ldi	r20, 0x03	; 3
   10918:	bc 01       	movw	r22, r24
   1091a:	ce 01       	movw	r24, r28
   1091c:	01 96       	adiw	r24, 0x01	; 1
   1091e:	55 df       	rcall	.-342    	; 0x107ca <dbf_open>
   10920:	89 2b       	or	r24, r25
   10922:	19 f0       	breq	.+6      	; 0x1092a <dbf_open_read+0x32>
   10924:	81 e1       	ldi	r24, 0x11	; 17
   10926:	90 e0       	ldi	r25, 0x00	; 0
   10928:	2f c0       	rjmp	.+94     	; 0x10988 <dbf_open_read+0x90>
   1092a:	b5 01       	movw	r22, r10
   1092c:	a4 01       	movw	r20, r8
   1092e:	ce 01       	movw	r24, r28
   10930:	01 96       	adiw	r24, 0x01	; 1
   10932:	a8 df       	rcall	.-176    	; 0x10884 <dbf_lseek>
   10934:	89 2b       	or	r24, r25
   10936:	59 f0       	breq	.+22     	; 0x1094e <dbf_open_read+0x56>
   10938:	85 e0       	ldi	r24, 0x05	; 5
   1093a:	90 e0       	ldi	r25, 0x00	; 0
   1093c:	f7 01       	movw	r30, r14
   1093e:	91 83       	std	Z+1, r25	; 0x01
   10940:	80 83       	st	Z, r24
   10942:	ce 01       	movw	r24, r28
   10944:	01 96       	adiw	r24, 0x01	; 1
   10946:	bb df       	rcall	.-138    	; 0x108be <dbf_close>
   10948:	8f ef       	ldi	r24, 0xFF	; 255
   1094a:	9f ef       	ldi	r25, 0xFF	; 255
   1094c:	27 c0       	rjmp	.+78     	; 0x1099c <dbf_open_read+0xa4>
   1094e:	9e 01       	movw	r18, r28
   10950:	2b 5d       	subi	r18, 0xDB	; 219
   10952:	3d 4f       	sbci	r19, 0xFD	; 253
   10954:	a8 01       	movw	r20, r16
   10956:	b6 01       	movw	r22, r12
   10958:	ce 01       	movw	r24, r28
   1095a:	01 96       	adiw	r24, 0x01	; 1
   1095c:	59 df       	rcall	.-334    	; 0x10810 <dbf_read>
   1095e:	89 2b       	or	r24, r25
   10960:	49 f4       	brne	.+18     	; 0x10974 <dbf_open_read+0x7c>
   10962:	cb 5d       	subi	r28, 0xDB	; 219
   10964:	dd 4f       	sbci	r29, 0xFD	; 253
   10966:	88 81       	ld	r24, Y
   10968:	99 81       	ldd	r25, Y+1	; 0x01
   1096a:	c5 52       	subi	r28, 0x25	; 37
   1096c:	d2 40       	sbci	r29, 0x02	; 2
   1096e:	08 17       	cp	r16, r24
   10970:	19 07       	cpc	r17, r25
   10972:	19 f0       	breq	.+6      	; 0x1097a <dbf_open_read+0x82>
   10974:	81 e0       	ldi	r24, 0x01	; 1
   10976:	90 e0       	ldi	r25, 0x00	; 0
   10978:	e1 cf       	rjmp	.-62     	; 0x1093c <dbf_open_read+0x44>
   1097a:	ce 01       	movw	r24, r28
   1097c:	01 96       	adiw	r24, 0x01	; 1
   1097e:	9f df       	rcall	.-194    	; 0x108be <dbf_close>
   10980:	89 2b       	or	r24, r25
   10982:	31 f0       	breq	.+12     	; 0x10990 <dbf_open_read+0x98>
   10984:	80 e1       	ldi	r24, 0x10	; 16
   10986:	90 e0       	ldi	r25, 0x00	; 0
   10988:	f7 01       	movw	r30, r14
   1098a:	91 83       	std	Z+1, r25	; 0x01
   1098c:	80 83       	st	Z, r24
   1098e:	dc cf       	rjmp	.-72     	; 0x10948 <dbf_open_read+0x50>
   10990:	cb 5d       	subi	r28, 0xDB	; 219
   10992:	dd 4f       	sbci	r29, 0xFD	; 253
   10994:	88 81       	ld	r24, Y
   10996:	99 81       	ldd	r25, Y+1	; 0x01
   10998:	c5 52       	subi	r28, 0x25	; 37
   1099a:	d2 40       	sbci	r29, 0x02	; 2
   1099c:	ca 5d       	subi	r28, 0xDA	; 218
   1099e:	dd 4f       	sbci	r29, 0xFD	; 253
   109a0:	ec e0       	ldi	r30, 0x0C	; 12
   109a2:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

000109a6 <dbf_open_write>:
   109a6:	a6 e2       	ldi	r26, 0x26	; 38
   109a8:	b2 e0       	ldi	r27, 0x02	; 2
   109aa:	e9 ed       	ldi	r30, 0xD9	; 217
   109ac:	f4 e8       	ldi	r31, 0x84	; 132
   109ae:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
   109b2:	4a 01       	movw	r8, r20
   109b4:	5b 01       	movw	r10, r22
   109b6:	69 01       	movw	r12, r18
   109b8:	cb 5d       	subi	r28, 0xDB	; 219
   109ba:	dd 4f       	sbci	r29, 0xFD	; 253
   109bc:	19 82       	std	Y+1, r1	; 0x01
   109be:	18 82       	st	Y, r1
   109c0:	c5 52       	subi	r28, 0x25	; 37
   109c2:	d2 40       	sbci	r29, 0x02	; 2
   109c4:	43 e0       	ldi	r20, 0x03	; 3
   109c6:	bc 01       	movw	r22, r24
   109c8:	ce 01       	movw	r24, r28
   109ca:	01 96       	adiw	r24, 0x01	; 1
   109cc:	fe de       	rcall	.-516    	; 0x107ca <dbf_open>
   109ce:	89 2b       	or	r24, r25
   109d0:	19 f0       	breq	.+6      	; 0x109d8 <dbf_open_write+0x32>
   109d2:	81 e1       	ldi	r24, 0x11	; 17
   109d4:	90 e0       	ldi	r25, 0x00	; 0
   109d6:	2f c0       	rjmp	.+94     	; 0x10a36 <dbf_open_write+0x90>
   109d8:	b5 01       	movw	r22, r10
   109da:	a4 01       	movw	r20, r8
   109dc:	ce 01       	movw	r24, r28
   109de:	01 96       	adiw	r24, 0x01	; 1
   109e0:	51 df       	rcall	.-350    	; 0x10884 <dbf_lseek>
   109e2:	89 2b       	or	r24, r25
   109e4:	59 f0       	breq	.+22     	; 0x109fc <dbf_open_write+0x56>
   109e6:	85 e0       	ldi	r24, 0x05	; 5
   109e8:	90 e0       	ldi	r25, 0x00	; 0
   109ea:	f7 01       	movw	r30, r14
   109ec:	91 83       	std	Z+1, r25	; 0x01
   109ee:	80 83       	st	Z, r24
   109f0:	ce 01       	movw	r24, r28
   109f2:	01 96       	adiw	r24, 0x01	; 1
   109f4:	64 df       	rcall	.-312    	; 0x108be <dbf_close>
   109f6:	8f ef       	ldi	r24, 0xFF	; 255
   109f8:	9f ef       	ldi	r25, 0xFF	; 255
   109fa:	27 c0       	rjmp	.+78     	; 0x10a4a <dbf_open_write+0xa4>
   109fc:	9e 01       	movw	r18, r28
   109fe:	2b 5d       	subi	r18, 0xDB	; 219
   10a00:	3d 4f       	sbci	r19, 0xFD	; 253
   10a02:	a8 01       	movw	r20, r16
   10a04:	b6 01       	movw	r22, r12
   10a06:	ce 01       	movw	r24, r28
   10a08:	01 96       	adiw	r24, 0x01	; 1
   10a0a:	1f df       	rcall	.-450    	; 0x1084a <dbf_write>
   10a0c:	89 2b       	or	r24, r25
   10a0e:	49 f4       	brne	.+18     	; 0x10a22 <dbf_open_write+0x7c>
   10a10:	cb 5d       	subi	r28, 0xDB	; 219
   10a12:	dd 4f       	sbci	r29, 0xFD	; 253
   10a14:	88 81       	ld	r24, Y
   10a16:	99 81       	ldd	r25, Y+1	; 0x01
   10a18:	c5 52       	subi	r28, 0x25	; 37
   10a1a:	d2 40       	sbci	r29, 0x02	; 2
   10a1c:	08 17       	cp	r16, r24
   10a1e:	19 07       	cpc	r17, r25
   10a20:	19 f0       	breq	.+6      	; 0x10a28 <dbf_open_write+0x82>
   10a22:	81 e0       	ldi	r24, 0x01	; 1
   10a24:	90 e0       	ldi	r25, 0x00	; 0
   10a26:	e1 cf       	rjmp	.-62     	; 0x109ea <dbf_open_write+0x44>
   10a28:	ce 01       	movw	r24, r28
   10a2a:	01 96       	adiw	r24, 0x01	; 1
   10a2c:	48 df       	rcall	.-368    	; 0x108be <dbf_close>
   10a2e:	89 2b       	or	r24, r25
   10a30:	31 f0       	breq	.+12     	; 0x10a3e <dbf_open_write+0x98>
   10a32:	80 e1       	ldi	r24, 0x10	; 16
   10a34:	90 e0       	ldi	r25, 0x00	; 0
   10a36:	f7 01       	movw	r30, r14
   10a38:	91 83       	std	Z+1, r25	; 0x01
   10a3a:	80 83       	st	Z, r24
   10a3c:	dc cf       	rjmp	.-72     	; 0x109f6 <dbf_open_write+0x50>
   10a3e:	cb 5d       	subi	r28, 0xDB	; 219
   10a40:	dd 4f       	sbci	r29, 0xFD	; 253
   10a42:	88 81       	ld	r24, Y
   10a44:	99 81       	ldd	r25, Y+1	; 0x01
   10a46:	c5 52       	subi	r28, 0x25	; 37
   10a48:	d2 40       	sbci	r29, 0x02	; 2
   10a4a:	ca 5d       	subi	r28, 0xDA	; 218
   10a4c:	dd 4f       	sbci	r29, 0xFD	; 253
   10a4e:	ec e0       	ldi	r30, 0x0C	; 12
   10a50:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

00010a54 <gpib_timer_elapsed_begin>:
   10a54:	0c 94 f1 34 	jmp	0x69e2	; 0x69e2 <clock_elapsed_begin>
   10a58:	08 95       	ret

00010a5a <gpib_timer_reset>:
   10a5a:	f8 94       	cli
   10a5c:	e0 ec       	ldi	r30, 0xC0	; 192
   10a5e:	fc e1       	ldi	r31, 0x1C	; 28
   10a60:	10 82       	st	Z, r1
   10a62:	11 82       	std	Z+1, r1	; 0x01
   10a64:	12 82       	std	Z+2, r1	; 0x02
   10a66:	13 82       	std	Z+3, r1	; 0x03
   10a68:	14 82       	std	Z+4, r1	; 0x04
   10a6a:	15 82       	std	Z+5, r1	; 0x05
   10a6c:	16 82       	std	Z+6, r1	; 0x06
   10a6e:	17 82       	std	Z+7, r1	; 0x07
   10a70:	81 e0       	ldi	r24, 0x01	; 1
   10a72:	80 87       	std	Z+8, r24	; 0x08
   10a74:	78 94       	sei
   10a76:	08 95       	ret

00010a78 <gpib_timer_elapsed_end>:
   10a78:	0c 94 f7 34 	jmp	0x69ee	; 0x69ee <clock_elapsed_end>
   10a7c:	08 95       	ret

00010a7e <gpib_timer_task>:
   10a7e:	f8 94       	cli
   10a80:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <gpib_timer+0x4>
   10a84:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <gpib_timer+0x5>
   10a88:	a0 91 c6 1c 	lds	r26, 0x1CC6	; 0x801cc6 <gpib_timer+0x6>
   10a8c:	b0 91 c7 1c 	lds	r27, 0x1CC7	; 0x801cc7 <gpib_timer+0x7>
   10a90:	89 2b       	or	r24, r25
   10a92:	8a 2b       	or	r24, r26
   10a94:	8b 2b       	or	r24, r27
   10a96:	a1 f0       	breq	.+40     	; 0x10ac0 <gpib_timer_task+0x42>
   10a98:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <gpib_timer+0x4>
   10a9c:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <gpib_timer+0x5>
   10aa0:	a0 91 c6 1c 	lds	r26, 0x1CC6	; 0x801cc6 <gpib_timer+0x6>
   10aa4:	b0 91 c7 1c 	lds	r27, 0x1CC7	; 0x801cc7 <gpib_timer+0x7>
   10aa8:	01 97       	sbiw	r24, 0x01	; 1
   10aaa:	a1 09       	sbc	r26, r1
   10aac:	b1 09       	sbc	r27, r1
   10aae:	80 93 c4 1c 	sts	0x1CC4, r24	; 0x801cc4 <gpib_timer+0x4>
   10ab2:	90 93 c5 1c 	sts	0x1CC5, r25	; 0x801cc5 <gpib_timer+0x5>
   10ab6:	a0 93 c6 1c 	sts	0x1CC6, r26	; 0x801cc6 <gpib_timer+0x6>
   10aba:	b0 93 c7 1c 	sts	0x1CC7, r27	; 0x801cc7 <gpib_timer+0x7>
   10abe:	03 c0       	rjmp	.+6      	; 0x10ac6 <gpib_timer_task+0x48>
   10ac0:	81 e0       	ldi	r24, 0x01	; 1
   10ac2:	80 93 c8 1c 	sts	0x1CC8, r24	; 0x801cc8 <gpib_timer+0x8>
   10ac6:	78 94       	sei
   10ac8:	08 95       	ret

00010aca <gpib_timeout_set>:
   10aca:	f8 94       	cli
   10acc:	e0 ec       	ldi	r30, 0xC0	; 192
   10ace:	fc e1       	ldi	r31, 0x1C	; 28
   10ad0:	64 83       	std	Z+4, r22	; 0x04
   10ad2:	75 83       	std	Z+5, r23	; 0x05
   10ad4:	86 83       	std	Z+6, r24	; 0x06
   10ad6:	97 83       	std	Z+7, r25	; 0x07
   10ad8:	10 86       	std	Z+8, r1	; 0x08
   10ada:	78 94       	sei
   10adc:	08 95       	ret

00010ade <gpib_bus_read_init>:
   10ade:	54 98       	cbi	0x0a, 4	; 10
   10ae0:	57 98       	cbi	0x0a, 7	; 10
   10ae2:	45 98       	cbi	0x08, 5	; 8
   10ae4:	3d 9a       	sbi	0x07, 5	; 7
   10ae6:	11 b8       	out	0x01, r1	; 1
   10ae8:	2f ef       	ldi	r18, 0xFF	; 255
   10aea:	22 b9       	out	0x02, r18	; 2
   10aec:	43 98       	cbi	0x08, 3	; 8
   10aee:	3b 9a       	sbi	0x07, 3	; 7
   10af0:	21 98       	cbi	0x04, 1	; 4
   10af2:	56 98       	cbi	0x0a, 6	; 10
   10af4:	20 98       	cbi	0x04, 0	; 4
   10af6:	55 98       	cbi	0x0a, 5	; 10
   10af8:	89 2b       	or	r24, r25
   10afa:	39 f4       	brne	.+14     	; 0x10b0a <gpib_bus_read_init+0x2c>
   10afc:	52 98       	cbi	0x0a, 2	; 10
   10afe:	53 98       	cbi	0x0a, 3	; 10
   10b00:	8d e0       	ldi	r24, 0x0D	; 13
   10b02:	8a 95       	dec	r24
   10b04:	f1 f7       	brne	.-4      	; 0x10b02 <gpib_bus_read_init+0x24>
   10b06:	00 00       	nop
   10b08:	04 c0       	rjmp	.+8      	; 0x10b12 <gpib_bus_read_init+0x34>
   10b0a:	5b 98       	cbi	0x0b, 3	; 11
   10b0c:	53 9a       	sbi	0x0a, 3	; 10
   10b0e:	5a 98       	cbi	0x0b, 2	; 11
   10b10:	52 9a       	sbi	0x0a, 2	; 10
   10b12:	42 98       	cbi	0x08, 2	; 8
   10b14:	3a 9a       	sbi	0x07, 2	; 7
   10b16:	44 9a       	sbi	0x08, 4	; 8
   10b18:	3c 9a       	sbi	0x07, 4	; 7
   10b1a:	8d e0       	ldi	r24, 0x0D	; 13
   10b1c:	8a 95       	dec	r24
   10b1e:	f1 f7       	brne	.-4      	; 0x10b1c <gpib_bus_read_init+0x3e>
   10b20:	00 00       	nop
   10b22:	08 95       	ret

00010b24 <gpib_bus_init>:
   10b24:	00 d0       	rcall	.+0      	; 0x10b26 <gpib_bus_init+0x2>
   10b26:	1f 92       	push	r1
   10b28:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <gpib_unread_f>
   10b2c:	11 b8       	out	0x01, r1	; 1
   10b2e:	8f ef       	ldi	r24, 0xFF	; 255
   10b30:	82 b9       	out	0x02, r24	; 2
   10b32:	21 98       	cbi	0x04, 1	; 4
   10b34:	52 98       	cbi	0x0a, 2	; 10
   10b36:	53 98       	cbi	0x0a, 3	; 10
   10b38:	54 98       	cbi	0x0a, 4	; 10
   10b3a:	57 98       	cbi	0x0a, 7	; 10
   10b3c:	56 98       	cbi	0x0a, 6	; 10
   10b3e:	20 98       	cbi	0x04, 0	; 4
   10b40:	55 98       	cbi	0x0a, 5	; 10
   10b42:	45 98       	cbi	0x08, 5	; 8
   10b44:	3d 9a       	sbi	0x07, 5	; 7
   10b46:	43 98       	cbi	0x08, 3	; 8
   10b48:	3b 9a       	sbi	0x07, 3	; 7
   10b4a:	42 98       	cbi	0x08, 2	; 8
   10b4c:	3a 9a       	sbi	0x07, 2	; 7
   10b4e:	44 9a       	sbi	0x08, 4	; 8
   10b50:	3c 9a       	sbi	0x07, 4	; 7
   10b52:	8d e0       	ldi	r24, 0x0D	; 13
   10b54:	8a 95       	dec	r24
   10b56:	f1 f7       	brne	.-4      	; 0x10b54 <gpib_bus_init+0x30>
   10b58:	00 00       	nop
   10b5a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10b5e:	82 ff       	sbrs	r24, 2
   10b60:	0a c0       	rjmp	.+20     	; 0x10b76 <gpib_bus_init+0x52>
   10b62:	84 ee       	ldi	r24, 0xE4	; 228
   10b64:	90 e1       	ldi	r25, 0x10	; 16
   10b66:	a0 e0       	ldi	r26, 0x00	; 0
   10b68:	ed b7       	in	r30, 0x3d	; 61
   10b6a:	fe b7       	in	r31, 0x3e	; 62
   10b6c:	81 83       	std	Z+1, r24	; 0x01
   10b6e:	92 83       	std	Z+2, r25	; 0x02
   10b70:	a3 83       	std	Z+3, r26	; 0x03
   10b72:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10b76:	0f 90       	pop	r0
   10b78:	0f 90       	pop	r0
   10b7a:	0f 90       	pop	r0
   10b7c:	08 95       	ret

00010b7e <gpib_state_init>:
   10b7e:	00 d0       	rcall	.+0      	; 0x10b80 <gpib_state_init+0x2>
   10b80:	1f 92       	push	r1
   10b82:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10b86:	82 ff       	sbrs	r24, 2
   10b88:	0a c0       	rjmp	.+20     	; 0x10b9e <gpib_state_init+0x20>
   10b8a:	81 ed       	ldi	r24, 0xD1	; 209
   10b8c:	90 e1       	ldi	r25, 0x10	; 16
   10b8e:	a0 e0       	ldi	r26, 0x00	; 0
   10b90:	ed b7       	in	r30, 0x3d	; 61
   10b92:	fe b7       	in	r31, 0x3e	; 62
   10b94:	81 83       	std	Z+1, r24	; 0x01
   10b96:	92 83       	std	Z+2, r25	; 0x02
   10b98:	a3 83       	std	Z+3, r26	; 0x03
   10b9a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10b9e:	e4 dd       	rcall	.-1080   	; 0x10768 <ppr_init>
   10ba0:	0e 94 45 90 	call	0x1208a	; 0x1208a <listen_cleanup>
   10ba4:	0e 94 5d 91 	call	0x122ba	; 0x122ba <talk_cleanup>
   10ba8:	10 92 cc 1e 	sts	0x1ECC, r1	; 0x801ecc <spoll>
   10bac:	10 92 cf 1e 	sts	0x1ECF, r1	; 0x801ecf <talking>
   10bb0:	10 92 d2 1e 	sts	0x1ED2, r1	; 0x801ed2 <talking_last>
   10bb4:	10 92 d1 1e 	sts	0x1ED1, r1	; 0x801ed1 <listening>
   10bb8:	10 92 cb 1e 	sts	0x1ECB, r1	; 0x801ecb <listening_last>
   10bbc:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <lastcmd+0x1>
   10bc0:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <lastcmd>
   10bc4:	10 92 ce 1e 	sts	0x1ECE, r1	; 0x801ece <current+0x1>
   10bc8:	10 92 cd 1e 	sts	0x1ECD, r1	; 0x801ecd <current>
   10bcc:	10 92 d0 1e 	sts	0x1ED0, r1	; 0x801ed0 <secondary>
   10bd0:	0f 90       	pop	r0
   10bd2:	0f 90       	pop	r0
   10bd4:	0f 90       	pop	r0
   10bd6:	08 95       	ret

00010bd8 <gpib_enable_PPR>:
   10bd8:	cf 93       	push	r28
   10bda:	df 93       	push	r29
   10bdc:	ad b7       	in	r26, 0x3d	; 61
   10bde:	be b7       	in	r27, 0x3e	; 62
   10be0:	17 97       	sbiw	r26, 0x07	; 7
   10be2:	0f b6       	in	r0, 0x3f	; 63
   10be4:	f8 94       	cli
   10be6:	be bf       	out	0x3e, r27	; 62
   10be8:	0f be       	out	0x3f, r0	; 63
   10bea:	ad bf       	out	0x3d, r26	; 61
   10bec:	ec 01       	movw	r28, r24
   10bee:	88 30       	cpi	r24, 0x08	; 8
   10bf0:	91 05       	cpc	r25, r1
   10bf2:	68 f0       	brcs	.+26     	; 0x10c0e <gpib_enable_PPR+0x36>
   10bf4:	ed b7       	in	r30, 0x3d	; 61
   10bf6:	fe b7       	in	r31, 0x3e	; 62
   10bf8:	95 83       	std	Z+5, r25	; 0x05
   10bfa:	84 83       	std	Z+4, r24	; 0x04
   10bfc:	8b ea       	ldi	r24, 0xAB	; 171
   10bfe:	90 e1       	ldi	r25, 0x10	; 16
   10c00:	a0 e0       	ldi	r26, 0x00	; 0
   10c02:	81 83       	std	Z+1, r24	; 0x01
   10c04:	92 83       	std	Z+2, r25	; 0x02
   10c06:	a3 83       	std	Z+3, r26	; 0x03
   10c08:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10c0c:	15 c0       	rjmp	.+42     	; 0x10c38 <gpib_enable_PPR+0x60>
   10c0e:	c2 dd       	rcall	.-1148   	; 0x10794 <ppr_bit_set>
   10c10:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10c14:	81 ff       	sbrs	r24, 1
   10c16:	10 c0       	rjmp	.+32     	; 0x10c38 <gpib_enable_PPR+0x60>
   10c18:	a3 dd       	rcall	.-1210   	; 0x10760 <ppr_reg>
   10c1a:	90 e0       	ldi	r25, 0x00	; 0
   10c1c:	ed b7       	in	r30, 0x3d	; 61
   10c1e:	fe b7       	in	r31, 0x3e	; 62
   10c20:	97 83       	std	Z+7, r25	; 0x07
   10c22:	86 83       	std	Z+6, r24	; 0x06
   10c24:	d5 83       	std	Z+5, r29	; 0x05
   10c26:	c4 83       	std	Z+4, r28	; 0x04
   10c28:	80 e9       	ldi	r24, 0x90	; 144
   10c2a:	90 e1       	ldi	r25, 0x10	; 16
   10c2c:	a0 e0       	ldi	r26, 0x00	; 0
   10c2e:	81 83       	std	Z+1, r24	; 0x01
   10c30:	92 83       	std	Z+2, r25	; 0x02
   10c32:	a3 83       	std	Z+3, r26	; 0x03
   10c34:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10c38:	cd b7       	in	r28, 0x3d	; 61
   10c3a:	de b7       	in	r29, 0x3e	; 62
   10c3c:	27 96       	adiw	r28, 0x07	; 7
   10c3e:	e2 e0       	ldi	r30, 0x02	; 2
   10c40:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00010c44 <gpib_disable_PPR>:
   10c44:	cf 93       	push	r28
   10c46:	df 93       	push	r29
   10c48:	ad b7       	in	r26, 0x3d	; 61
   10c4a:	be b7       	in	r27, 0x3e	; 62
   10c4c:	17 97       	sbiw	r26, 0x07	; 7
   10c4e:	0f b6       	in	r0, 0x3f	; 63
   10c50:	f8 94       	cli
   10c52:	be bf       	out	0x3e, r27	; 62
   10c54:	0f be       	out	0x3f, r0	; 63
   10c56:	ad bf       	out	0x3d, r26	; 61
   10c58:	ec 01       	movw	r28, r24
   10c5a:	88 30       	cpi	r24, 0x08	; 8
   10c5c:	91 05       	cpc	r25, r1
   10c5e:	68 f0       	brcs	.+26     	; 0x10c7a <gpib_disable_PPR+0x36>
   10c60:	ed b7       	in	r30, 0x3d	; 61
   10c62:	fe b7       	in	r31, 0x3e	; 62
   10c64:	95 83       	std	Z+5, r25	; 0x05
   10c66:	84 83       	std	Z+4, r24	; 0x04
   10c68:	89 e6       	ldi	r24, 0x69	; 105
   10c6a:	90 e1       	ldi	r25, 0x10	; 16
   10c6c:	a0 e0       	ldi	r26, 0x00	; 0
   10c6e:	81 83       	std	Z+1, r24	; 0x01
   10c70:	92 83       	std	Z+2, r25	; 0x02
   10c72:	a3 83       	std	Z+3, r26	; 0x03
   10c74:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10c78:	15 c0       	rjmp	.+42     	; 0x10ca4 <gpib_disable_PPR+0x60>
   10c7a:	99 dd       	rcall	.-1230   	; 0x107ae <ppr_bit_clr>
   10c7c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10c80:	81 ff       	sbrs	r24, 1
   10c82:	10 c0       	rjmp	.+32     	; 0x10ca4 <gpib_disable_PPR+0x60>
   10c84:	6d dd       	rcall	.-1318   	; 0x10760 <ppr_reg>
   10c86:	90 e0       	ldi	r25, 0x00	; 0
   10c88:	ed b7       	in	r30, 0x3d	; 61
   10c8a:	fe b7       	in	r31, 0x3e	; 62
   10c8c:	97 83       	std	Z+7, r25	; 0x07
   10c8e:	86 83       	std	Z+6, r24	; 0x06
   10c90:	d5 83       	std	Z+5, r29	; 0x05
   10c92:	c4 83       	std	Z+4, r28	; 0x04
   10c94:	8e e4       	ldi	r24, 0x4E	; 78
   10c96:	90 e1       	ldi	r25, 0x10	; 16
   10c98:	a0 e0       	ldi	r26, 0x00	; 0
   10c9a:	81 83       	std	Z+1, r24	; 0x01
   10c9c:	92 83       	std	Z+2, r25	; 0x02
   10c9e:	a3 83       	std	Z+3, r26	; 0x03
   10ca0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10ca4:	cd b7       	in	r28, 0x3d	; 61
   10ca6:	de b7       	in	r29, 0x3e	; 62
   10ca8:	27 96       	adiw	r28, 0x07	; 7
   10caa:	e2 e0       	ldi	r30, 0x02	; 2
   10cac:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00010cb0 <gpib_assert_ifc>:
   10cb0:	00 d0       	rcall	.+0      	; 0x10cb2 <gpib_assert_ifc+0x2>
   10cb2:	1f 92       	push	r1
   10cb4:	5c 98       	cbi	0x0b, 4	; 11
   10cb6:	54 9a       	sbi	0x0a, 4	; 10
   10cb8:	6a ef       	ldi	r22, 0xFA	; 250
   10cba:	70 e0       	ldi	r23, 0x00	; 0
   10cbc:	80 e0       	ldi	r24, 0x00	; 0
   10cbe:	90 e0       	ldi	r25, 0x00	; 0
   10cc0:	0e 94 59 28 	call	0x50b2	; 0x50b2 <delayus>
   10cc4:	54 98       	cbi	0x0a, 4	; 10
   10cc6:	6a ef       	ldi	r22, 0xFA	; 250
   10cc8:	70 e0       	ldi	r23, 0x00	; 0
   10cca:	80 e0       	ldi	r24, 0x00	; 0
   10ccc:	90 e0       	ldi	r25, 0x00	; 0
   10cce:	0e 94 59 28 	call	0x50b2	; 0x50b2 <delayus>
   10cd2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10cd6:	82 ff       	sbrs	r24, 2
   10cd8:	0a c0       	rjmp	.+20     	; 0x10cee <gpib_assert_ifc+0x3e>
   10cda:	82 e4       	ldi	r24, 0x42	; 66
   10cdc:	90 e1       	ldi	r25, 0x10	; 16
   10cde:	a0 e0       	ldi	r26, 0x00	; 0
   10ce0:	ed b7       	in	r30, 0x3d	; 61
   10ce2:	fe b7       	in	r31, 0x3e	; 62
   10ce4:	81 83       	std	Z+1, r24	; 0x01
   10ce6:	92 83       	std	Z+2, r25	; 0x02
   10ce8:	a3 83       	std	Z+3, r26	; 0x03
   10cea:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10cee:	0f 90       	pop	r0
   10cf0:	0f 90       	pop	r0
   10cf2:	0f 90       	pop	r0
   10cf4:	08 95       	ret

00010cf6 <gpib_unread>:
   10cf6:	cf 93       	push	r28
   10cf8:	df 93       	push	r29
   10cfa:	00 d0       	rcall	.+0      	; 0x10cfc <gpib_unread+0x6>
   10cfc:	1f 92       	push	r1
   10cfe:	ec 01       	movw	r28, r24
   10d00:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <gpib_unread_f>
   10d04:	81 11       	cpse	r24, r1
   10d06:	08 c0       	rjmp	.+16     	; 0x10d18 <gpib_unread+0x22>
   10d08:	d0 93 d4 1e 	sts	0x1ED4, r29	; 0x801ed4 <gpib_unread_data+0x1>
   10d0c:	c0 93 d3 1e 	sts	0x1ED3, r28	; 0x801ed3 <gpib_unread_data>
   10d10:	81 e0       	ldi	r24, 0x01	; 1
   10d12:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <gpib_unread_f>
   10d16:	12 c0       	rjmp	.+36     	; 0x10d3c <gpib_unread+0x46>
   10d18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10d1c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10d20:	86 70       	andi	r24, 0x06	; 6
   10d22:	99 27       	eor	r25, r25
   10d24:	89 2b       	or	r24, r25
   10d26:	51 f0       	breq	.+20     	; 0x10d3c <gpib_unread+0x46>
   10d28:	84 e1       	ldi	r24, 0x14	; 20
   10d2a:	90 e1       	ldi	r25, 0x10	; 16
   10d2c:	a0 e0       	ldi	r26, 0x00	; 0
   10d2e:	ed b7       	in	r30, 0x3d	; 61
   10d30:	fe b7       	in	r31, 0x3e	; 62
   10d32:	81 83       	std	Z+1, r24	; 0x01
   10d34:	92 83       	std	Z+2, r25	; 0x02
   10d36:	a3 83       	std	Z+3, r26	; 0x03
   10d38:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10d3c:	ce 01       	movw	r24, r28
   10d3e:	cd b7       	in	r28, 0x3d	; 61
   10d40:	de b7       	in	r29, 0x3e	; 62
   10d42:	23 96       	adiw	r28, 0x03	; 3
   10d44:	e2 e0       	ldi	r30, 0x02	; 2
   10d46:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00010d4a <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10d4a:	11 b8       	out	0x01, r1	; 1
   10d4c:	80 b1       	in	r24, 0x00	; 0
   10d4e:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10d50:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10d52:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10d54:	08 95       	ret

00010d56 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10d56:	4e 99       	sbic	0x09, 6	; 9
   10d58:	03 c0       	rjmp	.+6      	; 0x10d60 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10d5a:	80 e0       	ldi	r24, 0x00	; 0
   10d5c:	94 e0       	ldi	r25, 0x04	; 4
   10d5e:	02 c0       	rjmp	.+4      	; 0x10d64 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10d60:	80 e0       	ldi	r24, 0x00	; 0
   10d62:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10d64:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10d66:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10d68:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10d6a:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10d6c:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10d6e:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10d70:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10d72:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10d74:	08 95       	ret

00010d76 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10d76:	19 99       	sbic	0x03, 1	; 3
   10d78:	03 c0       	rjmp	.+6      	; 0x10d80 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10d7a:	80 e0       	ldi	r24, 0x00	; 0
   10d7c:	90 e2       	ldi	r25, 0x20	; 32
   10d7e:	02 c0       	rjmp	.+4      	; 0x10d84 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10d80:	80 e0       	ldi	r24, 0x00	; 0
   10d82:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10d84:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10d86:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10d88:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10d8a:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10d8c:	08 95       	ret

00010d8e <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10d8e:	2f 92       	push	r2
   10d90:	3f 92       	push	r3
   10d92:	4f 92       	push	r4
   10d94:	6f 92       	push	r6
   10d96:	7f 92       	push	r7
   10d98:	8f 92       	push	r8
   10d9a:	cf 92       	push	r12
   10d9c:	df 92       	push	r13
   10d9e:	ef 92       	push	r14
   10da0:	1f 93       	push	r17
   10da2:	cf 93       	push	r28
   10da4:	df 93       	push	r29
   10da6:	cd b7       	in	r28, 0x3d	; 61
   10da8:	de b7       	in	r29, 0x3e	; 62
   10daa:	2f 97       	sbiw	r28, 0x0f	; 15
   10dac:	0f b6       	in	r0, 0x3f	; 63
   10dae:	f8 94       	cli
   10db0:	de bf       	out	0x3e, r29	; 62
   10db2:	0f be       	out	0x3f, r0	; 63
   10db4:	cd bf       	out	0x3d, r28	; 61
   10db6:	9f 87       	std	Y+15, r25	; 0x0f
   10db8:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

// Wait for DAV to be released before starting
// Read state for DAV
    gpib_bus_read_init(0);
   10dba:	80 e0       	ldi	r24, 0x00	; 0
   10dbc:	90 e0       	ldi	r25, 0x00	; 0
   10dbe:	8f de       	rcall	.-738    	; 0x10ade <gpib_bus_read_init>
// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10dc0:	64 ef       	ldi	r22, 0xF4	; 244
   10dc2:	71 e0       	ldi	r23, 0x01	; 1
   10dc4:	80 e0       	ldi	r24, 0x00	; 0
   10dc6:	90 e0       	ldi	r25, 0x00	; 0
   10dc8:	80 de       	rcall	.-768    	; 0x10aca <gpib_timeout_set>

// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10dca:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10dcc:	82 e8       	ldi	r24, 0x82	; 130
   10dce:	9f e0       	ldi	r25, 0x0F	; 15
   10dd0:	6c 01       	movw	r12, r24
   10dd2:	e1 2c       	mov	r14, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NDAC==1>\n");
   10dd4:	8c e9       	ldi	r24, 0x9C	; 156
   10dd6:	9f e0       	ldi	r25, 0x0F	; 15
   10dd8:	3c 01       	movw	r6, r24
   10dda:	81 2c       	mov	r8, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==0>\n");
   10ddc:	87 eb       	ldi	r24, 0xB7	; 183
   10dde:	9f e0       	ldi	r25, 0x0F	; 15
   10de0:	1c 01       	movw	r2, r24
   10de2:	41 2c       	mov	r4, r1
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10de4:	82 ed       	ldi	r24, 0xD2	; 210
   10de6:	9f e0       	ldi	r25, 0x0F	; 15
   10de8:	9c 01       	movw	r18, r24
   10dea:	40 e0       	ldi	r20, 0x00	; 0
   10dec:	28 87       	std	Y+8, r18	; 0x08
   10dee:	39 87       	std	Y+9, r19	; 0x09
   10df0:	4a 87       	std	Y+10, r20	; 0x0a
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10df2:	8a ef       	ldi	r24, 0xFA	; 250
   10df4:	9f e0       	ldi	r25, 0x0F	; 15
   10df6:	9c 01       	movw	r18, r24
   10df8:	40 e0       	ldi	r20, 0x00	; 0
   10dfa:	2b 87       	std	Y+11, r18	; 0x0b
   10dfc:	3c 87       	std	Y+12, r19	; 0x0c
   10dfe:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10e00:	80 e0       	ldi	r24, 0x00	; 0
   10e02:	0e 94 90 2a 	call	0x5520	; 0x5520 <uart_keyhit>
   10e06:	89 2b       	or	r24, r25
   10e08:	09 f0       	breq	.+2      	; 0x10e0c <gpib_write_byte+0x7e>
   10e0a:	1b c1       	rjmp	.+566    	; 0x11042 <gpib_write_byte+0x2b4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10e0c:	4c 99       	sbic	0x09, 4	; 9
   10e0e:	07 c0       	rjmp	.+14     	; 0x10e1e <gpib_write_byte+0x90>
        {
            ch |= IFC_FLAG;
   10e10:	8e 85       	ldd	r24, Y+14	; 0x0e
   10e12:	9f 85       	ldd	r25, Y+15	; 0x0f
   10e14:	90 61       	ori	r25, 0x10	; 16
   10e16:	9f 87       	std	Y+15, r25	; 0x0f
            gpib_bus_init();
   10e18:	8e 87       	std	Y+14, r24	; 0x0e
   10e1a:	84 de       	rcall	.-760    	; 0x10b24 <gpib_bus_init>
            break;
   10e1c:	12 c1       	rjmp	.+548    	; 0x11042 <gpib_write_byte+0x2b4>
        }

        switch(tx_state)
   10e1e:	81 2f       	mov	r24, r17
   10e20:	90 e0       	ldi	r25, 0x00	; 0
   10e22:	8a 30       	cpi	r24, 0x0A	; 10
   10e24:	91 05       	cpc	r25, r1
   10e26:	08 f0       	brcs	.+2      	; 0x10e2a <gpib_write_byte+0x9c>
   10e28:	02 c1       	rjmp	.+516    	; 0x1102e <gpib_write_byte+0x2a0>
   10e2a:	fc 01       	movw	r30, r24
   10e2c:	e3 54       	subi	r30, 0x43	; 67
   10e2e:	ff 4f       	sbci	r31, 0xFF	; 255
   10e30:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
        {
            case GPIB_TX_START:
// Wait for release of DAV and EOI before starting
// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10e34:	19 9b       	sbis	0x03, 1	; 3
   10e36:	12 c0       	rjmp	.+36     	; 0x10e5c <gpib_write_byte+0xce>
// We arive here in Read Mode - see gpib_bus_read_init(0);

// Switch GBIB driver direction to Write
// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
                    GPIB_IO_HI(TE);               // BUS OUT, DAV OUT, NRFD and NDAC IN
   10e38:	42 9a       	sbi	0x08, 2	; 8
   10e3a:	3a 9a       	sbi	0x07, 2	; 7
                    GPIB_IO_LOW(DC);              // ATN OUT, EOI OUT, SRQ IN
   10e3c:	44 98       	cbi	0x08, 4	; 8
   10e3e:	3c 9a       	sbi	0x07, 4	; 7
#endif
// My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10e40:	ee 85       	ldd	r30, Y+14	; 0x0e
   10e42:	ff 85       	ldd	r31, Y+15	; 0x0f
   10e44:	f2 ff       	sbrs	r31, 2
   10e46:	03 c0       	rjmp	.+6      	; 0x10e4e <gpib_write_byte+0xc0>
                        GPIB_IO_LOW(ATN);         // FYI: SS80 never sends ATN from a device
   10e48:	5e 98       	cbi	0x0b, 6	; 11
   10e4a:	56 9a       	sbi	0x0a, 6	; 10
   10e4c:	01 c0       	rjmp	.+2      	; 0x10e50 <gpib_write_byte+0xc2>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10e4e:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10e50:	64 ef       	ldi	r22, 0xF4	; 244
   10e52:	71 e0       	ldi	r23, 0x01	; 1
   10e54:	80 e0       	ldi	r24, 0x00	; 0
   10e56:	90 e0       	ldi	r25, 0x00	; 0
   10e58:	38 de       	rcall	.-912    	; 0x10aca <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10e5a:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e5c:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10e60:	88 23       	and	r24, r24
   10e62:	71 f2       	breq	.-100    	; 0x10e00 <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e64:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10e68:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10e6c:	86 70       	andi	r24, 0x06	; 6
   10e6e:	99 27       	eor	r25, r25
   10e70:	89 2b       	or	r24, r25
   10e72:	51 f1       	breq	.+84     	; 0x10ec8 <gpib_write_byte+0x13a>
                        printf("<BUS waiting for DAV==1>\n");
   10e74:	2b 85       	ldd	r18, Y+11	; 0x0b
   10e76:	3c 85       	ldd	r19, Y+12	; 0x0c
   10e78:	4d 85       	ldd	r20, Y+13	; 0x0d
   10e7a:	ed b7       	in	r30, 0x3d	; 61
   10e7c:	fe b7       	in	r31, 0x3e	; 62
   10e7e:	21 83       	std	Z+1, r18	; 0x01
   10e80:	32 83       	std	Z+2, r19	; 0x02
   10e82:	43 83       	std	Z+3, r20	; 0x03
   10e84:	1f c0       	rjmp	.+62     	; 0x10ec4 <gpib_write_byte+0x136>
                }
                break;

            case GPIB_TX_WAIT_READY:
// Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10e86:	4a 9b       	sbis	0x09, 2	; 9
   10e88:	08 c0       	rjmp	.+16     	; 0x10e9a <gpib_write_byte+0x10c>
   10e8a:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10e8c:	06 c0       	rjmp	.+12     	; 0x10e9a <gpib_write_byte+0x10c>
   10e8e:	64 ef       	ldi	r22, 0xF4	; 244
   10e90:	71 e0       	ldi	r23, 0x01	; 1
   10e92:	80 e0       	ldi	r24, 0x00	; 0
   10e94:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10e96:	19 de       	rcall	.-974    	; 0x10aca <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e98:	12 e0       	ldi	r17, 0x02	; 2
   10e9a:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10e9e:	88 23       	and	r24, r24
   10ea0:	09 f4       	brne	.+2      	; 0x10ea4 <gpib_write_byte+0x116>
                {
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ea2:	ae cf       	rjmp	.-164    	; 0x10e00 <gpib_write_byte+0x72>
   10ea4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10ea8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10eac:	86 70       	andi	r24, 0x06	; 6
   10eae:	99 27       	eor	r25, r25
   10eb0:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10eb2:	51 f0       	breq	.+20     	; 0x10ec8 <gpib_write_byte+0x13a>
   10eb4:	88 85       	ldd	r24, Y+8	; 0x08
   10eb6:	99 85       	ldd	r25, Y+9	; 0x09
   10eb8:	aa 85       	ldd	r26, Y+10	; 0x0a
   10eba:	ed b7       	in	r30, 0x3d	; 61
   10ebc:	fe b7       	in	r31, 0x3e	; 62
   10ebe:	81 83       	std	Z+1, r24	; 0x01
   10ec0:	92 83       	std	Z+2, r25	; 0x02
   10ec2:	a3 83       	std	Z+3, r26	; 0x03
   10ec4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10ec8:	2e 85       	ldd	r18, Y+14	; 0x0e
   10eca:	3f 85       	ldd	r19, Y+15	; 0x0f
   10ecc:	30 64       	ori	r19, 0x40	; 64
   10ece:	3f 87       	std	Y+15, r19	; 0x0f
   10ed0:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10ed2:	b5 c0       	rjmp	.+362    	; 0x1103e <gpib_write_byte+0x2b0>
   10ed4:	8e 85       	ldd	r24, Y+14	; 0x0e
   10ed6:	9f 85       	ldd	r25, Y+15	; 0x0f
   10ed8:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   10eda:	03 c0       	rjmp	.+6      	; 0x10ee2 <gpib_write_byte+0x154>
   10edc:	28 98       	cbi	0x05, 0	; 5
   10ede:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10ee0:	01 c0       	rjmp	.+2      	; 0x10ee4 <gpib_write_byte+0x156>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10ee2:	20 98       	cbi	0x04, 0	; 4
   10ee4:	8f ef       	ldi	r24, 0xFF	; 255
   10ee6:	81 b9       	out	0x01, r24	; 1
   10ee8:	8e 85       	ldd	r24, Y+14	; 0x0e
   10eea:	80 95       	com	r24
#if BOARD == 2
// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE);
   10eec:	82 b9       	out	0x02, r24	; 2
   10eee:	43 9a       	sbi	0x08, 3	; 8
   10ef0:	3b 9a       	sbi	0x07, 3	; 7
   10ef2:	9d e0       	ldi	r25, 0x0D	; 13
   10ef4:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10ef6:	f1 f7       	brne	.-4      	; 0x10ef4 <gpib_write_byte+0x166>
   10ef8:	00 00       	nop
   10efa:	64 ef       	ldi	r22, 0xF4	; 244
   10efc:	71 e0       	ldi	r23, 0x01	; 1
   10efe:	80 e0       	ldi	r24, 0x00	; 0
   10f00:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   10f02:	e3 dd       	rcall	.-1082   	; 0x10aca <gpib_timeout_set>
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10f04:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   10f06:	7c cf       	rjmp	.-264    	; 0x10e00 <gpib_write_byte+0x72>
   10f08:	29 98       	cbi	0x05, 1	; 5
   10f0a:	21 9a       	sbi	0x04, 1	; 4
   10f0c:	64 ef       	ldi	r22, 0xF4	; 244
   10f0e:	71 e0       	ldi	r23, 0x01	; 1
   10f10:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10f12:	90 e0       	ldi	r25, 0x00	; 0
   10f14:	da dd       	rcall	.-1100   	; 0x10aca <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   10f16:	14 e0       	ldi	r17, 0x04	; 4
   10f18:	73 cf       	rjmp	.-282    	; 0x10e00 <gpib_write_byte+0x72>
   10f1a:	4a 99       	sbic	0x09, 2	; 9
   10f1c:	07 c0       	rjmp	.+14     	; 0x10f2c <gpib_write_byte+0x19e>
   10f1e:	64 ef       	ldi	r22, 0xF4	; 244
   10f20:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10f22:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   10f24:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f26:	d1 dd       	rcall	.-1118   	; 0x10aca <gpib_timeout_set>
   10f28:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10f2a:	6a cf       	rjmp	.-300    	; 0x10e00 <gpib_write_byte+0x72>
   10f2c:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10f30:	88 23       	and	r24, r24
   10f32:	09 f4       	brne	.+2      	; 0x10f36 <gpib_write_byte+0x1a8>
   10f34:	65 cf       	rjmp	.-310    	; 0x10e00 <gpib_write_byte+0x72>
   10f36:	ee 85       	ldd	r30, Y+14	; 0x0e
   10f38:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f3a:	f0 64       	ori	r31, 0x40	; 64
   10f3c:	ff 87       	std	Y+15, r31	; 0x0f
   10f3e:	ee 87       	std	Y+14, r30	; 0x0e
   10f40:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10f44:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10f48:	86 70       	andi	r24, 0x06	; 6
   10f4a:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   10f4c:	89 2b       	or	r24, r25
   10f4e:	09 f4       	brne	.+2      	; 0x10f52 <gpib_write_byte+0x1c4>
   10f50:	76 c0       	rjmp	.+236    	; 0x1103e <gpib_write_byte+0x2b0>
   10f52:	ed b7       	in	r30, 0x3d	; 61
   10f54:	fe b7       	in	r31, 0x3e	; 62
   10f56:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10f58:	32 82       	std	Z+2, r3	; 0x02
   10f5a:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f5c:	43 c0       	rjmp	.+134    	; 0x10fe4 <gpib_write_byte+0x256>
   10f5e:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10f60:	6a c0       	rjmp	.+212    	; 0x11036 <gpib_write_byte+0x2a8>
   10f62:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10f66:	88 23       	and	r24, r24
   10f68:	09 f4       	brne	.+2      	; 0x10f6c <gpib_write_byte+0x1de>
   10f6a:	4a cf       	rjmp	.-364    	; 0x10e00 <gpib_write_byte+0x72>
   10f6c:	2e 85       	ldd	r18, Y+14	; 0x0e
   10f6e:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f70:	30 64       	ori	r19, 0x40	; 64
   10f72:	3f 87       	std	Y+15, r19	; 0x0f
   10f74:	2e 87       	std	Y+14, r18	; 0x0e
   10f76:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10f7a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10f7e:	86 70       	andi	r24, 0x06	; 6
   10f80:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   10f82:	89 2b       	or	r24, r25
   10f84:	09 f4       	brne	.+2      	; 0x10f88 <gpib_write_byte+0x1fa>
   10f86:	5b c0       	rjmp	.+182    	; 0x1103e <gpib_write_byte+0x2b0>
   10f88:	ed b7       	in	r30, 0x3d	; 61
   10f8a:	fe b7       	in	r31, 0x3e	; 62
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10f8c:	61 82       	std	Z+1, r6	; 0x01
   10f8e:	72 82       	std	Z+2, r7	; 0x02
   10f90:	83 82       	std	Z+3, r8	; 0x03
   10f92:	28 c0       	rjmp	.+80     	; 0x10fe4 <gpib_write_byte+0x256>
                GPIB_BUS_SETTLE();                // give some time

                gpib_bus_read_init(0);            // Free BUS, NOT busy
   10f94:	21 98       	cbi	0x04, 1	; 4
   10f96:	fd e0       	ldi	r31, 0x0D	; 13
   10f98:	fa 95       	dec	r31
   10f9a:	f1 f7       	brne	.-4      	; 0x10f98 <gpib_write_byte+0x20a>

                gpib_timeout_set(HTIMEOUT);
   10f9c:	00 00       	nop
   10f9e:	80 e0       	ldi	r24, 0x00	; 0
   10fa0:	90 e0       	ldi	r25, 0x00	; 0
   10fa2:	9d dd       	rcall	.-1222   	; 0x10ade <gpib_bus_read_init>
   10fa4:	64 ef       	ldi	r22, 0xF4	; 244
   10fa6:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10fa8:	80 e0       	ldi	r24, 0x00	; 0
                break;
   10faa:	90 e0       	ldi	r25, 0x00	; 0

/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10fac:	8e dd       	rcall	.-1252   	; 0x10aca <gpib_timeout_set>
   10fae:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fb0:	27 cf       	rjmp	.-434    	; 0x10e00 <gpib_write_byte+0x72>
   10fb2:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10fb4:	42 c0       	rjmp	.+132    	; 0x1103a <gpib_write_byte+0x2ac>
   10fb6:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10fba:	88 23       	and	r24, r24
   10fbc:	09 f4       	brne	.+2      	; 0x10fc0 <gpib_write_byte+0x232>
   10fbe:	20 cf       	rjmp	.-448    	; 0x10e00 <gpib_write_byte+0x72>
   10fc0:	2e 85       	ldd	r18, Y+14	; 0x0e
   10fc2:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fc4:	30 64       	ori	r19, 0x40	; 64
   10fc6:	3f 87       	std	Y+15, r19	; 0x0f
   10fc8:	2e 87       	std	Y+14, r18	; 0x0e
   10fca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10fce:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10fd2:	86 70       	andi	r24, 0x06	; 6
                        printf("<BUS waiting for DAV==1>\n");
   10fd4:	99 27       	eor	r25, r25
   10fd6:	89 2b       	or	r24, r25
   10fd8:	91 f1       	breq	.+100    	; 0x1103e <gpib_write_byte+0x2b0>
   10fda:	ed b7       	in	r30, 0x3d	; 61
   10fdc:	fe b7       	in	r31, 0x3e	; 62
   10fde:	c1 82       	std	Z+1, r12	; 0x01
   10fe0:	d2 82       	std	Z+2, r13	; 0x02
   10fe2:	e3 82       	std	Z+3, r14	; 0x03
            case GPIB_TX_FINISH:
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
                if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10fe4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   10fe8:	2a c0       	rjmp	.+84     	; 0x1103e <gpib_write_byte+0x2b0>
   10fea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10fee:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10ff2:	86 70       	andi	r24, 0x06	; 6
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10ff4:	99 27       	eor	r25, r25
   10ff6:	89 2b       	or	r24, r25
   10ff8:	b1 f0       	breq	.+44     	; 0x11026 <gpib_write_byte+0x298>
   10ffa:	89 b1       	in	r24, 0x09	; 9
   10ffc:	99 b1       	in	r25, 0x09	; 9
   10ffe:	93 fb       	bst	r25, 3
   11000:	99 27       	eor	r25, r25
   11002:	90 f9       	bld	r25, 0
   11004:	ed b7       	in	r30, 0x3d	; 61
   11006:	fe b7       	in	r31, 0x3e	; 62
   11008:	96 83       	std	Z+6, r25	; 0x06
   1100a:	17 82       	std	Z+7, r1	; 0x07
   1100c:	82 fb       	bst	r24, 2
   1100e:	88 27       	eor	r24, r24
   11010:	80 f9       	bld	r24, 0
   11012:	84 83       	std	Z+4, r24	; 0x04
   11014:	15 82       	std	Z+5, r1	; 0x05
   11016:	8f e6       	ldi	r24, 0x6F	; 111
   11018:	9f e0       	ldi	r25, 0x0F	; 15
   1101a:	a0 e0       	ldi	r26, 0x00	; 0
   1101c:	81 83       	std	Z+1, r24	; 0x01
// Free BUS, BUSY on error
                gpib_bus_read_init(1);
   1101e:	92 83       	std	Z+2, r25	; 0x02
   11020:	a3 83       	std	Z+3, r26	; 0x03
   11022:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                tx_state = GPIB_TX_DONE;
                break;
   11026:	81 e0       	ldi	r24, 0x01	; 1
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11028:	90 e0       	ldi	r25, 0x00	; 0
   1102a:	59 dd       	rcall	.-1358   	; 0x10ade <gpib_bus_read_init>
   1102c:	0a c0       	rjmp	.+20     	; 0x11042 <gpib_write_byte+0x2b4>
   1102e:	1a 30       	cpi	r17, 0x0A	; 10

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11030:	09 f0       	breq	.+2      	; 0x11034 <gpib_write_byte+0x2a6>
   11032:	e6 ce       	rjmp	.-564    	; 0x10e00 <gpib_write_byte+0x72>
/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   11034:	06 c0       	rjmp	.+12     	; 0x11042 <gpib_write_byte+0x2b4>
   11036:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11038:	e3 ce       	rjmp	.-570    	; 0x10e00 <gpib_write_byte+0x72>
   1103a:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   1103c:	e1 ce       	rjmp	.-574    	; 0x10e00 <gpib_write_byte+0x72>
   1103e:	19 e0       	ldi	r17, 0x09	; 9
   11040:	df ce       	rjmp	.-578    	; 0x10e00 <gpib_write_byte+0x72>
   11042:	8e 85       	ldd	r24, Y+14	; 0x0e
   11044:	9f 85       	ldd	r25, Y+15	; 0x0f
   11046:	2f 96       	adiw	r28, 0x0f	; 15
   11048:	0f b6       	in	r0, 0x3f	; 63
   1104a:	f8 94       	cli
   1104c:	de bf       	out	0x3e, r29	; 62
   1104e:	0f be       	out	0x3f, r0	; 63
   11050:	cd bf       	out	0x3d, r28	; 61
   11052:	df 91       	pop	r29
   11054:	cf 91       	pop	r28
   11056:	1f 91       	pop	r17
   11058:	ef 90       	pop	r14
   1105a:	df 90       	pop	r13
   1105c:	cf 90       	pop	r12
   1105e:	8f 90       	pop	r8
   11060:	7f 90       	pop	r7
   11062:	6f 90       	pop	r6
   11064:	4f 90       	pop	r4
   11066:	3f 90       	pop	r3
   11068:	2f 90       	pop	r2
   1106a:	08 95       	ret

0001106c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1106c:	cf 93       	push	r28
   1106e:	df 93       	push	r29
   11070:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11072:	89 2b       	or	r24, r25
   11074:	21 f4       	brne	.+8      	; 0x1107e <gpib_decode_header+0x12>
        fo = stdout;
   11076:	c0 91 a2 1c 	lds	r28, 0x1CA2	; 0x801ca2 <__iob+0x2>
   1107a:	d0 91 a3 1c 	lds	r29, 0x1CA3	; 0x801ca3 <__iob+0x3>

    fprintf(fo,"===========================================\n");
   1107e:	be 01       	movw	r22, r28
   11080:	83 ed       	ldi	r24, 0xD3	; 211
   11082:	9b e0       	ldi	r25, 0x0B	; 11
   11084:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11088:	be 01       	movw	r22, r28
   1108a:	80 e0       	ldi	r24, 0x00	; 0
   1108c:	9c e0       	ldi	r25, 0x0C	; 12
   1108e:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11092:	be 01       	movw	r22, r28
   11094:	80 e1       	ldi	r24, 0x10	; 16
   11096:	9c e0       	ldi	r25, 0x0C	; 12
   11098:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   1109c:	be 01       	movw	r22, r28
   1109e:	84 e2       	ldi	r24, 0x24	; 36
   110a0:	9c e0       	ldi	r25, 0x0C	; 12
   110a2:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   110a6:	be 01       	movw	r22, r28
   110a8:	87 e4       	ldi	r24, 0x47	; 71
   110aa:	9c e0       	ldi	r25, 0x0C	; 12
   110ac:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"     A = ATN\n");
   110b0:	be 01       	movw	r22, r28
   110b2:	81 e7       	ldi	r24, 0x71	; 113
   110b4:	9c e0       	ldi	r25, 0x0C	; 12
   110b6:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"      E = EOI\n");
   110ba:	be 01       	movw	r22, r28
   110bc:	8f e7       	ldi	r24, 0x7F	; 127
   110be:	9c e0       	ldi	r25, 0x0C	; 12
   110c0:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"       S = SRQ\n");
   110c4:	be 01       	movw	r22, r28
   110c6:	8e e8       	ldi	r24, 0x8E	; 142
   110c8:	9c e0       	ldi	r25, 0x0C	; 12
   110ca:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"        R = REN\n");
   110ce:	be 01       	movw	r22, r28
   110d0:	8e e9       	ldi	r24, 0x9E	; 158
   110d2:	9c e0       	ldi	r25, 0x0C	; 12
   110d4:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"         I = IFC\n");
   110d8:	be 01       	movw	r22, r28
   110da:	8f ea       	ldi	r24, 0xAF	; 175
   110dc:	9c e0       	ldi	r25, 0x0C	; 12
   110de:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   110e2:	be 01       	movw	r22, r28
   110e4:	81 ec       	ldi	r24, 0xC1	; 193
   110e6:	9c e0       	ldi	r25, 0x0C	; 12
   110e8:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   110ec:	be 01       	movw	r22, r28
   110ee:	83 ee       	ldi	r24, 0xE3	; 227
   110f0:	9c e0       	ldi	r25, 0x0C	; 12
   110f2:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   110f6:	be 01       	movw	r22, r28
   110f8:	8b ef       	ldi	r24, 0xFB	; 251
   110fa:	9c e0       	ldi	r25, 0x0C	; 12
   110fc:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11100:	be 01       	movw	r22, r28
   11102:	86 e1       	ldi	r24, 0x16	; 22
   11104:	9d e0       	ldi	r25, 0x0D	; 13
   11106:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <fputs>
}
   1110a:	df 91       	pop	r29
   1110c:	cf 91       	pop	r28
   1110e:	08 95       	ret

00011110 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11110:	a9 e8       	ldi	r26, 0x89	; 137
   11112:	b0 e0       	ldi	r27, 0x00	; 0
   11114:	ee e8       	ldi	r30, 0x8E	; 142
   11116:	f8 e8       	ldi	r31, 0x88	; 136
   11118:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
   1111c:	8c 01       	movw	r16, r24
   1111e:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11120:	1a 86       	std	Y+10, r1	; 0x0a
   11122:	4c 01       	movw	r8, r24
   11124:	88 24       	eor	r8, r8
   11126:	44 e0       	ldi	r20, 0x04	; 4
   11128:	94 22       	and	r9, r20
   1112a:	ce 01       	movw	r24, r28
   1112c:	0a 96       	adiw	r24, 0x0a	; 10
   1112e:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11130:	62 30       	cpi	r22, 0x02	; 2
   11132:	71 05       	cpc	r23, r1
   11134:	e8 f4       	brcc	.+58     	; 0x11170 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11136:	81 14       	cp	r8, r1
   11138:	91 04       	cpc	r9, r1
   1113a:	29 f4       	brne	.+10     	; 0x11146 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   1113c:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1113e:	90 ee       	ldi	r25, 0xE0	; 224
   11140:	90 0f       	add	r25, r16
   11142:	9f 35       	cpi	r25, 0x5F	; 95
   11144:	08 f0       	brcs	.+2      	; 0x11148 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11146:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11148:	90 e0       	ldi	r25, 0x00	; 0
   1114a:	ed b7       	in	r30, 0x3d	; 61
   1114c:	fe b7       	in	r31, 0x3e	; 62
   1114e:	91 87       	std	Z+9, r25	; 0x09
   11150:	80 87       	std	Z+8, r24	; 0x08
   11152:	c8 01       	movw	r24, r16
   11154:	99 27       	eor	r25, r25
   11156:	97 83       	std	Z+7, r25	; 0x07
   11158:	86 83       	std	Z+6, r24	; 0x06
   1115a:	86 e6       	ldi	r24, 0x66	; 102
   1115c:	9f e0       	ldi	r25, 0x0F	; 15
   1115e:	a0 e0       	ldi	r26, 0x00	; 0
   11160:	83 83       	std	Z+3, r24	; 0x03
   11162:	94 83       	std	Z+4, r25	; 0x04
   11164:	a5 83       	std	Z+5, r26	; 0x05
   11166:	f2 82       	std	Z+2, r15	; 0x02
   11168:	e1 82       	std	Z+1, r14	; 0x01
   1116a:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <sprintf_P>
   1116e:	0c c0       	rjmp	.+24     	; 0x11188 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   11170:	80 e6       	ldi	r24, 0x60	; 96
   11172:	9f e0       	ldi	r25, 0x0F	; 15
   11174:	a0 e0       	ldi	r26, 0x00	; 0
   11176:	ed b7       	in	r30, 0x3d	; 61
   11178:	fe b7       	in	r31, 0x3e	; 62
   1117a:	83 83       	std	Z+3, r24	; 0x03
   1117c:	94 83       	std	Z+4, r25	; 0x04
   1117e:	a5 83       	std	Z+5, r26	; 0x05
   11180:	f2 82       	std	Z+2, r15	; 0x02
   11182:	e1 82       	std	Z+1, r14	; 0x01
   11184:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <sprintf_P>
    }

    tmp = str + strlen(str);
   11188:	f7 01       	movw	r30, r14
   1118a:	01 90       	ld	r0, Z+
   1118c:	00 20       	and	r0, r0
   1118e:	e9 f7       	brne	.-6      	; 0x1118a <gpib_trace_display+0x7a>
   11190:	31 97       	sbiw	r30, 0x01	; 1
   11192:	cf 01       	movw	r24, r30
   11194:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11196:	81 14       	cp	r8, r1
   11198:	91 04       	cpc	r9, r1
   1119a:	11 f0       	breq	.+4      	; 0x111a0 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   1119c:	21 e4       	ldi	r18, 0x41	; 65
   1119e:	01 c0       	rjmp	.+2      	; 0x111a2 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   111a0:	2d e2       	ldi	r18, 0x2D	; 45
   111a2:	20 83       	st	Z, r18
   111a4:	dc 01       	movw	r26, r24
   111a6:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   111a8:	10 ff       	sbrs	r17, 0
   111aa:	02 c0       	rjmp	.+4      	; 0x111b0 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   111ac:	25 e4       	ldi	r18, 0x45	; 69
   111ae:	01 c0       	rjmp	.+2      	; 0x111b2 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   111b0:	2d e2       	ldi	r18, 0x2D	; 45
   111b2:	fc 01       	movw	r30, r24
   111b4:	20 83       	st	Z, r18
   111b6:	fd 01       	movw	r30, r26
   111b8:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   111ba:	11 ff       	sbrs	r17, 1
   111bc:	02 c0       	rjmp	.+4      	; 0x111c2 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   111be:	83 e5       	ldi	r24, 0x53	; 83
   111c0:	01 c0       	rjmp	.+2      	; 0x111c4 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   111c2:	8d e2       	ldi	r24, 0x2D	; 45
   111c4:	8c 93       	st	X, r24
   111c6:	df 01       	movw	r26, r30
   111c8:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   111ca:	13 ff       	sbrs	r17, 3
   111cc:	02 c0       	rjmp	.+4      	; 0x111d2 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   111ce:	82 e5       	ldi	r24, 0x52	; 82
   111d0:	01 c0       	rjmp	.+2      	; 0x111d4 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   111d2:	8d e2       	ldi	r24, 0x2D	; 45
   111d4:	80 83       	st	Z, r24
   111d6:	fd 01       	movw	r30, r26
   111d8:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   111da:	14 ff       	sbrs	r17, 4
   111dc:	02 c0       	rjmp	.+4      	; 0x111e2 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   111de:	89 e4       	ldi	r24, 0x49	; 73
   111e0:	01 c0       	rjmp	.+2      	; 0x111e4 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   111e2:	8d e2       	ldi	r24, 0x2D	; 45
   111e4:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   111e6:	a1 14       	cp	r10, r1
   111e8:	b1 04       	cpc	r11, r1
   111ea:	d1 f4       	brne	.+52     	; 0x11220 <gpib_trace_display+0x110>
   111ec:	df 01       	movw	r26, r30
   111ee:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   111f0:	15 ff       	sbrs	r17, 5
   111f2:	02 c0       	rjmp	.+4      	; 0x111f8 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   111f4:	80 e5       	ldi	r24, 0x50	; 80
   111f6:	01 c0       	rjmp	.+2      	; 0x111fa <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   111f8:	8d e2       	ldi	r24, 0x2D	; 45
   111fa:	80 83       	st	Z, r24
   111fc:	fd 01       	movw	r30, r26
   111fe:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11200:	16 ff       	sbrs	r17, 6
   11202:	02 c0       	rjmp	.+4      	; 0x11208 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11204:	84 e5       	ldi	r24, 0x54	; 84
   11206:	01 c0       	rjmp	.+2      	; 0x1120a <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11208:	8d e2       	ldi	r24, 0x2D	; 45
   1120a:	8c 93       	st	X, r24
   1120c:	cf 01       	movw	r24, r30
   1120e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11210:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11212:	17 ff       	sbrs	r17, 7
   11214:	02 c0       	rjmp	.+4      	; 0x1121a <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11216:	82 e4       	ldi	r24, 0x42	; 66
   11218:	01 c0       	rjmp	.+2      	; 0x1121c <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   1121a:	8d e2       	ldi	r24, 0x2D	; 45
   1121c:	80 83       	st	Z, r24
   1121e:	08 c0       	rjmp	.+16     	; 0x11230 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   11220:	8d e2       	ldi	r24, 0x2D	; 45
   11222:	80 83       	st	Z, r24
        *tmp++ = '-';
   11224:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11226:	6f 01       	movw	r12, r30
   11228:	43 e0       	ldi	r20, 0x03	; 3
   1122a:	c4 0e       	add	r12, r20
   1122c:	d1 1c       	adc	r13, r1
   1122e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11230:	f6 01       	movw	r30, r12
   11232:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11234:	f1 e0       	ldi	r31, 0x01	; 1
   11236:	af 1a       	sub	r10, r31
   11238:	b1 08       	sbc	r11, r1
   1123a:	42 e0       	ldi	r20, 0x02	; 2
   1123c:	a4 16       	cp	r10, r20
   1123e:	b1 04       	cpc	r11, r1
   11240:	f0 f4       	brcc	.+60     	; 0x1127e <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11242:	15 ff       	sbrs	r17, 5
   11244:	03 c0       	rjmp	.+6      	; 0x1124c <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11246:	63 e3       	ldi	r22, 0x33	; 51
   11248:	7d e0       	ldi	r23, 0x0D	; 13
   1124a:	02 c0       	rjmp	.+4      	; 0x11250 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   1124c:	67 e3       	ldi	r22, 0x37	; 55
   1124e:	74 e0       	ldi	r23, 0x04	; 4
   11250:	c7 01       	movw	r24, r14
   11252:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
        if(status & NRFD_FLAG)
   11256:	16 ff       	sbrs	r17, 6
   11258:	03 c0       	rjmp	.+6      	; 0x11260 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   1125a:	69 e3       	ldi	r22, 0x39	; 57
   1125c:	7d e0       	ldi	r23, 0x0D	; 13
   1125e:	02 c0       	rjmp	.+4      	; 0x11264 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11260:	67 e3       	ldi	r22, 0x37	; 55
   11262:	74 e0       	ldi	r23, 0x04	; 4
   11264:	c7 01       	movw	r24, r14
   11266:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
        if(status & NDAC_FLAG)
   1126a:	17 ff       	sbrs	r17, 7
   1126c:	03 c0       	rjmp	.+6      	; 0x11274 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1126e:	6f e3       	ldi	r22, 0x3F	; 63
   11270:	7d e0       	ldi	r23, 0x0D	; 13
   11272:	02 c0       	rjmp	.+4      	; 0x11278 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11274:	67 e3       	ldi	r22, 0x37	; 55
   11276:	74 e0       	ldi	r23, 0x04	; 4
   11278:	c7 01       	movw	r24, r14
   1127a:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
    }

    if( (status & ATN_FLAG) )
   1127e:	81 14       	cp	r8, r1
   11280:	91 04       	cpc	r9, r1
   11282:	09 f4       	brne	.+2      	; 0x11286 <gpib_trace_display+0x176>
   11284:	5a c0       	rjmp	.+180    	; 0x1133a <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11286:	c8 01       	movw	r24, r16
   11288:	8f 77       	andi	r24, 0x7F	; 127
   1128a:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   1128c:	9c 01       	movw	r18, r24
   1128e:	20 52       	subi	r18, 0x20	; 32
   11290:	31 09       	sbc	r19, r1
   11292:	2f 31       	cpi	r18, 0x1F	; 31
   11294:	31 05       	cpc	r19, r1
   11296:	48 f4       	brcc	.+18     	; 0x112aa <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11298:	0f 71       	andi	r16, 0x1F	; 31
   1129a:	11 27       	eor	r17, r17
   1129c:	ed b7       	in	r30, 0x3d	; 61
   1129e:	fe b7       	in	r31, 0x3e	; 62
   112a0:	17 83       	std	Z+7, r17	; 0x07
   112a2:	06 83       	std	Z+6, r16	; 0x06
   112a4:	85 e5       	ldi	r24, 0x55	; 85
   112a6:	9f e0       	ldi	r25, 0x0F	; 15
   112a8:	0e c0       	rjmp	.+28     	; 0x112c6 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   112aa:	9c 01       	movw	r18, r24
   112ac:	20 54       	subi	r18, 0x40	; 64
   112ae:	31 09       	sbc	r19, r1
   112b0:	2f 30       	cpi	r18, 0x0F	; 15
   112b2:	31 05       	cpc	r19, r1
   112b4:	88 f4       	brcc	.+34     	; 0x112d8 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   112b6:	0f 71       	andi	r16, 0x1F	; 31
   112b8:	11 27       	eor	r17, r17
   112ba:	ed b7       	in	r30, 0x3d	; 61
   112bc:	fe b7       	in	r31, 0x3e	; 62
   112be:	17 83       	std	Z+7, r17	; 0x07
   112c0:	06 83       	std	Z+6, r16	; 0x06
   112c2:	8a e4       	ldi	r24, 0x4A	; 74
   112c4:	9f e0       	ldi	r25, 0x0F	; 15
   112c6:	a0 e0       	ldi	r26, 0x00	; 0
   112c8:	83 83       	std	Z+3, r24	; 0x03
   112ca:	94 83       	std	Z+4, r25	; 0x04
   112cc:	a5 83       	std	Z+5, r26	; 0x05
   112ce:	d2 82       	std	Z+2, r13	; 0x02
   112d0:	c1 82       	std	Z+1, r12	; 0x01
   112d2:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <sprintf_P>
   112d6:	31 c0       	rjmp	.+98     	; 0x1133a <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   112d8:	9c 01       	movw	r18, r24
   112da:	20 56       	subi	r18, 0x60	; 96
   112dc:	31 09       	sbc	r19, r1
   112de:	20 31       	cpi	r18, 0x10	; 16
   112e0:	31 05       	cpc	r19, r1
   112e2:	28 f0       	brcs	.+10     	; 0x112ee <gpib_trace_display+0x1de>
   112e4:	ef e8       	ldi	r30, 0x8F	; 143
   112e6:	f1 e0       	ldi	r31, 0x01	; 1
   112e8:	00 e0       	ldi	r16, 0x00	; 0
   112ea:	10 e0       	ldi	r17, 0x00	; 0
   112ec:	0b c0       	rjmp	.+22     	; 0x11304 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   112ee:	0f 71       	andi	r16, 0x1F	; 31
   112f0:	11 27       	eor	r17, r17
   112f2:	ed b7       	in	r30, 0x3d	; 61
   112f4:	fe b7       	in	r31, 0x3e	; 62
   112f6:	17 83       	std	Z+7, r17	; 0x07
   112f8:	06 83       	std	Z+6, r16	; 0x06
   112fa:	8f e3       	ldi	r24, 0x3F	; 63
   112fc:	9f e0       	ldi	r25, 0x0F	; 15
   112fe:	e3 cf       	rjmp	.-58     	; 0x112c6 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11300:	0f 5f       	subi	r16, 0xFF	; 255
   11302:	1f 4f       	sbci	r17, 0xFF	; 255
   11304:	20 81       	ld	r18, Z
   11306:	31 81       	ldd	r19, Z+1	; 0x01
   11308:	2f 3f       	cpi	r18, 0xFF	; 255
   1130a:	4f ef       	ldi	r20, 0xFF	; 255
   1130c:	34 07       	cpc	r19, r20
   1130e:	a9 f0       	breq	.+42     	; 0x1133a <gpib_trace_display+0x22a>
   11310:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11312:	82 17       	cp	r24, r18
   11314:	93 07       	cpc	r25, r19
   11316:	a1 f7       	brne	.-24     	; 0x11300 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11318:	6b e3       	ldi	r22, 0x3B	; 59
   1131a:	74 e0       	ldi	r23, 0x04	; 4
   1131c:	c6 01       	movw	r24, r12
   1131e:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11322:	f8 01       	movw	r30, r16
   11324:	ee 0f       	add	r30, r30
   11326:	ff 1f       	adc	r31, r31
   11328:	ee 0f       	add	r30, r30
   1132a:	ff 1f       	adc	r31, r31
   1132c:	e1 57       	subi	r30, 0x71	; 113
   1132e:	fe 4f       	sbci	r31, 0xFE	; 254
   11330:	62 81       	ldd	r22, Z+2	; 0x02
   11332:	73 81       	ldd	r23, Z+3	; 0x03
   11334:	c6 01       	movw	r24, r12
   11336:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1133a:	20 91 48 19 	lds	r18, 0x1948	; 0x801948 <gpib_log_fp>
   1133e:	30 91 49 19 	lds	r19, 0x1949	; 0x801949 <gpib_log_fp+0x1>
   11342:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <__iob+0x2>
   11346:	90 91 a3 1c 	lds	r25, 0x1CA3	; 0x801ca3 <__iob+0x3>
   1134a:	23 2b       	or	r18, r19
   1134c:	21 f4       	brne	.+8      	; 0x11356 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1134e:	90 93 49 19 	sts	0x1949, r25	; 0x801949 <gpib_log_fp+0x1>
   11352:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11356:	20 91 48 19 	lds	r18, 0x1948	; 0x801948 <gpib_log_fp>
   1135a:	30 91 49 19 	lds	r19, 0x1949	; 0x801949 <gpib_log_fp+0x1>
   1135e:	82 17       	cp	r24, r18
   11360:	93 07       	cpc	r25, r19
   11362:	19 f0       	breq	.+6      	; 0x1136a <gpib_trace_display+0x25a>
        puts(str);
   11364:	c7 01       	movw	r24, r14
   11366:	0e 94 74 76 	call	0xece8	; 0xece8 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1136a:	ed b7       	in	r30, 0x3d	; 61
   1136c:	fe b7       	in	r31, 0x3e	; 62
   1136e:	f6 82       	std	Z+6, r15	; 0x06
   11370:	e5 82       	std	Z+5, r14	; 0x05
   11372:	85 e4       	ldi	r24, 0x45	; 69
   11374:	9d e0       	ldi	r25, 0x0D	; 13
   11376:	94 83       	std	Z+4, r25	; 0x04
   11378:	83 83       	std	Z+3, r24	; 0x03
   1137a:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <gpib_log_fp>
   1137e:	90 91 49 19 	lds	r25, 0x1949	; 0x801949 <gpib_log_fp+0x1>
   11382:	92 83       	std	Z+2, r25	; 0x02
   11384:	81 83       	std	Z+1, r24	; 0x01
   11386:	0e 94 1c 7e 	call	0xfc38	; 0xfc38 <fprintf>
}
   1138a:	c7 57       	subi	r28, 0x77	; 119
   1138c:	df 4f       	sbci	r29, 0xFF	; 255
   1138e:	ec e0       	ldi	r30, 0x0C	; 12
   11390:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

00011394 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11394:	af 92       	push	r10
   11396:	bf 92       	push	r11
   11398:	cf 92       	push	r12
   1139a:	df 92       	push	r13
   1139c:	ff 92       	push	r15
   1139e:	0f 93       	push	r16
   113a0:	1f 93       	push	r17
   113a2:	cf 93       	push	r28
   113a4:	df 93       	push	r29

    ch = 0;
    control_last = 0;

// If we have an unread state it has already been traced!
    if(gpib_unread_f)
   113a6:	20 91 47 19 	lds	r18, 0x1947	; 0x801947 <gpib_unread_f>
   113aa:	22 23       	and	r18, r18
   113ac:	39 f0       	breq	.+14     	; 0x113bc <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   113ae:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <gpib_unread_f>
        return(gpib_unread_data);
   113b2:	80 91 d3 1e 	lds	r24, 0x1ED3	; 0x801ed3 <gpib_unread_data>
   113b6:	90 91 d4 1e 	lds	r25, 0x1ED4	; 0x801ed4 <gpib_unread_data+0x1>
   113ba:	b8 c0       	rjmp	.+368    	; 0x1152c <gpib_read_byte+0x198>
   113bc:	6c 01       	movw	r12, r24
    }

    gpib_bus_read_init(1);                        // Busy until we are ready
   113be:	81 e0       	ldi	r24, 0x01	; 1
   113c0:	90 e0       	ldi	r25, 0x00	; 0
   113c2:	8d db       	rcall	.-2278   	; 0x10ade <gpib_bus_read_init>

///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   113c4:	c1 14       	cp	r12, r1
   113c6:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   113c8:	51 f0       	breq	.+20     	; 0x113de <gpib_read_byte+0x4a>
   113ca:	c5 dc       	rcall	.-1654   	; 0x10d56 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   113cc:	8c 01       	movw	r16, r24
   113ce:	d3 dc       	rcall	.-1626   	; 0x10d76 <gpib_handshake_pin_read>
   113d0:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   113d2:	19 2b       	or	r17, r25
   113d4:	62 e0       	ldi	r22, 0x02	; 2
   113d6:	70 e0       	ldi	r23, 0x00	; 0
   113d8:	c8 01       	movw	r24, r16
   113da:	9a de       	rcall	.-716    	; 0x11110 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   113dc:	02 c0       	rjmp	.+4      	; 0x113e2 <gpib_read_byte+0x4e>
   113de:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   113e0:	10 e0       	ldi	r17, 0x00	; 0
   113e2:	f1 2c       	mov	r15, r1
   113e4:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   113e6:	d0 e0       	ldi	r29, 0x00	; 0
   113e8:	80 e0       	ldi	r24, 0x00	; 0
   113ea:	0e 94 90 2a 	call	0x5520	; 0x5520 <uart_keyhit>
   113ee:	89 2b       	or	r24, r25
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   113f0:	09 f0       	breq	.+2      	; 0x113f4 <gpib_read_byte+0x60>
   113f2:	78 c0       	rjmp	.+240    	; 0x114e4 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   113f4:	4c 99       	sbic	0x09, 4	; 9
            gpib_bus_init();
   113f6:	03 c0       	rjmp	.+6      	; 0x113fe <gpib_read_byte+0x6a>
   113f8:	d0 61       	ori	r29, 0x10	; 16
   113fa:	94 db       	rcall	.-2264   	; 0x10b24 <gpib_bus_init>
            break;
        }

        switch(rx_state)
   113fc:	73 c0       	rjmp	.+230    	; 0x114e4 <gpib_read_byte+0x150>
   113fe:	8f 2d       	mov	r24, r15
   11400:	90 e0       	ldi	r25, 0x00	; 0
   11402:	89 30       	cpi	r24, 0x09	; 9
   11404:	91 05       	cpc	r25, r1
   11406:	08 f0       	brcs	.+2      	; 0x1140a <gpib_read_byte+0x76>
   11408:	51 c0       	rjmp	.+162    	; 0x114ac <gpib_read_byte+0x118>
   1140a:	fc 01       	movw	r30, r24
   1140c:	e9 53       	subi	r30, 0x39	; 57
   1140e:	ff 4f       	sbci	r31, 0xFF	; 255
   11410:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
   11414:	52 98       	cbi	0x0a, 2	; 10
   11416:	8d e0       	ldi	r24, 0x0D	; 13
   11418:	8a 95       	dec	r24
   1141a:	f1 f7       	brne	.-4      	; 0x11418 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1141c:	00 00       	nop
   1141e:	ff 24       	eor	r15, r15
   11420:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11422:	7f c0       	rjmp	.+254    	; 0x11522 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11424:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   11426:	7d c0       	rjmp	.+250    	; 0x11522 <gpib_read_byte+0x18e>

///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11428:	62 e0       	ldi	r22, 0x02	; 2
   1142a:	f6 2e       	mov	r15, r22
   1142c:	7a c0       	rjmp	.+244    	; 0x11522 <gpib_read_byte+0x18e>
   1142e:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11430:	52 9a       	sbi	0x0a, 2	; 10
   11432:	8b dc       	rcall	.-1770   	; 0x10d4a <gpib_bus_read>
   11434:	a8 2e       	mov	r10, r24
   11436:	b1 2c       	mov	r11, r1
                ch |= control_last;
   11438:	8e dc       	rcall	.-1764   	; 0x10d56 <gpib_control_pin_read>
   1143a:	8c 01       	movw	r16, r24

                if(trace)
   1143c:	c8 2b       	or	r28, r24
   1143e:	d9 2b       	or	r29, r25
   11440:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11442:	db 29       	or	r29, r11
   11444:	c1 14       	cp	r12, r1
   11446:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11448:	49 f0       	breq	.+18     	; 0x1145c <gpib_read_byte+0xc8>
   1144a:	95 dc       	rcall	.-1750   	; 0x10d76 <gpib_handshake_pin_read>
   1144c:	08 2b       	or	r16, r24
   1144e:	19 2b       	or	r17, r25
   11450:	61 e0       	ldi	r22, 0x01	; 1
   11452:	70 e0       	ldi	r23, 0x00	; 0
   11454:	c5 01       	movw	r24, r10
   11456:	80 2b       	or	r24, r16
   11458:	91 2b       	or	r25, r17
   1145a:	5a de       	rcall	.-844    	; 0x11110 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   1145c:	53 98       	cbi	0x0a, 3	; 10
   1145e:	8d e0       	ldi	r24, 0x0D	; 13
   11460:	8a 95       	dec	r24
   11462:	f1 f7       	brne	.-4      	; 0x11460 <gpib_read_byte+0xcc>
   11464:	00 00       	nop
#if BOARD == 2
/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11466:	64 ef       	ldi	r22, 0xF4	; 244
   11468:	71 e0       	ldi	r23, 0x01	; 1
   1146a:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   1146c:	90 e0       	ldi	r25, 0x00	; 0
   1146e:	2d db       	rcall	.-2470   	; 0x10aca <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11470:	54 e0       	ldi	r21, 0x04	; 4
   11472:	f5 2e       	mov	r15, r21
   11474:	56 c0       	rjmp	.+172    	; 0x11522 <gpib_read_byte+0x18e>
   11476:	4b 9b       	sbis	0x09, 3	; 9
   11478:	0c c0       	rjmp	.+24     	; 0x11492 <gpib_read_byte+0xfe>
   1147a:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1147c:	71 e0       	ldi	r23, 0x01	; 1
   1147e:	80 e0       	ldi	r24, 0x00	; 0
   11480:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11482:	23 db       	rcall	.-2490   	; 0x10aca <gpib_timeout_set>
   11484:	44 e0       	ldi	r20, 0x04	; 4
                {
                    rx_state = GPIB_RX_DAV_IS_HI;
   11486:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11488:	04 c0       	rjmp	.+8      	; 0x11492 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
                {
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   1148a:	19 9b       	sbis	0x03, 1	; 3
   1148c:	02 c0       	rjmp	.+4      	; 0x11492 <gpib_read_byte+0xfe>
   1148e:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   11490:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   11492:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <gpib_timer+0x8>
   11496:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
   11498:	09 f4       	brne	.+2      	; 0x1149c <gpib_read_byte+0x108>
   1149a:	43 c0       	rjmp	.+134    	; 0x11522 <gpib_read_byte+0x18e>
   1149c:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   1149e:	27 e0       	ldi	r18, 0x07	; 7
   114a0:	f2 2e       	mov	r15, r18
   114a2:	3f c0       	rjmp	.+126    	; 0x11522 <gpib_read_byte+0x18e>
   114a4:	81 e0       	ldi	r24, 0x01	; 1
   114a6:	90 e0       	ldi	r25, 0x00	; 0
   114a8:	1a db       	rcall	.-2508   	; 0x10ade <gpib_bus_read_init>
   114aa:	04 c0       	rjmp	.+8      	; 0x114b4 <gpib_read_byte+0x120>
   114ac:	c1 14       	cp	r12, r1
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   114ae:	d1 04       	cpc	r13, r1
   114b0:	99 f0       	breq	.+38     	; 0x114d8 <gpib_read_byte+0x144>
   114b2:	05 c0       	rjmp	.+10     	; 0x114be <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   114b4:	c1 14       	cp	r12, r1
   114b6:	d1 04       	cpc	r13, r1
   114b8:	a9 f0       	breq	.+42     	; 0x114e4 <gpib_read_byte+0x150>
   114ba:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   114bc:	f9 2e       	mov	r15, r25
   114be:	4b dc       	rcall	.-1898   	; 0x10d56 <gpib_control_pin_read>
   114c0:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   114c2:	59 dc       	rcall	.-1870   	; 0x10d76 <gpib_handshake_pin_read>
   114c4:	a8 2a       	or	r10, r24
   114c6:	b9 2a       	or	r11, r25
   114c8:	a0 16       	cp	r10, r16
   114ca:	b1 06       	cpc	r11, r17
   114cc:	31 f0       	breq	.+12     	; 0x114da <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   114ce:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   114d0:	70 e0       	ldi	r23, 0x00	; 0
   114d2:	c5 01       	movw	r24, r10
   114d4:	1d de       	rcall	.-966    	; 0x11110 <gpib_trace_display>
   114d6:	01 c0       	rjmp	.+2      	; 0x114da <gpib_read_byte+0x146>
   114d8:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   114da:	88 e0       	ldi	r24, 0x08	; 8
   114dc:	f8 16       	cp	r15, r24
   114de:	11 f0       	breq	.+4      	; 0x114e4 <gpib_read_byte+0x150>
   114e0:	85 01       	movw	r16, r10
   114e2:	82 cf       	rjmp	.-252    	; 0x113e8 <gpib_read_byte+0x54>
   114e4:	80 91 cd 1e 	lds	r24, 0x1ECD	; 0x801ecd <current>
   114e8:	90 91 ce 1e 	lds	r25, 0x1ECE	; 0x801ece <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   114ec:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <lastcmd+0x1>
   114f0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <lastcmd>
   114f4:	ce 01       	movw	r24, r28
   114f6:	88 27       	eor	r24, r24
        current = 0;
   114f8:	90 7d       	andi	r25, 0xD0	; 208
   114fa:	89 2b       	or	r24, r25
   114fc:	11 f4       	brne	.+4      	; 0x11502 <gpib_read_byte+0x16e>
   114fe:	d2 fd       	sbrc	r29, 2
   11500:	05 c0       	rjmp	.+10     	; 0x1150c <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   11502:	10 92 ce 1e 	sts	0x1ECE, r1	; 0x801ece <current+0x1>
   11506:	10 92 cd 1e 	sts	0x1ECD, r1	; 0x801ecd <current>
   1150a:	07 c0       	rjmp	.+14     	; 0x1151a <gpib_read_byte+0x186>
   1150c:	ce 01       	movw	r24, r28
   1150e:	8f 77       	andi	r24, 0x7F	; 127
   11510:	99 27       	eor	r25, r25
   11512:	90 93 ce 1e 	sts	0x1ECE, r25	; 0x801ece <current+0x1>
                }
                break;

///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   11516:	80 93 cd 1e 	sts	0x1ECD, r24	; 0x801ecd <current>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   1151a:	ce 01       	movw	r24, r28
   1151c:	07 c0       	rjmp	.+14     	; 0x1152c <gpib_read_byte+0x198>
   1151e:	86 e0       	ldi	r24, 0x06	; 6
   11520:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11522:	c1 14       	cp	r12, r1
   11524:	d1 04       	cpc	r13, r1
   11526:	09 f4       	brne	.+2      	; 0x1152a <gpib_read_byte+0x196>
   11528:	5f cf       	rjmp	.-322    	; 0x113e8 <gpib_read_byte+0x54>
   1152a:	c9 cf       	rjmp	.-110    	; 0x114be <gpib_read_byte+0x12a>
   1152c:	df 91       	pop	r29
   1152e:	cf 91       	pop	r28
   11530:	1f 91       	pop	r17
   11532:	0f 91       	pop	r16
   11534:	ff 90       	pop	r15
   11536:	df 90       	pop	r13
   11538:	cf 90       	pop	r12
   1153a:	bf 90       	pop	r11
   1153c:	af 90       	pop	r10
   1153e:	08 95       	ret

00011540 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11540:	60 e0       	ldi	r22, 0x00	; 0
   11542:	70 e0       	ldi	r23, 0x00	; 0
   11544:	e5 cd       	rjmp	.-1078   	; 0x11110 <gpib_trace_display>
   11546:	08 95       	ret

00011548 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11548:	a7 e0       	ldi	r26, 0x07	; 7
   1154a:	b0 e0       	ldi	r27, 0x00	; 0
   1154c:	ea ea       	ldi	r30, 0xAA	; 170
   1154e:	fa e8       	ldi	r31, 0x8A	; 138
   11550:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
   11554:	5b 01       	movw	r10, r22
   11556:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11558:	fa 01       	movw	r30, r20
   1155a:	20 81       	ld	r18, Z
   1155c:	31 81       	ldd	r19, Z+1	; 0x01
   1155e:	22 27       	eor	r18, r18
   11560:	31 83       	std	Z+1, r19	; 0x01
   11562:	20 83       	st	Z, r18

    if(!size)
   11564:	67 2b       	or	r22, r23
   11566:	21 f0       	breq	.+8      	; 0x11570 <gpib_read_str+0x28>
   11568:	7c 01       	movw	r14, r24
   1156a:	00 e0       	ldi	r16, 0x00	; 0
   1156c:	10 e0       	ldi	r17, 0x00	; 0
   1156e:	28 c0       	rjmp	.+80     	; 0x115c0 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11570:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11574:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11578:	82 72       	andi	r24, 0x22	; 34
   1157a:	91 70       	andi	r25, 0x01	; 1
   1157c:	89 2b       	or	r24, r25
   1157e:	09 f4       	brne	.+2      	; 0x11582 <gpib_read_str+0x3a>
   11580:	7c c0       	rjmp	.+248    	; 0x1167a <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11582:	86 e2       	ldi	r24, 0x26	; 38
   11584:	9f e0       	ldi	r25, 0x0F	; 15
   11586:	a0 e0       	ldi	r26, 0x00	; 0
   11588:	ed b7       	in	r30, 0x3d	; 61
   1158a:	fe b7       	in	r31, 0x3e	; 62
   1158c:	81 83       	std	Z+1, r24	; 0x01
   1158e:	92 83       	std	Z+2, r25	; 0x02
   11590:	a3 83       	std	Z+3, r26	; 0x03
   11592:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   11596:	71 c0       	rjmp	.+226    	; 0x1167a <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11598:	8c 27       	eor	r24, r28
   1159a:	9d 27       	eor	r25, r29
   1159c:	92 fd       	sbrc	r25, 2
   1159e:	2e c0       	rjmp	.+92     	; 0x115fc <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   115a0:	ce 01       	movw	r24, r28
   115a2:	88 27       	eor	r24, r24
   115a4:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   115a6:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   115a8:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   115aa:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   115ac:	f7 01       	movw	r30, r14
   115ae:	20 83       	st	Z, r18
        ++ind;
   115b0:	0f 5f       	subi	r16, 0xFF	; 255
   115b2:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   115b4:	89 2b       	or	r24, r25
   115b6:	09 f4       	brne	.+2      	; 0x115ba <gpib_read_str+0x72>
   115b8:	3c c0       	rjmp	.+120    	; 0x11632 <gpib_read_str+0xea>
   115ba:	ff ef       	ldi	r31, 0xFF	; 255
   115bc:	ef 1a       	sub	r14, r31
   115be:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   115c0:	0a 15       	cp	r16, r10
   115c2:	1b 05       	cpc	r17, r11
   115c4:	0c f0       	brlt	.+2      	; 0x115c8 <gpib_read_str+0x80>
   115c6:	3f c0       	rjmp	.+126    	; 0x11646 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   115c8:	80 e0       	ldi	r24, 0x00	; 0
   115ca:	90 e0       	ldi	r25, 0x00	; 0
   115cc:	e3 de       	rcall	.-570    	; 0x11394 <gpib_read_byte>
   115ce:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   115d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   115d4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   115d8:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   115da:	02 c0       	rjmp	.+4      	; 0x115e0 <gpib_read_str+0x98>
   115dc:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   115de:	b0 df       	rcall	.-160    	; 0x11540 <gpib_decode>
   115e0:	9e 01       	movw	r18, r28
   115e2:	22 27       	eor	r18, r18
   115e4:	30 7d       	andi	r19, 0xD0	; 208
   115e6:	f6 01       	movw	r30, r12
   115e8:	80 81       	ld	r24, Z
   115ea:	91 81       	ldd	r25, Z+1	; 0x01
   115ec:	21 15       	cp	r18, r1
   115ee:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   115f0:	99 f2       	breq	.-90     	; 0x11598 <gpib_read_str+0x50>
   115f2:	82 2b       	or	r24, r18
   115f4:	93 2b       	or	r25, r19
   115f6:	91 83       	std	Z+1, r25	; 0x01
            break;
   115f8:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   115fa:	28 c0       	rjmp	.+80     	; 0x1164c <gpib_read_str+0x104>
   115fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11600:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11604:	82 72       	andi	r24, 0x22	; 34
   11606:	91 70       	andi	r25, 0x01	; 1
   11608:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   1160a:	81 f0       	breq	.+32     	; 0x1162c <gpib_read_str+0xe4>
   1160c:	ce 01       	movw	r24, r28
   1160e:	99 27       	eor	r25, r25
   11610:	ed b7       	in	r30, 0x3d	; 61
   11612:	fe b7       	in	r31, 0x3e	; 62
   11614:	97 83       	std	Z+7, r25	; 0x07
   11616:	86 83       	std	Z+6, r24	; 0x06
   11618:	15 83       	std	Z+5, r17	; 0x05
   1161a:	04 83       	std	Z+4, r16	; 0x04
   1161c:	89 ef       	ldi	r24, 0xF9	; 249
   1161e:	9e e0       	ldi	r25, 0x0E	; 14
   11620:	a0 e0       	ldi	r26, 0x00	; 0
   11622:	81 83       	std	Z+1, r24	; 0x01
   11624:	92 83       	std	Z+2, r25	; 0x02
   11626:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   11628:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1162c:	ce 01       	movw	r24, r28
            break;
   1162e:	63 db       	rcall	.-2362   	; 0x10cf6 <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11630:	0d c0       	rjmp	.+26     	; 0x1164c <gpib_read_str+0x104>
   11632:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   11634:	c2 cf       	rjmp	.-124    	; 0x115ba <gpib_read_str+0x72>
   11636:	f6 01       	movw	r30, r12
   11638:	80 81       	ld	r24, Z
   1163a:	91 81       	ldd	r25, Z+1	; 0x01
   1163c:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1163e:	1f c0       	rjmp	.+62     	; 0x1167e <gpib_read_str+0x136>
   11640:	91 60       	ori	r25, 0x01	; 1
   11642:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   11644:	80 83       	st	Z, r24
   11646:	0a 15       	cp	r16, r10
   11648:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   1164a:	c9 f0       	breq	.+50     	; 0x1167e <gpib_read_str+0x136>
   1164c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11650:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11654:	82 72       	andi	r24, 0x22	; 34
   11656:	99 27       	eor	r25, r25
   11658:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1165a:	89 f0       	breq	.+34     	; 0x1167e <gpib_read_str+0x136>
   1165c:	ed b7       	in	r30, 0x3d	; 61
   1165e:	fe b7       	in	r31, 0x3e	; 62
   11660:	b7 82       	std	Z+7, r11	; 0x07
   11662:	a6 82       	std	Z+6, r10	; 0x06
   11664:	15 83       	std	Z+5, r17	; 0x05
   11666:	04 83       	std	Z+4, r16	; 0x04
   11668:	82 ed       	ldi	r24, 0xD2	; 210
   1166a:	9e e0       	ldi	r25, 0x0E	; 14
   1166c:	a0 e0       	ldi	r26, 0x00	; 0
   1166e:	81 83       	std	Z+1, r24	; 0x01
   11670:	92 83       	std	Z+2, r25	; 0x02
   11672:	a3 83       	std	Z+3, r26	; 0x03
   11674:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   11678:	02 c0       	rjmp	.+4      	; 0x1167e <gpib_read_str+0x136>
   1167a:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   1167c:	10 e0       	ldi	r17, 0x00	; 0
   1167e:	c8 01       	movw	r24, r16
   11680:	cd b7       	in	r28, 0x3d	; 61
   11682:	de b7       	in	r29, 0x3e	; 62
   11684:	27 96       	adiw	r28, 0x07	; 7
   11686:	ea e0       	ldi	r30, 0x0A	; 10
   11688:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0001168c <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1168c:	a7 e0       	ldi	r26, 0x07	; 7
   1168e:	b0 e0       	ldi	r27, 0x00	; 0
   11690:	ec e4       	ldi	r30, 0x4C	; 76
   11692:	fb e8       	ldi	r31, 0x8B	; 139
   11694:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
   11698:	8b 01       	movw	r16, r22
   1169a:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1169c:	fa 01       	movw	r30, r20
   1169e:	20 81       	ld	r18, Z
   116a0:	31 81       	ldd	r19, Z+1	; 0x01
   116a2:	22 27       	eor	r18, r18
   116a4:	31 83       	std	Z+1, r19	; 0x01
   116a6:	20 83       	st	Z, r18

    if(!size)
   116a8:	67 2b       	or	r22, r23
   116aa:	21 f0       	breq	.+8      	; 0x116b4 <gpib_write_str+0x28>
   116ac:	6c 01       	movw	r12, r24
   116ae:	c0 e0       	ldi	r28, 0x00	; 0
   116b0:	d0 e0       	ldi	r29, 0x00	; 0
   116b2:	35 c0       	rjmp	.+106    	; 0x1171e <gpib_write_str+0x92>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116b4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   116b8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   116bc:	82 72       	andi	r24, 0x22	; 34
   116be:	91 70       	andi	r25, 0x01	; 1
   116c0:	89 2b       	or	r24, r25
   116c2:	09 f4       	brne	.+2      	; 0x116c6 <gpib_write_str+0x3a>
   116c4:	4f c0       	rjmp	.+158    	; 0x11764 <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   116c6:	88 eb       	ldi	r24, 0xB8	; 184
   116c8:	9e e0       	ldi	r25, 0x0E	; 14
   116ca:	a0 e0       	ldi	r26, 0x00	; 0
   116cc:	ed b7       	in	r30, 0x3d	; 61
   116ce:	fe b7       	in	r31, 0x3e	; 62
   116d0:	81 83       	std	Z+1, r24	; 0x01
   116d2:	92 83       	std	Z+2, r25	; 0x02
   116d4:	a3 83       	std	Z+3, r26	; 0x03
   116d6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   116da:	44 c0       	rjmp	.+136    	; 0x11764 <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   116dc:	21 96       	adiw	r28, 0x01	; 1
   116de:	f6 01       	movw	r30, r12
   116e0:	81 91       	ld	r24, Z+
   116e2:	6f 01       	movw	r12, r30
   116e4:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   116e6:	f7 01       	movw	r30, r14
   116e8:	20 81       	ld	r18, Z
   116ea:	31 81       	ldd	r19, Z+1	; 0x01
   116ec:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   116ee:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   116f0:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   116f2:	19 c0       	rjmp	.+50     	; 0x11726 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   116f4:	4c db       	rcall	.-2408   	; 0x10d8e <gpib_write_byte>
   116f6:	5c 01       	movw	r10, r24
   116f8:	aa 24       	eor	r10, r10
   116fa:	f0 ed       	ldi	r31, 0xD0	; 208
   116fc:	bf 22       	and	r11, r31
   116fe:	f7 01       	movw	r30, r14
   11700:	20 81       	ld	r18, Z
   11702:	31 81       	ldd	r19, Z+1	; 0x01
   11704:	2a 29       	or	r18, r10
   11706:	3b 29       	or	r19, r11
   11708:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1170a:	20 83       	st	Z, r18
   1170c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11710:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
            gpib_decode(val);
   11714:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11716:	14 df       	rcall	.-472    	; 0x11540 <gpib_decode>
   11718:	a1 14       	cp	r10, r1
   1171a:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   1171c:	49 f4       	brne	.+18     	; 0x11730 <gpib_write_str+0xa4>
   1171e:	c0 17       	cp	r28, r16
   11720:	d1 07       	cpc	r29, r17
   11722:	e4 f2       	brlt	.-72     	; 0x116dc <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11724:	05 c0       	rjmp	.+10     	; 0x11730 <gpib_write_str+0xa4>
   11726:	0c 17       	cp	r16, r28
   11728:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   1172a:	21 f7       	brne	.-56     	; 0x116f4 <gpib_write_str+0x68>
   1172c:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   1172e:	e2 cf       	rjmp	.-60     	; 0x116f4 <gpib_write_str+0x68>
   11730:	c0 17       	cp	r28, r16
   11732:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11734:	c9 f0       	breq	.+50     	; 0x11768 <gpib_write_str+0xdc>
   11736:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1173a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1173e:	82 72       	andi	r24, 0x22	; 34
   11740:	91 70       	andi	r25, 0x01	; 1
   11742:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11744:	89 f0       	breq	.+34     	; 0x11768 <gpib_write_str+0xdc>
   11746:	ed b7       	in	r30, 0x3d	; 61
   11748:	fe b7       	in	r31, 0x3e	; 62
   1174a:	17 83       	std	Z+7, r17	; 0x07
   1174c:	06 83       	std	Z+6, r16	; 0x06
   1174e:	d5 83       	std	Z+5, r29	; 0x05
   11750:	c4 83       	std	Z+4, r28	; 0x04
   11752:	80 e9       	ldi	r24, 0x90	; 144
   11754:	9e e0       	ldi	r25, 0x0E	; 14
   11756:	a0 e0       	ldi	r26, 0x00	; 0
   11758:	81 83       	std	Z+1, r24	; 0x01
   1175a:	92 83       	std	Z+2, r25	; 0x02
   1175c:	a3 83       	std	Z+3, r26	; 0x03
   1175e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   11762:	02 c0       	rjmp	.+4      	; 0x11768 <gpib_write_str+0xdc>
   11764:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11766:	d0 e0       	ldi	r29, 0x00	; 0
   11768:	ce 01       	movw	r24, r28
   1176a:	cd b7       	in	r28, 0x3d	; 61
   1176c:	de b7       	in	r29, 0x3e	; 62
   1176e:	27 96       	adiw	r28, 0x07	; 7
   11770:	ea e0       	ldi	r30, 0x0A	; 10
   11772:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

00011776 <gpib_file_init>:
   11776:	ad b7       	in	r26, 0x3d	; 61
   11778:	be b7       	in	r27, 0x3e	; 62
   1177a:	17 97       	sbiw	r26, 0x07	; 7
   1177c:	0f b6       	in	r0, 0x3f	; 63
   1177e:	f8 94       	cli
   11780:	be bf       	out	0x3e, r27	; 62
   11782:	0f be       	out	0x3f, r0	; 63
   11784:	ad bf       	out	0x3d, r26	; 61
   11786:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <debuglevel+0x1>
   1178a:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <debuglevel>
   1178e:	85 ec       	ldi	r24, 0xC5	; 197
   11790:	91 e0       	ldi	r25, 0x01	; 1
   11792:	0e 94 bc 9a 	call	0x13578	; 0x13578 <Read_Config>
   11796:	18 16       	cp	r1, r24
   11798:	19 06       	cpc	r1, r25
   1179a:	8c f4       	brge	.+34     	; 0x117be <gpib_file_init+0x48>
   1179c:	ed b7       	in	r30, 0x3d	; 61
   1179e:	fe b7       	in	r31, 0x3e	; 62
   117a0:	97 83       	std	Z+7, r25	; 0x07
   117a2:	86 83       	std	Z+6, r24	; 0x06
   117a4:	85 ec       	ldi	r24, 0xC5	; 197
   117a6:	91 e0       	ldi	r25, 0x01	; 1
   117a8:	95 83       	std	Z+5, r25	; 0x05
   117aa:	84 83       	std	Z+4, r24	; 0x04
   117ac:	87 e9       	ldi	r24, 0x97	; 151
   117ae:	93 e1       	ldi	r25, 0x13	; 19
   117b0:	a0 e0       	ldi	r26, 0x00	; 0
   117b2:	81 83       	std	Z+1, r24	; 0x01
   117b4:	92 83       	std	Z+2, r25	; 0x02
   117b6:	a3 83       	std	Z+3, r26	; 0x03
   117b8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   117bc:	10 c0       	rjmp	.+32     	; 0x117de <gpib_file_init+0x68>
   117be:	89 2b       	or	r24, r25
   117c0:	71 f0       	breq	.+28     	; 0x117de <gpib_file_init+0x68>
   117c2:	85 ec       	ldi	r24, 0xC5	; 197
   117c4:	91 e0       	ldi	r25, 0x01	; 1
   117c6:	ed b7       	in	r30, 0x3d	; 61
   117c8:	fe b7       	in	r31, 0x3e	; 62
   117ca:	95 83       	std	Z+5, r25	; 0x05
   117cc:	84 83       	std	Z+4, r24	; 0x04
   117ce:	86 e8       	ldi	r24, 0x86	; 134
   117d0:	93 e1       	ldi	r25, 0x13	; 19
   117d2:	a0 e0       	ldi	r26, 0x00	; 0
   117d4:	81 83       	std	Z+1, r24	; 0x01
   117d6:	92 83       	std	Z+2, r25	; 0x02
   117d8:	a3 83       	std	Z+3, r26	; 0x03
   117da:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   117de:	0e 94 87 99 	call	0x1330e	; 0x1330e <set_Config_Defaults>
   117e2:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <mmc_wp_status>
   117e6:	89 2b       	or	r24, r25
   117e8:	51 f0       	breq	.+20     	; 0x117fe <gpib_file_init+0x88>
   117ea:	8d e6       	ldi	r24, 0x6D	; 109
   117ec:	93 e1       	ldi	r25, 0x13	; 19
   117ee:	a0 e0       	ldi	r26, 0x00	; 0
   117f0:	ed b7       	in	r30, 0x3d	; 61
   117f2:	fe b7       	in	r31, 0x3e	; 62
   117f4:	81 83       	std	Z+1, r24	; 0x01
   117f6:	92 83       	std	Z+2, r25	; 0x02
   117f8:	a3 83       	std	Z+3, r26	; 0x03
   117fa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   117fe:	ad b7       	in	r26, 0x3d	; 61
   11800:	be b7       	in	r27, 0x3e	; 62
   11802:	17 96       	adiw	r26, 0x07	; 7
   11804:	0f b6       	in	r0, 0x3f	; 63
   11806:	f8 94       	cli
   11808:	be bf       	out	0x3e, r27	; 62
   1180a:	0f be       	out	0x3f, r0	; 63
   1180c:	ad bf       	out	0x3d, r26	; 61
   1180e:	08 95       	ret

00011810 <SS80_is_MLA>:
   11810:	40 e2       	ldi	r20, 0x20	; 32
   11812:	50 e0       	ldi	r21, 0x00	; 0
   11814:	bc 01       	movw	r22, r24
   11816:	83 e0       	ldi	r24, 0x03	; 3
   11818:	90 e0       	ldi	r25, 0x00	; 0
   1181a:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   1181e:	8f 3f       	cpi	r24, 0xFF	; 255
   11820:	2f ef       	ldi	r18, 0xFF	; 255
   11822:	92 07       	cpc	r25, r18
   11824:	19 f0       	breq	.+6      	; 0x1182c <SS80_is_MLA+0x1c>
   11826:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   1182a:	08 95       	ret
   1182c:	80 e0       	ldi	r24, 0x00	; 0
   1182e:	90 e0       	ldi	r25, 0x00	; 0
   11830:	08 95       	ret

00011832 <SS80_is_MTA>:
   11832:	40 e4       	ldi	r20, 0x40	; 64
   11834:	50 e0       	ldi	r21, 0x00	; 0
   11836:	bc 01       	movw	r22, r24
   11838:	83 e0       	ldi	r24, 0x03	; 3
   1183a:	90 e0       	ldi	r25, 0x00	; 0
   1183c:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   11840:	8f 3f       	cpi	r24, 0xFF	; 255
   11842:	2f ef       	ldi	r18, 0xFF	; 255
   11844:	92 07       	cpc	r25, r18
   11846:	19 f0       	breq	.+6      	; 0x1184e <SS80_is_MTA+0x1c>
   11848:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   1184c:	08 95       	ret
   1184e:	80 e0       	ldi	r24, 0x00	; 0
   11850:	90 e0       	ldi	r25, 0x00	; 0
   11852:	08 95       	ret

00011854 <SS80_is_MSA>:
   11854:	40 e6       	ldi	r20, 0x60	; 96
   11856:	50 e0       	ldi	r21, 0x00	; 0
   11858:	bc 01       	movw	r22, r24
   1185a:	83 e0       	ldi	r24, 0x03	; 3
   1185c:	90 e0       	ldi	r25, 0x00	; 0
   1185e:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   11862:	8f 3f       	cpi	r24, 0xFF	; 255
   11864:	2f ef       	ldi	r18, 0xFF	; 255
   11866:	92 07       	cpc	r25, r18
   11868:	19 f0       	breq	.+6      	; 0x11870 <SS80_is_MSA+0x1c>
   1186a:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   1186e:	08 95       	ret
   11870:	80 e0       	ldi	r24, 0x00	; 0
   11872:	90 e0       	ldi	r25, 0x00	; 0
   11874:	08 95       	ret

00011876 <AMIGO_is_MLA>:
   11876:	40 e2       	ldi	r20, 0x20	; 32
   11878:	50 e0       	ldi	r21, 0x00	; 0
   1187a:	bc 01       	movw	r22, r24
   1187c:	81 e0       	ldi	r24, 0x01	; 1
   1187e:	90 e0       	ldi	r25, 0x00	; 0
   11880:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   11884:	8f 3f       	cpi	r24, 0xFF	; 255
   11886:	2f ef       	ldi	r18, 0xFF	; 255
   11888:	92 07       	cpc	r25, r18
   1188a:	19 f0       	breq	.+6      	; 0x11892 <AMIGO_is_MLA+0x1c>
   1188c:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   11890:	08 95       	ret
   11892:	80 e0       	ldi	r24, 0x00	; 0
   11894:	90 e0       	ldi	r25, 0x00	; 0
   11896:	08 95       	ret

00011898 <AMIGO_is_MTA>:
   11898:	40 e4       	ldi	r20, 0x40	; 64
   1189a:	50 e0       	ldi	r21, 0x00	; 0
   1189c:	bc 01       	movw	r22, r24
   1189e:	81 e0       	ldi	r24, 0x01	; 1
   118a0:	90 e0       	ldi	r25, 0x00	; 0
   118a2:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   118a6:	8f 3f       	cpi	r24, 0xFF	; 255
   118a8:	2f ef       	ldi	r18, 0xFF	; 255
   118aa:	92 07       	cpc	r25, r18
   118ac:	19 f0       	breq	.+6      	; 0x118b4 <AMIGO_is_MTA+0x1c>
   118ae:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   118b2:	08 95       	ret
   118b4:	80 e0       	ldi	r24, 0x00	; 0
   118b6:	90 e0       	ldi	r25, 0x00	; 0
   118b8:	08 95       	ret

000118ba <AMIGO_is_MSA>:
   118ba:	40 e6       	ldi	r20, 0x60	; 96
   118bc:	50 e0       	ldi	r21, 0x00	; 0
   118be:	bc 01       	movw	r22, r24
   118c0:	81 e0       	ldi	r24, 0x01	; 1
   118c2:	90 e0       	ldi	r25, 0x00	; 0
   118c4:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   118c8:	8f 3f       	cpi	r24, 0xFF	; 255
   118ca:	2f ef       	ldi	r18, 0xFF	; 255
   118cc:	92 07       	cpc	r25, r18
   118ce:	19 f0       	breq	.+6      	; 0x118d6 <AMIGO_is_MSA+0x1c>
   118d0:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   118d4:	08 95       	ret
   118d6:	80 e0       	ldi	r24, 0x00	; 0
   118d8:	90 e0       	ldi	r25, 0x00	; 0
   118da:	08 95       	ret

000118dc <PRINTER_is_MLA>:
   118dc:	40 e2       	ldi	r20, 0x20	; 32
   118de:	50 e0       	ldi	r21, 0x00	; 0
   118e0:	bc 01       	movw	r22, r24
   118e2:	84 e0       	ldi	r24, 0x04	; 4
   118e4:	90 e0       	ldi	r25, 0x00	; 0
   118e6:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   118ea:	8f 3f       	cpi	r24, 0xFF	; 255
   118ec:	2f ef       	ldi	r18, 0xFF	; 255
   118ee:	92 07       	cpc	r25, r18
   118f0:	19 f0       	breq	.+6      	; 0x118f8 <PRINTER_is_MLA+0x1c>
   118f2:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   118f6:	08 95       	ret
   118f8:	80 e0       	ldi	r24, 0x00	; 0
   118fa:	90 e0       	ldi	r25, 0x00	; 0
   118fc:	08 95       	ret

000118fe <PRINTER_is_MTA>:
   118fe:	40 e4       	ldi	r20, 0x40	; 64
   11900:	50 e0       	ldi	r21, 0x00	; 0
   11902:	bc 01       	movw	r22, r24
   11904:	84 e0       	ldi	r24, 0x04	; 4
   11906:	90 e0       	ldi	r25, 0x00	; 0
   11908:	0e 94 ed 96 	call	0x12dda	; 0x12dda <find_device>
   1190c:	8f 3f       	cpi	r24, 0xFF	; 255
   1190e:	2f ef       	ldi	r18, 0xFF	; 255
   11910:	92 07       	cpc	r25, r18
   11912:	19 f0       	breq	.+6      	; 0x1191a <PRINTER_is_MTA+0x1c>
   11914:	0c 94 17 97 	jmp	0x12e2e	; 0x12e2e <set_active_device>
   11918:	08 95       	ret
   1191a:	80 e0       	ldi	r24, 0x00	; 0
   1191c:	90 e0       	ldi	r25, 0x00	; 0
   1191e:	08 95       	ret

00011920 <gpib_init_devices>:
   11920:	01 d9       	rcall	.-3582   	; 0x10b24 <gpib_bus_init>
   11922:	2d d9       	rcall	.-3494   	; 0x10b7e <gpib_state_init>
   11924:	0e 94 ca aa 	call	0x15594	; 0x15594 <SS80_init>
   11928:	0e 94 59 b0 	call	0x160b2	; 0x160b2 <amigo_init>
   1192c:	0c 94 4d bb 	jmp	0x1769a	; 0x1769a <printer_close>
   11930:	08 95       	ret

00011932 <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11932:	0f 93       	push	r16
   11934:	1f 93       	push	r17
   11936:	cf 93       	push	r28
   11938:	df 93       	push	r29
   1193a:	00 d0       	rcall	.+0      	; 0x1193c <gpib_trace_task+0xa>
   1193c:	00 d0       	rcall	.+0      	; 0x1193e <gpib_trace_task+0xc>
   1193e:	1f 92       	push	r1
   11940:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11942:	00 97       	sbiw	r24, 0x00	; 0
   11944:	09 f4       	brne	.+2      	; 0x11948 <gpib_trace_task+0x16>
   11946:	44 c0       	rjmp	.+136    	; 0x119d0 <gpib_trace_task+0x9e>
   11948:	fc 01       	movw	r30, r24
   1194a:	20 81       	ld	r18, Z
   1194c:	22 23       	and	r18, r18
   1194e:	09 f4       	brne	.+2      	; 0x11952 <gpib_trace_task+0x20>
   11950:	3f c0       	rjmp	.+126    	; 0x119d0 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11952:	0e 94 b2 31 	call	0x6364	; 0x6364 <skipspaces>
   11956:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11958:	ed b7       	in	r30, 0x3d	; 61
   1195a:	fe b7       	in	r31, 0x3e	; 62
   1195c:	95 83       	std	Z+5, r25	; 0x05
   1195e:	84 83       	std	Z+4, r24	; 0x04
   11960:	83 e5       	ldi	r24, 0x53	; 83
   11962:	93 e1       	ldi	r25, 0x13	; 19
   11964:	a0 e0       	ldi	r26, 0x00	; 0
   11966:	81 83       	std	Z+1, r24	; 0x01
   11968:	92 83       	std	Z+2, r25	; 0x02
   1196a:	a3 83       	std	Z+3, r26	; 0x03
   1196c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        if(detail)
   11970:	20 97       	sbiw	r28, 0x00	; 0
   11972:	51 f0       	breq	.+20     	; 0x11988 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11974:	88 e2       	ldi	r24, 0x28	; 40
   11976:	93 e1       	ldi	r25, 0x13	; 19
   11978:	a0 e0       	ldi	r26, 0x00	; 0
   1197a:	ed b7       	in	r30, 0x3d	; 61
   1197c:	fe b7       	in	r31, 0x3e	; 62
   1197e:	81 83       	std	Z+1, r24	; 0x01
   11980:	92 83       	std	Z+2, r25	; 0x02
   11982:	a3 83       	std	Z+3, r26	; 0x03
   11984:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("Press ANY key to exit\n");
   11988:	81 e1       	ldi	r24, 0x11	; 17
   1198a:	93 e1       	ldi	r25, 0x13	; 19
   1198c:	a0 e0       	ldi	r26, 0x00	; 0
   1198e:	ed b7       	in	r30, 0x3d	; 61
   11990:	fe b7       	in	r31, 0x3e	; 62
   11992:	81 83       	std	Z+1, r24	; 0x01
   11994:	92 83       	std	Z+2, r25	; 0x02
   11996:	a3 83       	std	Z+3, r26	; 0x03
   11998:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   1199c:	6e ed       	ldi	r22, 0xDE	; 222
   1199e:	78 e0       	ldi	r23, 0x08	; 8
   119a0:	c8 01       	movw	r24, r16
   119a2:	0e 94 10 7e 	call	0xfc20	; 0xfc20 <fopen>
   119a6:	90 93 49 19 	sts	0x1949, r25	; 0x801949 <gpib_log_fp+0x1>
   119aa:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   119ae:	89 2b       	or	r24, r25
   119b0:	b9 f4       	brne	.+46     	; 0x119e0 <gpib_trace_task+0xae>
        {
            perror("open failed");
   119b2:	89 e7       	ldi	r24, 0x79	; 121
   119b4:	9d e0       	ldi	r25, 0x0D	; 13
   119b6:	0e 94 41 78 	call	0xf082	; 0xf082 <perror>
            printf("exiting...\n");
   119ba:	85 e0       	ldi	r24, 0x05	; 5
   119bc:	93 e1       	ldi	r25, 0x13	; 19
   119be:	a0 e0       	ldi	r26, 0x00	; 0
   119c0:	ed b7       	in	r30, 0x3d	; 61
   119c2:	fe b7       	in	r31, 0x3e	; 62
   119c4:	81 83       	std	Z+1, r24	; 0x01
   119c6:	92 83       	std	Z+2, r25	; 0x02
   119c8:	a3 83       	std	Z+3, r26	; 0x03
   119ca:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            return;
   119ce:	3e c0       	rjmp	.+124    	; 0x11a4c <gpib_trace_task+0x11a>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   119d0:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <__iob+0x2>
   119d4:	90 91 a3 1c 	lds	r25, 0x1CA3	; 0x801ca3 <__iob+0x3>
   119d8:	90 93 49 19 	sts	0x1949, r25	; 0x801949 <gpib_log_fp+0x1>
   119dc:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <gpib_log_fp>
    }

    gpib_state_init();                            // Init PPR talking and listening states
    gpib_init_devices();
   119e0:	ce d8       	rcall	.-3684   	; 0x10b7e <gpib_state_init>

    gpib_decode_header(gpib_log_fp);
   119e2:	9e df       	rcall	.-196    	; 0x11920 <gpib_init_devices>
   119e4:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <gpib_log_fp>
   119e8:	90 91 49 19 	lds	r25, 0x1949	; 0x801949 <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   119ec:	3f db       	rcall	.-2434   	; 0x1106c <gpib_decode_header>
   119ee:	80 e0       	ldi	r24, 0x00	; 0
   119f0:	0e 94 90 2a 	call	0x5520	; 0x5520 <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   119f4:	89 2b       	or	r24, r25
   119f6:	31 f4       	brne	.+12     	; 0x11a04 <gpib_trace_task+0xd2>
        if(!detail)
   119f8:	ce 01       	movw	r24, r28
   119fa:	cc dc       	rcall	.-1640   	; 0x11394 <gpib_read_byte>
            gpib_decode(ch);
   119fc:	20 97       	sbiw	r28, 0x00	; 0
   119fe:	b9 f7       	brne	.-18     	; 0x119ee <gpib_trace_task+0xbc>
   11a00:	9f dd       	rcall	.-1218   	; 0x11540 <gpib_decode>
    }

    printf("Done\n");
   11a02:	f5 cf       	rjmp	.-22     	; 0x119ee <gpib_trace_task+0xbc>
   11a04:	8f ef       	ldi	r24, 0xFF	; 255
   11a06:	92 e1       	ldi	r25, 0x12	; 18
   11a08:	a0 e0       	ldi	r26, 0x00	; 0
   11a0a:	ed b7       	in	r30, 0x3d	; 61
   11a0c:	fe b7       	in	r31, 0x3e	; 62
   11a0e:	81 83       	std	Z+1, r24	; 0x01
   11a10:	92 83       	std	Z+2, r25	; 0x02
   11a12:	a3 83       	std	Z+3, r26	; 0x03
   11a14:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    if(gpib_log_fp)
   11a18:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <gpib_log_fp>
   11a1c:	90 91 49 19 	lds	r25, 0x1949	; 0x801949 <gpib_log_fp+0x1>
   11a20:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   11a22:	a1 f0       	breq	.+40     	; 0x11a4c <gpib_trace_task+0x11a>
   11a24:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
        printf("Capturing Closed\n");
   11a28:	8d ee       	ldi	r24, 0xED	; 237
   11a2a:	92 e1       	ldi	r25, 0x12	; 18
   11a2c:	a0 e0       	ldi	r26, 0x00	; 0
   11a2e:	ed b7       	in	r30, 0x3d	; 61
   11a30:	fe b7       	in	r31, 0x3e	; 62
   11a32:	81 83       	std	Z+1, r24	; 0x01
   11a34:	92 83       	std	Z+2, r25	; 0x02
   11a36:	a3 83       	std	Z+3, r26	; 0x03
   11a38:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        gpib_log_fp = stdout;
   11a3c:	80 91 a2 1c 	lds	r24, 0x1CA2	; 0x801ca2 <__iob+0x2>
   11a40:	90 91 a3 1c 	lds	r25, 0x1CA3	; 0x801ca3 <__iob+0x3>
   11a44:	90 93 49 19 	sts	0x1949, r25	; 0x801949 <gpib_log_fp+0x1>
   11a48:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <gpib_log_fp>
    }
}
   11a4c:	cd b7       	in	r28, 0x3d	; 61
   11a4e:	de b7       	in	r29, 0x3e	; 62
   11a50:	25 96       	adiw	r28, 0x05	; 5
   11a52:	e4 e0       	ldi	r30, 0x04	; 4
   11a54:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00011a58 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11a58:	ef 92       	push	r14
   11a5a:	ff 92       	push	r15
   11a5c:	0f 93       	push	r16
   11a5e:	1f 93       	push	r17
   11a60:	cf 93       	push	r28
   11a62:	df 93       	push	r29
   11a64:	00 d0       	rcall	.+0      	; 0x11a66 <gpib_error_test+0xe>
   11a66:	1f 92       	push	r1
   11a68:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11a6a:	ec 01       	movw	r28, r24
   11a6c:	cc 27       	eor	r28, r28
   11a6e:	d0 7d       	andi	r29, 0xD0	; 208
   11a70:	20 97       	sbiw	r28, 0x00	; 0
   11a72:	61 f0       	breq	.+24     	; 0x11a8c <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11a74:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11a78:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11a7c:	8e 72       	andi	r24, 0x2E	; 46
   11a7e:	99 27       	eor	r25, r25
   11a80:	87 01       	movw	r16, r14
   11a82:	00 27       	eor	r16, r16
   11a84:	10 71       	andi	r17, 0x10	; 16
   11a86:	89 2b       	or	r24, r25
   11a88:	59 f4       	brne	.+22     	; 0x11aa0 <gpib_error_test+0x48>
   11a8a:	17 c0       	rjmp	.+46     	; 0x11aba <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11a8c:	80 e0       	ldi	r24, 0x00	; 0
   11a8e:	0e 94 90 2a 	call	0x5520	; 0x5520 <uart_keyhit>
   11a92:	89 2b       	or	r24, r25
   11a94:	79 f7       	brne	.-34     	; 0x11a74 <gpib_error_test+0x1c>
   11a96:	0e 94 ea 6e 	call	0xddd4	; 0xddd4 <mmc_ins_status>
   11a9a:	01 97       	sbiw	r24, 0x01	; 1
   11a9c:	59 f7       	brne	.-42     	; 0x11a74 <gpib_error_test+0x1c>
   11a9e:	62 c0       	rjmp	.+196    	; 0x11b64 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11aa0:	01 15       	cp	r16, r1
   11aa2:	11 05       	cpc	r17, r1
   11aa4:	51 f0       	breq	.+20     	; 0x11aba <gpib_error_test+0x62>
                printf("<IFC>\n");
   11aa6:	86 ee       	ldi	r24, 0xE6	; 230
   11aa8:	92 e1       	ldi	r25, 0x12	; 18
   11aaa:	a0 e0       	ldi	r26, 0x00	; 0
   11aac:	ed b7       	in	r30, 0x3d	; 61
   11aae:	fe b7       	in	r31, 0x3e	; 62
   11ab0:	81 83       	std	Z+1, r24	; 0x01
   11ab2:	92 83       	std	Z+2, r25	; 0x02
   11ab4:	a3 83       	std	Z+3, r26	; 0x03
   11ab6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        }

        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11aba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11abe:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ac2:	8e 72       	andi	r24, 0x2E	; 46
   11ac4:	99 27       	eor	r25, r25
   11ac6:	89 2b       	or	r24, r25
   11ac8:	c1 f0       	breq	.+48     	; 0x11afa <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11aca:	f6 fe       	sbrs	r15, 6
   11acc:	0a c0       	rjmp	.+20     	; 0x11ae2 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11ace:	8b ed       	ldi	r24, 0xDB	; 219
   11ad0:	92 e1       	ldi	r25, 0x12	; 18
   11ad2:	a0 e0       	ldi	r26, 0x00	; 0
   11ad4:	ed b7       	in	r30, 0x3d	; 61
   11ad6:	fe b7       	in	r31, 0x3e	; 62
   11ad8:	81 83       	std	Z+1, r24	; 0x01
   11ada:	92 83       	std	Z+2, r25	; 0x02
   11adc:	a3 83       	std	Z+3, r26	; 0x03
   11ade:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11ae2:	d7 ff       	sbrs	r29, 7
   11ae4:	0a c0       	rjmp	.+20     	; 0x11afa <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11ae6:	84 ed       	ldi	r24, 0xD4	; 212
   11ae8:	92 e1       	ldi	r25, 0x12	; 18
   11aea:	a0 e0       	ldi	r26, 0x00	; 0
   11aec:	ed b7       	in	r30, 0x3d	; 61
   11aee:	fe b7       	in	r31, 0x3e	; 62
   11af0:	81 83       	std	Z+1, r24	; 0x01
   11af2:	92 83       	std	Z+2, r25	; 0x02
   11af4:	a3 83       	std	Z+3, r26	; 0x03
   11af6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        }

        if(uart_keyhit(0))
   11afa:	80 e0       	ldi	r24, 0x00	; 0
   11afc:	0e 94 90 2a 	call	0x5520	; 0x5520 <uart_keyhit>
   11b00:	89 2b       	or	r24, r25
   11b02:	51 f0       	breq	.+20     	; 0x11b18 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11b04:	87 ec       	ldi	r24, 0xC7	; 199
   11b06:	92 e1       	ldi	r25, 0x12	; 18
   11b08:	a0 e0       	ldi	r26, 0x00	; 0
   11b0a:	ed b7       	in	r30, 0x3d	; 61
   11b0c:	fe b7       	in	r31, 0x3e	; 62
   11b0e:	81 83       	std	Z+1, r24	; 0x01
   11b10:	92 83       	std	Z+2, r25	; 0x02
   11b12:	a3 83       	std	Z+3, r26	; 0x03
   11b14:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

        if( mmc_ins_status() != 1 )
   11b18:	0e 94 ea 6e 	call	0xddd4	; 0xddd4 <mmc_ins_status>
   11b1c:	01 97       	sbiw	r24, 0x01	; 1
   11b1e:	51 f0       	breq	.+20     	; 0x11b34 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11b20:	86 eb       	ldi	r24, 0xB6	; 182
   11b22:	92 e1       	ldi	r25, 0x12	; 18
   11b24:	a0 e0       	ldi	r26, 0x00	; 0
   11b26:	ed b7       	in	r30, 0x3d	; 61
   11b28:	fe b7       	in	r31, 0x3e	; 62
   11b2a:	81 83       	std	Z+1, r24	; 0x01
   11b2c:	92 83       	std	Z+2, r25	; 0x02
   11b2e:	a3 83       	std	Z+3, r26	; 0x03
   11b30:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

        if(val & IFC_FLAG)
   11b34:	01 15       	cp	r16, r1
   11b36:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   11b38:	09 f0       	breq	.+2      	; 0x11b3c <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   11b3a:	f2 de       	rcall	.-540    	; 0x11920 <gpib_init_devices>
   11b3c:	80 e0       	ldi	r24, 0x00	; 0
   11b3e:	0e 94 90 2a 	call	0x5520	; 0x5520 <uart_keyhit>
        {
            gpib_init_devices();
   11b42:	89 2b       	or	r24, r25
   11b44:	11 f0       	breq	.+4      	; 0x11b4a <gpib_error_test+0xf2>
   11b46:	ec de       	rcall	.-552    	; 0x11920 <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11b48:	0b c0       	rjmp	.+22     	; 0x11b60 <gpib_error_test+0x108>
   11b4a:	0e 94 ea 6e 	call	0xddd4	; 0xddd4 <mmc_ins_status>
   11b4e:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11b50:	39 f4       	brne	.+14     	; 0x11b60 <gpib_error_test+0x108>
   11b52:	01 15       	cp	r16, r1
   11b54:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   11b56:	31 f0       	breq	.+12     	; 0x11b64 <gpib_error_test+0x10c>
   11b58:	54 98       	cbi	0x0a, 4	; 10
   11b5a:	4c 9b       	sbis	0x09, 4	; 9
   11b5c:	fd cf       	rjmp	.-6      	; 0x11b58 <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11b5e:	02 c0       	rjmp	.+4      	; 0x11b64 <gpib_error_test+0x10c>
   11b60:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11b62:	d0 e0       	ldi	r29, 0x00	; 0
   11b64:	ce 01       	movw	r24, r28
   11b66:	cd b7       	in	r28, 0x3d	; 61
   11b68:	de b7       	in	r29, 0x3e	; 62
   11b6a:	23 96       	adiw	r28, 0x03	; 3
   11b6c:	e6 e0       	ldi	r30, 0x06	; 6
   11b6e:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00011b72 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11b72:	1f 93       	push	r17
   11b74:	cf 93       	push	r28
   11b76:	df 93       	push	r29
   11b78:	ec 01       	movw	r28, r24
   11b7a:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11b7c:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   11b80:	8f 35       	cpi	r24, 0x5F	; 95
   11b82:	91 f0       	breq	.+36     	; 0x11ba8 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11b84:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11b88:	90 e0       	ldi	r25, 0x00	; 0
   11b8a:	75 de       	rcall	.-790    	; 0x11876 <AMIGO_is_MLA>
   11b8c:	89 2b       	or	r24, r25
   11b8e:	c9 f4       	brne	.+50     	; 0x11bc2 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11b90:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11b94:	90 e0       	ldi	r25, 0x00	; 0
   11b96:	3c de       	rcall	.-904    	; 0x11810 <SS80_is_MLA>
   11b98:	89 2b       	or	r24, r25
   11b9a:	11 f5       	brne	.+68     	; 0x11be0 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11b9c:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11ba0:	90 e0       	ldi	r25, 0x00	; 0
   11ba2:	9c de       	rcall	.-712    	; 0x118dc <PRINTER_is_MLA>
   11ba4:	89 2b       	or	r24, r25
   11ba6:	59 f5       	brne	.+86     	; 0x11bfe <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11ba8:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11bac:	8f 33       	cpi	r24, 0x3F	; 63
   11bae:	19 f4       	brne	.+6      	; 0x11bb6 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11bb0:	80 e0       	ldi	r24, 0x00	; 0
   11bb2:	90 e0       	ldi	r25, 0x00	; 0

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11bb4:	2e c0       	rjmp	.+92     	; 0x11c12 <GPIB_COMMANDS+0xa0>
   11bb6:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   11bba:	90 e0       	ldi	r25, 0x00	; 0
   11bbc:	6d de       	rcall	.-806    	; 0x11898 <AMIGO_is_MTA>
        {
            if(unread)
   11bbe:	89 2b       	or	r24, r25
   11bc0:	49 f0       	breq	.+18     	; 0x11bd4 <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11bc2:	11 23       	and	r17, r17
   11bc4:	11 f0       	breq	.+4      	; 0x11bca <GPIB_COMMANDS+0x58>
   11bc6:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   11bc8:	96 d8       	rcall	.-3796   	; 0x10cf6 <gpib_unread>
   11bca:	80 91 d0 1e 	lds	r24, 0x1ED0	; 0x801ed0 <secondary>
   11bce:	0e 94 48 ba 	call	0x17490	; 0x17490 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11bd2:	1d c0       	rjmp	.+58     	; 0x11c0e <GPIB_COMMANDS+0x9c>
   11bd4:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   11bd8:	90 e0       	ldi	r25, 0x00	; 0
   11bda:	2b de       	rcall	.-938    	; 0x11832 <SS80_is_MTA>
        {
            if(unread)
   11bdc:	89 2b       	or	r24, r25
   11bde:	49 f0       	breq	.+18     	; 0x11bf2 <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11be0:	11 23       	and	r17, r17
   11be2:	11 f0       	breq	.+4      	; 0x11be8 <GPIB_COMMANDS+0x76>
   11be4:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   11be6:	87 d8       	rcall	.-3826   	; 0x10cf6 <gpib_unread>
   11be8:	80 91 d0 1e 	lds	r24, 0x1ED0	; 0x801ed0 <secondary>
   11bec:	0e 94 a5 ae 	call	0x15d4a	; 0x15d4a <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11bf0:	0e c0       	rjmp	.+28     	; 0x11c0e <GPIB_COMMANDS+0x9c>
   11bf2:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   11bf6:	90 e0       	ldi	r25, 0x00	; 0
   11bf8:	82 de       	rcall	.-764    	; 0x118fe <PRINTER_is_MTA>
        {
            if(unread)
   11bfa:	89 2b       	or	r24, r25
   11bfc:	c9 f2       	breq	.-78     	; 0x11bb0 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   11bfe:	11 23       	and	r17, r17
   11c00:	11 f0       	breq	.+4      	; 0x11c06 <GPIB_COMMANDS+0x94>
   11c02:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   11c04:	78 d8       	rcall	.-3856   	; 0x10cf6 <gpib_unread>
   11c06:	80 91 d0 1e 	lds	r24, 0x1ED0	; 0x801ed0 <secondary>
   11c0a:	0e 94 c1 bc 	call	0x17982	; 0x17982 <PRINTER_COMMANDS>
            secondary = 0;
   11c0e:	10 92 d0 1e 	sts	0x1ED0, r1	; 0x801ed0 <secondary>
            return(status);
        }
    }
    return(0);
}
   11c12:	df 91       	pop	r29
   11c14:	cf 91       	pop	r28
   11c16:	1f 91       	pop	r17
   11c18:	08 95       	ret

00011c1a <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11c1a:	cf 92       	push	r12
   11c1c:	df 92       	push	r13
   11c1e:	ff 92       	push	r15
   11c20:	0f 93       	push	r16
   11c22:	1f 93       	push	r17
   11c24:	cf 93       	push	r28
   11c26:	df 93       	push	r29
   11c28:	cd b7       	in	r28, 0x3d	; 61
   11c2a:	de b7       	in	r29, 0x3e	; 62
   11c2c:	2b 97       	sbiw	r28, 0x0b	; 11
   11c2e:	0f b6       	in	r0, 0x3f	; 63
   11c30:	f8 94       	cli
   11c32:	de bf       	out	0x3e, r29	; 62
   11c34:	0f be       	out	0x3f, r0	; 63
   11c36:	cd bf       	out	0x3d, r28	; 61
   11c38:	f8 2e       	mov	r15, r24
   11c3a:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11c3c:	80 e0       	ldi	r24, 0x00	; 0
   11c3e:	91 e0       	ldi	r25, 0x01	; 1
   11c40:	9b 87       	std	Y+11, r25	; 0x0b
   11c42:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11c44:	8b 01       	movw	r16, r22
   11c46:	20 e0       	ldi	r18, 0x00	; 0
   11c48:	30 e0       	ldi	r19, 0x00	; 0
   11c4a:	42 e0       	ldi	r20, 0x02	; 2
   11c4c:	50 e0       	ldi	r21, 0x00	; 0
   11c4e:	60 e0       	ldi	r22, 0x00	; 0
   11c50:	70 e0       	ldi	r23, 0x00	; 0
   11c52:	ce 01       	movw	r24, r28
   11c54:	08 96       	adiw	r24, 0x08	; 8
   11c56:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11c5a:	ae 01       	movw	r20, r28
   11c5c:	46 5f       	subi	r20, 0xF6	; 246
   11c5e:	5f 4f       	sbci	r21, 0xFF	; 255
   11c60:	62 e0       	ldi	r22, 0x02	; 2
   11c62:	70 e0       	ldi	r23, 0x00	; 0
   11c64:	ce 01       	movw	r24, r28
   11c66:	08 96       	adiw	r24, 0x08	; 8
   11c68:	11 dd       	rcall	.-1502   	; 0x1168c <gpib_write_str>
   11c6a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11c6e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11c72:	02 97       	sbiw	r24, 0x02	; 2
   11c74:	79 f0       	breq	.+30     	; 0x11c94 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c76:	26 72       	andi	r18, 0x26	; 38
   11c78:	33 27       	eor	r19, r19
   11c7a:	23 2b       	or	r18, r19
   11c7c:	f9 f0       	breq	.+62     	; 0x11cbc <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11c7e:	ed b7       	in	r30, 0x3d	; 61
   11c80:	fe b7       	in	r31, 0x3e	; 62
   11c82:	d7 82       	std	Z+7, r13	; 0x07
   11c84:	c6 82       	std	Z+6, r12	; 0x06
   11c86:	8f 2d       	mov	r24, r15
   11c88:	90 e0       	ldi	r25, 0x00	; 0
   11c8a:	95 83       	std	Z+5, r25	; 0x05
   11c8c:	84 83       	std	Z+4, r24	; 0x04
   11c8e:	85 e9       	ldi	r24, 0x95	; 149
   11c90:	92 e1       	ldi	r25, 0x12	; 18
   11c92:	0e c0       	rjmp	.+28     	; 0x11cb0 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c94:	24 72       	andi	r18, 0x24	; 36
   11c96:	33 27       	eor	r19, r19
   11c98:	23 2b       	or	r18, r19
   11c9a:	81 f0       	breq	.+32     	; 0x11cbc <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11c9c:	ed b7       	in	r30, 0x3d	; 61
   11c9e:	fe b7       	in	r31, 0x3e	; 62
   11ca0:	d7 82       	std	Z+7, r13	; 0x07
   11ca2:	c6 82       	std	Z+6, r12	; 0x06
   11ca4:	8f 2d       	mov	r24, r15
   11ca6:	90 e0       	ldi	r25, 0x00	; 0
   11ca8:	95 83       	std	Z+5, r25	; 0x05
   11caa:	84 83       	std	Z+4, r24	; 0x04
   11cac:	8b e7       	ldi	r24, 0x7B	; 123
   11cae:	92 e1       	ldi	r25, 0x12	; 18
   11cb0:	a0 e0       	ldi	r26, 0x00	; 0
   11cb2:	81 83       	std	Z+1, r24	; 0x01
   11cb4:	92 83       	std	Z+2, r25	; 0x02
   11cb6:	a3 83       	std	Z+3, r26	; 0x03
   11cb8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
    return (status & ERROR_MASK);
   11cbc:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cbe:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cc0:	88 27       	eor	r24, r24
   11cc2:	90 7d       	andi	r25, 0xD0	; 208
}
   11cc4:	2b 96       	adiw	r28, 0x0b	; 11
   11cc6:	0f b6       	in	r0, 0x3f	; 63
   11cc8:	f8 94       	cli
   11cca:	de bf       	out	0x3e, r29	; 62
   11ccc:	0f be       	out	0x3f, r0	; 63
   11cce:	cd bf       	out	0x3d, r28	; 61
   11cd0:	df 91       	pop	r29
   11cd2:	cf 91       	pop	r28
   11cd4:	1f 91       	pop	r17
   11cd6:	0f 91       	pop	r16
   11cd8:	ff 90       	pop	r15
   11cda:	df 90       	pop	r13
   11cdc:	cf 90       	pop	r12
   11cde:	08 95       	ret

00011ce0 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11ce0:	00 d0       	rcall	.+0      	; 0x11ce2 <GPIB+0x2>
   11ce2:	00 d0       	rcall	.+0      	; 0x11ce4 <GPIB+0x4>
   11ce4:	1f 92       	push	r1
   11ce6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11cea:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11cee:	85 30       	cpi	r24, 0x05	; 5
   11cf0:	89 f4       	brne	.+34     	; 0x11d14 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11cf2:	26 71       	andi	r18, 0x16	; 22
   11cf4:	33 27       	eor	r19, r19
   11cf6:	23 2b       	or	r18, r19
   11cf8:	51 f0       	breq	.+20     	; 0x11d0e <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11cfa:	83 e6       	ldi	r24, 0x63	; 99
   11cfc:	92 e1       	ldi	r25, 0x12	; 18
   11cfe:	a0 e0       	ldi	r26, 0x00	; 0
   11d00:	ed b7       	in	r30, 0x3d	; 61
   11d02:	fe b7       	in	r31, 0x3e	; 62
   11d04:	81 83       	std	Z+1, r24	; 0x01
   11d06:	92 83       	std	Z+2, r25	; 0x02
   11d08:	a3 83       	std	Z+3, r26	; 0x03
   11d0a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        spoll = 0;
   11d0e:	10 92 cc 1e 	sts	0x1ECC, r1	; 0x801ecc <spoll>
   11d12:	a0 c0       	rjmp	.+320    	; 0x11e54 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11d14:	85 31       	cpi	r24, 0x15	; 21
   11d16:	39 f4       	brne	.+14     	; 0x11d26 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d18:	26 71       	andi	r18, 0x16	; 22
   11d1a:	33 27       	eor	r19, r19
   11d1c:	23 2b       	or	r18, r19
   11d1e:	b9 f3       	breq	.-18     	; 0x11d0e <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11d20:	8b e4       	ldi	r24, 0x4B	; 75
   11d22:	92 e1       	ldi	r25, 0x12	; 18
   11d24:	ec cf       	rjmp	.-40     	; 0x11cfe <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11d26:	88 31       	cpi	r24, 0x18	; 24
   11d28:	d9 f4       	brne	.+54     	; 0x11d60 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11d2a:	26 70       	andi	r18, 0x06	; 6
   11d2c:	33 27       	eor	r19, r19
   11d2e:	23 2b       	or	r18, r19
   11d30:	51 f0       	breq	.+20     	; 0x11d46 <GPIB+0x66>
            printf("[SPE]\n");
   11d32:	84 e4       	ldi	r24, 0x44	; 68
   11d34:	92 e1       	ldi	r25, 0x12	; 18
   11d36:	a0 e0       	ldi	r26, 0x00	; 0
   11d38:	ed b7       	in	r30, 0x3d	; 61
   11d3a:	fe b7       	in	r31, 0x3e	; 62
   11d3c:	81 83       	std	Z+1, r24	; 0x01
   11d3e:	92 83       	std	Z+2, r25	; 0x02
   11d40:	a3 83       	std	Z+3, r26	; 0x03
   11d42:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
        spoll = 1;
   11d46:	81 e0       	ldi	r24, 0x01	; 1
   11d48:	80 93 cc 1e 	sts	0x1ECC, r24	; 0x801ecc <spoll>
        if(SS80_is_MTA(talking))
   11d4c:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   11d50:	90 e0       	ldi	r25, 0x00	; 0
   11d52:	6f dd       	rcall	.-1314   	; 0x11832 <SS80_is_MTA>
   11d54:	89 2b       	or	r24, r25
   11d56:	09 f4       	brne	.+2      	; 0x11d5a <GPIB+0x7a>
   11d58:	7d c0       	rjmp	.+250    	; 0x11e54 <GPIB+0x174>
        {
            return( SS80_Report() );
   11d5a:	0e 94 5e aa 	call	0x154bc	; 0x154bc <SS80_Report>
   11d5e:	7c c0       	rjmp	.+248    	; 0x11e58 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11d60:	89 31       	cpi	r24, 0x19	; 25
   11d62:	39 f4       	brne	.+14     	; 0x11d72 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11d64:	26 70       	andi	r18, 0x06	; 6
   11d66:	33 27       	eor	r19, r19
   11d68:	23 2b       	or	r18, r19
   11d6a:	89 f2       	breq	.-94     	; 0x11d0e <GPIB+0x2e>
            printf("[SPD]\n");
   11d6c:	8d e3       	ldi	r24, 0x3D	; 61
   11d6e:	92 e1       	ldi	r25, 0x12	; 18
   11d70:	c6 cf       	rjmp	.-116    	; 0x11cfe <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11d72:	84 30       	cpi	r24, 0x04	; 4
   11d74:	09 f0       	breq	.+2      	; 0x11d78 <GPIB+0x98>
   11d76:	48 c0       	rjmp	.+144    	; 0x11e08 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d78:	22 ff       	sbrs	r18, 2
   11d7a:	0a c0       	rjmp	.+20     	; 0x11d90 <GPIB+0xb0>
            printf("[SDC]\n");
   11d7c:	86 e3       	ldi	r24, 0x36	; 54
   11d7e:	92 e1       	ldi	r25, 0x12	; 18
   11d80:	a0 e0       	ldi	r26, 0x00	; 0
   11d82:	ed b7       	in	r30, 0x3d	; 61
   11d84:	fe b7       	in	r31, 0x3e	; 62
   11d86:	81 83       	std	Z+1, r24	; 0x01
   11d88:	92 83       	std	Z+2, r25	; 0x02
   11d8a:	a3 83       	std	Z+3, r26	; 0x03
   11d8c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11d90:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11d94:	90 e0       	ldi	r25, 0x00	; 0
   11d96:	3c dd       	rcall	.-1416   	; 0x11810 <SS80_is_MLA>
   11d98:	89 2b       	or	r24, r25
   11d9a:	d9 f0       	breq	.+54     	; 0x11dd2 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d9c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11da0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11da4:	84 72       	andi	r24, 0x24	; 36
   11da6:	99 27       	eor	r25, r25
   11da8:	89 2b       	or	r24, r25
   11daa:	51 f0       	breq	.+20     	; 0x11dc0 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11dac:	8a e2       	ldi	r24, 0x2A	; 42
   11dae:	92 e1       	ldi	r25, 0x12	; 18
   11db0:	a0 e0       	ldi	r26, 0x00	; 0
   11db2:	ed b7       	in	r30, 0x3d	; 61
   11db4:	fe b7       	in	r31, 0x3e	; 62
   11db6:	81 83       	std	Z+1, r24	; 0x01
   11db8:	92 83       	std	Z+2, r25	; 0x02
   11dba:	a3 83       	std	Z+3, r26	; 0x03
   11dbc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11dc0:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   11dc4:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   11dc8:	85 81       	ldd	r24, Z+5	; 0x05
   11dca:	90 e0       	ldi	r25, 0x00	; 0
   11dcc:	0e 94 2a ab 	call	0x15654	; 0x15654 <SS80_Selected_Device_Clear>
   11dd0:	43 c0       	rjmp	.+134    	; 0x11e58 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11dd2:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11dd6:	90 e0       	ldi	r25, 0x00	; 0
   11dd8:	4e dd       	rcall	.-1380   	; 0x11876 <AMIGO_is_MLA>
   11dda:	89 2b       	or	r24, r25
   11ddc:	d9 f1       	breq	.+118    	; 0x11e54 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dde:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11de2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11de6:	84 72       	andi	r24, 0x24	; 36
   11de8:	99 27       	eor	r25, r25
   11dea:	89 2b       	or	r24, r25
   11dec:	51 f0       	breq	.+20     	; 0x11e02 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11dee:	8d e1       	ldi	r24, 0x1D	; 29
   11df0:	92 e1       	ldi	r25, 0x12	; 18
   11df2:	a0 e0       	ldi	r26, 0x00	; 0
   11df4:	ed b7       	in	r30, 0x3d	; 61
   11df6:	fe b7       	in	r31, 0x3e	; 62
   11df8:	81 83       	std	Z+1, r24	; 0x01
   11dfa:	92 83       	std	Z+2, r25	; 0x02
   11dfc:	a3 83       	std	Z+3, r26	; 0x03
   11dfe:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11e02:	0e 94 30 b5 	call	0x16a60	; 0x16a60 <amigo_cmd_clear>
   11e06:	28 c0       	rjmp	.+80     	; 0x11e58 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11e08:	84 31       	cpi	r24, 0x14	; 20
   11e0a:	99 f4       	brne	.+38     	; 0x11e32 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e0c:	22 ff       	sbrs	r18, 2
   11e0e:	0a c0       	rjmp	.+20     	; 0x11e24 <GPIB+0x144>
            printf("[DCL]\n");
   11e10:	86 e1       	ldi	r24, 0x16	; 22
   11e12:	92 e1       	ldi	r25, 0x12	; 18
   11e14:	a0 e0       	ldi	r26, 0x00	; 0
   11e16:	ed b7       	in	r30, 0x3d	; 61
   11e18:	fe b7       	in	r31, 0x3e	; 62
   11e1a:	81 83       	std	Z+1, r24	; 0x01
   11e1c:	92 83       	std	Z+2, r25	; 0x02
   11e1e:	a3 83       	std	Z+3, r26	; 0x03
   11e20:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11e24:	0e 94 1c ab 	call	0x15638	; 0x15638 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11e28:	0e 94 30 b5 	call	0x16a60	; 0x16a60 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11e2c:	0e 94 4d bb 	call	0x1769a	; 0x1769a <printer_close>
   11e30:	11 c0       	rjmp	.+34     	; 0x11e54 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e32:	26 71       	andi	r18, 0x16	; 22
   11e34:	33 27       	eor	r19, r19
   11e36:	23 2b       	or	r18, r19
   11e38:	69 f0       	breq	.+26     	; 0x11e54 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11e3a:	90 e0       	ldi	r25, 0x00	; 0
   11e3c:	ed b7       	in	r30, 0x3d	; 61
   11e3e:	fe b7       	in	r31, 0x3e	; 62
   11e40:	95 83       	std	Z+5, r25	; 0x05
   11e42:	84 83       	std	Z+4, r24	; 0x04
   11e44:	85 ef       	ldi	r24, 0xF5	; 245
   11e46:	91 e1       	ldi	r25, 0x11	; 17
   11e48:	a0 e0       	ldi	r26, 0x00	; 0
   11e4a:	81 83       	std	Z+1, r24	; 0x01
   11e4c:	92 83       	std	Z+2, r25	; 0x02
   11e4e:	a3 83       	std	Z+3, r26	; 0x03
   11e50:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(0);
   11e54:	80 e0       	ldi	r24, 0x00	; 0
   11e56:	90 e0       	ldi	r25, 0x00	; 0
}
   11e58:	0f 90       	pop	r0
   11e5a:	0f 90       	pop	r0
   11e5c:	0f 90       	pop	r0
   11e5e:	0f 90       	pop	r0
   11e60:	0f 90       	pop	r0
   11e62:	08 95       	ret

00011e64 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11e64:	cf 93       	push	r28
   11e66:	df 93       	push	r29
   11e68:	00 d0       	rcall	.+0      	; 0x11e6a <GPIB_TALK+0x6>
   11e6a:	00 d0       	rcall	.+0      	; 0x11e6c <GPIB_TALK+0x8>
   11e6c:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11e6e:	90 91 cf 1e 	lds	r25, 0x1ECF	; 0x801ecf <talking>
   11e72:	90 93 d2 1e 	sts	0x1ED2, r25	; 0x801ed2 <talking_last>
    talking = ch;
   11e76:	80 93 cf 1e 	sts	0x1ECF, r24	; 0x801ecf <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11e7a:	8f 35       	cpi	r24, 0x5F	; 95
   11e7c:	79 f4       	brne	.+30     	; 0x11e9c <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e7e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11e82:	82 ff       	sbrs	r24, 2
   11e84:	7f c0       	rjmp	.+254    	; 0x11f84 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11e86:	82 ea       	ldi	r24, 0xA2	; 162
   11e88:	91 e1       	ldi	r25, 0x11	; 17
   11e8a:	a0 e0       	ldi	r26, 0x00	; 0
   11e8c:	ed b7       	in	r30, 0x3d	; 61
   11e8e:	fe b7       	in	r31, 0x3e	; 62
   11e90:	81 83       	std	Z+1, r24	; 0x01
   11e92:	92 83       	std	Z+2, r25	; 0x02
   11e94:	a3 83       	std	Z+3, r26	; 0x03
   11e96:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   11e9a:	74 c0       	rjmp	.+232    	; 0x11f84 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11e9c:	c8 2f       	mov	r28, r24
   11e9e:	d0 e0       	ldi	r29, 0x00	; 0
   11ea0:	ce 01       	movw	r24, r28
   11ea2:	c7 dc       	rcall	.-1650   	; 0x11832 <SS80_is_MTA>
   11ea4:	89 2b       	or	r24, r25
   11ea6:	e1 f0       	breq	.+56     	; 0x11ee0 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ea8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11eac:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11eb0:	84 72       	andi	r24, 0x24	; 36
   11eb2:	99 27       	eor	r25, r25
   11eb4:	89 2b       	or	r24, r25
   11eb6:	61 f0       	breq	.+24     	; 0x11ed0 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11eb8:	ed b7       	in	r30, 0x3d	; 61
   11eba:	fe b7       	in	r31, 0x3e	; 62
   11ebc:	d5 83       	std	Z+5, r29	; 0x05
   11ebe:	c4 83       	std	Z+4, r28	; 0x04
   11ec0:	81 e9       	ldi	r24, 0x91	; 145
   11ec2:	91 e1       	ldi	r25, 0x11	; 17
   11ec4:	a0 e0       	ldi	r26, 0x00	; 0
   11ec6:	81 83       	std	Z+1, r24	; 0x01
   11ec8:	92 83       	std	Z+2, r25	; 0x02
   11eca:	a3 83       	std	Z+3, r26	; 0x03
   11ecc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif

        if (spoll)
   11ed0:	80 91 cc 1e 	lds	r24, 0x1ECC	; 0x801ecc <spoll>
   11ed4:	88 23       	and	r24, r24
   11ed6:	09 f4       	brne	.+2      	; 0x11eda <GPIB_TALK+0x76>
   11ed8:	55 c0       	rjmp	.+170    	; 0x11f84 <GPIB_TALK+0x120>
        {
            SS80_Report();
   11eda:	0e 94 5e aa 	call	0x154bc	; 0x154bc <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11ede:	52 c0       	rjmp	.+164    	; 0x11f84 <GPIB_TALK+0x120>
   11ee0:	ce 01       	movw	r24, r28
   11ee2:	da dc       	rcall	.-1612   	; 0x11898 <AMIGO_is_MTA>
   11ee4:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ee6:	81 f0       	breq	.+32     	; 0x11f08 <GPIB_TALK+0xa4>
   11ee8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11eec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ef0:	84 72       	andi	r24, 0x24	; 36
   11ef2:	99 27       	eor	r25, r25
   11ef4:	89 2b       	or	r24, r25
   11ef6:	09 f4       	brne	.+2      	; 0x11efa <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11ef8:	45 c0       	rjmp	.+138    	; 0x11f84 <GPIB_TALK+0x120>
   11efa:	ed b7       	in	r30, 0x3d	; 61
   11efc:	fe b7       	in	r31, 0x3e	; 62
   11efe:	d5 83       	std	Z+5, r29	; 0x05
   11f00:	c4 83       	std	Z+4, r28	; 0x04
   11f02:	8f e7       	ldi	r24, 0x7F	; 127
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11f04:	91 e1       	ldi	r25, 0x11	; 17
   11f06:	38 c0       	rjmp	.+112    	; 0x11f78 <GPIB_TALK+0x114>
   11f08:	ce 01       	movw	r24, r28
   11f0a:	f9 dc       	rcall	.-1550   	; 0x118fe <PRINTER_is_MTA>
   11f0c:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f0e:	79 f0       	breq	.+30     	; 0x11f2e <GPIB_TALK+0xca>
   11f10:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11f14:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11f18:	84 72       	andi	r24, 0x24	; 36
   11f1a:	99 27       	eor	r25, r25
   11f1c:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11f1e:	91 f1       	breq	.+100    	; 0x11f84 <GPIB_TALK+0x120>
   11f20:	ed b7       	in	r30, 0x3d	; 61
   11f22:	fe b7       	in	r31, 0x3e	; 62
   11f24:	d5 83       	std	Z+5, r29	; 0x05
   11f26:	c4 83       	std	Z+4, r28	; 0x04
   11f28:	8b e6       	ldi	r24, 0x6B	; 107
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11f2a:	91 e1       	ldi	r25, 0x11	; 17
   11f2c:	25 c0       	rjmp	.+74     	; 0x11f78 <GPIB_TALK+0x114>
   11f2e:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   11f32:	90 e0       	ldi	r25, 0x00	; 0
   11f34:	d3 dc       	rcall	.-1626   	; 0x118dc <PRINTER_is_MLA>
   11f36:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11f3a:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f3e:	89 2b       	or	r24, r25
   11f40:	99 f0       	breq	.+38     	; 0x11f68 <GPIB_TALK+0x104>
   11f42:	24 72       	andi	r18, 0x24	; 36
   11f44:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   11f46:	23 2b       	or	r18, r19
   11f48:	51 f0       	breq	.+20     	; 0x11f5e <GPIB_TALK+0xfa>
   11f4a:	8b e5       	ldi	r24, 0x5B	; 91
   11f4c:	91 e1       	ldi	r25, 0x11	; 17
   11f4e:	a0 e0       	ldi	r26, 0x00	; 0
   11f50:	ed b7       	in	r30, 0x3d	; 61
   11f52:	fe b7       	in	r31, 0x3e	; 62
   11f54:	81 83       	std	Z+1, r24	; 0x01
   11f56:	92 83       	std	Z+2, r25	; 0x02
   11f58:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   11f5a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   11f5e:	80 e0       	ldi	r24, 0x00	; 0
   11f60:	90 e0       	ldi	r25, 0x00	; 0
   11f62:	0e 94 a5 bb 	call	0x1774a	; 0x1774a <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f66:	0e c0       	rjmp	.+28     	; 0x11f84 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11f68:	22 ff       	sbrs	r18, 2
   11f6a:	0c c0       	rjmp	.+24     	; 0x11f84 <GPIB_TALK+0x120>
   11f6c:	ed b7       	in	r30, 0x3d	; 61
   11f6e:	fe b7       	in	r31, 0x3e	; 62
   11f70:	d5 83       	std	Z+5, r29	; 0x05
   11f72:	c4 83       	std	Z+4, r28	; 0x04
   11f74:	8f e4       	ldi	r24, 0x4F	; 79
   11f76:	91 e1       	ldi	r25, 0x11	; 17
   11f78:	a0 e0       	ldi	r26, 0x00	; 0
   11f7a:	81 83       	std	Z+1, r24	; 0x01
   11f7c:	92 83       	std	Z+2, r25	; 0x02
   11f7e:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   11f80:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   11f84:	80 e0       	ldi	r24, 0x00	; 0
   11f86:	90 e0       	ldi	r25, 0x00	; 0
   11f88:	cd b7       	in	r28, 0x3d	; 61
   11f8a:	de b7       	in	r29, 0x3e	; 62
   11f8c:	25 96       	adiw	r28, 0x05	; 5
   11f8e:	e2 e0       	ldi	r30, 0x02	; 2
   11f90:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00011f94 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11f94:	a9 e0       	ldi	r26, 0x09	; 9
   11f96:	b0 e0       	ldi	r27, 0x00	; 0
   11f98:	e0 ed       	ldi	r30, 0xD0	; 208
   11f9a:	ff e8       	ldi	r31, 0x8F	; 143
   11f9c:	0c 94 a0 e0 	jmp	0x1c140	; 0x1c140 <__prologue_saves__+0x1e>
   11fa0:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11fa2:	c8 2f       	mov	r28, r24
   11fa4:	d0 e0       	ldi	r29, 0x00	; 0
   11fa6:	ce 01       	movw	r24, r28
   11fa8:	55 dc       	rcall	.-1878   	; 0x11854 <SS80_is_MSA>
   11faa:	89 2b       	or	r24, r25
   11fac:	09 f1       	breq	.+66     	; 0x11ff0 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fae:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11fb2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11fb6:	84 72       	andi	r24, 0x24	; 36
   11fb8:	99 27       	eor	r25, r25
   11fba:	89 2b       	or	r24, r25
   11fbc:	61 f0       	breq	.+24     	; 0x11fd6 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11fbe:	ed b7       	in	r30, 0x3d	; 61
   11fc0:	fe b7       	in	r31, 0x3e	; 62
   11fc2:	d5 83       	std	Z+5, r29	; 0x05
   11fc4:	c4 83       	std	Z+4, r28	; 0x04
   11fc6:	8e e3       	ldi	r24, 0x3E	; 62
   11fc8:	91 e1       	ldi	r25, 0x11	; 17
   11fca:	a0 e0       	ldi	r26, 0x00	; 0
   11fcc:	81 83       	std	Z+1, r24	; 0x01
   11fce:	92 83       	std	Z+2, r25	; 0x02
   11fd0:	a3 83       	std	Z+3, r26	; 0x03
   11fd2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11fd6:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   11fda:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   11fde:	81 81       	ldd	r24, Z+1	; 0x01
   11fe0:	90 e0       	ldi	r25, 0x00	; 0
   11fe2:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11fe6:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   11fea:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11fee:	25 c0       	rjmp	.+74     	; 0x1203a <GPIB_SECONDARY_ADDRESS+0xa6>
   11ff0:	ce 01       	movw	r24, r28
   11ff2:	63 dc       	rcall	.-1850   	; 0x118ba <AMIGO_is_MSA>
   11ff4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11ff8:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ffc:	89 2b       	or	r24, r25
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ffe:	11 f1       	breq	.+68     	; 0x12044 <GPIB_SECONDARY_ADDRESS+0xb0>
   12000:	c9 01       	movw	r24, r18
   12002:	84 72       	andi	r24, 0x24	; 36
   12004:	99 27       	eor	r25, r25
   12006:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12008:	61 f0       	breq	.+24     	; 0x12022 <GPIB_SECONDARY_ADDRESS+0x8e>
   1200a:	ed b7       	in	r30, 0x3d	; 61
   1200c:	fe b7       	in	r31, 0x3e	; 62
   1200e:	d5 83       	std	Z+5, r29	; 0x05
   12010:	c4 83       	std	Z+4, r28	; 0x04
   12012:	8c e2       	ldi	r24, 0x2C	; 44
   12014:	91 e1       	ldi	r25, 0x11	; 17
   12016:	a0 e0       	ldi	r26, 0x00	; 0
   12018:	81 83       	std	Z+1, r24	; 0x01
   1201a:	92 83       	std	Z+2, r25	; 0x02
   1201c:	a3 83       	std	Z+3, r26	; 0x03
   1201e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   12022:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   12026:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1202a:	81 81       	ldd	r24, Z+1	; 0x01
   1202c:	90 e0       	ldi	r25, 0x00	; 0
   1202e:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   12032:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   12036:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1203a:	64 81       	ldd	r22, Z+4	; 0x04
   1203c:	75 81       	ldd	r23, Z+5	; 0x05
   1203e:	81 2f       	mov	r24, r17
   12040:	ec dd       	rcall	.-1064   	; 0x11c1a <Send_Identify>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12042:	1d c0       	rjmp	.+58     	; 0x1207e <GPIB_SECONDARY_ADDRESS+0xea>
   12044:	c9 01       	movw	r24, r18
   12046:	84 72       	andi	r24, 0x24	; 36
   12048:	99 27       	eor	r25, r25
   1204a:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   1204c:	c1 f0       	breq	.+48     	; 0x1207e <GPIB_SECONDARY_ADDRESS+0xea>
   1204e:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   12052:	90 e0       	ldi	r25, 0x00	; 0
   12054:	ed b7       	in	r30, 0x3d	; 61
   12056:	fe b7       	in	r31, 0x3e	; 62
   12058:	91 87       	std	Z+9, r25	; 0x09
   1205a:	80 87       	std	Z+8, r24	; 0x08
   1205c:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   12060:	90 e0       	ldi	r25, 0x00	; 0
   12062:	97 83       	std	Z+7, r25	; 0x07
   12064:	86 83       	std	Z+6, r24	; 0x06
   12066:	d5 83       	std	Z+5, r29	; 0x05
   12068:	c4 83       	std	Z+4, r28	; 0x04
   1206a:	86 e0       	ldi	r24, 0x06	; 6
   1206c:	91 e1       	ldi	r25, 0x11	; 17
   1206e:	a0 e0       	ldi	r26, 0x00	; 0
   12070:	81 83       	std	Z+1, r24	; 0x01
   12072:	92 83       	std	Z+2, r25	; 0x02
   12074:	a3 83       	std	Z+3, r26	; 0x03
   12076:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   1207a:	80 e0       	ldi	r24, 0x00	; 0
}
   1207c:	90 e0       	ldi	r25, 0x00	; 0
   1207e:	cd b7       	in	r28, 0x3d	; 61
   12080:	de b7       	in	r29, 0x3e	; 62
   12082:	29 96       	adiw	r28, 0x09	; 9
   12084:	e3 e0       	ldi	r30, 0x03	; 3
   12086:	0c 94 bc e0 	jmp	0x1c178	; 0x1c178 <__epilogue_restores__+0x1e>

0001208a <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   1208a:	00 d0       	rcall	.+0      	; 0x1208c <listen_cleanup+0x2>
   1208c:	1f 92       	push	r1
    if(listening_last)
   1208e:	60 91 cb 1e 	lds	r22, 0x1ECB	; 0x801ecb <listening_last>
   12092:	66 23       	and	r22, r22
   12094:	e1 f0       	breq	.+56     	; 0x120ce <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   12096:	70 e0       	ldi	r23, 0x00	; 0
   12098:	40 e2       	ldi	r20, 0x20	; 32
   1209a:	50 e0       	ldi	r21, 0x00	; 0
   1209c:	84 e0       	ldi	r24, 0x04	; 4
   1209e:	90 e0       	ldi	r25, 0x00	; 0
   120a0:	9c d6       	rcall	.+3384   	; 0x12dda <find_device>
        if(index == -1)
   120a2:	01 96       	adiw	r24, 0x01	; 1
   120a4:	a1 f0       	breq	.+40     	; 0x120ce <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   120aa:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   120ae:	84 72       	andi	r24, 0x24	; 36
   120b0:	99 27       	eor	r25, r25
   120b2:	89 2b       	or	r24, r25
   120b4:	51 f0       	breq	.+20     	; 0x120ca <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   120b6:	85 ef       	ldi	r24, 0xF5	; 245
   120b8:	90 e1       	ldi	r25, 0x10	; 16
   120ba:	a0 e0       	ldi	r26, 0x00	; 0
   120bc:	ed b7       	in	r30, 0x3d	; 61
   120be:	fe b7       	in	r31, 0x3e	; 62
   120c0:	81 83       	std	Z+1, r24	; 0x01
   120c2:	92 83       	std	Z+2, r25	; 0x02
   120c4:	a3 83       	std	Z+3, r26	; 0x03
   120c6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printer_close();
   120ca:	0e 94 4d bb 	call	0x1769a	; 0x1769a <printer_close>
    }
}
   120ce:	0f 90       	pop	r0
   120d0:	0f 90       	pop	r0
   120d2:	0f 90       	pop	r0
   120d4:	08 95       	ret

000120d6 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   120d6:	cf 93       	push	r28
   120d8:	df 93       	push	r29
   120da:	00 d0       	rcall	.+0      	; 0x120dc <GPIB_LISTEN+0x6>
   120dc:	00 d0       	rcall	.+0      	; 0x120de <GPIB_LISTEN+0x8>
   120de:	1f 92       	push	r1
   120e0:	c8 2f       	mov	r28, r24
    listening_last = listening;
   120e2:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   120e6:	80 93 cb 1e 	sts	0x1ECB, r24	; 0x801ecb <listening_last>
    listening = ch;
   120ea:	c0 93 d1 1e 	sts	0x1ED1, r28	; 0x801ed1 <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   120ee:	cd df       	rcall	.-102    	; 0x1208a <listen_cleanup>
   120f0:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   120f2:	19 f5       	brne	.+70     	; 0x1213a <GPIB_LISTEN+0x64>
   120f4:	10 92 d1 1e 	sts	0x1ED1, r1	; 0x801ed1 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120f8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   120fc:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   120fe:	74 c0       	rjmp	.+232    	; 0x121e8 <GPIB_LISTEN+0x112>
   12100:	8e ee       	ldi	r24, 0xEE	; 238
   12102:	91 e1       	ldi	r25, 0x11	; 17
   12104:	a0 e0       	ldi	r26, 0x00	; 0
   12106:	ed b7       	in	r30, 0x3d	; 61
   12108:	fe b7       	in	r31, 0x3e	; 62
   1210a:	81 83       	std	Z+1, r24	; 0x01
   1210c:	92 83       	std	Z+2, r25	; 0x02
   1210e:	a3 83       	std	Z+3, r26	; 0x03
   12110:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   12114:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <lastcmd>
   12118:	90 91 ca 1c 	lds	r25, 0x1CCA	; 0x801cca <lastcmd+0x1>
   1211c:	8f 35       	cpi	r24, 0x5F	; 95
   1211e:	91 05       	cpc	r25, r1
   12120:	09 f0       	breq	.+2      	; 0x12124 <GPIB_LISTEN+0x4e>
                printf("\n");
   12122:	62 c0       	rjmp	.+196    	; 0x121e8 <GPIB_LISTEN+0x112>
   12124:	8c ee       	ldi	r24, 0xEC	; 236
   12126:	91 e1       	ldi	r25, 0x11	; 17
   12128:	a0 e0       	ldi	r26, 0x00	; 0
   1212a:	ed b7       	in	r30, 0x3d	; 61
   1212c:	fe b7       	in	r31, 0x3e	; 62
   1212e:	81 83       	std	Z+1, r24	; 0x01
   12130:	92 83       	std	Z+2, r25	; 0x02
   12132:	a3 83       	std	Z+3, r26	; 0x03
   12134:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12138:	57 c0       	rjmp	.+174    	; 0x121e8 <GPIB_LISTEN+0x112>
   1213a:	d0 e0       	ldi	r29, 0x00	; 0
   1213c:	ce 01       	movw	r24, r28
   1213e:	9b db       	rcall	.-2250   	; 0x11876 <AMIGO_is_MLA>
   12140:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12142:	81 f0       	breq	.+32     	; 0x12164 <GPIB_LISTEN+0x8e>
   12144:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12148:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1214c:	84 72       	andi	r24, 0x24	; 36
   1214e:	99 27       	eor	r25, r25
   12150:	89 2b       	or	r24, r25
   12152:	09 f4       	brne	.+2      	; 0x12156 <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   12154:	49 c0       	rjmp	.+146    	; 0x121e8 <GPIB_LISTEN+0x112>
   12156:	ed b7       	in	r30, 0x3d	; 61
   12158:	fe b7       	in	r31, 0x3e	; 62
   1215a:	d5 83       	std	Z+5, r29	; 0x05
   1215c:	c4 83       	std	Z+4, r28	; 0x04
   1215e:	8a ed       	ldi	r24, 0xDA	; 218
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12160:	91 e1       	ldi	r25, 0x11	; 17
   12162:	3c c0       	rjmp	.+120    	; 0x121dc <GPIB_LISTEN+0x106>
   12164:	ce 01       	movw	r24, r28
   12166:	54 db       	rcall	.-2392   	; 0x11810 <SS80_is_MLA>
   12168:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1216a:	79 f0       	breq	.+30     	; 0x1218a <GPIB_LISTEN+0xb4>
   1216c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12170:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12174:	84 72       	andi	r24, 0x24	; 36
   12176:	99 27       	eor	r25, r25
   12178:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   1217a:	b1 f1       	breq	.+108    	; 0x121e8 <GPIB_LISTEN+0x112>
   1217c:	ed b7       	in	r30, 0x3d	; 61
   1217e:	fe b7       	in	r31, 0x3e	; 62
   12180:	d5 83       	std	Z+5, r29	; 0x05
   12182:	c4 83       	std	Z+4, r28	; 0x04
   12184:	89 ec       	ldi	r24, 0xC9	; 201
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   12186:	91 e1       	ldi	r25, 0x11	; 17
   12188:	29 c0       	rjmp	.+82     	; 0x121dc <GPIB_LISTEN+0x106>
   1218a:	ce 01       	movw	r24, r28
   1218c:	a7 db       	rcall	.-2226   	; 0x118dc <PRINTER_is_MLA>
   1218e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12192:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12196:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12198:	c9 f0       	breq	.+50     	; 0x121cc <GPIB_LISTEN+0xf6>
   1219a:	24 72       	andi	r18, 0x24	; 36
   1219c:	33 27       	eor	r19, r19
   1219e:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   121a0:	61 f0       	breq	.+24     	; 0x121ba <GPIB_LISTEN+0xe4>
   121a2:	ed b7       	in	r30, 0x3d	; 61
   121a4:	fe b7       	in	r31, 0x3e	; 62
   121a6:	d5 83       	std	Z+5, r29	; 0x05
   121a8:	c4 83       	std	Z+4, r28	; 0x04
   121aa:	85 eb       	ldi	r24, 0xB5	; 181
   121ac:	91 e1       	ldi	r25, 0x11	; 17
   121ae:	a0 e0       	ldi	r26, 0x00	; 0
   121b0:	81 83       	std	Z+1, r24	; 0x01
   121b2:	92 83       	std	Z+2, r25	; 0x02
   121b4:	a3 83       	std	Z+3, r26	; 0x03
   121b6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
        if(talking != UNT)
   121ba:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   121be:	8f 35       	cpi	r24, 0x5F	; 95
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   121c0:	99 f0       	breq	.+38     	; 0x121e8 <GPIB_LISTEN+0x112>
   121c2:	80 e0       	ldi	r24, 0x00	; 0
   121c4:	90 e0       	ldi	r25, 0x00	; 0
   121c6:	0e 94 a5 bb 	call	0x1774a	; 0x1774a <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   121ca:	0e c0       	rjmp	.+28     	; 0x121e8 <GPIB_LISTEN+0x112>
   121cc:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   121ce:	0c c0       	rjmp	.+24     	; 0x121e8 <GPIB_LISTEN+0x112>
   121d0:	ed b7       	in	r30, 0x3d	; 61
   121d2:	fe b7       	in	r31, 0x3e	; 62
   121d4:	d5 83       	std	Z+5, r29	; 0x05
   121d6:	c4 83       	std	Z+4, r28	; 0x04
   121d8:	89 ea       	ldi	r24, 0xA9	; 169
   121da:	91 e1       	ldi	r25, 0x11	; 17
   121dc:	a0 e0       	ldi	r26, 0x00	; 0
   121de:	81 83       	std	Z+1, r24	; 0x01
   121e0:	92 83       	std	Z+2, r25	; 0x02
   121e2:	a3 83       	std	Z+3, r26	; 0x03
   121e4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   121e8:	80 e0       	ldi	r24, 0x00	; 0
   121ea:	90 e0       	ldi	r25, 0x00	; 0
   121ec:	cd b7       	in	r28, 0x3d	; 61
   121ee:	de b7       	in	r29, 0x3e	; 62
   121f0:	25 96       	adiw	r28, 0x05	; 5
   121f2:	e2 e0       	ldi	r30, 0x02	; 2
   121f4:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000121f8 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   121f8:	cf 93       	push	r28
   121fa:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_state_init();                            // Init PPR talking and listening states
   121fc:	0e 94 bf 85 	call	0x10b7e	; 0x10b7e <gpib_state_init>
    gpib_init_devices();                          // Init devices

    gpib_log_fp = NULL;
   12200:	8f db       	rcall	.-2274   	; 0x11920 <gpib_init_devices>
   12202:	10 92 49 19 	sts	0x1949, r1	; 0x801949 <gpib_log_fp+0x1>
   12206:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <gpib_log_fp>

    while(1)
    {

        val = gpib_read_byte(NO_TRACE);
   1220a:	80 e0       	ldi	r24, 0x00	; 0
   1220c:	90 e0       	ldi	r25, 0x00	; 0
   1220e:	c2 d8       	rcall	.-3708   	; 0x11394 <gpib_read_byte>

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12210:	ec 01       	movw	r28, r24
   12212:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
            gpib_decode(val);
   12216:	83 ff       	sbrs	r24, 3
   12218:	02 c0       	rjmp	.+4      	; 0x1221e <gpib_task+0x26>
#endif
        status = gpib_error_test(val);
   1221a:	ce 01       	movw	r24, r28
   1221c:	91 d9       	rcall	.-3294   	; 0x11540 <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   1221e:	ce 01       	movw	r24, r28
   12220:	1b dc       	rcall	.-1994   	; 0x11a58 <gpib_error_test>
   12222:	9c 01       	movw	r18, r24
   12224:	23 70       	andi	r18, 0x03	; 3
   12226:	33 27       	eor	r19, r19
   12228:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   1222a:	09 f0       	breq	.+2      	; 0x1222e <gpib_task+0x36>
   1222c:	43 c0       	rjmp	.+134    	; 0x122b4 <gpib_task+0xbc>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   1222e:	89 2b       	or	r24, r25
   12230:	61 f7       	brne	.-40     	; 0x1220a <gpib_task+0x12>
        {
            ch = val & CMD_MASK;
   12232:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   12234:	26 c0       	rjmp	.+76     	; 0x12282 <gpib_task+0x8a>
            {
                GPIB(ch);
   12236:	8c 2f       	mov	r24, r28
   12238:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   1223a:	80 32       	cpi	r24, 0x20	; 32
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   1223c:	10 f4       	brcc	.+4      	; 0x12242 <gpib_task+0x4a>
   1223e:	50 dd       	rcall	.-1376   	; 0x11ce0 <GPIB>
   12240:	e4 cf       	rjmp	.-56     	; 0x1220a <gpib_task+0x12>
            {
                GPIB_LISTEN(ch);
   12242:	90 ee       	ldi	r25, 0xE0	; 224
   12244:	98 0f       	add	r25, r24
                continue;
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12246:	90 32       	cpi	r25, 0x20	; 32
   12248:	10 f4       	brcc	.+4      	; 0x1224e <gpib_task+0x56>
   1224a:	45 df       	rcall	.-374    	; 0x120d6 <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   1224c:	de cf       	rjmp	.-68     	; 0x1220a <gpib_task+0x12>
   1224e:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   12250:	98 0f       	add	r25, r24
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12252:	90 32       	cpi	r25, 0x20	; 32
   12254:	10 f4       	brcc	.+4      	; 0x1225a <gpib_task+0x62>
   12256:	06 de       	rcall	.-1012   	; 0x11e64 <GPIB_TALK>
   12258:	d8 cf       	rjmp	.-80     	; 0x1220a <gpib_task+0x12>
   1225a:	90 91 d1 1e 	lds	r25, 0x1ED1	; 0x801ed1 <listening>
   1225e:	99 23       	and	r25, r25
   12260:	59 f0       	breq	.+22     	; 0x12278 <gpib_task+0x80>
   12262:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <lastcmd>
            {
                secondary = 0;
   12266:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   1226a:	2f 35       	cpi	r18, 0x5F	; 95
   1226c:	31 05       	cpc	r19, r1
                continue;
   1226e:	21 f4       	brne	.+8      	; 0x12278 <gpib_task+0x80>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12270:	10 92 d0 1e 	sts	0x1ED0, r1	; 0x801ed0 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12274:	8f de       	rcall	.-738    	; 0x11f94 <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12276:	c9 cf       	rjmp	.-110    	; 0x1220a <gpib_task+0x12>
   12278:	80 93 d0 1e 	sts	0x1ED0, r24	; 0x801ed0 <secondary>
   1227c:	60 e0       	ldi	r22, 0x00	; 0
   1227e:	90 e0       	ldi	r25, 0x00	; 0
   12280:	12 c0       	rjmp	.+36     	; 0x122a6 <gpib_task+0xae>
   12282:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
            {
                printer_buffer( 0xff & val );
   12286:	90 e0       	ldi	r25, 0x00	; 0
   12288:	29 db       	rcall	.-2478   	; 0x118dc <PRINTER_is_MLA>
   1228a:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   1228c:	29 f0       	breq	.+10     	; 0x12298 <gpib_task+0xa0>
   1228e:	ce 01       	movw	r24, r28
   12290:	99 27       	eor	r25, r25
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12292:	0e 94 48 bc 	call	0x17890	; 0x17890 <printer_buffer>
   12296:	b9 cf       	rjmp	.-142    	; 0x1220a <gpib_task+0x12>
   12298:	80 91 d0 1e 	lds	r24, 0x1ED0	; 0x801ed0 <secondary>
            status = gpib_error_test(status);
   1229c:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1229e:	09 f4       	brne	.+2      	; 0x122a2 <gpib_task+0xaa>
   122a0:	b4 cf       	rjmp	.-152    	; 0x1220a <gpib_task+0x12>
   122a2:	61 e0       	ldi	r22, 0x01	; 1
   122a4:	ce 01       	movw	r24, r28
   122a6:	65 dc       	rcall	.-1846   	; 0x11b72 <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   122a8:	d7 db       	rcall	.-2130   	; 0x11a58 <gpib_error_test>
   122aa:	83 70       	andi	r24, 0x03	; 3
   122ac:	99 27       	eor	r25, r25
   122ae:	89 2b       	or	r24, r25
   122b0:	09 f4       	brne	.+2      	; 0x122b4 <gpib_task+0xbc>
   122b2:	ab cf       	rjmp	.-170    	; 0x1220a <gpib_task+0x12>
   122b4:	df 91       	pop	r29
   122b6:	cf 91       	pop	r28
   122b8:	08 95       	ret

000122ba <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   122ba:	08 95       	ret

000122bc <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   122bc:	cf 93       	push	r28
   122be:	df 93       	push	r29
   122c0:	00 d0       	rcall	.+0      	; 0x122c2 <gpib_help+0x6>
   122c2:	1f 92       	push	r1
   122c4:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   122c6:	8f e7       	ldi	r24, 0x7F	; 127
   122c8:	95 e1       	ldi	r25, 0x15	; 21
   122ca:	a0 e0       	ldi	r26, 0x00	; 0
   122cc:	ed b7       	in	r30, 0x3d	; 61
   122ce:	fe b7       	in	r31, 0x3e	; 62
   122d0:	81 83       	std	Z+1, r24	; 0x01
   122d2:	92 83       	std	Z+2, r25	; 0x02
   122d4:	a3 83       	std	Z+3, r26	; 0x03
   122d6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    if(full)
   122da:	cd 2b       	or	r28, r29
   122dc:	51 f0       	breq	.+20     	; 0x122f2 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   122de:	86 eb       	ldi	r24, 0xB6	; 182
   122e0:	93 e1       	ldi	r25, 0x13	; 19
   122e2:	a0 e0       	ldi	r26, 0x00	; 0
   122e4:	ed b7       	in	r30, 0x3d	; 61
   122e6:	fe b7       	in	r31, 0x3e	; 62
   122e8:	81 83       	std	Z+1, r24	; 0x01
   122ea:	92 83       	std	Z+2, r25	; 0x02
   122ec:	a3 83       	std	Z+3, r26	; 0x03
   122ee:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   122f2:	cd b7       	in	r28, 0x3d	; 61
   122f4:	de b7       	in	r29, 0x3e	; 62
   122f6:	23 96       	adiw	r28, 0x03	; 3
   122f8:	e2 e0       	ldi	r30, 0x02	; 2
   122fa:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000122fe <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   122fe:	a5 e0       	ldi	r26, 0x05	; 5
   12300:	b0 e0       	ldi	r27, 0x00	; 0
   12302:	e5 e8       	ldi	r30, 0x85	; 133
   12304:	f1 e9       	ldi	r31, 0x91	; 145
   12306:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1230a:	fb 01       	movw	r30, r22
   1230c:	e0 80       	ld	r14, Z
   1230e:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12310:	e1 14       	cp	r14, r1
   12312:	f1 04       	cpc	r15, r1
   12314:	19 f4       	brne	.+6      	; 0x1231c <gpib_tests+0x1e>
        return(0);
   12316:	80 e0       	ldi	r24, 0x00	; 0
   12318:	90 e0       	ldi	r25, 0x00	; 0
   1231a:	dc c0       	rjmp	.+440    	; 0x124d4 <gpib_tests+0x1d6>
   1231c:	6b 01       	movw	r12, r22
   1231e:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12320:	65 e8       	ldi	r22, 0x85	; 133
   12322:	7d e0       	ldi	r23, 0x0D	; 13
   12324:	c7 01       	movw	r24, r14
   12326:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   1232a:	89 2b       	or	r24, r25
   1232c:	a1 f0       	breq	.+40     	; 0x12356 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   1232e:	f6 01       	movw	r30, r12
   12330:	e2 80       	ldd	r14, Z+2	; 0x02
   12332:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12334:	e1 14       	cp	r14, r1
   12336:	f1 04       	cpc	r15, r1
   12338:	21 f4       	brne	.+8      	; 0x12342 <gpib_tests+0x44>
        {
            gpib_help(1);
   1233a:	81 e0       	ldi	r24, 0x01	; 1
   1233c:	90 e0       	ldi	r25, 0x00	; 0
   1233e:	be df       	rcall	.-132    	; 0x122bc <gpib_help>
   12340:	c7 c0       	rjmp	.+398    	; 0x124d0 <gpib_tests+0x1d2>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12342:	63 e6       	ldi	r22, 0x63	; 99
   12344:	76 e1       	ldi	r23, 0x16	; 22
   12346:	c7 01       	movw	r24, r14
   12348:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   1234c:	89 2b       	or	r24, r25
   1234e:	a9 f7       	brne	.-22     	; 0x1233a <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12350:	c2 e0       	ldi	r28, 0x02	; 2
   12352:	d0 e0       	ldi	r29, 0x00	; 0
   12354:	02 c0       	rjmp	.+4      	; 0x1235a <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12356:	c1 e0       	ldi	r28, 0x01	; 1
   12358:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1235a:	6a e8       	ldi	r22, 0x8A	; 138
   1235c:	7d e0       	ldi	r23, 0x0D	; 13
   1235e:	c7 01       	movw	r24, r14
   12360:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   12364:	89 2b       	or	r24, r25
   12366:	29 f1       	breq	.+74     	; 0x123b2 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12368:	fe 01       	movw	r30, r28
   1236a:	ee 0f       	add	r30, r30
   1236c:	ff 1f       	adc	r31, r31
   1236e:	ec 0d       	add	r30, r12
   12370:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12372:	01 90       	ld	r0, Z+
   12374:	f0 81       	ld	r31, Z
   12376:	e0 2d       	mov	r30, r0
   12378:	80 81       	ld	r24, Z
   1237a:	8d 33       	cpi	r24, 0x3D	; 61
   1237c:	09 f4       	brne	.+2      	; 0x12380 <gpib_tests+0x82>
            ++ind;
   1237e:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12380:	cc 0f       	add	r28, r28
   12382:	dd 1f       	adc	r29, r29
   12384:	cc 0d       	add	r28, r12
   12386:	dd 1d       	adc	r29, r13
   12388:	88 81       	ld	r24, Y
   1238a:	99 81       	ldd	r25, Y+1	; 0x01
   1238c:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   12390:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   12394:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12398:	ed b7       	in	r30, 0x3d	; 61
   1239a:	fe b7       	in	r31, 0x3e	; 62
   1239c:	75 83       	std	Z+5, r23	; 0x05
   1239e:	64 83       	std	Z+4, r22	; 0x04
   123a0:	89 ea       	ldi	r24, 0xA9	; 169
   123a2:	93 e1       	ldi	r25, 0x13	; 19
   123a4:	a0 e0       	ldi	r26, 0x00	; 0
   123a6:	81 83       	std	Z+1, r24	; 0x01
   123a8:	92 83       	std	Z+2, r25	; 0x02
   123aa:	a3 83       	std	Z+3, r26	; 0x03
   123ac:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   123b0:	8f c0       	rjmp	.+286    	; 0x124d0 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   123b2:	60 e9       	ldi	r22, 0x90	; 144
   123b4:	7d e0       	ldi	r23, 0x0D	; 13
   123b6:	c7 01       	movw	r24, r14
   123b8:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   123bc:	89 2b       	or	r24, r25
   123be:	c9 f0       	breq	.+50     	; 0x123f2 <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   123c0:	cc 0f       	add	r28, r28
   123c2:	dd 1f       	adc	r29, r29
   123c4:	cc 0d       	add	r28, r12
   123c6:	dd 1d       	adc	r29, r13
   123c8:	88 81       	ld	r24, Y
   123ca:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   123cc:	00 97       	sbiw	r24, 0x00	; 0
   123ce:	69 f0       	breq	.+26     	; 0x123ea <gpib_tests+0xec>
   123d0:	fc 01       	movw	r30, r24
   123d2:	20 81       	ld	r18, Z
   123d4:	22 23       	and	r18, r18
   123d6:	49 f0       	breq	.+18     	; 0x123ea <gpib_tests+0xec>
   123d8:	6a e9       	ldi	r22, 0x9A	; 154
   123da:	7d e0       	ldi	r23, 0x0D	; 13
   123dc:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   123e0:	89 2b       	or	r24, r25
   123e2:	19 f0       	breq	.+6      	; 0x123ea <gpib_tests+0xec>
            display_Addresses(1);
   123e4:	81 e0       	ldi	r24, 0x01	; 1
   123e6:	90 e0       	ldi	r25, 0x00	; 0
   123e8:	02 c0       	rjmp	.+4      	; 0x123ee <gpib_tests+0xf0>
        else
            display_Addresses(0);
   123ea:	80 e0       	ldi	r24, 0x00	; 0
   123ec:	90 e0       	ldi	r25, 0x00	; 0
   123ee:	54 d1       	rcall	.+680    	; 0x12698 <display_Addresses>
   123f0:	6f c0       	rjmp	.+222    	; 0x124d0 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   123f2:	6d e9       	ldi	r22, 0x9D	; 157
   123f4:	7d e0       	ldi	r23, 0x0D	; 13
   123f6:	c7 01       	movw	r24, r14
   123f8:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   123fc:	89 2b       	or	r24, r25
   123fe:	c9 f0       	breq	.+50     	; 0x12432 <gpib_tests+0x134>
    {
        ptr = argv[ind];
   12400:	cc 0f       	add	r28, r28
   12402:	dd 1f       	adc	r29, r29
   12404:	cc 0d       	add	r28, r12
   12406:	dd 1d       	adc	r29, r13
   12408:	88 81       	ld	r24, Y
   1240a:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1240c:	00 97       	sbiw	r24, 0x00	; 0
   1240e:	69 f0       	breq	.+26     	; 0x1242a <gpib_tests+0x12c>
   12410:	fc 01       	movw	r30, r24
   12412:	20 81       	ld	r18, Z
   12414:	22 23       	and	r18, r18
   12416:	49 f0       	breq	.+18     	; 0x1242a <gpib_tests+0x12c>
   12418:	6a e9       	ldi	r22, 0x9A	; 154
   1241a:	7d e0       	ldi	r23, 0x0D	; 13
   1241c:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   12420:	89 2b       	or	r24, r25
   12422:	19 f0       	breq	.+6      	; 0x1242a <gpib_tests+0x12c>
            display_Config(1);
   12424:	81 e0       	ldi	r24, 0x01	; 1
   12426:	90 e0       	ldi	r25, 0x00	; 0
        else
            display_Config(0);
   12428:	02 c0       	rjmp	.+4      	; 0x1242e <gpib_tests+0x130>
   1242a:	80 e0       	ldi	r24, 0x00	; 0
   1242c:	90 e0       	ldi	r25, 0x00	; 0
   1242e:	0f d2       	rcall	.+1054   	; 0x1284e <display_Config>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12430:	4f c0       	rjmp	.+158    	; 0x124d0 <gpib_tests+0x1d2>
   12432:	64 ea       	ldi	r22, 0xA4	; 164
   12434:	7d e0       	ldi	r23, 0x0D	; 13
   12436:	c7 01       	movw	r24, r14
   12438:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   1243c:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_begin();
   1243e:	19 f0       	breq	.+6      	; 0x12446 <gpib_tests+0x148>
   12440:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12444:	45 c0       	rjmp	.+138    	; 0x124d0 <gpib_tests+0x1d2>
   12446:	62 eb       	ldi	r22, 0xB2	; 178
   12448:	7d e0       	ldi	r23, 0x0D	; 13
   1244a:	c7 01       	movw	r24, r14
   1244c:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   12450:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12452:	29 f0       	breq	.+10     	; 0x1245e <gpib_tests+0x160>
   12454:	8a eb       	ldi	r24, 0xBA	; 186
   12456:	9d e0       	ldi	r25, 0x0D	; 13
   12458:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
        return(1);
    }

    if ( MATCHI(ptr, "ifc") )
   1245c:	39 c0       	rjmp	.+114    	; 0x124d0 <gpib_tests+0x1d2>
   1245e:	68 ec       	ldi	r22, 0xC8	; 200
   12460:	7d e0       	ldi	r23, 0x0D	; 13
   12462:	c7 01       	movw	r24, r14
   12464:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   12468:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   1246a:	19 f0       	breq	.+6      	; 0x12472 <gpib_tests+0x174>
   1246c:	0e 94 58 86 	call	0x10cb0	; 0x10cb0 <gpib_assert_ifc>
        return(1);

    }

    if (MATCHI(ptr,"task") )
   12470:	2f c0       	rjmp	.+94     	; 0x124d0 <gpib_tests+0x1d2>
   12472:	6c ec       	ldi	r22, 0xCC	; 204
   12474:	7d e0       	ldi	r23, 0x0D	; 13
   12476:	c7 01       	movw	r24, r14
   12478:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
    {
        gpib_task();
   1247c:	89 2b       	or	r24, r25
   1247e:	11 f0       	breq	.+4      	; 0x12484 <gpib_tests+0x186>
   12480:	bb de       	rcall	.-650    	; 0x121f8 <gpib_task>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12482:	26 c0       	rjmp	.+76     	; 0x124d0 <gpib_tests+0x1d2>
   12484:	8e 01       	movw	r16, r28
   12486:	0f 5f       	subi	r16, 0xFF	; 255
   12488:	1f 4f       	sbci	r17, 0xFF	; 255
   1248a:	95 01       	movw	r18, r10
   1248c:	a8 01       	movw	r20, r16
   1248e:	61 ed       	ldi	r22, 0xD1	; 209
   12490:	7d e0       	ldi	r23, 0x0D	; 13
   12492:	c7 01       	movw	r24, r14
   12494:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   12498:	89 2b       	or	r24, r25
   1249a:	09 f4       	brne	.+2      	; 0x1249e <gpib_tests+0x1a0>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1249c:	3c cf       	rjmp	.-392    	; 0x12316 <gpib_tests+0x18>
   1249e:	00 0f       	add	r16, r16
   124a0:	11 1f       	adc	r17, r17
   124a2:	e6 01       	movw	r28, r12
   124a4:	c0 0f       	add	r28, r16
   124a6:	d1 1f       	adc	r29, r17
   124a8:	88 81       	ld	r24, Y
   124aa:	99 81       	ldd	r25, Y+1	; 0x01
   124ac:	00 97       	sbiw	r24, 0x00	; 0
   124ae:	51 f0       	breq	.+20     	; 0x124c4 <gpib_tests+0x1c6>
   124b0:	67 ed       	ldi	r22, 0xD7	; 215
   124b2:	7d e0       	ldi	r23, 0x0D	; 13
   124b4:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   124b8:	61 e0       	ldi	r22, 0x01	; 1
   124ba:	70 e0       	ldi	r23, 0x00	; 0
   124bc:	89 2b       	or	r24, r25
   124be:	21 f4       	brne	.+8      	; 0x124c8 <gpib_tests+0x1ca>
   124c0:	60 e0       	ldi	r22, 0x00	; 0
   124c2:	02 c0       	rjmp	.+4      	; 0x124c8 <gpib_tests+0x1ca>
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   124c4:	60 e0       	ldi	r22, 0x00	; 0
   124c6:	70 e0       	ldi	r23, 0x00	; 0
   124c8:	22 97       	sbiw	r28, 0x02	; 2
   124ca:	88 81       	ld	r24, Y
   124cc:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   124ce:	31 da       	rcall	.-2974   	; 0x11932 <gpib_trace_task>
   124d0:	81 e0       	ldi	r24, 0x01	; 1

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   124d2:	90 e0       	ldi	r25, 0x00	; 0
   124d4:	cd b7       	in	r28, 0x3d	; 61
   124d6:	de b7       	in	r29, 0x3e	; 62
   124d8:	25 96       	adiw	r28, 0x05	; 5
   124da:	ea e0       	ldi	r30, 0x0A	; 10
   124dc:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

000124e0 <tok_index>:
   124e0:	ef 92       	push	r14
   124e2:	ff 92       	push	r15
   124e4:	0f 93       	push	r16
   124e6:	1f 93       	push	r17
   124e8:	cf 93       	push	r28
   124ea:	df 93       	push	r29
   124ec:	7c 01       	movw	r14, r24
   124ee:	c1 ed       	ldi	r28, 0xD1	; 209
   124f0:	d1 e0       	ldi	r29, 0x01	; 1
   124f2:	00 e0       	ldi	r16, 0x00	; 0
   124f4:	10 e0       	ldi	r17, 0x00	; 0
   124f6:	8a 81       	ldd	r24, Y+2	; 0x02
   124f8:	9b 81       	ldd	r25, Y+3	; 0x03
   124fa:	8f 3f       	cpi	r24, 0xFF	; 255
   124fc:	2f ef       	ldi	r18, 0xFF	; 255
   124fe:	92 07       	cpc	r25, r18
   12500:	61 f0       	breq	.+24     	; 0x1251a <tok_index+0x3a>
   12502:	68 81       	ld	r22, Y
   12504:	79 81       	ldd	r23, Y+1	; 0x01
   12506:	c7 01       	movw	r24, r14
   12508:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   1250c:	24 96       	adiw	r28, 0x04	; 4
   1250e:	89 2b       	or	r24, r25
   12510:	19 f4       	brne	.+6      	; 0x12518 <tok_index+0x38>
   12512:	0f 5f       	subi	r16, 0xFF	; 255
   12514:	1f 4f       	sbci	r17, 0xFF	; 255
   12516:	ef cf       	rjmp	.-34     	; 0x124f6 <tok_index+0x16>
   12518:	c8 01       	movw	r24, r16
   1251a:	cd b7       	in	r28, 0x3d	; 61
   1251c:	de b7       	in	r29, 0x3e	; 62
   1251e:	e6 e0       	ldi	r30, 0x06	; 6
   12520:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00012524 <tok_name>:
   12524:	e1 ed       	ldi	r30, 0xD1	; 209
   12526:	f1 e0       	ldi	r31, 0x01	; 1
   12528:	20 e0       	ldi	r18, 0x00	; 0
   1252a:	30 e0       	ldi	r19, 0x00	; 0
   1252c:	90 e0       	ldi	r25, 0x00	; 0
   1252e:	42 81       	ldd	r20, Z+2	; 0x02
   12530:	53 81       	ldd	r21, Z+3	; 0x03
   12532:	4f 3f       	cpi	r20, 0xFF	; 255
   12534:	6f ef       	ldi	r22, 0xFF	; 255
   12536:	56 07       	cpc	r21, r22
   12538:	89 f0       	breq	.+34     	; 0x1255c <tok_name+0x38>
   1253a:	34 96       	adiw	r30, 0x04	; 4
   1253c:	48 17       	cp	r20, r24
   1253e:	59 07       	cpc	r21, r25
   12540:	51 f4       	brne	.+20     	; 0x12556 <tok_name+0x32>
   12542:	22 0f       	add	r18, r18
   12544:	33 1f       	adc	r19, r19
   12546:	22 0f       	add	r18, r18
   12548:	33 1f       	adc	r19, r19
   1254a:	f9 01       	movw	r30, r18
   1254c:	ef 52       	subi	r30, 0x2F	; 47
   1254e:	fe 4f       	sbci	r31, 0xFE	; 254
   12550:	80 81       	ld	r24, Z
   12552:	91 81       	ldd	r25, Z+1	; 0x01
   12554:	08 95       	ret
   12556:	2f 5f       	subi	r18, 0xFF	; 255
   12558:	3f 4f       	sbci	r19, 0xFF	; 255
   1255a:	e9 cf       	rjmp	.-46     	; 0x1252e <tok_name+0xa>
   1255c:	8c e0       	ldi	r24, 0x0C	; 12
   1255e:	97 e1       	ldi	r25, 0x17	; 23
   12560:	08 95       	ret

00012562 <print_tok_val>:
   12562:	cf 92       	push	r12
   12564:	df 92       	push	r13
   12566:	ef 92       	push	r14
   12568:	ff 92       	push	r15
   1256a:	0f 93       	push	r16
   1256c:	1f 93       	push	r17
   1256e:	cf 93       	push	r28
   12570:	ad b7       	in	r26, 0x3d	; 61
   12572:	be b7       	in	r27, 0x3e	; 62
   12574:	1d 97       	sbiw	r26, 0x0d	; 13
   12576:	0f b6       	in	r0, 0x3f	; 63
   12578:	f8 94       	cli
   1257a:	be bf       	out	0x3e, r27	; 62
   1257c:	0f be       	out	0x3f, r0	; 63
   1257e:	ad bf       	out	0x3d, r26	; 61
   12580:	c6 2f       	mov	r28, r22
   12582:	69 01       	movw	r12, r18
   12584:	7a 01       	movw	r14, r20
   12586:	ce df       	rcall	.-100    	; 0x12524 <tok_name>
   12588:	8c 01       	movw	r16, r24
   1258a:	cc 23       	and	r28, r28
   1258c:	31 f0       	breq	.+12     	; 0x1259a <print_tok_val+0x38>
   1258e:	80 e2       	ldi	r24, 0x20	; 32
   12590:	90 e0       	ldi	r25, 0x00	; 0
   12592:	0e 94 22 76 	call	0xec44	; 0xec44 <putchar>
   12596:	c1 50       	subi	r28, 0x01	; 1
   12598:	f8 cf       	rjmp	.-16     	; 0x1258a <print_tok_val+0x28>
   1259a:	ed b7       	in	r30, 0x3d	; 61
   1259c:	fe b7       	in	r31, 0x3e	; 62
   1259e:	c2 86       	std	Z+10, r12	; 0x0a
   125a0:	d3 86       	std	Z+11, r13	; 0x0b
   125a2:	e4 86       	std	Z+12, r14	; 0x0c
   125a4:	f5 86       	std	Z+13, r15	; 0x0d
   125a6:	c6 82       	std	Z+6, r12	; 0x06
   125a8:	d7 82       	std	Z+7, r13	; 0x07
   125aa:	e0 86       	std	Z+8, r14	; 0x08
   125ac:	f1 86       	std	Z+9, r15	; 0x09
   125ae:	15 83       	std	Z+5, r17	; 0x05
   125b0:	04 83       	std	Z+4, r16	; 0x04
   125b2:	82 e1       	ldi	r24, 0x12	; 18
   125b4:	9c e1       	ldi	r25, 0x1C	; 28
   125b6:	a0 e0       	ldi	r26, 0x00	; 0
   125b8:	81 83       	std	Z+1, r24	; 0x01
   125ba:	92 83       	std	Z+2, r25	; 0x02
   125bc:	a3 83       	std	Z+3, r26	; 0x03
   125be:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   125c2:	ad b7       	in	r26, 0x3d	; 61
   125c4:	be b7       	in	r27, 0x3e	; 62
   125c6:	1d 96       	adiw	r26, 0x0d	; 13
   125c8:	0f b6       	in	r0, 0x3f	; 63
   125ca:	f8 94       	cli
   125cc:	be bf       	out	0x3e, r27	; 62
   125ce:	0f be       	out	0x3f, r0	; 63
   125d0:	ad bf       	out	0x3d, r26	; 61
   125d2:	cf 91       	pop	r28
   125d4:	1f 91       	pop	r17
   125d6:	0f 91       	pop	r16
   125d8:	ff 90       	pop	r15
   125da:	ef 90       	pop	r14
   125dc:	df 90       	pop	r13
   125de:	cf 90       	pop	r12
   125e0:	08 95       	ret

000125e2 <print_tok_str>:
   125e2:	ef 92       	push	r14
   125e4:	ff 92       	push	r15
   125e6:	0f 93       	push	r16
   125e8:	1f 93       	push	r17
   125ea:	cf 93       	push	r28
   125ec:	ad b7       	in	r26, 0x3d	; 61
   125ee:	be b7       	in	r27, 0x3e	; 62
   125f0:	17 97       	sbiw	r26, 0x07	; 7
   125f2:	0f b6       	in	r0, 0x3f	; 63
   125f4:	f8 94       	cli
   125f6:	be bf       	out	0x3e, r27	; 62
   125f8:	0f be       	out	0x3f, r0	; 63
   125fa:	ad bf       	out	0x3d, r26	; 61
   125fc:	c6 2f       	mov	r28, r22
   125fe:	7a 01       	movw	r14, r20
   12600:	91 df       	rcall	.-222    	; 0x12524 <tok_name>
   12602:	8c 01       	movw	r16, r24
   12604:	cc 23       	and	r28, r28
   12606:	31 f0       	breq	.+12     	; 0x12614 <print_tok_str+0x32>
   12608:	80 e2       	ldi	r24, 0x20	; 32
   1260a:	90 e0       	ldi	r25, 0x00	; 0
   1260c:	0e 94 22 76 	call	0xec44	; 0xec44 <putchar>
   12610:	c1 50       	subi	r28, 0x01	; 1
   12612:	f8 cf       	rjmp	.-16     	; 0x12604 <print_tok_str+0x22>
   12614:	ed b7       	in	r30, 0x3d	; 61
   12616:	fe b7       	in	r31, 0x3e	; 62
   12618:	f7 82       	std	Z+7, r15	; 0x07
   1261a:	e6 82       	std	Z+6, r14	; 0x06
   1261c:	15 83       	std	Z+5, r17	; 0x05
   1261e:	04 83       	std	Z+4, r16	; 0x04
   12620:	86 e0       	ldi	r24, 0x06	; 6
   12622:	9c e1       	ldi	r25, 0x1C	; 28
   12624:	a0 e0       	ldi	r26, 0x00	; 0
   12626:	81 83       	std	Z+1, r24	; 0x01
   12628:	92 83       	std	Z+2, r25	; 0x02
   1262a:	a3 83       	std	Z+3, r26	; 0x03
   1262c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12630:	ad b7       	in	r26, 0x3d	; 61
   12632:	be b7       	in	r27, 0x3e	; 62
   12634:	17 96       	adiw	r26, 0x07	; 7
   12636:	0f b6       	in	r0, 0x3f	; 63
   12638:	f8 94       	cli
   1263a:	be bf       	out	0x3e, r27	; 62
   1263c:	0f be       	out	0x3f, r0	; 63
   1263e:	ad bf       	out	0x3d, r26	; 61
   12640:	cf 91       	pop	r28
   12642:	1f 91       	pop	r17
   12644:	0f 91       	pop	r16
   12646:	ff 90       	pop	r15
   12648:	ef 90       	pop	r14
   1264a:	08 95       	ret

0001264c <print_tok>:
   1264c:	0f 93       	push	r16
   1264e:	1f 93       	push	r17
   12650:	cf 93       	push	r28
   12652:	00 d0       	rcall	.+0      	; 0x12654 <print_tok+0x8>
   12654:	00 d0       	rcall	.+0      	; 0x12656 <print_tok+0xa>
   12656:	1f 92       	push	r1
   12658:	c6 2f       	mov	r28, r22
   1265a:	64 df       	rcall	.-312    	; 0x12524 <tok_name>
   1265c:	8c 01       	movw	r16, r24
   1265e:	cc 23       	and	r28, r28
   12660:	31 f0       	breq	.+12     	; 0x1266e <print_tok+0x22>
   12662:	80 e2       	ldi	r24, 0x20	; 32
   12664:	90 e0       	ldi	r25, 0x00	; 0
   12666:	0e 94 22 76 	call	0xec44	; 0xec44 <putchar>
   1266a:	c1 50       	subi	r28, 0x01	; 1
   1266c:	f8 cf       	rjmp	.-16     	; 0x1265e <print_tok+0x12>
   1266e:	ed b7       	in	r30, 0x3d	; 61
   12670:	fe b7       	in	r31, 0x3e	; 62
   12672:	15 83       	std	Z+5, r17	; 0x05
   12674:	04 83       	std	Z+4, r16	; 0x04
   12676:	82 e0       	ldi	r24, 0x02	; 2
   12678:	9c e1       	ldi	r25, 0x1C	; 28
   1267a:	a0 e0       	ldi	r26, 0x00	; 0
   1267c:	81 83       	std	Z+1, r24	; 0x01
   1267e:	92 83       	std	Z+2, r25	; 0x02
   12680:	a3 83       	std	Z+3, r26	; 0x03
   12682:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12686:	0f 90       	pop	r0
   12688:	0f 90       	pop	r0
   1268a:	0f 90       	pop	r0
   1268c:	0f 90       	pop	r0
   1268e:	0f 90       	pop	r0
   12690:	cf 91       	pop	r28
   12692:	1f 91       	pop	r17
   12694:	0f 91       	pop	r16
   12696:	08 95       	ret

00012698 <display_Addresses>:
   12698:	2f 92       	push	r2
   1269a:	3f 92       	push	r3
   1269c:	4f 92       	push	r4
   1269e:	6f 92       	push	r6
   126a0:	7f 92       	push	r7
   126a2:	8f 92       	push	r8
   126a4:	cf 92       	push	r12
   126a6:	df 92       	push	r13
   126a8:	ef 92       	push	r14
   126aa:	cf 93       	push	r28
   126ac:	df 93       	push	r29
   126ae:	cd b7       	in	r28, 0x3d	; 61
   126b0:	de b7       	in	r29, 0x3e	; 62
   126b2:	2a 97       	sbiw	r28, 0x0a	; 10
   126b4:	0f b6       	in	r0, 0x3f	; 63
   126b6:	f8 94       	cli
   126b8:	de bf       	out	0x3e, r29	; 62
   126ba:	0f be       	out	0x3f, r0	; 63
   126bc:	cd bf       	out	0x3d, r28	; 61
   126be:	8c ec       	ldi	r24, 0xCC	; 204
   126c0:	98 e1       	ldi	r25, 0x18	; 24
   126c2:	a0 e0       	ldi	r26, 0x00	; 0
   126c4:	ed b7       	in	r30, 0x3d	; 61
   126c6:	fe b7       	in	r31, 0x3e	; 62
   126c8:	81 83       	std	Z+1, r24	; 0x01
   126ca:	92 83       	std	Z+2, r25	; 0x02
   126cc:	a3 83       	std	Z+3, r26	; 0x03
   126ce:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   126d2:	25 ed       	ldi	r18, 0xD5	; 213
   126d4:	3e e1       	ldi	r19, 0x1E	; 30
   126d6:	3a 87       	std	Y+10, r19	; 0x0a
   126d8:	29 87       	std	Y+9, r18	; 0x09
   126da:	8e ea       	ldi	r24, 0xAE	; 174
   126dc:	98 e1       	ldi	r25, 0x18	; 24
   126de:	6c 01       	movw	r12, r24
   126e0:	e1 2c       	mov	r14, r1
   126e2:	80 eb       	ldi	r24, 0xB0	; 176
   126e4:	98 e1       	ldi	r25, 0x18	; 24
   126e6:	3c 01       	movw	r6, r24
   126e8:	81 2c       	mov	r8, r1
   126ea:	89 eb       	ldi	r24, 0xB9	; 185
   126ec:	98 e1       	ldi	r25, 0x18	; 24
   126ee:	1c 01       	movw	r2, r24
   126f0:	41 2c       	mov	r4, r1
   126f2:	83 ec       	ldi	r24, 0xC3	; 195
   126f4:	98 e1       	ldi	r25, 0x18	; 24
   126f6:	9c 01       	movw	r18, r24
   126f8:	40 e0       	ldi	r20, 0x00	; 0
   126fa:	2e 83       	std	Y+6, r18	; 0x06
   126fc:	3f 83       	std	Y+7, r19	; 0x07
   126fe:	48 87       	std	Y+8, r20	; 0x08
   12700:	e9 85       	ldd	r30, Y+9	; 0x09
   12702:	fa 85       	ldd	r31, Y+10	; 0x0a
   12704:	80 81       	ld	r24, Z
   12706:	88 23       	and	r24, r24
   12708:	09 f4       	brne	.+2      	; 0x1270c <display_Addresses+0x74>
   1270a:	7b c0       	rjmp	.+246    	; 0x12802 <display_Addresses+0x16a>
   1270c:	83 30       	cpi	r24, 0x03	; 3
   1270e:	21 f0       	breq	.+8      	; 0x12718 <display_Addresses+0x80>
   12710:	81 30       	cpi	r24, 0x01	; 1
   12712:	09 f0       	breq	.+2      	; 0x12716 <display_Addresses+0x7e>
   12714:	5a c0       	rjmp	.+180    	; 0x127ca <display_Addresses+0x132>
   12716:	1f c0       	rjmp	.+62     	; 0x12756 <display_Addresses+0xbe>
   12718:	e9 85       	ldd	r30, Y+9	; 0x09
   1271a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1271c:	87 a1       	ldd	r24, Z+39	; 0x27
   1271e:	90 a5       	ldd	r25, Z+40	; 0x28
   12720:	90 93 51 19 	sts	0x1951, r25	; 0x801951 <SS80p+0x1>
   12724:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <SS80p>
   12728:	cf 01       	movw	r24, r30
   1272a:	07 96       	adiw	r24, 0x07	; 7
   1272c:	ed b7       	in	r30, 0x3d	; 61
   1272e:	fe b7       	in	r31, 0x3e	; 62
   12730:	95 83       	std	Z+5, r25	; 0x05
   12732:	84 83       	std	Z+4, r24	; 0x04
   12734:	2e 81       	ldd	r18, Y+6	; 0x06
   12736:	3f 81       	ldd	r19, Y+7	; 0x07
   12738:	48 85       	ldd	r20, Y+8	; 0x08
   1273a:	21 83       	std	Z+1, r18	; 0x01
   1273c:	32 83       	std	Z+2, r19	; 0x02
   1273e:	43 83       	std	Z+3, r20	; 0x03
   12740:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12744:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   12748:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1274c:	42 81       	ldd	r20, Z+2	; 0x02
   1274e:	53 81       	ldd	r21, Z+3	; 0x03
   12750:	64 e0       	ldi	r22, 0x04	; 4
   12752:	82 e1       	ldi	r24, 0x12	; 18
   12754:	46 df       	rcall	.-372    	; 0x125e2 <print_tok_str>
   12756:	e9 85       	ldd	r30, Y+9	; 0x09
   12758:	fa 85       	ldd	r31, Y+10	; 0x0a
   1275a:	80 81       	ld	r24, Z
   1275c:	81 30       	cpi	r24, 0x01	; 1
   1275e:	d1 f4       	brne	.+52     	; 0x12794 <display_Addresses+0xfc>
   12760:	87 a1       	ldd	r24, Z+39	; 0x27
   12762:	90 a5       	ldd	r25, Z+40	; 0x28
   12764:	90 93 4d 19 	sts	0x194D, r25	; 0x80194d <AMIGOp+0x1>
   12768:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <AMIGOp>
   1276c:	cf 01       	movw	r24, r30
   1276e:	07 96       	adiw	r24, 0x07	; 7
   12770:	ed b7       	in	r30, 0x3d	; 61
   12772:	fe b7       	in	r31, 0x3e	; 62
   12774:	95 83       	std	Z+5, r25	; 0x05
   12776:	84 83       	std	Z+4, r24	; 0x04
   12778:	21 82       	std	Z+1, r2	; 0x01
   1277a:	32 82       	std	Z+2, r3	; 0x02
   1277c:	43 82       	std	Z+3, r4	; 0x03
   1277e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12782:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   12786:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1278a:	42 81       	ldd	r20, Z+2	; 0x02
   1278c:	53 81       	ldd	r21, Z+3	; 0x03
   1278e:	64 e0       	ldi	r22, 0x04	; 4
   12790:	82 e1       	ldi	r24, 0x12	; 18
   12792:	27 df       	rcall	.-434    	; 0x125e2 <print_tok_str>
   12794:	e9 85       	ldd	r30, Y+9	; 0x09
   12796:	fa 85       	ldd	r31, Y+10	; 0x0a
   12798:	21 81       	ldd	r18, Z+1	; 0x01
   1279a:	30 e0       	ldi	r19, 0x00	; 0
   1279c:	40 e0       	ldi	r20, 0x00	; 0
   1279e:	50 e0       	ldi	r21, 0x00	; 0
   127a0:	64 e0       	ldi	r22, 0x04	; 4
   127a2:	81 e0       	ldi	r24, 0x01	; 1
   127a4:	de de       	rcall	.-580    	; 0x12562 <print_tok_val>
   127a6:	e9 85       	ldd	r30, Y+9	; 0x09
   127a8:	fa 85       	ldd	r31, Y+10	; 0x0a
   127aa:	22 81       	ldd	r18, Z+2	; 0x02
   127ac:	30 e0       	ldi	r19, 0x00	; 0
   127ae:	40 e0       	ldi	r20, 0x00	; 0
   127b0:	50 e0       	ldi	r21, 0x00	; 0
   127b2:	64 e0       	ldi	r22, 0x04	; 4
   127b4:	8f e1       	ldi	r24, 0x1F	; 31
   127b6:	d5 de       	rcall	.-598    	; 0x12562 <print_tok_val>
   127b8:	e9 85       	ldd	r30, Y+9	; 0x09
   127ba:	fa 85       	ldd	r31, Y+10	; 0x0a
   127bc:	23 81       	ldd	r18, Z+3	; 0x03
   127be:	34 81       	ldd	r19, Z+4	; 0x04
   127c0:	45 81       	ldd	r20, Z+5	; 0x05
   127c2:	56 81       	ldd	r21, Z+6	; 0x06
   127c4:	64 e0       	ldi	r22, 0x04	; 4
   127c6:	83 e0       	ldi	r24, 0x03	; 3
   127c8:	cc de       	rcall	.-616    	; 0x12562 <print_tok_val>
   127ca:	e9 85       	ldd	r30, Y+9	; 0x09
   127cc:	fa 85       	ldd	r31, Y+10	; 0x0a
   127ce:	80 81       	ld	r24, Z
   127d0:	84 30       	cpi	r24, 0x04	; 4
   127d2:	81 f4       	brne	.+32     	; 0x127f4 <display_Addresses+0x15c>
   127d4:	ed b7       	in	r30, 0x3d	; 61
   127d6:	fe b7       	in	r31, 0x3e	; 62
   127d8:	61 82       	std	Z+1, r6	; 0x01
   127da:	72 82       	std	Z+2, r7	; 0x02
   127dc:	83 82       	std	Z+3, r8	; 0x03
   127de:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   127e2:	e9 85       	ldd	r30, Y+9	; 0x09
   127e4:	fa 85       	ldd	r31, Y+10	; 0x0a
   127e6:	21 81       	ldd	r18, Z+1	; 0x01
   127e8:	30 e0       	ldi	r19, 0x00	; 0
   127ea:	40 e0       	ldi	r20, 0x00	; 0
   127ec:	50 e0       	ldi	r21, 0x00	; 0
   127ee:	64 e0       	ldi	r22, 0x04	; 4
   127f0:	81 e0       	ldi	r24, 0x01	; 1
   127f2:	b7 de       	rcall	.-658    	; 0x12562 <print_tok_val>
   127f4:	ed b7       	in	r30, 0x3d	; 61
   127f6:	fe b7       	in	r31, 0x3e	; 62
   127f8:	c1 82       	std	Z+1, r12	; 0x01
   127fa:	d2 82       	std	Z+2, r13	; 0x02
   127fc:	e3 82       	std	Z+3, r14	; 0x03
   127fe:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12802:	29 85       	ldd	r18, Y+9	; 0x09
   12804:	3a 85       	ldd	r19, Y+10	; 0x0a
   12806:	25 5d       	subi	r18, 0xD5	; 213
   12808:	3f 4f       	sbci	r19, 0xFF	; 255
   1280a:	3a 87       	std	Y+10, r19	; 0x0a
   1280c:	29 87       	std	Y+9, r18	; 0x09
   1280e:	29 5d       	subi	r18, 0xD9	; 217
   12810:	30 42       	sbci	r19, 0x20	; 32
   12812:	09 f0       	breq	.+2      	; 0x12816 <display_Addresses+0x17e>
   12814:	75 cf       	rjmp	.-278    	; 0x12700 <display_Addresses+0x68>
   12816:	8c ea       	ldi	r24, 0xAC	; 172
   12818:	98 e1       	ldi	r25, 0x18	; 24
   1281a:	a0 e0       	ldi	r26, 0x00	; 0
   1281c:	ed b7       	in	r30, 0x3d	; 61
   1281e:	fe b7       	in	r31, 0x3e	; 62
   12820:	81 83       	std	Z+1, r24	; 0x01
   12822:	92 83       	std	Z+2, r25	; 0x02
   12824:	a3 83       	std	Z+3, r26	; 0x03
   12826:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1282a:	2a 96       	adiw	r28, 0x0a	; 10
   1282c:	0f b6       	in	r0, 0x3f	; 63
   1282e:	f8 94       	cli
   12830:	de bf       	out	0x3e, r29	; 62
   12832:	0f be       	out	0x3f, r0	; 63
   12834:	cd bf       	out	0x3d, r28	; 61
   12836:	df 91       	pop	r29
   12838:	cf 91       	pop	r28
   1283a:	ef 90       	pop	r14
   1283c:	df 90       	pop	r13
   1283e:	cf 90       	pop	r12
   12840:	8f 90       	pop	r8
   12842:	7f 90       	pop	r7
   12844:	6f 90       	pop	r6
   12846:	4f 90       	pop	r4
   12848:	3f 90       	pop	r3
   1284a:	2f 90       	pop	r2
   1284c:	08 95       	ret

0001284e <display_Config>:
   1284e:	2f 92       	push	r2
   12850:	3f 92       	push	r3
   12852:	4f 92       	push	r4
   12854:	6f 92       	push	r6
   12856:	7f 92       	push	r7
   12858:	8f 92       	push	r8
   1285a:	af 92       	push	r10
   1285c:	bf 92       	push	r11
   1285e:	cf 92       	push	r12
   12860:	df 92       	push	r13
   12862:	ef 92       	push	r14
   12864:	0f 93       	push	r16
   12866:	1f 93       	push	r17
   12868:	cf 93       	push	r28
   1286a:	df 93       	push	r29
   1286c:	cd b7       	in	r28, 0x3d	; 61
   1286e:	de b7       	in	r29, 0x3e	; 62
   12870:	62 97       	sbiw	r28, 0x12	; 18
   12872:	0f b6       	in	r0, 0x3f	; 63
   12874:	f8 94       	cli
   12876:	de bf       	out	0x3e, r29	; 62
   12878:	0f be       	out	0x3f, r0	; 63
   1287a:	cd bf       	out	0x3d, r28	; 61
   1287c:	5c 01       	movw	r10, r24
   1287e:	8c e8       	ldi	r24, 0x8C	; 140
   12880:	98 e1       	ldi	r25, 0x18	; 24
   12882:	a0 e0       	ldi	r26, 0x00	; 0
   12884:	ed b7       	in	r30, 0x3d	; 61
   12886:	fe b7       	in	r31, 0x3e	; 62
   12888:	81 83       	std	Z+1, r24	; 0x01
   1288a:	92 83       	std	Z+2, r25	; 0x02
   1288c:	a3 83       	std	Z+3, r26	; 0x03
   1288e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12892:	05 ed       	ldi	r16, 0xD5	; 213
   12894:	1e e1       	ldi	r17, 0x1E	; 30
   12896:	81 e1       	ldi	r24, 0x11	; 17
   12898:	98 e1       	ldi	r25, 0x18	; 24
   1289a:	9c 01       	movw	r18, r24
   1289c:	40 e0       	ldi	r20, 0x00	; 0
   1289e:	28 87       	std	Y+8, r18	; 0x08
   128a0:	39 87       	std	Y+9, r19	; 0x09
   128a2:	4a 87       	std	Y+10, r20	; 0x0a
   128a4:	86 e4       	ldi	r24, 0x46	; 70
   128a6:	98 e1       	ldi	r25, 0x18	; 24
   128a8:	9c 01       	movw	r18, r24
   128aa:	40 e0       	ldi	r20, 0x00	; 0
   128ac:	2b 87       	std	Y+11, r18	; 0x0b
   128ae:	3c 87       	std	Y+12, r19	; 0x0c
   128b0:	4d 87       	std	Y+13, r20	; 0x0d
   128b2:	87 e2       	ldi	r24, 0x27	; 39
   128b4:	98 e1       	ldi	r25, 0x18	; 24
   128b6:	9c 01       	movw	r18, r24
   128b8:	40 e0       	ldi	r20, 0x00	; 0
   128ba:	2e 87       	std	Y+14, r18	; 0x0e
   128bc:	3f 87       	std	Y+15, r19	; 0x0f
   128be:	48 8b       	std	Y+16, r20	; 0x10
   128c0:	83 e1       	ldi	r24, 0x13	; 19
   128c2:	98 e1       	ldi	r25, 0x18	; 24
   128c4:	1c 01       	movw	r2, r24
   128c6:	41 2c       	mov	r4, r1
   128c8:	83 e8       	ldi	r24, 0x83	; 131
   128ca:	98 e1       	ldi	r25, 0x18	; 24
   128cc:	6c 01       	movw	r12, r24
   128ce:	e1 2c       	mov	r14, r1
   128d0:	84 e6       	ldi	r24, 0x64	; 100
   128d2:	98 e1       	ldi	r25, 0x18	; 24
   128d4:	3c 01       	movw	r6, r24
   128d6:	81 2c       	mov	r8, r1
   128d8:	f8 01       	movw	r30, r16
   128da:	80 81       	ld	r24, Z
   128dc:	88 23       	and	r24, r24
   128de:	09 f4       	brne	.+2      	; 0x128e2 <display_Config+0x94>
   128e0:	14 c2       	rjmp	.+1064   	; 0x12d0a <display_Config+0x4bc>
   128e2:	83 30       	cpi	r24, 0x03	; 3
   128e4:	09 f0       	breq	.+2      	; 0x128e8 <display_Config+0x9a>
   128e6:	38 c1       	rjmp	.+624    	; 0x12b58 <display_Config+0x30a>
   128e8:	27 a1       	ldd	r18, Z+39	; 0x27
   128ea:	30 a5       	ldd	r19, Z+40	; 0x28
   128ec:	3a 8b       	std	Y+18, r19	; 0x12
   128ee:	29 8b       	std	Y+17, r18	; 0x11
   128f0:	c8 01       	movw	r24, r16
   128f2:	07 96       	adiw	r24, 0x07	; 7
   128f4:	ed b7       	in	r30, 0x3d	; 61
   128f6:	fe b7       	in	r31, 0x3e	; 62
   128f8:	95 83       	std	Z+5, r25	; 0x05
   128fa:	84 83       	std	Z+4, r24	; 0x04
   128fc:	c1 82       	std	Z+1, r12	; 0x01
   128fe:	d2 82       	std	Z+2, r13	; 0x02
   12900:	e3 82       	std	Z+3, r14	; 0x03
   12902:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12906:	e9 89       	ldd	r30, Y+17	; 0x11
   12908:	fa 89       	ldd	r31, Y+18	; 0x12
   1290a:	80 81       	ld	r24, Z
   1290c:	90 e0       	ldi	r25, 0x00	; 0
   1290e:	ed b7       	in	r30, 0x3d	; 61
   12910:	fe b7       	in	r31, 0x3e	; 62
   12912:	95 83       	std	Z+5, r25	; 0x05
   12914:	84 83       	std	Z+4, r24	; 0x04
   12916:	61 82       	std	Z+1, r6	; 0x01
   12918:	72 82       	std	Z+2, r7	; 0x02
   1291a:	83 82       	std	Z+3, r8	; 0x03
   1291c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12920:	64 e0       	ldi	r22, 0x04	; 4
   12922:	89 e0       	ldi	r24, 0x09	; 9
   12924:	93 de       	rcall	.-730    	; 0x1264c <print_tok>
   12926:	e9 89       	ldd	r30, Y+17	; 0x11
   12928:	fa 89       	ldd	r31, Y+18	; 0x12
   1292a:	20 81       	ld	r18, Z
   1292c:	30 e0       	ldi	r19, 0x00	; 0
   1292e:	40 e0       	ldi	r20, 0x00	; 0
   12930:	50 e0       	ldi	r21, 0x00	; 0
   12932:	68 e0       	ldi	r22, 0x08	; 8
   12934:	81 e0       	ldi	r24, 0x01	; 1
   12936:	15 de       	rcall	.-982    	; 0x12562 <print_tok_val>
   12938:	e9 89       	ldd	r30, Y+17	; 0x11
   1293a:	fa 89       	ldd	r31, Y+18	; 0x12
   1293c:	21 81       	ldd	r18, Z+1	; 0x01
   1293e:	30 e0       	ldi	r19, 0x00	; 0
   12940:	40 e0       	ldi	r20, 0x00	; 0
   12942:	50 e0       	ldi	r21, 0x00	; 0
   12944:	68 e0       	ldi	r22, 0x08	; 8
   12946:	8f e1       	ldi	r24, 0x1F	; 31
   12948:	0c de       	rcall	.-1000   	; 0x12562 <print_tok_val>
   1294a:	e9 89       	ldd	r30, Y+17	; 0x11
   1294c:	fa 89       	ldd	r31, Y+18	; 0x12
   1294e:	42 81       	ldd	r20, Z+2	; 0x02
   12950:	53 81       	ldd	r21, Z+3	; 0x03
   12952:	68 e0       	ldi	r22, 0x08	; 8
   12954:	82 e1       	ldi	r24, 0x12	; 18
   12956:	45 de       	rcall	.-886    	; 0x125e2 <print_tok_str>
   12958:	64 e0       	ldi	r22, 0x04	; 4
   1295a:	81 e1       	ldi	r24, 0x11	; 17
   1295c:	77 de       	rcall	.-786    	; 0x1264c <print_tok>
   1295e:	64 e0       	ldi	r22, 0x04	; 4
   12960:	85 e1       	ldi	r24, 0x15	; 21
   12962:	74 de       	rcall	.-792    	; 0x1264c <print_tok>
   12964:	e9 89       	ldd	r30, Y+17	; 0x11
   12966:	fa 89       	ldd	r31, Y+18	; 0x12
   12968:	24 81       	ldd	r18, Z+4	; 0x04
   1296a:	35 81       	ldd	r19, Z+5	; 0x05
   1296c:	40 e0       	ldi	r20, 0x00	; 0
   1296e:	50 e0       	ldi	r21, 0x00	; 0
   12970:	68 e0       	ldi	r22, 0x08	; 8
   12972:	87 e1       	ldi	r24, 0x17	; 23
   12974:	f6 dd       	rcall	.-1044   	; 0x12562 <print_tok_val>
   12976:	64 e0       	ldi	r22, 0x04	; 4
   12978:	81 e1       	ldi	r24, 0x11	; 17
   1297a:	68 de       	rcall	.-816    	; 0x1264c <print_tok>
   1297c:	a1 14       	cp	r10, r1
   1297e:	b1 04       	cpc	r11, r1
   12980:	09 f1       	breq	.+66     	; 0x129c4 <display_Config+0x176>
   12982:	64 e0       	ldi	r22, 0x04	; 4
   12984:	8b e0       	ldi	r24, 0x0B	; 11
   12986:	62 de       	rcall	.-828    	; 0x1264c <print_tok>
   12988:	e9 89       	ldd	r30, Y+17	; 0x11
   1298a:	fa 89       	ldd	r31, Y+18	; 0x12
   1298c:	26 81       	ldd	r18, Z+6	; 0x06
   1298e:	37 81       	ldd	r19, Z+7	; 0x07
   12990:	40 e0       	ldi	r20, 0x00	; 0
   12992:	50 e0       	ldi	r21, 0x00	; 0
   12994:	68 e0       	ldi	r22, 0x08	; 8
   12996:	88 e2       	ldi	r24, 0x28	; 40
   12998:	e4 dd       	rcall	.-1080   	; 0x12562 <print_tok_val>
   1299a:	e9 89       	ldd	r30, Y+17	; 0x11
   1299c:	fa 89       	ldd	r31, Y+18	; 0x12
   1299e:	20 85       	ldd	r18, Z+8	; 0x08
   129a0:	31 85       	ldd	r19, Z+9	; 0x09
   129a2:	40 e0       	ldi	r20, 0x00	; 0
   129a4:	50 e0       	ldi	r21, 0x00	; 0
   129a6:	68 e0       	ldi	r22, 0x08	; 8
   129a8:	85 e2       	ldi	r24, 0x25	; 37
   129aa:	db dd       	rcall	.-1098   	; 0x12562 <print_tok_val>
   129ac:	e9 89       	ldd	r30, Y+17	; 0x11
   129ae:	fa 89       	ldd	r31, Y+18	; 0x12
   129b0:	22 85       	ldd	r18, Z+10	; 0x0a
   129b2:	30 e0       	ldi	r19, 0x00	; 0
   129b4:	40 e0       	ldi	r20, 0x00	; 0
   129b6:	50 e0       	ldi	r21, 0x00	; 0
   129b8:	68 e0       	ldi	r22, 0x08	; 8
   129ba:	86 e2       	ldi	r24, 0x26	; 38
   129bc:	d2 dd       	rcall	.-1116   	; 0x12562 <print_tok_val>
   129be:	64 e0       	ldi	r22, 0x04	; 4
   129c0:	81 e1       	ldi	r24, 0x11	; 17
   129c2:	44 de       	rcall	.-888    	; 0x1264c <print_tok>
   129c4:	64 e0       	ldi	r22, 0x04	; 4
   129c6:	87 e2       	ldi	r24, 0x27	; 39
   129c8:	41 de       	rcall	.-894    	; 0x1264c <print_tok>
   129ca:	a1 14       	cp	r10, r1
   129cc:	b1 04       	cpc	r11, r1
   129ce:	49 f0       	breq	.+18     	; 0x129e2 <display_Config+0x194>
   129d0:	e9 89       	ldd	r30, Y+17	; 0x11
   129d2:	fa 89       	ldd	r31, Y+18	; 0x12
   129d4:	23 85       	ldd	r18, Z+11	; 0x0b
   129d6:	30 e0       	ldi	r19, 0x00	; 0
   129d8:	40 e0       	ldi	r20, 0x00	; 0
   129da:	50 e0       	ldi	r21, 0x00	; 0
   129dc:	68 e0       	ldi	r22, 0x08	; 8
   129de:	89 e2       	ldi	r24, 0x29	; 41
   129e0:	c0 dd       	rcall	.-1152   	; 0x12562 <print_tok_val>
   129e2:	e9 89       	ldd	r30, Y+17	; 0x11
   129e4:	fa 89       	ldd	r31, Y+18	; 0x12
   129e6:	24 85       	ldd	r18, Z+12	; 0x0c
   129e8:	35 85       	ldd	r19, Z+13	; 0x0d
   129ea:	46 85       	ldd	r20, Z+14	; 0x0e
   129ec:	57 85       	ldd	r21, Z+15	; 0x0f
   129ee:	68 e0       	ldi	r22, 0x08	; 8
   129f0:	8f e0       	ldi	r24, 0x0F	; 15
   129f2:	b7 dd       	rcall	.-1170   	; 0x12562 <print_tok_val>
   129f4:	a1 14       	cp	r10, r1
   129f6:	b1 04       	cpc	r11, r1
   129f8:	09 f4       	brne	.+2      	; 0x129fc <display_Config+0x1ae>
   129fa:	5a c0       	rjmp	.+180    	; 0x12ab0 <display_Config+0x262>
   129fc:	e9 89       	ldd	r30, Y+17	; 0x11
   129fe:	fa 89       	ldd	r31, Y+18	; 0x12
   12a00:	20 89       	ldd	r18, Z+16	; 0x10
   12a02:	31 89       	ldd	r19, Z+17	; 0x11
   12a04:	40 e0       	ldi	r20, 0x00	; 0
   12a06:	50 e0       	ldi	r21, 0x00	; 0
   12a08:	68 e0       	ldi	r22, 0x08	; 8
   12a0a:	87 e0       	ldi	r24, 0x07	; 7
   12a0c:	aa dd       	rcall	.-1196   	; 0x12562 <print_tok_val>
   12a0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a10:	fa 89       	ldd	r31, Y+18	; 0x12
   12a12:	22 89       	ldd	r18, Z+18	; 0x12
   12a14:	30 e0       	ldi	r19, 0x00	; 0
   12a16:	40 e0       	ldi	r20, 0x00	; 0
   12a18:	50 e0       	ldi	r21, 0x00	; 0
   12a1a:	68 e0       	ldi	r22, 0x08	; 8
   12a1c:	85 e0       	ldi	r24, 0x05	; 5
   12a1e:	a1 dd       	rcall	.-1214   	; 0x12562 <print_tok_val>
   12a20:	e9 89       	ldd	r30, Y+17	; 0x11
   12a22:	fa 89       	ldd	r31, Y+18	; 0x12
   12a24:	23 89       	ldd	r18, Z+19	; 0x13
   12a26:	30 e0       	ldi	r19, 0x00	; 0
   12a28:	40 e0       	ldi	r20, 0x00	; 0
   12a2a:	50 e0       	ldi	r21, 0x00	; 0
   12a2c:	68 e0       	ldi	r22, 0x08	; 8
   12a2e:	86 e0       	ldi	r24, 0x06	; 6
   12a30:	98 dd       	rcall	.-1232   	; 0x12562 <print_tok_val>
   12a32:	e9 89       	ldd	r30, Y+17	; 0x11
   12a34:	fa 89       	ldd	r31, Y+18	; 0x12
   12a36:	24 89       	ldd	r18, Z+20	; 0x14
   12a38:	35 89       	ldd	r19, Z+21	; 0x15
   12a3a:	40 e0       	ldi	r20, 0x00	; 0
   12a3c:	50 e0       	ldi	r21, 0x00	; 0
   12a3e:	68 e0       	ldi	r22, 0x08	; 8
   12a40:	84 e0       	ldi	r24, 0x04	; 4
   12a42:	8f dd       	rcall	.-1250   	; 0x12562 <print_tok_val>
   12a44:	e9 89       	ldd	r30, Y+17	; 0x11
   12a46:	fa 89       	ldd	r31, Y+18	; 0x12
   12a48:	26 89       	ldd	r18, Z+22	; 0x16
   12a4a:	37 89       	ldd	r19, Z+23	; 0x17
   12a4c:	40 e0       	ldi	r20, 0x00	; 0
   12a4e:	50 e0       	ldi	r21, 0x00	; 0
   12a50:	68 e0       	ldi	r22, 0x08	; 8
   12a52:	8a e0       	ldi	r24, 0x0A	; 10
   12a54:	86 dd       	rcall	.-1268   	; 0x12562 <print_tok_val>
   12a56:	e9 89       	ldd	r30, Y+17	; 0x11
   12a58:	fa 89       	ldd	r31, Y+18	; 0x12
   12a5a:	20 8d       	ldd	r18, Z+24	; 0x18
   12a5c:	31 8d       	ldd	r19, Z+25	; 0x19
   12a5e:	40 e0       	ldi	r20, 0x00	; 0
   12a60:	50 e0       	ldi	r21, 0x00	; 0
   12a62:	68 e0       	ldi	r22, 0x08	; 8
   12a64:	8e e1       	ldi	r24, 0x1E	; 30
   12a66:	7d dd       	rcall	.-1286   	; 0x12562 <print_tok_val>
   12a68:	e9 89       	ldd	r30, Y+17	; 0x11
   12a6a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a6c:	22 8d       	ldd	r18, Z+26	; 0x1a
   12a6e:	33 8d       	ldd	r19, Z+27	; 0x1b
   12a70:	40 e0       	ldi	r20, 0x00	; 0
   12a72:	50 e0       	ldi	r21, 0x00	; 0
   12a74:	68 e0       	ldi	r22, 0x08	; 8
   12a76:	80 e0       	ldi	r24, 0x00	; 0
   12a78:	74 dd       	rcall	.-1304   	; 0x12562 <print_tok_val>
   12a7a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a7c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a7e:	24 8d       	ldd	r18, Z+28	; 0x1c
   12a80:	30 e0       	ldi	r19, 0x00	; 0
   12a82:	40 e0       	ldi	r20, 0x00	; 0
   12a84:	50 e0       	ldi	r21, 0x00	; 0
   12a86:	68 e0       	ldi	r22, 0x08	; 8
   12a88:	8c e1       	ldi	r24, 0x1C	; 28
   12a8a:	6b dd       	rcall	.-1322   	; 0x12562 <print_tok_val>
   12a8c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a8e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a90:	25 8d       	ldd	r18, Z+29	; 0x1d
   12a92:	30 e0       	ldi	r19, 0x00	; 0
   12a94:	40 e0       	ldi	r20, 0x00	; 0
   12a96:	50 e0       	ldi	r21, 0x00	; 0
   12a98:	68 e0       	ldi	r22, 0x08	; 8
   12a9a:	83 e1       	ldi	r24, 0x13	; 19
   12a9c:	62 dd       	rcall	.-1340   	; 0x12562 <print_tok_val>
   12a9e:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa0:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa2:	26 8d       	ldd	r18, Z+30	; 0x1e
   12aa4:	30 e0       	ldi	r19, 0x00	; 0
   12aa6:	40 e0       	ldi	r20, 0x00	; 0
   12aa8:	50 e0       	ldi	r21, 0x00	; 0
   12aaa:	68 e0       	ldi	r22, 0x08	; 8
   12aac:	81 e2       	ldi	r24, 0x21	; 33
   12aae:	59 dd       	rcall	.-1358   	; 0x12562 <print_tok_val>
   12ab0:	64 e0       	ldi	r22, 0x04	; 4
   12ab2:	81 e1       	ldi	r24, 0x11	; 17
   12ab4:	cb dd       	rcall	.-1130   	; 0x1264c <print_tok>
   12ab6:	a1 14       	cp	r10, r1
   12ab8:	b1 04       	cpc	r11, r1
   12aba:	99 f1       	breq	.+102    	; 0x12b22 <display_Config+0x2d4>
   12abc:	64 e0       	ldi	r22, 0x04	; 4
   12abe:	8a e2       	ldi	r24, 0x2A	; 42
   12ac0:	c5 dd       	rcall	.-1142   	; 0x1264c <print_tok>
   12ac2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ac4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac6:	27 8d       	ldd	r18, Z+31	; 0x1f
   12ac8:	30 a1       	ldd	r19, Z+32	; 0x20
   12aca:	41 a1       	ldd	r20, Z+33	; 0x21
   12acc:	52 a1       	ldd	r21, Z+34	; 0x22
   12ace:	68 e0       	ldi	r22, 0x08	; 8
   12ad0:	8a e1       	ldi	r24, 0x1A	; 26
   12ad2:	47 dd       	rcall	.-1394   	; 0x12562 <print_tok_val>
   12ad4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ad6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ad8:	23 a1       	ldd	r18, Z+35	; 0x23
   12ada:	30 e0       	ldi	r19, 0x00	; 0
   12adc:	40 e0       	ldi	r20, 0x00	; 0
   12ade:	50 e0       	ldi	r21, 0x00	; 0
   12ae0:	68 e0       	ldi	r22, 0x08	; 8
   12ae2:	8b e1       	ldi	r24, 0x1B	; 27
   12ae4:	3e dd       	rcall	.-1412   	; 0x12562 <print_tok_val>
   12ae6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae8:	fa 89       	ldd	r31, Y+18	; 0x12
   12aea:	24 a1       	ldd	r18, Z+36	; 0x24
   12aec:	35 a1       	ldd	r19, Z+37	; 0x25
   12aee:	40 e0       	ldi	r20, 0x00	; 0
   12af0:	50 e0       	ldi	r21, 0x00	; 0
   12af2:	68 e0       	ldi	r22, 0x08	; 8
   12af4:	8d e1       	ldi	r24, 0x1D	; 29
   12af6:	35 dd       	rcall	.-1430   	; 0x12562 <print_tok_val>
   12af8:	e9 89       	ldd	r30, Y+17	; 0x11
   12afa:	fa 89       	ldd	r31, Y+18	; 0x12
   12afc:	26 a1       	ldd	r18, Z+38	; 0x26
   12afe:	37 a1       	ldd	r19, Z+39	; 0x27
   12b00:	40 a5       	ldd	r20, Z+40	; 0x28
   12b02:	51 a5       	ldd	r21, Z+41	; 0x29
   12b04:	68 e0       	ldi	r22, 0x08	; 8
   12b06:	89 e1       	ldi	r24, 0x19	; 25
   12b08:	2c dd       	rcall	.-1448   	; 0x12562 <print_tok_val>
   12b0a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b0c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b0e:	22 a5       	ldd	r18, Z+42	; 0x2a
   12b10:	30 e0       	ldi	r19, 0x00	; 0
   12b12:	40 e0       	ldi	r20, 0x00	; 0
   12b14:	50 e0       	ldi	r21, 0x00	; 0
   12b16:	68 e0       	ldi	r22, 0x08	; 8
   12b18:	88 e1       	ldi	r24, 0x18	; 24
   12b1a:	23 dd       	rcall	.-1466   	; 0x12562 <print_tok_val>
   12b1c:	64 e0       	ldi	r22, 0x04	; 4
   12b1e:	81 e1       	ldi	r24, 0x11	; 17
   12b20:	95 dd       	rcall	.-1238   	; 0x1264c <print_tok>
   12b22:	e9 89       	ldd	r30, Y+17	; 0x11
   12b24:	fa 89       	ldd	r31, Y+18	; 0x12
   12b26:	86 a1       	ldd	r24, Z+38	; 0x26
   12b28:	97 a1       	ldd	r25, Z+39	; 0x27
   12b2a:	a0 a5       	ldd	r26, Z+40	; 0x28
   12b2c:	b1 a5       	ldd	r27, Z+41	; 0x29
   12b2e:	01 96       	adiw	r24, 0x01	; 1
   12b30:	a1 1d       	adc	r26, r1
   12b32:	b1 1d       	adc	r27, r1
   12b34:	ed b7       	in	r30, 0x3d	; 61
   12b36:	fe b7       	in	r31, 0x3e	; 62
   12b38:	84 83       	std	Z+4, r24	; 0x04
   12b3a:	95 83       	std	Z+5, r25	; 0x05
   12b3c:	a6 83       	std	Z+6, r26	; 0x06
   12b3e:	b7 83       	std	Z+7, r27	; 0x07
   12b40:	20 e5       	ldi	r18, 0x50	; 80
   12b42:	38 e1       	ldi	r19, 0x18	; 24
   12b44:	c9 01       	movw	r24, r18
   12b46:	a0 e0       	ldi	r26, 0x00	; 0
   12b48:	81 83       	std	Z+1, r24	; 0x01
   12b4a:	92 83       	std	Z+2, r25	; 0x02
   12b4c:	a3 83       	std	Z+3, r26	; 0x03
   12b4e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12b52:	60 e0       	ldi	r22, 0x00	; 0
   12b54:	81 e1       	ldi	r24, 0x11	; 17
   12b56:	7a dd       	rcall	.-1292   	; 0x1264c <print_tok>
   12b58:	f8 01       	movw	r30, r16
   12b5a:	80 81       	ld	r24, Z
   12b5c:	81 30       	cpi	r24, 0x01	; 1
   12b5e:	09 f0       	breq	.+2      	; 0x12b62 <display_Config+0x314>
   12b60:	ad c0       	rjmp	.+346    	; 0x12cbc <display_Config+0x46e>
   12b62:	27 a1       	ldd	r18, Z+39	; 0x27
   12b64:	30 a5       	ldd	r19, Z+40	; 0x28
   12b66:	3a 8b       	std	Y+18, r19	; 0x12
   12b68:	29 8b       	std	Y+17, r18	; 0x11
   12b6a:	c8 01       	movw	r24, r16
   12b6c:	07 96       	adiw	r24, 0x07	; 7
   12b6e:	ed b7       	in	r30, 0x3d	; 61
   12b70:	fe b7       	in	r31, 0x3e	; 62
   12b72:	95 83       	std	Z+5, r25	; 0x05
   12b74:	84 83       	std	Z+4, r24	; 0x04
   12b76:	2b 85       	ldd	r18, Y+11	; 0x0b
   12b78:	3c 85       	ldd	r19, Y+12	; 0x0c
   12b7a:	4d 85       	ldd	r20, Y+13	; 0x0d
   12b7c:	21 83       	std	Z+1, r18	; 0x01
   12b7e:	32 83       	std	Z+2, r19	; 0x02
   12b80:	43 83       	std	Z+3, r20	; 0x03
   12b82:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12b86:	e9 89       	ldd	r30, Y+17	; 0x11
   12b88:	fa 89       	ldd	r31, Y+18	; 0x12
   12b8a:	80 81       	ld	r24, Z
   12b8c:	90 e0       	ldi	r25, 0x00	; 0
   12b8e:	ed b7       	in	r30, 0x3d	; 61
   12b90:	fe b7       	in	r31, 0x3e	; 62
   12b92:	95 83       	std	Z+5, r25	; 0x05
   12b94:	84 83       	std	Z+4, r24	; 0x04
   12b96:	2e 85       	ldd	r18, Y+14	; 0x0e
   12b98:	3f 85       	ldd	r19, Y+15	; 0x0f
   12b9a:	48 89       	ldd	r20, Y+16	; 0x10
   12b9c:	21 83       	std	Z+1, r18	; 0x01
   12b9e:	32 83       	std	Z+2, r19	; 0x02
   12ba0:	43 83       	std	Z+3, r20	; 0x03
   12ba2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12ba6:	64 e0       	ldi	r22, 0x04	; 4
   12ba8:	85 e1       	ldi	r24, 0x15	; 21
   12baa:	50 dd       	rcall	.-1376   	; 0x1264c <print_tok>
   12bac:	e9 89       	ldd	r30, Y+17	; 0x11
   12bae:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb0:	20 81       	ld	r18, Z
   12bb2:	30 e0       	ldi	r19, 0x00	; 0
   12bb4:	40 e0       	ldi	r20, 0x00	; 0
   12bb6:	50 e0       	ldi	r21, 0x00	; 0
   12bb8:	68 e0       	ldi	r22, 0x08	; 8
   12bba:	81 e0       	ldi	r24, 0x01	; 1
   12bbc:	d2 dc       	rcall	.-1628   	; 0x12562 <print_tok_val>
   12bbe:	e9 89       	ldd	r30, Y+17	; 0x11
   12bc0:	fa 89       	ldd	r31, Y+18	; 0x12
   12bc2:	21 81       	ldd	r18, Z+1	; 0x01
   12bc4:	30 e0       	ldi	r19, 0x00	; 0
   12bc6:	40 e0       	ldi	r20, 0x00	; 0
   12bc8:	50 e0       	ldi	r21, 0x00	; 0
   12bca:	68 e0       	ldi	r22, 0x08	; 8
   12bcc:	8f e1       	ldi	r24, 0x1F	; 31
   12bce:	c9 dc       	rcall	.-1646   	; 0x12562 <print_tok_val>
   12bd0:	e9 89       	ldd	r30, Y+17	; 0x11
   12bd2:	fa 89       	ldd	r31, Y+18	; 0x12
   12bd4:	42 81       	ldd	r20, Z+2	; 0x02
   12bd6:	53 81       	ldd	r21, Z+3	; 0x03
   12bd8:	68 e0       	ldi	r22, 0x08	; 8
   12bda:	82 e1       	ldi	r24, 0x12	; 18
   12bdc:	02 dd       	rcall	.-1532   	; 0x125e2 <print_tok_str>
   12bde:	64 e0       	ldi	r22, 0x04	; 4
   12be0:	81 e1       	ldi	r24, 0x11	; 17
   12be2:	34 dd       	rcall	.-1432   	; 0x1264c <print_tok>
   12be4:	64 e0       	ldi	r22, 0x04	; 4
   12be6:	89 e0       	ldi	r24, 0x09	; 9
   12be8:	31 dd       	rcall	.-1438   	; 0x1264c <print_tok>
   12bea:	e9 89       	ldd	r30, Y+17	; 0x11
   12bec:	fa 89       	ldd	r31, Y+18	; 0x12
   12bee:	24 81       	ldd	r18, Z+4	; 0x04
   12bf0:	35 81       	ldd	r19, Z+5	; 0x05
   12bf2:	40 e0       	ldi	r20, 0x00	; 0
   12bf4:	50 e0       	ldi	r21, 0x00	; 0
   12bf6:	68 e0       	ldi	r22, 0x08	; 8
   12bf8:	87 e1       	ldi	r24, 0x17	; 23
   12bfa:	b3 dc       	rcall	.-1690   	; 0x12562 <print_tok_val>
   12bfc:	64 e0       	ldi	r22, 0x04	; 4
   12bfe:	81 e1       	ldi	r24, 0x11	; 17
   12c00:	25 dd       	rcall	.-1462   	; 0x1264c <print_tok>
   12c02:	a1 14       	cp	r10, r1
   12c04:	b1 04       	cpc	r11, r1
   12c06:	91 f1       	breq	.+100    	; 0x12c6c <display_Config+0x41e>
   12c08:	64 e0       	ldi	r22, 0x04	; 4
   12c0a:	84 e1       	ldi	r24, 0x14	; 20
   12c0c:	1f dd       	rcall	.-1474   	; 0x1264c <print_tok>
   12c0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12c10:	fa 89       	ldd	r31, Y+18	; 0x12
   12c12:	26 81       	ldd	r18, Z+6	; 0x06
   12c14:	37 81       	ldd	r19, Z+7	; 0x07
   12c16:	03 2e       	mov	r0, r19
   12c18:	00 0c       	add	r0, r0
   12c1a:	44 0b       	sbc	r20, r20
   12c1c:	55 0b       	sbc	r21, r21
   12c1e:	68 e0       	ldi	r22, 0x08	; 8
   12c20:	88 e0       	ldi	r24, 0x08	; 8
   12c22:	9f dc       	rcall	.-1730   	; 0x12562 <print_tok_val>
   12c24:	e9 89       	ldd	r30, Y+17	; 0x11
   12c26:	fa 89       	ldd	r31, Y+18	; 0x12
   12c28:	20 85       	ldd	r18, Z+8	; 0x08
   12c2a:	31 85       	ldd	r19, Z+9	; 0x09
   12c2c:	03 2e       	mov	r0, r19
   12c2e:	00 0c       	add	r0, r0
   12c30:	44 0b       	sbc	r20, r20
   12c32:	55 0b       	sbc	r21, r21
   12c34:	68 e0       	ldi	r22, 0x08	; 8
   12c36:	82 e2       	ldi	r24, 0x22	; 34
   12c38:	94 dc       	rcall	.-1752   	; 0x12562 <print_tok_val>
   12c3a:	e9 89       	ldd	r30, Y+17	; 0x11
   12c3c:	fa 89       	ldd	r31, Y+18	; 0x12
   12c3e:	22 85       	ldd	r18, Z+10	; 0x0a
   12c40:	33 85       	ldd	r19, Z+11	; 0x0b
   12c42:	03 2e       	mov	r0, r19
   12c44:	00 0c       	add	r0, r0
   12c46:	44 0b       	sbc	r20, r20
   12c48:	55 0b       	sbc	r21, r21
   12c4a:	68 e0       	ldi	r22, 0x08	; 8
   12c4c:	86 e1       	ldi	r24, 0x16	; 22
   12c4e:	89 dc       	rcall	.-1774   	; 0x12562 <print_tok_val>
   12c50:	e9 89       	ldd	r30, Y+17	; 0x11
   12c52:	fa 89       	ldd	r31, Y+18	; 0x12
   12c54:	24 85       	ldd	r18, Z+12	; 0x0c
   12c56:	35 85       	ldd	r19, Z+13	; 0x0d
   12c58:	03 2e       	mov	r0, r19
   12c5a:	00 0c       	add	r0, r0
   12c5c:	44 0b       	sbc	r20, r20
   12c5e:	55 0b       	sbc	r21, r21
   12c60:	68 e0       	ldi	r22, 0x08	; 8
   12c62:	8d e0       	ldi	r24, 0x0D	; 13
   12c64:	7e dc       	rcall	.-1796   	; 0x12562 <print_tok_val>
   12c66:	64 e0       	ldi	r22, 0x04	; 4
   12c68:	81 e1       	ldi	r24, 0x11	; 17
   12c6a:	f0 dc       	rcall	.-1568   	; 0x1264c <print_tok>
   12c6c:	e9 89       	ldd	r30, Y+17	; 0x11
   12c6e:	fa 89       	ldd	r31, Y+18	; 0x12
   12c70:	44 85       	ldd	r20, Z+12	; 0x0c
   12c72:	55 85       	ldd	r21, Z+13	; 0x0d
   12c74:	20 85       	ldd	r18, Z+8	; 0x08
   12c76:	31 85       	ldd	r19, Z+9	; 0x09
   12c78:	42 9f       	mul	r20, r18
   12c7a:	c0 01       	movw	r24, r0
   12c7c:	43 9f       	mul	r20, r19
   12c7e:	90 0d       	add	r25, r0
   12c80:	52 9f       	mul	r21, r18
   12c82:	90 0d       	add	r25, r0
   12c84:	11 24       	eor	r1, r1
   12c86:	42 85       	ldd	r20, Z+10	; 0x0a
   12c88:	53 85       	ldd	r21, Z+11	; 0x0b
   12c8a:	84 9f       	mul	r24, r20
   12c8c:	90 01       	movw	r18, r0
   12c8e:	85 9f       	mul	r24, r21
   12c90:	30 0d       	add	r19, r0
   12c92:	94 9f       	mul	r25, r20
   12c94:	30 0d       	add	r19, r0
   12c96:	11 24       	eor	r1, r1
   12c98:	c9 01       	movw	r24, r18
   12c9a:	33 0f       	add	r19, r19
   12c9c:	aa 0b       	sbc	r26, r26
   12c9e:	bb 0b       	sbc	r27, r27
   12ca0:	ed b7       	in	r30, 0x3d	; 61
   12ca2:	fe b7       	in	r31, 0x3e	; 62
   12ca4:	84 83       	std	Z+4, r24	; 0x04
   12ca6:	95 83       	std	Z+5, r25	; 0x05
   12ca8:	a6 83       	std	Z+6, r26	; 0x06
   12caa:	b7 83       	std	Z+7, r27	; 0x07
   12cac:	21 82       	std	Z+1, r2	; 0x01
   12cae:	32 82       	std	Z+2, r3	; 0x02
   12cb0:	43 82       	std	Z+3, r4	; 0x03
   12cb2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12cb6:	60 e0       	ldi	r22, 0x00	; 0
   12cb8:	81 e1       	ldi	r24, 0x11	; 17
   12cba:	c8 dc       	rcall	.-1648   	; 0x1264c <print_tok>
   12cbc:	f8 01       	movw	r30, r16
   12cbe:	80 81       	ld	r24, Z
   12cc0:	84 30       	cpi	r24, 0x04	; 4
   12cc2:	c9 f4       	brne	.+50     	; 0x12cf6 <display_Config+0x4a8>
   12cc4:	27 a1       	ldd	r18, Z+39	; 0x27
   12cc6:	30 a5       	ldd	r19, Z+40	; 0x28
   12cc8:	3a 8b       	std	Y+18, r19	; 0x12
   12cca:	29 8b       	std	Y+17, r18	; 0x11
   12ccc:	60 e0       	ldi	r22, 0x00	; 0
   12cce:	80 e2       	ldi	r24, 0x20	; 32
   12cd0:	bd dc       	rcall	.-1670   	; 0x1264c <print_tok>
   12cd2:	64 e0       	ldi	r22, 0x04	; 4
   12cd4:	89 e0       	ldi	r24, 0x09	; 9
   12cd6:	ba dc       	rcall	.-1676   	; 0x1264c <print_tok>
   12cd8:	e9 89       	ldd	r30, Y+17	; 0x11
   12cda:	fa 89       	ldd	r31, Y+18	; 0x12
   12cdc:	20 81       	ld	r18, Z
   12cde:	30 e0       	ldi	r19, 0x00	; 0
   12ce0:	40 e0       	ldi	r20, 0x00	; 0
   12ce2:	50 e0       	ldi	r21, 0x00	; 0
   12ce4:	68 e0       	ldi	r22, 0x08	; 8
   12ce6:	81 e0       	ldi	r24, 0x01	; 1
   12ce8:	3c dc       	rcall	.-1928   	; 0x12562 <print_tok_val>
   12cea:	64 e0       	ldi	r22, 0x04	; 4
   12cec:	81 e1       	ldi	r24, 0x11	; 17
   12cee:	ae dc       	rcall	.-1700   	; 0x1264c <print_tok>
   12cf0:	60 e0       	ldi	r22, 0x00	; 0
   12cf2:	81 e1       	ldi	r24, 0x11	; 17
   12cf4:	ab dc       	rcall	.-1706   	; 0x1264c <print_tok>
   12cf6:	28 85       	ldd	r18, Y+8	; 0x08
   12cf8:	39 85       	ldd	r19, Y+9	; 0x09
   12cfa:	4a 85       	ldd	r20, Y+10	; 0x0a
   12cfc:	ed b7       	in	r30, 0x3d	; 61
   12cfe:	fe b7       	in	r31, 0x3e	; 62
   12d00:	21 83       	std	Z+1, r18	; 0x01
   12d02:	32 83       	std	Z+2, r19	; 0x02
   12d04:	43 83       	std	Z+3, r20	; 0x03
   12d06:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12d0a:	05 5d       	subi	r16, 0xD5	; 213
   12d0c:	1f 4f       	sbci	r17, 0xFF	; 255
   12d0e:	29 ed       	ldi	r18, 0xD9	; 217
   12d10:	30 e2       	ldi	r19, 0x20	; 32
   12d12:	20 17       	cp	r18, r16
   12d14:	31 07       	cpc	r19, r17
   12d16:	09 f0       	breq	.+2      	; 0x12d1a <display_Config+0x4cc>
   12d18:	df cd       	rjmp	.-1090   	; 0x128d8 <display_Config+0x8a>
   12d1a:	8f e0       	ldi	r24, 0x0F	; 15
   12d1c:	98 e1       	ldi	r25, 0x18	; 24
   12d1e:	a0 e0       	ldi	r26, 0x00	; 0
   12d20:	ed b7       	in	r30, 0x3d	; 61
   12d22:	fe b7       	in	r31, 0x3e	; 62
   12d24:	81 83       	std	Z+1, r24	; 0x01
   12d26:	92 83       	std	Z+2, r25	; 0x02
   12d28:	a3 83       	std	Z+3, r26	; 0x03
   12d2a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12d2e:	62 96       	adiw	r28, 0x12	; 18
   12d30:	0f b6       	in	r0, 0x3f	; 63
   12d32:	f8 94       	cli
   12d34:	de bf       	out	0x3e, r29	; 62
   12d36:	0f be       	out	0x3f, r0	; 63
   12d38:	cd bf       	out	0x3d, r28	; 61
   12d3a:	df 91       	pop	r29
   12d3c:	cf 91       	pop	r28
   12d3e:	1f 91       	pop	r17
   12d40:	0f 91       	pop	r16
   12d42:	ef 90       	pop	r14
   12d44:	df 90       	pop	r13
   12d46:	cf 90       	pop	r12
   12d48:	bf 90       	pop	r11
   12d4a:	af 90       	pop	r10
   12d4c:	8f 90       	pop	r8
   12d4e:	7f 90       	pop	r7
   12d50:	6f 90       	pop	r6
   12d52:	4f 90       	pop	r4
   12d54:	3f 90       	pop	r3
   12d56:	2f 90       	pop	r2
   12d58:	08 95       	ret

00012d5a <find_type>:
   12d5a:	e5 ed       	ldi	r30, 0xD5	; 213
   12d5c:	fe e1       	ldi	r31, 0x1E	; 30
   12d5e:	20 e0       	ldi	r18, 0x00	; 0
   12d60:	30 e0       	ldi	r19, 0x00	; 0
   12d62:	40 81       	ld	r20, Z
   12d64:	50 e0       	ldi	r21, 0x00	; 0
   12d66:	48 17       	cp	r20, r24
   12d68:	59 07       	cpc	r21, r25
   12d6a:	49 f0       	breq	.+18     	; 0x12d7e <find_type+0x24>
   12d6c:	2f 5f       	subi	r18, 0xFF	; 255
   12d6e:	3f 4f       	sbci	r19, 0xFF	; 255
   12d70:	bb 96       	adiw	r30, 0x2b	; 43
   12d72:	2c 30       	cpi	r18, 0x0C	; 12
   12d74:	31 05       	cpc	r19, r1
   12d76:	a9 f7       	brne	.-22     	; 0x12d62 <find_type+0x8>
   12d78:	8f ef       	ldi	r24, 0xFF	; 255
   12d7a:	9f ef       	ldi	r25, 0xFF	; 255
   12d7c:	08 95       	ret
   12d7e:	c9 01       	movw	r24, r18
   12d80:	08 95       	ret

00012d82 <count_drive_types>:
   12d82:	28 2f       	mov	r18, r24
   12d84:	e5 ed       	ldi	r30, 0xD5	; 213
   12d86:	fe e1       	ldi	r31, 0x1E	; 30
   12d88:	80 e0       	ldi	r24, 0x00	; 0
   12d8a:	90 e0       	ldi	r25, 0x00	; 0
   12d8c:	30 81       	ld	r19, Z
   12d8e:	32 13       	cpse	r19, r18
   12d90:	01 c0       	rjmp	.+2      	; 0x12d94 <count_drive_types+0x12>
   12d92:	01 96       	adiw	r24, 0x01	; 1
   12d94:	bb 96       	adiw	r30, 0x2b	; 43
   12d96:	30 e2       	ldi	r19, 0x20	; 32
   12d98:	e9 3d       	cpi	r30, 0xD9	; 217
   12d9a:	f3 07       	cpc	r31, r19
   12d9c:	b9 f7       	brne	.-18     	; 0x12d8c <count_drive_types+0xa>
   12d9e:	08 95       	ret

00012da0 <type_to_str>:
   12da0:	00 97       	sbiw	r24, 0x00	; 0
   12da2:	59 f0       	breq	.+22     	; 0x12dba <type_to_str+0x1a>
   12da4:	81 30       	cpi	r24, 0x01	; 1
   12da6:	91 05       	cpc	r25, r1
   12da8:	59 f0       	breq	.+22     	; 0x12dc0 <type_to_str+0x20>
   12daa:	83 30       	cpi	r24, 0x03	; 3
   12dac:	91 05       	cpc	r25, r1
   12dae:	59 f0       	breq	.+22     	; 0x12dc6 <type_to_str+0x26>
   12db0:	04 97       	sbiw	r24, 0x04	; 4
   12db2:	61 f0       	breq	.+24     	; 0x12dcc <type_to_str+0x2c>
   12db4:	85 e0       	ldi	r24, 0x05	; 5
   12db6:	9e e0       	ldi	r25, 0x0E	; 14
   12db8:	08 95       	ret
   12dba:	8b ed       	ldi	r24, 0xDB	; 219
   12dbc:	9d e0       	ldi	r25, 0x0D	; 13
   12dbe:	08 95       	ret
   12dc0:	83 ee       	ldi	r24, 0xE3	; 227
   12dc2:	9d e0       	ldi	r25, 0x0D	; 13
   12dc4:	08 95       	ret
   12dc6:	8b ef       	ldi	r24, 0xFB	; 251
   12dc8:	9d e0       	ldi	r25, 0x0D	; 13
   12dca:	08 95       	ret
   12dcc:	8e ee       	ldi	r24, 0xEE	; 238
   12dce:	9d e0       	ldi	r25, 0x0D	; 13
   12dd0:	08 95       	ret

00012dd2 <find_free>:
   12dd2:	80 e0       	ldi	r24, 0x00	; 0
   12dd4:	90 e0       	ldi	r25, 0x00	; 0
   12dd6:	c1 cf       	rjmp	.-126    	; 0x12d5a <find_type>
   12dd8:	08 95       	ret

00012dda <find_device>:
   12dda:	9b 01       	movw	r18, r22
   12ddc:	20 52       	subi	r18, 0x20	; 32
   12dde:	31 09       	sbc	r19, r1
   12de0:	2f 35       	cpi	r18, 0x5F	; 95
   12de2:	31 05       	cpc	r19, r1
   12de4:	f8 f4       	brcc	.+62     	; 0x12e24 <find_device+0x4a>
   12de6:	64 17       	cp	r22, r20
   12de8:	75 07       	cpc	r23, r21
   12dea:	e4 f0       	brlt	.+56     	; 0x12e24 <find_device+0x4a>
   12dec:	9a 01       	movw	r18, r20
   12dee:	22 5e       	subi	r18, 0xE2	; 226
   12df0:	3f 4f       	sbci	r19, 0xFF	; 255
   12df2:	26 17       	cp	r18, r22
   12df4:	37 07       	cpc	r19, r23
   12df6:	b4 f0       	brlt	.+44     	; 0x12e24 <find_device+0x4a>
   12df8:	64 1b       	sub	r22, r20
   12dfa:	75 0b       	sbc	r23, r21
   12dfc:	e5 ed       	ldi	r30, 0xD5	; 213
   12dfe:	fe e1       	ldi	r31, 0x1E	; 30
   12e00:	20 e0       	ldi	r18, 0x00	; 0
   12e02:	30 e0       	ldi	r19, 0x00	; 0
   12e04:	40 81       	ld	r20, Z
   12e06:	50 e0       	ldi	r21, 0x00	; 0
   12e08:	48 17       	cp	r20, r24
   12e0a:	59 07       	cpc	r21, r25
   12e0c:	29 f4       	brne	.+10     	; 0x12e18 <find_device+0x3e>
   12e0e:	41 81       	ldd	r20, Z+1	; 0x01
   12e10:	50 e0       	ldi	r21, 0x00	; 0
   12e12:	64 17       	cp	r22, r20
   12e14:	75 07       	cpc	r23, r21
   12e16:	49 f0       	breq	.+18     	; 0x12e2a <find_device+0x50>
   12e18:	2f 5f       	subi	r18, 0xFF	; 255
   12e1a:	3f 4f       	sbci	r19, 0xFF	; 255
   12e1c:	bb 96       	adiw	r30, 0x2b	; 43
   12e1e:	2c 30       	cpi	r18, 0x0C	; 12
   12e20:	31 05       	cpc	r19, r1
   12e22:	81 f7       	brne	.-32     	; 0x12e04 <find_device+0x2a>
   12e24:	8f ef       	ldi	r24, 0xFF	; 255
   12e26:	9f ef       	ldi	r25, 0xFF	; 255
   12e28:	08 95       	ret
   12e2a:	c9 01       	movw	r24, r18
   12e2c:	08 95       	ret

00012e2e <set_active_device>:
   12e2e:	a9 e0       	ldi	r26, 0x09	; 9
   12e30:	b0 e0       	ldi	r27, 0x00	; 0
   12e32:	ed e1       	ldi	r30, 0x1D	; 29
   12e34:	f7 e9       	ldi	r31, 0x97	; 151
   12e36:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
   12e3a:	8f 3f       	cpi	r24, 0xFF	; 255
   12e3c:	2f ef       	ldi	r18, 0xFF	; 255
   12e3e:	92 07       	cpc	r25, r18
   12e40:	09 f4       	brne	.+2      	; 0x12e44 <set_active_device+0x16>
   12e42:	d0 c0       	rjmp	.+416    	; 0x12fe4 <set_active_device+0x1b6>
   12e44:	ec 01       	movw	r28, r24
   12e46:	0c 97       	sbiw	r24, 0x0c	; 12
   12e48:	b0 f0       	brcs	.+44     	; 0x12e76 <set_active_device+0x48>
   12e4a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12e4e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12e52:	c9 01       	movw	r24, r18
   12e54:	82 70       	andi	r24, 0x02	; 2
   12e56:	99 27       	eor	r25, r25
   12e58:	21 ff       	sbrs	r18, 1
   12e5a:	c6 c0       	rjmp	.+396    	; 0x12fe8 <set_active_device+0x1ba>
   12e5c:	ed b7       	in	r30, 0x3d	; 61
   12e5e:	fe b7       	in	r31, 0x3e	; 62
   12e60:	d5 83       	std	Z+5, r29	; 0x05
   12e62:	c4 83       	std	Z+4, r28	; 0x04
   12e64:	8a ee       	ldi	r24, 0xEA	; 234
   12e66:	97 e1       	ldi	r25, 0x17	; 23
   12e68:	a0 e0       	ldi	r26, 0x00	; 0
   12e6a:	81 83       	std	Z+1, r24	; 0x01
   12e6c:	92 83       	std	Z+2, r25	; 0x02
   12e6e:	a3 83       	std	Z+3, r26	; 0x03
   12e70:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12e74:	b7 c0       	rjmp	.+366    	; 0x12fe4 <set_active_device+0x1b6>
   12e76:	8b e2       	ldi	r24, 0x2B	; 43
   12e78:	8c 9f       	mul	r24, r28
   12e7a:	f0 01       	movw	r30, r0
   12e7c:	8d 9f       	mul	r24, r29
   12e7e:	f0 0d       	add	r31, r0
   12e80:	11 24       	eor	r1, r1
   12e82:	eb 52       	subi	r30, 0x2B	; 43
   12e84:	f1 4e       	sbci	r31, 0xE1	; 225
   12e86:	21 81       	ldd	r18, Z+1	; 0x01
   12e88:	2f 31       	cpi	r18, 0x1F	; 31
   12e8a:	d0 f0       	brcs	.+52     	; 0x12ec0 <set_active_device+0x92>
   12e8c:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   12e90:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12e94:	ca 01       	movw	r24, r20
   12e96:	82 70       	andi	r24, 0x02	; 2
   12e98:	99 27       	eor	r25, r25
   12e9a:	41 ff       	sbrs	r20, 1
   12e9c:	a5 c0       	rjmp	.+330    	; 0x12fe8 <set_active_device+0x1ba>
   12e9e:	82 2f       	mov	r24, r18
   12ea0:	90 e0       	ldi	r25, 0x00	; 0
   12ea2:	ed b7       	in	r30, 0x3d	; 61
   12ea4:	fe b7       	in	r31, 0x3e	; 62
   12ea6:	97 83       	std	Z+7, r25	; 0x07
   12ea8:	86 83       	std	Z+6, r24	; 0x06
   12eaa:	d5 83       	std	Z+5, r29	; 0x05
   12eac:	c4 83       	std	Z+4, r28	; 0x04
   12eae:	81 eb       	ldi	r24, 0xB1	; 177
   12eb0:	97 e1       	ldi	r25, 0x17	; 23
   12eb2:	a0 e0       	ldi	r26, 0x00	; 0
   12eb4:	81 83       	std	Z+1, r24	; 0x01
   12eb6:	92 83       	std	Z+2, r25	; 0x02
   12eb8:	a3 83       	std	Z+3, r26	; 0x03
   12eba:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12ebe:	92 c0       	rjmp	.+292    	; 0x12fe4 <set_active_device+0x1b6>
   12ec0:	20 81       	ld	r18, Z
   12ec2:	02 2f       	mov	r16, r18
   12ec4:	10 e0       	ldi	r17, 0x00	; 0
   12ec6:	87 a1       	ldd	r24, Z+39	; 0x27
   12ec8:	90 a5       	ldd	r25, Z+40	; 0x28
   12eca:	00 97       	sbiw	r24, 0x00	; 0
   12ecc:	b1 f4       	brne	.+44     	; 0x12efa <set_active_device+0xcc>
   12ece:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12ed2:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12ed6:	c9 01       	movw	r24, r18
   12ed8:	82 70       	andi	r24, 0x02	; 2
   12eda:	99 27       	eor	r25, r25
   12edc:	21 ff       	sbrs	r18, 1
   12ede:	84 c0       	rjmp	.+264    	; 0x12fe8 <set_active_device+0x1ba>
   12ee0:	c8 01       	movw	r24, r16
   12ee2:	5e df       	rcall	.-324    	; 0x12da0 <type_to_str>
   12ee4:	ed b7       	in	r30, 0x3d	; 61
   12ee6:	fe b7       	in	r31, 0x3e	; 62
   12ee8:	91 87       	std	Z+9, r25	; 0x09
   12eea:	80 87       	std	Z+8, r24	; 0x08
   12eec:	17 83       	std	Z+7, r17	; 0x07
   12eee:	06 83       	std	Z+6, r16	; 0x06
   12ef0:	d5 83       	std	Z+5, r29	; 0x05
   12ef2:	c4 83       	std	Z+4, r28	; 0x04
   12ef4:	8c e7       	ldi	r24, 0x7C	; 124
   12ef6:	97 e1       	ldi	r25, 0x17	; 23
   12ef8:	6f c0       	rjmp	.+222    	; 0x12fd8 <set_active_device+0x1aa>
   12efa:	01 15       	cp	r16, r1
   12efc:	11 05       	cpc	r17, r1
   12efe:	b9 f4       	brne	.+46     	; 0x12f2e <set_active_device+0x100>
   12f00:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12f04:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12f08:	c9 01       	movw	r24, r18
   12f0a:	82 70       	andi	r24, 0x02	; 2
   12f0c:	99 27       	eor	r25, r25
   12f0e:	21 ff       	sbrs	r18, 1
   12f10:	6b c0       	rjmp	.+214    	; 0x12fe8 <set_active_device+0x1ba>
   12f12:	80 e0       	ldi	r24, 0x00	; 0
   12f14:	90 e0       	ldi	r25, 0x00	; 0
   12f16:	44 df       	rcall	.-376    	; 0x12da0 <type_to_str>
   12f18:	ed b7       	in	r30, 0x3d	; 61
   12f1a:	fe b7       	in	r31, 0x3e	; 62
   12f1c:	91 87       	std	Z+9, r25	; 0x09
   12f1e:	80 87       	std	Z+8, r24	; 0x08
   12f20:	17 82       	std	Z+7, r1	; 0x07
   12f22:	16 82       	std	Z+6, r1	; 0x06
   12f24:	d5 83       	std	Z+5, r29	; 0x05
   12f26:	c4 83       	std	Z+4, r28	; 0x04
   12f28:	87 e4       	ldi	r24, 0x47	; 71
   12f2a:	97 e1       	ldi	r25, 0x17	; 23
   12f2c:	55 c0       	rjmp	.+170    	; 0x12fd8 <set_active_device+0x1aa>
   12f2e:	04 30       	cpi	r16, 0x04	; 4
   12f30:	11 05       	cpc	r17, r1
   12f32:	29 f4       	brne	.+10     	; 0x12f3e <set_active_device+0x110>
   12f34:	90 93 53 19 	sts	0x1953, r25	; 0x801953 <PRINTERp+0x1>
   12f38:	80 93 52 19 	sts	0x1952, r24	; 0x801952 <PRINTERp>
   12f3c:	35 c0       	rjmp	.+106    	; 0x12fa8 <set_active_device+0x17a>
   12f3e:	2d 7f       	andi	r18, 0xFD	; 253
   12f40:	21 30       	cpi	r18, 0x01	; 1
   12f42:	a9 f5       	brne	.+106    	; 0x12fae <set_active_device+0x180>
   12f44:	21 a5       	ldd	r18, Z+41	; 0x29
   12f46:	32 a5       	ldd	r19, Z+42	; 0x2a
   12f48:	21 15       	cp	r18, r1
   12f4a:	31 05       	cpc	r19, r1
   12f4c:	b1 f4       	brne	.+44     	; 0x12f7a <set_active_device+0x14c>
   12f4e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12f52:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12f56:	c9 01       	movw	r24, r18
   12f58:	82 70       	andi	r24, 0x02	; 2
   12f5a:	99 27       	eor	r25, r25
   12f5c:	21 ff       	sbrs	r18, 1
   12f5e:	44 c0       	rjmp	.+136    	; 0x12fe8 <set_active_device+0x1ba>
   12f60:	c8 01       	movw	r24, r16
   12f62:	1e df       	rcall	.-452    	; 0x12da0 <type_to_str>
   12f64:	ed b7       	in	r30, 0x3d	; 61
   12f66:	fe b7       	in	r31, 0x3e	; 62
   12f68:	91 87       	std	Z+9, r25	; 0x09
   12f6a:	80 87       	std	Z+8, r24	; 0x08
   12f6c:	17 83       	std	Z+7, r17	; 0x07
   12f6e:	06 83       	std	Z+6, r16	; 0x06
   12f70:	d5 83       	std	Z+5, r29	; 0x05
   12f72:	c4 83       	std	Z+4, r28	; 0x04
   12f74:	8f e0       	ldi	r24, 0x0F	; 15
   12f76:	97 e1       	ldi	r25, 0x17	; 23
   12f78:	2f c0       	rjmp	.+94     	; 0x12fd8 <set_active_device+0x1aa>
   12f7a:	01 30       	cpi	r16, 0x01	; 1
   12f7c:	11 05       	cpc	r17, r1
   12f7e:	49 f4       	brne	.+18     	; 0x12f92 <set_active_device+0x164>
   12f80:	90 93 4d 19 	sts	0x194D, r25	; 0x80194d <AMIGOp+0x1>
   12f84:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <AMIGOp>
   12f88:	30 93 4b 19 	sts	0x194B, r19	; 0x80194b <AMIGOs+0x1>
   12f8c:	20 93 4a 19 	sts	0x194A, r18	; 0x80194a <AMIGOs>
   12f90:	0b c0       	rjmp	.+22     	; 0x12fa8 <set_active_device+0x17a>
   12f92:	03 30       	cpi	r16, 0x03	; 3
   12f94:	11 05       	cpc	r17, r1
   12f96:	59 f4       	brne	.+22     	; 0x12fae <set_active_device+0x180>
   12f98:	90 93 51 19 	sts	0x1951, r25	; 0x801951 <SS80p+0x1>
   12f9c:	80 93 50 19 	sts	0x1950, r24	; 0x801950 <SS80p>
   12fa0:	30 93 4f 19 	sts	0x194F, r19	; 0x80194f <SS80s+0x1>
   12fa4:	20 93 4e 19 	sts	0x194E, r18	; 0x80194e <SS80s>
   12fa8:	81 e0       	ldi	r24, 0x01	; 1
   12faa:	90 e0       	ldi	r25, 0x00	; 0
   12fac:	1d c0       	rjmp	.+58     	; 0x12fe8 <set_active_device+0x1ba>
   12fae:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12fb2:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12fb6:	c9 01       	movw	r24, r18
   12fb8:	82 70       	andi	r24, 0x02	; 2
   12fba:	99 27       	eor	r25, r25
   12fbc:	21 ff       	sbrs	r18, 1
   12fbe:	14 c0       	rjmp	.+40     	; 0x12fe8 <set_active_device+0x1ba>
   12fc0:	c8 01       	movw	r24, r16
   12fc2:	ee de       	rcall	.-548    	; 0x12da0 <type_to_str>
   12fc4:	ed b7       	in	r30, 0x3d	; 61
   12fc6:	fe b7       	in	r31, 0x3e	; 62
   12fc8:	91 87       	std	Z+9, r25	; 0x09
   12fca:	80 87       	std	Z+8, r24	; 0x08
   12fcc:	17 83       	std	Z+7, r17	; 0x07
   12fce:	06 83       	std	Z+6, r16	; 0x06
   12fd0:	d5 83       	std	Z+5, r29	; 0x05
   12fd2:	c4 83       	std	Z+4, r28	; 0x04
   12fd4:	84 ee       	ldi	r24, 0xE4	; 228
   12fd6:	96 e1       	ldi	r25, 0x16	; 22
   12fd8:	a0 e0       	ldi	r26, 0x00	; 0
   12fda:	81 83       	std	Z+1, r24	; 0x01
   12fdc:	92 83       	std	Z+2, r25	; 0x02
   12fde:	a3 83       	std	Z+3, r26	; 0x03
   12fe0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   12fe4:	80 e0       	ldi	r24, 0x00	; 0
   12fe6:	90 e0       	ldi	r25, 0x00	; 0
   12fe8:	cd b7       	in	r28, 0x3d	; 61
   12fea:	de b7       	in	r29, 0x3e	; 62
   12fec:	29 96       	adiw	r28, 0x09	; 9
   12fee:	e4 e0       	ldi	r30, 0x04	; 4
   12ff0:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00012ff4 <SS80_Set_Defaults>:
   12ff4:	0f 93       	push	r16
   12ff6:	1f 93       	push	r17
   12ff8:	cf 93       	push	r28
   12ffa:	df 93       	push	r29
   12ffc:	ec 01       	movw	r28, r24
   12ffe:	82 e0       	ldi	r24, 0x02	; 2
   13000:	90 e0       	ldi	r25, 0x00	; 0
   13002:	ab de       	rcall	.-682    	; 0x12d5a <find_type>
   13004:	97 fd       	sbrc	r25, 7
   13006:	6b c0       	rjmp	.+214    	; 0x130de <SS80_Set_Defaults+0xea>
   13008:	2b e2       	ldi	r18, 0x2B	; 43
   1300a:	2c 9f       	mul	r18, r28
   1300c:	f0 01       	movw	r30, r0
   1300e:	2d 9f       	mul	r18, r29
   13010:	f0 0d       	add	r31, r0
   13012:	11 24       	eor	r1, r1
   13014:	eb 52       	subi	r30, 0x2B	; 43
   13016:	f1 4e       	sbci	r31, 0xE1	; 225
   13018:	c7 a1       	ldd	r28, Z+39	; 0x27
   1301a:	d0 a5       	ldd	r29, Z+40	; 0x28
   1301c:	28 9f       	mul	r18, r24
   1301e:	f0 01       	movw	r30, r0
   13020:	29 9f       	mul	r18, r25
   13022:	f0 0d       	add	r31, r0
   13024:	11 24       	eor	r1, r1
   13026:	eb 52       	subi	r30, 0x2B	; 43
   13028:	f1 4e       	sbci	r31, 0xE1	; 225
   1302a:	07 a1       	ldd	r16, Z+39	; 0x27
   1302c:	10 a5       	ldd	r17, Z+40	; 0x28
   1302e:	f8 01       	movw	r30, r16
   13030:	80 81       	ld	r24, Z
   13032:	88 83       	st	Y, r24
   13034:	81 81       	ldd	r24, Z+1	; 0x01
   13036:	89 83       	std	Y+1, r24	; 0x01
   13038:	82 81       	ldd	r24, Z+2	; 0x02
   1303a:	93 81       	ldd	r25, Z+3	; 0x03
   1303c:	0e 94 72 31 	call	0x62e4	; 0x62e4 <stralloc>
   13040:	9b 83       	std	Y+3, r25	; 0x03
   13042:	8a 83       	std	Y+2, r24	; 0x02
   13044:	f8 01       	movw	r30, r16
   13046:	84 81       	ldd	r24, Z+4	; 0x04
   13048:	95 81       	ldd	r25, Z+5	; 0x05
   1304a:	9d 83       	std	Y+5, r25	; 0x05
   1304c:	8c 83       	std	Y+4, r24	; 0x04
   1304e:	86 81       	ldd	r24, Z+6	; 0x06
   13050:	97 81       	ldd	r25, Z+7	; 0x07
   13052:	9f 83       	std	Y+7, r25	; 0x07
   13054:	8e 83       	std	Y+6, r24	; 0x06
   13056:	80 85       	ldd	r24, Z+8	; 0x08
   13058:	91 85       	ldd	r25, Z+9	; 0x09
   1305a:	99 87       	std	Y+9, r25	; 0x09
   1305c:	88 87       	std	Y+8, r24	; 0x08
   1305e:	82 85       	ldd	r24, Z+10	; 0x0a
   13060:	8a 87       	std	Y+10, r24	; 0x0a
   13062:	83 85       	ldd	r24, Z+11	; 0x0b
   13064:	8b 87       	std	Y+11, r24	; 0x0b
   13066:	84 85       	ldd	r24, Z+12	; 0x0c
   13068:	95 85       	ldd	r25, Z+13	; 0x0d
   1306a:	a6 85       	ldd	r26, Z+14	; 0x0e
   1306c:	b7 85       	ldd	r27, Z+15	; 0x0f
   1306e:	8c 87       	std	Y+12, r24	; 0x0c
   13070:	9d 87       	std	Y+13, r25	; 0x0d
   13072:	ae 87       	std	Y+14, r26	; 0x0e
   13074:	bf 87       	std	Y+15, r27	; 0x0f
   13076:	80 89       	ldd	r24, Z+16	; 0x10
   13078:	91 89       	ldd	r25, Z+17	; 0x11
   1307a:	99 8b       	std	Y+17, r25	; 0x11
   1307c:	88 8b       	std	Y+16, r24	; 0x10
   1307e:	82 89       	ldd	r24, Z+18	; 0x12
   13080:	8a 8b       	std	Y+18, r24	; 0x12
   13082:	83 89       	ldd	r24, Z+19	; 0x13
   13084:	8b 8b       	std	Y+19, r24	; 0x13
   13086:	84 89       	ldd	r24, Z+20	; 0x14
   13088:	95 89       	ldd	r25, Z+21	; 0x15
   1308a:	9d 8b       	std	Y+21, r25	; 0x15
   1308c:	8c 8b       	std	Y+20, r24	; 0x14
   1308e:	86 89       	ldd	r24, Z+22	; 0x16
   13090:	97 89       	ldd	r25, Z+23	; 0x17
   13092:	9f 8b       	std	Y+23, r25	; 0x17
   13094:	8e 8b       	std	Y+22, r24	; 0x16
   13096:	80 8d       	ldd	r24, Z+24	; 0x18
   13098:	91 8d       	ldd	r25, Z+25	; 0x19
   1309a:	99 8f       	std	Y+25, r25	; 0x19
   1309c:	88 8f       	std	Y+24, r24	; 0x18
   1309e:	82 8d       	ldd	r24, Z+26	; 0x1a
   130a0:	93 8d       	ldd	r25, Z+27	; 0x1b
   130a2:	9b 8f       	std	Y+27, r25	; 0x1b
   130a4:	8a 8f       	std	Y+26, r24	; 0x1a
   130a6:	84 8d       	ldd	r24, Z+28	; 0x1c
   130a8:	8c 8f       	std	Y+28, r24	; 0x1c
   130aa:	85 8d       	ldd	r24, Z+29	; 0x1d
   130ac:	8d 8f       	std	Y+29, r24	; 0x1d
   130ae:	87 8d       	ldd	r24, Z+31	; 0x1f
   130b0:	90 a1       	ldd	r25, Z+32	; 0x20
   130b2:	a1 a1       	ldd	r26, Z+33	; 0x21
   130b4:	b2 a1       	ldd	r27, Z+34	; 0x22
   130b6:	8f 8f       	std	Y+31, r24	; 0x1f
   130b8:	98 a3       	std	Y+32, r25	; 0x20
   130ba:	a9 a3       	std	Y+33, r26	; 0x21
   130bc:	ba a3       	std	Y+34, r27	; 0x22
   130be:	83 a1       	ldd	r24, Z+35	; 0x23
   130c0:	8b a3       	std	Y+35, r24	; 0x23
   130c2:	84 a1       	ldd	r24, Z+36	; 0x24
   130c4:	95 a1       	ldd	r25, Z+37	; 0x25
   130c6:	9d a3       	std	Y+37, r25	; 0x25
   130c8:	8c a3       	std	Y+36, r24	; 0x24
   130ca:	86 a1       	ldd	r24, Z+38	; 0x26
   130cc:	97 a1       	ldd	r25, Z+39	; 0x27
   130ce:	a0 a5       	ldd	r26, Z+40	; 0x28
   130d0:	b1 a5       	ldd	r27, Z+41	; 0x29
   130d2:	8e a3       	std	Y+38, r24	; 0x26
   130d4:	9f a3       	std	Y+39, r25	; 0x27
   130d6:	a8 a7       	std	Y+40, r26	; 0x28
   130d8:	b9 a7       	std	Y+41, r27	; 0x29
   130da:	82 a5       	ldd	r24, Z+42	; 0x2a
   130dc:	8a a7       	std	Y+42, r24	; 0x2a
   130de:	df 91       	pop	r29
   130e0:	cf 91       	pop	r28
   130e2:	1f 91       	pop	r17
   130e4:	0f 91       	pop	r16
   130e6:	08 95       	ret

000130e8 <alloc_device>:
   130e8:	0f 93       	push	r16
   130ea:	1f 93       	push	r17
   130ec:	cf 93       	push	r28
   130ee:	df 93       	push	r29
   130f0:	ad b7       	in	r26, 0x3d	; 61
   130f2:	be b7       	in	r27, 0x3e	; 62
   130f4:	17 97       	sbiw	r26, 0x07	; 7
   130f6:	0f b6       	in	r0, 0x3f	; 63
   130f8:	f8 94       	cli
   130fa:	be bf       	out	0x3e, r27	; 62
   130fc:	0f be       	out	0x3f, r0	; 63
   130fe:	ad bf       	out	0x3d, r26	; 61
   13100:	8c 01       	movw	r16, r24
   13102:	67 de       	rcall	.-818    	; 0x12dd2 <find_free>
   13104:	ec 01       	movw	r28, r24
   13106:	cf 3f       	cpi	r28, 0xFF	; 255
   13108:	8f ef       	ldi	r24, 0xFF	; 255
   1310a:	d8 07       	cpc	r29, r24
   1310c:	89 f4       	brne	.+34     	; 0x13130 <alloc_device+0x48>
   1310e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   13112:	81 ff       	sbrs	r24, 1
   13114:	a1 c0       	rjmp	.+322    	; 0x13258 <alloc_device+0x170>
   13116:	ed b7       	in	r30, 0x3d	; 61
   13118:	fe b7       	in	r31, 0x3e	; 62
   1311a:	15 83       	std	Z+5, r17	; 0x05
   1311c:	04 83       	std	Z+4, r16	; 0x04
   1311e:	80 ec       	ldi	r24, 0xC0	; 192
   13120:	96 e1       	ldi	r25, 0x16	; 22
   13122:	a0 e0       	ldi	r26, 0x00	; 0
   13124:	81 83       	std	Z+1, r24	; 0x01
   13126:	92 83       	std	Z+2, r25	; 0x02
   13128:	a3 83       	std	Z+3, r26	; 0x03
   1312a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1312e:	94 c0       	rjmp	.+296    	; 0x13258 <alloc_device+0x170>
   13130:	02 30       	cpi	r16, 0x02	; 2
   13132:	11 05       	cpc	r17, r1
   13134:	e1 f1       	breq	.+120    	; 0x131ae <alloc_device+0xc6>
   13136:	ec f4       	brge	.+58     	; 0x13172 <alloc_device+0x8a>
   13138:	01 30       	cpi	r16, 0x01	; 1
   1313a:	11 05       	cpc	r17, r1
   1313c:	09 f0       	breq	.+2      	; 0x13140 <alloc_device+0x58>
   1313e:	76 c0       	rjmp	.+236    	; 0x1322c <alloc_device+0x144>
   13140:	8b e2       	ldi	r24, 0x2B	; 43
   13142:	8c 9f       	mul	r24, r28
   13144:	80 01       	movw	r16, r0
   13146:	8d 9f       	mul	r24, r29
   13148:	10 0d       	add	r17, r0
   1314a:	11 24       	eor	r1, r1
   1314c:	0b 52       	subi	r16, 0x2B	; 43
   1314e:	11 4e       	sbci	r17, 0xE1	; 225
   13150:	81 e0       	ldi	r24, 0x01	; 1
   13152:	f8 01       	movw	r30, r16
   13154:	80 83       	st	Z, r24
   13156:	61 e0       	ldi	r22, 0x01	; 1
   13158:	70 e0       	ldi	r23, 0x00	; 0
   1315a:	85 e1       	ldi	r24, 0x15	; 21
   1315c:	90 e0       	ldi	r25, 0x00	; 0
   1315e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   13162:	f8 01       	movw	r30, r16
   13164:	90 a7       	std	Z+40, r25	; 0x28
   13166:	87 a3       	std	Z+39, r24	; 0x27
   13168:	61 e0       	ldi	r22, 0x01	; 1
   1316a:	70 e0       	ldi	r23, 0x00	; 0
   1316c:	88 e1       	ldi	r24, 0x18	; 24
   1316e:	90 e0       	ldi	r25, 0x00	; 0
   13170:	57 c0       	rjmp	.+174    	; 0x13220 <alloc_device+0x138>
   13172:	03 30       	cpi	r16, 0x03	; 3
   13174:	11 05       	cpc	r17, r1
   13176:	a1 f1       	breq	.+104    	; 0x131e0 <alloc_device+0xf8>
   13178:	04 30       	cpi	r16, 0x04	; 4
   1317a:	11 05       	cpc	r17, r1
   1317c:	09 f0       	breq	.+2      	; 0x13180 <alloc_device+0x98>
   1317e:	56 c0       	rjmp	.+172    	; 0x1322c <alloc_device+0x144>
   13180:	8b e2       	ldi	r24, 0x2B	; 43
   13182:	8c 9f       	mul	r24, r28
   13184:	80 01       	movw	r16, r0
   13186:	8d 9f       	mul	r24, r29
   13188:	10 0d       	add	r17, r0
   1318a:	11 24       	eor	r1, r1
   1318c:	0b 52       	subi	r16, 0x2B	; 43
   1318e:	11 4e       	sbci	r17, 0xE1	; 225
   13190:	84 e0       	ldi	r24, 0x04	; 4
   13192:	f8 01       	movw	r30, r16
   13194:	80 83       	st	Z, r24
   13196:	61 e0       	ldi	r22, 0x01	; 1
   13198:	70 e0       	ldi	r23, 0x00	; 0
   1319a:	8b e0       	ldi	r24, 0x0B	; 11
   1319c:	90 e0       	ldi	r25, 0x00	; 0
   1319e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   131a2:	f8 01       	movw	r30, r16
   131a4:	90 a7       	std	Z+40, r25	; 0x28
   131a6:	87 a3       	std	Z+39, r24	; 0x27
   131a8:	12 a6       	std	Z+42, r1	; 0x2a
   131aa:	11 a6       	std	Z+41, r1	; 0x29
   131ac:	55 c0       	rjmp	.+170    	; 0x13258 <alloc_device+0x170>
   131ae:	8b e2       	ldi	r24, 0x2B	; 43
   131b0:	8c 9f       	mul	r24, r28
   131b2:	80 01       	movw	r16, r0
   131b4:	8d 9f       	mul	r24, r29
   131b6:	10 0d       	add	r17, r0
   131b8:	11 24       	eor	r1, r1
   131ba:	0b 52       	subi	r16, 0x2B	; 43
   131bc:	11 4e       	sbci	r17, 0xE1	; 225
   131be:	82 e0       	ldi	r24, 0x02	; 2
   131c0:	f8 01       	movw	r30, r16
   131c2:	80 83       	st	Z, r24
   131c4:	61 e0       	ldi	r22, 0x01	; 1
   131c6:	70 e0       	ldi	r23, 0x00	; 0
   131c8:	82 e3       	ldi	r24, 0x32	; 50
   131ca:	90 e0       	ldi	r25, 0x00	; 0
   131cc:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   131d0:	f8 01       	movw	r30, r16
   131d2:	90 a7       	std	Z+40, r25	; 0x28
   131d4:	87 a3       	std	Z+39, r24	; 0x27
   131d6:	61 e0       	ldi	r22, 0x01	; 1
   131d8:	70 e0       	ldi	r23, 0x00	; 0
   131da:	86 e1       	ldi	r24, 0x16	; 22
   131dc:	90 e0       	ldi	r25, 0x00	; 0
   131de:	20 c0       	rjmp	.+64     	; 0x13220 <alloc_device+0x138>
   131e0:	8b e2       	ldi	r24, 0x2B	; 43
   131e2:	8c 9f       	mul	r24, r28
   131e4:	80 01       	movw	r16, r0
   131e6:	8d 9f       	mul	r24, r29
   131e8:	10 0d       	add	r17, r0
   131ea:	11 24       	eor	r1, r1
   131ec:	0b 52       	subi	r16, 0x2B	; 43
   131ee:	11 4e       	sbci	r17, 0xE1	; 225
   131f0:	83 e0       	ldi	r24, 0x03	; 3
   131f2:	f8 01       	movw	r30, r16
   131f4:	80 83       	st	Z, r24
   131f6:	61 e0       	ldi	r22, 0x01	; 1
   131f8:	70 e0       	ldi	r23, 0x00	; 0
   131fa:	82 e3       	ldi	r24, 0x32	; 50
   131fc:	90 e0       	ldi	r25, 0x00	; 0
   131fe:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   13202:	f8 01       	movw	r30, r16
   13204:	90 a7       	std	Z+40, r25	; 0x28
   13206:	87 a3       	std	Z+39, r24	; 0x27
   13208:	61 e0       	ldi	r22, 0x01	; 1
   1320a:	70 e0       	ldi	r23, 0x00	; 0
   1320c:	86 e1       	ldi	r24, 0x16	; 22
   1320e:	90 e0       	ldi	r25, 0x00	; 0
   13210:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   13214:	f8 01       	movw	r30, r16
   13216:	92 a7       	std	Z+42, r25	; 0x2a
   13218:	81 a7       	std	Z+41, r24	; 0x29
   1321a:	ce 01       	movw	r24, r28
   1321c:	eb de       	rcall	.-554    	; 0x12ff4 <SS80_Set_Defaults>
   1321e:	1c c0       	rjmp	.+56     	; 0x13258 <alloc_device+0x170>
   13220:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   13224:	f8 01       	movw	r30, r16
   13226:	92 a7       	std	Z+42, r25	; 0x2a
   13228:	81 a7       	std	Z+41, r24	; 0x29
   1322a:	16 c0       	rjmp	.+44     	; 0x13258 <alloc_device+0x170>
   1322c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   13230:	81 ff       	sbrs	r24, 1
   13232:	10 c0       	rjmp	.+32     	; 0x13254 <alloc_device+0x16c>
   13234:	c8 01       	movw	r24, r16
   13236:	b4 dd       	rcall	.-1176   	; 0x12da0 <type_to_str>
   13238:	ed b7       	in	r30, 0x3d	; 61
   1323a:	fe b7       	in	r31, 0x3e	; 62
   1323c:	97 83       	std	Z+7, r25	; 0x07
   1323e:	86 83       	std	Z+6, r24	; 0x06
   13240:	15 83       	std	Z+5, r17	; 0x05
   13242:	04 83       	std	Z+4, r16	; 0x04
   13244:	8e e9       	ldi	r24, 0x9E	; 158
   13246:	96 e1       	ldi	r25, 0x16	; 22
   13248:	a0 e0       	ldi	r26, 0x00	; 0
   1324a:	81 83       	std	Z+1, r24	; 0x01
   1324c:	92 83       	std	Z+2, r25	; 0x02
   1324e:	a3 83       	std	Z+3, r26	; 0x03
   13250:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   13254:	cf ef       	ldi	r28, 0xFF	; 255
   13256:	df ef       	ldi	r29, 0xFF	; 255
   13258:	ce 01       	movw	r24, r28
   1325a:	cd b7       	in	r28, 0x3d	; 61
   1325c:	de b7       	in	r29, 0x3e	; 62
   1325e:	27 96       	adiw	r28, 0x07	; 7
   13260:	e4 e0       	ldi	r30, 0x04	; 4
   13262:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00013266 <init_Devices>:
   13266:	cf 93       	push	r28
   13268:	df 93       	push	r29
   1326a:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <stack_ind+0x1>
   1326e:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <stack_ind>
   13272:	e5 ed       	ldi	r30, 0xD5	; 213
   13274:	fe e1       	ldi	r31, 0x1E	; 30
   13276:	9f ef       	ldi	r25, 0xFF	; 255
   13278:	80 e2       	ldi	r24, 0x20	; 32
   1327a:	10 82       	st	Z, r1
   1327c:	11 82       	std	Z+1, r1	; 0x01
   1327e:	92 83       	std	Z+2, r25	; 0x02
   13280:	13 82       	std	Z+3, r1	; 0x03
   13282:	14 82       	std	Z+4, r1	; 0x04
   13284:	15 82       	std	Z+5, r1	; 0x05
   13286:	16 82       	std	Z+6, r1	; 0x06
   13288:	df 01       	movw	r26, r30
   1328a:	17 96       	adiw	r26, 0x07	; 7
   1328c:	ed 01       	movw	r28, r26
   1328e:	28 2f       	mov	r18, r24
   13290:	19 92       	st	Y+, r1
   13292:	2a 95       	dec	r18
   13294:	e9 f7       	brne	.-6      	; 0x13290 <init_Devices+0x2a>
   13296:	10 a6       	std	Z+40, r1	; 0x28
   13298:	17 a2       	std	Z+39, r1	; 0x27
   1329a:	12 a6       	std	Z+42, r1	; 0x2a
   1329c:	11 a6       	std	Z+41, r1	; 0x29
   1329e:	bb 96       	adiw	r30, 0x2b	; 43
   132a0:	c0 e2       	ldi	r28, 0x20	; 32
   132a2:	e9 3d       	cpi	r30, 0xD9	; 217
   132a4:	fc 07       	cpc	r31, r28
   132a6:	49 f7       	brne	.-46     	; 0x1327a <init_Devices+0x14>
   132a8:	df 91       	pop	r29
   132aa:	cf 91       	pop	r28
   132ac:	08 95       	ret

000132ae <push_state>:
   132ae:	20 91 5e 19 	lds	r18, 0x195E	; 0x80195e <stack_ind>
   132b2:	30 91 5f 19 	lds	r19, 0x195F	; 0x80195f <stack_ind+0x1>
   132b6:	25 30       	cpi	r18, 0x05	; 5
   132b8:	31 05       	cpc	r19, r1
   132ba:	7c f4       	brge	.+30     	; 0x132da <push_state+0x2c>
   132bc:	a9 01       	movw	r20, r18
   132be:	4f 5f       	subi	r20, 0xFF	; 255
   132c0:	5f 4f       	sbci	r21, 0xFF	; 255
   132c2:	50 93 5f 19 	sts	0x195F, r21	; 0x80195f <stack_ind+0x1>
   132c6:	40 93 5e 19 	sts	0x195E, r20	; 0x80195e <stack_ind>
   132ca:	22 0f       	add	r18, r18
   132cc:	33 1f       	adc	r19, r19
   132ce:	f9 01       	movw	r30, r18
   132d0:	ec 5a       	subi	r30, 0xAC	; 172
   132d2:	f6 4e       	sbci	r31, 0xE6	; 230
   132d4:	80 83       	st	Z, r24
   132d6:	91 83       	std	Z+1, r25	; 0x01
   132d8:	08 95       	ret
   132da:	80 e0       	ldi	r24, 0x00	; 0
   132dc:	90 e0       	ldi	r25, 0x00	; 0
   132de:	08 95       	ret

000132e0 <pop_state>:
   132e0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <stack_ind>
   132e4:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <stack_ind+0x1>
   132e8:	18 16       	cp	r1, r24
   132ea:	19 06       	cpc	r1, r25
   132ec:	6c f4       	brge	.+26     	; 0x13308 <pop_state+0x28>
   132ee:	01 97       	sbiw	r24, 0x01	; 1
   132f0:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <stack_ind+0x1>
   132f4:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <stack_ind>
   132f8:	88 0f       	add	r24, r24
   132fa:	99 1f       	adc	r25, r25
   132fc:	fc 01       	movw	r30, r24
   132fe:	ec 5a       	subi	r30, 0xAC	; 172
   13300:	f6 4e       	sbci	r31, 0xE6	; 230
   13302:	80 81       	ld	r24, Z
   13304:	91 81       	ldd	r25, Z+1	; 0x01
   13306:	08 95       	ret
   13308:	80 e0       	ldi	r24, 0x00	; 0
   1330a:	90 e0       	ldi	r25, 0x00	; 0
   1330c:	08 95       	ret

0001330e <set_Config_Defaults>:
   1330e:	08 95       	ret

00013310 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13310:	0f 93       	push	r16
   13312:	1f 93       	push	r17
   13314:	cf 93       	push	r28
   13316:	df 93       	push	r29
   13318:	00 d0       	rcall	.+0      	; 0x1331a <hpdir_set_device+0xa>
   1331a:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   1331c:	2b e2       	ldi	r18, 0x2B	; 43
   1331e:	ac 01       	movw	r20, r24
   13320:	24 9f       	mul	r18, r20
   13322:	c0 01       	movw	r24, r0
   13324:	25 9f       	mul	r18, r21
   13326:	90 0d       	add	r25, r0
   13328:	11 24       	eor	r1, r1
   1332a:	ec 01       	movw	r28, r24
   1332c:	cb 52       	subi	r28, 0x2B	; 43
   1332e:	d1 4e       	sbci	r29, 0xE1	; 225
   13330:	28 81       	ld	r18, Y
   13332:	23 30       	cpi	r18, 0x03	; 3
   13334:	a1 f5       	brne	.+104    	; 0x1339e <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   13336:	ef a1       	ldd	r30, Y+39	; 0x27
   13338:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   1333a:	20 91 59 21 	lds	r18, 0x2159	; 0x802159 <hpdir+0x80>
   1333e:	30 91 5a 21 	lds	r19, 0x215A	; 0x80215a <hpdir+0x81>
   13342:	35 83       	std	Z+5, r19	; 0x05
   13344:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   13346:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <hpdir+0x8c>
   1334a:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <hpdir+0x8d>
   1334e:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <hpdir+0x8e>
   13352:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <hpdir+0x8f>
   13356:	44 87       	std	Z+12, r20	; 0x0c
   13358:	55 87       	std	Z+13, r21	; 0x0d
   1335a:	66 87       	std	Z+14, r22	; 0x0e
   1335c:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   1335e:	20 91 79 21 	lds	r18, 0x2179	; 0x802179 <hpdir+0xa0>
   13362:	30 91 7a 21 	lds	r19, 0x217A	; 0x80217a <hpdir+0xa1>
   13366:	31 8b       	std	Z+17, r19	; 0x11
   13368:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   1336a:	17 8e       	std	Z+31, r1	; 0x1f
   1336c:	10 a2       	std	Z+32, r1	; 0x20
   1336e:	11 a2       	std	Z+33, r1	; 0x21
   13370:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   13372:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   13374:	15 a2       	std	Z+37, r1	; 0x25
   13376:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   13378:	40 91 85 21 	lds	r20, 0x2185	; 0x802185 <hpdir+0xac>
   1337c:	50 91 86 21 	lds	r21, 0x2186	; 0x802186 <hpdir+0xad>
   13380:	60 91 87 21 	lds	r22, 0x2187	; 0x802187 <hpdir+0xae>
   13384:	70 91 88 21 	lds	r23, 0x2188	; 0x802188 <hpdir+0xaf>
   13388:	8a 01       	movw	r16, r20
   1338a:	9b 01       	movw	r18, r22
   1338c:	01 50       	subi	r16, 0x01	; 1
   1338e:	11 09       	sbc	r17, r1
   13390:	21 09       	sbc	r18, r1
   13392:	31 09       	sbc	r19, r1
   13394:	06 a3       	std	Z+38, r16	; 0x26
   13396:	17 a3       	std	Z+39, r17	; 0x27
   13398:	20 a7       	std	Z+40, r18	; 0x28
   1339a:	31 a7       	std	Z+41, r19	; 0x29
   1339c:	2a c0       	rjmp	.+84     	; 0x133f2 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   1339e:	21 30       	cpi	r18, 0x01	; 1
   133a0:	a9 f5       	brne	.+106    	; 0x1340c <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   133a2:	ef a1       	ldd	r30, Y+39	; 0x27
   133a4:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   133a6:	20 91 59 21 	lds	r18, 0x2159	; 0x802159 <hpdir+0x80>
   133aa:	30 91 5a 21 	lds	r19, 0x215A	; 0x80215a <hpdir+0x81>
   133ae:	35 83       	std	Z+5, r19	; 0x05
   133b0:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   133b2:	20 91 79 21 	lds	r18, 0x2179	; 0x802179 <hpdir+0xa0>
   133b6:	30 91 7a 21 	lds	r19, 0x217A	; 0x80217a <hpdir+0xa1>
   133ba:	37 83       	std	Z+7, r19	; 0x07
   133bc:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   133be:	20 91 75 21 	lds	r18, 0x2175	; 0x802175 <hpdir+0x9c>
   133c2:	30 91 76 21 	lds	r19, 0x2176	; 0x802176 <hpdir+0x9d>
   133c6:	31 87       	std	Z+9, r19	; 0x09
   133c8:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   133ca:	20 91 71 21 	lds	r18, 0x2171	; 0x802171 <hpdir+0x98>
   133ce:	30 91 72 21 	lds	r19, 0x2172	; 0x802172 <hpdir+0x99>
   133d2:	33 87       	std	Z+11, r19	; 0x0b
   133d4:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   133d6:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <hpdir+0x94>
   133da:	30 91 6e 21 	lds	r19, 0x216E	; 0x80216e <hpdir+0x95>
   133de:	35 87       	std	Z+13, r19	; 0x0d
   133e0:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   133e2:	40 91 85 21 	lds	r20, 0x2185	; 0x802185 <hpdir+0xac>
   133e6:	50 91 86 21 	lds	r21, 0x2186	; 0x802186 <hpdir+0xad>
   133ea:	60 91 87 21 	lds	r22, 0x2187	; 0x802187 <hpdir+0xae>
   133ee:	70 91 88 21 	lds	r23, 0x2188	; 0x802188 <hpdir+0xaf>
   133f2:	4b 83       	std	Y+3, r20	; 0x03
   133f4:	5c 83       	std	Y+4, r21	; 0x04
   133f6:	6d 83       	std	Y+5, r22	; 0x05
   133f8:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   133fa:	4e e1       	ldi	r20, 0x1E	; 30
   133fc:	50 e0       	ldi	r21, 0x00	; 0
   133fe:	69 ed       	ldi	r22, 0xD9	; 217
   13400:	70 e2       	ldi	r23, 0x20	; 32
   13402:	84 52       	subi	r24, 0x24	; 36
   13404:	91 4e       	sbci	r25, 0xE1	; 225
   13406:	0e 94 cf 30 	call	0x619e	; 0x619e <strncpy>
   1340a:	0a c0       	rjmp	.+20     	; 0x13420 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   1340c:	8f e7       	ldi	r24, 0x7F	; 127
   1340e:	96 e1       	ldi	r25, 0x16	; 22
   13410:	a0 e0       	ldi	r26, 0x00	; 0
   13412:	ed b7       	in	r30, 0x3d	; 61
   13414:	fe b7       	in	r31, 0x3e	; 62
   13416:	81 83       	std	Z+1, r24	; 0x01
   13418:	92 83       	std	Z+2, r25	; 0x02
   1341a:	a3 83       	std	Z+3, r26	; 0x03
   1341c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }

}
   13420:	cd b7       	in	r28, 0x3d	; 61
   13422:	de b7       	in	r29, 0x3e	; 62
   13424:	23 96       	adiw	r28, 0x03	; 3
   13426:	e4 e0       	ldi	r30, 0x04	; 4
   13428:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

0001342c <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   1342c:	cf 93       	push	r28
   1342e:	df 93       	push	r29
   13430:	ec 01       	movw	r28, r24
   13432:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13434:	41 e0       	ldi	r20, 0x01	; 1
   13436:	50 e0       	ldi	r21, 0x00	; 0
   13438:	60 e0       	ldi	r22, 0x00	; 0
   1343a:	70 e0       	ldi	r23, 0x00	; 0
   1343c:	d9 d6       	rcall	.+3506   	; 0x141f0 <hpdir_find_drive>
   1343e:	89 2b       	or	r24, r25
        hpdir_set_device(index);
   13440:	11 f0       	breq	.+4      	; 0x13446 <hpdir_set_parameters+0x1a>
   13442:	ce 01       	movw	r24, r28
}
   13444:	65 df       	rcall	.-310    	; 0x13310 <hpdir_set_device>
   13446:	df 91       	pop	r29
   13448:	cf 91       	pop	r28
   1344a:	08 95       	ret

0001344c <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   1344c:	4f 92       	push	r4
   1344e:	5f 92       	push	r5
   13450:	6f 92       	push	r6
   13452:	7f 92       	push	r7
   13454:	8f 92       	push	r8
   13456:	af 92       	push	r10
   13458:	bf 92       	push	r11
   1345a:	cf 92       	push	r12
   1345c:	df 92       	push	r13
   1345e:	ef 92       	push	r14
   13460:	0f 93       	push	r16
   13462:	1f 93       	push	r17
   13464:	cf 93       	push	r28
   13466:	df 93       	push	r29
   13468:	00 d0       	rcall	.+0      	; 0x1346a <Post_Config+0x1e>
   1346a:	00 d0       	rcall	.+0      	; 0x1346c <Post_Config+0x20>
   1346c:	1f 92       	push	r1
   1346e:	c5 ed       	ldi	r28, 0xD5	; 213
   13470:	de e1       	ldi	r29, 0x1E	; 30
   13472:	89 ed       	ldi	r24, 0xD9	; 217
   13474:	48 2e       	mov	r4, r24
   13476:	80 e2       	ldi	r24, 0x20	; 32
   13478:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1347a:	a1 2c       	mov	r10, r1
   1347c:	bb 24       	eor	r11, r11
   1347e:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13480:	82 e1       	ldi	r24, 0x12	; 18
   13482:	96 e1       	ldi	r25, 0x16	; 22
   13484:	6c 01       	movw	r12, r24
   13486:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13488:	89 e4       	ldi	r24, 0x49	; 73
   1348a:	96 e1       	ldi	r25, 0x16	; 22
   1348c:	3c 01       	movw	r6, r24
   1348e:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13490:	88 81       	ld	r24, Y
   13492:	88 23       	and	r24, r24
   13494:	09 f4       	brne	.+2      	; 0x13498 <Post_Config+0x4c>
   13496:	57 c0       	rjmp	.+174    	; 0x13546 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13498:	83 30       	cpi	r24, 0x03	; 3
   1349a:	f9 f4       	brne	.+62     	; 0x134da <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1349c:	0f a1       	ldd	r16, Y+39	; 0x27
   1349e:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   134a0:	f8 01       	movw	r30, r16
   134a2:	80 89       	ldd	r24, Z+16	; 0x10
   134a4:	91 89       	ldd	r25, Z+17	; 0x11
   134a6:	81 15       	cp	r24, r1
   134a8:	91 40       	sbci	r25, 0x01	; 1
   134aa:	59 f0       	breq	.+22     	; 0x134c2 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   134ac:	ce 01       	movw	r24, r28
   134ae:	07 96       	adiw	r24, 0x07	; 7
   134b0:	ed b7       	in	r30, 0x3d	; 61
   134b2:	fe b7       	in	r31, 0x3e	; 62
   134b4:	95 83       	std	Z+5, r25	; 0x05
   134b6:	84 83       	std	Z+4, r24	; 0x04
   134b8:	61 82       	std	Z+1, r6	; 0x01
   134ba:	72 82       	std	Z+2, r7	; 0x02
   134bc:	83 82       	std	Z+3, r8	; 0x03
   134be:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   134c2:	f8 01       	movw	r30, r16
   134c4:	86 a1       	ldd	r24, Z+38	; 0x26
   134c6:	97 a1       	ldd	r25, Z+39	; 0x27
   134c8:	a0 a5       	ldd	r26, Z+40	; 0x28
   134ca:	b1 a5       	ldd	r27, Z+41	; 0x29
   134cc:	01 96       	adiw	r24, 0x01	; 1
   134ce:	a1 1d       	adc	r26, r1
   134d0:	b1 1d       	adc	r27, r1
   134d2:	8b 83       	std	Y+3, r24	; 0x03
   134d4:	9c 83       	std	Y+4, r25	; 0x04
   134d6:	ad 83       	std	Y+5, r26	; 0x05
   134d8:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   134da:	88 81       	ld	r24, Y
   134dc:	81 30       	cpi	r24, 0x01	; 1
   134de:	99 f5       	brne	.+102    	; 0x13546 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   134e0:	0f a1       	ldd	r16, Y+39	; 0x27
   134e2:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   134e4:	f8 01       	movw	r30, r16
   134e6:	86 81       	ldd	r24, Z+6	; 0x06
   134e8:	97 81       	ldd	r25, Z+7	; 0x07
   134ea:	81 15       	cp	r24, r1
   134ec:	91 40       	sbci	r25, 0x01	; 1
   134ee:	71 f0       	breq	.+28     	; 0x1350c <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   134f0:	f8 01       	movw	r30, r16
   134f2:	b7 82       	std	Z+7, r11	; 0x07
   134f4:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   134f6:	ce 01       	movw	r24, r28
   134f8:	07 96       	adiw	r24, 0x07	; 7
   134fa:	ed b7       	in	r30, 0x3d	; 61
   134fc:	fe b7       	in	r31, 0x3e	; 62
   134fe:	95 83       	std	Z+5, r25	; 0x05
   13500:	84 83       	std	Z+4, r24	; 0x04
   13502:	c1 82       	std	Z+1, r12	; 0x01
   13504:	d2 82       	std	Z+2, r13	; 0x02
   13506:	e3 82       	std	Z+3, r14	; 0x03
   13508:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   1350c:	f8 01       	movw	r30, r16
   1350e:	20 85       	ldd	r18, Z+8	; 0x08
   13510:	31 85       	ldd	r19, Z+9	; 0x09
   13512:	82 85       	ldd	r24, Z+10	; 0x0a
   13514:	93 85       	ldd	r25, Z+11	; 0x0b
   13516:	28 9f       	mul	r18, r24
   13518:	a0 01       	movw	r20, r0
   1351a:	29 9f       	mul	r18, r25
   1351c:	50 0d       	add	r21, r0
   1351e:	38 9f       	mul	r19, r24
   13520:	50 0d       	add	r21, r0
   13522:	11 24       	eor	r1, r1
   13524:	24 85       	ldd	r18, Z+12	; 0x0c
   13526:	35 85       	ldd	r19, Z+13	; 0x0d
   13528:	42 9f       	mul	r20, r18
   1352a:	c0 01       	movw	r24, r0
   1352c:	43 9f       	mul	r20, r19
   1352e:	90 0d       	add	r25, r0
   13530:	52 9f       	mul	r21, r18
   13532:	90 0d       	add	r25, r0
   13534:	11 24       	eor	r1, r1
   13536:	09 2e       	mov	r0, r25
   13538:	00 0c       	add	r0, r0
   1353a:	aa 0b       	sbc	r26, r26
   1353c:	bb 0b       	sbc	r27, r27
   1353e:	8b 83       	std	Y+3, r24	; 0x03
   13540:	9c 83       	std	Y+4, r25	; 0x04
   13542:	ad 83       	std	Y+5, r26	; 0x05
   13544:	be 83       	std	Y+6, r27	; 0x06
   13546:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13548:	4c 16       	cp	r4, r28
   1354a:	5d 06       	cpc	r5, r29
   1354c:	09 f0       	breq	.+2      	; 0x13550 <Post_Config+0x104>
   1354e:	a0 cf       	rjmp	.-192    	; 0x13490 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13550:	0f 90       	pop	r0
   13552:	0f 90       	pop	r0
   13554:	0f 90       	pop	r0
   13556:	0f 90       	pop	r0
   13558:	0f 90       	pop	r0
   1355a:	df 91       	pop	r29
   1355c:	cf 91       	pop	r28
   1355e:	1f 91       	pop	r17
   13560:	0f 91       	pop	r16
   13562:	ef 90       	pop	r14
   13564:	df 90       	pop	r13
   13566:	cf 90       	pop	r12
   13568:	bf 90       	pop	r11
   1356a:	af 90       	pop	r10
   1356c:	8f 90       	pop	r8
   1356e:	7f 90       	pop	r7
   13570:	6f 90       	pop	r6
   13572:	5f 90       	pop	r5
   13574:	4f 90       	pop	r4
   13576:	08 95       	ret

00013578 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13578:	af e1       	ldi	r26, 0x1F	; 31
   1357a:	b1 e0       	ldi	r27, 0x01	; 1
   1357c:	e2 ec       	ldi	r30, 0xC2	; 194
   1357e:	fa e9       	ldi	r31, 0x9A	; 154
   13580:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   13584:	8c 01       	movw	r16, r24

    printf("Reading: %s\n", name);
   13586:	6f de       	rcall	.-802    	; 0x13266 <init_Devices>
   13588:	ed b7       	in	r30, 0x3d	; 61
   1358a:	fe b7       	in	r31, 0x3e	; 62
   1358c:	15 83       	std	Z+5, r17	; 0x05
   1358e:	04 83       	std	Z+4, r16	; 0x04
   13590:	85 ef       	ldi	r24, 0xF5	; 245
   13592:	9b e1       	ldi	r25, 0x1B	; 27
   13594:	a0 e0       	ldi	r26, 0x00	; 0
   13596:	81 83       	std	Z+1, r24	; 0x01
   13598:	92 83       	std	Z+2, r25	; 0x02
   1359a:	a3 83       	std	Z+3, r26	; 0x03
   1359c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    cfg = fopen(name, "rb");
   135a0:	60 ed       	ldi	r22, 0xD0	; 208
   135a2:	78 e0       	ldi	r23, 0x08	; 8
   135a4:	c8 01       	movw	r24, r16
   135a6:	0e 94 10 7e 	call	0xfc20	; 0xfc20 <fopen>
   135aa:	c4 5f       	subi	r28, 0xF4	; 244
   135ac:	de 4f       	sbci	r29, 0xFE	; 254
   135ae:	99 83       	std	Y+1, r25	; 0x01
   135b0:	88 83       	st	Y, r24
   135b2:	cc 50       	subi	r28, 0x0C	; 12
    if(cfg == NULL)
   135b4:	d1 40       	sbci	r29, 0x01	; 1
   135b6:	89 2b       	or	r24, r25
   135b8:	09 f4       	brne	.+2      	; 0x135bc <Read_Config+0x44>
   135ba:	59 c0       	rjmp	.+178    	; 0x1366e <Read_Config+0xf6>
   135bc:	41 2c       	mov	r4, r1
   135be:	51 2c       	mov	r5, r1
   135c0:	c1 2c       	mov	r12, r1
   135c2:	d1 2c       	mov	r13, r1
   135c4:	c8 5f       	subi	r28, 0xF8	; 248
   135c6:	de 4f       	sbci	r29, 0xFE	; 254
   135c8:	19 82       	std	Y+1, r1	; 0x01
   135ca:	18 82       	st	Y, r1
   135cc:	c8 50       	subi	r28, 0x08	; 8
   135ce:	d1 40       	sbci	r29, 0x01	; 1
   135d0:	61 2c       	mov	r6, r1
   135d2:	71 2c       	mov	r7, r1
   135d4:	c6 5f       	subi	r28, 0xF6	; 246
   135d6:	de 4f       	sbci	r29, 0xFE	; 254
   135d8:	19 82       	std	Y+1, r1	; 0x01
   135da:	18 82       	st	Y, r1
   135dc:	ca 50       	subi	r28, 0x0A	; 10
   135de:	d1 40       	sbci	r29, 0x01	; 1
   135e0:	e1 2c       	mov	r14, r1
   135e2:	f1 2c       	mov	r15, r1
   135e4:	21 2c       	mov	r2, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   135e6:	31 2c       	mov	r3, r1
   135e8:	84 e4       	ldi	r24, 0x44	; 68
   135ea:	99 e1       	ldi	r25, 0x19	; 25
   135ec:	9c 01       	movw	r18, r24
   135ee:	40 e0       	ldi	r20, 0x00	; 0
   135f0:	c2 5f       	subi	r28, 0xF2	; 242
   135f2:	de 4f       	sbci	r29, 0xFE	; 254
   135f4:	28 83       	st	Y, r18
   135f6:	39 83       	std	Y+1, r19	; 0x01
   135f8:	4a 83       	std	Y+2, r20	; 0x02
   135fa:	ce 50       	subi	r28, 0x0E	; 14
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   135fc:	d1 40       	sbci	r29, 0x01	; 1
   135fe:	86 e6       	ldi	r24, 0x66	; 102
   13600:	99 e1       	ldi	r25, 0x19	; 25
   13602:	9c 01       	movw	r18, r24
   13604:	40 e0       	ldi	r20, 0x00	; 0
   13606:	cf 5e       	subi	r28, 0xEF	; 239
   13608:	de 4f       	sbci	r29, 0xFE	; 254
   1360a:	28 83       	st	Y, r18
   1360c:	39 83       	std	Y+1, r19	; 0x01
   1360e:	4a 83       	std	Y+2, r20	; 0x02
   13610:	c1 51       	subi	r28, 0x11	; 17
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13612:	d1 40       	sbci	r29, 0x01	; 1
   13614:	86 e9       	ldi	r24, 0x96	; 150
   13616:	99 e1       	ldi	r25, 0x19	; 25
   13618:	9c 01       	movw	r18, r24
   1361a:	40 e0       	ldi	r20, 0x00	; 0
   1361c:	cc 5e       	subi	r28, 0xEC	; 236
   1361e:	de 4f       	sbci	r29, 0xFE	; 254
   13620:	28 83       	st	Y, r18
   13622:	39 83       	std	Y+1, r19	; 0x01
   13624:	4a 83       	std	Y+2, r20	; 0x02
   13626:	c4 51       	subi	r28, 0x14	; 20
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13628:	d1 40       	sbci	r29, 0x01	; 1
   1362a:	85 ec       	ldi	r24, 0xC5	; 197
   1362c:	99 e1       	ldi	r25, 0x19	; 25
   1362e:	9c 01       	movw	r18, r24
   13630:	40 e0       	ldi	r20, 0x00	; 0
   13632:	c9 5e       	subi	r28, 0xE9	; 233
   13634:	de 4f       	sbci	r29, 0xFE	; 254
   13636:	28 83       	st	Y, r18
   13638:	39 83       	std	Y+1, r19	; 0x01
   1363a:	4a 83       	std	Y+2, r20	; 0x02
   1363c:	c7 51       	subi	r28, 0x17	; 23
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   1363e:	d1 40       	sbci	r29, 0x01	; 1
   13640:	85 ef       	ldi	r24, 0xF5	; 245
   13642:	99 e1       	ldi	r25, 0x19	; 25
   13644:	9c 01       	movw	r18, r24
   13646:	40 e0       	ldi	r20, 0x00	; 0
   13648:	c6 5e       	subi	r28, 0xE6	; 230
   1364a:	de 4f       	sbci	r29, 0xFE	; 254
   1364c:	28 83       	st	Y, r18
   1364e:	39 83       	std	Y+1, r19	; 0x01
   13650:	4a 83       	std	Y+2, r20	; 0x02
   13652:	ca 51       	subi	r28, 0x1A	; 26
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13654:	d1 40       	sbci	r29, 0x01	; 1
   13656:	83 e2       	ldi	r24, 0x23	; 35
   13658:	9a e1       	ldi	r25, 0x1A	; 26
   1365a:	9c 01       	movw	r18, r24
   1365c:	40 e0       	ldi	r20, 0x00	; 0
   1365e:	c3 5e       	subi	r28, 0xE3	; 227
   13660:	de 4f       	sbci	r29, 0xFE	; 254
   13662:	28 83       	st	Y, r18
   13664:	39 83       	std	Y+1, r19	; 0x01
   13666:	4a 83       	std	Y+2, r20	; 0x02
   13668:	cd 51       	subi	r28, 0x1D	; 29
   1366a:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   1366c:	26 c0       	rjmp	.+76     	; 0x136ba <Read_Config+0x142>
   1366e:	8d e2       	ldi	r24, 0x2D	; 45
   13670:	9e e0       	ldi	r25, 0x0E	; 14
   13672:	0e 94 41 78 	call	0xf082	; 0xf082 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13676:	ed b7       	in	r30, 0x3d	; 61
   13678:	fe b7       	in	r31, 0x3e	; 62
   1367a:	15 83       	std	Z+5, r17	; 0x05
   1367c:	04 83       	std	Z+4, r16	; 0x04
   1367e:	87 ed       	ldi	r24, 0xD7	; 215
   13680:	9b e1       	ldi	r25, 0x1B	; 27
   13682:	a0 e0       	ldi	r26, 0x00	; 0
   13684:	81 83       	std	Z+1, r24	; 0x01
   13686:	92 83       	std	Z+2, r25	; 0x02
   13688:	a3 83       	std	Z+3, r26	; 0x03
   1368a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        set_Config_Defaults();
        return(errors);
   1368e:	81 e0       	ldi	r24, 0x01	; 1
   13690:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13692:	95 c3       	rjmp	.+1834   	; 0x13dbe <Read_Config+0x846>
   13694:	ff ef       	ldi	r31, 0xFF	; 255
   13696:	4f 1a       	sub	r4, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13698:	5f 0a       	sbc	r5, r31
   1369a:	4e e7       	ldi	r20, 0x7E	; 126
   1369c:	50 e0       	ldi	r21, 0x00	; 0
   1369e:	9e 01       	movw	r18, r28
   136a0:	28 5f       	subi	r18, 0xF8	; 248
   136a2:	3f 4f       	sbci	r19, 0xFF	; 255
   136a4:	49 01       	movw	r8, r18
   136a6:	b9 01       	movw	r22, r18
   136a8:	ce 01       	movw	r24, r28
   136aa:	88 57       	subi	r24, 0x78	; 120
   136ac:	9f 4f       	sbci	r25, 0xFF	; 255
   136ae:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   136b2:	5c 01       	movw	r10, r24
   136b4:	88 85       	ldd	r24, Y+8	; 0x08
   136b6:	81 11       	cpse	r24, r1
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   136b8:	10 c0       	rjmp	.+32     	; 0x136da <Read_Config+0x162>
   136ba:	c4 5f       	subi	r28, 0xF4	; 244
   136bc:	de 4f       	sbci	r29, 0xFE	; 254
   136be:	48 81       	ld	r20, Y
   136c0:	59 81       	ldd	r21, Y+1	; 0x01
   136c2:	cc 50       	subi	r28, 0x0C	; 12
   136c4:	d1 40       	sbci	r29, 0x01	; 1
   136c6:	6e e7       	ldi	r22, 0x7E	; 126
   136c8:	70 e0       	ldi	r23, 0x00	; 0
   136ca:	ce 01       	movw	r24, r28
   136cc:	88 57       	subi	r24, 0x78	; 120
   136ce:	9f 4f       	sbci	r25, 0xFF	; 255
   136d0:	0e 94 28 76 	call	0xec50	; 0xec50 <fgets>
   136d4:	89 2b       	or	r24, r25
   136d6:	f1 f6       	brne	.-68     	; 0x13694 <Read_Config+0x11c>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   136d8:	32 c3       	rjmp	.+1636   	; 0x13d3e <Read_Config+0x7c6>
   136da:	83 32       	cpi	r24, 0x23	; 35
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   136dc:	71 f3       	breq	.-36     	; 0x136ba <Read_Config+0x142>
   136de:	c4 01       	movw	r24, r8
   136e0:	0e 94 70 92 	call	0x124e0	; 0x124e0 <tok_index>
   136e4:	8f 3f       	cpi	r24, 0xFF	; 255
   136e6:	3f ef       	ldi	r19, 0xFF	; 255
   136e8:	93 07       	cpc	r25, r19
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   136ea:	49 f4       	brne	.+18     	; 0x136fe <Read_Config+0x186>
   136ec:	ed b7       	in	r30, 0x3d	; 61
   136ee:	fe b7       	in	r31, 0x3e	; 62
   136f0:	57 82       	std	Z+7, r5	; 0x07
   136f2:	46 82       	std	Z+6, r4	; 0x06
   136f4:	95 82       	std	Z+5, r9	; 0x05
   136f6:	84 82       	std	Z+4, r8	; 0x04
   136f8:	85 eb       	ldi	r24, 0xB5	; 181
   136fa:	9b e1       	ldi	r25, 0x1B	; 27
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   136fc:	c9 c0       	rjmp	.+402    	; 0x13890 <Read_Config+0x318>
   136fe:	88 0f       	add	r24, r24
   13700:	99 1f       	adc	r25, r25
   13702:	88 0f       	add	r24, r24
   13704:	99 1f       	adc	r25, r25
   13706:	fc 01       	movw	r30, r24
   13708:	ef 52       	subi	r30, 0x2F	; 47
   1370a:	fe 4f       	sbci	r31, 0xFE	; 254
   1370c:	02 81       	ldd	r16, Z+2	; 0x02

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   1370e:	13 81       	ldd	r17, Z+3	; 0x03
   13710:	4e e7       	ldi	r20, 0x7E	; 126
   13712:	50 e0       	ldi	r21, 0x00	; 0
   13714:	b4 01       	movw	r22, r8
   13716:	c5 01       	movw	r24, r10
   13718:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        if(MATCH(token,"="))
   1371c:	5c 01       	movw	r10, r24
   1371e:	60 e4       	ldi	r22, 0x40	; 64
   13720:	7e e0       	ldi	r23, 0x0E	; 14
   13722:	c4 01       	movw	r24, r8
   13724:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   13728:	89 2b       	or	r24, r25
            ptr = get_token(ptr, token, sizeof(token)-2);
   1372a:	39 f0       	breq	.+14     	; 0x1373a <Read_Config+0x1c2>
   1372c:	4e e7       	ldi	r20, 0x7E	; 126
   1372e:	50 e0       	ldi	r21, 0x00	; 0
   13730:	b4 01       	movw	r22, r8
   13732:	c5 01       	movw	r24, r10
   13734:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        val.l = get_value(token);
   13738:	5c 01       	movw	r10, r24
   1373a:	c4 01       	movw	r24, r8
   1373c:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13740:	01 31       	cpi	r16, 0x11	; 17
        {
            state = pop_state();
   13742:	11 05       	cpc	r17, r1
   13744:	19 f4       	brne	.+6      	; 0x1374c <Read_Config+0x1d4>
   13746:	cc dd       	rcall	.-1128   	; 0x132e0 <pop_state>
            continue;
   13748:	1c 01       	movw	r2, r24
        }

        switch(state)
   1374a:	b7 cf       	rjmp	.-146    	; 0x136ba <Read_Config+0x142>
   1374c:	30 e1       	ldi	r19, 0x10	; 16
   1374e:	23 16       	cp	r2, r19
   13750:	31 04       	cpc	r3, r1
   13752:	08 f0       	brcs	.+2      	; 0x13756 <Read_Config+0x1de>
   13754:	de c2       	rjmp	.+1468   	; 0x13d12 <Read_Config+0x79a>
   13756:	f1 01       	movw	r30, r2
   13758:	e0 53       	subi	r30, 0x30	; 48
   1375a:	ff 4f       	sbci	r31, 0xFF	; 255
   1375c:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13760:	0e 30       	cpi	r16, 0x0E	; 14
   13762:	11 05       	cpc	r17, r1
   13764:	09 f4       	brne	.+2      	; 0x13768 <Read_Config+0x1f0>
   13766:	87 c0       	rjmp	.+270    	; 0x13876 <Read_Config+0x2fe>
   13768:	44 f4       	brge	.+16     	; 0x1377a <Read_Config+0x202>
   1376a:	02 30       	cpi	r16, 0x02	; 2
   1376c:	11 05       	cpc	r17, r1
   1376e:	09 f4       	brne	.+2      	; 0x13772 <Read_Config+0x1fa>
   13770:	41 c0       	rjmp	.+130    	; 0x137f4 <Read_Config+0x27c>
   13772:	0c 30       	cpi	r16, 0x0C	; 12
   13774:	11 05       	cpc	r17, r1
   13776:	09 f1       	breq	.+66     	; 0x137ba <Read_Config+0x242>
   13778:	83 c0       	rjmp	.+262    	; 0x13880 <Read_Config+0x308>
   1377a:	03 32       	cpi	r16, 0x23	; 35
   1377c:	11 05       	cpc	r17, r1
   1377e:	e9 f0       	breq	.+58     	; 0x137ba <Read_Config+0x242>
   13780:	04 32       	cpi	r16, 0x24	; 36
   13782:	11 05       	cpc	r17, r1
   13784:	29 f0       	breq	.+10     	; 0x13790 <Read_Config+0x218>
   13786:	00 32       	cpi	r16, 0x20	; 32
   13788:	11 05       	cpc	r17, r1
   1378a:	09 f0       	breq	.+2      	; 0x1378e <Read_Config+0x216>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   1378c:	79 c0       	rjmp	.+242    	; 0x13880 <Read_Config+0x308>
   1378e:	55 c0       	rjmp	.+170    	; 0x1383a <Read_Config+0x2c2>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13790:	80 e0       	ldi	r24, 0x00	; 0
   13792:	90 e0       	ldi	r25, 0x00	; 0
   13794:	8c dd       	rcall	.-1256   	; 0x132ae <push_state>
   13796:	82 e0       	ldi	r24, 0x02	; 2
   13798:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   1379a:	a6 dc       	rcall	.-1716   	; 0x130e8 <alloc_device>
   1379c:	6c 01       	movw	r12, r24
   1379e:	01 96       	adiw	r24, 0x01	; 1
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   137a0:	09 f4       	brne	.+2      	; 0x137a4 <Read_Config+0x22c>
   137a2:	8b cf       	rjmp	.-234    	; 0x136ba <Read_Config+0x142>
   137a4:	8b e2       	ldi	r24, 0x2B	; 43
   137a6:	8c 9d       	mul	r24, r12
   137a8:	f0 01       	movw	r30, r0
   137aa:	8d 9d       	mul	r24, r13
   137ac:	f0 0d       	add	r31, r0
   137ae:	11 24       	eor	r1, r1
   137b0:	eb 52       	subi	r30, 0x2B	; 43
   137b2:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   137b4:	67 a0       	ldd	r6, Z+39	; 0x27
   137b6:	70 a4       	ldd	r7, Z+40	; 0x28
   137b8:	19 c0       	rjmp	.+50     	; 0x137ec <Read_Config+0x274>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   137ba:	80 e0       	ldi	r24, 0x00	; 0
   137bc:	90 e0       	ldi	r25, 0x00	; 0
   137be:	77 dd       	rcall	.-1298   	; 0x132ae <push_state>
   137c0:	83 e0       	ldi	r24, 0x03	; 3
   137c2:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   137c4:	91 dc       	rcall	.-1758   	; 0x130e8 <alloc_device>
   137c6:	6c 01       	movw	r12, r24
   137c8:	8f ef       	ldi	r24, 0xFF	; 255
   137ca:	c8 16       	cp	r12, r24
   137cc:	d8 06       	cpc	r13, r24
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   137ce:	09 f4       	brne	.+2      	; 0x137d2 <Read_Config+0x25a>
   137d0:	74 cf       	rjmp	.-280    	; 0x136ba <Read_Config+0x142>
   137d2:	8b e2       	ldi	r24, 0x2B	; 43
   137d4:	8c 9d       	mul	r24, r12
   137d6:	f0 01       	movw	r30, r0
   137d8:	8d 9d       	mul	r24, r13
   137da:	f0 0d       	add	r31, r0
   137dc:	11 24       	eor	r1, r1
   137de:	eb 52       	subi	r30, 0x2B	; 43
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   137e0:	f1 4e       	sbci	r31, 0xE1	; 225
   137e2:	67 a0       	ldd	r6, Z+39	; 0x27
   137e4:	70 a4       	ldd	r7, Z+40	; 0x28
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   137e6:	b4 01       	movw	r22, r8
   137e8:	c6 01       	movw	r24, r12
   137ea:	20 de       	rcall	.-960    	; 0x1342c <hpdir_set_parameters>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   137ec:	22 24       	eor	r2, r2
   137ee:	23 94       	inc	r2
   137f0:	31 2c       	mov	r3, r1
   137f2:	63 cf       	rjmp	.-314    	; 0x136ba <Read_Config+0x142>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   137f4:	80 e0       	ldi	r24, 0x00	; 0
   137f6:	90 e0       	ldi	r25, 0x00	; 0
   137f8:	5a dd       	rcall	.-1356   	; 0x132ae <push_state>
   137fa:	81 e0       	ldi	r24, 0x01	; 1
   137fc:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   137fe:	74 dc       	rcall	.-1816   	; 0x130e8 <alloc_device>
   13800:	6c 01       	movw	r12, r24
   13802:	9f ef       	ldi	r25, 0xFF	; 255
   13804:	c9 16       	cp	r12, r25
   13806:	d9 06       	cpc	r13, r25
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13808:	09 f4       	brne	.+2      	; 0x1380c <Read_Config+0x294>
   1380a:	57 cf       	rjmp	.-338    	; 0x136ba <Read_Config+0x142>
   1380c:	8b e2       	ldi	r24, 0x2B	; 43
   1380e:	8c 9d       	mul	r24, r12
   13810:	f0 01       	movw	r30, r0
   13812:	8d 9d       	mul	r24, r13
   13814:	f0 0d       	add	r31, r0
   13816:	11 24       	eor	r1, r1
   13818:	eb 52       	subi	r30, 0x2B	; 43
   1381a:	f1 4e       	sbci	r31, 0xE1	; 225
   1381c:	a7 a1       	ldd	r26, Z+39	; 0x27
   1381e:	b0 a5       	ldd	r27, Z+40	; 0x28
   13820:	c8 5f       	subi	r28, 0xF8	; 248
   13822:	de 4f       	sbci	r29, 0xFE	; 254
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13824:	b9 83       	std	Y+1, r27	; 0x01
   13826:	a8 83       	st	Y, r26
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13828:	c8 50       	subi	r28, 0x08	; 8
   1382a:	d1 40       	sbci	r29, 0x01	; 1
   1382c:	b4 01       	movw	r22, r8
   1382e:	c6 01       	movw	r24, r12
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13830:	fd dd       	rcall	.-1030   	; 0x1342c <hpdir_set_parameters>
   13832:	aa e0       	ldi	r26, 0x0A	; 10
   13834:	2a 2e       	mov	r2, r26
   13836:	31 2c       	mov	r3, r1
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13838:	40 cf       	rjmp	.-384    	; 0x136ba <Read_Config+0x142>
   1383a:	80 e0       	ldi	r24, 0x00	; 0
   1383c:	90 e0       	ldi	r25, 0x00	; 0
   1383e:	37 dd       	rcall	.-1426   	; 0x132ae <push_state>
   13840:	84 e0       	ldi	r24, 0x04	; 4
                        if(index == -1)
   13842:	90 e0       	ldi	r25, 0x00	; 0
   13844:	51 dc       	rcall	.-1886   	; 0x130e8 <alloc_device>
   13846:	6c 01       	movw	r12, r24
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13848:	01 96       	adiw	r24, 0x01	; 1
   1384a:	09 f4       	brne	.+2      	; 0x1384e <Read_Config+0x2d6>
   1384c:	36 cf       	rjmp	.-404    	; 0x136ba <Read_Config+0x142>
   1384e:	8b e2       	ldi	r24, 0x2B	; 43
   13850:	8c 9d       	mul	r24, r12
   13852:	f0 01       	movw	r30, r0
   13854:	8d 9d       	mul	r24, r13
   13856:	f0 0d       	add	r31, r0
   13858:	11 24       	eor	r1, r1
   1385a:	eb 52       	subi	r30, 0x2B	; 43
   1385c:	f1 4e       	sbci	r31, 0xE1	; 225
   1385e:	27 a1       	ldd	r18, Z+39	; 0x27
   13860:	30 a5       	ldd	r19, Z+40	; 0x28
   13862:	c6 5f       	subi	r28, 0xF6	; 246
   13864:	de 4f       	sbci	r29, 0xFE	; 254
   13866:	39 83       	std	Y+1, r19	; 0x01
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13868:	28 83       	st	Y, r18
   1386a:	ca 50       	subi	r28, 0x0A	; 10
   1386c:	d1 40       	sbci	r29, 0x01	; 1
   1386e:	fe e0       	ldi	r31, 0x0E	; 14
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13870:	2f 2e       	mov	r2, r31
   13872:	31 2c       	mov	r3, r1
   13874:	22 cf       	rjmp	.-444    	; 0x136ba <Read_Config+0x142>
   13876:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
                        break;
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   1387a:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   1387e:	1d cf       	rjmp	.-454    	; 0x136ba <Read_Config+0x142>
   13880:	ed b7       	in	r30, 0x3d	; 61
   13882:	fe b7       	in	r31, 0x3e	; 62
   13884:	57 82       	std	Z+7, r5	; 0x07
   13886:	46 82       	std	Z+6, r4	; 0x06
   13888:	b5 82       	std	Z+5, r11	; 0x05
   1388a:	a4 82       	std	Z+4, r10	; 0x04
   1388c:	83 e9       	ldi	r24, 0x93	; 147
   1388e:	9b e1       	ldi	r25, 0x1B	; 27
   13890:	a0 e0       	ldi	r26, 0x00	; 0
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13892:	81 83       	std	Z+1, r24	; 0x01
   13894:	92 83       	std	Z+2, r25	; 0x02
   13896:	a3 83       	std	Z+3, r26	; 0x03
                {
                    push_state(state);
   13898:	4c c2       	rjmp	.+1176   	; 0x13d32 <Read_Config+0x7ba>
   1389a:	09 30       	cpi	r16, 0x09	; 9
   1389c:	11 05       	cpc	r17, r1
   1389e:	39 f4       	brne	.+14     	; 0x138ae <Read_Config+0x336>
                    state = PRINTER_CONFIG;
   138a0:	8e e0       	ldi	r24, 0x0E	; 14
   138a2:	90 e0       	ldi	r25, 0x00	; 0
   138a4:	04 dd       	rcall	.-1528   	; 0x132ae <push_state>
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   138a6:	ef e0       	ldi	r30, 0x0F	; 15
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   138a8:	2e 2e       	mov	r2, r30
   138aa:	31 2c       	mov	r3, r1
   138ac:	06 cf       	rjmp	.-500    	; 0x136ba <Read_Config+0x142>
   138ae:	ed b7       	in	r30, 0x3d	; 61
   138b0:	fe b7       	in	r31, 0x3e	; 62
   138b2:	57 82       	std	Z+7, r5	; 0x07
   138b4:	46 82       	std	Z+6, r4	; 0x06
   138b6:	b5 82       	std	Z+5, r11	; 0x05
   138b8:	a4 82       	std	Z+4, r10	; 0x04
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   138ba:	89 e6       	ldi	r24, 0x69	; 105
   138bc:	9b e1       	ldi	r25, 0x1B	; 27
   138be:	e8 cf       	rjmp	.-48     	; 0x13890 <Read_Config+0x318>
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   138c0:	01 30       	cpi	r16, 0x01	; 1
   138c2:	11 05       	cpc	r17, r1
   138c4:	b1 f4       	brne	.+44     	; 0x138f2 <Read_Config+0x37a>
   138c6:	6f 71       	andi	r22, 0x1F	; 31
   138c8:	8b e2       	ldi	r24, 0x2B	; 43
   138ca:	8c 9d       	mul	r24, r12
   138cc:	f0 01       	movw	r30, r0
   138ce:	8d 9d       	mul	r24, r13
   138d0:	f0 0d       	add	r31, r0
   138d2:	11 24       	eor	r1, r1
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   138d4:	eb 52       	subi	r30, 0x2B	; 43
   138d6:	f1 4e       	sbci	r31, 0xE1	; 225
   138d8:	61 83       	std	Z+1, r22	; 0x01
   138da:	c6 5f       	subi	r28, 0xF6	; 246
   138dc:	de 4f       	sbci	r29, 0xFE	; 254
   138de:	a8 81       	ld	r26, Y
   138e0:	b9 81       	ldd	r27, Y+1	; 0x01
// NO PPR
                    Devices[index].PPR = 0xff;
   138e2:	ca 50       	subi	r28, 0x0A	; 10
   138e4:	d1 40       	sbci	r29, 0x01	; 1
                    PRINTERp->HEADER.PPR = 0xff;
   138e6:	6c 93       	st	X, r22
   138e8:	8f ef       	ldi	r24, 0xFF	; 255
   138ea:	82 83       	std	Z+2, r24	; 0x02
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   138ec:	fd 01       	movw	r30, r26
   138ee:	81 83       	std	Z+1, r24	; 0x01
   138f0:	e4 ce       	rjmp	.-568    	; 0x136ba <Read_Config+0x142>
   138f2:	ed b7       	in	r30, 0x3d	; 61
   138f4:	fe b7       	in	r31, 0x3e	; 62
   138f6:	57 82       	std	Z+7, r5	; 0x07
   138f8:	46 82       	std	Z+6, r4	; 0x06
   138fa:	b5 82       	std	Z+5, r11	; 0x05
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   138fc:	a4 82       	std	Z+4, r10	; 0x04
   138fe:	88 e3       	ldi	r24, 0x38	; 56
   13900:	9b e1       	ldi	r25, 0x1B	; 27
   13902:	c6 cf       	rjmp	.-116    	; 0x13890 <Read_Config+0x318>
   13904:	05 31       	cpi	r16, 0x15	; 21
   13906:	11 05       	cpc	r17, r1
   13908:	d9 f0       	breq	.+54     	; 0x13940 <Read_Config+0x3c8>
   1390a:	6c f4       	brge	.+26     	; 0x13926 <Read_Config+0x3ae>
   1390c:	09 30       	cpi	r16, 0x09	; 9
   1390e:	11 05       	cpc	r17, r1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13910:	f1 f0       	breq	.+60     	; 0x1394e <Read_Config+0x3d6>
   13912:	0b 30       	cpi	r16, 0x0B	; 11
   13914:	11 05       	cpc	r17, r1
                        state = SS80_CONTROLLER;
   13916:	49 f5       	brne	.+82     	; 0x1396a <Read_Config+0x3f2>
   13918:	81 e0       	ldi	r24, 0x01	; 1
   1391a:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   1391c:	c8 dc       	rcall	.-1648   	; 0x132ae <push_state>
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1391e:	54 e0       	ldi	r21, 0x04	; 4
   13920:	25 2e       	mov	r2, r21
   13922:	31 2c       	mov	r3, r1
   13924:	ca ce       	rjmp	.-620    	; 0x136ba <Read_Config+0x142>
   13926:	07 32       	cpi	r16, 0x27	; 39
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13928:	11 05       	cpc	r17, r1
   1392a:	c1 f0       	breq	.+48     	; 0x1395c <Read_Config+0x3e4>
   1392c:	0a 32       	cpi	r16, 0x2A	; 42
                        state = SS80_VOLUME;
   1392e:	11 05       	cpc	r17, r1
   13930:	e1 f4       	brne	.+56     	; 0x1396a <Read_Config+0x3f2>
   13932:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   13934:	90 e0       	ldi	r25, 0x00	; 0

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13936:	bb dc       	rcall	.-1674   	; 0x132ae <push_state>
   13938:	36 e0       	ldi	r19, 0x06	; 6
   1393a:	23 2e       	mov	r2, r19
                        state = SS80_HEADER;
   1393c:	31 2c       	mov	r3, r1
   1393e:	bd ce       	rjmp	.-646    	; 0x136ba <Read_Config+0x142>
   13940:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   13942:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
   13944:	b4 dc       	rcall	.-1688   	; 0x132ae <push_state>
   13946:	72 e0       	ldi	r23, 0x02	; 2
   13948:	27 2e       	mov	r2, r23
   1394a:	31 2c       	mov	r3, r1
                        state = SS80_CONFIG;
   1394c:	b6 ce       	rjmp	.-660    	; 0x136ba <Read_Config+0x142>
   1394e:	81 e0       	ldi	r24, 0x01	; 1
   13950:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13952:	ad dc       	rcall	.-1702   	; 0x132ae <push_state>
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13954:	63 e0       	ldi	r22, 0x03	; 3
   13956:	26 2e       	mov	r2, r22
   13958:	31 2c       	mov	r3, r1
   1395a:	af ce       	rjmp	.-674    	; 0x136ba <Read_Config+0x142>
                        state = SS80_UNIT;
   1395c:	81 e0       	ldi	r24, 0x01	; 1
   1395e:	90 e0       	ldi	r25, 0x00	; 0
   13960:	a6 dc       	rcall	.-1716   	; 0x132ae <push_state>
                        break;
   13962:	45 e0       	ldi	r20, 0x05	; 5
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13964:	24 2e       	mov	r2, r20
   13966:	31 2c       	mov	r3, r1
   13968:	a8 ce       	rjmp	.-688    	; 0x136ba <Read_Config+0x142>
   1396a:	ed b7       	in	r30, 0x3d	; 61
   1396c:	fe b7       	in	r31, 0x3e	; 62
   1396e:	57 82       	std	Z+7, r5	; 0x07
   13970:	46 82       	std	Z+6, r4	; 0x06
   13972:	b5 82       	std	Z+5, r11	; 0x05
   13974:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13976:	8b e0       	ldi	r24, 0x0B	; 11
   13978:	9b e1       	ldi	r25, 0x1B	; 27
   1397a:	8a cf       	rjmp	.-236    	; 0x13890 <Read_Config+0x318>
   1397c:	02 31       	cpi	r16, 0x12	; 18
   1397e:	11 05       	cpc	r17, r1
   13980:	f1 f0       	breq	.+60     	; 0x139be <Read_Config+0x446>
   13982:	0f 31       	cpi	r16, 0x1F	; 31
   13984:	11 05       	cpc	r17, r1
   13986:	79 f0       	breq	.+30     	; 0x139a6 <Read_Config+0x42e>
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13988:	01 30       	cpi	r16, 0x01	; 1
   1398a:	11 05       	cpc	r17, r1
   1398c:	e9 f4       	brne	.+58     	; 0x139c8 <Read_Config+0x450>
   1398e:	6f 71       	andi	r22, 0x1F	; 31
   13990:	8b e2       	ldi	r24, 0x2B	; 43
   13992:	8c 9d       	mul	r24, r12
   13994:	f0 01       	movw	r30, r0
   13996:	8d 9d       	mul	r24, r13
   13998:	f0 0d       	add	r31, r0
   1399a:	11 24       	eor	r1, r1
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   1399c:	eb 52       	subi	r30, 0x2B	; 43
   1399e:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   139a0:	61 83       	std	Z+1, r22	; 0x01
   139a2:	d3 01       	movw	r26, r6
   139a4:	37 c1       	rjmp	.+622    	; 0x13c14 <Read_Config+0x69c>
   139a6:	67 70       	andi	r22, 0x07	; 7
   139a8:	8b e2       	ldi	r24, 0x2B	; 43
   139aa:	8c 9d       	mul	r24, r12
   139ac:	f0 01       	movw	r30, r0
   139ae:	8d 9d       	mul	r24, r13
   139b0:	f0 0d       	add	r31, r0
   139b2:	11 24       	eor	r1, r1
                        SS80p->HEADER.PPR = 0x07 & val.b;
   139b4:	eb 52       	subi	r30, 0x2B	; 43
   139b6:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   139b8:	62 83       	std	Z+2, r22	; 0x02
   139ba:	f3 01       	movw	r30, r6
   139bc:	2d c1       	rjmp	.+602    	; 0x13c18 <Read_Config+0x6a0>
   139be:	c4 01       	movw	r24, r8
   139c0:	0e 94 72 31 	call	0x62e4	; 0x62e4 <stralloc>
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   139c4:	f3 01       	movw	r30, r6
   139c6:	33 c1       	rjmp	.+614    	; 0x13c2e <Read_Config+0x6b6>
   139c8:	ed b7       	in	r30, 0x3d	; 61
   139ca:	fe b7       	in	r31, 0x3e	; 62
   139cc:	57 82       	std	Z+7, r5	; 0x07
   139ce:	46 82       	std	Z+6, r4	; 0x06
   139d0:	b5 82       	std	Z+5, r11	; 0x05
   139d2:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   139d4:	8d ed       	ldi	r24, 0xDD	; 221
   139d6:	9a e1       	ldi	r25, 0x1A	; 26
   139d8:	5b cf       	rjmp	.-330    	; 0x13890 <Read_Config+0x318>
                {
                    SS80p->CONFIG.ID = val.w;
   139da:	07 31       	cpi	r16, 0x17	; 23
   139dc:	11 05       	cpc	r17, r1
   139de:	21 f4       	brne	.+8      	; 0x139e8 <Read_Config+0x470>
   139e0:	96 2f       	mov	r25, r22
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   139e2:	87 2f       	mov	r24, r23
   139e4:	f3 01       	movw	r30, r6
   139e6:	3f c1       	rjmp	.+638    	; 0x13c66 <Read_Config+0x6ee>
   139e8:	ed b7       	in	r30, 0x3d	; 61
   139ea:	fe b7       	in	r31, 0x3e	; 62
   139ec:	57 82       	std	Z+7, r5	; 0x07
   139ee:	46 82       	std	Z+6, r4	; 0x06
   139f0:	b5 82       	std	Z+5, r11	; 0x05
   139f2:	a4 82       	std	Z+4, r10	; 0x04
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   139f4:	8f ea       	ldi	r24, 0xAF	; 175
   139f6:	9a e1       	ldi	r25, 0x1A	; 26
   139f8:	4b cf       	rjmp	.-362    	; 0x13890 <Read_Config+0x318>
   139fa:	06 32       	cpi	r16, 0x26	; 38
   139fc:	11 05       	cpc	r17, r1
   139fe:	71 f0       	breq	.+28     	; 0x13a1c <Read_Config+0x4a4>
   13a00:	08 32       	cpi	r16, 0x28	; 40
   13a02:	11 05       	cpc	r17, r1
   13a04:	39 f0       	breq	.+14     	; 0x13a14 <Read_Config+0x49c>
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13a06:	05 32       	cpi	r16, 0x25	; 37
   13a08:	11 05       	cpc	r17, r1
   13a0a:	59 f4       	brne	.+22     	; 0x13a22 <Read_Config+0x4aa>
   13a0c:	96 2f       	mov	r25, r22

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13a0e:	87 2f       	mov	r24, r23
   13a10:	f3 01       	movw	r30, r6
   13a12:	5c c1       	rjmp	.+696    	; 0x13ccc <Read_Config+0x754>
   13a14:	96 2f       	mov	r25, r22
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13a16:	87 2f       	mov	r24, r23
   13a18:	f3 01       	movw	r30, r6
                        break;
   13a1a:	55 c1       	rjmp	.+682    	; 0x13cc6 <Read_Config+0x74e>
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13a1c:	f3 01       	movw	r30, r6
   13a1e:	62 87       	std	Z+10, r22	; 0x0a
   13a20:	4c ce       	rjmp	.-872    	; 0x136ba <Read_Config+0x142>
   13a22:	ed b7       	in	r30, 0x3d	; 61
   13a24:	fe b7       	in	r31, 0x3e	; 62
   13a26:	57 82       	std	Z+7, r5	; 0x07
   13a28:	46 82       	std	Z+6, r4	; 0x06
   13a2a:	b5 82       	std	Z+5, r11	; 0x05
   13a2c:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13a2e:	8d e7       	ldi	r24, 0x7D	; 125
   13a30:	9a e1       	ldi	r25, 0x1A	; 26
   13a32:	2e cf       	rjmp	.-420    	; 0x13890 <Read_Config+0x318>
   13a34:	0a 30       	cpi	r16, 0x0A	; 10
   13a36:	11 05       	cpc	r17, r1
   13a38:	09 f4       	brne	.+2      	; 0x13a3c <Read_Config+0x4c4>
   13a3a:	45 c0       	rjmp	.+138    	; 0x13ac6 <Read_Config+0x54e>
   13a3c:	d4 f4       	brge	.+52     	; 0x13a72 <Read_Config+0x4fa>
   13a3e:	05 30       	cpi	r16, 0x05	; 5
   13a40:	11 05       	cpc	r17, r1
   13a42:	d1 f1       	breq	.+116    	; 0x13ab8 <Read_Config+0x540>
   13a44:	64 f4       	brge	.+24     	; 0x13a5e <Read_Config+0x4e6>
   13a46:	01 15       	cp	r16, r1
   13a48:	11 05       	cpc	r17, r1
   13a4a:	09 f4       	brne	.+2      	; 0x13a4e <Read_Config+0x4d6>
   13a4c:	40 c0       	rjmp	.+128    	; 0x13ace <Read_Config+0x556>
   13a4e:	04 30       	cpi	r16, 0x04	; 4
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13a50:	11 05       	cpc	r17, r1
   13a52:	09 f0       	breq	.+2      	; 0x13a56 <Read_Config+0x4de>
   13a54:	46 c0       	rjmp	.+140    	; 0x13ae2 <Read_Config+0x56a>
                        break;
   13a56:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13a58:	64 8b       	std	Z+20, r22	; 0x14
   13a5a:	75 8b       	std	Z+21, r23	; 0x15
   13a5c:	2e ce       	rjmp	.-932    	; 0x136ba <Read_Config+0x142>
   13a5e:	06 30       	cpi	r16, 0x06	; 6
   13a60:	11 05       	cpc	r17, r1
   13a62:	71 f1       	breq	.+92     	; 0x13ac0 <Read_Config+0x548>
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13a64:	07 30       	cpi	r16, 0x07	; 7
   13a66:	11 05       	cpc	r17, r1
   13a68:	e1 f5       	brne	.+120    	; 0x13ae2 <Read_Config+0x56a>
                        break;
   13a6a:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13a6c:	60 8b       	std	Z+16, r22	; 0x10
   13a6e:	71 8b       	std	Z+17, r23	; 0x11
   13a70:	24 ce       	rjmp	.-952    	; 0x136ba <Read_Config+0x142>
   13a72:	0c 31       	cpi	r16, 0x1C	; 28
   13a74:	11 05       	cpc	r17, r1
   13a76:	79 f1       	breq	.+94     	; 0x13ad6 <Read_Config+0x55e>
   13a78:	4c f4       	brge	.+18     	; 0x13a8c <Read_Config+0x514>
   13a7a:	0f 30       	cpi	r16, 0x0F	; 15
   13a7c:	11 05       	cpc	r17, r1
   13a7e:	b1 f0       	breq	.+44     	; 0x13aac <Read_Config+0x534>
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   13a80:	03 31       	cpi	r16, 0x13	; 19
   13a82:	11 05       	cpc	r17, r1
                        break;
   13a84:	71 f5       	brne	.+92     	; 0x13ae2 <Read_Config+0x56a>
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13a86:	f3 01       	movw	r30, r6
   13a88:	65 8f       	std	Z+29, r22	; 0x1d
   13a8a:	17 ce       	rjmp	.-978    	; 0x136ba <Read_Config+0x142>
   13a8c:	01 32       	cpi	r16, 0x21	; 33
   13a8e:	11 05       	cpc	r17, r1
   13a90:	29 f1       	breq	.+74     	; 0x13adc <Read_Config+0x564>
   13a92:	09 32       	cpi	r16, 0x29	; 41
   13a94:	11 05       	cpc	r17, r1
   13a96:	39 f0       	breq	.+14     	; 0x13aa6 <Read_Config+0x52e>
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13a98:	0e 31       	cpi	r16, 0x1E	; 30
   13a9a:	11 05       	cpc	r17, r1
   13a9c:	11 f5       	brne	.+68     	; 0x13ae2 <Read_Config+0x56a>
                        break;
   13a9e:	f3 01       	movw	r30, r6

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13aa0:	60 8f       	std	Z+24, r22	; 0x18
   13aa2:	71 8f       	std	Z+25, r23	; 0x19
                        break;
   13aa4:	0a ce       	rjmp	.-1004   	; 0x136ba <Read_Config+0x142>
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13aa6:	f3 01       	movw	r30, r6
   13aa8:	63 87       	std	Z+11, r22	; 0x0b
   13aaa:	07 ce       	rjmp	.-1010   	; 0x136ba <Read_Config+0x142>
   13aac:	f3 01       	movw	r30, r6
   13aae:	64 87       	std	Z+12, r22	; 0x0c
                        break;
   13ab0:	75 87       	std	Z+13, r23	; 0x0d
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13ab2:	86 87       	std	Z+14, r24	; 0x0e
   13ab4:	97 87       	std	Z+15, r25	; 0x0f
   13ab6:	01 ce       	rjmp	.-1022   	; 0x136ba <Read_Config+0x142>
                        break;
   13ab8:	61 70       	andi	r22, 0x01	; 1
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   13aba:	f3 01       	movw	r30, r6
   13abc:	62 8b       	std	Z+18, r22	; 0x12
                        break;
   13abe:	fd cd       	rjmp	.-1030   	; 0x136ba <Read_Config+0x142>
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13ac0:	f3 01       	movw	r30, r6
   13ac2:	63 8b       	std	Z+19, r22	; 0x13
   13ac4:	fa cd       	rjmp	.-1036   	; 0x136ba <Read_Config+0x142>
                        break;
   13ac6:	f3 01       	movw	r30, r6
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   13ac8:	66 8b       	std	Z+22, r22	; 0x16
   13aca:	77 8b       	std	Z+23, r23	; 0x17
   13acc:	f6 cd       	rjmp	.-1044   	; 0x136ba <Read_Config+0x142>
                        break;
   13ace:	f3 01       	movw	r30, r6
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13ad0:	62 8f       	std	Z+26, r22	; 0x1a
   13ad2:	73 8f       	std	Z+27, r23	; 0x1b
                        break;
   13ad4:	f2 cd       	rjmp	.-1052   	; 0x136ba <Read_Config+0x142>
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13ad6:	f3 01       	movw	r30, r6
   13ad8:	64 8f       	std	Z+28, r22	; 0x1c
                        break;
   13ada:	ef cd       	rjmp	.-1058   	; 0x136ba <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13adc:	f3 01       	movw	r30, r6
   13ade:	66 8f       	std	Z+30, r22	; 0x1e
   13ae0:	ec cd       	rjmp	.-1064   	; 0x136ba <Read_Config+0x142>
   13ae2:	ed b7       	in	r30, 0x3d	; 61
   13ae4:	fe b7       	in	r31, 0x3e	; 62
   13ae6:	57 82       	std	Z+7, r5	; 0x07
   13ae8:	46 82       	std	Z+6, r4	; 0x06
   13aea:	b5 82       	std	Z+5, r11	; 0x05
   13aec:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13aee:	81 e5       	ldi	r24, 0x51	; 81
   13af0:	9a e1       	ldi	r25, 0x1A	; 26
   13af2:	ce ce       	rjmp	.-612    	; 0x13890 <Read_Config+0x318>
   13af4:	0a 31       	cpi	r16, 0x1A	; 26
   13af6:	11 05       	cpc	r17, r1
   13af8:	b9 f0       	breq	.+46     	; 0x13b28 <Read_Config+0x5b0>
   13afa:	64 f4       	brge	.+24     	; 0x13b14 <Read_Config+0x59c>
   13afc:	08 31       	cpi	r16, 0x18	; 24
   13afe:	11 05       	cpc	r17, r1
   13b00:	e1 f0       	breq	.+56     	; 0x13b3a <Read_Config+0x5c2>
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13b02:	09 31       	cpi	r16, 0x19	; 25
   13b04:	11 05       	cpc	r17, r1
   13b06:	e1 f4       	brne	.+56     	; 0x13b40 <Read_Config+0x5c8>
   13b08:	f3 01       	movw	r30, r6
   13b0a:	66 a3       	std	Z+38, r22	; 0x26
                        break;
   13b0c:	77 a3       	std	Z+39, r23	; 0x27
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13b0e:	80 a7       	std	Z+40, r24	; 0x28
   13b10:	91 a7       	std	Z+41, r25	; 0x29
   13b12:	d3 cd       	rjmp	.-1114   	; 0x136ba <Read_Config+0x142>
   13b14:	0b 31       	cpi	r16, 0x1B	; 27
   13b16:	11 05       	cpc	r17, r1
   13b18:	69 f0       	breq	.+26     	; 0x13b34 <Read_Config+0x5bc>
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13b1a:	0d 31       	cpi	r16, 0x1D	; 29
   13b1c:	11 05       	cpc	r17, r1
   13b1e:	81 f4       	brne	.+32     	; 0x13b40 <Read_Config+0x5c8>
                        break;
   13b20:	f3 01       	movw	r30, r6

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13b22:	64 a3       	std	Z+36, r22	; 0x24
   13b24:	75 a3       	std	Z+37, r23	; 0x25
   13b26:	c9 cd       	rjmp	.-1134   	; 0x136ba <Read_Config+0x142>
   13b28:	f3 01       	movw	r30, r6
   13b2a:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
   13b2c:	70 a3       	std	Z+32, r23	; 0x20
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13b2e:	81 a3       	std	Z+33, r24	; 0x21
   13b30:	92 a3       	std	Z+34, r25	; 0x22
                        break;
   13b32:	c3 cd       	rjmp	.-1146   	; 0x136ba <Read_Config+0x142>
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13b34:	f3 01       	movw	r30, r6
   13b36:	63 a3       	std	Z+35, r22	; 0x23
                        break;
   13b38:	c0 cd       	rjmp	.-1152   	; 0x136ba <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13b3a:	f3 01       	movw	r30, r6
   13b3c:	62 a7       	std	Z+42, r22	; 0x2a
   13b3e:	bd cd       	rjmp	.-1158   	; 0x136ba <Read_Config+0x142>
   13b40:	ed b7       	in	r30, 0x3d	; 61
   13b42:	fe b7       	in	r31, 0x3e	; 62
   13b44:	57 82       	std	Z+7, r5	; 0x07
   13b46:	46 82       	std	Z+6, r4	; 0x06
   13b48:	b5 82       	std	Z+5, r11	; 0x05
   13b4a:	a4 82       	std	Z+4, r10	; 0x04
   13b4c:	c3 5e       	subi	r28, 0xE3	; 227
   13b4e:	de 4f       	sbci	r29, 0xFE	; 254
   13b50:	28 81       	ld	r18, Y
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13b52:	39 81       	ldd	r19, Y+1	; 0x01
   13b54:	4a 81       	ldd	r20, Y+2	; 0x02
   13b56:	cd 51       	subi	r28, 0x1D	; 29
   13b58:	d1 40       	sbci	r29, 0x01	; 1
   13b5a:	e8 c0       	rjmp	.+464    	; 0x13d2c <Read_Config+0x7b4>
   13b5c:	04 31       	cpi	r16, 0x14	; 20
   13b5e:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13b60:	a1 f0       	breq	.+40     	; 0x13b8a <Read_Config+0x612>
   13b62:	05 31       	cpi	r16, 0x15	; 21
   13b64:	11 05       	cpc	r17, r1
   13b66:	51 f0       	breq	.+20     	; 0x13b7c <Read_Config+0x604>
                        state = AMIGO_CONFIG;
   13b68:	09 30       	cpi	r16, 0x09	; 9
   13b6a:	11 05       	cpc	r17, r1
   13b6c:	a9 f4       	brne	.+42     	; 0x13b98 <Read_Config+0x620>
                        break;
   13b6e:	8a e0       	ldi	r24, 0x0A	; 10
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13b70:	90 e0       	ldi	r25, 0x00	; 0
   13b72:	9d db       	rcall	.-2246   	; 0x132ae <push_state>
   13b74:	9c e0       	ldi	r25, 0x0C	; 12
   13b76:	29 2e       	mov	r2, r25
                        state = AMIGO_HEADER;
   13b78:	31 2c       	mov	r3, r1
   13b7a:	9f cd       	rjmp	.-1218   	; 0x136ba <Read_Config+0x142>
   13b7c:	8a e0       	ldi	r24, 0x0A	; 10
                        break;
   13b7e:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13b80:	96 db       	rcall	.-2260   	; 0x132ae <push_state>
   13b82:	2b e0       	ldi	r18, 0x0B	; 11
   13b84:	22 2e       	mov	r2, r18
   13b86:	31 2c       	mov	r3, r1
                        state = AMIGO_GEOMETRY;
   13b88:	98 cd       	rjmp	.-1232   	; 0x136ba <Read_Config+0x142>
   13b8a:	8a e0       	ldi	r24, 0x0A	; 10
   13b8c:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13b8e:	8f db       	rcall	.-2274   	; 0x132ae <push_state>
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13b90:	8d e0       	ldi	r24, 0x0D	; 13
   13b92:	28 2e       	mov	r2, r24
   13b94:	31 2c       	mov	r3, r1
   13b96:	91 cd       	rjmp	.-1246   	; 0x136ba <Read_Config+0x142>
   13b98:	ed b7       	in	r30, 0x3d	; 61
   13b9a:	fe b7       	in	r31, 0x3e	; 62
   13b9c:	57 82       	std	Z+7, r5	; 0x07
   13b9e:	46 82       	std	Z+6, r4	; 0x06
   13ba0:	b5 82       	std	Z+5, r11	; 0x05
   13ba2:	a4 82       	std	Z+4, r10	; 0x04
   13ba4:	c6 5e       	subi	r28, 0xE6	; 230
   13ba6:	de 4f       	sbci	r29, 0xFE	; 254
   13ba8:	28 81       	ld	r18, Y
   13baa:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13bac:	4a 81       	ldd	r20, Y+2	; 0x02
   13bae:	ca 51       	subi	r28, 0x1A	; 26
   13bb0:	d1 40       	sbci	r29, 0x01	; 1
   13bb2:	bc c0       	rjmp	.+376    	; 0x13d2c <Read_Config+0x7b4>
   13bb4:	00 31       	cpi	r16, 0x10	; 16
   13bb6:	11 05       	cpc	r17, r1
   13bb8:	09 f4       	brne	.+2      	; 0x13bbc <Read_Config+0x644>
   13bba:	7f cd       	rjmp	.-1282   	; 0x136ba <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13bbc:	a4 f4       	brge	.+40     	; 0x13be6 <Read_Config+0x66e>
   13bbe:	01 30       	cpi	r16, 0x01	; 1
   13bc0:	11 05       	cpc	r17, r1
   13bc2:	c1 f5       	brne	.+112    	; 0x13c34 <Read_Config+0x6bc>
   13bc4:	6f 71       	andi	r22, 0x1F	; 31
   13bc6:	8b e2       	ldi	r24, 0x2B	; 43
   13bc8:	8c 9d       	mul	r24, r12
   13bca:	f0 01       	movw	r30, r0
   13bcc:	8d 9d       	mul	r24, r13
   13bce:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13bd0:	11 24       	eor	r1, r1
   13bd2:	eb 52       	subi	r30, 0x2B	; 43
   13bd4:	f1 4e       	sbci	r31, 0xE1	; 225
   13bd6:	61 83       	std	Z+1, r22	; 0x01
   13bd8:	c8 5f       	subi	r28, 0xF8	; 248
   13bda:	de 4f       	sbci	r29, 0xFE	; 254
   13bdc:	a8 81       	ld	r26, Y
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13bde:	b9 81       	ldd	r27, Y+1	; 0x01
   13be0:	c8 50       	subi	r28, 0x08	; 8
   13be2:	d1 40       	sbci	r29, 0x01	; 1
   13be4:	17 c0       	rjmp	.+46     	; 0x13c14 <Read_Config+0x69c>
   13be6:	02 31       	cpi	r16, 0x12	; 18
   13be8:	11 05       	cpc	r17, r1
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13bea:	c1 f0       	breq	.+48     	; 0x13c1c <Read_Config+0x6a4>
   13bec:	0f 31       	cpi	r16, 0x1F	; 31
   13bee:	11 05       	cpc	r17, r1
   13bf0:	09 f5       	brne	.+66     	; 0x13c34 <Read_Config+0x6bc>
   13bf2:	67 70       	andi	r22, 0x07	; 7
   13bf4:	8b e2       	ldi	r24, 0x2B	; 43
   13bf6:	8c 9d       	mul	r24, r12
   13bf8:	f0 01       	movw	r30, r0
   13bfa:	8d 9d       	mul	r24, r13
   13bfc:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13bfe:	11 24       	eor	r1, r1
   13c00:	eb 52       	subi	r30, 0x2B	; 43
   13c02:	f1 4e       	sbci	r31, 0xE1	; 225
   13c04:	62 83       	std	Z+2, r22	; 0x02
   13c06:	c8 5f       	subi	r28, 0xF8	; 248
   13c08:	de 4f       	sbci	r29, 0xFE	; 254
   13c0a:	e8 81       	ld	r30, Y
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13c0c:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13c0e:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13c10:	d1 40       	sbci	r29, 0x01	; 1
                        break;
   13c12:	02 c0       	rjmp	.+4      	; 0x13c18 <Read_Config+0x6a0>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13c14:	6c 93       	st	X, r22
   13c16:	51 cd       	rjmp	.-1374   	; 0x136ba <Read_Config+0x142>
   13c18:	61 83       	std	Z+1, r22	; 0x01
   13c1a:	4f cd       	rjmp	.-1378   	; 0x136ba <Read_Config+0x142>
   13c1c:	c4 01       	movw	r24, r8
   13c1e:	0e 94 72 31 	call	0x62e4	; 0x62e4 <stralloc>
   13c22:	c8 5f       	subi	r28, 0xF8	; 248
   13c24:	de 4f       	sbci	r29, 0xFE	; 254
   13c26:	e8 81       	ld	r30, Y
   13c28:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13c2a:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13c2c:	d1 40       	sbci	r29, 0x01	; 1
   13c2e:	93 83       	std	Z+3, r25	; 0x03
   13c30:	82 83       	std	Z+2, r24	; 0x02
   13c32:	43 cd       	rjmp	.-1402   	; 0x136ba <Read_Config+0x142>
   13c34:	ed b7       	in	r30, 0x3d	; 61
   13c36:	fe b7       	in	r31, 0x3e	; 62
   13c38:	57 82       	std	Z+7, r5	; 0x07
   13c3a:	46 82       	std	Z+6, r4	; 0x06
   13c3c:	b5 82       	std	Z+5, r11	; 0x05
   13c3e:	a4 82       	std	Z+4, r10	; 0x04
   13c40:	c9 5e       	subi	r28, 0xE9	; 233
   13c42:	de 4f       	sbci	r29, 0xFE	; 254
   13c44:	28 81       	ld	r18, Y
   13c46:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13c48:	4a 81       	ldd	r20, Y+2	; 0x02
   13c4a:	c7 51       	subi	r28, 0x17	; 23
   13c4c:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
   13c4e:	6e c0       	rjmp	.+220    	; 0x13d2c <Read_Config+0x7b4>
   13c50:	07 31       	cpi	r16, 0x17	; 23
   13c52:	11 05       	cpc	r17, r1
   13c54:	59 f4       	brne	.+22     	; 0x13c6c <Read_Config+0x6f4>
   13c56:	96 2f       	mov	r25, r22
   13c58:	87 2f       	mov	r24, r23
   13c5a:	c8 5f       	subi	r28, 0xF8	; 248
   13c5c:	de 4f       	sbci	r29, 0xFE	; 254
   13c5e:	e8 81       	ld	r30, Y
   13c60:	f9 81       	ldd	r31, Y+1	; 0x01
   13c62:	c8 50       	subi	r28, 0x08	; 8
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13c64:	d1 40       	sbci	r29, 0x01	; 1
   13c66:	94 83       	std	Z+4, r25	; 0x04
   13c68:	85 83       	std	Z+5, r24	; 0x05
   13c6a:	27 cd       	rjmp	.-1458   	; 0x136ba <Read_Config+0x142>
   13c6c:	ed b7       	in	r30, 0x3d	; 61
   13c6e:	fe b7       	in	r31, 0x3e	; 62
   13c70:	57 82       	std	Z+7, r5	; 0x07
   13c72:	46 82       	std	Z+6, r4	; 0x06
   13c74:	b5 82       	std	Z+5, r11	; 0x05
   13c76:	a4 82       	std	Z+4, r10	; 0x04
   13c78:	cc 5e       	subi	r28, 0xEC	; 236
   13c7a:	de 4f       	sbci	r29, 0xFE	; 254
   13c7c:	28 81       	ld	r18, Y
   13c7e:	39 81       	ldd	r19, Y+1	; 0x01
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13c80:	4a 81       	ldd	r20, Y+2	; 0x02
   13c82:	c4 51       	subi	r28, 0x14	; 20
   13c84:	d1 40       	sbci	r29, 0x01	; 1
   13c86:	52 c0       	rjmp	.+164    	; 0x13d2c <Read_Config+0x7b4>
   13c88:	0d 30       	cpi	r16, 0x0D	; 13
   13c8a:	11 05       	cpc	r17, r1
   13c8c:	59 f1       	breq	.+86     	; 0x13ce4 <Read_Config+0x76c>
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13c8e:	64 f4       	brge	.+24     	; 0x13ca8 <Read_Config+0x730>
   13c90:	08 30       	cpi	r16, 0x08	; 8
   13c92:	11 05       	cpc	r17, r1
   13c94:	81 f5       	brne	.+96     	; 0x13cf6 <Read_Config+0x77e>
   13c96:	96 2f       	mov	r25, r22
   13c98:	87 2f       	mov	r24, r23
   13c9a:	c8 5f       	subi	r28, 0xF8	; 248
   13c9c:	de 4f       	sbci	r29, 0xFE	; 254
   13c9e:	e8 81       	ld	r30, Y
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13ca0:	f9 81       	ldd	r31, Y+1	; 0x01
   13ca2:	c8 50       	subi	r28, 0x08	; 8
   13ca4:	d1 40       	sbci	r29, 0x01	; 1
   13ca6:	0f c0       	rjmp	.+30     	; 0x13cc6 <Read_Config+0x74e>
   13ca8:	06 31       	cpi	r16, 0x16	; 22
   13caa:	11 05       	cpc	r17, r1
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13cac:	91 f0       	breq	.+36     	; 0x13cd2 <Read_Config+0x75a>
   13cae:	02 32       	cpi	r16, 0x22	; 34
   13cb0:	11 05       	cpc	r17, r1
   13cb2:	09 f5       	brne	.+66     	; 0x13cf6 <Read_Config+0x77e>
   13cb4:	96 2f       	mov	r25, r22
   13cb6:	87 2f       	mov	r24, r23
   13cb8:	c8 5f       	subi	r28, 0xF8	; 248
   13cba:	de 4f       	sbci	r29, 0xFE	; 254
   13cbc:	e8 81       	ld	r30, Y

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13cbe:	f9 81       	ldd	r31, Y+1	; 0x01
   13cc0:	c8 50       	subi	r28, 0x08	; 8
                        break;
   13cc2:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13cc4:	03 c0       	rjmp	.+6      	; 0x13ccc <Read_Config+0x754>
   13cc6:	96 83       	std	Z+6, r25	; 0x06
                        break;
   13cc8:	87 83       	std	Z+7, r24	; 0x07
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13cca:	f7 cc       	rjmp	.-1554   	; 0x136ba <Read_Config+0x142>
   13ccc:	90 87       	std	Z+8, r25	; 0x08
   13cce:	81 87       	std	Z+9, r24	; 0x09
   13cd0:	f4 cc       	rjmp	.-1560   	; 0x136ba <Read_Config+0x142>
   13cd2:	c8 5f       	subi	r28, 0xF8	; 248
   13cd4:	de 4f       	sbci	r29, 0xFE	; 254
   13cd6:	e8 81       	ld	r30, Y
   13cd8:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13cda:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13cdc:	d1 40       	sbci	r29, 0x01	; 1
   13cde:	62 87       	std	Z+10, r22	; 0x0a
   13ce0:	73 87       	std	Z+11, r23	; 0x0b
   13ce2:	eb cc       	rjmp	.-1578   	; 0x136ba <Read_Config+0x142>
   13ce4:	c8 5f       	subi	r28, 0xF8	; 248
   13ce6:	de 4f       	sbci	r29, 0xFE	; 254
   13ce8:	e8 81       	ld	r30, Y
   13cea:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13cec:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13cee:	d1 40       	sbci	r29, 0x01	; 1
   13cf0:	64 87       	std	Z+12, r22	; 0x0c
   13cf2:	75 87       	std	Z+13, r23	; 0x0d
   13cf4:	e2 cc       	rjmp	.-1596   	; 0x136ba <Read_Config+0x142>
   13cf6:	ed b7       	in	r30, 0x3d	; 61
   13cf8:	fe b7       	in	r31, 0x3e	; 62
   13cfa:	57 82       	std	Z+7, r5	; 0x07
   13cfc:	46 82       	std	Z+6, r4	; 0x06
   13cfe:	b5 82       	std	Z+5, r11	; 0x05
   13d00:	a4 82       	std	Z+4, r10	; 0x04
   13d02:	cf 5e       	subi	r28, 0xEF	; 239
   13d04:	de 4f       	sbci	r29, 0xFE	; 254
   13d06:	28 81       	ld	r18, Y
   13d08:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13d0a:	4a 81       	ldd	r20, Y+2	; 0x02
   13d0c:	c1 51       	subi	r28, 0x11	; 17
   13d0e:	d1 40       	sbci	r29, 0x01	; 1
   13d10:	0d c0       	rjmp	.+26     	; 0x13d2c <Read_Config+0x7b4>
   13d12:	ed b7       	in	r30, 0x3d	; 61
   13d14:	fe b7       	in	r31, 0x3e	; 62
   13d16:	57 82       	std	Z+7, r5	; 0x07
   13d18:	46 82       	std	Z+6, r4	; 0x06
   13d1a:	b5 82       	std	Z+5, r11	; 0x05
   13d1c:	a4 82       	std	Z+4, r10	; 0x04
   13d1e:	c2 5f       	subi	r28, 0xF2	; 242
   13d20:	de 4f       	sbci	r29, 0xFE	; 254
   13d22:	28 81       	ld	r18, Y
   13d24:	39 81       	ldd	r19, Y+1	; 0x01
   13d26:	4a 81       	ldd	r20, Y+2	; 0x02
   13d28:	ce 50       	subi	r28, 0x0E	; 14
   13d2a:	d1 40       	sbci	r29, 0x01	; 1
   13d2c:	21 83       	std	Z+1, r18	; 0x01
                ++errors;
   13d2e:	32 83       	std	Z+2, r19	; 0x02
   13d30:	43 83       	std	Z+3, r20	; 0x03
   13d32:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                break;

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13d36:	ff ef       	ldi	r31, 0xFF	; 255
   13d38:	ef 1a       	sub	r14, r31
   13d3a:	ff 0a       	sbc	r15, r31
    {
        printf("Missing END statement at line:%d\n", lines);
   13d3c:	be cc       	rjmp	.-1668   	; 0x136ba <Read_Config+0x142>
   13d3e:	21 14       	cp	r2, r1
   13d40:	31 04       	cpc	r3, r1
   13d42:	79 f0       	breq	.+30     	; 0x13d62 <Read_Config+0x7ea>
   13d44:	ed b7       	in	r30, 0x3d	; 61
   13d46:	fe b7       	in	r31, 0x3e	; 62
   13d48:	55 82       	std	Z+5, r5	; 0x05
   13d4a:	44 82       	std	Z+4, r4	; 0x04
   13d4c:	82 e2       	ldi	r24, 0x22	; 34
   13d4e:	99 e1       	ldi	r25, 0x19	; 25
   13d50:	a0 e0       	ldi	r26, 0x00	; 0
   13d52:	81 83       	std	Z+1, r24	; 0x01
        ++errors;
   13d54:	92 83       	std	Z+2, r25	; 0x02
   13d56:	a3 83       	std	Z+3, r26	; 0x03
   13d58:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13d5c:	ff ef       	ldi	r31, 0xFF	; 255
   13d5e:	ef 1a       	sub	r14, r31
   13d60:	ff 0a       	sbc	r15, r31
   13d62:	ed b7       	in	r30, 0x3d	; 61
   13d64:	fe b7       	in	r31, 0x3e	; 62
   13d66:	55 82       	std	Z+5, r5	; 0x05
   13d68:	44 82       	std	Z+4, r4	; 0x04
   13d6a:	85 e0       	ldi	r24, 0x05	; 5
   13d6c:	99 e1       	ldi	r25, 0x19	; 25
   13d6e:	a0 e0       	ldi	r26, 0x00	; 0
   13d70:	81 83       	std	Z+1, r24	; 0x01
    if(errors)
   13d72:	92 83       	std	Z+2, r25	; 0x02
   13d74:	a3 83       	std	Z+3, r26	; 0x03
   13d76:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13d7a:	e1 14       	cp	r14, r1
   13d7c:	f1 04       	cpc	r15, r1
   13d7e:	61 f0       	breq	.+24     	; 0x13d98 <Read_Config+0x820>
   13d80:	ed b7       	in	r30, 0x3d	; 61
   13d82:	fe b7       	in	r31, 0x3e	; 62
   13d84:	f5 82       	std	Z+5, r15	; 0x05
   13d86:	e4 82       	std	Z+4, r14	; 0x04
   13d88:	8e ed       	ldi	r24, 0xDE	; 222
   13d8a:	98 e1       	ldi	r25, 0x18	; 24
   13d8c:	a0 e0       	ldi	r26, 0x00	; 0

    if(fclose(cfg) == EOF)
   13d8e:	81 83       	std	Z+1, r24	; 0x01
   13d90:	92 83       	std	Z+2, r25	; 0x02
   13d92:	a3 83       	std	Z+3, r26	; 0x03
   13d94:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   13d98:	c4 5f       	subi	r28, 0xF4	; 244
   13d9a:	de 4f       	sbci	r29, 0xFE	; 254
   13d9c:	88 81       	ld	r24, Y
   13d9e:	99 81       	ldd	r25, Y+1	; 0x01
   13da0:	cc 50       	subi	r28, 0x0C	; 12
    {
        perror("Read_Config - close error");
   13da2:	d1 40       	sbci	r29, 0x01	; 1
   13da4:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
   13da8:	01 96       	adiw	r24, 0x01	; 1
        ++errors;
   13daa:	39 f4       	brne	.+14     	; 0x13dba <Read_Config+0x842>
   13dac:	82 e4       	ldi	r24, 0x42	; 66
   13dae:	9e e0       	ldi	r25, 0x0E	; 14
    }

// Post process device values
    Post_Config();
   13db0:	0e 94 41 78 	call	0xf082	; 0xf082 <perror>

    return(errors);
   13db4:	2f ef       	ldi	r18, 0xFF	; 255
}
   13db6:	e2 1a       	sub	r14, r18
   13db8:	f2 0a       	sbc	r15, r18
   13dba:	48 db       	rcall	.-2416   	; 0x1344c <Post_Config>
   13dbc:	c7 01       	movw	r24, r14
   13dbe:	c1 5e       	subi	r28, 0xE1	; 225
   13dc0:	de 4f       	sbci	r29, 0xFE	; 254
   13dc2:	e2 e1       	ldi	r30, 0x12	; 18
   13dc4:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00013dc8 <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13dc8:	2f 92       	push	r2
   13dca:	3f 92       	push	r3
   13dcc:	4f 92       	push	r4
   13dce:	5f 92       	push	r5
   13dd0:	6f 92       	push	r6
   13dd2:	7f 92       	push	r7
   13dd4:	8f 92       	push	r8
   13dd6:	af 92       	push	r10
   13dd8:	bf 92       	push	r11
   13dda:	cf 92       	push	r12
   13ddc:	df 92       	push	r13
   13dde:	ef 92       	push	r14
   13de0:	ff 92       	push	r15
   13de2:	0f 93       	push	r16
   13de4:	1f 93       	push	r17
   13de6:	cf 93       	push	r28
   13de8:	df 93       	push	r29
   13dea:	cd b7       	in	r28, 0x3d	; 61
   13dec:	de b7       	in	r29, 0x3e	; 62
   13dee:	ce 56       	subi	r28, 0x6E	; 110
   13df0:	d1 09       	sbc	r29, r1
   13df2:	0f b6       	in	r0, 0x3f	; 63
   13df4:	f8 94       	cli
   13df6:	de bf       	out	0x3e, r29	; 62
   13df8:	0f be       	out	0x3f, r0	; 63
   13dfa:	cd bf       	out	0x3d, r28	; 61
   13dfc:	85 ed       	ldi	r24, 0xD5	; 213
   13dfe:	c8 2e       	mov	r12, r24
   13e00:	8e e1       	ldi	r24, 0x1E	; 30
   13e02:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13e04:	a0 96       	adiw	r28, 0x20	; 32
   13e06:	1f ae       	std	Y+63, r1	; 0x3f
   13e08:	1e ae       	std	Y+62, r1	; 0x3e
   13e0a:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13e0c:	6e 96       	adiw	r28, 0x1e	; 30
   13e0e:	1f ae       	std	Y+63, r1	; 0x3f
   13e10:	1e ae       	std	Y+62, r1	; 0x3e
   13e12:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13e14:	6c 96       	adiw	r28, 0x1c	; 28
   13e16:	1f ae       	std	Y+63, r1	; 0x3f
   13e18:	1e ae       	std	Y+62, r1	; 0x3e
   13e1a:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13e1c:	82 e9       	ldi	r24, 0x92	; 146
   13e1e:	95 e1       	ldi	r25, 0x15	; 21
   13e20:	9c 01       	movw	r18, r24
   13e22:	40 e0       	ldi	r20, 0x00	; 0
   13e24:	a3 96       	adiw	r28, 0x23	; 35
   13e26:	2d af       	std	Y+61, r18	; 0x3d
   13e28:	3e af       	std	Y+62, r19	; 0x3e
   13e2a:	4f af       	std	Y+63, r20	; 0x3f
   13e2c:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13e2e:	8a e8       	ldi	r24, 0x8A	; 138
   13e30:	95 e1       	ldi	r25, 0x15	; 21
   13e32:	9c 01       	movw	r18, r24
   13e34:	40 e0       	ldi	r20, 0x00	; 0
   13e36:	a6 96       	adiw	r28, 0x26	; 38
   13e38:	2d af       	std	Y+61, r18	; 0x3d
   13e3a:	3e af       	std	Y+62, r19	; 0x3e
   13e3c:	4f af       	std	Y+63, r20	; 0x3f
   13e3e:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13e40:	8c ea       	ldi	r24, 0xAC	; 172
   13e42:	95 e1       	ldi	r25, 0x15	; 21
   13e44:	9c 01       	movw	r18, r24
   13e46:	40 e0       	ldi	r20, 0x00	; 0
   13e48:	a9 96       	adiw	r28, 0x29	; 41
   13e4a:	2d af       	std	Y+61, r18	; 0x3d
   13e4c:	3e af       	std	Y+62, r19	; 0x3e
   13e4e:	4f af       	std	Y+63, r20	; 0x3f
   13e50:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13e52:	86 ed       	ldi	r24, 0xD6	; 214
   13e54:	95 e1       	ldi	r25, 0x15	; 21
   13e56:	9c 01       	movw	r18, r24
   13e58:	40 e0       	ldi	r20, 0x00	; 0
   13e5a:	ac 96       	adiw	r28, 0x2c	; 44
   13e5c:	2d af       	std	Y+61, r18	; 0x3d
   13e5e:	3e af       	std	Y+62, r19	; 0x3e
   13e60:	4f af       	std	Y+63, r20	; 0x3f
   13e62:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13e64:	8e ec       	ldi	r24, 0xCE	; 206
   13e66:	95 e1       	ldi	r25, 0x15	; 21
   13e68:	9c 01       	movw	r18, r24
   13e6a:	40 e0       	ldi	r20, 0x00	; 0
   13e6c:	af 96       	adiw	r28, 0x2f	; 47
   13e6e:	2d af       	std	Y+61, r18	; 0x3d
   13e70:	3e af       	std	Y+62, r19	; 0x3e
   13e72:	4f af       	std	Y+63, r20	; 0x3f
   13e74:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13e76:	80 ef       	ldi	r24, 0xF0	; 240
   13e78:	95 e1       	ldi	r25, 0x15	; 21
   13e7a:	3c 01       	movw	r6, r24
   13e7c:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13e7e:	f6 01       	movw	r30, r12
   13e80:	80 81       	ld	r24, Z
   13e82:	88 23       	and	r24, r24
   13e84:	09 f4       	brne	.+2      	; 0x13e88 <format_drives+0xc0>
   13e86:	ef c0       	rjmp	.+478    	; 0x14066 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13e88:	83 30       	cpi	r24, 0x03	; 3
   13e8a:	09 f0       	breq	.+2      	; 0x13e8e <format_drives+0xc6>
   13e8c:	70 c0       	rjmp	.+224    	; 0x13f6e <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13e8e:	a7 a0       	ldd	r10, Z+39	; 0x27
   13e90:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13e92:	be 01       	movw	r22, r28
   13e94:	66 5f       	subi	r22, 0xF6	; 246
   13e96:	7f 4f       	sbci	r23, 0xFF	; 255
   13e98:	f5 01       	movw	r30, r10
   13e9a:	82 81       	ldd	r24, Z+2	; 0x02
   13e9c:	93 81       	ldd	r25, Z+3	; 0x03
   13e9e:	0e 94 15 79 	call	0xf22a	; 0xf22a <stat>
   13ea2:	01 96       	adiw	r24, 0x01	; 1
   13ea4:	09 f0       	breq	.+2      	; 0x13ea8 <format_drives+0xe0>
   13ea6:	63 c0       	rjmp	.+198    	; 0x13f6e <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13ea8:	f5 01       	movw	r30, r10
   13eaa:	80 89       	ldd	r24, Z+16	; 0x10
   13eac:	91 89       	ldd	r25, Z+17	; 0x11
   13eae:	81 15       	cp	r24, r1
   13eb0:	91 40       	sbci	r25, 0x01	; 1
   13eb2:	31 f0       	breq	.+12     	; 0x13ec0 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13eb4:	ed b7       	in	r30, 0x3d	; 61
   13eb6:	fe b7       	in	r31, 0x3e	; 62
   13eb8:	61 82       	std	Z+1, r6	; 0x01
   13eba:	72 82       	std	Z+2, r7	; 0x02
   13ebc:	83 82       	std	Z+3, r8	; 0x03
   13ebe:	79 c0       	rjmp	.+242    	; 0x13fb2 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13ec0:	f6 01       	movw	r30, r12
   13ec2:	23 80       	ldd	r2, Z+3	; 0x03
   13ec4:	34 80       	ldd	r3, Z+4	; 0x04
   13ec6:	45 80       	ldd	r4, Z+5	; 0x05
   13ec8:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13eca:	ed b7       	in	r30, 0x3d	; 61
   13ecc:	fe b7       	in	r31, 0x3e	; 62
   13ece:	26 82       	std	Z+6, r2	; 0x06
   13ed0:	37 82       	std	Z+7, r3	; 0x07
   13ed2:	40 86       	std	Z+8, r4	; 0x08
   13ed4:	51 86       	std	Z+9, r5	; 0x09
   13ed6:	f5 01       	movw	r30, r10
   13ed8:	82 81       	ldd	r24, Z+2	; 0x02
   13eda:	93 81       	ldd	r25, Z+3	; 0x03
   13edc:	ed b7       	in	r30, 0x3d	; 61
   13ede:	fe b7       	in	r31, 0x3e	; 62
   13ee0:	95 83       	std	Z+5, r25	; 0x05
   13ee2:	84 83       	std	Z+4, r24	; 0x04
   13ee4:	ac 96       	adiw	r28, 0x2c	; 44
   13ee6:	2d ad       	ldd	r18, Y+61	; 0x3d
   13ee8:	3e ad       	ldd	r19, Y+62	; 0x3e
   13eea:	4f ad       	ldd	r20, Y+63	; 0x3f
   13eec:	ac 97       	sbiw	r28, 0x2c	; 44
   13eee:	21 83       	std	Z+1, r18	; 0x01
   13ef0:	32 83       	std	Z+2, r19	; 0x02
   13ef2:	43 83       	std	Z+3, r20	; 0x03
   13ef4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13ef8:	6e 96       	adiw	r28, 0x1e	; 30
   13efa:	2e ad       	ldd	r18, Y+62	; 0x3e
   13efc:	3f ad       	ldd	r19, Y+63	; 0x3f
   13efe:	6e 97       	sbiw	r28, 0x1e	; 30
   13f00:	ed b7       	in	r30, 0x3d	; 61
   13f02:	fe b7       	in	r31, 0x3e	; 62
   13f04:	37 83       	std	Z+7, r19	; 0x07
   13f06:	26 83       	std	Z+6, r18	; 0x06
   13f08:	af 96       	adiw	r28, 0x2f	; 47
   13f0a:	8d ad       	ldd	r24, Y+61	; 0x3d
   13f0c:	9e ad       	ldd	r25, Y+62	; 0x3e
   13f0e:	af ad       	ldd	r26, Y+63	; 0x3f
   13f10:	af 97       	sbiw	r28, 0x2f	; 47
   13f12:	83 83       	std	Z+3, r24	; 0x03
   13f14:	94 83       	std	Z+4, r25	; 0x04
   13f16:	a5 83       	std	Z+5, r26	; 0x05
   13f18:	2a e3       	ldi	r18, 0x3A	; 58
   13f1a:	30 e0       	ldi	r19, 0x00	; 0
   13f1c:	2c 0f       	add	r18, r28
   13f1e:	3d 1f       	adc	r19, r29
   13f20:	32 83       	std	Z+2, r19	; 0x02
   13f22:	21 83       	std	Z+1, r18	; 0x01
   13f24:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13f28:	f5 01       	movw	r30, r10
   13f2a:	a2 80       	ldd	r10, Z+2	; 0x02
   13f2c:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13f2e:	c2 01       	movw	r24, r4
   13f30:	b1 01       	movw	r22, r2
   13f32:	41 d1       	rcall	.+642    	; 0x141b6 <lif_dir_count>
   13f34:	9b 01       	movw	r18, r22
   13f36:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13f38:	82 01       	movw	r16, r4
   13f3a:	71 01       	movw	r14, r2
   13f3c:	be 01       	movw	r22, r28
   13f3e:	66 5c       	subi	r22, 0xC6	; 198
   13f40:	7f 4f       	sbci	r23, 0xFF	; 255
   13f42:	c5 01       	movw	r24, r10
   13f44:	0e 94 e0 da 	call	0x1b5c0	; 0x1b5c0 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13f48:	6c 96       	adiw	r28, 0x1c	; 28
   13f4a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13f4c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13f4e:	6c 97       	sbiw	r28, 0x1c	; 28
   13f50:	2f 5f       	subi	r18, 0xFF	; 255
   13f52:	3f 4f       	sbci	r19, 0xFF	; 255
   13f54:	6c 96       	adiw	r28, 0x1c	; 28
   13f56:	3f af       	std	Y+63, r19	; 0x3f
   13f58:	2e af       	std	Y+62, r18	; 0x3e
   13f5a:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13f5c:	6e 96       	adiw	r28, 0x1e	; 30
   13f5e:	8e ad       	ldd	r24, Y+62	; 0x3e
   13f60:	9f ad       	ldd	r25, Y+63	; 0x3f
   13f62:	6e 97       	sbiw	r28, 0x1e	; 30
   13f64:	01 96       	adiw	r24, 0x01	; 1
   13f66:	6e 96       	adiw	r28, 0x1e	; 30
   13f68:	9f af       	std	Y+63, r25	; 0x3f
   13f6a:	8e af       	std	Y+62, r24	; 0x3e
   13f6c:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13f6e:	f6 01       	movw	r30, r12
   13f70:	80 81       	ld	r24, Z
   13f72:	81 30       	cpi	r24, 0x01	; 1
   13f74:	09 f0       	breq	.+2      	; 0x13f78 <format_drives+0x1b0>
   13f76:	77 c0       	rjmp	.+238    	; 0x14066 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13f78:	a7 a0       	ldd	r10, Z+39	; 0x27
   13f7a:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13f7c:	be 01       	movw	r22, r28
   13f7e:	66 5f       	subi	r22, 0xF6	; 246
   13f80:	7f 4f       	sbci	r23, 0xFF	; 255
   13f82:	f5 01       	movw	r30, r10
   13f84:	82 81       	ldd	r24, Z+2	; 0x02
   13f86:	93 81       	ldd	r25, Z+3	; 0x03
   13f88:	0e 94 15 79 	call	0xf22a	; 0xf22a <stat>
   13f8c:	01 96       	adiw	r24, 0x01	; 1
   13f8e:	09 f0       	breq	.+2      	; 0x13f92 <format_drives+0x1ca>
   13f90:	6a c0       	rjmp	.+212    	; 0x14066 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13f92:	f5 01       	movw	r30, r10
   13f94:	86 81       	ldd	r24, Z+6	; 0x06
   13f96:	97 81       	ldd	r25, Z+7	; 0x07
   13f98:	81 15       	cp	r24, r1
   13f9a:	91 40       	sbci	r25, 0x01	; 1
   13f9c:	69 f0       	breq	.+26     	; 0x13fb8 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13f9e:	a9 96       	adiw	r28, 0x29	; 41
   13fa0:	2d ad       	ldd	r18, Y+61	; 0x3d
   13fa2:	3e ad       	ldd	r19, Y+62	; 0x3e
   13fa4:	4f ad       	ldd	r20, Y+63	; 0x3f
   13fa6:	a9 97       	sbiw	r28, 0x29	; 41
   13fa8:	ed b7       	in	r30, 0x3d	; 61
   13faa:	fe b7       	in	r31, 0x3e	; 62
   13fac:	21 83       	std	Z+1, r18	; 0x01
   13fae:	32 83       	std	Z+2, r19	; 0x02
   13fb0:	43 83       	std	Z+3, r20	; 0x03
   13fb2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                    continue;
   13fb6:	57 c0       	rjmp	.+174    	; 0x14066 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13fb8:	f6 01       	movw	r30, r12
   13fba:	23 80       	ldd	r2, Z+3	; 0x03
   13fbc:	34 80       	ldd	r3, Z+4	; 0x04
   13fbe:	45 80       	ldd	r4, Z+5	; 0x05
   13fc0:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13fc2:	ed b7       	in	r30, 0x3d	; 61
   13fc4:	fe b7       	in	r31, 0x3e	; 62
   13fc6:	26 82       	std	Z+6, r2	; 0x06
   13fc8:	37 82       	std	Z+7, r3	; 0x07
   13fca:	40 86       	std	Z+8, r4	; 0x08
   13fcc:	51 86       	std	Z+9, r5	; 0x09
   13fce:	f5 01       	movw	r30, r10
   13fd0:	82 81       	ldd	r24, Z+2	; 0x02
   13fd2:	93 81       	ldd	r25, Z+3	; 0x03
   13fd4:	ed b7       	in	r30, 0x3d	; 61
   13fd6:	fe b7       	in	r31, 0x3e	; 62
   13fd8:	95 83       	std	Z+5, r25	; 0x05
   13fda:	84 83       	std	Z+4, r24	; 0x04
   13fdc:	a3 96       	adiw	r28, 0x23	; 35
   13fde:	2d ad       	ldd	r18, Y+61	; 0x3d
   13fe0:	3e ad       	ldd	r19, Y+62	; 0x3e
   13fe2:	4f ad       	ldd	r20, Y+63	; 0x3f
   13fe4:	a3 97       	sbiw	r28, 0x23	; 35
   13fe6:	21 83       	std	Z+1, r18	; 0x01
   13fe8:	32 83       	std	Z+2, r19	; 0x02
   13fea:	43 83       	std	Z+3, r20	; 0x03
   13fec:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13ff0:	a0 96       	adiw	r28, 0x20	; 32
   13ff2:	2e ad       	ldd	r18, Y+62	; 0x3e
   13ff4:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ff6:	a0 97       	sbiw	r28, 0x20	; 32
   13ff8:	ed b7       	in	r30, 0x3d	; 61
   13ffa:	fe b7       	in	r31, 0x3e	; 62
   13ffc:	37 83       	std	Z+7, r19	; 0x07
   13ffe:	26 83       	std	Z+6, r18	; 0x06
   14000:	a6 96       	adiw	r28, 0x26	; 38
   14002:	8d ad       	ldd	r24, Y+61	; 0x3d
   14004:	9e ad       	ldd	r25, Y+62	; 0x3e
   14006:	af ad       	ldd	r26, Y+63	; 0x3f
   14008:	a6 97       	sbiw	r28, 0x26	; 38
   1400a:	83 83       	std	Z+3, r24	; 0x03
   1400c:	94 83       	std	Z+4, r25	; 0x04
   1400e:	a5 83       	std	Z+5, r26	; 0x05
   14010:	2a e3       	ldi	r18, 0x3A	; 58
   14012:	30 e0       	ldi	r19, 0x00	; 0
   14014:	2c 0f       	add	r18, r28
   14016:	3d 1f       	adc	r19, r29
   14018:	32 83       	std	Z+2, r19	; 0x02
   1401a:	21 83       	std	Z+1, r18	; 0x01
   1401c:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14020:	f5 01       	movw	r30, r10
   14022:	a2 80       	ldd	r10, Z+2	; 0x02
   14024:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   14026:	c2 01       	movw	r24, r4
   14028:	b1 01       	movw	r22, r2
   1402a:	c5 d0       	rcall	.+394    	; 0x141b6 <lif_dir_count>
   1402c:	9b 01       	movw	r18, r22
   1402e:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14030:	82 01       	movw	r16, r4
   14032:	71 01       	movw	r14, r2
   14034:	be 01       	movw	r22, r28
   14036:	66 5c       	subi	r22, 0xC6	; 198
   14038:	7f 4f       	sbci	r23, 0xFF	; 255
   1403a:	c5 01       	movw	r24, r10
   1403c:	0e 94 e0 da 	call	0x1b5c0	; 0x1b5c0 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   14040:	6c 96       	adiw	r28, 0x1c	; 28
   14042:	2e ad       	ldd	r18, Y+62	; 0x3e
   14044:	3f ad       	ldd	r19, Y+63	; 0x3f
   14046:	6c 97       	sbiw	r28, 0x1c	; 28
   14048:	2f 5f       	subi	r18, 0xFF	; 255
   1404a:	3f 4f       	sbci	r19, 0xFF	; 255
   1404c:	6c 96       	adiw	r28, 0x1c	; 28
   1404e:	3f af       	std	Y+63, r19	; 0x3f
   14050:	2e af       	std	Y+62, r18	; 0x3e
   14052:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   14054:	a0 96       	adiw	r28, 0x20	; 32
   14056:	8e ad       	ldd	r24, Y+62	; 0x3e
   14058:	9f ad       	ldd	r25, Y+63	; 0x3f
   1405a:	a0 97       	sbiw	r28, 0x20	; 32
   1405c:	01 96       	adiw	r24, 0x01	; 1
   1405e:	a0 96       	adiw	r28, 0x20	; 32
   14060:	9f af       	std	Y+63, r25	; 0x3f
   14062:	8e af       	std	Y+62, r24	; 0x3e
   14064:	a0 97       	sbiw	r28, 0x20	; 32
   14066:	9b e2       	ldi	r25, 0x2B	; 43
   14068:	c9 0e       	add	r12, r25
   1406a:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1406c:	a9 ed       	ldi	r26, 0xD9	; 217
   1406e:	ca 16       	cp	r12, r26
   14070:	a0 e2       	ldi	r26, 0x20	; 32
   14072:	da 06       	cpc	r13, r26
   14074:	09 f0       	breq	.+2      	; 0x14078 <format_drives+0x2b0>
   14076:	03 cf       	rjmp	.-506    	; 0x13e7e <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   14078:	6c 96       	adiw	r28, 0x1c	; 28
   1407a:	ee ad       	ldd	r30, Y+62	; 0x3e
   1407c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1407e:	6c 97       	sbiw	r28, 0x1c	; 28
   14080:	ef 2b       	or	r30, r31
   14082:	11 f0       	breq	.+4      	; 0x14088 <format_drives+0x2c0>
        sep();
   14084:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>
}
   14088:	c2 59       	subi	r28, 0x92	; 146
   1408a:	df 4f       	sbci	r29, 0xFF	; 255
   1408c:	0f b6       	in	r0, 0x3f	; 63
   1408e:	f8 94       	cli
   14090:	de bf       	out	0x3e, r29	; 62
   14092:	0f be       	out	0x3f, r0	; 63
   14094:	cd bf       	out	0x3d, r28	; 61
   14096:	df 91       	pop	r29
   14098:	cf 91       	pop	r28
   1409a:	1f 91       	pop	r17
   1409c:	0f 91       	pop	r16
   1409e:	ff 90       	pop	r15
   140a0:	ef 90       	pop	r14
   140a2:	df 90       	pop	r13
   140a4:	cf 90       	pop	r12
   140a6:	bf 90       	pop	r11
   140a8:	af 90       	pop	r10
   140aa:	8f 90       	pop	r8
   140ac:	7f 90       	pop	r7
   140ae:	6f 90       	pop	r6
   140b0:	5f 90       	pop	r5
   140b2:	4f 90       	pop	r4
   140b4:	3f 90       	pop	r3
   140b6:	2f 90       	pop	r2
   140b8:	08 95       	ret

000140ba <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   140ba:	8f e1       	ldi	r24, 0x1F	; 31
   140bc:	e9 ed       	ldi	r30, 0xD9	; 217
   140be:	f0 e2       	ldi	r31, 0x20	; 32
   140c0:	df 01       	movw	r26, r30
   140c2:	98 2f       	mov	r25, r24
   140c4:	1d 92       	st	X+, r1
   140c6:	9a 95       	dec	r25
   140c8:	e9 f7       	brne	.-6      	; 0x140c4 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   140ca:	9f e3       	ldi	r25, 0x3F	; 63
   140cc:	e9 ef       	ldi	r30, 0xF9	; 249
   140ce:	f0 e2       	ldi	r31, 0x20	; 32
   140d0:	df 01       	movw	r26, r30
   140d2:	1d 92       	st	X+, r1
   140d4:	9a 95       	dec	r25
   140d6:	e9 f7       	brne	.-6      	; 0x140d2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   140d8:	e9 e3       	ldi	r30, 0x39	; 57
   140da:	f1 e2       	ldi	r31, 0x21	; 33
   140dc:	df 01       	movw	r26, r30
   140de:	1d 92       	st	X+, r1
   140e0:	8a 95       	dec	r24
   140e2:	e9 f7       	brne	.-6      	; 0x140de <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   140e4:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <hpdir+0x80>
   140e8:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <hpdir+0x81>
   140ec:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <hpdir+0x82>
   140f0:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   140f4:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <hpdir+0x84>
   140f8:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <hpdir+0x85>
   140fc:	10 92 5f 21 	sts	0x215F, r1	; 0x80215f <hpdir+0x86>
   14100:	10 92 60 21 	sts	0x2160, r1	; 0x802160 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14104:	10 92 61 21 	sts	0x2161, r1	; 0x802161 <hpdir+0x88>
   14108:	10 92 62 21 	sts	0x2162, r1	; 0x802162 <hpdir+0x89>
   1410c:	10 92 63 21 	sts	0x2163, r1	; 0x802163 <hpdir+0x8a>
   14110:	10 92 64 21 	sts	0x2164, r1	; 0x802164 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14114:	10 92 65 21 	sts	0x2165, r1	; 0x802165 <hpdir+0x8c>
   14118:	10 92 66 21 	sts	0x2166, r1	; 0x802166 <hpdir+0x8d>
   1411c:	10 92 67 21 	sts	0x2167, r1	; 0x802167 <hpdir+0x8e>
   14120:	10 92 68 21 	sts	0x2168, r1	; 0x802168 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14124:	81 e0       	ldi	r24, 0x01	; 1
   14126:	90 e8       	ldi	r25, 0x80	; 128
   14128:	a0 e0       	ldi	r26, 0x00	; 0
   1412a:	b0 e0       	ldi	r27, 0x00	; 0
   1412c:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <hpdir+0x90>
   14130:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <hpdir+0x91>
   14134:	a0 93 6b 21 	sts	0x216B, r26	; 0x80216b <hpdir+0x92>
   14138:	b0 93 6c 21 	sts	0x216C, r27	; 0x80216c <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1413c:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <hpdir+0x94>
   14140:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <hpdir+0x95>
   14144:	10 92 6f 21 	sts	0x216F, r1	; 0x80216f <hpdir+0x96>
   14148:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1414c:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <hpdir+0x98>
   14150:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <hpdir+0x99>
   14154:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <hpdir+0x9a>
   14158:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1415c:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <hpdir+0x9c>
   14160:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <hpdir+0x9d>
   14164:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <hpdir+0x9e>
   14168:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1416c:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <hpdir+0xa0>
   14170:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <hpdir+0xa1>
   14174:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <hpdir+0xa2>
   14178:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1417c:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <hpdir+0xa4>
   14180:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <hpdir+0xa5>
   14184:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <hpdir+0xa6>
   14188:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1418c:	81 e0       	ldi	r24, 0x01	; 1
   1418e:	90 e0       	ldi	r25, 0x00	; 0
   14190:	a0 e0       	ldi	r26, 0x00	; 0
   14192:	b0 e0       	ldi	r27, 0x00	; 0
   14194:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <hpdir+0xa8>
   14198:	90 93 82 21 	sts	0x2182, r25	; 0x802182 <hpdir+0xa9>
   1419c:	a0 93 83 21 	sts	0x2183, r26	; 0x802183 <hpdir+0xaa>
   141a0:	b0 93 84 21 	sts	0x2184, r27	; 0x802184 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   141a4:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0xac>
   141a8:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0xad>
   141ac:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0xae>
   141b0:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0xaf>
   141b4:	08 95       	ret

000141b6 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   141b6:	20 e0       	ldi	r18, 0x00	; 0
   141b8:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   141ba:	61 15       	cp	r22, r1
   141bc:	71 05       	cpc	r23, r1
   141be:	81 05       	cpc	r24, r1
   141c0:	91 05       	cpc	r25, r1
   141c2:	39 f0       	breq	.+14     	; 0x141d2 <lif_dir_count+0x1c>
    {
        scale++;
   141c4:	2f 5f       	subi	r18, 0xFF	; 255
   141c6:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   141c8:	95 95       	asr	r25
   141ca:	87 95       	ror	r24
   141cc:	77 95       	ror	r23
   141ce:	67 95       	ror	r22
   141d0:	f4 cf       	rjmp	.-24     	; 0x141ba <lif_dir_count+0x4>
    }
    scale>>=1;
   141d2:	35 95       	asr	r19
   141d4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   141d6:	61 e0       	ldi	r22, 0x01	; 1
   141d8:	70 e0       	ldi	r23, 0x00	; 0
   141da:	80 e0       	ldi	r24, 0x00	; 0
   141dc:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   141de:	21 50       	subi	r18, 0x01	; 1
   141e0:	31 09       	sbc	r19, r1
   141e2:	28 f0       	brcs	.+10     	; 0x141ee <lif_dir_count+0x38>
        num <<=1;
   141e4:	66 0f       	add	r22, r22
   141e6:	77 1f       	adc	r23, r23
   141e8:	88 1f       	adc	r24, r24
   141ea:	99 1f       	adc	r25, r25
   141ec:	f8 cf       	rjmp	.-16     	; 0x141de <lif_dir_count+0x28>
    return(num);
}
   141ee:	08 95       	ret

000141f0 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   141f0:	2f 92       	push	r2
   141f2:	3f 92       	push	r3
   141f4:	4f 92       	push	r4
   141f6:	5f 92       	push	r5
   141f8:	6f 92       	push	r6
   141fa:	8f 92       	push	r8
   141fc:	9f 92       	push	r9
   141fe:	af 92       	push	r10
   14200:	bf 92       	push	r11
   14202:	cf 92       	push	r12
   14204:	df 92       	push	r13
   14206:	ef 92       	push	r14
   14208:	ff 92       	push	r15
   1420a:	0f 93       	push	r16
   1420c:	1f 93       	push	r17
   1420e:	cf 93       	push	r28
   14210:	df 93       	push	r29
   14212:	cd b7       	in	r28, 0x3d	; 61
   14214:	de b7       	in	r29, 0x3e	; 62
   14216:	c9 58       	subi	r28, 0x89	; 137
   14218:	d1 40       	sbci	r29, 0x01	; 1
   1421a:	0f b6       	in	r0, 0x3f	; 63
   1421c:	f8 94       	cli
   1421e:	de bf       	out	0x3e, r29	; 62
   14220:	0f be       	out	0x3f, r0	; 63
   14222:	cd bf       	out	0x3d, r28	; 61
   14224:	6c 01       	movw	r12, r24
   14226:	c8 57       	subi	r28, 0x78	; 120
   14228:	de 4f       	sbci	r29, 0xFE	; 254
   1422a:	79 83       	std	Y+1, r23	; 0x01
   1422c:	68 83       	st	Y, r22
   1422e:	c8 58       	subi	r28, 0x88	; 136
   14230:	d1 40       	sbci	r29, 0x01	; 1
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14232:	5a 01       	movw	r10, r20

    cfg = fopen("hpdir.ini","rb");
   14234:	42 df       	rcall	.-380    	; 0x140ba <hpdir_init>
   14236:	60 ed       	ldi	r22, 0xD0	; 208
   14238:	78 e0       	ldi	r23, 0x08	; 8
   1423a:	8a e1       	ldi	r24, 0x1A	; 26
   1423c:	90 e1       	ldi	r25, 0x10	; 16
   1423e:	0e 94 10 7e 	call	0xfc20	; 0xfc20 <fopen>

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14242:	7c 01       	movw	r14, r24
   14244:	89 2b       	or	r24, r25
        cfg = fopen("/hpdir.ini","rb");
   14246:	49 f4       	brne	.+18     	; 0x1425a <hpdir_find_drive+0x6a>
   14248:	60 ed       	ldi	r22, 0xD0	; 208
   1424a:	78 e0       	ldi	r23, 0x08	; 8
   1424c:	89 e1       	ldi	r24, 0x19	; 25
   1424e:	90 e1       	ldi	r25, 0x10	; 16
   14250:	0e 94 10 7e 	call	0xfc20	; 0xfc20 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14254:	7c 01       	movw	r14, r24
   14256:	89 2b       	or	r24, r25
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14258:	51 f0       	breq	.+20     	; 0x1426e <hpdir_find_drive+0x7e>
   1425a:	21 2c       	mov	r2, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1425c:	31 2c       	mov	r3, r1
   1425e:	8e 01       	movw	r16, r28
   14260:	08 5f       	subi	r16, 0xF8	; 248
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14262:	1e 4f       	sbci	r17, 0xFE	; 254
   14264:	88 e3       	ldi	r24, 0x38	; 56
   14266:	9c e1       	ldi	r25, 0x1C	; 28
   14268:	2c 01       	movw	r4, r24
   1426a:	61 2c       	mov	r6, r1
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1426c:	1e c0       	rjmp	.+60     	; 0x142aa <hpdir_find_drive+0xba>
   1426e:	ab 28       	or	r10, r11
   14270:	09 f4       	brne	.+2      	; 0x14274 <hpdir_find_drive+0x84>
            printf("Error: hpdir.ini not found!\n");
   14272:	69 c1       	rjmp	.+722    	; 0x14546 <hpdir_find_drive+0x356>
   14274:	8f e3       	ldi	r24, 0x3F	; 63
   14276:	9c e1       	ldi	r25, 0x1C	; 28
   14278:	a0 e0       	ldi	r26, 0x00	; 0
   1427a:	ed b7       	in	r30, 0x3d	; 61
   1427c:	fe b7       	in	r31, 0x3e	; 62
   1427e:	81 83       	std	Z+1, r24	; 0x01
   14280:	92 83       	std	Z+2, r25	; 0x02
   14282:	a3 83       	std	Z+3, r26	; 0x03
   14284:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14288:	5e c1       	rjmp	.+700    	; 0x14546 <hpdir_find_drive+0x356>
   1428a:	ce 01       	movw	r24, r28
   1428c:	08 96       	adiw	r24, 0x08	; 8
   1428e:	0e 94 a2 31 	call	0x6344	; 0x6344 <trim_tail>
        ptr = skipspaces(ptr);
   14292:	ce 01       	movw	r24, r28
   14294:	08 96       	adiw	r24, 0x08	; 8
   14296:	0e 94 b2 31 	call	0x6364	; 0x6364 <skipspaces>

        len = strlen(ptr);
   1429a:	fc 01       	movw	r30, r24
   1429c:	01 90       	ld	r0, Z+
   1429e:	00 20       	and	r0, r0
   142a0:	e9 f7       	brne	.-6      	; 0x1429c <hpdir_find_drive+0xac>
        if(!len)
   142a2:	31 97       	sbiw	r30, 0x01	; 1
   142a4:	8e 17       	cp	r24, r30
   142a6:	9f 07       	cpc	r25, r31
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   142a8:	51 f4       	brne	.+20     	; 0x142be <hpdir_find_drive+0xce>
   142aa:	a7 01       	movw	r20, r14
   142ac:	6e ef       	ldi	r22, 0xFE	; 254
   142ae:	70 e0       	ldi	r23, 0x00	; 0
   142b0:	ce 01       	movw	r24, r28
   142b2:	08 96       	adiw	r24, 0x08	; 8
   142b4:	0e 94 28 76 	call	0xec50	; 0xec50 <fgets>
   142b8:	89 2b       	or	r24, r25
   142ba:	39 f7       	brne	.-50     	; 0x1428a <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   142bc:	0c c0       	rjmp	.+24     	; 0x142d6 <hpdir_find_drive+0xe6>
   142be:	fc 01       	movw	r30, r24
   142c0:	20 81       	ld	r18, Z
   142c2:	2b 33       	cpi	r18, 0x3B	; 59
   142c4:	91 f3       	breq	.-28     	; 0x142aa <hpdir_find_drive+0xba>
   142c6:	23 32       	cpi	r18, 0x23	; 35
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   142c8:	81 f3       	breq	.-32     	; 0x142aa <hpdir_find_drive+0xba>
   142ca:	2b 35       	cpi	r18, 0x5B	; 91
   142cc:	31 f4       	brne	.+12     	; 0x142da <hpdir_find_drive+0xea>
   142ce:	f1 e0       	ldi	r31, 0x01	; 1
   142d0:	2f 16       	cp	r2, r31
   142d2:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   142d4:	11 f4       	brne	.+4      	; 0x142da <hpdir_find_drive+0xea>
   142d6:	00 e0       	ldi	r16, 0x00	; 0

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   142d8:	30 c1       	rjmp	.+608    	; 0x1453a <hpdir_find_drive+0x34a>
   142da:	4e e7       	ldi	r20, 0x7E	; 126
   142dc:	50 e0       	ldi	r21, 0x00	; 0
   142de:	b8 01       	movw	r22, r16
   142e0:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>

        if(MATCHI(token,"[driveinfo]"))
   142e4:	4c 01       	movw	r8, r24
   142e6:	64 e2       	ldi	r22, 0x24	; 36
   142e8:	70 e1       	ldi	r23, 0x10	; 16
   142ea:	c8 01       	movw	r24, r16
   142ec:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
   142f0:	89 2b       	or	r24, r25
        {
            driveinfo = 1;
   142f2:	21 f0       	breq	.+8      	; 0x142fc <hpdir_find_drive+0x10c>
   142f4:	22 24       	eor	r2, r2
   142f6:	23 94       	inc	r2
   142f8:	31 2c       	mov	r3, r1
            continue;
        }

        if( driveinfo != 1)
   142fa:	d7 cf       	rjmp	.-82     	; 0x142aa <hpdir_find_drive+0xba>
   142fc:	21 e0       	ldi	r18, 0x01	; 1
   142fe:	22 16       	cp	r2, r18
   14300:	31 04       	cpc	r3, r1
            continue;

        if(list)
   14302:	99 f6       	brne	.-90     	; 0x142aa <hpdir_find_drive+0xba>
   14304:	c8 57       	subi	r28, 0x78	; 120
   14306:	de 4f       	sbci	r29, 0xFE	; 254
   14308:	88 81       	ld	r24, Y
   1430a:	99 81       	ldd	r25, Y+1	; 0x01
   1430c:	c8 58       	subi	r28, 0x88	; 136
   1430e:	d1 40       	sbci	r29, 0x01	; 1
   14310:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   14312:	61 f0       	breq	.+24     	; 0x1432c <hpdir_find_drive+0x13c>
   14314:	ed b7       	in	r30, 0x3d	; 61
   14316:	fe b7       	in	r31, 0x3e	; 62
   14318:	97 82       	std	Z+7, r9	; 0x07
   1431a:	86 82       	std	Z+6, r8	; 0x06
   1431c:	15 83       	std	Z+5, r17	; 0x05
   1431e:	04 83       	std	Z+4, r16	; 0x04
   14320:	41 82       	std	Z+1, r4	; 0x01
   14322:	52 82       	std	Z+2, r5	; 0x02
   14324:	63 82       	std	Z+3, r6	; 0x03
   14326:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            continue;
        }

        if ( ! MATCHI(model,token) )
   1432a:	bf cf       	rjmp	.-130    	; 0x142aa <hpdir_find_drive+0xba>
   1432c:	b8 01       	movw	r22, r16
   1432e:	c6 01       	movw	r24, r12
   14330:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <MATCHI>
            continue;

        hpdir_init();
   14334:	89 2b       	or	r24, r25
   14336:	f1 f2       	breq	.-68     	; 0x142f4 <hpdir_find_drive+0x104>

        if(verbose)
   14338:	c0 de       	rcall	.-640    	; 0x140ba <hpdir_init>
   1433a:	ab 28       	or	r10, r11
            printf("Found Model: %s\n", model);
   1433c:	61 f0       	breq	.+24     	; 0x14356 <hpdir_find_drive+0x166>
   1433e:	ed b7       	in	r30, 0x3d	; 61
   14340:	fe b7       	in	r31, 0x3e	; 62
   14342:	d5 82       	std	Z+5, r13	; 0x05
   14344:	c4 82       	std	Z+4, r12	; 0x04
   14346:	87 e2       	ldi	r24, 0x27	; 39
   14348:	9c e1       	ldi	r25, 0x1C	; 28
   1434a:	a0 e0       	ldi	r26, 0x00	; 0
   1434c:	81 83       	std	Z+1, r24	; 0x01
   1434e:	92 83       	std	Z+2, r25	; 0x02
   14350:	a3 83       	std	Z+3, r26	; 0x03
   14352:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14356:	4e e1       	ldi	r20, 0x1E	; 30
   14358:	50 e0       	ldi	r21, 0x00	; 0
   1435a:	b8 01       	movw	r22, r16
   1435c:	89 ed       	ldi	r24, 0xD9	; 217
   1435e:	90 e2       	ldi	r25, 0x20	; 32
   14360:	0e 94 cf 30 	call	0x619e	; 0x619e <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14364:	4e e7       	ldi	r20, 0x7E	; 126
   14366:	50 e0       	ldi	r21, 0x00	; 0
   14368:	b8 01       	movw	r22, r16
   1436a:	c4 01       	movw	r24, r8
   1436c:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14370:	4e e3       	ldi	r20, 0x3E	; 62
   14372:	50 e0       	ldi	r21, 0x00	; 0
   14374:	69 ef       	ldi	r22, 0xF9	; 249
   14376:	70 e2       	ldi	r23, 0x20	; 32
   14378:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1437c:	4e e1       	ldi	r20, 0x1E	; 30
   1437e:	50 e0       	ldi	r21, 0x00	; 0
   14380:	69 e3       	ldi	r22, 0x39	; 57
   14382:	71 e2       	ldi	r23, 0x21	; 33
   14384:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14388:	4e e7       	ldi	r20, 0x7E	; 126
   1438a:	50 e0       	ldi	r21, 0x00	; 0
   1438c:	b8 01       	movw	r22, r16
   1438e:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.ID = get_value(token);
   14392:	6c 01       	movw	r12, r24
   14394:	c8 01       	movw	r24, r16
   14396:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   1439a:	60 93 59 21 	sts	0x2159, r22	; 0x802159 <hpdir+0x80>
   1439e:	70 93 5a 21 	sts	0x215A, r23	; 0x80215a <hpdir+0x81>
   143a2:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <hpdir+0x82>
   143a6:	90 93 5c 21 	sts	0x215C, r25	; 0x80215c <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143aa:	4e e7       	ldi	r20, 0x7E	; 126
   143ac:	50 e0       	ldi	r21, 0x00	; 0
   143ae:	b8 01       	movw	r22, r16
   143b0:	c6 01       	movw	r24, r12
   143b2:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.mask_stat2 = get_value(token);
   143b6:	6c 01       	movw	r12, r24
   143b8:	c8 01       	movw	r24, r16
   143ba:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   143be:	60 93 5d 21 	sts	0x215D, r22	; 0x80215d <hpdir+0x84>
   143c2:	70 93 5e 21 	sts	0x215E, r23	; 0x80215e <hpdir+0x85>
   143c6:	80 93 5f 21 	sts	0x215F, r24	; 0x80215f <hpdir+0x86>
   143ca:	90 93 60 21 	sts	0x2160, r25	; 0x802160 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143ce:	4e e7       	ldi	r20, 0x7E	; 126
   143d0:	50 e0       	ldi	r21, 0x00	; 0
   143d2:	b8 01       	movw	r22, r16
   143d4:	c6 01       	movw	r24, r12
   143d6:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.id_stat2 = get_value(token);
   143da:	6c 01       	movw	r12, r24
   143dc:	c8 01       	movw	r24, r16
   143de:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   143e2:	60 93 61 21 	sts	0x2161, r22	; 0x802161 <hpdir+0x88>
   143e6:	70 93 62 21 	sts	0x2162, r23	; 0x802162 <hpdir+0x89>
   143ea:	80 93 63 21 	sts	0x2163, r24	; 0x802163 <hpdir+0x8a>
   143ee:	90 93 64 21 	sts	0x2164, r25	; 0x802164 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143f2:	4e e7       	ldi	r20, 0x7E	; 126
   143f4:	50 e0       	ldi	r21, 0x00	; 0
   143f6:	b8 01       	movw	r22, r16
   143f8:	c6 01       	movw	r24, r12
   143fa:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.DEVICE_NUMBER = get_value(token);
   143fe:	6c 01       	movw	r12, r24
   14400:	c8 01       	movw	r24, r16
   14402:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   14406:	60 93 65 21 	sts	0x2165, r22	; 0x802165 <hpdir+0x8c>
   1440a:	70 93 66 21 	sts	0x2166, r23	; 0x802166 <hpdir+0x8d>
   1440e:	80 93 67 21 	sts	0x2167, r24	; 0x802167 <hpdir+0x8e>
   14412:	90 93 68 21 	sts	0x2168, r25	; 0x802168 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14416:	4e e7       	ldi	r20, 0x7E	; 126
   14418:	50 e0       	ldi	r21, 0x00	; 0
   1441a:	b8 01       	movw	r22, r16
   1441c:	c6 01       	movw	r24, r12
   1441e:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.UNITS_INSTALLED = get_value(token);
   14422:	6c 01       	movw	r12, r24
   14424:	c8 01       	movw	r24, r16
   14426:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   1442a:	60 93 69 21 	sts	0x2169, r22	; 0x802169 <hpdir+0x90>
   1442e:	70 93 6a 21 	sts	0x216A, r23	; 0x80216a <hpdir+0x91>
   14432:	80 93 6b 21 	sts	0x216B, r24	; 0x80216b <hpdir+0x92>
   14436:	90 93 6c 21 	sts	0x216C, r25	; 0x80216c <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1443a:	4e e7       	ldi	r20, 0x7E	; 126
   1443c:	50 e0       	ldi	r21, 0x00	; 0
   1443e:	b8 01       	movw	r22, r16
   14440:	c6 01       	movw	r24, r12
   14442:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.CYLINDERS = get_value(token);
   14446:	6c 01       	movw	r12, r24
   14448:	c8 01       	movw	r24, r16
   1444a:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   1444e:	60 93 6d 21 	sts	0x216D, r22	; 0x80216d <hpdir+0x94>
   14452:	70 93 6e 21 	sts	0x216E, r23	; 0x80216e <hpdir+0x95>
   14456:	80 93 6f 21 	sts	0x216F, r24	; 0x80216f <hpdir+0x96>
   1445a:	90 93 70 21 	sts	0x2170, r25	; 0x802170 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1445e:	4e e7       	ldi	r20, 0x7E	; 126
   14460:	50 e0       	ldi	r21, 0x00	; 0
   14462:	b8 01       	movw	r22, r16
   14464:	c6 01       	movw	r24, r12
   14466:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.HEADS = get_value(token);
   1446a:	6c 01       	movw	r12, r24
   1446c:	c8 01       	movw	r24, r16
   1446e:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   14472:	60 93 71 21 	sts	0x2171, r22	; 0x802171 <hpdir+0x98>
   14476:	70 93 72 21 	sts	0x2172, r23	; 0x802172 <hpdir+0x99>
   1447a:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <hpdir+0x9a>
   1447e:	90 93 74 21 	sts	0x2174, r25	; 0x802174 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14482:	4e e7       	ldi	r20, 0x7E	; 126
   14484:	50 e0       	ldi	r21, 0x00	; 0
   14486:	b8 01       	movw	r22, r16
   14488:	c6 01       	movw	r24, r12
   1448a:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.SECTORS = get_value(token);
   1448e:	6c 01       	movw	r12, r24
   14490:	c8 01       	movw	r24, r16
   14492:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   14496:	60 93 75 21 	sts	0x2175, r22	; 0x802175 <hpdir+0x9c>
   1449a:	70 93 76 21 	sts	0x2176, r23	; 0x802176 <hpdir+0x9d>
   1449e:	80 93 77 21 	sts	0x2177, r24	; 0x802177 <hpdir+0x9e>
   144a2:	90 93 78 21 	sts	0x2178, r25	; 0x802178 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144a6:	4e e7       	ldi	r20, 0x7E	; 126
   144a8:	50 e0       	ldi	r21, 0x00	; 0
   144aa:	b8 01       	movw	r22, r16
   144ac:	c6 01       	movw	r24, r12
   144ae:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.BYTES_PER_SECTOR = get_value(token);
   144b2:	6c 01       	movw	r12, r24
   144b4:	c8 01       	movw	r24, r16
   144b6:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   144ba:	60 93 79 21 	sts	0x2179, r22	; 0x802179 <hpdir+0xa0>
   144be:	70 93 7a 21 	sts	0x217A, r23	; 0x80217a <hpdir+0xa1>
   144c2:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <hpdir+0xa2>
   144c6:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144ca:	4e e7       	ldi	r20, 0x7E	; 126
   144cc:	50 e0       	ldi	r21, 0x00	; 0
   144ce:	b8 01       	movw	r22, r16
   144d0:	c6 01       	movw	r24, r12
   144d2:	0e 94 84 32 	call	0x6508	; 0x6508 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   144d6:	c8 01       	movw	r24, r16
   144d8:	0e 94 c7 32 	call	0x658e	; 0x658e <get_value>
   144dc:	60 93 7d 21 	sts	0x217D, r22	; 0x80217d <hpdir+0xa4>
   144e0:	70 93 7e 21 	sts	0x217E, r23	; 0x80217e <hpdir+0xa5>
   144e4:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <hpdir+0xa6>
   144e8:	90 93 80 21 	sts	0x2180, r25	; 0x802180 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   144ec:	20 91 6d 21 	lds	r18, 0x216D	; 0x80216d <hpdir+0x94>
   144f0:	30 91 6e 21 	lds	r19, 0x216E	; 0x80216e <hpdir+0x95>
   144f4:	40 91 6f 21 	lds	r20, 0x216F	; 0x80216f <hpdir+0x96>
   144f8:	50 91 70 21 	lds	r21, 0x2170	; 0x802170 <hpdir+0x97>
   144fc:	60 91 71 21 	lds	r22, 0x2171	; 0x802171 <hpdir+0x98>
   14500:	70 91 72 21 	lds	r23, 0x2172	; 0x802172 <hpdir+0x99>
   14504:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <hpdir+0x9a>
   14508:	90 91 74 21 	lds	r25, 0x2174	; 0x802174 <hpdir+0x9b>
   1450c:	0e 94 e2 df 	call	0x1bfc4	; 0x1bfc4 <__mulsi3>
   14510:	9b 01       	movw	r18, r22
   14512:	ac 01       	movw	r20, r24
   14514:	60 91 75 21 	lds	r22, 0x2175	; 0x802175 <hpdir+0x9c>
   14518:	70 91 76 21 	lds	r23, 0x2176	; 0x802176 <hpdir+0x9d>
   1451c:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <hpdir+0x9e>
   14520:	90 91 78 21 	lds	r25, 0x2178	; 0x802178 <hpdir+0x9f>
   14524:	0e 94 e2 df 	call	0x1bfc4	; 0x1bfc4 <__mulsi3>
   14528:	60 93 85 21 	sts	0x2185, r22	; 0x802185 <hpdir+0xac>
   1452c:	70 93 86 21 	sts	0x2186, r23	; 0x802186 <hpdir+0xad>
   14530:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <hpdir+0xae>
   14534:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14538:	01 e0       	ldi	r16, 0x01	; 1
        break;

    }                                             // while
    fclose(cfg);
   1453a:	10 e0       	ldi	r17, 0x00	; 0
   1453c:	c7 01       	movw	r24, r14
   1453e:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
    return(found);
   14542:	c8 01       	movw	r24, r16

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14544:	02 c0       	rjmp	.+4      	; 0x1454a <hpdir_find_drive+0x35a>
   14546:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   14548:	90 e0       	ldi	r25, 0x00	; 0
   1454a:	c7 57       	subi	r28, 0x77	; 119
   1454c:	de 4f       	sbci	r29, 0xFE	; 254
   1454e:	0f b6       	in	r0, 0x3f	; 63
   14550:	f8 94       	cli
   14552:	de bf       	out	0x3e, r29	; 62
   14554:	0f be       	out	0x3f, r0	; 63
   14556:	cd bf       	out	0x3d, r28	; 61
   14558:	df 91       	pop	r29
   1455a:	cf 91       	pop	r28
   1455c:	1f 91       	pop	r17
   1455e:	0f 91       	pop	r16
   14560:	ff 90       	pop	r15
   14562:	ef 90       	pop	r14
   14564:	df 90       	pop	r13
   14566:	cf 90       	pop	r12
   14568:	bf 90       	pop	r11
   1456a:	af 90       	pop	r10
   1456c:	9f 90       	pop	r9
   1456e:	8f 90       	pop	r8
   14570:	6f 90       	pop	r6
   14572:	5f 90       	pop	r5
   14574:	4f 90       	pop	r4
   14576:	3f 90       	pop	r3
   14578:	2f 90       	pop	r2
   1457a:	08 95       	ret

0001457c <SS80ControllerPack>:
   1457c:	0f 93       	push	r16
   1457e:	1f 93       	push	r17
   14580:	25 e0       	ldi	r18, 0x05	; 5
   14582:	30 e0       	ldi	r19, 0x00	; 0
   14584:	fc 01       	movw	r30, r24
   14586:	31 83       	std	Z+1, r19	; 0x01
   14588:	20 83       	st	Z, r18
   1458a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   1458e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   14592:	06 81       	ldd	r16, Z+6	; 0x06
   14594:	17 81       	ldd	r17, Z+7	; 0x07
   14596:	20 e0       	ldi	r18, 0x00	; 0
   14598:	30 e0       	ldi	r19, 0x00	; 0
   1459a:	42 e0       	ldi	r20, 0x02	; 2
   1459c:	50 e0       	ldi	r21, 0x00	; 0
   1459e:	60 e0       	ldi	r22, 0x00	; 0
   145a0:	70 e0       	ldi	r23, 0x00	; 0
   145a2:	80 e8       	ldi	r24, 0x80	; 128
   145a4:	99 e1       	ldi	r25, 0x19	; 25
   145a6:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   145aa:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   145ae:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   145b2:	00 85       	ldd	r16, Z+8	; 0x08
   145b4:	11 85       	ldd	r17, Z+9	; 0x09
   145b6:	20 e0       	ldi	r18, 0x00	; 0
   145b8:	30 e0       	ldi	r19, 0x00	; 0
   145ba:	42 e0       	ldi	r20, 0x02	; 2
   145bc:	50 e0       	ldi	r21, 0x00	; 0
   145be:	61 e0       	ldi	r22, 0x01	; 1
   145c0:	70 e0       	ldi	r23, 0x00	; 0
   145c2:	80 e8       	ldi	r24, 0x80	; 128
   145c4:	99 e1       	ldi	r25, 0x19	; 25
   145c6:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   145ca:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   145ce:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   145d2:	02 85       	ldd	r16, Z+10	; 0x0a
   145d4:	10 e0       	ldi	r17, 0x00	; 0
   145d6:	20 e0       	ldi	r18, 0x00	; 0
   145d8:	30 e0       	ldi	r19, 0x00	; 0
   145da:	41 e0       	ldi	r20, 0x01	; 1
   145dc:	50 e0       	ldi	r21, 0x00	; 0
   145de:	64 e0       	ldi	r22, 0x04	; 4
   145e0:	70 e0       	ldi	r23, 0x00	; 0
   145e2:	80 e8       	ldi	r24, 0x80	; 128
   145e4:	99 e1       	ldi	r25, 0x19	; 25
   145e6:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   145ea:	80 e8       	ldi	r24, 0x80	; 128
   145ec:	99 e1       	ldi	r25, 0x19	; 25
   145ee:	1f 91       	pop	r17
   145f0:	0f 91       	pop	r16
   145f2:	08 95       	ret

000145f4 <SS80UnitPack>:
   145f4:	0f 93       	push	r16
   145f6:	1f 93       	push	r17
   145f8:	23 e1       	ldi	r18, 0x13	; 19
   145fa:	30 e0       	ldi	r19, 0x00	; 0
   145fc:	fc 01       	movw	r30, r24
   145fe:	31 83       	std	Z+1, r19	; 0x01
   14600:	20 83       	st	Z, r18
   14602:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14606:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1460a:	03 85       	ldd	r16, Z+11	; 0x0b
   1460c:	10 e0       	ldi	r17, 0x00	; 0
   1460e:	20 e0       	ldi	r18, 0x00	; 0
   14610:	30 e0       	ldi	r19, 0x00	; 0
   14612:	41 e0       	ldi	r20, 0x01	; 1
   14614:	50 e0       	ldi	r21, 0x00	; 0
   14616:	60 e0       	ldi	r22, 0x00	; 0
   14618:	70 e0       	ldi	r23, 0x00	; 0
   1461a:	8d e6       	ldi	r24, 0x6D	; 109
   1461c:	99 e1       	ldi	r25, 0x19	; 25
   1461e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14622:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14626:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1462a:	04 85       	ldd	r16, Z+12	; 0x0c
   1462c:	15 85       	ldd	r17, Z+13	; 0x0d
   1462e:	26 85       	ldd	r18, Z+14	; 0x0e
   14630:	37 85       	ldd	r19, Z+15	; 0x0f
   14632:	43 e0       	ldi	r20, 0x03	; 3
   14634:	50 e0       	ldi	r21, 0x00	; 0
   14636:	61 e0       	ldi	r22, 0x01	; 1
   14638:	70 e0       	ldi	r23, 0x00	; 0
   1463a:	8d e6       	ldi	r24, 0x6D	; 109
   1463c:	99 e1       	ldi	r25, 0x19	; 25
   1463e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14642:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14646:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1464a:	00 89       	ldd	r16, Z+16	; 0x10
   1464c:	11 89       	ldd	r17, Z+17	; 0x11
   1464e:	20 e0       	ldi	r18, 0x00	; 0
   14650:	30 e0       	ldi	r19, 0x00	; 0
   14652:	42 e0       	ldi	r20, 0x02	; 2
   14654:	50 e0       	ldi	r21, 0x00	; 0
   14656:	64 e0       	ldi	r22, 0x04	; 4
   14658:	70 e0       	ldi	r23, 0x00	; 0
   1465a:	8d e6       	ldi	r24, 0x6D	; 109
   1465c:	99 e1       	ldi	r25, 0x19	; 25
   1465e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14662:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14666:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1466a:	02 89       	ldd	r16, Z+18	; 0x12
   1466c:	10 e0       	ldi	r17, 0x00	; 0
   1466e:	20 e0       	ldi	r18, 0x00	; 0
   14670:	30 e0       	ldi	r19, 0x00	; 0
   14672:	41 e0       	ldi	r20, 0x01	; 1
   14674:	50 e0       	ldi	r21, 0x00	; 0
   14676:	66 e0       	ldi	r22, 0x06	; 6
   14678:	70 e0       	ldi	r23, 0x00	; 0
   1467a:	8d e6       	ldi	r24, 0x6D	; 109
   1467c:	99 e1       	ldi	r25, 0x19	; 25
   1467e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14682:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14686:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1468a:	03 89       	ldd	r16, Z+19	; 0x13
   1468c:	10 e0       	ldi	r17, 0x00	; 0
   1468e:	20 e0       	ldi	r18, 0x00	; 0
   14690:	30 e0       	ldi	r19, 0x00	; 0
   14692:	41 e0       	ldi	r20, 0x01	; 1
   14694:	50 e0       	ldi	r21, 0x00	; 0
   14696:	67 e0       	ldi	r22, 0x07	; 7
   14698:	70 e0       	ldi	r23, 0x00	; 0
   1469a:	8d e6       	ldi	r24, 0x6D	; 109
   1469c:	99 e1       	ldi	r25, 0x19	; 25
   1469e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   146a2:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   146a6:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   146aa:	04 89       	ldd	r16, Z+20	; 0x14
   146ac:	15 89       	ldd	r17, Z+21	; 0x15
   146ae:	20 e0       	ldi	r18, 0x00	; 0
   146b0:	30 e0       	ldi	r19, 0x00	; 0
   146b2:	42 e0       	ldi	r20, 0x02	; 2
   146b4:	50 e0       	ldi	r21, 0x00	; 0
   146b6:	68 e0       	ldi	r22, 0x08	; 8
   146b8:	70 e0       	ldi	r23, 0x00	; 0
   146ba:	8d e6       	ldi	r24, 0x6D	; 109
   146bc:	99 e1       	ldi	r25, 0x19	; 25
   146be:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   146c2:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   146c6:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   146ca:	06 89       	ldd	r16, Z+22	; 0x16
   146cc:	17 89       	ldd	r17, Z+23	; 0x17
   146ce:	20 e0       	ldi	r18, 0x00	; 0
   146d0:	30 e0       	ldi	r19, 0x00	; 0
   146d2:	42 e0       	ldi	r20, 0x02	; 2
   146d4:	50 e0       	ldi	r21, 0x00	; 0
   146d6:	6a e0       	ldi	r22, 0x0A	; 10
   146d8:	70 e0       	ldi	r23, 0x00	; 0
   146da:	8d e6       	ldi	r24, 0x6D	; 109
   146dc:	99 e1       	ldi	r25, 0x19	; 25
   146de:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   146e2:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   146e6:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   146ea:	00 8d       	ldd	r16, Z+24	; 0x18
   146ec:	11 8d       	ldd	r17, Z+25	; 0x19
   146ee:	20 e0       	ldi	r18, 0x00	; 0
   146f0:	30 e0       	ldi	r19, 0x00	; 0
   146f2:	42 e0       	ldi	r20, 0x02	; 2
   146f4:	50 e0       	ldi	r21, 0x00	; 0
   146f6:	6c e0       	ldi	r22, 0x0C	; 12
   146f8:	70 e0       	ldi	r23, 0x00	; 0
   146fa:	8d e6       	ldi	r24, 0x6D	; 109
   146fc:	99 e1       	ldi	r25, 0x19	; 25
   146fe:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14702:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14706:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1470a:	02 8d       	ldd	r16, Z+26	; 0x1a
   1470c:	13 8d       	ldd	r17, Z+27	; 0x1b
   1470e:	20 e0       	ldi	r18, 0x00	; 0
   14710:	30 e0       	ldi	r19, 0x00	; 0
   14712:	42 e0       	ldi	r20, 0x02	; 2
   14714:	50 e0       	ldi	r21, 0x00	; 0
   14716:	6e e0       	ldi	r22, 0x0E	; 14
   14718:	70 e0       	ldi	r23, 0x00	; 0
   1471a:	8d e6       	ldi	r24, 0x6D	; 109
   1471c:	99 e1       	ldi	r25, 0x19	; 25
   1471e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14722:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14726:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1472a:	04 8d       	ldd	r16, Z+28	; 0x1c
   1472c:	10 e0       	ldi	r17, 0x00	; 0
   1472e:	20 e0       	ldi	r18, 0x00	; 0
   14730:	30 e0       	ldi	r19, 0x00	; 0
   14732:	41 e0       	ldi	r20, 0x01	; 1
   14734:	50 e0       	ldi	r21, 0x00	; 0
   14736:	60 e1       	ldi	r22, 0x10	; 16
   14738:	70 e0       	ldi	r23, 0x00	; 0
   1473a:	8d e6       	ldi	r24, 0x6D	; 109
   1473c:	99 e1       	ldi	r25, 0x19	; 25
   1473e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14742:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14746:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1474a:	05 8d       	ldd	r16, Z+29	; 0x1d
   1474c:	10 e0       	ldi	r17, 0x00	; 0
   1474e:	20 e0       	ldi	r18, 0x00	; 0
   14750:	30 e0       	ldi	r19, 0x00	; 0
   14752:	41 e0       	ldi	r20, 0x01	; 1
   14754:	50 e0       	ldi	r21, 0x00	; 0
   14756:	61 e1       	ldi	r22, 0x11	; 17
   14758:	70 e0       	ldi	r23, 0x00	; 0
   1475a:	8d e6       	ldi	r24, 0x6D	; 109
   1475c:	99 e1       	ldi	r25, 0x19	; 25
   1475e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14762:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14766:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1476a:	06 8d       	ldd	r16, Z+30	; 0x1e
   1476c:	10 e0       	ldi	r17, 0x00	; 0
   1476e:	20 e0       	ldi	r18, 0x00	; 0
   14770:	30 e0       	ldi	r19, 0x00	; 0
   14772:	41 e0       	ldi	r20, 0x01	; 1
   14774:	50 e0       	ldi	r21, 0x00	; 0
   14776:	62 e1       	ldi	r22, 0x12	; 18
   14778:	70 e0       	ldi	r23, 0x00	; 0
   1477a:	8d e6       	ldi	r24, 0x6D	; 109
   1477c:	99 e1       	ldi	r25, 0x19	; 25
   1477e:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   14782:	8d e6       	ldi	r24, 0x6D	; 109
   14784:	99 e1       	ldi	r25, 0x19	; 25
   14786:	1f 91       	pop	r17
   14788:	0f 91       	pop	r16
   1478a:	08 95       	ret

0001478c <SS80VolumePack>:
   1478c:	0f 93       	push	r16
   1478e:	1f 93       	push	r17
   14790:	2d e0       	ldi	r18, 0x0D	; 13
   14792:	30 e0       	ldi	r19, 0x00	; 0
   14794:	fc 01       	movw	r30, r24
   14796:	31 83       	std	Z+1, r19	; 0x01
   14798:	20 83       	st	Z, r18
   1479a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   1479e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   147a2:	07 8d       	ldd	r16, Z+31	; 0x1f
   147a4:	10 a1       	ldd	r17, Z+32	; 0x20
   147a6:	21 a1       	ldd	r18, Z+33	; 0x21
   147a8:	32 a1       	ldd	r19, Z+34	; 0x22
   147aa:	43 e0       	ldi	r20, 0x03	; 3
   147ac:	50 e0       	ldi	r21, 0x00	; 0
   147ae:	60 e0       	ldi	r22, 0x00	; 0
   147b0:	70 e0       	ldi	r23, 0x00	; 0
   147b2:	80 e6       	ldi	r24, 0x60	; 96
   147b4:	99 e1       	ldi	r25, 0x19	; 25
   147b6:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   147ba:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   147be:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   147c2:	03 a1       	ldd	r16, Z+35	; 0x23
   147c4:	10 e0       	ldi	r17, 0x00	; 0
   147c6:	20 e0       	ldi	r18, 0x00	; 0
   147c8:	30 e0       	ldi	r19, 0x00	; 0
   147ca:	41 e0       	ldi	r20, 0x01	; 1
   147cc:	50 e0       	ldi	r21, 0x00	; 0
   147ce:	63 e0       	ldi	r22, 0x03	; 3
   147d0:	70 e0       	ldi	r23, 0x00	; 0
   147d2:	80 e6       	ldi	r24, 0x60	; 96
   147d4:	99 e1       	ldi	r25, 0x19	; 25
   147d6:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   147da:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   147de:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   147e2:	04 a1       	ldd	r16, Z+36	; 0x24
   147e4:	15 a1       	ldd	r17, Z+37	; 0x25
   147e6:	20 e0       	ldi	r18, 0x00	; 0
   147e8:	30 e0       	ldi	r19, 0x00	; 0
   147ea:	42 e0       	ldi	r20, 0x02	; 2
   147ec:	50 e0       	ldi	r21, 0x00	; 0
   147ee:	64 e0       	ldi	r22, 0x04	; 4
   147f0:	70 e0       	ldi	r23, 0x00	; 0
   147f2:	80 e6       	ldi	r24, 0x60	; 96
   147f4:	99 e1       	ldi	r25, 0x19	; 25
   147f6:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   147fa:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   147fe:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   14802:	06 a1       	ldd	r16, Z+38	; 0x26
   14804:	17 a1       	ldd	r17, Z+39	; 0x27
   14806:	20 a5       	ldd	r18, Z+40	; 0x28
   14808:	31 a5       	ldd	r19, Z+41	; 0x29
   1480a:	46 e0       	ldi	r20, 0x06	; 6
   1480c:	50 e0       	ldi	r21, 0x00	; 0
   1480e:	66 e0       	ldi	r22, 0x06	; 6
   14810:	70 e0       	ldi	r23, 0x00	; 0
   14812:	80 e6       	ldi	r24, 0x60	; 96
   14814:	99 e1       	ldi	r25, 0x19	; 25
   14816:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   1481a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   1481e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   14822:	02 a5       	ldd	r16, Z+42	; 0x2a
   14824:	10 e0       	ldi	r17, 0x00	; 0
   14826:	20 e0       	ldi	r18, 0x00	; 0
   14828:	30 e0       	ldi	r19, 0x00	; 0
   1482a:	41 e0       	ldi	r20, 0x01	; 1
   1482c:	50 e0       	ldi	r21, 0x00	; 0
   1482e:	6c e0       	ldi	r22, 0x0C	; 12
   14830:	70 e0       	ldi	r23, 0x00	; 0
   14832:	80 e6       	ldi	r24, 0x60	; 96
   14834:	99 e1       	ldi	r25, 0x19	; 25
   14836:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   1483a:	80 e6       	ldi	r24, 0x60	; 96
   1483c:	99 e1       	ldi	r25, 0x19	; 25
   1483e:	1f 91       	pop	r17
   14840:	0f 91       	pop	r16
   14842:	08 95       	ret

00014844 <SS80_test_extended_status>:
   14844:	9b 01       	movw	r18, r22
   14846:	43 e0       	ldi	r20, 0x03	; 3
   14848:	35 95       	asr	r19
   1484a:	27 95       	ror	r18
   1484c:	4a 95       	dec	r20
   1484e:	e1 f7       	brne	.-8      	; 0x14848 <SS80_test_extended_status+0x4>
   14850:	82 0f       	add	r24, r18
   14852:	93 1f       	adc	r25, r19
   14854:	67 70       	andi	r22, 0x07	; 7
   14856:	77 27       	eor	r23, r23
   14858:	20 e8       	ldi	r18, 0x80	; 128
   1485a:	30 e0       	ldi	r19, 0x00	; 0
   1485c:	02 c0       	rjmp	.+4      	; 0x14862 <SS80_test_extended_status+0x1e>
   1485e:	35 95       	asr	r19
   14860:	27 95       	ror	r18
   14862:	6a 95       	dec	r22
   14864:	e2 f7       	brpl	.-8      	; 0x1485e <SS80_test_extended_status+0x1a>
   14866:	fc 01       	movw	r30, r24
   14868:	80 81       	ld	r24, Z
   1486a:	28 23       	and	r18, r24
   1486c:	81 e0       	ldi	r24, 0x01	; 1
   1486e:	90 e0       	ldi	r25, 0x00	; 0
   14870:	11 f4       	brne	.+4      	; 0x14876 <SS80_test_extended_status+0x32>
   14872:	80 e0       	ldi	r24, 0x00	; 0
   14874:	90 e0       	ldi	r25, 0x00	; 0
   14876:	08 95       	ret

00014878 <SS80_display_extended_status>:
   14878:	6f 92       	push	r6
   1487a:	7f 92       	push	r7
   1487c:	8f 92       	push	r8
   1487e:	ef 92       	push	r14
   14880:	ff 92       	push	r15
   14882:	0f 93       	push	r16
   14884:	1f 93       	push	r17
   14886:	cf 93       	push	r28
   14888:	df 93       	push	r29
   1488a:	ad b7       	in	r26, 0x3d	; 61
   1488c:	be b7       	in	r27, 0x3e	; 62
   1488e:	17 97       	sbiw	r26, 0x07	; 7
   14890:	0f b6       	in	r0, 0x3f	; 63
   14892:	f8 94       	cli
   14894:	be bf       	out	0x3e, r27	; 62
   14896:	0f be       	out	0x3f, r0	; 63
   14898:	ad bf       	out	0x3d, r26	; 61
   1489a:	fc 01       	movw	r30, r24
   1489c:	ac 01       	movw	r20, r24
   1489e:	48 5f       	subi	r20, 0xF8	; 248
   148a0:	5f 4f       	sbci	r21, 0xFF	; 255
   148a2:	20 e0       	ldi	r18, 0x00	; 0
   148a4:	30 e0       	ldi	r19, 0x00	; 0
   148a6:	a1 91       	ld	r26, Z+
   148a8:	aa 23       	and	r26, r26
   148aa:	11 f0       	breq	.+4      	; 0x148b0 <SS80_display_extended_status+0x38>
   148ac:	21 e0       	ldi	r18, 0x01	; 1
   148ae:	30 e0       	ldi	r19, 0x00	; 0
   148b0:	e4 17       	cp	r30, r20
   148b2:	f5 07       	cpc	r31, r21
   148b4:	c1 f7       	brne	.-16     	; 0x148a6 <SS80_display_extended_status+0x2e>
   148b6:	23 2b       	or	r18, r19
   148b8:	81 f1       	breq	.+96     	; 0x1491a <SS80_display_extended_status+0xa2>
   148ba:	ec 01       	movw	r28, r24
   148bc:	ed b7       	in	r30, 0x3d	; 61
   148be:	fe b7       	in	r31, 0x3e	; 62
   148c0:	75 83       	std	Z+5, r23	; 0x05
   148c2:	64 83       	std	Z+4, r22	; 0x04
   148c4:	88 e9       	ldi	r24, 0x98	; 152
   148c6:	92 e2       	ldi	r25, 0x22	; 34
   148c8:	a0 e0       	ldi	r26, 0x00	; 0
   148ca:	81 83       	std	Z+1, r24	; 0x01
   148cc:	92 83       	std	Z+2, r25	; 0x02
   148ce:	a3 83       	std	Z+3, r26	; 0x03
   148d0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   148d4:	05 e8       	ldi	r16, 0x85	; 133
   148d6:	12 e0       	ldi	r17, 0x02	; 2
   148d8:	8d e8       	ldi	r24, 0x8D	; 141
   148da:	92 e2       	ldi	r25, 0x22	; 34
   148dc:	3c 01       	movw	r6, r24
   148de:	81 2c       	mov	r8, r1
   148e0:	f8 01       	movw	r30, r16
   148e2:	e0 80       	ld	r14, Z
   148e4:	f1 80       	ldd	r15, Z+1	; 0x01
   148e6:	ff ef       	ldi	r31, 0xFF	; 255
   148e8:	ef 16       	cp	r14, r31
   148ea:	ff 06       	cpc	r15, r31
   148ec:	b1 f0       	breq	.+44     	; 0x1491a <SS80_display_extended_status+0xa2>
   148ee:	b7 01       	movw	r22, r14
   148f0:	ce 01       	movw	r24, r28
   148f2:	a8 df       	rcall	.-176    	; 0x14844 <SS80_test_extended_status>
   148f4:	89 2b       	or	r24, r25
   148f6:	71 f0       	breq	.+28     	; 0x14914 <SS80_display_extended_status+0x9c>
   148f8:	f8 01       	movw	r30, r16
   148fa:	82 81       	ldd	r24, Z+2	; 0x02
   148fc:	93 81       	ldd	r25, Z+3	; 0x03
   148fe:	ed b7       	in	r30, 0x3d	; 61
   14900:	fe b7       	in	r31, 0x3e	; 62
   14902:	97 83       	std	Z+7, r25	; 0x07
   14904:	86 83       	std	Z+6, r24	; 0x06
   14906:	f5 82       	std	Z+5, r15	; 0x05
   14908:	e4 82       	std	Z+4, r14	; 0x04
   1490a:	61 82       	std	Z+1, r6	; 0x01
   1490c:	72 82       	std	Z+2, r7	; 0x02
   1490e:	83 82       	std	Z+3, r8	; 0x03
   14910:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14914:	0c 5f       	subi	r16, 0xFC	; 252
   14916:	1f 4f       	sbci	r17, 0xFF	; 255
   14918:	e3 cf       	rjmp	.-58     	; 0x148e0 <SS80_display_extended_status+0x68>
   1491a:	ad b7       	in	r26, 0x3d	; 61
   1491c:	be b7       	in	r27, 0x3e	; 62
   1491e:	17 96       	adiw	r26, 0x07	; 7
   14920:	0f b6       	in	r0, 0x3f	; 63
   14922:	f8 94       	cli
   14924:	be bf       	out	0x3e, r27	; 62
   14926:	0f be       	out	0x3f, r0	; 63
   14928:	ad bf       	out	0x3d, r26	; 61
   1492a:	df 91       	pop	r29
   1492c:	cf 91       	pop	r28
   1492e:	1f 91       	pop	r17
   14930:	0f 91       	pop	r16
   14932:	ff 90       	pop	r15
   14934:	ef 90       	pop	r14
   14936:	8f 90       	pop	r8
   14938:	7f 90       	pop	r7
   1493a:	6f 90       	pop	r6
   1493c:	08 95       	ret

0001493e <SS80_send_status>:
   1493e:	a9 e1       	ldi	r26, 0x19	; 25
   14940:	b0 e0       	ldi	r27, 0x00	; 0
   14942:	e5 ea       	ldi	r30, 0xA5	; 165
   14944:	f4 ea       	ldi	r31, 0xA4	; 164
   14946:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
   1494a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1494e:	85 ff       	sbrs	r24, 5
   14950:	0a c0       	rjmp	.+20     	; 0x14966 <SS80_send_status+0x28>
   14952:	89 e7       	ldi	r24, 0x79	; 121
   14954:	92 e2       	ldi	r25, 0x22	; 34
   14956:	a0 e0       	ldi	r26, 0x00	; 0
   14958:	ed b7       	in	r30, 0x3d	; 61
   1495a:	fe b7       	in	r31, 0x3e	; 62
   1495c:	81 83       	std	Z+1, r24	; 0x01
   1495e:	92 83       	std	Z+2, r25	; 0x02
   14960:	a3 83       	std	Z+3, r26	; 0x03
   14962:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14966:	ce 01       	movw	r24, r28
   14968:	04 96       	adiw	r24, 0x04	; 4
   1496a:	7c 01       	movw	r14, r24
   1496c:	84 e1       	ldi	r24, 0x14	; 20
   1496e:	f7 01       	movw	r30, r14
   14970:	11 92       	st	Z+, r1
   14972:	8a 95       	dec	r24
   14974:	e9 f7       	brne	.-6      	; 0x14970 <SS80_send_status+0x32>
   14976:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   1497a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   1497e:	86 81       	ldd	r24, Z+6	; 0x06
   14980:	20 e1       	ldi	r18, 0x10	; 16
   14982:	82 9f       	mul	r24, r18
   14984:	c0 01       	movw	r24, r0
   14986:	11 24       	eor	r1, r1
   14988:	95 81       	ldd	r25, Z+5	; 0x05
   1498a:	9f 70       	andi	r25, 0x0F	; 15
   1498c:	89 2b       	or	r24, r25
   1498e:	8c 83       	std	Y+4, r24	; 0x04
   14990:	8f ef       	ldi	r24, 0xFF	; 255
   14992:	8d 83       	std	Y+5, r24	; 0x05
   14994:	83 81       	ldd	r24, Z+3	; 0x03
   14996:	86 ff       	sbrs	r24, 6
   14998:	02 c0       	rjmp	.+4      	; 0x1499e <SS80_send_status+0x60>
   1499a:	92 e0       	ldi	r25, 0x02	; 2
   1499c:	9e 83       	std	Y+6, r25	; 0x06
   1499e:	82 ff       	sbrs	r24, 2
   149a0:	03 c0       	rjmp	.+6      	; 0x149a8 <SS80_send_status+0x6a>
   149a2:	9e 81       	ldd	r25, Y+6	; 0x06
   149a4:	91 60       	ori	r25, 0x01	; 1
   149a6:	9e 83       	std	Y+6, r25	; 0x06
   149a8:	80 ff       	sbrs	r24, 0
   149aa:	02 c0       	rjmp	.+4      	; 0x149b0 <SS80_send_status+0x72>
   149ac:	82 e0       	ldi	r24, 0x02	; 2
   149ae:	88 87       	std	Y+8, r24	; 0x08
   149b0:	83 81       	ldd	r24, Z+3	; 0x03
   149b2:	81 ff       	sbrs	r24, 1
   149b4:	03 c0       	rjmp	.+6      	; 0x149bc <SS80_send_status+0x7e>
   149b6:	88 85       	ldd	r24, Y+8	; 0x08
   149b8:	82 60       	ori	r24, 0x02	; 2
   149ba:	88 87       	std	Y+8, r24	; 0x08
   149bc:	83 81       	ldd	r24, Z+3	; 0x03
   149be:	83 ff       	sbrs	r24, 3
   149c0:	02 c0       	rjmp	.+4      	; 0x149c6 <SS80_send_status+0x88>
   149c2:	88 e0       	ldi	r24, 0x08	; 8
   149c4:	8a 87       	std	Y+10, r24	; 0x0a
   149c6:	83 81       	ldd	r24, Z+3	; 0x03
   149c8:	94 81       	ldd	r25, Z+4	; 0x04
   149ca:	89 2b       	or	r24, r25
   149cc:	59 f4       	brne	.+22     	; 0x149e4 <SS80_send_status+0xa6>
   149ce:	07 81       	ldd	r16, Z+7	; 0x07
   149d0:	10 85       	ldd	r17, Z+8	; 0x08
   149d2:	21 85       	ldd	r18, Z+9	; 0x09
   149d4:	32 85       	ldd	r19, Z+10	; 0x0a
   149d6:	46 e0       	ldi	r20, 0x06	; 6
   149d8:	50 e0       	ldi	r21, 0x00	; 0
   149da:	6a e0       	ldi	r22, 0x0A	; 10
   149dc:	70 e0       	ldi	r23, 0x00	; 0
   149de:	c7 01       	movw	r24, r14
   149e0:	0e 94 fc bc 	call	0x179f8	; 0x179f8 <V2B_MSB>
   149e4:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   149e8:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   149ec:	83 81       	ldd	r24, Z+3	; 0x03
   149ee:	94 81       	ldd	r25, Z+4	; 0x04
   149f0:	89 2b       	or	r24, r25
   149f2:	11 f0       	breq	.+4      	; 0x149f8 <SS80_send_status+0xba>
   149f4:	81 e0       	ldi	r24, 0x01	; 1
   149f6:	82 83       	std	Z+2, r24	; 0x02
   149f8:	80 e0       	ldi	r24, 0x00	; 0
   149fa:	91 e0       	ldi	r25, 0x01	; 1
   149fc:	99 8f       	std	Y+25, r25	; 0x19
   149fe:	88 8f       	std	Y+24, r24	; 0x18
   14a00:	ae 01       	movw	r20, r28
   14a02:	48 5e       	subi	r20, 0xE8	; 232
   14a04:	5f 4f       	sbci	r21, 0xFF	; 255
   14a06:	64 e1       	ldi	r22, 0x14	; 20
   14a08:	70 e0       	ldi	r23, 0x00	; 0
   14a0a:	c7 01       	movw	r24, r14
   14a0c:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   14a10:	44 97       	sbiw	r24, 0x14	; 20
   14a12:	71 f0       	breq	.+28     	; 0x14a30 <SS80_send_status+0xf2>
   14a14:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14a18:	81 ff       	sbrs	r24, 1
   14a1a:	0a c0       	rjmp	.+20     	; 0x14a30 <SS80_send_status+0xf2>
   14a1c:	8e e5       	ldi	r24, 0x5E	; 94
   14a1e:	92 e2       	ldi	r25, 0x22	; 34
   14a20:	a0 e0       	ldi	r26, 0x00	; 0
   14a22:	ed b7       	in	r30, 0x3d	; 61
   14a24:	fe b7       	in	r31, 0x3e	; 62
   14a26:	81 83       	std	Z+1, r24	; 0x01
   14a28:	92 83       	std	Z+2, r25	; 0x02
   14a2a:	a3 83       	std	Z+3, r26	; 0x03
   14a2c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14a30:	88 8d       	ldd	r24, Y+24	; 0x18
   14a32:	99 8d       	ldd	r25, Y+25	; 0x19
   14a34:	88 27       	eor	r24, r24
   14a36:	90 7d       	andi	r25, 0xD0	; 208
   14a38:	69 96       	adiw	r28, 0x19	; 25
   14a3a:	e6 e0       	ldi	r30, 0x06	; 6
   14a3c:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00014a40 <SS80_describe>:
   14a40:	a7 e0       	ldi	r26, 0x07	; 7
   14a42:	b0 e0       	ldi	r27, 0x00	; 0
   14a44:	e6 e2       	ldi	r30, 0x26	; 38
   14a46:	f5 ea       	ldi	r31, 0xA5	; 165
   14a48:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   14a4c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14a50:	85 ff       	sbrs	r24, 5
   14a52:	0a c0       	rjmp	.+20     	; 0x14a68 <SS80_describe+0x28>
   14a54:	8d e4       	ldi	r24, 0x4D	; 77
   14a56:	92 e2       	ldi	r25, 0x22	; 34
   14a58:	a0 e0       	ldi	r26, 0x00	; 0
   14a5a:	ed b7       	in	r30, 0x3d	; 61
   14a5c:	fe b7       	in	r31, 0x3e	; 62
   14a5e:	81 83       	std	Z+1, r24	; 0x01
   14a60:	92 83       	std	Z+2, r25	; 0x02
   14a62:	a3 83       	std	Z+3, r26	; 0x03
   14a64:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14a68:	1f 82       	std	Y+7, r1	; 0x07
   14a6a:	1e 82       	std	Y+6, r1	; 0x06
   14a6c:	ce 01       	movw	r24, r28
   14a6e:	04 96       	adiw	r24, 0x04	; 4
   14a70:	85 dd       	rcall	.-1270   	; 0x1457c <SS80ControllerPack>
   14a72:	6c 81       	ldd	r22, Y+4	; 0x04
   14a74:	7d 81       	ldd	r23, Y+5	; 0x05
   14a76:	ae 01       	movw	r20, r28
   14a78:	4a 5f       	subi	r20, 0xFA	; 250
   14a7a:	5f 4f       	sbci	r21, 0xFF	; 255
   14a7c:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   14a80:	2c 81       	ldd	r18, Y+4	; 0x04
   14a82:	3d 81       	ldd	r19, Y+5	; 0x05
   14a84:	82 17       	cp	r24, r18
   14a86:	93 07       	cpc	r25, r19
   14a88:	39 f0       	breq	.+14     	; 0x14a98 <SS80_describe+0x58>
   14a8a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14a8e:	81 ff       	sbrs	r24, 1
   14a90:	3c c0       	rjmp	.+120    	; 0x14b0a <SS80_describe+0xca>
   14a92:	8a e2       	ldi	r24, 0x2A	; 42
   14a94:	92 e2       	ldi	r25, 0x22	; 34
   14a96:	31 c0       	rjmp	.+98     	; 0x14afa <SS80_describe+0xba>
   14a98:	1f 82       	std	Y+7, r1	; 0x07
   14a9a:	1e 82       	std	Y+6, r1	; 0x06
   14a9c:	ce 01       	movw	r24, r28
   14a9e:	04 96       	adiw	r24, 0x04	; 4
   14aa0:	a9 dd       	rcall	.-1198   	; 0x145f4 <SS80UnitPack>
   14aa2:	6c 81       	ldd	r22, Y+4	; 0x04
   14aa4:	7d 81       	ldd	r23, Y+5	; 0x05
   14aa6:	ae 01       	movw	r20, r28
   14aa8:	4a 5f       	subi	r20, 0xFA	; 250
   14aaa:	5f 4f       	sbci	r21, 0xFF	; 255
   14aac:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   14ab0:	2c 81       	ldd	r18, Y+4	; 0x04
   14ab2:	3d 81       	ldd	r19, Y+5	; 0x05
   14ab4:	82 17       	cp	r24, r18
   14ab6:	93 07       	cpc	r25, r19
   14ab8:	39 f0       	breq	.+14     	; 0x14ac8 <SS80_describe+0x88>
   14aba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14abe:	81 ff       	sbrs	r24, 1
   14ac0:	24 c0       	rjmp	.+72     	; 0x14b0a <SS80_describe+0xca>
   14ac2:	8d e0       	ldi	r24, 0x0D	; 13
   14ac4:	92 e2       	ldi	r25, 0x22	; 34
   14ac6:	19 c0       	rjmp	.+50     	; 0x14afa <SS80_describe+0xba>
   14ac8:	80 e0       	ldi	r24, 0x00	; 0
   14aca:	91 e0       	ldi	r25, 0x01	; 1
   14acc:	9f 83       	std	Y+7, r25	; 0x07
   14ace:	8e 83       	std	Y+6, r24	; 0x06
   14ad0:	ce 01       	movw	r24, r28
   14ad2:	04 96       	adiw	r24, 0x04	; 4
   14ad4:	5b de       	rcall	.-842    	; 0x1478c <SS80VolumePack>
   14ad6:	6c 81       	ldd	r22, Y+4	; 0x04
   14ad8:	7d 81       	ldd	r23, Y+5	; 0x05
   14ada:	ae 01       	movw	r20, r28
   14adc:	4a 5f       	subi	r20, 0xFA	; 250
   14ade:	5f 4f       	sbci	r21, 0xFF	; 255
   14ae0:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   14ae4:	2c 81       	ldd	r18, Y+4	; 0x04
   14ae6:	3d 81       	ldd	r19, Y+5	; 0x05
   14ae8:	82 17       	cp	r24, r18
   14aea:	93 07       	cpc	r25, r19
   14aec:	99 f0       	breq	.+38     	; 0x14b14 <SS80_describe+0xd4>
   14aee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14af2:	81 ff       	sbrs	r24, 1
   14af4:	0a c0       	rjmp	.+20     	; 0x14b0a <SS80_describe+0xca>
   14af6:	8e ee       	ldi	r24, 0xEE	; 238
   14af8:	91 e2       	ldi	r25, 0x21	; 33
   14afa:	a0 e0       	ldi	r26, 0x00	; 0
   14afc:	ed b7       	in	r30, 0x3d	; 61
   14afe:	fe b7       	in	r31, 0x3e	; 62
   14b00:	81 83       	std	Z+1, r24	; 0x01
   14b02:	92 83       	std	Z+2, r25	; 0x02
   14b04:	a3 83       	std	Z+3, r26	; 0x03
   14b06:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14b0a:	8e 81       	ldd	r24, Y+6	; 0x06
   14b0c:	9f 81       	ldd	r25, Y+7	; 0x07
   14b0e:	88 27       	eor	r24, r24
   14b10:	90 7d       	andi	r25, 0xD0	; 208
   14b12:	02 c0       	rjmp	.+4      	; 0x14b18 <SS80_describe+0xd8>
   14b14:	80 e0       	ldi	r24, 0x00	; 0
   14b16:	90 e0       	ldi	r25, 0x00	; 0
   14b18:	27 96       	adiw	r28, 0x07	; 7
   14b1a:	e2 e0       	ldi	r30, 0x02	; 2
   14b1c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00014b20 <SS80_Check_Unit>:
   14b20:	00 d0       	rcall	.+0      	; 0x14b22 <SS80_Check_Unit+0x2>
   14b22:	00 d0       	rcall	.+0      	; 0x14b24 <SS80_Check_Unit+0x4>
   14b24:	1f 92       	push	r1
   14b26:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14b2a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14b2e:	88 23       	and	r24, r24
   14b30:	c9 f0       	breq	.+50     	; 0x14b64 <SS80_Check_Unit+0x44>
   14b32:	8f 30       	cpi	r24, 0x0F	; 15
   14b34:	b9 f0       	breq	.+46     	; 0x14b64 <SS80_Check_Unit+0x44>
   14b36:	23 81       	ldd	r18, Z+3	; 0x03
   14b38:	34 81       	ldd	r19, Z+4	; 0x04
   14b3a:	20 64       	ori	r18, 0x40	; 64
   14b3c:	34 83       	std	Z+4, r19	; 0x04
   14b3e:	23 83       	std	Z+3, r18	; 0x03
   14b40:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   14b44:	91 ff       	sbrs	r25, 1
   14b46:	0f c0       	rjmp	.+30     	; 0x14b66 <SS80_Check_Unit+0x46>
   14b48:	90 e0       	ldi	r25, 0x00	; 0
   14b4a:	ed b7       	in	r30, 0x3d	; 61
   14b4c:	fe b7       	in	r31, 0x3e	; 62
   14b4e:	95 83       	std	Z+5, r25	; 0x05
   14b50:	84 83       	std	Z+4, r24	; 0x04
   14b52:	86 ed       	ldi	r24, 0xD6	; 214
   14b54:	91 e2       	ldi	r25, 0x21	; 33
   14b56:	a0 e0       	ldi	r26, 0x00	; 0
   14b58:	81 83       	std	Z+1, r24	; 0x01
   14b5a:	92 83       	std	Z+2, r25	; 0x02
   14b5c:	a3 83       	std	Z+3, r26	; 0x03
   14b5e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14b62:	01 c0       	rjmp	.+2      	; 0x14b66 <SS80_Check_Unit+0x46>
   14b64:	85 83       	std	Z+5, r24	; 0x05
   14b66:	0f 90       	pop	r0
   14b68:	0f 90       	pop	r0
   14b6a:	0f 90       	pop	r0
   14b6c:	0f 90       	pop	r0
   14b6e:	0f 90       	pop	r0
   14b70:	08 95       	ret

00014b72 <SS80_Check_Volume>:
   14b72:	00 d0       	rcall	.+0      	; 0x14b74 <SS80_Check_Volume+0x2>
   14b74:	00 d0       	rcall	.+0      	; 0x14b76 <SS80_Check_Volume+0x4>
   14b76:	1f 92       	push	r1
   14b78:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14b7c:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14b80:	88 23       	and	r24, r24
   14b82:	b9 f0       	breq	.+46     	; 0x14bb2 <SS80_Check_Volume+0x40>
   14b84:	23 81       	ldd	r18, Z+3	; 0x03
   14b86:	34 81       	ldd	r19, Z+4	; 0x04
   14b88:	20 64       	ori	r18, 0x40	; 64
   14b8a:	34 83       	std	Z+4, r19	; 0x04
   14b8c:	23 83       	std	Z+3, r18	; 0x03
   14b8e:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   14b92:	91 ff       	sbrs	r25, 1
   14b94:	0f c0       	rjmp	.+30     	; 0x14bb4 <SS80_Check_Volume+0x42>
   14b96:	90 e0       	ldi	r25, 0x00	; 0
   14b98:	ed b7       	in	r30, 0x3d	; 61
   14b9a:	fe b7       	in	r31, 0x3e	; 62
   14b9c:	95 83       	std	Z+5, r25	; 0x05
   14b9e:	84 83       	std	Z+4, r24	; 0x04
   14ba0:	8c eb       	ldi	r24, 0xBC	; 188
   14ba2:	91 e2       	ldi	r25, 0x21	; 33
   14ba4:	a0 e0       	ldi	r26, 0x00	; 0
   14ba6:	81 83       	std	Z+1, r24	; 0x01
   14ba8:	92 83       	std	Z+2, r25	; 0x02
   14baa:	a3 83       	std	Z+3, r26	; 0x03
   14bac:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14bb0:	01 c0       	rjmp	.+2      	; 0x14bb4 <SS80_Check_Volume+0x42>
   14bb2:	16 82       	std	Z+6, r1	; 0x06
   14bb4:	0f 90       	pop	r0
   14bb6:	0f 90       	pop	r0
   14bb8:	0f 90       	pop	r0
   14bba:	0f 90       	pop	r0
   14bbc:	0f 90       	pop	r0
   14bbe:	08 95       	ret

00014bc0 <SS80_Command_State>:
   14bc0:	2f 92       	push	r2
   14bc2:	3f 92       	push	r3
   14bc4:	4f 92       	push	r4
   14bc6:	6f 92       	push	r6
   14bc8:	7f 92       	push	r7
   14bca:	8f 92       	push	r8
   14bcc:	af 92       	push	r10
   14bce:	bf 92       	push	r11
   14bd0:	cf 92       	push	r12
   14bd2:	ef 92       	push	r14
   14bd4:	ff 92       	push	r15
   14bd6:	0f 93       	push	r16
   14bd8:	1f 93       	push	r17
   14bda:	cf 93       	push	r28
   14bdc:	df 93       	push	r29
   14bde:	cd b7       	in	r28, 0x3d	; 61
   14be0:	de b7       	in	r29, 0x3e	; 62
   14be2:	66 97       	sbiw	r28, 0x16	; 22
   14be4:	0f b6       	in	r0, 0x3f	; 63
   14be6:	f8 94       	cli
   14be8:	de bf       	out	0x3e, r29	; 62
   14bea:	0f be       	out	0x3f, r0	; 63
   14bec:	cd bf       	out	0x3d, r28	; 61
   14bee:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   14bf2:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   14bf6:	81 81       	ldd	r24, Z+1	; 0x01
   14bf8:	90 e0       	ldi	r25, 0x00	; 0
   14bfa:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
   14bfe:	80 e0       	ldi	r24, 0x00	; 0
   14c00:	91 e0       	ldi	r25, 0x01	; 1
   14c02:	99 87       	std	Y+9, r25	; 0x09
   14c04:	88 87       	std	Y+8, r24	; 0x08
   14c06:	ae 01       	movw	r20, r28
   14c08:	48 5f       	subi	r20, 0xF8	; 248
   14c0a:	5f 4f       	sbci	r21, 0xFF	; 255
   14c0c:	60 e0       	ldi	r22, 0x00	; 0
   14c0e:	72 e0       	ldi	r23, 0x02	; 2
   14c10:	8b ec       	ldi	r24, 0xCB	; 203
   14c12:	9c e1       	ldi	r25, 0x1C	; 28
   14c14:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
   14c18:	9b 87       	std	Y+11, r25	; 0x0b
   14c1a:	8a 87       	std	Y+10, r24	; 0x0a
   14c1c:	88 85       	ldd	r24, Y+8	; 0x08
   14c1e:	99 85       	ldd	r25, Y+9	; 0x09
   14c20:	9c 01       	movw	r18, r24
   14c22:	22 27       	eor	r18, r18
   14c24:	30 7d       	andi	r19, 0xD0	; 208
   14c26:	23 2b       	or	r18, r19
   14c28:	79 f0       	breq	.+30     	; 0x14c48 <SS80_Command_State+0x88>
   14c2a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14c2e:	81 ff       	sbrs	r24, 1
   14c30:	21 c2       	rjmp	.+1090   	; 0x15074 <SS80_Command_State+0x4b4>
   14c32:	86 e9       	ldi	r24, 0x96	; 150
   14c34:	91 e2       	ldi	r25, 0x21	; 33
   14c36:	a0 e0       	ldi	r26, 0x00	; 0
   14c38:	ed b7       	in	r30, 0x3d	; 61
   14c3a:	fe b7       	in	r31, 0x3e	; 62
   14c3c:	81 83       	std	Z+1, r24	; 0x01
   14c3e:	92 83       	std	Z+2, r25	; 0x02
   14c40:	a3 83       	std	Z+3, r26	; 0x03
   14c42:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14c46:	16 c2       	rjmp	.+1068   	; 0x15074 <SS80_Command_State+0x4b4>
   14c48:	2a 85       	ldd	r18, Y+10	; 0x0a
   14c4a:	3b 85       	ldd	r19, Y+11	; 0x0b
   14c4c:	23 2b       	or	r18, r19
   14c4e:	09 f4       	brne	.+2      	; 0x14c52 <SS80_Command_State+0x92>
   14c50:	16 c2       	rjmp	.+1068   	; 0x1507e <SS80_Command_State+0x4be>
   14c52:	90 fd       	sbrc	r25, 0
   14c54:	0e c0       	rjmp	.+28     	; 0x14c72 <SS80_Command_State+0xb2>
   14c56:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14c5a:	81 ff       	sbrs	r24, 1
   14c5c:	0a c0       	rjmp	.+20     	; 0x14c72 <SS80_Command_State+0xb2>
   14c5e:	8d e7       	ldi	r24, 0x7D	; 125
   14c60:	91 e2       	ldi	r25, 0x21	; 33
   14c62:	a0 e0       	ldi	r26, 0x00	; 0
   14c64:	ed b7       	in	r30, 0x3d	; 61
   14c66:	fe b7       	in	r31, 0x3e	; 62
   14c68:	81 83       	std	Z+1, r24	; 0x01
   14c6a:	92 83       	std	Z+2, r25	; 0x02
   14c6c:	a3 83       	std	Z+3, r26	; 0x03
   14c6e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14c72:	e1 2c       	mov	r14, r1
   14c74:	f1 2c       	mov	r15, r1
   14c76:	81 e8       	ldi	r24, 0x81	; 129
   14c78:	90 e2       	ldi	r25, 0x20	; 32
   14c7a:	9c 01       	movw	r18, r24
   14c7c:	40 e0       	ldi	r20, 0x00	; 0
   14c7e:	2e 87       	std	Y+14, r18	; 0x0e
   14c80:	3f 87       	std	Y+15, r19	; 0x0f
   14c82:	48 8b       	std	Y+16, r20	; 0x10
   14c84:	86 ea       	ldi	r24, 0xA6	; 166
   14c86:	90 e2       	ldi	r25, 0x20	; 32
   14c88:	9c 01       	movw	r18, r24
   14c8a:	40 e0       	ldi	r20, 0x00	; 0
   14c8c:	29 8b       	std	Y+17, r18	; 0x11
   14c8e:	3a 8b       	std	Y+18, r19	; 0x12
   14c90:	4b 8b       	std	Y+19, r20	; 0x13
   14c92:	80 ec       	ldi	r24, 0xC0	; 192
   14c94:	90 e2       	ldi	r25, 0x20	; 32
   14c96:	9c 01       	movw	r18, r24
   14c98:	40 e0       	ldi	r20, 0x00	; 0
   14c9a:	2c 8b       	std	Y+20, r18	; 0x14
   14c9c:	3d 8b       	std	Y+21, r19	; 0x15
   14c9e:	4e 8b       	std	Y+22, r20	; 0x16
   14ca0:	86 ed       	ldi	r24, 0xD6	; 214
   14ca2:	90 e2       	ldi	r25, 0x20	; 32
   14ca4:	3c 01       	movw	r6, r24
   14ca6:	81 2c       	mov	r8, r1
   14ca8:	84 ee       	ldi	r24, 0xE4	; 228
   14caa:	90 e2       	ldi	r25, 0x20	; 32
   14cac:	5c 01       	movw	r10, r24
   14cae:	c1 2c       	mov	r12, r1
   14cb0:	80 e0       	ldi	r24, 0x00	; 0
   14cb2:	91 e2       	ldi	r25, 0x21	; 33
   14cb4:	1c 01       	movw	r2, r24
   14cb6:	41 2c       	mov	r4, r1
   14cb8:	2a 85       	ldd	r18, Y+10	; 0x0a
   14cba:	3b 85       	ldd	r19, Y+11	; 0x0b
   14cbc:	87 01       	movw	r16, r14
   14cbe:	e2 16       	cp	r14, r18
   14cc0:	f3 06       	cpc	r15, r19
   14cc2:	0c f0       	brlt	.+2      	; 0x14cc6 <SS80_Command_State+0x106>
   14cc4:	b6 c1       	rjmp	.+876    	; 0x15032 <SS80_Command_State+0x472>
   14cc6:	0f 5f       	subi	r16, 0xFF	; 255
   14cc8:	1f 4f       	sbci	r17, 0xFF	; 255
   14cca:	f7 01       	movw	r30, r14
   14ccc:	e5 53       	subi	r30, 0x35	; 53
   14cce:	f3 4e       	sbci	r31, 0xE3	; 227
   14cd0:	80 81       	ld	r24, Z
   14cd2:	28 2f       	mov	r18, r24
   14cd4:	30 e0       	ldi	r19, 0x00	; 0
   14cd6:	a9 01       	movw	r20, r18
   14cd8:	40 52       	subi	r20, 0x20	; 32
   14cda:	51 09       	sbc	r21, r1
   14cdc:	40 31       	cpi	r20, 0x10	; 16
   14cde:	51 05       	cpc	r21, r1
   14ce0:	98 f4       	brcc	.+38     	; 0x14d08 <SS80_Command_State+0x148>
   14ce2:	80 52       	subi	r24, 0x20	; 32
   14ce4:	1d df       	rcall	.-454    	; 0x14b20 <SS80_Check_Unit>
   14ce6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14cea:	85 ff       	sbrs	r24, 5
   14cec:	a0 c1       	rjmp	.+832    	; 0x1502e <SS80_Command_State+0x46e>
   14cee:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14cf2:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14cf6:	85 81       	ldd	r24, Z+5	; 0x05
   14cf8:	90 e0       	ldi	r25, 0x00	; 0
   14cfa:	ed b7       	in	r30, 0x3d	; 61
   14cfc:	fe b7       	in	r31, 0x3e	; 62
   14cfe:	95 83       	std	Z+5, r25	; 0x05
   14d00:	84 83       	std	Z+4, r24	; 0x04
   14d02:	87 e6       	ldi	r24, 0x67	; 103
   14d04:	91 e2       	ldi	r25, 0x21	; 33
   14d06:	19 c0       	rjmp	.+50     	; 0x14d3a <SS80_Command_State+0x17a>
   14d08:	a9 01       	movw	r20, r18
   14d0a:	40 54       	subi	r20, 0x40	; 64
   14d0c:	51 09       	sbc	r21, r1
   14d0e:	40 31       	cpi	r20, 0x10	; 16
   14d10:	51 05       	cpc	r21, r1
   14d12:	d0 f4       	brcc	.+52     	; 0x14d48 <SS80_Command_State+0x188>
   14d14:	80 54       	subi	r24, 0x40	; 64
   14d16:	2d df       	rcall	.-422    	; 0x14b72 <SS80_Check_Volume>
   14d18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14d1c:	85 ff       	sbrs	r24, 5
   14d1e:	87 c1       	rjmp	.+782    	; 0x1502e <SS80_Command_State+0x46e>
   14d20:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14d24:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14d28:	86 81       	ldd	r24, Z+6	; 0x06
   14d2a:	90 e0       	ldi	r25, 0x00	; 0
   14d2c:	ed b7       	in	r30, 0x3d	; 61
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   14d2e:	fe b7       	in	r31, 0x3e	; 62
   14d30:	95 83       	std	Z+5, r25	; 0x05
   14d32:	84 83       	std	Z+4, r24	; 0x04
   14d34:	2e e4       	ldi	r18, 0x4E	; 78
   14d36:	31 e2       	ldi	r19, 0x21	; 33
   14d38:	c9 01       	movw	r24, r18
   14d3a:	a0 e0       	ldi	r26, 0x00	; 0
   14d3c:	81 83       	std	Z+1, r24	; 0x01
   14d3e:	92 83       	std	Z+2, r25	; 0x02
   14d40:	a3 83       	std	Z+3, r26	; 0x03
   14d42:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14d46:	73 c1       	rjmp	.+742    	; 0x1502e <SS80_Command_State+0x46e>
   14d48:	21 15       	cp	r18, r1
   14d4a:	31 05       	cpc	r19, r1
   14d4c:	79 f4       	brne	.+30     	; 0x14d6c <SS80_Command_State+0x1ac>
   14d4e:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14d52:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14d56:	81 e0       	ldi	r24, 0x01	; 1
   14d58:	90 e0       	ldi	r25, 0x00	; 0
   14d5a:	91 83       	std	Z+1, r25	; 0x01
   14d5c:	80 83       	st	Z, r24
   14d5e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14d62:	85 ff       	sbrs	r24, 5
   14d64:	66 c1       	rjmp	.+716    	; 0x15032 <SS80_Command_State+0x472>
   14d66:	86 e3       	ldi	r24, 0x36	; 54
   14d68:	91 e2       	ldi	r25, 0x21	; 33
   14d6a:	0f c0       	rjmp	.+30     	; 0x14d8a <SS80_Command_State+0x1ca>
   14d6c:	22 30       	cpi	r18, 0x02	; 2
   14d6e:	31 05       	cpc	r19, r1
   14d70:	a9 f4       	brne	.+42     	; 0x14d9c <SS80_Command_State+0x1dc>
   14d72:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14d76:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14d7a:	31 83       	std	Z+1, r19	; 0x01
   14d7c:	20 83       	st	Z, r18
   14d7e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14d82:	85 ff       	sbrs	r24, 5
   14d84:	56 c1       	rjmp	.+684    	; 0x15032 <SS80_Command_State+0x472>
   14d86:	8d e1       	ldi	r24, 0x1D	; 29
   14d88:	91 e2       	ldi	r25, 0x21	; 33
   14d8a:	a0 e0       	ldi	r26, 0x00	; 0
   14d8c:	ed b7       	in	r30, 0x3d	; 61
   14d8e:	fe b7       	in	r31, 0x3e	; 62
   14d90:	81 83       	std	Z+1, r24	; 0x01
   14d92:	92 83       	std	Z+2, r25	; 0x02
   14d94:	a3 83       	std	Z+3, r26	; 0x03
   14d96:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14d9a:	4b c1       	rjmp	.+662    	; 0x15032 <SS80_Command_State+0x472>
   14d9c:	20 31       	cpi	r18, 0x10	; 16
   14d9e:	31 05       	cpc	r19, r1
   14da0:	b1 f5       	brne	.+108    	; 0x14e0e <SS80_Command_State+0x24e>
   14da2:	20 91 4e 19 	lds	r18, 0x194E	; 0x80194e <SS80s>
   14da6:	30 91 4f 19 	lds	r19, 0x194F	; 0x80194f <SS80s+0x1>
   14daa:	3d 87       	std	Y+13, r19	; 0x0d
   14dac:	2c 87       	std	Y+12, r18	; 0x0c
   14dae:	46 e0       	ldi	r20, 0x06	; 6
   14db0:	50 e0       	ldi	r21, 0x00	; 0
   14db2:	b8 01       	movw	r22, r16
   14db4:	8b ec       	ldi	r24, 0xCB	; 203
   14db6:	9c e1       	ldi	r25, 0x1C	; 28
   14db8:	0e 94 25 bd 	call	0x17a4a	; 0x17a4a <B2V_MSB>
   14dbc:	ec 85       	ldd	r30, Y+12	; 0x0c
   14dbe:	fd 85       	ldd	r31, Y+13	; 0x0d
   14dc0:	67 83       	std	Z+7, r22	; 0x07
   14dc2:	70 87       	std	Z+8, r23	; 0x08
   14dc4:	81 87       	std	Z+9, r24	; 0x09
   14dc6:	92 87       	std	Z+10, r25	; 0x0a
   14dc8:	87 01       	movw	r16, r14
   14dca:	09 5f       	subi	r16, 0xF9	; 249
   14dcc:	1f 4f       	sbci	r17, 0xFF	; 255
   14dce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14dd2:	85 ff       	sbrs	r24, 5
   14dd4:	2c c1       	rjmp	.+600    	; 0x1502e <SS80_Command_State+0x46e>
   14dd6:	20 91 4e 19 	lds	r18, 0x194E	; 0x80194e <SS80s>
   14dda:	30 91 4f 19 	lds	r19, 0x194F	; 0x80194f <SS80s+0x1>
   14dde:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <SS80p>
   14de2:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <SS80p+0x1>
   14de6:	fc 01       	movw	r30, r24
   14de8:	a0 89       	ldd	r26, Z+16	; 0x10
   14dea:	b1 89       	ldd	r27, Z+17	; 0x11
   14dec:	f9 01       	movw	r30, r18
   14dee:	27 81       	ldd	r18, Z+7	; 0x07
   14df0:	30 85       	ldd	r19, Z+8	; 0x08
   14df2:	41 85       	ldd	r20, Z+9	; 0x09
   14df4:	52 85       	ldd	r21, Z+10	; 0x0a
   14df6:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
   14dfa:	ed b7       	in	r30, 0x3d	; 61
   14dfc:	fe b7       	in	r31, 0x3e	; 62
   14dfe:	64 83       	std	Z+4, r22	; 0x04
   14e00:	75 83       	std	Z+5, r23	; 0x05
   14e02:	86 83       	std	Z+6, r24	; 0x06
   14e04:	97 83       	std	Z+7, r25	; 0x07
   14e06:	21 82       	std	Z+1, r2	; 0x01
   14e08:	32 82       	std	Z+2, r3	; 0x02
   14e0a:	43 82       	std	Z+3, r4	; 0x03
   14e0c:	2e c0       	rjmp	.+92     	; 0x14e6a <SS80_Command_State+0x2aa>
   14e0e:	28 31       	cpi	r18, 0x18	; 24
   14e10:	31 05       	cpc	r19, r1
   14e12:	71 f5       	brne	.+92     	; 0x14e70 <SS80_Command_State+0x2b0>
   14e14:	20 91 4e 19 	lds	r18, 0x194E	; 0x80194e <SS80s>
   14e18:	30 91 4f 19 	lds	r19, 0x194F	; 0x80194f <SS80s+0x1>
   14e1c:	3d 87       	std	Y+13, r19	; 0x0d
   14e1e:	2c 87       	std	Y+12, r18	; 0x0c
   14e20:	44 e0       	ldi	r20, 0x04	; 4
   14e22:	50 e0       	ldi	r21, 0x00	; 0
   14e24:	b8 01       	movw	r22, r16
   14e26:	8b ec       	ldi	r24, 0xCB	; 203
   14e28:	9c e1       	ldi	r25, 0x1C	; 28
   14e2a:	0e 94 25 bd 	call	0x17a4a	; 0x17a4a <B2V_MSB>
   14e2e:	ec 85       	ldd	r30, Y+12	; 0x0c
   14e30:	fd 85       	ldd	r31, Y+13	; 0x0d
   14e32:	63 87       	std	Z+11, r22	; 0x0b
   14e34:	74 87       	std	Z+12, r23	; 0x0c
   14e36:	85 87       	std	Z+13, r24	; 0x0d
   14e38:	96 87       	std	Z+14, r25	; 0x0e
   14e3a:	87 01       	movw	r16, r14
   14e3c:	0b 5f       	subi	r16, 0xFB	; 251
   14e3e:	1f 4f       	sbci	r17, 0xFF	; 255
   14e40:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14e44:	85 ff       	sbrs	r24, 5
   14e46:	f3 c0       	rjmp	.+486    	; 0x1502e <SS80_Command_State+0x46e>
   14e48:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14e4c:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14e50:	83 85       	ldd	r24, Z+11	; 0x0b
   14e52:	94 85       	ldd	r25, Z+12	; 0x0c
   14e54:	a5 85       	ldd	r26, Z+13	; 0x0d
   14e56:	b6 85       	ldd	r27, Z+14	; 0x0e
   14e58:	ed b7       	in	r30, 0x3d	; 61
   14e5a:	fe b7       	in	r31, 0x3e	; 62
   14e5c:	84 83       	std	Z+4, r24	; 0x04
   14e5e:	95 83       	std	Z+5, r25	; 0x05
   14e60:	a6 83       	std	Z+6, r26	; 0x06
   14e62:	b7 83       	std	Z+7, r27	; 0x07
   14e64:	a1 82       	std	Z+1, r10	; 0x01
   14e66:	b2 82       	std	Z+2, r11	; 0x02
   14e68:	c3 82       	std	Z+3, r12	; 0x03
   14e6a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14e6e:	df c0       	rjmp	.+446    	; 0x1502e <SS80_Command_State+0x46e>
   14e70:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   14e74:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   14e78:	24 33       	cpi	r18, 0x34	; 52
   14e7a:	31 05       	cpc	r19, r1
   14e7c:	41 f4       	brne	.+16     	; 0x14e8e <SS80_Command_State+0x2ce>
   14e7e:	85 ff       	sbrs	r24, 5
   14e80:	d6 c0       	rjmp	.+428    	; 0x1502e <SS80_Command_State+0x46e>
   14e82:	ed b7       	in	r30, 0x3d	; 61
   14e84:	fe b7       	in	r31, 0x3e	; 62
   14e86:	61 82       	std	Z+1, r6	; 0x01
   14e88:	72 82       	std	Z+2, r7	; 0x02
   14e8a:	83 82       	std	Z+3, r8	; 0x03
   14e8c:	2b c0       	rjmp	.+86     	; 0x14ee4 <SS80_Command_State+0x324>
   14e8e:	29 33       	cpi	r18, 0x39	; 57
   14e90:	31 05       	cpc	r19, r1
   14e92:	49 f4       	brne	.+18     	; 0x14ea6 <SS80_Command_State+0x2e6>
   14e94:	87 01       	movw	r16, r14
   14e96:	0d 5f       	subi	r16, 0xFD	; 253
   14e98:	1f 4f       	sbci	r17, 0xFF	; 255
   14e9a:	85 ff       	sbrs	r24, 5
   14e9c:	c8 c0       	rjmp	.+400    	; 0x1502e <SS80_Command_State+0x46e>
   14e9e:	2c 89       	ldd	r18, Y+20	; 0x14
   14ea0:	3d 89       	ldd	r19, Y+21	; 0x15
   14ea2:	4e 89       	ldd	r20, Y+22	; 0x16
   14ea4:	1a c0       	rjmp	.+52     	; 0x14eda <SS80_Command_State+0x31a>
   14ea6:	2b 33       	cpi	r18, 0x3B	; 59
   14ea8:	31 05       	cpc	r19, r1
   14eaa:	49 f4       	brne	.+18     	; 0x14ebe <SS80_Command_State+0x2fe>
   14eac:	87 01       	movw	r16, r14
   14eae:	0e 5f       	subi	r16, 0xFE	; 254
   14eb0:	1f 4f       	sbci	r17, 0xFF	; 255
   14eb2:	85 ff       	sbrs	r24, 5
   14eb4:	bc c0       	rjmp	.+376    	; 0x1502e <SS80_Command_State+0x46e>
   14eb6:	29 89       	ldd	r18, Y+17	; 0x11
   14eb8:	3a 89       	ldd	r19, Y+18	; 0x12
   14eba:	4b 89       	ldd	r20, Y+19	; 0x13
   14ebc:	0e c0       	rjmp	.+28     	; 0x14eda <SS80_Command_State+0x31a>
   14ebe:	28 34       	cpi	r18, 0x48	; 72
   14ec0:	31 05       	cpc	r19, r1
   14ec2:	99 f4       	brne	.+38     	; 0x14eea <SS80_Command_State+0x32a>
   14ec4:	87 01       	movw	r16, r14
   14ec6:	0e 5f       	subi	r16, 0xFE	; 254
   14ec8:	1f 4f       	sbci	r17, 0xFF	; 255
   14eca:	80 73       	andi	r24, 0x30	; 48
   14ecc:	99 27       	eor	r25, r25
   14ece:	89 2b       	or	r24, r25
   14ed0:	09 f4       	brne	.+2      	; 0x14ed4 <SS80_Command_State+0x314>
   14ed2:	ad c0       	rjmp	.+346    	; 0x1502e <SS80_Command_State+0x46e>
   14ed4:	2e 85       	ldd	r18, Y+14	; 0x0e
   14ed6:	3f 85       	ldd	r19, Y+15	; 0x0f
   14ed8:	48 89       	ldd	r20, Y+16	; 0x10
   14eda:	ed b7       	in	r30, 0x3d	; 61
   14edc:	fe b7       	in	r31, 0x3e	; 62
   14ede:	21 83       	std	Z+1, r18	; 0x01
   14ee0:	32 83       	std	Z+2, r19	; 0x02
   14ee2:	43 83       	std	Z+3, r20	; 0x03
   14ee4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14ee8:	a2 c0       	rjmp	.+324    	; 0x1502e <SS80_Command_State+0x46e>
   14eea:	24 30       	cpi	r18, 0x04	; 4
   14eec:	31 05       	cpc	r19, r1
   14eee:	41 f4       	brne	.+16     	; 0x14f00 <SS80_Command_State+0x340>
   14ef0:	80 73       	andi	r24, 0x30	; 48
   14ef2:	99 27       	eor	r25, r25
   14ef4:	89 2b       	or	r24, r25
   14ef6:	09 f4       	brne	.+2      	; 0x14efa <SS80_Command_State+0x33a>
   14ef8:	9c c0       	rjmp	.+312    	; 0x15032 <SS80_Command_State+0x472>
   14efa:	80 e6       	ldi	r24, 0x60	; 96
   14efc:	90 e2       	ldi	r25, 0x20	; 32
   14efe:	45 cf       	rjmp	.-374    	; 0x14d8a <SS80_Command_State+0x1ca>
   14f00:	2e 30       	cpi	r18, 0x0E	; 14
   14f02:	31 05       	cpc	r19, r1
   14f04:	29 f4       	brne	.+10     	; 0x14f10 <SS80_Command_State+0x350>
   14f06:	85 ff       	sbrs	r24, 5
   14f08:	94 c0       	rjmp	.+296    	; 0x15032 <SS80_Command_State+0x472>
   14f0a:	8a e4       	ldi	r24, 0x4A	; 74
   14f0c:	90 e2       	ldi	r25, 0x20	; 32
   14f0e:	3d cf       	rjmp	.-390    	; 0x14d8a <SS80_Command_State+0x1ca>
   14f10:	2f 30       	cpi	r18, 0x0F	; 15
   14f12:	31 05       	cpc	r19, r1
   14f14:	29 f4       	brne	.+10     	; 0x14f20 <SS80_Command_State+0x360>
   14f16:	85 ff       	sbrs	r24, 5
   14f18:	8c c0       	rjmp	.+280    	; 0x15032 <SS80_Command_State+0x472>
   14f1a:	8d e2       	ldi	r24, 0x2D	; 45
   14f1c:	90 e2       	ldi	r25, 0x20	; 32
   14f1e:	35 cf       	rjmp	.-406    	; 0x14d8a <SS80_Command_State+0x1ca>
   14f20:	21 33       	cpi	r18, 0x31	; 49
   14f22:	31 05       	cpc	r19, r1
   14f24:	59 f4       	brne	.+22     	; 0x14f3c <SS80_Command_State+0x37c>
   14f26:	87 01       	movw	r16, r14
   14f28:	0d 5f       	subi	r16, 0xFD	; 253
   14f2a:	1f 4f       	sbci	r17, 0xFF	; 255
   14f2c:	80 73       	andi	r24, 0x30	; 48
   14f2e:	99 27       	eor	r25, r25
   14f30:	89 2b       	or	r24, r25
   14f32:	09 f4       	brne	.+2      	; 0x14f36 <SS80_Command_State+0x376>
   14f34:	7e c0       	rjmp	.+252    	; 0x15032 <SS80_Command_State+0x472>
   14f36:	81 e1       	ldi	r24, 0x11	; 17
   14f38:	90 e2       	ldi	r25, 0x20	; 32
   14f3a:	27 cf       	rjmp	.-434    	; 0x14d8a <SS80_Command_State+0x1ca>
   14f3c:	25 33       	cpi	r18, 0x35	; 53
   14f3e:	31 05       	cpc	r19, r1
   14f40:	69 f4       	brne	.+26     	; 0x14f5c <SS80_Command_State+0x39c>
   14f42:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14f46:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14f4a:	24 e0       	ldi	r18, 0x04	; 4
   14f4c:	30 e0       	ldi	r19, 0x00	; 0
   14f4e:	31 83       	std	Z+1, r19	; 0x01
   14f50:	20 83       	st	Z, r18
   14f52:	85 ff       	sbrs	r24, 5
   14f54:	6e c0       	rjmp	.+220    	; 0x15032 <SS80_Command_State+0x472>
   14f56:	80 e0       	ldi	r24, 0x00	; 0
   14f58:	90 e2       	ldi	r25, 0x20	; 32
   14f5a:	17 cf       	rjmp	.-466    	; 0x14d8a <SS80_Command_State+0x1ca>
   14f5c:	27 33       	cpi	r18, 0x37	; 55
   14f5e:	31 05       	cpc	r19, r1
   14f60:	59 f4       	brne	.+22     	; 0x14f78 <SS80_Command_State+0x3b8>
   14f62:	87 01       	movw	r16, r14
   14f64:	0d 5f       	subi	r16, 0xFD	; 253
   14f66:	1f 4f       	sbci	r17, 0xFF	; 255
   14f68:	80 73       	andi	r24, 0x30	; 48
   14f6a:	99 27       	eor	r25, r25
   14f6c:	89 2b       	or	r24, r25
   14f6e:	09 f4       	brne	.+2      	; 0x14f72 <SS80_Command_State+0x3b2>
   14f70:	60 c0       	rjmp	.+192    	; 0x15032 <SS80_Command_State+0x472>
   14f72:	82 ee       	ldi	r24, 0xE2	; 226
   14f74:	9f e1       	ldi	r25, 0x1F	; 31
   14f76:	09 cf       	rjmp	.-494    	; 0x14d8a <SS80_Command_State+0x1ca>
   14f78:	2e 33       	cpi	r18, 0x3E	; 62
   14f7a:	31 05       	cpc	r19, r1
   14f7c:	c1 f4       	brne	.+48     	; 0x14fae <SS80_Command_State+0x3ee>
   14f7e:	80 73       	andi	r24, 0x30	; 48
   14f80:	99 27       	eor	r25, r25
   14f82:	89 2b       	or	r24, r25
   14f84:	81 f0       	breq	.+32     	; 0x14fa6 <SS80_Command_State+0x3e6>
   14f86:	83 ec       	ldi	r24, 0xC3	; 195
   14f88:	9f e1       	ldi	r25, 0x1F	; 31
   14f8a:	a0 e0       	ldi	r26, 0x00	; 0
   14f8c:	ed b7       	in	r30, 0x3d	; 61
   14f8e:	fe b7       	in	r31, 0x3e	; 62
   14f90:	81 83       	std	Z+1, r24	; 0x01
   14f92:	92 83       	std	Z+2, r25	; 0x02
   14f94:	a3 83       	std	Z+3, r26	; 0x03
   14f96:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   14f9a:	60 e3       	ldi	r22, 0x30	; 48
   14f9c:	70 e1       	ldi	r23, 0x10	; 16
   14f9e:	c8 01       	movw	r24, r16
   14fa0:	85 53       	subi	r24, 0x35	; 53
   14fa2:	93 4e       	sbci	r25, 0xE3	; 227
   14fa4:	69 dc       	rcall	.-1838   	; 0x14878 <SS80_display_extended_status>
   14fa6:	87 01       	movw	r16, r14
   14fa8:	07 5f       	subi	r16, 0xF7	; 247
   14faa:	1f 4f       	sbci	r17, 0xFF	; 255
   14fac:	42 c0       	rjmp	.+132    	; 0x15032 <SS80_Command_State+0x472>
   14fae:	2c 34       	cpi	r18, 0x4C	; 76
   14fb0:	31 05       	cpc	r19, r1
   14fb2:	39 f4       	brne	.+14     	; 0x14fc2 <SS80_Command_State+0x402>
   14fb4:	80 73       	andi	r24, 0x30	; 48
   14fb6:	99 27       	eor	r25, r25
   14fb8:	89 2b       	or	r24, r25
   14fba:	d9 f1       	breq	.+118    	; 0x15032 <SS80_Command_State+0x472>
   14fbc:	88 ea       	ldi	r24, 0xA8	; 168
   14fbe:	9f e1       	ldi	r25, 0x1F	; 31
   14fc0:	e4 ce       	rjmp	.-568    	; 0x14d8a <SS80_Command_State+0x1ca>
   14fc2:	2d 34       	cpi	r18, 0x4D	; 77
   14fc4:	31 05       	cpc	r19, r1
   14fc6:	39 f4       	brne	.+14     	; 0x14fd6 <SS80_Command_State+0x416>
   14fc8:	80 73       	andi	r24, 0x30	; 48
   14fca:	99 27       	eor	r25, r25
   14fcc:	89 2b       	or	r24, r25
   14fce:	89 f1       	breq	.+98     	; 0x15032 <SS80_Command_State+0x472>
   14fd0:	8f e8       	ldi	r24, 0x8F	; 143
   14fd2:	9f e1       	ldi	r25, 0x1F	; 31
   14fd4:	da ce       	rjmp	.-588    	; 0x14d8a <SS80_Command_State+0x1ca>
   14fd6:	2d 30       	cpi	r18, 0x0D	; 13
   14fd8:	31 05       	cpc	r19, r1
   14fda:	69 f4       	brne	.+26     	; 0x14ff6 <SS80_Command_State+0x436>
   14fdc:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   14fe0:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   14fe4:	23 e0       	ldi	r18, 0x03	; 3
   14fe6:	30 e0       	ldi	r19, 0x00	; 0
   14fe8:	31 83       	std	Z+1, r19	; 0x01
   14fea:	20 83       	st	Z, r18
   14fec:	85 ff       	sbrs	r24, 5
   14fee:	21 c0       	rjmp	.+66     	; 0x15032 <SS80_Command_State+0x472>
   14ff0:	88 e7       	ldi	r24, 0x78	; 120
   14ff2:	9f e1       	ldi	r25, 0x1F	; 31
   14ff4:	ca ce       	rjmp	.-620    	; 0x14d8a <SS80_Command_State+0x1ca>
   14ff6:	23 33       	cpi	r18, 0x33	; 51
   14ff8:	31 05       	cpc	r19, r1
   14ffa:	51 f4       	brne	.+20     	; 0x15010 <SS80_Command_State+0x450>
   14ffc:	87 01       	movw	r16, r14
   14ffe:	0c 5f       	subi	r16, 0xFC	; 252
   15000:	1f 4f       	sbci	r17, 0xFF	; 255
   15002:	80 73       	andi	r24, 0x30	; 48
   15004:	99 27       	eor	r25, r25
   15006:	89 2b       	or	r24, r25
   15008:	a1 f0       	breq	.+40     	; 0x15032 <SS80_Command_State+0x472>
   1500a:	85 e5       	ldi	r24, 0x55	; 85
   1500c:	9f e1       	ldi	r25, 0x1F	; 31
   1500e:	bd ce       	rjmp	.-646    	; 0x14d8a <SS80_Command_State+0x1ca>
   15010:	81 ff       	sbrs	r24, 1
   15012:	28 c0       	rjmp	.+80     	; 0x15064 <SS80_Command_State+0x4a4>
   15014:	ed b7       	in	r30, 0x3d	; 61
   15016:	fe b7       	in	r31, 0x3e	; 62
   15018:	35 83       	std	Z+5, r19	; 0x05
   1501a:	24 83       	std	Z+4, r18	; 0x04
   1501c:	85 e3       	ldi	r24, 0x35	; 53
   1501e:	9f e1       	ldi	r25, 0x1F	; 31
   15020:	a0 e0       	ldi	r26, 0x00	; 0
   15022:	81 83       	std	Z+1, r24	; 0x01
   15024:	92 83       	std	Z+2, r25	; 0x02
   15026:	a3 83       	std	Z+3, r26	; 0x03
   15028:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1502c:	02 c0       	rjmp	.+4      	; 0x15032 <SS80_Command_State+0x472>
   1502e:	78 01       	movw	r14, r16
   15030:	43 ce       	rjmp	.-890    	; 0x14cb8 <SS80_Command_State+0xf8>
   15032:	8a 85       	ldd	r24, Y+10	; 0x0a
   15034:	9b 85       	ldd	r25, Y+11	; 0x0b
   15036:	08 17       	cp	r16, r24
   15038:	19 07       	cpc	r17, r25
   1503a:	a1 f0       	breq	.+40     	; 0x15064 <SS80_Command_State+0x4a4>
   1503c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15040:	81 ff       	sbrs	r24, 1
   15042:	10 c0       	rjmp	.+32     	; 0x15064 <SS80_Command_State+0x4a4>
   15044:	2a 85       	ldd	r18, Y+10	; 0x0a
   15046:	3b 85       	ldd	r19, Y+11	; 0x0b
   15048:	ed b7       	in	r30, 0x3d	; 61
   1504a:	fe b7       	in	r31, 0x3e	; 62
   1504c:	37 83       	std	Z+7, r19	; 0x07
   1504e:	26 83       	std	Z+6, r18	; 0x06
   15050:	15 83       	std	Z+5, r17	; 0x05
   15052:	04 83       	std	Z+4, r16	; 0x04
   15054:	8d ef       	ldi	r24, 0xFD	; 253
   15056:	9e e1       	ldi	r25, 0x1E	; 30
   15058:	a0 e0       	ldi	r26, 0x00	; 0
   1505a:	81 83       	std	Z+1, r24	; 0x01
   1505c:	92 83       	std	Z+2, r25	; 0x02
   1505e:	a3 83       	std	Z+3, r26	; 0x03
   15060:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15064:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15068:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1506c:	81 81       	ldd	r24, Z+1	; 0x01
   1506e:	90 e0       	ldi	r25, 0x00	; 0
   15070:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   15074:	88 85       	ldd	r24, Y+8	; 0x08
   15076:	99 85       	ldd	r25, Y+9	; 0x09
   15078:	88 27       	eor	r24, r24
   1507a:	90 7d       	andi	r25, 0xD0	; 208
   1507c:	02 c0       	rjmp	.+4      	; 0x15082 <SS80_Command_State+0x4c2>
   1507e:	80 e0       	ldi	r24, 0x00	; 0
   15080:	90 e0       	ldi	r25, 0x00	; 0
   15082:	66 96       	adiw	r28, 0x16	; 22
   15084:	0f b6       	in	r0, 0x3f	; 63
   15086:	f8 94       	cli
   15088:	de bf       	out	0x3e, r29	; 62
   1508a:	0f be       	out	0x3f, r0	; 63
   1508c:	cd bf       	out	0x3d, r28	; 61
   1508e:	df 91       	pop	r29
   15090:	cf 91       	pop	r28
   15092:	1f 91       	pop	r17
   15094:	0f 91       	pop	r16
   15096:	ff 90       	pop	r15
   15098:	ef 90       	pop	r14
   1509a:	cf 90       	pop	r12
   1509c:	bf 90       	pop	r11
   1509e:	af 90       	pop	r10
   150a0:	8f 90       	pop	r8
   150a2:	7f 90       	pop	r7
   150a4:	6f 90       	pop	r6
   150a6:	4f 90       	pop	r4
   150a8:	3f 90       	pop	r3
   150aa:	2f 90       	pop	r2
   150ac:	08 95       	ret

000150ae <SS80_cmd_seek>:
   150ae:	a7 e0       	ldi	r26, 0x07	; 7
   150b0:	b0 e0       	ldi	r27, 0x00	; 0
   150b2:	ed e5       	ldi	r30, 0x5D	; 93
   150b4:	f8 ea       	ldi	r31, 0xA8	; 168
   150b6:	0c 94 93 e0 	jmp	0x1c126	; 0x1c126 <__prologue_saves__+0x4>
   150ba:	c0 91 4e 19 	lds	r28, 0x194E	; 0x80194e <SS80s>
   150be:	d0 91 4f 19 	lds	r29, 0x194F	; 0x80194f <SS80s+0x1>
   150c2:	8f 80       	ldd	r8, Y+7	; 0x07
   150c4:	98 84       	ldd	r9, Y+8	; 0x08
   150c6:	a9 84       	ldd	r10, Y+9	; 0x09
   150c8:	ba 84       	ldd	r11, Y+10	; 0x0a
   150ca:	00 91 50 19 	lds	r16, 0x1950	; 0x801950 <SS80p>
   150ce:	10 91 51 19 	lds	r17, 0x1951	; 0x801951 <SS80p+0x1>
   150d2:	f8 01       	movw	r30, r16
   150d4:	c0 88       	ldd	r12, Z+16	; 0x10
   150d6:	d1 88       	ldd	r13, Z+17	; 0x11
   150d8:	e1 2c       	mov	r14, r1
   150da:	f1 2c       	mov	r15, r1
   150dc:	6b 85       	ldd	r22, Y+11	; 0x0b
   150de:	7c 85       	ldd	r23, Y+12	; 0x0c
   150e0:	8d 85       	ldd	r24, Y+13	; 0x0d
   150e2:	9e 85       	ldd	r25, Y+14	; 0x0e
   150e4:	a7 01       	movw	r20, r14
   150e6:	96 01       	movw	r18, r12
   150e8:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
   150ec:	da 01       	movw	r26, r20
   150ee:	c9 01       	movw	r24, r18
   150f0:	88 0d       	add	r24, r8
   150f2:	99 1d       	adc	r25, r9
   150f4:	aa 1d       	adc	r26, r10
   150f6:	bb 1d       	adc	r27, r11
   150f8:	f8 01       	movw	r30, r16
   150fa:	46 a0       	ldd	r4, Z+38	; 0x26
   150fc:	57 a0       	ldd	r5, Z+39	; 0x27
   150fe:	60 a4       	ldd	r6, Z+40	; 0x28
   15100:	71 a4       	ldd	r7, Z+41	; 0x29
   15102:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   15106:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1510a:	48 16       	cp	r4, r24
   1510c:	59 06       	cpc	r5, r25
   1510e:	6a 06       	cpc	r6, r26
   15110:	7b 06       	cpc	r7, r27
   15112:	f0 f4       	brcc	.+60     	; 0x15150 <SS80_cmd_seek+0xa2>
   15114:	81 e0       	ldi	r24, 0x01	; 1
   15116:	8a 83       	std	Y+2, r24	; 0x02
   15118:	8b 81       	ldd	r24, Y+3	; 0x03
   1511a:	9c 81       	ldd	r25, Y+4	; 0x04
   1511c:	84 60       	ori	r24, 0x04	; 4
   1511e:	9c 83       	std	Y+4, r25	; 0x04
   15120:	8b 83       	std	Y+3, r24	; 0x03
   15122:	41 ff       	sbrs	r20, 1
   15124:	31 c0       	rjmp	.+98     	; 0x15188 <SS80_cmd_seek+0xda>
   15126:	a0 89       	ldd	r26, Z+16	; 0x10
   15128:	b1 89       	ldd	r27, Z+17	; 0x11
   1512a:	a5 01       	movw	r20, r10
   1512c:	94 01       	movw	r18, r8
   1512e:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
   15132:	ed b7       	in	r30, 0x3d	; 61
   15134:	fe b7       	in	r31, 0x3e	; 62
   15136:	64 83       	std	Z+4, r22	; 0x04
   15138:	75 83       	std	Z+5, r23	; 0x05
   1513a:	86 83       	std	Z+6, r24	; 0x06
   1513c:	97 83       	std	Z+7, r25	; 0x07
   1513e:	8a eb       	ldi	r24, 0xBA	; 186
   15140:	9d e1       	ldi	r25, 0x1D	; 29
   15142:	a0 e0       	ldi	r26, 0x00	; 0
   15144:	81 83       	std	Z+1, r24	; 0x01
   15146:	92 83       	std	Z+2, r25	; 0x02
   15148:	a3 83       	std	Z+3, r26	; 0x03
   1514a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1514e:	1c c0       	rjmp	.+56     	; 0x15188 <SS80_cmd_seek+0xda>
   15150:	ca 01       	movw	r24, r20
   15152:	80 72       	andi	r24, 0x20	; 32
   15154:	99 27       	eor	r25, r25
   15156:	45 ff       	sbrs	r20, 5
   15158:	19 c0       	rjmp	.+50     	; 0x1518c <SS80_cmd_seek+0xde>
   1515a:	a5 01       	movw	r20, r10
   1515c:	94 01       	movw	r18, r8
   1515e:	c7 01       	movw	r24, r14
   15160:	b6 01       	movw	r22, r12
   15162:	0e 94 e2 df 	call	0x1bfc4	; 0x1bfc4 <__mulsi3>
   15166:	ed b7       	in	r30, 0x3d	; 61
   15168:	fe b7       	in	r31, 0x3e	; 62
   1516a:	64 83       	std	Z+4, r22	; 0x04
   1516c:	75 83       	std	Z+5, r23	; 0x05
   1516e:	86 83       	std	Z+6, r24	; 0x06
   15170:	97 83       	std	Z+7, r25	; 0x07
   15172:	86 ea       	ldi	r24, 0xA6	; 166
   15174:	9d e1       	ldi	r25, 0x1D	; 29
   15176:	a0 e0       	ldi	r26, 0x00	; 0
   15178:	81 83       	std	Z+1, r24	; 0x01
   1517a:	92 83       	std	Z+2, r25	; 0x02
   1517c:	a3 83       	std	Z+3, r26	; 0x03
   1517e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15182:	80 e0       	ldi	r24, 0x00	; 0
   15184:	90 e0       	ldi	r25, 0x00	; 0
   15186:	02 c0       	rjmp	.+4      	; 0x1518c <SS80_cmd_seek+0xde>
   15188:	81 e0       	ldi	r24, 0x01	; 1
   1518a:	90 e0       	ldi	r25, 0x00	; 0
   1518c:	cd b7       	in	r28, 0x3d	; 61
   1518e:	de b7       	in	r29, 0x3e	; 62
   15190:	27 96       	adiw	r28, 0x07	; 7
   15192:	e0 e1       	ldi	r30, 0x10	; 16
   15194:	0c 94 af e0 	jmp	0x1c15e	; 0x1c15e <__epilogue_restores__+0x4>

00015198 <SS80_locate_and_write>:
   15198:	a3 e1       	ldi	r26, 0x13	; 19
   1519a:	b0 e0       	ldi	r27, 0x00	; 0
   1519c:	e2 ed       	ldi	r30, 0xD2	; 210
   1519e:	f8 ea       	ldi	r31, 0xA8	; 168
   151a0:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   151a4:	00 91 4e 19 	lds	r16, 0x194E	; 0x80194e <SS80s>
   151a8:	10 91 4f 19 	lds	r17, 0x194F	; 0x80194f <SS80s+0x1>
   151ac:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <SS80p>
   151b0:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <SS80p+0x1>
   151b4:	fc 01       	movw	r30, r24
   151b6:	a0 89       	ldd	r26, Z+16	; 0x10
   151b8:	b1 89       	ldd	r27, Z+17	; 0x11
   151ba:	f8 01       	movw	r30, r16
   151bc:	27 81       	ldd	r18, Z+7	; 0x07
   151be:	30 85       	ldd	r19, Z+8	; 0x08
   151c0:	41 85       	ldd	r20, Z+9	; 0x09
   151c2:	52 85       	ldd	r21, Z+10	; 0x0a
   151c4:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
   151c8:	4b 01       	movw	r8, r22
   151ca:	5c 01       	movw	r10, r24
   151cc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   151d0:	85 ff       	sbrs	r24, 5
   151d2:	16 c0       	rjmp	.+44     	; 0x15200 <SS80_locate_and_write+0x68>
   151d4:	83 85       	ldd	r24, Z+11	; 0x0b
   151d6:	94 85       	ldd	r25, Z+12	; 0x0c
   151d8:	a5 85       	ldd	r26, Z+13	; 0x0d
   151da:	b6 85       	ldd	r27, Z+14	; 0x0e
   151dc:	ed b7       	in	r30, 0x3d	; 61
   151de:	fe b7       	in	r31, 0x3e	; 62
   151e0:	80 87       	std	Z+8, r24	; 0x08
   151e2:	91 87       	std	Z+9, r25	; 0x09
   151e4:	a2 87       	std	Z+10, r26	; 0x0a
   151e6:	b3 87       	std	Z+11, r27	; 0x0b
   151e8:	84 82       	std	Z+4, r8	; 0x04
   151ea:	95 82       	std	Z+5, r9	; 0x05
   151ec:	a6 82       	std	Z+6, r10	; 0x06
   151ee:	b7 82       	std	Z+7, r11	; 0x07
   151f0:	8d e3       	ldi	r24, 0x3D	; 61
   151f2:	93 e2       	ldi	r25, 0x23	; 35
   151f4:	a0 e0       	ldi	r26, 0x00	; 0
   151f6:	81 83       	std	Z+1, r24	; 0x01
   151f8:	92 83       	std	Z+2, r25	; 0x02
   151fa:	a3 83       	std	Z+3, r26	; 0x03
   151fc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15200:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15204:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15208:	12 82       	std	Z+2, r1	; 0x02
   1520a:	54 98       	cbi	0x0a, 4	; 10
   1520c:	4c 99       	sbic	0x09, 4	; 9
   1520e:	03 c0       	rjmp	.+6      	; 0x15216 <SS80_locate_and_write+0x7e>
   15210:	80 e0       	ldi	r24, 0x00	; 0
   15212:	90 e1       	ldi	r25, 0x10	; 16
   15214:	4f c1       	rjmp	.+670    	; 0x154b4 <SS80_locate_and_write+0x31c>
   15216:	4b df       	rcall	.-362    	; 0x150ae <SS80_cmd_seek>
   15218:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   1521c:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15220:	89 2b       	or	r24, r25
   15222:	41 f0       	breq	.+16     	; 0x15234 <SS80_locate_and_write+0x9c>
   15224:	83 81       	ldd	r24, Z+3	; 0x03
   15226:	94 81       	ldd	r25, Z+4	; 0x04
   15228:	82 60       	ori	r24, 0x02	; 2
   1522a:	94 83       	std	Z+4, r25	; 0x04
   1522c:	83 83       	std	Z+3, r24	; 0x03
   1522e:	01 e0       	ldi	r16, 0x01	; 1
   15230:	10 e0       	ldi	r17, 0x00	; 0
   15232:	02 c0       	rjmp	.+4      	; 0x15238 <SS80_locate_and_write+0xa0>
   15234:	00 e0       	ldi	r16, 0x00	; 0
   15236:	10 e0       	ldi	r17, 0x00	; 0
   15238:	23 84       	ldd	r2, Z+11	; 0x0b
   1523a:	34 84       	ldd	r3, Z+12	; 0x0c
   1523c:	1d 86       	std	Y+13, r1	; 0x0d
   1523e:	1c 86       	std	Y+12, r1	; 0x0c
   15240:	41 2c       	mov	r4, r1
   15242:	51 2c       	mov	r5, r1
   15244:	32 01       	movw	r6, r4
   15246:	80 ef       	ldi	r24, 0xF0	; 240
   15248:	92 e2       	ldi	r25, 0x22	; 34
   1524a:	9c 01       	movw	r18, r24
   1524c:	40 e0       	ldi	r20, 0x00	; 0
   1524e:	2e 87       	std	Y+14, r18	; 0x0e
   15250:	3f 87       	std	Y+15, r19	; 0x0f
   15252:	48 8b       	std	Y+16, r20	; 0x10
   15254:	86 e1       	ldi	r24, 0x16	; 22
   15256:	93 e2       	ldi	r25, 0x23	; 35
   15258:	9c 01       	movw	r18, r24
   1525a:	40 e0       	ldi	r20, 0x00	; 0
   1525c:	29 8b       	std	Y+17, r18	; 0x11
   1525e:	3a 8b       	std	Y+18, r19	; 0x12
   15260:	4b 8b       	std	Y+19, r20	; 0x13
   15262:	12 14       	cp	r1, r2
   15264:	13 04       	cpc	r1, r3
   15266:	0c f0       	brlt	.+2      	; 0x1526a <SS80_locate_and_write+0xd2>
   15268:	f5 c0       	rjmp	.+490    	; 0x15454 <SS80_locate_and_write+0x2bc>
   1526a:	54 98       	cbi	0x0a, 4	; 10
   1526c:	4c 9b       	sbis	0x09, 4	; 9
   1526e:	d0 cf       	rjmp	.-96     	; 0x15210 <SS80_locate_and_write+0x78>
   15270:	71 01       	movw	r14, r2
   15272:	31 e0       	ldi	r19, 0x01	; 1
   15274:	23 16       	cp	r2, r19
   15276:	33 06       	cpc	r3, r19
   15278:	1c f0       	brlt	.+6      	; 0x15280 <SS80_locate_and_write+0xe8>
   1527a:	e1 2c       	mov	r14, r1
   1527c:	ff 24       	eor	r15, r15
   1527e:	f3 94       	inc	r15
   15280:	eb ec       	ldi	r30, 0xCB	; 203
   15282:	fc e1       	ldi	r31, 0x1C	; 28
   15284:	20 e0       	ldi	r18, 0x00	; 0
   15286:	32 e0       	ldi	r19, 0x02	; 2
   15288:	11 92       	st	Z+, r1
   1528a:	21 50       	subi	r18, 0x01	; 1
   1528c:	30 40       	sbci	r19, 0x00	; 0
   1528e:	e1 f7       	brne	.-8      	; 0x15288 <SS80_locate_and_write+0xf0>
   15290:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15294:	87 fd       	sbrc	r24, 7
   15296:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   1529a:	ae 01       	movw	r20, r28
   1529c:	44 5f       	subi	r20, 0xF4	; 244
   1529e:	5f 4f       	sbci	r21, 0xFF	; 255
   152a0:	b7 01       	movw	r22, r14
   152a2:	8b ec       	ldi	r24, 0xCB	; 203
   152a4:	9c e1       	ldi	r25, 0x1C	; 28
   152a6:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
   152aa:	6c 01       	movw	r12, r24
   152ac:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   152b0:	87 ff       	sbrs	r24, 7
   152b2:	04 c0       	rjmp	.+8      	; 0x152bc <SS80_locate_and_write+0x124>
   152b4:	8c e4       	ldi	r24, 0x4C	; 76
   152b6:	90 e1       	ldi	r25, 0x10	; 16
   152b8:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   152bc:	ce 14       	cp	r12, r14
   152be:	df 04       	cpc	r13, r15
   152c0:	39 f1       	breq	.+78     	; 0x15310 <SS80_locate_and_write+0x178>
   152c2:	8c 85       	ldd	r24, Y+12	; 0x0c
   152c4:	9d 85       	ldd	r25, Y+13	; 0x0d
   152c6:	9c 01       	movw	r18, r24
   152c8:	22 27       	eor	r18, r18
   152ca:	30 7d       	andi	r19, 0xD0	; 208
   152cc:	23 2b       	or	r18, r19
   152ce:	d1 f0       	breq	.+52     	; 0x15304 <SS80_locate_and_write+0x16c>
   152d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   152d4:	81 ff       	sbrs	r24, 1
   152d6:	0a c0       	rjmp	.+20     	; 0x152ec <SS80_locate_and_write+0x154>
   152d8:	8a e2       	ldi	r24, 0x2A	; 42
   152da:	93 e2       	ldi	r25, 0x23	; 35
   152dc:	a0 e0       	ldi	r26, 0x00	; 0
   152de:	ed b7       	in	r30, 0x3d	; 61
   152e0:	fe b7       	in	r31, 0x3e	; 62
   152e2:	81 83       	std	Z+1, r24	; 0x01
   152e4:	92 83       	std	Z+2, r25	; 0x02
   152e6:	a3 83       	std	Z+3, r26	; 0x03
   152e8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   152ec:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   152f0:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   152f4:	83 81       	ldd	r24, Z+3	; 0x03
   152f6:	94 81       	ldd	r25, Z+4	; 0x04
   152f8:	82 60       	ori	r24, 0x02	; 2
   152fa:	94 83       	std	Z+4, r25	; 0x04
   152fc:	83 83       	std	Z+3, r24	; 0x03
   152fe:	81 e0       	ldi	r24, 0x01	; 1
   15300:	82 83       	std	Z+2, r24	; 0x02
   15302:	99 c0       	rjmp	.+306    	; 0x15436 <SS80_locate_and_write+0x29e>
   15304:	c1 14       	cp	r12, r1
   15306:	d1 04       	cpc	r13, r1
   15308:	09 f0       	breq	.+2      	; 0x1530c <SS80_locate_and_write+0x174>
   1530a:	d0 c0       	rjmp	.+416    	; 0x154ac <SS80_locate_and_write+0x314>
   1530c:	90 fd       	sbrc	r25, 0
   1530e:	93 c0       	rjmp	.+294    	; 0x15436 <SS80_locate_and_write+0x29e>
   15310:	01 15       	cp	r16, r1
   15312:	11 05       	cpc	r17, r1
   15314:	09 f0       	breq	.+2      	; 0x15318 <SS80_locate_and_write+0x180>
   15316:	84 c0       	rjmp	.+264    	; 0x15420 <SS80_locate_and_write+0x288>
   15318:	c1 14       	cp	r12, r1
   1531a:	d1 04       	cpc	r13, r1
   1531c:	09 f4       	brne	.+2      	; 0x15320 <SS80_locate_and_write+0x188>
   1531e:	82 c0       	rjmp	.+260    	; 0x15424 <SS80_locate_and_write+0x28c>
   15320:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15324:	86 fd       	sbrc	r24, 6
   15326:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   1532a:	e0 90 4e 19 	lds	r14, 0x194E	; 0x80194e <SS80s>
   1532e:	f0 90 4f 19 	lds	r15, 0x194F	; 0x80194f <SS80s+0x1>
   15332:	f3 e0       	ldi	r31, 0x03	; 3
   15334:	ef 0e       	add	r14, r31
   15336:	f1 1c       	adc	r15, r1
   15338:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   1533c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15340:	86 01       	movw	r16, r12
   15342:	2b ec       	ldi	r18, 0xCB	; 203
   15344:	3c e1       	ldi	r19, 0x1C	; 28
   15346:	b5 01       	movw	r22, r10
   15348:	a4 01       	movw	r20, r8
   1534a:	82 81       	ldd	r24, Z+2	; 0x02
   1534c:	93 81       	ldd	r25, Z+3	; 0x03
   1534e:	0e 94 d3 84 	call	0x109a6	; 0x109a6 <dbf_open_write>
   15352:	7c 01       	movw	r14, r24
   15354:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15358:	86 ff       	sbrs	r24, 6
   1535a:	04 c0       	rjmp	.+8      	; 0x15364 <SS80_locate_and_write+0x1cc>
   1535c:	86 e5       	ldi	r24, 0x56	; 86
   1535e:	90 e1       	ldi	r25, 0x10	; 16
   15360:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   15364:	ce 14       	cp	r12, r14
   15366:	df 04       	cpc	r13, r15
   15368:	39 f1       	breq	.+78     	; 0x153b8 <SS80_locate_and_write+0x220>
   1536a:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   1536e:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15372:	83 81       	ldd	r24, Z+3	; 0x03
   15374:	94 81       	ldd	r25, Z+4	; 0x04
   15376:	82 60       	ori	r24, 0x02	; 2
   15378:	94 83       	std	Z+4, r25	; 0x04
   1537a:	83 83       	std	Z+3, r24	; 0x03
   1537c:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <mmc_wp_status>
   15380:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15384:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15388:	89 2b       	or	r24, r25
   1538a:	29 f0       	breq	.+10     	; 0x15396 <SS80_locate_and_write+0x1fe>
   1538c:	83 81       	ldd	r24, Z+3	; 0x03
   1538e:	94 81       	ldd	r25, Z+4	; 0x04
   15390:	88 60       	ori	r24, 0x08	; 8
   15392:	94 83       	std	Z+4, r25	; 0x04
   15394:	83 83       	std	Z+3, r24	; 0x03
   15396:	21 e0       	ldi	r18, 0x01	; 1
   15398:	22 83       	std	Z+2, r18	; 0x02
   1539a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1539e:	81 ff       	sbrs	r24, 1
   153a0:	27 c0       	rjmp	.+78     	; 0x153f0 <SS80_locate_and_write+0x258>
   153a2:	89 89       	ldd	r24, Y+17	; 0x11
   153a4:	9a 89       	ldd	r25, Y+18	; 0x12
   153a6:	ab 89       	ldd	r26, Y+19	; 0x13
   153a8:	ed b7       	in	r30, 0x3d	; 61
   153aa:	fe b7       	in	r31, 0x3e	; 62
   153ac:	81 83       	std	Z+1, r24	; 0x01
   153ae:	92 83       	std	Z+2, r25	; 0x02
   153b0:	a3 83       	std	Z+3, r26	; 0x03
   153b2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   153b6:	1c c0       	rjmp	.+56     	; 0x153f0 <SS80_locate_and_write+0x258>
   153b8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   153bc:	85 ff       	sbrs	r24, 5
   153be:	0c c0       	rjmp	.+24     	; 0x153d8 <SS80_locate_and_write+0x240>
   153c0:	ed b7       	in	r30, 0x3d	; 61
   153c2:	fe b7       	in	r31, 0x3e	; 62
   153c4:	d5 82       	std	Z+5, r13	; 0x05
   153c6:	c4 82       	std	Z+4, r12	; 0x04
   153c8:	2e 85       	ldd	r18, Y+14	; 0x0e
   153ca:	3f 85       	ldd	r19, Y+15	; 0x0f
   153cc:	48 89       	ldd	r20, Y+16	; 0x10
   153ce:	21 83       	std	Z+1, r18	; 0x01
   153d0:	32 83       	std	Z+2, r19	; 0x02
   153d2:	43 83       	std	Z+3, r20	; 0x03
   153d4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   153d8:	c6 01       	movw	r24, r12
   153da:	0d 2c       	mov	r0, r13
   153dc:	00 0c       	add	r0, r0
   153de:	aa 0b       	sbc	r26, r26
   153e0:	bb 0b       	sbc	r27, r27
   153e2:	88 0e       	add	r8, r24
   153e4:	99 1e       	adc	r9, r25
   153e6:	aa 1e       	adc	r10, r26
   153e8:	bb 1e       	adc	r11, r27
   153ea:	00 e0       	ldi	r16, 0x00	; 0
   153ec:	10 e0       	ldi	r17, 0x00	; 0
   153ee:	05 c0       	rjmp	.+10     	; 0x153fa <SS80_locate_and_write+0x262>
   153f0:	ec 14       	cp	r14, r12
   153f2:	fd 04       	cpc	r15, r13
   153f4:	64 f0       	brlt	.+24     	; 0x1540e <SS80_locate_and_write+0x276>
   153f6:	01 e0       	ldi	r16, 0x01	; 1
   153f8:	10 e0       	ldi	r17, 0x00	; 0
   153fa:	c7 01       	movw	r24, r14
   153fc:	0f 2c       	mov	r0, r15
   153fe:	00 0c       	add	r0, r0
   15400:	aa 0b       	sbc	r26, r26
   15402:	bb 0b       	sbc	r27, r27
   15404:	48 0e       	add	r4, r24
   15406:	59 1e       	adc	r5, r25
   15408:	6a 1e       	adc	r6, r26
   1540a:	7b 1e       	adc	r7, r27
   1540c:	0b c0       	rjmp	.+22     	; 0x15424 <SS80_locate_and_write+0x28c>
   1540e:	c6 01       	movw	r24, r12
   15410:	0d 2c       	mov	r0, r13
   15412:	00 0c       	add	r0, r0
   15414:	aa 0b       	sbc	r26, r26
   15416:	bb 0b       	sbc	r27, r27
   15418:	48 0e       	add	r4, r24
   1541a:	59 1e       	adc	r5, r25
   1541c:	6a 1e       	adc	r6, r26
   1541e:	7b 1e       	adc	r7, r27
   15420:	01 e0       	ldi	r16, 0x01	; 1
   15422:	10 e0       	ldi	r17, 0x00	; 0
   15424:	2c 18       	sub	r2, r12
   15426:	3d 08       	sbc	r3, r13
   15428:	8c 85       	ldd	r24, Y+12	; 0x0c
   1542a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1542c:	90 ff       	sbrs	r25, 0
   1542e:	19 cf       	rjmp	.-462    	; 0x15262 <SS80_locate_and_write+0xca>
   15430:	12 14       	cp	r1, r2
   15432:	13 04       	cpc	r1, r3
   15434:	7c f4       	brge	.+30     	; 0x15454 <SS80_locate_and_write+0x2bc>
   15436:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1543a:	81 ff       	sbrs	r24, 1
   1543c:	1d c0       	rjmp	.+58     	; 0x15478 <SS80_locate_and_write+0x2e0>
   1543e:	88 ec       	ldi	r24, 0xC8	; 200
   15440:	92 e2       	ldi	r25, 0x22	; 34
   15442:	a0 e0       	ldi	r26, 0x00	; 0
   15444:	ed b7       	in	r30, 0x3d	; 61
   15446:	fe b7       	in	r31, 0x3e	; 62
   15448:	81 83       	std	Z+1, r24	; 0x01
   1544a:	92 83       	std	Z+2, r25	; 0x02
   1544c:	a3 83       	std	Z+3, r26	; 0x03
   1544e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15452:	12 c0       	rjmp	.+36     	; 0x15478 <SS80_locate_and_write+0x2e0>
   15454:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15458:	85 ff       	sbrs	r24, 5
   1545a:	0e c0       	rjmp	.+28     	; 0x15478 <SS80_locate_and_write+0x2e0>
   1545c:	ed b7       	in	r30, 0x3d	; 61
   1545e:	fe b7       	in	r31, 0x3e	; 62
   15460:	44 82       	std	Z+4, r4	; 0x04
   15462:	55 82       	std	Z+5, r5	; 0x05
   15464:	66 82       	std	Z+6, r6	; 0x06
   15466:	77 82       	std	Z+7, r7	; 0x07
   15468:	8d e9       	ldi	r24, 0x9D	; 157
   1546a:	92 e2       	ldi	r25, 0x22	; 34
   1546c:	a0 e0       	ldi	r26, 0x00	; 0
   1546e:	81 83       	std	Z+1, r24	; 0x01
   15470:	92 83       	std	Z+2, r25	; 0x02
   15472:	a3 83       	std	Z+3, r26	; 0x03
   15474:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15478:	00 91 4e 19 	lds	r16, 0x194E	; 0x80194e <SS80s>
   1547c:	10 91 4f 19 	lds	r17, 0x194F	; 0x80194f <SS80s+0x1>
   15480:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   15484:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15488:	20 89       	ldd	r18, Z+16	; 0x10
   1548a:	31 89       	ldd	r19, Z+17	; 0x11
   1548c:	40 e0       	ldi	r20, 0x00	; 0
   1548e:	50 e0       	ldi	r21, 0x00	; 0
   15490:	c5 01       	movw	r24, r10
   15492:	b4 01       	movw	r22, r8
   15494:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
   15498:	f8 01       	movw	r30, r16
   1549a:	27 83       	std	Z+7, r18	; 0x07
   1549c:	30 87       	std	Z+8, r19	; 0x08
   1549e:	41 87       	std	Z+9, r20	; 0x09
   154a0:	52 87       	std	Z+10, r21	; 0x0a
   154a2:	8c 85       	ldd	r24, Y+12	; 0x0c
   154a4:	9d 85       	ldd	r25, Y+13	; 0x0d
   154a6:	88 27       	eor	r24, r24
   154a8:	90 7d       	andi	r25, 0xD0	; 208
   154aa:	04 c0       	rjmp	.+8      	; 0x154b4 <SS80_locate_and_write+0x31c>
   154ac:	01 2b       	or	r16, r17
   154ae:	09 f4       	brne	.+2      	; 0x154b2 <SS80_locate_and_write+0x31a>
   154b0:	37 cf       	rjmp	.-402    	; 0x15320 <SS80_locate_and_write+0x188>
   154b2:	b6 cf       	rjmp	.-148    	; 0x15420 <SS80_locate_and_write+0x288>
   154b4:	63 96       	adiw	r28, 0x13	; 19
   154b6:	e2 e1       	ldi	r30, 0x12	; 18
   154b8:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

000154bc <SS80_Report>:
   154bc:	a8 e0       	ldi	r26, 0x08	; 8
   154be:	b0 e0       	ldi	r27, 0x00	; 0
   154c0:	e4 e6       	ldi	r30, 0x64	; 100
   154c2:	fa ea       	ldi	r31, 0xAA	; 170
   154c4:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   154c8:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   154cc:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   154d0:	82 81       	ldd	r24, Z+2	; 0x02
   154d2:	88 87       	std	Y+8, r24	; 0x08
   154d4:	80 e0       	ldi	r24, 0x00	; 0
   154d6:	91 e0       	ldi	r25, 0x01	; 1
   154d8:	9f 83       	std	Y+7, r25	; 0x07
   154da:	8e 83       	std	Y+6, r24	; 0x06
   154dc:	ae 01       	movw	r20, r28
   154de:	4a 5f       	subi	r20, 0xFA	; 250
   154e0:	5f 4f       	sbci	r21, 0xFF	; 255
   154e2:	61 e0       	ldi	r22, 0x01	; 1
   154e4:	70 e0       	ldi	r23, 0x00	; 0
   154e6:	ce 01       	movw	r24, r28
   154e8:	08 96       	adiw	r24, 0x08	; 8
   154ea:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   154ee:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   154f2:	01 97       	sbiw	r24, 0x01	; 1
   154f4:	89 f0       	breq	.+34     	; 0x15518 <SS80_Report+0x5c>
   154f6:	21 ff       	sbrs	r18, 1
   154f8:	0a c0       	rjmp	.+20     	; 0x1550e <SS80_Report+0x52>
   154fa:	8c e8       	ldi	r24, 0x8C	; 140
   154fc:	9d e1       	ldi	r25, 0x1D	; 29
   154fe:	a0 e0       	ldi	r26, 0x00	; 0
   15500:	ed b7       	in	r30, 0x3d	; 61
   15502:	fe b7       	in	r31, 0x3e	; 62
   15504:	81 83       	std	Z+1, r24	; 0x01
   15506:	92 83       	std	Z+2, r25	; 0x02
   15508:	a3 83       	std	Z+3, r26	; 0x03
   1550a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1550e:	8e 81       	ldd	r24, Y+6	; 0x06
   15510:	9f 81       	ldd	r25, Y+7	; 0x07
   15512:	88 27       	eor	r24, r24
   15514:	90 7d       	andi	r25, 0xD0	; 208
   15516:	1b c0       	rjmp	.+54     	; 0x1554e <SS80_Report+0x92>
   15518:	25 ff       	sbrs	r18, 5
   1551a:	12 c0       	rjmp	.+36     	; 0x15540 <SS80_Report+0x84>
   1551c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
    return ( uart_rx_count( uart ) );
}
   15520:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15524:	82 81       	ldd	r24, Z+2	; 0x02
   15526:	90 e0       	ldi	r25, 0x00	; 0
   15528:	ed b7       	in	r30, 0x3d	; 61
   1552a:	fe b7       	in	r31, 0x3e	; 62
   1552c:	95 83       	std	Z+5, r25	; 0x05
   1552e:	84 83       	std	Z+4, r24	; 0x04
   15530:	89 e7       	ldi	r24, 0x79	; 121
   15532:	9d e1       	ldi	r25, 0x1D	; 29
   15534:	a0 e0       	ldi	r26, 0x00	; 0
   15536:	81 83       	std	Z+1, r24	; 0x01
   15538:	92 83       	std	Z+2, r25	; 0x02
   1553a:	a3 83       	std	Z+3, r26	; 0x03
   1553c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15540:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15544:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15548:	12 82       	std	Z+2, r1	; 0x02
   1554a:	80 e0       	ldi	r24, 0x00	; 0
   1554c:	90 e0       	ldi	r25, 0x00	; 0
   1554e:	28 96       	adiw	r28, 0x08	; 8
   15550:	e2 e0       	ldi	r30, 0x02	; 2
   15552:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00015556 <Clear_Common>:
   15556:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   1555a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   1555e:	25 81       	ldd	r18, Z+5	; 0x05
   15560:	30 e0       	ldi	r19, 0x00	; 0
   15562:	28 17       	cp	r18, r24
   15564:	39 07       	cpc	r19, r25
   15566:	19 f0       	breq	.+6      	; 0x1556e <Clear_Common+0x18>
   15568:	0f 97       	sbiw	r24, 0x0f	; 15
   1556a:	99 f4       	brne	.+38     	; 0x15592 <Clear_Common+0x3c>
   1556c:	03 c0       	rjmp	.+6      	; 0x15574 <Clear_Common+0x1e>
   1556e:	2f 30       	cpi	r18, 0x0F	; 15
   15570:	31 05       	cpc	r19, r1
   15572:	09 f4       	brne	.+2      	; 0x15576 <Clear_Common+0x20>
   15574:	15 82       	std	Z+5, r1	; 0x05
   15576:	16 82       	std	Z+6, r1	; 0x06
   15578:	17 82       	std	Z+7, r1	; 0x07
   1557a:	10 86       	std	Z+8, r1	; 0x08
   1557c:	11 86       	std	Z+9, r1	; 0x09
   1557e:	12 86       	std	Z+10, r1	; 0x0a
   15580:	13 86       	std	Z+11, r1	; 0x0b
   15582:	14 86       	std	Z+12, r1	; 0x0c
   15584:	15 86       	std	Z+13, r1	; 0x0d
   15586:	16 86       	std	Z+14, r1	; 0x0e
   15588:	11 82       	std	Z+1, r1	; 0x01
   1558a:	10 82       	st	Z, r1
   1558c:	14 82       	std	Z+4, r1	; 0x04
   1558e:	13 82       	std	Z+3, r1	; 0x03
   15590:	12 82       	std	Z+2, r1	; 0x02
   15592:	08 95       	ret

00015594 <SS80_init>:
   15594:	a5 e0       	ldi	r26, 0x05	; 5
   15596:	b0 e0       	ldi	r27, 0x00	; 0
   15598:	e0 ed       	ldi	r30, 0xD0	; 208
   1559a:	fa ea       	ldi	r31, 0xAA	; 170
   1559c:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
   155a0:	0e ea       	ldi	r16, 0xAE	; 174
   155a2:	10 e2       	ldi	r17, 0x20	; 32
   155a4:	cb e0       	ldi	r28, 0x0B	; 11
   155a6:	d0 e0       	ldi	r29, 0x00	; 0
   155a8:	82 e0       	ldi	r24, 0x02	; 2
   155aa:	f8 2e       	mov	r15, r24
   155ac:	86 e4       	ldi	r24, 0x46	; 70
   155ae:	94 e2       	ldi	r25, 0x24	; 36
   155b0:	6c 01       	movw	r12, r24
   155b2:	e1 2c       	mov	r14, r1
   155b4:	f8 01       	movw	r30, r16
   155b6:	80 81       	ld	r24, Z
   155b8:	83 30       	cpi	r24, 0x03	; 3
   155ba:	29 f5       	brne	.+74     	; 0x15606 <SS80_init+0x72>
   155bc:	ce 01       	movw	r24, r28
   155be:	0e 94 17 97 	call	0x12e2e	; 0x12e2e <set_active_device>
   155c2:	89 2b       	or	r24, r25
   155c4:	01 f1       	breq	.+64     	; 0x15606 <SS80_init+0x72>
   155c6:	8f e0       	ldi	r24, 0x0F	; 15
   155c8:	90 e0       	ldi	r25, 0x00	; 0
   155ca:	c5 df       	rcall	.-118    	; 0x15556 <Clear_Common>
   155cc:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   155d0:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   155d4:	f2 82       	std	Z+2, r15	; 0x02
   155d6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   155da:	85 ff       	sbrs	r24, 5
   155dc:	0c c0       	rjmp	.+24     	; 0x155f6 <SS80_init+0x62>
   155de:	f8 01       	movw	r30, r16
   155e0:	81 81       	ldd	r24, Z+1	; 0x01
   155e2:	90 e0       	ldi	r25, 0x00	; 0
   155e4:	ed b7       	in	r30, 0x3d	; 61
   155e6:	fe b7       	in	r31, 0x3e	; 62
   155e8:	95 83       	std	Z+5, r25	; 0x05
   155ea:	84 83       	std	Z+4, r24	; 0x04
   155ec:	c1 82       	std	Z+1, r12	; 0x01
   155ee:	d2 82       	std	Z+2, r13	; 0x02
   155f0:	e3 82       	std	Z+3, r14	; 0x03
   155f2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   155f6:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   155fa:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   155fe:	81 81       	ldd	r24, Z+1	; 0x01
   15600:	90 e0       	ldi	r25, 0x00	; 0
   15602:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
   15606:	21 97       	sbiw	r28, 0x01	; 1
   15608:	0b 52       	subi	r16, 0x2B	; 43
   1560a:	11 09       	sbc	r17, r1
   1560c:	cf 3f       	cpi	r28, 0xFF	; 255
   1560e:	ff ef       	ldi	r31, 0xFF	; 255
   15610:	df 07       	cpc	r29, r31
   15612:	81 f6       	brne	.-96     	; 0x155b4 <SS80_init+0x20>
   15614:	cd b7       	in	r28, 0x3d	; 61
   15616:	de b7       	in	r29, 0x3e	; 62
   15618:	25 96       	adiw	r28, 0x05	; 5
   1561a:	e8 e0       	ldi	r30, 0x08	; 8
   1561c:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

00015620 <SS80_Channel_Independent_Clear>:
   15620:	9a df       	rcall	.-204    	; 0x15556 <Clear_Common>
   15622:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15626:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1562a:	81 81       	ldd	r24, Z+1	; 0x01
   1562c:	90 e0       	ldi	r25, 0x00	; 0
   1562e:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   15632:	80 e0       	ldi	r24, 0x00	; 0
   15634:	90 e0       	ldi	r25, 0x00	; 0
   15636:	08 95       	ret

00015638 <SS80_Universal_Device_Clear>:
   15638:	8f e0       	ldi	r24, 0x0F	; 15
   1563a:	90 e0       	ldi	r25, 0x00	; 0
   1563c:	8c df       	rcall	.-232    	; 0x15556 <Clear_Common>
   1563e:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15642:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15646:	81 81       	ldd	r24, Z+1	; 0x01
   15648:	90 e0       	ldi	r25, 0x00	; 0
   1564a:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   1564e:	80 e0       	ldi	r24, 0x00	; 0
   15650:	90 e0       	ldi	r25, 0x00	; 0
   15652:	08 95       	ret

00015654 <SS80_Selected_Device_Clear>:
   15654:	cf 93       	push	r28
   15656:	df 93       	push	r29
   15658:	00 d0       	rcall	.+0      	; 0x1565a <SS80_Selected_Device_Clear+0x6>
   1565a:	1f 92       	push	r1
   1565c:	ec 01       	movw	r28, r24
   1565e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15662:	85 ff       	sbrs	r24, 5
   15664:	0a c0       	rjmp	.+20     	; 0x1567a <SS80_Selected_Device_Clear+0x26>
   15666:	8d e6       	ldi	r24, 0x6D	; 109
   15668:	9d e1       	ldi	r25, 0x1D	; 29
   1566a:	a0 e0       	ldi	r26, 0x00	; 0
   1566c:	ed b7       	in	r30, 0x3d	; 61
   1566e:	fe b7       	in	r31, 0x3e	; 62
   15670:	81 83       	std	Z+1, r24	; 0x01
   15672:	92 83       	std	Z+2, r25	; 0x02
   15674:	a3 83       	std	Z+3, r26	; 0x03
   15676:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1567a:	ce 01       	movw	r24, r28
   1567c:	6c df       	rcall	.-296    	; 0x15556 <Clear_Common>
   1567e:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15682:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15686:	81 81       	ldd	r24, Z+1	; 0x01
   15688:	90 e0       	ldi	r25, 0x00	; 0
   1568a:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   1568e:	80 e0       	ldi	r24, 0x00	; 0
   15690:	90 e0       	ldi	r25, 0x00	; 0
   15692:	cd b7       	in	r28, 0x3d	; 61
   15694:	de b7       	in	r29, 0x3e	; 62
   15696:	23 96       	adiw	r28, 0x03	; 3
   15698:	e2 e0       	ldi	r30, 0x02	; 2
   1569a:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0001569e <SS80_Amigo_Clear>:
   1569e:	a6 e0       	ldi	r26, 0x06	; 6
   156a0:	b0 e0       	ldi	r27, 0x00	; 0
   156a2:	e5 e5       	ldi	r30, 0x55	; 85
   156a4:	fb ea       	ldi	r31, 0xAB	; 171
   156a6:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   156aa:	1d 82       	std	Y+5, r1	; 0x05
   156ac:	1c 82       	std	Y+4, r1	; 0x04
   156ae:	ae 01       	movw	r20, r28
   156b0:	4c 5f       	subi	r20, 0xFC	; 252
   156b2:	5f 4f       	sbci	r21, 0xFF	; 255
   156b4:	61 e0       	ldi	r22, 0x01	; 1
   156b6:	70 e0       	ldi	r23, 0x00	; 0
   156b8:	ce 01       	movw	r24, r28
   156ba:	06 96       	adiw	r24, 0x06	; 6
   156bc:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
   156c0:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   156c4:	01 97       	sbiw	r24, 0x01	; 1
   156c6:	89 f0       	breq	.+34     	; 0x156ea <SS80_Amigo_Clear+0x4c>
   156c8:	21 ff       	sbrs	r18, 1
   156ca:	0a c0       	rjmp	.+20     	; 0x156e0 <SS80_Amigo_Clear+0x42>
   156cc:	8a e5       	ldi	r24, 0x5A	; 90
   156ce:	9d e1       	ldi	r25, 0x1D	; 29
   156d0:	a0 e0       	ldi	r26, 0x00	; 0
   156d2:	ed b7       	in	r30, 0x3d	; 61
   156d4:	fe b7       	in	r31, 0x3e	; 62
   156d6:	81 83       	std	Z+1, r24	; 0x01
   156d8:	92 83       	std	Z+2, r25	; 0x02
   156da:	a3 83       	std	Z+3, r26	; 0x03
   156dc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   156e0:	8c 81       	ldd	r24, Y+4	; 0x04
   156e2:	9d 81       	ldd	r25, Y+5	; 0x05
   156e4:	88 27       	eor	r24, r24
   156e6:	90 7d       	andi	r25, 0xD0	; 208
   156e8:	19 c0       	rjmp	.+50     	; 0x1571c <SS80_Amigo_Clear+0x7e>
   156ea:	25 ff       	sbrs	r18, 5
   156ec:	0a c0       	rjmp	.+20     	; 0x15702 <SS80_Amigo_Clear+0x64>
   156ee:	8b e4       	ldi	r24, 0x4B	; 75
   156f0:	9d e1       	ldi	r25, 0x1D	; 29
   156f2:	a0 e0       	ldi	r26, 0x00	; 0
   156f4:	ed b7       	in	r30, 0x3d	; 61
   156f6:	fe b7       	in	r31, 0x3e	; 62
   156f8:	81 83       	std	Z+1, r24	; 0x01
   156fa:	92 83       	std	Z+2, r25	; 0x02
   156fc:	a3 83       	std	Z+3, r26	; 0x03
   156fe:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15702:	8f e0       	ldi	r24, 0x0F	; 15
   15704:	90 e0       	ldi	r25, 0x00	; 0
   15706:	27 df       	rcall	.-434    	; 0x15556 <Clear_Common>
   15708:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   1570c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15710:	81 81       	ldd	r24, Z+1	; 0x01
   15712:	90 e0       	ldi	r25, 0x00	; 0
   15714:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   15718:	80 e0       	ldi	r24, 0x00	; 0
   1571a:	90 e0       	ldi	r25, 0x00	; 0
   1571c:	26 96       	adiw	r28, 0x06	; 6
   1571e:	e2 e0       	ldi	r30, 0x02	; 2
   15720:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00015724 <SS80_Cancel>:
   15724:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15728:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   1572c:	11 82       	std	Z+1, r1	; 0x01
   1572e:	10 82       	st	Z, r1
   15730:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15734:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15738:	81 81       	ldd	r24, Z+1	; 0x01
   1573a:	90 e0       	ldi	r25, 0x00	; 0
   1573c:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   15740:	80 e0       	ldi	r24, 0x00	; 0
   15742:	90 e0       	ldi	r25, 0x00	; 0
   15744:	08 95       	ret

00015746 <SS80_Transparent_State>:
   15746:	a9 e0       	ldi	r26, 0x09	; 9
   15748:	b0 e0       	ldi	r27, 0x00	; 0
   1574a:	e9 ea       	ldi	r30, 0xA9	; 169
   1574c:	fb ea       	ldi	r31, 0xAB	; 171
   1574e:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
   15752:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15756:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   1575a:	81 81       	ldd	r24, Z+1	; 0x01
   1575c:	90 e0       	ldi	r25, 0x00	; 0
   1575e:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
   15762:	80 e0       	ldi	r24, 0x00	; 0
   15764:	91 e0       	ldi	r25, 0x01	; 1
   15766:	99 87       	std	Y+9, r25	; 0x09
   15768:	88 87       	std	Y+8, r24	; 0x08
   1576a:	ae 01       	movw	r20, r28
   1576c:	48 5f       	subi	r20, 0xF8	; 248
   1576e:	5f 4f       	sbci	r21, 0xFF	; 255
   15770:	60 e0       	ldi	r22, 0x00	; 0
   15772:	72 e0       	ldi	r23, 0x02	; 2
   15774:	8b ec       	ldi	r24, 0xCB	; 203
   15776:	9c e1       	ldi	r25, 0x1C	; 28
   15778:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
   1577c:	7c 01       	movw	r14, r24
   1577e:	88 85       	ldd	r24, Y+8	; 0x08
   15780:	99 85       	ldd	r25, Y+9	; 0x09
   15782:	9c 01       	movw	r18, r24
   15784:	22 27       	eor	r18, r18
   15786:	30 7d       	andi	r19, 0xD0	; 208
   15788:	23 2b       	or	r18, r19
   1578a:	79 f0       	breq	.+30     	; 0x157aa <SS80_Transparent_State+0x64>
   1578c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15790:	81 ff       	sbrs	r24, 1
   15792:	da c0       	rjmp	.+436    	; 0x15948 <SS80_Transparent_State+0x202>
   15794:	8a ee       	ldi	r24, 0xEA	; 234
   15796:	9e e1       	ldi	r25, 0x1E	; 30
   15798:	a0 e0       	ldi	r26, 0x00	; 0
   1579a:	ed b7       	in	r30, 0x3d	; 61
   1579c:	fe b7       	in	r31, 0x3e	; 62
   1579e:	81 83       	std	Z+1, r24	; 0x01
   157a0:	92 83       	std	Z+2, r25	; 0x02
   157a2:	a3 83       	std	Z+3, r26	; 0x03
   157a4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   157a8:	cf c0       	rjmp	.+414    	; 0x15948 <SS80_Transparent_State+0x202>
   157aa:	e1 14       	cp	r14, r1
   157ac:	f1 04       	cpc	r15, r1
   157ae:	09 f4       	brne	.+2      	; 0x157b2 <SS80_Transparent_State+0x6c>
   157b0:	d0 c0       	rjmp	.+416    	; 0x15952 <SS80_Transparent_State+0x20c>
   157b2:	90 fd       	sbrc	r25, 0
   157b4:	0e c0       	rjmp	.+28     	; 0x157d2 <SS80_Transparent_State+0x8c>
   157b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   157ba:	81 ff       	sbrs	r24, 1
   157bc:	0a c0       	rjmp	.+20     	; 0x157d2 <SS80_Transparent_State+0x8c>
   157be:	81 ed       	ldi	r24, 0xD1	; 209
   157c0:	9e e1       	ldi	r25, 0x1E	; 30
   157c2:	a0 e0       	ldi	r26, 0x00	; 0
   157c4:	ed b7       	in	r30, 0x3d	; 61
   157c6:	fe b7       	in	r31, 0x3e	; 62
   157c8:	81 83       	std	Z+1, r24	; 0x01
   157ca:	92 83       	std	Z+2, r25	; 0x02
   157cc:	a3 83       	std	Z+3, r26	; 0x03
   157ce:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   157d2:	8b ec       	ldi	r24, 0xCB	; 203
   157d4:	a8 2e       	mov	r10, r24
   157d6:	8c e1       	ldi	r24, 0x1C	; 28
   157d8:	b8 2e       	mov	r11, r24
   157da:	00 e0       	ldi	r16, 0x00	; 0
   157dc:	10 e0       	ldi	r17, 0x00	; 0
   157de:	0e 15       	cp	r16, r14
   157e0:	1f 05       	cpc	r17, r15
   157e2:	0c f0       	brlt	.+2      	; 0x157e6 <SS80_Transparent_State+0xa0>
   157e4:	9c c0       	rjmp	.+312    	; 0x1591e <SS80_Transparent_State+0x1d8>
   157e6:	68 01       	movw	r12, r16
   157e8:	ff ef       	ldi	r31, 0xFF	; 255
   157ea:	cf 1a       	sub	r12, r31
   157ec:	df 0a       	sbc	r13, r31
   157ee:	f5 01       	movw	r30, r10
   157f0:	81 91       	ld	r24, Z+
   157f2:	5f 01       	movw	r10, r30
   157f4:	28 2f       	mov	r18, r24
   157f6:	30 e0       	ldi	r19, 0x00	; 0
   157f8:	a9 01       	movw	r20, r18
   157fa:	40 52       	subi	r20, 0x20	; 32
   157fc:	51 09       	sbc	r21, r1
   157fe:	40 31       	cpi	r20, 0x10	; 16
   15800:	51 05       	cpc	r21, r1
   15802:	20 f4       	brcc	.+8      	; 0x1580c <SS80_Transparent_State+0xc6>
   15804:	80 52       	subi	r24, 0x20	; 32
   15806:	8c d9       	rcall	.-3304   	; 0x14b20 <SS80_Check_Unit>
   15808:	86 01       	movw	r16, r12
   1580a:	e9 cf       	rjmp	.-46     	; 0x157de <SS80_Transparent_State+0x98>
   1580c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15810:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   15814:	21 30       	cpi	r18, 0x01	; 1
   15816:	31 05       	cpc	r19, r1
   15818:	c9 f4       	brne	.+50     	; 0x1584c <SS80_Transparent_State+0x106>
   1581a:	0e 5f       	subi	r16, 0xFE	; 254
   1581c:	1f 4f       	sbci	r17, 0xFF	; 255
   1581e:	80 73       	andi	r24, 0x30	; 48
   15820:	99 27       	eor	r25, r25
   15822:	89 2b       	or	r24, r25
   15824:	51 f0       	breq	.+20     	; 0x1583a <SS80_Transparent_State+0xf4>
   15826:	8c ea       	ldi	r24, 0xAC	; 172
   15828:	9e e1       	ldi	r25, 0x1E	; 30
   1582a:	a0 e0       	ldi	r26, 0x00	; 0
   1582c:	ed b7       	in	r30, 0x3d	; 61
   1582e:	fe b7       	in	r31, 0x3e	; 62
   15830:	81 83       	std	Z+1, r24	; 0x01
   15832:	92 83       	std	Z+2, r25	; 0x02
   15834:	a3 83       	std	Z+3, r26	; 0x03
   15836:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1583a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   1583e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15842:	81 81       	ldd	r24, Z+1	; 0x01
   15844:	90 e0       	ldi	r25, 0x00	; 0
   15846:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   1584a:	69 c0       	rjmp	.+210    	; 0x1591e <SS80_Transparent_State+0x1d8>
   1584c:	22 30       	cpi	r18, 0x02	; 2
   1584e:	31 05       	cpc	r19, r1
   15850:	51 f4       	brne	.+20     	; 0x15866 <SS80_Transparent_State+0x120>
   15852:	0b 5f       	subi	r16, 0xFB	; 251
   15854:	1f 4f       	sbci	r17, 0xFF	; 255
   15856:	80 73       	andi	r24, 0x30	; 48
   15858:	99 27       	eor	r25, r25
   1585a:	89 2b       	or	r24, r25
   1585c:	09 f4       	brne	.+2      	; 0x15860 <SS80_Transparent_State+0x11a>
   1585e:	5f c0       	rjmp	.+190    	; 0x1591e <SS80_Transparent_State+0x1d8>
   15860:	8f e8       	ldi	r24, 0x8F	; 143
   15862:	9e e1       	ldi	r25, 0x1E	; 30
   15864:	0c c0       	rjmp	.+24     	; 0x1587e <SS80_Transparent_State+0x138>
   15866:	23 30       	cpi	r18, 0x03	; 3
   15868:	31 05       	cpc	r19, r1
   1586a:	91 f4       	brne	.+36     	; 0x15890 <SS80_Transparent_State+0x14a>
   1586c:	0b 5f       	subi	r16, 0xFB	; 251
   1586e:	1f 4f       	sbci	r17, 0xFF	; 255
   15870:	80 73       	andi	r24, 0x30	; 48
   15872:	99 27       	eor	r25, r25
   15874:	89 2b       	or	r24, r25
   15876:	09 f4       	brne	.+2      	; 0x1587a <SS80_Transparent_State+0x134>
   15878:	52 c0       	rjmp	.+164    	; 0x1591e <SS80_Transparent_State+0x1d8>
   1587a:	81 e7       	ldi	r24, 0x71	; 113
   1587c:	9e e1       	ldi	r25, 0x1E	; 30
   1587e:	a0 e0       	ldi	r26, 0x00	; 0
   15880:	ed b7       	in	r30, 0x3d	; 61
   15882:	fe b7       	in	r31, 0x3e	; 62
   15884:	81 83       	std	Z+1, r24	; 0x01
   15886:	92 83       	std	Z+2, r25	; 0x02
   15888:	a3 83       	std	Z+3, r26	; 0x03
   1588a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1588e:	47 c0       	rjmp	.+142    	; 0x1591e <SS80_Transparent_State+0x1d8>
   15890:	28 30       	cpi	r18, 0x08	; 8
   15892:	31 05       	cpc	r19, r1
   15894:	e1 f4       	brne	.+56     	; 0x158ce <SS80_Transparent_State+0x188>
   15896:	85 ff       	sbrs	r24, 5
   15898:	12 c0       	rjmp	.+36     	; 0x158be <SS80_Transparent_State+0x178>
   1589a:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   1589e:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   158a2:	85 81       	ldd	r24, Z+5	; 0x05
   158a4:	90 e0       	ldi	r25, 0x00	; 0
   158a6:	ed b7       	in	r30, 0x3d	; 61
   158a8:	fe b7       	in	r31, 0x3e	; 62
   158aa:	95 83       	std	Z+5, r25	; 0x05
   158ac:	84 83       	std	Z+4, r24	; 0x04
   158ae:	8a e4       	ldi	r24, 0x4A	; 74
   158b0:	9e e1       	ldi	r25, 0x1E	; 30
   158b2:	a0 e0       	ldi	r26, 0x00	; 0
   158b4:	81 83       	std	Z+1, r24	; 0x01
   158b6:	92 83       	std	Z+2, r25	; 0x02
   158b8:	a3 83       	std	Z+3, r26	; 0x03
   158ba:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   158be:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   158c2:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   158c6:	85 81       	ldd	r24, Z+5	; 0x05
   158c8:	90 e0       	ldi	r25, 0x00	; 0
   158ca:	aa de       	rcall	.-684    	; 0x15620 <SS80_Channel_Independent_Clear>
   158cc:	44 c0       	rjmp	.+136    	; 0x15956 <SS80_Transparent_State+0x210>
   158ce:	29 30       	cpi	r18, 0x09	; 9
   158d0:	31 05       	cpc	r19, r1
   158d2:	b1 f4       	brne	.+44     	; 0x15900 <SS80_Transparent_State+0x1ba>
   158d4:	85 ff       	sbrs	r24, 5
   158d6:	12 c0       	rjmp	.+36     	; 0x158fc <SS80_Transparent_State+0x1b6>
   158d8:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   158dc:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   158e0:	85 81       	ldd	r24, Z+5	; 0x05
   158e2:	90 e0       	ldi	r25, 0x00	; 0
   158e4:	ed b7       	in	r30, 0x3d	; 61
   158e6:	fe b7       	in	r31, 0x3e	; 62
   158e8:	95 83       	std	Z+5, r25	; 0x05
   158ea:	84 83       	std	Z+4, r24	; 0x04
   158ec:	86 e3       	ldi	r24, 0x36	; 54
   158ee:	9e e1       	ldi	r25, 0x1E	; 30
   158f0:	a0 e0       	ldi	r26, 0x00	; 0
   158f2:	81 83       	std	Z+1, r24	; 0x01
   158f4:	92 83       	std	Z+2, r25	; 0x02
   158f6:	a3 83       	std	Z+3, r26	; 0x03
   158f8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   158fc:	13 df       	rcall	.-474    	; 0x15724 <SS80_Cancel>
   158fe:	2b c0       	rjmp	.+86     	; 0x15956 <SS80_Transparent_State+0x210>
   15900:	81 ff       	sbrs	r24, 1
   15902:	22 c0       	rjmp	.+68     	; 0x15948 <SS80_Transparent_State+0x202>
   15904:	ed b7       	in	r30, 0x3d	; 61
   15906:	fe b7       	in	r31, 0x3e	; 62
   15908:	35 83       	std	Z+5, r19	; 0x05
   1590a:	24 83       	std	Z+4, r18	; 0x04
   1590c:	86 e1       	ldi	r24, 0x16	; 22
   1590e:	9e e1       	ldi	r25, 0x1E	; 30
   15910:	a0 e0       	ldi	r26, 0x00	; 0
   15912:	81 83       	std	Z+1, r24	; 0x01
   15914:	92 83       	std	Z+2, r25	; 0x02
   15916:	a3 83       	std	Z+3, r26	; 0x03
   15918:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1591c:	86 01       	movw	r16, r12
   1591e:	0e 15       	cp	r16, r14
   15920:	1f 05       	cpc	r17, r15
   15922:	91 f0       	breq	.+36     	; 0x15948 <SS80_Transparent_State+0x202>
   15924:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15928:	81 ff       	sbrs	r24, 1
   1592a:	0e c0       	rjmp	.+28     	; 0x15948 <SS80_Transparent_State+0x202>
   1592c:	ed b7       	in	r30, 0x3d	; 61
   1592e:	fe b7       	in	r31, 0x3e	; 62
   15930:	f7 82       	std	Z+7, r15	; 0x07
   15932:	e6 82       	std	Z+6, r14	; 0x06
   15934:	15 83       	std	Z+5, r17	; 0x05
   15936:	04 83       	std	Z+4, r16	; 0x04
   15938:	8a ed       	ldi	r24, 0xDA	; 218
   1593a:	9d e1       	ldi	r25, 0x1D	; 29
   1593c:	a0 e0       	ldi	r26, 0x00	; 0
   1593e:	81 83       	std	Z+1, r24	; 0x01
   15940:	92 83       	std	Z+2, r25	; 0x02
   15942:	a3 83       	std	Z+3, r26	; 0x03
   15944:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15948:	88 85       	ldd	r24, Y+8	; 0x08
   1594a:	99 85       	ldd	r25, Y+9	; 0x09
   1594c:	88 27       	eor	r24, r24
   1594e:	90 7d       	andi	r25, 0xD0	; 208
   15950:	02 c0       	rjmp	.+4      	; 0x15956 <SS80_Transparent_State+0x210>
   15952:	80 e0       	ldi	r24, 0x00	; 0
   15954:	90 e0       	ldi	r25, 0x00	; 0
   15956:	29 96       	adiw	r28, 0x09	; 9
   15958:	ea e0       	ldi	r30, 0x0A	; 10
   1595a:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0001595e <SS80_error_return>:
   1595e:	a6 e0       	ldi	r26, 0x06	; 6
   15960:	b0 e0       	ldi	r27, 0x00	; 0
   15962:	e5 eb       	ldi	r30, 0xB5	; 181
   15964:	fc ea       	ldi	r31, 0xAC	; 172
   15966:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   1596a:	80 e0       	ldi	r24, 0x00	; 0
   1596c:	91 e0       	ldi	r25, 0x01	; 1
   1596e:	9d 83       	std	Y+5, r25	; 0x05
   15970:	8c 83       	std	Y+4, r24	; 0x04
   15972:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15976:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   1597a:	81 e0       	ldi	r24, 0x01	; 1
   1597c:	82 83       	std	Z+2, r24	; 0x02
   1597e:	8e 83       	std	Y+6, r24	; 0x06
   15980:	ae 01       	movw	r20, r28
   15982:	4c 5f       	subi	r20, 0xFC	; 252
   15984:	5f 4f       	sbci	r21, 0xFF	; 255
   15986:	61 e0       	ldi	r22, 0x01	; 1
   15988:	70 e0       	ldi	r23, 0x00	; 0
   1598a:	ce 01       	movw	r24, r28
   1598c:	06 96       	adiw	r24, 0x06	; 6
   1598e:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   15992:	01 97       	sbiw	r24, 0x01	; 1
   15994:	99 f0       	breq	.+38     	; 0x159bc <SS80_error_return+0x5e>
   15996:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1599a:	81 ff       	sbrs	r24, 1
   1599c:	0a c0       	rjmp	.+20     	; 0x159b2 <SS80_error_return+0x54>
   1599e:	88 e2       	ldi	r24, 0x28	; 40
   159a0:	9d e1       	ldi	r25, 0x1D	; 29
   159a2:	a0 e0       	ldi	r26, 0x00	; 0
   159a4:	ed b7       	in	r30, 0x3d	; 61
   159a6:	fe b7       	in	r31, 0x3e	; 62
   159a8:	81 83       	std	Z+1, r24	; 0x01
   159aa:	92 83       	std	Z+2, r25	; 0x02
   159ac:	a3 83       	std	Z+3, r26	; 0x03
   159ae:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   159b2:	8c 81       	ldd	r24, Y+4	; 0x04
   159b4:	9d 81       	ldd	r25, Y+5	; 0x05
   159b6:	88 27       	eor	r24, r24
   159b8:	90 7d       	andi	r25, 0xD0	; 208
   159ba:	07 c0       	rjmp	.+14     	; 0x159ca <SS80_error_return+0x6c>
   159bc:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   159c0:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   159c4:	12 82       	std	Z+2, r1	; 0x02
   159c6:	80 e0       	ldi	r24, 0x00	; 0
   159c8:	90 e0       	ldi	r25, 0x00	; 0
   159ca:	26 96       	adiw	r28, 0x06	; 6
   159cc:	e2 e0       	ldi	r30, 0x02	; 2
   159ce:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000159d2 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   159d2:	a7 e1       	ldi	r26, 0x17	; 23
   159d4:	b0 e0       	ldi	r27, 0x00	; 0
   159d6:	ef ee       	ldi	r30, 0xEF	; 239
   159d8:	fc ea       	ldi	r31, 0xAC	; 172
   159da:	0c 94 92 e0 	jmp	0x1c124	; 0x1c124 <__prologue_saves__+0x2>
   159de:	60 91 4e 19 	lds	r22, 0x194E	; 0x80194e <SS80s>
   159e2:	70 91 4f 19 	lds	r23, 0x194F	; 0x80194f <SS80s+0x1>
   159e6:	fb 01       	movw	r30, r22
   159e8:	27 81       	ldd	r18, Z+7	; 0x07
   159ea:	30 85       	ldd	r19, Z+8	; 0x08
   159ec:	41 85       	ldd	r20, Z+9	; 0x09
   159ee:	52 85       	ldd	r21, Z+10	; 0x0a
   159f0:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <SS80p>
   159f4:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <SS80p+0x1>
   159f8:	fc 01       	movw	r30, r24
   159fa:	a0 89       	ldd	r26, Z+16	; 0x10
   159fc:	b1 89       	ldd	r27, Z+17	; 0x11
   159fe:	fb 01       	movw	r30, r22
   15a00:	12 82       	std	Z+2, r1	; 0x02
   15a02:	1d 86       	std	Y+13, r1	; 0x0d
   15a04:	1c 86       	std	Y+12, r1	; 0x0c
   15a06:	54 98       	cbi	0x0a, 4	; 10
   15a08:	4c 99       	sbic	0x09, 4	; 9
   15a0a:	03 c0       	rjmp	.+6      	; 0x15a12 <SS80_locate_and_read+0x40>
   15a0c:	80 e0       	ldi	r24, 0x00	; 0
   15a0e:	90 e1       	ldi	r25, 0x10	; 16
   15a10:	3e c1       	rjmp	.+636    	; 0x15c8e <SS80_locate_and_read+0x2bc>
   15a12:	0e 94 71 e0 	call	0x1c0e2	; 0x1c0e2 <__muluhisi3>
   15a16:	4b 01       	movw	r8, r22
   15a18:	5c 01       	movw	r10, r24
   15a1a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a1e:	85 ff       	sbrs	r24, 5
   15a20:	1a c0       	rjmp	.+52     	; 0x15a56 <SS80_locate_and_read+0x84>
   15a22:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15a26:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15a2a:	83 85       	ldd	r24, Z+11	; 0x0b
   15a2c:	94 85       	ldd	r25, Z+12	; 0x0c
   15a2e:	a5 85       	ldd	r26, Z+13	; 0x0d
   15a30:	b6 85       	ldd	r27, Z+14	; 0x0e
   15a32:	ed b7       	in	r30, 0x3d	; 61
   15a34:	fe b7       	in	r31, 0x3e	; 62
   15a36:	80 87       	std	Z+8, r24	; 0x08
   15a38:	91 87       	std	Z+9, r25	; 0x09
   15a3a:	a2 87       	std	Z+10, r26	; 0x0a
   15a3c:	b3 87       	std	Z+11, r27	; 0x0b
   15a3e:	84 82       	std	Z+4, r8	; 0x04
   15a40:	95 82       	std	Z+5, r9	; 0x05
   15a42:	a6 82       	std	Z+6, r10	; 0x06
   15a44:	b7 82       	std	Z+7, r11	; 0x07
   15a46:	82 e0       	ldi	r24, 0x02	; 2
   15a48:	94 e2       	ldi	r25, 0x24	; 36
   15a4a:	a0 e0       	ldi	r26, 0x00	; 0
   15a4c:	81 83       	std	Z+1, r24	; 0x01
   15a4e:	92 83       	std	Z+2, r25	; 0x02
   15a50:	a3 83       	std	Z+3, r26	; 0x03
   15a52:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15a56:	2b db       	rcall	.-2474   	; 0x150ae <SS80_cmd_seek>
   15a58:	89 2b       	or	r24, r25
   15a5a:	09 f0       	breq	.+2      	; 0x15a5e <SS80_locate_and_read+0x8c>
   15a5c:	ae c0       	rjmp	.+348    	; 0x15bba <SS80_locate_and_read+0x1e8>
   15a5e:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15a62:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15a66:	43 84       	ldd	r4, Z+11	; 0x0b
   15a68:	54 84       	ldd	r5, Z+12	; 0x0c
   15a6a:	65 84       	ldd	r6, Z+13	; 0x0d
   15a6c:	76 84       	ldd	r7, Z+14	; 0x0e
   15a6e:	1e 86       	std	Y+14, r1	; 0x0e
   15a70:	1f 86       	std	Y+15, r1	; 0x0f
   15a72:	18 8a       	std	Y+16, r1	; 0x10
   15a74:	19 8a       	std	Y+17, r1	; 0x11
   15a76:	84 ee       	ldi	r24, 0xE4	; 228
   15a78:	93 e2       	ldi	r25, 0x23	; 35
   15a7a:	9c 01       	movw	r18, r24
   15a7c:	40 e0       	ldi	r20, 0x00	; 0
   15a7e:	2a 8b       	std	Y+18, r18	; 0x12
   15a80:	3b 8b       	std	Y+19, r19	; 0x13
   15a82:	4c 8b       	std	Y+20, r20	; 0x14
   15a84:	33 24       	eor	r3, r3
   15a86:	33 94       	inc	r3
   15a88:	83 eb       	ldi	r24, 0xB3	; 179
   15a8a:	93 e2       	ldi	r25, 0x23	; 35
   15a8c:	9c 01       	movw	r18, r24
   15a8e:	40 e0       	ldi	r20, 0x00	; 0
   15a90:	2d 8b       	std	Y+21, r18	; 0x15
   15a92:	3e 8b       	std	Y+22, r19	; 0x16
   15a94:	4f 8b       	std	Y+23, r20	; 0x17
   15a96:	34 c0       	rjmp	.+104    	; 0x15b00 <SS80_locate_and_read+0x12e>
   15a98:	87 fd       	sbrc	r24, 7
   15a9a:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   15a9e:	ae 01       	movw	r20, r28
   15aa0:	44 5f       	subi	r20, 0xF4	; 244
   15aa2:	5f 4f       	sbci	r21, 0xFF	; 255
   15aa4:	b6 01       	movw	r22, r12
   15aa6:	8b ec       	ldi	r24, 0xCB	; 203
   15aa8:	9c e1       	ldi	r25, 0x1C	; 28
   15aaa:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   15aae:	8c 01       	movw	r16, r24
   15ab0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15ab4:	87 ff       	sbrs	r24, 7
   15ab6:	04 c0       	rjmp	.+8      	; 0x15ac0 <SS80_locate_and_read+0xee>
   15ab8:	8b e6       	ldi	r24, 0x6B	; 107
   15aba:	90 e1       	ldi	r25, 0x10	; 16
   15abc:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   15ac0:	c0 16       	cp	r12, r16
   15ac2:	d1 06       	cpc	r13, r17
   15ac4:	09 f0       	breq	.+2      	; 0x15ac8 <SS80_locate_and_read+0xf6>
   15ac6:	82 c0       	rjmp	.+260    	; 0x15bcc <SS80_locate_and_read+0x1fa>
   15ac8:	0d 2c       	mov	r0, r13
   15aca:	00 0c       	add	r0, r0
   15acc:	ee 08       	sbc	r14, r14
   15ace:	ff 08       	sbc	r15, r15
   15ad0:	8c 0c       	add	r8, r12
   15ad2:	9d 1c       	adc	r9, r13
   15ad4:	ae 1c       	adc	r10, r14
   15ad6:	bf 1c       	adc	r11, r15
   15ad8:	01 2e       	mov	r0, r17
   15ada:	00 0c       	add	r0, r0
   15adc:	22 0b       	sbc	r18, r18
   15ade:	33 0b       	sbc	r19, r19
   15ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
   15ae2:	9f 85       	ldd	r25, Y+15	; 0x0f
   15ae4:	a8 89       	ldd	r26, Y+16	; 0x10
   15ae6:	b9 89       	ldd	r27, Y+17	; 0x11
   15ae8:	80 0f       	add	r24, r16
   15aea:	91 1f       	adc	r25, r17
   15aec:	a2 1f       	adc	r26, r18
   15aee:	b3 1f       	adc	r27, r19
   15af0:	8e 87       	std	Y+14, r24	; 0x0e
   15af2:	9f 87       	std	Y+15, r25	; 0x0f
   15af4:	a8 8b       	std	Y+16, r26	; 0x10
   15af6:	b9 8b       	std	Y+17, r27	; 0x11
   15af8:	40 1a       	sub	r4, r16
   15afa:	51 0a       	sbc	r5, r17
   15afc:	62 0a       	sbc	r6, r18
   15afe:	73 0a       	sbc	r7, r19
   15b00:	41 14       	cp	r4, r1
   15b02:	51 04       	cpc	r5, r1
   15b04:	61 04       	cpc	r6, r1
   15b06:	71 04       	cpc	r7, r1
   15b08:	09 f4       	brne	.+2      	; 0x15b0c <SS80_locate_and_read+0x13a>
   15b0a:	92 c0       	rjmp	.+292    	; 0x15c30 <SS80_locate_and_read+0x25e>
   15b0c:	54 98       	cbi	0x0a, 4	; 10
   15b0e:	4c 9b       	sbis	0x09, 4	; 9
   15b10:	7d cf       	rjmp	.-262    	; 0x15a0c <SS80_locate_and_read+0x3a>
   15b12:	31 e0       	ldi	r19, 0x01	; 1
   15b14:	43 16       	cp	r4, r19
   15b16:	53 06       	cpc	r5, r19
   15b18:	61 04       	cpc	r6, r1
   15b1a:	71 04       	cpc	r7, r1
   15b1c:	08 f4       	brcc	.+2      	; 0x15b20 <SS80_locate_and_read+0x14e>
   15b1e:	4f c0       	rjmp	.+158    	; 0x15bbe <SS80_locate_and_read+0x1ec>
   15b20:	1d 86       	std	Y+13, r1	; 0x0d
   15b22:	1c 86       	std	Y+12, r1	; 0x0c
   15b24:	c1 2c       	mov	r12, r1
   15b26:	dd 24       	eor	r13, r13
   15b28:	d3 94       	inc	r13
   15b2a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b2e:	86 fd       	sbrc	r24, 6
   15b30:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   15b34:	e0 90 4e 19 	lds	r14, 0x194E	; 0x80194e <SS80s>
   15b38:	f0 90 4f 19 	lds	r15, 0x194F	; 0x80194f <SS80s+0x1>
   15b3c:	43 e0       	ldi	r20, 0x03	; 3
   15b3e:	e4 0e       	add	r14, r20
   15b40:	f1 1c       	adc	r15, r1
   15b42:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15b46:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15b4a:	86 01       	movw	r16, r12
   15b4c:	2b ec       	ldi	r18, 0xCB	; 203
   15b4e:	3c e1       	ldi	r19, 0x1C	; 28
   15b50:	b5 01       	movw	r22, r10
   15b52:	a4 01       	movw	r20, r8
   15b54:	82 81       	ldd	r24, Z+2	; 0x02
   15b56:	93 81       	ldd	r25, Z+3	; 0x03
   15b58:	0e 94 7c 84 	call	0x108f8	; 0x108f8 <dbf_open_read>
   15b5c:	8c 01       	movw	r16, r24
   15b5e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b62:	86 ff       	sbrs	r24, 6
   15b64:	04 c0       	rjmp	.+8      	; 0x15b6e <SS80_locate_and_read+0x19c>
   15b66:	81 e6       	ldi	r24, 0x61	; 97
   15b68:	90 e1       	ldi	r25, 0x10	; 16
   15b6a:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   15b6e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b72:	85 ff       	sbrs	r24, 5
   15b74:	0c c0       	rjmp	.+24     	; 0x15b8e <SS80_locate_and_read+0x1bc>
   15b76:	ed b7       	in	r30, 0x3d	; 61
   15b78:	fe b7       	in	r31, 0x3e	; 62
   15b7a:	15 83       	std	Z+5, r17	; 0x05
   15b7c:	04 83       	std	Z+4, r16	; 0x04
   15b7e:	2a 89       	ldd	r18, Y+18	; 0x12
   15b80:	3b 89       	ldd	r19, Y+19	; 0x13
   15b82:	4c 89       	ldd	r20, Y+20	; 0x14
   15b84:	21 83       	std	Z+1, r18	; 0x01
   15b86:	32 83       	std	Z+2, r19	; 0x02
   15b88:	43 83       	std	Z+3, r20	; 0x03
   15b8a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15b8e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b92:	17 ff       	sbrs	r17, 7
   15b94:	81 cf       	rjmp	.-254    	; 0x15a98 <SS80_locate_and_read+0xc6>
   15b96:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15b9a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15b9e:	91 e0       	ldi	r25, 0x01	; 1
   15ba0:	92 83       	std	Z+2, r25	; 0x02
   15ba2:	81 ff       	sbrs	r24, 1
   15ba4:	0a c0       	rjmp	.+20     	; 0x15bba <SS80_locate_and_read+0x1e8>
   15ba6:	8c ec       	ldi	r24, 0xCC	; 204
   15ba8:	93 e2       	ldi	r25, 0x23	; 35
   15baa:	a0 e0       	ldi	r26, 0x00	; 0
   15bac:	ed b7       	in	r30, 0x3d	; 61
   15bae:	fe b7       	in	r31, 0x3e	; 62
   15bb0:	81 83       	std	Z+1, r24	; 0x01
   15bb2:	92 83       	std	Z+2, r25	; 0x02
   15bb4:	a3 83       	std	Z+3, r26	; 0x03
   15bb6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15bba:	d1 de       	rcall	.-606    	; 0x1595e <SS80_error_return>
   15bbc:	68 c0       	rjmp	.+208    	; 0x15c8e <SS80_locate_and_read+0x2bc>
   15bbe:	62 01       	movw	r12, r4
   15bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
   15bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
   15bc4:	91 60       	ori	r25, 0x01	; 1
   15bc6:	9d 87       	std	Y+13, r25	; 0x0d
   15bc8:	8c 87       	std	Y+12, r24	; 0x0c
   15bca:	af cf       	rjmp	.-162    	; 0x15b2a <SS80_locate_and_read+0x158>
   15bcc:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15bd0:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15bd4:	32 82       	std	Z+2, r3	; 0x02
   15bd6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15bda:	81 ff       	sbrs	r24, 1
   15bdc:	0a c0       	rjmp	.+20     	; 0x15bf2 <SS80_locate_and_read+0x220>
   15bde:	2d 89       	ldd	r18, Y+21	; 0x15
   15be0:	3e 89       	ldd	r19, Y+22	; 0x16
   15be2:	4f 89       	ldd	r20, Y+23	; 0x17
   15be4:	ed b7       	in	r30, 0x3d	; 61
   15be6:	fe b7       	in	r31, 0x3e	; 62
   15be8:	21 83       	std	Z+1, r18	; 0x01
   15bea:	32 83       	std	Z+2, r19	; 0x02
   15bec:	43 83       	std	Z+3, r20	; 0x03
   15bee:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15bf2:	8c 85       	ldd	r24, Y+12	; 0x0c
   15bf4:	9d 85       	ldd	r25, Y+13	; 0x0d
   15bf6:	88 27       	eor	r24, r24
   15bf8:	90 7d       	andi	r25, 0xD0	; 208
   15bfa:	89 2b       	or	r24, r25
   15bfc:	09 f4       	brne	.+2      	; 0x15c00 <SS80_locate_and_read+0x22e>
   15bfe:	64 cf       	rjmp	.-312    	; 0x15ac8 <SS80_locate_and_read+0xf6>
   15c00:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15c04:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15c08:	83 81       	ldd	r24, Z+3	; 0x03
   15c0a:	94 81       	ldd	r25, Z+4	; 0x04
   15c0c:	80 62       	ori	r24, 0x20	; 32
   15c0e:	94 83       	std	Z+4, r25	; 0x04
   15c10:	83 83       	std	Z+3, r24	; 0x03
   15c12:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c16:	81 ff       	sbrs	r24, 1
   15c18:	21 c0       	rjmp	.+66     	; 0x15c5c <SS80_locate_and_read+0x28a>
   15c1a:	8e e8       	ldi	r24, 0x8E	; 142
   15c1c:	93 e2       	ldi	r25, 0x23	; 35
   15c1e:	a0 e0       	ldi	r26, 0x00	; 0
   15c20:	ed b7       	in	r30, 0x3d	; 61
   15c22:	fe b7       	in	r31, 0x3e	; 62
   15c24:	81 83       	std	Z+1, r24	; 0x01
   15c26:	92 83       	std	Z+2, r25	; 0x02
   15c28:	a3 83       	std	Z+3, r26	; 0x03
   15c2a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15c2e:	16 c0       	rjmp	.+44     	; 0x15c5c <SS80_locate_and_read+0x28a>
   15c30:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c34:	85 ff       	sbrs	r24, 5
   15c36:	12 c0       	rjmp	.+36     	; 0x15c5c <SS80_locate_and_read+0x28a>
   15c38:	8e 85       	ldd	r24, Y+14	; 0x0e
   15c3a:	9f 85       	ldd	r25, Y+15	; 0x0f
   15c3c:	a8 89       	ldd	r26, Y+16	; 0x10
   15c3e:	b9 89       	ldd	r27, Y+17	; 0x11
   15c40:	ed b7       	in	r30, 0x3d	; 61
   15c42:	fe b7       	in	r31, 0x3e	; 62
   15c44:	84 83       	std	Z+4, r24	; 0x04
   15c46:	95 83       	std	Z+5, r25	; 0x05
   15c48:	a6 83       	std	Z+6, r26	; 0x06
   15c4a:	b7 83       	std	Z+7, r27	; 0x07
   15c4c:	86 e6       	ldi	r24, 0x66	; 102
   15c4e:	93 e2       	ldi	r25, 0x23	; 35
   15c50:	a0 e0       	ldi	r26, 0x00	; 0
   15c52:	81 83       	std	Z+1, r24	; 0x01
   15c54:	92 83       	std	Z+2, r25	; 0x02
   15c56:	a3 83       	std	Z+3, r26	; 0x03
   15c58:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15c5c:	00 91 4e 19 	lds	r16, 0x194E	; 0x80194e <SS80s>
   15c60:	10 91 4f 19 	lds	r17, 0x194F	; 0x80194f <SS80s+0x1>
   15c64:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15c68:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15c6c:	20 89       	ldd	r18, Z+16	; 0x10
   15c6e:	31 89       	ldd	r19, Z+17	; 0x11
   15c70:	40 e0       	ldi	r20, 0x00	; 0
   15c72:	50 e0       	ldi	r21, 0x00	; 0
   15c74:	c5 01       	movw	r24, r10
   15c76:	b4 01       	movw	r22, r8
   15c78:	0e 94 24 e0 	call	0x1c048	; 0x1c048 <__udivmodsi4>
   15c7c:	f8 01       	movw	r30, r16
   15c7e:	27 83       	std	Z+7, r18	; 0x07
   15c80:	30 87       	std	Z+8, r19	; 0x08
   15c82:	41 87       	std	Z+9, r20	; 0x09
   15c84:	52 87       	std	Z+10, r21	; 0x0a
   15c86:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c88:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c8a:	88 27       	eor	r24, r24
   15c8c:	90 7d       	andi	r25, 0xD0	; 208
   15c8e:	67 96       	adiw	r28, 0x17	; 23
   15c90:	e1 e1       	ldi	r30, 0x11	; 17
   15c92:	0c 94 ae e0 	jmp	0x1c15c	; 0x1c15c <__epilogue_restores__+0x2>

00015c96 <SS80_Execute_State>:
   15c96:	cf 93       	push	r28
   15c98:	df 93       	push	r29
   15c9a:	00 d0       	rcall	.+0      	; 0x15c9c <SS80_Execute_State+0x6>
   15c9c:	00 d0       	rcall	.+0      	; 0x15c9e <SS80_Execute_State+0x8>
   15c9e:	1f 92       	push	r1
   15ca0:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15ca4:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15ca8:	81 81       	ldd	r24, Z+1	; 0x01
   15caa:	90 e0       	ldi	r25, 0x00	; 0
   15cac:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
   15cb0:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15cb4:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15cb8:	80 81       	ld	r24, Z
   15cba:	91 81       	ldd	r25, Z+1	; 0x01
   15cbc:	82 30       	cpi	r24, 0x02	; 2
   15cbe:	91 05       	cpc	r25, r1
   15cc0:	89 f0       	breq	.+34     	; 0x15ce4 <SS80_Execute_State+0x4e>
   15cc2:	3c f4       	brge	.+14     	; 0x15cd2 <SS80_Execute_State+0x3c>
   15cc4:	00 97       	sbiw	r24, 0x00	; 0
   15cc6:	81 f1       	breq	.+96     	; 0x15d28 <SS80_Execute_State+0x92>
   15cc8:	81 30       	cpi	r24, 0x01	; 1
   15cca:	91 05       	cpc	r25, r1
   15ccc:	b9 f4       	brne	.+46     	; 0x15cfc <SS80_Execute_State+0x66>
   15cce:	81 de       	rcall	.-766    	; 0x159d2 <SS80_locate_and_read>
   15cd0:	0d c0       	rjmp	.+26     	; 0x15cec <SS80_Execute_State+0x56>
   15cd2:	83 30       	cpi	r24, 0x03	; 3
   15cd4:	91 05       	cpc	r25, r1
   15cd6:	41 f0       	breq	.+16     	; 0x15ce8 <SS80_Execute_State+0x52>
   15cd8:	84 30       	cpi	r24, 0x04	; 4
   15cda:	91 05       	cpc	r25, r1
   15cdc:	79 f4       	brne	.+30     	; 0x15cfc <SS80_Execute_State+0x66>
   15cde:	0e 94 20 a5 	call	0x14a40	; 0x14a40 <SS80_describe>
   15ce2:	04 c0       	rjmp	.+8      	; 0x15cec <SS80_Execute_State+0x56>
   15ce4:	59 da       	rcall	.-2894   	; 0x15198 <SS80_locate_and_write>
   15ce6:	02 c0       	rjmp	.+4      	; 0x15cec <SS80_Execute_State+0x56>
   15ce8:	0e 94 9f a4 	call	0x1493e	; 0x1493e <SS80_send_status>
   15cec:	ec 01       	movw	r28, r24
   15cee:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15cf2:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15cf6:	11 82       	std	Z+1, r1	; 0x01
   15cf8:	10 82       	st	Z, r1
   15cfa:	18 c0       	rjmp	.+48     	; 0x15d2c <SS80_Execute_State+0x96>
   15cfc:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15d00:	21 ff       	sbrs	r18, 1
   15d02:	0c c0       	rjmp	.+24     	; 0x15d1c <SS80_Execute_State+0x86>
   15d04:	ed b7       	in	r30, 0x3d	; 61
   15d06:	fe b7       	in	r31, 0x3e	; 62
   15d08:	95 83       	std	Z+5, r25	; 0x05
   15d0a:	84 83       	std	Z+4, r24	; 0x04
   15d0c:	8a e2       	ldi	r24, 0x2A	; 42
   15d0e:	94 e2       	ldi	r25, 0x24	; 36
   15d10:	a0 e0       	ldi	r26, 0x00	; 0
   15d12:	81 83       	std	Z+1, r24	; 0x01
   15d14:	92 83       	std	Z+2, r25	; 0x02
   15d16:	a3 83       	std	Z+3, r26	; 0x03
   15d18:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15d1c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <SS80s>
   15d20:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <SS80s+0x1>
   15d24:	11 82       	std	Z+1, r1	; 0x01
   15d26:	10 82       	st	Z, r1
   15d28:	c0 e0       	ldi	r28, 0x00	; 0
   15d2a:	d0 e0       	ldi	r29, 0x00	; 0
   15d2c:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15d30:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15d34:	81 81       	ldd	r24, Z+1	; 0x01
   15d36:	90 e0       	ldi	r25, 0x00	; 0
   15d38:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   15d3c:	ce 01       	movw	r24, r28
   15d3e:	cd b7       	in	r28, 0x3d	; 61
   15d40:	de b7       	in	r29, 0x3e	; 62
   15d42:	25 96       	adiw	r28, 0x05	; 5
   15d44:	e2 e0       	ldi	r30, 0x02	; 2
   15d46:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00015d4a <SS80_COMMANDS>:
   15d4a:	a9 e0       	ldi	r26, 0x09	; 9
   15d4c:	b0 e0       	ldi	r27, 0x00	; 0
   15d4e:	eb ea       	ldi	r30, 0xAB	; 171
   15d50:	fe ea       	ldi	r31, 0xAE	; 174
   15d52:	0c 94 a0 e0 	jmp	0x1c140	; 0x1c140 <__prologue_saves__+0x1e>
   15d56:	18 2f       	mov	r17, r24
   15d58:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   15d5c:	90 e0       	ldi	r25, 0x00	; 0
   15d5e:	0e 94 19 8c 	call	0x11832	; 0x11832 <SS80_is_MTA>
   15d62:	89 2b       	or	r24, r25
   15d64:	19 f0       	breq	.+6      	; 0x15d6c <SS80_COMMANDS+0x22>
   15d66:	15 36       	cpi	r17, 0x65	; 101
   15d68:	19 f5       	brne	.+70     	; 0x15db0 <SS80_COMMANDS+0x66>
   15d6a:	09 c0       	rjmp	.+18     	; 0x15d7e <SS80_COMMANDS+0x34>
   15d6c:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15d70:	90 e0       	ldi	r25, 0x00	; 0
   15d72:	0e 94 08 8c 	call	0x11810	; 0x11810 <SS80_is_MLA>
   15d76:	ec 01       	movw	r28, r24
   15d78:	89 2b       	or	r24, r25
   15d7a:	a9 f7       	brne	.-22     	; 0x15d66 <SS80_COMMANDS+0x1c>
   15d7c:	ad c0       	rjmp	.+346    	; 0x15ed8 <SS80_COMMANDS+0x18e>
   15d7e:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15d82:	90 e0       	ldi	r25, 0x00	; 0
   15d84:	0e 94 08 8c 	call	0x11810	; 0x11810 <SS80_is_MLA>
   15d88:	89 2b       	or	r24, r25
   15d8a:	09 f4       	brne	.+2      	; 0x15d8e <SS80_COMMANDS+0x44>
   15d8c:	a2 c0       	rjmp	.+324    	; 0x15ed2 <SS80_COMMANDS+0x188>
   15d8e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15d92:	85 ff       	sbrs	r24, 5
   15d94:	0a c0       	rjmp	.+20     	; 0x15daa <SS80_COMMANDS+0x60>
   15d96:	82 e1       	ldi	r24, 0x12	; 18
   15d98:	9d e1       	ldi	r25, 0x1D	; 29
   15d9a:	a0 e0       	ldi	r26, 0x00	; 0
   15d9c:	ed b7       	in	r30, 0x3d	; 61
   15d9e:	fe b7       	in	r31, 0x3e	; 62
   15da0:	81 83       	std	Z+1, r24	; 0x01
   15da2:	92 83       	std	Z+2, r25	; 0x02
   15da4:	a3 83       	std	Z+3, r26	; 0x03
   15da6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15daa:	0e 94 e0 a5 	call	0x14bc0	; 0x14bc0 <SS80_Command_State>
   15dae:	73 c0       	rjmp	.+230    	; 0x15e96 <SS80_COMMANDS+0x14c>
   15db0:	1e 36       	cpi	r17, 0x6E	; 110
   15db2:	01 f5       	brne	.+64     	; 0x15df4 <SS80_COMMANDS+0xaa>
   15db4:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15db8:	90 e0       	ldi	r25, 0x00	; 0
   15dba:	0e 94 08 8c 	call	0x11810	; 0x11810 <SS80_is_MLA>
   15dbe:	89 2b       	or	r24, r25
   15dc0:	79 f0       	breq	.+30     	; 0x15de0 <SS80_COMMANDS+0x96>
   15dc2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15dc6:	85 ff       	sbrs	r24, 5
   15dc8:	13 c0       	rjmp	.+38     	; 0x15df0 <SS80_COMMANDS+0xa6>
   15dca:	8c ef       	ldi	r24, 0xFC	; 252
   15dcc:	9c e1       	ldi	r25, 0x1C	; 28
   15dce:	a0 e0       	ldi	r26, 0x00	; 0
   15dd0:	ed b7       	in	r30, 0x3d	; 61
   15dd2:	fe b7       	in	r31, 0x3e	; 62
   15dd4:	81 83       	std	Z+1, r24	; 0x01
   15dd6:	92 83       	std	Z+2, r25	; 0x02
   15dd8:	a3 83       	std	Z+3, r26	; 0x03
   15dda:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15dde:	08 c0       	rjmp	.+16     	; 0x15df0 <SS80_COMMANDS+0xa6>
   15de0:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   15de4:	90 e0       	ldi	r25, 0x00	; 0
   15de6:	0e 94 19 8c 	call	0x11832	; 0x11832 <SS80_is_MTA>
   15dea:	89 2b       	or	r24, r25
   15dec:	51 f7       	brne	.-44     	; 0x15dc2 <SS80_COMMANDS+0x78>
   15dee:	71 c0       	rjmp	.+226    	; 0x15ed2 <SS80_COMMANDS+0x188>
   15df0:	52 df       	rcall	.-348    	; 0x15c96 <SS80_Execute_State>
   15df2:	51 c0       	rjmp	.+162    	; 0x15e96 <SS80_COMMANDS+0x14c>
   15df4:	10 37       	cpi	r17, 0x70	; 112
   15df6:	b9 f5       	brne	.+110    	; 0x15e66 <SS80_COMMANDS+0x11c>
   15df8:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   15dfc:	90 e0       	ldi	r25, 0x00	; 0
   15dfe:	0e 94 19 8c 	call	0x11832	; 0x11832 <SS80_is_MTA>
   15e02:	89 2b       	or	r24, r25
   15e04:	81 f0       	breq	.+32     	; 0x15e26 <SS80_COMMANDS+0xdc>
   15e06:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e0a:	85 ff       	sbrs	r24, 5
   15e0c:	0a c0       	rjmp	.+20     	; 0x15e22 <SS80_COMMANDS+0xd8>
   15e0e:	87 ee       	ldi	r24, 0xE7	; 231
   15e10:	9c e1       	ldi	r25, 0x1C	; 28
   15e12:	a0 e0       	ldi	r26, 0x00	; 0
   15e14:	ed b7       	in	r30, 0x3d	; 61
   15e16:	fe b7       	in	r31, 0x3e	; 62
   15e18:	81 83       	std	Z+1, r24	; 0x01
   15e1a:	92 83       	std	Z+2, r25	; 0x02
   15e1c:	a3 83       	std	Z+3, r26	; 0x03
   15e1e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15e22:	4c db       	rcall	.-2408   	; 0x154bc <SS80_Report>
   15e24:	38 c0       	rjmp	.+112    	; 0x15e96 <SS80_COMMANDS+0x14c>
   15e26:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15e2a:	90 e0       	ldi	r25, 0x00	; 0
   15e2c:	0e 94 08 8c 	call	0x11810	; 0x11810 <SS80_is_MLA>
   15e30:	89 2b       	or	r24, r25
   15e32:	09 f4       	brne	.+2      	; 0x15e36 <SS80_COMMANDS+0xec>
   15e34:	4e c0       	rjmp	.+156    	; 0x15ed2 <SS80_COMMANDS+0x188>
   15e36:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e3a:	85 ff       	sbrs	r24, 5
   15e3c:	0a c0       	rjmp	.+20     	; 0x15e52 <SS80_COMMANDS+0x108>
   15e3e:	88 ed       	ldi	r24, 0xD8	; 216
   15e40:	9c e1       	ldi	r25, 0x1C	; 28
   15e42:	a0 e0       	ldi	r26, 0x00	; 0
   15e44:	ed b7       	in	r30, 0x3d	; 61
   15e46:	fe b7       	in	r31, 0x3e	; 62
   15e48:	81 83       	std	Z+1, r24	; 0x01
   15e4a:	92 83       	std	Z+2, r25	; 0x02
   15e4c:	a3 83       	std	Z+3, r26	; 0x03
   15e4e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15e52:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80p>
   15e56:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80p+0x1>
   15e5a:	81 81       	ldd	r24, Z+1	; 0x01
   15e5c:	90 e0       	ldi	r25, 0x00	; 0
   15e5e:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
   15e62:	1d dc       	rcall	.-1990   	; 0x1569e <SS80_Amigo_Clear>
   15e64:	18 c0       	rjmp	.+48     	; 0x15e96 <SS80_COMMANDS+0x14c>
   15e66:	12 37       	cpi	r17, 0x72	; 114
   15e68:	c1 f4       	brne	.+48     	; 0x15e9a <SS80_COMMANDS+0x150>
   15e6a:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15e6e:	90 e0       	ldi	r25, 0x00	; 0
   15e70:	0e 94 08 8c 	call	0x11810	; 0x11810 <SS80_is_MLA>
   15e74:	89 2b       	or	r24, r25
   15e76:	89 f0       	breq	.+34     	; 0x15e9a <SS80_COMMANDS+0x150>
   15e78:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e7c:	85 ff       	sbrs	r24, 5
   15e7e:	0a c0       	rjmp	.+20     	; 0x15e94 <SS80_COMMANDS+0x14a>
   15e80:	84 ec       	ldi	r24, 0xC4	; 196
   15e82:	9c e1       	ldi	r25, 0x1C	; 28
   15e84:	a0 e0       	ldi	r26, 0x00	; 0
   15e86:	ed b7       	in	r30, 0x3d	; 61
   15e88:	fe b7       	in	r31, 0x3e	; 62
   15e8a:	81 83       	std	Z+1, r24	; 0x01
   15e8c:	92 83       	std	Z+2, r25	; 0x02
   15e8e:	a3 83       	std	Z+3, r26	; 0x03
   15e90:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15e94:	58 dc       	rcall	.-1872   	; 0x15746 <SS80_Transparent_State>
   15e96:	ec 01       	movw	r28, r24
   15e98:	3b c0       	rjmp	.+118    	; 0x15f10 <SS80_COMMANDS+0x1c6>
   15e9a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e9e:	81 ff       	sbrs	r24, 1
   15ea0:	18 c0       	rjmp	.+48     	; 0x15ed2 <SS80_COMMANDS+0x188>
   15ea2:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   15ea6:	90 e0       	ldi	r25, 0x00	; 0
   15ea8:	ed b7       	in	r30, 0x3d	; 61
   15eaa:	fe b7       	in	r31, 0x3e	; 62
   15eac:	91 87       	std	Z+9, r25	; 0x09
   15eae:	80 87       	std	Z+8, r24	; 0x08
   15eb0:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15eb4:	90 e0       	ldi	r25, 0x00	; 0
   15eb6:	97 83       	std	Z+7, r25	; 0x07
   15eb8:	86 83       	std	Z+6, r24	; 0x06
   15eba:	81 2f       	mov	r24, r17
   15ebc:	90 e0       	ldi	r25, 0x00	; 0
   15ebe:	95 83       	std	Z+5, r25	; 0x05
   15ec0:	84 83       	std	Z+4, r24	; 0x04
   15ec2:	80 e9       	ldi	r24, 0x90	; 144
   15ec4:	9c e1       	ldi	r25, 0x1C	; 28
   15ec6:	a0 e0       	ldi	r26, 0x00	; 0
   15ec8:	81 83       	std	Z+1, r24	; 0x01
   15eca:	92 83       	std	Z+2, r25	; 0x02
   15ecc:	a3 83       	std	Z+3, r26	; 0x03
   15ece:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15ed2:	c0 e0       	ldi	r28, 0x00	; 0
   15ed4:	d0 e0       	ldi	r29, 0x00	; 0
   15ed6:	1c c0       	rjmp	.+56     	; 0x15f10 <SS80_COMMANDS+0x1c6>
   15ed8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15edc:	81 ff       	sbrs	r24, 1
   15ede:	f9 cf       	rjmp	.-14     	; 0x15ed2 <SS80_COMMANDS+0x188>
   15ee0:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   15ee4:	90 e0       	ldi	r25, 0x00	; 0
   15ee6:	ed b7       	in	r30, 0x3d	; 61
   15ee8:	fe b7       	in	r31, 0x3e	; 62
   15eea:	91 87       	std	Z+9, r25	; 0x09
   15eec:	80 87       	std	Z+8, r24	; 0x08
   15eee:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   15ef2:	90 e0       	ldi	r25, 0x00	; 0
   15ef4:	97 83       	std	Z+7, r25	; 0x07
   15ef6:	86 83       	std	Z+6, r24	; 0x06
   15ef8:	81 2f       	mov	r24, r17
   15efa:	90 e0       	ldi	r25, 0x00	; 0
   15efc:	95 83       	std	Z+5, r25	; 0x05
   15efe:	84 83       	std	Z+4, r24	; 0x04
   15f00:	8c e5       	ldi	r24, 0x5C	; 92
   15f02:	9c e1       	ldi	r25, 0x1C	; 28
   15f04:	a0 e0       	ldi	r26, 0x00	; 0
   15f06:	81 83       	std	Z+1, r24	; 0x01
   15f08:	92 83       	std	Z+2, r25	; 0x02
   15f0a:	a3 83       	std	Z+3, r26	; 0x03
   15f0c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15f10:	ce 01       	movw	r24, r28
   15f12:	cd b7       	in	r28, 0x3d	; 61
   15f14:	de b7       	in	r29, 0x3e	; 62
   15f16:	29 96       	adiw	r28, 0x09	; 9
   15f18:	e3 e0       	ldi	r30, 0x03	; 3
   15f1a:	0c 94 bc e0 	jmp	0x1c178	; 0x1c178 <__epilogue_restores__+0x1e>

00015f1e <amigo_overflow_check>:
   15f1e:	cf 92       	push	r12
   15f20:	df 92       	push	r13
   15f22:	ef 92       	push	r14
   15f24:	0f 93       	push	r16
   15f26:	1f 93       	push	r17
   15f28:	cf 93       	push	r28
   15f2a:	df 93       	push	r29
   15f2c:	00 d0       	rcall	.+0      	; 0x15f2e <amigo_overflow_check+0x10>
   15f2e:	00 d0       	rcall	.+0      	; 0x15f30 <amigo_overflow_check+0x12>
   15f30:	1f 92       	push	r1
   15f32:	ec 01       	movw	r28, r24
   15f34:	8b 01       	movw	r16, r22
   15f36:	80 e0       	ldi	r24, 0x00	; 0
   15f38:	90 e0       	ldi	r25, 0x00	; 0
   15f3a:	20 ed       	ldi	r18, 0xD0	; 208
   15f3c:	3b e2       	ldi	r19, 0x2B	; 43
   15f3e:	69 01       	movw	r12, r18
   15f40:	e1 2c       	mov	r14, r1
   15f42:	2d 81       	ldd	r18, Y+5	; 0x05
   15f44:	30 e0       	ldi	r19, 0x00	; 0
   15f46:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   15f4a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   15f4e:	40 85       	ldd	r20, Z+8	; 0x08
   15f50:	51 85       	ldd	r21, Z+9	; 0x09
   15f52:	24 17       	cp	r18, r20
   15f54:	35 07       	cpc	r19, r21
   15f56:	64 f1       	brlt	.+88     	; 0x15fb0 <amigo_overflow_check+0x92>
   15f58:	1d 82       	std	Y+5, r1	; 0x05
   15f5a:	2c 81       	ldd	r18, Y+4	; 0x04
   15f5c:	2f 5f       	subi	r18, 0xFF	; 255
   15f5e:	2c 83       	std	Y+4, r18	; 0x04
   15f60:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   15f64:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   15f68:	2c 81       	ldd	r18, Y+4	; 0x04
   15f6a:	30 e0       	ldi	r19, 0x00	; 0
   15f6c:	42 85       	ldd	r20, Z+10	; 0x0a
   15f6e:	53 85       	ldd	r21, Z+11	; 0x0b
   15f70:	24 17       	cp	r18, r20
   15f72:	35 07       	cpc	r19, r21
   15f74:	34 f3       	brlt	.-52     	; 0x15f42 <amigo_overflow_check+0x24>
   15f76:	1c 82       	std	Y+4, r1	; 0x04
   15f78:	2b 81       	ldd	r18, Y+3	; 0x03
   15f7a:	2f 5f       	subi	r18, 0xFF	; 255
   15f7c:	2b 83       	std	Y+3, r18	; 0x03
   15f7e:	30 e0       	ldi	r19, 0x00	; 0
   15f80:	44 85       	ldd	r20, Z+12	; 0x0c
   15f82:	55 85       	ldd	r21, Z+13	; 0x0d
   15f84:	24 17       	cp	r18, r20
   15f86:	35 07       	cpc	r19, r21
   15f88:	5c f3       	brlt	.-42     	; 0x15f60 <amigo_overflow_check+0x42>
   15f8a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15f8e:	81 ff       	sbrs	r24, 1
   15f90:	0c c0       	rjmp	.+24     	; 0x15faa <amigo_overflow_check+0x8c>
   15f92:	01 15       	cp	r16, r1
   15f94:	11 05       	cpc	r17, r1
   15f96:	49 f0       	breq	.+18     	; 0x15faa <amigo_overflow_check+0x8c>
   15f98:	ed b7       	in	r30, 0x3d	; 61
   15f9a:	fe b7       	in	r31, 0x3e	; 62
   15f9c:	15 83       	std	Z+5, r17	; 0x05
   15f9e:	04 83       	std	Z+4, r16	; 0x04
   15fa0:	c1 82       	std	Z+1, r12	; 0x01
   15fa2:	d2 82       	std	Z+2, r13	; 0x02
   15fa4:	e3 82       	std	Z+3, r14	; 0x03
   15fa6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   15faa:	81 e0       	ldi	r24, 0x01	; 1
   15fac:	90 e0       	ldi	r25, 0x00	; 0
   15fae:	d8 cf       	rjmp	.-80     	; 0x15f60 <amigo_overflow_check+0x42>
   15fb0:	0f 90       	pop	r0
   15fb2:	0f 90       	pop	r0
   15fb4:	0f 90       	pop	r0
   15fb6:	0f 90       	pop	r0
   15fb8:	0f 90       	pop	r0
   15fba:	df 91       	pop	r29
   15fbc:	cf 91       	pop	r28
   15fbe:	1f 91       	pop	r17
   15fc0:	0f 91       	pop	r16
   15fc2:	ef 90       	pop	r14
   15fc4:	df 90       	pop	r13
   15fc6:	cf 90       	pop	r12
   15fc8:	08 95       	ret

00015fca <amigo_chs_to_logical>:
   15fca:	a1 e1       	ldi	r26, 0x11	; 17
   15fcc:	b0 e0       	ldi	r27, 0x00	; 0
   15fce:	eb ee       	ldi	r30, 0xEB	; 235
   15fd0:	ff ea       	ldi	r31, 0xAF	; 175
   15fd2:	0c 94 95 e0 	jmp	0x1c12a	; 0x1c12a <__prologue_saves__+0x8>
   15fd6:	8b 01       	movw	r16, r22
   15fd8:	60 91 4c 19 	lds	r22, 0x194C	; 0x80194c <AMIGOp>
   15fdc:	70 91 4d 19 	lds	r23, 0x194D	; 0x80194d <AMIGOp+0x1>
   15fe0:	fb 01       	movw	r30, r22
   15fe2:	40 85       	ldd	r20, Z+8	; 0x08
   15fe4:	51 85       	ldd	r21, Z+9	; 0x09
   15fe6:	fc 01       	movw	r30, r24
   15fe8:	c4 81       	ldd	r28, Z+4	; 0x04
   15fea:	d0 e0       	ldi	r29, 0x00	; 0
   15fec:	4c 9f       	mul	r20, r28
   15fee:	90 01       	movw	r18, r0
   15ff0:	4d 9f       	mul	r20, r29
   15ff2:	30 0d       	add	r19, r0
   15ff4:	5c 9f       	mul	r21, r28
   15ff6:	30 0d       	add	r19, r0
   15ff8:	11 24       	eor	r1, r1
   15ffa:	49 01       	movw	r8, r18
   15ffc:	33 0f       	add	r19, r19
   15ffe:	aa 08       	sbc	r10, r10
   16000:	bb 08       	sbc	r11, r11
   16002:	63 80       	ldd	r6, Z+3	; 0x03
   16004:	71 2c       	mov	r7, r1
   16006:	fb 01       	movw	r30, r22
   16008:	e2 84       	ldd	r14, Z+10	; 0x0a
   1600a:	f3 84       	ldd	r15, Z+11	; 0x0b
   1600c:	4e 9d       	mul	r20, r14
   1600e:	d0 01       	movw	r26, r0
   16010:	4f 9d       	mul	r20, r15
   16012:	b0 0d       	add	r27, r0
   16014:	5e 9d       	mul	r21, r14
   16016:	b0 0d       	add	r27, r0
   16018:	11 24       	eor	r1, r1
   1601a:	a6 9d       	mul	r26, r6
   1601c:	90 01       	movw	r18, r0
   1601e:	a7 9d       	mul	r26, r7
   16020:	30 0d       	add	r19, r0
   16022:	b6 9d       	mul	r27, r6
   16024:	30 0d       	add	r19, r0
   16026:	11 24       	eor	r1, r1
   16028:	69 01       	movw	r12, r18
   1602a:	33 0f       	add	r19, r19
   1602c:	ee 08       	sbc	r14, r14
   1602e:	ff 08       	sbc	r15, r15
   16030:	8c 0c       	add	r8, r12
   16032:	9d 1c       	adc	r9, r13
   16034:	ae 1c       	adc	r10, r14
   16036:	bf 1c       	adc	r11, r15
   16038:	fc 01       	movw	r30, r24
   1603a:	f5 80       	ldd	r15, Z+5	; 0x05
   1603c:	a5 01       	movw	r20, r10
   1603e:	94 01       	movw	r18, r8
   16040:	2f 0d       	add	r18, r15
   16042:	31 1d       	adc	r19, r1
   16044:	41 1d       	adc	r20, r1
   16046:	51 1d       	adc	r21, r1
   16048:	fb 01       	movw	r30, r22
   1604a:	a6 81       	ldd	r26, Z+6	; 0x06
   1604c:	b7 81       	ldd	r27, Z+7	; 0x07
   1604e:	0e 94 7b e0 	call	0x1c0f6	; 0x1c0f6 <__mulshisi3>
   16052:	4b 01       	movw	r8, r22
   16054:	5c 01       	movw	r10, r24
   16056:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1605a:	85 ff       	sbrs	r24, 5
   1605c:	22 c0       	rjmp	.+68     	; 0x160a2 <amigo_chs_to_logical+0xd8>
   1605e:	8f 2d       	mov	r24, r15
   16060:	90 e0       	ldi	r25, 0x00	; 0
   16062:	ed b7       	in	r30, 0x3d	; 61
   16064:	fe b7       	in	r31, 0x3e	; 62
   16066:	91 8b       	std	Z+17, r25	; 0x11
   16068:	80 8b       	std	Z+16, r24	; 0x10
   1606a:	d7 87       	std	Z+15, r29	; 0x0f
   1606c:	c6 87       	std	Z+14, r28	; 0x0e
   1606e:	75 86       	std	Z+13, r7	; 0x0d
   16070:	64 86       	std	Z+12, r6	; 0x0c
   16072:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16076:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1607a:	81 81       	ldd	r24, Z+1	; 0x01
   1607c:	90 e0       	ldi	r25, 0x00	; 0
   1607e:	ed b7       	in	r30, 0x3d	; 61
   16080:	fe b7       	in	r31, 0x3e	; 62
   16082:	93 87       	std	Z+11, r25	; 0x0b
   16084:	82 87       	std	Z+10, r24	; 0x0a
   16086:	86 82       	std	Z+6, r8	; 0x06
   16088:	97 82       	std	Z+7, r9	; 0x07
   1608a:	a0 86       	std	Z+8, r10	; 0x08
   1608c:	b1 86       	std	Z+9, r11	; 0x09
   1608e:	15 83       	std	Z+5, r17	; 0x05
   16090:	04 83       	std	Z+4, r16	; 0x04
   16092:	8d e7       	ldi	r24, 0x7D	; 125
   16094:	9b e2       	ldi	r25, 0x2B	; 43
   16096:	a0 e0       	ldi	r26, 0x00	; 0
   16098:	81 83       	std	Z+1, r24	; 0x01
   1609a:	92 83       	std	Z+2, r25	; 0x02
   1609c:	a3 83       	std	Z+3, r26	; 0x03
   1609e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   160a2:	c5 01       	movw	r24, r10
   160a4:	b4 01       	movw	r22, r8
   160a6:	cd b7       	in	r28, 0x3d	; 61
   160a8:	de b7       	in	r29, 0x3e	; 62
   160aa:	61 96       	adiw	r28, 0x11	; 17
   160ac:	ee e0       	ldi	r30, 0x0E	; 14
   160ae:	0c 94 b1 e0 	jmp	0x1c162	; 0x1c162 <__epilogue_restores__+0x8>

000160b2 <amigo_init>:
   160b2:	ef 92       	push	r14
   160b4:	ff 92       	push	r15
   160b6:	0f 93       	push	r16
   160b8:	1f 93       	push	r17
   160ba:	cf 93       	push	r28
   160bc:	df 93       	push	r29
   160be:	0e ea       	ldi	r16, 0xAE	; 174
   160c0:	10 e2       	ldi	r17, 0x20	; 32
   160c2:	cb e0       	ldi	r28, 0x0B	; 11
   160c4:	d0 e0       	ldi	r29, 0x00	; 0
   160c6:	84 e0       	ldi	r24, 0x04	; 4
   160c8:	f8 2e       	mov	r15, r24
   160ca:	92 e0       	ldi	r25, 0x02	; 2
   160cc:	e9 2e       	mov	r14, r25
   160ce:	d8 01       	movw	r26, r16
   160d0:	8c 91       	ld	r24, X
   160d2:	81 30       	cpi	r24, 0x01	; 1
   160d4:	31 f5       	brne	.+76     	; 0x16122 <amigo_init+0x70>
   160d6:	ce 01       	movw	r24, r28
   160d8:	0e 94 17 97 	call	0x12e2e	; 0x12e2e <set_active_device>
   160dc:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   160e0:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   160e4:	10 82       	st	Z, r1
   160e6:	9f 01       	movw	r18, r30
   160e8:	27 5f       	subi	r18, 0xF7	; 247
   160ea:	3f 4f       	sbci	r19, 0xFF	; 255
   160ec:	d9 01       	movw	r26, r18
   160ee:	8f 2d       	mov	r24, r15
   160f0:	1d 92       	st	X+, r1
   160f2:	8a 95       	dec	r24
   160f4:	e9 f7       	brne	.-6      	; 0x160f0 <amigo_init+0x3e>
   160f6:	2c 5f       	subi	r18, 0xFC	; 252
   160f8:	3f 4f       	sbci	r19, 0xFF	; 255
   160fa:	d9 01       	movw	r26, r18
   160fc:	8f 2d       	mov	r24, r15
   160fe:	1d 92       	st	X+, r1
   16100:	8a 95       	dec	r24
   16102:	e9 f7       	brne	.-6      	; 0x160fe <amigo_init+0x4c>
   16104:	11 82       	std	Z+1, r1	; 0x01
   16106:	15 82       	std	Z+5, r1	; 0x05
   16108:	14 82       	std	Z+4, r1	; 0x04
   1610a:	13 82       	std	Z+3, r1	; 0x03
   1610c:	e6 82       	std	Z+6, r14	; 0x06
   1610e:	10 86       	std	Z+8, r1	; 0x08
   16110:	17 82       	std	Z+7, r1	; 0x07
   16112:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16116:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1611a:	81 81       	ldd	r24, Z+1	; 0x01
   1611c:	90 e0       	ldi	r25, 0x00	; 0
   1611e:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
   16122:	21 97       	sbiw	r28, 0x01	; 1
   16124:	0b 52       	subi	r16, 0x2B	; 43
   16126:	11 09       	sbc	r17, r1
   16128:	cf 3f       	cpi	r28, 0xFF	; 255
   1612a:	af ef       	ldi	r26, 0xFF	; 255
   1612c:	da 07       	cpc	r29, r26
   1612e:	79 f6       	brne	.-98     	; 0x160ce <amigo_init+0x1c>
   16130:	cd b7       	in	r28, 0x3d	; 61
   16132:	de b7       	in	r29, 0x3e	; 62
   16134:	e6 e0       	ldi	r30, 0x06	; 6
   16136:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0001613a <amigo_request_logical_address>:
   1613a:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1613e:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16142:	15 86       	std	Z+13, r1	; 0x0d
   16144:	83 81       	ldd	r24, Z+3	; 0x03
   16146:	86 87       	std	Z+14, r24	; 0x0e
   16148:	84 81       	ldd	r24, Z+4	; 0x04
   1614a:	87 87       	std	Z+15, r24	; 0x0f
   1614c:	85 81       	ldd	r24, Z+5	; 0x05
   1614e:	80 8b       	std	Z+16, r24	; 0x10
   16150:	80 e0       	ldi	r24, 0x00	; 0
   16152:	90 e0       	ldi	r25, 0x00	; 0
   16154:	08 95       	ret

00016156 <amigo_request_status>:
   16156:	00 d0       	rcall	.+0      	; 0x16158 <amigo_request_status+0x2>
   16158:	1f 92       	push	r1
   1615a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1615e:	85 ff       	sbrs	r24, 5
   16160:	0a c0       	rjmp	.+20     	; 0x16176 <amigo_request_status+0x20>
   16162:	80 e5       	ldi	r24, 0x50	; 80
   16164:	9c e2       	ldi	r25, 0x2C	; 44
   16166:	a0 e0       	ldi	r26, 0x00	; 0
   16168:	ed b7       	in	r30, 0x3d	; 61
   1616a:	fe b7       	in	r31, 0x3e	; 62
   1616c:	81 83       	std	Z+1, r24	; 0x01
   1616e:	92 83       	std	Z+2, r25	; 0x02
   16170:	a3 83       	std	Z+3, r26	; 0x03
   16172:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16176:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1617a:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1617e:	11 86       	std	Z+9, r1	; 0x09
   16180:	81 81       	ldd	r24, Z+1	; 0x01
   16182:	82 87       	std	Z+10, r24	; 0x0a
   16184:	8d e0       	ldi	r24, 0x0D	; 13
   16186:	83 87       	std	Z+11, r24	; 0x0b
   16188:	14 86       	std	Z+12, r1	; 0x0c
   1618a:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <mmc_wp_status>
   1618e:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16192:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16196:	89 2b       	or	r24, r25
   16198:	19 f0       	breq	.+6      	; 0x161a0 <amigo_request_status+0x4a>
   1619a:	84 85       	ldd	r24, Z+12	; 0x0c
   1619c:	80 66       	ori	r24, 0x60	; 96
   1619e:	84 87       	std	Z+12, r24	; 0x0c
   161a0:	86 81       	ldd	r24, Z+6	; 0x06
   161a2:	82 30       	cpi	r24, 0x02	; 2
   161a4:	31 f4       	brne	.+12     	; 0x161b2 <amigo_request_status+0x5c>
   161a6:	83 e1       	ldi	r24, 0x13	; 19
   161a8:	81 87       	std	Z+9, r24	; 0x09
   161aa:	84 85       	ldd	r24, Z+12	; 0x0c
   161ac:	88 60       	ori	r24, 0x08	; 8
   161ae:	84 87       	std	Z+12, r24	; 0x0c
   161b0:	21 c0       	rjmp	.+66     	; 0x161f4 <amigo_request_status+0x9e>
   161b2:	27 81       	ldd	r18, Z+7	; 0x07
   161b4:	30 85       	ldd	r19, Z+8	; 0x08
   161b6:	21 15       	cp	r18, r1
   161b8:	31 05       	cpc	r19, r1
   161ba:	11 f4       	brne	.+4      	; 0x161c0 <amigo_request_status+0x6a>
   161bc:	81 30       	cpi	r24, 0x01	; 1
   161be:	d1 f4       	brne	.+52     	; 0x161f4 <amigo_request_status+0x9e>
   161c0:	26 fd       	sbrc	r18, 6
   161c2:	0c c0       	rjmp	.+24     	; 0x161dc <amigo_request_status+0x86>
   161c4:	25 ff       	sbrs	r18, 5
   161c6:	03 c0       	rjmp	.+6      	; 0x161ce <amigo_request_status+0x78>
   161c8:	8a e0       	ldi	r24, 0x0A	; 10
   161ca:	81 87       	std	Z+9, r24	; 0x09
   161cc:	0d c0       	rjmp	.+26     	; 0x161e8 <amigo_request_status+0x92>
   161ce:	84 85       	ldd	r24, Z+12	; 0x0c
   161d0:	24 ff       	sbrs	r18, 4
   161d2:	02 c0       	rjmp	.+4      	; 0x161d8 <amigo_request_status+0x82>
   161d4:	83 60       	ori	r24, 0x03	; 3
   161d6:	07 c0       	rjmp	.+14     	; 0x161e6 <amigo_request_status+0x90>
   161d8:	21 ff       	sbrs	r18, 1
   161da:	02 c0       	rjmp	.+4      	; 0x161e0 <amigo_request_status+0x8a>
   161dc:	83 e1       	ldi	r24, 0x13	; 19
   161de:	f5 cf       	rjmp	.-22     	; 0x161ca <amigo_request_status+0x74>
   161e0:	22 ff       	sbrs	r18, 2
   161e2:	02 c0       	rjmp	.+4      	; 0x161e8 <amigo_request_status+0x92>
   161e4:	84 60       	ori	r24, 0x04	; 4
   161e6:	84 87       	std	Z+12, r24	; 0x0c
   161e8:	84 85       	ldd	r24, Z+12	; 0x0c
   161ea:	80 61       	ori	r24, 0x10	; 16
   161ec:	84 87       	std	Z+12, r24	; 0x0c
   161ee:	83 85       	ldd	r24, Z+11	; 0x0b
   161f0:	80 68       	ori	r24, 0x80	; 128
   161f2:	83 87       	std	Z+11, r24	; 0x0b
   161f4:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   161f8:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   161fc:	81 81       	ldd	r24, Z+1	; 0x01
   161fe:	90 e0       	ldi	r25, 0x00	; 0
   16200:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16204:	80 e0       	ldi	r24, 0x00	; 0
   16206:	90 e0       	ldi	r25, 0x00	; 0
   16208:	0f 90       	pop	r0
   1620a:	0f 90       	pop	r0
   1620c:	0f 90       	pop	r0
   1620e:	08 95       	ret

00016210 <amigo_send_logical_address>:
   16210:	a5 e0       	ldi	r26, 0x05	; 5
   16212:	b0 e0       	ldi	r27, 0x00	; 0
   16214:	ee e0       	ldi	r30, 0x0E	; 14
   16216:	f1 eb       	ldi	r31, 0xB1	; 177
   16218:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   1621c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16220:	85 ff       	sbrs	r24, 5
   16222:	0a c0       	rjmp	.+20     	; 0x16238 <amigo_send_logical_address+0x28>
   16224:	82 e3       	ldi	r24, 0x32	; 50
   16226:	9c e2       	ldi	r25, 0x2C	; 44
   16228:	a0 e0       	ldi	r26, 0x00	; 0
   1622a:	ed b7       	in	r30, 0x3d	; 61
   1622c:	fe b7       	in	r31, 0x3e	; 62
   1622e:	81 83       	std	Z+1, r24	; 0x01
   16230:	92 83       	std	Z+2, r25	; 0x02
   16232:	a3 83       	std	Z+3, r26	; 0x03
   16234:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16238:	80 e0       	ldi	r24, 0x00	; 0
   1623a:	91 e0       	ldi	r25, 0x01	; 1
   1623c:	9d 83       	std	Y+5, r25	; 0x05
   1623e:	8c 83       	std	Y+4, r24	; 0x04
   16240:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   16244:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   16248:	ae 01       	movw	r20, r28
   1624a:	4c 5f       	subi	r20, 0xFC	; 252
   1624c:	5f 4f       	sbci	r21, 0xFF	; 255
   1624e:	64 e0       	ldi	r22, 0x04	; 4
   16250:	70 e0       	ldi	r23, 0x00	; 0
   16252:	0d 96       	adiw	r24, 0x0d	; 13
   16254:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   16258:	2c 81       	ldd	r18, Y+4	; 0x04
   1625a:	3d 81       	ldd	r19, Y+5	; 0x05
   1625c:	22 27       	eor	r18, r18
   1625e:	30 7d       	andi	r19, 0xD0	; 208
   16260:	23 2b       	or	r18, r19
   16262:	49 f0       	breq	.+18     	; 0x16276 <amigo_send_logical_address+0x66>
   16264:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16268:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1626c:	27 81       	ldd	r18, Z+7	; 0x07
   1626e:	30 85       	ldd	r19, Z+8	; 0x08
   16270:	20 62       	ori	r18, 0x20	; 32
   16272:	30 87       	std	Z+8, r19	; 0x08
   16274:	27 83       	std	Z+7, r18	; 0x07
   16276:	04 97       	sbiw	r24, 0x04	; 4
   16278:	c9 f0       	breq	.+50     	; 0x162ac <amigo_send_logical_address+0x9c>
   1627a:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1627e:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16282:	87 81       	ldd	r24, Z+7	; 0x07
   16284:	90 85       	ldd	r25, Z+8	; 0x08
   16286:	80 62       	ori	r24, 0x20	; 32
   16288:	90 87       	std	Z+8, r25	; 0x08
   1628a:	87 83       	std	Z+7, r24	; 0x07
   1628c:	81 e0       	ldi	r24, 0x01	; 1
   1628e:	86 83       	std	Z+6, r24	; 0x06
   16290:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16294:	81 ff       	sbrs	r24, 1
   16296:	0a c0       	rjmp	.+20     	; 0x162ac <amigo_send_logical_address+0x9c>
   16298:	88 e1       	ldi	r24, 0x18	; 24
   1629a:	9c e2       	ldi	r25, 0x2C	; 44
   1629c:	a0 e0       	ldi	r26, 0x00	; 0
   1629e:	ed b7       	in	r30, 0x3d	; 61
   162a0:	fe b7       	in	r31, 0x3e	; 62
   162a2:	81 83       	std	Z+1, r24	; 0x01
   162a4:	92 83       	std	Z+2, r25	; 0x02
   162a6:	a3 83       	std	Z+3, r26	; 0x03
   162a8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   162ac:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   162b0:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   162b4:	81 81       	ldd	r24, Z+1	; 0x01
   162b6:	90 e0       	ldi	r25, 0x00	; 0
   162b8:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   162bc:	8c 81       	ldd	r24, Y+4	; 0x04
   162be:	9d 81       	ldd	r25, Y+5	; 0x05
   162c0:	88 27       	eor	r24, r24
   162c2:	90 7d       	andi	r25, 0xD0	; 208
   162c4:	25 96       	adiw	r28, 0x05	; 5
   162c6:	e2 e0       	ldi	r30, 0x02	; 2
   162c8:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000162cc <amigo_send_status>:
   162cc:	a5 e0       	ldi	r26, 0x05	; 5
   162ce:	b0 e0       	ldi	r27, 0x00	; 0
   162d0:	ec e6       	ldi	r30, 0x6C	; 108
   162d2:	f1 eb       	ldi	r31, 0xB1	; 177
   162d4:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   162d8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   162dc:	85 ff       	sbrs	r24, 5
   162de:	0a c0       	rjmp	.+20     	; 0x162f4 <amigo_send_status+0x28>
   162e0:	83 e0       	ldi	r24, 0x03	; 3
   162e2:	9c e2       	ldi	r25, 0x2C	; 44
   162e4:	a0 e0       	ldi	r26, 0x00	; 0
   162e6:	ed b7       	in	r30, 0x3d	; 61
   162e8:	fe b7       	in	r31, 0x3e	; 62
   162ea:	81 83       	std	Z+1, r24	; 0x01
   162ec:	92 83       	std	Z+2, r25	; 0x02
   162ee:	a3 83       	std	Z+3, r26	; 0x03
   162f0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   162f4:	80 e0       	ldi	r24, 0x00	; 0
   162f6:	91 e0       	ldi	r25, 0x01	; 1
   162f8:	9d 83       	std	Y+5, r25	; 0x05
   162fa:	8c 83       	std	Y+4, r24	; 0x04
   162fc:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   16300:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   16304:	ae 01       	movw	r20, r28
   16306:	4c 5f       	subi	r20, 0xFC	; 252
   16308:	5f 4f       	sbci	r21, 0xFF	; 255
   1630a:	64 e0       	ldi	r22, 0x04	; 4
   1630c:	70 e0       	ldi	r23, 0x00	; 0
   1630e:	09 96       	adiw	r24, 0x09	; 9
   16310:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   16314:	2c 81       	ldd	r18, Y+4	; 0x04
   16316:	3d 81       	ldd	r19, Y+5	; 0x05
   16318:	22 27       	eor	r18, r18
   1631a:	30 7d       	andi	r19, 0xD0	; 208
   1631c:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16320:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16324:	23 2b       	or	r18, r19
   16326:	29 f0       	breq	.+10     	; 0x16332 <amigo_send_status+0x66>
   16328:	27 81       	ldd	r18, Z+7	; 0x07
   1632a:	30 85       	ldd	r19, Z+8	; 0x08
   1632c:	20 62       	ori	r18, 0x20	; 32
   1632e:	30 87       	std	Z+8, r19	; 0x08
   16330:	27 83       	std	Z+7, r18	; 0x07
   16332:	04 97       	sbiw	r24, 0x04	; 4
   16334:	b1 f0       	breq	.+44     	; 0x16362 <amigo_send_status+0x96>
   16336:	87 81       	ldd	r24, Z+7	; 0x07
   16338:	90 85       	ldd	r25, Z+8	; 0x08
   1633a:	80 62       	ori	r24, 0x20	; 32
   1633c:	90 87       	std	Z+8, r25	; 0x08
   1633e:	87 83       	std	Z+7, r24	; 0x07
   16340:	81 e0       	ldi	r24, 0x01	; 1
   16342:	86 83       	std	Z+6, r24	; 0x06
   16344:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16348:	81 ff       	sbrs	r24, 1
   1634a:	0e c0       	rjmp	.+28     	; 0x16368 <amigo_send_status+0x9c>
   1634c:	89 ee       	ldi	r24, 0xE9	; 233
   1634e:	9b e2       	ldi	r25, 0x2B	; 43
   16350:	a0 e0       	ldi	r26, 0x00	; 0
   16352:	ed b7       	in	r30, 0x3d	; 61
   16354:	fe b7       	in	r31, 0x3e	; 62
   16356:	81 83       	std	Z+1, r24	; 0x01
   16358:	92 83       	std	Z+2, r25	; 0x02
   1635a:	a3 83       	std	Z+3, r26	; 0x03
   1635c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16360:	03 c0       	rjmp	.+6      	; 0x16368 <amigo_send_status+0x9c>
   16362:	10 86       	std	Z+8, r1	; 0x08
   16364:	17 82       	std	Z+7, r1	; 0x07
   16366:	16 82       	std	Z+6, r1	; 0x06
   16368:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   1636c:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16370:	81 81       	ldd	r24, Z+1	; 0x01
   16372:	90 e0       	ldi	r25, 0x00	; 0
   16374:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16378:	8c 81       	ldd	r24, Y+4	; 0x04
   1637a:	9d 81       	ldd	r25, Y+5	; 0x05
   1637c:	88 27       	eor	r24, r24
   1637e:	90 7d       	andi	r25, 0xD0	; 208
   16380:	25 96       	adiw	r28, 0x05	; 5
   16382:	e2 e0       	ldi	r30, 0x02	; 2
   16384:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00016388 <amigo_increment>:
   16388:	a1 e1       	ldi	r26, 0x11	; 17
   1638a:	b0 e0       	ldi	r27, 0x00	; 0
   1638c:	ea ec       	ldi	r30, 0xCA	; 202
   1638e:	f1 eb       	ldi	r31, 0xB1	; 177
   16390:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   16394:	bc 01       	movw	r22, r24
   16396:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1639a:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1639e:	91 e1       	ldi	r25, 0x11	; 17
   163a0:	de 01       	movw	r26, r28
   163a2:	11 96       	adiw	r26, 0x01	; 1
   163a4:	01 90       	ld	r0, Z+
   163a6:	0d 92       	st	X+, r0
   163a8:	9a 95       	dec	r25
   163aa:	e1 f7       	brne	.-8      	; 0x163a4 <amigo_increment+0x1c>
   163ac:	9e 81       	ldd	r25, Y+6	; 0x06
   163ae:	9f 5f       	subi	r25, 0xFF	; 255
   163b0:	9e 83       	std	Y+6, r25	; 0x06
   163b2:	ce 01       	movw	r24, r28
   163b4:	01 96       	adiw	r24, 0x01	; 1
   163b6:	b3 dd       	rcall	.-1178   	; 0x15f1e <amigo_overflow_check>
   163b8:	00 97       	sbiw	r24, 0x00	; 0
   163ba:	59 f4       	brne	.+22     	; 0x163d2 <amigo_increment+0x4a>
   163bc:	a0 91 4a 19 	lds	r26, 0x194A	; 0x80194a <AMIGOs>
   163c0:	b0 91 4b 19 	lds	r27, 0x194B	; 0x80194b <AMIGOs+0x1>
   163c4:	21 e1       	ldi	r18, 0x11	; 17
   163c6:	fe 01       	movw	r30, r28
   163c8:	31 96       	adiw	r30, 0x01	; 1
   163ca:	01 90       	ld	r0, Z+
   163cc:	0d 92       	st	X+, r0
   163ce:	2a 95       	dec	r18
   163d0:	e1 f7       	brne	.-8      	; 0x163ca <amigo_increment+0x42>
   163d2:	61 96       	adiw	r28, 0x11	; 17
   163d4:	e2 e0       	ldi	r30, 0x02	; 2
   163d6:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

000163da <amigo_seek>:
   163da:	0f 93       	push	r16
   163dc:	1f 93       	push	r17
   163de:	cf 93       	push	r28
   163e0:	df 93       	push	r29
   163e2:	ec 01       	movw	r28, r24
   163e4:	67 e4       	ldi	r22, 0x47	; 71
   163e6:	75 e1       	ldi	r23, 0x15	; 21
   163e8:	9a dd       	rcall	.-1228   	; 0x15f1e <amigo_overflow_check>
   163ea:	8c 01       	movw	r16, r24
   163ec:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   163f0:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   163f4:	89 2b       	or	r24, r25
   163f6:	41 f0       	breq	.+16     	; 0x16408 <amigo_seek+0x2e>
   163f8:	81 e0       	ldi	r24, 0x01	; 1
   163fa:	86 83       	std	Z+6, r24	; 0x06
   163fc:	87 81       	ldd	r24, Z+7	; 0x07
   163fe:	90 85       	ldd	r25, Z+8	; 0x08
   16400:	84 60       	ori	r24, 0x04	; 4
   16402:	90 87       	std	Z+8, r25	; 0x08
   16404:	87 83       	std	Z+7, r24	; 0x07
   16406:	06 c0       	rjmp	.+12     	; 0x16414 <amigo_seek+0x3a>
   16408:	8d 81       	ldd	r24, Y+5	; 0x05
   1640a:	85 83       	std	Z+5, r24	; 0x05
   1640c:	8c 81       	ldd	r24, Y+4	; 0x04
   1640e:	84 83       	std	Z+4, r24	; 0x04
   16410:	8b 81       	ldd	r24, Y+3	; 0x03
   16412:	83 83       	std	Z+3, r24	; 0x03
   16414:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16418:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1641c:	81 81       	ldd	r24, Z+1	; 0x01
   1641e:	90 e0       	ldi	r25, 0x00	; 0
   16420:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16424:	c8 01       	movw	r24, r16
   16426:	df 91       	pop	r29
   16428:	cf 91       	pop	r28
   1642a:	1f 91       	pop	r17
   1642c:	0f 91       	pop	r16
   1642e:	08 95       	ret

00016430 <amigo_verify>:
   16430:	8f 92       	push	r8
   16432:	9f 92       	push	r9
   16434:	af 92       	push	r10
   16436:	bf 92       	push	r11
   16438:	ef 92       	push	r14
   1643a:	ff 92       	push	r15
   1643c:	0f 93       	push	r16
   1643e:	1f 93       	push	r17
   16440:	cf 93       	push	r28
   16442:	df 93       	push	r29
   16444:	ad b7       	in	r26, 0x3d	; 61
   16446:	be b7       	in	r27, 0x3e	; 62
   16448:	19 97       	sbiw	r26, 0x09	; 9
   1644a:	0f b6       	in	r0, 0x3f	; 63
   1644c:	f8 94       	cli
   1644e:	be bf       	out	0x3e, r27	; 62
   16450:	0f be       	out	0x3f, r0	; 63
   16452:	ad bf       	out	0x3d, r26	; 61
   16454:	7c 01       	movw	r14, r24
   16456:	6c e4       	ldi	r22, 0x4C	; 76
   16458:	75 e1       	ldi	r23, 0x15	; 21
   1645a:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   1645e:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   16462:	b3 dd       	rcall	.-1178   	; 0x15fca <amigo_chs_to_logical>
   16464:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16468:	25 ff       	sbrs	r18, 5
   1646a:	10 c0       	rjmp	.+32     	; 0x1648c <amigo_verify+0x5c>
   1646c:	ed b7       	in	r30, 0x3d	; 61
   1646e:	fe b7       	in	r31, 0x3e	; 62
   16470:	e0 86       	std	Z+8, r14	; 0x08
   16472:	f1 86       	std	Z+9, r15	; 0x09
   16474:	64 83       	std	Z+4, r22	; 0x04
   16476:	75 83       	std	Z+5, r23	; 0x05
   16478:	86 83       	std	Z+6, r24	; 0x06
   1647a:	97 83       	std	Z+7, r25	; 0x07
   1647c:	88 ea       	ldi	r24, 0xA8	; 168
   1647e:	9b e2       	ldi	r25, 0x2B	; 43
   16480:	a0 e0       	ldi	r26, 0x00	; 0
   16482:	81 83       	std	Z+1, r24	; 0x01
   16484:	92 83       	std	Z+2, r25	; 0x02
   16486:	a3 83       	std	Z+3, r26	; 0x03
   16488:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1648c:	e7 01       	movw	r28, r14
   1648e:	20 97       	sbiw	r28, 0x00	; 0
   16490:	09 f4       	brne	.+2      	; 0x16494 <amigo_verify+0x64>
   16492:	49 c0       	rjmp	.+146    	; 0x16526 <amigo_verify+0xf6>
   16494:	69 e5       	ldi	r22, 0x59	; 89
   16496:	75 e1       	ldi	r23, 0x15	; 21
   16498:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   1649c:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   164a0:	94 dd       	rcall	.-1240   	; 0x15fca <amigo_chs_to_logical>
   164a2:	4b 01       	movw	r8, r22
   164a4:	5c 01       	movw	r10, r24
   164a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   164aa:	86 fd       	sbrc	r24, 6
   164ac:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   164b0:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   164b4:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   164b8:	e0 90 4a 19 	lds	r14, 0x194A	; 0x80194a <AMIGOs>
   164bc:	f0 90 4b 19 	lds	r15, 0x194B	; 0x80194b <AMIGOs+0x1>
   164c0:	87 e0       	ldi	r24, 0x07	; 7
   164c2:	e8 0e       	add	r14, r24
   164c4:	f1 1c       	adc	r15, r1
   164c6:	06 81       	ldd	r16, Z+6	; 0x06
   164c8:	17 81       	ldd	r17, Z+7	; 0x07
   164ca:	2b ec       	ldi	r18, 0xCB	; 203
   164cc:	3c e1       	ldi	r19, 0x1C	; 28
   164ce:	b5 01       	movw	r22, r10
   164d0:	a4 01       	movw	r20, r8
   164d2:	82 81       	ldd	r24, Z+2	; 0x02
   164d4:	93 81       	ldd	r25, Z+3	; 0x03
   164d6:	0e 94 7c 84 	call	0x108f8	; 0x108f8 <dbf_open_read>
   164da:	7c 01       	movw	r14, r24
   164dc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   164e0:	86 ff       	sbrs	r24, 6
   164e2:	04 c0       	rjmp	.+8      	; 0x164ec <amigo_verify+0xbc>
   164e4:	81 e6       	ldi	r24, 0x61	; 97
   164e6:	90 e1       	ldi	r25, 0x10	; 16
   164e8:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   164ec:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   164f0:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   164f4:	86 81       	ldd	r24, Z+6	; 0x06
   164f6:	97 81       	ldd	r25, Z+7	; 0x07
   164f8:	e8 16       	cp	r14, r24
   164fa:	f9 06       	cpc	r15, r25
   164fc:	61 f0       	breq	.+24     	; 0x16516 <amigo_verify+0xe6>
   164fe:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16502:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16506:	81 e0       	ldi	r24, 0x01	; 1
   16508:	86 83       	std	Z+6, r24	; 0x06
   1650a:	87 81       	ldd	r24, Z+7	; 0x07
   1650c:	90 85       	ldd	r25, Z+8	; 0x08
   1650e:	81 60       	ori	r24, 0x01	; 1
   16510:	90 87       	std	Z+8, r25	; 0x08
   16512:	87 83       	std	Z+7, r24	; 0x07
   16514:	0b c0       	rjmp	.+22     	; 0x1652c <amigo_verify+0xfc>
   16516:	81 e6       	ldi	r24, 0x61	; 97
   16518:	95 e1       	ldi	r25, 0x15	; 21
   1651a:	36 df       	rcall	.-404    	; 0x16388 <amigo_increment>
   1651c:	21 97       	sbiw	r28, 0x01	; 1
   1651e:	89 2b       	or	r24, r25
   16520:	09 f4       	brne	.+2      	; 0x16524 <amigo_verify+0xf4>
   16522:	b5 cf       	rjmp	.-150    	; 0x1648e <amigo_verify+0x5e>
   16524:	03 c0       	rjmp	.+6      	; 0x1652c <amigo_verify+0xfc>
   16526:	c0 e0       	ldi	r28, 0x00	; 0
   16528:	d0 e0       	ldi	r29, 0x00	; 0
   1652a:	02 c0       	rjmp	.+4      	; 0x16530 <amigo_verify+0x100>
   1652c:	c1 e0       	ldi	r28, 0x01	; 1
   1652e:	d0 e0       	ldi	r29, 0x00	; 0
   16530:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16534:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16538:	81 81       	ldd	r24, Z+1	; 0x01
   1653a:	90 e0       	ldi	r25, 0x00	; 0
   1653c:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16540:	ce 01       	movw	r24, r28
   16542:	ad b7       	in	r26, 0x3d	; 61
   16544:	be b7       	in	r27, 0x3e	; 62
   16546:	19 96       	adiw	r26, 0x09	; 9
   16548:	0f b6       	in	r0, 0x3f	; 63
   1654a:	f8 94       	cli
   1654c:	be bf       	out	0x3e, r27	; 62
   1654e:	0f be       	out	0x3f, r0	; 63
   16550:	ad bf       	out	0x3d, r26	; 61
   16552:	df 91       	pop	r29
   16554:	cf 91       	pop	r28
   16556:	1f 91       	pop	r17
   16558:	0f 91       	pop	r16
   1655a:	ff 90       	pop	r15
   1655c:	ef 90       	pop	r14
   1655e:	bf 90       	pop	r11
   16560:	af 90       	pop	r10
   16562:	9f 90       	pop	r9
   16564:	8f 90       	pop	r8
   16566:	08 95       	ret

00016568 <amigo_format>:
   16568:	ef 92       	push	r14
   1656a:	ff 92       	push	r15
   1656c:	0f 93       	push	r16
   1656e:	1f 93       	push	r17
   16570:	cf 93       	push	r28
   16572:	df 93       	push	r29
   16574:	00 d0       	rcall	.+0      	; 0x16576 <amigo_format+0xe>
   16576:	1f 92       	push	r1
   16578:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1657c:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16580:	15 82       	std	Z+5, r1	; 0x05
   16582:	14 82       	std	Z+4, r1	; 0x04
   16584:	13 82       	std	Z+3, r1	; 0x03
   16586:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   1658a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1658e:	46 81       	ldd	r20, Z+6	; 0x06
   16590:	57 81       	ldd	r21, Z+7	; 0x07
   16592:	68 2f       	mov	r22, r24
   16594:	70 e0       	ldi	r23, 0x00	; 0
   16596:	8b ec       	ldi	r24, 0xCB	; 203
   16598:	9c e1       	ldi	r25, 0x1C	; 28
   1659a:	0e 94 70 e5 	call	0x1cae0	; 0x1cae0 <memset>
   1659e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165a2:	85 ff       	sbrs	r24, 5
   165a4:	0a c0       	rjmp	.+20     	; 0x165ba <amigo_format+0x52>
   165a6:	8d e6       	ldi	r24, 0x6D	; 109
   165a8:	9b e2       	ldi	r25, 0x2B	; 43
   165aa:	a0 e0       	ldi	r26, 0x00	; 0
   165ac:	ed b7       	in	r30, 0x3d	; 61
   165ae:	fe b7       	in	r31, 0x3e	; 62
   165b0:	81 83       	std	Z+1, r24	; 0x01
   165b2:	92 83       	std	Z+2, r25	; 0x02
   165b4:	a3 83       	std	Z+3, r26	; 0x03
   165b6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   165ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165be:	86 fd       	sbrc	r24, 6
   165c0:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   165c4:	68 e6       	ldi	r22, 0x68	; 104
   165c6:	75 e1       	ldi	r23, 0x15	; 21
   165c8:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   165cc:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   165d0:	fc dc       	rcall	.-1544   	; 0x15fca <amigo_chs_to_logical>
   165d2:	ab 01       	movw	r20, r22
   165d4:	bc 01       	movw	r22, r24
   165d6:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   165da:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   165de:	e0 90 4a 19 	lds	r14, 0x194A	; 0x80194a <AMIGOs>
   165e2:	f0 90 4b 19 	lds	r15, 0x194B	; 0x80194b <AMIGOs+0x1>
   165e6:	87 e0       	ldi	r24, 0x07	; 7
   165e8:	e8 0e       	add	r14, r24
   165ea:	f1 1c       	adc	r15, r1
   165ec:	06 81       	ldd	r16, Z+6	; 0x06
   165ee:	17 81       	ldd	r17, Z+7	; 0x07
   165f0:	2b ec       	ldi	r18, 0xCB	; 203
   165f2:	3c e1       	ldi	r19, 0x1C	; 28
   165f4:	82 81       	ldd	r24, Z+2	; 0x02
   165f6:	93 81       	ldd	r25, Z+3	; 0x03
   165f8:	0e 94 d3 84 	call	0x109a6	; 0x109a6 <dbf_open_write>
   165fc:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16600:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16604:	26 81       	ldd	r18, Z+6	; 0x06
   16606:	37 81       	ldd	r19, Z+7	; 0x07
   16608:	82 17       	cp	r24, r18
   1660a:	93 07       	cpc	r25, r19
   1660c:	71 f0       	breq	.+28     	; 0x1662a <amigo_format+0xc2>
   1660e:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16612:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16616:	87 81       	ldd	r24, Z+7	; 0x07
   16618:	90 85       	ldd	r25, Z+8	; 0x08
   1661a:	82 60       	ori	r24, 0x02	; 2
   1661c:	90 87       	std	Z+8, r25	; 0x08
   1661e:	87 83       	std	Z+7, r24	; 0x07
   16620:	81 e0       	ldi	r24, 0x01	; 1
   16622:	86 83       	std	Z+6, r24	; 0x06
   16624:	c1 e0       	ldi	r28, 0x01	; 1
   16626:	d0 e0       	ldi	r29, 0x00	; 0
   16628:	0f c0       	rjmp	.+30     	; 0x16648 <amigo_format+0xe0>
   1662a:	80 e0       	ldi	r24, 0x00	; 0
   1662c:	90 e0       	ldi	r25, 0x00	; 0
   1662e:	ac de       	rcall	.-680    	; 0x16388 <amigo_increment>
   16630:	89 2b       	or	r24, r25
   16632:	41 f2       	breq	.-112    	; 0x165c4 <amigo_format+0x5c>
   16634:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16638:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1663c:	15 82       	std	Z+5, r1	; 0x05
   1663e:	14 82       	std	Z+4, r1	; 0x04
   16640:	13 82       	std	Z+3, r1	; 0x03
   16642:	16 82       	std	Z+6, r1	; 0x06
   16644:	c0 e0       	ldi	r28, 0x00	; 0
   16646:	d0 e0       	ldi	r29, 0x00	; 0
   16648:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1664c:	86 ff       	sbrs	r24, 6
   1664e:	04 c0       	rjmp	.+8      	; 0x16658 <amigo_format+0xf0>
   16650:	88 e6       	ldi	r24, 0x68	; 104
   16652:	95 e1       	ldi	r25, 0x15	; 21
   16654:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   16658:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1665c:	85 ff       	sbrs	r24, 5
   1665e:	0a c0       	rjmp	.+20     	; 0x16674 <amigo_format+0x10c>
   16660:	88 e5       	ldi	r24, 0x58	; 88
   16662:	9b e2       	ldi	r25, 0x2B	; 43
   16664:	a0 e0       	ldi	r26, 0x00	; 0
   16666:	ed b7       	in	r30, 0x3d	; 61
   16668:	fe b7       	in	r31, 0x3e	; 62
   1666a:	81 83       	std	Z+1, r24	; 0x01
   1666c:	92 83       	std	Z+2, r25	; 0x02
   1666e:	a3 83       	std	Z+3, r26	; 0x03
   16670:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16674:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16678:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1667c:	81 81       	ldd	r24, Z+1	; 0x01
   1667e:	90 e0       	ldi	r25, 0x00	; 0
   16680:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16684:	ce 01       	movw	r24, r28
   16686:	cd b7       	in	r28, 0x3d	; 61
   16688:	de b7       	in	r29, 0x3e	; 62
   1668a:	23 96       	adiw	r28, 0x03	; 3
   1668c:	e6 e0       	ldi	r30, 0x06	; 6
   1668e:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00016692 <amigo_buffered_read>:
   16692:	8f 92       	push	r8
   16694:	9f 92       	push	r9
   16696:	af 92       	push	r10
   16698:	bf 92       	push	r11
   1669a:	ef 92       	push	r14
   1669c:	ff 92       	push	r15
   1669e:	0f 93       	push	r16
   166a0:	1f 93       	push	r17
   166a2:	cf 93       	push	r28
   166a4:	df 93       	push	r29
   166a6:	00 d0       	rcall	.+0      	; 0x166a8 <amigo_buffered_read+0x16>
   166a8:	00 d0       	rcall	.+0      	; 0x166aa <amigo_buffered_read+0x18>
   166aa:	1f 92       	push	r1
   166ac:	cd b7       	in	r28, 0x3d	; 61
   166ae:	de b7       	in	r29, 0x3e	; 62
   166b0:	6f e6       	ldi	r22, 0x6F	; 111
   166b2:	75 e1       	ldi	r23, 0x15	; 21
   166b4:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   166b8:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   166bc:	86 dc       	rcall	.-1780   	; 0x15fca <amigo_chs_to_logical>
   166be:	4b 01       	movw	r8, r22
   166c0:	5c 01       	movw	r10, r24
   166c2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   166c6:	86 fd       	sbrc	r24, 6
   166c8:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   166cc:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   166d0:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   166d4:	e0 90 4a 19 	lds	r14, 0x194A	; 0x80194a <AMIGOs>
   166d8:	f0 90 4b 19 	lds	r15, 0x194B	; 0x80194b <AMIGOs+0x1>
   166dc:	87 e0       	ldi	r24, 0x07	; 7
   166de:	e8 0e       	add	r14, r24
   166e0:	f1 1c       	adc	r15, r1
   166e2:	06 81       	ldd	r16, Z+6	; 0x06
   166e4:	17 81       	ldd	r17, Z+7	; 0x07
   166e6:	2b ec       	ldi	r18, 0xCB	; 203
   166e8:	3c e1       	ldi	r19, 0x1C	; 28
   166ea:	b5 01       	movw	r22, r10
   166ec:	a4 01       	movw	r20, r8
   166ee:	82 81       	ldd	r24, Z+2	; 0x02
   166f0:	93 81       	ldd	r25, Z+3	; 0x03
   166f2:	0e 94 7c 84 	call	0x108f8	; 0x108f8 <dbf_open_read>
   166f6:	7c 01       	movw	r14, r24
   166f8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   166fc:	86 ff       	sbrs	r24, 6
   166fe:	04 c0       	rjmp	.+8      	; 0x16708 <amigo_buffered_read+0x76>
   16700:	81 e6       	ldi	r24, 0x61	; 97
   16702:	90 e1       	ldi	r25, 0x10	; 16
   16704:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   16708:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   1670c:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16710:	86 81       	ldd	r24, Z+6	; 0x06
   16712:	97 81       	ldd	r25, Z+7	; 0x07
   16714:	e8 16       	cp	r14, r24
   16716:	f9 06       	cpc	r15, r25
   16718:	39 f0       	breq	.+14     	; 0x16728 <amigo_buffered_read+0x96>
   1671a:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1671e:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16722:	81 e0       	ldi	r24, 0x01	; 1
   16724:	86 83       	std	Z+6, r24	; 0x06
   16726:	6c c0       	rjmp	.+216    	; 0x16800 <amigo_buffered_read+0x16e>
   16728:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1672c:	87 fd       	sbrc	r24, 7
   1672e:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   16732:	80 e0       	ldi	r24, 0x00	; 0
   16734:	91 e0       	ldi	r25, 0x01	; 1
   16736:	9d 83       	std	Y+5, r25	; 0x05
   16738:	8c 83       	std	Y+4, r24	; 0x04
   1673a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   1673e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16742:	66 81       	ldd	r22, Z+6	; 0x06
   16744:	77 81       	ldd	r23, Z+7	; 0x07
   16746:	ae 01       	movw	r20, r28
   16748:	4c 5f       	subi	r20, 0xFC	; 252
   1674a:	5f 4f       	sbci	r21, 0xFF	; 255
   1674c:	8b ec       	ldi	r24, 0xCB	; 203
   1674e:	9c e1       	ldi	r25, 0x1C	; 28
   16750:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   16754:	7c 01       	movw	r14, r24
   16756:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1675a:	87 ff       	sbrs	r24, 7
   1675c:	04 c0       	rjmp	.+8      	; 0x16766 <amigo_buffered_read+0xd4>
   1675e:	8d e7       	ldi	r24, 0x7D	; 125
   16760:	95 e1       	ldi	r25, 0x15	; 21
   16762:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   16766:	8c 81       	ldd	r24, Y+4	; 0x04
   16768:	9d 81       	ldd	r25, Y+5	; 0x05
   1676a:	88 27       	eor	r24, r24
   1676c:	90 7d       	andi	r25, 0xD0	; 208
   1676e:	89 2b       	or	r24, r25
   16770:	49 f4       	brne	.+18     	; 0x16784 <amigo_buffered_read+0xf2>
   16772:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16776:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1677a:	86 81       	ldd	r24, Z+6	; 0x06
   1677c:	97 81       	ldd	r25, Z+7	; 0x07
   1677e:	e8 16       	cp	r14, r24
   16780:	f9 06       	cpc	r15, r25
   16782:	31 f1       	breq	.+76     	; 0x167d0 <amigo_buffered_read+0x13e>
   16784:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16788:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1678c:	81 e0       	ldi	r24, 0x01	; 1
   1678e:	86 83       	std	Z+6, r24	; 0x06
   16790:	87 81       	ldd	r24, Z+7	; 0x07
   16792:	90 85       	ldd	r25, Z+8	; 0x08
   16794:	80 62       	ori	r24, 0x20	; 32
   16796:	90 87       	std	Z+8, r25	; 0x08
   16798:	87 83       	std	Z+7, r24	; 0x07
   1679a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1679e:	81 ff       	sbrs	r24, 1
   167a0:	0a c0       	rjmp	.+20     	; 0x167b6 <amigo_buffered_read+0x124>
   167a2:	8e e3       	ldi	r24, 0x3E	; 62
   167a4:	9b e2       	ldi	r25, 0x2B	; 43
   167a6:	a0 e0       	ldi	r26, 0x00	; 0
   167a8:	ed b7       	in	r30, 0x3d	; 61
   167aa:	fe b7       	in	r31, 0x3e	; 62
   167ac:	81 83       	std	Z+1, r24	; 0x01
   167ae:	92 83       	std	Z+2, r25	; 0x02
   167b0:	a3 83       	std	Z+3, r26	; 0x03
   167b2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   167b6:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   167ba:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   167be:	81 81       	ldd	r24, Z+1	; 0x01
   167c0:	90 e0       	ldi	r25, 0x00	; 0
   167c2:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   167c6:	8c 81       	ldd	r24, Y+4	; 0x04
   167c8:	9d 81       	ldd	r25, Y+5	; 0x05
   167ca:	88 27       	eor	r24, r24
   167cc:	90 7d       	andi	r25, 0xD0	; 208
   167ce:	1a c0       	rjmp	.+52     	; 0x16804 <amigo_buffered_read+0x172>
   167d0:	8f e6       	ldi	r24, 0x6F	; 111
   167d2:	95 e1       	ldi	r25, 0x15	; 21
   167d4:	d9 dd       	rcall	.-1102   	; 0x16388 <amigo_increment>
   167d6:	89 2b       	or	r24, r25
   167d8:	59 f0       	breq	.+22     	; 0x167f0 <amigo_buffered_read+0x15e>
   167da:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   167de:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   167e2:	81 e0       	ldi	r24, 0x01	; 1
   167e4:	86 83       	std	Z+6, r24	; 0x06
   167e6:	87 81       	ldd	r24, Z+7	; 0x07
   167e8:	90 85       	ldd	r25, Z+8	; 0x08
   167ea:	84 60       	ori	r24, 0x04	; 4
   167ec:	90 87       	std	Z+8, r25	; 0x08
   167ee:	87 83       	std	Z+7, r24	; 0x07
   167f0:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   167f4:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   167f8:	81 81       	ldd	r24, Z+1	; 0x01
   167fa:	90 e0       	ldi	r25, 0x00	; 0
   167fc:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16800:	80 e0       	ldi	r24, 0x00	; 0
   16802:	90 e0       	ldi	r25, 0x00	; 0
   16804:	0f 90       	pop	r0
   16806:	0f 90       	pop	r0
   16808:	0f 90       	pop	r0
   1680a:	0f 90       	pop	r0
   1680c:	0f 90       	pop	r0
   1680e:	df 91       	pop	r29
   16810:	cf 91       	pop	r28
   16812:	1f 91       	pop	r17
   16814:	0f 91       	pop	r16
   16816:	ff 90       	pop	r15
   16818:	ef 90       	pop	r14
   1681a:	bf 90       	pop	r11
   1681c:	af 90       	pop	r10
   1681e:	9f 90       	pop	r9
   16820:	8f 90       	pop	r8
   16822:	08 95       	ret

00016824 <amigo_buffered_write>:
   16824:	8f 92       	push	r8
   16826:	9f 92       	push	r9
   16828:	af 92       	push	r10
   1682a:	bf 92       	push	r11
   1682c:	ef 92       	push	r14
   1682e:	ff 92       	push	r15
   16830:	0f 93       	push	r16
   16832:	1f 93       	push	r17
   16834:	cf 93       	push	r28
   16836:	df 93       	push	r29
   16838:	00 d0       	rcall	.+0      	; 0x1683a <amigo_buffered_write+0x16>
   1683a:	00 d0       	rcall	.+0      	; 0x1683c <amigo_buffered_write+0x18>
   1683c:	1f 92       	push	r1
   1683e:	cd b7       	in	r28, 0x3d	; 61
   16840:	de b7       	in	r29, 0x3e	; 62
   16842:	68 e8       	ldi	r22, 0x88	; 136
   16844:	75 e1       	ldi	r23, 0x15	; 21
   16846:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <AMIGOs>
   1684a:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <AMIGOs+0x1>
   1684e:	bd db       	rcall	.-2182   	; 0x15fca <amigo_chs_to_logical>
   16850:	4b 01       	movw	r8, r22
   16852:	5c 01       	movw	r10, r24
   16854:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16858:	87 fd       	sbrc	r24, 7
   1685a:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   1685e:	1d 82       	std	Y+5, r1	; 0x05
   16860:	1c 82       	std	Y+4, r1	; 0x04
   16862:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16866:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1686a:	66 81       	ldd	r22, Z+6	; 0x06
   1686c:	77 81       	ldd	r23, Z+7	; 0x07
   1686e:	ae 01       	movw	r20, r28
   16870:	4c 5f       	subi	r20, 0xFC	; 252
   16872:	5f 4f       	sbci	r21, 0xFF	; 255
   16874:	8b ec       	ldi	r24, 0xCB	; 203
   16876:	9c e1       	ldi	r25, 0x1C	; 28
   16878:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
   1687c:	7c 01       	movw	r14, r24
   1687e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16882:	87 ff       	sbrs	r24, 7
   16884:	04 c0       	rjmp	.+8      	; 0x1688e <amigo_buffered_write+0x6a>
   16886:	87 e9       	ldi	r24, 0x97	; 151
   16888:	95 e1       	ldi	r25, 0x15	; 21
   1688a:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   1688e:	8c 81       	ldd	r24, Y+4	; 0x04
   16890:	9d 81       	ldd	r25, Y+5	; 0x05
   16892:	88 27       	eor	r24, r24
   16894:	90 7d       	andi	r25, 0xD0	; 208
   16896:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1689a:	89 2b       	or	r24, r25
   1689c:	49 f4       	brne	.+18     	; 0x168b0 <amigo_buffered_write+0x8c>
   1689e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   168a2:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   168a6:	86 81       	ldd	r24, Z+6	; 0x06
   168a8:	97 81       	ldd	r25, Z+7	; 0x07
   168aa:	e8 16       	cp	r14, r24
   168ac:	f9 06       	cpc	r15, r25
   168ae:	c1 f0       	breq	.+48     	; 0x168e0 <amigo_buffered_write+0xbc>
   168b0:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   168b4:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   168b8:	81 e0       	ldi	r24, 0x01	; 1
   168ba:	86 83       	std	Z+6, r24	; 0x06
   168bc:	87 81       	ldd	r24, Z+7	; 0x07
   168be:	90 85       	ldd	r25, Z+8	; 0x08
   168c0:	80 62       	ori	r24, 0x20	; 32
   168c2:	90 87       	std	Z+8, r25	; 0x08
   168c4:	87 83       	std	Z+7, r24	; 0x07
   168c6:	21 ff       	sbrs	r18, 1
   168c8:	4e c0       	rjmp	.+156    	; 0x16966 <amigo_buffered_write+0x142>
   168ca:	8f e1       	ldi	r24, 0x1F	; 31
   168cc:	9b e2       	ldi	r25, 0x2B	; 43
   168ce:	a0 e0       	ldi	r26, 0x00	; 0
   168d0:	ed b7       	in	r30, 0x3d	; 61
   168d2:	fe b7       	in	r31, 0x3e	; 62
   168d4:	81 83       	std	Z+1, r24	; 0x01
   168d6:	92 83       	std	Z+2, r25	; 0x02
   168d8:	a3 83       	std	Z+3, r26	; 0x03
   168da:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   168de:	43 c0       	rjmp	.+134    	; 0x16966 <amigo_buffered_write+0x142>
   168e0:	26 fd       	sbrc	r18, 6
   168e2:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
   168e6:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   168ea:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   168ee:	e0 90 4a 19 	lds	r14, 0x194A	; 0x80194a <AMIGOs>
   168f2:	f0 90 4b 19 	lds	r15, 0x194B	; 0x80194b <AMIGOs+0x1>
   168f6:	87 e0       	ldi	r24, 0x07	; 7
   168f8:	e8 0e       	add	r14, r24
   168fa:	f1 1c       	adc	r15, r1
   168fc:	06 81       	ldd	r16, Z+6	; 0x06
   168fe:	17 81       	ldd	r17, Z+7	; 0x07
   16900:	2b ec       	ldi	r18, 0xCB	; 203
   16902:	3c e1       	ldi	r19, 0x1C	; 28
   16904:	b5 01       	movw	r22, r10
   16906:	a4 01       	movw	r20, r8
   16908:	82 81       	ldd	r24, Z+2	; 0x02
   1690a:	93 81       	ldd	r25, Z+3	; 0x03
   1690c:	0e 94 d3 84 	call	0x109a6	; 0x109a6 <dbf_open_write>
   16910:	7c 01       	movw	r14, r24
   16912:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16916:	86 ff       	sbrs	r24, 6
   16918:	04 c0       	rjmp	.+8      	; 0x16922 <amigo_buffered_write+0xfe>
   1691a:	86 e5       	ldi	r24, 0x56	; 86
   1691c:	90 e1       	ldi	r25, 0x10	; 16
   1691e:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
   16922:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16926:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1692a:	86 81       	ldd	r24, Z+6	; 0x06
   1692c:	97 81       	ldd	r25, Z+7	; 0x07
   1692e:	e8 16       	cp	r14, r24
   16930:	f9 06       	cpc	r15, r25
   16932:	49 f0       	breq	.+18     	; 0x16946 <amigo_buffered_write+0x122>
   16934:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16938:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1693c:	81 e0       	ldi	r24, 0x01	; 1
   1693e:	86 83       	std	Z+6, r24	; 0x06
   16940:	80 e0       	ldi	r24, 0x00	; 0
   16942:	90 e0       	ldi	r25, 0x00	; 0
   16944:	1c c0       	rjmp	.+56     	; 0x1697e <amigo_buffered_write+0x15a>
   16946:	88 e8       	ldi	r24, 0x88	; 136
   16948:	95 e1       	ldi	r25, 0x15	; 21
   1694a:	1e dd       	rcall	.-1476   	; 0x16388 <amigo_increment>
   1694c:	89 2b       	or	r24, r25
   1694e:	59 f0       	breq	.+22     	; 0x16966 <amigo_buffered_write+0x142>
   16950:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16954:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16958:	81 e0       	ldi	r24, 0x01	; 1
   1695a:	86 83       	std	Z+6, r24	; 0x06
   1695c:	87 81       	ldd	r24, Z+7	; 0x07
   1695e:	90 85       	ldd	r25, Z+8	; 0x08
   16960:	84 60       	ori	r24, 0x04	; 4
   16962:	90 87       	std	Z+8, r25	; 0x08
   16964:	87 83       	std	Z+7, r24	; 0x07
   16966:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   1696a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1696e:	81 81       	ldd	r24, Z+1	; 0x01
   16970:	90 e0       	ldi	r25, 0x00	; 0
   16972:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16976:	8c 81       	ldd	r24, Y+4	; 0x04
   16978:	9d 81       	ldd	r25, Y+5	; 0x05
   1697a:	88 27       	eor	r24, r24
   1697c:	90 7d       	andi	r25, 0xD0	; 208
   1697e:	0f 90       	pop	r0
   16980:	0f 90       	pop	r0
   16982:	0f 90       	pop	r0
   16984:	0f 90       	pop	r0
   16986:	0f 90       	pop	r0
   16988:	df 91       	pop	r29
   1698a:	cf 91       	pop	r28
   1698c:	1f 91       	pop	r17
   1698e:	0f 91       	pop	r16
   16990:	ff 90       	pop	r15
   16992:	ef 90       	pop	r14
   16994:	bf 90       	pop	r11
   16996:	af 90       	pop	r10
   16998:	9f 90       	pop	r9
   1699a:	8f 90       	pop	r8
   1699c:	08 95       	ret

0001699e <amigo_cmd_dsj>:
   1699e:	a8 e0       	ldi	r26, 0x08	; 8
   169a0:	b0 e0       	ldi	r27, 0x00	; 0
   169a2:	e5 ed       	ldi	r30, 0xD5	; 213
   169a4:	f4 eb       	ldi	r31, 0xB4	; 180
   169a6:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   169aa:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   169ae:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   169b2:	86 81       	ldd	r24, Z+6	; 0x06
   169b4:	88 87       	std	Y+8, r24	; 0x08
   169b6:	80 e0       	ldi	r24, 0x00	; 0
   169b8:	91 e0       	ldi	r25, 0x01	; 1
   169ba:	9f 83       	std	Y+7, r25	; 0x07
   169bc:	8e 83       	std	Y+6, r24	; 0x06
   169be:	ae 01       	movw	r20, r28
   169c0:	4a 5f       	subi	r20, 0xFA	; 250
   169c2:	5f 4f       	sbci	r21, 0xFF	; 255
   169c4:	61 e0       	ldi	r22, 0x01	; 1
   169c6:	70 e0       	ldi	r23, 0x00	; 0
   169c8:	ce 01       	movw	r24, r28
   169ca:	08 96       	adiw	r24, 0x08	; 8
   169cc:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
   169d0:	2e 81       	ldd	r18, Y+6	; 0x06
   169d2:	3f 81       	ldd	r19, Y+7	; 0x07
   169d4:	22 27       	eor	r18, r18
   169d6:	30 7d       	andi	r19, 0xD0	; 208
   169d8:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   169dc:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   169e0:	23 2b       	or	r18, r19
   169e2:	29 f0       	breq	.+10     	; 0x169ee <amigo_cmd_dsj+0x50>
   169e4:	27 81       	ldd	r18, Z+7	; 0x07
   169e6:	30 85       	ldd	r19, Z+8	; 0x08
   169e8:	20 62       	ori	r18, 0x20	; 32
   169ea:	30 87       	std	Z+8, r19	; 0x08
   169ec:	27 83       	std	Z+7, r18	; 0x07
   169ee:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   169f2:	01 97       	sbiw	r24, 0x01	; 1
   169f4:	c1 f0       	breq	.+48     	; 0x16a26 <amigo_cmd_dsj+0x88>
   169f6:	81 e0       	ldi	r24, 0x01	; 1
   169f8:	86 83       	std	Z+6, r24	; 0x06
   169fa:	87 81       	ldd	r24, Z+7	; 0x07
   169fc:	90 85       	ldd	r25, Z+8	; 0x08
   169fe:	80 62       	ori	r24, 0x20	; 32
   16a00:	90 87       	std	Z+8, r25	; 0x08
   16a02:	87 83       	std	Z+7, r24	; 0x07
   16a04:	21 ff       	sbrs	r18, 1
   16a06:	0a c0       	rjmp	.+20     	; 0x16a1c <amigo_cmd_dsj+0x7e>
   16a08:	85 e0       	ldi	r24, 0x05	; 5
   16a0a:	9b e2       	ldi	r25, 0x2B	; 43
   16a0c:	a0 e0       	ldi	r26, 0x00	; 0
   16a0e:	ed b7       	in	r30, 0x3d	; 61
   16a10:	fe b7       	in	r31, 0x3e	; 62
   16a12:	81 83       	std	Z+1, r24	; 0x01
   16a14:	92 83       	std	Z+2, r25	; 0x02
   16a16:	a3 83       	std	Z+3, r26	; 0x03
   16a18:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16a1c:	8e 81       	ldd	r24, Y+6	; 0x06
   16a1e:	9f 81       	ldd	r25, Y+7	; 0x07
   16a20:	88 27       	eor	r24, r24
   16a22:	90 7d       	andi	r25, 0xD0	; 208
   16a24:	19 c0       	rjmp	.+50     	; 0x16a58 <amigo_cmd_dsj+0xba>
   16a26:	25 ff       	sbrs	r18, 5
   16a28:	0e c0       	rjmp	.+28     	; 0x16a46 <amigo_cmd_dsj+0xa8>
   16a2a:	86 81       	ldd	r24, Z+6	; 0x06
   16a2c:	90 e0       	ldi	r25, 0x00	; 0
   16a2e:	ed b7       	in	r30, 0x3d	; 61
   16a30:	fe b7       	in	r31, 0x3e	; 62
   16a32:	95 83       	std	Z+5, r25	; 0x05
   16a34:	84 83       	std	Z+4, r24	; 0x04
   16a36:	88 ef       	ldi	r24, 0xF8	; 248
   16a38:	9a e2       	ldi	r25, 0x2A	; 42
   16a3a:	a0 e0       	ldi	r26, 0x00	; 0
   16a3c:	81 83       	std	Z+1, r24	; 0x01
   16a3e:	92 83       	std	Z+2, r25	; 0x02
   16a40:	a3 83       	std	Z+3, r26	; 0x03
   16a42:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16a46:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16a4a:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16a4e:	16 82       	std	Z+6, r1	; 0x06
   16a50:	10 86       	std	Z+8, r1	; 0x08
   16a52:	17 82       	std	Z+7, r1	; 0x07
   16a54:	80 e0       	ldi	r24, 0x00	; 0
   16a56:	90 e0       	ldi	r25, 0x00	; 0
   16a58:	28 96       	adiw	r28, 0x08	; 8
   16a5a:	e2 e0       	ldi	r30, 0x02	; 2
   16a5c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00016a60 <amigo_cmd_clear>:
   16a60:	00 d0       	rcall	.+0      	; 0x16a62 <amigo_cmd_clear+0x2>
   16a62:	1f 92       	push	r1
   16a64:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16a68:	85 ff       	sbrs	r24, 5
   16a6a:	0a c0       	rjmp	.+20     	; 0x16a80 <amigo_cmd_clear+0x20>
   16a6c:	89 ee       	ldi	r24, 0xE9	; 233
   16a6e:	9a e2       	ldi	r25, 0x2A	; 42
   16a70:	a0 e0       	ldi	r26, 0x00	; 0
   16a72:	ed b7       	in	r30, 0x3d	; 61
   16a74:	fe b7       	in	r31, 0x3e	; 62
   16a76:	81 83       	std	Z+1, r24	; 0x01
   16a78:	92 83       	std	Z+2, r25	; 0x02
   16a7a:	a3 83       	std	Z+3, r26	; 0x03
   16a7c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16a80:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16a84:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16a88:	15 82       	std	Z+5, r1	; 0x05
   16a8a:	14 82       	std	Z+4, r1	; 0x04
   16a8c:	13 82       	std	Z+3, r1	; 0x03
   16a8e:	16 82       	std	Z+6, r1	; 0x06
   16a90:	10 86       	std	Z+8, r1	; 0x08
   16a92:	17 82       	std	Z+7, r1	; 0x07
   16a94:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16a98:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16a9c:	81 81       	ldd	r24, Z+1	; 0x01
   16a9e:	90 e0       	ldi	r25, 0x00	; 0
   16aa0:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
   16aa4:	80 e0       	ldi	r24, 0x00	; 0
   16aa6:	90 e0       	ldi	r25, 0x00	; 0
   16aa8:	0f 90       	pop	r0
   16aaa:	0f 90       	pop	r0
   16aac:	0f 90       	pop	r0
   16aae:	08 95       	ret

00016ab0 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16ab0:	af e0       	ldi	r26, 0x0F	; 15
   16ab2:	b0 e0       	ldi	r27, 0x00	; 0
   16ab4:	ee e5       	ldi	r30, 0x5E	; 94
   16ab6:	f5 eb       	ldi	r31, 0xB5	; 181
   16ab8:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
   16abc:	c8 2f       	mov	r28, r24
   16abe:	e6 2e       	mov	r14, r22
   16ac0:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16ac2:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16ac6:	90 e0       	ldi	r25, 0x00	; 0
   16ac8:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   16acc:	20 91 cf 1e 	lds	r18, 0x1ECF	; 0x801ecf <talking>
   16ad0:	f1 2c       	mov	r15, r1
   16ad2:	d0 e0       	ldi	r29, 0x00	; 0
   16ad4:	89 2b       	or	r24, r25
   16ad6:	f1 f0       	breq	.+60     	; 0x16b14 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16ad8:	82 2f       	mov	r24, r18
   16ada:	90 e0       	ldi	r25, 0x00	; 0
   16adc:	ed b7       	in	r30, 0x3d	; 61
   16ade:	fe b7       	in	r31, 0x3e	; 62
   16ae0:	97 87       	std	Z+15, r25	; 0x0f
   16ae2:	86 87       	std	Z+14, r24	; 0x0e
   16ae4:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16ae8:	90 e0       	ldi	r25, 0x00	; 0
   16aea:	95 87       	std	Z+13, r25	; 0x0d
   16aec:	84 87       	std	Z+12, r24	; 0x0c
   16aee:	13 87       	std	Z+11, r17	; 0x0b
   16af0:	02 87       	std	Z+10, r16	; 0x0a
   16af2:	f1 86       	std	Z+9, r15	; 0x09
   16af4:	e0 86       	std	Z+8, r14	; 0x08
   16af6:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16afa:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16afe:	80 81       	ld	r24, Z
   16b00:	90 e0       	ldi	r25, 0x00	; 0
   16b02:	ed b7       	in	r30, 0x3d	; 61
   16b04:	fe b7       	in	r31, 0x3e	; 62
   16b06:	97 83       	std	Z+7, r25	; 0x07
   16b08:	86 83       	std	Z+6, r24	; 0x06
   16b0a:	d5 83       	std	Z+5, r29	; 0x05
   16b0c:	c4 83       	std	Z+4, r28	; 0x04
   16b0e:	82 e8       	ldi	r24, 0x82	; 130
   16b10:	9a e2       	ldi	r25, 0x2A	; 42
   16b12:	51 c0       	rjmp	.+162    	; 0x16bb6 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16b14:	82 2f       	mov	r24, r18
   16b16:	90 e0       	ldi	r25, 0x00	; 0
   16b18:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   16b1c:	20 91 d1 1e 	lds	r18, 0x1ED1	; 0x801ed1 <listening>
   16b20:	30 91 cf 1e 	lds	r19, 0x1ECF	; 0x801ecf <talking>
   16b24:	a0 91 4a 19 	lds	r26, 0x194A	; 0x80194a <AMIGOs>
   16b28:	b0 91 4b 19 	lds	r27, 0x194B	; 0x80194b <AMIGOs+0x1>
   16b2c:	89 2b       	or	r24, r25
   16b2e:	b1 f0       	breq	.+44     	; 0x16b5c <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b30:	83 2f       	mov	r24, r19
   16b32:	90 e0       	ldi	r25, 0x00	; 0
   16b34:	ed b7       	in	r30, 0x3d	; 61
   16b36:	fe b7       	in	r31, 0x3e	; 62
   16b38:	97 87       	std	Z+15, r25	; 0x0f
   16b3a:	86 87       	std	Z+14, r24	; 0x0e
   16b3c:	30 e0       	ldi	r19, 0x00	; 0
   16b3e:	35 87       	std	Z+13, r19	; 0x0d
   16b40:	24 87       	std	Z+12, r18	; 0x0c
   16b42:	13 87       	std	Z+11, r17	; 0x0b
   16b44:	02 87       	std	Z+10, r16	; 0x0a
   16b46:	f1 86       	std	Z+9, r15	; 0x09
   16b48:	e0 86       	std	Z+8, r14	; 0x08
   16b4a:	8c 91       	ld	r24, X
   16b4c:	90 e0       	ldi	r25, 0x00	; 0
   16b4e:	97 83       	std	Z+7, r25	; 0x07
   16b50:	86 83       	std	Z+6, r24	; 0x06
   16b52:	d5 83       	std	Z+5, r29	; 0x05
   16b54:	c4 83       	std	Z+4, r28	; 0x04
   16b56:	8b e1       	ldi	r24, 0x1B	; 27
   16b58:	9a e2       	ldi	r25, 0x2A	; 42
   16b5a:	2d c0       	rjmp	.+90     	; 0x16bb6 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16b5c:	3f 35       	cpi	r19, 0x5F	; 95
   16b5e:	b1 f4       	brne	.+44     	; 0x16b8c <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b60:	8f e5       	ldi	r24, 0x5F	; 95
   16b62:	90 e0       	ldi	r25, 0x00	; 0
   16b64:	ed b7       	in	r30, 0x3d	; 61
   16b66:	fe b7       	in	r31, 0x3e	; 62
   16b68:	97 87       	std	Z+15, r25	; 0x0f
   16b6a:	86 87       	std	Z+14, r24	; 0x0e
   16b6c:	30 e0       	ldi	r19, 0x00	; 0
   16b6e:	35 87       	std	Z+13, r19	; 0x0d
   16b70:	24 87       	std	Z+12, r18	; 0x0c
   16b72:	13 87       	std	Z+11, r17	; 0x0b
   16b74:	02 87       	std	Z+10, r16	; 0x0a
   16b76:	f1 86       	std	Z+9, r15	; 0x09
   16b78:	e0 86       	std	Z+8, r14	; 0x08
   16b7a:	8c 91       	ld	r24, X
   16b7c:	90 e0       	ldi	r25, 0x00	; 0
   16b7e:	97 83       	std	Z+7, r25	; 0x07
   16b80:	86 83       	std	Z+6, r24	; 0x06
   16b82:	d5 83       	std	Z+5, r29	; 0x05
   16b84:	c4 83       	std	Z+4, r28	; 0x04
   16b86:	84 eb       	ldi	r24, 0xB4	; 180
   16b88:	99 e2       	ldi	r25, 0x29	; 41
   16b8a:	15 c0       	rjmp	.+42     	; 0x16bb6 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b8c:	83 2f       	mov	r24, r19
   16b8e:	90 e0       	ldi	r25, 0x00	; 0
   16b90:	ed b7       	in	r30, 0x3d	; 61
   16b92:	fe b7       	in	r31, 0x3e	; 62
   16b94:	97 87       	std	Z+15, r25	; 0x0f
   16b96:	86 87       	std	Z+14, r24	; 0x0e
   16b98:	30 e0       	ldi	r19, 0x00	; 0
   16b9a:	35 87       	std	Z+13, r19	; 0x0d
   16b9c:	24 87       	std	Z+12, r18	; 0x0c
   16b9e:	13 87       	std	Z+11, r17	; 0x0b
   16ba0:	02 87       	std	Z+10, r16	; 0x0a
   16ba2:	f1 86       	std	Z+9, r15	; 0x09
   16ba4:	e0 86       	std	Z+8, r14	; 0x08
   16ba6:	8c 91       	ld	r24, X
   16ba8:	90 e0       	ldi	r25, 0x00	; 0
   16baa:	97 83       	std	Z+7, r25	; 0x07
   16bac:	86 83       	std	Z+6, r24	; 0x06
   16bae:	d5 83       	std	Z+5, r29	; 0x05
   16bb0:	c4 83       	std	Z+4, r28	; 0x04
   16bb2:	8f e4       	ldi	r24, 0x4F	; 79
   16bb4:	99 e2       	ldi	r25, 0x29	; 41
   16bb6:	a0 e0       	ldi	r26, 0x00	; 0
   16bb8:	81 83       	std	Z+1, r24	; 0x01
   16bba:	92 83       	std	Z+2, r25	; 0x02
   16bbc:	a3 83       	std	Z+3, r26	; 0x03
   16bbe:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16bc2:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16bc6:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16bca:	81 81       	ldd	r24, Z+1	; 0x01
   16bcc:	90 e0       	ldi	r25, 0x00	; 0
   16bce:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
    return(0);
}
   16bd2:	80 e0       	ldi	r24, 0x00	; 0
   16bd4:	90 e0       	ldi	r25, 0x00	; 0
   16bd6:	cd b7       	in	r28, 0x3d	; 61
   16bd8:	de b7       	in	r29, 0x3e	; 62
   16bda:	2f 96       	adiw	r28, 0x0f	; 15
   16bdc:	e6 e0       	ldi	r30, 0x06	; 6
   16bde:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00016be2 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16be2:	ab e0       	ldi	r26, 0x0B	; 11
   16be4:	b0 e0       	ldi	r27, 0x00	; 0
   16be6:	e7 ef       	ldi	r30, 0xF7	; 247
   16be8:	f5 eb       	ldi	r31, 0xB5	; 181
   16bea:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   16bee:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16bf0:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16bf4:	90 e0       	ldi	r25, 0x00	; 0
   16bf6:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   16bfa:	20 91 cf 1e 	lds	r18, 0x1ECF	; 0x801ecf <talking>
   16bfe:	d0 e0       	ldi	r29, 0x00	; 0
   16c00:	89 2b       	or	r24, r25
   16c02:	d1 f0       	breq	.+52     	; 0x16c38 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c04:	82 2f       	mov	r24, r18
   16c06:	90 e0       	ldi	r25, 0x00	; 0
   16c08:	ed b7       	in	r30, 0x3d	; 61
   16c0a:	fe b7       	in	r31, 0x3e	; 62
   16c0c:	93 87       	std	Z+11, r25	; 0x0b
   16c0e:	82 87       	std	Z+10, r24	; 0x0a
   16c10:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16c14:	90 e0       	ldi	r25, 0x00	; 0
   16c16:	91 87       	std	Z+9, r25	; 0x09
   16c18:	80 87       	std	Z+8, r24	; 0x08
   16c1a:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16c1e:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16c22:	80 81       	ld	r24, Z
   16c24:	90 e0       	ldi	r25, 0x00	; 0
   16c26:	ed b7       	in	r30, 0x3d	; 61
   16c28:	fe b7       	in	r31, 0x3e	; 62
   16c2a:	97 83       	std	Z+7, r25	; 0x07
   16c2c:	86 83       	std	Z+6, r24	; 0x06
   16c2e:	d5 83       	std	Z+5, r29	; 0x05
   16c30:	c4 83       	std	Z+4, r28	; 0x04
   16c32:	8f ef       	ldi	r24, 0xFF	; 255
   16c34:	98 e2       	ldi	r25, 0x28	; 40
   16c36:	43 c0       	rjmp	.+134    	; 0x16cbe <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16c38:	82 2f       	mov	r24, r18
   16c3a:	90 e0       	ldi	r25, 0x00	; 0
   16c3c:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   16c40:	20 91 d1 1e 	lds	r18, 0x1ED1	; 0x801ed1 <listening>
   16c44:	40 91 cf 1e 	lds	r20, 0x1ECF	; 0x801ecf <talking>
   16c48:	a0 91 4a 19 	lds	r26, 0x194A	; 0x80194a <AMIGOs>
   16c4c:	b0 91 4b 19 	lds	r27, 0x194B	; 0x80194b <AMIGOs+0x1>
   16c50:	89 2b       	or	r24, r25
   16c52:	89 f0       	breq	.+34     	; 0x16c76 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c54:	50 e0       	ldi	r21, 0x00	; 0
   16c56:	ed b7       	in	r30, 0x3d	; 61
   16c58:	fe b7       	in	r31, 0x3e	; 62
   16c5a:	53 87       	std	Z+11, r21	; 0x0b
   16c5c:	42 87       	std	Z+10, r20	; 0x0a
   16c5e:	30 e0       	ldi	r19, 0x00	; 0
   16c60:	31 87       	std	Z+9, r19	; 0x09
   16c62:	20 87       	std	Z+8, r18	; 0x08
   16c64:	8c 91       	ld	r24, X
   16c66:	90 e0       	ldi	r25, 0x00	; 0
   16c68:	97 83       	std	Z+7, r25	; 0x07
   16c6a:	86 83       	std	Z+6, r24	; 0x06
   16c6c:	d5 83       	std	Z+5, r29	; 0x05
   16c6e:	c4 83       	std	Z+4, r28	; 0x04
   16c70:	8f ea       	ldi	r24, 0xAF	; 175
   16c72:	98 e2       	ldi	r25, 0x28	; 40
   16c74:	24 c0       	rjmp	.+72     	; 0x16cbe <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16c76:	4f 35       	cpi	r20, 0x5F	; 95
   16c78:	91 f4       	brne	.+36     	; 0x16c9e <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c7a:	8f e5       	ldi	r24, 0x5F	; 95
   16c7c:	90 e0       	ldi	r25, 0x00	; 0
   16c7e:	ed b7       	in	r30, 0x3d	; 61
   16c80:	fe b7       	in	r31, 0x3e	; 62
   16c82:	93 87       	std	Z+11, r25	; 0x0b
   16c84:	82 87       	std	Z+10, r24	; 0x0a
   16c86:	30 e0       	ldi	r19, 0x00	; 0
   16c88:	31 87       	std	Z+9, r19	; 0x09
   16c8a:	20 87       	std	Z+8, r18	; 0x08
   16c8c:	8c 91       	ld	r24, X
   16c8e:	90 e0       	ldi	r25, 0x00	; 0
   16c90:	97 83       	std	Z+7, r25	; 0x07
   16c92:	86 83       	std	Z+6, r24	; 0x06
   16c94:	d5 83       	std	Z+5, r29	; 0x05
   16c96:	c4 83       	std	Z+4, r28	; 0x04
   16c98:	8f e5       	ldi	r24, 0x5F	; 95
   16c9a:	98 e2       	ldi	r25, 0x28	; 40
   16c9c:	10 c0       	rjmp	.+32     	; 0x16cbe <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c9e:	50 e0       	ldi	r21, 0x00	; 0
   16ca0:	ed b7       	in	r30, 0x3d	; 61
   16ca2:	fe b7       	in	r31, 0x3e	; 62
   16ca4:	53 87       	std	Z+11, r21	; 0x0b
   16ca6:	42 87       	std	Z+10, r20	; 0x0a
   16ca8:	30 e0       	ldi	r19, 0x00	; 0
   16caa:	31 87       	std	Z+9, r19	; 0x09
   16cac:	20 87       	std	Z+8, r18	; 0x08
   16cae:	8c 91       	ld	r24, X
   16cb0:	90 e0       	ldi	r25, 0x00	; 0
   16cb2:	97 83       	std	Z+7, r25	; 0x07
   16cb4:	86 83       	std	Z+6, r24	; 0x06
   16cb6:	d5 83       	std	Z+5, r29	; 0x05
   16cb8:	c4 83       	std	Z+4, r28	; 0x04
   16cba:	8e e0       	ldi	r24, 0x0E	; 14
   16cbc:	98 e2       	ldi	r25, 0x28	; 40
   16cbe:	a0 e0       	ldi	r26, 0x00	; 0
   16cc0:	81 83       	std	Z+1, r24	; 0x01
   16cc2:	92 83       	std	Z+2, r25	; 0x02
   16cc4:	a3 83       	std	Z+3, r26	; 0x03
   16cc6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16cca:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16cce:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16cd2:	81 81       	ldd	r24, Z+1	; 0x01
   16cd4:	90 e0       	ldi	r25, 0x00	; 0
   16cd6:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
    return(0);
}
   16cda:	80 e0       	ldi	r24, 0x00	; 0
   16cdc:	90 e0       	ldi	r25, 0x00	; 0
   16cde:	cd b7       	in	r28, 0x3d	; 61
   16ce0:	de b7       	in	r29, 0x3e	; 62
   16ce2:	2b 96       	adiw	r28, 0x0b	; 11
   16ce4:	e2 e0       	ldi	r30, 0x02	; 2
   16ce6:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00016cea <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16cea:	8f 30       	cpi	r24, 0x0F	; 15
   16cec:	29 f0       	breq	.+10     	; 0x16cf8 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16cee:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16cf2:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16cf6:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16cf8:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16cfc:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16d00:	81 81       	ldd	r24, Z+1	; 0x01
   16d02:	88 23       	and	r24, r24
   16d04:	29 f0       	breq	.+10     	; 0x16d10 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16d06:	87 81       	ldd	r24, Z+7	; 0x07
   16d08:	90 85       	ldd	r25, Z+8	; 0x08
   16d0a:	80 64       	ori	r24, 0x40	; 64
   16d0c:	90 87       	std	Z+8, r25	; 0x08
   16d0e:	87 83       	std	Z+7, r24	; 0x07
   16d10:	08 95       	ret

00016d12 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16d12:	ac e1       	ldi	r26, 0x1C	; 28
   16d14:	b0 e0       	ldi	r27, 0x00	; 0
   16d16:	ef e8       	ldi	r30, 0x8F	; 143
   16d18:	f6 eb       	ldi	r31, 0xB6	; 182
   16d1a:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
   16d1e:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d20:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d24:	85 ff       	sbrs	r24, 5
   16d26:	16 c0       	rjmp	.+44     	; 0x16d54 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16d28:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   16d2c:	90 e0       	ldi	r25, 0x00	; 0
   16d2e:	ed b7       	in	r30, 0x3d	; 61
   16d30:	fe b7       	in	r31, 0x3e	; 62
   16d32:	91 87       	std	Z+9, r25	; 0x09
   16d34:	80 87       	std	Z+8, r24	; 0x08
   16d36:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16d3a:	90 e0       	ldi	r25, 0x00	; 0
   16d3c:	97 83       	std	Z+7, r25	; 0x07
   16d3e:	86 83       	std	Z+6, r24	; 0x06
   16d40:	f5 82       	std	Z+5, r15	; 0x05
   16d42:	e4 82       	std	Z+4, r14	; 0x04
   16d44:	8c ed       	ldi	r24, 0xDC	; 220
   16d46:	97 e2       	ldi	r25, 0x27	; 39
   16d48:	a0 e0       	ldi	r26, 0x00	; 0
   16d4a:	81 83       	std	Z+1, r24	; 0x01
   16d4c:	92 83       	std	Z+2, r25	; 0x02
   16d4e:	a3 83       	std	Z+3, r26	; 0x03
   16d50:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16d54:	fe e7       	ldi	r31, 0x7E	; 126
   16d56:	ef 16       	cp	r14, r31
   16d58:	f1 04       	cpc	r15, r1
   16d5a:	f1 f5       	brne	.+124    	; 0x16dd8 <Amigo_Command+0xc6>
   16d5c:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   16d60:	90 e0       	ldi	r25, 0x00	; 0
   16d62:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   16d66:	89 2b       	or	r24, r25
   16d68:	09 f4       	brne	.+2      	; 0x16d6c <Amigo_Command+0x5a>
   16d6a:	86 c0       	rjmp	.+268    	; 0x16e78 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d6c:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16d70:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16d74:	81 81       	ldd	r24, Z+1	; 0x01
   16d76:	90 e0       	ldi	r25, 0x00	; 0
   16d78:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
        status = EOI_FLAG;
   16d7c:	80 e0       	ldi	r24, 0x00	; 0
   16d7e:	91 e0       	ldi	r25, 0x01	; 1
   16d80:	9c 8f       	std	Y+28, r25	; 0x1c
   16d82:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d84:	ae 01       	movw	r20, r28
   16d86:	45 5e       	subi	r20, 0xE5	; 229
   16d88:	5f 4f       	sbci	r21, 0xFF	; 255
   16d8a:	60 e0       	ldi	r22, 0x00	; 0
   16d8c:	72 e0       	ldi	r23, 0x02	; 2
   16d8e:	8b ec       	ldi	r24, 0xCB	; 203
   16d90:	9c e1       	ldi	r25, 0x1C	; 28
   16d92:	0e 94 46 8b 	call	0x1168c	; 0x1168c <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d96:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16d9a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16d9e:	81 81       	ldd	r24, Z+1	; 0x01
   16da0:	90 e0       	ldi	r25, 0x00	; 0
   16da2:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16daa:	88 27       	eor	r24, r24
   16dac:	90 7d       	andi	r25, 0xD0	; 208
   16dae:	89 2b       	or	r24, r25
   16db0:	09 f4       	brne	.+2      	; 0x16db4 <Amigo_Command+0xa2>
   16db2:	87 c2       	rjmp	.+1294   	; 0x172c2 <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   16db4:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16db8:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16dbc:	81 e0       	ldi	r24, 0x01	; 1
   16dbe:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16dc0:	87 81       	ldd	r24, Z+7	; 0x07
   16dc2:	90 85       	ldd	r25, Z+8	; 0x08
   16dc4:	80 62       	ori	r24, 0x20	; 32
   16dc6:	90 87       	std	Z+8, r25	; 0x08
   16dc8:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_PPR)
   16dca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16dce:	81 ff       	sbrs	r24, 1
   16dd0:	78 c2       	rjmp	.+1264   	; 0x172c2 <Amigo_Command+0x5b0>
                printf("[AMIGO_Command:GPIB write error]\n");
   16dd2:	8a eb       	ldi	r24, 0xBA	; 186
   16dd4:	97 e2       	ldi	r25, 0x27	; 39
   16dd6:	8e c0       	rjmp	.+284    	; 0x16ef4 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16dd8:	ff e7       	ldi	r31, 0x7F	; 127
   16dda:	ef 16       	cp	r14, r31
   16ddc:	f1 04       	cpc	r15, r1
   16dde:	09 f0       	breq	.+2      	; 0x16de2 <Amigo_Command+0xd0>
   16de0:	4b c0       	rjmp	.+150    	; 0x16e78 <Amigo_Command+0x166>
   16de2:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16de6:	90 e0       	ldi	r25, 0x00	; 0
   16de8:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   16dec:	89 2b       	or	r24, r25
   16dee:	09 f4       	brne	.+2      	; 0x16df2 <Amigo_Command+0xe0>
   16df0:	43 c0       	rjmp	.+134    	; 0x16e78 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16df2:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16df6:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16dfa:	81 81       	ldd	r24, Z+1	; 0x01
   16dfc:	90 e0       	ldi	r25, 0x00	; 0
   16dfe:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16e02:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e06:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16e08:	0e 94 2a 85 	call	0x10a54	; 0x10a54 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16e0c:	80 e0       	ldi	r24, 0x00	; 0
   16e0e:	91 e0       	ldi	r25, 0x01	; 1
   16e10:	9c 8f       	std	Y+28, r25	; 0x1c
   16e12:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e14:	ae 01       	movw	r20, r28
   16e16:	45 5e       	subi	r20, 0xE5	; 229
   16e18:	5f 4f       	sbci	r21, 0xFF	; 255
   16e1a:	60 e0       	ldi	r22, 0x00	; 0
   16e1c:	72 e0       	ldi	r23, 0x02	; 2
   16e1e:	8b ec       	ldi	r24, 0xCB	; 203
   16e20:	9c e1       	ldi	r25, 0x1C	; 28
   16e22:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16e26:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e2a:	87 ff       	sbrs	r24, 7
   16e2c:	04 c0       	rjmp	.+8      	; 0x16e36 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   16e2e:	87 e9       	ldi	r24, 0x97	; 151
   16e30:	95 e1       	ldi	r25, 0x15	; 21
   16e32:	0e 94 3c 85 	call	0x10a78	; 0x10a78 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16e36:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16e3a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16e3e:	81 81       	ldd	r24, Z+1	; 0x01
   16e40:	90 e0       	ldi	r25, 0x00	; 0
   16e42:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16e4a:	88 27       	eor	r24, r24
   16e4c:	90 7d       	andi	r25, 0xD0	; 208
   16e4e:	89 2b       	or	r24, r25
   16e50:	09 f4       	brne	.+2      	; 0x16e54 <Amigo_Command+0x142>
   16e52:	37 c2       	rjmp	.+1134   	; 0x172c2 <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   16e54:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16e58:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16e5c:	81 e0       	ldi	r24, 0x01	; 1
   16e5e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16e60:	87 81       	ldd	r24, Z+7	; 0x07
   16e62:	90 85       	ldd	r25, Z+8	; 0x08
   16e64:	80 62       	ori	r24, 0x20	; 32
   16e66:	90 87       	std	Z+8, r25	; 0x08
   16e68:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_PPR)
   16e6a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e6e:	81 ff       	sbrs	r24, 1
   16e70:	28 c2       	rjmp	.+1104   	; 0x172c2 <Amigo_Command+0x5b0>
                printf("[AMIGO Command:GPIB read error]\n");
   16e72:	89 e9       	ldi	r24, 0x99	; 153
   16e74:	97 e2       	ldi	r25, 0x27	; 39
   16e76:	3e c0       	rjmp	.+124    	; 0x16ef4 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e78:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   16e7c:	90 e0       	ldi	r25, 0x00	; 0
   16e7e:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   16e82:	89 2b       	or	r24, r25
   16e84:	19 f4       	brne	.+6      	; 0x16e8c <Amigo_Command+0x17a>
        return(0);
   16e86:	80 e0       	ldi	r24, 0x00	; 0
   16e88:	90 e0       	ldi	r25, 0x00	; 0
   16e8a:	23 c2       	rjmp	.+1094   	; 0x172d2 <Amigo_Command+0x5c0>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e8c:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   16e90:	90 e0       	ldi	r25, 0x00	; 0
   16e92:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   16e96:	89 2b       	or	r24, r25
   16e98:	b1 f7       	brne	.-20     	; 0x16e86 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16e9a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   16e9e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   16ea2:	81 81       	ldd	r24, Z+1	; 0x01
   16ea4:	90 e0       	ldi	r25, 0x00	; 0
   16ea6:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16eaa:	80 e0       	ldi	r24, 0x00	; 0
   16eac:	91 e0       	ldi	r25, 0x01	; 1
   16eae:	9c 8f       	std	Y+28, r25	; 0x1c
   16eb0:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16eb2:	ae 01       	movw	r20, r28
   16eb4:	45 5e       	subi	r20, 0xE5	; 229
   16eb6:	5f 4f       	sbci	r21, 0xFF	; 255
   16eb8:	60 e0       	ldi	r22, 0x00	; 0
   16eba:	72 e0       	ldi	r23, 0x02	; 2
   16ebc:	8b ec       	ldi	r24, 0xCB	; 203
   16ebe:	9c e1       	ldi	r25, 0x1C	; 28
   16ec0:	0e 94 a4 8a 	call	0x11548	; 0x11548 <gpib_read_str>
   16ec4:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16eca:	88 27       	eor	r24, r24
   16ecc:	90 7d       	andi	r25, 0xD0	; 208
   16ece:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16ed2:	89 2b       	or	r24, r25
   16ed4:	c1 f0       	breq	.+48     	; 0x16f06 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16ed6:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16eda:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16ede:	81 e0       	ldi	r24, 0x01	; 1
   16ee0:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16ee2:	87 81       	ldd	r24, Z+7	; 0x07
   16ee4:	90 85       	ldd	r25, Z+8	; 0x08
   16ee6:	80 62       	ori	r24, 0x20	; 32
   16ee8:	90 87       	std	Z+8, r25	; 0x08
   16eea:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_PPR)
   16eec:	21 ff       	sbrs	r18, 1
   16eee:	e9 c1       	rjmp	.+978    	; 0x172c2 <Amigo_Command+0x5b0>
            printf("[AMIGO Command:GPIB read error]\n");
   16ef0:	88 e7       	ldi	r24, 0x78	; 120
   16ef2:	97 e2       	ldi	r25, 0x27	; 39
   16ef4:	a0 e0       	ldi	r26, 0x00	; 0
   16ef6:	ed b7       	in	r30, 0x3d	; 61
   16ef8:	fe b7       	in	r31, 0x3e	; 62
   16efa:	81 83       	std	Z+1, r24	; 0x01
   16efc:	92 83       	std	Z+2, r25	; 0x02
   16efe:	a3 83       	std	Z+3, r26	; 0x03
   16f00:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   16f04:	de c1       	rjmp	.+956    	; 0x172c2 <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f06:	25 ff       	sbrs	r18, 5
   16f08:	0e c0       	rjmp	.+28     	; 0x16f26 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16f0a:	ed b7       	in	r30, 0x3d	; 61
   16f0c:	fe b7       	in	r31, 0x3e	; 62
   16f0e:	17 83       	std	Z+7, r17	; 0x07
   16f10:	06 83       	std	Z+6, r16	; 0x06
   16f12:	f5 82       	std	Z+5, r15	; 0x05
   16f14:	e4 82       	std	Z+4, r14	; 0x04
   16f16:	89 e4       	ldi	r24, 0x49	; 73
   16f18:	97 e2       	ldi	r25, 0x27	; 39
   16f1a:	a0 e0       	ldi	r26, 0x00	; 0
   16f1c:	81 83       	std	Z+1, r24	; 0x01
   16f1e:	92 83       	std	Z+2, r25	; 0x02
   16f20:	a3 83       	std	Z+3, r26	; 0x03
   16f22:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            secondary, len);
#endif
    if(!len)
   16f26:	01 15       	cp	r16, r1
   16f28:	11 05       	cpc	r17, r1
   16f2a:	61 f4       	brne	.+24     	; 0x16f44 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16f2c:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16f30:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16f34:	81 e0       	ldi	r24, 0x01	; 1
   16f36:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16f38:	87 81       	ldd	r24, Z+7	; 0x07
   16f3a:	90 85       	ldd	r25, Z+8	; 0x08
   16f3c:	80 62       	ori	r24, 0x20	; 32
   16f3e:	90 87       	std	Z+8, r25	; 0x08
   16f40:	87 83       	std	Z+7, r24	; 0x07
   16f42:	bf c1       	rjmp	.+894    	; 0x172c2 <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16f44:	60 91 cb 1c 	lds	r22, 0x1CCB	; 0x801ccb <gpib_iobuff>

    if (secondary == 0x68)
   16f48:	f8 e6       	ldi	r31, 0x68	; 104
   16f4a:	ef 16       	cp	r14, r31
   16f4c:	f1 04       	cpc	r15, r1
   16f4e:	09 f0       	breq	.+2      	; 0x16f52 <Amigo_Command+0x240>
   16f50:	28 c1       	rjmp	.+592    	; 0x171a2 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16f52:	61 11       	cpse	r22, r1
   16f54:	2e c0       	rjmp	.+92     	; 0x16fb2 <Amigo_Command+0x2a0>
   16f56:	02 30       	cpi	r16, 0x02	; 2
   16f58:	11 05       	cpc	r17, r1
   16f5a:	09 f0       	breq	.+2      	; 0x16f5e <Amigo_Command+0x24c>
   16f5c:	b7 c1       	rjmp	.+878    	; 0x172cc <Amigo_Command+0x5ba>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f5e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f62:	85 ff       	sbrs	r24, 5
   16f64:	0a c0       	rjmp	.+20     	; 0x16f7a <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16f66:	89 e2       	ldi	r24, 0x29	; 41
   16f68:	97 e2       	ldi	r25, 0x27	; 39
   16f6a:	a0 e0       	ldi	r26, 0x00	; 0
   16f6c:	ed b7       	in	r30, 0x3d	; 61
   16f6e:	fe b7       	in	r31, 0x3e	; 62
   16f70:	81 83       	std	Z+1, r24	; 0x01
   16f72:	92 83       	std	Z+2, r25	; 0x02
   16f74:	a3 83       	std	Z+3, r26	; 0x03
   16f76:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16f7a:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16f7e:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16f82:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16f84:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16f86:	10 86       	std	Z+8, r1	; 0x08
   16f88:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16f8a:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16f8c:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
   16f90:	98 2f       	mov	r25, r24
   16f92:	92 95       	swap	r25
   16f94:	96 95       	lsr	r25
   16f96:	96 95       	lsr	r25
   16f98:	93 70       	andi	r25, 0x03	; 3
   16f9a:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16f9c:	8f 73       	andi	r24, 0x3F	; 63
   16f9e:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16fa0:	ce 01       	movw	r24, r28
   16fa2:	0a 96       	adiw	r24, 0x0a	; 10
   16fa4:	1a da       	rcall	.-3020   	; 0x163da <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16fa6:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   16faa:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   16fae:	85 e0       	ldi	r24, 0x05	; 5
   16fb0:	5c c1       	rjmp	.+696    	; 0x1726a <Amigo_Command+0x558>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16fb2:	62 30       	cpi	r22, 0x02	; 2
   16fb4:	09 f0       	breq	.+2      	; 0x16fb8 <Amigo_Command+0x2a6>
   16fb6:	3f c0       	rjmp	.+126    	; 0x17036 <Amigo_Command+0x324>
   16fb8:	05 30       	cpi	r16, 0x05	; 5
   16fba:	11 05       	cpc	r17, r1
   16fbc:	d1 f4       	brne	.+52     	; 0x16ff2 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fbe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16fc2:	85 ff       	sbrs	r24, 5
   16fc4:	0a c0       	rjmp	.+20     	; 0x16fda <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16fc6:	85 e1       	ldi	r24, 0x15	; 21
   16fc8:	97 e2       	ldi	r25, 0x27	; 39
   16fca:	a0 e0       	ldi	r26, 0x00	; 0
   16fcc:	ed b7       	in	r30, 0x3d	; 61
   16fce:	fe b7       	in	r31, 0x3e	; 62
   16fd0:	81 83       	std	Z+1, r24	; 0x01
   16fd2:	92 83       	std	Z+2, r25	; 0x02
   16fd4:	a3 83       	std	Z+3, r26	; 0x03
   16fd6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fda:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
   16fde:	85 de       	rcall	.-758    	; 0x16cea <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16fe0:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <gpib_iobuff+0x2>
   16fe4:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16fe6:	80 91 ce 1c 	lds	r24, 0x1CCE	; 0x801cce <gpib_iobuff+0x3>
   16fea:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16fec:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <gpib_iobuff+0x4>
   16ff0:	1d c0       	rjmp	.+58     	; 0x1702c <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16ff2:	06 30       	cpi	r16, 0x06	; 6
   16ff4:	11 05       	cpc	r17, r1
   16ff6:	09 f0       	breq	.+2      	; 0x16ffa <Amigo_Command+0x2e8>
   16ff8:	69 c1       	rjmp	.+722    	; 0x172cc <Amigo_Command+0x5ba>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ffa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ffe:	85 ff       	sbrs	r24, 5
   17000:	0a c0       	rjmp	.+20     	; 0x17016 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17002:	81 e0       	ldi	r24, 0x01	; 1
   17004:	97 e2       	ldi	r25, 0x27	; 39
   17006:	a0 e0       	ldi	r26, 0x00	; 0
   17008:	ed b7       	in	r30, 0x3d	; 61
   1700a:	fe b7       	in	r31, 0x3e	; 62
   1700c:	81 83       	std	Z+1, r24	; 0x01
   1700e:	92 83       	std	Z+2, r25	; 0x02
   17010:	a3 83       	std	Z+3, r26	; 0x03
   17012:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17016:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
   1701a:	67 de       	rcall	.-818    	; 0x16cea <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1701c:	80 91 ce 1c 	lds	r24, 0x1CCE	; 0x801cce <gpib_iobuff+0x3>
   17020:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17022:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <gpib_iobuff+0x4>
   17026:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17028:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1702c:	8f 87       	std	Y+15, r24	; 0x0f
   1702e:	ce 01       	movw	r24, r28
   17030:	0a 96       	adiw	r24, 0x0a	; 10
   17032:	d3 d9       	rcall	.-3162   	; 0x163da <amigo_seek>
   17034:	1b c1       	rjmp	.+566    	; 0x1726c <Amigo_Command+0x55a>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17036:	63 30       	cpi	r22, 0x03	; 3
   17038:	e9 f4       	brne	.+58     	; 0x17074 <Amigo_Command+0x362>
   1703a:	02 30       	cpi	r16, 0x02	; 2
   1703c:	11 05       	cpc	r17, r1
   1703e:	09 f0       	breq	.+2      	; 0x17042 <Amigo_Command+0x330>
   17040:	45 c1       	rjmp	.+650    	; 0x172cc <Amigo_Command+0x5ba>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17042:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17046:	85 ff       	sbrs	r24, 5
   17048:	0a c0       	rjmp	.+20     	; 0x1705e <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1704a:	88 ed       	ldi	r24, 0xD8	; 216
   1704c:	96 e2       	ldi	r25, 0x26	; 38
   1704e:	a0 e0       	ldi	r26, 0x00	; 0
   17050:	ed b7       	in	r30, 0x3d	; 61
   17052:	fe b7       	in	r31, 0x3e	; 62
   17054:	81 83       	std	Z+1, r24	; 0x01
   17056:	92 83       	std	Z+2, r25	; 0x02
   17058:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1705a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1705e:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            amigo_request_status();
   17062:	43 de       	rcall	.-890    	; 0x16cea <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17064:	78 d8       	rcall	.-3856   	; 0x16156 <amigo_request_status>
   17066:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1706a:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1706e:	83 e0       	ldi	r24, 0x03	; 3
   17070:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17072:	27 c1       	rjmp	.+590    	; 0x172c2 <Amigo_Command+0x5b0>
   17074:	65 30       	cpi	r22, 0x05	; 5
   17076:	d9 f4       	brne	.+54     	; 0x170ae <Amigo_Command+0x39c>
   17078:	02 30       	cpi	r16, 0x02	; 2
   1707a:	11 05       	cpc	r17, r1
   1707c:	09 f0       	breq	.+2      	; 0x17080 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1707e:	26 c1       	rjmp	.+588    	; 0x172cc <Amigo_Command+0x5ba>
   17080:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17084:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17086:	0a c0       	rjmp	.+20     	; 0x1709c <Amigo_Command+0x38a>
   17088:	87 eb       	ldi	r24, 0xB7	; 183
   1708a:	96 e2       	ldi	r25, 0x26	; 38
   1708c:	a0 e0       	ldi	r26, 0x00	; 0
   1708e:	ed b7       	in	r30, 0x3d	; 61
   17090:	fe b7       	in	r31, 0x3e	; 62
   17092:	81 83       	std	Z+1, r24	; 0x01
   17094:	92 83       	std	Z+2, r25	; 0x02
   17096:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17098:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1709c:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   170a0:	24 de       	rcall	.-952    	; 0x16cea <amigo_check_unit>
   170a2:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   170a6:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   170aa:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   170ac:	de c0       	rjmp	.+444    	; 0x1726a <Amigo_Command+0x558>
   170ae:	67 30       	cpi	r22, 0x07	; 7
   170b0:	f9 f4       	brne	.+62     	; 0x170f0 <Amigo_Command+0x3de>
   170b2:	04 30       	cpi	r16, 0x04	; 4
   170b4:	11 05       	cpc	r17, r1
   170b6:	09 f0       	breq	.+2      	; 0x170ba <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170b8:	09 c1       	rjmp	.+530    	; 0x172cc <Amigo_Command+0x5ba>
   170ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   170be:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   170c0:	0a c0       	rjmp	.+20     	; 0x170d6 <Amigo_Command+0x3c4>
   170c2:	87 ea       	ldi	r24, 0xA7	; 167
   170c4:	96 e2       	ldi	r25, 0x26	; 38
   170c6:	a0 e0       	ldi	r26, 0x00	; 0
   170c8:	ed b7       	in	r30, 0x3d	; 61
   170ca:	fe b7       	in	r31, 0x3e	; 62
   170cc:	81 83       	std	Z+1, r24	; 0x01
   170ce:	92 83       	std	Z+2, r25	; 0x02
   170d0:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170d2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   170d6:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   170da:	07 de       	rcall	.-1010   	; 0x16cea <amigo_check_unit>
   170dc:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   170e0:	90 e0       	ldi	r25, 0x00	; 0
   170e2:	98 2f       	mov	r25, r24
   170e4:	88 27       	eor	r24, r24
   170e6:	20 91 ce 1c 	lds	r18, 0x1CCE	; 0x801cce <gpib_iobuff+0x3>
   170ea:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   170ec:	a1 d9       	rcall	.-3262   	; 0x16430 <amigo_verify>
   170ee:	f1 c0       	rjmp	.+482    	; 0x172d2 <Amigo_Command+0x5c0>
   170f0:	68 30       	cpi	r22, 0x08	; 8
   170f2:	d9 f4       	brne	.+54     	; 0x1712a <Amigo_Command+0x418>
   170f4:	02 30       	cpi	r16, 0x02	; 2
   170f6:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170f8:	09 f0       	breq	.+2      	; 0x170fc <Amigo_Command+0x3ea>
   170fa:	e8 c0       	rjmp	.+464    	; 0x172cc <Amigo_Command+0x5ba>
   170fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17100:	85 ff       	sbrs	r24, 5
   17102:	0a c0       	rjmp	.+20     	; 0x17118 <Amigo_Command+0x406>
   17104:	85 e8       	ldi	r24, 0x85	; 133
   17106:	96 e2       	ldi	r25, 0x26	; 38
   17108:	a0 e0       	ldi	r26, 0x00	; 0
   1710a:	ed b7       	in	r30, 0x3d	; 61
   1710c:	fe b7       	in	r31, 0x3e	; 62
   1710e:	81 83       	std	Z+1, r24	; 0x01
   17110:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17112:	a3 83       	std	Z+3, r26	; 0x03
   17114:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17118:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1711c:	e6 dd       	rcall	.-1076   	; 0x16cea <amigo_check_unit>
   1711e:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   17122:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17126:	88 e0       	ldi	r24, 0x08	; 8
   17128:	a0 c0       	rjmp	.+320    	; 0x1726a <Amigo_Command+0x558>
   1712a:	86 2f       	mov	r24, r22
   1712c:	8f 7d       	andi	r24, 0xDF	; 223
   1712e:	8b 30       	cpi	r24, 0x0B	; 11
   17130:	d9 f4       	brne	.+54     	; 0x17168 <Amigo_Command+0x456>
   17132:	02 30       	cpi	r16, 0x02	; 2
   17134:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17136:	09 f0       	breq	.+2      	; 0x1713a <Amigo_Command+0x428>
   17138:	c9 c0       	rjmp	.+402    	; 0x172cc <Amigo_Command+0x5ba>
   1713a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   1713e:	85 ff       	sbrs	r24, 5
   17140:	0a c0       	rjmp	.+20     	; 0x17156 <Amigo_Command+0x444>
   17142:	89 e6       	ldi	r24, 0x69	; 105
   17144:	96 e2       	ldi	r25, 0x26	; 38
   17146:	a0 e0       	ldi	r26, 0x00	; 0
   17148:	ed b7       	in	r30, 0x3d	; 61
   1714a:	fe b7       	in	r31, 0x3e	; 62
   1714c:	81 83       	std	Z+1, r24	; 0x01
   1714e:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17150:	a3 83       	std	Z+3, r26	; 0x03
   17152:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17156:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   1715a:	c7 dd       	rcall	.-1138   	; 0x16cea <amigo_check_unit>
   1715c:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   17160:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17164:	8a e0       	ldi	r24, 0x0A	; 10
   17166:	81 c0       	rjmp	.+258    	; 0x1726a <Amigo_Command+0x558>
   17168:	64 31       	cpi	r22, 0x14	; 20
   1716a:	09 f0       	breq	.+2      	; 0x1716e <Amigo_Command+0x45c>
   1716c:	af c0       	rjmp	.+350    	; 0x172cc <Amigo_Command+0x5ba>
   1716e:	02 30       	cpi	r16, 0x02	; 2
   17170:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17172:	09 f0       	breq	.+2      	; 0x17176 <Amigo_Command+0x464>
   17174:	ab c0       	rjmp	.+342    	; 0x172cc <Amigo_Command+0x5ba>
   17176:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   1717a:	85 ff       	sbrs	r24, 5
   1717c:	0a c0       	rjmp	.+20     	; 0x17192 <Amigo_Command+0x480>
   1717e:	80 e4       	ldi	r24, 0x40	; 64
   17180:	96 e2       	ldi	r25, 0x26	; 38
   17182:	a0 e0       	ldi	r26, 0x00	; 0
   17184:	ed b7       	in	r30, 0x3d	; 61
   17186:	fe b7       	in	r31, 0x3e	; 62
   17188:	81 83       	std	Z+1, r24	; 0x01
   1718a:	92 83       	std	Z+2, r25	; 0x02
   1718c:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   1718e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17192:	0e 94 9d b0 	call	0x1613a	; 0x1613a <amigo_request_logical_address>
   17196:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1719a:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1719e:	84 e0       	ldi	r24, 0x04	; 4
   171a0:	64 c0       	rjmp	.+200    	; 0x1726a <Amigo_Command+0x558>
   171a2:	f9 e6       	ldi	r31, 0x69	; 105
   171a4:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   171a6:	f1 04       	cpc	r15, r1
   171a8:	f1 f4       	brne	.+60     	; 0x171e6 <Amigo_Command+0x4d4>
   171aa:	68 30       	cpi	r22, 0x08	; 8
   171ac:	09 f0       	breq	.+2      	; 0x171b0 <Amigo_Command+0x49e>
   171ae:	8e c0       	rjmp	.+284    	; 0x172cc <Amigo_Command+0x5ba>
   171b0:	02 30       	cpi	r16, 0x02	; 2
   171b2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171b4:	09 f0       	breq	.+2      	; 0x171b8 <Amigo_Command+0x4a6>
   171b6:	8a c0       	rjmp	.+276    	; 0x172cc <Amigo_Command+0x5ba>
   171b8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   171bc:	85 ff       	sbrs	r24, 5
   171be:	0a c0       	rjmp	.+20     	; 0x171d4 <Amigo_Command+0x4c2>
   171c0:	80 e2       	ldi	r24, 0x20	; 32
   171c2:	96 e2       	ldi	r25, 0x26	; 38
   171c4:	a0 e0       	ldi	r26, 0x00	; 0
   171c6:	ed b7       	in	r30, 0x3d	; 61
   171c8:	fe b7       	in	r31, 0x3e	; 62
   171ca:	81 83       	std	Z+1, r24	; 0x01
   171cc:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171ce:	a3 83       	std	Z+3, r26	; 0x03
   171d0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   171d4:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   171d8:	88 dd       	rcall	.-1264   	; 0x16cea <amigo_check_unit>
   171da:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   171de:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   171e2:	89 e0       	ldi	r24, 0x09	; 9
   171e4:	42 c0       	rjmp	.+132    	; 0x1726a <Amigo_Command+0x558>
   171e6:	fa e6       	ldi	r31, 0x6A	; 106
   171e8:	ef 16       	cp	r14, r31
   171ea:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   171ec:	09 f0       	breq	.+2      	; 0x171f0 <Amigo_Command+0x4de>
   171ee:	47 c0       	rjmp	.+142    	; 0x1727e <Amigo_Command+0x56c>
   171f0:	68 30       	cpi	r22, 0x08	; 8
   171f2:	f1 f4       	brne	.+60     	; 0x17230 <Amigo_Command+0x51e>
   171f4:	02 30       	cpi	r16, 0x02	; 2
   171f6:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171f8:	09 f0       	breq	.+2      	; 0x171fc <Amigo_Command+0x4ea>
   171fa:	68 c0       	rjmp	.+208    	; 0x172cc <Amigo_Command+0x5ba>
   171fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17200:	85 ff       	sbrs	r24, 5
   17202:	0a c0       	rjmp	.+20     	; 0x17218 <Amigo_Command+0x506>
   17204:	85 ef       	ldi	r24, 0xF5	; 245
   17206:	95 e2       	ldi	r25, 0x25	; 37
   17208:	a0 e0       	ldi	r26, 0x00	; 0
   1720a:	ed b7       	in	r30, 0x3d	; 61
   1720c:	fe b7       	in	r31, 0x3e	; 62
   1720e:	81 83       	std	Z+1, r24	; 0x01
   17210:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17212:	a3 83       	std	Z+3, r26	; 0x03
   17214:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17218:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   1721c:	66 dd       	rcall	.-1332   	; 0x16cea <amigo_check_unit>
   1721e:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   17222:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
            amigo_request_status();
   17226:	82 e0       	ldi	r24, 0x02	; 2
   17228:	80 83       	st	Z, r24
   1722a:	0e 94 ab b0 	call	0x16156	; 0x16156 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   1722e:	49 c0       	rjmp	.+146    	; 0x172c2 <Amigo_Command+0x5b0>
   17230:	65 30       	cpi	r22, 0x05	; 5
   17232:	09 f0       	breq	.+2      	; 0x17236 <Amigo_Command+0x524>
   17234:	4b c0       	rjmp	.+150    	; 0x172cc <Amigo_Command+0x5ba>
   17236:	02 30       	cpi	r16, 0x02	; 2
   17238:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1723a:	09 f0       	breq	.+2      	; 0x1723e <Amigo_Command+0x52c>
   1723c:	47 c0       	rjmp	.+142    	; 0x172cc <Amigo_Command+0x5ba>
   1723e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17242:	85 ff       	sbrs	r24, 5
   17244:	0a c0       	rjmp	.+20     	; 0x1725a <Amigo_Command+0x548>
   17246:	86 ed       	ldi	r24, 0xD6	; 214
   17248:	95 e2       	ldi	r25, 0x25	; 37
   1724a:	a0 e0       	ldi	r26, 0x00	; 0
   1724c:	ed b7       	in	r30, 0x3d	; 61
   1724e:	fe b7       	in	r31, 0x3e	; 62
   17250:	81 83       	std	Z+1, r24	; 0x01
   17252:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17254:	a3 83       	std	Z+3, r26	; 0x03
   17256:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1725a:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   1725e:	45 dd       	rcall	.-1398   	; 0x16cea <amigo_check_unit>
   17260:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   17264:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17268:	87 e0       	ldi	r24, 0x07	; 7
   1726a:	80 83       	st	Z, r24
   1726c:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   17270:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   17274:	81 81       	ldd	r24, Z+1	; 0x01
   17276:	90 e0       	ldi	r25, 0x00	; 0
   17278:	0e 94 ec 85 	call	0x10bd8	; 0x10bd8 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   1727c:	22 c0       	rjmp	.+68     	; 0x172c2 <Amigo_Command+0x5b0>
   1727e:	fc e6       	ldi	r31, 0x6C	; 108
   17280:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   17282:	f1 04       	cpc	r15, r1
   17284:	d1 f4       	brne	.+52     	; 0x172ba <Amigo_Command+0x5a8>
   17286:	68 31       	cpi	r22, 0x18	; 24
   17288:	09 f5       	brne	.+66     	; 0x172cc <Amigo_Command+0x5ba>
   1728a:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1728c:	11 05       	cpc	r17, r1
   1728e:	f1 f4       	brne	.+60     	; 0x172cc <Amigo_Command+0x5ba>
   17290:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Format]\n");
   17294:	85 ff       	sbrs	r24, 5
   17296:	0a c0       	rjmp	.+20     	; 0x172ac <Amigo_Command+0x59a>
   17298:	86 ec       	ldi	r24, 0xC6	; 198
   1729a:	95 e2       	ldi	r25, 0x25	; 37
   1729c:	a0 e0       	ldi	r26, 0x00	; 0
   1729e:	ed b7       	in	r30, 0x3d	; 61
   172a0:	fe b7       	in	r31, 0x3e	; 62
   172a2:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   172a4:	92 83       	std	Z+2, r25	; 0x02
   172a6:	a3 83       	std	Z+3, r26	; 0x03
   172a8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   172ac:	80 91 cc 1c 	lds	r24, 0x1CCC	; 0x801ccc <gpib_iobuff+0x1>
   172b0:	1c dd       	rcall	.-1480   	; 0x16cea <amigo_check_unit>
   172b2:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   172b6:	58 d9       	rcall	.-3408   	; 0x16568 <amigo_format>
   172b8:	04 c0       	rjmp	.+8      	; 0x172c2 <Amigo_Command+0x5b0>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   172ba:	f0 e7       	ldi	r31, 0x70	; 112
   172bc:	ef 16       	cp	r14, r31
   172be:	f1 04       	cpc	r15, r1
   172c0:	29 f4       	brne	.+10     	; 0x172cc <Amigo_Command+0x5ba>
   172c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   172c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
   172c6:	88 27       	eor	r24, r24
   172c8:	90 7d       	andi	r25, 0xD0	; 208
   172ca:	03 c0       	rjmp	.+6      	; 0x172d2 <Amigo_Command+0x5c0>
}
   172cc:	a8 01       	movw	r20, r16
   172ce:	8e 2d       	mov	r24, r14
   172d0:	ef db       	rcall	.-2082   	; 0x16ab0 <amigo_todo_op>
   172d2:	6c 96       	adiw	r28, 0x1c	; 28
   172d4:	e6 e0       	ldi	r30, 0x06	; 6
   172d6:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

000172da <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   172da:	a9 e0       	ldi	r26, 0x09	; 9
   172dc:	b0 e0       	ldi	r27, 0x00	; 0
   172de:	e3 e7       	ldi	r30, 0x73	; 115
   172e0:	f9 eb       	ldi	r31, 0xB9	; 185
   172e2:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   172e6:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   172ec:	85 ff       	sbrs	r24, 5
   172ee:	16 c0       	rjmp	.+44     	; 0x1731c <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   172f0:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   172f4:	90 e0       	ldi	r25, 0x00	; 0
   172f6:	ed b7       	in	r30, 0x3d	; 61
   172f8:	fe b7       	in	r31, 0x3e	; 62
   172fa:	91 87       	std	Z+9, r25	; 0x09
   172fc:	80 87       	std	Z+8, r24	; 0x08
   172fe:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17302:	90 e0       	ldi	r25, 0x00	; 0
   17304:	97 83       	std	Z+7, r25	; 0x07
   17306:	86 83       	std	Z+6, r24	; 0x06
   17308:	d5 83       	std	Z+5, r29	; 0x05
   1730a:	c4 83       	std	Z+4, r28	; 0x04
   1730c:	84 e9       	ldi	r24, 0x94	; 148
   1730e:	95 e2       	ldi	r25, 0x25	; 37
   17310:	a0 e0       	ldi	r26, 0x00	; 0
   17312:	81 83       	std	Z+1, r24	; 0x01
   17314:	92 83       	std	Z+2, r25	; 0x02
   17316:	a3 83       	std	Z+3, r26	; 0x03
   17318:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1731c:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   17320:	8f 35       	cpi	r24, 0x5F	; 95
   17322:	09 f4       	brne	.+2      	; 0x17326 <Amigo_Execute+0x4c>
   17324:	ad c0       	rjmp	.+346    	; 0x17480 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17326:	90 e0       	ldi	r25, 0x00	; 0
   17328:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   1732c:	89 2b       	or	r24, r25
   1732e:	39 f0       	breq	.+14     	; 0x1733e <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17330:	ce 01       	movw	r24, r28
   17332:	87 7f       	andi	r24, 0xF7	; 247
   17334:	80 36       	cpi	r24, 0x60	; 96
   17336:	91 05       	cpc	r25, r1
   17338:	09 f0       	breq	.+2      	; 0x1733c <Amigo_Execute+0x62>
   1733a:	a2 c0       	rjmp	.+324    	; 0x17480 <Amigo_Execute+0x1a6>
   1733c:	08 c0       	rjmp	.+16     	; 0x1734e <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1733e:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17342:	90 e0       	ldi	r25, 0x00	; 0
   17344:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   17348:	89 2b       	or	r24, r25
   1734a:	91 f7       	brne	.-28     	; 0x17330 <Amigo_Execute+0x56>
   1734c:	99 c0       	rjmp	.+306    	; 0x17480 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1734e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   17352:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   17356:	81 81       	ldd	r24, Z+1	; 0x01
   17358:	90 e0       	ldi	r25, 0x00	; 0
   1735a:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>

    if(secondary == 0x60)
   1735e:	c0 36       	cpi	r28, 0x60	; 96
   17360:	d1 05       	cpc	r29, r1
   17362:	09 f0       	breq	.+2      	; 0x17366 <Amigo_Execute+0x8c>
   17364:	4e c0       	rjmp	.+156    	; 0x17402 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17366:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1736a:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   1736e:	e0 81       	ld	r30, Z
   17370:	8e 2f       	mov	r24, r30
   17372:	90 e0       	ldi	r25, 0x00	; 0
   17374:	8b 30       	cpi	r24, 0x0B	; 11
   17376:	91 05       	cpc	r25, r1
   17378:	08 f0       	brcs	.+2      	; 0x1737c <Amigo_Execute+0xa2>
   1737a:	41 c0       	rjmp	.+130    	; 0x173fe <Amigo_Execute+0x124>
   1737c:	fc 01       	movw	r30, r24
   1737e:	e0 52       	subi	r30, 0x20	; 32
   17380:	ff 4f       	sbci	r31, 0xFF	; 255
   17382:	0c 94 62 e0 	jmp	0x1c0c4	; 0x1c0c4 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17386:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1738a:	85 ff       	sbrs	r24, 5
   1738c:	18 c0       	rjmp	.+48     	; 0x173be <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   1738e:	84 e7       	ldi	r24, 0x74	; 116
   17390:	95 e2       	ldi	r25, 0x25	; 37
   17392:	0d c0       	rjmp	.+26     	; 0x173ae <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17394:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17398:	85 ff       	sbrs	r24, 5
   1739a:	11 c0       	rjmp	.+34     	; 0x173be <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1739c:	83 e5       	ldi	r24, 0x53	; 83
   1739e:	95 e2       	ldi	r25, 0x25	; 37
   173a0:	06 c0       	rjmp	.+12     	; 0x173ae <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173a2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   173a6:	85 ff       	sbrs	r24, 5
   173a8:	0a c0       	rjmp	.+20     	; 0x173be <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   173aa:	84 e3       	ldi	r24, 0x34	; 52
   173ac:	95 e2       	ldi	r25, 0x25	; 37
   173ae:	a0 e0       	ldi	r26, 0x00	; 0
   173b0:	ed b7       	in	r30, 0x3d	; 61
   173b2:	fe b7       	in	r31, 0x3e	; 62
   173b4:	81 83       	std	Z+1, r24	; 0x01
   173b6:	92 83       	std	Z+2, r25	; 0x02
   173b8:	a3 83       	std	Z+3, r26	; 0x03
   173ba:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
                return ( amigo_buffered_read() );
   173be:	69 d9       	rcall	.-3374   	; 0x16692 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173c0:	61 c0       	rjmp	.+194    	; 0x17484 <Amigo_Execute+0x1aa>
   173c2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   173c6:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   173c8:	18 c0       	rjmp	.+48     	; 0x173fa <Amigo_Execute+0x120>
   173ca:	82 e1       	ldi	r24, 0x12	; 18
   173cc:	95 e2       	ldi	r25, 0x25	; 37
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173ce:	0d c0       	rjmp	.+26     	; 0x173ea <Amigo_Execute+0x110>
   173d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   173d4:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   173d6:	11 c0       	rjmp	.+34     	; 0x173fa <Amigo_Execute+0x120>
   173d8:	86 ef       	ldi	r24, 0xF6	; 246
   173da:	94 e2       	ldi	r25, 0x24	; 36
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173dc:	06 c0       	rjmp	.+12     	; 0x173ea <Amigo_Execute+0x110>
   173de:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   173e2:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   173e4:	0a c0       	rjmp	.+20     	; 0x173fa <Amigo_Execute+0x120>
   173e6:	86 ed       	ldi	r24, 0xD6	; 214
   173e8:	94 e2       	ldi	r25, 0x24	; 36
   173ea:	a0 e0       	ldi	r26, 0x00	; 0
   173ec:	ed b7       	in	r30, 0x3d	; 61
   173ee:	fe b7       	in	r31, 0x3e	; 62
   173f0:	81 83       	std	Z+1, r24	; 0x01
   173f2:	92 83       	std	Z+2, r25	; 0x02
   173f4:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   173f6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   173fa:	14 da       	rcall	.-3032   	; 0x16824 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   173fc:	43 c0       	rjmp	.+134    	; 0x17484 <Amigo_Execute+0x1aa>
   173fe:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17400:	3d c0       	rjmp	.+122    	; 0x1747c <Amigo_Execute+0x1a2>
   17402:	c8 36       	cpi	r28, 0x68	; 104
   17404:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17406:	e1 f5       	brne	.+120    	; 0x17480 <Amigo_Execute+0x1a6>
   17408:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <AMIGOs>
   1740c:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <AMIGOs+0x1>
   17410:	80 81       	ld	r24, Z
   17412:	82 30       	cpi	r24, 0x02	; 2
   17414:	81 f0       	breq	.+32     	; 0x17436 <Amigo_Execute+0x15c>
   17416:	18 f4       	brcc	.+6      	; 0x1741e <Amigo_Execute+0x144>
   17418:	88 23       	and	r24, r24
   1741a:	91 f1       	breq	.+100    	; 0x17480 <Amigo_Execute+0x1a6>
   1741c:	2e c0       	rjmp	.+92     	; 0x1747a <Amigo_Execute+0x1a0>
   1741e:	83 30       	cpi	r24, 0x03	; 3
   17420:	19 f0       	breq	.+6      	; 0x17428 <Amigo_Execute+0x14e>
   17422:	84 30       	cpi	r24, 0x04	; 4
   17424:	c9 f0       	breq	.+50     	; 0x17458 <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17426:	29 c0       	rjmp	.+82     	; 0x1747a <Amigo_Execute+0x1a0>
   17428:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1742c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   1742e:	11 c0       	rjmp	.+34     	; 0x17452 <Amigo_Execute+0x178>
   17430:	8d ea       	ldi	r24, 0xAD	; 173
   17432:	94 e2       	ldi	r25, 0x24	; 36
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17434:	06 c0       	rjmp	.+12     	; 0x17442 <Amigo_Execute+0x168>
   17436:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1743a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   1743c:	0a c0       	rjmp	.+20     	; 0x17452 <Amigo_Execute+0x178>
   1743e:	82 e8       	ldi	r24, 0x82	; 130
   17440:	94 e2       	ldi	r25, 0x24	; 36
   17442:	a0 e0       	ldi	r26, 0x00	; 0
   17444:	ed b7       	in	r30, 0x3d	; 61
   17446:	fe b7       	in	r31, 0x3e	; 62
   17448:	81 83       	std	Z+1, r24	; 0x01
   1744a:	92 83       	std	Z+2, r25	; 0x02
   1744c:	a3 83       	std	Z+3, r26	; 0x03
   1744e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
                return ( amigo_send_status() );
   17452:	0e 94 66 b1 	call	0x162cc	; 0x162cc <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17456:	16 c0       	rjmp	.+44     	; 0x17484 <Amigo_Execute+0x1aa>
   17458:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1745c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   1745e:	0a c0       	rjmp	.+20     	; 0x17474 <Amigo_Execute+0x19a>
   17460:	89 e5       	ldi	r24, 0x59	; 89
   17462:	94 e2       	ldi	r25, 0x24	; 36
   17464:	a0 e0       	ldi	r26, 0x00	; 0
   17466:	ed b7       	in	r30, 0x3d	; 61
   17468:	fe b7       	in	r31, 0x3e	; 62
   1746a:	81 83       	std	Z+1, r24	; 0x01
   1746c:	92 83       	std	Z+2, r25	; 0x02
   1746e:	a3 83       	std	Z+3, r26	; 0x03
   17470:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17474:	0e 94 08 b1 	call	0x16210	; 0x16210 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17478:	05 c0       	rjmp	.+10     	; 0x17484 <Amigo_Execute+0x1aa>
   1747a:	88 e6       	ldi	r24, 0x68	; 104
   1747c:	b2 db       	rcall	.-2204   	; 0x16be2 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   1747e:	02 c0       	rjmp	.+4      	; 0x17484 <Amigo_Execute+0x1aa>
   17480:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17482:	90 e0       	ldi	r25, 0x00	; 0
   17484:	cd b7       	in	r28, 0x3d	; 61
   17486:	de b7       	in	r29, 0x3e	; 62
   17488:	29 96       	adiw	r28, 0x09	; 9
   1748a:	e2 e0       	ldi	r30, 0x02	; 2
   1748c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00017490 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17490:	cf 93       	push	r28
   17492:	df 93       	push	r29
   17494:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17496:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   1749a:	90 e0       	ldi	r25, 0x00	; 0
   1749c:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   174a0:	89 2b       	or	r24, r25
   174a2:	51 f0       	breq	.+20     	; 0x174b8 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   174a4:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   174a8:	8f 35       	cpi	r24, 0x5F	; 95
   174aa:	71 f4       	brne	.+28     	; 0x174c8 <AMIGO_COMMANDS+0x38>
   174ac:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   174b0:	90 e0       	ldi	r25, 0x00	; 0
   174b2:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   174b6:	08 c0       	rjmp	.+16     	; 0x174c8 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   174b8:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   174bc:	90 e0       	ldi	r25, 0x00	; 0
   174be:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   174c2:	89 2b       	or	r24, r25
   174c4:	79 f7       	brne	.-34     	; 0x174a4 <AMIGO_COMMANDS+0x14>
   174c6:	76 c0       	rjmp	.+236    	; 0x175b4 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   174c8:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   174cc:	81 11       	cpse	r24, r1
   174ce:	05 c0       	rjmp	.+10     	; 0x174da <AMIGO_COMMANDS+0x4a>
   174d0:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   174d4:	90 e0       	ldi	r25, 0x00	; 0
   174d6:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   174da:	c0 36       	cpi	r28, 0x60	; 96
   174dc:	99 f4       	brne	.+38     	; 0x17504 <AMIGO_COMMANDS+0x74>
   174de:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   174e2:	90 e0       	ldi	r25, 0x00	; 0
   174e4:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   174e8:	89 2b       	or	r24, r25
   174ea:	19 f0       	breq	.+6      	; 0x174f2 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   174ec:	80 e6       	ldi	r24, 0x60	; 96
   174ee:	90 e0       	ldi	r25, 0x00	; 0
   174f0:	14 c0       	rjmp	.+40     	; 0x1751a <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   174f2:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   174f6:	90 e0       	ldi	r25, 0x00	; 0
   174f8:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   174fc:	89 2b       	or	r24, r25
   174fe:	09 f4       	brne	.+2      	; 0x17502 <AMIGO_COMMANDS+0x72>
   17500:	59 c0       	rjmp	.+178    	; 0x175b4 <AMIGO_COMMANDS+0x124>
   17502:	f4 cf       	rjmp	.-24     	; 0x174ec <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17504:	c8 36       	cpi	r28, 0x68	; 104
   17506:	c1 f4       	brne	.+48     	; 0x17538 <AMIGO_COMMANDS+0xa8>
   17508:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   1750c:	90 e0       	ldi	r25, 0x00	; 0
   1750e:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   17512:	89 2b       	or	r24, r25
   17514:	21 f0       	breq	.+8      	; 0x1751e <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17516:	88 e6       	ldi	r24, 0x68	; 104
   17518:	90 e0       	ldi	r25, 0x00	; 0
   1751a:	df de       	rcall	.-578    	; 0x172da <Amigo_Execute>
   1751c:	0b c0       	rjmp	.+22     	; 0x17534 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   1751e:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17522:	90 e0       	ldi	r25, 0x00	; 0
   17524:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   17528:	89 2b       	or	r24, r25
   1752a:	09 f4       	brne	.+2      	; 0x1752e <AMIGO_COMMANDS+0x9e>
   1752c:	43 c0       	rjmp	.+134    	; 0x175b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1752e:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17530:	90 e0       	ldi	r25, 0x00	; 0
   17532:	ef db       	rcall	.-2082   	; 0x16d12 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17534:	ec 01       	movw	r28, r24
   17536:	40 c0       	rjmp	.+128    	; 0x175b8 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17538:	c9 36       	cpi	r28, 0x69	; 105
   1753a:	51 f4       	brne	.+20     	; 0x17550 <AMIGO_COMMANDS+0xc0>
   1753c:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17540:	90 e0       	ldi	r25, 0x00	; 0
   17542:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   17546:	89 2b       	or	r24, r25
   17548:	a9 f1       	breq	.+106    	; 0x175b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1754a:	89 e6       	ldi	r24, 0x69	; 105
   1754c:	90 e0       	ldi	r25, 0x00	; 0
   1754e:	f1 cf       	rjmp	.-30     	; 0x17532 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17550:	ca 36       	cpi	r28, 0x6A	; 106
   17552:	51 f4       	brne	.+20     	; 0x17568 <AMIGO_COMMANDS+0xd8>
   17554:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17558:	90 e0       	ldi	r25, 0x00	; 0
   1755a:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   1755e:	89 2b       	or	r24, r25
   17560:	49 f1       	breq	.+82     	; 0x175b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17562:	8a e6       	ldi	r24, 0x6A	; 106
   17564:	90 e0       	ldi	r25, 0x00	; 0
   17566:	e5 cf       	rjmp	.-54     	; 0x17532 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17568:	cc 36       	cpi	r28, 0x6C	; 108
   1756a:	51 f4       	brne	.+20     	; 0x17580 <AMIGO_COMMANDS+0xf0>
   1756c:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17570:	90 e0       	ldi	r25, 0x00	; 0
   17572:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   17576:	89 2b       	or	r24, r25
   17578:	e9 f0       	breq	.+58     	; 0x175b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1757a:	8c e6       	ldi	r24, 0x6C	; 108
   1757c:	90 e0       	ldi	r25, 0x00	; 0
   1757e:	d9 cf       	rjmp	.-78     	; 0x17532 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17580:	c0 37       	cpi	r28, 0x70	; 112
   17582:	c1 f4       	brne	.+48     	; 0x175b4 <AMIGO_COMMANDS+0x124>
   17584:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   17588:	90 e0       	ldi	r25, 0x00	; 0
   1758a:	0e 94 4c 8c 	call	0x11898	; 0x11898 <AMIGO_is_MTA>
   1758e:	ec 01       	movw	r28, r24
   17590:	89 2b       	or	r24, r25
   17592:	51 f0       	breq	.+20     	; 0x175a8 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17594:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOp>
   17598:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOp+0x1>
   1759c:	81 81       	ldd	r24, Z+1	; 0x01
   1759e:	90 e0       	ldi	r25, 0x00	; 0
   175a0:	0e 94 22 86 	call	0x10c44	; 0x10c44 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   175a4:	fc d9       	rcall	.-3080   	; 0x1699e <amigo_cmd_dsj>
   175a6:	c6 cf       	rjmp	.-116    	; 0x17534 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   175a8:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   175ac:	90 e0       	ldi	r25, 0x00	; 0
   175ae:	0e 94 3b 8c 	call	0x11876	; 0x11876 <AMIGO_is_MLA>
   175b2:	02 c0       	rjmp	.+4      	; 0x175b8 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   175b4:	c0 e0       	ldi	r28, 0x00	; 0
   175b6:	d0 e0       	ldi	r29, 0x00	; 0
}
   175b8:	ce 01       	movw	r24, r28
   175ba:	df 91       	pop	r29
   175bc:	cf 91       	pop	r28
   175be:	08 95       	ret

000175c0 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   175c0:	e5 e8       	ldi	r30, 0x85	; 133
   175c2:	f9 e1       	ldi	r31, 0x19	; 25
   175c4:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   175c6:	10 82       	st	Z, r1
   175c8:	11 82       	std	Z+1, r1	; 0x01
   175ca:	12 82       	std	Z+2, r1	; 0x02
   175cc:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   175ce:	15 82       	std	Z+5, r1	; 0x05
   175d0:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   175d2:	12 86       	std	Z+10, r1	; 0x0a
   175d4:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   175d6:	14 86       	std	Z+12, r1	; 0x0c
   175d8:	13 86       	std	Z+11, r1	; 0x0b
   175da:	08 95       	ret

000175dc <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   175dc:	cf 93       	push	r28
   175de:	df 93       	push	r29
   175e0:	ad b7       	in	r26, 0x3d	; 61
   175e2:	be b7       	in	r27, 0x3e	; 62
   175e4:	17 97       	sbiw	r26, 0x07	; 7
   175e6:	0f b6       	in	r0, 0x3f	; 63
   175e8:	f8 94       	cli
   175ea:	be bf       	out	0x3e, r27	; 62
   175ec:	0f be       	out	0x3f, r0	; 63
   175ee:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   175f0:	20 91 8e 19 	lds	r18, 0x198E	; 0x80198e <plot+0x9>
   175f4:	30 91 8f 19 	lds	r19, 0x198F	; 0x80198f <plot+0xa>
   175f8:	21 15       	cp	r18, r1
   175fa:	31 05       	cpc	r19, r1
   175fc:	09 f4       	brne	.+2      	; 0x17600 <receive_plot_flush+0x24>
   175fe:	45 c0       	rjmp	.+138    	; 0x1768a <receive_plot_flush+0xae>
   17600:	80 91 89 19 	lds	r24, 0x1989	; 0x801989 <plot+0x4>
   17604:	90 91 8a 19 	lds	r25, 0x198A	; 0x80198a <plot+0x5>
   17608:	00 97       	sbiw	r24, 0x00	; 0
   1760a:	09 f4       	brne	.+2      	; 0x1760e <receive_plot_flush+0x32>
   1760c:	40 c0       	rjmp	.+128    	; 0x1768e <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   1760e:	ac 01       	movw	r20, r24
   17610:	61 e0       	ldi	r22, 0x01	; 1
   17612:	70 e0       	ldi	r23, 0x00	; 0
   17614:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <plot+0xb>
   17618:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <plot+0xc>
   1761c:	0e 94 38 7c 	call	0xf870	; 0xf870 <fwrite>
   17620:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17622:	80 91 89 19 	lds	r24, 0x1989	; 0x801989 <plot+0x4>
   17626:	90 91 8a 19 	lds	r25, 0x198A	; 0x80198a <plot+0x5>
   1762a:	c8 17       	cp	r28, r24
   1762c:	d9 07       	cpc	r29, r25
   1762e:	09 f1       	breq	.+66     	; 0x17672 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   17630:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17634:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17638:	82 72       	andi	r24, 0x22	; 34
   1763a:	99 27       	eor	r25, r25
   1763c:	89 2b       	or	r24, r25
   1763e:	b1 f0       	breq	.+44     	; 0x1766c <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17640:	85 ea       	ldi	r24, 0xA5	; 165
   17642:	95 e1       	ldi	r25, 0x15	; 21
   17644:	0e 94 41 78 	call	0xf082	; 0xf082 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17648:	ed b7       	in	r30, 0x3d	; 61
   1764a:	fe b7       	in	r31, 0x3e	; 62
   1764c:	d7 83       	std	Z+7, r29	; 0x07
   1764e:	c6 83       	std	Z+6, r28	; 0x06
   17650:	80 91 89 19 	lds	r24, 0x1989	; 0x801989 <plot+0x4>
   17654:	90 91 8a 19 	lds	r25, 0x198A	; 0x80198a <plot+0x5>
   17658:	95 83       	std	Z+5, r25	; 0x05
   1765a:	84 83       	std	Z+4, r24	; 0x04
   1765c:	85 ea       	ldi	r24, 0xA5	; 165
   1765e:	9c e2       	ldi	r25, 0x2C	; 44
   17660:	a0 e0       	ldi	r26, 0x00	; 0
   17662:	81 83       	std	Z+1, r24	; 0x01
   17664:	92 83       	std	Z+2, r25	; 0x02
   17666:	a3 83       	std	Z+3, r26	; 0x03
   17668:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        }
        return(-1);
   1766c:	8f ef       	ldi	r24, 0xFF	; 255
   1766e:	9f ef       	ldi	r25, 0xFF	; 255
   17670:	0e c0       	rjmp	.+28     	; 0x1768e <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17672:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <plot+0x9>
   17676:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <plot+0xa>
   1767a:	0e 94 8b 76 	call	0xed16	; 0xed16 <fileno>
    if(fno < 0)
   1767e:	97 fd       	sbrc	r25, 7
   17680:	f5 cf       	rjmp	.-22     	; 0x1766c <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17682:	0e 94 82 7b 	call	0xf704	; 0xf704 <syncfs>
    return (ret);
   17686:	ce 01       	movw	r24, r28
   17688:	02 c0       	rjmp	.+4      	; 0x1768e <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   1768a:	80 e0       	ldi	r24, 0x00	; 0
   1768c:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   1768e:	cd b7       	in	r28, 0x3d	; 61
   17690:	de b7       	in	r29, 0x3e	; 62
   17692:	27 96       	adiw	r28, 0x07	; 7
   17694:	e2 e0       	ldi	r30, 0x02	; 2
   17696:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

0001769a <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   1769a:	ad b7       	in	r26, 0x3d	; 61
   1769c:	be b7       	in	r27, 0x3e	; 62
   1769e:	17 97       	sbiw	r26, 0x07	; 7
   176a0:	0f b6       	in	r0, 0x3f	; 63
   176a2:	f8 94       	cli
   176a4:	be bf       	out	0x3e, r27	; 62
   176a6:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   176a8:	ad bf       	out	0x3d, r26	; 61
   176aa:	98 df       	rcall	.-208    	; 0x175dc <receive_plot_flush>
   176ac:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   176ae:	03 c0       	rjmp	.+6      	; 0x176b6 <printer_close+0x1c>
   176b0:	81 e0       	ldi	r24, 0x01	; 1
   176b2:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <plot+0x8>

    if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   176b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   176ba:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   176be:	82 72       	andi	r24, 0x22	; 34
   176c0:	99 27       	eor	r25, r25
   176c2:	89 2b       	or	r24, r25
    {
        if(plot.error)
   176c4:	71 f0       	breq	.+28     	; 0x176e2 <printer_close+0x48>
   176c6:	80 91 8d 19 	lds	r24, 0x198D	; 0x80198d <plot+0x8>
   176ca:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   176cc:	51 f0       	breq	.+20     	; 0x176e2 <printer_close+0x48>
   176ce:	84 ed       	ldi	r24, 0xD4	; 212
   176d0:	9c e2       	ldi	r25, 0x2C	; 44
   176d2:	a0 e0       	ldi	r26, 0x00	; 0
   176d4:	ed b7       	in	r30, 0x3d	; 61
   176d6:	fe b7       	in	r31, 0x3e	; 62
   176d8:	81 83       	std	Z+1, r24	; 0x01
   176da:	92 83       	std	Z+2, r25	; 0x02
   176dc:	a3 83       	std	Z+3, r26	; 0x03
   176de:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }

    if(plot.fp)
   176e2:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <plot+0x9>
   176e6:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <plot+0xa>
   176ea:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   176ec:	e1 f0       	breq	.+56     	; 0x17726 <printer_close+0x8c>
   176ee:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   176f6:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   176f8:	16 c0       	rjmp	.+44     	; 0x17726 <printer_close+0x8c>
   176fa:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <plot>
   176fe:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <plot+0x1>
   17702:	a0 91 87 19 	lds	r26, 0x1987	; 0x801987 <plot+0x2>
   17706:	b0 91 88 19 	lds	r27, 0x1988	; 0x801988 <plot+0x3>
   1770a:	ed b7       	in	r30, 0x3d	; 61
   1770c:	fe b7       	in	r31, 0x3e	; 62
   1770e:	84 83       	std	Z+4, r24	; 0x04
   17710:	95 83       	std	Z+5, r25	; 0x05
   17712:	a6 83       	std	Z+6, r26	; 0x06
   17714:	b7 83       	std	Z+7, r27	; 0x07
   17716:	86 ec       	ldi	r24, 0xC6	; 198
   17718:	9c e2       	ldi	r25, 0x2C	; 44
   1771a:	a0 e0       	ldi	r26, 0x00	; 0
   1771c:	81 83       	std	Z+1, r24	; 0x01
   1771e:	92 83       	std	Z+2, r25	; 0x02
   17720:	a3 83       	std	Z+3, r26	; 0x03
   17722:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }

    if(plot.buf)
   17726:	80 91 90 19 	lds	r24, 0x1990	; 0x801990 <plot+0xb>
   1772a:	90 91 91 19 	lds	r25, 0x1991	; 0x801991 <plot+0xc>
   1772e:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17730:	11 f0       	breq	.+4      	; 0x17736 <printer_close+0x9c>
    printer_init();
   17732:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
}
   17736:	44 df       	rcall	.-376    	; 0x175c0 <printer_init>
   17738:	ad b7       	in	r26, 0x3d	; 61
   1773a:	be b7       	in	r27, 0x3e	; 62
   1773c:	17 96       	adiw	r26, 0x07	; 7
   1773e:	0f b6       	in	r0, 0x3f	; 63
   17740:	f8 94       	cli
   17742:	be bf       	out	0x3e, r27	; 62
   17744:	0f be       	out	0x3f, r0	; 63
   17746:	ad bf       	out	0x3d, r26	; 61
   17748:	08 95       	ret

0001774a <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   1774a:	ad e5       	ldi	r26, 0x5D	; 93
   1774c:	b0 e0       	ldi	r27, 0x00	; 0
   1774e:	eb ea       	ldi	r30, 0xAB	; 171
   17750:	fb eb       	ldi	r31, 0xBB	; 187
   17752:	0c 94 9d e0 	jmp	0x1c13a	; 0x1c13a <__prologue_saves__+0x18>
   17756:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17758:	89 2b       	or	r24, r25
   1775a:	09 f0       	breq	.+2      	; 0x1775e <printer_open+0x14>
   1775c:	4f c0       	rjmp	.+158    	; 0x177fc <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   1775e:	be 01       	movw	r22, r28
   17760:	6e 5a       	subi	r22, 0xAE	; 174
   17762:	7f 4f       	sbci	r23, 0xFF	; 255
   17764:	80 e0       	ldi	r24, 0x00	; 0
   17766:	90 e0       	ldi	r25, 0x00	; 0
   17768:	0e 94 41 33 	call	0x6682	; 0x6682 <clock_gettime>
        seconds = ts.tv_sec;
   1776c:	66 96       	adiw	r28, 0x16	; 22
   1776e:	8c ad       	ldd	r24, Y+60	; 0x3c
   17770:	9d ad       	ldd	r25, Y+61	; 0x3d
   17772:	ae ad       	ldd	r26, Y+62	; 0x3e
   17774:	bf ad       	ldd	r27, Y+63	; 0x3f
   17776:	66 97       	sbiw	r28, 0x16	; 22
   17778:	6e 96       	adiw	r28, 0x1e	; 30
   1777a:	8c af       	std	Y+60, r24	; 0x3c
   1777c:	9d af       	std	Y+61, r25	; 0x3d
   1777e:	ae af       	std	Y+62, r26	; 0x3e
   17780:	bf af       	std	Y+63, r27	; 0x3f
   17782:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17784:	ce 01       	movw	r24, r28
   17786:	86 5a       	subi	r24, 0xA6	; 166
   17788:	9f 4f       	sbci	r25, 0xFF	; 255
   1778a:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <gmtime>
   1778e:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17790:	fc 01       	movw	r30, r24
   17792:	e6 80       	ldd	r14, Z+6	; 0x06
   17794:	f7 80       	ldd	r15, Z+7	; 0x07
   17796:	80 85       	ldd	r24, Z+8	; 0x08
   17798:	91 85       	ldd	r25, Z+9	; 0x09
   1779a:	0e 94 07 36 	call	0x6c0e	; 0x6c0e <tm_mon_to_ascii>
   1779e:	f8 01       	movw	r30, r16
   177a0:	20 81       	ld	r18, Z
   177a2:	31 81       	ldd	r19, Z+1	; 0x01
   177a4:	ed b7       	in	r30, 0x3d	; 61
   177a6:	fe b7       	in	r31, 0x3e	; 62
   177a8:	31 8b       	std	Z+17, r19	; 0x11
   177aa:	20 8b       	std	Z+16, r18	; 0x10
   177ac:	f8 01       	movw	r30, r16
   177ae:	22 81       	ldd	r18, Z+2	; 0x02
   177b0:	33 81       	ldd	r19, Z+3	; 0x03
   177b2:	ed b7       	in	r30, 0x3d	; 61
   177b4:	fe b7       	in	r31, 0x3e	; 62
   177b6:	37 87       	std	Z+15, r19	; 0x0f
   177b8:	26 87       	std	Z+14, r18	; 0x0e
   177ba:	f8 01       	movw	r30, r16
   177bc:	24 81       	ldd	r18, Z+4	; 0x04
   177be:	35 81       	ldd	r19, Z+5	; 0x05
   177c0:	ed b7       	in	r30, 0x3d	; 61
   177c2:	fe b7       	in	r31, 0x3e	; 62
   177c4:	35 87       	std	Z+13, r19	; 0x0d
   177c6:	24 87       	std	Z+12, r18	; 0x0c
   177c8:	f8 01       	movw	r30, r16
   177ca:	22 85       	ldd	r18, Z+10	; 0x0a
   177cc:	33 85       	ldd	r19, Z+11	; 0x0b
   177ce:	24 59       	subi	r18, 0x94	; 148
   177d0:	38 4f       	sbci	r19, 0xF8	; 248
   177d2:	ed b7       	in	r30, 0x3d	; 61
   177d4:	fe b7       	in	r31, 0x3e	; 62
   177d6:	33 87       	std	Z+11, r19	; 0x0b
   177d8:	22 87       	std	Z+10, r18	; 0x0a
   177da:	91 87       	std	Z+9, r25	; 0x09
   177dc:	80 87       	std	Z+8, r24	; 0x08
   177de:	f7 82       	std	Z+7, r15	; 0x07
   177e0:	e6 82       	std	Z+6, r14	; 0x06
   177e2:	8b e0       	ldi	r24, 0x0B	; 11
   177e4:	9d e2       	ldi	r25, 0x2D	; 45
   177e6:	a0 e0       	ldi	r26, 0x00	; 0
   177e8:	83 83       	std	Z+3, r24	; 0x03
   177ea:	94 83       	std	Z+4, r25	; 0x04
   177ec:	a5 83       	std	Z+5, r26	; 0x05
   177ee:	8e 01       	movw	r16, r28
   177f0:	0e 5e       	subi	r16, 0xEE	; 238
   177f2:	1f 4f       	sbci	r17, 0xFF	; 255
   177f4:	12 83       	std	Z+2, r17	; 0x02
   177f6:	01 83       	std	Z+1, r16	; 0x01
   177f8:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17800:	85 ff       	sbrs	r24, 5
   17802:	0c c0       	rjmp	.+24     	; 0x1781c <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17804:	ed b7       	in	r30, 0x3d	; 61
   17806:	fe b7       	in	r31, 0x3e	; 62
   17808:	15 83       	std	Z+5, r17	; 0x05
   1780a:	04 83       	std	Z+4, r16	; 0x04
   1780c:	85 ef       	ldi	r24, 0xF5	; 245
   1780e:	9c e2       	ldi	r25, 0x2C	; 44
   17810:	a0 e0       	ldi	r26, 0x00	; 0
   17812:	81 83       	std	Z+1, r24	; 0x01
   17814:	92 83       	std	Z+2, r25	; 0x02
   17816:	a3 83       	std	Z+3, r26	; 0x03
   17818:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    plot.fp = fopen(ptr,"wb");
   1781c:	6e ed       	ldi	r22, 0xDE	; 222
   1781e:	78 e0       	ldi	r23, 0x08	; 8
   17820:	c8 01       	movw	r24, r16
   17822:	0e 94 10 7e 	call	0xfc20	; 0xfc20 <fopen>
   17826:	90 93 8f 19 	sts	0x198F, r25	; 0x80198f <plot+0xa>
   1782a:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <plot+0x9>
    if(plot.fp == NULL)
   1782e:	89 2b       	or	r24, r25
   17830:	b9 f4       	brne	.+46     	; 0x17860 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   17832:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17836:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1783a:	82 72       	andi	r24, 0x22	; 34
   1783c:	99 27       	eor	r25, r25
   1783e:	89 2b       	or	r24, r25
   17840:	11 f1       	breq	.+68     	; 0x17886 <printer_open+0x13c>
        {
            perror("open failed");
   17842:	89 e7       	ldi	r24, 0x79	; 121
   17844:	9d e0       	ldi	r25, 0x0D	; 13
   17846:	0e 94 41 78 	call	0xf082	; 0xf082 <perror>
            printf("exiting...\n");
   1784a:	89 ee       	ldi	r24, 0xE9	; 233
   1784c:	9c e2       	ldi	r25, 0x2C	; 44
   1784e:	a0 e0       	ldi	r26, 0x00	; 0
   17850:	ed b7       	in	r30, 0x3d	; 61
   17852:	fe b7       	in	r31, 0x3e	; 62
   17854:	81 83       	std	Z+1, r24	; 0x01
   17856:	92 83       	std	Z+2, r25	; 0x02
   17858:	a3 83       	std	Z+3, r26	; 0x03
   1785a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1785e:	13 c0       	rjmp	.+38     	; 0x17886 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17860:	61 e0       	ldi	r22, 0x01	; 1
   17862:	70 e0       	ldi	r23, 0x00	; 0
   17864:	81 e0       	ldi	r24, 0x01	; 1
   17866:	92 e0       	ldi	r25, 0x02	; 2
   17868:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   1786c:	90 93 91 19 	sts	0x1991, r25	; 0x801991 <plot+0xc>
   17870:	80 93 90 19 	sts	0x1990, r24	; 0x801990 <plot+0xb>
    if(plot.buf == NULL)
   17874:	89 2b       	or	r24, r25
        printer_close();
   17876:	09 f4       	brne	.+2      	; 0x1787a <printer_open+0x130>
    plot.size = 512;
   17878:	10 df       	rcall	.-480    	; 0x1769a <printer_close>
   1787a:	80 e0       	ldi	r24, 0x00	; 0
   1787c:	92 e0       	ldi	r25, 0x02	; 2
   1787e:	90 93 8c 19 	sts	0x198C, r25	; 0x80198c <plot+0x7>
   17882:	80 93 8b 19 	sts	0x198B, r24	; 0x80198b <plot+0x6>
}
   17886:	c3 5a       	subi	r28, 0xA3	; 163
   17888:	df 4f       	sbci	r29, 0xFF	; 255
   1788a:	e6 e0       	ldi	r30, 0x06	; 6
   1788c:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00017890 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17890:	cf 93       	push	r28
   17892:	df 93       	push	r29
   17894:	ad b7       	in	r26, 0x3d	; 61
   17896:	be b7       	in	r27, 0x3e	; 62
   17898:	17 97       	sbiw	r26, 0x07	; 7
   1789a:	0f b6       	in	r0, 0x3f	; 63
   1789c:	f8 94       	cli
   1789e:	be bf       	out	0x3e, r27	; 62
   178a0:	0f be       	out	0x3f, r0	; 63
   178a2:	ad bf       	out	0x3d, r26	; 61
   178a4:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_PPR + GPIB_DEVICE_STATE_MESSAGES))
   178a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   178aa:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   178ae:	82 72       	andi	r24, 0x22	; 34
   178b0:	99 27       	eor	r25, r25
   178b2:	89 2b       	or	r24, r25
   178b4:	c1 f0       	breq	.+48     	; 0x178e6 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   178b6:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <plot>
   178ba:	30 91 86 19 	lds	r19, 0x1986	; 0x801986 <plot+0x1>
   178be:	20 91 87 19 	lds	r18, 0x1987	; 0x801987 <plot+0x2>
   178c2:	90 91 88 19 	lds	r25, 0x1988	; 0x801988 <plot+0x3>
   178c6:	81 11       	cpse	r24, r1
   178c8:	0e c0       	rjmp	.+28     	; 0x178e6 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   178ca:	ed b7       	in	r30, 0x3d	; 61
   178cc:	fe b7       	in	r31, 0x3e	; 62
   178ce:	84 83       	std	Z+4, r24	; 0x04
   178d0:	35 83       	std	Z+5, r19	; 0x05
   178d2:	26 83       	std	Z+6, r18	; 0x06
   178d4:	97 83       	std	Z+7, r25	; 0x07
   178d6:	8e e9       	ldi	r24, 0x9E	; 158
   178d8:	9c e2       	ldi	r25, 0x2C	; 44
   178da:	a0 e0       	ldi	r26, 0x00	; 0
   178dc:	81 83       	std	Z+1, r24	; 0x01
   178de:	92 83       	std	Z+2, r25	; 0x02
   178e0:	a3 83       	std	Z+3, r26	; 0x03
   178e2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   178e6:	ce 01       	movw	r24, r28
   178e8:	88 27       	eor	r24, r24
   178ea:	97 7f       	andi	r25, 0xF7	; 247
   178ec:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   178ee:	41 f0       	breq	.+16     	; 0x17900 <printer_buffer+0x70>
   178f0:	75 de       	rcall	.-790    	; 0x175dc <receive_plot_flush>
   178f2:	89 2b       	or	r24, r25
   178f4:	09 f4       	brne	.+2      	; 0x178f8 <printer_buffer+0x68>
            plot.error = 1;
   178f6:	3f c0       	rjmp	.+126    	; 0x17976 <printer_buffer+0xe6>
   178f8:	81 e0       	ldi	r24, 0x01	; 1
   178fa:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <plot+0x8>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   178fe:	3b c0       	rjmp	.+118    	; 0x17976 <printer_buffer+0xe6>
   17900:	20 91 90 19 	lds	r18, 0x1990	; 0x801990 <plot+0xb>
   17904:	30 91 91 19 	lds	r19, 0x1991	; 0x801991 <plot+0xc>
   17908:	80 91 89 19 	lds	r24, 0x1989	; 0x801989 <plot+0x4>
   1790c:	90 91 8a 19 	lds	r25, 0x198A	; 0x80198a <plot+0x5>
   17910:	ac 01       	movw	r20, r24
   17912:	4f 5f       	subi	r20, 0xFF	; 255
   17914:	5f 4f       	sbci	r21, 0xFF	; 255
   17916:	50 93 8a 19 	sts	0x198A, r21	; 0x80198a <plot+0x5>
   1791a:	40 93 89 19 	sts	0x1989, r20	; 0x801989 <plot+0x4>
   1791e:	f9 01       	movw	r30, r18
   17920:	e8 0f       	add	r30, r24
   17922:	f9 1f       	adc	r31, r25
        plot.count++;
   17924:	c0 83       	st	Z, r28
   17926:	80 91 85 19 	lds	r24, 0x1985	; 0x801985 <plot>
   1792a:	90 91 86 19 	lds	r25, 0x1986	; 0x801986 <plot+0x1>
   1792e:	a0 91 87 19 	lds	r26, 0x1987	; 0x801987 <plot+0x2>
   17932:	b0 91 88 19 	lds	r27, 0x1988	; 0x801988 <plot+0x3>
   17936:	01 96       	adiw	r24, 0x01	; 1
   17938:	a1 1d       	adc	r26, r1
   1793a:	b1 1d       	adc	r27, r1
   1793c:	80 93 85 19 	sts	0x1985, r24	; 0x801985 <plot>
   17940:	90 93 86 19 	sts	0x1986, r25	; 0x801986 <plot+0x1>
   17944:	a0 93 87 19 	sts	0x1987, r26	; 0x801987 <plot+0x2>
   17948:	b0 93 88 19 	sts	0x1988, r27	; 0x801988 <plot+0x3>

        if(plot.ind >= plot.size)
   1794c:	20 91 89 19 	lds	r18, 0x1989	; 0x801989 <plot+0x4>
   17950:	30 91 8a 19 	lds	r19, 0x198A	; 0x80198a <plot+0x5>
   17954:	80 91 8b 19 	lds	r24, 0x198B	; 0x80198b <plot+0x6>
   17958:	90 91 8c 19 	lds	r25, 0x198C	; 0x80198c <plot+0x7>
   1795c:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   1795e:	39 07       	cpc	r19, r25
   17960:	54 f0       	brlt	.+20     	; 0x17976 <printer_buffer+0xe6>
   17962:	3c de       	rcall	.-904    	; 0x175dc <receive_plot_flush>
   17964:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   17966:	03 c0       	rjmp	.+6      	; 0x1796e <printer_buffer+0xde>
   17968:	81 e0       	ldi	r24, 0x01	; 1
   1796a:	80 93 8d 19 	sts	0x198D, r24	; 0x80198d <plot+0x8>
            plot.ind  = 0;
   1796e:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <plot+0x5>
   17972:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <plot+0x4>
        }
    }
}
   17976:	cd b7       	in	r28, 0x3d	; 61
   17978:	de b7       	in	r29, 0x3e	; 62
   1797a:	27 96       	adiw	r28, 0x07	; 7
   1797c:	e2 e0       	ldi	r30, 0x02	; 2
   1797e:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00017982 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17982:	cf 93       	push	r28
   17984:	00 d0       	rcall	.+0      	; 0x17986 <PRINTER_COMMANDS+0x4>
   17986:	00 d0       	rcall	.+0      	; 0x17988 <PRINTER_COMMANDS+0x6>
   17988:	1f 92       	push	r1
   1798a:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   1798c:	80 91 d1 1e 	lds	r24, 0x1ED1	; 0x801ed1 <listening>
   17990:	90 e0       	ldi	r25, 0x00	; 0
   17992:	0e 94 6e 8c 	call	0x118dc	; 0x118dc <PRINTER_is_MLA>
   17996:	89 2b       	or	r24, r25
   17998:	69 f0       	breq	.+26     	; 0x179b4 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1799a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1799e:	85 ff       	sbrs	r24, 5
   179a0:	22 c0       	rjmp	.+68     	; 0x179e6 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   179a2:	8c 2f       	mov	r24, r28
   179a4:	90 e0       	ldi	r25, 0x00	; 0
   179a6:	ed b7       	in	r30, 0x3d	; 61
   179a8:	fe b7       	in	r31, 0x3e	; 62
   179aa:	95 83       	std	Z+5, r25	; 0x05
   179ac:	84 83       	std	Z+4, r24	; 0x04
   179ae:	82 e8       	ldi	r24, 0x82	; 130
   179b0:	9c e2       	ldi	r25, 0x2C	; 44
   179b2:	13 c0       	rjmp	.+38     	; 0x179da <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   179b4:	80 91 cf 1e 	lds	r24, 0x1ECF	; 0x801ecf <talking>
   179b8:	90 e0       	ldi	r25, 0x00	; 0
   179ba:	0e 94 7f 8c 	call	0x118fe	; 0x118fe <PRINTER_is_MTA>
   179be:	89 2b       	or	r24, r25
   179c0:	91 f0       	breq	.+36     	; 0x179e6 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179c2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   179c6:	85 ff       	sbrs	r24, 5
   179c8:	0e c0       	rjmp	.+28     	; 0x179e6 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   179ca:	8c 2f       	mov	r24, r28
   179cc:	90 e0       	ldi	r25, 0x00	; 0
   179ce:	ed b7       	in	r30, 0x3d	; 61
   179d0:	fe b7       	in	r31, 0x3e	; 62
   179d2:	95 83       	std	Z+5, r25	; 0x05
   179d4:	84 83       	std	Z+4, r24	; 0x04
   179d6:	88 e6       	ldi	r24, 0x68	; 104
   179d8:	9c e2       	ldi	r25, 0x2C	; 44
   179da:	a0 e0       	ldi	r26, 0x00	; 0
   179dc:	81 83       	std	Z+1, r24	; 0x01
   179de:	92 83       	std	Z+2, r25	; 0x02
   179e0:	a3 83       	std	Z+3, r26	; 0x03
   179e2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   179e6:	80 e0       	ldi	r24, 0x00	; 0
   179e8:	90 e0       	ldi	r25, 0x00	; 0
   179ea:	0f 90       	pop	r0
   179ec:	0f 90       	pop	r0
   179ee:	0f 90       	pop	r0
   179f0:	0f 90       	pop	r0
   179f2:	0f 90       	pop	r0
   179f4:	cf 91       	pop	r28
   179f6:	08 95       	ret

000179f8 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   179f8:	0f 93       	push	r16
   179fa:	1f 93       	push	r17
   179fc:	da 01       	movw	r26, r20
   179fe:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17a00:	b7 fd       	sbrc	r27, 7
   17a02:	0b c0       	rjmp	.+22     	; 0x17a1a <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17a04:	fd 01       	movw	r30, r26
   17a06:	e6 0f       	add	r30, r22
   17a08:	f7 1f       	adc	r31, r23
   17a0a:	e8 0f       	add	r30, r24
   17a0c:	f9 1f       	adc	r31, r25
   17a0e:	00 83       	st	Z, r16
        val >>= 8;
   17a10:	01 2f       	mov	r16, r17
   17a12:	12 2f       	mov	r17, r18
   17a14:	23 2f       	mov	r18, r19
   17a16:	33 27       	eor	r19, r19
   17a18:	f2 cf       	rjmp	.-28     	; 0x179fe <V2B_MSB+0x6>
    }
}
   17a1a:	1f 91       	pop	r17
   17a1c:	0f 91       	pop	r16
   17a1e:	08 95       	ret

00017a20 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17a20:	0f 93       	push	r16
   17a22:	1f 93       	push	r17
   17a24:	fc 01       	movw	r30, r24
   17a26:	e6 0f       	add	r30, r22
   17a28:	f7 1f       	adc	r31, r23
   17a2a:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17a2c:	cf 01       	movw	r24, r30
   17a2e:	86 1b       	sub	r24, r22
   17a30:	97 0b       	sbc	r25, r23
   17a32:	84 17       	cp	r24, r20
   17a34:	95 07       	cpc	r25, r21
   17a36:	34 f4       	brge	.+12     	; 0x17a44 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17a38:	01 93       	st	Z+, r16
        val >>= 8;
   17a3a:	01 2f       	mov	r16, r17
   17a3c:	12 2f       	mov	r17, r18
   17a3e:	23 2f       	mov	r18, r19
   17a40:	33 27       	eor	r19, r19
   17a42:	f4 cf       	rjmp	.-24     	; 0x17a2c <V2B_LSB+0xc>
    }
}
   17a44:	1f 91       	pop	r17
   17a46:	0f 91       	pop	r16
   17a48:	08 95       	ret

00017a4a <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17a4a:	cf 92       	push	r12
   17a4c:	df 92       	push	r13
   17a4e:	ef 92       	push	r14
   17a50:	ff 92       	push	r15
   17a52:	fc 01       	movw	r30, r24
   17a54:	e6 0f       	add	r30, r22
   17a56:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17a58:	60 e0       	ldi	r22, 0x00	; 0
   17a5a:	70 e0       	ldi	r23, 0x00	; 0
   17a5c:	cb 01       	movw	r24, r22
   17a5e:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17a60:	9f 01       	movw	r18, r30
   17a62:	2a 1b       	sub	r18, r26
   17a64:	3b 0b       	sbc	r19, r27
   17a66:	24 17       	cp	r18, r20
   17a68:	35 07       	cpc	r19, r21
   17a6a:	4c f4       	brge	.+18     	; 0x17a7e <B2V_MSB+0x34>
    {
        val <<= 8;
   17a6c:	cc 24       	eor	r12, r12
   17a6e:	d6 2e       	mov	r13, r22
   17a70:	e7 2e       	mov	r14, r23
   17a72:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17a74:	21 91       	ld	r18, Z+
   17a76:	c7 01       	movw	r24, r14
   17a78:	b6 01       	movw	r22, r12
   17a7a:	62 2b       	or	r22, r18
   17a7c:	f1 cf       	rjmp	.-30     	; 0x17a60 <B2V_MSB+0x16>
    }
    return(val);
}
   17a7e:	ff 90       	pop	r15
   17a80:	ef 90       	pop	r14
   17a82:	df 90       	pop	r13
   17a84:	cf 90       	pop	r12
   17a86:	08 95       	ret

00017a88 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17a88:	cf 92       	push	r12
   17a8a:	df 92       	push	r13
   17a8c:	ef 92       	push	r14
   17a8e:	ff 92       	push	r15
   17a90:	9c 01       	movw	r18, r24
   17a92:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17a94:	60 e0       	ldi	r22, 0x00	; 0
   17a96:	70 e0       	ldi	r23, 0x00	; 0
   17a98:	cb 01       	movw	r24, r22
   17a9a:	41 50       	subi	r20, 0x01	; 1
   17a9c:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17a9e:	57 fd       	sbrc	r21, 7
   17aa0:	0e c0       	rjmp	.+28     	; 0x17abe <B2V_LSB+0x36>
    {
        val <<= 8;
   17aa2:	cc 24       	eor	r12, r12
   17aa4:	d6 2e       	mov	r13, r22
   17aa6:	e7 2e       	mov	r14, r23
   17aa8:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17aaa:	fa 01       	movw	r30, r20
   17aac:	ea 0f       	add	r30, r26
   17aae:	fb 1f       	adc	r31, r27
   17ab0:	e2 0f       	add	r30, r18
   17ab2:	f3 1f       	adc	r31, r19
   17ab4:	e0 81       	ld	r30, Z
   17ab6:	c7 01       	movw	r24, r14
   17ab8:	b6 01       	movw	r22, r12
   17aba:	6e 2b       	or	r22, r30
   17abc:	ee cf       	rjmp	.-36     	; 0x17a9a <B2V_LSB+0x12>
    }
    return(val);
}
   17abe:	ff 90       	pop	r15
   17ac0:	ef 90       	pop	r14
   17ac2:	df 90       	pop	r13
   17ac4:	cf 90       	pop	r12
   17ac6:	08 95       	ret

00017ac8 <lif_help>:
   17ac8:	cf 93       	push	r28
   17aca:	df 93       	push	r29
   17acc:	00 d0       	rcall	.+0      	; 0x17ace <lif_help+0x6>
   17ace:	1f 92       	push	r1
   17ad0:	ec 01       	movw	r28, r24
   17ad2:	8b e4       	ldi	r24, 0x4B	; 75
   17ad4:	91 e4       	ldi	r25, 0x41	; 65
   17ad6:	a0 e0       	ldi	r26, 0x00	; 0
   17ad8:	ed b7       	in	r30, 0x3d	; 61
   17ada:	fe b7       	in	r31, 0x3e	; 62
   17adc:	81 83       	std	Z+1, r24	; 0x01
   17ade:	92 83       	std	Z+2, r25	; 0x02
   17ae0:	a3 83       	std	Z+3, r26	; 0x03
   17ae2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17ae6:	cd 2b       	or	r28, r29
   17ae8:	51 f0       	breq	.+20     	; 0x17afe <lif_help+0x36>
   17aea:	82 e8       	ldi	r24, 0x82	; 130
   17aec:	9f e3       	ldi	r25, 0x3F	; 63
   17aee:	a0 e0       	ldi	r26, 0x00	; 0
   17af0:	ed b7       	in	r30, 0x3d	; 61
   17af2:	fe b7       	in	r31, 0x3e	; 62
   17af4:	81 83       	std	Z+1, r24	; 0x01
   17af6:	92 83       	std	Z+2, r25	; 0x02
   17af8:	a3 83       	std	Z+3, r26	; 0x03
   17afa:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17afe:	cd b7       	in	r28, 0x3d	; 61
   17b00:	de b7       	in	r29, 0x3e	; 62
   17b02:	23 96       	adiw	r28, 0x03	; 3
   17b04:	e2 e0       	ldi	r30, 0x02	; 2
   17b06:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00017b0a <lif_calloc>:
   17b0a:	cf 92       	push	r12
   17b0c:	df 92       	push	r13
   17b0e:	ef 92       	push	r14
   17b10:	ff 92       	push	r15
   17b12:	cf 93       	push	r28
   17b14:	df 93       	push	r29
   17b16:	ad b7       	in	r26, 0x3d	; 61
   17b18:	be b7       	in	r27, 0x3e	; 62
   17b1a:	17 97       	sbiw	r26, 0x07	; 7
   17b1c:	0f b6       	in	r0, 0x3f	; 63
   17b1e:	f8 94       	cli
   17b20:	be bf       	out	0x3e, r27	; 62
   17b22:	0f be       	out	0x3f, r0	; 63
   17b24:	ad bf       	out	0x3d, r26	; 61
   17b26:	6b 01       	movw	r12, r22
   17b28:	7c 01       	movw	r14, r24
   17b2a:	61 e0       	ldi	r22, 0x01	; 1
   17b2c:	70 e0       	ldi	r23, 0x00	; 0
   17b2e:	c6 01       	movw	r24, r12
   17b30:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <safecalloc>
   17b34:	ec 01       	movw	r28, r24
   17b36:	89 2b       	or	r24, r25
   17b38:	71 f4       	brne	.+28     	; 0x17b56 <lif_calloc+0x4c>
   17b3a:	ed b7       	in	r30, 0x3d	; 61
   17b3c:	fe b7       	in	r31, 0x3e	; 62
   17b3e:	c4 82       	std	Z+4, r12	; 0x04
   17b40:	d5 82       	std	Z+5, r13	; 0x05
   17b42:	e6 82       	std	Z+6, r14	; 0x06
   17b44:	f7 82       	std	Z+7, r15	; 0x07
   17b46:	88 e3       	ldi	r24, 0x38	; 56
   17b48:	9f e3       	ldi	r25, 0x3F	; 63
   17b4a:	a0 e0       	ldi	r26, 0x00	; 0
   17b4c:	81 83       	std	Z+1, r24	; 0x01
   17b4e:	92 83       	std	Z+2, r25	; 0x02
   17b50:	a3 83       	std	Z+3, r26	; 0x03
   17b52:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17b56:	ce 01       	movw	r24, r28
   17b58:	ad b7       	in	r26, 0x3d	; 61
   17b5a:	be b7       	in	r27, 0x3e	; 62
   17b5c:	17 96       	adiw	r26, 0x07	; 7
   17b5e:	0f b6       	in	r0, 0x3f	; 63
   17b60:	f8 94       	cli
   17b62:	be bf       	out	0x3e, r27	; 62
   17b64:	0f be       	out	0x3f, r0	; 63
   17b66:	ad bf       	out	0x3d, r26	; 61
   17b68:	df 91       	pop	r29
   17b6a:	cf 91       	pop	r28
   17b6c:	ff 90       	pop	r15
   17b6e:	ef 90       	pop	r14
   17b70:	df 90       	pop	r13
   17b72:	cf 90       	pop	r12
   17b74:	08 95       	ret

00017b76 <lif_free>:
   17b76:	00 d0       	rcall	.+0      	; 0x17b78 <lif_free+0x2>
   17b78:	1f 92       	push	r1
   17b7a:	00 97       	sbiw	r24, 0x00	; 0
   17b7c:	59 f4       	brne	.+22     	; 0x17b94 <lif_free+0x1e>
   17b7e:	80 e2       	ldi	r24, 0x20	; 32
   17b80:	9f e3       	ldi	r25, 0x3F	; 63
   17b82:	a0 e0       	ldi	r26, 0x00	; 0
   17b84:	ed b7       	in	r30, 0x3d	; 61
   17b86:	fe b7       	in	r31, 0x3e	; 62
   17b88:	81 83       	std	Z+1, r24	; 0x01
   17b8a:	92 83       	std	Z+2, r25	; 0x02
   17b8c:	a3 83       	std	Z+3, r26	; 0x03
   17b8e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17b92:	02 c0       	rjmp	.+4      	; 0x17b98 <lif_free+0x22>
   17b94:	0e 94 24 28 	call	0x5048	; 0x5048 <safefree>
   17b98:	0f 90       	pop	r0
   17b9a:	0f 90       	pop	r0
   17b9c:	0f 90       	pop	r0
   17b9e:	08 95       	ret

00017ba0 <lif_stralloc>:
   17ba0:	0f 93       	push	r16
   17ba2:	1f 93       	push	r17
   17ba4:	cf 93       	push	r28
   17ba6:	df 93       	push	r29
   17ba8:	ec 01       	movw	r28, r24
   17baa:	fc 01       	movw	r30, r24
   17bac:	01 90       	ld	r0, Z+
   17bae:	00 20       	and	r0, r0
   17bb0:	e9 f7       	brne	.-6      	; 0x17bac <lif_stralloc+0xc>
   17bb2:	bf 01       	movw	r22, r30
   17bb4:	68 1b       	sub	r22, r24
   17bb6:	79 0b       	sbc	r23, r25
   17bb8:	6d 5f       	subi	r22, 0xFD	; 253
   17bba:	7f 4f       	sbci	r23, 0xFF	; 255
   17bbc:	07 2e       	mov	r0, r23
   17bbe:	00 0c       	add	r0, r0
   17bc0:	88 0b       	sbc	r24, r24
   17bc2:	99 0b       	sbc	r25, r25
   17bc4:	a2 df       	rcall	.-188    	; 0x17b0a <lif_calloc>
   17bc6:	8c 01       	movw	r16, r24
   17bc8:	00 97       	sbiw	r24, 0x00	; 0
   17bca:	19 f0       	breq	.+6      	; 0x17bd2 <lif_stralloc+0x32>
   17bcc:	be 01       	movw	r22, r28
   17bce:	0e 94 c4 30 	call	0x6188	; 0x6188 <strcpy>
   17bd2:	c8 01       	movw	r24, r16
   17bd4:	df 91       	pop	r29
   17bd6:	cf 91       	pop	r28
   17bd8:	1f 91       	pop	r17
   17bda:	0f 91       	pop	r16
   17bdc:	08 95       	ret

00017bde <lif_open>:
   17bde:	ef 92       	push	r14
   17be0:	ff 92       	push	r15
   17be2:	0f 93       	push	r16
   17be4:	1f 93       	push	r17
   17be6:	cf 93       	push	r28
   17be8:	df 93       	push	r29
   17bea:	ad b7       	in	r26, 0x3d	; 61
   17bec:	be b7       	in	r27, 0x3e	; 62
   17bee:	17 97       	sbiw	r26, 0x07	; 7
   17bf0:	0f b6       	in	r0, 0x3f	; 63
   17bf2:	f8 94       	cli
   17bf4:	be bf       	out	0x3e, r27	; 62
   17bf6:	0f be       	out	0x3f, r0	; 63
   17bf8:	ad bf       	out	0x3d, r26	; 61
   17bfa:	8c 01       	movw	r16, r24
   17bfc:	7b 01       	movw	r14, r22
   17bfe:	0e 94 10 7e 	call	0xfc20	; 0xfc20 <fopen>
   17c02:	ec 01       	movw	r28, r24
   17c04:	89 2b       	or	r24, r25
   17c06:	71 f4       	brne	.+28     	; 0x17c24 <lif_open+0x46>
   17c08:	ed b7       	in	r30, 0x3d	; 61
   17c0a:	fe b7       	in	r31, 0x3e	; 62
   17c0c:	f7 82       	std	Z+7, r15	; 0x07
   17c0e:	e6 82       	std	Z+6, r14	; 0x06
   17c10:	15 83       	std	Z+5, r17	; 0x05
   17c12:	04 83       	std	Z+4, r16	; 0x04
   17c14:	8b ef       	ldi	r24, 0xFB	; 251
   17c16:	9e e3       	ldi	r25, 0x3E	; 62
   17c18:	a0 e0       	ldi	r26, 0x00	; 0
   17c1a:	81 83       	std	Z+1, r24	; 0x01
   17c1c:	92 83       	std	Z+2, r25	; 0x02
   17c1e:	a3 83       	std	Z+3, r26	; 0x03
   17c20:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17c24:	ce 01       	movw	r24, r28
   17c26:	cd b7       	in	r28, 0x3d	; 61
   17c28:	de b7       	in	r29, 0x3e	; 62
   17c2a:	27 96       	adiw	r28, 0x07	; 7
   17c2c:	e6 e0       	ldi	r30, 0x06	; 6
   17c2e:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00017c32 <lif_stat>:
   17c32:	0f 93       	push	r16
   17c34:	1f 93       	push	r17
   17c36:	cf 93       	push	r28
   17c38:	df 93       	push	r29
   17c3a:	00 d0       	rcall	.+0      	; 0x17c3c <lif_stat+0xa>
   17c3c:	00 d0       	rcall	.+0      	; 0x17c3e <lif_stat+0xc>
   17c3e:	1f 92       	push	r1
   17c40:	8c 01       	movw	r16, r24
   17c42:	d6 2f       	mov	r29, r22
   17c44:	c7 2f       	mov	r28, r23
   17c46:	0e 94 15 79 	call	0xf22a	; 0xf22a <stat>
   17c4a:	97 ff       	sbrs	r25, 7
   17c4c:	0f c0       	rjmp	.+30     	; 0x17c6c <lif_stat+0x3a>
   17c4e:	ed b7       	in	r30, 0x3d	; 61
   17c50:	fe b7       	in	r31, 0x3e	; 62
   17c52:	15 83       	std	Z+5, r17	; 0x05
   17c54:	04 83       	std	Z+4, r16	; 0x04
   17c56:	82 ee       	ldi	r24, 0xE2	; 226
   17c58:	9e e3       	ldi	r25, 0x3E	; 62
   17c5a:	a0 e0       	ldi	r26, 0x00	; 0
   17c5c:	81 83       	std	Z+1, r24	; 0x01
   17c5e:	92 83       	std	Z+2, r25	; 0x02
   17c60:	a3 83       	std	Z+3, r26	; 0x03
   17c62:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17c66:	80 e0       	ldi	r24, 0x00	; 0
   17c68:	90 e0       	ldi	r25, 0x00	; 0
   17c6a:	02 c0       	rjmp	.+4      	; 0x17c70 <lif_stat+0x3e>
   17c6c:	8d 2f       	mov	r24, r29
   17c6e:	9c 2f       	mov	r25, r28
   17c70:	cd b7       	in	r28, 0x3d	; 61
   17c72:	de b7       	in	r29, 0x3e	; 62
   17c74:	25 96       	adiw	r28, 0x05	; 5
   17c76:	e4 e0       	ldi	r30, 0x04	; 4
   17c78:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00017c7c <lif_seek_msg>:
   17c7c:	a9 e0       	ldi	r26, 0x09	; 9
   17c7e:	b0 e0       	ldi	r27, 0x00	; 0
   17c80:	e4 e4       	ldi	r30, 0x44	; 68
   17c82:	fe eb       	ldi	r31, 0xBE	; 190
   17c84:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
   17c88:	ec 01       	movw	r28, r24
   17c8a:	6a 01       	movw	r12, r20
   17c8c:	7b 01       	movw	r14, r22
   17c8e:	89 01       	movw	r16, r18
   17c90:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <ftell>
   17c94:	6c 15       	cp	r22, r12
   17c96:	7d 05       	cpc	r23, r13
   17c98:	8e 05       	cpc	r24, r14
   17c9a:	9f 05       	cpc	r25, r15
   17c9c:	19 f4       	brne	.+6      	; 0x17ca4 <lif_seek_msg+0x28>
   17c9e:	81 e0       	ldi	r24, 0x01	; 1
   17ca0:	90 e0       	ldi	r25, 0x00	; 0
   17ca2:	1b c0       	rjmp	.+54     	; 0x17cda <lif_seek_msg+0x5e>
   17ca4:	20 e0       	ldi	r18, 0x00	; 0
   17ca6:	30 e0       	ldi	r19, 0x00	; 0
   17ca8:	b7 01       	movw	r22, r14
   17caa:	a6 01       	movw	r20, r12
   17cac:	ce 01       	movw	r24, r28
   17cae:	0e 94 d2 7a 	call	0xf5a4	; 0xf5a4 <fseek>
   17cb2:	97 ff       	sbrs	r25, 7
   17cb4:	f4 cf       	rjmp	.-24     	; 0x17c9e <lif_seek_msg+0x22>
   17cb6:	ed b7       	in	r30, 0x3d	; 61
   17cb8:	fe b7       	in	r31, 0x3e	; 62
   17cba:	c6 82       	std	Z+6, r12	; 0x06
   17cbc:	d7 82       	std	Z+7, r13	; 0x07
   17cbe:	e0 86       	std	Z+8, r14	; 0x08
   17cc0:	f1 86       	std	Z+9, r15	; 0x09
   17cc2:	15 83       	std	Z+5, r17	; 0x05
   17cc4:	04 83       	std	Z+4, r16	; 0x04
   17cc6:	81 ec       	ldi	r24, 0xC1	; 193
   17cc8:	9e e3       	ldi	r25, 0x3E	; 62
   17cca:	a0 e0       	ldi	r26, 0x00	; 0
   17ccc:	81 83       	std	Z+1, r24	; 0x01
   17cce:	92 83       	std	Z+2, r25	; 0x02
   17cd0:	a3 83       	std	Z+3, r26	; 0x03
   17cd2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17cd6:	80 e0       	ldi	r24, 0x00	; 0
   17cd8:	90 e0       	ldi	r25, 0x00	; 0
   17cda:	cd b7       	in	r28, 0x3d	; 61
   17cdc:	de b7       	in	r29, 0x3e	; 62
   17cde:	29 96       	adiw	r28, 0x09	; 9
   17ce0:	e8 e0       	ldi	r30, 0x08	; 8
   17ce2:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

00017ce6 <lif_read>:
   17ce6:	af e0       	ldi	r26, 0x0F	; 15
   17ce8:	b0 e0       	ldi	r27, 0x00	; 0
   17cea:	e9 e7       	ldi	r30, 0x79	; 121
   17cec:	fe eb       	ldi	r31, 0xBE	; 190
   17cee:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
   17cf2:	ec 01       	movw	r28, r24
   17cf4:	7b 01       	movw	r14, r22
   17cf6:	49 01       	movw	r8, r18
   17cf8:	5a 01       	movw	r10, r20
   17cfa:	28 81       	ld	r18, Y
   17cfc:	39 81       	ldd	r19, Y+1	; 0x01
   17cfe:	b5 01       	movw	r22, r10
   17d00:	a4 01       	movw	r20, r8
   17d02:	8a 81       	ldd	r24, Y+2	; 0x02
   17d04:	9b 81       	ldd	r25, Y+3	; 0x03
   17d06:	ba df       	rcall	.-140    	; 0x17c7c <lif_seek_msg>
   17d08:	89 2b       	or	r24, r25
   17d0a:	91 f1       	breq	.+100    	; 0x17d70 <lif_read+0x8a>
   17d0c:	2a 81       	ldd	r18, Y+2	; 0x02
   17d0e:	3b 81       	ldd	r19, Y+3	; 0x03
   17d10:	a8 01       	movw	r20, r16
   17d12:	61 e0       	ldi	r22, 0x01	; 1
   17d14:	70 e0       	ldi	r23, 0x00	; 0
   17d16:	c7 01       	movw	r24, r14
   17d18:	0e 94 66 7b 	call	0xf6cc	; 0xf6cc <fread>
   17d1c:	6c 01       	movw	r12, r24
   17d1e:	e1 2c       	mov	r14, r1
   17d20:	f1 2c       	mov	r15, r1
   17d22:	b8 01       	movw	r22, r16
   17d24:	01 2e       	mov	r0, r17
   17d26:	00 0c       	add	r0, r0
   17d28:	88 0b       	sbc	r24, r24
   17d2a:	99 0b       	sbc	r25, r25
   17d2c:	c6 16       	cp	r12, r22
   17d2e:	d7 06       	cpc	r13, r23
   17d30:	e8 06       	cpc	r14, r24
   17d32:	f9 06       	cpc	r15, r25
   17d34:	19 f1       	breq	.+70     	; 0x17d7c <lif_read+0x96>
   17d36:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17d3a:	81 ff       	sbrs	r24, 1
   17d3c:	1d c0       	rjmp	.+58     	; 0x17d78 <lif_read+0x92>
   17d3e:	ed b7       	in	r30, 0x3d	; 61
   17d40:	fe b7       	in	r31, 0x3e	; 62
   17d42:	17 87       	std	Z+15, r17	; 0x0f
   17d44:	06 87       	std	Z+14, r16	; 0x0e
   17d46:	c2 86       	std	Z+10, r12	; 0x0a
   17d48:	d3 86       	std	Z+11, r13	; 0x0b
   17d4a:	e4 86       	std	Z+12, r14	; 0x0c
   17d4c:	f5 86       	std	Z+13, r15	; 0x0d
   17d4e:	86 82       	std	Z+6, r8	; 0x06
   17d50:	97 82       	std	Z+7, r9	; 0x07
   17d52:	a0 86       	std	Z+8, r10	; 0x08
   17d54:	b1 86       	std	Z+9, r11	; 0x09
   17d56:	88 81       	ld	r24, Y
   17d58:	99 81       	ldd	r25, Y+1	; 0x01
   17d5a:	95 83       	std	Z+5, r25	; 0x05
   17d5c:	84 83       	std	Z+4, r24	; 0x04
   17d5e:	85 e8       	ldi	r24, 0x85	; 133
   17d60:	9e e3       	ldi	r25, 0x3E	; 62
   17d62:	a0 e0       	ldi	r26, 0x00	; 0
   17d64:	81 83       	std	Z+1, r24	; 0x01
   17d66:	92 83       	std	Z+2, r25	; 0x02
   17d68:	a3 83       	std	Z+3, r26	; 0x03
   17d6a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17d6e:	04 c0       	rjmp	.+8      	; 0x17d78 <lif_read+0x92>
   17d70:	60 e0       	ldi	r22, 0x00	; 0
   17d72:	70 e0       	ldi	r23, 0x00	; 0
   17d74:	cb 01       	movw	r24, r22
   17d76:	02 c0       	rjmp	.+4      	; 0x17d7c <lif_read+0x96>
   17d78:	c7 01       	movw	r24, r14
   17d7a:	b6 01       	movw	r22, r12
   17d7c:	cd b7       	in	r28, 0x3d	; 61
   17d7e:	de b7       	in	r29, 0x3e	; 62
   17d80:	2f 96       	adiw	r28, 0x0f	; 15
   17d82:	ec e0       	ldi	r30, 0x0C	; 12
   17d84:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

00017d88 <lif_write>:
   17d88:	8f 92       	push	r8
   17d8a:	9f 92       	push	r9
   17d8c:	af 92       	push	r10
   17d8e:	bf 92       	push	r11
   17d90:	ef 92       	push	r14
   17d92:	ff 92       	push	r15
   17d94:	0f 93       	push	r16
   17d96:	1f 93       	push	r17
   17d98:	cf 93       	push	r28
   17d9a:	df 93       	push	r29
   17d9c:	ad b7       	in	r26, 0x3d	; 61
   17d9e:	be b7       	in	r27, 0x3e	; 62
   17da0:	1d 97       	sbiw	r26, 0x0d	; 13
   17da2:	0f b6       	in	r0, 0x3f	; 63
   17da4:	f8 94       	cli
   17da6:	be bf       	out	0x3e, r27	; 62
   17da8:	0f be       	out	0x3f, r0	; 63
   17daa:	ad bf       	out	0x3d, r26	; 61
   17dac:	7c 01       	movw	r14, r24
   17dae:	eb 01       	movw	r28, r22
   17db0:	49 01       	movw	r8, r18
   17db2:	5a 01       	movw	r10, r20
   17db4:	fc 01       	movw	r30, r24
   17db6:	20 81       	ld	r18, Z
   17db8:	31 81       	ldd	r19, Z+1	; 0x01
   17dba:	b5 01       	movw	r22, r10
   17dbc:	a4 01       	movw	r20, r8
   17dbe:	82 81       	ldd	r24, Z+2	; 0x02
   17dc0:	93 81       	ldd	r25, Z+3	; 0x03
   17dc2:	5c df       	rcall	.-328    	; 0x17c7c <lif_seek_msg>
   17dc4:	00 97       	sbiw	r24, 0x00	; 0
   17dc6:	71 f1       	breq	.+92     	; 0x17e24 <lif_write+0x9c>
   17dc8:	f7 01       	movw	r30, r14
   17dca:	22 81       	ldd	r18, Z+2	; 0x02
   17dcc:	33 81       	ldd	r19, Z+3	; 0x03
   17dce:	a8 01       	movw	r20, r16
   17dd0:	61 e0       	ldi	r22, 0x01	; 1
   17dd2:	70 e0       	ldi	r23, 0x00	; 0
   17dd4:	ce 01       	movw	r24, r28
   17dd6:	0e 94 38 7c 	call	0xf870	; 0xf870 <fwrite>
   17dda:	ec 01       	movw	r28, r24
   17ddc:	08 17       	cp	r16, r24
   17dde:	19 07       	cpc	r17, r25
   17de0:	f1 f0       	breq	.+60     	; 0x17e1e <lif_write+0x96>
   17de2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17de6:	81 ff       	sbrs	r24, 1
   17de8:	1c c0       	rjmp	.+56     	; 0x17e22 <lif_write+0x9a>
   17dea:	ed b7       	in	r30, 0x3d	; 61
   17dec:	fe b7       	in	r31, 0x3e	; 62
   17dee:	15 87       	std	Z+13, r17	; 0x0d
   17df0:	04 87       	std	Z+12, r16	; 0x0c
   17df2:	d3 87       	std	Z+11, r29	; 0x0b
   17df4:	c2 87       	std	Z+10, r28	; 0x0a
   17df6:	86 82       	std	Z+6, r8	; 0x06
   17df8:	97 82       	std	Z+7, r9	; 0x07
   17dfa:	a0 86       	std	Z+8, r10	; 0x08
   17dfc:	b1 86       	std	Z+9, r11	; 0x09
   17dfe:	f7 01       	movw	r30, r14
   17e00:	80 81       	ld	r24, Z
   17e02:	91 81       	ldd	r25, Z+1	; 0x01
   17e04:	ed b7       	in	r30, 0x3d	; 61
   17e06:	fe b7       	in	r31, 0x3e	; 62
   17e08:	95 83       	std	Z+5, r25	; 0x05
   17e0a:	84 83       	std	Z+4, r24	; 0x04
   17e0c:	88 e4       	ldi	r24, 0x48	; 72
   17e0e:	9e e3       	ldi	r25, 0x3E	; 62
   17e10:	a0 e0       	ldi	r26, 0x00	; 0
   17e12:	81 83       	std	Z+1, r24	; 0x01
   17e14:	92 83       	std	Z+2, r25	; 0x02
   17e16:	a3 83       	std	Z+3, r26	; 0x03
   17e18:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   17e1c:	02 c0       	rjmp	.+4      	; 0x17e22 <lif_write+0x9a>
   17e1e:	c8 01       	movw	r24, r16
   17e20:	01 c0       	rjmp	.+2      	; 0x17e24 <lif_write+0x9c>
   17e22:	ce 01       	movw	r24, r28
   17e24:	ad b7       	in	r26, 0x3d	; 61
   17e26:	be b7       	in	r27, 0x3e	; 62
   17e28:	1d 96       	adiw	r26, 0x0d	; 13
   17e2a:	0f b6       	in	r0, 0x3f	; 63
   17e2c:	f8 94       	cli
   17e2e:	be bf       	out	0x3e, r27	; 62
   17e30:	0f be       	out	0x3f, r0	; 63
   17e32:	ad bf       	out	0x3d, r26	; 61
   17e34:	df 91       	pop	r29
   17e36:	cf 91       	pop	r28
   17e38:	1f 91       	pop	r17
   17e3a:	0f 91       	pop	r16
   17e3c:	ff 90       	pop	r15
   17e3e:	ef 90       	pop	r14
   17e40:	bf 90       	pop	r11
   17e42:	af 90       	pop	r10
   17e44:	9f 90       	pop	r9
   17e46:	8f 90       	pop	r8
   17e48:	08 95       	ret

00017e4a <lif_chars>:
   17e4a:	80 32       	cpi	r24, 0x20	; 32
   17e4c:	91 05       	cpc	r25, r1
   17e4e:	e1 f0       	breq	.+56     	; 0x17e88 <lif_chars+0x3e>
   17e50:	9c 01       	movw	r18, r24
   17e52:	21 56       	subi	r18, 0x61	; 97
   17e54:	31 09       	sbc	r19, r1
   17e56:	2a 31       	cpi	r18, 0x1A	; 26
   17e58:	31 05       	cpc	r19, r1
   17e5a:	10 f4       	brcc	.+4      	; 0x17e60 <lif_chars+0x16>
   17e5c:	80 97       	sbiw	r24, 0x20	; 32
   17e5e:	08 95       	ret
   17e60:	9c 01       	movw	r18, r24
   17e62:	21 54       	subi	r18, 0x41	; 65
   17e64:	31 09       	sbc	r19, r1
   17e66:	2a 31       	cpi	r18, 0x1A	; 26
   17e68:	31 05       	cpc	r19, r1
   17e6a:	c8 f0       	brcs	.+50     	; 0x17e9e <lif_chars+0x54>
   17e6c:	16 16       	cp	r1, r22
   17e6e:	17 06       	cpc	r1, r23
   17e70:	74 f4       	brge	.+28     	; 0x17e8e <lif_chars+0x44>
   17e72:	2f 5e       	subi	r18, 0xEF	; 239
   17e74:	3f 4f       	sbci	r19, 0xFF	; 255
   17e76:	2a 30       	cpi	r18, 0x0A	; 10
   17e78:	31 05       	cpc	r19, r1
   17e7a:	88 f0       	brcs	.+34     	; 0x17e9e <lif_chars+0x54>
   17e7c:	8f 35       	cpi	r24, 0x5F	; 95
   17e7e:	91 05       	cpc	r25, r1
   17e80:	49 f0       	breq	.+18     	; 0x17e94 <lif_chars+0x4a>
   17e82:	8d 97       	sbiw	r24, 0x2d	; 45
   17e84:	21 f4       	brne	.+8      	; 0x17e8e <lif_chars+0x44>
   17e86:	09 c0       	rjmp	.+18     	; 0x17e9a <lif_chars+0x50>
   17e88:	80 e2       	ldi	r24, 0x20	; 32
   17e8a:	90 e0       	ldi	r25, 0x00	; 0
   17e8c:	08 95       	ret
   17e8e:	80 e0       	ldi	r24, 0x00	; 0
   17e90:	90 e0       	ldi	r25, 0x00	; 0
   17e92:	08 95       	ret
   17e94:	8f e5       	ldi	r24, 0x5F	; 95
   17e96:	90 e0       	ldi	r25, 0x00	; 0
   17e98:	08 95       	ret
   17e9a:	8d e2       	ldi	r24, 0x2D	; 45
   17e9c:	90 e0       	ldi	r25, 0x00	; 0
   17e9e:	08 95       	ret

00017ea0 <lif_B2S>:
   17ea0:	a0 e0       	ldi	r26, 0x00	; 0
   17ea2:	b0 e0       	ldi	r27, 0x00	; 0
   17ea4:	e6 e5       	ldi	r30, 0x56	; 86
   17ea6:	ff eb       	ldi	r31, 0xBF	; 191
   17ea8:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
   17eac:	5c 01       	movw	r10, r24
   17eae:	6b 01       	movw	r12, r22
   17eb0:	ea 01       	movw	r28, r20
   17eb2:	4c 01       	movw	r8, r24
   17eb4:	ee 24       	eor	r14, r14
   17eb6:	e3 94       	inc	r14
   17eb8:	f1 2c       	mov	r15, r1
   17eba:	00 e0       	ldi	r16, 0x00	; 0
   17ebc:	10 e0       	ldi	r17, 0x00	; 0
   17ebe:	0c 17       	cp	r16, r28
   17ec0:	1d 07       	cpc	r17, r29
   17ec2:	6c f4       	brge	.+26     	; 0x17ede <lif_B2S+0x3e>
   17ec4:	f4 01       	movw	r30, r8
   17ec6:	81 91       	ld	r24, Z+
   17ec8:	4f 01       	movw	r8, r30
   17eca:	b8 01       	movw	r22, r16
   17ecc:	90 e0       	ldi	r25, 0x00	; 0
   17ece:	bd df       	rcall	.-134    	; 0x17e4a <lif_chars>
   17ed0:	89 2b       	or	r24, r25
   17ed2:	11 f4       	brne	.+4      	; 0x17ed8 <lif_B2S+0x38>
   17ed4:	e1 2c       	mov	r14, r1
   17ed6:	f1 2c       	mov	r15, r1
   17ed8:	0f 5f       	subi	r16, 0xFF	; 255
   17eda:	1f 4f       	sbci	r17, 0xFF	; 255
   17edc:	f0 cf       	rjmp	.-32     	; 0x17ebe <lif_B2S+0x1e>
   17ede:	d6 01       	movw	r26, r12
   17ee0:	f5 01       	movw	r30, r10
   17ee2:	cf 01       	movw	r24, r30
   17ee4:	8a 19       	sub	r24, r10
   17ee6:	9b 09       	sbc	r25, r11
   17ee8:	8c 17       	cp	r24, r28
   17eea:	9d 07       	cpc	r25, r29
   17eec:	1c f4       	brge	.+6      	; 0x17ef4 <lif_B2S+0x54>
   17eee:	81 91       	ld	r24, Z+
   17ef0:	8d 93       	st	X+, r24
   17ef2:	f7 cf       	rjmp	.-18     	; 0x17ee2 <lif_B2S+0x42>
   17ef4:	d7 ff       	sbrs	r29, 7
   17ef6:	02 c0       	rjmp	.+4      	; 0x17efc <lif_B2S+0x5c>
   17ef8:	c0 e0       	ldi	r28, 0x00	; 0
   17efa:	d0 e0       	ldi	r29, 0x00	; 0
   17efc:	cc 0d       	add	r28, r12
   17efe:	dd 1d       	adc	r29, r13
   17f00:	18 82       	st	Y, r1
   17f02:	c6 01       	movw	r24, r12
   17f04:	0e 94 a2 31 	call	0x6344	; 0x6344 <trim_tail>
   17f08:	c7 01       	movw	r24, r14
   17f0a:	cd b7       	in	r28, 0x3d	; 61
   17f0c:	de b7       	in	r29, 0x3e	; 62
   17f0e:	ec e0       	ldi	r30, 0x0C	; 12
   17f10:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

00017f14 <lif_checkname>:
   17f14:	ef 92       	push	r14
   17f16:	ff 92       	push	r15
   17f18:	0f 93       	push	r16
   17f1a:	1f 93       	push	r17
   17f1c:	cf 93       	push	r28
   17f1e:	df 93       	push	r29
   17f20:	7c 01       	movw	r14, r24
   17f22:	ec 01       	movw	r28, r24
   17f24:	01 e0       	ldi	r16, 0x01	; 1
   17f26:	10 e0       	ldi	r17, 0x00	; 0
   17f28:	be 01       	movw	r22, r28
   17f2a:	6e 19       	sub	r22, r14
   17f2c:	7f 09       	sbc	r23, r15
   17f2e:	89 91       	ld	r24, Y+
   17f30:	88 23       	and	r24, r24
   17f32:	39 f0       	breq	.+14     	; 0x17f42 <lif_checkname+0x2e>
   17f34:	90 e0       	ldi	r25, 0x00	; 0
   17f36:	89 df       	rcall	.-238    	; 0x17e4a <lif_chars>
   17f38:	89 2b       	or	r24, r25
   17f3a:	b1 f7       	brne	.-20     	; 0x17f28 <lif_checkname+0x14>
   17f3c:	00 e0       	ldi	r16, 0x00	; 0
   17f3e:	10 e0       	ldi	r17, 0x00	; 0
   17f40:	f3 cf       	rjmp	.-26     	; 0x17f28 <lif_checkname+0x14>
   17f42:	c8 01       	movw	r24, r16
   17f44:	cd b7       	in	r28, 0x3d	; 61
   17f46:	de b7       	in	r29, 0x3e	; 62
   17f48:	e6 e0       	ldi	r30, 0x06	; 6
   17f4a:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

00017f4e <lif_S2B>:
   17f4e:	fb 01       	movw	r30, r22
   17f50:	dc 01       	movw	r26, r24
   17f52:	20 e0       	ldi	r18, 0x00	; 0
   17f54:	30 e0       	ldi	r19, 0x00	; 0
   17f56:	61 91       	ld	r22, Z+
   17f58:	61 11       	cpse	r22, r1
   17f5a:	05 c0       	rjmp	.+10     	; 0x17f66 <lif_S2B+0x18>
   17f5c:	fc 01       	movw	r30, r24
   17f5e:	e2 0f       	add	r30, r18
   17f60:	f3 1f       	adc	r31, r19
   17f62:	60 e2       	ldi	r22, 0x20	; 32
   17f64:	08 c0       	rjmp	.+16     	; 0x17f76 <lif_S2B+0x28>
   17f66:	24 17       	cp	r18, r20
   17f68:	35 07       	cpc	r19, r21
   17f6a:	24 f4       	brge	.+8      	; 0x17f74 <lif_S2B+0x26>
   17f6c:	6d 93       	st	X+, r22
   17f6e:	2f 5f       	subi	r18, 0xFF	; 255
   17f70:	3f 4f       	sbci	r19, 0xFF	; 255
   17f72:	f1 cf       	rjmp	.-30     	; 0x17f56 <lif_S2B+0x8>
   17f74:	08 95       	ret
   17f76:	9f 01       	movw	r18, r30
   17f78:	28 1b       	sub	r18, r24
   17f7a:	39 0b       	sbc	r19, r25
   17f7c:	24 17       	cp	r18, r20
   17f7e:	35 07       	cpc	r19, r21
   17f80:	14 f4       	brge	.+4      	; 0x17f86 <lif_S2B+0x38>
   17f82:	61 93       	st	Z+, r22
   17f84:	f8 cf       	rjmp	.-16     	; 0x17f76 <lif_S2B+0x28>
   17f86:	08 95       	ret

00017f88 <lif_fixname>:
   17f88:	a0 e0       	ldi	r26, 0x00	; 0
   17f8a:	b0 e0       	ldi	r27, 0x00	; 0
   17f8c:	ea ec       	ldi	r30, 0xCA	; 202
   17f8e:	ff eb       	ldi	r31, 0xBF	; 191
   17f90:	0c 94 9a e0 	jmp	0x1c134	; 0x1c134 <__prologue_saves__+0x12>
   17f94:	8c 01       	movw	r16, r24
   17f96:	cb 01       	movw	r24, r22
   17f98:	7a 01       	movw	r14, r20
   17f9a:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <basename>
   17f9e:	6c 01       	movw	r12, r24
   17fa0:	e8 01       	movw	r28, r16
   17fa2:	80 e2       	ldi	r24, 0x20	; 32
   17fa4:	b8 2e       	mov	r11, r24
   17fa6:	be 01       	movw	r22, r28
   17fa8:	60 1b       	sub	r22, r16
   17faa:	71 0b       	sbc	r23, r17
   17fac:	f6 01       	movw	r30, r12
   17fae:	81 91       	ld	r24, Z+
   17fb0:	6f 01       	movw	r12, r30
   17fb2:	81 11       	cpse	r24, r1
   17fb4:	02 c0       	rjmp	.+4      	; 0x17fba <lif_fixname+0x32>
   17fb6:	20 e2       	ldi	r18, 0x20	; 32
   17fb8:	0e c0       	rjmp	.+28     	; 0x17fd6 <lif_fixname+0x4e>
   17fba:	1e 14       	cp	r1, r14
   17fbc:	1f 04       	cpc	r1, r15
   17fbe:	dc f7       	brge	.-10     	; 0x17fb6 <lif_fixname+0x2e>
   17fc0:	8e 32       	cpi	r24, 0x2E	; 46
   17fc2:	c9 f3       	breq	.-14     	; 0x17fb6 <lif_fixname+0x2e>
   17fc4:	90 e0       	ldi	r25, 0x00	; 0
   17fc6:	41 df       	rcall	.-382    	; 0x17e4a <lif_chars>
   17fc8:	88 23       	and	r24, r24
   17fca:	11 f0       	breq	.+4      	; 0x17fd0 <lif_fixname+0x48>
   17fcc:	88 83       	st	Y, r24
   17fce:	01 c0       	rjmp	.+2      	; 0x17fd2 <lif_fixname+0x4a>
   17fd0:	b8 82       	st	Y, r11
   17fd2:	21 96       	adiw	r28, 0x01	; 1
   17fd4:	e8 cf       	rjmp	.-48     	; 0x17fa6 <lif_fixname+0x1e>
   17fd6:	ce 01       	movw	r24, r28
   17fd8:	80 1b       	sub	r24, r16
   17fda:	91 0b       	sbc	r25, r17
   17fdc:	8e 15       	cp	r24, r14
   17fde:	9f 05       	cpc	r25, r15
   17fe0:	14 f4       	brge	.+4      	; 0x17fe6 <lif_fixname+0x5e>
   17fe2:	29 93       	st	Y+, r18
   17fe4:	f8 cf       	rjmp	.-16     	; 0x17fd6 <lif_fixname+0x4e>
   17fe6:	18 82       	st	Y, r1
   17fe8:	f8 01       	movw	r30, r16
   17fea:	01 90       	ld	r0, Z+
   17fec:	00 20       	and	r0, r0
   17fee:	e9 f7       	brne	.-6      	; 0x17fea <lif_fixname+0x62>
   17ff0:	cf 01       	movw	r24, r30
   17ff2:	01 97       	sbiw	r24, 0x01	; 1
   17ff4:	80 1b       	sub	r24, r16
   17ff6:	91 0b       	sbc	r25, r17
   17ff8:	cd b7       	in	r28, 0x3d	; 61
   17ffa:	de b7       	in	r29, 0x3e	; 62
   17ffc:	e9 e0       	ldi	r30, 0x09	; 9
   17ffe:	0c 94 b6 e0 	jmp	0x1c16c	; 0x1c16c <__epilogue_restores__+0x12>

00018002 <lif_vol2str>:
   18002:	ef 92       	push	r14
   18004:	ff 92       	push	r15
   18006:	0f 93       	push	r16
   18008:	1f 93       	push	r17
   1800a:	cf 93       	push	r28
   1800c:	df 93       	push	r29
   1800e:	7c 01       	movw	r14, r24
   18010:	eb 01       	movw	r28, r22
   18012:	fc 01       	movw	r30, r24
   18014:	04 a1       	ldd	r16, Z+36	; 0x24
   18016:	15 a1       	ldd	r17, Z+37	; 0x25
   18018:	20 e0       	ldi	r18, 0x00	; 0
   1801a:	30 e0       	ldi	r19, 0x00	; 0
   1801c:	42 e0       	ldi	r20, 0x02	; 2
   1801e:	50 e0       	ldi	r21, 0x00	; 0
   18020:	60 e0       	ldi	r22, 0x00	; 0
   18022:	70 e0       	ldi	r23, 0x00	; 0
   18024:	ce 01       	movw	r24, r28
   18026:	e8 dc       	rcall	.-1584   	; 0x179f8 <V2B_MSB>
   18028:	b7 01       	movw	r22, r14
   1802a:	6a 5d       	subi	r22, 0xDA	; 218
   1802c:	7f 4f       	sbci	r23, 0xFF	; 255
   1802e:	46 e0       	ldi	r20, 0x06	; 6
   18030:	50 e0       	ldi	r21, 0x00	; 0
   18032:	ce 01       	movw	r24, r28
   18034:	02 96       	adiw	r24, 0x02	; 2
   18036:	8b df       	rcall	.-234    	; 0x17f4e <lif_S2B>
   18038:	f7 01       	movw	r30, r14
   1803a:	05 a5       	ldd	r16, Z+45	; 0x2d
   1803c:	16 a5       	ldd	r17, Z+46	; 0x2e
   1803e:	27 a5       	ldd	r18, Z+47	; 0x2f
   18040:	30 a9       	ldd	r19, Z+48	; 0x30
   18042:	44 e0       	ldi	r20, 0x04	; 4
   18044:	50 e0       	ldi	r21, 0x00	; 0
   18046:	68 e0       	ldi	r22, 0x08	; 8
   18048:	70 e0       	ldi	r23, 0x00	; 0
   1804a:	ce 01       	movw	r24, r28
   1804c:	d5 dc       	rcall	.-1622   	; 0x179f8 <V2B_MSB>
   1804e:	f7 01       	movw	r30, r14
   18050:	01 a9       	ldd	r16, Z+49	; 0x31
   18052:	12 a9       	ldd	r17, Z+50	; 0x32
   18054:	20 e0       	ldi	r18, 0x00	; 0
   18056:	30 e0       	ldi	r19, 0x00	; 0
   18058:	42 e0       	ldi	r20, 0x02	; 2
   1805a:	50 e0       	ldi	r21, 0x00	; 0
   1805c:	6c e0       	ldi	r22, 0x0C	; 12
   1805e:	70 e0       	ldi	r23, 0x00	; 0
   18060:	ce 01       	movw	r24, r28
   18062:	ca dc       	rcall	.-1644   	; 0x179f8 <V2B_MSB>
   18064:	00 e0       	ldi	r16, 0x00	; 0
   18066:	10 e0       	ldi	r17, 0x00	; 0
   18068:	98 01       	movw	r18, r16
   1806a:	42 e0       	ldi	r20, 0x02	; 2
   1806c:	50 e0       	ldi	r21, 0x00	; 0
   1806e:	6e e0       	ldi	r22, 0x0E	; 14
   18070:	70 e0       	ldi	r23, 0x00	; 0
   18072:	ce 01       	movw	r24, r28
   18074:	c1 dc       	rcall	.-1662   	; 0x179f8 <V2B_MSB>
   18076:	f7 01       	movw	r30, r14
   18078:	05 a9       	ldd	r16, Z+53	; 0x35
   1807a:	16 a9       	ldd	r17, Z+54	; 0x36
   1807c:	27 a9       	ldd	r18, Z+55	; 0x37
   1807e:	30 ad       	ldd	r19, Z+56	; 0x38
   18080:	44 e0       	ldi	r20, 0x04	; 4
   18082:	50 e0       	ldi	r21, 0x00	; 0
   18084:	60 e1       	ldi	r22, 0x10	; 16
   18086:	70 e0       	ldi	r23, 0x00	; 0
   18088:	ce 01       	movw	r24, r28
   1808a:	b6 dc       	rcall	.-1684   	; 0x179f8 <V2B_MSB>
   1808c:	f7 01       	movw	r30, r14
   1808e:	01 ad       	ldd	r16, Z+57	; 0x39
   18090:	12 ad       	ldd	r17, Z+58	; 0x3a
   18092:	20 e0       	ldi	r18, 0x00	; 0
   18094:	30 e0       	ldi	r19, 0x00	; 0
   18096:	42 e0       	ldi	r20, 0x02	; 2
   18098:	50 e0       	ldi	r21, 0x00	; 0
   1809a:	64 e1       	ldi	r22, 0x14	; 20
   1809c:	70 e0       	ldi	r23, 0x00	; 0
   1809e:	ce 01       	movw	r24, r28
   180a0:	ab dc       	rcall	.-1706   	; 0x179f8 <V2B_MSB>
   180a2:	00 e0       	ldi	r16, 0x00	; 0
   180a4:	10 e0       	ldi	r17, 0x00	; 0
   180a6:	98 01       	movw	r18, r16
   180a8:	42 e0       	ldi	r20, 0x02	; 2
   180aa:	50 e0       	ldi	r21, 0x00	; 0
   180ac:	66 e1       	ldi	r22, 0x16	; 22
   180ae:	70 e0       	ldi	r23, 0x00	; 0
   180b0:	ce 01       	movw	r24, r28
   180b2:	a2 dc       	rcall	.-1724   	; 0x179f8 <V2B_MSB>
   180b4:	f7 01       	movw	r30, r14
   180b6:	fd 96       	adiw	r30, 0x3d	; 61
   180b8:	00 81       	ld	r16, Z
   180ba:	11 81       	ldd	r17, Z+1	; 0x01
   180bc:	22 81       	ldd	r18, Z+2	; 0x02
   180be:	33 81       	ldd	r19, Z+3	; 0x03
   180c0:	44 e0       	ldi	r20, 0x04	; 4
   180c2:	50 e0       	ldi	r21, 0x00	; 0
   180c4:	68 e1       	ldi	r22, 0x18	; 24
   180c6:	70 e0       	ldi	r23, 0x00	; 0
   180c8:	ce 01       	movw	r24, r28
   180ca:	96 dc       	rcall	.-1748   	; 0x179f8 <V2B_MSB>
   180cc:	f7 01       	movw	r30, r14
   180ce:	ef 5b       	subi	r30, 0xBF	; 191
   180d0:	ff 4f       	sbci	r31, 0xFF	; 255
   180d2:	00 81       	ld	r16, Z
   180d4:	11 81       	ldd	r17, Z+1	; 0x01
   180d6:	22 81       	ldd	r18, Z+2	; 0x02
   180d8:	33 81       	ldd	r19, Z+3	; 0x03
   180da:	44 e0       	ldi	r20, 0x04	; 4
   180dc:	50 e0       	ldi	r21, 0x00	; 0
   180de:	6c e1       	ldi	r22, 0x1C	; 28
   180e0:	70 e0       	ldi	r23, 0x00	; 0
   180e2:	ce 01       	movw	r24, r28
   180e4:	89 dc       	rcall	.-1774   	; 0x179f8 <V2B_MSB>
   180e6:	f7 01       	movw	r30, r14
   180e8:	eb 5b       	subi	r30, 0xBB	; 187
   180ea:	ff 4f       	sbci	r31, 0xFF	; 255
   180ec:	00 81       	ld	r16, Z
   180ee:	11 81       	ldd	r17, Z+1	; 0x01
   180f0:	22 81       	ldd	r18, Z+2	; 0x02
   180f2:	33 81       	ldd	r19, Z+3	; 0x03
   180f4:	44 e0       	ldi	r20, 0x04	; 4
   180f6:	50 e0       	ldi	r21, 0x00	; 0
   180f8:	60 e2       	ldi	r22, 0x20	; 32
   180fa:	70 e0       	ldi	r23, 0x00	; 0
   180fc:	ce 01       	movw	r24, r28
   180fe:	7c dc       	rcall	.-1800   	; 0x179f8 <V2B_MSB>
   18100:	de 01       	movw	r26, r28
   18102:	94 96       	adiw	r26, 0x24	; 36
   18104:	f7 01       	movw	r30, r14
   18106:	e7 5b       	subi	r30, 0xB7	; 183
   18108:	ff 4f       	sbci	r31, 0xFF	; 255
   1810a:	86 e0       	ldi	r24, 0x06	; 6
   1810c:	01 90       	ld	r0, Z+
   1810e:	0d 92       	st	X+, r0
   18110:	8a 95       	dec	r24
   18112:	e1 f7       	brne	.-8      	; 0x1810c <lif_vol2str+0x10a>
   18114:	cd b7       	in	r28, 0x3d	; 61
   18116:	de b7       	in	r29, 0x3e	; 62
   18118:	e6 e0       	ldi	r30, 0x06	; 6
   1811a:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

0001811e <lif_str2vol>:
   1811e:	0f 93       	push	r16
   18120:	1f 93       	push	r17
   18122:	cf 93       	push	r28
   18124:	df 93       	push	r29
   18126:	8c 01       	movw	r16, r24
   18128:	eb 01       	movw	r28, r22
   1812a:	42 e0       	ldi	r20, 0x02	; 2
   1812c:	50 e0       	ldi	r21, 0x00	; 0
   1812e:	60 e0       	ldi	r22, 0x00	; 0
   18130:	70 e0       	ldi	r23, 0x00	; 0
   18132:	8b dc       	rcall	.-1770   	; 0x17a4a <B2V_MSB>
   18134:	7d a3       	std	Y+37, r23	; 0x25
   18136:	6c a3       	std	Y+36, r22	; 0x24
   18138:	be 01       	movw	r22, r28
   1813a:	6a 5d       	subi	r22, 0xDA	; 218
   1813c:	7f 4f       	sbci	r23, 0xFF	; 255
   1813e:	46 e0       	ldi	r20, 0x06	; 6
   18140:	50 e0       	ldi	r21, 0x00	; 0
   18142:	c8 01       	movw	r24, r16
   18144:	02 96       	adiw	r24, 0x02	; 2
   18146:	ac de       	rcall	.-680    	; 0x17ea0 <lif_B2S>
   18148:	44 e0       	ldi	r20, 0x04	; 4
   1814a:	50 e0       	ldi	r21, 0x00	; 0
   1814c:	68 e0       	ldi	r22, 0x08	; 8
   1814e:	70 e0       	ldi	r23, 0x00	; 0
   18150:	c8 01       	movw	r24, r16
   18152:	7b dc       	rcall	.-1802   	; 0x17a4a <B2V_MSB>
   18154:	6d a7       	std	Y+45, r22	; 0x2d
   18156:	7e a7       	std	Y+46, r23	; 0x2e
   18158:	8f a7       	std	Y+47, r24	; 0x2f
   1815a:	98 ab       	std	Y+48, r25	; 0x30
   1815c:	42 e0       	ldi	r20, 0x02	; 2
   1815e:	50 e0       	ldi	r21, 0x00	; 0
   18160:	6c e0       	ldi	r22, 0x0C	; 12
   18162:	70 e0       	ldi	r23, 0x00	; 0
   18164:	c8 01       	movw	r24, r16
   18166:	71 dc       	rcall	.-1822   	; 0x17a4a <B2V_MSB>
   18168:	7a ab       	std	Y+50, r23	; 0x32
   1816a:	69 ab       	std	Y+49, r22	; 0x31
   1816c:	42 e0       	ldi	r20, 0x02	; 2
   1816e:	50 e0       	ldi	r21, 0x00	; 0
   18170:	6e e0       	ldi	r22, 0x0E	; 14
   18172:	70 e0       	ldi	r23, 0x00	; 0
   18174:	c8 01       	movw	r24, r16
   18176:	69 dc       	rcall	.-1838   	; 0x17a4a <B2V_MSB>
   18178:	7c ab       	std	Y+52, r23	; 0x34
   1817a:	6b ab       	std	Y+51, r22	; 0x33
   1817c:	44 e0       	ldi	r20, 0x04	; 4
   1817e:	50 e0       	ldi	r21, 0x00	; 0
   18180:	60 e1       	ldi	r22, 0x10	; 16
   18182:	70 e0       	ldi	r23, 0x00	; 0
   18184:	c8 01       	movw	r24, r16
   18186:	61 dc       	rcall	.-1854   	; 0x17a4a <B2V_MSB>
   18188:	6d ab       	std	Y+53, r22	; 0x35
   1818a:	7e ab       	std	Y+54, r23	; 0x36
   1818c:	8f ab       	std	Y+55, r24	; 0x37
   1818e:	98 af       	std	Y+56, r25	; 0x38
   18190:	42 e0       	ldi	r20, 0x02	; 2
   18192:	50 e0       	ldi	r21, 0x00	; 0
   18194:	64 e1       	ldi	r22, 0x14	; 20
   18196:	70 e0       	ldi	r23, 0x00	; 0
   18198:	c8 01       	movw	r24, r16
   1819a:	57 dc       	rcall	.-1874   	; 0x17a4a <B2V_MSB>
   1819c:	7a af       	std	Y+58, r23	; 0x3a
   1819e:	69 af       	std	Y+57, r22	; 0x39
   181a0:	42 e0       	ldi	r20, 0x02	; 2
   181a2:	50 e0       	ldi	r21, 0x00	; 0
   181a4:	66 e1       	ldi	r22, 0x16	; 22
   181a6:	70 e0       	ldi	r23, 0x00	; 0
   181a8:	c8 01       	movw	r24, r16
   181aa:	4f dc       	rcall	.-1890   	; 0x17a4a <B2V_MSB>
   181ac:	7c af       	std	Y+60, r23	; 0x3c
   181ae:	6b af       	std	Y+59, r22	; 0x3b
   181b0:	44 e0       	ldi	r20, 0x04	; 4
   181b2:	50 e0       	ldi	r21, 0x00	; 0
   181b4:	68 e1       	ldi	r22, 0x18	; 24
   181b6:	70 e0       	ldi	r23, 0x00	; 0
   181b8:	c8 01       	movw	r24, r16
   181ba:	47 dc       	rcall	.-1906   	; 0x17a4a <B2V_MSB>
   181bc:	fe 01       	movw	r30, r28
   181be:	fd 96       	adiw	r30, 0x3d	; 61
   181c0:	60 83       	st	Z, r22
   181c2:	71 83       	std	Z+1, r23	; 0x01
   181c4:	82 83       	std	Z+2, r24	; 0x02
   181c6:	93 83       	std	Z+3, r25	; 0x03
   181c8:	44 e0       	ldi	r20, 0x04	; 4
   181ca:	50 e0       	ldi	r21, 0x00	; 0
   181cc:	6c e1       	ldi	r22, 0x1C	; 28
   181ce:	70 e0       	ldi	r23, 0x00	; 0
   181d0:	c8 01       	movw	r24, r16
   181d2:	3b dc       	rcall	.-1930   	; 0x17a4a <B2V_MSB>
   181d4:	fe 01       	movw	r30, r28
   181d6:	ef 5b       	subi	r30, 0xBF	; 191
   181d8:	ff 4f       	sbci	r31, 0xFF	; 255
   181da:	60 83       	st	Z, r22
   181dc:	71 83       	std	Z+1, r23	; 0x01
   181de:	82 83       	std	Z+2, r24	; 0x02
   181e0:	93 83       	std	Z+3, r25	; 0x03
   181e2:	44 e0       	ldi	r20, 0x04	; 4
   181e4:	50 e0       	ldi	r21, 0x00	; 0
   181e6:	60 e2       	ldi	r22, 0x20	; 32
   181e8:	70 e0       	ldi	r23, 0x00	; 0
   181ea:	c8 01       	movw	r24, r16
   181ec:	2e dc       	rcall	.-1956   	; 0x17a4a <B2V_MSB>
   181ee:	fe 01       	movw	r30, r28
   181f0:	eb 5b       	subi	r30, 0xBB	; 187
   181f2:	ff 4f       	sbci	r31, 0xFF	; 255
   181f4:	60 83       	st	Z, r22
   181f6:	71 83       	std	Z+1, r23	; 0x01
   181f8:	82 83       	std	Z+2, r24	; 0x02
   181fa:	93 83       	std	Z+3, r25	; 0x03
   181fc:	de 01       	movw	r26, r28
   181fe:	a7 5b       	subi	r26, 0xB7	; 183
   18200:	bf 4f       	sbci	r27, 0xFF	; 255
   18202:	f8 01       	movw	r30, r16
   18204:	b4 96       	adiw	r30, 0x24	; 36
   18206:	86 e0       	ldi	r24, 0x06	; 6
   18208:	01 90       	ld	r0, Z+
   1820a:	0d 92       	st	X+, r0
   1820c:	8a 95       	dec	r24
   1820e:	e1 f7       	brne	.-8      	; 0x18208 <lif_str2vol+0xea>
   18210:	df 91       	pop	r29
   18212:	cf 91       	pop	r28
   18214:	1f 91       	pop	r17
   18216:	0f 91       	pop	r16
   18218:	08 95       	ret

0001821a <lif_dir2str>:
   1821a:	ef 92       	push	r14
   1821c:	ff 92       	push	r15
   1821e:	0f 93       	push	r16
   18220:	1f 93       	push	r17
   18222:	cf 93       	push	r28
   18224:	df 93       	push	r29
   18226:	ec 01       	movw	r28, r24
   18228:	7b 01       	movw	r14, r22
   1822a:	bc 01       	movw	r22, r24
   1822c:	61 5b       	subi	r22, 0xB1	; 177
   1822e:	7f 4f       	sbci	r23, 0xFF	; 255
   18230:	4a e0       	ldi	r20, 0x0A	; 10
   18232:	50 e0       	ldi	r21, 0x00	; 0
   18234:	c7 01       	movw	r24, r14
   18236:	8b de       	rcall	.-746    	; 0x17f4e <lif_S2B>
   18238:	fe 01       	movw	r30, r28
   1823a:	e6 5a       	subi	r30, 0xA6	; 166
   1823c:	ff 4f       	sbci	r31, 0xFF	; 255
   1823e:	00 81       	ld	r16, Z
   18240:	11 81       	ldd	r17, Z+1	; 0x01
   18242:	20 e0       	ldi	r18, 0x00	; 0
   18244:	30 e0       	ldi	r19, 0x00	; 0
   18246:	42 e0       	ldi	r20, 0x02	; 2
   18248:	50 e0       	ldi	r21, 0x00	; 0
   1824a:	6a e0       	ldi	r22, 0x0A	; 10
   1824c:	70 e0       	ldi	r23, 0x00	; 0
   1824e:	c7 01       	movw	r24, r14
   18250:	d3 db       	rcall	.-2138   	; 0x179f8 <V2B_MSB>
   18252:	fe 01       	movw	r30, r28
   18254:	e4 5a       	subi	r30, 0xA4	; 164
   18256:	ff 4f       	sbci	r31, 0xFF	; 255
   18258:	00 81       	ld	r16, Z
   1825a:	11 81       	ldd	r17, Z+1	; 0x01
   1825c:	22 81       	ldd	r18, Z+2	; 0x02
   1825e:	33 81       	ldd	r19, Z+3	; 0x03
   18260:	44 e0       	ldi	r20, 0x04	; 4
   18262:	50 e0       	ldi	r21, 0x00	; 0
   18264:	6c e0       	ldi	r22, 0x0C	; 12
   18266:	70 e0       	ldi	r23, 0x00	; 0
   18268:	c7 01       	movw	r24, r14
   1826a:	c6 db       	rcall	.-2164   	; 0x179f8 <V2B_MSB>
   1826c:	fe 01       	movw	r30, r28
   1826e:	e0 5a       	subi	r30, 0xA0	; 160
   18270:	ff 4f       	sbci	r31, 0xFF	; 255
   18272:	00 81       	ld	r16, Z
   18274:	11 81       	ldd	r17, Z+1	; 0x01
   18276:	22 81       	ldd	r18, Z+2	; 0x02
   18278:	33 81       	ldd	r19, Z+3	; 0x03
   1827a:	44 e0       	ldi	r20, 0x04	; 4
   1827c:	50 e0       	ldi	r21, 0x00	; 0
   1827e:	60 e1       	ldi	r22, 0x10	; 16
   18280:	70 e0       	ldi	r23, 0x00	; 0
   18282:	c7 01       	movw	r24, r14
   18284:	b9 db       	rcall	.-2190   	; 0x179f8 <V2B_MSB>
   18286:	d7 01       	movw	r26, r14
   18288:	54 96       	adiw	r26, 0x14	; 20
   1828a:	fe 01       	movw	r30, r28
   1828c:	ec 59       	subi	r30, 0x9C	; 156
   1828e:	ff 4f       	sbci	r31, 0xFF	; 255
   18290:	86 e0       	ldi	r24, 0x06	; 6
   18292:	01 90       	ld	r0, Z+
   18294:	0d 92       	st	X+, r0
   18296:	8a 95       	dec	r24
   18298:	e1 f7       	brne	.-8      	; 0x18292 <lif_dir2str+0x78>
   1829a:	fe 01       	movw	r30, r28
   1829c:	e6 59       	subi	r30, 0x96	; 150
   1829e:	ff 4f       	sbci	r31, 0xFF	; 255
   182a0:	00 81       	ld	r16, Z
   182a2:	11 81       	ldd	r17, Z+1	; 0x01
   182a4:	20 e0       	ldi	r18, 0x00	; 0
   182a6:	30 e0       	ldi	r19, 0x00	; 0
   182a8:	42 e0       	ldi	r20, 0x02	; 2
   182aa:	50 e0       	ldi	r21, 0x00	; 0
   182ac:	6a e1       	ldi	r22, 0x1A	; 26
   182ae:	70 e0       	ldi	r23, 0x00	; 0
   182b0:	c7 01       	movw	r24, r14
   182b2:	a2 db       	rcall	.-2236   	; 0x179f8 <V2B_MSB>
   182b4:	fe 01       	movw	r30, r28
   182b6:	e4 59       	subi	r30, 0x94	; 148
   182b8:	ff 4f       	sbci	r31, 0xFF	; 255
   182ba:	00 81       	ld	r16, Z
   182bc:	11 81       	ldd	r17, Z+1	; 0x01
   182be:	20 e0       	ldi	r18, 0x00	; 0
   182c0:	30 e0       	ldi	r19, 0x00	; 0
   182c2:	42 e0       	ldi	r20, 0x02	; 2
   182c4:	50 e0       	ldi	r21, 0x00	; 0
   182c6:	6c e1       	ldi	r22, 0x1C	; 28
   182c8:	70 e0       	ldi	r23, 0x00	; 0
   182ca:	c7 01       	movw	r24, r14
   182cc:	a9 db       	rcall	.-2222   	; 0x17a20 <V2B_LSB>
   182ce:	c2 59       	subi	r28, 0x92	; 146
   182d0:	df 4f       	sbci	r29, 0xFF	; 255
   182d2:	08 81       	ld	r16, Y
   182d4:	19 81       	ldd	r17, Y+1	; 0x01
   182d6:	20 e0       	ldi	r18, 0x00	; 0
   182d8:	30 e0       	ldi	r19, 0x00	; 0
   182da:	42 e0       	ldi	r20, 0x02	; 2
   182dc:	50 e0       	ldi	r21, 0x00	; 0
   182de:	6e e1       	ldi	r22, 0x1E	; 30
   182e0:	70 e0       	ldi	r23, 0x00	; 0
   182e2:	c7 01       	movw	r24, r14
   182e4:	9d db       	rcall	.-2246   	; 0x17a20 <V2B_LSB>
   182e6:	cd b7       	in	r28, 0x3d	; 61
   182e8:	de b7       	in	r29, 0x3e	; 62
   182ea:	e6 e0       	ldi	r30, 0x06	; 6
   182ec:	0c 94 b9 e0 	jmp	0x1c172	; 0x1c172 <__epilogue_restores__+0x18>

000182f0 <lif_str2dir>:
   182f0:	0f 93       	push	r16
   182f2:	1f 93       	push	r17
   182f4:	cf 93       	push	r28
   182f6:	df 93       	push	r29
   182f8:	8c 01       	movw	r16, r24
   182fa:	eb 01       	movw	r28, r22
   182fc:	61 5b       	subi	r22, 0xB1	; 177
   182fe:	7f 4f       	sbci	r23, 0xFF	; 255
   18300:	4a e0       	ldi	r20, 0x0A	; 10
   18302:	50 e0       	ldi	r21, 0x00	; 0
   18304:	cd dd       	rcall	.-1126   	; 0x17ea0 <lif_B2S>
   18306:	42 e0       	ldi	r20, 0x02	; 2
   18308:	50 e0       	ldi	r21, 0x00	; 0
   1830a:	6a e0       	ldi	r22, 0x0A	; 10
   1830c:	70 e0       	ldi	r23, 0x00	; 0
   1830e:	c8 01       	movw	r24, r16
   18310:	9c db       	rcall	.-2248   	; 0x17a4a <B2V_MSB>
   18312:	fe 01       	movw	r30, r28
   18314:	e6 5a       	subi	r30, 0xA6	; 166
   18316:	ff 4f       	sbci	r31, 0xFF	; 255
   18318:	71 83       	std	Z+1, r23	; 0x01
   1831a:	60 83       	st	Z, r22
   1831c:	44 e0       	ldi	r20, 0x04	; 4
   1831e:	50 e0       	ldi	r21, 0x00	; 0
   18320:	6c e0       	ldi	r22, 0x0C	; 12
   18322:	70 e0       	ldi	r23, 0x00	; 0
   18324:	c8 01       	movw	r24, r16
   18326:	91 db       	rcall	.-2270   	; 0x17a4a <B2V_MSB>
   18328:	fe 01       	movw	r30, r28
   1832a:	e4 5a       	subi	r30, 0xA4	; 164
   1832c:	ff 4f       	sbci	r31, 0xFF	; 255
   1832e:	60 83       	st	Z, r22
   18330:	71 83       	std	Z+1, r23	; 0x01
   18332:	82 83       	std	Z+2, r24	; 0x02
   18334:	93 83       	std	Z+3, r25	; 0x03
   18336:	44 e0       	ldi	r20, 0x04	; 4
   18338:	50 e0       	ldi	r21, 0x00	; 0
   1833a:	60 e1       	ldi	r22, 0x10	; 16
   1833c:	70 e0       	ldi	r23, 0x00	; 0
   1833e:	c8 01       	movw	r24, r16
   18340:	84 db       	rcall	.-2296   	; 0x17a4a <B2V_MSB>
   18342:	fe 01       	movw	r30, r28
   18344:	e0 5a       	subi	r30, 0xA0	; 160
   18346:	ff 4f       	sbci	r31, 0xFF	; 255
   18348:	60 83       	st	Z, r22
   1834a:	71 83       	std	Z+1, r23	; 0x01
   1834c:	82 83       	std	Z+2, r24	; 0x02
   1834e:	93 83       	std	Z+3, r25	; 0x03
   18350:	de 01       	movw	r26, r28
   18352:	ac 59       	subi	r26, 0x9C	; 156
   18354:	bf 4f       	sbci	r27, 0xFF	; 255
   18356:	f8 01       	movw	r30, r16
   18358:	74 96       	adiw	r30, 0x14	; 20
   1835a:	86 e0       	ldi	r24, 0x06	; 6
   1835c:	01 90       	ld	r0, Z+
   1835e:	0d 92       	st	X+, r0
   18360:	8a 95       	dec	r24
   18362:	e1 f7       	brne	.-8      	; 0x1835c <lif_str2dir+0x6c>
   18364:	42 e0       	ldi	r20, 0x02	; 2
   18366:	50 e0       	ldi	r21, 0x00	; 0
   18368:	6a e1       	ldi	r22, 0x1A	; 26
   1836a:	70 e0       	ldi	r23, 0x00	; 0
   1836c:	c8 01       	movw	r24, r16
   1836e:	6d db       	rcall	.-2342   	; 0x17a4a <B2V_MSB>
   18370:	fe 01       	movw	r30, r28
   18372:	e6 59       	subi	r30, 0x96	; 150
   18374:	ff 4f       	sbci	r31, 0xFF	; 255
   18376:	71 83       	std	Z+1, r23	; 0x01
   18378:	60 83       	st	Z, r22
   1837a:	42 e0       	ldi	r20, 0x02	; 2
   1837c:	50 e0       	ldi	r21, 0x00	; 0
   1837e:	6c e1       	ldi	r22, 0x1C	; 28
   18380:	70 e0       	ldi	r23, 0x00	; 0
   18382:	c8 01       	movw	r24, r16
   18384:	81 db       	rcall	.-2302   	; 0x17a88 <B2V_LSB>
   18386:	fe 01       	movw	r30, r28
   18388:	e4 59       	subi	r30, 0x94	; 148
   1838a:	ff 4f       	sbci	r31, 0xFF	; 255
   1838c:	71 83       	std	Z+1, r23	; 0x01
   1838e:	60 83       	st	Z, r22
   18390:	42 e0       	ldi	r20, 0x02	; 2
   18392:	50 e0       	ldi	r21, 0x00	; 0
   18394:	6e e1       	ldi	r22, 0x1E	; 30
   18396:	70 e0       	ldi	r23, 0x00	; 0
   18398:	c8 01       	movw	r24, r16
   1839a:	76 db       	rcall	.-2324   	; 0x17a88 <B2V_LSB>
   1839c:	c2 59       	subi	r28, 0x92	; 146
   1839e:	df 4f       	sbci	r29, 0xFF	; 255
   183a0:	79 83       	std	Y+1, r23	; 0x01
   183a2:	68 83       	st	Y, r22
   183a4:	df 91       	pop	r29
   183a6:	cf 91       	pop	r28
   183a8:	1f 91       	pop	r17
   183aa:	0f 91       	pop	r16
   183ac:	08 95       	ret

000183ae <lif_BIN2BCD>:
   183ae:	6a e0       	ldi	r22, 0x0A	; 10
   183b0:	0e 94 f1 df 	call	0x1bfe2	; 0x1bfe2 <__udivmodqi4>
   183b4:	82 95       	swap	r24
   183b6:	80 7f       	andi	r24, 0xF0	; 240
   183b8:	89 2b       	or	r24, r25
   183ba:	08 95       	ret

000183bc <lif_BCD2BIN>:
   183bc:	28 2f       	mov	r18, r24
   183be:	22 95       	swap	r18
   183c0:	2f 70       	andi	r18, 0x0F	; 15
   183c2:	8f 70       	andi	r24, 0x0F	; 15
   183c4:	90 e0       	ldi	r25, 0x00	; 0
   183c6:	3a e0       	ldi	r19, 0x0A	; 10
   183c8:	23 9f       	mul	r18, r19
   183ca:	80 0d       	add	r24, r0
   183cc:	91 1d       	adc	r25, r1
   183ce:	11 24       	eor	r1, r1
   183d0:	08 95       	ret

000183d2 <lif_time2lifbcd>:
   183d2:	aa e1       	ldi	r26, 0x1A	; 26
   183d4:	b0 e0       	ldi	r27, 0x00	; 0
   183d6:	ef ee       	ldi	r30, 0xEF	; 239
   183d8:	f1 ec       	ldi	r31, 0xC1	; 193
   183da:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
   183de:	8b 01       	movw	r16, r22
   183e0:	9c 01       	movw	r18, r24
   183e2:	6f 8b       	std	Y+23, r22	; 0x17
   183e4:	78 8f       	std	Y+24, r23	; 0x18
   183e6:	89 8f       	std	Y+25, r24	; 0x19
   183e8:	9a 8f       	std	Y+26, r25	; 0x1a
   183ea:	67 2b       	or	r22, r23
   183ec:	68 2b       	or	r22, r24
   183ee:	69 2b       	or	r22, r25
   183f0:	41 f4       	brne	.+16     	; 0x18402 <lif_time2lifbcd+0x30>
   183f2:	fa 01       	movw	r30, r20
   183f4:	ca 01       	movw	r24, r20
   183f6:	06 96       	adiw	r24, 0x06	; 6
   183f8:	11 92       	st	Z+, r1
   183fa:	e8 17       	cp	r30, r24
   183fc:	f9 07       	cpc	r31, r25
   183fe:	e1 f7       	brne	.-8      	; 0x183f8 <lif_time2lifbcd+0x26>
   18400:	26 c0       	rjmp	.+76     	; 0x1844e <lif_time2lifbcd+0x7c>
   18402:	8a 01       	movw	r16, r20
   18404:	be 01       	movw	r22, r28
   18406:	6f 5f       	subi	r22, 0xFF	; 255
   18408:	7f 4f       	sbci	r23, 0xFF	; 255
   1840a:	ce 01       	movw	r24, r28
   1840c:	47 96       	adiw	r24, 0x17	; 23
   1840e:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <gmtime_r>
   18412:	8b 85       	ldd	r24, Y+11	; 0x0b
   18414:	9c 85       	ldd	r25, Y+12	; 0x0c
   18416:	64 e6       	ldi	r22, 0x64	; 100
   18418:	70 e0       	ldi	r23, 0x00	; 0
   1841a:	0e 94 11 e0 	call	0x1c022	; 0x1c022 <__divmodhi4>
   1841e:	c7 df       	rcall	.-114    	; 0x183ae <lif_BIN2BCD>
   18420:	f8 01       	movw	r30, r16
   18422:	80 83       	st	Z, r24
   18424:	89 85       	ldd	r24, Y+9	; 0x09
   18426:	8f 5f       	subi	r24, 0xFF	; 255
   18428:	c2 df       	rcall	.-124    	; 0x183ae <lif_BIN2BCD>
   1842a:	f8 01       	movw	r30, r16
   1842c:	81 83       	std	Z+1, r24	; 0x01
   1842e:	8f 81       	ldd	r24, Y+7	; 0x07
   18430:	be df       	rcall	.-132    	; 0x183ae <lif_BIN2BCD>
   18432:	f8 01       	movw	r30, r16
   18434:	82 83       	std	Z+2, r24	; 0x02
   18436:	8d 81       	ldd	r24, Y+5	; 0x05
   18438:	ba df       	rcall	.-140    	; 0x183ae <lif_BIN2BCD>
   1843a:	f8 01       	movw	r30, r16
   1843c:	83 83       	std	Z+3, r24	; 0x03
   1843e:	8b 81       	ldd	r24, Y+3	; 0x03
   18440:	b6 df       	rcall	.-148    	; 0x183ae <lif_BIN2BCD>
   18442:	f8 01       	movw	r30, r16
   18444:	84 83       	std	Z+4, r24	; 0x04
   18446:	89 81       	ldd	r24, Y+1	; 0x01
   18448:	b2 df       	rcall	.-156    	; 0x183ae <lif_BIN2BCD>
   1844a:	f8 01       	movw	r30, r16
   1844c:	85 83       	std	Z+5, r24	; 0x05
   1844e:	6a 96       	adiw	r28, 0x1a	; 26
   18450:	e4 e0       	ldi	r30, 0x04	; 4
   18452:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00018456 <lif_lifbcd2time>:
   18456:	a6 e1       	ldi	r26, 0x16	; 22
   18458:	b0 e0       	ldi	r27, 0x00	; 0
   1845a:	e1 e3       	ldi	r30, 0x31	; 49
   1845c:	f2 ec       	ldi	r31, 0xC2	; 194
   1845e:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
   18462:	8c 01       	movw	r16, r24
   18464:	7c 01       	movw	r14, r24
   18466:	5c 01       	movw	r10, r24
   18468:	26 e0       	ldi	r18, 0x06	; 6
   1846a:	a2 0e       	add	r10, r18
   1846c:	b1 1c       	adc	r11, r1
   1846e:	cc 24       	eor	r12, r12
   18470:	c3 94       	inc	r12
   18472:	d1 2c       	mov	r13, r1
   18474:	f7 01       	movw	r30, r14
   18476:	81 91       	ld	r24, Z+
   18478:	7f 01       	movw	r14, r30
   1847a:	a0 df       	rcall	.-192    	; 0x183bc <lif_BCD2BIN>
   1847c:	89 2b       	or	r24, r25
   1847e:	11 f0       	breq	.+4      	; 0x18484 <lif_lifbcd2time+0x2e>
   18480:	c1 2c       	mov	r12, r1
   18482:	d1 2c       	mov	r13, r1
   18484:	ea 14       	cp	r14, r10
   18486:	fb 04       	cpc	r15, r11
   18488:	a9 f7       	brne	.-22     	; 0x18474 <lif_lifbcd2time+0x1e>
   1848a:	c1 14       	cp	r12, r1
   1848c:	d1 04       	cpc	r13, r1
   1848e:	61 f5       	brne	.+88     	; 0x184e8 <lif_lifbcd2time+0x92>
   18490:	f8 01       	movw	r30, r16
   18492:	80 81       	ld	r24, Z
   18494:	93 df       	rcall	.-218    	; 0x183bc <lif_BCD2BIN>
   18496:	7c 01       	movw	r14, r24
   18498:	f8 01       	movw	r30, r16
   1849a:	81 81       	ldd	r24, Z+1	; 0x01
   1849c:	8f df       	rcall	.-226    	; 0x183bc <lif_BCD2BIN>
   1849e:	01 97       	sbiw	r24, 0x01	; 1
   184a0:	f6 e4       	ldi	r31, 0x46	; 70
   184a2:	ef 16       	cp	r14, r31
   184a4:	f1 04       	cpc	r15, r1
   184a6:	1c f4       	brge	.+6      	; 0x184ae <lif_lifbcd2time+0x58>
   184a8:	24 e6       	ldi	r18, 0x64	; 100
   184aa:	e2 0e       	add	r14, r18
   184ac:	f1 1c       	adc	r15, r1
   184ae:	fc 86       	std	Y+12, r15	; 0x0c
   184b0:	eb 86       	std	Y+11, r14	; 0x0b
   184b2:	9a 87       	std	Y+10, r25	; 0x0a
   184b4:	89 87       	std	Y+9, r24	; 0x09
   184b6:	f8 01       	movw	r30, r16
   184b8:	82 81       	ldd	r24, Z+2	; 0x02
   184ba:	80 df       	rcall	.-256    	; 0x183bc <lif_BCD2BIN>
   184bc:	98 87       	std	Y+8, r25	; 0x08
   184be:	8f 83       	std	Y+7, r24	; 0x07
   184c0:	f8 01       	movw	r30, r16
   184c2:	83 81       	ldd	r24, Z+3	; 0x03
   184c4:	7b df       	rcall	.-266    	; 0x183bc <lif_BCD2BIN>
   184c6:	9e 83       	std	Y+6, r25	; 0x06
   184c8:	8d 83       	std	Y+5, r24	; 0x05
   184ca:	f8 01       	movw	r30, r16
   184cc:	84 81       	ldd	r24, Z+4	; 0x04
   184ce:	76 df       	rcall	.-276    	; 0x183bc <lif_BCD2BIN>
   184d0:	9c 83       	std	Y+4, r25	; 0x04
   184d2:	8b 83       	std	Y+3, r24	; 0x03
   184d4:	f8 01       	movw	r30, r16
   184d6:	85 81       	ldd	r24, Z+5	; 0x05
   184d8:	71 df       	rcall	.-286    	; 0x183bc <lif_BCD2BIN>
   184da:	9a 83       	std	Y+2, r25	; 0x02
   184dc:	89 83       	std	Y+1, r24	; 0x01
   184de:	ce 01       	movw	r24, r28
   184e0:	01 96       	adiw	r24, 0x01	; 1
   184e2:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <timegm>
   184e6:	03 c0       	rjmp	.+6      	; 0x184ee <lif_lifbcd2time+0x98>
   184e8:	60 e0       	ldi	r22, 0x00	; 0
   184ea:	70 e0       	ldi	r23, 0x00	; 0
   184ec:	cb 01       	movw	r24, r22
   184ee:	66 96       	adiw	r28, 0x16	; 22
   184f0:	ea e0       	ldi	r30, 0x0A	; 10
   184f2:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

000184f6 <lif_ctime_gmt>:
   184f6:	a6 e1       	ldi	r26, 0x16	; 22
   184f8:	b0 e0       	ldi	r27, 0x00	; 0
   184fa:	e1 e8       	ldi	r30, 0x81	; 129
   184fc:	f2 ec       	ldi	r31, 0xC2	; 194
   184fe:	0c 94 9f e0 	jmp	0x1c13e	; 0x1c13e <__prologue_saves__+0x1c>
   18502:	20 e2       	ldi	r18, 0x20	; 32
   18504:	e2 eb       	ldi	r30, 0xB2	; 178
   18506:	f9 e1       	ldi	r31, 0x19	; 25
   18508:	df 01       	movw	r26, r30
   1850a:	1d 92       	st	X+, r1
   1850c:	2a 95       	dec	r18
   1850e:	e9 f7       	brne	.-6      	; 0x1850a <lif_ctime_gmt+0x14>
   18510:	be 01       	movw	r22, r28
   18512:	6f 5f       	subi	r22, 0xFF	; 255
   18514:	7f 4f       	sbci	r23, 0xFF	; 255
   18516:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <gmtime_r>
   1851a:	62 eb       	ldi	r22, 0xB2	; 178
   1851c:	79 e1       	ldi	r23, 0x19	; 25
   1851e:	0e 94 46 3c 	call	0x788c	; 0x788c <asctime_r>
   18522:	8c 01       	movw	r16, r24
   18524:	0e 94 a2 31 	call	0x6344	; 0x6344 <trim_tail>
   18528:	c8 01       	movw	r24, r16
   1852a:	66 96       	adiw	r28, 0x16	; 22
   1852c:	e4 e0       	ldi	r30, 0x04	; 4
   1852e:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00018532 <lif_lifbcd2timestr>:
   18532:	a4 e0       	ldi	r26, 0x04	; 4
   18534:	b0 e0       	ldi	r27, 0x00	; 0
   18536:	ef e9       	ldi	r30, 0x9F	; 159
   18538:	f2 ec       	ldi	r31, 0xC2	; 194
   1853a:	0c 94 a1 e0 	jmp	0x1c142	; 0x1c142 <__prologue_saves__+0x20>
   1853e:	20 e2       	ldi	r18, 0x20	; 32
   18540:	e2 e9       	ldi	r30, 0x92	; 146
   18542:	f9 e1       	ldi	r31, 0x19	; 25
   18544:	df 01       	movw	r26, r30
   18546:	1d 92       	st	X+, r1
   18548:	2a 95       	dec	r18
   1854a:	e9 f7       	brne	.-6      	; 0x18546 <lif_lifbcd2timestr+0x14>
   1854c:	84 df       	rcall	.-248    	; 0x18456 <lif_lifbcd2time>
   1854e:	69 83       	std	Y+1, r22	; 0x01
   18550:	7a 83       	std	Y+2, r23	; 0x02
   18552:	8b 83       	std	Y+3, r24	; 0x03
   18554:	9c 83       	std	Y+4, r25	; 0x04
   18556:	67 2b       	or	r22, r23
   18558:	68 2b       	or	r22, r24
   1855a:	69 2b       	or	r22, r25
   1855c:	29 f0       	breq	.+10     	; 0x18568 <lif_lifbcd2timestr+0x36>
   1855e:	ce 01       	movw	r24, r28
   18560:	01 96       	adiw	r24, 0x01	; 1
   18562:	c9 df       	rcall	.-110    	; 0x184f6 <lif_ctime_gmt>
   18564:	bc 01       	movw	r22, r24
   18566:	02 c0       	rjmp	.+4      	; 0x1856c <lif_lifbcd2timestr+0x3a>
   18568:	6e ed       	ldi	r22, 0xDE	; 222
   1856a:	75 e1       	ldi	r23, 0x15	; 21
   1856c:	82 e9       	ldi	r24, 0x92	; 146
   1856e:	99 e1       	ldi	r25, 0x19	; 25
   18570:	0e 94 c4 30 	call	0x6188	; 0x6188 <strcpy>
   18574:	82 e9       	ldi	r24, 0x92	; 146
   18576:	99 e1       	ldi	r25, 0x19	; 25
   18578:	24 96       	adiw	r28, 0x04	; 4
   1857a:	e2 e0       	ldi	r30, 0x02	; 2
   1857c:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00018580 <lif_image_clear>:
   18580:	20 e7       	ldi	r18, 0x70	; 112
   18582:	fc 01       	movw	r30, r24
   18584:	11 92       	st	Z+, r1
   18586:	2a 95       	dec	r18
   18588:	e9 f7       	brne	.-6      	; 0x18584 <lif_image_clear+0x4>
   1858a:	08 95       	ret

0001858c <lif_dir_clear>:
   1858c:	81 5b       	subi	r24, 0xB1	; 177
   1858e:	9f 4f       	sbci	r25, 0xFF	; 255
   18590:	21 e2       	ldi	r18, 0x21	; 33
   18592:	fc 01       	movw	r30, r24
   18594:	11 92       	st	Z+, r1
   18596:	2a 95       	dec	r18
   18598:	e9 f7       	brne	.-6      	; 0x18594 <lif_dir_clear+0x8>
   1859a:	08 95       	ret

0001859c <lif_vol_clear>:
   1859c:	84 96       	adiw	r24, 0x24	; 36
   1859e:	2b e2       	ldi	r18, 0x2B	; 43
   185a0:	fc 01       	movw	r30, r24
   185a2:	11 92       	st	Z+, r1
   185a4:	2a 95       	dec	r18
   185a6:	e9 f7       	brne	.-6      	; 0x185a2 <lif_vol_clear+0x6>
   185a8:	08 95       	ret

000185aa <lif_dump_vol>:
   185aa:	cf 93       	push	r28
   185ac:	df 93       	push	r29
   185ae:	ad b7       	in	r26, 0x3d	; 61
   185b0:	be b7       	in	r27, 0x3e	; 62
   185b2:	17 97       	sbiw	r26, 0x07	; 7
   185b4:	0f b6       	in	r0, 0x3f	; 63
   185b6:	f8 94       	cli
   185b8:	be bf       	out	0x3e, r27	; 62
   185ba:	0f be       	out	0x3f, r0	; 63
   185bc:	ad bf       	out	0x3d, r26	; 61
   185be:	ec 01       	movw	r28, r24
   185c0:	ed b7       	in	r30, 0x3d	; 61
   185c2:	fe b7       	in	r31, 0x3e	; 62
   185c4:	75 83       	std	Z+5, r23	; 0x05
   185c6:	64 83       	std	Z+4, r22	; 0x04
   185c8:	83 e4       	ldi	r24, 0x43	; 67
   185ca:	9e e3       	ldi	r25, 0x3E	; 62
   185cc:	a0 e0       	ldi	r26, 0x00	; 0
   185ce:	81 83       	std	Z+1, r24	; 0x01
   185d0:	92 83       	std	Z+2, r25	; 0x02
   185d2:	a3 83       	std	Z+3, r26	; 0x03
   185d4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   185d8:	88 81       	ld	r24, Y
   185da:	99 81       	ldd	r25, Y+1	; 0x01
   185dc:	ed b7       	in	r30, 0x3d	; 61
   185de:	fe b7       	in	r31, 0x3e	; 62
   185e0:	95 83       	std	Z+5, r25	; 0x05
   185e2:	84 83       	std	Z+4, r24	; 0x04
   185e4:	89 e2       	ldi	r24, 0x29	; 41
   185e6:	9e e3       	ldi	r25, 0x3E	; 62
   185e8:	a0 e0       	ldi	r26, 0x00	; 0
   185ea:	81 83       	std	Z+1, r24	; 0x01
   185ec:	92 83       	std	Z+2, r25	; 0x02
   185ee:	a3 83       	std	Z+3, r26	; 0x03
   185f0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   185f4:	8c 81       	ldd	r24, Y+4	; 0x04
   185f6:	9d 81       	ldd	r25, Y+5	; 0x05
   185f8:	ae 81       	ldd	r26, Y+6	; 0x06
   185fa:	bf 81       	ldd	r27, Y+7	; 0x07
   185fc:	ed b7       	in	r30, 0x3d	; 61
   185fe:	fe b7       	in	r31, 0x3e	; 62
   18600:	84 83       	std	Z+4, r24	; 0x04
   18602:	95 83       	std	Z+5, r25	; 0x05
   18604:	a6 83       	std	Z+6, r26	; 0x06
   18606:	b7 83       	std	Z+7, r27	; 0x07
   18608:	8c e0       	ldi	r24, 0x0C	; 12
   1860a:	9e e3       	ldi	r25, 0x3E	; 62
   1860c:	a0 e0       	ldi	r26, 0x00	; 0
   1860e:	81 83       	std	Z+1, r24	; 0x01
   18610:	92 83       	std	Z+2, r25	; 0x02
   18612:	a3 83       	std	Z+3, r26	; 0x03
   18614:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18618:	88 85       	ldd	r24, Y+8	; 0x08
   1861a:	99 85       	ldd	r25, Y+9	; 0x09
   1861c:	aa 85       	ldd	r26, Y+10	; 0x0a
   1861e:	bb 85       	ldd	r27, Y+11	; 0x0b
   18620:	ed b7       	in	r30, 0x3d	; 61
   18622:	fe b7       	in	r31, 0x3e	; 62
   18624:	84 83       	std	Z+4, r24	; 0x04
   18626:	95 83       	std	Z+5, r25	; 0x05
   18628:	a6 83       	std	Z+6, r26	; 0x06
   1862a:	b7 83       	std	Z+7, r27	; 0x07
   1862c:	8f ee       	ldi	r24, 0xEF	; 239
   1862e:	9d e3       	ldi	r25, 0x3D	; 61
   18630:	a0 e0       	ldi	r26, 0x00	; 0
   18632:	81 83       	std	Z+1, r24	; 0x01
   18634:	92 83       	std	Z+2, r25	; 0x02
   18636:	a3 83       	std	Z+3, r26	; 0x03
   18638:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1863c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1863e:	9d 85       	ldd	r25, Y+13	; 0x0d
   18640:	ae 85       	ldd	r26, Y+14	; 0x0e
   18642:	bf 85       	ldd	r27, Y+15	; 0x0f
   18644:	ed b7       	in	r30, 0x3d	; 61
   18646:	fe b7       	in	r31, 0x3e	; 62
   18648:	84 83       	std	Z+4, r24	; 0x04
   1864a:	95 83       	std	Z+5, r25	; 0x05
   1864c:	a6 83       	std	Z+6, r26	; 0x06
   1864e:	b7 83       	std	Z+7, r27	; 0x07
   18650:	82 ed       	ldi	r24, 0xD2	; 210
   18652:	9d e3       	ldi	r25, 0x3D	; 61
   18654:	a0 e0       	ldi	r26, 0x00	; 0
   18656:	81 83       	std	Z+1, r24	; 0x01
   18658:	92 83       	std	Z+2, r25	; 0x02
   1865a:	a3 83       	std	Z+3, r26	; 0x03
   1865c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18660:	88 89       	ldd	r24, Y+16	; 0x10
   18662:	99 89       	ldd	r25, Y+17	; 0x11
   18664:	aa 89       	ldd	r26, Y+18	; 0x12
   18666:	bb 89       	ldd	r27, Y+19	; 0x13
   18668:	ed b7       	in	r30, 0x3d	; 61
   1866a:	fe b7       	in	r31, 0x3e	; 62
   1866c:	84 83       	std	Z+4, r24	; 0x04
   1866e:	95 83       	std	Z+5, r25	; 0x05
   18670:	a6 83       	std	Z+6, r26	; 0x06
   18672:	b7 83       	std	Z+7, r27	; 0x07
   18674:	85 eb       	ldi	r24, 0xB5	; 181
   18676:	9d e3       	ldi	r25, 0x3D	; 61
   18678:	a0 e0       	ldi	r26, 0x00	; 0
   1867a:	81 83       	std	Z+1, r24	; 0x01
   1867c:	92 83       	std	Z+2, r25	; 0x02
   1867e:	a3 83       	std	Z+3, r26	; 0x03
   18680:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18684:	8c 89       	ldd	r24, Y+20	; 0x14
   18686:	9d 89       	ldd	r25, Y+21	; 0x15
   18688:	ae 89       	ldd	r26, Y+22	; 0x16
   1868a:	bf 89       	ldd	r27, Y+23	; 0x17
   1868c:	ed b7       	in	r30, 0x3d	; 61
   1868e:	fe b7       	in	r31, 0x3e	; 62
   18690:	84 83       	std	Z+4, r24	; 0x04
   18692:	95 83       	std	Z+5, r25	; 0x05
   18694:	a6 83       	std	Z+6, r26	; 0x06
   18696:	b7 83       	std	Z+7, r27	; 0x07
   18698:	88 e9       	ldi	r24, 0x98	; 152
   1869a:	9d e3       	ldi	r25, 0x3D	; 61
   1869c:	a0 e0       	ldi	r26, 0x00	; 0
   1869e:	81 83       	std	Z+1, r24	; 0x01
   186a0:	92 83       	std	Z+2, r25	; 0x02
   186a2:	a3 83       	std	Z+3, r26	; 0x03
   186a4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   186a8:	88 8d       	ldd	r24, Y+24	; 0x18
   186aa:	99 8d       	ldd	r25, Y+25	; 0x19
   186ac:	aa 8d       	ldd	r26, Y+26	; 0x1a
   186ae:	bb 8d       	ldd	r27, Y+27	; 0x1b
   186b0:	ed b7       	in	r30, 0x3d	; 61
   186b2:	fe b7       	in	r31, 0x3e	; 62
   186b4:	84 83       	std	Z+4, r24	; 0x04
   186b6:	95 83       	std	Z+5, r25	; 0x05
   186b8:	a6 83       	std	Z+6, r26	; 0x06
   186ba:	b7 83       	std	Z+7, r27	; 0x07
   186bc:	8b e7       	ldi	r24, 0x7B	; 123
   186be:	9d e3       	ldi	r25, 0x3D	; 61
   186c0:	a0 e0       	ldi	r26, 0x00	; 0
   186c2:	81 83       	std	Z+1, r24	; 0x01
   186c4:	92 83       	std	Z+2, r25	; 0x02
   186c6:	a3 83       	std	Z+3, r26	; 0x03
   186c8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   186cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   186ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
   186d0:	09 2e       	mov	r0, r25
   186d2:	00 0c       	add	r0, r0
   186d4:	aa 0b       	sbc	r26, r26
   186d6:	bb 0b       	sbc	r27, r27
   186d8:	ed b7       	in	r30, 0x3d	; 61
   186da:	fe b7       	in	r31, 0x3e	; 62
   186dc:	84 83       	std	Z+4, r24	; 0x04
   186de:	95 83       	std	Z+5, r25	; 0x05
   186e0:	a6 83       	std	Z+6, r26	; 0x06
   186e2:	b7 83       	std	Z+7, r27	; 0x07
   186e4:	8e e5       	ldi	r24, 0x5E	; 94
   186e6:	9d e3       	ldi	r25, 0x3D	; 61
   186e8:	a0 e0       	ldi	r26, 0x00	; 0
   186ea:	81 83       	std	Z+1, r24	; 0x01
   186ec:	92 83       	std	Z+2, r25	; 0x02
   186ee:	a3 83       	std	Z+3, r26	; 0x03
   186f0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   186f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
   186f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
   186f8:	09 2e       	mov	r0, r25
   186fa:	00 0c       	add	r0, r0
   186fc:	aa 0b       	sbc	r26, r26
   186fe:	bb 0b       	sbc	r27, r27
   18700:	ed b7       	in	r30, 0x3d	; 61
   18702:	fe b7       	in	r31, 0x3e	; 62
   18704:	84 83       	std	Z+4, r24	; 0x04
   18706:	95 83       	std	Z+5, r25	; 0x05
   18708:	a6 83       	std	Z+6, r26	; 0x06
   1870a:	b7 83       	std	Z+7, r27	; 0x07
   1870c:	81 e4       	ldi	r24, 0x41	; 65
   1870e:	9d e3       	ldi	r25, 0x3D	; 61
   18710:	a0 e0       	ldi	r26, 0x00	; 0
   18712:	81 83       	std	Z+1, r24	; 0x01
   18714:	92 83       	std	Z+2, r25	; 0x02
   18716:	a3 83       	std	Z+3, r26	; 0x03
   18718:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1871c:	ce 01       	movw	r24, r28
   1871e:	86 96       	adiw	r24, 0x26	; 38
   18720:	ed b7       	in	r30, 0x3d	; 61
   18722:	fe b7       	in	r31, 0x3e	; 62
   18724:	95 83       	std	Z+5, r25	; 0x05
   18726:	84 83       	std	Z+4, r24	; 0x04
   18728:	87 e2       	ldi	r24, 0x27	; 39
   1872a:	9d e3       	ldi	r25, 0x3D	; 61
   1872c:	a0 e0       	ldi	r26, 0x00	; 0
   1872e:	81 83       	std	Z+1, r24	; 0x01
   18730:	92 83       	std	Z+2, r25	; 0x02
   18732:	a3 83       	std	Z+3, r26	; 0x03
   18734:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18738:	8c a1       	ldd	r24, Y+36	; 0x24
   1873a:	9d a1       	ldd	r25, Y+37	; 0x25
   1873c:	ed b7       	in	r30, 0x3d	; 61
   1873e:	fe b7       	in	r31, 0x3e	; 62
   18740:	95 83       	std	Z+5, r25	; 0x05
   18742:	84 83       	std	Z+4, r24	; 0x04
   18744:	8b e0       	ldi	r24, 0x0B	; 11
   18746:	9d e3       	ldi	r25, 0x3D	; 61
   18748:	a0 e0       	ldi	r26, 0x00	; 0
   1874a:	81 83       	std	Z+1, r24	; 0x01
   1874c:	92 83       	std	Z+2, r25	; 0x02
   1874e:	a3 83       	std	Z+3, r26	; 0x03
   18750:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18754:	8d a5       	ldd	r24, Y+45	; 0x2d
   18756:	9e a5       	ldd	r25, Y+46	; 0x2e
   18758:	af a5       	ldd	r26, Y+47	; 0x2f
   1875a:	b8 a9       	ldd	r27, Y+48	; 0x30
   1875c:	ed b7       	in	r30, 0x3d	; 61
   1875e:	fe b7       	in	r31, 0x3e	; 62
   18760:	84 83       	std	Z+4, r24	; 0x04
   18762:	95 83       	std	Z+5, r25	; 0x05
   18764:	a6 83       	std	Z+6, r26	; 0x06
   18766:	b7 83       	std	Z+7, r27	; 0x07
   18768:	8e ee       	ldi	r24, 0xEE	; 238
   1876a:	9c e3       	ldi	r25, 0x3C	; 60
   1876c:	a0 e0       	ldi	r26, 0x00	; 0
   1876e:	81 83       	std	Z+1, r24	; 0x01
   18770:	92 83       	std	Z+2, r25	; 0x02
   18772:	a3 83       	std	Z+3, r26	; 0x03
   18774:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18778:	8d a9       	ldd	r24, Y+53	; 0x35
   1877a:	9e a9       	ldd	r25, Y+54	; 0x36
   1877c:	af a9       	ldd	r26, Y+55	; 0x37
   1877e:	b8 ad       	ldd	r27, Y+56	; 0x38
   18780:	ed b7       	in	r30, 0x3d	; 61
   18782:	fe b7       	in	r31, 0x3e	; 62
   18784:	84 83       	std	Z+4, r24	; 0x04
   18786:	95 83       	std	Z+5, r25	; 0x05
   18788:	a6 83       	std	Z+6, r26	; 0x06
   1878a:	b7 83       	std	Z+7, r27	; 0x07
   1878c:	81 ed       	ldi	r24, 0xD1	; 209
   1878e:	9c e3       	ldi	r25, 0x3C	; 60
   18790:	a0 e0       	ldi	r26, 0x00	; 0
   18792:	81 83       	std	Z+1, r24	; 0x01
   18794:	92 83       	std	Z+2, r25	; 0x02
   18796:	a3 83       	std	Z+3, r26	; 0x03
   18798:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1879c:	89 a9       	ldd	r24, Y+49	; 0x31
   1879e:	9a a9       	ldd	r25, Y+50	; 0x32
   187a0:	ed b7       	in	r30, 0x3d	; 61
   187a2:	fe b7       	in	r31, 0x3e	; 62
   187a4:	95 83       	std	Z+5, r25	; 0x05
   187a6:	84 83       	std	Z+4, r24	; 0x04
   187a8:	85 eb       	ldi	r24, 0xB5	; 181
   187aa:	9c e3       	ldi	r25, 0x3C	; 60
   187ac:	a0 e0       	ldi	r26, 0x00	; 0
   187ae:	81 83       	std	Z+1, r24	; 0x01
   187b0:	92 83       	std	Z+2, r25	; 0x02
   187b2:	a3 83       	std	Z+3, r26	; 0x03
   187b4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   187b8:	89 ad       	ldd	r24, Y+57	; 0x39
   187ba:	9a ad       	ldd	r25, Y+58	; 0x3a
   187bc:	ed b7       	in	r30, 0x3d	; 61
   187be:	fe b7       	in	r31, 0x3e	; 62
   187c0:	95 83       	std	Z+5, r25	; 0x05
   187c2:	84 83       	std	Z+4, r24	; 0x04
   187c4:	89 e9       	ldi	r24, 0x99	; 153
   187c6:	9c e3       	ldi	r25, 0x3C	; 60
   187c8:	a0 e0       	ldi	r26, 0x00	; 0
   187ca:	81 83       	std	Z+1, r24	; 0x01
   187cc:	92 83       	std	Z+2, r25	; 0x02
   187ce:	a3 83       	std	Z+3, r26	; 0x03
   187d0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   187d4:	ce 01       	movw	r24, r28
   187d6:	87 5b       	subi	r24, 0xB7	; 183
   187d8:	9f 4f       	sbci	r25, 0xFF	; 255
   187da:	ab de       	rcall	.-682    	; 0x18532 <lif_lifbcd2timestr>
   187dc:	ed b7       	in	r30, 0x3d	; 61
   187de:	fe b7       	in	r31, 0x3e	; 62
   187e0:	95 83       	std	Z+5, r25	; 0x05
   187e2:	84 83       	std	Z+4, r24	; 0x04
   187e4:	8f e7       	ldi	r24, 0x7F	; 127
   187e6:	9c e3       	ldi	r25, 0x3C	; 60
   187e8:	a0 e0       	ldi	r26, 0x00	; 0
   187ea:	81 83       	std	Z+1, r24	; 0x01
   187ec:	92 83       	std	Z+2, r25	; 0x02
   187ee:	a3 83       	std	Z+3, r26	; 0x03
   187f0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   187f4:	ce 01       	movw	r24, r28
   187f6:	81 5b       	subi	r24, 0xB1	; 177
   187f8:	9f 4f       	sbci	r25, 0xFF	; 255
   187fa:	ed b7       	in	r30, 0x3d	; 61
   187fc:	fe b7       	in	r31, 0x3e	; 62
   187fe:	95 83       	std	Z+5, r25	; 0x05
   18800:	84 83       	std	Z+4, r24	; 0x04
   18802:	85 e6       	ldi	r24, 0x65	; 101
   18804:	9c e3       	ldi	r25, 0x3C	; 60
   18806:	a0 e0       	ldi	r26, 0x00	; 0
   18808:	81 83       	std	Z+1, r24	; 0x01
   1880a:	92 83       	std	Z+2, r25	; 0x02
   1880c:	a3 83       	std	Z+3, r26	; 0x03
   1880e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18812:	fe 01       	movw	r30, r28
   18814:	e6 5a       	subi	r30, 0xA6	; 166
   18816:	ff 4f       	sbci	r31, 0xFF	; 255
   18818:	80 81       	ld	r24, Z
   1881a:	91 81       	ldd	r25, Z+1	; 0x01
   1881c:	ed b7       	in	r30, 0x3d	; 61
   1881e:	fe b7       	in	r31, 0x3e	; 62
   18820:	95 83       	std	Z+5, r25	; 0x05
   18822:	84 83       	std	Z+4, r24	; 0x04
   18824:	89 e4       	ldi	r24, 0x49	; 73
   18826:	9c e3       	ldi	r25, 0x3C	; 60
   18828:	a0 e0       	ldi	r26, 0x00	; 0
   1882a:	81 83       	std	Z+1, r24	; 0x01
   1882c:	92 83       	std	Z+2, r25	; 0x02
   1882e:	a3 83       	std	Z+3, r26	; 0x03
   18830:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18834:	fe 01       	movw	r30, r28
   18836:	e6 59       	subi	r30, 0x96	; 150
   18838:	ff 4f       	sbci	r31, 0xFF	; 255
   1883a:	80 81       	ld	r24, Z
   1883c:	91 81       	ldd	r25, Z+1	; 0x01
   1883e:	ed b7       	in	r30, 0x3d	; 61
   18840:	fe b7       	in	r31, 0x3e	; 62
   18842:	95 83       	std	Z+5, r25	; 0x05
   18844:	84 83       	std	Z+4, r24	; 0x04
   18846:	8d e2       	ldi	r24, 0x2D	; 45
   18848:	9c e3       	ldi	r25, 0x3C	; 60
   1884a:	a0 e0       	ldi	r26, 0x00	; 0
   1884c:	81 83       	std	Z+1, r24	; 0x01
   1884e:	92 83       	std	Z+2, r25	; 0x02
   18850:	a3 83       	std	Z+3, r26	; 0x03
   18852:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18856:	fe 01       	movw	r30, r28
   18858:	e4 5a       	subi	r30, 0xA4	; 164
   1885a:	ff 4f       	sbci	r31, 0xFF	; 255
   1885c:	80 81       	ld	r24, Z
   1885e:	91 81       	ldd	r25, Z+1	; 0x01
   18860:	a2 81       	ldd	r26, Z+2	; 0x02
   18862:	b3 81       	ldd	r27, Z+3	; 0x03
   18864:	ed b7       	in	r30, 0x3d	; 61
   18866:	fe b7       	in	r31, 0x3e	; 62
   18868:	84 83       	std	Z+4, r24	; 0x04
   1886a:	95 83       	std	Z+5, r25	; 0x05
   1886c:	a6 83       	std	Z+6, r26	; 0x06
   1886e:	b7 83       	std	Z+7, r27	; 0x07
   18870:	80 e1       	ldi	r24, 0x10	; 16
   18872:	9c e3       	ldi	r25, 0x3C	; 60
   18874:	a0 e0       	ldi	r26, 0x00	; 0
   18876:	81 83       	std	Z+1, r24	; 0x01
   18878:	92 83       	std	Z+2, r25	; 0x02
   1887a:	a3 83       	std	Z+3, r26	; 0x03
   1887c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18880:	fe 01       	movw	r30, r28
   18882:	e0 5a       	subi	r30, 0xA0	; 160
   18884:	ff 4f       	sbci	r31, 0xFF	; 255
   18886:	80 81       	ld	r24, Z
   18888:	91 81       	ldd	r25, Z+1	; 0x01
   1888a:	a2 81       	ldd	r26, Z+2	; 0x02
   1888c:	b3 81       	ldd	r27, Z+3	; 0x03
   1888e:	ed b7       	in	r30, 0x3d	; 61
   18890:	fe b7       	in	r31, 0x3e	; 62
   18892:	84 83       	std	Z+4, r24	; 0x04
   18894:	95 83       	std	Z+5, r25	; 0x05
   18896:	a6 83       	std	Z+6, r26	; 0x06
   18898:	b7 83       	std	Z+7, r27	; 0x07
   1889a:	83 ef       	ldi	r24, 0xF3	; 243
   1889c:	9b e3       	ldi	r25, 0x3B	; 59
   1889e:	a0 e0       	ldi	r26, 0x00	; 0
   188a0:	81 83       	std	Z+1, r24	; 0x01
   188a2:	92 83       	std	Z+2, r25	; 0x02
   188a4:	a3 83       	std	Z+3, r26	; 0x03
   188a6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   188aa:	fe 01       	movw	r30, r28
   188ac:	e4 59       	subi	r30, 0x94	; 148
   188ae:	ff 4f       	sbci	r31, 0xFF	; 255
   188b0:	80 81       	ld	r24, Z
   188b2:	91 81       	ldd	r25, Z+1	; 0x01
   188b4:	a0 e0       	ldi	r26, 0x00	; 0
   188b6:	b0 e0       	ldi	r27, 0x00	; 0
   188b8:	ed b7       	in	r30, 0x3d	; 61
   188ba:	fe b7       	in	r31, 0x3e	; 62
   188bc:	84 83       	std	Z+4, r24	; 0x04
   188be:	95 83       	std	Z+5, r25	; 0x05
   188c0:	a6 83       	std	Z+6, r26	; 0x06
   188c2:	b7 83       	std	Z+7, r27	; 0x07
   188c4:	86 ed       	ldi	r24, 0xD6	; 214
   188c6:	9b e3       	ldi	r25, 0x3B	; 59
   188c8:	a0 e0       	ldi	r26, 0x00	; 0
   188ca:	81 83       	std	Z+1, r24	; 0x01
   188cc:	92 83       	std	Z+2, r25	; 0x02
   188ce:	a3 83       	std	Z+3, r26	; 0x03
   188d0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   188d4:	fe 01       	movw	r30, r28
   188d6:	e2 59       	subi	r30, 0x92	; 146
   188d8:	ff 4f       	sbci	r31, 0xFF	; 255
   188da:	80 81       	ld	r24, Z
   188dc:	91 81       	ldd	r25, Z+1	; 0x01
   188de:	ed b7       	in	r30, 0x3d	; 61
   188e0:	fe b7       	in	r31, 0x3e	; 62
   188e2:	95 83       	std	Z+5, r25	; 0x05
   188e4:	84 83       	std	Z+4, r24	; 0x04
   188e6:	8a eb       	ldi	r24, 0xBA	; 186
   188e8:	9b e3       	ldi	r25, 0x3B	; 59
   188ea:	a0 e0       	ldi	r26, 0x00	; 0
   188ec:	81 83       	std	Z+1, r24	; 0x01
   188ee:	92 83       	std	Z+2, r25	; 0x02
   188f0:	a3 83       	std	Z+3, r26	; 0x03
   188f2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   188f6:	ce 01       	movw	r24, r28
   188f8:	8c 59       	subi	r24, 0x9C	; 156
   188fa:	9f 4f       	sbci	r25, 0xFF	; 255
   188fc:	1a de       	rcall	.-972    	; 0x18532 <lif_lifbcd2timestr>
   188fe:	ed b7       	in	r30, 0x3d	; 61
   18900:	fe b7       	in	r31, 0x3e	; 62
   18902:	95 83       	std	Z+5, r25	; 0x05
   18904:	84 83       	std	Z+4, r24	; 0x04
   18906:	80 ea       	ldi	r24, 0xA0	; 160
   18908:	9b e3       	ldi	r25, 0x3B	; 59
   1890a:	a0 e0       	ldi	r26, 0x00	; 0
   1890c:	81 83       	std	Z+1, r24	; 0x01
   1890e:	92 83       	std	Z+2, r25	; 0x02
   18910:	a3 83       	std	Z+3, r26	; 0x03
   18912:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18916:	8e e9       	ldi	r24, 0x9E	; 158
   18918:	9b e3       	ldi	r25, 0x3B	; 59
   1891a:	a0 e0       	ldi	r26, 0x00	; 0
   1891c:	ed b7       	in	r30, 0x3d	; 61
   1891e:	fe b7       	in	r31, 0x3e	; 62
   18920:	81 83       	std	Z+1, r24	; 0x01
   18922:	92 83       	std	Z+2, r25	; 0x02
   18924:	a3 83       	std	Z+3, r26	; 0x03
   18926:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1892a:	cd b7       	in	r28, 0x3d	; 61
   1892c:	de b7       	in	r29, 0x3e	; 62
   1892e:	27 96       	adiw	r28, 0x07	; 7
   18930:	e2 e0       	ldi	r30, 0x02	; 2
   18932:	0c 94 bd e0 	jmp	0x1c17a	; 0x1c17a <__epilogue_restores__+0x20>

00018936 <lif_check_volume>:
   18936:	0f 93       	push	r16
   18938:	1f 93       	push	r17
   1893a:	cf 93       	push	r28
   1893c:	df 93       	push	r29
   1893e:	ad b7       	in	r26, 0x3d	; 61
   18940:	be b7       	in	r27, 0x3e	; 62
   18942:	17 97       	sbiw	r26, 0x07	; 7
   18944:	0f b6       	in	r0, 0x3f	; 63
   18946:	f8 94       	cli
   18948:	be bf       	out	0x3e, r27	; 62
   1894a:	0f be       	out	0x3f, r0	; 63
   1894c:	ad bf       	out	0x3d, r26	; 61
   1894e:	ec 01       	movw	r28, r24
   18950:	86 96       	adiw	r24, 0x26	; 38
   18952:	e0 da       	rcall	.-2624   	; 0x17f14 <lif_checkname>
   18954:	89 2b       	or	r24, r25
   18956:	79 f4       	brne	.+30     	; 0x18976 <lif_check_volume+0x40>
   18958:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1895c:	81 ff       	sbrs	r24, 1
   1895e:	0e c0       	rjmp	.+28     	; 0x1897c <lif_check_volume+0x46>
   18960:	8f e7       	ldi	r24, 0x7F	; 127
   18962:	9b e3       	ldi	r25, 0x3B	; 59
   18964:	a0 e0       	ldi	r26, 0x00	; 0
   18966:	ed b7       	in	r30, 0x3d	; 61
   18968:	fe b7       	in	r31, 0x3e	; 62
   1896a:	81 83       	std	Z+1, r24	; 0x01
   1896c:	92 83       	std	Z+2, r25	; 0x02
   1896e:	a3 83       	std	Z+3, r26	; 0x03
   18970:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18974:	03 c0       	rjmp	.+6      	; 0x1897c <lif_check_volume+0x46>
   18976:	81 e0       	ldi	r24, 0x01	; 1
   18978:	90 e0       	ldi	r25, 0x00	; 0
   1897a:	02 c0       	rjmp	.+4      	; 0x18980 <lif_check_volume+0x4a>
   1897c:	80 e0       	ldi	r24, 0x00	; 0
   1897e:	90 e0       	ldi	r25, 0x00	; 0
   18980:	29 a9       	ldd	r18, Y+49	; 0x31
   18982:	3a a9       	ldd	r19, Y+50	; 0x32
   18984:	21 15       	cp	r18, r1
   18986:	f0 e1       	ldi	r31, 0x10	; 16
   18988:	3f 07       	cpc	r19, r31
   1898a:	91 f0       	breq	.+36     	; 0x189b0 <lif_check_volume+0x7a>
   1898c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18990:	81 ff       	sbrs	r24, 1
   18992:	0c c0       	rjmp	.+24     	; 0x189ac <lif_check_volume+0x76>
   18994:	ed b7       	in	r30, 0x3d	; 61
   18996:	fe b7       	in	r31, 0x3e	; 62
   18998:	35 83       	std	Z+5, r19	; 0x05
   1899a:	24 83       	std	Z+4, r18	; 0x04
   1899c:	86 e4       	ldi	r24, 0x46	; 70
   1899e:	9b e3       	ldi	r25, 0x3B	; 59
   189a0:	a0 e0       	ldi	r26, 0x00	; 0
   189a2:	81 83       	std	Z+1, r24	; 0x01
   189a4:	92 83       	std	Z+2, r25	; 0x02
   189a6:	a3 83       	std	Z+3, r26	; 0x03
   189a8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   189ac:	80 e0       	ldi	r24, 0x00	; 0
   189ae:	90 e0       	ldi	r25, 0x00	; 0
   189b0:	29 ad       	ldd	r18, Y+57	; 0x39
   189b2:	3a ad       	ldd	r19, Y+58	; 0x3a
   189b4:	22 30       	cpi	r18, 0x02	; 2
   189b6:	31 05       	cpc	r19, r1
   189b8:	90 f0       	brcs	.+36     	; 0x189de <lif_check_volume+0xa8>
   189ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   189be:	81 ff       	sbrs	r24, 1
   189c0:	0c c0       	rjmp	.+24     	; 0x189da <lif_check_volume+0xa4>
   189c2:	ed b7       	in	r30, 0x3d	; 61
   189c4:	fe b7       	in	r31, 0x3e	; 62
   189c6:	35 83       	std	Z+5, r19	; 0x05
   189c8:	24 83       	std	Z+4, r18	; 0x04
   189ca:	8e e2       	ldi	r24, 0x2E	; 46
   189cc:	9b e3       	ldi	r25, 0x3B	; 59
   189ce:	a0 e0       	ldi	r26, 0x00	; 0
   189d0:	81 83       	std	Z+1, r24	; 0x01
   189d2:	92 83       	std	Z+2, r25	; 0x02
   189d4:	a3 83       	std	Z+3, r26	; 0x03
   189d6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   189da:	80 e0       	ldi	r24, 0x00	; 0
   189dc:	90 e0       	ldi	r25, 0x00	; 0
   189de:	2b a9       	ldd	r18, Y+51	; 0x33
   189e0:	3c a9       	ldd	r19, Y+52	; 0x34
   189e2:	23 2b       	or	r18, r19
   189e4:	81 f0       	breq	.+32     	; 0x18a06 <lif_check_volume+0xd0>
   189e6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   189ea:	81 ff       	sbrs	r24, 1
   189ec:	0a c0       	rjmp	.+20     	; 0x18a02 <lif_check_volume+0xcc>
   189ee:	85 ef       	ldi	r24, 0xF5	; 245
   189f0:	9a e3       	ldi	r25, 0x3A	; 58
   189f2:	a0 e0       	ldi	r26, 0x00	; 0
   189f4:	ed b7       	in	r30, 0x3d	; 61
   189f6:	fe b7       	in	r31, 0x3e	; 62
   189f8:	81 83       	std	Z+1, r24	; 0x01
   189fa:	92 83       	std	Z+2, r25	; 0x02
   189fc:	a3 83       	std	Z+3, r26	; 0x03
   189fe:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18a02:	80 e0       	ldi	r24, 0x00	; 0
   18a04:	90 e0       	ldi	r25, 0x00	; 0
   18a06:	2b ad       	ldd	r18, Y+59	; 0x3b
   18a08:	3c ad       	ldd	r19, Y+60	; 0x3c
   18a0a:	23 2b       	or	r18, r19
   18a0c:	81 f0       	breq	.+32     	; 0x18a2e <lif_check_volume+0xf8>
   18a0e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18a12:	81 ff       	sbrs	r24, 1
   18a14:	0a c0       	rjmp	.+20     	; 0x18a2a <lif_check_volume+0xf4>
   18a16:	8c eb       	ldi	r24, 0xBC	; 188
   18a18:	9a e3       	ldi	r25, 0x3A	; 58
   18a1a:	a0 e0       	ldi	r26, 0x00	; 0
   18a1c:	ed b7       	in	r30, 0x3d	; 61
   18a1e:	fe b7       	in	r31, 0x3e	; 62
   18a20:	81 83       	std	Z+1, r24	; 0x01
   18a22:	92 83       	std	Z+2, r25	; 0x02
   18a24:	a3 83       	std	Z+3, r26	; 0x03
   18a26:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18a2a:	80 e0       	ldi	r24, 0x00	; 0
   18a2c:	90 e0       	ldi	r25, 0x00	; 0
   18a2e:	4d a5       	ldd	r20, Y+45	; 0x2d
   18a30:	5e a5       	ldd	r21, Y+46	; 0x2e
   18a32:	6f a5       	ldd	r22, Y+47	; 0x2f
   18a34:	78 a9       	ldd	r23, Y+48	; 0x30
   18a36:	45 2b       	or	r20, r21
   18a38:	46 2b       	or	r20, r22
   18a3a:	47 2b       	or	r20, r23
   18a3c:	a1 f4       	brne	.+40     	; 0x18a66 <lif_check_volume+0x130>
   18a3e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18a42:	81 ff       	sbrs	r24, 1
   18a44:	0e c0       	rjmp	.+28     	; 0x18a62 <lif_check_volume+0x12c>
   18a46:	ed b7       	in	r30, 0x3d	; 61
   18a48:	fe b7       	in	r31, 0x3e	; 62
   18a4a:	14 82       	std	Z+4, r1	; 0x04
   18a4c:	15 82       	std	Z+5, r1	; 0x05
   18a4e:	16 82       	std	Z+6, r1	; 0x06
   18a50:	17 82       	std	Z+7, r1	; 0x07
   18a52:	87 e9       	ldi	r24, 0x97	; 151
   18a54:	9a e3       	ldi	r25, 0x3A	; 58
   18a56:	a0 e0       	ldi	r26, 0x00	; 0
   18a58:	81 83       	std	Z+1, r24	; 0x01
   18a5a:	92 83       	std	Z+2, r25	; 0x02
   18a5c:	a3 83       	std	Z+3, r26	; 0x03
   18a5e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18a62:	80 e0       	ldi	r24, 0x00	; 0
   18a64:	90 e0       	ldi	r25, 0x00	; 0
   18a66:	4d a9       	ldd	r20, Y+53	; 0x35
   18a68:	5e a9       	ldd	r21, Y+54	; 0x36
   18a6a:	6f a9       	ldd	r22, Y+55	; 0x37
   18a6c:	78 ad       	ldd	r23, Y+56	; 0x38
   18a6e:	45 2b       	or	r20, r21
   18a70:	46 2b       	or	r20, r22
   18a72:	47 2b       	or	r20, r23
   18a74:	81 f4       	brne	.+32     	; 0x18a96 <lif_check_volume+0x160>
   18a76:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18a7a:	81 ff       	sbrs	r24, 1
   18a7c:	0a c0       	rjmp	.+20     	; 0x18a92 <lif_check_volume+0x15c>
   18a7e:	88 e6       	ldi	r24, 0x68	; 104
   18a80:	9a e3       	ldi	r25, 0x3A	; 58
   18a82:	a0 e0       	ldi	r26, 0x00	; 0
   18a84:	ed b7       	in	r30, 0x3d	; 61
   18a86:	fe b7       	in	r31, 0x3e	; 62
   18a88:	81 83       	std	Z+1, r24	; 0x01
   18a8a:	92 83       	std	Z+2, r25	; 0x02
   18a8c:	a3 83       	std	Z+3, r26	; 0x03
   18a8e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18a92:	80 e0       	ldi	r24, 0x00	; 0
   18a94:	90 e0       	ldi	r25, 0x00	; 0
   18a96:	0d a5       	ldd	r16, Y+45	; 0x2d
   18a98:	1e a5       	ldd	r17, Y+46	; 0x2e
   18a9a:	2f a5       	ldd	r18, Y+47	; 0x2f
   18a9c:	38 a9       	ldd	r19, Y+48	; 0x30
   18a9e:	4d a9       	ldd	r20, Y+53	; 0x35
   18aa0:	5e a9       	ldd	r21, Y+54	; 0x36
   18aa2:	6f a9       	ldd	r22, Y+55	; 0x37
   18aa4:	78 ad       	ldd	r23, Y+56	; 0x38
   18aa6:	40 0f       	add	r20, r16
   18aa8:	51 1f       	adc	r21, r17
   18aaa:	62 1f       	adc	r22, r18
   18aac:	73 1f       	adc	r23, r19
   18aae:	0c 81       	ldd	r16, Y+4	; 0x04
   18ab0:	1d 81       	ldd	r17, Y+5	; 0x05
   18ab2:	2e 81       	ldd	r18, Y+6	; 0x06
   18ab4:	3f 81       	ldd	r19, Y+7	; 0x07
   18ab6:	04 17       	cp	r16, r20
   18ab8:	15 07       	cpc	r17, r21
   18aba:	26 07       	cpc	r18, r22
   18abc:	37 07       	cpc	r19, r23
   18abe:	80 f4       	brcc	.+32     	; 0x18ae0 <lif_check_volume+0x1aa>
   18ac0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18ac4:	81 ff       	sbrs	r24, 1
   18ac6:	0a c0       	rjmp	.+20     	; 0x18adc <lif_check_volume+0x1a6>
   18ac8:	8c e3       	ldi	r24, 0x3C	; 60
   18aca:	9a e3       	ldi	r25, 0x3A	; 58
   18acc:	a0 e0       	ldi	r26, 0x00	; 0
   18ace:	ed b7       	in	r30, 0x3d	; 61
   18ad0:	fe b7       	in	r31, 0x3e	; 62
   18ad2:	81 83       	std	Z+1, r24	; 0x01
   18ad4:	92 83       	std	Z+2, r25	; 0x02
   18ad6:	a3 83       	std	Z+3, r26	; 0x03
   18ad8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18adc:	80 e0       	ldi	r24, 0x00	; 0
   18ade:	90 e0       	ldi	r25, 0x00	; 0
   18ae0:	cd b7       	in	r28, 0x3d	; 61
   18ae2:	de b7       	in	r29, 0x3e	; 62
   18ae4:	27 96       	adiw	r28, 0x07	; 7
   18ae6:	e4 e0       	ldi	r30, 0x04	; 4
   18ae8:	0c 94 bb e0 	jmp	0x1c176	; 0x1c176 <__epilogue_restores__+0x1c>

00018aec <lif_check_dir>:
   18aec:	a5 e1       	ldi	r26, 0x15	; 21
   18aee:	b0 e0       	ldi	r27, 0x00	; 0
   18af0:	ec e7       	ldi	r30, 0x7C	; 124
   18af2:	f5 ec       	ldi	r31, 0xC5	; 197
   18af4:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   18af8:	6c 01       	movw	r12, r24
   18afa:	2a e5       	ldi	r18, 0x5A	; 90
   18afc:	c2 0e       	add	r12, r18
   18afe:	d1 1c       	adc	r13, r1
   18b00:	f6 01       	movw	r30, r12
   18b02:	20 81       	ld	r18, Z
   18b04:	31 81       	ldd	r19, Z+1	; 0x01
   18b06:	21 50       	subi	r18, 0x01	; 1
   18b08:	31 09       	sbc	r19, r1
   18b0a:	2e 3f       	cpi	r18, 0xFE	; 254
   18b0c:	3f 4f       	sbci	r19, 0xFF	; 255
   18b0e:	08 f0       	brcs	.+2      	; 0x18b12 <lif_check_dir+0x26>
   18b10:	8e c1       	rjmp	.+796    	; 0x18e2e <lif_check_dir+0x342>
   18b12:	9d 8b       	std	Y+21, r25	; 0x15
   18b14:	8c 8b       	std	Y+20, r24	; 0x14
   18b16:	7c 01       	movw	r14, r24
   18b18:	2f e4       	ldi	r18, 0x4F	; 79
   18b1a:	e2 0e       	add	r14, r18
   18b1c:	f1 1c       	adc	r15, r1
   18b1e:	c7 01       	movw	r24, r14
   18b20:	f9 d9       	rcall	.-3086   	; 0x17f14 <lif_checkname>
   18b22:	89 2b       	or	r24, r25
   18b24:	89 f4       	brne	.+34     	; 0x18b48 <lif_check_dir+0x5c>
   18b26:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18b2a:	81 ff       	sbrs	r24, 1
   18b2c:	0f c0       	rjmp	.+30     	; 0x18b4c <lif_check_dir+0x60>
   18b2e:	ed b7       	in	r30, 0x3d	; 61
   18b30:	fe b7       	in	r31, 0x3e	; 62
   18b32:	f5 82       	std	Z+5, r15	; 0x05
   18b34:	e4 82       	std	Z+4, r14	; 0x04
   18b36:	8b e1       	ldi	r24, 0x1B	; 27
   18b38:	9a e3       	ldi	r25, 0x3A	; 58
   18b3a:	a0 e0       	ldi	r26, 0x00	; 0
   18b3c:	81 83       	std	Z+1, r24	; 0x01
   18b3e:	92 83       	std	Z+2, r25	; 0x02
   18b40:	a3 83       	std	Z+3, r26	; 0x03
   18b42:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18b46:	02 c0       	rjmp	.+4      	; 0x18b4c <lif_check_dir+0x60>
   18b48:	01 e0       	ldi	r16, 0x01	; 1
   18b4a:	01 c0       	rjmp	.+2      	; 0x18b4e <lif_check_dir+0x62>
   18b4c:	00 e0       	ldi	r16, 0x00	; 0
   18b4e:	10 e0       	ldi	r17, 0x00	; 0
   18b50:	ec 89       	ldd	r30, Y+20	; 0x14
   18b52:	fd 89       	ldd	r31, Y+21	; 0x15
   18b54:	84 85       	ldd	r24, Z+12	; 0x0c
   18b56:	95 85       	ldd	r25, Z+13	; 0x0d
   18b58:	a6 85       	ldd	r26, Z+14	; 0x0e
   18b5a:	b7 85       	ldd	r27, Z+15	; 0x0f
   18b5c:	00 97       	sbiw	r24, 0x00	; 0
   18b5e:	a1 05       	cpc	r26, r1
   18b60:	b1 05       	cpc	r27, r1
   18b62:	29 f1       	breq	.+74     	; 0x18bae <lif_check_dir+0xc2>
   18b64:	e4 5a       	subi	r30, 0xA4	; 164
   18b66:	ff 4f       	sbci	r31, 0xFF	; 255
   18b68:	40 81       	ld	r20, Z
   18b6a:	51 81       	ldd	r21, Z+1	; 0x01
   18b6c:	62 81       	ldd	r22, Z+2	; 0x02
   18b6e:	73 81       	ldd	r23, Z+3	; 0x03
   18b70:	48 17       	cp	r20, r24
   18b72:	59 07       	cpc	r21, r25
   18b74:	6a 07       	cpc	r22, r26
   18b76:	7b 07       	cpc	r23, r27
   18b78:	d0 f4       	brcc	.+52     	; 0x18bae <lif_check_dir+0xc2>
   18b7a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18b7e:	21 ff       	sbrs	r18, 1
   18b80:	14 c0       	rjmp	.+40     	; 0x18baa <lif_check_dir+0xbe>
   18b82:	ed b7       	in	r30, 0x3d	; 61
   18b84:	fe b7       	in	r31, 0x3e	; 62
   18b86:	82 87       	std	Z+10, r24	; 0x0a
   18b88:	93 87       	std	Z+11, r25	; 0x0b
   18b8a:	a4 87       	std	Z+12, r26	; 0x0c
   18b8c:	b5 87       	std	Z+13, r27	; 0x0d
   18b8e:	46 83       	std	Z+6, r20	; 0x06
   18b90:	57 83       	std	Z+7, r21	; 0x07
   18b92:	60 87       	std	Z+8, r22	; 0x08
   18b94:	71 87       	std	Z+9, r23	; 0x09
   18b96:	f5 82       	std	Z+5, r15	; 0x05
   18b98:	e4 82       	std	Z+4, r14	; 0x04
   18b9a:	87 ed       	ldi	r24, 0xD7	; 215
   18b9c:	99 e3       	ldi	r25, 0x39	; 57
   18b9e:	a0 e0       	ldi	r26, 0x00	; 0
   18ba0:	81 83       	std	Z+1, r24	; 0x01
   18ba2:	92 83       	std	Z+2, r25	; 0x02
   18ba4:	a3 83       	std	Z+3, r26	; 0x03
   18ba6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18baa:	00 e0       	ldi	r16, 0x00	; 0
   18bac:	10 e0       	ldi	r17, 0x00	; 0
   18bae:	ec 89       	ldd	r30, Y+20	; 0x14
   18bb0:	fd 89       	ldd	r31, Y+21	; 0x15
   18bb2:	44 81       	ldd	r20, Z+4	; 0x04
   18bb4:	55 81       	ldd	r21, Z+5	; 0x05
   18bb6:	66 81       	ldd	r22, Z+6	; 0x06
   18bb8:	77 81       	ldd	r23, Z+7	; 0x07
   18bba:	41 15       	cp	r20, r1
   18bbc:	51 05       	cpc	r21, r1
   18bbe:	61 05       	cpc	r22, r1
   18bc0:	71 05       	cpc	r23, r1
   18bc2:	89 f1       	breq	.+98     	; 0x18c26 <lif_check_dir+0x13a>
   18bc4:	e4 5a       	subi	r30, 0xA4	; 164
   18bc6:	ff 4f       	sbci	r31, 0xFF	; 255
   18bc8:	80 80       	ld	r8, Z
   18bca:	91 80       	ldd	r9, Z+1	; 0x01
   18bcc:	a2 80       	ldd	r10, Z+2	; 0x02
   18bce:	b3 80       	ldd	r11, Z+3	; 0x03
   18bd0:	ec 89       	ldd	r30, Y+20	; 0x14
   18bd2:	fd 89       	ldd	r31, Y+21	; 0x15
   18bd4:	e0 5a       	subi	r30, 0xA0	; 160
   18bd6:	ff 4f       	sbci	r31, 0xFF	; 255
   18bd8:	80 81       	ld	r24, Z
   18bda:	91 81       	ldd	r25, Z+1	; 0x01
   18bdc:	a2 81       	ldd	r26, Z+2	; 0x02
   18bde:	b3 81       	ldd	r27, Z+3	; 0x03
   18be0:	88 0d       	add	r24, r8
   18be2:	99 1d       	adc	r25, r9
   18be4:	aa 1d       	adc	r26, r10
   18be6:	bb 1d       	adc	r27, r11
   18be8:	48 17       	cp	r20, r24
   18bea:	59 07       	cpc	r21, r25
   18bec:	6a 07       	cpc	r22, r26
   18bee:	7b 07       	cpc	r23, r27
   18bf0:	d0 f4       	brcc	.+52     	; 0x18c26 <lif_check_dir+0x13a>
   18bf2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18bf6:	21 ff       	sbrs	r18, 1
   18bf8:	14 c0       	rjmp	.+40     	; 0x18c22 <lif_check_dir+0x136>
   18bfa:	ed b7       	in	r30, 0x3d	; 61
   18bfc:	fe b7       	in	r31, 0x3e	; 62
   18bfe:	42 87       	std	Z+10, r20	; 0x0a
   18c00:	53 87       	std	Z+11, r21	; 0x0b
   18c02:	64 87       	std	Z+12, r22	; 0x0c
   18c04:	75 87       	std	Z+13, r23	; 0x0d
   18c06:	86 83       	std	Z+6, r24	; 0x06
   18c08:	97 83       	std	Z+7, r25	; 0x07
   18c0a:	a0 87       	std	Z+8, r26	; 0x08
   18c0c:	b1 87       	std	Z+9, r27	; 0x09
   18c0e:	f5 82       	std	Z+5, r15	; 0x05
   18c10:	e4 82       	std	Z+4, r14	; 0x04
   18c12:	86 e9       	ldi	r24, 0x96	; 150
   18c14:	99 e3       	ldi	r25, 0x39	; 57
   18c16:	a0 e0       	ldi	r26, 0x00	; 0
   18c18:	81 83       	std	Z+1, r24	; 0x01
   18c1a:	92 83       	std	Z+2, r25	; 0x02
   18c1c:	a3 83       	std	Z+3, r26	; 0x03
   18c1e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18c22:	00 e0       	ldi	r16, 0x00	; 0
   18c24:	10 e0       	ldi	r17, 0x00	; 0
   18c26:	ec 89       	ldd	r30, Y+20	; 0x14
   18c28:	fd 89       	ldd	r31, Y+21	; 0x15
   18c2a:	e6 59       	subi	r30, 0x96	; 150
   18c2c:	ff 4f       	sbci	r31, 0xFF	; 255
   18c2e:	80 81       	ld	r24, Z
   18c30:	91 81       	ldd	r25, Z+1	; 0x01
   18c32:	81 30       	cpi	r24, 0x01	; 1
   18c34:	f0 e8       	ldi	r31, 0x80	; 128
   18c36:	9f 07       	cpc	r25, r31
   18c38:	a1 f0       	breq	.+40     	; 0x18c62 <lif_check_dir+0x176>
   18c3a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18c3e:	21 ff       	sbrs	r18, 1
   18c40:	0e c0       	rjmp	.+28     	; 0x18c5e <lif_check_dir+0x172>
   18c42:	ed b7       	in	r30, 0x3d	; 61
   18c44:	fe b7       	in	r31, 0x3e	; 62
   18c46:	97 83       	std	Z+7, r25	; 0x07
   18c48:	86 83       	std	Z+6, r24	; 0x06
   18c4a:	f5 82       	std	Z+5, r15	; 0x05
   18c4c:	e4 82       	std	Z+4, r14	; 0x04
   18c4e:	88 e6       	ldi	r24, 0x68	; 104
   18c50:	99 e3       	ldi	r25, 0x39	; 57
   18c52:	a0 e0       	ldi	r26, 0x00	; 0
   18c54:	81 83       	std	Z+1, r24	; 0x01
   18c56:	92 83       	std	Z+2, r25	; 0x02
   18c58:	a3 83       	std	Z+3, r26	; 0x03
   18c5a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18c5e:	00 e0       	ldi	r16, 0x00	; 0
   18c60:	10 e0       	ldi	r17, 0x00	; 0
   18c62:	f6 01       	movw	r30, r12
   18c64:	80 81       	ld	r24, Z
   18c66:	91 81       	ldd	r25, Z+1	; 0x01
   18c68:	8c 7f       	andi	r24, 0xFC	; 252
   18c6a:	80 31       	cpi	r24, 0x10	; 16
   18c6c:	90 4e       	sbci	r25, 0xE0	; 224
   18c6e:	09 f0       	breq	.+2      	; 0x18c72 <lif_check_dir+0x186>
   18c70:	af c0       	rjmp	.+350    	; 0x18dd0 <lif_check_dir+0x2e4>
   18c72:	cc 88       	ldd	r12, Y+20	; 0x14
   18c74:	dd 88       	ldd	r13, Y+21	; 0x15
   18c76:	2c e6       	ldi	r18, 0x6C	; 108
   18c78:	c2 0e       	add	r12, r18
   18c7a:	d1 1c       	adc	r13, r1
   18c7c:	f6 01       	movw	r30, r12
   18c7e:	80 81       	ld	r24, Z
   18c80:	91 81       	ldd	r25, Z+1	; 0x01
   18c82:	00 97       	sbiw	r24, 0x00	; 0
   18c84:	09 f4       	brne	.+2      	; 0x18c88 <lif_check_dir+0x19c>
   18c86:	a4 c0       	rjmp	.+328    	; 0x18dd0 <lif_check_dir+0x2e4>
   18c88:	4c 01       	movw	r8, r24
   18c8a:	a1 2c       	mov	r10, r1
   18c8c:	b1 2c       	mov	r11, r1
   18c8e:	77 27       	eor	r23, r23
   18c90:	6b 2d       	mov	r22, r11
   18c92:	5a 2d       	mov	r21, r10
   18c94:	49 2d       	mov	r20, r9
   18c96:	9c 01       	movw	r18, r24
   18c98:	33 27       	eor	r19, r19
   18c9a:	3b 8b       	std	Y+19, r19	; 0x13
   18c9c:	2a 8b       	std	Y+18, r18	; 0x12
   18c9e:	db 01       	movw	r26, r22
   18ca0:	ca 01       	movw	r24, r20
   18ca2:	23 2b       	or	r18, r19
   18ca4:	19 f0       	breq	.+6      	; 0x18cac <lif_check_dir+0x1c0>
   18ca6:	01 96       	adiw	r24, 0x01	; 1
   18ca8:	a1 1d       	adc	r26, r1
   18caa:	b1 1d       	adc	r27, r1
   18cac:	2c 88       	ldd	r2, Y+20	; 0x14
   18cae:	3d 88       	ldd	r3, Y+21	; 0x15
   18cb0:	30 e6       	ldi	r19, 0x60	; 96
   18cb2:	23 0e       	add	r2, r19
   18cb4:	31 1c       	adc	r3, r1
   18cb6:	f1 01       	movw	r30, r2
   18cb8:	40 80       	ld	r4, Z
   18cba:	51 80       	ldd	r5, Z+1	; 0x01
   18cbc:	62 80       	ldd	r6, Z+2	; 0x02
   18cbe:	73 80       	ldd	r7, Z+3	; 0x03
   18cc0:	48 16       	cp	r4, r24
   18cc2:	59 06       	cpc	r5, r25
   18cc4:	6a 06       	cpc	r6, r26
   18cc6:	7b 06       	cpc	r7, r27
   18cc8:	30 f5       	brcc	.+76     	; 0x18d16 <lif_check_dir+0x22a>
   18cca:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18cce:	21 ff       	sbrs	r18, 1
   18cd0:	20 c0       	rjmp	.+64     	; 0x18d12 <lif_check_dir+0x226>
   18cd2:	2a 89       	ldd	r18, Y+18	; 0x12
   18cd4:	3b 89       	ldd	r19, Y+19	; 0x13
   18cd6:	23 2b       	or	r18, r19
   18cd8:	21 f0       	breq	.+8      	; 0x18ce2 <lif_check_dir+0x1f6>
   18cda:	4f 5f       	subi	r20, 0xFF	; 255
   18cdc:	5f 4f       	sbci	r21, 0xFF	; 255
   18cde:	6f 4f       	sbci	r22, 0xFF	; 255
   18ce0:	7f 4f       	sbci	r23, 0xFF	; 255
   18ce2:	ed b7       	in	r30, 0x3d	; 61
   18ce4:	fe b7       	in	r31, 0x3e	; 62
   18ce6:	46 86       	std	Z+14, r4	; 0x0e
   18ce8:	57 86       	std	Z+15, r5	; 0x0f
   18cea:	60 8a       	std	Z+16, r6	; 0x10
   18cec:	71 8a       	std	Z+17, r7	; 0x11
   18cee:	42 87       	std	Z+10, r20	; 0x0a
   18cf0:	53 87       	std	Z+11, r21	; 0x0b
   18cf2:	64 87       	std	Z+12, r22	; 0x0c
   18cf4:	75 87       	std	Z+13, r23	; 0x0d
   18cf6:	86 82       	std	Z+6, r8	; 0x06
   18cf8:	97 82       	std	Z+7, r9	; 0x07
   18cfa:	a0 86       	std	Z+8, r10	; 0x08
   18cfc:	b1 86       	std	Z+9, r11	; 0x09
   18cfe:	f5 82       	std	Z+5, r15	; 0x05
   18d00:	e4 82       	std	Z+4, r14	; 0x04
   18d02:	8d e1       	ldi	r24, 0x1D	; 29
   18d04:	99 e3       	ldi	r25, 0x39	; 57
   18d06:	a0 e0       	ldi	r26, 0x00	; 0
   18d08:	81 83       	std	Z+1, r24	; 0x01
   18d0a:	92 83       	std	Z+2, r25	; 0x02
   18d0c:	a3 83       	std	Z+3, r26	; 0x03
   18d0e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18d12:	00 e0       	ldi	r16, 0x00	; 0
   18d14:	10 e0       	ldi	r17, 0x00	; 0
   18d16:	f6 01       	movw	r30, r12
   18d18:	20 81       	ld	r18, Z
   18d1a:	31 81       	ldd	r19, Z+1	; 0x01
   18d1c:	a9 01       	movw	r20, r18
   18d1e:	60 e0       	ldi	r22, 0x00	; 0
   18d20:	70 e0       	ldi	r23, 0x00	; 0
   18d22:	bb 27       	eor	r27, r27
   18d24:	a7 2f       	mov	r26, r23
   18d26:	96 2f       	mov	r25, r22
   18d28:	85 2f       	mov	r24, r21
   18d2a:	f9 01       	movw	r30, r18
   18d2c:	ff 27       	eor	r31, r31
   18d2e:	fb 8b       	std	Y+19, r31	; 0x13
   18d30:	ea 8b       	std	Y+18, r30	; 0x12
   18d32:	2c 01       	movw	r4, r24
   18d34:	3d 01       	movw	r6, r26
   18d36:	ef 2b       	or	r30, r31
   18d38:	29 f0       	breq	.+10     	; 0x18d44 <lif_check_dir+0x258>
   18d3a:	ff ef       	ldi	r31, 0xFF	; 255
   18d3c:	4f 1a       	sub	r4, r31
   18d3e:	5f 0a       	sbc	r5, r31
   18d40:	6f 0a       	sbc	r6, r31
   18d42:	7f 0a       	sbc	r7, r31
   18d44:	f1 01       	movw	r30, r2
   18d46:	80 80       	ld	r8, Z
   18d48:	91 80       	ldd	r9, Z+1	; 0x01
   18d4a:	a2 80       	ldd	r10, Z+2	; 0x02
   18d4c:	b3 80       	ldd	r11, Z+3	; 0x03
   18d4e:	48 14       	cp	r4, r8
   18d50:	59 04       	cpc	r5, r9
   18d52:	6a 04       	cpc	r6, r10
   18d54:	7b 04       	cpc	r7, r11
   18d56:	28 f5       	brcc	.+74     	; 0x18da2 <lif_check_dir+0x2b6>
   18d58:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18d5c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18d60:	32 ff       	sbrs	r19, 2
   18d62:	1f c0       	rjmp	.+62     	; 0x18da2 <lif_check_dir+0x2b6>
   18d64:	2a 89       	ldd	r18, Y+18	; 0x12
   18d66:	3b 89       	ldd	r19, Y+19	; 0x13
   18d68:	23 2b       	or	r18, r19
   18d6a:	19 f0       	breq	.+6      	; 0x18d72 <lif_check_dir+0x286>
   18d6c:	01 96       	adiw	r24, 0x01	; 1
   18d6e:	a1 1d       	adc	r26, r1
   18d70:	b1 1d       	adc	r27, r1
   18d72:	ed b7       	in	r30, 0x3d	; 61
   18d74:	fe b7       	in	r31, 0x3e	; 62
   18d76:	86 86       	std	Z+14, r8	; 0x0e
   18d78:	97 86       	std	Z+15, r9	; 0x0f
   18d7a:	a0 8a       	std	Z+16, r10	; 0x10
   18d7c:	b1 8a       	std	Z+17, r11	; 0x11
   18d7e:	82 87       	std	Z+10, r24	; 0x0a
   18d80:	93 87       	std	Z+11, r25	; 0x0b
   18d82:	a4 87       	std	Z+12, r26	; 0x0c
   18d84:	b5 87       	std	Z+13, r27	; 0x0d
   18d86:	46 83       	std	Z+6, r20	; 0x06
   18d88:	57 83       	std	Z+7, r21	; 0x07
   18d8a:	60 87       	std	Z+8, r22	; 0x08
   18d8c:	71 87       	std	Z+9, r23	; 0x09
   18d8e:	f5 82       	std	Z+5, r15	; 0x05
   18d90:	e4 82       	std	Z+4, r14	; 0x04
   18d92:	82 ed       	ldi	r24, 0xD2	; 210
   18d94:	98 e3       	ldi	r25, 0x38	; 56
   18d96:	a0 e0       	ldi	r26, 0x00	; 0
   18d98:	81 83       	std	Z+1, r24	; 0x01
   18d9a:	92 83       	std	Z+2, r25	; 0x02
   18d9c:	a3 83       	std	Z+3, r26	; 0x03
   18d9e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18da2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18da6:	81 ff       	sbrs	r24, 1
   18da8:	13 c0       	rjmp	.+38     	; 0x18dd0 <lif_check_dir+0x2e4>
   18daa:	f6 01       	movw	r30, r12
   18dac:	80 81       	ld	r24, Z
   18dae:	91 81       	ldd	r25, Z+1	; 0x01
   18db0:	89 2b       	or	r24, r25
   18db2:	71 f4       	brne	.+28     	; 0x18dd0 <lif_check_dir+0x2e4>
   18db4:	ed b7       	in	r30, 0x3d	; 61
   18db6:	fe b7       	in	r31, 0x3e	; 62
   18db8:	f5 82       	std	Z+5, r15	; 0x05
   18dba:	e4 82       	std	Z+4, r14	; 0x04
   18dbc:	87 ea       	ldi	r24, 0xA7	; 167
   18dbe:	98 e3       	ldi	r25, 0x38	; 56
   18dc0:	a0 e0       	ldi	r26, 0x00	; 0
   18dc2:	81 83       	std	Z+1, r24	; 0x01
   18dc4:	92 83       	std	Z+2, r25	; 0x02
   18dc6:	a3 83       	std	Z+3, r26	; 0x03
   18dc8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18dcc:	00 e0       	ldi	r16, 0x00	; 0
   18dce:	10 e0       	ldi	r17, 0x00	; 0
   18dd0:	ec 89       	ldd	r30, Y+20	; 0x14
   18dd2:	fd 89       	ldd	r31, Y+21	; 0x15
   18dd4:	e2 59       	subi	r30, 0x92	; 146
   18dd6:	ff 4f       	sbci	r31, 0xFF	; 255
   18dd8:	20 81       	ld	r18, Z
   18dda:	31 81       	ldd	r19, Z+1	; 0x01
   18ddc:	21 15       	cp	r18, r1
   18dde:	f1 e0       	ldi	r31, 0x01	; 1
   18de0:	3f 07       	cpc	r19, r31
   18de2:	41 f1       	breq	.+80     	; 0x18e34 <lif_check_dir+0x348>
   18de4:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   18de8:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18dec:	ca 01       	movw	r24, r20
   18dee:	82 70       	andi	r24, 0x02	; 2
   18df0:	99 27       	eor	r25, r25
   18df2:	41 ff       	sbrs	r20, 1
   18df4:	20 c0       	rjmp	.+64     	; 0x18e36 <lif_check_dir+0x34a>
   18df6:	c9 01       	movw	r24, r18
   18df8:	a0 e0       	ldi	r26, 0x00	; 0
   18dfa:	b0 e0       	ldi	r27, 0x00	; 0
   18dfc:	ed b7       	in	r30, 0x3d	; 61
   18dfe:	fe b7       	in	r31, 0x3e	; 62
   18e00:	86 83       	std	Z+6, r24	; 0x06
   18e02:	97 83       	std	Z+7, r25	; 0x07
   18e04:	a0 87       	std	Z+8, r26	; 0x08
   18e06:	b1 87       	std	Z+9, r27	; 0x09
   18e08:	ec 89       	ldd	r30, Y+20	; 0x14
   18e0a:	fd 89       	ldd	r31, Y+21	; 0x15
   18e0c:	80 81       	ld	r24, Z
   18e0e:	91 81       	ldd	r25, Z+1	; 0x01
   18e10:	ed b7       	in	r30, 0x3d	; 61
   18e12:	fe b7       	in	r31, 0x3e	; 62
   18e14:	95 83       	std	Z+5, r25	; 0x05
   18e16:	84 83       	std	Z+4, r24	; 0x04
   18e18:	8b e7       	ldi	r24, 0x7B	; 123
   18e1a:	98 e3       	ldi	r25, 0x38	; 56
   18e1c:	a0 e0       	ldi	r26, 0x00	; 0
   18e1e:	81 83       	std	Z+1, r24	; 0x01
   18e20:	92 83       	std	Z+2, r25	; 0x02
   18e22:	a3 83       	std	Z+3, r26	; 0x03
   18e24:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18e28:	80 e0       	ldi	r24, 0x00	; 0
   18e2a:	90 e0       	ldi	r25, 0x00	; 0
   18e2c:	04 c0       	rjmp	.+8      	; 0x18e36 <lif_check_dir+0x34a>
   18e2e:	81 e0       	ldi	r24, 0x01	; 1
   18e30:	90 e0       	ldi	r25, 0x00	; 0
   18e32:	01 c0       	rjmp	.+2      	; 0x18e36 <lif_check_dir+0x34a>
   18e34:	c8 01       	movw	r24, r16
   18e36:	65 96       	adiw	r28, 0x15	; 21
   18e38:	e2 e1       	ldi	r30, 0x12	; 18
   18e3a:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00018e3e <lif_close_volume>:
   18e3e:	cf 93       	push	r28
   18e40:	df 93       	push	r29
   18e42:	00 97       	sbiw	r24, 0x00	; 0
   18e44:	f9 f0       	breq	.+62     	; 0x18e84 <lif_close_volume+0x46>
   18e46:	ec 01       	movw	r28, r24
   18e48:	8a 81       	ldd	r24, Y+2	; 0x02
   18e4a:	9b 81       	ldd	r25, Y+3	; 0x03
   18e4c:	00 97       	sbiw	r24, 0x00	; 0
   18e4e:	79 f0       	breq	.+30     	; 0x18e6e <lif_close_volume+0x30>
   18e50:	22 e0       	ldi	r18, 0x02	; 2
   18e52:	30 e0       	ldi	r19, 0x00	; 0
   18e54:	40 e0       	ldi	r20, 0x00	; 0
   18e56:	50 e0       	ldi	r21, 0x00	; 0
   18e58:	ba 01       	movw	r22, r20
   18e5a:	0e 94 d2 7a 	call	0xf5a4	; 0xf5a4 <fseek>
   18e5e:	8a 81       	ldd	r24, Y+2	; 0x02
   18e60:	9b 81       	ldd	r25, Y+3	; 0x03
   18e62:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
   18e66:	1b 82       	std	Y+3, r1	; 0x03
   18e68:	1a 82       	std	Y+2, r1	; 0x02
   18e6a:	0e 94 b5 7b 	call	0xf76a	; 0xf76a <sync>
   18e6e:	88 81       	ld	r24, Y
   18e70:	99 81       	ldd	r25, Y+1	; 0x01
   18e72:	00 97       	sbiw	r24, 0x00	; 0
   18e74:	11 f0       	breq	.+4      	; 0x18e7a <lif_close_volume+0x3c>
   18e76:	0e 94 bb bd 	call	0x17b76	; 0x17b76 <lif_free>
   18e7a:	ce 01       	movw	r24, r28
   18e7c:	8f db       	rcall	.-2274   	; 0x1859c <lif_vol_clear>
   18e7e:	ce 01       	movw	r24, r28
   18e80:	0e 94 bb bd 	call	0x17b76	; 0x17b76 <lif_free>
   18e84:	df 91       	pop	r29
   18e86:	cf 91       	pop	r28
   18e88:	08 95       	ret

00018e8a <lif_checkdirindex>:
   18e8a:	cf 92       	push	r12
   18e8c:	df 92       	push	r13
   18e8e:	ef 92       	push	r14
   18e90:	ff 92       	push	r15
   18e92:	cf 93       	push	r28
   18e94:	df 93       	push	r29
   18e96:	ad b7       	in	r26, 0x3d	; 61
   18e98:	be b7       	in	r27, 0x3e	; 62
   18e9a:	17 97       	sbiw	r26, 0x07	; 7
   18e9c:	0f b6       	in	r0, 0x3f	; 63
   18e9e:	f8 94       	cli
   18ea0:	be bf       	out	0x3e, r27	; 62
   18ea2:	0f be       	out	0x3f, r0	; 63
   18ea4:	ad bf       	out	0x3d, r26	; 61
   18ea6:	9b 01       	movw	r18, r22
   18ea8:	77 fd       	sbrc	r23, 7
   18eaa:	25 c0       	rjmp	.+74     	; 0x18ef6 <lif_checkdirindex+0x6c>
   18eac:	ab 01       	movw	r20, r22
   18eae:	77 0f       	add	r23, r23
   18eb0:	66 0b       	sbc	r22, r22
   18eb2:	77 0b       	sbc	r23, r23
   18eb4:	e5 e0       	ldi	r30, 0x05	; 5
   18eb6:	44 0f       	add	r20, r20
   18eb8:	55 1f       	adc	r21, r21
   18eba:	66 1f       	adc	r22, r22
   18ebc:	77 1f       	adc	r23, r23
   18ebe:	ea 95       	dec	r30
   18ec0:	d1 f7       	brne	.-12     	; 0x18eb6 <lif_checkdirindex+0x2c>
   18ec2:	c5 2e       	mov	r12, r21
   18ec4:	d6 2e       	mov	r13, r22
   18ec6:	e7 2e       	mov	r14, r23
   18ec8:	ff 24       	eor	r15, r15
   18eca:	55 27       	eor	r21, r21
   18ecc:	66 27       	eor	r22, r22
   18ece:	77 27       	eor	r23, r23
   18ed0:	45 2b       	or	r20, r21
   18ed2:	46 2b       	or	r20, r22
   18ed4:	47 2b       	or	r20, r23
   18ed6:	29 f0       	breq	.+10     	; 0x18ee2 <lif_checkdirindex+0x58>
   18ed8:	4f ef       	ldi	r20, 0xFF	; 255
   18eda:	c4 1a       	sub	r12, r20
   18edc:	d4 0a       	sbc	r13, r20
   18ede:	e4 0a       	sbc	r14, r20
   18ee0:	f4 0a       	sbc	r15, r20
   18ee2:	fc 01       	movw	r30, r24
   18ee4:	45 a9       	ldd	r20, Z+53	; 0x35
   18ee6:	56 a9       	ldd	r21, Z+54	; 0x36
   18ee8:	67 a9       	ldd	r22, Z+55	; 0x37
   18eea:	70 ad       	ldd	r23, Z+56	; 0x38
   18eec:	4c 15       	cp	r20, r12
   18eee:	5d 05       	cpc	r21, r13
   18ef0:	6e 05       	cpc	r22, r14
   18ef2:	7f 05       	cpc	r23, r15
   18ef4:	08 f5       	brcc	.+66     	; 0x18f38 <lif_checkdirindex+0xae>
   18ef6:	ec 01       	movw	r28, r24
   18ef8:	ed b7       	in	r30, 0x3d	; 61
   18efa:	fe b7       	in	r31, 0x3e	; 62
   18efc:	37 83       	std	Z+7, r19	; 0x07
   18efe:	26 83       	std	Z+6, r18	; 0x06
   18f00:	88 81       	ld	r24, Y
   18f02:	99 81       	ldd	r25, Y+1	; 0x01
   18f04:	95 83       	std	Z+5, r25	; 0x05
   18f06:	84 83       	std	Z+4, r24	; 0x04
   18f08:	88 eb       	ldi	r24, 0xB8	; 184
   18f0a:	97 e3       	ldi	r25, 0x37	; 55
   18f0c:	a0 e0       	ldi	r26, 0x00	; 0
   18f0e:	81 83       	std	Z+1, r24	; 0x01
   18f10:	92 83       	std	Z+2, r25	; 0x02
   18f12:	a3 83       	std	Z+3, r26	; 0x03
   18f14:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   18f18:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   18f1c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18f20:	c9 01       	movw	r24, r18
   18f22:	88 27       	eor	r24, r24
   18f24:	94 70       	andi	r25, 0x04	; 4
   18f26:	32 ff       	sbrs	r19, 2
   18f28:	09 c0       	rjmp	.+18     	; 0x18f3c <lif_checkdirindex+0xb2>
   18f2a:	66 ee       	ldi	r22, 0xE6	; 230
   18f2c:	75 e1       	ldi	r23, 0x15	; 21
   18f2e:	ce 01       	movw	r24, r28
   18f30:	3c db       	rcall	.-2440   	; 0x185aa <lif_dump_vol>
   18f32:	80 e0       	ldi	r24, 0x00	; 0
   18f34:	90 e0       	ldi	r25, 0x00	; 0
   18f36:	02 c0       	rjmp	.+4      	; 0x18f3c <lif_checkdirindex+0xb2>
   18f38:	81 e0       	ldi	r24, 0x01	; 1
   18f3a:	90 e0       	ldi	r25, 0x00	; 0
   18f3c:	ad b7       	in	r26, 0x3d	; 61
   18f3e:	be b7       	in	r27, 0x3e	; 62
   18f40:	17 96       	adiw	r26, 0x07	; 7
   18f42:	0f b6       	in	r0, 0x3f	; 63
   18f44:	f8 94       	cli
   18f46:	be bf       	out	0x3e, r27	; 62
   18f48:	0f be       	out	0x3f, r0	; 63
   18f4a:	ad bf       	out	0x3d, r26	; 61
   18f4c:	df 91       	pop	r29
   18f4e:	cf 91       	pop	r28
   18f50:	ff 90       	pop	r15
   18f52:	ef 90       	pop	r14
   18f54:	df 90       	pop	r13
   18f56:	cf 90       	pop	r12
   18f58:	08 95       	ret

00018f5a <lif_readdirindex>:
   18f5a:	a5 e2       	ldi	r26, 0x25	; 37
   18f5c:	b0 e0       	ldi	r27, 0x00	; 0
   18f5e:	e3 eb       	ldi	r30, 0xB3	; 179
   18f60:	f7 ec       	ldi	r31, 0xC7	; 199
   18f62:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
   18f66:	7c 01       	movw	r14, r24
   18f68:	6b 01       	movw	r12, r22
   18f6a:	8f df       	rcall	.-226    	; 0x18e8a <lif_checkdirindex>
   18f6c:	89 2b       	or	r24, r25
   18f6e:	19 f4       	brne	.+6      	; 0x18f76 <lif_readdirindex+0x1c>
   18f70:	00 e0       	ldi	r16, 0x00	; 0
   18f72:	10 e0       	ldi	r17, 0x00	; 0
   18f74:	54 c0       	rjmp	.+168    	; 0x1901e <lif_readdirindex+0xc4>
   18f76:	f7 01       	movw	r30, r14
   18f78:	85 a5       	ldd	r24, Z+45	; 0x2d
   18f7a:	96 a5       	ldd	r25, Z+46	; 0x2e
   18f7c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18f7e:	b0 a9       	ldd	r27, Z+48	; 0x30
   18f80:	44 27       	eor	r20, r20
   18f82:	58 2f       	mov	r21, r24
   18f84:	69 2f       	mov	r22, r25
   18f86:	7a 2f       	mov	r23, r26
   18f88:	c6 01       	movw	r24, r12
   18f8a:	0d 2c       	mov	r0, r13
   18f8c:	00 0c       	add	r0, r0
   18f8e:	aa 0b       	sbc	r26, r26
   18f90:	bb 0b       	sbc	r27, r27
   18f92:	35 e0       	ldi	r19, 0x05	; 5
   18f94:	88 0f       	add	r24, r24
   18f96:	99 1f       	adc	r25, r25
   18f98:	aa 1f       	adc	r26, r26
   18f9a:	bb 1f       	adc	r27, r27
   18f9c:	3a 95       	dec	r19
   18f9e:	d1 f7       	brne	.-12     	; 0x18f94 <lif_readdirindex+0x3a>
   18fa0:	9a 01       	movw	r18, r20
   18fa2:	ab 01       	movw	r20, r22
   18fa4:	28 0f       	add	r18, r24
   18fa6:	39 1f       	adc	r19, r25
   18fa8:	4a 1f       	adc	r20, r26
   18faa:	5b 1f       	adc	r21, r27
   18fac:	00 e2       	ldi	r16, 0x20	; 32
   18fae:	10 e0       	ldi	r17, 0x00	; 0
   18fb0:	be 01       	movw	r22, r28
   18fb2:	6a 5f       	subi	r22, 0xFA	; 250
   18fb4:	7f 4f       	sbci	r23, 0xFF	; 255
   18fb6:	c7 01       	movw	r24, r14
   18fb8:	0e 94 73 be 	call	0x17ce6	; 0x17ce6 <lif_read>
   18fbc:	60 32       	cpi	r22, 0x20	; 32
   18fbe:	71 05       	cpc	r23, r1
   18fc0:	81 05       	cpc	r24, r1
   18fc2:	91 05       	cpc	r25, r1
   18fc4:	a8 f2       	brcs	.-86     	; 0x18f70 <lif_readdirindex+0x16>
   18fc6:	b7 01       	movw	r22, r14
   18fc8:	ce 01       	movw	r24, r28
   18fca:	06 96       	adiw	r24, 0x06	; 6
   18fcc:	91 d9       	rcall	.-3294   	; 0x182f0 <lif_str2dir>
   18fce:	f7 01       	movw	r30, r14
   18fd0:	e6 5a       	subi	r30, 0xA6	; 166
   18fd2:	ff 4f       	sbci	r31, 0xFF	; 255
   18fd4:	80 81       	ld	r24, Z
   18fd6:	91 81       	ldd	r25, Z+1	; 0x01
   18fd8:	01 96       	adiw	r24, 0x01	; 1
   18fda:	19 f4       	brne	.+6      	; 0x18fe2 <lif_readdirindex+0x88>
   18fdc:	f7 01       	movw	r30, r14
   18fde:	d3 a2       	std	Z+35, r13	; 0x23
   18fe0:	c2 a2       	std	Z+34, r12	; 0x22
   18fe2:	c7 01       	movw	r24, r14
   18fe4:	83 dd       	rcall	.-1274   	; 0x18aec <lif_check_dir>
   18fe6:	8c 01       	movw	r16, r24
   18fe8:	89 2b       	or	r24, r25
   18fea:	b9 f4       	brne	.+46     	; 0x1901a <lif_readdirindex+0xc0>
   18fec:	ed b7       	in	r30, 0x3d	; 61
   18fee:	fe b7       	in	r31, 0x3e	; 62
   18ff0:	d5 82       	std	Z+5, r13	; 0x05
   18ff2:	c4 82       	std	Z+4, r12	; 0x04
   18ff4:	88 e9       	ldi	r24, 0x98	; 152
   18ff6:	97 e3       	ldi	r25, 0x37	; 55
   18ff8:	a0 e0       	ldi	r26, 0x00	; 0
   18ffa:	81 83       	std	Z+1, r24	; 0x01
   18ffc:	92 83       	std	Z+2, r25	; 0x02
   18ffe:	a3 83       	std	Z+3, r26	; 0x03
   19000:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   19004:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19008:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1900c:	92 ff       	sbrs	r25, 2
   1900e:	b0 cf       	rjmp	.-160    	; 0x18f70 <lif_readdirindex+0x16>
   19010:	67 ef       	ldi	r22, 0xF7	; 247
   19012:	75 e1       	ldi	r23, 0x15	; 21
   19014:	c7 01       	movw	r24, r14
   19016:	c9 da       	rcall	.-2670   	; 0x185aa <lif_dump_vol>
   19018:	02 c0       	rjmp	.+4      	; 0x1901e <lif_readdirindex+0xc4>
   1901a:	01 e0       	ldi	r16, 0x01	; 1
   1901c:	10 e0       	ldi	r17, 0x00	; 0
   1901e:	c8 01       	movw	r24, r16
   19020:	a5 96       	adiw	r28, 0x25	; 37
   19022:	e8 e0       	ldi	r30, 0x08	; 8
   19024:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

00019028 <lif_writedirindex>:
   19028:	a0 e2       	ldi	r26, 0x20	; 32
   1902a:	b0 e0       	ldi	r27, 0x00	; 0
   1902c:	ea e1       	ldi	r30, 0x1A	; 26
   1902e:	f8 ec       	ldi	r31, 0xC8	; 200
   19030:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
   19034:	5c 01       	movw	r10, r24
   19036:	6b 01       	movw	r12, r22
   19038:	59 dd       	rcall	.-1358   	; 0x18aec <lif_check_dir>
   1903a:	7c 01       	movw	r14, r24
   1903c:	89 2b       	or	r24, r25
   1903e:	71 f4       	brne	.+28     	; 0x1905c <lif_writedirindex+0x34>
   19040:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19044:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19048:	92 fd       	sbrc	r25, 2
   1904a:	03 c0       	rjmp	.+6      	; 0x19052 <lif_writedirindex+0x2a>
   1904c:	e1 2c       	mov	r14, r1
   1904e:	f1 2c       	mov	r15, r1
   19050:	42 c0       	rjmp	.+132    	; 0x190d6 <lif_writedirindex+0xae>
   19052:	68 e0       	ldi	r22, 0x08	; 8
   19054:	76 e1       	ldi	r23, 0x16	; 22
   19056:	c5 01       	movw	r24, r10
   19058:	a8 da       	rcall	.-2736   	; 0x185aa <lif_dump_vol>
   1905a:	3d c0       	rjmp	.+122    	; 0x190d6 <lif_writedirindex+0xae>
   1905c:	b6 01       	movw	r22, r12
   1905e:	c5 01       	movw	r24, r10
   19060:	14 df       	rcall	.-472    	; 0x18e8a <lif_checkdirindex>
   19062:	89 2b       	or	r24, r25
   19064:	99 f3       	breq	.-26     	; 0x1904c <lif_writedirindex+0x24>
   19066:	f5 01       	movw	r30, r10
   19068:	e6 5a       	subi	r30, 0xA6	; 166
   1906a:	ff 4f       	sbci	r31, 0xFF	; 255
   1906c:	80 81       	ld	r24, Z
   1906e:	91 81       	ldd	r25, Z+1	; 0x01
   19070:	01 96       	adiw	r24, 0x01	; 1
   19072:	19 f4       	brne	.+6      	; 0x1907a <lif_writedirindex+0x52>
   19074:	f5 01       	movw	r30, r10
   19076:	d3 a2       	std	Z+35, r13	; 0x23
   19078:	c2 a2       	std	Z+34, r12	; 0x22
   1907a:	f5 01       	movw	r30, r10
   1907c:	85 a5       	ldd	r24, Z+45	; 0x2d
   1907e:	96 a5       	ldd	r25, Z+46	; 0x2e
   19080:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19082:	b0 a9       	ldd	r27, Z+48	; 0x30
   19084:	ba 2f       	mov	r27, r26
   19086:	a9 2f       	mov	r26, r25
   19088:	98 2f       	mov	r25, r24
   1908a:	88 27       	eor	r24, r24
   1908c:	0d 2c       	mov	r0, r13
   1908e:	00 0c       	add	r0, r0
   19090:	ee 08       	sbc	r14, r14
   19092:	ff 08       	sbc	r15, r15
   19094:	35 e0       	ldi	r19, 0x05	; 5
   19096:	cc 0c       	add	r12, r12
   19098:	dd 1c       	adc	r13, r13
   1909a:	ee 1c       	adc	r14, r14
   1909c:	ff 1c       	adc	r15, r15
   1909e:	3a 95       	dec	r19
   190a0:	d1 f7       	brne	.-12     	; 0x19096 <lif_writedirindex+0x6e>
   190a2:	c8 0e       	add	r12, r24
   190a4:	d9 1e       	adc	r13, r25
   190a6:	ea 1e       	adc	r14, r26
   190a8:	fb 1e       	adc	r15, r27
   190aa:	be 01       	movw	r22, r28
   190ac:	6f 5f       	subi	r22, 0xFF	; 255
   190ae:	7f 4f       	sbci	r23, 0xFF	; 255
   190b0:	c5 01       	movw	r24, r10
   190b2:	b3 d8       	rcall	.-3738   	; 0x1821a <lif_dir2str>
   190b4:	00 e2       	ldi	r16, 0x20	; 32
   190b6:	10 e0       	ldi	r17, 0x00	; 0
   190b8:	a7 01       	movw	r20, r14
   190ba:	96 01       	movw	r18, r12
   190bc:	be 01       	movw	r22, r28
   190be:	6f 5f       	subi	r22, 0xFF	; 255
   190c0:	7f 4f       	sbci	r23, 0xFF	; 255
   190c2:	c5 01       	movw	r24, r10
   190c4:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
   190c8:	31 e0       	ldi	r19, 0x01	; 1
   190ca:	20 e0       	ldi	r18, 0x00	; 0
   190cc:	80 97       	sbiw	r24, 0x20	; 32
   190ce:	0c f4       	brge	.+2      	; 0x190d2 <lif_writedirindex+0xaa>
   190d0:	30 e0       	ldi	r19, 0x00	; 0
   190d2:	e3 2e       	mov	r14, r19
   190d4:	f2 2e       	mov	r15, r18
   190d6:	c7 01       	movw	r24, r14
   190d8:	a0 96       	adiw	r28, 0x20	; 32
   190da:	ea e0       	ldi	r30, 0x0A	; 10
   190dc:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

000190e0 <lif_writedirEOF>:
   190e0:	0f 93       	push	r16
   190e2:	1f 93       	push	r17
   190e4:	cf 93       	push	r28
   190e6:	df 93       	push	r29
   190e8:	ec 01       	movw	r28, r24
   190ea:	8b 01       	movw	r16, r22
   190ec:	4f da       	rcall	.-2914   	; 0x1858c <lif_dir_clear>
   190ee:	fe 01       	movw	r30, r28
   190f0:	e6 5a       	subi	r30, 0xA6	; 166
   190f2:	ff 4f       	sbci	r31, 0xFF	; 255
   190f4:	8f ef       	ldi	r24, 0xFF	; 255
   190f6:	9f ef       	ldi	r25, 0xFF	; 255
   190f8:	91 83       	std	Z+1, r25	; 0x01
   190fa:	80 83       	st	Z, r24
   190fc:	1b a3       	std	Y+35, r17	; 0x23
   190fe:	0a a3       	std	Y+34, r16	; 0x22
   19100:	b8 01       	movw	r22, r16
   19102:	ce 01       	movw	r24, r28
   19104:	91 df       	rcall	.-222    	; 0x19028 <lif_writedirindex>
   19106:	df 91       	pop	r29
   19108:	cf 91       	pop	r28
   1910a:	1f 91       	pop	r17
   1910c:	0f 91       	pop	r16
   1910e:	08 95       	ret

00019110 <lif_updatefree>:
   19110:	2f 92       	push	r2
   19112:	3f 92       	push	r3
   19114:	4f 92       	push	r4
   19116:	5f 92       	push	r5
   19118:	6f 92       	push	r6
   1911a:	7f 92       	push	r7
   1911c:	8f 92       	push	r8
   1911e:	af 92       	push	r10
   19120:	bf 92       	push	r11
   19122:	cf 92       	push	r12
   19124:	df 92       	push	r13
   19126:	ef 92       	push	r14
   19128:	ff 92       	push	r15
   1912a:	0f 93       	push	r16
   1912c:	1f 93       	push	r17
   1912e:	cf 93       	push	r28
   19130:	df 93       	push	r29
   19132:	cd b7       	in	r28, 0x3d	; 61
   19134:	de b7       	in	r29, 0x3e	; 62
   19136:	2f 97       	sbiw	r28, 0x0f	; 15
   19138:	0f b6       	in	r0, 0x3f	; 63
   1913a:	f8 94       	cli
   1913c:	de bf       	out	0x3e, r29	; 62
   1913e:	0f be       	out	0x3f, r0	; 63
   19140:	cd bf       	out	0x3d, r28	; 61
   19142:	9f 87       	std	Y+15, r25	; 0x0f
   19144:	8e 87       	std	Y+14, r24	; 0x0e
   19146:	fc 01       	movw	r30, r24
   19148:	24 84       	ldd	r2, Z+12	; 0x0c
   1914a:	35 84       	ldd	r3, Z+13	; 0x0d
   1914c:	46 84       	ldd	r4, Z+14	; 0x0e
   1914e:	57 84       	ldd	r5, Z+15	; 0x0f
   19150:	80 89       	ldd	r24, Z+16	; 0x10
   19152:	91 89       	ldd	r25, Z+17	; 0x11
   19154:	a2 89       	ldd	r26, Z+18	; 0x12
   19156:	b3 89       	ldd	r27, Z+19	; 0x13
   19158:	80 8f       	std	Z+24, r24	; 0x18
   1915a:	91 8f       	std	Z+25, r25	; 0x19
   1915c:	a2 8f       	std	Z+26, r26	; 0x1a
   1915e:	b3 8f       	std	Z+27, r27	; 0x1b
   19160:	14 8a       	std	Z+20, r1	; 0x14
   19162:	15 8a       	std	Z+21, r1	; 0x15
   19164:	16 8a       	std	Z+22, r1	; 0x16
   19166:	17 8a       	std	Z+23, r1	; 0x17
   19168:	17 8e       	std	Z+31, r1	; 0x1f
   1916a:	16 8e       	std	Z+30, r1	; 0x1e
   1916c:	15 8e       	std	Z+29, r1	; 0x1d
   1916e:	14 8e       	std	Z+28, r1	; 0x1c
   19170:	11 a2       	std	Z+33, r1	; 0x21
   19172:	10 a2       	std	Z+32, r1	; 0x20
   19174:	13 a2       	std	Z+35, r1	; 0x23
   19176:	12 a2       	std	Z+34, r1	; 0x22
   19178:	cc 24       	eor	r12, r12
   1917a:	c3 94       	inc	r12
   1917c:	d1 2c       	mov	r13, r1
   1917e:	0f ef       	ldi	r16, 0xFF	; 255
   19180:	1f ef       	ldi	r17, 0xFF	; 255
   19182:	e6 5a       	subi	r30, 0xA6	; 166
   19184:	ff 4f       	sbci	r31, 0xFF	; 255
   19186:	f9 87       	std	Y+9, r31	; 0x09
   19188:	e8 87       	std	Y+8, r30	; 0x08
   1918a:	ae 84       	ldd	r10, Y+14	; 0x0e
   1918c:	bf 84       	ldd	r11, Y+15	; 0x0f
   1918e:	fc e5       	ldi	r31, 0x5C	; 92
   19190:	af 0e       	add	r10, r31
   19192:	b1 1c       	adc	r11, r1
   19194:	8e 85       	ldd	r24, Y+14	; 0x0e
   19196:	9f 85       	ldd	r25, Y+15	; 0x0f
   19198:	80 5a       	subi	r24, 0xA0	; 160
   1919a:	9f 4f       	sbci	r25, 0xFF	; 255
   1919c:	9b 87       	std	Y+11, r25	; 0x0b
   1919e:	8a 87       	std	Y+10, r24	; 0x0a
   191a0:	ee 85       	ldd	r30, Y+14	; 0x0e
   191a2:	ff 85       	ldd	r31, Y+15	; 0x0f
   191a4:	e1 5b       	subi	r30, 0xB1	; 177
   191a6:	ff 4f       	sbci	r31, 0xFF	; 255
   191a8:	fd 87       	std	Y+13, r31	; 0x0d
   191aa:	ec 87       	std	Y+12, r30	; 0x0c
   191ac:	8b e4       	ldi	r24, 0x4B	; 75
   191ae:	97 e3       	ldi	r25, 0x37	; 55
   191b0:	3c 01       	movw	r6, r24
   191b2:	81 2c       	mov	r8, r1
   191b4:	76 01       	movw	r14, r12
   191b6:	21 e0       	ldi	r18, 0x01	; 1
   191b8:	e2 1a       	sub	r14, r18
   191ba:	f1 08       	sbc	r15, r1
   191bc:	b7 01       	movw	r22, r14
   191be:	8e 85       	ldd	r24, Y+14	; 0x0e
   191c0:	9f 85       	ldd	r25, Y+15	; 0x0f
   191c2:	cb de       	rcall	.-618    	; 0x18f5a <lif_readdirindex>
   191c4:	89 2b       	or	r24, r25
   191c6:	19 f4       	brne	.+6      	; 0x191ce <lif_updatefree+0xbe>
   191c8:	80 e0       	ldi	r24, 0x00	; 0
   191ca:	90 e0       	ldi	r25, 0x00	; 0
   191cc:	91 c0       	rjmp	.+290    	; 0x192f0 <lif_updatefree+0x1e0>
   191ce:	e8 85       	ldd	r30, Y+8	; 0x08
   191d0:	f9 85       	ldd	r31, Y+9	; 0x09
   191d2:	80 81       	ld	r24, Z
   191d4:	91 81       	ldd	r25, Z+1	; 0x01
   191d6:	8f 3f       	cpi	r24, 0xFF	; 255
   191d8:	ff ef       	ldi	r31, 0xFF	; 255
   191da:	9f 07       	cpc	r25, r31
   191dc:	c1 f4       	brne	.+48     	; 0x1920e <lif_updatefree+0xfe>
   191de:	ee 85       	ldd	r30, Y+14	; 0x0e
   191e0:	ff 85       	ldd	r31, Y+15	; 0x0f
   191e2:	0f 3f       	cpi	r16, 0xFF	; 255
   191e4:	2f ef       	ldi	r18, 0xFF	; 255
   191e6:	12 07       	cpc	r17, r18
   191e8:	09 f4       	brne	.+2      	; 0x191ec <lif_updatefree+0xdc>
   191ea:	78 c0       	rjmp	.+240    	; 0x192dc <lif_updatefree+0x1cc>
   191ec:	13 a3       	std	Z+35, r17	; 0x23
   191ee:	02 a3       	std	Z+34, r16	; 0x22
   191f0:	e0 1a       	sub	r14, r16
   191f2:	f1 0a       	sbc	r15, r17
   191f4:	86 8d       	ldd	r24, Z+30	; 0x1e
   191f6:	97 8d       	ldd	r25, Z+31	; 0x1f
   191f8:	8e 19       	sub	r24, r14
   191fa:	9f 09       	sbc	r25, r15
   191fc:	97 8f       	std	Z+31, r25	; 0x1f
   191fe:	86 8f       	std	Z+30, r24	; 0x1e
   19200:	b8 01       	movw	r22, r16
   19202:	cf 01       	movw	r24, r30
   19204:	6d df       	rcall	.-294    	; 0x190e0 <lif_writedirEOF>
   19206:	89 2b       	or	r24, r25
   19208:	09 f0       	breq	.+2      	; 0x1920c <lif_updatefree+0xfc>
   1920a:	6a c0       	rjmp	.+212    	; 0x192e0 <lif_updatefree+0x1d0>
   1920c:	dd cf       	rjmp	.-70     	; 0x191c8 <lif_updatefree+0xb8>
   1920e:	89 2b       	or	r24, r25
   19210:	81 f4       	brne	.+32     	; 0x19232 <lif_updatefree+0x122>
   19212:	0f 3f       	cpi	r16, 0xFF	; 255
   19214:	ff ef       	ldi	r31, 0xFF	; 255
   19216:	1f 07       	cpc	r17, r31
   19218:	09 f4       	brne	.+2      	; 0x1921c <lif_updatefree+0x10c>
   1921a:	87 01       	movw	r16, r14
   1921c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1921e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19220:	86 8d       	ldd	r24, Z+30	; 0x1e
   19222:	97 8d       	ldd	r25, Z+31	; 0x1f
   19224:	01 96       	adiw	r24, 0x01	; 1
   19226:	97 8f       	std	Z+31, r25	; 0x1f
   19228:	86 8f       	std	Z+30, r24	; 0x1e
   1922a:	ff ef       	ldi	r31, 0xFF	; 255
   1922c:	cf 1a       	sub	r12, r31
   1922e:	df 0a       	sbc	r13, r31
   19230:	c1 cf       	rjmp	.-126    	; 0x191b4 <lif_updatefree+0xa4>
   19232:	f5 01       	movw	r30, r10
   19234:	80 81       	ld	r24, Z
   19236:	91 81       	ldd	r25, Z+1	; 0x01
   19238:	a2 81       	ldd	r26, Z+2	; 0x02
   1923a:	b3 81       	ldd	r27, Z+3	; 0x03
   1923c:	82 15       	cp	r24, r2
   1923e:	93 05       	cpc	r25, r3
   19240:	a4 05       	cpc	r26, r4
   19242:	b5 05       	cpc	r27, r5
   19244:	b8 f4       	brcc	.+46     	; 0x19274 <lif_updatefree+0x164>
   19246:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1924a:	81 ff       	sbrs	r24, 1
   1924c:	13 c0       	rjmp	.+38     	; 0x19274 <lif_updatefree+0x164>
   1924e:	8c 85       	ldd	r24, Y+12	; 0x0c
   19250:	9d 85       	ldd	r25, Y+13	; 0x0d
   19252:	ed b7       	in	r30, 0x3d	; 61
   19254:	fe b7       	in	r31, 0x3e	; 62
   19256:	97 83       	std	Z+7, r25	; 0x07
   19258:	86 83       	std	Z+6, r24	; 0x06
   1925a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1925c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1925e:	80 81       	ld	r24, Z
   19260:	91 81       	ldd	r25, Z+1	; 0x01
   19262:	ed b7       	in	r30, 0x3d	; 61
   19264:	fe b7       	in	r31, 0x3e	; 62
   19266:	95 83       	std	Z+5, r25	; 0x05
   19268:	84 83       	std	Z+4, r24	; 0x04
   1926a:	61 82       	std	Z+1, r6	; 0x01
   1926c:	72 82       	std	Z+2, r7	; 0x02
   1926e:	83 82       	std	Z+3, r8	; 0x03
   19270:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   19274:	ea 85       	ldd	r30, Y+10	; 0x0a
   19276:	fb 85       	ldd	r31, Y+11	; 0x0b
   19278:	80 81       	ld	r24, Z
   1927a:	91 81       	ldd	r25, Z+1	; 0x01
   1927c:	a2 81       	ldd	r26, Z+2	; 0x02
   1927e:	b3 81       	ldd	r27, Z+3	; 0x03
   19280:	ee 85       	ldd	r30, Y+14	; 0x0e
   19282:	ff 85       	ldd	r31, Y+15	; 0x0f
   19284:	44 89       	ldd	r20, Z+20	; 0x14
   19286:	55 89       	ldd	r21, Z+21	; 0x15
   19288:	66 89       	ldd	r22, Z+22	; 0x16
   1928a:	77 89       	ldd	r23, Z+23	; 0x17
   1928c:	48 0f       	add	r20, r24
   1928e:	59 1f       	adc	r21, r25
   19290:	6a 1f       	adc	r22, r26
   19292:	7b 1f       	adc	r23, r27
   19294:	44 8b       	std	Z+20, r20	; 0x14
   19296:	55 8b       	std	Z+21, r21	; 0x15
   19298:	66 8b       	std	Z+22, r22	; 0x16
   1929a:	77 8b       	std	Z+23, r23	; 0x17
   1929c:	40 8d       	ldd	r20, Z+24	; 0x18
   1929e:	51 8d       	ldd	r21, Z+25	; 0x19
   192a0:	62 8d       	ldd	r22, Z+26	; 0x1a
   192a2:	73 8d       	ldd	r23, Z+27	; 0x1b
   192a4:	48 1b       	sub	r20, r24
   192a6:	59 0b       	sbc	r21, r25
   192a8:	6a 0b       	sbc	r22, r26
   192aa:	7b 0b       	sbc	r23, r27
   192ac:	40 8f       	std	Z+24, r20	; 0x18
   192ae:	51 8f       	std	Z+25, r21	; 0x19
   192b0:	62 8f       	std	Z+26, r22	; 0x1a
   192b2:	73 8f       	std	Z+27, r23	; 0x1b
   192b4:	24 8d       	ldd	r18, Z+28	; 0x1c
   192b6:	35 8d       	ldd	r19, Z+29	; 0x1d
   192b8:	2f 5f       	subi	r18, 0xFF	; 255
   192ba:	3f 4f       	sbci	r19, 0xFF	; 255
   192bc:	35 8f       	std	Z+29, r19	; 0x1d
   192be:	24 8f       	std	Z+28, r18	; 0x1c
   192c0:	f5 01       	movw	r30, r10
   192c2:	40 81       	ld	r20, Z
   192c4:	51 81       	ldd	r21, Z+1	; 0x01
   192c6:	62 81       	ldd	r22, Z+2	; 0x02
   192c8:	73 81       	ldd	r23, Z+3	; 0x03
   192ca:	1c 01       	movw	r2, r24
   192cc:	2d 01       	movw	r4, r26
   192ce:	24 0e       	add	r2, r20
   192d0:	35 1e       	adc	r3, r21
   192d2:	46 1e       	adc	r4, r22
   192d4:	57 1e       	adc	r5, r23
   192d6:	0f ef       	ldi	r16, 0xFF	; 255
   192d8:	1f ef       	ldi	r17, 0xFF	; 255
   192da:	a7 cf       	rjmp	.-178    	; 0x1922a <lif_updatefree+0x11a>
   192dc:	f3 a2       	std	Z+35, r15	; 0x23
   192de:	e2 a2       	std	Z+34, r14	; 0x22
   192e0:	8f ef       	ldi	r24, 0xFF	; 255
   192e2:	9f ef       	ldi	r25, 0xFF	; 255
   192e4:	ee 85       	ldd	r30, Y+14	; 0x0e
   192e6:	ff 85       	ldd	r31, Y+15	; 0x0f
   192e8:	91 a3       	std	Z+33, r25	; 0x21
   192ea:	80 a3       	std	Z+32, r24	; 0x20
   192ec:	8e 85       	ldd	r24, Y+14	; 0x0e
   192ee:	9f 85       	ldd	r25, Y+15	; 0x0f
   192f0:	2f 96       	adiw	r28, 0x0f	; 15
   192f2:	0f b6       	in	r0, 0x3f	; 63
   192f4:	f8 94       	cli
   192f6:	de bf       	out	0x3e, r29	; 62
   192f8:	0f be       	out	0x3f, r0	; 63
   192fa:	cd bf       	out	0x3d, r28	; 61
   192fc:	df 91       	pop	r29
   192fe:	cf 91       	pop	r28
   19300:	1f 91       	pop	r17
   19302:	0f 91       	pop	r16
   19304:	ff 90       	pop	r15
   19306:	ef 90       	pop	r14
   19308:	df 90       	pop	r13
   1930a:	cf 90       	pop	r12
   1930c:	bf 90       	pop	r11
   1930e:	af 90       	pop	r10
   19310:	8f 90       	pop	r8
   19312:	7f 90       	pop	r7
   19314:	6f 90       	pop	r6
   19316:	5f 90       	pop	r5
   19318:	4f 90       	pop	r4
   1931a:	3f 90       	pop	r3
   1931c:	2f 90       	pop	r2
   1931e:	08 95       	ret

00019320 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19320:	a9 e2       	ldi	r26, 0x29	; 41
   19322:	b1 e0       	ldi	r27, 0x01	; 1
   19324:	e6 e9       	ldi	r30, 0x96	; 150
   19326:	f9 ec       	ldi	r31, 0xC9	; 201
   19328:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   1932c:	4c 01       	movw	r8, r24
   1932e:	3b 01       	movw	r6, r22
   19330:	19 01       	movw	r2, r18
   19332:	2a 01       	movw	r4, r20
   19334:	ca 5d       	subi	r28, 0xDA	; 218
   19336:	de 4f       	sbci	r29, 0xFE	; 254
   19338:	e8 82       	st	Y, r14
   1933a:	f9 82       	std	Y+1, r15	; 0x01
   1933c:	0a 83       	std	Y+2, r16	; 0x02
   1933e:	1b 83       	std	Y+3, r17	; 0x03
   19340:	c6 52       	subi	r28, 0x26	; 38
   19342:	d1 40       	sbci	r29, 0x01	; 1
   19344:	c2 5e       	subi	r28, 0xE2	; 226
   19346:	de 4f       	sbci	r29, 0xFE	; 254
   19348:	a8 82       	st	Y, r10
   1934a:	b9 82       	std	Y+1, r11	; 0x01
   1934c:	ca 82       	std	Y+2, r12	; 0x02
   1934e:	db 82       	std	Y+3, r13	; 0x03
   19350:	ce 51       	subi	r28, 0x1E	; 30
   19352:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19354:	80 e0       	ldi	r24, 0x00	; 0
   19356:	90 e0       	ldi	r25, 0x00	; 0
   19358:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <time>
   1935c:	5b 01       	movw	r10, r22
   1935e:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19360:	64 e7       	ldi	r22, 0x74	; 116
   19362:	70 e0       	ldi	r23, 0x00	; 0
   19364:	80 e0       	ldi	r24, 0x00	; 0
   19366:	90 e0       	ldi	r25, 0x00	; 0
   19368:	0e 94 85 bd 	call	0x17b0a	; 0x17b0a <lif_calloc>
   1936c:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1936e:	89 2b       	or	r24, r25
   19370:	09 f4       	brne	.+2      	; 0x19374 <lif_create_volume+0x54>
   19372:	b6 c2       	rjmp	.+1388   	; 0x198e0 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19374:	c2 5e       	subi	r28, 0xE2	; 226
   19376:	de 4f       	sbci	r29, 0xFE	; 254
   19378:	28 81       	ld	r18, Y
   1937a:	39 81       	ldd	r19, Y+1	; 0x01
   1937c:	4a 81       	ldd	r20, Y+2	; 0x02
   1937e:	5b 81       	ldd	r21, Y+3	; 0x03
   19380:	ce 51       	subi	r28, 0x1E	; 30
   19382:	d1 40       	sbci	r29, 0x01	; 1
   19384:	ed b7       	in	r30, 0x3d	; 61
   19386:	fe b7       	in	r31, 0x3e	; 62
   19388:	20 8b       	std	Z+16, r18	; 0x10
   1938a:	31 8b       	std	Z+17, r19	; 0x11
   1938c:	42 8b       	std	Z+18, r20	; 0x12
   1938e:	53 8b       	std	Z+19, r21	; 0x13
   19390:	ca 5d       	subi	r28, 0xDA	; 218
   19392:	de 4f       	sbci	r29, 0xFE	; 254
   19394:	28 81       	ld	r18, Y
   19396:	39 81       	ldd	r19, Y+1	; 0x01
   19398:	4a 81       	ldd	r20, Y+2	; 0x02
   1939a:	5b 81       	ldd	r21, Y+3	; 0x03
   1939c:	c6 52       	subi	r28, 0x26	; 38
   1939e:	d1 40       	sbci	r29, 0x01	; 1
   193a0:	24 87       	std	Z+12, r18	; 0x0c
   193a2:	35 87       	std	Z+13, r19	; 0x0d
   193a4:	46 87       	std	Z+14, r20	; 0x0e
   193a6:	57 87       	std	Z+15, r21	; 0x0f
   193a8:	20 86       	std	Z+8, r2	; 0x08
   193aa:	31 86       	std	Z+9, r3	; 0x09
   193ac:	42 86       	std	Z+10, r4	; 0x0a
   193ae:	53 86       	std	Z+11, r5	; 0x0b
   193b0:	77 82       	std	Z+7, r7	; 0x07
   193b2:	66 82       	std	Z+6, r6	; 0x06
   193b4:	95 82       	std	Z+5, r9	; 0x05
   193b6:	84 82       	std	Z+4, r8	; 0x04
   193b8:	86 e2       	ldi	r24, 0x26	; 38
   193ba:	98 e3       	ldi	r25, 0x38	; 56
   193bc:	a0 e0       	ldi	r26, 0x00	; 0
   193be:	81 83       	std	Z+1, r24	; 0x01
   193c0:	92 83       	std	Z+2, r25	; 0x02
   193c2:	a3 83       	std	Z+3, r26	; 0x03
   193c4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   193c8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   193cc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   193d0:	92 ff       	sbrs	r25, 2
   193d2:	04 c0       	rjmp	.+8      	; 0x193dc <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   193d4:	6a e1       	ldi	r22, 0x1A	; 26
   193d6:	76 e1       	ldi	r23, 0x16	; 22
   193d8:	c7 01       	movw	r24, r14

    lif_image_clear(LIF);
   193da:	e7 d8       	rcall	.-3634   	; 0x185aa <lif_dump_vol>
   193dc:	c7 01       	movw	r24, r14

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   193de:	d0 d8       	rcall	.-3680   	; 0x18580 <lif_image_clear>
   193e0:	80 e0       	ldi	r24, 0x00	; 0
   193e2:	90 e8       	ldi	r25, 0x80	; 128
   193e4:	f7 01       	movw	r30, r14
   193e6:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   193e8:	84 a3       	std	Z+36, r24	; 0x24
   193ea:	46 e0       	ldi	r20, 0x06	; 6
   193ec:	50 e0       	ldi	r21, 0x00	; 0
   193ee:	b3 01       	movw	r22, r6
   193f0:	c7 01       	movw	r24, r14
   193f2:	86 96       	adiw	r24, 0x26	; 38
   193f4:	0e 94 c4 bf 	call	0x17f88	; 0x17f88 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   193f8:	f7 01       	movw	r30, r14
   193fa:	25 a6       	std	Z+45, r2	; 0x2d
   193fc:	36 a6       	std	Z+46, r3	; 0x2e
   193fe:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19400:	50 aa       	std	Z+48, r5	; 0x30
   19402:	ca 5d       	subi	r28, 0xDA	; 218
   19404:	de 4f       	sbci	r29, 0xFE	; 254
   19406:	28 81       	ld	r18, Y
   19408:	39 81       	ldd	r19, Y+1	; 0x01
   1940a:	4a 81       	ldd	r20, Y+2	; 0x02
   1940c:	5b 81       	ldd	r21, Y+3	; 0x03
   1940e:	c6 52       	subi	r28, 0x26	; 38
   19410:	d1 40       	sbci	r29, 0x01	; 1
   19412:	25 ab       	std	Z+53, r18	; 0x35
   19414:	36 ab       	std	Z+54, r19	; 0x36
   19416:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19418:	50 af       	std	Z+56, r21	; 0x38
   1941a:	80 e0       	ldi	r24, 0x00	; 0
   1941c:	90 e1       	ldi	r25, 0x10	; 16
   1941e:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19420:	81 ab       	std	Z+49, r24	; 0x31
   19422:	fd 96       	adiw	r30, 0x3d	; 61
   19424:	10 82       	st	Z, r1
   19426:	11 82       	std	Z+1, r1	; 0x01
   19428:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1942a:	13 82       	std	Z+3, r1	; 0x03
   1942c:	34 96       	adiw	r30, 0x04	; 4
   1942e:	10 82       	st	Z, r1
   19430:	11 82       	std	Z+1, r1	; 0x01
   19432:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19434:	13 82       	std	Z+3, r1	; 0x03
   19436:	34 96       	adiw	r30, 0x04	; 4
   19438:	10 82       	st	Z, r1
   1943a:	11 82       	std	Z+1, r1	; 0x01
   1943c:	12 82       	std	Z+2, r1	; 0x02
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1943e:	13 82       	std	Z+3, r1	; 0x03
   19440:	a7 01       	movw	r20, r14
   19442:	47 5b       	subi	r20, 0xB7	; 183
   19444:	5f 4f       	sbci	r21, 0xFF	; 255
   19446:	c6 01       	movw	r24, r12
   19448:	b5 01       	movw	r22, r10
   1944a:	0e 94 e9 c1 	call	0x183d2	; 0x183d2 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   1944e:	c4 01       	movw	r24, r8
   19450:	0e 94 d0 bd 	call	0x17ba0	; 0x17ba0 <lif_stralloc>
   19454:	d7 01       	movw	r26, r14
   19456:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   19458:	9c 93       	st	X, r25
   1945a:	89 2b       	or	r24, r25
   1945c:	09 f4       	brne	.+2      	; 0x19460 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   1945e:	35 c2       	rjmp	.+1130   	; 0x198ca <lif_create_volume+0x5aa>
   19460:	c2 5e       	subi	r28, 0xE2	; 226
   19462:	de 4f       	sbci	r29, 0xFE	; 254
   19464:	28 81       	ld	r18, Y
   19466:	39 81       	ldd	r19, Y+1	; 0x01
   19468:	4a 81       	ldd	r20, Y+2	; 0x02
   1946a:	5b 81       	ldd	r21, Y+3	; 0x03
   1946c:	ce 51       	subi	r28, 0x1E	; 30
   1946e:	d1 40       	sbci	r29, 0x01	; 1
   19470:	f7 01       	movw	r30, r14
   19472:	20 8b       	std	Z+16, r18	; 0x10
   19474:	31 8b       	std	Z+17, r19	; 0x11
   19476:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19478:	53 8b       	std	Z+19, r21	; 0x13
   1947a:	ca 5d       	subi	r28, 0xDA	; 218
   1947c:	de 4f       	sbci	r29, 0xFE	; 254
   1947e:	88 81       	ld	r24, Y
   19480:	99 81       	ldd	r25, Y+1	; 0x01
   19482:	aa 81       	ldd	r26, Y+2	; 0x02
   19484:	bb 81       	ldd	r27, Y+3	; 0x03
   19486:	c6 52       	subi	r28, 0x26	; 38
   19488:	d1 40       	sbci	r29, 0x01	; 1
   1948a:	82 0d       	add	r24, r2
   1948c:	93 1d       	adc	r25, r3
   1948e:	a4 1d       	adc	r26, r4
   19490:	b5 1d       	adc	r27, r5
   19492:	84 87       	std	Z+12, r24	; 0x0c
   19494:	95 87       	std	Z+13, r25	; 0x0d
   19496:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19498:	b7 87       	std	Z+15, r27	; 0x0f
   1949a:	82 0f       	add	r24, r18
   1949c:	93 1f       	adc	r25, r19
   1949e:	a4 1f       	adc	r26, r20
   194a0:	b5 1f       	adc	r27, r21
   194a2:	84 83       	std	Z+4, r24	; 0x04
   194a4:	95 83       	std	Z+5, r25	; 0x05
   194a6:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   194a8:	b7 83       	std	Z+7, r27	; 0x07
   194aa:	ba 2f       	mov	r27, r26
   194ac:	a9 2f       	mov	r26, r25
   194ae:	98 2f       	mov	r25, r24
   194b0:	88 27       	eor	r24, r24
   194b2:	80 87       	std	Z+8, r24	; 0x08
   194b4:	91 87       	std	Z+9, r25	; 0x09
   194b6:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   194b8:	b3 87       	std	Z+11, r27	; 0x0b
   194ba:	20 8f       	std	Z+24, r18	; 0x18
   194bc:	31 8f       	std	Z+25, r19	; 0x19
   194be:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   194c0:	53 8f       	std	Z+27, r21	; 0x1b
   194c2:	14 8a       	std	Z+20, r1	; 0x14
   194c4:	15 8a       	std	Z+21, r1	; 0x15
   194c6:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   194c8:	17 8a       	std	Z+23, r1	; 0x17
   194ca:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   194cc:	14 8e       	std	Z+28, r1	; 0x1c
   194ce:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   194d0:	16 8e       	std	Z+30, r1	; 0x1e
   194d2:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   194d4:	10 a2       	std	Z+32, r1	; 0x20
   194d6:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   194d8:	12 a2       	std	Z+34, r1	; 0x22
   194da:	61 2c       	mov	r6, r1
   194dc:	77 24       	eor	r7, r7
   194de:	73 94       	inc	r7
   194e0:	9e 01       	movw	r18, r28
   194e2:	2c 5e       	subi	r18, 0xEC	; 236
   194e4:	3f 4f       	sbci	r19, 0xFF	; 255
   194e6:	49 01       	movw	r8, r18
   194e8:	d9 01       	movw	r26, r18
   194ea:	f3 01       	movw	r30, r6
   194ec:	1d 92       	st	X+, r1
   194ee:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   194f0:	e9 f7       	brne	.-6      	; 0x194ec <lif_create_volume+0x1cc>
   194f2:	b9 01       	movw	r22, r18
   194f4:	c7 01       	movw	r24, r14
   194f6:	0e 94 01 c0 	call	0x18002	; 0x18002 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   194fa:	68 ee       	ldi	r22, 0xE8	; 232
   194fc:	78 e0       	ldi	r23, 0x08	; 8
   194fe:	d7 01       	movw	r26, r14
   19500:	8d 91       	ld	r24, X+
   19502:	9c 91       	ld	r25, X
   19504:	0e 94 ef bd 	call	0x17bde	; 0x17bde <lif_open>
   19508:	f7 01       	movw	r30, r14
   1950a:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1950c:	82 83       	std	Z+2, r24	; 0x02
   1950e:	89 2b       	or	r24, r25
   19510:	09 f4       	brne	.+2      	; 0x19514 <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19512:	db c1       	rjmp	.+950    	; 0x198ca <lif_create_volume+0x5aa>
   19514:	00 e0       	ldi	r16, 0x00	; 0
   19516:	11 e0       	ldi	r17, 0x01	; 1
   19518:	20 e0       	ldi	r18, 0x00	; 0
   1951a:	30 e0       	ldi	r19, 0x00	; 0
   1951c:	a9 01       	movw	r20, r18
   1951e:	b4 01       	movw	r22, r8
   19520:	c7 01       	movw	r24, r14
   19522:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
   19526:	9c 01       	movw	r18, r24
   19528:	99 0f       	add	r25, r25
   1952a:	44 0b       	sbc	r20, r20
   1952c:	55 0b       	sbc	r21, r21
   1952e:	ca 5e       	subi	r28, 0xEA	; 234
   19530:	de 4f       	sbci	r29, 0xFE	; 254
   19532:	28 83       	st	Y, r18
   19534:	39 83       	std	Y+1, r19	; 0x01
   19536:	4a 83       	std	Y+2, r20	; 0x02
   19538:	5b 83       	std	Y+3, r21	; 0x03
   1953a:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   1953c:	d1 40       	sbci	r29, 0x01	; 1
   1953e:	2f 3f       	cpi	r18, 0xFF	; 255
   19540:	31 05       	cpc	r19, r1
   19542:	41 05       	cpc	r20, r1
   19544:	51 05       	cpc	r21, r1
   19546:	09 f0       	breq	.+2      	; 0x1954a <lif_create_volume+0x22a>
   19548:	0c f4       	brge	.+2      	; 0x1954c <lif_create_volume+0x22c>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   1954a:	bf c1       	rjmp	.+894    	; 0x198ca <lif_create_volume+0x5aa>
   1954c:	d4 01       	movw	r26, r8
   1954e:	f3 01       	movw	r30, r6
   19550:	1d 92       	st	X+, r1
   19552:	31 97       	sbiw	r30, 0x01	; 1

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19554:	e9 f7       	brne	.-6      	; 0x19550 <lif_create_volume+0x230>
   19556:	21 e0       	ldi	r18, 0x01	; 1
   19558:	30 e0       	ldi	r19, 0x00	; 0
   1955a:	40 e0       	ldi	r20, 0x00	; 0
   1955c:	50 e0       	ldi	r21, 0x00	; 0
   1955e:	c6 5e       	subi	r28, 0xE6	; 230
   19560:	de 4f       	sbci	r29, 0xFE	; 254
   19562:	28 83       	st	Y, r18
   19564:	39 83       	std	Y+1, r19	; 0x01
   19566:	4a 83       	std	Y+2, r20	; 0x02
   19568:	5b 83       	std	Y+3, r21	; 0x03
   1956a:	ca 51       	subi	r28, 0x1A	; 26
   1956c:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   1956e:	64 01       	movw	r12, r8
   19570:	89 e1       	ldi	r24, 0x19	; 25
   19572:	98 e3       	ldi	r25, 0x38	; 56
   19574:	3c 01       	movw	r6, r24
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19576:	81 2c       	mov	r8, r1
   19578:	c6 5e       	subi	r28, 0xE6	; 230
   1957a:	de 4f       	sbci	r29, 0xFE	; 254
   1957c:	88 81       	ld	r24, Y
   1957e:	99 81       	ldd	r25, Y+1	; 0x01
   19580:	aa 81       	ldd	r26, Y+2	; 0x02
   19582:	bb 81       	ldd	r27, Y+3	; 0x03
   19584:	ca 51       	subi	r28, 0x1A	; 26
   19586:	d1 40       	sbci	r29, 0x01	; 1
   19588:	82 15       	cp	r24, r2
   1958a:	93 05       	cpc	r25, r3
   1958c:	a4 05       	cpc	r26, r4
   1958e:	b5 05       	cpc	r27, r5
   19590:	0c f0       	brlt	.+2      	; 0x19594 <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19592:	55 c0       	rjmp	.+170    	; 0x1963e <lif_create_volume+0x31e>
   19594:	00 e0       	ldi	r16, 0x00	; 0
   19596:	11 e0       	ldi	r17, 0x01	; 1
   19598:	ca 5e       	subi	r28, 0xEA	; 234
   1959a:	de 4f       	sbci	r29, 0xFE	; 254
   1959c:	28 81       	ld	r18, Y
   1959e:	39 81       	ldd	r19, Y+1	; 0x01
   195a0:	4a 81       	ldd	r20, Y+2	; 0x02
   195a2:	5b 81       	ldd	r21, Y+3	; 0x03
   195a4:	c6 51       	subi	r28, 0x16	; 22
   195a6:	d1 40       	sbci	r29, 0x01	; 1
   195a8:	b6 01       	movw	r22, r12
   195aa:	c7 01       	movw	r24, r14
   195ac:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
   195b0:	09 2e       	mov	r0, r25
   195b2:	00 0c       	add	r0, r0
   195b4:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   195b6:	bb 0b       	sbc	r27, r27
   195b8:	8f 3f       	cpi	r24, 0xFF	; 255
   195ba:	91 05       	cpc	r25, r1
   195bc:	a1 05       	cpc	r26, r1
   195be:	b1 05       	cpc	r27, r1
   195c0:	09 f0       	breq	.+2      	; 0x195c4 <lif_create_volume+0x2a4>
   195c2:	0c f4       	brge	.+2      	; 0x195c6 <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   195c4:	82 c1       	rjmp	.+772    	; 0x198ca <lif_create_volume+0x5aa>
   195c6:	ca 5e       	subi	r28, 0xEA	; 234
   195c8:	de 4f       	sbci	r29, 0xFE	; 254
   195ca:	28 81       	ld	r18, Y
   195cc:	39 81       	ldd	r19, Y+1	; 0x01
   195ce:	4a 81       	ldd	r20, Y+2	; 0x02
   195d0:	5b 81       	ldd	r21, Y+3	; 0x03
   195d2:	c6 51       	subi	r28, 0x16	; 22
   195d4:	d1 40       	sbci	r29, 0x01	; 1
   195d6:	28 0f       	add	r18, r24
   195d8:	39 1f       	adc	r19, r25
   195da:	4a 1f       	adc	r20, r26
   195dc:	5b 1f       	adc	r21, r27
   195de:	ca 5e       	subi	r28, 0xEA	; 234
   195e0:	de 4f       	sbci	r29, 0xFE	; 254
   195e2:	28 83       	st	Y, r18
   195e4:	39 83       	std	Y+1, r19	; 0x01
   195e6:	4a 83       	std	Y+2, r20	; 0x02
   195e8:	5b 83       	std	Y+3, r21	; 0x03
   195ea:	c6 51       	subi	r28, 0x16	; 22
        printf("\tWrote: %ld\r", count);
   195ec:	d1 40       	sbci	r29, 0x01	; 1
   195ee:	c6 5e       	subi	r28, 0xE6	; 230
   195f0:	de 4f       	sbci	r29, 0xFE	; 254
   195f2:	88 81       	ld	r24, Y
   195f4:	99 81       	ldd	r25, Y+1	; 0x01
   195f6:	aa 81       	ldd	r26, Y+2	; 0x02
   195f8:	bb 81       	ldd	r27, Y+3	; 0x03
   195fa:	ca 51       	subi	r28, 0x1A	; 26
   195fc:	d1 40       	sbci	r29, 0x01	; 1
   195fe:	ed b7       	in	r30, 0x3d	; 61
   19600:	fe b7       	in	r31, 0x3e	; 62
   19602:	84 83       	std	Z+4, r24	; 0x04
   19604:	95 83       	std	Z+5, r25	; 0x05
   19606:	a6 83       	std	Z+6, r26	; 0x06
   19608:	b7 83       	std	Z+7, r27	; 0x07
   1960a:	61 82       	std	Z+1, r6	; 0x01
   1960c:	72 82       	std	Z+2, r7	; 0x02
   1960e:	83 82       	std	Z+3, r8	; 0x03
   19610:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19614:	c6 5e       	subi	r28, 0xE6	; 230
   19616:	de 4f       	sbci	r29, 0xFE	; 254
   19618:	28 81       	ld	r18, Y
   1961a:	39 81       	ldd	r19, Y+1	; 0x01
   1961c:	4a 81       	ldd	r20, Y+2	; 0x02
   1961e:	5b 81       	ldd	r21, Y+3	; 0x03
   19620:	ca 51       	subi	r28, 0x1A	; 26
   19622:	d1 40       	sbci	r29, 0x01	; 1
   19624:	2f 5f       	subi	r18, 0xFF	; 255
   19626:	3f 4f       	sbci	r19, 0xFF	; 255
   19628:	4f 4f       	sbci	r20, 0xFF	; 255
   1962a:	5f 4f       	sbci	r21, 0xFF	; 255
   1962c:	c6 5e       	subi	r28, 0xE6	; 230
   1962e:	de 4f       	sbci	r29, 0xFE	; 254
   19630:	28 83       	st	Y, r18
   19632:	39 83       	std	Y+1, r19	; 0x01
   19634:	4a 83       	std	Y+2, r20	; 0x02
   19636:	5b 83       	std	Y+3, r21	; 0x03
   19638:	ca 51       	subi	r28, 0x1A	; 26
   1963a:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   1963c:	9d cf       	rjmp	.-198    	; 0x19578 <lif_create_volume+0x258>
   1963e:	c7 01       	movw	r24, r14
   19640:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19644:	8f ef       	ldi	r24, 0xFF	; 255
   19646:	9f ef       	ldi	r25, 0xFF	; 255
   19648:	f7 01       	movw	r30, r14
   1964a:	e6 5a       	subi	r30, 0xA6	; 166
   1964c:	ff 4f       	sbci	r31, 0xFF	; 255
   1964e:	91 83       	std	Z+1, r25	; 0x01
   19650:	80 83       	st	Z, r24
   19652:	46 01       	movw	r8, r12
   19654:	6e 01       	movw	r12, r28
   19656:	9c ee       	ldi	r25, 0xEC	; 236
   19658:	c9 1a       	sub	r12, r25
   1965a:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1965c:	d9 0a       	sbc	r13, r25
   1965e:	b4 01       	movw	r22, r8
   19660:	c7 01       	movw	r24, r14
   19662:	0e 94 0d c1 	call	0x1821a	; 0x1821a <lif_dir2str>
   19666:	a0 e2       	ldi	r26, 0x20	; 32
   19668:	8a 0e       	add	r8, r26

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1966a:	91 1c       	adc	r9, r1
   1966c:	c8 14       	cp	r12, r8
   1966e:	d9 04       	cpc	r13, r9
   19670:	b1 f7       	brne	.-20     	; 0x1965e <lif_create_volume+0x33e>
   19672:	a1 2c       	mov	r10, r1
   19674:	b1 2c       	mov	r11, r1
   19676:	65 01       	movw	r12, r10
   19678:	fe 01       	movw	r30, r28
   1967a:	74 96       	adiw	r30, 0x14	; 20
   1967c:	cc 5e       	subi	r28, 0xEC	; 236
   1967e:	de 4f       	sbci	r29, 0xFE	; 254
   19680:	f9 83       	std	Y+1, r31	; 0x01
   19682:	e8 83       	st	Y, r30
   19684:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19686:	d1 40       	sbci	r29, 0x01	; 1
   19688:	84 e6       	ldi	r24, 0x64	; 100
   1968a:	28 2e       	mov	r2, r24
   1968c:	31 2c       	mov	r3, r1
   1968e:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19690:	51 2c       	mov	r5, r1
   19692:	8c e0       	ldi	r24, 0x0C	; 12
   19694:	98 e3       	ldi	r25, 0x38	; 56
   19696:	3c 01       	movw	r6, r24
   19698:	81 2c       	mov	r8, r1
   1969a:	c6 5e       	subi	r28, 0xE6	; 230
   1969c:	de 4f       	sbci	r29, 0xFE	; 254
   1969e:	28 81       	ld	r18, Y
   196a0:	39 81       	ldd	r19, Y+1	; 0x01
   196a2:	4a 81       	ldd	r20, Y+2	; 0x02
   196a4:	5b 81       	ldd	r21, Y+3	; 0x03
   196a6:	ca 51       	subi	r28, 0x1A	; 26
   196a8:	d1 40       	sbci	r29, 0x01	; 1
   196aa:	2a 0d       	add	r18, r10
   196ac:	3b 1d       	adc	r19, r11
   196ae:	4c 1d       	adc	r20, r12
   196b0:	5d 1d       	adc	r21, r13
   196b2:	ce 5d       	subi	r28, 0xDE	; 222
   196b4:	de 4f       	sbci	r29, 0xFE	; 254
   196b6:	28 83       	st	Y, r18
   196b8:	39 83       	std	Y+1, r19	; 0x01
   196ba:	4a 83       	std	Y+2, r20	; 0x02
   196bc:	5b 83       	std	Y+3, r21	; 0x03
   196be:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   196c0:	d1 40       	sbci	r29, 0x01	; 1
   196c2:	ca 5d       	subi	r28, 0xDA	; 218
   196c4:	de 4f       	sbci	r29, 0xFE	; 254
   196c6:	88 81       	ld	r24, Y
   196c8:	99 81       	ldd	r25, Y+1	; 0x01
   196ca:	aa 81       	ldd	r26, Y+2	; 0x02
   196cc:	bb 81       	ldd	r27, Y+3	; 0x03
   196ce:	c6 52       	subi	r28, 0x26	; 38
   196d0:	d1 40       	sbci	r29, 0x01	; 1
   196d2:	a8 16       	cp	r10, r24
   196d4:	b9 06       	cpc	r11, r25
   196d6:	ca 06       	cpc	r12, r26
   196d8:	db 06       	cpc	r13, r27
   196da:	0c f0       	brlt	.+2      	; 0x196de <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196dc:	58 c0       	rjmp	.+176    	; 0x1978e <lif_create_volume+0x46e>
   196de:	00 e0       	ldi	r16, 0x00	; 0
   196e0:	11 e0       	ldi	r17, 0x01	; 1
   196e2:	ca 5e       	subi	r28, 0xEA	; 234
   196e4:	de 4f       	sbci	r29, 0xFE	; 254
   196e6:	28 81       	ld	r18, Y
   196e8:	39 81       	ldd	r19, Y+1	; 0x01
   196ea:	4a 81       	ldd	r20, Y+2	; 0x02
   196ec:	5b 81       	ldd	r21, Y+3	; 0x03
   196ee:	c6 51       	subi	r28, 0x16	; 22
   196f0:	d1 40       	sbci	r29, 0x01	; 1
   196f2:	be 01       	movw	r22, r28
   196f4:	6c 5e       	subi	r22, 0xEC	; 236
   196f6:	7f 4f       	sbci	r23, 0xFF	; 255
   196f8:	c7 01       	movw	r24, r14
   196fa:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
   196fe:	09 2e       	mov	r0, r25
   19700:	00 0c       	add	r0, r0
   19702:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19704:	bb 0b       	sbc	r27, r27
   19706:	8f 3f       	cpi	r24, 0xFF	; 255
   19708:	91 05       	cpc	r25, r1
   1970a:	a1 05       	cpc	r26, r1
   1970c:	b1 05       	cpc	r27, r1
   1970e:	09 f0       	breq	.+2      	; 0x19712 <lif_create_volume+0x3f2>
   19710:	0c f4       	brge	.+2      	; 0x19714 <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19712:	db c0       	rjmp	.+438    	; 0x198ca <lif_create_volume+0x5aa>
   19714:	ca 5e       	subi	r28, 0xEA	; 234
   19716:	de 4f       	sbci	r29, 0xFE	; 254
   19718:	28 81       	ld	r18, Y
   1971a:	39 81       	ldd	r19, Y+1	; 0x01
   1971c:	4a 81       	ldd	r20, Y+2	; 0x02
   1971e:	5b 81       	ldd	r21, Y+3	; 0x03
   19720:	c6 51       	subi	r28, 0x16	; 22
   19722:	d1 40       	sbci	r29, 0x01	; 1
   19724:	28 0f       	add	r18, r24
   19726:	39 1f       	adc	r19, r25
   19728:	4a 1f       	adc	r20, r26
   1972a:	5b 1f       	adc	r21, r27
   1972c:	ca 5e       	subi	r28, 0xEA	; 234
   1972e:	de 4f       	sbci	r29, 0xFE	; 254
   19730:	28 83       	st	Y, r18
   19732:	39 83       	std	Y+1, r19	; 0x01
   19734:	4a 83       	std	Y+2, r20	; 0x02
   19736:	5b 83       	std	Y+3, r21	; 0x03
   19738:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   1973a:	d1 40       	sbci	r29, 0x01	; 1
   1973c:	ce 5d       	subi	r28, 0xDE	; 222
   1973e:	de 4f       	sbci	r29, 0xFE	; 254
   19740:	68 81       	ld	r22, Y
   19742:	79 81       	ldd	r23, Y+1	; 0x01
   19744:	8a 81       	ldd	r24, Y+2	; 0x02
   19746:	9b 81       	ldd	r25, Y+3	; 0x03
   19748:	c2 52       	subi	r28, 0x22	; 34
   1974a:	d1 40       	sbci	r29, 0x01	; 1
   1974c:	a2 01       	movw	r20, r4
   1974e:	91 01       	movw	r18, r2
   19750:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
   19754:	67 2b       	or	r22, r23
   19756:	68 2b       	or	r22, r24
   19758:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1975a:	99 f4       	brne	.+38     	; 0x19782 <lif_create_volume+0x462>
   1975c:	ce 5d       	subi	r28, 0xDE	; 222
   1975e:	de 4f       	sbci	r29, 0xFE	; 254
   19760:	88 81       	ld	r24, Y
   19762:	99 81       	ldd	r25, Y+1	; 0x01
   19764:	aa 81       	ldd	r26, Y+2	; 0x02
   19766:	bb 81       	ldd	r27, Y+3	; 0x03
   19768:	c2 52       	subi	r28, 0x22	; 34
   1976a:	d1 40       	sbci	r29, 0x01	; 1
   1976c:	ed b7       	in	r30, 0x3d	; 61
   1976e:	fe b7       	in	r31, 0x3e	; 62
   19770:	84 83       	std	Z+4, r24	; 0x04
   19772:	95 83       	std	Z+5, r25	; 0x05
   19774:	a6 83       	std	Z+6, r26	; 0x06
   19776:	b7 83       	std	Z+7, r27	; 0x07
   19778:	61 82       	std	Z+1, r6	; 0x01
   1977a:	72 82       	std	Z+2, r7	; 0x02
   1977c:	83 82       	std	Z+3, r8	; 0x03
   1977e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19782:	ff ef       	ldi	r31, 0xFF	; 255
   19784:	af 1a       	sub	r10, r31
   19786:	bf 0a       	sbc	r11, r31
   19788:	cf 0a       	sbc	r12, r31
   1978a:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1978c:	86 cf       	rjmp	.-244    	; 0x1969a <lif_create_volume+0x37a>
   1978e:	80 e0       	ldi	r24, 0x00	; 0
   19790:	91 e0       	ldi	r25, 0x01	; 1
   19792:	cc 5e       	subi	r28, 0xEC	; 236
   19794:	de 4f       	sbci	r29, 0xFE	; 254
   19796:	a8 81       	ld	r26, Y
   19798:	b9 81       	ldd	r27, Y+1	; 0x01
   1979a:	c4 51       	subi	r28, 0x14	; 20
   1979c:	d1 40       	sbci	r29, 0x01	; 1
   1979e:	fc 01       	movw	r30, r24
   197a0:	1d 92       	st	X+, r1
   197a2:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   197a4:	e9 f7       	brne	.-6      	; 0x197a0 <lif_create_volume+0x480>
   197a6:	81 2c       	mov	r8, r1
   197a8:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   197aa:	54 01       	movw	r10, r8
   197ac:	8f ef       	ldi	r24, 0xFF	; 255
   197ae:	97 e3       	ldi	r25, 0x37	; 55
   197b0:	9c 01       	movw	r18, r24
   197b2:	40 e0       	ldi	r20, 0x00	; 0
   197b4:	c6 5e       	subi	r28, 0xE6	; 230
   197b6:	de 4f       	sbci	r29, 0xFE	; 254
   197b8:	28 83       	st	Y, r18
   197ba:	39 83       	std	Y+1, r19	; 0x01
   197bc:	4a 83       	std	Y+2, r20	; 0x02
   197be:	ca 51       	subi	r28, 0x1A	; 26
   197c0:	d1 40       	sbci	r29, 0x01	; 1
   197c2:	ce 5d       	subi	r28, 0xDE	; 222
   197c4:	de 4f       	sbci	r29, 0xFE	; 254
   197c6:	48 80       	ld	r4, Y
   197c8:	59 80       	ldd	r5, Y+1	; 0x01
   197ca:	6a 80       	ldd	r6, Y+2	; 0x02
   197cc:	7b 80       	ldd	r7, Y+3	; 0x03
   197ce:	c2 52       	subi	r28, 0x22	; 34
   197d0:	d1 40       	sbci	r29, 0x01	; 1
   197d2:	48 0c       	add	r4, r8
   197d4:	59 1c       	adc	r5, r9
   197d6:	6a 1c       	adc	r6, r10
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   197d8:	7b 1c       	adc	r7, r11
   197da:	c2 5e       	subi	r28, 0xE2	; 226
   197dc:	de 4f       	sbci	r29, 0xFE	; 254
   197de:	28 81       	ld	r18, Y
   197e0:	39 81       	ldd	r19, Y+1	; 0x01
   197e2:	4a 81       	ldd	r20, Y+2	; 0x02
   197e4:	5b 81       	ldd	r21, Y+3	; 0x03
   197e6:	ce 51       	subi	r28, 0x1E	; 30
   197e8:	d1 40       	sbci	r29, 0x01	; 1
   197ea:	82 16       	cp	r8, r18
   197ec:	93 06       	cpc	r9, r19
   197ee:	a4 06       	cpc	r10, r20
   197f0:	b5 06       	cpc	r11, r21
   197f2:	0c f0       	brlt	.+2      	; 0x197f6 <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   197f4:	53 c0       	rjmp	.+166    	; 0x1989c <lif_create_volume+0x57c>
   197f6:	00 e0       	ldi	r16, 0x00	; 0
   197f8:	11 e0       	ldi	r17, 0x01	; 1
   197fa:	ca 5e       	subi	r28, 0xEA	; 234
   197fc:	de 4f       	sbci	r29, 0xFE	; 254
   197fe:	28 81       	ld	r18, Y
   19800:	39 81       	ldd	r19, Y+1	; 0x01
   19802:	4a 81       	ldd	r20, Y+2	; 0x02
   19804:	5b 81       	ldd	r21, Y+3	; 0x03
   19806:	c6 51       	subi	r28, 0x16	; 22
   19808:	d1 40       	sbci	r29, 0x01	; 1
   1980a:	be 01       	movw	r22, r28
   1980c:	6c 5e       	subi	r22, 0xEC	; 236
   1980e:	7f 4f       	sbci	r23, 0xFF	; 255
   19810:	c7 01       	movw	r24, r14
   19812:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
   19816:	09 2e       	mov	r0, r25
   19818:	00 0c       	add	r0, r0
   1981a:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1981c:	bb 0b       	sbc	r27, r27
   1981e:	8f 3f       	cpi	r24, 0xFF	; 255
   19820:	91 05       	cpc	r25, r1
   19822:	a1 05       	cpc	r26, r1
   19824:	b1 05       	cpc	r27, r1
   19826:	09 f0       	breq	.+2      	; 0x1982a <lif_create_volume+0x50a>
   19828:	0c f4       	brge	.+2      	; 0x1982c <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1982a:	4f c0       	rjmp	.+158    	; 0x198ca <lif_create_volume+0x5aa>
   1982c:	ca 5e       	subi	r28, 0xEA	; 234
   1982e:	de 4f       	sbci	r29, 0xFE	; 254
   19830:	28 81       	ld	r18, Y
   19832:	39 81       	ldd	r19, Y+1	; 0x01
   19834:	4a 81       	ldd	r20, Y+2	; 0x02
   19836:	5b 81       	ldd	r21, Y+3	; 0x03
   19838:	c6 51       	subi	r28, 0x16	; 22
   1983a:	d1 40       	sbci	r29, 0x01	; 1
   1983c:	28 0f       	add	r18, r24
   1983e:	39 1f       	adc	r19, r25
   19840:	4a 1f       	adc	r20, r26
   19842:	5b 1f       	adc	r21, r27
   19844:	ca 5e       	subi	r28, 0xEA	; 234
   19846:	de 4f       	sbci	r29, 0xFE	; 254
   19848:	28 83       	st	Y, r18
   1984a:	39 83       	std	Y+1, r19	; 0x01
   1984c:	4a 83       	std	Y+2, r20	; 0x02
   1984e:	5b 83       	std	Y+3, r21	; 0x03
   19850:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19852:	d1 40       	sbci	r29, 0x01	; 1
   19854:	c3 01       	movw	r24, r6
   19856:	b2 01       	movw	r22, r4
   19858:	24 e6       	ldi	r18, 0x64	; 100
   1985a:	30 e0       	ldi	r19, 0x00	; 0
   1985c:	40 e0       	ldi	r20, 0x00	; 0
   1985e:	50 e0       	ldi	r21, 0x00	; 0
   19860:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
   19864:	67 2b       	or	r22, r23
   19866:	68 2b       	or	r22, r24
   19868:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1986a:	91 f4       	brne	.+36     	; 0x19890 <lif_create_volume+0x570>
   1986c:	ed b7       	in	r30, 0x3d	; 61
   1986e:	fe b7       	in	r31, 0x3e	; 62
   19870:	44 82       	std	Z+4, r4	; 0x04
   19872:	55 82       	std	Z+5, r5	; 0x05
   19874:	66 82       	std	Z+6, r6	; 0x06
   19876:	77 82       	std	Z+7, r7	; 0x07
   19878:	c6 5e       	subi	r28, 0xE6	; 230
   1987a:	de 4f       	sbci	r29, 0xFE	; 254
   1987c:	28 81       	ld	r18, Y
   1987e:	39 81       	ldd	r19, Y+1	; 0x01
   19880:	4a 81       	ldd	r20, Y+2	; 0x02
   19882:	ca 51       	subi	r28, 0x1A	; 26
   19884:	d1 40       	sbci	r29, 0x01	; 1
   19886:	21 83       	std	Z+1, r18	; 0x01
   19888:	32 83       	std	Z+2, r19	; 0x02
   1988a:	43 83       	std	Z+3, r20	; 0x03
   1988c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19890:	ff ef       	ldi	r31, 0xFF	; 255
   19892:	8f 1a       	sub	r8, r31
   19894:	9f 0a       	sbc	r9, r31
   19896:	af 0a       	sbc	r10, r31
   19898:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1989a:	93 cf       	rjmp	.-218    	; 0x197c2 <lif_create_volume+0x4a2>
   1989c:	ed b7       	in	r30, 0x3d	; 61
   1989e:	fe b7       	in	r31, 0x3e	; 62
   198a0:	44 82       	std	Z+4, r4	; 0x04
   198a2:	55 82       	std	Z+5, r5	; 0x05
   198a4:	66 82       	std	Z+6, r6	; 0x06
   198a6:	77 82       	std	Z+7, r7	; 0x07
   198a8:	82 ef       	ldi	r24, 0xF2	; 242
   198aa:	97 e3       	ldi	r25, 0x37	; 55
   198ac:	a0 e0       	ldi	r26, 0x00	; 0
   198ae:	81 83       	std	Z+1, r24	; 0x01
   198b0:	92 83       	std	Z+2, r25	; 0x02
   198b2:	a3 83       	std	Z+3, r26	; 0x03
   198b4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   198b8:	8f ef       	ldi	r24, 0xFF	; 255
   198ba:	9f ef       	ldi	r25, 0xFF	; 255
   198bc:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   198be:	91 a3       	std	Z+33, r25	; 0x21
   198c0:	80 a3       	std	Z+32, r24	; 0x20
   198c2:	c7 01       	movw	r24, r14
   198c4:	38 d8       	rcall	.-3984   	; 0x18936 <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   198c6:	89 2b       	or	r24, r25
   198c8:	19 f4       	brne	.+6      	; 0x198d0 <lif_create_volume+0x5b0>
   198ca:	c7 01       	movw	r24, r14
   198cc:	b8 da       	rcall	.-2704   	; 0x18e3e <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   198ce:	08 c0       	rjmp	.+16     	; 0x198e0 <lif_create_volume+0x5c0>
   198d0:	c7 01       	movw	r24, r14
   198d2:	1e dc       	rcall	.-1988   	; 0x19110 <lif_updatefree>
   198d4:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   198d6:	89 2b       	or	r24, r25
   198d8:	31 f4       	brne	.+12     	; 0x198e6 <lif_create_volume+0x5c6>
   198da:	c7 01       	movw	r24, r14

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   198dc:	b0 da       	rcall	.-2720   	; 0x18e3e <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   198de:	04 c0       	rjmp	.+8      	; 0x198e8 <lif_create_volume+0x5c8>
   198e0:	c1 2c       	mov	r12, r1
   198e2:	d1 2c       	mov	r13, r1
   198e4:	01 c0       	rjmp	.+2      	; 0x198e8 <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   198e6:	67 01       	movw	r12, r14
   198e8:	c6 01       	movw	r24, r12
   198ea:	c7 5d       	subi	r28, 0xD7	; 215
   198ec:	de 4f       	sbci	r29, 0xFE	; 254
   198ee:	e2 e1       	ldi	r30, 0x12	; 18
   198f0:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

000198f4 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   198f4:	ad e1       	ldi	r26, 0x1D	; 29
   198f6:	b0 e0       	ldi	r27, 0x00	; 0
   198f8:	e0 e8       	ldi	r30, 0x80	; 128
   198fa:	fc ec       	ldi	r31, 0xCC	; 204
   198fc:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   19900:	9d 8f       	std	Y+29, r25	; 0x1d
   19902:	8c 8f       	std	Y+28, r24	; 0x1c
   19904:	4a 01       	movw	r8, r20
   19906:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19908:	fc 01       	movw	r30, r24
   1990a:	c4 84       	ldd	r12, Z+12	; 0x0c
   1990c:	d5 84       	ldd	r13, Z+13	; 0x0d
   1990e:	e6 84       	ldd	r14, Z+14	; 0x0e

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19910:	f7 84       	ldd	r15, Z+15	; 0x0f
   19912:	fe db       	rcall	.-2052   	; 0x19110 <lif_updatefree>
   19914:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19916:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19918:	40 8d       	ldd	r20, Z+24	; 0x18
   1991a:	51 8d       	ldd	r21, Z+25	; 0x19
   1991c:	62 8d       	ldd	r22, Z+26	; 0x1a
   1991e:	73 8d       	ldd	r23, Z+27	; 0x1b
   19920:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19922:	99 f4       	brne	.+38     	; 0x1994a <lif_newdir+0x56>
   19924:	ed b7       	in	r30, 0x3d	; 61
   19926:	fe b7       	in	r31, 0x3e	; 62
   19928:	80 86       	std	Z+8, r8	; 0x08
   1992a:	91 86       	std	Z+9, r9	; 0x09
   1992c:	a2 86       	std	Z+10, r10	; 0x0a
   1992e:	b3 86       	std	Z+11, r11	; 0x0b
   19930:	44 83       	std	Z+4, r20	; 0x04
   19932:	55 83       	std	Z+5, r21	; 0x05
   19934:	66 83       	std	Z+6, r22	; 0x06
   19936:	77 83       	std	Z+7, r23	; 0x07
   19938:	83 e1       	ldi	r24, 0x13	; 19
   1993a:	97 e3       	ldi	r25, 0x37	; 55
   1993c:	a0 e0       	ldi	r26, 0x00	; 0
   1993e:	81 83       	std	Z+1, r24	; 0x01
   19940:	92 83       	std	Z+2, r25	; 0x02
   19942:	a3 83       	std	Z+3, r26	; 0x03
   19944:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19948:	2f c1       	rjmp	.+606    	; 0x19ba8 <lif_newdir+0x2b4>
   1994a:	48 15       	cp	r20, r8
   1994c:	59 05       	cpc	r21, r9
   1994e:	6a 05       	cpc	r22, r10
   19950:	7b 05       	cpc	r23, r11
   19952:	c4 f0       	brlt	.+48     	; 0x19984 <lif_newdir+0x90>
   19954:	44 24       	eor	r4, r4
   19956:	43 94       	inc	r4
   19958:	51 2c       	mov	r5, r1
   1995a:	61 2c       	mov	r6, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1995c:	71 2c       	mov	r7, r1
   1995e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19960:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19962:	86 5a       	subi	r24, 0xA6	; 166
   19964:	9f 4f       	sbci	r25, 0xFF	; 255
   19966:	9d 8b       	std	Y+21, r25	; 0x15
   19968:	8c 8b       	std	Y+20, r24	; 0x14
   1996a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1996c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1996e:	e4 5a       	subi	r30, 0xA4	; 164
   19970:	ff 4f       	sbci	r31, 0xFF	; 255
   19972:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19974:	ea 8b       	std	Y+18, r30	; 0x12
   19976:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19978:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1997a:	80 5a       	subi	r24, 0xA0	; 160
   1997c:	9f 4f       	sbci	r25, 0xFF	; 255
   1997e:	9f 8b       	std	Y+23, r25	; 0x17
   19980:	8e 8b       	std	Y+22, r24	; 0x16
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19982:	21 c0       	rjmp	.+66     	; 0x199c6 <lif_newdir+0xd2>
   19984:	ed b7       	in	r30, 0x3d	; 61
   19986:	fe b7       	in	r31, 0x3e	; 62
   19988:	44 83       	std	Z+4, r20	; 0x04
   1998a:	55 83       	std	Z+5, r21	; 0x05
   1998c:	66 83       	std	Z+6, r22	; 0x06
   1998e:	77 83       	std	Z+7, r23	; 0x07
   19990:	8a ee       	ldi	r24, 0xEA	; 234
   19992:	96 e3       	ldi	r25, 0x36	; 54
   19994:	a0 e0       	ldi	r26, 0x00	; 0
   19996:	81 83       	std	Z+1, r24	; 0x01
   19998:	92 83       	std	Z+2, r25	; 0x02
   1999a:	a3 83       	std	Z+3, r26	; 0x03
   1999c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   199a0:	03 c1       	rjmp	.+518    	; 0x19ba8 <lif_newdir+0x2b4>
   199a2:	ec 89       	ldd	r30, Y+20	; 0x14
   199a4:	fd 89       	ldd	r31, Y+21	; 0x15
   199a6:	80 81       	ld	r24, Z
   199a8:	91 81       	ldd	r25, Z+1	; 0x01
   199aa:	8f 3f       	cpi	r24, 0xFF	; 255
   199ac:	ff ef       	ldi	r31, 0xFF	; 255
   199ae:	9f 07       	cpc	r25, r31
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   199b0:	a1 f0       	breq	.+40     	; 0x199da <lif_newdir+0xe6>
   199b2:	89 2b       	or	r24, r25
   199b4:	09 f0       	breq	.+2      	; 0x199b8 <lif_newdir+0xc4>
        {
            if(freestate == 0)
   199b6:	ce c0       	rjmp	.+412    	; 0x19b54 <lif_newdir+0x260>
   199b8:	61 14       	cp	r6, r1
   199ba:	71 04       	cpc	r7, r1
   199bc:	09 f4       	brne	.+2      	; 0x199c0 <lif_newdir+0xcc>
   199be:	c1 c0       	rjmp	.+386    	; 0x19b42 <lif_newdir+0x24e>
   199c0:	ff ef       	ldi	r31, 0xFF	; 255
   199c2:	4f 1a       	sub	r4, r31
   199c4:	5f 0a       	sbc	r5, r31
   199c6:	82 01       	movw	r16, r4
   199c8:	01 50       	subi	r16, 0x01	; 1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   199ca:	11 09       	sbc	r17, r1
   199cc:	b8 01       	movw	r22, r16
   199ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199d2:	c3 da       	rcall	.-2682   	; 0x18f5a <lif_readdirindex>
   199d4:	89 2b       	or	r24, r25
   199d6:	29 f7       	brne	.-54     	; 0x199a2 <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   199d8:	e7 c0       	rjmp	.+462    	; 0x19ba8 <lif_newdir+0x2b4>
   199da:	22 e0       	ldi	r18, 0x02	; 2
   199dc:	62 16       	cp	r6, r18
   199de:	71 04       	cpc	r7, r1
   199e0:	09 f0       	breq	.+2      	; 0x199e4 <lif_newdir+0xf0>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   199e2:	46 c0       	rjmp	.+140    	; 0x19a70 <lif_newdir+0x17c>
   199e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199e8:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   199ec:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199ee:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199f0:	e4 5a       	subi	r30, 0xA4	; 164
   199f2:	ff 4f       	sbci	r31, 0xFF	; 255
   199f4:	88 8d       	ldd	r24, Y+24	; 0x18
   199f6:	80 83       	st	Z, r24
   199f8:	99 8d       	ldd	r25, Y+25	; 0x19
   199fa:	91 83       	std	Z+1, r25	; 0x01
   199fc:	2a 8d       	ldd	r18, Y+26	; 0x1a
   199fe:	22 83       	std	Z+2, r18	; 0x02
   19a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   19a02:	83 83       	std	Z+3, r24	; 0x03
   19a04:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a06:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a08:	e0 5a       	subi	r30, 0xA0	; 160
   19a0a:	ff 4f       	sbci	r31, 0xFF	; 255
   19a0c:	80 82       	st	Z, r8
   19a0e:	91 82       	std	Z+1, r9	; 0x01
   19a10:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   19a12:	b3 82       	std	Z+3, r11	; 0x03
   19a14:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a16:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a18:	84 89       	ldd	r24, Z+20	; 0x14
   19a1a:	95 89       	ldd	r25, Z+21	; 0x15
   19a1c:	a6 89       	ldd	r26, Z+22	; 0x16
   19a1e:	b7 89       	ldd	r27, Z+23	; 0x17
   19a20:	88 0d       	add	r24, r8
   19a22:	99 1d       	adc	r25, r9
   19a24:	aa 1d       	adc	r26, r10
   19a26:	bb 1d       	adc	r27, r11
   19a28:	84 8b       	std	Z+20, r24	; 0x14
   19a2a:	95 8b       	std	Z+21, r25	; 0x15
   19a2c:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   19a2e:	b7 8b       	std	Z+23, r27	; 0x17
   19a30:	80 8d       	ldd	r24, Z+24	; 0x18
   19a32:	91 8d       	ldd	r25, Z+25	; 0x19
   19a34:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a36:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a38:	88 19       	sub	r24, r8
   19a3a:	99 09       	sbc	r25, r9
   19a3c:	aa 09       	sbc	r26, r10
   19a3e:	bb 09       	sbc	r27, r11
   19a40:	80 8f       	std	Z+24, r24	; 0x18
   19a42:	91 8f       	std	Z+25, r25	; 0x19
   19a44:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   19a46:	b3 8f       	std	Z+27, r27	; 0x1b
   19a48:	84 8d       	ldd	r24, Z+28	; 0x1c
   19a4a:	95 8d       	ldd	r25, Z+29	; 0x1d
   19a4c:	01 96       	adiw	r24, 0x01	; 1
   19a4e:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   19a50:	84 8f       	std	Z+28, r24	; 0x1c
   19a52:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a54:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a56:	01 97       	sbiw	r24, 0x01	; 1
   19a58:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   19a5a:	86 8f       	std	Z+30, r24	; 0x1e
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19a5c:	20 a2       	std	Z+32, r2	; 0x20
   19a5e:	31 a2       	std	Z+33, r3	; 0x21
   19a60:	b1 01       	movw	r22, r2
   19a62:	cf 01       	movw	r24, r30
   19a64:	e1 da       	rcall	.-2622   	; 0x19028 <lif_writedirindex>
   19a66:	89 2b       	or	r24, r25
   19a68:	09 f4       	brne	.+2      	; 0x19a6c <lif_newdir+0x178>
   19a6a:	9e c0       	rjmp	.+316    	; 0x19ba8 <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19a6c:	c1 01       	movw	r24, r2
   19a6e:	9e c0       	rjmp	.+316    	; 0x19bac <lif_newdir+0x2b8>
   19a70:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19a74:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19a78:	92 ff       	sbrs	r25, 2
   19a7a:	1e c0       	rjmp	.+60     	; 0x19ab8 <lif_newdir+0x1c4>
   19a7c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a7e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a80:	80 8d       	ldd	r24, Z+24	; 0x18
   19a82:	91 8d       	ldd	r25, Z+25	; 0x19
   19a84:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a86:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a88:	ed b7       	in	r30, 0x3d	; 61
   19a8a:	fe b7       	in	r31, 0x3e	; 62
   19a8c:	86 87       	std	Z+14, r24	; 0x0e
   19a8e:	97 87       	std	Z+15, r25	; 0x0f
   19a90:	a0 8b       	std	Z+16, r26	; 0x10
   19a92:	b1 8b       	std	Z+17, r27	; 0x11
   19a94:	82 86       	std	Z+10, r8	; 0x0a
   19a96:	93 86       	std	Z+11, r9	; 0x0b
   19a98:	a4 86       	std	Z+12, r10	; 0x0c
   19a9a:	b5 86       	std	Z+13, r11	; 0x0d
   19a9c:	c6 82       	std	Z+6, r12	; 0x06
   19a9e:	d7 82       	std	Z+7, r13	; 0x07
   19aa0:	e0 86       	std	Z+8, r14	; 0x08
   19aa2:	f1 86       	std	Z+9, r15	; 0x09
   19aa4:	15 83       	std	Z+5, r17	; 0x05
   19aa6:	04 83       	std	Z+4, r16	; 0x04
   19aa8:	89 e9       	ldi	r24, 0x99	; 153
   19aaa:	96 e3       	ldi	r25, 0x36	; 54
   19aac:	a0 e0       	ldi	r26, 0x00	; 0
   19aae:	81 83       	std	Z+1, r24	; 0x01
   19ab0:	92 83       	std	Z+2, r25	; 0x02
   19ab2:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19ab4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   19ab8:	b8 01       	movw	r22, r16
   19aba:	6f 5f       	subi	r22, 0xFF	; 255
   19abc:	7f 4f       	sbci	r23, 0xFF	; 255
   19abe:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19ac0:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19ac2:	0e db       	rcall	.-2532   	; 0x190e0 <lif_writedirEOF>
   19ac4:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   19ac6:	09 f4       	brne	.+2      	; 0x19aca <lif_newdir+0x1d6>
   19ac8:	6f c0       	rjmp	.+222    	; 0x19ba8 <lif_newdir+0x2b4>
   19aca:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19acc:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   19ace:	0e 94 c6 c2 	call	0x1858c	; 0x1858c <lif_dir_clear>
   19ad2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ad4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ad6:	e4 5a       	subi	r30, 0xA4	; 164
   19ad8:	ff 4f       	sbci	r31, 0xFF	; 255
   19ada:	c0 82       	st	Z, r12
   19adc:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   19ade:	e2 82       	std	Z+2, r14	; 0x02
   19ae0:	f3 82       	std	Z+3, r15	; 0x03
   19ae2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ae4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ae6:	e0 5a       	subi	r30, 0xA0	; 160
   19ae8:	ff 4f       	sbci	r31, 0xFF	; 255
   19aea:	80 82       	st	Z, r8
   19aec:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   19aee:	a2 82       	std	Z+2, r10	; 0x02
   19af0:	b3 82       	std	Z+3, r11	; 0x03
   19af2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19af4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19af6:	84 89       	ldd	r24, Z+20	; 0x14
   19af8:	95 89       	ldd	r25, Z+21	; 0x15
   19afa:	a6 89       	ldd	r26, Z+22	; 0x16
   19afc:	b7 89       	ldd	r27, Z+23	; 0x17
   19afe:	88 0d       	add	r24, r8
   19b00:	99 1d       	adc	r25, r9
   19b02:	aa 1d       	adc	r26, r10
   19b04:	bb 1d       	adc	r27, r11
   19b06:	84 8b       	std	Z+20, r24	; 0x14
   19b08:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   19b0a:	a6 8b       	std	Z+22, r26	; 0x16
   19b0c:	b7 8b       	std	Z+23, r27	; 0x17
   19b0e:	80 8d       	ldd	r24, Z+24	; 0x18
   19b10:	91 8d       	ldd	r25, Z+25	; 0x19
   19b12:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19b14:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19b16:	88 19       	sub	r24, r8
   19b18:	99 09       	sbc	r25, r9
   19b1a:	aa 09       	sbc	r26, r10
   19b1c:	bb 09       	sbc	r27, r11
   19b1e:	80 8f       	std	Z+24, r24	; 0x18
   19b20:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   19b22:	a2 8f       	std	Z+26, r26	; 0x1a
   19b24:	b3 8f       	std	Z+27, r27	; 0x1b
   19b26:	84 8d       	ldd	r24, Z+28	; 0x1c
   19b28:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   19b2a:	01 96       	adiw	r24, 0x01	; 1
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19b2c:	95 8f       	std	Z+29, r25	; 0x1d
   19b2e:	84 8f       	std	Z+28, r24	; 0x1c
   19b30:	11 a3       	std	Z+33, r17	; 0x21
   19b32:	00 a3       	std	Z+32, r16	; 0x20
   19b34:	b8 01       	movw	r22, r16
   19b36:	cf 01       	movw	r24, r30
   19b38:	77 da       	rcall	.-2834   	; 0x19028 <lif_writedirindex>
   19b3a:	89 2b       	or	r24, r25
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19b3c:	a9 f1       	breq	.+106    	; 0x19ba8 <lif_newdir+0x2b4>
   19b3e:	c8 01       	movw	r24, r16
   19b40:	35 c0       	rjmp	.+106    	; 0x19bac <lif_newdir+0x2b8>
   19b42:	c8 8e       	std	Y+24, r12	; 0x18
   19b44:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19b46:	ea 8e       	std	Y+26, r14	; 0x1a
   19b48:	fb 8e       	std	Y+27, r15	; 0x1b
   19b4a:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   19b4c:	66 24       	eor	r6, r6
        }

// VALID record
        if(freestate == 1)
   19b4e:	63 94       	inc	r6
   19b50:	71 2c       	mov	r7, r1
   19b52:	36 cf       	rjmp	.-404    	; 0x199c0 <lif_newdir+0xcc>
   19b54:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19b56:	6f 16       	cp	r6, r31
   19b58:	71 04       	cpc	r7, r1
   19b5a:	a9 f4       	brne	.+42     	; 0x19b86 <lif_newdir+0x292>
   19b5c:	ea 89       	ldd	r30, Y+18	; 0x12
   19b5e:	fb 89       	ldd	r31, Y+19	; 0x13
   19b60:	80 81       	ld	r24, Z
   19b62:	91 81       	ldd	r25, Z+1	; 0x01
   19b64:	a2 81       	ldd	r26, Z+2	; 0x02
   19b66:	b3 81       	ldd	r27, Z+3	; 0x03
   19b68:	8c 19       	sub	r24, r12
   19b6a:	9d 09       	sbc	r25, r13
   19b6c:	ae 09       	sbc	r26, r14
   19b6e:	bf 09       	sbc	r27, r15
   19b70:	88 15       	cp	r24, r8
   19b72:	99 05       	cpc	r25, r9
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19b74:	aa 05       	cpc	r26, r10
   19b76:	bb 05       	cpc	r27, r11
   19b78:	1c f4       	brge	.+6      	; 0x19b80 <lif_newdir+0x28c>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19b7a:	61 2c       	mov	r6, r1
   19b7c:	71 2c       	mov	r7, r1
   19b7e:	03 c0       	rjmp	.+6      	; 0x19b86 <lif_newdir+0x292>
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19b80:	82 e0       	ldi	r24, 0x02	; 2
   19b82:	68 2e       	mov	r6, r24
   19b84:	71 2c       	mov	r7, r1
   19b86:	ea 89       	ldd	r30, Y+18	; 0x12
   19b88:	fb 89       	ldd	r31, Y+19	; 0x13
   19b8a:	c0 80       	ld	r12, Z
   19b8c:	d1 80       	ldd	r13, Z+1	; 0x01
   19b8e:	e2 80       	ldd	r14, Z+2	; 0x02
   19b90:	f3 80       	ldd	r15, Z+3	; 0x03
   19b92:	ee 89       	ldd	r30, Y+22	; 0x16
   19b94:	ff 89       	ldd	r31, Y+23	; 0x17
   19b96:	80 81       	ld	r24, Z
   19b98:	91 81       	ldd	r25, Z+1	; 0x01
   19b9a:	a2 81       	ldd	r26, Z+2	; 0x02
   19b9c:	b3 81       	ldd	r27, Z+3	; 0x03
   19b9e:	c8 0e       	add	r12, r24
   19ba0:	d9 1e       	adc	r13, r25
        ++index;
    }
// ERROR
    return(-1);
   19ba2:	ea 1e       	adc	r14, r26
   19ba4:	fb 1e       	adc	r15, r27
}
   19ba6:	0c cf       	rjmp	.-488    	; 0x199c0 <lif_newdir+0xcc>
   19ba8:	8f ef       	ldi	r24, 0xFF	; 255
   19baa:	9f ef       	ldi	r25, 0xFF	; 255
   19bac:	6d 96       	adiw	r28, 0x1d	; 29
   19bae:	e2 e1       	ldi	r30, 0x12	; 18
   19bb0:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

00019bb4 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19bb4:	a9 e3       	ldi	r26, 0x39	; 57
   19bb6:	b1 e0       	ldi	r27, 0x01	; 1
   19bb8:	e0 ee       	ldi	r30, 0xE0	; 224
   19bba:	fd ec       	ldi	r31, 0xCD	; 205
   19bbc:	0c 94 97 e0 	jmp	0x1c12e	; 0x1c12e <__prologue_saves__+0xc>
   19bc0:	6c 01       	movw	r12, r24
   19bc2:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19bc4:	be 01       	movw	r22, r28
   19bc6:	66 5f       	subi	r22, 0xF6	; 246
   19bc8:	7e 4f       	sbci	r23, 0xFE	; 254
   19bca:	0e 94 19 be 	call	0x17c32	; 0x17c32 <lif_stat>
   19bce:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19bd0:	00 97       	sbiw	r24, 0x00	; 0
   19bd2:	f9 f0       	breq	.+62     	; 0x19c12 <lif_open_volume+0x5e>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19bd4:	fc 01       	movw	r30, r24
   19bd6:	80 8d       	ldd	r24, Z+24	; 0x18
   19bd8:	91 8d       	ldd	r25, Z+25	; 0x19
   19bda:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19bdc:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19bde:	81 15       	cp	r24, r1
   19be0:	f2 e0       	ldi	r31, 0x02	; 2
   19be2:	9f 07       	cpc	r25, r31
   19be4:	a1 05       	cpc	r26, r1
   19be6:	b1 05       	cpc	r27, r1
   19be8:	b8 f4       	brcc	.+46     	; 0x19c18 <lif_open_volume+0x64>
    {
        if(debuglevel & GPIB_PPR)
   19bea:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19bee:	21 ff       	sbrs	r18, 1
   19bf0:	10 c0       	rjmp	.+32     	; 0x19c12 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19bf2:	ed b7       	in	r30, 0x3d	; 61
   19bf4:	fe b7       	in	r31, 0x3e	; 62
   19bf6:	86 83       	std	Z+6, r24	; 0x06
   19bf8:	97 83       	std	Z+7, r25	; 0x07
   19bfa:	a0 87       	std	Z+8, r26	; 0x08
   19bfc:	b1 87       	std	Z+9, r27	; 0x09
   19bfe:	d5 82       	std	Z+5, r13	; 0x05
   19c00:	c4 82       	std	Z+4, r12	; 0x04
   19c02:	8a e5       	ldi	r24, 0x5A	; 90
   19c04:	96 e3       	ldi	r25, 0x36	; 54
   19c06:	a0 e0       	ldi	r26, 0x00	; 0
   19c08:	81 83       	std	Z+1, r24	; 0x01
   19c0a:	92 83       	std	Z+2, r25	; 0x02
   19c0c:	a3 83       	std	Z+3, r26	; 0x03
   19c0e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(NULL);
   19c12:	00 e0       	ldi	r16, 0x00	; 0
   19c14:	10 e0       	ldi	r17, 0x00	; 0
   19c16:	c2 c0       	rjmp	.+388    	; 0x19d9c <lif_open_volume+0x1e8>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19c18:	64 e7       	ldi	r22, 0x74	; 116
   19c1a:	70 e0       	ldi	r23, 0x00	; 0
   19c1c:	80 e0       	ldi	r24, 0x00	; 0
   19c1e:	90 e0       	ldi	r25, 0x00	; 0
   19c20:	0e 94 85 bd 	call	0x17b0a	; 0x17b0a <lif_calloc>
   19c24:	7c 01       	movw	r14, r24
    if(!LIF)
   19c26:	89 2b       	or	r24, r25
   19c28:	a1 f3       	breq	.-24     	; 0x19c12 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19c2a:	c6 01       	movw	r24, r12
   19c2c:	0e 94 d0 bd 	call	0x17ba0	; 0x17ba0 <lif_stralloc>
   19c30:	f7 01       	movw	r30, r14
   19c32:	91 83       	std	Z+1, r25	; 0x01
   19c34:	80 83       	st	Z, r24
    if(!LIF->name)
   19c36:	00 97       	sbiw	r24, 0x00	; 0
   19c38:	09 f4       	brne	.+2      	; 0x19c3c <lif_open_volume+0x88>
   19c3a:	5a c0       	rjmp	.+180    	; 0x19cf0 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19c3c:	f5 01       	movw	r30, r10
   19c3e:	80 8c       	ldd	r8, Z+24	; 0x18
   19c40:	91 8c       	ldd	r9, Z+25	; 0x19
   19c42:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19c44:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19c46:	f7 01       	movw	r30, r14
   19c48:	80 86       	std	Z+8, r8	; 0x08
   19c4a:	91 86       	std	Z+9, r9	; 0x09
   19c4c:	a2 86       	std	Z+10, r10	; 0x0a
   19c4e:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19c50:	77 27       	eor	r23, r23
   19c52:	6b 2d       	mov	r22, r11
   19c54:	5a 2d       	mov	r21, r10
   19c56:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19c58:	88 20       	and	r8, r8
   19c5a:	21 f0       	breq	.+8      	; 0x19c64 <lif_open_volume+0xb0>
        ++sectors;
   19c5c:	4f 5f       	subi	r20, 0xFF	; 255
   19c5e:	5f 4f       	sbci	r21, 0xFF	; 255
   19c60:	6f 4f       	sbci	r22, 0xFF	; 255
   19c62:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19c64:	f7 01       	movw	r30, r14
   19c66:	44 83       	std	Z+4, r20	; 0x04
   19c68:	55 83       	std	Z+5, r21	; 0x05
   19c6a:	66 83       	std	Z+6, r22	; 0x06
   19c6c:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19c6e:	b8 01       	movw	r22, r16
   19c70:	0e 94 ef bd 	call	0x17bde	; 0x17bde <lif_open>
   19c74:	f7 01       	movw	r30, r14
   19c76:	93 83       	std	Z+3, r25	; 0x03
   19c78:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19c7a:	89 2b       	or	r24, r25
   19c7c:	c9 f1       	breq	.+114    	; 0x19cf0 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19c7e:	00 e0       	ldi	r16, 0x00	; 0
   19c80:	11 e0       	ldi	r17, 0x01	; 1
   19c82:	20 e0       	ldi	r18, 0x00	; 0
   19c84:	30 e0       	ldi	r19, 0x00	; 0
   19c86:	a9 01       	movw	r20, r18
   19c88:	be 01       	movw	r22, r28
   19c8a:	66 5f       	subi	r22, 0xF6	; 246
   19c8c:	7f 4f       	sbci	r23, 0xFF	; 255
   19c8e:	c7 01       	movw	r24, r14
   19c90:	0e 94 73 be 	call	0x17ce6	; 0x17ce6 <lif_read>
   19c94:	6f 3f       	cpi	r22, 0xFF	; 255
   19c96:	71 05       	cpc	r23, r1
   19c98:	81 05       	cpc	r24, r1
   19c9a:	91 05       	cpc	r25, r1
   19c9c:	09 f0       	breq	.+2      	; 0x19ca0 <lif_open_volume+0xec>
   19c9e:	5c f4       	brge	.+22     	; 0x19cb6 <lif_open_volume+0x102>
    {
        if(debuglevel & GPIB_PPR)
   19ca0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19ca4:	81 ff       	sbrs	r24, 1
   19ca6:	24 c0       	rjmp	.+72     	; 0x19cf0 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19ca8:	ed b7       	in	r30, 0x3d	; 61
   19caa:	fe b7       	in	r31, 0x3e	; 62
   19cac:	d5 82       	std	Z+5, r13	; 0x05
   19cae:	c4 82       	std	Z+4, r12	; 0x04
   19cb0:	84 e2       	ldi	r24, 0x24	; 36
   19cb2:	96 e3       	ldi	r25, 0x36	; 54
   19cb4:	17 c0       	rjmp	.+46     	; 0x19ce4 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19cb6:	b7 01       	movw	r22, r14
   19cb8:	ce 01       	movw	r24, r28
   19cba:	0a 96       	adiw	r24, 0x0a	; 10
   19cbc:	0e 94 8f c0 	call	0x1811e	; 0x1811e <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19cc0:	c7 01       	movw	r24, r14
   19cc2:	0e 94 9b c4 	call	0x18936	; 0x18936 <lif_check_volume>
   19cc6:	89 2b       	or	r24, r25
   19cc8:	b1 f4       	brne	.+44     	; 0x19cf6 <lif_open_volume+0x142>
    {
        if(debuglevel & GPIB_PPR)
   19cca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19cce:	81 ff       	sbrs	r24, 1
   19cd0:	0f c0       	rjmp	.+30     	; 0x19cf0 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19cd2:	f7 01       	movw	r30, r14
   19cd4:	80 81       	ld	r24, Z
   19cd6:	91 81       	ldd	r25, Z+1	; 0x01
   19cd8:	ed b7       	in	r30, 0x3d	; 61
   19cda:	fe b7       	in	r31, 0x3e	; 62
   19cdc:	95 83       	std	Z+5, r25	; 0x05
   19cde:	84 83       	std	Z+4, r24	; 0x04
   19ce0:	81 ef       	ldi	r24, 0xF1	; 241
   19ce2:	95 e3       	ldi	r25, 0x35	; 53
   19ce4:	a0 e0       	ldi	r26, 0x00	; 0
   19ce6:	81 83       	std	Z+1, r24	; 0x01
   19ce8:	92 83       	std	Z+2, r25	; 0x02
   19cea:	a3 83       	std	Z+3, r26	; 0x03
   19cec:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19cf0:	c7 01       	movw	r24, r14
   19cf2:	a5 d8       	rcall	.-3766   	; 0x18e3e <lif_close_volume>
   19cf4:	8e cf       	rjmp	.-228    	; 0x19c12 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19cf6:	f7 01       	movw	r30, r14
   19cf8:	45 a5       	ldd	r20, Z+45	; 0x2d
   19cfa:	56 a5       	ldd	r21, Z+46	; 0x2e
   19cfc:	67 a5       	ldd	r22, Z+47	; 0x2f
   19cfe:	70 a9       	ldd	r23, Z+48	; 0x30
   19d00:	85 a9       	ldd	r24, Z+53	; 0x35
   19d02:	96 a9       	ldd	r25, Z+54	; 0x36
   19d04:	a7 a9       	ldd	r26, Z+55	; 0x37
   19d06:	b0 ad       	ldd	r27, Z+56	; 0x38
   19d08:	48 0f       	add	r20, r24
   19d0a:	59 1f       	adc	r21, r25
   19d0c:	6a 1f       	adc	r22, r26
   19d0e:	7b 1f       	adc	r23, r27
   19d10:	44 87       	std	Z+12, r20	; 0x0c
   19d12:	55 87       	std	Z+13, r21	; 0x0d
   19d14:	66 87       	std	Z+14, r22	; 0x0e
   19d16:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19d18:	84 81       	ldd	r24, Z+4	; 0x04
   19d1a:	95 81       	ldd	r25, Z+5	; 0x05
   19d1c:	a6 81       	ldd	r26, Z+6	; 0x06
   19d1e:	b7 81       	ldd	r27, Z+7	; 0x07
   19d20:	84 1b       	sub	r24, r20
   19d22:	95 0b       	sbc	r25, r21
   19d24:	a6 0b       	sbc	r26, r22
   19d26:	b7 0b       	sbc	r27, r23
   19d28:	80 8b       	std	Z+16, r24	; 0x10
   19d2a:	91 8b       	std	Z+17, r25	; 0x11
   19d2c:	a2 8b       	std	Z+18, r26	; 0x12
   19d2e:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19d30:	80 8f       	std	Z+24, r24	; 0x18
   19d32:	91 8f       	std	Z+25, r25	; 0x19
   19d34:	a2 8f       	std	Z+26, r26	; 0x1a
   19d36:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19d38:	14 8a       	std	Z+20, r1	; 0x14
   19d3a:	15 8a       	std	Z+21, r1	; 0x15
   19d3c:	16 8a       	std	Z+22, r1	; 0x16
   19d3e:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19d40:	17 8e       	std	Z+31, r1	; 0x1f
   19d42:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19d44:	15 8e       	std	Z+29, r1	; 0x1d
   19d46:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19d48:	11 a2       	std	Z+33, r1	; 0x21
   19d4a:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19d4c:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   19d4e:	12 a2       	std	Z+34, r1	; 0x22
   19d50:	c7 01       	movw	r24, r14
   19d52:	de d9       	rcall	.-3140   	; 0x19110 <lif_updatefree>
   19d54:	8c 01       	movw	r16, r24
   19d56:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19d5a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19d5e:	01 15       	cp	r16, r1
   19d60:	11 05       	cpc	r17, r1
    {
        if(debuglevel & GPIB_PPR)
   19d62:	a1 f4       	brne	.+40     	; 0x19d8c <lif_open_volume+0x1d8>
   19d64:	81 ff       	sbrs	r24, 1
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19d66:	0f c0       	rjmp	.+30     	; 0x19d86 <lif_open_volume+0x1d2>
   19d68:	f7 01       	movw	r30, r14
   19d6a:	80 81       	ld	r24, Z
   19d6c:	91 81       	ldd	r25, Z+1	; 0x01
   19d6e:	ed b7       	in	r30, 0x3d	; 61
   19d70:	fe b7       	in	r31, 0x3e	; 62
   19d72:	95 83       	std	Z+5, r25	; 0x05
   19d74:	84 83       	std	Z+4, r24	; 0x04
   19d76:	8e eb       	ldi	r24, 0xBE	; 190
   19d78:	95 e3       	ldi	r25, 0x35	; 53
   19d7a:	a0 e0       	ldi	r26, 0x00	; 0
   19d7c:	81 83       	std	Z+1, r24	; 0x01
   19d7e:	92 83       	std	Z+2, r25	; 0x02
   19d80:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d82:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   19d86:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19d88:	5a d8       	rcall	.-3916   	; 0x18e3e <lif_close_volume>
    }

    if(debuglevel &LIF_DEBUG)
   19d8a:	08 c0       	rjmp	.+16     	; 0x19d9c <lif_open_volume+0x1e8>
   19d8c:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF, "Volume Listing");
   19d8e:	05 c0       	rjmp	.+10     	; 0x19d9a <lif_open_volume+0x1e6>
   19d90:	6c e2       	ldi	r22, 0x2C	; 44
   19d92:	76 e1       	ldi	r23, 0x16	; 22
   19d94:	c7 01       	movw	r24, r14
   19d96:	0e 94 d5 c2 	call	0x185aa	; 0x185aa <lif_dump_vol>
    return( LIF );
}
   19d9a:	87 01       	movw	r16, r14
   19d9c:	c8 01       	movw	r24, r16
   19d9e:	c7 5c       	subi	r28, 0xC7	; 199
   19da0:	de 4f       	sbci	r29, 0xFE	; 254
   19da2:	ec e0       	ldi	r30, 0x0C	; 12
   19da4:	0c 94 b3 e0 	jmp	0x1c166	; 0x1c166 <__epilogue_restores__+0xc>

00019da8 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19da8:	2f 92       	push	r2
   19daa:	3f 92       	push	r3
   19dac:	4f 92       	push	r4
   19dae:	5f 92       	push	r5
   19db0:	6f 92       	push	r6
   19db2:	8f 92       	push	r8
   19db4:	9f 92       	push	r9
   19db6:	af 92       	push	r10
   19db8:	bf 92       	push	r11
   19dba:	cf 92       	push	r12
   19dbc:	df 92       	push	r13
   19dbe:	ef 92       	push	r14
   19dc0:	0f 93       	push	r16
   19dc2:	1f 93       	push	r17
   19dc4:	cf 93       	push	r28
   19dc6:	df 93       	push	r29
   19dc8:	cd b7       	in	r28, 0x3d	; 61
   19dca:	de b7       	in	r29, 0x3e	; 62
   19dcc:	af 97       	sbiw	r28, 0x2f	; 47
   19dce:	0f b6       	in	r0, 0x3f	; 63
   19dd0:	f8 94       	cli
   19dd2:	de bf       	out	0x3e, r29	; 62
   19dd4:	0f be       	out	0x3f, r0	; 63
   19dd6:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19dd8:	6a ed       	ldi	r22, 0xDA	; 218
   19dda:	78 e0       	ldi	r23, 0x08	; 8
   19ddc:	eb de       	rcall	.-554    	; 0x19bb4 <lif_open_volume>
   19dde:	9f a7       	std	Y+47, r25	; 0x2f
   19de0:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19de2:	00 97       	sbiw	r24, 0x00	; 0
   19de4:	09 f4       	brne	.+2      	; 0x19de8 <lif_dir+0x40>
   19de6:	9e c1       	rjmp	.+828    	; 0x1a124 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19de8:	fc 01       	movw	r30, r24
   19dea:	86 a1       	ldd	r24, Z+38	; 0x26
   19dec:	88 23       	and	r24, r24
   19dee:	21 f0       	breq	.+8      	; 0x19df8 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19df0:	8f 01       	movw	r16, r30
   19df2:	0a 5d       	subi	r16, 0xDA	; 218
   19df4:	1f 4f       	sbci	r17, 0xFF	; 255
   19df6:	02 c0       	rjmp	.+4      	; 0x19dfc <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19df8:	0e ed       	ldi	r16, 0xDE	; 222
   19dfa:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19dfc:	8e a5       	ldd	r24, Y+46	; 0x2e
   19dfe:	9f a5       	ldd	r25, Y+47	; 0x2f
   19e00:	87 5b       	subi	r24, 0xB7	; 183
   19e02:	9f 4f       	sbci	r25, 0xFF	; 255
   19e04:	0e 94 99 c2 	call	0x18532	; 0x18532 <lif_lifbcd2timestr>
   19e08:	ed b7       	in	r30, 0x3d	; 61
   19e0a:	fe b7       	in	r31, 0x3e	; 62
   19e0c:	97 83       	std	Z+7, r25	; 0x07
   19e0e:	86 83       	std	Z+6, r24	; 0x06
   19e10:	15 83       	std	Z+5, r17	; 0x05
   19e12:	04 83       	std	Z+4, r16	; 0x04
   19e14:	87 ea       	ldi	r24, 0xA7	; 167
   19e16:	95 e3       	ldi	r25, 0x35	; 53
   19e18:	a0 e0       	ldi	r26, 0x00	; 0
   19e1a:	81 83       	std	Z+1, r24	; 0x01
   19e1c:	92 83       	std	Z+2, r25	; 0x02
   19e1e:	a3 83       	std	Z+3, r26	; 0x03
   19e20:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19e24:	87 e6       	ldi	r24, 0x67	; 103
   19e26:	95 e3       	ldi	r25, 0x35	; 53
   19e28:	a0 e0       	ldi	r26, 0x00	; 0
   19e2a:	ed b7       	in	r30, 0x3d	; 61
   19e2c:	fe b7       	in	r31, 0x3e	; 62
   19e2e:	81 83       	std	Z+1, r24	; 0x01
   19e30:	92 83       	std	Z+2, r25	; 0x02
   19e32:	a3 83       	std	Z+3, r26	; 0x03
   19e34:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19e38:	00 e2       	ldi	r16, 0x20	; 32
   19e3a:	10 e0       	ldi	r17, 0x00	; 0
   19e3c:	1f 8b       	std	Y+23, r17	; 0x17
   19e3e:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19e40:	21 2c       	mov	r2, r1
   19e42:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e44:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e46:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e48:	06 5a       	subi	r16, 0xA6	; 166
   19e4a:	1f 4f       	sbci	r17, 0xFF	; 255
   19e4c:	1d 8f       	std	Y+29, r17	; 0x1d
   19e4e:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19e50:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e52:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e54:	00 5a       	subi	r16, 0xA0	; 160
   19e56:	1f 4f       	sbci	r17, 0xFF	; 255
   19e58:	1d a3       	std	Y+37, r17	; 0x25
   19e5a:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19e5c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e5e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e60:	04 59       	subi	r16, 0x94	; 148
   19e62:	1f 4f       	sbci	r17, 0xFF	; 255
   19e64:	1f a3       	std	Y+39, r17	; 0x27
   19e66:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19e68:	8b e1       	ldi	r24, 0x1B	; 27
   19e6a:	95 e3       	ldi	r25, 0x35	; 53
   19e6c:	6c 01       	movw	r12, r24
   19e6e:	e1 2c       	mov	r14, r1
   19e70:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e72:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e74:	01 5b       	subi	r16, 0xB1	; 177
   19e76:	1f 4f       	sbci	r17, 0xFF	; 255
   19e78:	1f 8f       	std	Y+31, r17	; 0x1f
   19e7a:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19e7c:	8b ee       	ldi	r24, 0xEB	; 235
   19e7e:	94 e3       	ldi	r25, 0x34	; 52
   19e80:	2c 01       	movw	r4, r24
   19e82:	61 2c       	mov	r6, r1
   19e84:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e86:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e88:	04 5a       	subi	r16, 0xA4	; 164
   19e8a:	1f 4f       	sbci	r17, 0xFF	; 255
   19e8c:	19 a7       	std	Y+41, r17	; 0x29
   19e8e:	08 a7       	std	Y+40, r16	; 0x28
   19e90:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e92:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e94:	02 59       	subi	r16, 0x92	; 146
   19e96:	1f 4f       	sbci	r17, 0xFF	; 255
   19e98:	1b a7       	std	Y+43, r17	; 0x2b
   19e9a:	0a a7       	std	Y+42, r16	; 0x2a
   19e9c:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e9e:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ea0:	0c 59       	subi	r16, 0x9C	; 156
   19ea2:	1f 4f       	sbci	r17, 0xFF	; 255
   19ea4:	1d a7       	std	Y+45, r17	; 0x2d
   19ea6:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19ea8:	b1 01       	movw	r22, r2
   19eaa:	8e a5       	ldd	r24, Y+46	; 0x2e
   19eac:	9f a5       	ldd	r25, Y+47	; 0x2f
   19eae:	55 d8       	rcall	.-3926   	; 0x18f5a <lif_readdirindex>
   19eb0:	89 2b       	or	r24, r25
   19eb2:	09 f4       	brne	.+2      	; 0x19eb6 <lif_dir+0x10e>
   19eb4:	ad c0       	rjmp	.+346    	; 0x1a010 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19eb6:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19eb8:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19eba:	8d 91       	ld	r24, X+
   19ebc:	9c 91       	ld	r25, X
   19ebe:	8f 3f       	cpi	r24, 0xFF	; 255
   19ec0:	bf ef       	ldi	r27, 0xFF	; 255
   19ec2:	9b 07       	cpc	r25, r27
   19ec4:	09 f4       	brne	.+2      	; 0x19ec8 <lif_dir+0x120>
   19ec6:	a4 c0       	rjmp	.+328    	; 0x1a010 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19ec8:	ec a1       	ldd	r30, Y+36	; 0x24
   19eca:	fd a1       	ldd	r31, Y+37	; 0x25
   19ecc:	40 81       	ld	r20, Z
   19ece:	51 81       	ldd	r21, Z+1	; 0x01
   19ed0:	62 81       	ldd	r22, Z+2	; 0x02
   19ed2:	73 81       	ldd	r23, Z+3	; 0x03
   19ed4:	00 27       	eor	r16, r16
   19ed6:	14 2f       	mov	r17, r20
   19ed8:	25 2f       	mov	r18, r21
   19eda:	36 2f       	mov	r19, r22
   19edc:	08 8f       	std	Y+24, r16	; 0x18
   19ede:	19 8f       	std	Y+25, r17	; 0x19
   19ee0:	2a 8f       	std	Y+26, r18	; 0x1a
   19ee2:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19ee4:	8c 7f       	andi	r24, 0xFC	; 252
   19ee6:	80 31       	cpi	r24, 0x10	; 16
   19ee8:	90 4e       	sbci	r25, 0xE0	; 224
   19eea:	09 f0       	breq	.+2      	; 0x19eee <lif_dir+0x146>
   19eec:	4b c0       	rjmp	.+150    	; 0x19f84 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19eee:	ae a1       	ldd	r26, Y+38	; 0x26
   19ef0:	bf a1       	ldd	r27, Y+39	; 0x27
   19ef2:	8d 91       	ld	r24, X+
   19ef4:	9c 91       	ld	r25, X
   19ef6:	00 97       	sbiw	r24, 0x00	; 0
   19ef8:	b9 f0       	breq	.+46     	; 0x19f28 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19efa:	4c 01       	movw	r8, r24
   19efc:	a1 2c       	mov	r10, r1
   19efe:	b1 2c       	mov	r11, r1
   19f00:	33 27       	eor	r19, r19
   19f02:	2b 2d       	mov	r18, r11
   19f04:	1a 2d       	mov	r17, r10
   19f06:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19f08:	88 23       	and	r24, r24
   19f0a:	21 f0       	breq	.+8      	; 0x19f14 <lif_dir+0x16c>
        ++sectors;
   19f0c:	0f 5f       	subi	r16, 0xFF	; 255
   19f0e:	1f 4f       	sbci	r17, 0xFF	; 255
   19f10:	2f 4f       	sbci	r18, 0xFF	; 255
   19f12:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19f14:	40 17       	cp	r20, r16
   19f16:	51 07       	cpc	r21, r17
   19f18:	62 07       	cpc	r22, r18
   19f1a:	73 07       	cpc	r23, r19
   19f1c:	29 f4       	brne	.+10     	; 0x19f28 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19f1e:	88 8e       	std	Y+24, r8	; 0x18
   19f20:	99 8e       	std	Y+25, r9	; 0x19
   19f22:	aa 8e       	std	Y+26, r10	; 0x1a
   19f24:	bb 8e       	std	Y+27, r11	; 0x1b
   19f26:	2e c0       	rjmp	.+92     	; 0x19f84 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19f28:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19f2c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19f30:	32 ff       	sbrs	r19, 2
   19f32:	24 c0       	rjmp	.+72     	; 0x19f7c <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f34:	4c 01       	movw	r8, r24
   19f36:	a1 2c       	mov	r10, r1
   19f38:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19f3a:	33 27       	eor	r19, r19
   19f3c:	2b 2d       	mov	r18, r11
   19f3e:	1a 2d       	mov	r17, r10
   19f40:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19f42:	88 23       	and	r24, r24
   19f44:	21 f0       	breq	.+8      	; 0x19f4e <lif_dir+0x1a6>
        ++sectors;
   19f46:	0f 5f       	subi	r16, 0xFF	; 255
   19f48:	1f 4f       	sbci	r17, 0xFF	; 255
   19f4a:	2f 4f       	sbci	r18, 0xFF	; 255
   19f4c:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f4e:	ed b7       	in	r30, 0x3d	; 61
   19f50:	fe b7       	in	r31, 0x3e	; 62
   19f52:	46 87       	std	Z+14, r20	; 0x0e
   19f54:	57 87       	std	Z+15, r21	; 0x0f
   19f56:	60 8b       	std	Z+16, r22	; 0x10
   19f58:	71 8b       	std	Z+17, r23	; 0x11
   19f5a:	02 87       	std	Z+10, r16	; 0x0a
   19f5c:	13 87       	std	Z+11, r17	; 0x0b
   19f5e:	24 87       	std	Z+12, r18	; 0x0c
   19f60:	35 87       	std	Z+13, r19	; 0x0d
   19f62:	86 82       	std	Z+6, r8	; 0x06
   19f64:	97 82       	std	Z+7, r9	; 0x07
   19f66:	a0 86       	std	Z+8, r10	; 0x08
   19f68:	b1 86       	std	Z+9, r11	; 0x09
   19f6a:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f6c:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f6e:	15 83       	std	Z+5, r17	; 0x05
   19f70:	04 83       	std	Z+4, r16	; 0x04
   19f72:	c1 82       	std	Z+1, r12	; 0x01
   19f74:	d2 82       	std	Z+2, r13	; 0x02
   19f76:	e3 82       	std	Z+3, r14	; 0x03
   19f78:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19f7c:	01 e2       	ldi	r16, 0x21	; 33
   19f7e:	10 e0       	ldi	r17, 0x00	; 0
   19f80:	1f 8b       	std	Y+23, r17	; 0x17
   19f82:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19f84:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19f86:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19f88:	8d 90       	ld	r8, X+
   19f8a:	9c 90       	ld	r9, X
   19f8c:	81 14       	cp	r8, r1
   19f8e:	91 04       	cpc	r9, r1
   19f90:	19 f0       	breq	.+6      	; 0x19f98 <lif_dir+0x1f0>
   19f92:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f94:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f96:	02 c0       	rjmp	.+4      	; 0x19f9c <lif_dir+0x1f4>
   19f98:	0b e3       	ldi	r16, 0x3B	; 59
   19f9a:	16 e1       	ldi	r17, 0x16	; 22
   19f9c:	a8 a5       	ldd	r26, Y+40	; 0x28
   19f9e:	b9 a5       	ldd	r27, Y+41	; 0x29
   19fa0:	8d 91       	ld	r24, X+
   19fa2:	9d 91       	ld	r25, X+
   19fa4:	0d 90       	ld	r0, X+
   19fa6:	bc 91       	ld	r27, X
   19fa8:	a0 2d       	mov	r26, r0
   19faa:	88 a3       	std	Y+32, r24	; 0x20
   19fac:	99 a3       	std	Y+33, r25	; 0x21
   19fae:	aa a3       	std	Y+34, r26	; 0x22
   19fb0:	bb a3       	std	Y+35, r27	; 0x23
   19fb2:	ea a5       	ldd	r30, Y+42	; 0x2a
   19fb4:	fb a5       	ldd	r31, Y+43	; 0x2b
   19fb6:	a0 80       	ld	r10, Z
   19fb8:	b1 80       	ldd	r11, Z+1	; 0x01
   19fba:	8c a5       	ldd	r24, Y+44	; 0x2c
   19fbc:	9d a5       	ldd	r25, Y+45	; 0x2d
   19fbe:	0e 94 99 c2 	call	0x18532	; 0x18532 <lif_lifbcd2timestr>
   19fc2:	ed b7       	in	r30, 0x3d	; 61
   19fc4:	fe b7       	in	r31, 0x3e	; 62
   19fc6:	95 8b       	std	Z+21, r25	; 0x15
   19fc8:	84 8b       	std	Z+20, r24	; 0x14
   19fca:	b3 8a       	std	Z+19, r11	; 0x13
   19fcc:	a2 8a       	std	Z+18, r10	; 0x12
   19fce:	2e 89       	ldd	r18, Y+22	; 0x16
   19fd0:	3f 89       	ldd	r19, Y+23	; 0x17
   19fd2:	31 8b       	std	Z+17, r19	; 0x11
   19fd4:	20 8b       	std	Z+16, r18	; 0x10
   19fd6:	88 8d       	ldd	r24, Y+24	; 0x18
   19fd8:	99 8d       	ldd	r25, Y+25	; 0x19
   19fda:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19fdc:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19fde:	84 87       	std	Z+12, r24	; 0x0c
   19fe0:	95 87       	std	Z+13, r25	; 0x0d
   19fe2:	a6 87       	std	Z+14, r26	; 0x0e
   19fe4:	b7 87       	std	Z+15, r27	; 0x0f
   19fe6:	88 a1       	ldd	r24, Y+32	; 0x20
   19fe8:	99 a1       	ldd	r25, Y+33	; 0x21
   19fea:	aa a1       	ldd	r26, Y+34	; 0x22
   19fec:	bb a1       	ldd	r27, Y+35	; 0x23
   19fee:	80 87       	std	Z+8, r24	; 0x08
   19ff0:	91 87       	std	Z+9, r25	; 0x09
   19ff2:	a2 87       	std	Z+10, r26	; 0x0a
   19ff4:	b3 87       	std	Z+11, r27	; 0x0b
   19ff6:	97 82       	std	Z+7, r9	; 0x07
   19ff8:	86 82       	std	Z+6, r8	; 0x06
   19ffa:	15 83       	std	Z+5, r17	; 0x05
   19ffc:	04 83       	std	Z+4, r16	; 0x04
   19ffe:	41 82       	std	Z+1, r4	; 0x01
   1a000:	52 82       	std	Z+2, r5	; 0x02
   1a002:	63 82       	std	Z+3, r6	; 0x03
   1a004:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a008:	ff ef       	ldi	r31, 0xFF	; 255
   1a00a:	2f 1a       	sub	r2, r31
   1a00c:	3f 0a       	sbc	r3, r31
    }
   1a00e:	4c cf       	rjmp	.-360    	; 0x19ea8 <lif_dir+0x100>

    printf("\n");
   1a010:	89 ee       	ldi	r24, 0xE9	; 233
   1a012:	94 e3       	ldi	r25, 0x34	; 52
   1a014:	a0 e0       	ldi	r26, 0x00	; 0
   1a016:	ed b7       	in	r30, 0x3d	; 61
   1a018:	fe b7       	in	r31, 0x3e	; 62
   1a01a:	81 83       	std	Z+1, r24	; 0x01
   1a01c:	92 83       	std	Z+2, r25	; 0x02
   1a01e:	a3 83       	std	Z+3, r26	; 0x03
   1a020:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a024:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a026:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a028:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a02a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a02c:	09 2e       	mov	r0, r25
   1a02e:	00 0c       	add	r0, r0
   1a030:	aa 0b       	sbc	r26, r26
   1a032:	bb 0b       	sbc	r27, r27
   1a034:	ed b7       	in	r30, 0x3d	; 61
   1a036:	fe b7       	in	r31, 0x3e	; 62
   1a038:	84 83       	std	Z+4, r24	; 0x04
   1a03a:	95 83       	std	Z+5, r25	; 0x05
   1a03c:	a6 83       	std	Z+6, r26	; 0x06
   1a03e:	b7 83       	std	Z+7, r27	; 0x07
   1a040:	8d ed       	ldi	r24, 0xDD	; 221
   1a042:	94 e3       	ldi	r25, 0x34	; 52
   1a044:	a0 e0       	ldi	r26, 0x00	; 0
   1a046:	81 83       	std	Z+1, r24	; 0x01
   1a048:	92 83       	std	Z+2, r25	; 0x02
   1a04a:	a3 83       	std	Z+3, r26	; 0x03
   1a04c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a050:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a052:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a054:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a056:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a058:	09 2e       	mov	r0, r25
   1a05a:	00 0c       	add	r0, r0
   1a05c:	aa 0b       	sbc	r26, r26
   1a05e:	bb 0b       	sbc	r27, r27
   1a060:	ed b7       	in	r30, 0x3d	; 61
   1a062:	fe b7       	in	r31, 0x3e	; 62
   1a064:	84 83       	std	Z+4, r24	; 0x04
   1a066:	95 83       	std	Z+5, r25	; 0x05
   1a068:	a6 83       	std	Z+6, r26	; 0x06
   1a06a:	b7 83       	std	Z+7, r27	; 0x07
   1a06c:	80 ed       	ldi	r24, 0xD0	; 208
   1a06e:	94 e3       	ldi	r25, 0x34	; 52
   1a070:	a0 e0       	ldi	r26, 0x00	; 0
   1a072:	81 83       	std	Z+1, r24	; 0x01
   1a074:	92 83       	std	Z+2, r25	; 0x02
   1a076:	a3 83       	std	Z+3, r26	; 0x03
   1a078:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a07c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a07e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a080:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a082:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a084:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a086:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a088:	ed b7       	in	r30, 0x3d	; 61
   1a08a:	fe b7       	in	r31, 0x3e	; 62
   1a08c:	84 83       	std	Z+4, r24	; 0x04
   1a08e:	95 83       	std	Z+5, r25	; 0x05
   1a090:	a6 83       	std	Z+6, r26	; 0x06
   1a092:	b7 83       	std	Z+7, r27	; 0x07
   1a094:	8f eb       	ldi	r24, 0xBF	; 191
   1a096:	94 e3       	ldi	r25, 0x34	; 52
   1a098:	a0 e0       	ldi	r26, 0x00	; 0
   1a09a:	81 83       	std	Z+1, r24	; 0x01
   1a09c:	92 83       	std	Z+2, r25	; 0x02
   1a09e:	a3 83       	std	Z+3, r26	; 0x03
   1a0a0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a0a4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0a6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0a8:	85 a9       	ldd	r24, Z+53	; 0x35
   1a0aa:	96 a9       	ldd	r25, Z+54	; 0x36
   1a0ac:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a0ae:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a0b0:	ed b7       	in	r30, 0x3d	; 61
   1a0b2:	fe b7       	in	r31, 0x3e	; 62
   1a0b4:	84 83       	std	Z+4, r24	; 0x04
   1a0b6:	95 83       	std	Z+5, r25	; 0x05
   1a0b8:	a6 83       	std	Z+6, r26	; 0x06
   1a0ba:	b7 83       	std	Z+7, r27	; 0x07
   1a0bc:	8c ea       	ldi	r24, 0xAC	; 172
   1a0be:	94 e3       	ldi	r25, 0x34	; 52
   1a0c0:	a0 e0       	ldi	r26, 0x00	; 0
   1a0c2:	81 83       	std	Z+1, r24	; 0x01
   1a0c4:	92 83       	std	Z+2, r25	; 0x02
   1a0c6:	a3 83       	std	Z+3, r26	; 0x03
   1a0c8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a0cc:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0ce:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0d0:	84 89       	ldd	r24, Z+20	; 0x14
   1a0d2:	95 89       	ldd	r25, Z+21	; 0x15
   1a0d4:	a6 89       	ldd	r26, Z+22	; 0x16
   1a0d6:	b7 89       	ldd	r27, Z+23	; 0x17
   1a0d8:	ed b7       	in	r30, 0x3d	; 61
   1a0da:	fe b7       	in	r31, 0x3e	; 62
   1a0dc:	84 83       	std	Z+4, r24	; 0x04
   1a0de:	95 83       	std	Z+5, r25	; 0x05
   1a0e0:	a6 83       	std	Z+6, r26	; 0x06
   1a0e2:	b7 83       	std	Z+7, r27	; 0x07
   1a0e4:	89 e9       	ldi	r24, 0x99	; 153
   1a0e6:	94 e3       	ldi	r25, 0x34	; 52
   1a0e8:	a0 e0       	ldi	r26, 0x00	; 0
   1a0ea:	81 83       	std	Z+1, r24	; 0x01
   1a0ec:	92 83       	std	Z+2, r25	; 0x02
   1a0ee:	a3 83       	std	Z+3, r26	; 0x03
   1a0f0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a0f4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0f6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0f8:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0fa:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0fc:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0fe:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a100:	ed b7       	in	r30, 0x3d	; 61
   1a102:	fe b7       	in	r31, 0x3e	; 62
   1a104:	84 83       	std	Z+4, r24	; 0x04
   1a106:	95 83       	std	Z+5, r25	; 0x05
   1a108:	a6 83       	std	Z+6, r26	; 0x06
   1a10a:	b7 83       	std	Z+7, r27	; 0x07
   1a10c:	86 e8       	ldi	r24, 0x86	; 134
   1a10e:	94 e3       	ldi	r25, 0x34	; 52
   1a110:	a0 e0       	ldi	r26, 0x00	; 0
   1a112:	81 83       	std	Z+1, r24	; 0x01
   1a114:	92 83       	std	Z+2, r25	; 0x02
   1a116:	a3 83       	std	Z+3, r26	; 0x03
   1a118:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a11c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a11e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a120:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a124:	af 96       	adiw	r28, 0x2f	; 47
   1a126:	0f b6       	in	r0, 0x3f	; 63
   1a128:	f8 94       	cli
   1a12a:	de bf       	out	0x3e, r29	; 62
   1a12c:	0f be       	out	0x3f, r0	; 63
   1a12e:	cd bf       	out	0x3d, r28	; 61
   1a130:	df 91       	pop	r29
   1a132:	cf 91       	pop	r28
   1a134:	1f 91       	pop	r17
   1a136:	0f 91       	pop	r16
   1a138:	ef 90       	pop	r14
   1a13a:	df 90       	pop	r13
   1a13c:	cf 90       	pop	r12
   1a13e:	bf 90       	pop	r11
   1a140:	af 90       	pop	r10
   1a142:	9f 90       	pop	r9
   1a144:	8f 90       	pop	r8
   1a146:	6f 90       	pop	r6
   1a148:	5f 90       	pop	r5
   1a14a:	4f 90       	pop	r4
   1a14c:	3f 90       	pop	r3
   1a14e:	2f 90       	pop	r2
   1a150:	08 95       	ret

0001a152 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a152:	a5 e0       	ldi	r26, 0x05	; 5
   1a154:	b0 e0       	ldi	r27, 0x00	; 0
   1a156:	ef ea       	ldi	r30, 0xAF	; 175
   1a158:	f0 ed       	ldi	r31, 0xD0	; 208
   1a15a:	0c 94 99 e0 	jmp	0x1c132	; 0x1c132 <__prologue_saves__+0x10>
   1a15e:	7c 01       	movw	r14, r24
   1a160:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a162:	cb 01       	movw	r24, r22
   1a164:	0e 94 8a bf 	call	0x17f14	; 0x17f14 <lif_checkname>
   1a168:	89 2b       	or	r24, r25
   1a16a:	59 f4       	brne	.+22     	; 0x1a182 <lif_find_file+0x30>
    {
        if(debuglevel & GPIB_PPR)
   1a16c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a170:	81 ff       	sbrs	r24, 1
   1a172:	46 c0       	rjmp	.+140    	; 0x1a200 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a174:	ed b7       	in	r30, 0x3d	; 61
   1a176:	fe b7       	in	r31, 0x3e	; 62
   1a178:	d5 83       	std	Z+5, r29	; 0x05
   1a17a:	c4 83       	std	Z+4, r28	; 0x04
   1a17c:	8f e5       	ldi	r24, 0x5F	; 95
   1a17e:	94 e3       	ldi	r25, 0x34	; 52
   1a180:	13 c0       	rjmp	.+38     	; 0x1a1a8 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a182:	fe 01       	movw	r30, r28
   1a184:	01 90       	ld	r0, Z+
   1a186:	00 20       	and	r0, r0
   1a188:	e9 f7       	brne	.-6      	; 0x1a184 <lif_find_file+0x32>
   1a18a:	31 97       	sbiw	r30, 0x01	; 1
   1a18c:	ec 1b       	sub	r30, r28
   1a18e:	fd 0b       	sbc	r31, r29
   1a190:	3b 97       	sbiw	r30, 0x0b	; 11
   1a192:	88 f0       	brcs	.+34     	; 0x1a1b6 <lif_find_file+0x64>
    {
        if(debuglevel & GPIB_PPR)
   1a194:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a198:	81 ff       	sbrs	r24, 1
   1a19a:	32 c0       	rjmp	.+100    	; 0x1a200 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a19c:	ed b7       	in	r30, 0x3d	; 61
   1a19e:	fe b7       	in	r31, 0x3e	; 62
   1a1a0:	d5 83       	std	Z+5, r29	; 0x05
   1a1a2:	c4 83       	std	Z+4, r28	; 0x04
   1a1a4:	8a e3       	ldi	r24, 0x3A	; 58
   1a1a6:	94 e3       	ldi	r25, 0x34	; 52
   1a1a8:	a0 e0       	ldi	r26, 0x00	; 0
   1a1aa:	81 83       	std	Z+1, r24	; 0x01
   1a1ac:	92 83       	std	Z+2, r25	; 0x02
   1a1ae:	a3 83       	std	Z+3, r26	; 0x03
   1a1b0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1a1b4:	25 c0       	rjmp	.+74     	; 0x1a200 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a1b6:	e1 14       	cp	r14, r1
   1a1b8:	f1 04       	cpc	r15, r1
   1a1ba:	11 f1       	breq	.+68     	; 0x1a200 <lif_find_file+0xae>
   1a1bc:	00 e0       	ldi	r16, 0x00	; 0
   1a1be:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a1c0:	67 01       	movw	r12, r14
   1a1c2:	fa e5       	ldi	r31, 0x5A	; 90
   1a1c4:	cf 0e       	add	r12, r31
   1a1c6:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1c8:	57 01       	movw	r10, r14
   1a1ca:	2f e4       	ldi	r18, 0x4F	; 79
   1a1cc:	a2 0e       	add	r10, r18
   1a1ce:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a1d0:	b8 01       	movw	r22, r16
   1a1d2:	c7 01       	movw	r24, r14
   1a1d4:	0e 94 ad c7 	call	0x18f5a	; 0x18f5a <lif_readdirindex>
   1a1d8:	89 2b       	or	r24, r25
   1a1da:	91 f0       	breq	.+36     	; 0x1a200 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a1dc:	f6 01       	movw	r30, r12
   1a1de:	80 81       	ld	r24, Z
   1a1e0:	91 81       	ldd	r25, Z+1	; 0x01
   1a1e2:	8f 3f       	cpi	r24, 0xFF	; 255
   1a1e4:	ff ef       	ldi	r31, 0xFF	; 255
   1a1e6:	9f 07       	cpc	r25, r31
   1a1e8:	59 f0       	breq	.+22     	; 0x1a200 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1ea:	89 2b       	or	r24, r25
   1a1ec:	31 f0       	breq	.+12     	; 0x1a1fa <lif_find_file+0xa8>
   1a1ee:	be 01       	movw	r22, r28
   1a1f0:	c5 01       	movw	r24, r10
   1a1f2:	0e 94 2b 31 	call	0x6256	; 0x6256 <strcasecmp>
   1a1f6:	89 2b       	or	r24, r25
   1a1f8:	31 f0       	breq	.+12     	; 0x1a206 <lif_find_file+0xb4>
            break;
        ++index;
   1a1fa:	0f 5f       	subi	r16, 0xFF	; 255
   1a1fc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a1fe:	e8 cf       	rjmp	.-48     	; 0x1a1d0 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a200:	8f ef       	ldi	r24, 0xFF	; 255
   1a202:	9f ef       	ldi	r25, 0xFF	; 255
   1a204:	01 c0       	rjmp	.+2      	; 0x1a208 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a206:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a208:	cd b7       	in	r28, 0x3d	; 61
   1a20a:	de b7       	in	r29, 0x3e	; 62
   1a20c:	25 96       	adiw	r28, 0x05	; 5
   1a20e:	ea e0       	ldi	r30, 0x0A	; 10
   1a210:	0c 94 b5 e0 	jmp	0x1c16a	; 0x1c16a <__epilogue_restores__+0x10>

0001a214 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a214:	a5 e0       	ldi	r26, 0x05	; 5
   1a216:	b0 e0       	ldi	r27, 0x00	; 0
   1a218:	e0 e1       	ldi	r30, 0x10	; 16
   1a21a:	f1 ed       	ldi	r31, 0xD1	; 209
   1a21c:	0c 94 9b e0 	jmp	0x1c136	; 0x1c136 <__prologue_saves__+0x14>
   1a220:	6b 01       	movw	r12, r22
   1a222:	7c 01       	movw	r14, r24
   1a224:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a226:	20 e0       	ldi	r18, 0x00	; 0
   1a228:	31 e0       	ldi	r19, 0x01	; 1
   1a22a:	40 e0       	ldi	r20, 0x00	; 0
   1a22c:	50 e0       	ldi	r21, 0x00	; 0
   1a22e:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
    if(!pos)
   1a232:	61 15       	cp	r22, r1
   1a234:	71 05       	cpc	r23, r1
   1a236:	d1 f1       	breq	.+116    	; 0x1a2ac <lif_e010_pad_sector+0x98>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a238:	c0 e0       	ldi	r28, 0x00	; 0
   1a23a:	d1 e0       	ldi	r29, 0x01	; 1
   1a23c:	c6 1b       	sub	r28, r22
   1a23e:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a240:	f8 01       	movw	r30, r16
   1a242:	8f ee       	ldi	r24, 0xEF	; 239
   1a244:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a246:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a248:	cf 01       	movw	r24, r30
   1a24a:	80 1b       	sub	r24, r16
   1a24c:	91 0b       	sbc	r25, r17
   1a24e:	8c 17       	cp	r24, r28
   1a250:	9d 07       	cpc	r25, r29
   1a252:	14 f4       	brge	.+4      	; 0x1a258 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a254:	21 93       	st	Z+, r18
   1a256:	f8 cf       	rjmp	.-16     	; 0x1a248 <lif_e010_pad_sector+0x34>
   1a258:	1c 16       	cp	r1, r28
   1a25a:	1d 06       	cpc	r1, r29
   1a25c:	14 f0       	brlt	.+4      	; 0x1a262 <lif_e010_pad_sector+0x4e>
   1a25e:	c1 e0       	ldi	r28, 0x01	; 1
   1a260:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a262:	ce 01       	movw	r24, r28
   1a264:	0d 2e       	mov	r0, r29
   1a266:	00 0c       	add	r0, r0
   1a268:	aa 0b       	sbc	r26, r26
   1a26a:	bb 0b       	sbc	r27, r27
   1a26c:	bc 01       	movw	r22, r24
   1a26e:	cd 01       	movw	r24, r26
   1a270:	6c 0d       	add	r22, r12
   1a272:	7d 1d       	adc	r23, r13
   1a274:	8e 1d       	adc	r24, r14
   1a276:	9f 1d       	adc	r25, r15
   1a278:	20 e0       	ldi	r18, 0x00	; 0
   1a27a:	31 e0       	ldi	r19, 0x01	; 1
   1a27c:	40 e0       	ldi	r20, 0x00	; 0
   1a27e:	50 e0       	ldi	r21, 0x00	; 0
   1a280:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a284:	61 15       	cp	r22, r1
   1a286:	71 05       	cpc	r23, r1
   1a288:	a1 f0       	breq	.+40     	; 0x1a2b2 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & GPIB_PPR)
   1a28a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a28e:	21 ff       	sbrs	r18, 1
   1a290:	12 c0       	rjmp	.+36     	; 0x1a2b6 <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a292:	ed b7       	in	r30, 0x3d	; 61
   1a294:	fe b7       	in	r31, 0x3e	; 62
   1a296:	75 83       	std	Z+5, r23	; 0x05
   1a298:	64 83       	std	Z+4, r22	; 0x04
   1a29a:	81 e0       	ldi	r24, 0x01	; 1
   1a29c:	94 e3       	ldi	r25, 0x34	; 52
   1a29e:	a0 e0       	ldi	r26, 0x00	; 0
   1a2a0:	81 83       	std	Z+1, r24	; 0x01
   1a2a2:	92 83       	std	Z+2, r25	; 0x02
   1a2a4:	a3 83       	std	Z+3, r26	; 0x03
   1a2a6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1a2aa:	05 c0       	rjmp	.+10     	; 0x1a2b6 <lif_e010_pad_sector+0xa2>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a2ac:	80 e0       	ldi	r24, 0x00	; 0
   1a2ae:	90 e0       	ldi	r25, 0x00	; 0
   1a2b0:	04 c0       	rjmp	.+8      	; 0x1a2ba <lif_e010_pad_sector+0xa6>
   1a2b2:	ce 01       	movw	r24, r28
   1a2b4:	02 c0       	rjmp	.+4      	; 0x1a2ba <lif_e010_pad_sector+0xa6>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a2b6:	8f ef       	ldi	r24, 0xFF	; 255
   1a2b8:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a2ba:	cd b7       	in	r28, 0x3d	; 61
   1a2bc:	de b7       	in	r29, 0x3e	; 62
   1a2be:	25 96       	adiw	r28, 0x05	; 5
   1a2c0:	e8 e0       	ldi	r30, 0x08	; 8
   1a2c2:	0c 94 b7 e0 	jmp	0x1c16e	; 0x1c16e <__epilogue_restores__+0x14>

0001a2c6 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a2c6:	a5 e0       	ldi	r26, 0x05	; 5
   1a2c8:	b0 e0       	ldi	r27, 0x00	; 0
   1a2ca:	e9 e6       	ldi	r30, 0x69	; 105
   1a2cc:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2ce:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   1a2d2:	ec 01       	movw	r28, r24
   1a2d4:	4a 01       	movw	r8, r20
   1a2d6:	5b 01       	movw	r10, r22
   1a2d8:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a2da:	fc 01       	movw	r30, r24
   1a2dc:	01 90       	ld	r0, Z+
   1a2de:	00 20       	and	r0, r0
   1a2e0:	e9 f7       	brne	.-6      	; 0x1a2dc <lif_ascii_string_to_e010+0x16>
   1a2e2:	31 97       	sbiw	r30, 0x01	; 1
   1a2e4:	6f 01       	movw	r12, r30
   1a2e6:	c8 1a       	sub	r12, r24
   1a2e8:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a2ea:	41 2c       	mov	r4, r1
   1a2ec:	51 2c       	mov	r5, r1
   1a2ee:	32 01       	movw	r6, r4
   1a2f0:	53 94       	inc	r5
   1a2f2:	cb 01       	movw	r24, r22
   1a2f4:	ba 01       	movw	r22, r20
   1a2f6:	a3 01       	movw	r20, r6
   1a2f8:	92 01       	movw	r18, r4
   1a2fa:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
   1a2fe:	21 2c       	mov	r2, r1
   1a300:	33 24       	eor	r3, r3
   1a302:	33 94       	inc	r3
   1a304:	c1 01       	movw	r24, r2
   1a306:	86 1b       	sub	r24, r22
   1a308:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a30a:	86 30       	cpi	r24, 0x06	; 6
   1a30c:	91 05       	cpc	r25, r1
   1a30e:	20 f0       	brcs	.+8      	; 0x1a318 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a310:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a312:	00 e0       	ldi	r16, 0x00	; 0
   1a314:	10 e0       	ldi	r17, 0x00	; 0
   1a316:	17 c0       	rjmp	.+46     	; 0x1a346 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a318:	a7 01       	movw	r20, r14
   1a31a:	c5 01       	movw	r24, r10
   1a31c:	b4 01       	movw	r22, r8
   1a31e:	7a df       	rcall	.-268    	; 0x1a214 <lif_e010_pad_sector>
   1a320:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a322:	97 fd       	sbrc	r25, 7
   1a324:	81 c0       	rjmp	.+258    	; 0x1a428 <lif_ascii_string_to_e010+0x162>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a326:	09 2e       	mov	r0, r25
   1a328:	00 0c       	add	r0, r0
   1a32a:	aa 0b       	sbc	r26, r26
   1a32c:	bb 0b       	sbc	r27, r27
   1a32e:	bc 01       	movw	r22, r24
   1a330:	cd 01       	movw	r24, r26
   1a332:	68 0d       	add	r22, r8
   1a334:	79 1d       	adc	r23, r9
   1a336:	8a 1d       	adc	r24, r10
   1a338:	9b 1d       	adc	r25, r11
   1a33a:	a3 01       	movw	r20, r6
   1a33c:	92 01       	movw	r18, r4
   1a33e:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
   1a342:	26 1a       	sub	r2, r22
   1a344:	37 0a       	sbc	r3, r23
   1a346:	f7 01       	movw	r30, r14
   1a348:	e0 0f       	add	r30, r16
   1a34a:	f1 1f       	adc	r31, r17
   1a34c:	0d 5f       	subi	r16, 0xFD	; 253
   1a34e:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a350:	c6 01       	movw	r24, r12
   1a352:	02 96       	adiw	r24, 0x02	; 2
   1a354:	82 15       	cp	r24, r2
   1a356:	93 05       	cpc	r25, r3
   1a358:	84 f4       	brge	.+32     	; 0x1a37a <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a35a:	8f ed       	ldi	r24, 0xDF	; 223
   1a35c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a35e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a360:	d2 82       	std	Z+2, r13	; 0x02
   1a362:	f7 01       	movw	r30, r14
   1a364:	e0 0f       	add	r30, r16
   1a366:	f1 1f       	adc	r31, r17
   1a368:	cf 01       	movw	r24, r30
   1a36a:	8e 19       	sub	r24, r14
   1a36c:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a36e:	29 91       	ld	r18, Y+
   1a370:	22 23       	and	r18, r18
   1a372:	09 f4       	brne	.+2      	; 0x1a376 <lif_ascii_string_to_e010+0xb0>
   1a374:	59 c0       	rjmp	.+178    	; 0x1a428 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a376:	21 93       	st	Z+, r18
   1a378:	f7 cf       	rjmp	.-18     	; 0x1a368 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a37a:	8f ec       	ldi	r24, 0xCF	; 207
   1a37c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a37e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a380:	d2 82       	std	Z+2, r13	; 0x02
   1a382:	d7 01       	movw	r26, r14
   1a384:	a0 0f       	add	r26, r16
   1a386:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a388:	fe 01       	movw	r30, r28
   1a38a:	81 91       	ld	r24, Z+
   1a38c:	81 11       	cpse	r24, r1
   1a38e:	0e c0       	rjmp	.+28     	; 0x1a3ac <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a390:	c8 01       	movw	r24, r16
   1a392:	01 2e       	mov	r0, r17
   1a394:	00 0c       	add	r0, r0
   1a396:	aa 0b       	sbc	r26, r26
   1a398:	bb 0b       	sbc	r27, r27
   1a39a:	bc 01       	movw	r22, r24
   1a39c:	cd 01       	movw	r24, r26
   1a39e:	68 0d       	add	r22, r8
   1a3a0:	79 1d       	adc	r23, r9
   1a3a2:	8a 1d       	adc	r24, r10
   1a3a4:	9b 1d       	adc	r25, r11
   1a3a6:	61 11       	cpse	r22, r1
   1a3a8:	09 c0       	rjmp	.+18     	; 0x1a3bc <lif_ascii_string_to_e010+0xf6>
   1a3aa:	1f c0       	rjmp	.+62     	; 0x1a3ea <lif_ascii_string_to_e010+0x124>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a3ac:	02 15       	cp	r16, r2
   1a3ae:	13 05       	cpc	r17, r3
   1a3b0:	7c f7       	brge	.-34     	; 0x1a390 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a3b2:	0f 5f       	subi	r16, 0xFF	; 255
   1a3b4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3b6:	8d 93       	st	X+, r24
   1a3b8:	ef 01       	movw	r28, r30
   1a3ba:	e6 cf       	rjmp	.-52     	; 0x1a388 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
   1a3bc:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a3c0:	21 ff       	sbrs	r18, 1
   1a3c2:	30 c0       	rjmp	.+96     	; 0x1a424 <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a3c4:	20 e0       	ldi	r18, 0x00	; 0
   1a3c6:	31 e0       	ldi	r19, 0x01	; 1
   1a3c8:	40 e0       	ldi	r20, 0x00	; 0
   1a3ca:	50 e0       	ldi	r21, 0x00	; 0
   1a3cc:	0e 94 46 e0 	call	0x1c08c	; 0x1c08c <__divmodsi4>
   1a3d0:	ed b7       	in	r30, 0x3d	; 61
   1a3d2:	fe b7       	in	r31, 0x3e	; 62
   1a3d4:	75 83       	std	Z+5, r23	; 0x05
   1a3d6:	64 83       	std	Z+4, r22	; 0x04
   1a3d8:	8d ed       	ldi	r24, 0xDD	; 221
   1a3da:	93 e3       	ldi	r25, 0x33	; 51
   1a3dc:	a0 e0       	ldi	r26, 0x00	; 0
   1a3de:	81 83       	std	Z+1, r24	; 0x01
   1a3e0:	92 83       	std	Z+2, r25	; 0x02
   1a3e2:	a3 83       	std	Z+3, r26	; 0x03
   1a3e4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1a3e8:	1d c0       	rjmp	.+58     	; 0x1a424 <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a3ea:	fe 01       	movw	r30, r28
   1a3ec:	01 90       	ld	r0, Z+
   1a3ee:	00 20       	and	r0, r0
   1a3f0:	e9 f7       	brne	.-6      	; 0x1a3ec <lif_ascii_string_to_e010+0x126>
   1a3f2:	31 97       	sbiw	r30, 0x01	; 1
   1a3f4:	9f 01       	movw	r18, r30
   1a3f6:	2c 1b       	sub	r18, r28
   1a3f8:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a3fa:	d7 01       	movw	r26, r14
   1a3fc:	a0 0f       	add	r26, r16
   1a3fe:	b1 1f       	adc	r27, r17
   1a400:	8f e6       	ldi	r24, 0x6F	; 111
   1a402:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a404:	fd 01       	movw	r30, r26
   1a406:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a408:	32 83       	std	Z+2, r19	; 0x02
   1a40a:	0d 5f       	subi	r16, 0xFD	; 253
   1a40c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a40e:	f7 01       	movw	r30, r14
   1a410:	e0 0f       	add	r30, r16
   1a412:	f1 1f       	adc	r31, r17
   1a414:	cf 01       	movw	r24, r30
   1a416:	8e 19       	sub	r24, r14
   1a418:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a41a:	29 91       	ld	r18, Y+
   1a41c:	22 23       	and	r18, r18
   1a41e:	21 f0       	breq	.+8      	; 0x1a428 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a420:	21 93       	st	Z+, r18
   1a422:	f8 cf       	rjmp	.-16     	; 0x1a414 <lif_ascii_string_to_e010+0x14e>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a424:	8f ef       	ldi	r24, 0xFF	; 255
   1a426:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a428:	cd b7       	in	r28, 0x3d	; 61
   1a42a:	de b7       	in	r29, 0x3e	; 62
   1a42c:	25 96       	adiw	r28, 0x05	; 5
   1a42e:	e2 e1       	ldi	r30, 0x12	; 18
   1a430:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0001a434 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a434:	ad e0       	ldi	r26, 0x0D	; 13
   1a436:	b3 e0       	ldi	r27, 0x03	; 3
   1a438:	e0 e2       	ldi	r30, 0x20	; 32
   1a43a:	f2 ed       	ldi	r31, 0xD2	; 210
   1a43c:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   1a440:	5c 01       	movw	r10, r24
   1a442:	2a 01       	movw	r4, r20
   1a444:	3b 01       	movw	r6, r22
   1a446:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a448:	60 ed       	ldi	r22, 0xD0	; 208
   1a44a:	78 e0       	ldi	r23, 0x08	; 8
   1a44c:	0e 94 ef bd 	call	0x17bde	; 0x17bde <lif_open>
   1a450:	c7 5f       	subi	r28, 0xF7	; 247
   1a452:	dc 4f       	sbci	r29, 0xFC	; 252
   1a454:	99 83       	std	Y+1, r25	; 0x01
   1a456:	88 83       	st	Y, r24
   1a458:	c9 50       	subi	r28, 0x09	; 9
   1a45a:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a45c:	89 2b       	or	r24, r25
   1a45e:	09 f4       	brne	.+2      	; 0x1a462 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a460:	63 c0       	rjmp	.+198    	; 0x1a528 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a462:	81 2c       	mov	r8, r1
   1a464:	91 2c       	mov	r9, r1
   1a466:	c1 2c       	mov	r12, r1
   1a468:	d1 2c       	mov	r13, r1
   1a46a:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a46c:	8f ec       	ldi	r24, 0xCF	; 207
   1a46e:	93 e3       	ldi	r25, 0x33	; 51
   1a470:	9c 01       	movw	r18, r24
   1a472:	40 e0       	ldi	r20, 0x00	; 0
   1a474:	c5 5f       	subi	r28, 0xF5	; 245
   1a476:	dc 4f       	sbci	r29, 0xFC	; 252
   1a478:	28 83       	st	Y, r18
   1a47a:	39 83       	std	Y+1, r19	; 0x01
   1a47c:	4a 83       	std	Y+2, r20	; 0x02
   1a47e:	cb 50       	subi	r28, 0x0B	; 11
   1a480:	d3 40       	sbci	r29, 0x03	; 3
   1a482:	14 c0       	rjmp	.+40     	; 0x1a4ac <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a484:	c1 01       	movw	r24, r2
   1a486:	03 2c       	mov	r0, r3
   1a488:	00 0c       	add	r0, r0
   1a48a:	aa 0b       	sbc	r26, r26
   1a48c:	bb 0b       	sbc	r27, r27
   1a48e:	48 0e       	add	r4, r24
   1a490:	59 1e       	adc	r5, r25
   1a492:	6a 1e       	adc	r6, r26
   1a494:	7b 1e       	adc	r7, r27
        bytes += size;
   1a496:	c8 0e       	add	r12, r24
   1a498:	d9 1e       	adc	r13, r25
   1a49a:	ea 1e       	adc	r14, r26
   1a49c:	fb 1e       	adc	r15, r27
        count += size;
   1a49e:	82 0c       	add	r8, r2
   1a4a0:	93 1c       	adc	r9, r3

        if(count > 256)
   1a4a2:	31 e0       	ldi	r19, 0x01	; 1
   1a4a4:	83 16       	cp	r8, r19
   1a4a6:	93 06       	cpc	r9, r19
   1a4a8:	0c f0       	brlt	.+2      	; 0x1a4ac <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a4aa:	43 c0       	rjmp	.+134    	; 0x1a532 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a4ac:	c7 5f       	subi	r28, 0xF7	; 247
   1a4ae:	dc 4f       	sbci	r29, 0xFC	; 252
   1a4b0:	48 81       	ld	r20, Y
   1a4b2:	59 81       	ldd	r21, Y+1	; 0x01
   1a4b4:	c9 50       	subi	r28, 0x09	; 9
   1a4b6:	d3 40       	sbci	r29, 0x03	; 3
   1a4b8:	6d ef       	ldi	r22, 0xFD	; 253
   1a4ba:	70 e0       	ldi	r23, 0x00	; 0
   1a4bc:	ce 01       	movw	r24, r28
   1a4be:	88 5f       	subi	r24, 0xF8	; 248
   1a4c0:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4c2:	0e 94 28 76 	call	0xec50	; 0xec50 <fgets>
   1a4c6:	89 2b       	or	r24, r25
   1a4c8:	09 f4       	brne	.+2      	; 0x1a4cc <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a4ca:	4b c0       	rjmp	.+150    	; 0x1a562 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a4cc:	ce 01       	movw	r24, r28
   1a4ce:	88 5f       	subi	r24, 0xF8	; 248
   1a4d0:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4d2:	0e 94 a2 31 	call	0x6344	; 0x6344 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a4d6:	64 e4       	ldi	r22, 0x44	; 68
   1a4d8:	76 e1       	ldi	r23, 0x16	; 22
   1a4da:	ce 01       	movw	r24, r28
   1a4dc:	88 5f       	subi	r24, 0xF8	; 248
   1a4de:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4e0:	0e 94 e5 30 	call	0x61ca	; 0x61ca <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a4e4:	9e 01       	movw	r18, r28
   1a4e6:	28 5f       	subi	r18, 0xF8	; 248
   1a4e8:	3f 4f       	sbci	r19, 0xFF	; 255
   1a4ea:	b3 01       	movw	r22, r6
   1a4ec:	a2 01       	movw	r20, r4
   1a4ee:	ce 01       	movw	r24, r28
   1a4f0:	88 5f       	subi	r24, 0xF8	; 248
   1a4f2:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4f4:	e8 de       	rcall	.-560    	; 0x1a2c6 <lif_ascii_string_to_e010>
   1a4f6:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a4f8:	a1 14       	cp	r10, r1
   1a4fa:	b1 04       	cpc	r11, r1
   1a4fc:	19 f2       	breq	.-122    	; 0x1a484 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a4fe:	8c 01       	movw	r16, r24
   1a500:	a3 01       	movw	r20, r6
   1a502:	92 01       	movw	r18, r4
   1a504:	be 01       	movw	r22, r28
   1a506:	68 5f       	subi	r22, 0xF8	; 248
   1a508:	7f 4f       	sbci	r23, 0xFF	; 255
   1a50a:	c5 01       	movw	r24, r10
   1a50c:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
            if(len < size)
   1a510:	82 15       	cp	r24, r2
   1a512:	93 05       	cpc	r25, r3
   1a514:	0c f0       	brlt	.+2      	; 0x1a518 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a516:	b6 cf       	rjmp	.-148    	; 0x1a484 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a518:	c7 5f       	subi	r28, 0xF7	; 247
   1a51a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a51c:	88 81       	ld	r24, Y
   1a51e:	99 81       	ldd	r25, Y+1	; 0x01
   1a520:	c9 50       	subi	r28, 0x09	; 9
   1a522:	d3 40       	sbci	r29, 0x03	; 3
   1a524:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
                return(-1);
   1a528:	6f ef       	ldi	r22, 0xFF	; 255
   1a52a:	7f ef       	ldi	r23, 0xFF	; 255
   1a52c:	8f ef       	ldi	r24, 0xFF	; 255
   1a52e:	9f ef       	ldi	r25, 0xFF	; 255
   1a530:	84 c0       	rjmp	.+264    	; 0x1a63a <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a532:	a1 14       	cp	r10, r1
   1a534:	b1 04       	cpc	r11, r1
   1a536:	91 f0       	breq	.+36     	; 0x1a55c <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a538:	ed b7       	in	r30, 0x3d	; 61
   1a53a:	fe b7       	in	r31, 0x3e	; 62
   1a53c:	c4 82       	std	Z+4, r12	; 0x04
   1a53e:	d5 82       	std	Z+5, r13	; 0x05
   1a540:	e6 82       	std	Z+6, r14	; 0x06
   1a542:	f7 82       	std	Z+7, r15	; 0x07
   1a544:	c5 5f       	subi	r28, 0xF5	; 245
   1a546:	dc 4f       	sbci	r29, 0xFC	; 252
   1a548:	28 81       	ld	r18, Y
   1a54a:	39 81       	ldd	r19, Y+1	; 0x01
   1a54c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a54e:	cb 50       	subi	r28, 0x0B	; 11
   1a550:	d3 40       	sbci	r29, 0x03	; 3
   1a552:	21 83       	std	Z+1, r18	; 0x01
   1a554:	32 83       	std	Z+2, r19	; 0x02
   1a556:	43 83       	std	Z+3, r20	; 0x03
   1a558:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a55c:	81 2c       	mov	r8, r1
   1a55e:	91 2c       	mov	r9, r1
   1a560:	a5 cf       	rjmp	.-182    	; 0x1a4ac <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a562:	c7 5f       	subi	r28, 0xF7	; 247
   1a564:	dc 4f       	sbci	r29, 0xFC	; 252
   1a566:	88 81       	ld	r24, Y
   1a568:	99 81       	ldd	r25, Y+1	; 0x01
   1a56a:	c9 50       	subi	r28, 0x09	; 9
   1a56c:	d3 40       	sbci	r29, 0x03	; 3
   1a56e:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>

// Write EOF
    str[0] = 0;
   1a572:	c8 5f       	subi	r28, 0xF8	; 248
   1a574:	dd 4f       	sbci	r29, 0xFD	; 253
   1a576:	18 82       	st	Y, r1
   1a578:	c8 50       	subi	r28, 0x08	; 8
   1a57a:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a57c:	9e 01       	movw	r18, r28
   1a57e:	28 5f       	subi	r18, 0xF8	; 248
   1a580:	3f 4f       	sbci	r19, 0xFF	; 255
   1a582:	b3 01       	movw	r22, r6
   1a584:	a2 01       	movw	r20, r4
   1a586:	ce 01       	movw	r24, r28
   1a588:	88 5f       	subi	r24, 0xF8	; 248
   1a58a:	9d 4f       	sbci	r25, 0xFD	; 253
   1a58c:	9c de       	rcall	.-712    	; 0x1a2c6 <lif_ascii_string_to_e010>
   1a58e:	4c 01       	movw	r8, r24

    if(LIF)
   1a590:	a1 14       	cp	r10, r1
   1a592:	b1 04       	cpc	r11, r1
   1a594:	d1 f4       	brne	.+52     	; 0x1a5ca <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a596:	c4 01       	movw	r24, r8
   1a598:	09 2c       	mov	r0, r9
   1a59a:	00 0c       	add	r0, r0
   1a59c:	aa 0b       	sbc	r26, r26
   1a59e:	bb 0b       	sbc	r27, r27
   1a5a0:	c8 0e       	add	r12, r24
   1a5a2:	d9 1e       	adc	r13, r25
   1a5a4:	ea 1e       	adc	r14, r26
   1a5a6:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a5a8:	12 01       	movw	r2, r4
   1a5aa:	23 01       	movw	r4, r6
   1a5ac:	28 0e       	add	r2, r24
   1a5ae:	39 1e       	adc	r3, r25
   1a5b0:	4a 1e       	adc	r4, r26
   1a5b2:	5b 1e       	adc	r5, r27
   1a5b4:	ae 01       	movw	r20, r28
   1a5b6:	48 5f       	subi	r20, 0xF8	; 248
   1a5b8:	5f 4f       	sbci	r21, 0xFF	; 255
   1a5ba:	c2 01       	movw	r24, r4
   1a5bc:	b1 01       	movw	r22, r2
   1a5be:	2a de       	rcall	.-940    	; 0x1a214 <lif_e010_pad_sector>
   1a5c0:	3c 01       	movw	r6, r24
    if(LIF)
   1a5c2:	a1 14       	cp	r10, r1
   1a5c4:	b1 04       	cpc	r11, r1
   1a5c6:	e1 f4       	brne	.+56     	; 0x1a600 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a5c8:	36 c0       	rjmp	.+108    	; 0x1a636 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a5ca:	ed b7       	in	r30, 0x3d	; 61
   1a5cc:	fe b7       	in	r31, 0x3e	; 62
   1a5ce:	c4 82       	std	Z+4, r12	; 0x04
   1a5d0:	d5 82       	std	Z+5, r13	; 0x05
   1a5d2:	e6 82       	std	Z+6, r14	; 0x06
   1a5d4:	f7 82       	std	Z+7, r15	; 0x07
   1a5d6:	81 ec       	ldi	r24, 0xC1	; 193
   1a5d8:	93 e3       	ldi	r25, 0x33	; 51
   1a5da:	a0 e0       	ldi	r26, 0x00	; 0
   1a5dc:	81 83       	std	Z+1, r24	; 0x01
   1a5de:	92 83       	std	Z+2, r25	; 0x02
   1a5e0:	a3 83       	std	Z+3, r26	; 0x03
   1a5e2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a5e6:	84 01       	movw	r16, r8
   1a5e8:	a3 01       	movw	r20, r6
   1a5ea:	92 01       	movw	r18, r4
   1a5ec:	be 01       	movw	r22, r28
   1a5ee:	68 5f       	subi	r22, 0xF8	; 248
   1a5f0:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5f2:	c5 01       	movw	r24, r10
   1a5f4:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
        if(len < size)
   1a5f8:	88 15       	cp	r24, r8
   1a5fa:	99 05       	cpc	r25, r9
   1a5fc:	64 f6       	brge	.-104    	; 0x1a596 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a5fe:	94 cf       	rjmp	.-216    	; 0x1a528 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a600:	8c 01       	movw	r16, r24
   1a602:	a2 01       	movw	r20, r4
   1a604:	91 01       	movw	r18, r2
   1a606:	be 01       	movw	r22, r28
   1a608:	68 5f       	subi	r22, 0xF8	; 248
   1a60a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a60c:	c5 01       	movw	r24, r10
   1a60e:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
        if(len < size)
   1a612:	86 15       	cp	r24, r6
   1a614:	97 05       	cpc	r25, r7
   1a616:	0c f4       	brge	.+2      	; 0x1a61a <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a618:	87 cf       	rjmp	.-242    	; 0x1a528 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a61a:	ed b7       	in	r30, 0x3d	; 61
   1a61c:	fe b7       	in	r31, 0x3e	; 62
   1a61e:	c4 82       	std	Z+4, r12	; 0x04
   1a620:	d5 82       	std	Z+5, r13	; 0x05
   1a622:	e6 82       	std	Z+6, r14	; 0x06
   1a624:	f7 82       	std	Z+7, r15	; 0x07
   1a626:	83 eb       	ldi	r24, 0xB3	; 179
   1a628:	93 e3       	ldi	r25, 0x33	; 51
   1a62a:	a0 e0       	ldi	r26, 0x00	; 0
   1a62c:	81 83       	std	Z+1, r24	; 0x01
   1a62e:	92 83       	std	Z+2, r25	; 0x02
   1a630:	a3 83       	std	Z+3, r26	; 0x03
   1a632:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    return(bytes);
   1a636:	b6 01       	movw	r22, r12
   1a638:	c7 01       	movw	r24, r14
}
   1a63a:	c3 5f       	subi	r28, 0xF3	; 243
   1a63c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a63e:	e2 e1       	ldi	r30, 0x12	; 18
   1a640:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0001a644 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a644:	ab e3       	ldi	r26, 0x3B	; 59
   1a646:	b0 e0       	ldi	r27, 0x00	; 0
   1a648:	e8 e2       	ldi	r30, 0x28	; 40
   1a64a:	f3 ed       	ldi	r31, 0xD3	; 211
   1a64c:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   1a650:	6c 01       	movw	r12, r24
   1a652:	1b 01       	movw	r2, r22
   1a654:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a656:	fc 01       	movw	r30, r24
   1a658:	80 81       	ld	r24, Z
   1a65a:	81 11       	cpse	r24, r1
   1a65c:	03 c0       	rjmp	.+6      	; 0x1a664 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a65e:	80 e8       	ldi	r24, 0x80	; 128
   1a660:	93 e3       	ldi	r25, 0x33	; 51
   1a662:	1a c0       	rjmp	.+52     	; 0x1a698 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a664:	fb 01       	movw	r30, r22
   1a666:	80 81       	ld	r24, Z
   1a668:	81 11       	cpse	r24, r1
   1a66a:	03 c0       	rjmp	.+6      	; 0x1a672 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a66c:	82 e5       	ldi	r24, 0x52	; 82
   1a66e:	93 e3       	ldi	r25, 0x33	; 51
   1a670:	13 c0       	rjmp	.+38     	; 0x1a698 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a672:	fa 01       	movw	r30, r20
   1a674:	80 81       	ld	r24, Z
   1a676:	81 11       	cpse	r24, r1
   1a678:	03 c0       	rjmp	.+6      	; 0x1a680 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a67a:	83 e2       	ldi	r24, 0x23	; 35
   1a67c:	93 e3       	ldi	r25, 0x33	; 51
   1a67e:	0c c0       	rjmp	.+24     	; 0x1a698 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a680:	be 01       	movw	r22, r28
   1a682:	66 5f       	subi	r22, 0xF6	; 246
   1a684:	7f 4f       	sbci	r23, 0xFF	; 255
   1a686:	ca 01       	movw	r24, r20
   1a688:	0e 94 19 be 	call	0x17c32	; 0x17c32 <lif_stat>
   1a68c:	9b af       	std	Y+59, r25	; 0x3b
   1a68e:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a690:	89 2b       	or	r24, r25
   1a692:	59 f4       	brne	.+22     	; 0x1a6aa <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a694:	83 ef       	ldi	r24, 0xF3	; 243
   1a696:	92 e3       	ldi	r25, 0x32	; 50
   1a698:	a0 e0       	ldi	r26, 0x00	; 0
   1a69a:	ed b7       	in	r30, 0x3d	; 61
   1a69c:	fe b7       	in	r31, 0x3e	; 62
   1a69e:	81 83       	std	Z+1, r24	; 0x01
   1a6a0:	92 83       	std	Z+2, r25	; 0x02
   1a6a2:	a3 83       	std	Z+3, r26	; 0x03
   1a6a4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1a6a8:	01 c1       	rjmp	.+514    	; 0x1a8ac <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a6aa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a6ae:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a6b2:	92 ff       	sbrs	r25, 2
   1a6b4:	10 c0       	rjmp	.+32     	; 0x1a6d6 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a6b6:	ed b7       	in	r30, 0x3d	; 61
   1a6b8:	fe b7       	in	r31, 0x3e	; 62
   1a6ba:	f1 86       	std	Z+9, r15	; 0x09
   1a6bc:	e0 86       	std	Z+8, r14	; 0x08
   1a6be:	37 82       	std	Z+7, r3	; 0x07
   1a6c0:	26 82       	std	Z+6, r2	; 0x06
   1a6c2:	d5 82       	std	Z+5, r13	; 0x05
   1a6c4:	c4 82       	std	Z+4, r12	; 0x04
   1a6c6:	84 ec       	ldi	r24, 0xC4	; 196
   1a6c8:	92 e3       	ldi	r25, 0x32	; 50
   1a6ca:	a0 e0       	ldi	r26, 0x00	; 0
   1a6cc:	81 83       	std	Z+1, r24	; 0x01
   1a6ce:	92 83       	std	Z+2, r25	; 0x02
   1a6d0:	a3 83       	std	Z+3, r26	; 0x03
   1a6d2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a6d6:	97 01       	movw	r18, r14
   1a6d8:	40 e0       	ldi	r20, 0x00	; 0
   1a6da:	50 e0       	ldi	r21, 0x00	; 0
   1a6dc:	ba 01       	movw	r22, r20
   1a6de:	80 e0       	ldi	r24, 0x00	; 0
   1a6e0:	90 e0       	ldi	r25, 0x00	; 0
   1a6e2:	a8 de       	rcall	.-688    	; 0x1a434 <lif_add_ascii_file_as_e010_wrapper>
   1a6e4:	4b 01       	movw	r8, r22
   1a6e6:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a6e8:	47 2e       	mov	r4, r23
   1a6ea:	58 2e       	mov	r5, r24
   1a6ec:	69 2e       	mov	r6, r25
   1a6ee:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a6f0:	66 23       	and	r22, r22
   1a6f2:	29 f0       	breq	.+10     	; 0x1a6fe <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a6f4:	ff ef       	ldi	r31, 0xFF	; 255
   1a6f6:	4f 1a       	sub	r4, r31
   1a6f8:	5f 0a       	sbc	r5, r31
   1a6fa:	6f 0a       	sbc	r6, r31
   1a6fc:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a6fe:	63 ed       	ldi	r22, 0xD3	; 211
   1a700:	78 e0       	ldi	r23, 0x08	; 8
   1a702:	c6 01       	movw	r24, r12
   1a704:	57 da       	rcall	.-2898   	; 0x19bb4 <lif_open_volume>
   1a706:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a708:	00 97       	sbiw	r24, 0x00	; 0
   1a70a:	09 f4       	brne	.+2      	; 0x1a70e <lif_add_ascii_file_as_e010+0xca>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a70c:	cf c0       	rjmp	.+414    	; 0x1a8ac <lif_add_ascii_file_as_e010+0x268>
   1a70e:	b3 01       	movw	r22, r6
   1a710:	a2 01       	movw	r20, r4
   1a712:	f0 d8       	rcall	.-3616   	; 0x198f4 <lif_newdir>
    if(index == -1)
   1a714:	3c 01       	movw	r6, r24
   1a716:	8f ef       	ldi	r24, 0xFF	; 255
   1a718:	68 16       	cp	r6, r24
   1a71a:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a71c:	79 f4       	brne	.+30     	; 0x1a73c <lif_add_ascii_file_as_e010+0xf8>
   1a71e:	ed b7       	in	r30, 0x3d	; 61
   1a720:	fe b7       	in	r31, 0x3e	; 62
   1a722:	f7 82       	std	Z+7, r15	; 0x07
   1a724:	e6 82       	std	Z+6, r14	; 0x06
   1a726:	d5 82       	std	Z+5, r13	; 0x05
   1a728:	c4 82       	std	Z+4, r12	; 0x04
   1a72a:	84 e9       	ldi	r24, 0x94	; 148
   1a72c:	92 e3       	ldi	r25, 0x32	; 50
   1a72e:	a0 e0       	ldi	r26, 0x00	; 0
   1a730:	81 83       	std	Z+1, r24	; 0x01
   1a732:	92 83       	std	Z+2, r25	; 0x02
   1a734:	a3 83       	std	Z+3, r26	; 0x03
   1a736:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a73a:	a0 c0       	rjmp	.+320    	; 0x1a87c <lif_add_ascii_file_as_e010+0x238>
   1a73c:	68 01       	movw	r12, r16
   1a73e:	ff e4       	ldi	r31, 0x4F	; 79
   1a740:	cf 0e       	add	r12, r31
   1a742:	d1 1c       	adc	r13, r1
   1a744:	4a e0       	ldi	r20, 0x0A	; 10
   1a746:	50 e0       	ldi	r21, 0x00	; 0
   1a748:	b1 01       	movw	r22, r2
   1a74a:	c6 01       	movw	r24, r12
   1a74c:	0e 94 c4 bf 	call	0x17f88	; 0x17f88 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a750:	80 e1       	ldi	r24, 0x10	; 16
   1a752:	90 ee       	ldi	r25, 0xE0	; 224
   1a754:	f8 01       	movw	r30, r16
   1a756:	e6 5a       	subi	r30, 0xA6	; 166
   1a758:	ff 4f       	sbci	r31, 0xFF	; 255
   1a75a:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a75c:	80 83       	st	Z, r24
   1a75e:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a760:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a762:	60 a5       	ldd	r22, Z+40	; 0x28
   1a764:	71 a5       	ldd	r23, Z+41	; 0x29
   1a766:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a768:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a76a:	a8 01       	movw	r20, r16
   1a76c:	4c 59       	subi	r20, 0x9C	; 156
   1a76e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a770:	0e 94 e9 c1 	call	0x183d2	; 0x183d2 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a774:	81 e0       	ldi	r24, 0x01	; 1
   1a776:	90 e8       	ldi	r25, 0x80	; 128
   1a778:	f8 01       	movw	r30, r16
   1a77a:	e6 59       	subi	r30, 0x96	; 150
   1a77c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a77e:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                   // 28
   1a780:	80 83       	st	Z, r24
   1a782:	32 96       	adiw	r30, 0x02	; 2
   1a784:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a786:	80 82       	st	Z, r8
   1a788:	80 e0       	ldi	r24, 0x00	; 0
   1a78a:	91 e0       	ldi	r25, 0x01	; 1
   1a78c:	32 96       	adiw	r30, 0x02	; 2
   1a78e:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a790:	80 83       	st	Z, r24
   1a792:	58 01       	movw	r10, r16
   1a794:	fc e5       	ldi	r31, 0x5C	; 92
   1a796:	af 0e       	add	r10, r31
   1a798:	b1 1c       	adc	r11, r1
   1a79a:	f5 01       	movw	r30, r10
   1a79c:	80 81       	ld	r24, Z
   1a79e:	91 81       	ldd	r25, Z+1	; 0x01
   1a7a0:	a2 81       	ldd	r26, Z+2	; 0x02
   1a7a2:	b3 81       	ldd	r27, Z+3	; 0x03
   1a7a4:	22 24       	eor	r2, r2
   1a7a6:	38 2e       	mov	r3, r24
   1a7a8:	49 2e       	mov	r4, r25

    if(debuglevel & LIF_DEBUG)
   1a7aa:	5a 2e       	mov	r5, r26
   1a7ac:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a7b0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a7b4:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a7b6:	05 c0       	rjmp	.+10     	; 0x1a7c2 <lif_add_ascii_file_as_e010+0x17e>
   1a7b8:	66 e4       	ldi	r22, 0x46	; 70
   1a7ba:	76 e1       	ldi	r23, 0x16	; 22
   1a7bc:	c8 01       	movw	r24, r16
   1a7be:	0e 94 d5 c2 	call	0x185aa	; 0x185aa <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a7c2:	97 01       	movw	r18, r14
   1a7c4:	b2 01       	movw	r22, r4
   1a7c6:	a1 01       	movw	r20, r2
   1a7c8:	c8 01       	movw	r24, r16
   1a7ca:	34 de       	rcall	.-920    	; 0x1a434 <lif_add_ascii_file_as_e010_wrapper>
   1a7cc:	4b 01       	movw	r8, r22

    if(debuglevel & LIF_DEBUG)
   1a7ce:	7c 01       	movw	r14, r24
   1a7d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a7d4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a7d8:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1a7da:	4a c0       	rjmp	.+148    	; 0x1a870 <lif_add_ascii_file_as_e010+0x22c>
   1a7dc:	8d e6       	ldi	r24, 0x6D	; 109
   1a7de:	92 e3       	ldi	r25, 0x32	; 50
   1a7e0:	a0 e0       	ldi	r26, 0x00	; 0
   1a7e2:	ed b7       	in	r30, 0x3d	; 61
   1a7e4:	fe b7       	in	r31, 0x3e	; 62
   1a7e6:	81 83       	std	Z+1, r24	; 0x01
   1a7e8:	92 83       	std	Z+2, r25	; 0x02
   1a7ea:	a3 83       	std	Z+3, r26	; 0x03
   1a7ec:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a7f0:	ed b7       	in	r30, 0x3d	; 61
   1a7f2:	fe b7       	in	r31, 0x3e	; 62
   1a7f4:	d5 82       	std	Z+5, r13	; 0x05
   1a7f6:	c4 82       	std	Z+4, r12	; 0x04
   1a7f8:	86 e5       	ldi	r24, 0x56	; 86
   1a7fa:	92 e3       	ldi	r25, 0x32	; 50
   1a7fc:	a0 e0       	ldi	r26, 0x00	; 0
   1a7fe:	81 83       	std	Z+1, r24	; 0x01
   1a800:	92 83       	std	Z+2, r25	; 0x02
   1a802:	a3 83       	std	Z+3, r26	; 0x03
   1a804:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a808:	ed b7       	in	r30, 0x3d	; 61
   1a80a:	fe b7       	in	r31, 0x3e	; 62
   1a80c:	75 82       	std	Z+5, r7	; 0x05
   1a80e:	64 82       	std	Z+4, r6	; 0x04
   1a810:	8f e3       	ldi	r24, 0x3F	; 63
   1a812:	92 e3       	ldi	r25, 0x32	; 50
   1a814:	a0 e0       	ldi	r26, 0x00	; 0
   1a816:	81 83       	std	Z+1, r24	; 0x01
   1a818:	92 83       	std	Z+2, r25	; 0x02
   1a81a:	a3 83       	std	Z+3, r26	; 0x03
   1a81c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a820:	f5 01       	movw	r30, r10
   1a822:	80 81       	ld	r24, Z
   1a824:	91 81       	ldd	r25, Z+1	; 0x01
   1a826:	a2 81       	ldd	r26, Z+2	; 0x02
   1a828:	b3 81       	ldd	r27, Z+3	; 0x03
   1a82a:	ed b7       	in	r30, 0x3d	; 61
   1a82c:	fe b7       	in	r31, 0x3e	; 62
   1a82e:	84 83       	std	Z+4, r24	; 0x04
   1a830:	95 83       	std	Z+5, r25	; 0x05
   1a832:	a6 83       	std	Z+6, r26	; 0x06
   1a834:	b7 83       	std	Z+7, r27	; 0x07
   1a836:	86 e2       	ldi	r24, 0x26	; 38
   1a838:	92 e3       	ldi	r25, 0x32	; 50
   1a83a:	a0 e0       	ldi	r26, 0x00	; 0
   1a83c:	81 83       	std	Z+1, r24	; 0x01
   1a83e:	92 83       	std	Z+2, r25	; 0x02
   1a840:	a3 83       	std	Z+3, r26	; 0x03
   1a842:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a846:	f8 01       	movw	r30, r16
   1a848:	e0 5a       	subi	r30, 0xA0	; 160
   1a84a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a84c:	80 81       	ld	r24, Z
   1a84e:	91 81       	ldd	r25, Z+1	; 0x01
   1a850:	a2 81       	ldd	r26, Z+2	; 0x02
   1a852:	b3 81       	ldd	r27, Z+3	; 0x03
   1a854:	ed b7       	in	r30, 0x3d	; 61
   1a856:	fe b7       	in	r31, 0x3e	; 62
   1a858:	84 83       	std	Z+4, r24	; 0x04
   1a85a:	95 83       	std	Z+5, r25	; 0x05
   1a85c:	a6 83       	std	Z+6, r26	; 0x06
   1a85e:	b7 83       	std	Z+7, r27	; 0x07
   1a860:	8d e0       	ldi	r24, 0x0D	; 13
   1a862:	92 e3       	ldi	r25, 0x32	; 50
   1a864:	a0 e0       	ldi	r26, 0x00	; 0
   1a866:	81 83       	std	Z+1, r24	; 0x01
   1a868:	92 83       	std	Z+2, r25	; 0x02
   1a86a:	a3 83       	std	Z+3, r26	; 0x03
   1a86c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a870:	b3 01       	movw	r22, r6
   1a872:	c8 01       	movw	r24, r16
   1a874:	0e 94 14 c8 	call	0x19028	; 0x19028 <lif_writedirindex>
   1a878:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a87a:	21 f4       	brne	.+8      	; 0x1a884 <lif_add_ascii_file_as_e010+0x240>
   1a87c:	c8 01       	movw	r24, r16
   1a87e:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1a882:	14 c0       	rjmp	.+40     	; 0x1a8ac <lif_add_ascii_file_as_e010+0x268>
   1a884:	c8 01       	movw	r24, r16
   1a886:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a88a:	ed b7       	in	r30, 0x3d	; 61
   1a88c:	fe b7       	in	r31, 0x3e	; 62
   1a88e:	84 82       	std	Z+4, r8	; 0x04
   1a890:	95 82       	std	Z+5, r9	; 0x05
   1a892:	e6 82       	std	Z+6, r14	; 0x06
   1a894:	f7 82       	std	Z+7, r15	; 0x07
   1a896:	8f ef       	ldi	r24, 0xFF	; 255
   1a898:	91 e3       	ldi	r25, 0x31	; 49
   1a89a:	a0 e0       	ldi	r26, 0x00	; 0
   1a89c:	81 83       	std	Z+1, r24	; 0x01
   1a89e:	92 83       	std	Z+2, r25	; 0x02
   1a8a0:	a3 83       	std	Z+3, r26	; 0x03
   1a8a2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

// Return file size
    return(bytes);
   1a8a6:	b4 01       	movw	r22, r8
   1a8a8:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a8aa:	04 c0       	rjmp	.+8      	; 0x1a8b4 <lif_add_ascii_file_as_e010+0x270>
   1a8ac:	6f ef       	ldi	r22, 0xFF	; 255
   1a8ae:	7f ef       	ldi	r23, 0xFF	; 255
   1a8b0:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a8b2:	9f ef       	ldi	r25, 0xFF	; 255
   1a8b4:	eb 96       	adiw	r28, 0x3b	; 59
   1a8b6:	e2 e1       	ldi	r30, 0x12	; 18
   1a8b8:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0001a8bc <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a8bc:	a7 e3       	ldi	r26, 0x37	; 55
   1a8be:	b2 e0       	ldi	r27, 0x02	; 2
   1a8c0:	e4 e6       	ldi	r30, 0x64	; 100
   1a8c2:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8c4:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   1a8c8:	7c 01       	movw	r14, r24
   1a8ca:	8b 01       	movw	r16, r22
   1a8cc:	ca 5d       	subi	r28, 0xDA	; 218
   1a8ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8d0:	59 83       	std	Y+1, r21	; 0x01
   1a8d2:	48 83       	st	Y, r20
   1a8d4:	c6 52       	subi	r28, 0x26	; 38
   1a8d6:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a8d8:	64 e1       	ldi	r22, 0x14	; 20
   1a8da:	73 e0       	ldi	r23, 0x03	; 3
   1a8dc:	6b d9       	rcall	.-3370   	; 0x19bb4 <lif_open_volume>
   1a8de:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a8e0:	00 97       	sbiw	r24, 0x00	; 0
   1a8e2:	69 f4       	brne	.+26     	; 0x1a8fe <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a8e4:	ed b7       	in	r30, 0x3d	; 61
   1a8e6:	fe b7       	in	r31, 0x3e	; 62
   1a8e8:	f5 82       	std	Z+5, r15	; 0x05
   1a8ea:	e4 82       	std	Z+4, r14	; 0x04
   1a8ec:	87 ee       	ldi	r24, 0xE7	; 231
   1a8ee:	91 e3       	ldi	r25, 0x31	; 49
   1a8f0:	a0 e0       	ldi	r26, 0x00	; 0
   1a8f2:	81 83       	std	Z+1, r24	; 0x01
   1a8f4:	92 83       	std	Z+2, r25	; 0x02
   1a8f6:	a3 83       	std	Z+3, r26	; 0x03
   1a8f8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1a8fc:	13 c0       	rjmp	.+38     	; 0x1a924 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a8fe:	b8 01       	movw	r22, r16
   1a900:	28 dc       	rcall	.-1968   	; 0x1a152 <lif_find_file>
    if(index == -1)
   1a902:	01 96       	adiw	r24, 0x01	; 1
   1a904:	91 f4       	brne	.+36     	; 0x1a92a <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a906:	ed b7       	in	r30, 0x3d	; 61
   1a908:	fe b7       	in	r31, 0x3e	; 62
   1a90a:	15 83       	std	Z+5, r17	; 0x05
   1a90c:	04 83       	std	Z+4, r16	; 0x04
   1a90e:	80 ed       	ldi	r24, 0xD0	; 208
   1a910:	91 e3       	ldi	r25, 0x31	; 49
   1a912:	a0 e0       	ldi	r26, 0x00	; 0
   1a914:	81 83       	std	Z+1, r24	; 0x01
   1a916:	92 83       	std	Z+2, r25	; 0x02
   1a918:	a3 83       	std	Z+3, r26	; 0x03
   1a91a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a91e:	c6 01       	movw	r24, r12
   1a920:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a924:	80 e0       	ldi	r24, 0x00	; 0
   1a926:	90 e0       	ldi	r25, 0x00	; 0
   1a928:	73 c2       	rjmp	.+1254   	; 0x1ae10 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a92a:	f6 01       	movw	r30, r12
   1a92c:	e6 5a       	subi	r30, 0xA6	; 166
   1a92e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a930:	80 81       	ld	r24, Z
   1a932:	91 81       	ldd	r25, Z+1	; 0x01
   1a934:	9c 01       	movw	r18, r24
   1a936:	2c 7f       	andi	r18, 0xFC	; 252
   1a938:	20 31       	cpi	r18, 0x10	; 16
   1a93a:	30 4e       	sbci	r19, 0xE0	; 224
   1a93c:	a9 f0       	breq	.+42     	; 0x1a968 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a93e:	ed b7       	in	r30, 0x3d	; 61
   1a940:	fe b7       	in	r31, 0x3e	; 62
   1a942:	97 83       	std	Z+7, r25	; 0x07
   1a944:	86 83       	std	Z+6, r24	; 0x06
   1a946:	ca 5d       	subi	r28, 0xDA	; 218
   1a948:	dd 4f       	sbci	r29, 0xFD	; 253
   1a94a:	28 81       	ld	r18, Y
   1a94c:	39 81       	ldd	r19, Y+1	; 0x01
   1a94e:	c6 52       	subi	r28, 0x26	; 38
   1a950:	d2 40       	sbci	r29, 0x02	; 2
   1a952:	35 83       	std	Z+5, r19	; 0x05
   1a954:	24 83       	std	Z+4, r18	; 0x04
   1a956:	88 e9       	ldi	r24, 0x98	; 152
   1a958:	91 e3       	ldi	r25, 0x31	; 49
   1a95a:	a0 e0       	ldi	r26, 0x00	; 0
   1a95c:	81 83       	std	Z+1, r24	; 0x01
   1a95e:	92 83       	std	Z+2, r25	; 0x02
   1a960:	a3 83       	std	Z+3, r26	; 0x03
   1a962:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1a966:	db cf       	rjmp	.-74     	; 0x1a91e <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a968:	f6 01       	movw	r30, r12
   1a96a:	e4 5a       	subi	r30, 0xA4	; 164
   1a96c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a96e:	80 80       	ld	r8, Z
   1a970:	91 80       	ldd	r9, Z+1	; 0x01
   1a972:	a2 80       	ldd	r10, Z+2	; 0x02
   1a974:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a976:	34 96       	adiw	r30, 0x04	; 4
   1a978:	80 81       	ld	r24, Z
   1a97a:	91 81       	ldd	r25, Z+1	; 0x01
   1a97c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a97e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a980:	a5 01       	movw	r20, r10
   1a982:	94 01       	movw	r18, r8
   1a984:	28 0f       	add	r18, r24
   1a986:	39 1f       	adc	r19, r25
   1a988:	4a 1f       	adc	r20, r26
   1a98a:	5b 1f       	adc	r21, r27
   1a98c:	c4 5d       	subi	r28, 0xD4	; 212
   1a98e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a990:	28 83       	st	Y, r18
   1a992:	39 83       	std	Y+1, r19	; 0x01
   1a994:	4a 83       	std	Y+2, r20	; 0x02
   1a996:	5b 83       	std	Y+3, r21	; 0x03
   1a998:	cc 52       	subi	r28, 0x2C	; 44
   1a99a:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a99c:	c6 01       	movw	r24, r12
   1a99e:	8c 59       	subi	r24, 0x9C	; 156
   1a9a0:	9f 4f       	sbci	r25, 0xFF	; 255
   1a9a2:	0e 94 2b c2 	call	0x18456	; 0x18456 <lif_lifbcd2time>
   1a9a6:	c8 5d       	subi	r28, 0xD8	; 216
   1a9a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9aa:	68 83       	st	Y, r22
   1a9ac:	79 83       	std	Y+1, r23	; 0x01
   1a9ae:	8a 83       	std	Y+2, r24	; 0x02
   1a9b0:	9b 83       	std	Y+3, r25	; 0x03
   1a9b2:	c8 52       	subi	r28, 0x28	; 40
   1a9b4:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a9b6:	ba 2d       	mov	r27, r10
   1a9b8:	a9 2d       	mov	r26, r9
   1a9ba:	98 2d       	mov	r25, r8
   1a9bc:	88 27       	eor	r24, r24
   1a9be:	c2 5e       	subi	r28, 0xE2	; 226
   1a9c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9c2:	88 83       	st	Y, r24
   1a9c4:	99 83       	std	Y+1, r25	; 0x01
   1a9c6:	aa 83       	std	Y+2, r26	; 0x02
   1a9c8:	bb 83       	std	Y+3, r27	; 0x03
   1a9ca:	ce 51       	subi	r28, 0x1E	; 30
   1a9cc:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a9ce:	6e ed       	ldi	r22, 0xDE	; 222
   1a9d0:	78 e0       	ldi	r23, 0x08	; 8
   1a9d2:	ca 5d       	subi	r28, 0xDA	; 218
   1a9d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9d6:	88 81       	ld	r24, Y
   1a9d8:	99 81       	ldd	r25, Y+1	; 0x01
   1a9da:	c6 52       	subi	r28, 0x26	; 38
   1a9dc:	d2 40       	sbci	r29, 0x02	; 2
   1a9de:	0e 94 ef bd 	call	0x17bde	; 0x17bde <lif_open>
   1a9e2:	cc 5d       	subi	r28, 0xDC	; 220
   1a9e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9e6:	99 83       	std	Y+1, r25	; 0x01
   1a9e8:	88 83       	st	Y, r24
   1a9ea:	c4 52       	subi	r28, 0x24	; 36
   1a9ec:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a9ee:	89 2b       	or	r24, r25
   1a9f0:	09 f4       	brne	.+2      	; 0x1a9f4 <lif_extract_e010_as_ascii+0x138>
   1a9f2:	95 cf       	rjmp	.-214    	; 0x1a91e <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a9f4:	ca 5d       	subi	r28, 0xDA	; 218
   1a9f6:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9f8:	28 81       	ld	r18, Y
   1a9fa:	39 81       	ldd	r19, Y+1	; 0x01
   1a9fc:	c6 52       	subi	r28, 0x26	; 38
   1a9fe:	d2 40       	sbci	r29, 0x02	; 2
   1aa00:	ed b7       	in	r30, 0x3d	; 61
   1aa02:	fe b7       	in	r31, 0x3e	; 62
   1aa04:	35 83       	std	Z+5, r19	; 0x05
   1aa06:	24 83       	std	Z+4, r18	; 0x04
   1aa08:	88 e8       	ldi	r24, 0x88	; 136
   1aa0a:	91 e3       	ldi	r25, 0x31	; 49
   1aa0c:	a0 e0       	ldi	r26, 0x00	; 0
   1aa0e:	81 83       	std	Z+1, r24	; 0x01
   1aa10:	92 83       	std	Z+2, r25	; 0x02
   1aa12:	a3 83       	std	Z+3, r26	; 0x03
   1aa14:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    bytes = 0;
    wind = 0;
   1aa18:	21 2c       	mov	r2, r1
   1aa1a:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1aa1c:	ce 5d       	subi	r28, 0xDE	; 222
   1aa1e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa20:	19 82       	std	Y+1, r1	; 0x01
   1aa22:	18 82       	st	Y, r1
   1aa24:	c2 52       	subi	r28, 0x22	; 34
   1aa26:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1aa28:	ee 24       	eor	r14, r14
   1aa2a:	e3 94       	inc	r14
   1aa2c:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1aa2e:	41 2c       	mov	r4, r1
   1aa30:	51 2c       	mov	r5, r1
   1aa32:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1aa34:	87 ec       	ldi	r24, 0xC7	; 199
   1aa36:	90 e3       	ldi	r25, 0x30	; 48
   1aa38:	9c 01       	movw	r18, r24
   1aa3a:	40 e0       	ldi	r20, 0x00	; 0
   1aa3c:	ce 5c       	subi	r28, 0xCE	; 206
   1aa3e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa40:	28 83       	st	Y, r18
   1aa42:	39 83       	std	Y+1, r19	; 0x01
   1aa44:	4a 83       	std	Y+2, r20	; 0x02
   1aa46:	c2 53       	subi	r28, 0x32	; 50
   1aa48:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aa4a:	85 ed       	ldi	r24, 0xD5	; 213
   1aa4c:	90 e3       	ldi	r25, 0x30	; 48
   1aa4e:	9c 01       	movw	r18, r24
   1aa50:	40 e0       	ldi	r20, 0x00	; 0
   1aa52:	cb 5c       	subi	r28, 0xCB	; 203
   1aa54:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa56:	28 83       	st	Y, r18
   1aa58:	39 83       	std	Y+1, r19	; 0x01
   1aa5a:	4a 83       	std	Y+2, r20	; 0x02
   1aa5c:	c5 53       	subi	r28, 0x35	; 53
   1aa5e:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aa60:	c2 5e       	subi	r28, 0xE2	; 226
   1aa62:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa64:	28 81       	ld	r18, Y
   1aa66:	39 81       	ldd	r19, Y+1	; 0x01
   1aa68:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa6a:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa6c:	ce 51       	subi	r28, 0x1E	; 30
   1aa6e:	d2 40       	sbci	r29, 0x02	; 2
   1aa70:	bb 27       	eor	r27, r27
   1aa72:	a5 2f       	mov	r26, r21
   1aa74:	94 2f       	mov	r25, r20
   1aa76:	83 2f       	mov	r24, r19
   1aa78:	c4 5d       	subi	r28, 0xD4	; 212
   1aa7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa7c:	28 81       	ld	r18, Y
   1aa7e:	39 81       	ldd	r19, Y+1	; 0x01
   1aa80:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa82:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa84:	cc 52       	subi	r28, 0x2C	; 44
   1aa86:	d2 40       	sbci	r29, 0x02	; 2
   1aa88:	28 17       	cp	r18, r24
   1aa8a:	39 07       	cpc	r19, r25
   1aa8c:	4a 07       	cpc	r20, r26
   1aa8e:	5b 07       	cpc	r21, r27
   1aa90:	08 f4       	brcc	.+2      	; 0x1aa94 <lif_extract_e010_as_ascii+0x1d8>
   1aa92:	51 c1       	rjmp	.+674    	; 0x1ad36 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1aa94:	00 e0       	ldi	r16, 0x00	; 0
   1aa96:	11 e0       	ldi	r17, 0x01	; 1
   1aa98:	c2 5e       	subi	r28, 0xE2	; 226
   1aa9a:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa9c:	28 81       	ld	r18, Y
   1aa9e:	39 81       	ldd	r19, Y+1	; 0x01
   1aaa0:	4a 81       	ldd	r20, Y+2	; 0x02
   1aaa2:	5b 81       	ldd	r21, Y+3	; 0x03
   1aaa4:	ce 51       	subi	r28, 0x1E	; 30
   1aaa6:	d2 40       	sbci	r29, 0x02	; 2
   1aaa8:	be 01       	movw	r22, r28
   1aaaa:	60 5f       	subi	r22, 0xF0	; 240
   1aaac:	7e 4f       	sbci	r23, 0xFE	; 254
   1aaae:	c6 01       	movw	r24, r12
   1aab0:	0e 94 73 be 	call	0x17ce6	; 0x17ce6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1aab4:	6f 3f       	cpi	r22, 0xFF	; 255
   1aab6:	71 05       	cpc	r23, r1
   1aab8:	09 f0       	breq	.+2      	; 0x1aabc <lif_extract_e010_as_ascii+0x200>
   1aaba:	0c f4       	brge	.+2      	; 0x1aabe <lif_extract_e010_as_ascii+0x202>
   1aabc:	3a c1       	rjmp	.+628    	; 0x1ad32 <lif_extract_e010_as_ascii+0x476>
   1aabe:	00 e0       	ldi	r16, 0x00	; 0
   1aac0:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1aac2:	ce 5d       	subi	r28, 0xDE	; 222
   1aac4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aac6:	88 81       	ld	r24, Y
   1aac8:	99 81       	ldd	r25, Y+1	; 0x01
   1aaca:	c2 52       	subi	r28, 0x22	; 34
   1aacc:	d2 40       	sbci	r29, 0x02	; 2
   1aace:	89 2b       	or	r24, r25
   1aad0:	09 f0       	breq	.+2      	; 0x1aad4 <lif_extract_e010_as_ascii+0x218>
   1aad2:	1b c1       	rjmp	.+566    	; 0x1ad0a <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1aad4:	e0 e1       	ldi	r30, 0x10	; 16
   1aad6:	f1 e0       	ldi	r31, 0x01	; 1
   1aad8:	ec 0f       	add	r30, r28
   1aada:	fd 1f       	adc	r31, r29
   1aadc:	e0 0f       	add	r30, r16
   1aade:	f1 1f       	adc	r31, r17
   1aae0:	80 81       	ld	r24, Z
   1aae2:	98 2f       	mov	r25, r24
   1aae4:	9f 7e       	andi	r25, 0xEF	; 239
   1aae6:	9f 3c       	cpi	r25, 0xCF	; 207
   1aae8:	11 f0       	breq	.+4      	; 0x1aaee <lif_extract_e010_as_ascii+0x232>
   1aaea:	8f 36       	cpi	r24, 0x6F	; 111
   1aaec:	c9 f5       	brne	.+114    	; 0x1ab60 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1aaee:	e0 e1       	ldi	r30, 0x10	; 16
   1aaf0:	f1 e0       	ldi	r31, 0x01	; 1
   1aaf2:	ec 0f       	add	r30, r28
   1aaf4:	fd 1f       	adc	r31, r29
   1aaf6:	e0 0f       	add	r30, r16
   1aaf8:	f1 1f       	adc	r31, r17
   1aafa:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1aafc:	f8 01       	movw	r30, r16
   1aafe:	32 96       	adiw	r30, 0x02	; 2
   1ab00:	40 e1       	ldi	r20, 0x10	; 16
   1ab02:	51 e0       	ldi	r21, 0x01	; 1
   1ab04:	4c 0f       	add	r20, r28
   1ab06:	5d 1f       	adc	r21, r29
   1ab08:	e4 0f       	add	r30, r20
   1ab0a:	f5 1f       	adc	r31, r21
   1ab0c:	0d 5f       	subi	r16, 0xFD	; 253
   1ab0e:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab10:	80 81       	ld	r24, Z
   1ab12:	b1 2c       	mov	r11, r1
   1ab14:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ab16:	a1 14       	cp	r10, r1
   1ab18:	b1 04       	cpc	r11, r1
   1ab1a:	09 f4       	brne	.+2      	; 0x1ab1e <lif_extract_e010_as_ascii+0x262>
   1ab1c:	ee c0       	rjmp	.+476    	; 0x1acfa <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ab1e:	5f ef       	ldi	r21, 0xFF	; 255
   1ab20:	a5 16       	cp	r10, r21
   1ab22:	b1 04       	cpc	r11, r1
   1ab24:	09 f0       	breq	.+2      	; 0x1ab28 <lif_extract_e010_as_ascii+0x26c>
   1ab26:	7c f4       	brge	.+30     	; 0x1ab46 <lif_extract_e010_as_ascii+0x28a>
   1ab28:	c4 5e       	subi	r28, 0xE4	; 228
   1ab2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab2c:	19 82       	std	Y+1, r1	; 0x01
   1ab2e:	18 82       	st	Y, r1
   1ab30:	cc 51       	subi	r28, 0x1C	; 28
   1ab32:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab34:	c5 01       	movw	r24, r10
   1ab36:	01 97       	sbiw	r24, 0x01	; 1
   1ab38:	c0 5d       	subi	r28, 0xD0	; 208
   1ab3a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab3c:	99 83       	std	Y+1, r25	; 0x01
   1ab3e:	88 83       	st	Y, r24
   1ab40:	c0 53       	subi	r28, 0x30	; 48
   1ab42:	d2 40       	sbci	r29, 0x02	; 2
   1ab44:	68 c0       	rjmp	.+208    	; 0x1ac16 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1ab46:	ed b7       	in	r30, 0x3d	; 61
   1ab48:	fe b7       	in	r31, 0x3e	; 62
   1ab4a:	b5 82       	std	Z+5, r11	; 0x05
   1ab4c:	a4 82       	std	Z+4, r10	; 0x04
   1ab4e:	83 e5       	ldi	r24, 0x53	; 83
   1ab50:	91 e3       	ldi	r25, 0x31	; 49
   1ab52:	a0 e0       	ldi	r26, 0x00	; 0
   1ab54:	81 83       	std	Z+1, r24	; 0x01
   1ab56:	92 83       	std	Z+2, r25	; 0x02
   1ab58:	a3 83       	std	Z+3, r26	; 0x03
   1ab5a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1ab5e:	1e c0       	rjmp	.+60     	; 0x1ab9c <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1ab60:	8f 3e       	cpi	r24, 0xEF	; 239
   1ab62:	09 f4       	brne	.+2      	; 0x1ab66 <lif_extract_e010_as_ascii+0x2aa>
   1ab64:	d2 c0       	rjmp	.+420    	; 0x1ad0a <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1ab66:	ed b7       	in	r30, 0x3d	; 61
   1ab68:	fe b7       	in	r31, 0x3e	; 62
   1ab6a:	13 87       	std	Z+11, r17	; 0x0b
   1ab6c:	02 87       	std	Z+10, r16	; 0x0a
   1ab6e:	c2 5e       	subi	r28, 0xE2	; 226
   1ab70:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab72:	28 81       	ld	r18, Y
   1ab74:	39 81       	ldd	r19, Y+1	; 0x01
   1ab76:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab78:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab7a:	ce 51       	subi	r28, 0x1E	; 30
   1ab7c:	d2 40       	sbci	r29, 0x02	; 2
   1ab7e:	26 83       	std	Z+6, r18	; 0x06
   1ab80:	37 83       	std	Z+7, r19	; 0x07
   1ab82:	40 87       	std	Z+8, r20	; 0x08
   1ab84:	51 87       	std	Z+9, r21	; 0x09
   1ab86:	90 e0       	ldi	r25, 0x00	; 0
   1ab88:	95 83       	std	Z+5, r25	; 0x05
   1ab8a:	84 83       	std	Z+4, r24	; 0x04
   1ab8c:	8d ef       	ldi	r24, 0xFD	; 253
   1ab8e:	90 e3       	ldi	r25, 0x30	; 48
   1ab90:	a0 e0       	ldi	r26, 0x00	; 0
   1ab92:	81 83       	std	Z+1, r24	; 0x01
   1ab94:	92 83       	std	Z+2, r25	; 0x02
   1ab96:	a3 83       	std	Z+3, r26	; 0x03
   1ab98:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                status = 0;
                done = 1;
   1ab9c:	21 e0       	ldi	r18, 0x01	; 1
   1ab9e:	30 e0       	ldi	r19, 0x00	; 0
   1aba0:	ce 5d       	subi	r28, 0xDE	; 222
   1aba2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aba4:	39 83       	std	Y+1, r19	; 0x01
   1aba6:	28 83       	st	Y, r18
   1aba8:	c2 52       	subi	r28, 0x22	; 34
   1abaa:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1abac:	e1 2c       	mov	r14, r1
   1abae:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1abb0:	ac c0       	rjmp	.+344    	; 0x1ad0a <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1abb2:	0f 3f       	cpi	r16, 0xFF	; 255
   1abb4:	11 05       	cpc	r17, r1
   1abb6:	11 f0       	breq	.+4      	; 0x1abbc <lif_extract_e010_as_ascii+0x300>
   1abb8:	0c f0       	brlt	.+2      	; 0x1abbc <lif_extract_e010_as_ascii+0x300>
   1abba:	a7 c0       	rjmp	.+334    	; 0x1ad0a <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1abbc:	e0 e1       	ldi	r30, 0x10	; 16
   1abbe:	f1 e0       	ldi	r31, 0x01	; 1
   1abc0:	ec 0f       	add	r30, r28
   1abc2:	fd 1f       	adc	r31, r29
   1abc4:	e0 0f       	add	r30, r16
   1abc6:	f1 1f       	adc	r31, r17
   1abc8:	20 81       	ld	r18, Z
   1abca:	a1 01       	movw	r20, r2
   1abcc:	4f 5f       	subi	r20, 0xFF	; 255
   1abce:	5f 4f       	sbci	r21, 0xFF	; 255
   1abd0:	4a 01       	movw	r8, r20
   1abd2:	2d 30       	cpi	r18, 0x0D	; 13
   1abd4:	51 f1       	breq	.+84     	; 0x1ac2a <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1abd6:	98 2d       	mov	r25, r8
   1abd8:	89 2d       	mov	r24, r9
   1abda:	0f 5f       	subi	r16, 0xFF	; 255
   1abdc:	1f 4f       	sbci	r17, 0xFF	; 255
   1abde:	ec e0       	ldi	r30, 0x0C	; 12
   1abe0:	f0 e0       	ldi	r31, 0x00	; 0
   1abe2:	ec 0f       	add	r30, r28
   1abe4:	fd 1f       	adc	r31, r29
   1abe6:	e2 0d       	add	r30, r2
   1abe8:	f3 1d       	adc	r31, r3
   1abea:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1abec:	ef ef       	ldi	r30, 0xFF	; 255
   1abee:	8e 16       	cp	r8, r30
   1abf0:	91 04       	cpc	r9, r1
   1abf2:	09 f0       	breq	.+2      	; 0x1abf6 <lif_extract_e010_as_ascii+0x33a>
   1abf4:	ac f5       	brge	.+106    	; 0x1ac60 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1abf6:	c4 5e       	subi	r28, 0xE4	; 228
   1abf8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abfa:	28 81       	ld	r18, Y
   1abfc:	39 81       	ldd	r19, Y+1	; 0x01
   1abfe:	cc 51       	subi	r28, 0x1C	; 28
   1ac00:	d2 40       	sbci	r29, 0x02	; 2
   1ac02:	2f 5f       	subi	r18, 0xFF	; 255
   1ac04:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac06:	c4 5e       	subi	r28, 0xE4	; 228
   1ac08:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac0a:	39 83       	std	Y+1, r19	; 0x01
   1ac0c:	28 83       	st	Y, r18
   1ac0e:	cc 51       	subi	r28, 0x1C	; 28
   1ac10:	d2 40       	sbci	r29, 0x02	; 2
   1ac12:	29 2e       	mov	r2, r25
   1ac14:	38 2e       	mov	r3, r24
   1ac16:	c4 5e       	subi	r28, 0xE4	; 228
   1ac18:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac1a:	48 81       	ld	r20, Y
   1ac1c:	59 81       	ldd	r21, Y+1	; 0x01
   1ac1e:	cc 51       	subi	r28, 0x1C	; 28
   1ac20:	d2 40       	sbci	r29, 0x02	; 2
   1ac22:	4a 15       	cp	r20, r10
   1ac24:	5b 05       	cpc	r21, r11
   1ac26:	2c f2       	brlt	.-118    	; 0x1abb2 <lif_extract_e010_as_ascii+0x2f6>
   1ac28:	62 c0       	rjmp	.+196    	; 0x1acee <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ac2a:	c4 5e       	subi	r28, 0xE4	; 228
   1ac2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac2e:	88 81       	ld	r24, Y
   1ac30:	99 81       	ldd	r25, Y+1	; 0x01
   1ac32:	cc 51       	subi	r28, 0x1C	; 28
   1ac34:	d2 40       	sbci	r29, 0x02	; 2
   1ac36:	c0 5d       	subi	r28, 0xD0	; 208
   1ac38:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac3a:	a8 81       	ld	r26, Y
   1ac3c:	b9 81       	ldd	r27, Y+1	; 0x01
   1ac3e:	c0 53       	subi	r28, 0x30	; 48
   1ac40:	d2 40       	sbci	r29, 0x02	; 2
   1ac42:	8a 17       	cp	r24, r26
   1ac44:	9b 07       	cpc	r25, r27
   1ac46:	39 f6       	brne	.-114    	; 0x1abd6 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ac48:	ec e0       	ldi	r30, 0x0C	; 12
   1ac4a:	f0 e0       	ldi	r31, 0x00	; 0
   1ac4c:	ec 0f       	add	r30, r28
   1ac4e:	fd 1f       	adc	r31, r29
   1ac50:	e2 0d       	add	r30, r2
   1ac52:	f3 1d       	adc	r31, r3
   1ac54:	ba e0       	ldi	r27, 0x0A	; 10
   1ac56:	b0 83       	st	Z, r27
                    ++ind;
   1ac58:	0f 5f       	subi	r16, 0xFF	; 255
   1ac5a:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ac5c:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ac5e:	47 c0       	rjmp	.+142    	; 0x1acee <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ac60:	cc 5d       	subi	r28, 0xDC	; 220
   1ac62:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac64:	28 81       	ld	r18, Y
   1ac66:	39 81       	ldd	r19, Y+1	; 0x01
   1ac68:	c4 52       	subi	r28, 0x24	; 36
   1ac6a:	d2 40       	sbci	r29, 0x02	; 2
   1ac6c:	a4 01       	movw	r20, r8
   1ac6e:	61 e0       	ldi	r22, 0x01	; 1
   1ac70:	70 e0       	ldi	r23, 0x00	; 0
   1ac72:	ce 01       	movw	r24, r28
   1ac74:	0c 96       	adiw	r24, 0x0c	; 12
   1ac76:	0e 94 38 7c 	call	0xf870	; 0xf870 <fwrite>
                    if(size < wind)
   1ac7a:	88 15       	cp	r24, r8
   1ac7c:	99 05       	cpc	r25, r9
   1ac7e:	d4 f4       	brge	.+52     	; 0x1acb4 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ac80:	cb 5c       	subi	r28, 0xCB	; 203
   1ac82:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac84:	28 81       	ld	r18, Y
   1ac86:	39 81       	ldd	r19, Y+1	; 0x01
   1ac88:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac8a:	c5 53       	subi	r28, 0x35	; 53
   1ac8c:	d2 40       	sbci	r29, 0x02	; 2
   1ac8e:	ed b7       	in	r30, 0x3d	; 61
   1ac90:	fe b7       	in	r31, 0x3e	; 62
   1ac92:	21 83       	std	Z+1, r18	; 0x01
   1ac94:	32 83       	std	Z+2, r19	; 0x02
   1ac96:	43 83       	std	Z+3, r20	; 0x03
   1ac98:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ac9c:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ac9e:	21 e0       	ldi	r18, 0x01	; 1
   1aca0:	30 e0       	ldi	r19, 0x00	; 0
   1aca2:	ce 5d       	subi	r28, 0xDE	; 222
   1aca4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aca6:	39 83       	std	Y+1, r19	; 0x01
   1aca8:	28 83       	st	Y, r18
   1acaa:	c2 52       	subi	r28, 0x22	; 34
   1acac:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1acae:	e1 2c       	mov	r14, r1
   1acb0:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1acb2:	1d c0       	rjmp	.+58     	; 0x1acee <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1acb4:	09 2e       	mov	r0, r25
   1acb6:	00 0c       	add	r0, r0
   1acb8:	aa 0b       	sbc	r26, r26
   1acba:	bb 0b       	sbc	r27, r27
   1acbc:	48 0e       	add	r4, r24
   1acbe:	59 1e       	adc	r5, r25
   1acc0:	6a 1e       	adc	r6, r26
   1acc2:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1acc4:	ed b7       	in	r30, 0x3d	; 61
   1acc6:	fe b7       	in	r31, 0x3e	; 62
   1acc8:	44 82       	std	Z+4, r4	; 0x04
   1acca:	55 82       	std	Z+5, r5	; 0x05
   1accc:	66 82       	std	Z+6, r6	; 0x06
   1acce:	77 82       	std	Z+7, r7	; 0x07
   1acd0:	ce 5c       	subi	r28, 0xCE	; 206
   1acd2:	dd 4f       	sbci	r29, 0xFD	; 253
   1acd4:	28 81       	ld	r18, Y
   1acd6:	39 81       	ldd	r19, Y+1	; 0x01
   1acd8:	4a 81       	ldd	r20, Y+2	; 0x02
   1acda:	c2 53       	subi	r28, 0x32	; 50
   1acdc:	d2 40       	sbci	r29, 0x02	; 2
   1acde:	21 83       	std	Z+1, r18	; 0x01
   1ace0:	32 83       	std	Z+2, r19	; 0x02
   1ace2:	43 83       	std	Z+3, r20	; 0x03
   1ace4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
                    wind = 0;
   1ace8:	90 e0       	ldi	r25, 0x00	; 0
   1acea:	80 e0       	ldi	r24, 0x00	; 0
   1acec:	84 cf       	rjmp	.-248    	; 0x1abf6 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1acee:	0f 3f       	cpi	r16, 0xFF	; 255
   1acf0:	11 05       	cpc	r17, r1
   1acf2:	09 f0       	breq	.+2      	; 0x1acf6 <lif_extract_e010_as_ascii+0x43a>
   1acf4:	0c f4       	brge	.+2      	; 0x1acf8 <lif_extract_e010_as_ascii+0x43c>
   1acf6:	e5 ce       	rjmp	.-566    	; 0x1aac2 <lif_extract_e010_as_ascii+0x206>
   1acf8:	08 c0       	rjmp	.+16     	; 0x1ad0a <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1acfa:	a1 e0       	ldi	r26, 0x01	; 1
   1acfc:	b0 e0       	ldi	r27, 0x00	; 0
   1acfe:	ce 5d       	subi	r28, 0xDE	; 222
   1ad00:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad02:	b9 83       	std	Y+1, r27	; 0x01
   1ad04:	a8 83       	st	Y, r26
   1ad06:	c2 52       	subi	r28, 0x22	; 34
   1ad08:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1ad0a:	c2 5e       	subi	r28, 0xE2	; 226
   1ad0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad0e:	28 81       	ld	r18, Y
   1ad10:	39 81       	ldd	r19, Y+1	; 0x01
   1ad12:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad14:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad16:	ce 51       	subi	r28, 0x1E	; 30
   1ad18:	d2 40       	sbci	r29, 0x02	; 2
   1ad1a:	3f 5f       	subi	r19, 0xFF	; 255
   1ad1c:	4f 4f       	sbci	r20, 0xFF	; 255
   1ad1e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad20:	c2 5e       	subi	r28, 0xE2	; 226
   1ad22:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad24:	28 83       	st	Y, r18
   1ad26:	39 83       	std	Y+1, r19	; 0x01
   1ad28:	4a 83       	std	Y+2, r20	; 0x02
   1ad2a:	5b 83       	std	Y+3, r21	; 0x03
   1ad2c:	ce 51       	subi	r28, 0x1E	; 30
   1ad2e:	d2 40       	sbci	r29, 0x02	; 2
   1ad30:	97 ce       	rjmp	.-722    	; 0x1aa60 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ad32:	e1 2c       	mov	r14, r1
   1ad34:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad36:	c6 01       	movw	r24, r12
   1ad38:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ad3c:	21 14       	cp	r2, r1
   1ad3e:	31 04       	cpc	r3, r1
   1ad40:	31 f1       	breq	.+76     	; 0x1ad8e <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1ad42:	cc 5d       	subi	r28, 0xDC	; 220
   1ad44:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad46:	28 81       	ld	r18, Y
   1ad48:	39 81       	ldd	r19, Y+1	; 0x01
   1ad4a:	c4 52       	subi	r28, 0x24	; 36
   1ad4c:	d2 40       	sbci	r29, 0x02	; 2
   1ad4e:	a1 01       	movw	r20, r2
   1ad50:	61 e0       	ldi	r22, 0x01	; 1
   1ad52:	70 e0       	ldi	r23, 0x00	; 0
   1ad54:	ce 01       	movw	r24, r28
   1ad56:	0c 96       	adiw	r24, 0x0c	; 12
   1ad58:	0e 94 38 7c 	call	0xf870	; 0xf870 <fwrite>
   1ad5c:	8c 01       	movw	r16, r24
        if(size < wind)
   1ad5e:	82 15       	cp	r24, r2
   1ad60:	93 05       	cpc	r25, r3
   1ad62:	64 f4       	brge	.+24     	; 0x1ad7c <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ad64:	8f e9       	ldi	r24, 0x9F	; 159
   1ad66:	90 e3       	ldi	r25, 0x30	; 48
   1ad68:	a0 e0       	ldi	r26, 0x00	; 0
   1ad6a:	ed b7       	in	r30, 0x3d	; 61
   1ad6c:	fe b7       	in	r31, 0x3e	; 62
   1ad6e:	81 83       	std	Z+1, r24	; 0x01
   1ad70:	92 83       	std	Z+2, r25	; 0x02
   1ad72:	a3 83       	std	Z+3, r26	; 0x03
   1ad74:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            status = 0;
   1ad78:	e1 2c       	mov	r14, r1
   1ad7a:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ad7c:	c8 01       	movw	r24, r16
   1ad7e:	01 2e       	mov	r0, r17
   1ad80:	00 0c       	add	r0, r0
   1ad82:	aa 0b       	sbc	r26, r26
   1ad84:	bb 0b       	sbc	r27, r27
   1ad86:	48 0e       	add	r4, r24
   1ad88:	59 1e       	adc	r5, r25
   1ad8a:	6a 1e       	adc	r6, r26
   1ad8c:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ad8e:	cc 5d       	subi	r28, 0xDC	; 220
   1ad90:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad92:	88 81       	ld	r24, Y
   1ad94:	99 81       	ldd	r25, Y+1	; 0x01
   1ad96:	c4 52       	subi	r28, 0x24	; 36
   1ad98:	d2 40       	sbci	r29, 0x02	; 2
   1ad9a:	0e 94 ba 7c 	call	0xf974	; 0xf974 <fclose>
    if(t)
   1ad9e:	c8 5d       	subi	r28, 0xD8	; 216
   1ada0:	dd 4f       	sbci	r29, 0xFD	; 253
   1ada2:	28 81       	ld	r18, Y
   1ada4:	39 81       	ldd	r19, Y+1	; 0x01
   1ada6:	4a 81       	ldd	r20, Y+2	; 0x02
   1ada8:	5b 81       	ldd	r21, Y+3	; 0x03
   1adaa:	c8 52       	subi	r28, 0x28	; 40
   1adac:	d2 40       	sbci	r29, 0x02	; 2
   1adae:	21 15       	cp	r18, r1
   1adb0:	31 05       	cpc	r19, r1
   1adb2:	41 05       	cpc	r20, r1
   1adb4:	51 05       	cpc	r21, r1
   1adb6:	d9 f0       	breq	.+54     	; 0x1adee <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1adb8:	c8 5e       	subi	r28, 0xE8	; 232
   1adba:	dd 4f       	sbci	r29, 0xFD	; 253
   1adbc:	28 83       	st	Y, r18
   1adbe:	39 83       	std	Y+1, r19	; 0x01
   1adc0:	4a 83       	std	Y+2, r20	; 0x02
   1adc2:	5b 83       	std	Y+3, r21	; 0x03
   1adc4:	c8 51       	subi	r28, 0x18	; 24
   1adc6:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1adc8:	cc 5e       	subi	r28, 0xEC	; 236
   1adca:	dd 4f       	sbci	r29, 0xFD	; 253
   1adcc:	28 83       	st	Y, r18
   1adce:	39 83       	std	Y+1, r19	; 0x01
   1add0:	4a 83       	std	Y+2, r20	; 0x02
   1add2:	5b 83       	std	Y+3, r21	; 0x03
   1add4:	c4 51       	subi	r28, 0x14	; 20
   1add6:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1add8:	be 01       	movw	r22, r28
   1adda:	6c 5e       	subi	r22, 0xEC	; 236
   1addc:	7d 4f       	sbci	r23, 0xFD	; 253
   1adde:	ca 5d       	subi	r28, 0xDA	; 218
   1ade0:	dd 4f       	sbci	r29, 0xFD	; 253
   1ade2:	88 81       	ld	r24, Y
   1ade4:	99 81       	ldd	r25, Y+1	; 0x01
   1ade6:	c6 52       	subi	r28, 0x26	; 38
   1ade8:	d2 40       	sbci	r29, 0x02	; 2
   1adea:	0e 94 f7 79 	call	0xf3ee	; 0xf3ee <utime>
    }
    sync();
   1adee:	0e 94 b5 7b 	call	0xf76a	; 0xf76a <sync>
    printf("\tWrote: %8ld\n", bytes);
   1adf2:	ed b7       	in	r30, 0x3d	; 61
   1adf4:	fe b7       	in	r31, 0x3e	; 62
   1adf6:	44 82       	std	Z+4, r4	; 0x04
   1adf8:	55 82       	std	Z+5, r5	; 0x05
   1adfa:	66 82       	std	Z+6, r6	; 0x06
   1adfc:	77 82       	std	Z+7, r7	; 0x07
   1adfe:	81 e9       	ldi	r24, 0x91	; 145
   1ae00:	90 e3       	ldi	r25, 0x30	; 48
   1ae02:	a0 e0       	ldi	r26, 0x00	; 0
   1ae04:	81 83       	std	Z+1, r24	; 0x01
   1ae06:	92 83       	std	Z+2, r25	; 0x02
   1ae08:	a3 83       	std	Z+3, r26	; 0x03
   1ae0a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(status);
   1ae0e:	c7 01       	movw	r24, r14
}
   1ae10:	c9 5c       	subi	r28, 0xC9	; 201
   1ae12:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae14:	e2 e1       	ldi	r30, 0x12	; 18
   1ae16:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0001ae1a <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1ae1a:	a4 e1       	ldi	r26, 0x14	; 20
   1ae1c:	b1 e0       	ldi	r27, 0x01	; 1
   1ae1e:	e3 e1       	ldi	r30, 0x13	; 19
   1ae20:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae22:	0c 94 91 e0 	jmp	0x1c122	; 0x1c122 <__prologue_saves__>
   1ae26:	7c 01       	movw	r14, r24
   1ae28:	8b 01       	movw	r16, r22
   1ae2a:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ae2c:	64 e1       	ldi	r22, 0x14	; 20
   1ae2e:	73 e0       	ldi	r23, 0x03	; 3
   1ae30:	0e 94 da cd 	call	0x19bb4	; 0x19bb4 <lif_open_volume>
   1ae34:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ae36:	00 97       	sbiw	r24, 0x00	; 0
   1ae38:	69 f4       	brne	.+26     	; 0x1ae54 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ae3a:	ed b7       	in	r30, 0x3d	; 61
   1ae3c:	fe b7       	in	r31, 0x3e	; 62
   1ae3e:	f5 82       	std	Z+5, r15	; 0x05
   1ae40:	e4 82       	std	Z+4, r14	; 0x04
   1ae42:	89 e7       	ldi	r24, 0x79	; 121
   1ae44:	90 e3       	ldi	r25, 0x30	; 48
   1ae46:	a0 e0       	ldi	r26, 0x00	; 0
   1ae48:	81 83       	std	Z+1, r24	; 0x01
   1ae4a:	92 83       	std	Z+2, r25	; 0x02
   1ae4c:	a3 83       	std	Z+3, r26	; 0x03
   1ae4e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1ae52:	13 c0       	rjmp	.+38     	; 0x1ae7a <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ae54:	b8 01       	movw	r22, r16
   1ae56:	7d d9       	rcall	.-3334   	; 0x1a152 <lif_find_file>
    if(index == -1)
   1ae58:	01 96       	adiw	r24, 0x01	; 1
   1ae5a:	91 f4       	brne	.+36     	; 0x1ae80 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ae5c:	ed b7       	in	r30, 0x3d	; 61
   1ae5e:	fe b7       	in	r31, 0x3e	; 62
   1ae60:	15 83       	std	Z+5, r17	; 0x05
   1ae62:	04 83       	std	Z+4, r16	; 0x04
   1ae64:	86 e6       	ldi	r24, 0x66	; 102
   1ae66:	90 e3       	ldi	r25, 0x30	; 48
   1ae68:	a0 e0       	ldi	r26, 0x00	; 0
   1ae6a:	81 83       	std	Z+1, r24	; 0x01
   1ae6c:	92 83       	std	Z+2, r25	; 0x02
   1ae6e:	a3 83       	std	Z+3, r26	; 0x03
   1ae70:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae74:	c4 01       	movw	r24, r8
   1ae76:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ae7a:	00 e0       	ldi	r16, 0x00	; 0
   1ae7c:	10 e0       	ldi	r17, 0x00	; 0
   1ae7e:	ff c0       	rjmp	.+510    	; 0x1b07e <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ae80:	94 01       	movw	r18, r8
   1ae82:	20 5a       	subi	r18, 0xA0	; 160
   1ae84:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae86:	c0 5f       	subi	r28, 0xF0	; 240
   1ae88:	de 4f       	sbci	r29, 0xFE	; 254
   1ae8a:	39 83       	std	Y+1, r19	; 0x01
   1ae8c:	28 83       	st	Y, r18
   1ae8e:	c0 51       	subi	r28, 0x10	; 16
   1ae90:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ae92:	f9 01       	movw	r30, r18
   1ae94:	a0 80       	ld	r10, Z
   1ae96:	b1 80       	ldd	r11, Z+1	; 0x01
   1ae98:	0b 2c       	mov	r0, r11
   1ae9a:	00 0c       	add	r0, r0
   1ae9c:	cc 08       	sbc	r12, r12
   1ae9e:	dd 08       	sbc	r13, r13
   1aea0:	e1 2c       	mov	r14, r1
   1aea2:	f1 2c       	mov	r15, r1
   1aea4:	87 01       	movw	r16, r14
   1aea6:	e3 94       	inc	r14
   1aea8:	21 e0       	ldi	r18, 0x01	; 1
   1aeaa:	30 e0       	ldi	r19, 0x00	; 0
   1aeac:	40 e0       	ldi	r20, 0x00	; 0
   1aeae:	50 e0       	ldi	r21, 0x00	; 0
   1aeb0:	6b e5       	ldi	r22, 0x5B	; 91
   1aeb2:	76 e1       	ldi	r23, 0x16	; 22
   1aeb4:	c3 01       	movw	r24, r6
   1aeb6:	0e 94 90 c9 	call	0x19320	; 0x19320 <lif_create_volume>
   1aeba:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1aebc:	89 2b       	or	r24, r25
   1aebe:	d1 f2       	breq	.-76     	; 0x1ae74 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1aec0:	81 e2       	ldi	r24, 0x21	; 33
   1aec2:	f4 01       	movw	r30, r8
   1aec4:	e1 5b       	subi	r30, 0xB1	; 177
   1aec6:	ff 4f       	sbci	r31, 0xFF	; 255
   1aec8:	d7 01       	movw	r26, r14
   1aeca:	a1 5b       	subi	r26, 0xB1	; 177
   1aecc:	bf 4f       	sbci	r27, 0xFF	; 255
   1aece:	01 90       	ld	r0, Z+
   1aed0:	0d 92       	st	X+, r0
   1aed2:	8a 95       	dec	r24
   1aed4:	e1 f7       	brne	.-8      	; 0x1aece <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1aed6:	82 e0       	ldi	r24, 0x02	; 2
   1aed8:	90 e0       	ldi	r25, 0x00	; 0
   1aeda:	a0 e0       	ldi	r26, 0x00	; 0
   1aedc:	b0 e0       	ldi	r27, 0x00	; 0
   1aede:	f7 01       	movw	r30, r14
   1aee0:	e4 5a       	subi	r30, 0xA4	; 164
   1aee2:	ff 4f       	sbci	r31, 0xFF	; 255
   1aee4:	80 83       	st	Z, r24
   1aee6:	91 83       	std	Z+1, r25	; 0x01
   1aee8:	a2 83       	std	Z+2, r26	; 0x02
   1aeea:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1aeec:	c0 5f       	subi	r28, 0xF0	; 240
   1aeee:	de 4f       	sbci	r29, 0xFE	; 254
   1aef0:	e8 81       	ld	r30, Y
   1aef2:	f9 81       	ldd	r31, Y+1	; 0x01
   1aef4:	c0 51       	subi	r28, 0x10	; 16
   1aef6:	d1 40       	sbci	r29, 0x01	; 1
   1aef8:	80 81       	ld	r24, Z
   1aefa:	91 81       	ldd	r25, Z+1	; 0x01
   1aefc:	a2 81       	ldd	r26, Z+2	; 0x02
   1aefe:	b3 81       	ldd	r27, Z+3	; 0x03
   1af00:	f7 01       	movw	r30, r14
   1af02:	80 8b       	std	Z+16, r24	; 0x10
   1af04:	91 8b       	std	Z+17, r25	; 0x11
   1af06:	a2 8b       	std	Z+18, r26	; 0x12
   1af08:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1af0a:	60 e0       	ldi	r22, 0x00	; 0
   1af0c:	70 e0       	ldi	r23, 0x00	; 0
   1af0e:	c7 01       	movw	r24, r14
   1af10:	0e 94 14 c8 	call	0x19028	; 0x19028 <lif_writedirindex>
   1af14:	8c 01       	movw	r16, r24
   1af16:	89 2b       	or	r24, r25
   1af18:	41 f0       	breq	.+16     	; 0x1af2a <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1af1a:	61 e0       	ldi	r22, 0x01	; 1
   1af1c:	70 e0       	ldi	r23, 0x00	; 0
   1af1e:	c7 01       	movw	r24, r14
   1af20:	0e 94 70 c8 	call	0x190e0	; 0x190e0 <lif_writedirEOF>
   1af24:	8c 01       	movw	r16, r24
   1af26:	89 2b       	or	r24, r25
   1af28:	39 f4       	brne	.+14     	; 0x1af38 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af2a:	c4 01       	movw	r24, r8
   1af2c:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1af30:	c7 01       	movw	r24, r14
   1af32:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1af36:	a3 c0       	rjmp	.+326    	; 0x1b07e <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1af38:	f7 01       	movw	r30, r14
   1af3a:	44 84       	ldd	r4, Z+12	; 0x0c
   1af3c:	55 84       	ldd	r5, Z+13	; 0x0d
   1af3e:	66 84       	ldd	r6, Z+14	; 0x0e
   1af40:	77 84       	ldd	r7, Z+15	; 0x0f
   1af42:	76 2c       	mov	r7, r6
   1af44:	65 2c       	mov	r6, r5
   1af46:	54 2c       	mov	r5, r4
   1af48:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1af4a:	f4 01       	movw	r30, r8
   1af4c:	e4 5a       	subi	r30, 0xA4	; 164
   1af4e:	ff 4f       	sbci	r31, 0xFF	; 255
   1af50:	80 81       	ld	r24, Z
   1af52:	91 81       	ldd	r25, Z+1	; 0x01
   1af54:	a2 81       	ldd	r26, Z+2	; 0x02
   1af56:	b3 81       	ldd	r27, Z+3	; 0x03
   1af58:	22 27       	eor	r18, r18
   1af5a:	38 2f       	mov	r19, r24
   1af5c:	49 2f       	mov	r20, r25
   1af5e:	5a 2f       	mov	r21, r26
   1af60:	c4 5f       	subi	r28, 0xF4	; 244
   1af62:	de 4f       	sbci	r29, 0xFE	; 254
   1af64:	28 83       	st	Y, r18
   1af66:	39 83       	std	Y+1, r19	; 0x01
   1af68:	4a 83       	std	Y+2, r20	; 0x02
   1af6a:	5b 83       	std	Y+3, r21	; 0x03
   1af6c:	cc 50       	subi	r28, 0x0C	; 12
   1af6e:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af70:	21 2c       	mov	r2, r1
   1af72:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1af74:	88 e5       	ldi	r24, 0x58	; 88
   1af76:	90 e3       	ldi	r25, 0x30	; 48
   1af78:	9c 01       	movw	r18, r24
   1af7a:	40 e0       	ldi	r20, 0x00	; 0
   1af7c:	ce 5e       	subi	r28, 0xEE	; 238
   1af7e:	de 4f       	sbci	r29, 0xFE	; 254
   1af80:	28 83       	st	Y, r18
   1af82:	39 83       	std	Y+1, r19	; 0x01
   1af84:	4a 83       	std	Y+2, r20	; 0x02
   1af86:	c2 51       	subi	r28, 0x12	; 18
   1af88:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af8a:	c0 5f       	subi	r28, 0xF0	; 240
   1af8c:	de 4f       	sbci	r29, 0xFE	; 254
   1af8e:	e8 81       	ld	r30, Y
   1af90:	f9 81       	ldd	r31, Y+1	; 0x01
   1af92:	c0 51       	subi	r28, 0x10	; 16
   1af94:	d1 40       	sbci	r29, 0x01	; 1
   1af96:	80 81       	ld	r24, Z
   1af98:	91 81       	ldd	r25, Z+1	; 0x01
   1af9a:	28 16       	cp	r2, r24
   1af9c:	39 06       	cpc	r3, r25
   1af9e:	0c f0       	brlt	.+2      	; 0x1afa2 <lif_extract_lif_as_lif+0x188>
   1afa0:	58 c0       	rjmp	.+176    	; 0x1b052 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1afa2:	00 e0       	ldi	r16, 0x00	; 0
   1afa4:	11 e0       	ldi	r17, 0x01	; 1
   1afa6:	c4 5f       	subi	r28, 0xF4	; 244
   1afa8:	de 4f       	sbci	r29, 0xFE	; 254
   1afaa:	28 81       	ld	r18, Y
   1afac:	39 81       	ldd	r19, Y+1	; 0x01
   1afae:	4a 81       	ldd	r20, Y+2	; 0x02
   1afb0:	5b 81       	ldd	r21, Y+3	; 0x03
   1afb2:	cc 50       	subi	r28, 0x0C	; 12
   1afb4:	d1 40       	sbci	r29, 0x01	; 1
   1afb6:	be 01       	movw	r22, r28
   1afb8:	68 5f       	subi	r22, 0xF8	; 248
   1afba:	7f 4f       	sbci	r23, 0xFF	; 255
   1afbc:	c4 01       	movw	r24, r8
   1afbe:	0e 94 73 be 	call	0x17ce6	; 0x17ce6 <lif_read>
   1afc2:	5b 01       	movw	r10, r22
   1afc4:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1afc6:	6f 3f       	cpi	r22, 0xFF	; 255
   1afc8:	71 05       	cpc	r23, r1
   1afca:	09 f0       	breq	.+2      	; 0x1afce <lif_extract_lif_as_lif+0x1b4>
   1afcc:	2c f4       	brge	.+10     	; 0x1afd8 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afce:	c4 01       	movw	r24, r8
   1afd0:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1afd4:	c7 01       	movw	r24, r14
   1afd6:	4f cf       	rjmp	.-354    	; 0x1ae76 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1afd8:	00 e0       	ldi	r16, 0x00	; 0
   1afda:	11 e0       	ldi	r17, 0x01	; 1
   1afdc:	a3 01       	movw	r20, r6
   1afde:	92 01       	movw	r18, r4
   1afe0:	be 01       	movw	r22, r28
   1afe2:	68 5f       	subi	r22, 0xF8	; 248
   1afe4:	7f 4f       	sbci	r23, 0xFF	; 255
   1afe6:	c7 01       	movw	r24, r14
   1afe8:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1afec:	c5 01       	movw	r24, r10
   1afee:	0b 2c       	mov	r0, r11
   1aff0:	00 0c       	add	r0, r0
   1aff2:	aa 0b       	sbc	r26, r26
   1aff4:	bb 0b       	sbc	r27, r27
   1aff6:	48 0e       	add	r4, r24
   1aff8:	59 1e       	adc	r5, r25
   1affa:	6a 1e       	adc	r6, r26
   1affc:	7b 1e       	adc	r7, r27
        offset += size;
   1affe:	c4 5f       	subi	r28, 0xF4	; 244
   1b000:	de 4f       	sbci	r29, 0xFE	; 254
   1b002:	28 81       	ld	r18, Y
   1b004:	39 81       	ldd	r19, Y+1	; 0x01
   1b006:	4a 81       	ldd	r20, Y+2	; 0x02
   1b008:	5b 81       	ldd	r21, Y+3	; 0x03
   1b00a:	cc 50       	subi	r28, 0x0C	; 12
   1b00c:	d1 40       	sbci	r29, 0x01	; 1
   1b00e:	28 0f       	add	r18, r24
   1b010:	39 1f       	adc	r19, r25
   1b012:	4a 1f       	adc	r20, r26
   1b014:	5b 1f       	adc	r21, r27
   1b016:	c4 5f       	subi	r28, 0xF4	; 244
   1b018:	de 4f       	sbci	r29, 0xFE	; 254
   1b01a:	28 83       	st	Y, r18
   1b01c:	39 83       	std	Y+1, r19	; 0x01
   1b01e:	4a 83       	std	Y+2, r20	; 0x02
   1b020:	5b 83       	std	Y+3, r21	; 0x03
   1b022:	cc 50       	subi	r28, 0x0C	; 12
   1b024:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b026:	ed b7       	in	r30, 0x3d	; 61
   1b028:	fe b7       	in	r31, 0x3e	; 62
   1b02a:	44 82       	std	Z+4, r4	; 0x04
   1b02c:	55 82       	std	Z+5, r5	; 0x05
   1b02e:	66 82       	std	Z+6, r6	; 0x06
   1b030:	77 82       	std	Z+7, r7	; 0x07
   1b032:	ce 5e       	subi	r28, 0xEE	; 238
   1b034:	de 4f       	sbci	r29, 0xFE	; 254
   1b036:	28 81       	ld	r18, Y
   1b038:	39 81       	ldd	r19, Y+1	; 0x01
   1b03a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b03c:	c2 51       	subi	r28, 0x12	; 18
   1b03e:	d1 40       	sbci	r29, 0x01	; 1
   1b040:	21 83       	std	Z+1, r18	; 0x01
   1b042:	32 83       	std	Z+2, r19	; 0x02
   1b044:	43 83       	std	Z+3, r20	; 0x03
   1b046:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b04a:	ff ef       	ldi	r31, 0xFF	; 255
   1b04c:	2f 1a       	sub	r2, r31
   1b04e:	3f 0a       	sbc	r3, r31
   1b050:	9c cf       	rjmp	.-200    	; 0x1af8a <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b052:	c4 01       	movw	r24, r8
   1b054:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1b058:	c7 01       	movw	r24, r14
   1b05a:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b05e:	ed b7       	in	r30, 0x3d	; 61
   1b060:	fe b7       	in	r31, 0x3e	; 62
   1b062:	44 82       	std	Z+4, r4	; 0x04
   1b064:	55 82       	std	Z+5, r5	; 0x05
   1b066:	66 82       	std	Z+6, r6	; 0x06
   1b068:	77 82       	std	Z+7, r7	; 0x07
   1b06a:	8a e4       	ldi	r24, 0x4A	; 74
   1b06c:	90 e3       	ldi	r25, 0x30	; 48
   1b06e:	a0 e0       	ldi	r26, 0x00	; 0
   1b070:	81 83       	std	Z+1, r24	; 0x01
   1b072:	92 83       	std	Z+2, r25	; 0x02
   1b074:	a3 83       	std	Z+3, r26	; 0x03
   1b076:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(1);
   1b07a:	01 e0       	ldi	r16, 0x01	; 1
   1b07c:	10 e0       	ldi	r17, 0x00	; 0
}
   1b07e:	c8 01       	movw	r24, r16
   1b080:	cc 5e       	subi	r28, 0xEC	; 236
   1b082:	de 4f       	sbci	r29, 0xFE	; 254
   1b084:	e2 e1       	ldi	r30, 0x12	; 18
   1b086:	0c 94 ad e0 	jmp	0x1c15a	; 0x1c15a <__epilogue_restores__>

0001b08a <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b08a:	2f 92       	push	r2
   1b08c:	3f 92       	push	r3
   1b08e:	4f 92       	push	r4
   1b090:	5f 92       	push	r5
   1b092:	6f 92       	push	r6
   1b094:	8f 92       	push	r8
   1b096:	9f 92       	push	r9
   1b098:	af 92       	push	r10
   1b09a:	bf 92       	push	r11
   1b09c:	cf 92       	push	r12
   1b09e:	df 92       	push	r13
   1b0a0:	ef 92       	push	r14
   1b0a2:	ff 92       	push	r15
   1b0a4:	0f 93       	push	r16
   1b0a6:	1f 93       	push	r17
   1b0a8:	cf 93       	push	r28
   1b0aa:	df 93       	push	r29
   1b0ac:	cd b7       	in	r28, 0x3d	; 61
   1b0ae:	de b7       	in	r29, 0x3e	; 62
   1b0b0:	cd 51       	subi	r28, 0x1D	; 29
   1b0b2:	d1 40       	sbci	r29, 0x01	; 1
   1b0b4:	0f b6       	in	r0, 0x3f	; 63
   1b0b6:	f8 94       	cli
   1b0b8:	de bf       	out	0x3e, r29	; 62
   1b0ba:	0f be       	out	0x3f, r0	; 63
   1b0bc:	cd bf       	out	0x3d, r28	; 61
   1b0be:	5c 01       	movw	r10, r24
   1b0c0:	7b 01       	movw	r14, r22
   1b0c2:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b0c4:	dc 01       	movw	r26, r24
   1b0c6:	8c 91       	ld	r24, X
   1b0c8:	81 11       	cpse	r24, r1
   1b0ca:	03 c0       	rjmp	.+6      	; 0x1b0d2 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b0cc:	8a e2       	ldi	r24, 0x2A	; 42
   1b0ce:	90 e3       	ldi	r25, 0x30	; 48
   1b0d0:	06 c0       	rjmp	.+12     	; 0x1b0de <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b0d2:	db 01       	movw	r26, r22
   1b0d4:	8c 91       	ld	r24, X
   1b0d6:	81 11       	cpse	r24, r1
   1b0d8:	0b c0       	rjmp	.+22     	; 0x1b0f0 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b0da:	8f e0       	ldi	r24, 0x0F	; 15
   1b0dc:	90 e3       	ldi	r25, 0x30	; 48
   1b0de:	a0 e0       	ldi	r26, 0x00	; 0
   1b0e0:	ed b7       	in	r30, 0x3d	; 61
   1b0e2:	fe b7       	in	r31, 0x3e	; 62
   1b0e4:	81 83       	std	Z+1, r24	; 0x01
   1b0e6:	92 83       	std	Z+2, r25	; 0x02
   1b0e8:	a3 83       	std	Z+3, r26	; 0x03
   1b0ea:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1b0ee:	25 c1       	rjmp	.+586    	; 0x1b33a <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b0f0:	da 01       	movw	r26, r20
   1b0f2:	8c 91       	ld	r24, X
   1b0f4:	81 11       	cpse	r24, r1
   1b0f6:	03 c0       	rjmp	.+6      	; 0x1b0fe <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b0f8:	83 ef       	ldi	r24, 0xF3	; 243
   1b0fa:	9f e2       	ldi	r25, 0x2F	; 47
   1b0fc:	f0 cf       	rjmp	.-32     	; 0x1b0de <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b0fe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b102:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b106:	92 ff       	sbrs	r25, 2
   1b108:	10 c0       	rjmp	.+32     	; 0x1b12a <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b10a:	ed b7       	in	r30, 0x3d	; 61
   1b10c:	fe b7       	in	r31, 0x3e	; 62
   1b10e:	51 87       	std	Z+9, r21	; 0x09
   1b110:	40 87       	std	Z+8, r20	; 0x08
   1b112:	77 83       	std	Z+7, r23	; 0x07
   1b114:	66 83       	std	Z+6, r22	; 0x06
   1b116:	b5 82       	std	Z+5, r11	; 0x05
   1b118:	a4 82       	std	Z+4, r10	; 0x04
   1b11a:	84 ec       	ldi	r24, 0xC4	; 196
   1b11c:	9f e2       	ldi	r25, 0x2F	; 47
   1b11e:	a0 e0       	ldi	r26, 0x00	; 0
   1b120:	81 83       	std	Z+1, r24	; 0x01
   1b122:	92 83       	std	Z+2, r25	; 0x02
   1b124:	a3 83       	std	Z+3, r26	; 0x03
   1b126:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b12a:	6a ed       	ldi	r22, 0xDA	; 218
   1b12c:	78 e0       	ldi	r23, 0x08	; 8
   1b12e:	c4 01       	movw	r24, r8
   1b130:	0e 94 da cd 	call	0x19bb4	; 0x19bb4 <lif_open_volume>
   1b134:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b136:	00 97       	sbiw	r24, 0x00	; 0
   1b138:	09 f4       	brne	.+2      	; 0x1b13c <lif_add_lif_file+0xb2>
   1b13a:	ff c0       	rjmp	.+510    	; 0x1b33a <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b13c:	b7 01       	movw	r22, r14
   1b13e:	09 d8       	rcall	.-4078   	; 0x1a152 <lif_find_file>
    if(index == -1)
   1b140:	01 96       	adiw	r24, 0x01	; 1
   1b142:	a1 f4       	brne	.+40     	; 0x1b16c <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b144:	ed b7       	in	r30, 0x3d	; 61
   1b146:	fe b7       	in	r31, 0x3e	; 62
   1b148:	f5 82       	std	Z+5, r15	; 0x05
   1b14a:	e4 82       	std	Z+4, r14	; 0x04
   1b14c:	81 eb       	ldi	r24, 0xB1	; 177
   1b14e:	9f e2       	ldi	r25, 0x2F	; 47
   1b150:	a0 e0       	ldi	r26, 0x00	; 0
   1b152:	81 83       	std	Z+1, r24	; 0x01
   1b154:	92 83       	std	Z+2, r25	; 0x02
   1b156:	a3 83       	std	Z+3, r26	; 0x03
   1b158:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b15c:	c6 01       	movw	r24, r12
   1b15e:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b162:	60 e0       	ldi	r22, 0x00	; 0
   1b164:	70 e0       	ldi	r23, 0x00	; 0
   1b166:	80 e0       	ldi	r24, 0x00	; 0
   1b168:	90 e0       	ldi	r25, 0x00	; 0
   1b16a:	ff c0       	rjmp	.+510    	; 0x1b36a <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b16c:	6a ed       	ldi	r22, 0xDA	; 218
   1b16e:	78 e0       	ldi	r23, 0x08	; 8
   1b170:	c5 01       	movw	r24, r10
   1b172:	0e 94 da cd 	call	0x19bb4	; 0x19bb4 <lif_open_volume>
   1b176:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b178:	00 97       	sbiw	r24, 0x00	; 0
   1b17a:	09 f4       	brne	.+2      	; 0x1b17e <lif_add_lif_file+0xf4>
   1b17c:	de c0       	rjmp	.+444    	; 0x1b33a <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b17e:	f6 01       	movw	r30, r12
   1b180:	e0 5a       	subi	r30, 0xA0	; 160
   1b182:	ff 4f       	sbci	r31, 0xFF	; 255
   1b184:	40 81       	ld	r20, Z
   1b186:	51 81       	ldd	r21, Z+1	; 0x01
   1b188:	62 81       	ldd	r22, Z+2	; 0x02
   1b18a:	73 81       	ldd	r23, Z+3	; 0x03
   1b18c:	0e 94 7a cc 	call	0x198f4	; 0x198f4 <lif_newdir>
   1b190:	ca 5e       	subi	r28, 0xEA	; 234
   1b192:	de 4f       	sbci	r29, 0xFE	; 254
   1b194:	99 83       	std	Y+1, r25	; 0x01
   1b196:	88 83       	st	Y, r24
   1b198:	c6 51       	subi	r28, 0x16	; 22
   1b19a:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b19c:	01 96       	adiw	r24, 0x01	; 1
   1b19e:	79 f4       	brne	.+30     	; 0x1b1be <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b1a0:	ed b7       	in	r30, 0x3d	; 61
   1b1a2:	fe b7       	in	r31, 0x3e	; 62
   1b1a4:	97 82       	std	Z+7, r9	; 0x07
   1b1a6:	86 82       	std	Z+6, r8	; 0x06
   1b1a8:	b5 82       	std	Z+5, r11	; 0x05
   1b1aa:	a4 82       	std	Z+4, r10	; 0x04
   1b1ac:	81 e8       	ldi	r24, 0x81	; 129
   1b1ae:	9f e2       	ldi	r25, 0x2F	; 47
   1b1b0:	a0 e0       	ldi	r26, 0x00	; 0
   1b1b2:	81 83       	std	Z+1, r24	; 0x01
   1b1b4:	92 83       	std	Z+2, r25	; 0x02
   1b1b6:	a3 83       	std	Z+3, r26	; 0x03
   1b1b8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1b1bc:	a8 c0       	rjmp	.+336    	; 0x1b30e <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b1be:	c7 01       	movw	r24, r14
   1b1c0:	84 5a       	subi	r24, 0xA4	; 164
   1b1c2:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1c4:	dc 01       	movw	r26, r24
   1b1c6:	4d 91       	ld	r20, X+
   1b1c8:	5d 91       	ld	r21, X+
   1b1ca:	6d 91       	ld	r22, X+
   1b1cc:	7c 91       	ld	r23, X
   1b1ce:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b1d0:	21 e2       	ldi	r18, 0x21	; 33
   1b1d2:	f6 01       	movw	r30, r12
   1b1d4:	e1 5b       	subi	r30, 0xB1	; 177
   1b1d6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1d8:	1d 97       	sbiw	r26, 0x0d	; 13
   1b1da:	01 90       	ld	r0, Z+
   1b1dc:	0d 92       	st	X+, r0
   1b1de:	2a 95       	dec	r18
   1b1e0:	e1 f7       	brne	.-8      	; 0x1b1da <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b1e2:	fc 01       	movw	r30, r24
   1b1e4:	40 83       	st	Z, r20
   1b1e6:	51 83       	std	Z+1, r21	; 0x01
   1b1e8:	62 83       	std	Z+2, r22	; 0x02
   1b1ea:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b1ec:	b6 2f       	mov	r27, r22
   1b1ee:	a5 2f       	mov	r26, r21
   1b1f0:	94 2f       	mov	r25, r20
   1b1f2:	88 27       	eor	r24, r24
   1b1f4:	c2 5f       	subi	r28, 0xF2	; 242
   1b1f6:	de 4f       	sbci	r29, 0xFE	; 254
   1b1f8:	88 83       	st	Y, r24
   1b1fa:	99 83       	std	Y+1, r25	; 0x01
   1b1fc:	aa 83       	std	Y+2, r26	; 0x02
   1b1fe:	bb 83       	std	Y+3, r27	; 0x03
   1b200:	ce 50       	subi	r28, 0x0E	; 14
   1b202:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b204:	f6 01       	movw	r30, r12
   1b206:	e4 5a       	subi	r30, 0xA4	; 164
   1b208:	ff 4f       	sbci	r31, 0xFF	; 255
   1b20a:	80 81       	ld	r24, Z
   1b20c:	91 81       	ldd	r25, Z+1	; 0x01
   1b20e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b210:	b3 81       	ldd	r27, Z+3	; 0x03
   1b212:	22 27       	eor	r18, r18
   1b214:	38 2f       	mov	r19, r24
   1b216:	49 2f       	mov	r20, r25
   1b218:	5a 2f       	mov	r21, r26
   1b21a:	ce 5e       	subi	r28, 0xEE	; 238
   1b21c:	de 4f       	sbci	r29, 0xFE	; 254
   1b21e:	28 83       	st	Y, r18
   1b220:	39 83       	std	Y+1, r19	; 0x01
   1b222:	4a 83       	std	Y+2, r20	; 0x02
   1b224:	5b 83       	std	Y+3, r21	; 0x03
   1b226:	c2 51       	subi	r28, 0x12	; 18
   1b228:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b22a:	21 2c       	mov	r2, r1
   1b22c:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b22e:	81 2c       	mov	r8, r1
   1b230:	91 2c       	mov	r9, r1
   1b232:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b234:	a7 01       	movw	r20, r14
   1b236:	40 5a       	subi	r20, 0xA0	; 160
   1b238:	5f 4f       	sbci	r21, 0xFF	; 255
   1b23a:	c4 5e       	subi	r28, 0xE4	; 228
   1b23c:	de 4f       	sbci	r29, 0xFE	; 254
   1b23e:	59 83       	std	Y+1, r21	; 0x01
   1b240:	48 83       	st	Y, r20
   1b242:	cc 51       	subi	r28, 0x1C	; 28
   1b244:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b246:	83 e7       	ldi	r24, 0x73	; 115
   1b248:	9f e2       	ldi	r25, 0x2F	; 47
   1b24a:	2c 01       	movw	r4, r24
   1b24c:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b24e:	27 c0       	rjmp	.+78     	; 0x1b29e <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b250:	00 e0       	ldi	r16, 0x00	; 0
   1b252:	11 e0       	ldi	r17, 0x01	; 1
   1b254:	c8 5e       	subi	r28, 0xE8	; 232
   1b256:	de 4f       	sbci	r29, 0xFE	; 254
   1b258:	28 81       	ld	r18, Y
   1b25a:	39 81       	ldd	r19, Y+1	; 0x01
   1b25c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b25e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b260:	c8 51       	subi	r28, 0x18	; 24
   1b262:	d1 40       	sbci	r29, 0x01	; 1
   1b264:	be 01       	movw	r22, r28
   1b266:	66 5f       	subi	r22, 0xF6	; 246
   1b268:	7f 4f       	sbci	r23, 0xFF	; 255
   1b26a:	c7 01       	movw	r24, r14
   1b26c:	0e 94 c4 be 	call	0x17d88	; 0x17d88 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b270:	8f 3f       	cpi	r24, 0xFF	; 255
   1b272:	91 05       	cpc	r25, r1
   1b274:	09 f0       	breq	.+2      	; 0x1b278 <lif_add_lif_file+0x1ee>
   1b276:	0c f4       	brge	.+2      	; 0x1b27a <lif_add_lif_file+0x1f0>
   1b278:	4a c0       	rjmp	.+148    	; 0x1b30e <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b27a:	5f ef       	ldi	r21, 0xFF	; 255
   1b27c:	95 1a       	sub	r9, r21
   1b27e:	a5 0a       	sbc	r10, r21
   1b280:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b282:	ed b7       	in	r30, 0x3d	; 61
   1b284:	fe b7       	in	r31, 0x3e	; 62
   1b286:	84 82       	std	Z+4, r8	; 0x04
   1b288:	95 82       	std	Z+5, r9	; 0x05
   1b28a:	a6 82       	std	Z+6, r10	; 0x06
   1b28c:	b7 82       	std	Z+7, r11	; 0x07
   1b28e:	41 82       	std	Z+1, r4	; 0x01
   1b290:	52 82       	std	Z+2, r5	; 0x02
   1b292:	63 82       	std	Z+3, r6	; 0x03
   1b294:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b298:	ff ef       	ldi	r31, 0xFF	; 255
   1b29a:	2f 1a       	sub	r2, r31
   1b29c:	3f 0a       	sbc	r3, r31
   1b29e:	ce 5e       	subi	r28, 0xEE	; 238
   1b2a0:	de 4f       	sbci	r29, 0xFE	; 254
   1b2a2:	28 81       	ld	r18, Y
   1b2a4:	39 81       	ldd	r19, Y+1	; 0x01
   1b2a6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2a8:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2aa:	c2 51       	subi	r28, 0x12	; 18
   1b2ac:	d1 40       	sbci	r29, 0x01	; 1
   1b2ae:	28 0d       	add	r18, r8
   1b2b0:	39 1d       	adc	r19, r9
   1b2b2:	4a 1d       	adc	r20, r10
   1b2b4:	5b 1d       	adc	r21, r11
   1b2b6:	c2 5f       	subi	r28, 0xF2	; 242
   1b2b8:	de 4f       	sbci	r29, 0xFE	; 254
   1b2ba:	88 81       	ld	r24, Y
   1b2bc:	99 81       	ldd	r25, Y+1	; 0x01
   1b2be:	aa 81       	ldd	r26, Y+2	; 0x02
   1b2c0:	bb 81       	ldd	r27, Y+3	; 0x03
   1b2c2:	ce 50       	subi	r28, 0x0E	; 14
   1b2c4:	d1 40       	sbci	r29, 0x01	; 1
   1b2c6:	88 0d       	add	r24, r8
   1b2c8:	99 1d       	adc	r25, r9
   1b2ca:	aa 1d       	adc	r26, r10
   1b2cc:	bb 1d       	adc	r27, r11
   1b2ce:	c8 5e       	subi	r28, 0xE8	; 232
   1b2d0:	de 4f       	sbci	r29, 0xFE	; 254
   1b2d2:	88 83       	st	Y, r24
   1b2d4:	99 83       	std	Y+1, r25	; 0x01
   1b2d6:	aa 83       	std	Y+2, r26	; 0x02
   1b2d8:	bb 83       	std	Y+3, r27	; 0x03
   1b2da:	c8 51       	subi	r28, 0x18	; 24
   1b2dc:	d1 40       	sbci	r29, 0x01	; 1
   1b2de:	c4 5e       	subi	r28, 0xE4	; 228
   1b2e0:	de 4f       	sbci	r29, 0xFE	; 254
   1b2e2:	a8 81       	ld	r26, Y
   1b2e4:	b9 81       	ldd	r27, Y+1	; 0x01
   1b2e6:	cc 51       	subi	r28, 0x1C	; 28
   1b2e8:	d1 40       	sbci	r29, 0x01	; 1
   1b2ea:	8d 91       	ld	r24, X+
   1b2ec:	9c 91       	ld	r25, X
   1b2ee:	28 16       	cp	r2, r24
   1b2f0:	39 06       	cpc	r3, r25
   1b2f2:	94 f4       	brge	.+36     	; 0x1b318 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b2f4:	00 e0       	ldi	r16, 0x00	; 0
   1b2f6:	11 e0       	ldi	r17, 0x01	; 1
   1b2f8:	be 01       	movw	r22, r28
   1b2fa:	66 5f       	subi	r22, 0xF6	; 246
   1b2fc:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2fe:	c6 01       	movw	r24, r12
   1b300:	0e 94 73 be 	call	0x17ce6	; 0x17ce6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b304:	6f 3f       	cpi	r22, 0xFF	; 255
   1b306:	71 05       	cpc	r23, r1
   1b308:	11 f0       	breq	.+4      	; 0x1b30e <lif_add_lif_file+0x284>
   1b30a:	0c f0       	brlt	.+2      	; 0x1b30e <lif_add_lif_file+0x284>
   1b30c:	a1 cf       	rjmp	.-190    	; 0x1b250 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b30e:	c7 01       	movw	r24, r14
   1b310:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1b314:	c6 01       	movw	r24, r12
   1b316:	0f c0       	rjmp	.+30     	; 0x1b336 <lif_add_lif_file+0x2ac>
   1b318:	c6 01       	movw	r24, r12
   1b31a:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b31e:	ca 5e       	subi	r28, 0xEA	; 234
   1b320:	de 4f       	sbci	r29, 0xFE	; 254
   1b322:	68 81       	ld	r22, Y
   1b324:	79 81       	ldd	r23, Y+1	; 0x01
   1b326:	c6 51       	subi	r28, 0x16	; 22
   1b328:	d1 40       	sbci	r29, 0x01	; 1
   1b32a:	c7 01       	movw	r24, r14
   1b32c:	0e 94 14 c8 	call	0x19028	; 0x19028 <lif_writedirindex>
   1b330:	89 2b       	or	r24, r25
   1b332:	41 f4       	brne	.+16     	; 0x1b344 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b334:	c7 01       	movw	r24, r14
   1b336:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b33a:	6f ef       	ldi	r22, 0xFF	; 255
   1b33c:	7f ef       	ldi	r23, 0xFF	; 255
   1b33e:	8f ef       	ldi	r24, 0xFF	; 255
   1b340:	9f ef       	ldi	r25, 0xFF	; 255
   1b342:	13 c0       	rjmp	.+38     	; 0x1b36a <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b344:	c7 01       	movw	r24, r14
   1b346:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b34a:	ed b7       	in	r30, 0x3d	; 61
   1b34c:	fe b7       	in	r31, 0x3e	; 62
   1b34e:	84 82       	std	Z+4, r8	; 0x04
   1b350:	95 82       	std	Z+5, r9	; 0x05
   1b352:	a6 82       	std	Z+6, r10	; 0x06
   1b354:	b7 82       	std	Z+7, r11	; 0x07
   1b356:	85 e6       	ldi	r24, 0x65	; 101
   1b358:	9f e2       	ldi	r25, 0x2F	; 47
   1b35a:	a0 e0       	ldi	r26, 0x00	; 0
   1b35c:	81 83       	std	Z+1, r24	; 0x01
   1b35e:	92 83       	std	Z+2, r25	; 0x02
   1b360:	a3 83       	std	Z+3, r26	; 0x03
   1b362:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(bytes);
   1b366:	b4 01       	movw	r22, r8
   1b368:	c5 01       	movw	r24, r10
}
   1b36a:	c3 5e       	subi	r28, 0xE3	; 227
   1b36c:	de 4f       	sbci	r29, 0xFE	; 254
   1b36e:	0f b6       	in	r0, 0x3f	; 63
   1b370:	f8 94       	cli
   1b372:	de bf       	out	0x3e, r29	; 62
   1b374:	0f be       	out	0x3f, r0	; 63
   1b376:	cd bf       	out	0x3d, r28	; 61
   1b378:	df 91       	pop	r29
   1b37a:	cf 91       	pop	r28
   1b37c:	1f 91       	pop	r17
   1b37e:	0f 91       	pop	r16
   1b380:	ff 90       	pop	r15
   1b382:	ef 90       	pop	r14
   1b384:	df 90       	pop	r13
   1b386:	cf 90       	pop	r12
   1b388:	bf 90       	pop	r11
   1b38a:	af 90       	pop	r10
   1b38c:	9f 90       	pop	r9
   1b38e:	8f 90       	pop	r8
   1b390:	6f 90       	pop	r6
   1b392:	5f 90       	pop	r5
   1b394:	4f 90       	pop	r4
   1b396:	3f 90       	pop	r3
   1b398:	2f 90       	pop	r2
   1b39a:	08 95       	ret

0001b39c <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b39c:	ef 92       	push	r14
   1b39e:	ff 92       	push	r15
   1b3a0:	0f 93       	push	r16
   1b3a2:	1f 93       	push	r17
   1b3a4:	cf 93       	push	r28
   1b3a6:	df 93       	push	r29
   1b3a8:	ad b7       	in	r26, 0x3d	; 61
   1b3aa:	be b7       	in	r27, 0x3e	; 62
   1b3ac:	17 97       	sbiw	r26, 0x07	; 7
   1b3ae:	0f b6       	in	r0, 0x3f	; 63
   1b3b0:	f8 94       	cli
   1b3b2:	be bf       	out	0x3e, r27	; 62
   1b3b4:	0f be       	out	0x3f, r0	; 63
   1b3b6:	ad bf       	out	0x3d, r26	; 61
   1b3b8:	7c 01       	movw	r14, r24
   1b3ba:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b3bc:	fc 01       	movw	r30, r24
   1b3be:	80 81       	ld	r24, Z
   1b3c0:	81 11       	cpse	r24, r1
   1b3c2:	03 c0       	rjmp	.+6      	; 0x1b3ca <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b3c4:	80 e4       	ldi	r24, 0x40	; 64
   1b3c6:	9f e2       	ldi	r25, 0x2F	; 47
   1b3c8:	06 c0       	rjmp	.+12     	; 0x1b3d6 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b3ca:	fb 01       	movw	r30, r22
   1b3cc:	80 81       	ld	r24, Z
   1b3ce:	81 11       	cpse	r24, r1
   1b3d0:	0b c0       	rjmp	.+22     	; 0x1b3e8 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b3d2:	80 e2       	ldi	r24, 0x20	; 32
   1b3d4:	9f e2       	ldi	r25, 0x2F	; 47
   1b3d6:	a0 e0       	ldi	r26, 0x00	; 0
   1b3d8:	ed b7       	in	r30, 0x3d	; 61
   1b3da:	fe b7       	in	r31, 0x3e	; 62
   1b3dc:	81 83       	std	Z+1, r24	; 0x01
   1b3de:	92 83       	std	Z+2, r25	; 0x02
   1b3e0:	a3 83       	std	Z+3, r26	; 0x03
   1b3e2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1b3e6:	68 c0       	rjmp	.+208    	; 0x1b4b8 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b3e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b3ec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b3f0:	92 ff       	sbrs	r25, 2
   1b3f2:	0e c0       	rjmp	.+28     	; 0x1b410 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b3f4:	ed b7       	in	r30, 0x3d	; 61
   1b3f6:	fe b7       	in	r31, 0x3e	; 62
   1b3f8:	77 83       	std	Z+7, r23	; 0x07
   1b3fa:	66 83       	std	Z+6, r22	; 0x06
   1b3fc:	f5 82       	std	Z+5, r15	; 0x05
   1b3fe:	e4 82       	std	Z+4, r14	; 0x04
   1b400:	81 e0       	ldi	r24, 0x01	; 1
   1b402:	9f e2       	ldi	r25, 0x2F	; 47
   1b404:	a0 e0       	ldi	r26, 0x00	; 0
   1b406:	81 83       	std	Z+1, r24	; 0x01
   1b408:	92 83       	std	Z+2, r25	; 0x02
   1b40a:	a3 83       	std	Z+3, r26	; 0x03
   1b40c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b410:	6a ed       	ldi	r22, 0xDA	; 218
   1b412:	78 e0       	ldi	r23, 0x08	; 8
   1b414:	c7 01       	movw	r24, r14
   1b416:	0e 94 da cd 	call	0x19bb4	; 0x19bb4 <lif_open_volume>
   1b41a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b41c:	00 97       	sbiw	r24, 0x00	; 0
   1b41e:	09 f4       	brne	.+2      	; 0x1b422 <lif_del_file+0x86>
   1b420:	4b c0       	rjmp	.+150    	; 0x1b4b8 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b422:	b8 01       	movw	r22, r16
   1b424:	0e 94 a9 d0 	call	0x1a152	; 0x1a152 <lif_find_file>
    if(index == -1)
   1b428:	8f 3f       	cpi	r24, 0xFF	; 255
   1b42a:	ff ef       	ldi	r31, 0xFF	; 255
   1b42c:	9f 07       	cpc	r25, r31
   1b42e:	a1 f4       	brne	.+40     	; 0x1b458 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b430:	ce 01       	movw	r24, r28
   1b432:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b436:	ed b7       	in	r30, 0x3d	; 61
   1b438:	fe b7       	in	r31, 0x3e	; 62
   1b43a:	17 83       	std	Z+7, r17	; 0x07
   1b43c:	06 83       	std	Z+6, r16	; 0x06
   1b43e:	f5 82       	std	Z+5, r15	; 0x05
   1b440:	e4 82       	std	Z+4, r14	; 0x04
   1b442:	89 ed       	ldi	r24, 0xD9	; 217
   1b444:	9e e2       	ldi	r25, 0x2E	; 46
   1b446:	a0 e0       	ldi	r26, 0x00	; 0
   1b448:	81 83       	std	Z+1, r24	; 0x01
   1b44a:	92 83       	std	Z+2, r25	; 0x02
   1b44c:	a3 83       	std	Z+3, r26	; 0x03
   1b44e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        return(0);
   1b452:	80 e0       	ldi	r24, 0x00	; 0
   1b454:	90 e0       	ldi	r25, 0x00	; 0
   1b456:	32 c0       	rjmp	.+100    	; 0x1b4bc <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b458:	2a a1       	ldd	r18, Y+34	; 0x22
   1b45a:	3b a1       	ldd	r19, Y+35	; 0x23
   1b45c:	21 50       	subi	r18, 0x01	; 1
   1b45e:	31 09       	sbc	r19, r1
   1b460:	fe 01       	movw	r30, r28
   1b462:	e6 5a       	subi	r30, 0xA6	; 166
   1b464:	ff 4f       	sbci	r31, 0xFF	; 255
   1b466:	82 17       	cp	r24, r18
   1b468:	93 07       	cpc	r25, r19
   1b46a:	2c f0       	brlt	.+10     	; 0x1b476 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b46c:	2f ef       	ldi	r18, 0xFF	; 255
   1b46e:	3f ef       	ldi	r19, 0xFF	; 255
   1b470:	31 83       	std	Z+1, r19	; 0x01
   1b472:	20 83       	st	Z, r18
   1b474:	02 c0       	rjmp	.+4      	; 0x1b47a <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b476:	11 82       	std	Z+1, r1	; 0x01
   1b478:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b47a:	bc 01       	movw	r22, r24
   1b47c:	ce 01       	movw	r24, r28
   1b47e:	0e 94 14 c8 	call	0x19028	; 0x19028 <lif_writedirindex>
   1b482:	89 2b       	or	r24, r25
   1b484:	21 f4       	brne	.+8      	; 0x1b48e <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b486:	ce 01       	movw	r24, r28
   1b488:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1b48c:	15 c0       	rjmp	.+42     	; 0x1b4b8 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b48e:	ce 01       	movw	r24, r28
   1b490:	0e 94 88 c8 	call	0x19110	; 0x19110 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b494:	ce 01       	movw	r24, r28
   1b496:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b49a:	ed b7       	in	r30, 0x3d	; 61
   1b49c:	fe b7       	in	r31, 0x3e	; 62
   1b49e:	15 83       	std	Z+5, r17	; 0x05
   1b4a0:	04 83       	std	Z+4, r16	; 0x04
   1b4a2:	8a ec       	ldi	r24, 0xCA	; 202
   1b4a4:	9e e2       	ldi	r25, 0x2E	; 46
   1b4a6:	a0 e0       	ldi	r26, 0x00	; 0
   1b4a8:	81 83       	std	Z+1, r24	; 0x01
   1b4aa:	92 83       	std	Z+2, r25	; 0x02
   1b4ac:	a3 83       	std	Z+3, r26	; 0x03
   1b4ae:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    return(1);
   1b4b2:	81 e0       	ldi	r24, 0x01	; 1
   1b4b4:	90 e0       	ldi	r25, 0x00	; 0
   1b4b6:	02 c0       	rjmp	.+4      	; 0x1b4bc <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b4b8:	8f ef       	ldi	r24, 0xFF	; 255
   1b4ba:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b4bc:	cd b7       	in	r28, 0x3d	; 61
   1b4be:	de b7       	in	r29, 0x3e	; 62
   1b4c0:	27 96       	adiw	r28, 0x07	; 7
   1b4c2:	e6 e0       	ldi	r30, 0x06	; 6
   1b4c4:	56 c6       	rjmp	.+3244   	; 0x1c172 <__epilogue_restores__+0x18>

0001b4c6 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b4c6:	a7 e0       	ldi	r26, 0x07	; 7
   1b4c8:	b0 e0       	ldi	r27, 0x00	; 0
   1b4ca:	e8 e6       	ldi	r30, 0x68	; 104
   1b4cc:	fa ed       	ldi	r31, 0xDA	; 218
   1b4ce:	31 c6       	rjmp	.+3170   	; 0x1c132 <__prologue_saves__+0x10>
   1b4d0:	6c 01       	movw	r12, r24
   1b4d2:	8b 01       	movw	r16, r22
   1b4d4:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b4d6:	fc 01       	movw	r30, r24
   1b4d8:	80 81       	ld	r24, Z
   1b4da:	81 11       	cpse	r24, r1
   1b4dc:	03 c0       	rjmp	.+6      	; 0x1b4e4 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b4de:	82 ea       	ldi	r24, 0xA2	; 162
   1b4e0:	9e e2       	ldi	r25, 0x2E	; 46
   1b4e2:	06 c0       	rjmp	.+12     	; 0x1b4f0 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b4e4:	fb 01       	movw	r30, r22
   1b4e6:	80 81       	ld	r24, Z
   1b4e8:	81 11       	cpse	r24, r1
   1b4ea:	0b c0       	rjmp	.+22     	; 0x1b502 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b4ec:	8b e7       	ldi	r24, 0x7B	; 123
   1b4ee:	9e e2       	ldi	r25, 0x2E	; 46
   1b4f0:	a0 e0       	ldi	r26, 0x00	; 0
   1b4f2:	ed b7       	in	r30, 0x3d	; 61
   1b4f4:	fe b7       	in	r31, 0x3e	; 62
   1b4f6:	81 83       	std	Z+1, r24	; 0x01
   1b4f8:	92 83       	std	Z+2, r25	; 0x02
   1b4fa:	a3 83       	std	Z+3, r26	; 0x03
   1b4fc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1b500:	58 c0       	rjmp	.+176    	; 0x1b5b2 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b502:	fa 01       	movw	r30, r20
   1b504:	80 81       	ld	r24, Z
   1b506:	81 11       	cpse	r24, r1
   1b508:	03 c0       	rjmp	.+6      	; 0x1b510 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b50a:	84 e5       	ldi	r24, 0x54	; 84
   1b50c:	9e e2       	ldi	r25, 0x2E	; 46
   1b50e:	f0 cf       	rjmp	.-32     	; 0x1b4f0 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b510:	ca 01       	movw	r24, r20
   1b512:	0e 94 8a bf 	call	0x17f14	; 0x17f14 <lif_checkname>
   1b516:	89 2b       	or	r24, r25
   1b518:	19 f4       	brne	.+6      	; 0x1b520 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b51a:	8e e1       	ldi	r24, 0x1E	; 30
   1b51c:	9e e2       	ldi	r25, 0x2E	; 46
   1b51e:	e8 cf       	rjmp	.-48     	; 0x1b4f0 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b520:	6a ed       	ldi	r22, 0xDA	; 218
   1b522:	78 e0       	ldi	r23, 0x08	; 8
   1b524:	c6 01       	movw	r24, r12
   1b526:	0e 94 da cd 	call	0x19bb4	; 0x19bb4 <lif_open_volume>
   1b52a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b52c:	00 97       	sbiw	r24, 0x00	; 0
   1b52e:	09 f4       	brne	.+2      	; 0x1b532 <lif_rename_file+0x6c>
   1b530:	40 c0       	rjmp	.+128    	; 0x1b5b2 <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b532:	b8 01       	movw	r22, r16
   1b534:	0e 94 a9 d0 	call	0x1a152	; 0x1a152 <lif_find_file>
   1b538:	5c 01       	movw	r10, r24
    if(index == -1)
   1b53a:	01 96       	adiw	r24, 0x01	; 1
   1b53c:	a1 f4       	brne	.+40     	; 0x1b566 <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b53e:	ed b7       	in	r30, 0x3d	; 61
   1b540:	fe b7       	in	r31, 0x3e	; 62
   1b542:	17 83       	std	Z+7, r17	; 0x07
   1b544:	06 83       	std	Z+6, r16	; 0x06
   1b546:	d5 82       	std	Z+5, r13	; 0x05
   1b548:	c4 82       	std	Z+4, r12	; 0x04
   1b54a:	85 ef       	ldi	r24, 0xF5	; 245
   1b54c:	9d e2       	ldi	r25, 0x2D	; 45
   1b54e:	a0 e0       	ldi	r26, 0x00	; 0
   1b550:	81 83       	std	Z+1, r24	; 0x01
   1b552:	92 83       	std	Z+2, r25	; 0x02
   1b554:	a3 83       	std	Z+3, r26	; 0x03
   1b556:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b55a:	ce 01       	movw	r24, r28
   1b55c:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b560:	80 e0       	ldi	r24, 0x00	; 0
   1b562:	90 e0       	ldi	r25, 0x00	; 0
   1b564:	28 c0       	rjmp	.+80     	; 0x1b5b6 <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b566:	4a e0       	ldi	r20, 0x0A	; 10
   1b568:	50 e0       	ldi	r21, 0x00	; 0
   1b56a:	b7 01       	movw	r22, r14
   1b56c:	ce 01       	movw	r24, r28
   1b56e:	81 5b       	subi	r24, 0xB1	; 177
   1b570:	9f 4f       	sbci	r25, 0xFF	; 255
   1b572:	0e 94 c4 bf 	call	0x17f88	; 0x17f88 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b576:	b5 01       	movw	r22, r10
   1b578:	ce 01       	movw	r24, r28
   1b57a:	0e 94 14 c8 	call	0x19028	; 0x19028 <lif_writedirindex>
   1b57e:	89 2b       	or	r24, r25
   1b580:	21 f4       	brne	.+8      	; 0x1b58a <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b582:	ce 01       	movw	r24, r28
   1b584:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
   1b588:	14 c0       	rjmp	.+40     	; 0x1b5b2 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b58a:	ed b7       	in	r30, 0x3d	; 61
   1b58c:	fe b7       	in	r31, 0x3e	; 62
   1b58e:	f7 82       	std	Z+7, r15	; 0x07
   1b590:	e6 82       	std	Z+6, r14	; 0x06
   1b592:	15 83       	std	Z+5, r17	; 0x05
   1b594:	04 83       	std	Z+4, r16	; 0x04
   1b596:	8e ed       	ldi	r24, 0xDE	; 222
   1b598:	9d e2       	ldi	r25, 0x2D	; 45
   1b59a:	a0 e0       	ldi	r26, 0x00	; 0
   1b59c:	81 83       	std	Z+1, r24	; 0x01
   1b59e:	92 83       	std	Z+2, r25	; 0x02
   1b5a0:	a3 83       	std	Z+3, r26	; 0x03
   1b5a2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5a6:	ce 01       	movw	r24, r28
   1b5a8:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b5ac:	81 e0       	ldi	r24, 0x01	; 1
   1b5ae:	90 e0       	ldi	r25, 0x00	; 0
   1b5b0:	02 c0       	rjmp	.+4      	; 0x1b5b6 <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b5b2:	8f ef       	ldi	r24, 0xFF	; 255
   1b5b4:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b5b6:	cd b7       	in	r28, 0x3d	; 61
   1b5b8:	de b7       	in	r29, 0x3e	; 62
   1b5ba:	27 96       	adiw	r28, 0x07	; 7
   1b5bc:	ea e0       	ldi	r30, 0x0A	; 10
   1b5be:	d5 c5       	rjmp	.+2986   	; 0x1c16a <__epilogue_restores__+0x10>

0001b5c0 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b5c0:	4f 92       	push	r4
   1b5c2:	5f 92       	push	r5
   1b5c4:	6f 92       	push	r6
   1b5c6:	7f 92       	push	r7
   1b5c8:	af 92       	push	r10
   1b5ca:	bf 92       	push	r11
   1b5cc:	cf 92       	push	r12
   1b5ce:	df 92       	push	r13
   1b5d0:	ef 92       	push	r14
   1b5d2:	ff 92       	push	r15
   1b5d4:	0f 93       	push	r16
   1b5d6:	1f 93       	push	r17
   1b5d8:	cf 93       	push	r28
   1b5da:	df 93       	push	r29
   1b5dc:	ad b7       	in	r26, 0x3d	; 61
   1b5de:	be b7       	in	r27, 0x3e	; 62
   1b5e0:	17 97       	sbiw	r26, 0x07	; 7
   1b5e2:	0f b6       	in	r0, 0x3f	; 63
   1b5e4:	f8 94       	cli
   1b5e6:	be bf       	out	0x3e, r27	; 62
   1b5e8:	0f be       	out	0x3f, r0	; 63
   1b5ea:	ad bf       	out	0x3d, r26	; 61
   1b5ec:	27 01       	movw	r4, r14
   1b5ee:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b5f0:	dc 01       	movw	r26, r24
   1b5f2:	ec 91       	ld	r30, X
   1b5f4:	e1 11       	cpse	r30, r1
   1b5f6:	03 c0       	rjmp	.+6      	; 0x1b5fe <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b5f8:	85 eb       	ldi	r24, 0xB5	; 181
   1b5fa:	9d e2       	ldi	r25, 0x2D	; 45
   1b5fc:	16 c0       	rjmp	.+44     	; 0x1b62a <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b5fe:	db 01       	movw	r26, r22
   1b600:	ec 91       	ld	r30, X
   1b602:	e1 11       	cpse	r30, r1
   1b604:	03 c0       	rjmp	.+6      	; 0x1b60c <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b606:	80 e9       	ldi	r24, 0x90	; 144
   1b608:	9d e2       	ldi	r25, 0x2D	; 45
   1b60a:	0f c0       	rjmp	.+30     	; 0x1b62a <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b60c:	21 15       	cp	r18, r1
   1b60e:	31 05       	cpc	r19, r1
   1b610:	41 05       	cpc	r20, r1
   1b612:	51 05       	cpc	r21, r1
   1b614:	19 f4       	brne	.+6      	; 0x1b61c <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b616:	8d e6       	ldi	r24, 0x6D	; 109
   1b618:	9d e2       	ldi	r25, 0x2D	; 45
   1b61a:	07 c0       	rjmp	.+14     	; 0x1b62a <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b61c:	e1 14       	cp	r14, r1
   1b61e:	f1 04       	cpc	r15, r1
   1b620:	01 05       	cpc	r16, r1
   1b622:	11 05       	cpc	r17, r1
   1b624:	59 f4       	brne	.+22     	; 0x1b63c <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b626:	8d e4       	ldi	r24, 0x4D	; 77
   1b628:	9d e2       	ldi	r25, 0x2D	; 45
   1b62a:	a0 e0       	ldi	r26, 0x00	; 0
   1b62c:	ed b7       	in	r30, 0x3d	; 61
   1b62e:	fe b7       	in	r31, 0x3e	; 62
   1b630:	81 83       	std	Z+1, r24	; 0x01
   1b632:	92 83       	std	Z+2, r25	; 0x02
   1b634:	a3 83       	std	Z+3, r26	; 0x03
   1b636:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1b63a:	2b c0       	rjmp	.+86     	; 0x1b692 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b63c:	67 01       	movw	r12, r14
   1b63e:	78 01       	movw	r14, r16
   1b640:	f2 e0       	ldi	r31, 0x02	; 2
   1b642:	cf 1a       	sub	r12, r31
   1b644:	d1 08       	sbc	r13, r1
   1b646:	e1 08       	sbc	r14, r1
   1b648:	f1 08       	sbc	r15, r1
   1b64a:	56 01       	movw	r10, r12
   1b64c:	67 01       	movw	r12, r14
   1b64e:	a2 1a       	sub	r10, r18
   1b650:	b3 0a       	sbc	r11, r19
   1b652:	c4 0a       	sbc	r12, r20
   1b654:	d5 0a       	sbc	r13, r21
   1b656:	79 01       	movw	r14, r18
   1b658:	8a 01       	movw	r16, r20
   1b65a:	22 e0       	ldi	r18, 0x02	; 2
   1b65c:	30 e0       	ldi	r19, 0x00	; 0
   1b65e:	40 e0       	ldi	r20, 0x00	; 0
   1b660:	50 e0       	ldi	r21, 0x00	; 0
   1b662:	0e 94 90 c9 	call	0x19320	; 0x19320 <lif_create_volume>
    if(LIF == NULL)
   1b666:	00 97       	sbiw	r24, 0x00	; 0
   1b668:	a1 f0       	breq	.+40     	; 0x1b692 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b66a:	0e 94 1f c7 	call	0x18e3e	; 0x18e3e <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b66e:	82 01       	movw	r16, r4
   1b670:	d6 2d       	mov	r29, r6
   1b672:	c7 2d       	mov	r28, r7
   1b674:	ed b7       	in	r30, 0x3d	; 61
   1b676:	fe b7       	in	r31, 0x3e	; 62
   1b678:	44 82       	std	Z+4, r4	; 0x04
   1b67a:	15 83       	std	Z+5, r17	; 0x05
   1b67c:	66 82       	std	Z+6, r6	; 0x06
   1b67e:	77 82       	std	Z+7, r7	; 0x07
   1b680:	8d e2       	ldi	r24, 0x2D	; 45
   1b682:	9d e2       	ldi	r25, 0x2D	; 45
   1b684:	a0 e0       	ldi	r26, 0x00	; 0
   1b686:	81 83       	std	Z+1, r24	; 0x01
   1b688:	92 83       	std	Z+2, r25	; 0x02
   1b68a:	a3 83       	std	Z+3, r26	; 0x03
   1b68c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    return(end);
   1b690:	04 c0       	rjmp	.+8      	; 0x1b69a <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b692:	0f ef       	ldi	r16, 0xFF	; 255
   1b694:	1f ef       	ldi	r17, 0xFF	; 255
   1b696:	df ef       	ldi	r29, 0xFF	; 255
   1b698:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b69a:	b8 01       	movw	r22, r16
   1b69c:	8d 2f       	mov	r24, r29
   1b69e:	9c 2f       	mov	r25, r28
   1b6a0:	ad b7       	in	r26, 0x3d	; 61
   1b6a2:	be b7       	in	r27, 0x3e	; 62
   1b6a4:	17 96       	adiw	r26, 0x07	; 7
   1b6a6:	0f b6       	in	r0, 0x3f	; 63
   1b6a8:	f8 94       	cli
   1b6aa:	be bf       	out	0x3e, r27	; 62
   1b6ac:	0f be       	out	0x3f, r0	; 63
   1b6ae:	ad bf       	out	0x3d, r26	; 61
   1b6b0:	df 91       	pop	r29
   1b6b2:	cf 91       	pop	r28
   1b6b4:	1f 91       	pop	r17
   1b6b6:	0f 91       	pop	r16
   1b6b8:	ff 90       	pop	r15
   1b6ba:	ef 90       	pop	r14
   1b6bc:	df 90       	pop	r13
   1b6be:	cf 90       	pop	r12
   1b6c0:	bf 90       	pop	r11
   1b6c2:	af 90       	pop	r10
   1b6c4:	7f 90       	pop	r7
   1b6c6:	6f 90       	pop	r6
   1b6c8:	5f 90       	pop	r5
   1b6ca:	4f 90       	pop	r4
   1b6cc:	08 95       	ret

0001b6ce <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b6ce:	8f 92       	push	r8
   1b6d0:	9f 92       	push	r9
   1b6d2:	af 92       	push	r10
   1b6d4:	bf 92       	push	r11
   1b6d6:	ef 92       	push	r14
   1b6d8:	ff 92       	push	r15
   1b6da:	0f 93       	push	r16
   1b6dc:	1f 93       	push	r17
   1b6de:	cf 93       	push	r28
   1b6e0:	df 93       	push	r29
   1b6e2:	00 d0       	rcall	.+0      	; 0x1b6e4 <lif_tests+0x16>
   1b6e4:	00 d0       	rcall	.+0      	; 0x1b6e6 <lif_tests+0x18>
   1b6e6:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b6e8:	82 30       	cpi	r24, 0x02	; 2
   1b6ea:	91 05       	cpc	r25, r1
   1b6ec:	0c f4       	brge	.+2      	; 0x1b6f0 <lif_tests+0x22>
   1b6ee:	17 c1       	rjmp	.+558    	; 0x1b91e <lif_tests+0x250>
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b6f0:	fb 01       	movw	r30, r22
   1b6f2:	02 81       	ldd	r16, Z+2	; 0x02
   1b6f4:	13 81       	ldd	r17, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b6f6:	01 15       	cp	r16, r1
   1b6f8:	11 05       	cpc	r17, r1
   1b6fa:	09 f4       	brne	.+2      	; 0x1b6fe <lif_tests+0x30>
   1b6fc:	10 c1       	rjmp	.+544    	; 0x1b91e <lif_tests+0x250>
   1b6fe:	f8 01       	movw	r30, r16
   1b700:	20 81       	ld	r18, Z
   1b702:	22 23       	and	r18, r18
   1b704:	09 f4       	brne	.+2      	; 0x1b708 <lif_tests+0x3a>
   1b706:	0b c1       	rjmp	.+534    	; 0x1b91e <lif_tests+0x250>
   1b708:	eb 01       	movw	r28, r22
   1b70a:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b70c:	63 e6       	ldi	r22, 0x63	; 99
   1b70e:	76 e1       	ldi	r23, 0x16	; 22
   1b710:	c8 01       	movw	r24, r16
   1b712:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   1b716:	89 2b       	or	r24, r25
   1b718:	29 f0       	breq	.+10     	; 0x1b724 <lif_tests+0x56>
    {
        lif_help(1);
   1b71a:	81 e0       	ldi	r24, 0x01	; 1
   1b71c:	90 e0       	ldi	r25, 0x00	; 0
   1b71e:	0e 94 64 bd 	call	0x17ac8	; 0x17ac8 <lif_help>
   1b722:	fd c0       	rjmp	.+506    	; 0x1b91e <lif_tests+0x250>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b724:	62 e6       	ldi	r22, 0x62	; 98
   1b726:	76 e1       	ldi	r23, 0x16	; 22
   1b728:	c8 01       	movw	r24, r16
   1b72a:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   1b72e:	89 2b       	or	r24, r25
   1b730:	a1 f7       	brne	.-24     	; 0x1b71a <lif_tests+0x4c>
   1b732:	68 e6       	ldi	r22, 0x68	; 104
   1b734:	76 e1       	ldi	r23, 0x16	; 22
   1b736:	c8 01       	movw	r24, r16
   1b738:	0e 94 bc 31 	call	0x6378	; 0x6378 <MATCH>
   1b73c:	89 2b       	or	r24, r25
   1b73e:	69 f7       	brne	.-38     	; 0x1b71a <lif_tests+0x4c>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b740:	97 01       	movw	r18, r14
   1b742:	42 e0       	ldi	r20, 0x02	; 2
   1b744:	50 e0       	ldi	r21, 0x00	; 0
   1b746:	6b e6       	ldi	r22, 0x6B	; 107
   1b748:	76 e1       	ldi	r23, 0x16	; 22
   1b74a:	c8 01       	movw	r24, r16
   1b74c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b750:	89 2b       	or	r24, r25
   1b752:	39 f0       	breq	.+14     	; 0x1b762 <lif_tests+0x94>
    {
        debuglevel = 0xffff;
   1b754:	8f ef       	ldi	r24, 0xFF	; 255
   1b756:	9f ef       	ldi	r25, 0xFF	; 255
   1b758:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <debuglevel+0x1>
   1b75c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <debuglevel>
   1b760:	de c0       	rjmp	.+444    	; 0x1b91e <lif_tests+0x250>
        return(1);
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b762:	97 01       	movw	r18, r14
   1b764:	45 e0       	ldi	r20, 0x05	; 5
   1b766:	50 e0       	ldi	r21, 0x00	; 0
   1b768:	6e e6       	ldi	r22, 0x6E	; 110
   1b76a:	76 e1       	ldi	r23, 0x16	; 22
   1b76c:	c8 01       	movw	r24, r16
   1b76e:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b772:	89 2b       	or	r24, r25
   1b774:	41 f0       	breq	.+16     	; 0x1b786 <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b776:	48 85       	ldd	r20, Y+8	; 0x08
   1b778:	59 85       	ldd	r21, Y+9	; 0x09
   1b77a:	6e 81       	ldd	r22, Y+6	; 0x06
   1b77c:	7f 81       	ldd	r23, Y+7	; 0x07
   1b77e:	8c 81       	ldd	r24, Y+4	; 0x04
   1b780:	9d 81       	ldd	r25, Y+5	; 0x05
   1b782:	83 dc       	rcall	.-1786   	; 0x1b08a <lif_add_lif_file>
   1b784:	cc c0       	rjmp	.+408    	; 0x1b91e <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b786:	97 01       	movw	r18, r14
   1b788:	45 e0       	ldi	r20, 0x05	; 5
   1b78a:	50 e0       	ldi	r21, 0x00	; 0
   1b78c:	65 e7       	ldi	r22, 0x75	; 117
   1b78e:	76 e1       	ldi	r23, 0x16	; 22
   1b790:	c8 01       	movw	r24, r16
   1b792:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b796:	89 2b       	or	r24, r25
   1b798:	49 f0       	breq	.+18     	; 0x1b7ac <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b79a:	48 85       	ldd	r20, Y+8	; 0x08
   1b79c:	59 85       	ldd	r21, Y+9	; 0x09
   1b79e:	6e 81       	ldd	r22, Y+6	; 0x06
   1b7a0:	7f 81       	ldd	r23, Y+7	; 0x07
   1b7a2:	8c 81       	ldd	r24, Y+4	; 0x04
   1b7a4:	9d 81       	ldd	r25, Y+5	; 0x05
   1b7a6:	0e 94 22 d3 	call	0x1a644	; 0x1a644 <lif_add_ascii_file_as_e010>
   1b7aa:	b9 c0       	rjmp	.+370    	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b7ac:	97 01       	movw	r18, r14
   1b7ae:	45 e0       	ldi	r20, 0x05	; 5
   1b7b0:	50 e0       	ldi	r21, 0x00	; 0
   1b7b2:	69 e7       	ldi	r22, 0x79	; 121
   1b7b4:	76 e1       	ldi	r23, 0x16	; 22
   1b7b6:	c8 01       	movw	r24, r16
   1b7b8:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b7bc:	89 2b       	or	r24, r25
   1b7be:	e1 f1       	breq	.+120    	; 0x1b838 <lif_tests+0x16a>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b7c0:	ac 80       	ldd	r10, Y+4	; 0x04
   1b7c2:	bd 80       	ldd	r11, Y+5	; 0x05
        char *label = argv[ind+1];
   1b7c4:	8e 80       	ldd	r8, Y+6	; 0x06
   1b7c6:	9f 80       	ldd	r9, Y+7	; 0x07
        char *model = argv[ind+2];
   1b7c8:	08 84       	ldd	r0, Y+8	; 0x08
   1b7ca:	d9 85       	ldd	r29, Y+9	; 0x09
   1b7cc:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b7ce:	64 e8       	ldi	r22, 0x84	; 132
   1b7d0:	76 e1       	ldi	r23, 0x16	; 22
   1b7d2:	ce 01       	movw	r24, r28
   1b7d4:	0e 94 0e 32 	call	0x641c	; 0x641c <MATCHI_LEN>
   1b7d8:	89 2b       	or	r24, r25
   1b7da:	09 f0       	breq	.+2      	; 0x1b7de <lif_tests+0x110>
            model +=2;
   1b7dc:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b7de:	40 e0       	ldi	r20, 0x00	; 0
   1b7e0:	50 e0       	ldi	r21, 0x00	; 0
   1b7e2:	60 e0       	ldi	r22, 0x00	; 0
   1b7e4:	70 e0       	ldi	r23, 0x00	; 0
   1b7e6:	ce 01       	movw	r24, r28
   1b7e8:	0e 94 f8 a0 	call	0x141f0	; 0x141f0 <hpdir_find_drive>
   1b7ec:	89 2b       	or	r24, r25
   1b7ee:	b9 f0       	breq	.+46     	; 0x1b81e <lif_tests+0x150>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b7f0:	60 91 85 21 	lds	r22, 0x2185	; 0x802185 <hpdir+0xac>
   1b7f4:	70 91 86 21 	lds	r23, 0x2186	; 0x802186 <hpdir+0xad>
   1b7f8:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <hpdir+0xae>
   1b7fc:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <hpdir+0xaf>
   1b800:	0e 94 db a0 	call	0x141b6	; 0x141b6 <lif_dir_count>
   1b804:	9b 01       	movw	r18, r22
   1b806:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b808:	e0 90 85 21 	lds	r14, 0x2185	; 0x802185 <hpdir+0xac>
   1b80c:	f0 90 86 21 	lds	r15, 0x2186	; 0x802186 <hpdir+0xad>
   1b810:	00 91 87 21 	lds	r16, 0x2187	; 0x802187 <hpdir+0xae>
   1b814:	10 91 88 21 	lds	r17, 0x2188	; 0x802188 <hpdir+0xaf>
   1b818:	b4 01       	movw	r22, r8
   1b81a:	c5 01       	movw	r24, r10
   1b81c:	29 c0       	rjmp	.+82     	; 0x1b870 <lif_tests+0x1a2>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b81e:	ed b7       	in	r30, 0x3d	; 61
   1b820:	fe b7       	in	r31, 0x3e	; 62
   1b822:	d5 83       	std	Z+5, r29	; 0x05
   1b824:	c4 83       	std	Z+4, r28	; 0x04
   1b826:	81 e6       	ldi	r24, 0x61	; 97
   1b828:	9f e3       	ldi	r25, 0x3F	; 63
   1b82a:	a0 e0       	ldi	r26, 0x00	; 0
   1b82c:	81 83       	std	Z+1, r24	; 0x01
   1b82e:	92 83       	std	Z+2, r25	; 0x02
   1b830:	a3 83       	std	Z+3, r26	; 0x03
   1b832:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1b836:	73 c0       	rjmp	.+230    	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b838:	97 01       	movw	r18, r14
   1b83a:	46 e0       	ldi	r20, 0x06	; 6
   1b83c:	50 e0       	ldi	r21, 0x00	; 0
   1b83e:	67 e8       	ldi	r22, 0x87	; 135
   1b840:	76 e1       	ldi	r23, 0x16	; 22
   1b842:	c8 01       	movw	r24, r16
   1b844:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b848:	89 2b       	or	r24, r25
   1b84a:	a1 f0       	breq	.+40     	; 0x1b874 <lif_tests+0x1a6>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b84c:	88 85       	ldd	r24, Y+8	; 0x08
   1b84e:	99 85       	ldd	r25, Y+9	; 0x09
   1b850:	0e 94 6c 46 	call	0x8cd8	; 0x8cd8 <atol>
   1b854:	4b 01       	movw	r8, r22
   1b856:	5c 01       	movw	r10, r24
   1b858:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b85a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1b85c:	0e 94 6c 46 	call	0x8cd8	; 0x8cd8 <atol>
   1b860:	7b 01       	movw	r14, r22
   1b862:	8c 01       	movw	r16, r24
   1b864:	6e 81       	ldd	r22, Y+6	; 0x06
   1b866:	7f 81       	ldd	r23, Y+7	; 0x07
   1b868:	a5 01       	movw	r20, r10
   1b86a:	94 01       	movw	r18, r8
   1b86c:	8c 81       	ldd	r24, Y+4	; 0x04
   1b86e:	9d 81       	ldd	r25, Y+5	; 0x05
   1b870:	a7 de       	rcall	.-690    	; 0x1b5c0 <lif_create_image>
   1b872:	55 c0       	rjmp	.+170    	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b874:	97 01       	movw	r18, r14
   1b876:	44 e0       	ldi	r20, 0x04	; 4
   1b878:	50 e0       	ldi	r21, 0x00	; 0
   1b87a:	6e e8       	ldi	r22, 0x8E	; 142
   1b87c:	76 e1       	ldi	r23, 0x16	; 22
   1b87e:	c8 01       	movw	r24, r16
   1b880:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b884:	89 2b       	or	r24, r25
   1b886:	31 f0       	breq	.+12     	; 0x1b894 <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b888:	6e 81       	ldd	r22, Y+6	; 0x06
   1b88a:	7f 81       	ldd	r23, Y+7	; 0x07
   1b88c:	8c 81       	ldd	r24, Y+4	; 0x04
   1b88e:	9d 81       	ldd	r25, Y+5	; 0x05
   1b890:	85 dd       	rcall	.-1270   	; 0x1b39c <lif_del_file>
   1b892:	45 c0       	rjmp	.+138    	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b894:	97 01       	movw	r18, r14
   1b896:	43 e0       	ldi	r20, 0x03	; 3
   1b898:	50 e0       	ldi	r21, 0x00	; 0
   1b89a:	6a ea       	ldi	r22, 0xAA	; 170
   1b89c:	7b e0       	ldi	r23, 0x0B	; 11
   1b89e:	c8 01       	movw	r24, r16
   1b8a0:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b8a4:	89 2b       	or	r24, r25
   1b8a6:	29 f0       	breq	.+10     	; 0x1b8b2 <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1b8a8:	8c 81       	ldd	r24, Y+4	; 0x04
   1b8aa:	9d 81       	ldd	r25, Y+5	; 0x05
   1b8ac:	0e 94 d4 ce 	call	0x19da8	; 0x19da8 <lif_dir>
   1b8b0:	36 c0       	rjmp	.+108    	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b8b2:	97 01       	movw	r18, r14
   1b8b4:	45 e0       	ldi	r20, 0x05	; 5
   1b8b6:	50 e0       	ldi	r21, 0x00	; 0
   1b8b8:	62 e9       	ldi	r22, 0x92	; 146
   1b8ba:	76 e1       	ldi	r23, 0x16	; 22
   1b8bc:	c8 01       	movw	r24, r16
   1b8be:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b8c2:	89 2b       	or	r24, r25
   1b8c4:	41 f0       	breq	.+16     	; 0x1b8d6 <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b8c6:	48 85       	ldd	r20, Y+8	; 0x08
   1b8c8:	59 85       	ldd	r21, Y+9	; 0x09
   1b8ca:	6e 81       	ldd	r22, Y+6	; 0x06
   1b8cc:	7f 81       	ldd	r23, Y+7	; 0x07
   1b8ce:	8c 81       	ldd	r24, Y+4	; 0x04
   1b8d0:	9d 81       	ldd	r25, Y+5	; 0x05
   1b8d2:	a3 da       	rcall	.-2746   	; 0x1ae1a <lif_extract_lif_as_lif>
   1b8d4:	24 c0       	rjmp	.+72     	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b8d6:	97 01       	movw	r18, r14
   1b8d8:	45 e0       	ldi	r20, 0x05	; 5
   1b8da:	50 e0       	ldi	r21, 0x00	; 0
   1b8dc:	6d e9       	ldi	r22, 0x9D	; 157
   1b8de:	76 e1       	ldi	r23, 0x16	; 22
   1b8e0:	c8 01       	movw	r24, r16
   1b8e2:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b8e6:	89 2b       	or	r24, r25
   1b8e8:	49 f0       	breq	.+18     	; 0x1b8fc <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b8ea:	48 85       	ldd	r20, Y+8	; 0x08
   1b8ec:	59 85       	ldd	r21, Y+9	; 0x09
   1b8ee:	6e 81       	ldd	r22, Y+6	; 0x06
   1b8f0:	7f 81       	ldd	r23, Y+7	; 0x07
   1b8f2:	8c 81       	ldd	r24, Y+4	; 0x04
   1b8f4:	9d 81       	ldd	r25, Y+5	; 0x05
   1b8f6:	0e 94 5e d4 	call	0x1a8bc	; 0x1a8bc <lif_extract_e010_as_ascii>
   1b8fa:	11 c0       	rjmp	.+34     	; 0x1b91e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b8fc:	97 01       	movw	r18, r14
   1b8fe:	45 e0       	ldi	r20, 0x05	; 5
   1b900:	50 e0       	ldi	r21, 0x00	; 0
   1b902:	67 eb       	ldi	r22, 0xB7	; 183
   1b904:	7b e0       	ldi	r23, 0x0B	; 11
   1b906:	c8 01       	movw	r24, r16
   1b908:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1b90c:	00 97       	sbiw	r24, 0x00	; 0
   1b90e:	49 f0       	breq	.+18     	; 0x1b922 <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b910:	48 85       	ldd	r20, Y+8	; 0x08
   1b912:	59 85       	ldd	r21, Y+9	; 0x09
   1b914:	6e 81       	ldd	r22, Y+6	; 0x06
   1b916:	7f 81       	ldd	r23, Y+7	; 0x07
   1b918:	8c 81       	ldd	r24, Y+4	; 0x04
   1b91a:	9d 81       	ldd	r25, Y+5	; 0x05
   1b91c:	d4 dd       	rcall	.-1112   	; 0x1b4c6 <lif_rename_file>
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
        return (1);
   1b91e:	81 e0       	ldi	r24, 0x01	; 1
   1b920:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1b922:	0f 90       	pop	r0
   1b924:	0f 90       	pop	r0
   1b926:	0f 90       	pop	r0
   1b928:	0f 90       	pop	r0
   1b92a:	0f 90       	pop	r0
   1b92c:	df 91       	pop	r29
   1b92e:	cf 91       	pop	r28
   1b930:	1f 91       	pop	r17
   1b932:	0f 91       	pop	r16
   1b934:	ff 90       	pop	r15
   1b936:	ef 90       	pop	r14
   1b938:	bf 90       	pop	r11
   1b93a:	af 90       	pop	r10
   1b93c:	9f 90       	pop	r9
   1b93e:	8f 90       	pop	r8
   1b940:	08 95       	ret

0001b942 <copyright>:
#include <math.h>

///@brief Display Copyright
///@return void
void copyright()
{
   1b942:	00 d0       	rcall	.+0      	; 0x1b944 <copyright+0x2>
   1b944:	00 d0       	rcall	.+0      	; 0x1b946 <copyright+0x4>
   1b946:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b948:	87 ea       	ldi	r24, 0xA7	; 167
   1b94a:	94 e4       	ldi	r25, 0x44	; 68
   1b94c:	a0 e0       	ldi	r26, 0x00	; 0
   1b94e:	ed b7       	in	r30, 0x3d	; 61
   1b950:	fe b7       	in	r31, 0x3e	; 62
   1b952:	81 83       	std	Z+1, r24	; 0x01
   1b954:	92 83       	std	Z+2, r25	; 0x02
   1b956:	a3 83       	std	Z+3, r26	; 0x03
   1b958:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b95c:	88 e8       	ldi	r24, 0x88	; 136
   1b95e:	94 e4       	ldi	r25, 0x44	; 68
   1b960:	a0 e0       	ldi	r26, 0x00	; 0
   1b962:	ed b7       	in	r30, 0x3d	; 61
   1b964:	fe b7       	in	r31, 0x3e	; 62
   1b966:	81 83       	std	Z+1, r24	; 0x01
   1b968:	92 83       	std	Z+2, r25	; 0x02
   1b96a:	a3 83       	std	Z+3, r26	; 0x03
   1b96c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1b970:	8b e6       	ldi	r24, 0x6B	; 107
   1b972:	94 e4       	ldi	r25, 0x44	; 68
   1b974:	a0 e0       	ldi	r26, 0x00	; 0
   1b976:	ed b7       	in	r30, 0x3d	; 61
   1b978:	fe b7       	in	r31, 0x3e	; 62
   1b97a:	81 83       	std	Z+1, r24	; 0x01
   1b97c:	92 83       	std	Z+2, r25	; 0x02
   1b97e:	a3 83       	std	Z+3, r26	; 0x03
   1b980:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf(" GNU version 3\n");
   1b984:	8b e5       	ldi	r24, 0x5B	; 91
   1b986:	94 e4       	ldi	r25, 0x44	; 68
   1b988:	a0 e0       	ldi	r26, 0x00	; 0
   1b98a:	ed b7       	in	r30, 0x3d	; 61
   1b98c:	fe b7       	in	r31, 0x3e	; 62
   1b98e:	81 83       	std	Z+1, r24	; 0x01
   1b990:	92 83       	std	Z+2, r25	; 0x02
   1b992:	a3 83       	std	Z+3, r26	; 0x03
   1b994:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1b998:	84 e3       	ldi	r24, 0x34	; 52
   1b99a:	94 e4       	ldi	r25, 0x44	; 68
   1b99c:	a0 e0       	ldi	r26, 0x00	; 0
   1b99e:	ed b7       	in	r30, 0x3d	; 61
   1b9a0:	fe b7       	in	r31, 0x3e	; 62
   1b9a2:	81 83       	std	Z+1, r24	; 0x01
   1b9a4:	92 83       	std	Z+2, r25	; 0x02
   1b9a6:	a3 83       	std	Z+3, r26	; 0x03
   1b9a8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1b9ac:	85 ea       	ldi	r24, 0xA5	; 165
   1b9ae:	96 e1       	ldi	r25, 0x16	; 22
   1b9b0:	ed b7       	in	r30, 0x3d	; 61
   1b9b2:	fe b7       	in	r31, 0x3e	; 62
   1b9b4:	95 83       	std	Z+5, r25	; 0x05
   1b9b6:	84 83       	std	Z+4, r24	; 0x04
   1b9b8:	8a e1       	ldi	r24, 0x1A	; 26
   1b9ba:	94 e4       	ldi	r25, 0x44	; 68
   1b9bc:	a0 e0       	ldi	r26, 0x00	; 0
   1b9be:	81 83       	std	Z+1, r24	; 0x01
   1b9c0:	92 83       	std	Z+2, r25	; 0x02
   1b9c2:	a3 83       	std	Z+3, r26	; 0x03
   1b9c4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1b9c8:	89 ec       	ldi	r24, 0xC9	; 201
   1b9ca:	96 e1       	ldi	r25, 0x16	; 22
   1b9cc:	ed b7       	in	r30, 0x3d	; 61
   1b9ce:	fe b7       	in	r31, 0x3e	; 62
   1b9d0:	95 83       	std	Z+5, r25	; 0x05
   1b9d2:	84 83       	std	Z+4, r24	; 0x04
   1b9d4:	80 e0       	ldi	r24, 0x00	; 0
   1b9d6:	94 e4       	ldi	r25, 0x44	; 68
   1b9d8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9da:	81 83       	std	Z+1, r24	; 0x01
   1b9dc:	92 83       	std	Z+2, r25	; 0x02
   1b9de:	a3 83       	std	Z+3, r26	; 0x03
   1b9e0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("\n");
   1b9e4:	8e ef       	ldi	r24, 0xFE	; 254
   1b9e6:	93 e4       	ldi	r25, 0x43	; 67
   1b9e8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9ea:	ed b7       	in	r30, 0x3d	; 61
   1b9ec:	fe b7       	in	r31, 0x3e	; 62
   1b9ee:	81 83       	std	Z+1, r24	; 0x01
   1b9f0:	92 83       	std	Z+2, r25	; 0x02
   1b9f2:	a3 83       	std	Z+3, r26	; 0x03
   1b9f4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
}
   1b9f8:	0f 90       	pop	r0
   1b9fa:	0f 90       	pop	r0
   1b9fc:	0f 90       	pop	r0
   1b9fe:	0f 90       	pop	r0
   1ba00:	0f 90       	pop	r0
   1ba02:	08 95       	ret

0001ba04 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1ba04:	00 d0       	rcall	.+0      	; 0x1ba06 <help+0x2>

    copyright();
   1ba06:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1ba08:	9c df       	rcall	.-200    	; 0x1b942 <copyright>
   1ba0a:	80 e0       	ldi	r24, 0x00	; 0
   1ba0c:	90 e0       	ldi	r25, 0x00	; 0
   1ba0e:	0e 94 ef 72 	call	0xe5de	; 0xe5de <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1ba12:	80 e0       	ldi	r24, 0x00	; 0
   1ba14:	90 e0       	ldi	r25, 0x00	; 0
   1ba16:	0e 94 3c 7e 	call	0xfc78	; 0xfc78 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1ba1a:	80 e0       	ldi	r24, 0x00	; 0
   1ba1c:	90 e0       	ldi	r25, 0x00	; 0
   1ba1e:	0e 94 64 bd 	call	0x17ac8	; 0x17ac8 <lif_help>
#endif

    gpib_help(0);
   1ba22:	80 e0       	ldi	r24, 0x00	; 0
   1ba24:	90 e0       	ldi	r25, 0x00	; 0
   1ba26:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_help>

    printf(
   1ba2a:	80 ee       	ldi	r24, 0xE0	; 224
   1ba2c:	93 e4       	ldi	r25, 0x43	; 67
   1ba2e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba30:	ed b7       	in	r30, 0x3d	; 61
   1ba32:	fe b7       	in	r31, 0x3e	; 62
   1ba34:	81 83       	std	Z+1, r24	; 0x01
   1ba36:	92 83       	std	Z+2, r25	; 0x02
   1ba38:	a3 83       	std	Z+3, r26	; 0x03
   1ba3a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1ba3e:	0f 90       	pop	r0
   1ba40:	0f 90       	pop	r0
   1ba42:	0f 90       	pop	r0
   1ba44:	08 95       	ret

0001ba46 <task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void task(uint8_t gpib)
   1ba46:	a9 e6       	ldi	r26, 0x69	; 105
   1ba48:	b1 e0       	ldi	r27, 0x01	; 1
   1ba4a:	e8 e2       	ldi	r30, 0x28	; 40
   1ba4c:	fd ed       	ldi	r31, 0xDD	; 221
   1ba4e:	73 c3       	rjmp	.+1766   	; 0x1c136 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1ba50:	8d ed       	ldi	r24, 0xDD	; 221
   1ba52:	93 e4       	ldi	r25, 0x43	; 67
   1ba54:	a0 e0       	ldi	r26, 0x00	; 0
   1ba56:	ed b7       	in	r30, 0x3d	; 61
   1ba58:	fe b7       	in	r31, 0x3e	; 62
   1ba5a:	81 83       	std	Z+1, r24	; 0x01
   1ba5c:	92 83       	std	Z+2, r25	; 0x02
   1ba5e:	a3 83       	std	Z+3, r26	; 0x03
   1ba60:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1ba64:	40 91 a0 1c 	lds	r20, 0x1CA0	; 0x801ca0 <__iob>
   1ba68:	50 91 a1 1c 	lds	r21, 0x1CA1	; 0x801ca1 <__iob+0x1>
   1ba6c:	6e ef       	ldi	r22, 0xFE	; 254
   1ba6e:	70 e0       	ldi	r23, 0x00	; 0
   1ba70:	ce 01       	movw	r24, r28
   1ba72:	06 96       	adiw	r24, 0x06	; 6
   1ba74:	6c 01       	movw	r12, r24
   1ba76:	0e 94 28 76 	call	0xec50	; 0xec50 <fgets>
    trim_tail(line);
   1ba7a:	c6 01       	movw	r24, r12
   1ba7c:	0e 94 a2 31 	call	0x6344	; 0x6344 <trim_tail>
    argc = split_args(line,argv,50);
   1ba80:	42 e3       	ldi	r20, 0x32	; 50
   1ba82:	50 e0       	ldi	r21, 0x00	; 0
   1ba84:	be 01       	movw	r22, r28
   1ba86:	6a 5f       	subi	r22, 0xFA	; 250
   1ba88:	7e 4f       	sbci	r23, 0xFE	; 254
   1ba8a:	c6 01       	movw	r24, r12
   1ba8c:	0e 94 28 32 	call	0x6450	; 0x6450 <split_args>
   1ba90:	8c 01       	movw	r16, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1ba92:	ca 5f       	subi	r28, 0xFA	; 250
   1ba94:	de 4f       	sbci	r29, 0xFE	; 254
   1ba96:	e8 80       	ld	r14, Y
   1ba98:	f9 80       	ldd	r15, Y+1	; 0x01
   1ba9a:	c6 50       	subi	r28, 0x06	; 6
   1ba9c:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1ba9e:	e1 14       	cp	r14, r1
   1baa0:	f1 04       	cpc	r15, r1
   1baa2:	09 f4       	brne	.+2      	; 0x1baa6 <task.part.0+0x60>
   1baa4:	76 c0       	rjmp	.+236    	; 0x1bb92 <task.part.0+0x14c>
   1baa6:	18 16       	cp	r1, r24
   1baa8:	19 06       	cpc	r1, r25
   1baaa:	0c f0       	brlt	.+2      	; 0x1baae <task.part.0+0x68>
   1baac:	72 c0       	rjmp	.+228    	; 0x1bb92 <task.part.0+0x14c>
        delay_tests();
        result = 1;

    }
#endif
    else if ( MATCHARGS(ptr,"time",(ind+0),argc))
   1baae:	9c 01       	movw	r18, r24
   1bab0:	41 e0       	ldi	r20, 0x01	; 1
   1bab2:	50 e0       	ldi	r21, 0x00	; 0
   1bab4:	6d ee       	ldi	r22, 0xED	; 237
   1bab6:	76 e1       	ldi	r23, 0x16	; 22
   1bab8:	c7 01       	movw	r24, r14
   1baba:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1babe:	89 2b       	or	r24, r25
   1bac0:	01 f5       	brne	.+64     	; 0x1bb02 <task.part.0+0xbc>
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHARGS(ptr,"reset",(ind+0),argc))
   1bac2:	98 01       	movw	r18, r16
   1bac4:	41 e0       	ldi	r20, 0x01	; 1
   1bac6:	50 e0       	ldi	r21, 0x00	; 0
   1bac8:	6c ea       	ldi	r22, 0xAC	; 172
   1baca:	7d e0       	ldi	r23, 0x0D	; 13
   1bacc:	c7 01       	movw	r24, r14
   1bace:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1bad2:	89 2b       	or	r24, r25
   1bad4:	51 f0       	breq	.+20     	; 0x1baea <task.part.0+0xa4>
    {
        cli();
   1bad6:	f8 94       	cli
        uart_rx_flush(0);
   1bad8:	80 e0       	ldi	r24, 0x00	; 0
   1bada:	0e 94 ce 28 	call	0x519c	; 0x519c <uart_rx_flush>
        cli();
   1bade:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bae0:	82 e0       	ldi	r24, 0x02	; 2
   1bae2:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bae4:	e0 e0       	ldi	r30, 0x00	; 0
   1bae6:	fc ef       	ldi	r31, 0xFC	; 252
   1bae8:	09 95       	icall
// should not return!
        result = 1;
    }
    else if ( MATCHARGS(ptr,"setdate",(ind+0),argc))
   1baea:	98 01       	movw	r18, r16
   1baec:	41 e0       	ldi	r20, 0x01	; 1
   1baee:	50 e0       	ldi	r21, 0x00	; 0
   1baf0:	62 ef       	ldi	r22, 0xF2	; 242
   1baf2:	76 e1       	ldi	r23, 0x16	; 22
   1baf4:	c7 01       	movw	r24, r14
   1baf6:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1bafa:	89 2b       	or	r24, r25
   1bafc:	29 f0       	breq	.+10     	; 0x1bb08 <task.part.0+0xc2>
    {
        setdate();
   1bafe:	0e 94 0b 3b 	call	0x7616	; 0x7616 <setdate>
        display_clock();
   1bb02:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <display_clock>
   1bb06:	45 c0       	rjmp	.+138    	; 0x1bb92 <task.part.0+0x14c>
        result = 1;
    }
    else if ( MATCHARGS(ptr,"mem",(ind+0),argc))
   1bb08:	98 01       	movw	r18, r16
   1bb0a:	41 e0       	ldi	r20, 0x01	; 1
   1bb0c:	50 e0       	ldi	r21, 0x00	; 0
   1bb0e:	6a ef       	ldi	r22, 0xFA	; 250
   1bb10:	76 e1       	ldi	r23, 0x16	; 22
   1bb12:	c7 01       	movw	r24, r14
   1bb14:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1bb18:	89 2b       	or	r24, r25
   1bb1a:	19 f0       	breq	.+6      	; 0x1bb22 <task.part.0+0xdc>
    {
        PrintFree();
   1bb1c:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <PrintFree>
   1bb20:	38 c0       	rjmp	.+112    	; 0x1bb92 <task.part.0+0x14c>
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1bb22:	98 01       	movw	r18, r16
   1bb24:	41 e0       	ldi	r20, 0x01	; 1
   1bb26:	50 e0       	ldi	r21, 0x00	; 0
   1bb28:	63 e6       	ldi	r22, 0x63	; 99
   1bb2a:	76 e1       	ldi	r23, 0x16	; 22
   1bb2c:	c7 01       	movw	r24, r14
   1bb2e:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1bb32:	89 2b       	or	r24, r25
    {
        help();
   1bb34:	11 f0       	breq	.+4      	; 0x1bb3a <task.part.0+0xf4>
   1bb36:	66 df       	rcall	.-308    	; 0x1ba04 <help>
   1bb38:	2c c0       	rjmp	.+88     	; 0x1bb92 <task.part.0+0x14c>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1bb3a:	98 01       	movw	r18, r16
   1bb3c:	41 e0       	ldi	r20, 0x01	; 1
   1bb3e:	50 e0       	ldi	r21, 0x00	; 0
   1bb40:	69 e6       	ldi	r22, 0x69	; 105
   1bb42:	76 e1       	ldi	r23, 0x16	; 22
   1bb44:	c7 01       	movw	r24, r14
   1bb46:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <MATCHARGS>
   1bb4a:	89 2b       	or	r24, r25
   1bb4c:	a1 f7       	brne	.-24     	; 0x1bb36 <task.part.0+0xf0>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1bb4e:	be 01       	movw	r22, r28
   1bb50:	6a 5f       	subi	r22, 0xFA	; 250
   1bb52:	7e 4f       	sbci	r23, 0xFE	; 254
   1bb54:	c8 01       	movw	r24, r16
   1bb56:	0e 94 7f 91 	call	0x122fe	; 0x122fe <gpib_tests>
   1bb5a:	89 2b       	or	r24, r25
   1bb5c:	19 f0       	breq	.+6      	; 0x1bb64 <task.part.0+0x11e>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1bb5e:	0e 94 90 8c 	call	0x11920	; 0x11920 <gpib_init_devices>
   1bb62:	17 c0       	rjmp	.+46     	; 0x1bb92 <task.part.0+0x14c>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1bb64:	be 01       	movw	r22, r28
   1bb66:	6a 5f       	subi	r22, 0xFA	; 250
   1bb68:	7e 4f       	sbci	r23, 0xFE	; 254
   1bb6a:	c8 01       	movw	r24, r16
   1bb6c:	0e 94 ae 81 	call	0x1035c	; 0x1035c <posix_tests>
   1bb70:	89 2b       	or	r24, r25
   1bb72:	79 f4       	brne	.+30     	; 0x1bb92 <task.part.0+0x14c>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1bb74:	be 01       	movw	r22, r28
   1bb76:	6a 5f       	subi	r22, 0xFA	; 250
   1bb78:	7e 4f       	sbci	r23, 0xFE	; 254
   1bb7a:	c8 01       	movw	r24, r16
   1bb7c:	0e 94 09 74 	call	0xe812	; 0xe812 <fatfs_tests>
   1bb80:	89 2b       	or	r24, r25
   1bb82:	39 f4       	brne	.+14     	; 0x1bb92 <task.part.0+0x14c>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1bb84:	be 01       	movw	r22, r28
   1bb86:	6a 5f       	subi	r22, 0xFA	; 250
   1bb88:	7e 4f       	sbci	r23, 0xFE	; 254
   1bb8a:	c8 01       	movw	r24, r16
   1bb8c:	a0 dd       	rcall	.-1216   	; 0x1b6ce <lif_tests>
   1bb8e:	89 2b       	or	r24, r25
   1bb90:	59 f0       	breq	.+22     	; 0x1bba8 <task.part.0+0x162>
        result = 1;
#endif
    if(result)
        printf("OK\n");
   1bb92:	89 ed       	ldi	r24, 0xD9	; 217
   1bb94:	93 e4       	ldi	r25, 0x43	; 67
   1bb96:	a0 e0       	ldi	r26, 0x00	; 0
   1bb98:	ed b7       	in	r30, 0x3d	; 61
   1bb9a:	fe b7       	in	r31, 0x3e	; 62
   1bb9c:	81 83       	std	Z+1, r24	; 0x01
   1bb9e:	92 83       	std	Z+2, r25	; 0x02
   1bba0:	a3 83       	std	Z+3, r26	; 0x03
   1bba2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
   1bba6:	0c c0       	rjmp	.+24     	; 0x1bbc0 <task.part.0+0x17a>
    else
        printf("Error:[%s]\n",line);
   1bba8:	ed b7       	in	r30, 0x3d	; 61
   1bbaa:	fe b7       	in	r31, 0x3e	; 62
   1bbac:	d5 82       	std	Z+5, r13	; 0x05
   1bbae:	c4 82       	std	Z+4, r12	; 0x04
   1bbb0:	8d ec       	ldi	r24, 0xCD	; 205
   1bbb2:	93 e4       	ldi	r25, 0x43	; 67
   1bbb4:	a0 e0       	ldi	r26, 0x00	; 0
   1bbb6:	81 83       	std	Z+1, r24	; 0x01
   1bbb8:	92 83       	std	Z+2, r25	; 0x02
   1bbba:	a3 83       	std	Z+3, r26	; 0x03
   1bbbc:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
}
   1bbc0:	c7 59       	subi	r28, 0x97	; 151
   1bbc2:	de 4f       	sbci	r29, 0xFE	; 254
   1bbc4:	e8 e0       	ldi	r30, 0x08	; 8
   1bbc6:	d3 c2       	rjmp	.+1446   	; 0x1c16e <__epilogue_restores__+0x14>

0001bbc8 <task>:
    int argc;
    int result = 0;
    char *argv[50];
    char line[256];

    if(gpib)
   1bbc8:	81 11       	cpse	r24, r1
        gpib_task();
   1bbca:	0e 94 fc 90 	call	0x121f8	; 0x121f8 <gpib_task>

    if(!kbhit(0))
   1bbce:	80 e0       	ldi	r24, 0x00	; 0
   1bbd0:	0e 94 0d 2a 	call	0x541a	; 0x541a <uart_rx_count>
   1bbd4:	89 2b       	or	r24, r25
   1bbd6:	09 f0       	breq	.+2      	; 0x1bbda <task+0x12>
   1bbd8:	36 cf       	rjmp	.-404    	; 0x1ba46 <task.part.0>
   1bbda:	08 95       	ret

0001bbdc <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1bbdc:	cf 93       	push	r28
   1bbde:	df 93       	push	r29
   1bbe0:	cd b7       	in	r28, 0x3d	; 61
   1bbe2:	de b7       	in	r29, 0x3e	; 62
   1bbe4:	63 97       	sbiw	r28, 0x13	; 19
   1bbe6:	0f b6       	in	r0, 0x3f	; 63
   1bbe8:	f8 94       	cli
   1bbea:	de bf       	out	0x3e, r29	; 62
   1bbec:	0f be       	out	0x3f, r0	; 63
   1bbee:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1bbf0:	0e 94 28 27 	call	0x4e50	; 0x4e50 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1bbf4:	46 98       	cbi	0x08, 6	; 8
   1bbf6:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bbf8:	0e 94 92 85 	call	0x10b24	; 0x10b24 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1bbfc:	40 e0       	ldi	r20, 0x00	; 0
   1bbfe:	52 ec       	ldi	r21, 0xC2	; 194
   1bc00:	61 e0       	ldi	r22, 0x01	; 1
   1bc02:	70 e0       	ldi	r23, 0x00	; 0
   1bc04:	80 e0       	ldi	r24, 0x00	; 0
   1bc06:	0e 94 79 29 	call	0x52f2	; 0x52f2 <uart_init>
   1bc0a:	6b 01       	movw	r12, r22
   1bc0c:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1bc0e:	68 ec       	ldi	r22, 0xC8	; 200
   1bc10:	70 e0       	ldi	r23, 0x00	; 0
   1bc12:	80 e0       	ldi	r24, 0x00	; 0
   1bc14:	90 e0       	ldi	r25, 0x00	; 0
   1bc16:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>

    sep();
   1bc1a:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>
    printf("Start\n");
   1bc1e:	86 ec       	ldi	r24, 0xC6	; 198
   1bc20:	93 e4       	ldi	r25, 0x43	; 67
   1bc22:	a0 e0       	ldi	r26, 0x00	; 0
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	81 83       	std	Z+1, r24	; 0x01
   1bc2a:	92 83       	std	Z+2, r25	; 0x02
   1bc2c:	a3 83       	std	Z+3, r26	; 0x03
   1bc2e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1bc32:	80 e0       	ldi	r24, 0x00	; 0
   1bc34:	9d e2       	ldi	r25, 0x2D	; 45
   1bc36:	a1 e3       	ldi	r26, 0x31	; 49
   1bc38:	b1 e0       	ldi	r27, 0x01	; 1
   1bc3a:	ed b7       	in	r30, 0x3d	; 61
   1bc3c:	fe b7       	in	r31, 0x3e	; 62
   1bc3e:	84 83       	std	Z+4, r24	; 0x04
   1bc40:	95 83       	std	Z+5, r25	; 0x05
   1bc42:	a6 83       	std	Z+6, r26	; 0x06
   1bc44:	b7 83       	std	Z+7, r27	; 0x07
   1bc46:	85 eb       	ldi	r24, 0xB5	; 181
   1bc48:	93 e4       	ldi	r25, 0x43	; 67
   1bc4a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc4c:	81 83       	std	Z+1, r24	; 0x01
   1bc4e:	92 83       	std	Z+2, r25	; 0x02
   1bc50:	a3 83       	std	Z+3, r26	; 0x03
   1bc52:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1bc56:	ed b7       	in	r30, 0x3d	; 61
   1bc58:	fe b7       	in	r31, 0x3e	; 62
   1bc5a:	c0 86       	std	Z+8, r12	; 0x08
   1bc5c:	d1 86       	std	Z+9, r13	; 0x09
   1bc5e:	e2 86       	std	Z+10, r14	; 0x0a
   1bc60:	f3 86       	std	Z+11, r15	; 0x0b
   1bc62:	80 e0       	ldi	r24, 0x00	; 0
   1bc64:	92 ec       	ldi	r25, 0xC2	; 194
   1bc66:	a1 e0       	ldi	r26, 0x01	; 1
   1bc68:	b0 e0       	ldi	r27, 0x00	; 0
   1bc6a:	84 83       	std	Z+4, r24	; 0x04
   1bc6c:	95 83       	std	Z+5, r25	; 0x05
   1bc6e:	a6 83       	std	Z+6, r26	; 0x06
   1bc70:	b7 83       	std	Z+7, r27	; 0x07
   1bc72:	8e e8       	ldi	r24, 0x8E	; 142
   1bc74:	93 e4       	ldi	r25, 0x43	; 67
   1bc76:	a0 e0       	ldi	r26, 0x00	; 0
   1bc78:	81 83       	std	Z+1, r24	; 0x01
   1bc7a:	92 83       	std	Z+2, r25	; 0x02
   1bc7c:	a3 83       	std	Z+3, r26	; 0x03
   1bc7e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    init_timers();
   1bc82:	0e 94 78 35 	call	0x6af0	; 0x6af0 <init_timers>

    sep();
   1bc86:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1bc8a:	8f e6       	ldi	r24, 0x6F	; 111
   1bc8c:	93 e4       	ldi	r25, 0x43	; 67
   1bc8e:	a0 e0       	ldi	r26, 0x00	; 0
   1bc90:	ed b7       	in	r30, 0x3d	; 61
   1bc92:	fe b7       	in	r31, 0x3e	; 62
   1bc94:	81 83       	std	Z+1, r24	; 0x01
   1bc96:	92 83       	std	Z+2, r25	; 0x02
   1bc98:	a3 83       	std	Z+3, r26	; 0x03
   1bc9a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1bc9e:	82 e5       	ldi	r24, 0x52	; 82
   1bca0:	93 e4       	ldi	r25, 0x43	; 67
   1bca2:	a0 e0       	ldi	r26, 0x00	; 0
   1bca4:	ed b7       	in	r30, 0x3d	; 61
   1bca6:	fe b7       	in	r31, 0x3e	; 62
   1bca8:	81 83       	std	Z+1, r24	; 0x01
   1bcaa:	92 83       	std	Z+2, r25	; 0x02
   1bcac:	a3 83       	std	Z+3, r26	; 0x03
   1bcae:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf(" GNU version 3\n");
   1bcb2:	82 e4       	ldi	r24, 0x42	; 66
   1bcb4:	93 e4       	ldi	r25, 0x43	; 67
   1bcb6:	a0 e0       	ldi	r26, 0x00	; 0
   1bcb8:	ed b7       	in	r30, 0x3d	; 61
   1bcba:	fe b7       	in	r31, 0x3e	; 62
   1bcbc:	81 83       	std	Z+1, r24	; 0x01
   1bcbe:	92 83       	std	Z+2, r25	; 0x02
   1bcc0:	a3 83       	std	Z+3, r26	; 0x03
   1bcc2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bcc6:	8b e1       	ldi	r24, 0x1B	; 27
   1bcc8:	93 e4       	ldi	r25, 0x43	; 67
   1bcca:	a0 e0       	ldi	r26, 0x00	; 0
   1bccc:	ed b7       	in	r30, 0x3d	; 61
   1bcce:	fe b7       	in	r31, 0x3e	; 62
   1bcd0:	81 83       	std	Z+1, r24	; 0x01
   1bcd2:	92 83       	std	Z+2, r25	; 0x02
   1bcd4:	a3 83       	std	Z+3, r26	; 0x03
   1bcd6:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bcda:	85 ea       	ldi	r24, 0xA5	; 165
   1bcdc:	96 e1       	ldi	r25, 0x16	; 22
   1bcde:	ed b7       	in	r30, 0x3d	; 61
   1bce0:	fe b7       	in	r31, 0x3e	; 62
   1bce2:	95 83       	std	Z+5, r25	; 0x05
   1bce4:	84 83       	std	Z+4, r24	; 0x04
   1bce6:	81 e0       	ldi	r24, 0x01	; 1
   1bce8:	93 e4       	ldi	r25, 0x43	; 67
   1bcea:	a0 e0       	ldi	r26, 0x00	; 0
   1bcec:	81 83       	std	Z+1, r24	; 0x01
   1bcee:	92 83       	std	Z+2, r25	; 0x02
   1bcf0:	a3 83       	std	Z+3, r26	; 0x03
   1bcf2:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bcf6:	89 ec       	ldi	r24, 0xC9	; 201
   1bcf8:	96 e1       	ldi	r25, 0x16	; 22
   1bcfa:	ed b7       	in	r30, 0x3d	; 61
   1bcfc:	fe b7       	in	r31, 0x3e	; 62
   1bcfe:	95 83       	std	Z+5, r25	; 0x05
   1bd00:	84 83       	std	Z+4, r24	; 0x04
   1bd02:	87 ee       	ldi	r24, 0xE7	; 231
   1bd04:	92 e4       	ldi	r25, 0x42	; 66
   1bd06:	a0 e0       	ldi	r26, 0x00	; 0
   1bd08:	81 83       	std	Z+1, r24	; 0x01
   1bd0a:	92 83       	std	Z+2, r25	; 0x02
   1bd0c:	a3 83       	std	Z+3, r26	; 0x03
   1bd0e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

    sep();
   1bd12:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>
    PrintFree();
   1bd16:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <PrintFree>

    sep();
   1bd1a:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>
    delayms(200);                                 ///@brief Power up delay
   1bd1e:	68 ec       	ldi	r22, 0xC8	; 200
   1bd20:	70 e0       	ldi	r23, 0x00	; 0
   1bd22:	80 e0       	ldi	r24, 0x00	; 0
   1bd24:	90 e0       	ldi	r25, 0x00	; 0
   1bd26:	0e 94 86 28 	call	0x510c	; 0x510c <delayms>

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1bd2a:	81 ed       	ldi	r24, 0xD1	; 209
   1bd2c:	92 e4       	ldi	r25, 0x42	; 66
   1bd2e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd30:	ed b7       	in	r30, 0x3d	; 61
   1bd32:	fe b7       	in	r31, 0x3e	; 62
   1bd34:	81 83       	std	Z+1, r24	; 0x01
   1bd36:	92 83       	std	Z+2, r25	; 0x02
   1bd38:	a3 83       	std	Z+3, r26	; 0x03
   1bd3a:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1bd3e:	4b e0       	ldi	r20, 0x0B	; 11
   1bd40:	50 e0       	ldi	r21, 0x00	; 0
   1bd42:	60 e2       	ldi	r22, 0x20	; 32
   1bd44:	71 ea       	ldi	r23, 0xA1	; 161
   1bd46:	87 e0       	ldi	r24, 0x07	; 7
   1bd48:	90 e0       	ldi	r25, 0x00	; 0
   1bd4a:	0e 94 aa 26 	call	0x4d54	; 0x4d54 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1bd4e:	8b eb       	ldi	r24, 0xBB	; 187
   1bd50:	92 e4       	ldi	r25, 0x42	; 66
   1bd52:	a0 e0       	ldi	r26, 0x00	; 0
   1bd54:	ed b7       	in	r30, 0x3d	; 61
   1bd56:	fe b7       	in	r31, 0x3e	; 62
   1bd58:	81 83       	std	Z+1, r24	; 0x01
   1bd5a:	92 83       	std	Z+2, r25	; 0x02
   1bd5c:	a3 83       	std	Z+3, r26	; 0x03
   1bd5e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
   1bd62:	61 e1       	ldi	r22, 0x11	; 17
   1bd64:	81 e0       	ldi	r24, 0x01	; 1
   1bd66:	0e 94 a5 2b 	call	0x574a	; 0x574a <TWI_Init>
    sep();
   1bd6a:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1bd6e:	89 ea       	ldi	r24, 0xA9	; 169
   1bd70:	92 e4       	ldi	r25, 0x42	; 66
   1bd72:	a0 e0       	ldi	r26, 0x00	; 0
   1bd74:	ed b7       	in	r30, 0x3d	; 61
   1bd76:	fe b7       	in	r31, 0x3e	; 62
   1bd78:	81 83       	std	Z+1, r24	; 0x01
   1bd7a:	92 83       	std	Z+2, r25	; 0x02
   1bd7c:	a3 83       	std	Z+3, r26	; 0x03
   1bd7e:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    clock_clear();
   1bd82:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <clock_clear>
    printf("Clock cleared\n");
   1bd86:	8a e9       	ldi	r24, 0x9A	; 154
   1bd88:	92 e4       	ldi	r25, 0x42	; 66
   1bd8a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd8c:	ed b7       	in	r30, 0x3d	; 61
   1bd8e:	fe b7       	in	r31, 0x3e	; 62
   1bd90:	81 83       	std	Z+1, r24	; 0x01
   1bd92:	92 83       	std	Z+2, r25	; 0x02
   1bd94:	a3 83       	std	Z+3, r26	; 0x03
   1bd96:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1bd9a:	be 01       	movw	r22, r28
   1bd9c:	64 5f       	subi	r22, 0xF4	; 244
   1bd9e:	7f 4f       	sbci	r23, 0xFF	; 255
   1bda0:	80 e0       	ldi	r24, 0x00	; 0
   1bda2:	90 e0       	ldi	r25, 0x00	; 0
   1bda4:	0e 94 d5 35 	call	0x6baa	; 0x6baa <clock_getres>
    printf("SYSTEM_TASK_COUNTER_RES:%ld\n", (uint32_t) ts.tv_nsec);
   1bda8:	88 89       	ldd	r24, Y+16	; 0x10
   1bdaa:	99 89       	ldd	r25, Y+17	; 0x11
   1bdac:	aa 89       	ldd	r26, Y+18	; 0x12
   1bdae:	bb 89       	ldd	r27, Y+19	; 0x13
   1bdb0:	ed b7       	in	r30, 0x3d	; 61
   1bdb2:	fe b7       	in	r31, 0x3e	; 62
   1bdb4:	84 83       	std	Z+4, r24	; 0x04
   1bdb6:	95 83       	std	Z+5, r25	; 0x05
   1bdb8:	a6 83       	std	Z+6, r26	; 0x06
   1bdba:	b7 83       	std	Z+7, r27	; 0x07
   1bdbc:	8d e7       	ldi	r24, 0x7D	; 125
   1bdbe:	92 e4       	ldi	r25, 0x42	; 66
   1bdc0:	a0 e0       	ldi	r26, 0x00	; 0
   1bdc2:	81 83       	std	Z+1, r24	; 0x01
   1bdc4:	92 83       	std	Z+2, r25	; 0x02
   1bdc6:	a3 83       	std	Z+3, r26	; 0x03
   1bdc8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

// Timezone offset
    initialize_clock(0);
   1bdcc:	80 e0       	ldi	r24, 0x00	; 0
   1bdce:	90 e0       	ldi	r25, 0x00	; 0
   1bdd0:	0e 94 b0 3c 	call	0x7960	; 0x7960 <initialize_clock>
    display_clock();
   1bdd4:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <display_clock>
    sep();
   1bdd8:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
    printf("I2C LCD initialization start\n");
   1bddc:	8f e5       	ldi	r24, 0x5F	; 95
   1bdde:	92 e4       	ldi	r25, 0x42	; 66
   1bde0:	a0 e0       	ldi	r26, 0x00	; 0
   1bde2:	ed b7       	in	r30, 0x3d	; 61
   1bde4:	fe b7       	in	r31, 0x3e	; 62
   1bde6:	81 83       	std	Z+1, r24	; 0x01
   1bde8:	92 83       	std	Z+2, r25	; 0x02
   1bdea:	a3 83       	std	Z+3, r26	; 0x03
   1bdec:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    if ( LCD_init(LCD_ADDR) )
   1bdf0:	84 ee       	ldi	r24, 0xE4	; 228
   1bdf2:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <LCD_init>
   1bdf6:	89 2b       	or	r24, r25
   1bdf8:	b9 f0       	breq	.+46     	; 0x1be28 <main+0x24c>
    {
// Display LCD firmware version
// LCD_command(',');
// delayms(1000);

        LCD_pos(0,0);
   1bdfa:	60 e0       	ldi	r22, 0x00	; 0
   1bdfc:	80 e0       	ldi	r24, 0x00	; 0
   1bdfe:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <LCD_pos>
        lcd_printf("hp85disk V2.0\n");
   1be02:	8e ef       	ldi	r24, 0xFE	; 254
   1be04:	96 e1       	ldi	r25, 0x16	; 22
   1be06:	ed b7       	in	r30, 0x3d	; 61
   1be08:	fe b7       	in	r31, 0x3e	; 62
   1be0a:	92 83       	std	Z+2, r25	; 0x02
   1be0c:	81 83       	std	Z+1, r24	; 0x01
   1be0e:	0e 94 8e 30 	call	0x611c	; 0x611c <lcd_printf>
        lcd_printf("(C)Mike Gore ");
   1be12:	8d e0       	ldi	r24, 0x0D	; 13
   1be14:	97 e1       	ldi	r25, 0x17	; 23
   1be16:	ed b7       	in	r30, 0x3d	; 61
   1be18:	fe b7       	in	r31, 0x3e	; 62
   1be1a:	92 83       	std	Z+2, r25	; 0x02
   1be1c:	81 83       	std	Z+1, r24	; 0x01
   1be1e:	0e 94 8e 30 	call	0x611c	; 0x611c <lcd_printf>
// SparkFun V1.1 firmware loses the last character when the LCD goes to sleep

        printf("I2C LCD initialization Done\n");
   1be22:	82 e4       	ldi	r24, 0x42	; 66
   1be24:	92 e4       	ldi	r25, 0x42	; 66
   1be26:	02 c0       	rjmp	.+4      	; 0x1be2c <main+0x250>
    }
    else
    {
        printf("I2C LCD is NOT attached!\n");
   1be28:	88 e2       	ldi	r24, 0x28	; 40
   1be2a:	92 e4       	ldi	r25, 0x42	; 66
   1be2c:	a0 e0       	ldi	r26, 0x00	; 0
   1be2e:	ed b7       	in	r30, 0x3d	; 61
   1be30:	fe b7       	in	r31, 0x3e	; 62
   1be32:	81 83       	std	Z+1, r24	; 0x01
   1be34:	92 83       	std	Z+2, r25	; 0x02
   1be36:	a3 83       	std	Z+3, r26	; 0x03
   1be38:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    }
    sep();
   1be3c:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1be40:	80 e1       	ldi	r24, 0x10	; 16
   1be42:	92 e4       	ldi	r25, 0x42	; 66
   1be44:	a0 e0       	ldi	r26, 0x00	; 0
   1be46:	ed b7       	in	r30, 0x3d	; 61
   1be48:	fe b7       	in	r31, 0x3e	; 62
   1be4a:	81 83       	std	Z+1, r24	; 0x01
   1be4c:	92 83       	std	Z+2, r25	; 0x02
   1be4e:	a3 83       	std	Z+3, r26	; 0x03
   1be50:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    if ( !mmc_init(1) )
   1be54:	81 e0       	ldi	r24, 0x01	; 1
   1be56:	90 e0       	ldi	r25, 0x00	; 0
   1be58:	0e 94 1b 6f 	call	0xde36	; 0xde36 <mmc_init>
   1be5c:	89 2b       	or	r24, r25
   1be5e:	51 f4       	brne	.+20     	; 0x1be74 <main+0x298>
		printf("MMC initialized\n");
   1be60:	8f ef       	ldi	r24, 0xFF	; 255
   1be62:	91 e4       	ldi	r25, 0x41	; 65
   1be64:	a0 e0       	ldi	r26, 0x00	; 0
   1be66:	ed b7       	in	r30, 0x3d	; 61
   1be68:	fe b7       	in	r31, 0x3e	; 62
   1be6a:	81 83       	std	Z+1, r24	; 0x01
   1be6c:	92 83       	std	Z+2, r25	; 0x02
   1be6e:	a3 83       	std	Z+3, r26	; 0x03
   1be70:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    sep();
   1be74:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1be78:	0e 94 92 85 	call	0x10b24	; 0x10b24 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1be7c:	89 ee       	ldi	r24, 0xE9	; 233
   1be7e:	91 e4       	ldi	r25, 0x41	; 65
   1be80:	a0 e0       	ldi	r26, 0x00	; 0
   1be82:	ed b7       	in	r30, 0x3d	; 61
   1be84:	fe b7       	in	r31, 0x3e	; 62
   1be86:	81 83       	std	Z+1, r24	; 0x01
   1be88:	92 83       	std	Z+2, r25	; 0x02
   1be8a:	a3 83       	std	Z+3, r26	; 0x03
   1be8c:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1be90:	0e 94 e0 ba 	call	0x175c0	; 0x175c0 <printer_init>
    printf("Printer initialized\n");
   1be94:	84 ed       	ldi	r24, 0xD4	; 212
   1be96:	91 e4       	ldi	r25, 0x41	; 65
   1be98:	a0 e0       	ldi	r26, 0x00	; 0
   1be9a:	ed b7       	in	r30, 0x3d	; 61
   1be9c:	fe b7       	in	r31, 0x3e	; 62
   1be9e:	81 83       	std	Z+1, r24	; 0x01
   1bea0:	92 83       	std	Z+2, r25	; 0x02
   1bea2:	a3 83       	std	Z+3, r26	; 0x03
   1bea4:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1bea8:	82 ec       	ldi	r24, 0xC2	; 194
   1beaa:	91 e4       	ldi	r25, 0x41	; 65
   1beac:	a0 e0       	ldi	r26, 0x00	; 0
   1beae:	ed b7       	in	r30, 0x3d	; 61
   1beb0:	fe b7       	in	r31, 0x3e	; 62
   1beb2:	81 83       	std	Z+1, r24	; 0x01
   1beb4:	92 83       	std	Z+2, r25	; 0x02
   1beb6:	a3 83       	std	Z+3, r26	; 0x03
   1beb8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    gpib_timer_init();
   1bebc:	0e 94 83 83 	call	0x10706	; 0x10706 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1bec0:	8a ea       	ldi	r24, 0xAA	; 170
   1bec2:	91 e4       	ldi	r25, 0x41	; 65
   1bec4:	a0 e0       	ldi	r26, 0x00	; 0
   1bec6:	ed b7       	in	r30, 0x3d	; 61
   1bec8:	fe b7       	in	r31, 0x3e	; 62
   1beca:	81 83       	std	Z+1, r24	; 0x01
   1becc:	92 83       	std	Z+2, r25	; 0x02
   1bece:	a3 83       	std	Z+3, r26	; 0x03
   1bed0:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1bed4:	0e 94 bb 8b 	call	0x11776	; 0x11776 <gpib_file_init>
    printf("GPIB File init done\n");
   1bed8:	85 e9       	ldi	r24, 0x95	; 149
   1beda:	91 e4       	ldi	r25, 0x41	; 65
   1bedc:	a0 e0       	ldi	r26, 0x00	; 0
   1bede:	ed b7       	in	r30, 0x3d	; 61
   1bee0:	fe b7       	in	r31, 0x3e	; 62
   1bee2:	81 83       	std	Z+1, r24	; 0x01
   1bee4:	92 83       	std	Z+2, r25	; 0x02
   1bee6:	a3 83       	std	Z+3, r26	; 0x03
   1bee8:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1beec:	0e 94 bf 85 	call	0x10b7e	; 0x10b7e <gpib_state_init>
    printf("GPIB State init done\n");
   1bef0:	8f e7       	ldi	r24, 0x7F	; 127
   1bef2:	91 e4       	ldi	r25, 0x41	; 65
   1bef4:	a0 e0       	ldi	r26, 0x00	; 0
   1bef6:	ed b7       	in	r30, 0x3d	; 61
   1bef8:	fe b7       	in	r31, 0x3e	; 62
   1befa:	81 83       	std	Z+1, r24	; 0x01
   1befc:	92 83       	std	Z+2, r25	; 0x02
   1befe:	a3 83       	std	Z+3, r26	; 0x03
   1bf00:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    sep();
   1bf04:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1bf08:	80 e0       	ldi	r24, 0x00	; 0
   1bf0a:	90 e0       	ldi	r25, 0x00	; 0
   1bf0c:	0e 94 4c 93 	call	0x12698	; 0x12698 <display_Addresses>
    sep();
   1bf10:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1bf14:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1bf18:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1bf1c:	ed b7       	in	r30, 0x3d	; 61
   1bf1e:	fe b7       	in	r31, 0x3e	; 62
   1bf20:	95 83       	std	Z+5, r25	; 0x05
   1bf22:	84 83       	std	Z+4, r24	; 0x04
   1bf24:	89 e6       	ldi	r24, 0x69	; 105
   1bf26:	91 e4       	ldi	r25, 0x41	; 65
   1bf28:	a0 e0       	ldi	r26, 0x00	; 0
   1bf2a:	81 83       	std	Z+1, r24	; 0x01
   1bf2c:	92 83       	std	Z+2, r25	; 0x02
   1bf2e:	a3 83       	std	Z+3, r26	; 0x03
   1bf30:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>
    sep();
   1bf34:	0e 94 92 31 	call	0x6324	; 0x6324 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1bf38:	0e 94 e4 9e 	call	0x13dc8	; 0x13dc8 <format_drives>

#ifdef LCD_SUPPORT
    LCD_pos(0,0);
   1bf3c:	60 e0       	ldi	r22, 0x00	; 0
   1bf3e:	80 e0       	ldi	r24, 0x00	; 0
   1bf40:	0e 94 9f 2f 	call	0x5f3e	; 0x5f3e <LCD_pos>
	if(!is_error())
   1bf44:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <is_error>
   1bf48:	81 11       	cpse	r24, r1
   1bf4a:	1b c0       	rjmp	.+54     	; 0x1bf82 <main+0x3a6>
	{
		lcd_printf("SS80  Drives:%d\n",(int) count_drive_types(SS80_TYPE));
   1bf4c:	83 e0       	ldi	r24, 0x03	; 3
   1bf4e:	0e 94 c1 96 	call	0x12d82	; 0x12d82 <count_drive_types>
   1bf52:	ed b7       	in	r30, 0x3d	; 61
   1bf54:	fe b7       	in	r31, 0x3e	; 62
   1bf56:	94 83       	std	Z+4, r25	; 0x04
   1bf58:	83 83       	std	Z+3, r24	; 0x03
   1bf5a:	8b e1       	ldi	r24, 0x1B	; 27
   1bf5c:	97 e1       	ldi	r25, 0x17	; 23
   1bf5e:	92 83       	std	Z+2, r25	; 0x02
   1bf60:	81 83       	std	Z+1, r24	; 0x01
   1bf62:	0e 94 8e 30 	call	0x611c	; 0x611c <lcd_printf>
		lcd_printf("AMIGO Drives:%d ",(int) count_drive_types(AMIGO_TYPE));
   1bf66:	81 e0       	ldi	r24, 0x01	; 1
   1bf68:	0e 94 c1 96 	call	0x12d82	; 0x12d82 <count_drive_types>
   1bf6c:	ed b7       	in	r30, 0x3d	; 61
   1bf6e:	fe b7       	in	r31, 0x3e	; 62
   1bf70:	94 83       	std	Z+4, r25	; 0x04
   1bf72:	83 83       	std	Z+3, r24	; 0x03
   1bf74:	8c e2       	ldi	r24, 0x2C	; 44
   1bf76:	97 e1       	ldi	r25, 0x17	; 23
   1bf78:	92 83       	std	Z+2, r25	; 0x02
   1bf7a:	81 83       	std	Z+1, r24	; 0x01
   1bf7c:	0e 94 8e 30 	call	0x611c	; 0x611c <lcd_printf>
   1bf80:	14 c0       	rjmp	.+40     	; 0x1bfaa <main+0x3ce>
	}
	else
	{
		lcd_printf("SD Card fault\n");
   1bf82:	8d e3       	ldi	r24, 0x3D	; 61
   1bf84:	97 e1       	ldi	r25, 0x17	; 23
   1bf86:	ed b7       	in	r30, 0x3d	; 61
   1bf88:	fe b7       	in	r31, 0x3e	; 62
   1bf8a:	92 83       	std	Z+2, r25	; 0x02
   1bf8c:	81 83       	std	Z+1, r24	; 0x01
   1bf8e:	0e 94 8e 30 	call	0x611c	; 0x611c <lcd_printf>
		if(!mmc_ins_status())
   1bf92:	0e 94 ea 6e 	call	0xddd4	; 0xddd4 <mmc_ins_status>
   1bf96:	89 2b       	or	r24, r25
   1bf98:	41 f4       	brne	.+16     	; 0x1bfaa <main+0x3ce>
			lcd_printf("Not inserted\n");
   1bf9a:	8c e4       	ldi	r24, 0x4C	; 76
   1bf9c:	97 e1       	ldi	r25, 0x17	; 23
   1bf9e:	ed b7       	in	r30, 0x3d	; 61
   1bfa0:	fe b7       	in	r31, 0x3e	; 62
   1bfa2:	92 83       	std	Z+2, r25	; 0x02
   1bfa4:	81 83       	std	Z+1, r24	; 0x01
   1bfa6:	0e 94 8e 30 	call	0x611c	; 0x611c <lcd_printf>
// lcd_printf("Baud:%ld\n",baud);
//lcd_printf("Debug: %04xH\n", (int)debuglevel);
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1bfaa:	85 e5       	ldi	r24, 0x55	; 85
   1bfac:	91 e4       	ldi	r25, 0x41	; 65
   1bfae:	a0 e0       	ldi	r26, 0x00	; 0
   1bfb0:	ed b7       	in	r30, 0x3d	; 61
   1bfb2:	fe b7       	in	r31, 0x3e	; 62
   1bfb4:	81 83       	std	Z+1, r24	; 0x01
   1bfb6:	92 83       	std	Z+2, r25	; 0x02
   1bfb8:	a3 83       	std	Z+3, r26	; 0x03
   1bfba:	0e 94 cc 45 	call	0x8b98	; 0x8b98 <printf_P>

///@brief Keep the task running - it exits after every user interaction, ie key press
    while (1)
    {
        task(1);
   1bfbe:	81 e0       	ldi	r24, 0x01	; 1
   1bfc0:	03 de       	rcall	.-1018   	; 0x1bbc8 <task>
   1bfc2:	fd cf       	rjmp	.-6      	; 0x1bfbe <main+0x3e2>

0001bfc4 <__mulsi3>:
   1bfc4:	db 01       	movw	r26, r22
   1bfc6:	8f 93       	push	r24
   1bfc8:	9f 93       	push	r25
   1bfca:	8b d0       	rcall	.+278    	; 0x1c0e2 <__muluhisi3>
   1bfcc:	bf 91       	pop	r27
   1bfce:	af 91       	pop	r26
   1bfd0:	a2 9f       	mul	r26, r18
   1bfd2:	80 0d       	add	r24, r0
   1bfd4:	91 1d       	adc	r25, r1
   1bfd6:	a3 9f       	mul	r26, r19
   1bfd8:	90 0d       	add	r25, r0
   1bfda:	b2 9f       	mul	r27, r18
   1bfdc:	90 0d       	add	r25, r0
   1bfde:	11 24       	eor	r1, r1
   1bfe0:	08 95       	ret

0001bfe2 <__udivmodqi4>:
   1bfe2:	99 1b       	sub	r25, r25
   1bfe4:	79 e0       	ldi	r23, 0x09	; 9
   1bfe6:	04 c0       	rjmp	.+8      	; 0x1bff0 <__udivmodqi4_ep>

0001bfe8 <__udivmodqi4_loop>:
   1bfe8:	99 1f       	adc	r25, r25
   1bfea:	96 17       	cp	r25, r22
   1bfec:	08 f0       	brcs	.+2      	; 0x1bff0 <__udivmodqi4_ep>
   1bfee:	96 1b       	sub	r25, r22

0001bff0 <__udivmodqi4_ep>:
   1bff0:	88 1f       	adc	r24, r24
   1bff2:	7a 95       	dec	r23
   1bff4:	c9 f7       	brne	.-14     	; 0x1bfe8 <__udivmodqi4_loop>
   1bff6:	80 95       	com	r24
   1bff8:	08 95       	ret

0001bffa <__udivmodhi4>:
   1bffa:	aa 1b       	sub	r26, r26
   1bffc:	bb 1b       	sub	r27, r27
   1bffe:	51 e1       	ldi	r21, 0x11	; 17
   1c000:	07 c0       	rjmp	.+14     	; 0x1c010 <__udivmodhi4_ep>

0001c002 <__udivmodhi4_loop>:
   1c002:	aa 1f       	adc	r26, r26
   1c004:	bb 1f       	adc	r27, r27
   1c006:	a6 17       	cp	r26, r22
   1c008:	b7 07       	cpc	r27, r23
   1c00a:	10 f0       	brcs	.+4      	; 0x1c010 <__udivmodhi4_ep>
   1c00c:	a6 1b       	sub	r26, r22
   1c00e:	b7 0b       	sbc	r27, r23

0001c010 <__udivmodhi4_ep>:
   1c010:	88 1f       	adc	r24, r24
   1c012:	99 1f       	adc	r25, r25
   1c014:	5a 95       	dec	r21
   1c016:	a9 f7       	brne	.-22     	; 0x1c002 <__udivmodhi4_loop>
   1c018:	80 95       	com	r24
   1c01a:	90 95       	com	r25
   1c01c:	bc 01       	movw	r22, r24
   1c01e:	cd 01       	movw	r24, r26
   1c020:	08 95       	ret

0001c022 <__divmodhi4>:
   1c022:	97 fb       	bst	r25, 7
   1c024:	07 2e       	mov	r0, r23
   1c026:	16 f4       	brtc	.+4      	; 0x1c02c <__divmodhi4+0xa>
   1c028:	00 94       	com	r0
   1c02a:	06 d0       	rcall	.+12     	; 0x1c038 <__divmodhi4_neg1>
   1c02c:	77 fd       	sbrc	r23, 7
   1c02e:	08 d0       	rcall	.+16     	; 0x1c040 <__divmodhi4_neg2>
   1c030:	e4 df       	rcall	.-56     	; 0x1bffa <__udivmodhi4>
   1c032:	07 fc       	sbrc	r0, 7
   1c034:	05 d0       	rcall	.+10     	; 0x1c040 <__divmodhi4_neg2>
   1c036:	3e f4       	brtc	.+14     	; 0x1c046 <__divmodhi4_exit>

0001c038 <__divmodhi4_neg1>:
   1c038:	90 95       	com	r25
   1c03a:	81 95       	neg	r24
   1c03c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c03e:	08 95       	ret

0001c040 <__divmodhi4_neg2>:
   1c040:	70 95       	com	r23
   1c042:	61 95       	neg	r22
   1c044:	7f 4f       	sbci	r23, 0xFF	; 255

0001c046 <__divmodhi4_exit>:
   1c046:	08 95       	ret

0001c048 <__udivmodsi4>:
   1c048:	a1 e2       	ldi	r26, 0x21	; 33
   1c04a:	1a 2e       	mov	r1, r26
   1c04c:	aa 1b       	sub	r26, r26
   1c04e:	bb 1b       	sub	r27, r27
   1c050:	fd 01       	movw	r30, r26
   1c052:	0d c0       	rjmp	.+26     	; 0x1c06e <__udivmodsi4_ep>

0001c054 <__udivmodsi4_loop>:
   1c054:	aa 1f       	adc	r26, r26
   1c056:	bb 1f       	adc	r27, r27
   1c058:	ee 1f       	adc	r30, r30
   1c05a:	ff 1f       	adc	r31, r31
   1c05c:	a2 17       	cp	r26, r18
   1c05e:	b3 07       	cpc	r27, r19
   1c060:	e4 07       	cpc	r30, r20
   1c062:	f5 07       	cpc	r31, r21
   1c064:	20 f0       	brcs	.+8      	; 0x1c06e <__udivmodsi4_ep>
   1c066:	a2 1b       	sub	r26, r18
   1c068:	b3 0b       	sbc	r27, r19
   1c06a:	e4 0b       	sbc	r30, r20
   1c06c:	f5 0b       	sbc	r31, r21

0001c06e <__udivmodsi4_ep>:
   1c06e:	66 1f       	adc	r22, r22
   1c070:	77 1f       	adc	r23, r23
   1c072:	88 1f       	adc	r24, r24
   1c074:	99 1f       	adc	r25, r25
   1c076:	1a 94       	dec	r1
   1c078:	69 f7       	brne	.-38     	; 0x1c054 <__udivmodsi4_loop>
   1c07a:	60 95       	com	r22
   1c07c:	70 95       	com	r23
   1c07e:	80 95       	com	r24
   1c080:	90 95       	com	r25
   1c082:	9b 01       	movw	r18, r22
   1c084:	ac 01       	movw	r20, r24
   1c086:	bd 01       	movw	r22, r26
   1c088:	cf 01       	movw	r24, r30
   1c08a:	08 95       	ret

0001c08c <__divmodsi4>:
   1c08c:	05 2e       	mov	r0, r21
   1c08e:	97 fb       	bst	r25, 7
   1c090:	16 f4       	brtc	.+4      	; 0x1c096 <__divmodsi4+0xa>
   1c092:	00 94       	com	r0
   1c094:	0f d0       	rcall	.+30     	; 0x1c0b4 <__negsi2>
   1c096:	57 fd       	sbrc	r21, 7
   1c098:	05 d0       	rcall	.+10     	; 0x1c0a4 <__divmodsi4_neg2>
   1c09a:	d6 df       	rcall	.-84     	; 0x1c048 <__udivmodsi4>
   1c09c:	07 fc       	sbrc	r0, 7
   1c09e:	02 d0       	rcall	.+4      	; 0x1c0a4 <__divmodsi4_neg2>
   1c0a0:	46 f4       	brtc	.+16     	; 0x1c0b2 <__divmodsi4_exit>
   1c0a2:	08 c0       	rjmp	.+16     	; 0x1c0b4 <__negsi2>

0001c0a4 <__divmodsi4_neg2>:
   1c0a4:	50 95       	com	r21
   1c0a6:	40 95       	com	r20
   1c0a8:	30 95       	com	r19
   1c0aa:	21 95       	neg	r18
   1c0ac:	3f 4f       	sbci	r19, 0xFF	; 255
   1c0ae:	4f 4f       	sbci	r20, 0xFF	; 255
   1c0b0:	5f 4f       	sbci	r21, 0xFF	; 255

0001c0b2 <__divmodsi4_exit>:
   1c0b2:	08 95       	ret

0001c0b4 <__negsi2>:
   1c0b4:	90 95       	com	r25
   1c0b6:	80 95       	com	r24
   1c0b8:	70 95       	com	r23
   1c0ba:	61 95       	neg	r22
   1c0bc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c0be:	8f 4f       	sbci	r24, 0xFF	; 255
   1c0c0:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0c2:	08 95       	ret

0001c0c4 <__tablejump2__>:
   1c0c4:	ee 0f       	add	r30, r30
   1c0c6:	ff 1f       	adc	r31, r31
   1c0c8:	00 24       	eor	r0, r0
   1c0ca:	00 1c       	adc	r0, r0
   1c0cc:	0b be       	out	0x3b, r0	; 59
   1c0ce:	07 90       	elpm	r0, Z+
   1c0d0:	f6 91       	elpm	r31, Z
   1c0d2:	e0 2d       	mov	r30, r0
   1c0d4:	09 94       	ijmp

0001c0d6 <__usmulhisi3>:
   1c0d6:	6f d0       	rcall	.+222    	; 0x1c1b6 <__umulhisi3>

0001c0d8 <__usmulhisi3_tail>:
   1c0d8:	b7 ff       	sbrs	r27, 7
   1c0da:	08 95       	ret
   1c0dc:	82 1b       	sub	r24, r18
   1c0de:	93 0b       	sbc	r25, r19
   1c0e0:	08 95       	ret

0001c0e2 <__muluhisi3>:
   1c0e2:	69 d0       	rcall	.+210    	; 0x1c1b6 <__umulhisi3>
   1c0e4:	a5 9f       	mul	r26, r21
   1c0e6:	90 0d       	add	r25, r0
   1c0e8:	b4 9f       	mul	r27, r20
   1c0ea:	90 0d       	add	r25, r0
   1c0ec:	a4 9f       	mul	r26, r20
   1c0ee:	80 0d       	add	r24, r0
   1c0f0:	91 1d       	adc	r25, r1
   1c0f2:	11 24       	eor	r1, r1
   1c0f4:	08 95       	ret

0001c0f6 <__mulshisi3>:
   1c0f6:	b7 ff       	sbrs	r27, 7
   1c0f8:	f4 cf       	rjmp	.-24     	; 0x1c0e2 <__muluhisi3>

0001c0fa <__mulohisi3>:
   1c0fa:	f3 df       	rcall	.-26     	; 0x1c0e2 <__muluhisi3>
   1c0fc:	82 1b       	sub	r24, r18
   1c0fe:	93 0b       	sbc	r25, r19
   1c100:	08 95       	ret

0001c102 <__negdi2>:
   1c102:	60 95       	com	r22
   1c104:	70 95       	com	r23
   1c106:	80 95       	com	r24
   1c108:	90 95       	com	r25
   1c10a:	30 95       	com	r19
   1c10c:	40 95       	com	r20
   1c10e:	50 95       	com	r21
   1c110:	21 95       	neg	r18
   1c112:	3f 4f       	sbci	r19, 0xFF	; 255
   1c114:	4f 4f       	sbci	r20, 0xFF	; 255
   1c116:	5f 4f       	sbci	r21, 0xFF	; 255
   1c118:	6f 4f       	sbci	r22, 0xFF	; 255
   1c11a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c11c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c11e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c120:	08 95       	ret

0001c122 <__prologue_saves__>:
   1c122:	2f 92       	push	r2
   1c124:	3f 92       	push	r3
   1c126:	4f 92       	push	r4
   1c128:	5f 92       	push	r5
   1c12a:	6f 92       	push	r6
   1c12c:	7f 92       	push	r7
   1c12e:	8f 92       	push	r8
   1c130:	9f 92       	push	r9
   1c132:	af 92       	push	r10
   1c134:	bf 92       	push	r11
   1c136:	cf 92       	push	r12
   1c138:	df 92       	push	r13
   1c13a:	ef 92       	push	r14
   1c13c:	ff 92       	push	r15
   1c13e:	0f 93       	push	r16
   1c140:	1f 93       	push	r17
   1c142:	cf 93       	push	r28
   1c144:	df 93       	push	r29
   1c146:	cd b7       	in	r28, 0x3d	; 61
   1c148:	de b7       	in	r29, 0x3e	; 62
   1c14a:	ca 1b       	sub	r28, r26
   1c14c:	db 0b       	sbc	r29, r27
   1c14e:	0f b6       	in	r0, 0x3f	; 63
   1c150:	f8 94       	cli
   1c152:	de bf       	out	0x3e, r29	; 62
   1c154:	0f be       	out	0x3f, r0	; 63
   1c156:	cd bf       	out	0x3d, r28	; 61
   1c158:	09 94       	ijmp

0001c15a <__epilogue_restores__>:
   1c15a:	2a 88       	ldd	r2, Y+18	; 0x12
   1c15c:	39 88       	ldd	r3, Y+17	; 0x11
   1c15e:	48 88       	ldd	r4, Y+16	; 0x10
   1c160:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c162:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c164:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c166:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c168:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c16a:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c16c:	b9 84       	ldd	r11, Y+9	; 0x09
   1c16e:	c8 84       	ldd	r12, Y+8	; 0x08
   1c170:	df 80       	ldd	r13, Y+7	; 0x07
   1c172:	ee 80       	ldd	r14, Y+6	; 0x06
   1c174:	fd 80       	ldd	r15, Y+5	; 0x05
   1c176:	0c 81       	ldd	r16, Y+4	; 0x04
   1c178:	1b 81       	ldd	r17, Y+3	; 0x03
   1c17a:	aa 81       	ldd	r26, Y+2	; 0x02
   1c17c:	b9 81       	ldd	r27, Y+1	; 0x01
   1c17e:	ce 0f       	add	r28, r30
   1c180:	d1 1d       	adc	r29, r1
   1c182:	0f b6       	in	r0, 0x3f	; 63
   1c184:	f8 94       	cli
   1c186:	de bf       	out	0x3e, r29	; 62
   1c188:	0f be       	out	0x3f, r0	; 63
   1c18a:	cd bf       	out	0x3d, r28	; 61
   1c18c:	ed 01       	movw	r28, r26
   1c18e:	08 95       	ret

0001c190 <__xload_1>:
   1c190:	57 fd       	sbrc	r21, 7
   1c192:	03 c0       	rjmp	.+6      	; 0x1c19a <__xload_1+0xa>
   1c194:	5b bf       	out	0x3b, r21	; 59
   1c196:	67 91       	elpm	r22, Z+
   1c198:	08 95       	ret
   1c19a:	60 81       	ld	r22, Z
   1c19c:	08 95       	ret

0001c19e <__cmpdi2_s8>:
   1c19e:	00 24       	eor	r0, r0
   1c1a0:	a7 fd       	sbrc	r26, 7
   1c1a2:	00 94       	com	r0
   1c1a4:	2a 17       	cp	r18, r26
   1c1a6:	30 05       	cpc	r19, r0
   1c1a8:	40 05       	cpc	r20, r0
   1c1aa:	50 05       	cpc	r21, r0
   1c1ac:	60 05       	cpc	r22, r0
   1c1ae:	70 05       	cpc	r23, r0
   1c1b0:	80 05       	cpc	r24, r0
   1c1b2:	90 05       	cpc	r25, r0
   1c1b4:	08 95       	ret

0001c1b6 <__umulhisi3>:
   1c1b6:	a2 9f       	mul	r26, r18
   1c1b8:	b0 01       	movw	r22, r0
   1c1ba:	b3 9f       	mul	r27, r19
   1c1bc:	c0 01       	movw	r24, r0
   1c1be:	a3 9f       	mul	r26, r19
   1c1c0:	70 0d       	add	r23, r0
   1c1c2:	81 1d       	adc	r24, r1
   1c1c4:	11 24       	eor	r1, r1
   1c1c6:	91 1d       	adc	r25, r1
   1c1c8:	b2 9f       	mul	r27, r18
   1c1ca:	70 0d       	add	r23, r0
   1c1cc:	81 1d       	adc	r24, r1
   1c1ce:	11 24       	eor	r1, r1
   1c1d0:	91 1d       	adc	r25, r1
   1c1d2:	08 95       	ret

0001c1d4 <__subsf3>:
   1c1d4:	50 58       	subi	r21, 0x80	; 128

0001c1d6 <__addsf3>:
   1c1d6:	bb 27       	eor	r27, r27
   1c1d8:	aa 27       	eor	r26, r26
   1c1da:	0e d0       	rcall	.+28     	; 0x1c1f8 <__addsf3x>
   1c1dc:	75 c1       	rjmp	.+746    	; 0x1c4c8 <__fp_round>
   1c1de:	66 d1       	rcall	.+716    	; 0x1c4ac <__fp_pscA>
   1c1e0:	30 f0       	brcs	.+12     	; 0x1c1ee <__addsf3+0x18>
   1c1e2:	6b d1       	rcall	.+726    	; 0x1c4ba <__fp_pscB>
   1c1e4:	20 f0       	brcs	.+8      	; 0x1c1ee <__addsf3+0x18>
   1c1e6:	31 f4       	brne	.+12     	; 0x1c1f4 <__addsf3+0x1e>
   1c1e8:	9f 3f       	cpi	r25, 0xFF	; 255
   1c1ea:	11 f4       	brne	.+4      	; 0x1c1f0 <__addsf3+0x1a>
   1c1ec:	1e f4       	brtc	.+6      	; 0x1c1f4 <__addsf3+0x1e>
   1c1ee:	5b c1       	rjmp	.+694    	; 0x1c4a6 <__fp_nan>
   1c1f0:	0e f4       	brtc	.+2      	; 0x1c1f4 <__addsf3+0x1e>
   1c1f2:	e0 95       	com	r30
   1c1f4:	e7 fb       	bst	r30, 7
   1c1f6:	51 c1       	rjmp	.+674    	; 0x1c49a <__fp_inf>

0001c1f8 <__addsf3x>:
   1c1f8:	e9 2f       	mov	r30, r25
   1c1fa:	77 d1       	rcall	.+750    	; 0x1c4ea <__fp_split3>
   1c1fc:	80 f3       	brcs	.-32     	; 0x1c1de <__addsf3+0x8>
   1c1fe:	ba 17       	cp	r27, r26
   1c200:	62 07       	cpc	r22, r18
   1c202:	73 07       	cpc	r23, r19
   1c204:	84 07       	cpc	r24, r20
   1c206:	95 07       	cpc	r25, r21
   1c208:	18 f0       	brcs	.+6      	; 0x1c210 <__addsf3x+0x18>
   1c20a:	71 f4       	brne	.+28     	; 0x1c228 <__addsf3x+0x30>
   1c20c:	9e f5       	brtc	.+102    	; 0x1c274 <__addsf3x+0x7c>
   1c20e:	8f c1       	rjmp	.+798    	; 0x1c52e <__fp_zero>
   1c210:	0e f4       	brtc	.+2      	; 0x1c214 <__addsf3x+0x1c>
   1c212:	e0 95       	com	r30
   1c214:	0b 2e       	mov	r0, r27
   1c216:	ba 2f       	mov	r27, r26
   1c218:	a0 2d       	mov	r26, r0
   1c21a:	0b 01       	movw	r0, r22
   1c21c:	b9 01       	movw	r22, r18
   1c21e:	90 01       	movw	r18, r0
   1c220:	0c 01       	movw	r0, r24
   1c222:	ca 01       	movw	r24, r20
   1c224:	a0 01       	movw	r20, r0
   1c226:	11 24       	eor	r1, r1
   1c228:	ff 27       	eor	r31, r31
   1c22a:	59 1b       	sub	r21, r25
   1c22c:	99 f0       	breq	.+38     	; 0x1c254 <__addsf3x+0x5c>
   1c22e:	59 3f       	cpi	r21, 0xF9	; 249
   1c230:	50 f4       	brcc	.+20     	; 0x1c246 <__addsf3x+0x4e>
   1c232:	50 3e       	cpi	r21, 0xE0	; 224
   1c234:	68 f1       	brcs	.+90     	; 0x1c290 <__addsf3x+0x98>
   1c236:	1a 16       	cp	r1, r26
   1c238:	f0 40       	sbci	r31, 0x00	; 0
   1c23a:	a2 2f       	mov	r26, r18
   1c23c:	23 2f       	mov	r18, r19
   1c23e:	34 2f       	mov	r19, r20
   1c240:	44 27       	eor	r20, r20
   1c242:	58 5f       	subi	r21, 0xF8	; 248
   1c244:	f3 cf       	rjmp	.-26     	; 0x1c22c <__addsf3x+0x34>
   1c246:	46 95       	lsr	r20
   1c248:	37 95       	ror	r19
   1c24a:	27 95       	ror	r18
   1c24c:	a7 95       	ror	r26
   1c24e:	f0 40       	sbci	r31, 0x00	; 0
   1c250:	53 95       	inc	r21
   1c252:	c9 f7       	brne	.-14     	; 0x1c246 <__addsf3x+0x4e>
   1c254:	7e f4       	brtc	.+30     	; 0x1c274 <__addsf3x+0x7c>
   1c256:	1f 16       	cp	r1, r31
   1c258:	ba 0b       	sbc	r27, r26
   1c25a:	62 0b       	sbc	r22, r18
   1c25c:	73 0b       	sbc	r23, r19
   1c25e:	84 0b       	sbc	r24, r20
   1c260:	ba f0       	brmi	.+46     	; 0x1c290 <__addsf3x+0x98>
   1c262:	91 50       	subi	r25, 0x01	; 1
   1c264:	a1 f0       	breq	.+40     	; 0x1c28e <__addsf3x+0x96>
   1c266:	ff 0f       	add	r31, r31
   1c268:	bb 1f       	adc	r27, r27
   1c26a:	66 1f       	adc	r22, r22
   1c26c:	77 1f       	adc	r23, r23
   1c26e:	88 1f       	adc	r24, r24
   1c270:	c2 f7       	brpl	.-16     	; 0x1c262 <__addsf3x+0x6a>
   1c272:	0e c0       	rjmp	.+28     	; 0x1c290 <__addsf3x+0x98>
   1c274:	ba 0f       	add	r27, r26
   1c276:	62 1f       	adc	r22, r18
   1c278:	73 1f       	adc	r23, r19
   1c27a:	84 1f       	adc	r24, r20
   1c27c:	48 f4       	brcc	.+18     	; 0x1c290 <__addsf3x+0x98>
   1c27e:	87 95       	ror	r24
   1c280:	77 95       	ror	r23
   1c282:	67 95       	ror	r22
   1c284:	b7 95       	ror	r27
   1c286:	f7 95       	ror	r31
   1c288:	9e 3f       	cpi	r25, 0xFE	; 254
   1c28a:	08 f0       	brcs	.+2      	; 0x1c28e <__addsf3x+0x96>
   1c28c:	b3 cf       	rjmp	.-154    	; 0x1c1f4 <__addsf3+0x1e>
   1c28e:	93 95       	inc	r25
   1c290:	88 0f       	add	r24, r24
   1c292:	08 f0       	brcs	.+2      	; 0x1c296 <__addsf3x+0x9e>
   1c294:	99 27       	eor	r25, r25
   1c296:	ee 0f       	add	r30, r30
   1c298:	97 95       	ror	r25
   1c29a:	87 95       	ror	r24
   1c29c:	08 95       	ret

0001c29e <__cmpsf2>:
   1c29e:	d9 d0       	rcall	.+434    	; 0x1c452 <__fp_cmp>
   1c2a0:	08 f4       	brcc	.+2      	; 0x1c2a4 <__cmpsf2+0x6>
   1c2a2:	81 e0       	ldi	r24, 0x01	; 1
   1c2a4:	08 95       	ret

0001c2a6 <__divsf3>:
   1c2a6:	0c d0       	rcall	.+24     	; 0x1c2c0 <__divsf3x>
   1c2a8:	0f c1       	rjmp	.+542    	; 0x1c4c8 <__fp_round>
   1c2aa:	07 d1       	rcall	.+526    	; 0x1c4ba <__fp_pscB>
   1c2ac:	40 f0       	brcs	.+16     	; 0x1c2be <__divsf3+0x18>
   1c2ae:	fe d0       	rcall	.+508    	; 0x1c4ac <__fp_pscA>
   1c2b0:	30 f0       	brcs	.+12     	; 0x1c2be <__divsf3+0x18>
   1c2b2:	21 f4       	brne	.+8      	; 0x1c2bc <__divsf3+0x16>
   1c2b4:	5f 3f       	cpi	r21, 0xFF	; 255
   1c2b6:	19 f0       	breq	.+6      	; 0x1c2be <__divsf3+0x18>
   1c2b8:	f0 c0       	rjmp	.+480    	; 0x1c49a <__fp_inf>
   1c2ba:	51 11       	cpse	r21, r1
   1c2bc:	39 c1       	rjmp	.+626    	; 0x1c530 <__fp_szero>
   1c2be:	f3 c0       	rjmp	.+486    	; 0x1c4a6 <__fp_nan>

0001c2c0 <__divsf3x>:
   1c2c0:	14 d1       	rcall	.+552    	; 0x1c4ea <__fp_split3>
   1c2c2:	98 f3       	brcs	.-26     	; 0x1c2aa <__divsf3+0x4>

0001c2c4 <__divsf3_pse>:
   1c2c4:	99 23       	and	r25, r25
   1c2c6:	c9 f3       	breq	.-14     	; 0x1c2ba <__divsf3+0x14>
   1c2c8:	55 23       	and	r21, r21
   1c2ca:	b1 f3       	breq	.-20     	; 0x1c2b8 <__divsf3+0x12>
   1c2cc:	95 1b       	sub	r25, r21
   1c2ce:	55 0b       	sbc	r21, r21
   1c2d0:	bb 27       	eor	r27, r27
   1c2d2:	aa 27       	eor	r26, r26
   1c2d4:	62 17       	cp	r22, r18
   1c2d6:	73 07       	cpc	r23, r19
   1c2d8:	84 07       	cpc	r24, r20
   1c2da:	38 f0       	brcs	.+14     	; 0x1c2ea <__divsf3_pse+0x26>
   1c2dc:	9f 5f       	subi	r25, 0xFF	; 255
   1c2de:	5f 4f       	sbci	r21, 0xFF	; 255
   1c2e0:	22 0f       	add	r18, r18
   1c2e2:	33 1f       	adc	r19, r19
   1c2e4:	44 1f       	adc	r20, r20
   1c2e6:	aa 1f       	adc	r26, r26
   1c2e8:	a9 f3       	breq	.-22     	; 0x1c2d4 <__divsf3_pse+0x10>
   1c2ea:	33 d0       	rcall	.+102    	; 0x1c352 <__divsf3_pse+0x8e>
   1c2ec:	0e 2e       	mov	r0, r30
   1c2ee:	3a f0       	brmi	.+14     	; 0x1c2fe <__divsf3_pse+0x3a>
   1c2f0:	e0 e8       	ldi	r30, 0x80	; 128
   1c2f2:	30 d0       	rcall	.+96     	; 0x1c354 <__divsf3_pse+0x90>
   1c2f4:	91 50       	subi	r25, 0x01	; 1
   1c2f6:	50 40       	sbci	r21, 0x00	; 0
   1c2f8:	e6 95       	lsr	r30
   1c2fa:	00 1c       	adc	r0, r0
   1c2fc:	ca f7       	brpl	.-14     	; 0x1c2f0 <__divsf3_pse+0x2c>
   1c2fe:	29 d0       	rcall	.+82     	; 0x1c352 <__divsf3_pse+0x8e>
   1c300:	fe 2f       	mov	r31, r30
   1c302:	27 d0       	rcall	.+78     	; 0x1c352 <__divsf3_pse+0x8e>
   1c304:	66 0f       	add	r22, r22
   1c306:	77 1f       	adc	r23, r23
   1c308:	88 1f       	adc	r24, r24
   1c30a:	bb 1f       	adc	r27, r27
   1c30c:	26 17       	cp	r18, r22
   1c30e:	37 07       	cpc	r19, r23
   1c310:	48 07       	cpc	r20, r24
   1c312:	ab 07       	cpc	r26, r27
   1c314:	b0 e8       	ldi	r27, 0x80	; 128
   1c316:	09 f0       	breq	.+2      	; 0x1c31a <__divsf3_pse+0x56>
   1c318:	bb 0b       	sbc	r27, r27
   1c31a:	80 2d       	mov	r24, r0
   1c31c:	bf 01       	movw	r22, r30
   1c31e:	ff 27       	eor	r31, r31
   1c320:	93 58       	subi	r25, 0x83	; 131
   1c322:	5f 4f       	sbci	r21, 0xFF	; 255
   1c324:	2a f0       	brmi	.+10     	; 0x1c330 <__divsf3_pse+0x6c>
   1c326:	9e 3f       	cpi	r25, 0xFE	; 254
   1c328:	51 05       	cpc	r21, r1
   1c32a:	68 f0       	brcs	.+26     	; 0x1c346 <__divsf3_pse+0x82>
   1c32c:	b6 c0       	rjmp	.+364    	; 0x1c49a <__fp_inf>
   1c32e:	00 c1       	rjmp	.+512    	; 0x1c530 <__fp_szero>
   1c330:	5f 3f       	cpi	r21, 0xFF	; 255
   1c332:	ec f3       	brlt	.-6      	; 0x1c32e <__divsf3_pse+0x6a>
   1c334:	98 3e       	cpi	r25, 0xE8	; 232
   1c336:	dc f3       	brlt	.-10     	; 0x1c32e <__divsf3_pse+0x6a>
   1c338:	86 95       	lsr	r24
   1c33a:	77 95       	ror	r23
   1c33c:	67 95       	ror	r22
   1c33e:	b7 95       	ror	r27
   1c340:	f7 95       	ror	r31
   1c342:	9f 5f       	subi	r25, 0xFF	; 255
   1c344:	c9 f7       	brne	.-14     	; 0x1c338 <__divsf3_pse+0x74>
   1c346:	88 0f       	add	r24, r24
   1c348:	91 1d       	adc	r25, r1
   1c34a:	96 95       	lsr	r25
   1c34c:	87 95       	ror	r24
   1c34e:	97 f9       	bld	r25, 7
   1c350:	08 95       	ret
   1c352:	e1 e0       	ldi	r30, 0x01	; 1
   1c354:	66 0f       	add	r22, r22
   1c356:	77 1f       	adc	r23, r23
   1c358:	88 1f       	adc	r24, r24
   1c35a:	bb 1f       	adc	r27, r27
   1c35c:	62 17       	cp	r22, r18
   1c35e:	73 07       	cpc	r23, r19
   1c360:	84 07       	cpc	r24, r20
   1c362:	ba 07       	cpc	r27, r26
   1c364:	20 f0       	brcs	.+8      	; 0x1c36e <__divsf3_pse+0xaa>
   1c366:	62 1b       	sub	r22, r18
   1c368:	73 0b       	sbc	r23, r19
   1c36a:	84 0b       	sbc	r24, r20
   1c36c:	ba 0b       	sbc	r27, r26
   1c36e:	ee 1f       	adc	r30, r30
   1c370:	88 f7       	brcc	.-30     	; 0x1c354 <__divsf3_pse+0x90>
   1c372:	e0 95       	com	r30
   1c374:	08 95       	ret

0001c376 <__fixsfsi>:
   1c376:	04 d0       	rcall	.+8      	; 0x1c380 <__fixunssfsi>
   1c378:	68 94       	set
   1c37a:	b1 11       	cpse	r27, r1
   1c37c:	d9 c0       	rjmp	.+434    	; 0x1c530 <__fp_szero>
   1c37e:	08 95       	ret

0001c380 <__fixunssfsi>:
   1c380:	bc d0       	rcall	.+376    	; 0x1c4fa <__fp_splitA>
   1c382:	88 f0       	brcs	.+34     	; 0x1c3a6 <__fixunssfsi+0x26>
   1c384:	9f 57       	subi	r25, 0x7F	; 127
   1c386:	90 f0       	brcs	.+36     	; 0x1c3ac <__fixunssfsi+0x2c>
   1c388:	b9 2f       	mov	r27, r25
   1c38a:	99 27       	eor	r25, r25
   1c38c:	b7 51       	subi	r27, 0x17	; 23
   1c38e:	a0 f0       	brcs	.+40     	; 0x1c3b8 <__fixunssfsi+0x38>
   1c390:	d1 f0       	breq	.+52     	; 0x1c3c6 <__fixunssfsi+0x46>
   1c392:	66 0f       	add	r22, r22
   1c394:	77 1f       	adc	r23, r23
   1c396:	88 1f       	adc	r24, r24
   1c398:	99 1f       	adc	r25, r25
   1c39a:	1a f0       	brmi	.+6      	; 0x1c3a2 <__fixunssfsi+0x22>
   1c39c:	ba 95       	dec	r27
   1c39e:	c9 f7       	brne	.-14     	; 0x1c392 <__fixunssfsi+0x12>
   1c3a0:	12 c0       	rjmp	.+36     	; 0x1c3c6 <__fixunssfsi+0x46>
   1c3a2:	b1 30       	cpi	r27, 0x01	; 1
   1c3a4:	81 f0       	breq	.+32     	; 0x1c3c6 <__fixunssfsi+0x46>
   1c3a6:	c3 d0       	rcall	.+390    	; 0x1c52e <__fp_zero>
   1c3a8:	b1 e0       	ldi	r27, 0x01	; 1
   1c3aa:	08 95       	ret
   1c3ac:	c0 c0       	rjmp	.+384    	; 0x1c52e <__fp_zero>
   1c3ae:	67 2f       	mov	r22, r23
   1c3b0:	78 2f       	mov	r23, r24
   1c3b2:	88 27       	eor	r24, r24
   1c3b4:	b8 5f       	subi	r27, 0xF8	; 248
   1c3b6:	39 f0       	breq	.+14     	; 0x1c3c6 <__fixunssfsi+0x46>
   1c3b8:	b9 3f       	cpi	r27, 0xF9	; 249
   1c3ba:	cc f3       	brlt	.-14     	; 0x1c3ae <__fixunssfsi+0x2e>
   1c3bc:	86 95       	lsr	r24
   1c3be:	77 95       	ror	r23
   1c3c0:	67 95       	ror	r22
   1c3c2:	b3 95       	inc	r27
   1c3c4:	d9 f7       	brne	.-10     	; 0x1c3bc <__fixunssfsi+0x3c>
   1c3c6:	3e f4       	brtc	.+14     	; 0x1c3d6 <__fixunssfsi+0x56>
   1c3c8:	90 95       	com	r25
   1c3ca:	80 95       	com	r24
   1c3cc:	70 95       	com	r23
   1c3ce:	61 95       	neg	r22
   1c3d0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3d2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c3d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c3d6:	08 95       	ret

0001c3d8 <__floatunsisf>:
   1c3d8:	e8 94       	clt
   1c3da:	09 c0       	rjmp	.+18     	; 0x1c3ee <__floatsisf+0x12>

0001c3dc <__floatsisf>:
   1c3dc:	97 fb       	bst	r25, 7
   1c3de:	3e f4       	brtc	.+14     	; 0x1c3ee <__floatsisf+0x12>
   1c3e0:	90 95       	com	r25
   1c3e2:	80 95       	com	r24
   1c3e4:	70 95       	com	r23
   1c3e6:	61 95       	neg	r22
   1c3e8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c3ea:	8f 4f       	sbci	r24, 0xFF	; 255
   1c3ec:	9f 4f       	sbci	r25, 0xFF	; 255
   1c3ee:	99 23       	and	r25, r25
   1c3f0:	a9 f0       	breq	.+42     	; 0x1c41c <__floatsisf+0x40>
   1c3f2:	f9 2f       	mov	r31, r25
   1c3f4:	96 e9       	ldi	r25, 0x96	; 150
   1c3f6:	bb 27       	eor	r27, r27
   1c3f8:	93 95       	inc	r25
   1c3fa:	f6 95       	lsr	r31
   1c3fc:	87 95       	ror	r24
   1c3fe:	77 95       	ror	r23
   1c400:	67 95       	ror	r22
   1c402:	b7 95       	ror	r27
   1c404:	f1 11       	cpse	r31, r1
   1c406:	f8 cf       	rjmp	.-16     	; 0x1c3f8 <__floatsisf+0x1c>
   1c408:	fa f4       	brpl	.+62     	; 0x1c448 <__floatsisf+0x6c>
   1c40a:	bb 0f       	add	r27, r27
   1c40c:	11 f4       	brne	.+4      	; 0x1c412 <__floatsisf+0x36>
   1c40e:	60 ff       	sbrs	r22, 0
   1c410:	1b c0       	rjmp	.+54     	; 0x1c448 <__floatsisf+0x6c>
   1c412:	6f 5f       	subi	r22, 0xFF	; 255
   1c414:	7f 4f       	sbci	r23, 0xFF	; 255
   1c416:	8f 4f       	sbci	r24, 0xFF	; 255
   1c418:	9f 4f       	sbci	r25, 0xFF	; 255
   1c41a:	16 c0       	rjmp	.+44     	; 0x1c448 <__floatsisf+0x6c>
   1c41c:	88 23       	and	r24, r24
   1c41e:	11 f0       	breq	.+4      	; 0x1c424 <__floatsisf+0x48>
   1c420:	96 e9       	ldi	r25, 0x96	; 150
   1c422:	11 c0       	rjmp	.+34     	; 0x1c446 <__floatsisf+0x6a>
   1c424:	77 23       	and	r23, r23
   1c426:	21 f0       	breq	.+8      	; 0x1c430 <__floatsisf+0x54>
   1c428:	9e e8       	ldi	r25, 0x8E	; 142
   1c42a:	87 2f       	mov	r24, r23
   1c42c:	76 2f       	mov	r23, r22
   1c42e:	05 c0       	rjmp	.+10     	; 0x1c43a <__floatsisf+0x5e>
   1c430:	66 23       	and	r22, r22
   1c432:	71 f0       	breq	.+28     	; 0x1c450 <__floatsisf+0x74>
   1c434:	96 e8       	ldi	r25, 0x86	; 134
   1c436:	86 2f       	mov	r24, r22
   1c438:	70 e0       	ldi	r23, 0x00	; 0
   1c43a:	60 e0       	ldi	r22, 0x00	; 0
   1c43c:	2a f0       	brmi	.+10     	; 0x1c448 <__floatsisf+0x6c>
   1c43e:	9a 95       	dec	r25
   1c440:	66 0f       	add	r22, r22
   1c442:	77 1f       	adc	r23, r23
   1c444:	88 1f       	adc	r24, r24
   1c446:	da f7       	brpl	.-10     	; 0x1c43e <__floatsisf+0x62>
   1c448:	88 0f       	add	r24, r24
   1c44a:	96 95       	lsr	r25
   1c44c:	87 95       	ror	r24
   1c44e:	97 f9       	bld	r25, 7
   1c450:	08 95       	ret

0001c452 <__fp_cmp>:
   1c452:	99 0f       	add	r25, r25
   1c454:	00 08       	sbc	r0, r0
   1c456:	55 0f       	add	r21, r21
   1c458:	aa 0b       	sbc	r26, r26
   1c45a:	e0 e8       	ldi	r30, 0x80	; 128
   1c45c:	fe ef       	ldi	r31, 0xFE	; 254
   1c45e:	16 16       	cp	r1, r22
   1c460:	17 06       	cpc	r1, r23
   1c462:	e8 07       	cpc	r30, r24
   1c464:	f9 07       	cpc	r31, r25
   1c466:	c0 f0       	brcs	.+48     	; 0x1c498 <__fp_cmp+0x46>
   1c468:	12 16       	cp	r1, r18
   1c46a:	13 06       	cpc	r1, r19
   1c46c:	e4 07       	cpc	r30, r20
   1c46e:	f5 07       	cpc	r31, r21
   1c470:	98 f0       	brcs	.+38     	; 0x1c498 <__fp_cmp+0x46>
   1c472:	62 1b       	sub	r22, r18
   1c474:	73 0b       	sbc	r23, r19
   1c476:	84 0b       	sbc	r24, r20
   1c478:	95 0b       	sbc	r25, r21
   1c47a:	39 f4       	brne	.+14     	; 0x1c48a <__fp_cmp+0x38>
   1c47c:	0a 26       	eor	r0, r26
   1c47e:	61 f0       	breq	.+24     	; 0x1c498 <__fp_cmp+0x46>
   1c480:	23 2b       	or	r18, r19
   1c482:	24 2b       	or	r18, r20
   1c484:	25 2b       	or	r18, r21
   1c486:	21 f4       	brne	.+8      	; 0x1c490 <__fp_cmp+0x3e>
   1c488:	08 95       	ret
   1c48a:	0a 26       	eor	r0, r26
   1c48c:	09 f4       	brne	.+2      	; 0x1c490 <__fp_cmp+0x3e>
   1c48e:	a1 40       	sbci	r26, 0x01	; 1
   1c490:	a6 95       	lsr	r26
   1c492:	8f ef       	ldi	r24, 0xFF	; 255
   1c494:	81 1d       	adc	r24, r1
   1c496:	81 1d       	adc	r24, r1
   1c498:	08 95       	ret

0001c49a <__fp_inf>:
   1c49a:	97 f9       	bld	r25, 7
   1c49c:	9f 67       	ori	r25, 0x7F	; 127
   1c49e:	80 e8       	ldi	r24, 0x80	; 128
   1c4a0:	70 e0       	ldi	r23, 0x00	; 0
   1c4a2:	60 e0       	ldi	r22, 0x00	; 0
   1c4a4:	08 95       	ret

0001c4a6 <__fp_nan>:
   1c4a6:	9f ef       	ldi	r25, 0xFF	; 255
   1c4a8:	80 ec       	ldi	r24, 0xC0	; 192
   1c4aa:	08 95       	ret

0001c4ac <__fp_pscA>:
   1c4ac:	00 24       	eor	r0, r0
   1c4ae:	0a 94       	dec	r0
   1c4b0:	16 16       	cp	r1, r22
   1c4b2:	17 06       	cpc	r1, r23
   1c4b4:	18 06       	cpc	r1, r24
   1c4b6:	09 06       	cpc	r0, r25
   1c4b8:	08 95       	ret

0001c4ba <__fp_pscB>:
   1c4ba:	00 24       	eor	r0, r0
   1c4bc:	0a 94       	dec	r0
   1c4be:	12 16       	cp	r1, r18
   1c4c0:	13 06       	cpc	r1, r19
   1c4c2:	14 06       	cpc	r1, r20
   1c4c4:	05 06       	cpc	r0, r21
   1c4c6:	08 95       	ret

0001c4c8 <__fp_round>:
   1c4c8:	09 2e       	mov	r0, r25
   1c4ca:	03 94       	inc	r0
   1c4cc:	00 0c       	add	r0, r0
   1c4ce:	11 f4       	brne	.+4      	; 0x1c4d4 <__fp_round+0xc>
   1c4d0:	88 23       	and	r24, r24
   1c4d2:	52 f0       	brmi	.+20     	; 0x1c4e8 <__fp_round+0x20>
   1c4d4:	bb 0f       	add	r27, r27
   1c4d6:	40 f4       	brcc	.+16     	; 0x1c4e8 <__fp_round+0x20>
   1c4d8:	bf 2b       	or	r27, r31
   1c4da:	11 f4       	brne	.+4      	; 0x1c4e0 <__fp_round+0x18>
   1c4dc:	60 ff       	sbrs	r22, 0
   1c4de:	04 c0       	rjmp	.+8      	; 0x1c4e8 <__fp_round+0x20>
   1c4e0:	6f 5f       	subi	r22, 0xFF	; 255
   1c4e2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4e4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c4e6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4e8:	08 95       	ret

0001c4ea <__fp_split3>:
   1c4ea:	57 fd       	sbrc	r21, 7
   1c4ec:	90 58       	subi	r25, 0x80	; 128
   1c4ee:	44 0f       	add	r20, r20
   1c4f0:	55 1f       	adc	r21, r21
   1c4f2:	59 f0       	breq	.+22     	; 0x1c50a <__fp_splitA+0x10>
   1c4f4:	5f 3f       	cpi	r21, 0xFF	; 255
   1c4f6:	71 f0       	breq	.+28     	; 0x1c514 <__fp_splitA+0x1a>
   1c4f8:	47 95       	ror	r20

0001c4fa <__fp_splitA>:
   1c4fa:	88 0f       	add	r24, r24
   1c4fc:	97 fb       	bst	r25, 7
   1c4fe:	99 1f       	adc	r25, r25
   1c500:	61 f0       	breq	.+24     	; 0x1c51a <__fp_splitA+0x20>
   1c502:	9f 3f       	cpi	r25, 0xFF	; 255
   1c504:	79 f0       	breq	.+30     	; 0x1c524 <__fp_splitA+0x2a>
   1c506:	87 95       	ror	r24
   1c508:	08 95       	ret
   1c50a:	12 16       	cp	r1, r18
   1c50c:	13 06       	cpc	r1, r19
   1c50e:	14 06       	cpc	r1, r20
   1c510:	55 1f       	adc	r21, r21
   1c512:	f2 cf       	rjmp	.-28     	; 0x1c4f8 <__fp_split3+0xe>
   1c514:	46 95       	lsr	r20
   1c516:	f1 df       	rcall	.-30     	; 0x1c4fa <__fp_splitA>
   1c518:	08 c0       	rjmp	.+16     	; 0x1c52a <__fp_splitA+0x30>
   1c51a:	16 16       	cp	r1, r22
   1c51c:	17 06       	cpc	r1, r23
   1c51e:	18 06       	cpc	r1, r24
   1c520:	99 1f       	adc	r25, r25
   1c522:	f1 cf       	rjmp	.-30     	; 0x1c506 <__fp_splitA+0xc>
   1c524:	86 95       	lsr	r24
   1c526:	71 05       	cpc	r23, r1
   1c528:	61 05       	cpc	r22, r1
   1c52a:	08 94       	sec
   1c52c:	08 95       	ret

0001c52e <__fp_zero>:
   1c52e:	e8 94       	clt

0001c530 <__fp_szero>:
   1c530:	bb 27       	eor	r27, r27
   1c532:	66 27       	eor	r22, r22
   1c534:	77 27       	eor	r23, r23
   1c536:	cb 01       	movw	r24, r22
   1c538:	97 f9       	bld	r25, 7
   1c53a:	08 95       	ret

0001c53c <__gesf2>:
   1c53c:	8a df       	rcall	.-236    	; 0x1c452 <__fp_cmp>
   1c53e:	08 f4       	brcc	.+2      	; 0x1c542 <__gesf2+0x6>
   1c540:	8f ef       	ldi	r24, 0xFF	; 255
   1c542:	08 95       	ret

0001c544 <__mulsf3>:
   1c544:	0b d0       	rcall	.+22     	; 0x1c55c <__mulsf3x>
   1c546:	c0 cf       	rjmp	.-128    	; 0x1c4c8 <__fp_round>
   1c548:	b1 df       	rcall	.-158    	; 0x1c4ac <__fp_pscA>
   1c54a:	28 f0       	brcs	.+10     	; 0x1c556 <__mulsf3+0x12>
   1c54c:	b6 df       	rcall	.-148    	; 0x1c4ba <__fp_pscB>
   1c54e:	18 f0       	brcs	.+6      	; 0x1c556 <__mulsf3+0x12>
   1c550:	95 23       	and	r25, r21
   1c552:	09 f0       	breq	.+2      	; 0x1c556 <__mulsf3+0x12>
   1c554:	a2 cf       	rjmp	.-188    	; 0x1c49a <__fp_inf>
   1c556:	a7 cf       	rjmp	.-178    	; 0x1c4a6 <__fp_nan>
   1c558:	11 24       	eor	r1, r1
   1c55a:	ea cf       	rjmp	.-44     	; 0x1c530 <__fp_szero>

0001c55c <__mulsf3x>:
   1c55c:	c6 df       	rcall	.-116    	; 0x1c4ea <__fp_split3>
   1c55e:	a0 f3       	brcs	.-24     	; 0x1c548 <__mulsf3+0x4>

0001c560 <__mulsf3_pse>:
   1c560:	95 9f       	mul	r25, r21
   1c562:	d1 f3       	breq	.-12     	; 0x1c558 <__mulsf3+0x14>
   1c564:	95 0f       	add	r25, r21
   1c566:	50 e0       	ldi	r21, 0x00	; 0
   1c568:	55 1f       	adc	r21, r21
   1c56a:	62 9f       	mul	r22, r18
   1c56c:	f0 01       	movw	r30, r0
   1c56e:	72 9f       	mul	r23, r18
   1c570:	bb 27       	eor	r27, r27
   1c572:	f0 0d       	add	r31, r0
   1c574:	b1 1d       	adc	r27, r1
   1c576:	63 9f       	mul	r22, r19
   1c578:	aa 27       	eor	r26, r26
   1c57a:	f0 0d       	add	r31, r0
   1c57c:	b1 1d       	adc	r27, r1
   1c57e:	aa 1f       	adc	r26, r26
   1c580:	64 9f       	mul	r22, r20
   1c582:	66 27       	eor	r22, r22
   1c584:	b0 0d       	add	r27, r0
   1c586:	a1 1d       	adc	r26, r1
   1c588:	66 1f       	adc	r22, r22
   1c58a:	82 9f       	mul	r24, r18
   1c58c:	22 27       	eor	r18, r18
   1c58e:	b0 0d       	add	r27, r0
   1c590:	a1 1d       	adc	r26, r1
   1c592:	62 1f       	adc	r22, r18
   1c594:	73 9f       	mul	r23, r19
   1c596:	b0 0d       	add	r27, r0
   1c598:	a1 1d       	adc	r26, r1
   1c59a:	62 1f       	adc	r22, r18
   1c59c:	83 9f       	mul	r24, r19
   1c59e:	a0 0d       	add	r26, r0
   1c5a0:	61 1d       	adc	r22, r1
   1c5a2:	22 1f       	adc	r18, r18
   1c5a4:	74 9f       	mul	r23, r20
   1c5a6:	33 27       	eor	r19, r19
   1c5a8:	a0 0d       	add	r26, r0
   1c5aa:	61 1d       	adc	r22, r1
   1c5ac:	23 1f       	adc	r18, r19
   1c5ae:	84 9f       	mul	r24, r20
   1c5b0:	60 0d       	add	r22, r0
   1c5b2:	21 1d       	adc	r18, r1
   1c5b4:	82 2f       	mov	r24, r18
   1c5b6:	76 2f       	mov	r23, r22
   1c5b8:	6a 2f       	mov	r22, r26
   1c5ba:	11 24       	eor	r1, r1
   1c5bc:	9f 57       	subi	r25, 0x7F	; 127
   1c5be:	50 40       	sbci	r21, 0x00	; 0
   1c5c0:	8a f0       	brmi	.+34     	; 0x1c5e4 <__mulsf3_pse+0x84>
   1c5c2:	e1 f0       	breq	.+56     	; 0x1c5fc <__mulsf3_pse+0x9c>
   1c5c4:	88 23       	and	r24, r24
   1c5c6:	4a f0       	brmi	.+18     	; 0x1c5da <__mulsf3_pse+0x7a>
   1c5c8:	ee 0f       	add	r30, r30
   1c5ca:	ff 1f       	adc	r31, r31
   1c5cc:	bb 1f       	adc	r27, r27
   1c5ce:	66 1f       	adc	r22, r22
   1c5d0:	77 1f       	adc	r23, r23
   1c5d2:	88 1f       	adc	r24, r24
   1c5d4:	91 50       	subi	r25, 0x01	; 1
   1c5d6:	50 40       	sbci	r21, 0x00	; 0
   1c5d8:	a9 f7       	brne	.-22     	; 0x1c5c4 <__mulsf3_pse+0x64>
   1c5da:	9e 3f       	cpi	r25, 0xFE	; 254
   1c5dc:	51 05       	cpc	r21, r1
   1c5de:	70 f0       	brcs	.+28     	; 0x1c5fc <__mulsf3_pse+0x9c>
   1c5e0:	5c cf       	rjmp	.-328    	; 0x1c49a <__fp_inf>
   1c5e2:	a6 cf       	rjmp	.-180    	; 0x1c530 <__fp_szero>
   1c5e4:	5f 3f       	cpi	r21, 0xFF	; 255
   1c5e6:	ec f3       	brlt	.-6      	; 0x1c5e2 <__mulsf3_pse+0x82>
   1c5e8:	98 3e       	cpi	r25, 0xE8	; 232
   1c5ea:	dc f3       	brlt	.-10     	; 0x1c5e2 <__mulsf3_pse+0x82>
   1c5ec:	86 95       	lsr	r24
   1c5ee:	77 95       	ror	r23
   1c5f0:	67 95       	ror	r22
   1c5f2:	b7 95       	ror	r27
   1c5f4:	f7 95       	ror	r31
   1c5f6:	e7 95       	ror	r30
   1c5f8:	9f 5f       	subi	r25, 0xFF	; 255
   1c5fa:	c1 f7       	brne	.-16     	; 0x1c5ec <__mulsf3_pse+0x8c>
   1c5fc:	fe 2b       	or	r31, r30
   1c5fe:	88 0f       	add	r24, r24
   1c600:	91 1d       	adc	r25, r1
   1c602:	96 95       	lsr	r25
   1c604:	87 95       	ror	r24
   1c606:	97 f9       	bld	r25, 7
   1c608:	08 95       	ret

0001c60a <round>:
   1c60a:	77 df       	rcall	.-274    	; 0x1c4fa <__fp_splitA>
   1c60c:	e0 f0       	brcs	.+56     	; 0x1c646 <round+0x3c>
   1c60e:	9e 37       	cpi	r25, 0x7E	; 126
   1c610:	d8 f0       	brcs	.+54     	; 0x1c648 <round+0x3e>
   1c612:	96 39       	cpi	r25, 0x96	; 150
   1c614:	b8 f4       	brcc	.+46     	; 0x1c644 <round+0x3a>
   1c616:	9e 38       	cpi	r25, 0x8E	; 142
   1c618:	48 f4       	brcc	.+18     	; 0x1c62c <round+0x22>
   1c61a:	67 2f       	mov	r22, r23
   1c61c:	78 2f       	mov	r23, r24
   1c61e:	88 27       	eor	r24, r24
   1c620:	98 5f       	subi	r25, 0xF8	; 248
   1c622:	f9 cf       	rjmp	.-14     	; 0x1c616 <round+0xc>
   1c624:	86 95       	lsr	r24
   1c626:	77 95       	ror	r23
   1c628:	67 95       	ror	r22
   1c62a:	93 95       	inc	r25
   1c62c:	95 39       	cpi	r25, 0x95	; 149
   1c62e:	d0 f3       	brcs	.-12     	; 0x1c624 <round+0x1a>
   1c630:	b6 2f       	mov	r27, r22
   1c632:	b1 70       	andi	r27, 0x01	; 1
   1c634:	6b 0f       	add	r22, r27
   1c636:	71 1d       	adc	r23, r1
   1c638:	81 1d       	adc	r24, r1
   1c63a:	20 f4       	brcc	.+8      	; 0x1c644 <round+0x3a>
   1c63c:	87 95       	ror	r24
   1c63e:	77 95       	ror	r23
   1c640:	67 95       	ror	r22
   1c642:	93 95       	inc	r25
   1c644:	02 c0       	rjmp	.+4      	; 0x1c64a <__fp_mintl>
   1c646:	1c c0       	rjmp	.+56     	; 0x1c680 <__fp_mpack>
   1c648:	73 cf       	rjmp	.-282    	; 0x1c530 <__fp_szero>

0001c64a <__fp_mintl>:
   1c64a:	88 23       	and	r24, r24
   1c64c:	71 f4       	brne	.+28     	; 0x1c66a <__fp_mintl+0x20>
   1c64e:	77 23       	and	r23, r23
   1c650:	21 f0       	breq	.+8      	; 0x1c65a <__fp_mintl+0x10>
   1c652:	98 50       	subi	r25, 0x08	; 8
   1c654:	87 2b       	or	r24, r23
   1c656:	76 2f       	mov	r23, r22
   1c658:	07 c0       	rjmp	.+14     	; 0x1c668 <__fp_mintl+0x1e>
   1c65a:	66 23       	and	r22, r22
   1c65c:	11 f4       	brne	.+4      	; 0x1c662 <__fp_mintl+0x18>
   1c65e:	99 27       	eor	r25, r25
   1c660:	0d c0       	rjmp	.+26     	; 0x1c67c <__fp_mintl+0x32>
   1c662:	90 51       	subi	r25, 0x10	; 16
   1c664:	86 2b       	or	r24, r22
   1c666:	70 e0       	ldi	r23, 0x00	; 0
   1c668:	60 e0       	ldi	r22, 0x00	; 0
   1c66a:	2a f0       	brmi	.+10     	; 0x1c676 <__fp_mintl+0x2c>
   1c66c:	9a 95       	dec	r25
   1c66e:	66 0f       	add	r22, r22
   1c670:	77 1f       	adc	r23, r23
   1c672:	88 1f       	adc	r24, r24
   1c674:	da f7       	brpl	.-10     	; 0x1c66c <__fp_mintl+0x22>
   1c676:	88 0f       	add	r24, r24
   1c678:	96 95       	lsr	r25
   1c67a:	87 95       	ror	r24
   1c67c:	97 f9       	bld	r25, 7
   1c67e:	08 95       	ret

0001c680 <__fp_mpack>:
   1c680:	9f 3f       	cpi	r25, 0xFF	; 255
   1c682:	31 f0       	breq	.+12     	; 0x1c690 <__fp_mpack_finite+0xc>

0001c684 <__fp_mpack_finite>:
   1c684:	91 50       	subi	r25, 0x01	; 1
   1c686:	20 f4       	brcc	.+8      	; 0x1c690 <__fp_mpack_finite+0xc>
   1c688:	87 95       	ror	r24
   1c68a:	77 95       	ror	r23
   1c68c:	67 95       	ror	r22
   1c68e:	b7 95       	ror	r27
   1c690:	88 0f       	add	r24, r24
   1c692:	91 1d       	adc	r25, r1
   1c694:	96 95       	lsr	r25
   1c696:	87 95       	ror	r24
   1c698:	97 f9       	bld	r25, 7
   1c69a:	08 95       	ret

0001c69c <calloc>:
   1c69c:	0f 93       	push	r16
   1c69e:	1f 93       	push	r17
   1c6a0:	cf 93       	push	r28
   1c6a2:	df 93       	push	r29
   1c6a4:	86 9f       	mul	r24, r22
   1c6a6:	80 01       	movw	r16, r0
   1c6a8:	87 9f       	mul	r24, r23
   1c6aa:	10 0d       	add	r17, r0
   1c6ac:	96 9f       	mul	r25, r22
   1c6ae:	10 0d       	add	r17, r0
   1c6b0:	11 24       	eor	r1, r1
   1c6b2:	c8 01       	movw	r24, r16
   1c6b4:	0d d0       	rcall	.+26     	; 0x1c6d0 <malloc>
   1c6b6:	ec 01       	movw	r28, r24
   1c6b8:	00 97       	sbiw	r24, 0x00	; 0
   1c6ba:	21 f0       	breq	.+8      	; 0x1c6c4 <calloc+0x28>
   1c6bc:	a8 01       	movw	r20, r16
   1c6be:	60 e0       	ldi	r22, 0x00	; 0
   1c6c0:	70 e0       	ldi	r23, 0x00	; 0
   1c6c2:	0e d2       	rcall	.+1052   	; 0x1cae0 <memset>
   1c6c4:	ce 01       	movw	r24, r28
   1c6c6:	df 91       	pop	r29
   1c6c8:	cf 91       	pop	r28
   1c6ca:	1f 91       	pop	r17
   1c6cc:	0f 91       	pop	r16
   1c6ce:	08 95       	ret

0001c6d0 <malloc>:
   1c6d0:	0f 93       	push	r16
   1c6d2:	1f 93       	push	r17
   1c6d4:	cf 93       	push	r28
   1c6d6:	df 93       	push	r29
   1c6d8:	82 30       	cpi	r24, 0x02	; 2
   1c6da:	91 05       	cpc	r25, r1
   1c6dc:	10 f4       	brcc	.+4      	; 0x1c6e2 <malloc+0x12>
   1c6de:	82 e0       	ldi	r24, 0x02	; 2
   1c6e0:	90 e0       	ldi	r25, 0x00	; 0
   1c6e2:	e0 91 8f 21 	lds	r30, 0x218F	; 0x80218f <__flp>
   1c6e6:	f0 91 90 21 	lds	r31, 0x2190	; 0x802190 <__flp+0x1>
   1c6ea:	20 e0       	ldi	r18, 0x00	; 0
   1c6ec:	30 e0       	ldi	r19, 0x00	; 0
   1c6ee:	a0 e0       	ldi	r26, 0x00	; 0
   1c6f0:	b0 e0       	ldi	r27, 0x00	; 0
   1c6f2:	30 97       	sbiw	r30, 0x00	; 0
   1c6f4:	19 f1       	breq	.+70     	; 0x1c73c <malloc+0x6c>
   1c6f6:	40 81       	ld	r20, Z
   1c6f8:	51 81       	ldd	r21, Z+1	; 0x01
   1c6fa:	02 81       	ldd	r16, Z+2	; 0x02
   1c6fc:	13 81       	ldd	r17, Z+3	; 0x03
   1c6fe:	48 17       	cp	r20, r24
   1c700:	59 07       	cpc	r21, r25
   1c702:	c8 f0       	brcs	.+50     	; 0x1c736 <malloc+0x66>
   1c704:	84 17       	cp	r24, r20
   1c706:	95 07       	cpc	r25, r21
   1c708:	69 f4       	brne	.+26     	; 0x1c724 <malloc+0x54>
   1c70a:	10 97       	sbiw	r26, 0x00	; 0
   1c70c:	31 f0       	breq	.+12     	; 0x1c71a <malloc+0x4a>
   1c70e:	12 96       	adiw	r26, 0x02	; 2
   1c710:	0c 93       	st	X, r16
   1c712:	12 97       	sbiw	r26, 0x02	; 2
   1c714:	13 96       	adiw	r26, 0x03	; 3
   1c716:	1c 93       	st	X, r17
   1c718:	27 c0       	rjmp	.+78     	; 0x1c768 <malloc+0x98>
   1c71a:	00 93 8f 21 	sts	0x218F, r16	; 0x80218f <__flp>
   1c71e:	10 93 90 21 	sts	0x2190, r17	; 0x802190 <__flp+0x1>
   1c722:	22 c0       	rjmp	.+68     	; 0x1c768 <malloc+0x98>
   1c724:	21 15       	cp	r18, r1
   1c726:	31 05       	cpc	r19, r1
   1c728:	19 f0       	breq	.+6      	; 0x1c730 <malloc+0x60>
   1c72a:	42 17       	cp	r20, r18
   1c72c:	53 07       	cpc	r21, r19
   1c72e:	18 f4       	brcc	.+6      	; 0x1c736 <malloc+0x66>
   1c730:	9a 01       	movw	r18, r20
   1c732:	bd 01       	movw	r22, r26
   1c734:	ef 01       	movw	r28, r30
   1c736:	df 01       	movw	r26, r30
   1c738:	f8 01       	movw	r30, r16
   1c73a:	db cf       	rjmp	.-74     	; 0x1c6f2 <malloc+0x22>
   1c73c:	21 15       	cp	r18, r1
   1c73e:	31 05       	cpc	r19, r1
   1c740:	f9 f0       	breq	.+62     	; 0x1c780 <malloc+0xb0>
   1c742:	28 1b       	sub	r18, r24
   1c744:	39 0b       	sbc	r19, r25
   1c746:	24 30       	cpi	r18, 0x04	; 4
   1c748:	31 05       	cpc	r19, r1
   1c74a:	80 f4       	brcc	.+32     	; 0x1c76c <malloc+0x9c>
   1c74c:	8a 81       	ldd	r24, Y+2	; 0x02
   1c74e:	9b 81       	ldd	r25, Y+3	; 0x03
   1c750:	61 15       	cp	r22, r1
   1c752:	71 05       	cpc	r23, r1
   1c754:	21 f0       	breq	.+8      	; 0x1c75e <malloc+0x8e>
   1c756:	fb 01       	movw	r30, r22
   1c758:	93 83       	std	Z+3, r25	; 0x03
   1c75a:	82 83       	std	Z+2, r24	; 0x02
   1c75c:	04 c0       	rjmp	.+8      	; 0x1c766 <malloc+0x96>
   1c75e:	90 93 90 21 	sts	0x2190, r25	; 0x802190 <__flp+0x1>
   1c762:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <__flp>
   1c766:	fe 01       	movw	r30, r28
   1c768:	32 96       	adiw	r30, 0x02	; 2
   1c76a:	44 c0       	rjmp	.+136    	; 0x1c7f4 <malloc+0x124>
   1c76c:	fe 01       	movw	r30, r28
   1c76e:	e2 0f       	add	r30, r18
   1c770:	f3 1f       	adc	r31, r19
   1c772:	81 93       	st	Z+, r24
   1c774:	91 93       	st	Z+, r25
   1c776:	22 50       	subi	r18, 0x02	; 2
   1c778:	31 09       	sbc	r19, r1
   1c77a:	39 83       	std	Y+1, r19	; 0x01
   1c77c:	28 83       	st	Y, r18
   1c77e:	3a c0       	rjmp	.+116    	; 0x1c7f4 <malloc+0x124>
   1c780:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <__brkval>
   1c784:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <__brkval+0x1>
   1c788:	23 2b       	or	r18, r19
   1c78a:	41 f4       	brne	.+16     	; 0x1c79c <malloc+0xcc>
   1c78c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1c790:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1c794:	30 93 8e 21 	sts	0x218E, r19	; 0x80218e <__brkval+0x1>
   1c798:	20 93 8d 21 	sts	0x218D, r18	; 0x80218d <__brkval>
   1c79c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1c7a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1c7a4:	21 15       	cp	r18, r1
   1c7a6:	31 05       	cpc	r19, r1
   1c7a8:	41 f4       	brne	.+16     	; 0x1c7ba <malloc+0xea>
   1c7aa:	2d b7       	in	r18, 0x3d	; 61
   1c7ac:	3e b7       	in	r19, 0x3e	; 62
   1c7ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1c7b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1c7b6:	24 1b       	sub	r18, r20
   1c7b8:	35 0b       	sbc	r19, r21
   1c7ba:	e0 91 8d 21 	lds	r30, 0x218D	; 0x80218d <__brkval>
   1c7be:	f0 91 8e 21 	lds	r31, 0x218E	; 0x80218e <__brkval+0x1>
   1c7c2:	e2 17       	cp	r30, r18
   1c7c4:	f3 07       	cpc	r31, r19
   1c7c6:	a0 f4       	brcc	.+40     	; 0x1c7f0 <malloc+0x120>
   1c7c8:	2e 1b       	sub	r18, r30
   1c7ca:	3f 0b       	sbc	r19, r31
   1c7cc:	28 17       	cp	r18, r24
   1c7ce:	39 07       	cpc	r19, r25
   1c7d0:	78 f0       	brcs	.+30     	; 0x1c7f0 <malloc+0x120>
   1c7d2:	ac 01       	movw	r20, r24
   1c7d4:	4e 5f       	subi	r20, 0xFE	; 254
   1c7d6:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7d8:	24 17       	cp	r18, r20
   1c7da:	35 07       	cpc	r19, r21
   1c7dc:	48 f0       	brcs	.+18     	; 0x1c7f0 <malloc+0x120>
   1c7de:	4e 0f       	add	r20, r30
   1c7e0:	5f 1f       	adc	r21, r31
   1c7e2:	50 93 8e 21 	sts	0x218E, r21	; 0x80218e <__brkval+0x1>
   1c7e6:	40 93 8d 21 	sts	0x218D, r20	; 0x80218d <__brkval>
   1c7ea:	81 93       	st	Z+, r24
   1c7ec:	91 93       	st	Z+, r25
   1c7ee:	02 c0       	rjmp	.+4      	; 0x1c7f4 <malloc+0x124>
   1c7f0:	e0 e0       	ldi	r30, 0x00	; 0
   1c7f2:	f0 e0       	ldi	r31, 0x00	; 0
   1c7f4:	cf 01       	movw	r24, r30
   1c7f6:	df 91       	pop	r29
   1c7f8:	cf 91       	pop	r28
   1c7fa:	1f 91       	pop	r17
   1c7fc:	0f 91       	pop	r16
   1c7fe:	08 95       	ret

0001c800 <free>:
   1c800:	cf 93       	push	r28
   1c802:	df 93       	push	r29
   1c804:	00 97       	sbiw	r24, 0x00	; 0
   1c806:	09 f4       	brne	.+2      	; 0x1c80a <free+0xa>
   1c808:	81 c0       	rjmp	.+258    	; 0x1c90c <free+0x10c>
   1c80a:	fc 01       	movw	r30, r24
   1c80c:	32 97       	sbiw	r30, 0x02	; 2
   1c80e:	13 82       	std	Z+3, r1	; 0x03
   1c810:	12 82       	std	Z+2, r1	; 0x02
   1c812:	a0 91 8f 21 	lds	r26, 0x218F	; 0x80218f <__flp>
   1c816:	b0 91 90 21 	lds	r27, 0x2190	; 0x802190 <__flp+0x1>
   1c81a:	10 97       	sbiw	r26, 0x00	; 0
   1c81c:	81 f4       	brne	.+32     	; 0x1c83e <free+0x3e>
   1c81e:	20 81       	ld	r18, Z
   1c820:	31 81       	ldd	r19, Z+1	; 0x01
   1c822:	82 0f       	add	r24, r18
   1c824:	93 1f       	adc	r25, r19
   1c826:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <__brkval>
   1c82a:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <__brkval+0x1>
   1c82e:	28 17       	cp	r18, r24
   1c830:	39 07       	cpc	r19, r25
   1c832:	51 f5       	brne	.+84     	; 0x1c888 <free+0x88>
   1c834:	f0 93 8e 21 	sts	0x218E, r31	; 0x80218e <__brkval+0x1>
   1c838:	e0 93 8d 21 	sts	0x218D, r30	; 0x80218d <__brkval>
   1c83c:	67 c0       	rjmp	.+206    	; 0x1c90c <free+0x10c>
   1c83e:	ed 01       	movw	r28, r26
   1c840:	20 e0       	ldi	r18, 0x00	; 0
   1c842:	30 e0       	ldi	r19, 0x00	; 0
   1c844:	ce 17       	cp	r28, r30
   1c846:	df 07       	cpc	r29, r31
   1c848:	40 f4       	brcc	.+16     	; 0x1c85a <free+0x5a>
   1c84a:	4a 81       	ldd	r20, Y+2	; 0x02
   1c84c:	5b 81       	ldd	r21, Y+3	; 0x03
   1c84e:	9e 01       	movw	r18, r28
   1c850:	41 15       	cp	r20, r1
   1c852:	51 05       	cpc	r21, r1
   1c854:	f1 f0       	breq	.+60     	; 0x1c892 <free+0x92>
   1c856:	ea 01       	movw	r28, r20
   1c858:	f5 cf       	rjmp	.-22     	; 0x1c844 <free+0x44>
   1c85a:	d3 83       	std	Z+3, r29	; 0x03
   1c85c:	c2 83       	std	Z+2, r28	; 0x02
   1c85e:	40 81       	ld	r20, Z
   1c860:	51 81       	ldd	r21, Z+1	; 0x01
   1c862:	84 0f       	add	r24, r20
   1c864:	95 1f       	adc	r25, r21
   1c866:	c8 17       	cp	r28, r24
   1c868:	d9 07       	cpc	r29, r25
   1c86a:	59 f4       	brne	.+22     	; 0x1c882 <free+0x82>
   1c86c:	88 81       	ld	r24, Y
   1c86e:	99 81       	ldd	r25, Y+1	; 0x01
   1c870:	84 0f       	add	r24, r20
   1c872:	95 1f       	adc	r25, r21
   1c874:	02 96       	adiw	r24, 0x02	; 2
   1c876:	91 83       	std	Z+1, r25	; 0x01
   1c878:	80 83       	st	Z, r24
   1c87a:	8a 81       	ldd	r24, Y+2	; 0x02
   1c87c:	9b 81       	ldd	r25, Y+3	; 0x03
   1c87e:	93 83       	std	Z+3, r25	; 0x03
   1c880:	82 83       	std	Z+2, r24	; 0x02
   1c882:	21 15       	cp	r18, r1
   1c884:	31 05       	cpc	r19, r1
   1c886:	29 f4       	brne	.+10     	; 0x1c892 <free+0x92>
   1c888:	f0 93 90 21 	sts	0x2190, r31	; 0x802190 <__flp+0x1>
   1c88c:	e0 93 8f 21 	sts	0x218F, r30	; 0x80218f <__flp>
   1c890:	3d c0       	rjmp	.+122    	; 0x1c90c <free+0x10c>
   1c892:	e9 01       	movw	r28, r18
   1c894:	fb 83       	std	Y+3, r31	; 0x03
   1c896:	ea 83       	std	Y+2, r30	; 0x02
   1c898:	49 91       	ld	r20, Y+
   1c89a:	59 91       	ld	r21, Y+
   1c89c:	c4 0f       	add	r28, r20
   1c89e:	d5 1f       	adc	r29, r21
   1c8a0:	ec 17       	cp	r30, r28
   1c8a2:	fd 07       	cpc	r31, r29
   1c8a4:	61 f4       	brne	.+24     	; 0x1c8be <free+0xbe>
   1c8a6:	80 81       	ld	r24, Z
   1c8a8:	91 81       	ldd	r25, Z+1	; 0x01
   1c8aa:	84 0f       	add	r24, r20
   1c8ac:	95 1f       	adc	r25, r21
   1c8ae:	02 96       	adiw	r24, 0x02	; 2
   1c8b0:	e9 01       	movw	r28, r18
   1c8b2:	99 83       	std	Y+1, r25	; 0x01
   1c8b4:	88 83       	st	Y, r24
   1c8b6:	82 81       	ldd	r24, Z+2	; 0x02
   1c8b8:	93 81       	ldd	r25, Z+3	; 0x03
   1c8ba:	9b 83       	std	Y+3, r25	; 0x03
   1c8bc:	8a 83       	std	Y+2, r24	; 0x02
   1c8be:	e0 e0       	ldi	r30, 0x00	; 0
   1c8c0:	f0 e0       	ldi	r31, 0x00	; 0
   1c8c2:	12 96       	adiw	r26, 0x02	; 2
   1c8c4:	8d 91       	ld	r24, X+
   1c8c6:	9c 91       	ld	r25, X
   1c8c8:	13 97       	sbiw	r26, 0x03	; 3
   1c8ca:	00 97       	sbiw	r24, 0x00	; 0
   1c8cc:	19 f0       	breq	.+6      	; 0x1c8d4 <free+0xd4>
   1c8ce:	fd 01       	movw	r30, r26
   1c8d0:	dc 01       	movw	r26, r24
   1c8d2:	f7 cf       	rjmp	.-18     	; 0x1c8c2 <free+0xc2>
   1c8d4:	8d 91       	ld	r24, X+
   1c8d6:	9c 91       	ld	r25, X
   1c8d8:	11 97       	sbiw	r26, 0x01	; 1
   1c8da:	9d 01       	movw	r18, r26
   1c8dc:	2e 5f       	subi	r18, 0xFE	; 254
   1c8de:	3f 4f       	sbci	r19, 0xFF	; 255
   1c8e0:	82 0f       	add	r24, r18
   1c8e2:	93 1f       	adc	r25, r19
   1c8e4:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <__brkval>
   1c8e8:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <__brkval+0x1>
   1c8ec:	28 17       	cp	r18, r24
   1c8ee:	39 07       	cpc	r19, r25
   1c8f0:	69 f4       	brne	.+26     	; 0x1c90c <free+0x10c>
   1c8f2:	30 97       	sbiw	r30, 0x00	; 0
   1c8f4:	29 f4       	brne	.+10     	; 0x1c900 <free+0x100>
   1c8f6:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <__flp+0x1>
   1c8fa:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <__flp>
   1c8fe:	02 c0       	rjmp	.+4      	; 0x1c904 <free+0x104>
   1c900:	13 82       	std	Z+3, r1	; 0x03
   1c902:	12 82       	std	Z+2, r1	; 0x02
   1c904:	b0 93 8e 21 	sts	0x218E, r27	; 0x80218e <__brkval+0x1>
   1c908:	a0 93 8d 21 	sts	0x218D, r26	; 0x80218d <__brkval>
   1c90c:	df 91       	pop	r29
   1c90e:	cf 91       	pop	r28
   1c910:	08 95       	ret

0001c912 <abort>:
   1c912:	81 e0       	ldi	r24, 0x01	; 1
   1c914:	90 e0       	ldi	r25, 0x00	; 0
   1c916:	f8 94       	cli
   1c918:	53 c1       	rjmp	.+678    	; 0x1cbc0 <_exit>

0001c91a <__ftoa_engine>:
   1c91a:	28 30       	cpi	r18, 0x08	; 8
   1c91c:	08 f0       	brcs	.+2      	; 0x1c920 <__ftoa_engine+0x6>
   1c91e:	27 e0       	ldi	r18, 0x07	; 7
   1c920:	33 27       	eor	r19, r19
   1c922:	da 01       	movw	r26, r20
   1c924:	99 0f       	add	r25, r25
   1c926:	31 1d       	adc	r19, r1
   1c928:	87 fd       	sbrc	r24, 7
   1c92a:	91 60       	ori	r25, 0x01	; 1
   1c92c:	00 96       	adiw	r24, 0x00	; 0
   1c92e:	61 05       	cpc	r22, r1
   1c930:	71 05       	cpc	r23, r1
   1c932:	39 f4       	brne	.+14     	; 0x1c942 <__ftoa_engine+0x28>
   1c934:	32 60       	ori	r19, 0x02	; 2
   1c936:	2e 5f       	subi	r18, 0xFE	; 254
   1c938:	3d 93       	st	X+, r19
   1c93a:	30 e3       	ldi	r19, 0x30	; 48
   1c93c:	2a 95       	dec	r18
   1c93e:	e1 f7       	brne	.-8      	; 0x1c938 <__ftoa_engine+0x1e>
   1c940:	08 95       	ret
   1c942:	9f 3f       	cpi	r25, 0xFF	; 255
   1c944:	30 f0       	brcs	.+12     	; 0x1c952 <__ftoa_engine+0x38>
   1c946:	80 38       	cpi	r24, 0x80	; 128
   1c948:	71 05       	cpc	r23, r1
   1c94a:	61 05       	cpc	r22, r1
   1c94c:	09 f0       	breq	.+2      	; 0x1c950 <__ftoa_engine+0x36>
   1c94e:	3c 5f       	subi	r19, 0xFC	; 252
   1c950:	3c 5f       	subi	r19, 0xFC	; 252
   1c952:	3d 93       	st	X+, r19
   1c954:	91 30       	cpi	r25, 0x01	; 1
   1c956:	08 f0       	brcs	.+2      	; 0x1c95a <__ftoa_engine+0x40>
   1c958:	80 68       	ori	r24, 0x80	; 128
   1c95a:	91 1d       	adc	r25, r1
   1c95c:	df 93       	push	r29
   1c95e:	cf 93       	push	r28
   1c960:	1f 93       	push	r17
   1c962:	0f 93       	push	r16
   1c964:	ff 92       	push	r15
   1c966:	ef 92       	push	r14
   1c968:	19 2f       	mov	r17, r25
   1c96a:	98 7f       	andi	r25, 0xF8	; 248
   1c96c:	96 95       	lsr	r25
   1c96e:	e9 2f       	mov	r30, r25
   1c970:	96 95       	lsr	r25
   1c972:	96 95       	lsr	r25
   1c974:	e9 0f       	add	r30, r25
   1c976:	ff 27       	eor	r31, r31
   1c978:	e8 5c       	subi	r30, 0xC8	; 200
   1c97a:	fd 4f       	sbci	r31, 0xFD	; 253
   1c97c:	99 27       	eor	r25, r25
   1c97e:	33 27       	eor	r19, r19
   1c980:	ee 24       	eor	r14, r14
   1c982:	ff 24       	eor	r15, r15
   1c984:	a7 01       	movw	r20, r14
   1c986:	e7 01       	movw	r28, r14
   1c988:	05 90       	lpm	r0, Z+
   1c98a:	08 94       	sec
   1c98c:	07 94       	ror	r0
   1c98e:	28 f4       	brcc	.+10     	; 0x1c99a <__ftoa_engine+0x80>
   1c990:	36 0f       	add	r19, r22
   1c992:	e7 1e       	adc	r14, r23
   1c994:	f8 1e       	adc	r15, r24
   1c996:	49 1f       	adc	r20, r25
   1c998:	51 1d       	adc	r21, r1
   1c99a:	66 0f       	add	r22, r22
   1c99c:	77 1f       	adc	r23, r23
   1c99e:	88 1f       	adc	r24, r24
   1c9a0:	99 1f       	adc	r25, r25
   1c9a2:	06 94       	lsr	r0
   1c9a4:	a1 f7       	brne	.-24     	; 0x1c98e <__ftoa_engine+0x74>
   1c9a6:	05 90       	lpm	r0, Z+
   1c9a8:	07 94       	ror	r0
   1c9aa:	28 f4       	brcc	.+10     	; 0x1c9b6 <__ftoa_engine+0x9c>
   1c9ac:	e7 0e       	add	r14, r23
   1c9ae:	f8 1e       	adc	r15, r24
   1c9b0:	49 1f       	adc	r20, r25
   1c9b2:	56 1f       	adc	r21, r22
   1c9b4:	c1 1d       	adc	r28, r1
   1c9b6:	77 0f       	add	r23, r23
   1c9b8:	88 1f       	adc	r24, r24
   1c9ba:	99 1f       	adc	r25, r25
   1c9bc:	66 1f       	adc	r22, r22
   1c9be:	06 94       	lsr	r0
   1c9c0:	a1 f7       	brne	.-24     	; 0x1c9aa <__ftoa_engine+0x90>
   1c9c2:	05 90       	lpm	r0, Z+
   1c9c4:	07 94       	ror	r0
   1c9c6:	28 f4       	brcc	.+10     	; 0x1c9d2 <__ftoa_engine+0xb8>
   1c9c8:	f8 0e       	add	r15, r24
   1c9ca:	49 1f       	adc	r20, r25
   1c9cc:	56 1f       	adc	r21, r22
   1c9ce:	c7 1f       	adc	r28, r23
   1c9d0:	d1 1d       	adc	r29, r1
   1c9d2:	88 0f       	add	r24, r24
   1c9d4:	99 1f       	adc	r25, r25
   1c9d6:	66 1f       	adc	r22, r22
   1c9d8:	77 1f       	adc	r23, r23
   1c9da:	06 94       	lsr	r0
   1c9dc:	a1 f7       	brne	.-24     	; 0x1c9c6 <__ftoa_engine+0xac>
   1c9de:	05 90       	lpm	r0, Z+
   1c9e0:	07 94       	ror	r0
   1c9e2:	20 f4       	brcc	.+8      	; 0x1c9ec <__ftoa_engine+0xd2>
   1c9e4:	49 0f       	add	r20, r25
   1c9e6:	56 1f       	adc	r21, r22
   1c9e8:	c7 1f       	adc	r28, r23
   1c9ea:	d8 1f       	adc	r29, r24
   1c9ec:	99 0f       	add	r25, r25
   1c9ee:	66 1f       	adc	r22, r22
   1c9f0:	77 1f       	adc	r23, r23
   1c9f2:	88 1f       	adc	r24, r24
   1c9f4:	06 94       	lsr	r0
   1c9f6:	a9 f7       	brne	.-22     	; 0x1c9e2 <__ftoa_engine+0xc8>
   1c9f8:	84 91       	lpm	r24, Z
   1c9fa:	10 95       	com	r17
   1c9fc:	17 70       	andi	r17, 0x07	; 7
   1c9fe:	41 f0       	breq	.+16     	; 0x1ca10 <__ftoa_engine+0xf6>
   1ca00:	d6 95       	lsr	r29
   1ca02:	c7 95       	ror	r28
   1ca04:	57 95       	ror	r21
   1ca06:	47 95       	ror	r20
   1ca08:	f7 94       	ror	r15
   1ca0a:	e7 94       	ror	r14
   1ca0c:	1a 95       	dec	r17
   1ca0e:	c1 f7       	brne	.-16     	; 0x1ca00 <__ftoa_engine+0xe6>
   1ca10:	ee ed       	ldi	r30, 0xDE	; 222
   1ca12:	f1 e0       	ldi	r31, 0x01	; 1
   1ca14:	68 94       	set
   1ca16:	15 90       	lpm	r1, Z+
   1ca18:	15 91       	lpm	r17, Z+
   1ca1a:	35 91       	lpm	r19, Z+
   1ca1c:	65 91       	lpm	r22, Z+
   1ca1e:	95 91       	lpm	r25, Z+
   1ca20:	05 90       	lpm	r0, Z+
   1ca22:	7f e2       	ldi	r23, 0x2F	; 47
   1ca24:	73 95       	inc	r23
   1ca26:	e1 18       	sub	r14, r1
   1ca28:	f1 0a       	sbc	r15, r17
   1ca2a:	43 0b       	sbc	r20, r19
   1ca2c:	56 0b       	sbc	r21, r22
   1ca2e:	c9 0b       	sbc	r28, r25
   1ca30:	d0 09       	sbc	r29, r0
   1ca32:	c0 f7       	brcc	.-16     	; 0x1ca24 <__ftoa_engine+0x10a>
   1ca34:	e1 0c       	add	r14, r1
   1ca36:	f1 1e       	adc	r15, r17
   1ca38:	43 1f       	adc	r20, r19
   1ca3a:	56 1f       	adc	r21, r22
   1ca3c:	c9 1f       	adc	r28, r25
   1ca3e:	d0 1d       	adc	r29, r0
   1ca40:	7e f4       	brtc	.+30     	; 0x1ca60 <__ftoa_engine+0x146>
   1ca42:	70 33       	cpi	r23, 0x30	; 48
   1ca44:	11 f4       	brne	.+4      	; 0x1ca4a <__ftoa_engine+0x130>
   1ca46:	8a 95       	dec	r24
   1ca48:	e6 cf       	rjmp	.-52     	; 0x1ca16 <__ftoa_engine+0xfc>
   1ca4a:	e8 94       	clt
   1ca4c:	01 50       	subi	r16, 0x01	; 1
   1ca4e:	30 f0       	brcs	.+12     	; 0x1ca5c <__ftoa_engine+0x142>
   1ca50:	08 0f       	add	r16, r24
   1ca52:	0a f4       	brpl	.+2      	; 0x1ca56 <__ftoa_engine+0x13c>
   1ca54:	00 27       	eor	r16, r16
   1ca56:	02 17       	cp	r16, r18
   1ca58:	08 f4       	brcc	.+2      	; 0x1ca5c <__ftoa_engine+0x142>
   1ca5a:	20 2f       	mov	r18, r16
   1ca5c:	23 95       	inc	r18
   1ca5e:	02 2f       	mov	r16, r18
   1ca60:	7a 33       	cpi	r23, 0x3A	; 58
   1ca62:	28 f0       	brcs	.+10     	; 0x1ca6e <__ftoa_engine+0x154>
   1ca64:	79 e3       	ldi	r23, 0x39	; 57
   1ca66:	7d 93       	st	X+, r23
   1ca68:	2a 95       	dec	r18
   1ca6a:	e9 f7       	brne	.-6      	; 0x1ca66 <__ftoa_engine+0x14c>
   1ca6c:	10 c0       	rjmp	.+32     	; 0x1ca8e <__ftoa_engine+0x174>
   1ca6e:	7d 93       	st	X+, r23
   1ca70:	2a 95       	dec	r18
   1ca72:	89 f6       	brne	.-94     	; 0x1ca16 <__ftoa_engine+0xfc>
   1ca74:	06 94       	lsr	r0
   1ca76:	97 95       	ror	r25
   1ca78:	67 95       	ror	r22
   1ca7a:	37 95       	ror	r19
   1ca7c:	17 95       	ror	r17
   1ca7e:	17 94       	ror	r1
   1ca80:	e1 18       	sub	r14, r1
   1ca82:	f1 0a       	sbc	r15, r17
   1ca84:	43 0b       	sbc	r20, r19
   1ca86:	56 0b       	sbc	r21, r22
   1ca88:	c9 0b       	sbc	r28, r25
   1ca8a:	d0 09       	sbc	r29, r0
   1ca8c:	98 f0       	brcs	.+38     	; 0x1cab4 <__ftoa_engine+0x19a>
   1ca8e:	23 95       	inc	r18
   1ca90:	7e 91       	ld	r23, -X
   1ca92:	73 95       	inc	r23
   1ca94:	7a 33       	cpi	r23, 0x3A	; 58
   1ca96:	08 f0       	brcs	.+2      	; 0x1ca9a <__ftoa_engine+0x180>
   1ca98:	70 e3       	ldi	r23, 0x30	; 48
   1ca9a:	7c 93       	st	X, r23
   1ca9c:	20 13       	cpse	r18, r16
   1ca9e:	b8 f7       	brcc	.-18     	; 0x1ca8e <__ftoa_engine+0x174>
   1caa0:	7e 91       	ld	r23, -X
   1caa2:	70 61       	ori	r23, 0x10	; 16
   1caa4:	7d 93       	st	X+, r23
   1caa6:	30 f0       	brcs	.+12     	; 0x1cab4 <__ftoa_engine+0x19a>
   1caa8:	83 95       	inc	r24
   1caaa:	71 e3       	ldi	r23, 0x31	; 49
   1caac:	7d 93       	st	X+, r23
   1caae:	70 e3       	ldi	r23, 0x30	; 48
   1cab0:	2a 95       	dec	r18
   1cab2:	e1 f7       	brne	.-8      	; 0x1caac <__ftoa_engine+0x192>
   1cab4:	11 24       	eor	r1, r1
   1cab6:	ef 90       	pop	r14
   1cab8:	ff 90       	pop	r15
   1caba:	0f 91       	pop	r16
   1cabc:	1f 91       	pop	r17
   1cabe:	cf 91       	pop	r28
   1cac0:	df 91       	pop	r29
   1cac2:	99 27       	eor	r25, r25
   1cac4:	87 fd       	sbrc	r24, 7
   1cac6:	90 95       	com	r25
   1cac8:	08 95       	ret

0001caca <strnlen_P>:
   1caca:	fc 01       	movw	r30, r24
   1cacc:	05 90       	lpm	r0, Z+
   1cace:	61 50       	subi	r22, 0x01	; 1
   1cad0:	70 40       	sbci	r23, 0x00	; 0
   1cad2:	01 10       	cpse	r0, r1
   1cad4:	d8 f7       	brcc	.-10     	; 0x1cacc <strnlen_P+0x2>
   1cad6:	80 95       	com	r24
   1cad8:	90 95       	com	r25
   1cada:	8e 0f       	add	r24, r30
   1cadc:	9f 1f       	adc	r25, r31
   1cade:	08 95       	ret

0001cae0 <memset>:
   1cae0:	dc 01       	movw	r26, r24
   1cae2:	01 c0       	rjmp	.+2      	; 0x1cae6 <memset+0x6>
   1cae4:	6d 93       	st	X+, r22
   1cae6:	41 50       	subi	r20, 0x01	; 1
   1cae8:	50 40       	sbci	r21, 0x00	; 0
   1caea:	e0 f7       	brcc	.-8      	; 0x1cae4 <memset+0x4>
   1caec:	08 95       	ret

0001caee <strnlen>:
   1caee:	fc 01       	movw	r30, r24
   1caf0:	61 50       	subi	r22, 0x01	; 1
   1caf2:	70 40       	sbci	r23, 0x00	; 0
   1caf4:	01 90       	ld	r0, Z+
   1caf6:	01 10       	cpse	r0, r1
   1caf8:	d8 f7       	brcc	.-10     	; 0x1caf0 <strnlen+0x2>
   1cafa:	80 95       	com	r24
   1cafc:	90 95       	com	r25
   1cafe:	8e 0f       	add	r24, r30
   1cb00:	9f 1f       	adc	r25, r31
   1cb02:	08 95       	ret

0001cb04 <__ultoa_invert>:
   1cb04:	fa 01       	movw	r30, r20
   1cb06:	aa 27       	eor	r26, r26
   1cb08:	28 30       	cpi	r18, 0x08	; 8
   1cb0a:	51 f1       	breq	.+84     	; 0x1cb60 <__ultoa_invert+0x5c>
   1cb0c:	20 31       	cpi	r18, 0x10	; 16
   1cb0e:	81 f1       	breq	.+96     	; 0x1cb70 <__ultoa_invert+0x6c>
   1cb10:	e8 94       	clt
   1cb12:	6f 93       	push	r22
   1cb14:	6e 7f       	andi	r22, 0xFE	; 254
   1cb16:	6e 5f       	subi	r22, 0xFE	; 254
   1cb18:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb1a:	8f 4f       	sbci	r24, 0xFF	; 255
   1cb1c:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb1e:	af 4f       	sbci	r26, 0xFF	; 255
   1cb20:	b1 e0       	ldi	r27, 0x01	; 1
   1cb22:	3e d0       	rcall	.+124    	; 0x1cba0 <__ultoa_invert+0x9c>
   1cb24:	b4 e0       	ldi	r27, 0x04	; 4
   1cb26:	3c d0       	rcall	.+120    	; 0x1cba0 <__ultoa_invert+0x9c>
   1cb28:	67 0f       	add	r22, r23
   1cb2a:	78 1f       	adc	r23, r24
   1cb2c:	89 1f       	adc	r24, r25
   1cb2e:	9a 1f       	adc	r25, r26
   1cb30:	a1 1d       	adc	r26, r1
   1cb32:	68 0f       	add	r22, r24
   1cb34:	79 1f       	adc	r23, r25
   1cb36:	8a 1f       	adc	r24, r26
   1cb38:	91 1d       	adc	r25, r1
   1cb3a:	a1 1d       	adc	r26, r1
   1cb3c:	6a 0f       	add	r22, r26
   1cb3e:	71 1d       	adc	r23, r1
   1cb40:	81 1d       	adc	r24, r1
   1cb42:	91 1d       	adc	r25, r1
   1cb44:	a1 1d       	adc	r26, r1
   1cb46:	20 d0       	rcall	.+64     	; 0x1cb88 <__ultoa_invert+0x84>
   1cb48:	09 f4       	brne	.+2      	; 0x1cb4c <__ultoa_invert+0x48>
   1cb4a:	68 94       	set
   1cb4c:	3f 91       	pop	r19
   1cb4e:	2a e0       	ldi	r18, 0x0A	; 10
   1cb50:	26 9f       	mul	r18, r22
   1cb52:	11 24       	eor	r1, r1
   1cb54:	30 19       	sub	r19, r0
   1cb56:	30 5d       	subi	r19, 0xD0	; 208
   1cb58:	31 93       	st	Z+, r19
   1cb5a:	de f6       	brtc	.-74     	; 0x1cb12 <__ultoa_invert+0xe>
   1cb5c:	cf 01       	movw	r24, r30
   1cb5e:	08 95       	ret
   1cb60:	46 2f       	mov	r20, r22
   1cb62:	47 70       	andi	r20, 0x07	; 7
   1cb64:	40 5d       	subi	r20, 0xD0	; 208
   1cb66:	41 93       	st	Z+, r20
   1cb68:	b3 e0       	ldi	r27, 0x03	; 3
   1cb6a:	0f d0       	rcall	.+30     	; 0x1cb8a <__ultoa_invert+0x86>
   1cb6c:	c9 f7       	brne	.-14     	; 0x1cb60 <__ultoa_invert+0x5c>
   1cb6e:	f6 cf       	rjmp	.-20     	; 0x1cb5c <__ultoa_invert+0x58>
   1cb70:	46 2f       	mov	r20, r22
   1cb72:	4f 70       	andi	r20, 0x0F	; 15
   1cb74:	40 5d       	subi	r20, 0xD0	; 208
   1cb76:	4a 33       	cpi	r20, 0x3A	; 58
   1cb78:	18 f0       	brcs	.+6      	; 0x1cb80 <__ultoa_invert+0x7c>
   1cb7a:	49 5d       	subi	r20, 0xD9	; 217
   1cb7c:	31 fd       	sbrc	r19, 1
   1cb7e:	40 52       	subi	r20, 0x20	; 32
   1cb80:	41 93       	st	Z+, r20
   1cb82:	02 d0       	rcall	.+4      	; 0x1cb88 <__ultoa_invert+0x84>
   1cb84:	a9 f7       	brne	.-22     	; 0x1cb70 <__ultoa_invert+0x6c>
   1cb86:	ea cf       	rjmp	.-44     	; 0x1cb5c <__ultoa_invert+0x58>
   1cb88:	b4 e0       	ldi	r27, 0x04	; 4
   1cb8a:	a6 95       	lsr	r26
   1cb8c:	97 95       	ror	r25
   1cb8e:	87 95       	ror	r24
   1cb90:	77 95       	ror	r23
   1cb92:	67 95       	ror	r22
   1cb94:	ba 95       	dec	r27
   1cb96:	c9 f7       	brne	.-14     	; 0x1cb8a <__ultoa_invert+0x86>
   1cb98:	00 97       	sbiw	r24, 0x00	; 0
   1cb9a:	61 05       	cpc	r22, r1
   1cb9c:	71 05       	cpc	r23, r1
   1cb9e:	08 95       	ret
   1cba0:	9b 01       	movw	r18, r22
   1cba2:	ac 01       	movw	r20, r24
   1cba4:	0a 2e       	mov	r0, r26
   1cba6:	06 94       	lsr	r0
   1cba8:	57 95       	ror	r21
   1cbaa:	47 95       	ror	r20
   1cbac:	37 95       	ror	r19
   1cbae:	27 95       	ror	r18
   1cbb0:	ba 95       	dec	r27
   1cbb2:	c9 f7       	brne	.-14     	; 0x1cba6 <__ultoa_invert+0xa2>
   1cbb4:	62 0f       	add	r22, r18
   1cbb6:	73 1f       	adc	r23, r19
   1cbb8:	84 1f       	adc	r24, r20
   1cbba:	95 1f       	adc	r25, r21
   1cbbc:	a0 1d       	adc	r26, r0
   1cbbe:	08 95       	ret

0001cbc0 <_exit>:
   1cbc0:	f8 94       	cli

0001cbc2 <__stop_program>:
   1cbc2:	ff cf       	rjmp	.-2      	; 0x1cbc2 <__stop_program>
